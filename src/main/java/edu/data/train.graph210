class C{  private final void scaleNoiseArray(final int seaLevel){  for (int x=0; x < X_SECTIONS; x++) {    for (int z=0; z < Z_SECTIONS; z++) {      for (int y=0; y < Y_SECTIONS; y++) {        this.rawDensity[x][y][z]*=MAX_ELEV;        this.rawDensity[x][y][z]+=seaLevel;      }    }  }}  }
class C{  public static void copyDirectory(File srcDir,File destDir,FileFilter filter,boolean preserveFileDate) throws IOException {  if (srcDir == null) {    throw new NullPointerException("Source must not be null");  } else   if (destDir == null) {    throw new NullPointerException("Destination must not be null");  } else   if (!srcDir.exists()) {    throw new FileNotFoundException("Source \'" + srcDir + "\' does not exist");  } else   if (!srcDir.isDirectory()) {    throw new IOException("Source \'" + srcDir + "\' exists but is not a directory");  } else   if (srcDir.getCanonicalPath().equals(destDir.getCanonicalPath())) {    throw new IOException("Source \'" + srcDir + "\' and destination \'"+ destDir+ "\' are the same");  } else {    ArrayList exclusionList=null;    if (destDir.getCanonicalPath().startsWith(srcDir.getCanonicalPath())) {      File[] srcFiles=filter == null ? srcDir.listFiles() : srcDir.listFiles(filter);      if (srcFiles != null && srcFiles.length > 0) {        exclusionList=new ArrayList(srcFiles.length);        File[] arr$=srcFiles;        int len$=srcFiles.length;        for (int i$=0; i$ < len$; ++i$) {          File srcFile=arr$[i$];          File copiedFile=new File(destDir,srcFile.getName());          exclusionList.add(copiedFile.getCanonicalPath());        }      }    }    doCopyDirectory(srcDir,destDir,filter,preserveFileDate,exclusionList);  }}  }
class C{  public JnaServiceConnection(FbClientLibrary clientLibrary,IServiceProperties connectionProperties,IEncodingFactory encodingFactory) throws SQLException {  super(clientLibrary,connectionProperties,encodingFactory);}  }
class C{  public final StringBuffer format(Object[] arguments,StringBuffer result,FieldPosition pos){  return subformat(arguments,result,pos,null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:57.368 -0500",hash_original_method="F5882907CA59BB2AE2BDFE73A922FA4E",hash_generated_method="B4A836F71336588F640BAABDA130A5C2") public LayoutAnimationController(Animation animation){  this(animation,0.5f);}  }
class C{  public boolean isNullValueAllowed(){  return isNullValueAllowed;}  }
class C{  public static LatLon rhumbEndPosition(LatLon p,Angle rhumbAzimuth,Angle pathLength){  if (p == null) {    throw new IllegalArgumentException("LatLon Is Null");  }  if (rhumbAzimuth == null || pathLength == null) {    throw new IllegalArgumentException("Angle Is Null");  }  double lat1=p.getLatitude().radians;  double lon1=p.getLongitude().radians;  double azimuth=rhumbAzimuth.radians;  double distance=pathLength.radians;  if (distance == 0)   return p;  double lat2=lat1 + distance * Math.cos(azimuth);  double dPhi=Math.log(Math.tan(lat2 / 2.0 + Math.PI / 4.0) / Math.tan(lat1 / 2.0 + Math.PI / 4.0));  double q=(lat2 - lat1) / dPhi;  if (Double.isNaN(dPhi) || Double.isNaN(q) || Double.isInfinite(q)) {    q=Math.cos(lat1);  }  double dLon=distance * Math.sin(azimuth) / q;  if (Math.abs(lat2) > Math.PI / 2.0) {    lat2=lat2 > 0 ? Math.PI - lat2 : -Math.PI - lat2;  }  double lon2=(lon1 + dLon + Math.PI) % (2 * Math.PI) - Math.PI;  if (Double.isNaN(lat2) || Double.isNaN(lon2))   return p;  return new LatLon(Angle.fromRadians(lat2).normalizedLatitude(),Angle.fromRadians(lon2).normalizedLongitude());}  }
class C{  public void removeHistoryChangedListener(HistoryChangedListener l){  m_HistoryChangedListeners.remove(l);}  }
class C{  protected int readFully(InputStream in,byte buffer[]) throws java.io.IOException {  for (int i=0; i < buffer.length; i++) {    int q=in.read();    if (q == -1)     return i;    buffer[i]=(byte)q;  }  return buffer.length;}  }
class C{  public static void validate(Properties ctx){  try {    checkTableSequences(ctx,null);    checkTableID(ctx,null);    checkClientSequences(ctx,null);  } catch (  Exception e) {    s_log.log(Level.SEVERE,"validate",e);  }}  }
class C{  private void initPanel(){  final JPanel mainPanel=new JPanel(new BorderLayout());  mainPanel.setBorder(new TitledBorder("Edit Indegree Condition"));  final JPanel operatorPanel=new JPanel(new BorderLayout());  operatorPanel.setBorder(new EmptyBorder(5,5,5,5));  operatorPanel.add(m_operatorBox,BorderLayout.CENTER);  final JPanel inputPanel=new JPanel(new BorderLayout());  inputPanel.setBorder(new EmptyBorder(5,0,5,5));  inputPanel.add(m_inputField,BorderLayout.CENTER);  final JPanel containerPanel=new JPanel(new BorderLayout());  containerPanel.add(operatorPanel,BorderLayout.WEST);  containerPanel.add(inputPanel,BorderLayout.CENTER);  mainPanel.add(containerPanel,BorderLayout.NORTH);  add(mainPanel,BorderLayout.CENTER);}  }
class C{  public ElbowLiner(){  this(20);}  }
class C{  public boolean isReceiver(){  return argumentIndex == -1;}  }
class C{  public <T>T evaluate(Expression expression,Class<T> desiredResultType,Map<String,Object> variables){  StandardEvaluationContext context=new StandardEvaluationContext();  if (variables != null) {    context.setVariables(variables);  }  return expression.getValue(context,desiredResultType);}  }
class C{  public void unregisterOnTrayPreferenceChangeListener(@NonNull OnTrayPreferenceChangeListener listener){  getStorage().unregisterOnTrayPreferenceChangeListener(listener);}  }
class C{  public double distance(Vector3 point){  double xd=this.x - point.x;  double yd=this.y - point.y;  double zd=this.z - point.z;  return Math.sqrt(xd * xd + yd * yd + zd * zd);}  }
class C{  public boolean hasName(){  return fieldSetFlags()[1];}  }
class C{  public boolean canStartDecoding(int remaining){  if (remaining >= decoderBufferAmount) {    return true;  } else {    return false;  }}  }
class C{  public static char[] encodeHex(final byte[] data){  return encodeHex(data,true);}  }
class C{  public String seedTipText(){  return "The seed used for randomizing the data " + "when reduced-error pruning is used.";}  }
class C{  public boolean userCanDeleteUser(int connectedUserId,int UserId,String entidad) throws Exception {  boolean can=false;  int parentId=ISicresAdminDefsKeys.NULL_ID;  int deptMgrId=ISicresAdminDefsKeys.NULL_ID;  try {    parentId=getUserParentId(UserId,entidad);    deptMgrId=getDeptMgrId(parentId,entidad);    can=hasUserAuth(connectedUserId,USER_ACTION_ID_DELETE,deptMgrId,ISicresAdminDefsKeys.NULL_ID,entidad);  } catch (  Exception e) {    _logger.error(e);    throw e;  }  return can;}  }
class C{  private void disposeCurrentConfiguration(){  mChannelConnectionMap.clear();  for (  AudioOutputConnection connection : mAudioOutputConnections) {    connection.dispose();  }  mAvailableConnectionCount=0;  mAudioOutputConnections.clear();  mAudioOutputMap.clear();  mLowestPriorityConnection=null;}  }
class C{  public ServicesStillPublishedException(String message){  super(message);}  }
class C{  private boolean handleHorizontalFocusWithinListItem(int direction){  if (direction != View.FOCUS_UP && direction != View.FOCUS_DOWN) {    throw new IllegalArgumentException("direction must be one of" + " {View.FOCUS_UP, View.FOCUS_DOWN}");  }  final int numChildren=getChildCount();  if (mItemsCanFocus && numChildren > 0 && mSelectedPosition != INVALID_POSITION) {    final View selectedView=getSelectedView();    if (selectedView != null && selectedView.hasFocus() && selectedView instanceof ViewGroup) {      final View currentFocus=selectedView.findFocus();      final View nextFocus=FocusFinder.getInstance().findNextFocus((ViewGroup)selectedView,currentFocus,direction);      if (nextFocus != null) {        currentFocus.getFocusedRect(mTempRect);        offsetDescendantRectToMyCoords(currentFocus,mTempRect);        offsetRectIntoDescendantCoords(nextFocus,mTempRect);        if (nextFocus.requestFocus(direction,mTempRect)) {          return true;        }      }      final View globalNextFocus=FocusFinder.getInstance().findNextFocus((ViewGroup)getRootView(),currentFocus,direction);      if (globalNextFocus != null) {        return isViewAncestorOf(globalNextFocus,this);      }    }  }  return false;}  }
class C{  private void validatePatch(State current,State patch){  ValidationUtils.validatePatch(current,patch);  ValidationUtils.validateTaskStageProgression(current.taskState,patch.taskState);}  }
class C{  public org.json.JSONArray optJSONArray(String key){  Object o=this.opt(key);  return o instanceof org.json.JSONArray ? (org.json.JSONArray)o : null;}  }
class C{  @RequestMapping(value="/api/containers/docker/{containerName}",method=RequestMethod.GET) public void infoContainer(HttpServletRequest request,HttpServletResponse response,@PathVariable String containerName) throws ServiceException, CheckException {  try {    String containerId=dockerService.getContainerId(containerName);    String responseFromCAdvisor=monitoringService.getJsonFromCAdvisor(containerId);    if (logger.isDebugEnabled()) {      logger.debug("containerId=" + containerId);      logger.debug("responseFromCAdvisor=" + responseFromCAdvisor);    }    response.getWriter().write(responseFromCAdvisor);    response.flushBuffer();  } catch (  Exception e) {    logger.error("error during write and flush response",containerName);  }}  }
class C{  public static <S>S loadFromSystemProperty(final Class<S> service){  try {    final String className=System.getProperty(service.getName());    if (className != null) {      Class<?> c=ClassLoader.getSystemClassLoader().loadClass(className);      return (S)c.newInstance();    }    return null;  } catch (  Exception e) {    throw new Error(e);  }}  }
class C{  static Point toOtherWindow(long src,long dst,int x,int y){  Point rpt=new Point(0,0);  XBaseWindow srcPeer=XToolkit.windowToXWindow(src);  XBaseWindow dstPeer=XToolkit.windowToXWindow(dst);  if (srcPeer != null && dstPeer != null) {    rpt.x=x + srcPeer.getAbsoluteX() - dstPeer.getAbsoluteX();    rpt.y=y + srcPeer.getAbsoluteY() - dstPeer.getAbsoluteY();  } else   if (dstPeer != null && XlibUtil.isRoot(src,dstPeer.getScreenNumber())) {    rpt.x=x - dstPeer.getAbsoluteX();    rpt.y=y - dstPeer.getAbsoluteY();  } else   if (srcPeer != null && XlibUtil.isRoot(dst,srcPeer.getScreenNumber())) {    rpt.x=x + srcPeer.getAbsoluteX();    rpt.y=y + srcPeer.getAbsoluteY();  } else {    rpt=XlibUtil.translateCoordinates(src,dst,new Point(x,y));  }  return rpt;}  }
class C{  public boolean isMovementPossible(IGame game,Coords src,int srcEl){  final IHex srcHex=game.getBoard().getHex(src);  final Coords dest=getPosition();  final IHex destHex=game.getBoard().getHex(dest);  final Entity entity=getEntity();  if (null == dest) {    System.err.println("step has no position");    throw new IllegalStateException("Step has no position.");  }  if (src.distance(dest) > 1) {    StringBuffer buf=new StringBuffer();    buf.append("Coordinates ").append(src.toString()).append(" and ").append(dest.toString()).append(" are not adjacent.");    System.err.println(buf.toString());    throw new IllegalArgumentException(buf.toString());  }  if (entity.isAssaultDropInProgress() || entity.isDropping()) {    return false;  }  if ((entity instanceof Tank) && !entity.getCrew().isUnconscious() && ((type == MoveStepType.UNJAM_RAC) || (type == MoveStepType.EJECT) || (type == MoveStepType.SEARCHLIGHT))) {    return true;  }  if ((type == MoveStepType.STARTUP) && !entity.getCrew().isUnconscious()) {    return true;  }  if ((type == MoveStepType.SELF_DESTRUCT) && !entity.getCrew().isUnconscious()) {    return true;  }  if (entity.isImmobile()) {    return false;  }  if (entity.isHidden() || entity.isHiddenActivating()) {    return false;  }  if (!game.getBoard().contains(dest)) {    return false;  }  if (destHex.containsTerrain(Terrains.IMPASSABLE)) {    return false;  }  final int srcAlt=srcEl + srcHex.getLevel();  final int destAlt=elevation + destHex.getLevel();  Building bld=game.getBoard().getBuildingAt(dest);  if (bld != null) {    if (src.equals(dest) && (srcAlt != destAlt) && (entity instanceof Protomech)&& (getMovementType(false) == EntityMovementType.MOVE_JUMP)) {      return false;    }    IHex hex=game.getBoard().getHex(getPosition());    int maxElevation=(2 + entity.getElevation() + game.getBoard().getHex(entity.getPosition()).surface()) - hex.surface();    if ((bld.getType() == Building.WALL) && (maxElevation < hex.terrainLevel(Terrains.BLDG_ELEV))) {      return false;    }    if ((elevation < hex.terrainLevel(Terrains.BLDG_ELEV)) && (bld.getArmor(dest) > 0) && !(entity instanceof Infantry)) {      return false;    }    if ((elevation < hex.terrainLevel(Terrains.BLDG_ELEV)) && (bld.getBldgClass() == Building.GUN_EMPLACEMENT) && !(entity instanceof Infantry)) {      return false;    }  }  if (!(entity instanceof VTOL) && isThisStepBackwards() && !(isJumping() && (entity.getJumpType() == Mech.JUMP_BOOSTER))&& (((destAlt != srcAlt) && !game.getOptions().booleanOption("tacops_walk_backwards")) || (game.getOptions().booleanOption("tacops_walk_backwards") && (Math.abs(destAlt - srcAlt) > 1)))) {    return false;  }  if (Entity.NONE != entity.getSwarmTargetId()) {    return false;  }  if (type == MoveStepType.MOUNT) {    return true;  }  if (type == MoveStepType.LOAD) {    if (!firstStep) {      return false;    }    Entity other=null;    Iterator<Entity> entities=game.getEntities(src);    while (entities.hasNext()) {      other=entities.next();      if (!entity.getOwner().isEnemyOf(other.getOwner()) && !entity.equals(other)) {        if (!entity.canLoad(other)) {          return false;        }        if (!other.isLoadableThisTurn()) {          return false;        }        break;      }      other=null;    }    if (other == null) {      return false;    }  }  boolean bDumping=false;  for (  Mounted mo : entity.getAmmo()) {    if (mo.isDumping()) {      bDumping=true;      break;    }  }  if (bDumping && ((movementType == EntityMovementType.MOVE_RUN) || (movementType == EntityMovementType.MOVE_SPRINT) || (movementType == EntityMovementType.MOVE_VTOL_RUN)|| (movementType == EntityMovementType.MOVE_JUMP))) {    return false;  }  EntityMovementMode nMove=entity.getMovementMode();  if ((movementType == EntityMovementType.MOVE_JUMP) && (nMove == EntityMovementMode.VTOL)) {    return false;  }  if ((movementType != EntityMovementType.MOVE_JUMP) && (nMove != EntityMovementMode.VTOL)) {    if ((((srcAlt - destAlt) > 0) && ((srcAlt - destAlt) > entity.getMaxElevationDown(srcAlt))) || (((destAlt - srcAlt) > 0) && ((destAlt - srcAlt) > entity.getMaxElevationChange()))) {      return false;    }  }  if ((entity instanceof Mech) && ((srcAlt - destAlt) > 2)) {    setLeapDistance(srcAlt - destAlt);  }  if (((type == MoveStepType.BACKWARDS) || (type == MoveStepType.LATERAL_LEFT_BACKWARDS) || (type == MoveStepType.LATERAL_RIGHT_BACKWARDS)) && (destAlt != srcAlt) && !(entity instanceof VTOL)&& !(isJumping() && (entity.getJumpType() == Mech.JUMP_BOOSTER))) {    if (game.getOptions().booleanOption("tacops_walk_backwards") && (Math.abs(destAlt - srcAlt) > 1)) {      return false;    }    if (!game.getOptions().booleanOption("tacops_walk_backwards") && (destAlt != srcAlt)) {      return false;    }  }  if ((type == MoveStepType.BACKWARDS) && (nMove == EntityMovementMode.WIGE)) {    return false;  }  if (((movementType == EntityMovementType.MOVE_RUN) || (movementType == EntityMovementType.MOVE_SPRINT) || (movementType == EntityMovementType.MOVE_VTOL_RUN)) && (nMove != EntityMovementMode.HOVER) && (nMove != EntityMovementMode.NAVAL)&& (nMove != EntityMovementMode.HYDROFOIL)&& (nMove != EntityMovementMode.SUBMARINE)&& (nMove != EntityMovementMode.INF_UMU)&& (nMove != EntityMovementMode.VTOL)&& (nMove != EntityMovementMode.WIGE)&& (destHex.terrainLevel(Terrains.WATER) > 0)&& !(destHex.containsTerrain(Terrains.ICE) && (elevation >= 0))&& !dest.equals(entity.getPosition())&& !isFirstStep()&& !isPavementStep()) {    return false;  }  if (!isJumping() && (type != MoveStepType.CHARGE) && (type != MoveStepType.DFA)) {    if ((entity instanceof Mech) && Compute.isEnemyIn(game,entity,dest,true,true,getElevation())) {      return false;    }    if (Compute.isEnemyIn(game,entity,src,false,entity instanceof Mech,srcEl) && !src.equals(entity.getPosition()) && (type != MoveStepType.TURN_LEFT)&& (type != MoveStepType.TURN_RIGHT)&& (type != MoveStepType.UNLOAD)&& (type != MoveStepType.GO_PRONE)) {      return false;    }    if (!(entity instanceof Infantry)) {      for (      Entity inHex : game.getEntitiesVector(src)) {        if (inHex.equals(entity)) {          continue;        }        if ((inHex instanceof LargeSupportTank) || ((inHex instanceof Dropship) && !inHex.isAirborne() && !inHex.isSpaceborne())) {          if (getElevation() <= inHex.height()) {            return false;          }        }      }    }  }  if ((movementType == EntityMovementType.MOVE_JUMP) && (destAlt > (entity.getElevation() + entity.game.getBoard().getHex(entity.getPosition()).getLevel() + entity.getJumpMPWithTerrain()+ (type == MoveStepType.DFA ? 1 : 0)))) {    return false;  }  if (entity.isLocationProhibited(dest,getElevation()) && (type != MoveStepType.UNLOAD) && (type != MoveStepType.VTAKEOFF)&& (!isPavementStep() || (nMove == EntityMovementMode.NAVAL) || (nMove == EntityMovementMode.HYDROFOIL)|| (nMove == EntityMovementMode.SUBMARINE))&& (movementType != EntityMovementType.MOVE_VTOL_WALK)&& (movementType != EntityMovementType.MOVE_VTOL_RUN)) {    if (isJumping()) {      terrainInvalid=true;    } else {      return false;    }  }  if ((entity instanceof Dropship) && !entity.isAirborne() && isPavementStep()&& entity.isLocationProhibited(dest,getElevation())&& (movementType != EntityMovementType.MOVE_SAFE_THRUST)) {    for (int dir=0; dir < 6; dir++) {      Coords secondaryCoords=dest.translated(dir);      IHex secondaryHex=game.getBoard().getHex(secondaryCoords);      if (!secondaryHex.hasPavement()) {        return false;      }    }  }  if (!(src.equals(dest)) && (src != entity.getPosition()) && (isJumping() || (entity.getMovementMode() == EntityMovementMode.VTOL))&& (srcEl < srcHex.terrainLevel(Terrains.BLDG_ELEV))) {    return false;  }  if ((movementType != EntityMovementType.MOVE_JUMP) && (movementType != EntityMovementType.MOVE_VTOL_WALK) && (movementType != EntityMovementType.MOVE_VTOL_RUN)&& (type != MoveStepType.UNLOAD)&& (type != MoveStepType.VTAKEOFF)&& entity.isLocationProhibited(src,getElevation())&& !isPavementStep()) {    return false;  }  if (type == MoveStepType.UP) {    if (!(entity.canGoUp(elevation - 1,getPosition()))) {      return false;    }  }  if (type == MoveStepType.DOWN) {    if (!(entity.canGoDown(elevation + 1,getPosition()))) {      return false;    }  }  if (entity instanceof VTOL) {    if ((type == MoveStepType.BACKWARDS) || (type == MoveStepType.FORWARDS) || (type == MoveStepType.LATERAL_LEFT)|| (type == MoveStepType.LATERAL_LEFT_BACKWARDS)|| (type == MoveStepType.LATERAL_RIGHT)|| (type == MoveStepType.LATERAL_RIGHT_BACKWARDS)|| (type == MoveStepType.TURN_LEFT)|| (type == MoveStepType.TURN_RIGHT)) {      if (elevation == 0) {        return false;      }    }  }  if ((entity instanceof VTOL) && ((type == MoveStepType.BACKWARDS) || (type == MoveStepType.FORWARDS))) {    if (elevation <= (destHex.ceiling() - destHex.surface())) {      return false;    }  }  if ((type != MoveStepType.DFA) && !entity.isElevationValid(elevation,destHex)) {    if (isJumping()) {      terrainInvalid=true;    } else {      return false;    }  }  return true;}  }
class C{  public VirtualFile resolve(String pathStr){  return resolve((SinglePathResolver)null,pathStr);}  }
class C{  public boolean isSetWaitingOnJobs(){  return this.waitingOnJobs != null;}  }
class C{  public StandardXYToolTipGenerator(String formatString,NumberFormat xFormat,NumberFormat yFormat){  super(formatString,xFormat,yFormat);}  }
class C{  public static int back(HGSearchResult<?> rs,int maxSteps){  int i=0;  for (; i < maxSteps && rs.hasPrev(); i++)   rs.prev();  return i;}  }
class C{  public boolean isVisible(RenderingContext renderingContext,Box thisElement){  IdentValue val=getIdent(CSSName.VISIBILITY);  if (val == IdentValue.VISIBLE)   return true;  if (renderingContext != null) {    if (val == IdentValue.FS_TABLE_PAGINATE_REPEATED_VISIBLE) {      Box parentElement=thisElement.getParent();      while (parentElement != null && !(parentElement.getStyle().isTable() && ((TableBox)parentElement).hasContentLimitContainer()))       parentElement=parentElement.getDocumentParent();      if (parentElement != null) {        TableBox tableBox=(TableBox)parentElement;        return !tableBox.isTableRenderedOnFirstPage(renderingContext);      }    }  }  return false;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node newNode;  String newValue;  NamedNodeMap nodeMap;  DocumentType docType;  doc=(Document)load("staff",true);  docType=doc.getDoctype();  assertNotNull("docTypeNotNull",docType);  nodeMap=docType.getEntities();  assertNotNull("entitiesNotNull",nodeMap);  newNode=nodeMap.getNamedItem("ent1");  assertNotNull("entityNotNull",newNode);  newValue=newNode.getNodeValue();  assertNull("initiallyNull",newValue);  newNode.setNodeValue("This should have no effect");  newValue=newNode.getNodeValue();  assertNull("nullAfterAttemptedChange",newValue);}  }
class C{  public void zoomBy(float ratio){  float zoomDegrees=model.getFieldOfView();  zoomDegrees=Math.min(zoomDegrees * ratio,MAX_ZOOM_OUT);  setFieldOfView(zoomDegrees);}  }
class C{  public static TimeOfDay fromMillisOfDay(long millisOfDay,Chronology chrono){  chrono=DateTimeUtils.getChronology(chrono);  chrono=chrono.withUTC();  return new TimeOfDay(millisOfDay,chrono);}  }
class C{  public WordCount(){}  }
class C{  public void add(IPoint pt){  if (inProgress) {    throw new ConcurrentModificationException("Can't add point while iterator in progress");  }  points.add(pt);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.RECORD_ENTITY___ANONYMOUS_RECORD_ENTITY_21:    return ((InternalEList<?>)getAnonymous_recordEntity_2_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public void recalculateAndRedraw(boolean withAnimation){  if (epgData != null && epgData.hasData()) {    resetBoundaries();    calculateMaxVerticalScroll();    calculateMaxHorizontalScroll();    mScroller.startScroll(getScrollX(),getScrollY(),getXPositionStart() - getScrollX(),0,withAnimation ? 600 : 0);    redraw();  }}  }
class C{  public static void apply(View v,int rippleColor,Drawable drawable,ImageView.ScaleType scaleType){  RippleConfig config=new RippleConfig();  config.setRippleColor(rippleColor);  config.setBackgroundDrawable(drawable);  config.setScaleType(scaleType);  apply(v,config,null);}  }
class C{  public static DoubleVector middle(IntVector v1,IntVector v2){  double x=(v1.x + v2.x) / 2d, y=(v1.y + v2.y) / 2d, z=(v1.z + v2.z) / 2d;  return new DoubleVector(x,y,z);}  }
class C{  private void verifyIsRoot(){  if (hierarchyElements.size() != 0) {    throw new IllegalStateException("This is not the root. Can " + "only call addCounter() on the root node. Current node: " + hierarchy);  }}  }
class C{  final public boolean isFull(){  return size == capacity;}  }
class C{  public AddressImpl parseAddress(String address) throws ParseException {  AddressParser addressParser=new AddressParser(address);  return addressParser.address(true);}  }
class C{  @Override public String toString(){  return _inetAddress + "/" + _subnetBits;}  }
class C{  public boolean requiresConnection(){  return false;}  }
class C{  public boolean isSOTrx(){  Object oo=get_Value(COLUMNNAME_IsSOTrx);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void close(){  str=null;}  }
class C{  public boolean isWriteChecksum(){  return writeChecksum;}  }
class C{  public TimePeriodValuesCollection(TimePeriodValues series){  this.data=new java.util.ArrayList();  this.xPosition=TimePeriodAnchor.MIDDLE;  this.domainIsPointsInTime=false;  if (series != null) {    this.data.add(series);    series.addChangeListener(this);  }}  }
class C{  public void removeConsoleId(){  this.consoleId.remove();}  }
class C{  public ZipTextExtractor(Configuration conf){  this.conf=conf;  this.MIME=new MimeUtil(conf);}  }
class C{  public CPanel(){  super();  init();}  }
class C{  void postInit(XCreateWindowParams params){  super.postInit(params);  Vector targetMenuVector=AWTAccessor.getMenuBarAccessor().getMenus(menuBarTarget);  Menu targetHelpMenu=AWTAccessor.getMenuBarAccessor().getHelpMenu(menuBarTarget);  reloadItems(targetMenuVector);  if (targetHelpMenu != null) {    addHelpMenu(targetHelpMenu);  }  xSetVisible(true);  toFront();}  }
class C{  public Element lock(){  state.locked=true;  if (state.attributes != null) {    for (    Attribute att : state.attributes.values()) {      att.lock();    }  }  if (state.elements != null) {    for (    Object childObj : state.elements.values()) {      if (childObj instanceof Element) {        ((Element)childObj).lock();      } else {        for (        Element child : castElementCollection(childObj)) {          child.lock();        }      }    }  }  return this;}  }
class C{  @Override public ClientSocket open(){  State state=_state;  if (!state.isInit())   return null;  ClientSocket stream=openRecycle();  if (stream != null)   return stream;  return connect();}  }
class C{  public JavaClassWriter(String outputFolder,String className) throws FileNotFoundException {  if (className.indexOf("..") > -1) {    throw new FileNotFoundException("Invalid class name: " + className);  }  this.out=new PrintStream(new FileOutputStream(outputFolder + "/" + className+ ".java"));  this.className=className;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean equals(SnmpIndex index){  if (size != index.getNbComponents())   return false;  SnmpOid oid1;  SnmpOid oid2;  Vector<SnmpOid> components=index.getComponents();  for (int i=0; i < size; i++) {    oid1=oids.elementAt(i);    oid2=components.elementAt(i);    if (oid1.equals(oid2) == false)     return false;  }  return true;}  }
class C{  private boolean qualifiesOrNode(final IAbstractCriteriumTreeNode node,final NaviNode naviNode){  final List<? extends IAbstractCriteriumTreeNode> children=node.getChildren();  if (children.size() < 2) {    throw new IllegalStateException("IE01141: OR operator has less than two child criteria.");  }  for (  final IAbstractCriteriumTreeNode child : node.getChildren()) {    if (qualifies(child,naviNode)) {      return true;    }  }  return false;}  }
class C{  private boolean resize(int newCapacity){  int newLength=newCapacity * 2;  Object[] oldTable=table;  int oldLength=oldTable.length;  if (oldLength == 2 * MAXIMUM_CAPACITY) {    if (size == MAXIMUM_CAPACITY - 1)     throw new IllegalStateException("Capacity exhausted.");    return false;  }  if (oldLength >= newLength)   return false;  Object[] newTable=new Object[newLength];  for (int j=0; j < oldLength; j+=2) {    Object key=oldTable[j];    if (key != null) {      Object value=oldTable[j + 1];      oldTable[j]=null;      oldTable[j + 1]=null;      int i=hash(key,newLength);      while (newTable[i] != null)       i=nextKeyIndex(i,newLength);      newTable[i]=key;      newTable[i + 1]=value;    }  }  table=newTable;  return true;}  }
class C{  void controlTypeChanged(){  setUpControlType((String)typeBox.getSelectedItem());}  }
class C{  public AcronymDataArrayAdapter(Context context,List<AcronymExpansion> objects){  super(context,R.layout.acronym_data_row,objects);}  }
class C{  public static Color rgba(int red,int green,int blue,int alpha){  if (red > 255 || red < 0 || green > 255 || green < 0 || blue > 255 || blue < 0 || alpha > 255 || blue < 0) {    throw new ColorRangeException(red,green,blue,alpha);  }  return rgbac(red,green,blue,alpha);}  }
class C{  public void init(Compiler compiler,int opPos,int stepType) throws javax.xml.transform.TransformerException {  super.init(compiler,opPos,stepType);switch (stepType) {case OpCodes.OP_FUNCTION:case OpCodes.OP_EXTFUNCTION:    m_mustHardReset=true;case OpCodes.OP_GROUP:case OpCodes.OP_VARIABLE:  m_expr=compiler.compile(opPos);m_expr.exprSetParent(this);if (m_expr instanceof org.apache.xpath.operations.Variable) {m_canDetachNodeset=false;}break;default :m_expr=compiler.compile(opPos + 2);m_expr.exprSetParent(this);}}  }
class C{  public boolean isStopped(){  return mCursor == null || mCursor.isClosed();}  }
class C{  public static MultipleGradientPaint.ColorSpaceEnum convertColorInterpolation(Element e){  Value v=getComputedStyle(e,SVGCSSEngine.COLOR_INTERPOLATION_INDEX);  return (CSS_LINEARRGB_VALUE == v.getStringValue()) ? MultipleGradientPaint.LINEAR_RGB : MultipleGradientPaint.SRGB;}  }
class C{  public static void createHorizontalSpacer(Composite comp,int numlines){  Label lbl=new Label(comp,SWT.NONE);  GridData gd=new GridData(GridData.FILL_HORIZONTAL);  gd.horizontalSpan=numlines;  lbl.setLayoutData(gd);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.940 -0400",hash_original_method="06A6660F6D4FB6BA3833CB3AAC8DFB22",hash_generated_method="049BA740F9079675A50AF06E16F6B47E") public DelegateFileFilter(FilenameFilter filter){  if (filter == null) {    throw new IllegalArgumentException("The FilenameFilter must not be null");  }  this.filenameFilter=filter;  this.fileFilter=null;}  }
class C{  private void finishValidate() throws SAXException {  if (md.schemaUriRef != null) {    try {      if (md.attributeActions != null) {        Schema schema=createSubSchema(true);        md.attributeActions.addSchema(schema);      }      if (md.actions != null) {        Schema schema=createSubSchema(false);        md.actions.addNoResultAction(new ValidateAction(md.modeUsage,schema));      }    } catch (    IncorrectSchemaException e) {      hadError=true;    }catch (    IOException e) {      throw new WrappedIOException(e);    }  }}  }
class C{  private static int extremaTests(){  int failures=0;  failures+=addWithoutException(valueOf(1,-Integer.MAX_VALUE),valueOf(2,Integer.MAX_VALUE),null);  failures+=addWithoutException(valueOf(1,-Integer.MAX_VALUE),valueOf(-2,Integer.MAX_VALUE),null);  return failures;}  }
class C{  public static boolean isSystemApplication(Context context){  if (context == null) {    return false;  }  return isSystemApplication(context,context.getPackageName());}  }
class C{  @EventHandler(ignoreCancelled=true) public void onPlayerMove(PlayerMoveEvent event){  handlePlayerMove(event);}  }
class C{  public void test_scheduleLjava_util_TimerTaskLjava_util_DateJ() throws Exception {  Timer t=null;  try {    t=new Timer();    TimerTestTask testTask=new TimerTestTask();    Date d=new Date(System.currentTimeMillis() + 100);    t.cancel();    try {      t.schedule(testTask,d,100);      fail("Scheduling a task after Timer.cancel() should throw exception");    } catch (    IllegalStateException expected) {    }    t=new Timer();    d=new Date(System.currentTimeMillis() + 100);    testTask=new TimerTestTask();    testTask.cancel();    try {      t.schedule(testTask,d,100);      fail("Scheduling a task after cancelling it should throw exception");    } catch (    IllegalStateException expected) {    }    t.cancel();    t=new Timer();    d=new Date(-100);    testTask=new TimerTestTask();    try {      t.schedule(testTask,d,100);      fail("Scheduling a task with negative delay should throw IllegalArgumentException");    } catch (    IllegalArgumentException expected) {    }    t.cancel();    t=new Timer();    d=new Date(System.currentTimeMillis() + 100);    testTask=new TimerTestTask();    try {      t.schedule(testTask,d,-100);      fail("Scheduling a task with negative period should throw IllegalArgumentException");    } catch (    IllegalArgumentException expected) {    }    t.cancel();    t=new Timer();    d=new Date(System.currentTimeMillis() + 100);    try {      t.schedule(null,d,10);      fail("Scheduling a null task should throw NullPointerException");    } catch (    NullPointerException expected) {    }    t.cancel();    t=new Timer();    testTask=new TimerTestTask();    try {      t.schedule(testTask,null,10);      fail("Scheduling a null task should throw NullPointerException");    } catch (    NullPointerException expected) {    }    t.cancel();    t=new Timer();    d=new Date(-100);    try {      t.schedule(null,d,10);      fail("Scheduling a null task with negative dates should throw IllegalArgumentException first");    } catch (    IllegalArgumentException expected) {    }    t.cancel();    t=new Timer();    d=new Date(System.currentTimeMillis() + 100);    testTask=new TimerTestTask();    t.schedule(testTask,d,100);    Thread.sleep(800);    assertTrue("TimerTask.run() method should have been called at least twice (" + testTask.wasRun() + ")",testTask.wasRun() >= 2);    t.cancel();    t=new Timer();    testTask=new TimerTestTask();    testTask.incrementCount(true);    d=new Date(System.currentTimeMillis() + 100);    t.schedule(testTask,d,100);    testTask=new TimerTestTask();    testTask.incrementCount(true);    d=new Date(System.currentTimeMillis() + 200);    t.schedule(testTask,d,100);    testTask=new TimerTestTask();    testTask.incrementCount(true);    d=new Date(System.currentTimeMillis() + 300);    t.schedule(testTask,d,200);    testTask=new TimerTestTask();    testTask.incrementCount(true);    d=new Date(System.currentTimeMillis() + 100);    t.schedule(testTask,d,200);    Thread.sleep(3000);    assertTrue("Multiple tasks should have incremented counter 24 times not " + timerCounter,timerCounter >= 24);    t.cancel();  }  finally {    if (t != null)     t.cancel();  }}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tThe delimiters to use\n" + "\t(default ' \\r\\n\\t.,;:'\"()?!').","delimiters",1,"-delimiters <value>"));  return result.elements();}  }
class C{  protected ScientificIntLiteralImpl(){  super();}  }
class C{  private void initializeFindText(){  mSettingFindTextProgrammatically=true;  String findText=null;  if (mSettingFindTextProgrammatically) {    findText=mFindInPageBridge.getPreviousFindText();    if (findText.isEmpty() && !mCurrentTab.isIncognito()) {      findText=mLastUserSearch;    }    mSearchKeyShouldTriggerSearch=true;  } else {    mSearchKeyShouldTriggerSearch=false;  }  mFindQuery.setText(findText);  mSettingFindTextProgrammatically=false;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("Join[");  sb.append(m_joinClause).append(" - Main=").append(m_mainTable).append("/").append(m_mainAlias).append(", Join=").append(m_joinTable).append("/").append(m_joinAlias).append(", Left=").append(m_left).append(", Condition=").append(m_condition).append("]");  return sb.toString();}  }
class C{  public CTextNode(final int nodeId,final double x,final double y,final double width,final double height,final Color color,final boolean selected,final boolean visible,final Set<CTag> tags,final List<IComment> comments,final SQLProvider provider){  super(nodeId,x,y,width,height,color,color.darker().darker(),selected,visible,tags,provider);  m_provider=Preconditions.checkNotNull(provider,"IE02393: provider argument can not be null");  CommentManager.get(m_provider).initializeTextNodeComment(this,comments);  CommentManager.get(m_provider).addListener(m_internalCommentListener);}  }
class C{  @RpcMethod public CreateImageResponse createImage(String imageId,String datastore) throws InterruptedException, RpcException {  SyncHandler<CreateImageResponse,Host.AsyncClient.create_image_call> syncHandler=new SyncHandler<>();  createImage(imageId,datastore,syncHandler);  syncHandler.await();  return ResponseValidator.checkCreateImageResponse(syncHandler.getResponse());}  }
class C{  public void mouseReleased(MouseEvent e){  events.clear();}  }
class C{  @Override protected void onResume(){  super.onResume();  Log.d(TAG,"onResume() - the activity has become visible (it is now \"resumed\")");}  }
class C{  public static <T,U>BiConsumer<T,U> wrap(BiConsumer<T,U> w){  TaskContext c=current();  if (c != null) {    return null;  }  return w;}  }
class C{  public int indexOfAny(CharSet charSet,int start,int length){  final int stop=start + length;  for (int i=start; i < stop; i++) {    if (charSet.contains(charAt(i)))     return i;  }  return -1;}  }
class C{  private void animatePropertyBy(int constantName,float startValue,float byValue){  if (mAnimatorMap.size() > 0) {    Animator animatorToCancel=null;    Set<Animator> animatorSet=mAnimatorMap.keySet();    for (    Animator runningAnim : animatorSet) {      PropertyBundle bundle=mAnimatorMap.get(runningAnim);      if (bundle.cancel(constantName)) {        if (bundle.mPropertyMask == NONE) {          animatorToCancel=runningAnim;          break;        }      }    }    if (animatorToCancel != null) {      animatorToCancel.cancel();    }  }  NameValuesHolder nameValuePair=new NameValuesHolder(constantName,startValue,byValue);  mPendingAnimations.add(nameValuePair);  View v=mView.get();  if (v != null) {    v.removeCallbacks(mAnimationStarter);    v.post(mAnimationStarter);  }}  }
class C{  public static Operator generateBranchPlan(AkibanInformationSchema ais,Table table){  final Operator indexScan=generateIndexScan(ais,table);  final Schema schema=SchemaCache.globalSchema(ais);  PrimaryKey pkey=table.getPrimaryKeyIncludingInternal();  IndexRowType indexType=schema.indexRowType(pkey.getIndex());  return generateBranchPlan(table,indexScan,indexType);}  }
class C{  public void addTuple(Map<K,V> tuple,Map<K,MutableDouble> map){  for (  Map.Entry<K,V> e : tuple.entrySet()) {    addEntry(e.getKey(),e.getValue(),map);  }}  }
class C{  public SitemapsMobileEntry(){  super();  this.getCategories().add(CATEGORY);}  }
class C{  public XMLSignatureException(String message){  super(message);}  }
class C{  protected JmsMessage addJmsMessageToDatabaseQueueImpl(String jmsQueueName,String messageText){  JmsMessageEntity jmsMessageEntity=jmsMessageDaoHelper.addJmsMessageToDatabaseQueue(jmsQueueName,messageText);  return new JmsMessage(jmsMessageEntity.getJmsQueueName(),jmsMessageEntity.getMessageText());}  }
class C{  public void lowGear(){  this.highGear.off();}  }
class C{  public DividerItemDecoration(Context context){  final TypedArray styledAttributes=context.obtainStyledAttributes(ATTRS);  mDivider=styledAttributes.getDrawable(0);  styledAttributes.recycle();}  }
class C{  public void startDownloadRepeat(final String hostname,final int port,final String uri,final int repeatWindow,final int reportPeriodMillis,final IRepeatListener repeatListener){  mRepeatWrapper.startDownloadRepeat(hostname,port,uri,repeatWindow,reportPeriodMillis,repeatListener);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static boolean wordMatchesNte(String source,String match){  if (match.length() == 0)   return true;  return findMatchingWordIndexNTE(source,match) > -1;}  }
class C{  private void saveMarker(){  boolean statistics=waypoint.getType() == WaypointType.STATISTICS;  if (statistics) {    waypoint.setName(statisticsName.getText().toString());  } else {    waypoint.setName(waypointName.getText().toString());    waypoint.setCategory(waypointMarkerType.getText().toString());    waypoint.setDescription(waypointDescription.getText().toString());  }  MyTracksProviderUtils.Factory.get(this).updateWaypoint(waypoint);}  }
class C{  public static EncodedImage createFromImage(Image i,boolean jpeg){  if (i instanceof EncodedImage) {    return ((EncodedImage)i);  }  ImageIO io=ImageIO.getImageIO();  if (io != null) {    String format;    if (jpeg) {      if (!io.isFormatSupported(ImageIO.FORMAT_JPEG)) {        format=ImageIO.FORMAT_PNG;      } else {        format=ImageIO.FORMAT_JPEG;      }    } else {      if (!io.isFormatSupported(ImageIO.FORMAT_PNG)) {        format=ImageIO.FORMAT_JPEG;      } else {        format=ImageIO.FORMAT_PNG;      }    }    try {      ByteArrayOutputStream bo=new ByteArrayOutputStream();      io.save(i,bo,format,0.9f);      Util.cleanup(bo);      EncodedImage enc=EncodedImage.create(bo.toByteArray());      enc.width=i.getWidth();      enc.height=i.getHeight();      if (format == ImageIO.FORMAT_JPEG) {        enc.opaque=true;        enc.opaqueChecked=true;      }      enc.cache=Display.getInstance().createSoftWeakRef(i);      return enc;    } catch (    IOException err) {      err.printStackTrace();    }  }  return null;}  }
class C{  public void show(IBinder windowToken){  final MenuBuilder menu=mMenu;  final AlertDialog.Builder builder=new AlertDialog.Builder(menu.getContext());  mPresenter=new ListMenuPresenter(builder.getContext(),com.android.internal.R.layout.list_menu_item_layout);  mPresenter.setCallback(this);  mMenu.addMenuPresenter(mPresenter);  builder.setAdapter(mPresenter.getAdapter(),this);  final View headerView=menu.getHeaderView();  if (headerView != null) {    builder.setCustomTitle(headerView);  } else {    builder.setIcon(menu.getHeaderIcon()).setTitle(menu.getHeaderTitle());  }  builder.setOnKeyListener(this);  mDialog=builder.create();  mDialog.setOnDismissListener(this);  WindowManager.LayoutParams lp=mDialog.getWindow().getAttributes();  lp.type=WindowManager.LayoutParams.TYPE_APPLICATION_ATTACHED_DIALOG;  if (windowToken != null) {    lp.token=windowToken;  }  lp.flags|=WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM;  mDialog.show();}  }
class C{  @POST @Path("/{id}/schedule-policies") @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.TENANT_ADMIN}) public SchedulePolicyResp createSchedulePolicy(@PathParam("id") URI id,PolicyParam param){  SchedulePolicyResp schedulePolicyResp=createPolicy(id,param);  auditOp(OperationTypeEnum.CREATE_SCHEDULE_POLICY,true,null,param.getPolicyName(),id.toString(),schedulePolicyResp.getId().toString());  return schedulePolicyResp;}  }
class C{  public JavaLogger(final Logger impl){  assert impl != null;  configure(impl);  quiet=quiet0;}  }
class C{  public void release(){  if (diskLog != null) {    try {      diskLog.release();    } catch (    ReplicatorException e) {      logger.warn("Unable to release log",e);    }catch (    InterruptedException e) {      logger.warn("Unexpected interruption while closing log",e);    }    diskLog=null;  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public Period multipliedBy(int scalar){  if (this == ZERO || scalar == 1) {    return this;  }  return create(Math.multiplyExact(years,scalar),Math.multiplyExact(months,scalar),Math.multiplyExact(days,scalar));}  }
class C{  @SuppressWarnings("unchecked") protected Node(final BTree btree){  super(btree,true);  final int branchingFactor=btree.branchingFactor;  data=new MutableNodeData(branchingFactor,btree.getIndexMetadata().getVersionTimestamps());  childRefs=new Reference[branchingFactor + 1];}  }
class C{  @SuppressWarnings("unchecked") public static Matcher<BindingSet>[] subjectPredicateObjectMatchers(Iterable<Statement> statements){  List<Matcher<? super BindingSet>> matchers=new ArrayList<>();  for (  Statement statement : statements) {    matchers.add(allOf(binds("s",statement.getSubject()),binds("p",statement.getPredicate()),binds("o",statement.getObject())));  }  return (Matcher<BindingSet>[])matchers.toArray(new Matcher<?>[matchers.size()]);}  }
class C{  public void startMonitoring(Context context,Handler target){  mTarget=target;  mContext=context;  mHandler=new MdstHandler(target.getLooper(),this);  IntentFilter filter=new IntentFilter();  filter.addAction(TelephonyIntents.ACTION_ANY_DATA_CONNECTION_STATE_CHANGED);  filter.addAction(TelephonyIntents.ACTION_DATA_CONNECTION_CONNECTED_TO_PROVISIONING_APN);  filter.addAction(TelephonyIntents.ACTION_DATA_CONNECTION_FAILED);  mContext.registerReceiver(new MobileDataStateReceiver(),filter);  mMobileDataState=PhoneConstants.DataState.DISCONNECTED;}  }
class C{  public void processingInstruction(String target,String data) throws SAXException {}  }
class C{  @Override protected void createActions(){  super.createActions();  GWTOpenEditorActionGroup gwtOpenEditorActionGroup=new GWTOpenEditorActionGroup(this);  try {    replaceOpenEditorAction(fActionGroups,gwtOpenEditorActionGroup);    Field contextMenuField=JavaEditor.class.getDeclaredField("fContextMenuGroup");    contextMenuField.setAccessible(true);    CompositeActionGroup contextMenuGroup=(CompositeActionGroup)contextMenuField.get(this);    replaceOpenEditorAction(contextMenuGroup,gwtOpenEditorActionGroup);  } catch (  Exception e) {    GWTPluginLog.logError(e);  }}  }
class C{  public static TypeReference newTypeParameterBoundReference(int sort,int paramIndex,int boundIndex){  return new TypeReference((sort << 24) | (paramIndex << 16) | (boundIndex << 8));}  }
class C{  public static void assertUiThread(){  if (!isInUiThread()) {    throw new RuntimeException("This call must be in UI thread");  }}  }
class C{  protected void parseSkew() throws ParseException, IOException {  current=reader.read();  if (current != 'e') {    reportCharacterExpectedError('e',current);    skipTransform();    return;  }  current=reader.read();  if (current != 'w') {    reportCharacterExpectedError('w',current);    skipTransform();    return;  }  current=reader.read();  boolean skewX=false;switch (current) {case 'X':    skewX=true;case 'Y':  break;default :reportCharacterExpectedError('X',current);skipTransform();return;}current=reader.read();skipSpaces();if (current != '(') {reportCharacterExpectedError('(',current);skipTransform();return;}current=reader.read();skipSpaces();float sk=parseFloat();skipSpaces();if (current != ')') {reportCharacterExpectedError(')',current);skipTransform();return;}if (skewX) {transformListHandler.skewX(sk);} else {transformListHandler.skewY(sk);}}  }
class C{  public void start(){  TurnNotifier.get().notifyInSeconds(seconds,this);}  }
class C{  public static Component createVerticalStrut(int height){  return new Filler(new Dimension(0,height),new Dimension(0,height),new Dimension(Short.MAX_VALUE,height));}  }
class C{  void sendMessage(Message stunMessage,TransportAddress srcAddr,TransportAddress remoteAddr) throws IllegalArgumentException, IOException {  sendMessage(stunMessage.encode(stunStack),srcAddr,remoteAddr);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Object o=stack.pop();  if (o instanceof sage.vfs.MediaNode)   o=((sage.vfs.MediaNode)o).getDataObject();  return Boolean.valueOf(o instanceof Agent);}  }
class C{  public List<AggregateInfo> listAggregates(String name){  if (log.isDebugEnabled()) {    log.debug("Listing Aggregates. Params [name]: " + name);  }  NetAppCAggregate aggr=new NetAppCAggregate(server.getNaServer(),name);  boolean listAll=false;  if (name == null || name.isEmpty()) {    listAll=true;  }  return aggr.listAllAggregates(listAll);}  }
class C{  public FieldPhraseList(FieldTermStack fieldTermStack,FieldQuery fieldQuery){  this(fieldTermStack,fieldQuery,Integer.MAX_VALUE);}  }
class C{  private static boolean resolveEnable(Context context){  int state=context.getPackageManager().getApplicationEnabledSetting(DOWNLOAD_MANAGER_PACKAGE_NAME);  if (Build.VERSION.SDK_INT > Build.VERSION_CODES.JELLY_BEAN_MR2) {    return !(state == PackageManager.COMPONENT_ENABLED_STATE_DISABLED || state == PackageManager.COMPONENT_ENABLED_STATE_DISABLED_USER || state == PackageManager.COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED);  } else {    return !(state == PackageManager.COMPONENT_ENABLED_STATE_DISABLED || state == PackageManager.COMPONENT_ENABLED_STATE_DISABLED_USER);  }}  }
class C{  public void clearLatitude(){  mHasLatitude=false;}  }
class C{  @Override public Value concatenate(Value v){  if (v instanceof SetVal) {    Set<Value> newSet=new LinkedHashSet<Value>(set);    newSet.addAll(((SetVal)v).getSubValues());    return new SetVal(newSet);  } else   if (v instanceof NoneVal) {    return this;  } else {    Set<Value> newSet=new LinkedHashSet<Value>(set);    newSet.add(v);    return new SetVal(newSet);  }}  }
class C{  public TooManyRequestsException(String message,Response response){  super(TOO_MANY_REQUESTS,message,response);}  }
class C{  public AtomProjection(HGHandle type,String name,HGHandle valueType,HGAtomRef.Mode mode){  super(new HGHandle[]{type,valueType});  this.mode=mode;  this.name=name;}  }
class C{  public String format(final long w){  final StringBuilder sb=new StringBuilder();  format(sb,w);  return sb.toString();}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("M_PriceList_Version_ID"))     p_M_PriceList_Version_ID=para[i].getParameterAsInt(); else     if (name.equals("DateValue"))     p_DateValue=(Timestamp)para[i].getParameter(); else     if (name.equals("M_Warehouse_ID"))     p_M_Warehouse_ID=para[i].getParameterAsInt(); else     if (name.equals("C_Currency_ID"))     p_C_Currency_ID=para[i].getParameterAsInt(); else     if (name.equals("M_CostElement_ID"))     p_M_CostElement_ID=para[i].getParameterAsInt();  }  if (p_DateValue == null)   p_DateValue=new Timestamp(System.currentTimeMillis());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:39.980 -0500",hash_original_method="2A4244001D1666DDAFB3F602ED8EC7EA",hash_generated_method="0EE1C61F081D9D14D216A27E7AF6F9E1") public Builder permitNetwork(){  return disable(DETECT_NETWORK);}  }
class C{  public RaptorCursorRegistry(Display display){  this.display=display;}  }
class C{  private ArrayList<Node> replaceParamsWithMoreInformativeArguments(final Invoke invoke,final HighTierContext context){  NodeInputList<ValueNode> args=invoke.callTarget().arguments();  ArrayList<Node> parameterUsages=null;  List<ParameterNode> params=graph.getNodes(ParameterNode.TYPE).snapshot();  assert params.size() <= args.size();  for (  ParameterNode param : params) {    if (param.usages().isNotEmpty()) {      ValueNode arg=args.get(param.index());      if (arg.isConstant()) {        Constant constant=arg.asConstant();        parameterUsages=trackParameterUsages(param,parameterUsages);        param.replaceAtUsagesAndDelete(graph.unique(ConstantNode.forConstant(arg.stamp(),constant,((ConstantNode)arg).getStableDimension(),((ConstantNode)arg).isDefaultStable(),context.getMetaAccess())));      } else {        Stamp impro=improvedStamp(arg,param);        if (impro != null) {          param.setStamp(impro);          parameterUsages=trackParameterUsages(param,parameterUsages);        } else {          assert !isArgMoreInformativeThanParam(arg,param);        }      }    }  }  assert (parameterUsages == null) || (!parameterUsages.isEmpty());  return parameterUsages;}  }
class C{  public DataViewerMainPanel(Container parentFrame){  m_Parent=parentFrame;  m_FrameTitle="Data-Viewer";  createPanel();}  }
class C{  public WordSelection(){  super(NAME,TextTemplateMessages.MESSAGES.variableDescriptionSelectedWord());}  }
class C{  @SuppressWarnings("unchecked") @Test public void nextComponentIsBranch(){  int id=1;  storageBranchIndexer=new StorageBranchIndexer<>(delegateIndexer,childIndexer,id,true);  DefaultData defaultData=mock(DefaultData.class);  when(childIndexer.isPassId()).thenReturn(false);  when(childIndexer.getNewInstance()).thenReturn(mock(IStorageBranchIndexer.class));  IStorageTreeComponent<DefaultData> component=storageBranchIndexer.getNextTreeComponent(defaultData);  assertThat(component,is(instanceOf(StorageBranch.class)));  StorageBranch<DefaultData> branch=(StorageBranch<DefaultData>)component;  assertThat(branch.getStorageBranchIndexer(),is(not((IStorageBranchIndexer<DefaultData>)childIndexer)));  verify(branch.getStorageBranchIndexer()).setId(id);  storageBranchIndexer=new StorageBranchIndexer<>(delegateIndexer,childIndexer,id,false);  when(childIndexer.isPassId()).thenReturn(true);  when(childIndexer.getNewInstance()).thenReturn(mock(IStorageBranchIndexer.class));  component=storageBranchIndexer.getNextTreeComponent(defaultData);  assertThat(component,is(instanceOf(StorageBranch.class)));  branch=(StorageBranch<DefaultData>)component;  assertThat(branch.getStorageBranchIndexer(),is(not((IStorageBranchIndexer<DefaultData>)childIndexer)));  verify(branch.getStorageBranchIndexer(),times(0)).setId(anyInt());  when(childIndexer.isPassId()).thenReturn(false);  component=storageBranchIndexer.getNextTreeComponent(defaultData);  assertThat(component,is(instanceOf(StorageBranch.class)));  branch=(StorageBranch<DefaultData>)component;  assertThat(branch.getStorageBranchIndexer(),is((IStorageBranchIndexer<DefaultData>)childIndexer));  verify(childIndexer,times(0)).setId(anyInt());}  }
class C{  public void clear(){  backingStore.clear();  reap();}  }
class C{  public Lock tryWriteLock(){  if (isWriterActive() || isReaderActive())   return null;synchronized (this) {    if (isWriterActive() || isReaderActive()) {      return null;    }    return createWriteLock();  }}  }
class C{  public Builder injector(DependencyInjector injector){  configuration.dependencyInjector=injector;  return this;}  }
class C{  public void update(byte[] data){  for (int nI=0; nI < data.length; nI++)   update(data[nI]);}  }
class C{  public LoadFactor60ScoringFunctionFactory(ScoringFunctionFactory delegate){  this.delegate=delegate;}  }
class C{  public Iterator<Item> iterator(){  return new ListIterator<Item>(first);}  }
class C{  public String createMarkedProcessTree(int indent,String mark,Operator markOperator){  return createProcessTree(indent,"","",markOperator,mark);}  }
class C{  @Override public void cancelCurrentQuery() throws QueryException, IOException {  MasterProtocol copiedProtocol=new MasterProtocol(urlParser,new ReentrantLock());  copiedProtocol.setHostAddress(getHostAddress());  copiedProtocol.connect();  copiedProtocol.executeQuery("KILL QUERY " + serverThreadId);  copiedProtocol.close();}  }
class C{  @Override public void generate(final ITranslationEnvironment environment,final long baseOffset,final OperandSize operandSize,final List<ReilInstruction> instructions) throws InternalTranslationException {  Preconditions.checkNotNull(environment,"Error: Argument environment can't be null");  Preconditions.checkNotNull(instructions,"Error: Argument instructions can't be null");  Preconditions.checkArgument(baseOffset >= 0,"Error: Argument offset can't be less than 0");  long offset=baseOffset;  final int previousInstructions=(int)(baseOffset % 0x100);  final OperandSize archSize=environment.getArchitectureSize();  final OperandSize resultSize=TranslationHelpers.getNextSize(archSize);  String maskedEax=null;  final String ediChange=String.valueOf(operandSize.getByteSize());  final String mask=String.valueOf(TranslationHelpers.getAllBitsMask(operandSize));  final String truncateMask=String.valueOf(TranslationHelpers.getAllBitsMask(archSize));  if (operandSize != archSize) {    maskedEax=environment.getNextVariableString();    instructions.add(ReilHelpers.createAnd(offset,archSize,"eax",archSize,mask,archSize,maskedEax));    offset++;  } else {    maskedEax="eax";  }  final String addResult=environment.getNextVariableString();  final String subResult=environment.getNextVariableString();  instructions.add(ReilHelpers.createStm(offset,operandSize,maskedEax,archSize,"edi"));  final String jmpGoal=String.format("%d.%d",ReilHelpers.toNativeAddress(new CAddress(baseOffset)).toLong(),previousInstructions + 5 + (operandSize != archSize ? 1 : 0));  final String jmpGoal2=String.format("%d.%d",ReilHelpers.toNativeAddress(new CAddress(baseOffset)).toLong(),previousInstructions + 7 + (operandSize != archSize ? 1 : 0));  instructions.add(ReilHelpers.createJcc(offset + 1,OperandSize.BYTE,Helpers.DIRECTION_FLAG,OperandSize.ADDRESS,jmpGoal));  instructions.add(ReilHelpers.createAdd(offset + 2,archSize,"edi",archSize,ediChange,resultSize,addResult));  instructions.add(ReilHelpers.createAnd(offset + 3,resultSize,addResult,archSize,truncateMask,archSize,"edi"));  instructions.add(ReilHelpers.createJcc(offset + 4,OperandSize.BYTE,"1",OperandSize.ADDRESS,jmpGoal2));  instructions.add(ReilHelpers.createSub(offset + 5,archSize,"edi",archSize,ediChange,resultSize,subResult));  instructions.add(ReilHelpers.createAnd(offset + 6,resultSize,subResult,archSize,truncateMask,archSize,"edi"));  instructions.add(ReilHelpers.createNop(offset + 7));}  }
class C{  public CompositeComparator(int size){  this(size,false);}  }
class C{  public void testSerialization(){  DefaultKeyedValues2DDataset d1=new DefaultKeyedValues2DDataset();  d1.addValue(new Double(234.2),"Row1","Col1");  d1.addValue(null,"Row1","Col2");  d1.addValue(new Double(345.9),"Row2","Col1");  d1.addValue(new Double(452.7),"Row2","Col2");  DefaultKeyedValues2DDataset d2=(DefaultKeyedValues2DDataset)TestUtilities.serialised(d1);  assertEquals(d1,d2);}  }
class C{  public TDoubleHash(){  _hashingStrategy=this;}  }
class C{  public PartialFunction receive(){  return ReceiveBuilder.match(ParseArticle.class,null).build();}  }
class C{  public Pointer(){  this(0);}  }
class C{  public static URI selectLocalServer(ServerSet serverSet,String path) throws URISyntaxException {  Set<InetSocketAddress> serverInetSet=serverSet.getServers();  java.util.Optional<InetSocketAddress> localInetSocketAddress=serverInetSet.stream().filter(null).findFirst();  InetSocketAddress selectedInetSocket;  if (!localInetSocketAddress.isPresent()) {    return createUriFromServerSet(serverInetSet,path);  }  selectedInetSocket=localInetSocketAddress.get();  String address=selectedInetSocket.getAddress().getHostAddress();  int port=selectedInetSocket.getPort();  return new URI("http",null,address,port,path,null,null);}  }
class C{  public final void init(ManagerFactoryParameters spec) throws InvalidAlgorithmParameterException {  spiImpl.engineInit(spec);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:38.764 -0500",hash_original_method="DA40B025EF2A2ABBC01EE849836E7F8C",hash_generated_method="B3074E664264A14B105A4132B50CB760") public static boolean hasMimeType(String mimeType){  if (mimeType == null || mimeType.isEmpty()) {    return false;  }  return mimeTypeToExtensionMap.containsKey(mimeType);}  }
class C{  public static Label findLabelText(String text){  if (verbose) {    log("findLabelText(" + text + ")");  }  return findLabelText(Display.getInstance().getCurrent(),text);}  }
class C{  private void initResourcesIfNecessary(){  if (itemsPaint == null) {    itemsPaint=new TextPaint(Paint.ANTI_ALIAS_FLAG);    itemsPaint.setTextSize(TEXT_SIZE);  }  if (valuePaint == null) {    valuePaint=new TextPaint(Paint.ANTI_ALIAS_FLAG | Paint.DITHER_FLAG);    valuePaint.setTextSize(TEXT_SIZE);    valuePaint.setShadowLayer(0.1f,0,0.1f,0xFFC0C0C0);  }  if (centerDrawable == null) {    centerDrawable=getContext().getResources().getDrawable(R.drawable.wheel_val);  }  if (topShadow == null) {    topShadow=new GradientDrawable(Orientation.TOP_BOTTOM,SHADOWS_COLORS);  }  if (bottomShadow == null) {    bottomShadow=new GradientDrawable(Orientation.BOTTOM_TOP,SHADOWS_COLORS);  }  setBackgroundResource(R.drawable.wheel_bg);}  }
class C{  public TableCategory(String name,int iconID){  this(name,iconID,true);}  }
class C{  private void write(S3CheckpointData data) throws IgniteCheckedException, AmazonClientException {  assert data != null;  if (log.isDebugEnabled())   log.debug("Writing data to S3 [bucket=" + bucketName + ", key="+ data.getKey()+ ']');  byte[] buf=data.toBytes();  ObjectMetadata meta=new ObjectMetadata();  meta.setContentLength(buf.length);  s3.putObject(bucketName,data.getKey(),new ByteArrayInputStream(buf),meta);}  }
class C{  final public int byteLength(){  return 1 + 1 + extensionIV.byteLength()+ delegate.byteLength();}  }
class C{  public static boolean isUriOption(int optionNumber){  boolean result=optionNumber == URI_HOST || optionNumber == URI_PATH || optionNumber == URI_PORT || optionNumber == URI_QUERY;  return result;}  }
class C{  public DeleteRequest type(String type){  this.type=type;  return this;}  }
class C{  public TDoubleHash(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);  _hashingStrategy=this;}  }
class C{  public void doFilter(ServletRequest request,ServletResponse response,FilterChain filterChain) throws IOException, ServletException {  HttpServletRequest httpRequest=(HttpServletRequest)request;  String entidad=SesionHelper.getEntidad(httpRequest);  if (entidad != null) {    httpRequest.getSession().setAttribute(ConstantesGestionUsuariosAdministracion.PARAMETRO_ID_ENTIDAD,entidad);  }  String oEntidad=(String)httpRequest.getSession().getAttribute(ConstantesGestionUsuariosAdministracion.PARAMETRO_ID_ENTIDAD);  MultiEntityContextHolder.setEntity(oEntidad);  filterChain.doFilter(request,response);}  }
class C{  public void visitString(BashString bashString){  visitElement(bashString);}  }
class C{  public boolean isColumnNumeric(int columnIndex){  if (columnIndex < 0 || columnIndex >= types.length) {    return false;  }  Class<?> columnType=types[columnIndex];  return Number.class.isAssignableFrom(columnType);}  }
class C{  public static IStub CreateStub(IDownloaderService itf){  return new Stub(itf);}  }
class C{  public Builder subscription(final String subscription){  this.subscription=subscription;  return this;}  }
class C{  public void frameClosing(DocumentFrame frame){  if (frame == component4006Frame) {    toggleComponent4006();    return;  } else   if (frame == screenEmulatorFrame) {    toggleScreenEmulator();    return;  } else   if (frame == frontPanelFrame) {    toggleFrontPanel();    return;  } else   for (int chip=0; chip < 2; chip++) {    if (frame == cpuStateEditorFrame[chip]) {      toggleCPUState(chip);      return;    } else     if (frame == disassemblyLogFrame[chip]) {      toggleDisassemblyLog(chip);      return;    } else     if (frame == breakTriggerListFrame[chip]) {      toggleBreakTriggerList(chip);      return;    } else     if (frame == memoryActivityViewerFrame[chip]) {      toggleMemoryActivityViewer(chip);      return;    } else     if (frame == memoryHexEditorFrame[chip]) {      toggleMemoryHexEditor(chip);      return;    } else     if (frame == customMemoryRangeLoggerFrame[chip]) {      toggleCustomMemoryRangeLoggerComponentFrame(chip);      return;    } else     if (frame == codeStructureFrame[chip]) {      toggleCodeStructureWindow(chip);      return;    } else     if (frame == sourceCodeFrame[chip]) {      toggleSourceCodeWindow(chip);      return;    } else     if (frame == callStackFrame[chip]) {      toggleCallStack(chip);      return;    } else     if (frame == programmableTimersFrame[chip]) {      toggleProgrammableTimersWindow(chip);      return;    } else     if (frame == interruptControllerFrame[chip]) {      toggleInterruptController(chip);      return;    } else     if (frame == serialInterfaceFrame[chip]) {      toggleSerialInterfaces(chip);      return;    } else     if (frame == genericSerialFrame[chip]) {      toggleGenericSerialFrame(chip);      return;    } else     if (frame == ioPortsFrame[chip]) {      toggleIoPortsWindow(chip);      return;    } else     if (frame == adConverterFrame[chip]) {      toggleAdConverterFrame(chip);      return;    } else     if (frame == ITronObjectFrame[chip]) {      toggleITronObject(chip);      return;    } else     if (frame == iTronReturnStackFrame[chip]) {      toggleITronReturnStack(chip);      return;    }  }  System.err.println("EmulatorUI.frameClosing : Unknown frame is being closed. Please add handler for " + frame.getClass().getSimpleName());}  }
class C{  private void maybeSampleSyncParams(){  long playbackPositionUs=audioTrackUtil.getPlaybackHeadPositionUs();  if (playbackPositionUs == 0) {    return;  }  if (log.allowVerbose()) {    log.v("playbackPositionUs = " + playbackPositionUs);  }  long systemClockUs=System.nanoTime() / 1000;  if (systemClockUs - lastPlayheadSampleTimeUs >= MIN_PLAYHEAD_OFFSET_SAMPLE_INTERVAL_US) {    playheadOffsets[nextPlayheadOffsetIndex]=playbackPositionUs - systemClockUs;    nextPlayheadOffsetIndex=(nextPlayheadOffsetIndex + 1) % MAX_PLAYHEAD_OFFSET_COUNT;    if (playheadOffsetCount < MAX_PLAYHEAD_OFFSET_COUNT) {      playheadOffsetCount++;    }    lastPlayheadSampleTimeUs=systemClockUs;    smoothedPlayheadOffsetUs=0;    for (int i=0; i < playheadOffsetCount; i++) {      smoothedPlayheadOffsetUs+=playheadOffsets[i] / playheadOffsetCount;    }  }  if (needsPassthroughWorkarounds()) {    return;  }  if (systemClockUs - lastTimestampSampleTimeUs >= MIN_TIMESTAMP_SAMPLE_INTERVAL_US) {    audioTimestampSet=audioTrackUtil.updateTimestamp();    if (audioTimestampSet) {      long audioTimestampUs=audioTrackUtil.getTimestampNanoTime() / 1000;      if (log.allowVerbose()) {        log.v("audioTimestampUs = " + audioTimestampUs);      }      long audioTimestampFramePosition=audioTrackUtil.getTimestampFramePosition();      if (audioTimestampUs < resumeSystemTimeUs) {        audioTimestampSet=false;        log.w("The timestamp corresponds to a time before the track was most recently resumed: " + audioTimestampUs + ", "+ resumeSystemTimeUs);      } else       if (Math.abs(audioTimestampUs - systemClockUs) > MAX_AUDIO_TIMESTAMP_OFFSET_US) {        String message="Spurious audio timestamp (system clock mismatch): " + audioTimestampFramePosition + ", "+ audioTimestampUs+ ", "+ systemClockUs+ ", "+ playbackPositionUs;        if (failOnSpuriousAudioTimestamp) {          throw new InvalidAudioTrackTimestampException(message);        }        log.w(message);        audioTimestampSet=false;      } else       if (Math.abs(framesToDurationUs(audioTimestampFramePosition) - playbackPositionUs) > MAX_AUDIO_TIMESTAMP_OFFSET_US) {        String message="Spurious audio timestamp (frame position mismatch): " + audioTimestampFramePosition + ", "+ audioTimestampUs+ ", "+ systemClockUs+ ", "+ playbackPositionUs;        if (failOnSpuriousAudioTimestamp) {          throw new InvalidAudioTrackTimestampException(message);        }        log.w(message);        audioTimestampSet=false;      }    }    if (isLatencyQuirkEnabled) {      latencyUs=AmazonQuirks.getAudioHWLatency();    } else     if (getLatencyMethod != null && !passthrough) {      try {        latencyUs=(Integer)getLatencyMethod.invoke(audioTrack,(Object[])null) * 1000L - bufferSizeUs;        latencyUs=Math.max(latencyUs,0);        if (latencyUs > MAX_LATENCY_US) {          log.w("Ignoring impossibly large audio latency: " + latencyUs);          latencyUs=0;        }      } catch (      Exception e) {        getLatencyMethod=null;      }    }    lastTimestampSampleTimeUs=systemClockUs;  }}  }
class C{  protected void joinRows(Map<String,Object> row){  Map<String,Object> join=new HashMap<>();  if (row != null) {    for (    Index index : table1Columns) {      index.filter(row,join);    }  }  outport.emit(join);}  }
class C{  public static CharSet valueOf(char... chars){  int maxChar=0;  for (int i=chars.length; --i >= 0; ) {    if (chars[i] > maxChar) {      maxChar=chars[i];    }  }  CharSet charSet=new CharSet(new long[(maxChar >> 6) + 1]);  for (int i=chars.length; --i >= 0; ) {    char c=chars[i];    charSet._mapping[c >> 6]|=1L << (c & 63);  }  return charSet;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(getCapDevInput(stack).isCableTV());}  }
class C{  public void _setInterim(boolean interim){  this.interim=interim;}  }
class C{  public static int findLiveItemsLowerBound(XYDataset dataset,int series,double xLow,double xHigh){  ParamChecks.nullNotPermitted(dataset,"dataset");  if (xLow >= xHigh) {    throw new IllegalArgumentException("Requires xLow < xHigh.");  }  int itemCount=dataset.getItemCount(series);  if (itemCount <= 1) {    return 0;  }  if (dataset.getDomainOrder() == DomainOrder.ASCENDING) {    int low=0;    int high=itemCount - 1;    double lowValue=dataset.getXValue(series,low);    if (lowValue >= xLow) {      return low;    }    double highValue=dataset.getXValue(series,high);    if (highValue < xLow) {      return high;    }    while (high - low > 1) {      int mid=(low + high) / 2;      double midV=dataset.getXValue(series,mid);      if (midV >= xLow) {        high=mid;      } else {        low=mid;      }    }    return high;  } else   if (dataset.getDomainOrder() == DomainOrder.DESCENDING) {    int low=0;    int high=itemCount - 1;    double lowValue=dataset.getXValue(series,low);    if (lowValue <= xHigh) {      return low;    }    double highValue=dataset.getXValue(series,high);    if (highValue > xHigh) {      return high;    }    while (high - low > 1) {      int mid=(low + high) / 2;      double midV=dataset.getXValue(series,mid);      if (midV > xHigh) {        low=mid;      } else {        high=mid;      }    }    return high;  } else {    int index=0;    double x=dataset.getXValue(series,index);    while (index < itemCount && x < xLow) {      index++;      if (index < itemCount) {        x=dataset.getXValue(series,index);      }    }    return Math.min(Math.max(0,index),itemCount - 1);  }}  }
class C{  public String removeHttpHeader(String name){  return headers.remove(name);}  }
class C{  public void makeTiles(){  if (rootDir != null) {    File rd=new File(rootDir);    if (!rd.exists()) {      rd.mkdir();    }  }  Proj proj=new Mercator(new LatLonPoint.Double(),10000,MapTileCoordinateTransform.TILE_SIZE,MapTileCoordinateTransform.TILE_SIZE);  List<ZoomLevelMaker> zoomLevels=getZoomLevels();  for (  ZoomLevelMaker zfi : zoomLevels) {    logger.info("writing zoom level " + zfi.getName() + " tiles...");    int zoomLevel=zfi.getZoomLevel();    for (    Rectangle2D bounds : zfi.getUVBounds(mtcTransform,zoomLevel)) {      if (logger.isLoggable(Level.FINE)) {        logger.fine(" creating tiles " + bounds);      }      int startx=(int)bounds.getX();      int starty=(int)bounds.getY();      int xofflimit=(int)bounds.getWidth();      int yofflimit=(int)bounds.getHeight();      for (int xoff=0; xoff < xofflimit; xoff++) {        int x=startx + xoff;        String parentDirPath=null;        for (int yoff=0; yoff < yofflimit; yoff++) {          int y=starty + yoff;          if (parentDirPath == null) {            parentDirPath=zfi.formatParentDirectoryName(getRootDir(),x,y);            File parentDir=new File(parentDirPath);            if (!parentDir.exists()) {              parentDir.mkdirs();            }          }          try {            String outputFile=makeTileFile(x,y,zfi,proj);            if (logger.isLoggable(Level.FINER)) {              logger.finer("wrote: " + outputFile);            }          } catch (          IOException ioe) {            logger.warning("Caught IOException writing " + x + ", "+ y+ ", "+ zfi);          }        }      }    }    int range=zfi.getRange();    if (range < zoomLevel) {      Properties rangeProps=new Properties();      MapTileLayer tileLayer=new MapTileLayer();      StandardMapTileFactory tileFactory=new StandardMapTileFactory();      tileFactory.setRootDir(getRootDir());      tileFactory.setFileExt(getFormatter().getFormatLabel());      tileLayer.setTileFactory(tileFactory);      List<Layer> subLayers=new ArrayList<Layer>();      subLayers.add(tileLayer);      for (int rangeZoomLevel=zoomLevel - 1; rangeZoomLevel >= range; rangeZoomLevel--) {        tileLayer.setZoomLevel(rangeZoomLevel);        ZoomLevelInfo rangeZFI=new ZoomLevelInfo();        rangeZFI.setZoomLevel(rangeZoomLevel);        rangeZFI.setScale(mtcTransform.getScaleForZoom(rangeZoomLevel));        tileLayer.setZoomLevel(rangeZoomLevel + 1);        for (        Rectangle2D rawBounds : zfi.getBounds()) {          Rectangle2D bounds=rangeZFI.getUVBounds(rawBounds,mtcTransform,rangeZoomLevel);          if (logger.isLoggable(Level.INFO)) {            logger.fine(" creating subtiles " + bounds);          }          int startx=(int)bounds.getX();          int starty=(int)bounds.getY();          int xofflimit=(int)bounds.getWidth();          int yofflimit=(int)bounds.getHeight();          for (int xoff=0; xoff < xofflimit; xoff++) {            int x=startx + xoff;            String parentDirPath=null;            for (int yoff=0; yoff < yofflimit; yoff++) {              int y=starty + yoff;              if (parentDirPath == null) {                parentDirPath=rangeZFI.formatParentDirectoryName(getRootDir(),x,y);                File parentDir=new File(parentDirPath);                if (!parentDir.exists()) {                  parentDir.mkdirs();                }              }              try {                byte[] imageBytes=makeTile(x,y,rangeZoomLevel,subLayers,proj,OMColor.clear);                String filePath=rangeZFI.formatImageFilePath(getRootDir(),(int)x,(int)y);                String outputFile=writeImageFile(imageBytes,filePath,true);                if (logger.isLoggable(Level.INFO)) {                  logger.finer("wrote: " + outputFile);                }              } catch (              IOException ioe) {                logger.warning("Caught IOException writing " + x + ", "+ y+ ", "+ zfi);              }            }          }        }      }    }  }  logger.info("done writing tiles");}  }
class C{  public EventStoreBuilder maxClientReconnections(int count){  settingsBuilder.maxReconnections(count);  return this;}  }
class C{  public void start(String gatewayId) throws PageException {  executeThread(gatewayId,GatewayThread.START);}  }
class C{  public void testSwitchTabs(){  if (!runTest) {    Log.d(TAG,BigTestUtils.DISABLE_MESSAGE);    return;  }  EndToEndTestUtils.startRecording();  int i=0;  while ((System.currentTimeMillis() - startTime) < TEST_DURATION_IN_MILLISECONDS) {    EndToEndTestUtils.SOLO.clickOnText(trackListActivity.getString(R.string.track_detail_map_tab));    instrumentation.waitForIdleSync();    EndToEndTestUtils.SOLO.clickOnText(trackListActivity.getString(R.string.track_detail_chart_tab));    instrumentation.waitForIdleSync();    EndToEndTestUtils.SOLO.clickOnText(trackListActivity.getString(R.string.track_detail_stats_tab));    instrumentation.waitForIdleSync();    logStatus(++i);  }  EndToEndTestUtils.stopRecording(true);}  }
class C{  private int compareIndexes(IndexKey first,IndexKey second){  int dictionaryKeyOffset=0;  int nonDictionaryKeyOffset=0;  int compareResult=0;  int processedNoDictionaryColumn=numberOfNoDictionaryColumns;  ByteBuffer firstNoDictionaryKeyBuffer=ByteBuffer.wrap(first.getNoDictionaryKeys());  ByteBuffer secondNoDictionaryKeyBuffer=ByteBuffer.wrap(second.getNoDictionaryKeys());  int actualOffset=0;  int firstNoDcitionaryLength=0;  int secondNodeDictionaryLength=0;  for (int i=0; i < eachColumnValueSize.length; i++) {    if (eachColumnValueSize[i] != NO_DCITIONARY_COLUMN_VALUE) {      compareResult=ByteUtil.UnsafeComparer.INSTANCE.compareTo(first.getDictionaryKeys(),dictionaryKeyOffset,eachColumnValueSize[i],second.getDictionaryKeys(),dictionaryKeyOffset,eachColumnValueSize[i]);      dictionaryKeyOffset+=eachColumnValueSize[i];    } else {      if (processedNoDictionaryColumn > 1) {        actualOffset=firstNoDictionaryKeyBuffer.getShort(nonDictionaryKeyOffset);        firstNoDcitionaryLength=firstNoDictionaryKeyBuffer.getShort(nonDictionaryKeyOffset + SHORT_SIZE_IN_BYTES);        secondNodeDictionaryLength=secondNoDictionaryKeyBuffer.getShort(nonDictionaryKeyOffset + SHORT_SIZE_IN_BYTES);        compareResult=ByteUtil.UnsafeComparer.INSTANCE.compareTo(first.getNoDictionaryKeys(),actualOffset,firstNoDcitionaryLength,second.getNoDictionaryKeys(),actualOffset,secondNodeDictionaryLength);        nonDictionaryKeyOffset+=SHORT_SIZE_IN_BYTES;        processedNoDictionaryColumn--;      } else {        actualOffset=firstNoDictionaryKeyBuffer.getShort(nonDictionaryKeyOffset);        firstNoDcitionaryLength=first.getNoDictionaryKeys().length - actualOffset;        secondNodeDictionaryLength=second.getNoDictionaryKeys().length - actualOffset;        compareResult=ByteUtil.UnsafeComparer.INSTANCE.compareTo(first.getNoDictionaryKeys(),actualOffset,firstNoDcitionaryLength,second.getNoDictionaryKeys(),actualOffset,secondNodeDictionaryLength);      }    }    if (compareResult != 0) {      return compareResult;    }  }  return 0;}  }
class C{  public synchronized boolean containsUserName(final String userName){  Preconditions.checkNotNull(userName,"IE02720: userName argument can not be null");  syncUsers();  for (  final IUser storedUser : users) {    if (storedUser.getUserName().equalsIgnoreCase(userName)) {      return true;    }  }  return false;}  }
class C{  public Quaternion mulLeft(Quaternion q){  float newX=q.w * x + q.x * w + q.y * z - q.z * y;  float newY=q.w * y + q.y * w + q.z * x - q.x * z;  float newZ=q.w * z + q.z * w + q.x * y - q.y * x;  float newW=q.w * w - q.x * x - q.y * y - q.z * z;  x=newX;  y=newY;  z=newZ;  w=newW;  return this;}  }
class C{  protected void putTillOverFlow(Region region){  int i=0;  for (i=0; i < 1010; i++) {    region.put(new Integer(i + 200),new Integer(i + 200));  }}  }
class C{  public void testPhaseListenerRegistration() throws Exception {}  }
class C{  private void deprovision(ServiceInstance serviceInstance,ServiceUser user) throws ServiceInstanceException {  try {    ServiceInstance dbServiceInstance=dao.find(serviceInstance);    besDao.terminateSubscription(dbServiceInstance,user.getLocale());  } catch (  ServiceInstanceNotFoundException e) {    throw new ServiceInstanceException(Messages.get(user.getLocale(),"error_instance_not_exist",serviceInstance.getInstanceId()));  }catch (  BESNotificationException e) {    if (e.getCause() instanceof ObjectNotFoundException) {      try {        User provisioningUser=UserMapper.toProvisioningUser(user);        appImpl.deleteInstance(serviceInstance,provisioningUser);      } catch (      BadResultException|APPlatformException e1) {        throw new ServiceInstanceException(getMessage(e1));      }    } else {      throw new ServiceInstanceException(getMessage(e));    }  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  CaptureDeviceInput cdi=getCapDevInput(stack);  if (cdi != null) {    if (cdi.getCaptureDevice().isHWEncoder())     return Boolean.TRUE;    if (cdi.getType() == CaptureDeviceInput.DIGITAL_TUNER_CROSSBAR_INDEX)     return Boolean.TRUE;    if (cdi.getCaptureDevice().isCaptureFeatureSupported(MMC.RAW_AV_CAPTURE_MASK))     return Boolean.TRUE;    return Boolean.FALSE;  }  return Boolean.TRUE;}  }
class C{  public THLParallelReadQueue(int taskId,int maxSize,int maxControlEvents,long startingSeqno,int syncInterval,ReplDBMSHeader lastHeader,AtomicIntervalGuard<?> intervalGuard){  this.taskId=taskId;  this.readSeqno=startingSeqno;  this.syncInterval=syncInterval;  this.intervalGuard=intervalGuard;  this.eventQueue=new LinkedBlockingQueue<ReplEvent>(maxSize);  this.watchPredicates=new LinkedList<WatchPredicate<ReplDBMSHeader>>();  this.controlQueue=new LinkedList<ReplControlEvent>();  if (lastHeader == null) {    this.lastHeader=new ReplDBMSHeaderData(startingSeqno - 1,(short)0,true,"dummy",-1,"dummy","dummy",new Timestamp(System.currentTimeMillis()),0);  } else {    this.lastHeader=lastHeader;  }}  }
class C{  public void updateActions(){  String text;  Action a=RTextArea.getAction(RTextArea.UNDO_ACTION);  if (canUndo()) {    a.setEnabled(true);    text=getUndoPresentationName();    a.putValue(Action.NAME,text);    a.putValue(Action.SHORT_DESCRIPTION,text);  } else {    if (a.isEnabled()) {      a.setEnabled(false);      text=cantUndoText;      a.putValue(Action.NAME,text);      a.putValue(Action.SHORT_DESCRIPTION,text);    }  }  a=RTextArea.getAction(RTextArea.REDO_ACTION);  if (canRedo()) {    a.setEnabled(true);    text=getRedoPresentationName();    a.putValue(Action.NAME,text);    a.putValue(Action.SHORT_DESCRIPTION,text);  } else {    if (a.isEnabled()) {      a.setEnabled(false);      text=cantRedoText;      a.putValue(Action.NAME,text);      a.putValue(Action.SHORT_DESCRIPTION,text);    }  }}  }
class C{  public static XTIFFDirectory create(SeekableStream stream,long ifd_offset) throws IOException {  return factory.createDirectory(stream,ifd_offset);}  }
class C{  @Override public boolean acceptsInstances(){  return true;}  }
class C{  public void appendData(ParsableByteArray buffer,int length){  int remainingWriteLength=length;  while (remainingWriteLength > 0) {    if (dataQueue.isEmpty() || lastFragmentOffset == fragmentLength) {      lastFragmentOffset=0;      lastFragment=fragmentPool.allocateDirect();      dataQueue.add(lastFragment);    }    int thisWriteLength=Math.min(remainingWriteLength,fragmentLength - lastFragmentOffset);    buffer.readBytes(lastFragment,lastFragmentOffset,thisWriteLength);    lastFragmentOffset+=thisWriteLength;    remainingWriteLength-=thisWriteLength;  }  totalBytesWritten+=length;}  }
class C{  public double norm1(){  double f=0;  for (int j=0; j < n; j++) {    double s=0;    for (int i=0; i < m; i++) {      s+=Math.abs(A[i][j]);    }    f=Math.max(f,s);  }  return f;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public basefont addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  private void convert(String from,String to){  Assert.assertEquals(to,new Environment().buildType(from).prettyPrint());}  }
class C{  public void initialize(){  SipManager.setTimeout(mRcsSettings.getSipTransactionTimeout());  MsrpConnection.setMsrpTraceEnabled(mRcsSettings.isMediaTraceActivated());  HttpTransferManager.setHttpTraceEnabled(mRcsSettings.isMediaTraceActivated());  mCnxManager.initialize();  getInstantMessagingService().initialize();  getRichcallService().initialize();  getPresenceService().initialize();  mInitializationFinished=true;  if (sLogger.isActivated()) {    sLogger.info("IMS module initialization");  }}  }
class C{  public static void sort(int[] array){  DualPivotQuicksort.sort(array);}  }
class C{  default B addCustomEffect(final StatusEffect effect){  this.meta().addCustomEffect(effect,true);  return this.getBuilder();}  }
class C{  private void processCompletionStageIndexing(Operation op){  try {    op.nestCompletion(null);    ServiceDocument mergedState=op.getLinkedState();    this.context.host.saveServiceState(this,op,mergedState);  }  finally {    processPending(op);  }}  }
class C{  public static byte[] decode(String s){  return decode(s.toCharArray());}  }
class C{  public void dropStudent(String student){  int index=findStudent(student);  if (index >= 0) {    dropStudent(index);  } else {    System.out.println(student + " is not in the course: " + courseName);  }}  }
class C{  public RatPoly div(RatPoly p){  if (p.isNaN() || this.isNaN() || p.terms.size() == 0) {    return NAN;  }  RatPoly result=new RatPoly();  RatPoly thisCopy=new RatPoly(this.terms.copy());  RatTerm tempTerm;  while (thisCopy.degree() >= p.degree() && thisCopy.terms.size() > 0) {    tempTerm=new RatTerm(thisCopy.terms.get(0).coeff.div(p.terms.get(0).coeff),thisCopy.terms.get(0).expt - p.terms.get(0).expt);    sortedAdd(result.terms,tempTerm);    thisCopy=thisCopy.sub(p.mul(new RatPoly(tempTerm)));  }  return result;}  }
class C{  public void write(byte b[],int off,int len){  if ((off < 0) || (off > b.length) || (len < 0)|| ((off + len) - b.length > 0)) {    throw new IndexOutOfBoundsException();  }  ensureCapacity(position + len);  System.arraycopy(b,off,buf,position,len);  position+=len;}  }
class C{  private final void invertGeneral(Matrix3d m1){  double result[]=new double[9];  int row_perm[]=new int[3];  int i, r, c;  double[] tmp=new double[9];  tmp[0]=m1.m00;  tmp[1]=m1.m01;  tmp[2]=m1.m02;  tmp[3]=m1.m10;  tmp[4]=m1.m11;  tmp[5]=m1.m12;  tmp[6]=m1.m20;  tmp[7]=m1.m21;  tmp[8]=m1.m22;  if (!luDecomposition(tmp,row_perm)) {    try {      throw new Exception("PROBLEM!!! Matrix3d12");    } catch (    Exception e) {      e.printStackTrace();    }  }  for (i=0; i < 9; i++)   result[i]=0.0;  result[0]=1.0;  result[4]=1.0;  result[8]=1.0;  luBacksubstitution(tmp,row_perm,result);  this.m00=result[0];  this.m01=result[1];  this.m02=result[2];  this.m10=result[3];  this.m11=result[4];  this.m12=result[5];  this.m20=result[6];  this.m21=result[7];  this.m22=result[8];}  }
class C{  public boolean contains(String field){  return delegate.contains(field);}  }
class C{  public KmlPlacemark(Polyline polyline,KmlDocument kmlDoc){  this();  mName=polyline.getTitle();  mDescription=polyline.getSnippet();  mGeometry=new KmlLineString();  mGeometry.mCoordinates=(ArrayList<GeoPoint>)polyline.getPoints();  mVisibility=polyline.isEnabled();  Style style=new Style();  style.mLineStyle=new LineStyle(polyline.getColor(),polyline.getWidth());  mStyle=kmlDoc.addStyle(style);}  }
class C{  public VirtualNASRestRep toVirtualNasRestRep(VirtualNAS vNas){  return apply(vNas);}  }
class C{  protected void writeCentralFileHeader(ZipEntry ze) throws IOException {  writeOut(CFH_SIG.getBytes());  written+=4;  writeOut((new ZipShort((ze.getPlatform() << 8) | 20)).getBytes());  written+=2;  if (ze.getMethod() == DEFLATED && raf == null) {    writeOut((new ZipShort(20)).getBytes());    writeOut((new ZipShort(8)).getBytes());  } else {    writeOut((new ZipShort(10)).getBytes());    writeOut(ZERO);  }  written+=4;  writeOut((new ZipShort(ze.getMethod())).getBytes());  written+=2;  writeOut(toDosTime(ze.getTime()).getBytes());  written+=4;  writeOut((new ZipLong(ze.getCrc())).getBytes());  writeOut((new ZipLong(ze.getCompressedSize())).getBytes());  writeOut((new ZipLong(ze.getSize())).getBytes());  written+=12;  byte[] name=getBytes(ze.getName());  writeOut((new ZipShort(name.length)).getBytes());  written+=2;  byte[] extra=ze.getCentralDirectoryExtra();  writeOut((new ZipShort(extra.length)).getBytes());  written+=2;  String comm=ze.getComment();  if (comm == null) {    comm="";  }  byte[] comment=getBytes(comm);  writeOut((new ZipShort(comment.length)).getBytes());  written+=2;  writeOut(ZERO);  written+=2;  writeOut((new ZipShort(ze.getInternalAttributes())).getBytes());  written+=2;  writeOut((new ZipLong(ze.getExternalAttributes())).getBytes());  written+=4;  writeOut(offsets.get(ze).getBytes());  written+=4;  writeOut(name);  written+=name.length;  writeOut(extra);  written+=extra.length;  writeOut(comment);  written+=comment.length;}  }
class C{  public static int[] stableSort(double[] array){  int[] index=initialIndex(array.length);  if (array.length > 1) {    int[] newIndex=new int[array.length];    int[] helpIndex;    int numEqual;    array=array.clone();    replaceMissingWithMAX_VALUE(array);    quickSort(array,index,0,array.length - 1);    int i=0;    while (i < index.length) {      numEqual=1;      for (int j=i + 1; ((j < index.length) && Utils.eq(array[index[i]],array[index[j]])); j++) {        numEqual++;      }      if (numEqual > 1) {        helpIndex=new int[numEqual];        for (int j=0; j < numEqual; j++) {          helpIndex[j]=i + j;        }        quickSort(index,helpIndex,0,numEqual - 1);        for (int j=0; j < numEqual; j++) {          newIndex[i + j]=index[helpIndex[j]];        }        i+=numEqual;      } else {        newIndex[i]=index[i];        i++;      }    }    return newIndex;  } else {    return index;  }}  }
class C{  public static void developerLog(final String message){  if (License.isDeveloper()) {    userLog(message,"\t\t ");  }}  }
class C{  public static int resolveColorComponent(Value v){  float f;switch (v.getPrimitiveType()) {case CSSPrimitiveValue.CSS_PERCENTAGE:    f=v.getFloatValue();  f=(f > 100f) ? 100f : (f < 0f) ? 0f : f;return Math.round(255f * f / 100f);case CSSPrimitiveValue.CSS_NUMBER:f=v.getFloatValue();f=(f > 255f) ? 255f : (f < 0f) ? 0f : f;return Math.round(f);default :throw new IllegalArgumentException("Color component argument is not an appropriate CSS value");}}  }
class C{  public SecuritySpecification(boolean conformanceSpec){  whitelist=new LinkedHashSet<Method>();  eventBlocks=new LinkedHashMap<Method,List<Method>>();  this.conformanceSpec=conformanceSpec;}  }
class C{  public void registerSensorsForNode(SerialNode node){  java.util.Iterator<String> iter=getSystemNameList().iterator();  AbstractNode tNode=null;  while (iter.hasNext()) {    String sName=iter.next();    if (sName == null) {      log.error("System name null during register Sensor");    } else {      log.debug("system name is " + sName);      if ((sName.charAt(0) == 'C') && (sName.charAt(1) == 'S')) {        tNode=SerialAddress.getNodeFromSystemName(sName,_memo.getTrafficController());        if (tNode == node) {          node.registerSensor(getBySystemName(sName),(SerialAddress.getBitFromSystemName(sName) - 1));        }      }    }  }}  }
class C{  public static <T>Collection<T> toCollection(Iterable<T> i){  if (i == null) {    throw new IllegalArgumentException("Iterable 'i' cannot be null");  }  Collection<T> c=new ArrayList<T>();  for (  T t : i) {    c.add(t);  }  return c;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] pointFiles;  String outputHeader=null;  int row, col;  int nrows, ncols;  double x, y, z;  int i;  int progress=0;  int numPointsToUse=10;  int numPoints=0;  int lineNum=0;  int nlines=0;  double minX=Double.POSITIVE_INFINITY;  double maxX=Double.NEGATIVE_INFINITY;  double minY=Double.POSITIVE_INFINITY;  double maxY=Double.NEGATIVE_INFINITY;  double north, south, east, west;  double resolution=1;  String delimiter=" ";  boolean firstLineHeader=false;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  List<KdTree.Entry<XYPoint>> results;  double noData=-32768;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  firstLineHeader=Boolean.parseBoolean(args[1]);  outputHeader=args[2];  resolution=Double.parseDouble(args[3]);  if ((inputFilesString.length() <= 0) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    pointFiles=inputFilesString.split(";");    int numPointFiles=pointFiles.length;    updateProgress("Counting the number of points:",0);    numPoints=0;    for (i=0; i < numPointFiles; i++) {      nlines=countLinesInFile(pointFiles[i]);      if (firstLineHeader) {        numPoints+=nlines - 1;      } else {        numPoints+=nlines;      }    }    if (numPoints < numPointsToUse) {      numPointsToUse=numPoints;    }    KdTree<XYPoint> pointsTree=new KdTree.SqrEuclid<XYPoint>(2,numPoints);    nlines=0;    for (i=0; i < numPointFiles; i++) {      DataInputStream in=null;      BufferedReader br=null;      try {        FileInputStream fstream=new FileInputStream(pointFiles[i]);        in=new DataInputStream(fstream);        br=new BufferedReader(new InputStreamReader(in));        String line;        String[] str;        lineNum=1;        while ((line=br.readLine()) != null) {          str=line.split(delimiter);          if (str.length <= 1) {            delimiter="\t";            str=line.split(delimiter);            if (str.length <= 1) {              delimiter=" ";              str=line.split(delimiter);              if (str.length <= 1) {                delimiter=",";                str=line.split(delimiter);              }            }          }          if ((lineNum > 1 || !firstLineHeader) && (str.length >= 3)) {            x=Double.parseDouble(str[0]);            y=Double.parseDouble(str[1]);            XYPoint pnt=new XYPoint(x,y);            double[] entry={y,x};            pointsTree.addPoint(entry,pnt);            if (x < minX) {              minX=x;            }            if (x > maxX) {              maxX=x;            }            if (y < minY) {              minY=y;            }            if (y > maxY) {              maxY=y;            }          }          lineNum++;          nlines++;          progress=(int)(100d * nlines / numPoints);          updateProgress("Reading point data:",progress);        }        in.close();        br.close();      } catch (      java.io.IOException e) {        System.err.println("Error: " + e.getMessage());      } finally {        try {          if (in != null || br != null) {            in.close();            br.close();          }        } catch (        java.io.IOException ex) {        }      }    }    west=minX - 0.5 * resolution;    north=maxY + 0.5 * resolution;    nrows=(int)(Math.ceil((north - minY) / resolution));    ncols=(int)(Math.ceil((maxX - west) / resolution));    south=north - nrows * resolution;    east=west + ncols * resolution;    fw=new FileWriter(outputHeader,false);    bw=new BufferedWriter(fw);    out=new PrintWriter(bw,true);    str1="Min:\t" + Double.toString(Integer.MAX_VALUE);    out.println(str1);    str1="Max:\t" + Double.toString(Integer.MIN_VALUE);    out.println(str1);    str1="North:\t" + Double.toString(north);    out.println(str1);    str1="South:\t" + Double.toString(south);    out.println(str1);    str1="East:\t" + Double.toString(east);    out.println(str1);    str1="West:\t" + Double.toString(west);    out.println(str1);    str1="Cols:\t" + Integer.toString(ncols);    out.println(str1);    str1="Rows:\t" + Integer.toString(nrows);    out.println(str1);    str1="Data Type:\t" + "float";    out.println(str1);    str1="Z Units:\t" + "not specified";    out.println(str1);    str1="XY Units:\t" + "not specified";    out.println(str1);    str1="Projection:\t" + "not specified";    out.println(str1);    str1="Data Scale:\tcontinuous";    out.println(str1);    str1="Preferred Palette:\t" + "spectrum.pal";    out.println(str1);    str1="NoData:\t" + noData;    out.println(str1);    if (java.nio.ByteOrder.nativeOrder() == java.nio.ByteOrder.LITTLE_ENDIAN) {      str1="Byte Order:\t" + "LITTLE_ENDIAN";    } else {      str1="Byte Order:\t" + "BIG_ENDIAN";    }    out.println(str1);    out.close();    WhiteboxRaster image=new WhiteboxRaster(outputHeader,"rw");    double northing, easting;    double halfResolution=resolution / 2;    double area=0;    for (row=0; row < nrows; row++) {      for (col=0; col < ncols; col++) {        easting=(col * resolution) + (west + halfResolution);        northing=(north - halfResolution) - (row * resolution);        double[] entry={northing,easting};        results=pointsTree.nearestNeighbor(entry,numPointsToUse,true);        minX=Double.POSITIVE_INFINITY;        maxX=Double.NEGATIVE_INFINITY;        minY=Double.POSITIVE_INFINITY;        maxY=Double.NEGATIVE_INFINITY;        for (i=0; i < results.size(); i++) {          x=results.get(i).value.x;          y=results.get(i).value.y;          if (x < minX) {            minX=x;          }          if (x > maxX) {            maxX=x;          }          if (y < minY) {            minY=y;          }          if (y > maxY) {            maxY=y;          }        }        area=(maxX - minX) * (maxY - minY);        if (area > 0) {          image.setValue(row,col,area / numPointsToUse);        } else {          image.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (nrows - 1));      updateProgress("Interpolating point data:",progress);    }    image.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    image.addMetadataEntry("Created on " + new Date());    image.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void scanHexFractionAndSuffix(int pos,boolean seendigit){  radix=16;  Assert.check(reader.ch == '.');  reader.putChar(true);  skipIllegalUnderscores();  if (reader.digit(pos,16) >= 0) {    seendigit=true;    scanDigits(pos,16);  }  if (!seendigit)   lexError(pos,"invalid.hex.number"); else   scanHexExponentAndSuffix(pos);}  }
class C{  public void reject() throws SAXException {  if (eh != null)   eh.error(new SAXParseException(localizer.message("reject_element",ns),locator));}  }
class C{  private void scanMethod(InputStream is) throws IOException {  is.skip(6);  int attributesCount=readShort(is);  for (int i=0; i < attributesCount; i++) {    scanAttributeForAnnotation(is);  }}  }
class C{  public void testDefaultToUnknown() throws Exception {  HostAddressService has=new HostAddressService(true);  has.setTimeout(1500);  HostAddress address=HostAddressService.getByName(UNKNOWN_IP);  PingResponse response=has.isReachableByMethod(HostAddressService.DEFAULT,address);  assertFalse("Cannot ping unknown address: " + address.toString(),response.isReachable());}  }
class C{  public String globalInfo(){  return "Visualize incremental classifier performance as a scrolling plot.";}  }
class C{  public static double normalizePositive(double angle){  if (angle < 0.0) {    while (angle < 0.0)     angle+=PI_TIMES_2;    if (angle >= PI_TIMES_2)     angle=0.0;  } else {    while (angle >= PI_TIMES_2)     angle-=PI_TIMES_2;    if (angle < 0.0)     angle=0.0;  }  return angle;}  }
class C{  public boolean isNewBatch(){  return m_NewBatch;}  }
class C{  public static <T>Middleware<AsyncHandler<T>,AsyncHandler<Response<ByteString>>> htmlSerialize(final String templateName){  return null;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:14.477 -0500",hash_original_method="70F1F77231BFE73E3138A8A58A15C35C",hash_generated_method="A1DA50C27B1D8906753DF79746239F15") Method(Method orig){  this(orig.declaringClass,orig.parameterTypes,orig.exceptionTypes,orig.returnType,orig.name,orig.slot);  if (orig.flag) {    this.flag=true;  }}  }
class C{  protected SystemMember createSystemMember(ApplicationVM app) throws org.apache.geode.admin.AdminException {  return new SystemMemberImpl(this,app);}  }
class C{  @Override protected void writeRequestLine(final HttpState state,final HttpConnection conn) throws IOException, HttpException {  final StringBuffer buffer=new StringBuffer();  buffer.append(getName());  buffer.append(' ');  if (targethost != null) {    buffer.append(getPath());  } else {    int port=conn.getPort();    if (port == -1) {      port=conn.getProtocol().getDefaultPort();    }    buffer.append(conn.getHost());    buffer.append(':');    buffer.append(port);  }  buffer.append(" ");  buffer.append(getEffectiveVersion());  final String line=buffer.toString();  conn.printLine(line,getParams().getHttpElementCharset());  if (Wire.HEADER_WIRE.enabled()) {    Wire.HEADER_WIRE.output(line);  }}  }
class C{  public BasicControl(String id){  this.id=id;}  }
class C{  public int code(){  return code;}  }
class C{  public void updatePosition(Node node,double latitude,double longitude){  nodePositions.put(node.getId(),new Position(latitude,longitude));  refreshSingleLayer(node);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:21.350 -0500",hash_original_method="20D2259271C7B1C96C133ACBD2C26B14",hash_generated_method="D0DBB0A8B51935EE62007FE5F69CF000") private final boolean compareAndSetHead(Node update){  return unsafe.compareAndSwapObject(this,headOffset,null,update);}  }
class C{  @Override @NotNull public Enumeration<V> elements(){  return new ValueIterator();}  }
class C{  @Override public synchronized void startManager(){  try {    if (logger.isDebugEnabled()) {      logger.debug("Starting the Federating Manager.... ");    }    Runtime rt=Runtime.getRuntime();    this.pooledMembershipExecutor=Executors.newFixedThreadPool(rt.availableProcessors());    running=true;    startManagingActivity();    messenger.broadcastManagerInfo();  } catch (  InterruptedException e) {    running=false;    throw new ManagementException(e);  }catch (  Exception e) {    running=false;    throw new ManagementException(e);  }}  }
class C{  public BiCorpus unalignedFromFiles(String f) throws IOException {  return new BiCorpus(fpath + f + extf,epath + f + exte);}  }
class C{  public JSONArray put(int index,Map value) throws JSONException {  put(index,(Object)new JSONObject(value));  return this;}  }
class C{  private void putEntry(String key,CacheHeader entry){  if (!mEntries.containsKey(key)) {    mTotalSize+=entry.size;  } else {    CacheHeader oldEntry=mEntries.get(key);    mTotalSize+=(entry.size - oldEntry.size);  }  mEntries.put(key,entry);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public EmailIntentBuilder bcc(@NonNull String bcc){  checkEmail(bcc);  this.bcc.add(bcc);  return this;}  }
class C{  public static Monitor add(MonKey key,double value){  return factory.add(key,value);}  }
class C{  public ConnectionConfig(jmri.jmrix.NetworkPortAdapter p){  super(p);}  }
class C{  private void analyze(Analyzer analyzer,boolean allowFlow,IntArray pendingTargets,IntArray completedTargets) throws Exception {  pending:   while (pendingTargets.size() > 0) {    int pc=pendingTargets.pop();    if (allowFlow) {      if (completedTargets.contains(pc))       continue pending;      completedTargets.add(pc);    }    setOffset(pc);    flow:     do {      pc=getOffset();      if (pc < 0)       throw new IllegalStateException();      if (!allowFlow) {        if (completedTargets.contains(pc))         break flow;        completedTargets.add(pc);      }      if (isBranch()) {        int targetPC=getBranchTarget();        if (!pendingTargets.contains(targetPC))         pendingTargets.add(targetPC);      } else       if (isSwitch()) {        int[] switchTargets=getSwitchTargets();        for (int i=0; i < switchTargets.length; i++) {          if (!pendingTargets.contains(switchTargets[i]))           pendingTargets.add(switchTargets[i]);        }      }      analyzer.analyze(this);    } while (next());  }}  }
class C{  public static double calculateFeet(double meters){  double feet=meters * 3.281;  return feet;}  }
class C{  protected void init(String sidc){  this.symbolCode=new SymbolCode(sidc);  this.maskedSymbolCode=this.symbolCode.toMaskedString();  this.setAltitudeMode(WorldWind.CLAMP_TO_GROUND);  String iconRetrieverPath=Configuration.getStringValue(AVKey.MIL_STD_2525_ICON_RETRIEVER_PATH,MilStd2525Constants.DEFAULT_ICON_RETRIEVER_PATH);  this.setIconRetriever(new MilStd2525PointGraphicRetriever(iconRetrieverPath));  Offset offset=defaultOffsets.get(this.symbolCode.toMaskedString());  this.setOffset(offset);  this.setShowHostileIndicator(true);  this.setUnitsFormat(MilStd2525TacticalSymbol.DEFAULT_UNITS_FORMAT);}  }
class C{  public void testDrainToSelfN(){  LinkedBlockingQueue q=populatedQueue(SIZE);  try {    q.drainTo(q,0);    shouldThrow();  } catch (  IllegalArgumentException success) {  }}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == ReferencingElement_IM.class) {switch (baseOperationID) {case ImPackage.REFERENCING_ELEMENT_IM___GET_ORIGINAL_TARGET_OF_REWIRED_TARGET:      return ImPackage.IDENTIFIER_REF_IM___GET_ORIGINAL_TARGET_OF_REWIRED_TARGET;default :    return -1;}}if (baseClass == ReferencingElementExpression_IM.class) {switch (baseOperationID) {default :  return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public void addSignature(final MultisigSignatureTransaction transaction){  if (!this.getOtherTransactionHash().equals(transaction.getOtherTransactionHash())) {    throw new IllegalArgumentException("trying to add a signature for another transaction to a multisig transaction");  }  if (!this.otherTransaction.getSigner().equals(transaction.getDebtor())) {    throw new IllegalArgumentException("trying to add a signature with an unexpected debtor");  }  if (this.getSigner().equals(transaction.getSigner())) {    return;  }  this.signatureTransactions.add(transaction);}  }
class C{  private void adjustDopOfReduceOrCoGroup(GroupReduceOperator reduceOp,int dop){  reduceOp.setParallelism(dop);  DataSet reduceInput=reduceOp.getInput();  if (reduceInput instanceof SortPartitionOperator) {    SortPartitionOperator sortOp=(SortPartitionOperator)reduceInput;    sortOp.setParallelism(dop);    DataSet sortInput=sortOp.getInput();    if (sortInput instanceof PartitionOperator) {      PartitionOperator partitionOp=(PartitionOperator)sortInput;      partitionOp.setParallelism(dop);    }  } else   if (reduceInput instanceof JoinOperator && ((JoinOperator)reduceInput).getJoinHint() == JoinHint.REPARTITION_SORT_MERGE) {    JoinOperator joinOp=(JoinOperator)reduceInput;    while (joinOp != null && joinOp.getJoinHint() == JoinHint.REPARTITION_SORT_MERGE) {      joinOp.setParallelism(dop);      DataSet leftJoinInput=joinOp.getInput1();      if (leftJoinInput instanceof JoinOperator) {        joinOp=(JoinOperator)leftJoinInput;      } else {        joinOp=null;      }    }  }}  }
class C{  @Override public void close() throws SQLException {  try {    super.close();    batchParameters=null;    if (command != null) {      command.close();      command=null;    }  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private OIDCUtils(){}  }
class C{  public SidewikiEntryQuery(URL feedUrl){  super(feedUrl);}  }
class C{  private void normalize(double[] in){  double max=0d;  for (  double d : in) {    max=Math.max(max,d);  }  for (int i=0; i < in.length; i++) {    in[i]=in[i] / max;  }}  }
class C{  public LayerDeclaration withLayer(String layerName){  LayerDeclaration layerDeclaration=layers.get(layerName);  if (layerDeclaration != null) {    return layerDeclaration;  }  layerDeclaration=new LayerDeclaration(layerName);  layers.put(layerName,layerDeclaration);  return layerDeclaration;}  }
class C{  public int querySurface(EGLSurface eglSurface,int what){  int[] value=new int[1];  EGL14.eglQuerySurface(mEGLDisplay,eglSurface,what,value,0);  return value[0];}  }
class C{  private List<String> findZonesetClonesToDelete(Integer vsanId){  List<String> zonesetClonesToDelete=new ArrayList<String>();  List<Zoneset> zonesets=showZoneset(vsanId,false,null,false,false);  Calendar cal=Calendar.getInstance();  DateFormat dateFormat=new SimpleDateFormat("MMddyy");  String dateStr=dateFormat.format(cal.getTime());  for (  Zoneset zoneset : zonesets) {    if (zoneset.getName().contains(dateStr) && zoneset.getName().contains("ViPR")) {      _log.info(String.format("Identified zoneset (clone) %s to be removed",zoneset.getName()));      zonesetClonesToDelete.add(zoneset.getName());    }  }  return zonesetClonesToDelete;}  }
class C{  public static void main(String[] args){  TestRunner.run(ServiceInvocationTest.class);}  }
class C{  @Override public XATopicConnection createXATopicConnection() throws JMSException {  if (ActiveMQRAConnectionFactoryImpl.trace) {    ActiveMQRALogger.LOGGER.trace("createXATopicConnection()");  }  ActiveMQRASessionFactoryImpl s=new ActiveMQRASessionFactoryImpl(mcf,cm,getResourceAdapter().getTM(),ActiveMQRAConnectionFactory.XA_TOPIC_CONNECTION);  if (ActiveMQRAConnectionFactoryImpl.trace) {    ActiveMQRALogger.LOGGER.trace("Created topic connection: " + s);  }  return s;}  }
class C{  public boolean isPlain(){  return !(bold || italic);}  }
class C{  protected static void print(String msg){  System.out.print(msg);}  }
class C{  @Deprecated public MessageDialog(String i18nKey,Object... i18nArgs){  this(ApplicationFrame.getApplicationFrame(),i18nKey,null,i18nArgs);}  }
class C{  private void validateParentNotRpProtected(UnManagedVolume unManagedVolume){  String parentNativeGUID=null;  StringSetMap unManagedVolumeInformation=unManagedVolume.getVolumeInformation();  if (unManagedVolumeInformation.containsKey(SupportedVolumeInformation.LOCAL_REPLICA_SOURCE_VOLUME.toString())) {    parentNativeGUID=PropertySetterUtil.extractValueFromStringSet(SupportedVolumeInformation.LOCAL_REPLICA_SOURCE_VOLUME.toString(),unManagedVolumeInformation);  } else   if (unManagedVolumeInformation.containsKey(SupportedVolumeInformation.VPLEX_PARENT_VOLUME.toString())) {    parentNativeGUID=PropertySetterUtil.extractValueFromStringSet(SupportedVolumeInformation.VPLEX_PARENT_VOLUME.toString(),unManagedVolumeInformation);  }  if (parentNativeGUID != null) {    logger.info("Finding unmanagedvolume {} in vipr db",parentNativeGUID);    URIQueryResultList umvUriList=new URIQueryResultList();    _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getVolumeInfoNativeIdConstraint(parentNativeGUID),umvUriList);    if (umvUriList.iterator().hasNext()) {      logger.info("Found unmanagedvolume {} in vipr db",parentNativeGUID);      URI umvUri=umvUriList.iterator().next();      UnManagedVolume parentUnManagedVolume=_dbClient.queryObject(UnManagedVolume.class,umvUri);      if (parentUnManagedVolume != null && VolumeIngestionUtil.checkUnManagedResourceIsRecoverPointEnabled(parentUnManagedVolume)) {        logger.warn("Unmanaged mirror {} has RP protected parent",unManagedVolume.getLabel());        throw IngestionException.exceptions.cannotIngestMirrorsOfRPVolumes(unManagedVolume.getLabel(),parentUnManagedVolume.getLabel());      }    } else {      logger.info("Finding managed volume in vipr db corresponding to {}",parentNativeGUID);      BlockObject parentObject=VolumeIngestionUtil.getBlockObject(parentNativeGUID.replace(VolumeIngestionUtil.UNMANAGEDVOLUME,VolumeIngestionUtil.VOLUME),_dbClient);      if (parentObject != null && BlockObject.checkForRP(_dbClient,parentObject.getId())) {        logger.warn("Unmanaged mirror {} has RP protected parent",unManagedVolume.getLabel());        throw IngestionException.exceptions.cannotIngestMirrorsOfRPVolumes(unManagedVolume.getLabel(),parentObject.getLabel());      }    }  }}  }
class C{  public void removeImageSharing(String sharingId){  mImageSharingCache.remove(sharingId);}  }
class C{  public void testGetUnsignedByte(){  byte[] bytes={3,0,0,1,(byte)-1,(byte)-127,(byte)-128};  MySQLPacket array=new MySQLPacket(bytes.length - MySQLPacket.HEADER_LENGTH,bytes,(byte)1);  assertEquals(255,array.getUnsignedByte());  assertEquals(129,array.getUnsignedByte());  assertEquals(128,array.getUnsignedByte());}  }
class C{  public void finishResponse(){  try {    if (writer != null) {      writer.close();    } else {      if (stream != null)       stream.close();    }  } catch (  IOException e) {  }}  }
class C{  private void addCSSClasses(SVGPlot svgp){  if (!svgp.getCSSClassManager().contains(CSS_ARROW)) {    final CSSClass acls=new CSSClass(this,CSS_ARROW);    final StyleLibrary style=context.getStyleLibrary();    acls.setStatement(SVGConstants.CSS_STROKE_PROPERTY,style.getColor(StyleLibrary.SELECTION_ACTIVE));    acls.setStatement(SVGConstants.CSS_STROKE_WIDTH_PROPERTY,style.getLineWidth(StyleLibrary.SELECTION_ACTIVE));    acls.setStatement(SVGConstants.CSS_STROKE_LINECAP_PROPERTY,SVGConstants.CSS_ROUND_VALUE);    svgp.addCSSClassOrLogError(acls);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  public int updateCutOffDay(final int cutOffDay) throws Exception {  VOOrganization organizationData=accountService.getOrganizationData();  int oldCutoffDay=accountServiceManagement.getCutOffDayOfOrganization();  accountServiceManagement.setCutOffDayOfOrganization(cutOffDay,organizationData);  return oldCutoffDay;}  }
class C{  static int compareMarkers(IMarker m1,IMarker m2){  if (m1 == null || m2 == null || !m1.exists() || !m2.exists()) {    return 0;  }  int rank1=MarkerUtil.findBugRankForMarker(m1);  int rank2=MarkerUtil.findBugRankForMarker(m2);  int result=rank1 - rank2;  if (result != 0) {    return result;  }  int prio1=MarkerUtil.findConfidenceForMarker(m1).ordinal();  int prio2=MarkerUtil.findConfidenceForMarker(m2).ordinal();  result=prio1 - prio2;  if (result != 0) {    return result;  }  String a1=m1.getAttribute(IMarker.MESSAGE,"");  String a2=m2.getAttribute(IMarker.MESSAGE,"");  return a1.compareToIgnoreCase(a2);}  }
class C{  public Exception(java.lang.String s){  super(s);}  }
class C{  protected void drawSimpleLabels(Graphics2D g2,List keys,double totalValue,Rectangle2D plotArea,Rectangle2D pieArea,PiePlotState state){  Composite originalComposite=g2.getComposite();  g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,1.0f));  Rectangle2D labelsArea=this.simpleLabelOffset.createInsetRectangle(pieArea);  double runningTotal=0.0;  Iterator iterator=keys.iterator();  while (iterator.hasNext()) {    Comparable key=(Comparable)iterator.next();    boolean include;    double v=0.0;    Number n=getDataset().getValue(key);    if (n == null) {      include=!getIgnoreNullValues();    } else {      v=n.doubleValue();      include=getIgnoreZeroValues() ? v > 0.0 : v >= 0.0;    }    if (include) {      runningTotal=runningTotal + v;      double mid=getStartAngle() + (getDirection().getFactor() * ((runningTotal - v / 2.0) * 360) / totalValue);      Arc2D arc=new Arc2D.Double(labelsArea,getStartAngle(),mid - getStartAngle(),Arc2D.OPEN);      int x=(int)arc.getEndPoint().getX();      int y=(int)arc.getEndPoint().getY();      PieSectionLabelGenerator myLabelGenerator=getLabelGenerator();      if (myLabelGenerator == null) {        continue;      }      String label=myLabelGenerator.generateSectionLabel(this.dataset,key);      if (label == null) {        continue;      }      g2.setFont(this.labelFont);      FontMetrics fm=g2.getFontMetrics();      Rectangle2D bounds=TextUtilities.getTextBounds(label,g2,fm);      Rectangle2D out=this.labelPadding.createOutsetRectangle(bounds);      Shape bg=ShapeUtilities.createTranslatedShape(out,x - bounds.getCenterX(),y - bounds.getCenterY());      if (this.labelShadowPaint != null && this.shadowGenerator == null) {        Shape shadow=ShapeUtilities.createTranslatedShape(bg,this.shadowXOffset,this.shadowYOffset);        g2.setPaint(this.labelShadowPaint);        g2.fill(shadow);      }      if (this.labelBackgroundPaint != null) {        g2.setPaint(this.labelBackgroundPaint);        g2.fill(bg);      }      if (this.labelOutlinePaint != null && this.labelOutlineStroke != null) {        g2.setPaint(this.labelOutlinePaint);        g2.setStroke(this.labelOutlineStroke);        g2.draw(bg);      }      g2.setPaint(this.labelPaint);      g2.setFont(this.labelFont);      TextUtilities.drawAlignedString(label,g2,x,y,TextAnchor.CENTER);    }  }  g2.setComposite(originalComposite);}  }
class C{  public Button(Image icon){  this("",icon);}  }
class C{  private ReferenceType computeFirstCommonSuperclassOfSameDimensionArrays(ArrayType aArrType,ArrayType bArrType) throws ClassNotFoundException {  assert aArrType.getDimensions() == bArrType.getDimensions();  Type aBaseType=aArrType.getBasicType();  Type bBaseType=bArrType.getBasicType();  boolean aBaseIsObjectType=(aBaseType instanceof ObjectType);  boolean bBaseIsObjectType=(bBaseType instanceof ObjectType);  if (!aBaseIsObjectType || !bBaseIsObjectType) {    assert (aBaseType instanceof BasicType) || (bBaseType instanceof BasicType);    if (aArrType.getDimensions() > 1) {      return new ArrayType(Type.OBJECT,aArrType.getDimensions() - 1);    } else {      assert aArrType.getDimensions() == 1;      return Type.OBJECT;    }  } else {    assert (aBaseType instanceof ObjectType);    assert (bBaseType instanceof ObjectType);    ObjectType firstCommonBaseType=getFirstCommonSuperclass((ObjectType)aBaseType,(ObjectType)bBaseType);    return new ArrayType(firstCommonBaseType,aArrType.getDimensions());  }}  }
class C{  public boolean findRecord(Record r,int section){  return (sections[section] != null && sections[section].contains(r));}  }
class C{  @Override public boolean equals(Object other){  if (other == null) {    return false;  } else   if (!(other instanceof PeerNetwork)) {    return false;  } else   if (other.getClass() != this.getClass()) {    return false;  } else   if (((PeerNetwork)other).getBluetoothLEDevice() == null) {    return this.getBluetoothLEDevice() == null;  }  return ((PeerNetwork)other).getBluetoothLEDevice().equals(this.getBluetoothLEDevice());}  }
class C{  public boolean usernameEquals(byte[] username){  byte[] thisUsername=getUsername();  return (username == null) ? (thisUsername == null) : Arrays.equals(username,thisUsername);}  }
class C{  public WriteException(Collection<WriteRequest> requests){  super();  this.requests=asRequestList(requests);}  }
class C{  public FilterJoinBuilder maxTermsPerShard(int maxTermsPerShard){  this.maxTermsPerShard=maxTermsPerShard;  return this;}  }
class C{  public HttpClient(URL url,Map<String,Object> parameters,Map<String,String> headers){  this.url=url.toExternalForm();  this.parameters=parameters;  this.headers=headers;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.POSTFIX_EXPRESSION__EXPRESSION:    return getExpression();case N4JSPackage.POSTFIX_EXPRESSION__OP:  return getOp();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private static void quickSort1(short x[],int off,int len,ShortComparator comp){  if (len < SMALL) {    for (int i=off; i < len + off; i++)     for (int j=i; j > off && comp.compare(x[j - 1],x[j]) > 0; j--)     swap(x,j,j - 1);    return;  }  int m=off + len / 2;  if (len > SMALL) {    int l=off;    int n=off + len - 1;    if (len > MEDIUM) {      int s=len / 8;      l=med3(x,l,l + s,l + 2 * s,comp);      m=med3(x,m - s,m,m + s,comp);      n=med3(x,n - 2 * s,n - s,n,comp);    }    m=med3(x,l,m,n,comp);  }  short v=x[m];  int a=off, b=a, c=off + len - 1, d=c;  while (true) {    int comparison;    while (b <= c && (comparison=comp.compare(x[b],v)) <= 0) {      if (comparison == 0)       swap(x,a++,b);      b++;    }    while (c >= b && (comparison=comp.compare(x[c],v)) >= 0) {      if (comparison == 0)       swap(x,c,d--);      c--;    }    if (b > c)     break;    swap(x,b++,c--);  }  int s, n=off + len;  s=Math.min(a - off,b - a);  vecswap(x,off,b - s,s);  s=Math.min(d - c,n - d - 1);  vecswap(x,b,n - s,s);  if ((s=b - a) > 1)   quickSort1(x,off,s,comp);  if ((s=d - c) > 1)   quickSort1(x,n - s,s,comp);}  }
class C{  @Override public void connection_setAutoCommit(FilterChain chain,ConnectionProxy connection,boolean autoCommit) throws SQLException {  connectionLog("{conn-" + connection.getId() + "} setAutoCommit "+ autoCommit);  chain.connection_setAutoCommit(connection,autoCommit);}  }
class C{  @Override public double calculate_K(int[] x_index,double[] x_att,int[] y_index,double[] y_att){  double prod=innerproduct(x_index,x_att,y_index,y_att);  double result=prod;  for (int i=1; i < degree; i++) {    result*=prod;  }  return result;}  }
class C{  public void removeRelsPorProc(String idProc) throws Exception {  authenticate();  GestionDocumentosVitalesBI docVitBI=getServiceRepository().lookupGestionDocumentosVitalesBI();  docVitBI.deleteTiposDocVitByIdProc(idProc);}  }
class C{  public static Object registerModifEvent(String sessionID,String eventId,Integer bookId,Integer folderId,String entidad) throws DistributionException, SessionException, ValidationException {  Object result=null;  if (log.isDebugEnabled()) {    log.debug("distributionEx eventId [" + eventId + "]");  }  Validator.validate_String_NotNull_LengthMayorZero(sessionID,ValidationException.ATTRIBUTE_SESSION);  try {    CacheBag cacheBag=CacheFactory.getCacheInterface().getCacheEntry(sessionID);    AuthenticationUser user=(AuthenticationUser)cacheBag.get(HIBERNATE_Iuseruserhdr);    ScrOfic scrofic=(ScrOfic)cacheBag.get(HIBERNATE_ScrOfic);    THashMap bookInformation=(THashMap)cacheBag.get(bookId);    Idocarchdet idoc=(Idocarchdet)bookInformation.get(IDocKeys.IDOCARCHDET_FLD_DEF_ASOBJECT);    RuleContext ruleCtx=new RuleContext();    ruleCtx.setIdocarchdet(idoc);    ruleCtx.setUsuario(user.getId().toString());    ruleCtx.setSessionId(sessionID);    ruleCtx.setEventId(eventId);    ruleCtx.setLibro(bookId);    ruleCtx.setRegistro(folderId);    if (scrofic != null) {      ruleCtx.setOficina(scrofic.getId());    }    ruleCtx.setEntidad(entidad);    result=EventsFactory.getCurrentEvent(ruleCtx.getEventId()).execute(ruleCtx);  } catch (  EventException ee) {    log.error("Se ha producido un error durante la ejecucion del evento de modificacion del registro [" + folderId + "]");    throw ee;  }catch (  SessionException e) {    throw e;  }catch (  Exception e) {    log.error("Impossible to launch event for externe distribution for the session [" + sessionID + "]",e);    throw new DistributionException(DistributionException.ERROR_CANNOT_SAVE_DISTRIBUTION);  }  return result;}  }
class C{  private String guessEncoding(String baseUrl,String defaultValue){  if (LOG.isTraceEnabled()) {    findDisagreements(baseUrl,clues);  }  EncodingClue defaultClue=new EncodingClue(defaultValue,"default");  EncodingClue bestClue=defaultClue;  for (  EncodingClue clue : clues) {    if (LOG.isTraceEnabled()) {      LOG.trace(baseUrl + ": charset " + clue);    }    String charset=clue.value;    if (minConfidence >= 0 && clue.confidence >= minConfidence) {      if (LOG.isTraceEnabled()) {        LOG.trace(baseUrl + ": Choosing encoding: " + charset+ " with confidence "+ clue.confidence);      }      return resolveEncodingAlias(charset).toLowerCase();    } else     if (clue.confidence == NO_THRESHOLD && bestClue == defaultClue) {      bestClue=clue;    }  }  if (LOG.isTraceEnabled()) {    LOG.trace(baseUrl + ": Choosing encoding: " + bestClue);  }  return bestClue.value.toLowerCase();}  }
class C{  public static Intent composeQuickContactsIntent(Context context,Rect target,Uri lookupUri,int mode,String[] excludeMimes){  Context actualContext=context;  while ((actualContext instanceof ContextWrapper) && !(actualContext instanceof Activity)) {    actualContext=((ContextWrapper)actualContext).getBaseContext();  }  final int intentFlags=(actualContext instanceof Activity) ? Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET : Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK;  final Intent intent=new Intent(ACTION_QUICK_CONTACT).addFlags(intentFlags);  intent.setData(lookupUri);  intent.setSourceBounds(target);  intent.putExtra(EXTRA_MODE,mode);  intent.putExtra(EXTRA_EXCLUDE_MIMES,excludeMimes);  return intent;}  }
class C{  @SuppressWarnings("unchecked") RegistryContext(RegistryContext ctx){  environment=(Hashtable<String,Object>)ctx.environment.clone();  registry=ctx.registry;  host=ctx.host;  port=ctx.port;  reference=ctx.reference;}  }
class C{  private int internalAwaitAdvance(int phase,QNode node){  releaseWaiters(phase - 1);  boolean queued=false;  int lastUnarrived=0;  int spins=SPINS_PER_ARRIVAL;  long s;  int p;  while ((p=(int)((s=state) >>> PHASE_SHIFT)) == phase) {    if (node == null) {      int unarrived=(int)s & UNARRIVED_MASK;      if (unarrived != lastUnarrived && (lastUnarrived=unarrived) < NCPU)       spins+=SPINS_PER_ARRIVAL;      boolean interrupted=Thread.interrupted();      if (interrupted || --spins < 0) {        node=new QNode(this,phase,false,false,0L);        node.wasInterrupted=interrupted;      }    } else     if (node.isReleasable())     break; else     if (!queued) {      AtomicReference<QNode> head=(phase & 1) == 0 ? evenQ : oddQ;      QNode q=node.next=head.get();      if ((q == null || q.phase == phase) && (int)(state >>> PHASE_SHIFT) == phase)       queued=head.compareAndSet(q,node);    } else {      try {        ForkJoinPool.managedBlock(node);      } catch (      InterruptedException cantHappen) {        node.wasInterrupted=true;      }    }  }  if (node != null) {    if (node.thread != null)     node.thread=null;    if (node.wasInterrupted && !node.interruptible)     Thread.currentThread().interrupt();    if (p == phase && (p=(int)(state >>> PHASE_SHIFT)) == phase)     return abortWait(phase);  }  releaseWaiters(phase);  return p;}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/discover") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public TaskResourceRep discoverNetworkSystem(@PathParam("id") URI id){  ArgValidator.checkFieldUriType(id,NetworkSystem.class,"id");  NetworkSystem device=queryObject(NetworkSystem.class,id,true);  return doDiscoverNetworkSystem(device);}  }
class C{  public static String dumpStackTrace(int level){  StackTraceElement[] elems=Thread.currentThread().getStackTrace();  level=(level == 0 ? elems.length : Math.min(level + 3,elems.length));  String ret=new String();  for (int i=3; i < level; i++) {    ret=ret + "\t" + elems[i].toString()+ '\n';  }  return ret;}  }
class C{  public boolean isEmpty(){  return mSize <= 0;}  }
class C{  public Channel off(final String event){synchronized (bindings) {    for (final Iterator<Binding> bindingIter=bindings.iterator(); bindingIter.hasNext(); ) {      if (bindingIter.next().getEvent().equals(event)) {        bindingIter.remove();        break;      }    }  }  return this;}  }
class C{  static void exportPrefs(Preferences prefs,OutputStream stream,boolean withSubTree) throws IOException, BackingStoreException {  indent=-1;  BufferedWriter out=new BufferedWriter(new OutputStreamWriter(stream,"UTF-8"));  out.write(HEADER);  out.newLine();  out.newLine();  out.write(DOCTYPE);  out.write(" '");  out.write(PREFS_DTD_NAME);  out.write("'>");  out.newLine();  out.newLine();  flushStartTag("preferences",new String[]{"EXTERNAL_XML_VERSION"},new String[]{String.valueOf(XML_VERSION)},out);  flushStartTag("root",new String[]{"type"},new String[]{prefs.isUserNode() ? "user" : "system"},out);  flushEmptyElement("map",out);  StringTokenizer ancestors=new StringTokenizer(prefs.absolutePath(),"/");  exportNode(ancestors,prefs,withSubTree,out);  flushEndTag("root",out);  flushEndTag("preferences",out);  out.flush();  out=null;}  }
class C{  private void cmd_print(){  cmd_print(false);}  }
class C{  public synchronized String readDroneConfiguration(){  String ret=null;synchronized (this) {    Socket socket=null;    try {      socket=new Socket(drone_addr.getHostAddress(),CONTROL_PORT);      ByteArrayOutputStream bos=new ByteArrayOutputStream();      byte[] buffer=new byte[1024];      int readCount;      InputStream in=socket.getInputStream();      cmd_queue.add(new ControlCommand(4,0));      boolean continueReading=true;      while (continueReading && ((readCount=in.read(buffer)) > 0)) {        bos.write(buffer,0,readCount);        try {          Thread.sleep(100);        } catch (        InterruptedException e) {          log.log(Level.SEVERE,"Interrupted",e);        }        continueReading=in.available() > 0;      }      bos.close();      ret=new String(bos.toByteArray(),"ASCII");    } catch (    IOException ex) {      log.log(Level.SEVERE,"Error. Fialed to read drone configuration",ex);    } finally {      try {        socket.close();      } catch (      IOException e) {        log.log(Level.SEVERE,"Error. Close Drone TCP controll chanel",e);      }    }  }  return ret;}  }
class C{  @SuppressWarnings("unchecked") public static <T,U>T[] copyOfRange2(U[] original,int from,int to,Class<? extends T[]> newType){  int newLength=to - from;  if (newLength < 0)   throw new IllegalArgumentException(from + " > " + to);  T[] copy=((Object)newType == (Object)Object[].class) ? (T[])new Object[newLength] : (T[])Array.newInstance(newType.getComponentType(),newLength);  System.arraycopy(original,from,copy,0,Math.min(original.length - from,newLength));  return copy;}  }
class C{  public void java_lang_Class_getMethods0(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getLeastArrayObject());}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == TMember.class) {switch (baseFeatureID) {case TypesPackage.TMEMBER__DECLARED_FINAL:      return TypesPackage.TMETHOD__DECLARED_FINAL;case TypesPackage.TMEMBER__DECLARED_STATIC:    return TypesPackage.TMETHOD__DECLARED_STATIC;case TypesPackage.TMEMBER__DECLARED_OVERRIDE:  return TypesPackage.TMETHOD__DECLARED_OVERRIDE;default :return -1;}}if (baseClass == TMemberWithAccessModifier.class) {switch (baseFeatureID) {case TypesPackage.TMEMBER_WITH_ACCESS_MODIFIER__HAS_NO_BODY:return TypesPackage.TMETHOD__HAS_NO_BODY;case TypesPackage.TMEMBER_WITH_ACCESS_MODIFIER__DECLARED_MEMBER_ACCESS_MODIFIER:return TypesPackage.TMETHOD__DECLARED_MEMBER_ACCESS_MODIFIER;default :return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  public boolean replanCurrentLegRoute(Leg leg,Person person,int currentLinkIndex,double time){  Route route=leg.getRoute();  if (!(route instanceof NetworkRoute)) {    log.warn("route not instance of network route");    return false;  }  return relocateCurrentLegRoute(leg,person,currentLinkIndex,route.getEndLinkId(),time);}  }
class C{  public long create_sample_to_chunk_atom(MP4DataStream bitstream) throws IOException {  create_full_atom(bitstream);  records=new Vector<Record>();  entryCount=(int)bitstream.readBytes(4);  readed+=4;  for (int i=0; i < entryCount; i++) {    int firstChunk=(int)bitstream.readBytes(4);    int samplesPerChunk=(int)bitstream.readBytes(4);    int sampleDescriptionIndex=(int)bitstream.readBytes(4);    records.addElement(new Record(firstChunk,samplesPerChunk,sampleDescriptionIndex));    readed+=12;  }  return readed;}  }
class C{  public void logFatal(Object message){  logInternal(FATAL,message,null);}  }
class C{  public COptionsPanel(final List<ITypeDescription> descriptions){  super(new BorderLayout());  Preconditions.checkNotNull(descriptions,"IE00667: Descriptions argument can not be null");  final JPanel mainPanel=new JPanel(new BorderLayout());  final JPanel innerMainPanel=new JPanel(new GridBagLayout());  final JPanel functionTypeColorPanel=new JPanel(new GridLayout(descriptions.size(),1,3,3));  for (  final ITypeDescription description : descriptions) {    final ColorPanel colorPanel=new ColorPanel(description.getColor(),true,true);    final InternalColorPanelListener listener=new InternalColorPanelListener(description);    colorPanel.addListener(listener);    m_listenerMap.put(colorPanel,listener);    buildRow(functionTypeColorPanel,description,description.getHint(),colorPanel,false);  }  functionTypeColorPanel.setBorder(new TitledBorder("Colors"));  final GridBagConstraints constraints=new GridBagConstraints();  constraints.gridx=0;  constraints.gridy=0;  constraints.anchor=GridBagConstraints.FIRST_LINE_START;  constraints.weightx=1;  constraints.fill=GridBagConstraints.HORIZONTAL;  innerMainPanel.add(functionTypeColorPanel,constraints);  mainPanel.add(innerMainPanel,BorderLayout.NORTH);  add(new JScrollPane(mainPanel));}  }
class C{  public static byte[] encryptKey(@NotNull byte[] password,byte[] rawKey){  try {    Cipher c=Cipher.getInstance(ENCRYPT_KEY_ALGORITHM);    c.init(Cipher.ENCRYPT_MODE,new SecretKeySpec(password,SECRET_KEY_ALGORITHM),CBC_SALT_KEY);    return c.doFinal(rawKey);  } catch (  GeneralSecurityException e) {    throw new IllegalStateException(e.getMessage(),e);  }}  }
class C{  private void handleStellar(String expression){  Iterable<String> assignmentSplit=Splitter.on(":=").split(expression);  String stellarExpression=expression;  String variable=null;  if (Iterables.size(assignmentSplit) == 2) {    variable=Iterables.getFirst(assignmentSplit,null);    if (variable != null) {      variable=variable.trim();    }    stellarExpression=Iterables.getLast(assignmentSplit,null);  }  if (!stellarExpression.isEmpty()) {    stellarExpression=stellarExpression.trim();  }  Object result=executeStellar(stellarExpression);  if (result != null && variable == null) {    writeLine(result.toString());  }  if (variable != null) {    executor.assign(variable,stellarExpression,result);  }}  }
class C{  private void serverSideRegResponseProcessing(RegistrationResponse resp) throws Exception {  RegistrationResponseProcessing respProcessing=new RegistrationResponseProcessing();  RegistrationRecord[] regRecord=respProcessing.processResponse(resp);  storage=new Storage(regRecord[0].PublicKey);  logger.info(" : Reg records : " + gson.toJson(regRecord,RegistrationRecord[].class));}  }
class C{  public void assertFail(SolrParams p,ErrorCode expCode,String expSubstr) throws Exception {  try {    ignoreException(expSubstr);    assertJQ(req(p));    fail("no exception matching expected: " + expCode.code + ": "+ expSubstr);  } catch (  SolrException e) {    assertEquals(expCode.code,e.code());    assertTrue("Expected substr not found: " + expSubstr + " <!< "+ e.getMessage(),e.getMessage().contains(expSubstr));  } finally {    unIgnoreException(expSubstr);  }}  }
class C{  public com.emc.storageos.vasa.VasaServiceStub.QueryAssociatedProcessorsForArrayResponse queryAssociatedProcessorsForArray(com.emc.storageos.vasa.VasaServiceStub.QueryAssociatedProcessorsForArray queryAssociatedProcessorsForArray9) throws java.rmi.RemoteException, com.emc.storageos.vasa.NotImplemented, com.emc.storageos.vasa.InvalidArgument, com.emc.storageos.vasa.InvalidSession, com.emc.storageos.vasa.StorageFault {  org.apache.axis2.context.MessageContext _messageContext=null;  try {    org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[4].getName());    _operationClient.getOptions().setAction("urn:queryAssociatedProcessorsForArray");    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);    addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");    _messageContext=new org.apache.axis2.context.MessageContext();    org.apache.axiom.soap.SOAPEnvelope env=null;    env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),queryAssociatedProcessorsForArray9,optimizeContent(new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/","queryAssociatedProcessorsForArray")));    _serviceClient.addHeadersToEnvelope(env);    _messageContext.setEnvelope(env);    _operationClient.addMessageContext(_messageContext);    _operationClient.execute(true);    org.apache.axis2.context.MessageContext _returnMessageContext=_operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);    org.apache.axiom.soap.SOAPEnvelope _returnEnv=_returnMessageContext.getEnvelope();    java.lang.Object object=fromOM(_returnEnv.getBody().getFirstElement(),com.emc.storageos.vasa.VasaServiceStub.QueryAssociatedProcessorsForArrayResponse.class,getEnvelopeNamespaces(_returnEnv));    return (com.emc.storageos.vasa.VasaServiceStub.QueryAssociatedProcessorsForArrayResponse)object;  } catch (  org.apache.axis2.AxisFault f) {    org.apache.axiom.om.OMElement faultElt=f.getDetail();    if (faultElt != null) {      if (faultExceptionNameMap.containsKey(faultElt.getQName())) {        try {          java.lang.String exceptionClassName=(java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());          java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);          java.lang.Exception ex=(java.lang.Exception)exceptionClass.newInstance();          java.lang.String messageClassName=(java.lang.String)faultMessageMap.get(faultElt.getQName());          java.lang.Class messageClass=java.lang.Class.forName(messageClassName);          java.lang.Object messageObject=fromOM(faultElt,messageClass,null);          java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});          m.invoke(ex,new java.lang.Object[]{messageObject});          if (ex instanceof com.emc.storageos.vasa.NotImplemented) {            throw (com.emc.storageos.vasa.NotImplemented)ex;          }          if (ex instanceof com.emc.storageos.vasa.InvalidArgument) {            throw (com.emc.storageos.vasa.InvalidArgument)ex;          }          if (ex instanceof com.emc.storageos.vasa.InvalidSession) {            throw (com.emc.storageos.vasa.InvalidSession)ex;          }          if (ex instanceof com.emc.storageos.vasa.StorageFault) {            throw (com.emc.storageos.vasa.StorageFault)ex;          }          throw new java.rmi.RemoteException(ex.getMessage(),ex);        } catch (        java.lang.ClassCastException e) {          throw f;        }catch (        java.lang.ClassNotFoundException e) {          throw f;        }catch (        java.lang.NoSuchMethodException e) {          throw f;        }catch (        java.lang.reflect.InvocationTargetException e) {          throw f;        }catch (        java.lang.IllegalAccessException e) {          throw f;        }catch (        java.lang.InstantiationException e) {          throw f;        }      } else {        throw f;      }    } else {      throw f;    }  } finally {    _messageContext.getTransportOut().getSender().cleanup(_messageContext);  }}  }
class C{  static void assertKeysSame(SecretKey key1,SecretKey key2,String meth){  if (!Arrays.equals(key1.getEncoded(),key2.getEncoded())) {    throw new RuntimeException("FAILED: original and unsealed objects aren't the same for " + meth);  }}  }
class C{  public boolean isHDRSupported(){  return this.floatBufferSupported && this.arbFloatBufferSupported;}  }
class C{  private String parseToIsoDate(@NotNull Date dateStamp){  return DATE_FORMAT.format(dateStamp);}  }
class C{  @VisibleForTesting void updateSpeed(long time,double speed,long lastLocationTime,double lastLocationSpeed){  if (speed < MAX_NO_MOVEMENT_SPEED) {    speedBuffer.reset();  } else   if (isValidSpeed(time,speed,lastLocationTime,lastLocationSpeed)) {    speedBuffer.setNext(speed);    if (speedBuffer.getAverage() > currentSegment.getMaxSpeed()) {      currentSegment.setMaxSpeed(speedBuffer.getAverage());    }  } else {    Log.d(TAG,"Invalid speed. speed: " + speed + " lastLocationSpeed: "+ lastLocationSpeed);  }}  }
class C{  public void cleanUp(){  if (containingWindow != null) {    containingWindow.removeComponentListener(componentListener);  }  infoWindow=null;}  }
class C{  private void editMessageItem(MessageItem msgItem){  String body=msgItem.mBody;  deleteMessageItem(msgItem);  KeyboardUtils.show(mContext);  mComposeView.setText(body);}  }
class C{  public Object nextValue() throws JSONException {  char c=this.nextClean();  String string;switch (c) {case '"':case '\'':    return this.nextString(c);case '{':  this.back();return new JSONObject(this);case '[':this.back();return new JSONArray(this);}StringBuffer sb=new StringBuffer();while (c >= ' ' && ",:]}/\\\"[{;=#".indexOf(c) < 0) {sb.append(c);c=this.next();}this.back();string=sb.toString().trim();if ("".equals(string)) {throw this.syntaxError("Missing value");}return JSONObject.stringToValue(string);}  }
class C{  private void initMetrics(ServletContext servletContext,EnumSet<DispatcherType> disps){  log.debug("Initializing Metrics registries");  servletContext.setAttribute(InstrumentedFilter.REGISTRY_ATTRIBUTE,metricRegistry);  servletContext.setAttribute(MetricsServlet.METRICS_REGISTRY,metricRegistry);  log.debug("Registering Metrics Filter");  FilterRegistration.Dynamic metricsFilter=servletContext.addFilter("webappMetricsFilter",new InstrumentedFilter());  metricsFilter.addMappingForUrlPatterns(disps,true,"/*");  metricsFilter.setAsyncSupported(true);  log.debug("Registering Metrics Servlet");  ServletRegistration.Dynamic metricsAdminServlet=servletContext.addServlet("metricsServlet",new MetricsServlet());  metricsAdminServlet.addMapping("/metrics/metrics/*");  metricsAdminServlet.setAsyncSupported(true);  metricsAdminServlet.setLoadOnStartup(2);}  }
class C{  public StyledProgressBarUI(Style style){  this.style=style;}  }
class C{  @Override public boolean isCloseOnCompletion(){  return true;}  }
class C{  public boolean isStartedBy(final T element){  if (element == null) {    return false;  }  return comparator.compare(element,minimum) == 0;}  }
class C{  public boolean isGeolocationPushSupported(){  return mGeolocationPush;}  }
class C{  protected boolean beforeSave(boolean newRecord){  byte[] data=super.getBinaryData();  if (data == null || data.length == 0)   return false;  log.fine(toString());  return true;}  }
class C{  public CalleeMethodsTreeStructure(final Project project,final PsiMethod method,final String scopeType){  super(project,new CallHierarchyNodeDescriptor(project,null,method,true,false));  myScopeType=scopeType;}  }
class C{  public boolean hasWhen(){  return hasExtension(When.class);}  }
class C{  public static double ddiv_d(double lhs,double rhs){  return rhs != 0 ? lhs / rhs : lhs > 0 ? Double.POSITIVE_INFINITY : lhs == 0 ? Double.NaN : Double.NEGATIVE_INFINITY;}  }
class C{  public T rowspan(String value){  return attr("rowspan",value);}  }
class C{  @SuppressWarnings("unchecked") public <R>IgniteFuture<R> future(boolean reset){  if (curFut == null)   throw new IllegalStateException("Asynchronous mode is disabled.");  IgniteFuture<?> fut=curFut.get();  if (fut == null)   throw new IllegalStateException("Asynchronous operation not started.");  if (reset)   curFut.set(null);  return (IgniteFuture<R>)fut;}  }
class C{  public static ForceMergeRequest forceMergeRequest(String... indices){  return new ForceMergeRequest(indices);}  }
class C{  private void nextStream() throws IOException {  if (in != null) {    in.close();  }  if (e.hasMoreElements()) {    in=e.nextElement();    if (in == null) {      throw new NullPointerException("element is null");    }  } else {    in=null;  }}  }
class C{  private Cluster<DendrogramModel> makeCluster(DBIDRef lead,double depth,DBIDs members){  final String name;  if (members.size() == 0) {    name="mrg_" + DBIDUtil.toString(lead) + "_"+ depth;  } else   if (!Double.isNaN(depth) && Double.isInfinite(depth) || (members.size() == 1 && members.contains(lead))) {    name="obj_" + DBIDUtil.toString(lead);  } else   if (!Double.isNaN(depth)) {    name="clu_" + DBIDUtil.toString(lead) + "_"+ depth;  } else {    name="clu_" + DBIDUtil.toString(lead);  }  Cluster<DendrogramModel> cluster=new Cluster<>(name,members,new DendrogramModel(depth));  return cluster;}  }
class C{  public int lookAhead(){  return kind;}  }
class C{  public void init(CFMLWriter writer){  this.base=writer;}  }
class C{  public static void cycleShuffle(){  try {    if (musicPlaybackService != null) {switch (musicPlaybackService.getShuffleMode()) {case MusicPlaybackService.SHUFFLE_NONE:        musicPlaybackService.setShuffleMode(MusicPlaybackService.SHUFFLE_NORMAL);      if (musicPlaybackService.getRepeatMode() == MusicPlaybackService.REPEAT_CURRENT) {        musicPlaybackService.setRepeatMode(MusicPlaybackService.REPEAT_ALL);      }    break;case MusicPlaybackService.SHUFFLE_NORMAL:  musicPlaybackService.setShuffleMode(MusicPlaybackService.SHUFFLE_NONE);break;case MusicPlaybackService.SHUFFLE_AUTO:musicPlaybackService.setShuffleMode(MusicPlaybackService.SHUFFLE_NONE);break;default :break;}}} catch (final RemoteException ignored) {}}  }
class C{  protected void startTimer(SIPServerTransaction transaction){  if (this.timerTask != null && timerTask.transaction == transaction) {    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logDebug("Timer already running for " + getDialogId());    return;  }  if (sipStack.isLoggingEnabled())   sipStack.getStackLogger().logDebug("Starting dialog timer for " + getDialogId());  this.ackSeen=false;  acquireTimerTaskSem();  try {    if (this.timerTask != null) {      this.timerTask.transaction=transaction;    } else {      this.timerTask=new DialogTimerTask(transaction);      sipStack.getTimer().schedule(timerTask,SIPTransactionStack.BASE_TIMER_INTERVAL,SIPTransactionStack.BASE_TIMER_INTERVAL);    }  }  finally {    releaseTimerTaskSem();  }  this.setRetransmissionTicks();}  }
class C{  public MWMDefinition(Properties ctx,int WM_Definition_ID,String trxName){  super(ctx,WM_Definition_ID,trxName);  if (WM_Definition_ID == 0) {  }}  }
class C{  public static boolean supportsImportsWithNamespaces(int majorBinVer,int minorBinVer){  return (majorBinVer > Versions.V1_3_0_JVM_BINARY_MAJOR_VERSION || (majorBinVer == Versions.V1_3_0_JVM_BINARY_MAJOR_VERSION && minorBinVer >= Versions.V1_3_0_JVM_BINARY_MINOR_VERSION));}  }
class C{  public static boolean isValidateOnEveryKey(){  return validateOnEveryKey;}  }
class C{  final public ASTStart Start() throws ParseException {  ASTStart jjtn000=new ASTStart(JJTSTART);  boolean jjtc000=true;  jjtree.openNodeScope(jjtn000);  try {    if (jj_2_1(1)) {      Expression();      jj_consume_token(0);      jjtree.closeNodeScope(jjtn000,true);      jjtc000=false;{        if (true)         return jjtn000;      }    } else {switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case 0:        jj_consume_token(0);      jjtree.closeNodeScope(jjtn000,true);    jjtc000=false;{    if (true)     throw new ParseException("No expression entered");  }addToErrorList("No expression entered");{if (true) return null;}break;default :jj_la1[0]=jj_gen;jj_consume_token(-1);throw new ParseException();}}} catch (Throwable jjte000) {if (jjtc000) {jjtree.clearNodeScope(jjtn000);jjtc000=false;} else {jjtree.popNode();}if (jjte000 instanceof RuntimeException) {{if (true) throw (RuntimeException)jjte000;}}if (jjte000 instanceof ParseException) {{if (true) throw (ParseException)jjte000;}}{if (true) throw (Error)jjte000;}} finally {if (jjtc000) {jjtree.closeNodeScope(jjtn000,true);}}throw new Error("Missing return statement in function");}  }
class C{  public int hashCode(){  long v=Double.doubleToLongBits(value);  return (int)(v ^ (v >>> 32));}  }
class C{  public void close() throws IOException {  string=null;}  }
class C{  public boolean spawnMinionsForPlayer(EntityPlayer playerEnt,int x,int y,int z){  EntityMinion[] minions=getMinionsForMaster(playerEnt);  if (minions.length < minionsPerPlayer) {    final EntityMinion minion=new EntityMinion(playerEnt.worldObj,playerEnt);    minion.setPosition(x,y + 1,z);    playerEnt.worldObj.spawnEntityInWorld(minion);    sendSoundToClients(minion,"minions:minionspawn");    offerMinionToMap(minion,playerEnt.getGameProfile().getName());    minion.currentTarget=new BlockPos(x,y,z);    return true;  }  orderMinionsToMoveTo(playerEnt,x,y,z);  return false;}  }
class C{  public PropertyDescriptor removeProperty(String propertyName){  if (propertyName == null) {    throw new IllegalArgumentException("Property name can not be null");  }  for (Iterator iter=properties.iterator(); iter.hasNext(); ) {    PropertyDescriptor property=(PropertyDescriptor)iter.next();    if (propertyName.equals(property.getName())) {      iter.remove();      return property;    }  }  return null;}  }
class C{  public void progress(Progress pgr){  logger.log(new ProgressLogRecord(Level.INFO,pgr));}  }
class C{  @Override public boolean storesMixedCaseIdentifiers(){  debugCodeCall("storesMixedCaseIdentifiers");  return false;}  }
class C{  public static void checkState(boolean expression,String errorMessageTemplate,Object... errorMessageArgs){  if (!expression) {    throw new IllegalStateException(format(errorMessageTemplate,errorMessageArgs));  }}  }
class C{  public Measurement convert(Reading r,Measurement last){  if (last != null) {    this.Xt=last.getX();    this.Yt=last.getY();    this.Zt=last.getZ();  }  if (this.Xt > 9.E99) {    this.Xt=0;  }  if (this.Yt > 9.E99) {    this.Yt=0;  }  if (this.Zt > 9.E99) {    this.Zt=0;  }  return convert(r);}  }
class C{  private void drawMap(final Graphics g){  g.drawImage(mapImage,0,0,null);}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public int compareTo(File pathname){  return fs.compare(this,pathname);}  }
class C{  protected String generateConfigurationPropertiesText(String containerId) throws Exception {  StringBuilder output=new StringBuilder();  output.append("h3.Supported Configuration properties");  output.append(LINE_SEPARATOR);  output.append(LINE_SEPARATOR);  output.append("The tables below list both the [general configuration " + "properties|Configuration properties] as well as the container-specific ones.");  output.append(LINE_SEPARATOR);  output.append(LINE_SEPARATOR);  if (this.configurationFactory.isConfigurationRegistered(containerId,ContainerType.INSTALLED,ConfigurationType.STANDALONE) || this.configurationFactory.isConfigurationRegistered(containerId,ContainerType.EMBEDDED,ConfigurationType.STANDALONE)) {    output.append("h4.Standalone Local Configuration Properties");    output.append(LINE_SEPARATOR);    output.append(LINE_SEPARATOR);    if (containerId.startsWith("websphere")) {      output.append("{note}");      output.append("Thought the WebSphere container supports [standalone local ");      output.append("configurations|Standalone Local Configuration], it is ");      output.append("recommended for you to prefer using WebSphere with an ");      output.append("[existing local configuration|Existing Local Configuration]; ");      output.append("i.e. a WebSphere profile you would create beforehand using ");      output.append("WebSphere's setup commands and then use that with CARGO.");      output.append("{note}");      output.append(LINE_SEPARATOR);      output.append(LINE_SEPARATOR);    }    if (this.configurationFactory.isConfigurationRegistered(containerId,ContainerType.INSTALLED,ConfigurationType.STANDALONE)) {      output.append(generateConfigurationPropertiesForConfigurationTypeForContainerType("Standalone Local",ConfigurationType.STANDALONE,containerId,ContainerType.INSTALLED));      output.append(LINE_SEPARATOR);    }    if (this.configurationFactory.isConfigurationRegistered(containerId,ContainerType.EMBEDDED,ConfigurationType.STANDALONE)) {      output.append(generateConfigurationPropertiesForConfigurationTypeForContainerType("Standalone Local",ConfigurationType.STANDALONE,containerId,ContainerType.EMBEDDED));      output.append(LINE_SEPARATOR);    }    if (containerId.startsWith("jboss3") || containerId.startsWith("jboss4") || containerId.startsWith("jboss5")|| containerId.startsWith("jboss6")) {      output.append(LINE_SEPARATOR);      output.append(LINE_SEPARATOR);      output.append("{info}A side note on the JBoss ports:");      output.append(LINE_SEPARATOR);      output.append("* The {{cargo.rmi.port}} corresponds to the {{Port}} parameter of ");      output.append("the {{jboss:service=Naming}} bean.");      output.append(LINE_SEPARATOR);      output.append("* The {{cargo.jboss.naming.port}} corresponds to the {{RmiPort}} ");      output.append("parameter of the {{jboss:service=Naming}} bean.");      output.append(LINE_SEPARATOR);      output.append("{info}");      output.append(LINE_SEPARATOR);    } else     if (containerId.startsWith("jonas")) {      output.append(LINE_SEPARATOR);      output.append("{info}In addition to the forementioned properties, you can set ");      output.append("any JOnAS configuration property that's configurable via the ");      output.append("JOnAS configurator using the {{");      output.append(JonasPropertySet.CONFIGURATOR_PREFIX.substring(0,JonasPropertySet.CONFIGURATOR_PREFIX.length() - 1));      output.append("}} prefix. For example, to set the Tomcat AJP port, use the ");      output.append("the property {{");      output.append(JonasPropertySet.CONFIGURATOR_PREFIX);      output.append("ajpPort}} and give the value you like.{info}");      output.append(LINE_SEPARATOR);    }  }  if (this.configurationFactory.isConfigurationRegistered(containerId,ContainerType.INSTALLED,ConfigurationType.EXISTING) || this.configurationFactory.isConfigurationRegistered(containerId,ContainerType.EMBEDDED,ConfigurationType.EXISTING)) {    output.append("h4.Existing Local Configuration Properties");    output.append(LINE_SEPARATOR);    output.append(LINE_SEPARATOR);    if (this.configurationFactory.isConfigurationRegistered(containerId,ContainerType.INSTALLED,ConfigurationType.EXISTING)) {      output.append(generateConfigurationPropertiesForConfigurationTypeForContainerType("Existing Local",ConfigurationType.EXISTING,containerId,ContainerType.INSTALLED));      if (containerId.startsWith("jetty")) {        output.append(LINE_SEPARATOR);        output.append("{info}If you specify {{cargo.runtime.args}} with ");        output.append("{{--ini=anyfile.ini}} (where {{anyfile.ini}} points to a ");        output.append("Jetty INI file), any property set in the CARGO Jetty ");        output.append("container will be ignored and the ones read from the INI file ");        output.append("used instead.{info}");        output.append(LINE_SEPARATOR);      }      output.append(LINE_SEPARATOR);    }    if (this.configurationFactory.isConfigurationRegistered(containerId,ContainerType.EMBEDDED,ConfigurationType.EXISTING)) {      output.append(generateConfigurationPropertiesForConfigurationTypeForContainerType("Existing Local",ConfigurationType.EXISTING,containerId,ContainerType.EMBEDDED));      output.append(LINE_SEPARATOR);    }  }  if (this.configurationFactory.isConfigurationRegistered(containerId,ContainerType.REMOTE,ConfigurationType.RUNTIME)) {    output.append("h4.Runtime Configuration Properties");    if (containerId.startsWith("jboss")) {      output.append(LINE_SEPARATOR);      output.append(LINE_SEPARATOR);      output.append("{info}Before using the JBoss remote deployer, ");      output.append("please read: [JBoss Remote Deployer]{info}");    }    if (containerId.startsWith("jetty")) {      output.append(LINE_SEPARATOR);      output.append(LINE_SEPARATOR);      output.append("{info}Before using the Jetty remote deployer, ");      output.append("please read: [Jetty Remote Deployer]{info}");    } else     if (containerId.equals("glassfish3x")) {      output.append(LINE_SEPARATOR);      output.append(LINE_SEPARATOR);      output.append("{info}Before using the GlassFish remote deployer, ");      output.append("please read: [JSR88]{info}");    }    if (containerId.startsWith("wildfly")) {      output.append(LINE_SEPARATOR);      output.append(LINE_SEPARATOR);      output.append("{info}Before using the WildFly remote deployer, ");      output.append("please read: [JBoss Remote Deployer]{info}");    }    output.append(LINE_SEPARATOR);    output.append(LINE_SEPARATOR);    output.append(generateConfigurationPropertiesForConfigurationTypeForContainerType("Runtime",ConfigurationType.RUNTIME,containerId,ContainerType.REMOTE));    output.append(LINE_SEPARATOR);    if (containerId.equals("tomcat7x") || containerId.equals("tomcat8x") || containerId.equals("tomcat9x")|| containerId.startsWith("tomee")) {      output.append("{info}With ");      if (containerId.equals("tomcat7x")) {        output.append("Tomcat 7");      } else       if (containerId.equals("tomcat8x")) {        output.append("Tomcat 8");      } else       if (containerId.equals("tomcat9x")) {        output.append("Tomcat 9");      } else       if (containerId.startsWith("tomee")) {        output.append("TomEE");      }      output.append(", the Tomcat manager has multiple aspects to be careful about:");      output.append(LINE_SEPARATOR);      output.append("* Your browser by default accesses the HTML-based manager ");      output.append("whereas CARGO needs to use the text-based manager. As a result, ");      output.append("if you want to set the {{RemotePropertySet.URI}} manually, ");      output.append("please make sure you set the URL for the text-based manager, ");      output.append("for example {{http://production27:8080/manager/text}}");      output.append(LINE_SEPARATOR);      output.append("* The text-based manager requires to be accessed by a user with ");      output.append("the {{manager-script}} role; and by default no user has that ");      output.append("role. As a result, please make sure you modify your ");      output.append("{{tomcat-users.xml}} file to give that role to a user.");      output.append(LINE_SEPARATOR);      output.append("You can read more in the Tomcat documentation: ");      if (containerId.equals("tomcat7x") || containerId.startsWith("tomee")) {        output.append("http://tomcat.apache.org/tomcat-7.0-doc/manager-howto.html");      } else       if (containerId.equals("tomcat8x")) {        output.append("http://tomcat.apache.org/tomcat-8.0-doc/manager-howto.html");      } else       if (containerId.equals("tomcat9x")) {        output.append("http://tomcat.apache.org/tomcat-9.0-doc/manager-howto.html");      }      output.append("{info}");      output.append(LINE_SEPARATOR);    }  }  return output.toString();}  }
class C{  private void copy(){  itemIndex++;  if (itemIndex == items.size()) {    return;  }  final ResourceBasedNode<?> item=items.get(itemIndex);  try {    projectServiceClient.copy(((HasStorablePath)item).getStorablePath(),((HasStorablePath)destination).getStorablePath(),null,copyCallback);  } catch (  Exception error) {    notificationManager.showNotification(new Notification(error.getMessage(),ERROR));    dialogFactory.createMessageDialog("ERROR",error.getMessage(),null).show();  }}  }
class C{  @Override public void endWindow(){  if (!mergedTuple.isEmpty()) {    mergedport.emit(mergedTuple);    mergedTuple=new HashMap<K,Integer>();  }}  }
class C{  void storeObjectOffset(final int current_number,final int current_offset,final int current_generation,final boolean isEntryCompressed,final boolean isBumData){  int existing_generation=0;  int offsetNumber=0;  if (current_number < generation.getCapacity()) {    existing_generation=generation.elementAt(current_number);    offsetNumber=this.elementAt(current_number);  }  if (existing_generation < current_generation || offsetNumber == 0 || isBumData && (current_offset > this.elementAt(current_number))) {    this.setElementAt(current_offset,current_number);    generation.setElementAt(current_generation,current_number);    isCompressed.setElementAt(isEntryCompressed,current_number);  } else {  }}  }
class C{  @Override public boolean accept(final IScope scope,final IShape source,final IShape a){  return getPopulation(scope).accept(scope,source,a);}  }
class C{  public final void popQuick(){  m_firstFree--;  m_map[m_firstFree]=DTM.NULL;}  }
class C{  private Portal instantiatePortal(List<String> args){  if (args.size() < 4) {    return new Portal();  } else   if (args.get(3).equals("level")) {    String rejectMessage=null;    if (args.size() == 7) {      rejectMessage=args.get(6);    }    return new LevelCheckingPortal(Integer.parseInt(args.get(4)),Integer.parseInt(args.get(5)),rejectMessage);  }  throw new IllegalArgumentException("Invalid portal type.");}  }
class C{  public FileMenu(){  super();  setText(defaultText);  add(new AboutMenuItem());  if (!Environment.isApplet()) {    add(new JSeparator());    add(new SavePropertiesMenuItem());    add(new LoadPropertiesMenuItem());    add(new JSeparator());    add(new SaveAsMenu());    add(new MapBeanPrinterMenuItem());    add(new JSeparator());    add(new QuitMenuItem());  }}  }
class C{  public boolean checkLunExists(String lunId){  BlockLunRequests req=new BlockLunRequests(_khClient);  return req.checkLunExists(lunId);}  }
class C{  public void testGetF24Momentary(){  AbstractThrottle instance=new AbstractThrottleImpl();  boolean expResult=false;  boolean result=instance.getF24Momentary();  assertEquals(expResult,result);}  }
class C{  public ZipfianGenerator(long min,long max,double _zipfianconstant){  this(min,max,_zipfianconstant,zetastatic(max - min + 1,_zipfianconstant));}  }
class C{  public static DateTime toDate(Object o,boolean alsoNumbers,TimeZone tz,DateTime defaultValue){  return DateCaster.toDateAdvanced(o,alsoNumbers ? DateCaster.CONVERTING_TYPE_OFFSET : DateCaster.CONVERTING_TYPE_NONE,tz,defaultValue);}  }
class C{  public SVGOMAnimatedString(AbstractElement elt,String ns,String ln){  super(elt,ns,ln);}  }
class C{  protected void loadLocationPaths(Compiler compiler,int opPos,int count) throws javax.xml.transform.TransformerException {  int steptype=compiler.getOp(opPos);  if (steptype == OpCodes.OP_LOCATIONPATH) {    loadLocationPaths(compiler,compiler.getNextOpPos(opPos),count + 1);    m_exprs[count]=createDTMIterator(compiler,opPos);    m_exprs[count].exprSetParent(this);  } else {switch (steptype) {case OpCodes.OP_VARIABLE:case OpCodes.OP_EXTFUNCTION:case OpCodes.OP_FUNCTION:case OpCodes.OP_GROUP:      loadLocationPaths(compiler,compiler.getNextOpPos(opPos),count + 1);    WalkingIterator iter=new WalkingIterator(compiler.getNamespaceContext());  iter.exprSetParent(this);if (compiler.getLocationPathDepth() <= 0) iter.setIsTopLevel(true);iter.m_firstWalker=new org.apache.xpath.axes.FilterExprWalker(iter);iter.m_firstWalker.init(compiler,opPos,steptype);m_exprs[count]=iter;break;default :m_exprs=new LocPathIterator[count];}}}  }
class C{  private void trimToSize(int maxSize){  while (true) {    String key;    Bitmap value;synchronized (this) {      if (size < 0 || (map.isEmpty() && size != 0)) {        throw new IllegalStateException(getClass().getName() + ".sizeOf() is reporting inconsistent results!");      }      if (size <= maxSize || map.isEmpty()) {        break;      }      Map.Entry<String,Bitmap> toEvict=map.entrySet().iterator().next();      if (toEvict == null) {        break;      }      key=toEvict.getKey();      value=toEvict.getValue();      map.remove(key);      size-=sizeOf(key,value);    }  }}  }
class C{  public void eliminarExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response){  NivelesArchivoForm nivelesArchivoForm=(NivelesArchivoForm)form;  ActionErrors errors=new ActionErrors();  errors=validateNivelArchivoSelected(request,nivelesArchivoForm,errors);  if (!errors.isEmpty()) {    ErrorsTag.saveErrors(request,errors);    goListaNivelesArchivo(request,mappings);    return;  }  NivelArchivoVO nivelArchivoVO=new NivelArchivoVO();  nivelesArchivoForm.populate(nivelArchivoVO);  List listaNivelesArchivo=getListaNivelesArchivo(request,false);  int orden=nivelArchivoVO.getOrden().intValue();  nivelArchivoVO=(NivelArchivoVO)listaNivelesArchivo.get(orden - 1);  errors=validateFormAlEliminar(request,nivelArchivoVO,errors);  String idNivelSeleccionado=nivelArchivoVO.getId();  if (!validarNivelPlazosValidaciones(mappings,request,idNivelSeleccionado,errors))   return;  if (!errors.isEmpty()) {    setOrdenSeleccionado(request,String.valueOf(orden));    ErrorsTag.saveErrors(request,errors);    goListaNivelesArchivo(request,mappings);  } else {    if (!nivelArchivoVO.isNuevoElemento()) {      addNivelEliminado(request,nivelArchivoVO);      setCambiosSinGuardar(request,Boolean.TRUE);    }    listaNivelesArchivo.remove(orden - 1);    actualizarNiveles(listaNivelesArchivo);    setHayNuevosElementosEnSession(request,new Boolean(hayNuevosElementos(listaNivelesArchivo)));    setOrdenSeleccionado(request,null);  }  if (listaNivelesArchivo.size() == 0) {    ServiceRepository services=ServiceRepository.getInstance(ServiceClient.create(getAppUser(request)));    GestionNivelesArchivoBI nivelesArchivoBI=services.lookupGestionNivelesArchivoBI();    List listaNivelesEliminados=(List)getFromTemporalSession(request,ControlAccesoConstants.LISTA_NIVELES_ARCHIVO_ELIMINADOS);    try {      nivelesArchivoBI.actualizarListaNiveles(listaNivelesArchivo,listaNivelesEliminados);    } catch (    ArchivosException e) {      guardarError(request,e);      goLastClientExecuteLogic(mappings,form,request,response);      return;    }  }  goListaNivelesArchivo(request,mappings);}  }
class C{  protected int lengthOfByteStream(AbstractMRMessage m){  int len=m.getNumDataElements();  return len;}  }
class C{  public static void link(final InstructionGraphNode source,final InstructionGraphNode target,final InstructionGraphEdge edge){  Preconditions.checkNotNull(source,"Error: Source argument can not be null");  Preconditions.checkNotNull(target,"Error: Target argument can not be null");  Preconditions.checkNotNull(edge,"Error: Edge argument can not be null");  source.outgoingEdges.add(edge);  target.incomingEdges.add(edge);}  }
class C{  void preCloneNodeEvent(ASTNode node){synchronized (this.internalASTLock) {    if (this.disableEvents > 0) {      return;    } else {      disableEvents();    }  }  try {    this.eventHandler.preCloneNodeEvent(node);  }  finally {    reenableEvents();  }}  }
class C{  @Override public void perform(IR ir){  simpleCandidateSearch(ir);  boolean needCleanup=haveCandidates();  while (haveCandidates()) {    splitCandidate(nextCandidate(),ir);  }  if (needCleanup) {    branchOpts.perform(ir);  }}  }
class C{  public boolean isConfigurable(){  return configurable;}  }
class C{  public MaterializeBuilder withActivity(Activity activity){  this.mRootView=(ViewGroup)activity.findViewById(android.R.id.content);  this.mActivity=activity;  return this;}  }
class C{  public boolean canRead(IRI query,String currentUser) throws RepositoryException, QueryEvaluationException, MalformedQueryException {  return performAccessQuery(ASK_READABLE,query,currentUser);}  }
class C{  private static byte[] asciiBytes(String value){  try {    return value.getBytes("ASCII");  } catch (  UnsupportedEncodingException uee) {    throw new RuntimeException("ASCII not found!",uee);  }}  }
class C{  private void initializeExecutors(HadoopPrepareForJobRequest req){  int cpus=Runtime.getRuntime().availableProcessors();  execSvc=new HadoopExecutorService(log,"",cpus * 2,1024);}  }
class C{  public HGTypeSystem(HyperGraph graph){  this.graph=graph;  this.getAliases();  this.getUriDB();  this.getPredefinedTypesDB();}  }
class C{  public boolean isRawImageDataSaved(final String number){  return imagesOnDiskAsBytes.get(Integer.valueOf(number)) != null;}  }
class C{  public void dispatchAsComment(org.xml.sax.ext.LexicalHandler lh) throws org.xml.sax.SAXException {  String str=str();  lh.comment(str.toCharArray(),0,str.length());}  }
class C{  public AbstractSimpleState(S id,Collection<E> deferred,Collection<? extends Action<S,E>> entryActions,Collection<? extends Action<S,E>> exitActions,PseudoState<S,E> pseudoState,StateMachine<S,E> submachine){  super(id,deferred,entryActions,exitActions,pseudoState,submachine);  this.ids=new ArrayList<S>();  this.ids.add(id);}  }
class C{  public float angleAtLength(float length){  return pathLength.angleAtLength(length);}  }
class C{  public int months(){  return this.months;}  }
class C{  public void addTranslation(double[] v){  if (trans == null) {    trans=new AffineTransformation(dim);  }  trans.addTranslation(v);}  }
class C{  public String toStringBase64(){  return toString(StringEncoding.BASE64);}  }
class C{  public ExampleSetMetaData joinAttributes(ExampleSetMetaData es2,String prefixForDuplicates){  ExampleSetMetaData result=this.clone();  if (this.attributeMetaData == null || es2.attributeMetaData == null) {    return result;  }  for (  AttributeMetaData a : es2.attributeMetaData.values()) {    AttributeMetaData clone=a.clone();    if (a.getRole() == null || !a.getRole().equals(Attributes.ID_NAME)) {switch (result.containsAttributeName(a.getName())) {case YES:        if (prefixForDuplicates != null) {          clone.setName(a.getName() + prefixForDuplicates);          result.attributeMetaData.put(clone.getName(),clone);        }      break;case NO:    result.attributeMetaData.put(clone.getName(),clone);  break;case UNKNOWN:result.attributeMetaData.put(clone.getName(),clone);result.attributesAreSubset();break;}}}if (this.attributesRelation == SetRelation.EQUAL && es2.attributesRelation == SetRelation.EQUAL) {result.attributesRelation=SetRelation.EQUAL;} else if (es2.attributesRelation == SetRelation.SUPERSET || attributesRelation == SetRelation.SUPERSET) {result.attributesRelation=SetRelation.SUPERSET;} else {result.attributesRelation=SetRelation.UNKNOWN;}return result;}  }
class C{  protected Blackboard createBlackboard(SqlValidatorScope scope,Map<String,RexNode> nameToNodeMap,boolean top){  return new Blackboard(scope,nameToNodeMap,top);}  }
class C{  public void addToList(FPTreeNode toAdd){  m_headerList.add(toAdd);}  }
class C{  public static Iterator toIterator(Object o) throws PageException {  return ForEachUtil.forEach(o);}  }
class C{  static float dpToPixel(float dp,Resources resources){  DisplayMetrics metrics=resources.getDisplayMetrics();  return metrics.density * dp;}  }
class C{  public static URLRetriever createRetriever(URL url,RetrievalPostProcessor postProcessor){  if (url == null) {    String message=Logging.getMessage("nullValue.URLIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  String protocol=url.getProtocol();  if ("http".equalsIgnoreCase(protocol) || "https".equalsIgnoreCase(protocol))   return new HTTPRetriever(url,postProcessor); else   if ("jar".equalsIgnoreCase(protocol))   return new JarRetriever(url,postProcessor); else   return null;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4mfPackage.SIMPLE_PROJECT_DESCRIPTION__DECLARED_VENDOR_ID:    return getDeclaredVendorId();case N4mfPackage.SIMPLE_PROJECT_DESCRIPTION__PROJECT_ID:  return getProjectId();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void removeThread(final TargetProcessThread thread){synchronized (m_threads) {    thread.removeListener(m_threadListener);    m_threads.remove(thread);  }  fireTableDataChanged();}  }
class C{  public static final Encoding of(DistanceUnit.Distance precision){  for (  Encoding encoding : INSTANCES) {    if (encoding != null && encoding.precision().compareTo(precision) <= 0) {      return encoding;    }  }  return INSTANCES[MAX_NUM_BYTES];}  }
class C{  public static void main(String[] args){  RelayLogClient relayClient=new RelayLogClient();  String curArg=null;  try {    int argIndex=0;    while (argIndex < args.length) {      curArg=args[argIndex++];      if ("-url".equals(curArg))       relayClient.setUrl(args[argIndex++]); else       if ("-login".equals(curArg))       relayClient.setLogin(args[argIndex++]); else       if ("-password".equals(curArg))       relayClient.setPassword(args[argIndex++]); else       if ("-binlog".equals(curArg))       relayClient.setBinlog(args[argIndex++]); else       if ("-offset".equals(curArg))       relayClient.setOffset(new Integer(args[argIndex++])); else       if ("-binlogdir".equals(curArg))       relayClient.setBinlogDir(args[argIndex++]); else       if ("-autoclean".equals(curArg))       relayClient.setAutoClean(new Boolean(args[argIndex++])); else       if ("-help".equals(curArg)) {        printUsage();        System.exit(0);      } else {        System.out.println("Unrecognized option: " + curArg);        printUsage();        System.exit(1);      }    }  } catch (  Exception e) {    System.out.println("Invalid or missing data for argument: " + curArg);    printUsage();    System.exit(1);  }  try {    relayClient.connect();    while (true)     relayClient.processEvent();  } catch (  Exception e) {    logger.fatal("Relay client failed with unexpected exception: " + e.getMessage(),e);  } finally {    relayClient.disconnect();  }  logger.info("Done!");}  }
class C{  public T caseMultiplicativeExpression(MultiplicativeExpression object){  return null;}  }
class C{  public static boolean saveKeyPairToProtectedStore(org.opcfoundation.ua.transport.security.KeyPair keyPairToSave,String storeLocation,String alias,String storePW,String privatePW) throws KeyStoreException, IOException, NoSuchAlgorithmException, CertificateException {  KeyStore store=null;  store=KeyStore.getInstance("JKS");  File keystoreFile=new File(storeLocation);  FileInputStream in;  try {    in=new FileInputStream(keystoreFile);    try {      store.load(in,storePW.toCharArray());    }  finally {      in.close();    }  } catch (  FileNotFoundException e) {    store.load(null,null);  }  Certificate[] chain=new Certificate[1];  chain[0]=keyPairToSave.certificate.getCertificate();  store.setKeyEntry(alias,keyPairToSave.privateKey.getPrivateKey(),privatePW.toCharArray(),chain);  FileOutputStream fOut=new FileOutputStream(storeLocation);  try {    store.store(fOut,storePW.toCharArray());  }  finally {    fOut.close();  }  return true;}  }
class C{  public Message deserialize(ByteBuffer in) throws ProtocolException, IOException {  seekPastMagicBytes(in);  BitcoinPacketHeader header=new BitcoinPacketHeader(in);  return deserializePayload(header,in);}  }
class C{  protected void saveTransformedData(Instances ti){  JFileChooser fc;  int retVal;  BufferedWriter writer;  ExtensionFileFilter filter;  fc=new JFileChooser();  filter=new ExtensionFileFilter(".arff","ARFF data files");  fc.setFileFilter(filter);  retVal=fc.showSaveDialog(this);  if (retVal == JFileChooser.APPROVE_OPTION) {    try {      writer=new BufferedWriter(new FileWriter(fc.getSelectedFile()));      writer.write(ti.toString());      writer.flush();      writer.close();    } catch (    Exception e) {      e.printStackTrace();      m_Log.logMessage("Problem saving data: " + e.getMessage());      JOptionPane.showMessageDialog(this,"Problem saving data:\n" + e.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);    }  }}  }
class C{  public void println(boolean v) throws IOException {  print(v);  println();}  }
class C{  public Provider<EclipseBasedN4JSWorkspace> provideEclipseBasedN4JSWorkspace(){  return Access.contributedProvider(EclipseBasedN4JSWorkspace.class);}  }
class C{  public FadeOutAnimation(View view){  this.view=view;  interpolator=new AccelerateDecelerateInterpolator();  duration=DURATION_LONG;  listener=null;}  }
class C{  public CreateModelOptions build(){  return new CreateModelOptions(this);}  }
class C{  private static boolean showCheatSheet(View view,CharSequence text){  if (TextUtils.isEmpty(text)) {    return false;  }  final int[] screenPos=new int[2];  final Rect displayFrame=new Rect();  view.getLocationOnScreen(screenPos);  view.getWindowVisibleDisplayFrame(displayFrame);  final Context context=view.getContext();  final int viewWidth=view.getWidth();  final int viewHeight=view.getHeight();  final int viewCenterX=screenPos[0] + viewWidth / 2;  final int screenWidth=context.getResources().getDisplayMetrics().widthPixels;  final int estimatedToastHeight=(int)(ESTIMATED_TOAST_HEIGHT_DIPS * context.getResources().getDisplayMetrics().density);  Toast cheatSheet=Toast.makeText(context,text,Toast.LENGTH_SHORT);  boolean showBelow=screenPos[1] < estimatedToastHeight;  if (showBelow) {    cheatSheet.setGravity(Gravity.TOP | Gravity.CENTER_HORIZONTAL,viewCenterX - screenWidth / 2,screenPos[1] - displayFrame.top + viewHeight);  } else {    cheatSheet.setGravity(Gravity.TOP | Gravity.CENTER_HORIZONTAL,viewCenterX - screenWidth / 2,screenPos[1] - displayFrame.top - estimatedToastHeight);  }  cheatSheet.show();  return true;}  }
class C{  public ConcurrentModificationException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  private static char toHex(int nibble){  return hexDigit[(nibble & 0xF)];}  }
class C{  public synchronized void removeXTextLabel(double x){  mXTextLabels.remove(x);}  }
class C{  private static void logReasonAndRemoveCompilationUnit(final Map<String,Source> map,final Map<String,String> reasons,final Set<String> includeUpdated,CompilerSwcContext compilerSwcContext){  Logger logger=ThreadLocalToolkit.getLogger();  for (  Entry<String,Source> entry : map.entrySet()) {    String name=entry.getKey();    Source s=entry.getValue();    for (Iterator j=s.getFileIncludes(); j.hasNext(); ) {      VirtualFile f=(VirtualFile)j.next();      if (!includeUpdated.contains(f.getNameForReporting())) {        ThreadLocalToolkit.getLogger().includedFileAffected(f.getNameForReporting());      }    }    CompilationUnit compilationUnit=s.getCompilationUnit();    if (compilationUnit != null) {      for (      QName topLevelDefinition : compilationUnit.topLevelDefinitions) {        SwcScript swcScript=compilerSwcContext.getCachedScript(topLevelDefinition);        if (swcScript != null) {          CompilationUnit swcScriptCompilationUnit=swcScript.getCompilationUnit();          if (swcScriptCompilationUnit != null) {            swcScriptCompilationUnit.getSource().removeCompilationUnit();            swcScript.setCompilationUnit(null);          }        }      }    }    s.removeCompilationUnit();    logger.needsCompilation(s.getName(),reasons.get(s.getName()));  }}  }
class C{  protected static boolean onlyServiceLogin(HttpSession session){  Boolean onlyServiceLogin=(Boolean)session.getAttribute(Constants.SESS_ATTR_ONLY_SERVICE_LOGIN);  return onlyServiceLogin != null && onlyServiceLogin.booleanValue();}  }
class C{  public boolean forwardTo(int AD_User_ID,String textMsg){  if (AD_User_ID == getAD_User_ID()) {    log.log(Level.WARNING,"Same User - AD_User_ID=" + AD_User_ID);    return false;  }  MUser oldUser=MUser.get(getCtx(),getAD_User_ID());  MUser user=MUser.get(getCtx(),AD_User_ID);  if (user == null || user.get_ID() == 0) {    log.log(Level.WARNING,"Does not exist - AD_User_ID=" + AD_User_ID);    return false;  }  setAD_User_ID(user.getAD_User_ID());  setTextMsg(textMsg);  save();  getEventAudit();  m_audit.setAD_User_ID(oldUser.getAD_User_ID());  m_audit.setTextMsg(getTextMsg());  m_audit.setAttributeName("AD_User_ID");  m_audit.setOldValue(oldUser.getName() + "(" + oldUser.getAD_User_ID()+ ")");  m_audit.setNewValue(user.getName() + "(" + user.getAD_User_ID()+ ")");  m_audit.setWFState(getWFState());  m_audit.setEventType(MWFEventAudit.EVENTTYPE_StateChanged);  long ms=System.currentTimeMillis() - m_audit.getCreated().getTime();  m_audit.setElapsedTimeMS(new BigDecimal(ms));  m_audit.saveEx();  m_audit=new MWFEventAudit(this);  m_audit.saveEx();  return true;}  }
class C{  public boolean retainEntries(TFloatDoubleProcedure procedure){  boolean modified=false;  byte[] states=_states;  float[] keys=_set;  double[] values=_values;  for (int i=keys.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(keys[i],values[i])) {      removeAt(i);      modified=true;    }  }  return modified;}  }
class C{  @Override public void emit(AlertStreamEvent event){  try {    queue.put(event);  } catch (  InterruptedException e) {    LOG.error(e.getMessage(),e);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:26.739 -0500",hash_original_method="7CEEE4341262A9B70C3A153644CFBA1A",hash_generated_method="A188A36867D97B25436336404522BDF2") private int enumerateGeneric(Object[] enumeration,boolean recurse,int enumerationIndex,boolean enumeratingThreads){  if (enumeratingThreads) {synchronized (threadRefs) {      for (int i=threadRefs.size() - 1; i >= 0; --i) {        Thread thread=threadRefs.get(i).get();        if (thread != null && thread.isAlive()) {          if (enumerationIndex >= enumeration.length) {            return enumerationIndex;          }          enumeration[enumerationIndex++]=thread;        }      }    }  } else {synchronized (groups) {      for (int i=groups.size() - 1; i >= 0; --i) {        if (enumerationIndex >= enumeration.length) {          return enumerationIndex;        }        enumeration[enumerationIndex++]=groups.get(i);      }    }  }  if (recurse) {synchronized (groups) {      for (      ThreadGroup group : groups) {        if (enumerationIndex >= enumeration.length) {          return enumerationIndex;        }        enumerationIndex=group.enumerateGeneric(enumeration,recurse,enumerationIndex,enumeratingThreads);      }    }  }  return enumerationIndex;}  }
class C{  public void add(IPoint p){  points.add(p);}  }
class C{  protected void delete(final String path,final int expectedResponseStatus) throws IOException {  HttpResponse result=restClient.send(RestClient.Method.DELETE,path,null);  restClient.check(result,expectedResponseStatus);}  }
class C{  public synchronized boolean run(String args[]){  ok=true;  if (!parseArgs(args)) {    return false;  }  try {    if (cflag || uflag) {      if (fname != null) {        zname=fname.replace(File.separatorChar,'/');        if (zname.startsWith("./")) {          zname=zname.substring(2);        }      }    }    if (cflag) {      Manifest manifest=null;      InputStream in=null;      if (!Mflag) {        if (mname != null) {          in=new FileInputStream(mname);          manifest=new Manifest(new BufferedInputStream(in));        } else {          manifest=new Manifest();        }        addVersion(manifest);        addCreatedBy(manifest);        if (isAmbiguousMainClass(manifest)) {          if (in != null) {            in.close();          }          return false;        }        if (ename != null) {          addMainClass(manifest,ename);        }      }      expand(null,files,false);      OutputStream out;      if (fname != null) {        out=new FileOutputStream(fname);      } else {        out=new FileOutputStream(FileDescriptor.out);        if (vflag) {          vflag=false;        }      }      File tmpfile=null;      final OutputStream finalout=out;      final String tmpbase=(fname == null) ? "tmpjar" : fname.substring(fname.indexOf(File.separatorChar) + 1);      if (nflag) {        tmpfile=createTemporaryFile(tmpbase,".jar");        out=new FileOutputStream(tmpfile);      }      create(new BufferedOutputStream(out,4096),manifest);      if (in != null) {        in.close();      }      out.close();      if (nflag) {        JarFile jarFile=null;        File packFile=null;        JarOutputStream jos=null;        try {          Packer packer=Pack200.newPacker();          Map<String,String> p=packer.properties();          p.put(Packer.EFFORT,"1");          jarFile=new JarFile(tmpfile.getCanonicalPath());          packFile=createTemporaryFile(tmpbase,".pack");          out=new FileOutputStream(packFile);          packer.pack(jarFile,out);          jos=new JarOutputStream(finalout);          Unpacker unpacker=Pack200.newUnpacker();          unpacker.unpack(packFile,jos);        } catch (        IOException ioe) {          fatalError(ioe);        } finally {          if (jarFile != null) {            jarFile.close();          }          if (out != null) {            out.close();          }          if (jos != null) {            jos.close();          }          if (tmpfile != null && tmpfile.exists()) {            tmpfile.delete();          }          if (packFile != null && packFile.exists()) {            packFile.delete();          }        }      }    } else     if (uflag) {      File inputFile=null, tmpFile=null;      FileInputStream in;      FileOutputStream out;      if (fname != null) {        inputFile=new File(fname);        tmpFile=createTempFileInSameDirectoryAs(inputFile);        in=new FileInputStream(inputFile);        out=new FileOutputStream(tmpFile);      } else {        in=new FileInputStream(FileDescriptor.in);        out=new FileOutputStream(FileDescriptor.out);        vflag=false;      }      InputStream manifest=(!Mflag && (mname != null)) ? (new FileInputStream(mname)) : null;      expand(null,files,true);      boolean updateOk=update(in,new BufferedOutputStream(out),manifest,null);      if (ok) {        ok=updateOk;      }      in.close();      out.close();      if (manifest != null) {        manifest.close();      }      if (ok && fname != null) {        inputFile.delete();        if (!tmpFile.renameTo(inputFile)) {          tmpFile.delete();          throw new IOException(getMsg("error.write.file"));        }        tmpFile.delete();      }    } else     if (tflag) {      replaceFSC(files);      if (fname != null) {        list(fname,files);      } else {        InputStream in=new FileInputStream(FileDescriptor.in);        try {          list(new BufferedInputStream(in),files);        }  finally {          in.close();        }      }    } else     if (xflag) {      replaceFSC(files);      if (fname != null && files != null) {        extract(fname,files);      } else {        InputStream in=(fname == null) ? new FileInputStream(FileDescriptor.in) : new FileInputStream(fname);        try {          extract(new BufferedInputStream(in),files);        }  finally {          in.close();        }      }    } else     if (iflag) {      genIndex(rootjar,files);    }  } catch (  IOException e) {    fatalError(e);    ok=false;  }catch (  Error ee) {    ee.printStackTrace();    ok=false;  }catch (  Throwable t) {    t.printStackTrace();    ok=false;  }  out.flush();  err.flush();  return ok;}  }
class C{  public ConnectionInfo(@Nullable String user,@Nullable String password,String driverClassName,String authlessUrl,String fullUrl){  this.user=user;  this.password=password;  this.driverClassName=driverClassName;  this.authlessUrl=authlessUrl;  this.fullUrl=fullUrl;}  }
class C{  public KeyConcurrentHashMapPro(){  this(DEFAULT_INITIAL_CAPACITY,DEFAULT_LOAD_FACTOR,DEFAULT_CONCURRENCY_LEVEL);}  }
class C{  public static Geometry bufferOp(Geometry g,double distance,int quadrantSegments){  BufferOp bufOp=new BufferOp(g);  bufOp.setQuadrantSegments(quadrantSegments);  Geometry geomBuf=bufOp.getResultGeometry(distance);  return geomBuf;}  }
class C{  public static void run(AdSenseHost service,String accountId,String adClientId) throws Exception {  System.out.println("=================================================================");  System.out.printf("Running report for ad client %s\n",adClientId);  System.out.println("=================================================================");  Date today=new Date();  Calendar calendar=Calendar.getInstance();  calendar.setTime(today);  calendar.add(Calendar.DATE,-7);  Date oneWeekAgo=calendar.getTime();  String startDate=DATE_FORMATTER.format(oneWeekAgo);  String endDate=DATE_FORMATTER.format(today);  Generate request=service.accounts().reports().generate(accountId,startDate,endDate);  request.setFilter(Arrays.asList("AD_CLIENT_ID==" + escapeFilterParameter(adClientId)));  request.setMetric(Arrays.asList("PAGE_VIEWS","AD_REQUESTS","AD_REQUESTS_COVERAGE","CLICKS","AD_REQUESTS_CTR","COST_PER_CLICK","AD_REQUESTS_RPM","EARNINGS"));  request.setDimension(Arrays.asList("DATE"));  request.setSort(Arrays.asList("+DATE"));  Report response=request.execute();  if ((response.getRows() != null) && !response.getRows().isEmpty()) {    for (    Report.Headers header : response.getHeaders()) {      System.out.printf("%25s",header.getName());    }    System.out.println();    for (    List<String> row : response.getRows()) {      for (      String column : row) {        System.out.printf("%25s",column);      }      System.out.println();    }    System.out.println();  } else {    System.out.println("No rows returned.");  }  System.out.println();}  }
class C{  public MyHashMap(int initialCapacity){  this(initialCapacity,DEFAULT_MAX_LOAD_FACTOR);}  }
class C{  public static void print(Object x){  out.print(x);  out.flush();}  }
class C{  void callHealthListeners(int listenerId,GemFireHealth.Health newStatus){  HealthListener hl=null;synchronized (this.healthLock) {    if (this.healthListenerId == listenerId) {      hl=this.healthListener;    }  }  if (hl != null) {    try {      hl.healthChanged(this,newStatus);    } catch (    RuntimeException ignore) {    }  }}  }
class C{  public TableHeaderElement THE(String text,String url,HttpServletResponse response){  return new TableHeaderElement(buildHREF(response,url,text));}  }
class C{  public String format(int number,int decimalPlaces){  StringBuilder sb=new StringBuilder();  int paddingRequired=decimalPlaces - (String.valueOf(number).length());  for (int x=0; x < paddingRequired; x++) {    sb.append("0");  }  sb.append(number);  return sb.toString();}  }
class C{  public int[] validBaudValues(){  return new int[]{57600,115200,230400,250000,288000,333333,460800};}  }
class C{  public WriteMemoryCommand(final int packetId,final IAddress address,final byte[] data){  super(DebugCommandType.CMD_WRITE_MEMORY,packetId);  addArgument(new DebugMessageAddressArgument(address));  addArgument(new DebugMessageRawArgument(data));}  }
class C{  public boolean isCoverageComplete(){  return coverage.cardinality() == sequenceLength;}  }
class C{  public static String toString(byte[] bytes){  if (bytes == null)   return null; else {    try {      return new String(bytes,"UTF-8");    } catch (    UnsupportedEncodingException ueex) {      throw new UndeclaredThrowableException(ueex);    }  }}  }
class C{  public SIPHeader parse() throws ParseException {  PathList pathList=new PathList();  if (debug)   dbg_enter("PathParser.parse");  try {    this.lexer.match(TokenTypes.PATH);    this.lexer.SPorHT();    this.lexer.match(':');    this.lexer.SPorHT();    while (true) {      Path path=new Path();      super.parse(path);      pathList.add(path);      this.lexer.SPorHT();      char la=lexer.lookAhead(0);      if (la == ',') {        this.lexer.match(',');        this.lexer.SPorHT();      } else       if (la == '\n')       break; else       throw createParseException("unexpected char");    }    return pathList;  }  finally {    if (debug)     dbg_leave("PathParser.parse");  }}  }
class C{  public static void main(String[] args){  junit.textui.TestRunner.run(TransactionTest.class);}  }
class C{  private void emitListAdd(Method method,String fieldName,StringBuilder builder){  builder.append("    public void ");  builder.append(getListAdderName(fieldName));  builder.append("(");  builder.append(getTypeArgumentImplName((ParameterizedType)method.getGenericReturnType(),0));  builder.append(" v) {\n      ");  builder.append(getEnsureName(fieldName));  builder.append("();\n      ");  builder.append(fieldName);  builder.append(".add(v);\n");  builder.append("    }\n\n");}  }
class C{  @Override public List<FeatureValue<FV>> ruleFeaturize(Featurizable<TK,FV> f){  List<FeatureValue<FV>> featureValues=new ArrayList<>();  for (  Featurizer<TK,FV> featurizer : featurizers) {    if (featurizer instanceof RuleFeaturizer) {      RuleFeaturizer<TK,FV> ruleFeaturizer=(RuleFeaturizer<TK,FV>)featurizer;      List<FeatureValue<FV>> listFeatureValues=((RuleFeaturizer<TK,FV>)featurizer).ruleFeaturize(f);      if (listFeatureValues != null) {        boolean doNotCache=ruleFeaturizer.isolationScoreOnly();        for (        FeatureValue<FV> fv : listFeatureValues) {          fv.doNotCache=doNotCache;          featureValues.add(fv);        }      }    }  }  if (featureAugmentationMode >= 0)   augmentFeatures(f,featureValues);  return featureValues;}  }
class C{  private ProcessStartParser(){}  }
class C{  private void sendUpdate(JSONObject obj,boolean keepCallback){  sendUpdate(obj,keepCallback,PluginResult.Status.OK);}  }
class C{  void handleAsyncUpgradeSubscription(Subscription subscription,Product targetProduct) throws TechnicalServiceNotAliveException, TechnicalServiceOperationException {  EnumSet<SubscriptionStatus> set=EnumSet.of(SubscriptionStatus.ACTIVE,SubscriptionStatus.EXPIRED,SubscriptionStatus.SUSPENDED);  SubscriptionStatus status=subscription.getStatus();  if (set.contains(status)) {    appManager.asyncUpgradeSubscription(subscription,targetProduct);switch (status) {case ACTIVE:      subscription.setStatus(SubscriptionStatus.PENDING_UPD);    break;case SUSPENDED:  subscription.setStatus(SubscriptionStatus.SUSPENDED_UPD);break;case EXPIRED:default :break;}}}  }
class C{  public static final Cache<String,BlockReader> createCache(int concurrencyLevel,int initialCapacity,long maximumMemory){  CacheBuilder builder=CacheBuilder.newBuilder().concurrencyLevel(concurrencyLevel).initialCapacity(initialCapacity).maximumWeight(maximumMemory).weigher(new KVWeigher());  return buildCache(builder);}  }
class C{  public int readInteger(String delimiters) throws IOException, ImportException {  String token=readToken(delimiters);  try {    return Integer.parseInt(token);  } catch (  NumberFormatException nfe) {    throw new ImportException("Number format error: " + nfe.getMessage());  }}  }
class C{  public String[] run(String[] cmdStrings){  StringBuffer stdoutBuffer=new StringBuffer();  StringBuffer stderrBuffer=new StringBuffer();  System.out.print(CR + "runCommand method about to execute: ");  for (int iNdx=0; iNdx < cmdStrings.length; iNdx++) {    System.out.print(" ");    System.out.print(cmdStrings[iNdx]);  }  System.out.println(CR);  try {    Process process=Runtime.getRuntime().exec(cmdStrings);    java.io.BufferedInputStream is=new java.io.BufferedInputStream(process.getInputStream());    int isLen=0;    byte[] isBuf=new byte[BUFFERSIZE];    java.io.BufferedInputStream es=new java.io.BufferedInputStream(process.getErrorStream());    int esLen=0;    byte[] esBuf=new byte[BUFFERSIZE];    do {      isLen=is.read(isBuf);      if (isLen > 0) {        stdoutBuffer.append(new String(isBuf,0,isLen));      }      esLen=es.read(esBuf);      if (esLen > 0) {        stderrBuffer.append(new String(esBuf,0,esLen));      }    } while ((isLen > -1) || (esLen > -1));    try {      process.waitFor();      subprocessStatus=process.exitValue();      process=null;    } catch (    java.lang.InterruptedException e) {      System.err.println("InterruptedException: " + e);    }  } catch (  java.io.IOException ex) {    System.err.println("IO error: " + ex);  }  String[] result=new String[]{Integer.toString(subprocessStatus),stdoutBuffer.toString(),stderrBuffer.toString()};  System.out.println(CR + "--- Return code was: " + CR+ result[RETSTAT]);  System.out.println(CR + "--- Return stdout was: " + CR+ result[STDOUT]);  System.out.println(CR + "--- Return stderr was: " + CR+ result[STDERR]);  return result;}  }
class C{  protected void plotPoint(int x,int y,double[] probs,boolean update){  plotPoint(x,y,1,1,probs,update);}  }
class C{  public boolean isTraceEnabled(){  return this.traceEnabled;}  }
class C{  public static String readFully(Reader reader) throws IOException {  try {    StringWriter writer=new StringWriter();    char[] buffer=new char[1024];    int count;    while ((count=reader.read(buffer)) != -1) {      writer.write(buffer,0,count);    }    return writer.toString();  }  finally {    reader.close();  }}  }
class C{  public ServerProxy() throws Exception {  this(SystemProperties.getServerProxyListenAddress());}  }
class C{  protected void drawCheckedState(Canvas canvas,int w,int h){  int x=w / 2;  int y=h / 2;  canvas.drawCircle(x,y,mRadius - (mShadowRadius * 1.5f),mCheckedBackgroundPaint);  canvas.save();  int shortStrokeHeight=(int)(mLongStrokeHeight * .4f);  int halfH=(int)(mLongStrokeHeight * .5f);  int offset=(int)(shortStrokeHeight * .3f);  int sx=x + offset;  int sy=y - offset;  mPath.reset();  mPath.moveTo(sx,sy - halfH);  mPath.lineTo(sx,sy + halfH);  mPath.moveTo(sx + (getCheckMarkStrokeWidthInPixels() * .5f),sy + halfH);  mPath.lineTo(sx - shortStrokeHeight,sy + halfH);  canvas.rotate(45f,x,y);  canvas.drawPath(mPath,mCheckMarkPaint);  canvas.restore();}  }
class C{  public static double[][] sortRows(double[][] m){  double[][] s=new double[m.length][m[0].length];  copyMatrix(m,s);  for (int row=0; row < s.length; row++) {    for (int col=0; col < s.length - 1; col++) {      double min=s[row][col];      int index=col;      for (int j=col + 1; j < s.length; j++) {        if (min > s[row][j]) {          min=s[row][j];          index=j;        }      }      if (index != col) {        s[row][index]=s[row][col];        s[row][col]=min;      }    }  }  return s;}  }
class C{  public synchronized void close(){  if (isAlive) {    isAlive=false;    taskQueue.clear();    interrupt();  }}  }
class C{  public boolean hasMoreWarshipElements(){  return this.getTurnWSEnum().hasMoreElements();}  }
class C{  public TaskList addJournalCapacity(VolumeCreate param,Project project,VirtualArray journalVarray,VirtualPool journalVpool,BlockConsistencyGroup consistencyGroup,VirtualPoolCapabilityValuesWrapper capabilities,String task){  ProtectionSystem protectionSystem=getBlockScheduler().getCgProtectionSystem(consistencyGroup.getId());  if (protectionSystem != null) {    _log.info("Narrowing down placement to use protection system {}, which is currently used by RecoverPoint consistency group {}.",protectionSystem.getLabel(),consistencyGroup);  } else {    throw APIException.badRequests.noProtectionSystemAssociatedWithTheCG(consistencyGroup.getId().toString());  }  String copyName=param.getName();  String internalSiteName=null;  boolean isSource=false;  boolean isTarget=false;  boolean isMPStandby=copyName.contains("Standby");  List<Volume> sourceVolumes=RPHelper.getCgSourceVolumes(consistencyGroup.getId(),_dbClient);  if (sourceVolumes.isEmpty()) {    throw APIException.badRequests.noSourceVolumesInCG(consistencyGroup.getLabel());  }  Volume firstSrc=sourceVolumes.get(0);  StringSet sourceInternalSiteNames=new StringSet();  if (RPHelper.isMetroPointVolume(_dbClient,firstSrc)) {    StringSet associatedVolumes=firstSrc.getAssociatedVolumes();    if (associatedVolumes != null && !associatedVolumes.isEmpty()) {      for (      String associatedVolumeStr : associatedVolumes) {        URI associatedVolumeURI=URI.create(associatedVolumeStr);        Volume associatedVolume=_dbClient.queryObject(Volume.class,associatedVolumeURI);        sourceInternalSiteNames.add(associatedVolume.getInternalSiteName());        if (NullColumnValueGetter.isNotNullValue(associatedVolume.getRpCopyName())) {          if (associatedVolume.getRpCopyName().equals(copyName)) {            isSource=!isMPStandby;            internalSiteName=associatedVolume.getInternalSiteName();          }        }      }    }  } else {    sourceInternalSiteNames.add(firstSrc.getInternalSiteName());    if (NullColumnValueGetter.isNotNullValue(firstSrc.getRpCopyName())) {      if (firstSrc.getRpCopyName().equals(copyName)) {        isSource=true;        internalSiteName=firstSrc.getInternalSiteName();      }    }  }  for (  String targetURIString : firstSrc.getRpTargets()) {    Volume tgtVolume=_dbClient.queryObject(Volume.class,URI.create(targetURIString));    if (NullColumnValueGetter.isNotNullValue(tgtVolume.getRpCopyName()) && tgtVolume.getRpCopyName().equals(copyName)) {      isTarget=true;      internalSiteName=tgtVolume.getInternalSiteName();    }  }  if (internalSiteName == null) {    throw APIException.badRequests.unableToFindTheSpecifiedCopy(copyName);  }  String targetType=RPHelper.LOCAL;  int copyType=RecoverPointCGCopyType.PRODUCTION.getCopyNumber();  if (isTarget) {    if (sourceInternalSiteNames.contains(internalSiteName)) {      copyType=RecoverPointCGCopyType.LOCAL.getCopyNumber();      targetType=RPHelper.LOCAL;    } else {      copyType=RecoverPointCGCopyType.REMOTE.getCopyNumber();      targetType=RPHelper.REMOTE;    }  }  capabilities.put(VirtualPoolCapabilityValuesWrapper.RP_COPY_TYPE,copyType);  RPProtectionRecommendation rpProtectionRecommendation=new RPProtectionRecommendation();  rpProtectionRecommendation.setProtectionDevice(protectionSystem.getId());  RPRecommendation journalRecommendation=getBlockScheduler().buildJournalRecommendation(rpProtectionRecommendation,internalSiteName,new Long(capabilities.getSize()).toString(),journalVarray,journalVpool,protectionSystem,capabilities,capabilities.getResourceCount(),null,false);  if (journalRecommendation == null) {    throw APIException.badRequests.unableToFindSuitableJournalRecommendation();  }  String copyTypeString=RPHelper.SOURCE;  if (isSource) {    rpProtectionRecommendation.setSourceJournalRecommendation(journalRecommendation);  }  if (isMPStandby) {    rpProtectionRecommendation.setStandbyJournalRecommendation(journalRecommendation);    copyTypeString="standby " + RPHelper.SOURCE;  }  if (isTarget) {    List<RPRecommendation> journalRecommendations=Lists.newArrayList();    journalRecommendations.add(journalRecommendation);    rpProtectionRecommendation.setTargetJournalRecommendations(journalRecommendations);    copyTypeString=targetType + " " + RPHelper.TARGET;  }  List<Recommendation> recommendations=Lists.newArrayList();  recommendations.add(rpProtectionRecommendation);  param.setName(copyName + "_" + task);  _log.info("Request to add journal capacity to {} copy {}",copyTypeString,copyName);  _log.info("Copy {} is protected by RP Site {}",copyName,internalSiteName);  TaskList taskList=new TaskList();  Map<VpoolUse,List<Recommendation>> recommendationMap=new HashMap<VpoolUse,List<Recommendation>>();  recommendationMap.put(VpoolUse.ROOT,recommendations);  return this.createVolumes(param,project,journalVarray,journalVpool,recommendationMap,taskList,task,capabilities);}  }
class C{  public static void sortReverse(double[] keys,int[] values,int len){  sortReverse(keys,values,0,len);}  }
class C{  @SuppressWarnings({"unchecked"}) public IgniteInternalFuture<?> partitionReleaseFuture(AffinityTopologyVersion topVer){  GridCompoundFuture f=new GridCompoundFuture();  f.add(mvcc().finishExplicitLocks(topVer));  f.add(tm().finishTxs(topVer));  f.add(mvcc().finishAtomicUpdates(topVer));  f.markInitialized();  return f;}  }
class C{  private char[] parseEntityReference() throws IOException {  int pos=strpos;  if ((ch=readCh()) == '#') {    int n=0;    ch=readCh();    if ((ch >= '0') && (ch <= '9') || ch == 'x' || ch == 'X') {      if ((ch >= '0') && (ch <= '9')) {        while ((ch >= '0') && (ch <= '9')) {          n=(n * 10) + ch - '0';          ch=readCh();        }      } else {        ch=readCh();        char lch=(char)Character.toLowerCase(ch);        while ((lch >= '0') && (lch <= '9') || (lch >= 'a') && (lch <= 'f')) {          if (lch >= '0' && lch <= '9') {            n=(n * 16) + lch - '0';          } else {            n=(n * 16) + lch - 'a' + 10;          }          ch=readCh();          lch=(char)Character.toLowerCase(ch);        }      }switch (ch) {case '\n':        ln++;      ch=readCh();    lfCount++;  break;case '\r':ln++;if ((ch=readCh()) == '\n') {ch=readCh();crlfCount++;} else {crCount++;}break;case ';':ch=readCh();break;}char data[]=mapNumericReference(n);return data;}addString('#');if (!parseIdentifier(false)) {error("ident.expected");strpos=pos;char data[]={'&','#'};return data;}} else if (!parseIdentifier(false)) {char data[]={'&'};return data;}boolean semicolon=false;switch (ch) {case '\n':ln++;ch=readCh();lfCount++;break;case '\r':ln++;if ((ch=readCh()) == '\n') {ch=readCh();crlfCount++;} else {crCount++;}break;case ';':semicolon=true;ch=readCh();break;}String nm=getString(pos);Entity ent=dtd.getEntity(nm);if (!strict && (ent == null)) {ent=dtd.getEntity(nm.toLowerCase());}if ((ent == null) || !ent.isGeneral()) {if (nm.length() == 0) {error("invalid.entref",nm);return new char[0];}String str="&" + nm + (semicolon ? ";" : "");char b[]=new char[str.length()];str.getChars(0,b.length,b,0);return b;}return ent.getData();}  }
class C{  public boolean processDispatchedMessage(ClientProxyMembershipID proxyId,EventID eid){  boolean success=false;  CacheClientProxy proxy=getClientProxy(proxyId);  if (proxy != null) {    HARegionQueue harq=proxy.getHARegionQueue();    harq.addDispatchedMessage(new ThreadIdentifier(eid.getMembershipID(),eid.getThreadID()),eid.getSequenceID());    success=true;  }  return success;}  }
class C{  protected HashSet<SequenceDefinition> buildSequenceDefinitions(){  HashSet processedSequenceNames=new HashSet();  HashSet<SequenceDefinition> sequenceDefinitions=new HashSet<SequenceDefinition>();  for (  ClassDescriptor descriptor : getSession().getDescriptors().values()) {    if (descriptor.usesSequenceNumbers()) {      String seqName=descriptor.getSequenceNumberName();      if (seqName == null) {        seqName=getSession().getDatasourcePlatform().getDefaultSequence().getName();      }      if (!processedSequenceNames.contains(seqName)) {        processedSequenceNames.add(seqName);        Sequence sequence=getSession().getDatasourcePlatform().getSequence(seqName);        SequenceDefinition sequenceDefinition=buildSequenceDefinition(sequence);        if (sequenceDefinition != null) {          sequenceDefinitions.add(sequenceDefinition);        }      }    }  }  return sequenceDefinitions;}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  private void adjustSelections(Selection selection,String inserted){  int dif=(selection.y - selection.x) - inserted.length();  for (  Selection sel : this.selections) {    sel.x=sel.x - dif;    sel.y=sel.y - dif;  }}  }
class C{  void map(String typeName,Map<String,MapField> featureFieldsmapping) throws FieldMappingException {  try {    Type type=cas.getTypeSystem().getType(typeName);    for (FSIterator<FeatureStructure> iterator=cas.getFSIndexRepository().getAllIndexedFS(type); iterator.hasNext(); ) {      FeatureStructure fs=iterator.next();      for (      String featureName : featureFieldsmapping.keySet()) {        MapField mapField=featureFieldsmapping.get(featureName);        String fieldNameFeature=mapField.getFieldNameFeature();        String fieldNameFeatureValue=fieldNameFeature == null ? null : fs.getFeatureValueAsString(type.getFeatureByBaseName(fieldNameFeature));        String fieldName=mapField.getFieldName(fieldNameFeatureValue);        if (log.isInfoEnabled()) {          log.info("mapping {}@{} to {}",new Object[]{typeName,featureName,fieldName});        }        String featureValue=null;        if (fs instanceof Annotation && "coveredText".equals(featureName)) {          featureValue=((Annotation)fs).getCoveredText();        } else {          featureValue=fs.getFeatureValueAsString(type.getFeatureByBaseName(featureName));        }        if (log.isDebugEnabled()) {          log.debug("writing {} in {}",new Object[]{featureValue,fieldName});        }        document.addField(fieldName,featureValue,1.0f);      }    }  } catch (  Exception e) {    throw new FieldMappingException(e);  }}  }
class C{  private int encryptBlockWithIV(byte[] in,int inOff,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  if ((inOff + blockSize) > in.length) {    throw new DataLengthException("input buffer too short");  }  if (count == 0) {    if ((outOff + 2 * blockSize + 2) > out.length) {      throw new DataLengthException("output buffer too short");    }    cipher.processBlock(FR,0,FRE,0);    for (int n=0; n < blockSize; n++) {      out[outOff + n]=encryptByte(IV[n],n);    }    System.arraycopy(out,outOff,FR,0,blockSize);    cipher.processBlock(FR,0,FRE,0);    out[outOff + blockSize]=encryptByte(IV[blockSize - 2],0);    out[outOff + blockSize + 1]=encryptByte(IV[blockSize - 1],1);    System.arraycopy(out,outOff + 2,FR,0,blockSize);    cipher.processBlock(FR,0,FRE,0);    for (int n=0; n < blockSize; n++) {      out[outOff + blockSize + 2+ n]=encryptByte(in[inOff + n],n);    }    System.arraycopy(out,outOff + blockSize + 2,FR,0,blockSize);    count+=2 * blockSize + 2;    return 2 * blockSize + 2;  } else   if (count >= blockSize + 2) {    if ((outOff + blockSize) > out.length) {      throw new DataLengthException("output buffer too short");    }    cipher.processBlock(FR,0,FRE,0);    for (int n=0; n < blockSize; n++) {      out[outOff + n]=encryptByte(in[inOff + n],n);    }    System.arraycopy(out,outOff,FR,0,blockSize);  }  return blockSize;}  }
class C{  public static void info(int windowNo,Component comp,String adMessage,String message){  Properties ctx=Env.getCtx();  logger.info(adMessage + " - " + message);  if (CLogMgt.isLevelFinest()) {    Trace.printStack();  }  String out=constructMessage(adMessage,message).toString();  try {    Messagebox.showDialog(out,AEnv.getDialogHeader(ctx,windowNo),Messagebox.OK,Messagebox.INFORMATION);  } catch (  InterruptedException exception) {    Thread.currentThread().interrupt();  }  return;}  }
class C{  public static UndertowFraction createDefaultAJPOnlyFraction(){  UndertowFraction fraction=createDefaultFraction();  fraction.removeHttpListenersFromDefaultServer().enableAJP();  return fraction;}  }
class C{  public Vector(int capacity){  this(capacity,0);}  }
class C{  public Record nextRecord() throws IOException {  Record rec=null;  try {    rec=_nextRecord();  }  finally {    if (rec == null) {      st.close();    }  }  return rec;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:23.178 -0500",hash_original_method="9550C69BAA91C5298BA75D226127D5FF",hash_generated_method="D1146B99C52208B28E4F9EC1242180A7") public int size(){  return mSize;}  }
class C{  public boolean isAntialiasing(){  return mAntialiasing;}  }
class C{  public void updateFilters(SelectableWrapper<ScriptFilterGroup> filterGroupWrapper){  boolean flag=!filterGroupWrapper.isSelected();  for (  ScriptFilter filter : filterGroupWrapper.getEntity().getFilters()) {    updateFilterWrapperForGroup(filter,flag);  }}  }
class C{  public Comparator<Point2D> distanceToOrder(){  return new DistanceToOrder();}  }
class C{  public boolean isPolyline(){  return isPolyline;}  }
class C{  public XPathFunctionException(Throwable cause){  super(cause);}  }
class C{  public void updateHeaders(Uri uri,SendReq sendReq){synchronized (PDU_CACHE_INSTANCE) {    if (PDU_CACHE_INSTANCE.isUpdating(uri)) {      if (LOCAL_LOGV)       Log.v(TAG,"updateHeaders: " + uri + " blocked by isUpdating()");      try {        PDU_CACHE_INSTANCE.wait();      } catch (      InterruptedException e) {        Log.e(TAG,"updateHeaders: ",e);      }    }  }  PDU_CACHE_INSTANCE.purge(uri);  ContentValues values=new ContentValues(10);  byte[] contentType=sendReq.getContentType();  if (contentType != null) {    values.put("ct_t",toIsoString(contentType));  }  long date=sendReq.getDate();  if (date != -1) {    values.put("date",date);  }  int deliveryReport=sendReq.getDeliveryReport();  if (deliveryReport != 0) {    values.put("d_rpt",deliveryReport);  }  long expiry=sendReq.getExpiry();  if (expiry != -1) {    values.put("exp",expiry);  }  byte[] msgClass=sendReq.getMessageClass();  if (msgClass != null) {    values.put("m_cls",toIsoString(msgClass));  }  int priority=sendReq.getPriority();  if (priority != 0) {    values.put("pri",priority);  }  int readReport=sendReq.getReadReport();  if (readReport != 0) {    values.put("rr",readReport);  }  byte[] transId=sendReq.getTransactionId();  if (transId != null) {    values.put("tr_id",toIsoString(transId));  }  EncodedStringValue subject=sendReq.getSubject();  if (subject != null) {    values.put("sub",toIsoString(subject.getTextString()));    values.put("sub_cs",subject.getCharacterSet());  } else {    values.put("sub","");  }  long messageSize=sendReq.getMessageSize();  if (messageSize > 0) {    values.put("m_size",messageSize);  }  PduHeaders headers=sendReq.getPduHeaders();  HashSet<String> recipients=new HashSet<String>();  for (  int addrType : ADDRESS_FIELDS) {    EncodedStringValue[] array=null;    if (addrType == PduHeaders.FROM) {      EncodedStringValue v=headers.getEncodedStringValue(addrType);      if (v != null) {        array=new EncodedStringValue[1];        array[0]=v;      }    } else {      array=headers.getEncodedStringValues(addrType);    }    if (array != null) {      long msgId=ContentUris.parseId(uri);      updateAddress(msgId,addrType,array);      if (addrType == PduHeaders.TO) {        for (        EncodedStringValue v : array) {          if (v != null) {            recipients.add(v.getString());          }        }      }    }  }  if (!recipients.isEmpty()) {    long threadId=Utils.getOrCreateThreadId(mContext,recipients);    values.put("thread_id",threadId);  }  SqliteWrapper.update(mContext,mContentResolver,uri,values,null,null);}  }
class C{  public void addPropertyChangeListener(PropertyChangeListener listener){  propertyChangeSupport.addPropertyChangeListener(listener);}  }
class C{  public static IJavaModelStatus validateClasspathEntry(IJavaProject project,IClasspathEntry entry,boolean checkSourceAttachment){  throw new UnsupportedOperationException();}  }
class C{  static void gc(){  gcLockSingleton.gc();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static void send(InternalDistributedMember recipient,int processorId,Boolean val,ReplySender replySender) throws RemoteOperationException {  Assert.assertTrue(recipient != null,"DistTXRollbackReplyMessage NULL reply message");  DistTXRollbackReplyMessage m=new DistTXRollbackReplyMessage(processorId,val);  m.setRecipient(recipient);  replySender.putOutgoing(m);}  }
class C{  public void addChangeEventListener(WalletChangeEventListener listener){  addChangeEventListener(Threading.USER_THREAD,listener);}  }
class C{  public JSONObject sendHarbormasterMessage(String phid,boolean pass,UnitResults unitResults,Map<String,String> coverage,LintResults lintResults) throws ConduitAPIException, IOException {  List<JSONObject> unit=new ArrayList<JSONObject>();  if (unitResults != null) {    unit.addAll(unitResults.toHarbormaster());  }  List<JSONObject> lint=new ArrayList<JSONObject>();  if (lintResults != null) {    lint.addAll(lintResults.toHarbormaster());  }  if (coverage != null) {    JSONObject coverageUnit=new JSONObject().element("result","pass").element("name","Coverage Data").element("coverage",coverage);    unit.add(coverageUnit);  }  JSONObject params=new JSONObject();  params.element("type",pass ? "pass" : "fail").element("buildTargetPHID",phid);  if (!unit.isEmpty()) {    params.element("unit",unit);  }  if (!lint.isEmpty()) {    params.element("lint",lint);  }  return conduit.perform("harbormaster.sendmessage",params);}  }
class C{  @Deprecated public RegionFactory() throws CacheWriterException, RegionExistsException, TimeoutException {  this((GemFireCacheImpl)new CacheFactory().create());}  }
class C{  public void loadMap(InputStream input,String groupID) throws Exception {  shapes=parser.parse(input,groupID);  boundaries=new ArrayList<Rect2D>(shapes.size());  for (  IGeometric2D shape : shapes) {    boundaries.add(shape.getBounds());  }}  }
class C{  protected void handleOrDeferMessage(DistributionMessage msg){synchronized (startupLock) {    if (beingSick || playingDead) {      if (msg.containsRegionContentChange() || msg instanceof PartitionMessageWithDirectReply) {        startupMessages.add(new StartupEvent(msg));        return;      }    }    if (!processingEvents) {      startupMessages.add(new StartupEvent(msg));      return;    }  }  dispatchMessage(msg);}  }
class C{  public static Matrix constructWithCopy(double[][] A){  int m=A.length;  int n=A[0].length;  Matrix X=new Matrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    if (A[i].length != n) {      throw new IllegalArgumentException("All rows must have the same length.");    }    for (int j=0; j < n; j++) {      C[i][j]=A[i][j];    }  }  return X;}  }
class C{  public synchronized void deletePendingFiles() throws IOException {  if (pendingDeletes.isEmpty() == false) {    for (    String name : new HashSet<>(pendingDeletes)) {      privateDeleteFile(name,true);    }  }}  }
class C{  public static AnnotationMirror removePrefix(final Elements elements,final AnnotationMirror unitsAnnotation){  if (elements == null) {    return null;  }  if (hasNoPrefix(unitsAnnotation)) {    return unitsAnnotation;  } else {    return AnnotationUtils.fromName(elements,unitsAnnotation.getAnnotationType().toString());  }}  }
class C{  private void readMediaMask(DataInput in,byte ver) throws IOException {  if (ver >= 0x37 && ver < 0x52) {    mediaMask=(in.readByte()) & MEDIA_MASK_ALL;  } else   if (ver >= 0x52) {    mediaMask=in.readInt() & MEDIA_MASK_ALL;  }}  }
class C{  public void memberJoined(MembershipEvent event){}  }
class C{  public String toString(){  String ret="[ ";  if (!removes.isEmpty())   ret=ret + "\n removes: " + removes.toString();  if (!colliders.isEmpty())   ret=ret + "\n colliders: " + colliders.toString();  if (!nonColliders.isEmpty())   ret=ret + "\n nonColliders: " + nonColliders.toString();  if (!orients.isEmpty())   ret=ret + "\n orient: " + orients.toString();  ret=ret + " ]";  return ret;}  }
class C{  public ICUNormalizer2CharFilterFactory(Map<String,String> args){  super(args);  String name=get(args,"name","nfkc_cf");  String mode=get(args,"mode",Arrays.asList("compose","decompose"),"compose");  Normalizer2 normalizer=Normalizer2.getInstance(null,name,"compose".equals(mode) ? Normalizer2.Mode.COMPOSE : Normalizer2.Mode.DECOMPOSE);  String filter=get(args,"filter");  if (filter != null) {    UnicodeSet set=new UnicodeSet(filter);    if (!set.isEmpty()) {      set.freeze();      normalizer=new FilteredNormalizer2(normalizer,set);    }  }  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }  this.normalizer=normalizer;}  }
class C{  public long[] keys(){  long[] keys=new long[size()];  long[] k=_set;  byte[] states=_states;  for (int i=k.length, j=0; i-- > 0; ) {    if (states[i] == FULL) {      keys[j++]=k[i];    }  }  return keys;}  }
class C{  public void testCreateConfigDirWhenDirectoryExistButIsEmpty() throws Exception {  String configDir="ram:///cargo/testCreateConfigDirWhenDirectoryExistButIsEmpty";  FileObject configDirObject=VFS.getManager().resolveFile(configDir);  FileObject timestampFileObject=configDirObject.resolveFile(".cargo");  configDirObject.createFolder();  TestableAbstractStandaloneConfiguration configuration=new TestableAbstractStandaloneConfiguration(configDir);  configuration.setFileHandler(new VFSFileHandler());  configuration.setupConfigurationDir();  assertTrue("Cargo timestamp should have existed",timestampFileObject.exists());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:24.420 -0500",hash_original_method="DFE7160E8E684D8D4AB128F02145CDAB",hash_generated_method="0B925BD0C9CC8EC1BBB8E1FCE9A08FB2") public ASN1ObjectIdentifier branch(String branchID){  return new ASN1ObjectIdentifier(getId() + "." + branchID);}  }
class C{  public DeprecatableElementItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  protected boolean matches(String selector){  int sLast=selector.length();  if (sLast == 0) {    return false;  }  int thisLast=name.length();  int sCurrent=selector.lastIndexOf(' ');  int thisCurrent=name.lastIndexOf(' ');  if (sCurrent >= 0) {    sCurrent++;  }  if (thisCurrent >= 0) {    thisCurrent++;  }  if (!matches(selector,sCurrent,sLast,thisCurrent,thisLast)) {    return false;  }  while (sCurrent != -1) {    sLast=sCurrent - 1;    sCurrent=selector.lastIndexOf(' ',sLast - 1);    if (sCurrent >= 0) {      sCurrent++;    }    boolean match=false;    while (!match && thisCurrent != -1) {      thisLast=thisCurrent - 1;      thisCurrent=name.lastIndexOf(' ',thisLast - 1);      if (thisCurrent >= 0) {        thisCurrent++;      }      match=matches(selector,sCurrent,sLast,thisCurrent,thisLast);    }    if (!match) {      return false;    }  }  return true;}  }
class C{  public Criteria OR(){  return this.example.or();}  }
class C{  public void step(SimState state){  testForHit((Asteroids)state);  super.step(state);}  }
class C{  public HttpFileServiceConfig config(){  return config;}  }
class C{  public long uploadIsoFile(String isoDatastorePath,InputStream inputStream) throws IOException {  NfcClient nfcClient=getNfcClient(hostServiceTicket);  return uploadFile(nfcClient,isoDatastorePath,inputStream);}  }
class C{  public LoginButton(Context context,AttributeSet attrs,int defStyle){  super(context,attrs,defStyle,0,AnalyticsEvents.EVENT_LOGIN_BUTTON_CREATE,DEFAULT_REQUEST_CODE);}  }
class C{  public void shedCache(){  Connection[] conn;synchronized (freeList) {    conn=freeList.toArray(new Connection[freeList.size()]);    freeList.clear();  }  for (int i=conn.length; --i >= 0; ) {    Connection c=conn[i];    conn[i]=null;    try {      c.close();    } catch (    java.io.IOException e) {    }  }}  }
class C{  private void addTokenToBucket(int bucket,TokenMapToken token){  TokenMapToken old=tokenMap[bucket];  token.nextToken=old;  tokenMap[bucket]=token;}  }
class C{  void updateModel(){  for (int i=0; i < expressions.size(); ++i) {    String expr=expressions.get(i);    String result="";    if (expr.length() > 0) {      result=debugGui.dim.eval(expr);      if (result == null)       result="";    } else {      result="";    }    result=result.replace('\n',' ');    values.set(i,result);  }  fireTableDataChanged();}  }
class C{  public void removeDummyLunPath(StorageSystem storageSystem,URI blockObjectURI) throws Exception {  log.info("Started dummy lun path removal from secondary volume");  HDSApiClient apiClient=HDSUtils.getHDSApiClient(hdsApiFactory,storageSystem);  HDSApiExportManager apiExportManager=apiClient.getHDSApiExportManager();  String systemObjectId=HDSUtils.getSystemObjectID(storageSystem);  BlockObject blockObj=BlockObject.fetch(dbClient,blockObjectURI);  String dummyLunPathId=getDummyHSDPathId(storageSystem,blockObj);  if (dummyLunPathId != null) {    apiExportManager.deleteLunPathsFromSystem(systemObjectId,Arrays.asList(dummyLunPathId),storageSystem.getModel());    log.info("Deleted Dummy Lun path from secondary volume");  } else {    log.info("Dummy lun path has been removed already");  }}  }
class C{  public Dialog(){  this("Dialog","DialogTitle");}  }
class C{  private void selectDefaultTableSource(TableSource tableSource,boolean withDatasources,Project project,FileObject targetFolder){  if (tableSource == null) {    int dbschemaCount=dbschemaComboBox.getItemCount();    if (targetFolder != null) {      SourceGroup[] sourceGroups=SourceGroups.getJavaSourceGroups(project);      SourceGroup targetSourceGroup=SourceGroups.getFolderSourceGroup(sourceGroups,targetFolder);      if (targetSourceGroup != null) {        for (int i=0; i < dbschemaCount; i++) {          Object nextSchema=dbschemaComboBox.getItemAt(i);          if (nextSchema instanceof FileObject) {            FileObject parent=((FileObject)nextSchema).getParent();            if (parent.equals(targetFolder)) {              dbschemaComboBox.setSelectedIndex(i);              dbschemaRadioButton.setSelected(true);              return;            }          }        }      }    }    if (dbschemaCount > 0 && dbschemaComboBox.getItemAt(0) instanceof FileObject) {      dbschemaComboBox.setSelectedIndex(0);      dbschemaRadioButton.setSelected(true);      return;    }  } else {    String tableSourceName=tableSource.getName();switch (tableSource.getType()) {case DATA_SOURCE:      if (withDatasources) {        if (selectDatasource(tableSourceName,false)) {          return;        }      }    break;case CONNECTION:  if (!withDatasources) {    if (selectDbConnection(tableSourceName)) {      return;    }  }break;case SCHEMA_FILE:if (selectDBSchemaFile(tableSourceName)) {return;}break;}}boolean puExists=false;try {puExists=ProviderUtil.persistenceExists(project);} catch (InvalidPersistenceXmlException ex) {}catch (RuntimeException ex) {}if (puExists) {PUDataObject pud=null;try {pud=ProviderUtil.getPUDataObject(project);} catch (InvalidPersistenceXmlException ex) {ExceptionUtils.printStackTrace(ex);}PersistenceUnit pu=(pud != null && pud.getPersistence().getPersistenceUnit().length == 1) ? pud.getPersistence().getPersistenceUnit()[0] : null;if (pu != null) {if (withDatasources) {String jtaDs=pu.getJtaDataSource();boolean jta=jtaDs != null || (Util.isContainerManaged(project) && (pu.getTransactionType() == null || pu.getTransactionType().equals(PersistenceUnit.JTA_TRANSACTIONTYPE)));if (jta) {selectDatasource(jtaDs,true);} else {String nJtaDs=pu.getNonJtaDataSource();if (nJtaDs != null) {selectDatasource(nJtaDs,true);}}} else {DatabaseConnection cn=ProviderUtil.getConnection(pu);if (cn != null) {datasourceComboBox.setSelectedItem(cn);}}}}datasourceRadioButton.setSelected(true);}  }
class C{  private Command processFlowRemovedMessage(IOFSwitch sw,OFFlowRemoved flowRemovedMessage){  if (!flowRemovedMessage.getCookie().equals(U64.of(LearningSwitch.LEARNING_SWITCH_COOKIE))) {    return Command.CONTINUE;  }  if (log.isTraceEnabled()) {    log.trace("{} flow entry removed {}",sw,flowRemovedMessage);  }  Match match=flowRemovedMessage.getMatch();  this.removeFromPortMap(sw,match.get(MatchField.ETH_SRC),match.get(MatchField.VLAN_VID).getVlanVid());  Match.Builder mb=match.createBuilder();  mb.setExact(MatchField.ETH_SRC,match.get(MatchField.ETH_DST)).setExact(MatchField.ETH_DST,match.get(MatchField.ETH_SRC)).setExact(MatchField.IPV4_SRC,match.get(MatchField.IPV4_DST)).setExact(MatchField.IPV4_DST,match.get(MatchField.IPV4_SRC));  if (match.get(MatchField.IP_PROTO).equals(IpProtocol.TCP)) {    mb.setExact(MatchField.IP_PROTO,IpProtocol.TCP).setExact(MatchField.TCP_SRC,match.get(MatchField.TCP_DST)).setExact(MatchField.TCP_DST,match.get(MatchField.TCP_SRC));  } else   if (match.get(MatchField.IP_PROTO).equals(IpProtocol.UDP)) {    mb.setExact(MatchField.IP_PROTO,IpProtocol.UDP).setExact(MatchField.UDP_SRC,match.get(MatchField.UDP_DST)).setExact(MatchField.UDP_DST,match.get(MatchField.UDP_SRC));  } else   if (match.get(MatchField.IP_PROTO).equals(IpProtocol.SCTP)) {    mb.setExact(MatchField.IP_PROTO,IpProtocol.SCTP).setExact(MatchField.SCTP_SRC,match.get(MatchField.SCTP_DST)).setExact(MatchField.SCTP_DST,match.get(MatchField.SCTP_SRC));  } else {    log.debug("In writing reverse LS flow, could not determine L4 proto (was int " + mb.get(MatchField.IP_PROTO).getIpProtocolNumber() + ")");  }  this.writeFlowMod(sw,OFFlowModCommand.DELETE,OFBufferId.NO_BUFFER,mb.build(),match.get(MatchField.IN_PORT));  return Command.CONTINUE;}  }
class C{  public void processingInstruction(String target,String data) throws org.xml.sax.SAXException {  flushPending();  if (target.equals(Result.PI_DISABLE_OUTPUT_ESCAPING)) {    startNonEscaping();  } else   if (target.equals(Result.PI_ENABLE_OUTPUT_ESCAPING)) {    endNonEscaping();  } else {    try {      if (m_elemContext.m_startTagOpen) {        closeStartTag();        m_elemContext.m_startTagOpen=false;      } else       if (m_cdataTagOpen) {        closeCDATA();      } else       if (m_needToCallStartDocument) {        startDocumentInternal();      }      if (true == m_needToOutputDocTypeDecl)       outputDocTypeDecl("html");      if (shouldIndent())       indent();      final java.io.Writer writer=m_writer;      writer.write("<?");      writer.write(target);      if (data.length() > 0 && !Character.isSpaceChar(data.charAt(0)))       writer.write(' ');      writer.write(data);      writer.write('>');      if (m_elemContext.m_currentElemDepth <= 0)       outputLineSep();      m_startNewLine=true;    } catch (    IOException e) {      throw new SAXException(e);    }  }  if (m_tracer != null)   super.fireEscapingEvent(target,data);}  }
class C{  public void testClearingOfAutowrap(){  withTerminalSized(15,6);  enterString("-----  1  ----X");  enterString("\033[K-");  enterString("-----  2  ----X");  enterString("\033[J-");  enterString("-----  3  ----X");  enterString("\033[@-");  enterString("-----  4  ----X");  enterString("\033[P-");  enterString("-----  5  ----X");  enterString("\033[X-");  enterString("XXXXXXXXXXXXXXX");  enterString("\033[M-");  assertLinesAre("-----  1  -----","-----  2  -----","-----  3  -----","-----  4  -----","-----  5  -----","              -");}  }
class C{  private Coord calculateLocation(LinearMovement proto,boolean isEven){  double dx=0;  double dy=0;  double placementFraction;  double xDiff=(proto.endLoc.getX() - proto.startLoc.getX());  double yDiff=(proto.endLoc.getY() - proto.startLoc.getY());  Coord c=proto.startLoc.clone();  if (isEven) {    placementFraction=(1.0 * proto.lastIndex / proto.nodeCount);    dx=placementFraction * xDiff;    dy=placementFraction * yDiff;  } else {    dx=rng.nextDouble() * xDiff;    dy=rng.nextDouble() * yDiff;  }  c.translate(dx,dy);  return c;}  }
class C{  public static <I,A>Parser<I,IList<A>> many(Parser<I,A> p){  return manyLoop(p,IList.of());}  }
class C{  public void sign(AuthSuccess authSuccess) throws ServerException, AssociationException {  String handle=authSuccess.getHandle();  Association assoc=_sharedAssociations.load(handle);  if (assoc == null)   assoc=_privateAssociations.load(handle);  if (assoc == null)   throw new ServerException("No association found for handle: " + handle);  authSuccess.setSignature(assoc.sign(authSuccess.getSignedText()));}  }
class C{  public String toString(){  return toXML(false);}  }
class C{  protected DistributionLocatorImpl createDistributionLocatorImpl(DistributionLocatorConfig conf){  return new DistributionLocatorImpl(conf,this);}  }
class C{  public NodeId toNodeId(ExpandedNodeId expandedNodeId) throws ServiceResultException {  if (ExpandedNodeId.isNull(expandedNodeId))   return NodeId.NULL;  if (!expandedNodeId.isLocal())   throw new ServiceResultException("Cannot convert ExpandedNodeId with server index to NodeId");  String uri=expandedNodeId.getNamespaceUri();  if (uri == null)   return NodeId.get(expandedNodeId.getIdType(),expandedNodeId.getNamespaceIndex(),expandedNodeId.getValue());  int index=this.getIndex(uri);  if (index < 0)   throw new ServiceResultException("Index for uri \"" + uri + "\" not found in NamespaceTable");  return NodeId.get(expandedNodeId.getIdType(),index,expandedNodeId.getValue());}  }
class C{  public String toString(){  return "[" + x + ", "+ y+ "]";}  }
class C{  public static byte[] decode(String data){  int len=data.length() / 4 * 3;  ByteArrayOutputStream bOut=new ByteArrayOutputStream(len);  try {    encoder.decode(data,bOut);  } catch (  Exception e) {    throw new DecoderException("unable to decode base64 string: " + e.getMessage(),e);  }  return bOut.toByteArray();}  }
class C{  public DrawerBuilder withSelectedItem(long selectedItemIdentifier){  this.mSelectedItemIdentifier=selectedItemIdentifier;  return this;}  }
class C{  public static String GetVersionName(Context context){  try {    PackageInfo manager=context.getPackageManager().getPackageInfo(context.getPackageName(),0);    return manager.versionName;  } catch (  PackageManager.NameNotFoundException e) {    return "";  }}  }
class C{  public static Map<String,Object> flowModToStorageEntry(OFFlowMod fm,String sw,String name){  Map<String,Object> entry=new HashMap<String,Object>();  OFMatch match=fm.getMatch();  entry.put(StaticFlowEntryPusher.COLUMN_NAME,name);  entry.put(StaticFlowEntryPusher.COLUMN_SWITCH,sw);  entry.put(StaticFlowEntryPusher.COLUMN_ACTIVE,Boolean.toString(true));  entry.put(StaticFlowEntryPusher.COLUMN_PRIORITY,Short.toString(fm.getPriority()));  entry.put(StaticFlowEntryPusher.COLUMN_WILDCARD,Integer.toString(match.getWildcards()));  if ((fm.getActions() != null) && (fm.getActions().size() > 0))   entry.put(StaticFlowEntryPusher.COLUMN_ACTIONS,StaticFlowEntries.flowModActionsToString(fm.getActions()));  if (match.getInputPort() != 0)   entry.put(StaticFlowEntryPusher.COLUMN_IN_PORT,Short.toString(match.getInputPort()));  if (!Arrays.equals(match.getDataLayerSource(),zeroMac))   entry.put(StaticFlowEntryPusher.COLUMN_DL_SRC,HexString.toHexString(match.getDataLayerSource()));  if (!Arrays.equals(match.getDataLayerDestination(),zeroMac))   entry.put(StaticFlowEntryPusher.COLUMN_DL_DST,HexString.toHexString(match.getDataLayerDestination()));  if (match.getDataLayerVirtualLan() != -1)   entry.put(StaticFlowEntryPusher.COLUMN_DL_VLAN,Short.toString(match.getDataLayerVirtualLan()));  if (match.getDataLayerVirtualLanPriorityCodePoint() != 0)   entry.put(StaticFlowEntryPusher.COLUMN_DL_VLAN_PCP,Short.toString(match.getDataLayerVirtualLanPriorityCodePoint()));  if (match.getDataLayerType() != 0)   entry.put(StaticFlowEntryPusher.COLUMN_DL_TYPE,Short.toString(match.getDataLayerType()));  if (match.getNetworkTypeOfService() != 0)   entry.put(StaticFlowEntryPusher.COLUMN_NW_TOS,Short.toString(match.getNetworkTypeOfService()));  if (match.getNetworkProtocol() != 0)   entry.put(StaticFlowEntryPusher.COLUMN_NW_PROTO,Short.toString(match.getNetworkProtocol()));  if (match.getNetworkSource() != 0)   entry.put(StaticFlowEntryPusher.COLUMN_NW_SRC,IPv4.fromIPv4Address(match.getNetworkSource()));  if (match.getNetworkDestination() != 0)   entry.put(StaticFlowEntryPusher.COLUMN_NW_DST,IPv4.fromIPv4Address(match.getNetworkDestination()));  if (match.getTransportSource() != 0)   entry.put(StaticFlowEntryPusher.COLUMN_TP_SRC,Short.toString(match.getTransportSource()));  if (match.getTransportDestination() != 0)   entry.put(StaticFlowEntryPusher.COLUMN_TP_DST,Short.toString(match.getTransportDestination()));  return entry;}  }
class C{  public void addFilter(RocFilter filter){  mRocs.put(filter,new TreeMap<>(mComparator));  mRequiresGt|=filter.requiresGt();}  }
class C{  public void unregisterListener(TrackDataListener listener){  EnumSet<TrackDataType> removedTypes=listenerToTypesMap.remove(listener);  if (removedTypes == null) {    Log.w(TAG,"Tried to unregister a listener that is not registered. Ignore.");    return;  }  for (  TrackDataType trackDataType : removedTypes) {    typeToListenersMap.get(trackDataType).remove(listener);  }}  }
class C{  public void testIntReverse() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  doc.add(new NumericDocValuesField("value",300000));  doc.add(newStringField("value","300000",Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new NumericDocValuesField("value",-1));  doc.add(newStringField("value","-1",Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new NumericDocValuesField("value",4));  doc.add(newStringField("value","4",Field.Store.YES));  writer.addDocument(doc);  IndexReader ir=writer.getReader();  writer.close();  IndexSearcher searcher=newSearcher(ir);  Sort sort=new Sort(new SortField("value",SortField.Type.INT,true));  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(3,td.totalHits);  assertEquals("300000",searcher.doc(td.scoreDocs[0].doc).get("value"));  assertEquals("4",searcher.doc(td.scoreDocs[1].doc).get("value"));  assertEquals("-1",searcher.doc(td.scoreDocs[2].doc).get("value"));  ir.close();  dir.close();}  }
class C{  public static boolean isClass(TypeMirror type){  return isDeclaredOfName(type,"java.lang.Class");}  }
class C{  private List<NFSShareACL> queryDBSFileNfsACLs(boolean allDirs){  try {    ContainmentConstraint containmentConstraint=null;    if (this.fs != null) {      _log.info("Querying DB for Nfs ACLs of fs{} of filesystemId {} ",this.fs.getPath(),fs.getId());      containmentConstraint=ContainmentConstraint.Factory.getFileNfsAclsConstraint(this.fs.getId());    } else {      _log.info("Querying DB for Nfs ACLs of fs {} of snapshotId {} ",this.snapShot.getPath(),this.snapShot.getId());      containmentConstraint=ContainmentConstraint.Factory.getSnapshotNfsAclsConstraint(this.snapShot.getId());    }    List<NFSShareACL> nfsAclList=CustomQueryUtility.queryActiveResourcesByConstraint(this.dbClient,NFSShareACL.class,containmentConstraint);    if (allDirs) {      return nfsAclList;    }    List<NFSShareACL> rootAclList=new ArrayList<NFSShareACL>();    List<NFSShareACL> subDirAclList=new ArrayList<NFSShareACL>();    String absoluteSubdir="";    if (this.subDir != null && !this.subDir.isEmpty()) {      absoluteSubdir=this.fs.getPath() + "/" + subDir;    }    for (    NFSShareACL nfsAcl : nfsAclList) {      if (nfsAcl.getFileSystemPath().equals(fs.getPath())) {        rootAclList.add(nfsAcl);      }      if (!absoluteSubdir.isEmpty()) {        if (nfsAcl.getFileSystemPath().equals(absoluteSubdir)) {          subDirAclList.add(nfsAcl);        }      }    }    if (!absoluteSubdir.isEmpty()) {      _log.info("Found {} Nfs ACLs for subdir {} ",subDirAclList.size(),this.subDir);      return subDirAclList;    }    _log.info("Found {} Nfs ACLs ",rootAclList.size());    return rootAclList;  } catch (  Exception e) {    _log.error("Error while querying DB for ACL of a NFS {}",e);  }  return null;}  }
class C{  public FileDownloadTask(URI uri,File target){  super(uri);  Objects.requireNonNull(target);  this.target=target;}  }
class C{  public static void w(String message,Throwable cause){  if (BuildConfig.DEBUG) {    Log.w(LOG_TAG,"[" + message + "]",cause);  }}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public ValidatableTokenMock(boolean invalidSignature,String issuer){  this.invalidSignature=invalidSignature;  this.isValid=invalidSignature;  this.groupList=null;  this.delegates=null;  this.subject=null;  this._issuer=new NameIdImpl(issuer,org.opensaml.saml2.core.Issuer.ENTITY);}  }
class C{  @Override public void accept(Throwable error){  handler.accept(error);}  }
class C{  public List<Quota> listTreeQuotas(){  if (log.isDebugEnabled()) {    log.debug("Getting all tree quotas");  }  QuotaCommands commands=new QuotaCommands(server.getNaServer());  return commands.getTreeQuotas();}  }
class C{  public MGRSPoint(MGRSPoint point){  this();  mgrs=point.mgrs;  northing=point.northing;  easting=point.easting;  zone_number=point.zone_number;  zone_letter=point.zone_letter;  accuracy=point.accuracy;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void test2TouchAtEndpoint() throws Exception {  String a="MULTILINESTRING((0 1, 1 1, 2 1), (0 0, 1 0, 2 1))";  runIsSimpleTest(a,BoundaryNodeRule.MOD2_BOUNDARY_RULE,true,new Coordinate(2,1));  runIsSimpleTest(a,BoundaryNodeRule.ENDPOINT_BOUNDARY_RULE,true,new Coordinate(2,1));}  }
class C{  public boolean isPackingList(){  return this.packingList;}  }
class C{  public boolean isGuaranteeDateMandatory(){  Object oo=get_Value(COLUMNNAME_IsGuaranteeDateMandatory);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected boolean afterDelete(boolean success){  if (success)   delete_Tree(MTree_Base.TREETYPE_Campaign);  return success;}  }
class C{  public void printURL(String url){  _dataURL=url;  System.out.println("Printing URL: " + url);  Thread thread=new Thread(this);  thread.start();}  }
class C{  public void closeConnection(String userId){  this.pcClient.closeConnection(userId);}  }
class C{  private List<Ignite> runGrid(){  List<Ignite> clientIgnites=new ArrayList<>(clientNodes);  try {    loadTestConfiguration();    for (int i=0; i < srvNodes; i++)     startNode("server",SERVER_NODE_CONFIGURATION);    for (int i=0; i < clientNodes; i++)     clientIgnites.add(startNode("client",CLIENT_NODE_CONFIGURATION));  } catch (  Exception e) {    throw new RuntimeException(e);  }  return clientIgnites;}  }
class C{  private void initPanel(){  randomizerHolder.removeAll();  if (comboBox.getSelectedIndex() == 0) {    randomizerHolder.add(activationRandomizer);  } else {    randomizerHolder.add(weightRandomizer);  }  repaint();  pack();}  }
class C{  public boolean replaceElement(Element toRemove,Element toAdd){  throwExceptionIfLocked();  if (toAdd == null) {    return removeElement(toRemove);  }  QName id=toRemove.getElementId();  if (!id.equals(toAdd.getElementId())) {    boolean removed=removeElement(toRemove);    if (removed) {      addElement(toAdd);    }    return removed;  }  if (state.elements != null) {    Object obj=state.elements.get(id);    if (obj instanceof List<?>) {      List<Element> list=castElementList(obj);      for (int i=0; i < list.size(); i++) {        if (list.get(i) == toRemove) {          list.set(i,toAdd);          return true;        }      }    } else     if (obj instanceof Set<?>) {      Set<Element> set=castElementSet(obj);      if (set.remove(toRemove)) {        set.add(toAdd);      }    } else     if (obj == toRemove) {      state.elements.put(id,toAdd);      return true;    }  }  return false;}  }
class C{  public MutableLocation toImmutableLocation(){  return new MutableLocation(x,y,z,w);}  }
class C{  public final void negate(Matrix3d m1){  this.m00=-m1.m00;  this.m01=-m1.m01;  this.m02=-m1.m02;  this.m10=-m1.m10;  this.m11=-m1.m11;  this.m12=-m1.m12;  this.m20=-m1.m20;  this.m21=-m1.m21;  this.m22=-m1.m22;}  }
class C{  public void unregisterEventHooks(){  view.removeEventDecorator(processAnnotationEvents,RenderPhase.ANNOTATIONS);  view.removeEventDecorator(operatorAnnotationEvents,RenderPhase.OPERATOR_ANNOTATIONS);  view.removeEventDecorator(workflowAnnotationSelectedEvents,RenderPhase.OVERLAY);  rendererModel.removeEventListener(modelListener);}  }
class C{  private void emitSerializerImpl(List<Type> expandedTypes,int depth,StringBuilder builder,String inVar,String outVar,String i){  Type type=expandedTypes.get(depth);  String childInVar=inVar + "_";  String childOutVar=outVar + "_";  String entryVar="entry" + depth;  Class<?> rawClass=getRawClass(type);  if (isList(rawClass)) {    String childInTypeName=getImplName(expandedTypes.get(depth + 1),false);    builder.append(i).append("JSONArray ").append(outVar).append(" = new JSONArray();\n");    if (depth == 0) {      builder.append(i).append("this.").append(getEnsureName(inVar)).append("();\n");    }    builder.append(i).append("for (").append(childInTypeName).append(" ").append(childInVar).append(" : ").append(depth == 0 ? "this." + inVar : inVar).append(") {\n");  } else   if (isMap(rawClass)) {    String childInTypeName=getImplName(expandedTypes.get(depth + 1),false);    builder.append(i).append("JSONObject ").append(outVar).append(" = new JSONObject();\n");    if (depth == 0) {      builder.append(i).append("this.").append(getEnsureName(inVar)).append("();\n");    }    builder.append(i).append("for (java.util.Map.Entry<String, ").append(childInTypeName).append("> ").append(entryVar).append(" : ").append(depth == 0 ? "this." + inVar : inVar).append(".entrySet()) {\n");    builder.append(i).append("  ").append(childInTypeName).append(" ").append(childInVar).append(" = ").append(entryVar).append(".getValue();\n");  } else   if (rawClass.isEnum()) {    builder.append(i).append("JSONValue ").append(outVar).append(" = (").append(depth == 0 ? "this." + inVar : inVar).append(" == null) ? JSONNull.getInstance() : new JSONString(").append(depth == 0 ? "this." + inVar : inVar).append(".name());\n");  } else   if (getEnclosingTemplate().isDtoInterface(rawClass)) {    builder.append(i).append("JSONValue ").append(outVar).append(" = ").append(depth == 0 ? "this." + inVar : inVar).append(" == null ? JSONNull.getInstance() : ((").append(getImplNameForDto((Class<?>)expandedTypes.get(depth))).append(")").append(inVar).append(").toJsonObject();\n");  } else   if (rawClass.equals(String.class)) {    builder.append(i).append("JSONValue ").append(outVar).append(" = (").append(depth == 0 ? "this." + inVar : inVar).append(" == null) ? JSONNull.getInstance() : new JSONString(").append(depth == 0 ? "this." + inVar : inVar).append(");\n");  } else   if (isNumber(rawClass)) {    if (rawClass.isPrimitive()) {      builder.append(i).append("JSONValue ").append(outVar).append(" = new JSONNumber(").append(depth == 0 ? "this." + inVar : inVar).append(");\n");    } else {      builder.append(i).append("JSONValue ").append(outVar).append(" = ").append(depth == 0 ? " this." + inVar : inVar).append(" == null ? JSONNull.getInstance() : new JSONNumber(").append(depth == 0 ? "this." + inVar : inVar).append(");\n");    }  } else   if (isBoolean(rawClass)) {    if (rawClass.isPrimitive()) {      builder.append(i).append("JSONValue ").append(outVar).append(" = JSONBoolean.getInstance(").append(depth == 0 ? "this." + inVar : inVar).append(");\n");    } else {      builder.append(i).append("JSONValue ").append(outVar).append(" = ").append(depth == 0 ? " this." + inVar : inVar).append(" == null ? JSONNull.getInstance() : JSONBoolean.getInstance(").append(depth == 0 ? "this." + inVar : inVar).append(");\n");    }  } else   if (isAny(rawClass)) {    builder.append(i).append("JSONValue ").append(outVar).append(" = ").append(depth == 0 ? " this." + inVar : inVar).append(" == null ? JSONNull.getInstance() : (");    appendCopyJsonExpression(inVar,builder).append(");\n");  } else {    final Class<?> dtoImplementation=getEnclosingTemplate().getDtoImplementation(rawClass);    if (dtoImplementation != null) {      builder.append(i).append("JSONValue ").append(outVar).append(" = ").append(depth == 0 ? "this." + inVar : inVar).append(" == null ? JSONNull.getInstance() : ((").append(dtoImplementation.getCanonicalName()).append(")").append(depth == 0 ? "this." + inVar : inVar).append(").toJsonObject();\n");    } else {      throw new IllegalArgumentException("Unable to generate client implementation for DTO interface " + getDtoInterface().getCanonicalName() + ". Type "+ rawClass+ " is not allowed to use in DTO interface.");    }  }  if (depth + 1 < expandedTypes.size()) {    emitSerializerImpl(expandedTypes,depth + 1,builder,childInVar,childOutVar,i + "  ");  }  if (isList(rawClass)) {    builder.append(i).append("  ").append(outVar).append(".set(").append(outVar).append(".size(), ").append(childOutVar).append(");\n");    builder.append(i).append("}\n");  } else   if (isMap(rawClass)) {    builder.append(i).append("  ").append(outVar).append(".put(").append(entryVar).append(".getKey(), ").append(childOutVar).append(");\n");    builder.append(i).append("}\n");  }}  }
class C{  public boolean isLoaded(String name){  return solrCores.isLoaded(name);}  }
class C{  public void reset(){  totalFoundErrors=0;  totalResources=0;  totalResourcesWithErrors=0;}  }
class C{  @Override protected boolean check(File item){  return item.exists();}  }
class C{  public TIntArrayList inverseGrep(TIntProcedure condition){  TIntArrayList list=new TIntArrayList();  for (int i=0; i < _pos; i++) {    if (!condition.execute(_data[i])) {      list.add(_data[i]);    }  }  return list;}  }
class C{  void filtersChanged(){  rebuild();  fireTableDataChanged();}  }
class C{  public void applyMirroredCorrection(ResultPoint[] points){  if (!mirrored || points == null || points.length < 3) {    return;  }  ResultPoint bottomLeft=points[0];  points[0]=points[2];  points[2]=bottomLeft;}  }
class C{  @Override public boolean isApplicable(XStudent student){  for (  XRequest request : student.getRequests()) {    if (request instanceof XCourseRequest && ((XCourseRequest)request).getCourseIds().contains(iCourseId))     return true;  }  return false;}  }
class C{  public AnimationData(final long[] pFrameDurations,final int[] pFrames,final int pLoopCount){  this.set(pFrameDurations,pFrames,pLoopCount);}  }
class C{  public void enqueue(SourceRecord record) throws InterruptedException {  if (record != null) {    records.put(record);  }}  }
class C{  public NightModeHelper(Activity activity){  int currentMode=(activity.getResources().getConfiguration().uiMode & Configuration.UI_MODE_NIGHT_MASK);  mPrefs=PreferenceManager.getDefaultSharedPreferences(activity);  init(activity,-1,mPrefs.getInt(PREF_KEY,currentMode));}  }
class C{  public NamedThreadFactory(String namePrefix,boolean daemon){  this(namePrefix);  this.daemon=daemon;}  }
class C{  public static Process createIdaProcess(final String idaExe,final File idcPath,final String idbFileName,final String outputDirectory) throws IdaException {  final String idcFileString=idcPath.getAbsolutePath();  final String sArgument=getSArgument(idcFileString,SystemHelpers.isRunningWindows());  final ProcessBuilder processBuilder=new ProcessBuilder(idaExe,"-A","-OExporterModule:" + outputDirectory,sArgument,idbFileName);  try {    Process processInfo=null;    processBuilder.redirectErrorStream(true);    processInfo=processBuilder.start();    try (BufferedReader reader=new BufferedReader(new InputStreamReader(processInfo.getInputStream()))){      reader.lines().forEach(null);    } catch (    final IOException exception) {    }    return processInfo;  } catch (  final Exception exception) {    try {    } catch (    final UnknownFormatConversionException e) {    }    throw new IdaException("Failed attempting to launch the importer with IDA: " + exception,exception);  }}  }
class C{  public static void listSnapshotAclJson(String aclURL){  String snapshotId=null;  String shareName=null;  if (StringUtils.isNotBlank(aclURL)) {    String[] parts=aclURL.split("/");    if (parts.length == 7) {      snapshotId=parts[3];      shareName=parts[5];    }  }  ViPRCoreClient client=BourneUtil.getViprClient();  List<ShareACL> shareAcls=client.fileSnapshots().getShareACLs(uri(snapshotId),shareName);  List<ShareACLDataTable.SnapshotAclInfo> acl=Lists.newArrayList();  for (  ShareACL shareAcl : shareAcls) {    String userOrGroup=shareAcl.getUser();    String type=SnapshotShareACLForm.USER;    if (shareAcl.getGroup() != null && shareAcl.getGroup() != "") {      type=SnapshotShareACLForm.GROUP;      userOrGroup=shareAcl.getGroup();    }    acl.add(new ShareACLDataTable.SnapshotAclInfo(userOrGroup,type,shareAcl.getPermission(),snapshotId,shareName,shareAcl.getDomain()));  }  renderJSON(DataTablesSupport.createJSON(acl,params));}  }
class C{  public SingleNddCeddImageSearcher(IndexReader reader,boolean approximate){  this.halfDimensions=approximate;  init(reader);}  }
class C{  public cudaTextureObject(){}  }
class C{  public void stopAutoScroll(){  isAutoScroll=false;  handler.removeMessages(SCROLL_WHAT);}  }
class C{  public BuddhistCalendar(TimeZone zone,Locale aLocale){  super(zone,aLocale);}  }
class C{  public SaaSApplicationException(Throwable cause,Object[] params){  super(cause);  init(params);}  }
class C{  public void addOMGraphics(OMGraphicList list,DrawingAttributes drawingAttributes){  int nPolys=polygons.length;  if (nPolys <= 0)   return;  OMPoly p=null;  double[] pts;  boolean ispolyg=isPolygon();  OMList sublist=null;  if (nPolys > 1) {    if (false && ispolyg) {      sublist=new OMAreaList();      ((OMAreaList)sublist).setConnectParts(false);    } else {      sublist=new OMGraphicList();    }    if (drawingAttributes != null) {      drawingAttributes.setTo(sublist);    }    sublist.setVague(true);    list.add(sublist);    sublist.putAttribute(ShapeConstants.SHAPE_INDEX_ATTRIBUTE,new Integer(getRecordNumber()));  }  for (int i=0; i < nPolys; i++) {    pts=((ESRIPoly.ESRIFloatPoly)polygons[i]).getRadians();    p=new OMPoly(pts,OMGraphic.RADIANS,OMGraphic.LINETYPE_STRAIGHT);    if (drawingAttributes != null) {      drawingAttributes.setTo(p);    }    if (!ispolyg) {      p.setIsPolygon(false);    }    if (sublist != null) {      sublist.add(p);    } else {      p.putAttribute(ShapeConstants.SHAPE_INDEX_ATTRIBUTE,new Integer(getRecordNumber()));      list.add(p);    }  }}  }
class C{  @Override public String globalInfo(){  return "This Bayes Network learning algorithm uses a Look Ahead Hill Climbing algorithm called LAGD Hill Climbing." + " Unlike Greedy Hill Climbing it doesn't calculate a best greedy operation (adding, deleting or reversing an arc) " + "but a sequence of nrOfLookAheadSteps operations, which leads to a network structure whose score is most likely "+ "higher in comparison to the network obtained by performing a sequence of nrOfLookAheadSteps greedy operations. "+ "The search is not restricted by an order "+ "on the variables (unlike K2). The difference with B and B2 is that this hill "+ "climber also considers arrows part of the naive Bayes structure for deletion.";}  }
class C{  private void drawShadows(Canvas canvas){  int height=(int)(1.5 * getItemHeight());  topShadow.setBounds(0,0,getWidth(),height);  topShadow.draw(canvas);  bottomShadow.setBounds(0,getHeight() - height,getWidth(),getHeight());  bottomShadow.draw(canvas);}  }
class C{  private boolean isNearPoint(int x,int y){  mTmpRect.set(mThumbPosition.x,mThumbPosition.y,mThumbPosition.x + mWidth,mThumbPosition.y + mThumbHeight);  mTmpRect.inset(mTouchInset,mTouchInset);  return mTmpRect.contains(x,y);}  }
class C{  @Nullable public static String readTextFileFromRawResource(@NonNull final Context context,@RawRes final int resId){  final BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(context.getResources().openRawResource(resId)));  String line;  final StringBuilder body=new StringBuilder();  try {    while ((line=bufferedReader.readLine()) != null) {      body.append(line).append('\n');    }  } catch (  IOException e) {    return null;  }  return body.toString();}  }
class C{  public SubscriptionAlreadyExistsException(String message){  super(message);}  }
class C{  public String toString(){  return this.getClass().getName() + "(" + my_N+ ","+ my_s+ ","+ my_n+ ")";}  }
class C{  public RandomListNode copyRandomList3(RandomListNode haed){}  }
class C{  private static NavigableMap<Integer,InetSocketAddress> buildHostsWeightedByActiveConnections(Map<InetSocketAddress,CassandraClientPoolingContainer> pools){  Map<InetSocketAddress,Integer> openRequestsByHost=new HashMap<>(pools.size());  int totalOpenRequests=0;  for (  Entry<InetSocketAddress,CassandraClientPoolingContainer> poolEntry : pools.entrySet()) {    int openRequests=Math.max(poolEntry.getValue().getOpenRequests(),0);    openRequestsByHost.put(poolEntry.getKey(),openRequests);    totalOpenRequests+=openRequests;  }  int lowerBoundInclusive=0;  NavigableMap<Integer,InetSocketAddress> weightedHosts=new TreeMap<>();  for (  Entry<InetSocketAddress,Integer> entry : openRequestsByHost.entrySet()) {    int weight=totalOpenRequests - entry.getValue() + 1;    weightedHosts.put(lowerBoundInclusive + weight,entry.getKey());    lowerBoundInclusive+=weight;  }  return weightedHosts;}  }
class C{  public static int directBlowBADamage(double damage,int damageType,BattleArmor target){switch (damageType) {case WeaponType.WEAPON_BURST_1D6:    damage=Compute.d6();  break;case WeaponType.WEAPON_BURST_3D6:damage=Compute.d6(3);break;case WeaponType.WEAPON_PLASMA:if (!target.isFireResistant()) {damage=1 + Compute.d6(1);}break;}damage=Math.ceil(damage);return (int)damage;}  }
class C{  private QueryParameter addToList(final List<String> list,boolean allowNull,final String[] parameters){  for (  String parameter : parameters) {    if ((allowNull) || (parameter != null)) {      list.add(parameter);    }  }  return this;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.UNARY_EXPRESSION__OP:    setOp(OP_EDEFAULT);  return;case N4JSPackage.UNARY_EXPRESSION__EXPRESSION:setExpression((Expression)null);return;}super.eUnset(featureID);}  }
class C{  public static void removeFromCache(final String tableName){  final POInfo cachedValue=s_cacheByTableName.get(tableName);  if (cachedValue == null) {    return;  }  s_cacheByTableName.remove(tableName);  s_cache.remove(cachedValue.getAD_Table_ID());}  }
class C{  protected boolean loadSubframe(RpfSubframe subframe,RpfCoverageBox coverageBox,int x,int y){  boolean good=false;  int[] pixels=null;  if (frameProvider == null) {    Debug.message("rpf","RpfCacheHandler.loadSubframes(): null frameProvider");    return false;  }  RpfViewAttributes viewAttributes=getViewAttributes();  subframe.opaqueness=viewAttributes.opaqueness;  if (viewAttributes.colorModel == OMRasterObject.COLORMODEL_DIRECT) {    pixels=frameProvider.getSubframeData(coverageBox.tocNumber,coverageBox.entryNumber,x,y);    if (pixels != null) {      subframe.setPixels(pixels);      good=true;    }  } else   if (viewAttributes.colorModel == OMRasterObject.COLORMODEL_INDEXED) {    RpfIndexedImageData riid=frameProvider.getRawSubframeData(coverageBox.tocNumber,coverageBox.entryNumber,x,y);    if (riid != null && riid.imageData != null && riid.colortable != null) {      subframe.setBitsAndColors(riid.imageData,riid.colortable);      subframe.setTransparent(viewAttributes.opaqueness);      good=true;    }  } else {    Debug.error("RpfCacheHandler: Frame Provider colormodel not handled.");    return false;  }  if (good) {    double lat, lon, lat2, lon2;    double xlloffset, ylloffset;    ylloffset=(double)(y * coverageBox.subframeLatInterval);    xlloffset=(double)(x * coverageBox.subframeLonInterval);    lat=coverageBox.nw_lat - ylloffset;    lon=coverageBox.nw_lon + xlloffset;    lat2=lat - coverageBox.subframeLatInterval;    lon2=lon + coverageBox.subframeLonInterval;    String data;    if (viewAttributes != null && (viewAttributes.autofetchAttributes || viewAttributes.showInfo)) {      data=frameProvider.getSubframeAttributes(coverageBox.tocNumber,coverageBox.entryNumber,x,y);    } else {      data="";    }    if (DEBUG_RPFDETAIL) {      Debug.output("Attribute data for subframe " + x + ", "+ y+ ":\n"+ data);    }    subframe.setLocation(lat,lon,lat2,lon2);    subframe.setAttributeText(data);    return true;  } else {    subframe.setAttributeText("");  }  return false;}  }
class C{  public String post(String url,RequestParams params) throws HttpException {  return post(null,url,params);}  }
class C{  public void yypushback(int number){  if (number > yylength()) {    zzScanError(ZZ_PUSHBACK_2BIG);  }  zzMarkedPos-=number;}  }
class C{  public boolean isValid(INode state){  return true;}  }
class C{  public ScreenDescriptor(short width,short height,int numColors){  this.localScreenWidth=width;  this.localScreenHeight=height;  SetGlobalColorTableSize((byte)(BitUtils.BitsNeeded(numColors) - 1));  SetGlobalColorTableFlag((byte)1);  SetSortFlag((byte)0);  SetColorResolution((byte)7);  this.backgroundColorIndex=0;  this.pixelAspectRatio=0;}  }
class C{  public static long readLong(){  return scanner.nextLong();}  }
class C{  public static void isVat(String member,BigDecimal value) throws ValidationException {  if (!ADMValidator.isVat(value)) {    ValidationException vf=new ValidationException(ReasonEnum.VAT,member,new Object[]{value});    logValidationFailure(vf);    throw vf;  }}  }
class C{  public boolean isVoiceRecognitionEnabled(){  return preferences.getBoolean(resources.getString(R.string.key_voice_recognition),Boolean.parseBoolean(resources.getString(R.string.default_voice_recognition)));}  }
class C{  private void injectViews(View view){  ButterKnife.inject(this,view);}  }
class C{  public HttpProcessException(String msg,int code){  super(msg);  ErrorType=code;}  }
class C{  public static List<File> scanFiles(File path){  ArrayList<File> result=new ArrayList<File>();  scanFiles(path,result);  return result;}  }
class C{  public void testCallStmtSetObjectAndNewSupportedTypes() throws Exception {  createTable("testSetObjectCS1","(id INT, d DATE, t TIME, dt DATETIME, ts TIMESTAMP)");  createProcedure("testSetObjectCS1Proc","(IN id INT, IN d DATE, IN t TIME, IN dt DATETIME, IN ts TIMESTAMP) BEGIN " + "INSERT INTO testSetObjectCS1 VALUES (id, d, t, dt, ts); END");  CallableStatement testCstmt=this.conn.prepareCall("{CALL testSetObjectCS1Proc(?, ?, ?, ?, ?)}");  validateTestDataLocalDTTypes("testSetObjectCS1",insertTestDataLocalDTTypes(testCstmt));  createTable("testSetObjectCS2","(id INT, ot1 VARCHAR(100), ot2 BLOB, odt1 VARCHAR(100), odt2 BLOB)");  createProcedure("testSetObjectCS2Proc","(id INT, ot1 VARCHAR(100), ot2 BLOB, odt1 VARCHAR(100), odt2 BLOB) BEGIN INSERT INTO testSetObjectCS2 VALUES (id, ot1, ot2, odt1, odt2); END");  testCstmt=this.conn.prepareCall("{CALL testSetObjectCS2Proc(?, ?, ?, ?, ?)}");  validateTestDataOffsetDTTypes("testSetObjectCS2",insertTestDataOffsetDTTypes(testCstmt));}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Object value=stack.pop();  String name=getString(stack);  ZPseudoComp uiComp=getUIComp(stack);  if (uiComp != null) {    uiComp.getRelatedContext().set(name,value);  }  return null;}  }
class C{  protected Token createInternalUseOnlyToken(){  return new DefaultToken();}  }
class C{  public ImageHDU(Header h,ImageData d) throws FitsException {  super(h,d);}  }
class C{  public static void deleteAllEdges(Node node){  List edges=node.getOutEdges().getEdges();  for (Iterator i=edges.iterator(); i.hasNext(); ) {    PolygonizeDirectedEdge de=(PolygonizeDirectedEdge)i.next();    de.setMarked(true);    PolygonizeDirectedEdge sym=(PolygonizeDirectedEdge)de.getSym();    if (sym != null)     sym.setMarked(true);  }}  }
class C{  @Override public void writeFromObjectIntoRowWithChangeRecord(ChangeRecord changeRecord,AbstractRecord databaseRow,AbstractSession session,WriteType writeType) throws DescriptorException {  if (isReadOnly()) {    return;  }  writeToRowFromAggregateWithChangeRecord(databaseRow,changeRecord,(ObjectChangeSet)((AggregateChangeRecord)changeRecord).getChangedObject(),session,writeType);}  }
class C{  public GridVizPlotter(PlotterConfigurationModel settings,DataTable dataTable){  super(settings);  setDataTable(dataTable);}  }
class C{  public LibUsbException(final String message,final int errorCode){  super(String.format("USB error %d: %s: %s",-errorCode,message,LibUsb.strError(errorCode)));  this.errorCode=errorCode;}  }
class C{  public static String evaluate(Kernel Kernel,String[] options) throws Exception {  String trainFileString="";  BufferedReader reader;  KernelEvaluation eval;  String classIndexString;  int classIndex=-1;  Instances train;  String[] userOptions;  if (Utils.getFlag('h',options)) {    throw new Exception("\nHelp requested.\n" + makeOptionString(Kernel));  }  try {    trainFileString=Utils.getOption('t',options);    if (trainFileString.length() == 0) {      throw new Exception("No training file given!");    }    reader=new BufferedReader(new FileReader(trainFileString));    classIndexString=Utils.getOption('c',options);    if (classIndexString.length() != 0) {      if (classIndexString.equals("first")) {        classIndex=1;      } else       if (classIndexString.equals("last")) {        classIndex=-1;      } else {        classIndex=Integer.parseInt(classIndexString);      }    }    userOptions=options.clone();    if (Kernel instanceof OptionHandler) {      ((OptionHandler)Kernel).setOptions(options);    }    Utils.checkForRemainingOptions(options);  } catch (  Exception e) {    throw new Exception("\nWeka exception: " + e.getMessage() + "\n"+ makeOptionString(Kernel));  }  eval=new KernelEvaluation();  eval.setUserOptions(userOptions);  train=new Instances(reader);  if (classIndex == -1) {    train.setClassIndex(train.numAttributes() - 1);  } else {    train.setClassIndex(classIndex);  }  return eval.evaluate(Kernel,train);}  }
class C{  public TradelogDetailTableModel(){  columnNames=new String[17];  columnNames[0]=DATE;  columnNames[1]=SYMBOL;  columnNames[2]=LONGSHORT;  columnNames[3]=TIER;  columnNames[4]=MARKET_BIAS;  columnNames[5]=MARKET_BAR;  columnNames[6]=STRATEGY;  columnNames[7]=STATUS;  columnNames[8]=SIDE;  columnNames[9]=ACTION;  columnNames[10]=STOP_PRICE;  columnNames[11]=ORDER_STATUS;  columnNames[12]=FILLED_DATE;  columnNames[13]=QUANTITY;  columnNames[14]=AVG_FILL_PRICE;  columnNames[15]=COMMISION;  columnNames[16]=PROFIT_LOSS;}  }
class C{  public EventHandlingAdapter(){  setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  setBounds(100,100,450,300);  contentPane=new JPanel();  setContentPane(contentPane);  contentPane.setLayout(null);  contentPane.add(getNameLbl());  contentPane.add(getNameTxt());  contentPane.add(getOkBtn());  contentPane.add(getStatusTxt());}  }
class C{  public final void add(final GeneratedMessageLite.GeneratedExtension<?,?> extension){  extensionsByNumber.put(new ObjectIntPair(extension.getContainingTypeDefaultInstance(),extension.getNumber()),extension);}  }
class C{  public boolean isEmpty(){  return size == 0;}  }
class C{  private void styleTargetTable(){  setCellStyleGenerator(null);}  }
class C{  public static <T>T splitEachLine(File self,Pattern pattern,String charset,@ClosureParams(value=FromString.class,options={"List<String>","String[]"},conflictResolutionStrategy=PickFirstResolver.class) Closure<T> closure) throws IOException {  return IOGroovyMethods.splitEachLine(newReader(self,charset),pattern,closure);}  }
class C{  public static int computeLazyFieldSizeNoTag(final LazyFieldLite value){  final int size=value.getSerializedSize();  return computeRawVarint32Size(size) + size;}  }
class C{  public void removeChatListener(ChatManagerListener listener){  chatManagerListeners.remove(listener);}  }
class C{  private void changeResolution(boolean faster){  if (faster) {    currentResolution-=5;  } else {    currentResolution+=5;  }  currentResolution=Math.max(currentResolution,0);  currentResolution=Math.min(currentResolution,500);  startTimer(currentResolution);}  }
class C{  public static JSONArray unmodifiableArray(JSONArray array){  return new JSONArray(array,true);}  }
class C{  @Inline private void updateMetaData(Address start,Extent size,int bytes){  if (initialRegion.isZero()) {    initialRegion=start;    region=start;    cursor=region.plus(DATA_START_OFFSET);  } else   if (limit.NE(start) || region.diff(start.plus(size)).toWord().toExtent().GT(maximumRegionSize())) {    setNextRegion(region,start);    setDataEnd(region,cursor);    region=start;    cursor=start.plus(DATA_START_OFFSET);  }  updateLimit(start.plus(size),start,bytes);  setRegionLimit(region,limit);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:05:57.051 -0400",hash_original_method="01B59D12A999EBD2615E20A2CF278F6C",hash_generated_method="3256DA922867DBA5BAF04568FA77CDB8") public void addReferences(Object... references){  getGraphReader().addReferencesByKeysAndValues(references);}  }
class C{  public MaterialTab createTabText(String label_text){  final MaterialTab mattab=new MaterialTab(this.getContext(),new tabBuilder(tabBuilder.layout.TAB_CLASSIC).with(getContext()).initInstance());  mattab.setText(label_text);  return mattab;}  }
class C{  public void removeTabAt(int index){  checkIndex(index);  int act=activeComponent - 1;  act=Math.max(act,0);  setSelectedIndex(act);  Component key=tabsContainer.getComponentAt(index);  tabsContainer.removeComponent(key);  Component content=contentPane.getComponentAt(index);  contentPane.removeComponent(content);  setTabsLayout(tabPlacement);}  }
class C{  public void copyRunningConfigToStartup() throws NetworkDeviceControllerException {  _log.info(MessageFormat.format("Host: {0}, Port: {1} - BEGIN copyRunningConfigToStartup",new Object[]{getSession().getSession().getHost(),getSession().getSession().getPort()}));  if (!inConfigMode) {    throw NetworkDeviceControllerException.exceptions.mdsDeviceNotInConfigMode();  }  if (lastPrompt != SSHPrompt.MDS_CONFIG) {    throw NetworkDeviceControllerException.exceptions.mdsUnexpectedLastPrompt(lastPrompt.toString(),SSHPrompt.MDS_CONFIG.toString());  }  SSHPrompt[] prompts={SSHPrompt.MDS_CONFIG};  StringBuilder buf=new StringBuilder();  String payload=MDSDialogProperties.getString("MDSDialog.copyRunningConfigToStartup.cmd");  lastPrompt=sendWaitFor(payload,defaultTimeout,prompts,buf);  String[] lines=getLines(buf);  _log.info(MessageFormat.format("Host: {0}, Port: {1} - END copyRunningConfigToStartup",new Object[]{getSession().getSession().getHost(),getSession().getSession().getPort()}));}  }
class C{  public void write(byte[] bytes,int start,int length) throws IOException {  flushBits();  if (bytes != null && length > 0) {    out.write(bytes,start,length);    bytesWritten+=length;  }}  }
class C{  @Override protected void onDestroy(){  super.onDestroy();  Log.d(TAG,"onDestroy() - the activity is about to be destroyed");}  }
class C{  public Protocol(){}  }
class C{  private void checkExcludedIP(Set excluded,byte[] ip) throws PKIXNameConstraintValidatorException {  if (excluded.isEmpty()) {    return;  }  Iterator it=excluded.iterator();  while (it.hasNext()) {    byte[] ipWithSubnet=(byte[])it.next();    if (isIPConstrained(ip,ipWithSubnet)) {      throw new PKIXNameConstraintValidatorException("IP is from an excluded subtree.");    }  }}  }
class C{  public AttributeAction(DrawingEditor editor,AttributeKey key,Object value,@Nullable String name){  this(editor,key,value,name,null);}  }
class C{  public void combine(TXCommitMessage other){  assert other != null;  Iterator it=other.regions.iterator();  while (it.hasNext()) {    RegionCommit rc=(RegionCommit)it.next();    if (!this.regions.contains(rc)) {      if (logger.isDebugEnabled()) {        logger.debug("TX: adding region commit: {} to: {}",rc,this);      }      rc.msg=this;      this.regions.add(rc);    }  }}  }
class C{  public static String validateHost(String host){  if (host == null || host.length() == 0) {    return null;  }  try {    InetAddress.getByName(trimLeadingSlash(host));    return host;  } catch (  java.net.UnknownHostException e) {    logStackTrace(e);    return null;  }}  }
class C{  public CTextField(String text,int columns){  super(text,columns);  init();}  }
class C{  public X509Name(Vector oids,Vector values,X509NameEntryConverter converter){  this.converter=converter;  if (oids.size() != values.size()) {    throw new IllegalArgumentException("oids vector must be same length as values.");  }  for (int i=0; i < oids.size(); i++) {    this.ordering.addElement(oids.elementAt(i));    this.values.addElement(values.elementAt(i));    this.added.addElement(FALSE);  }}  }
class C{  public Results reconcile(NetworkSystem network,Iterator<FCEndpoint> iEndPoints,Map<String,String> fabricIdsMap,List<Network> oldTransportZones) throws Exception {  HashMap<String,Network> newTransportZones=getNewTransportZones(network,iEndPoints,fabricIdsMap);  _log.info("Reconciling {} new networks with " + "the existing {} networks",newTransportZones.size(),oldTransportZones.size());  List<String> existingTransportZoneNames=new ArrayList<String>();  HashMap<String,Network> mutableMap=new HashMap<String,Network>(newTransportZones);  Results results=new Results();  for (  Network transportZone : oldTransportZones) {    existingTransportZoneNames.add(transportZone.getLabel());    if (transportZone.getDiscovered() == true) {      String fabricWwn=parseWWNFromGuid(transportZone.getNativeGuid());      if (newTransportZones.containsKey(fabricWwn)) {        _log.info("Checking if existing network {} " + " needs updating.",transportZone.getLabel());        handleUpdatedTransportZone(network,transportZone,newTransportZones.get(fabricWwn),results);        mutableMap.remove(fabricWwn);      } else       if (transportZone.getNetworkSystems().contains(network.getId().toString())) {        _log.info("Existing network is not found." + " Checking if it is removed or modified",transportZone.getLabel());        Network newTZ=handleRemovedTransportZone(transportZone,network.getId(),newTransportZones,oldTransportZones,results);        if (newTZ != null) {          mutableMap.remove(NetworkUtil.getNetworkWwn(newTZ));        }      }    }  }  for (  String wwn : mutableMap.keySet()) {    Network newTZ=mutableMap.get(wwn);    newTZ.setLabel(getUniqueTransportZoneName(newTZ.getLabel(),existingTransportZoneNames));    results.getAdded().add(newTZ);  }  return results;}  }
class C{  public DateMidnight toDateMidnight(){  return toDateMidnight(null);}  }
class C{  public int compareTo(Object that){  CharacterReference r;  r=(CharacterReference)that;  return (getKernel().compareTo(r.getKernel()));}  }
class C{  public void writeParam(String name,String value) throws IOException {  startTag(PARAM);  writeAttr(NAME,name);  writeAttr(VALUE,value);}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public void cascadeDiscoverAndPersistUnregisteredNewObjects(Object object,Map newObjects,Map unregisteredExistingObjects,Map visitedObjects,UnitOfWorkImpl uow,boolean getAttributeValueFromObject,Set cascadeErrors){  ObjectBuilder builder=getReferenceDescriptor(object.getClass(),uow).getObjectBuilder();  builder.cascadeDiscoverAndPersistUnregisteredNewObjects(object,newObjects,unregisteredExistingObjects,visitedObjects,uow,cascadeErrors);}  }
class C{  public CActionCreateCommentNode(final JFrame parent,final INaviView view,final INaviViewNode node){  super("Create Comment Node");  m_node=Preconditions.checkNotNull(node,"IE00923: Node argument can not be null");  m_parent=Preconditions.checkNotNull(parent,"IE02363: Parent argument can not be null");  m_view=Preconditions.checkNotNull(view,"IE02364: View argument can not be null");}  }
class C{  public int rt_priority(){  return Integer.parseInt(fields[39]);}  }
class C{  public AbstractDdlBuilder(String databaseName){  this.databaseName=databaseName;  addEscapedCharSequence("'","''");}  }
class C{  private void convertInstance(Instance instance){  Instance inst=null;  if (instance instanceof SparseInstance) {    double[] newVals=new double[instance.numAttributes()];    int[] newIndices=new int[instance.numAttributes()];    double[] vals=instance.toDoubleArray();    int ind=0;    for (int j=0; j < instance.numAttributes(); j++) {      double value;      if (instance.attribute(j).isNumeric() && (!Utils.isMissingValue(vals[j])) && (getInputFormat().classIndex() != j)) {        value=vals[j] - m_Means[j];        if (value != 0.0) {          newVals[ind]=value;          newIndices[ind]=j;          ind++;        }      } else {        value=vals[j];        if (value != 0.0) {          newVals[ind]=value;          newIndices[ind]=j;          ind++;        }      }    }    double[] tempVals=new double[ind];    int[] tempInd=new int[ind];    System.arraycopy(newVals,0,tempVals,0,ind);    System.arraycopy(newIndices,0,tempInd,0,ind);    inst=new SparseInstance(instance.weight(),tempVals,tempInd,instance.numAttributes());  } else {    double[] vals=instance.toDoubleArray();    for (int j=0; j < getInputFormat().numAttributes(); j++) {      if (instance.attribute(j).isNumeric() && (!Utils.isMissingValue(vals[j])) && (getInputFormat().classIndex() != j)) {        vals[j]=(vals[j] - m_Means[j]);      }    }    inst=new DenseInstance(instance.weight(),vals);  }  inst.setDataset(instance.dataset());  push(inst);}  }
class C{  private int addGeneratedAttribute(AttributeWeightedExampleSet exampleSet) throws OperatorException {  int counter=0;  for (int k=0; k < numberOfConstructed; k++) {    if (random.nextDouble() < p) {      FeatureGenerator generator=FeatureGenerator.selectGenerator(exampleSet,generators,unusableFunctions,random);      if (generator != null) {        generator=generator.newInstance();        Attribute[] args=Tools.getRandomCompatibleAttributes(exampleSet,generator,unusableFunctions,random);        generator.setArguments(args);        List<FeatureGenerator> generatorList=new LinkedList<FeatureGenerator>();        generatorList.add(generator);        List<Attribute> newAttributes=FeatureGenerator.generateAll(exampleSet.getExampleTable(),generatorList);        for (        Attribute newAttribute : newAttributes) {          exampleSet.getAttributes().addRegular(newAttribute);        }        counter+=newAttributes.size();        Iterator<Attribute> i=newAttributes.iterator();        List<AttributePeak> sinAttributes=new LinkedList<AttributePeak>();        Attribute label=exampleSet.getAttributes().getLabel();        while (i.hasNext()) {          Attribute current=i.next();          if (current.isNumerical() && (current.getConstruction().indexOf("sin") == -1)) {            List<AttributePeak> peaks=factory.getAttributePeaks(exampleSet,label,current);            sinAttributes.addAll(peaks);          }        }        if (sinAttributes.size() > 0) {          factory.generateSinusFunctions(exampleSet,sinAttributes,random);        }        counter+=sinAttributes.size();      }    }  }  return counter;}  }
class C{  public static long[] orI(long[] v,long[] o){  assert (o.length <= v.length) : "Bit set sizes do not agree.";  final int max=Math.min(v.length,o.length);  for (int i=0; i < max; i++) {    v[i]|=o[i];  }  return v;}  }
class C{  public void addContextGenerator(ContextGenerator cntxGen){  cntxGenVector.add(cntxGen);}  }
class C{  void fire(){  final IGame game=clientgui.getClient().getGame();  final int weaponNum=clientgui.mechD.wPan.getSelectedWeaponNum();  Mounted mounted=ce().getEquipment(weaponNum);  if ((ce() == null) || (mounted == null) || !(mounted.getType() instanceof WeaponType)) {    throw new IllegalArgumentException("current fire parameters are invalid");  }  if (GUIPreferences.getInstance().getAutoDeclareSearchlight() && ce().isUsingSpotlight()) {    doSearchlight();  }  WeaponAttackAction waa;  if (!mounted.getType().hasFlag(WeaponType.F_ARTILLERY)) {    waa=new WeaponAttackAction(cen,target.getTargetType(),target.getTargetId(),weaponNum);  } else {    waa=new ArtilleryAttackAction(cen,target.getTargetType(),target.getTargetId(),weaponNum,game);  }  if ((mounted.getLinked() != null) && (((WeaponType)mounted.getType()).getAmmoType() != AmmoType.T_NA) && (mounted.getLinked().getType() instanceof AmmoType)) {    Mounted ammoMount=mounted.getLinked();    AmmoType ammoType=(AmmoType)ammoMount.getType();    waa.setAmmoId(ce().getEquipmentNum(ammoMount));    if (((ammoType.getMunitionType() == AmmoType.M_THUNDER_VIBRABOMB) && ((ammoType.getAmmoType() == AmmoType.T_LRM) || (ammoType.getAmmoType() == AmmoType.T_MML))) || (ammoType.getMunitionType() == AmmoType.M_VIBRABOMB_IV)) {      VibrabombSettingDialog vsd=new VibrabombSettingDialog(clientgui.frame);      vsd.setVisible(true);      waa.setOtherAttackInfo(vsd.getSetting());    }  }  if (ash.allowAimedShotWith(mounted) && ash.inAimingMode() && ash.isAimingAtLocation()) {    waa.setAimedLocation(ash.getAimingAt());    waa.setAimingMode(ash.getAimingMode());  } else {    waa.setAimedLocation(Entity.LOC_NONE);    waa.setAimingMode(IAimingModes.AIM_MODE_NONE);  }  waa.setPointblankShot(true);  attacks.addElement(waa);  game.addAction(waa);  clientgui.minimap.drawMap();  mounted.setUsedThisRound(true);  int nextWeapon=clientgui.mechD.wPan.getNextWeaponNum();  if ((nextWeapon == -1) && GUIPreferences.getInstance().getAutoEndFiring()) {    ready();    return;  }  clientgui.mechD.wPan.displayMech(ce());  Mounted nextMounted=ce().getEquipment(nextWeapon);  if (!mounted.getType().hasFlag(WeaponType.F_VGL) && (nextMounted != null) && nextMounted.getType().hasFlag(WeaponType.F_VGL)) {    clientgui.mechD.wPan.setPrevTarget(target);  }  clientgui.mechD.wPan.selectWeapon(nextWeapon);  updateTarget();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case MappingPackage.MAPPING_RULE__TARGET:    return target != null;case MappingPackage.MAPPING_RULE__SOURCES:  return sources != null && !sources.isEmpty();}return super.eIsSet(featureID);}  }
class C{  protected void addServiceMetrics(){  addServiceInfoMetrics();  addServiceCPUMetrics();  addServiceMemoryMetrics();  addServiceDiskMetrics();}  }
class C{  public Collection<File> processArgs(String[] flags){  return processArgs(flags,null);}  }
class C{  public boolean isInRange(float value,float min,float max){  return FLOAT_VALIDATOR.isInRange(value,min,max);}  }
class C{  public boolean usesRelevance(){  return !query.isEmpty();}  }
class C{  private void validateState(State current){  ValidationUtils.validateState(current);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:27.377 -0500",hash_original_method="557595D78AF878757FA1B104BCD5B60F",hash_generated_method="E8CCDADFADCBC5BEA7486B573F3A1A3F") @Override public void run(){  Collections.sort(files);  for (int i=files.size() - 1; i >= 0; i--) {    new File(files.get(i)).delete();  }}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  protected void drawConnector(List<mxPoint> pts,float penWidth,Color penColor,Object startMarker,float startSize,Object endMarker,float endSize,boolean rounded,Map<String,Object> style){  g.setStroke(new BasicStroke((float)(penWidth * scale)));  g.setColor(penColor);  mxPoint p0=pts.get(0);  mxPoint pt=pts.get(1);  mxPoint offset=null;  if (startMarker != null) {    offset=drawMarker(startMarker,pt,p0,startSize,penWidth);  } else {    double dx=pt.getX() - p0.getX();    double dy=pt.getY() - p0.getY();    double dist=Math.max(1,Math.sqrt(dx * dx + dy * dy));    double nx=dx * penWidth * scale / dist;    double ny=dy * penWidth * scale / dist;    offset=new mxPoint(nx / 2,ny / 2);  }  if (offset != null) {    p0=(mxPoint)p0.clone();    p0.setX(p0.getX() + offset.getX());    p0.setY(p0.getY() + offset.getY());    offset=null;  }  mxPoint pe=pts.get(pts.size() - 1);  pt=pts.get(pts.size() - 2);  if (endMarker != null) {    offset=drawMarker(endMarker,pt,pe,endSize,penWidth);  } else {    double dx=pt.getX() - p0.getX();    double dy=pt.getY() - p0.getY();    double dist=Math.max(1,Math.sqrt(dx * dx + dy * dy));    double nx=dx * penWidth * scale / dist;    double ny=dy * penWidth * scale / dist;    offset=new mxPoint(nx / 2,ny / 2);  }  if (offset != null) {    pe=(mxPoint)pe.clone();    pe.setX(pe.getX() + offset.getX());    pe.setY(pe.getY() + offset.getY());    offset=null;  }  setStroke(penWidth,style);  double arcSize=mxConstants.LINE_ARCSIZE * scale;  pt=p0;  for (int i=1; i < pts.size() - 1; i++) {    mxPoint tmp=pts.get(i);    double dx=pt.getX() - tmp.getX();    double dy=pt.getY() - tmp.getY();    if ((rounded && i < pts.size() - 1) && (dx != 0 || dy != 0) && scale > 0.05) {      double dist=Math.sqrt(dx * dx + dy * dy);      double nx1=dx * Math.min(arcSize,dist / 2) / dist;      double ny1=dy * Math.min(arcSize,dist / 2) / dist;      drawLine((int)Math.round(pt.getX()),(int)Math.round(pt.getY()),(int)Math.round(tmp.getX() + nx1),(int)Math.round(tmp.getY() + ny1));      mxPoint next=pts.get(i + 1);      dx=next.getX() - tmp.getX();      dy=next.getY() - tmp.getY();      dist=Math.max(1,Math.sqrt(dx * dx + dy * dy));      double nx2=dx * Math.min(arcSize,dist / 2) / dist;      double ny2=dy * Math.min(arcSize,dist / 2) / dist;      QuadCurve2D.Float curve=new QuadCurve2D.Float((int)Math.round(tmp.getX() + nx1),(int)Math.round(tmp.getY() + ny1),(int)Math.round(tmp.getX()),(int)Math.round(tmp.getY()),(int)Math.round(tmp.getX() + nx2),(int)Math.round(tmp.getY() + ny2));      Rectangle bounds=curve.getBounds();      int sw=(int)Math.ceil(penWidth * scale);      bounds.grow(sw,sw);      if (g.getClipBounds() == null || g.getClipBounds().intersects(bounds)) {        g.draw(curve);      }      tmp=new mxPoint(tmp.getX() + nx2,tmp.getY() + ny2);    } else {      drawLine((int)Math.round(pt.getX()),(int)Math.round(pt.getY()),(int)Math.round(tmp.getX()),(int)Math.round(tmp.getY()));    }    pt=tmp;  }  drawLine((int)Math.round(pt.getX()),(int)Math.round(pt.getY()),(int)Math.round(pe.getX()),(int)Math.round(pe.getY()));}  }
class C{  @SneakyThrows public KeyStore loadKeystore(String certResourceLocation,String privateKeyResourceLocation,String alias,String keyPassword){  KeyStore keystore=createEmptyKeystore();  X509Certificate cert=loadCert(certResourceLocation);  RSAPrivateKey privateKey=loadPrivateKey(privateKeyResourceLocation);  addKeyToKeystore(keystore,cert,privateKey,alias,keyPassword);  return keystore;}  }
class C{  public com.emc.storageos.vasa.VasaServiceStub.QueryAssociatedCapabilityForLunResponse queryAssociatedCapabilityForLun(com.emc.storageos.vasa.VasaServiceStub.QueryAssociatedCapabilityForLun queryAssociatedCapabilityForLun25) throws java.rmi.RemoteException, com.emc.storageos.vasa.NotImplemented, com.emc.storageos.vasa.InvalidArgument, com.emc.storageos.vasa.InvalidSession, com.emc.storageos.vasa.StorageFault {  org.apache.axis2.context.MessageContext _messageContext=null;  try {    org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[12].getName());    _operationClient.getOptions().setAction("urn:queryAssociatedCapabilityForLun");    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);    addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");    _messageContext=new org.apache.axis2.context.MessageContext();    org.apache.axiom.soap.SOAPEnvelope env=null;    env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),queryAssociatedCapabilityForLun25,optimizeContent(new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/","queryAssociatedCapabilityForLun")));    _serviceClient.addHeadersToEnvelope(env);    _messageContext.setEnvelope(env);    _operationClient.addMessageContext(_messageContext);    _operationClient.execute(true);    org.apache.axis2.context.MessageContext _returnMessageContext=_operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);    org.apache.axiom.soap.SOAPEnvelope _returnEnv=_returnMessageContext.getEnvelope();    java.lang.Object object=fromOM(_returnEnv.getBody().getFirstElement(),com.emc.storageos.vasa.VasaServiceStub.QueryAssociatedCapabilityForLunResponse.class,getEnvelopeNamespaces(_returnEnv));    return (com.emc.storageos.vasa.VasaServiceStub.QueryAssociatedCapabilityForLunResponse)object;  } catch (  org.apache.axis2.AxisFault f) {    org.apache.axiom.om.OMElement faultElt=f.getDetail();    if (faultElt != null) {      if (faultExceptionNameMap.containsKey(faultElt.getQName())) {        try {          java.lang.String exceptionClassName=(java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());          java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);          java.lang.Exception ex=(java.lang.Exception)exceptionClass.newInstance();          java.lang.String messageClassName=(java.lang.String)faultMessageMap.get(faultElt.getQName());          java.lang.Class messageClass=java.lang.Class.forName(messageClassName);          java.lang.Object messageObject=fromOM(faultElt,messageClass,null);          java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});          m.invoke(ex,new java.lang.Object[]{messageObject});          if (ex instanceof com.emc.storageos.vasa.NotImplemented) {            throw (com.emc.storageos.vasa.NotImplemented)ex;          }          if (ex instanceof com.emc.storageos.vasa.InvalidArgument) {            throw (com.emc.storageos.vasa.InvalidArgument)ex;          }          if (ex instanceof com.emc.storageos.vasa.InvalidSession) {            throw (com.emc.storageos.vasa.InvalidSession)ex;          }          if (ex instanceof com.emc.storageos.vasa.StorageFault) {            throw (com.emc.storageos.vasa.StorageFault)ex;          }          throw new java.rmi.RemoteException(ex.getMessage(),ex);        } catch (        java.lang.ClassCastException e) {          throw f;        }catch (        java.lang.ClassNotFoundException e) {          throw f;        }catch (        java.lang.NoSuchMethodException e) {          throw f;        }catch (        java.lang.reflect.InvocationTargetException e) {          throw f;        }catch (        java.lang.IllegalAccessException e) {          throw f;        }catch (        java.lang.InstantiationException e) {          throw f;        }      } else {        throw f;      }    } else {      throw f;    }  } finally {    _messageContext.getTransportOut().getSender().cleanup(_messageContext);  }}  }
class C{  @Override public void transactionAborted(){  close();}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public Map<Integer,TestTable1> selectByExampleToMap(Example example){  List<TestTable1> list=super.selectByExample(example);  Map<Integer,TestTable1> m=new LinkedHashMap<Integer,TestTable1>();  for (  TestTable1 x : list) {    m.put(x.getId(),x);  }  return m;}  }
class C{  @Override public void exportGroupCreate(URI export,Map<URI,Integer> volumeMap,List<URI> initiatorURIs,String opId) throws ControllerException {  ExportTaskCompleter taskCompleter=new ExportCreateCompleter(export,volumeMap,opId);  Workflow workflow=null;  try {    StringSetUtil.removeDuplicates(initiatorURIs);    workflow=_wfUtils.newWorkflow("exportGroupCreate",false,opId);    ExportGroup exportGroup=_dbClient.queryObject(ExportGroup.class,export);    Map<URI,Map<URI,Integer>> storageToVolumes=getStorageToVolumeMap(volumeMap);    for (    Map.Entry<URI,Map<URI,Integer>> entry : storageToVolumes.entrySet()) {      List<String> lockKeys=ControllerLockingUtil.getHostStorageLockKeys(_dbClient,ExportGroup.ExportGroupType.valueOf(exportGroup.getType()),initiatorURIs,entry.getKey());      boolean acquiredLocks=_wfUtils.getWorkflowService().acquireWorkflowLocks(workflow,lockKeys,LockTimeoutValue.get(LockType.EXPORT_GROUP_OPS));      if (!acquiredLocks) {        throw DeviceControllerException.exceptions.failedToAcquireLock(lockKeys.toString(),"ExportGroupCreate: " + exportGroup.getLabel());      }      _wfUtils.generateExportGroupCreateWorkflow(workflow,null,null,entry.getKey(),export,entry.getValue(),initiatorURIs);    }    workflow.executePlan(taskCompleter,"Exported to all devices successfully.");  } catch (  Exception ex) {    String message="exportGroupCreate caught an exception.";    _log.error(message,ex);    _wfUtils.getWorkflowService().releaseAllWorkflowLocks(workflow);    ServiceError serviceError=DeviceControllerException.errors.jobFailed(ex);    taskCompleter.error(_dbClient,serviceError);  }}  }
class C{  public void drawingComplete(OMGraphic omg,OMAction action){  if (timerButton.isSelected()) {    timer.restart();  }  if (omg instanceof OMPoint) {    OMPoint p=(OMPoint)omg;    Pilot mp=new Pilot(p.getLat(),p.getLon(),p.getRadius(),true);    mp.setName("Added Node " + (pointCount++));    mp.setStationary(true);    mp.showPalette();    points.put(mp.getName(),mp);    manageGraphics();  } else   if (omg instanceof OMPoly) {    OMPoly poly=(OMPoly)omg;    PilotPath pmp=new PilotPath(poly,5,true);    pmp.setName("Added Node " + (pointCount++));    pmp.setStationary(true);    pmp.showPalette();    points.put(pmp.getName(),pmp);    pmp.setMapHandler((MapHandler)getBeanContext());    manageGraphics();  }  addPathButton.setEnabled(true);}  }
class C{  private File createNewFormat(int AD_Table_ID,HttpServletRequest request,GridTab m_curTab,MQuery m_query){  WebSessionCtx wsc=WebSessionCtx.get(request);  MPrintFormat pf=MPrintFormat.createFromTable(wsc.ctx,AD_Table_ID);  File file=launchReport(pf,request,m_curTab,m_query);  return file;}  }
class C{  protected Expression arg(int opPos) throws TransformerException {  return compile(opPos + 2);}  }
class C{  private int initialAssignToNearestCluster(Relation<V> relation,double[][] means,double[][] sums,List<ModifiableDBIDs> clusters,WritableIntegerDataStore assignment,WritableDoubleDataStore upper,WritableDataStore<double[]> lower){  assert (k == means.length);  final NumberVectorDistanceFunction<? super V> df=getDistanceFunction();  final boolean issquared=(df instanceof SquaredEuclideanDistanceFunction);  for (DBIDIter it=relation.iterDBIDs(); it.valid(); it.advance()) {    V fv=relation.get(it);    double[] l=lower.get(it);    double best=Double.POSITIVE_INFINITY;    int cur=-1;    for (int j=0; j < k; j++) {      double dist=df.distance(fv,DoubleVector.wrap(means[j]));      dist=issquared ? Math.sqrt(dist) : dist;      l[j]=dist;      if (dist < best) {        cur=j;        best=dist;      }    }    ModifiableDBIDs newc=clusters.get(cur);    newc.add(it);    assignment.putInt(it,cur);    upper.putDouble(it,best);    double[] newmean=sums[cur];    for (int d=0; d < fv.getDimensionality(); d++) {      newmean[d]+=fv.doubleValue(d);    }  }  return relation.size();}  }
class C{  public CatalogSearchBuilder segments(String... segments){  for (  String segment : segments) {    if (segment != null && !segment.equals("")) {      this.segments.add(segment);    }  }  return this;}  }
class C{  public boolean hasCalendarLinks(){  return hasRepeatingExtension(CalendarLink.class);}  }
class C{  private void doubleCapacity(){  int p=head;  int n=elements.length;  int r=n - p;  int newCapacity=n << 1;  if (newCapacity < 0)   throw new IllegalStateException("Sorry, deque too big");  Object[] a=new Object[newCapacity];  System.arraycopy(elements,p,a,0,r);  System.arraycopy(elements,0,a,r,p);  elements=a;  head=0;  tail=n;}  }
class C{  public static @CheckForNull BugCollectionAndInstance findBugCollectionAndInstanceForMarker(IMarker marker){  IResource resource=marker.getResource();  IProject project=resource.getProject();  if (project == null) {    FindbugsPlugin.getDefault().logError("No project for warning marker");    return null;  }  if (!isFindBugsMarker(marker)) {    return null;  }  String bugId=marker.getAttribute(FindBugsMarker.UNIQUE_ID,null);  if (bugId == null) {    FindbugsPlugin.getDefault().logError("Marker does not contain unique id for warning");    return null;  }  try {    BugCollection bugCollection=FindbugsPlugin.getBugCollection(project,null);    if (bugCollection == null) {      FindbugsPlugin.getDefault().logError("Could not get BugCollection for FindBugs marker");      return null;    }    String bugType=(String)marker.getAttribute(FindBugsMarker.BUG_TYPE);    Integer primaryLineNumber=(Integer)marker.getAttribute(FindBugsMarker.PRIMARY_LINE);    if (primaryLineNumber == null) {      primaryLineNumber=Integer.valueOf(getEditorLine(marker));    }    if (bugType == null) {      FindbugsPlugin.getDefault().logError("Could not get find attributes for marker " + marker + ": ("+ bugId+ ", "+ primaryLineNumber+ ")");      return null;    }    BugInstance bug=bugCollection.findBug(bugId,bugType,primaryLineNumber.intValue());    if (bug == null) {      FindbugsPlugin.getDefault().logError("Could not get find bug for marker on " + resource + ": ("+ bugId+ ", "+ primaryLineNumber+ ")");      return null;    }    return new BugCollectionAndInstance(bugCollection,bug);  } catch (  CoreException e) {    FindbugsPlugin.getDefault().logException(e,"Could not get BugInstance for FindBugs marker");    return null;  }}  }
class C{  @Override public Double put(V key,Double value){  return wrapValue(_map.put(unwrapKey(key),unwrapValue(value)));}  }
class C{  @Override public void nodeDown(long eventUID,String nodeID){  try {    lock.lock();    untriedConnectors.putAll(triedConnectors);    triedConnectors.clear();    if (untriedConnectors.size() > 0) {      condition.signal();    }  }  finally {    lock.unlock();  }}  }
class C{  public static Reader reader(String uri) throws IOException {  return utf8(inputStream(uri));}  }
class C{  @Produce(thread=EventThread.NEW_THREAD,tags={@Tag}) public String tell(){  return "Ohh, you have so many mouses!! On " + Thread.currentThread();}  }
class C{  public Builder deleteMember(String memberId){  MemberRef deleteGroup=new MemberRef.Builder().setValue(memberId).setOperation(DELETE).build();  members.add(deleteGroup);  return this;}  }
class C{  public void add() throws IOException {  print("add",null);}  }
class C{  private void markDeadEnds(final Network network){  long now=System.currentTimeMillis();  this.nodeData=new ConcurrentHashMap<Node,DeadEndData>(network.getNodes().size());  DeadEndData deadEndData;  for (  Node node : network.getNodes().values()) {    deadEndData=getNodeData(node);    Map<Id<Node>,Node> incidentNodes=getIncidentNodes(node);    if (incidentNodes.size() == 1) {      ArrayList<Node> deadEndNodes=new ArrayList<Node>();      while (deadEndData.getInDeadEndCount() == incidentNodes.size() - 1) {        deadEndNodes.add(node);        deadEndNodes.addAll(deadEndData.getDeadEndNodes());        deadEndData.getDeadEndNodes().clear();        deadEndData.setDeadEndEntryNode(node);        Iterator<? extends Node> it=incidentNodes.values().iterator();        while (deadEndData.getDeadEndEntryNode() != null && it.hasNext()) {          node=it.next();          deadEndData=getNodeData(node);        }        if (deadEndData.getDeadEndEntryNode() == null) {          deadEndData.incrementInDeadEndCount();          incidentNodes=getIncidentNodes(node);        } else {          log.error("All " + incidentNodes.size() + " incident nodes of node "+ node.getId()+ " are dead ends!");          return;        }      }      deadEndData.getDeadEndNodes().addAll(deadEndNodes);    }  }  int deadEndNodeCount=0;  for (  Node node : network.getNodes().values()) {    deadEndData=getNodeData(node);    for (    Node n : deadEndData.getDeadEndNodes()) {      DeadEndData r=getNodeData(n);      r.setDeadEndEntryNode(node);      deadEndNodeCount++;    }    deadEndData.getDeadEndNodes().clear();  }  log.info("nodes in dead ends: " + deadEndNodeCount + " (total nodes: "+ network.getNodes().size()+ "). Done in "+ (System.currentTimeMillis() - now)+ " ms");}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public JSONObject accumulate(String key,Object value) throws JSONException {  testValidity(value);  Object object=this.opt(key);  if (object == null) {    this.put(key,value instanceof JSONArray ? new JSONArray().put(value) : value);  } else   if (object instanceof JSONArray) {    ((JSONArray)object).put(value);  } else {    this.put(key,new JSONArray().put(object).put(value));  }  return this;}  }
class C{  @Override public int hashCode(){  return dateTime.hashCode() ^ offset.hashCode() ^ Integer.rotateLeft(zone.hashCode(),3);}  }
class C{  public static void clearLabels(Instance x){  int L=x.classIndex();  for (int j=0; j < L; j++)   x.setValue(j,0.0);}  }
class C{  protected boolean inspectAndReplaceCalls(Chain<Unit> units,AssignStmt stmt,InvokeExpr expr){  Jimple jv=Jimple.v();  Scene sv=Scene.v();  SootMethodRef smr=expr.getMethodRef();  if (!smr.getSignature().equals("<android.net.Uri: android.net.Uri parse(java.lang.String)>"))   return (false);  Local var=(Local)stmt.getLeftOp();  RefType type=RefType.v("android.net.Uri");  Value alloc_expr=jv.newNewExpr(type);  AssignStmt alloc_stmt=jv.newAssignStmt(var,alloc_expr);  SootMethod uri_init_sm=sv.getMethod("<android.net.Uri: void <init>(java.lang.String)>");  Value uri_str_arg=expr.getArgs().get(0);  SpecialInvokeExpr uri_init_sie=jv.newSpecialInvokeExpr(var,uri_init_sm.makeRef(),uri_str_arg);  InvokeStmt uri_init_stmt=jv.newInvokeStmt(uri_init_sie);  units.insertBefore(alloc_stmt,stmt);  units.insertBefore(uri_init_stmt,stmt);  units.remove(stmt);  return (true);}  }
class C{  public static byte[] digest(final DigestAlgorithm digestAlgorithm,final byte[] data) throws DSSException {  final MessageDigest messageDigest=getMessageDigest(digestAlgorithm);  final byte[] digestValue=messageDigest.digest(data);  return digestValue;}  }
class C{  public AuthorityKeyIdentifierStructure(X509Certificate certificate) throws CertificateParsingException {  super(fromCertificate(certificate));}  }
class C{  public void update(byte[] b){  digest.update(b);}  }
class C{  public Dummy(Atom a){  el=a;}  }
class C{  public static MaskType parseMaskType(FXGNode node,String value,String name,MaskType defaultValue){  if (FXG_MASK_CLIP_VALUE.equals(value)) {    return MaskType.CLIP;  } else   if (FXG_MASK_ALPHA_VALUE.equals(value)) {    return MaskType.ALPHA;  } else   if (((AbstractFXGNode)node).getFileVersion().equalTo(FXGVersion.v1_0)) {    throw new FXGException(node.getStartLine(),node.getStartColumn(),"UnknownMaskType",value);  } else   if (FXG_MASK_LUMINOSITY_VALUE.equals(value)) {    return MaskType.LUMINOSITY;  } else {    if (((AbstractFXGNode)node).isVersionGreaterThanCompiler()) {      FXGLog.getLogger().log(FXGLogger.WARN,"DefaultAttributeValue",null,((AbstractFXGNode)node).getDocumentName(),node.getStartLine(),node.getStartColumn(),defaultValue,name);      return defaultValue;    } else {      throw new FXGException(node.getStartLine(),node.getStartColumn(),"UnknownMaskType",value);    }  }}  }
class C{  public static void notFoundException(Exception e){  throw new MappingException(e.getMessage());}  }
class C{  private void ingestBackendVolumes(IngestionRequestContext requestContext,VplexVolumeIngestionContext backendRequestContext) throws IngestionException {  while (backendRequestContext.hasNext()) {    UnManagedVolume associatedVolume=backendRequestContext.next();    String sourceClusterId=getClusterNameForVarray(backendRequestContext.getVarray(associatedVolume),requestContext.getStorageSystem());    String haClusterId=getClusterNameForVarray(backendRequestContext.getHaVarray(associatedVolume),requestContext.getStorageSystem());    _logger.info("the source cluster id is {} and the high availability cluster id is {}",sourceClusterId,haClusterId);    backendRequestContext.setHaClusterId(haClusterId);    _logger.info("Ingestion started for vplex backend volume {}",associatedVolume.getNativeGuid());    try {      validateBackendVolumeVpool(associatedVolume,backendRequestContext.getVpool(associatedVolume));      IngestStrategy ingestStrategy=ingestStrategyFactory.buildIngestStrategy(associatedVolume,IngestStrategyFactory.DISREGARD_PROTECTION);      @SuppressWarnings("unchecked") BlockObject blockObject=ingestStrategy.ingestBlockObjects(backendRequestContext,VolumeIngestionUtil.getBlockObjectClass(associatedVolume));      if (null == blockObject) {        throw IngestionException.exceptions.generalVolumeException(associatedVolume.getLabel(),"check the logs for more details");      }      Map<String,BlockObject> createdObjectMap=backendRequestContext.getBlockObjectsToBeCreatedMap();      String blockObjectNativeGuid=blockObject.getNativeGuid();      if (createdObjectMap.containsKey(blockObjectNativeGuid)) {        BlockObject createdBlockObject=createdObjectMap.get(blockObjectNativeGuid);        if (createdBlockObject instanceof BlockSnapshot) {          _logger.info("Backend ingestion created block snapshot {}",blockObjectNativeGuid);          ((BlockSnapshot)createdBlockObject).setProject(new NamedURI(backendRequestContext.getFrontendProject().getId(),createdBlockObject.getLabel()));          backendRequestContext.getCreatedSnapshotMap().put(blockObjectNativeGuid,(BlockSnapshot)createdBlockObject);          createdObjectMap.put(blockObjectNativeGuid,blockObject);        } else {          _logger.warn("Unexpected object in created objects list during backend ingestion {}:{}",blockObjectNativeGuid,createdBlockObject.getLabel());        }      } else {        createdObjectMap.put(blockObjectNativeGuid,blockObject);      }      backendRequestContext.getProcessedUnManagedVolumeMap().put(associatedVolume.getNativeGuid(),backendRequestContext.getVolumeContext());      _logger.info("Ingestion ended for backend volume {}",associatedVolume.getNativeGuid());    } catch (    Exception ex) {      _logger.error(ex.getLocalizedMessage());      backendRequestContext.rollback();      throw ex;    }  }}  }
class C{  public ClientCertificateTypeExtension(boolean isClient){  super(ExtensionType.CLIENT_CERT_TYPE,isClient);}  }
class C{  public <T>PushableLazyFutureStream<T> futureStream(final LazyReact s){  final Queue<T> q=createQueue();  return new PushableLazyFutureStream<T>(q,s.fromStream(q.stream()));}  }
class C{  public IsilonXMLApiResult executeSsh(String command,String request){  IsilonXMLApiResult result=new IsilonXMLApiResult();  if ((_host == null) || (_userName == null) || (_password == null)) {    _log.error("Invalid connection parameter");    result.setCommandFailed();    return result;  }  String cmd="isi " + command + " "+ request;  _log.info("executeSsh: cmd: " + cmd);  InputStream in=null;  Session session=null;  Channel channel=null;  try {    java.util.Properties config=new java.util.Properties();    config.put("StrictHostKeyChecking","no");    JSch jsch=new JSch();    session=jsch.getSession(_userName,_host,DEFAULT_PORT);    session.setPassword(_password);    session.setConfig(config);    session.connect();    channel=session.openChannel("exec");    ((ChannelExec)channel).setCommand(cmd);    channel.setInputStream(null);    in=channel.getInputStream();    channel.connect();    byte[] tmp=new byte[BUFFER_SIZE];    StringBuilder cmdResults=new StringBuilder();    while (true) {      while (in.available() > 0) {        int i=in.read(tmp,0,BUFFER_SIZE);        if (i < 0)         break;        cmdResults.append(new String(tmp,0,i));      }      if (channel.isClosed()) {        _log.info("Ssh exit status: " + channel.getExitStatus());        result.setMessage(cmdResults.toString());        if (channel.getExitStatus() == 0) {          StringTokenizer st=new StringTokenizer(cmdResults.toString());          if (st.hasMoreTokens()) {            st.nextToken();          }          String res="";          if (st.hasMoreTokens()) {            res=st.nextToken();          }          if (res.equalsIgnoreCase("done")) {            result.setCommandSuccess();          } else           if (res.equalsIgnoreCase("error")) {            result.setCommandFailed();          } else {            result.setCommandSuccess();          }        } else {          result.setCommandFailed();        }        break;      }      try {        Thread.sleep(_respDelay);      } catch (      InterruptedException e) {        _log.error("VNX File executeSsh Communication thread interrupted for command: " + cmd,e);      }    }    _log.info("executeSsh: Done");  } catch (  Exception e) {    _log.error("VNX File executeSsh connection failed while attempting to execute: " + cmd,e);    result.setCommandFailed();    result.setMessage(e.getMessage());  } finally {    if (in != null) {      try {        in.close();      } catch (      IOException ignored) {      }    }    if (channel != null) {      channel.disconnect();    }    if (session != null) {      session.disconnect();    }  }  return result;}  }
class C{  public boolean hasArchiveFailures(){  return hasRepeatingExtension(ArchiveFailure.class);}  }
class C{  public void testRegisterListeners(){}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return new XNumber(Math.ceil(m_arg0.execute(xctxt).num()));}  }
class C{  public static String unicodeToHexString(final String unicodeString){  Preconditions.checkNotNull(unicodeString,"Error: Unicode string can't be null");  final StringBuffer sb=new StringBuffer();  for (  final byte b : unicodeString.getBytes()) {    sb.append(String.format("%X00",b));  }  return sb.toString();}  }
class C{  public void addOverlays(List<? extends Overlay> overlays,KmlDocument kmlDoc){  if (overlays != null) {    for (    Overlay item : overlays) {      addOverlay(item,kmlDoc);    }  }}  }
class C{  public OverScroller(Context context,Interpolator interpolator){  this(context,interpolator,true);}  }
class C{  private void addNewDistribution(){  editDistribution=Boolean.FALSE;  final String name=HawkbitCommonUtil.trimAndNullIfEmpty(distNameTextField.getValue());  final String version=HawkbitCommonUtil.trimAndNullIfEmpty(distVersionTextField.getValue());  final String distSetTypeName=HawkbitCommonUtil.trimAndNullIfEmpty((String)distsetTypeNameComboBox.getValue());  final String desc=HawkbitCommonUtil.trimAndNullIfEmpty(descTextArea.getValue());  final boolean isMigStepReq=reqMigStepCheckbox.getValue();  DistributionSet newDist=entityFactory.generateDistributionSet();  setDistributionValues(newDist,name,version,distSetTypeName,desc,isMigStepReq);  newDist=distributionSetManagement.createDistributionSet(newDist);  notificationMessage.displaySuccess(i18n.get("message.new.dist.save.success",new Object[]{newDist.getName(),newDist.getVersion()}));  final Set<DistributionSetIdName> s=new HashSet<>();  s.add(new DistributionSetIdName(newDist.getId(),newDist.getName(),newDist.getVersion()));  final DistributionSetTable distributionSetTable=SpringContextHelper.getBean(DistributionSetTable.class);  distributionSetTable.setValue(s);}  }
class C{  public void testPublicCloneable(){  XYBoxAnnotation a1=new XYBoxAnnotation(1.0,2.0,3.0,4.0,new BasicStroke(1.2f),Color.red,Color.blue);  assertTrue(a1 instanceof PublicCloneable);}  }
class C{  public static Minute parseMinute(String s){  Minute result=null;  s=s.trim();  String daystr=s.substring(0,Math.min(10,s.length()));  Day day=Day.parseDay(daystr);  if (day != null) {    String hmstr=s.substring(Math.min(daystr.length() + 1,s.length()),s.length());    hmstr=hmstr.trim();    String hourstr=hmstr.substring(0,Math.min(2,hmstr.length()));    int hour=Integer.parseInt(hourstr);    if ((hour >= 0) && (hour <= 23)) {      String minstr=hmstr.substring(Math.min(hourstr.length() + 1,hmstr.length()),hmstr.length());      int minute=Integer.parseInt(minstr);      if ((minute >= 0) && (minute <= 59)) {        result=new Minute(minute,new Hour(hour,day));      }    }  }  return result;}  }
class C{  public boolean invertedX(){  return invertedX;}  }
class C{  private GridUriDeploymentDiscovery(){}  }
class C{  public MoveEvaluation(int score){  this.move=null;  this.score=score;}  }
class C{  private boolean canForcePerform(String permissionName){  List<PermissionRule> access=access(permissionName);  List<PermissionRule> overridden=relevant.getOverridden(permissionName);  Set<ProjectRef> allows=new HashSet<>();  Set<ProjectRef> blocks=new HashSet<>();  for (  PermissionRule rule : access) {    if (rule.isBlock()) {      blocks.add(relevant.getRuleProps(rule));    } else     if (rule.getForce()) {      allows.add(relevant.getRuleProps(rule));    }  }  for (  PermissionRule rule : overridden) {    if (rule.getForce()) {      blocks.remove(relevant.getRuleProps(rule));    }  }  blocks.removeAll(allows);  return blocks.isEmpty() && !allows.isEmpty();}  }
class C{  public static String toHexText(byte[] bytes,int length){  if (bytes == null)   return "null";  if (length > bytes.length)   length=bytes.length;  StringBuilder sb=new StringBuilder();  if (16 < length)   sb.append('\n');  for (int index=0; index < length; ++index) {    sb.append(String.format("%02x",bytes[index] & 0xFF));    if (31 == (31 & index)) {      sb.append('\n');    } else {      sb.append(' ');    }  }  if (length < bytes.length) {    sb.append(" .. ").append(bytes.length).append(" bytes");  }  return sb.toString();}  }
class C{  public void vinculaExpediente(String idDocVit,String idExp,String idSist,String usuario) throws Exception {  authenticate();  GestionDocumentosVitalesBI docVitBI=getServiceRepository().lookupGestionDocumentosVitalesBI();  docVitBI.vinculaExpediente(idDocVit,idExp,idSist,usuario);}  }
class C{  public void testGetRandomColorByName(){  try {    for (    String name : MaterialPalettes.ALL_COLOR_NAMES) {      List<Integer> colorList=MaterialPalettes.getColorsByName(name);      Integer randomColor=MaterialPalettes.getRandomColorByName(name);      assertTrue(colorList.contains(randomColor));    }  } catch (  IllegalAccessException iae) {    fail();  }}  }
class C{  public JSONObject(JSONObject object){  this(object,false);}  }
class C{  public void flingX(int velocityX){  int width=getWidth();  int right=getChildAt(getChildCount() - 1).getRight();  mScroller.fling(mScrollX,mScrollY,velocityX,0,0,0,0,right - width);  final boolean movingRight=velocityX > 0;  View newFocused=findFocusableViewInMyBoundsX(movingRight,mScroller.getFinalX(),findFocus());  if (newFocused == null) {    newFocused=this;  }  if (newFocused != findFocus() && newFocused.requestFocus(movingRight ? View.FOCUS_DOWN : View.FOCUS_UP)) {    mScrollViewMovedFocus=true;    mScrollViewMovedFocus=false;  }  invalidate();}  }
class C{  public static String elementValue(Element element){  if (element == null)   return null;  element.normalize();  Node textNode=element.getFirstChild();  if (textNode == null)   return null;  StringBuilder valueBuffer=new StringBuilder();  do {    if (textNode.getNodeType() == Node.CDATA_SECTION_NODE || textNode.getNodeType() == Node.TEXT_NODE) {      valueBuffer.append(textNode.getNodeValue());    }  } while ((textNode=textNode.getNextSibling()) != null);  return valueBuffer.toString();}  }
class C{  @Override public synchronized void remove(String key){  boolean deleted=getFileForKey(key).delete();  removeEntry(key);  if (!deleted) {    VolleyLog.d("Could not delete cache entry for key=%s, filename=%s",key,getFilenameForKey(key));  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:52.678 -0500",hash_original_method="3F0FA66BFD46DABED8E86D16322A75CE",hash_generated_method="701D86AC4DBB869E695FC393A13EE22A") public ASN1Explicit(int tagClass,int tagNumber,ASN1Type type){  super(tagClass,tagNumber);  this.type=type;}  }
class C{  @Override public void onStopTrackingTouch(SeekBar seekBar){  mDragging=false;  setProgress();  updatePausePlay();  mHandler.sendEmptyMessage(SHOW_PROGRESS);}  }
class C{  public Payment(ResultSet result) throws SQLException {  id=result.getInt("id");  channelIdReceiver=result.getInt("channel_id_receiver");  channelIdSender=result.getInt("channel_id_sender");  amount=result.getLong("amount");  fee=result.getLong("fee");  phaseSender=result.getInt("phase_sender");  phaseReceiver=result.getInt("phase_receiver");  includeInReceiverChannel=Tools.intToBool(result.getInt("include_in_receiver_channel"));  includeInSenderChannel=Tools.intToBool(result.getInt("include_in_sender_channel"));  includeInReceiverChannelTemp=Tools.intToBool(result.getInt("include_in_receiver_channel_temp"));  includeInSenderChannelTemp=Tools.intToBool(result.getInt("include_in_sender_channel_temp"));  secretHash=result.getBytes("secret_hash");  secret=result.getBytes("secret");  timestampAddedReceiver=result.getInt("timestamp_added_receiver");  timestampAddedSender=result.getInt("timestamp_added_sender");  timestampSettledReceiver=result.getInt("timestamp_settled_receiver");  timestampSettledSender=result.getInt("timestamp_settled_sender");  versionAddedReceiver=result.getInt("version_added_receiver");  versionAddedSender=result.getInt("version_added_sender");  versionSettledReceiver=result.getInt("version_settled_receiver");  versionSettledSender=result.getInt("version_settled_sender");}  }
class C{  public ToolBarNorthState(){  super("North");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-06 12:50:59.188 -0400",hash_original_method="388919073D07CFDFCCC869F9C5699F45",hash_generated_method="140FDF479F8CD7ED8C13870EA7B78923") public boolean hasAdvancedOption(String key){  return mAdvancedOptions != null && mAdvancedOptions.containsKey(key);}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) private void mergeHi(int base1,int len1,int base2,int len2){  assert len1 > 0 && len2 > 0 && base1 + len1 == base2;  Object[] a=this.a;  Object[] tmp=ensureCapacity(len2);  int tmpBase=this.tmpBase;  System.arraycopy(a,base2,tmp,tmpBase,len2);  int cursor1=base1 + len1 - 1;  int cursor2=tmpBase + len2 - 1;  int dest=base2 + len2 - 1;  a[dest--]=a[cursor1--];  if (--len1 == 0) {    System.arraycopy(tmp,tmpBase,a,dest - (len2 - 1),len2);    return;  }  if (len2 == 1) {    dest-=len1;    cursor1-=len1;    System.arraycopy(a,cursor1 + 1,a,dest + 1,len1);    a[dest]=tmp[cursor2];    return;  }  int minGallop=this.minGallop;  outer:   while (true) {    int count1=0;    int count2=0;    do {      assert len1 > 0 && len2 > 1;      if (((Comparable)tmp[cursor2]).compareTo(a[cursor1]) < 0) {        a[dest--]=a[cursor1--];        count1++;        count2=0;        if (--len1 == 0)         break outer;      } else {        a[dest--]=tmp[cursor2--];        count2++;        count1=0;        if (--len2 == 1)         break outer;      }    } while ((count1 | count2) < minGallop);    do {      assert len1 > 0 && len2 > 1;      count1=len1 - gallopRight((Comparable)tmp[cursor2],a,base1,len1,len1 - 1);      if (count1 != 0) {        dest-=count1;        cursor1-=count1;        len1-=count1;        System.arraycopy(a,cursor1 + 1,a,dest + 1,count1);        if (len1 == 0)         break outer;      }      a[dest--]=tmp[cursor2--];      if (--len2 == 1)       break outer;      count2=len2 - gallopLeft((Comparable)a[cursor1],tmp,tmpBase,len2,len2 - 1);      if (count2 != 0) {        dest-=count2;        cursor2-=count2;        len2-=count2;        System.arraycopy(tmp,cursor2 + 1,a,dest + 1,count2);        if (len2 <= 1)         break outer;      }      a[dest--]=a[cursor1--];      if (--len1 == 0)       break outer;      minGallop--;    } while (count1 >= MIN_GALLOP | count2 >= MIN_GALLOP);    if (minGallop < 0)     minGallop=0;    minGallop+=2;  }  this.minGallop=minGallop < 1 ? 1 : minGallop;  if (len2 == 1) {    assert len1 > 0;    dest-=len1;    cursor1-=len1;    System.arraycopy(a,cursor1 + 1,a,dest + 1,len1);    a[dest]=tmp[cursor2];  } else   if (len2 == 0) {    throw new IllegalArgumentException("Comparison method violates its general contract!");  } else {    assert len1 == 0;    assert len2 > 0;    System.arraycopy(tmp,tmpBase,a,dest - (len2 - 1),len2);  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:14.266 -0500",hash_original_method="DFADDF9198F2268E7EB2B4F062BE54B9",hash_generated_method="D67688F0DFF5DC08C72EB2B9294A3593") public ConcurrentHashMap(){  this(DEFAULT_INITIAL_CAPACITY,DEFAULT_LOAD_FACTOR,DEFAULT_CONCURRENCY_LEVEL);}  }
class C{  public static String formatRequestIdLogSection(String requestId){  return String.format(" [Req: %s]",requestId);}  }
class C{  public OutputProperties(String method){  m_properties=new Properties(OutputPropertiesFactory.getDefaultMethodProperties(method));}  }
class C{  public ResourceServerResource resourceServer(){  return resourceServer;}  }
class C{  public boolean isError(){  return state.equals(ERROR);}  }
class C{  public Response doDelete(final Request req) throws Exception {  return new Response(HTTP_METHOD_NOT_ALLOWED,MIME_TEXT_PLAIN,req.method);}  }
class C{  public static void writeTuple(TupleQueryResult tqr,QueryResultFormat format,OutputStream out) throws IOException, TupleQueryResultHandlerException, UnsupportedQueryResultFormatException, QueryEvaluationException {  TupleQueryResultWriter writer=createTupleWriter(format,out);  try {    writer.startDocument();    writer.startHeader();    QueryResults.report(tqr,writer);  } catch (  QueryResultHandlerException e) {    if (e.getCause() instanceof IOException) {      throw (IOException)e.getCause();    } else     if (e instanceof TupleQueryResultHandlerException) {      throw (TupleQueryResultHandlerException)e;    } else {      throw new TupleQueryResultHandlerException(e);    }  }}  }
class C{  private void computePublicKey(){  ComputeInField c=new ComputeInField();  int rows=this.vi[this.vi.length - 1] - this.vi[0];  int vars=this.vi[this.vi.length - 1];  short[][][] coeff_quadratic_3dim=new short[rows][vars][vars];  this.pub_singular=new short[rows][vars];  this.pub_scalar=new short[rows];  short[][][] coeff_alpha;  short[][][] coeff_beta;  short[][] coeff_gamma;  short[] coeff_eta;  int oils=0;  int vins=0;  int crnt_row=0;  short vect_tmp[]=new short[vars];  short sclr_tmp=0;  for (int l=0; l < this.layers.length; l++) {    coeff_alpha=this.layers[l].getCoeffAlpha();    coeff_beta=this.layers[l].getCoeffBeta();    coeff_gamma=this.layers[l].getCoeffGamma();    coeff_eta=this.layers[l].getCoeffEta();    oils=coeff_alpha[0].length;    vins=coeff_beta[0].length;    for (int p=0; p < oils; p++) {      for (int x1=0; x1 < oils; x1++) {        for (int x2=0; x2 < vins; x2++) {          vect_tmp=c.multVect(coeff_alpha[p][x1][x2],this.A2[x1 + vins]);          coeff_quadratic_3dim[crnt_row + p]=c.addSquareMatrix(coeff_quadratic_3dim[crnt_row + p],c.multVects(vect_tmp,this.A2[x2]));          vect_tmp=c.multVect(this.b2[x2],vect_tmp);          this.pub_singular[crnt_row + p]=c.addVect(vect_tmp,this.pub_singular[crnt_row + p]);          vect_tmp=c.multVect(coeff_alpha[p][x1][x2],this.A2[x2]);          vect_tmp=c.multVect(b2[x1 + vins],vect_tmp);          this.pub_singular[crnt_row + p]=c.addVect(vect_tmp,this.pub_singular[crnt_row + p]);          sclr_tmp=GF2Field.multElem(coeff_alpha[p][x1][x2],this.b2[x1 + vins]);          this.pub_scalar[crnt_row + p]=GF2Field.addElem(this.pub_scalar[crnt_row + p],GF2Field.multElem(sclr_tmp,this.b2[x2]));        }      }      for (int x1=0; x1 < vins; x1++) {        for (int x2=0; x2 < vins; x2++) {          vect_tmp=c.multVect(coeff_beta[p][x1][x2],this.A2[x1]);          coeff_quadratic_3dim[crnt_row + p]=c.addSquareMatrix(coeff_quadratic_3dim[crnt_row + p],c.multVects(vect_tmp,this.A2[x2]));          vect_tmp=c.multVect(this.b2[x2],vect_tmp);          this.pub_singular[crnt_row + p]=c.addVect(vect_tmp,this.pub_singular[crnt_row + p]);          vect_tmp=c.multVect(coeff_beta[p][x1][x2],this.A2[x2]);          vect_tmp=c.multVect(this.b2[x1],vect_tmp);          this.pub_singular[crnt_row + p]=c.addVect(vect_tmp,this.pub_singular[crnt_row + p]);          sclr_tmp=GF2Field.multElem(coeff_beta[p][x1][x2],this.b2[x1]);          this.pub_scalar[crnt_row + p]=GF2Field.addElem(this.pub_scalar[crnt_row + p],GF2Field.multElem(sclr_tmp,this.b2[x2]));        }      }      for (int n=0; n < vins + oils; n++) {        vect_tmp=c.multVect(coeff_gamma[p][n],this.A2[n]);        this.pub_singular[crnt_row + p]=c.addVect(vect_tmp,this.pub_singular[crnt_row + p]);        this.pub_scalar[crnt_row + p]=GF2Field.addElem(this.pub_scalar[crnt_row + p],GF2Field.multElem(coeff_gamma[p][n],this.b2[n]));      }      this.pub_scalar[crnt_row + p]=GF2Field.addElem(this.pub_scalar[crnt_row + p],coeff_eta[p]);    }    crnt_row=crnt_row + oils;  }{    short[][][] tmp_c_quad=new short[rows][vars][vars];    short[][] tmp_c_sing=new short[rows][vars];    short[] tmp_c_scal=new short[rows];    for (int r=0; r < rows; r++) {      for (int q=0; q < A1.length; q++) {        tmp_c_quad[r]=c.addSquareMatrix(tmp_c_quad[r],c.multMatrix(A1[r][q],coeff_quadratic_3dim[q]));        tmp_c_sing[r]=c.addVect(tmp_c_sing[r],c.multVect(A1[r][q],this.pub_singular[q]));        tmp_c_scal[r]=GF2Field.addElem(tmp_c_scal[r],GF2Field.multElem(A1[r][q],this.pub_scalar[q]));      }      tmp_c_scal[r]=GF2Field.addElem(tmp_c_scal[r],b1[r]);    }    coeff_quadratic_3dim=tmp_c_quad;    this.pub_singular=tmp_c_sing;    this.pub_scalar=tmp_c_scal;  }  compactPublicKey(coeff_quadratic_3dim);}  }
class C{  public boolean spans(MIMEType other){  return spans(other,true);}  }
class C{  public ClearableStringBuilder append(char[] buffer,int start,int length){  sb.append(buffer,start,length);  return this;}  }
class C{  @Override public synchronized boolean add(E object){  if (elementCount == elementData.length) {    growByOne();  }  elementData[elementCount++]=object;  modCount++;  return true;}  }
class C{  public static <T>EqPredicate<Identity> eq(Association<T> association,T value){  return new EqPredicate<>(new PropertyFunction<>(null,association(association),null,null,IDENTITY_METHOD),((HasIdentity)value).identity().get());}  }
class C{  static public boolean areEqual(Object aThis,Object aThat){  return aThis == null ? aThat == null : aThis.equals(aThat);}  }
class C{  @Override public OtrConnection open(Listener<Address,Bytestring> listener) throws InterruptedException, IOException {  if (listener == null) {    throw new NullPointerException();  }  if (running) {    return null;  }  running=true;  return new OtrConnection(this.channel.open(new OtrListener(listener)));}  }
class C{  public Swagger2MarkupConfigBuilder withDefinitionOrdering(Comparator<String> definitionOrdering){  Validate.notNull(definitionOrdering,"%s must not be null","definitionOrdering");  config.definitionOrderBy=OrderBy.CUSTOM;  config.definitionOrdering=definitionOrdering;  return this;}  }
class C{  private void addPropertyDescriptor(PropertyDescriptor pd){  String propName=pd.getName();  List<PropertyDescriptor> list=pdStore.get(propName);  if (list == null) {    list=new ArrayList<>();    pdStore.put(propName,list);  }  if (this.beanClass != pd.getClass0()) {    Method read=pd.getReadMethod();    Method write=pd.getWriteMethod();    boolean cls=true;    if (read != null)     cls=cls && read.getGenericReturnType() instanceof Class;    if (write != null)     cls=cls && write.getGenericParameterTypes()[0] instanceof Class;    if (pd instanceof IndexedPropertyDescriptor) {      IndexedPropertyDescriptor ipd=(IndexedPropertyDescriptor)pd;      Method readI=ipd.getIndexedReadMethod();      Method writeI=ipd.getIndexedWriteMethod();      if (readI != null)       cls=cls && readI.getGenericReturnType() instanceof Class;      if (writeI != null)       cls=cls && writeI.getGenericParameterTypes()[1] instanceof Class;      if (!cls) {        pd=new IndexedPropertyDescriptor(ipd);        pd.updateGenericsFor(this.beanClass);      }    } else     if (!cls) {      pd=new PropertyDescriptor(pd);      pd.updateGenericsFor(this.beanClass);    }  }  list.add(pd);}  }
class C{  @RequestMapping(value="/interests/{id}",method=RequestMethod.DELETE,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public void delete(@PathVariable Long id){  log.debug("REST request to delete Interest : {}",id);  ownerService.checkOldOwner(interestRepository,id);  interestRepository.delete(id);}  }
class C{  public SnowballStemmer(String name){  super();  setStemmer(name);}  }
class C{  private static void insertMoveBefore(RegisterOperand r2,RegisterOperand r1,Instruction s){  Instruction m=PhysicalRegisterTools.makeMoveInstruction(r2,r1);  s.insertBefore(m);}  }
class C{  Entry(int h,K k,V v,Entry<K,V> n){  value=v;  next=n;  key=k;  hash=h;}  }
class C{  public boolean abcVersion(int n){  return statics.abc_version >= n;}  }
class C{  public String name(){  return name;}  }
class C{  public boolean isSpecified(String uri,String localName){  int idx=getIndex(uri,localName);  if (idx < 0) {    throw new IllegalArgumentException("");  }  String str=mItems[(idx << 3) + 5];  return ((str != null) ? (str.charAt(0) == 'd') : true);}  }
class C{  public HeaderCard card(){  return this.card;}  }
class C{  public ChaChaEngine(int rounds){  super(rounds);}  }
class C{  public FloodlightModuleContext(FloodlightModuleLoader moduleLoader){  serviceMap=new HashMap<Class<? extends IFloodlightService>,IFloodlightService>();  configParams=new HashMap<Class<? extends IFloodlightModule>,Map<String,String>>();  this.moduleLoader=moduleLoader;}  }
class C{  public void buildXMLSootObjects(){  ResourcesSoot.v().setNumberToStringMap(resource_info);  ResourcesSoot.v().setStringToValueSetMap(stringNameToRStringSet);  for (  Layout layout : layouts) {    layout.buildViews(stringNameToRStringSet);    Integer layoutNumericId=resource_info.inverse().get(layout.view.id);    if (layoutNumericId == null) {      logger.warn("Layout has no viewID, skipped: {}",layout.view);      AnalysisReport.v().addEntry("Layout in XML with no ID in resources: " + layout.view,AnalysisReport.Level.HIGH);      continue;    }    layout.buildInitLayout();  }}  }
class C{  public SpaceVerticalAction(final NetworkPanel networkPanel){  super(networkPanel,"Space Vertical",EnablingCondition.NEURONS);  putValue(SMALL_ICON,ResourceManager.getImageIcon("SpaceVertical.png"));  putValue(SHORT_DESCRIPTION,"Space selected neurons vertically");}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected void emit_AnnotationNoAtSign___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__q(EObject semanticObject,ISynNavigable transition,List<INode> nodes){  acceptNodes(transition,nodes);}  }
class C{  public final Node pop(){  m_firstFree--;  Node n=m_map[m_firstFree];  m_map[m_firstFree]=null;  return n;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public int find(String string){  if (string == null) {    return -1;  }  for (int i=0; i != m_stringOffsets.length; ++i) {    int offset=m_stringOffsets[i];    int length=getShort(m_strings,offset);    if (length != string.length()) {      continue;    }    int j=0;    for (; j != length; ++j) {      offset+=2;      if (string.charAt(j) != getShort(m_strings,offset)) {        break;      }    }    if (j == length) {      return i;    }  }  return -1;}  }
class C{  public static final boolean isWhitespace(char ch){  return ch == ' ' || ch == '\t';}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.TYPE_REF_ANNOTATION_ARGUMENT__TYPE_REF:    setTypeRef((TypeRef)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  ClassDetail(ClassInfo superClass,ClassInfo[] interfaces,int accessFlags,MethodInfo[] methods,HashMap<String,ClassInfo> fields,HashMap<String,ClassInfo> staticFields,boolean isFrameworkClass){  this.accessFlags=accessFlags;  this.superClass=superClass;  this.interfaces=interfaces;  this.methods=new HashMap<MethodInfoWrapper,MethodInfo>();  for (  MethodInfo mi : methods) {    this.methods.put(new MethodInfoWrapper(mi),mi);  }  this.fields=fields;  this.staticFields=new HashMap<String,ClassInfo>(staticFields);  this.isFrameworkClass=isFrameworkClass;}  }
class C{  public static EWMA fiveMinuteEWMA(){  return new EWMA(M5_ALPHA,INTERVAL,TimeUnit.SECONDS);}  }
class C{  private void fillInDefaults(final List<Parameter<?>> contents,final Map<String,Object> connectionParams){  if (connectionParams == null)   return;  for (  final Parameter<?> param : contents) {    if (param.required && "program".equals(param.getLevel())) {      if (!connectionParams.containsKey(param.key)) {        connectionParams.put(param.key,param.sample);      }    }  }}  }
class C{  public Object visit(ASTExpression node,Object data){  return showNode(node,data);}  }
class C{  public void onEvent(DirectionalTextViewContainer.OnPlaceClickedEvent event){  if (event.place == null) {    Log.w(TAG,"ignoring because no place is currently available.");    return;  }  mCurrentPlace=event.place;  showMapsButtonView();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:32.596 -0500",hash_original_method="B97988479159B246DBD5976667FAE614",hash_generated_method="86482F0887C0BE97C5C9F2ACEB0A65C9") public void clearUriParms(){  uriParms=new NameValueList();}  }
class C{  private static String doGetPath(String filename,int separatorAdd){  if (filename == null)   return null;  int prefix=getPrefixLength(filename);  if (prefix < 0)   return null;  int index=indexOfLastSeparator(filename);  int endIndex=index + separatorAdd;  if (prefix >= filename.length() || index < 0 || prefix >= endIndex)   return "";  return filename.substring(prefix,endIndex);}  }
class C{  public int totalSize(){  int total=0;  for (  Map.Entry<K,FastCounter<V>> entry : counterMap.entrySet()) {    FastCounter<V> counter=entry.getValue();    total+=counter.size();  }  return total;}  }
class C{  public final Angle divide(double divisor){  return Angle.fromDegrees(this.degrees / divisor);}  }
class C{  public Digraph(int V){  if (V < 0)   throw new IllegalArgumentException("Number of vertices in a Digraph must be nonnegative");  this.V=V;  this.E=0;  indegree=new int[V];  adj=(Bag<Integer>[])new Bag[V];  for (int v=0; v < V; v++) {    adj[v]=new Bag<Integer>();  }}  }
class C{  public Interval toInterval(){  return new Interval(getStartMillis(),getEndMillis(),getChronology());}  }
class C{  public void saveWaveAsFile(String filename){  WaveHeader waveHeader=wave.getWaveHeader();  int byteRate=waveHeader.getByteRate();  int audioFormat=waveHeader.getAudioFormat();  int sampleRate=waveHeader.getSampleRate();  int bitsPerSample=waveHeader.getBitsPerSample();  int channels=waveHeader.getChannels();  long chunkSize=waveHeader.getChunkSize();  long subChunk1Size=waveHeader.getSubChunk1Size();  long subChunk2Size=waveHeader.getSubChunk2Size();  int blockAlign=waveHeader.getBlockAlign();  try {    FileOutputStream fos=new FileOutputStream(filename);    fos.write(WaveHeader.RIFF_HEADER.getBytes());    fos.write(new byte[]{(byte)(chunkSize),(byte)(chunkSize >> 8),(byte)(chunkSize >> 16),(byte)(chunkSize >> 24)});    fos.write(WaveHeader.WAVE_HEADER.getBytes());    fos.write(WaveHeader.FMT_HEADER.getBytes());    fos.write(new byte[]{(byte)(subChunk1Size),(byte)(subChunk1Size >> 8),(byte)(subChunk1Size >> 16),(byte)(subChunk1Size >> 24)});    fos.write(new byte[]{(byte)(audioFormat),(byte)(audioFormat >> 8)});    fos.write(new byte[]{(byte)(channels),(byte)(channels >> 8)});    fos.write(new byte[]{(byte)(sampleRate),(byte)(sampleRate >> 8),(byte)(sampleRate >> 16),(byte)(sampleRate >> 24)});    fos.write(new byte[]{(byte)(byteRate),(byte)(byteRate >> 8),(byte)(byteRate >> 16),(byte)(byteRate >> 24)});    fos.write(new byte[]{(byte)(blockAlign),(byte)(blockAlign >> 8)});    fos.write(new byte[]{(byte)(bitsPerSample),(byte)(bitsPerSample >> 8)});    fos.write(WaveHeader.DATA_HEADER.getBytes());    fos.write(new byte[]{(byte)(subChunk2Size),(byte)(subChunk2Size >> 8),(byte)(subChunk2Size >> 16),(byte)(subChunk2Size >> 24)});    fos.write(wave.getBytes());    fos.close();  } catch (  FileNotFoundException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  @Override public String toString(){  return getSerializedNameString();}  }
class C{  public boolean isTimecodeDropFrame(){  return timecodeDropFrame;}  }
class C{  public AugmentedNode<K> left(){  return (AugmentedNode<K>)left;}  }
class C{  public static double twoPow(int power){  if (power >= 0) {    if (power <= MAX_DOUBLE_EXPONENT) {      return twoPowTab[power - MIN_DOUBLE_EXPONENT];    } else {      return Double.POSITIVE_INFINITY;    }  } else {    if (power >= MIN_DOUBLE_EXPONENT) {      return twoPowTab[power - MIN_DOUBLE_EXPONENT];    } else {      return 0.0;    }  }}  }
class C{  public void appendToLog(String s){  append("\n" + s);}  }
class C{  @SuppressWarnings("deprecation") private static void addVariableResolvers(FacesCompositeELResolver target,FacesCompositeELResolver.ELResolverChainType chainType,ApplicationAssociate associate){  VariableResolver vr=getDelegateVR(associate,true);  if (vr != null) {    VariableResolverChainWrapper vrChainWrapper=new VariableResolverChainWrapper(vr);    target.addRootELResolver(vrChainWrapper);    if (chainType == FacesCompositeELResolver.ELResolverChainType.JSP) {      associate.setLegacyVRChainHeadWrapperForJsp(vrChainWrapper);    } else {      associate.setLegacyVRChainHeadWrapperForFaces(vrChainWrapper);    }  }}  }
class C{  public void flush() throws IOException {}  }
class C{  public Object read(InputNode node,Object value) throws Exception {  Collection list=(Collection)value;  if (list != null) {    return read(node,list);  }  return read(node);}  }
class C{  public static void append(File file,Writer writer,String charset) throws IOException {  append(file,writer,charset,false);}  }
class C{  public boolean isNoAccess(){  return this == NO_ACCESS;}  }
class C{  public Message authResponse(AuthRequest authReq,String userSelId,String userSelClaimed,boolean authenticatedAndApproved,boolean signNow){  return authResponse(authReq,userSelId,userSelClaimed,authenticatedAndApproved,_opEndpointUrl,signNow);}  }
class C{  public void addSwipeListener(SwipeListener listener){  if (mListeners == null) {    mListeners=new ArrayList<SwipeListener>();  }  mListeners.add(listener);}  }
class C{  private static void checkElement(@Nullable Object node){  if (node == null) {    throw new NoSuchElementException();  }}  }
class C{  public void testNextIntBounded2(){  for (int least=-15485863; least < MAX_INT_BOUND; least+=524959) {    for (int bound=least + 2; bound < least && bound < MAX_INT_BOUND; bound+=49979687) {      int f=ThreadLocalRandom.current().nextInt(least,bound);      assertTrue(least <= f && f < bound);      int i=0;      int j;      while (i < NCALLS && (j=ThreadLocalRandom.current().nextInt(least,bound)) == f) {        assertTrue(least <= j && j < bound);        ++i;      }      assertTrue(i < NCALLS);    }  }}  }
class C{  public XMLString concat(String str){  return new XString(str().concat(str));}  }
class C{  public static void apply(){  applyOpenSSLFix();  installLinuxPRNGSecureRandom();}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentFragment docFragment;  NamedNodeMap attrList;  String value;  doc=(Document)load("staff",true);  docFragment=doc.createDocumentFragment();  attrList=docFragment.getAttributes();  assertNull("attributesNull",attrList);  value=docFragment.getNodeValue();  assertNull("initiallyNull",value);}  }
class C{  public String toString(){  return this.contents;}  }
class C{  protected void sequence_BindingRestElement(ISerializationContext context,BindingElement semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  private static boolean isRegistryRef(Object obj){  if (!(obj instanceof Reference)) {    return false;  }  String thisClassName=RegistryContextFactory.class.getName();  Reference ref=(Reference)obj;  return thisClassName.equals(ref.getFactoryClassName());}  }
class C{  public boolean completed(){  return this == SUCCESS || this == FAILURE;}  }
class C{  public synchronized void addBatchClassifierListener(BatchClassifierListener cl){  m_batchClassifierListeners.addElement(cl);}  }
class C{  public static String importFrom(int vmid) throws IOException {  Perf perf=Perf.getPerf();  ByteBuffer bb;  try {    bb=perf.attach(vmid,"r");  } catch (  IllegalArgumentException iae) {    throw new IOException(iae.getMessage());  }  List<Counter> counters=new PerfInstrumentation(bb).findByPattern(CONNECTOR_ADDRESS_COUNTER);  Iterator<Counter> i=counters.iterator();  if (i.hasNext()) {    Counter c=i.next();    return (String)c.getValue();  } else {    return null;  }}  }
class C{  public void connect(final ActionCallback callback){  if (!isConnected()) {    connectionCallback=callback;    btConnectionManager.connect();  } else {    Log.e(TAG,"Already connected...");  }}  }
class C{  public boolean isFullRank(){  for (int j=0; j < n; j++) {    if (Rdiag[j] == 0)     return false;  }  return true;}  }
class C{  public static <T>T checkNotNull(T reference,@Nullable String errorMessageTemplate,@Nullable Object... errorMessageArgs){  if (reference == null) {    throw new NullPointerException(format(errorMessageTemplate,errorMessageArgs));  }  return reference;}  }
class C{  public UtilityNode(String nodeId,UtilityFunction distrib){  super(nodeId);  this.distrib=distrib;}  }
class C{  public static Matcher<AnnotatedElement> annotatedWith(final Class<? extends Annotation> annotationType){  return new AnnotatedWithType(annotationType);}  }
class C{  public void fsync(Result<Boolean> result){  fsyncImpl(result,FsyncType.HEADER);}  }
class C{  public boolean createServerMessenger(Component ui){  ui=ui == null ? null : JOptionPane.getFrameForComponent(ui);  this.ui=ui;  final ServerProps props=getServerProps(ui);  if (props == null) {    return false;  }  try {    serverMessenger=new ServerMessenger(props.getName(),props.getPort(),objectStreamFactory);    final ClientLoginValidator clientLoginValidator=new ClientLoginValidator(serverMessenger);    clientLoginValidator.setGamePassword(props.getPassword());    serverMessenger.setLoginValidator(clientLoginValidator);    serverMessenger.addErrorListener(this);    serverMessenger.addConnectionChangeListener(this);    final UnifiedMessenger unifiedMessenger=new UnifiedMessenger(serverMessenger);    remoteMessenger=new RemoteMessenger(unifiedMessenger);    remoteMessenger.registerRemote(m_serverStartupRemote,SERVER_REMOTE_NAME);    channelMessenger=new ChannelMessenger(unifiedMessenger);    final NullModeratorController moderatorController=new NullModeratorController(serverMessenger,null);    moderatorController.register(remoteMessenger);    chatController=new ChatController(CHAT_NAME,serverMessenger,remoteMessenger,channelMessenger,moderatorController);    if (ui == null && headless) {      chatPanel=new HeadlessChat(serverMessenger,channelMessenger,remoteMessenger,CHAT_NAME,Chat.CHAT_SOUND_PROFILE.GAME_CHATROOM);    } else {      chatPanel=new ChatPanel(serverMessenger,channelMessenger,remoteMessenger,CHAT_NAME,Chat.CHAT_SOUND_PROFILE.GAME_CHATROOM);    }    serverMessenger.setAcceptNewConnections(true);    gameDataChanged();    return true;  } catch (  final IOException ioe) {    ioe.printStackTrace(System.out);    if (headless) {      System.out.println("Unable to create server socket:" + ioe.getMessage());    } else {      JOptionPane.showMessageDialog(ui,"Unable to create server socket:" + ioe.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);    }    return false;  }}  }
class C{  public void connected(){}  }
class C{  public static <T>Optional<T> cast(Object object,Class<T> clazz){  requireNonNull(clazz);  if (object == null) {    return Optional.empty();  }  if (clazz.isAssignableFrom(object.getClass())) {    final T result=clazz.cast(object);    return Optional.of(result);  }  return Optional.empty();}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return INTEGERLIST;default :  return null;}}  }
class C{  public ArrayStoreException(java.lang.String s){  super(s);}  }
class C{  public void showUntrustedCertDialog(RemoteOperationResult result){  SslUntrustedCertDialog dialog=SslUntrustedCertDialog.newInstanceForFullSslError((CertificateCombinedException)result.getException());  FragmentManager fm=getSupportFragmentManager();  FragmentTransaction ft=fm.beginTransaction();  dialog.show(ft,DIALOG_UNTRUSTED_CERT);}  }
class C{  protected void createFolderAndSashControls(){  createQuad1Quad234567QuadControls();  for (  RaptorTabFolder folder : folders) {    initFolder(folder);  }  sashes[0]=quad9quad12345678;  sashes[1]=quad1quad2345678;  sashes[2]=quad2quad3quad4quad5Sash;  sashes[3]=quad2345quad678Sash;  sashes[4]=quad67quad8Sash;  sashes[5]=quad6quad7Sash;  for (  RaptorWindowSashForm sashe : sashes) {    sashe.loadFromPreferences();    sashe.setVisible(false);    sashe.setMaximizedControl(null);  }}  }
class C{  public boolean isFixedView(View v){{    ArrayList<FixedViewInfo> where=mHeaderViewInfos;    int len=where.size();    for (int i=0; i < len; ++i) {      FixedViewInfo info=where.get(i);      if (info.view == v) {        return true;      }    }  }{    ArrayList<FixedViewInfo> where=mFooterViewInfos;    int len=where.size();    for (int i=0; i < len; ++i) {      FixedViewInfo info=where.get(i);      if (info.view == v) {        return true;      }    }  }  return false;}  }
class C{  public boolean hasGenericId(){  return id == GENERIC_ID;}  }
class C{  public void writeExternal(ObjectOutput out) throws IOException {  String s=toString();  if (s.length() <= 65535) {    out.writeUTF(s);  } else {    out.writeByte(0);    out.writeByte(0);    out.writeInt(s.length());    out.write(s.getBytes());  }}  }
class C{  public Object clone(){  try {    Option option=(Option)super.clone();    option.values=new ArrayList(values);    return option;  } catch (  CloneNotSupportedException cnse) {    throw new RuntimeException("A CloneNotSupportedException was thrown: " + cnse.getMessage());  }}  }
class C{  public boolean isStatic(){  return Modifier.isStatic(_method.getModifiers());}  }
class C{  final static boolean isIgnorable(int order){  return ((primaryOrder(order) == 0) ? true : false);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:13.124 -0500",hash_original_method="ED6C618278238A667ACAB98E6417F45B",hash_generated_method="71597F7B3899BE00601EB890117E0B47") public void proceed(){  mOriginHandler.sendMessage(mOriginHandler.obtainMessage(HANDLE_RESPONSE,1,0,mLoadListener));}  }
class C{  @SuppressFBWarnings(value="LI_LAZY_INIT_STATIC",justification="This race condition is fine, as explained in the comment below.") public static Handling dialog(){  if (dialog == null) {    dialog=createHandling(DurianPlugins.get(Plugins.Dialog.class,null));  }  return dialog;}  }
class C{  private static void CallNonvirtualVoidMethodA(JNIEnvironment env,int objJREF,int classJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: CallNonvirtualVoidMethodA  \n");  JNIGenericHelpers.callMethodJValuePtr(env,objJREF,methodID,argAddress,TypeReference.Void,true);}  }
class C{  private void handleImage(HTMLElement imgElement,int align,Command cmd){  String imageUrl=imgElement.getAttributeById(HTMLElement.ATTR_SRC);  Label imgLabel=null;  if (imageUrl != null) {    String alignStr=imgElement.getAttributeById(HTMLElement.ATTR_ALIGN);    int iWidth=calcSize(getWidth(),imgElement.getAttributeById(HTMLElement.ATTR_WIDTH),0,false);    int iHeight=calcSize(getHeight(),imgElement.getAttributeById(HTMLElement.ATTR_HEIGHT),0,false);    int hspace=getInt(imgElement.getAttributeById(HTMLElement.ATTR_HSPACE));    int vspace=getInt(imgElement.getAttributeById(HTMLElement.ATTR_VSPACE));    int totalWidth=iWidth + hspace * 2;    if ((FIXED_WIDTH) && (x + totalWidth >= width)) {      newLine(align);    }    String altText=imgElement.getAttributeById(HTMLElement.ATTR_ALT);    String imageMap=imgElement.getAttributeById(HTMLElement.ATTR_USEMAP);    if (link != null) {      imgLabel=new HTMLLink(altText,link,this,mainLink,false);      if (mainLink == null) {        mainLink=(HTMLLink)imgLabel;      }      if (accesskey != '\0') {        addAccessKey(accesskey,imgLabel,false);      }      if (!PROCESS_HTML_MP1_ONLY) {        ((HTMLLink)imgLabel).isMap=(imgElement.getAttributeById(HTMLElement.ATTR_ISMAP) != null);      }    } else     if (cmd != null) {      imgLabel=new Button(cmd);      if ((altText != null) && (!altText.equals(""))) {        imgLabel.setText(altText);      }      if (firstFocusable == null) {        firstFocusable=imgLabel;      }    } else     if (imageMap != null) {      imgLabel=new HTMLImageMap(this);      if (imageMapComponents == null) {        imageMapComponents=new Hashtable();      }      if (imageMap.startsWith("#")) {        imageMap=imageMap.substring(1);      }      imageMapComponents.put(imageMap,imgLabel);      if ((imageMapData != null) && (imageMapData.containsKey(imageMap))) {        ImageMapData data=(ImageMapData)imageMapData.get(imageMap);        ((HTMLImageMap)imgLabel).mapData=data;      }    } else {      imgLabel=new Label(altText);    }    if ((iWidth != 0) || (iHeight != 0)) {      iWidth+=imgLabel.getStyle().getPadding(Component.LEFT) + imgLabel.getStyle().getPadding(Component.RIGHT);      iHeight+=imgLabel.getStyle().getPadding(Component.TOP) + imgLabel.getStyle().getPadding(Component.BOTTOM);      imgLabel.setPreferredSize(new Dimension(iWidth,iHeight));    } else {      if ((imgLabel.getText() == null) || (imgLabel.getText().equals(""))) {        imgLabel.setText(" ");      }    }    imgLabel.getSelectedStyle().setPadding(0,0,0,0);    imgLabel.getUnselectedStyle().setPadding(0,0,0,0);    imgLabel.getSelectedStyle().setFont(font.getFont());    imgLabel.getUnselectedStyle().setFont(font.getFont());    int borderSize=getInt(imgElement.getAttributeById(HTMLElement.ATTR_BORDER));    if (borderSize != 0) {      imgLabel.putClientProperty(CLIENT_PROPERTY_IMG_BORDER,new Integer(borderSize));    } else {      borderSize=1;    }    imgLabel.getUnselectedStyle().setBorder(Border.createLineBorder(borderSize));    imgLabel.getSelectedStyle().setBorder(Border.createLineBorder(borderSize));    imgLabel.getUnselectedStyle().setBgTransparency(0);    imgLabel.getSelectedStyle().setBgTransparency(0);    Container imgCont=new Container(new BorderLayout());    imgCont.addComponent(BorderLayout.CENTER,imgLabel);    imgCont.getSelectedStyle().setMargin(vspace,vspace,hspace,hspace);    imgCont.getUnselectedStyle().setMargin(vspace,vspace,hspace,hspace);    curLine.addComponent(imgCont);    x+=totalWidth;    imgLabel.setAlignment(getHorizAlign(alignStr,align,false));    imgLabel.setVerticalAlignment(getVertAlign(alignStr,Component.CENTER));    if (showImages) {      if (docInfo != null) {        imageUrl=docInfo.convertURL(imageUrl);        threadQueue.add(imgLabel,imageUrl);      } else {        if (DocumentInfo.isAbsoluteURL(imageUrl)) {          threadQueue.add(imgLabel,imageUrl);        } else {          if (htmlCallback != null) {            htmlCallback.parsingError(HTMLCallback.ERROR_NO_BASE_URL,imgElement.getTagName(),imgElement.getAttributeName(new Integer(HTMLElement.ATTR_SRC)),imageUrl,"Ignoring Image file referred in an IMG tag (" + imageUrl + "), since page was set by setBody/setHTML/setDOM so there's no way to access relative URLs");          }        }      }    }    if (loadCSS) {      imgElement.setAssociatedComponents(imgCont);    }  }}  }
class C{  public static void updateWebProgress(){  webProgressBar.setProgress(((float)publicWebRender.currentProgress) / 100);}  }
class C{  private void rebuildNode(){  m_realizer.regenerate();  m_graph.updateViews();}  }
class C{  protected double computeDetailThreshold(){  double detailThreshold=8;  double rangeDetailThreshold=25;  detailThreshold+=this.getDetailHint() * rangeDetailThreshold;  return detailThreshold;}  }
class C{  public int linkNativeLibraryDirectory(String dataPath,String nativeLibPath,int userId){  if (dataPath == null) {    Slog.e(TAG,"linkNativeLibraryDirectory dataPath is null");    return -1;  } else   if (nativeLibPath == null) {    Slog.e(TAG,"linkNativeLibraryDirectory nativeLibPath is null");    return -1;  }  StringBuilder builder=new StringBuilder("linklib ");  builder.append(dataPath);  builder.append(' ');  builder.append(nativeLibPath);  builder.append(' ');  builder.append(userId);  return execute(builder.toString());}  }
class C{  public void addContentRow(String title,Image image,DetailsCellContent... cellContents){  createRowHeading(title,image);  if (null != title) {    copyStringBuilder.append(title);  }  copyStringBuilder.append('\t');  for (int i=0; i < columns; i++) {    if (i < cellContents.length) {      DetailsCellContent cellContent=cellContents[i];      String content=cellContent.getText();      int heightHint=0;      boolean canFitWidth=true;      if (null != content) {        canFitWidth=canFit(content,CONTENT_CONTROL_MAX_WIDTH);        if (!canFitWidth) {          heightHint=heightHint(content,CONTENT_CONTROL_MAX_WIDTH,CONTENT_CONTROL_MAX_HEIGHT);        }      }      TableWrapData tableWrapData=getLayoutData(cellContent);      if (!canFitWidth) {        int style=SWT.WRAP | SWT.READ_ONLY | SWT.MULTI| SWT.V_SCROLL;        int borderStyle=toolkit.getBorderStyle();        toolkit.setBorderStyle(SWT.NULL);        Text text=toolkit.createText(contentComposite,cellContent.getText(),style);        toolkit.setBorderStyle(borderStyle);        tableWrapData.grabHorizontal=true;        tableWrapData.maxWidth=CONTENT_CONTROL_MAX_WIDTH;        tableWrapData.maxHeight=CONTENT_CONTROL_MAX_HEIGHT;        tableWrapData.heightHint=heightHint;        text.setLayoutData(tableWrapData);        textControls.add(text);      } else {        FormText formText=toolkit.createFormText(contentComposite,false);        fillFormText(formText,cellContent);        formText.setLayoutData(tableWrapData);      }      if (null != cellContent.getText()) {        copyStringBuilder.append(cellContent.getText());      } else       if (null != cellContent.getImageToolTip()) {        copyStringBuilder.append(cellContent.getImageToolTip());      }    } else {      toolkit.createLabel(contentComposite,"");    }    if (i < (columns - 1)) {      copyStringBuilder.append('\t');    }  }  copyStringBuilder.append('\n');}  }
class C{  @Override public void put(String name,char value){  emulatedFields.put(name,value);}  }
class C{  public synchronized void startExpirationTimer(long duration,ContactId contact){  if (mTimerTask != null) {    mTimerTask.cancel();    mTimerTask=null;  }  if (sLogger.isActivated()) {    sLogger.debug("Start is-composing timer for " + duration + "ms");  }  mTimerTask=new ExpirationTimer(contact);  new Timer().schedule(mTimerTask,duration);}  }
class C{  public void onOneToOneMessageDeliveryStatusReceived(ContactId contact,ImdnDocument imdn){  ImdnDocument.DeliveryStatus status=imdn.getStatus();  String msgId=imdn.getMsgId();  String notificationType=imdn.getNotificationType();  long timestamp=imdn.getDateTime();  if (sLogger.isActivated()) {    sLogger.info("Receive IMDN for message " + msgId + ", status="+ status+ ", Type="+ notificationType);  }  String mimeType=mMessagingLog.getMessageMimeType(msgId);  if (ImdnDocument.DeliveryStatus.ERROR == status || ImdnDocument.DeliveryStatus.FAILED == status || ImdnDocument.DeliveryStatus.FORBIDDEN == status) {    ReasonCode reasonCode=imdnToFailedReasonCode(imdn);synchronized (mLock) {      if (mMessagingLog.setChatMessageStatusAndReasonCode(msgId,Status.FAILED,reasonCode)) {        mOneToOneChatEventBroadcaster.broadcastMessageStatusChanged(contact,mimeType,msgId,Status.FAILED,reasonCode);      }    }  } else   if (ImdnDocument.DeliveryStatus.DELIVERED == status) {    mImService.getDeliveryExpirationManager().cancelDeliveryTimeoutAlarm(msgId);synchronized (mLock) {      if (mMessagingLog.setChatMessageStatusDelivered(msgId,timestamp)) {        mOneToOneChatEventBroadcaster.broadcastMessageStatusChanged(contact,mimeType,msgId,Status.DELIVERED,ReasonCode.UNSPECIFIED);      }    }  } else   if (ImdnDocument.DeliveryStatus.DISPLAYED == status) {    mImService.getDeliveryExpirationManager().cancelDeliveryTimeoutAlarm(msgId);synchronized (mLock) {      if (mMessagingLog.setChatMessageStatusDisplayed(msgId,timestamp)) {        mOneToOneChatEventBroadcaster.broadcastMessageStatusChanged(contact,mimeType,msgId,Status.DISPLAYED,ReasonCode.UNSPECIFIED);      }    }  }}  }
class C{  @Override protected void process(DistributionManager dm){  SearchLoadAndWriteProcessor processor=null;  processor=(SearchLoadAndWriteProcessor)getProcessorKeeper().retrieve(processorId);  if (processor == null) {    if (logger.isDebugEnabled()) {      logger.debug("NetLoadReplyMessage() SearchLoadAndWriteProcessor no longer exists");    }    return;  }  processor.incomingNetLoadReply(this.result,0,this.aCallbackArgument,this.e,this.isSerialized,this.requestorTimedOut);}  }
class C{  void afterWriting(){  if (conn != null) {    conn.afterWriting();  }}  }
class C{  public static void requireArgument(boolean condition,String message){  require(condition,message,IllegalArgumentException.class);}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public PricedProductRole copy(PricedOption po){  return copy(null,null,po);}  }
class C{  public static String joinStringList(List<String> strList,String delimit){  Iterator<String> entries=strList.iterator();  StringBuilder builder=new StringBuilder();  while (entries.hasNext()) {    builder.append(entries.next());    if (entries.hasNext()) {      builder.append(delimit);    }  }  return builder.toString();}  }
class C{  public MappingImpl cloneReadOnly(ConfigImpl config){  return new MappingImpl(config,virtual,strPhysical,strArchive,inspect,physicalFirst,hidden,true,topLevel,appMapping,ignoreVirtual,appListener,listenerMode,listenerType);}  }
class C{  public boolean hasOccurrenceMapping(){  return !getMappings(Constants.DWC_ROWTYPE_OCCURRENCE).isEmpty();}  }
class C{  public void read(Runnable operation){  try {    lock.readLock().lock();    operation.run();  }  finally {    lock.readLock().unlock();  }}  }
class C{  public Instance replaceSymbol(Symbol symbol,int depth,Transform matrix2,AlphaTransform cxform,int ratio,int clipDepth){  Transform matrix=matrix2;  Instance inst=new Instance(symbol,depth);  if (matrix == null) {    matrix=new Transform();  }  Placement placement=new Placement(inst,matrix,cxform,null,ratio,clipDepth,frameNumber,false,true,null);  placements.add(placement);  return inst;}  }
class C{  @org.junit.Test public void testWhatIs(){  Bot bot=Bot.createInstance();  try {    Language language=bot.mind().getThought(Language.class);    language.setLearningMode(LearningMode.Disabled);    TextEntry text=bot.awareness().getSense(TextEntry.class);    List<String> output=registerForOutput(text);    text.input("what is Uranium?");    String response=waitForOutput(output);    if (!response.equals("Uranium is a chemical element with symbol U and atomic number 92.")) {      fail("Incorrect: " + response);    }    Utils.sleep(SLEEP);    text.input("tell me about Oxygen");    response=waitForOutput(output);    if (!response.equals("Oxygen is a chemical element with symbol O and atomic number 8.")) {      fail("Incorrect: " + response);    }    Utils.sleep(SLEEP);    text.input("define love");    response=waitForOutput(output);    if (!response.equals("Strong affection.")) {      fail("Incorrect: " + response);    }    Utils.sleep(SLEEP);    text.input("who is Barack Obama?");    response=waitForOutput(output);    if (response.indexOf("Barack Hussein Obama II") == -1) {      fail("Incorrect: " + response);    }  }  finally {    bot.shutdown();  }  Utils.sleep(SLEEP);}  }
class C{  public static int firstStatPos(JCTree tree){  if (tree.hasTag(BLOCK) && ((JCBlock)tree).stats.nonEmpty())   return ((JCBlock)tree).stats.head.pos; else   return tree.pos;}  }
class C{  public static byte[] computeSHA1HMac(String data,String cookie) throws GeneralSecurityException {  byte[] hash;  MessageDigest digest=MessageDigest.getInstance("SHA-1");  hash=digest.digest(cookie.getBytes());  byte[] hmacResult;  Mac hm;  hm=Mac.getInstance("HMacSHA1");  Key k1=new SecretKeySpec(hash,0,hash.length,"HMacSHA1");  hm.init(k1);  return hm.doFinal(data.getBytes());}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void dialogFieldChanged(){  if (fDialogFieldListener != null) {    fDialogFieldListener.dialogFieldChanged(this);  }}  }
class C{  public CraftingStack(Object output,Object... recipe){  if (output != null) {    if (recipe != null) {      if (recipe.length == 9) {        this.output=APIUtils.convertToStack(output);        for (int i=0; i < 9; i++)         this.recipe[i]=APIUtils.convertToStack(recipe[i]);      } else       throw new ArrayIndexOutOfBoundsException("The array must contain preciesly 9 elements, not " + recipe.length + "!");    } else     throw new NullPointerException("This array can't be empty!");  } else   throw new NullPointerException("Output can't be null!");}  }
class C{  public static Map<IdUrlPair,List<AppResult>> limitHistoryResults(Map<IdUrlPair,List<AppResult>> map,int size,int execLimit){  Map<IdUrlPair,List<AppResult>> resultMap=new LinkedHashMap<IdUrlPair,List<AppResult>>();  int limit;  if (size < JOB_HISTORY_LIMIT) {    limit=execLimit;  } else {    Set<IdUrlPair> keySet=map.keySet();    if (keySet.size() > 10) {      limit=keySet.size() > (execLimit + 3) ? execLimit : keySet.size() - 3;    } else {      limit=keySet.size() - 1;    }  }  int i=1;  for (  Map.Entry<IdUrlPair,List<AppResult>> entry : map.entrySet()) {    if (i > limit) {      break;    }    resultMap.put(entry.getKey(),entry.getValue());    i++;  }  return resultMap;}  }
class C{  private void emitDeserializer(List<Method> getters,StringBuilder builder){  builder.append("    public static ").append(getImplClassName()).append(" fromJsonObject(JSONValue jsonValue) {\n");  builder.append("      return fromJsonObjectInt(jsonValue, true);\n");  builder.append("    }\n");  builder.append("    public static ").append(getImplClassName()).append(" fromJsonObjectInt(JSONValue jsonValue, boolean ").append(COPY_JSONS_PARAM).append(") {\n");  builder.append("      if (jsonValue == null || jsonValue.isNull() != null) {\n");  builder.append("        return null;\n");  builder.append("      }\n\n");  builder.append("      ").append(getImplClassName()).append(" dto = new ").append(getImplClassName()).append("();\n");  if (isCompactJson()) {    for (    Method method : getters) {      emitDeserializeFieldForMethodCompact(method,builder);    }  } else {    builder.append("      JSONObject json = jsonValue.isObject();\n");    for (    Method getter : getters) {      emitDeserializeFieldForMethod(getter,builder);    }  }  builder.append("\n      return dto;\n");  builder.append("    }\n\n");}  }
class C{  public PercentEscaper(String safeChars,boolean plusForSpace){  if (safeChars.matches(".*[0-9A-Za-z].*")) {    throw new IllegalArgumentException("Alphanumeric characters are always 'safe' and should not be " + "explicitly specified");  }  if (plusForSpace && safeChars.contains(" ")) {    throw new IllegalArgumentException("plusForSpace cannot be specified when space is a 'safe' character");  }  if (safeChars.contains("%")) {    throw new IllegalArgumentException("The '%' character cannot be specified as 'safe'");  }  this.plusForSpace=plusForSpace;  this.safeOctets=createSafeOctets(safeChars);}  }
class C{  @Override public List<byte[]> blpop(final int timeout,final byte[]... keys){  return blpop(getArgsAddTimeout(timeout,keys));}  }
class C{  public void loadFile(File file){  System.out.println("DEBUG: " + file.getAbsolutePath());  if (file.isDirectory()) {    JOptionPane.showMessageDialog(this,file.getAbsolutePath() + " is a directory","Error",JOptionPane.ERROR_MESSAGE);    return;  } else   if (!file.isFile()) {    JOptionPane.showMessageDialog(this,"No such file: " + file.getAbsolutePath(),"Error",JOptionPane.ERROR_MESSAGE);    return;  }  try {    BufferedReader r=new BufferedReader(new FileReader(file));    textArea.read(r,null);    r.close();  } catch (  IOException ioe) {    ioe.printStackTrace();    UIManager.getLookAndFeel().provideErrorFeedback(textArea);  }}  }
class C{  public void removeAttributes(Enumeration names){  while (names.hasMoreElements()) {    Object name=names.nextElement();    removeAttribute(name);  }}  }
class C{  public void testCreateFromParcel_true(){  Parcel parcel=Parcel.obtain();  parcel.setDataPosition(0);  parcel.writeLong(2);  parcel.writeByte((byte)1);  parcel.writeByte((byte)1);  parcel.writeByte((byte)1);  parcel.writeByte((byte)1);  parcel.writeByte((byte)1);  parcel.writeByte((byte)1);  parcel.writeString(DRIVE_SHARE_EMAILS);  Account account=new Account(ACCOUNTNAME,ACCOUNTYPE);  parcel.writeParcelable(account,0);  parcel.writeByte((byte)1);  parcel.writeByte((byte)1);  parcel.writeByte((byte)1);  parcel.writeByte((byte)1);  parcel.writeString(SHARE_URL);  parcel.setDataPosition(0);  sendRequest=SendRequest.CREATOR.createFromParcel(parcel);  assertEquals(2,sendRequest.getTrackId());  assertTrue(sendRequest.isSendDrive());  assertTrue(sendRequest.isSendMaps());  assertTrue(sendRequest.isSendFusionTables());  assertTrue(sendRequest.isSendSpreadsheets());  assertTrue(sendRequest.isDriveSync());  assertTrue(sendRequest.isDriveSharePublic());  assertEquals(DRIVE_SHARE_EMAILS,sendRequest.getDriveShareEmails());  assertEquals(account,sendRequest.getAccount());  assertTrue(sendRequest.isDriveSuccess());  assertTrue(sendRequest.isMapsSuccess());  assertTrue(sendRequest.isFusionTablesSuccess());  assertTrue(sendRequest.isSpreadsheetsSuccess());  assertEquals(SHARE_URL,sendRequest.getShareUrl());}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:08.637 -0500",hash_original_method="BD84CA3E70E7330B95C89C209BCE2D56",hash_generated_method="73DFF748A323543548830A7D2DB94C80") protected void writeAppData(byte[] data,int offset,int len) throws IOException {  if (!handshake_started) {    startHandshake();  }  if (logger != null) {    logger.println("SSLSocket.writeAppData: " + len + " "+ SSLRecordProtocol.MAX_DATA_LENGTH);  }  try {    if (len < SSLRecordProtocol.MAX_DATA_LENGTH) {      output.write(recordProtocol.wrap(ContentType.APPLICATION_DATA,data,offset,len));    } else {      while (len >= SSLRecordProtocol.MAX_DATA_LENGTH) {        output.write(recordProtocol.wrap(ContentType.APPLICATION_DATA,data,offset,SSLRecordProtocol.MAX_DATA_LENGTH));        offset+=SSLRecordProtocol.MAX_DATA_LENGTH;        len-=SSLRecordProtocol.MAX_DATA_LENGTH;      }      if (len > 0) {        output.write(recordProtocol.wrap(ContentType.APPLICATION_DATA,data,offset,len));      }    }  } catch (  AlertException e) {    reportFatalAlert(e.getDescriptionCode(),e.getReason());  }}  }
class C{  public LocalDate create(int year,Fixed fixed){  return create(year,xmlUtil.getMonth(fixed.getMonth()),fixed.getDay());}  }
class C{  public synchronized void finer(String sourceClass,String sourceMethod,String msg,Object[] params){  LogRecord record=new LogRecord(Level.FINER,msg);  record.setSourceClassName(sourceClass);  record.setSourceMethodName(sourceMethod);  record.setParameters(params);  log(record);}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:06.755 -0500",hash_original_method="3BE6817A95031499261EFB4432AAFCBF",hash_generated_method="DD263612467E12256A9D2943B451B889") protected Socket(SocketImpl impl) throws SocketException {  this.impl=impl;  this.proxy=null;}  }
class C{  @Override public final boolean isWeaponBlockedAt(int loc,boolean isRear){  boolean result=false;  Entity trooper=game.getEntity(troopers);  if (null != trooper) {    int tloc=BattleArmor.LOC_SQUAD;    int tloc2=BattleArmor.LOC_SQUAD;switch (loc) {case Tank.LOC_REAR:      tloc=BattleArmor.LOC_TROOPER_5;    tloc2=BattleArmor.LOC_TROOPER_6;  break;case Tank.LOC_LEFT:tloc=BattleArmor.LOC_TROOPER_3;tloc2=BattleArmor.LOC_TROOPER_4;break;case Tank.LOC_RIGHT:tloc=BattleArmor.LOC_TROOPER_1;tloc2=BattleArmor.LOC_TROOPER_2;break;}if (((trooper.locations() > tloc) && (trooper.getInternal(tloc) > 0)) || ((trooper.locations() > tloc2) && (trooper.getInternal(tloc2) > 0))) {result=true;}}return result;}  }
class C{  public void insert(int index,byte[] v){  if (v == null) {    insertNull(index);  } else {    _insert(index,binaryNode(v));  }}  }
class C{  public synchronized int lastIndexOf(Object object,int location){  if (location < elementCount) {    if (object != null) {      for (int i=location; i >= 0; i--) {        if (object.equals(elementData[i])) {          return i;        }      }    } else {      for (int i=location; i >= 0; i--) {        if (elementData[i] == null) {          return i;        }      }    }    return -1;  }  throw new ArrayIndexOutOfBoundsException(location);}  }
class C{  public static void loadViPersonalNames(String filename){  try {    FileInputStream in=new FileInputStream(filename);    if (hsViFamilyNames == null) {      hsViFamilyNames=new HashSet();      hsViLastNames=new HashSet();      hsViMiddleNames=new HashSet();      BufferedReader reader=new BufferedReader(new InputStreamReader(in,"UTF-8"));      String line;      while ((line=reader.readLine()) != null) {        line=line.trim();        if (line.equals(""))         continue;        int idxSpace=line.indexOf(' ');        int lastIdxSpace=line.lastIndexOf(' ');        if (idxSpace != -1) {          String strFamilyName=line.substring(0,idxSpace);          hsViFamilyNames.add(strFamilyName);        }        if ((idxSpace != -1) && (lastIdxSpace > idxSpace + 1)) {          String strMiddleName=line.substring(idxSpace + 1,lastIdxSpace - 1);          hsViMiddleNames.add(strMiddleName);        }        if (lastIdxSpace != -1) {          String strLastName=line.substring(lastIdxSpace + 1,line.length());          hsViLastNames.add(strLastName);        }      }      in.close();    }  } catch (  Exception e) {    e.printStackTrace();    System.err.print(e.getMessage());  }}  }
class C{  public Vertex createWord(String text,Vertex meaning,Network network,Primitive classification){  return createWord(text,meaning,false,network,classification,null,null,null,null);}  }
class C{  public void removeRecipePanel(@NotNull RecipeWidget recipe){  if (recipePanels.get(recipe) != null) {    recipePanels.remove(recipe);  }}  }
class C{  public TungstenProperties asProperties(){  TungstenProperties caps=new TungstenProperties();  caps.setStringList(ROLES,getRoles());  caps.setString(MODEL,getModel());  caps.setBoolean(CAP_CONSISTENCY,this.isConsistencyCheck());  caps.setBoolean(CAP_HEARTBEAT,this.isHeartbeat());  caps.setBoolean(CAP_FLUSH,this.isFlush());  caps.setString(PROVISION,getProvisionDriver());  return caps;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:03.967 -0500",hash_original_method="79A0D897F753E955B6701F092D250BC1",hash_generated_method="FDF76E43A7A96F317B3248A9FD9041E9") public TFTPErrorPacket(InetAddress destination,int port,int error,String message){  super(TFTPPacket.ERROR,destination,port);  _error=error;  _message=message;}  }
class C{  @SuppressWarnings("unchecked") void registerUnknown(Instruction s,BasicBlock b){  if (VM.VerifyAssertions)   VM._assert(s.operator() != PHI);  Iterator vars=heapVariables.values().iterator();  HeapOperand<Object>[] all=new HeapOperand[heapVariables.size()];  for (int i=0; i < all.length; i++) {    all[i]=new HeapOperand<Object>((HeapVariable<Object>)vars.next());    all[i].setInstruction(s);    all[i].getHeapVariable().registerDef(b);  }  uses.put(s,all);  defs.put(s,all);  exits.add(s);}  }
class C{  public void writeField(String name,double value) throws java.io.IOException {  writeField(name,Double.toString(value));}  }
class C{  @Override public void run(){  amIActive=true;  try {    String inputFilesString=null;    String idrisiHeaderFile=null;    String idrisiDataFile=null;    String whiteboxHeaderFile=null;    String whiteboxDataFile=null;    WhiteboxRaster output=null;    int i=0;    int row, col, rows, cols;    String[] imageFiles;    int numImages=0;    double noData=-32768;    int progress=0;    if (args.length <= 0) {      showFeedback("Plugin parameters have not been set.");      return;    }    inputFilesString=args[0];    if ((inputFilesString == null)) {      showFeedback("One or more of the input parameters have not been set properly.");      return;    }    imageFiles=inputFilesString.split(";");    numImages=imageFiles.length;    for (i=0; i < numImages; i++) {      if (numImages > 1) {        progress=(int)(100f * i / (numImages - 1));        updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      }      whiteboxHeaderFile=imageFiles[i];      if (!((new File(whiteboxHeaderFile)).exists())) {        showFeedback("Whitebox raster file does not exist.");        break;      }      WhiteboxRaster wbr=new WhiteboxRaster(whiteboxHeaderFile,"r");      rows=wbr.getNumberRows();      cols=wbr.getNumberColumns();      noData=wbr.getNoDataValue();      idrisiHeaderFile=whiteboxHeaderFile.replace(".dep",".rdc");      idrisiDataFile=whiteboxHeaderFile.replace(".dep",".rst");      (new File(idrisiHeaderFile)).delete();      (new File(idrisiDataFile)).delete();      WhiteboxRaster.DataType dataType;      if (wbr.getDataType() == WhiteboxRaster.DataType.FLOAT || wbr.getDataType() == WhiteboxRaster.DataType.DOUBLE) {        dataType=WhiteboxRaster.DataType.FLOAT;      } else {        dataType=WhiteboxRaster.DataType.INTEGER;      }      output=new WhiteboxRaster(whiteboxHeaderFile.replace(".dep","_temp.dep"),"rw",whiteboxHeaderFile,dataType,-9999);      output.setNoDataValue(-9999);      whiteboxDataFile=whiteboxHeaderFile.replace(".dep","_temp.tas");      double[] data=null;      for (row=0; row < rows; row++) {        data=wbr.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != noData) {            output.setValue(row,col,data[col]);          } else {            output.setValue(row,col,-9999);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }      output.close();      File dataFile=new File(whiteboxDataFile);      File idrisiFile=new File(idrisiDataFile);      dataFile.renameTo(idrisiFile);      boolean success=createHeaderFile(wbr,idrisiHeaderFile);      if (!success) {        showFeedback("IDRISI header file was not written properly. " + "Tool failed to export");        return;      }      wbr.close();      (new File(whiteboxHeaderFile.replace(".dep","_temp.dep"))).delete();    }    showFeedback("Operation complete!");  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  String distanceOutputHeader=null;  int i;  int progress;  int row, col;  double z=0;  double distConvFactor=1.0;  double gridRes=0;  double currentVal=0;  double currentMaxVal=0;  double maxValDist=0;  double maxDist=0;  double lineSlope=0;  boolean saveDistance=false;  double azimuth=0;  double deltaX=0;  double deltaY=0;  double x=0;  int x1=0;  int x2=0;  double y=0;  int y1=0;  int y2=0;  double z1=0;  double z2=0;  double dist=0;  double slope=0;  double yIntercept=0;  int xStep=0;  int yStep=0;  double noData=0;  boolean flag=false;  double aSmallValue=-9999999;  maxDist=Double.MAX_VALUE;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  azimuth=Double.parseDouble(args[2]);  if (azimuth > 360 || azimuth < 0) {    azimuth=0.1;  }  if (azimuth == 0) {    azimuth=0.1;  }  if (azimuth == 180) {    azimuth=179.9;  }  if (azimuth == 360) {    azimuth=359.9;  }  if (azimuth < 180) {    lineSlope=Math.tan(Math.toRadians(90 - azimuth));  } else {    lineSlope=Math.tan(Math.toRadians(270 - azimuth));  }  if (!args[3].toLowerCase().equals("not specified")) {    maxDist=Double.parseDouble(args[3]);  }  if (!args[4].toLowerCase().equals("not specified")) {    saveDistance=true;    distanceOutputHeader=args[4];  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    DEM.setForceAllDataInMemory(true);    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    noData=DEM.getNoDataValue();    if (DEM.getXYUnits().toLowerCase().contains("deg") || DEM.getProjection().toLowerCase().contains("geog")) {      double midLat=(DEM.getNorth() - DEM.getSouth()) / 2.0;      if (midLat <= 90 && midLat >= -90) {        distConvFactor=(113200 * Math.cos(Math.toRadians(midLat)));      }    }    gridRes=(DEM.getCellSizeX() + DEM.getCellSizeY()) / 2 * distConvFactor;    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("grey.pal");    output.setForceAllDataInMemory(true);    WhiteboxRaster outputDist=null;    if (saveDistance) {      outputDist=new WhiteboxRaster(distanceOutputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);      outputDist.setPreferredPalette("blue_white_red.pal");      outputDist.setForceAllDataInMemory(true);    }    if (azimuth > 0 && azimuth <= 90) {      xStep=1;      yStep=1;    } else     if (azimuth <= 180) {      xStep=1;      yStep=-1;    } else     if (azimuth <= 270) {      xStep=-1;      yStep=-1;    } else {      xStep=-1;      yStep=1;    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        currentVal=DEM.getValue(row,col);        if (currentVal != noData) {          yIntercept=-row - lineSlope * col;          currentMaxVal=aSmallValue;          maxValDist=aSmallValue;          x=col;          flag=true;          do {            x=x + xStep;            if (x < 0 || x >= cols) {              flag=false;              break;            }            y=(lineSlope * x + yIntercept) * -1;            if (y < 0 || y >= rows) {              flag=false;              break;            }            deltaX=(x - col) * gridRes;            deltaY=(y - row) * gridRes;            dist=Math.sqrt(deltaX * deltaX + deltaY * deltaY);            if (dist > maxDist) {              flag=false;              break;            }            y1=(int)(y);            y2=y1 + yStep * -1;            z1=DEM.getValue(y1,(int)x);            z2=DEM.getValue(y2,(int)x);            z=z1 + (y - y1) * (z2 - z1);            slope=(z - currentVal) / dist;            if (slope > currentMaxVal) {              currentMaxVal=slope;              maxValDist=dist;            } else             if (currentMaxVal < 0) {              maxValDist=dist;            }          } while (flag);          y=-row;          flag=true;          do {            y=y + yStep;            if (-y < 0 || -y >= rows) {              flag=false;              break;            }            x=(y - yIntercept) / lineSlope;            if (x < 0 || x >= cols) {              flag=false;              break;            }            deltaX=(x - col) * gridRes;            deltaY=(-y - row) * gridRes;            dist=Math.sqrt(deltaX * deltaX + deltaY * deltaY);            if (dist > maxDist) {              flag=false;              break;            }            x1=(int)x;            x2=x1 + xStep;            if (x2 < 0 || x2 >= cols) {              flag=false;              break;            }            z1=DEM.getValue((int)-y,x1);            z2=DEM.getValue((int)y,x2);            z=z1 + (x - x1) * (z2 - z1);            slope=(z - currentVal) / dist;            if (slope > currentMaxVal) {              currentMaxVal=slope;              maxValDist=dist;            } else             if (currentMaxVal < 0) {              maxValDist=dist;            }          } while (flag);          z=Math.toDegrees(Math.atan(currentMaxVal));          if (z < -89) {            z=0;          }          if (currentMaxVal != aSmallValue) {            output.setValue(row,col,z);            if (saveDistance) {              if (z < 0) {                maxValDist=maxValDist * -1;              }              outputDist.setValue(row,col,maxValDist);            }          } else {            output.setValue(row,col,noData);            if (saveDistance) {              outputDist.setValue(row,col,noData);            }          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    if (saveDistance) {      outputDist.close();    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static PendingIntent makeReceiverPendingIntent(Context context){  return PendingIntent.getBroadcast(context,DELETE_CACHE_REQUEST_CODE,new Intent(context,CacheCleanupReceiver.class),PendingIntent.FLAG_CANCEL_CURRENT);}  }
class C{  private static String sniffCharacterEncoding(ByteBuffer content){  int length=Math.min(content.remaining(),CHUNK_SIZE);  String str="";  try {    str=new String(content.array(),content.arrayOffset() + content.position(),length,Charset.forName("ASCII").toString());  } catch (  UnsupportedEncodingException e) {    return null;  }  Matcher metaMatcher=metaPattern.matcher(str);  String encoding=null;  if (metaMatcher.find()) {    Matcher charsetMatcher=charsetPattern.matcher(metaMatcher.group(1));    if (charsetMatcher.find())     encoding=new String(charsetMatcher.group(1));  }  if (encoding == null) {    metaMatcher=charsetPatternHTML5.matcher(str);    if (metaMatcher.find()) {      encoding=new String(metaMatcher.group(1));    }  }  if (encoding == null) {    if (length >= 3 && content.get(0) == (byte)0xEF && content.get(1) == (byte)0xBB && content.get(2) == (byte)0xBF) {      encoding="UTF-8";    } else     if (length >= 2) {      if (content.get(0) == (byte)0xFF && content.get(1) == (byte)0xFE) {        encoding="UTF-16LE";      } else       if (content.get(0) == (byte)0xFE && content.get(1) == (byte)0xFF) {        encoding="UTF-16BE";      }    }  }  return encoding;}  }
class C{  public eu.europa.esig.dss.jaxb.simplereport.SimpleReport build(){  SimpleReport simpleReport=new SimpleReport();  addPolicyNode(simpleReport);  addValidationTime(simpleReport);  addDocumentName(simpleReport);  addSignatures(simpleReport);  addStatistics(simpleReport);  return simpleReport;}  }
class C{  public boolean containsDouble(double value){  boolean isNan=Double.isNaN(value);  for (int i=1; i < maxPoolSize; i++) {    if (types[i] == DOUBLE) {      double d=readDouble(i);      if (d == value || (isNan && Double.isNaN(d)))       return true;    }  }  return false;}  }
class C{  public ZParams weights(final double... weights){  params.add(WEIGHTS.raw);  for (  final double weight : weights) {    params.add(Protocol.toByteArray(weight));  }  return this;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case ExpressionsPackage.TYPE_CAST_EXPRESSION__OPERAND:    setOperand((Expression)newValue);  return;case ExpressionsPackage.TYPE_CAST_EXPRESSION__TYPE:setType((Type)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void paint(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).paint(a,b);  }}  }
class C{  public static MCashLine createCashLine(Properties ctx,int cashId,int invoiceId,BigDecimal amount,BigDecimal writeOffAmout,BigDecimal discountAmt,String trxName) throws OperationException {  MInvoice invoice=new MInvoice(ctx,invoiceId,trxName);  if (invoice.get_ID() == 0) {    throw new OperationException("Could not load invoice!!!");  }  MCashLine cashLine=new MCashLine(ctx,0,trxName);  cashLine.setC_Cash_ID(cashId);  cashLine.setInvoice(invoice);  cashLine.setAmount(amount);  cashLine.setWriteOffAmt(writeOffAmout);  cashLine.setDiscountAmt(discountAmt);  PoManager.save(cashLine);  return cashLine;}  }
class C{  public SList(){  size=0;  sentinel=new Node(null,null);}  }
class C{  public void flagsUpdated(MailboxSession session,List<MessageUid> uids,Mailbox mailbox,List<UpdatedFlags> uflags){  listener.event(eventFactory.flagsUpdated(session,uids,mailbox,uflags));}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public static boolean hasHoneycombMR1(){  return Build.VERSION.SDK_INT >= 12;}  }
class C{  public comment addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public static final double[] unitVector(final int dimensionality,final int i){  final double[] v=new double[dimensionality];  v[i]=1;  return v;}  }
class C{  public XMLString newstr(FastStringBuffer fsb,int start,int length){  return new XStringForFSB(fsb,start,length);}  }
class C{  public List<Integer> emit(List<Object> tuple,Object messageId){  return emit(Utils.DEFAULT_STREAM_ID,tuple,messageId);}  }
class C{  public boolean containsKey(K key){  if (list == null) {    return false;  }  return list.get(key) != null;}  }
class C{  public Set<IVariable<?>> leftToBeBound(Set<IVariable<?>> knownBound){  HashSet<IVariable<?>> toBeBound=new HashSet<IVariable<?>>();  toBeBound.addAll(requiredBound);  toBeBound.removeAll(knownBound);  return toBeBound;}  }
class C{  public void deleteDatabase(){  final SQLiteDatabase database=getReadableDatabase();  database.delete(RecentStoreColumns.NAME,null,null);}  }
class C{  public EdgewiseComparisonModel(SessionModel model1,SessionModel model2,Parameters params){  if (params == null) {    throw new NullPointerException("Parameters must not be null");  }  if (model2 == null) {    model2=new DagWrapper(new Dag());  }  if (model1 == null) {    model1=new DagWrapper(new Dag());  }  if (!(model1 instanceof MultipleGraphSource) || !(model2 instanceof MultipleGraphSource)) {    throw new IllegalArgumentException("Must be graph sources.");  }  if (model1 instanceof GeneralAlgorithmRunner && model2 instanceof GeneralAlgorithmRunner) {    throw new IllegalArgumentException("Both parents can't be general algorithm runners.");  }  if (model1 instanceof GeneralAlgorithmRunner) {    GeneralAlgorithmRunner generalAlgorithmRunner=(GeneralAlgorithmRunner)model1;    this.algorithm=generalAlgorithmRunner.getAlgorithm();  } else   if (model2 instanceof GeneralAlgorithmRunner) {    GeneralAlgorithmRunner generalAlgorithmRunner=(GeneralAlgorithmRunner)model2;    this.algorithm=generalAlgorithmRunner.getAlgorithm();  }  this.params=params;  String referenceName=this.params.getString("referenceGraphName",null);  if (referenceName == null) {    throw new IllegalArgumentException("Must specify a reference graph.");  } else {    Object model11=model1;    Object model21=model2;    if (referenceName.equals(model1.getName())) {      if (model11 instanceof MultipleGraphSource) {        this.referenceGraphs=((MultipleGraphSource)model11).getGraphs();      }      if (model21 instanceof MultipleGraphSource) {        this.targetGraphs=((MultipleGraphSource)model21).getGraphs();      }      if (referenceGraphs == null) {        this.referenceGraphs=Collections.singletonList(((GraphSource)model11).getGraph());      }      if (targetGraphs == null) {        this.targetGraphs=Collections.singletonList(((GraphSource)model21).getGraph());      }    } else     if (referenceName.equals(model2.getName())) {      if (model21 instanceof MultipleGraphSource) {        this.referenceGraphs=((MultipleGraphSource)model21).getGraphs();      }      if (model11 instanceof MultipleGraphSource) {        this.targetGraphs=((MultipleGraphSource)model11).getGraphs();      }      if (referenceGraphs == null) {        this.referenceGraphs=Collections.singletonList(((GraphSource)model21).getGraph());      }      if (targetGraphs == null) {        this.targetGraphs=Collections.singletonList(((GraphSource)model11).getGraph());      }    } else {      throw new IllegalArgumentException("Neither of the supplied session models is named '" + referenceName + "'.");    }  }  if (algorithm != null) {    for (int i=0; i < referenceGraphs.size(); i++) {      referenceGraphs.set(i,algorithm.getComparisonGraph(referenceGraphs.get(i)));    }  }  if (referenceGraphs.size() != targetGraphs.size()) {    throw new IllegalArgumentException("I was expecting the same number of graphs in each parent.");  }  TetradLogger.getInstance().log("info","Graph Comparison");  for (int i=0; i < referenceGraphs.size(); i++) {    TetradLogger.getInstance().log("comparison","\nModel " + (i + 1));    TetradLogger.getInstance().log("comparison",getComparisonString(i));  }}  }
class C{  public DoubleMatrix(int rows,int cols){  this.rows=rows;  this.cols=cols;  mtrx=new double[rows][cols];}  }
class C{  public DoubleBuffer collapse(DoubleBuffer[] buffers){  int W=0;  for (int i=0; i < buffers.length; i++) {    W+=buffers[i].weight();  }  int k=this.k();  long[] triggerPositions=new long[k];  for (int j=0; j < k; j++) {    triggerPositions[j]=this.nextTriggerPosition(j,W);  }  double[] outputValues=this.getValuesAtPositions(buffers,triggerPositions);  for (int b=1; b < buffers.length; b++)   buffers[b].clear();  DoubleBuffer outputBuffer=buffers[0];  outputBuffer.values.elements(outputValues);  outputBuffer.weight(W);  return outputBuffer;}  }
class C{  public void onTabClicked(View view){switch (view.getId()) {case R.id.btn_conversation:    index=0;  break;case R.id.btn_address_list:index=1;break;case R.id.btn_find:index=2;break;case R.id.btn_profile:index=3;break;}if (currentTabIndex != index) {FragmentTransaction trx=getSupportFragmentManager().beginTransaction();trx.hide(fragments[currentTabIndex]);if (!fragments[index].isAdded()) {trx.add(R.id.fragment_container,fragments[index]);}trx.show(fragments[index]).commit();}mTabs[currentTabIndex].setSelected(false);mTabs[index].setSelected(true);currentTabIndex=index;}  }
class C{  public NATURAL_LEFT_OUTER_JOIN NATURAL_LEFT_OUTER_JOIN(String tableToJoin){  return new NATURAL_LEFT_OUTER_JOIN(this,tableToJoin);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void read(int i){  VariableValue v=rowVector.elementAt(i);  v.readAll();}  }
class C{  public Category(String scheme,String term){  this(scheme,term,null);}  }
class C{  protected TStructSetterImpl(){  super();}  }
class C{  @PUT @Consumes({MediaType.MULTIPART_FORM_DATA}) @Produces({MediaType.APPLICATION_JSON}) public String updateClientImage(@PathParam("entity") final String entityName,@PathParam("entityId") final Long entityId,@HeaderParam("Content-Length") final Long fileSize,@FormDataParam("file") final InputStream inputStream,@FormDataParam("file") final FormDataContentDisposition fileDetails,@FormDataParam("file") final FormDataBodyPart bodyPart){  return addNewClientImage(entityName,entityId,fileSize,inputStream,fileDetails,bodyPart);}  }
class C{  public static void loadExcludesFile(String fileName) throws IOException {  loadExcludesFile(new File(fileName));}  }
class C{  protected void paintIcon(Graphics g,AbstractButton b,Rectangle iconRect){  super.paintIcon(g,b,iconRect);}  }
class C{  public void addInterface(CP ifc){  addCPItem(ifc);  interfaces.addElement(ifc);}  }
class C{  public MockTransaction(final Account sender,final int customField,final TimeInstant timeStamp){  super(TYPE,VERSION,timeStamp,sender);  this.customField=customField;  this.setDeadline(timeStamp.addHours(2));}  }
class C{  public RcsGenericException(Throwable cause){  super(cause);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case FunctionblockPackage.EVENT__NAME:    return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);case FunctionblockPackage.EVENT__PROPERTIES:  return properties != null && !properties.isEmpty();}return super.eIsSet(featureID);}  }
class C{  @Override public void actionPerformed(ActionEvent e){  if (abort()) {    return;  }  SendBitcoinConfirmDialog sendBitcoinConfirmDialog=null;  ValidationErrorDialog validationErrorDialog=null;  try {    String sendAddress=dataProvider.getAddress();    String sendAmount=dataProvider.getAmount();    Validator validator=new Validator(super.bitcoinController);    if (validator.validate(sendAddress,sendAmount)) {      Address sendAddressObject;      sendAddressObject=new Address(bitcoinController.getModel().getNetworkParameters(),sendAddress);      SendRequest sendRequest=SendRequest.to(sendAddressObject,Utils.toNanoCoins(sendAmount));      sendRequest.ensureMinRequiredFee=true;      sendRequest.fee=BigInteger.ZERO;      sendRequest.feePerKb=BitcoinModel.SEND_FEE_PER_KB_DEFAULT;      log.debug("Just about to complete the tx (and calculate the fee)...");      boolean completedOk;      try {        bitcoinController.getModel().getActiveWallet().completeTx(sendRequest,false);        completedOk=true;        log.debug("The fee after completing the transaction was " + sendRequest.fee);      } catch (      InsufficientMoneyException ime) {        completedOk=false;      }      if (completedOk) {        sendBitcoinConfirmDialog=new SendBitcoinConfirmDialog(super.bitcoinController,mainFrame,sendRequest);        sendBitcoinConfirmDialog.setVisible(true);      } else {        validationErrorDialog=new ValidationErrorDialog(super.bitcoinController,mainFrame,sendRequest,true);        validationErrorDialog.setVisible(true);      }    } else {      validationErrorDialog=new ValidationErrorDialog(super.bitcoinController,mainFrame,null,false);      validationErrorDialog.setVisible(true);    }  } catch (  WrongNetworkException e1) {    logMessage(e1);  }catch (  AddressFormatException e1) {    logMessage(e1);  }catch (  KeyCrypterException e1) {    logMessage(e1);  }catch (  Exception e1) {    logMessage(e1);  }}  }
class C{  private static Iterable<String> extend(final Iterable<String> head,final String header){  if (!RsWithHeader.HEADER.matcher(header).matches()) {    throw new IllegalArgumentException(String.format("header line of HTTP response \"%s\" doesn't match \"%s\" regular expression, but it should, according to RFC 7230",header,RsWithHeader.HEADER));  }  return new Concat<String>(head,Collections.singleton(header));}  }
class C{  public void createActiveAgents(Scenario scenario,String personId,String mode,Double homeActEndTime){  PopulationFactory pFactory=scenario.getPopulation().getFactory();  Person person=pFactory.createPerson(Id.create(personId,Person.class));  Plan plan=pFactory.createPlan();  Coord homeCoords=new Coord(1.0,10000.0);  Activity home=pFactory.createActivityFromCoord("home",homeCoords);  home.setEndTime(homeActEndTime);  plan.addActivity(home);  Leg leg1=pFactory.createLeg(mode);  plan.addLeg(leg1);  Coord workCoords=new Coord(19999.0,10000.0);  Activity work=pFactory.createActivityFromCoord("work",workCoords);  work.setEndTime(homeActEndTime + 600 + 8 * 3600);  plan.addActivity(work);  Leg leg2=pFactory.createLeg(mode);  plan.addLeg(leg2);  home=pFactory.createActivityFromCoord("home",homeCoords);  plan.addActivity(home);  person.addPlan(plan);  scenario.getPopulation().addPerson(person);}  }
class C{  @VisibleForTesting void invokeSubscriberMethod(Object event) throws InvocationTargetException {  try {    method.invoke(target,checkNotNull(event));  } catch (  IllegalArgumentException e) {    throw new Error("Method rejected target/argument: " + event,e);  }catch (  IllegalAccessException e) {    throw new Error("Method became inaccessible: " + event,e);  }catch (  InvocationTargetException e) {    if (e.getCause() instanceof Error) {      throw (Error)e.getCause();    }    throw e;  }}  }
class C{  @Override public void mutate(){  for (int i=0; i < this.getNumberOfVariables(); i++) {    Variable v=this.getVariable(i);    if (v instanceof DoubleVariable)     this.mutate((DoubleVariable)v);  }}  }
class C{  public static void notEmpty(Map<?,?> str,String message,Object... params) throws AssertException {  if (CommonUtil.isEmpty(str)) {    throw new AssertException(ErrorCodeDef.IS_NULL_20006,message,params);  }}  }
class C{  public Discretize(Element discretize,FieldMetaInfo.Optype opType,ArrayList<Attribute> fieldDefs) throws Exception {  super(opType,fieldDefs);  m_fieldName=discretize.getAttribute("field");  m_mapMissingTo=discretize.getAttribute("mapMissingTo");  if (m_mapMissingTo != null && m_mapMissingTo.length() > 0) {    m_mapMissingDefined=true;  }  m_defaultValue=discretize.getAttribute("defaultValue");  if (m_defaultValue != null && m_defaultValue.length() > 0) {    m_defaultValueDefined=true;  }  NodeList dbL=discretize.getElementsByTagName("DiscretizeBin");  for (int i=0; i < dbL.getLength(); i++) {    Node dbN=dbL.item(i);    if (dbN.getNodeType() == Node.ELEMENT_NODE) {      Element dbE=(Element)dbN;      DiscretizeBin db=new DiscretizeBin(dbE,m_opType);      m_bins.add(db);    }  }  if (fieldDefs != null) {    setUpField();  }}  }
class C{  protected boolean remove(LinkedList files){  if (files == null) {    Debug.error("No files configured for removal!");    return false;  }  Iterator it=files.iterator();  while (it.hasNext()) {    File file=(File)it.next();    Debug.output("DTEDAdmin deleting " + file.getAbsolutePath());    file.delete();  }  return true;}  }
class C{  private void initRange(){  mMinX=MathHelper.NULL_VALUE;  mMaxX=-MathHelper.NULL_VALUE;  mMinY=MathHelper.NULL_VALUE;  mMaxY=-MathHelper.NULL_VALUE;  int length=getItemCount();  for (int k=0; k < length; k++) {    double x=getX(k);    double y=getY(k);    updateRange(x,y);  }  int i=0;}  }
class C{  public static int wrap(int index,int max){  if (index < 0) {    return max - ((-index) % max);  }  return index % max;}  }
class C{  public static boolean booleanValue(String s){  boolean b=false;  if (s != null) {    if (s.equalsIgnoreCase("yes")) {      b=true;    } else {      b=Boolean.valueOf(s).booleanValue();    }  }  return b;}  }
class C{  public static String convertCharEntity(String charEntity,boolean lookupHTMLentities,Hashtable userDefinedCharEntities){  int charCode=-1;  if (charEntity.startsWith("#")) {    if (charEntity.startsWith("#x")) {      try {        charCode=Integer.parseInt(charEntity.substring(2),16);      } catch (      NumberFormatException nfe) {      }    } else {      try {        charCode=Integer.parseInt(charEntity.substring(1));      } catch (      NumberFormatException nfe) {      }    }  } else {    charCode=getCharEntityCode(charEntity,lookupHTMLentities,userDefinedCharEntities);  }  if (charCode != -1) {    return "" + (char)charCode;  } else {    throw new IllegalArgumentException("Unknown character entity - " + charEntity);  }}  }
class C{  public void testConstructorStringException1(){  String value="9234853876401";  int radix=45;  try {    new BigInteger(value,radix);    fail("NumberFormatException has not been caught");  } catch (  NumberFormatException e) {  }}  }
class C{  public ReplDBMSEvent createEvent(long seqno,short fragNo,boolean lastFrag,String shardId,Timestamp timestamp){  return createEvent(seqno,fragNo,lastFrag,shardId,timestamp,0);}  }
class C{  private void fixedPointSimplestCaseNonCyclicFillRaster(int[] pixels,int off,int adjust,int x,int y,int w,int h){  float iSq=0;  final float indexFactor=fastGradientArraySize / radius;  final float constX=(a00 * x) + (a01 * y) + constA;  final float constY=(a10 * x) + (a11 * y) + constB;  final float deltaX=indexFactor * a00;  final float deltaY=indexFactor * a10;  float dX, dY;  final int fixedArraySizeSq=(fastGradientArraySize * fastGradientArraySize);  float g, gDelta, gDeltaDelta, temp;  int gIndex;  int iSqInt;  int end, j;  int indexer=off;  temp=((deltaX * deltaX) + (deltaY * deltaY));  gDeltaDelta=((temp * 2));  if (temp > fixedArraySizeSq) {    final int val=gradientOverflow;    for (j=0; j < h; j++) {      for (end=indexer + w; indexer < end; indexer++)       pixels[indexer]=val;      indexer+=adjust;    }    return;  }  for (j=0; j < h; j++) {    dX=indexFactor * ((a01 * j) + constX);    dY=indexFactor * ((a11 * j) + constY);    g=(((dY * dY) + (dX * dX)));    gDelta=(deltaY * dY + deltaX * dX) * 2 + temp;    for (end=indexer + w; indexer < end; indexer++) {      if (g >= fixedArraySizeSq) {        pixels[indexer]=gradientOverflow;      } else {        iSq=(g * invSqStepFloat);        iSqInt=(int)iSq;        iSq-=iSqInt;        gIndex=sqrtLutFixed[iSqInt];        gIndex+=(int)(iSq * (sqrtLutFixed[iSqInt + 1] - gIndex));        pixels[indexer]=gradient[gIndex];      }      g+=gDelta;      gDelta+=gDeltaDelta;    }    indexer+=adjust;  }}  }
class C{  public void run(){  LogConnection conn=null;  try {    conn=thl.connect(false);    ReplDBMSEvent rde;    while ((rde=producer.nextEvent()) != null) {      maxSeqno=rde.getSeqno();      THLEvent thlEvent=new THLEvent(rde.getSourceId(),rde);      conn.store(thlEvent,false);      conn.commit();      events++;    }    logger.info("Finished writing events to log: events=" + events + " maxSeqno="+ maxSeqno);  } catch (  InterruptedException e) {    logger.info("Event generator task loop interrupted");  }catch (  Exception e) {    logger.error("Generation loop failed!",e);    exception=e;  }catch (  Throwable t) {    logger.error("Generation loop failed!",t);  } finally {    if (conn != null) {      try {        thl.disconnect(conn);      } catch (      ReplicatorException e) {        logger.warn("Unable to disconnect from log after generating events",e);      }    }    done=true;  }}  }
class C{  public static void printArray(int[] arr){  System.out.print("[ ");  for (int j=0; j < (arr.length - 1); j++) {    System.out.print(arr[j] + ", ");  }  if (arr.length > 0) {    System.out.print(arr[arr.length - 1]);  }  System.out.println(" ]");}  }
class C{  @Override public Long zremrangeByRank(final String key,final long start,final long end){  checkIsInMultiOrPipeline();  client.zremrangeByRank(key,start,end);  return client.getIntegerReply();}  }
class C{  public Collection values(){  return map.values();}  }
class C{  protected void unhandledMessageReceived(OFMessage m){  counters.unhandledMessage.increment();  if (log.isDebugEnabled()) {    String msg=getSwitchStateMessage(m,"Ignoring unexpected message");    log.debug(msg);  }}  }
class C{  private String cleanup(String col){  int idx=col.indexOf(" ");  if (idx > 0)   return col.substring(0,idx); else   return col;}  }
class C{  public static double cuCreal(cuDoubleComplex x){  return x.x;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (Ripper.getGlobalRipper().isComplete()) {    if (Ripper.getGlobalRipper().wasSuccessful())     return Boolean.TRUE; else     return "Error";  } else   return Ripper.getGlobalRipper().getStatusMessage();}  }
class C{  public TicketParser(DeviceTicket printer,DataLogicSystem system){  m_printer=printer;  m_system=system;  today=Calendar.getInstance().getTime();}  }
class C{  public void childrenRemoved(BeanContextMembershipEvent bcme){  Iterator it=bcme.iterator();  while (it.hasNext()) {    findAndUndo(it.next());  }}  }
class C{  public boolean hasProperty(String name){  for (  Property property : allProperties()) {    if (property.getName().equals(name)) {      return true;    }  }  return false;}  }
class C{  protected GenericSortingTest(){}  }
class C{  public MatrixCursor(String[] columnNames){  this(columnNames,16);}  }
class C{  public static <T>Set<T> minus(Set<T> self,Object removeMe){  Comparator comparator=(self instanceof SortedSet) ? ((SortedSet)self).comparator() : null;  final Set<T> ansSet=createSimilarSet(self);  for (  T t : self) {    boolean areEqual=(comparator != null) ? (comparator.compare(t,removeMe) == 0) : coercedEquals(t,removeMe);    if (!areEqual)     ansSet.add(t);  }  return ansSet;}  }
class C{  ResourceThread(DocumentInfo cssDocInfo,HTMLComponent htmlC,ResourceThreadQueue threadQueue){  this.cssDocInfo=cssDocInfo;  this.handler=htmlC.getRequestHandler();  this.threadQueue=threadQueue;  this.htmlC=htmlC;}  }
class C{  protected void loadValue(String sValue){  if (algorithm != null && !isEncrypted(sValue)) {    setValue(encrypt(algorithm,sValue));    return;  }  value=sValue;}  }
class C{  public void addToRoomGroups(String roomGroup,String level){  this.roomGroups.add(roomGroup);  this.roomGroupLevels.add(level);}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("IsAbort"))     p_IsAbort="Y".equals(para[i].getParameter()); else     if (name.equals("AD_User_ID"))     p_AD_User_ID=para[i].getParameterAsInt(); else     if (name.equals("AD_WF_Responsible_ID"))     p_AD_WF_Responsible_ID=para[i].getParameterAsInt(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  p_AD_WF_Activity_ID=getRecord_ID();}  }
class C{  public static void deployTags(Resource dir,boolean doNew){  Resource f=dir.getRealResource("AjaxImport." + COMPONENT_EXTENSION);  if (!f.exists() || doNew)   XMLConfigFactory.createFileFromResourceEL("/resource/library/tag/AjaxImport." + COMPONENT_EXTENSION,f);  f=dir.getRealResource("AjaxProxy." + COMPONENT_EXTENSION);  if (!f.exists() || doNew)   XMLConfigFactory.createFileFromResourceEL("/resource/library/tag/AjaxProxy." + COMPONENT_EXTENSION,f);  f=dir.getRealResource("Div." + COMPONENT_EXTENSION);  if (!f.exists() || doNew)   XMLConfigFactory.createFileFromResourceEL("/resource/library/tag/Div." + COMPONENT_EXTENSION,f);  f=dir.getRealResource("Map." + COMPONENT_EXTENSION);  if (!f.exists() || doNew)   XMLConfigFactory.createFileFromResourceEL("/resource/library/tag/Map." + COMPONENT_EXTENSION,f);  f=dir.getRealResource("MapItem." + COMPONENT_EXTENSION);  if (!f.exists() || doNew)   XMLConfigFactory.createFileFromResourceEL("/resource/library/tag/MapItem." + COMPONENT_EXTENSION,f);  f=dir.getRealResource("Layout." + COMPONENT_EXTENSION);  if (!f.exists() || doNew)   XMLConfigFactory.createFileFromResourceEL("/resource/library/tag/Layout." + COMPONENT_EXTENSION,f);  f=dir.getRealResource("LayoutArea." + COMPONENT_EXTENSION);  if (!f.exists() || doNew)   XMLConfigFactory.createFileFromResourceEL("/resource/library/tag/LayoutArea." + COMPONENT_EXTENSION,f);  f=dir.getRealResource("Window." + COMPONENT_EXTENSION);  if (!f.exists() || doNew) {    XMLConfigFactory.createFileFromResourceEL("/resource/library/tag/Window." + COMPONENT_EXTENSION,f);  }  dir=dir.getRealResource("lucee/core/ajax/");  if (!dir.isDirectory())   dir.mkdirs();  f=dir.getRealResource("AjaxBase." + COMPONENT_EXTENSION);  if (!f.exists() || doNew)   XMLConfigFactory.createFileFromResourceEL("/resource/library/tag/lucee/core/ajax/AjaxBase." + COMPONENT_EXTENSION,f);  f=dir.getRealResource("AjaxBinder." + COMPONENT_EXTENSION);  if (!f.exists() || doNew)   XMLConfigFactory.createFileFromResourceEL("/resource/library/tag/lucee/core/ajax/AjaxBinder." + COMPONENT_EXTENSION,f);  f=dir.getRealResource("AjaxProxyHelper." + COMPONENT_EXTENSION);  if (!f.exists() || doNew)   XMLConfigFactory.createFileFromResourceEL("/resource/library/tag/lucee/core/ajax/AjaxProxyHelper." + COMPONENT_EXTENSION,f);  f=dir.getRealResource("JSLoader." + COMPONENT_EXTENSION);  if (!f.exists() || doNew)   XMLConfigFactory.createFileFromResourceEL("/resource/library/tag/lucee/core/ajax/JSLoader." + COMPONENT_EXTENSION,f);  f=dir.getRealResource("LuceeJs." + COMPONENT_EXTENSION);  if (f.exists())   f.delete();  Resource jsDir=dir.getRealResource("js");  if (!jsDir.isDirectory())   jsDir.mkdirs();  f=jsDir.getRealResource("LuceeAjax.js");  if (!f.exists() || doNew)   XMLConfigFactory.createFileFromResourceEL("/resource/library/tag/lucee/core/ajax/js/LuceeAjax.js",f);  f=jsDir.getRealResource("LuceeMap.js");  if (!f.exists() || doNew)   XMLConfigFactory.createFileFromResourceEL("/resource/library/tag/lucee/core/ajax/js/LuceeMap.js",f);  f=jsDir.getRealResource("LuceeWindow.js");  if (!f.exists() || doNew)   XMLConfigFactory.createFileFromResourceEL("/resource/library/tag/lucee/core/ajax/js/LuceeWindow.js",f);  f=jsDir.getRealResource("LuceeLayout.js");  if (!f.exists() || doNew)   XMLConfigFactory.createFileFromResourceEL("/resource/library/tag/lucee/core/ajax/js/LuceeLayout.js",f);  Resource gDir=dir.getRealResource("google");  if (gDir.isDirectory())   ResourceUtil.removeEL(gDir,true);  gDir=jsDir.getRealResource("google");  if (!gDir.isDirectory())   gDir.mkdirs();  f=gDir.getRealResource("google-map.js");  if (!f.exists() || doNew)   XMLConfigFactory.createFileFromResourceEL("/resource/library/tag/lucee/core/ajax/js/google/google-map.js",f);  Resource jqDir=jsDir.getRealResource("jquery");  if (!jqDir.isDirectory())   jqDir.mkdirs();  f=jqDir.getRealResource("jquery-1.4.2.js");  if (!f.exists() || doNew)   XMLConfigFactory.createFileFromResourceEL("/resource/library/tag/lucee/core/ajax/js/jquery/jquery-1.4.2.js",f);  f=jqDir.getRealResource("jquery-ui-1.8.2.js");  if (!f.exists() || doNew)   XMLConfigFactory.createFileFromResourceEL("/resource/library/tag/lucee/core/ajax/js/jquery/jquery-ui-1.8.2.js",f);  f=jqDir.getRealResource("jquery.layout.js");  if (!f.exists() || doNew)   XMLConfigFactory.createFileFromResourceEL("/resource/library/tag/lucee/core/ajax/js/jquery/jquery.layout.js",f);  f=jqDir.getRealResource("jquery.window.js");  if (!f.exists() || doNew)   XMLConfigFactory.createFileFromResourceEL("/resource/library/tag/lucee/core/ajax/js/jquery/jquery.window.js",f);  Resource cssDir=dir.getRealResource("css/jquery");  if (!cssDir.isDirectory())   cssDir.mkdirs();  f=cssDir.getRealResource("LuceeSkin.css." + TEMPLATE_EXTENSION);  if (!f.exists() || doNew)   XMLConfigFactory.createFileFromResourceEL("/resource/library/tag/lucee/core/ajax/css/jquery/LuceeSkin.css." + TEMPLATE_EXTENSION,f);  Resource imgDir=cssDir.getRealResource("images");  if (!imgDir.isDirectory())   imgDir.mkdirs();  f=imgDir.getRealResource("ui-anim_basic_16x16.gif." + TEMPLATE_EXTENSION);  if (!f.exists() || doNew)   XMLConfigFactory.createFileFromResourceEL("/resource/library/tag/lucee/core/ajax/css/jquery/images/ui-anim_basic_16x16.gif." + TEMPLATE_EXTENSION,f);  f=imgDir.getRealResource("ui-bg_flat_0_aaaaaa_40x100.png." + TEMPLATE_EXTENSION);  if (!f.exists() || doNew)   XMLConfigFactory.createFileFromResourceEL("/resource/library/tag/lucee/core/ajax/css/jquery/images/ui-bg_flat_0_aaaaaa_40x100.png." + TEMPLATE_EXTENSION,f);  f=imgDir.getRealResource("ui-bg_flat_75_ffffff_40x100.png." + TEMPLATE_EXTENSION);  if (!f.exists() || doNew)   XMLConfigFactory.createFileFromResourceEL("/resource/library/tag/lucee/core/ajax/css/jquery/images/ui-bg_flat_75_ffffff_40x100.png." + TEMPLATE_EXTENSION,f);  f=imgDir.getRealResource("ui-bg_glass_55_fbf9ee_1x400.png." + TEMPLATE_EXTENSION);  if (!f.exists() || doNew)   XMLConfigFactory.createFileFromResourceEL("/resource/library/tag/lucee/core/ajax/css/jquery/images/ui-bg_glass_55_fbf9ee_1x400.png." + TEMPLATE_EXTENSION,f);  f=imgDir.getRealResource("ui-bg_glass_65_ffffff_1x400.png." + TEMPLATE_EXTENSION);  if (!f.exists() || doNew)   XMLConfigFactory.createFileFromResourceEL("/resource/library/tag/lucee/core/ajax/css/jquery/images/ui-bg_glass_65_ffffff_1x400.png." + TEMPLATE_EXTENSION,f);  f=imgDir.getRealResource("ui-bg_glass_75_dadada_1x400.png." + TEMPLATE_EXTENSION);  if (!f.exists() || doNew)   XMLConfigFactory.createFileFromResourceEL("/resource/library/tag/lucee/core/ajax/css/jquery/images/ui-bg_glass_75_dadada_1x400.png." + TEMPLATE_EXTENSION,f);  f=imgDir.getRealResource("ui-bg_glass_75_e6e6e6_1x400.png." + TEMPLATE_EXTENSION);  if (!f.exists() || doNew)   XMLConfigFactory.createFileFromResourceEL("/resource/library/tag/lucee/core/ajax/css/jquery/images/ui-bg_glass_75_e6e6e6_1x400.png." + TEMPLATE_EXTENSION,f);  f=imgDir.getRealResource("ui-bg_glass_95_fef1ec_1x400.png." + TEMPLATE_EXTENSION);  if (!f.exists() || doNew)   XMLConfigFactory.createFileFromResourceEL("/resource/library/tag/lucee/core/ajax/css/jquery/images/ui-bg_glass_95_fef1ec_1x400.png." + TEMPLATE_EXTENSION,f);  f=imgDir.getRealResource("ui-bg_highlight-soft_75_cccccc_1x100.png." + TEMPLATE_EXTENSION);  if (!f.exists() || doNew)   XMLConfigFactory.createFileFromResourceEL("/resource/library/tag/lucee/core/ajax/css/jquery/images/ui-bg_highlight-soft_75_cccccc_1x100.png." + TEMPLATE_EXTENSION,f);  f=imgDir.getRealResource("ui-icons_222222_256x240.png." + TEMPLATE_EXTENSION);  if (!f.exists() || doNew)   XMLConfigFactory.createFileFromResourceEL("/resource/library/tag/lucee/core/ajax/css/jquery/images/ui-icons_222222_256x240.png." + TEMPLATE_EXTENSION,f);  f=imgDir.getRealResource("ui-icons_2e83ff_256x240.png." + TEMPLATE_EXTENSION);  if (!f.exists() || doNew)   XMLConfigFactory.createFileFromResourceEL("/resource/library/tag/lucee/core/ajax/css/jquery/images/ui-icons_2e83ff_256x240.png." + TEMPLATE_EXTENSION,f);  f=imgDir.getRealResource("ui-icons_454545_256x240.png." + TEMPLATE_EXTENSION);  if (!f.exists() || doNew)   XMLConfigFactory.createFileFromResourceEL("/resource/library/tag/lucee/core/ajax/css/jquery/images/ui-icons_454545_256x240.png." + TEMPLATE_EXTENSION,f);  f=imgDir.getRealResource("ui-icons_888888_256x240.png." + TEMPLATE_EXTENSION);  if (!f.exists() || doNew)   XMLConfigFactory.createFileFromResourceEL("/resource/library/tag/lucee/core/ajax/css/jquery/images/ui-icons_888888_256x240.png." + TEMPLATE_EXTENSION,f);  f=imgDir.getRealResource("ui-icons_cd0a0a_256x240.png." + TEMPLATE_EXTENSION);  if (!f.exists() || doNew)   XMLConfigFactory.createFileFromResourceEL("/resource/library/tag/lucee/core/ajax/css/jquery/images/ui-icons_cd0a0a_256x240.png." + TEMPLATE_EXTENSION,f);  dir=dir.getRealResource("loader");  if (!dir.isDirectory())   dir.mkdirs();  f=dir.getRealResource("loading.gif." + TEMPLATE_EXTENSION);  if (!f.exists() || doNew)   XMLConfigFactory.createFileFromResourceEL("/resource/library/tag/lucee/core/ajax/loader/loading.gif." + TEMPLATE_EXTENSION,f);}  }
class C{  private void disableButtons(){  for (  DeployCommand cmd : DeployCommand.values()) {    setButtonEnabled(cmd,false);  }  butDone.setEnabled(false);  setLoadEnabled(false);  setUnloadEnabled(false);  setAssaultDropEnabled(false);}  }
class C{  public InputStream fetchFileSystemInfo(final Argument argument,final Map<String,Object> keyMap,int index) throws VNXFilePluginException {  _logger.info("Creating filesystem info query");  InputStream iStream=null;  try {    Query query=new Query();    FileSystemQueryParams fsQueryParam=new FileSystemQueryParams();    AspectSelection selection=new AspectSelection();    selection.setFileSystems(true);    fsQueryParam.setAspectSelection(selection);    query.getQueryRequestChoice().add(fsQueryParam);    iStream=_vnxFileInputRequestBuilder.getQueryParamPacket(fsQueryParam,false);  } catch (  JAXBException jaxbException) {    throw new VNXFilePluginException("Exception occurred while generating input xml for fileSystem info",jaxbException.getCause());  }  return iStream;}  }
class C{  public int count(){  if (root == null) {    return 0;  }  return root.count();}  }
class C{  public void clearActivations(){  for (  Neuron n : this.getFlatNeuronList()) {    n.clear();  }}  }
class C{  private void checkState(){}  }
class C{  public DoubleMatrix2D like2D(int rows,int columns){  return content.like(rows,columns);}  }
class C{  public static Collection<CalendarUserType> all(){  return enums.all();}  }
class C{  public void push(Node nde){  nde.insertBefore(head);  if (head == null)   head=nde;  size++;}  }
class C{  public void repaint(Rectangle r){}  }
class C{  public DiskBasedCache(File rootDirectory,int maxCacheSizeInBytes){  mRootDirectory=rootDirectory;  mMaxCacheSizeInBytes=maxCacheSizeInBytes;}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.ARGUMENT_DEFINITION;}  }
class C{  private int removeTracks(final int first,final int last){  final int numremoved=removeTracksInternal(first,last);  if (numremoved > 0) {    notifyChange(QUEUE_CHANGED);  }  return numremoved;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public void addInput(T elem){  if (isEmpty()) {    min=max=elem;  } else   if (compareFn.compare(elem,min) < 0) {    min=elem;  } else   if (compareFn.compare(elem,max) > 0) {    max=elem;  }  addUnbuffered(elem);}  }
class C{  public static boolean equals(String filename1,String filename2){  return equals(filename1,filename2,false,IOCase.SENSITIVE);}  }
class C{  private void connectNetworkDevice(String address,int port){  mCommService=new NetworkCommService(this,mHandler);  ((NetworkCommService)mCommService).connect(address,port);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:12.521 -0500",hash_original_method="6ECA774993D880ABD38A420DC693E35F",hash_generated_method="289533BFFF52F6D05E10ACA8F1E13A96") public AtomicLong(long initialValue){  value=initialValue;}  }
class C{  public static int EUSERS(){  return Errno.EUSERS.intValue();}  }
class C{  public Hessian2Output createHessian2Output(OutputStream os){  Hessian2Output out=createHessian2Output();  out.init(os);  return out;}  }
class C{  @SuppressWarnings("unchecked") public V value(boolean keepBinary){  if (val == null)   val=(V)cctx.unwrapBinaryIfNeeded(valObj,keepBinary,true);  return val;}  }
class C{  public static boolean canAccessInfo(String infoWindowName){  boolean result=false;  int roleid=Env.getAD_Role_ID(Env.getCtx());  String sqlRolePermission="Select COUNT(AD_ROLE_ID) AS ROWCOUNT FROM AD_ROLE WHERE AD_ROLE_ID=" + roleid + " AND ALLOW_INFO_"+ infoWindowName+ "='Y'";  log.config(sqlRolePermission);  PreparedStatement prolestmt=null;  ResultSet rs=null;  try {    prolestmt=DB.prepareStatement(sqlRolePermission,null);    rs=prolestmt.executeQuery();    rs.next();    if (rs.getInt("ROWCOUNT") > 0) {      result=true;    } else {      return false;    }  } catch (  Exception e) {    System.out.println(e);    log.log(Level.SEVERE,"(1)",e);  } finally {    DB.close(rs,prolestmt);    rs=null;    prolestmt=null;  }  return result;}  }
class C{  protected void callAction(Log log){  logger.debug("call action");  if (eventStream == null) {    logger.warn("Can't call action without event stream");    return;  }  for (  EventAction action : mapping.getActions()) {    eventStream.runAction(mapping,action.copy(),log);  }}  }
class C{  private void nextCol(int span){  col+=span;  if (col >= getColumnConstraints().size())   wrap();}  }
class C{  static final public boolean parseBoolean(String what){  return new Boolean(what).booleanValue();}  }
class C{  public ConnectionRecordSortPredicate(ConnectionRecordSet.SortableProperty property,boolean descending){  this.property=property;  this.descending=descending;}  }
class C{  private static long packedCodeSize(IntList cases){  int sz=cases.size();  long low=cases.get(0);  long high=cases.get(sz - 1);  long result=((high - low + 1)) * 2 + 4;  return (result <= 0x7fffffff) ? result : -1;}  }
class C{  public OrderedTask(String identifier,List<Step> steps){  super(identifier);  this.steps=new ArrayList<>(steps);}  }
class C{  public void invokeHookBoltFail(Tuple tuple,long failLatencyNs){  if (taskHooks.size() != 0) {    BoltFailInfo failInfo=new BoltFailInfo(tuple,getThisTaskId(),failLatencyNs / Constants.MILLISECONDS_TO_NANOSECONDS);    for (    ITaskHook taskHook : taskHooks) {      taskHook.boltFail(failInfo);    }  }}  }
class C{  @Override public String toString(){  final StringBuilder sb=new StringBuilder();  final String thisSimpleName=this.getClass().getSimpleName();  sb.append(LS);  sb.append("### ").append(thisSimpleName).append(" SUMMARY: ").append(LS);  sb.append("   k            : ").append(reservoirSize_).append(LS);  sb.append("   n            : ").append(itemsSeen_).append(LS);  sb.append("   Current size : ").append(currItemsAlloc_).append(LS);  sb.append("   Resize factor: ").append(rf_).append(LS);  sb.append("### END SKETCH SUMMARY").append(LS);  return sb.toString();}  }
class C{  public int availableSpace(){  return _maxUDPPayload - HEADER_SIZE - _questionsBytes.size()- _answersBytes.size()- _authoritativeAnswersBytes.size()- _additionalsAnswersBytes.size();}  }
class C{  protected void prepareRequestContextPostMethod() throws Exception {  context=createODataRequestContext(POST,entityDataModel);}  }
class C{  public static void openMap(Context context,double latitude,double longitude){  Intent intent=createOpenMapIntent(latitude,longitude);  checkContext(context,intent);  context.startActivity(intent);}  }
class C{  public OneShotTimer(final String name){  super(name);  mStart=System.nanoTime();}  }
class C{  public void reset(){  System.arraycopy(IV,0,ofbV,0,IV.length);  cipher.reset();}  }
class C{  public CudaException(String message,Throwable cause){  super(message,cause);}  }
class C{  public void afterQueryRefresh(){  notifySelectionChangedListeners();}  }
class C{  protected StateEntity_Impl(){  super();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:06.236 -0500",hash_original_method="5B0A75408C2B4CF9238ADD529FC37D02",hash_generated_method="A7115730B47BC9123607938D0003EDE3") public boolean contains(int x,int y){  return (((getTaintInt() + x + y)) == 1);}  }
class C{  protected XMLCharacters(){}  }
class C{  public void removeView(String viewName){  views.remove(viewName);}  }
class C{  protected Group createGroup(final Element element){  final String name=element.getAttribute(ATTR_GROUP_NAME);  final Group group=new Group(name);  final List<Resource> resources=new ArrayList<Resource>();  final NodeList resourceNodeList=element.getChildNodes();  for (int i=0; i < resourceNodeList.getLength(); i++) {    final Node node=resourceNodeList.item(i);    if (node instanceof Element) {      final Element resourceElement=(Element)node;      parseResource(resourceElement,resources);    }  }  group.setResources(resources);  return group;}  }
class C{  public void clearAllForces(){  externalForcesVector.clear();}  }
class C{  public CoreParser(String defaultField,Analyzer analyzer){  this(defaultField,analyzer,null);}  }
class C{  public void removePropertyChangeListener(PropertyChangeListener pcl){  m_pcSupport.removePropertyChangeListener(pcl);}  }
class C{  private void collectingToAMap(List<Movie> movies){  Map<String,List<Actor>> movieActorsMap=movies.stream().collect(toMap(null,null));  movieActorsMap.forEach(null);}  }
class C{  private synchronized boolean extendDirtyRegion(Component c,int x,int y,int w,int h){  Rectangle r=dirtyComponents.get(c);  if (r != null) {    SwingUtilities.computeUnion(x,y,w,h,r);    return true;  }  return false;}  }
class C{  private void init(){  mBackgroundBitmap=loadBitmaps(R.array.backgroundIds);  mFigureBitmap=loadBitmaps(R.array.figureIds);  mFaceBitmap=loadBitmaps(R.array.faceIds);  mHourHandBitmap=loadBitmaps(R.array.hourHandIds);  mMinuteHandBitmap=loadBitmaps(R.array.minuteHandIds);  mFilterPaint=new Paint();  mFilterPaint.setFilterBitmap(true);  mAmbientBackgroundPaint=new Paint();  mAmbientBackgroundPaint.setARGB(255,0,0,0);  mAmbientPeekCardBorderPaint=new Paint();  mAmbientPeekCardBorderPaint.setColor(Color.WHITE);  mAmbientPeekCardBorderPaint.setStrokeWidth(BORDER_WIDTH_PX);  mCloudDegrees=mResources.getIntArray(R.array.cloudDegrees);  mCloudBitmaps=loadBitmaps(R.array.cloudIds);  mCloudSpeeds=mResources.getIntArray(R.array.cloudSpeed);  mCloudFilterPaints=new Paint[mCloudBitmaps.length];  mCloudHyperSpeeds=mResources.getIntArray(R.array.cloudHyperSpeeds);  mHyperSpeedOverrun=new boolean[mCloudBitmaps.length];  for (int i=0; i < mCloudBitmaps.length; i++) {    Paint paint=new Paint();    paint.setFilterBitmap(true);    mCloudFilterPaints[i]=paint;  }  mTime=new Time();  mAudioPlayer=new AudioPlayer(getApplicationContext());}  }
class C{  public void reset(){  m_date.setTime(System.currentTimeMillis());  m_current=m_format.format(m_date);}  }
class C{  public TaskList deactivateApplicationSnapshotSession(URI id,VolumeGroupSnapshotSessionDeactivateParam input){  UriBuilder uriBuilder=client.uriBuilder(APP_SUPPORT_DEACTIVATE_SNAPSHOT_SESSION_URL);  return client.postURI(TaskList.class,input,uriBuilder.build(id));}  }
class C{  public static List<PresetItem> searchInPresets(Context ctx,String term,ElementType type,int maxDistance,int limit){  ArrayList<MultiHashMap<String,PresetItem>> presetSeachIndices=new ArrayList<MultiHashMap<String,PresetItem>>();  presetSeachIndices.add(Application.getTranslatedPresetSearchIndex(ctx));  presetSeachIndices.add(Application.getPresetSearchIndex(ctx));  ArrayList<IndexSearchResult> rawResult=new ArrayList<IndexSearchResult>();  term=SearchIndexUtils.normalize(term);  for (  MultiHashMap<String,PresetItem> index : presetSeachIndices) {    for (    String s : index.getKeys()) {      int distance=s.indexOf(term);      if (distance == -1) {        distance=OptimalStringAlignment.editDistance(s,term,maxDistance);      } else {        distance=0;      }      if ((distance >= 0 && distance <= maxDistance)) {        Set<PresetItem> presetItems=index.get(s);        for (        PresetItem pi : presetItems) {          if (type == null || pi.appliesTo(type)) {            IndexSearchResult isr=new IndexSearchResult();            isr.count=distance * presetItems.size();            isr.item=pi;            rawResult.add(isr);          }        }      }    }  }  Collections.sort(rawResult);  ArrayList<PresetItem> result=new ArrayList<PresetItem>();  for (  IndexSearchResult i : rawResult) {    Log.d("SearchIndex","found " + i.item.getName());    if (!result.contains(i.item)) {      result.add(i.item);    }  }  if (result.size() > 0) {    return result.subList(0,Math.min(result.size(),limit));  }  return result;}  }
class C{  public E remove(){  return removeFirst();}  }
class C{  private boolean isLocked(Order order){  lock.lock();  try {    return activeOrders.contains(order.getId());  }  finally {    lock.unlock();  }}  }
class C{  public static <E>ImmutableList<E> of(E e1,E e2,E e3,E e4,E e5,E e6,E e7,E e8,E e9,E e10){  return construct(e1,e2,e3,e4,e5,e6,e7,e8,e9,e10);}  }
class C{  static synchronized Registry createRegistry(){  if (registry == null) {    try {      registry=Registry.getRegistry(null,null);      if (mbeanServer == null) {        throw new IllegalStateException(LocalizedStrings.MBeanUtil_MBEAN_SERVER_NOT_INITIALIZED_YET.toLocalizedString());      }      registry.setMBeanServer(mbeanServer);      String mbeansResource=getOSPath("/org/apache/geode/admin/jmx/mbeans-descriptors.xml");      URL url=ClassPathLoader.getLatest().getResource(MBeanUtil.class,mbeansResource);      raiseOnFailure(url != null,LocalizedStrings.MBeanUtil_FAILED_TO_FIND_0.toLocalizedString(new Object[]{mbeansResource}));      registry.loadMetadata(url);      String[] test=registry.findManagedBeans();      raiseOnFailure(test != null && test.length > 0,LocalizedStrings.MBeanUtil_FAILED_TO_LOAD_0.toLocalizedString(new Object[]{mbeansResource}));    } catch (    Exception e) {      logStackTrace(Level.WARN,e);      throw new RuntimeAdminException(LocalizedStrings.MBeanUtil_FAILED_TO_GET_MBEAN_REGISTRY.toLocalizedString(),e);    }  }  return registry;}  }
class C{  public boolean removePinBean(int pin,NamedBean bean){  if (bean == getPinBean(pin)) {    pinObjects.remove(pin);    return true;  }  return false;}  }
class C{  public Iterator<String> iterator(){  return keySet().iterator();}  }
class C{  @Override public int read(){  if (offset.GE(length)) {    return -1;  }  Address readLocation=startAddress.plus(offset);  byte result=readLocation.loadByte();  offset=offset.plus(1);  return result & 0xFF;}  }
class C{  public Boolean isEnabled(){  return enabled;}  }
class C{  public static void addStmt(BlockStmt block,Statement stmt){  List<Statement> stmts=block.getStmts();  if (stmts == null) {    stmts=new ArrayList<Statement>();    block.setStmts(stmts);  }  stmts.add(stmt);}  }
class C{  public static double[] makeUniformDistribution(int numClasses){  double[] dist=new double[numClasses];  for (int i=0; i < numClasses; i++) {    dist[i]=1.0 / numClasses;  }  return dist;}  }
class C{  private AutoTieringPolicy checkTieringPolicyExistsInDB(String nativeGuid){  AutoTieringPolicy tieringPolicy=null;  URIQueryResultList queryResult=new URIQueryResultList();  _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getAutoTieringPolicyByNativeGuidConstraint(nativeGuid),queryResult);  if (queryResult.iterator().hasNext()) {    URI tieringPolicyURI=queryResult.iterator().next();    if (null != tieringPolicyURI) {      tieringPolicy=_dbClient.queryObject(AutoTieringPolicy.class,tieringPolicyURI);    }  }  return tieringPolicy;}  }
class C{  public void loadImage(File f) throws IOException {  if (f == null || !f.exists()) {    thumbnail=null;  } else {    final ImageIcon icon=readCompatibleImageIcon(f);    if (icon == null) {      thumbnail=null;    } else {      dimension=icon.getIconWidth() + " x " + icon.getIconHeight();      int width=icon.getIconWidth();      int height=icon.getIconHeight();      if (height > 75) {        width=width * 75 / height;        height=75;      }      if (width > 90) {        height=height * 90 / width;        width=90;      }      BufferedImage image=(BufferedImage)icon.getImage();      image=(BufferedImage)MSwingUtilities.getScaledInstance(image,width,height);      thumbnail=new ImageIcon(image);    }  }}  }
class C{  public Builder forcedGlossary(File forcedGlossary){  this.forcedGlossary=forcedGlossary;  return this;}  }
class C{  public void clearCache(){  if (mMemoryCache != null) {    mMemoryCache.evictAll();    if (BuildConfig.DEBUG) {      Log.d(TAG,"Memory cache cleared");    }  }}  }
class C{  public boolean hasDetails(String sku){  return mSkuMap.containsKey(sku);}  }
class C{  public TestStartedEvent(final String sessionId,final String testId,final long timeout){  this(sessionId,testId,timeout,null);}  }
class C{  private boolean sendActionToAndroidVox(int action,Bundle arguments){  if (mAccessibilityJSONObject == null) {    mAccessibilityJSONObject=new JSONObject();  } else {    final Iterator<?> keys=mAccessibilityJSONObject.keys();    while (keys.hasNext()) {      keys.next();      keys.remove();    }  }  try {    mAccessibilityJSONObject.accumulate("action",action);switch (action) {case AccessibilityNodeInfo.ACTION_NEXT_AT_MOVEMENT_GRANULARITY:case AccessibilityNodeInfo.ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY:      if (arguments != null) {        final int granularity=arguments.getInt(AccessibilityNodeInfo.ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT);        mAccessibilityJSONObject.accumulate("granularity",granularity);      }    break;case AccessibilityNodeInfo.ACTION_NEXT_HTML_ELEMENT:case AccessibilityNodeInfo.ACTION_PREVIOUS_HTML_ELEMENT:  if (arguments != null) {    final String element=arguments.getString(AccessibilityNodeInfo.ACTION_ARGUMENT_HTML_ELEMENT_STRING);    mAccessibilityJSONObject.accumulate("element",element);  }break;}} catch (JSONException e) {return false;}final String jsonString=mAccessibilityJSONObject.toString();final String jsCode=String.format(ACCESSIBILITY_ANDROIDVOX_TEMPLATE,jsonString);return mCallback.performAction(mWebView,jsCode);}  }
class C{  public TDoubleHash(TDoubleHashingStrategy strategy){  _hashingStrategy=strategy;}  }
class C{  public void testClose() throws Exception {  byte[] data=new byte[]{-127,-100,-50,-10,-1,0,1,10,50,127};  TestOutputStream tos=new TestOutputStream();  CipherOutputStream cos=new CipherOutputStream(tos){  };  cos.write(data);  cos.close();  byte[] result=tos.toByteArray();  if (!Arrays.equals(result,data)) {    fail("CipherOutputStream did not flush the data.");  }  assertTrue("The close() method should call the close() method " + "of its underlying output stream.",tos.wasClosed());}  }
class C{  protected void initialiseEigen(){  Eval=new double[stateCount];  Evec=new double[stateCount][stateCount];  Ievc=new double[stateCount][stateCount];  eigenInitialised=true;  updateMatrix=true;}  }
class C{  @SuppressWarnings("unused") private void appendToClassPathForInstrumentation(String path){  assert (Thread.holdsLock(this));  super.addURL(getFileURL(new File(path)));}  }
class C{  @Deprecated protected String methodIdentification(Method method){  return null;}  }
class C{  public final float normalize(){  float length=length();  if (length < Settings.EPSILON) {    return 0f;  }  float invLength=1.0f / length;  x*=invLength;  y*=invLength;  return length;}  }
class C{  public static boolean writeFile(String filePath,InputStream stream){  OutputStream o=null;  try {    o=new FileOutputStream(filePath);    byte data[]=new byte[1024];    int length=-1;    while ((length=stream.read(data)) != -1) {      o.write(data,0,length);    }    o.flush();    return true;  } catch (  FileNotFoundException e) {    throw new RuntimeException("FileNotFoundException occurred. ",e);  }catch (  IOException e) {    throw new RuntimeException("IOException occurred. ",e);  } finally {    if (o != null) {      try {        o.close();        stream.close();      } catch (      IOException e) {        throw new RuntimeException("IOException occurred. ",e);      }    }  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void updateThroughput(long currentTime){  throughputCalculationLock.lock();  try {    int interval=(int)(currentTime - lastThroughputCalculationTime);    long minInterval=getThroughputCalculationIntervalInMillis();    if ((minInterval == 0) || (interval < minInterval)) {      return;    }    long readBytes=this.readBytes;    long writtenBytes=this.writtenBytes;    long readMessages=this.readMessages;    long writtenMessages=this.writtenMessages;    readBytesThroughput=(readBytes - lastReadBytes) * 1000.0 / interval;    writtenBytesThroughput=(writtenBytes - lastWrittenBytes) * 1000.0 / interval;    readMessagesThroughput=(readMessages - lastReadMessages) * 1000.0 / interval;    writtenMessagesThroughput=(writtenMessages - lastWrittenMessages) * 1000.0 / interval;    if (readBytesThroughput > largestReadBytesThroughput) {      largestReadBytesThroughput=readBytesThroughput;    }    if (writtenBytesThroughput > largestWrittenBytesThroughput) {      largestWrittenBytesThroughput=writtenBytesThroughput;    }    if (readMessagesThroughput > largestReadMessagesThroughput) {      largestReadMessagesThroughput=readMessagesThroughput;    }    if (writtenMessagesThroughput > largestWrittenMessagesThroughput) {      largestWrittenMessagesThroughput=writtenMessagesThroughput;    }    lastReadBytes=readBytes;    lastWrittenBytes=writtenBytes;    lastReadMessages=readMessages;    lastWrittenMessages=writtenMessages;    lastThroughputCalculationTime=currentTime;  }  finally {    throughputCalculationLock.unlock();  }}  }
class C{  public static long cycleRightC(long v,int shift,int len){  if (shift == 0) {    return v;  }  if (shift < 0) {    return cycleLeftC(v,-shift,len);  }  final long ones=(1 << len) - 1;  return (((v) >>> (shift)) | ((v) << ((len) - (shift)))) & ones;}  }
class C{  public String loadWorld(@NonNull Jedis jedis,@NonNull UUID playerUuid) throws ProcessingException {  String serverId=null;  try {    serverId=core.getServerManager().fetchServer(jedis);    jedis.publish(RedisKeys.WORLD_REPO.toString(),"WORLD\000LOAD\000" + serverId + "\000"+ playerUuid.toString());    return serverId;  } catch (  Exception ex) {    throw new ProcessingException("There was an error loading the world of \"" + playerUuid + "\" on server \""+ serverId+ "\"!",ex);  }}  }
class C{  public void testGetLoginConfigEmpty() throws Exception {  String xml=WEBAPP_TEST_HEADER + "</web-app>";  this.builder.build(new ByteArrayInputStream(xml.getBytes("UTF-8")));  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());  assertTrue(webXml.getTags(WebXmlType.LOGIN_CONFIG).isEmpty());}  }
class C{  public ExecutionState basicGetState(){  return state;}  }
class C{  String rrToString(){  StringBuffer sb=new StringBuffer();  sb.append(positionToString(latitude,'N','S'));  sb.append(" ");  sb.append(positionToString(longitude,'E','W'));  sb.append(" ");  renderFixedPoint(sb,w2,altitude - 10000000,100);  sb.append("m ");  renderFixedPoint(sb,w2,size,100);  sb.append("m ");  renderFixedPoint(sb,w2,hPrecision,100);  sb.append("m ");  renderFixedPoint(sb,w2,vPrecision,100);  sb.append("m");  return sb.toString();}  }
class C{  public void add(final long version){  versionWindow[versionWriteHead++]=version;  if (versionWriteHead == versionWindow.length) {    versionWriteHead=0;  }  versionsStored++;}  }
class C{  public void temporarilyDisabledSoPleaseRunManuallytestMultiple() throws NotUnlockedException {  final byte[] data1=new byte[]{0,1,2,3,4,5};  final byte[] data2=new byte[]{0xE,0xF,2,1,3,1,2,12,3,31,124,12,1};  final VaultID id1=m_serverVault.lock(data1);  final VaultID id2=m_serverVault.lock(data2);  m_clientVault.waitForID(id1,2000);  m_clientVault.waitForID(id2,2000);  assertTrue(m_clientVault.knowsAbout(id1));  assertTrue(m_clientVault.knowsAbout(id2));  m_serverVault.unlock(id1);  m_serverVault.unlock(id2);  m_clientVault.waitForIdToUnlock(id1,1000);  m_clientVault.waitForIdToUnlock(id2,1000);  assertTrue(m_clientVault.isUnlocked(id1));  assertTrue(m_clientVault.isUnlocked(id2));  assertEquals(data1,m_clientVault.get(id1));  assertEquals(data2,m_clientVault.get(id2));  m_clientVault.release(id1);  m_clientVault.release(id2);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case SexecPackage.REACTION_FIRED__REACTION:    setReaction((Reaction)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:02.057 -0500",hash_original_method="3768D7B4204F23A6FF321EC840D75009",hash_generated_method="B70A91142CA8AE381D4E0ED914D64153") public void release(){  mLength=0;synchronized (sPool) {    sPool.offer(new SoftReference<Chunk>(this,sQueue));    sPool.notifyAll();  }}  }
class C{  @Override public String toString(){  StringBuffer text=new StringBuffer();  for (int i=0; i < theRules.size(); i++) {    text.append(theRules.elementAt(i) + "\n");  }  text.append("Number of Rules  : \t" + theRules.size() + "\n");  return text.toString();}  }
class C{  @Override public void add(Permission permission){  if (!(permission instanceof TVPermission)) {    throw new IllegalArgumentException("invalid permission: " + permission);  }  permissions.add((TVPermission)permission);}  }
class C{  private void init(){  GridTestLog4jLogger.addAppender(this);}  }
class C{  @Override public void onSeekComplete(MediaPlayer mp){  mp.start();  notifyPlayerStarted(mp.getDuration(),mp.getCurrentPosition());}  }
class C{  public static SelectResults execute(ExecutablePool pool,String cqName,String queryStr,int cqState,boolean isDurable,byte regionDataPolicy){  AbstractOp op=new CreateCQWithIROpImpl(cqName,queryStr,cqState,isDurable,regionDataPolicy);  return (SelectResults)pool.executeOnQueuesAndReturnPrimaryResult(op);}  }
class C{  public static boolean containsAny(CharSequence cs,CharSequence searchChars){  if (searchChars == null) {    return false;  }  return containsAny(cs,toCharArray(searchChars));}  }
class C{  public CCTimer(Object targ,String s){  this(targ,s,0);}  }
class C{  public static byte[] applyMask(final ImageData imageData,final GenericColorSpace decodeColorData,final PdfObject newMask,final PdfObject XObject,byte[] maskDataSream){  int[] maskArray=XObject.getIntArray(PdfDictionary.Mask);  if (maskArray != null) {    maskArray=convertToRGB(maskArray,decodeColorData);  }  byte[] objectData=imageData.getObjectData();  int w=imageData.getWidth();  int h=imageData.getHeight();  int d=imageData.getDepth();  if (objectData == null && d == 8) {    objectData=new byte[w * h];  } else   if (objectData != null && d == 1 && decodeColorData.getID() == ColorSpaces.DeviceGray) {    objectData=ColorSpaceConvertor.normaliseTo8Bit(d,w,h,objectData);    d=8;  }  objectData=MaskDataDecoder.convertData(decodeColorData,objectData,w,h,imageData,d,1,null);  XObject.setIntNumber(PdfDictionary.BitsPerComponent,8);  if (maskArray != null) {    objectData=applyMaskArray(w,h,objectData,maskArray);  } else {    objectData=applyMaskStream(objectData,maskDataSream,imageData,newMask,XObject);  }  return objectData;}  }
class C{  public void fetchPluginsStates(String userAgent){  erroredPlugins.clear();  warnedPlugins.clear();  for (  MuninPlugin plugin : this.plugins)   plugin.setState(AlertState.UNDEFINED);  HTMLResponse response=master.downloadUrl(this.getUrl(),userAgent);  if (!response.hasSucceeded())   this.reachable=SpecialBool.FALSE; else {    this.reachable=SpecialBool.TRUE;    Document doc=Jsoup.parse(response.getHtml(),this.getUrl());    Elements images=doc.select("img[src$=-day.png]");    if (images.size() == 0)     images=doc.select("img[src$=-day.svg]");    for (    Element image : images) {      String pluginName=image.attr("src").substring(image.attr("src").lastIndexOf('/') + 1,image.attr("src").lastIndexOf('-'));      MuninPlugin plugin=null;      for (      MuninPlugin m : this.plugins) {        if (m.getName().equals(pluginName)) {          plugin=m;          break;        }      }      if (plugin != null) {        if (image.hasClass("crit") || image.hasClass("icrit")) {          plugin.setState(AlertState.CRITICAL);          erroredPlugins.add(plugin);        } else         if (image.hasClass("warn") || image.hasClass("iwarn")) {          plugin.setState(AlertState.WARNING);          warnedPlugins.add(plugin);        } else         plugin.setState(AlertState.OK);      }    }  }}  }
class C{  public void removePropertyChangeListener(PropertyChangeListener listener){  listenerList.remove(PropertyChangeListener.class,listener);}  }
class C{  private void checkProtocolAlreadyExists(Set<String> protocols,String protocolType){  if (!protocols.contains(protocolType)) {    protocols.add(protocolType);  }}  }
class C{  public void rescanCurrentDirectory(JFileChooser a){  for (int i=0; i < uis.size(); i++) {    ((FileChooserUI)(uis.elementAt(i))).rescanCurrentDirectory(a);  }}  }
class C{  public boolean outerClassHasAnnotation(Annotation annotation){  Class<?> outer=type.getDeclaringClass();  while (outer != null) {    AnnotationAccessor accessor=new AnnotationAccessor(supportedAnnotations,outer,ignoreAnnotationFailure);    if (accessor.typeHas(annotation)) {      return true;    }    outer=outer.getDeclaringClass();  }  return false;}  }
class C{  public Vertex parseOperator(TextStream stream,Map<String,Map<String,Vertex>> elements,boolean debug,Network network){  Vertex equation=network.createInstance(Primitive.EQUATION);  String next=stream.nextWord();  next=next.toLowerCase();  if (!OPERATORS.contains(next)) {    throw new SelfParseException("Invalid operator: '" + next + "' valid operators are: "+ OPERATORS,stream);  }  if (next.equals(IS)) {    next=Primitive.RELATION.getIdentity();  } else   if (next.equals(FOR)) {    ensureNext(EACH,stream);  } else   if (next.equals(WEAK)) {    ensureNext(ASSOCIATE,stream);    next=WEAKASSOCIATE;  } else   if (next.equals(RELATED)) {    ensureNext(TO,stream);  }  String last=next.toLowerCase();  Vertex operator=network.createVertex(new Primitive(next));  equation.addRelationship(Primitive.OPERATOR,operator);  stream.skipWhitespace();  next=lower(stream.peekWord());  if (NOT.equals(next)) {    stream.nextWord();    equation.addRelationship(Primitive.NOT,Primitive.NOT);  }  List<Vertex> arguments=parseArguments(equation,Primitive.ARGUMENT,0,stream,elements,false,debug,network);  if (last.equals(IF)) {    if (arguments.size() != 1) {      ensureArguments(IF,2,arguments,stream);    }    next=lower(stream.peekWord());    List<Vertex> stack=new ArrayList<Vertex>();    stack.add(equation);    Vertex top=equation;    while (OR.equals(next) || AND.equals(next)) {      boolean or=OR.equals(next);      boolean and=AND.equals(next);      stream.nextWord();      Vertex condition=network.createInstance(Primitive.EQUATION);      next=lower(stream.peekWord());      if (NOT.equals(next)) {        stream.nextWord();        condition.addRelationship(Primitive.NOT,Primitive.NOT);        next=lower(stream.peekWord());      }      boolean bracket=false;      while ("(".equals(next)) {        bracket=true;        stack.add(condition);        stream.nextWord();        next=lower(stream.peekWord());      }      if (or) {        condition.addRelationship(Primitive.OPERATOR,Primitive.OR);      } else       if (and) {        condition.addRelationship(Primitive.OPERATOR,Primitive.AND);      }      top.addRelationship(Primitive.CONDITION,condition);      parseArguments(condition,Primitive.ARGUMENT,0,stream,elements,bracket,debug,network);      next=lower(stream.peekWord());      if (bracket) {        stack.remove(stack.size() - 1);        top=stack.get(stack.size() - 1);        while (")".equals(next)) {          stack.remove(stack.size() - 1);          top=stack.get(stack.size() - 1);          stream.nextWord();          next=lower(stream.peekWord());        }      }    }    if (THEN.equals(next)) {      stream.nextWord();      parseArguments(equation,Primitive.THEN,0,stream,elements,false,debug,network);      next=lower(stream.peekWord());    }    if (ELSE.equals(next)) {      stream.nextWord();      parseArguments(equation,Primitive.ELSE,0,stream,elements,false,debug,network);    }  } else   if (last.equals(WHILE)) {    if (arguments.size() != 1) {      ensureArguments(WHILE,2,arguments,stream);    }    ensureNext(DO,stream);    parseArguments(equation,Primitive.DO,0,stream,elements,false,debug,network);  } else   if (last.equals(FOR)) {    ensureArguments(FOR,1,arguments,stream);    ensureNext(OF,stream);    arguments=parseArguments(equation,Primitive.ARGUMENT,1,stream,elements,false,debug,network);    ensureArguments(OF,1,arguments,stream);    ensureNext(AS,stream);    arguments=parseArguments(equation,Primitive.ARGUMENT,2,stream,elements,false,debug,network);    ensureArguments(AS,1,arguments,stream);    next=lower(stream.peekWord());    int index=3;    while (AND.equals(next)) {      stream.nextWord();      ensureNext(EACH,stream);      arguments=parseArguments(equation,Primitive.ARGUMENT,index++,stream,elements,false,debug,network);      ensureArguments(EACH,1,arguments,stream);      ensureNext(OF,stream);      arguments=parseArguments(equation,Primitive.ARGUMENT,index++,stream,elements,false,debug,network);      ensureArguments(OF,1,arguments,stream);      ensureNext(AS,stream);      arguments=parseArguments(equation,Primitive.ARGUMENT,index++,stream,elements,false,debug,network);      ensureArguments(AS,1,arguments,stream);      next=lower(stream.peekWord());    }    if (DO.equals(next)) {      stream.nextWord();      parseArguments(equation,Primitive.DO,0,stream,elements,false,debug,network);    }  } else   if (last.equals(GREATER)) {    ensureArguments(GREATER,2,arguments,stream);  } else   if (last.equals(LESS)) {    ensureArguments(LESS,2,arguments,stream);  } else   if (last.equals(EQUAL)) {    ensureArguments(EQUAL,2,arguments,stream);  } else   if (last.equals(GET)) {    ensureArguments(GET,1,arguments,stream);    ensureNext(FROM,stream);    arguments=parseArguments(equation,Primitive.ARGUMENT,1,stream,elements,false,debug,network);    ensureArguments(FROM,1,arguments,stream);    next=stream.peekWord();    if ((next != null) && ASSOCIATED.equals(next.toLowerCase())) {      stream.nextWord();      next=lower(stream.peekWord());      ensureNext(TO,stream);      arguments=parseArguments(equation,Primitive.ARGUMENT,2,stream,elements,false,debug,network);      ensureArguments(TO,1,arguments,stream);      ensureNext(BY,stream);      arguments=parseArguments(equation,Primitive.ARGUMENT,3,stream,elements,false,debug,network);      ensureArguments(BY,1,arguments,stream);    } else     if ((next != null) && AT.equals(next.toLowerCase())) {      stream.nextWord();      next=lower(stream.peekWord());      if ((next != null) && LAST.equals(next.toLowerCase())) {        stream.nextWord();        arguments=parseArguments(equation,Primitive.LASTINDEX,0,stream,elements,false,debug,network);        ensureArguments(AT,1,arguments,stream);      } else {        arguments=parseArguments(equation,Primitive.INDEX,0,stream,elements,false,debug,network);        ensureArguments(AT,1,arguments,stream);      }    }  } else   if (last.equals(LEARN)) {    ensureArguments(LEARN,1,arguments,stream);    next=stream.peekWord();    if ((next != null) && THAT.equals(next.toLowerCase())) {      stream.nextWord();      arguments=parseArguments(equation,Primitive.THAT,0,stream,elements,false,debug,network);      ensureArguments(THAT,1,arguments,stream);      next=stream.peekWord();    }    if ((next != null) && TOPIC.equals(next.toLowerCase())) {      stream.nextWord();      arguments=parseArguments(equation,Primitive.TOPIC,0,stream,elements,false,debug,network);      ensureArguments(TOPIC,1,arguments,stream);    }    ensureNext(TEMPLATE,stream);    arguments=parseArguments(equation,Primitive.ARGUMENT,1,stream,elements,false,debug,network);    ensureArguments(TEMPLATE,1,arguments,stream);  } else   if (last.equals(INPUT)) {    ensureArguments(INPUT,1,arguments,stream);    next=stream.peekWord();    int forIndex=1;    if ((next != null) && PART.equals(next.toLowerCase())) {      stream.nextWord();      arguments=parseArguments(equation,Primitive.ARGUMENT,1,stream,elements,false,debug,network);      ensureArguments(PART,1,arguments,stream);      next=stream.peekWord();      forIndex=2;    }    if ((next != null) && FOR.equals(next.toLowerCase())) {      stream.nextWord();      arguments=parseArguments(equation,Primitive.ARGUMENT,forIndex,stream,elements,false,debug,network);      ensureArguments(FOR,1,arguments,stream);    }  } else   if (last.equals(ALL)) {    ensureArguments(ALL,1,arguments,stream);    ensureNext(FROM,stream);    arguments=parseArguments(equation,Primitive.ARGUMENT,1,stream,elements,false,debug,network);    ensureArguments(FROM,1,arguments,stream);    next=stream.peekWord();    if ((next != null) && ASSOCIATED.equals(next.toLowerCase())) {      stream.nextWord();      next=lower(stream.peekWord());      ensureNext(TO,stream);      arguments=parseArguments(equation,Primitive.ARGUMENT,2,stream,elements,false,debug,network);      ensureArguments(TO,1,arguments,stream);      ensureNext(BY,stream);      arguments=parseArguments(equation,Primitive.ARGUMENT,3,stream,elements,false,debug,network);      ensureArguments(BY,1,arguments,stream);    }  } else   if (last.equals(COUNT)) {    ensureArguments(COUNT,1,arguments,stream);    next=stream.peekWord();    if ((next != null) && OF.equals(next.toLowerCase())) {      stream.nextWord();      arguments=parseArguments(equation,Primitive.ARGUMENT,2,stream,elements,false,debug,network);      ensureArguments(OF,1,arguments,stream);    }  } else   if (last.equals(SET)) {    ensureArguments(last,1,arguments,stream);    ensureNext(TO,stream);    arguments=parseArguments(equation,Primitive.ARGUMENT,1,stream,elements,false,debug,network);    ensureArguments(TO,1,arguments,stream);    next=lower(stream.peekWord());    if (ON.equals(next)) {      stream.nextWord();      arguments=parseArguments(equation,Primitive.ARGUMENT,2,stream,elements,false,debug,network);      ensureArguments(ON,1,arguments,stream);    }  } else   if (last.equals(RELATION)) {    ensureArguments(IS,1,arguments,stream);    ensureNext(RELATED,stream);    ensureNext(TO,stream);    arguments=parseArguments(equation,Primitive.ARGUMENT,1,stream,elements,false,debug,network);    ensureArguments(RELATED,1,arguments,stream);    next=lower(stream.peekWord());    if (BY.equals(next)) {      stream.nextWord();      arguments=parseArguments(equation,Primitive.ARGUMENT,2,stream,elements,false,debug,network);      ensureArguments(BY,1,arguments,stream);    }  } else   if (last.equals(RELATED)) {    ensureArguments(RELATED,1,arguments,stream);    next=lower(stream.peekWord());    if (BY.equals(next)) {      stream.nextWord();      arguments=parseArguments(equation,Primitive.ARGUMENT,2,stream,elements,false,debug,network);      ensureArguments(BY,1,arguments,stream);    }  } else   if (last.equals(ASSOCIATE) || last.equals(DISSOCIATE) || last.equals(WEAKASSOCIATE)) {    ensureArguments(last,1,arguments,stream);    ensureNext(TO,stream);    arguments=parseArguments(equation,Primitive.ARGUMENT,1,stream,elements,false,debug,network);    ensureArguments(TO,1,arguments,stream);    ensureNext(BY,stream);    arguments=parseArguments(equation,Primitive.ARGUMENT,2,stream,elements,false,debug,network);    ensureArguments(BY,1,arguments,stream);    next=lower(stream.peekWord());    if (WITH.equals(next)) {      stream.nextWord();      ensureNext(META,stream);      arguments=parseArguments(equation,Primitive.ARGUMENT,3,stream,elements,false,debug,network);      ensureArguments(META,1,arguments,stream);      ensureNext(AS,stream);      arguments=parseArguments(equation,Primitive.ARGUMENT,4,stream,elements,false,debug,network);      ensureArguments(AS,1,arguments,stream);    }  } else   if (last.equals(ASSIGN)) {    ensureArguments(ASSIGN,1,arguments,stream);    ensureNext(TO,stream);    arguments=parseArguments(equation,Primitive.ARGUMENT,1,stream,elements,false,debug,network);    ensureArguments(TO,1,arguments,stream);  } else   if (last.equals(DEFINE)) {    ensureArguments(ASSIGN,1,arguments,stream);    ensureNext(AS,stream);    arguments=parseArguments(equation,Primitive.ARGUMENT,1,stream,elements,false,debug,network);  } else   if (last.equals(EVAL)) {    ensureArguments(EVAL,1,arguments,stream);  } else   if (last.equals(NOT)) {    ensureArguments(NOT,1,arguments,stream);  } else   if (last.equals(APPEND)) {    ensureArguments(APPEND,1,arguments,stream);    ensureNext(TO,stream);    arguments=parseArguments(equation,Primitive.ARGUMENT,1,stream,elements,false,debug,network);    ensureArguments(TO,1,arguments,stream);    ensureNext(OF,stream);    arguments=parseArguments(equation,Primitive.ARGUMENT,2,stream,elements,false,debug,network);    ensureArguments(OF,1,arguments,stream);    next=lower(stream.peekWord());    if (WITH.equals(next)) {      stream.nextWord();      ensureNext(META,stream);      arguments=parseArguments(equation,Primitive.ARGUMENT,3,stream,elements,false,debug,network);      ensureArguments(META,1,arguments,stream);      ensureNext(AS,stream);      arguments=parseArguments(equation,Primitive.ARGUMENT,4,stream,elements,false,debug,network);      ensureArguments(AS,1,arguments,stream);    }  } else   if (last.equals(CALL)) {    ensureArguments(CALL,1,arguments,stream);    ensureNext(ON,stream);    arguments=parseArguments(equation,Primitive.ARGUMENT,1,stream,elements,false,debug,network);    ensureArguments(ON,1,arguments,stream);    next=lower(stream.peekWord());    if (WITH.equals(next)) {      stream.nextWord();      arguments=parseArguments(equation,Primitive.ARGUMENT,2,stream,elements,false,debug,network);    }  } else   if (last.equals(FORMAT)) {    ensureNext(AS,stream);    arguments=parseArguments(equation,Primitive.AS,1,stream,elements,false,debug,network);    ensureArguments(AS,1,arguments,stream);  } else   if (last.equals(SRAI) || last.equals(REDIRECT)) {    ensureArguments(SRAI,1,arguments,stream);  } else   if (last.equals(SRAIX) || last.equals(REQUEST)) {    ensureArguments(SRAI,1,arguments,stream);    next=lower(stream.peekWord());    if ("bot".equals(next)) {      stream.nextWord();      arguments=parseArguments(equation,Primitive.BOT,0,stream,elements,false,debug,network);    }    next=lower(stream.peekWord());    if ("botid".equals(next)) {      stream.nextWord();      arguments=parseArguments(equation,Primitive.BOTID,0,stream,elements,false,debug,network);    }    next=lower(stream.peekWord());    if ("service".equals(next)) {      stream.nextWord();      arguments=parseArguments(equation,Primitive.SERVICE,0,stream,elements,false,debug,network);    }    next=lower(stream.peekWord());    if ("server".equals(next)) {      stream.nextWord();      arguments=parseArguments(equation,Primitive.SERVER,0,stream,elements,false,debug,network);    }    next=lower(stream.peekWord());    if ("apikey".equals(next)) {      stream.nextWord();      arguments=parseArguments(equation,Primitive.APIKEY,0,stream,elements,false,debug,network);    }    next=lower(stream.peekWord());    if ("limit".equals(next)) {      stream.nextWord();      arguments=parseArguments(equation,Primitive.LIMIT,0,stream,elements,false,debug,network);    }    next=lower(stream.peekWord());    if ("hint".equals(next)) {      stream.nextWord();      arguments=parseArguments(equation,Primitive.HINT,0,stream,elements,false,debug,network);    }    next=lower(stream.peekWord());    if ("default".equals(next)) {      stream.nextWord();      arguments=parseArguments(equation,Primitive.DEFAULT,0,stream,elements,false,debug,network);    }  }  return equation;}  }
