class C{  public synchronized void reset() throws IOException {  throw new IOException("mark/reset not supported");}  }
class C{  public final void log(final Priority priority,final String message,final Throwable throwable){  if (m_priority.isLowerOrEqual(priority)) {    output(priority,message,throwable);  }}  }
class C{  public synchronized void serializeParameters(ArrayList<String> p){  for (  Node t : parameters) {    if (t.param != null) {      if (t.param instanceof RemainingOptions) {        for (        String str : t.value.split(" ")) {          if (str.length() > 0) {            p.add(str);          }        }      } else       if (t.param instanceof Flag) {        if (Flag.SET.equals(t.value)) {          p.add(SerializedParameterization.OPTION_PREFIX + t.param.getOptionID().getName());        }      } else       if (t.value != null && t.value.length() > 0) {        if (!t.value.startsWith(STRING_USE_DEFAULT) && !STRING_OPTIONAL.equals(t.value)) {          p.add(SerializedParameterization.OPTION_PREFIX + t.param.getOptionID().getName());          p.add(t.value);        }      }    }  }}  }
class C{  @Override public final int hashCode(){  long secondhash=Double.doubleToLongBits(second);  secondhash=secondhash ^ (secondhash >> 32);  return (int)(first * 2654435761L + secondhash);}  }
class C{  @Override public Map<String,Object> handleJsonRequest(Map<String,?> json){  try {    logger.infofmt("Publishing detail report for parameters: %s",json);    String registrarId=getParam(json,REGISTRAR_ID_PARAM);    Registrar registrar=checkArgumentNotNull(Registrar.loadByClientId(registrarId),"Registrar %s not found",registrarId);    String driveFolderId=checkArgumentNotNull(registrar.getDriveFolderId(),"No drive folder associated with registrar " + registrarId);    String gcsBucketName=getParam(json,GCS_BUCKET_PARAM);    String gcsObjectName=getParam(json,GCS_FOLDER_PREFIX_PARAM) + getParam(json,DETAIL_REPORT_NAME_PARAM);    try (InputStream input=gcsUtils.openInputStream(new GcsFilename(gcsBucketName,gcsObjectName))){      String driveId=driveConnection.createFile(getParam(json,DETAIL_REPORT_NAME_PARAM),REPORT_MIME_TYPE,driveFolderId,ByteStreams.toByteArray(input));      logger.infofmt("Published detail report for %s to folder %s using GCS file gs://%s/%s.",registrarId,driveFolderId,gcsBucketName,gcsObjectName);      return ImmutableMap.<String,Object>of("driveId",driveId);    } catch (    FileNotFoundException e) {      throw new IllegalArgumentException(e.getMessage(),e);    }  } catch (  Throwable e) {    logger.severe(e,e.toString());    String message=firstNonNull(e.getMessage(),e.toString());    throw e instanceof IllegalArgumentException ? new BadRequestException(message) : new InternalServerErrorException(message);  }}  }
class C{  @Override public Workspace parseOutput(final String stdout,final String stderr){  super.throwIfError(stderr);  final NodeList workspaceNodeList=super.evaluateXPath(stdout,"/workspaces/workspace");  if (workspaceNodeList != null && workspaceNodeList.getLength() == 1) {    final NamedNodeMap workspaceAttributes=workspaceNodeList.item(0).getAttributes();    final NodeList mappingsNodeList=super.evaluateXPath(stdout,"/workspaces/workspace/working-folder");    final List<Workspace.Mapping> mappings=new ArrayList<Workspace.Mapping>(mappingsNodeList.getLength());    for (int i=0; i < mappingsNodeList.getLength(); i++) {      final NamedNodeMap mappingAttributes=mappingsNodeList.item(i).getAttributes();      final String localPath=getXPathAttributeValue(mappingAttributes,"local-item");      final String depth=getXPathAttributeValue(mappingAttributes,"depth");      final boolean isCloaked=!StringUtils.equals(getXPathAttributeValue(mappingAttributes,"type"),"map");      String serverPath=getXPathAttributeValue(mappingAttributes,"server-item");      if (!StringUtils.equals(depth,"full")) {        serverPath=WorkspaceHelper.getOneLevelServerPath(serverPath);      }      mappings.add(new Workspace.Mapping(serverPath,localPath,isCloaked));    }    String owner=getXPathAttributeValue(workspaceAttributes,"owner-display-name");    if (StringUtils.isEmpty(owner)) {      owner=getXPathAttributeValue(workspaceAttributes,"owner");    }    final Workspace workspace=new Workspace(getXPathAttributeValue(workspaceAttributes,"server"),getXPathAttributeValue(workspaceAttributes,"name"),getXPathAttributeValue(workspaceAttributes,"computer"),owner,getXPathAttributeValue(workspaceAttributes,"comment"),mappings);    return workspace;  }  return null;}  }
class C{  public void deleteNode(ListItem item){  if (item != null) {    if (m_tree.isProduct()) {      MTree_NodePR node=MTree_NodePR.get(m_tree,item.id);      if (node != null)       node.delete(true);    } else     if (m_tree.isBPartner()) {      MTree_NodeBP node=MTree_NodeBP.get(m_tree,item.id);      if (node != null)       node.delete(true);    } else     if (m_tree.isMenu()) {      MTree_NodeMM node=MTree_NodeMM.get(m_tree,item.id);      if (node != null)       node.delete(true);    } else {      MTree_Node node=MTree_Node.get(m_tree,item.id);      if (node != null)       node.delete(true);    }  }}  }
class C{  public String globalInfo(){  return "The CISearchAlgorithm class supports Bayes net structure " + "search algorithms that are based on conditional independence " + "test (as opposed to for example score based of cross validation "+ "based search algorithms).";}  }
class C{  @Override public void updateExperimentState(){}  }
class C{  public ICalReader(String str){  this(str,ICalVersion.V2_0);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:35.800 -0500",hash_original_method="9AF334B8B7AF494EC1E65710EFD1F300",hash_generated_method="20811D01627BCC2F4CB093CF77E0D3FB") public final boolean hasDataType(String type){  return mDataTypes != null && findMimeType(type);}  }
class C{  public boolean tieneDescriptores(String id){  List descriptores=descriptorDBEntity.getDescriptores(getServiceClient(),id);  return (descriptores.size() > 0);}  }
class C{  public void executeQuery(KeyNamePair docTypeKNPair,IMiniTable miniTable){  log.info("");  int AD_Client_ID=Env.getAD_Client_ID(Env.getCtx());  String sql="";  if (docTypeKNPair.getKey() == MOrder.Table_ID) {    sql=getOrderSQL();  } else {    sql=getRMASql();  }  int row=0;  miniTable.setRowCount(row);  try {    PreparedStatement pstmt=DB.prepareStatement(sql.toString(),null);    pstmt.setInt(1,AD_Client_ID);    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      miniTable.setRowCount(row + 1);      miniTable.setValueAt(new IDColumn(rs.getInt(1)),row,0);      miniTable.setValueAt(rs.getString(2),row,1);      miniTable.setValueAt(rs.getString(3),row,2);      miniTable.setValueAt(rs.getString(4),row,3);      miniTable.setValueAt(rs.getString(5),row,4);      miniTable.setValueAt(rs.getTimestamp(6),row,5);      miniTable.setValueAt(rs.getBigDecimal(7),row,6);      row++;    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql.toString(),e);  }  miniTable.autoSize();}  }
class C{  public InputStream openPatchExpansion() throws IOException {  if (appDeliveryData.getAdditionalFileCount() < 2) {    return null;  }  String url=appDeliveryData.getAdditionalFile(1).getDownloadUrl();  return api.executeDownload(url,downloadAuthCookie.getName() + "=" + downloadAuthCookie.getValue());}  }
class C{  public static double[] copyOfRange(double[] original,int start,int end){  if (start <= end) {    if (original.length >= start && 0 <= start) {      int length=end - start;      int copyLength=Math.min(length,original.length - start);      double[] copy=new double[length];      System.arraycopy(original,start,copy,0,copyLength);      return copy;    }    throw new ArrayIndexOutOfBoundsException();  }  throw new IllegalArgumentException();}  }
class C{  private void sendMailToQueue(String to,String subject,String content,boolean isMultipart,boolean isHtml){  EmailParams emailParams=new EmailParams(to,subject,content,isMultipart,isHtml);  rabbitTemplate.convertAndSend(RabbitmqConfiguration.QUEUE_SEND_EMAIL,emailParams);}  }
class C{  public ObjectColumn(Class type){  this(type,0,10,null);}  }
class C{  public static String extractParameter(String input,String param,String defaultValue){  int begin=input.indexOf(param) + param.length();  if (begin != -1) {    int end=input.indexOf(" ",begin);    if (input.charAt(begin) == '\"') {      begin++;      end=input.indexOf("\"",begin);    }    if (end == -1) {      return input.substring(begin);    }    return input.substring(begin,end);  }  return defaultValue;}  }
class C{  public void removeListener(LifecycleListener listener){synchronized (this) {    if (_listeners == null)     return;    for (int i=_listeners.size() - 1; i >= 0; i--) {      LifecycleListener oldListener=_listeners.get(i).get();      if (listener == oldListener) {        _listeners.remove(i);        return;      } else       if (oldListener == null)       _listeners.remove(i);    }  }}  }
class C{  public static MmContent createMmContentFromSdp(SipRequest invite,RcsSettings rcsSettings) throws PayloadException {  String remoteSdp=invite.getSdpContent();  SipUtils.assertContentIsNotNull(remoteSdp,invite);  SdpParser parser=new SdpParser(remoteSdp.getBytes(UTF8));  Vector<MediaDescription> media=parser.getMediaDescriptions();  MediaDescription desc=media.elementAt(0);  MediaAttribute attr1=desc.getMediaAttribute("file-selector");  String fileSelectorValue=attr1.getValue();  String mime=SipUtils.extractParameter(fileSelectorValue,"type:","application/octet-stream");  long size=Long.parseLong(SipUtils.extractParameter(fileSelectorValue,"size:","-1"));  String filename=SipUtils.extractParameter(fileSelectorValue,"name:","");  Uri file=ContentManager.generateUriForReceivedContent(filename,mime,rcsSettings);  MediaAttribute attr2=desc.getMediaAttribute("file-disposition");  String fileDispoValue=attr2.getValue();  MmContent content=ContentManager.createMmContent(file,mime,size,filename);  if (FileSharingSession.FILE_DISPOSITION_RENDER.equals(fileDispoValue)) {    content.setPlayable(true);  }  return content;}  }
class C{  public static MosaicDefinition createMosaicDefinition(final Account creator,final MosaicId mosaicId,final MosaicProperties properties){  return new MosaicDefinition(creator,mosaicId,new MosaicDescriptor("precious vouchers"),properties,null);}  }
class C{  public boolean isHierPart(){  return _is_hier_part;}  }
class C{  public boolean isAbstract(){  return (accessFlags & AccessFlag.ABSTRACT) != 0;}  }
class C{  private void updateRecoverPointBlockSnapshots(){  log.info("Updating RecoverPoint BlockSnapshots to reference parent Volume's BlockConsistencyGroup.");  DbClient dbClient=getDbClient();  List<URI> blockSnapshotURIs=dbClient.queryByType(BlockSnapshot.class,false);  Iterator<BlockSnapshot> blockSnapshots=dbClient.queryIterativeObjects(BlockSnapshot.class,blockSnapshotURIs);  while (blockSnapshots.hasNext()) {    BlockSnapshot blockSnapshot=blockSnapshots.next();    if (blockSnapshot.getEmName() != null) {      NamedURI parentVolUri=blockSnapshot.getParent();      Volume parentVolume=dbClient.queryObject(Volume.class,parentVolUri.getURI());      if (parentVolume.fetchConsistencyGroupUriByType(dbClient,Types.RP) != null) {        URI rpCgUri=parentVolume.fetchConsistencyGroupUriByType(dbClient,Types.RP);        blockSnapshot.addConsistencyGroup(rpCgUri.toString());        dbClient.persistObject(blockSnapshot);        log.info("Updated BlockSnapshot (id={}) to reference parent Volume's BlockConsistencyGroup (id={})",blockSnapshot.getId().toString(),rpCgUri.toString());      }    }  }}  }
class C{  @DELETE @Path("{noteId}/paragraph/{paragraphId}") @ZeppelinApi public Response deleteParagraph(@PathParam("noteId") String noteId,@PathParam("paragraphId") String paragraphId) throws IOException {  LOG.info("delete paragraph {} {}",noteId,paragraphId);  Note note=notebook.getNote(noteId);  if (note == null) {    return new JsonResponse(Status.NOT_FOUND,"note not found.").build();  }  Paragraph p=note.getParagraph(paragraphId);  if (p == null) {    return new JsonResponse(Status.NOT_FOUND,"paragraph not found.").build();  }  AuthenticationInfo subject=new AuthenticationInfo(SecurityUtils.getPrincipal());  note.removeParagraph(SecurityUtils.getPrincipal(),paragraphId);  note.persist(subject);  notebookServer.broadcastNote(note);  return new JsonResponse(Status.OK,"").build();}  }
class C{  public CrankyTokenFilter(TokenStream input,Random random){  super(input);  this.random=random;}  }
class C{  public GridBoundedConcurrentLinkedHashMap(int max){  this(max,DFLT_INIT_CAP,DFLT_LOAD_FACTOR,DFLT_CONCUR_LVL);}  }
class C{  private static void dualPivotQuicksort(int[] a,int left,int right){  int sixth=(right - left + 1) / 6;  int e1=left + sixth;  int e5=right - sixth;  int e3=(left + right) >>> 1;  int e4=e3 + sixth;  int e2=e3 - sixth;  int ae1=a[e1], ae2=a[e2], ae3=a[e3], ae4=a[e4], ae5=a[e5];  if (ae1 > ae2) {    int t=ae1;    ae1=ae2;    ae2=t;  }  if (ae4 > ae5) {    int t=ae4;    ae4=ae5;    ae5=t;  }  if (ae1 > ae3) {    int t=ae1;    ae1=ae3;    ae3=t;  }  if (ae2 > ae3) {    int t=ae2;    ae2=ae3;    ae3=t;  }  if (ae1 > ae4) {    int t=ae1;    ae1=ae4;    ae4=t;  }  if (ae3 > ae4) {    int t=ae3;    ae3=ae4;    ae4=t;  }  if (ae2 > ae5) {    int t=ae2;    ae2=ae5;    ae5=t;  }  if (ae2 > ae3) {    int t=ae2;    ae2=ae3;    ae3=t;  }  if (ae4 > ae5) {    int t=ae4;    ae4=ae5;    ae5=t;  }  a[e1]=ae1;  a[e3]=ae3;  a[e5]=ae5;  int pivot1=ae2;  a[e2]=a[left];  int pivot2=ae4;  a[e4]=a[right];  int less=left + 1;  int great=right - 1;  boolean pivotsDiffer=(pivot1 != pivot2);  if (pivotsDiffer) {    outer:     for (int k=less; k <= great; k++) {      int ak=a[k];      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else       if (ak > pivot2) {        while (a[great] > pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=a[great];          a[great--]=ak;        }      }    }  } else {    for (int k=less; k <= great; k++) {      int ak=a[k];      if (ak == pivot1) {        continue;      }      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else {        while (a[great] > pivot1) {          great--;        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=pivot1;          a[great--]=ak;        }      }    }  }  a[left]=a[less - 1];  a[less - 1]=pivot1;  a[right]=a[great + 1];  a[great + 1]=pivot2;  doSort(a,left,less - 2);  doSort(a,great + 2,right);  if (!pivotsDiffer) {    return;  }  if (less < e1 && great > e5) {    while (a[less] == pivot1) {      less++;    }    while (a[great] == pivot2) {      great--;    }    outer:     for (int k=less; k <= great; k++) {      int ak=a[k];      if (ak == pivot2) {        while (a[great] == pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] == pivot1) {          a[k]=a[less];          a[less++]=pivot1;        } else {          a[k]=a[great];        }        a[great--]=pivot2;      } else       if (ak == pivot1) {        a[k]=a[less];        a[less++]=pivot1;      }    }  }  doSort(a,less,great);}  }
class C{  public NodeSetDTM(int blocksize,int dummy,DTMManager dtmManager){  super(blocksize);  m_manager=dtmManager;}  }
class C{  public void endVisit(SuperConstructorInvocation node){}  }
class C{  public void CopyFrom(ToXMLStream xmlListener){  setWriter(xmlListener.m_writer);  String encoding=xmlListener.getEncoding();  setEncoding(encoding);  setOmitXMLDeclaration(xmlListener.getOmitXMLDeclaration());  m_ispreserve=xmlListener.m_ispreserve;  m_preserves=xmlListener.m_preserves;  m_isprevtext=xmlListener.m_isprevtext;  m_doIndent=xmlListener.m_doIndent;  setIndentAmount(xmlListener.getIndentAmount());  m_startNewLine=xmlListener.m_startNewLine;  m_needToOutputDocTypeDecl=xmlListener.m_needToOutputDocTypeDecl;  setDoctypeSystem(xmlListener.getDoctypeSystem());  setDoctypePublic(xmlListener.getDoctypePublic());  setStandalone(xmlListener.getStandalone());  setMediaType(xmlListener.getMediaType());  m_encodingInfo=xmlListener.m_encodingInfo;  m_spaceBeforeClose=xmlListener.m_spaceBeforeClose;  m_cdataStartCalled=xmlListener.m_cdataStartCalled;}  }
class C{  @Override public void displayBasePlanInfo(BasePlan basePlan){  this.basePlan=basePlan;  planAdapter.setBasePlanInfo(basePlan);}  }
class C{  public static Transformer createTransformer(Source source){  try {    return getTransformerFactory().newTransformer(source);  } catch (  TransformerConfigurationException e) {    throw new XmlException(e);  }}  }
class C{  public void show(){  mContentView.setVisibility(View.VISIBLE);}  }
class C{  public int exitWifiConfig(){  try {    this.connect();    GWAction gwAction=new GWAction();    gwAction.action=DeviceRequest.ACTION_EXIT_CONFIG;    GWActionPacket packet=new GWActionPacket(gwAction);    packet.setMsgType(GWPacket.MSG_EXIT_CONFIG);    if (this.send(packet) > 0) {      return 0;    }    return -1;  } catch (  Exception e) {    e.printStackTrace();    return -1;  }}  }
class C{  @Override protected void refreshSemantic(){  List<IAdaptable> createdViews=super.refreshSemanticChildren();  List<IAdaptable> createdConnectionViews=refreshSemanticConnections();  List<IAdaptable> allViews=new ArrayList<IAdaptable>(createdConnectionViews.size() + createdViews.size());  allViews.addAll(createdViews);  allViews.addAll(createdConnectionViews);  makeViewsImmutable(allViews);}  }
class C{  public void addProperties(List<URI> propFiles) throws IOException {  propFiles=new ArrayList<URI>(propFiles);  Collections.reverse(propFiles);  for (  URI file : propFiles) {    addProperties(file);  }}  }
class C{  public List<double[]> createLiftDataList(ExampleSet exampleSet){  Attribute label=exampleSet.getAttributes().getLabel();  Attribute predictedLabel=exampleSet.getAttributes().getPredictedLabel();  WeightedConfidenceAndLabel[] calArray=new WeightedConfidenceAndLabel[exampleSet.size()];  Attribute weightAttr=exampleSet.getAttributes().getWeight();  Attribute labelAttr=exampleSet.getAttributes().getLabel();  String positiveClassName=labelAttr.getMapping().mapIndex(label.getMapping().getPositiveIndex());  int index=0;  Iterator<Example> reader=exampleSet.iterator();  while (reader.hasNext()) {    Example example=reader.next();    WeightedConfidenceAndLabel wcl;    if (weightAttr == null) {      wcl=new WeightedConfidenceAndLabel((-1) * example.getConfidence(positiveClassName),example.getValue(labelAttr),example.getValue(predictedLabel));    } else {      wcl=new WeightedConfidenceAndLabel((-1) * example.getConfidence(positiveClassName),example.getValue(labelAttr),example.getValue(weightAttr),example.getValue(predictedLabel));    }    calArray[index++]=wcl;  }  Arrays.sort(calArray);  List<double[]> tableData=new LinkedList<double[]>();  double[] confidenceMatrix=new double[4];  this.maxLift=Double.NEGATIVE_INFINITY;  for (int i=0; i < calArray.length; i++) {    WeightedConfidenceAndLabel wcl=calArray[i];    double weight=wcl.getWeight();    double labelValue=wcl.getLabel();    double predictionValue=wcl.getPrediction();    if (labelValue == label.getMapping().getPositiveIndex()) {      if (predictionValue == label.getMapping().getPositiveIndex()) {        confidenceMatrix[TP]+=weight;      } else {        confidenceMatrix[FN]+=weight;      }    } else {      if (predictionValue == label.getMapping().getPositiveIndex()) {        confidenceMatrix[FP]+=weight;      } else {        confidenceMatrix[TN]+=weight;      }    }    double lift=(confidenceMatrix[TP] * (confidenceMatrix[FP] + confidenceMatrix[TN])) / ((confidenceMatrix[TP] + confidenceMatrix[FP]) * (confidenceMatrix[TP] + confidenceMatrix[FN]));    if (!Double.isNaN(lift)) {      maxLift=Math.max(lift,this.maxLift);    }    tableData.add(new double[]{i,lift});  }  return tableData;}  }
class C{  private boolean mutateFMOVs(LiveIntervalElement live,Register register,int dfnbegin,int dfnend){  Instruction end=live.getEnd();  if (end != null && end.operator() == org.jikesrvm.compilers.opt.ir.ia32.ArchOperators.IA32_FMOV) {    if (dfnend == dfnbegin) {      Empty.mutate(end,NOP);      return false;    } else {      if (!end.isPEI()) {        if (VM.VerifyAssertions) {          Operand value=org.jikesrvm.compilers.opt.ir.ia32.MIR_Move.getValue(end);          VM._assert(value.isRegister());          VM._assert(org.jikesrvm.compilers.opt.ir.ia32.MIR_Move.getValue(end).asRegister().getRegister() == register);        }        end.changeOperatorTo(org.jikesrvm.compilers.opt.ir.ia32.ArchOperators.IA32_FMOV_ENDING_LIVE_RANGE);      }    }  }  return true;}  }
class C{  public void addPoint(CGPoint location,float w){  w=w * 0.5f;  if (!pastFirstPoint_) {    lastWidth_=w;    lastLocation_=location;    pastFirstPoint_=true;    return;  }  CGPoint sub=CGPoint.ccpSub(lastLocation_,location);  float r=CGPoint.ccpToAngle(sub) + (float)Math.PI * 2;  CGPoint p1=CGPoint.ccpAdd(rotatePoint(CGPoint.ccp(-w,0),r),location);  CGPoint p2=CGPoint.ccpAdd(rotatePoint(CGPoint.ccp(w,0),r),location);  float len=(float)Math.sqrt((float)Math.pow(lastLocation_.x - location.x,2) + (float)Math.pow(lastLocation_.y - location.y,2));  float tend=texVPos_ + len / textureLength_;  CCRibbonSegment seg;  seg=segments_.get(segments_.size() - 1);  for (  CCRibbonSegment seg2 : segments_) {    if (seg2 != seg && seg2.finished) {      deletedSegments_.add(seg2);    }  }  segments_.removeAll(deletedSegments_);  if (seg.end >= 50)   segments_.removeAll(deletedSegments_);  seg=segments_.get(segments_.size() - 1);  if (seg.end >= 50) {    CCRibbonSegment newSeg;    if (deletedSegments_.size() > 0) {      newSeg=deletedSegments_.get(0);      deletedSegments_.remove(newSeg);      newSeg.reset();    } else {      newSeg=new CCRibbonSegment();    }    int v=(seg.end - 1) * 6;    int c=(seg.end - 1) * 4;    newSeg.verts[0]=seg.verts[v];    newSeg.verts[1]=seg.verts[v + 1];    newSeg.verts[2]=seg.verts[v + 2];    newSeg.verts[3]=seg.verts[v + 3];    newSeg.verts[4]=seg.verts[v + 4];    newSeg.verts[5]=seg.verts[v + 5];    newSeg.coords[0]=seg.coords[c];    newSeg.coords[1]=seg.coords[c + 1];    newSeg.coords[2]=seg.coords[c + 2];    newSeg.coords[3]=seg.coords[c + 3];    newSeg.end++;    seg=newSeg;    segments_.add(seg);  }  if (seg.end == 0) {    CGPoint lp1=CGPoint.ccpAdd(rotatePoint(CGPoint.ccp(-lastWidth_,0),r),lastLocation_);    CGPoint lp2=CGPoint.ccpAdd(rotatePoint(CGPoint.ccp(+lastWidth_,0),r),lastLocation_);    seg.creationTime[0]=curTime_ - delta_;    seg.verts[0]=lp1.x;    seg.verts[1]=lp1.y;    seg.verts[2]=0.0f;    seg.verts[3]=lp2.x;    seg.verts[4]=lp2.y;    seg.verts[5]=0.0f;    seg.coords[0]=0.0f;    seg.coords[1]=texVPos_;    seg.coords[2]=1.0f;    seg.coords[3]=texVPos_;    seg.end++;  }  int v=seg.end * 6;  int c=seg.end * 4;  seg.creationTime[seg.end]=curTime_;  seg.verts[v]=p1.x;  seg.verts[v + 1]=p1.y;  seg.verts[v + 2]=0.0f;  seg.verts[v + 3]=p2.x;  seg.verts[v + 4]=p2.y;  seg.verts[v + 5]=0.0f;  seg.coords[c]=0.0f;  seg.coords[c + 1]=tend;  seg.coords[c + 2]=1.0f;  seg.coords[c + 3]=tend;  texVPos_=tend;  lastLocation_=location;  lastPoint1_=p1;  lastPoint2_=p2;  lastWidth_=w;  seg.end++;}  }
class C{  public GroupingExpression(){}  }
class C{  public boolean shouldSelectCell(EventObject e){  log.finest(m_mField.getColumnName());  return true;}  }
class C{  public head(String value){  addElement(value);}  }
class C{  public static <S>boolean containsAtleastOne(Collection<S> left,Collection<S> right){  if (left == null || right == null) {    return false;  }  for (  S id : left) {    if (right.contains(id)) {      return true;    }  }  return false;}  }
class C{  public void randomize(){  forceSetActivation(this.getUpdateRule().getRandomValue());  getNetwork().fireNeuronChanged(this);}  }
class C{  public void tunnelProxy(HttpHost next,boolean secure,HttpParams params) throws IOException {  if (next == null) {    throw new IllegalArgumentException("Next proxy must not be null.");  }  if (params == null) {    throw new IllegalArgumentException("Parameters must not be null.");  }  if ((this.tracker == null) || !this.tracker.isConnected()) {    throw new IllegalStateException("Connection not open.");  }  this.connection.update(null,next,secure,params);  this.tracker.tunnelProxy(next,secure);}  }
class C{  public ASN1Primitive toASN1Primitive(){  ASN1EncodableVector v=new ASN1EncodableVector();  v.add(contentType);  if (content != null) {    v.add(new BERTaggedObject(0,content));  }  return new BERSequence(v);}  }
class C{  @Override public boolean onTouch(View v,MotionEvent event){  v.performClick();  if (event.getAction() == MotionEvent.ACTION_DOWN) {    v.setBackgroundResource(R.color.custom_actionbar_item_click_bg);    if (v.getId() == ITEMS.SHAREMANAGER.getNumVal()) {      Log.v(TAG,"in onTouch(), shareManager icon was clicked");      Intent shareManagerActivity=new Intent(this,ShareManagerActivity.class);      shareManagerActivity.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);      startActivity(shareManagerActivity);    }    if (v.getId() == ITEMS.FILEBROWSER.getNumVal()) {      Log.v(TAG,"in onTouch(), fileBrowser icon was clicked");      Intent fileBrowserActivity=new Intent(this,FileBrowserActivity.class);      fileBrowserActivity.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);      startActivity(fileBrowserActivity);    }    if (v.getId() == ITEMS.NFC.getNumVal()) {      Log.v(TAG,"in onTouch(), nfc icon was clicked");      Intent nfcActivity=new Intent(this,NFCActivity.class);      nfcActivity.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);      startActivity(nfcActivity);    }  }  if (event.getAction() == MotionEvent.ACTION_UP) {  }  return false;}  }
class C{  @Override public String label(){  return key();}  }
class C{  public Clustering<M> run(Database database,Relation<V> relation){  if (relation.size() == 0) {    throw new IllegalArgumentException("database empty: must contain elements");  }  if (LOG.isVerbose()) {    LOG.verbose("initializing " + k + " models");  }  List<? extends EMClusterModel<M>> models=mfactory.buildInitialModels(database,relation,k,SquaredEuclideanDistanceFunction.STATIC);  WritableDataStore<double[]> probClusterIGivenX=DataStoreUtil.makeStorage(relation.getDBIDs(),DataStoreFactory.HINT_HOT | DataStoreFactory.HINT_SORTED,double[].class);  double emNew=assignProbabilitiesToInstances(relation,models,probClusterIGivenX);  if (LOG.isVerbose()) {    LOG.verbose("iterating EM");  }  if (LOG.isVerbose()) {    LOG.verbose("iteration " + 0 + " - expectation value: "+ emNew);  }  for (int it=1; it <= maxiter || maxiter < 0; it++) {    final double emOld=emNew;    recomputeCovarianceMatrices(relation,probClusterIGivenX,models);    emNew=assignProbabilitiesToInstances(relation,models,probClusterIGivenX);    if (LOG.isVerbose()) {      LOG.verbose("iteration " + it + " - expectation value: "+ emNew);    }    if (Math.abs(emOld - emNew) <= delta || emOld > emNew) {      break;    }  }  if (LOG.isVerbose()) {    LOG.verbose("assigning clusters");  }  List<ModifiableDBIDs> hardClusters=new ArrayList<>(k);  for (int i=0; i < k; i++) {    hardClusters.add(DBIDUtil.newHashSet());  }  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {    double[] clusterProbabilities=probClusterIGivenX.get(iditer);    int maxIndex=0;    double currentMax=0.0;    for (int i=0; i < k; i++) {      if (clusterProbabilities[i] > currentMax) {        maxIndex=i;        currentMax=clusterProbabilities[i];      }    }    hardClusters.get(maxIndex).add(iditer);  }  Clustering<M> result=new Clustering<>("EM Clustering","em-clustering");  for (int i=0; i < k; i++) {    Cluster<M> model=new Cluster<>(hardClusters.get(i),models.get(i).finalizeCluster());    result.addToplevelCluster(model);  }  if (isSoft()) {    result.addChildResult(new MaterializedRelation<>("cluster assignments","em-soft-score",SOFT_TYPE,probClusterIGivenX,relation.getDBIDs()));  } else {    probClusterIGivenX.destroy();  }  return result;}  }
class C{  @Bean public SpringProcessEngineConfiguration activitiProcessEngineConfiguration(AsyncExecutor activitiAsyncExecutor){  SpringProcessEngineConfiguration configuration=new SpringProcessEngineConfiguration();  configuration.setDataSource(herdDataSource);  configuration.setTransactionManager(herdTransactionManager);  configuration.setDatabaseSchemaUpdate(getActivitiDbSchemaUpdateParamBeanName());  configuration.setAsyncExecutorActivate(true);  configuration.setAsyncExecutorEnabled(true);  configuration.setAsyncExecutor(activitiAsyncExecutor);  configuration.setBeans(new HashMap<>());  configuration.setDelegateInterceptor(herdDelegateInterceptor);  configuration.setCommandInvoker(herdCommandInvoker);  initScriptingEngines(configuration);  configuration.setMailServerDefaultFrom(configurationHelper.getProperty(ConfigurationValue.ACTIVITI_DEFAULT_MAIL_FROM));  List<ProcessEngineConfigurator> herdConfigurators=new ArrayList<>();  herdConfigurators.add(herdProcessEngineConfigurator);  configuration.setConfigurators(herdConfigurators);  return configuration;}  }
class C{  public boolean hasSpan(){  return getSpan() != null;}  }
class C{  public static Transaction roundTripTransaction(NetworkParameters params,Transaction tx){  try {    MessageSerializer bs=params.getDefaultSerializer();    ByteArrayOutputStream bos=new ByteArrayOutputStream();    bs.serialize(tx,bos);    return (Transaction)bs.deserialize(ByteBuffer.wrap(bos.toByteArray()));  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public void insert(T item,double priority){}  }
class C{  public ResolvedJavaMethod method(){  return method;}  }
class C{  @Override default Eval<Double> sumDouble(final ToDoubleFunction<? super T> fn){  return Eval.later(null);}  }
class C{  private Position interpolateTrackPosition(double t,Position begin,Position end){  if (begin == null || end == null)   return null;  return Position.interpolateRhumb(t,begin,end);}  }
class C{  public area(String shape,int[] coords){  setShape(shape);  setCoords(coords);}  }
class C{  private static int toInt(byte[] bytes,int offset){  return toInt(bytes,offset,SIZEOF_INT);}  }
class C{  public int addPadding(byte[] in,int inOff){  byte code=(byte)(in.length - inOff);  while (inOff < in.length) {    in[inOff]=code;    inOff++;  }  return code;}  }
class C{  void matchPoints(int modifiedStepIndex){  if (stepCheckBoxes == null) {    return;  }  if (modifiedStepIndex < 0) {    log.error("matchPoints called with index too small: " + modifiedStepIndex);  }  if (modifiedStepIndex >= stepCheckBoxes.size()) {    log.error("matchPoints called with index too large: " + modifiedStepIndex + " >= "+ stepCheckBoxes.size());  }  if (stepCheckBoxes.get(modifiedStepIndex) == null) {    log.error("matchPoints found null checkbox " + modifiedStepIndex);  }  if (!stepCheckBoxes.get(modifiedStepIndex).isSelected()) {    return;  }  matchPointsLeft(modifiedStepIndex);  matchPointsRight(modifiedStepIndex);}  }
class C{  protected void paintScene(){  viewSurf.saveTx();  viewSurf.begin();  viewSurf.clear(cred,cgreen,cblue,calpha);  try {    rootLayer.paint(viewSurf);  }  finally {    viewSurf.end();    viewSurf.restoreTx();  }}  }
class C{  public List<Vertex> findAllQuery(String query){  return new ArrayList<Vertex>();}  }
class C{  public M resolve(String text){  List<M> list=cache.get(text);  if (list == null) {    list=resolveAll(text);  }  if (list.isEmpty()) {    return null;  }  return list.get(0);}  }
class C{  @Override public void initialize(Map<String,Object> properties){  return;}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();  if (subSignature.equals("java.lang.Process execInternal(java.lang.String[],java.lang.String[],java.lang.String)")) {    java_lang_Runtime_execInternal(method,thisVar,returnVar,params);    return;  } else {    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  public boolean isStatusBarTintEnabled(){  return mStatusBarTintEnabled;}  }
class C{  public void testLUCENE_1590() throws Exception {  Document doc=new Document();  FieldType customType=new FieldType(TextField.TYPE_NOT_STORED);  customType.setOmitNorms(true);  FieldType customType2=new FieldType();  customType2.setStored(true);  doc.add(newField("f1","v1",customType));  doc.add(newField("f1","v2",customType2));  FieldType customType3=new FieldType(TextField.TYPE_NOT_STORED);  customType3.setIndexOptions(IndexOptions.DOCS);  Field f=newField("f2","v1",customType3);  doc.add(f);  doc.add(newField("f2","v2",customType2));  IndexWriter writer=new IndexWriter(dir,newIndexWriterConfig(new MockAnalyzer(random())));  writer.addDocument(doc);  writer.forceMerge(1);  writer.close();  TestUtil.checkIndex(dir);  LeafReader reader=getOnlyLeafReader(DirectoryReader.open(dir));  FieldInfos fi=reader.getFieldInfos();  assertFalse("f1 should have no norms",fi.fieldInfo("f1").hasNorms());  assertEquals("omitTermFreqAndPositions field bit should not be set for f1",IndexOptions.DOCS_AND_FREQS_AND_POSITIONS,fi.fieldInfo("f1").getIndexOptions());  assertTrue("f2 should have norms",fi.fieldInfo("f2").hasNorms());  assertEquals("omitTermFreqAndPositions field bit should be set for f2",IndexOptions.DOCS,fi.fieldInfo("f2").getIndexOptions());  reader.close();}  }
class C{  public boolean isAddressedModePossible(){  return true;}  }
class C{  public ServerContext createContextFromGitRemoteUrl(final String gitRemoteUrl){  return createContextFromGitRemoteUrl(gitRemoteUrl,true);}  }
class C{  public DError(JDialog parent,String title,Throwable error){  super(parent,ModalityType.DOCUMENT_MODAL);  setTitle(title);  this.error=error;  initComponents();}  }
class C{  @Override public String write(List<EvaluationStatistics> stats){  return append(stats);}  }
class C{  protected boolean isClosingBracket(Word w){  return w.form.equals(")") || w.form.equals("}") || w.form.equals("]")|| w.form.equals("-RBR-");}  }
class C{  public boolean hasMigration(SubmittedMigration m){  return migrations.contains(m);}  }
class C{  private Boolean sendIndividualMail(String Name,int AD_User_ID,String unsubscribe){  Integer ii=new Integer(AD_User_ID);  if (m_list.contains(ii))   return null;  m_list.add(ii);  MUser to=new MUser(getCtx(),AD_User_ID,null);  m_MailText.setUser(AD_User_ID);  String message=m_MailText.getMailText(true);  if (unsubscribe != null)   message+=unsubscribe;  EMail email=m_client.createEMail(m_from,to,m_MailText.getMailHeader(),message);  if (m_MailText.isHtml())   email.setMessageHTML(m_MailText.getMailHeader(),message); else {    email.setSubject(m_MailText.getMailHeader());    email.setMessageText(message);  }  if (!email.isValid() && !email.isValid(true)) {    log.warning("NOT VALID - " + email);    to.setIsActive(false);    to.addDescription("Invalid EMail");    to.saveEx();    return Boolean.FALSE;  }  boolean OK=EMail.SENT_OK.equals(email.send());  new MUserMail(m_MailText,AD_User_ID,email).saveEx();  if (OK)   log.fine(to.getEMail()); else   log.warning("FAILURE - " + to.getEMail());  addLog(0,null,null,(OK ? "@OK@" : "@ERROR@") + " - " + to.getEMail());  return new Boolean(OK);}  }
class C{  public static void importBPC(InputStream is,BrainPhaserApplication application) throws FileFormatException, UnexpectedElementException, ElementAmountException, InvalidAttributeException {  Node categoriesNode=BPCRead.getCategoriesNode(is);  Node childCategories=categoriesNode.getFirstChild();  List<Category> categoryList=new ArrayList<>();  List<Challenge> challengeList=new ArrayList<>();  List<Answer> answerList=new ArrayList<>();  long i=0;  long nextChallengeId=0;  while (childCategories != null) {    if (childCategories.getNodeType() == Node.ELEMENT_NODE) {      nextChallengeId=BPCObjects.readCategory(childCategories,i,nextChallengeId,categoryList,challengeList,answerList);      i++;    }    childCategories=childCategories.getNextSibling();  }  if (i == 0)   throw new ElementAmountException("<category>",">0","0");  BPCWrite writer=new BPCWrite(application);  writer.writeAll(categoryList,challengeList,answerList);}  }
class C{  private void loadDBColumnNames(){switch (mFragmentId) {case Common.ARTISTS_FRAGMENT:    mDBColumnsMap.put(ListViewCardsAdapter.TITLE_TEXT,DBAccessHelper.SONG_ARTIST);  mDBColumnsMap.put(ListViewCardsAdapter.SOURCE,DBAccessHelper.SONG_SOURCE);mDBColumnsMap.put(ListViewCardsAdapter.FILE_PATH,DBAccessHelper.SONG_FILE_PATH);mDBColumnsMap.put(ListViewCardsAdapter.ARTWORK_PATH,DBAccessHelper.SONG_ALBUM_ART_PATH);break;case Common.ALBUM_ARTISTS_FRAGMENT:mDBColumnsMap.put(ListViewCardsAdapter.TITLE_TEXT,DBAccessHelper.SONG_ALBUM_ARTIST);mDBColumnsMap.put(ListViewCardsAdapter.SOURCE,DBAccessHelper.SONG_SOURCE);mDBColumnsMap.put(ListViewCardsAdapter.FILE_PATH,DBAccessHelper.SONG_FILE_PATH);mDBColumnsMap.put(ListViewCardsAdapter.ARTWORK_PATH,DBAccessHelper.SONG_ALBUM_ART_PATH);break;case Common.ALBUMS_FRAGMENT:mDBColumnsMap.put(ListViewCardsAdapter.TITLE_TEXT,DBAccessHelper.SONG_ALBUM);mDBColumnsMap.put(ListViewCardsAdapter.SOURCE,DBAccessHelper.SONG_SOURCE);mDBColumnsMap.put(ListViewCardsAdapter.FILE_PATH,DBAccessHelper.SONG_FILE_PATH);mDBColumnsMap.put(ListViewCardsAdapter.ARTWORK_PATH,DBAccessHelper.SONG_ALBUM_ART_PATH);break;case Common.SONGS_FRAGMENT:mDBColumnsMap.put(ListViewCardsAdapter.TITLE_TEXT,DBAccessHelper.SONG_TITLE);mDBColumnsMap.put(ListViewCardsAdapter.SOURCE,DBAccessHelper.SONG_SOURCE);mDBColumnsMap.put(ListViewCardsAdapter.FILE_PATH,DBAccessHelper.SONG_FILE_PATH);mDBColumnsMap.put(ListViewCardsAdapter.ARTWORK_PATH,DBAccessHelper.SONG_ALBUM_ART_PATH);mDBColumnsMap.put(ListViewCardsAdapter.FIELD_1,DBAccessHelper.SONG_DURATION);mDBColumnsMap.put(ListViewCardsAdapter.FIELD_2,DBAccessHelper.SONG_ARTIST);break;case Common.PLAYLISTS_FRAGMENT:mDBColumnsMap.put(ListViewCardsAdapter.TITLE_TEXT,MediaStore.Audio.Playlists.NAME);mDBColumnsMap.put(ListViewCardsAdapter.FIELD_1,MediaStore.Audio.Playlists._COUNT);break;case Common.GENRES_FRAGMENT:break;case Common.FOLDERS_FRAGMENT:break;}}  }
class C{  public void rectValueToPixelHorizontal(RectF r,float phaseY){  if (r.left > 0)   r.left*=phaseY; else   r.right*=phaseY;  mMatrixValueToPx.mapRect(r);  mViewPortHandler.getMatrixTouch().mapRect(r);  mMatrixOffset.mapRect(r);}  }
class C{  public boolean isClosed(){  return journalWriter == null;}  }
class C{  public int size(){  return entries.size();}  }
class C{  public ActionTargetNotAway(String targetAttribute,boolean tellAboutPostman){  this.targetAttribute=targetAttribute;  this.tellAboutPostman=tellAboutPostman;}  }
class C{  @Override public void abuseWeakness(int index,SignedElement signedElement,PayloadElement payloadElement) throws InvalidWeaknessException {  AttributeAndExpression and=attributeAndList.get(index / 3);  abuseWeakness(and,index % 3,signedElement.getSignedElement(),payloadElement.getPayloadElement());}  }
class C{  protected static Geometry createAudioMarker(AssetManager assetManager){  Quad q=new Quad(0.5f,0.5f);  Geometry audioMarker=new Geometry("light bulb",q);  audioMarker.move(-q.getHeight() / 2f,-q.getWidth() / 2f,0);  Material mat=new Material(assetManager,"Common/MatDefs/Misc/Unshaded.j3md");  Texture tex=assetManager.loadTexture("com/jme3/gde/scenecomposer/audionode.gif");  mat.setTexture("ColorMap",tex);  mat.getAdditionalRenderState().setBlendMode(RenderState.BlendMode.Alpha);  audioMarker.setMaterial(mat);  audioMarker.setQueueBucket(RenderQueue.Bucket.Transparent);  return audioMarker;}  }
class C{  public static Bitmap decodeSampledBitmapFromDescriptor(FileDescriptor fileDescriptor,int reqWidth,int reqHeight,ImageCache cache){  final BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  BitmapFactory.decodeFileDescriptor(fileDescriptor,null,options);  options.inSampleSize=calculateInSampleSize(options,reqWidth,reqHeight);  options.inJustDecodeBounds=false;  if (Utils.hasHoneycomb()) {    addInBitmapOptions(options,cache);  }  return BitmapFactory.decodeFileDescriptor(fileDescriptor,null,options);}  }
class C{  public void doAction(JvmLauncher java){  setupSysProps(java);  java.addClasspathEntries(new File(getHome(),"lib/bootstrap/felix-launcher.jar"));  java.addClasspathEntries(new File(getHome(),"lib/bootstrap/jonas-commands.jar"));  java.addClasspathEntries(new File(getHome(),"lib/bootstrap/jonas-version.jar"));  java.addClasspathEntries(new File(getConfiguration().getHome(),"conf"));  try {    addToolsJarToClasspath(java);  } catch (  IOException ex) {    throw new ContainerException("IOException occured during java command line setup",ex);  }  java.setMainClass("org.ow2.jonas.commands.admin.ClientAdmin");}  }
class C{  public boolean refreshLocation(){  if (parentCom != null && contentCom != null) {    Point location=SwingUtilities.convertPoint(parentCom,getLocation(),this);    setBounds(location.x + deltaX,(location.y + deltaY) - getPreferredSize().height,getPreferredSize().width,getPreferredSize().height);    validate();    return true;  } else   throw new IllegalArgumentException("parentCom or contentCom is null!");}  }
class C{  public static <E extends Comparable<E>>void inOrderUsingStack(BinaryNode<E> node){  if (node == null)   return;  Stack<BinaryNode<E>> stack=new LinkedStack<>();  BinaryNode<E> curr=node;  stack.push(curr);  while (!stack.isEmpty()) {    while (curr != null) {      curr=curr.left;      if (curr != null)       stack.push(curr);    }    BinaryNode<E> top=stack.pop();    out.print(top.value);    curr=top.right;    if (curr != null)     stack.push(curr);  }}  }
class C{  protected void reportStatementSqlTiming(long execTime,String sql,String methodCall){  _reportSqlTiming(execTime,(DriverSpy.StatementUsageWarn ? StatementSqlWarning : "") + sql,methodCall);}  }
class C{  protected void drawTicks(Graphics2D g2,Rectangle2D meterArea,double minValue,double maxValue){  for (double v=minValue; v <= maxValue; v+=this.tickSize) {    drawTick(g2,meterArea,v);  }}  }
class C{  public boolean intersectsSegment(Vec3 endPoint1,Vec3 endPoint2){  if (endPoint1 == null || endPoint2 == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Plane","intersectsSegment","missingPoint"));  }  double distance1=this.dot(endPoint1);  double distance2=this.dot(endPoint2);  return distance1 * distance2 <= 0;}  }
class C{  String checkGuessPhysical(Entity shooter,Targetable target,PhysicalAttackType attackType,IGame game){  if (!LogLevel.DEBUG.equals(owner.getVerbosity())) {    return null;  }  if (!(shooter instanceof Mech)) {    return null;  }  String ret=null;  if (shooter.getPosition() == null) {    return "Shooter has NULL coordinates!";  } else   if (target.getPosition() == null) {    return "Target has NULL coordinates!";  }  PhysicalInfo guessInfo=new PhysicalInfo(shooter,null,target,null,attackType,game,owner,true);  PhysicalInfo accurateInfo=new PhysicalInfo(shooter,target,attackType,game,owner,false);  if (guessInfo.getHitData().getValue() != accurateInfo.getHitData().getValue()) {    ret+="Incorrect To Hit prediction, physical attack " + attackType.name() + ":\n";    ret+=" Guess: " + Integer.toString(guessInfo.getHitData().getValue()) + " "+ guessInfo.getHitData().getDesc()+ "\n";    ret+=" Real:  " + Integer.toString(accurateInfo.getHitData().getValue()) + " "+ accurateInfo.getHitData().getDesc()+ "\n";  }  return ret;}  }
class C{  public Prepared prepare(String sql){  return prepare(sql,false);}  }
class C{  public CColumnControlButton(CTable table,Icon icon){  super();  init();  setAction(createControlAction(icon));  installTable(table);}  }
class C{  public Observable<String> exerciseFilterMap(Observable<Integer> nums){  return nums.filter(null).map(null);}  }
class C{  public String toString(){  return "" + src + " -> "+ tgt+ (explicit ? "" : " (inferred)");}  }
class C{  public void consolidate(PutAllPartialResultException pre){  this.result.consolidate(pre.getResult());}  }
class C{  public void configureBaudRate(String rate){  mBaudRate=rate;}  }
class C{  public static void initUrbanSimPersonWriter(UrbanSimParameterConfigModuleV3 module){  try {    log.info("Initializing UrbanSimZoneCSVWriter ...");    personWriter=IOUtils.getBufferedWriter(module.getMATSim4OpusTemp() + FILE_NAME);    log.info("Writing data into " + module.getMATSim4OpusTemp() + FILE_NAME+ " ...");    personWriter.write(InternalConstants.PERSON_ID + "," + "home2work_travel_time_min,"+ "home2work_distance_meter,"+ "work2home_travel_time_min,"+ "work2home_distance_meter,"+ "mode");    personWriter.newLine();    log.info("... done!");  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  private static long copy(InputStream source,OutputStream sink) throws IOException {  long nread=0L;  byte[] buf=new byte[BUFFER_SIZE];  int n;  while ((n=source.read(buf)) > 0) {    sink.write(buf,0,n);    nread+=n;  }  return nread;}  }
class C{  private void copy(int newLength,int length){  long[] newKeys=new long[newLength];  double[] newValues=new double[newLength];  System.arraycopy(keys,0,newKeys,0,length);  System.arraycopy(values,0,newValues,0,length);  keys=newKeys;  values=newValues;}  }
class C{  public static void writeAsJPEG(Drawable drawable,int w,int h,File file) throws FileNotFoundException, IOException {  BufferedImage image=new BufferedImage(w,h,BufferedImage.TYPE_INT_RGB);  Graphics2D g2=image.createGraphics();  drawable.draw(g2,new Rectangle(w,h));  OutputStream out=new BufferedOutputStream(new FileOutputStream(file));  try {    ImageIO.write(image,"jpg",out);  }  finally {    out.close();  }}  }
class C{  public ObjectMapper mappingUpdate(Mapper mapper){  ObjectMapper mappingUpdate=clone();  mappingUpdate.mappers=new CopyOnWriteHashMap<>();  mappingUpdate.putMapper(mapper);  return mappingUpdate;}  }
class C{  private Comparable<? super E> comparable(Object key) throws ClassCastException {  if (key == null)   throw new NullPointerException();  if (comparator != null)   return new ComparableUsingComparator<E>((E)key,comparator); else   return (Comparable<? super E>)key;}  }
class C{  private boolean checkStatus(User user,Set<Status> req){  if (req.isEmpty()) {    return true;  }  boolean or=req == statusReq;  if (req.contains(Status.MOD) && user.isModerator()) {    return or;  }  if (req.contains(Status.SUBSCRIBER) && user.isSubscriber()) {    return or;  }  if (req.contains(Status.ADMIN) && user.isAdmin()) {    return or;  }  if (req.contains(Status.STAFF) && user.isStaff()) {    return or;  }  if (req.contains(Status.BROADCASTER) && user.isBroadcaster()) {    return or;  }  if (req.contains(Status.TURBO) && user.hasTurbo()) {    return or;  }  if (req.contains(Status.GLOBAL_MOD) && user.isGlobalMod()) {    return or;  }  if (req.contains(Status.BOT) && user.isBot()) {    return or;  }  if (req.contains(Status.ANY_MOD) && user.hasModeratorRights()) {    return or;  }  return !or;}  }
class C{  public static int max(int x,int y){  return (x > y) ? x : y;}  }
class C{  public org.apache.nutch.storage.WebPage.Builder clearParseStatus(){  parseStatus=null;  fieldSetFlags()[15]=false;  return this;}  }
class C{  public boolean isDateSlot(){  Object oo=get_Value(COLUMNNAME_IsDateSlot);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public synchronized boolean saveTemplates(){  if (templates == null)   return true;  if (directory == null || !directory.isDirectory())   return false;  File[] oldXMLFiles=directory.listFiles(new XMLFileFilter());  if (oldXMLFiles == null)   return false;  int count=oldXMLFiles.length;  for (int i=0; i < count; i++) {    oldXMLFiles[i].delete();  }  boolean wasSuccessful=true;  for (Iterator i=templates.iterator(); i.hasNext(); ) {    CodeTemplate template=(CodeTemplate)i.next();    File xmlFile=new File(directory,template.getID() + ".xml");    try {      XMLEncoder e=new XMLEncoder(new BufferedOutputStream(new FileOutputStream(xmlFile)));      e.writeObject(template);      e.close();    } catch (    IOException ioe) {      ioe.printStackTrace();      wasSuccessful=false;    }  }  return wasSuccessful;}  }
class C{  public static void rangeSensor(IotDevice device,boolean simulated,boolean print){  Supplier<Double> sensor;  if (simulated) {    sensor=new SimulatedRangeSensor();  } else {    sensor=new RangeSensor(echoPin,trigPin);  }  TStream<Double> distanceReadings=device.topology().poll(sensor,1,TimeUnit.SECONDS);  distanceReadings.print();  distanceReadings=distanceReadings.filter(null);  TStream<JsonObject> sensorJSON=distanceReadings.map(null);  TWindow<JsonObject,JsonElement> sensorWindow=sensorJSON.last(10,null);  sensorJSON=JsonAnalytics.aggregate(sensorWindow,"name","reading",MIN,MAX,MEAN,STDDEV);  sensorJSON=sensorJSON.filter(null);  if (print)   sensorJSON.print();  device.events(sensorJSON,"sensors",QoS.FIRE_AND_FORGET);}  }
class C{  public DelightfulMenuDrawable(int side){  mPaint=getDefaultPaint();  setBounds(0,0,side,side);}  }
class C{  public boolean isUserSynchronized(){  Debug.logInfo(this.getClass().getName() + " Authenticator isUserSynchronized()",module);  return true;}  }
class C{  @Override public QualifiedNameResolver withSdk(Sdk sdk){  myContext.setSdk(sdk);  return this;}  }
class C{  public ReferenceSyntaxException(){  super();}  }
class C{  protected void assertEqualDatabases(Statement stat1,Statement stat2) throws SQLException {  ResultSet rs=stat1.executeQuery("select value from information_schema.settings " + "where name='ANALYZE_AUTO'");  int analyzeAuto=rs.next() ? rs.getInt(1) : 0;  if (analyzeAuto > 0) {    stat1.execute("analyze");    stat2.execute("analyze");  }  ResultSet rs1=stat1.executeQuery("SCRIPT simple NOPASSWORDS");  ResultSet rs2=stat2.executeQuery("SCRIPT simple NOPASSWORDS");  ArrayList<String> list1=new ArrayList<String>();  ArrayList<String> list2=new ArrayList<String>();  while (rs1.next()) {    String s1=rs1.getString(1);    s1=removeRowCount(s1);    if (!rs2.next()) {      fail("expected: " + s1);    }    String s2=rs2.getString(1);    s2=removeRowCount(s2);    if (!s1.equals(s2)) {      list1.add(s1);      list2.add(s2);    }  }  for (  String s : list1) {    if (!list2.remove(s)) {      fail("only found in first: " + s + " remaining: "+ list2);    }  }  assertEquals("remaining: " + list2,0,list2.size());  assertFalse(rs2.next());}  }
class C{  public IncludeIfCoversPredicate(Set<Class<?>> coveredClasses){  this.coveredClasses=coveredClasses;}  }
class C{  public MapObject(Object id,Drawable drawable,Point position){  this(id,drawable,position.x,position.y,false);}  }
class C{  public boolean contains(double x,double y){  return covers(x,y);}  }
class C{  public IntervalCategoryItemLabelGenerator(String labelFormat,NumberFormat formatter){  super(labelFormat,formatter);}  }
class C{  public boolean isDSeparatedFrom(Node node1,Node node2,List<Node> z){  return !isDConnectedTo(node1,node2,z);}  }
class C{  private JPanel createMainPanel(){  JPanel panel=new JPanel();  panel.setLayout(new GridBagLayout());  GridBagConstraints c=new GridBagConstraints();  c.anchor=GridBagConstraints.WEST;  c.fill=GridBagConstraints.HORIZONTAL;  c.gridheight=1;  c.gridwidth=GridBagConstraints.RELATIVE;  c.insets=LABEL_INSETS;  c.gridx=0;  c.gridy=0;  c.weightx=0.33f;  c.weighty=0;  panel.add(new JLabel("Pixel matrix"),c);  c.insets=FIELD_INSETS;  c.gridx=1;  c.weightx=0.66f;  panel.add(pixelMatrices,c);  c.gridwidth=GridBagConstraints.REMAINDER;  c.gridx=0;  c.gridy++;  c.weightx=1.0f;  pixelMatrixEditorPlaceholder.add("Center",pixelMatrixEditor.getEditorComponent());  panel.add(pixelMatrixEditorPlaceholder,c);  c.anchor=GridBagConstraints.NORTHWEST;  c.fill=GridBagConstraints.BOTH;  c.insets=EMPTY_INSETS;  c.gridy++;  c.weighty=1.0f;  panel.add(Box.createGlue(),c);  return panel;}  }
class C{  public boolean isDisconnected(){  return mSource == DISCONNECTED;}  }
class C{  public boolean toggleBookmark(int line) throws BadLocationException {  return iconArea.toggleBookmark(line);}  }
class C{  private boolean isAnyIconVisible(@NonNull DiscussionThread thread){  return thread.isClosed() || thread.isFollowing() || thread.isPinned();}  }
class C{  public static void ensureOffsetLength(final long bigArrayLength,final long offset,final long length){  if (offset < 0)   throw new ArrayIndexOutOfBoundsException("Offset (" + offset + ") is negative");  if (length < 0)   throw new IllegalArgumentException("Length (" + length + ") is negative");  if (offset + length > bigArrayLength)   throw new ArrayIndexOutOfBoundsException("Last index (" + (offset + length) + ") is greater than big-array length ("+ bigArrayLength+ ")");}  }
class C{  public static double sum(final List<? extends Number> list){  double sum=0;  for (  Number number : list) {    sum+=number.doubleValue();  }  return sum;}  }
class C{  public final boolean contains(Vec4 point){  if (point == null) {    String msg=Logging.getMessage("nullValue.PointIsNull");    Logging.logger().fine(msg);    throw new IllegalArgumentException(msg);  }  if (this.far.dot(point) <= 0)   return false;  if (this.left.dot(point) <= 0)   return false;  if (this.right.dot(point) <= 0)   return false;  if (this.top.dot(point) <= 0)   return false;  if (this.bottom.dot(point) <= 0)   return false;  if (this.near.dot(point) <= 0)   return false;  return true;}  }
class C{  public T caseBoolExpr_(BoolExpr_ object){  return null;}  }
class C{  MultistepExprHolder unlink(MultistepExprHolder itemToRemove){  MultistepExprHolder first=this;  MultistepExprHolder next=this;  MultistepExprHolder prev=null;  while (null != next) {    if (next == itemToRemove) {      if (null == prev)       first=next.m_next; else       prev.m_next=next.m_next;      next.m_next=null;      return first;    }    prev=next;    next=next.m_next;  }  assertion(false,"unlink failed!!!");  return null;}  }
class C{  public static void copyData_INT_PACK(Raster src,WritableRaster dst){  int x0=dst.getMinX();  if (x0 < src.getMinX())   x0=src.getMinX();  int y0=dst.getMinY();  if (y0 < src.getMinY())   y0=src.getMinY();  int x1=dst.getMinX() + dst.getWidth() - 1;  if (x1 > src.getMinX() + src.getWidth() - 1)   x1=src.getMinX() + src.getWidth() - 1;  int y1=dst.getMinY() + dst.getHeight() - 1;  if (y1 > src.getMinY() + src.getHeight() - 1)   y1=src.getMinY() + src.getHeight() - 1;  int width=x1 - x0 + 1;  int height=y1 - y0 + 1;  SinglePixelPackedSampleModel srcSPPSM;  srcSPPSM=(SinglePixelPackedSampleModel)src.getSampleModel();  final int srcScanStride=srcSPPSM.getScanlineStride();  DataBufferInt srcDB=(DataBufferInt)src.getDataBuffer();  final int[] srcPixels=srcDB.getBankData()[0];  final int srcBase=(srcDB.getOffset() + srcSPPSM.getOffset(x0 - src.getSampleModelTranslateX(),y0 - src.getSampleModelTranslateY()));  SinglePixelPackedSampleModel dstSPPSM;  dstSPPSM=(SinglePixelPackedSampleModel)dst.getSampleModel();  final int dstScanStride=dstSPPSM.getScanlineStride();  DataBufferInt dstDB=(DataBufferInt)dst.getDataBuffer();  final int[] dstPixels=dstDB.getBankData()[0];  final int dstBase=(dstDB.getOffset() + dstSPPSM.getOffset(x0 - dst.getSampleModelTranslateX(),y0 - dst.getSampleModelTranslateY()));  if ((srcScanStride == dstScanStride) && (srcScanStride == width)) {    System.arraycopy(srcPixels,srcBase,dstPixels,dstBase,width * height);  } else   if (width > 128) {    int srcSP=srcBase;    int dstSP=dstBase;    for (int y=0; y < height; y++) {      System.arraycopy(srcPixels,srcSP,dstPixels,dstSP,width);      srcSP+=srcScanStride;      dstSP+=dstScanStride;    }  } else {    for (int y=0; y < height; y++) {      int srcSP=srcBase + y * srcScanStride;      int dstSP=dstBase + y * dstScanStride;      for (int x=0; x < width; x++)       dstPixels[dstSP++]=srcPixels[srcSP++];    }  }}  }
class C{  public static void removeCachedTeXFormula(String f,int style,int type,int size,int inset,Color fgcolor) throws ParseException {  cache.remove(new CachedTeXFormula(f,style,type,size,inset,fgcolor));}  }
class C{  public static void writeIntList(IonWriter writer,byte[] values) throws IOException {  if (writer instanceof PrivateListWriter) {    ((PrivateListWriter)writer).writeIntList(values);    return;  }  writer.stepIn(IonType.LIST);  for (int ii=0; ii < values.length; ii++) {    writer.writeInt(values[ii]);  }  writer.stepOut();}  }
class C{  @SuppressWarnings("IfCanBeSwitch") private void init(String settings){  Document doc;  try {    DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();    DocumentBuilder builder=factory.newDocumentBuilder();    doc=builder.parse(new InputSource(new StringReader(settings)));  } catch (  Throwable e) {    throw new IllegalArgumentException("Failed to parse persistence settings:" + SystemHelper.LINE_SEPARATOR + settings,e);  }  Element root=doc.getDocumentElement();  if (!PERSISTENCE_NODE.equals(root.getNodeName())) {    throw new IllegalArgumentException("Incorrect persistence settings specified. " + "Root XML element should be 'persistence'");  }  if (!root.hasAttribute(KEYSPACE_ATTR)) {    throw new IllegalArgumentException("Incorrect persistence settings '" + KEYSPACE_ATTR + "' attribute should be specified");  }  keyspace=root.getAttribute(KEYSPACE_ATTR).trim();  tbl=root.hasAttribute(TABLE_ATTR) ? root.getAttribute(TABLE_ATTR).trim() : null;  if (root.hasAttribute(TTL_ATTR))   ttl=extractIntAttribute(root,TTL_ATTR);  if (!root.hasChildNodes()) {    throw new IllegalArgumentException("Incorrect Cassandra persistence settings specification, " + "there are no key and value persistence settings specified");  }  NodeList children=root.getChildNodes();  int cnt=children.getLength();  for (int i=0; i < cnt; i++) {    Node node=children.item(i);    if (node.getNodeType() != Node.ELEMENT_NODE)     continue;    Element el=(Element)node;    String nodeName=el.getNodeName();    if (nodeName.equals(TABLE_OPTIONS_NODE)) {      tblOptions=el.getTextContent();      tblOptions=tblOptions.replace("\n"," ").replace("\r","").replace("\t"," ");    } else     if (nodeName.equals(KEYSPACE_OPTIONS_NODE)) {      keyspaceOptions=el.getTextContent();      keyspaceOptions=keyspaceOptions.replace("\n"," ").replace("\r","").replace("\t"," ");    } else     if (nodeName.equals(KEY_PERSISTENCE_NODE))     keyPersistenceSettings=new KeyPersistenceSettings(el); else     if (nodeName.equals(VALUE_PERSISTENCE_NODE))     valPersistenceSettings=new ValuePersistenceSettings(el);  }  if (keyPersistenceSettings == null) {    throw new IllegalArgumentException("Incorrect Cassandra persistence settings specification, " + "there are no key persistence settings specified");  }  if (valPersistenceSettings == null) {    throw new IllegalArgumentException("Incorrect Cassandra persistence settings specification, " + "there are no value persistence settings specified");  }  List<PojoField> keyFields=keyPersistenceSettings.getFields();  List<PojoField> valFields=valPersistenceSettings.getFields();  if (PersistenceStrategy.POJO == keyPersistenceSettings.getStrategy() && (keyFields == null || keyFields.isEmpty())) {    throw new IllegalArgumentException("Incorrect Cassandra persistence settings specification, " + "there are no key fields found");  }  if (PersistenceStrategy.POJO == valPersistenceSettings.getStrategy() && (valFields == null || valFields.isEmpty())) {    throw new IllegalArgumentException("Incorrect Cassandra persistence settings specification, " + "there are no value fields found");  }  if (valFields != null && !valFields.isEmpty()) {    String keyColumn=keyPersistenceSettings.getColumn();    Class keyClass=keyPersistenceSettings.getJavaClass();    if (keyColumn != null && !keyColumn.isEmpty()) {      for (      PojoField valField : valFields) {        if (keyColumn.equals(valField.getColumn()) && !CassandraHelper.isCassandraCompatibleTypes(keyClass,valField.getJavaClass())) {          throw new IllegalArgumentException("Value field '" + valField.getName() + "' shares the same "+ "Cassandra table column '"+ keyColumn+ "' with key, but their Java classes are "+ "different. Fields sharing the same column should have the same Java class as their "+ "type or should be mapped to the same Cassandra primitive type.");        }      }    }    if (keyFields != null && !keyFields.isEmpty()) {      for (      PojoField keyField : keyFields) {        for (        PojoField valField : valFields) {          if (keyField.getColumn().equals(valField.getColumn()) && !CassandraHelper.isCassandraCompatibleTypes(keyField.getJavaClass(),valField.getJavaClass())) {            throw new IllegalArgumentException("Value field '" + valField.getName() + "' shares the same "+ "Cassandra table column '"+ keyColumn+ "' with key field '"+ keyField.getName()+ "', "+ "but their Java classes are different. Fields sharing the same column should have "+ "the same Java class as their type or should be mapped to the same Cassandra "+ "primitive type.");          }        }      }    }  }  tableColumns=new LinkedList<>();  for (  String column : keyPersistenceSettings.getTableColumns()) {    if (!tableColumns.contains(column))     tableColumns.add(column);  }  for (  String column : valPersistenceSettings.getTableColumns()) {    if (!tableColumns.contains(column))     tableColumns.add(column);  }  tableColumns=Collections.unmodifiableList(tableColumns);}  }
class C{  @Deprecated public void addError(String output,@Nullable String stackTrace){  addError(output,stackTrace,true);}  }
class C{  public boolean differ(Object a,Object b){  Node set1=find(getNode(a));  Node set2=find(getNode(b));  return set1 != set2;}  }
class C{  private static int determineConsecutiveDigitCount(CharSequence msg,int startpos){  int count=0;  int len=msg.length();  int idx=startpos;  if (idx < len) {    char ch=msg.charAt(idx);    while (isDigit(ch) && idx < len) {      count++;      idx++;      if (idx < len) {        ch=msg.charAt(idx);      }    }  }  return count;}  }
class C{  public void destroy(){  m_bfish.cleanUp();}  }
class C{  public void testDoCheckWithNullTextToCheck(){  LOGGER.debug("doCheckWithNullTextToCheck");  elements.add(element);  mockTestSolutionHandler.addTestSolution(TestSolution.NOT_APPLICABLE);  expectLastCall().once();  expect(mockTextElementBuilder.buildTextFromElement(element)).andReturn(null);  TextBelongsToBlackListChecker instance=new TextBelongsToBlackListChecker(mockTextElementBuilder,BLACKLIST_NOM_NAME,DETECTION_MSG);  replay(mockTextElementBuilder,mockSSPHandler,mockTestSolutionHandler);  instance.doCheck(mockSSPHandler,elements,mockTestSolutionHandler);  verify(mockTextElementBuilder,mockSSPHandler,mockTestSolutionHandler);}  }
class C{  public int newLocal(final Type type){  Object t;switch (type.getSort()) {case Type.BOOLEAN:case Type.CHAR:case Type.BYTE:case Type.SHORT:case Type.INT:    t=Opcodes.INTEGER;  break;case Type.FLOAT:t=Opcodes.FLOAT;break;case Type.LONG:t=Opcodes.LONG;break;case Type.DOUBLE:t=Opcodes.DOUBLE;break;case Type.ARRAY:t=type.getDescriptor();break;default :t=type.getInternalName();break;}int local=newLocalMapping(type);setLocalType(local,type);setFrameLocal(local,t);return local;}  }
class C{  public static String assertTldExists(String tld){  checkArgument(getTlds().contains(checkNotNull(emptyToNull(tld),"Null or empty TLD specified")),"TLD %s does not exist",tld);  return tld;}  }
class C{  public void drawBitmap(Bitmap bitmap){  this.bitmap=bitmap;  imageChange=true;  this.invalidate();}  }
class C{  private void initializeState(State current){  InitializationUtils.initialize(current);  if (current.documentExpirationTimeMicros <= 0) {    current.documentExpirationTimeMicros=ServiceUtils.computeExpirationTime(ServiceUtils.DEFAULT_DOC_EXPIRATION_TIME_MICROS);  }}  }
class C{  private void fireRemove(){  if (!canEdit) {    return;  }  TableViewer tableViewer=getActiveTableViewer();  if (null == tableViewer) {    return;  }  StructuredSelection selection=(StructuredSelection)tableViewer.getSelection();  if (selection.isEmpty()) {    return;  }  Class<? extends ISensorConfig> sensorClass=null;  for (  Object selectedObject : selection.toArray()) {    if (selectedObject instanceof AbstractClassSensorAssignment) {      AbstractClassSensorAssignment<?> assignment=(AbstractClassSensorAssignment<?>)selectedObject;      sensorClass=assignment.getSensorConfigClass();      removeFromInputMap(assignment);    }  }  RemoveSelection removeSelection=new RemoveSelection(selection.toList());  fireEdit(removeSelection);  tableViewer.setSelection(StructuredSelection.EMPTY);  tableViewer.refresh();  validationManager.checkTableControlDecorations();  if (CollectionUtils.isEmpty(configToAssignmentMap.get(sensorClass))) {    removeTabItem(sensorClass);  }  markDirty();  showHideFormMessage();}  }
class C{  public final void transformZero(Vec3D normal,Vec3D normalOut){  float x, y;  x=m00 * normal.x + m01 * normal.y + m02 * normal.z;  y=m10 * normal.x + m11 * normal.y + m12 * normal.z;  normalOut.z=m20 * normal.x + m21 * normal.y + m22 * normal.z;  normalOut.x=x;  normalOut.y=y;}  }
class C{  void showErrorBox(String errorMessage){  showErrorBox(new RuntimeException(errorMessage));}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public boolean isConstant(){  return true;}  }
class C{  public void deactivate(){  if (renderer != null && renderer.isEditing())   renderer.stopEditing(true);}  }
class C{  public void append(byte[] src){  if (buffer != null) {    throw new AlertException(AlertProtocol.INTERNAL_ERROR,new SSLException("Attempt to override the data"));  }  buffer=src;}  }
class C{  public HttpMon start(){  timeMonIndex=0;  Iterator iter=iter();  while (iter.hasNext()) {    HttpMonItem monItem=(HttpMonItem)iter.next();    monItem.start(this);  }  return this;}  }
class C{  public static CastExpression cast(String propertyName,String typeName){  return new CastExpression(getPropExpr(propertyName),typeName);}  }
class C{  public Object remove(int index){  Object o=this.opt(index);  this.myArrayList.remove(index);  return o;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void updateAncestorsGreyness(TreePath path){  TreePath[] parents=new TreePath[path.getPathCount()];  parents[0]=path;  boolean greyAll=isPathGreyed(path);  for (int i=1; i < parents.length; i++) {    parents[i]=parents[i - 1].getParentPath();    if (greyAll) {      addToGreyedPathsSet(parents[i]);    } else {      updatePathGreyness(parents[i]);      greyAll=isPathGreyed(parents[i]);    }  }}  }
class C{  public void testToArray_NullArg(){  LinkedBlockingDeque q=populatedDeque(SIZE);  try {    q.toArray(null);    shouldThrow();  } catch (  NullPointerException success) {  }}  }
class C{  public final double rootRelativeSquaredError(){  return m_delegate.rootRelativeSquaredError();}  }
class C{  public JOptionPane(){  this("JOptionPane message");}  }
class C{  public void mousePressed(MouseEvent e){  if (Debug.debugging("mousemode")) {    Debug.output(getID() + "|NavMouseMode.mousePressed()");  }  e.getComponent().requestFocus();  if (!mouseSupport.fireMapMousePressed(e) && e.getSource() instanceof MapBean) {    point1=e.getPoint();    point2=null;    autoZoom=true;  }}  }
class C{  public SparseBooleanArray(int initialCapacity){  if (initialCapacity == 0) {    mKeys=ContainerHelpers.EMPTY_INTS;    mValues=ContainerHelpers.EMPTY_BOOLEANS;  } else {    mKeys=new int[initialCapacity];    mValues=new boolean[mKeys.length];  }  mSize=0;}  }
class C{  public static String toSafeString(Object value){  if (value == null) {    return EMPTY;  }  return value.toString();}  }
class C{  static StringBuilder appendQuotedString(StringBuilder target,String key){  target.append('"');  for (int i=0, len=key.length(); i < len; i++) {    char ch=key.charAt(i);switch (ch) {case '\n':      target.append("%0A");    break;case '\r':  target.append("%0D");break;case '"':target.append("%22");break;default :target.append(ch);break;}}target.append('"');return target;}  }
class C{  private static String hextetsToIPv6String(int[] hextets){  StringBuilder buf=new StringBuilder(39);  boolean lastWasNumber=false;  for (int i=0; i < hextets.length; i++) {    boolean thisIsNumber=hextets[i] >= 0;    if (thisIsNumber) {      if (lastWasNumber) {        buf.append(':');      }      buf.append(Integer.toHexString(hextets[i]));    } else {      if (i == 0 || lastWasNumber) {        buf.append("::");      }    }    lastWasNumber=thisIsNumber;  }  return buf.toString();}  }
class C{  @SuppressWarnings({"SuspiciousNameCombination","WeakerAccess"}) public static double betaCdf(double x,double pin,double qin){  double c, finsum, p, ps, q, term, xb, xi, y, dbetai, p1;  int i, n, ib;  double eps, alneps, sml, alnsml;  if (x <= 0.0) {    return 0.0;  }  eps=macheps();  alneps=Math.log(eps);  sml=eps;  alnsml=alneps;  y=x;  p=pin;  q=qin;  if ((q > p) || (x >= 0.8)) {    if (x >= 0.2) {      y=1.0 - y;      p=qin;      q=pin;    }  }  if ((p + q) * y / (p + 1.0) < eps) {    dbetai=0.0;    xb=p * Math.log(Math.max(y,sml)) - Math.log(p) - logbeta(p,q);    if ((xb > alnsml) && (y != 0.0)) {      dbetai=Math.exp(xb);    }    if ((y != x) || (p != pin)) {      dbetai=1.0 - dbetai;    }  } else {    ps=q - Math.floor(q);    if (ps == 0.0) {      ps=1.0;    }    xb=p * Math.log(y) - logbeta(ps,p) - Math.log(p);    dbetai=0.0;    if (xb >= alnsml) {      dbetai=Math.exp(xb);      term=dbetai * p;      if (ps != 1.0) {        n=(int)Math.max(alneps / Math.log(y),4.0);        for (i=1; i <= n; i++) {          xi=i;          term=term * (xi - ps) * y / xi;          dbetai=dbetai + term / (p + xi);        }      }    }    if (q > 1.0) {      xb=p * Math.log(y) + q * Math.log(1.0 - y) - logbeta(p,q) - Math.log(q);      ib=(int)Math.max(xb / alnsml,0.0);      term=Math.exp(xb - ((double)ib) * alnsml);      c=1.0 / (1.0 - y);      p1=q * c / (p + q - 1.0);      finsum=0.0;      n=(int)q;      if (q == (double)n) {        n--;      }      for (i=1; i <= n; i++) {        if ((p1 <= 1.0) && (term / eps <= finsum)) {          break;        }        xi=i;        term=(q - xi + 1.0) * c * term / (p + q - xi);        if (term > 1.0) {          ib=ib - 1;        }        if (term > 1.0) {          term=term * sml;        }        if (ib == 0) {          finsum+=term;        }      }      dbetai+=finsum;    }    if ((y != x) || (p != pin)) {      dbetai=1.0 - dbetai;    }    dbetai=Math.max(Math.min(dbetai,1.0),0.0);  }  return dbetai;}  }
class C{  Writer write(Writer writer,int indentFactor,int indent) throws JSONException {  try {    boolean commanate=false;    int length=this.length();    writer.write('[');    if (length == 1) {      JSONObject.writeValue(writer,this.myArrayList.get(0),indentFactor,indent);    } else     if (length != 0) {      final int newindent=indent + indentFactor;      for (int i=0; i < length; i+=1) {        if (commanate) {          writer.write(',');        }        if (indentFactor > 0) {          writer.write('\n');        }        JSONObject.indent(writer,newindent);        JSONObject.writeValue(writer,this.myArrayList.get(i),indentFactor,newindent);        commanate=true;      }      if (indentFactor > 0) {        writer.write('\n');      }      JSONObject.indent(writer,indent);    }    writer.write(']');    return writer;  } catch (  IOException e) {    throw new JSONException(e);  }}  }
class C{  public static Image manipulate(Image img,boolean brighten,int percent){  ImageFilter filter=new ImageManipulator(brighten,percent);  ImageProducer prod=new FilteredImageSource(img.getSource(),filter);  return Toolkit.getDefaultToolkit().createImage(prod);}  }
class C{  @Nullable public V last(){  return vals.isEmpty() ? null : vals.getLast();}  }
class C{  static MemoryOperand loadFromJTOC(IR ir,Offset offset,byte size){  LocationOperand loc=new LocationOperand(offset);  Operand guard=TG();  if (JTOC_REGISTER == null) {    return MemoryOperand.D(Magic.getTocPointer().plus(offset),size,loc,guard);  } else {    return MemoryOperand.BD(ir.regpool.makeTocOp().asRegister(),offset,size,loc,guard);  }}  }
class C{  public MockServletContext(String resourceBasePath){  this.resourceBasePath=(resourceBasePath != null ? resourceBasePath : "");  String tempDir=System.getProperty(TEMP_DIR_SYSTEM_PROPERTY);  if (tempDir != null) {    this.attributes.put("tempDir",new File(tempDir));  }}  }
class C{  public synchronized void add(String name,long threadId){  if (mFinished) {    throw new IllegalStateException("Marker added to finished log");  }  mMarkers.add(new Marker(name,threadId,SystemClock.elapsedRealtime()));}  }
class C{  public AddOnChangesResult calculateUpdateChanges(Set<AddOn> addOns){  return calculateChanges(addOns,true);}  }
class C{  public static String interpolate(String argStr,Context vars){  StringBuffer argBuf=new StringBuffer();  for (int cIdx=0; cIdx < argStr.length(); ) {    char ch=argStr.charAt(cIdx);switch (ch) {case '$':      StringBuffer nameBuf=new StringBuffer();    for (++cIdx; cIdx < argStr.length(); ++cIdx) {      ch=argStr.charAt(cIdx);      if (ch == '_' || ch == '-' || Character.isLetterOrDigit(ch))       nameBuf.append(ch); else       if (ch == '{' || ch == '}')       continue; else       break;    }  if (nameBuf.length() > 0) {    Object value=vars.get(nameBuf.toString());    if (value == null)     argBuf.append("$").append(nameBuf.toString()); else     argBuf.append(value.toString());  }break;default :argBuf.append(ch);++cIdx;break;}}return argBuf.toString();}  }
class C{  @LargeTest public void testPropertiesH264NTSC() throws Exception {  final String videoItemFilename=INPUT_FILE_PATH + "H264_BP_720x480_25fps_256kbps_AMRNB_8khz_12.2kbps_m_0_26.mp4";  final int aspectRatio=MediaProperties.ASPECT_RATIO_3_2;  final int fileType=MediaProperties.FILE_MP4;  final int videoCodecType=MediaProperties.VCODEC_H264;  final int duration=26880;  final int videoBitrate=244000;  final int audioBitrate=12200;  final int fps=25;  final int audioCodecType=MediaProperties.ACODEC_AMRNB;  final int audioSamplingFrequency=8000;  final int audioChannel=1;  final int videoProfile=MediaProperties.H264Profile.H264ProfileBaseline;  final int videoLevel=MediaProperties.H264Level.H264Level13;  final int width=720;  final int height=MediaProperties.HEIGHT_480;  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final MediaVideoItem mvi=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFilename,renderingMode);  validateVideoProperties(aspectRatio,fileType,videoCodecType,duration,videoBitrate,fps,videoProfile,videoLevel,width,height,audioCodecType,audioSamplingFrequency,audioChannel,audioBitrate,mvi);}  }
class C{  public AbstractWindow(String title){  super();  this.title=title;  this.textGUI=null;  this.visible=true;  this.lastKnownPosition=null;  this.lastKnownSize=null;  this.lastKnownDecoratedSize=null;  this.closeWindowWithEscape=false;  this.hints=new HashSet<Hint>();}  }
class C{  public RemoteCustomerWishListServiceImpl(final GenericDTOService<CustomerWishListDTO> customerWishListDTOGenericDTOService){  super(customerWishListDTOGenericDTOService);}  }
class C{  @PostConstruct void init(){  super.init(dsTableHeader,dsTable,distributionDetails);}  }
class C{  public Y ne(String value){  if (value == null || value.trim().length() == 0) {    return super.ne((Integer)null);  } else {    return super.ne(Integer.parseInt(value.trim()));  }}  }
class C{  private void validateJobSummaries(Map<String,JobStatusEnum> expectedJobStatuses,JobSummaries actualJobSummaries){  Map<String,JobStatusEnum> actualJobStatuses=new HashMap<>();  for (  JobSummary actualJobSummary : actualJobSummaries.getJobSummaries()) {    actualJobStatuses.put(actualJobSummary.getId(),actualJobSummary.getStatus());  }  assertEquals(expectedJobStatuses,actualJobStatuses);}  }
class C{  static boolean holdsLock(Object obj){  return RVMThread.getCurrentThread().holdsLock(obj);}  }
class C{  private boolean canBlockDamageSource(EntityLivingBase attacked,DamageSource damageSourceIn){  if (!damageSourceIn.isUnblockable() && attacked.isActiveItemStackBlocking()) {    Vec3d vec3d=damageSourceIn.getDamageLocation();    if (vec3d != null) {      Vec3d vec3d1=attacked.getLook(1.0F);      Vec3d vec3d2=vec3d.subtractReverse(new Vec3d(attacked.posX,attacked.posY,attacked.posZ)).normalize();      vec3d2=new Vec3d(vec3d2.xCoord,0.0D,vec3d2.zCoord);      if (vec3d2.dotProduct(vec3d1) < 0.0D) {        return true;      }    }  }  return false;}  }
class C{  public int length(){  return length;}  }
class C{  public ResourceFolderResource(String resourcePath){  this.resourcePath=resourcePath;}  }
class C{  public NegExpr newNegExpr(Value op){  return new JNegExpr(op);}  }
class C{  public static boolean hasEnoughSpaceOnSdCard(long updateSize){  return getInternals().hasEnoughSpaceOnSdCard(updateSize);}  }
class C{  public static GlowEntity loadEntity(GlowWorld world,CompoundTag compound){  if (!compound.isString("id")) {    throw new IllegalArgumentException("Entity has no type");  }  EntityStore<?> store=idTable.get(compound.getString("id"));  if (store == null) {    throw new IllegalArgumentException("Unknown entity type to load: \"" + compound.getString("id") + "\"");  }  World checkWorld=NbtSerialization.readWorld(world.getServer(),compound);  if (checkWorld != null && checkWorld != world) {    throw new IllegalArgumentException("Entity in wrong world: stored in " + world + " but data says "+ checkWorld);  }  Location location=NbtSerialization.listTagsToLocation(world,compound);  if (location == null) {    throw new IllegalArgumentException("Entity has no location");  }  return createEntity(store,location,compound);}  }
class C{  public void bestState(long state,Model bestModel){  currentState=state;}  }
class C{  private void checkChildElementWithAttributePresence(Elements elements,TestSolutionHandler testSolutionHandler){  if (elements.isEmpty()) {    testSolutionHandler.addTestSolution(TestSolution.NOT_APPLICABLE);    return;  }  TestSolution testSolution=TestSolution.PASSED;  for (  Element el : elements) {    if (!el.getElementsByAttribute(attributeName).isEmpty()) {      testSolution=setTestSolution(testSolution,getSuccessSolution());      addSourceCodeRemark(getSuccessSolution(),el,getSuccessMsgCode());    } else {      testSolution=setTestSolution(testSolution,getFailureSolution());      addSourceCodeRemark(getFailureSolution(),el,getFailureMsgCode());    }  }  testSolutionHandler.addTestSolution(testSolution);}  }
class C{  private void renderEditingBody(GL2 gl,SandboxBody body){  Dimension size=this.canvasSize;  gl.glColor4f(0.0f,0.0f,0.0f,0.5f);  gl.glPushMatrix();  gl.glLoadIdentity();  RenderUtilities.fillRectangleFromTopLeft(gl,-size.width * 0.5,size.height * 0.5,size.width,size.height);  gl.glPopMatrix();  if (Preferences.isBodyAABBEnabled()) {    this.renderAABB(gl,body);  }  RenderUtilities.pushTransform(gl);  RenderUtilities.applyTransform(gl,body.getTransform());  body.render(gl);  if (this.selectFixtureAction.isActive()) {    BodyFixture bf=this.selectFixtureAction.getObject();    Convex convex=bf.getShape();    RenderUtilities.outlineShape(gl,convex,4,Preferences.getSelectedColor());    gl.glColor4fv(body.getFillColor(),0);    RenderUtilities.fillShape(gl,convex);    gl.glColor4fv(body.getOutlineColor(),0);    RenderUtilities.drawShape(gl,convex,false);  }  if (Preferences.isBodyNormalEnabled()) {    body.renderNormals(gl);  }  if (Preferences.isBodyRotationDiscEnabled()) {    body.renderRotationDisc(gl);  }  if (Preferences.isBodyCenterEnabled()) {    body.renderCenter(gl);  }  RenderUtilities.popTransform(gl);  if (Preferences.isBodyVelocityEnabled()) {    body.renderVelocity(gl);  }}  }
class C{  public static Builder newBuilder(){  return new Builder();}  }
class C{  public static boolean testRayCircle(float originX,float originY,float dirX,float dirY,float centerX,float centerY,float radiusSquared){  float Lx=centerX - originX;  float Ly=centerY - originY;  float tca=Lx * dirX + Ly * dirY;  float d2=Lx * Lx + Ly * Ly - tca * tca;  if (d2 > radiusSquared)   return false;  float thc=(float)Math.sqrt(radiusSquared - d2);  float t0=tca - thc;  float t1=tca + thc;  return t0 < t1 && t1 >= 0.0f;}  }
class C{  public static ComponentUI createUI(JComponent c){  String key=c.getUIClassID().intern();  if (key == "ButtonUI") {    return SynthButtonUI.createUI(c);  } else   if (key == "CheckBoxUI") {    return SynthCheckBoxUI.createUI(c);  } else   if (key == "CheckBoxMenuItemUI") {    return SynthCheckBoxMenuItemUI.createUI(c);  } else   if (key == "ColorChooserUI") {    return SynthColorChooserUI.createUI(c);  } else   if (key == "ComboBoxUI") {    return SynthComboBoxUI.createUI(c);  } else   if (key == "DesktopPaneUI") {    return SynthDesktopPaneUI.createUI(c);  } else   if (key == "DesktopIconUI") {    return SynthDesktopIconUI.createUI(c);  } else   if (key == "EditorPaneUI") {    return SynthEditorPaneUI.createUI(c);  } else   if (key == "FileChooserUI") {    return SynthFileChooserUI.createUI(c);  } else   if (key == "FormattedTextFieldUI") {    return SynthFormattedTextFieldUI.createUI(c);  } else   if (key == "InternalFrameUI") {    return SynthInternalFrameUI.createUI(c);  } else   if (key == "LabelUI") {    return SynthLabelUI.createUI(c);  } else   if (key == "ListUI") {    return SynthListUI.createUI(c);  } else   if (key == "MenuBarUI") {    return SynthMenuBarUI.createUI(c);  } else   if (key == "MenuUI") {    return SynthMenuUI.createUI(c);  } else   if (key == "MenuItemUI") {    return SynthMenuItemUI.createUI(c);  } else   if (key == "OptionPaneUI") {    return SynthOptionPaneUI.createUI(c);  } else   if (key == "PanelUI") {    return SynthPanelUI.createUI(c);  } else   if (key == "PasswordFieldUI") {    return SynthPasswordFieldUI.createUI(c);  } else   if (key == "PopupMenuSeparatorUI") {    return SynthSeparatorUI.createUI(c);  } else   if (key == "PopupMenuUI") {    return SynthPopupMenuUI.createUI(c);  } else   if (key == "ProgressBarUI") {    return SynthProgressBarUI.createUI(c);  } else   if (key == "RadioButtonUI") {    return SynthRadioButtonUI.createUI(c);  } else   if (key == "RadioButtonMenuItemUI") {    return SynthRadioButtonMenuItemUI.createUI(c);  } else   if (key == "RootPaneUI") {    return SynthRootPaneUI.createUI(c);  } else   if (key == "ScrollBarUI") {    return SynthScrollBarUI.createUI(c);  } else   if (key == "ScrollPaneUI") {    return SynthScrollPaneUI.createUI(c);  } else   if (key == "SeparatorUI") {    return SynthSeparatorUI.createUI(c);  } else   if (key == "SliderUI") {    return SynthSliderUI.createUI(c);  } else   if (key == "SpinnerUI") {    return SynthSpinnerUI.createUI(c);  } else   if (key == "SplitPaneUI") {    return SynthSplitPaneUI.createUI(c);  } else   if (key == "TabbedPaneUI") {    return SynthTabbedPaneUI.createUI(c);  } else   if (key == "TableUI") {    return SynthTableUI.createUI(c);  } else   if (key == "TableHeaderUI") {    return SynthTableHeaderUI.createUI(c);  } else   if (key == "TextAreaUI") {    return SynthTextAreaUI.createUI(c);  } else   if (key == "TextFieldUI") {    return SynthTextFieldUI.createUI(c);  } else   if (key == "TextPaneUI") {    return SynthTextPaneUI.createUI(c);  } else   if (key == "ToggleButtonUI") {    return SynthToggleButtonUI.createUI(c);  } else   if (key == "ToolBarSeparatorUI") {    return SynthSeparatorUI.createUI(c);  } else   if (key == "ToolBarUI") {    return SynthToolBarUI.createUI(c);  } else   if (key == "ToolTipUI") {    return SynthToolTipUI.createUI(c);  } else   if (key == "TreeUI") {    return SynthTreeUI.createUI(c);  } else   if (key == "ViewportUI") {    return SynthViewportUI.createUI(c);  }  return null;}  }
class C{  public static Path parsePath(String path){  return new Path(path);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.AFTER_EVERY_EVENT___TIMER_1:    setTimer_1(TIMER_1_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public static int indexOf(String[] array,String s){  for (int index=0; index < array.length; index++) {    if (s.equals(array[index])) {      return index;    }  }  return -1;}  }
class C{  public static Composite createComposite(Composite parent,Font font,int columns,int hspan,int fill){  Composite g=new Composite(parent,SWT.NONE);  g.setLayout(new GridLayout(columns,false));  g.setFont(font);  GridData gd=new GridData(fill);  gd.horizontalSpan=hspan;  g.setLayoutData(gd);  return g;}  }
class C{  private void scheduleDatastoreDeleteTasks(final State current,List<String> datastoreLinks){  if (datastoreLinks == null || datastoreLinks.size() == 0) {    TaskUtils.sendSelfPatch(this,buildPatch(TaskState.TaskStage.FINISHED,null));    return;  }  if (current.intervalBetweenBatchTriggersInSeconds == null) {    int batches=datastoreLinks.size() / current.batchSize;    current.intervalBetweenBatchTriggersInSeconds=TimeUnit.MILLISECONDS.toSeconds(DatastoreCleanerTriggerBuilder.DEFAULT_TRIGGER_INTERVAL_MILLIS) / batches;  }  int batchCount=0;  for (  List<String> batch : Lists.partition(datastoreLinks,current.batchSize)) {    getHost().schedule(null,batchCount * current.intervalBetweenBatchTriggersInSeconds,TimeUnit.SECONDS);    batchCount++;  }  TaskUtils.sendSelfPatch(this,buildPatch(TaskState.TaskStage.FINISHED,null));}  }
class C{  public void userTriggeredGC(){  nextGCWholeHeap|=Options.fullHeapSystemGC.getValue();}  }
class C{  public static double linearToPowerCurve(final double[] curve,double value){  return curve[0] + curve[1] * Math.exp(curve[2] * value);}  }
class C{  public static void convertTsvToDat(String tsvFileName){  String datFileName=WWIO.replaceSuffix(tsvFileName,".dat");  convertTsvToDat(tsvFileName,datFileName,DEFAULT_RADIUS);}  }
class C{  public ContextSuggestField(String name,String value,int weight,CharSequence... contexts){  super(name,value,weight);  validate(value);  this.contexts=new HashSet<>((contexts != null) ? contexts.length : 0);  if (contexts != null) {    Collections.addAll(this.contexts,contexts);  }}  }
class C{  public void testAlgorithmParameterGenerator12(){  if (!DSASupported) {    fail(validAlgName + " algorithm is not supported");    return;  }  SecureRandom random=new SecureRandom();  AlgorithmParameterSpec aps=null;  AlgorithmParameterGenerator[] apgs=createAPGen();  assertNotNull("AlgorithmParameterGenerator objects were not created",apgs);  for (int i=0; i < apgs.length; i++) {    try {      apgs[i].init(aps);      fail("InvalidAlgorithmParameterException expected for null argument.");    } catch (    InvalidAlgorithmParameterException e) {    }    try {      apgs[i].init(aps,random);      fail("InvalidAlgorithmParameterException expected for null argument.");    } catch (    InvalidAlgorithmParameterException e) {    }  }}  }
class C{  public static void print(CtMethod method,PrintStream stream){  (new InstructionPrinter(stream)).print(method);}  }
class C{  public static DoubleDoubleFunction minusMult(final double constant){  return plusMult(-constant);}  }
class C{  private boolean action_OK(){  m_location.setAddress1(fAddress1.getText());  m_location.setAddress2(fAddress2.getText());  m_location.setAddress3(fAddress3.getText());  m_location.setAddress4(fAddress4.getText());  m_location.setCity(fCity.getText());  m_location.setC_City_ID(fCityAutoCompleter.getC_City_ID());  m_location.setPostal(fPostal.getText());  m_location.setPostal_Add(fPostalAdd.getText());  MCountry c=(MCountry)fCountry.getSelectedItem();  m_location.setCountry(c);  if (m_location.getCountry().isHasRegion()) {    MRegion r=(MRegion)fRegion.getSelectedItem();    m_location.setRegion(r);  } else   m_location.setC_Region_ID(0);  if (m_location.save()) {    return true;  } else {    return false;  }}  }
class C{  public WrappedByteBuffer putUnsignedIntAt(int index,long value){  _checkForWriteAt(index,4);  this.putIntAt(index,(int)value & 0xFFFFFFFF);  return this;}  }
class C{  public static Element firstChildElement(Element element,Set<String> childElementNames){  if (element == null)   return null;  Node node=element.getFirstChild();  if (node != null) {    do {      if (node.getNodeType() == Node.ELEMENT_NODE && childElementNames.contains(node.getNodeName())) {        Element childElement=(Element)node;        return childElement;      }    } while ((node=node.getNextSibling()) != null);  }  return null;}  }
class C{  public List<String> binaryTreePaths2(TreeNode root){  if (root == null) {    return Collections.emptyList();  }  List<String> paths=new ArrayList<>();  if (root.left == null && root.right == null) {    paths.add(root.val + "");    return paths;  }  for (  String path : binaryTreePaths2(root.left)) {    paths.add(root.val + "->" + path);  }  for (  String path : binaryTreePaths2(root.right)) {    paths.add(root.val + "->" + path);  }  return paths;}  }
class C{  public int estimateSize(Object message){  if (message == null) {    return 8;  }  int answer=8 + estimateSize(message.getClass(),null);  if (message instanceof IoBuffer) {    answer+=((IoBuffer)message).remaining();  } else   if (message instanceof WriteRequest) {    answer+=estimateSize(((WriteRequest)message).getMessage());  } else   if (message instanceof CharSequence) {    answer+=((CharSequence)message).length() << 1;  } else   if (message instanceof Iterable) {    for (    Object m : (Iterable<?>)message) {      answer+=estimateSize(m);    }  }  return align(answer);}  }
class C{  public DefaultSynthStyle addTo(DefaultSynthStyle style){  if (insets != null) {    style.insets=this.insets;  }  if (font != null) {    style.font=this.font;  }  if (painter != null) {    style.painter=this.painter;  }  if (synthGraphics != null) {    style.synthGraphics=this.synthGraphics;  }  style.opaque=opaque;  if (states != null) {    if (style.states == null) {      style.states=new StateInfo[states.length];      for (int counter=states.length - 1; counter >= 0; counter--) {        if (states[counter] != null) {          style.states[counter]=(StateInfo)states[counter].clone();        }      }    } else {      int unique=0;      int matchCount=0;      int maxOStyles=style.states.length;      for (int thisCounter=states.length - 1; thisCounter >= 0; thisCounter--) {        int state=states[thisCounter].getComponentState();        boolean found=false;        for (int oCounter=maxOStyles - 1 - matchCount; oCounter >= 0; oCounter--) {          if (state == style.states[oCounter].getComponentState()) {            style.states[oCounter]=states[thisCounter].addTo(style.states[oCounter]);            StateInfo tmp=style.states[maxOStyles - 1 - matchCount];            style.states[maxOStyles - 1 - matchCount]=style.states[oCounter];            style.states[oCounter]=tmp;            matchCount++;            found=true;            break;          }        }        if (!found) {          unique++;        }      }      if (unique != 0) {        StateInfo[] newStates=new StateInfo[unique + maxOStyles];        int newIndex=maxOStyles;        System.arraycopy(style.states,0,newStates,0,maxOStyles);        for (int thisCounter=states.length - 1; thisCounter >= 0; thisCounter--) {          int state=states[thisCounter].getComponentState();          boolean found=false;          for (int oCounter=maxOStyles - 1; oCounter >= 0; oCounter--) {            if (state == style.states[oCounter].getComponentState()) {              found=true;              break;            }          }          if (!found) {            newStates[newIndex++]=(StateInfo)states[thisCounter].clone();          }        }        style.states=newStates;      }    }  }  if (data != null) {    if (style.data == null) {      style.data=new HashMap();    }    style.data.putAll(data);  }  return style;}  }
class C{  public void finish() throws Exception {}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-26 10:48:13.799 -0500",hash_original_method="46BAA03762D3C7495ED5DDCAFA681181",hash_generated_method="9CFE2B51C613950DDFB6F35D36B16C2E") @DSVerified @DSBan(DSCat.PRIVATE_METHOD) private PageInfo(){}  }
class C{  public boolean isReceipt(){  Object oo=get_Value(COLUMNNAME_IsReceipt);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void calculateFixedPointSqrtLookupTable(){  float sqStepFloat;  sqStepFloat=(fastGradientArraySize * fastGradientArraySize) / (MAX_PRECISION - 2.0f);  int[] workTbl=sqrtLutFixed;  int i;  for (i=0; i < MAX_PRECISION - 1; i++) {    workTbl[i]=(int)Math.sqrt(i * sqStepFloat);  }  workTbl[i]=workTbl[i - 1];  invSqStepFloat=1.0f / sqStepFloat;}  }
class C{  public static Drawable tint(Context context,Drawable drawable,@ColorRes int colorRes){  drawable=DrawableCompat.wrap(drawable);  DrawableCompat.setTint(drawable,getColor(context,colorRes));  return drawable;}  }
class C{  public ImageSliderView empty(int resId){  mEmptyPlaceHolderRes=resId;  imageView.setImageResource(mEmptyPlaceHolderRes);  return this;}  }
class C{  public boolean isIncludeHeader(){  return includeHeader;}  }
class C{  public ZipfianGenerator(long _items,double _zipfianconstant){  this(0,_items - 1,_zipfianconstant);}  }
class C{  public boolean exists(final String file){  return exists(file,false);}  }
class C{  public int count(){  try {    return cursor == null ? 0 : cursor.getCount();  }  finally {    close();  }}  }
class C{  public String toString(){  StringBuffer output=new StringBuffer();  output.append(columnName).append(" ").append(fieldType).append(" ");  output.append(numberOfElements).append(" ");  output.append(keyType).append(" ");  output.append(columnDescription).append(" ").append(valueDescriptionTable).append(" ");  output.append(thematicIndexName).append(" ").append(narrativeTable);  return output.toString();}  }
class C{  public void deleteTiming(String jobId){  UriBuilder uriBuilder=UriBuilder.fromUri(urlBuilder.buildUrl(ReportService.METHOD_TIMING,jobId));  WebResource webResource=client.resource(uriBuilder.build());  ClientResponse response=webResource.delete(ClientResponse.class);  exceptionHandler.checkStatusCode(response);}  }
class C{  private void initializeLiveAttributes(){  x=createLiveAnimatedLength(null,SVG_X_ATTRIBUTE,SVG_USE_X_DEFAULT_VALUE,SVGOMAnimatedLength.HORIZONTAL_LENGTH,false);  y=createLiveAnimatedLength(null,SVG_Y_ATTRIBUTE,SVG_USE_Y_DEFAULT_VALUE,SVGOMAnimatedLength.VERTICAL_LENGTH,false);  width=createLiveAnimatedLength(null,SVG_WIDTH_ATTRIBUTE,null,SVGOMAnimatedLength.HORIZONTAL_LENGTH,true);  height=createLiveAnimatedLength(null,SVG_HEIGHT_ATTRIBUTE,null,SVGOMAnimatedLength.VERTICAL_LENGTH,true);}  }
class C{  private boolean isPlayerInZone(String playerName){  Player player=StendhalRPRuleProcessor.get().getPlayer(playerName);  if (player == null) {    return false;  }  return getZone() == player.getZone();}  }
class C{  public void stopEditor(boolean saveValue){  log.config("(" + m_mTab.toString() + ") TableEditing="+ vTable.isEditing());  vTable.stopEditor(saveValue);  if (m_singleRow)   vPanel.transferFocus();}  }
class C{  public ODGPathOutlineHandle(ODGPathFigure owner){  super(owner);}  }
class C{  public MavenArchetype(@NotNull String groupId,@NotNull String artifactId,@NotNull String version,@Nullable String repository){  this.groupId=groupId;  this.artifactId=artifactId;  this.version=version;  this.repository=repository;}  }
class C{  public MaterializeBuilder withTintedStatusBar(boolean tintedStatusBar){  this.mTintStatusBar=tintedStatusBar;  return this;}  }
class C{  public static long tickAtIndex(GeoTimeSerie gts,int idx){  if (idx >= gts.values) {    return Long.MIN_VALUE;  } else {    return gts.ticks[idx];  }}  }
class C{  Blob(ExceptionInterceptor exceptionInterceptor){  setBinaryData(Constants.EMPTY_BYTE_ARRAY);  this.exceptionInterceptor=exceptionInterceptor;}  }
class C{  public OverlayMapPanel(boolean delayCreation){  super(null,delayCreation);}  }
class C{  private void mergeForceCollapse(){  while (stackSize > 1) {    int n=stackSize - 2;    if (n > 0 && runLen[n - 1] < runLen[n + 1])     n--;    mergeAt(n);  }}  }
class C{  @Override public void accept(int value){  ++count;  sum+=value;  min=Math.min(min,value);  max=Math.max(max,value);}  }
class C{  public static String[] toStringArray(Array array) throws PageException {  String[] arr=new String[array.size()];  for (int i=0; i < arr.length; i++) {    arr[i]=Caster.toString(array.get(i + 1,null));  }  return arr;}  }
class C{  public String toClassDetailsString(String title) throws Exception {  return m_delegate.toClassDetailsString(title);}  }
class C{  @SuppressWarnings("CloneDoesntCallSuperClone") @SuppressFBWarnings(value="CN_IDIOM_NO_SUPER_CALL",justification="Does not required any fields from the parent class") @Override public Aggregator<R> clone(){  final Aggregator<R> clone=new Aggregator<>();  if (null != functions) {    clone.addFunctions(cloneFunctions());  }  return clone;}  }
class C{  public static Scs cs_add(Scs A,Scs B,float alpha,float beta){  int p, j, nz=0, anz;  int Cp[], Ci[], Bp[], m, n, bnz, w[];  float x[], Bx[], Cx[];  boolean values;  Scs C;  if (!Scs_util.CS_CSC(A) || !Scs_util.CS_CSC(B))   return null;  if (A.m != B.m || A.n != B.n)   return null;  m=A.m;  anz=A.p[A.n];  n=B.n;  Bp=B.p;  Bx=B.x;  bnz=Bp[n];  w=new int[m];  values=(A.x != null) && (Bx != null);  x=values ? new float[m] : null;  C=Scs_util.cs_spalloc(m,n,anz + bnz,values,false);  Cp=C.p;  Ci=C.i;  Cx=C.x;  for (j=0; j < n; j++) {    Cp[j]=nz;    nz=Scs_scatter.cs_scatter(A,j,alpha,w,x,j + 1,C,nz);    nz=Scs_scatter.cs_scatter(B,j,beta,w,x,j + 1,C,nz);    if (values)     for (p=Cp[j]; p < nz; p++)     Cx[p]=x[Ci[p]];  }  Cp[n]=nz;  Scs_util.cs_sprealloc(C,0);  return C;}  }
class C{  public synchronized void addMessage(String line,boolean action){  addLine(new TextMessage(System.currentTimeMillis(),line,action));  numberOfMessages++;  lastMessage=System.currentTimeMillis();}  }
class C{  @Override public void run(){  amIActive=true;  String rasterHeader=null;  String distributionType=null;  int numberOfClasses=-1;  String statsFileName=null;  int numCols, numRows;  int col, row;  double value;  List<Double> values=new ArrayList<>();  String str;  float progress=0;  int index;  int h;  FileWriter streamWriter=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      rasterHeader=args[i];    } else     if (i == 1) {      distributionType=args[i].toLowerCase();    } else     if (i == 2) {      if (!args[i].toLowerCase().equals("not specified")) {        numberOfClasses=Integer.parseInt(args[i]);      }    } else     if (i == 3) {      statsFileName=args[i];    }  }  if ((rasterHeader == null) || (statsFileName == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  if ((!distributionType.equals("complete")) & (numberOfClasses <= 0)) {    showFeedback("Specify the number of classes (should be a value larger then 0).");    return;  }  try {    raster=new WhiteboxRaster(rasterHeader,"r");    numRows=raster.getNumberRows();    numCols=raster.getNumberColumns();    streamWriter=new FileWriter(statsFileName);    str="Distribution type: " + distributionType + System.lineSeparator();    streamWriter.write(str);switch (distributionType) {case "complete":      values=SortGridValues(raster);    updateProgress("Writing output:",0);  str="Value" + "\t" + "Cum. Rel. Freq."+ System.lineSeparator();streamWriter.write(str);for (int i=0; i < values.size(); i++) {str=values.get(i) + "\t" + (((float)i + 1) / values.size())+ System.lineSeparator();streamWriter.write(str);if (cancelOp) {  cancelOperation();  return;}progress=(float)(100f * i / (values.size() - 1));updateProgress("Writing output:",(int)progress);}break;case "n classes with equal class width":List<Integer> distri=new ArrayList<>();List<Double> upper=new ArrayList<>();for (int i=1; i <= numberOfClasses; i++) {distri.add(0);upper.add(raster.getMinimumValue() + i * (raster.getMaximumValue() - raster.getMinimumValue()) / numberOfClasses);}updateProgress("Computing distribution:",0);for (row=0; row < numRows; row++) {for (col=0; col < numCols; col++) {value=raster.getValue(row,col);if (value != raster.getNoDataValue()) {h=0;while (value > upper.get(h)) {h=h + 1;}if (h <= numberOfClasses) {distri.set(h,distri.get(h) + 1);}}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (numRows - 1));updateProgress("Computing distribution:",(int)progress);}int sum=0;float cumu;for (int i=0; i < numberOfClasses; i++) {sum=sum + distri.get(i);}updateProgress("Writing output:",0);str="Value" + "\t" + "Rel. Freq."+ "\t"+ "Cum. Rel. Freq."+ System.lineSeparator();streamWriter.write(str);if (sum > 0) {cumu=0;for (int i=0; i < numberOfClasses; i++) {cumu=cumu + (float)distri.get(i) / sum;str=upper.get(i) + "\t" + (float)distri.get(i) / sum + "\t" + cumu + System.lineSeparator();streamWriter.write(str);if (cancelOp) {cancelOperation();return;}progress=(float)(100f * i / numberOfClasses);updateProgress("Writing output:",(int)progress);}}break;case "n classes with equal class size":values=SortGridValues(raster);updateProgress("Writing output:",0);str="Cum. Rel. Freq." + "\t" + "Value"+ System.lineSeparator();streamWriter.write(str);for (int i=1; i <= numberOfClasses; i++) {index=(int)((float)i / numberOfClasses * values.size()) - 1;if (index < 0) {index=0;}str=((float)index + 1) / values.size() + "\t" + values.get(index) + System.lineSeparator();streamWriter.write(str);progress=(float)(100f * i / numberOfClasses);updateProgress("Writing output:",(int)progress);}break;}raster.close();streamWriter.close();} catch (Exception e) {showFeedback(e.getMessage());} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public MipMappedBufferedImageRaster(Sector sector,java.awt.image.BufferedImage[] images){  super(sector,(null != images && images.length > 0) ? images[0] : null);  if (null == sector) {    String message=Logging.getMessage("nullValue.SectorIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (null == images || images.length == 0) {    String message=Logging.getMessage("nullValue.ArrayIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.levelRasters=new BufferedImageRaster[images.length];  for (int i=0; i < images.length; i++) {    this.levelRasters[i]=new BufferedImageRaster(sector,images[i]);  }}  }
class C{  void uploadData(CrowdJob job,List<?> data){  Log LOG=LogFactory.getLog(getClass());  ObjectMapper mapper=new ObjectMapper();  String jsonObjectCollection="";  StringBuilder jsonStringBuilder=new StringBuilder();  int count=0;  for (  Object obj : data) {    count++;    JsonNode jsonData=mapper.convertValue(obj,JsonNode.class);    jsonStringBuilder.append(jsonData.toString());    jsonStringBuilder.append("\n");  }  jsonObjectCollection=jsonStringBuilder.toString();  RestTemplate restTemplate=new RestTemplate();  restTemplate.getMessageConverters().add(new StringHttpMessageConverter());  HttpHeaders headers=new HttpHeaders();  headers.setContentType(MediaType.APPLICATION_JSON);  HttpEntity<String> request=new HttpEntity<String>(jsonObjectCollection,headers);  String result="";  if (job == null) {    LOG.info("Upload new data and create new job: " + String.valueOf(count) + " data items");    result=restTemplate.postForObject(uploadDataURL,request,String.class,apiKey);  } else {    LOG.info("Uploading new data to job: " + job.getId() + ": "+ String.valueOf(count)+ " data items");    result=restTemplate.postForObject(uploadDataWithJobURL,request,String.class,job.getId(),apiKey);  }  LOG.info("Upload response:" + result);}  }
class C{  @Override public void onCheckedChanged(CompoundButton switchView,boolean isChecked){  if (!isResumed()) {    return;  }  if (isChecked) {    ExpirationDatePickerDialogFragment dialog=ExpirationDatePickerDialogFragment.newInstance(mFile,-1);    dialog.show(getActivity().getSupportFragmentManager(),ExpirationDatePickerDialogFragment.DATE_PICKER_DIALOG);  } else {    ((FileActivity)getActivity()).getFileOperationsHelper().setExpirationDateToShareViaLink(mFile,-1);  }  switchView.setOnCheckedChangeListener(null);  switchView.toggle();  switchView.setOnCheckedChangeListener(mOnExpirationDateInteractionListener);}  }
class C{  private boolean hasDefaultHandler(Intent intent){  try {    ResolveInfo info=getActivity().getPackageManager().resolveActivity(intent,0);    if (info != null) {      final String chromePackage=getActivity().getPackageName();      if (info.match != 0 && !chromePackage.equals(info.activityInfo.packageName)) {        return true;      }    }  } catch (  RuntimeException e) {    logTransactionTooLargeOrRethrow(e,intent);  }  return false;}  }
class C{  public boolean isManagedPaymentSupported(){  return false;}  }
class C{  private StringBuilder debugDumpCandidates(StringBuilder msg,List<? extends Itemset> candidates,VectorFieldTypeInformation<BitVector> meta){  msg.append(':');  for (  Itemset itemset : candidates) {    msg.append(" [");    itemset.appendTo(msg,meta);    msg.append(']');  }  return msg;}  }
class C{  public IptcReader(File jpegFile) throws JpegProcessingException {  this(new JpegSegmentReader(jpegFile).readSegment(JpegSegmentReader.SEGMENT_APPD));}  }
class C{  public ListFeed(){  super(ListEntry.class);  getCategories().add(ListEntry.CATEGORY);}  }
class C{  public void displayMech(Entity en){  removeListeners();  IGame game=null;  if (unitDisplay.getClientGUI() != null) {    game=unitDisplay.getClientGUI().getClient().getGame();  }  entity=en;  int max_ext_heat=game != null ? game.getOptions().intOption("max_external_heat") : 15;  if (max_ext_heat < 0) {    max_ext_heat=15;  }  int currentHeatBuildup=(en.heat + en.getEngineCritHeat() + Math.min(max_ext_heat,en.heatFromExternal)+ en.heatBuildup) - Math.min(9,en.coolFromExternal);  if (en instanceof Mech) {    if (en.infernos.isStillBurning()) {      currentHeatBuildup+=en.infernos.getHeat();    }    if (!((Mech)en).hasLaserHeatSinks()) {      if ((game != null) && (game.getPlanetaryConditions().getTemperature() > 0)) {        int buildup=game.getPlanetaryConditions().getTemperatureDifference(50,-30);        if (((Mech)en).hasIntactHeatDissipatingArmor()) {          buildup/=2;        }        currentHeatBuildup+=buildup;      } else       if (game != null) {        currentHeatBuildup-=game.getPlanetaryConditions().getTemperatureDifference(50,-30);      }    }  }  Coords position=entity.getPosition();  if (!en.isOffBoard() && (position != null)) {    IHex hex=game.getBoard().getHex(position);    if (hex.containsTerrain(Terrains.FIRE) && (hex.getFireTurn() > 0)) {      if ((en instanceof Mech) && ((Mech)en).hasIntactHeatDissipatingArmor()) {        currentHeatBuildup+=2;      } else {        currentHeatBuildup+=5;      }    }    if (hex.terrainLevel(Terrains.MAGMA) == 1) {      if ((en instanceof Mech) && ((Mech)en).hasIntactHeatDissipatingArmor()) {        currentHeatBuildup+=2;      } else {        currentHeatBuildup+=5;      }    } else     if (hex.terrainLevel(Terrains.MAGMA) == 2) {      if ((en instanceof Mech) && ((Mech)en).hasIntactHeatDissipatingArmor()) {        currentHeatBuildup+=5;      } else {        currentHeatBuildup+=10;      }    }  }  if ((((en instanceof Mech) || (en instanceof Aero)) && en.isStealthActive()) || en.isNullSigActive() || en.isVoidSigActive()) {    currentHeatBuildup+=10;  }  if ((en instanceof Mech) && en.isChameleonShieldOn()) {    currentHeatBuildup+=6;  }  if (((en instanceof Mech) || (en instanceof Aero)) && en.hasActiveNovaCEWS()) {    currentHeatBuildup+=2;  }  weaponList.setModel(new WeaponListModel(en));  ((DefaultComboBoxModel<String>)m_chAmmo.getModel()).removeAllElements();  m_chAmmo.setEnabled(false);  m_chBayWeapon.removeAllItems();  m_chBayWeapon.setEnabled(false);  boolean[] usedFrontArc=new boolean[entity.locations()];  boolean[] usedRearArc=new boolean[entity.locations()];  for (int i=0; i < entity.locations(); i++) {    usedFrontArc[i]=false;    usedRearArc[i]=false;  }  boolean hasFiredWeapons=false;  for (int i=0; i < entity.getWeaponList().size(); i++) {    Mounted mounted=entity.getWeaponList().get(i);    ((WeaponListModel)weaponList.getModel()).addWeapon(mounted);    if (mounted.isUsedThisRound() && (game.getPhase() == mounted.usedInPhase()) && (game.getPhase() == IGame.Phase.PHASE_FIRING)) {      hasFiredWeapons=true;      if (entity.usesWeaponBays()) {        if (game.getOptions().booleanOption("heat_by_bay")) {          for (          int wId : mounted.getBayWeapons()) {            currentHeatBuildup+=entity.getEquipment(wId).getCurrentHeat();          }        } else {          int loc=mounted.getLocation();          boolean rearMount=mounted.isRearMounted();          if (!rearMount) {            if (!usedFrontArc[loc]) {              currentHeatBuildup+=entity.getHeatInArc(loc,rearMount);              usedFrontArc[loc]=true;            }          } else {            if (!usedRearArc[loc]) {              currentHeatBuildup+=entity.getHeatInArc(loc,rearMount);              usedRearArc[loc]=true;            }          }        }      } else {        if (!mounted.isBombMounted()) {          currentHeatBuildup+=mounted.getCurrentHeat();        }      }    }  }  weapSortOrder.setSelectedIndex(entity.getWeaponSortOrder().ordinal());  setWeaponComparator(weapSortOrder.getSelectedIndex());  if (en.hasDamagedRHS() && hasFiredWeapons) {    currentHeatBuildup++;  }  int heatCap;  if (en instanceof Mech) {    heatCap=((Mech)en).getHeatCapacity(true,false);  } else   if (en instanceof Aero) {    heatCap=((Aero)en).getHeatCapacity(false);  } else {    heatCap=en.getHeatCapacity();  }  int heatCapWater=en.getHeatCapacityWithWater();  if (en.getCoolantFailureAmount() > 0) {    heatCap-=en.getCoolantFailureAmount();    heatCapWater-=en.getCoolantFailureAmount();  }  if (en.hasActivatedRadicalHS()) {    if (en instanceof Mech) {      heatCap+=((Mech)en).getActiveSinks();      heatCapWater+=((Mech)en).getActiveSinks();    } else     if (en instanceof Aero) {      heatCap+=((Aero)en).getHeatSinks();      heatCapWater+=((Aero)en).getHeatSinks();    }  }  String heatCapacityStr=Integer.toString(heatCap);  if (heatCap < heatCapWater) {    heatCapacityStr=heatCap + " [" + heatCapWater+ ']';  }  String heatText=Integer.toString(currentHeatBuildup);  if (currentHeatBuildup > en.getHeatCapacityWithWater()) {    heatText+="*";  }  if (currentHeatBuildup < 0) {    currentHeatBuildup=0;  }  currentHeatBuildupR.setText(heatText + " (" + heatCapacityStr+ ')');  if (entity.usesWeaponBays()) {    wArcHeatL.setVisible(true);    wArcHeatR.setVisible(true);    m_chBayWeapon.setVisible(true);    wBayWeapon.setVisible(true);  } else {    wArcHeatL.setVisible(false);    wArcHeatR.setVisible(false);    m_chBayWeapon.setVisible(false);    wBayWeapon.setVisible(false);  }  wDamageTrooperL.setVisible(false);  wDamageTrooperR.setVisible(false);  wInfantryRange0L.setVisible(false);  wInfantryRange0R.setVisible(false);  wInfantryRange1L.setVisible(false);  wInfantryRange1R.setVisible(false);  wInfantryRange2L.setVisible(false);  wInfantryRange2R.setVisible(false);  wInfantryRange3L.setVisible(false);  wInfantryRange3R.setVisible(false);  wInfantryRange4L.setVisible(false);  wInfantryRange4R.setVisible(false);  wInfantryRange5L.setVisible(false);  wInfantryRange5R.setVisible(false);  if (entity.isAirborne() || entity.usesWeaponBays()) {    wAVL.setVisible(true);    wShortAVR.setVisible(true);    wMedAVR.setVisible(true);    wLongAVR.setVisible(true);    wExtAVR.setVisible(true);    wMinL.setVisible(false);    wMinR.setVisible(false);  } else {    wAVL.setVisible(false);    wShortAVR.setVisible(false);    wMedAVR.setVisible(false);    wLongAVR.setVisible(false);    wExtAVR.setVisible(false);    wMinL.setVisible(true);    wMinR.setVisible(true);  }  if (((game != null) && game.getOptions().booleanOption(OptionsConstants.AC_TAC_OPS_RANGE)) || (entity.isAirborne() || entity.usesWeaponBays())) {    wExtL.setVisible(true);    wExtR.setVisible(true);  } else {    wExtL.setVisible(false);    wExtR.setVisible(false);  }  onResize();  addListeners();}  }
class C{  public static int nextRandomInt(int i){  totalCallsToRandom++;  if (Log.isLoggingOn()) {    Log.logLine("randoop.util.Randomness: " + totalCallsToRandom + " calls so far.");  }  return random.nextInt(i);}  }
class C{  public static boolean showWarningIfOldTalkbackRunning(Context context){  AccessibilityManager manager=(AccessibilityManager)context.getSystemService(Context.ACCESSIBILITY_SERVICE);  if (manager == null)   return false;  boolean isTalkbackRunning=false;  try {    List<AccessibilityServiceInfo> services=manager.getEnabledAccessibilityServiceList(AccessibilityServiceInfo.FEEDBACK_SPOKEN);    for (    AccessibilityServiceInfo service : services) {      if (service.getId().contains(TALKBACK_PACKAGE_NAME))       isTalkbackRunning=true;    }  } catch (  NullPointerException e) {  }  if (!isTalkbackRunning)   return false;  if (PackageUtils.getPackageVersion(context,TALKBACK_PACKAGE_NAME) < MIN_TALKBACK_VERSION && !sOldTalkBackVersionAlertShown) {    showOldTalkbackVersionAlertOnce(context);    return true;  }  return false;}  }
class C{  public void addExtension(String oid,boolean critical,ASN1Encodable value){  this.addExtension(new DERObjectIdentifier(oid),critical,value);}  }
class C{  public static Test suite(){  return (new TestSuite(CommandLinkMultiFormITCase.class));}  }
class C{  @Override public String toString(){  return super.toString() + "[charsetName=" + this.charset+ "]";}  }
class C{  public Minutes negated(){  return Minutes.minutes(FieldUtils.safeNegate(getValue()));}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  private void transmit(Packet packet) throws NetworkException {  byte[] data=packet.mData;  if (packet.mOffset > 0) {    System.arraycopy(data,packet.mOffset,data=new byte[packet.mLength],0,packet.mLength);  }  stats.numBytes+=packet.mLength;  stats.numPackets++;  if (data == null) {    return;  }  datagramConnection.send(remoteAddress,remotePort,data);  RtpSource s=rtcpSession.getMySource();  s.activeSender=true;  rtcpSession.timeOfLastRTPSent=rtcpSession.currentTime();  rtcpSession.packetCount++;  rtcpSession.octetCount+=data.length;}  }
class C{  public void generate(ExtensionProfile extProfile,XmlWriter w,XmlNamespace elementNamespace,String elementName,Collection<XmlWriter.Attribute> attributes) throws IOException {  generateStartElement(w,elementNamespace,elementName,attributes,null);  if (name != null && name.trim().length() > 0) {    ArrayList<XmlWriter.Attribute> attrs;    if (nameLang != null) {      attrs=new ArrayList<XmlWriter.Attribute>(1);      attrs.add(new XmlWriter.Attribute("xml:lang",nameLang));    } else {      attrs=null;    }    w.simpleElement(Namespaces.atomNs,"name",attrs,name);  }  if (uri != null && uri.trim().length() > 0) {    w.simpleElement(Namespaces.atomNs,"uri",null,uri);  }  if (email != null && email.trim().length() > 0) {    w.simpleElement(Namespaces.atomNs,"email",null,email);  }  generateExtensions(w,extProfile);  w.endElement(elementNamespace,elementName);}  }
class C{  public void addParseFilter(ParseFilter filter){  controller.addParseFilter(filter);}  }
class C{  public void nextButton(){  RestAPI api=RestAPI.getAPI();  String intro=api.getJSONElem(COMMON,"dialogIntro");  String introText="";  Driver test=new Driver();  WebDriver driver=test.getInstance();  rule.setDriver(driver);  MovieUI ui=test.getGui(driver);  ui.fluentWaitNotPresent(MovieUI.chatBoxDisabled);  introText=ui.findElement(MovieUI.dialogIntro).getText();  logger.info("INFO: Dialog intro text " + introText);  Assert.assertTrue("ERROR: Dialog Intro " + introText + " does not match expected dialog intro "+ intro,introText.contains(intro));}  }
class C{  @Override protected Control createDialogArea(Composite parent){  final int textDescriptionWidthHint=400;  Composite composite=(Composite)super.createDialogArea(parent);  final GridLayout gridLayout=new GridLayout();  gridLayout.numColumns=2;  composite.setLayout(gridLayout);  final Label labelTitle=new Label(composite,SWT.NONE);  GridData gridLabelTitle=new GridData();  gridLabelTitle.horizontalAlignment=SWT.FILL;  gridLabelTitle.horizontalSpan=2;  labelTitle.setText(Messages.EditBausteinVorgabeDialog_1);  labelTitle.setLayoutData(gridLabelTitle);  final Label labelNumber=new Label(composite,SWT.NONE);  GridData gridLabelNumber=new GridData();  gridLabelNumber.horizontalAlignment=SWT.LEFT;  gridLabelNumber.verticalAlignment=SWT.CENTER;  labelNumber.setText(Messages.EditBausteinVorgabeDialog_2);  labelNumber.setLayoutData(gridLabelNumber);  textName=new Text(composite,SWT.BORDER);  GridData gridTextDescription=new GridData();  gridTextDescription.horizontalAlignment=SWT.FILL;  gridTextDescription.grabExcessHorizontalSpace=true;  gridTextDescription.widthHint=textDescriptionWidthHint;  textName.setLayoutData(gridTextDescription);  textName.setText(vorschlag.getName());  final Label labelName=new Label(composite,SWT.NONE);  GridData gridLabelName=new GridData();  gridLabelName.horizontalAlignment=SWT.LEFT;  gridLabelName.verticalAlignment=SWT.CENTER;  labelName.setText(Messages.EditBausteinVorgabeDialog_3);  labelName.setLayoutData(gridLabelName);  textBausteine=new Text(composite,SWT.BORDER);  GridData gridTextDescription2=new GridData();  gridTextDescription2.horizontalAlignment=SWT.FILL;  gridTextDescription2.grabExcessHorizontalSpace=true;  gridTextDescription2.widthHint=textDescriptionWidthHint;  textBausteine.setLayoutData(gridTextDescription2);  textBausteine.setText(vorschlag.getBausteine());  return composite;}  }
class C{  public synchronized boolean isLeafReached(){  return (m_Current.children == null);}  }
class C{  public static <K,V>Map.Entry<K,V> removeRandomElement(final Random random,final Map<K,V> map){  return getRandomElement(true,random,map);}  }
class C{  public static JavaCompilerOptions fromConfig(CeylonConfig config){  JavaCompilerOptions options=new JavaCompilerOptions();  options.mapOptions(config);  return options;}  }
class C{  private void grow(){  m_allocatedSize*=2;  boolean newVector[]=new boolean[m_allocatedSize];  System.arraycopy(m_values,0,newVector,0,m_index + 1);  m_values=newVector;}  }
class C{  public boolean onReceiveMessage(Message message){  OtrChatManager cm=OtrChatManager.getInstance();  if (cm != null) {    SessionStatus otrStatus=cm.getSessionStatus(message.getTo().getAddress(),message.getFrom().getAddress());    SessionID sId=cm.getSessionId(message.getTo().getAddress(),message.getFrom().getAddress());    if (otrStatus == SessionStatus.ENCRYPTED) {      boolean verified=cm.getKeyManager().isVerified(sId);      if (verified) {        message.setType(Imps.MessageType.INCOMING_ENCRYPTED_VERIFIED);      } else {        message.setType(Imps.MessageType.INCOMING_ENCRYPTED);      }    }  }  if (mListener != null)   return mListener.onIncomingMessage(this,message); else   return false;}  }
class C{  public SectionExtractor(List<String> templatesToMark){  this();  this.templatesToMark=templatesToMark;}  }
class C{  public TabbedPaneContentUI(int tabPlacement){  myTabbedPaneWrapper=new MyTabbedPaneWrapper(tabPlacement);}  }
class C{  public void init() throws MessagingException {  repositoryPath=getInitParameter("repositoryPath");  processor=(getInitParameter("processor") == null) ? Mail.DEFAULT : getInitParameter("processor");  try {    delete=(getInitParameter("delete") == null) ? false : Boolean.valueOf(getInitParameter("delete"));  } catch (  Exception e) {  }  try {    repository=mailStore.select(repositoryPath);  } catch (  Exception e) {    throw new MessagingException("Failed to retrieve MailRepository for url " + repositoryPath,e);  }}  }
class C{  @DELETE @Path("{path:.*}") @Consumes("") public Response deleteWithoutBody(@PathParam("path") String path,@Context SecurityContext securityContext){  return build(elide.delete(path,null,getUser.apply(securityContext)));}  }
class C{  public TransformerException(String message){  super(message);  this.containedException=null;  this.locator=null;}  }
class C{  protected MqttDeliveryToken restoreToken(MqttPublish message){  final String methodName="restoreToken";  MqttDeliveryToken token;synchronized (tokens) {    String key=new Integer(message.getMessageId()).toString();    if (this.tokens.containsKey(key)) {      token=(MqttDeliveryToken)this.tokens.get(key);      log.fine(CLASS_NAME,methodName,"302",new Object[]{key,message,token});    } else {      token=new MqttDeliveryToken(logContext);      token.internalTok.setKey(key);      this.tokens.put(key,token);      log.fine(CLASS_NAME,methodName,"303",new Object[]{key,message,token});    }  }  return token;}  }
class C{  public void rotate(float theta){  float xTemp=x;  x=x * PApplet.cos(theta) - y * PApplet.sin(theta);  y=xTemp * PApplet.sin(theta) + y * PApplet.cos(theta);}  }
class C{  public NotificationChain basicSetUpperVersion(DeclaredVersion newUpperVersion,NotificationChain msgs){  DeclaredVersion oldUpperVersion=upperVersion;  upperVersion=newUpperVersion;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4mfPackage.VERSION_CONSTRAINT__UPPER_VERSION,oldUpperVersion,newUpperVersion);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public CGlobalEdgeCommentWrapper(final INaviEdge edge){  m_edge=edge;}  }
class C{  protected String openTag(String tag){  if (!tags.containsKey(tag)) {    tags.put(tag,new Integer(clearedText.length()));  }  return "";}  }
class C{  @Override public boolean isWarnEnabled(){  return logger.isLoggable(Level.WARNING);}  }
class C{  public DefaultSignalMastLogic(@Nonnull SignalMast source){  this.source=source;  try {    this.stopAspect=source.getAppearanceMap().getSpecificAppearance(jmri.SignalAppearanceMap.DANGER);    this.source.addPropertyChangeListener(propertySourceMastListener);    if (source.getAspect() == null) {      source.setAspect(stopAspect);    }  } catch (  Exception ex) {    log.error("Error while creating Signal Logic " + ex.toString());  }}  }
class C{  public boolean hasLon(){  return super.hasAttribute(LON);}  }
class C{  private void parseTrailerHeaders() throws IOException {  Header[] footers=null;  try {    String charset="US-ASCII";    if (method != null) {      charset=method.getParams().getHttpElementCharset();    }    footers=HttpParser.parseHeaders(in,charset);  } catch (  final HttpException e) {    LOG.error("Error parsing trailer headers",e);    final IOException ioe=new IOException(e.getMessage());    ExceptionUtil.initCause(ioe,e);    throw ioe;  }  if (method != null) {    for (int i=0; i < footers.length; i++) {      method.addResponseFooter(footers[i]);    }  }}  }
class C{  public void addEdge(Edge e){  insertEdge(e);  Coordinate[] coord=e.getCoordinates();  insertPoint(argIndex,coord[0],Location.BOUNDARY);  insertPoint(argIndex,coord[coord.length - 1],Location.BOUNDARY);}  }
class C{  public void addExtension(String oid,boolean critical,byte[] value){  this.addExtension(new DERObjectIdentifier(oid),critical,value);}  }
class C{  private void launch(){  runner.schedule();}  }
class C{  public OPTICSHeapEntry(DBID objectID,DBID predecessorID,double reachability){  this.objectID=objectID;  this.predecessorID=predecessorID;  this.reachability=reachability;}  }
class C{  public int size(){  final ReentrantLock lock=this.lock;  lock.lock();  try {    return count;  }  finally {    lock.unlock();  }}  }
class C{  private Review buildReviewFromTaskData(TaskData taskData){  TaskAttribute root=taskData.getRoot();  Review review=new Review();  review.setRequester(root.getAttribute(AppraiseReviewTaskSchema.getDefault().REQUESTER.getKey()).getValue());  review.setReviewRef(root.getAttribute(AppraiseReviewTaskSchema.getDefault().REVIEW_REF.getKey()).getValue());  review.setTargetRef(root.getAttribute(AppraiseReviewTaskSchema.getDefault().TARGET_REF.getKey()).getValue());  review.setDescription(root.getAttribute(AppraiseReviewTaskSchema.getDefault().DESCRIPTION.getKey()).getValue());  review.setReviewersString(root.getAttribute(AppraiseReviewTaskSchema.getDefault().REVIEWERS.getKey()).getValue());  return review;}  }
class C{  @Override public E remove(int index){  Object[] a=array;  int s=size;  if (index >= s) {    throwIndexOutOfBoundsException(index,s);  }  @SuppressWarnings("unchecked") E result=(E)a[index];  System.arraycopy(a,index + 1,a,index,--s - index);  a[s]=null;  size=s;  modCount++;  return result;}  }
class C{  @Override public boolean add(Integer value){  return _set.add(unwrap(value));}  }
class C{  public String filtersTipText(){  return "The base filters to be used.";}  }
class C{  public static void deleteKey(int hkey,String key) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException {  int rc=-1;  if (hkey == HKEY_LOCAL_MACHINE) {    rc=deleteKey(systemRoot,hkey,key);  } else   if (hkey == HKEY_CURRENT_USER) {    rc=deleteKey(userRoot,hkey,key);  }  if (rc != REG_SUCCESS) {    throw new IllegalArgumentException("rc=" + rc + "  key="+ key);  }}  }
class C{  public boolean hasGeneralizer(){  return (generalizer != null);}  }
class C{  public boolean isReverse(){  return true;}  }
class C{  public boolean hasMore(){  return numLeft.compareTo(BigInteger.ZERO) == 1;}  }
class C{  @SuppressWarnings("unchecked") public void executeInstruction(ExecutionContext ec,ExternalFunctionInvocationInstruction inst) throws DMLRuntimeException {  String className=inst.getClassName();  String configFile=inst.getConfigFile();  if (className == null)   throw new DMLRuntimeException(this.printBlockErrorLocation() + "Class name can't be null");  Object o;  try {    Class<Instruction> cla=(Class<Instruction>)Class.forName(className);    o=cla.newInstance();  } catch (  Exception e) {    throw new DMLRuntimeException(this.printBlockErrorLocation() + "Error generating package function object ",e);  }  if (!(o instanceof PackageFunction))   throw new DMLRuntimeException(this.printBlockErrorLocation() + "Class is not of type PackageFunction");  PackageFunction func=(PackageFunction)o;  setupInputs(func,inst.getInputParams(),ec.getVariables());  func.setConfiguration(configFile);  func.setBaseDir(_baseDir);  func.execute();  verifyAndAttachOutputs(ec,func,inst.getOutputParams());}  }
class C{  public void layoutByKnowledge(){  SemGraph _graph=(SemGraph)standardizedSemImGraphicalEditor.getWorkbench().getGraph();  _graph.setShowErrorTerms(false);  standardizedSemImGraphicalEditor.getWorkbench().layoutByKnowledge();  _graph.resetErrorPositions();  standardizedSemImGraphicalEditor.getWorkbench().setGraph(_graph);  errorTerms.setText("Show Error Terms");}  }
class C{  public T caseTypedElement(TypedElement object){  return null;}  }
class C{  private RevCommit findLastCommitInComments(Collection<ReviewComment> collection,RevCommit defaultCommit) throws MissingObjectException, IncorrectObjectTypeException, IOException {  RevCommit lastCommit=defaultCommit;  for (  ReviewComment comment : collection) {    if (comment.getLocation() == null || comment.getLocation().getCommit() == null || comment.getLocation().getCommit().isEmpty()) {      continue;    }    RevCommit currentCommit=resolveRevCommit(comment.getLocation().getCommit());    if (currentCommit != null && currentCommit.getCommitTime() > lastCommit.getCommitTime()) {      lastCommit=currentCommit;    }  }  return lastCommit;}  }
class C{  public synchronized void press(int value){  if (this.state != Input.State.WAITING_FOR_RELEASE) {    this.value=this.value + value;    if (this.holdType == Input.Hold.HOLD) {      this.state=Input.State.WAITING_FOR_RELEASE;    } else {      this.state=Input.State.PRESSED;    }  }}  }
class C{  private static int commonPrefixLength(final CharSequence first,final CharSequence second){  final int result=getCommonPrefix(first.toString(),second.toString()).length();  return result > 4 ? 4 : result;}  }
class C{  public ObjectTypeNode clone(){  ObjectTypeNode result=new ObjectTypeNode();  result.NodeId=NodeId;  result.NodeClass=NodeClass;  result.BrowseName=BrowseName;  result.DisplayName=DisplayName;  result.Description=Description;  result.WriteMask=WriteMask;  result.UserWriteMask=UserWriteMask;  if (References != null) {    result.References=new ReferenceNode[References.length];    for (int i=0; i < References.length; i++)     result.References[i]=References[i].clone();  }  result.IsAbstract=IsAbstract;  return result;}  }
class C{  public void testSetStatusToAudit(){  System.out.println("setStatusToAudit");  AuditStatus auditStatus=null;  AuditCommandImpl instance=null;}  }
class C{  public String toString(){  return "RemoteSetupVO[test=" + Test + ",IDRange="+ IDRangeStart+ "-"+ IDRangeEnd+ ",AD_Client_ID="+ AD_Client_ID+ ",AD_Org_ID="+ AD_Org_ID+ ",Prefix="+ Prefix+ ",Suffix="+ Suffix+ "]";}  }
class C{  public void parseFigTreeBlock(Map<String,Object> settings) throws ImportException, IOException {  readFigTreeBlock(settings);}  }
class C{  public double distance(final double x,final double y,final double z){  final double dx=(double)this.x - x;  final double dy=(double)this.y - y;  final double dz=(double)this.z - z;  return Math.sqrt(dx * dx + dy * dy + dz * dz);}  }
class C{  protected void addSubCommand(Class<? extends Command> commandClassRef){  subCommands.add(commandClassRef);}  }
class C{  @SuppressWarnings("rawtypes") public static void EnableIntegration(Context context,Class concreteImplementation,boolean sendSMS,boolean sendMMS) throws Exception {  Class<?> clazz=concreteImplementation;  if (!IEndlessJabberImplementation.class.isAssignableFrom(clazz)) {    throw new Exception("Class must implement IEndlessJabberImplementation");  }  SharedPreferences.Editor editor=context.getSharedPreferences("EndlessJabberSDK",Context.MODE_PRIVATE).edit();  editor.putString("InterfaceClass",concreteImplementation.getName());  editor.putBoolean("SendSMS",sendSMS);  editor.putBoolean("SendMMS",sendMMS);  editor.apply();  SendInfoToEndlessJabber(context);}  }
class C{  synchronized private boolean haveDataToTransmit(){  if (!transmitResult.compareAndSet(BKException.Code.OK,BKException.Code.OK)) {    return false;  }  return (recordSetWriter.getNumRecords() > 0);}  }
class C{  protected static void startDb(String currentVersion,String targetVersion,String extraModelsPkg,DataObjectScanner scanner,boolean createMockHandler) throws IOException {  sourceVersion=new DbVersionInfo();  sourceVersion.setSchemaVersion(currentVersion);  DbVersionInfo targetVersionInfo=new DbVersionInfo();  targetVersionInfo.setSchemaVersion(targetVersion);  List<String> packages=new ArrayList<String>();  packages.add("com.emc.storageos.db.client.model");  packages.add("com.emc.sa.model");  if (extraModelsPkg != null) {    packages.add(extraModelsPkg);  }  String[] pkgsArray=packages.toArray(new String[packages.size()]);  service=new ServiceImpl();  service.setName("dbsvc");  service.setVersion(targetVersion);  service.setEndpoint(URI.create("thrift://localhost:9160"));  service.setId("db-standalone");  StubBeaconImpl beacon=new StubBeaconImpl(service);  if (scanner == null) {    scanner=new DataObjectScanner();    scanner.setPackages(pkgsArray);    scanner.init();  }  ClassPathXmlApplicationContext ctx=new ClassPathXmlApplicationContext("nodeaddrmap-var.xml");  CoordinatorClientInetAddressMap inetAddressMap=(CoordinatorClientInetAddressMap)ctx.getBean("inetAddessLookupMap");  if (inetAddressMap == null) {    _log.error("CoordinatorClientInetAddressMap is not initialized. Node address lookup will fail.");  }  _coordinator.setInetAddessLookupMap(inetAddressMap);  _coordinator.setDbVersionInfo(sourceVersion);  ConfigurationImpl cfg=new ConfigurationImpl();  cfg.setKind(Constants.DB_CONFIG);  cfg.setId(Constants.GLOBAL_ID);  cfg.setConfig(Constants.SCHEMA_VERSION,currentVersion);  _coordinator.persistServiceConfiguration(cfg);  statusChecker=new DbServiceStatusChecker();  statusChecker.setCoordinator(_coordinator);  statusChecker.setClusterNodeCount(1);  statusChecker.setDbVersionInfo(sourceVersion);  statusChecker.setServiceName(service.getName());  SecretKey key=null;  try {    KeyGenerator keyGenerator=null;    keyGenerator=KeyGenerator.getInstance("HmacSHA256");    key=keyGenerator.generateKey();  } catch (  NoSuchAlgorithmException e) {    fail("generate key fail");  }  schemaUtil=new MockSchemaUtil();  schemaUtil.setKeyspaceName("Test");  schemaUtil.setClusterName("Test");  schemaUtil.setDataObjectScanner(scanner);  schemaUtil.setService(service);  schemaUtil.setStatusChecker(statusChecker);  schemaUtil.setCoordinator(_coordinator);  schemaUtil.setVdcShortId("datacenter1");  schemaUtil.setDrUtil(new DrUtil(_coordinator));  DbClientContext dbctx=new MockDbClientContext();  dbctx.setClusterName("Test");  dbctx.setKeyspaceName("Test");  schemaUtil.setClientContext(dbctx);  Properties props=new Properties();  props.put(DbClientImpl.DB_STAT_OPTIMIZE_DISK_SPACE,"false");  schemaUtil.setDbCommonInfo(props);  List<String> vdcHosts=new ArrayList();  vdcHosts.add("127.0.0.1");  schemaUtil.setVdcNodeList(vdcHosts);  schemaUtil.setDbCommonInfo(new java.util.Properties());  JmxServerWrapper jmx=new JmxServerWrapper();  if (_startJmx) {    jmx.setEnabled(true);    jmx.setServiceUrl("service:jmx:rmi://localhost:%d/jndi/rmi://%s:%d/jmxrmi");    jmx.setHost("127.0.0.1");    jmx.setPort(7199);    jmx.setExportPort(7200);  } else {    jmx.setEnabled(false);  }  _encryptionProvider.setCoordinator(_coordinator);  _dbClient=getDbClientBase();  _dbClient.setDbVersionInfo(targetVersionInfo);  PasswordUtils passwordUtils=new PasswordUtils();  passwordUtils.setCoordinator(_coordinator);  passwordUtils.setEncryptionProvider(_encryptionProvider);  passwordUtils.setDbClient(_dbClient);  schemaUtil.setPasswordUtils(passwordUtils);  DependencyChecker localDependencyChecker=new DependencyChecker(_dbClient,scanner);  _geoDependencyChecker=new GeoDependencyChecker(_dbClient,_coordinator,localDependencyChecker);  _dbsvc=new TestMockDbServiceImpl();  _dbsvc.setConfig("db-test.yaml");  _dbsvc.setSchemaUtil(schemaUtil);  _dbsvc.setCoordinator(_coordinator);  _dbsvc.setStatusChecker(statusChecker);  _dbsvc.setService(service);  _dbsvc.setJmxServerWrapper(jmx);  _dbsvc.setDbClient(_dbClient);  _dbsvc.setBeacon(beacon);  _dbsvc.setDbDir(dataDir);  _dbsvc.setDisableScheduledDbRepair(true);  _dbsvc.setMigrationHandler(getMigrationHandler(createMockHandler,pkgsArray));  _dbsvc.setDbMgr(new MockDbManager());  _dbsvc.start();  isDbStarted=true;}  }
class C{  public FancyLoader(ClassLoader parent){  super(parent);  try {    mDexClass=parent.loadClass("dalvik.system.DexFile");  } catch (  ClassNotFoundException cnfe) {  }}  }
class C{  private Map<URI,Map<StoragePort,Long>> filterStoragePortsForRPVMAX(URI storage,Map<URI,NetworkLite> networkMap,URI varray,Map<URI,Map<StoragePort,Long>> portUsageMap,Collection<URI> volumeURIs){  StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,storage);  if (storageSystem == null || storageSystem.getSystemType() == null || !StorageSystem.Type.vmax.name().equalsIgnoreCase(storageSystem.getSystemType())) {    return portUsageMap;  }  if (volumeURIs == null || volumeURIs.isEmpty()) {    return portUsageMap;  }  logPortUsageMap(portUsageMap);  for (  URI volumeId : volumeURIs) {    URIQueryResultList exportGroupURIs=new URIQueryResultList();    _dbClient.queryByConstraint(ContainmentConstraint.Factory.getVolumeExportGroupConstraint(volumeId),exportGroupURIs);    while (exportGroupURIs.iterator().hasNext()) {      URI exportGroupURI=exportGroupURIs.iterator().next();      ExportGroup exportGroup=_dbClient.queryObject(ExportGroup.class,exportGroupURI);      if (ExportUtils.checkIfExportGroupIsRP(exportGroup)) {        _log.info("filterStoragePortsForRPVMAX - Found that exporting volumes that are being split by VMAX.  " + "Examining storage ports and qualifying only storage ports used in the RecoverPoint masking view(s)");        Set<URI> rpTargetPorts=new HashSet<URI>();        if (exportGroup == null || exportGroup.getExportMasks() == null || exportGroup.getExportMasks().isEmpty()) {          continue;        }        List<ExportMask> exportMasks=ExportMaskUtils.getExportMasks(_dbClient,exportGroup);        for (        ExportMask exportMask : exportMasks) {          rpTargetPorts.addAll(Collections2.transform(exportMask.getStoragePorts(),CommonTransformerFunctions.FCTN_STRING_TO_URI));        }        for (        URI storagePortId : rpTargetPorts) {          List<StoragePort> ports=_dbClient.queryObjectField(StoragePort.class,"portName",Arrays.asList(storagePortId));          if (ports == null) {            continue;          }          StringSet portNames=new StringSet();          for (          StoragePort port : ports) {            portNames.add(port.getPortName());          }          _log.info("filterStoragePortsForRPVMAX - Found that RP masking view is using ports: {}",Joiner.on(',').join(portNames));        }        Set<StoragePort> removePorts=new HashSet<StoragePort>();        for (        Map.Entry<URI,Map<StoragePort,Long>> entry : portUsageMap.entrySet()) {          if (entry.getValue().keySet() == null) {            continue;          }          for (          StoragePort port : entry.getValue().keySet()) {            if (!rpTargetPorts.contains(port.getId())) {              removePorts.add(port);              _log.info("filterStoragePortsForRPVMAX - Found that RP masking view does not use port {}, " + "so it does not qualify for host/cluster export",port.getPortName());            } else {              _log.info("filterStoragePortsForRPVMAX - Found that RP masking view uses port {}, " + "so it qualifies for host/cluster export",port.getPortName());            }          }        }        for (        StoragePort removePort : removePorts) {          for (          Map.Entry<URI,Map<StoragePort,Long>> entry : portUsageMap.entrySet()) {            entry.getValue().remove(removePort);          }        }      }    }  }  logPortUsageMap(portUsageMap);  return portUsageMap;}  }
class C{  public boolean removeChildEdge(int edge){  throw new UnsupportedOperationException("Changes to tree structure not allowed for spanning trees.");}  }
class C{  public AttachmentObject(int id){  this.id=id;}  }
class C{  public String sqlObjectDetail_createTemporaryColumn(String vendorName,String catalogName,String schemaName,String tableName,String dataType){  return m_interfaces.get(getDBVendorID(vendorName)).sqlObjectDetail_createTemporaryColumn(catalogName,schemaName,tableName,getTemporaryColumnName(),dataType);}  }
class C{  public T caseTypeRef(TypeRef object){  return null;}  }
class C{  private boolean do_CheckStore(Operand ref,Operand elem,TypeReference elemType){  if (gc.noCheckStoreChecks())   return false;  if (CF_CHECKSTORE) {    if (elem.isDefinitelyNull()) {      if (DBG_TYPE)       db("skipping checkstore of null constant");      return false;    }    if (elemType.isArrayType()) {      TypeReference elemType2=elemType;      do {        elemType2=elemType2.getArrayElementType();      } while (elemType2.isArrayType());      RVMType et2=elemType2.peekType();      if (et2 != null) {        if (et2.isPrimitiveType() || et2.isUnboxedType() || ((RVMClass)et2).isFinal()) {          TypeReference myElemType=getRefTypeOf(elem);          if (myElemType == elemType) {            if (DBG_TYPE) {              db("eliminating checkstore to an array with a final element type " + elemType);            }            return false;          } else {          }        }      }    } else {      RVMType et=elemType.peekType();      if (et != null && ((RVMClass)et).isFinal()) {        if (getRefTypeOf(elem) == elemType) {          if (DBG_TYPE) {            db("eliminating checkstore to an array with a final element type " + elemType);          }          return false;        } else {        }      }    }  }  RegisterOperand guard=gc.getTemps().makeTempValidation();  if (isNonNull(elem)) {    RegisterOperand newGuard=gc.getTemps().makeTempValidation();    appendInstruction(Binary.create(GUARD_COMBINE,newGuard,copyGuardFromOperand(elem),getCurrentGuard()));    appendInstruction(StoreCheck.create(OBJARRAY_STORE_CHECK_NOTNULL,guard,ref.copy(),elem.copy(),newGuard.copy()));  } else {    appendInstruction(StoreCheck.create(OBJARRAY_STORE_CHECK,guard,ref.copy(),elem.copy(),getCurrentGuard()));  }  setCurrentGuard(guard);  rectifyStateWithArrayStoreExceptionHandler();  return false;}  }
class C{  public WeakDestroyListener(Method preDestroy,Object obj){  _preDestroy=preDestroy;  _objRef=new WeakReference<Object>(obj);}  }
class C{  public final String toString(){  return name;}  }
class C{  public void present(Name name,int type,String record) throws IOException {  newPrereq(Record.fromString(name,type,dclass,0,record,origin));}  }
class C{  private void restoreScreen(Key key,byte[] buffer,int dataSize) throws IOException {  if (VERBOSE)   Log.v(TAG,"unpacking screen " + key.id);  if (DEBUG)   Log.d(TAG,"read (" + buffer.length + "): "+ Base64.encodeToString(buffer,0,dataSize,Base64.NO_WRAP));  ContentResolver cr=mContext.getContentResolver();  ContentValues values=unpackScreen(buffer,dataSize);  cr.insert(WorkspaceScreens.CONTENT_URI,values);}  }
class C{  public boolean isCanSendEMail(){  String s=getEMailUser();  if (s == null || s.length() == 0)   return false;  if (!MClient.get(getCtx()).isSmtpAuthorization())   return true;  s=getEMailUserPW();  return s != null && s.length() > 0;}  }
class C{  @Given("^I wait for manual attachment of the debugger$") public void wait_for_manual_attachment_of_debugger() throws InterruptedException {  while (!Debug.isDebuggerConnected()) {    Thread.sleep(1000);  }}  }
class C{  @Override public void removeTableModelListener(TableModelListener l){  m_Listeners.remove(l);}  }
class C{  public static void deleteGlobalFunctionComment(final AbstractSQLProvider provider,final INaviFunction function,final Integer commentId,final Integer userId) throws CouldntDeleteException {  Preconditions.checkNotNull(provider,"IE01243: provider argument can not be null");  Preconditions.checkNotNull(function,"IE01245: codeNode argument can not be null");  Preconditions.checkNotNull(commentId,"IE01247: comment argument can not be null");  Preconditions.checkNotNull(userId,"IE01308: userId argument can not be null");  final String deleteFunction=" { ? = call delete_function_comment(?, ?, ?, ?) } ";  try (CallableStatement deleteCommentStatement=provider.getConnection().getConnection().prepareCall(deleteFunction)){    deleteCommentStatement.registerOutParameter(1,Types.INTEGER);    deleteCommentStatement.setInt(2,function.getModule().getConfiguration().getId());    deleteCommentStatement.setObject(3,function.getAddress().toBigInteger(),Types.BIGINT);    deleteCommentStatement.setInt(4,commentId);    deleteCommentStatement.setInt(5,userId);    deleteCommentStatement.execute();    deleteCommentStatement.getInt(1);    if (deleteCommentStatement.wasNull()) {      throw new IllegalArgumentException("Error: The comment id returned by the database was null");    }  } catch (  final SQLException exception) {    throw new CouldntDeleteException(exception);  }}  }
class C{  final void enqueue(Address buf,int arity,boolean toTail){  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(arity == this.arity);  lock();  if (toTail) {    setNext(buf,Address.zero());    if (tail.EQ(TAIL_INITIAL_VALUE))     head=buf; else     setNext(tail,buf);    setPrev(buf,tail);    tail=buf;  } else {    setPrev(buf,Address.zero());    if (head.EQ(HEAD_INITIAL_VALUE))     tail=buf; else     setPrev(head,buf);    setNext(buf,head);    head=buf;  }  bufsenqueued++;  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(checkDequeLength(bufsenqueued));  unlock();}  }
class C{  public boolean isRelevant(final int minimumWords){  for (  Dictionary dict : this.dictionaries.values()) {    if (dict.isRelevant(minimumWords)) {      return true;    }  }  return false;}  }
class C{  private static String execute(String cmd){  InputStream in=null;  Process process=null;  try {    process=Runtime.getRuntime().exec(cmd);    in=process.getInputStream();    return IOUtils.toString(new InputStreamReader(in,Charset.defaultCharset()));  } catch (  Exception ex) {    return "(error executing: " + cmd + ")";  }catch (  Error err) {    if (err.getMessage() != null && (err.getMessage().contains("posix_spawn") || err.getMessage().contains("UNIXProcess"))) {      log.warn("Error forking command due to JVM locale bug (see https://issues.apache.org/jira/browse/SOLR-6387): " + err.getMessage());      return "(error executing: " + cmd + ")";    }    throw err;  } finally {    if (process != null) {      IOUtils.closeQuietly(process.getOutputStream());      IOUtils.closeQuietly(process.getInputStream());      IOUtils.closeQuietly(process.getErrorStream());    }  }}  }
class C{  public CGotoAction(final JFrame parent,final CMemoryViewer view,final CDebugPerspectiveModel debugger){  super("Goto Address");  Preconditions.checkNotNull(parent,"IE01418: Parent argument can not be null");  Preconditions.checkNotNull(debugger,"IE01419: Process manager argument can not be null");  m_parent=parent;  m_view=view;  m_debugger=debugger;}  }
class C{  private String buildToolTip(final CTag tag){  return "<html><b>" + tag.getName() + "</b><br><i>"+ tag.getDescription().replace("\n","<br>")+ "</i></html>";}  }
class C{  public boolean isAllNodes(){  Object oo=get_Value(COLUMNNAME_IsAllNodes);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public String warehouse(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  if (isCalloutActive())   return "";  Integer M_Warehouse_ID=(Integer)value;  if (M_Warehouse_ID == null || M_Warehouse_ID.intValue() == 0)   return "";  String sql="SELECT w.AD_Org_ID, l.M_Locator_ID " + "FROM M_Warehouse w" + " LEFT OUTER JOIN M_Locator l ON (l.M_Warehouse_ID=w.M_Warehouse_ID AND l.IsDefault='Y') "+ "WHERE w.M_Warehouse_ID=?";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,M_Warehouse_ID.intValue());    rs=pstmt.executeQuery();    if (rs.next()) {      Integer ii=new Integer(rs.getInt(1));      int AD_Org_ID=Env.getContextAsInt(ctx,WindowNo,"AD_Org_ID");      if (AD_Org_ID != ii.intValue())       mTab.setValue("AD_Org_ID",ii);      ii=new Integer(rs.getInt(2));      if (rs.wasNull())       Env.setContext(ctx,WindowNo,0,"M_Locator_ID",null); else {        log.config("M_Locator_ID=" + ii);        Env.setContext(ctx,WindowNo,"M_Locator_ID",ii.intValue());      }    }  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);    return e.getLocalizedMessage();  } finally {    DB.close(rs,pstmt);  }  return "";}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("PrintDataColumn[");  sb.append("ID=").append(m_AD_Column_ID).append("-").append(m_columnName);  if (hasAlias())   sb.append("(").append(m_alias).append(")");  sb.append(",DisplayType=").append(m_displayType).append(",Size=").append(m_columnSize).append("]");  return sb.toString();}  }
class C{  private void cmd_selection(Object source){  for (int i=0; i < m_selectionList.size(); i++) {    if (source == m_selectionList.get(i)) {      boolean selected=isSelectionSelected(source);      VNumber qty=(VNumber)m_qtyList.get(i);      qty.setReadWrite(selected);      return;    }  }  log.log(Level.SEVERE,"not found - " + source);}  }
class C{  @Override protected void initListeners(){}  }
class C{  private void doSaveFile(String fileName,String content){  try {    if (null != fileName) {      OutputStream out=new FileOutputStream(fileName);      out.write(content.getBytes());      out.flush();      out.close();    }  } catch (  final Exception ex) {    this.setErrorMessage("Error saving rule.",ex.getMessage(),ex);  } finally {  }}  }
class C{  public static boolean checkContentCanBePulledDown(PtrFrameLayout frame,View content,View header){  return !canChildScrollUp(content);}  }
class C{  public static boolean internalPoint(IPoint[] points,int m,int i,int j,int k){  double[] x=new double[]{points[m].getX(),points[i].getX(),points[j].getX(),points[k].getX()};  double[] y=new double[]{points[m].getY(),points[i].getY(),points[j].getY(),points[k].getY()};  double ab=((y[0] - y[1]) * (x[2] - x[1]) - (x[0] - x[1]) * (y[2] - y[1]));  double bc=((y[0] - y[2]) * (x[3] - x[2]) - (x[0] - x[2]) * (y[3] - y[2]));  double ca=((y[0] - y[3]) * (x[1] - x[3]) - (x[0] - x[3]) * (y[1] - y[3]));  return FloatingPoint.greaterEquals(ab * bc,0) && FloatingPoint.greaterEquals(bc * ca,0) && FloatingPoint.greaterEquals(ab * ca,0);}  }
class C{  @AssistedInject public UserResource(@Assisted UserContext userContext,@Assisted Directory<User> directory,@Assisted User user,DirectoryObjectTranslator<User,APIUser> translator){  super(directory,user,translator);  this.userContext=userContext;  this.directory=directory;  this.user=user;}  }
class C{  public List<URI> injectResourceURI(final DbClient dbClient,final String nativeGuid){  List<URI> volumeURIs=null;  try {    volumeURIs=dbClient.queryByConstraint(AlternateIdConstraint.Factory.getVolumeNativeGuidConstraint(nativeGuid));    if (volumeURIs == null || volumeURIs.isEmpty()) {      volumeURIs=dbClient.queryByConstraint(AlternateIdConstraint.Factory.getBlockSnapshotsByNativeGuid(nativeGuid));    }  } catch (  Exception e) {    _logger.warn("Volume could not be found using NativeGuid : {}",nativeGuid);  }  return volumeURIs;}  }
class C{  static public List<Vec> selectIntialPoints(DataSet d,int k,DistanceMetric dm,List<Double> accelCache,Random rand,SeedSelection selectionMethod,ExecutorService threadpool){  int[] indicies=new int[k];  selectIntialPoints(d,indicies,dm,accelCache,rand,selectionMethod,threadpool);  List<Vec> vecs=new ArrayList<Vec>(k);  for (  Integer i : indicies)   vecs.add(d.getDataPoint(i).getNumericalValues().clone());  return vecs;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:50.459 -0500",hash_original_method="530DA602FE8EDD29DED20DF1AD2FA025",hash_generated_method="BB6489A580EA046E4810AB639A3B2AE3") public char[] readPassword(String format,Object... args){synchronized (CONSOLE_LOCK) {    format(format,args);    return readPassword();  }}  }
class C{  public void add(final InsnList insns){  if (insns.size == 0) {    return;  }  size+=insns.size;  if (last == null) {    first=insns.first;    last=insns.last;  } else {    AbstractInsnNode elem=insns.first;    last.next=elem;    elem.prev=last;    last=insns.last;  }  cache=null;  insns.removeAll(false);}  }
class C{  public void addNotify(){  super.addNotify();  wizard.addWizardObserver(this);}  }
class C{  @Override public void resetOptions(){  super.resetOptions();  if (getCompressOutput()) {    setFileExtension(XRFFLoader.FILE_EXTENSION_COMPRESSED);  } else {    setFileExtension(XRFFLoader.FILE_EXTENSION);  }  try {    m_XMLInstances=new XMLInstances();  } catch (  Exception e) {    m_XMLInstances=null;  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void unHideActionBar(View view){  if (toolbarAutoHider != null)   toolbarAutoHider.showComponent();}  }
class C{  public void endElement(String uri,String localName,String qName) throws SAXException {  String XML_TAG=qName;  String value=m_valueBuffer.toString();  try {    if (XML_TAG.equals(XML_CURDEF_TAG)) {      m_currency=value;    } else     if (XML_TAG.equals(XML_BANKID_TAG)) {      m_routingNo=value;    } else     if (XML_TAG.equals(XML_ACCTID_TAG)) {      m_bankAccountNo=value;    } else     if (XML_TAG.equals(XML_DTEND_TAG)) {      m_dateLastRun=parseOfxDate(value);    } else     if (XML_TAG.equals(XML_DTASOF_TAG)) {      m_statementDate=parseOfxDate(value);    } else     if (XML_TAG.equals(XML_TRNTYPE_TAG)) {      m_line.trxType=value;    } else     if (XML_TAG.equals(XML_DTPOSTED_TAG)) {      m_line.statementLineDate=parseOfxDate(value);    } else     if (XML_TAG.equals(XML_DTAVAIL_TAG)) {      m_line.valutaDate=parseOfxDate(value);    } else     if (XML_TAG.equals(XML_TRNAMT_TAG)) {      m_line.stmtAmt=new BigDecimal(value);    } else     if (XML_TAG.equals(XML_FITID_TAG)) {      m_line.trxID=value;    } else     if ((XML_TAG.equals(XML_CHECKNUM_TAG)) || (XML_TAG.equals(XML_CHKNUM_TAG))) {      m_line.checkNo=value;    } else     if (XML_TAG.equals(XML_REFNUM_TAG)) {      m_line.reference=value;    } else     if (XML_TAG.equals(XML_MEMO_TAG)) {      m_line.memo=value;    } else     if (XML_TAG.equals(XML_NAME_TAG)) {      m_line.payeeName=value;    }  } catch (  Exception e) {    m_errorDescription="Invalid data: " + value + " <-> "+ e.getMessage();    throw new SAXException("Invalid data: " + value);  }  if (qName.equals(XML_STMTTRN_TAG)) {    if (!m_test) {      if (!m_controller.saveLine()) {        m_errorMessage=m_controller.getErrorMessage();        m_errorDescription=m_controller.getErrorDescription();        throw new SAXException(m_errorMessage);      }    }  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  stack.getUIMgrSafe().getVideoFrame().playbackControl(VideoFrame.DVD_CONTROL_MENU,1,0);  return null;}  }
class C{  protected ThisTypeRefNominalImpl(){  super();}  }
class C{  private String expandClassName(String id){  if (fullNames.containsKey(id)) {    return this.fixInnerClassName(fullNames.get(id));  } else {    String[] innerClassesNames=AstUtil.listInnerClassesNames(topClass,true);    List<String> candidates=new ArrayList(innerClassesNames.length + 1);    candidates.add(topClass.name);    candidates.addAll(Arrays.asList(innerClassesNames));    for (    String c : candidates) {      if (id.equals(NameUtil.getClassNameWithoutPackage(c)))       return c;      if ((thisClazz.name + "$" + id).equals(c))       return c;    }    List<String> paths=new ArrayList<>(importPaths.size() + 1);    paths.add(classPath);    paths.addAll(importPaths);    for (    String p : paths) {      String clsName;      if (p != null && p.length() > 0) {        clsName=p + "." + id;      } else {        clsName=id;      }      ClassNode cls=astLoader.getAst(this.fixInnerClassName(clsName));      if (cls != null) {        return clsName;      }    }  }  return id;}  }
class C{  @Override public boolean shouldNotBeLogged(){  return false;}  }
class C{  static double zetastatic(long st,long n,double theta,double initialsum){  double sum=initialsum;  for (long i=st; i < n; i++) {    sum+=1 / (Math.pow(i + 1,theta));  }  return sum;}  }
class C{  public void load(){  if (withCommon) {    load(new FileWithSections(SystemProperties.CONF_FILE_COMMON));  }  files.forEach(null);  if (withAddOn) {    try {      Files.newDirectoryStream(FileSystems.getDefault().getPath(SystemProperties.CONF_FILE_ADDON_PATH),"*.ini").forEach(null);    } catch (    IOException e) {      log.error("Cannot load addon configuration: {}",e);    }  }  if (withOverrides) {    try {      Files.newDirectoryStream(FileSystems.getDefault().getPath(SystemProperties.getConfPath(),"conf.d"),"override-*.ini").forEach(null);    } catch (    IOException e) {      log.error("Cannot load override configuration: {}",e);    }  }  if (withLocal) {    load(new FileWithSections(SystemProperties.CONF_FILE_USER_LOCAL));  }  log.debug("Loaded properties:\n{}",loadedProperties);}  }
class C{  public void computeUnion(){  Geometry p=new Polygon(null,null,geomFactory);  if (geometries.isEmpty()) {    return;  }  for (int i=0; i < geometries.size(); i++) {    Geometry g=((MasonGeometry)geometries.get(i)).getGeometry();    p=p.union(g);  }  p=p.union();  globalUnion=new PreparedPolygon((Polygon)p);}  }
class C{  Entry(K key,V value,ReferenceQueue<? super V> queue){  super(value,queue);  this.key=key;}  }
class C{  protected void fill(String modelName,List<TLCError> problems,final List<String> serializedInput){  traceExplorerComposite.getTableViewer().setInput(new Vector<Formula>());  FormHelper.setSerializedInput(traceExplorerComposite.getTableViewer(),serializedInput);  TLCError trace=null;  if (problems != null && !problems.isEmpty()) {    StringBuffer buffer=new StringBuffer();    for (int i=0; i < problems.size(); i++) {      TLCError error=problems.get(i);      appendError(buffer,error);      if (error.hasTrace()) {        Assert.isTrue(trace == null,"Two traces are provided. Unexpected. This is a bug");        trace=error;      }    }    if (trace == null) {      trace=new TLCError();    }    IDocument document=errorViewer.getDocument();    try {      document.replace(0,document.getLength(),buffer.toString());      TLCUIHelper.setTLCLocationHyperlinks(errorViewer.getTextWidget());    } catch (    BadLocationException e) {      TLCUIActivator.getDefault().logError("Error reporting the error " + buffer.toString(),e);    }    TLCError oldTrace=(TLCError)variableViewer.getInput();    boolean isNewTrace=trace != null && oldTrace != null && !(trace == oldTrace);    if (isNewTrace) {      this.setTraceInput(trace);      traceExplorerComposite.changeExploreEnablement(true);    }    this.form.setText(modelName);  } else {    clear();  }}  }
class C{  @Override public boolean drawImage(Image img,int dx1,int dy1,int dx2,int dy2,int sx1,int sy1,int sx2,int sy2,ImageObserver observer){  return drawImage(img,dx1,dy1,dx2,dy2,sx1,sy1,sx2,sy2,Color.WHITE,observer);}  }
class C{  public AttributeTable add(ASN1ObjectIdentifier attrType,ASN1Encodable attrValue){  AttributeTable newTable=new AttributeTable(attributes);  newTable.addAttribute(attrType,new Attribute(attrType,new DERSet(attrValue)));  return newTable;}  }
class C{  public static int value(String s){  int value;  try {    value=Integer.parseInt(s);    if (value >= 0 && value <= 0xFFFF) {      return value;    }    return -1;  } catch (  NumberFormatException e) {  }  StringTokenizer st=new StringTokenizer(s,"|");  value=0;  while (st.hasMoreTokens()) {    int val=flags.getValue(st.nextToken());    if (val < 0) {      return -1;    }    value|=val;  }  return value;}  }
class C{  public static void resetBalance(String name) throws UserDoesNotExistException, NoLoanPermittedException {  if (ess == null) {    throw new RuntimeException(noCallBeforeLoad);  }  setMoney(name,ess.getSettings().getStartingBalance());  Trade.log("API","Reset","API",name,new Trade(BigDecimal.ZERO,ess),null,null,null,ess);}  }
class C{  public String toString(){  return oid.toString();}  }
class C{  public static String extractValueFromStringSet(String key,StringSetMap volumeInformation){  try {    StringSet availableValueSet=volumeInformation.get(key);    if (null != availableValueSet) {      for (      String value : availableValueSet) {        return value;      }    }  } catch (  Exception e) {    _logger.error(e.getMessage(),e);  }  return null;}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public NumberUnit(T value,String unit){  this.value=value;  this.unit=unit;}  }
class C{  public static void toXContent(SnapshotShardFailure snapshotShardFailure,XContentBuilder builder,ToXContent.Params params) throws IOException {  builder.startObject();  snapshotShardFailure.toXContent(builder,params);  builder.endObject();}  }
class C{  private Node addWaiter(Node mode){  Node node=new Node(Thread.currentThread(),mode);  Node pred=tail;  if (pred != null) {    node.prev=pred;    if (compareAndSetTail(pred,node)) {      pred.next=node;      return node;    }  }  enq(node);  return node;}  }
class C{  public final int compareTo(final SemiClusterTreeSetWritable other){  if (this.size() < other.size()) {    return -1;  }  if (this.size() > other.size()) {    return 1;  }  Iterator<SemiCluster> iterator1=this.iterator();  Iterator<SemiCluster> iterator2=other.iterator();  while (iterator1.hasNext()) {    if (iterator1.next().compareTo(iterator2.next()) != 0) {      return -1;    }  }  return 0;}  }
class C{  protected boolean beforeSave(boolean newRecord){  return true;}  }
class C{  public final double sampleTotalCount(){  long count=_totalCount.get();  long lastCount=_lastTotalCount;  _lastTotalCount=count;  return count - lastCount;}  }
class C{  private void createFile(int number,String extention){  for (int i=0; i < number; i++) {    try {      BufferedWriter output=new BufferedWriter(new FileWriter(new File(textInputFolder + "/File" + String.valueOf(i)+ extention)));      try {        output.write("File number ");        output.write(String.valueOf(i));      }  finally {        output.close();      }    } catch (    IOException e) {      e.printStackTrace();    }  }}  }
class C{  private void validateBusinessObjectDataKeys(List<BusinessObjectDataKey> keys){  List<BusinessObjectDataKey> businessObjectDataLowercaseKeys=new ArrayList<>();  if (!CollectionUtils.isEmpty(keys)) {    for (    BusinessObjectDataKey key : keys) {      Assert.notNull(key,"A business object data key must be specified.");      key.setNamespace(alternateKeyHelper.validateStringParameter("namespace",key.getNamespace()));      key.setBusinessObjectDefinitionName(alternateKeyHelper.validateStringParameter("business object definition name",key.getBusinessObjectDefinitionName()));      key.setBusinessObjectFormatUsage(alternateKeyHelper.validateStringParameter("business object format usage",key.getBusinessObjectFormatUsage()));      key.setBusinessObjectFormatFileType(alternateKeyHelper.validateStringParameter("business object format file type",key.getBusinessObjectFormatFileType()));      Assert.notNull(key.getBusinessObjectFormatVersion(),"A business object format version must be specified.");      key.setPartitionValue(alternateKeyHelper.validateStringParameter("partition value",key.getPartitionValue()));      businessObjectDataHelper.validateSubPartitionValues(key.getSubPartitionValues());      Assert.notNull(key.getBusinessObjectDataVersion(),"A business object data version must be specified.");      businessObjectDataLowercaseKeys.add(cloneToLowerCase(key));    }  }  if (businessObjectDataLowercaseKeys.size() != new HashSet<>(businessObjectDataLowercaseKeys).size()) {    throw new IllegalArgumentException("Business object data keys can not contain duplicates.");  }}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("AD_Client_ID"))     p_AD_Client_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("AD_Org_ID"))     p_AD_Org_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("DateAcct"))     p_DateAcct=((Timestamp)para[i].getParameter()); else     if (name.equals("DeleteOldImported"))     p_DeleteOldImported="Y".equals(para[i].getParameter()); else     if (name.equals("IsValidateOnly"))     p_IsValidateOnly="Y".equals(para[i].getParameter()); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public double entropyNMIMax(){  return (entropyMutualInformation() / Math.max(entropyFirst(),entropySecond()));}  }
class C{  private ValueLobDb(byte[] buff,int len,InputStream in,long remaining) throws IOException {  this.type=Value.BLOB;  this.small=null;  this.lobId=0;  this.fileName=createTempLobFileName();  RandomAccessFile tempFile=new RandomAccessFile(fileName,"rw");  long tmpPrecision=0;  try {    while (true) {      tmpPrecision+=len;      tempFile.write(buff,0,len);      remaining-=len;      if (remaining <= 0) {        break;      }      len=getBufferSize(remaining);      len=IOUtils.readFully(in,buff,len);      if (len <= 0) {        break;      }    }  }  finally {    tempFile.close();  }  this.precision=tmpPrecision;}  }
class C{  public LdapGroups(){  _groupsImpl=new LdapGroupsImpl();}  }
class C{  public boolean isCached(){  return true;}  }
class C{  public static String canonicalID(String id){  if (id == null)   return "";  int st=0;  int len=id.length();  boolean substr=false;  int c;  while (st < len && ((c=id.charAt(st)) == '<' || c <= ' ')) {    st++;    substr=true;  }  while (st < len && ((c=id.charAt(len - 1)) == '>' || c <= ' ')) {    len--;    substr=true;  }  return substr ? id.substring(st,len) : id;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Airing a=getAir(stack);  if (Permissions.hasPermission(Permissions.PERMISSION_RECORDINGSCHEDULE,stack.getUIMgr()))   BigBrother.setWatched(a);  return null;}  }
class C{  private void fillRect(Image imageIn,int a_x,int a_y,int squareSize,int a_rgb){  for (int x=a_x; x < a_x + squareSize; x++) {    for (int y=a_y; y < a_y + squareSize; y++) {      if (x < imageIn.getWidth() && y < imageIn.getHeight()) {        imageIn.setPixelColor(x,y,a_rgb);      }    }  }}  }
class C{  public static Pair<String,String> generate(final long baseOffset,final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions,final IOperandTreeNode rootNode) throws InternalTranslationException {  Preconditions.checkNotNull(environment,"Error: Argument environment can't be null");  Preconditions.checkNotNull(instruction,"Error: Argument instruction can't be null");  Preconditions.checkNotNull(instructions,"Error: Argument instructions can't be null");  if (rootNode.getChildren().get(0).getType() == ExpressionType.IMMEDIATE_INTEGER) {    return immediateRotateZero(rootNode.getChildren().get(0).getValue());  } else   if ((rootNode.getChildren().get(0).getType() == ExpressionType.OPERATOR) && rootNode.getChildren().get(0).getValue().equals("ROR") && (rootNode.getChildren().get(0).getChildren().get(0).getType() == ExpressionType.IMMEDIATE_INTEGER)) {    return immediateROR(baseOffset,environment,instructions,rootNode.getChildren().get(0).getChildren().get(0).getValue(),rootNode.getChildren().get(0).getChildren().get(1).getValue());  } else   if (rootNode.getChildren().get(0).getType() == ExpressionType.REGISTER) {    return register(rootNode.getChildren().get(0).getValue());  } else   if ((rootNode.getChildren().get(0).getType() == ExpressionType.OPERATOR) && rootNode.getChildren().get(0).getValue().equals("LSL") && (rootNode.getChildren().get(0).getChildren().get(0).getType() == ExpressionType.REGISTER)&& (rootNode.getChildren().get(0).getChildren().get(1).getType() == ExpressionType.IMMEDIATE_INTEGER)) {    return lslImmediate(baseOffset,environment,instructions,rootNode.getChildren().get(0).getChildren().get(0).getValue(),rootNode.getChildren().get(0).getChildren().get(1).getValue());  } else   if ((rootNode.getChildren().get(0).getType() == ExpressionType.OPERATOR) && rootNode.getChildren().get(0).getValue().equals("LSL") && (rootNode.getChildren().get(0).getChildren().get(0).getType() == ExpressionType.REGISTER)&& (rootNode.getChildren().get(0).getChildren().get(1).getType() == ExpressionType.REGISTER)) {    return lslRegister(baseOffset,environment,instructions,rootNode.getChildren().get(0).getChildren().get(0).getValue(),rootNode.getChildren().get(0).getChildren().get(1).getValue());  } else   if ((rootNode.getChildren().get(0).getType() == ExpressionType.OPERATOR) && rootNode.getChildren().get(0).getValue().equals("LSR") && (rootNode.getChildren().get(0).getChildren().get(0).getType() == ExpressionType.REGISTER)&& (rootNode.getChildren().get(0).getChildren().get(1).getType() == ExpressionType.IMMEDIATE_INTEGER)) {    return lsrImmediate(baseOffset,environment,instructions,rootNode.getChildren().get(0).getChildren().get(0).getValue(),rootNode.getChildren().get(0).getChildren().get(1).getValue());  } else   if ((rootNode.getChildren().get(0).getType() == ExpressionType.OPERATOR) && rootNode.getChildren().get(0).getValue().equals("LSR") && (rootNode.getChildren().get(0).getChildren().get(0).getType() == ExpressionType.REGISTER)&& (rootNode.getChildren().get(0).getChildren().get(1).getType() == ExpressionType.REGISTER)) {    return lsrRegister(baseOffset,environment,instructions,rootNode.getChildren().get(0).getChildren().get(0).getValue(),rootNode.getChildren().get(0).getChildren().get(1).getValue());  } else   if ((rootNode.getChildren().get(0).getType() == ExpressionType.OPERATOR) && rootNode.getChildren().get(0).getValue().equals("ASR") && (rootNode.getChildren().get(0).getChildren().get(0).getType() == ExpressionType.REGISTER)&& (rootNode.getChildren().get(0).getChildren().get(1).getType() == ExpressionType.IMMEDIATE_INTEGER)) {    return asrImmediate(baseOffset,environment,instructions,rootNode.getChildren().get(0).getChildren().get(0).getValue(),rootNode.getChildren().get(0).getChildren().get(1).getValue());  } else   if ((rootNode.getChildren().get(0).getType() == ExpressionType.OPERATOR) && rootNode.getChildren().get(0).getValue().equals("ASR") && (rootNode.getChildren().get(0).getChildren().get(0).getType() == ExpressionType.REGISTER)&& (rootNode.getChildren().get(0).getChildren().get(1).getType() == ExpressionType.REGISTER)) {    return asrRegister(baseOffset,environment,instructions,rootNode.getChildren().get(0).getChildren().get(0).getValue(),rootNode.getChildren().get(0).getChildren().get(1).getValue());  } else   if ((rootNode.getChildren().get(0).getType() == ExpressionType.OPERATOR) && rootNode.getChildren().get(0).getValue().equals("ROR") && (rootNode.getChildren().get(0).getChildren().get(0).getType() == ExpressionType.REGISTER)&& (rootNode.getChildren().get(0).getChildren().get(1).getType() == ExpressionType.IMMEDIATE_INTEGER)) {    return rorImmediate(baseOffset,environment,instructions,rootNode.getChildren().get(0).getChildren().get(0).getValue(),rootNode.getChildren().get(0).getChildren().get(1).getValue());  } else   if ((rootNode.getChildren().get(0).getType() == ExpressionType.OPERATOR) && rootNode.getChildren().get(0).getValue().equals("ROR") && (rootNode.getChildren().get(0).getChildren().get(0).getType() == ExpressionType.REGISTER)&& (rootNode.getChildren().get(0).getChildren().get(1).getType() == ExpressionType.REGISTER)) {    return rorRegister(baseOffset,environment,instructions,rootNode.getChildren().get(0).getChildren().get(0).getValue(),rootNode.getChildren().get(0).getChildren().get(1).getValue());  } else   if ((rootNode.getChildren().get(0).getType() == ExpressionType.OPERATOR) && rootNode.getChildren().get(0).getValue().equals("RRX") && (rootNode.getChildren().get(0).getChildren().get(0).getType() == ExpressionType.REGISTER)) {    return rrxRegister(baseOffset,environment,instructions,rootNode.getChildren().get(0).getChildren().get(0).getValue());  } else {    throw new InternalTranslationException("Error: AddressOperandTypeOne OperandTree is not valid" + instruction.getMnemonic() + " "+ instruction.getAddress().toString());  }}  }
class C{  public void testDivideRoundUpPos(){  String a="92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=-24;  String b="7472334223847623782375469293018787918347987234564568";  int bScale=13;  String c="1.24390557635720517122423359799284E+53";  int resScale=-21;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_UP);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.309 -0500",hash_original_method="5541F8A2ED86060178CAD1F0D5BA2507",hash_generated_method="9A8154AF2DB6006EE81316CA88E8859B") public ReferToHeader createReferToHeader(Address address){  if (address == null)   throw new NullPointerException("null address!");  ReferTo referTo=new ReferTo();  referTo.setAddress(address);  return referTo;}  }
class C{  @Override public String toString(){  return "HEAP<" + type + ">"+ number;}  }
class C{  public Mediator removeMediator(String mediatorName){  Mediator mediator=mediatorMap.get(mediatorName);  if (mediator != null) {    String[] interests=mediator.listNotificationInterests();    for (    String interest : interests) {      removeObserver(interest,mediator);    }    mediatorMap.remove(mediatorName);    mediator.onRemove();  }  return mediator;}  }
class C{  public Writer write(Writer writer) throws JSONException {  return this.write(writer,0,0);}  }
class C{  public Vset checkValue(Environment env,Context ctx,Vset vset,Hashtable exp){  if (left instanceof IdentifierExpression) {    vset=right.checkValue(env,ctx,vset,exp);    vset=left.checkLHS(env,ctx,vset,exp);  } else {    vset=left.checkLHS(env,ctx,vset,exp);    vset=right.checkValue(env,ctx,vset,exp);  }  type=left.type;  right=convert(env,ctx,type,right);  updater=left.getAssigner(env,ctx);  return vset;}  }
class C{  byte[] calculateHmac(byte[] key,byte[] hmacInput) throws EncryptDataException {  try {    SecretKeySpec secretKey=new SecretKeySpec(key,HMAC_ALGORITHM_TYPE);    Mac mac=Mac.getInstance(HMAC_ALGORITHM_TYPE);    mac.init(secretKey);    return mac.doFinal(hmacInput);  } catch (  Exception e) {    throw new EncryptDataException("Error while encrypting data ",e);  }}  }
class C{  public boolean parseMoreData(final EncodedImage encodedImage){  if (mParserState == NOT_A_JPEG) {    return false;  }  final int dataBufferSize=encodedImage.getSize();  if (dataBufferSize <= mBytesParsed) {    return false;  }  final InputStream bufferedDataStream=new PooledByteArrayBufferedInputStream(encodedImage.getInputStream(),mByteArrayPool.get(BUFFER_SIZE),mByteArrayPool);  try {    StreamUtil.skip(bufferedDataStream,mBytesParsed);    return doParseMoreData(bufferedDataStream);  } catch (  IOException ioe) {    Throwables.propagate(ioe);    return false;  } finally {    Closeables.closeQuietly(bufferedDataStream);  }}  }
class C{  public WekaException(){  super();}  }
class C{  public static WebSocketFrame createCloseFrame(int closeCode){  return createCloseFrame().setCloseFramePayload(closeCode,null);}  }
class C{  private void renegotiateNewSession(){  if (parameters.getEnableSessionCreation()) {    isResuming=false;    session=new SSLSessionImpl(parameters.getSecureRandom());    if (engineOwner != null) {      session.setPeer(engineOwner.getPeerHost(),engineOwner.getPeerPort());    } else {      session.setPeer(socketOwner.getPeerHostName(),socketOwner.getPeerPort());    }    session.protocol=ProtocolVersion.getLatestVersion(parameters.getEnabledProtocols());    recordProtocol.setVersion(session.protocol.version);    startSession();  } else {    status=NOT_HANDSHAKING;    sendWarningAlert(AlertProtocol.NO_RENEGOTIATION);  }}  }
class C{  public SmallConversionSet(AttributeSet attrs){  super(attrs);}  }
class C{  private void push(List<ThreadGroupReference> tgl){  stack.push(tgl.iterator());  while (!stack.isEmpty() && !top().hasNext()) {    stack.pop();  }}  }
class C{  private void twoLoadCallsToRepository(NotesRepository.LoadNotesCallback callback){  mNotesRepository.getNotes(callback);  verify(mServiceApi).getAllNotes(mNotesServiceCallbackCaptor.capture());  mNotesServiceCallbackCaptor.getValue().onLoaded(NOTES);  mNotesRepository.getNotes(callback);}  }
class C{  protected double classifyInstanceMedian(Instance instance) throws Exception {  double[] results=new double[m_Classifiers.length + m_preBuiltClassifiers.size()];  int numResults=0;  for (  Classifier m_Classifier : m_Classifiers) {    double pred=m_Classifier.classifyInstance(instance);    if (!Utils.isMissingValue(pred)) {      results[numResults++]=pred;    }  }  for (int i=0; i < m_preBuiltClassifiers.size(); i++) {    double pred=m_preBuiltClassifiers.get(i).classifyInstance(instance);    if (!Utils.isMissingValue(pred)) {      results[numResults++]=pred;    }  }  if (numResults == 0) {    return Utils.missingValue();  } else   if (numResults == 1) {    return results[0];  } else {    double[] actualResults=new double[numResults];    System.arraycopy(results,0,actualResults,0,numResults);    return Utils.kthSmallestValue(actualResults,actualResults.length / 2);  }}  }
class C{  private boolean attackWeakest(Creature creature){  final List<RPEntity> enemyList=creature.getEnemyList();  if (enemyList.isEmpty()) {    return false;  }  RPEntity target=null;  if (creature.isAttacking() && isPreferredTarget(creature.getAttackTarget())) {    target=creature.getAttackTarget();  }  int level;  if (target != null) {    level=target.getLevel();  } else {    level=1000;  }  for (  final RPEntity enemy : enemyList) {    if (!isPreferredTarget(enemy)) {      continue;    }    if (creature.getAttackStrategy().canAttackNow(creature,enemy) && !enemy.isInvisibleToCreatures()) {      if (enemy.getLevel() < level) {        target=enemy;        level=enemy.getLevel();      }    }  }  if (target != null) {    if (target != creature.getAttackTarget()) {      creature.setTarget(target);    }    return true;  }  return false;}  }
class C{  public JsonArray add(float value){  values.add(Json.value(value));  return this;}  }
class C{  public Shape modelToView(int pos,Shape a,Position.Bias b) throws BadLocationException {  return super.modelToView(pos,adjustAllocation(a),b);}  }
class C{  public iframe removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public void addCell(TableLayoutCell cell){  GridBagConstraints constraints=cell.getConstraints();  constraints.insets=new Insets(cellpadding,cellpadding,cellpadding,cellpadding);  add(cell.getComponent(),constraints);}  }
class C{  public StatisticsLogic createStatisticsLogic(User user,long categoryId){  return new StatisticsLogic(mApplication,mSettings,createChartDataLogic(user,categoryId));}  }
class C{  public boolean progress(){  return mProgress;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:40.113 -0500",hash_original_method="2BBB55550A5654C183C70F6E6AB7077D",hash_generated_method="7B58E80526BDD8137E3E9C883F497646") public static boolean equals(Object[] array1,Object[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    Object e1=array1[i], e2=array2[i];    if (!(e1 == null ? e2 == null : e1.equals(e2))) {      return false;    }  }  return true;}  }
class C{  public final Timestamp addMinute(int amount){  long delta=(long)amount * 60 * 1000;  return addMillis(delta);}  }
class C{  public SemiExternalGammaList(final InputBitStream longs,final int step,final int numLongs) throws IOException {  this.step=step == -1 ? DEFAULT_STEP : step;  int slots=(numLongs + this.step - 1) / this.step;  this.position=new long[slots];  this.numLongs=numLongs;  this.ibs=longs;  ibs.position(0);  ibs.readBits(0);  final int lastSlot=position.length - 1;  for (int i=0; i <= lastSlot; i++) {    position[i]=ibs.readBits();    if (i != lastSlot)     ibs.skipGammas(this.step);  }}  }
class C{  public void addDBIDs(DBIDs ids){  this.newids.addDBIDs(ids);}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  private boolean isDefaultBranch(){  return defaultBranch;}  }
class C{  public Path createSrc(){  if (src == null) {    src=new Path(getProject());  }  return src.createPath();}  }
class C{  private void deallocate(boolean noNewStreams,boolean released,boolean streamFinished){  RealConnection connectionToClose=null;synchronized (connectionPool) {    if (streamFinished) {      this.stream=null;    }    if (released) {      this.released=true;    }    if (connection != null) {      if (noNewStreams) {        connection.noNewStreams=true;      }      if (this.stream == null && (this.released || connection.noNewStreams)) {        release(connection);        if (connection.allocations.isEmpty()) {          connection.idleAtNanos=System.nanoTime();          if (Internal.instance.connectionBecameIdle(connectionPool,connection)) {            connectionToClose=connection;          }        }        connection=null;      }    }  }  if (connectionToClose != null) {    Util.closeQuietly(connectionToClose.socket());  }}  }
class C{  private void put112(final int b1,final int b2,final int s){  pool.put11(b1,b2).putShort(s);}  }
class C{  public long delayMillis(){  return (Long)getRequiredProperty(Annotations.DELAY);}  }
class C{  void printEntry(ZipEntry e) throws IOException {  if (vflag) {    StringBuilder sb=new StringBuilder();    String s=Long.toString(e.getSize());    for (int i=6 - s.length(); i > 0; --i) {      sb.append(' ');    }    sb.append(s).append(' ').append(new Date(e.getTime()).toString());    sb.append(' ').append(e.getName());    output(sb.toString());  } else {    output(e.getName());  }}  }
class C{  public ReferenceTarget createReferenceTarget(){  ReferenceTargetImpl referenceTarget=new ReferenceTargetImpl();  return referenceTarget;}  }
class C{  public <T>PushableStream<T> stream(){  Queue<T> q=createQueue();  return new PushableStream<T>(q,(Stream)q.stream());}  }
class C{  public void select(int start,int end){  int newStart, newEnd;  boolean newBias;  if (start <= end) {    newStart=start;    newEnd=end;    newBias=false;  } else {    newStart=end;    newEnd=start;    newBias=true;  }  if (newStart < 0 || newEnd > getDocumentLength()) {    throw new IllegalArgumentException("Bounds out of" + " range: " + newStart + ","+ newEnd);  }  if (newStart != selectionStart || newEnd != selectionEnd || newBias != biasLeft) {    int newStartLine=getLineOfOffset(newStart);    int newEndLine=getLineOfOffset(newEnd);    if (painter.isBracketHighlightEnabled()) {      if (bracketLine != -1) {        painter.invalidateLine(bracketLine);      }      updateBracketHighlight(end);      if (bracketLine != -1) {        painter.invalidateLine(bracketLine);      }    }    painter.invalidateLineRange(selectionStartLine,selectionEndLine);    painter.invalidateLineRange(newStartLine,newEndLine);    document.addUndoableEdit(new CaretUndo(selectionStart,selectionEnd));    selectionStart=newStart;    selectionEnd=newEnd;    selectionStartLine=newStartLine;    selectionEndLine=newEndLine;    biasLeft=newBias;    fireCaretEvent();  }  blink=true;  caretTimer.restart();  if (selectionStart == selectionEnd) {    rectSelect=false;  }  magicCaret=-1;  scrollToCaret();}  }
class C{  public static void typeface(View view){  if (sDefaultTypefaceCollection == null) {    throw new IllegalStateException("Default typeface collection not initialized. Forgot to call init()?");  }  typeface(view,sDefaultTypefaceCollection);}  }
class C{  public Namespace importLib(Template loadedTemplate,String targetNsVarName) throws IOException, TemplateException {  return importLib(null,loadedTemplate,targetNsVarName);}  }
class C{  public void removeErrorPage(PageException pe){  ErrorPage ep=getErrorPage(pe,ErrorPage.TYPE_EXCEPTION);  if (ep != null) {    pages.remove(ep);    hasChanged=true;  }  ep=getErrorPage(pe,ErrorPage.TYPE_REQUEST);  if (ep != null) {    pages.remove(ep);    hasChanged=true;  }  ep=getErrorPage(pe,ErrorPage.TYPE_VALIDATION);  if (ep != null) {    pages.remove(ep);    hasChanged=true;  }}  }
class C{  private void enforceAddedRule(ACLRule rule){  Set<String> dpidSet;  if (rule.getNw_src() != null) {    dpidSet=apManager.getDpidSet(rule.getNw_src_prefix(),rule.getNw_src_maskbits());  } else {    dpidSet=apManager.getDpidSet(rule.getNw_dst_prefix(),rule.getNw_dst_maskbits());  }  Iterator<String> dpidIter=dpidSet.iterator();  Set<String> nameSet=new HashSet<String>();  while (dpidIter.hasNext()) {    String dpid=dpidIter.next();    String flowName="ACLRule_" + rule.getId() + "_"+ dpid;    generateFlow(rule,dpid,flowName);    nameSet.add(flowName);  }  ruleId2FlowName.put(rule.getId(),nameSet);  ruleId2Dpid.put(rule.getId(),dpidSet);}  }
class C{  public static boolean putString(Context context,String key,String value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putString(key,value);  return editor.commit();}  }
class C{  @Override public String toString(){  if (property == null) {    return "Available properties";  }  return property.getDisplayName();}  }
class C{  public void endRemoveAllSend(long startTime,boolean failed){  long duration=getStatTime() - startTime;  endClientOpSend(duration,failed);  this.sendStats.incInt(removeAllSendInProgressId,-1);  int endRemoveAllSendId;  if (failed) {    endRemoveAllSendId=removeAllSendFailedId;  } else {    endRemoveAllSendId=removeAllSendId;  }  this.sendStats.incInt(endRemoveAllSendId,1);  this.stats.incLong(removeAllSendDurationId,duration);}  }
class C{  public static byte[] stringsToByteArray(String[] stringArray,int maxLen){  byte[] res=new byte[stringArray.length * maxLen];  for (int i=0; i < stringArray.length; i+=1) {    byte[] bstr;    if (stringArray[i] == null) {      bstr=new byte[0];    } else {      bstr=AsciiFuncs.getBytes(stringArray[i]);    }    int cnt=bstr.length;    if (cnt > maxLen) {      cnt=maxLen;    }    System.arraycopy(bstr,0,res,i * maxLen,cnt);    for (int j=cnt; j < maxLen; j+=1) {      res[i * maxLen + j]=(byte)' ';    }  }  return res;}  }
class C{  public void listaOrganizacionesExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response){  ServiceRepository services=ServiceRepository.getInstance(ServiceClient.create(getAppUser(request)));  GestionOrganizacionBI organizacionBI=services.lookupGestionOrganizacionBI();  List organizaciones=organizacionBI.buscarOrganizaciones(new OrganizacionVO());  request.setAttribute("listaOrganizaciones",organizaciones);  request.setAttribute("viewAction","obtenerVista");  request.setAttribute("viewName",OrganizacionConstants.ORGANIZACION_VIEW_NAME);  saveCurrentInvocation(KeysClientsInvocations.USUARIOS_LISTA_ORGANIZACIONES,request);  setReturnActionFordward(request,mappings.findForward("listadoOrganizaciones"));}  }
class C{  @Override protected Template createRelation(String relationStr){  return Template.create(relationStr);}  }
class C{  @Override public boolean containsKey(byte[] key){  if (this.index == null)   return false;  key=normalizeKey(key);synchronized (this) {    assert this.buffer != null;    if (this.buffer != null) {      if (this.buffer.containsKey(key))       return true;    }    return super.containsKey(key);  }}  }
class C{  public NioDatagramAcceptor(){  this(new DefaultDatagramSessionConfig(),null);}  }
class C{  public T caseTypeVariableMapping(TypeVariableMapping object){  return null;}  }
class C{  private void push(final int type){  if (outputStack == null) {    outputStack=new int[10];  }  int n=outputStack.length;  if (outputStackTop >= n) {    int[] t=new int[Math.max(outputStackTop + 1,2 * n)];    System.arraycopy(outputStack,0,t,0,n);    outputStack=t;  }  outputStack[outputStackTop++]=type;  int top=owner.inputStackTop + outputStackTop;  if (top > owner.outputStackMax) {    owner.outputStackMax=top;  }}  }
class C{  private void initializeUriList() throws IgniteSpiException {  for (  String uri : uriList) {    assertParameter(uri != null,"uriList.get(X) != null");    String encUri=encodeUri(uri.replaceAll("\\\\","/"));    URI uriObj;    try {      uriObj=new URI(encUri);    } catch (    URISyntaxException e) {      throw new IgniteSpiException("Failed to parse URI [uri=" + U.hidePassword(uri) + ", encodedUri="+ U.hidePassword(encUri)+ ']',e);    }    if (uriObj.getScheme() == null || uriObj.getScheme().trim().isEmpty())     throw new IgniteSpiException("Failed to get 'scheme' from URI [uri=" + U.hidePassword(uri) + ", encodedUri="+ U.hidePassword(encUri)+ ']');    uriEncodedList.add(uriObj);  }}  }
class C{  public int addPadding(byte[] in,int inOff){  int added=(in.length - inOff);  in[inOff]=(byte)0x80;  inOff++;  while (inOff < in.length) {    in[inOff]=(byte)0;    inOff++;  }  return added;}  }
class C{  public CipherTextIvMac(String base64IvAndCiphertext){  String[] civArray=base64IvAndCiphertext.split(":");  if (civArray.length != 3) {    throw new IllegalArgumentException("Cannot parse iv:ciphertext:mac");  } else {    iv=Base64.decode(civArray[0],BASE64_FLAGS);    mac=Base64.decode(civArray[1],BASE64_FLAGS);    cipherText=Base64.decode(civArray[2],BASE64_FLAGS);  }}  }
class C{  public static int nextInt(Random r,int start,int end){  return RandomNumbers.randomIntBetween(r,start,end);}  }
class C{  public UndirectedGraphNode cloneGraph(UndirectedGraphNode node){  if (node == null) {    return null;  }  Queue<UndirectedGraphNode> q=new LinkedList<>();  Map<Integer,UndirectedGraphNode> map=new HashMap<>();  q.add(node);  while (!q.isEmpty()) {    UndirectedGraphNode cur=q.poll();    if (!map.containsKey(cur.label)) {      map.put(cur.label,new UndirectedGraphNode(cur.label));    }    if (cur.neighbors != null) {      for (      UndirectedGraphNode n : cur.neighbors) {        if (!map.containsKey(n.label)) {          q.add(n);          map.put(n.label,new UndirectedGraphNode(n.label));        }        map.get(cur.label).neighbors.add(map.get(n.label));      }    }  }  return map.get(node.label);}  }
class C{  private IntPair complement(IntPair nfa){  if (Options.DEBUG) {    Out.debug("complement for " + nfa);    Out.debug("NFA is :" + Out.NL + this);  }  int dfaStart=nfa.end + 1;  epsilonFill();  Hashtable dfaStates=new Hashtable(numStates);  Vector dfaVector=new Vector(numStates);  int numDFAStates=0;  int currentDFAState=0;  StateSet currentState, newState;  newState=epsilon[nfa.start];  dfaStates.put(newState,new Integer(numDFAStates));  dfaVector.addElement(newState);  if (Options.DEBUG)   Out.debug("pos DFA start state is :" + Out.NL + dfaStates+ Out.NL+ Out.NL+ "ordered :"+ Out.NL+ dfaVector);  currentDFAState=0;  while (currentDFAState <= numDFAStates) {    currentState=(StateSet)dfaVector.elementAt(currentDFAState);    for (char input=0; input < numInput; input++) {      newState=DFAEdge(currentState,input);      if (newState.containsElements()) {        Integer nextDFAState=(Integer)dfaStates.get(newState);        if (nextDFAState != null) {          addTransition(dfaStart + currentDFAState,input,dfaStart + nextDFAState.intValue());        } else {          if (Options.dump)           Out.print("+");          numDFAStates++;          dfaStates.put(newState,new Integer(numDFAStates));          dfaVector.addElement(newState);          addTransition(dfaStart + currentDFAState,input,dfaStart + numDFAStates);        }      }    }    currentDFAState++;  }  if (Options.DEBUG)   Out.debug("dfa finished, nfa is now :" + Out.NL + this);  int start=dfaStart + numDFAStates + 1;  int error=dfaStart + numDFAStates + 2;  int end=dfaStart + numDFAStates + 3;  addEpsilonTransition(start,dfaStart);  for (int i=0; i < numInput; i++)   addTransition(error,i,error);  addEpsilonTransition(error,end);  for (int s=0; s <= numDFAStates; s++) {    currentState=(StateSet)dfaVector.elementAt(s);    currentDFAState=dfaStart + s;    if (!currentState.isElement(nfa.end))     addEpsilonTransition(currentDFAState,end);    for (int i=0; i < numInput; i++)     if (table[currentDFAState][i] == null)     addTransition(currentDFAState,i,error);  }  if (live == null || live.length < numStates) {    live=new boolean[2 * numStates];    visited=new boolean[2 * numStates];  }  removeDead(dfaStart,end);  if (Options.DEBUG)   Out.debug("complement finished, nfa (" + start + ","+ end+ ") is now :"+ this);  return new IntPair(start,end);}  }
class C{  public static final void performHttpGet(String url){  if (url == null || url.length() == 0) {    return;  }  HttpClient client=new HttpClient();  GetMethod method=new GetMethod(url);  method.getParams().setParameter(HttpMethodParams.RETRY_HANDLER,new DefaultHttpMethodRetryHandler(3,false));  try {    int statusCode=client.executeMethod(method);    if (statusCode != HttpStatus.SC_OK) {      System.err.println("Method failed: " + method.getStatusLine());    }    InputStream response=method.getResponseBodyAsStream();    try {      byte[] buf=new byte[1024];      int i=0;      while (i != -1) {        i=response.read(buf);      }    } catch (    IOException e) {      e.printStackTrace();    } finally {      if (response != null) {        response.close();      }    }  } catch (  HttpException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  } finally {    method.releaseConnection();  }}  }
class C{  public void triggerGooglePlayApp(String packageName){  if (Constants.DEBUG_MODE_ENABLED) {    Log.d(TAG,"triggerGooglePlayApp started.");  }  try {    Intent intent=new Intent(Intent.ACTION_VIEW);    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);    intent.setData(Uri.parse(Constants.GOOGLE_PLAY_APP_URI + packageName));    context.startActivity(intent);    if (Constants.DEBUG_MODE_ENABLED) {      Log.d(TAG,"triggerGooglePlayApp called app store.");    }  } catch (  ActivityNotFoundException e) {    String error="App store is not installed. Cannot install the app";    Log.e(TAG,error,e);    Preference.putString(context,context.getResources().getString(R.string.app_install_status),context.getResources().getString(R.string.app_status_value_download_failed));    Preference.putString(context,context.getResources().getString(R.string.app_install_failed_message),error);  }}  }
class C{  public String globalInfo(){  return "Class for running an arbitrary associator on data that has been passed " + "through an arbitrary filter. Like the associator, the structure of the filter " + "is based exclusively on the training data and test instances will be processed "+ "by the filter without changing their structure.";}  }
class C{  private void ensureOpen() throws IOException {  if (closed) {    throw new IOException("Stream closed");  }}  }
class C{  static void register(Object value){  if (value != null) {    Map m=getRegistry();    if (m == null) {      m=new WeakHashMap();      REGISTRY.set(m);    }    m.put(value,null);  }}  }
class C{  public JarEntry(String name){  super(name);}  }
class C{  public SQLRecoverableException(){}  }
class C{  public void writePopulation(String outputfolder){  if (this.sc.getPopulation().getPersons().size() == 0 || this.personAttributes == null) {    throw new RuntimeException("Either no persons or person attributes to write.");  } else {    LOG.info("Writing population to file...");    PopulationWriter pw=new PopulationWriter(this.sc.getPopulation(),this.sc.getNetwork());    pw.writeV5(outputfolder + "Population.xml");    LOG.info("Writing person attributes to file...");    ObjectAttributesXmlWriter oaw=new ObjectAttributesXmlWriter(this.personAttributes);    oaw.setPrettyPrint(true);    oaw.writeFile(outputfolder + "PersonAttributes.xml");  }}  }
class C{  public static SpsData parseSpsNalUnit(ParsableBitArray data){  int profileIdc=data.readBits(8);  data.skipBits(16);  int seqParameterSetId=data.readUnsignedExpGolombCodedInt();  int chromaFormatIdc=1;  boolean separateColorPlaneFlag=false;  if (profileIdc == 100 || profileIdc == 110 || profileIdc == 122 || profileIdc == 244 || profileIdc == 44 || profileIdc == 83 || profileIdc == 86 || profileIdc == 118 || profileIdc == 128 || profileIdc == 138) {    chromaFormatIdc=data.readUnsignedExpGolombCodedInt();    if (chromaFormatIdc == 3) {      separateColorPlaneFlag=data.readBit();    }    data.readUnsignedExpGolombCodedInt();    data.readUnsignedExpGolombCodedInt();    data.skipBits(1);    boolean seqScalingMatrixPresentFlag=data.readBit();    if (seqScalingMatrixPresentFlag) {      int limit=(chromaFormatIdc != 3) ? 8 : 12;      for (int i=0; i < limit; i++) {        boolean seqScalingListPresentFlag=data.readBit();        if (seqScalingListPresentFlag) {          skipScalingList(data,i < 6 ? 16 : 64);        }      }    }  }  int frameNumLength=data.readUnsignedExpGolombCodedInt() + 4;  int picOrderCntType=data.readUnsignedExpGolombCodedInt();  int picOrderCntLsbLength=0;  boolean deltaPicOrderAlwaysZeroFlag=false;  if (picOrderCntType == 0) {    picOrderCntLsbLength=data.readUnsignedExpGolombCodedInt() + 4;  } else   if (picOrderCntType == 1) {    deltaPicOrderAlwaysZeroFlag=data.readBit();    data.readSignedExpGolombCodedInt();    data.readSignedExpGolombCodedInt();    long numRefFramesInPicOrderCntCycle=data.readUnsignedExpGolombCodedInt();    for (int i=0; i < numRefFramesInPicOrderCntCycle; i++) {      data.readUnsignedExpGolombCodedInt();    }  }  data.readUnsignedExpGolombCodedInt();  data.skipBits(1);  int picWidthInMbs=data.readUnsignedExpGolombCodedInt() + 1;  int picHeightInMapUnits=data.readUnsignedExpGolombCodedInt() + 1;  boolean frameMbsOnlyFlag=data.readBit();  int frameHeightInMbs=(2 - (frameMbsOnlyFlag ? 1 : 0)) * picHeightInMapUnits;  if (!frameMbsOnlyFlag) {    data.skipBits(1);  }  data.skipBits(1);  int frameWidth=picWidthInMbs * 16;  int frameHeight=frameHeightInMbs * 16;  boolean frameCroppingFlag=data.readBit();  if (frameCroppingFlag) {    int frameCropLeftOffset=data.readUnsignedExpGolombCodedInt();    int frameCropRightOffset=data.readUnsignedExpGolombCodedInt();    int frameCropTopOffset=data.readUnsignedExpGolombCodedInt();    int frameCropBottomOffset=data.readUnsignedExpGolombCodedInt();    int cropUnitX, cropUnitY;    if (chromaFormatIdc == 0) {      cropUnitX=1;      cropUnitY=2 - (frameMbsOnlyFlag ? 1 : 0);    } else {      int subWidthC=(chromaFormatIdc == 3) ? 1 : 2;      int subHeightC=(chromaFormatIdc == 1) ? 2 : 1;      cropUnitX=subWidthC;      cropUnitY=subHeightC * (2 - (frameMbsOnlyFlag ? 1 : 0));    }    frameWidth-=(frameCropLeftOffset + frameCropRightOffset) * cropUnitX;    frameHeight-=(frameCropTopOffset + frameCropBottomOffset) * cropUnitY;  }  float pixelWidthHeightRatio=1;  boolean vuiParametersPresentFlag=data.readBit();  if (vuiParametersPresentFlag) {    boolean aspectRatioInfoPresentFlag=data.readBit();    if (aspectRatioInfoPresentFlag) {      int aspectRatioIdc=data.readBits(8);      if (aspectRatioIdc == NalUnitUtil.EXTENDED_SAR) {        int sarWidth=data.readBits(16);        int sarHeight=data.readBits(16);        if (sarWidth != 0 && sarHeight != 0) {          pixelWidthHeightRatio=(float)sarWidth / sarHeight;        }      } else       if (aspectRatioIdc < NalUnitUtil.ASPECT_RATIO_IDC_VALUES.length) {        pixelWidthHeightRatio=NalUnitUtil.ASPECT_RATIO_IDC_VALUES[aspectRatioIdc];      } else {        Log.w(TAG,"Unexpected aspect_ratio_idc value: " + aspectRatioIdc);      }    }  }  return new SpsData(seqParameterSetId,frameWidth,frameHeight,pixelWidthHeightRatio,separateColorPlaneFlag,frameMbsOnlyFlag,frameNumLength,picOrderCntType,picOrderCntLsbLength,deltaPicOrderAlwaysZeroFlag);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:23.775 -0500",hash_original_method="0FB35C20300C210362F151B3AD34290C",hash_generated_method="86B0B71615F5ABBB5F40E3D0C93CFFD7") public AttCertIssuer(GeneralNames names){  obj=names;  choiceObj=obj.getDERObject();}  }
class C{  public final boolean isDone(long k){  int[] node=this.getNodes(k);  if (node == null) {    return false;  }  if (node.length == 2) {    return true;  }  return node[3] != -2;}  }
class C{  public static String htmlAngleBrackets(String str){  str=str.replaceAll("<","&lt;");  str=str.replaceAll(">","&gt;");  return str;}  }
class C{  public static SnapshotsStatusRequest snapshotsStatusRequest(String repository){  return new SnapshotsStatusRequest(repository);}  }
class C{  protected void addHierarchy(List<DimensionIndex> hierarchy){  this.structure.add(hierarchy);  loadHierarchies(root,structure);}  }
class C{  public void saveToGeode(String regionPath){  dsf.saveToGeode(regionPath,dsf.defaultConnectionConf(),emptyStrStrMap());}  }
class C{  public void writeEndWiki() throws IOException {  super.writeEndWiki();  if (revisions % interval != 0)   showProgress();}  }
class C{  public EaseInOut(){}  }
class C{  public static Test suite(){  return (new TestSuite(CompositeMetaDataITCase.class));}  }
class C{  public CSSOMSVGViewCSS(CSSEngine engine){  super(engine);}  }
class C{  public static MultipleContexts allContexts(Object job){  if (job == null) {    throw new IllegalArgumentException("Job class must not be null.");  }  Job jobAnnotation=job.getClass().getAnnotation(Job.class);  if (jobAnnotation == null) {    throw new IllegalArgumentException("You need a @Job annotated class to provide params for all it's contexts.");  }  contexts.clear();  Rule[] jobRules=jobAnnotation.value();  for (  Rule rule : jobRules) {    contexts.add(rule.context());  }  return getInstance();}  }
class C{  public void ifICmp(final int mode,final Label label){  ifCmp(Type.INT_TYPE,mode,label);}  }
class C{  public static Map<String,Object> entityMaintPermCheck(DispatchContext dctx,Map<String,? extends Object> context){  GenericValue userLogin=(GenericValue)context.get("userLogin");  Locale locale=(Locale)context.get("locale");  Security security=dctx.getSecurity();  Map<String,Object> resultMap=null;  if (security.hasPermission("ENTITY_MAINT",userLogin)) {    resultMap=ServiceUtil.returnSuccess();    resultMap.put("hasPermission",true);  } else {    resultMap=ServiceUtil.returnFailure(UtilProperties.getMessage(resource,"WebtoolsPermissionError",locale));    resultMap.put("hasPermission",false);  }  return resultMap;}  }
class C{  public HeaderOption(final String name,final String value){  super(name,value);}  }
class C{  private void initialize(){  this.setLayout(new CardLayout());  this.setName(getContextIndex() + ": " + PANEL_NAME);  this.setLayout(new GridBagLayout());  this.setBorder(new EmptyBorder(2,2,2,2));  this.add(new JLabel(Constant.messages.getString("sessionmanagement.panel.label.description")),LayoutHelper.getGBC(0,0,1,1.0D));  this.add(new JLabel(Constant.messages.getString("sessionmanagement.panel.label.typeSelect")),LayoutHelper.getGBC(0,1,1,1.0D,new Insets(20,0,5,5)));  this.add(getSessionManagementMethodsComboBox(),LayoutHelper.getGBC(0,2,1,1.0D));  this.add(getConfigContainerPanel(),LayoutHelper.getGBC(0,3,1,1.0d,new Insets(10,0,10,0)));  this.add(new JLabel(),LayoutHelper.getGBC(0,99,1,1.0D,1.0D));}  }
class C{  public static boolean isPackageInstalled(String packageName,Context context){  PackageManager pm=context.getPackageManager();  try {    pm.getPackageInfo(packageName,PackageManager.GET_ACTIVITIES);    return true;  } catch (  PackageManager.NameNotFoundException e) {    return false;  }}  }
class C{  @Override public String toString(){  StringBuilder strb=new StringBuilder("[");  strb.append(stream().map(null).collect(Collectors.joining(",")));  strb.append("]");  return strb.toString();}  }
class C{  public JmsServerScriptCommand(Configuration configuration,String resourcePath,Resource resource){  super(configuration,resourcePath);  this.resource=resource;}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  public boolean reverseAccrualIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_REVERSEACCRUAL);  if (m_processMsg != null)   return false;  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_REVERSEACCRUAL);  if (m_processMsg != null)   return false;  return false;}  }
class C{  @Override @SuppressWarnings("unchecked") public boolean equals(final Object o){  if (this == o) {    return true;  }  if (o == null || !(o instanceof IntegerMap)) {    return false;  }  final IntegerMap<T> map=(IntegerMap<T>)o;  if (!map.keySet().equals(this.keySet())) {    return false;  }  if (!map.mapValues.equals(this.mapValues)) {    return false;  }  for (  final T key : map.keySet()) {    if (!(this.getInt(key) == map.getInt(key))) {      return false;    }  }  return true;}  }
class C{  @Override public boolean isEnabled(){  for (int i=0; i < numRows; i++) {    if (!monitors[i].isEnabled())     return false;  }  return true;}  }
class C{  private void initializeViews(){  mCountEditText=(EditText)findViewById(count);  mSetFab=(FloatingActionButton)findViewById(R.id.set_fab);  mStartOrStopFab=(FloatingActionButton)findViewById(R.id.play_fab);  mCountEditText.setVisibility(View.INVISIBLE);  mStartOrStopFab.setVisibility(View.INVISIBLE);  mCountEditText.setOnEditorActionListener(null);}  }
class C{  private String[] convertForUI(String[] strings){  List<String> stringList=Arrays.asList(strings);  for (int i=0, l=stringList.size(); i < l; ++i) {    stringList.set(i,stringList.get(i).toLowerCase(Locale.getDefault()).replace('_',' '));  }  return (String[])stringList.toArray();}  }
class C{  public CTSBlockCipher(BlockCipher cipher){  if ((cipher instanceof OFBBlockCipher) || (cipher instanceof CFBBlockCipher)) {    throw new IllegalArgumentException("CTSBlockCipher can only accept ECB, or CBC ciphers");  }  this.cipher=cipher;  blockSize=cipher.getBlockSize();  buf=new byte[blockSize * 2];  bufOff=0;}  }
class C{  public boolean showAllSites(){  return CATEGORY_ALL_SITES.equals(mCategory);}  }
class C{  public static String noStartingSlash(String path){  return hasStartingSlash(path) ? path.substring(1) : path;}  }
class C{  @Override public void verifyDeterministic() throws NonDeterministicException {  verifyDeterministic("ListCoder.elemCoder must be deterministic",getElemCoder());}  }
class C{  public boolean isSigned(int columnIndex) throws SQLException {  checkColRange(columnIndex);  return colInfo[columnIndex].signed;}  }
class C{  public void visitParameter(String name,int access){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (mv != null) {    mv.visitParameter(name,access);  }}  }
class C{  private void loadMorePhotoList(){  mLoadMore=true;  if (((MainActivity)getActivity()).getAbelanaClient().hasMorePages(mFragmentType)) {    new LoadPhotoList().execute(mFragmentType);  }}  }
class C{  public void onFitStatusUpdated(boolean connected){  mGameViews.getStartMenuFragment().onFitStatusUpdated(connected);  mGameViews.getEndSummaryFragment().onFitStatusUpdated(connected);  if (!connected) {    if (mMainService != null && mMainService.isMissionRunning()) {      mMainService.endMission();    } else {      getFragmentManager().popBackStack(GameViews.START_MENU_TAG,0);    }    if (mMainService != null) {      NotificationOptions notificationOptions=NotificationOptions.getDefaultNotificationOptions();      notificationOptions.setTitle(getResources().getString(R.string.disconnection_notification_title));      notificationOptions.setContent(getResources().getString(R.string.disconnection_notification_content));      notificationOptions.setNotificationId(MainService.FITNESS_DISCONNECT_NOTIFICATION_ID);      notificationOptions.setPriorityAsHigh();      notificationOptions.setNotificationDefaults(NotificationCompat.DEFAULT_LIGHTS);      mMainService.postActionNotification(notificationOptions);    }  }}  }
class C{  T register(VCardPropertyScribe<? extends VCardProperty> scribe){  if (index == null) {    index=new ScribeIndex();  }  index.register(scribe);  return this_;}  }
class C{  public void paintInternalFrameTitlePaneBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public void testFiveNodesEventsAfterFollowerKill() throws Throwable {  testEventsAfterFollowerKill(5);}  }
class C{  public SVGCreateFromFileTool(ImageHolderFigure imagePrototype,CompositeFigure groupPrototype,Map<AttributeKey,Object> attributes){  super(imagePrototype,attributes);  this.groupPrototype=groupPrototype;  this.imagePrototype=imagePrototype;}  }
class C{  private String _serializeComponent(Component component,Set<Object> done) throws ConverterException {  StringBuilder sb=new StringBuilder();  Component ca;  component=new ComponentSpecificAccess(Component.ACCESS_PRIVATE,ca=component);  boolean isPeristent=ca.isPersistent();  deep++;  Object member;  Iterator<Key> it=component.keyIterator();  Collection.Key key;  while (it.hasNext()) {    key=Caster.toKey(it.next(),null);    member=component.get(key,null);    if (member instanceof UDF)     continue;    sb.append(goIn() + "<var scope=\"this\" name=" + del+ XMLUtil.escapeXMLString(key.toString())+ del+ ">");    sb.append(_serialize(member,done));    sb.append(goIn() + "</var>");  }  Property p;  Boolean remotingFetch;  Struct props=ignoreRemotingFetch ? null : ComponentUtil.getPropertiesAsStruct(ca,false);  ComponentScope scope=ca.getComponentScope();  it=scope.keyIterator();  while (it.hasNext()) {    key=Caster.toKey(it.next(),null);    if (!ignoreRemotingFetch) {      p=(Property)props.get(key,null);      if (p != null) {        remotingFetch=Caster.toBoolean(p.getDynamicAttributes().get(REMOTING_FETCH,null),null);        if (remotingFetch == null) {          if (isPeristent && ORMUtil.isRelated(p))           continue;        } else         if (!remotingFetch.booleanValue())         continue;      }    }    member=scope.get(key,null);    if (member instanceof UDF || key.equals(KeyConstants._this))     continue;    sb.append(goIn() + "<var scope=\"variables\" name=" + del+ XMLUtil.escapeXMLString(key.toString())+ del+ ">");    sb.append(_serialize(member,done));    sb.append(goIn() + "</var>");  }  deep--;  try {    return goIn() + "<component md5=\"" + ComponentUtil.md5(component)+ "\" name=\""+ XMLUtil.escapeXMLString(component.getAbsName())+ "\">"+ sb+ "</component>";  } catch (  Exception e) {    throw toConverterException(e);  }}  }
class C{  public int compare(String s1,String s2){  final Matcher match1=MATCH_ID_PATTERN.matcher(s1);  final Matcher match2=MATCH_ID_PATTERN.matcher(s2);  final boolean match1matches=match1.matches();  final boolean match2matches=match2.matches();  if (match1matches ^ match2matches) {    return (match1matches) ? 1 : -1;  } else   if (match1matches && match2matches) {    int signature1=Integer.parseInt(match1.group(1));    int signature2=Integer.parseInt(match2.group(1));    int comparison=(signature1 < signature2) ? -1 : (signature1 > signature2) ? 1 : 0;    if (comparison == 0) {      int start1=Integer.parseInt(match1.group(2));      int start2=Integer.parseInt(match2.group(2));      comparison=(start1 < start2) ? -1 : (start1 > start2) ? 1 : 0;    }    if (comparison == 0) {      int end1=Integer.parseInt(match1.group(3));      int end2=Integer.parseInt(match2.group(3));      comparison=(end1 < end2) ? -1 : (end1 > end2) ? 1 : 0;    }    return comparison;  } else {    int seqLength1=s1.length(), n2=s2.length();    for (int i1=0, i2=0; i1 < seqLength1 && i2 < n2; i1++, i2++) {      char c1=s1.charAt(i1);      char c2=s2.charAt(i2);      if (c1 != c2) {        c1=Character.toUpperCase(c1);        c2=Character.toUpperCase(c2);        if (c1 != c2) {          c1=Character.toLowerCase(c1);          c2=Character.toLowerCase(c2);          if (c1 != c2) {            return c1 - c2;          }        }      }    }    return seqLength1 - n2;  }}  }
class C{  protected SelectedDenseObjectMatrix1D(int size,Object[] elements,int zero,int stride,int[] offsets,int offset){  setUp(size,zero,stride);  this.elements=elements;  this.offsets=offsets;  this.offset=offset;  this.isNoView=false;}  }
class C{  @SuppressWarnings("unchecked") public LiteralExtensionIV createIV(final Value value){  if (value instanceof Literal == false)   throw new IllegalArgumentException();  final Literal lit=(Literal)value;  final AbstractLiteralIV delegate=new PackedLongIV(Long.parseLong(lit.getLabel()));  return new LiteralExtensionIV(delegate,datatype.getIV());}  }
class C{  private void initProgressBar(ProgressBar progressBar){  this.itemDownloadPB=progressBar;  progressBar.setProgress(Variable.getVariable().getMapFinishedPercentage());  progressBar.setMax(100);  progressBar.setIndeterminate(false);  progressBar.setVisibility(View.VISIBLE);}  }
class C{  protected boolean isDebugEnabled(){  return trace.isDebugEnabled();}  }
class C{  private void prepareDataSet(){  dataSet1=Arrays.asList(new String[]{"a","b"});  dataSet2=Arrays.asList(new String[]{"c","d"});  dataSet3=Arrays.asList(new String[]{"e","f"});}  }
class C{  @Override public boolean send(Bytestring message) throws InterruptedException, IOException {  String[] outgoingMessage;  try {    outgoingMessage=sessionImpl.transformSending(org.bouncycastle.util.encoders.Hex.toHexString(message.bytes),null);  } catch (  OtrException e) {    return false;  }  for (  String part : outgoingMessage) {    s.send(new Bytestring(part.getBytes()));  }  return true;}  }
class C{  public void compile(boolean compileClass) throws FileNotFoundException, JasperException, Exception {  try {    ctxt.makeOutputDir(ctxt.getOutputDir());    if (errDispatcher == null) {      errDispatcher=new ErrorDispatcher(jspcMode);    }    generateJava();    if (compileClass) {      generateClass();    } else {      javaCompiler.doJavaFile(ctxt.keepGenerated());    }  }  finally {    if (tfp != null) {      tfp.removeProtoTypeFiles(null);    }    javaCompiler.release();    tfp=null;    errDispatcher=null;    if (!jspcMode) {      pageInfo=null;    }    pageNodes=null;    if (ctxt.getWriter() != null) {      ctxt.getWriter().close();      ctxt.setWriter(null);    }  }}  }
class C{  public boolean isTaxIncluded(){  Object oo=get_Value(COLUMNNAME_IsTaxIncluded);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private static void debugPrintln(String msg){  if (debug) {    System.err.println("JAXP: " + msg);  }}  }
class C{  private void writeObject(ObjectOutputStream outputStream) throws IOException {  outputStream.defaultWriteObject();  doWriteObject(outputStream);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdatadeletedatanomodificationallowederr.class,args);}  }
class C{  public void close() throws IOException {  if (!this.closed) {    this.closed=true;    this.out.flush();  }}  }
class C{  public final void addElement(E element){  add(element);}  }
class C{  private static void emitDotState(Writer out,String name,String shape,String color,String label) throws IOException {  out.write("  " + name + " ["+ (shape != null ? "shape=" + shape : "")+ " "+ (color != null ? "color=" + color : "")+ " "+ (label != null ? "label=\"" + label + "\"" : "label=\"\"")+ " "+ "]\n");}  }
class C{  public static FetchItem create(Text url,CrawlDatum datum,String queueMode){  return create(url,datum,queueMode,0);}  }
class C{  public static boolean matchesJokerString(final String str,final String matchString){  if (str.equals(JOKER)) {    return str.length() > 0;  } else {    return Pattern.compile(matchString.replace(JOKER,".*")).matcher(str).find();  }}  }
class C{  public static IXMLReader stringReader(String str){  return new StdXMLReader(new StringReader(str));}  }
class C{  public static void flushEvidences(){  String basePath=Path.logs();  final Vector<String> dirs=scanForDirLogs(basePath);  final int dsize=dirs.size();  if (Cfg.DEBUG) {    Check.log(TAG + " sendEvidences #directories: " + dsize);  }  for (int i=0; i < dsize; ++i) {    final String dir=(String)dirs.elementAt(i);    File fcDir=null;    try {      fcDir=new File(basePath + dir);      final String[] fileLogs=fcDir.list();      for (      final String file : fileLogs) {        if (file.endsWith(EvidenceCollector.LOG_TMP)) {          if (Cfg.DEBUG) {            Check.log(TAG + " WARNING (flushEvidences): " + decryptName(file));          }          AutoFile tmp=new AutoFile(fcDir.getPath(),file);          tmp.dropExtension(EvidenceCollector.LOG_TMP);        }      }    } catch (    final Exception e) {      if (Cfg.EXCEPTION) {        Check.log(e);      }      if (Cfg.DEBUG) {        Check.log(TAG + " Error: scanForLogs: " + e);      }    } finally {    }  }}  }
class C{  void updateSummaryLine(int row,int block){  String retString="";  int retState=AbstractValue.SAME;  for (int item=outBlockStartCol[block]; item < (outBlockStartCol[block] + outBlockLength[block]); item++) {    if (itemIsUsed[item]) {      int value=Integer.valueOf(_varModel.getValString(iVarIndex[item][row]));      int state=_varModel.getState(iVarIndex[item][row]);      if ((item == outBlockStartCol[block]) || (priorityValue(state) > priorityValue(retState))) {        retState=state;      }      if (value > 0) {        if (outBlockItemBits[block] == 1) {          if (itemLabel[item].equals("")) {            retString=retString + "," + itemName[item][0];          } else {            retString=retString + "," + itemLabel[item];          }        } else         if (outBlockItemBits[block] == 2) {          if (value > 2) {            retString=retString + "," + "reserved value "+ value;          } else           if (itemName[item][value].equals("")) {            if (value == 1) {              retString=retString + "," + itemName[item][0];            } else             if (value == 2) {              retString=retString + ",not " + itemName[item][0];            }          } else {            retString=retString + "," + itemName[item][value];          }        }      }    }  }  if (retString.startsWith(",")) {    retString=retString.substring(1);  }  if (retString.equals("")) {    retString="-";  }  summaryLine[row][block].setBackground(AbstractValue.stateColorFromValue(retState));  summaryLine[row][block].setText(retString);  summaryLine[row][block].setToolTipText(retString);  return;}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  transformer.getXPathContext().getVarStack().setLocalVariable(m_index,m_lazyVar);}  }
class C{  public static <T>LazySetX<T> fromPublisher(Publisher<? extends T> publisher){  return fromStreamS(ReactiveSeq.fromPublisher((Publisher<T>)publisher));}  }
class C{  public String saveForBroker(){  return save(model.getBrokerServicePricings());}  }
class C{  @Override public RuntimeAnnotationHandler scan(Class<?> clazz){  Util.notNull("clazz",clazz);  ResourceHandler handler=null;  ArrayList<Resource> fieldAnnotations=new ArrayList<>();  ArrayList<Field> fields=new ArrayList<>();  for (  Field field : clazz.getDeclaredFields()) {    Resource fieldAnnotation=field.getAnnotation(Resource.class);    if (fieldAnnotation != null) {      fieldAnnotations.add(fieldAnnotation);      fields.add(field);    }  }  ArrayList<Resource> methodAnnotations=new ArrayList<>();  ArrayList<Method> methods=new ArrayList<>();  for (  Method method : clazz.getDeclaredMethods()) {    Resource methodAnnotation=method.getAnnotation(Resource.class);    if (methodAnnotation != null) {      methodAnnotations.add(methodAnnotation);      methods.add(method);    }  }  if (!fieldAnnotations.isEmpty() || !methodAnnotations.isEmpty()) {    handler=new ResourceHandler(fields.toArray(new Field[0]),(Resource[])fieldAnnotations.toArray(new Resource[0]),methods.toArray(new Method[0]),(Resource[])methodAnnotations.toArray(new Resource[0]));  }  return handler;}  }
class C{  public CompiledST lookupTemplate(String name){  if (name.charAt(0) != '/')   name="/" + name;  if (verbose)   System.out.println(getName() + ".lookupTemplate(" + name+ ")");  CompiledST code=rawGetTemplate(name);  if (code == NOT_FOUND_ST) {    if (verbose)     System.out.println(name + " previously seen as not found");    return null;  }  if (code == null)   code=load(name);  if (code == null)   code=lookupImportedTemplate(name);  if (code == null) {    if (verbose)     System.out.println(name + " recorded not found");    templates.put(name,NOT_FOUND_ST);  }  if (verbose)   if (code != null)   System.out.println(getName() + ".lookupTemplate(" + name+ ") found");  return code;}  }
class C{  public void clear(){  m_writeLock.lock();  m_chunks.clear();  m_writeLock.unlock();  for (  final IMemoryListener listener : m_listeners) {    listener.memoryCleared();  }}  }
class C{  public void removeContainer(String container,boolean force,boolean removeVolumes) throws IOException {  try (DockerConnection connection=openConnection(dockerDaemonUri).method("DELETE").path("/containers/" + container).query("force",force ? 1 : 0).query("v",removeVolumes ? 1 : 0)){    final DockerResponse response=connection.request();    final int status=response.getStatus();    if (NO_CONTENT.getStatusCode() != status) {      throw new DockerException(getDockerExceptionMessage(response),status);    }  } }  }
class C{  public T classid(String value){  return attr("classid",value);}  }
class C{  public static Test suite(){  TestSuite suite=new TestSuite();  Vector<String> packages=new Vector<String>();  packages.add("weka.core.converters");  suite.addTest(suite(AbstractConverterTest.class.getName(),packages));  return suite;}  }
class C{  public Node.Nodes parse(String inFileName) throws FileNotFoundException, JasperException, IOException {  isTagFile=ctxt.isTagFile();  directiveOnly=false;  return doParse(inFileName,null,ctxt.getTagFileJarUrl());}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:43.402 -0500",hash_original_method="86AF4C096D752C20A8CB0D886E79B7FB",hash_generated_method="8691D52DF6C22B1E74077E39B1BA1993") private void allocateElements(int numElements){  int initialCapacity=MIN_INITIAL_CAPACITY;  if (numElements >= initialCapacity) {    initialCapacity=numElements;    initialCapacity|=(initialCapacity >>> 1);    initialCapacity|=(initialCapacity >>> 2);    initialCapacity|=(initialCapacity >>> 4);    initialCapacity|=(initialCapacity >>> 8);    initialCapacity|=(initialCapacity >>> 16);    initialCapacity++;    if (initialCapacity < 0)     initialCapacity>>>=1;  }  elements=(E[])new Object[initialCapacity];}  }
class C{  public static String escape(String str){  Utils.checkNotNull(str,"str == null");  int slen=str.length();  for (int index=0; index < slen; index++) {    char c=str.charAt(index);    if (c >= SAFE_OCTETS.length || !SAFE_OCTETS[c]) {      return escapeSlow(str,index);    }  }  return str;}  }
class C{  public void keyPressed(int keyCode){}  }
class C{  protected InternalN4JSParser createParser(LazyTokenStream stream){  return new InternalHighlightingParser(stream,getGrammarAccess(),getRewriter());}  }
class C{  public static double incompleteBeta(double aa,double bb,double xx) throws ArithmeticException {  double a, b, t, x, xc, w, y;  boolean flag;  if (aa <= 0.0 || bb <= 0.0)   throw new ArithmeticException("ibeta: Domain error!");  if ((xx <= 0.0) || (xx >= 1.0)) {    if (xx == 0.0)     return 0.0;    if (xx == 1.0)     return 1.0;    throw new ArithmeticException("ibeta: Domain error!");  }  flag=false;  if ((bb * xx) <= 1.0 && xx <= 0.95) {    t=powerSeries(aa,bb,xx);    return t;  }  w=1.0 - xx;  if (xx > (aa / (aa + bb))) {    flag=true;    a=bb;    b=aa;    xc=xx;    x=w;  } else {    a=aa;    b=bb;    xc=w;    x=xx;  }  if (flag && (b * x) <= 1.0 && x <= 0.95) {    t=powerSeries(a,b,x);    if (t <= MACHEP)     t=1.0 - MACHEP; else     t=1.0 - t;    return t;  }  y=x * (a + b - 2.0) - (a - 1.0);  if (y < 0.0)   w=incompleteBetaFraction1(a,b,x); else   w=incompleteBetaFraction2(a,b,x) / xc;  y=a * Math.log(x);  t=b * Math.log(xc);  if ((a + b) < MAXGAM && Math.abs(y) < MAXLOG && Math.abs(t) < MAXLOG) {    t=Math.pow(xc,b);    t*=Math.pow(x,a);    t/=a;    t*=w;    t*=gamma(a + b) / (gamma(a) * gamma(b));    if (flag) {      if (t <= MACHEP)       t=1.0 - MACHEP; else       t=1.0 - t;    }    return t;  }  y+=t + logGamma(a + b) - logGamma(a) - logGamma(b);  y+=Math.log(w / a);  if (y < MINLOG)   t=0.0; else   t=Math.exp(y);  if (flag) {    if (t <= MACHEP)     t=1.0 - MACHEP; else     t=1.0 - t;  }  return t;}  }
class C{  public static String morpha(final String text,final boolean tags){  if (text.isEmpty()) {    return "";  }  final String[] textParts=whitespace.split(text);  final StringBuilder result=new StringBuilder();  try {    for (int i=0; i < textParts.length; i++) {      final Morpha morpha=new Morpha(new StringReader(textParts[i]),tags);      if (result.length() != 0) {        result.append(" ");      }      result.append(morpha.next());    }  } catch (  final Error e) {    return text;  }catch (  final java.io.IOException e) {    return text;  }  return result.toString();}  }
class C{  @Override public void layerAdded(final MapLayerListEvent event){  final Layer layer=event.getElement();  if (layerTable != null) {    layerTable.onAddLayer(layer);  }  layer.setSelected(true);  redrawBaseImage=true;  final boolean atFullExtent=equalsFullExtent(getDisplayArea());  final boolean firstLayer=content.layers().size() == 1;  if (firstLayer || atFullExtent) {    reset();    if (firstLayer) {      setCrs(layer.getBounds().getCoordinateReferenceSystem());      return;    }  }  if (!isDisposed())   redraw();}  }
class C{  public void commit() throws IOException {synchronized (DiskLruCache.this) {    if (hasErrors) {      completeEdit(this,false);      removeEntry(entry);    } else {      completeEdit(this,true);    }    committed=true;  }}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.TRACE_RECORD___RECORD_ENTITY_1:    getRecordEntity_1().clear();  getRecordEntity_1().addAll((Collection<? extends RecordEntity_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  protected void onDoubleClick(){  final ISelection selection=testTreeViewer.getSelection();  final ResultNode resultNode=(ResultNode)((IStructuredSelection)selection).getFirstElement();  if (resultNode == null) {    return;  }  TestElement testElement=resultNode.getElement();  if (testElement instanceof TestCase) {    final URI testCaseURI=((TestCase)testElement).getURI();    if (testCaseURI == null) {      return;    }    final IN4JSEclipseProject project=core.findProject(testCaseURI).orNull();    if (null != project && project.exists()) {      final URI moduleLocation=testCaseURI.trimFragment();      final String[] projectRelativeSegments=moduleLocation.deresolve(project.getLocation()).segments();      final String path=Joiner.on(SEPARATOR).join(copyOfRange(projectRelativeSegments,1,projectRelativeSegments.length));      final IFile module=project.getProject().getFile(path);      if (null != module && module.isAccessible()) {        uriOpener.open(testCaseURI,true);      } else {        openError(getShell(),"Cannot open editor","Test class not found in selected project.");      }    } else {      openError(getShell(),"Cannot open editor","The container project not found in the workspace.");    }  }}  }
class C{  public boolean equals(Object object){  if (object == null) {    return false;  }  if (!(object instanceof ParameterPair)) {    return false;  }  ParameterPair pair=(ParameterPair)object;  return a.equals(pair.a) && b.equals(pair.b);}  }
class C{  public Entry toCacheEntry(byte[] data){  Entry e=new Entry();  e.data=data;  e.etag=etag;  e.serverDate=serverDate;  e.ttl=ttl;  e.softTtl=softTtl;  e.responseHeaders=responseHeaders;  return e;}  }
class C{  static boolean isAppEngine(){  if (System.getProperty("com.google.appengine.runtime.environment") == null) {    return false;  }  try {    return Class.forName("com.google.apphosting.api.ApiProxy").getMethod("getCurrentEnvironment").invoke(null) != null;  } catch (  ClassNotFoundException e) {    return false;  }catch (  InvocationTargetException e) {    return false;  }catch (  IllegalAccessException e) {    return false;  }catch (  NoSuchMethodException e) {    return false;  }}  }
class C{  public void inline(TestSuiteChromosome suite){  for (  TestChromosome test : suite.getTestChromosomes()) {    final int old_test_size=test.size();    inline(test);    final int new_test_size=test.size();    final int removed_statements=old_test_size - new_test_size;    if (removed_statements > 0) {      ExecutionResult lastExecResult=test.getLastExecutionResult();      if (lastExecResult != null) {        final int old_exec_statements=lastExecResult.getExecutedStatements();        final int new_exec_statements=old_exec_statements - removed_statements;        lastExecResult.setExecutedStatements(new_exec_statements);      }    }  }}  }
class C{  public boolean removeAllIncidentEdges(List<Edge> edges){  return getIncidentEdges().removeAll(edges);}  }
class C{  private int materializeOne(TransportNetwork network){  int stopVertex=network.streetLayer.createAndLinkVertex(lat,lon);  TransitLayer transitLayer=network.transitLayer;  int newStopId=transitLayer.getStopCount();  transitLayer.stopIdForIndex.add(this.id);  transitLayer.stopNames.add(this.name);  transitLayer.streetVertexForStop.add(stopVertex);  return newStopId;}  }
class C{  KeyIterator(QName name,Vector keyDeclarations){  super(Axis.ALL);  m_keyDeclarations=keyDeclarations;  m_name=name;}  }
class C{  private static void crashJRE(){  final String vendor=Constants.JAVA_VENDOR;  final boolean supportsUnsafeNpeDereference=vendor.startsWith("Oracle") || vendor.startsWith("Sun") || vendor.startsWith("Apple");  try {    if (supportsUnsafeNpeDereference) {      try {        Class<?> clazz=Class.forName("sun.misc.Unsafe");        java.lang.reflect.Field field=clazz.getDeclaredField("theUnsafe");        field.setAccessible(true);        Object o=field.get(null);        Method m=clazz.getMethod("putAddress",long.class,long.class);        m.invoke(o,0L,0L);      } catch (      Throwable e) {        System.out.println("Couldn't kill the JVM via Unsafe.");        e.printStackTrace(System.out);      }    }    Runtime.getRuntime().halt(-1);  } catch (  Exception e) {    System.out.println("Couldn't kill the JVM.");    e.printStackTrace(System.out);  }  throw new RuntimeException("JVM refuses to die!");}  }
class C{  private static final int possiblyBrighter(int i){  if (i < 255) {    i+=(int)((255 - i) * 0.8f);  }  return i;}  }
class C{  public void addElement(K key,E element){synchronized (this) {    if (index.containsKey(key)) {      index.get(key).add(element);    } else {      Set<E> elements=new HashSet<E>(Collections.singleton(element));      index.put(key,elements);    }    if (reverseIndex.containsKey(element)) {      reverseIndex.get(element).add(key);    } else {      Set<K> keys=new HashSet<K>(Collections.singleton(key));      reverseIndex.put(element,keys);    }  }}  }
class C{  private static int moreSpecific(Class[] c1,Class[] c2){  boolean c1MoreSpecific=false;  boolean c2MoreSpecific=false;  for (int i=0; i < c1.length; ++i) {    if (c1[i] != c2[i]) {      c1MoreSpecific=c1MoreSpecific || isStrictMethodInvocationConvertible(c2[i],c1[i]);      c2MoreSpecific=c2MoreSpecific || isStrictMethodInvocationConvertible(c1[i],c2[i]);    }  }  if (c1MoreSpecific) {    if (c2MoreSpecific) {      return INCOMPARABLE;    }    return MORE_SPECIFIC;  }  if (c2MoreSpecific) {    return LESS_SPECIFIC;  }  return INCOMPARABLE;}  }
class C{  public void suspendEncoding() throws java.io.IOException {  flushBase64();  this.suspendEncoding=true;}  }
class C{  @Override public void onReceivedHttpAuthRequest(WebView view,HttpAuthHandler handler,String host,String realm){  AuthenticationToken token=this.getAuthenticationToken(host,realm);  if (token != null) {    handler.proceed(token.getUserName(),token.getPassword());    return;  }  PluginManager pluginManager=this.appView.pluginManager;  if (pluginManager != null && pluginManager.onReceivedHttpAuthRequest(this.appView,new CordovaHttpAuthHandler(handler),host,realm)) {    this.appView.loadUrlTimeout++;    return;  }  super.onReceivedHttpAuthRequest(view,handler,host,realm);}  }
class C{  void removeFeatureChangeListener(final FeatureChangeListener listener){  featureListeners.remove(listener);}  }
class C{  public static String commaSeparated(String... parts){  StringBuilder sb=new StringBuilder();  String comma=",";  if (parts.length != 0) {    sb.append(parts[0]);  }  for (int i=1; i < parts.length; i++) {    if (parts[i] != null && !parts[i].isEmpty()) {      sb.append(comma);      sb.append(parts[i]);    }  }  return sb.toString();}  }
class C{  public boolean supportsPreStripping(){  return false;}  }
class C{  public FeedFilter withTags(@Nonnull String tags){  FeedFilter copy=basic();  copy.tags=fromNullable(emptyToNull(tags.trim()));  return fix(copy);}  }
class C{  public void readZones(int idField){  log.info("Reading shapefile " + this.shapefile);  this.zoneList=new ArrayList<MyZone>();  this.zoneMap=new HashMap<>();  MultiPolygon mp=null;  for (  SimpleFeature f : ShapeFileReader.getAllFeatures(this.shapefile)) {    String name=String.valueOf(f.getAttribute(idField));    Geometry shape=(Geometry)(f.getDefaultGeometry());    if (shape instanceof MultiPolygon) {      mp=(MultiPolygon)shape;      if (!mp.isSimple()) {        log.warn("This polygon is NOT simple!");      }      if (mp.getNumGeometries() > 1) {        log.warn("MultiPolygon " + name + " has more than one polygon.");      }      Polygon[] polygonArray=new Polygon[mp.getNumGeometries()];      for (int j=0; j < mp.getNumGeometries(); j++) {        if (mp.getGeometryN(j) instanceof Polygon) {          polygonArray[j]=(Polygon)mp.getGeometryN(j);        } else {          log.warn("Subset of multipolygon is NOT a polygon.");        }      }      MyZone newZone=new MyZone(polygonArray,mp.getFactory(),Id.create(name,MyZone.class));      zoneList.add(newZone);      zoneMap.put(newZone.getId(),newZone);      Point centroid=newZone.getCentroid();      this.xMin=Math.min(centroid.getX(),this.xMin);      this.xMax=Math.max(centroid.getX(),this.xMax);      this.yMin=Math.min(centroid.getY(),this.yMin);      this.yMax=Math.max(centroid.getY(),this.yMax);    } else {      log.warn("This is not a multipolygon!");    }  }  log.info("Done reading " + shapefile);}  }
class C{  public synchronized Object peek() throws Exception {  if (m_Head == null) {    throw new Exception("Queue is empty");  }  return m_Head.contents();}  }
class C{  byte[] javacCompile(String packageName,String className,String source){  File dir=new File(COMPILE_DIR);  if (packageName != null) {    dir=new File(dir,packageName.replace('.','/'));    FileUtils.createDirectories(dir.getAbsolutePath());  }  File javaFile=new File(dir,className + ".java");  File classFile=new File(dir,className + ".class");  try {    OutputStream f=FileUtils.newOutputStream(javaFile.getAbsolutePath(),false);    Writer out=IOUtils.getBufferedWriter(f);    classFile.delete();    out.write(source);    out.close();    if (JAVAC_SUN != null) {      javacSun(javaFile);    } else {      javacProcess(javaFile);    }    byte[] data=new byte[(int)classFile.length()];    DataInputStream in=new DataInputStream(new FileInputStream(classFile));    in.readFully(data);    in.close();    return data;  } catch (  Exception e) {    throw DbException.convert(e);  } finally {    javaFile.delete();    classFile.delete();  }}  }
class C{  void stop(){  runTime+=System.nanoTime() - startTime;  startTime=-1;}  }
class C{  public boolean isColumnTypeSegmentValue(){  return COLUMNTYPE_SegmentValue.equals(getColumnType());}  }
class C{  public static void modifyRootAttributes(Document doc,XmlEntity xmlEntity) throws IOException {  if (xmlEntity == null || xmlEntity.getAttributes() == null) {    return;  }  String type=xmlEntity.getType();  Map<String,String> attributes=xmlEntity.getAttributes();  Element root=doc.getDocumentElement();  if (root.getLocalName().equals(type)) {    for (    Entry<String,String> entry : attributes.entrySet()) {      String attributeName=entry.getKey();      String attributeValue=entry.getValue();      String rootAttribute=getAttribute(root,attributeName);      if (null != rootAttribute) {        root.removeAttribute(rootAttribute);      }      root.setAttribute(attributeName,attributeValue);    }  }}  }
class C{  public synchronized void deleteOne(int row){  if (!list.get(row).isBeingEdited()) {    list.get(row).delete();    list.remove(row);    fireTableRowsDeleted(row,row);  }}  }
class C{  public String sendHttpJsonDownstreamMessage(String destination,Message message) throws IOException {  JSONObject jsonBody=new JSONObject();  try {    jsonBody.put(PARAM_TO,destination);    jsonBody.putOpt(PARAM_COLLAPSE_KEY,message.getCollapseKey());    jsonBody.putOpt(PARAM_RESTRICTED_PACKAGE_NAME,message.getRestrictedPackageName());    jsonBody.putOpt(PARAM_TIME_TO_LIVE,message.getTimeToLive());    jsonBody.putOpt(PARAM_DELAY_WHILE_IDLE,message.isDelayWhileIdle());    jsonBody.putOpt(PARAM_DRY_RUN,message.isDryRun());    if (message.getData().size() > 0) {      JSONObject jsonPayload=new JSONObject(message.getData());      jsonBody.put(PARAM_JSON_PAYLOAD,jsonPayload);    }    if (message.getNotificationParams().size() > 0) {      JSONObject jsonNotificationParams=new JSONObject(message.getNotificationParams());      jsonBody.put(PARAM_JSON_NOTIFICATION_PARAMS,jsonNotificationParams);    }  } catch (  JSONException e) {    logger.log(Log.ERROR,"Failed to build JSON body");    throw new IOException("Failed to build JSON body");  }  HttpRequest httpRequest=new HttpRequest();  httpRequest.setHeader(HEADER_CONTENT_TYPE,CONTENT_TYPE_JSON);  httpRequest.setHeader(HEADER_AUTHORIZATION,"key=" + key);  httpRequest.doPost(GCM_SEND_ENDPOINT,jsonBody.toString());  if (httpRequest.getResponseCode() != 200) {    throw new IOException("Invalid request." + " status: " + httpRequest.getResponseCode() + " response: "+ httpRequest.getResponseBody());  }  JSONObject jsonResponse;  try {    jsonResponse=new JSONObject(httpRequest.getResponseBody());    logger.log(Log.INFO,"Send message:\n" + jsonResponse.toString(2));  } catch (  JSONException e) {    logger.log(Log.ERROR,"Failed to parse server response:\n" + httpRequest.getResponseBody());  }  return httpRequest.getResponseBody();}  }
class C{  @Override public void playDismissAnimation(){  dismissAnimation.play();}  }
class C{  public VcpcFastRunner(Graph graph,Parameters params){  super(graph,params);}  }
class C{  public static String generateHitachiWWN(String luObjectID,String volumeNativeId){  String arraySerialNum=luObjectID.split("\\.")[2];  String arraySerialNumInHex=null;  if (luObjectID.contains(HDSConstants.HUSVM_MODEL)) {    arraySerialNumInHex=Integer.toHexString(Integer.parseInt(arraySerialNum.substring(1)));  } else   if (luObjectID.contains(HDSConstants.VSP_G1000_MODEL)) {    arraySerialNumInHex=Integer.toHexString(Integer.parseInt(arraySerialNum));  } else {    arraySerialNumInHex=String.format("%08x",Integer.parseInt(arraySerialNum));  }  StringBuffer generatedWWN=new StringBuffer(arraySerialNumInHex);  String volumeIdInHexa=String.format("%08x",Integer.parseInt(volumeNativeId));  generatedWWN.append(volumeIdInHexa);  return generatedWWN.toString().toUpperCase();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:16.256 -0500",hash_original_method="54B6F4B5E133F8A61DA406B9859D0D86",hash_generated_method="9E4D16CEBDD19DA15C150611BDBAA64C") private CipherSuite(String name,boolean isExportable,int keyExchange,String authType,String cipherName,String hash,byte[] code){  this.name=name;  this.keyExchange=keyExchange;  this.authType=authType;  this.isExportable=isExportable;  if (cipherName == null) {    this.cipherName=null;    keyMaterial=0;    expandedKeyMaterial=0;    effectiveKeyBytes=0;    ivSize=0;    blockSize=0;  } else   if ("RC4_40".equals(cipherName)) {    this.cipherName="RC4";    keyMaterial=5;    expandedKeyMaterial=16;    effectiveKeyBytes=5;    ivSize=0;    blockSize=0;  } else   if ("RC4_128".equals(cipherName)) {    this.cipherName="RC4";    keyMaterial=16;    expandedKeyMaterial=16;    effectiveKeyBytes=16;    ivSize=0;    blockSize=0;  } else   if ("DES40_CBC".equals(cipherName)) {    this.cipherName="DES/CBC/NoPadding";    keyMaterial=5;    expandedKeyMaterial=8;    effectiveKeyBytes=5;    ivSize=8;    blockSize=8;  } else   if ("DES_CBC".equals(cipherName)) {    this.cipherName="DES/CBC/NoPadding";    keyMaterial=8;    expandedKeyMaterial=8;    effectiveKeyBytes=7;    ivSize=8;    blockSize=8;  } else   if ("3DES_EDE_CBC".equals(cipherName)) {    this.cipherName="DESede/CBC/NoPadding";    keyMaterial=24;    expandedKeyMaterial=24;    effectiveKeyBytes=24;    ivSize=8;    blockSize=8;  } else   if ("AES_128_CBC".equals(cipherName)) {    this.cipherName="AES/CBC/NoPadding";    keyMaterial=16;    expandedKeyMaterial=16;    effectiveKeyBytes=16;    ivSize=16;    blockSize=16;  } else   if ("AES_256_CBC".equals(cipherName)) {    this.cipherName="AES/CBC/NoPadding";    keyMaterial=32;    expandedKeyMaterial=32;    effectiveKeyBytes=32;    ivSize=16;    blockSize=16;  } else {    this.cipherName=cipherName;    keyMaterial=0;    expandedKeyMaterial=0;    effectiveKeyBytes=0;    ivSize=0;    blockSize=0;  }  if ("MD5".equals(hash)) {    this.hmacName="HmacMD5";    this.hashName="MD5";    hashSize=16;  } else   if ("SHA".equals(hash)) {    this.hmacName="HmacSHA1";    this.hashName="SHA-1";    hashSize=20;  } else {    this.hmacName=null;    this.hashName=null;    hashSize=0;  }  cipherSuiteCode=code;  if (this.cipherName != null) {    try {      Cipher.getInstance(this.cipherName);    } catch (    GeneralSecurityException e) {      supported=false;    }  }  if (this.name.startsWith("TLS_EC")) {    supported=false;  }}  }
class C{  public static <S,A>State<S,A> init(Function.F1<S,Tuple<A,S>> runState){  return new State<>(runState);}  }
class C{  @Override public void close() throws SQLException {  try {    debugCodeCall("close");    closeInternal();  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void addScopeRegex(String scope){  this.scopes.add(scope);}  }
class C{  public static Object[] remove(Object[] originalArray,int pos){  Object[] newArray=(Object[])java.lang.reflect.Array.newInstance(originalArray.getClass().getComponentType(),originalArray.length - 1);  if (pos > 0) {    System.arraycopy(originalArray,0,newArray,0,pos);  }  if (pos < originalArray.length - 1) {    System.arraycopy(originalArray,pos + 1,newArray,pos,originalArray.length - 1 - pos);  }  return newArray;}  }
class C{  public void testWriteLines() throws IOException {  Path result=Files.write(tmpfile,Collections.<String>emptyList(),US_ASCII);  assert (Files.size(tmpfile) == 0);  assert (result == tmpfile);  List<String> lines=Arrays.asList("hi","there");  Files.write(tmpfile,lines,US_ASCII);  List<String> actual=Files.readAllLines(tmpfile,US_ASCII);  assertTrue(actual.equals(lines),"Unexpected lines");  Files.write(tmpfile,lines,US_ASCII,APPEND);  List<String> expected=new ArrayList<>();  expected.addAll(lines);  expected.addAll(lines);  assertTrue(expected.size() == 4,"List should have 4 elements");  actual=Files.readAllLines(tmpfile,US_ASCII);  assertTrue(actual.equals(expected),"Unexpected lines");  try {    String s="\u00A0\u00A1";    Files.write(tmpfile,Arrays.asList(s),US_ASCII);    fail("UnmappableCharacterException expected");  } catch (  UnmappableCharacterException ignore) {  }}  }
class C{  public void line(String srcName,Paint color,String legend,float width,boolean stack){  if (legend != null) {    comments.add(new LegendText(color,legend));  }  SourcedPlotElement parent=stack ? findParent() : null;  plotElements.add(new Line(srcName,color,new BasicStroke(width),parent));}  }
class C{  public static int hashSearch(final Memory mem,final int lgArrLongs,final long hash,final int memOffsetBytes){  final int arrayMask=(1 << lgArrLongs) - 1;  final int stride=getStride(hash,lgArrLongs);  int curProbe=(int)(hash & arrayMask);  int curProbeOffsetBytes=(curProbe << 3) + memOffsetBytes;  long curArrayHash=mem.getLong(curProbeOffsetBytes);  while (curArrayHash != 0) {    if (curArrayHash == hash)     return curProbe;    curProbe=(curProbe + stride) & arrayMask;    curProbeOffsetBytes=(curProbe << 3) + memOffsetBytes;    curArrayHash=mem.getLong(curProbeOffsetBytes);  }  return -1;}  }
class C{  public void weaken(){  if (strength > 0) {    decrementWeight();  } else   if (strength < 0) {    incrementWeight();  } else   if (strength == 0) {    strength=0;  }  getNetwork().fireSynapseChanged(this);}  }
class C{  private void handleUserAssignment(long orgKey,long triggerDefinitionKey) throws Exception {  ResourceHolder holder=getTriggerProcesses(triggerDefinitionKey);  ResultSet processes=holder.getRs();  while (processes.next()) {    long triggerProcessKey=writeOrgKeyIdentifierForProcess(orgKey,processes);    writeAssignmentIdentifiers(triggerProcessKey);  }  holder.close();}  }
class C{  protected void processGetRequest(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  response.setContentType("text/html;charset=UTF-8");  response.sendRedirect("login.html");  PrintWriter out=response.getWriter();  try {  }  finally {    out.close();  }}  }
class C{  @SuppressWarnings("unchecked") public void loadHistory(String filename) throws Exception {  FileInputStream fis=new FileInputStream(filename);  ObjectInputStream ois=new ObjectInputStream(fis);  setHistory((Map<Double,Double>)ois.readObject());  ois.close();}  }
class C{  public void testToBigIntegerZero(){  String a="-123809648392384754573567356745735.63567890295784902768787678287E-500";  BigInteger bNumber=new BigInteger("0");  BigDecimal aNumber=new BigDecimal(a);  BigInteger result=aNumber.toBigInteger();  assertTrue("incorrect value",result.equals(bNumber));}  }
class C{  protected GenericElementNS(){}  }
class C{  private static BitMatrix extractPureBits(BitMatrix image) throws NotFoundException {  int[] leftTopBlack=image.getTopLeftOnBit();  int[] rightBottomBlack=image.getBottomRightOnBit();  if (leftTopBlack == null || rightBottomBlack == null) {    throw NotFoundException.getNotFoundInstance();  }  float moduleSize=moduleSize(leftTopBlack,image);  int top=leftTopBlack[1];  int bottom=rightBottomBlack[1];  int left=leftTopBlack[0];  int right=rightBottomBlack[0];  if (left >= right || top >= bottom) {    throw NotFoundException.getNotFoundInstance();  }  if (bottom - top != right - left) {    right=left + (bottom - top);  }  int matrixWidth=Math.round((right - left + 1) / moduleSize);  int matrixHeight=Math.round((bottom - top + 1) / moduleSize);  if (matrixWidth <= 0 || matrixHeight <= 0) {    throw NotFoundException.getNotFoundInstance();  }  if (matrixHeight != matrixWidth) {    throw NotFoundException.getNotFoundInstance();  }  int nudge=(int)(moduleSize / 2.0f);  top+=nudge;  left+=nudge;  int nudgedTooFarRight=left + (int)((matrixWidth - 1) * moduleSize) - right;  if (nudgedTooFarRight > 0) {    if (nudgedTooFarRight > nudge) {      throw NotFoundException.getNotFoundInstance();    }    left-=nudgedTooFarRight;  }  int nudgedTooFarDown=top + (int)((matrixHeight - 1) * moduleSize) - bottom;  if (nudgedTooFarDown > 0) {    if (nudgedTooFarDown > nudge) {      throw NotFoundException.getNotFoundInstance();    }    top-=nudgedTooFarDown;  }  BitMatrix bits=new BitMatrix(matrixWidth,matrixHeight);  for (int y=0; y < matrixHeight; y++) {    int iOffset=top + (int)(y * moduleSize);    for (int x=0; x < matrixWidth; x++) {      if (image.get(left + (int)(x * moduleSize),iOffset)) {        bits.set(x,y);      }    }  }  return bits;}  }
class C{  Item newInteger(final int value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.putByte(INT).putInt(value);    result=new Item(index++,key);    put(result);  }  return result;}  }
class C{  private boolean processOneRequest(Socket socket,InputStream in,OutputStream out) throws IOException, InterruptedException {  RecordedRequest request=readRequest(socket,in,sequenceNumber);  if (request == null) {    return false;  }  requestCount.incrementAndGet();  requestQueue.add(request);  MockResponse response=dispatcher.dispatch(request);  if (response.getSocketPolicy() == SocketPolicy.DISCONNECT_AFTER_READING_REQUEST) {    logger.info("Received request: " + request + " and disconnected without responding");    return false;  }  writeResponse(out,response);  if (response.getSocketPolicy() == SocketPolicy.DISCONNECT_AT_END) {    in.close();    out.close();  } else   if (response.getSocketPolicy() == SocketPolicy.SHUTDOWN_INPUT_AT_END) {    socket.shutdownInput();  } else   if (response.getSocketPolicy() == SocketPolicy.SHUTDOWN_OUTPUT_AT_END) {    socket.shutdownOutput();  }  logger.info("Received request: " + request + " and responded: "+ response);  sequenceNumber++;  return true;}  }
class C{  public long stime(){  return Long.parseLong(fields[14]);}  }
class C{  public RotateStrategyByDate(final String pattern){  m_format=new SimpleDateFormat(pattern);  m_date=new Date();  m_current=m_format.format(m_date);}  }
class C{  public boolean isUndoEnabled(){  return ((ArffTableModel)getModel()).isUndoEnabled();}  }
class C{  public GaussianBlurFilter(){  this(3);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.ANNOTATION__NAME:    return getName();case N4JSPackage.ANNOTATION__ARGS:  return getArgs();}return super.eGet(featureID,resolve,coreType);}  }
class C{  protected StorageSystem queryRegisteredSystem(URI id){  ArgValidator.checkUri(id);  StorageSystem system=_dbClient.queryObject(StorageSystem.class,id);  ArgValidator.checkEntityNotNull(system,id,isIdEmbeddedInURL(id));  if (!RegistrationStatus.REGISTERED.toString().equalsIgnoreCase(system.getRegistrationStatus())) {    throw APIException.badRequests.resourceNotRegistered(StorageSystem.class.getSimpleName(),id);  }  return system;}  }
class C{  private void validateServer() throws ValidationException {  String title=((EditText)findViewById(R.id.title)).getText().toString();  String host=((EditText)findViewById(R.id.host)).getText().toString();  String port=((EditText)findViewById(R.id.port)).getText().toString();  String charset=((Spinner)findViewById(R.id.charset)).getSelectedItem().toString();  if (title.trim().equals("")) {    throw new ValidationException(getResources().getString(R.string.validation_blank_title));  }  if (host.trim().equals("")) {    throw new ValidationException(getResources().getString(R.string.validation_blank_host));  }  try {    Integer.parseInt(port);  } catch (  NumberFormatException e) {    throw new ValidationException(getResources().getString(R.string.validation_invalid_port));  }  try {    "".getBytes(charset);  } catch (  UnsupportedEncodingException e) {    throw new ValidationException(getResources().getString(R.string.validation_unsupported_charset));  }  Database db=new Database(this);  if (db.isTitleUsed(title) && (server == null || !server.getTitle().equals(title))) {    db.close();    throw new ValidationException(getResources().getString(R.string.validation_title_used));  }  db.close();}  }
class C{  public static boolean shouldCap(Capitalize cap,CharSequence cs,int off){  int i;  char c;  if (cap == Capitalize.NONE) {    return false;  }  if (cap == Capitalize.CHARACTERS) {    return true;  }  return TextUtils.getCapsMode(cs,off,cap == Capitalize.WORDS ? TextUtils.CAP_MODE_WORDS : TextUtils.CAP_MODE_SENTENCES) != 0;}  }
class C{  public static GrantorInfo becomeGrantor(DLockService service,int dlsSerialNumber,InternalDistributedMember oldTurk,InternalDistributedSystem sys){  return basicOp(-1,service,dlsSerialNumber,sys,oldTurk,BECOME_OP);}  }
class C{  public QueueReader<MethodOrMethodContext> listener(){  return allReachables.clone();}  }
class C{  public static long toLong(int[] ints){  return toLong(ints[0],ints[1]);}  }
class C{  public BreakdownChartPanelMulti(String title,String unitName,ChangingCategoryDatasetWithTTG dataset,ChartLocker locker){  super(title,unitName);  this.dataset=new SwappingCategoryDatasetWithTTG(dataset);  this.locker=locker;  addChart();}  }
class C{  public SmsMwiMessage(String text,SmsAlphabet alphabet){  super(text,SmsDcs.getGeneralDataCodingDcs(alphabet,SmsMsgClass.CLASS_UNKNOWN));}  }
class C{  public static void forceAddWorld(int dimensionId,WorldServer worldServer){  worldByDimensionId.put(dimensionId,worldServer);  weakWorldByWorld.put(worldServer,worldServer);  ((IMixinMinecraftServer)SpongeImpl.getServer()).getWorldTickTimes().put(dimensionId,new long[100]);}  }
class C{  private void recordComputeEvent(ComputeSystem computeSystem,OperationTypeEnum typeEnum,boolean status){  RecordableBourneEvent event=new RecordableBourneEvent(typeEnum.getEvType(status),null,URI.create("ViPR-User"),null,null,EVENT_SERVICE_TYPE,computeSystem.getId(),typeEnum.getDescription(),System.currentTimeMillis(),null,computeSystem.getNativeGuid(),RecordType.Event.name(),EVENT_SERVICE_SOURCE,"","");  try {    _evtMgr.recordEvents(event);  } catch (  Exception ex) {    _log.error("Failed to record event. Event description: {}. Error: {}.",typeEnum.getDescription(),ex);  }}  }
class C{  static int intSum(CharBuffer cb){  int sum=0;  cb.mark();  while (cb.hasRemaining()) {    sum+=cb.get();  }  cb.reset();  return sum;}  }
class C{  @Override public void computeNonVolatileArea(){  GenericPhysicalRegisterSet phys=ir.regpool.getPhysicalRegisterSet();  if (ir.compiledMethod.isSaveVolatile()) {    int numGprNv=PhysicalRegisterSet.getNumberOfNonvolatileGPRs();    ir.compiledMethod.setNumberOfNonvolatileGPRs((short)numGprNv);    frameSize+=numGprNv * BYTES_IN_ADDRESS;    int numFprNv=PhysicalRegisterSet.getNumberOfNonvolatileFPRs();    ir.compiledMethod.setNumberOfNonvolatileFPRs((short)numFprNv);    frameSize+=numFprNv * BYTES_IN_DOUBLE;    setFrameRequired();    int i=0;    for (Enumeration<Register> e=phys.enumerateVolatileGPRs(); e.hasMoreElements(); i++) {      e.nextElement();      saveVolatileGPRLocation[i]=allocateNewSpillLocation(INT_REG);    }    i=0;    for (Enumeration<Register> e=phys.enumerateNonvolatileGPRs(); e.hasMoreElements(); i++) {      e.nextElement();      nonVolatileGPRLocation[i]=allocateNewSpillLocation(INT_REG);    }    saveXERLocation=allocateNewSpillLocation(INT_REG);    saveCTRLocation=allocateNewSpillLocation(INT_REG);    i=0;    for (Enumeration<Register> e=phys.enumerateVolatileFPRs(); e.hasMoreElements(); i++) {      e.nextElement();      saveVolatileFPRLocation[i]=allocateNewSpillLocation(DOUBLE_REG);    }    int gprOffset=getNonvolatileGPROffset(0);    ir.compiledMethod.setUnsignedNonVolatileOffset(gprOffset);  } else {    int numGprNv=0;    int i=0;    for (Enumeration<Register> e=phys.enumerateNonvolatileGPRs(); e.hasMoreElements(); ) {      Register r=e.nextElement();      if (r.isTouched()) {        nonVolatileGPRLocation[i++]=allocateNewSpillLocation(INT_REG);        numGprNv++;      }    }    i=0;    int numFprNv=0;    for (Enumeration<Register> e=phys.enumerateNonvolatileFPRs(); e.hasMoreElements(); ) {      Register r=e.nextElement();      if (r.isTouched()) {        nonVolatileFPRLocation[i++]=allocateNewSpillLocation(DOUBLE_REG);        numFprNv++;      }    }    ir.compiledMethod.setNumberOfNonvolatileGPRs((short)numGprNv);    ir.compiledMethod.setNumberOfNonvolatileFPRs((short)numFprNv);    if (numGprNv > 0 || numFprNv > 0) {      int gprOffset=getNonvolatileGPROffset(0);      ir.compiledMethod.setUnsignedNonVolatileOffset(gprOffset);      setFrameRequired();    } else {      ir.compiledMethod.setUnsignedNonVolatileOffset(0);    }  }  frameSize=align(frameSize,STACKFRAME_ALIGNMENT);}  }
class C{  protected void onTime(String sourceNick,String sourceLogin,String sourceHostname,String target){  this.sendRawLine("NOTICE " + sourceNick + " :\u0001TIME "+ new Date().toString()+ "\u0001");}  }
class C{  private void readObject(ObjectInputStream input) throws IOException, ClassNotFoundException {  input.defaultReadObject();  doReadObject(input);}  }
class C{  private boolean defaultResolve(){switch (typeString.charAt(0)) {case 'I':    type=int.class;  return true;case 'B':type=byte.class;return true;case 'C':type=char.class;return true;case 'S':type=short.class;return true;case 'Z':type=boolean.class;return true;case 'J':type=long.class;return true;case 'F':type=float.class;return true;case 'D':type=double.class;return true;default :type=Object.class;return false;}}  }
class C{  private ArcInfoASCGridExporter(){}  }
class C{  public static void writeUint8(OutputStream theOs,int theValue) throws IOException {  theOs.write(theValue);}  }
class C{  public static void revealEditText(EditText text){  int cx=text.getRight() - 30;  int cy=text.getBottom() - 60;  int finalRadius=Math.max(text.getWidth(),text.getHeight());  Animator anim=ViewAnimationUtils.createCircularReveal(text,cx,cy,0,finalRadius);  text.setVisibility(View.VISIBLE);  anim.start();}  }
class C{  @Override public void receive(RealBuffer buffer){  if (mAudioPacketListener != null && mSquelchState == SquelchState.UNSQUELCH) {    mAudioDecimationFilter.receive(buffer);  }}  }
class C{  public int size(){  return count;}  }
class C{  public void copyBlock(Block block){  block.getNewCopy().ifPresent(null);}  }
class C{  @ApiMethod(httpMethod="POST") public final CheckIn insertCheckIn(final CheckIn checkin,final User user) throws ServiceException {  EndpointUtil.throwIfNotAuthenticated(user);  checkin.setUserEmail(user.getEmail());  checkin.setCheckInDate(new Date());  checkin.clearKey();  ofy().save().entity(checkin).now();  pushPersonalizedOffers(checkin.getPlaceId(),user);  return checkin;}  }
class C{  NodeTextRep renameInNodeText(ExprOrOpArgNode sn,NodeTextRep nodeTextRep,String prefix,String postPrefix){  NodeTextRep result=nodeTextRep;  if (prefix.equals("") && postPrefix.equals("")) {    return result;  }  boolean errorFound=false;  String[] trialPrefixes=DefPrefixes(postPrefix);  for (int i=0; i < trialPrefixes.length; i++) {    trialPrefixes[i]=prefix + trialPrefixes[i];  }  ExprOrOpArgNode[] opUses=ResourceHelper.getUsesOfUserDefinedOps(sn);  for (int i=0; i < opUses.length; i++) {    if (opUses[i] instanceof OpApplNode) {      OpDefNode opDef=(OpDefNode)((OpApplNode)opUses[i]).getOperator();      String opDefName=opDef.getName().toString();      ExprNode opDefBody=opDef.getBody();      boolean notFound=true;      int j=0;      while (notFound && j < trialPrefixes.length) {        OpDefNode symNode=stringToOpDef(trialPrefixes[j] + opDefName);        if (symNode != null) {          ExprNode foundOpDefBody=symNode.getBody();          ExprNode body=opDefBody;          while (notFound && (foundOpDefBody instanceof SubstInNode)) {            notFound=body != foundOpDefBody;            foundOpDefBody=((SubstInNode)foundOpDefBody).getBody();          }          if (notFound) {            notFound=body != foundOpDefBody;          }        }        if (notFound) {          j++;        }      }      if (notFound) {        if (!errorFound) {          MessageDialog.openError(UIHelper.getShellProvider().getShell(),"Decompose Proof Command","Something that should not happen has occurred in " + "line 5008 of NewDecomposeProofHandler.");          errorFound=true;        }      } else {        result=prependToOpName(result,sn,(OpApplNode)opUses[i],trialPrefixes[j]);      }    } else     if ((opUses[i] instanceof OpArgNode) && (trialPrefixes.length > 1)) {      MessageDialog.openError(UIHelper.getShellProvider().getShell(),"Decompose Proof Command","A use of " + ((OpArgNode)opUses[i]).getName() + " as an operator name may require manual renaming.");    } else {      if (!errorFound) {        MessageDialog.openError(UIHelper.getShellProvider().getShell(),"Decompose Proof Command","Something that should not happen has occurred in " + "line 5028 of NewDecomposeProofHandler.");        errorFound=true;      }    }  }  return result;}  }
class C{  public void push(final int value){  if (value >= -1 && value <= 5) {    mv.visitInsn(Opcodes.ICONST_0 + value);  } else   if (value >= Byte.MIN_VALUE && value <= Byte.MAX_VALUE) {    mv.visitIntInsn(Opcodes.BIPUSH,value);  } else   if (value >= Short.MIN_VALUE && value <= Short.MAX_VALUE) {    mv.visitIntInsn(Opcodes.SIPUSH,value);  } else {    mv.visitLdcInsn(value);  }}  }
class C{  public CompilationUnitChange(String name,ICompilationUnit cunit){  super(name,getFile(cunit));  Assert.isNotNull(cunit);  fCUnit=cunit;  setTextType("java");}  }
class C{  public ModbusIOException(boolean b){  eof=b;}  }
class C{  public DLSet(ASN1Encodable[] a){  super(a,false);}  }
class C{  public void onMessageReceived(SipRequest message){  try {    boolean logActivated=sLogger.isActivated();    if (logActivated) {      sLogger.debug("Receive terms message");    }    if (logActivated) {      sLogger.info("Send 200 OK");    }    final ImsModule imsModule=getImsModule();    imsModule.getSipManager().sendSipResponse(SipMessageFactory.createResponse(message,IdGenerator.getIdentifier(),Response.OK));    String lang=Locale.getDefault().getLanguage();    String remoteId=getRemoteIdentity(message);    PhoneNumber number=ContactUtil.getValidPhoneNumberFromUri(remoteId);    if (number == null) {      if (logActivated) {        sLogger.error("Can't parse contact : ".concat(remoteId));      }      return;    }    ContactId contact=ContactUtil.createContactIdFromValidatedData(number);    final String contentType=message.getContentType();    if (REQUEST_MIME_TYPE.equals(contentType)) {      InputSource input=new InputSource(new ByteArrayInputStream(message.getContentBytes()));      TermsRequestParser parser=new TermsRequestParser(input,lang,mRcsSettings);      imsModule.getCore().getListener().onUserConfirmationRequest(contact,parser.getId(),parser.getType(),parser.getPin(),parser.getSubject(),parser.getText(),parser.getButtonAccept(),parser.getButtonReject(),parser.getTimeout());    } else     if (ACK_MIME_TYPE.equals(contentType)) {      InputSource input=new InputSource(new ByteArrayInputStream(message.getContentBytes()));      TermsAckParser parser=new TermsAckParser(input);      imsModule.getCore().getListener().onUserConfirmationAck(contact,parser.getId(),parser.getStatus(),parser.getSubject(),parser.getText());    } else     if (USER_NOTIFICATION_MIME_TYPE.equals(contentType)) {      InputSource input=new InputSource(new ByteArrayInputStream(message.getContentBytes()));      EndUserNotificationParser parser=new EndUserNotificationParser(input,lang);      imsModule.getCore().getListener().onUserNotification(contact,parser.getId(),parser.getSubject(),parser.getText(),parser.getButtonOk());    } else {      if (logActivated) {        sLogger.warn("Unknown terms request ".concat(contentType));      }    }  } catch (  NetworkException e) {    if (sLogger.isActivated()) {      sLogger.debug("Failed to receive terms request! (" + e.getMessage() + ")");    }  }catch (  PayloadException e) {    sLogger.error("Failed to receive terms request!",e);  }catch (  RuntimeException e) {    sLogger.error("Failed to receive terms request!",e);  }}  }
class C{  public void updateTable(PosOrderModel order){  int C_Order_ID=0;  if (order != null)   C_Order_ID=order.getC_Order_ID();  if (C_Order_ID == 0) {    p_posPanel.f_curLine.m_table.loadTable(new PO[0]);    p_posPanel.f_order.setSums(null);  }  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(m_sql,null);    pstmt.setInt(1,C_Order_ID);    rs=pstmt.executeQuery();    m_table.loadTable(rs);  } catch (  Exception e) {    log.log(Level.SEVERE,m_sql,e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  for (int i=0; i < m_table.getRowCount(); i++) {    IDColumn key=(IDColumn)m_table.getModel().getValueAt(i,0);    if (key != null && orderLineId > 0 && key.getRecord_ID() == orderLineId) {      m_table.getSelectionModel().setSelectionInterval(i,i);      break;    }  }  enableButtons();  p_posPanel.f_order.setSums(order);}  }
class C{  public String dontReplaceMissingTipText(){  return "Turn off global replacement of missing values";}  }
class C{  public HistogramBin(double startBoundary,double endBoundary){  if (startBoundary > endBoundary) {    throw new IllegalArgumentException("HistogramBin():  startBoundary > endBoundary.");  }  this.count=0;  this.startBoundary=startBoundary;  this.endBoundary=endBoundary;}  }
class C{  protected void appendFieldSeparator(final StringBuffer buffer){  buffer.append(fieldSeparator);}  }
class C{  public void loadEntities(OperationGroup updateGroup,OperationGroup deleteGroup,OperationGroup dependsOnGroup) throws SortServiceProviderException, SortQueryException {  BatchEntityLoader batchLoader=new BatchEntityLoader();  LOG.debug("Reordering entities for database retrival to reduce table deadlock scenarios.");  OperationGroup mergedAndOptimized=dependsOnGroup.mergedCopy(updateGroup,deleteGroup.reverse()).optimizedForInsertCopy();  batchLoader.addEntities(mergedAndOptimized.getEntities());  LOG.debug("-------------------------------");  LOG.debug("Performing database load ...");  batchLoader.load();}  }
class C{  private void writeClip(){  Shape clip=getClip();  if (clip == null) {    return;  }  write("<clipPath id=\"",nextClipId(),"\">");  writeUnclippedShape(clip);  write("/>");  writeln("</clipPath>");}  }
class C{  public RegionFactory<K,V> addCacheListener(CacheListener<K,V> aListener){  this.attrsFactory.addCacheListener(aListener);  return this;}  }
class C{  public void follow(int followerId,int followeeId){  if (followMap.get(followerId) == null) {    Map<Integer,Integer> map=new HashMap<Integer,Integer>();    map.put(followerId,1);    followMap.put(followerId,map);  }  followMap.get(followerId).put(followeeId,1);}  }
class C{  @Override public void invokeCommand(int argLength,String[] args,String command){  Profiler inst=Profiler.INSTANCE;  Logger log=Toast.log();  List<String> actualArgs=new LinkedList<>();  List<String> switches=new LinkedList<>();  for (  String a : args) {    if (a.startsWith("-"))     switches.add(a); else     actualArgs.add(a);  }  if (switches.contains("--json") || switches.contains("-j")) {    String json=JsonWriter.indent("\t").string().value(inst.toJSON()).done();    System.out.println(json);    return;  }  if (switches.contains("--export") || switches.contains("-e")) {    if (switches.contains("-o"))     inst.export(); else {      if (actualArgs.size() > 0) {        inst.export(actualArgs.get(0));      } else       inst.export(new SimpleDateFormat("yyyy-MM-dd_hh-mm-ss").format(new Date()));    }    return;  }  log.info("<-- MAIN PROFILER DUMP -->");  if (actualArgs.size() == 0) {    for (    ProfilerSection section : inst.sections()) {      printSection(section,0,log);    }  } else {    ProfilerSection lastSec=null;    for (    String arg : actualArgs) {      if (lastSec == null) {        lastSec=inst.section(arg);      } else {        lastSec=lastSec.section(arg);      }    }    printSection(lastSec,0,log);  }  log.info("<-- END PROFILER DUMP -->");}  }
class C{  static public void saveData(Context context,String key,boolean val){  context.getSharedPreferences(PREF_APP,Context.MODE_PRIVATE).edit().putBoolean(key,val).apply();}  }
class C{  private void downloadFormList(){  ConnectivityManager connectivityManager=(ConnectivityManager)getSystemService(Context.CONNECTIVITY_SERVICE);  NetworkInfo ni=connectivityManager.getActiveNetworkInfo();  if (ni == null || !ni.isConnected()) {    Toast.makeText(this,R.string.no_connection,Toast.LENGTH_SHORT).show();  } else {    mFormNamesAndURLs=new HashMap<String,FormDetails>();    if (mProgressDialog != null) {      mProgressDialog.setMessage(getString(R.string.please_wait));    }    showDialog(PROGRESS_DIALOG);    if (mDownloadFormListTask != null && mDownloadFormListTask.getStatus() != AsyncTask.Status.FINISHED) {      return;    } else     if (mDownloadFormListTask != null) {      mDownloadFormListTask.setDownloaderListener(null);      mDownloadFormListTask.cancel(true);      mDownloadFormListTask=null;    }    mDownloadFormListTask=new DownloadFormListTask();    mDownloadFormListTask.setDownloaderListener(this);    mDownloadFormListTask.execute();  }}  }
class C{  public static String nullToEmpty(@Nullable String string){  return (string == null) ? "" : string;}  }
class C{  public static String encodeClass(int c_[]){  String c="c_";  for (int j=0; j < c_.length; j++) {    c=c + c_[j] + "+";  }  c=c.substring(0,c.length() - 1);  return c;}  }
class C{  @Override public Size2D arrange(Graphics2D g2,RectangleConstraint constraint){  Size2D result=new Size2D();  fetchLegendItems();  if (this.items.isEmpty()) {    return result;  }  BlockContainer container=this.wrapper;  if (container == null) {    container=this.items;  }  RectangleConstraint c=toContentConstraint(constraint);  Size2D size=container.arrange(g2,c);  result.height=calculateTotalHeight(size.height);  result.width=calculateTotalWidth(size.width);  return result;}  }
class C{  @Override protected Money handleTransactionThatIsOnTimePaymentOfInstallment(final LoanRepaymentScheduleInstallment currentInstallment,final LoanTransaction loanTransaction,final Money transactionAmountUnprocessed,List<LoanTransactionToRepaymentScheduleMapping> transactionMappings){  final LocalDate transactionDate=loanTransaction.getTransactionDate();  final MonetaryCurrency currency=transactionAmountUnprocessed.getCurrency();  Money transactionAmountRemaining=transactionAmountUnprocessed;  Money principalPortion=Money.zero(transactionAmountRemaining.getCurrency());  Money interestPortion=Money.zero(transactionAmountRemaining.getCurrency());  Money feeChargesPortion=Money.zero(transactionAmountRemaining.getCurrency());  Money penaltyChargesPortion=Money.zero(transactionAmountRemaining.getCurrency());  if (loanTransaction.isChargesWaiver()) {    penaltyChargesPortion=currentInstallment.waivePenaltyChargesComponent(transactionDate,loanTransaction.getPenaltyChargesPortion(currency));    transactionAmountRemaining=transactionAmountRemaining.minus(penaltyChargesPortion);    feeChargesPortion=currentInstallment.waiveFeeChargesComponent(transactionDate,loanTransaction.getFeeChargesPortion(currency));    transactionAmountRemaining=transactionAmountRemaining.minus(feeChargesPortion);  } else   if (loanTransaction.isInterestWaiver()) {    interestPortion=currentInstallment.waiveInterestComponent(transactionDate,transactionAmountRemaining);    transactionAmountRemaining=transactionAmountRemaining.minus(interestPortion);    loanTransaction.updateComponents(principalPortion,interestPortion,feeChargesPortion,penaltyChargesPortion);  } else   if (loanTransaction.isChargePayment()) {    if (loanTransaction.isPenaltyPayment()) {      penaltyChargesPortion=currentInstallment.payPenaltyChargesComponent(transactionDate,transactionAmountRemaining);      transactionAmountRemaining=transactionAmountRemaining.minus(penaltyChargesPortion);    } else {      feeChargesPortion=currentInstallment.payFeeChargesComponent(transactionDate,transactionAmountRemaining);      transactionAmountRemaining=transactionAmountRemaining.minus(feeChargesPortion);    }  } else {    principalPortion=currentInstallment.payPrincipalComponent(transactionDate,transactionAmountRemaining);    transactionAmountRemaining=transactionAmountRemaining.minus(principalPortion);    interestPortion=currentInstallment.payInterestComponent(transactionDate,transactionAmountRemaining);    transactionAmountRemaining=transactionAmountRemaining.minus(interestPortion);    feeChargesPortion=currentInstallment.payFeeChargesComponent(transactionDate,transactionAmountRemaining);    transactionAmountRemaining=transactionAmountRemaining.minus(feeChargesPortion);    penaltyChargesPortion=currentInstallment.payPenaltyChargesComponent(transactionDate,transactionAmountRemaining);    transactionAmountRemaining=transactionAmountRemaining.minus(penaltyChargesPortion);  }  loanTransaction.updateComponents(principalPortion,interestPortion,feeChargesPortion,penaltyChargesPortion);  if (principalPortion.plus(interestPortion).plus(feeChargesPortion).plus(penaltyChargesPortion).isGreaterThanZero()) {    transactionMappings.add(LoanTransactionToRepaymentScheduleMapping.createFrom(currentInstallment,principalPortion,interestPortion,feeChargesPortion,penaltyChargesPortion));  }  return transactionAmountRemaining;}  }
class C{  public void store(short value){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  public boolean equals(Object obj){  if (obj == this)   return true;  if (!(obj instanceof ServicePermission))   return false;  ServicePermission that=(ServicePermission)obj;  return ((this.mask & that.mask) == that.mask) && this.getName().equals(that.getName());}  }
class C{  protected void injectIntoVolumeInformationContainer(UnManagedVolume storageVolumeInfo,String infoKey,CIMObjectPath path){  String value=getCIMPropertyValue(path,infoKey);  String charactersticName=SupportedVolumeInformation.getVolumeInformation(infoKey);  if (null != value && null != charactersticName) {    StringSet valueSet=new StringSet();    valueSet.add(value);    storageVolumeInfo.putVolumeInfo(charactersticName,valueSet);  }}  }
class C{  public void reset(String... labelValues){  MetricsUtils.checkLabelValuesLength(this,labelValues);  reset(Instant.now(),ImmutableList.copyOf(labelValues));}  }
class C{  public void accept(String key,String val,Long arg) throws ConfigurationException {  if (arg < min || arg > max) {    throw new ConfigurationException(key,val,"Must be in [" + min + ":"+ max+ "]");  }}  }
class C{  public TagAllocationModel(){  this.ntw=new SparseCounter<String>();  this.nw=new Counter<String>();}  }
class C{  protected void addFeaturePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_FeatureCall_feature_feature"),getString("_UI_PropertyDescriptor_description","_UI_FeatureCall_feature_feature","_UI_FeatureCall_type"),ExpressionsPackage.Literals.FEATURE_CALL__FEATURE,true,false,true,null,null,null));}  }
class C{  public void testToBigIntegerPos2(){  String a="123809648392384754573567356745735.63567890295784902768787678287E+15";  BigInteger bNumber=new BigInteger("123809648392384754573567356745735635678902957849");  BigDecimal aNumber=new BigDecimal(a);  BigInteger result=aNumber.toBigInteger();  assertTrue("incorrect value",result.equals(bNumber));}  }
class C{  public void dragMouseMoved(DragSourceDragEvent dsde){}  }
class C{  public GeneralAndersonDarlingTest(List<Double> data,RealDistribution dist){  if (dist == null) {    throw new NullPointerException();  }  this.dist=dist;  Collections.sort(data);  this.data=data;  runTest();}  }
class C{  public static void main(String[] args){  JFrame frame=new JFrame(SliderDemo.class.getAnnotation(DemoProperties.class).value());  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  frame.getContentPane().add(new SliderDemo());  frame.setPreferredSize(new Dimension(800,600));  frame.pack();  frame.setLocationRelativeTo(null);  frame.setVisible(true);}  }
class C{  public int hashCode(){  return a.hashCode() + b.hashCode();}  }
class C{  public void addProvider(String name,ContentProvider provider){  mProviders.put(name,provider);}  }
class C{  private void synchronizeDebugger(final IDebugger oldDebugger,final IDebugger newDebugger){  if (oldDebugger != null) {    oldDebugger.getProcessManager().removeListener(m_internalProcessListener);  }  if (newDebugger != null) {    final TargetInformation targetInformation=newDebugger.getProcessManager().getTargetInformation();    if (targetInformation != null) {      updateGuiFromOptions(targetInformation.getDebuggerOptions());    }    newDebugger.getProcessManager().addListener(m_internalProcessListener);  }  updateGui();}  }
class C{  @Override public void clean(){  m_storage=null;  m_keys=null;}  }
class C{  @Override public synchronized void clear(){  File[] files=mRootDirectory.listFiles();  if (files != null) {    for (    File file : files) {      file.delete();    }  }  mEntries.clear();  mTotalSize=0;  VolleyLog.d("Cache cleared.");}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader1=null;  String inputHeader2=null;  String outputHeader=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader1=args[0];  inputHeader2=args[1];  outputHeader=args[2];  if (inputHeader1.isEmpty() || outputHeader.isEmpty() || inputHeader2.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    float progress=0;    int numCells1=0;    int numCells2=0;    int i=0;    WhiteboxRasterInfo inputFile1=new WhiteboxRasterInfo(inputHeader1);    int rows1=inputFile1.getNumberRows();    int cols1=inputFile1.getNumberColumns();    double noData1=inputFile1.getNoDataValue();    WhiteboxRasterInfo inputFile2=new WhiteboxRasterInfo(inputHeader2);    int rows2=inputFile2.getNumberRows();    int cols2=inputFile2.getNumberColumns();    double noData2=inputFile2.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData1);    outputFile.setPreferredPalette(inputFile1.getPreferredPalette());    double minValue1=inputFile1.getMinimumValue();    double maxValue1=inputFile1.getMaximumValue();    int numBins1=Math.max(2 * (int)Math.ceil(maxValue1 - minValue1 + 1),(int)Math.ceil(Math.pow(rows1 * cols1,1.0 / 3)));    double binSize=(maxValue1 - minValue1) / numBins1;    long[] histogram=new long[numBins1];    int binNum;    int numBinsLessOne1=numBins1 - 1;    double[] data;    updateProgress("Loop 1 of 3: ",0);    for (row=0; row < rows1; row++) {      data=inputFile1.getRowValues(row);      for (col=0; col < cols1; col++) {        z=data[col];        if (z != noData1) {          numCells1++;          binNum=(int)((z - minValue1) / binSize);          if (binNum > numBinsLessOne1) {            binNum=numBinsLessOne1;          }          histogram[binNum]++;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows1 - 1));      updateProgress("Loop 1 of 3: ",(int)progress);    }    updateProgress("Loop 2 of 3: ",0);    double[] cdf=new double[numBins1];    cdf[0]=histogram[0];    for (i=1; i < numBins1; i++) {      cdf[i]=cdf[i - 1] + histogram[i];    }    for (i=0; i < numBins1; i++) {      cdf[i]=cdf[i] / numCells1;    }    double minValue2=inputFile2.getMinimumValue();    double maxValue2=inputFile2.getMaximumValue();    int numBins2=Math.max(2 * (int)Math.ceil(maxValue2 - minValue2 + 1),(int)Math.ceil(Math.pow(rows2 * cols2,1.0 / 3)));    int numBinsLessOne2=numBins2 - 1;    long[] histogram2=new long[numBins2];    double[][] referenceCDF=new double[numBins2][2];    for (row=0; row < rows2; row++) {      data=inputFile2.getRowValues(row);      for (col=0; col < cols2; col++) {        z=data[col];        if (z != noData2) {          numCells2++;          binNum=(int)((z - minValue2) / binSize);          if (binNum > numBinsLessOne2) {            binNum=numBinsLessOne2;          }          histogram2[binNum]++;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows1 - 1));      updateProgress("Loop 2 of 3: ",(int)progress);    }    referenceCDF[0][1]=histogram2[0];    for (i=1; i < numBins2; i++) {      referenceCDF[i][1]=referenceCDF[i - 1][1] + histogram2[i];    }    for (i=0; i < numBins2; i++) {      referenceCDF[i][0]=minValue2 + (i / (float)numBins2) * (maxValue2 - minValue2);      referenceCDF[i][1]=referenceCDF[i][1] / numCells2;    }    int[] startingVals=new int[11];    double pVal=0;    for (i=0; i < numBins2; i++) {      pVal=referenceCDF[i][1];      if (pVal < 0.1) {        startingVals[1]=i;      }      if (pVal < 0.2) {        startingVals[2]=i;      }      if (pVal < 0.3) {        startingVals[3]=i;      }      if (pVal < 0.4) {        startingVals[4]=i;      }      if (pVal < 0.5) {        startingVals[5]=i;      }      if (pVal < 0.6) {        startingVals[6]=i;      }      if (pVal < 0.7) {        startingVals[7]=i;      }      if (pVal < 0.8) {        startingVals[8]=i;      }      if (pVal < 0.9) {        startingVals[9]=i;      }      if (pVal <= 1) {        startingVals[10]=i;      }    }    updateProgress("Loop 3 of 3: ",0);    int j=0;    double xVal=0;    double x1, x2, p1, p2;    for (row=0; row < rows1; row++) {      data=inputFile1.getRowValues(row);      for (col=0; col < cols1; col++) {        z=data[col];        if (z != noData1) {          binNum=(int)((z - minValue1) / binSize);          if (binNum > numBinsLessOne1) {            binNum=numBinsLessOne1;          }          pVal=cdf[binNum];          j=(int)(Math.floor(pVal * 10));          for (i=startingVals[j]; i < numBins2; i++) {            if (referenceCDF[i][1] > pVal) {              if (i > 0) {                x1=referenceCDF[i - 1][0];                x2=referenceCDF[i][0];                p1=referenceCDF[i - 1][1];                p2=referenceCDF[i][1];                if (p1 != p2) {                  xVal=x1 + ((x2 - x1) * ((pVal - p1) / (p2 - p1)));                } else {                  xVal=x1;                }              } else {                xVal=referenceCDF[i][0];              }              break;            }          }          outputFile.setValue(row,col,xVal);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows1 - 1));      updateProgress("Loop 3 of 3: ",(int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile1.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void engineUpdate(byte[] input,int offset,int len){  if (offset < 0 || len < 0 || (long)offset + len > input.length)   throw new ArrayIndexOutOfBoundsException();  int bufferNdx=(int)(count % BLOCK_LENGTH);  count+=len;  int partLen=BLOCK_LENGTH - bufferNdx;  int i=0;  if (len >= partLen) {    System.arraycopy(input,offset,buffer,bufferNdx,partLen);    transform(buffer,0);    for (i=partLen; i + BLOCK_LENGTH - 1 < len; i+=BLOCK_LENGTH)     transform(input,offset + i);    bufferNdx=0;  }  if (i < len)   System.arraycopy(input,offset + i,buffer,bufferNdx,len - i);}  }
class C{  public boolean isTreasure(){  return impl.treasure;}  }
class C{  private void releaseLUSEVolumesIfPresent(String systemObjectID,Set<String> logicalUnitIdList){  if (null != logicalUnitIdList && !logicalUnitIdList.isEmpty()) {    for (    String logicalUnitObjectId : logicalUnitIdList) {      try {        LogicalUnit logicalUnit=getLogicalUnitInfo(systemObjectID,logicalUnitObjectId);        if (null == logicalUnit || logicalUnit.getComposite() == 0) {          continue;        }        if (logicalUnit.getComposite() == 1) {          releaseLUSE(systemObjectID,logicalUnitObjectId);        }      } catch (      Exception e) {        log.error(e.getMessage(),e);      }    }  }}  }
class C{  public void start(final CharSequence message){  if (message != null)   logger.log(priority,message);  start=lastLog=System.currentTimeMillis();  count=0;  stop=-1;}  }
class C{  public final void clearRange(int startIndex,int endIndex){  buffer.subList(startIndex,endIndex).clear();}  }
class C{  synchronized void checkEnlistBeforeUse(CompositeTransaction ct) throws InvalidSessionHandleStateException, UnexpectedTransactionContextException {  TransactionContextStateHandler nextState=state.checkEnlistBeforeUse(ct);  setState(nextState);}  }
class C{  public KeyUsageExtension(BitArray bitString) throws IOException {  this.bitString=bitString.toBooleanArray();  this.extensionId=PKIXExtensions.KeyUsage_Id;  this.critical=true;  encodeThis();}  }
class C{  @Override public void cleanup(){  stop();}  }
class C{  public synchronized void update(Object[][] insertStream,Object[][] removeStream){  isInvoked=true;  insertStreamList.add(insertStream);  removeStreamList.add(insertStream);}  }
class C{  public void putWORD(int uint16){  put((byte)(uint16 & 0xFF));  put((byte)((uint16 >> 8) & 0xFF));}  }
class C{  static int testSinh(){  int failures=0;  double[][] testCases={{0.0625,0.06254069805219182172183988501029229},{0.1250,0.12532577524111545698205754229137154},{0.1875,0.18860056562029018382047025055167585},{0.2500,0.25261231680816830791412515054205787},{0.3125,0.31761115611357728583959867611490292},{0.3750,0.38385106791361456875429567642050245},{0.4375,0.45159088610312053032509815226723017},{0.5000,0.52109530549374736162242562641149155},{0.5625,0.59263591611468777373870867338492247},{0.6250,0.66649226445661608227260655608302908},{0.6875,0.74295294580567543571442036910465007},{0.7500,0.82231673193582998070366163444691386},{0.8125,0.90489373856606433650504536421491368},{0.8750,0.99100663714429475605317427568995231},{0.9375,1.08099191569306394011007867453992548},{1.0000,1.17520119364380145688238185059560082},{1.0625,1.27400259579739321279181130344911907},{1.1250,1.37778219077984075760379987065228373},{1.1875,1.48694549961380717221109202361777593},{1.2500,1.60191908030082563790283030151221415},{1.3125,1.72315219460596010219069206464391528},{1.3750,1.85111856355791532419998548438506416},{1.4375,1.98631821852425112898943304217629457},{1.5000,2.12927945509481749683438749467763195},{1.5625,2.28056089740825247058075476705718764},{1.6250,2.44075368098794353221372986997161132},{1.6875,2.61048376261693140366028569794027603},{1.7500,2.79041436627764265509289122308816092},{1.8125,2.98124857471401377943765253243875520},{1.8750,3.18373207674259205101326780071803724},{1.9375,3.39865608104779099764440244167531810},{2.0000,3.62686040784701876766821398280126192},{2.0625,3.86923677050642806693938384073620450},{2.1250,4.12673225993027252260441410537905269},{2.1875,4.40035304533919660406976249684469164},{2.2500,4.69116830589833069188357567763552003},{2.3125,5.00031440855811351554075363240262157},{2.3750,5.32899934843284576394645856548481489},{2.4375,5.67850746906785056212578751630266858},{2.5000,6.05020448103978732145032363835040319},{2.5625,6.44554279850040875063706020260185553},{2.6250,6.86606721451642172826145238779845813},{2.6875,7.31342093738196587585692115636603571},{2.7500,7.78935201149073201875513401029935330},{2.8125,8.29572014785741787167717932988491961},{2.8750,8.83450399097893197351853322827892144},{2.9375,9.40780885043076394429977972921690859},{3.0000,10.01787492740990189897459361946582867},{3.0625,10.66708606836969224165124519209968368},{3.1250,11.35797907995166028304704128775698426},{3.1875,12.09325364161259019614431093344260209},{3.2500,12.87578285468067003959660391705481220},{3.3125,13.70862446906136798063935858393686525},{3.3750,14.59503283146163690015482636921657975},{3.4375,15.53847160182039311025096666980558478},{3.5000,16.54262728763499762495673152901249743},{3.5625,17.61142364906941482858466494889121694},{3.6250,18.74903703113232171399165788088277979},{3.6875,19.95991268283598684128844120984214675},{3.7500,21.24878212710338697364101071825171163},{3.8125,22.62068164929685091969259499078125023},{3.8750,24.08097197661255803883403419733891573},{3.9375,25.63535922523855307175060244757748997},{4.0000,27.28991719712775244890827159079382096},{4.0625,29.05111111351106713777825462100160185},{4.1250,30.92582287788986031725487699744107092},{4.1875,32.92137796722343190618721270937061472},{4.2500,35.04557405638942942322929652461901154},{4.3125,37.30671148776788628118833357170042385},{4.3750,39.71362570500944929025069048612806024},{4.4375,42.27572177772344954814418332587050658},{4.5000,45.00301115199178562180965680564371424},{4.5625,47.90615077031205065685078058248081891},{4.6250,50.99648471383193131253995134526177467},{4.6875,54.28608852959281437757368957713936555},{4.7500,57.78781641599226874961859781628591635},{4.8125,61.51535145084362283008545918273109379},{4.8750,65.48325905829987165560146562921543361},{4.9375,69.70704392356508084094318094283346381},{5.0000,74.20321057778875897700947199606456364},{5.0625,78.98932788987998983462810080907521151},{5.1250,84.08409771724448958901392613147384951},{5.1875,89.50742798369883598816307922895346849},{5.2500,95.28051047011540739630959111303975956},{5.3125,101.42590362176666730633859252034238987},{5.3750,107.96762069594029162704530843962700133},{5.4375,114.93122359426386042048760580590182604},{5.5000,122.34392274639096192409774240457730721},{5.5625,130.23468343534638291488502321709913206},{5.6250,138.63433897999898233879574111119546728},{5.6875,147.57571121692522056519568264304815790},{5.7500,157.09373875244884423880085377625986165},{5.8125,167.22561348600435888568183143777868662},{5.8750,178.01092593829229887752609866133883987},{5.9375,189.49181995209921964640216682906501778},{6.0000,201.71315737027922812498206768797872263},{6.0625,214.72269333437984291483666459592578915},{6.1250,228.57126288889537420461281285729970085},{6.1875,243.31297962030799867970551767086092471},{6.2500,259.00544710710289911522315435345489966},{6.3125,275.70998400700299790136562219920451185},{6.3750,293.49186366095654566861661249898332253},{6.4375,312.42056915013535342987623229485223434},{6.5000,332.57006480258443156075705566965111346},{6.5625,354.01908521044116928437570109827956007},{6.6250,376.85144288706511933454985188849781703},{6.6875,401.15635576625530823119100750634165252},{6.7500,427.02879582326538080306830640235938517},{6.8125,454.56986017986077163530945733572724452},{6.8750,483.88716614351897894746751705315210621},{6.9375,515.09527172439720070161654727225752288},{7.0000,548.31612327324652237375611757601851598},{7.0625,583.67953198942753384680988096024373270},{7.1250,621.32368116099280160364794462812762880},{7.1875,661.39566611888784148449430491465857519},{7.2500,704.05206901515336623551137120663358760},{7.3125,749.45957067108712382864538206200700256},{7.3750,797.79560188617531521347351754559776282},{7.4375,849.24903675279739482863565789325699416},{7.5000,904.02093068584652953510919038935849651},{7.5625,962.32530605113249628368993221570636328},{7.6250,1024.38998846242707559349318193113614698},{7.6875,1090.45749701500081956792547346904792325},{7.7500,1160.78599193425808533255719118417856088},{7.8125,1235.65028334242796895820912936318532502},{7.8750,1315.34290508508890654067255740428824014},{7.9375,1400.17525781352742299995139486063802583},{8.0000,1490.47882578955018611587663903188144796},{8.0625,1586.60647216744061169450001100145859236},{8.1250,1688.93381781440241350635231605477507900},{8.1875,1797.86070905726094477721128358866360644},{8.2500,1913.81278009067446281883262689250118009},{8.3125,2037.24311615199935553277163192983440062},{8.3750,2168.63402396170125867037749369723761636},{8.4375,2308.49891634734644432370720900969004306},{8.5000,2457.38431841538268239359965370719928775},{8.5625,2615.87200310986940554256648824234335262},{8.6250,2784.58126450289932429469130598902487336},{8.6875,2964.17133769964321637973459949999057146},{8.7500,3155.34397481384944060352507473513108710},{8.8125,3358.84618707947841898217318996045550438},{8.8750,3575.47316381333288862617411467285480067},{8.9375,3806.07137963459383403903729660349293583},{9.0000,4051.54190208278996051522359589803425598},{9.0625,4312.84391255878980330955246931164633615},{9.1250,4590.99845434696991399363282718106006883},{9.1875,4887.09242236403719571363798584676797558},{9.2500,5202.28281022453561319352901552085348309},{9.3125,5537.80123121853803935727335892054791265},{9.3750,5894.95873086734181634245918412592155656},{9.4375,6275.15090986233399457103055108344546942},{9.5000,6679.86337740502119410058225086262108741},{9.5625,7110.67755625726876329967852256934334025},{9.6250,7569.27686218510919585241049433331592115},{9.6875,8057.45328194243077504648484392156371121},{9.7500,8577.11437549816065709098061006273039092},{9.8125,9130.29072986829727910801024120918114778},{9.8750,9719.14389367880274015504995181862860062},{9.9375,10345.97482346383208590278839409938269134},{10.0000,11013.23287470339337723652455484636420303}};  for (int i=0; i < testCases.length; i++) {    double[] testCase=testCases[i];    failures+=testSinhCaseWithUlpDiff(testCase[0],testCase[1],3.0);  }  double[][] specialTestCases={{0.0,0.0},{NaNd,NaNd},{Double.longBitsToDouble(0x7FF0000000000001L),NaNd},{Double.longBitsToDouble(0xFFF0000000000001L),NaNd},{Double.longBitsToDouble(0x7FF8555555555555L),NaNd},{Double.longBitsToDouble(0xFFF8555555555555L),NaNd},{Double.longBitsToDouble(0x7FFFFFFFFFFFFFFFL),NaNd},{Double.longBitsToDouble(0xFFFFFFFFFFFFFFFFL),NaNd},{Double.longBitsToDouble(0x7FFDeadBeef00000L),NaNd},{Double.longBitsToDouble(0xFFFDeadBeef00000L),NaNd},{Double.longBitsToDouble(0x7FFCafeBabe00000L),NaNd},{Double.longBitsToDouble(0xFFFCafeBabe00000L),NaNd},{Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY}};  for (int i=0; i < specialTestCases.length; i++) {    failures+=testSinhCaseWithUlpDiff(specialTestCases[i][0],specialTestCases[i][1],0.0);  }  for (int i=DoubleConsts.MIN_SUB_EXPONENT; i < -27; i++) {    double d=Math.scalb(2.0,i);    failures+=testSinhCaseWithUlpDiff(d,d,2.5);  }  long trans22=Double.doubleToLongBits(22.0);  long transExpOvfl=Double.doubleToLongBits(Math.nextDown(709.7827128933841));  for (long i=trans22; i < transExpOvfl; i+=(transExpOvfl - trans22) / 10000) {    double d=Double.longBitsToDouble(i);    failures+=testSinhCaseWithUlpDiff(d,StrictMath.exp(d) * 0.5,3.5);  }  long transSinhOvfl=Double.doubleToLongBits(710.4758600739439);  double offset=StrictMath.log(0.5);  for (long i=transExpOvfl + 1; i < transSinhOvfl; i+=(transSinhOvfl - transExpOvfl) / 1000) {    double input=Double.longBitsToDouble(i);    double expected=StrictMath.exp(input + offset) * StrictMath.exp(offset - ((input + offset) - input));    failures+=testSinhCaseWithUlpDiff(input,expected,4.0);  }  for (int i=10; i <= DoubleConsts.MAX_EXPONENT; i++) {    double d=Math.scalb(2.0,i);    failures+=testSinhCaseWithUlpDiff(d,Double.POSITIVE_INFINITY,0.0);  }  return failures;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:29.076 -0500",hash_original_method="AECA8304F263BE3AD120D5996456D31E",hash_generated_method="78E10B26650351F29984E50CD30A5C8A") public int detachFd(){  if (mClosed) {    throw new IllegalStateException("Already closed");  }  if (mParcelDescriptor != null) {    int fd=mParcelDescriptor.detachFd();    mClosed=true;    return fd;  }  int fd=getFd();  mClosed=true;  Parcel.clearFileDescriptor(mFileDescriptor);  return fd;}  }
class C{  public TextAnswerFormat(int maximumLength){  this.maximumLength=maximumLength;}  }
class C{  public static void executeApiTask(ExecutorService executorService,BaseIngestionRequestContext requestContext,IngestStrategyFactory ingestStrategyFactory,UnManagedVolumeService unManagedVolumeService,DbClient dbClient,Map<String,String> taskMap,TaskList taskList){  IngestVolumesUnexportedSchedulingThread schedulingThread=new IngestVolumesUnexportedSchedulingThread(requestContext,ingestStrategyFactory,unManagedVolumeService,dbClient,taskMap);  try {    executorService.execute(schedulingThread);  } catch (  Exception e) {    String message="Failed to start unmanaged volume ingestion tasks...";    _logger.error(message,e);    for (    TaskResourceRep taskRep : taskList.getTaskList()) {      taskRep.setMessage(message);    }  }}  }
class C{  private DoubleConsts(){}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void importClass(String name){  getParent().importClass(name);}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case KEY:    return isSetKey();case VALUES:  return isSetValues();}throw new IllegalStateException();}  }
class C{  private byte[] bytes(String s,int extra){  int slen=s.length();  if (slen + extra > rspbuf.length) {    int diff=slen + extra - rspbuf.length;    rspbuf=new byte[2 * (rspbuf.length + diff)];  }  char c[]=s.toCharArray();  for (int i=0; i < c.length; i++) {    rspbuf[i]=(byte)c[i];  }  return rspbuf;}  }
class C{  private Set<SolutionUserDTO> searchSolutionUsers(String tenantName,SearchCriteria criteria,int limit,SearchType searchBy) throws Exception {  Set<SolutionUserDTO> solutionUsers=new HashSet<SolutionUserDTO>();  if (searchBy == SearchType.NAME) {    Set<SolutionUser> idmSolutionUsers=getIDMClient().findSolutionUsers(tenantName,criteria.getSearchString(),limit);    solutionUsers=SolutionUserMapper.getSolutionUserDTOs(idmSolutionUsers);  } else   if (searchBy == SearchType.CERT_SUBJECTDN) {    SolutionUser idmSolutionUser=getIDMClient().findSolutionUserByCertDn(tenantName,criteria.getSearchString());    if (idmSolutionUser != null) {      solutionUsers.add(SolutionUserMapper.getSolutionUserDTO(idmSolutionUser));    }  }  return solutionUsers;}  }
class C{  public void addNodeList(List<SessionNode> nodes){  if (nodes == null) {    throw new NullPointerException("The list of nodes must not be " + "null.");  }  for (int i=0; i < nodes.size(); i++) {    if (nodes.get(i) == null) {      throw new IllegalArgumentException("The object at index " + i + " is null.");    }  }  for (  SessionNode node : nodes) {    if (existsNodeByName(node.getDisplayName())) {      throw new IllegalArgumentException("Attempt to add node to the " + "session with duplicate " + "name: "+ node.getDisplayName());    }  }  for (int i=0; i < nodes.size(); i++) {    SessionNode node=nodes.get(i);    node.restrictConnectionsToList(nodes);    node.restrictListenersToSessionNodes();    this.nodes.add(node);    node.addSessionListener(getSessionHandler());    getSessionSupport().fireNodeAdded(node);  }}  }
class C{  public Position(int offset,int length){  Assert.isTrue(offset >= 0);  Assert.isTrue(length >= 0);  this.offset=offset;  this.length=length;}  }
class C{  public void pause(){  animation.pause();}  }
class C{  void removeIndex(Index index){  indexes.remove(index);}  }
class C{  public Class<?> findClassWithDefaultLoaderRepository(String className) throws ReflectionException {  Class<?> theClass;  if (className == null) {    throw new RuntimeOperationsException(new IllegalArgumentException("The class name cannot be null"),"Exception occurred during object instantiation");  }  ReflectUtil.checkPackageAccess(className);  try {    if (clr == null)     throw new ClassNotFoundException(className);    theClass=clr.loadClass(className);  } catch (  ClassNotFoundException ee) {    throw new ReflectionException(ee,"The MBean class could not be loaded by the default loader repository");  }  return theClass;}  }
class C{  public static boolean isProductInventoryAvailableByFacility(ProductConfigWrapper productConfig,String inventoryFacilityId,BigDecimal quantity,LocalDispatcher dispatcher){  boolean available=true;  List<ConfigOption> options=productConfig.getSelectedOptions();  for (  ConfigOption ci : options) {    List<GenericValue> products=ci.getComponents();    for (    GenericValue product : products) {      String productId=product.getString("productId");      BigDecimal cmpQuantity=product.getBigDecimal("quantity");      BigDecimal neededQty=BigDecimal.ZERO;      if (cmpQuantity != null) {        neededQty=quantity.multiply(cmpQuantity);      }      if (!isProductInventoryAvailableByFacility(productId,inventoryFacilityId,neededQty,dispatcher)) {        ci.setAvailable(false);      }    }    if (!ci.isAvailable()) {      available=false;    }  }  return available;}  }
class C{  public void deleteUser(String username) throws DataAccessException {  HashMap<String,AttributeValue> key=new HashMap<String,AttributeValue>();  key.put(ATTRIBUTE_USERNAME,new AttributeValue().withS(username));  DeleteItemRequest deleteItemRequest=new DeleteItemRequest().withTableName(USER_TABLE).withKey(key);  try {    ddb.deleteItem(deleteItemRequest);  } catch (  AmazonClientException e) {    throw new DataAccessException("Failed to delete user: " + username,e);  }}  }
class C{  public void testEquals(){  int version=1;  int rounds=5;  int wordSize=16;  byte[] iv={1,2,3,4,5,6};  RC5ParameterSpec ps1=new RC5ParameterSpec(version,rounds,wordSize,iv);  RC5ParameterSpec ps2=new RC5ParameterSpec(version,rounds,wordSize,iv);  RC5ParameterSpec ps3=new RC5ParameterSpec(version,rounds,wordSize,new byte[]{1,2,3,4});  assertTrue("The equivalence relation should be reflexive.",ps1.equals(ps1));  assertTrue("Objects built on the same parameters should be equal.",ps1.equals(ps2));  assertTrue("The equivalence relation should be symmetric.",ps2.equals(ps1));  assertTrue("Objects built on the equal parameters should be equal.",ps2.equals(ps3));  assertTrue("The equivalence relation should be transitive.",ps1.equals(ps3));  assertFalse("Should return not be equal to null object.",ps1.equals(null));  ps2=new RC5ParameterSpec(version + 1,rounds,wordSize,iv);  assertFalse("Objects should not be equal.",ps1.equals(ps2));  ps2=new RC5ParameterSpec(version,rounds + 1,wordSize,iv);  assertFalse("Objects should not be equal.",ps1.equals(ps2));  ps2=new RC5ParameterSpec(version,rounds,wordSize / 2,iv);  assertFalse("Objects should not be equal.",ps1.equals(ps2));  ps2=new RC5ParameterSpec(version,rounds,wordSize,new byte[]{4,3,2,1});  assertFalse("Objects should not be equal.",ps1.equals(ps2));}  }
class C{  public EdgeRenderer(){  m_tmpPoints[0]=new Point2D.Float();  m_tmpPoints[1]=new Point2D.Float();  m_ctrlPoints[0]=new Point2D.Float();  m_ctrlPoints[1]=new Point2D.Float();  m_isctPoints[0]=new Point2D.Float();  m_isctPoints[1]=new Point2D.Float();}  }
class C{  public BayesPmParamsEditor(){}  }
class C{  public static DownloadRequest createDownloadRequest(String url,RequestMethod requestMethod,String fileFolder,boolean isDeleteOld){  return new DefaultDownloadRequest(url,requestMethod,fileFolder,isDeleteOld);}  }
class C{  public void print(String text){  try {    out.write(text);  } catch (  IOException ioe) {    throw new GroovyRuntimeException(ioe);  }}  }
class C{  public boolean isConsistent(){  try {    isConsistentOrThrow();    return true;  } catch (  IllegalStateException x) {    log.error(x.getMessage());    try {      log.error(toString());    } catch (    RuntimeException x2) {      log.error("Printing inconsistent wallet failed",x2);    }    return false;  }}  }
class C{  @PostConstruct public void init() throws ConfigException {  try {    super.init();  } catch (  Exception e) {    throw ConfigException.wrap(e);  }}  }
class C{  public boolean addObject(SearchObject so,double dist){  if (this.listOfObjects.size() == 0) {    this.listOfObjects.add(so);    this.setDistance(dist);    this.setNumberOfObjects(this.listOfObjects.size());    return true;  } else {    if (Tools.isEqual(this.getDistance(),dist)) {      this.listOfObjects.add(so);      this.setDistance(dist);      this.setNumberOfObjects(this.listOfObjects.size());      return true;    } else {      return false;    }  }}  }
class C{  public void testBug10496() throws Exception {  if (versionMeetsMinimum(5,0,3)) {    Properties props=new Properties();    props.setProperty("useUnicode","true");    props.setProperty("characterEncoding","WINDOWS-31J");    props.setProperty("characterSetResults","WINDOWS-31J");    getConnectionWithProps(props).close();    props=new Properties();    props.setProperty("useUnicode","true");    props.setProperty("characterEncoding","EUC_JP");    props.setProperty("characterSetResults","EUC_JP");    getConnectionWithProps(props).close();  }}  }
class C{  private void initData(Context context){  scroller=new WheelScroller(getContext(),scrollingListener);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:16.585 -0500",hash_original_method="996125374865CC4B3A630D89D596F543",hash_generated_method="A60FFFB131D50C2EE9D271EAFE3CB41A") public boolean decodeConstrainedEncoding(int startIndex){  if (decodeShortInteger(startIndex) == true) {    stringValue=null;    return true;  }  return decodeExtensionMedia(startIndex);}  }
class C{  public Model addModule(String newModule){  requireNonNull(newModule,"Required not null module");  modules().add(newModule);  if (root.hasSingleChild("modules")) {    root.getSingleChild("modules").appendChild(createElement("module",newModule));  } else {    root.insertChild(createElement("modules",createElement("module",newModule)),beforeAnyOf("dependencyManagement","dependencies","build").or(inTheEnd()));  }  return this;}  }
class C{  public static Constraint validURL(){  return new RegexConstraint(validURLRegex,"Invalid URL");}  }
class C{  public RSeqParser(String rseq){  super(rseq);}  }
class C{  private static File createReserveDiskCacheDir(Context context){  File cacheDir=StorageUtils.getCacheDirectory(context,false);  File individualDir=new File(cacheDir,"uil-images");  if (individualDir.exists() || individualDir.mkdir()) {    cacheDir=individualDir;  }  return cacheDir;}  }
class C{  protected final void putLength(final int length){  if (length < 0) {    throw new IllegalArgumentException();  } else   if (length < 128) {    bytes[--start]=(byte)length;  } else   if (length < 256) {    bytes[--start]=(byte)length;    bytes[--start]=(byte)0x81;  } else   if (length < 65536) {    bytes[--start]=(byte)(length);    bytes[--start]=(byte)(length >> 8);    bytes[--start]=(byte)0x82;  } else   if (length < 16777126) {    bytes[--start]=(byte)(length);    bytes[--start]=(byte)(length >> 8);    bytes[--start]=(byte)(length >> 16);    bytes[--start]=(byte)0x83;  } else {    bytes[--start]=(byte)(length);    bytes[--start]=(byte)(length >> 8);    bytes[--start]=(byte)(length >> 16);    bytes[--start]=(byte)(length >> 24);    bytes[--start]=(byte)0x84;  }}  }
class C{  public String toXML(){  StringBuffer buffer=new StringBuffer();  buffer.append("<AxSfQuery bookId='");  buffer.append(bookId);  buffer.append("'>");  for (Iterator it=fields.values().iterator(); it.hasNext(); ) {    buffer.append(((AxSfQueryField)it.next()).toXML());  }  buffer.append("</AxSfQuery>");  return buffer.toString();}  }
class C{  public void clearUp(){  connPoolCache.clearUp();}  }
class C{  public Spartanizer$Applicator(){  this(Toolbox.defaultInstance());}  }
class C{  public SendableVoiceMessage.SendableVoiceMessageBuilder disableNotification(boolean disableNotification){  this.disableNotification=disableNotification;  return this;}  }
class C{  public void checkLeagueRecords(){  for (  Team t : teamList) {    t.checkLeagueRecords(leagueRecords);  }  userTeam.checkLeagueRecords(userTeamRecords);}  }
class C{  @SuppressWarnings("unchecked") public static <T>T findBean(String beanName){  FacesContext context=FacesContext.getCurrentInstance();  return (T)context.getApplication().evaluateExpressionGet(context,"#{" + beanName + "}",Object.class);}  }
class C{  public void stopSynchronizationTask(){  try {    stop();  } catch (  Exception e) {    _log.error("Exception when trying to stop synchronization task: {}",e.getMessage());  }}  }
class C{  public void visitTableSwitchInsn(int min,int max,Label dflt,Label... labels){  if (mv != null) {    mv.visitTableSwitchInsn(min,max,dflt,labels);  }}  }
class C{  public boolean hasMoreElements(){  try {    return hasMore();  } catch (  NamingException e) {    return false;  }}  }
class C{  public synchronized TradeOrder findTradeOrderByKey(Integer orderKey){  try {    EntityManager entityManager=EntityManagerHelper.getEntityManager();    entityManager.getTransaction().begin();    CriteriaBuilder builder=entityManager.getCriteriaBuilder();    CriteriaQuery<TradeOrder> query=builder.createQuery(TradeOrder.class);    Root<TradeOrder> from=query.from(TradeOrder.class);    query.select(from);    query.where(builder.equal(from.get("orderKey"),orderKey));    List<TradeOrder> items=entityManager.createQuery(query).getResultList();    for (    TradeOrder tradeOrder : items) {      tradeOrder.getTradeOrderfills().size();    }    entityManager.getTransaction().commit();    if (items.size() > 0) {      return items.get(0);    }    return null;  } catch (  Exception re) {    EntityManagerHelper.rollback();    throw re;  } finally {    EntityManagerHelper.close();  }}  }
class C{  @Override public double[] sample(){  double[] sample=new double[alphas.length];  double sum=0;  for (int i=0; i < alphas.length; i++) {    sample[i]=sampleFromGamma(alphas[i],1);    sum+=sample[i];  }  for (int i=0; i < alphas.length; i++) {    sample[i]=sample[i] / sum;  }  return sample;}  }
class C{  public Node(Node other){  __isset_bitfield=other.__isset_bitfield;  this.nodeId=other.nodeId;  this.domainId=other.domainId;  if (other.isSetHostname()) {    this.hostname=other.hostname;  }  this.port=other.port;}  }
class C{  boolean sameExScope(Block b1,Block b2){  if (b1 == b2)   return true;  Edge[] xs1=b1.xsucc;  Edge[] xs2=b2.xsucc;  if (xs1.length != xs2.length)   return false;  for (int i=0, n=xs1.length; i < n; i++) {    Edge e1=xs1[i];    Edge e2=xs2[i];    if (e1.to != e2.to || e1.handler != e2.handler)     return false;  }  return true;}  }
class C{  public ConvolveFilter(){  this(new float[9]);}  }
class C{  static void throwIfArgumentToLong(String tag,String arg,int limit){  if (arg != null && arg.length() > limit) {    throw new IllegalArgumentException(String.format("Argument %s too long. %d characters is the maximum.",tag,limit));  }}  }
class C{  public VAlarm(Action action,Trigger trigger){  setAction(action);  setTrigger(trigger);}  }
class C{  public static Paint newBackgroundPaint(Context context){  final Paint paint=new Paint();  paint.setColor(Color.parseColor(DEFAULT_BACKGROUND_COLOR_ID));  return paint;}  }
class C{  public void actionPerformed(ActionEvent e){  log.finer(m_mField.getColumnName() + ": Value=" + m_editor.getValue());  if (e.getSource() == m_editor && actionListener != null)   actionListener.actionPerformed(e);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  stack.getUIMgrSafe().setOverscanOffsetY(getInt(stack));  return null;}  }
class C{  public InlineQueryResultVideo.InlineQueryResultVideoBuilder id(String id){  this.id=id;  return this;}  }
class C{  @Override public String toString(){  try {    return out.toString(UTF_8.name());  } catch (  UnsupportedEncodingException e) {    throw new RuntimeException(e);  }}  }
class C{  public boolean isIconBtn2(){  return isIconBtn2;}  }
class C{  private HttpPost postWithToken(URI uri) throws IOException, ParseException {  HttpPost request=new HttpPost(uri);  List<NameValuePair> entity=new ArrayList<>();  entity.add(new BasicNameValuePair("token",csrfToken()));  request.setEntity(new UrlEncodedFormEntity(entity,Consts.UTF_8));  return request;}  }
class C{  synchronized boolean connectedToSecondaryHost(){  return this.currentHostIndex >= 0 && !isPrimaryHostIndex(this.currentHostIndex);}  }
class C{  public void addCriterion(final String fieldName,final String operation,final String value){  if (!criteria.containsKey(fieldName)) {    criteria.put(fieldName,new HashMap<String,List<String>>());  }  if (!criteria.get(fieldName).containsKey(operation)) {    criteria.get(fieldName).put(operation,new ArrayList<String>());  }  if (!criteria.get(fieldName).get(operation).contains(value)) {    criteria.get(fieldName).get(operation).add(value);  }}  }
class C{  public MenuKeyEvent(Component source,int id,long when,int modifiers,int keyCode,char keyChar,MenuElement p[],MenuSelectionManager m){  super(source,id,when,modifiers,keyCode,keyChar);  path=p;  manager=m;}  }
class C{  public void mouseClicked(MouseEvent e){  if (SwingUtilities.isRightMouseButton(e))   m_adaptee.popupMenu.show((Component)e.getSource(),e.getX(),e.getY());}  }
class C{  public static void main(String[] args){  SAXBuilder builder=new SAXBuilder();  File xmlFile=new File("/path/to/file.xml");  try {    Document document=(Document)builder.build(xmlFile);    Element rootNode=document.getRootElement();    List list=rootNode.getChildren("staff");    for (int i=0; i < list.size(); i++) {      Element node=(Element)list.get(i);      System.out.println("First Name : " + node.getChildText("firstname"));      System.out.println("\tLast Name : " + node.getChildText("lastname"));      System.out.println("\tEmail : " + node.getChildText("email"));      System.out.println("\tSalary : " + node.getChildText("salary"));    }  } catch (  IOException io) {    System.out.println(io.getMessage());  }catch (  JDOMException jdomex) {    System.out.println(jdomex.getMessage());  }}  }
class C{  public String outerClass(int nth){  int i=outerClassIndex(nth);  if (i == 0)   return null; else   return constPool.getClassInfo(i);}  }
class C{  public GeometryFunction find(String name,int argCount){  for (Iterator i=functions.iterator(); i.hasNext(); ) {    GeometryFunction func=(GeometryFunction)i.next();    String funcName=func.getName();    if (funcName.equalsIgnoreCase(name) && func.getParameterTypes().length == argCount)     return func;  }  return null;}  }
class C{  private int removeRecursive(final File basePath,final int numFiles){  int numLogsDeleted=0;  try {    if (basePath.isDirectory()) {      if (Cfg.DEBUG) {        Check.log(TAG + " (removeRecursive): " + basePath.getName());      }      final File[] fileLogs=basePath.listFiles();      for (      final File file : fileLogs) {        final int removed=removeRecursive(file,numFiles - numLogsDeleted);        numLogsDeleted+=removed;      }    }    if (!basePath.delete()) {      if (Cfg.DEBUG) {        Check.log(TAG + " (removeRecursive) Error: " + basePath.getAbsolutePath());      }    } else {      numLogsDeleted+=1;    }  } catch (  final Exception e) {    if (Cfg.EXCEPTION) {      Check.log(e);    }    if (Cfg.DEBUG) {      Check.log(TAG + " Error: removeLog: " + basePath+ " ex: "+ e);    }  }  if (Cfg.DEBUG) {    Check.log(TAG + " removeLogRecursive removed: " + numLogsDeleted);  }  return numLogsDeleted;}  }
class C{  @Override public boolean nullsAreSortedAtEnd(){  debugCodeCall("nullsAreSortedAtEnd");  return false;}  }
class C{  public static String toURL(HttpServletRequest request,HttpServletResponse response,String servletName,String pathname,String filename){  String value;  if (filename == null) {    value="---";  } else {    String url=request.getContextPath() + servletName + pathname+ filename;    value="<A HREF=\"" + response.encodeURL(url) + "\">"+ filename+ "</A>\r\n";  }  return value;}  }
class C{  static void checkItemsSerVer(int serVer){  if ((serVer == ITEMS_SER_VER) || (serVer == PRIOR_ITEMS_SER_VER)) {    return;  }  throw new SketchesArgumentException("Possible corruption: Invalid Serialization Version: " + serVer);}  }
class C{  public static void runUpdatePortAssociationsProcess(Collection<StoragePort> ports,Collection<StoragePort> remPorts,DbClient dbClient,CoordinatorClient coordinator,List<StoragePool> pools){  try {    if (null == pools) {      pools=new ArrayList<StoragePool>();    }    if (null == ports) {      ports=new ArrayList<StoragePort>();    }    if (null != remPorts) {      ports.addAll(remPorts);    }    Map<NetworkLite,List<StoragePort>> portsByNetwork=groupPortsByNetwork(ports,dbClient);    if (!portsByNetwork.isEmpty()) {      updatePortAssociations(ports,portsByNetwork,dbClient);      Set<URI> poolUris=getStoragePoolIds(pools);      List<StoragePool> modifiedPools=StoragePoolAssociationHelper.getStoragePoolsFromPorts(dbClient,ports,remPorts);      for (      StoragePool pool : modifiedPools) {        if (!poolUris.contains(pool.getId())) {          pools.add(pool);        }      }    }    StringBuffer errorMessage=new StringBuffer();    ImplicitPoolMatcher.matchModifiedStoragePoolsWithAllVirtualPool(pools,dbClient,coordinator,errorMessage);    HashSet<URI> systemsToProcess=StoragePoolAssociationHelper.getStorageSytemsFromPorts(ports,remPorts);    ConnectivityUtil.updateRpSystemsConnectivity(systemsToProcess,dbClient);  } catch (  Exception e) {    _log.error("Update Port Association process failed",e);  }}  }
class C{  public final boolean isReadOnly(){  return readOnly;}  }
class C{  protected void unregisterListeners(){  component.removeMouseListener(this);  component.removeMouseMotionListener(this);}  }
class C{  public DomDistanceScorer(int maximumScore,Node firstContent){  maxScore=maximumScore;  firstContentNode=firstContent;}  }
class C{  public Builder(String zkSpoutId){  this.innerZkSpoutId=zkSpoutId;}  }
class C{  public static <T,P>boolean anySatisfyWith(Iterable<T> iterable,Predicate2<? super T,? super P> predicate,P parameter){  if (iterable instanceof MutableCollection) {    return ((MutableCollection<T>)iterable).anySatisfyWith(predicate,parameter);  }  if (iterable instanceof ArrayList) {    return ArrayListIterate.anySatisfyWith((ArrayList<T>)iterable,predicate,parameter);  }  if (iterable instanceof RandomAccess) {    return RandomAccessListIterate.anySatisfyWith((List<T>)iterable,predicate,parameter);  }  if (iterable != null) {    return IterableIterate.anySatisfyWith(iterable,predicate,parameter);  }  throw new IllegalArgumentException("Cannot perform an anySatisfyWith on null");}  }
class C{  public void appendToDocNoFG(String text,Font f,Color bg,boolean underline){  appendToDoc(text,f,null,bg,underline,false);}  }
class C{  public static void sort(byte[] array){  DualPivotQuicksort.sort(array);}  }
class C{  @Override public void cancelSync(Uri uri){}  }
class C{  public boolean isUseInvertedIndex(){  return useInvertedIndex;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void registerInstruction(BytecodeInstruction instruction){  String className=instruction.getClassName();  String methodName=instruction.getMethodName();  if (!instructionMap.containsKey(className))   instructionMap.put(className,new HashMap<String,List<BytecodeInstruction>>());  if (!instructionMap.get(className).containsKey(methodName))   instructionMap.get(className).put(methodName,new ArrayList<BytecodeInstruction>());  instructionMap.get(className).get(methodName).add(instruction);  logger.debug("Registering instruction " + instruction);  List<BytecodeInstruction> instructions=instructionMap.get(className).get(methodName);  if (instructions.size() > 1) {    BytecodeInstruction previous=instructions.get(instructions.size() - 2);    if (previous.isLabel()) {      LabelNode ln=(LabelNode)previous.asmNode;      if (ln.getLabel() instanceof AnnotatedLabel) {        AnnotatedLabel aLabel=(AnnotatedLabel)ln.getLabel();        if (aLabel.isStartTag()) {          if (aLabel.shouldIgnore()) {            logger.debug("Ignoring artificial branch: " + instruction);            return;          }        }      }    }  }  if (instruction.isActualBranch()) {    BranchPool.getInstance(classLoader).registerAsBranch(instruction);  }}  }
class C{  public static void write(byte[] data,OutputStream output) throws IOException {  if (data != null) {    output.write(data);  }}  }
class C{  public static void requireNonNulls(Object o0,Object o1,Object o2,Object o3,Object o4,Object o5,Object o6){  requireNonNulls(o0,o1,o2,o3,o4);  if (o5 == null) {    throw new NullPointerException(SIXTH_ARG_IS_NULL);  }  if (o6 == null) {    throw new NullPointerException(SEVENTH_ARG_IS_NULL);  }}  }
class C{  public Graph search(){  this.logger.log("info","Starting VCCPC algorithm");  this.logger.log("info","Independence test = " + getIndependenceTest() + ".");  this.allTriples=new HashSet<>();  this.ambiguousTriples=new HashSet<>();  this.colliderTriples=new HashSet<>();  this.noncolliderTriples=new HashSet<>();  Vcfas fas=new Vcfas(getIndependenceTest());  definitelyNonadjacencies=new HashSet<>();  markovInAllPatterns=new HashSet<>();  long startTime=System.currentTimeMillis();  if (getIndependenceTest() == null) {    throw new NullPointerException();  }  List<Node> allNodes=getIndependenceTest().getVariables();  fas.setKnowledge(getKnowledge());  fas.setDepth(getDepth());  fas.setVerbose(verbose);  graph=fas.search();  apparentlyNonadjacencies=fas.getApparentlyNonadjacencies();  if (isDoOrientation()) {    if (verbose) {      System.out.println("CPC orientation...");    }    SearchGraphUtils.pcOrientbk(knowledge,graph,allNodes);    orientUnshieldedTriples(knowledge,getIndependenceTest(),getDepth());    MeekRules meekRules=new MeekRules();    meekRules.setAggressivelyPreventCycles(this.aggressivelyPreventCycles);    meekRules.setKnowledge(knowledge);    meekRules.orientImplied(graph);  }  List<Triple> ambiguousTriples=new ArrayList(graph.getAmbiguousTriples());  int[] dims=new int[ambiguousTriples.size()];  for (int i=0; i < ambiguousTriples.size(); i++) {    dims[i]=2;  }  List<Graph> patterns=new ArrayList<>();  Map<Graph,List<Triple>> newColliders=new IdentityHashMap<>();  Map<Graph,List<Triple>> newNonColliders=new IdentityHashMap<>();  CombinationGenerator generator=new CombinationGenerator(dims);  int[] combination;  while ((combination=generator.next()) != null) {    Graph _graph=new EdgeListGraph(graph);    newColliders.put(_graph,new ArrayList<Triple>());    newNonColliders.put(_graph,new ArrayList<Triple>());    for (    Graph graph : newColliders.keySet()) {    }    for (int k=0; k < combination.length; k++) {      Triple triple=ambiguousTriples.get(k);      _graph.removeAmbiguousTriple(triple.getX(),triple.getY(),triple.getZ());      if (combination[k] == 0) {        newColliders.get(_graph).add(triple);        Node x=triple.getX();        Node y=triple.getY();        Node z=triple.getZ();        _graph.setEndpoint(x,y,Endpoint.ARROW);        _graph.setEndpoint(z,y,Endpoint.ARROW);      }      if (combination[k] == 1) {        newNonColliders.get(_graph).add(triple);      }    }    patterns.add(_graph);  }  List<Graph> _patterns=new ArrayList<>(patterns);  GRAPH:   for (  Graph graph : new ArrayList<>(patterns)) {    List<Triple> colliders=newColliders.get(graph);    List<Triple> nonColliders=newNonColliders.get(graph);    for (    Triple triple : colliders) {      Node x=triple.getX();      Node y=triple.getY();      Node z=triple.getZ();      if (graph.getEdge(x,y).pointsTowards(x) || (graph.getEdge(y,z).pointsTowards(z))) {        patterns.remove(graph);        continue GRAPH;      }    }    for (    Triple triple : colliders) {      Node x=triple.getX();      Node y=triple.getY();      Node z=triple.getZ();      graph.setEndpoint(x,y,Endpoint.ARROW);      graph.setEndpoint(z,y,Endpoint.ARROW);    }    for (    Triple triple : nonColliders) {      Node x=triple.getX();      Node y=triple.getY();      Node z=triple.getZ();      if (graph.getEdge(x,y).pointsTowards(y)) {        graph.removeEdge(y,z);        graph.addDirectedEdge(y,z);      }      if (graph.getEdge(y,z).pointsTowards(y)) {        graph.removeEdge(x,y);        graph.addDirectedEdge(y,x);      }    }    for (    Edge edge : graph.getEdges()) {      Node x=edge.getNode1();      Node y=edge.getNode2();      if (Edges.isBidirectedEdge(edge)) {        graph.removeEdge(x,y);        graph.addUndirectedEdge(x,y);      }    }    MeekRules rules=new MeekRules();    rules.orientImplied(graph);    if (graph.existsDirectedCycle()) {      patterns.remove(graph);      continue GRAPH;    }  }  MARKOV:   for (  Edge edge : apparentlyNonadjacencies.keySet()) {    Node x=edge.getNode1();    Node y=edge.getNode2();    for (    Graph _graph : new ArrayList<>(patterns)) {      List<Node> boundaryX=new ArrayList<>(boundary(x,_graph));      List<Node> boundaryY=new ArrayList<>(boundary(y,_graph));      List<Node> futureX=new ArrayList<>(future(x,_graph));      List<Node> futureY=new ArrayList<>(future(y,_graph));      if (y == x) {        continue;      }      if (boundaryX.contains(y) || boundaryY.contains(x)) {        continue;      }      IndependenceTest test=independenceTest;      if (!futureX.contains(y)) {        if (!test.isIndependent(x,y,boundaryX)) {          continue MARKOV;        }      }      if (!futureY.contains(x)) {        if (!test.isIndependent(y,x,boundaryY)) {          continue MARKOV;        }      }    }    definitelyNonadjacencies.add(edge);  }  for (  Edge edge : definitelyNonadjacencies) {    if (apparentlyNonadjacencies.keySet().contains(edge)) {      apparentlyNonadjacencies.keySet().remove(edge);    }  }  setSemIm(semIm);  List<Double> squaredDifference=new ArrayList<>();  int numNullEdges=0;  Regression sampleRegression=new RegressionDataset(dataSet);  System.out.println(sampleRegression.getGraph());  graph=GraphUtils.replaceNodes(graph,dataSet.getVariables());  Map<Edge,double[]> sampleRegress=new HashMap<>();  Map<Edge,Double> edgeCoefs=new HashMap<>();  ESTIMATION:   for (  Node z : graph.getNodes()) {    Set<Edge> adj=getAdj(z,graph);    for (    Edge edge : apparentlyNonadjacencies.keySet()) {      if (z == edge.getNode1() || z == edge.getNode2()) {        for (        Edge adjacency : adj) {          sampleRegress.put(adjacency,null);          Node a=adjacency.getNode1();          Node b=adjacency.getNode2();          if (semIm.existsEdgeCoef(a,b)) {            Double c=semIm.getEdgeCoef(a,b);            edgeCoefs.put(adjacency,c);          } else {            edgeCoefs.put(adjacency,0.0);          }        }        continue ESTIMATION;      }    }    for (    Edge nonadj : definitelyNonadjacencies) {      if (nonadj.getNode1() == z || nonadj.getNode2() == z) {        double[] d={0,0};        sampleRegress.put(nonadj,d);        Node a=nonadj.getNode1();        Node b=nonadj.getNode2();        if (semIm.existsEdgeCoef(a,b)) {          Double c=semIm.getEdgeCoef(a,b);          edgeCoefs.put(nonadj,c);        } else {          edgeCoefs.put(nonadj,0.0);        }      }    }    Set<Edge> parentsOfZ=new HashSet<>();    Set<Edge> _adj=getAdj(z,graph);    for (    Edge _adjacency : _adj) {      if (!_adjacency.isDirected()) {        for (        Edge adjacency : adj) {          sampleRegress.put(adjacency,null);          Node a=adjacency.getNode1();          Node b=adjacency.getNode2();          if (semIm.existsEdgeCoef(a,b)) {            Double c=semIm.getEdgeCoef(a,b);            edgeCoefs.put(adjacency,c);          } else {            edgeCoefs.put(adjacency,0.0);          }        }      }      if (_adjacency.pointsTowards(z)) {        parentsOfZ.add(_adjacency);      }    }    for (    Edge edge : parentsOfZ) {      if (edge.pointsTowards(edge.getNode2())) {        RegressionResult result=sampleRegression.regress(edge.getNode2(),edge.getNode1());        System.out.println(result);        double[] d=result.getCoef();        sampleRegress.put(edge,d);        Node a=edge.getNode1();        Node b=edge.getNode2();        if (semIm.existsEdgeCoef(a,b)) {          Double c=semIm.getEdgeCoef(a,b);          edgeCoefs.put(edge,c);        } else {          edgeCoefs.put(edge,0.0);        }      }    }  }  System.out.println("All IM: " + semIm + "Finish");  System.out.println("Just IM coefs: " + semIm.getEdgeCoef());  System.out.println("IM Coef Map: " + edgeCoefs);  System.out.println("Regress Coef Map: " + sampleRegress);  for (  Edge edge : sampleRegress.keySet()) {    System.out.println(" Sample Regression: " + edge + Arrays.toString(sampleRegress.get(edge)));  }  for (  Edge edge : graph.getEdges()) {    System.out.println("Sample edge: " + Arrays.toString(sampleRegress.get(edge)));  }  System.out.println("Sample VCPC:");  System.out.println("# of patterns: " + patterns.size());  long endTime=System.currentTimeMillis();  this.elapsedTime=endTime - startTime;  System.out.println("Search Time (seconds):" + (elapsedTime) / 1000 + " s");  System.out.println("Search Time (milli):" + elapsedTime + " ms");  System.out.println("# of Apparent Nonadj: " + apparentlyNonadjacencies.size());  System.out.println("# of Definite Nonadj: " + definitelyNonadjacencies.size());  TetradLogger.getInstance().log("apparentlyNonadjacencies","\n Apparent Non-adjacencies" + apparentlyNonadjacencies);  TetradLogger.getInstance().log("definitelyNonadjacencies","\n Definite Non-adjacencies" + definitelyNonadjacencies);  TetradLogger.getInstance().log("patterns","Disambiguated Patterns: " + patterns);  TetradLogger.getInstance().log("graph","\nReturning this graph: " + graph);  TetradLogger.getInstance().log("info","Elapsed time = " + (elapsedTime) / 1000. + " s");  TetradLogger.getInstance().log("info","Finishing CPC algorithm.");  logTriples();  TetradLogger.getInstance().flush();  return graph;}  }
class C{  private void persistZKNodeStatus(String nodestatus) throws Exception {  String nodestatus_key=String.format(IpReconfigConstants.CONFIG_NODESTATUS_KEY,localNodeId);  config.setConfig(nodestatus_key,nodestatus);  _coordinator.getCoordinatorClient().persistServiceConfiguration(config);}  }
class C{  public boolean isAutoFeatureSample(){  return featureSamples == -1;}  }
class C{  public void clear(){  DataChangeEvent[] events;synchronized (this) {    int cols=getColumnCount();    int rows=getRowCount();    events=new DataChangeEvent[cols * rows];    for (int row=0; row < rows; row++) {      for (int col=0; col < cols; col++) {        events[col + row * cols]=new DataChangeEvent(this,col,row,get(col,row),null);      }    }    this.rows.clear();  }  notifyDataRemoved(events);}  }
class C{  private int checkFlow(Map<String,Object> rows){  int state=0;  boolean dl_type=false;  boolean nw_proto=false;  boolean nw_layer=false;  boolean icmp6_type=false;  boolean icmp6_code=false;  boolean nd_target=false;  boolean nd_sll=false;  boolean nd_tll=false;  boolean ip6=false;  boolean ip4=false;  int eth_type=-1;  int nw_protocol=-1;  int icmp_type=-1;  if (rows.containsKey(StaticFlowEntryPusher.COLUMN_DL_TYPE)) {    if (((String)rows.get(StaticFlowEntryPusher.COLUMN_DL_TYPE)).startsWith("0x")) {      eth_type=Integer.parseInt(((String)rows.get(StaticFlowEntryPusher.COLUMN_DL_TYPE)).replaceFirst("0x",""),16);      dl_type=true;    } else {      eth_type=Integer.parseInt((String)rows.get(StaticFlowEntryPusher.COLUMN_DL_TYPE));      dl_type=true;    }    if (eth_type == 0x86dd) {      ip6=true;      dl_type=true;    } else     if (eth_type == 0x800 || eth_type == 0x806 || eth_type == 0x8035) {      ip4=true;      dl_type=true;    }  }  if (rows.containsKey(StaticFlowEntryPusher.COLUMN_NW_DST) || rows.containsKey(StaticFlowEntryPusher.COLUMN_NW_SRC)) {    nw_layer=true;    ip4=true;  }  if (rows.containsKey(StaticFlowEntryPusher.COLUMN_ICMP_CODE) || rows.containsKey(StaticFlowEntryPusher.COLUMN_ICMP_TYPE) || rows.containsKey(StaticFlowEntryPusher.COLUMN_ARP_DHA)|| rows.containsKey(StaticFlowEntryPusher.COLUMN_ARP_SHA)|| rows.containsKey(StaticFlowEntryPusher.COLUMN_ARP_SPA)|| rows.containsKey(StaticFlowEntryPusher.COLUMN_ARP_DPA)|| rows.containsKey(StaticFlowEntryPusher.COLUMN_ARP_OPCODE)) {    ip4=true;  }  if (rows.containsKey(StaticFlowEntryPusher.COLUMN_IPV6_FLOW_LABEL) || rows.containsKey(StaticFlowEntryPusher.COLUMN_NW6_SRC) || rows.containsKey(StaticFlowEntryPusher.COLUMN_NW6_DST)) {    nw_layer=true;    ip6=true;  }  if (rows.containsKey(StaticFlowEntryPusher.COLUMN_NW_PROTO)) {    nw_proto=true;    if (((String)rows.get(StaticFlowEntryPusher.COLUMN_NW_PROTO)).startsWith("0x")) {      nw_protocol=Integer.parseInt(((String)rows.get(StaticFlowEntryPusher.COLUMN_NW_PROTO)).replaceFirst("0x",""),16);    } else {      nw_protocol=Integer.parseInt((String)rows.get(StaticFlowEntryPusher.COLUMN_NW_PROTO));    }  }  if (rows.containsKey(StaticFlowEntryPusher.COLUMN_ICMP6_CODE)) {    icmp6_code=true;    ip6=true;  }  if (rows.containsKey(StaticFlowEntryPusher.COLUMN_ICMP6_TYPE)) {    icmp6_type=true;    ip6=true;    if (((String)rows.get(StaticFlowEntryPusher.COLUMN_ICMP6_TYPE)).startsWith("0x")) {      icmp_type=Integer.parseInt(((String)rows.get(StaticFlowEntryPusher.COLUMN_ICMP6_TYPE)).replaceFirst("0x",""),16);    } else {      icmp_type=Integer.parseInt((String)rows.get(StaticFlowEntryPusher.COLUMN_ICMP6_TYPE));    }  }  if (rows.containsKey(StaticFlowEntryPusher.COLUMN_ND_SLL)) {    nd_sll=true;    ip6=true;  }  if (rows.containsKey(StaticFlowEntryPusher.COLUMN_ND_TLL)) {    nd_tll=true;    ip6=true;  }  if (rows.containsKey(StaticFlowEntryPusher.COLUMN_ND_TARGET)) {    nd_target=true;    ip6=true;  }  if (nw_layer == true || nw_proto == true) {    if (dl_type == true) {      if (!(ip4 == true || ip6 == true)) {        state=2;        return state;      }    } else {      state=1;      return state;    }  }  if (icmp6_type == true || icmp6_code == true) {    if (nw_proto == true) {      if (nw_protocol != 0x3A) {        state=4;        return state;      }    } else {      state=3;      return state;    }  }  if (nd_sll == true || nd_tll == true || nd_target == true) {    if (icmp6_type == true) {      if (nd_target == true) {        if (!(icmp_type == 135 || icmp_type == 136)) {          state=6;          return state;        }      } else       if (nd_tll == true) {        if (!(icmp_type == 136)) {          state=6;          return state;        }      } else       if (nd_sll == true) {        if (!(icmp_type == 135)) {          state=6;          return state;        }      }    } else {      state=5;      return state;    }  }  int result=checkActions(rows);  if ((ip4 == true && ip6 == true) || (result == -1) || (result == 1 && ip6 == true)|| (result == 2 && ip4 == true)) {    state=7;    return state;  }  return state;}  }
class C{  private static boolean isURIString(String p_uric){  if (p_uric == null) {    return false;  }  int end=p_uric.length();  char testChar='\0';  for (int i=0; i < end; i++) {    testChar=p_uric.charAt(i);    if (testChar == '%') {      if (i + 2 >= end || !isHex(p_uric.charAt(i + 1)) || !isHex(p_uric.charAt(i + 2))) {        return false;      } else {        i+=2;        continue;      }    }    if (isReservedCharacter(testChar) || isUnreservedCharacter(testChar)) {      continue;    } else {      return false;    }  }  return true;}  }
class C{  private State buildPatch(TaskState.TaskStage stage,Throwable e){  State s=new State();  s.taskState=new TaskState();  s.taskState.stage=stage;  if (e != null) {    s.taskState.failure=Utils.toServiceErrorResponse(e);  }  return s;}  }
class C{  private void onRoomHistoryReadabilityPreferenceChanged(){  if ((null == mRoom) || (null == mRoomHistoryReadabilityRulesListPreference)) {    Log.w(LOG_TAG,"## onRoomHistoryReadabilityPreferenceChanged(): not processed due to invalid parameters");    return;  }  String previousValue=mRoom.getLiveState().history_visibility;  String newValue=mRoomHistoryReadabilityRulesListPreference.getValue();  if (!TextUtils.equals(newValue,previousValue)) {    String historyVisibility;    if (newValue.equals(getResources().getString(R.string.room_settings_read_history_entry_value_anyone))) {      historyVisibility=RoomState.HISTORY_VISIBILITY_WORLD_READABLE;    } else     if (newValue.equals(getResources().getString(R.string.room_settings_read_history_entry_value_members_only_option_time_shared))) {      historyVisibility=RoomState.HISTORY_VISIBILITY_SHARED;    } else     if (newValue.equals(getResources().getString(R.string.room_settings_read_history_entry_value_members_only_invited))) {      historyVisibility=RoomState.HISTORY_VISIBILITY_INVITED;    } else     if (newValue.equals(getResources().getString(R.string.room_settings_read_history_entry_value_members_only_joined))) {      historyVisibility=RoomState.HISTORY_VISIBILITY_JOINED;    } else {      Log.w(LOG_TAG,"## onRoomHistoryReadabilityPreferenceChanged(): unknown value:" + newValue);      historyVisibility=null;    }    if (null != historyVisibility) {      displayLoadingView();      mRoom.updateHistoryVisibility(historyVisibility,mUpdateCallback);    }  }}  }
class C{  public static String toString(int[] oid){  StringBuilder sb=new StringBuilder(3 * oid.length);  for (int i=0; i < oid.length - 1; ++i) {    sb.append(oid[i]);    sb.append('.');  }  sb.append(oid[oid.length - 1]);  return sb.toString();}  }
class C{  @PUT @Path("/{solnName}") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @RequiresRole(role=Role.ADMINISTRATOR) public SolutionUserDTO update(@PathParam("solnName") String name,SolutionUserDTO user){  Validate.notNull(user.getCertificate(),sm.getString("valid.not.null","user certificate"));  try {    SolutionDetail solutionDetail=new SolutionDetail(CertificateHelper.convertToX509(user.getCertificate().getEncoded()));    getIDMClient().updateSolutionUserDetail(tenant,name,solutionDetail);    return SolutionUserMapper.getSolutionUserDTO(getIDMClient().findSolutionUser(tenant,user.getName()));  } catch (  InvalidPrincipalException|NoSuchTenantException e) {    log.debug("Failed to update solution user '{}' on tenant '{}'",name,tenant,e);    throw new NotFoundException(sm.getString("ec.404"),e);  }catch (  CertificateException|InvalidArgumentException e) {    log.debug("Failed to update solution user '{}' in tenant '{}' due to a client side error",name,tenant,e);    throw new BadRequestException(sm.getString("res.soln.update.failed",name,tenant),e);  }catch (  Exception e) {    log.error("Failed to update solution user '{}' in tenant '{}' due to a server side error",name,tenant,e);    throw new InternalServerErrorException(sm.getString("ec.500"),e);  }}  }
class C{  @Override public void show(){  super.show();  mDismissing=false;  panelController.animateShow();  if (null != showListener) {    showListener.onPanelShow(this);  }}  }
class C{  public static String toString(String desc){  return PrettyPrinter.toString(desc);}  }
class C{  public vec3 normalize(){  float x=this.m[0];  float y=this.m[1];  float z=this.m[2];  float s=1.0f / (float)Math.sqrt(x * x + y * y + z * z);  this.m[0]=x * s;  this.m[1]=y * s;  this.m[2]=z * s;  return this;}  }
class C{  protected void tearDown() throws Exception {  super.tearDown();}  }
class C{  public DataPoint(Vec numericalValues){  this(numericalValues,emptyInt,emptyData);}  }
class C{  public double[] unhomogeneRelativeVector(double[] v){  assert (v.length == dim + 1);  double[] dv=new double[dim];  System.arraycopy(v,0,dv,0,dim);  assert (Math.abs(v[dim]) < Double.MIN_NORMAL);  return dv;}  }
class C{  public CIDFontType0(final PdfObjectReader currentPdfFile,final String substituteFontFile){  glyphs=new T1Glyphs(true);  isCID=true;  isCIDFont=true;  TTstreamisCID=true;  init(currentPdfFile);  this.currentPdfFile=currentPdfFile;  this.substituteFontFile=substituteFontFile;}  }
class C{  public BasicControl(String id,boolean criticality,byte[] value){  this.id=id;  this.criticality=criticality;  if (value != null) {    this.value=value.clone();  }}  }
class C{  private StringBuilder appendIfNotNull(StringBuilder source,String addStr,String delimiter){  if (addStr != null) {    if (addStr.length() == 0) {      delimiter="";    }    return source.append(addStr).append(delimiter);  }  return source;}  }
class C{  public String addStepForRemoveVPlexCG(Workflow workflow,String stepId,String waitFor,StorageSystem vplexSystem,URI cgURI,String cgName,String clusterName,Boolean setInactive,Workflow.Method rollbackMethod){  URI vplexSystemURI=vplexSystem.getId();  Workflow.Method vplexExecuteMethod=new Workflow.Method(DELETE_CG_METHOD_NAME,vplexSystemURI,cgURI,cgName,clusterName,setInactive);  String step=workflow.createStep(DELETE_CG_STEP,String.format("Deleting Consistency Group %s on VPLEX system %s",cgName,vplexSystemURI.toString()),waitFor,vplexSystemURI,vplexSystem.getSystemType(),getClass(),vplexExecuteMethod,rollbackMethod,stepId);  log.info("Created step for delete CG {} on VPLEX {}",clusterName + ":" + cgName,vplexSystemURI);  return step;}  }
class C{  private boolean pastThreshold(float deltaX,float deltaY,float newScale){  if (deltaX < THRESHOLD && deltaY < THRESHOLD) {    if (newScale == mCurrentTouchPointPosAndScale.getScale()) {      mDragOccurred=false;      return false;    }  }  mDragOccurred=true;  return true;}  }
class C{  private ForwardListener prepareLocationHistory(){  ForwardListener forwardListener=mock(ForwardListener.class);  eventBusC.register(forwardListener);  navigationManager.navigate(this).to(locId1);  ArgumentCaptor<NavigationManager.Event.OnLocationForward> event=ArgumentCaptor.forClass(NavigationManager.Event.OnLocationForward.class);  verify(forwardListener).onEvent(event.capture());  assertEquals(event.getValue().getLastValue(),null);  assertEquals(event.getValue().getCurrentValue().getLocationId(),locId1.getName());  assertEquals(event.getValue().getLocationWhereHistoryClearedUpTo(),null);  assertEquals(event.getValue().isClearHistory(),false);  reset(forwardListener);  navigationManager.navigate(this).to(locId2);  event=ArgumentCaptor.forClass(NavigationManager.Event.OnLocationForward.class);  verify(forwardListener).onEvent(event.capture());  assertEquals(event.getValue().getLastValue().getLocationId(),locId1.getName());  assertEquals(event.getValue().getCurrentValue().getLocationId(),locId2.getName());  assertEquals(event.getValue().getLocationWhereHistoryClearedUpTo(),null);  assertEquals(event.getValue().isClearHistory(),false);  reset(forwardListener);  navigationManager.navigate(this).to(locId3);  event=ArgumentCaptor.forClass(NavigationManager.Event.OnLocationForward.class);  verify(forwardListener).onEvent(event.capture());  assertEquals(event.getValue().getLastValue().getLocationId(),locId2.getName());  assertEquals(event.getValue().getCurrentValue().getLocationId(),locId3.getName());  assertEquals(event.getValue().getLocationWhereHistoryClearedUpTo(),null);  assertEquals(event.getValue().isClearHistory(),false);  reset(forwardListener);  navigationManager.navigate(this).to(locId4);  event=ArgumentCaptor.forClass(NavigationManager.Event.OnLocationForward.class);  verify(forwardListener).onEvent(event.capture());  assertEquals(event.getValue().getLastValue().getLocationId(),locId3.getName());  assertEquals(event.getValue().getCurrentValue().getLocationId(),locId4.getName());  assertEquals(event.getValue().getLocationWhereHistoryClearedUpTo(),null);  assertEquals(event.getValue().isClearHistory(),false);  return forwardListener;}  }
class C{  public static <T>T newInstance(Class<T> aClass){  try {    return aClass.getConstructor().newInstance();  } catch (  InstantiationException e) {    throw new RuntimeException(e);  }catch (  IllegalAccessException e) {    throw new RuntimeException(e);  }catch (  NoSuchMethodException e) {    throw new RuntimeException(e);  }catch (  InvocationTargetException e) {    throw new RuntimeException(e);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static final boolean isPDFLinearized(final String pdfUrl){  if (pdfUrl.startsWith("jar")) {    return false;  }  boolean isLinear=false;  final URL url;  final InputStream is;  try {    url=new URL(pdfUrl);    is=url.openStream();    final byte[] buffer=new byte[128];    is.read(buffer);    is.close();    final int len=buffer.length;    for (int i=0; i < len; i++) {      if (buffer[i] == '/' && buffer[i + 1] == 'L' && buffer[i + 2] == 'i' && buffer[i + 3] == 'n' && buffer[i + 4] == 'e' && buffer[i + 5] == 'a' && buffer[i + 6] == 'r') {        isLinear=true;        i=len;      }    }  } catch (  final IOException e) {    LogWriter.writeLog("[PDF] Exception " + e + " scanning URL "+ pdfUrl);  }  return isLinear;}  }
class C{  private void bubbleDown(int inex){}  }
class C{  private void applyStyleAttributeRecursive(HTMLElement element,HTMLComponent htmlC){  applyStyleAttribute(element,htmlC);  for (int i=0; i < element.getNumChildren(); i++) {    HTMLElement child=(HTMLElement)element.getChildAt(i);    applyStyleAttributeRecursive(child,htmlC);  }}  }
class C{  public AlipayBuilder paymentType(PaymentType type){  alipay.paymentType=type.value();  return this;}  }
class C{  public Categories(){  super(KEY);}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'JOKE_CACHE'";  db.execSQL(sql);}  }
class C{  public static RuntimeException rewrapAndThrowUncheckedException(Throwable ex){  throw rewrapAndThrowUncheckedException(ex.getMessage(),ex);}  }
class C{  public void addAttribute(AttributeInfo info){  if (attribute == null)   attribute=new ArrayList();  AttributeInfo.remove(attribute,info.getName());  attribute.add(info);}  }
class C{  private OptionalInt(){  this.isPresent=false;  this.value=0;}  }
class C{  public String referenceName(final int refId){  return mReferenceNames[refId];}  }
class C{  private float normalizeTime(int index){  return (float)mCurrentDuration[index] / mDuration;}  }
class C{  private void assertSelectionString(String expectedSelectionString){  assertTrue("MockAccessibilityService not ready",sIsAccessibilityServiceReady);  long incrementStep=TIMEOUT_WAIT_FOR_SELECTION_STRING / 5;  long start=SystemClock.uptimeMillis();  while (SystemClock.uptimeMillis() - start < TIMEOUT_WAIT_FOR_SELECTION_STRING && sReceivedSelectionString == SELECTION_STRING_UNKNOWN) {synchronized (sTestLock) {      try {        sTestLock.wait(incrementStep);      } catch (      InterruptedException ie) {      }    }  }  try {    if (sReceivedSelectionString == SELECTION_STRING_UNKNOWN) {      fail("No selection string received. Expected: " + expectedSelectionString);    }    assertEquals(expectedSelectionString,sReceivedSelectionString);  }  finally {    sReceivedSelectionString=SELECTION_STRING_UNKNOWN;  }}  }
class C{  public ProxyFactory<I> connector(JClient client){  this.client=client;  return this;}  }
class C{  public boolean isFlipping(){  return mStarted;}  }
class C{  public TypeReference(int typeRef){  this.value=typeRef;}  }
class C{  public static UserAccess createUserAccess(){  return new UserAccessImpl();}  }
class C{  public static SoundType find(String type,String mediaType,String extension){  return enums.find(new String[]{type,mediaType,extension});}  }
class C{  public InstanceExistsException(String message){  super(message);}  }
class C{  public static ShortRange fixed(short num){  return new ShortRange(num,num);}  }
class C{  public void skipRefCountTracking(){  setReferenceCountOwner(SKIP_REF_COUNT_TRACKING);}  }
class C{  public static String nullSafeToString(char[] array){  if (array == null) {    return NULL_STRING;  }  int length=array.length;  if (length == 0) {    return EMPTY_ARRAY;  }  StringBuffer buffer=new StringBuffer();  for (int i=0; i < length; i++) {    if (i == 0) {      buffer.append(ARRAY_START);    } else {      buffer.append(ARRAY_ELEMENT_SEPARATOR);    }    buffer.append("'").append(array[i]).append("'");  }  buffer.append(ARRAY_END);  return buffer.toString();}  }
class C{  public boolean handlesState(World world,BlockPos pos,IBlockState state){  return state.getBlock() == Blocks.FARMLAND;}  }
class C{  public void moveRow(int from,int to){  if (from < 0 || to >= rows.size())   throw new IllegalArgumentException("Row from invalid");  if (to < 0 || to >= rows.size())   throw new IllegalArgumentException("Row to invalid");  ArrayList<Object> temp=rows.get(from);  rows.remove(from);  rows.add(to,temp);  if (m_groupRowsIndicator != null) {    Boolean tempB=m_groupRowsIndicator.get(from);    m_groupRowsIndicator.remove(from);    m_groupRowsIndicator.add(to,tempB);  }}  }
class C{  protected void initFromManifest(Manifest manifest){  Attributes atts;  String cp;  String[] parts;  atts=manifest.getMainAttributes();  cp=atts.getValue("Class-Path");  if (cp == null) {    return;  }  parts=cp.split(" ");  for (  String part : parts) {    if (part.trim().length() == 0) {      return;    }    if (part.toLowerCase().endsWith(".jar")) {      initFromClasspathPart(part);    }  }}  }
class C{  private boolean moveBuckets(){  Move bestMove=model.findBestBucketMove();  if (bestMove == null) {    return false;  }  model.moveBucket(bestMove);  return true;}  }
class C{  public Document readConfigXml(){  String configFile=getConfigXmlPath();  return xmlTool.loadXmlFromFile(configFile);}  }
class C{  public void addRaster(int x1,int y1,int w,int h,int[] pix,LinkProperties properties) throws IOException {  LinkRaster.write(x1,y1,w,h,pix,properties,link.dos);}  }
class C{  public void testGenerateParkingFacilities(){  String inputPlansFile=getPackageInputDirectory() + "plans2.xml";  String networkFile="test/scenarios/berlin/network.xml.gz";  Scenario scenario=ScenarioUtils.createScenario(super.loadConfig(null));  new MatsimNetworkReader(scenario.getNetwork()).readFile(networkFile);  new PopulationReader(scenario).readFile(inputPlansFile);  GenerateParkingFacilities.generateParkingFacilties(scenario);  ActivityFacilities facilities=scenario.getActivityFacilities();  assertEquals(4,facilities.getFacilities().size());}  }
class C{  public boolean hasValue(){  return super.hasTextValue();}  }
class C{  public HyperbolicTransformer(Component component,MutableTransformer delegate){  super(component,delegate);}  }
class C{  protected List<Cluster<M>> splitCluster(Cluster<M> parentCluster,Database database,Relation<V> relation){  ArrayList<Cluster<M>> parentClusterList=new ArrayList<Cluster<M>>(1);  parentClusterList.add(parentCluster);  Clustering<M> parentClustering=new Clustering<>(parentCluster.getName(),parentCluster.getName(),parentClusterList);  if (parentCluster.size() < 2) {    return parentClusterList;  }  ProxyDatabase proxyDB=new ProxyDatabase(parentCluster.getIDs(),database);  splitInitializer.setInitialMeans(splitCentroid(parentCluster,relation));  innerKMeans.setK(2);  Clustering<M> childClustering=innerKMeans.run(proxyDB);  double parentEvaluation=informationCriterion.quality(parentClustering,getDistanceFunction(),relation);  double childrenEvaluation=informationCriterion.quality(childClustering,getDistanceFunction(),relation);  if (LOG.isDebugging()) {    LOG.debug("parentEvaluation: " + parentEvaluation);    LOG.debug("childrenEvaluation: " + childrenEvaluation);  }  return (childrenEvaluation > parentEvaluation) ^ informationCriterion.ascending() ? parentClusterList : childClustering.getAllClusters();}  }
class C{  public void initAppsServer(){  int index=(p_panel != null ? p_panel.fAppsType.getSelectedIndex() : 0);  initAppsServer(index);}  }
class C{  public void addPropertyChangeListener(PropertyChangeListener l){  getPcs().addPropertyChangeListener(l);}  }
class C{  private void createGlobalHeader(){  list.add((byte)0xd4);  list.add((byte)0xc3);  list.add((byte)0xb2);  list.add((byte)0xa1);  list.add((byte)0x02);  list.add((byte)0x00);  list.add((byte)0x04);  list.add((byte)0x00);  list.add((byte)0x00);  list.add((byte)0x00);  list.add((byte)0x00);  list.add((byte)0x00);  list.add((byte)0x00);  list.add((byte)0x00);  list.add((byte)0x00);  list.add((byte)0x00);  list.add((byte)0xff);  list.add((byte)0xff);  list.add((byte)0x00);  list.add((byte)0x00);  list.add((byte)0x01);  list.add((byte)0x00);  list.add((byte)0x00);  list.add((byte)0x00);}  }
class C{  public static double[][] loadMatrix(File file) throws IOException {  List<double[]> data=new ArrayList<double[]>();  CommentedLineReader reader=null;  String line=null;  try {    reader=new CommentedLineReader(new FileReader(file));    while ((line=reader.readLine()) != null) {      String[] tokens=line.split("\\s+");      double[] row=new double[tokens.length];      for (int i=0; i < tokens.length; i++) {        row[i]=Double.parseDouble(tokens[i]);      }      data.add(row);    }    return data.toArray(new double[data.size()][]);  }  finally {    if (reader != null) {      reader.close();    }  }}  }
class C{  public AttribKey onAnyElement(){  return onElement(ElKey.wildcard(ns));}  }
class C{  final protected void handleChunk(final E[] chunk){  target.add(chunk);}  }
class C{  protected void verifyObb3Contents(String filename){  String path=null;  path=doWaitForPath(filename);  doValidateIntContents(path,"OneToOneThousandInts.bin",0,1000);  doValidateZeroLongFile(path,"TwoHundredLongs",200,true);  doValidateZeroLongFile(path + File.separator + "subdir1","FiftyLongs",50,true);  doValidateIntContents(path + File.separator + "subdir2","OneToOneThousandInts",0,1000);  doValidateZeroLongFile(path + File.separator + "subdir2"+ File.separator+ "subdir2a","TwoHundredLongs",200,true);  doValidateIntContents(path + File.separator + "subdir2"+ File.separator+ "subdir2a"+ File.separator+ "subdir2a1","OneToOneThousandInts",0,1000);}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  for (; ; ) {    @SuppressWarnings("unchecked") E item=(E)s.readObject();    if (item == null)     break; else     offer(item);  }}  }
class C{  public static BufferedImage createCompatibleImage(int width,int height){  return getGraphicsConfiguration().createCompatibleImage(width,height);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:32.316 -0500",hash_original_method="438CB3F0D3B01507EC959AE5277C1434",hash_generated_method="D618B8A0B8645A63526CEA5B342F57A5") public void add(String fieldName,String value){  if (fieldName == null) {    throw new IllegalArgumentException("fieldName == null");  }  if (value == null) {    System.logW("Ignoring HTTP header field '" + fieldName + "' because its value is null");    return;  }  namesAndValues.add(fieldName);  namesAndValues.add(value.trim());}  }
class C{  public static long reverseBits(final byte value){  return JBBPUtils.reverseBitsInByte(value) & 0xFF;}  }
class C{  public boolean isIgnorableWhitespace(Text node){  boolean isIgnorable=false;  return isIgnorable;}  }
class C{  protected Node copyInto(Node n){  AbstractProcessingInstruction p;  p=(AbstractProcessingInstruction)super.copyInto(n);  p.data=data;  return p;}  }
class C{  @Override public void evaluate() throws Throwable {  setUpHql.runScript(testingHiveServer.getHiveContext());  wrappedStatement.evaluate();}  }
class C{  public MusicTrackListAdapter(Context context){  super(context,R.layout.adapter_music_track);  mContext=context;}  }
class C{  public SetKeyPairPasswordAction(KseFrame kseFrame){  super(kseFrame);  putValue(LONG_DESCRIPTION,res.getString("SetKeyPairPasswordAction.statusbar"));  putValue(NAME,res.getString("SetKeyPairPasswordAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("SetKeyPairPasswordAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("SetKeyPairPasswordAction.image")))));}  }
class C{  @Override public int hashCode(){  return id;}  }
class C{  public DenseVector(List<Double> list){  this.array=new double[list.size()];  for (int i=0; i < list.size(); i++)   this.array[i]=list.get(i);  startIndex=0;  endIndex=this.array.length;}  }
class C{  protected void addInstructor(HttpServletRequest request,ClassEditForm frm,ActionMessages errors){  if (request.getParameter("instrListTypeAction") != null && request.getParameter("instrListTypeAction").toString().length() > 0)   return;  List lst=frm.getInstructors();  if (frm.checkPrefs(lst)) {    frm.addToInstructors(null);    request.setAttribute(HASH_ATTR,HASH_INSTR_PREF);  } else {    errors.add("instrPrefs",new ActionMessage("errors.generic",MSG.errorInvalidInstructorPreference()));    saveErrors(request,errors);  }}  }
class C{  private void registerReflectiveClass(CtClass clazz){  CtField[] fs=clazz.getDeclaredFields();  for (int i=0; i < fs.length; ++i) {    CtField f=fs[i];    int mod=f.getModifiers();    if ((mod & Modifier.PUBLIC) != 0 && (mod & Modifier.FINAL) == 0) {      String name=f.getName();      converter.replaceFieldRead(f,clazz,readPrefix + name);      converter.replaceFieldWrite(f,clazz,writePrefix + name);    }  }}  }
class C{  public void insert(final AbstractInsnNode location,final AbstractInsnNode insn){  ++size;  AbstractInsnNode next=location.next;  if (next == null) {    last=insn;  } else {    next.prev=insn;  }  location.next=insn;  insn.next=next;  insn.prev=location;  cache=null;  insn.index=0;}  }
class C{  public static void uiImpl(){  UIManager.put("SplitPane.shadow",new ColorUIResource(new Color(200,200,200)));  UIManager.put("SplitPane.background",new ColorUIResource(new Color(250,250,250)));  UIManager.put("SplitPane.border",new BorderUIResource(new org.jb2011.lnf.beautyeye.ch4_scroll.ScrollPaneBorder()));  UIManager.put("SplitPaneUI",org.jb2011.lnf.beautyeye.ch17_split.BESplitPaneUI.class.getName());  UIManager.put("SplitPaneDivider.draggingColor",new ColorUIResource(new Color(0,0,0,50)));  UIManager.put("SplitPane.oneTouchButtonSize",4);  UIManager.put("SplitPane.dividerSize",7);  UIManager.put("SplitPaneDivider.border",new SplitPaneDividerBorder());}  }
class C{  public void hookupStats(StatisticsFactory f,String name){  if (this._stats == null) {    this._stats=f.createAtomicStatistics(type,name);    setLocatorCount(known_locators.get());    setServerCount(endpoints_known.get());    setLocatorRequests(requests_to_locator.get());    setLocatorResponses(responses_from_locator.get());    setServerLoadUpdates(serverLoadUpdates.get());  }}  }
class C{  private Map<String,String> createParameterMap(String queryString){  Map<String,String> map=new HashMap<String,String>();  String[] pairs=queryString.split("&");  for (  String pair : pairs) {    if (pair.length() < 1) {      continue;    }    String[] tokens=pair.split("=",2);    for (int j=0; j < tokens.length; j++) {      try {        tokens[j]=URLDecoder.decode(tokens[j],UTF8_CHARSET);      } catch (      UnsupportedEncodingException e) {      }    }switch (tokens.length) {case 1:{        if (pair.charAt(0) == '=') {          map.put("",tokens[0]);        } else {          map.put(tokens[0],"");        }        break;      }case 2:{      map.put(tokens[0],tokens[1]);      break;    }default :{    break;  }}}return map;}  }
class C{  public int hashCode(){  return Objects.hash(x,p,g);}  }
class C{  public void actionPerformed(ActionEvent event){  String command=event.getActionCommand();  if (CommonSettingsDialog.UPDATE.equalsIgnoreCase(command)) {    update();  } else   if (CommonSettingsDialog.CANCEL.equalsIgnoreCase(command)) {    cancel();  }}  }
class C{  public static ProgressRequestBody createProgressRequest(RequestBody requestBody,ProgressListener listener){  return new ProgressRequestBody(requestBody,listener);}  }
class C{  public void init(byte[] password,byte[] salt){  super.init(password,salt,1);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:57.510 -0500",hash_original_method="13C71D739499D98499F08E0B68D72954",hash_generated_method="3B4139C4D3E5EEAC06EE22EAA7358A3F") public int[] startSubnegotiationRemote(){  return null;}  }
class C{  public DNAMERecord(Name name,int dclass,long ttl,Name alias){  super(name,Type.DNAME,dclass,ttl,alias,"alias");}  }
class C{  public boolean hasExperimentId(){  return hasExtension(GwoExperimentId.class);}  }
class C{  public void xxtestBrokenConnection(){  try {    fetch("www.fortify.net",443,true,"/sslcheck.html",1,2,60,60);    fail("Oops - timeout expected.");  } catch (  IOException ex) {    android.util.Log.d("SSLSocketTest","Exception",ex);  }}  }
class C{  private void writeFieldDescriptors(DbfTableModel model) throws IOException {  int columnCount=model.getColumnCount();  for (int i=0; i <= columnCount - 1; i++) {    String name=model.getColumnName(i);    int length=model.getLength(i);    byte decimalCount=model.getDecimalCount(i);    byte type=model.getType(i);    writeFieldDescriptor(name,type,length,decimalCount);  }  _leos.writeByte(13);}  }
class C{  public void printHorizontalLine(PrintWriter file,boolean isManifest){  printHorizontalLine(file,0,getLineLength(isManifest));}  }
class C{  public <T extends B>MinMaxPriorityQueue<T> create(){  return create(Collections.<T>emptySet());}  }
class C{  static MethodHandle varargsArray(Class<?> arrayType,int nargs){  Class<?> elemType=arrayType.getComponentType();  if (elemType == null)   throw new IllegalArgumentException("not an array: " + arrayType);  if (nargs >= MAX_JVM_ARITY / 2 - 1) {    int slots=nargs;    final int MAX_ARRAY_SLOTS=MAX_JVM_ARITY - 1;    if (slots <= MAX_ARRAY_SLOTS && elemType.isPrimitive())     slots*=Wrapper.forPrimitiveType(elemType).stackSlots();    if (slots > MAX_ARRAY_SLOTS)     throw new IllegalArgumentException("too many arguments: " + arrayType.getSimpleName() + ", length "+ nargs);  }  if (elemType == Object.class)   return varargsArray(nargs);  MethodHandle cache[]=TYPED_COLLECTORS.get(elemType);  MethodHandle mh=nargs < cache.length ? cache[nargs] : null;  if (mh != null)   return mh;  if (nargs == 0) {    Object example=java.lang.reflect.Array.newInstance(arrayType.getComponentType(),0);    mh=MethodHandles.constant(arrayType,example);  } else   if (elemType.isPrimitive()) {    MethodHandle builder=Lazy.MH_fillNewArray;    MethodHandle producer=buildArrayProducer(arrayType);    mh=buildVarargsArray(builder,producer,nargs);  } else {    Class<? extends Object[]> objArrayType=arrayType.asSubclass(Object[].class);    Object[] example=Arrays.copyOf(NO_ARGS_ARRAY,0,objArrayType);    MethodHandle builder=Lazy.MH_fillNewTypedArray.bindTo(example);    MethodHandle producer=Lazy.MH_arrayIdentity;    mh=buildVarargsArray(builder,producer,nargs);  }  mh=mh.asType(MethodType.methodType(arrayType,Collections.<Class<?>>nCopies(nargs,elemType)));  mh=makeIntrinsic(mh,Intrinsic.NEW_ARRAY);  assert (assertCorrectArity(mh,nargs));  if (nargs < cache.length)   cache[nargs]=mh;  return mh;}  }
class C{  public PersistenceException(String message){  super(message);}  }
class C{  public TObjectLongHashMap(int initialCapacity,float loadFactor,TObjectHashingStrategy<K> strategy){  super(initialCapacity,loadFactor,strategy);}  }
class C{  protected String doIt() throws Exception {  log.info("AD_Tree_ID=" + m_AD_Tree_ID);  if (m_AD_Tree_ID == 0)   throw new IllegalArgumentException("Tree_ID = 0");  MTree tree=new MTree(getCtx(),m_AD_Tree_ID,get_TrxName());  if (tree == null || tree.getAD_Tree_ID() == 0)   throw new IllegalArgumentException("No Tree -" + tree);  if (MTree.TREETYPE_BoM.equals(tree.getTreeType()))   return "BOM Trees not implemented";  return verifyTree(tree);}  }
class C{  public static void dump(ResultSet rs) throws SQLException {  ResultSetMetaData md=rs.getMetaData();  for (int i=0; i < md.getColumnCount(); i++) {    int index=i + 1;    String info=md.getColumnLabel(index);    String name=md.getColumnName(index);    if (info == null)     info=name; else     if (name != null && !name.equals(info))     info+=" (" + name + ")";    info+=" = " + rs.getString(index);    info+=" [" + md.getColumnTypeName(index) + "("+ md.getPrecision(index);    if (md.getScale(index) != 0)     info+="," + md.getScale(index);    info+=")]";    log.fine(info);  }}  }
class C{  synchronized void incrementCallCount() throws NoSuchObjectException {  if (disp != null) {    callCount++;  } else {    throw new NoSuchObjectException("object not accepting new calls");  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String setting=getString(stack);  sage.plugin.PluginWrapper pluggy=getPlugin(stack);  if (pluggy != null) {    if (pluggy.isServerPluginInfo()) {      stack.push(pluggy);      stack.push(setting);      return makeNetworkedCall(stack);    }    SageTVPlugin realPlug=sage.plugin.CorePluginManager.getInstance().getRealPlugin(pluggy.getId());    if (realPlug != null) {      if (stack.getUIMgr() != null) {        Catbert.uiContextThreadNames.set(stack.getUIMgr().getLocalUIClientName());      }      return realPlug.getConfigValues(setting);    }  }  return Pooler.EMPTY_STRING_ARRAY;}  }
class C{  private void partitionClass(GVCongruenceClass partition){  Iterator<ValueGraphVertex> i=partition.iterator();  ValueGraphVertex first=i.next();  ArrayList<GVCongruenceClass> newClasses=new ArrayList<GVCongruenceClass>();  ArrayList<ValueGraphVertex> toRemove=new ArrayList<ValueGraphVertex>();  while (i.hasNext()) {    ValueGraphVertex v=i.next();    if (!checkCongruence(first,v)) {      int index=findCongruenceMatch(newClasses,v);      if (index > -1) {        GVCongruenceClass match=B.get(index);        match.addVertex(v);        v.setValueNumber(match.getValueNumber());      } else {        GVCongruenceClass c=createCongruenceClass(v);        newClasses.add(c);        c.addVertex(v);        v.setValueNumber(c.getValueNumber());      }      toRemove.add(v);    }  }  for (  ValueGraphVertex v : toRemove) {    partition.removeVertex(v);  }  if ((!newClasses.isEmpty()) && (partition.size() > 1)) {    workList.push(partition);  }  for (  GVCongruenceClass c : newClasses) {    if (c.size() > 1) {      workList.push(c);    }    addDependentClassesToWorklist(c);  }}  }
class C{  protected void notifyConnectionListeners(int type){  notifyConnectionListeners(type,null);}  }
class C{  static Bitmap createIconBitmap(Bitmap icon,Context context){synchronized (sCanvas) {    if (sIconWidth == -1) {      initStatics(context);    }  }  if (sIconWidth == icon.getWidth() && sIconHeight == icon.getHeight()) {    return icon;  }  return createIconBitmap(new BitmapDrawable(context.getResources(),icon),context);}  }
class C{  public Tasks<VolumeRestRep> stopContinuousCopies(URI id,CopiesParam input){  TaskList tasks=client.post(TaskList.class,input,getContinuousCopiesUrl() + "/stop",id);  return new Tasks<VolumeRestRep>(client,tasks.getTaskList(),BlockMirrorRestRep.class);}  }
class C{  private void verifyAccessRights(OperationGroup createGroup,OperationGroup updateGroup,OperationGroup deleteGroup){  logStep("Verifying access rights");  for (  Entity entity : createGroup.getEntities()) {    verifyCreateRight(entity);  }  for (  Entity entity : updateGroup.getEntities()) {    verifyUpdateRight(entity);  }  for (  Entity entity : deleteGroup.getEntities()) {    verifyDeleteRight(entity);  }}  }
class C{  public EntityResult deleteEntity(String entityType,String uniqueAttributeName,String uniqueAttributeValue) throws AtlasServiceException {  LOG.debug("Deleting entity type: {}, attributeName: {}, attributeValue: {}",entityType,uniqueAttributeName,uniqueAttributeValue);  API api=API.DELETE_ENTITY;  WebResource resource=getResource(api);  resource=resource.queryParam(TYPE,entityType);  resource=resource.queryParam(ATTRIBUTE_NAME,uniqueAttributeName);  resource=resource.queryParam(ATTRIBUTE_VALUE,uniqueAttributeValue);  JSONObject jsonResponse=callAPIWithResource(API.DELETE_ENTITIES,resource,null);  EntityResult results=extractEntityResult(jsonResponse);  LOG.debug("Delete entities returned results: {}",results);  return results;}  }
class C{  @Override public int hashCode(){  return (int)(value ^ (value >>> 32));}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  public static float unitRatio(long t,long tBegin,float tDuration){  if (t <= tBegin) {    return 0.0f;  }  return (t - tBegin) / tDuration;}  }
class C{  public void toNativeArray(byte[] dest,int offset,int len){  if (len == 0) {    return;  }  if (offset < 0 || offset >= _pos) {    throw new ArrayIndexOutOfBoundsException(offset);  }  System.arraycopy(_data,offset,dest,0,len);}  }
class C{  public static EnvironmentClassLoader create(){  ClassLoader parent=null;  String id=null;  return create(parent,id);}  }
class C{  public static DefinitionList eliminateEmptyStructures(DefinitionList dl){  ContentElement dt=dl.getDefinedTerm();  if (dt != null && dt.empty())   dl.setDefinedTerm(null);  for (int i=dl.nrOfDefinitions() - 1; i >= 0; i--) {    ContentElement ce=dl.getDefinition(i);    if (ce.empty())     dl.removeDefinition(ce);  }  return dl;}  }
class C{  protected Member[] array(Member[] arrayMember){  boolean resetIndexSaved=_resetIndex;  if (_resetIndex) {    _bitIndex=0;    _resetIndex=false;  }  if (BOOL.isInstance(arrayMember)) {    for (int i=0; i < arrayMember.length; )     arrayMember[i++]=(Member)this.new Bool();  } else   if (SIGNED_8.isInstance(arrayMember)) {    for (int i=0; i < arrayMember.length; )     arrayMember[i++]=(Member)this.new Signed8();  } else   if (UNSIGNED_8.isInstance(arrayMember)) {    for (int i=0; i < arrayMember.length; )     arrayMember[i++]=(Member)this.new Unsigned8();  } else   if (SIGNED_16.isInstance(arrayMember)) {    for (int i=0; i < arrayMember.length; )     arrayMember[i++]=(Member)this.new Signed16();  } else   if (UNSIGNED_16.isInstance(arrayMember)) {    for (int i=0; i < arrayMember.length; )     arrayMember[i++]=(Member)this.new Unsigned16();  } else   if (SIGNED_32.isInstance(arrayMember)) {    for (int i=0; i < arrayMember.length; )     arrayMember[i++]=(Member)this.new Signed32();  } else   if (UNSIGNED_32.isInstance(arrayMember)) {    for (int i=0; i < arrayMember.length; )     arrayMember[i++]=(Member)this.new Unsigned32();  } else   if (SIGNED_64.isInstance(arrayMember)) {    for (int i=0; i < arrayMember.length; )     arrayMember[i++]=(Member)this.new Signed64();  } else {    throw new java.lang.UnsupportedOperationException("Cannot create member elements, the arrayMember should " + "contain the member instances instead of null");  }  _resetIndex=resetIndexSaved;  return (Member[])arrayMember;}  }
class C{  public int hashCode(){  return (username + realm).hashCode();}  }
class C{  public int hashCode(){  return toRFC2253CanonicalString().hashCode();}  }
class C{  public static boolean isArithmeticExpression(String exp){  boolean mathOperators=false;  StringBuilder curString=new StringBuilder();  for (int i=0; i < exp.length(); i++) {    char c=exp.charAt(i);    if (c == '+' || c == '-' || c == '/' || (c == '*' && exp.length() > 2)) {      mathOperators=true;    } else     if (c == '?' || c == '|' || c == '[' || c == '_' || c == '\'') {      return false;    } else     if (Character.isLetter(c)) {      curString.append(c);    } else     if (StringUtils.isDelimiter(c)) {      if (!MathExpression.fixedFunctions.contains(curString.toString())) {        return false;      }      mathOperators=true;      curString=new StringBuilder();    }  }  return (mathOperators);}  }
class C{  private static void _init(){  addMethod("iConomy",new com.earth2me.essentials.register.payment.methods.iCo6());  addMethod("iConomy",new com.earth2me.essentials.register.payment.methods.iCo5());  addMethod("BOSEconomy",new com.earth2me.essentials.register.payment.methods.BOSE7());  addMethod("Currency",new com.earth2me.essentials.register.payment.methods.MCUR());  Dependencies.add("MultiCurrency");  addMethod("Vault",new com.earth2me.essentials.register.payment.methods.VaultEco());}  }
class C{  public JOptionPane(Object message){  this(message,PLAIN_MESSAGE);}  }
class C{  public PromisifyExpression createPromisifyExpression(){  PromisifyExpressionImpl promisifyExpression=new PromisifyExpressionImpl();  return promisifyExpression;}  }
class C{  @Override public void write(int ch) throws IOException {  int len=_writeLength;  byte[] writeBuffer=_writeBuffer;  if (writeBuffer.length <= len) {    if (_source == null) {      return;    }    _writeLength=0;    _source.write(writeBuffer,0,len,false);    _position+=len;    _isFlushRequired=true;    len=0;  }  writeBuffer[len]=(byte)ch;  _writeLength=len + 1;  if (_implicitFlush)   flush();}  }
class C{  public void testZonesAndTentsDisplayed(){  waitForProgressFragment();  inLocationSelectionCheckZonesAndTentsDisplayed();}  }
class C{  public static <ST,A>XorTValue<ST,A> fromAnyM(final AnyMValue<A> anyM){  return of(anyM.map(null));}  }
class C{  public static RecipeRuneAltar registerRuneAltarRecipe(ItemStack output,int mana,Object... inputs){  Preconditions.checkArgument(inputs.length <= 16);  RecipeRuneAltar recipe=new RecipeRuneAltar(output,mana,inputs);  runeAltarRecipes.add(recipe);  return recipe;}  }
class C{  public PopupMenuSpiderContext(String label){  super(label,Constant.messages.getString("attack.site.popup"));  this.setIcon(new ImageIcon(PopupMenuSpiderContext.class.getResource("/resource/icon/16/spider.png")));}  }
class C{  protected synchronized void updateLocation(Point newLocn){  prev=locn;  locn=newLocn;  if (Math.abs(locn.x - prev.x) > hysteresis || Math.abs(locn.y - prev.y) > hysteresis) {    if (timer.isRunning())     timer.stop();  } else {    if (!timer.isRunning())     timer.start();  }}  }
class C{  public static String detectCharset(InputStream is) throws IOException {  UniversalDetector detector=new UniversalDetector(null);  byte[] buf=new byte[4096];  int nRead;  while ((nRead=is.read(buf)) > 0 && !detector.isDone()) {    detector.handleData(buf,0,nRead);  }  detector.dataEnd();  return or(detector.getDetectedCharset(),"UTF-8");}  }
class C{  public static BufferedImage createCompatibleTranslucentImage(int width,int height){  return getGraphicsConfiguration().createCompatibleImage(width,height,Transparency.TRANSLUCENT);}  }
class C{  public void testEdgeEndpoints(){  Collection<Integer> c=new ArrayList<Integer>();  for (int i=0; i < 10; i++) {    try {      h.addEdge((char)i,c);      c.add(i);    } catch (    IllegalArgumentException iae) {      if (h instanceof Graph) {        if (c.size() == 2)         fail("improperly rejected incident vertex collection " + c);      } else       fail("hypergraph implementations should accept any positive number of incident vertices");    }  }}  }
class C{  public static JsonObject addRoutingRule(JsonObject originalRoutingRules,String newRoutingRuleName,JsonObject newRoutingRule){  Set<String> originalRulesFieldNames=originalRoutingRules.fieldNames();  JsonObject extendedRules=new JsonObject();  extendedRules.put(newRoutingRuleName,newRoutingRule);  for (  String fieldName : originalRulesFieldNames) {    extendedRules.put(fieldName,originalRoutingRules.getJsonObject(fieldName));  }  return extendedRules;}  }
class C{  public void testGenerateCertPath01() throws Exception {  CertificateFactory[] certFs=initCertFs();  assertNotNull("CertificateFactory objects were not created",certFs);  Certificate cert=certFs[0].generateCertificate(new ByteArrayInputStream(TestUtils.getEncodedX509Certificate()));  List<Certificate> list=new Vector<Certificate>();  list.add(cert);  for (int i=0; i < certFs.length; i++) {    CertPath certPath=null;    certPath=certFs[i].generateCertPath(list);    assertEquals(cert.getType(),certPath.getType());    List<? extends Certificate> list1=certPath.getCertificates();    assertFalse("Result list is empty",list1.isEmpty());    Iterator<? extends Certificate> it=list1.iterator();    assertEquals("Incorrect Certificate in CertPath",cert,it.next());  }}  }
class C{  public JobDetail selectJobForTrigger(Connection conn,ClassLoadHelper loadHelper,TriggerKey triggerKey,boolean loadJobClass) throws ClassNotFoundException, SQLException {  PreparedStatement ps=null;  ResultSet rs=null;  try {    ps=conn.prepareStatement(rtp(SELECT_JOB_FOR_TRIGGER));    ps.setString(1,triggerKey.getName());    ps.setString(2,triggerKey.getGroup());    rs=ps.executeQuery();    if (rs.next()) {      JobDetailImpl job=new JobDetailImpl();      job.setName(rs.getString(1));      job.setGroup(rs.getString(2));      job.setDurability(getBoolean(rs,3));      if (loadJobClass)       job.setJobClass(loadHelper.loadClass(rs.getString(4),Job.class));      job.setRequestsRecovery(getBoolean(rs,5));      return job;    } else {      if (logger.isDebugEnabled()) {        logger.debug("No job for trigger '" + triggerKey + "'.");      }      return null;    }  }  finally {    closeResultSet(rs);    closeStatement(ps);  }}  }
class C{  public boolean wasSent(){  return resultSent;}  }
class C{  private static AffineTransform objectBoundingBoxTransform(Point2D gp1,Point2D gp2,double width,double height,double scaleWidth,double scaleHeight){  AffineTransform at=new AffineTransform();  at.translate(width / 2,height / 2);  at.scale((scaleWidth * SwfConstants.TWIPS_PER_PIXEL / SwfConstants.GRADIENT_SQUARE),(scaleHeight * SwfConstants.TWIPS_PER_PIXEL / SwfConstants.GRADIENT_SQUARE));  if (gp1 != null && gp2 != null && (gp2.getX() - gp1.getX()) != 0) {    double mx=gp2.getX() - gp1.getX();    double my=gp2.getY() - gp1.getY();    double gradient=my / mx;    double angle=Math.atan(gradient);    if (mx < 0)     angle+=Math.PI; else     if (my < 0)     angle+=(Math.PI * 2.0);    if (angle != 0)     at.rotate(angle);  }  return at;}  }
class C{  @JsonCreator public DefaultProjectProblem(@JsonProperty("code") int code,@JsonProperty("message") String message){  this.code=code;  this.message=message;}  }
class C{  private static void createFontAttribute(CSS.Attribute a,AttributeSet from,MutableAttributeSet to){  MutableAttributeSet fontAttr=(MutableAttributeSet)to.getAttribute(HTML.Tag.FONT);  if (fontAttr == null) {    fontAttr=new SimpleAttributeSet();    to.addAttribute(HTML.Tag.FONT,fontAttr);  }  String htmlValue=from.getAttribute(a).toString();  if (a == CSS.Attribute.FONT_FAMILY) {    fontAttr.addAttribute(HTML.Attribute.FACE,htmlValue);  } else   if (a == CSS.Attribute.FONT_SIZE) {    fontAttr.addAttribute(HTML.Attribute.SIZE,htmlValue);  } else   if (a == CSS.Attribute.COLOR) {    fontAttr.addAttribute(HTML.Attribute.COLOR,htmlValue);  }}  }
class C{  public static final int bitscanForward(long bitboard){  return bitScanForwardDeBruijn64(bitboard);}  }
class C{  public void start(){  if (!isStarted) {    isStarted=true;    postInvalidateOnAnimation();  }}  }
class C{  String rrToString(){  StringBuffer sb=new StringBuffer();  sb.append(footprint);  sb.append(" ");  sb.append(alg);  sb.append(" ");  sb.append(digestid);  if (digest != null) {    sb.append(" ");    sb.append(base16.toString(digest));  }  return sb.toString();}  }
class C{  public SourceRange csp(List<? extends JCTree> trees){  if ((trees == null) || !(trees.nonEmpty()))   return null;  SourceRange list_sr=new SourceRange();  for (List<? extends JCTree> l=trees; l.nonEmpty(); l=l.tail) {    list_sr.mergeWith(csp(l.head));  }  positions.put(trees,list_sr);  return list_sr;}  }
class C{  private void updatePropertiesFileWithRefreshIntervalOverride(String refreshIntervalSecs) throws Exception {  properties.put(ReloadablePropertySource.REFRESH_INTERVAL_SECS_OVERRIDE_KEY,refreshIntervalSecs);  updatePropertiesFile();}  }
class C{  public boolean isCostFrozen(){  Object oo=get_Value(COLUMNNAME_IsCostFrozen);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void addTrace(Trace trace){  traceList.add(trace);}  }
class C{  @RequestProcessing(value="/error/{statusCode}",method={HTTPRequestMethod.GET,HTTPRequestMethod.POST}) @Before(adviceClass=StopwatchStartAdvice.class) @After(adviceClass=StopwatchEndAdvice.class) public void handleErrorPage(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response,final String statusCode) throws Exception {  if (StringUtils.equals("GET",request.getMethod())) {    final String requestURI=request.getRequestURI();    final String templateName=statusCode + ".ftl";    LOGGER.log(Level.TRACE,"Shows error page[requestURI={0}, templateName={1}]",new Object[]{requestURI,templateName});    final AbstractFreeMarkerRenderer renderer=new SkinRenderer();    renderer.setTemplateName("error/" + templateName);    context.setRenderer(renderer);    final Map<String,Object> dataModel=renderer.getDataModel();    dataModel.putAll(langPropsService.getAll(Latkes.getLocale()));    filler.fillHeaderAndFooter(request,response,dataModel);  } else {    context.renderJSON().renderMsg(statusCode);  }}  }
class C{  public PipelineConfigurationJson createPipeline(String pipelineName,String description) throws ApiException {  Object postBody=null;  byte[] postBinaryBody=null;  if (pipelineName == null) {    throw new ApiException(400,"Missing the required parameter 'pipelineName' when calling createPipeline");  }  String path="/v1/pipeline/{pipelineName}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pipelineName" + "\\}",apiClient.escapeString(pipelineName.toString()));  List<Pair> queryParams=new ArrayList<Pair>();  Map<String,String> headerParams=new HashMap<String,String>();  Map<String,Object> formParams=new HashMap<String,Object>();  queryParams.addAll(apiClient.parameterToPairs("","description",description));  final String[] accepts={"application/json"};  final String accept=apiClient.selectHeaderAccept(accepts);  final String[] contentTypes={};  final String contentType=apiClient.selectHeaderContentType(contentTypes);  String[] authNames=new String[]{"basic"};  TypeRef returnType=new TypeRef<PipelineConfigurationJson>(){  };  return apiClient.invokeAPI(path,"PUT",queryParams,postBody,postBinaryBody,headerParams,formParams,accept,contentType,authNames,returnType);}  }
class C{  public static void registerDemos(AimaDemoFrame frame){  frame.addApp(RoutePlannerApp.class);  frame.addApp(OsmAgentApp.class);  frame.addApp(SearchDemoOsmAgentApp.class);}  }
class C{  public void install(StyledTextXtextAdapter xtextStyledText,XtextSourceViewer sourceViewer,HighlightingPresenter presenter){  this.presenter=presenter;  this.styledTextXtextAdapter=xtextStyledText;  this.sourceViewer=sourceViewer;  if (calculator != null) {    if (styledTextXtextAdapter.getXtextDocument() != null)     styledTextXtextAdapter.getXtextDocument().addModelListener(this);    sourceViewer.addTextInputListener(this);  }  refresh();}  }
class C{  public Object[] buildParameters(Object[] firstParameters,Method method,QueryParams queryParams,Class<? extends Annotation> annotationType){  int parametersLength=method.getParameterTypes().length;  if (firstParameters.length > 0 && parametersLength < 1) {    throw new RepositoryMethodException(String.format("Method with %s annotation should have at least one parameter.",annotationType));  }  int parametersToResolve=parametersLength - firstParameters.length;  Object[] additionalParameters=new Object[parametersToResolve];  for (int i=firstParameters.length; i < parametersLength; i++) {    Class<?> parameterType=method.getParameterTypes()[i];    if (QueryParams.class.equals(parameterType)) {      additionalParameters[i - firstParameters.length]=queryParams;    } else {      additionalParameters[i - firstParameters.length]=parameterProvider.provide(method,i);    }  }  return concatenate(firstParameters,additionalParameters);}  }
class C{  public Boolean isStoragePolicySupported(){  return storagePolicySupported;}  }
class C{  public Millisecond(int millisecond,int second,int minute,int hour,int day,int month,int year){  this(millisecond,new Second(second,minute,hour,day,month,year));}  }
class C{  public static <T>T root(TreeDef.Parented<T> treeDef,T node){  T lastParent;  T parent=node;  do {    lastParent=parent;    parent=treeDef.parentOf(lastParent);  } while (parent != null);  return lastParent;}  }
class C{  public boolean allocateIt(){  if (getC_Invoice_ID() != 0) {    return allocateInvoice();  }  if (allocatePaySelection())   return true;  if (getC_Order_ID() != 0)   return false;  MPaymentAllocate[] pAllocs=MPaymentAllocate.get(this);  if (pAllocs.length == 0)   return false;  MAllocationHdr alloc=new MAllocationHdr(getCtx(),false,getDateTrx(),getC_Currency_ID(),Msg.translate(getCtx(),"C_Payment_ID") + ": " + getDocumentNo(),get_TrxName());  alloc.setAD_Org_ID(getAD_Org_ID());  if (!alloc.save()) {    log.severe("P.Allocations not created");    return false;  }  for (int i=0; i < pAllocs.length; i++) {    MPaymentAllocate pa=pAllocs[i];    MAllocationLine aLine=null;    if (isReceipt())     aLine=new MAllocationLine(alloc,pa.getAmount(),pa.getDiscountAmt(),pa.getWriteOffAmt(),pa.getOverUnderAmt()); else     aLine=new MAllocationLine(alloc,pa.getAmount().negate(),pa.getDiscountAmt().negate(),pa.getWriteOffAmt().negate(),pa.getOverUnderAmt().negate());    aLine.setDocInfo(pa.getC_BPartner_ID(),0,pa.getC_Invoice_ID());    aLine.setPaymentInfo(getC_Payment_ID(),0);    if (!aLine.save(get_TrxName()))     log.warning("P.Allocations - line not saved"); else {      pa.setC_AllocationLine_ID(aLine.getC_AllocationLine_ID());      pa.saveEx();    }  }  alloc.processIt(DocAction.ACTION_Complete);  m_processMsg="@C_AllocationHdr_ID@: " + alloc.getDocumentNo();  return alloc.save(get_TrxName());}  }
class C{  public boolean connect(final String address){  if (mBluetoothAdapter == null || address == null) {    Log.w(TAG,"BluetoothAdapter not initialized or unspecified address.");    return false;  }  if (mBluetoothDeviceAddress != null && address.equals(mBluetoothDeviceAddress) && mBluetoothGatt != null) {    Log.d(TAG,"Trying to use an existing mBluetoothGatt for connection.");    if (mBluetoothGatt.connect()) {      return true;    } else {      return false;    }  }  final BluetoothDevice device=mBluetoothAdapter.getRemoteDevice(address);  if (device == null) {    Log.w(TAG,"Device not found.  Unable to connect.");    return false;  }  mBluetoothGatt=device.connectGatt(this,false,mGattCallback);  Log.d(TAG,"Trying to create a new connection.");  mBluetoothDeviceAddress=address;  return true;}  }
class C{  public ProgressHelper(Executor executor){  super();  this.executor=executor;  statistics=new DescriptiveStatistics(25);  listeners=EventListenerSupport.create(ProgressListener.class);}  }
class C{  public boolean applyTemplateToNode(ElemTemplateElement xslInstruction,ElemTemplate template,int child) throws TransformerException {  DTM dtm=m_xcontext.getDTM(child);  short nodeType=dtm.getNodeType(child);  boolean isDefaultTextRule=false;  boolean isApplyImports=false;  isApplyImports=((xslInstruction == null) ? false : xslInstruction.getXSLToken() == Constants.ELEMNAME_APPLY_IMPORTS);  if (null == template || isApplyImports) {    int maxImportLevel, endImportLevel=0;    if (isApplyImports) {      maxImportLevel=template.getStylesheetComposed().getImportCountComposed() - 1;      endImportLevel=template.getStylesheetComposed().getEndImportCountComposed();    } else {      maxImportLevel=-1;    }    if (isApplyImports && (maxImportLevel == -1)) {      template=null;    } else {      XPathContext xctxt=m_xcontext;      try {        xctxt.pushNamespaceContext(xslInstruction);        QName mode=this.getMode();        if (isApplyImports)         template=m_stylesheetRoot.getTemplateComposed(xctxt,child,mode,maxImportLevel,endImportLevel,m_quietConflictWarnings,dtm); else         template=m_stylesheetRoot.getTemplateComposed(xctxt,child,mode,m_quietConflictWarnings,dtm);      }  finally {        xctxt.popNamespaceContext();      }    }    if (null == template) {switch (nodeType) {case DTM.DOCUMENT_FRAGMENT_NODE:case DTM.ELEMENT_NODE:        template=m_stylesheetRoot.getDefaultRule();      break;case DTM.CDATA_SECTION_NODE:case DTM.TEXT_NODE:case DTM.ATTRIBUTE_NODE:    template=m_stylesheetRoot.getDefaultTextRule();  isDefaultTextRule=true;break;case DTM.DOCUMENT_NODE:template=m_stylesheetRoot.getDefaultRootRule();break;default :return false;}}}try {pushElemTemplateElement(template);m_xcontext.pushCurrentNode(child);pushPairCurrentMatched(template,child);if (!isApplyImports) {DTMIterator cnl=new org.apache.xpath.NodeSetDTM(child,m_xcontext.getDTMManager());m_xcontext.pushContextNodeList(cnl);}if (isDefaultTextRule) {switch (nodeType) {case DTM.CDATA_SECTION_NODE:case DTM.TEXT_NODE:ClonerToResultTree.cloneToResultTree(child,nodeType,dtm,getResultTreeHandler(),false);break;case DTM.ATTRIBUTE_NODE:dtm.dispatchCharactersEvents(child,getResultTreeHandler(),false);break;}} else {m_xcontext.setSAXLocator(template);m_xcontext.getVarStack().link(template.m_frameSize);executeChildTemplates(template,true);}} catch (org.xml.sax.SAXException se) {throw new TransformerException(se);} finally {if (!isDefaultTextRule) m_xcontext.getVarStack().unlink();m_xcontext.popCurrentNode();if (!isApplyImports) {m_xcontext.popContextNodeList();}popCurrentMatched();popElemTemplateElement();}return true;}  }
class C{  @Override public Object clone(){  PDFTextFormat newFormat=new PDFTextFormat();  newFormat.setCharSpacing(getCharSpacing());  newFormat.setWordSpacing(getWordSpacing());  newFormat.setHorizontalScale(getHorizontalScale());  newFormat.setLeading(getLeading());  newFormat.setTextFormatMode(getMode());  newFormat.setRise(getRise());  newFormat.setFont(getFont(),getFontSize());  return newFormat;}  }
class C{  public MarketplaceRemovedException(String message){  super(message);}  }
class C{  public int hashCode(){  return getName().hashCode();}  }
class C{  public static void stopServer(int port,String password,int shutdownMode){  if (port == 0) {    for (    int p : SERVERS.keySet().toArray(new Integer[0])) {      if (p != 0) {        stopServer(p,password,shutdownMode);      }    }    return;  }  TcpServer server=SERVERS.get(port);  if (server == null) {    return;  }  if (!server.managementPassword.equals(password)) {    return;  }  if (shutdownMode == SHUTDOWN_NORMAL) {    server.stopManagementDb();    server.stop=true;    try {      Socket s=NetUtils.createLoopbackSocket(port,false);      s.close();    } catch (    Exception e) {    }  } else   if (shutdownMode == SHUTDOWN_FORCE) {    server.stop();  }  server.shutdown();}  }
class C{  public static Script createScript(){  return Script.builder().name("Test Script " + generateStringOfLength(15)).comments("Test Comments").creator("Test Creator").productName("Test Product Name").runtime(10).build();}  }
class C{  public boolean isUseLinearFilter(){  return useLinearFilter;}  }
class C{  public static void register(String id,Algorithm algorithm){  JavaUtils.checkRegisterPermission();  algorithmsMap.put(id,algorithm);}  }
class C{  public static void initialize(Class<?>... classes){  for (  Class<?> clazz : classes) {    try {      Class.forName(clazz.getName(),true,clazz.getClassLoader());    } catch (    ClassNotFoundException e) {      throw new AssertionError(e);    }  }}  }
class C{  @Override default CompletableFuture<Long> sumLong(final ToLongFunction<? super T> fn){  return CompletableFuture.supplyAsync(null,getExec());}  }
class C{  private void writeHourlyCausedDelayForEachPerson(){  SortedMap<Double,Map<Id<Person>,Double>> timeBin2CausingPerson2Delay=getCausingPersonDelay(noOfTimeBins);  BufferedWriter writer=IOUtils.getBufferedWriter(runDir + "/analysis/timeBin2Person2UserGroup2CausedDelay_" + congestionImpl+ ".txt");  try {    writer.write("timeBin \t personId \t userGroup \t delayInHr \n");    for (    double d : timeBin2CausingPerson2Delay.keySet()) {      for (      Id<Person> personId : timeBin2CausingPerson2Delay.get(d).keySet()) {        writer.write(d + "\t" + personId+ "\t"+ pf.getMunichUserGroupFromPersonId(personId)+ "\t"+ timeBin2CausingPerson2Delay.get(d).get(personId) / 3600 + "\n");      }    }    writer.close();  } catch (  Exception e) {    throw new RuntimeException("Data is not written in file. Reason: " + e);  }}  }
class C{  private static Region rotateWithLeftChild(Region k2){  Region k1=k2.left;  k2.left(k1.right);  k1.right(k2);  return k1;}  }
class C{  public static void register(Map<String,Taglet> tagletMap){  if (tagletMap.containsKey(NAME)) {    tagletMap.remove(NAME);  }  tagletMap.put(NAME,new ConfigurationParameters());}  }
class C{  public Complex divide(Complex secondComplex){  return new Complex((a * secondComplex.a + b * secondComplex.b) / (Math.pow(secondComplex.a,2) + Math.pow(secondComplex.b,2)),(b * secondComplex.a - a * secondComplex.b) / (Math.pow(secondComplex.a,2) + Math.pow(secondComplex.b,2)));}  }
class C{  public String readFileContent(File file){  StringBuilder fileContentBuilder=new StringBuilder();  if (file.exists()) {    String stringLine;    try {      FileReader fileReader=new FileReader(file);      BufferedReader bufferedReader=new BufferedReader(fileReader);      boolean newLine=false;      while ((stringLine=bufferedReader.readLine()) != null) {        if (newLine) {          fileContentBuilder.append("\n");        }        fileContentBuilder.append(stringLine);        newLine=true;      }      bufferedReader.close();      fileReader.close();    } catch (    FileNotFoundException e) {      e.printStackTrace();    }catch (    IOException e) {      e.printStackTrace();    }  }  return fileContentBuilder.toString();}  }
class C{  protected void printComment(IssueCommentsEntry entry){  System.out.println(DIVIDER);  if (entry.getId() != null) {    String commentId=getCommentId(entry.getId());    System.out.printf("Comment #%s:\t%s\n",commentId,entry.getId());  } else {    System.out.println("Comment");  }  Person author=entry.getAuthors().get(0);  printPerson("Author",author.getName(),author.getUri());  TextContent textContent=(TextContent)entry.getContent();  if ((textContent != null) && (textContent.getContent() != null)) {    HtmlTextConstruct textConstruct=(HtmlTextConstruct)textContent.getContent();    System.out.println("\tComment\n\t\t" + textConstruct.getHtml());  }  if (entry.hasUpdates()) {    Updates updates=entry.getUpdates();    if (updates.hasSummary()) {      System.out.println("\tSummary\n\t\t" + updates.getSummary().getValue());    }    if (updates.hasStatus()) {      System.out.println("\tStatus\n\t\t" + updates.getStatus().getValue());    }    if (updates.hasOwnerUpdate()) {      System.out.println("\tOwner\n\t\t" + updates.getOwnerUpdate().getValue());    }    if (updates.getLabels().size() > 0) {      System.out.println("\tLabel");      for (      Label label : updates.getLabels()) {        System.out.println("\t\t" + label.getValue());      }    }    if (updates.getCcUpdates().size() > 0) {      System.out.println("\tCC");      for (      CcUpdate cc : updates.getCcUpdates()) {        System.out.println("\t\t" + cc.getValue());      }    }    if (updates.getBlockedOnUpdates().size() > 0) {      System.out.println("\tBlockedOnUpdate");      for (      BlockedOnUpdate blockedOnUpdate : updates.getBlockedOnUpdates()) {        System.out.println("\t\t" + blockedOnUpdate.getValue());      }    }    if (updates.hasMergedIntoUpdate()) {      System.out.println("\tMergedIntoUpdate\n\t\t" + updates.getMergedIntoUpdate().getValue());    }  }}  }
class C{  @Override public void addPropertiesFile(String propertiesFile){  this.propertiesFiles.add(propertiesFile);}  }
class C{  private String quotedAV() throws IOException {  pos++;  beg=pos;  end=beg;  while (true) {    if (pos == chars.length) {      throw new IOException("Invalid distinguished name string");    }    if (chars[pos] == '"') {      pos++;      break;    } else     if (chars[pos] == '\\') {      chars[end]=getEscaped();    } else {      chars[end]=chars[pos];    }    pos++;    end++;  }  for (; pos < chars.length && chars[pos] == ' '; pos++) {  }  return new String(chars,beg,end - beg);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public void writeIncremental(Instance inst) throws IOException {  int writeMode=getWriteMode();  Instances structure=getInstances();  PrintWriter outW=null;  if (getRetrieval() == BATCH || getRetrieval() == NONE) {    throw new IOException("Batch and incremental saving cannot be mixed.");  }  if (getWriter() != null) {    outW=new PrintWriter(getWriter());  }  if (writeMode == WAIT) {    if (structure == null) {      setWriteMode(CANCEL);      if (inst != null) {        System.err.println("Structure(Header Information) has to be set in advance");      }    } else {      setWriteMode(STRUCTURE_READY);    }    writeMode=getWriteMode();  }  if (writeMode == CANCEL) {    if (outW != null) {      outW.close();    }    cancel();  }  if (writeMode == STRUCTURE_READY) {    setWriteMode(WRITE);    if (!getNoHeaderRow()) {      if (retrieveFile() == null && outW == null) {        for (int i=0; i < structure.numAttributes(); i++) {          System.out.print(structure.attribute(i).name());          if (i < structure.numAttributes() - 1) {            System.out.print(m_FieldSeparator);          } else {            System.out.println();          }        }      } else {        for (int i=0; i < structure.numAttributes(); i++) {          outW.print(structure.attribute(i).name());          if (i < structure.numAttributes() - 1) {            outW.print(m_FieldSeparator);          } else {            outW.println();          }        }        outW.flush();      }    }    writeMode=getWriteMode();  }  if (writeMode == WRITE) {    if (structure == null) {      throw new IOException("No instances information available.");    }    if (inst != null) {      if (retrieveFile() == null && outW == null) {        System.out.println(inst);      } else {        outW.println(instanceToString(inst));        m_incrementalCounter++;        if (m_incrementalCounter > 100) {          m_incrementalCounter=0;          outW.flush();        }      }    } else {      if (outW != null) {        outW.flush();        outW.close();      }      m_incrementalCounter=0;      resetStructure();      outW=null;      resetWriter();    }  }}  }
class C{  public static byte[] serialize(Object obj){  try {    ByteArrayOutputStream out=new ByteArrayOutputStream();    ObjectOutputStream os=new ObjectOutputStream(out);    os.writeObject(obj);    return out.toByteArray();  } catch (  Throwable e) {    throw DbException.get(ErrorCode.SERIALIZATION_FAILED_1,e,e.toString());  }}  }
class C{  public static void main(String[] args) throws IgniteException {  System.out.println(">>> Start demo...");  try (Ignite ignite=Ignition.start("examples/config/example-ignite.xml")){    CacheJdbcPojoStoreFactory<PersonKey,Person> pojoStoreFactory=new CacheJdbcPojoStoreFactory<>();    pojoStoreFactory.setDataSourceFactory(new H2DataSourceFactory());    CacheConfiguration<PersonKey,Person> cfg=CacheConfig.cache("PersonCache",pojoStoreFactory);    try (IgniteCache<PersonKey,Person> cache=ignite.getOrCreateCache(cfg)){      preload(cache);      readThrough(cache);      transaction(ignite,cache);    }   } }  }
class C{  protected void makeGeometry(ShapeData shapeData){  Object cacheKey=new Geometry.CacheKey(this.getClass(),"Sphere",this.subdivisions);  Geometry geom=(Geometry)this.getGeometryCache().getObject(cacheKey);  if (geom == null) {    shapeData.addMesh(0,new Geometry());    makeUnitSphere(this.subdivisions,shapeData.getMesh(0));    this.getGeometryCache().add(cacheKey,shapeData.getMesh(0));  } else {    shapeData.addMesh(0,geom);  }}  }
class C{  public void addAllOfFromTo(DoubleArrayList elements,int from,int to){  if (!isAllocated)   allocate();  values.addAllOfFromTo(elements,from,to);  this.isSorted=false;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(getNamedItemNS03.class,args);}  }
class C{  @Override public String run(String[] args){  try {    int i=3;    String str="", report="";    Coords coord=new Coords(Integer.parseInt(args[1]) - 1,Integer.parseInt(args[2]) - 1);    IHex hex;    do {      hex=getClient().getGame().getBoard().getHex(coord);      if (hex != null) {        str="Details for hex (" + (coord.getX() + 1) + ", "+ (coord.getY() + 1)+ ") : "+ hex.toString();        if (!getClient().getGame().getOptions().booleanOption("double_blind")) {          Iterator<Entity> entList=getClient().getGame().getEntities(coord);          if (entList.hasNext()) {            str=str + "; Contains entities: " + entList.next().getId();            while (entList.hasNext()) {              str=str + ", " + entList.next().getId();            }          }        }        report=report + str + "\n";      } else {        report=report + "Hex (" + (coord.getX() + 1)+ ", "+ (coord.getY() + 1)+ ") is not on the board.\n";      }      if (i < args.length) {        coord=coord.translated(args[i]);      }      i++;    } while (i < args.length);    return report;  } catch (  NumberFormatException nfe) {  }catch (  NullPointerException npe) {  }catch (  IndexOutOfBoundsException ioobe) {  }  return "Error parsing the command.";}  }
class C{  private void assignNodeTags(final Map<INode,Tag> chatters){  for (  final INode node : chatters.keySet()) {    final Tag tag=chatters.get(node);    addToNotesMap(node,tag);  }}  }
class C{  public static @Nullable LocalDate toLocalDate(@Nullable String string){  try {    return string == null ? null : LocalDate.parse(string);  } catch (  IllegalArgumentException e) {    return null;  }}  }
class C{  public GettingInvolvedTooltip(final String textValue,final String logo){  final HBox tooltipContent=new HBox();  final Label text=new Label(textValue);  text.getStyleClass().add("small-font");  tooltipContent.getChildren().addAll(ImageUtils.createIcon(logo,70),text);  tooltipContent.setSpacing(20);  tooltipContent.setPadding(new Insets(0,10,0,0));  setGraphic(tooltipContent);  setAutoHide(false);  setHideOnEscape(true);  setOpacity(0.95);}  }
class C{  void destroy(){  if (sslEngine == null) {    return;  }  try {    sslEngine.closeInbound();  } catch (  SSLException e) {    LOGGER.debug("Unexpected exception from SSLEngine.closeInbound().",e);  }  if (outNetBuffer != null) {    outNetBuffer.capacity(sslEngine.getSession().getPacketBufferSize());  } else {    createOutNetBuffer(0);  }  try {    do {      outNetBuffer.clear();    } while (sslEngine.wrap(emptyBuffer.buf(),outNetBuffer.buf()).bytesProduced() > 0);  } catch (  SSLException e) {  } finally {    outNetBuffer.free();    outNetBuffer=null;  }  sslEngine.closeOutbound();  sslEngine=null;  preHandshakeEventQueue.clear();}  }
class C{  private void init(){  application=this;  injector=RoboGuice.getOrCreateBaseApplicationInjector((Application)this,RoboGuice.DEFAULT_STAGE,(Module)RoboGuice.newDefaultRoboModule(this),(Module)new EdxDefaultModule(this));  injector.injectMembers(this);  if (config.getFabricConfig().isEnabled() && !BuildConfig.DEBUG) {    Fabric.with(this,new CrashlyticsCore(),new Answers());    EventBus.getDefault().register(new CrashlyticsCrashReportObserver());  }  if (config.getNewRelicConfig().isEnabled()) {    NewRelic.withApplicationToken(config.getNewRelicConfig().getNewRelicKey()).withCrashReportingEnabled(false).start(this);  }  registerReceiver(new NetworkConnectivityReceiver(),new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION));  registerReceiver(new NetworkConnectivityReceiver(),new IntentFilter(WifiManager.WIFI_STATE_CHANGED_ACTION));  boolean isOnZeroRatedNetwork=NetworkUtil.isOnZeroRatedNetwork(getApplicationContext(),config);  if (!isOnZeroRatedNetwork && config.getFacebookConfig().isEnabled()) {    com.facebook.Settings.setApplicationId(config.getFacebookConfig().getFacebookAppId());  }  if (needVersionUpgrade(this)) {    injector.getInstance(IStorage.class).repairDownloadCompletionData();  }  Iconify.with(new FontAwesomeModule());  CalligraphyConfig.initDefault(new CalligraphyConfig.Builder().setDefaultFontPath("fonts/OpenSans-Regular.ttf").setFontAttrId(R.attr.fontPath).build());}  }
class C{  private void simpleApply(IDocument document,String string,ConfigurableCompletionProposal proposal) throws BadLocationException {  proposal.setCursorPosition(string.length());  document.replace(proposal.getReplacementOffset(),proposal.getReplacementLength(),string);}  }
class C{  public CoordinateList(){  super();}  }
class C{  public String toString(){  return type.toString();}  }
class C{  private void stopRMIConnectorServer(){  if (!this.agentConfig.isRmiEnabled())   return;  try {    this.rmiConnector.stop();  } catch (  Exception e) {    logger.warn(e.getMessage(),e);  }  try {    ObjectName rmiRegistryNamingName=getRMIRegistryNamingName();    if (this.agentConfig.isRmiRegistryEnabled() && mBeanServer.isRegistered(rmiRegistryNamingName)) {      String[] empty=new String[0];      mBeanServer.invoke(rmiRegistryNamingName,"stop",empty,empty);      MBeanUtil.unregisterMBean(rmiRegistryNamingName);    }  } catch (  MalformedObjectNameException e) {    logger.warn(e.getMessage(),e);  }catch (  InstanceNotFoundException e) {    logger.warn(e.getMessage(),e);  }catch (  ReflectionException e) {    logger.warn(e.getMessage(),e);  }catch (  MBeanException e) {    logger.warn(e.getMessage(),e);  }  try {    ObjectName rmiConnectorServerName=getRMIConnectorServerName();    if (mBeanServer.isRegistered(rmiConnectorServerName)) {      MBeanUtil.unregisterMBean(rmiConnectorServerName);    }  } catch (  MalformedObjectNameException e) {    logger.warn(e.getMessage(),e);  }}  }
class C{  @NotNull private static <T>T notNull(@Nullable T value){  if (value == null) {    throw new IllegalStateException("The value must not be null");  }  return value;}  }
class C{  private double checkarith(){  double d=scannumber();  if (Double.isNaN(d))   aritherror();  return d;}  }
class C{  public CorruptIndexException(String message,String resourceDescription){  this(message,resourceDescription,null);}  }
class C{  private void verifyErrorPayload(JavaResult javaResult) throws Exception {  EchoCommand command=javaResult.getBean(EchoCommand.class);  if (null == command || null == command.getStatus() || HDSConstants.FAILED_STR.equalsIgnoreCase(command.getStatus())) {    Error error=javaResult.getBean(Error.class);    log.info("Error response received from Hitachi server for messageID",command.getMessageID());    log.info("Hitachi command failed with error code:{} with message:{} for request:{}",new Object[]{error.getCode().toString(),error.getDescription(),error.getSource()});    throw HDSException.exceptions.errorResponseReceived(error.getCode(),error.getDescription());  }}  }
class C{  public UCrop withAspectRatio(float x,float y){  mCropOptionsBundle.putFloat(EXTRA_ASPECT_RATIO_X,x);  mCropOptionsBundle.putFloat(EXTRA_ASPECT_RATIO_Y,y);  return this;}  }
class C{  private void dismissDialogs(){  Log.e(t,"Dismiss dialogs");  if (mAlertDialog != null && mAlertDialog.isShowing()) {    mAlertDialog.dismiss();  }}  }
class C{  public StorageAttributeEntity createStorageAttributeEntity(StorageEntity storageEntity,String attributeName,String attributeValue){  StorageAttributeEntity storageAttributeEntity=new StorageAttributeEntity();  storageAttributeEntity.setStorage(storageEntity);  storageAttributeEntity.setName(attributeName);  storageAttributeEntity.setValue(attributeValue);  return storageDao.saveAndRefresh(storageAttributeEntity);}  }
class C{  public String save(){  String outcome=null;  try {    if (isPublicLandingpageSelected()) {      saveDefaultLandingpage();    } else {      saveEnterpriseLandingpage();    }  } catch (  ObjectNotFoundException e) {    ui.handleException(e);    outcome=CONCURRENT_MODIFICATION_ERROR;  }catch (  ConcurrentModificationException e) {    ui.handleException(e);    outcome=CONCURRENT_MODIFICATION_ERROR;  }catch (  SaaSApplicationException e) {    ui.handleException(e);  }  return outcome;}  }
class C{  @Override public void contextInitialized(ServletContextEvent servletContextEvent){  super.contextInitialized(servletContextEvent);  ServletContext servletContext=servletContextEvent.getServletContext();  registerAppServlet(servletContext);  registerDispatchServlet(servletContext);  registerRestApiServlet(servletContext);  registerCubaHttpFilter(servletContext);  registerClassLoaderFilter(servletContext);}  }
class C{  @Override public int hashCode(){  float sum=(float)(width + height);  return Float.floatToIntBits(sum * (sum + 1) / 2 + (float)width);}  }
class C{  @Override public void run(){  amIActive=true;  String demHeader=null;  String outputHeader=null;  float d=0;  int maxRadius=0;  String outputType=null;  boolean useLowest=false;  WhiteboxRaster dem;  WhiteboxRaster output;  int numCols, numRows;  double gridRes=1;  int x=0, y=0, row, col, i, j;  double elevationAB, elevationXY;  int radius;  double distance;  double heightDiff;  double tmpDistance;  double tmpHeightDiff;  boolean downslope;  double noData;  float progress=0;  double rad2deg=180 / Math.PI;  int minX=0, minY=0;  double minElev=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      demHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      d=Float.parseFloat(args[i]);    } else     if (i == 3) {      maxRadius=Integer.parseInt(args[i]);    } else     if (i == 4) {      outputType=args[i].toLowerCase();    } else     if (i == 5) {      useLowest=Boolean.parseBoolean(args[i]);    }  }  if ((demHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    dem=new WhiteboxRaster(demHeader,"r");    numRows=dem.getNumberRows();    numCols=dem.getNumberColumns();    noData=dem.getNoDataValue();    gridRes=dem.getCellSizeX();    output=new WhiteboxRaster(outputHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("blueyellow.pal");    output.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    output.setZUnits("dimensionless");    updateProgress("Loop 1 of 2:",0);    if (useLowest) {      for (row=0; row < numRows; row++) {        for (col=0; col < numCols; col++) {          if (dem.getValue(row,col) == dem.getMinimumValue()) {            minX=col;            minY=row;            minElev=dem.getValue(row,col);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (numRows - 1));        updateProgress("Loop 1 of 2:",(int)progress);      }    }    updateProgress("Loop 2 of 2:",0);    for (row=0; row < numRows; row++) {      for (col=0; col < numCols; col++) {        radius=0;        downslope=false;        heightDiff=0;        distance=Float.MAX_VALUE;        elevationAB=dem.getValue(row,col);        if ((elevationAB != noData) && (elevationAB > dem.getMinimumValue() + d)) {          do {            radius=radius + 1;            for (i=-radius; i <= radius; i++) {              for (j=-radius; j <= radius; j++) {                if (Math.abs(i) > radius - 1 || Math.abs(j) > radius - 1) {                  x=col + i;                  y=row + j;                  elevationXY=dem.getValue(y,x);                  if (elevationXY != noData) {                    if (elevationAB - elevationXY > d) {                      tmpDistance=Math.sqrt(i * i + j * j) * gridRes;                      tmpHeightDiff=elevationAB - elevationXY;                      if (tmpDistance < distance) {                        downslope=true;                        distance=tmpDistance;                        heightDiff=tmpHeightDiff;                      }                    }                  }                }              }            }          } while ((radius < maxRadius) & (downslope == false));          if (downslope == true) {switch (outputType) {case "tangent":              output.setValue(row,col,heightDiff / distance);            break;case "degrees":          output.setValue(row,col,Math.atan(heightDiff / distance) * rad2deg);        break;case "radians":      output.setValue(row,col,Math.atan(heightDiff / distance));    break;case "distance":  output.setValue(row,col,distance);break;}} else if (useLowest == true) {distance=Math.sqrt(Math.pow((col - minX),2) + Math.pow((row - minY),2)) * gridRes;heightDiff=elevationAB - minElev;switch (outputType) {case "tangent":output.setValue(row,col,heightDiff / distance);break;case "degrees":output.setValue(row,col,Math.atan(heightDiff / distance) * rad2deg);break;case "radians":output.setValue(row,col,Math.atan(heightDiff / distance));break;case "distance":output.setValue(row,col,distance);break;}}}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (numRows - 1));updateProgress("Loop 2 of 2:",(int)progress);}output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());dem.close();output.close();returnData(outputHeader);} catch (Exception e) {showFeedback(e.getMessage());} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  private void checkDirExists(String entidad) throws Exception {  int count;  DirsTable table=new DirsTable();  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession());    count=DbSelectFns.selectCount(dbConn,table.getDirTableName(),table.getCountDirIdQual(_id,_name));    if (count > 0) {      count=DbSelectFns.selectCount(dbConn,table.getNodeTableName(),table.getCountDirNodeQual(_parentId));      if (count > 0)       ISicresAdminBasicException.throwException(ISicresAdminDirectoryKeys.EC_DIR_EXITS);    }  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }}  }
class C{  public void addInspector(Inspector i){  inspectors.add(i);  PropertiesList.add(new DisclosurePanel(i.getTitle(),i));  i.setVolatile(isVolatile());  i.setShowsUpdate(false);}  }
class C{  @Override public void respond(String response){  getChannel().send().message(getUser(),response);}  }
class C{  void error(String msg){  System.err.println("Error: " + msg);  errors++;}  }
class C{  @Interruptible public static void initializeAvailableByte(Object o){  JavaHeader.initializeAvailableByte(o);}  }
class C{  public Divider dividerAt(final int x,final int y){  return dividerAt(getModel(),x,y);}  }
class C{  private void streamsRequestError(Set<StreamInfo> expected){  if (expected != null) {    for (    StreamInfo info : expected) {      info.setUpdateFailed();    }  }}  }
class C{  private void newBuilding(int x,int y,int typeId) throws IOException {  log.debug("Adding {} at {}, {}",typeId,x,y);  int type=typeId / OID_RADIX;  Village village=villageManager.getHomeVillage();  Building building=new Building();  building.x=x;  building.y=y;  building.data=typeId;switch (type) {case 1:    village.buildings=appendBuilding(village.buildings,building);  break;case 12:village.traps=appendBuilding(village.traps,building);break;case 18:village.decos=appendBuilding(village.decos,building);break;}dirty=true;}  }
class C{  public final void addElement(final float value){  if (current_item >= max_size) {    checkSize(current_item);  }  items[current_item]=value;  current_item++;}  }
class C{  boolean saveToDb(){  String hostname=mHostnameField.getText().toString().trim();  String portStr=mPortField.getText().toString().trim();  String exclList=mExclusionListField.getText().toString().trim();  int port=0;  int result=validate(hostname,portStr,exclList);  if (result > 0) {    showDialog(ERROR_DIALOG_ID);    return false;  }  if (portStr.length() > 0) {    try {      port=Integer.parseInt(portStr);    } catch (    NumberFormatException ex) {      return false;    }  }  ProxyProperties p=new ProxyProperties(hostname,port,exclList);  ConnectivityManager cm=(ConnectivityManager)getActivity().getSystemService(Context.CONNECTIVITY_SERVICE);  cm.setGlobalProxy(p);  return true;}  }
class C{  public String str(){  throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_STR_NOT_SUPPORTED_XRTREEFRAGSELECTWRAPPER,null));}  }
class C{  public DataSourceInfoGroup(DataSourceInfo dataSourceInfo){  this.setJdbcUrl(dataSourceInfo.getJdbcUrl());  this.setBusyConnections(dataSourceInfo.getBusyConnections());  this.setEstablishedConnections(dataSourceInfo.getEstablishedConnections());  this.setMaxConnections(dataSourceInfo.getMaxConnections());  this.setDataSourceCount(1);}  }
class C{  public Matrix sub(final Matrix another){  QL.require(rows() == another.rows() && cols() == another.cols(),MATRIX_IS_INCOMPATIBLE);  final Matrix result=new Matrix(rows(),cols());  if (this.addr.isContiguous() && another.addr.isContiguous()) {    for (int addr=0; addr < size(); addr++) {      result.$[addr]=this.$[addr] - another.$[addr];    }  } else {    int addr=0;    final Address.MatrixAddress.MatrixOffset toff=this.addr.offset();    final Address.MatrixAddress.MatrixOffset aoff=another.addr.offset();    for (int row=0; row < rows(); row++) {      toff.setRow(row);      aoff.setRow(row);      for (int col=0; col < cols(); col++) {        result.$[addr]=this.$[toff.op()] - another.$[aoff.op()];        addr++;        toff.nextCol();        aoff.nextCol();      }    }  }  return result;}  }
class C{  public void clear(){  removeAll(false);}  }
class C{  public java.lang.String toString(){  return null;}  }
class C{  public void testDynFloatMissingFacet() throws Exception {  checkSortMissingFacet("dyn_floatdv","-1.3","4.2");}  }
class C{  public Key max(){  if (isEmpty())   throw new NoSuchElementException("called max() with empty symbol table");  return max(root).key;}  }
class C{  public void write(final String filename){  PrintStream stream;  try {    stream=new PrintStream(new File(filename));  } catch (  FileNotFoundException e) {    e.printStackTrace();    return;  }  write(stream);  stream.close();}  }
class C{  public synchronized void mouseMove(int x,int y){  peer.mouseMove(x,y);  afterEvent();}  }
class C{  public AttributeAction(DrawingEditor editor,AttributeKey key,Object value){  this(editor,key,value,null,null);}  }
class C{  boolean mergeable(Range r){  return (1 + Math.max(last,r.last) - Math.min(first,r.first)) <= ((1 + r.last - r.first) + (1 + last - first));}  }
class C{  public final void testGetEncodings(){  CertPath cp1=new MyCertPath(testEncoding);  cp1.getEncodings();}  }
class C{  private static boolean isFrameSetDocument(final Document document){  boolean ret=false;  if (document instanceof HTMLDocument) {    HTMLDocument htmlDocument=(HTMLDocument)document;    if (htmlDocument.getIterator(HTML.Tag.FRAME).isValid()) {      ret=true;    }  }  return ret;}  }
class C{  public boolean diff(WorkSource other){  int N=mNum;  if (N != other.mNum) {    return true;  }  final int[] uids1=mUids;  final int[] uids2=other.mUids;  final String[] names1=mNames;  final String[] names2=other.mNames;  for (int i=0; i < N; i++) {    if (uids1[i] != uids2[i]) {      return true;    }    if (names1 != null && names2 != null && !names1[i].equals(names2[i])) {      return true;    }  }  return false;}  }
class C{  protected void handleChangedResources(){  if (!changedResources.isEmpty() && (!isDirty() || handleDirtyConflict())) {    if (isDirty()) {      changedResources.addAll(editingDomain.getResourceSet().getResources());    }    editingDomain.getCommandStack().flush();    updateProblemIndication=false;    for (    Resource resource : changedResources) {      if (resource.isLoaded()) {        resource.unload();        try {          resource.load(Collections.EMPTY_MAP);        } catch (        IOException exception) {          if (!resourceToDiagnosticMap.containsKey(resource)) {            resourceToDiagnosticMap.put(resource,analyzeResourceProblems(resource,exception));          }        }      }    }    if (AdapterFactoryEditingDomain.isStale(editorSelection)) {      setSelection(StructuredSelection.EMPTY);    }    updateProblemIndication=true;    updateProblemIndication();  }}  }
class C{  public HCardParser(Document document,String pageUrl){  this.pageUrl=pageUrl;  String anchor=null;  if (pageUrl != null) {    try {      URL url=new URL(pageUrl);      anchor=url.getRef();    } catch (    MalformedURLException e) {      anchor=null;    }  }  Element searchUnder=null;  if (anchor != null) {    searchUnder=document.getElementById(anchor);  }  if (searchUnder == null) {    searchUnder=document;  }  vcardElements=searchUnder.getElementsByClass("vcard");  Iterator<Element> it=vcardElements.iterator();  while (it.hasNext()) {    Element element=it.next();    if (isChildOf(element,vcardElements)) {      it.remove();    }  }  vcardElementsIt=vcardElements.iterator();}  }
class C{  public MapComparator(List<? extends Object> keys){  this.keys=keys;}  }
class C{  private void writeObject(final java.io.ObjectOutputStream out) throws IOException {  out.writeLong(timeStamp);  out.writeLong(duration);}  }
class C{  public void deleteWWNsFromHostStorageDomain(String systemId,String hsdId,List<String> wwnList,String model) throws Exception {  InputStream responseStream=null;  try {    String removeWWNFromHSDQuery=constructDeleteWWNQuery(systemId,hsdId,wwnList,model);    log.info("Query to delete FC initiators to HostStorageDomain: {}",removeWWNFromHSDQuery);    URI endpointURI=hdsApiClient.getBaseURI();    ClientResponse response=hdsApiClient.post(endpointURI,removeWWNFromHSDQuery);    if (HttpStatus.SC_OK == response.getStatus()) {      responseStream=response.getEntityInputStream();      JavaResult javaResult=SmooksUtil.getParsedXMLJavaResult(responseStream,HDSConstants.SMOOKS_CONFIG_FILE);      verifyErrorPayload(javaResult);      log.info("Remove fc initiators: {} from HSD: {}",wwnList,hsdId);    } else {      throw HDSException.exceptions.invalidResponseFromHDS(String.format("Deleting initiator from HostStorageDomain failed due to response %1$s from server",response.getStatus()));    }  }  finally {    if (null != responseStream) {      try {        responseStream.close();      } catch (      IOException e) {        log.warn("IOException occurred while closing the response stream");      }    }  }}  }
class C{  Item newDouble(final double value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.putByte(DOUBLE).putLong(key.longVal);    result=new Item(index,key);    index+=2;    put(result);  }  return result;}  }
class C{  private String addDeleteCGStep(Workflow workflow,String waitFor,List<VolumeDescriptor> volumeDescriptors) throws InternalException {  String returnStep=waitFor;  Map<URI,Set<URI>> cgVolumeMap=new HashMap<URI,Set<URI>>();  Map<URI,URI> cgProtectionSystemMap=new HashMap<URI,URI>();  boolean validCg=false;  for (  VolumeDescriptor volumeDescriptor : volumeDescriptors) {    Volume volume=_dbClient.queryObject(Volume.class,volumeDescriptor.getVolumeURI());    if (NullColumnValueGetter.isNullURI(volume.getConsistencyGroup())) {      continue;    } else {      validCg=true;    }    if (cgVolumeMap.get(volume.getConsistencyGroup()) == null) {      cgVolumeMap.put(volume.getConsistencyGroup(),new HashSet<URI>());    }    cgVolumeMap.get(volume.getConsistencyGroup()).add(volume.getId());    if (!NullColumnValueGetter.isNullURI(cgProtectionSystemMap.get(volume.getConsistencyGroup())) || !NullColumnValueGetter.isNullURI(volume.getProtectionController())) {      cgProtectionSystemMap.put(volume.getConsistencyGroup(),volume.getProtectionController());    }  }  for (  Entry<URI,Set<URI>> entry : cgVolumeMap.entrySet()) {    URI cgId=entry.getKey();    Set<URI> volumes=entry.getValue();    BlockConsistencyGroup consistencyGroup=_dbClient.queryObject(BlockConsistencyGroup.class,cgId);    boolean deleteEntireCG=RPHelper.cgSourceVolumesContainsAll(_dbClient,consistencyGroup.getId(),volumes);    if (!deleteEntireCG) {      for (      URI volumeURI : volumes) {        Volume volume=_dbClient.queryObject(Volume.class,volumeURI);        if (volume != null && Volume.LinkStatus.FAILED_OVER.name().equalsIgnoreCase(volume.getLinkStatus())) {          String imageAccessEnabledError=String.format("Can not delete or remove protection from volume [%s](%s) " + "while image access is enabled in RecoverPoint",volume.getLabel(),volume.getId());          _log.error(imageAccessEnabledError);          throw DeviceControllerExceptions.recoverpoint.cgDeleteStepInvalidParam(imageAccessEnabledError);        }      }    }    ProtectionSystem rpSystem=_dbClient.queryObject(ProtectionSystem.class,cgProtectionSystemMap.get(cgId));    if (deleteEntireCG) {      deleteEntireCG=RPHelper.validateCGForDelete(_dbClient,rpSystem,cgId,volumes);    }    String cgWaitFor=waitFor;    String stepId=workflow.createStepId();    List<URI> volumeList=new ArrayList<URI>();    volumeList.addAll(volumes);    Workflow.Method cgRemovalExecuteMethod=new Workflow.Method(METHOD_DELETE_CG_STEP,rpSystem.getId(),volumeList,new ArrayList<URI>());    cgWaitFor=workflow.createStep(STEP_DV_REMOVE_CG,"Remove replication set(s) and/or consistency group subtask (if no more volumes) for RP CG: " + consistencyGroup.getLabel(),cgWaitFor,rpSystem.getId(),rpSystem.getSystemType(),this.getClass(),cgRemovalExecuteMethod,null,stepId);  }  if (!validCg) {    return returnStep;  }  return STEP_DV_REMOVE_CG;}  }
class C{  public boolean isLinkConsistent(HGPersistentHandle link){  if (ignoreCache || !graph.isLoaded(link)) {    HGPersistentHandle[] layout=graph.getStore().getLink(link);    if (layout == null && !ignoreMissing)     throw new TestException("The atom handle " + link + " is not available from the HGStore.");    for (int i=2; i < layout.length; i++)     if (!isIncidenceSetMember(link,layout[i]))     return false;  } else {    Object x=graph.get(link);    if (!(x instanceof HGLink))     return true;    HGLink l=(HGLink)x;    for (int i=0; i < l.getArity(); i++)     if (!isIncidenceSetMember(link,graph.getPersistentHandle(l.getTargetAt(i))))     return false;  }  return true;}  }
class C{  public static String formatMessage(final String bundle,final String msgCode){  return formatMessage(bundle,msgCode,null);}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();}throw new IllegalStateException();}  }
class C{  public void projectionChanged(ProjectionEvent e){  Projection proj=setProjection(e);  if (proj == null) {    repaint();    return;  }  if (proj instanceof Cylindrical)   boxy=true; else   boxy=false;  setList(null);  doPrepare();}  }
class C{  public void add(JTaskPaneGroup group){  super.add(group);}  }
class C{  public static void w(String tag,String msg,Throwable tr){  println(WARN,tag,msg,tr);}  }
class C{  public String toString(){  return (tilename);}  }
class C{  public TIntLongHashMap(int initialCapacity,TIntHashingStrategy strategy){  super(initialCapacity,strategy);}  }
class C{  public static final void writeMapXml(Map val,String name,XmlSerializer out) throws XmlPullParserException, java.io.IOException {  if (val == null) {    out.startTag(null,"null");    out.endTag(null,"null");    return;  }  Set s=val.entrySet();  Iterator i=s.iterator();  out.startTag(null,"map");  if (name != null) {    out.attribute(null,"name",name);  }  while (i.hasNext()) {    Map.Entry e=(Map.Entry)i.next();    writeValueXml(e.getValue(),(String)e.getKey(),out);  }  out.endTag(null,"map");}  }
class C{  public int progress(){  return progress(1);}  }
class C{  @Override public void onCreate(SQLiteDatabase sqLiteDatabase){  String sql="CREATE TABLE if not exist POST_TABLE (post_id int primary key,post_title char(100),post_author char(31),post_date char(50),post_content longtext);";  sqLiteDatabase.execSQL(sql);}  }
class C{  public void anonymize(){  for (int i=theAtts.getLength() - 1; i >= 0; i--) {    if (theAtts.getType(i).equals("ID") || theAtts.getQName(i).equals("name")) {      theAtts.removeAttribute(i);    }  }}  }
class C{  private static void loadMessageFormat(String code) throws MessageTranslatorException {  try {    String formatString=getPropAsString(code);    MessageFormat mf=new MessageFormat(formatString);    String[] indexes=removeNamesAndCreateIndex(mf);    messageFormats.put(code,mf);    indexesTable.put(code,indexes);  } catch (  Exception x) {    throw new MessageTranslatorException(x,x.getMessage());  }}  }
class C{  BCRSAPrivateCrtKey(RSAPrivateCrtKey key){  this.modulus=key.getModulus();  this.publicExponent=key.getPublicExponent();  this.privateExponent=key.getPrivateExponent();  this.primeP=key.getPrimeP();  this.primeQ=key.getPrimeQ();  this.primeExponentP=key.getPrimeExponentP();  this.primeExponentQ=key.getPrimeExponentQ();  this.crtCoefficient=key.getCrtCoefficient();}  }
class C{  public float[] absoluteColorimetricToRGB(float[] values){  return perceptualToRGB(values);}  }
class C{  @Override public void patchSwitchCase(int sourceMachinecodeIndex){  int delta=(mIP - sourceMachinecodeIndex) << 2;  int correction=machineCodes[sourceMachinecodeIndex];  int offset=delta + correction;  machineCodes[sourceMachinecodeIndex]=offset;}  }
class C{  synchronized protected void timeout(){  sendNextItem();}  }
class C{  public Bound<T> withSuffix(String nameExtension){  validateOutputComponent(nameExtension);  return new Bound<>(name,filenamePrefix,nameExtension,header,footer,coder,numShards,shardTemplate,validate,writableByteChannelFactory);}  }
class C{  public void updatePosition(View referenceView){  if (referenceView == null) {    return;  }  float referenceRight=referenceView.getX() + referenceView.getMeasuredWidth();  setTranslationX(referenceRight - getMeasuredWidth());  float referenceTop=referenceView.getY();  if (referenceTop < getMeasuredHeight()) {    setTranslationY(referenceTop + referenceView.getMeasuredHeight());    float triangleStartX=getMeasuredWidth() - referenceView.getMeasuredWidth() / 2;    float triangleStartY=0;    mTrianglePath.reset();    mTrianglePath.moveTo(triangleStartX,triangleStartY);    mTrianglePath.lineTo(triangleStartX - mClingTriangleWidth / 2,triangleStartY + mClingTriangleHeight);    mTrianglePath.lineTo(triangleStartX + mClingTriangleWidth / 2,triangleStartY + mClingTriangleHeight);    mTrianglePath.lineTo(triangleStartX,triangleStartY);  } else {    setTranslationY(referenceTop - getMeasuredHeight());    float triangleStartX=getMeasuredWidth() - referenceView.getMeasuredWidth() / 2;    float triangleStartY=getMeasuredHeight();    mTrianglePath.reset();    mTrianglePath.moveTo(triangleStartX,triangleStartY);    mTrianglePath.lineTo(triangleStartX - mClingTriangleWidth / 2,triangleStartY - mClingTriangleHeight);    mTrianglePath.lineTo(triangleStartX + mClingTriangleWidth / 2,triangleStartY - mClingTriangleHeight);    mTrianglePath.lineTo(triangleStartX,triangleStartY);  }  invalidate();}  }
class C{  public static boolean[] decodeBooleans(String flags){  if (flags == null)   return null;  byte[] bytes=Base64.decodeBase64(flags.getBytes());  boolean[] bFlags=new boolean[bytes.length];  for (int i=0; i < bytes.length; i++) {    if (bytes[i] == 1)     bFlags[i]=true; else     bFlags[i]=false;  }  return bFlags;}  }
class C{  public void checkCf(boolean waitAllNodesConverge) throws InterruptedException, ConnectionException {  KeyspaceDefinition kd=clientContext.getCluster().describeKeyspace(_keyspaceName);  Cluster cluster=clientContext.getCluster();  Integer indexGcGrace=isGeoDbsvc() ? null : getIntProperty(DbClientImpl.DB_CASSANDRA_INDEX_GC_GRACE_PERIOD,null);  Iterator<ColumnFamily> it=getCfMap().values().iterator();  String latestSchemaVersion=null;  while (it.hasNext()) {    ColumnFamily cf=it.next();    ColumnFamilyDefinition cfd=kd.getColumnFamily(cf.getName());    String comparator=cf.getColumnSerializer().getComparatorType().getTypeName();    if (comparator.equals("CompositeType")) {      if (cf.getColumnSerializer() instanceof CompositeColumnNameSerializer) {        comparator=CompositeColumnNameSerializer.getComparatorName();      } else       if (cf.getColumnSerializer() instanceof IndexColumnNameSerializer) {        comparator=IndexColumnNameSerializer.getComparatorName();      } else {        throw new IllegalArgumentException();      }    }    Integer cfGcGrace=cf.getColumnSerializer() instanceof IndexColumnNameSerializer ? indexGcGrace : null;    cfGcGrace=getIntProperty(DbClientImpl.DB_CASSANDRA_GC_GRACE_PERIOD_PREFIX + cf.getName(),cfGcGrace);    if (cfd == null) {      cfd=cluster.makeColumnFamilyDefinition().setKeyspace(_keyspaceName).setName(cf.getName()).setComparatorType(comparator).setKeyValidationClass(cf.getKeySerializer().getComparatorType().getTypeName());      TimeSeriesType tsType=TypeMap.getTimeSeriesType(cf.getName());      if (tsType != null && tsType.getCompactOptimized() && _dbCommonInfo != null && Boolean.TRUE.toString().equalsIgnoreCase(_dbCommonInfo.getProperty(DbClientImpl.DB_STAT_OPTIMIZE_DISK_SPACE,"false"))) {        String compactionStrategy=_dbCommonInfo.getProperty(DbClientImpl.DB_CASSANDRA_OPTIMIZED_COMPACTION_STRATEGY,"SizeTieredCompactionStrategy");        _log.info("Setting DB compaction strategy to {}",compactionStrategy);        int gcGrace=Integer.parseInt(_dbCommonInfo.getProperty(DbClientImpl.DB_CASSANDRA_GC_GRACE_PERIOD,"864000"));        _log.info("Setting DB GC grace period to {}",gcGrace);        cfd.setCompactionStrategy(compactionStrategy).setGcGraceSeconds(gcGrace);      } else       if (cfGcGrace != null) {        _log.info("Setting CF:{} gc_grace_period to {}",cf.getName(),cfGcGrace.intValue());        cfd.setGcGraceSeconds(cfGcGrace.intValue());      }      latestSchemaVersion=addColumnFamily(cfd);    } else {      boolean modified=false;      String existingComparator=cfd.getComparatorType();      if (!matchComparator(existingComparator,comparator)) {        _log.info("Comparator mismatch: db {} / schema {}",existingComparator,comparator);        cfd.setComparatorType(comparator);        modified=true;      }      TimeSeriesType tsType=TypeMap.getTimeSeriesType(cf.getName());      if (tsType != null && tsType.getCompactOptimized() && _dbCommonInfo != null) {        String compactionStrategy=_dbCommonInfo.getProperty(DbClientImpl.DB_CASSANDRA_OPTIMIZED_COMPACTION_STRATEGY,"SizeTieredCompactionStrategy");        String existingStrategy=cfd.getCompactionStrategy();        if (existingStrategy == null || !existingStrategy.contains(compactionStrategy)) {          _log.info("Setting DB compaction strategy to {}",compactionStrategy);          cfd.setCompactionStrategy(compactionStrategy);          modified=true;        }        int gcGrace=Integer.parseInt(_dbCommonInfo.getProperty(DbClientImpl.DB_CASSANDRA_GC_GRACE_PERIOD,"864000"));        if (gcGrace != cfd.getGcGraceSeconds()) {          _log.info("Setting DB GC grace period to {}",gcGrace);          cfd.setGcGraceSeconds(gcGrace);          modified=true;        }      } else       if (cfGcGrace != null && cfd.getGcGraceSeconds() != cfGcGrace.intValue()) {        _log.info("Setting CF:{} gc_grace_period to {}",cf.getName(),cfGcGrace.intValue());        cfd.setGcGraceSeconds(cfGcGrace.intValue());        modified=true;      }      if (modified) {        latestSchemaVersion=updateColumnFamily(cfd);      }    }  }  if (latestSchemaVersion != null) {    if (waitAllNodesConverge) {      clientContext.waitForSchemaAgreement(latestSchemaVersion,_statusChecker.getClusterNodeCount());    } else {      clientContext.waitForSchemaAgreement(latestSchemaVersion,-1);    }  }}  }
class C{  public void load(@NonNull View succeedView){  addView(mSucceedView,0);}  }
class C{  public void unmountAndDetach(URI exportGroupId,URI hostId,URI vCenterId,URI vcenterDatacenter,String stepId){  WorkflowStepCompleter.stepExecuting(stepId);  try {    Host esxHost=_dbClient.queryObject(Host.class,hostId);    Vcenter vCenter=_dbClient.queryObject(Vcenter.class,vCenterId);    VcenterDataCenter vCenterDataCenter=_dbClient.queryObject(VcenterDataCenter.class,vcenterDatacenter);    ExportGroup exportGroup=_dbClient.queryObject(ExportGroup.class,exportGroupId);    VCenterAPI api=VcenterDiscoveryAdapter.createVCenterAPI(vCenter);    HostSystem hostSystem=api.findHostSystem(vCenterDataCenter.getLabel(),esxHost.getLabel());    HostStorageAPI storageAPI=new HostStorageAPI(hostSystem);    if (exportGroup != null && exportGroup.getVolumes() != null) {      for (      String volume : exportGroup.getVolumes().keySet()) {        BlockObject blockObject=BlockObject.fetch(_dbClient,URI.create(volume));        if (blockObject != null && blockObject.getTag() != null) {          for (          ScopedLabel tag : blockObject.getTag()) {            String tagValue=tag.getLabel();            if (tagValue != null && tagValue.startsWith(VMFS_DATASTORE_PREFIX)) {              String datastoreName=getDatastoreName(tagValue);              Datastore datastore=api.findDatastore(vCenterDataCenter.getLabel(),datastoreName);              if (datastore != null) {                boolean storageIOControlEnabled=datastore.getIormConfiguration().isEnabled();                if (storageIOControlEnabled) {                  setStorageIOControl(api,datastore,false);                }                _log.info("Unmount datastore " + datastore.getName() + " from host "+ esxHost.getLabel());                storageAPI.unmountVmfsDatastore(datastore);                if (storageIOControlEnabled) {                  setStorageIOControl(api,datastore,true);                }              }            }          }        }        for (        HostScsiDisk entry : storageAPI.listScsiDisks()) {          if (VolumeWWNUtils.wwnMatches(VMwareUtils.getDiskWwn(entry),blockObject.getWWN())) {            _log.info("Detach SCSI Lun " + entry.getCanonicalName() + " from host "+ esxHost.getLabel());            storageAPI.detachScsiLun(entry);          }        }        storageAPI.refreshStorage();      }    }    WorkflowStepCompleter.stepSucceded(stepId);  } catch (  Exception ex) {    _log.error(ex.getMessage(),ex);    WorkflowStepCompleter.stepFailed(stepId,DeviceControllerException.errors.jobFailed(ex));  }}  }
class C{  public ConsulTopologyFraction url(String url) throws MalformedURLException {  this.url=new URL(url);  return this;}  }
class C{  public Socket connectForServer(InetAddress inetadd,int port,int socketBufferSize) throws IOException {  return connect(inetadd,port,0,null,false,socketBufferSize);}  }
class C{  public DPolicyMappings(JDialog parent){  super(parent);  setTitle(res.getString("DPolicyMappings.Title"));  initComponents();}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.VIRTUAL_BASE_TYPE;}  }
class C{  public UninstallationResult calculateUninstallChanges(Set<AddOn> selectedAddOns){  List<AddOn> remainingAddOns=new ArrayList<>(installedAddOns.getAddOns());  remainingAddOns.removeAll(selectedAddOns);  Set<AddOn> uninstallations=new HashSet<>();  List<AddOn> addOnsToCheck=new ArrayList<>(remainingAddOns);  while (!addOnsToCheck.isEmpty()) {    AddOn addOn=addOnsToCheck.remove(0);    AddOn.AddOnRunRequirements requirements=addOn.calculateRunRequirements(remainingAddOns);    if (!requirements.hasDependencyIssue()) {      addOnsToCheck.removeAll(requirements.getDependencies());    } else     if (AddOn.InstallationStatus.UNINSTALLATION_FAILED != addOn.getInstallationStatus()) {      uninstallations.add(addOn);    }  }  for (Iterator<AddOn> it=uninstallations.iterator(); it.hasNext(); ) {    AddOn addOn=it.next();    if (addOn.calculateRunRequirements(installedAddOns.getAddOns()).hasDependencyIssue() && !containsAny(addOn.getIdsAddOnDependencies(),uninstallations)) {      it.remove();    }  }  remainingAddOns.removeAll(uninstallations);  Set<Extension> extensions=new HashSet<>();  for (  AddOn addOn : remainingAddOns) {    if (addOn.hasExtensionsWithDeps()) {      for (      Extension ext : addOn.getLoadedExtensions()) {        AddOn.AddOnRunRequirements requirements=addOn.calculateExtensionRunRequirements(ext,remainingAddOns);        if (!requirements.getExtensionRequirements().isEmpty()) {          AddOn.ExtensionRunRequirements extReqs=requirements.getExtensionRequirements().get(0);          if (!extReqs.isRunnable()) {            extensions.add(ext);          }        }      }    }  }  uninstallations.addAll(selectedAddOns);  return new UninstallationResult(selectedAddOns,uninstallations,extensions);}  }
class C{  protected int[] mergeValues(double[][] counts){  int[] indicators=new int[counts.length];  for (int i=0; i < indicators.length; i++) {    indicators[i]=i;  }  while (counts.length > 1) {    double[][] reducedCounts=new double[2][];    double minVal=Double.MAX_VALUE;    int toMergeOne=-1;    int toMergeTwo=-1;    for (int i=0; i < counts.length; i++) {      reducedCounts[0]=counts[i];      for (int j=i + 1; j < counts.length; j++) {        reducedCounts[1]=counts[j];        double val=ContingencyTables.chiVal(reducedCounts,true);        if (val < minVal) {          minVal=val;          toMergeOne=i;          toMergeTwo=j;        }      }    }    if (Statistics.chiSquaredProbability(minVal,reducedCounts[0].length - 1) <= m_SigLevel) {      double val=ContingencyTables.chiVal(counts,true);      int df=(counts[0].length - 1) * (counts.length - 1);      double originalSig=Statistics.chiSquaredProbability(val,df);      double adjustedSig=originalSig * BFfactor(indicators.length,counts.length);      if (m_Debug) {        System.err.println("Original p-value: " + originalSig + "\tAdjusted p-value: "+ adjustedSig);      }      if (!(adjustedSig <= m_SigLevel)) {        for (int i=0; i < indicators.length; i++) {          indicators[i]=0;        }      }      break;    }    double[][] newCounts=new double[counts.length - 1][];    for (int i=0; i < counts.length; i++) {      if (i < toMergeTwo) {        newCounts[i]=counts[i];      } else       if (i == toMergeTwo) {        for (int k=0; k < counts[i].length; k++) {          newCounts[toMergeOne][k]+=counts[i][k];        }      } else {        newCounts[i - 1]=counts[i];      }    }    for (int i=0; i < indicators.length; i++) {      if (indicators[i] >= toMergeTwo) {        if (indicators[i] == toMergeTwo) {          indicators[i]=toMergeOne;        } else {          indicators[i]--;        }      }    }    counts=newCounts;  }  return indicators;}  }
class C{  @Override public int size(){  return this._map.size();}  }
class C{  @Override public void datasetChanged(DatasetChangeEvent event){  this.lastEvent=event;}  }
class C{  public PeerAddress(NetworkParameters params,String hostname,int port){  super(params);  this.hostname=hostname;  this.port=port;  this.protocolVersion=params.getProtocolVersionNum(NetworkParameters.ProtocolVersion.CURRENT);  this.services=BigInteger.ZERO;}  }
class C{  private static String[] toTrimmedTokens(String s,char sep){  int toks=0, sSize=s.length();  boolean disregardDoubles=sep == ' ';  int p=0;  for (int i=0; i < sSize; i++) {    char c=s.charAt(i);    if (c == '(') {      p++;    } else     if (c == ')') {      p--;    } else     if (p == 0 && c == sep) {      toks++;      while (disregardDoubles && i < sSize - 1 && s.charAt(i + 1) == ' ') {        i++;      }    }    if (p < 0) {      throw new IllegalArgumentException("Unbalanced parentheses: '" + s + "'");    }  }  if (p != 0) {    throw new IllegalArgumentException("Unbalanced parentheses: '" + s + "'");  }  if (toks == 0) {    return new String[]{s.trim()};  }  String[] retArr=new String[toks + 1];  int st=0, pNr=0;  p=0;  for (int i=0; i < sSize; i++) {    char c=s.charAt(i);    if (c == '(') {      p++;    } else     if (c == ')') {      p--;    } else     if (p == 0 && c == sep) {      retArr[pNr++]=s.substring(st,i).trim();      st=i + 1;      while (disregardDoubles && i < sSize - 1 && s.charAt(i + 1) == ' ') {        i++;      }    }  }  retArr[pNr++]=s.substring(st,sSize).trim();  return retArr;}  }
class C{  private void fillRunsJDKWorstCase(){  long runningTotal=0;  long Y=minRun + 4;  long X=minRun;  while (runningTotal + Y + X <= length) {    runningTotal+=X + Y;    generateJDKWrongElem(X);    runs.add(0,Y);    X=Y + runs.get(1) + 1;    Y+=X + 1;  }  if (runningTotal + X <= length) {    runningTotal+=X;    generateJDKWrongElem(X);  }  runs.add(length - runningTotal);}  }
class C{  public String dc_subject(final char separator){  if (this.keywords.size() == 0)   return "";  final StringBuilder sb=new StringBuilder(this.keywords.size() * 8);  for (  final String s : this.keywords)   sb.append(s).append(separator);  return sb.substring(0,sb.length() - 1);}  }
class C{  public static byte[] encodeModQ(int[] a,int q){  int bitsPerCoeff=31 - Integer.numberOfLeadingZeros(q);  int numBits=a.length * bitsPerCoeff;  int numBytes=(numBits + 7) / 8;  byte[] data=new byte[numBytes];  int bitIndex=0;  int byteIndex=0;  for (int i=0; i < a.length; i++) {    for (int j=0; j < bitsPerCoeff; j++) {      int currentBit=(a[i] >> j) & 1;      data[byteIndex]|=currentBit << bitIndex;      if (bitIndex == 7) {        bitIndex=0;        byteIndex++;      } else {        bitIndex++;      }    }  }  return data;}  }
class C{  public static AfterProcessingTimeStateMachine pastFirstElementInPane(){  return new AfterProcessingTimeStateMachine(IDENTITY);}  }
class C{  public MultiMarkupFactory(){}  }
class C{  public void arc(double x,double y,double r,double angle1,double angle2){  if (r < 0)   throw new IllegalArgumentException("arc radius can't be negative");  while (angle2 < angle1)   angle2+=360;  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(2 * r);  double hs=factorY(2 * r);  if (ws <= 1 && hs <= 1)   pixel(x,y); else   offscreen.draw(new Arc2D.Double(xs - ws / 2,ys - hs / 2,ws,hs,angle1,angle2 - angle1,Arc2D.OPEN));  draw();}  }
class C{  protected void fixElements(){  for (  Element fosterElement : fosterElements) {    Element lastTable=findLastTable(fosterElement);    Node fosterElementParent=fosterElement.getParentNode();    Node[] fosterChilds=fosterElement.getChildNodes();    for (    Node fosterChild : fosterChilds) {      if (fosterChild.getNodeType() == Node.NodeType.ELEMENT) {        if (isOneOfTableElements((Element)fosterChild)) {          fosterChild.detachFromParent();          fosterElementParent.insertBefore(fosterChild,fosterElement);        }      }    }    fosterElement.detachFromParent();    lastTable.getParentNode().insertBefore(fosterElement,lastTable);  }}  }
class C{  public final int subindex(Tree tree,int l){  MathVector xp=new MathVector();  double xsc=(pos.value(0) - tree.rmin.value(0)) / tree.rsize;  xp.value(0,Math.floor(IMAX * xsc));  xsc=(pos.value(1) - tree.rmin.value(1)) / tree.rsize;  xp.value(1,Math.floor(IMAX * xsc));  xsc=(pos.value(2) - tree.rmin.value(2)) / tree.rsize;  xp.value(2,Math.floor(IMAX * xsc));  int i=0;  for (int k=0; k < MathVector.NDIM; k++) {    if (((int)xp.value(k) & l) != 0) {      i+=Cell.NSUB >> (k + 1);    }  }  return i;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private static String quoteParam(String param){  if (param.contains("\"") || param.contains("'")) {    throw new IllegalArgumentException("Invalid character in parameter");  }  return "\"" + param + "\"";}  }
class C{  public Settings(Context context){  this.preferences=PreferenceManager.getDefaultSharedPreferences(context);  this.resources=context.getApplicationContext().getResources();}  }
class C{  public HierarchyEvent(Component source,int id,Component changed,Container changedParent){  super(source,id);  this.changed=changed;  this.changedParent=changedParent;}  }
class C{  private void continueToStep3(View targetView3){  showView("syncTuto_part3",targetView3,activity.getString(R.string.tuto_text_confirm_sync),null);}  }
class C{  public ColorDrawable(){  this(null);}  }
class C{  public static void saveSequenceSet(ImapSession session,IdRange[] ranges){  session.setAttribute(SEARCHRES_SAVED_SET,IdRange.mergeRanges(Arrays.asList(ranges)).toArray(new IdRange[0]));}  }
class C{  public void error(SAXParseException e) throws SAXException {}  }
class C{  public void serializeDOM3(Node node) throws IOException {  try {    DOM3TreeWalker walker=new DOM3TreeWalker(fSerializationHandler,fErrorHandler,fSerializerFilter,fNewLine);    walker.traverse(node);  } catch (  org.xml.sax.SAXException se) {    throw new WrappedRuntimeException(se);  }}  }
class C{  private boolean deleteFriend(String friend){  Set<String> friends=store.getSet(FRIENDS_STORE_KEY);  if (friends == null) {    return false;  }  if (friends.contains(friend)) {    friends.remove(friend);    store.putSet(FRIENDS_STORE_KEY,friends);    return true;  }  return false;}  }
class C{  public static Version v1_0(){  return new Version(ICalVersion.V1_0);}  }
