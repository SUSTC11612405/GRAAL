class C{  public XMLInputSource(String publicId,String systemId,String baseSystemId,Reader charStream,String encoding){  fPublicId=publicId;  fSystemId=systemId;  fBaseSystemId=baseSystemId;  fCharStream=charStream;  fEncoding=encoding;}  }
class C{  @DELETE @Path("_facade/{table}/{key}") @RequiresPermissions("facade|update|{table}") @Timed(name="bv.emodb.sor.DataStoreResource1.deleteFacadeContent",absolute=true) @ApiOperation(value="Deletes a piece of content from a facade in the data store.",notes="Deletes a piece of content from a facade in the data store.",response=SuccessResponse.class) public SuccessResponse deleteFacadeContent(@PathParam("table") String table,@PathParam("key") String key,@QueryParam("changeId") TimeUUIDParam changeIdParam,@QueryParam("audit") AuditParam auditParam,@QueryParam("consistency") @DefaultValue("STRONG") WriteConsistencyParam consistency,@QueryParam("tag") List<String> tags,@QueryParam("debug") BooleanParam debug,@Authenticated Subject subject){  Set<String> tagsSet=(tags == null) ? ImmutableSet.<String>of() : Sets.newHashSet(tags);  return doUpdate(table,key,changeIdParam,Deltas.delete(),auditParam,consistency,debug,true,subject,tagsSet);}  }
class C{  private void ensureCapacity(int size){  if (fData == null) {    fData=new int[32];  } else   if (fData.length <= size) {    int[] newdata=new int[fData.length * 2];    System.arraycopy(fData,0,newdata,0,fData.length);    fData=newdata;  }}  }
class C{  public static List<File> find(File base,final Pattern pattern){  checkArgument(base.isDirectory(),"'base' must be a directory.");  return Files.fileTreeTraverser().preOrderTraversal(base).filter(Predicates.compose(Predicates.contains(pattern),GET_PATH)).toList();}  }
class C{  protected void beforeMove(){synchronized (System.err) {    System.err.println(getLocalName() + " is now migrating.");  }}  }
class C{  public DOTInteroperator() throws IOException {  Process p=Runtime.getRuntime().exec("dot -V");  try {    p.waitFor();  } catch (  InterruptedException iee) {    return;  }}  }
class C{  @Nullable private String convertRGBToHex(String svgValue){  String result=null;  String functionValue=svgValue.trim();  functionValue=svgValue.substring(1,functionValue.length() - 1);  String[] numbers=functionValue.split(",");  if (numbers.length != 3) {    return null;  }  int[] color=new int[3];  for (int i=0; i < 3; i++) {    String number=numbers[i];    number=number.trim();    if (number.endsWith("%")) {      float value=Float.parseFloat(number.substring(0,number.length() - 1));      color[i]=clamp((int)(value * 255.0f / 100.0f),0,255);    } else {      int value=Integer.parseInt(number);      color[i]=clamp(value,0,255);    }  }  StringBuilder builder=new StringBuilder();  builder.append("#");  for (int i=0; i < 3; i++) {    builder.append(String.format("%02X",color[i]));  }  result=builder.toString();  assert result.length() == 7;  return result;}  }
class C{  static public double[] runProportionTest(double x1,double n1,double x2,double n2){  SignificanceTestForTwoDatasets test=new SignificanceTestForTwoDatasets(x1,n1,x2,n2);  double[] res=new double[2];  res[0]=test.getChi_SquareValueWithContinuityCorrectionTwoTailed();  res[1]=test.getPValueForProportionTest();  return res;}  }
class C{  public boolean isRefreshing(){  return STATUS.isRefreshing(mStatus);}  }
class C{  public static Iterable<Table> listTables(DataStore dataStore){  return listTables(dataStore,null,Long.MAX_VALUE);}  }
class C{  @Override protected void onPostExecute(Result result){  if (result != null) {    boolean completeCalled=false;    if (!isCancelled()) {      CropImageView cropImageView=mCropImageViewReference.get();      if (cropImageView != null) {        completeCalled=true;        cropImageView.onImageCroppingAsyncComplete(result);      }    }    if (!completeCalled && result.bitmap != null) {      result.bitmap.recycle();    }  }}  }
class C{  public static Object invokeMethod(Class<?> clazz,Object obj,String name) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {  return invokeMethod(clazz,obj,name,null,null);}  }
class C{  public void deriveValues(@NotNull ScopedStateStore stateStore,@NotNull Set<Key> modified){  if (modified.contains(myTargetComboBoxKey) || modified.contains(myInclusionKey)) {    if (!myInstallRequests.isEmpty()) {      for (      String request : myInstallRequests) {        stateStore.listRemove(INSTALL_REQUESTS_KEY,request);      }      myInstallRequests.clear();    }    AndroidTargetComboBoxItem targetItem=stateStore.get(myTargetComboBoxKey);    if (targetItem == null || !stateStore.getNotNull(myInclusionKey,false)) {      return;    }    stateStore.put(FormFactorUtils.getMinApiKey(myFormFactor),targetItem.getData());    stateStore.put(FormFactorUtils.getMinApiLevelKey(myFormFactor),targetItem.myApiLevel);    IAndroidTarget target=targetItem.target;    if (target != null && (target.getVersion().isPreview() || !target.isPlatform())) {      populateApiLevels(targetItem.myApiLevel,target,stateStore);    } else {      int targetApiLevel;      if (ourHighestInstalledApiTarget != null) {        targetApiLevel=ourHighestInstalledApiTarget.getVersion().getFeatureLevel();      } else {        targetApiLevel=0;      }      populateApiLevels(targetApiLevel,ourHighestInstalledApiTarget,stateStore);    }    AndroidVersion androidVersion=targetItem.myAndroidVersion;    String platformPath=DetailsTypes.getPlatformPath(androidVersion);    BuildToolInfo buildTool=null;    if (target != null) {      buildTool=target.getBuildToolInfo();    }    if (buildTool == null) {      final AndroidSdkHandler sdkHandler=AndroidSdkUtils.tryToChooseSdkHandler();      buildTool=sdkHandler.getLatestBuildTool(new StudioLoggerProgressIndicator(ConfigureAndroidProjectPath.class),false);    }    if (buildTool != null) {      stateStore.put(WizardConstants.BUILD_TOOLS_VERSION_KEY,buildTool.getRevision().toString());    }    if (targetItem.myAddon != null) {      RepoPackage p=targetItem.myAddon;      stateStore.listPush(INSTALL_REQUESTS_KEY,p.getPath());      myInstallRequests.add(p.getPath());      AndroidTargetManager targetManager=AndroidSdkUtils.tryToChooseSdkHandler().getAndroidTargetManager(REPO_LOG);      if (targetManager.getTargetFromHashString(AndroidTargetHash.getPlatformHashString(androidVersion),REPO_LOG) == null) {        stateStore.listPush(INSTALL_REQUESTS_KEY,platformPath);        myInstallRequests.add(platformPath);      }      populateApiLevels(targetItem.myApiLevel,null,stateStore);    } else     if (target == null) {      if (ourHighestInstalledApiTarget == null || (androidVersion.getApiLevel() > ourHighestInstalledApiTarget.getVersion().getApiLevel() && !ourInstalledVersions.contains(androidVersion))) {        platformPath=DetailsTypes.getPlatformPath(new AndroidVersion(SdkVersionInfo.HIGHEST_KNOWN_STABLE_API,null));        stateStore.listPush(INSTALL_REQUESTS_KEY,platformPath);        myInstallRequests.add(platformPath);        populateApiLevels(SdkVersionInfo.HIGHEST_KNOWN_STABLE_API,null,stateStore);      }    }    PropertiesComponent.getInstance().setValue(FormFactorUtils.getPropertiesComponentMinSdkKey(myFormFactor),targetItem.getData());    String javaVersion=null;    if (ourHighestInstalledApiTarget != null && ourHighestInstalledApiTarget.getVersion().getFeatureLevel() >= 21) {      AndroidSdkData sdkData=AndroidSdkUtils.tryToChooseAndroidSdk();      if (sdkData != null) {        JavaSdk jdk=JavaSdk.getInstance();        Sdk sdk=ProjectJdkTable.getInstance().findMostRecentSdkOfType(jdk);        if (sdk != null) {          JavaSdkVersion version=jdk.getVersion(sdk);          if (version != null && version.isAtLeast(JavaSdkVersion.JDK_1_7)) {            javaVersion=JavaSdkVersion.JDK_1_7.getDescription();          }        }      }    }    stateStore.put(FormFactorUtils.getLanguageLevelKey(myFormFactor),javaVersion);  }}  }
class C{  public Bubble(int width,int height,int topMargin,int bubbleColour){  popped=false;  paint=new Paint();  paint.setColor(bubbleColour);  paint.setStyle(Paint.Style.FILL);  paint.setAntiAlias(true);  recycle(true,width,height,topMargin);}  }
class C{  public WallDeleteCommentQuery(VkApiClient client,UserActor actor,int commentId){  super(client,"wall.deleteComment",OkResponse.class);  accessToken(actor.getAccessToken());  commentId(commentId);}  }
class C{  static int applyMaskPenaltyRule3(ByteMatrix matrix){  int numPenalties=0;  byte[][] array=matrix.getArray();  int width=matrix.getWidth();  int height=matrix.getHeight();  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++) {      byte[] arrayY=array[y];      if (x + 6 < width && arrayY[x] == 1 && arrayY[x + 1] == 0 && arrayY[x + 2] == 1 && arrayY[x + 3] == 1 && arrayY[x + 4] == 1 && arrayY[x + 5] == 0 && arrayY[x + 6] == 1 && (isWhiteHorizontal(arrayY,x - 4,x) || isWhiteHorizontal(arrayY,x + 7,x + 11))) {        numPenalties++;      }      if (y + 6 < height && array[y][x] == 1 && array[y + 1][x] == 0 && array[y + 2][x] == 1 && array[y + 3][x] == 1 && array[y + 4][x] == 1 && array[y + 5][x] == 0 && array[y + 6][x] == 1 && (isWhiteVertical(array,x,y - 4,y) || isWhiteVertical(array,x,y + 7,y + 11))) {        numPenalties++;      }    }  }  return numPenalties * N3;}  }
class C{  @deprecated public static int[] codePoints(CharSequence s){  int[] result=new int[s.length()];  int j=0;  for (int i=0; i < s.length(); i++) {    char cp=s.charAt(i);    if ((cp >= 56320) && (cp <= 57343) && (i != 0)) {      char last=(char)result[(j - 1)];      if ((last >= 55296) && (last <= 56319)) {        result[(j - 1)]=Character.toCodePoint(last,cp);        continue;      }    }    result[(j++)]=cp;  }  if (j == result.length) {    return result;  }  int[] shortResult=new int[j];  System.arraycopy(result,0,shortResult,0,j);  return shortResult;}  }
class C{  protected void initializeWorld(){  this.world.setGravity(World.ZERO_GRAVITY);  SimulationBody circle=new SimulationBody();  circle.addFixture(Geometry.createCircle(0.5));  circle.setMass(MassType.NORMAL);  circle.translate(2.0,2.0);  circle.applyForce(new Vector2(-100.0,0.0));  circle.setLinearDamping(0.05);  this.world.addBody(circle);  SimulationBody rectangle=new SimulationBody();  rectangle.addFixture(Geometry.createRectangle(1,1));  rectangle.setMass(MassType.NORMAL);  rectangle.translate(0.0,2.0);  this.world.addBody(rectangle);  this.world.addListener(new StopContactListener(circle,rectangle));}  }
class C{  public CFG(method_info m){  this.method=m;  this.sentinel=new Instruction_Nop();  this.sentinel.next=m.instructions;  m.instructions.prev=this.sentinel;  eliminateJsrRets();  buildBBCFG();  m.cfg=this;  if (cfg != null) {    cfg.beginCode=true;    firstInstruction=cfg.head;  } else   firstInstruction=null;  if (soot.jbco.Main.metrics)   complexity();}  }
class C{  public String toString(){  return name;}  }
class C{  private static void expandBelow7DigitNumber(String numberString,WordRelation wordRelation){  expandLargeNumber(numberString,"thousand",3,wordRelation);}  }
class C{  @Override public void prepareMenu(Menu menu){  boolean isPageMenu;  boolean isOverviewMenu;  boolean isTabletEmptyModeMenu;  boolean isOverview=mActivity.isInOverviewMode();  boolean isIncognito=mActivity.getCurrentTabModel().isIncognito();  Tab currentTab=mActivity.getActivityTab();  if (mActivity.isTablet()) {    isPageMenu=!isOverview && mActivity.getCurrentTabModel().getCount() != 0;    isOverviewMenu=isOverview && mActivity.getCurrentTabModel().getCount() != 0;    isTabletEmptyModeMenu=!isPageMenu && mActivity.getCurrentTabModel().getCount() == 0;  } else {    isPageMenu=!isOverview;    isOverviewMenu=isOverview;    isTabletEmptyModeMenu=false;  }  menu.setGroupVisible(R.id.PAGE_MENU,isPageMenu);  menu.setGroupVisible(R.id.OVERVIEW_MODE_MENU,isOverviewMenu);  menu.setGroupVisible(R.id.TABLET_EMPTY_MODE_MENU,isTabletEmptyModeMenu);  if (isPageMenu && currentTab != null) {    String url=currentTab.getUrl();    boolean isChromeScheme=url.startsWith(UrlConstants.CHROME_SCHEME) || url.startsWith(UrlConstants.CHROME_NATIVE_SCHEME);    menu.findItem(R.id.icon_row_menu_id).setVisible(!mActivity.isTablet());    if (!mActivity.isTablet()) {      MenuItem forwardMenuItem=menu.findItem(R.id.forward_menu_id);      forwardMenuItem.setEnabled(currentTab.canGoForward());      mReloadMenuItem=menu.findItem(R.id.reload_menu_id);      mReloadMenuItem.setIcon(R.drawable.btn_reload_stop);      loadingStateChanged(currentTab.isLoading());      MenuItem bookmarkMenuItem=menu.findItem(R.id.bookmark_this_page_id);      bookmarkMenuItem.setEnabled(mBookmarksBridge.isEditBookmarksEnabled());      if (currentTab.getBookmarkId() != ChromeBrowserProviderClient.INVALID_BOOKMARK_ID) {        bookmarkMenuItem.setIcon(R.drawable.btn_star_filled);        bookmarkMenuItem.setChecked(true);        bookmarkMenuItem.setTitleCondensed(mActivity.getString(R.string.edit_bookmark));      } else {        bookmarkMenuItem.setIcon(R.drawable.btn_star);        bookmarkMenuItem.setChecked(false);        bookmarkMenuItem.setTitleCondensed(null);      }    }    MenuItem recentTabsMenuItem=menu.findItem(R.id.recent_tabs_menu_id);    recentTabsMenuItem.setVisible(!isIncognito && FeatureUtilities.canAllowSync(mActivity));    recentTabsMenuItem.setTitle(R.string.menu_recent_tabs);    if (OfflinePageBridge.isEnabled()) {      MenuItem allBookmarksMenuItem=menu.findItem(R.id.all_bookmarks_menu_id);      allBookmarksMenuItem.setTitle(mActivity.getString(R.string.menu_bookmarks_offline_pages));    }    menu.findItem(R.id.share_row_menu_id).setVisible(!isChromeScheme);    ShareHelper.configureDirectShareMenuItem(mActivity,menu.findItem(R.id.direct_share_menu_id));    menu.findItem(R.id.find_in_page_id).setVisible(!currentTab.isNativePage() && currentTab.getWebContents() != null);    MenuItem homescreenItem=menu.findItem(R.id.add_to_homescreen_id);    boolean canAddShortcutToHomescreen=ShortcutHelper.isAddToHomeIntentSupported(mActivity);    homescreenItem.setVisible(canAddShortcutToHomescreen && !isChromeScheme && !isIncognito);    MenuItem requestItem=menu.findItem(R.id.request_desktop_site_id);    requestItem.setVisible(!isChromeScheme || currentTab.isNativePage());    requestItem.setChecked(currentTab.getUseDesktopUserAgent());    requestItem.setTitleCondensed(requestItem.isChecked() ? mActivity.getString(R.string.menu_request_desktop_site_on) : mActivity.getString(R.string.menu_request_desktop_site_off));    PrintingController printingController=mActivity.getChromeApplication().getPrintingController();    disableEnableMenuItem(menu,R.id.print_id,printingController != null && !currentTab.isNativePage(),printingController != null && !printingController.isBusy() && PrefServiceBridge.getInstance().isPrintingEnabled(),PrefServiceBridge.getInstance().isPrintingManaged());    menu.findItem(R.id.reader_mode_prefs_id).setVisible(DomDistillerUrlUtils.isDistilledPage(currentTab.getUrl()));  }  if (isOverviewMenu) {    if (isIncognito) {      menu.findItem(R.id.close_all_tabs_menu_id).setVisible(false);      menu.findItem(R.id.close_all_incognito_tabs_menu_id).setEnabled(true);    } else {      menu.findItem(R.id.close_all_incognito_tabs_menu_id).setVisible(false);      menu.findItem(R.id.close_all_tabs_menu_id).setEnabled(mActivity.getTabModelSelector().getTotalTabCount() > 0);    }  }  boolean incognitoItemVisible=!FeatureUtilities.isDocumentMode(mActivity) || (currentTab == null) || !(TextUtils.equals(currentTab.getUrl(),UrlConstants.NTP_URL) && isIncognito);  disableEnableMenuItem(menu,R.id.new_incognito_tab_menu_id,incognitoItemVisible,PrefServiceBridge.getInstance().isIncognitoModeEnabled(),PrefServiceBridge.getInstance().isIncognitoModeManaged());  mActivity.prepareMenu(menu);}  }
class C{  private static float centerFromEnd(int[] stateCount,int end){  return (float)(end - stateCount[2]) - stateCount[1] / 2.0f;}  }
class C{  protected void handleEndElement(QName element,Augmentations augs,boolean isEmpty) throws XNIException {  fElementDepth--;  if (fPerformValidation) {    int elementIndex=fCurrentElementIndex;    if (elementIndex != -1 && fCurrentContentSpecType != -1) {      QName children[]=fElementChildren;      int childrenOffset=fElementChildrenOffsetStack[fElementDepth + 1] + 1;      int childrenLength=fElementChildrenLength - childrenOffset;      int result=checkContent(elementIndex,children,childrenOffset,childrenLength);      if (result != -1) {        fDTDGrammar.getElementDecl(elementIndex,fTempElementDecl);        if (fTempElementDecl.type == XMLElementDecl.TYPE_EMPTY) {          fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"MSG_CONTENT_INVALID",new Object[]{element.rawname,"EMPTY"},XMLErrorReporter.SEVERITY_ERROR);        } else {          String messageKey=result != childrenLength ? "MSG_CONTENT_INVALID" : "MSG_CONTENT_INCOMPLETE";          fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,messageKey,new Object[]{element.rawname,fDTDGrammar.getContentSpecAsString(elementIndex)},XMLErrorReporter.SEVERITY_ERROR);        }      }    }    fElementChildrenLength=fElementChildrenOffsetStack[fElementDepth + 1] + 1;  }  endNamespaceScope(fCurrentElement,augs,isEmpty);  if (fElementDepth < -1) {    throw new RuntimeException("FWK008 Element stack underflow");  }  if (fElementDepth < 0) {    fCurrentElement.clear();    fCurrentElementIndex=-1;    fCurrentContentSpecType=-1;    fInElementContent=false;    if (fPerformValidation) {      String value=fValidationState.checkIDRefID();      if (value != null) {        fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"MSG_ELEMENT_WITH_ID_REQUIRED",new Object[]{value},XMLErrorReporter.SEVERITY_ERROR);      }    }    return;  }  fCurrentElement.setValues(fElementQNamePartsStack[fElementDepth]);  fCurrentElementIndex=fElementIndexStack[fElementDepth];  fCurrentContentSpecType=fContentSpecTypeStack[fElementDepth];  fInElementContent=(fCurrentContentSpecType == XMLElementDecl.TYPE_CHILDREN);}  }
class C{  public static int exportAll(IConnector connector,String fileName,ProgressListener progressListener) throws IOException {  int total=0;  try {    progressListener.setTasks("Export","Writing all reads");    try (BufferedWriter w=new BufferedWriter(new FileWriter(fileName))){      IReadBlockIterator it=connector.getAllReadsIterator(0,10000,true,false);      progressListener.setMaximum(it.getMaximumProgress());      progressListener.setProgress(0);      while (it.hasNext()) {        total++;        write(it.next(),w);        progressListener.setProgress(it.getProgress());      }    }   } catch (  CanceledException ex) {    System.err.println("USER CANCELED");  }  return total;}  }
class C{  protected UsersGetSubscriptionsQueryWithExtended extended(Boolean value){  return unsafeParam("extended",value);}  }
class C{  public TShortArrayList grep(TShortProcedure condition){  TShortArrayList list=new TShortArrayList();  for (int i=0; i < _pos; i++) {    if (condition.execute(_data[i])) {      list.add(_data[i]);    }  }  return list;}  }
class C{  public void notifyDataChanged(){  init();}  }
class C{  public AdsGetAdsTargetingQuery campaignIds(String value){  return unsafeParam("campaign_ids",value);}  }
class C{  public static void waitForCompletion(Collection<Future<?>> futures){  for (  Future<?> future : futures) {    try {      future.get();    } catch (    ExecutionException ex) {      throw new RuntimeException("Exception during execution",ex);    }catch (    InterruptedException ex) {      throw new RuntimeException("Thread interrupted",ex);    }  }}  }
class C{  public static List<String> loadAll(W q){  String node=Model.node();  return Helper.distinct("name",q.and("node",node),String.class,Jar.class);}  }
class C{  public static JSONObject toJSONObject(String string) throws JSONException {  JSONObject o=new JSONObject();  XMLTokener x=new XMLTokener(string);  while (x.more() && x.skipPast("<")) {    parse(x,o,null);  }  return o;}  }
class C{  public AdsGetCampaignsQuery campaignIds(String value){  return unsafeParam("campaign_ids",value);}  }
class C{  public VideoSaveQuery name(String value){  return unsafeParam("name",value);}  }
class C{  public static List<List<Writable>> sample(int count,JavaRDD<List<Writable>> data){  return data.takeSample(false,count);}  }
class C{  public LeaseMapException(String s,Map exceptionMap){  super(s);  final Set mapEntries=exceptionMap.entrySet();  for (Iterator i=mapEntries.iterator(); i.hasNext(); ) {    final Map.Entry entry=(Entry)i.next();    final Object key=entry.getKey();    final Object value=entry.getValue();    if (key == null) {      throw new NullPointerException("exceptionMap contains a null key");    }    if (!(key instanceof Lease)) {      throw new IllegalArgumentException("exceptionMap contains an " + "a key which is not a Lease:" + key);    }    if (value == null) {      throw new NullPointerException("exceptionMap contains a null value");    }    if (!(value instanceof Throwable)) {      throw new IllegalArgumentException("exceptionMap contains an " + "a value which is not a Throwable:" + value);    }  }  this.exceptionMap=exceptionMap;}  }
class C{  private void decodeToken(String jwt){  JwtConsumer consumer=new JwtConsumerBuilder().setSkipAllValidators().setDisableRequireSignature().setSkipSignatureVerification().build();  try {    JwtClaims claims=consumer.processToClaims(jwt);    userId=claims.getSubject();  } catch (  InvalidJwtException|MalformedClaimException e) {    Log.e("AirMap","Invalid auth token");  }}  }
class C{  void checkNormalizationAfterRemove(ChildNode previousSibling){  if (previousSibling != null && previousSibling.getNodeType() == Node.TEXT_NODE) {    ChildNode next=previousSibling.nextSibling;    if (next != null && next.getNodeType() == Node.TEXT_NODE) {      isNormalized(false);    }  }}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){  final int deltaValue, currentScrollValue, scrollValue;switch (view.getPullToRefreshScrollDirection()) {case HORIZONTAL:    deltaValue=deltaX;  scrollValue=scrollX;currentScrollValue=view.getScrollX();break;case VERTICAL:default :deltaValue=deltaY;scrollValue=scrollY;currentScrollValue=view.getScrollY();break;}if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {final Mode mode=view.getMode();if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {final int newScrollValue=(deltaValue + scrollValue);if (PullToRefreshBase.DEBUG) {Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);}if (newScrollValue < (0 - fuzzyThreshold)) {if (mode.showHeaderLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));}} else if (newScrollValue > (scrollRange + fuzzyThreshold)) {if (mode.showFooterLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));}} else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {view.setState(State.RESET);}} else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {view.setState(State.RESET);}}}  }
class C{  public boolean addRegex(final String regex){  if (regex != null && !regex.isEmpty()) {    return regexList.add(regex);  }  return false;}  }
class C{  public Fraction(double value,double epsilon,int maxIterations) throws FractionConversionException {  this(value,epsilon,Integer.MAX_VALUE,maxIterations);}  }
class C{  private void initializeConductor(){  activeDelays=new LinkedList<Float>();  float randomDelay=MathUtils.random(2f,4.5f);  currentDelay=randomDelay;  totalDelay+=randomDelay;  activeDelays.add(randomDelay);  do {    float delayPercentage=totalDelay / timeTilVictory;    randomDelay=this.max_delay - delayPercentage * (this.max_delay - this.min_delay);    activeDelays.add(randomDelay);    totalDelay+=randomDelay;  } while (totalDelay < timeTilVictory);  turnOffAllTracks();}  }
class C{  public static int computeChecksum(ByteBuf payload){  if (payload.hasMemoryAddress() && (CRC32C_HASH instanceof Sse42Crc32C)) {    return CRC32C_HASH.calculate(payload.memoryAddress() + payload.readerIndex(),payload.readableBytes());  } else   if (payload.hasArray()) {    return CRC32C_HASH.calculate(payload.array(),payload.arrayOffset() + payload.readerIndex(),payload.readableBytes());  } else {    return CRC32C_HASH.calculate(payload.nioBuffer());  }}  }
class C{  public MultiFileAudioPlayer(String baseName,AudioFileFormat.Type type){  this.baseName=baseName;  this.outputType=type;  debug=Utilities.getBoolean("com.sun.speech.freetts.audio.AudioPlayer.debug");}  }
class C{  public PearsonsCorrelation(RealMatrix covarianceMatrix,int numberOfObservations){  nObs=numberOfObservations;  correlationMatrix=covarianceToCorrelation(covarianceMatrix);}  }
class C{  private void parseObjectMetrics(String namePrefix,JSONObject obj){  for (  Object key : obj.keySet()) {    Object val=obj.get(key);    if (val instanceof JSONObject) {      parseObjectMetrics(namePrefix + "__" + key,(JSONObject)val);    } else {      if (gaugeFilter.get().contains((String)key)) {        processGaugeMetric(namePrefix + "__" + (String)key,(Long)val);      } else {        processCounterMetric(namePrefix + "__" + (String)key,(Long)val);      }    }  }}  }
class C{  private void initializeValues(){  IPreferenceStore store=getPreferenceStore();  int iconSet=store.getInt(ISVNUIConstants.PREF_MENU_ICON_SET);  useTortoiseSVN.setSelection(ISVNUIConstants.MENU_ICON_SET_TORTOISESVN == iconSet);  useDefault.setSelection(ISVNUIConstants.MENU_ICON_SET_DEFAULT == iconSet);  useSubversive.setSelection(ISVNUIConstants.MENU_ICON_SET_SUBVERSIVE == iconSet);}  }
class C{  public static int charFromName(String name){  Object value;  initialize();  value=_byName.get(name);  if (value != null && value instanceof Integer) {    return ((Integer)value).intValue();  }  return -1;}  }
class C{  public synchronized void resume(){  if (paused) {    setPaused(false);    if (currentClip != null) {      currentClip.start();    }    notifyAll();  }}  }
class C{  public static void display(byte[] b){  for (int i=0; i < b.length; i++) {    System.out.print((char)b[i]);  }  System.out.println();}  }
class C{  public String typeName(){  return "methodref";}  }
class C{  public Builder alt(String alt){  this.alt=alt;  return this;}  }
class C{  private void markActivityUsed(){  ActivityAssigner.instance(this).markActivityUsed(mActivityIndex,getWebappInfo().id());}  }
class C{  public void outputData(){  out.println("The res:");  for (int i=0; i < allNum; i++) {    for (int j=0; j < stripe_unit_size; j++) {      out.printf("%c",check_data[i][j]);    }  }}  }
class C{  public static InputStream toInputStream(CharSequence input,String encoding) throws IOException {  return toInputStream(input,Charsets.toCharset(encoding));}  }
class C{  private MouseGesture processCurrentData() throws IOException {  int size=coordinates.size();  return mouseGestureRecognizer.classifyGesture(coordinates,size);}  }
class C{  public void expand(double b){  clip[0]-=b;  clip[1]-=b;  clip[6]+=b;  clip[7]+=b;}  }
class C{  public DefaultingVolatileIntervalsService(VolatileIntervalsFunction defaultIntervalsFunction){  this(new DefaultingDictionary<>(defaultIntervalsFunction));}  }
class C{  public ZWaveSensorConfigurationCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);}  }
class C{  public PhiExpr newPhiExpr(Local leftLocal,List<Block> preds){  return new SPhiExpr(leftLocal,preds);}  }
class C{  public TrafficLogPredicate(Predicate<HarEntry> entry){  this.predicates.add(entry);}  }
class C{  public void stop(){  if (!this.isRunning) {    return;  }  if (this.videoProducer != null)   this.videoProducer.cleanup();  try {    MinecraftForge.EVENT_BUS.unregister(this);    FMLCommonHandler.instance().bus().unregister(this);  } catch (  Exception e) {    System.out.println("Failed to unregister video hook: " + e);  }  this.connection.close();  this.isRunning=false;  Display.setResizable(true);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_REMAIN_TIME(String durationtime0){  return new SM_SYSTEM_MESSAGE(1400220,durationtime0);}  }
class C{  public void testWriteReadFull() throws Exception {  ByteArrayOutputStream out=new ByteArrayOutputStream(0);  ObjectOutputStream os=new ObjectOutputStream(out);  os.writeObject(full);  ObjectInputStream is=new ObjectInputStream(new ByteArrayInputStream(out.toByteArray()));  MirrorServiceConfig copy=(MirrorServiceConfig)is.readObject();  is.close();  os.close();  assertTrue(helper.areEquals(full,copy));}  }
class C{  public ClearCacheRequest(Cache cache,Runnable callback){  super(Method.GET,null,null);  mCache=cache;  mCallback=callback;}  }
class C{  private void Mongrel_MarauderSkills(){  if (getOwner().isCasting() || isAlreadyDead()) {    return;  }  int rand=Rnd.get(1,14);switch (rand) {case 1:    useSkill(17320);  break;case 2:useSkill(17321);break;case 3:useSkill(17322);break;case 4:useSkill(17323);break;case 5:useSkill(17324);break;case 6:useSkill(17325);break;case 7:useSkill(17326);break;case 8:useSkill(17327);break;case 9:useSkill(17328);break;case 10:useSkill(17329);break;case 11:useSkill(17330);break;case 12:useSkill(17331);break;case 13:useSkill(17332);break;case 14:useSkill(17333);break;}}  }
class C{  public boolean absolute(int row) throws SQLException {  throw new SQLException("Command not Supported!","GSP",-132);}  }
class C{  protected boolean load(){  labels=MouseGestureModelResources.getLabels();  if (labels == null) {    return false;  }  double[] intercepts=MouseGestureModelResources.getIntercepts();  double[][] coefficients=MouseGestureModelResources.getCoefficients(labels.length);  w=new Matrix(coefficients);  double[][] twoDimensionalIntercept=new double[1][intercepts.length];  twoDimensionalIntercept[0]=intercepts;  c=new Matrix(twoDimensionalIntercept);  return isLoaded();}  }
class C{  @Path(path="go",login=true) public boolean go(){  Session s=this.getSession();  if (s.has("uri")) {    String uri=(String)s.get("uri");    log.debug("redirecting:" + uri);    if (uri.endsWith("/index")) {      uri=uri.substring(0,uri.length() - 6);    }    if (X.isEmpty(uri)) {      this.redirect("/");    } else {      this.redirect(uri);    }    s.remove("uri").store();    return true;  }  this.redirect("/");  return false;}  }
class C{  public static float colorDistance(Color c1,Color c2){  double rmean=(c1.getRed() + c2.getRed()) / 2;  int r=c1.getRed() - c2.getRed();  int g=c1.getGreen() - c2.getGreen();  int b=c1.getBlue() - c2.getBlue();  double weightR=2 + rmean / 256;  double weightG=4.0;  double weightB=2 + (255 - rmean) / 256;  return (float)Math.sqrt(weightR * r * r + weightG * g * g + weightB * b * b);}  }
class C{  private void syncChildren(List<OCFile> files){  int i;  OCFile newFile;  for (i=0; i < files.size() && !mCancellation; i++) {    newFile=files.get(i);    if (newFile.isFolder()) {      synchronizeFolder(newFile);    }  }  if (mCancellation && i < files.size())   Log_OC.d(TAG,"Leaving synchronization before synchronizing " + files.get(i).getRemotePath() + " due to cancelation request");}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FIND_POS_NPC_FOUND_IN_OTHER_WORLD_DEV(String value0,String value2,String value1){  return new SM_SYSTEM_MESSAGE(1400550,value0,value2,value1);}  }
class C{  public boolean insert_redundant_casts(){  return soot.PhaseOptions.getBoolean(options,"insert-redundant-casts");}  }
class C{  public CriteriaHibernateSpaceDataSourceConfigurer initialLoadChunkSize(int initalLoadChunkSize){  this.initialLoadChunkSize=initalLoadChunkSize;  return this;}  }
class C{  public boolean readBoolean() throws JMSException {  initializeReading();  try {    if (this.dataIn.available() == 0) {      throw new MessageEOFException("reached end of data");    }    this.dataIn.mark(10);    int type=this.dataIn.read();    if (type == _BOOLEAN) {      return this.dataIn.readBoolean();    }    if (type == _STRING) {      return Boolean.valueOf(this.dataIn.readUTF()).booleanValue();    }    if (type == _NULL) {      this.dataIn.reset();      throw new NullPointerException("Cannot convert _NULL value to boolean.");    } else {      this.dataIn.reset();      throw new MessageFormatException(" not a boolean type");    }  } catch (  EOFException e) {    JMSException jmsEx=new MessageEOFException(e.toString());    jmsEx.setLinkedException(e);    throw jmsEx;  }catch (  IOException e) {    JMSException jmsEx=new MessageFormatException(e.toString());    jmsEx.setLinkedException(e);    throw jmsEx;  }}  }
class C{  public SobolSequenceGenerator(final int dimension) throws MathIllegalArgumentException {  MathUtils.checkRangeInclusive(dimension,1,MAX_DIMENSION);  final InputStream is=getClass().getResourceAsStream(RESOURCE_NAME);  if (is == null) {    throw MathRuntimeException.createInternalError();  }  this.dimension=dimension;  direction=new long[dimension][BITS + 1];  x=new long[dimension];  try {    initFromStream(is);  } catch (  IOException e) {    throw MathRuntimeException.createInternalError();  }catch (  MathIllegalStateException e) {    throw MathRuntimeException.createInternalError();  } finally {    try {      is.close();    } catch (    IOException e) {    }  }}  }
class C{  public Object clone(){  return new DeadlockAvoidanceEdge(sc);}  }
class C{  public ChiSquareTest(){  super();}  }
class C{  private void initPresenter(){  this.categoryPresenter=new CategoryImplementor(categoryModel,this);  this.loadPresenter=new LoadImplementor(loadModel,this);  this.scrollPresenter=new ScrollImplementor(scrollModel,this);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_FORCE_MATCH_CANT_USE_PARTY_MATCH(String value0){  return new SM_SYSTEM_MESSAGE(1400207,value0);}  }
class C{  public void abort() throws IOException {  completeEdit(this,false);}  }
class C{  public CategoryManageImplementor(CategoryManageModel model){  this.model=model;}  }
class C{  @TargetApi(Build.VERSION_CODES.LOLLIPOP) private static int relaunchTask(boolean incognito,String url){  if (TextUtils.isEmpty(url))   return Tab.INVALID_TAB_ID;  Context context=ApplicationStatus.getApplicationContext();  ActivityManager manager=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);  for (  AppTask task : manager.getAppTasks()) {    RecentTaskInfo info=DocumentUtils.getTaskInfoFromTask(task);    if (info == null)     continue;    String initialUrl=ActivityDelegate.getInitialUrlForDocument(info.baseIntent);    if (TextUtils.isEmpty(initialUrl) || !TextUtils.equals(initialUrl,url))     continue;    int id=ActivityDelegate.getTabIdFromIntent(info.baseIntent);    DocumentTabModelSelector.setPrioritizedTabId(id);    if (!ChromeApplication.getDocumentTabModelSelector().getModel(incognito).isRetargetable(id)) {      continue;    }    if (!moveToFront(task))     continue;    return id;  }  return Tab.INVALID_TAB_ID;}  }
class C{  private static String decodeBase900toBase10(int[] codewords,int count) throws FormatException {  BigInteger result=BigInteger.ZERO;  for (int i=0; i < count; i++) {    result=result.add(EXP900[count - i - 1].multiply(BigInteger.valueOf(codewords[i])));  }  String resultString=result.toString();  if (resultString.charAt(0) != '1') {    throw FormatException.getFormatInstance();  }  return resultString.substring(1);}  }
class C{  private FilterManager(){  initialise();}  }
class C{  @Override public void readFields(DataInput in) throws IOException {  int length=WritableUtils.readVInt(in);  if (length > _text.capacity()) {    _text=ByteBuffer.allocate(length);  }  in.readFully(_text.array(),0,length);  _text.position(0);  _text.limit(length);  _map=null;}  }
class C{  public OfferRequirement(String taskType,Collection<TaskInfo> taskInfos,Optional<ExecutorInfo> executorInfoOptional,Optional<PlacementRuleGenerator> placementRuleGeneratorOptional) throws InvalidRequirementException {  this.taskType=taskType;  this.taskRequirements=getTaskRequirementsInternal(taskInfos);  this.executorRequirementOptional=executorInfoOptional.isPresent() ? Optional.of(ExecutorRequirement.create(executorInfoOptional.get())) : Optional.empty();  this.placementRuleGeneratorOptional=placementRuleGeneratorOptional;}  }
class C{  @Override public String toString(){  StringBuilder buffer=new StringBuilder();  buffer.append(super.toString());  buffer.append("(");  if (fileFilters != null) {    for (int i=0; i < fileFilters.size(); i++) {      if (i > 0) {        buffer.append(",");      }      Object filter=fileFilters.get(i);      buffer.append(filter == null ? "null" : filter.toString());    }  }  buffer.append(")");  return buffer.toString();}  }
class C{  @Override public Filter createLogicFilter(List<Filter> filterList){  return null;}  }
class C{  public static Intent createIntentForSettingsPage(Context context,String fragmentName){  Intent intent=new Intent();  intent.setClass(context,Preferences.class);  if (!(context instanceof Activity)) {    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  }  if (fragmentName != null) {    intent.putExtra(Preferences.EXTRA_SHOW_FRAGMENT,fragmentName);    intent.putExtra(Preferences.EXTRA_DISPLAY_HOME_AS_UP,false);  }  return intent;}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public SearchPhotosObject(Context c){  this.adapter=new PhotoAdapter(c,new ArrayList<Photo>());  this.service=SearchService.getService();  this.searchQuery="";  this.photosPage=0;  this.refreshing=false;  this.loading=false;  this.over=false;}  }
class C{  public ChangeSet unset(String path){  return add(new UnsetValueSpaceEntryMutator(path));}  }
class C{  public boolean isApplicable(){  if (getViewer() instanceof ViewerBase)   return ((ViewerBase)getViewer()).getGraph().getNumberOfNodes() > 0; else   return getViewer() instanceof ClusterViewer && ((ClusterViewer)getViewer()).getGraphView() != null && ((ClusterViewer)getViewer()).getGraphView().getGraph().getNumberOfNodes() > 0;}  }
class C{  public void cancel(){  Message.obtain(mHandler,MSG_CANCEL_TOAST,this).sendToTarget();}  }
class C{  public void zoom(float scaleX,float scaleY,float x,float y){  Matrix save=mViewPortHandler.zoom(scaleX,scaleY,x,y);  mViewPortHandler.refresh(save,this,false);  calculateOffsets();  postInvalidate();}  }
class C{  private void onProcessDown(final Long processId,final Timestamp pTimestamp,final String pMessage){  if (LOGGER.isDebugEnabled()) {    StringBuffer str=new StringBuffer("onProcessDown(");    str.append(processId);    str.append(", ");    str.append(pTimestamp);    str.append(", ");    str.append(pMessage);    LOGGER.debug(str.toString());  }  processFacade.suspend(processId,pTimestamp,pMessage);  final Process processCopy=processCache.getCopy(processId);  try {    Long stateTagId=processCopy.getStateTagId();    if (stateTagId == null) {      LOGGER.error("State tag Id is set to null for Process + " + processCopy.getId() + " - unable to update it.");    } else {      controlTagFacade.updateAndValidate(stateTagId,SupervisionStatus.DOWN.toString(),pMessage,pTimestamp);    }  } catch (  CacheElementNotFoundException cacheEx) {    LOGGER.error("Cannot locate the Process State tag in the cache - unable to update it.",cacheEx);  }}  }
class C{  public void clear(){  this.results.clear();}  }
class C{  public static Map<String,Object> quickChangeProductionRunStatus(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> result=ServiceUtil.returnSuccess();  LocalDispatcher dispatcher=ctx.getDispatcher();  Locale locale=(Locale)context.get("locale");  GenericValue userLogin=(GenericValue)context.get("userLogin");  String productionRunId=(String)context.get("productionRunId");  String statusId=(String)context.get("statusId");  String startAllTasks=(String)context.get("startAllTasks");  try {    Map<String,Object> serviceContext=FastMap.newInstance();    if (statusId.equals("PRUN_DOC_PRINTED") || statusId.equals("PRUN_RUNNING") || statusId.equals("PRUN_COMPLETED")|| statusId.equals("PRUN_CLOSED")) {      serviceContext.put("productionRunId",productionRunId);      serviceContext.put("statusId","PRUN_DOC_PRINTED");      serviceContext.put("userLogin",userLogin);      dispatcher.runSync("changeProductionRunStatus",serviceContext);    }    if (statusId.equals("PRUN_RUNNING") && "Y".equals(startAllTasks)) {      serviceContext.clear();      serviceContext.put("productionRunId",productionRunId);      serviceContext.put("userLogin",userLogin);      dispatcher.runSync("quickStartAllProductionRunTasks",serviceContext);    }    if (statusId.equals("PRUN_COMPLETED") || statusId.equals("PRUN_CLOSED")) {      serviceContext.clear();      serviceContext.put("productionRunId",productionRunId);      serviceContext.put("userLogin",userLogin);      dispatcher.runSync("quickRunAllProductionRunTasks",serviceContext);    }    if (statusId.equals("PRUN_CLOSED")) {      serviceContext.clear();      serviceContext.put("workEffortId",productionRunId);      serviceContext.put("userLogin",userLogin);      dispatcher.runSync("productionRunProduce",serviceContext);      serviceContext.clear();      serviceContext.put("productionRunId",productionRunId);      serviceContext.put("statusId","PRUN_CLOSED");      serviceContext.put("userLogin",userLogin);      dispatcher.runSync("changeProductionRunStatus",serviceContext);    } else {      serviceContext.put("productionRunId",productionRunId);      serviceContext.put("statusId",statusId);      serviceContext.put("userLogin",userLogin);      dispatcher.runSync("changeProductionRunStatus",serviceContext);    }  } catch (  GenericServiceException e) {    Debug.logError(e,"Problem calling the changeProductionRunStatus service",module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunStatusNotChanged",locale));  }  return result;}  }
class C{  private static void writeCopyState(CopyState state,DataOutput out) throws IOException {  out.writeVInt(state.infosBytes.length);  out.writeBytes(state.infosBytes,0,state.infosBytes.length);  out.writeVLong(state.gen);  out.writeVLong(state.version);  CopyFilesHandler.writeFilesMetaData(out,state.files);  out.writeVInt(state.completedMergeFiles.size());  for (  String fileName : state.completedMergeFiles) {    out.writeString(fileName);  }  out.writeVLong(state.primaryGen);}  }
class C{  public WriteEntriesResult write(IEntryPacket[] entryPackets,Transaction txn,long lease,long leases[],int modifiers,SpaceContext sc,long timeout,boolean newRouter) throws TransactionException, RemoteException, UnknownTypesException {  monitorMemoryUsage(true);  monitorReplicationStateForModifyingOperation(txn);  if (UpdateModifiers.isPotentialUpdate(modifiers)) {    if (newRouter) {      AnswerHolder ah=newAdaptUpdateMultiple(entryPackets,txn,lease,leases,sc,timeout,modifiers);      return ah != null ? ah.getUpdateMultipleResult() : null;    } else     return oldAdaptUpdateMultiple(entryPackets,txn,lease,leases,sc,modifiers,newRouter);  }  boolean[] shouldReplicateArray=new boolean[entryPackets.length];  IServerTypeDesc[] types=new IServerTypeDesc[entryPackets.length];  Context context=null;  WriteEntriesResult result=new WriteEntriesResult(entryPackets.length);  List<Integer> unknownTypePositions=null;  OperationID[] opIDs=new OperationID[entryPackets.length];  boolean anyFifoClass=false;  for (int i=0; i < entryPackets.length; i++) {    opIDs[i]=entryPackets[i].getOperationID();    try {      IServerTypeDesc typeDesc=_typeManager.loadServerTypeDesc(entryPackets[i]);      types[i]=typeDesc;      shouldReplicateArray[i]=false;      if (isReplicated())       shouldReplicateArray[i]=shouldReplicate(ReplicationOperationType.WRITE,typeDesc,false,false);      if (!anyFifoClass && typeDesc.getTypeDesc().isFifoSupported())       anyFifoClass=true;    } catch (    UnusableEntryException e) {      result.setError(i,e);    }catch (    UnknownTypeException e) {      if (entryPackets[i].getTypeDescriptor() != null)       result.setError(i,e); else {        if (unknownTypePositions == null)         unknownTypePositions=new LinkedList<Integer>();        unknownTypePositions.add(i);      }    }  }  if (unknownTypePositions != null) {    throw new UnknownTypesException(unknownTypePositions);  }  XtnEntry txnEntry=null;  if (txn != null) {    txnEntry=attachToXtn((ServerTransaction)txn,false);    attachFromGatewayStateToTransactionIfNeeded(sc,txnEntry);  }  try {    context=_cacheManager.getCacheContext();    if (_isSyncReplication)     context.setSyncReplFromMultipleOperation(true);    context.setMultipleOperation();    context.setOperationIDs(opIDs);    setFromGatewayIfNeeded(sc,context);    if (txnEntry != null) {      txnEntry.lock();      try {        if (!txnEntry.m_Active)         throw new TransactionException("The transaction is not active: " + txnEntry.m_Transaction);        context.setTransactionalMultipleOperation(true);        result=writeEntryPackets(entryPackets,result,context,txnEntry.m_Transaction,lease,leases,modifiers,sc,false,true);      }  finally {        txnEntry.unlock();      }    } else {      if (_cacheManager.isOffHeapCachePolicy() && _cacheManager.useBlobStoreBulks()) {        if (!anyFifoClass || !_cacheManager.isDirectPersistencyEmbeddedtHandlerUsed())         context.setBlobStoreBulkInfo(new BlobStoreBulkInfo(_cacheManager,false));      }      result=writeEntryPackets(entryPackets,result,context,null,lease,leases,modifiers,sc,false,true);    }    return result;  }  finally {    RuntimeException ex=null;    if (txnEntry != null)     txnEntry.decrementUsed(true);    try {      if (context.isActiveBlobStoreBulk()) {        context.getBlobStoreBulkInfo().bulk_flush(context,false,true);      }    } catch (    RuntimeException ex1) {      ex=ex1;    }    replicateAndfreeCache(context);    if (ex != null)     throw ex;  }}  }
class C{  public boolean isApplicable(){  return ((ViewerBase)getViewer()).getGraph().getNumberOfNodes() > 0;}  }
class C{  public Well44497b(int[] seed){  super(K,seed);}  }
class C{  @Override public WebElement findElementByClassName(String className){  return ((FindsByClassName)super.getWrappedDriver()).findElementByClassName(className);}  }
class C{  public Matrix arrayTimesEquals(Matrix B){  checkMatrixDimensions(B);  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      A[i][j]=A[i][j] * B.A[i][j];    }  }  return this;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CANT_WHISPER_LEVEL(String value0){  return new SM_SYSTEM_MESSAGE(1310004,value0);}  }
class C{  @Override public void vendorOptionsUpdated(List<VersionData> vendorOptionVersionsList){  this.vendorOptionVersionList=vendorOptionVersionsList;  updateVendorOptionPanels();}  }
class C{  public boolean isResizable(){  return (myFlags & ANY) != 0;}  }
class C{  public boolean isInTargetZone(float x,float y){  if (Math.abs(x - mX) <= mTargetRadiusPx && Math.abs(y - mY) <= mTargetRadiusPx) {    return true;  }  return false;}  }
class C{  Rows<Application.Name,String> cqlWithApplication(String cql,Application.Name applicationName){  try {    OperationResult<CqlResult<Application.Name,String>> result=driver.getKeyspace().prepareQuery(keyspace.auditlogCF()).withCql(cql).asPreparedStatement().withByteBufferValue(applicationName,ApplicationNameSerializer.get()).execute();    return result.getResult().getRows();  } catch (  ConnectionException e) {    throw new RepositoryException(String.format("Can not retrieve auditlog for application %s.",applicationName),e);  }}  }
class C{  public static MapWritable jsonStringToMapWritable(String jsonString){  MapWritable value=new MapWritable();  JSONParser jsonParser=new JSONParser();  try {    JSONObject jsonObj=(JSONObject)jsonParser.parse(jsonString);    for (    Object key : jsonObj.keySet()) {      Text mapKey=new Text(key.toString());      Text mapValue=new Text();      if (jsonObj.get(key) != null) {        mapValue.set(jsonObj.get(key).toString());      }      value.put(mapKey,mapValue);    }  } catch (  ParseException e) {    logger.warn("Could not json-decode string: " + jsonString,e);  }catch (  NumberFormatException e) {    logger.warn("Could not parse field into number: " + jsonString,e);  }  return value;}  }
class C{  public Observable<String> streamGetGithubInfoForEachMember(List<String> listOfUserName){  return Observable.just(listOfUserName).flatMap(githubMemberFunctions.observeEachItem()).flatMap(githubMemberFunctions.getGithubMember()).map(githubMemberFunctions.getNumberOfFollowers()).reduce(githubMemberFunctions.aggregateString()).subscribeOn(schedulerSubscribeOn).observeOn(schedulerObserveOn);}  }
class C{  protected String[] upload_file(byte cmd,String group_name,String local_filename,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {  File f=new File(local_filename);  FileInputStream fis=new FileInputStream(f);  if (file_ext_name == null) {    int nPos=local_filename.lastIndexOf('.');    if (nPos > 0 && local_filename.length() - nPos <= ProtoCommon.FDFS_FILE_EXT_NAME_MAX_LEN + 1) {      file_ext_name=local_filename.substring(nPos + 1);    }  }  try {    return this.do_upload_file(cmd,group_name,null,null,file_ext_name,f.length(),new UploadStream(fis,f.length()),meta_list);  }  finally {    fis.close();  }}  }
class C{  @Override public void ignorableWhitespace(char ch[],int start,int length) throws SAXException {  if (saxParser != null) {    saxParser.ignorableWhitespace(ch,start,length);  }}  }
class C{  public boolean loopsForever(){  return getLoopExits().isEmpty();}  }
class C{  protected long currentTime(){  return System.currentTimeMillis();}  }
class C{  protected void buildMetricMakers(MetricDictionary metricDictionary){  countMaker=new CountMaker(metricDictionary);  doubleSumMaker=new DoubleSumMaker(metricDictionary);}  }
class C{  @Override protected void rehash(){  int oldCapacity=fBuckets.length;  SREntry[] oldTable=fBuckets;  int newCapacity=oldCapacity * 2 + 1;  SREntry[] newTable=new SREntry[newCapacity];  fThreshold=(int)(newCapacity * fLoadFactor);  fBuckets=newTable;  fTableSize=fBuckets.length;  for (int i=oldCapacity; i-- > 0; ) {    for (SREntry old=oldTable[i]; old != null; ) {      SREntry e=old;      old=old.next;      SREntryData data=(SREntryData)e.get();      if (data != null) {        int index=hash(data.characters,0,data.characters.length) % newCapacity;        if (newTable[index] != null) {          newTable[index].prev=e;        }        e.next=newTable[index];        e.prev=null;        newTable[index]=e;      } else {        fCount--;      }    }  }}  }
class C{  private void finalizeFailed(final TestItem testItem){  FailReferenceResource resource=failReferenceResourceBuilder.get().addLaunchRef(testItem.getLaunchRef()).addTestItemRef(testItem.getId()).build();  issuesRepository.save(resource);}  }
class C{  private void recycleChildren(RecyclerView.Recycler recycler,int startIndex,int endIndex){  if (startIndex == endIndex) {    return;  }  if (DEBUG) {    Log.d(TAG,"Recycling " + Math.abs(startIndex - endIndex) + " items");  }  if (endIndex > startIndex) {    for (int i=endIndex - 1; i >= startIndex; i--) {      removeAndRecycleViewAt(i,recycler);    }  } else {    for (int i=startIndex; i > endIndex; i--) {      removeAndRecycleViewAt(i,recycler);    }  }}  }
class C{  private void afterMovingToPrimary(){switch (_spaceMode) {case NONE:    startComponents(true);  startComponents(false);break;case BACKUP:startComponents(true);break;}}  }
class C{  private List<String> extractDurationValues(String string){  List<String> outputList=new ArrayList<String>();  Matcher match=Pattern.compile("[0-9]+[A-Z]").matcher(string.replace(" ",""));  while (match.find()) {    outputList.add(match.group());  }  return outputList;}  }
class C{  public static Zmat o(Zmat A,Zmat B) throws JampackException {  if (A.ncol != B.nrow)   throw new JampackException("Unconformity in product");  Zmat C=new Zmat(A.nrow,B.ncol);  for (int i=0; i < A.nrow; i++)   for (int k=0; k < A.ncol; k++)   for (int j=0; j < B.ncol; j++) {    C.re[i][j]=C.re[i][j] + A.re[i][k] * B.re[k][j] - A.im[i][k] * B.im[k][j];    C.im[i][j]=C.im[i][j] + A.im[i][k] * B.re[k][j] + A.re[i][k] * B.im[k][j];  }  return C;}  }
class C{  public static void removeTargetFrom(final Creature object){  removeTargetFrom(object,false);}  }
class C{  public boolean unpinIfNeeded(Context context,IEntryHolder entry,ITemplateHolder template,IEntryCacheInfo pEntry){  if (!isEvictableCachePolicy() && !entry.isOffHeapEntry())   return false;  if (template != null) {    if (template.isTakeOperation() && entry.isDeleted())     return false;  }  if (useRecentUpdatesForPinning() && isEntryInRecentUpdates(entry))   return false;  if (pEntry == null)   pEntry=entry.isOffHeapEntry() ? ((IOffHeapEntryHolder)entry).getOffHeapResidentPart() : getEntryCacheInfo(entry);  if (pEntry == null || !pEntry.isPinned())   return false;  if (useRecentDeletes() && pEntry.isRecentDelete())   return false;  if (entry.isOffHeapEntry() && ((IOffHeapRefCacheInfo)pEntry).isInBulk())   return false;  if (pEntry.getEntryHolder(this).isMaybeUnderXtn() || pEntry.getEntryHolder(this).isHasWaitingFor())   return false;  if (isEvictableCachePolicy())   pEntry.setPinned(false); else   ((IOffHeapRefCacheInfo)pEntry).unLoadFullEntryIfPossible(this,context);  return true;}  }
class C{  @Deprecated public void initialiseVerticalStepperForm(String[] stepsTitles,int buttonBackgroundColor,int buttonTextColor,int buttonPressedBackgroundColor,int buttonPressedTextColor,int stepNumberBackgroundColor,int stepNumberTextColor,VerticalStepperForm verticalStepperForm,Activity activity){  this.alphaOfDisabledElements=0.25f;  this.buttonBackgroundColor=buttonBackgroundColor;  this.buttonTextColor=buttonTextColor;  this.buttonPressedBackgroundColor=buttonPressedBackgroundColor;  this.buttonPressedTextColor=buttonPressedTextColor;  this.stepNumberBackgroundColor=stepNumberBackgroundColor;  this.stepTitleTextColor=Color.rgb(33,33,33);  this.stepSubtitleTextColor=Color.rgb(162,162,162);  this.stepNumberTextColor=stepNumberTextColor;  this.errorMessageTextColor=Color.rgb(175,18,18);  this.displayBottomNavigation=true;  this.materialDesignInDisabledSteps=false;  this.hideKeyboard=true;  this.showVerticalLineWhenStepsAreCollapsed=false;  this.verticalStepperFormImplementation=verticalStepperForm;  this.activity=activity;  initStepperForm(stepsTitles,null);}  }
class C{  @GET @Path("/verifyToken") @Produces(APPLICATION_JSON) @ApiOperation(value="Verify user's authorization") @Timed public Response verifyToken(@HeaderParam(AUTHORIZATION) @ApiParam(value=EXAMPLE_AUTHORIZATION_HEADER,required=true) final String tokenHeader){  return httpHeader.headers().entity(authentication.verifyToken(tokenHeader)).build();}  }
class C{  public static String checkNull(String string1,String string2,String string3,String string4){  if (string1 != null)   return string1; else   if (string2 != null)   return string2; else   if (string3 != null)   return string3; else   if (string4 != null)   return string4; else   return "";}  }
class C{  public ZWaveLockCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);}  }
class C{  public static long pow(final long k,final int e) throws MathIllegalArgumentException, MathRuntimeException {  if (e < 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.EXPONENT,e);  }  int exp=e;  long result=1;  long k2p=k;  while (true) {    if ((exp & 0x1) != 0) {      result=mulAndCheck(result,k2p);    }    exp>>=1;    if (exp == 0) {      break;    }    k2p=mulAndCheck(k2p,k2p);  }  return result;}  }
class C{  private void fillDictionaryArrayFromRow(CarbonRow row,Object[] outputArray){  if (dictionaryFieldIndexes.length > 0) {    int[] dictArray=new int[dictionaryFieldIndexes.length];    for (int i=0; i < dictionaryFieldIndexes.length; i++) {      dictArray[i]=row.getInt(dictionaryFieldIndexes[i]);    }    outputArray[dimIndexInRow]=dictArray;  }}  }
class C{  private void populateCompleteQueue(final Locus stopBeforeLocus){  while (!accumulator.isEmpty() && accumulator.get(0).getRecordAndPositions().isEmpty() && locusComparator.compare(accumulator.get(0),stopBeforeLocus) < 0) {    accumulator.remove(0);  }  if (accumulator.isEmpty()) {    return;  }  final LocusInfo locusInfo=accumulator.get(0);  if (locusComparator.compare(stopBeforeLocus,locusInfo) <= 0) {    return;  }  if (emitUncoveredLoci) {    final LocusInfo zeroCoverage=createNextUncoveredLocusInfo(locusInfo);    if (zeroCoverage != null) {      complete.add(zeroCoverage);      return;    }  }  accumulator.remove(0);  final int sequenceIndex=locusInfo.getSequenceIndex();  if (referenceSequenceMask.get(locusInfo.getSequenceIndex(),locusInfo.getPosition())) {    complete.add(locusInfo);  }  lastReferenceSequence=sequenceIndex;  lastPosition=locusInfo.getPosition();}  }
class C{  public void freeConnection(ConnectionResource clientPeer){  activeConnections.decrement();  _peersPool.freeResource(clientPeer);}  }
class C{  @Override public List<Period> generateRollingPeriods(DateTimeUnit dateTimeUnit){  Calendar cal=getCalendar();  dateTimeUnit=cal.minusDays(dateTimeUnit,364);  List<Period> periods=Lists.newArrayList();  for (int i=0; i < 365; i++) {    periods.add(createPeriod(dateTimeUnit,null));    dateTimeUnit=cal.plusDays(dateTimeUnit,1);  }  return periods;}  }
class C{  public PhotosSearchQuery search(){  return new PhotosSearchQuery(getClient());}  }
class C{  private static double log2(double x){  return Math.log(x) / Math.log(2);}  }
class C{  public static int inflate(byte[] previous,int previousLength,byte[] current,int currentLength,byte[] result){  if (previous == null) {    System.arraycopy(current,0,result,0,currentLength);    return currentLength;  }  int length=0;  int start1=0;  int start2=0;  while (start1 < previousLength && start2 < currentLength) {    int end1=start1;    while (end1 < previousLength && previous[end1] != '\t') {      end1++;    }    int end2=start2;    while (end2 < currentLength && current[end2] != '\t') {      end2++;    }    if (current[start2] == '&' && end2 == start2 + 1) {      for (int i=start1; i < end1; i++)       result[length++]=previous[i];    } else {      for (int i=start2; i < end2; i++)       result[length++]=current[i];    }    if (end2 < currentLength)     result[length++]='\t';    start1=end1 + 1;    start2=end2 + 1;  }  return length;}  }
class C{  public static String deleteChar(String fromString,char charToDelete){  StringBuffer buffer=new StringBuffer(fromString.length());  for (int i=0; i < fromString.length(); i++) {    if (fromString.charAt(i) != charToDelete) {      buffer.append(fromString.charAt(i));    }  }  return new String(buffer);}  }
class C{  public int code(){  return code;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Bind_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200919,skilltarget,skillcaster,skillname);}  }
class C{  private boolean hasConcatenationAsIndex(ArrayAccessExpression objExpression){  PsiElement objExpressionToInspect=objExpression;  while (objExpressionToInspect instanceof ArrayAccessExpression) {    ArrayIndex objIndex=((ArrayAccessExpression)objExpressionToInspect).getIndex();    if (null != objIndex && objIndex.getValue() instanceof BinaryExpression) {      PsiElement objOperation=((BinaryExpression)objIndex.getValue()).getOperation();      if (null != objOperation && objOperation.getNode().getElementType() == PhpTokenTypes.opCONCAT) {        return true;      }    }    objExpressionToInspect=objExpressionToInspect.getParent();  }  return false;}  }
class C{  public static void verifyToken(String token,AirMapCallback<Void> listener){  String url=String.format(pilotVerifyUrl,AirMap.getUserId());  JSONObject params=new JSONObject();  try {    params.put("token",Integer.valueOf(token));  } catch (  JSONException e) {    e.printStackTrace();  }  AirMap.getClient().postWithJsonBody(url,params,new VoidCallback(listener));}  }
class C{  public static boolean isValidIANAEncoding(String ianaEncoding){  if (ianaEncoding != null) {    int length=ianaEncoding.length();    if (length > 0) {      char c=ianaEncoding.charAt(0);      if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')) {        for (int i=1; i < length; i++) {          c=ianaEncoding.charAt(i);          if ((c < 'A' || c > 'Z') && (c < 'a' || c > 'z') && (c < '0' || c > '9')&& c != '.' && c != '_' && c != '-') {            return false;          }        }        return true;      }    }  }  return false;}  }
class C{  @Override public void skip(final int num){  for (int x=0; x < num; x++) {    readByte();  }}  }
class C{  private void removeExcess(){  int outing=size - maxSize;  Link<E> previous=voidLink.next;  for (int i=0; i < outing; i++) {    previous=previous.next;  }  voidLink.next=previous;  previous.previous=voidLink;  size=maxSize;  modCount++;}  }
class C{  protected boolean newWritableStorageConnection(String group_name) throws IOException, MyException {  if (this.storageServer != null) {    return false;  } else {    TrackerClient tracker=new TrackerClient();    this.storageServer=tracker.getStoreStorage(this.trackerServer,group_name);    if (this.storageServer == null) {      throw new MyException("getStoreStorage fail, errno code: " + tracker.getErrorCode());    }    return true;  }}  }
class C{  public void disableGridDashedLine(){  mGridDashPathEffect=null;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public EnhancedForStmt fullCopy(){  EnhancedForStmt tree=(EnhancedForStmt)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  @Override public void occurrence(short occurrence,Augmentations augs) throws XNIException {}  }
class C{  private void appendPositionParams(Appendable sr,Map<String,Object> context,ModelFormField modelFormField) throws IOException {  Integer positions=(Integer)context.get("formFieldRender_positions");  Integer position=(Integer)context.get("formFieldRender_position");  Integer positionSpan=(Integer)context.get("formFieldRender_positionSpan");  Integer nextPositionInRow=(Integer)context.get("formFieldRender_nextPositionInRow");  Integer lastPositionInRow=(Integer)context.get("formFieldRender_lastPositionInRow");  sr.append(" positions=" + (positions != null ? positions.toString() : "\"\""));  sr.append(" position=" + (position != null ? position.toString() : "\"\""));  sr.append(" positionSpan=" + (positionSpan != null ? positionSpan.toString() : "\"\""));  sr.append(" nextPositionInRow=" + (nextPositionInRow != null ? nextPositionInRow.toString() : "\"\""));  sr.append(" lastPositionInRow=" + (lastPositionInRow != null ? lastPositionInRow.toString() : "\"\""));}  }
class C{  @Override public Result decode(BinaryBitmap image) throws NotFoundException, FormatException, ChecksumException {  return decode(image,null);}  }
class C{  private boolean addViewItem(int index,boolean first){  View view=getItemView(index);  if (view != null) {    if (first) {      itemsLayout.addView(view,0);    } else {      itemsLayout.addView(view);    }    return true;  }  return false;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public ThisAccess fullCopy(){  ThisAccess tree=(ThisAccess)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public void invalidate(){  damageReport();  super.invalidate();}  }
class C{  public void deleteIndex(String name){synchronized (indices) {    indexNames.remove(name);  }}  }
class C{  public IgDiskCache(File directory,long maxSizeInBytes,Executor serialExecutor){  this(directory,maxSizeInBytes,DEFAULT_MAX_COUNT,serialExecutor);}  }
class C{  public Shape cross(float x,float y,float height){  float h14=3 * height / 8, h34=5 * height / 8;  m_path.reset();  m_path.moveTo(x + h14,y);  m_path.lineTo(x + h34,y);  m_path.lineTo(x + h34,y + h14);  m_path.lineTo(x + height,y + h14);  m_path.lineTo(x + height,y + h34);  m_path.lineTo(x + h34,y + h34);  m_path.lineTo(x + h34,y + height);  m_path.lineTo(x + h14,y + height);  m_path.lineTo(x + h14,y + h34);  m_path.lineTo(x,y + h34);  m_path.lineTo(x,y + h14);  m_path.lineTo(x + h14,y + h14);  m_path.closePath();  return m_path;}  }
class C{  static void appendLengthInfo(int numLetters,Version version,Mode mode,BitArray bits) throws WriterException {  int numBits=mode.getCharacterCountBits(version);  if (numLetters >= (1 << numBits)) {    throw new WriterException(numLetters + " is bigger than " + ((1 << numBits) - 1));  }  bits.appendBits(numLetters,numBits);}  }
class C{  private void handleIncomingResponseMessage(SerialMessage incomingMessage) throws ZWaveSerialMessageException {  logger.trace("Incoming Message type = RESPONSE");  ZWaveCommandProcessor processor=ZWaveCommandProcessor.getMessageDispatcher(incomingMessage.getMessageClass());  if (processor == null) {    logger.warn(String.format("TODO: Implement processing of Response Message = %s (0x%02X)",incomingMessage.getMessageClass().getLabel(),incomingMessage.getMessageClass().getKey()));    return;  }  boolean result=processor.handleResponse(this,lastSentMessage,incomingMessage);  if (processor.isTransactionComplete()) {    notifyEventListeners(new ZWaveTransactionCompletedEvent(this.lastSentMessage,result));    transactionCompleted.release();    logger.trace("Released. Transaction completed permit count -> {}",transactionCompleted.availablePermits());  }switch (incomingMessage.getMessageClass()) {case GetVersion:    this.zWaveVersion=((GetVersionMessageClass)processor).getVersion();  this.ZWaveLibraryType=((GetVersionMessageClass)processor).getLibraryType();break;case MemoryGetId:this.ownNodeId=((MemoryGetIdMessageClass)processor).getNodeId();this.homeId=((MemoryGetIdMessageClass)processor).getHomeId();break;case GetSucNodeId:sucID=((GetSucNodeIdMessageClass)processor).getSucNodeId();if (setSUC == true && sucID == 0) {enqueue(new EnableSucMessageClass().doRequest(EnableSucMessageClass.SUCType.SERVER));enqueue(new SetSucNodeMessageClass().doRequest(ownNodeId,SetSucNodeMessageClass.SUCType.SERVER));} else if (setSUC == false && sucID == ownNodeId) {enqueue(new EnableSucMessageClass().doRequest(EnableSucMessageClass.SUCType.NONE));enqueue(new SetSucNodeMessageClass().doRequest(ownNodeId,SetSucNodeMessageClass.SUCType.NONE));}enqueue(new GetControllerCapabilitiesMessageClass().doRequest());break;case GetControllerCapabilities:controllerType=((GetControllerCapabilitiesMessageClass)processor).getDeviceType();break;case SerialApiGetCapabilities:serialAPIVersion=((SerialApiGetCapabilitiesMessageClass)processor).getSerialAPIVersion();manufactureId=((SerialApiGetCapabilitiesMessageClass)processor).getManufactureId();deviceId=((SerialApiGetCapabilitiesMessageClass)processor).getDeviceId();deviceType=((SerialApiGetCapabilitiesMessageClass)processor).getDeviceType();apiCapabilities=((SerialApiGetCapabilitiesMessageClass)processor).getApiCapabilities();enqueue(new SerialApiGetInitDataMessageClass().doRequest());break;case SerialApiGetInitData:for (Integer nodeId : ((SerialApiGetInitDataMessageClass)processor).getNodes()) {addNode(nodeId);}notifyEventListeners(new ZWaveNetworkStateEvent(true));break;default :break;}}  }
class C{  public NewsfeedGetRecommendedQuery startFrom(String value){  return unsafeParam("start_from",value);}  }
class C{  public Matrix zoomIn(float x,float y){  Matrix save=new Matrix();  save.set(mMatrixTouch);  save.postScale(1.4f,1.4f,x,y);  return save;}  }
class C{  public void readBody(DataInput dataIn) throws IOException {  try {    Body=SerializationHelper.readObject((InputStream)dataIn);  } catch (  ClassNotFoundException ex) {    throw new IOException(ex.toString());  }}  }
class C{  private int castLongToInt(final long l){  if (l < Integer.MIN_VALUE || l > Integer.MAX_VALUE) {    LOG.warn("castLongToInt() - unsafe cast of long " + l + " to int");  }  return (int)l;}  }
class C{  @Override public void update(@SwingCoordinate int x,@SwingCoordinate int y,@InputEventMask int modifiers){  super.update(x,y,modifiers);  DrawConstraintModel drawModel=ConstraintModel.getDrawConstraintModel(myScreenView);  drawModel.updateModifiers(modifiers);  int androidX=Coordinates.getAndroidX(myScreenView,x);  int androidY=Coordinates.getAndroidY(myScreenView,y);  drawModel.mouseDragged(androidX,androidY);  ConstraintModel.getConstraintModel(myScreenView.getModel()).updateXml();}  }
class C{  public static boolean confirmPrompt(String prompt) throws IOException {  while (true) {    System.out.print(prompt + " (Y or N) ");    StringBuilder responseBuilder=new StringBuilder();    while (true) {      int c=System.in.read();      if (c == -1 || c == '\r' || c == '\n') {        break;      }      responseBuilder.append((char)c);    }    String response=responseBuilder.toString();    if (response.equalsIgnoreCase("y") || response.equalsIgnoreCase("yes")) {      return true;    } else     if (response.equalsIgnoreCase("n") || response.equalsIgnoreCase("no")) {      return false;    }    System.out.println("Invalid input: " + response);  }}  }
class C{  public static boolean isPcm(AudioFormat.Encoding encoding){  return encoding.equals(AudioFormat.Encoding.PCM_SIGNED) || encoding.equals(AudioFormat.Encoding.PCM_UNSIGNED);}  }
class C{  @Override public boolean contains(Object key){  return indexOf(key) >= 0;}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("set show-consensus=");  boolean value=np.getBoolean();  np.matchIgnoreCase(";");  AlignmentViewer viewer=(AlignmentViewer)getViewer();  viewer.getAlignmentViewerPanel().setShowConsensus(value);}  }
class C{  public void addBodyDecl(BodyDecl node){  List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();  list.addChild(node);}  }
class C{  public Builder popUpAnchor(Point popUpAnchor){  this.popUpAnchor=popUpAnchor;  return this;}  }
class C{  @Override public void characters(XMLString text,Augmentations augs) throws XNIException {  if (fInnerAnnotationDepth == -1) {    for (int i=text.offset; i < text.offset + text.length; i++) {      if (!XMLChar.isSpace(text.ch[i])) {        String txt=new String(text.ch,i,text.length + text.offset - i);        fErrorReporter.reportError(fLocator,XSMessageFormatter.SCHEMA_DOMAIN,"s4s-elt-character",new Object[]{txt},XMLErrorReporter.SEVERITY_ERROR);        break;      }    }  } else {    schemaDOM.characters(text);  }}  }
class C{  protected void onModelBound(EpoxyViewHolder holder,EpoxyModel<?> model,int position){}  }
class C{  public boolean hasMoreTokens(){  int nextChar=currentChar;  return (nextChar != EOF);}  }
class C{  public synchronized void openDriver(SurfaceHolder holder) throws IOException {  OpenCamera theCamera=camera;  if (theCamera == null) {    theCamera=OpenCameraInterface.open(requestedCameraId);    if (theCamera == null) {      throw new IOException("Camera.open() failed to return object from driver");    }    camera=theCamera;  }  if (!initialized) {    initialized=true;    configManager.initFromCameraParameters(theCamera);    if (requestedFramingRectWidth > 0 && requestedFramingRectHeight > 0) {      setManualFramingRect(requestedFramingRectWidth,requestedFramingRectHeight);      requestedFramingRectWidth=0;      requestedFramingRectHeight=0;    }  }  Camera cameraObject=theCamera.getCamera();  Camera.Parameters parameters=cameraObject.getParameters();  String parametersFlattened=parameters == null ? null : parameters.flatten();  try {    configManager.setDesiredCameraParameters(theCamera,false);  } catch (  RuntimeException re) {    Log.w(TAG,"Camera rejected parameters. Setting only minimal safe-mode parameters");    Log.i(TAG,"Resetting to saved camera params: " + parametersFlattened);    if (parametersFlattened != null) {      parameters=cameraObject.getParameters();      parameters.unflatten(parametersFlattened);      try {        cameraObject.setParameters(parameters);        configManager.setDesiredCameraParameters(theCamera,true);      } catch (      RuntimeException re2) {        Log.w(TAG,"Camera rejected even safe-mode parameters! No configuration");      }    }  }  cameraObject.setPreviewDisplay(holder);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Sleep_END_A_TO_B(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200908,skilltarget);}  }
class C{  public static boolean isLoaded(String name,IdMapper.MapType mapType){  return name2classification.get(name) != null && get(name,true).getIdMapper().isLoaded(mapType);}  }
class C{  public void expand(DefaultMutableTreeNode v){  if (v == null)   v=this.root;  for (Enumeration descendants=v.breadthFirstEnumeration(); descendants.hasMoreElements(); ) {    v=(DefaultMutableTreeNode)descendants.nextElement();    this.tree.expandPath(new TreePath(v.getPath()));  }}  }
class C{  public int batchSet(ObjectInfo objInfo,Map keyValues,Map failKeys) throws MyException {  return this.batchSet(objInfo,keyValues,failKeys,ProtoCommon.FDHT_EXPIRES_NEVER);}  }
class C{  private void generateGetModuleMethod(TypeElement scope,NewDependencyInfo dependencyInfo){  Preconditions.checkArgument(dependencyInfo.getProvisionMethodElement() != null,String.format("Expect one from module but get %s.",dependencyInfo));  TypeElement module=dependencyInfo.getSourceClassElement();  TypeName moduleTypeName=TypeName.get(module.asType());  ClassName packagedInjectorClassName=getPackagedInjectorForNewDependencyInfo(scope,dependencyInfo);  TypeSpec.Builder componentSpecBuilder=getInjectorTypeSpecBuilder(packagedInjectorClassName);  String moduleCanonicalNameConverted=Utils.getQualifiedName(module).replace(".","_");  componentSpecBuilder.addField(moduleTypeName,moduleCanonicalNameConverted,Modifier.PRIVATE);  MethodSpec.Builder methodBuilder=MethodSpec.methodBuilder(Utils.getGetMethodName(module)).addModifiers(Modifier.PRIVATE).addStatement("$T result = $N",module,moduleCanonicalNameConverted).returns(moduleTypeName);  methodBuilder.beginControlFlow("if (result == null)");  if (!isPassedModule(module)) {    methodBuilder.addStatement("result = $N = new $T()",moduleCanonicalNameConverted,module);  } else {    methodBuilder.addStatement("result = $N = $L.$N()",moduleCanonicalNameConverted,TOP_LEVEL_INJECTOR_FIELD,Utils.getGetMethodName(module));  }  methodBuilder.endControlFlow();  methodBuilder.addStatement("return result");  MethodSpec methodSpec=methodBuilder.build();  componentSpecBuilder.addMethod(methodSpec);  modulesWithGetter.get(packagedInjectorClassName).put(ClassName.get(module),methodSpec);}  }
class C{  public static void writeSwappedDouble(OutputStream output,double value) throws IOException {  writeSwappedLong(output,Double.doubleToLongBits(value));}  }
class C{  private static int findMatch(byte[] text,byte[] pattern,int start){  int textLength=text.length;  int patternLength=pattern.length;  nextBase:   for (int base=start; base < textLength; base++) {    for (int t=base, p=0; p < patternLength; t++, p++) {      if (text[t] != pattern[p]) {        continue nextBase;      }    }    return base;  }  return -1;}  }
class C{  private void displayLegionMessage(Player targetPlayer,Entry<Timestamp,String> currentAnnouncement){  if (currentAnnouncement != null) {    PacketSendUtility.sendPacket(targetPlayer,SM_SYSTEM_MESSAGE.STR_GUILD_NOTICE(currentAnnouncement.getValue(),(int)(currentAnnouncement.getKey().getTime() / 1000)));  }}  }
class C{  public static void writePbsEntryPacketObjectArray(PbsOutputStream output,Object[] objects){  if (objects != null) {    output.writeInt(objects.length);    for (    Object entry : objects)     writePbsEntryPacket(output,(PbsEntryPacket)entry);  } else   output.writeInt(-1);}  }
class C{  private synchronized void stopInclusionTimer(){  logger.debug("Stopping inclusion timer.");  if (inclusion) {    requestAddNodesStop();  } else   if (exclusion) {    requestRemoveNodesStop();  } else {    logger.error("Neither inclusion nor exclusion was active!");  }  inclusion=false;  exclusion=false;  if (timerTask != null) {    timerTask.cancel();    timerTask=null;  }}  }
class C{  public Builder cacheInMemory(boolean cacheInMemory){  this.cacheInMemory=cacheInMemory;  return this;}  }
class C{  public Zmat(int nrow,int ncol){  Parameters.BaseIndexNotChangeable=true;  basex=Parameters.BaseIndex;  this.nrow=nrow;  this.ncol=ncol;  getProperties();  re=new double[nr][nc];  im=new double[nr][nc];  for (int i=0; i < nr; i++)   for (int j=0; j < nc; j++) {    re[i][j]=0;    im[i][j]=0;  }}  }
class C{  @Deprecated public ShapelessRecipe addIngredient(int count,Material ingredient,int rawdata){  Validate.isTrue(ingredients.size() + count <= 9,"Shapeless recipes cannot have more than 9 ingredients");  if (rawdata == -1) {    rawdata=Short.MAX_VALUE;  }  while (count-- > 0) {    ingredients.add(new ItemStack(ingredient,1,(short)rawdata));  }  return this;}  }
class C{  public ArrayList<MonsterStatus> queryMonsterStatus(long id){  ArrayList<MonsterStatus> monsterStatuses=new ArrayList<MonsterStatus>();  MonsterStatusCursor cursor=mHelper.queryMonsterStatus(id);  cursor.moveToFirst();  while (!cursor.isAfterLast()) {    monsterStatuses.add(cursor.getStatus());    cursor.moveToNext();  }  cursor.close();  return monsterStatuses;}  }
class C{  private void launchIntent(String url,String referer,String headers,String externalAppId,boolean forceNewTab,Intent intent){  if (mUIInitialized) {    mLayoutManager.hideOverview(false);    getToolbarManager().finishAnimations();  }  if (TextUtils.equals(externalAppId,getPackageName())) {    getCurrentTabCreator().launchUrl(url,TabLaunchType.FROM_LINK,intent,mIntentHandlingTimeMs);  } else {    getTabCreator(false).launchUrlFromExternalApp(url,referer,headers,externalAppId,forceNewTab,intent,mIntentHandlingTimeMs);  }}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){  final int deltaValue, currentScrollValue, scrollValue;switch (view.getPullToRefreshScrollDirection()) {case HORIZONTAL:    deltaValue=deltaX;  scrollValue=scrollX;currentScrollValue=view.getScrollX();break;case VERTICAL:default :deltaValue=deltaY;scrollValue=scrollY;currentScrollValue=view.getScrollY();break;}if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {final Mode mode=view.getMode();if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {final int newScrollValue=(deltaValue + scrollValue);if (PullToRefreshBase.DEBUG) {Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);}if (newScrollValue < (0 - fuzzyThreshold)) {if (mode.showHeaderLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));}} else if (newScrollValue > (scrollRange + fuzzyThreshold)) {if (mode.showFooterLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));}} else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {view.setState(State.RESET);}} else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {view.setState(State.RESET);}}}  }
class C{  public AuthenticatorException(String msg,List<String> messages){  super(msg,messages);}  }
class C{  @Override public boolean onPreferenceChange(Preference preference,Object o){  if (preference.getKey().equals(getString(R.string.key_back_to_top))) {    String backType=ValueUtils.getBackToTopName(getActivity(),(String)o);    preference.setSummary(getString(R.string.now) + " : " + backType);    BackToTopUtils.getInstance(getActivity()).changeBackValue((String)o);  } else   if (preference.getKey().equals(getString(R.string.key_language))) {    String language=ValueUtils.getLanguageName(getActivity(),(String)o);    preference.setSummary(getString(R.string.now) + " : " + language);    Mysplash.getInstance().setLanguage((String)o);    SharedPreferences.Editor editor=getActivity().getSharedPreferences(Mysplash.SP_STARTUP_ITEM,Context.MODE_PRIVATE).edit();    editor.putString(getString(R.string.key_language),(String)o);    editor.apply();    showRebootSnackbar();  } else   if (preference.getKey().equals(getString(R.string.key_default_photo_order))) {    String order=ValueUtils.getOrderName(getActivity(),(String)o);    preference.setSummary(getString(R.string.now) + " : " + order);    showRebootSnackbar();  } else   if (preference.getKey().equals(getString(R.string.key_default_collection_type))) {    String type=ValueUtils.getCollectionName(getActivity(),(String)o);    preference.setSummary(getString(R.string.now) + " : " + type);    showRebootSnackbar();  } else   if (preference.getKey().equals(getString(R.string.key_download_scale))) {    String scale=ValueUtils.getScaleName(getActivity(),(String)o);    preference.setSummary(getString(R.string.now) + " : " + scale);  }  return true;}  }
class C{  private void parseHeader(String header){  Log.v("HttpHeader","HttpAuthHeader.parseHeader(): header: " + header);  if (header != null) {    String parameters=parseScheme(header);    if (parameters != null) {      if (mScheme != UNKNOWN) {        parseParameters(parameters);      }    }  }}  }
class C{  public static boolean isEmpty(CharSequence str){  if (str == null || str.toString() == null || str.toString().trim().length() == 0 || str.length() == 0 || "null".equalsIgnoreCase(str.toString())) {    return true;  } else {  }  return false;}  }
class C{  public AccountSetOfflineQuery(VkApiClient client,UserActor actor){  super(client,"account.setOffline",OkResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public Matrix3f zero(){  m00=m01=m02=m10=m11=m12=m20=m21=m22=0.0f;  return this;}  }
class C{  protected Dfp trunc(final DfpField.RoundingMode rmode){  boolean changed=false;  if (isNaN()) {    return newInstance(this);  }  if (nans == INFINITE) {    return newInstance(this);  }  if (mant[mant.length - 1] == 0) {    return newInstance(this);  }  if (exp < 0) {    field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);    Dfp result=newInstance(getZero());    result=dotrap(DfpField.FLAG_INEXACT,TRUNC_TRAP,this,result);    return result;  }  if (exp >= mant.length) {    return newInstance(this);  }  Dfp result=newInstance(this);  for (int i=0; i < mant.length - result.exp; i++) {    changed|=result.mant[i] != 0;    result.mant[i]=0;  }  if (changed) {switch (rmode) {case ROUND_FLOOR:      if (result.sign == -1) {        result=result.add(newInstance(-1));      }    break;case ROUND_CEIL:  if (result.sign == 1) {    result=result.add(getOne());  }break;case ROUND_HALF_EVEN:default :final Dfp half=newInstance("0.5");Dfp a=subtract(result);a.sign=1;if (a.greaterThan(half)) {a=newInstance(getOne());a.sign=sign;result=result.add(a);}if (a.equals(half) && result.exp > 0 && (result.mant[mant.length - result.exp] & 1) != 0) {a=newInstance(getOne());a.sign=sign;result=result.add(a);}break;}field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);result=dotrap(DfpField.FLAG_INEXACT,TRUNC_TRAP,this,result);return result;}return result;}  }
class C{  public PhotosGetCommentsQuery fields(EnumParam... value){  return unsafeParam("fields",value);}  }
class C{  private static boolean noResourceIncludedFieldsSpecified(IncludedFieldsParams typeIncludedFields){  return typeIncludedFields == null || typeIncludedFields.getParams().isEmpty();}  }
class C{  public CM_MACRO_CREATE(int opcode,State state,State... restStates){  super(opcode,state,restStates);}  }
class C{  public void init$Children(){  children=new ASTNode[2];  setChild(new List(),0);  setChild(new List(),1);}  }
class C{  private void rewind(){  fCurrentTokenIndex=0;}  }
class C{  public T remove(final int key){  final int hash=hashOf(key);  int index=hash & mask;  if (containsKey(key,index)) {    return doRemove(index);  }  if (states[index] == FREE) {    return missingEntries;  }  int j=index;  for (int perturb=perturb(hash); states[index] != FREE; perturb>>=PERTURB_SHIFT) {    j=probe(perturb,j);    index=j & mask;    if (containsKey(key,index)) {      return doRemove(index);    }  }  return missingEntries;}  }
class C{  void clearAssociatedData(){  clearIdOfModelWithFK();  clearIdOfModelWithoutFK();  clearIdOfModelForJoinTable();  clearFKNameList();}  }
class C{  @Override public Attr createAttribute(String name) throws DOMException {  if (errorChecking && !isXMLName(name,xml11Version)) {    String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"INVALID_CHARACTER_ERR",null);    throw new DOMException(DOMException.INVALID_CHARACTER_ERR,msg);  }  return new AttrImpl(this,name);}  }
class C{  public ASTNode cloneSubtree(){  try {    ASTNode tree=(ASTNode)clone();    tree.setParent(null);    if (children != null) {      tree.children=new ASTNode[children.length];      for (int i=0; i < children.length; ++i) {        if (children[i] == null) {          tree.children[i]=null;        } else {          tree.children[i]=children[i].cloneSubtree();          tree.children[i].setParent(tree);        }      }    }    return tree;  } catch (  CloneNotSupportedException e) {    throw new Error("Error: clone not supported for " + getClass().getName());  }}  }
class C{  private void processFormState(){  if (currentFieldPosition == -1) {    Log.d(DEBUG_TAG,"process(): begin");    processFormFieldBegin();    return;  }  FormField field=formFields.get(currentFieldPosition);  if (field != null)   processFormField(field); else   processFormFieldEnd();}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  final Director dir=getDir();  final Document doc=dir.getDocument();  final MainViewer viewer=dir.getMainViewer();  if (ProgramProperties.isUseGUI() && (doc.getNumberOfSamples() > 0 || !doc.neverOpenedReads || doc.isDirty())) {    final Director newDir=Director.newProject();    newDir.getMainViewer().setDoReInduce(true);    newDir.getMainViewer().setDoReset(true);    newDir.execute(np.getQuotedTokensRespectCase(null,";") + ";",newDir.getMainViewer().getCommandManager());  } else {    try {      viewer.getFrame().toFront();      np.matchIgnoreCase("open file=");      String fileName=np.getAbsoluteFileName();      if (fileName.contains("'"))       NotificationsInSwing.showWarning(viewer.getFrame(),"File name or path contains a single quote ', this will cause problems, please change!");      boolean readOnly=false;      if (np.peekMatchIgnoreCase("readOnly=")) {        np.matchIgnoreCase("readOnly=");        readOnly=np.getBoolean();      }      np.matchIgnoreCase(";");      doc.closeConnector();      final MeganFile meganFile=doc.getMeganFile();      meganFile.setFileFromExistingFile(fileName,readOnly);      meganFile.checkFileOkToRead();      if (meganFile.hasDataConnector()) {        if (meganFile.isMeganServerFile())         meganFile.setReadOnly(true);        if (!meganFile.isReadOnly() && MeganFile.isUIdContainedInSetOfOpenFiles(meganFile.getName(),meganFile.getDataConnector().getUId())) {          NotificationsInSwing.showWarning(viewer.getFrame(),"File already open: " + meganFile.getFileName() + "\nWill open read-only");          meganFile.setReadOnly(true);        }      }      doc.getProgressListener().setMaximum(-1);      viewer.getCollapsedIds().clear();      doc.loadMeganFile();      if (meganFile.hasDataConnector()) {        if (doc.getDataTable().getNumberOfSamples() > 0) {          SyncDataTableAndTaxonomy.syncCollapsedFromSummaryToTaxonomyViewer(doc.getDataTable(),viewer);          if (doc.getDataTable().getTotalReads() > 0) {            doc.setNumberReads(doc.getDataTable().getTotalReads());          }          viewer.getNodeDrawer().setStyle(doc.getDataTable().getNodeStyle(ClassificationType.Taxonomy.toString()),NodeDrawer.Style.Circle);          doc.getDataTable().setSamples(new String[]{Basic.getFileBaseName(meganFile.getName())},doc.getDataTable().getSampleUIds(),doc.getDataTable().getSampleSizes(),doc.getDataTable().getBlastModes());        }      } else       if (meganFile.isMeganSummaryFile()) {        SyncDataTableAndTaxonomy.syncCollapsedFromSummaryToTaxonomyViewer(doc.getDataTable(),viewer);        if (doc.getDataTable().getTotalReads() > 0) {          doc.setNumberReads(doc.getDataTable().getTotalReads());          if (doc.getDataTable().getNumberOfSamples() == 1) {            viewer.getNodeDrawer().setStyle(doc.getDataTable().getNodeStyle(ClassificationType.Taxonomy.toString()),NodeDrawer.Style.Circle);          } else {            viewer.getNodeDrawer().setStyle(doc.getDataTable().getNodeStyle(ClassificationType.Taxonomy.toString()),NodeDrawer.Style.PieChart);          }        } else {          throw new IOException("File is either empty or format is too old: " + meganFile.getName());        }      } else       throw new IOException("Old MEGAN2 format, not supported by this version of MEGAN");      viewer.setDoReInduce(true);      viewer.setDoReset(true);      doc.neverOpenedReads=false;      if (!dir.isInternalDocument())       MeganProperties.addRecentFile(meganFile.getFileName());      doc.setDirty(false);      if (meganFile.hasDataConnector())       MeganFile.addUIdToSetOfOpenFiles(meganFile.getName(),meganFile.getDataConnector().getUId());      if (System.currentTimeMillis() - timeOfLastOpen > 5000) {        NotificationsInSwing.showInformation(String.format("Opened file '%s' with %,d reads",fileName,doc.getNumberOfReads()),5000);      } else       System.err.println(String.format("Opened file '%s' with %,d reads",fileName,doc.getNumberOfReads()));      timeOfLastOpen=System.currentTimeMillis();      if (!ProgramProperties.isUseGUI())       executeImmediately("update;");    } catch (    Exception ex) {      doc.getMeganFile().setFileName(null);      if (doc.neverOpenedReads && ProjectManager.getNumberOfProjects() > 1) {        System.err.println("Closing window...");        dir.close();      }      throw ex;    }  }}  }
class C{  public BoundingVolume mergeLocal(BoundingVolume volume){  if (volume == null) {    return this;  }switch (volume.getType()) {case AABB:{      BoundingBox vBox=(BoundingBox)volume;      return merge(vBox.center,vBox.xExtent,vBox.yExtent,vBox.zExtent,this);    }default :  return null;}}  }
class C{  public String resolveSystemReverse(String systemId) throws IOException {  Vector resolved=resolveAllSystemReverse(systemId);  if (resolved != null && resolved.size() > 0) {    return (String)resolved.elementAt(0);  } else {    return null;  }}  }
class C{  public Complex[] transform(final double[] f,final TransformType type){  final double[][] dataRI=new double[][]{f.clone(),new double[f.length]};  transformInPlace(dataRI,normalization,type);  return TransformUtils.createComplexArray(dataRI);}  }
class C{  private void addIdentifierAttributesToJobTag(XmlSerializer out,JobStatus jobStatus) throws IOException {  out.attribute(null,"jobid",Integer.toString(jobStatus.getJobId()));  out.attribute(null,"package",jobStatus.getServiceComponent().getPackageName());  out.attribute(null,"class",jobStatus.getServiceComponent().getClassName());  out.attribute(null,"uid",Integer.toString(jobStatus.getUid()));}  }
class C{  @Override public void endCDATA(Augmentations augs) throws XNIException {  try {    if (fLexicalHandler != null) {      fLexicalHandler.endCDATA();    }  } catch (  SAXException e) {    throw new XNIException(e);  }}  }
class C{  public Histogram modifyEventCounters(BiFunction<Range,Double,Double> fn){  return new Histogram(stream().map(null));}  }
class C{  Node internalRemoveChild(Node oldChild,boolean replace) throws DOMException {  CoreDocumentImpl ownerDocument=ownerDocument();  if (ownerDocument.errorChecking) {    if (isReadOnly()) {      throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR,DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NO_MODIFICATION_ALLOWED_ERR",null));    }    if (oldChild != null && oldChild.getParentNode() != this) {      throw new DOMException(DOMException.NOT_FOUND_ERR,DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NOT_FOUND_ERR",null));    }  }  ChildNode oldInternal=(ChildNode)oldChild;  ownerDocument.removingNode(this,oldInternal,replace);  if (fNodeListCache != null) {    if (fNodeListCache.fLength != -1) {      fNodeListCache.fLength--;    }    if (fNodeListCache.fChildIndex != -1) {      if (fNodeListCache.fChild == oldInternal) {        fNodeListCache.fChildIndex--;        fNodeListCache.fChild=oldInternal.previousSibling();      } else {        fNodeListCache.fChildIndex=-1;      }    }  }  if (oldInternal == firstChild) {    oldInternal.isFirstChild(false);    firstChild=oldInternal.nextSibling;    if (firstChild != null) {      firstChild.isFirstChild(true);      firstChild.previousSibling=oldInternal.previousSibling;    }  } else {    ChildNode prev=oldInternal.previousSibling;    ChildNode next=oldInternal.nextSibling;    prev.nextSibling=next;    if (next == null) {      firstChild.previousSibling=prev;    } else {      next.previousSibling=prev;    }  }  ChildNode oldPreviousSibling=oldInternal.previousSibling();  oldInternal.ownerNode=ownerDocument;  oldInternal.isOwned(false);  oldInternal.nextSibling=null;  oldInternal.previousSibling=null;  changed();  ownerDocument.removedNode(this,replace);  checkNormalizationAfterRemove(oldPreviousSibling);  return oldInternal;}  }
class C{  @Override public boolean hasMoreData(){  int c=-1;  try {    reader.mark(10);    c=reader.read();    reader.reset();  } catch (  IOException ioe) {    ioe.printStackTrace();  }  return c != -1;}  }
class C{  @Deprecated public Builder cacheInMemory(){  cacheInMemory=true;  return this;}  }
class C{  public void initGui(){  this.buttonList.clear();  if (this.mc.playerController.isInCreativeMode()) {    this.mc.displayGuiScreen(new GuiContainerCreative(this.mc.thePlayer));  } else {    super.initGui();  }}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public static void startLocalZkServer(){  try {    startLocalZkServer(DEFAULT_ZK_TEST_PORT);  } catch (  Exception e) {    LOGGER.error("Failed to start ZK: " + e);  }}  }
class C{  public static boolean isUniformCollection(Collection<?> c,Class<?> e){  if (e == null) {    throw new IllegalArgumentException("Null reference type");  }  if (c == null) {    throw new IllegalArgumentException("Null collection");  }  if (c.isEmpty()) {    return false;  }  for (  Object o : c) {    if (o == null || !e.isAssignableFrom(o.getClass())) {      return false;    }  }  return true;}  }
class C{  protected MarketRemoveFromAlbumQuery albumIds(int... value){  return unsafeParam("album_ids",value);}  }
class C{  public boolean isComponentNotPresent(Class<?> componentClass){  final String cssClassName=new AemComponentHandler(componentClass).getCssClassName();  return isComponentNotPresent(cssClassName);}  }
class C{  public void addBitmapToCache(String data,BitmapDrawable value){  if (data == null || value == null) {    return;  }  if (mMemoryCache != null) {    if (RecyclingBitmapDrawable.class.isInstance(value)) {      ((RecyclingBitmapDrawable)value).setIsCached(true);    }    mMemoryCache.put(data,value);  }}  }
class C{  public MultiProducerSequencer(int bufferSize,final WaitStrategy waitStrategy){  super(bufferSize,waitStrategy);  availableBuffer=new int[bufferSize];  indexMask=bufferSize - 1;  indexShift=Util.log2(bufferSize);  initialiseAvailableBuffer();}  }
class C{  public PhotosGetQuery albumId(String value){  return unsafeParam("album_id",value);}  }
class C{  private void escapedStringLiteral(char quot,boolean isRaw){  int oldPos=isRaw ? pos - 2 : pos - 1;  boolean inTripleQuote=skipTripleQuote(quot);  StringBuilder literal=new StringBuilder();  while (pos < buffer.length) {    char c=buffer[pos];    pos++;switch (c) {case '\n':      if (inTripleQuote) {        literal.append(c);        break;      } else {        error("unterminated string literal at eol",oldPos,pos);        addToken(TokenKind.STRING,oldPos,pos - 1,literal.toString());        newline();        return;      }case '\\':    if (pos == buffer.length) {      error("unterminated string literal at eof",oldPos,pos);      addToken(TokenKind.STRING,oldPos,pos - 1,literal.toString());      return;    }  if (isRaw) {    literal.append('\\');    literal.append(buffer[pos]);    pos++;    break;  }c=buffer[pos];pos++;switch (c) {case '\n':break;case 'n':literal.append('\n');break;case 'r':literal.append('\r');break;case 't':literal.append('\t');break;case '\\':literal.append('\\');break;case '\'':literal.append('\'');break;case '"':literal.append('"');break;case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':{int octal=c - '0';if (pos < buffer.length) {c=buffer[pos];if (c >= '0' && c <= '7') {pos++;octal=(octal << 3) | (c - '0');if (pos < buffer.length) {c=buffer[pos];if (c >= '0' && c <= '7') {pos++;octal=(octal << 3) | (c - '0');}}}}literal.append((char)(octal & 0xff));break;}case 'a':case 'b':case 'f':case 'N':case 'u':case 'U':case 'v':case 'x':error("escape sequence not implemented: \\" + c,oldPos,pos);break;default :literal.append('\\');literal.append(c);break;}break;case '\'':case '"':if (c != quot || (inTripleQuote && !skipTripleQuote(quot))) {literal.append(c);} else {addToken(TokenKind.STRING,oldPos,pos,literal.toString());return;}break;default :literal.append(c);break;}}error("unterminated string literal at eof",oldPos,pos);addToken(TokenKind.STRING,oldPos,pos,literal.toString());}  }
class C{  public void endEntity(String name,Augmentations augs) throws XNIException {  fEntityDepth--;}  }
class C{  public boolean removeItemContent(String uid){  if (!users.isEmpty()) {    return removeContent(uid,users);  } else   if (!reports.isEmpty()) {    return removeContent(uid,reports);  } else {    return removeContent(uid,resources);  }}  }
class C{  public UsersSearchQuery religion(String value){  return unsafeParam("religion",value);}  }
class C{  private static boolean validMethod(String name){  int len=name.length();  if (len == 0) {    return false;  }  char c=name.charAt(0);  if (!Character.isJavaIdentifierStart(c) && !(c == '*' && len > 1)) {    return false;  }  if (c != '*' && name.charAt(len - 1) == '*') {    len--;  }  while (--len >= 1) {    if (!Character.isJavaIdentifierPart(name.charAt(len))) {      return false;    }  }  return true;}  }
class C{  public PhotosSaveOwnerPhotoQuery saveOwnerPhoto(UserActor actor){  return new PhotosSaveOwnerPhotoQuery(getClient(),actor);}  }
class C{  public WallSearchQuery query(String value){  return unsafeParam("query",value);}  }
class C{  public static void writeStringToFile(String path,String toWrite,JavaSparkContext sc) throws IOException {  writeStringToFile(path,toWrite,sc.sc());}  }
class C{  public void testMultiValuedWholeHighlight() throws Exception {  deleteAllDocs();  long gen=addDocument("{fields: {authors: ['Dr. Seuss', 'Bob Smith', 'Seuss is Fun.  Some extra content.']}}");  JSONObject result=send("search","{queryText: 'authors:seuss', retrieveFields: [{field: authors, highlight: whole}], searcher: {indexGen: " + gen + "}}");  assertEquals(1,getInt(result,"totalHits"));  JSONArray fields=getArray(result,"hits[0].fields.authors");  assertEquals(3,fields.size());  assertEquals("Dr. <b>Seuss</b>",renderSingleHighlight((JSONArray)fields.get(0)));  assertEquals("Bob Smith",renderSingleHighlight((JSONArray)fields.get(1)));  assertEquals("<b>Seuss</b> is Fun.  Some extra content.",renderSingleHighlight((JSONArray)fields.get(2)));}  }
class C{  private static final String toXml(float[] color,String name){  StringBuilder sb=new StringBuilder();  sb.append("<").append(name).append(" r=\"").append(color[0]).append("\" g=\"").append(color[1]).append("\" b=\"").append(color[2]).append("\" />");  return sb.toString();}  }
class C{  public static boolean isExtension(String filename,String extension){  if (filename == null) {    return false;  }  if (extension == null || extension.length() == 0) {    return indexOfExtension(filename) == -1;  }  String fileExt=getExtension(filename);  return fileExt.equals(extension);}  }
class C{  public static void updateBaseUrl(Throwable t){  SusiBaseUrls baseUrls=PrefManager.getBaseUrls();  int indexOfUrl=baseUrls.getSusiServices().indexOf(PrefManager.getSusiRunningBaseUrl());  if (indexOfUrl != baseUrls.getSusiServices().size()) {    PrefManager.setSusiRunningBaseUrl(BaseUrl.PROTOCOL_HTTP + baseUrls.getSusiServices().get(indexOfUrl + 1));  } else {    PrefManager.setSusiRunningBaseUrl(BaseUrl.PROTOCOL_HTTP + baseUrls.getSusiServices().get(0));  }  if (t instanceof SocketTimeoutException || t instanceof ConnectException) {    ClientBuilder.createSusiService();  }}  }
class C{  @Override public final synchronized void write(int ib) throws IOException {  dis.write(ib);}  }
class C{  public static void log(IStatus status){  SVNUIPlugin.getPlugin().getLog().log(status);}  }
class C{  public SparseIntArray(int initialCapacity){  if (initialCapacity == 0) {    mKeys=SparseIntArray.EMPTY_INT_ARRAY;    mValues=SparseIntArray.EMPTY_INT_ARRAY;  } else {    mKeys=new int[initialCapacity];    mValues=new int[mKeys.length];  }  mSize=0;}  }
class C{  public boolean isApplicable(){  final Document doc=((MainViewer)getDir().getMainViewer()).getDocument();  return doc.getNumberOfReads() > 0 && doc.getMeganFile().hasDataConnector();}  }
class C{  public void requireSimilar(@NotNull String relativePath,@NotNull BufferedImage image) throws IOException {  int maxDimension=Math.max(image.getWidth(),image.getHeight());  double scale=myThumbnailSize / (double)maxDimension;  BufferedImage thumbnail=ImageUtils.scale(image,scale,scale);  InputStream is=ImageFixture.class.getResourceAsStream(relativePath);  if (is == null) {    File sourceDir=getTestDataDir();    File thumbnailDir=sourceDir;    if (thumbnailDir == null) {      thumbnailDir=getTempDir();    }    assertAbout(file()).that(thumbnailDir).isDirectory();    File file=new File(thumbnailDir,relativePath.replace('/',File.separatorChar));    if (file.exists()) {      BufferedImage goldenImage=ImageIO.read(file);      assertImageSimilar(relativePath,goldenImage,thumbnail,myMaxPercentDifference);    } else {      File parent=file.getParentFile();      if (!parent.exists()) {        boolean ok=parent.mkdirs();        assertTrue("Could not create directory " + parent.getPath(),ok);      }      ImageIO.write(thumbnail,"PNG",file);      if (sourceDir == null) {        String message="Thumbnail did not exist. You should copy the following generated thumbnail file into $AOSP" + File.separator + RELATIVE_DATA_PATH+ " : "+ file.getCanonicalPath();        if (FAIL_ON_MISSING_THUMBNAIL) {          fail(message);        } else {          System.out.println(message);        }      } else {        String message="File did not exist, created " + file.getCanonicalPath();        if (FAIL_ON_MISSING_THUMBNAIL) {          fail(message);        } else {          System.out.println(message);        }      }    }  } else {    BufferedImage goldenImage=ImageIO.read(is);    assertImageSimilar(relativePath,goldenImage,thumbnail,myMaxPercentDifference);  }}  }
class C{  public MultiFilterBarImplementor(MultiFilterBarModel model,MultiFilterBarView view){  this.model=model;  this.view=view;}  }
class C{  public MinReducer ignoreExceptions(){  this.ignoreExceptions=true;  return this;}  }
class C{  public static String defaultExtension(){  return ImageFileExtensionUtils.png;}  }
class C{  public ClusterInfoBeanPostProcessor(ClusterInfo clusterInfo){  this.clusterInfo=clusterInfo;}  }
class C{  private void stopCheckingStatus(){  executor.shutdownNow();  executor=Executors.newSingleThreadExecutor();  future=null;}  }
class C{  private boolean isFilterOk(final FilterType filterType,final Long tagId){  if (filterType != FilterType.NO_FILTERING) {    if ((filterType == FilterType.OLD_UPDATE)) {      this.equipmentLogger.debug(format("\told update filtering : [%d] update was filtered out because the new value timestamp is equal or older than the current value timestamp " + " and the current value has Good Quality or both new and current value has Bad Quality.",tagId));      this.equipmentLogger.debug("isFilterOk - sending value to statistics module: old update Filter");    } else     if ((filterType == FilterType.VALUE_DEADBAND)) {      this.equipmentLogger.debug(format("\tvalue-deadband filtering : the value of tag [%d] was filtered out due to value-deadband filtering rules and will not be sent to the server",tagId));      this.equipmentLogger.debug("isFilterOk - sending value to statistics module: Value Deadband Filter");    } else     if ((filterType == FilterType.REPEATED_VALUE)) {      this.equipmentLogger.debug(format("\ttrying to send twice the same tag [%d] update (with exactly the same value and value description).",tagId));      this.equipmentLogger.debug("isFilterOk - sending value to statistics module: Same Value Filter");    }    return false;  } else {    return true;  }}  }
class C{  public int read(long position,IInputReader reader) throws IOException {  map2Weight.clear();  reader.seek(position);  final int numberOfClasses=reader.readInt();  for (int i=0; i < numberOfClasses; i++) {    final int classId=reader.readInt();    final int weight=reader.readInt();    final int count=reader.readInt();    reader.skipBytes(count * 8);    map2Weight.put(classId,weight);  }  return map2Weight.size();}  }
class C{  private synchronized void connect(){  while (!connected && !shutdownRequested) {    try {      connection=jmsConnectionFactory.createConnection();      refreshSubscriptions();      connection.setExceptionListener(this);      connection.start();      connected=true;    } catch (    Exception e) {      LOGGER.error("Exception caught while trying to refresh the JMS connection; sleeping 5s before retrying.",e);      try {        Thread.sleep(SLEEP_BETWEEN_CONNECTION_ATTEMPTS);      } catch (      InterruptedException interEx) {        LOGGER.error("InterruptedException caught while waiting to reconnect.",interEx);      }    }  }  if (connected) {    notifyConnectionListenerOnConnection();  }}  }
class C{  @Override public void undoAction(UndoInterface undoRedoObject){  if (undoRedoObject != null) {    if (undoRedoObject.getOldValue() instanceof TimePeriod) {      TimePeriod oldValue=(TimePeriod)undoRedoObject.getOldValue();      populateDuration(start,oldValue.getStart());      populateDuration(end,oldValue.getEnd());    }  }}  }
class C{  private int classifyLiteral(){  if (peek(0) == '.') {    floating=true;    return DECIMAL;  } else   if (peek(0) == '0') {    if (!have(2)) {      return DECIMAL;    } else     if (peek(1) == 'x' || peek(1) == 'X') {      skip(2);      return HEXADECIMAL;    } else     if (peek(1) == 'b' || peek(1) == 'B') {      skip(2);      return BINARY;    } else {      return DECIMAL;    }  } else {    return DECIMAL;  }}  }
class C{  public CountModifiers add(CountModifiers modifiers){  return createIfNeeded(super.add(modifiers));}  }
class C{  private String fmtTime(double time){  return Utilities.pad(timeFormatter.format(time) + "s",10);}  }
class C{  @Override public boolean checkNeedRefresh(){  return view.checkNeedRefresh();}  }
class C{  private ImmutableList<String> saveFilesOnDisk(ImmutableMap<String,String> swaggerFilePathToContentMap){  List<String> savedfilePaths=new ArrayList<>();  File tempDir=Files.createTempDir();  String tmpDirLocation=tempDir.getAbsolutePath();  for (  Entry<String,String> entry : swaggerFilePathToContentMap.entrySet()) {    String filePath=entry.getKey();    String fileContent=entry.getValue();    Preconditions.checkState(!Strings.isNullOrEmpty(fileContent),"swagger spec file contents empty");    Preconditions.checkState(!Strings.isNullOrEmpty(filePath),"swagger spec file path not provided");    String filePathToSave=File.separator + tmpDirLocation + File.separator+ "swagger_spec_files"+ File.separator+ filePath;    try {      String savedFilePath=saveFileOnDisk(filePathToSave,fileContent);      savedfilePaths.add(savedFilePath);    } catch (    IOException e) {      throw new IllegalStateException(String.format("Unable to save the swagger spec contents on the disk at %s",filePathToSave),e);    }  }  return ImmutableList.copyOf(savedfilePaths);}  }
class C{  public void start(String tag,ArrayList names,ArrayList values,int nattr){  tag(tag,names,values,nattr,false);}  }
class C{  public Matrix arrayTimes(Matrix B){  checkMatrixDimensions(B);  Matrix X=new Matrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[i][j]=A[i][j] * B.A[i][j];    }  }  return X;}  }
class C{  public void callback(String instanceId,String callback,String data){  callback(instanceId,callback,data,false);}  }
class C{  public void add(String expr,ShapeAction f){  Predicate p=(Predicate)ExpressionParser.parse(expr);  super.add(p,f);}  }
class C{  private void updateTitle(){  if (menuDone != null && menuCamera != null) {    if (isDisplayingFolderView()) {      actionBar.setTitle(folderTitle);      menuDone.setVisible(false);    } else {      if (selectedImages.size() == 0) {        actionBar.setTitle(imageTitle);        if (menuDone != null)         menuDone.setVisible(false);      } else {        if (mode == ImagePickerActivity.MODE_MULTIPLE) {          if (limit == Constants.MAX_LIMIT)           actionBar.setTitle(String.format(getString(R.string.selected),selectedImages.size())); else           actionBar.setTitle(String.format(getString(R.string.selected_with_limit),selectedImages.size(),limit));        }        if (menuDone != null)         menuDone.setVisible(true);      }    }  }}  }
class C{  public void insertEntryIndexedField(IEntryCacheInfo pEntry,K fieldValue,TypeData pType){  if (_fifoGroupsIndexExtention == null)   insertEntryIndexedField_impl(pEntry,fieldValue,pType,pEntry.getBackRefs()); else   _fifoGroupsIndexExtention.insertEntryIndexedField(pEntry,fieldValue,pType);}  }
class C{  @NotNull private static GeneralCommandLine addInstallParameters(@NotNull GeneralCommandLine cl,int memorySize){  cl.addParameters("-m",String.valueOf(memorySize));  return cl;}  }
class C{  public FieldConfigFontPreview(FieldConfigCommonData commonData){  super(commonData);}  }
class C{  @Override protected Expression generateExpression(){  Expression expression=null;  if (this.textField != null) {    expression=getFilterFactory().literal(textField.getText());  }  return expression;}  }
class C{  public LruListWithThreadAffinity(){  this(DEFAULT_INITIAL_CAPACITY,DEFAULT_LOAD_FACTOR);}  }
class C{  public static ValueCompressonHolder.UnCompressValue unCompressNone(DataType compDataType,DataType actualDataType){  if (actualDataType == DataType.DATA_BIGINT) {    return new UnCompressDefaultLong();  } else {switch (compDataType) {case DATA_BYTE:      return new UnCompressNoneByte();case DATA_SHORT:    return new UnCompressNoneShort();case DATA_INT:  return new UnCompressNoneInt();case DATA_LONG:return new UnCompressNoneLong();case DATA_FLOAT:return new UnCompressNoneFloat();default :return new UnCompressNoneDefault();}}}  }
class C{  public boolean hasNavigtionBar(){  return mHasNavigationBar;}  }
class C{  @Override public boolean equals(Object o){  if (this == o) {    return true;  }  if (o == null) {    return false;  }  if (!getClass().isAssignableFrom(o.getClass())) {    return false;  }  if (!super.equals(o)) {    return false;  }  final BaseNameableObject other=(BaseNameableObject)o;  if (getShortName() != null ? !getShortName().equals(other.getShortName()) : other.getShortName() != null) {    return false;  }  if (getDescription() != null ? !getDescription().equals(other.getDescription()) : other.getDescription() != null) {    return false;  }  return true;}  }
class C{  public static void createReader(String fileName){  try {    createReader(new FileInputStream(fileName));  } catch (  FileNotFoundException e) {    e.printStackTrace();  }}  }
class C{  @Override protected boolean simulationEnd(SimulationEvent event){  return false;}  }
class C{  public NGramSizeEstimator(final Distribution tmSymbolsPerRank,final Distribution tmNonSymbolsPerRank){  SymbolsPerRank=new Distribution();  SymbolsPerRank.asTreeMap().putAll(tmSymbolsPerRank.asTreeMap());  NonSymbolsPerRank=new Distribution();  NonSymbolsPerRank.asTreeMap().putAll(tmNonSymbolsPerRank.asTreeMap());  MinRank=Math.min((Integer)tmSymbolsPerRank.asTreeMap().firstKey(),(Integer)tmNonSymbolsPerRank.asTreeMap().firstKey());  MaxRank=Math.max((Integer)tmSymbolsPerRank.asTreeMap().lastKey(),(Integer)tmNonSymbolsPerRank.asTreeMap().lastKey());}  }
class C{  public void add(char ch){  if (i == b.length) {    char[] new_b=new char[i + INC];    for (int c=0; c < i; c++)     new_b[c]=b[c];    b=new_b;  }  b[i++]=ch;}  }
class C{  public boolean supportsGuaranteedNotifications(){  return _clusterPolicy != null && _clusterPolicy.isPrimaryElectionAvailable() && EventSessionConfig.USE_OLD_GUARANTEED_NOTIFICATIONS;}  }
class C{  @Override public long blocksAccessed(){  return lhs.blocksAccessed() + rhs.blocksAccessed();}  }
class C{  public void computeFromTris(Triangle[] tris,int start,int end){  if (end - start <= 0) {    return;  }  Vector3f[] vertList=new Vector3f[(end - start) * 3];  int count=0;  for (int i=start; i < end; i++) {    vertList[count++]=tris[i].get(0);    vertList[count++]=tris[i].get(1);    vertList[count++]=tris[i].get(2);  }  averagePoints(vertList);}  }
class C{  public boolean isElement(List<String> requestPrefixList,String requestedElementName){  if ((requestPrefixList != null) && (requestedElementName != null)) {    for (    String requestPrefix : requestPrefixList) {      if (isElement(requestPrefix,requestedElementName)) {        return true;      }    }  }  return false;}  }
class C{  @Override protected void serializeNode(Node node) throws IOException {switch (node.getNodeType()) {case Node.TEXT_NODE:{      String text;      text=node.getNodeValue();      if (text != null)       characters(node.getNodeValue(),true);      break;    }case Node.CDATA_SECTION_NODE:{    String text;    text=node.getNodeValue();    if (text != null)     characters(node.getNodeValue(),true);    break;  }case Node.COMMENT_NODE:break;case Node.ENTITY_REFERENCE_NODE:break;case Node.PROCESSING_INSTRUCTION_NODE:break;case Node.ELEMENT_NODE:serializeElement((Element)node);break;case Node.DOCUMENT_NODE:case Node.DOCUMENT_FRAGMENT_NODE:{Node child;child=node.getFirstChild();while (child != null) {serializeNode(child);child=child.getNextSibling();}break;}default :break;}}  }
class C{  public S2CellId prev(){  return new S2CellId(id - (lowestOnBit() << 1));}  }
class C{  private boolean findHeadsCoordination(HeadRule rule,CTNode curr){  int i, sId, size=curr.getChildrenSize();  CTNode node;  for (sId=0; sId < size; sId++) {    node=curr.getChild(sId);    if (!PTBLib.isPunctuation(node.getConstituentTag()) && !PTBLib.isConjunction(node) && !node.isEmptyCategoryTerminal())     break;  }  if (!PTBLib.containsCoordination(curr,curr.getChildrenList(sId)))   return false;  Pattern rTags=getConjunctPattern(curr,sId,size);  CTNode prevHead=null, mainHead=null;  boolean isFound=false;  int bId=0, eId=sId;  for (; eId < size; eId++) {    node=curr.getChild(eId);    if (PTBLib.isCoordinator(node)) {      if (isFound) {        prevHead=findHeadsCoordinationAux(rule,curr,bId,eId,prevHead);        if (mainHead == null)         mainHead=prevHead;        setHeadCoord(node,prevHead,getDEPLabel(node,curr,prevHead));        isFound=false;        bId=eId + 1;      } else       if (prevHead != null) {        for (i=bId; i <= eId; i++) {          node=curr.getChild(i);          setHeadCoord(node,prevHead,getDEPLabel(node,curr,prevHead));        }        bId=eId + 1;      }    } else     if (isConjunct(node,curr,rTags))     isFound=true;  }  if (mainHead == null)   return false;  if (eId - bId > 0)   findHeadsCoordinationAux(rule,curr,bId,eId,prevHead);  curr.setC2DInfo(new C2DInfo(mainHead));  return true;}  }
class C{  final public static long updateCollection(Object id,V v,Class<? extends Bean> t,boolean adding){  String collection=getCollection(t);  if (collection != null && !"none".equals(collection)) {    return updateCollection(collection,id,v,adding);  }  return -1;}  }
class C{  public static String id(Object... ss){  StringBuilder sb=new StringBuilder();  for (  Object s : ss) {    if (sb.length() > 0)     sb.append("/");    sb.append(s);  }  return id(hash(sb.toString()));}  }
class C{  public NewsfeedGetMentionsQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  public OpenIntToDoubleHashMap(final int expectedSize,final double missingEntries){  final int capacity=computeCapacity(expectedSize);  keys=new int[capacity];  values=new double[capacity];  states=new byte[capacity];  this.missingEntries=missingEntries;  mask=capacity - 1;}  }
class C{  FloatList(){  value=0.0F;  next=null;  prev=null;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_DONT_LEVELLOW_RANK_UP(String value0){  return new SM_SYSTEM_MESSAGE(1400594,value0);}  }
class C{  @Override public void start(){  m_line.start();  super.start();}  }
class C{  public void closeDriver(){  if (camera != null) {    FlashlightManager.disableFlashlight();    camera.release();    camera=null;  }}  }
class C{  public void addPages(){  mainPage=new NewRemoteFolderWizardMainPage("newRemoteFolderPage1",Policy.bind("NewRemoteFolderWizard.heading"),SVNUIPlugin.getPlugin().getImageDescriptor(ISVNUIConstants.IMG_WIZBAN_NEW_FOLDER));  mainPage.setParentFolder(selection);  addPage(mainPage);  String pageTitle=Policy.bind("CommentCommitWizardPage.pageTitle");  String pageDescription=Policy.bind("CommentCommitWizardPage.pageDescription");  ImageDescriptor image=SVNUIPlugin.getPlugin().getImageDescriptor(ISVNUIConstants.IMG_WIZBAN_NEW_FOLDER);  commitCommentPage=new CommentCommitWizardPage(parentDialog,pageTitle,pageTitle,image,pageDescription);  addPage(commitCommentPage);}  }
class C{  private void Canvas_Nomal(Canvas canvas){  int center=getWidth() / 2;  int radius=center - 32;  paint.setColor(dashColor);  paint.setStyle(Paint.Style.STROKE);  paint.setStrokeWidth(dashWidth);  paint.setAntiAlias(true);  paint.setStrokeCap(Paint.Cap.ROUND);  RectF rectF=new RectF(center - radius,center - radius,center + radius,center + radius);  canvas.drawArc(rectF,150,240,false,paint);  paint.setColor(dashColor);  paint.setStyle(Paint.Style.STROKE);  paint.setStrokeWidth(dashProWidth);  paint.setAntiAlias(true);  paint.setStrokeCap(Paint.Cap.BUTT);  PathEffect pathEffect=new DashPathEffect(new float[]{16,16,16,16},4);  paint.setPathEffect(pathEffect);  rectF=new RectF(center - radius + dashProWidth,center - radius + dashProWidth,center + radius - dashProWidth,center + radius - dashProWidth);  canvas.drawArc(rectF,152,240,false,paint);  double warning=dashProMax * 0.8;  Log.e("TAG",warning + "==" + dashProgress);  if (dashProgress > warning) {    paint.setColor(getResources().getColor(R.color.lava));  } else {    paint.setColor(dasProColor);  }  paint.setStyle(Paint.Style.STROKE);  paint.setStrokeWidth(dashProWidth);  paint.setAntiAlias(true);  paint.setStrokeCap(Paint.Cap.BUTT);  pathEffect=new DashPathEffect(new float[]{16,16,16,16},4);  paint.setPathEffect(pathEffect);  if (dashProgress > 0) {    rectF=new RectF(center - radius + dashProWidth,center - radius + dashProWidth,center + radius - dashProWidth,center + radius - dashProWidth);    canvas.drawArc(rectF,152,245 * (dashProgress / dashProMax),false,paint);  }  String str=dashTitle + "";  paint.setPathEffect(null);  paint.setStrokeWidth(0);  paint.setTextSize(dashTitleSize);  paint.setTypeface(Typeface.SANS_SERIF);  paint.setColor(dashTitleColor);  float textWidth=paint.measureText(str);  canvas.drawText(str,center - textWidth / 2,radius * 2,paint);  paint.setColor(getResources().getColor(R.color.background_floating_material_dark));  paint.setStyle(Paint.Style.FILL);  paint.setAntiAlias(true);  canvas.drawCircle(center,center,8,paint);  paint.setColor(getResources().getColor(android.R.color.darker_gray));  paint.setStyle(Paint.Style.STROKE);  paint.setStrokeWidth(2);  paint.setAntiAlias(true);  canvas.drawCircle(center,center,radius / 5,paint);  paint.setColor(getResources().getColor(R.color.background_floating_material_dark));  Bitmap bitmap=BitmapFactory.decodeResource(getResources(),dashIcon);  Log.e("TAG",dashIcon + "");  Matrix matrix=new Matrix();  if (dashProgress > 0) {    float rotate=245 * (dashProgress / dashProMax);    Log.e("TAG",rotate + "");    if (dashProgress < 120) {      matrix.setRotate(-120 + rotate,center,center);    }  } else {    matrix.setRotate(-120,center,center);  }  canvas.concat(matrix);  canvas.drawBitmap(bitmap,center - bitmap.getWidth() / 2,center - bitmap.getHeight() - 2,null);}  }
class C{  public void addException(SootClass e){  if (DEBUG)   System.out.println("Adding exception " + e);  if (exceptions == null)   exceptions=new ArrayList<SootClass>(); else   if (exceptions.contains(e))   throw new RuntimeException("already throws exception " + e.getName());  exceptions.add(e);}  }
class C{  public void transformValues(TShortFunction function){  Object[] keys=_set;  short[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (keys[i] != null && keys[i] != REMOVED) {      values[i]=function.execute(values[i]);    }  }}  }
class C{  private boolean hasDefaultHandler(Intent intent){  try {    ResolveInfo info=getActivity().getPackageManager().resolveActivity(intent,0);    if (info != null) {      final String chromePackage=getActivity().getPackageName();      if (info.match != 0 && !chromePackage.equals(info.activityInfo.packageName)) {        return true;      }    }  } catch (  RuntimeException e) {    logTransactionTooLargeOrRethrow(e,intent);  }  return false;}  }
class C{  public @NonNull ChargeRequest.Builder restrictTendersTo(@NonNull Collection<TenderType> tenderTypes){  nonNull(tenderTypes,"tenderTypes");  if (tenderTypes.isEmpty()) {    throw new IllegalArgumentException("Please restrict to at least one TenderType.");  }  this.tenderTypes.clear();  this.tenderTypes.addAll(tenderTypes);  return this;}  }
class C{  public void goToStep(int stepNumber,boolean restoration){  if (activeStep != stepNumber || restoration) {    if (hideKeyboard) {      hideSoftKeyboard();    }    boolean previousStepsAreCompleted=arePreviousStepsCompleted(stepNumber);    if (stepNumber == 0 || previousStepsAreCompleted) {      openStep(stepNumber,restoration);    }  }}  }
class C{  private void updateAdapter(@Nullable PagerAdapter oldAdapter,@Nullable PagerAdapter newAdapter){  if (oldAdapter != null) {    oldAdapter.unregisterDataSetObserver(pageListener);    pagerAdapterRef=null;  }  if (newAdapter != null) {    newAdapter.registerDataSetObserver(pageListener);    pagerAdapterRef=new WeakReference<>(newAdapter);  }  if (viewPager != null) {    lastKnownCurrentPage=-1;    lastKnownPositionOffset=-1;    updateIndicators(viewPager.getCurrentItem(),newAdapter);    requestLayout();  }}  }
class C{  public static void copyURLToFile(URL source,File destination,int connectionTimeout,int readTimeout) throws IOException {  URLConnection connection=source.openConnection();  connection.setConnectTimeout(connectionTimeout);  connection.setReadTimeout(readTimeout);  InputStream input=connection.getInputStream();  copyInputStreamToFile(input,destination);}  }
class C{  public boolean optBoolean(String key,boolean defaultValue){  LazyNode token=getOptionalFieldToken(key);  if (token == null)   return defaultValue;  if (token.type == LazyNode.VALUE_NULL)   return defaultValue;  if (token.type == LazyNode.VALUE_TRUE)   return true;  return false;}  }
class C{  public static String searchAddToCategory(HttpServletRequest request,HttpServletResponse response){  Delegator delegator=(Delegator)request.getAttribute("delegator");  String productCategoryId=request.getParameter("SE_SEARCH_CATEGORY_ID");  String fromDateStr=request.getParameter("fromDate");  Timestamp fromDate=null;  String errMsg=null;  try {    fromDate=Timestamp.valueOf(fromDateStr);  } catch (  RuntimeException e) {    Map<String,String> messageMap=UtilMisc.toMap("errDateFormat",e.toString());    errMsg=UtilProperties.getMessage(resource,"productsearchevents.fromDate_not_formatted_properly",messageMap,UtilHttp.getLocale(request));    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  try {    boolean beganTransaction=TransactionUtil.begin(DEFAULT_TX_TIMEOUT);    try {      EntityListIterator eli=getProductSearchResults(request);      if (eli == null) {        errMsg=UtilProperties.getMessage(resource,"productsearchevents.no_results_found_probably_error_constraints",UtilHttp.getLocale(request));        request.setAttribute("_ERROR_MESSAGE_",errMsg);        return "error";      }      GenericValue searchResultView=null;      int numAdded=0;      while ((searchResultView=eli.next()) != null) {        String productId=searchResultView.getString("mainProductId");        GenericValue pcm=delegator.makeValue("ProductCategoryMember");        pcm.set("productCategoryId",productCategoryId);        pcm.set("productId",productId);        pcm.set("fromDate",fromDate);        pcm.create();        numAdded++;      }      Map<String,String> messageMap=UtilMisc.toMap("numAdded",Integer.toString(numAdded));      errMsg=UtilProperties.getMessage(resource,"productsearchevents.added_x_product_category_members",messageMap,UtilHttp.getLocale(request));      request.setAttribute("_EVENT_MESSAGE_",errMsg);      eli.close();    } catch (    GenericEntityException e) {      Map<String,String> messageMap=UtilMisc.toMap("errSearchResult",e.toString());      errMsg=UtilProperties.getMessage(resource,"productsearchevents.error_getting_search_results",messageMap,UtilHttp.getLocale(request));      Debug.logError(e,errMsg,module);      request.setAttribute("_ERROR_MESSAGE_",errMsg);      TransactionUtil.rollback(beganTransaction,errMsg,e);      return "error";    } finally {      TransactionUtil.commit(beganTransaction);    }  } catch (  GenericTransactionException e) {    Map<String,String> messageMap=UtilMisc.toMap("errSearchResult",e.toString());    errMsg=UtilProperties.getMessage(resource,"productsearchevents.error_getting_search_results",messageMap,UtilHttp.getLocale(request));    Debug.logError(e,errMsg,module);    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  return "success";}  }
class C{  public TextUnit createTextUnit(Long id,String name,String source,String note){  return createTextUnit(id,name,source,note,null,null,null);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public IllegalLiteral fullCopy(){  IllegalLiteral tree=(IllegalLiteral)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  private void decode(byte[] data,int width,int height){  long start=System.currentTimeMillis();  Result rawResult=null;  byte[] rotatedData=new byte[data.length];  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++)     rotatedData[x * height + height - y - 1]=data[x + y * width];  }  int tmp=width;  width=height;  height=tmp;  PlanarYUVLuminanceSource source=activity.getCameraManager().buildLuminanceSource(rotatedData,width,height);  if (source != null) {    BinaryBitmap bitmap=new BinaryBitmap(new HybridBinarizer(source));    try {      rawResult=multiFormatReader.decodeWithState(bitmap);    } catch (    ReaderException re) {    } finally {      multiFormatReader.reset();    }  }  Handler handler=activity.getHandler();  if (rawResult != null) {    long end=System.currentTimeMillis();    Log.d(TAG,"Found barcode in " + (end - start) + " ms");    if (handler != null) {      Message message=Message.obtain(handler,R.id.decode_succeeded,rawResult);      Bundle bundle=new Bundle();      bundleThumbnail(source,bundle);      message.setData(bundle);      message.sendToTarget();    }  } else {    if (handler != null) {      Message message=Message.obtain(handler,R.id.decode_failed);      message.sendToTarget();    }  }}  }
class C{  public static ConfigAspectBase create(Model model){  return new MixinConfigAspect(model);}  }
class C{  public MultiFilterFragmentPopupManageImplementor(PopupManageView view){  this.view=view;}  }
class C{  @Override public Filter createLogicFilter(List<Filter> filterList){  return null;}  }
class C{  public void releaseWriteLock(){  for (int i=0; i < _numOfSegments; i++)   _writeLocks[i].unlock();}  }
class C{  public String provideUid(){  return "uid";}  }
class C{  public GenericPrincipal authenticate(String username,String password){  GenericPrincipal principal=m_userPrincipal.get(username);  if (principal != null) {    if (!password.equals(principal.getPassword()))     throw new SpaceSecurityException("Wrong password for user name: " + username);  } else   throw new SpaceSecurityException("Unknown user name: " + username);  return principal;}  }
class C{  @Override public void onStop(){  if (status.get() != STATUS_STOPPING) {    onException(new IllegalStateException("Binlog Receiver is stopped ungracefully."));  }}  }
class C{  public AemListItem down(){  buttonDown.click();  return this;}  }
class C{  @Override public void onDestroy(){  Log_OC.v(TAG,"Destroying service");  mBinder=null;  mServiceHandler=null;  mServiceLooper.quit();  mServiceLooper=null;  mNotificationManager=null;  AccountManager am=AccountManager.get(getApplicationContext());  am.removeOnAccountsUpdatedListener(this);  super.onDestroy();}  }
class C{  public static float calculatePercent(int downloadSize,int fileSize){  float num=(float)downloadSize / fileSize;  float percent=((float)(int)(num * 1000)) / 10;  return percent;}  }
class C{  public AccountLookupContactsQuery mycontact(String value){  return unsafeParam("mycontact",value);}  }
class C{  public SLDDataFlavour(String mimeType,String humanPresentableName){  super(mimeType,humanPresentableName);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Fall_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200514,skilltarget,skillname);}  }
class C{  public final boolean isOverridingTarget(){  return (myOverride & CFG_TARGET) != 0;}  }
class C{  public static String toString(InputStream input,String encoding) throws IOException {  return toString(input,Charsets.toCharset(encoding));}  }
class C{  private static void writeStringToOutput(String str,DataOutput out) throws IOException {  out.writeInt(str.length());  out.writeChars(str);}  }
class C{  public Disk accelerate(Vector acceleration){  return new Disk(position,speed.add(acceleration),radius);}  }
class C{  public boolean isApplicable(){  for (  IDirector dir : ProjectManager.getProjects()) {    if (dir.getDirty())     return false;  }  return true;}  }
class C{  protected void drawZeroLine(Canvas c){  MPPointD pos=mTrans.getPixelsForValues(0f,0f);  Path zeroLinePath=mDrawZeroLinePath;  zeroLinePath.reset();  zeroLinePath.moveTo(mViewPortHandler.contentLeft(),(float)pos.y - 1);  zeroLinePath.lineTo(mViewPortHandler.contentRight(),(float)pos.y - 1);  c.drawPath(zeroLinePath,mGridPaint);}  }
class C{  public static long store(String id,String name,InputStream in) throws IOException {  return store(X.EMPTY,id,name,X.EMPTY,0,in.available(),in,-1,true,-1);}  }
class C{  public SubLine wholeLine(){  return new SubLine(this,new IntervalsSet(tolerance));}  }
class C{  protected void init(){  fSchemeName=null;  fSchemeData=null;  fShortHandPointerName=null;  fIsResolveElement=false;  fIsElementFound=false;  fWasOnlyEmptyElementFound=false;  fFoundDepth=0;  fCurrentChildPosition=1;  fCurrentChildDepth=0;  fIsFragmentResolved=false;  fShortHandPointer=null;  initErrorReporter();}  }
class C{  public QName(QName qname){  setValues(qname);}  }
class C{  public Point3D(float x,float y,float z){  this.x=x;  this.y=y;  this.z=z;}  }
class C{  public synchronized void closeDriver(){  if (camera != null) {    camera.getCamera().release();    camera=null;    framingRect=null;    framingRectInPreview=null;  }}  }
class C{  public MarqueeTextView(Context context){  this(context,null);}  }
class C{  public Iterator tuples(Predicate filter){  if (filter == null) {    return tuples();  } else {    return new CompositeIterator(m_edgeTuples.iterator(getEdgeTable().rows(filter)),m_nodeTuples.iterator(getNodeTable().rows(filter)));  }}  }
class C{  public boolean equals(Object t){  return ((t instanceof RefType) && className.equals(((RefType)t).className));}  }
class C{  public void zoomOut() throws IOException {  int zoom=1;  int range=this.to - this.from + 1;  if (range % 2 == 1) {    range--;  }  int midpoint=this.getMidpoint();  long zoomTo=midpoint + ((long)range * (long)zoom);  if (zoomTo >= Integer.MAX_VALUE) {    System.err.println("Invalid 'to' coordinate to fetch " + zoomTo + " (integer overflow?)");    zoomTo=Integer.MAX_VALUE;  }  this.to=(int)zoomTo;  this.from=midpoint - (range * zoom);  this.from=(this.from <= 0) ? 1 : this.from;  if (this.samSeqDict != null && this.samSeqDict.size() > 0) {    if (this.samSeqDict.getSequence(this.chrom).getSequenceLength() > 0) {      this.to=(this.to > this.samSeqDict.getSequence(this.chrom).getSequenceLength()) ? this.samSeqDict.getSequence(this.chrom).getSequenceLength() : this.to;    }  }  this.setRefSeq();}  }
class C{  public synchronized void writeUnlock(){  activeWriter=false;  notifyAll();}  }
class C{  public DownloadAdapter(Context c){  this.c=c;}  }
class C{  public Object nextToken() throws JSONException {  char c;  char q;  StringBuilder sb;  do {    c=next();  } while (Character.isWhitespace(c));switch (c) {case 0:    throw syntaxError("Misshaped element");case '<':  throw syntaxError("Misplaced '<'");case '>':return XML.GT;case '/':return XML.SLASH;case '=':return XML.EQ;case '!':return XML.BANG;case '?':return XML.QUEST;case '"':case '\'':q=c;sb=new StringBuilder();for (; ; ) {c=next();if (c == 0) {throw syntaxError("Unterminated string");}if (c == q) {return sb.toString();}if (c == '&') {sb.append(nextEntity(c));} else {sb.append(c);}}default :sb=new StringBuilder();for (; ; ) {sb.append(c);c=next();if (Character.isWhitespace(c)) {return sb.toString();}switch (c) {case 0:return sb.toString();case '>':case '/':case '=':case '!':case '?':case '[':case ']':back();return sb.toString();case '<':case '"':case '\'':throw syntaxError("Bad character in a name");}}}}  }
class C{  public Vector2D toSubSpace(Vector<Euclidean3D> vector){  return toSubSpace((Point<Euclidean3D>)vector);}  }
class C{  public void testTaskVariableStandalone() throws Exception {  Task newTask=taskService.newTask();  try {    taskService.saveTask(newTask);    taskService.setVariable(newTask.getId(),"testVariable",123);    taskService.setVariable(newTask.getId(),"testVariable",456);    taskService.removeVariable(newTask.getId(),"testVariable");    assertEquals(3,listener.getEventsReceived().size());    ActivitiVariableEvent event=(ActivitiVariableEvent)listener.getEventsReceived().get(0);    assertEquals(ActivitiEventType.VARIABLE_CREATED,event.getType());    assertNull(event.getProcessDefinitionId());    assertNull(event.getExecutionId());    assertNull(event.getProcessInstanceId());    assertEquals(newTask.getId(),event.getTaskId());    assertEquals("testVariable",event.getVariableName());    assertEquals(123,event.getVariableValue());    event=(ActivitiVariableEvent)listener.getEventsReceived().get(1);    assertEquals(ActivitiEventType.VARIABLE_UPDATED,event.getType());    assertNull(event.getProcessDefinitionId());    assertNull(event.getExecutionId());    assertNull(event.getProcessInstanceId());    assertEquals(newTask.getId(),event.getTaskId());    assertEquals("testVariable",event.getVariableName());    assertEquals(456,event.getVariableValue());    event=(ActivitiVariableEvent)listener.getEventsReceived().get(2);    assertEquals(ActivitiEventType.VARIABLE_DELETED,event.getType());    assertNull(event.getProcessDefinitionId());    assertNull(event.getExecutionId());    assertNull(event.getProcessInstanceId());    assertEquals(newTask.getId(),event.getTaskId());    assertEquals("testVariable",event.getVariableName());    assertEquals(null,event.getVariableValue());  }  finally {    if (newTask.getId() != null) {      taskService.deleteTask(newTask.getId());      if (processEngineConfiguration.getHistoryLevel().isAtLeast(HistoryLevel.ACTIVITY)) {        historyService.deleteHistoricTaskInstance(newTask.getId());      }    }  }}  }
class C{  private void startContainerManager(){  EasyMock.expect(mockProcessCache.getKeys()).andReturn(Collections.EMPTY_LIST);  EasyMock.replay(mockProcessCache);  ((JmsContainerManagerImpl)jmsContainerManager).init();  ((SmartLifecycle)jmsContainerManager).start();  EasyMock.reset(mockProcessCache);}  }
class C{  private final boolean fallAsleep(){synchronized (this) {    try {      if (!_shouldDie) {        _nextExpirationTimeInterval+=_harvestShortLivedInterval;        long fixedRateDelay=_nextExpirationTimeInterval - SystemTime.timeMillis();        if (fixedRateDelay <= 0) {          if (_logger.isLoggable(Level.FINEST))           _logger.finest("Skipped fallAsleep since fixedRateDelay=" + fixedRateDelay);          _nextExpirationTimeInterval=SystemTime.timeMillis();          return shouldProcessMainList();        }        if (_logger.isLoggable(Level.FINEST))         _logger.finest("fallAsleep - going to wait fixedRateDelay=" + fixedRateDelay);        wait(fixedRateDelay);        if (_force) {          if (_logger.isLoggable(Level.FINEST))           _logger.finest("TimeBased Eviction reaper was forcibly waken up");          _nextExpirationTimeInterval=SystemTime.timeMillis();        }        return shouldProcessMainList();      }    } catch (    InterruptedException ie) {      if (_logger.isLoggable(Level.FINEST))       _logger.log(Level.FINEST,this.getName() + " interrupted.",ie);      _shouldDie=true;      interrupt();    }    return shouldProcessMainList();  }}  }
class C{  public void event(String event,String parameter,long duration){  logEntries.add(new EventEntry(event,parameter,duration));}  }
class C{  private String generateAddColumnSQL(ColumnModel columnModel){  return generateAddColumnSQL(mTableModel.getTableName(),columnModel);}  }
class C{  Code_attribute locate_code_attribute(){  attribute_info ai;  int i;  for (i=0; i < attributes_count; i++) {    ai=attributes[i];    if (ai instanceof Code_attribute)     return (Code_attribute)ai;  }  return null;}  }
class C{  @Override protected void onRestoreInstanceState(Bundle state){  ensureList();  super.onRestoreInstanceState(state);}  }
class C{  public void addDiscoveryListener(DiscoveryListener l){  if (l == null) {    throw new NullPointerException("can't add null listener");  }synchronized (registrars) {    if (terminated) {      throw new IllegalStateException("discovery terminated");    }    if (listeners.indexOf(l) >= 0)     return;    listeners.add(l);    if (registrars.isEmpty())     return;    HashMap groupsMap=new HashMap(registrars.size());    Iterator iter=registrars.values().iterator();    while (iter.hasNext()) {      UnicastResponse resp=(UnicastResponse)iter.next();      groupsMap.put(resp.getRegistrar(),resp.getGroups());    }    ArrayList list=new ArrayList(1);    list.add(l);    addNotify(list,groupsMap,DISCOVERED);  }}  }
class C{  public CompareWithHeadRevisionAction(){  super(SVNRevision.HEAD);}  }
class C{  public synchronized void animatePanTo(Point2D p,long duration){  Point2D pp=new Point2D.Double();  m_itransform.transform(p,pp);  animatePanToAbs(pp,duration);}  }
class C{  protected boolean checkForSource(Abstraction abs,SourceContextAndPath scap){  if (abs.getPredecessor() != null)   return false;  assert abs.getSourceContext() != null;  assert abs.getNeighbors() == null;  SourceContext sourceContext=abs.getSourceContext();  results.addResult(scap.getAccessPath(),scap.getStmt(),sourceContext.getAccessPath(),sourceContext.getStmt(),sourceContext.getUserData(),scap.getPath());  return true;}  }
class C{  public static String millisecondsToString(long milliseconds){  return millisecondsToString(milliseconds,SIMPLE_DATE_FORMAT);}  }
class C{  public void typeRepeat(int key,int count) throws InterruptedException {  if (count <= 0) {    return;  }  for (int i=0; i < count; i++) {    type(key);  }}  }
class C{  public void addToRenderQueue(VisualItem item){  if (ritems.length == rsize) {    int capacity=(3 * ritems.length) / 2 + 1;    VisualItem[] q=new VisualItem[capacity];    int[] s=new int[capacity];    System.arraycopy(ritems,0,q,0,rsize);    System.arraycopy(rscores,0,s,0,rsize);    ritems=q;    rscores=s;  }  ritems[rsize]=item;  rscores[rsize++]=(sort != null ? sort.score(item) : 0);}  }
class C{  protected static LazyNode cValueFalse(int index){  return new LazyNode(VALUE_FALSE,index);}  }
class C{  public ShoppingCart(ShoppingCart cart){  this.delegator=cart.getDelegator();  this.delegatorName=delegator.getDelegatorName();  this.productStoreId=cart.getProductStoreId();  this.doPromotions=cart.getDoPromotions();  this.poNumber=cart.getPoNumber();  this.orderId=cart.getOrderId();  this.orderName="Copy of " + cart.getOrderName();  this.workEffortId=cart.getWorkEffortId();  this.firstAttemptOrderId=cart.getFirstAttemptOrderId();  this.billingAccountId=cart.getBillingAccountId();  this.agreementId=cart.getAgreementId();  this.quoteId=cart.getQuoteId();  this.orderAdditionalEmails=cart.getOrderAdditionalEmails();  this.adjustments.addAll(cart.getAdjustments());  this.contactMechIdsMap=new HashMap<String,String>(cart.getOrderContactMechIds());  this.freeShippingProductPromoActions=new ArrayList<GenericValue>(cart.getFreeShippingProductPromoActions());  this.desiredAlternateGiftByAction=cart.getAllDesiredAlternateGiftByActionCopy();  this.productPromoUseInfoList.addAll(cart.productPromoUseInfoList);  this.productPromoCodes=new HashSet<String>(cart.productPromoCodes);  this.locale=cart.getLocale();  this.currencyUom=cart.getCurrency();  this.externalId=cart.getExternalId();  this.internalCode=cart.getInternalCode();  this.viewCartOnAdd=cart.viewCartOnAdd();  this.defaultShipAfterDate=cart.getDefaultShipAfterDate();  this.defaultShipBeforeDate=cart.getDefaultShipBeforeDate();  this.cancelBackOrderDate=cart.getCancelBackOrderDate();  this.terminalId=cart.getTerminalId();  this.transactionId=cart.getTransactionId();  this.autoOrderShoppingListId=cart.getAutoOrderShoppingListId();  this.additionalPartyRole=new HashMap<String,List<String>>();  for (  Map.Entry<String,List<String>> me : cart.additionalPartyRole.entrySet()) {    this.additionalPartyRole.put(me.getKey(),new LinkedList<String>(me.getValue()));  }  for (  ShoppingCartItemGroup itemGroup : cart.itemGroupByNumberMap.values()) {    ShoppingCartItemGroup parentGroup=null;    if (itemGroup.getParentGroup() != null)     parentGroup=this.getItemGroupByNumber(itemGroup.getParentGroup().getGroupNumber());    ShoppingCartItemGroup newGroup=new ShoppingCartItemGroup(itemGroup,parentGroup);    itemGroupByNumberMap.put(newGroup.getGroupNumber(),newGroup);  }  for (  ShoppingCartItem item : cart.items()) {    cartLines.add(new ShoppingCartItem(item));  }  this.facilityId=cart.facilityId;  this.webSiteId=cart.webSiteId;}  }
class C{  private StatementObservable(){  throw new IllegalStateException("No instances!");}  }
class C{  private synchronized void initMapsIfNecessary(){  if (this.gsByName == null) {    this.gsByName=new HashMap<String,GigaSpace>();    for (    String gsName : BeanFactoryUtils.beanNamesForTypeIncludingAncestors(this.applicationContext,GigaSpace.class)) {      GigaSpace gs=(GigaSpace)this.applicationContext.getBean(gsName);      gsByName.put(gsName,gs);    }    if (this.gsByName.isEmpty()) {      String[] gsNames=BeanFactoryUtils.beanNamesForTypeIncludingAncestors(this.applicationContext,GigaSpace.class);      if (gsNames.length == 1) {        this.uniqueGs=(GigaSpace)this.applicationContext.getBean(gsNames[0]);      }    } else     if (this.gsByName.size() == 1) {      this.uniqueGs=this.gsByName.values().iterator().next();    }    if (this.gsByName.isEmpty() && this.uniqueGs == null) {      logger.warn("No named gs instances defined and not exactly one anonymous one: cannot inject");    }  }}  }
class C{  public double incrementCount(E key,double increment){  double newVal=getCount(key) + increment;  setCount(key,newVal);  dirty=true;  return newVal;}  }
class C{  private FilePart rollOver() throws IOException {  if (currentLastBytePos > -1) {    throw new IllegalStateException("Current currentLastCharPos unexpectedly positive... " + "last readLine() should have returned something! currentLastCharPos=" + currentLastBytePos);  }  if (no > 1) {    return new FilePart(no - 1,blockSize,leftOver);  } else {    if (leftOver != null) {      throw new IllegalStateException("Unexpected leftover of the last block: leftOverOfThisFilePart=" + new String(leftOver,encoding));    }    return null;  }}  }
class C{  private Experiment createExperiment(String startTime,String endTime,String expSuffix){  return ExperimentFactory.createExperiment().setStartTime(startTime).setEndTime(endTime).setLabel(PREFIX_EXPERIMENT + TIMESTAMP_STR + expSuffix).setSamplingPercent(SAMPLING_PERCENT).setApplication(ApplicationFactory.createApplication().setName(PREFIX_APPLICATION + TIMESTAMP_STR));}  }
class C{  protected void processExit(PathEdge<N,D> edge){  final N n=edge.getTarget();  EdgeFunction<V> f=jumpFunction(edge);  M methodThatNeedsSummary=icfg.getMethodOf(n);  final D d1=edge.factAtSource();  final D d2=edge.factAtTarget();  Collection<N> startPointsOf=icfg.getStartPointsOf(methodThatNeedsSummary);  Map<N,Set<D>> inc=new HashMap<N,Set<D>>();  for (  N sP : startPointsOf) {synchronized (incoming) {      addEndSummary(sP,d1,n,d2,f);      for (      Entry<N,Set<D>> entry : incoming(d1,sP).entrySet())       inc.put(entry.getKey(),new HashSet<D>(entry.getValue()));    }  }  for (  Entry<N,Set<D>> entry : inc.entrySet()) {    N c=entry.getKey();    for (    N retSiteC : icfg.getReturnSitesOfCallAt(c)) {      FlowFunction<D> retFunction=flowFunctions.getReturnFlowFunction(c,methodThatNeedsSummary,n,retSiteC);      flowFunctionConstructionCount++;      for (      D d4 : entry.getValue()) {        Set<D> targets=computeReturnFlowFunction(retFunction,d1,d2,c,entry.getValue());        for (        D d5 : targets) {          EdgeFunction<V> f4=edgeFunctions.getCallEdgeFunction(c,d4,icfg.getMethodOf(n),d1);          EdgeFunction<V> f5=edgeFunctions.getReturnEdgeFunction(c,icfg.getMethodOf(n),n,d2,retSiteC,d5);          EdgeFunction<V> fPrime=f4.composeWith(f).composeWith(f5);synchronized (jumpFn) {            for (            Map.Entry<D,EdgeFunction<V>> valAndFunc : jumpFn.reverseLookup(c,d4).entrySet()) {              EdgeFunction<V> f3=valAndFunc.getValue();              if (!f3.equalTo(allTop)) {                D d3=valAndFunc.getKey();                D d5_restoredCtx=restoreContextOnReturnedFact(d4,d5);                propagate(d3,retSiteC,d5_restoredCtx,f3.composeWith(fPrime),c,false);              }            }          }        }      }    }  }  if (followReturnsPastSeeds && inc.isEmpty() && d1.equals(zeroValue)) {    Collection<N> callers=icfg.getCallersOf(methodThatNeedsSummary);    for (    N c : callers) {      for (      N retSiteC : icfg.getReturnSitesOfCallAt(c)) {        FlowFunction<D> retFunction=flowFunctions.getReturnFlowFunction(c,methodThatNeedsSummary,n,retSiteC);        flowFunctionConstructionCount++;        Set<D> targets=computeReturnFlowFunction(retFunction,d1,d2,c,Collections.singleton(zeroValue));        for (        D d5 : targets) {          EdgeFunction<V> f5=edgeFunctions.getReturnEdgeFunction(c,icfg.getMethodOf(n),n,d2,retSiteC,d5);          propagateUnbalancedReturnFlow(retSiteC,d5,f.composeWith(f5),c);          unbalancedRetSites.add(retSiteC);        }      }    }    if (callers.isEmpty()) {      FlowFunction<D> retFunction=flowFunctions.getReturnFlowFunction(null,methodThatNeedsSummary,n,null);      flowFunctionConstructionCount++;      retFunction.computeTargets(d2);    }  }}  }
class C{  @NotNull private Dimension viewToModel(int width,int height){  return new Dimension((int)(width / myScale),(int)(height / myScale));}  }
class C{  public boolean hasDetails(String sku){  return mSkuMap.containsKey(sku);}  }
class C{  public static void writeStringToFile(File file,String data,Charset encoding) throws IOException {  writeStringToFile(file,data,encoding,false);}  }
class C{  public boolean hasKey(String key){  return internalMap.containsKey(key);}  }
class C{  private void initShareViaLinkListener(View shareView){  mOnShareViaLinkSwitchCheckedChangeListener=new OnShareViaLinkListener();  SwitchCompat shareViaLinkSwitch=(SwitchCompat)shareView.findViewById(R.id.shareViaLinkSectionSwitch);  shareViaLinkSwitch.setOnCheckedChangeListener(mOnShareViaLinkSwitchCheckedChangeListener);}  }
class C{  void stopServer(){  try {    for (int i=connections.size() - 1; i > -1; i--) {      connections.get(i).getSocket().close();      connections.remove(i);    }    if (serverSocket != null && !serverSocket.isClosed()) {      serverSocket.close();    }    if (executorService != null && !executorService.isShutdown()) {      executorService.shutdown();    }    if (scheduler != null & !scheduler.isShutdown()) {      scheduler.shutdown();    }    this.cleanTheList();    Platform.runLater(null);  } catch (  Exception e) {  }}  }
class C{  void checkPermissions(){  checkPermissions(permissions);}  }
class C{  public boolean isExportResults(){  return exportResults;}  }
class C{  @NotNull public List<Constant> preferred(@NotNull Collection<Constant> constants){  List<Constant> preferred=new ArrayList<Constant>();  for (  Constant c : constants) {    for (int i=0; i < myLabels.length; i++) {      if (c.getName().equals(myLabels[i])) {        preferred.add(c);      }    }  }  return preferred;}  }
class C{  public String toString(){  return "Value: " + String.format("%5.2f%%",ValueSimilarity * 100.0) + " Containment: "+ String.format("%5.2f%%",ContainmentSimilarity * 100.0)+ " Size: "+ String.format("%5.2f%%",SizeSimilarity * 100.0);}  }
class C{  public static double sumOfSquares(double[] vector){  double ret=0;  for (  double d : vector)   ret+=Math.pow(d,2);  return ret;}  }
class C{  @Override public FSDataInputStream open(Path path,int bufferSize) throws IOException {  String table=getTableName(_rootPath,path);  String split=getSplitName(_rootPath,path);  split=splitNameWithoutGzipExtension(split);  return new FSDataInputStream(new EmoSplitInputStream(table,split));}  }
class C{  private Stream<MultiTraversal> addRelatesPattern(String start,String casting,VarAdmin roleType,VarAdmin rolePlayer){  String roletypeName=roleType.getName();  String roleplayerName=rolePlayer.getName();  return Stream.of(MultiTraversal.create(Fragment.create(null,EDGE_BOUNDED,start,casting),Fragment.create(null,EDGE_UNBOUNDED,casting,start)),MultiTraversal.create(Fragment.create(null,EDGE_UNIQUE,casting,roleplayerName),Fragment.create(null,EDGE_BOUNDED,roleplayerName,casting)),MultiTraversal.create(Fragment.create(null,EDGE_UNIQUE,casting,roletypeName),Fragment.create(null,EDGE_UNBOUNDED,roletypeName,casting)));}  }
class C{  public void removeEmptyCartItems(){  for (int i=0; i < this.cartLines.size(); ) {    ShoppingCartItem cartItem=cartLines.get(i);    if (cartItem.getQuantity().compareTo(BigDecimal.ZERO) == 0) {      this.clearItemShipInfo(cartItem);      cartLines.remove(i);    } else {      i++;    }  }}  }
class C{  public synchronized void completed(){  completed=true;  notifyAll();}  }
class C{  public void updateLock(IEntryCacheInfo pEntry,OperationID operationID,boolean isReadOperation,boolean fifo){  IStoredList<IEntryCacheInfo> newEntries=!isReadOperation ? getNewEntries() : null;  if (!isReadOperation && (newEntries == null || !newEntries.contains(pEntry))) {    IStoredList<IEntryCacheInfo> lockedEntries=getLockedEntries(true);    lockedEntries.removeByObject(pEntry);    lockedEntries.add(pEntry);    if (fifo) {      IStoredList<IEntryCacheInfo> lockedFifoEntries=getLockedFifoEntries(true);      lockedFifoEntries.removeByObject(pEntry);      lockedFifoEntries.add(pEntry);    }  }  if (operationID != null) {    Map<String,OperationID> entriesOperationIDs=_entriesOperationIDs;    if (entriesOperationIDs == null)     _entriesOperationIDs=entriesOperationIDs=new Hashtable<String,OperationID>();    entriesOperationIDs.put(pEntry.getUID(),operationID);  }}  }
class C{  @RequestMapping(value="/train",method=RequestMethod.GET) public String trainAndSave(){  String model=ClusteringService.train();  redis.opsForValue().set(key,model);  return model;}  }
class C{  public void init$Children(){  children=new ASTNode[2];}  }
class C{  public GroupsGetQuery filter(List<GroupsGetFilter> value){  return unsafeParam("filter",value);}  }
class C{  public SecureSetUserLevelQuery level(Integer value){  return unsafeParam("level",value);}  }
class C{  public static double ud(){  return R.nextDouble();}  }
class C{  protected void handleInsert(T newObject){  executor.addForInsert(newObject);}  }
class C{  private boolean resultExists(List<CodeMatchResult> lst,int value){  for (  CodeMatchResult s : lst) {    if (s.getLineNumber() == value) {      return true;    }  }  return false;}  }
class C{  public boolean equals(String productId,Timestamp reservStart,BigDecimal reservLength,BigDecimal reservPersons,String accommodationMapId,String accommodationSpotId,Map<String,GenericValue> additionalProductFeatureAndAppls,Map<String,Object> attributes,Map<String,String> orderItemAttributes,String prodCatalogId,BigDecimal selectedAmount,ProductConfigWrapper configWrapper,String itemType,ShoppingCart.ShoppingCartItemGroup itemGroup,boolean isPromo){  if (this.productId == null || productId == null) {    return false;  }  if (!this.productId.equals(productId)) {    return false;  }  if ((this.prodCatalogId == null && prodCatalogId != null) || (this.prodCatalogId != null && prodCatalogId == null)) {    return false;  }  if (this.prodCatalogId != null && prodCatalogId != null && !this.prodCatalogId.equals(prodCatalogId)) {    return false;  }  if (selectedAmount != null && this.selectedAmount.compareTo(selectedAmount) != 0) {    return false;  }  if ((this.reservStart == null && reservStart != null) || (this.reservStart != null && reservStart == null)) {    return false;  }  if (this.reservStart != null && reservStart != null && !this.reservStart.equals(reservStart)) {    return false;  }  if (reservLength != null && this.reservLength.compareTo(reservLength) != 0) {    return false;  }  if (reservPersons != null && this.reservPersons.compareTo(reservPersons) != 0) {    return false;  }  if (this.accommodationMapId != null && !this.accommodationMapId.equals(accommodationMapId)) {    return false;  }  if (this.accommodationSpotId != null && !this.accommodationSpotId.equals(accommodationSpotId)) {    return false;  }  if (this.isPromo != isPromo) {    return false;  }  if ((this.additionalProductFeatureAndAppls == null && UtilValidate.isNotEmpty(additionalProductFeatureAndAppls)) || (UtilValidate.isNotEmpty(this.additionalProductFeatureAndAppls) && additionalProductFeatureAndAppls == null) || (this.additionalProductFeatureAndAppls != null && additionalProductFeatureAndAppls != null && (this.additionalProductFeatureAndAppls.size() != additionalProductFeatureAndAppls.size() || !(this.additionalProductFeatureAndAppls.equals(additionalProductFeatureAndAppls))))) {    return false;  }  if ((this.attributes == null && UtilValidate.isNotEmpty(attributes)) || (UtilValidate.isNotEmpty(this.attributes) && attributes == null) || (this.attributes != null && attributes != null && (this.attributes.size() != attributes.size() || !(this.attributes.equals(attributes))))) {    return false;  }  if (configWrapper != null && !configWrapper.equals(this.configWrapper)) {    return false;  }  if (itemType != null && !itemType.equals(this.itemType)) {    return false;  }  if (itemGroup != null && !itemGroup.equals(this.itemGroup)) {    return false;  }  if (quoteId != null) {    return false;  }  if (requirementId != null) {    return false;  }  if ((this.orderItemAttributes == null && UtilValidate.isNotEmpty(orderItemAttributes)) || (UtilValidate.isNotEmpty(this.orderItemAttributes) && orderItemAttributes == null) || (this.orderItemAttributes != null && orderItemAttributes != null && (this.orderItemAttributes.size() != orderItemAttributes.size() || !(this.orderItemAttributes.equals(orderItemAttributes))))) {    return false;  }  return true;}  }
class C{  public short max(){  if (size() == 0) {    throw new IllegalStateException("cannot find maximum of an empty list");  }  short max=Short.MIN_VALUE;  for (int i=0; i < _pos; i++) {    if (_data[i] > max) {      max=_data[i];    }  }  return max;}  }
class C{  public void save() throws IOException {  try (OutputWriterLittleEndian outs=new OutputWriterLittleEndian(new FileRandomAccessReadWriteAdapter(fileName,"rw"))){    outs.writeLong(magicNumber);    outs.writeLong(version);    outs.writeLong(diamondBuild);    outs.writeLong(dbSeqs);    outs.writeLong(dbSeqsUsed);    outs.writeLong(dbLetters);    outs.writeLong(flags);    outs.writeLong(queryRecords);    outs.writeInt(modeRank);    outs.writeInt(gapOpen);    outs.writeInt(gapExtend);    outs.writeInt(reward);    outs.writeInt(penalty);    outs.writeInt(reserved1);    outs.writeInt(reserved2);    outs.writeInt(reserved3);    outs.writeDouble(k);    outs.writeDouble(lambda);    outs.writeDouble(reserved4);    outs.writeDouble(reserved5);    for (    byte a : scoreMatrix) {      outs.write(a);    }    scoreMatrixName=Basic.toString(scoreMatrix);    for (    long a : blockSize) {      outs.writeLong(a);    }    for (    byte a : blockTypeRank) {      outs.write(a);    }  } }  }
class C{  private void readFromVersion1Stream(StatusFromBytesStream dis) throws IOException {  String urlCopiedFromString=dis.readUTF();  if (urlCopiedFromString.equals("")) {    urlCopiedFrom=null;  } else {    urlCopiedFrom=url;  }  file=new File(dis.readUTF());  pathConflictOld=dis.readUTF();  if (pathConflictOld.equals(""))   pathConflictOld=null;  pathConflictNew=dis.readUTF();  if (pathConflictNew.equals(""))   pathConflictNew=null;  pathConflictWorking=dis.readUTF();  if (pathConflictWorking.equals(""))   pathConflictWorking=null;  lockOwner=null;  lockCreationDate=0L;  lockComment=null;  readOnly=false;}  }
class C{  public static boolean deleteFile(File toDelete){  boolean result=true;  if (toDelete.isDirectory()) {    for (    File c : toDelete.listFiles()) {      result&=deleteFile(c);    }  }  if (!toDelete.delete()) {    Logger.getLogger(FileUtility.class.getName()).log(Level.SEVERE,"Cannot delete file " + toDelete.getAbsolutePath());    return false;  }  return result;}  }
class C{  @Override public void build(BTreeBuilderInfo segmentBuilderInfos){  long totalNumberOfTuple=0;  int groupCounter;  int nInternal=0;  BTreeNode curNode=null;  BTreeNode prevNode=null;  List<BTreeNode[]> nodeGroups=new ArrayList<BTreeNode[]>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);  BTreeNode[] currentGroup=null;  List<List<IndexKey>> interNSKeyList=new ArrayList<List<IndexKey>>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);  List<IndexKey> leafNSKeyList=null;  long nodeNumber=0;  for (int index=0; index < segmentBuilderInfos.getFooterList().get(0).getBlockletList().size(); index++) {    curNode=new BlockletBTreeLeafNode(segmentBuilderInfos,index,nodeNumber++);    totalNumberOfTuple+=segmentBuilderInfos.getFooterList().get(0).getBlockletList().get(index).getNumberOfRows();    nLeaf++;    if (prevNode != null) {      prevNode.setNextNode(curNode);    }    prevNode=curNode;    groupCounter=(nLeaf - 1) % (maxNumberOfEntriesInNonLeafNodes);    if (groupCounter == 0) {      leafNSKeyList=new ArrayList<IndexKey>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);      currentGroup=new BTreeNode[maxNumberOfEntriesInNonLeafNodes];      nodeGroups.add(currentGroup);      nInternal++;      interNSKeyList.add(leafNSKeyList);    }    if (null != leafNSKeyList) {      leafNSKeyList.add(convertStartKeyToNodeEntry(segmentBuilderInfos.getFooterList().get(0).getBlockletList().get(index).getBlockletIndex().getBtreeIndex().getStartKey()));    }    if (null != currentGroup) {      currentGroup[groupCounter]=curNode;    }  }  if (totalNumberOfTuple == 0) {    return;  }  addIntermediateNode(curNode,nodeGroups,currentGroup,interNSKeyList,nInternal);  LOGGER.info("****************************Total Number Rows In BTREE: " + totalNumberOfTuple);}  }
class C{  public synchronized void clear(){  emptySoftQueue();  lruHead.nextLinked=lruHead.prevLinked=lruHead;  relationshipHead.nextLinked=relationshipHead.prevLinked=relationshipHead;  lruSize=0;  relationshipSize=0;  Entry tab[]=table;  for (int i=0; i < tab.length; ++i)   tab[i]=null;  size=0;  emptySoftQueue();}  }
class C{  public EmptyBucketGetUserAssignmentTest(){  setResponseLogLengthLimit(1000);  experiment=ExperimentFactory.createExperiment();  DefaultNameExclusionStrategy experimentComparisonStrategy=new DefaultNameExclusionStrategy("creationTime","modificationTime","ruleJson");  experiment.setSerializationStrategy(experimentComparisonStrategy);}  }
class C{  @Override public String resolveTemplateParameter(TemplateParameter templateParameter,ContextInfo contextInfo){  SegmentContextParameters segmentParameter=SegmentContextParameters.fromName(templateParameter.getName());  if (segmentParameter == null) {    throw new UnknownTemplateParameterNameException(templateParameter.toString(),String.format("Unknown Segment Template Parameter Name '%s'. Supported Segment Parameter Names: %s'",templateParameter.getName(),SegmentContextParameters.getSupportedContextParameters()));  }  return getParameterValue(templateParameter,segmentParameter,contextInfo);}  }
class C{  public int read(InputStream is) throws IOException {  init();  if (is != null) {    byte[] buffer=GifUtils.streamToBytes(is);    mGifHeader=new GifHeader(buffer,mOffset);    mOffset+=mGifHeader.size;    mWidth=mGifHeader.getWidth();    mHeight=mGifHeader.getHeight();    if (!mGifHeader.getSignature().equals("GIF")) {      return STATUS_FORMAT_ERROR;    }    while (buffer[mOffset] != TRR_CODE) {      if (buffer[mOffset] == IMG_CODE) {        mImageBlock=new ImageBlock(buffer,mOffset);        mOffset+=mImageBlock.size;        mFrameCount++;        mCurrentImage=extractImage();        if (mLastDispose > 0) {          if (mLastDispose == 3) {            int n=mFrameCount - 2;            if (n > 0) {              mLastImage=getFrame(n - 1);            } else {              mLastImage=null;            }          }        }        mGifFrames.add(new GifFrame(mCurrentImage,mDelay));        resetFrame();      } else       if (buffer[mOffset] == EXT_CODE) {        if (buffer[mOffset + 1] == GC_EXT) {          mGcExt=new GraphicControlExtension(buffer,mOffset);          mOffset+=mGcExt.size;          mDispose=mGcExt.getDisposalMothod();          if (mDispose == 0) {            mDispose=1;          }          mDelay=mGcExt.getDelayTime() * 10;        } else         if (buffer[mOffset + 1] == APP_EXT) {          ApplicationExtension appExt=new ApplicationExtension(buffer,mOffset);          mOffset+=appExt.size;        } else         if (buffer[mOffset + 1] == CMT_EXT) {          CommentExtension cmtExt=new CommentExtension(buffer,mOffset);          mOffset+=cmtExt.size;        } else         if (buffer[mOffset + 1] == TXT_EXT) {          PlainTextExtension txtExt=new PlainTextExtension(buffer,mOffset);          mOffset+=txtExt.size;        } else {          throw new IOException();        }      } else {        throw new IOException();      }    }  } else {    mStatus=STATUS_OPEN_ERROR;  }  return mStatus;}  }
class C{  private String parseIpToPingFromPing(String ping){  String ip="";  if (ping.contains(PING)) {    int indexOpen=ping.indexOf(PARENTHESE_OPEN_PING);    int indexClose=ping.indexOf(PARENTHESE_CLOSE_PING);    ip=ping.substring(indexOpen + 1,indexClose);  }  return ip;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MPAttack_Instant_A_TO_ME(int num0,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200686,num0,skillcaster,skillname);}  }
class C{  private void calcActualRenews(long now){  int maxThreads=taskManager.getMaxThreads() - 1;  if (calcList == null) {    calcList=new ArrayList(maxThreads);  }  for (Iterator<Entry> iter=leases.values().iterator(); iter.hasNext(); ) {    Entry e=iter.next();    e.actualRenew=e.renew;    if (e.renewalsDone()) {      if (now >= e.expiration && e.desiredExpirationListener() == null) {        logExpiration(e);        iter.remove();      }      continue;    }    if (e.endTime <= now && e.listener == null) {      logExpiration(e);      iter.remove();      continue;    }    if (!canBatch(e)) {      for (Iterator<Entry> listIter=calcList.iterator(); listIter.hasNext(); ) {        if (e.renew >= listIter.next().actualRenew - renewalRTT) {          break;        }        listIter.remove();      }      if (calcList.size() == maxThreads) {        Entry e1=calcList.remove(0);        e.actualRenew=e1.actualRenew - renewalRTT;      }      calcList.add(e);    }  }  calcList.clear();  long newWakeup=wakeupTime();  if (queuer == null) {    if (newWakeup < Long.MAX_VALUE) {      queuer=new QueuerTask(newWakeup);      taskManager.add(queuer);    }  } else   if (newWakeup < queuer.wakeup || (newWakeup == Long.MAX_VALUE && leaseInRenew.isEmpty())) {    notifyAll();  }}  }
class C{  public DatabaseGetCitiesQuery regionId(Integer value){  return unsafeParam("region_id",value);}  }
class C{  @Override public int read() throws IOException {  int c=fSurrogate;  if (fSurrogate == -1) {    int index=0;    int b0=index == fOffset ? fInputStream.read() : fBuffer[index++] & 0x00FF;    if (b0 == -1) {      return -1;    }    if (b0 < 0x80) {      c=(char)b0;    } else     if ((b0 & 0xE0) == 0xC0 && (b0 & 0x1E) != 0) {      int b1=index == fOffset ? fInputStream.read() : fBuffer[index++] & 0x00FF;      if (b1 == -1) {        expectedByte(2,2);      }      if ((b1 & 0xC0) != 0x80) {        invalidByte(2,2,b1);      }      c=((b0 << 6) & 0x07C0) | (b1 & 0x003F);    } else     if ((b0 & 0xF0) == 0xE0) {      int b1=index == fOffset ? fInputStream.read() : fBuffer[index++] & 0x00FF;      if (b1 == -1) {        expectedByte(2,3);      }      if ((b1 & 0xC0) != 0x80 || (b0 == 0xED && b1 >= 0xA0) || ((b0 & 0x0F) == 0 && (b1 & 0x20) == 0)) {        invalidByte(2,3,b1);      }      int b2=index == fOffset ? fInputStream.read() : fBuffer[index++] & 0x00FF;      if (b2 == -1) {        expectedByte(3,3);      }      if ((b2 & 0xC0) != 0x80) {        invalidByte(3,3,b2);      }      c=((b0 << 12) & 0xF000) | ((b1 << 6) & 0x0FC0) | (b2 & 0x003F);    } else     if ((b0 & 0xF8) == 0xF0) {      int b1=index == fOffset ? fInputStream.read() : fBuffer[index++] & 0x00FF;      if (b1 == -1) {        expectedByte(2,4);      }      if ((b1 & 0xC0) != 0x80 || ((b1 & 0x30) == 0 && (b0 & 0x07) == 0)) {        invalidByte(2,3,b1);      }      int b2=index == fOffset ? fInputStream.read() : fBuffer[index++] & 0x00FF;      if (b2 == -1) {        expectedByte(3,4);      }      if ((b2 & 0xC0) != 0x80) {        invalidByte(3,3,b2);      }      int b3=index == fOffset ? fInputStream.read() : fBuffer[index++] & 0x00FF;      if (b3 == -1) {        expectedByte(4,4);      }      if ((b3 & 0xC0) != 0x80) {        invalidByte(4,4,b3);      }      int uuuuu=((b0 << 2) & 0x001C) | ((b1 >> 4) & 0x0003);      if (uuuuu > 0x10) {        invalidSurrogate(uuuuu);      }      int wwww=uuuuu - 1;      int hs=0xD800 | ((wwww << 6) & 0x03C0) | ((b1 << 2) & 0x003C)| ((b2 >> 4) & 0x0003);      int ls=0xDC00 | ((b2 << 6) & 0x03C0) | (b3 & 0x003F);      c=hs;      fSurrogate=ls;    } else {      invalidByte(1,1,b0);    }  } else {    fSurrogate=-1;  }  if (DEBUG_READ) {    System.out.println("read(): 0x" + Integer.toHexString(c));  }  return c;}  }
class C{  public void addAll(final Iterable<BSPTree<S>> iterator){  for (  final BSPTree<S> node : iterator) {    add(node);  }}  }
class C{  private int klattRule4(Element segment){  Element syllable=getSyllable(segment);  if (!isWordFinal(syllable)) {    if (isInNucleus(segment)) {      return getPropertyAsInteger("rule4.nucleus");    }  }  return 100;}  }
class C{  public gaj(){}  }
class C{  public RegexSearchTupleSet(boolean caseSensitive){  m_caseSensitive=caseSensitive;}  }
class C{  public PhotosGetAlbumsCountQuery groupId(Integer value){  return unsafeParam("group_id",value);}  }
class C{  public void treeWillExpand(TreeExpansionEvent event) throws ExpandVetoException {  if (classificationViewer.isLocked()) {    throw new ExpandVetoException(event);  }  jTree.addChildren((ViewerJTree.MyJTreeNode)event.getPath().getLastPathComponent());}  }
class C{  public void loadDataStringFromFile(String sFilename) throws java.io.IOException, java.io.FileNotFoundException {  String sDataString=utils.loadFileToStringWithNewlines(sFilename);  setDataString(sDataString);}  }
class C{  public static boolean useDarkTheme(){  return sDarkTheme;}  }
class C{  public static int addAndCheck(int x,int y) throws MathRuntimeException {  long s=(long)x + (long)y;  if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {    throw new MathRuntimeException(LocalizedCoreFormats.OVERFLOW_IN_ADDITION,x,y);  }  return (int)s;}  }
class C{  public void show(){  if (!isVisible) {    textView.setVisibility(VISIBLE);    textView.startAnimation(fadeIn);    isVisible=true;  }}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("detach remoteServer=");  final String url=np.getWordFileNamePunctuation();  np.matchIgnoreCase(";");  if (((megan.remote.RemoteServiceBrowser)getViewer()).closeRemoteService(url))   System.err.println("Service closed: " + url); else   NotificationsInSwing.showError(getViewer().getFrame(),"Failed to close service: " + url);}  }
class C{  private String convertToBoxItemName(String string){  return string.replace("/","_").replace("\\","_");}  }
class C{  static private void runUnconstrainedLS(int n,double[] d,double[] x){  int index=0;  for (int i=0; i <= n - 3; i++) {    x[index]=(d[index] + d[index + (n - i - 2) + 1] - d[index + 1]) / 2.0;    index++;    for (int j=i + 2; j <= n - 2; j++) {      x[index]=(d[index] + d[index + (n - i - 2) + 1] - d[index + 1] - d[index + (n - i - 2)]) / 2.0;      index++;    }    if (i == 0)     x[index]=(d[0] + d[n - 2] - d[2 * n - 4]) / 2.0; else     x[index]=(d[index] + d[i] - d[i - 1] - d[index + (n - i - 2)]) / 2.0;    index++;  }  x[index]=(d[index] + d[n - 2] - d[n - 3]) / 2.0;}  }
class C{  protected void configureXML11Pipeline(){  if (fCurrentDVFactory != fXML11DatatypeFactory) {    fCurrentDVFactory=fXML11DatatypeFactory;    setProperty(DATATYPE_VALIDATOR_FACTORY,fCurrentDVFactory);  }  if (fCurrentDTDScanner != fXML11DTDScanner) {    fCurrentDTDScanner=fXML11DTDScanner;    setProperty(DTD_SCANNER,fCurrentDTDScanner);    setProperty(DTD_PROCESSOR,fXML11DTDProcessor);  }  fXML11DTDScanner.setDTDHandler(fXML11DTDProcessor);  fXML11DTDProcessor.setDTDSource(fXML11DTDScanner);  fXML11DTDProcessor.setDTDHandler(fDTDHandler);  if (fDTDHandler != null) {    fDTDHandler.setDTDSource(fXML11DTDProcessor);  }  fXML11DTDScanner.setDTDContentModelHandler(fXML11DTDProcessor);  fXML11DTDProcessor.setDTDContentModelSource(fXML11DTDScanner);  fXML11DTDProcessor.setDTDContentModelHandler(fDTDContentModelHandler);  if (fDTDContentModelHandler != null) {    fDTDContentModelHandler.setDTDContentModelSource(fXML11DTDProcessor);  }  if (fFeatures.get(NAMESPACES) == Boolean.TRUE) {    if (fCurrentScanner != fXML11NSDocScanner) {      fCurrentScanner=fXML11NSDocScanner;      setProperty(DOCUMENT_SCANNER,fXML11NSDocScanner);      setProperty(DTD_VALIDATOR,fXML11NSDTDValidator);    }    fXML11NSDocScanner.setDTDValidator(fXML11NSDTDValidator);    fXML11NSDocScanner.setDocumentHandler(fXML11NSDTDValidator);    fXML11NSDTDValidator.setDocumentSource(fXML11NSDocScanner);    fXML11NSDTDValidator.setDocumentHandler(fDocumentHandler);    if (fDocumentHandler != null) {      fDocumentHandler.setDocumentSource(fXML11NSDTDValidator);    }    fLastComponent=fXML11NSDTDValidator;  } else {    if (fXML11DocScanner == null) {      fXML11DocScanner=new XML11DocumentScannerImpl();      addXML11Component(fXML11DocScanner);      fXML11DTDValidator=new XML11DTDValidator();      addXML11Component(fXML11DTDValidator);    }    if (fCurrentScanner != fXML11DocScanner) {      fCurrentScanner=fXML11DocScanner;      setProperty(DOCUMENT_SCANNER,fXML11DocScanner);      setProperty(DTD_VALIDATOR,fXML11DTDValidator);    }    fXML11DocScanner.setDocumentHandler(fXML11DTDValidator);    fXML11DTDValidator.setDocumentSource(fXML11DocScanner);    fXML11DTDValidator.setDocumentHandler(fDocumentHandler);    if (fDocumentHandler != null) {      fDocumentHandler.setDocumentSource(fXML11DTDValidator);    }    fLastComponent=fXML11DTDValidator;  }}  }
class C{  private XSParticleDecl traverseSeqChoice(Element decl,XSDocumentInfo schemaDoc,SchemaGrammar grammar,int allContextFlags,boolean choice,XSObject parent){  Object[] attrValues=fAttrChecker.checkAttributes(decl,false,schemaDoc);  Element child=DOMUtil.getFirstChildElement(decl);  XSAnnotationImpl annotation=null;  if (child != null && DOMUtil.getLocalName(child).equals(SchemaSymbols.ELT_ANNOTATION)) {    annotation=traverseAnnotationDecl(child,attrValues,false,schemaDoc);    child=DOMUtil.getNextSiblingElement(child);  } else {    String text=DOMUtil.getSyntheticAnnotation(decl);    if (text != null) {      annotation=traverseSyntheticAnnotation(decl,text,attrValues,false,schemaDoc);    }  }  String childName=null;  XSParticleDecl particle;  fPArray.pushContext();  for (; child != null; child=DOMUtil.getNextSiblingElement(child)) {    particle=null;    childName=DOMUtil.getLocalName(child);    if (childName.equals(SchemaSymbols.ELT_ELEMENT)) {      particle=fSchemaHandler.fElementTraverser.traverseLocal(child,schemaDoc,grammar,NOT_ALL_CONTEXT,parent);    } else     if (childName.equals(SchemaSymbols.ELT_GROUP)) {      particle=fSchemaHandler.fGroupTraverser.traverseLocal(child,schemaDoc,grammar);      if (hasAllContent(particle)) {        particle=null;        reportSchemaError("cos-all-limited.1.2",null,child);      }    } else     if (childName.equals(SchemaSymbols.ELT_CHOICE)) {      particle=traverseChoice(child,schemaDoc,grammar,NOT_ALL_CONTEXT,parent);    } else     if (childName.equals(SchemaSymbols.ELT_SEQUENCE)) {      particle=traverseSequence(child,schemaDoc,grammar,NOT_ALL_CONTEXT,parent);    } else     if (childName.equals(SchemaSymbols.ELT_ANY)) {      particle=fSchemaHandler.fWildCardTraverser.traverseAny(child,schemaDoc,grammar);    } else {      Object[] args;      if (choice) {        args=new Object[]{"choice","(annotation?, (element | group | choice | sequence | any)*)",DOMUtil.getLocalName(child)};      } else {        args=new Object[]{"sequence","(annotation?, (element | group | choice | sequence | any)*)",DOMUtil.getLocalName(child)};      }      reportSchemaError("s4s-elt-must-match.1",args,child);    }    if (particle != null)     fPArray.addParticle(particle);  }  particle=null;  XInt minAtt=(XInt)attrValues[XSAttributeChecker.ATTIDX_MINOCCURS];  XInt maxAtt=(XInt)attrValues[XSAttributeChecker.ATTIDX_MAXOCCURS];  Long defaultVals=(Long)attrValues[XSAttributeChecker.ATTIDX_FROMDEFAULT];  XSModelGroupImpl group=new XSModelGroupImpl();  group.fCompositor=choice ? XSModelGroupImpl.MODELGROUP_CHOICE : XSModelGroupImpl.MODELGROUP_SEQUENCE;  group.fParticleCount=fPArray.getParticleCount();  group.fParticles=fPArray.popContext();  XSObjectList annotations;  if (annotation != null) {    annotations=new XSObjectListImpl();    ((XSObjectListImpl)annotations).addXSObject(annotation);  } else {    annotations=XSObjectListImpl.EMPTY_LIST;  }  group.fAnnotations=annotations;  particle=new XSParticleDecl();  particle.fType=XSParticleDecl.PARTICLE_MODELGROUP;  particle.fMinOccurs=minAtt.intValue();  particle.fMaxOccurs=maxAtt.intValue();  particle.fValue=group;  particle.fAnnotations=annotations;  particle=checkOccurrences(particle,choice ? SchemaSymbols.ELT_CHOICE : SchemaSymbols.ELT_SEQUENCE,(Element)decl.getParentNode(),allContextFlags,defaultVals.longValue());  fAttrChecker.returnAttrArray(attrValues,schemaDoc);  return particle;}  }
class C{  private static double[] computeSimpsonReciprocal(ClassificationViewer viewer,ProgressListener progressListener) throws IOException, CanceledException {  progressListener.setMaximum(2 * viewer.getSelectedNodes().size());  progressListener.setProgress(0);  int numberOfDatasets=viewer.getDocument().getNumberOfSamples();  double[] total=new double[numberOfDatasets];  for (  Node v : viewer.getSelectedNodes()) {    int[] summarized=viewer.getNodeData(v).getSummarized();    for (int i=0; i < summarized.length; i++)     total[i]+=summarized[i];    progressListener.incrementProgress();  }  double[] result=new double[numberOfDatasets];  for (  Node v : viewer.getSelectedNodes()) {    int[] summarized=viewer.getNodeData(v).getSummarized();    for (int i=0; i < summarized.length; i++) {      double p=summarized[i] / total[i];      result[i]+=p * p;    }    progressListener.incrementProgress();  }  for (int i=0; i < result.length; i++)   result[i]=result[i] > 0 ? 1.0 / result[i] : 0;  return result;}  }
class C{  @Override public void warning(SAXParseException exception){  warningCount++;  if (showWarnings && (errorCount + warningCount < maxMessages)) {    message("Warning",exception);  }}  }
class C{  private void drawResultPoints(Bitmap barcode,float scaleFactor,Result rawResult){  ResultPoint[] points=rawResult.getResultPoints();  if (points != null && points.length > 0) {    Canvas canvas=new Canvas(barcode);    Paint paint=new Paint();    paint.setColor(getResources().getColor(R.color.result_points));    if (points.length == 2) {      paint.setStrokeWidth(4.0f);      drawLine(canvas,paint,points[0],points[1],scaleFactor);    } else     if (points.length == 4 && (rawResult.getBarcodeFormat() == BarcodeFormat.UPC_A || rawResult.getBarcodeFormat() == BarcodeFormat.EAN_13)) {      drawLine(canvas,paint,points[0],points[1],scaleFactor);      drawLine(canvas,paint,points[2],points[3],scaleFactor);    } else {      paint.setStrokeWidth(10.0f);      for (      ResultPoint point : points) {        if (point != null) {          canvas.drawPoint(scaleFactor * point.getX(),scaleFactor * point.getY(),paint);        }      }    }  }}  }
class C{  public CM_MAY_LOGIN_INTO_GAME(int opcode,State state,State... restStates){  super(opcode,state,restStates);}  }
class C{  private void validate(AddFavoriteResourceRQ addFavoriteResourceRQ,String userName,String projectName){  Project project=projectRepository.findOne(projectName);  expect(project,notNull()).verify(PROJECT_NOT_FOUND,projectName);  UserConfig assigned=project.getUsers().get(userName);  expect(assigned,notNull()).verify(ACCESS_DENIED,formattedSupplier("User '{}' not assigned to target project",userName));  ReportPortalRepository<? extends Shareable,String> repository=repositories.get(addFavoriteResourceRQ.getType());  expect(repository,notNull()).verify(UNABLE_ADD_TO_FAVORITE,formattedSupplier("Unknown resource type '{}'.",addFavoriteResourceRQ.getType()));  Shareable shareable=repository.findOne(addFavoriteResourceRQ.getResourceId());  expect(shareable,notNull()).verify(UNABLE_ADD_TO_FAVORITE,formattedSupplier("Incorrect resource id '{}'.",addFavoriteResourceRQ.getResourceId()));  expect(shareable.getAcl().getEntries(),contains(hasACLPermission(projectName,AclPermissions.READ))).verify(UNABLE_ADD_TO_FAVORITE,formattedSupplier("Resource with id '{}' isn't shared to project.",addFavoriteResourceRQ.getResourceId(),projectName));  expect(shareable.getAcl().getOwnerUserId(),not(equalTo(userName.toLowerCase()))).verify(UNABLE_ADD_TO_FAVORITE,formattedSupplier("User can't add own resource to favorites"));  List<FavoriteResource> resources=favoriteResourceRepository.findByFilter(Utils.getUniqueFavoriteFilter(userName,addFavoriteResourceRQ.getType().name(),addFavoriteResourceRQ.getResourceId()));  expect(resources,not(NOT_EMPTY_COLLECTION)).verify(UNABLE_ADD_TO_FAVORITE,formattedSupplier("Favorite resource with resource id '{}', type '{}' have already exist for user '{}'.",addFavoriteResourceRQ.getResourceId(),addFavoriteResourceRQ.getType(),userName));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_CANNOT_ENTER_INSTANCE_COOL_TIME_HOUR(String worldname0,String value1){  return new SM_SYSTEM_MESSAGE(1400029,worldname0,value1);}  }
class C{  public static byte[] decodeWebSafe(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,WEBSAFE_DECODABET);}  }
class C{  public static int compareResourceFiles(@Nullable PsiFile file1,@Nullable PsiFile file2){  if (file1 == file2) {    return 0;  } else   if (file1 != null && file2 != null) {    boolean xml1=file1.getFileType() == StdFileTypes.XML;    boolean xml2=file2.getFileType() == StdFileTypes.XML;    if (xml1 != xml2) {      return xml1 ? -1 : 1;    }    PsiDirectory parent1=file1.getParent();    PsiDirectory parent2=file2.getParent();    if (parent1 != null && parent2 != null && parent1 != parent2) {      String parentName1=parent1.getName();      String parentName2=parent2.getName();      boolean qualifier1=parentName1.indexOf('-') != -1;      boolean qualifier2=parentName2.indexOf('-') != -1;      if (qualifier1 != qualifier2) {        return qualifier1 ? 1 : -1;      }      if (qualifier1) {        FolderConfiguration config1=FolderConfiguration.getConfigForFolder(parentName1);        FolderConfiguration config2=FolderConfiguration.getConfigForFolder(parentName2);        if (config1 != null && config2 != null) {          return config1.compareTo(config2);        } else         if (config1 != null) {          return -1;        } else         if (config2 != null) {          return 1;        }        int delta=parentName1.compareTo(parentName2);        if (delta != 0) {          return delta;        }      }    }    return file1.getName().compareTo(file2.getName());  } else   if (file1 != null) {    return -1;  } else {    return 1;  }}  }
class C{  public SegmentInfo(DataSegment segment){  this.dataSource=segment.getDataSource();  this.interval=segment.getInterval();  this.version=segment.getVersion();  ShardSpec spec=segment.getShardSpec();  this.shardSpec=spec instanceof NumberedShardSpec ? (NumberedShardSpec)spec : new NumberedShardSpec((NoneShardSpec)spec);  this.size=segment.getSize();  this.identifier=segment.getIdentifier();}  }
class C{  public MicrosphereProjectionInterpolator(InterpolatingMicrosphere microsphere,double exponent,boolean sharedSphere,double noInterpolationTolerance) throws MathIllegalArgumentException {  if (exponent < 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_SMALL,exponent,0);  }  this.microsphere=microsphere;  this.exponent=exponent;  this.sharedSphere=sharedSphere;  this.noInterpolationTolerance=noInterpolationTolerance;}  }
class C{  public static S2LatLngRect empty(){  return new S2LatLngRect(R1Interval.empty(),S1Interval.empty());}  }
class C{  public PhotosSaveMarketAlbumPhotoQuery(VkApiClient client,UserActor actor,int groupId,String photo,int server,String hash){  super(client,"photos.saveMarketAlbumPhoto",Utils.buildParametrizedType(List.class,Photo.class));  accessToken(actor.getAccessToken());  groupId(groupId);  photo(photo);  server(server);  hash(hash);}  }
class C{  public static List<double[]> coordSplit(double[] vector){  if (vector == null)   return null;  List<double[]> ret=new ArrayList<double[]>();  double[] xVals=new double[vector.length / 2];  double[] yVals=new double[vector.length / 2];  int xTracker=0;  int yTracker=0;  for (int i=0; i < vector.length; i++) {    if (i % 2 == 0)     xVals[xTracker++]=vector[i]; else     yVals[yTracker++]=vector[i];  }  ret.add(xVals);  ret.add(yVals);  return ret;}  }
class C{  public static ValueGetterSpacePredicate<ServerEntry> pathIn(String path,Object... values){  return path(path,in(values));}  }
class C{  private static void doCopyFile(File srcFile,File destFile,boolean preserveFileDate) throws IOException {  if (destFile.exists() && destFile.isDirectory()) {    throw new IOException("Destination '" + destFile + "' exists but is a directory");  }  FileInputStream fis=null;  FileOutputStream fos=null;  FileChannel input=null;  FileChannel output=null;  try {    fis=new FileInputStream(srcFile);    fos=new FileOutputStream(destFile);    input=fis.getChannel();    output=fos.getChannel();    long size=input.size();    long pos=0;    long count=0;    while (pos < size) {      count=size - pos > FILE_COPY_BUFFER_SIZE ? FILE_COPY_BUFFER_SIZE : size - pos;      pos+=output.transferFrom(input,pos,count);    }  }  finally {    IOUtils.closeQuietly(output);    IOUtils.closeQuietly(fos);    IOUtils.closeQuietly(input);    IOUtils.closeQuietly(fis);  }  if (srcFile.length() != destFile.length()) {    throw new IOException("Failed to copy full contents from '" + srcFile + "' to '"+ destFile+ "'");  }  if (preserveFileDate) {    destFile.setLastModified(srcFile.lastModified());  }}  }
class C{  public UnrevealBuilder withEndAction(@NonNull final Runnable endAction){  this.mEndAction=endAction;  return this;}  }
class C{  static boolean isExceptionCaughtAt(SootClass e,Stmt stmt,Body b){  Hierarchy h=new Hierarchy();  Iterator<Trap> trapsIt=b.getTraps().iterator();  while (trapsIt.hasNext()) {    Trap t=trapsIt.next();    if (h.isClassSubclassOfIncluding(e,t.getException())) {      Iterator<Unit> it=b.getUnits().iterator(t.getBeginUnit(),t.getEndUnit());      while (it.hasNext())       if (stmt.equals(it.next()))       return true;    }  }  return false;}  }
class C{  public String syllabify(String phoneString){  LinkedList<String> phoneList=splitIntoAllophones(phoneString);  syllabify(phoneList);  StringBuilder sb=new StringBuilder();  for (  String p : phoneList) {    if (sb.length() > 0)     sb.append(" ");    sb.append(p);  }  return sb.toString();}  }
class C{  public ACQUAINT2DocumentSet(String sTACXMLFile){  DocumentBuilderFactory docBuilderFactory=DocumentBuilderFactory.newInstance();  XMLDoc=null;  Categories=null;  hsDocs=null;  hmDocsToCategories=null;  try {    DocumentBuilder docBuilder=docBuilderFactory.newDocumentBuilder();    XMLDoc=docBuilder.parse(new File(sTACXMLFile));  } catch (  ParserConfigurationException ex) {    System.err.println("Invalid XML file. Details:");    ex.printStackTrace(System.err);  }catch (  SAXException ex) {    System.err.println("Invalid XML file. Details:");    ex.printStackTrace(System.err);  }catch (  IOException ex) {    System.err.println("Could not read XML file. Cause:");    ex.printStackTrace(System.err);  }  if (XMLDoc == null)   return;  hmDocsToCategories=new HashMap<String,String>();  XMLDoc.getDocumentElement().normalize();}  }
class C{  public void init$Children(){  children=new ASTNode[3];  setChild(new Opt(),2);}  }
class C{  public void drag(long time,float x,float y,float amountX,float amountY){  float scrollDrag, discardDrag;  if (mCurrentMode == Orientation.PORTRAIT) {    discardDrag=amountX;    scrollDrag=amountY;  } else {    discardDrag=amountY;    scrollDrag=LocalizationUtils.isLayoutRtl() ? -amountX : amountX;  }  DragLock hintLock=computeDragLock(scrollDrag,discardDrag);  if (hintLock == DragLock.DISCARD) {    discard(x,y,amountX,amountY);  } else {    if (mDragLock == DragLock.SCROLL && mDiscardingTab != null) {      commitDiscard(time,false);    }    scroll(x,y,LocalizationUtils.isLayoutRtl() ? -amountX : amountX,amountY,false);  }  requestUpdate();}  }
class C{  public void makeCurrentReadFrom(EglSurfaceBase readSurface){  eglCore.makeCurrent(eGLSurface,readSurface.eGLSurface);}  }
class C{  public FileProcessor addInputSuffix(String... suffixes){  for (  String suffix : suffixes)   addInputRegex("(?i).*" + Pattern.quote(suffix));  return this;}  }
class C{  public static SpaceTypeDescriptor fromSerializableForm(Serializable versionedSerializableForm){  if (!(versionedSerializableForm instanceof TypeDescVersionedSerializable))   throw new IllegalArgumentException("wrapper must be an instance of " + TypeDescVersionedSerializable.class.getName());  return ((TypeDescVersionedSerializable)versionedSerializableForm).getTypeDesc();}  }
class C{  public CountDailyIntegrationTest(){  setResponseLogLengthLimit(1000);  dateFormat=new SimpleDateFormat("yyyy-MM-dd");  Calendar cal=Calendar.getInstance();  cal.add(Calendar.DATE,-1);  yesterday=dateFormat.format(cal.getTime());  yesterday+="T00:00:00+0000";  cal=Calendar.getInstance();  cal.add(Calendar.DATE,0);  today=dateFormat.format(cal.getTime());  today+="T00:00:00+0000";  cal=Calendar.getInstance();  cal.add(Calendar.DATE,1);  tomorrow=dateFormat.format(cal.getTime());  tomorrow+="T00:00:00+0000";  cal=Calendar.getInstance();  cal.add(Calendar.DATE,4);  tomorrowPlus3=dateFormat.format(cal.getTime());  tomorrowPlus3+="T00:00:00+0000";  experiment=ExperimentFactory.createExperiment();  experiment.startTime=yesterday;  experiment.endTime=tomorrowPlus3;  experiment.samplingPercent=1.0;  experiment.label="experiment";  experiment.applicationName=QBO + UUID.randomUUID();  DefaultNameExclusionStrategy experimentComparisonStrategy=new DefaultNameExclusionStrategy("creationTime","modificationTime","ruleJson");  experiment.setSerializationStrategy(experimentComparisonStrategy);}  }
class C{  public ProjectPlan(Plan p,Set<String> fldNames){  this.p=p;  for (  String fldname : fldNames)   schema.add(fldname,p.schema());  hist=projectHistogram(p.histogram(),fldNames);}  }
class C{  public NGramHistogramComparator(){}  }
class C{  private LinkedHashSet<DimensionField> calculateDefaultDimensionFields(@NotNull LinkedHashSet<DimensionField> dimensionFields,@NotNull LinkedHashSet<DimensionField> defaultDimensionFields){  if (defaultDimensionFields.isEmpty()) {    return dimensionFields.stream().limit(2).collect(Collectors.toCollection(null));  } else {    return defaultDimensionFields;  }}  }
class C{  static void registerLintRuleNames(HttpConfigAspect aspect){  aspect.registerLintRuleName(REST_STYLE_RULE_NAME,METHOD_SHADOWED_RULE_NAME);}  }
class C{  public static boolean different(GenericRecord first,GenericRecord second,List<String> valueFieldNames){  for (  String valueFieldName : valueFieldNames) {    Object firstValue=first.get(valueFieldName);    Object secondValue=second.get(valueFieldName);    if (firstValue != null && secondValue != null && !firstValue.equals(secondValue)) {      return true;    }    if ((firstValue != null && secondValue == null) || (firstValue == null && secondValue != null)) {      return true;    }  }  return false;}  }
class C{  public VisualTable(Table parent,Visualization vis,String group,Predicate rowFilter,Schema schema){  super(parent,rowFilter,null,TableVisualItem.class);  init(vis,group,schema);}  }
class C{  public ResultSet parse(JsonNode jsonResult,ZonedSchema schema,QueryType queryType){  LOG.trace("Parsing druid query {} by json result: {} using schema: {}",queryType,jsonResult,schema);  if (!(queryType instanceof DefaultQueryType)) {    unsupportedQueryType(queryType);  }  DefaultQueryType defaultQueryType=(DefaultQueryType)queryType;  Set<DimensionColumn> dimensionColumns=schema.getColumns(DimensionColumn.class);  Set<MetricColumn> metricColumns=schema.getColumns(MetricColumn.class);  List<Result> results=null;switch (defaultQueryType) {case GROUP_BY:    results=makeGroupByResults(jsonResult,dimensionColumns,metricColumns,schema.getDateTimeZone());  break;case TOP_N:results=makeTopNResults(jsonResult,dimensionColumns,metricColumns,schema.getDateTimeZone());break;case TIMESERIES:results=makeTimeSeriesResults(jsonResult,metricColumns,schema.getDateTimeZone());break;case LOOKBACK:results=makeLookbackResults(jsonResult,dimensionColumns,metricColumns,schema.getDateTimeZone());break;default :unsupportedQueryType(queryType);}LOG.trace("Parsed druid query {} results: {}",queryType,results);return new ResultSet(results,schema);}  }
class C{  public static String createXmlString(AnnotatedString input){  Document doc=createXmlDocument(input);  StringWriter out=new StringWriter();  try {    Transformer transformer=TransformerFactory.newInstance().newTransformer();    transformer.setOutputProperty(OutputKeys.INDENT,"yes");    DOMSource source=new DOMSource(doc);    StreamResult result=new StreamResult(out);    transformer.transform(source,result);  } catch (  TransformerException te) {    throw new ProcessingException(te.getLocalizedMessage(),te);  }  return out.toString();}  }
class C{  public void writeInt(int value) throws JMSException {  initializeWriting();  try {    this.dataOut.write(_INT);    this.dataOut.writeInt(value);  } catch (  IOException ioe) {    raise(ioe);  }}  }
class C{  @Override public Object invoke(Object proxy,Method method,Object[] args) throws InvocationTargetException, IllegalAccessException {  if (list == null || !cacheResults) {    List<WebElement> webElements=locator.findElements();    list=new ArrayList<>(webElements.size());    for (    WebElement item : webElements) {      Object myItem=injector.inject(type,item,framePath);      list.add(myItem);    }    list=Collections.unmodifiableList(list);  }  return method.invoke(list,args);}  }
class C{  public static List<String> parseStringGroup(final String string,final String regex,final String firstRegex,final String firstRegexReplace,final int lastRegexStringLength){  List<String> list=null;  if (string != null) {    list=new ArrayList<String>();    int lastRegexLength=lastRegexStringLength < 0 ? 0 : lastRegexStringLength;    Pattern pattern=Pattern.compile(regex);    Matcher matcher=pattern.matcher(string);    String group=null;    int start=0;    while (matcher.find(start)) {      start=matcher.end();      group=matcher.group();      group=group.replaceFirst(firstRegex,firstRegexReplace);      group=group.substring(0,group.length() - lastRegexLength);      list.add(group);    }  }  return list;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_PARTY_HE_LEAVE_PARTY(String value0){  return new SM_SYSTEM_MESSAGE(1300168,value0);}  }
class C{  protected void handleTargetTextUnit(ITextUnit textUnit){  if (!textUnit.isTranslatable()) {    return;  }  Locale targetLocale=localeService.findByBcp47Tag(targetLocaleId.toBCP47());  String name=textUnit.getName();  String sourceContent=textUnit.getSource().toString();  String translation=textUnit.getTarget(targetLocaleId).toString();  ImportExportNote importExportNote=textUnitUtils.getImportExportNote(textUnit);  if (!Strings.isNullOrEmpty(translation)) {    Long tmTextUnitId=tmTextUnitIdsByMd5ForAsset.get(tmService.computeTMTextUnitMD5(name,sourceContent,importExportNote.getSourceComment()));    if (tmTextUnitId == null) {      String msg="Trying to add a translation to an non existing text unit, name: " + name + ", comment: "+ importExportNote.getSourceComment()+ ", source: "+ sourceContent;      logger.error(msg);      throw new RuntimeException(msg);    }    TMTextUnitVariant addTMTextUnitVariant=null;    if (updateTM) {      logger.debug("Import assuming there is already some translations in the TM");      addTMTextUnitVariant=tmService.addCurrentTMTextUnitVariant(tmTextUnitId,targetLocale.getId(),translation,importExportNote.getStatus(),importExportNote.isIncludedInLocalizedFile(),importExportNote.getCreatedDate());    } else {      logger.debug("Import assuming there is no translation in the TM yet (optimized, don't check for update)");      addTMTextUnitVariant=tmService.addTMTextUnitVariant(tmTextUnitId,targetLocale.getId(),translation,importExportNote.getTargetComment(),importExportNote.getStatus(),importExportNote.isIncludedInLocalizedFile(),importExportNote.getCreatedDate());      tmService.makeTMTextUnitVariantCurrent(asset.getRepository().getTm().getId(),tmTextUnitId,targetLocale.getId(),addTMTextUnitVariant.getId());    }    for (    TMTextUnitVariantComment variantComment : importExportNote.getVariantComments()) {      tmTextUnitVariantCommentService.addComment(addTMTextUnitVariant.getId(),variantComment.getType(),variantComment.getSeverity(),variantComment.getContent());    }  } else {    logger.debug("Empty translation for name: {}, skip it",name);  }}  }
class C{  public AudioGetPopularQuery genreId(AudioGenre value){  return unsafeParam("genre_id",value);}  }
class C{  private float[] loadBitmapData(Bitmap bitmap){  final int[] pixels=new int[width * height];  bitmap.getPixels(pixels,0,width,0,0,width,height);  bitmap.recycle();  final float[] heightmapVertices=new float[width * height * TOTAL_COMPONENT_COUNT];  int offset=0;  for (int row=0; row < height; row++) {    for (int col=0; col < width; col++) {      final Point point=getPoint(pixels,row,col);      heightmapVertices[offset++]=point.x;      heightmapVertices[offset++]=point.y;      heightmapVertices[offset++]=point.z;      final Point top=getPoint(pixels,row - 1,col);      final Point left=getPoint(pixels,row,col - 1);      final Point right=getPoint(pixels,row,col + 1);      final Point bottom=getPoint(pixels,row + 1,col);      final Vector rightToLeft=Geometry.vectorBetween(right,left);      final Vector topToBottom=Geometry.vectorBetween(top,bottom);      final Vector normal=rightToLeft.crossProduct(topToBottom).normalize();      heightmapVertices[offset++]=normal.x;      heightmapVertices[offset++]=normal.y;      heightmapVertices[offset++]=normal.z;    }  }  return heightmapVertices;}  }
class C{  public String toString(){  SimpleDateFormat formatter=getFormatter();  FieldPosition pos=new FieldPosition(0);  StringBuffer buf=new StringBuffer(95);  buf.append("DelegationAbsoluteTime[start: ");  format(minStart,maxStart,formatter,buf,pos);  buf.append(", stop: ");  format(minStop,maxStop,formatter,buf,pos);  buf.append(']');  return buf.toString();}  }
class C{  public static int exportTaxon2TotalLength(String format,Director dir,File file,char separator,ProgressListener progressListener) throws IOException {  int totalLines=0;  try {    final MainViewer viewer=dir.getMainViewer();    try (BufferedWriter w=new BufferedWriter(new FileWriter(file))){      final IConnector connector=viewer.getDir().getDocument().getConnector();      final IClassificationBlock classificationBlock=connector.getClassificationBlock(ClassificationType.Taxonomy.toString());      final java.util.Collection<Integer> taxonIds=viewer.getSelectedIds();      progressListener.setSubtask("Taxa to total length");      progressListener.setMaximum(taxonIds.size());      progressListener.setProgress(0);      for (      int taxonId : taxonIds) {        Set<Integer> allBelow;        Node v=viewer.getTaxId2Node(taxonId);        if (v.getOutDegree() == 0)         allBelow=TaxonomyData.getTree().getAllDescendants(taxonId); else {          allBelow=new HashSet<>();          allBelow.add(taxonId);        }        final String name=getTaxonLabelSource(dir,format,taxonId);        if (name != null) {          w.write(name);          long length=0L;          for (          int id : allBelow) {            if (classificationBlock.getSum(id) > 0) {              try (IReadBlockIterator it=connector.getReadsIterator(viewer.getClassName(),id,0,10000,true,false)){                while (it.hasNext()) {                  length+=it.next().getReadLength();                }              }               totalLines++;              progressListener.checkForCancel();            }          }          w.write(separator + "" + length+ "\n");        }        progressListener.incrementProgress();      }    }   } catch (  CanceledException canceled) {    System.err.println("USER CANCELED");  }  return totalLines;}  }
class C{  public Hurt(EntityLivingBase living,DamageSource source,float damage){  super(living);  this.source=source;  this.damage=damage;}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public void removeSegment(int shapeIndex,int segmentIndex){  List<WKTSegmentList> shapeList=segmentList.get(shapeIndex);  if ((segmentIndex >= 0) && (segmentIndex < shapeList.size())) {    shapeList.remove(segmentIndex);  }}  }
class C{  public static boolean isOrSubOf(Class<?> objectClass,Object parentObject){  Class<?> parentClass=parentObject.getClass();  return isOrSubOf(objectClass,parentClass);}  }
class C{  public ArrayFieldVector(T[] v1,FieldVector<T> v2) throws NullArgumentException {  MathUtils.checkNotNull(v1);  MathUtils.checkNotNull(v2);  field=v2.getField();  final T[] v2Data=(v2 instanceof ArrayFieldVector) ? ((ArrayFieldVector<T>)v2).data : v2.toArray();  data=MathArrays.buildArray(field,v1.length + v2Data.length);  System.arraycopy(v1,0,data,0,v1.length);  System.arraycopy(v2Data,0,data,v1.length,v2Data.length);}  }
class C{  @Override public void close() throws IOException {  fInputStream.close();}  }
class C{  public static <R>Observable<R> ifThen(BooleanSupplier condition,ObservableSource<? extends R> then){  return ifThen(condition,then,Observable.<R>empty());}  }
class C{  public boolean naive_side_effect(){  return soot.PhaseOptions.getBoolean(options,"naive-side-effect");}  }
class C{  public AlreadyClosedException(){  super("Environment has already been closed");}  }
class C{  public static int determineConsecutiveDigitCount(CharSequence msg,int startpos){  int count=0;  int len=msg.length();  int idx=startpos;  if (idx < len) {    char ch=msg.charAt(idx);    while (isDigit(ch) && idx < len) {      count++;      idx++;      if (idx < len) {        ch=msg.charAt(idx);      }    }  }  return count;}  }
class C{  public boolean resourceClosingException(TypeDecl catchType){  ASTNode$State state=state();  try {    for (    ResourceDeclaration resource : getResourceList()) {      MethodDecl close=lookupClose(resource);      if (close == null)       continue;      for (      Access exception : close.getExceptionList()) {        TypeDecl exceptionType=exception.type();        if (catchType.mayCatch(exception.type()))         return true;      }    }    return false;  }  finally {  }}  }
class C{  public static char[] encode(byte[] in,int iLen){  return encode(in,0,iLen);}  }
class C{  public Matrix(double[][] A){  m=A.length;  n=A[0].length;  for (int i=0; i < m; i++) {    if (A[i].length != n) {      throw new IllegalArgumentException("All rows must have the same length.");    }  }  this.A=A;}  }
class C{  private static DecoderResult createDecoderResultFromAmbiguousValues(int ecLevel,int[] codewords,int[] erasureArray,int[] ambiguousIndexes,int[][] ambiguousIndexValues) throws FormatException, ChecksumException {  int[] ambiguousIndexCount=new int[ambiguousIndexes.length];  int tries=100;  while (tries-- > 0) {    for (int i=0; i < ambiguousIndexCount.length; i++) {      codewords[ambiguousIndexes[i]]=ambiguousIndexValues[i][ambiguousIndexCount[i]];    }    try {      return decodeCodewords(codewords,ecLevel,erasureArray);    } catch (    ChecksumException ignored) {    }    if (ambiguousIndexCount.length == 0) {      throw ChecksumException.getChecksumInstance();    }    for (int i=0; i < ambiguousIndexCount.length; i++) {      if (ambiguousIndexCount[i] < ambiguousIndexValues[i].length - 1) {        ambiguousIndexCount[i]++;        break;      } else {        ambiguousIndexCount[i]=0;        if (i == ambiguousIndexCount.length - 1) {          throw ChecksumException.getChecksumInstance();        }      }    }  }  throw ChecksumException.getChecksumInstance();}  }
class C{  @Override public final void writeChar(int v) throws IOException {  work[0]=(byte)v;  work[1]=(byte)(v >> 8);  dis.write(work,0,2);}  }
class C{  public double[][] toCartesianHessian(final double[][] sHessian,final double[] sGradient){  computeJacobian();  computeHessians();  final double[][] hj=new double[3][3];  final double[][] cHessian=new double[3][3];  hj[0][0]=sHessian[0][0] * jacobian[0][0] + sHessian[1][0] * jacobian[1][0] + sHessian[2][0] * jacobian[2][0];  hj[0][1]=sHessian[0][0] * jacobian[0][1] + sHessian[1][0] * jacobian[1][1] + sHessian[2][0] * jacobian[2][1];  hj[0][2]=sHessian[0][0] * jacobian[0][2] + sHessian[2][0] * jacobian[2][2];  hj[1][0]=sHessian[1][0] * jacobian[0][0] + sHessian[1][1] * jacobian[1][0] + sHessian[2][1] * jacobian[2][0];  hj[1][1]=sHessian[1][0] * jacobian[0][1] + sHessian[1][1] * jacobian[1][1] + sHessian[2][1] * jacobian[2][1];  hj[2][0]=sHessian[2][0] * jacobian[0][0] + sHessian[2][1] * jacobian[1][0] + sHessian[2][2] * jacobian[2][0];  hj[2][1]=sHessian[2][0] * jacobian[0][1] + sHessian[2][1] * jacobian[1][1] + sHessian[2][2] * jacobian[2][1];  hj[2][2]=sHessian[2][0] * jacobian[0][2] + sHessian[2][2] * jacobian[2][2];  cHessian[0][0]=jacobian[0][0] * hj[0][0] + jacobian[1][0] * hj[1][0] + jacobian[2][0] * hj[2][0];  cHessian[1][0]=jacobian[0][1] * hj[0][0] + jacobian[1][1] * hj[1][0] + jacobian[2][1] * hj[2][0];  cHessian[2][0]=jacobian[0][2] * hj[0][0] + jacobian[2][2] * hj[2][0];  cHessian[1][1]=jacobian[0][1] * hj[0][1] + jacobian[1][1] * hj[1][1] + jacobian[2][1] * hj[2][1];  cHessian[2][1]=jacobian[0][2] * hj[0][1] + jacobian[2][2] * hj[2][1];  cHessian[2][2]=jacobian[0][2] * hj[0][2] + jacobian[2][2] * hj[2][2];  cHessian[0][0]+=sGradient[0] * rHessian[0][0] + sGradient[1] * thetaHessian[0][0] + sGradient[2] * phiHessian[0][0];  cHessian[1][0]+=sGradient[0] * rHessian[1][0] + sGradient[1] * thetaHessian[1][0] + sGradient[2] * phiHessian[1][0];  cHessian[2][0]+=sGradient[0] * rHessian[2][0] + sGradient[2] * phiHessian[2][0];  cHessian[1][1]+=sGradient[0] * rHessian[1][1] + sGradient[1] * thetaHessian[1][1] + sGradient[2] * phiHessian[1][1];  cHessian[2][1]+=sGradient[0] * rHessian[2][1] + sGradient[2] * phiHessian[2][1];  cHessian[2][2]+=sGradient[0] * rHessian[2][2] + sGradient[2] * phiHessian[2][2];  cHessian[0][1]=cHessian[1][0];  cHessian[0][2]=cHessian[2][0];  cHessian[1][2]=cHessian[2][1];  return cHessian;}  }
class C{  public static IOFileFilter ageFileFilter(Date cutoffDate,boolean acceptOlder){  return new AgeFileFilter(cutoffDate,acceptOlder);}  }
class C{  public void clear(){  for (  List<Buffer> bufferList : bufferMap.values()) {    bufferList.clear();  }  bufferMap.clear();  count=0;}  }
class C{  @Override public Object clone(){  return new QName(this);}  }
class C{  public CholeskyDecomposition(Matrix Arg){  double[][] A=Arg.getArray();  n=Arg.getRowDimension();  L=new double[n][n];  isspd=(Arg.getColumnDimension() == n);  for (int j=0; j < n; j++) {    double[] Lrowj=L[j];    double d=0.0;    for (int k=0; k < j; k++) {      double[] Lrowk=L[k];      double s=0.0;      for (int i=0; i < k; i++) {        s+=Lrowk[i] * Lrowj[i];      }      Lrowj[k]=s=(A[j][k] - s) / L[k][k];      d=d + s * s;      isspd=isspd & (A[k][j] == A[j][k]);    }    d=A[j][j] - d;    isspd=isspd & (d > 0.0);    L[j][j]=Math.sqrt(Math.max(d,0.0));    for (int k=j + 1; k < n; k++) {      L[j][k]=0.0;    }  }}  }
class C{  public WithinExtended(Expression expression1,Expression expression2){  super(expression1,expression2);}  }
class C{  public static boolean isDUCDoc(String sDocName){  return (new File(sDocName).getName().split("[.]").length == 5);}  }
class C{  public void attachShield(SiegeLocation location){  List<SiegeShield> mapShields=registeredShields.get(location.getTemplate().getWorldId());  if (mapShields == null) {    return;  }  ZoneInstance zone=location.getZone().get(0);  List<SiegeShield> shields=new ArrayList<SiegeShield>();  for (int index=mapShields.size() - 1; index >= 0; index--) {    SiegeShield shield=mapShields.get(index);    Vector3f center=shield.getGeometry().getWorldBound().getCenter();    if (zone.getAreaTemplate().isInside3D(center.x,center.y,center.z)) {      shields.add(shield);      mapShields.remove(index);      Shield sphereShield=sphereShields.get(location.getLocationId());      if (sphereShield != null) {        sphereShields.remove(location.getLocationId());      }      shield.setSiegeLocationId(location.getLocationId());    }  }  if (shields.size() == 0) {  } else {    location.setShields(shields);  }}  }
class C{  public static float[] centroid(float pts[],int len){  float[] c=new float[]{0,0};  for (int i=0; i < len; i+=2) {    c[0]+=pts[i];    c[1]+=pts[i + 1];  }  c[0]/=len / 2;  c[1]/=len / 2;  return c;}  }
class C{  public NewsfeedGetListsQuery listIds(List<Integer> value){  return unsafeParam("list_ids",value);}  }
class C{  @Override public boolean layoutDependsOn(CoordinatorLayout parent,V child,View dependency){  if (dependency instanceof NestedScrollView) {    ((NestedScrollView)dependency).setOnScrollChangeListener(this);    this.parent=parent;  }  return false;}  }
class C{  public static boolean hasNode(String url){  return url2node.containsKey(url);}  }
class C{  public static <E>Stream<E> gate(Stream<E> stream,Predicate<? super E> validator){  Objects.requireNonNull(stream);  Objects.requireNonNull(validator);  GatingSpliterator<E> spliterator=GatingSpliterator.of(stream.spliterator(),validator);  return StreamSupport.stream(spliterator,stream.isParallel()).onClose(null);}  }
class C{  public void createColumnFamilyIfNecessary(ColumnFamilyMetadata metadata,boolean shouldPersist){  ReentrantLock lockForType=namedLock.forName(metadata.getTypeName());  lockForType.lock();  try {    final boolean columnFamilyExists=isColumnFamilyExists(metadata);    if (columnFamilyExists) {      if (metadata != ColumnFamilyMetadataMetadata.INSTANCE) {        metadataCache.addColumnFamilyMetadata(metadata.getTypeName(),metadata);        if (shouldPersist) {          persistColumnFamilyMetadata(metadata);        }      }      return;    }    ThriftCfDef cfDef=(ThriftCfDef)HFactory.createColumnFamilyDefinition(keyspace.getKeyspaceName(),metadata.getColumnFamilyName());    cfDef.setColumnMetadata(new ArrayList<ColumnDefinition>());    cfDef.setDefaultValidationClass(ValidatorClassInferer.getBytesTypeValidationClass());    cfDef.setComparatorType(StringSerializer.get().getComparatorType());    cfDef.setKeyAlias(StringSerializer.get().toByteBuffer(metadata.getKeyName()));    cfDef.setKeyValidationClass(ValidatorClassInferer.infer(metadata.getKeyType()));    cfDef.setComment(metadata.getTypeName());    if (columnFamilyGcGraceSeconds != null) {      cfDef.setGcGraceSeconds(columnFamilyGcGraceSeconds);    }    for (    TypedColumnMetadata columnMetadata : metadata.getColumns().values()) {      String validationClass=ValidatorClassInferer.infer(columnMetadata.getType());      addColumnDefinitionToColumnFamilyDefinition(metadata,cfDef,columnMetadata.getFullName(),validationClass);    }    for (    String index : metadata.getIndexes()) {      if (metadata.getColumns().containsKey(index)) {        continue;      }      String validationClass=ValidatorClassInferer.getBytesTypeValidationClass();      addColumnDefinitionToColumnFamilyDefinition(metadata,cfDef,index,validationClass);    }    if (logger.isInfoEnabled()) {      logger.info("Creating column family: " + metadata);    }    try {      try {        cluster.addColumnFamily(cfDef,true);      } catch (      Exception e) {        if (logger.isInfoEnabled()) {          logger.info("Column family creation failed, " + "waiting " + (SLEEP_BEFORE_RETRY / 1000) + " seconds and then testing to see whether "+ "the column family was already created.",e);        }        Thread.sleep(SLEEP_BEFORE_RETRY);        if (!isColumnFamilyExists(metadata)) {          throw e;        }      }      if (metadata != ColumnFamilyMetadataMetadata.INSTANCE) {        metadataCache.addColumnFamilyMetadata(metadata.getTypeName(),metadata);        if (shouldPersist) {          persistColumnFamilyMetadata(metadata);        }      }    } catch (    Exception e) {      throw new SpaceCassandraSchemaUpdateException("Failed adding column family definition to cassandra",e,true);    }  }  finally {    lockForType.unlock();  }}  }
class C{  public boolean isValidSymbol(){  return !validSymbolMap.values().contains(false);}  }
class C{  synchronized protected boolean removeFromPendingCacheIfEqual(IResource resource,byte[] syncBytes){  byte[] old=(byte[])pendingCacheWrites.get(resource);  if (equals(old,syncBytes)) {    pendingCacheWrites.remove(resource);    return true;  }  return false;}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRANSLATE\"";  db.execSQL(sql);}  }
class C{  public static Style amber(){  final Style style=new Style();  style.color=PaletteUtils.getSolidColor(PaletteUtils.MATERIAL_AMBER);  return style;}  }
class C{  public double[][] extractMainSetJacobian(final ODEState state){  final double[] p=state.getSecondaryState(index);  final double[][] dYdY0=new double[jode.getDimension()][jode.getDimension()];  int j=0;  for (int i=0; i < jode.getDimension(); i++) {    System.arraycopy(p,j,dYdY0[i],0,jode.getDimension());    j+=jode.getDimension();  }  return dYdY0;}  }
class C{  public boolean isLocked(int key){  return toolkit.getLockingKeyState(key);}  }
class C{  @Override public String addSymbol(String symbol){  clean();  int bucket=hash(symbol) % fTableSize;  for (SREntry entry=fBuckets[bucket]; entry != null; entry=entry.next) {    SREntryData data=(SREntryData)entry.get();    if (data == null) {      continue;    }    if (data.symbol.equals(symbol)) {      return data.symbol;    }  }  if (fCount >= fThreshold) {    rehash();    bucket=hash(symbol) % fTableSize;  }  symbol=symbol.intern();  SREntry entry=new SREntry(symbol,fBuckets[bucket],bucket,fReferenceQueue);  fBuckets[bucket]=entry;  ++fCount;  return symbol;}  }
class C{  public static String makeEnumHumanReadable(final String enumName){  StringBuilder builder=new StringBuilder(enumName.length() + 1);  for (  String word : enumName.split("_")) {    if (word.length() <= 2) {      builder.append(word);    } else {      builder.append(word.charAt(0));      builder.append(word.substring(1).toLowerCase());    }    builder.append(' ');  }  return builder.substring(0,enumName.length());}  }
class C{  public ProxyReader(Reader proxy){  super(proxy);}  }
class C{  protected GroupsEditPlaceQuery groupId(int value){  return unsafeParam("group_id",value);}  }
class C{  public static long nextPowerOfTwo(long x){  if (x == 0)   return 1;  x--;  x|=x >> 1;  x|=x >> 2;  x|=x >> 4;  x|=x >> 8;  x|=x >> 16;  return (x | x >> 32) + 1;}  }
class C{  private boolean processWidgets(List<WidgetObject> widgets,String searchingId,boolean isRemove){  Iterator<WidgetObject> iterator=widgets.iterator();  boolean isFound=false;  while (iterator.hasNext()) {    WidgetObject widget=iterator.next();    if (widget.getWidgetId().equalsIgnoreCase(searchingId)) {      if (isRemove) {        iterator.remove();      }      isFound=true;      break;    }  }  return isFound;}  }
class C{  public static double distance(S1Point p1,S1Point p2){  return Vector2D.angle(p1.vector,p2.vector);}  }
class C{  public boolean matchNumericConstant(){  return tok.ttype == StreamTokenizer.TT_NUMBER;}  }
class C{  public ConsistencyLevel clamp(ConsistencyLevel consistencyLevel){  return _topologyAdapter.clamp(consistencyLevel);}  }
class C{  private boolean isValidItemIndex(int index){  return viewAdapter != null && viewAdapter.getItemsCount() > 0 && (isCyclic || index >= 0 && index < viewAdapter.getItemsCount());}  }
class C{  public TransitionClassifierParams(){  minFF=new DoubleParam(this,"minFF","min feature frequency",ParamValidators.gt(0));  setDefault(minFF,2.0);  numFeatures=new IntParam(this,"numFeatures","number of features used in feature hashing",ParamValidators.gt(0));  setDefault(numFeatures,1000);  regParam=new DoubleParam(this,"regParam","regularization parameter",ParamValidators.gtEq(0d));  setDefault(regParam,0.0);  maxIter=new IntParam(this,"maxIter","max number of iterations",ParamValidators.gt(0));  setDefault(maxIter,100);  tolerance=new DoubleParam(this,"tolerance","convergence tolerance of iterations",ParamValidators.gt(0));  setDefault(tolerance,1E-5);}  }
class C{  public E claimAndGetPreallocated(long sequence){  sequencer.claim(sequence);  return get(sequence);}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  execute("compute diversityRatio kmer=25 step=25 mindepth=10;");}  }
class C{  public void enableDashedLine(float lineLength,float spaceLength,float phase){  mDashPathEffect=new DashPathEffect(new float[]{lineLength,spaceLength},phase);}  }
class C{  protected void solvePhase1(final SimplexTableau tableau) throws MathIllegalStateException, MathIllegalStateException, MathIllegalStateException {  if (tableau.getNumArtificialVariables() == 0) {    return;  }  while (!tableau.isOptimal()) {    doIteration(tableau);  }  if (!Precision.equals(tableau.getEntry(0,tableau.getRhsOffset()),0d,epsilon)) {    throw new MathIllegalStateException(LocalizedOptimFormats.NO_FEASIBLE_SOLUTION);  }}  }
class C{  public SwipeBackImplementor(SwipeBackView view){  this.view=view;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_MENTOR_END_BANISH_PARTYMSG(String value0,String worldname1){  return new SM_SYSTEM_MESSAGE(1400768,value0,worldname1);}  }
class C{  @Nullable public static Bitmap toBitmap(@Nullable final View view){  if (view == null) {    return null;  }  final int width=view.getWidth();  final int height=view.getHeight();  final Bitmap bitmapToExport=Bitmap.createBitmap(width > 0 ? width : DEFAULT_BITMAP_WIDTH,height > 0 ? height : DEFAULT_BITMAP_HEIGHT,Bitmap.Config.ARGB_8888);  final Canvas canvas=new Canvas(bitmapToExport);  view.draw(canvas);  return bitmapToExport;}  }
class C{  public static void d(String logMsg){  if (isEnable()) {    log(getCurrentClassName(),getCurrentMethodName() + "(): " + logMsg);  }}  }
class C{  protected void handleResultsResponse(Observable<PreResponse> preResponseObservable,AsyncResponse asyncResponse,ApiRequest apiRequest){  HttpResponseMaker httpResponseMaker=new HttpResponseMaker(objectMappers,dimensionDictionary);  preResponseObservable.flatMap(null).subscribe(new HttpResponseChannel(asyncResponse,httpResponseMaker,apiRequest.getFormat(),apiRequest.getUriInfo()));}  }
class C{  protected DocsGetByIdQuery docs(String... value){  return unsafeParam("docs",value);}  }
class C{  @Override public void onTxEndStatement(Transaction tx){  lockTbl.releaseAll(txNum,true);}  }
class C{  private void initializeReader() throws IOException {  close();  String path=this.csvParserVo.getBlockDetailsList().get(blockCounter).getFilePath();  FileType fileType=FileFactory.getFileType(path);  if (path.endsWith(".gz") || path.endsWith(".bz2")) {    DataInputStream dataInputStream=FileFactory.getDataInputStream(path,fileType,bufferSize);    inputStreamReader=new BufferedReader(new InputStreamReader(dataInputStream));  } else {    long startOffset=this.csvParserVo.getBlockDetailsList().get(blockCounter).getBlockOffset();    long blockLength=this.csvParserVo.getBlockDetailsList().get(blockCounter).getBlockLength();    long endOffset=blockLength + startOffset;    DataInputStream dataInputStream=FileFactory.getDataInputStream(path,fileType,bufferSize,startOffset);    if (startOffset != 0) {      LineReader lineReader=new LineReader(dataInputStream,1);      startOffset+=lineReader.readLine(new Text(),0);    }    inputStreamReader=new BufferedReader(new InputStreamReader(new BoundedDataStream(dataInputStream,endOffset - startOffset)));  }}  }
class C{  public String toString(cp_info constant_pool[]){  return Integer.toString((int)bytes);}  }
class C{  public int size(){  return _count;}  }
class C{  protected AdsGetDemographicsQuery ids(String value){  return unsafeParam("ids",value);}  }
class C{  public void removeAllSliders(){  if (getRealAdapter() != null) {    int count=getRealAdapter().getCount();    getRealAdapter().removeAllSliders();    mViewPager.setCurrentItem(mViewPager.getCurrentItem() + count,false);  }}  }
class C{  @Override public void releaseScan() throws SAException {  try {    if (iterator != null)     iterator.close();  } catch (  Exception ex) {    throw new SAException(ex);  }}  }
class C{  public void removeObserver(AppMenuObserver observer){  mObservers.remove(observer);}  }
class C{  public static boolean isScaleEnabled(){  return scaleEnabled;}  }
class C{  public Iterator tuples(){  return m_tuples.iterator(rows());}  }
class C{  @Override public void publish(String topic,byte[] payload,long timeout) throws AWSIotException, AWSIotTimeoutException {  super.publish(topic,payload,timeout);}  }
class C{  @DataProvider public Object[][] dates(){  String identicalTime=TestUtils.relativeTimeString(5);  return new Object[][]{new Object[]{"present",TestUtils.relativeTimeString(-1),TestUtils.relativeTimeString(1)},new Object[]{"future",TestUtils.relativeTimeString(2),TestUtils.relativeTimeString(4)},new Object[]{"same",identicalTime,identicalTime},new Object[]{"past",TestUtils.relativeTimeString(-4),TestUtils.relativeTimeString(-2)},new Object[]{"endBeforeStart",TestUtils.relativeTimeString(3),TestUtils.relativeTimeString(1)}};}  }
class C{  public TimeColumn selectIf(IntPredicate predicate){  TimeColumn column=emptyCopy();  IntIterator iterator=intIterator();  while (iterator.hasNext()) {    int next=iterator.nextInt();    if (predicate.test(next)) {      column.add(next);    }  }  return column;}  }
class C{  public FieldVector3D<T> add(final T factor,final Vector3D v){  return new FieldVector3D<T>(x.add(factor.multiply(v.getX())),y.add(factor.multiply(v.getY())),z.add(factor.multiply(v.getZ())));}  }
class C{  void checkNormalizationAfterRemove(ChildNode previousSibling){  if (previousSibling != null && previousSibling.getNodeType() == Node.TEXT_NODE) {    ChildNode next=previousSibling.nextSibling;    if (next != null && next.getNodeType() == Node.TEXT_NODE) {      isNormalized(false);    }  }}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  execute("show gapBetweenBars=" + (!isSelected()) + ";");}  }
class C{  public static void i(String tag,String msg){  i(tag,msg,null);}  }
class C{  static public int encode_vA_vM(float vArc,float vMag){  float vArc_nor=vArc / TWO_PI;  int vArc_I16=(int)(vArc_nor * (0xFFFF - 1)) & 0xFFFF;  int vMag_I16=(int)(vMag) & 0xFFFF;  return vMag_I16 << 16 | vArc_I16;}  }
class C{  @Override public int hashCode(){  final int prime=31;  int result=1;  long temp;  temp=Double.doubleToLongBits(x);  result=prime * result + (int)(temp ^ (temp >>> 32));  temp=Double.doubleToLongBits(y);  result=prime * result + (int)(temp ^ (temp >>> 32));  return result;}  }
class C{  public boolean contains(E comparable){  if (comparable == null)   return false;  if (this.root == null)   return false;  return this.contains(this.root,comparable) != null;}  }
class C{  private IJSpace findSpace(String spaceURL) throws JMSException {  IJSpace spaceProxy=null;  try {    spaceProxy=(IJSpace)SpaceFinder.find(spaceURL);    if (_logger.isLoggable(Level.INFO)) {      _logger.info("GSJMSAdmin.findSpace() Found space <" + spaceProxy.getName() + "> "+ " using SpaceURL: "+ spaceURL);    }  } catch (  FinderException ex) {    ResourceAllocationException rae=new ResourceAllocationException("GSJMSAdmin - ERROR: Could not find space: " + spaceURL + ex.toString()+ "\n");    rae.setLinkedException(ex);    throw rae;  }  return spaceProxy;}  }
class C{  public void actionPerformed(ActionEvent ev){  execute("set nodeShape=circle;");}  }
class C{  public PSVIElementNSImpl(CoreDocumentImpl ownerDocument,String namespaceURI,String qualifiedName){  super(ownerDocument,namespaceURI,qualifiedName);}  }
class C{  public static int randomNumberBetween(double begin,double end,RandomGenerator rng){  if (begin > end)   throw new IllegalArgumentException("Begin must not be less than end");  return (int)begin + (int)(rng.nextDouble() * ((end - begin) + 1));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GUILD_CHANGE_MASTER_DONE(String value0){  return new SM_SYSTEM_MESSAGE(1300273,value0);}  }
class C{  public UnsupportedConstraintException(String s){  super(s);}  }
class C{  protected boolean scanSurrogates(XMLStringBuffer buf) throws IOException, XNIException {  int high=fEntityScanner.scanChar();  int low=fEntityScanner.peekChar();  if (!XMLChar.isLowSurrogate(low)) {    reportFatalError("InvalidCharInContent",new Object[]{Integer.toString(high,16)});    return false;  }  fEntityScanner.scanChar();  int c=XMLChar.supplemental((char)high,(char)low);  if (isInvalid(c)) {    reportFatalError("InvalidCharInContent",new Object[]{Integer.toString(c,16)});    return false;  }  buf.append((char)high);  buf.append((char)low);  return true;}  }
class C{  public void addNewConnectionNode(GeoServerConnection connection,GeoServerNode node){  nodeMap.put(connection,node);  populateStateMap.put(connection,new PopulateState());}  }
class C{  public static boolean isNCNameStart(int c){  return c < 0x10000 && (CHARS[c] & MASK_NCNAME_START) != 0;}  }
class C{  public TerminationStatus(int waitResult){  this.waitResult=waitResult;}  }
class C{  ServerRequest(RequestTypeOuterClass.RequestType type,RequestOuterClass.Request request){  this.request=request;  this.type=type;}  }
class C{  @Override public LSInput item(int index){  if (index < 0 || index >= fLength) {    return null;  }  return fArray[index];}  }
class C{  public void onDown(long time,float x,float y,boolean fromMouse,int buttons){  if (mModelSelectorButton.onDown(x,y))   return;  getActiveStripLayoutHelper().onDown(time,x,y,fromMouse,buttons);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public static void main(String[] sArgs){  TAC2008UpdateSummarizationFileSet t=new TAC2008UpdateSummarizationFileSet("/home/ggianna/JInsect/TAC2008/UpdateSumm08_test_docs_files/");  t.createSets();  System.err.println("Training set:");  System.err.println(utils.printIterable(t.getTrainingSet(),"\n"));  System.err.println("Training set:");  System.err.println(utils.printIterable(t.getTestSet(),"\n"));  System.err.println("Per category:");  for (  String sCategory : (List<String>)t.getCategories()) {    System.err.println(utils.printIterable(t.getFilesFromCategory(sCategory),"\n"));  }  String sLastCat=(String)t.getCategories().get(t.getCategories().size() - 1);  String sFile=((CategorizedFileEntry)t.getFilesFromCategory(sLastCat).get(0)).getFileName();  System.out.println(t.loadFile(sFile));}  }
class C{  public boolean selectedPicture(String headerName){  Intent intent=new Intent(Intent.ACTION_PICK,android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);  intent.setType("image/*");  this.activity.startActivityForResult(Intent.createChooser(intent,(!headerName.equals("") ? headerName : "Magical Camera")),SELECT_PHOTO);  return true;}  }
class C{  private void calcStackSize(List<BarEntry> yVals){  for (int i=0; i < yVals.size(); i++) {    float[] vals=yVals.get(i).getVals();    if (vals != null && vals.length > mStackSize)     mStackSize=vals.length;  }}  }
class C{  private void initSpring(ServletContext servletContext,AnnotationConfigWebApplicationContext rootContext){  log.debug("Configuring Spring Web application context");  AnnotationConfigWebApplicationContext dispatcherServletConfiguration=new AnnotationConfigWebApplicationContext();  dispatcherServletConfiguration.setParent(rootContext);  dispatcherServletConfiguration.register(DispatcherServletConfiguration.class);  log.debug("Registering Spring MVC Servlet");  ServletRegistration.Dynamic dispatcherServlet=servletContext.addServlet("dispatcher",new DispatcherServlet(dispatcherServletConfiguration));  dispatcherServlet.addMapping("/app/*");  dispatcherServlet.setLoadOnStartup(1);}  }
class C{  @Override public BigDecimal unmarshal(final String v) throws Exception {  if (v != null && v.trim().length() > 0) {    return new BigDecimal(v);  }{    return null;  }}  }
class C{  public static Color toColour(String htmlColour){  Color colour=null;  if (validColourString(htmlColour)) {    colour=SLD.toColor(htmlColour);  }  return colour;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Search_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201017,skilltarget,skillcaster,skillname);}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  final ChartViewer viewer=(ChartViewer)getViewer();  final LabelsJList list=viewer.getActiveLabelsJList();  previousValue=Math.min(list.getAllLabels().size(),previousValue);  final String result=JOptionPane.showInputDialog(viewer.getFrame(),"Set number of top items to select",previousValue);  if (result != null && Basic.isInteger(result)) {    execute("select top='" + result + "';");    previousValue=Basic.parseInt(result);  }}  }
class C{  public void releaseAll(){  controller.mouseRelease(InputEvent.BUTTON1_MASK);  controller.mouseRelease(InputEvent.BUTTON2_MASK);  controller.mouseRelease(InputEvent.BUTTON3_MASK);}  }
class C{  public boolean avoid_deadlock(){  return soot.PhaseOptions.getBoolean(options,"avoid-deadlock");}  }
class C{  public boolean isDrawSlicesUnderHoleEnabled(){  return mDrawSlicesUnderHole;}  }
class C{  public void makeOneTimeUse(){  used=new AtomicBoolean(false);}  }
class C{  @ObjectiveCName("join:") private static String join(String[] list){  StringBuilder sb=new StringBuilder();  for (int i=0; i < list.length; i++) {    if (i == list.length - 1) {      sb.append(list[i]);    } else {      sb.append(list[i]);      sb.append(MessageBuilder.MPS);    }  }  return sb.toString();}  }
class C{  public static void pickImage(Context context,android.support.v4.app.Fragment fragment){  pickImage(context,fragment,REQUEST_PICK);}  }
class C{  protected void cancelButtonPressed(){  setVisible(false);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Blind_END_A_TO_B(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200901,skilltarget);}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  protected T[][] copy(final T[][] original){  if (original == null) {    return null;  }  final T[][] copied=MathArrays.buildArray(time.getField(),original.length,-1);  for (int i=0; i < original.length; ++i) {    copied[i]=original[i].clone();  }  return copied;}  }
class C{  public long writeTo(DataOutput output) throws IOException {  long nBytes=0;  assert this.hasLegalType() : "Unknown Mary file type [" + type + "].";  output.writeInt(magic);  nBytes+=4;  output.writeInt(version);  nBytes+=4;  output.writeInt(type);  nBytes+=4;  return (nBytes);}  }
class C{  public static ByteBuffer readFile(File file) throws IOException {  FileInputStream fis=new FileInputStream(file);  FileChannel fc=fis.getChannel();  ByteBuffer readBuffer=ByteBuffer.allocate((int)fc.size());  fc.read(readBuffer);  fis.close();  readBuffer.rewind();  return readBuffer;}  }
class C{  @Override public Class<? extends Task> taskClass(){  return PostgreSQLSinkTask.class;}  }
class C{  private void doIndent() throws XMLStreamException {  if (depth > 0) {    for (int i=0; i < depth; i++)     super.writeCharacters(indentStep);  }}  }
class C{  public static Bitmap punchARoundedHoleInABitmap(Context context,int screenWidth,int screenHeight,int x,int y,int holeDiameter,int backgroundColor){  Bitmap bitmap=Bitmap.createBitmap(screenWidth,screenHeight,Bitmap.Config.ARGB_8888);  Canvas canvas=new Canvas(bitmap);  Paint paint=new Paint();  paint.setAntiAlias(true);  canvas.drawColor(context.getResources().getColor(backgroundColor));  paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));  canvas.drawCircle(x + holeDiameter / 2,y + holeDiameter / 2,holeDiameter / 2,paint);  return bitmap;}  }
class C{  public boolean endOfStream(){  return finished;}  }
class C{  @NonNull public Optional<T> or(@NonNull Optional<T> alternative){  return isDefined() ? this : alternative;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CANT_USE_ITEM(DescriptionId value0){  return new SM_SYSTEM_MESSAGE(1300393,value0);}  }
class C{  public AxisLabelLayout(String group,int axis,ValuedRangeModel values){  this(group,axis,values,null);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_InteralSkill_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201273,skillcaster,skillname);}  }
class C{  private boolean subsumes(String selector,String other){  if (selector.equals("*")) {    return true;  }  if (other.equals("*")) {    return false;  }  if (selector.endsWith(".*")) {    selector=selector.substring(0,selector.length() - 1);    if (other.endsWith(".*")) {      other=other.substring(0,other.length() - 1);    }    if (ConfigRuleSet.this.maintainSelectorMinimizationBugExperimentEnabled()) {      return selector.startsWith(other);    } else {      return other.startsWith(selector);    }  }  return selector.equals(other);}  }
class C{  public static LikesAttributesImpl empty(){  return new LikesAttributesImpl();}  }
class C{  public Infoflow(String androidPath,boolean forceAndroidJar,BiDirICFGFactory icfgFactory,IPathBuilderFactory pathBuilderFactory){  super(icfgFactory);  this.androidPath=androidPath;  this.forceAndroidJar=forceAndroidJar;  this.pathBuilderFactory=pathBuilderFactory;}  }
class C{  public SDTTimeDeadbandScheduler(final SourceDataTag sourceDataTag,final IProcessMessageSender processMessageSender,final EquipmentSenderFilterModule equipmentSenderFilterModule,final Timer timeDeadbandTimer,final DataTagValueFilter dataTagValueFilter,final IDynamicTimeDeadbandFilterer dynamicTimeDeadbandFilterer){  this.dataTagValueFilter=dataTagValueFilter;  this.processMessageSender=processMessageSender;  this.equipmentSenderFilterModule=equipmentSenderFilterModule;  this.dynamicTimeDeadbandFilterer=dynamicTimeDeadbandFilterer;  this.timeDeadbandTimer=timeDeadbandTimer;  if (LOGGER.isDebugEnabled()) {    LOGGER.debug("creating time-deadband scheduler for tag : " + sourceDataTag.getId());  }  this.sourceDataTag=sourceDataTag;}  }
class C{  private List<EnvVar> extractEnvironmentVariables(Document document,String elementName){  List<EnvVar> list=new ArrayList<EnvVar>();  NodeList nodeList=document.getElementsByTagName(elementName);  for (int index=0; index < nodeList.getLength(); index++) {    Element element=(Element)nodeList.item(index);    Class<?> type=null;    try {      type=Class.forName(element.getAttribute(ENVVAR_TYPE_ATTRIBUTE));    } catch (    ClassNotFoundException e) {      ConsoleManager.getInstance().exception(this,e);    }    EnvVar envVar=new EnvVar(element.getAttribute(ENVVAR_NAME_ATTRIBUTE),type,false);    if (element.hasAttribute(ENVVAR_VALUE_ATTRIBUTE)) {      envVar.setValue(element.getAttribute(ENVVAR_VALUE_ATTRIBUTE));    }    list.add(envVar);  }  return list;}  }
class C{  public DocumentProperties(Map<String,Object> properties){  this._map=CollectionsFactory.getInstance().createMap(properties != null ? properties : EMPTY_PROPERTIES);}  }
class C{  public AemContentFinder resize(int widthInPixels){  if (widthInPixels <= 0) {    collapse();  } else {    if (isCollapsed()) {      expand();    }    Draggable dragable=factory.createDraggable(resizerDiv,framePath);    dragable.dropByOffset(widthInPixels - getCurrentWidth(),0);    bobcatWait.withTimeout(Timeouts.MEDIUM).until(ExpectedConditions.invisibilityOfElementLocated(By.xpath(SHOWN_DURING_MOUSE_DRAG_DIV)));  }  return this;}  }
class C{  public void __setDaoSession(DaoSession daoSession){  this.daoSession=daoSession;  myDao=daoSession != null ? daoSession.getFileModelDao() : null;}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public static byte[] decode(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,DECODABET);}  }
class C{  public void toggleSelection(final int position){  if (mSelectedItems.get(position,false)) {    mSelectedItems.delete(position);  } else {    mSelectedItems.put(position,true);  }  notifyItemChanged(position);}  }
class C{  private static void inferConstraints(WidgetContainer base){  if (base == null) {    return;  }  if (base instanceof ConstraintWidgetContainer && ((ConstraintWidgetContainer)base).handlesInternalConstraints()) {    return;  }  int preX=base.getX();  int preY=base.getY();  base.setX(0);  base.setY(0);  for (  ConstraintWidget constraintWidget : base.getChildren()) {    if (constraintWidget instanceof ConstraintWidgetContainer) {      ConstraintWidgetContainer container=(ConstraintWidgetContainer)constraintWidget;      if (!container.getChildren().isEmpty()) {        inferConstraints(container);      }    }  }  ArrayList<ConstraintWidget> list=new ArrayList<>(base.getChildren());  list.add(0,base);  ConstraintWidget[] widgets=list.toArray(new ConstraintWidget[list.size()]);  ScoutWidget.computeConstraints(ScoutWidget.create(widgets));  base.setX(preX);  base.setY(preY);}  }
class C{  public static final void main(String[] args){  System.out.println("dyn4j v" + Version.getVersion());}  }
class C{  static double logBinomialProbability(int x,int n,double p,double q){  if (n == 0) {    return x == 0 ? 0d : Double.NEGATIVE_INFINITY;  }  if (x == 0) {    if (p < 0.1) {      return -getDeviancePart(n,n * q) - n * p;    } else {      return n * FastMath.log(q);    }  } else   if (x == n) {    if (q < 0.1) {      return -getDeviancePart(n,n * p) - n * q;    } else {      return n * FastMath.log(p);    }  } else {    double ret=getStirlingError(n) - getStirlingError(x) - getStirlingError(n - x)- getDeviancePart(x,n * p)- getDeviancePart(n - x,n * q);    double f=(MathUtils.TWO_PI * x * (n - x)) / n;    ret=-0.5 * FastMath.log(f) + ret;    return ret;  }}  }
class C{  @Override public void decl(char[] buff,int offset,int length) throws SAXException {  String s=new String(buff,offset,length);  String name=null;  String systemid=null;  String publicid=null;  String[] v=split(s);  if (v.length > 0 && "DOCTYPE".equalsIgnoreCase(v[0])) {    if (theDoctypeIsPresent)     return;    theDoctypeIsPresent=true;    if (v.length > 1) {      name=v[1];      if (v.length > 3 && "SYSTEM".equals(v[2])) {        systemid=v[3];      } else       if (v.length > 3 && "PUBLIC".equals(v[2])) {        publicid=v[3];        if (v.length > 4) {          systemid=v[4];        } else {          systemid="";        }      }    }  }  publicid=trimquotes(publicid);  systemid=trimquotes(systemid);  if (name != null) {    publicid=cleanPublicid(publicid);    theLexicalHandler.startDTD(name,publicid,systemid);    theLexicalHandler.endDTD();    theDoctypeName=name;    theDoctypePublicId=publicid;    if (theScanner instanceof Locator) {      theDoctypeSystemId=((Locator)theScanner).getSystemId();      try {        theDoctypeSystemId=new URL(new URL(theDoctypeSystemId),systemid).toString();      } catch (      Exception ignore) {      }    }  }}  }
class C{  public static void show(Context context){  show(context,null,false);}  }
class C{  public char next(){  return pos < in.length() ? in.charAt(pos++) : '\0';}  }
class C{  public ReadModifiers(ReadModifiers modifiers1,ReadModifiers modifiers2,ReadModifiers modifiers3){  super(modifiers1,modifiers2,modifiers3);}  }
class C{  public List<Product> loadProducts(List<Supplier> suppliers){  EntityManager em=emf.createEntityManager();  TypedQuery<Product> queryProd;  List<Product> resProd=null;  try {    em.getTransaction().begin();    queryProd=em.createQuery("SELECT p FROM Product p",Product.class);    resProd=queryProd.getResultList();    if (resProd.size() > 5) {      logger.info(resProd.size() + " Products already available in the db");    } else {      new XMLParser().readProduct(em,"com/sap/espm/model/data/Products.xml",suppliers);      em.getTransaction().commit();      queryProd=em.createQuery("SELECT p FROM Product p",Product.class);      resProd=queryProd.getResultList();      logger.info(resProd.size() + " Products loaded into the db");    }  } catch (  Exception e) {    logger.error("Exception occured",e);  } finally {    em.close();  }  return resProd;}  }
class C{  public Stream<Entry<Tags,MetricValue>> streamAsMap(){  return streamAsMap(Tags.EMPTY);}  }
class C{  public void removeFifoXtnInfoForEntry(IEntryHolder eh){  FifoXtnEntryInfo Xe=new FifoXtnEntryInfo(eh.getUID(),eh.getSCN(),eh.getOrder());  _terminatingXtnsEntries.remove(Xe);}  }
class C{  public static <S,K>Collector<S,?,LinkedHashMap<K,S>> toLinkedDictionary(Function<? super S,? extends K> keyMapper){  return Collectors.toMap(keyMapper,Function.identity(),StreamUtils.throwingMerger(),null);}  }
class C{  @deprecated public final TimeZone parse(String text,ParsePosition pos){  return parse(Style.GENERIC_LOCATION,text,pos,true,null);}  }
class C{  public boolean onOverrideUrlLoading(String url){  return false;}  }
class C{  @Override public boolean hasAttributes(){  if (needsSyncData()) {    synchronizeData();  }  return (attributes != null && attributes.getLength() != 0);}  }
class C{  public void init$Children(){  children=new ASTNode[1];}  }
class C{  public static void closeDocument(Document document){  if (document.isOpen()) {    document.close();  }}  }
class C{  public static Edit fromString(String string) throws IOException {  return parse(new NexusStreamParser(new StringReader(string)));}  }
class C{  @POST @Consumes({MediaType.APPLICATION_JSON,"application/x.json-deltas"}) @Timed(name="bv.emodb.sor.DataStoreResource1.simpleUpdateStream",absolute=true) @ApiOperation(value="Imports an arbitrary size stream of deltas and/or JSON objects",notes="Imports an arbitrary size stream of deltas and/or JSON objects.  Two formats are supported: array syntax\n" + "     * ('[' object ',' object ',' ... ']') and whitespace-separated objects (object whitespace object whitespace ...)\n" + "     * Each piece of content must have top-level \"~id\" and \"~table\" attributes that determines the table and object\n"+ "     * key in the SoR.",response=SuccessResponse.class) public SuccessResponse simpleUpdateStream(@QueryParam("changeId") TimeUUIDParam changeIdParam,@QueryParam("audit") AuditParam auditParam,@QueryParam("consistency") @DefaultValue("STRONG") WriteConsistencyParam consistencyParam,@QueryParam("facade") BooleanParam facade,@Authenticated Subject subject,Reader in){  return doSimpleUpdateStream(Optional.<String>absent(),changeIdParam,auditParam,consistencyParam,in,facade,subject);}  }
class C{  public DatagramDoubleDataSource(Datagram[] datagrams){  super((DoubleDataSource)null);  this.datagrams=new LinkedList<Datagram>();  dataLength=0;  for (int i=0; i < datagrams.length; i++) {    dataLength+=datagrams[i].getDuration();    this.datagrams.add(datagrams[i]);  }}  }
class C{  @Override public void printStackTrace(java.io.PrintStream s){  printStackTrace(new java.io.PrintWriter(s));}  }
class C{  @Override public void preload(){  clusterCache.acquireReadLockOnKey(aliveStatusInitialized);  try {    preloadBuffer=fillBufferFromDB();    if (preloadBuffer != null) {      LOGGER.debug("Loading the cache from the buffer...");      loadCacheFromBuffer(preloadBuffer);      LOGGER.debug("\t...done");    } else {      LOGGER.error("Attempt to call loadCacheFromBuffer with null buffer: " + "this should not happen and needs investigating!");    }  }  finally {    clusterCache.releaseReadLockOnKey(aliveStatusInitialized);  }}  }
class C{  public SecureSendNotificationQuery sendNotification(ServiceActor actor,String message){  return new SecureSendNotificationQuery(getClient(),actor,message);}  }
class C{  public ByteColumn(int nrows,int capacity,byte defaultValue){  super(byte.class,new Byte(defaultValue));  if (capacity < nrows) {    throw new IllegalArgumentException("Capacity value can not be less than the row count.");  }  m_values=new byte[capacity];  Arrays.fill(m_values,defaultValue);  m_size=nrows;}  }
class C{  private Bitmap addThumbnailToCache(String imageKey,Bitmap bitmap,String path,int px){  Bitmap thumbnail=ThumbnailUtils.extractThumbnail(bitmap,px,px);  thumbnail=BitmapUtils.rotateImage(thumbnail,path);  addBitmapToCache(imageKey,thumbnail);  return thumbnail;}  }
class C{  public void makeAlignment(String matchRefLine,Alignment alignment,boolean showInsertions,ProgressListener progressListener) throws IOException, CanceledException {  alignment.clear();  alignment.setName(className);switch (getBlastType()) {case BLASTX:    alignment.setReferenceType(Alignment.PROTEIN);  alignment.setSequenceType(Alignment.cDNA);break;case BLASTP:alignment.setReferenceType(Alignment.PROTEIN);alignment.setSequenceType(Alignment.PROTEIN);break;case BLASTN:alignment.setReferenceType(Alignment.DNA);alignment.setSequenceType(Alignment.DNA);break;}int totalReadsIn=0;int totalReadsOut=0;int totalErrors=0;final List<byte[][]> readMatchPairs=reference2ReadMatchPairs.get(matchRefLine);progressListener.setMaximum(readMatchPairs.size());progressListener.setProgress(0);final Single<char[]> referenceSequence=new Single<>();final Single<char[]> originalReferenceSequence=new Single<>();final SortedMap<Integer,Collection<Pair<Integer,String>>> pos2Insertions=new TreeMap<>();Integer which=0;for (byte[][] readMatchPair : readMatchPairs) {String readHeader=Basic.toString(readMatchPair[0]);String readSequence=Basic.toString(readMatchPair[1]);String matchText=Basic.toString(readMatchPair[2]);totalReadsIn++;if (getBlastType().equals(UNKNOWN)) setBlastType(guessBlastType(matchText));switch (getBlastType()) {case BLASTX:alignment.setReferenceType(Alignment.PROTEIN);alignment.setSequenceType(Alignment.cDNA);break;case BLASTP:alignment.setReferenceType(Alignment.PROTEIN);alignment.setSequenceType(Alignment.PROTEIN);break;case BLASTN:alignment.setReferenceType(Alignment.DNA);alignment.setSequenceType(Alignment.DNA);break;}try {Collection<Pair<Integer,String>> insertions=new LinkedList<>();switch (getBlastType()) {case BLASTX:computeGappedSequenceBlastX(readHeader,readSequence,matchText,insertions,showInsertions,referenceSequence,originalReferenceSequence,alignment);break;case BLASTP:computeGappedSequenceBlastP(readHeader,readSequence,matchText,insertions,showInsertions,referenceSequence,alignment);break;case BLASTN:computeGappedSequenceBlastN(readHeader,readSequence,matchText,insertions,showInsertions,referenceSequence,alignment);break;}totalReadsOut++;for (Pair<Integer,String> insertion : insertions) {Collection<Pair<Integer,String>> list=pos2Insertions.get(insertion.getFirst());if (list == null) {list=new LinkedList<>();pos2Insertions.put(insertion.getFirst(),list);}list.add(new Pair<>(which,insertion.getSecond()));}which++;} catch (Exception ex) {Basic.caught(ex);System.err.println("Error: " + ex);totalErrors++;}progressListener.incrementProgress();}if (referenceSequence.get() != null) {int originalLength=referenceSequence.get().length;int trueLength=referenceSequence.get().length;while (trueLength > 0 && referenceSequence.get()[trueLength - 1] == 0) {if (alignment.getReferenceType().equals(Alignment.PROTEIN) && trueLength > 2 && referenceSequence.get()[trueLength - 3] != 0) break;trueLength--;}if (trueLength < originalLength) {referenceSequence.set(Arrays.copyOf(referenceSequence.get(),trueLength));alignment.trimToTrueLength(trueLength);}for (int i=0; i < referenceSequence.get().length; i++) {if (referenceSequence.get()[i] == 0) referenceSequence.get()[i]=' ';}alignment.setReference(matchRefLine,new String(referenceSequence.get()));if (originalReferenceSequence.get() != null) alignment.setOriginalReference(new String(originalReferenceSequence.get()));}if (showInsertions && pos2Insertions.size() > 0) {addInsertionsToAlignment(pos2Insertions,alignment,progressListener);}if (totalReadsIn != totalReadsOut) {System.err.println("Reads in: " + totalReadsIn);System.err.println("Reads out: " + totalReadsOut);}if (totalErrors > 0) System.err.println("Errors: " + totalErrors);}  }
class C{  public static final void drawRectangleFromStartToEnd(GL2 gl,double sx,double sy,double ex,double ey,boolean points){  gl.glBegin(GL.GL_LINE_LOOP);  gl.glVertex2d(sx,sy);  gl.glVertex2d(ex,sy);  gl.glVertex2d(ex,ey);  gl.glVertex2d(sx,ey);  gl.glEnd();  if (points) {    gl.glBegin(GL.GL_POINTS);    gl.glVertex2d(sx,sy);    gl.glVertex2d(ex,sy);    gl.glVertex2d(ex,ey);    gl.glVertex2d(sx,ey);    gl.glEnd();  }}  }
class C{  public static Intent makeInitIntent(Context context){  Intent i=new Intent(context,FileObserverService.class);  i.setAction(ACTION_START_OBSERVE);  return i;}  }
class C{  protected void computeAxisValues(float min,float max){  float yMin=min;  float yMax=max;  int labelCount=mYAxis.getLabelCount();  double range=Math.abs(yMax - yMin);  if (labelCount == 0 || range <= 0) {    mYAxis.mEntries=new float[]{};    mYAxis.mEntryCount=0;    return;  }  double rawInterval=range / labelCount;  double interval=Utils.roundToNextSignificant(rawInterval);  if (mYAxis.isGranularityEnabled())   interval=interval < mYAxis.getGranularity() ? mYAxis.getGranularity() : interval;  double intervalMagnitude=Utils.roundToNextSignificant(Math.pow(10,(int)Math.log10(interval)));  int intervalSigDigit=(int)(interval / intervalMagnitude);  if (intervalSigDigit > 5) {    interval=Math.floor(10 * intervalMagnitude);  }  if (mYAxis.isForceLabelsEnabled()) {    float step=(float)range / (float)(labelCount - 1);    mYAxis.mEntryCount=labelCount;    if (mYAxis.mEntries.length < labelCount) {      mYAxis.mEntries=new float[labelCount];    }    float v=min;    for (int i=0; i < labelCount; i++) {      mYAxis.mEntries[i]=v;      v+=step;    }  } else {    if (mYAxis.isShowOnlyMinMaxEnabled()) {      mYAxis.mEntryCount=2;      mYAxis.mEntries=new float[2];      mYAxis.mEntries[0]=yMin;      mYAxis.mEntries[1]=yMax;    } else {      double first=interval == 0.0 ? 0.0 : Math.ceil(yMin / interval) * interval;      double last=interval == 0.0 ? 0.0 : Utils.nextUp(Math.floor(yMax / interval) * interval);      double f;      int i;      int n=0;      if (interval != 0.0) {        for (f=first; f <= last; f+=interval) {          ++n;        }      }      mYAxis.mEntryCount=n;      if (mYAxis.mEntries.length < n) {        mYAxis.mEntries=new float[n];      }      for (f=first, i=0; i < n; f+=interval, ++i) {        if (f == 0.0)         f=0.0;        mYAxis.mEntries[i]=(float)f;      }    }  }  if (interval < 1) {    mYAxis.mDecimals=(int)Math.ceil(-Math.log10(interval));  } else {    mYAxis.mDecimals=0;  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_Recall_CANCEL_EFFECT(String value0){  return new SM_SYSTEM_MESSAGE(1400101,value0);}  }
class C{  @Override public void fatalError(SAXParseException e) throws SAXException {  throw e;}  }
class C{  public static String formatCurrency(BigDecimal price,String isoCode,Locale locale,int maximumFractionDigits){  return formatCurrency(price.doubleValue(),isoCode,locale,maximumFractionDigits);}  }
class C{  public boolean selectOnRubberBand(Rectangle rectangle,MouseEvent mouseEvent,ChartSelection chartSelection){  if (mouseEvent.isControlDown())   return false;  if (!mouseEvent.isShiftDown())   chartSelection.clearSelectionAttributes();  final SelectionGraphics<String[]> selectionGraphics=new SelectionGraphics<>(getGraphics());  selectionGraphics.setSelectionRectangle(rectangle);  selectionGraphics.setShiftDown(mouseEvent.isShiftDown());  selectionGraphics.setMouseClicks(mouseEvent.getClickCount());  if (this instanceof BubbleChartDrawer) {    ((BubbleChartDrawer)ChartDrawerBase.this).drawYAxis(selectionGraphics,null);  }  if (this instanceof HeatMapDrawer) {    ((HeatMapDrawer)ChartDrawerBase.this).drawYAxis(selectionGraphics,null);  }  if (transpose)   drawChartTransposed(selectionGraphics); else   drawChart(selectionGraphics);  final Set<String> seriesToSelect=new HashSet<>();  final Set<String> classesToSelect=new HashSet<>();  final Set<String> attributesToSelect=new HashSet<>();  int count=0;  int size=selectionGraphics.getSelectedItems().size();  for (  String[] seriesClassAttribute : selectionGraphics.getSelectedItems()) {    if (selectionGraphics.getUseWhich() == SelectionGraphics.Which.Last && count++ < size - 1)     continue;    if (seriesClassAttribute[0] != null) {      seriesToSelect.add(seriesClassAttribute[0]);    }    if (seriesClassAttribute[1] != null) {      classesToSelect.add(seriesClassAttribute[1]);    }    if (seriesClassAttribute.length >= 3 && seriesClassAttribute[2] != null) {      attributesToSelect.add(seriesClassAttribute[2]);    }    if (selectionGraphics.getUseWhich() == SelectionGraphics.Which.First)     break;  }  if (seriesToSelect.size() > 0) {    chartSelection.toggleSelectedSeries(seriesToSelect);  }  if (classesToSelect.size() > 0)   chartSelection.toggleSelectedClasses(classesToSelect);  if (attributesToSelect.size() > 0)   chartSelection.toggleSelectedAttributes(attributesToSelect);  return seriesToSelect.size() > 0 || classesToSelect.size() > 0 || attributesToSelect.size() > 0;}  }
class C{  public Calculable(String id,double value,long when){  this(id,value);  setWhen(when);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SOUL_BOUND_ITEM_SUCCEED(int value0){  return new SM_SYSTEM_MESSAGE(1300485,new DescriptionId(value0));}  }
class C{  public void shutdown() throws DataSourceException {  if (createdSessionFactory) {    if (sessionFactory != null && !sessionFactory.isClosed()) {      try {        sessionFactory.close();      }  finally {        sessionFactory=null;      }    }  }}  }
class C{  @Override public int hashCode(){  int result=carbonTableIdentifier.hashCode();  result=31 * result + columnIdentifier.hashCode();  return result;}  }
class C{  public VideoCreateCommentQuery guid(String value){  return unsafeParam("guid",value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GIVE_ITEM_PROC_INVALID_STANCE(String value0){  return new SM_SYSTEM_MESSAGE(1300509,value0);}  }
class C{  public StorageSetQuery userId(Integer value){  return unsafeParam("user_id",value);}  }
class C{  public TIntArrayList grep(TIntProcedure condition){  TIntArrayList list=new TIntArrayList();  for (int i=0; i < _pos; i++) {    if (condition.execute(_data[i])) {      list.add(_data[i]);    }  }  return list;}  }
class C{  protected boolean shouldStartDeserialization(int currentState){  return isNativeInitialized() && currentState == STATE_LOAD_TAB_STATE_BG_END;}  }
class C{  public static void xml(String xml){  printer.xml(xml);}  }
class C{  public AdsGetTargetGroupsQuery extended(Boolean value){  return unsafeParam("extended",value);}  }
class C{  public boolean add(E o){  return innerChain.add(o);}  }
class C{  @Override public double[] makeInverseCumulativeTestPoints(){  return new double[]{0d,0.001d,0.010d,0.025d,0.050d,0.3413d,0.3415d,0.999d,0.990d,0.975d,0.950d,0.900d,1d};}  }
class C{  public static void assertChiSquareAccept(String[] valueLabels,double[] expected,long[] observed,double alpha){  if (chiSquareTest(expected,observed) <= alpha) {    StringBuilder msgBuffer=new StringBuilder();    DecimalFormat df=new DecimalFormat("#.##");    msgBuffer.append("Chisquare test failed");    msgBuffer.append(" p-value = ");    msgBuffer.append(chiSquareTest(expected,observed));    msgBuffer.append(" chisquare statistic = ");    msgBuffer.append(chiSquare(expected,observed));    msgBuffer.append(". \n");    msgBuffer.append("value\texpected\tobserved\n");    for (int i=0; i < expected.length; i++) {      msgBuffer.append(valueLabels[i]);      msgBuffer.append("\t");      msgBuffer.append(df.format(expected[i]));      msgBuffer.append("\t\t");      msgBuffer.append(observed[i]);      msgBuffer.append("\n");    }    msgBuffer.append("This test can fail randomly due to sampling error with probability ");    msgBuffer.append(alpha);    msgBuffer.append(".");    Assert.fail(msgBuffer.toString());  }}  }
class C{  public boolean put(String columnIdentifier,Cacheable cacheInfo,long requiredSize){  boolean columnKeyAddedSuccessfully=false;  if (freeMemorySizeForAddingCache(requiredSize)) {synchronized (lruCacheMap) {      currentSize=currentSize + requiredSize;      if (null == lruCacheMap.get(columnIdentifier)) {        lruCacheMap.put(columnIdentifier,cacheInfo);      }      columnKeyAddedSuccessfully=true;    }    LOGGER.debug("Added level entry to InMemory level lru cache :: " + columnIdentifier);  } else {    LOGGER.error("Size not available. Column cannot be added to level lru cache :: " + columnIdentifier + " .Required Size = "+ requiredSize+ " Size available "+ (lruCacheMemorySize - currentSize));  }  return columnKeyAddedSuccessfully;}  }
class C{  private long factorial(int n){  long result=1;  for (int i=2; i <= n; i++) {    result*=i;  }  return result;}  }
class C{  @Override public List<User> searchUser(User user){  return sessionTemplate.selectList(NAMESPACE + ".searchUser",user);}  }
class C{  public AdsGetAccountsQuery(VkApiClient client,UserActor actor){  super(client,"ads.getAccounts",Utils.buildParametrizedType(List.class,Account.class));  accessToken(actor.getAccessToken());}  }
class C{  private void showDialog(JTextComponent target){  if (dlg == null) {    dlg=new ReplaceDialog(target,FindReplaceActions.this);  }  dlg.setVisible(true);}  }
class C{  public void endValueScope(){  if (fValuesCount == 0) {    if (fIdentityConstraint.getCategory() == XSIDCDefinition.IC_KEY) {      String code="AbsentKeyValue";      String eName=fIdentityConstraint.getElementName();      String cName=fIdentityConstraint.getIdentityConstraintName();      reportSchemaError(code,new Object[]{eName,cName});    }    return;  }  if (fValuesCount != fFieldCount) {    if (fIdentityConstraint.getCategory() == XSIDCDefinition.IC_KEY) {      String code="KeyNotEnoughValues";      UniqueOrKey key=(UniqueOrKey)fIdentityConstraint;      String eName=fIdentityConstraint.getElementName();      String cName=key.getIdentityConstraintName();      reportSchemaError(code,new Object[]{eName,cName});    }    return;  }}  }
class C{  @Transactional public AuthorDTO save(AuthorDTO dto){  if (dto == null) {    return null;  }  Author author;  if (dto.isIdSet()) {    author=authorRepository.findOne(dto.id);  } else {    author=new Author();  }  author.setCivility(dto.civility);  author.setFirstName(dto.firstName);  author.setLastName(dto.lastName);  author.setEmail(dto.email);  author.setBirthDate(dto.birthDate);  author.setBirthDateTime(dto.birthDateTime);  if (dto.favoriteAuthor == null) {    author.setFavoriteAuthor(null);  } else {    Author favoriteAuthor=author.getFavoriteAuthor();    if (favoriteAuthor == null || (favoriteAuthor.getId().compareTo(dto.favoriteAuthor.id) != 0)) {      author.setFavoriteAuthor(authorRepository.findOne(dto.favoriteAuthor.id));    }  }  return toDTO(authorRepository.save(author));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_ABYSS_ORDER_RANKER_DIE(Player victim,DescriptionId rankDescId){  return new SM_SYSTEM_MESSAGE(1400023,victim.getRace().getRaceDescriptionId(),rankDescId,victim.getName(),"%SubZone:" + victim.getPosition().getMapId() + " "+ victim.getPosition().getX()+ " "+ victim.getPosition().getY()+ " "+ victim.getPosition().getZ());}  }
class C{  @Override public void onClick(View v){  int viewId=v.getId();  if (viewId == R.id.img_error_layout) {    autoLoadingData();  }}  }
class C{  public Bundler putStringArray(String key,String[] value){  bundle.putStringArray(key,value);  return this;}  }
class C{  @Deprecated public Builder cacheOnDisc(){  return cacheOnDisk(true);}  }
class C{  private static Integer[] modify(Integer[] order,Integer[] array){  Integer[] tmp=new Integer[order.length];  int pos=0;  for (  Integer id : order) {    if (id < array.length)     tmp[pos++]=array[id];  }  return tmp;}  }
class C{  static GitRepository bareRepoInCache(String url,Map<String,String> environment,boolean verbose,String repoStorage){  Path gitRepoStorage=FileSystems.getDefault().getPath(repoStorage);  Path gitDir=gitRepoStorage.resolve(PERCENT_ESCAPER.escape(url));  return bareRepo(gitDir,environment,verbose);}  }
class C{  public Vector3f subtract(Vector3f vec){  return new Vector3f(x - vec.x,y - vec.y,z - vec.z);}  }
class C{  public static List<Entry> loadEntriesFromAssets(AssetManager am,String path){  List<Entry> entries=new ArrayList<>();  BufferedReader reader=null;  try {    reader=new BufferedReader(new InputStreamReader(am.open(path),"UTF-8"));    String line=reader.readLine();    while (line != null) {      String[] split=line.split("#");      if (split.length <= 2) {        entries.add(new Entry(Float.parseFloat(split[0]),Integer.parseInt(split[1])));      } else {        float[] vals=new float[split.length - 1];        for (int i=0; i < vals.length; i++) {          vals[i]=Float.parseFloat(split[i]);        }        entries.add(new BarEntry(vals,Integer.parseInt(split[split.length - 1])));      }      line=reader.readLine();    }  } catch (  IOException e) {    Log.e(LOG,e.toString());  } finally {    if (reader != null) {      try {        reader.close();      } catch (      IOException e) {        Log.e(LOG,e.toString());      }    }  }  return entries;}  }
class C{  public static String toString(URL url,String encoding) throws IOException {  return toString(url,Charsets.toCharset(encoding));}  }
class C{  static void appendLengthInfo(int numLetters,Version version,Mode mode,BitArray bits) throws WriterException {  int numBits=mode.getCharacterCountBits(version);  if (numLetters >= (1 << numBits)) {    throw new WriterException(numLetters + " is bigger than " + ((1 << numBits) - 1));  }  bits.appendBits(numLetters,numBits);}  }
class C{  public AndroidAuthenticator(Context context,Account account,String authTokenType){  this(context,account,authTokenType,false);}  }
class C{  public synchronized boolean canThreadDecoding(Thread t){  ThreadStatus status=mThreadStatus.get(t);  if (status == null) {    return true;  }  return (status.mState != State.CANCEL);}  }
class C{  public MinTask(Class<T> reduceType,Task<T> task,AsyncResultFilter<T> filter) throws IllegalArgumentException {  super(task,filter);  this.reducer=new MinReducer<T>(reduceType);}  }
class C{  public final boolean forall(P2SetVisitor v){  for (int i=0; i < size; i++) {    v.visit(nodes[i]);  }  return v.getReturnValue();}  }
class C{  @Override public void clusterOnline(ClusterNode clusterNode){  LOGGER.info("Detected Terracotta cluster online event for node: " + clusterNode.getId());}  }
class C{  private void resetPokeflyStateMachine(){  receivedInfo=false;  infoShownSent=false;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_NOT_ENOUGH_ITEM(DescriptionId value0){  return new SM_SYSTEM_MESSAGE(1300018,value0);}  }
class C{  private static Mode decodeAsciiSegment(BitSource bits,StringBuilder result,StringBuilder resultTrailer) throws FormatException {  boolean upperShift=false;  do {    int oneByte=bits.readBits(8);    if (oneByte == 0) {      throw FormatException.getFormatInstance();    } else     if (oneByte <= 128) {      if (upperShift) {        oneByte+=128;      }      result.append((char)(oneByte - 1));      return Mode.ASCII_ENCODE;    } else     if (oneByte == 129) {      return Mode.PAD_ENCODE;    } else     if (oneByte <= 229) {      int value=oneByte - 130;      if (value < 10) {        result.append('0');      }      result.append(value);    } else     if (oneByte == 230) {      return Mode.C40_ENCODE;    } else     if (oneByte == 231) {      return Mode.BASE256_ENCODE;    } else     if (oneByte == 232) {      result.append((char)29);    } else     if (oneByte == 233 || oneByte == 234) {    } else     if (oneByte == 235) {      upperShift=true;    } else     if (oneByte == 236) {      result.append("[)>\u001E05\u001D");      resultTrailer.insert(0,"\u001E\u0004");    } else     if (oneByte == 237) {      result.append("[)>\u001E06\u001D");      resultTrailer.insert(0,"\u001E\u0004");    } else     if (oneByte == 238) {      return Mode.ANSIX12_ENCODE;    } else     if (oneByte == 239) {      return Mode.TEXT_ENCODE;    } else     if (oneByte == 240) {      return Mode.EDIFACT_ENCODE;    } else     if (oneByte == 241) {    } else     if (oneByte >= 242) {      if (oneByte != 254 || bits.available() != 0) {        throw FormatException.getFormatInstance();      }    }  } while (bits.available() > 0);  return Mode.ASCII_ENCODE;}  }
class C{  @Override public TriangularDistribution makeDistribution(){  return new TriangularDistribution(-3,2,12);}  }
class C{  public @NonNull ChargeRequest.Builder enforceBusinessLocation(@Nullable String locationId){  this.locationId=locationId;  return this;}  }
class C{  public final String toString(){  return name;}  }
class C{  private void createBody(soot.SootMethod sootMethod){  body=soot.jimple.Jimple.v().newBody(sootMethod);  sootMethod.setActiveBody(body);}  }
class C{  public StrokeAction(String group,BasicStroke defaultStroke){  super(group);  this.defaultStroke=defaultStroke;}  }
class C{  private int blockWidth(final int blockColumn){  return (blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE;}  }
class C{  public static void renderTemplate(String templateLocation,String templateString,Map<String,Object> context,Appendable outWriter,boolean useCache) throws TemplateException, IOException {  if (templateString == null) {    renderTemplate(templateLocation,context,outWriter);  } else {    renderTemplateFromString(templateString,templateLocation,context,outWriter,useCache);  }}  }
class C{  @Override public ExponentialDistribution makeDistribution(){  return new ExponentialDistribution(5.0);}  }
class C{  void onRestoreStarted(){  mRestoreStartedAtMillis=SystemClock.elapsedRealtime();}  }
class C{  public Map<String,Object> modifyCart(Security security,GenericValue userLogin,Map<String,? extends Object> context,boolean removeSelected,String[] selectedItems,Locale locale){  Map<String,Object> result=null;  if (locale == null) {    locale=this.cart.getLocale();  }  ArrayList<ShoppingCartItem> deleteList=new ArrayList<ShoppingCartItem>();  ArrayList<String> errorMsgs=new ArrayList<String>();  BigDecimal oldQuantity=BigDecimal.ONE.negate();  String oldDescription="";  BigDecimal oldPrice=BigDecimal.ONE.negate();  if (this.cart.isReadOnlyCart()) {    String errMsg=UtilProperties.getMessage(resource_error,"cart.cart_is_in_read_only_mode",this.cart.getLocale());    errorMsgs.add(errMsg);    result=ServiceUtil.returnError(errorMsgs);    return result;  }  for (  String parameterName : context.keySet()) {    int underscorePos=parameterName.lastIndexOf('_');    if (underscorePos >= 0 && (!parameterName.endsWith("_i18n"))) {      try {        String indexStr=parameterName.substring(underscorePos + 1);        int index=Integer.parseInt(indexStr);        String quantString=(String)context.get(parameterName);        BigDecimal quantity=BigDecimal.ONE.negate();        String itemDescription="";        if (quantString != null)         quantString=quantString.trim();        ShoppingCartItem item=this.cart.findCartItem(index);        if (parameterName.toUpperCase().startsWith("OPTION")) {          if (quantString.toUpperCase().startsWith("NO^")) {            if (quantString.length() > 2) {              String featureTypeId=this.getRemoveFeatureTypeId(parameterName);              if (featureTypeId != null) {                item.removeAdditionalProductFeatureAndAppl(featureTypeId);              }            }          } else {            GenericValue featureAppl=this.getFeatureAppl(item.getProductId(),parameterName,quantString);            if (featureAppl != null) {              item.putAdditionalProductFeatureAndAppl(featureAppl);            }          }        } else         if (parameterName.toUpperCase().startsWith("DESCRIPTION")) {          itemDescription=quantString;        } else         if (parameterName.startsWith("reservStart")) {          if (quantString.length() == 0) {            quantString+=" 00:00:00.000000000";          }          if (item != null) {            Timestamp reservStart=Timestamp.valueOf(quantString);            item.setReservStart(reservStart);          }        } else         if (parameterName.startsWith("reservLength")) {          if (item != null) {            BigDecimal reservLength=(BigDecimal)ObjectType.simpleTypeConvert(quantString,"BigDecimal",null,locale);            item.setReservLength(reservLength);          }        } else         if (parameterName.startsWith("reservPersons")) {          if (item != null) {            BigDecimal reservPersons=(BigDecimal)ObjectType.simpleTypeConvert(quantString,"BigDecimal",null,locale);            item.setReservPersons(reservPersons);          }        } else         if (parameterName.startsWith("shipBeforeDate")) {          if (UtilValidate.isNotEmpty(quantString)) {            if (quantString.length() == 10)             quantString+=" 00:00:00.000";            item.setShipBeforeDate(Timestamp.valueOf(quantString));          }        } else         if (parameterName.startsWith("shipAfterDate")) {          if (UtilValidate.isNotEmpty(quantString)) {            if (quantString.length() == 10)             quantString+=" 00:00:00.000";            item.setShipAfterDate(Timestamp.valueOf(quantString));          }        } else         if (parameterName.startsWith("amount")) {          if (UtilValidate.isNotEmpty(quantString)) {            BigDecimal amount=new BigDecimal(quantString);            if (amount.compareTo(BigDecimal.ZERO) <= 0) {              String errMsg=UtilProperties.getMessage(resource_error,"cart.amount_not_positive_number",this.cart.getLocale());              errorMsgs.add(errMsg);              result=ServiceUtil.returnError(errorMsgs);              return result;            }            item.setSelectedAmount(amount);          }        } else         if (parameterName.startsWith("itemType")) {          if (UtilValidate.isNotEmpty(quantString)) {            item.setItemType(quantString);          }        } else {          quantity=(BigDecimal)ObjectType.simpleTypeConvert(quantString,"BigDecimal",null,locale);          if (!ProductWorker.isDecimalQuantityOrderAllowed(delegator,item.getProductId(),cart.getProductStoreId()) && parameterName.startsWith("update")) {            BigDecimal remainder=quantity.remainder(BigDecimal.ONE);            if (remainder.compareTo(BigDecimal.ZERO) != 0) {              String errMsg=UtilProperties.getMessage(resource_error,"cart.addToCart.quantityInDecimalNotAllowed",this.cart.getLocale());              errorMsgs.add(errMsg);              result=ServiceUtil.returnError(errorMsgs);              return result;            }            quantity=quantity.setScale(0,UtilNumber.getBigDecimalRoundingMode("order.rounding"));          } else {            quantity=quantity.setScale(UtilNumber.getBigDecimalScale("order.decimals"),UtilNumber.getBigDecimalRoundingMode("order.rounding"));          }          if (quantity.compareTo(BigDecimal.ZERO) < 0) {            String errMsg=UtilProperties.getMessage(resource_error,"cart.quantity_not_positive_number",this.cart.getLocale());            errorMsgs.add(errMsg);            result=ServiceUtil.returnError(errorMsgs);            return result;          }        }        if (parameterName.startsWith("shipAfterDate") || parameterName.startsWith("shipBeforeDate")) {          this.cart.setShipGroupShipDatesFromItem(item);        }        if (parameterName.toUpperCase().startsWith("UPDATE")) {          if (quantity.compareTo(BigDecimal.ZERO) == 0) {            deleteList.add(item);          } else {            if (item != null) {              try {                if (cart.getOrderType().equals("PURCHASE_ORDER")) {                  oldQuantity=item.getQuantity();                  if (oldQuantity.compareTo(quantity) != 0) {                    oldDescription=item.getName();                    oldPrice=item.getBasePrice();                    if (UtilValidate.isNotEmpty(item.getProductId())) {                      GenericValue supplierProduct=this.cart.getSupplierProduct(item.getProductId(),quantity,this.dispatcher);                      if (supplierProduct == null) {                        if ("_NA_".equals(cart.getPartyId())) {                          item.setQuantity(quantity,dispatcher,this.cart);                          item.setName(item.getProduct().getString("internalName"));                        } else {                          String errMsg=UtilProperties.getMessage(resource_error,"cart.product_not_valid_for_supplier",this.cart.getLocale());                          errMsg=errMsg + " (" + item.getProductId()+ ", "+ quantity+ ", "+ cart.getCurrency()+ ")";                          errorMsgs.add(errMsg);                        }                      } else {                        item.setSupplierProductId(supplierProduct.getString("supplierProductId"));                        item.setQuantity(quantity,dispatcher,this.cart);                        item.setBasePrice(supplierProduct.getBigDecimal("lastPrice"));                        item.setName(ShoppingCartItem.getPurchaseOrderItemDescription(item.getProduct(),supplierProduct,cart.getLocale()));                      }                    } else {                      item.setQuantity(quantity,dispatcher,this.cart);                    }                  }                } else {                  BigDecimal minQuantity=ShoppingCart.getMinimumOrderQuantity(delegator,item.getBasePrice(),item.getProductId());                  oldQuantity=item.getQuantity();                  if (oldQuantity.compareTo(quantity) != 0) {                    cart.setShipmentMethodTypeId(index,null);                  }                  if (quantity.compareTo(minQuantity) < 0) {                    quantity=minQuantity;                  }                  item.setQuantity(quantity,dispatcher,this.cart,true,false);                  cart.setItemShipGroupQty(item,quantity,0);                }              } catch (              CartItemModifyException e) {                errorMsgs.add(e.getMessage());              }            }          }        }        if (parameterName.toUpperCase().startsWith("DESCRIPTION")) {          if (!oldDescription.equals(itemDescription)) {            if (security.hasEntityPermission("ORDERMGR","_CREATE",userLogin)) {              if (item != null) {                item.setName(itemDescription);              }            }          }        }        if (parameterName.toUpperCase().startsWith("PRICE")) {          NumberFormat pf=NumberFormat.getCurrencyInstance(locale);          String tmpQuantity=pf.format(quantity);          String tmpOldPrice=pf.format(oldPrice);          if (!tmpOldPrice.equals(tmpQuantity)) {            if (security.hasEntityPermission("ORDERMGR","_CREATE",userLogin)) {              if (item != null) {                item.setBasePrice(quantity);                item.setDisplayPrice(quantity);                item.setIsModifiedPrice(true);              }            }          }        }        if (parameterName.toUpperCase().startsWith("DELETE")) {          deleteList.add(this.cart.findCartItem(index));        }      } catch (      NumberFormatException nfe) {        Debug.logWarning(nfe,UtilProperties.getMessage(resource_error,"OrderCaughtNumberFormatExceptionOnCartUpdate",cart.getLocale()));      }catch (      Exception e) {        Debug.logWarning(e,UtilProperties.getMessage(resource_error,"OrderCaughtExceptionOnCartUpdate",cart.getLocale()));      }    }  }  if (removeSelected) {    for (int si=0; si < selectedItems.length; si++) {      String indexStr=selectedItems[si];      ShoppingCartItem item=null;      try {        int index=Integer.parseInt(indexStr);        item=this.cart.findCartItem(index);      } catch (      Exception e) {        Debug.logWarning(e,UtilProperties.getMessage(resource_error,"OrderProblemsGettingTheCartItemByIndex",cart.getLocale()));      }      if (item != null) {        deleteList.add(item);      }    }  }  for (  ShoppingCartItem item : deleteList) {    int itemIndex=this.cart.getItemIndex(item);    if (Debug.infoOn())     Debug.logInfo("Removing item index: " + itemIndex,module);    try {      this.cart.removeCartItem(itemIndex,dispatcher);      cart.setShipmentMethodTypeId(itemIndex,null);    } catch (    CartItemModifyException e) {      result=ServiceUtil.returnError(new ArrayList<String>());      errorMsgs.add(e.getMessage());    }  }  if (context.containsKey("alwaysShowcart")) {    this.cart.setViewCartOnAdd(true);  } else {    this.cart.setViewCartOnAdd(false);  }  ProductPromoWorker.doPromotions(this.cart,dispatcher);  if (errorMsgs.size() > 0) {    result=ServiceUtil.returnError(errorMsgs);    return result;  }  result=ServiceUtil.returnSuccess();  return result;}  }
class C{  protected SOCVFinderServiceWrapper(String args[]){  @SuppressWarnings("unused") Class<WrapperManager> wmClass=WrapperManager.class;  WrapperManager.start(this,args);}  }
class C{  public static void main(String[] args){  final ApprovalEventDTO approval=createTestApprovalEvent();  send(approval,ElasticsearchClient.APPROVE);}  }
class C{  public static String abbreviate(String str,FontMetrics fm,int width){  int lastblank=0, nchars=0, cumx=0;  while (cumx < width && nchars < str.length()) {    if (Character.isWhitespace(str.charAt(nchars))) {      lastblank=nchars;    }    cumx+=fm.charWidth(str.charAt(nchars));    nchars++;  }  if (nchars < str.length() && lastblank > 0) {    nchars=lastblank;  }  return (nchars > 0 ? str.substring(0,nchars) : str);}  }
class C{  public Builder iconAnchor(Point iconAnchor){  this.iconAnchor=iconAnchor;  return this;}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  @Override public void startMerging(){}  }
class C{  public ParticleSystem(Activity a,int maxParticles,int drawableResId,long timeToLive,ViewGroup parentView){  this(parentView,maxParticles,ContextCompat.getDrawable(a,drawableResId),timeToLive);}  }
class C{  @ObjectiveCName("clearWithUniqueName:") private boolean clear(String uniqueName){  ScheduledFuture scheduledFuture=register.get(uniqueName);  if (scheduledFuture != null) {    scheduledFuture.cancel(false);    register.remove(uniqueName);    return true;  } else {    return false;  }}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public AnnotationDecl fullCopy(){  AnnotationDecl tree=(AnnotationDecl)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {switch (i) {case 3:        tree.children[i]=new List();      continue;  }  ASTNode child=(ASTNode)children[i];  if (child != null) {    child=child.fullCopy();    tree.setChild(child,i);  }}}return tree;}  }
class C{  public List<List<Writable>> executeSequence(List<List<Writable>> inputSequence){  throw new UnsupportedOperationException("Not yet implemented");}  }
class C{  private static String extractTagSource(Map<String,String> tag_map){  return Optional.ofNullable(tag_map.remove("source")).orElseGet(null);}  }
class C{  public static String removeSpaces(String str){  return removeRegex(str,"[\\ ]");}  }
class C{  @Override public int compare(FeatureVector a,FeatureVector b){switch (type) {case byteValued:    return a.byteValuedDiscreteFeatures[I] - b.byteValuedDiscreteFeatures[I];case shortValued:  int offset=a.byteValuedDiscreteFeatures.length;return a.shortValuedDiscreteFeatures[I - offset] - b.shortValuedDiscreteFeatures[I - offset];case floatValued:int offset2=a.byteValuedDiscreteFeatures.length + a.shortValuedDiscreteFeatures.length;float delta=a.continuousFeatures[I - offset2] - b.continuousFeatures[I - offset2];if (delta > 0) return 1; else if (delta < 0) return -1;return 0;default :throw new IllegalStateException("compare called with feature index " + I + " and feature type "+ type);}}  }
class C{  private String generateHash(){  return UUID.randomUUID().toString().substring(0,8);}  }
class C{  public static void doReward(TemporaryPlayerTeam<?> team,float damagePercent,Npc owner,AionObject winner){  if (team == null || owner == null) {    return;  }  PlayerTeamRewardStats filteredStats=new PlayerTeamRewardStats(owner);  team.applyOnMembers(filteredStats);  if (filteredStats.players.isEmpty() || !filteredStats.hasLivingPlayer) {    return;  }  long expReward;  if (filteredStats.players.size() + filteredStats.mentorCount == 1) {    expReward=(long)(StatFunctions.calculateSoloExperienceReward(filteredStats.players.get(0),owner));  } else {    expReward=(long)(StatFunctions.calculateGroupExperienceReward(filteredStats.highestLevel,owner));  }  int size=filteredStats.players.size();  int bonus=100;  if (size > 1) {    bonus=150 + (size - 2) * 10;  }  for (  Player member : filteredStats.players) {    Player partner=member.findPartner();    if (member.isMentor() || member.getLifeStats().isAlreadyDead()) {      continue;    }    long rewardXp=(long)(expReward * bonus * member.getLevel()) / (filteredStats.partyLvlSum * 100);    int rewardDp=StatFunctions.calculateGroupDPReward(member,owner);    float rewardAp=1;    if (filteredStats.highestLevel - member.getLevel() >= 10) {      rewardXp=0;      rewardDp=0;    } else     if (filteredStats.mentorCount > 0) {      int cape=XPCape.values()[(int)member.getLevel()].value();      if (cape < rewardXp) {        rewardXp=cape;      }    }    rewardXp*=damagePercent;    rewardDp*=damagePercent;    rewardAp*=damagePercent;    if (member.isMarried() && member.getPlayerGroup2().getMembers() == partner && member.getPlayerGroup2().getMembers().size() == 2) {      member.getCommonData().addExp(rewardXp + (rewardXp * 20 / 100),RewardType.GROUP_HUNTING,owner.getObjectTemplate().getNameId());      member.getCommonData().addEventExp(rewardXp + (rewardXp * 20 / 100));    } else {      member.getCommonData().addExp(rewardXp,RewardType.GROUP_HUNTING,owner.getObjectTemplate().getNameId());      member.getCommonData().addEventExp(rewardXp);    }    member.getCommonData().addDp(rewardDp);    if (owner.isRewardAP() && !(filteredStats.mentorCount > 0 && CustomConfig.MENTOR_GROUP_AP)) {      rewardAp*=StatFunctions.calculatePvEApGained(member,owner);      int ap=(int)rewardAp / filteredStats.players.size();      if (ap >= 1) {        AbyssPointsService.addAp(member,owner,ap);      }    }  }  Player mostDamagePlayer=owner.getAggroList().getMostPlayerDamageOfMembers(team.getMembers(),filteredStats.highestLevel);  if (mostDamagePlayer == null) {    return;  }  if (winner.equals(team) && (!owner.getAi2().getName().equals("chest") || filteredStats.mentorCount == 0)) {    DropRegistrationService.getInstance().registerDrop(owner,mostDamagePlayer,filteredStats.highestLevel,filteredStats.players);  }}  }
class C{  public DefaultConsolePanel(){  setLayout(new BorderLayout(0,0));  textPane=new JTextArea();  textPane.setRows(5);  textPane.setEditable(false);  JScrollPane jp=new JScrollPane(textPane);  add(jp,BorderLayout.CENTER);}  }
class C{  public int attachChild(Spatial child){  if (child == null) {    throw new NullPointerException();  }  if (child.getParent() != this && child != this) {    if (child.getParent() != null) {      child.getParent().detachChild(child);    }    child.setParent(this);    children.add(child);  }  return children.size();}  }
class C{  public EGLSurface createOffscreenSurface(int width,int height){  int[] surfaceAttribs={EGL14.EGL_WIDTH,width,EGL14.EGL_HEIGHT,height,EGL14.EGL_NONE};  EGLSurface eglSurface=EGL14.eglCreatePbufferSurface(eGLDisplay,eGLConfig,surfaceAttribs,0);  checkEglError("eglCreatePbufferSurface");  if (eglSurface == null) {    throw new RuntimeException("surface was null");  }  return eglSurface;}  }
class C{  public JsonObjectRequest(int method,String url,JSONObject jsonRequest,Listener<JSONObject> listener,ErrorListener errorListener){  super(method,url,(jsonRequest == null) ? null : jsonRequest.toString(),listener,errorListener);}  }
class C{  private Iterator<RecordEntryRawMetadata> rawMetadataFromCql(final Iterator<Row> iter){  return Iterators.transform(iter,null);}  }
class C{  public MarketEditCommentQuery editComment(UserActor actor,int ownerId,int commentId){  return new MarketEditCommentQuery(getClient(),actor,ownerId,commentId);}  }
class C{  private static String encodeObjectAsPemString(Object object,PEMEncryptor encryptor){  StringWriter stringWriter=new StringWriter();  try {    JcaPEMWriter pemWriter=new JcaPEMWriter(stringWriter);    pemWriter.writeObject(object,encryptor);    pemWriter.flush();  } catch (  IOException e) {    throw new ExportException("Unable to generate PEM string representing object",e);  }  return stringWriter.toString();}  }
class C{  public static void appendContentPrefix(HttpServletRequest request,Appendable urlBuffer) throws IOException {  appendContentPrefix(request,urlBuffer,null);}  }
class C{  public static void startPhysicalWeb(ChromeApplication application){  PhysicalWebBleClient physicalWebBleClient=PhysicalWebBleClient.getInstance(application);  physicalWebBleClient.subscribe();}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){  final int deltaValue, currentScrollValue, scrollValue;switch (view.getPullToRefreshScrollDirection()) {case HORIZONTAL:    deltaValue=deltaX;  scrollValue=scrollX;currentScrollValue=view.getScrollX();break;case VERTICAL:default :deltaValue=deltaY;scrollValue=scrollY;currentScrollValue=view.getScrollY();break;}if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {final Mode mode=view.getMode();if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {final int newScrollValue=(deltaValue + scrollValue);if (PullToRefreshBase.DEBUG) {Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);}if (newScrollValue < (0 - fuzzyThreshold)) {if (mode.showHeaderLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));}} else if (newScrollValue > (scrollRange + fuzzyThreshold)) {if (mode.showFooterLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));}} else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {view.setState(State.RESET);}} else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {view.setState(State.RESET);}}}  }
class C{  public AdsCheckLinkQuery checkLink(UserActor actor,int accountId,AdsCheckLinkType linkType,String linkUrl){  return new AdsCheckLinkQuery(getClient(),actor,accountId,linkType,linkUrl);}  }
class C{  public static String toTimeString(int hour,int minute,int second){  String hourStr;  String minuteStr;  String secondStr;  if (hour < 10) {    hourStr="0" + hour;  } else {    hourStr="" + hour;  }  if (minute < 10) {    minuteStr="0" + minute;  } else {    minuteStr="" + minute;  }  if (second < 10) {    secondStr="0" + second;  } else {    secondStr="" + second;  }  if (second == 0) {    return hourStr + ":" + minuteStr;  } else {    return hourStr + ":" + minuteStr+ ":"+ secondStr;  }}  }
class C{  public <T>T recall(Path path,Class<T> type) throws IOException {  try (InputStream is=hadoopFileSystem.open(path)){    return serializer.read(is,type);  } }  }
class C{  private boolean hasSideEffectsOrCallsSink(SootMethod method){  return hasSideEffectsOrCallsSink(method,new HashSet<SootMethod>());}  }
class C{  public void apply(Predicate<TM> predicate){  lock();  try {    for (    TM member : members.values()) {      if (!predicate.apply(member)) {        return;      }    }  }  finally {    unlock();  }}  }
class C{  public DocumentNGramHistogram(){  MinSize=3;  MaxSize=5;  DataString="";  NGramHistogram=new HashMap();}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public JRangeSlider createVerticalRangeSlider(){  return createRangeSlider(JRangeSlider.VERTICAL,JRangeSlider.RIGHTLEFT_BOTTOMTOP);}  }
class C{  @Override @Transactional(value="cacheTransactionManager",propagation=Propagation.REQUIRES_NEW) public void doUpdateAlarm(final Long alarmId,final Properties properties){  if (properties.containsKey("dataTagId")) {    LOGGER.warn("Attempting to change the tag to which an alarm is attached - this is not currently supported!");    properties.remove("dataTagId");  }  alarmCache.acquireWriteLockOnKey(alarmId);  try {    Alarm alarm=alarmCache.getCopy(alarmId);    alarmFacade.updateConfig(alarm,properties);    alarmDAO.updateConfig(alarm);    alarmCache.putQuiet(alarm);  } catch (  CacheElementNotFoundException ex) {    throw ex;  }catch (  Exception ex) {    LOGGER.error("Exception caught while updating alarm" + alarmId,ex);    throw new UnexpectedRollbackException("Unexpected exception caught while updating Alarm " + alarmId,ex);  } finally {    alarmCache.releaseWriteLockOnKey(alarmId);  }}  }
class C{  public synchronized BookKeeperClientBuilder name(String name){  this.name=name;  return this;}  }
class C{  public ClassSource find(String className){  if (Options.v().polyglot() && soot.javaToJimple.InitialResolver.v().hasASTForSootName(className)) {    soot.javaToJimple.InitialResolver.v().setASTForSootName(className);    return new JavaClassSource(className);  } else {    boolean checkAgain=className.indexOf('$') >= 0;    String javaClassName=SourceLocator.v().getSourceForClass(className);    String fileName=javaClassName.replace('.','/') + ".java";    SourceLocator.FoundFile file=SourceLocator.v().lookupInClassPath(fileName);    if (file == null) {      if (checkAgain) {        fileName=className.replace('.','/') + ".java";        file=SourceLocator.v().lookupInClassPath(fileName);      }    }    if (file == null)     return null;    if (file.file == null) {      throw new JarException(className);    }    return new JavaClassSource(className,file.file);  }}  }
class C{  @deprecated public StringBuffer format(Object obj,StringBuffer toAppendTo,FieldPosition pos){  TimeZone tz=null;  long date=System.currentTimeMillis();  if ((obj instanceof TimeZone)) {    tz=(TimeZone)obj;  } else   if ((obj instanceof Calendar)) {    tz=((Calendar)obj).getTimeZone();    date=((Calendar)obj).getTimeInMillis();  } else {    throw new IllegalArgumentException("Cannot format given Object (" + obj.getClass().getName() + ") as a time zone");  }  assert (tz != null);  String result=formatOffsetLocalizedGMT(tz.getOffset(date));  toAppendTo.append(result);  if ((pos.getFieldAttribute() == DateFormat.Field.TIME_ZONE) || (pos.getField() == 17)) {    pos.setBeginIndex(0);    pos.setEndIndex(result.length());  }  return toAppendTo;}  }
class C{  public static Collection<File> listFiles(File directory,String[] extensions,boolean recursive){  IOFileFilter filter;  if (extensions == null) {    filter=TrueFileFilter.INSTANCE;  } else {    String[] suffixes=toSuffixes(extensions);    filter=new SuffixFileFilter(suffixes);  }  return listFiles(directory,filter,recursive ? TrueFileFilter.INSTANCE : FalseFileFilter.INSTANCE);}  }
class C{  public KMeansPlusPlusClusterer(final int k,final int maxIterations){  this(k,maxIterations,new EuclideanDistance());}  }
class C{  public Topic createTopic(String topicName) throws JMSException {  throw new IllegalStateException("Forbidden call on a QueueSession.");}  }
class C{  public AbortJob(Transaction tr,TaskManager pool,WakeupManager wm,ClientLog log,ParticipantHandle[] handles,boolean directCall,Object xid){  super(pool,wm,directCall);  if (log == null)   throw new IllegalArgumentException("AbortJob: AbortJob: " + "log is null");  this.log=log;  if (!(tr instanceof ServerTransaction))   throw new IllegalArgumentException("PrepareJob: PrepareJob: " + "must be a ServerTransaction");  this.tr=(ServerTransaction)tr;  if (handles == null)   throw new IllegalArgumentException("PrepareJob: PrepareJob: " + "must have participants");  if (handles.length == 0)   throw new IllegalArgumentException("PrepareJob: PrepareJob: " + "must have participants");  this.handles=handles;  if (_directCall)   this.results=new Integer[1];  _xid=xid;}  }
class C{  private static InvocationConstraint[] makeAbsolute(InvocationConstraint[] arr,long baseTime){  InvocationConstraint[] narr=new InvocationConstraint[arr.length];  for (int i=arr.length; --i >= 0; ) {    InvocationConstraint c=arr[i];    if (c instanceof RelativeTimeConstraint) {      c=((RelativeTimeConstraint)c).makeAbsolute(baseTime);    }    narr[i]=c;  }  return narr;}  }
class C{  private void stop(){  stopTimeout();  if (this.status != AccelListener.STOPPED) {    this.sensorManager.unregisterListener(this);  }  this.setStatus(AccelListener.STOPPED);  this.accuracy=SensorManager.SENSOR_STATUS_UNRELIABLE;}  }
class C{  public IntLinkedList(){  head=null;  tail=null;  iterator=null;}  }
class C{  public static String separatorsToSystem(String path){  if (path == null) {    return null;  }  if (isSystemWindows()) {    return separatorsToWindows(path);  } else {    return separatorsToUnix(path);  }}  }
class C{  public SecureGetSMSHistoryQuery limit(Integer value){  return unsafeParam("limit",value);}  }
class C{  public static ValueGetterSpacePredicate<ServerEntry> pathNot(String path,ISpacePredicate predicate){  return path(path,not(predicate));}  }
class C{  @Override public void ignorableWhitespace(XMLString text,Augmentations augs) throws XNIException {}  }
class C{  public CMULexicon(String basename){  this(basename,true);}  }
class C{  protected CarbonDictionaryColumnMetaChunk readLastChunkFromDictionaryMetadataFile(DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier) throws IOException {  DictionaryService dictService=CarbonCommonFactory.getDictionaryService();  CarbonDictionaryMetadataReader columnMetadataReaderImpl=dictService.getDictionaryMetadataReader(dictionaryColumnUniqueIdentifier.getCarbonTableIdentifier(),dictionaryColumnUniqueIdentifier.getColumnIdentifier(),carbonStorePath);  CarbonDictionaryColumnMetaChunk carbonDictionaryColumnMetaChunk=null;  try {    carbonDictionaryColumnMetaChunk=columnMetadataReaderImpl.readLastEntryOfDictionaryMetaChunk();  }  finally {    columnMetadataReaderImpl.close();  }  return carbonDictionaryColumnMetaChunk;}  }
class C{  private ViewFilter complementFilterIfNecessary(final ViewFilter viewFilter){  FunctionUtils.checkParameterIsNotNull("viewFilter",viewFilter);  if (complementNextWithFilter) {    complementNextWithFilter=false;    return new ComplementedViewFilter(viewFilter);  }  return viewFilter;}  }
class C{  public void mouseEntered(MouseEvent me){}  }
class C{  public static boolean isLeaseExpiration(int mod){  return (mod & NOTIFY_LEASE_EXPIRATION) != 0;}  }
class C{  @Nullable private static ArtifactDependencySpec findNewExternalDependencyByExaminingPath(@NotNull Library library){  VirtualFile[] files=library.getFiles(OrderRootType.CLASSES);  if (files.length == 0) {    return null;  }  File file=virtualToIoFile(files[0]);  String libraryName=library.getName();  if (libraryName == null) {    return null;  }  List<String> pathSegments=splitPath(file.getPath());  for (int i=1; i < pathSegments.size() - 2; i++) {    if (libraryName.startsWith(pathSegments.get(i))) {      String groupId=pathSegments.get(i - 1);      String artifactId=pathSegments.get(i);      String version=pathSegments.get(i + 1);      if (libraryName.endsWith(version)) {        return new ArtifactDependencySpec(artifactId,groupId,version);      }    }  }  return null;}  }
class C{  private boolean hasPermission(String permission){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {    return (checkSelfPermission(permission) == PackageManager.PERMISSION_GRANTED);  }  return true;}  }
class C{  public void actionPerformed(ActionEvent ev){  execute("set groupNodes=none;");}  }
class C{  public PhotosGetAlbumsCountQuery(VkApiClient client,UserActor actor){  super(client,"photos.getAlbumsCount",Integer.class);  accessToken(actor.getAccessToken());}  }
class C{  public void hideKeyboard(Runnable postHideTask){  if (mUrlBar != null)   mUrlBar.clearFocus();  boolean wasVisible=false;  if (hasFocus()) {    wasVisible=UiUtils.hideKeyboard(this);  }  if (wasVisible) {    mPostHideKeyboardTask=postHideTask;  } else {    postHideTask.run();  }}  }
class C{  public WallSearchQuery fields(EnumParam... value){  return unsafeParam("fields",value);}  }
class C{  @Override public final double readDouble(){  return Double.longBitsToDouble(readLong());}  }
class C{  public static byte[] compressForZlib(String stringToCompress){  byte[] returnValues=null;  try {    returnValues=compressForZlib(stringToCompress.getBytes("UTF-8"));  } catch (  UnsupportedEncodingException uee) {    uee.printStackTrace();  }  return returnValues;}  }
class C{  private static void convertActivityToTranslucentAfterL(Activity activity){  try {    Method getActivityOptions=Activity.class.getDeclaredMethod("getActivityOptions");    getActivityOptions.setAccessible(true);    Object options=getActivityOptions.invoke(activity);    Class<?>[] classes=Activity.class.getDeclaredClasses();    Class<?> translucentConversionListenerClazz=null;    for (    Class clazz : classes) {      if (clazz.getSimpleName().contains("TranslucentConversionListener")) {        translucentConversionListenerClazz=clazz;      }    }    Method convertToTranslucent=Activity.class.getDeclaredMethod("convertToTranslucent",translucentConversionListenerClazz,ActivityOptions.class);    convertToTranslucent.setAccessible(true);    convertToTranslucent.invoke(activity,null,options);  } catch (  Throwable ignored) {  }}  }
class C{  public int flags(){  return theType.flags();}  }
class C{  public boolean cancel(boolean mayInterruptIfRunning){  return this.request != null && request.cancel(mayInterruptIfRunning);}  }
class C{  public String convertToLowerCase(String table){  return table.toLowerCase();}  }
class C{  public void read(IInputReader reader) throws IOException {  final int magicNumber=reader.readInt();  if (magicNumber != RMA6File.MAGIC_NUMBER) {    throw new IOException("Not an RMA file");  }  final int version=reader.readInt();  if (version != RMA6File.VERSION) {    throw new IOException("Not an RMA " + RMA6File.VERSION + " file");  }  int minorVersion=reader.readInt();  creator=reader.readString();  creationDate=reader.readLong();  blastMode=BlastMode.valueOf(reader.readString());  pairedReads=(reader.read() == 1);  matchClassNames=new String[reader.readInt()];  for (int i=0; i < matchClassNames.length; i++) {    matchClassNames[i]=reader.readString();  }}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public List<CompilationUnit> refined__Program_getCompilationUnitList(){  List<CompilationUnit> list=(List<CompilationUnit>)getChild(0);  list.getNumChild();  return list;}  }
class C{  @SuppressWarnings("deprecation") public static PokkitMaterialData fromBukkit(MaterialData materialData){  return fromBukkit(materialData.getItemType(),materialData.getData());}  }
class C{  public EventDescriptor(long eventID){  this(null,new Long(eventID));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FREE_EXPERIENCE_CHARACTER_CANT_USE_ACCOUNT_WAREHOUSE(String value0){  return new SM_SYSTEM_MESSAGE(1400404,value0);}  }
class C{  public void requestRender(boolean invalidateModel){  ScreenView screenView=getCurrentScreenView();  if (screenView != null) {    if (invalidateModel) {      screenView.getModel().notifyModified(NlModel.ChangeType.REQUEST_RENDER);    } else {      screenView.getModel().requestRender();    }  }}  }
class C{  public PlacesSearchQuery city(Integer value){  return unsafeParam("city",value);}  }
class C{  void fifoGroupsOnOperationAction(Context context,IEntryHolder entry,ITemplateHolder template,IServerTypeDesc tte) throws TransactionConflictException {  Object val=_cacheManager.getTypeData(tte).getFifoGroupingIndex().getIndexValue(entry.getEntryData());  if (context.isMultipleOperation() && context.isFifoGroupValueForMiltipleOperations(val))   return;  if (!_cacheManager.testAndSetFGCacheForEntry(context,entry,template,template.getXidOriginated() == null,tte))   throw _spaceEngine.TX_CONFLICT_EXCEPTION;  template.getXidOriginated().getXtnData().addToFifoGroupsEntries(entry,val);  if (context.isMultipleOperation())   context.setToFifoGroupValueForMiltipleOperations(val);}  }
class C{  public boolean dump_pag(){  return soot.PhaseOptions.getBoolean(options,"dump-pag");}  }
class C{  public static void w(String tag,String msg){  if (sLevel > LEVEL_WARNING) {    return;  }  Log.w(tag,msg);}  }
class C{  public MqttScriptIO(final IMqttConnection connection,final IKBus eventBus,final Script script,final Executor executor){  super(script,executor);  this.connection=connection;}  }
class C{  @RequestMapping(value="/{namespace}",method=RequestMethod.DELETE) public void deleteKeys(@PathVariable String namespace,HttpServletResponse response) throws WebMessageException {  userKeyJsonValueService.deleteNamespaceFromUser(currentUserService.getCurrentUser(),namespace);  messageService.sendJson(WebMessageUtils.ok("All keys from namespace '" + namespace + "' deleted."),response);}  }
class C{  public static int tick2index(Track track,long tick){  int ret=0;  if (tick > 0) {    int low=0;    int high=track.size() - 1;    while (low < high) {      ret=(low + high) >> 1;      long t=track.get(ret).getTick();      if (t == tick) {        break;      } else       if (t < tick) {        if (low == high - 1) {          ret++;          break;        }        low=ret;      } else {        high=ret;      }    }  }  return ret;}  }
class C{  private int addStaticItem(TicklableRecyclerView listView,int textResId){  String text=getString(textResId);  mStaticItemCount++;  return mWithHeaderCursorAdapter.addHeader(text) - 1;}  }
class C{  public Builder shouldStartProxy(boolean startProxy){  this._shouldStartProxy=startProxy;  return this;}  }
class C{  @Override public void onCreate(Bundle icicle){  super.onCreate(icicle);  setContentView(R.layout.activity_camera_viewer);  mView=(SurfaceView)findViewById(R.id.surfaceview);  getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);  mFaceView=new FaceOverlayView(this);  addContentView(mFaceView,new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT));  recyclerView=(RecyclerView)findViewById(R.id.recycler_view);  RecyclerView.LayoutManager mLayoutManager=new LinearLayoutManager(getApplicationContext());  recyclerView.setLayoutManager(mLayoutManager);  recyclerView.setItemAnimator(new DefaultItemAnimator());  handler=new Handler();  faces=new FaceResult[MAX_FACE];  faces_previous=new FaceResult[MAX_FACE];  for (int i=0; i < MAX_FACE; i++) {    faces[i]=new FaceResult();    faces_previous[i]=new FaceResult();  }  getSupportActionBar().setDisplayShowTitleEnabled(true);  getSupportActionBar().setHomeButtonEnabled(true);  getSupportActionBar().setDisplayHomeAsUpEnabled(true);  getSupportActionBar().setTitle("Face Detect RGB");  if (icicle != null)   cameraId=icicle.getInt(BUNDLE_CAMERA_ID,0);}  }
class C{  protected void populateStandardData(Rule rule){  StandardData standardData=new StandardData();  if (rule != null) {    standardData.name=rule.getName();    standardData.description=(Description)rule.getDescription();  }  populateStandardData(standardData);}  }
class C{  public void notifyVerticalEdgeReached(int startY,int finalY,int overY){  mScrollerY.notifyEdgeReached(startY,finalY,overY);}  }
class C{  public double mapTimeFromSecondToFirst(double time2){  for (  AlignedTimeStretch t : stretches) {    if (time2 >= t.secondStart && time2 <= t.secondStart + t.secondDuration) {      if (t.secondDuration == 0.) {        return t.firstStart;      } else {        return t.firstStart + (time2 - t.secondStart) / t.secondDuration * t.firstDuration;      }    }  }  return -1;}  }
class C{  @Override public final void validate() throws ConfigurationException {  if (opcItemName == null) {    throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,"Parameter \"opcItemName\" must not be null");  }}  }
class C{  public XMLGrammarPoolImpl(int initialCapacity){  fGrammars=new Entry[initialCapacity];  fPoolIsLocked=false;}  }
class C{  public void post(Object event){  eventBus.post(event);  Logs.info("published an event({})",event);}  }
class C{  public static int cmdHdr(GeomCmd cmd,int length){  return (cmd.getCmdId() & 0x7) | (length << 3);}  }
class C{  protected void internalTransform(Body body,String phaseName,Map<String,String> options){  if (Options.v().verbose())   G.v().out.println("[" + body.getMethod().getName() + "]     Unrolling Loop Conditions...");  visitingSuccs=new HashSet<Block>();  visitedBlocks=new HashSet<Block>();  this.body=body;  this.maxSize=PhaseOptions.getInt(options,"maxSize");  BlockGraph bg=new BriefBlockGraph(body);  for (  Block b : bg.getHeads())   unrollConditions(b);  if (Options.v().verbose())   G.v().out.println("[" + body.getMethod().getName() + "]     Unrolling Loop Conditions done.");}  }
class C{  public void loadDataStringFromFile(String sFilename){  try {    Histogram.loadDataStringFromFile(sFilename);  } catch (  IOException ioe) {    ioe.printStackTrace();    Histogram.setDataString("");    Graph.setDataString("");  }}  }
class C{  public DefaultConsolePanel(){  setLayout(new BorderLayout(0,0));  textPane=new JTextArea();  textPane.setRows(5);  textPane.setEditable(false);  JScrollPane jp=new JScrollPane(textPane);  add(jp,BorderLayout.CENTER);}  }
class C{  public boolean isDragEnabled(){  return mDragEnabled;}  }
class C{  public static byte[] decode(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,DECODABET);}  }
class C{  private void BuildingTimeReadFile(){  BufferedReader br;  try {    br=new BufferedReader(new FileReader(Settings.sBuildingVersionFileName));    String temp=EncryptionManager.decrypt64bits(br.readLine());    temp=temp == null ? "0" : temp;    Settings.nBuildingTimes=Integer.parseInt(temp);    Settings.nBuildingTimes++;    System.out.println("BuildTime : " + Settings.nBuildingTimes);    br.close();  } catch (  FileNotFoundException e) {  }catch (  IOException e) {    e.printStackTrace();  }catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public static void checkState(boolean expression){  if (!expression) {    throw new IllegalStateException();  }}  }
class C{  public SubHyperplane<Euclidean3D> firstIntersection(final Vector3D point,final Line line){  return recurseFirstIntersection(getTree(true),point,line);}  }
class C{  boolean isValidJimpleName(String prospectiveName){  if (prospectiveName == null)   return false;  for (int i=0; i < prospectiveName.length(); i++) {    char c=prospectiveName.charAt(i);    if (i == 0 && c >= '0' && c <= '9')     return false;    if (!((c >= '0' && c <= '9') || (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')|| (c == '_' || c == '$')))     return false;  }  return true;}  }
class C{  public AttackGymResponse attack(int times) throws LoginFailedException, RemoteServerException {  ArrayList<BattleAction> actions=new ArrayList<>();  for (int i=0; i < times; i++) {    BattleAction action=BattleAction.newBuilder().setType(BattleActionTypeOuterClass.BattleActionType.ACTION_ATTACK).setActionStartMs(api.currentTimeMillis() + (100 * times)).setDurationMs(500).setTargetIndex(-1).build();    actions.add(action);  }  return doActions(actions);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_AlwaysDodge_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200632,skillcaster,skillname);}  }
class C{  @Override public void undoAction(UndoInterface undoRedoObject){  String oldValueObj=(String)undoRedoObject.getOldValue();  attributeChooserComboBox.setSelectedItem(oldValueObj);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_QUEST_SYSTEMMSG_COMPLETE_QUEST(String value0){  return new SM_SYSTEM_MESSAGE(1300616,value0);}  }
class C{  protected void addSecondaryActions(ArrayObjectAdapter secondaryActionsAdapter){  secondaryActionsAdapter.add(mShuffleAction);  secondaryActionsAdapter.add(mRepeatAction);  secondaryActionsAdapter.add(mThumbsDownAction);  secondaryActionsAdapter.add(mThumbsUpAction);}  }
class C{  public void cosh(final double[] operand,final int operandOffset,final double[] result,final int resultOffset){  double[] function=new double[1 + order];  function[0]=FastMath.cosh(operand[operandOffset]);  if (order > 0) {    function[1]=FastMath.sinh(operand[operandOffset]);    for (int i=2; i <= order; ++i) {      function[i]=function[i - 2];    }  }  compose(operand,operandOffset,function,result,resultOffset);}  }
class C{  @RequestMapping(value="/page",method=POST,produces=APPLICATION_JSON_VALUE) public ResponseEntity<PageResponse<AuthorDTO>> findAll(@RequestBody PageRequestByExample<AuthorDTO> prbe) throws URISyntaxException {  PageResponse<AuthorDTO> pageResponse=authorDTOService.findAll(prbe);  return new ResponseEntity<>(pageResponse,new HttpHeaders(),HttpStatus.OK);}  }
class C{  static boolean isAppXml(String mime){  return mime != null && (mime.equals("application/xml") || mime.equals("application/xml-dtd") || mime.equals("application/xml-external-parsed-entity")|| mime.startsWith("application/") && mime.endsWith("+xml"));}  }
class C{  public static double regularizedBeta(double x,double a,double b){  return regularizedBeta(x,a,b,DEFAULT_EPSILON,Integer.MAX_VALUE);}  }
class C{  @Override public void undo(Transaction tx){}  }
class C{  private double[] computeCoefficients(double[] beta){  final int sz=64;  final double[] a=new double[sz];  for (int i=0; i < sz; i++) {    double result=0;    final double[] row=AINV[i];    for (int j=0; j < sz; j++) {      result+=row[j] * beta[j];    }    a[i]=result;  }  return a;}  }
class C{  public static void checkDimension(int dimension,int otherDimension){  if (dimension != otherDimension) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,dimension,otherDimension);  }}  }
class C{  public boolean manifestResourceChanged(@NotNull IDevice device){  InstalledPatchCache cache=myInstantRunContext.getInstalledPatchCache();  HashCode currentHash=myInstantRunContext.getManifestResourcesHash();  HashCode installedHash=cache.getInstalledManifestResourcesHash(device,myInstantRunContext.getApplicationId());  if (installedHash != null && !installedHash.equals(currentHash)) {    return true;  }  return false;}  }
class C{  public synchronized void erase(){  if (fileTable != null) {synchronized (this) {      Set<Object> keys=new HashSet<Object>();      try {        addAllFileTableKeys(keys);      } catch (      IOException e) {        Debug.logError(e,module);      }      for (      Object key : keys) {        try {          V value=fileTable.get(key);          noteRemoval(toKey(key),value);          removeHitCount.incrementAndGet();          fileTable.remove(key);          jdbmMgr.commit();        } catch (        IOException e) {          Debug.logError(e,module);        }      }    }    memoryTable.clear();  } else {    Iterator<Map.Entry<Object,CacheLine<V>>> it=memoryTable.entrySet().iterator();    while (it.hasNext()) {      Map.Entry<Object,CacheLine<V>> entry=it.next();      noteRemoval(toKey(entry.getKey()),entry.getValue().getValue());      removeHitCount.incrementAndGet();      it.remove();    }  }}  }
class C{  public static void apply(Map<Integer,Integer> tax2count,int minSupport,final ProgressListener progressListener){  MinSupportAlgorithm algorithm=new MinSupportAlgorithm(tax2count,minSupport,progressListener);  try {    Map<Integer,Integer> lowSupportTaxa2HighSupportTaxa=algorithm.apply();    for (    Integer lowTaxon : lowSupportTaxa2HighSupportTaxa.keySet()) {      Integer highTaxon=lowSupportTaxa2HighSupportTaxa.get(lowTaxon);      Integer count=tax2count.get(highTaxon);      if (count == null)       tax2count.put(highTaxon,tax2count.get(lowTaxon)); else       tax2count.put(highTaxon,count + tax2count.get(lowTaxon));    }    tax2count.keySet().removeAll(lowSupportTaxa2HighSupportTaxa.keySet());  } catch (  CanceledException e) {    Basic.caught(e);  }}  }
class C{  public boolean union(RWSet other){  if (other == null)   return false;  boolean ret=false;  if (other.getCallsNative())   ret=setCallsNative();  if (other.getFields().isEmpty() && other.getGlobals().isEmpty())   return ret;  return sets.add(other) | ret;}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public void readFrom(Reader from) throws ParserConfigurationException, SAXException, IOException {  String inputData=FileUtils.getReaderAsString(from);  setData(inputData);}  }
class C{  public Node findChild(char c){  for (  Node n : children) {    if (n.c == c)     return n;  }  return null;}  }
class C{  public int EOF_sym(){  return 0;}  }
class C{  public synchronized boolean isEmpty(){  return listeners.isEmpty();}  }
class C{  public static Observable<float[]> createFrom3D(Observable<float[]> stream){  final JKalman kalman=new JKalman(6,3);  Matrix m=new Matrix(3,1);  double[][] tr={{1,0,0,1,0,0},{0,1,0,0,1,0},{0,0,1,0,0,1},{0,0,0,1,0,0},{0,0,0,0,1,0},{0,0,0,0,0,1}};  kalman.setTransition_matrix(new Matrix(tr));  kalman.setError_cov_post(kalman.getError_cov_post().identity());  final float[] buffer=new float[3];  return Observable.create(null);}  }
class C{  public Set<SootMethod> resolveAbstractDispatch(SootClass abstractType,SootMethod m){  String methodSig=m.getSubSignature();  HashSet<SootClass> resolved=new HashSet<SootClass>();  HashSet<SootMethod> ret=new HashSet<SootMethod>();  LinkedList<SootClass> worklist=new LinkedList<SootClass>();  worklist.add(abstractType);  while (!worklist.isEmpty()) {    SootClass concreteType=(SootClass)worklist.removeFirst();    SootClass savedConcreteType=concreteType;    if (concreteType.isInterface()) {      worklist.addAll(getAllImplementersOfInterface(concreteType));      continue;    }    Collection<SootClass> c=classToSubclasses.get(concreteType);    if (c != null)     worklist.addAll(c);    if (!concreteType.isAbstract()) {      while (true) {        if (resolved.contains(concreteType))         break;        resolved.add(concreteType);        SootMethod method=concreteType.getMethodUnsafe(methodSig);        if (method != null) {          if (isVisible(concreteType,m)) {            if (method.isAbstract())             throw new RuntimeException("abstract dispatch resolved to abstract method!\nAbstract Type: " + abstractType + "\nConcrete Type: "+ savedConcreteType+ "\nMethod: "+ m); else {              ret.add(method);              break;            }          }        }        if (!concreteType.hasSuperclass()) {          if (concreteType.isPhantom())           break; else           throw new RuntimeException("could not resolve abstract dispatch!\nAbstract Type: " + abstractType + "\nConcrete Type: "+ savedConcreteType+ "\nMethod: "+ m);        }        concreteType=concreteType.getSuperclass();      }    }  }  return ret;}  }
class C{  public Color mul(float value){  this.r*=value;  this.g*=value;  this.b*=value;  this.a*=value;  clamp();  return this;}  }
class C{  @RequestMapping(value={"/recordings"},method=RequestMethod.GET) public String returnRecordingsView(){  return "recordings";}  }
class C{  protected void qualityValue(boolean quality){}  }
class C{  protected final boolean isClosed(){  return m_closed;}  }
class C{  public Grammar removeGrammar(XMLGrammarDescription desc){synchronized (fGrammars) {    int hash=hashCode(desc);    int index=(hash & 0x7FFFFFFF) % fGrammars.length;    for (Entry entry=fGrammars[index], prev=null; entry != null; prev=entry, entry=entry.next) {      if ((entry.hash == hash) && equals(entry.desc,desc)) {        if (prev != null) {          prev.next=entry.next;        } else {          fGrammars[index]=entry.next;        }        Grammar tempGrammar=entry.grammar;        entry.grammar=null;        fGrammarCount--;        return tempGrammar;      }    }    return null;  }}  }
class C{  private void initFromName(String name){  PermissionInfo[] pia=parsePermissions(name);  ArrayList l=new ArrayList();  for (int i=0; i < pia.length; i++) {    PermissionInfo pi=pia[i];    SecurityManager sm=System.getSecurityManager();    if (sm != null) {      int d=pi.type.lastIndexOf('.');      if (d != -1) {        sm.checkPackageAccess(pi.type.substring(0,d));      }    }    Class cl;    try {      cl=Class.forName(pi.type);    } catch (    ClassNotFoundException ex) {      l.add(new UnresolvedPermission(pi.type,pi.name,pi.actions,null));      continue;    }    if (!Permission.class.isAssignableFrom(cl)) {      throw new IllegalArgumentException("not a permission class: " + cl);    }    if (!Modifier.isPublic(cl.getModifiers())) {      throw new IllegalArgumentException("non-public permission class: " + cl);    }    if (pi.name == null) {      try {        Constructor c=cl.getConstructor(PARAMS0);        l.add(c.newInstance(new Object[0]));        continue;      } catch (      Exception ex) {      }    }    if (pi.actions == null) {      try {        Constructor c=cl.getConstructor(PARAMS1);        l.add(c.newInstance(new Object[]{pi.name}));        continue;      } catch (      Exception ex) {      }    }    try {      Constructor c=cl.getConstructor(PARAMS2);      l.add(c.newInstance(new Object[]{pi.name,pi.actions}));      continue;    } catch (    Exception ex) {    }    throw new IllegalArgumentException("uninstantiable permission class: " + cl);  }  grants=flatten((Permission[])l.toArray(new Permission[l.size()]));}  }
class C{  public static final int find(int[] a,int key){  for (int i=0; i < a.length; i++) {    if (a[i] == key) {      return i;    }  }  return -1;}  }
class C{  public boolean isPartitionedSpace(){  return _clusterInfo.isPartitioned();}  }
class C{  public boolean addAttribute(String attribute,Object value,boolean allowReplaceAttribute){  boolean change=false;  if (allowReplaceAttribute || !table.columnKeySet().contains(attribute)) {    for (    String sample : getSampleOrder()) {      put(sample,attribute,value);    }    change=true;  }  return change;}  }
class C{  public static long countLines(final File selectedFile) throws SpyException {  try {    long count=0;    BufferedReader in=new BufferedReader(new FileReader(selectedFile));    while ((in.readLine()) != null) {      count++;    }    in.close();    return count;  } catch (  IOException e) {    throw new SpyException("Can't open the file at " + selectedFile.getAbsolutePath(),e);  }}  }
class C{  private void renderSymbol(Style style){  if (!dataLoaded) {    createFeature();  }  Rectangle imageSize=new Rectangle(0,0,this.getWidth(),this.getHeight());switch (geometryType) {case RASTER:    renderRasterMap(imageSize,style,DPI);  break;case POINT:case LINE:case POLYGON:renderVectorMap(featureList,imageSize,style,DPI);break;default :validSymbol=false;break;}repaint();}  }
class C{  public Iterator nodes(){  return m_nodeTuples.iterator(nodeRows());}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GET_EXP2_VITAL_BONUS(long num0,long num1){  return new SM_SYSTEM_MESSAGE(1400348,num0,num1);}  }
class C{  static public Object stringToValue(String s){  if (s.equals("")) {    return s;  }  if (s.equalsIgnoreCase("true")) {    return Boolean.TRUE;  }  if (s.equalsIgnoreCase("false")) {    return Boolean.FALSE;  }  if (s.equalsIgnoreCase("null")) {    return JSONObject.NULL;  }  char b=s.charAt(0);  if ((b >= '0' && b <= '9') || b == '.' || b == '-' || b == '+') {    if (b == '0' && s.length() > 2 && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {      try {        return new Integer(Integer.parseInt(s.substring(2),16));      } catch (      Exception ignore) {      }    }    try {      if (s.indexOf('.') > -1 || s.indexOf('e') > -1 || s.indexOf('E') > -1) {        return Double.valueOf(s);      } else {        Long myLong=new Long(s);        if (myLong.longValue() == myLong.intValue()) {          return new Integer(myLong.intValue());        } else {          return myLong;        }      }    } catch (    Exception ignore) {    }  }  return s;}  }
class C{  @Override public int hashCode(){  if (fExpandedSystemId != null) {    return fExpandedSystemId.hashCode();  }  if (fPublicId != null) {    return fPublicId.hashCode();  }  return 0;}  }
class C{  void assignLocalToStaticField(Local right,String field){  PurityNode node=PurityGlobalNode.node;  localEscapes(right);  mutated.put(node,field);  nodes.add(node);  if (doCheck)   sanityCheck();}  }
class C{  @Override public boolean contains(String identifier){  return blacklist.contains(identifier);}  }
class C{  public void update(GeoServerConnection existingItem){  this.connectionName=existingItem.connectionName;  this.url=existingItem.url;  this.userName=existingItem.userName;  this.password=existingItem.password;}  }
class C{  public void calcXBounds(BarLineScatterCandleBubbleDataProvider dataProvider,int xAxisModulus){  int low=dataProvider.getLowestVisibleXIndex();  int high=dataProvider.getHighestVisibleXIndex();  int subLow=(low % xAxisModulus == 0) ? xAxisModulus : 0;  mMinX=Math.max((low / xAxisModulus) * (xAxisModulus) - subLow,0);  mMaxX=Math.min((high / xAxisModulus) * (xAxisModulus) + xAxisModulus,(int)dataProvider.getXChartMax());}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  private void init(){  mPaint=new Paint();  mPath=new Path();  startPoint=new Point(300,150);  endPoint=new Point(900,150);  assistPoint1=new Point(500,450);  assistPoint2=new Point(700,450);  mPaint.setAntiAlias(true);  mPaint.setDither(true);}  }
class C{  public WebhookResponse send(String url,Payload payload) throws IOException {  Response httpResponse=new SlackHttpClient().postJsonPostRequest(url,payload);  String body=httpResponse.body().string();  SlackHttpClient.debugLog(httpResponse,body);  return WebhookResponse.builder().code(httpResponse.code()).message(httpResponse.message()).body(body).build();}  }
class C{  public MarketSearchQueryWithExtended priceTo(Integer value){  return unsafeParam("price_to",value);}  }
class C{  public AWSIotMessage(String topic,AWSIotQos qos,byte[] payload){  this.topic=topic;  this.qos=qos;  setPayload(payload);}  }
class C{  static void fwPrint(String s,int size){  s+="                                             ";  s=s.substring(0,size);  System.out.print(s);}  }
class C{  public SampleAttributeTable copy(){  final SampleAttributeTable sampleAttributeTable=new SampleAttributeTable();  try (StringWriter w=new StringWriter()){    write(w,false,true);    sampleAttributeTable.read(new StringReader(w.toString()),getSampleOrder(),false);  } catch (  IOException e) {    Basic.caught(e);  }  return sampleAttributeTable;}  }
class C{  private synchronized void _setRunning(boolean b){  m_run=b;}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase(getSyntax());  megan.remote.ServicePanel servicePanel=((megan.remote.RemoteServiceBrowser)getViewer()).getServicePanel();  if (servicePanel != null) {    TreePath[] paths=servicePanel.getFileTree().getSelectionPaths();    if (paths != null)     servicePanel.collapse(paths); else     servicePanel.collapse((DefaultMutableTreeNode)servicePanel.getFileTree().getModel().getRoot());  }}  }
class C{  public static void copyInternalVector3(FloatBuffer buf,int fromPos,int toPos){  copyInternal(buf,fromPos * 3,toPos * 3,3);}  }
class C{  public void clearCommands(){synchronized (this) {    System.out.println("JETTISONING " + commandQueue.size() + " COMMANDS");    commandQueue.clear();  }}  }
class C{  public WebDriverClosingRule(Injector injector){  this.injector=injector;}  }
class C{  public Editor edit() throws IOException {  return DiskLruCache.this.edit(key,sequenceNumber);}  }
class C{  public String validateEntityName(String entityName) throws GenericEntityException {  if (entityName == null) {    return null;  }  Set<String> allEntities=this.getEntityNames();  while (!allEntities.contains(entityName) && entityName.length() > 0) {    entityName=entityName.substring(1);  }  return (entityName.length() > 0 ? entityName : null);}  }
class C{  private void addToExceptionList(soot.jimple.Stmt from,soot.jimple.Stmt to,soot.jimple.Stmt with,soot.SootClass exceptionClass){  if (exceptionTable == null) {    exceptionTable=new ArrayList<Trap>();  }  soot.Trap trap=soot.jimple.Jimple.v().newTrap(exceptionClass,from,to,with);  exceptionTable.add(trap);}  }
class C{  private boolean isValueSupported(Object value){  for (int i=0; i < values.length; i++) {    if (value.equals(values[i])) {      return true;    }  }  return false;}  }
class C{  @Override public void onBindViewHolder(T holder,int position){  ItemIndex index=getItemIndex(position);  onBindViewHolderItemType(holder,index,index.getType());}  }
class C{  public void apply(PGraphicsOpenGL src,PGraphicsOpenGL dst,float[] kernel){  if (src == dst) {    System.out.println("Convolution error: read-write race");    return;  }  if (kernel.length < 9)   return;  Texture tex_src=src.getTexture();  if (!tex_src.available())   return;  dst.beginDraw();  context.begin();  apply(tex_src.glName,dst.width,dst.height,kernel);  context.end("Convolution.apply");  dst.endDraw();}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  execute("set layout=" + AlignmentViewer.AlignmentLayout.ByName.toString() + ";zoom axis=both what=fit;");}  }
class C{  public void initializeImages(URL baseURL){  createImageDescriptor(IRevisionGraphConstants.IMG_EXPORT_IMAGE,baseURL);  createImageDescriptor(IRevisionGraphConstants.IMG_FILTER_CONNECTIONS,baseURL);  createImageDescriptor(IRevisionGraphConstants.IMG_REVISION_GRAPH_CHRONOLOGICAL,baseURL);  createImageDescriptor(IRevisionGraphConstants.IMG_SHOW_DELETED,baseURL);}  }
class C{  public CMMModel train(String inputFileName,String modelFileName,CMMParams params){  JavaRDD<String> lines=jsc.textFile(inputFileName);  cmmModel=train(lines.collect(),modelFileName,params);  return cmmModel;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_CHECK_INSTANCE_COOL_TIME(){  return new SM_SYSTEM_MESSAGE(1400032);}  }
class C{  public Bundler putFloatArray(String key,float[] value){  bundle.putFloatArray(key,value);  return this;}  }
class C{  @Override public boolean isEnabled(){  return false;}  }
class C{  public static void clearSubscribers(){  SUBSCRIBERS.clear();}  }
class C{  public boolean filterOut(final SAMRecord record){  if (include) {    if (record.getMateNegativeStrandFlag()) {      return false;    }  } else {    if (!record.getMateNegativeStrandFlag()) {      return false;    }  }  return true;}  }
class C{  private void transform(){  final int n=matrixT.length;  final double norm=getNorm();  final ShiftInfo shift=new ShiftInfo();  int iteration=0;  int iu=n - 1;  while (iu >= 0) {    final int il=findSmallSubDiagonalElement(iu,norm);    if (il == iu) {      matrixT[iu][iu]+=shift.exShift;      iu--;      iteration=0;    } else     if (il == iu - 1) {      double p=(matrixT[iu - 1][iu - 1] - matrixT[iu][iu]) / 2.0;      double q=p * p + matrixT[iu][iu - 1] * matrixT[iu - 1][iu];      matrixT[iu][iu]+=shift.exShift;      matrixT[iu - 1][iu - 1]+=shift.exShift;      if (q >= 0) {        double z=FastMath.sqrt(FastMath.abs(q));        if (p >= 0) {          z=p + z;        } else {          z=p - z;        }        final double x=matrixT[iu][iu - 1];        final double s=FastMath.abs(x) + FastMath.abs(z);        p=x / s;        q=z / s;        final double r=FastMath.sqrt(p * p + q * q);        p/=r;        q/=r;        for (int j=iu - 1; j < n; j++) {          z=matrixT[iu - 1][j];          matrixT[iu - 1][j]=q * z + p * matrixT[iu][j];          matrixT[iu][j]=q * matrixT[iu][j] - p * z;        }        for (int i=0; i <= iu; i++) {          z=matrixT[i][iu - 1];          matrixT[i][iu - 1]=q * z + p * matrixT[i][iu];          matrixT[i][iu]=q * matrixT[i][iu] - p * z;        }        for (int i=0; i <= n - 1; i++) {          z=matrixP[i][iu - 1];          matrixP[i][iu - 1]=q * z + p * matrixP[i][iu];          matrixP[i][iu]=q * matrixP[i][iu] - p * z;        }      }      iu-=2;      iteration=0;    } else {      computeShift(il,iu,iteration,shift);      if (++iteration > MAX_ITERATIONS) {        throw new MathIllegalStateException(LocalizedCoreFormats.CONVERGENCE_FAILED,MAX_ITERATIONS);      }      final double[] hVec=new double[3];      final int im=initQRStep(il,iu,shift,hVec);      performDoubleQRStep(il,im,iu,shift,hVec);    }  }}  }
class C{  public boolean isDashedHighlightLineEnabled(){  return mHighlightDashPathEffect == null ? false : true;}  }
class C{  public VelocityScroller(Context context){  this(context,null);}  }
class C{  private static InvocationConstraint[] concat(InvocationConstraint[] arr1,InvocationConstraint[] arr2){  InvocationConstraint[] res=new InvocationConstraint[arr1.length + arr2.length];  System.arraycopy(arr1,0,res,0,arr1.length);  System.arraycopy(arr2,0,res,arr1.length,arr2.length);  return res;}  }
class C{  @Override public double[] makeCumulativeTestValues(){  return new double[]{0.0,0.0,0.0001,0.25 / 1.75,0.4999 / 1.75,0.5 / 1.75,0.5001 / 1.75,0.75 / 1.75,1.5 / 1.75,1.7499 / 1.75,1.0,1.0};}  }
class C{  private static String[] cons(Set s,StringBuffer b){  String[] vals=new String[s.size() * 2];  int i=0;  for (Iterator iter=s.iterator(); iter.hasNext(); ) {    Principal p;    try {      p=(Principal)iter.next();    } catch (    ClassCastException e) {      throw new IllegalArgumentException("sets must contain Principals");    }    String v=p.getClass().getName();    if (i > 0) {      b.append(' ');    }    b.append(v);    vals[i++]=v;    v=p.getName();    b.append(" \"");    b.append(v);    b.append('"');    vals[i++]=v;  }  return vals;}  }
class C{  public void addLines(@NotNull List<RangedContinuousSeries> data){  data.forEach(null);}  }
class C{  @Override public long skip(long n) throws IOException {  long remaining=n;  final char[] ch=new char[fBuffer.length];  do {    int length=ch.length < remaining ? ch.length : (int)remaining;    int count=read(ch,0,length);    if (count > 0) {      remaining-=count;    } else {      break;    }  } while (remaining > 0);  long skipped=n - remaining;  return skipped;}  }
class C{  @Override public void startElement(String uri,String localName,String qName,Attributes atts) throws SAXException {  writeText4Links();  if (!ignoreElement(uri,localName,qName,atts)) {    elementLevel++;    nsSupport.pushContext();    if (forceDTD && !hasOutputDTD) {      startDTD(localName == null ? qName : localName,"","");    }    write('<');    writeName(uri,localName,qName,true);    writeAttributes(atts);    if (elementLevel == 1) {      forceNSDecls();    }    if (!mOmitXHTMLNamespace || !"html".equalsIgnoreCase(localName)) {      writeNSDecls();    }    write('>');    if (htmlMode && (qName.equals("script") || qName.equals("style"))) {      cdataElement=true;    }    if (htmlMode && localName.equals("a")) {      mIgnoreChars=true;    }    super.startElement(uri,localName,qName,atts);  }}  }
class C{  public static boolean isFluttering(){  return Arrays.stream(ProjectManager.getInstance().getOpenProjects()).anyMatch(null);}  }
class C{  protected NotesEditQuery noteId(int value){  return unsafeParam("note_id",value);}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  NewFriendDao.dropTable(db,ifExists);}  }
class C{  public String createFilePath(String key){  return createFilePath(mCacheDir,key);}  }
class C{  public static void fixme(Object... notes){}  }
class C{  public static Bitmap rotateBitmap(Bitmap bitmap,int degrees){  if (bitmap != null) {    Matrix m=new Matrix();    m.postRotate(degrees);    bitmap=Bitmap.createBitmap(bitmap,0,0,bitmap.getWidth(),bitmap.getHeight(),m,true);    return bitmap;  }  return null;}  }
class C{  public SM_ACCOUNT_DISCONNECTED(int accountId){  super(0x03);  this.accountId=accountId;}  }
class C{  public void selectAll(boolean select){  dir.getMainViewer().selectAllNodes(select);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DispelDeBuffMental_A_TO_B(String skillcaster,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200969,skillcaster,skilltarget,skillname);}  }
class C{  public static InputStream toInputStream(CharSequence input){  return toInputStream(input,Charset.defaultCharset());}  }
class C{  public void resetFlags(){  mCompositorView.resetFlags();}  }
class C{  public JSONArray(Collection<Object> collection){  this.myArrayList=new ArrayList<Object>();  if (collection != null) {    Iterator<Object> iter=collection.iterator();    while (iter.hasNext()) {      this.myArrayList.add(JSONObject.wrap(iter.next()));    }  }}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public LUBType fullCopy(){  LUBType tree=(LUBType)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_PetOrderUseUltraSkill_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201000,skilltarget,skillcaster,skillname);}  }
class C{  public boolean isShowLabels(){  return showLabels;}  }
class C{  @Override public long skip(long n) throws IOException {  return 2 * super.skip(n / 2 * inputChannels);}  }
class C{  public int addChildEdge(int parent,int child){  throw new UnsupportedOperationException("Changes to tree structure not allowed for spanning trees.");}  }
class C{  @Override public final int skipBytes(int n) throws IOException {  return dis.skipBytes(n);}  }
class C{  public ContextSet immutableCopy(){synchronized (contexts) {    return new ContextSet(new HashSet<>(contexts));  }}  }
class C{  public synchronized ChangeReport onCommandTagAdd(final CommandTagAdd commandTagAddChange){  log.debug("entering onCommandTagAdd()");  if (log.isDebugEnabled())   log.debug("changeId: " + commandTagAddChange.getChangeId());  ChangeReport changeReport=new ChangeReport(commandTagAddChange);  Long equipmentId=commandTagAddChange.getEquipmentId();  ProcessConfiguration configuration=ProcessConfigurationHolder.getInstance();  if (!configuration.getEquipmentConfigurations().containsKey(equipmentId)) {    for (    EquipmentConfiguration equipmentConfiguration : configuration.getEquipmentConfigurations().values()) {      if (equipmentConfiguration.getSubEquipmentConfigurations().containsKey(equipmentId)) {        equipmentId=equipmentConfiguration.getId();      }    }  }  Map<Long,SourceCommandTag> sourceCommandTags=getSourceCommandTags(equipmentId);  if (sourceCommandTags == null) {    log.warn("cannot add command tag - equipment id: " + commandTagAddChange.getEquipmentId() + " is unknown");    changeReport.appendError("Equipment does not exist: " + equipmentId);    return changeReport;  }  SourceCommandTag sourceCommandTag=commandTagAddChange.getSourceCommandTag();  try {    sourceCommandTag.validate();  } catch (  ConfigurationException e) {    changeReport.appendError("Error validating command tag");    changeReport.appendError(StackTraceHelper.getStackTrace(e));    return changeReport;  }  Long commandTagId=sourceCommandTag.getId();  if (sourceCommandTags.containsKey(commandTagId)) {    log.warn("cannot add command tag id: " + commandTagId + " to equipment id: "+ commandTagAddChange.getEquipmentId()+ " This equipment already has "+ "tag with that id");    changeReport.appendError("CommandTag " + commandTagId + " is already in equipment "+ equipmentId);  } else {    sourceCommandTags.put(sourceCommandTag.getId(),sourceCommandTag);    changeReport.appendInfo("Core added command tag with id " + sourceCommandTag.getId() + " successfully to equipment "+ equipmentId);    List<ICoreCommandTagChanger> coreChangers=coreCommandTagChangers.get(equipmentId);    if (coreChangers != null) {      for (      ICoreCommandTagChanger commandTagChanger : coreChangers) {        commandTagChanger.onAddCommandTag(sourceCommandTag,changeReport);      }    }    ICommandTagChanger commandTagChanger=commandTagChangers.get(equipmentId);    if (commandTagChanger != null) {      commandTagChanger.onAddCommandTag(sourceCommandTag,changeReport);    } else {      changeReport.appendError("It was not possible to apply the changes" + "to the implementation part. No command tag changer was found.");      changeReport.setState(CHANGE_STATE.REBOOT);    }  }  return changeReport;}  }
class C{  private void addDataElementValues(DataQueryParams params,Grid grid){  if (!params.getAllDataElements().isEmpty() && !params.isSkipData()) {    DataQueryParams dataSourceParams=DataQueryParams.newBuilder(params).retainDataDimension(DataDimensionItemType.DATA_ELEMENT).withIncludeNumDen(false).build();    Map<String,Object> aggregatedDataMap=getAggregatedDataValueMapObjectTyped(dataSourceParams);    for (    Map.Entry<String,Object> entry : aggregatedDataMap.entrySet()) {      Object value=AnalyticsUtils.getRoundedValueObject(params,entry.getValue());      grid.addRow();      grid.addValues(entry.getKey().split(DIMENSION_SEP));      grid.addValue(value);      if (params.isIncludeNumDen()) {        grid.addNullValues(3);      }    }  }}  }
class C{  public AccessPath merge(AccessPath ap){  return appendFields(ap.fields,ap.fieldTypes,ap.taintSubFields);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_WeaponStatUp_ME_TO_SELF(String value0,String skillname){  return new SM_SYSTEM_MESSAGE(1200429,value0,skillname);}  }
class C{  public void clear(AbsoluteTableIdentifier absoluteTableIdentifier){  tableLockMap.remove(absoluteTableIdentifier);  tableBlocksMap.remove(absoluteTableIdentifier);}  }
class C{  @RequestMapping(value="/users/{login:" + Constants.LOGIN_REGEX + "}",method=RequestMethod.DELETE,produces=MediaType.APPLICATION_JSON_VALUE) @Timed @Secured(AuthoritiesConstants.ADMIN) public ResponseEntity<Void> deleteUser(@PathVariable String login){  log.debug("REST request to delete User: {}",login);  userService.deleteUserInformation(login);  return ResponseEntity.ok().headers(HeaderUtil.createAlert("A user is deleted with identifier " + login,login)).build();}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"USE_AREA\" ("+ "\"AREAID\" TEXT,"+ "\"AREAID2345\" TEXT,"+ "\"AREA_NAME\" TEXT,"+ "\"MAIN\" INTEGER);");}  }
class C{  public void addColumn(String name,int length){  int idx=names.length;  ensureCapacity(idx + 1);  names[idx]=name;  cols[idx + 1]=cols[idx] + length;}  }
class C{  private void removeKey(String key){  Cacheable cacheable=lruCacheMap.get(key);  if (null != cacheable) {    currentSize=currentSize - cacheable.getMemorySize();  }  lruCacheMap.remove(key);  LOGGER.info("Removed level entry from InMemory level lru cache :: " + key);}  }
class C{  public CorrelatedRandomVectorGenerator(RealMatrix covariance,double small,NormalizedRandomGenerator generator){  int order=covariance.getRowDimension();  mean=new double[order];  for (int i=0; i < order; ++i) {    mean[i]=0;  }  final RectangularCholeskyDecomposition decomposition=new RectangularCholeskyDecomposition(covariance,small);  root=decomposition.getRootMatrix();  this.generator=generator;  normalized=new double[decomposition.getRank()];}  }
class C{  @After public void afterTest(){  removeTestData();}  }
class C{  public static void o(Zmat A){  o(A,Parameters.OutputFieldWidth,Parameters.OutputFracPlaces);}  }
class C{  public StorageSetQuery(VkApiClient client,UserActor actor,String key){  super(client,"storage.set",OkResponse.class);  accessToken(actor.getAccessToken());  key(key);}  }
class C{  protected int findClosest(int c){  if (colorTab == null)   return -1;  int r=(c >> 16) & 0xff;  int g=(c >> 8) & 0xff;  int b=(c >> 0) & 0xff;  int minpos=0;  int dmin=256 * 256 * 256;  int len=colorTab.length;  for (int i=0; i < len; ) {    int dr=r - (colorTab[i++] & 0xff);    int dg=g - (colorTab[i++] & 0xff);    int db=b - (colorTab[i] & 0xff);    int d=dr * dr + dg * dg + db * db;    int index=i / 3;    if (usedEntry[index] && (d < dmin)) {      dmin=d;      minpos=index;    }    i++;  }  return minpos;}  }
class C{  public void java_lang_Class_getSuperclass(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getClassObject());}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public FieldDecl fullCopy(){  FieldDecl tree=(FieldDecl)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public Vector1D toSubSpace(Vector<Euclidean3D> vector){  return toSubSpace((Point<Euclidean3D>)vector);}  }
class C{  protected FileAlterationObserver(FileEntry rootEntry,FileFilter fileFilter,IOCase caseSensitivity){  if (rootEntry == null) {    throw new IllegalArgumentException("Root entry is missing");  }  if (rootEntry.getFile() == null) {    throw new IllegalArgumentException("Root directory is missing");  }  this.rootEntry=rootEntry;  this.fileFilter=fileFilter;  if (caseSensitivity == null || caseSensitivity.equals(IOCase.SYSTEM)) {    this.comparator=NameFileComparator.NAME_SYSTEM_COMPARATOR;  } else   if (caseSensitivity.equals(IOCase.INSENSITIVE)) {    this.comparator=NameFileComparator.NAME_INSENSITIVE_COMPARATOR;  } else {    this.comparator=NameFileComparator.NAME_COMPARATOR;  }}  }
class C{  public NGramDistroDocument(int iMinGraphSize,int iMaxGraphSize,int iGraphCorrelationWindow,int iMinHistogramSize,int iMaxHistogramSize){  Graph=new DocumentNGramDistroGraph(iMinGraphSize,iMaxGraphSize,iGraphCorrelationWindow);  Histogram=new DocumentNGramHistogram(iMinHistogramSize,iMaxHistogramSize);}  }
class C{  public void removeExternalTestDir(){  deleteDir(new File(EXT_TEST_DIR));}  }
class C{  private SystemConfig(String[] confArgs) throws ConfigurationException {  Properties locationProps=Locator.deriveDirectories();  rootDir=Locator.getLocation(locationProps,Locator.GS_HOME);  gsLib=Locator.getLib(locationProps);  gsLibRequired=Locator.getLibRequired(locationProps);  gsLibPlatform=Locator.getLibPlatform(locationProps);  gsLibOptional=Locator.getLibOptional(locationProps);  if (confArgs == null || confArgs.length == 0) {    this.configArgs=new String[]{"-"};    overrideArgs=new String[0];    configParms=new String[0];  } else {    if (",".equals(confArgs[confArgs.length - 1])) {      List<String> trimConfArgs=new ArrayList<String>(confArgs.length - 1);      for (int i=0; i < confArgs.length - 1; ++i) {        trimConfArgs.add(confArgs[i]);      }      confArgs=trimConfArgs.toArray(new String[trimConfArgs.size()]);    }    configParms=new String[confArgs.length];    System.arraycopy(confArgs,0,configParms,0,configParms.length);    ConfigurationParser configParser=null;    try {      configParser=new ConfigurationParser(SystemConfig.class.getClassLoader());    } catch (    Exception e) {      logger.log(Level.WARNING,"Creating ConfigurationParser",e);    }    String configFile=null;    ArrayList<String> configList=new ArrayList<String>();    if (confArgs[0].endsWith(".config"))     configFile=confArgs[0];    for (int i=0; i < confArgs.length; i++) {      if (confArgs[i].endsWith(".xml")) {        if (configParser != null) {          try {            String[] args=configParser.parseConfiguration(confArgs[i]);            for (int j=0; j < args.length; j++)             configList.add(args[j]);          } catch (          Exception e) {            logger.log(Level.WARNING,"Parsing override config file " + "[" + confArgs[i] + "]",e);          }        }      } else {        if (!confArgs[i].endsWith(".config")) {          if (confArgs[i].indexOf('=') == -1 && i + 1 < confArgs.length) {            if (confArgs[i + 1].indexOf('=') == -1) {              configList.add(confArgs[i] + "=\"" + confArgs[++i]+ "\"");            }          } else {            configList.add(confArgs[i]);          }        }      }    }    addedPlatformJars=new ArrayList<URL>(configList.size());    for (Iterator<String> iterator=configList.iterator(); iterator.hasNext(); ) {      String configArg=iterator.next();      if (configArg.indexOf("addPlatformJARs") != -1) {        iterator.remove();        Configuration config=ConfigurationProvider.getInstance(new String[]{"-",configArg});        URL[] urls=(URL[])config.getEntry(COMPONENT,"addPlatformJARs",URL[].class,new URL[0]);        addedPlatformJars.addAll(Arrays.asList(urls));      }    }    overrideArgs=configList.toArray(new String[configList.size()]);    if (configFile != null) {      configArgs=new String[configList.size() + 1];      URL configFileURL=BootUtil.getResourceURL(configFile,null);      if (configFileURL != null) {        try {          configArgs[0]=configFileURL.toExternalForm();        } catch (        Exception e) {          logger.log(Level.WARNING,"Failed to parse Jini Configuration file " + "[" + configFileURL + "].",e);        }      } else {        configArgs[0]=configFile;      }      for (int i=1; i < configArgs.length; i++)       configArgs[i]=configList.get(i - 1);    } else {      configArgs=new String[configList.size() + 1];      configArgs[0]="-";      for (int i=1; i < configArgs.length; i++)       configArgs[i]=configList.get(i - 1);    }  }  config=ConfigurationProvider.getInstance(configArgs);  commonsLoggingPattern=Pattern.compile("commons-logging.*\\.jar");}  }
class C{  public static SSLContext createSSLContext(TrustManager trustManager,KeyManager keyManager){  try {    SSLContext ctx=SSLContext.getInstance("TLS");    ctx.init(new KeyManager[]{keyManager},new TrustManager[]{trustManager},null);    return ctx;  } catch (  NoSuchAlgorithmException|KeyManagementException e) {    throw new RuntimeException("Failed to create SSLContext",e);  }}  }
class C{  public EncryptionKeyPair(int baseKey){  this.baseKey=baseKey;  this.keys=new byte[2][];  this.keys[SERVER]=new byte[]{(byte)(baseKey & 0xff),(byte)((baseKey >> 8) & 0xff),(byte)((baseKey >> 16) & 0xff),(byte)((baseKey >> 24) & 0xff),(byte)0xa1,(byte)0x6c,(byte)0x54,(byte)0x87};  this.keys[CLIENT]=new byte[this.keys[SERVER].length];  System.arraycopy(this.keys[SERVER],0,this.keys[CLIENT],0,this.keys[SERVER].length);  this.lastUpdate=System.currentTimeMillis();}  }
class C{  public static byte[] readFileToByteArray(File file) throws IOException {  InputStream in=null;  try {    in=openInputStream(file);    return IOUtils.toByteArray(in,file.length());  }  finally {    IOUtils.closeQuietly(in);  }}  }
class C{  public GroupsGetByIdQuery fields(List<GroupField> value){  return unsafeParam("fields",value);}  }
class C{  public void addNewSpawnMap(SpawnMap spawnMap){  if (templates == null) {    templates=new ArrayList<SpawnMap>();  }  templates.add(spawnMap);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_STIGMA_CANNT_EQUIP_STONE_OUT_OF_AVAILABLE_STIGMA_POINT(String value0){  return new SM_SYSTEM_MESSAGE(1300406,value0);}  }
class C{  public boolean isVisible(int row){  return getBoolean(row,VisualItem.VISIBLE);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_UNION_LOOTING_CHANGED_RULE(String value0,String value1,String value2){  return new SM_SYSTEM_MESSAGE(1400626,value0,value1,value2);}  }
class C{  public void registerListener(Condition condition,int cPriority,EventListener listener){  getListenerForCondition(condition,cPriority).registerListener(listener);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Deform_ME_TO_B(String skilltarget,String value0,String skillname){  return new SM_SYSTEM_MESSAGE(1200501,skilltarget,value0,skillname);}  }
class C{  public ByteBuffer toByteBuffer(){  ByteBuffer buff=ByteBuffer.allocate(totalsize).put(prefix);  for (int i=0; i < content.size(); ++i)   buff.put(content.get(i));  return buff;}  }
class C{  @Override public void postEvent(EventLogEvent event){  String subject=emailTextProcessor.getSubject(event);  String msg=emailTextProcessor.getMessage(event);  Set<String> addressees=emailTextProcessor.getAddressees(event);  emailService.doSend(subject,msg,addressees.toArray(new String[addressees.size()]));}  }
class C{  public BaseFlag<T> withListener(Consumer<T> predicate){  listeners.add(predicate);  return this;}  }
class C{  @Override public Object invoke(final Object proxy,final Method method,final Object[] args) throws Throwable {  try {    return method.invoke(delegate(),args);  } catch (  IllegalArgumentException e) {    WXLogUtils.e("",e);    return null;  }catch (  IllegalAccessException e) {    WXLogUtils.e("",e);    return null;  }catch (  InvocationTargetException e) {    throw e.getTargetException();  }}  }
class C{  public void stopUsingGPS(){  if (locationManager != null) {    locationManager.removeUpdates(LocationTracker.this);  }}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("set useColors=");  boolean useColors=np.getBoolean();  np.matchIgnoreCase(";");  ClusterViewer viewer=getViewer();  viewer.setUseColors(useColors);}  }
class C{  private static final String toXml(Mass mass,boolean explicit){  StringBuilder sb=new StringBuilder();  Mass m=new Mass(mass);  m.setType(MassType.NORMAL);  sb.append("<Mass>").append(XmlGenerator.toXml(mass.getCenter(),"LocalCenter")).append("<Type>").append(mass.getType()).append("</Type>").append("<Mass>").append(m.getMass()).append("</Mass>").append("<Inertia>").append(m.getInertia()).append("</Inertia>").append("<Explicit>").append(explicit).append("</Explicit>").append("</Mass>");  return sb.toString();}  }
class C{  public ASTRelationalExpression(AbstractAttribute left,AbstractAttribute right,boolean belongsToThis){  super(0);  this.left=new ASTAttributeName(left,belongsToThis);  this.jjtAddChild(this.left,0);  ASTRelationalOperator equality=new ASTRelationalOperator(0);  equality.setEqual(true);  this.jjtAddChild(equality,1);  this.operator=equality;  this.right=new ASTAttributeName(right,false);  this.jjtAddChild(this.right,2);}  }
class C{  private boolean findRoot(final ODEStateInterpolator interpolator,final double ta,final double ga,final double tb,final double gb){  check(ga == 0.0 || gb == 0.0 || (ga > 0.0 && gb < 0.0) || (ga < 0.0 && gb > 0.0));  final UnivariateFunction f=null;  double beforeRootT=Double.NaN, beforeRootG=Double.NaN;  double afterRootT=ta, afterRootG=0.0;  if (ta == tb) {    beforeRootT=ta;    beforeRootG=ga;    afterRootT=shiftedBy(beforeRootT,convergence);    afterRootG=f.value(afterRootT);  } else   if (ga != 0.0 && gb == 0.0) {    beforeRootT=tb;    beforeRootG=gb;    afterRootT=shiftedBy(beforeRootT,convergence);    afterRootG=f.value(afterRootT);  } else   if (ga != 0.0) {    final double newGa=f.value(ta);    if (ga > 0 != newGa > 0) {      beforeRootT=ta;      beforeRootG=newGa;      afterRootT=minTime(shiftedBy(beforeRootT,convergence),tb);      afterRootG=f.value(afterRootT);    }  }  double loopT=ta, loopG=ga;  while ((afterRootG == 0.0 || afterRootG > 0.0 == g0Positive) && strictlyAfter(afterRootT,tb)) {    if (loopG == 0.0) {      beforeRootT=loopT;      beforeRootG=loopG;      afterRootT=minTime(shiftedBy(beforeRootT,convergence),tb);      afterRootG=f.value(afterRootT);    } else {      if (forward) {        final Interval interval=solver.solveInterval(maxIterationCount,f,loopT,tb);        beforeRootT=interval.getLeftAbscissa();        beforeRootG=interval.getLeftValue();        afterRootT=interval.getRightAbscissa();        afterRootG=interval.getRightValue();      } else {        final Interval interval=solver.solveInterval(maxIterationCount,f,tb,loopT);        beforeRootT=interval.getRightAbscissa();        beforeRootG=interval.getRightValue();        afterRootT=interval.getLeftAbscissa();        afterRootG=interval.getLeftValue();      }    }    if (beforeRootT == afterRootT) {      afterRootT=nextAfter(afterRootT);      afterRootG=f.value(afterRootT);    }    check((forward && afterRootT > beforeRootT) || (!forward && afterRootT < beforeRootT));    loopT=afterRootT;    loopG=afterRootG;  }  if (afterRootG == 0.0 || afterRootG > 0.0 == g0Positive) {    return false;  } else {    check(!Double.isNaN(beforeRootT) && !Double.isNaN(beforeRootG));    increasing=!g0Positive;    pendingEventTime=beforeRootT;    stopTime=beforeRootG == 0.0 ? beforeRootT : afterRootT;    pendingEvent=true;    afterEvent=afterRootT;    afterG=afterRootG;    check(afterG > 0 == increasing);    check(increasing == gb >= ga);    return true;  }}  }
class C{  protected GroupsIsMemberQueryWithUserIdsExtended extended(Boolean value){  return unsafeParam("extended",value);}  }
class C{  private ShortCutUtil(){  throw new Error("Do not need instantiate!");}  }
class C{  public synchronized void dropClass(String className) throws DropClassException {  _typeManager.dropClass(className);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SpellATK_Instant_A_TO_SELF(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200872,skillcaster,num0,skillname);}  }
class C{  static boolean checkChromoNameOrder(List<String> fileChromos,List<String> genomeChromos){  int chrCount=Math.min(fileChromos.size(),genomeChromos.size());  for (int i=0; i < chrCount; i++) {    if (!fileChromos.get(i).equals(genomeChromos.get(i)))     return false;  }  return true;}  }
class C{  public void deleteShard() throws IOException {  if (rootDir != null) {    deleteAllFiles(rootDir);  }}  }
class C{  public void flush(){  hasNewFigure=false;  for (int i=0; i < Divisions; ++i) {    SegmentNode p=header[i];    while (p != null && p.is_new == true) {      p.is_new=false;      p=p.next;    }  }}  }
class C{  protected static XNIException createXNIException(SAXException exception){  return new XNIException(exception.getMessage(),exception);}  }
class C{  public Builder stepsSubtitles(String[] stepsSubtitles){  this.stepsSubtitles=stepsSubtitles;  return this;}  }
class C{  private void mouseReplaceText(String text,int index){  Font font=charMap4.getDisplayFont();  if (font != null) {    selectedFont=font.getFontName();    selectedChar=index;    String displayText=String.format("ttf://%s#%s",font.getFontName(),text);    charMap4.setSelectedCharacter(displayText);  }}  }
class C{  protected PhotosMakeCoverQuery photoId(int value){  return unsafeParam("photo_id",value);}  }
class C{  public void backup(int amount){  inBuf+=amount;  if ((bufpos-=amount) < 0)   bufpos+=bufsize;}  }
class C{  public static boolean isXML11Content(int c){  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_CONTENT) != 0) || (0x10000 <= c && c <= 0x10FFFF);}  }
class C{  public static Set<String> classesOfDex(File file) throws IOException {  Set<String> classes=new HashSet<String>();  DexBackedDexFile d=DexFileFactory.loadDexFile(file,1,false);  for (  ClassDef c : d.getClasses()) {    String name=Util.dottedClassName(c.getType());    classes.add(name);  }  return classes;}  }
class C{  public boolean isLimitEnabled(){  return this.limitEnabled;}  }
class C{  public int optInt(int index){  return this.optInt(index,0);}  }
class C{  protected boolean add(VisibleObject object){  if (!isAwareOf(object)) {    return false;  }  if (knownObjects.put(object.getObjectId(),object) == null) {    if (object instanceof Player) {      checkKnownPlayersInitialized();      knownPlayers.put(object.getObjectId(),(Player)object);    }    addVisualObject(object);    return true;  }  return false;}  }
class C{  @Override public void onPaint(ViewTransform transform,Graphics2D g){  int alpha=getPulsatingAlpha(getProgress());  Color color=new Color(mTextColor.getRed(),mTextColor.getGreen(),mTextColor.getBlue(),alpha);  g.setColor(color);  g.drawString(mText,mCanvasWidth - mTextWidth,mTextHeight);}  }
class C{  private void processTable(int xl,int xr,int[] table){  int size=table.length;  for (int s=0; s < size; s+=2) {    xl^=P[0];    for (int i=1; i < ROUNDS; i+=2) {      xr^=F(xl) ^ P[i];      xl^=F(xr) ^ P[i + 1];    }    xr^=P[ROUNDS + 1];    table[s]=xr;    table[s + 1]=xl;    xr=xl;    xl=table[s];  }}  }
class C{  public List<GenericValue> findAllByPrimaryKeys(List<GenericPK> primaryKeys) throws GenericEntityException {  if (primaryKeys == null)   return null;  List<GenericValue> results=new LinkedList<GenericValue>();  for (  GenericPK primaryKey : primaryKeys) {    GenericValue result=this.findByPrimaryKey(primaryKey);    if (result != null)     results.add(result);  }  return results;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_DELETE_CASH_ITEM_BY_TIMEOUT(String value0){  return new SM_SYSTEM_MESSAGE(1400034,value0);}  }
class C{  private static boolean calculateGap(Rectangle a,Rectangle b,Rectangle gap){  if (a.intersects(b)) {    gap.width=0;    return false;  }  int ax1=a.x;  int ax2=a.x + a.width;  int ay1=a.y;  int ay2=a.y + a.height;  int bx1=b.x;  int bx2=b.x + b.width;  int by1=b.y;  int by2=b.y + b.height;  int xOverlap=Math.min(ax2,bx2) - Math.max(ax1,bx1);  int yOverlap=Math.min(ay2,by2) - Math.max(ay1,by1);  if (xOverlap <= 0 && yOverlap <= 0) {    gap.width=0;    return false;  }  if (xOverlap > 0) {    gap.x=Math.max(ax1,bx1);    gap.y=(ay1 > by1) ? by2 : ay2;    gap.width=xOverlap;    gap.height=-yOverlap;  }  if (yOverlap > 0) {    gap.x=(ax1 > bx1) ? bx2 : ax2;    gap.y=Math.max(ay1,by1);    gap.width=-xOverlap;    gap.height=yOverlap;  }  return true;}  }
class C{  static private void calculateAb(int n,double[] b,double[] d){  double d_ij;  int index;  int dindex=0;  for (int i=0; i <= n - 2; i++) {    d_ij=0.0;    index=i - 1;    for (int k=0; k <= i - 1; k++) {      d_ij+=b[index];      index+=(n - k - 2);    }    index++;    for (int k=i + 1; k <= n - 1; k++)     d_ij+=b[index++];    d[dindex]=d_ij;    dindex+=(n - i - 2) + 1;  }  index=1;  for (int i=0; i <= n - 3; i++) {    d[index]=d[index - 1] + d[index + (n - i - 2)] - 2 * b[index - 1];    index+=1 + (n - i - 2);  }  for (int k=3; k <= n - 1; k++) {    index=k - 1;    for (int i=0; i <= n - k - 1; i++) {      d[index]=d[index - 1] + d[index + (n - i - 2)] - d[index + (n - i - 2) - 1] - 2.0 * b[index - 1];      index+=1 + (n - i - 2);    }  }}  }
class C{  public static IntRange upTo(int endpoint,BoundType boundType){switch (boundType) {case OPEN:    return lessThan(endpoint);case CLOSED:  return atMost(endpoint);default :throw new AssertionError();}}  }
class C{  public ByteArrayOutputStream(int size){  if (size < 0) {    throw new IllegalArgumentException("Negative initial size: " + size);  }synchronized (this) {    needNewBuffer(size);  }}  }
class C{  public PreviewIconBehavior(Context context,AttributeSet attrs){  super(context,attrs);}  }
class C{  void build(int bezierWidth,int bezierHeight){  this.bezierWidth=bezierWidth;  this.bezierHeight=bezierHeight;}  }
class C{  private void onConnect(){  connectionState=ConnectionState.Connected;  checkForUpdatedFlight=true;  subscribe(String.format(trafficAlertChannel,flightId));  subscribe(String.format(situationalAwarenessChannel,flightId));}  }
class C{  public OrdersGetByIdQuery(VkApiClient client,UserActor actor){  super(client,"orders.getById",Utils.buildParametrizedType(List.class,Order.class));  accessToken(actor.getAccessToken());}  }
class C{  @Override public Node cloneNode(boolean deep){  EntityImpl newentity=(EntityImpl)super.cloneNode(deep);  newentity.setReadOnly(true,deep);  return newentity;}  }
class C{  public static double manhattanDistance(double[] p,double[] q){  double ret=0;  for (int i=0; i < p.length; i++) {    double difference=p[i] - q[i];    ret+=Math.abs(difference);  }  return ret;}  }
class C{  @Nullable private static File findAidlDir(@NotNull SourceProvider sourceProvider){  Collection<File> aidlDirectories=sourceProvider.getAidlDirectories();  File resDir=null;  if (!aidlDirectories.isEmpty()) {    resDir=aidlDirectories.iterator().next();  }  return resDir;}  }
class C{  @Override public Object nextElement(){  if (index < array.length) {    return array[index++];  }  throw new NoSuchElementException();}  }
class C{  private static boolean isSingleFileScope(EnumSet<Scope> scopes){  if (scopes.size() != 1) {    return false;  }  final Scope scope=scopes.iterator().next();  return scope == Scope.JAVA_FILE || scope == Scope.RESOURCE_FILE || scope == Scope.MANIFEST || scope == Scope.PROGUARD_FILE || scope == Scope.OTHER;}  }
class C{  public AdsGetTargetingStatsQuery adPlatform(String value){  return unsafeParam("ad_platform",value);}  }
class C{  public Bundle onSaveInstanceState(){  return null;}  }
class C{  public synchronized VisualTable addTable(String group,Table table){  return addTable(group,table,(Predicate)null);}  }
class C{  public final boolean isLocalApplication(){  return Host.LOCALHOST.equals(getHost());}  }
class C{  public boolean isApplicable(){  return true;}  }
class C{  private LogRecordWithInputStream nextLogRecord() throws IOException {  return nextLogRecord(reader);}  }
class C{  @Override public Object evaluate(final Map<Long,Object> pInputParams) throws RuleEvaluationException {  Object result;  try {    result=this.condition.evaluate(pInputParams);  } catch (  RuleEvaluationException e) {    throw e;  }catch (  Exception e) {    final String ruleExpression;    if (this.condition != null && this.condition.getExpression() != null) {      ruleExpression=this.condition.getExpression();    } else {      ruleExpression="";    }    throw new RuleEvaluationException(String.format("Unexpected error while trying to evaluate the expression '%s'",ruleExpression),e);  }  if (result == null) {    throw new RuleEvaluationException(new StringBuffer("Error evaluating condition: ").append(this.condition.getExpression()).toString());  }  return calculateReturnValue(result);}  }
class C{  public AudioSetBroadcastQuery audio(String value){  return unsafeParam("audio",value);}  }
class C{  @Override public boolean nextBoolean(){  return randomGenerator.nextBoolean();}  }
class C{  public static void v(String tag,String msg,Throwable tr){  println(VERBOSE,tag,msg,tr);}  }
class C{  @Override public void updateUserLayers(){  createUserLayerDataSources();  notifyDataSourceLoaded();}  }
class C{  @Nullable @WorkerThread static File writeBitmapToDirectory(@NonNull Bitmap bitmap,@NonNull File directory){  if (!directory.mkdirs() && !directory.exists()) {    Log.e(TAG,"Failed to create directory for bitmap.");    return null;  }  return writeBitmapToFile(bitmap,new File(directory,createUniqueFilename(BITMAP_PREFIX)));}  }
class C{  public Matrix solve(Matrix B){  if (B.getRowDimension() != m) {    throw new IllegalArgumentException("Matrix row dimensions must agree.");  }  if (!this.isFullRank()) {    throw new RuntimeException("Matrix is rank deficient.");  }  int nx=B.getColumnDimension();  double[][] X=B.getArrayCopy();  for (int k=0; k < n; k++) {    for (int j=0; j < nx; j++) {      double s=0.0;      for (int i=k; i < m; i++) {        s+=QR[i][k] * X[i][j];      }      s=-s / QR[k][k];      for (int i=k; i < m; i++) {        X[i][j]+=s * QR[i][k];      }    }  }  for (int k=n - 1; k >= 0; k--) {    for (int j=0; j < nx; j++) {      X[k][j]/=Rdiag[k];    }    for (int i=0; i < k; i++) {      for (int j=0; j < nx; j++) {        X[i][j]-=X[k][j] * QR[i][k];      }    }  }  return (new Matrix(X,n,nx).getMatrix(0,n - 1,0,nx - 1));}  }
class C{  public RequestHandle post(String url,RequestParams params,ResponseHandlerInterface responseHandler){  return post(null,url,params,responseHandler);}  }
class C{  @Override public synchronized void reset() throws IOException {  if (!markSupported) {    throw new UnsupportedOperationException("Mark not supported");  }  if (mark < 0) {    throw new IOException("No position has been marked");  }  if (position > mark + readlimit) {    throw new IOException("Marked position [" + mark + "] is no longer valid - passed the read limit ["+ readlimit+ "]");  }  position=mark;  eof=false;}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  void createVMPanel_Convert_To(JTabbedPane jTabbedPane_name,final String name){  JTabbedPane j=new JTabbedPane(SwingConstants.TOP);  j=jTabbedPane_name;  if (name.equalsIgnoreCase("view")) {    VDICalculator.functionsobj.jPanelComponentPropertyChange(j,JComboBox.class,"vmvramcombo",true,null,0);    final String[] s={"Linked","Full"};    VDICalculator.functionsobj.jPanelComponentPropertyChange(j,JComboBox.class,"desktoppooltypecombo",true,s,0);  } else   if (name.equalsIgnoreCase("xen")) {    VDICalculator.functionsobj.jPanelComponentPropertyChange(j,JComboBox.class,"vmvramcombo",false,null,0);    final String[] s={"Pooled","Assigned"};    VDICalculator.functionsobj.jPanelComponentPropertyChange(j,JComboBox.class,"desktoppooltypecombo",true,s,0);  }}  }
class C{  public static Map<String,Object> captureOrderPayments(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  GenericValue userLogin=(GenericValue)context.get("userLogin");  String orderId=(String)context.get("orderId");  String invoiceId=(String)context.get("invoiceId");  String billingAccountId=(String)context.get("billingAccountId");  BigDecimal amountToCapture=(BigDecimal)context.get("captureAmount");  Locale locale=(Locale)context.get("locale");  amountToCapture=amountToCapture.setScale(decimals,rounding);  GenericValue orderHeader=null;  List<GenericValue> paymentPrefs=null;  List<GenericValue> paymentPrefsBa=null;  try {    orderHeader=EntityQuery.use(delegator).from("OrderHeader").where("orderId",orderId).queryOne();    paymentPrefs=EntityQuery.use(delegator).from("OrderPaymentPreference").where("orderId",orderId,"statusId","PAYMENT_AUTHORIZED").orderBy("-maxAmount").queryList();    if (UtilValidate.isNotEmpty(billingAccountId)) {      paymentPrefsBa=EntityQuery.use(delegator).from("OrderPaymentPreference").where("orderId",orderId,"paymentMethodTypeId","EXT_BILLACT","statusId","PAYMENT_NOT_RECEIVED").orderBy("-maxAmount").queryList();    }  } catch (  GenericEntityException gee) {    Debug.logError(gee,"Problems getting entity record(s), see stack trace",module);    return ServiceUtil.returnError(UtilProperties.getMessage(resourceOrder,"OrderOrderNotFound",UtilMisc.toMap("orderId",orderId),locale) + " " + gee.toString());  }  if (orderHeader == null) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceOrder,"OrderOrderNotFound",UtilMisc.toMap("orderId",orderId),locale));  }  OrderReadHelper orh=new OrderReadHelper(orderHeader);  BigDecimal orderGrandTotal=orh.getOrderGrandTotal();  orderGrandTotal=orderGrandTotal.setScale(decimals,rounding);  BigDecimal totalPayments=PaymentWorker.getPaymentsTotal(orh.getOrderPayments());  totalPayments=totalPayments.setScale(decimals,rounding);  BigDecimal remainingTotal=orderGrandTotal.subtract(totalPayments);  if (Debug.infoOn()) {    Debug.logInfo("The Remaining Total for order: " + orderId + " is: "+ remainingTotal,module);  }  amountToCapture=amountToCapture.min(remainingTotal);  if (Debug.infoOn()) {    Debug.logInfo("Actual Expected Capture Amount : " + amountToCapture,module);  }  if (UtilValidate.isNotEmpty(paymentPrefsBa)) {    Iterator<GenericValue> paymentsBa=paymentPrefsBa.iterator();    while (paymentsBa.hasNext()) {      GenericValue paymentPref=paymentsBa.next();      BigDecimal authAmount=paymentPref.getBigDecimal("maxAmount");      if (authAmount == null)       authAmount=ZERO;      authAmount=authAmount.setScale(decimals,rounding);      if (authAmount.compareTo(ZERO) == 0) {        Debug.logInfo("Nothing to capture; authAmount = 0",module);        continue;      }      BigDecimal amountThisCapture=amountToCapture.min(authAmount);      amountToCapture=amountToCapture.subtract(amountThisCapture);      if (UtilValidate.isNotEmpty(invoiceId)) {        Map<String,Object> captureResult=null;        try {          captureResult=dispatcher.runSync("captureBillingAccountPayments",UtilMisc.<String,Object>toMap("invoiceId",invoiceId,"billingAccountId",billingAccountId,"captureAmount",amountThisCapture,"orderId",orderId,"userLogin",userLogin));          if (ServiceUtil.isError(captureResult)) {            return captureResult;          }        } catch (        GenericServiceException ex) {          return ServiceUtil.returnError(ex.getMessage());        }        if (captureResult != null) {          BigDecimal amountCaptured=(BigDecimal)captureResult.get("captureAmount");          if (Debug.infoOn())           Debug.logInfo("Amount captured for order [" + orderId + "] from unapplied payments associated to billing account ["+ billingAccountId+ "] is: "+ amountCaptured,module);          amountCaptured=amountCaptured.setScale(decimals,rounding);          if (amountCaptured.compareTo(BigDecimal.ZERO) == 0) {            continue;          }          captureResult.put("invoiceId",invoiceId);          captureResult.put("captureResult",Boolean.TRUE);          captureResult.put("orderPaymentPreference",paymentPref);          if (context.get("captureRefNum") == null) {            captureResult.put("captureRefNum","");          }          try {            processResult(dctx,captureResult,userLogin,paymentPref,locale);          } catch (          GeneralException e) {            Debug.logError(e,"Trouble processing the result; captureResult: " + captureResult,module);            return ServiceUtil.returnError(UtilProperties.getMessage(resourceOrder,"AccountingPaymentCannotBeCaptured",locale) + " " + captureResult);          }          if (authAmount.compareTo(amountCaptured) > 0) {            BigDecimal splitAmount=authAmount.subtract(amountCaptured);            try {              Map<String,Object> splitCtx=UtilMisc.<String,Object>toMap("userLogin",userLogin,"orderPaymentPreference",paymentPref,"splitAmount",splitAmount);              dispatcher.addCommitService("processCaptureSplitPayment",splitCtx,true);            } catch (            GenericServiceException e) {              Debug.logWarning(e,"Problem processing the capture split payment",module);            }            if (Debug.infoOn())             Debug.logInfo("Captured: " + amountThisCapture + " Remaining (re-auth): "+ splitAmount,module);          }        } else {          Debug.logError("Payment not captured for order [" + orderId + "] from billing account ["+ billingAccountId+ "]",module);        }      }    }  }  if (UtilValidate.isNotEmpty(paymentPrefs)) {    Iterator<GenericValue> payments=paymentPrefs.iterator();    while (payments.hasNext()) {      GenericValue paymentPref=payments.next();      GenericValue authTrans=getAuthTransaction(paymentPref);      if (authTrans == null) {        Debug.logWarning("Authorized OrderPaymentPreference has no corresponding PaymentGatewayResponse, cannot capture payment: " + paymentPref,module);        continue;      }      GenericValue captureTrans=getCaptureTransaction(paymentPref);      if (captureTrans != null) {        Debug.logWarning("Attempt to capture and already captured preference: " + captureTrans,module);        continue;      }      BigDecimal authAmount=authTrans.getBigDecimal("amount");      if (authAmount == null)       authAmount=ZERO;      authAmount=authAmount.setScale(decimals,rounding);      if (authAmount.compareTo(ZERO) == 0) {        Debug.logInfo("Nothing to capture; authAmount = 0",module);        continue;      }      BigDecimal amountThisCapture;      if (isReplacementOrder(orderHeader)) {        amountThisCapture=authAmount;      } else       if (authAmount.compareTo(amountToCapture) >= 0) {        amountThisCapture=amountToCapture;      } else       if (payments.hasNext()) {        amountThisCapture=authAmount;      } else {        Debug.logError("The amount to capture was more then what was authorized; we only captured the authorized amount : " + paymentPref,module);        amountThisCapture=authAmount;      }      Map<String,Object> captureResult=capturePayment(dctx,userLogin,orh,paymentPref,amountThisCapture,locale);      if (captureResult != null && !ServiceUtil.isError(captureResult)) {        BigDecimal amountCaptured=(BigDecimal)captureResult.get("captureAmount");        if (amountCaptured == null) {          amountCaptured=(BigDecimal)captureResult.get("processAmount");        }        amountCaptured=amountCaptured.setScale(decimals,rounding);        amountToCapture=amountToCapture.subtract(amountCaptured);        if (!isReplacementOrder(orderHeader)) {          captureResult.put("invoiceId",invoiceId);        }        try {          processResult(dctx,captureResult,userLogin,paymentPref,locale);        } catch (        GeneralException e) {          Debug.logError(e,"Trouble processing the result; captureResult: " + captureResult,module);          return ServiceUtil.returnError(UtilProperties.getMessage(resourceOrder,"AccountingPaymentCannotBeCaptured",locale) + " " + captureResult);        }        if (authAmount.compareTo(amountCaptured) > 0) {          BigDecimal splitAmount=authAmount.subtract(amountCaptured);          try {            Map<String,Object> splitCtx=UtilMisc.<String,Object>toMap("userLogin",userLogin,"orderPaymentPreference",paymentPref,"splitAmount",splitAmount);            dispatcher.addCommitService("processCaptureSplitPayment",splitCtx,true);          } catch (          GenericServiceException e) {            Debug.logWarning(e,"Problem processing the capture split payment",module);          }          if (Debug.infoOn())           Debug.logInfo("Captured: " + amountThisCapture + " Remaining (re-auth): "+ splitAmount,module);        }      } else {        Debug.logError("Payment not captured",module);      }    }  }  if (amountToCapture.compareTo(ZERO) > 0) {    GenericValue productStore=orh.getProductStore();    if (!UtilValidate.isEmpty(productStore)) {      boolean shipIfCaptureFails=UtilValidate.isEmpty(productStore.get("shipIfCaptureFails")) || "Y".equalsIgnoreCase(productStore.getString("shipIfCaptureFails"));      if (!shipIfCaptureFails) {        return ServiceUtil.returnError(UtilProperties.getMessage(resourceOrder,"AccountingPaymentCannotBeCaptured",locale));      } else {        Debug.logWarning("Payment capture failed, shipping order anyway as per ProductStore setting (shipIfCaptureFails)",module);      }    }    Map<String,Object> result=ServiceUtil.returnSuccess();    result.put("processResult","FAILED");    return result;  } else {    Map<String,Object> result=ServiceUtil.returnSuccess();    result.put("processResult","COMPLETE");    return result;  }}  }
class C{  public opencv_core.Mat convertCifar(Mat orgImage){  numExamples++;  Mat resImage=new Mat();  OpenCVFrameConverter.ToMat converter=new OpenCVFrameConverter.ToMat();  ImageTransform yuvTransform=new ColorConversionTransform(new Random(seed),COLOR_BGR2YCrCb);  ImageTransform histEqualization=new EqualizeHistTransform(new Random(seed),COLOR_BGR2YCrCb);  if (converter != null) {    ImageWritable writable=new ImageWritable(converter.convert(orgImage));    writable=yuvTransform.transform(writable);    writable=histEqualization.transform(writable);    resImage=converter.convert(writable.getFrame());  }  return resImage;}  }
class C{  @JsonValue public String toJson(){  return jsonName;}  }
class C{  public final int readInt(){  final int byte1=bs.readByte();  final int byte2=bs.readByte();  final int byte3=bs.readByte();  final int byte4=bs.readByte();  return (byte4 << 24) + (byte3 << 16) + (byte2 << 8)+ byte1;}  }
class C{  @Override public void put(K key,V value){  Item cur=map.get(key);  if (cur != null) {    cur.value=value;    moveToHead(cur);    return;  }  if (map.size() >= maxSize && maxSize != 0) {    cur=endItem.previous;    map.remove(cur.key);    removeItem(cur);  }  Item item=new Item(key,value);  insertHead(item);  map.put(key,item);}  }
class C{  public static String slurpGBURL(URL u) throws IOException {  return slurpURL(u,"GB18030");}  }
class C{  public TrustManagerBuilder denyAll(){  mgr.add(new DenyAllTrustManager());  return (this);}  }
class C{  public boolean removeAll(Collection c){  throw new UnsupportedOperationException();}  }
class C{  @Override public final void write(final byte b){  bos.writeByte(b);}  }
class C{  public static void createRMA6FileFromBLASTPair(String creator,String blastFile1,String blastFile2,BlastFileFormat format,String queryFile1,String queryFile2,String rma6FileName,boolean useCompression,Document doc,int maxMatchesPerRead,boolean hasMagnitudes,ProgressListener progressListener) throws IOException, CanceledException {  final RMA6FromBlastCreator rma6Creator=new RMA6FromBlastCreator(creator,format,doc.getBlastMode(),new String[]{blastFile1,blastFile2},new String[]{queryFile1,queryFile2},rma6FileName,useCompression,doc,maxMatchesPerRead,hasMagnitudes);  rma6Creator.parseFiles(progressListener);}  }
class C{  public static Record createRecord(ModelRecord modelRecord,Map<String,Object> fields) throws DataFileException {  Record record=new Record(modelRecord,fields);  return record;}  }
class C{  private void showDisconnected(){  connectivityView.setBackgroundColor(ColorUtil.getColorWrapper(mContext,mDisconnectedBackground));  connectivityText.setTextColor(ColorUtil.getColorWrapper(mContext,mDisconnectedTextColor));  connectivityText.setText(getResources().getString(mDisconnectedText));  if (connectivityView.getVisibility() == GONE) {    connectivityView.setVisibility(View.VISIBLE);    TranslateAnimation animate=new TranslateAnimation(0,0,-connectivityView.getHeight(),0);    animate.setDuration(500);    animate.setFillAfter(true);    connectivityView.startAnimation(animate);  }}  }
class C{  public static WebSiteProperties from(HttpServletRequest request) throws GenericEntityException {  Assert.notNull("request",request);  WebSiteProperties webSiteProps=(WebSiteProperties)request.getAttribute("_WEBSITE_PROPS_");  if (webSiteProps == null) {    webSiteProps=newFrom(request,WebSiteWorker.getWebSiteId(request));    request.setAttribute("_WEBSITE_PROPS_",webSiteProps);  }  return webSiteProps;}  }
class C{  public C2DInfo(CTNode head){  s_label=null;  b_head=false;  if (head.hasC2DInfo()) {    t_head=head.getC2DInfo().getTerminalHead();    n_head=head;  } else {    t_head=head;    n_head=null;    d_feats=new FeatMap();  }}  }
class C{  private String removeIllegalFileCharacters(String string){  return string.replaceAll("/|\\\\|:|\\*|\\?|\"|<|>|\\||\\s","");}  }
class C{  public static double weaveDps(final PokemonId pokemonId,final PokemonMove move1,final PokemonMove move2,final int additionalDelay){  final PokemonMoveMeta pm1=PokemonMoveMetaRegistry.getMeta(move1);  final PokemonMoveMeta pm2=PokemonMoveMetaRegistry.getMeta(move2);  final double moveOneStab=PokemonUtils.hasStab(pokemonId,move1) ? STAB_MULTIPLIER : NORMAL_MULTIPLIER;  final double moveTwoStab=PokemonUtils.hasStab(pokemonId,move2) ? STAB_MULTIPLIER : NORMAL_MULTIPLIER;  final double weaveEnergyUsageRatio;  if (Math.abs(pm2.getEnergy()) == MAX_MOVE_ENERGY) {    weaveEnergyUsageRatio=Math.ceil((double)Math.abs(pm2.getEnergy()) / (double)pm1.getEnergy());  } else {    weaveEnergyUsageRatio=(double)Math.abs(pm2.getEnergy()) / (double)pm1.getEnergy();  }  final double weaveCycleLength=weaveEnergyUsageRatio * (pm1.getTime() + additionalDelay) + pm2.getTime() + PokemonCalculationUtils.MOVE2_CHARGE_DELAY_MS;  final double floorThingyCalculation=(WEAVE_NUMBER - (Math.floor(WEAVE_NUMBER / weaveCycleLength) * (pm2.getTime() + PokemonCalculationUtils.MOVE2_CHARGE_DELAY_MS) + Math.ceil(Math.floor(WEAVE_NUMBER / weaveCycleLength) * weaveEnergyUsageRatio) * (pm1.getTime() + additionalDelay))) / (pm1.getTime() + additionalDelay);  final double weaveDPS=Math.floor(WEAVE_NUMBER / weaveCycleLength) * (pm2.getPower() * moveTwoStab * (1 + (PokemonCalculationUtils.CRIT_DAMAGE_BONUS * pm2.getCritChance()))) + Math.ceil(Math.floor(WEAVE_NUMBER / weaveCycleLength) * weaveEnergyUsageRatio) * (pm1.getPower() * moveOneStab) + Math.floor(floorThingyCalculation) * (pm1.getPower() * moveOneStab);  return weaveDPS;}  }
class C{  private ObjectNameFactory(){}  }
class C{  public static String encodeQueryValue(String query){  String retString;  retString=replaceString(query,"%","%25");  retString=replaceString(retString," ","%20");  retString=replaceString(retString,"&","%26");  retString=replaceString(retString,"?","%3F");  retString=replaceString(retString,"=","%3D");  return retString;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MPAttack_INTERVAL_TO_ME(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1201211,num0,skillname);}  }
class C{  private ChannelSelection createChannelSelection(StyleFactoryImpl styleFactory,ContrastMethod contrastMethod){  ContrastEnhancement contrastEnhancement=(ContrastEnhancement)styleFactory.contrastEnhancement(null,contrastMethod.name());  FilterFactory ff=CommonFactoryFinder.getFilterFactory();  Map<String,Expression> options=contrastEnhancement.getOptions();  options.put("algorithm",ff.literal("StretchToMinimumMaximum"));  options.put("minValue",ff.literal("1"));  options.put("maxValue",ff.literal("5"));  SelectedChannelType channelType=styleFactory.createSelectedChannelType("channel name",contrastEnhancement);  SelectedChannelType[] channels=new SelectedChannelType[3];  channels[0]=channelType;  channels[1]=channelType;  channels[2]=channelType;  ChannelSelection channelSelection=styleFactory.createChannelSelection(channels);  return channelSelection;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_CloseAerial_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200495,skilltarget,skillname);}  }
class C{  public static String padLeft(String str,int totalChars){  if (str == null)   str="null";  StringBuilder sb=new StringBuilder();  for (int i=0; i < totalChars - str.length(); i++) {    sb.append(" ");  }  sb.append(str);  return sb.toString();}  }
class C{  public static byte writeByte(byte b){  return b;}  }
class C{  @FXML public void onSelectService(MouseEvent event){  HBox source=(HBox)event.getSource();  if (selected != null) {    selected.getStyleClass().remove("selected");  }  selected=source;  selected.getStyleClass().add("selected");  this.rightAnchor.getChildren().clear();  Label tv=new Label("Receiving file list...");  this.rightAnchor.getChildren().add(tv);  cs=Services.getInstance().getService(source.getId());  cache=new HashMap<>();  new SetUpTreeViewTask().start();}  }
class C{  @Override public boolean accept(File file){  return !filter.accept(file);}  }
class C{  public GroupsEditManagerQuery(VkApiClient client,UserActor actor,int groupId,int userId){  super(client,"groups.editManager",OkResponse.class);  accessToken(actor.getAccessToken());  groupId(groupId);  userId(userId);}  }
class C{  public void terminate(){  if (!terminated) {    this.terminated=true;    getParent().requestLayout();  }}  }
class C{  public static InputStream find(String filename,ZipFile zip) throws IOException {  ZipEntry e=zip.getEntry(filename);  if (e != null) {    return zip.getInputStream(e);  }  return null;}  }
class C{  public void addSoundEvent(State event,int resId){  mSoundMap.put(event,resId);}  }
class C{  private static boolean _cover5(String dest,int w,int h,List<String> sources) throws Exception {  w*=2;  h*=2;  int len=sources.size();  if (len == 9) {    BufferedImage src[]=new BufferedImage[len];    for (int i=0; i < len; i++) {      String s=sources.get(i);      if (!EMPTY.equals(s)) {        src[i]=ImageIO.read(new File(s));      }    }    BufferedImage out=new BufferedImage(w,h,BufferedImage.TYPE_3BYTE_BGR);    Graphics2D g=(Graphics2D)out.getGraphics();    g.setColor(Color.WHITE);    g.fillRect(0,0,w,h);    int size=3;    int space=2;    int w1=(w - 1) / size;    int h1=(h - 1) / size;    float fd=((float)w1) / h1;    for (int i=0; i < len; i++) {      int x=(i % size) * w1;      int y=(i / size) * h1;      BufferedImage img=src[i];      if (img != null) {        int w2=img.getWidth();        int h2=img.getHeight();        float fs=((float)w2) / h2;        if (fs > fd) {          w2=w1;          h2=(int)(w2 / fs);        } else         if (fs < fd) {          h2=h1;          w2=(int)(h2 * fs);        } else {          w2=w1;          h2=h1;        }        Image tmp=img.getScaledInstance(w2,h2,Image.SCALE_SMOOTH);        g.drawImage(tmp,x + space + (w1 - w2) / 2,y + space + (h1 - h2) / 2,w2 - 2 * space,h2 - 2 * space,null);      }      drawRect(g,x,y,w1,h1);    }    ImageIO.write(out,"jpg",new File(dest));    g.dispose();    return true;  } else {    throw new Exception("sources MUST is 9 picutures!" + len);  }}  }
class C{  public static boolean isInteger(String s){  if (isEmpty(s))   return defaultEmptyOK;  for (int i=0; i < s.length(); i++) {    char c=s.charAt(i);    if (!isDigit(c))     return false;  }  return true;}  }
class C{  private void onSecondaryPointerUp(MotionEvent ev){  final int pointerIndex=MotionEventCompat.getActionIndex(ev);  final int pointerId=MotionEventCompat.getPointerId(ev,pointerIndex);  if (pointerId == mActivePointerId) {    final int newPointerIndex=pointerIndex == 0 ? 1 : 0;    mActivePointerId=MotionEventCompat.getPointerId(ev,newPointerIndex);  }}  }
class C{  @deprecated public boolean equals(Object obj){  if (obj == null)   return false;  if (this == obj)   return true;  if (getClass() != obj.getClass())   return false;  CompactByteArray other=(CompactByteArray)obj;  for (int i=0; i < 65536; i++) {    if (elementAt((char)i) != other.elementAt((char)i))     return false;  }  return true;}  }
class C{  public <T>T showDialog(Function<FileChooser,T> method){  return showDialog(method,1,TimeUnit.SECONDS);}  }
class C{  @Override protected void authorizeRequests(final HttpSecurity http) throws Exception {  http.authorizeRequests().antMatchers("/ping").permitAll().anyRequest().authenticated();}  }
class C{  public static String replaceTargetState(String xliffContent,String state){  return xliffContent.replaceAll("state=\"(.*?)\"","state=\"" + state + "\"");}  }
class C{  public boolean forEachEntry(TObjectShortProcedure<K> procedure){  K[] keys=(K[])_set;  short[] values=_values;  for (int i=keys.length; i-- > 0; ) {    if (keys[i] != FREE && keys[i] != REMOVED && !procedure.execute(keys[i],values[i])) {      return false;    }  }  return true;}  }
class C{  @Override public void attributeSelection(String field){}  }
class C{  public static Style rottenBanana(){  final Style style=new Style();  style.color=PaletteUtils.getSolidColor(PaletteUtils.MATERIAL_YELLOW);  style.frame=FRAME_LOLLIPOP;  style.messageTextColor=PaletteUtils.getSolidColor(PaletteUtils.MATERIAL_BROWN);  style.buttonDividerColor=PaletteUtils.getSolidColor(PaletteUtils.MATERIAL_BROWN);  style.buttonTextColor=PaletteUtils.getSolidColor(PaletteUtils.MATERIAL_BROWN);  style.priorityColor=PaletteUtils.getSolidColor(PaletteUtils.MATERIAL_BROWN);  return style;}  }
class C{  public RequestFailedException(Request r,String param,String path,String reason){  super(path + ": " + reason);  this.request=r;  this.param=param;  this.path=path;  this.reason=reason;}  }
class C{  public void checkFileOkToRead() throws IOException {  if (fileType == Type.MEGAN_SERVER_FILE)   return;  File file=new File(fileName);  if (!file.canRead())   throw new IOException("File not readable: " + fileName);switch (fileType) {case RMA1_FILE:{      throw new IOException("RMA version 1 not supported: " + fileName);    }case RMA2_FILE:{    int version=RMA2File.getRMAVersion(file);    if (version != 2)     throw new IOException("RMA version (" + version + ") not supported: "+ fileName);    if (!file.canWrite())     setReadOnly(true);    return;  }case RMA3_FILE:case RMA6_FILE:case DAA_FILE:case MEGAN_SUMMARY_FILE:if (!file.canWrite()) setReadOnly(true);return;default :throw new IOException("File has unknown type: " + fileName);}}  }
class C{  private static TwoThings<Map<String,String>,ResourceLoader> parseArgsAndResources(IndexState state,String className,Request sub){  Map<String,String> factoryArgs=new HashMap<String,String>();  factoryArgs.put("class",className);  ResourceLoader resources=state.resourceLoader;  RAMResourceLoaderWrapper ramResources=null;  if (sub != null) {    for (    Map.Entry<String,Object> ent : sub.getRawParams().entrySet()) {      String argName=ent.getKey();      Object argValue=ent.getValue();      String argString;      if (argName.endsWith("FileContents")) {        if (ramResources == null) {          ramResources=new RAMResourceLoaderWrapper(resources);          resources=ramResources;        }        String value;        if (argValue instanceof String) {          value=(String)argValue;        } else         if (argValue instanceof JSONArray) {          StringBuilder b=new StringBuilder();          for (          Object v : (JSONArray)argValue) {            if ((v instanceof String) == false) {              sub.failWrongClass(argName,"array must contain strings",v);            }            b.append((String)v);            b.append('\n');          }          value=b.toString();        } else {          sub.failWrongClass(argName,"must be a String or Array",argValue);          value=null;        }        argName=argName.substring(0,argName.length() - 12);        ramResources.add(argName,value);        argString=argName;      } else {        argString=argValue.toString();      }      factoryArgs.put(argName,argString);    }    sub.clearParams();  }  return new TwoThings<Map<String,String>,ResourceLoader>(factoryArgs,resources);}  }
class C{  @RequestMapping(method=RequestMethod.POST,value="{clientVersion}/orgUnits/{id}/activities") @ResponseBody public String saveActivityReport(@PathVariable int id,@RequestBody ActivityValue activityValue) throws NotAllowedException {  activityReportingService.saveActivityReport(getUnit(id),activityValue,0);  return ACTIVITY_REPORT_UPLOADED;}  }
class C{  public Item unEquipItem(int itemUniqueId,long slot){  if (owner.getInventory().isFull()) {    return null;  }synchronized (equipment) {    Item itemToUnequip=null;    for (    Item item : equipment.values()) {      if (item.getObjectId() == itemUniqueId) {        itemToUnequip=item;        break;      }    }    if (itemToUnequip == null || !itemToUnequip.isEquipped()) {      return null;    }    if (itemToUnequip.getEquipmentSlot() == ItemSlot.MAIN_HAND.getSlotIdMask()) {      Item ohWeapon=equipment.get(ItemSlot.SUB_HAND.getSlotIdMask());      if (ohWeapon != null && ohWeapon.getItemTemplate().isWeapon()) {        if (owner.getInventory().getFreeSlots() < 2) {          return null;        }        unEquip(ItemSlot.SUB_HAND.getSlotIdMask());      }    }    if (itemToUnequip.getItemTemplate().isArmor() && itemToUnequip.getItemTemplate().getCategory() == ItemCategory.SHARD) {      owner.unsetState(CreatureState.POWERSHARD);      PacketSendUtility.sendPacket(owner,new SM_EMOTION(owner,EmotionType.POWERSHARD_OFF,0,0));    }    if (!StigmaService.notifyUnequipAction(owner,itemToUnequip)) {      return null;    }    unEquip(itemToUnequip.getEquipmentSlot());    return itemToUnequip;  }}  }
class C{  private void blockUntilShutdown() throws InterruptedException {  if (server != null) {    server.awaitTermination();  }}  }
class C{  public X509KeyManager removeDelegate(String alias){  return delegates.remove(alias);}  }
class C{  public static Map<String,Object> testCapture(DispatchContext dctx,Map<String,? extends Object> context){  Locale locale=(Locale)context.get("locale");  Map<String,Object> result=ServiceUtil.returnSuccess();  Debug.logInfo("Test Capture Process",module);  String refNum=UtilDateTime.nowAsString();  result.put("captureResult",Boolean.TRUE);  result.put("captureAmount",context.get("captureAmount"));  result.put("captureRefNum",refNum);  result.put("captureAltRefNum",refNum);  result.put("captureFlag","C");  result.put("captureMessage",UtilProperties.getMessage(resource,"AccountingPaymentTestCapture",locale));  return result;}  }
class C{  public Base64InputStream(InputStream inputStream){  this.inputStream=inputStream;}  }
class C{  public IMethod findOverridingMethodInType(IType overridingType,IMethod overridden) throws JavaModelException {  int flags=overridden.getFlags();  if (Flags.isPrivate(flags) || Flags.isStatic(flags) || overridden.isConstructor())   return null;  IMethod[] overridingMethods=overridingType.getMethods();  for (int i=0; i < overridingMethods.length; i++) {    IMethod overriding=overridingMethods[i];    flags=overriding.getFlags();    if (Flags.isPrivate(flags) || Flags.isStatic(flags) || overriding.isConstructor())     continue;    if (isSubsignature(overriding,overridden)) {      return overriding;    }  }  return null;}  }
class C{  public void resourceCreated(ISVNRemoteFolder parent,String resourceName){  Iterator it=listeners.iterator();  while (it.hasNext()) {    IRepositoryListener listener=(IRepositoryListener)it.next();    listener.remoteResourceCreated(parent,resourceName);  }}  }
class C{  public boolean hasAttributeWithValue(final WebElement element,final String attribute,final String value,int timeout){  return isConditionMet(null,timeout);}  }
class C{  public static boolean isXML11NCName(int c){  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_NCNAME) != 0) || (0x10000 <= c && c < 0xF0000);}  }
class C{  public AgeFileFilter(long cutoff,boolean acceptOlder){  this.acceptOlder=acceptOlder;  this.cutoff=cutoff;}  }
