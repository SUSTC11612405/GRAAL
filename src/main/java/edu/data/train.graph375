class C{  private void internalRemove(final Object[] elements){  Object input=getInput();  for (int i=0; i < elements.length; ++i) {    if (equals(elements[i],input)) {      setInput(null);      return;    }    int ix=getElementIndex(elements[i]);    if (ix >= 0) {      CheckItem item=listRemove(ix);      listMap.remove(ix);      unmapElement(elements[i],item.getControl());    }  }}  }
class C{  private boolean isMaintainAspectRatio(){  return preferences.getBoolean("SplashMaintainAspectRatio",false);}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public String readFile(File file) throws IOException {  return this.readURL(this.fileToURL(file));}  }
class C{  public static Document newDocument() throws CoreException {  try {    return getDocument();  } catch (  ParserConfigurationException e) {    abort("Unable to create new XML document.",e);  }  return null;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypeRefsPackage.BOUND_THIS_TYPE_REF__AST_STRUCTURAL_MEMBERS:    return getAstStructuralMembers();case TypeRefsPackage.BOUND_THIS_TYPE_REF__STRUCTURAL_TYPE:  if (resolve)   return getStructuralType();return basicGetStructuralType();case TypeRefsPackage.BOUND_THIS_TYPE_REF__GEN_STRUCTURAL_MEMBERS:return getGenStructuralMembers();case TypeRefsPackage.BOUND_THIS_TYPE_REF__POSTPONED_SUBSTITUTIONS:return getPostponedSubstitutions();case TypeRefsPackage.BOUND_THIS_TYPE_REF__ACTUAL_THIS_TYPE_REF:return getActualThisTypeRef();case TypeRefsPackage.BOUND_THIS_TYPE_REF__DEFINED_TYPING_STRATEGY:return getDefinedTypingStrategy();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private void searchFor(final String searchString,final boolean cycleBackwards,final boolean zoomToResult){  if (!"".equals(searchString)) {    add(searchString);  }  CSearchExecuter.search(SwingUtilities.getWindowAncestor(this),getEditor(),m_graph,m_searcher,searchString,cycleBackwards,zoomToResult);  notifyListeners();}  }
class C{  public MethodPart take(String name){  return remove(name);}  }
class C{  public Boolean isEnabled(){  return enabled;}  }
class C{  @Override public void onCreate(Bundle icicle){  super.onCreate(icicle);  setContentView(R.layout.main);  File path=Environment.getDataDirectory();  StatFs stat=new StatFs(path.getPath());  int totalBlocks=stat.getBlockCount();  mBlockSize=(int)(stat.getBlockSize());  TextView startSizeTextView=(TextView)findViewById(R.id.totalsize);  startSizeTextView.setText(Long.toString((totalBlocks * mBlockSize) / BYTE_SIZE));  Button button=(Button)findViewById(R.id.button_run);  button.setOnClickListener(mStartListener);}  }
class C{  public void startPhase(int phase,String source){  if (Trace.phase) {    String name=(compilerName == null) ? "unknown" : compilerName;    boolean isabc=name.equals("abc");    if (isabc == false || Trace.phaseabc) {      Trace.trace("Start compiler " + name + " phase["+ getPhaseName(phase)+ "] with: "+ source);    }  }  startTime=System.currentTimeMillis();}  }
class C{  public boolean isRectangle(){  return rectangle;}  }
class C{  public void addDispatcherListener(DispatcherListener listener){  addListener(BeforeDispatch,listener);  addListener(AfterDispatch,listener);}  }
class C{  public boolean isMinXSet(int scale){  return mMinX[scale] != MathHelper.NULL_VALUE;}  }
class C{  public Boolean shouldAllowBridgeAccess(String url){  return shouldAllowNavigation(url);}  }
class C{  public void closeSearch(){  if (!isSearchOpen()) {    return;  }  mSearchSrcTextView.setText(null);  dismissSuggestions();  clearFocus();  mSearchLayout.setVisibility(GONE);  if (mSearchViewListener != null) {    mSearchViewListener.onSearchViewClosed();  }  mIsSearchOpen=false;}  }
class C{  public static String replace(String value,String oldPart,String newPart){  if (value == null || value.length() == 0 || oldPart == null || oldPart.length() == 0)   return value;  int oldPartLength=oldPart.length();  String oldValue=value;  StringBuffer retValue=new StringBuffer();  int pos=oldValue.indexOf(oldPart);  while (pos != -1) {    retValue.append(oldValue.substring(0,pos));    if (newPart != null && newPart.length() > 0)     retValue.append(newPart);    oldValue=oldValue.substring(pos + oldPartLength);    pos=oldValue.indexOf(oldPart);  }  retValue.append(oldValue);  return retValue.toString();}  }
class C{  public SignatureManifest(Manifest base){  this.rnd=null;  this.base=base;}  }
class C{  public DeleteNodesRequest clone(){  DeleteNodesRequest result=new DeleteNodesRequest();  result.RequestHeader=RequestHeader == null ? null : RequestHeader.clone();  if (NodesToDelete != null) {    result.NodesToDelete=new DeleteNodesItem[NodesToDelete.length];    for (int i=0; i < NodesToDelete.length; i++)     result.NodesToDelete[i]=NodesToDelete[i].clone();  }  return result;}  }
class C{  private static boolean isExcludedAttribute(String attributeName,List<String> excludedAttributes){  if (null == excludedAttributes) {    return false;  }  if (excludedAttributes.contains(attributeName)) {    return true;  }  return false;}  }
class C{  private static void resolveTypeQualifierNicknames(AnnotationValue value,LinkedList<AnnotationValue> result,LinkedList<ClassDescriptor> onStack){  ClassDescriptor annotationClass=value.getAnnotationClass();  if (onStack.contains(annotationClass)) {    AnalysisContext.logError("Cycle found in type nicknames: " + onStack);    return;  }  try {    onStack.add(annotationClass);    try {      if (annotationClass.equals(googleNullable) || annotationClass.equals(eclipseNullable) || annotationClass.equals(intellijNullable)) {        resolveTypeQualifierNicknames(new AnnotationValue(JSR305NullnessAnnotations.CHECK_FOR_NULL),result,onStack);        return;      }      if (annotationClass.equals(eclipseNonNull) || annotationClass.equals(eclipseNonNullByDefault) || annotationClass.equals(intellijNotNull)) {        resolveTypeQualifierNicknames(new AnnotationValue(JSR305NullnessAnnotations.NONNULL),result,onStack);        return;      }      XClass c=Global.getAnalysisCache().getClassAnalysis(XClass.class,annotationClass);      if (c.getAnnotationDescriptors().contains(typeQualifierNickname)) {        for (        ClassDescriptor d : c.getAnnotationDescriptors()) {          if (!d.equals(typeQualifierNickname)) {            resolveTypeQualifierNicknames(c.getAnnotation(d),result,onStack);          }        }      } else       if (c.getAnnotationDescriptors().contains(typeQualifier)) {        result.add(value);      }    } catch (    MissingClassException e) {      logMissingAnnotationClass(e);      return;    }catch (    CheckedAnalysisException e) {      AnalysisContext.logError("Error resolving " + annotationClass,e);      return;    }  }  finally {    onStack.removeLast();  }}  }
class C{  @Override public synchronized void remove(String key){  boolean deleted=getFileForKey(key).delete();  removeEntry(key);  if (!deleted) {    VolleyLog.d("Could not delete cache entry for key=%s, filename=%s",key,getFilenameForKey(key));  }}  }
class C{  private int findToken(final String in,int start,MarkToken token){  int pos=start;  while (pos < in.length()) {    if (this.getToken(in,pos) == token) {      return pos;    }    pos++;  }  return -1;}  }
class C{  public void addCylinder(float x,float y,float z,float radius,float length,int segments){  addCylinder(x,y,z,radius,length,segments,1F,1F);}  }
class C{  public CSavePasswordField(final String text,final int columns){  super(text,columns);}  }
class C{  public void addAction(String action){  actions.add(action);}  }
class C{  public static Thread threadArgs(JSObject obj){  return new ThreadWithArgs(obj);}  }
class C{  public boolean containsKey(Object key){  return map.containsKey(key);}  }
class C{  public boolean isFileWriteEnabled(){  return fileWriteEnabled;}  }
class C{  public synchronized void replaceRelationship(Relationship oldRelationship,Vertex newTarget){  Map<Relationship,Relationship> relationships=getRelationships().get(oldRelationship.getType());  if (relationships == null) {    return;  }  Relationship existing=relationships.remove(oldRelationship);  if (existing == null) {    return;  }  if (this.allRelationships != null) {    this.allRelationships.remove(existing);  }  addRelationship(oldRelationship.getType(),newTarget,oldRelationship.getIndex());}  }
class C{  public boolean hasActiveTasks(){  boolean doesHaveTasks=false;synchronized (asyncTasks) {    if (asyncTasks.isEmpty())     return false;    Iterator<RunnableScheduledFuture<?>> i=asyncTasks.iterator();    while (i.hasNext()) {      RunnableScheduledFuture<?> task=i.next();      if (task.isDone())       i.remove(); else       doesHaveTasks=true;    }  }  return doesHaveTasks;}  }
class C{  public Request createRequest(javax2.sip.address.URI requestURI,String method,CallIdHeader callId,CSeqHeader cSeq,FromHeader from,ToHeader to,List via,MaxForwardsHeader maxForwards,ContentTypeHeader contentType,Object content) throws ParseException {  if (requestURI == null || method == null || callId == null || cSeq == null || from == null || to == null || via == null || maxForwards == null || content == null || contentType == null)   throw new NullPointerException("Null parameters");  SIPRequest sipRequest=new SIPRequest();  sipRequest.setRequestURI(requestURI);  sipRequest.setMethod(method);  sipRequest.setCallId(callId);  sipRequest.setCSeq(cSeq);  sipRequest.setFrom(from);  sipRequest.setTo(to);  sipRequest.setVia(via);  sipRequest.setMaxForwards(maxForwards);  sipRequest.setContent(content,contentType);  if (userAgent != null) {    sipRequest.setHeader(userAgent);  }  return sipRequest;}  }
class C{  boolean isConnected(){  return _isConnected;}  }
class C{  public static Column syncColumnLoad(ICubicWorld world,CubeIO loader,int x,int z){  QueuedColumn key=new QueuedColumn(x,z,world);  AsyncColumnIOProvider task=columnTasks.remove(key);  if (task != null) {    runTask(task);  } else {    task=new AsyncColumnIOProvider(key,loader);    task.run();  }  task.runSynchronousPart();  return task.get();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:10.425 -0500",hash_original_method="A121217103E96E47F6E62859875393D7",hash_generated_method="C28A86C63FA83DA1968ACF2068B18022") @Override public void unwrapSSLv2(byte[] bytes){  unexpectedMessage();}  }
class C{  private String prepareConfigString(String configString){  int lastLine=0;  String[] lines=configString.split("\n");  StringBuilder config=new StringBuilder("");  for (  String line : lines) {    if (line.startsWith(plugin.getDescription().getName() + "_COMMENT")) {      String comment=("#" + line.trim().substring(line.indexOf(": ") + 1)).replace("_COLON_",":").replace("_HYPHEN_","-").replace("_VERT_","|");      String normalComment;      if (comment.startsWith("# ' "))       normalComment=comment.substring(0,comment.length() - 1).replaceFirst("# ' ","# "); else       normalComment=comment;      if (lastLine == 0)       config.append(normalComment + "\n"); else       if (lastLine == 1)       config.append("\n" + normalComment + "\n");      lastLine=0;    } else {      config.append(line + "\n");      lastLine=1;    }  }  return config.toString();}  }
class C{  public Set<Resource> findSameAs(Resource value,Resource... contxts) throws InferenceEngineException {  Set<Resource> sameAs=new HashSet<Resource>();  sameAs.add(value);  findSameAsChaining(value,sameAs,contxts);  return sameAs;}  }
class C{  public void clearAllCache(){  clearMemoryCache();  clearStorageCache();}  }
class C{  public BaseCreateSessionRequest(final String requestUrl,final IOneDriveClient client,final List<Option> options,final ChunkedUploadSessionDescriptor item){  super(requestUrl,client,options,UploadSession.class);  mBody=new CreateSessionBody();  mBody.item=item;}  }
class C{  public void testPolygonPolygonLinkedThruHoles(){  checkDistance(poly2HoleFlat,"POLYGON ((120 120 -10, 120 120 100, 180 120 100, 180 120 -10, 120 120 -10))",0);  checkDistance(poly2HoleFlat,"LINESTRING (120 120 -10, 120 120 100, 180 120 100, 180 120 -10, 120 120 -10)",10);}  }
class C{  public boolean isList(String key){  Object val=get(key);  return val instanceof List;}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == SyntaxRelatedTElement.class) {switch (derivedFeatureID) {case TypesPackage.TFUNCTION__AST_ELEMENT:      return TypesPackage.SYNTAX_RELATED_TELEMENT__AST_ELEMENT;default :    return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public FacebookException(String format,Object... args){  this(String.format(format,args));}  }
class C{  @Override protected void tearDown() throws Exception {  setFixture(null);}  }
class C{  public void ignorableWhitespace(char ch[],int start,int length) throws org.xml.sax.SAXException {  if (isOutsideDocElem())   return;  String s=new String(ch,start,length);  append(m_doc.createTextNode(s));}  }
class C{  public String encodeBody(){  return entityTag;}  }
class C{  public static GasStack readFromNBT(NBTTagCompound nbtTags){  if (nbtTags == null || nbtTags.hasNoTags()) {    return null;  }  GasStack stack=new GasStack();  stack.read(nbtTags);  if (stack.getGas() == null || stack.amount <= 0) {    return null;  }  return stack;}  }
class C{  public void testParenthesisMust() throws IOException {  BooleanQuery.Builder q3=new BooleanQuery.Builder();  q3.add(new BooleanClause(t1,BooleanClause.Occur.SHOULD));  q3.add(new BooleanClause(t2,BooleanClause.Occur.SHOULD));  BooleanQuery.Builder q4=new BooleanQuery.Builder();  q4.add(new BooleanClause(c1,BooleanClause.Occur.MUST));  q4.add(new BooleanClause(c2,BooleanClause.Occur.MUST));  BooleanQuery.Builder q2=new BooleanQuery.Builder();  q2.add(q3.build(),BooleanClause.Occur.SHOULD);  q2.add(q4.build(),BooleanClause.Occur.SHOULD);  assertEquals(1,search(q2.build()));}  }
class C{  private OpenSSLDigest(String algorithm,long evp_md,int size,int blockSize){  this.algorithm=algorithm;  this.evp_md=evp_md;  this.size=size;  this.blockSize=blockSize;}  }
class C{  public static void overrideSymbolSet(SymbolInfo[] override){  symbols=override;}  }
class C{  public Date sub(final Period period){  return new Date(advance(this,-1 * period.length(),period.units()));}  }
class C{  public boolean sendEMail(String to,String subject,String message){  if (message == null || message.length() == 0) {    log.warning("No Message");    return false;  }  StringBuffer msgText=new StringBuffer();  if (getEMailHeader() != null)   msgText.append(getEMailHeader());  msgText.append(message);  if (getEMailFooter() != null)   msgText.append(getEMailFooter());  EMail email=createEMail(to,subject,msgText.toString());  if (email == null)   return false;  try {    String msg=email.send();    if (EMail.SENT_OK.equals(email.send())) {      log.info("Sent EMail " + subject + " to "+ to);      return true;    } else {      log.warning("Could NOT Send Email: " + subject + " to "+ to+ ": "+ msg+ " ("+ getName()+ ")");      return false;    }  } catch (  Exception ex) {    log.severe(getName() + " - " + ex.getLocalizedMessage());    return false;  }}  }
class C{  public ListQBFModelNumber(Object... items){  m_items=items;  m_sel=m_items[0];}  }
class C{  private final int ensureRunBreak(int offset,boolean copyAttrs){  if (offset == length()) {    return runCount;  }  int runIndex=0;  while (runIndex < runCount && runStarts[runIndex] < offset) {    runIndex++;  }  if (runIndex < runCount && runStarts[runIndex] == offset) {    return runIndex;  }  if (runCount == runArraySize) {    int newArraySize=runArraySize + ARRAY_SIZE_INCREMENT;    int newRunStarts[]=new int[newArraySize];    @SuppressWarnings("unchecked") Vector<Attribute> newRunAttributes[]=(Vector<Attribute>[])new Vector<?>[newArraySize];    @SuppressWarnings("unchecked") Vector<Object> newRunAttributeValues[]=(Vector<Object>[])new Vector<?>[newArraySize];    for (int i=0; i < runArraySize; i++) {      newRunStarts[i]=runStarts[i];      newRunAttributes[i]=runAttributes[i];      newRunAttributeValues[i]=runAttributeValues[i];    }    runStarts=newRunStarts;    runAttributes=newRunAttributes;    runAttributeValues=newRunAttributeValues;    runArraySize=newArraySize;  }  Vector<Attribute> newRunAttributes=null;  Vector<Object> newRunAttributeValues=null;  if (copyAttrs) {    Vector<Attribute> oldRunAttributes=runAttributes[runIndex - 1];    Vector<Object> oldRunAttributeValues=runAttributeValues[runIndex - 1];    if (oldRunAttributes != null) {      newRunAttributes=new Vector<>(oldRunAttributes);    }    if (oldRunAttributeValues != null) {      newRunAttributeValues=new Vector<>(oldRunAttributeValues);    }  }  runCount++;  for (int i=runCount - 1; i > runIndex; i--) {    runStarts[i]=runStarts[i - 1];    runAttributes[i]=runAttributes[i - 1];    runAttributeValues[i]=runAttributeValues[i - 1];  }  runStarts[runIndex]=offset;  runAttributes[runIndex]=newRunAttributes;  runAttributeValues[runIndex]=newRunAttributeValues;  return runIndex;}  }
class C{  public ClosedHeuristic(IScore sf){  this.scoringFunction=sf;}  }
class C{  public static void generate(ClientCache cache,PrintWriter pw,boolean useSchema,boolean includeKeysValues){  (new CacheXmlGenerator(cache,true,VERSION_LATEST,includeKeysValues)).generate(pw);}  }
class C{  protected String overrideClassname(Object o){  Enumeration<Class<?>> enm;  String result;  Class<?> currentCls;  result=o.getClass().getName();  enm=m_ClassnameOverride.keys();  while (enm.hasMoreElements()) {    currentCls=enm.nextElement();    if (currentCls.isInstance(o)) {      result=m_ClassnameOverride.get(currentCls);      break;    }  }  return result;}  }
class C{  protected ChangeThemeAction(SwingSet2 swingset,MetalTheme theme){  super("ChangeTheme");  this.swingset=swingset;  this.theme=theme;}  }
class C{  public void findMinAndMaxVals(){  double[] data;  double min=Double.MAX_VALUE;  double max=-Double.MAX_VALUE;  double z;  for (int stack=0; stack < numberStacks; stack++) {    for (int row=0; row < numberRows; row++) {      data=getRowValues(row,stack);      for (int col=0; col < numberColumns; col++) {        z=data[col];        if (z != noDataValue) {          if (z < min) {            min=z;          }          if (z > max) {            max=z;          }        }      }    }  }  maximumValue=max;  minimumValue=min;}  }
class C{  public void fireEvent(final String eventName){  findElement();  try {    JavascriptLibrary jsLib=new JavascriptLibrary();    jsLib.callEmbeddedSelenium(driver,"doFireEvent",element,eventName);  } catch (  Exception ex) {  }}  }
class C{  public static boolean isDecimalDatatype(IRI datatype){  return datatype.equals(XMLSchema.DECIMAL) || isIntegerDatatype(datatype);}  }
class C{  public static void sinhAndCosh(double value,DoubleWrapper hsine,DoubleWrapper hcosine){  if (USE_JDK_MATH) {    hsine.value=STRICT_MATH ? StrictMath.sinh(value) : Math.sinh(value);    hcosine.value=STRICT_MATH ? StrictMath.cosh(value) : Math.cosh(value);    return;  }  double h;  if (value < 0.0) {    value=-value;    h=-0.5;  } else {    h=0.5;  }  if (value < LOG_TWO_POW_27) {    if (value < TWO_POW_N28) {      hsine.value=(h < 0.0) ? -value : value;    } else {      double t=FastMath.expm1(value);      hsine.value=h * (t + t / (t + 1.0));    }    if (value < TWO_POW_N27) {      hcosine.value=1;    } else {      double t=FastMath.exp(value);      hcosine.value=0.5 * (t + 1 / t);    }  } else   if (value < 22.0) {    double t=FastMath.expm1(value);    hsine.value=h * (t + t / (t + 1.0));    hcosine.value=0.5 * (t + 1.0);  } else {    if (value < LOG_DOUBLE_MAX_VALUE) {      hsine.value=h * FastMath.exp(value);    } else {      double t=FastMath.exp(value * 0.5);      hsine.value=(h * t) * t;    }    hcosine.value=Math.abs(hsine.value);  }}  }
class C{  public static int indexOf(short[] array,short[] sub){  return indexOf(array,sub,0,array.length);}  }
class C{  public static Symbol GetBuiltInSymbol(String str,boolean pcalMode){  Symbol sym;  if (pcalMode) {    sym=(Symbol)pcalBuiltInHashTable.get(str);  } else {    sym=(Symbol)builtInHashTable.get(str);  }  if (sym == null || (sym.pcal && !pcalMode)) {    return null;  }  return sym;}  }
class C{  private void parseName(){  String name=getName();  if (name == null)   throw new IllegalArgumentException("MBeanPermission name " + "cannot be null");  if (name.equals(""))   throw new IllegalArgumentException("MBeanPermission name " + "cannot be empty");  int openingBracket=name.indexOf("[");  if (openingBracket == -1) {    objectName=ObjectName.WILDCARD;  } else {    if (!name.endsWith("]")) {      throw new IllegalArgumentException("MBeanPermission: " + "The ObjectName in the " + "target name must be "+ "included in square "+ "brackets");    } else {      try {        String on=name.substring(openingBracket + 1,name.length() - 1);        if (on.equals(""))         objectName=ObjectName.WILDCARD; else         if (on.equals("-"))         objectName=null; else         objectName=new ObjectName(on);      } catch (      MalformedObjectNameException e) {        throw new IllegalArgumentException("MBeanPermission: " + "The target name does " + "not specify a valid "+ "ObjectName",e);      }    }    name=name.substring(0,openingBracket);  }  int poundSign=name.indexOf("#");  if (poundSign == -1)   setMember("*"); else {    String memberName=name.substring(poundSign + 1);    setMember(memberName);    name=name.substring(0,poundSign);  }  setClassName(name);}  }
class C{  public Query like(int docNum) throws IOException {  if (fieldNames == null) {    Collection<String> fields=MultiFields.getIndexedFields(ir);    fieldNames=fields.toArray(new String[fields.size()]);  }  return createQuery(retrieveTerms(docNum));}  }
class C{  public static void mergeSort(double[] a,int fromIndex,int toIndex,DoubleComparator c){  rangeCheck(a.length,fromIndex,toIndex);  double aux[]=(double[])a.clone();  mergeSort1(aux,a,fromIndex,toIndex,c);}  }
class C{  public boolean equals(Object obj){  if ((obj != null) && (obj instanceof Attribute)) {    Attribute target=(Attribute)obj;    if (isOrdered() != target.isOrdered()) {      return false;    }    int len;    if (attrID.equals(target.getID()) && (len=size()) == target.size()) {      try {        if (isOrdered()) {          for (int i=0; i < len; i++) {            if (!valueEquals(get(i),target.get(i))) {              return false;            }          }        } else {          Enumeration<?> theirs=target.getAll();          while (theirs.hasMoreElements()) {            if (find(theirs.nextElement()) < 0)             return false;          }        }      } catch (      NamingException e) {        return false;      }      return true;    }  }  return false;}  }
class C{  public void invoke(InputStream is,OutputStream os) throws Exception {  invoke(is,os,null);}  }
class C{  @SuppressWarnings("unchecked") public static <I extends DeployInstance2>DeployStrategy2<I> strategy(){  return (DeployStrategy2<I>)STRATEGY;}  }
class C{  private void generateControllersForView(View view){  Iterator<String> controllers=view.iterateControllers();  while (controllers.hasNext()) {    String controller=controllers.next();    generateControllerBlock(controller);  }  controllers=context.getControllers().iterateGlobalControllers();  while (controllers.hasNext()) {    String controller=controllers.next();    JClassType controllerClass=getControllerClass(controller);    if (controllerClass != null) {      generateControllerBlock(controller);    }  }}  }
class C{  @NotNull public static AsyncResult<XLineBreakpoint> toggleLineBreakpoint(@NotNull Project project,@NotNull XSourcePosition position,@Nullable Editor editor,boolean temporary,boolean moveCarret){  int lineStart=position.getLine();  VirtualFile file=position.getFile();  int linesEnd=lineStart;  if (editor != null) {    FoldRegion region=FoldingUtil.findFoldRegionStartingAtLine(editor,lineStart);    if (region != null && !region.isExpanded()) {      linesEnd=region.getDocument().getLineNumber(region.getEndOffset());    }  }  final XBreakpointManager breakpointManager=XDebuggerManager.getInstance(project).getBreakpointManager();  XLineBreakpointType<?>[] lineTypes=XDebuggerUtil.getInstance().getLineBreakpointTypes();  XLineBreakpointType typeWinner=null;  int lineWinner=-1;  for (int line=lineStart; line <= linesEnd; line++) {    int maxPriority=0;    for (    XLineBreakpointType<?> type : lineTypes) {      maxPriority=Math.max(maxPriority,type.getPriority());      final XLineBreakpoint<? extends XBreakpointProperties> breakpoint=breakpointManager.findBreakpointAtLine(type,file,line);      if (breakpoint != null && temporary && !breakpoint.isTemporary()) {        breakpoint.setTemporary(true);      } else       if (type.canPutAt(file,line,project) || breakpoint != null) {        if (typeWinner == null || type.getPriority() > typeWinner.getPriority()) {          typeWinner=type;          lineWinner=line;        }      }    }    if (typeWinner != null && typeWinner.getPriority() == maxPriority) {      break;    }  }  if (typeWinner != null) {    XSourcePosition winPosition=(lineStart == lineWinner) ? position : XSourcePositionImpl.create(file,lineWinner);    if (winPosition != null) {      AsyncResult<XLineBreakpoint> res=XDebuggerUtilImpl.toggleAndReturnLineBreakpoint(project,typeWinner,winPosition,temporary,editor);      if (editor != null && lineStart != lineWinner) {        int offset=editor.getDocument().getLineStartOffset(lineWinner);        ExpandRegionAction.expandRegionAtOffset(project,editor,offset);        if (moveCarret) {          editor.getCaretModel().moveToOffset(offset);        }      }      return res;    }  }  return AsyncResult.rejected();}  }
class C{  public static <T>double jaccard(Set<T> setA,Set<T> setB){  if (setA.size() == 0 && setB.size() == 0)   return 1.0;  int setASize=setA.size();  int setBSize=setB.size();  setA.retainAll(setB);  return setA.size() / (double)(setASize + setBSize - setA.size());}  }
class C{  public boolean isStrict(){  return strict;}  }
class C{  private VirtualPoolChangeParam convertNewVirtualPoolChangeParamToOldParam(VolumeVirtualPoolChangeParam newParam){  VirtualPoolChangeParam oldParam=new VirtualPoolChangeParam();  oldParam.setVirtualPool(newParam.getVirtualPool());  oldParam.setProtection(newParam.getProtection());  oldParam.setConsistencyGroup(newParam.getConsistencyGroup());  oldParam.setTransferSpeedParam(newParam.getTransferSpeedParam());  oldParam.setMigrationSuspendBeforeCommit(newParam.isMigrationSuspendBeforeCommit());  oldParam.setMigrationSuspendBeforeDeleteSource(newParam.isMigrationSuspendBeforeDeleteSource());  return oldParam;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.158 -0400",hash_original_method="9A20624BDBF1AC6B7BCE76BD5FA03337",hash_generated_method="B0E6959A8BE3E7690E4051BD0B3D6C80") public static URL[] toURLs(File[] files) throws IOException {  URL[] urls=new URL[files.length];  for (int i=0; i < urls.length; i++) {    urls[i]=files[i].toURI().toURL();  }  return urls;}  }
class C{  public static CryptoEngine defaultEngine(){  return DEFAULT_ENGINE;}  }
class C{  public void println(){  print("\n");  text.repaint();}  }
class C{  private int[] blackWhiteRange(int fixedDimension,int maxWhiteRun,int minDim,int maxDim,boolean horizontal){  int center=(minDim + maxDim) / 2;  int start=center;  while (start >= minDim) {    if (horizontal ? image.get(start,fixedDimension) : image.get(fixedDimension,start)) {      start--;    } else {      int whiteRunStart=start;      do {        start--;      } while (start >= minDim && !(horizontal ? image.get(start,fixedDimension) : image.get(fixedDimension,start)));      int whiteRunSize=whiteRunStart - start;      if (start < minDim || whiteRunSize > maxWhiteRun) {        start=whiteRunStart;        break;      }    }  }  start++;  int end=center;  while (end < maxDim) {    if (horizontal ? image.get(end,fixedDimension) : image.get(fixedDimension,end)) {      end++;    } else {      int whiteRunStart=end;      do {        end++;      } while (end < maxDim && !(horizontal ? image.get(end,fixedDimension) : image.get(fixedDimension,end)));      int whiteRunSize=end - whiteRunStart;      if (end >= maxDim || whiteRunSize > maxWhiteRun) {        end=whiteRunStart;        break;      }    }  }  end--;  return end > start ? new int[]{start,end} : null;}  }
class C{  public CloseSessionResponse clone(){  CloseSessionResponse result=new CloseSessionResponse();  result.ResponseHeader=ResponseHeader == null ? null : ResponseHeader.clone();  return result;}  }
class C{  @Benchmark public void findExact(){  if (null == indexer.lookup(getRandomClassName())) {    throw new RuntimeException("Performance test not valid, class not found in indexer.");  }}  }
class C{  public SnackbarBuilder iconMarginStart(int iconMarginStart){  this.iconMarginStart=iconMarginStart;  return this;}  }
class C{  private static void saveKeyStoreToFile(KeyStore ks) throws KeyStoreException, IOException {  FileOutputStream fos=null;  try {    fos=new FileOutputStream(getKeystore().getPath());synchronized (KeyStoreManager.class) {      ks.store(fos,KEYSTORE_PASSWORD.toCharArray());    }  } catch (  FileNotFoundException e) {    throw new KeyStoreException("Saving of key store to file failed!",e);  }catch (  NoSuchAlgorithmException e) {    throw new KeyStoreException("Saving of key store to file failed!",e);  }catch (  CertificateException e) {    throw new KeyStoreException("Saving of key store to file failed!",e);  } finally {    CloseableUtils.tryToClose(fos);  }}  }
class C{  @Override public void onResume(){  super.onResume();  this.wwd.onResume();}  }
class C{  public int addStore(int n,CtClass type){  if (type.isPrimitive()) {    if (type == CtClass.booleanType || type == CtClass.charType || type == CtClass.byteType || type == CtClass.shortType || type == CtClass.intType)     addIstore(n); else     if (type == CtClass.longType) {      addLstore(n);      return 2;    } else     if (type == CtClass.floatType)     addFstore(n); else     if (type == CtClass.doubleType) {      addDstore(n);      return 2;    } else     throw new RuntimeException("void type?");  } else   addAstore(n);  return 1;}  }
class C{  public LookAhead createLookAhead(){  LookAheadImpl lookAhead=new LookAheadImpl();  return lookAhead;}  }
class C{  public boolean isValidArrayOrPrimitiveType(PsiType type,Project project){  if (type instanceof PsiArrayType) {    PsiArrayType arrayType=(PsiArrayType)type;    if (arrayType.getComponentType() instanceof PsiPrimitiveType) {      return true;    } else {      return isValidInnerArrayType(arrayType.getComponentType(),project);    }  }  PsiClassType collectionType=JavaPsiFacade.getElementFactory(project).createTypeByFQClassName("java.util.Collection");  if (collectionType.isAssignableFrom(type)) {    assert (type instanceof PsiClassType);    PsiClassType classType=(PsiClassType)type;    PsiType[] typeParams=classType.getParameters();    assert (typeParams.length > 0);    return isValidInnerArrayType(typeParams[0],project);  }  return true;}  }
class C{  public boolean hasWeightExt(){  return hasExtension(GphotoWeight.class);}  }
class C{  public static void verifyStatus(OCSPResp response) throws Exception {  BasicOCSPResp basicResp=(BasicOCSPResp)response.getResponseObject();  SingleResp singleResp=basicResp.getResponses()[0];  CertificateStatus status=singleResp.getCertStatus();  if (status != null) {    throw new CodedException(X_CERT_VALIDATION,"OCSP response indicates certificate status is %s",getStatusString(status));  }}  }
class C{  public void updateTimeLabel(){  timeLabel.setText("Time:" + workspace.getTime());  if (workspace.getUpdater().isRunning()) {    runningLabel.setVisible(true);  } else {    runningLabel.setVisible(false);  }}  }
class C{  public GondolaRc() throws Exception {  config=new Config(new File("conf/gondola-rc.conf"));  for (  String h : config.getHostIds()) {    for (    String s : config.getShardIds(h)) {      if (s.equals("shard1")) {        gondolas.add(new Gondola(config,h));      }    }  }}  }
class C{  private JavaPairRDD<MatrixIndexes,MatrixBlock> createPartitionPruningRDD(JavaPairRDD<MatrixIndexes,MatrixBlock> in,List<MatrixIndexes> filter){  HashSet<Integer> flags=new HashSet<Integer>();  Partitioner partitioner=in.rdd().partitioner().get();  for (  MatrixIndexes key : filter)   flags.add(partitioner.getPartition(key));  Function1<Object,Object> f=new PartitionPruningFunction(flags);  PartitionPruningRDD<Tuple2<MatrixIndexes,MatrixBlock>> ppRDD=PartitionPruningRDD.create(in.rdd(),f);  return new JavaPairRDD<MatrixIndexes,MatrixBlock>(ppRDD,ClassManifestFactory.fromClass(MatrixIndexes.class),ClassManifestFactory.fromClass(MatrixBlock.class));}  }
class C{  public Fingerprint(List<String> toVerifyAgainst){  this.events=toVerifyAgainst;  index=0;}  }
class C{  public boolean tieneReserva(){  boolean result=false;  if (getFinicialreserva() != null)   result=true;  return result;}  }
class C{  protected Frame frameFromTexture(int texId,int width,int height){  FrameManager manager=getFilterContext().getFrameManager();  FrameFormat format=ImageFormat.create(width,height,ImageFormat.COLORSPACE_RGBA,FrameFormat.TARGET_GPU);  Frame frame=manager.newBoundFrame(format,GLFrame.EXISTING_TEXTURE_BINDING,texId);  frame.setTimestamp(Frame.TIMESTAMP_UNKNOWN);  return frame;}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public static long max(long x,long y){  return (x >= y) ? x : y;}  }
class C{  public static void transform(double[] x,double[] zz,double[] psum,double[][] M,double[] lamda_l,int nx,int n_obj){  int k=nx - n_obj + 1;  double[] p=new double[nx];  for (int i=0; i < nx; i++) {    double z=0.0;    for (int j=0; j < nx; j++) {      z+=M[i][j] * x[j];    }    if (z >= 0 && z <= 1) {      zz[i]=z;      p[i]=0;    } else     if (z < 0) {      zz[i]=-lamda_l[i] * z;      p[i]=-z;    } else {      zz[i]=1 - lamda_l[i] * (z - 1);      p[i]=z - 1;    }  }  for (int j=0; j < n_obj; j++) {    psum[j]=0;  }  for (int i=nx - k + 1; i <= nx; i++) {    for (int j=0; j < n_obj; j++) {      psum[j]=Math.sqrt(Math.pow(psum[j],2) + Math.pow(p[i - 1],2));    }  }  for (int i=1; i <= n_obj; i++) {    for (int j=n_obj - i; j >= 1; j--) {      psum[i - 1]=Math.sqrt(Math.pow(psum[i - 1],2) + Math.pow(p[j - 1],2));    }    if (i > 1) {      psum[i - 1]=Math.sqrt(Math.pow(psum[i - 1],2) + Math.pow(p[(n_obj - i + 1) - 1],2));    }  }}  }
class C{  private void validateRequest(Request req) throws RequestExpiredException, InvalidSecurityException {  assert req != null;  log.debug("Validation of request");  final Date now=new Date();  TimestampType reqValidity=req.getHeader().getTimestamp();{    String schemaErr="Request is not validated against the schema";    assert reqValidity != null && reqValidity.getCreated() != null && reqValidity.getExpires() != null : schemaErr;  }  log.debug("The request received is valid from {} till {} and now is: {}",new Object[]{reqValidity.getCreated().getValue(),reqValidity.getExpires().getValue(),now});  final STSConfiguration config=configExtractor.getConfig();  final long clockTolerance=config.getClockTolerance();  final TimePeriod requestValidityPlusTolerance=TimePeriod.expand(LifetimeConvertor.fromRequestLifetime(reqValidity),clockTolerance);  if (!requestValidityPlusTolerance.contains(now)) {    log.error(VmEvent.CLOCK_SKEW_ERROR,"The current time {} does not fall in the request" + "lifetime interval extended with clock tolerance of {} ms: [{}; {}). " + "This might be due to a clock skew problem.",new Object[]{now,clockTolerance,requestValidityPlusTolerance.getStartTime(),requestValidityPlusTolerance.getEndTime()});    throw new RequestExpiredException("The time now " + now + " does not fall in the request lifetime interval"+ " extended with clock tolerance of "+ clockTolerance+ " ms: [ "+ requestValidityPlusTolerance.getStartTime()+ "; "+ requestValidityPlusTolerance.getEndTime()+ ")."+ " This might be due to a clock skew problem.");  }}  }
class C{  public Anonymous_afterCode_1_ createAnonymous_afterCode_1_(){  Anonymous_afterCode_1_Impl anonymous_afterCode_1_=new Anonymous_afterCode_1_Impl();  return anonymous_afterCode_1_;}  }
class C{  @Override public void register(EValidatorRegistrar registrar){}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static void launch(IProject project,String launchMode,String launcherDir,String launcherId){  try {    ILaunchConfiguration launchConfig=findOrCreateLaunchConfiguration(project,launcherDir,launcherId);    DebugUITools.launch(launchConfig,launchMode);  } catch (  CoreException e) {    CorePluginLog.logError(e,"CoreException: Aborting GWT Super Dev Mode Code Server launcher.");  }catch (  OperationCanceledException e) {    CorePluginLog.logError(e,"OperationCancelException: Aborting GWT Super Dev Mode Code Server launcher.");  }}  }
class C{  public static double computeCommission(double salesAmount){  double balance, commission;  balance=commission=0.0;  if (salesAmount >= 10000.01)   commission+=(balance=salesAmount - 10000) * 0.12;  if (salesAmount >= 5000.01)   commission+=(balance-=balance - 5000) * 0.10;  if (salesAmount >= 0.01)   commission+=balance * 0.08;  return commission;}  }
class C{  public static int[] oidStrToInts(String oid) throws IOException {  int length=oid.length();  if (oid.charAt(length - 1) == '.') {    throw new IOException("Bad OID: " + oid);  }  int[] result=new int[length / 2 + 1];  int number=0;  for (int i=0; i < length; i++) {    int value=0;    int pos=i;    for (; i < length; i++) {      char ch=oid.charAt(i);      if ((ch < '0') || (ch > '9')) {        break;      }      value=10 * value + (ch - '0');    }    if (i == pos) {      throw new IOException("Bad OID: " + oid);    }    result[number++]=value;    if (i == length) {      break;    }    char ch=oid.charAt(i);    if (ch != '.') {      throw new IOException("Bad OID: " + oid);    }  }  if (number < 2) {    throw new IOException("OID should consist of no less than 2 components: " + oid);  }  return Arrays.copyOfRange(result,0,number);}  }
class C{  public void deleteRelyingParty(String tenantName,String rpName) throws Exception {  getService().deleteRelyingParty(tenantName,rpName,this.getServiceContext());}  }
class C{  public SootField(String name,Type type,int modifiers){  this.name=name;  this.type=type;  this.modifiers=modifiers;  if (type instanceof RefLikeType)   Scene.v().getFieldNumberer().add(this);}  }
class C{  public static byte[] hash(byte[] input){  return hash(input,0,input.length);}  }
class C{  public static Section readFirstSectionAndClose(Reader reader,String titleToLookFor) throws IOException {  PemReader pemReader=new PemReader(reader);  try {    return pemReader.readNextSection(titleToLookFor);  }  finally {    pemReader.close();  }}  }
class C{  public NoAvailableLocatorsException(String message){  super(message);}  }
class C{  public static Paint convertFillPaint(Element filledElement,GraphicsNode filledNode,BridgeContext ctx){  Value v=CSSUtilities.getComputedStyle(filledElement,SVGCSSEngine.FILL_OPACITY_INDEX);  float opacity=convertOpacity(v);  v=CSSUtilities.getComputedStyle(filledElement,SVGCSSEngine.FILL_INDEX);  return convertPaint(filledElement,filledNode,v,opacity,ctx);}  }
class C{  @Override public void messageReceived(NextFilter nextFilter,IoSession session,Object message) throws Exception {  if (profileMessageReceived) {    long start=timeNow();    nextFilter.messageReceived(session,message);    long end=timeNow();    messageReceivedTimerWorker.addNewDuration(end - start);  } else {    nextFilter.messageReceived(session,message);  }}  }
class C{  @Override public void offerRescinded(SchedulerDriver driver,Protos.OfferID offerId){  scheduler.expireLease(offerId.getValue());}  }
class C{  public static <K,V,A>int occurrencesOfAttribute(Map<K,V> map,Function<? super V,? extends A> function,A object){  return Iterate.count(map.values(),Predicates.attributeEqual(function,object));}  }
class C{  @AfterTest public void deleteFolders() throws IOException {  Files.deleteIfExists(Paths.get(storageManager.getStorageDefaultFolder()));  Files.deleteIfExists(Paths.get(storageManager.getStorageUploadsFolder()));}  }
class C{  public SortingParams alpha(){  params.add(ALPHA.raw);  return this;}  }
class C{  private void enableHeaderActions(boolean enabled){  sheetComboBox.setEnabled(enabled);  hasHeaderRowCheckBox.setEnabled(enabled);  headerRowSpinner.setEnabled(enabled);  applySelectionAction.setEnabled(enabled);  cellRangeTextField.setEnabled(enabled);  selectAllAction.setEnabled(enabled);}  }
class C{  public void cacheZipFiles(Object owner){  ZipCache zipCache=this.zipFiles.get();  if (zipCache != null) {    return;  }  this.zipFiles.set(new ZipCache(owner));}  }
class C{  public static boolean isPrimitiveWrapperArray(Class<?> clazz){  Assert.notNull(clazz,"Class must not be null");  return (clazz.isArray() && isPrimitiveWrapper(clazz.getComponentType()));}  }
class C{  public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize,ThreadFactory threadFactory){  return new ScheduledThreadPoolExecutor(corePoolSize,threadFactory);}  }
class C{  public static String toCFStringType(short type) throws RegistryException {  if (type == TYPE_DWORD)   return "DWORD"; else   if (type == TYPE_STRING)   return "STRING"; else   if (type == TYPE_KEY)   return "KEY";  throw new RegistryException("invalid Registry Type definition");}  }
class C{  protected RuntimeException(String message,Throwable cause,boolean enableSuppression,boolean writableStackTrace){  super(message,cause,enableSuppression,writableStackTrace);}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] imageFiles=null;  String outputHeader=null;  WhiteboxRasterInfo[] images=null;  WhiteboxRaster ouptut=null;  int nCols=0;  int nRows=0;  double z;  int numClasses=0;  int numImages;  int progress=0;  int col, row;  int a, i, j;  double[][] data;  double noData=-32768;  double[][] classCentres=null;  double[] classCentre;  ArrayList<double[]> centres=new ArrayList<double[]>();  double[][] imageMetaData;  long[] numPixelsInEachClass;  int maxIterations=100;  double dist, minDist;  int whichClass;  byte initializationMode=0;  long numPixelsChanged=0;  long totalNumCells=0;  boolean totalNumCellsCounted=false;  double percentChanged=0;  double percentChangedThreshold=1.0;  double centroidMergeDist=30;  int minimumAllowableClassSize=1;  int initialNumClasses=10000;  double maxDist=Double.POSITIVE_INFINITY;  int unassignedClass=-1;  boolean isNoDataPixel;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  outputHeader=args[1];  maxIterations=Integer.parseInt(args[2]);  percentChangedThreshold=Double.parseDouble(args[3]);  centroidMergeDist=Double.parseDouble(args[4]);  if (!args[5].toLowerCase().contains("not specified")) {    maxDist=Double.parseDouble(args[5]);  }  minimumAllowableClassSize=Integer.parseInt(args[6]);  if (args[7].toLowerCase().contains("random")) {    initializationMode=1;  } else {    initializationMode=0;  }  int[] clusterHistory=new int[maxIterations];  double[] changeHistory=new double[maxIterations];  try {    imageFiles=inputFilesString.split(";");    numImages=imageFiles.length;    images=new WhiteboxRasterInfo[numImages];    imageMetaData=new double[numImages][3];    for (i=0; i < numImages; i++) {      images[i]=new WhiteboxRasterInfo(imageFiles[i]);      if (i == 0) {        nCols=images[i].getNumberColumns();        nRows=images[i].getNumberRows();        noData=images[i].getNoDataValue();      } else {        if (images[i].getNumberColumns() != nCols || images[i].getNumberRows() != nRows) {          showFeedback("All input images must have the same dimensions (rows and columns).");          return;        }      }      imageMetaData[i][0]=images[i].getNoDataValue();      imageMetaData[i][1]=images[i].getMinimumValue();      imageMetaData[i][2]=images[i].getMaximumValue();    }    numClasses=initialNumClasses;    data=new double[numImages][];    numPixelsInEachClass=new long[numImages];    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",imageFiles[0],WhiteboxRaster.DataType.INTEGER,noData);    output.setDataScale(DataScale.CATEGORICAL);    output.setPreferredPalette("qual.pal");    if (initializationMode == 1) {      Random generator=new Random();      double range;      for (a=0; a < numClasses; a++) {        classCentre=new double[numImages];        for (i=0; i < numImages; i++) {          range=imageMetaData[i][2] - imageMetaData[i][1];          classCentre[i]=imageMetaData[i][1] + generator.nextDouble() * range;        }        centres.add(classCentre);      }    } else {      double range, spacing;      for (a=0; a < numClasses; a++) {        classCentre=new double[numImages];        for (i=0; i < numImages; i++) {          range=imageMetaData[i][2] - imageMetaData[i][1];          spacing=range / numClasses;          classCentre[i]=imageMetaData[i][1] + spacing * a;        }        centres.add(classCentre);      }    }    j=0;    whichClass=0;    do {      if (j > 0) {        numClasses=classCentres.length;        centres.clear();        for (a=0; a < classCentres.length; a++) {          centres.add(classCentres[a]);        }        ArrayList<Long> numPixels=new ArrayList<Long>();        for (i=0; i < numPixelsInEachClass.length; i++) {          numPixels.add(numPixelsInEachClass[i]);        }        boolean flag=true;        a=0;        do {          if (numPixels.get(a) == 0) {            centres.remove(a);            numPixels.remove(a);            flag=true;            a=-1;          }          a++;          if (a >= numPixels.size()) {            flag=false;          }        } while (flag);        long numPixels1, numPixels2;        do {          flag=false;          for (a=0; a < centres.size(); a++) {            if (flag) {              break;            }            classCentre=centres.get(a);            numPixels1=numPixels.get(a);            for (int b=a; b < centres.size(); b++) {              numPixels2=numPixels.get(b);              if (b > a && numPixels1 > 0 && numPixels2 > 0) {                double[] classCentre2=centres.get(b);                dist=0;                for (i=0; i < numImages; i++) {                  dist+=(classCentre[i] - classCentre2[i]) * (classCentre[i] - classCentre2[i]);                }                dist=Math.sqrt(dist);                if (dist < centroidMergeDist) {                  double[] classCentre3=new double[numImages];                  long totalPix=numPixels1 + numPixels2;                  double weight1=(double)numPixels1 / totalPix;                  double weight2=(double)numPixels2 / totalPix;                  for (int k=0; k < numImages; k++) {                    classCentre3[k]=classCentre[k] * weight1 + classCentre2[k] * weight2;                  }                  centres.remove(Math.max(a,b));                  centres.remove(Math.min(a,b));                  centres.add(classCentre3);                  numPixels.remove(Math.max(a,b));                  numPixels.remove(Math.min(a,b));                  numPixels.add(totalPix);                  flag=true;                }                if (flag) {                  break;                }              }            }          }          numClasses=centres.size();        } while (flag);        flag=true;        a=0;        do {          if (numPixels.get(a) < minimumAllowableClassSize) {            centres.remove(a);            numPixels.remove(a);            flag=true;            a=-1;          }          a++;          if (a >= numPixels.size()) {            flag=false;          }        } while (flag);      }      numClasses=centres.size();      classCentres=new double[numClasses][numImages];      for (a=0; a < numClasses; a++) {        classCentre=centres.get(a);        classCentres[a]=classCentre.clone();      }      j++;      updateProgress("Loop " + j,1);      double[][] classCentreData=new double[numClasses][numImages];      numPixelsInEachClass=new long[numClasses];      numPixelsChanged=0;      for (row=0; row < nRows; row++) {        for (i=0; i < numImages; i++) {          data[i]=images[i].getRowValues(row);        }        for (col=0; col < nCols; col++) {          isNoDataPixel=false;          for (i=0; i < numImages; i++) {            if (data[i][col] == imageMetaData[i][0]) {              isNoDataPixel=true;              break;            }          }          if (!isNoDataPixel) {            if (!totalNumCellsCounted) {              totalNumCells++;            }            minDist=Double.POSITIVE_INFINITY;            whichClass=unassignedClass;            for (a=0; a < numClasses; a++) {              dist=0;              for (i=0; i < numImages; i++) {                dist+=(data[i][col] - classCentres[a][i]) * (data[i][col] - classCentres[a][i]);              }              if (dist < minDist && dist <= maxDist) {                minDist=dist;                whichClass=a;              }            }            z=output.getValue(row,col);            if ((int)z != whichClass) {              numPixelsChanged++;              output.setValue(row,col,whichClass);            }            if (whichClass != unassignedClass) {              numPixelsInEachClass[whichClass]++;              for (i=0; i < numImages; i++) {                classCentreData[whichClass][i]+=(data[i][col] - imageMetaData[i][1]);              }            }          } else {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (nRows - 1));        updateProgress("Loop " + j,progress);      }      totalNumCellsCounted=true;      for (a=0; a < numClasses; a++) {        if (numPixelsInEachClass[a] > 0) {          double[] newClassCentre=new double[numImages];          for (i=0; i < numImages; i++) {            newClassCentre[i]=classCentreData[a][i] / numPixelsInEachClass[a] + imageMetaData[i][1];          }          for (i=0; i < numImages; i++) {            classCentres[a][i]=newClassCentre[i];          }        }      }      percentChanged=(double)numPixelsChanged / totalNumCells * 100;      clusterHistory[j - 1]=numClasses;      changeHistory[j - 1]=percentChanged;    } while ((percentChanged > percentChangedThreshold) && (j < maxIterations));    double[] totalDeviations=new double[numClasses];    int numberOfUnassignedPixels=0;    for (row=0; row < nRows; row++) {      for (i=0; i < numImages; i++) {        data[i]=images[i].getRowValues(row);      }      for (col=0; col < nCols; col++) {        isNoDataPixel=false;        for (i=0; i < numImages; i++) {          if (data[i][col] == imageMetaData[i][0]) {            isNoDataPixel=true;            break;          }        }        if (!isNoDataPixel) {          whichClass=(int)(output.getValue(row,col));          if (whichClass != unassignedClass) {            dist=0;            for (i=0; i < numImages; i++) {              dist+=(data[i][col] - classCentres[whichClass][i]) * (data[i][col] - classCentres[whichClass][i]);            }            totalDeviations[whichClass]+=dist;          } else {            numberOfUnassignedPixels++;          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (nRows - 1));      updateProgress("Loop " + j,progress);    }    double[] standardDeviations=new double[numClasses];    for (a=0; a < numClasses; a++) {      standardDeviations[a]=Math.sqrt(totalDeviations[a] / (numPixelsInEachClass[a] - 1));    }    DecimalFormat df;    df=new DecimalFormat("0.00");    String retStr="Modified k-Means Classification Report\n\n";    retStr+="     \tCentroid Vector\n";    retStr+="     \t";    for (i=0; i < numImages; i++) {      retStr+="Image" + (i + 1) + "\t";    }    retStr+="SD\tPixels\t% Area\n";    for (a=0; a < numClasses; a++) {      String str="";      for (i=0; i < numImages; i++) {        str+=df.format(classCentres[a][i]) + "\t";      }      retStr+="Cluster " + a + "\t"+ str+ df.format(standardDeviations[a])+ "\t"+ numPixelsInEachClass[a]+ "\t"+ df.format((double)numPixelsInEachClass[a] / totalNumCells * 100)+ "\n";    }    retStr+="\n";    retStr+="Number of unassigned pixels (class = -1): " + numberOfUnassignedPixels + "\n\n";    for (i=0; i < numImages; i++) {      retStr+="Image" + (i + 1) + " = "+ images[i].getShortHeaderFile()+ "\n";    }    retStr+="\nCluster Centroid Distance Analysis:\n";    for (a=0; a < numClasses; a++) {      retStr+="\tClus. " + a;    }    retStr+="\n";    for (a=0; a < numClasses; a++) {      retStr+="Cluster " + a;      for (int b=0; b < numClasses; b++) {        if (b >= a) {          dist=0;          for (i=0; i < numImages; i++) {            dist+=(classCentres[a][i] - classCentres[b][i]) * (classCentres[a][i] - classCentres[b][i]);          }          retStr+="\t" + df.format(Math.sqrt(dist));        } else {          retStr+="\t";        }      }      retStr+="\n";    }    retStr+="\nCluster Merger History:\n";    retStr+="Iteration\tNumber of Clusters\tPercent Changed\n";    for (i=0; i < maxIterations; i++) {      if (clusterHistory[i] > 0) {        retStr+=(i + 1) + "\t" + clusterHistory[i]+ "\t"+ changeHistory[i]+ "\n";      } else {        break;      }    }    returnData(retStr);    Dendrogram plot=new Dendrogram(classCentres,numPixelsInEachClass);    returnData(plot);    for (i=0; i < numImages; i++) {      images[i].close();    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public BasicDBObject toDBObject(Object object){  try {    return new BasicDBObject(OBJECT_FIELD,JSON.parse(objectMapper.writeValueAsString(object)));  } catch (  Exception e) {    LOGGER.error("Failed to serialize object to basic db object",e);    return new BasicDBObject();  }}  }
class C{  public String createModifiedRef(String baseRef,Color color,Composite blend){  String colorName=Integer.toHexString(color.getRGB());  return baseRef + "@" + blend.toString()+ "#"+ colorName;}  }
class C{  public int size(){  try (Cursor cursor=mContext.getContentResolver().query(AcronymEntry.CONTENT_URI,null,null,null,null)){    return cursor.getCount();  } }  }
class C{  @Override protected void search(BayesNet bayesNet,Instances instances) throws Exception {  initCache(bayesNet,instances);  Operation oOperation=getOptimalOperation(bayesNet,instances);  while ((oOperation != null) && (oOperation.m_fDeltaScore > 0)) {    performOperation(bayesNet,instances,oOperation);    oOperation=getOptimalOperation(bayesNet,instances);  }  m_Cache=null;}  }
class C{  public boolean isNavigationAtBottom(){  return (mSmallestWidthDp >= 600 || mInPortrait);}  }
class C{  public String answer(){  return (String)get(ANSWER_KEY);}  }
class C{  private static String nextName(String base){  SessionEditorIndirectRef sessionEditorRef=DesktopController.getInstance().getFrontmostSessionEditor();  SessionEditor sessionEditor=(SessionEditor)sessionEditorRef;  SessionEditorWorkbench sessionWorkbench=sessionEditor.getSessionWorkbench();  SessionWrapper graph=sessionWorkbench.getSessionWrapper();  if (base == null) {    throw new NullPointerException("Base name must be non-null.");  }  int i=0;  loop:   while (true) {    i++;    String name=base + i;    for (    Object o : graph.getNodes()) {      Node node=(Node)(o);      if (node.getName().equals(name)) {        continue loop;      }    }    break;  }  return base + i;}  }
class C{  protected void startAutoScrolling(int direction){  if (isAutoScrolling) {    autoscrollTimer.stop();  }  isAutoScrolling=true;  if (direction == SCROLL_UP) {    scrollDirection=SCROLL_UP;    Point convertedPoint=SwingUtilities.convertPoint(scroller,new Point(1,1),list);    int top=list.locationToIndex(convertedPoint);    list.setSelectedIndex(top);    autoscrollTimer=new Timer(100,new AutoScrollActionHandler(SCROLL_UP));  } else   if (direction == SCROLL_DOWN) {    scrollDirection=SCROLL_DOWN;    Dimension size=scroller.getSize();    Point convertedPoint=SwingUtilities.convertPoint(scroller,new Point(1,(size.height - 1) - 2),list);    int bottom=list.locationToIndex(convertedPoint);    list.setSelectedIndex(bottom);    autoscrollTimer=new Timer(100,new AutoScrollActionHandler(SCROLL_DOWN));  }  autoscrollTimer.start();}  }
class C{  public void addDependency(DbObject obj){  dependencies.add(obj);}  }
class C{  protected VisualizePanel createPanel(Instances data) throws Exception {  VisualizePanel result=new ThresholdVisualizePanel();  PlotData2D plot=new PlotData2D(data);  plot.setPlotName("Incremental performance");  plot.m_displayAllPoints=true;  boolean[] connectPoints=new boolean[data.numInstances()];  for (int cp=1; cp < connectPoints.length; cp++)   connectPoints[cp]=true;  plot.setConnectPoints(connectPoints);  result.addPlot(plot);  if (data.attribute(SAMPLES) != null)   result.setXIndex(data.attribute(SAMPLES).index());  if (data.attribute(ACCURACY) != null)   result.setYIndex(data.attribute(ACCURACY).index());  return result;}  }
class C{  @Override protected void addChooserFilters(JFileChooser chooser){  javax.swing.filechooser.FileNameExtensionFilter filter=new javax.swing.filechooser.FileNameExtensionFilter(Bundle.getMessage("FileFilterLabel","*.dfm, *.hex"),"dmf","hex");  chooser.addChoosableFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Digitrax Mangled Firmware (*.dmf)","dmf"));  chooser.addChoosableFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Intel Hex Format Firmware (*.hex)","hex"));  chooser.addChoosableFileFilter(filter);  chooser.setFileFilter(filter);}  }
class C{  public Segment(short startCode,short endCode,boolean hasMap){  this.endCode=(0xffff & endCode);  this.startCode=(0xffff & startCode);  this.hasMap=hasMap;}  }
class C{  public Object parse(String text) throws DataParseException {  try {    StringTokenizer st=new StringTokenizer(text,"\"[](){}, ");    long[] array=new long[st.countTokens()];    for (int i=0; st.hasMoreTokens(); ++i) {      String tok=st.nextToken();      array[i]=LongParser.parseLong(tok);    }    return array;  } catch (  NumberFormatException e) {    throw new DataParseException(e);  }}  }
class C{  public void createSubUsageScenario19() throws Exception {  long usageStartTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") - DateTimeHandling.daysToMillis(6.5);  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"SCENARIO19_PERUNIT_MONTH",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_MONTH_ROLES_PARS_EVENTS_FREEP,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("SCENARIO19_PERUNIT_MONTH",serviceDetails,basicSetup.getCustomerUser1(),role);  container.login(basicSetup.getSupplierAdminKey(),ROLE_SERVICE_MANAGER,ROLE_TECHNOLOGY_MANAGER);  subscrSetup.recordEventForSubscription(subDetails,usageStartTime + DateTimeHandling.daysToMillis(8),"FILE_DOWNLOAD",2);  subscrSetup.recordEventForSubscription(subDetails,usageStartTime + DateTimeHandling.daysToMillis(10),"FILE_UPLOAD",2);  long usageEndTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") + DateTimeHandling.daysToMillis(10);  BillingIntegrationTestBase.setDateFactoryInstance(usageEndTime);  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("SCENARIO19_PERUNIT_MONTH",subDetails);}  }
class C{  public static SimpleName[] findByNode(ASTNode root,SimpleName name){  IBinding binding=name.resolveBinding();  if (binding != null) {    return findByBinding(root,binding);  }  SimpleName[] names=findByProblems(root,name);  if (names != null) {    return names;  }  int parentKind=name.getParent().getNodeType();  if (parentKind == ASTNode.LABELED_STATEMENT || parentKind == ASTNode.BREAK_STATEMENT || parentKind == ASTNode.CONTINUE_STATEMENT) {    ArrayList<SimpleName> res=new ArrayList<SimpleName>();    LabelFinder nodeFinder=new LabelFinder(name,res);    root.accept(nodeFinder);    return res.toArray(new SimpleName[res.size()]);  }  return new SimpleName[]{name};}  }
class C{  public static boolean nonEmptyCanopySetIntersection(long[] first,long[] second) throws Exception {  if (first.length != second.length) {    throw new Exception("Canopy lists need to be the same length");  }  if (first.length == 0 || second.length == 0) {    return false;  }  for (int i=0; i < first.length; i++) {    long firstBlock=first[i];    long secondBlock=second[i];    if ((firstBlock & secondBlock) != 0L) {      return true;    }  }  return false;}  }
class C{  void register(UUID nodeId,IgniteUuid ldrId){  assert nodeId != null;  assert ldrId != null;  assert nodeId.equals(ldrId.globalId());  assert !singleNode;synchronized (mux) {    if (missedRsrcs != null)     missedRsrcs.clear();    nodeList.remove(nodeId);    nodeList.addFirst(nodeId);    nodeLdrMap.put(nodeId,ldrId);  }}  }
class C{  protected PieData generatePieData(){  int count=4;  ArrayList<Entry> entries1=new ArrayList<Entry>();  ArrayList<String> xVals=new ArrayList<String>();  xVals.add("Quarter 1");  xVals.add("Quarter 2");  xVals.add("Quarter 3");  xVals.add("Quarter 4");  for (int i=0; i < count; i++) {    xVals.add("entry" + (i + 1));    entries1.add(new Entry((float)(Math.random() * 60) + 40,i));  }  PieDataSet ds1=new PieDataSet(entries1,"Quarterly Revenues 2014");  ds1.setColors(ColorTemplate.VORDIPLOM_COLORS);  ds1.setSliceSpace(2f);  ds1.setValueTextColor(Color.WHITE);  ds1.setValueTextSize(12f);  PieData d=new PieData(xVals,ds1);  d.setValueTypeface(tf);  return d;}  }
class C{  private int executeHadoopCmd(String... args) throws Exception {  ProcessBuilder procBuilder=createProcessBuilder();  List<String> cmd=new ArrayList<>();  cmd.add(hadoopHome + "/bin/hadoop");  cmd.addAll(Arrays.asList(args));  procBuilder.command(cmd);  log().info("Execute: " + procBuilder.command());  return watchProcess(procBuilder.start());}  }
class C{  protected void sequence_CharacterEscapeSequence(ISerializationContext context,CharacterEscapeSequence semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,RegularExpressionPackage.Literals.CHARACTER_ESCAPE_SEQUENCE__SEQUENCE) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,RegularExpressionPackage.Literals.CHARACTER_ESCAPE_SEQUENCE__SEQUENCE));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getCharacterEscapeSequenceAccess().getSequenceCONTROL_ESCAPETerminalRuleCall_0(),semanticObject.getSequence());  feeder.finish();}  }
class C{  public void addPlugin(IMaterialPlugin plugin){  if (mPlugins == null) {    mPlugins=new ArrayList<IMaterialPlugin>();  } else {    for (    IMaterialPlugin p : mPlugins) {      if (plugin.getClass().getSimpleName().equals(p.getClass().getSimpleName()))       return;    }  }  mPlugins.add(plugin);  mIsDirty=true;}  }
class C{  public void findAndUndo(Object obj){  if (obj instanceof OMDrawingTool) {    Debug.message("graphicloader","LOSGraphicLoader: removing OMDrawingTool");    OMDrawingTool odt=getDrawingTool();    if (odt == obj) {      setDrawingTool(null);    }  }}  }
class C{  public void resetTimeoutTimer(){  timeoutTimer.reset();}  }
class C{  public static void openAttribute(String name){  Log.write(" ");  Log.write(name);  Log.write("=\"");}  }
class C{  void putVar(LocalVar var){  boolean keepLocalVariables=varDebugInfo || (var.sym.isExceptionParameter() && var.sym.hasTypeAnnotations());  if (!keepLocalVariables)   return;  boolean ignoredSyntheticVar=(var.sym.flags() & Flags.SYNTHETIC) != 0 && ((var.sym.owner.flags() & Flags.LAMBDA_METHOD) == 0 || (var.sym.flags() & Flags.PARAMETER) == 0);  if (ignoredSyntheticVar)   return;  if (varBuffer == null)   varBuffer=new LocalVar[20]; else   varBuffer=ArrayUtils.ensureCapacity(varBuffer,varBufferSize);  varBuffer[varBufferSize++]=var;}  }
class C{  public ParseException createParseException(){  return new ParseException(this.buffer,this.ptr);}  }
class C{  public InvalidContentTypeFromClientProxy(){  requestFileName="getstate.query";  url="http://127.0.0.1:" + PortNumbers.PROXY_PORT;}  }
class C{  protected static boolean __has_identifier(ByteBuffer bb,String ident){  if (ident.length() != FILE_IDENTIFIER_LENGTH)   throw new AssertionError("FlatBuffers: file identifier must be length " + FILE_IDENTIFIER_LENGTH);  for (int i=0; i < FILE_IDENTIFIER_LENGTH; i++) {    if (ident.charAt(i) != (char)bb.get(bb.position() + SIZEOF_INT + i))     return false;  }  return true;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:02.093 -0500",hash_original_method="2D0B3C5ECC15AA5F78B0AD70805A049B",hash_generated_method="2D0B3C5ECC15AA5F78B0AD70805A049B") XmlBlock(AssetManager assets,int xmlBlock){  mAssets=assets;  mNative=xmlBlock;  mStrings=new StringBlock(nativeGetStringBlock(xmlBlock),false);}  }
class C{  public static void printTime(Time t){  System.out.print(t.hour);  System.out.print(":");  System.out.println(t.minute);  System.out.print(":");  System.out.println(t.second);}  }
class C{  private static ChoiceMomentData parseChoiceMomentElement(String momentId,Element momentElement) throws MissionParseException {  String description=getDescription(momentElement);  float timeoutLengthMinutes=parseTimeoutLengthMinutesElement(findSingleChildElementByTag(momentElement,ELEMENT_TIMEOUT_LENGTH_MINUTES));  String defaultChoiceId=parseDefaultChoiceElement(findSingleChildElementByTag(momentElement,ELEMENT_DEFAULT_CHOICE));  ArrayList<String> fictionalProgress=parseMomentFictionalProgress(momentElement);  ChoiceMomentData data=new ChoiceMomentData(momentId,fictionalProgress,description,defaultChoiceId,timeoutLengthMinutes);  NodeList choiceNodes=momentElement.getElementsByTagName(ELEMENT_CHOICE);  if (choiceNodes.getLength() > ChoiceMoment.MAXIMUM_NUM_OF_CHOICES) {    throw new MissionParseException("ChoiceMoments can have no more than " + ChoiceMoment.MAXIMUM_NUM_OF_CHOICES + " Choices.");  }  if (choiceNodes.getLength() < ChoiceMoment.MINIMUM_NUM_OF_CHOICES) {    throw new MissionParseException("ChoiceMoments can have no fewer than " + ChoiceMoment.MINIMUM_NUM_OF_CHOICES + " Choices.");  }  boolean defaultChoiceIsExistingChoice=false;  for (int i=0; i < choiceNodes.getLength(); i++) {    Node choiceNode=choiceNodes.item(i);    if (isElementNode(choiceNode)) {      Choice choice=parseChoiceElement((Element)choiceNode);      if (choice.getChoiceId() == defaultChoiceId || choice.getChoiceId().equals(defaultChoiceId)) {        defaultChoiceIsExistingChoice=true;      }      data.addChoice(choice);    }  }  if (!defaultChoiceIsExistingChoice) {    throw new MissionParseException("Default choice ID is not a valid Choice.");  }  return data;}  }
class C{  private void populateComputeStateAndNetworksForCreation(AWSComputeServiceCreationContext context,Instance instance){  String descLink=context.computeDescriptionMap.get(getKeyForComputeDescriptionFromInstance(instance));  if (descLink == null) {    return;  }  ComputeService.ComputeState computeState=mapInstanceToComputeState(instance,context.computeState.parentComputeLink,context.computeState.resourcePoolLink,descLink,context.computeState.tenantLinks);  List<Operation> networkOperations=mapInstanceIPAddressToNICCreationOperations(instance,computeState,context.computeState.tenantLinks,this);  if (networkOperations != null && !networkOperations.isEmpty()) {    context.enumerationOperations.addAll(networkOperations);  }  Operation postComputeState=createPostOperation(this,computeState,ComputeService.FACTORY_LINK);  context.enumerationOperations.add(postComputeState);}  }
class C{  @Override public boolean eventGeneratable(String eventName){  if (m_listenee == null) {    return false;  }  if (!eventName.equals("instance")) {    return false;  }  if (m_listenee instanceof EventConstraints) {    if (!((EventConstraints)m_listenee).eventGeneratable(eventName)) {      return false;    }  }  return true;}  }
class C{  @CanIgnoreReturnValue public Builder addEscape(char c,String replacement){  checkNotNull(replacement);  replacementMap.put(c,replacement);  return this;}  }
class C{  public static int level(Element element){  int level=0;  while (element.hasParent()) {    element=element.getParent();    level++;  }  return level;}  }
class C{  public boolean isRelativePosition(){  Object oo=get_Value(COLUMNNAME_IsRelativePosition);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public Power(){  super("basic.power",2,Ontology.NUMERICAL);}  }
class C{  public Collection<HTMLToken> tokenizeHTML(){  List<HTMLToken> tokens=new ArrayList<HTMLToken>();  String nestedTags=nestedTagsRegex(6);  Pattern p=Pattern.compile("" + "(?s:<!(--.*?--\\s*)+>)" + "|"+ "(?s:<\\?.*?\\?>)"+ "|" + nestedTags + "",Pattern.CASE_INSENSITIVE);  Matcher m=p.matcher(text);  int lastPos=0;  while (m.find()) {    if (lastPos < m.start()) {      tokens.add(HTMLToken.text(text.substring(lastPos,m.start())));    }    tokens.add(HTMLToken.tag(text.substring(m.start(),m.end())));    lastPos=m.end();  }  if (lastPos < text.length()) {    tokens.add(HTMLToken.text(text.substring(lastPos,text.length())));  }  return tokens;}  }
class C{  public int addGlyph(FontDefinition.Glyph glyph){  int idx=glyphs.size();  if (glyph.getCode() > 0) {    Integer codeI=new Integer(glyph.getCode());    indices.put(codeI,new Integer(idx));    glyphs.put(codeI,glyph);  }  glyphList.add(glyph);  return idx;}  }
class C{  public void parseInto(Object enclosingObject,String fieldName){  Class<?> target=null;  Object outgoing=null;  Field targetField=null;  try {    Class<?> sketchClass=enclosingObject.getClass();    targetField=sketchClass.getDeclaredField(fieldName);    Class<?> targetArray=targetField.getType();    if (!targetArray.isArray()) {    } else {      target=targetArray.getComponentType();      outgoing=Array.newInstance(target,getRowCount());    }  } catch (  NoSuchFieldException e) {    e.printStackTrace();  }catch (  SecurityException e) {    e.printStackTrace();  }  Class<?> enclosingClass=target.getEnclosingClass();  Constructor<?> con=null;  try {    if (enclosingClass == null) {      con=target.getDeclaredConstructor();    } else {      con=target.getDeclaredConstructor(new Class[]{enclosingClass});    }    if (!con.isAccessible()) {      con.setAccessible(true);    }  } catch (  SecurityException e) {    e.printStackTrace();  }catch (  NoSuchMethodException e) {    e.printStackTrace();  }  Field[] fields=target.getDeclaredFields();  ArrayList<Field> inuse=new ArrayList<Field>();  for (  Field field : fields) {    String name=field.getName();    if (getColumnIndex(name,false) != -1) {      if (!field.isAccessible()) {        field.setAccessible(true);      }      inuse.add(field);    } else {    }  }  int index=0;  try {    for (    TableRow row : rows()) {      Object item=null;      if (enclosingClass == null) {        item=con.newInstance();      } else {        item=con.newInstance(new Object[]{enclosingObject});      }      for (      Field field : inuse) {        String name=field.getName();        if (field.getType() == String.class) {          field.set(item,row.getString(name));        } else         if (field.getType() == Integer.TYPE) {          field.setInt(item,row.getInt(name));        } else         if (field.getType() == Long.TYPE) {          field.setLong(item,row.getLong(name));        } else         if (field.getType() == Float.TYPE) {          field.setFloat(item,row.getFloat(name));        } else         if (field.getType() == Double.TYPE) {          field.setDouble(item,row.getDouble(name));        } else         if (field.getType() == Boolean.TYPE) {          String content=row.getString(name);          if (content != null) {            if (content.toLowerCase().equals("true") || content.equals("1")) {              field.setBoolean(item,true);            }          }        } else         if (field.getType() == Character.TYPE) {          String content=row.getString(name);          if (content != null && content.length() > 0) {            field.setChar(item,content.charAt(0));          }        }      }      Array.set(outgoing,index++,item);    }    if (!targetField.isAccessible()) {      targetField.setAccessible(true);    }    targetField.set(enclosingObject,outgoing);  } catch (  InstantiationException e) {    e.printStackTrace();  }catch (  IllegalAccessException e) {    e.printStackTrace();  }catch (  IllegalArgumentException e) {    e.printStackTrace();  }catch (  InvocationTargetException e) {    e.printStackTrace();  }}  }
class C{  public void check(final int api){  if (api == Opcodes.ASM4) {    if (visibleTypeAnnotations != null && visibleTypeAnnotations.size() > 0) {      throw new RuntimeException();    }    if (invisibleTypeAnnotations != null && invisibleTypeAnnotations.size() > 0) {      throw new RuntimeException();    }  }}  }
class C{  public void unblockUser(Integer targetUserId) throws IOException {  String tailUrl=GitlabUser.USERS_URL + "/" + targetUserId+ GitlabUser.UNBLOCK_URL;  retrieve().method("PUT").to(tailUrl,Void.class);}  }
class C{  private int constrainOffset(JTextComponent text,int offset){  Document doc=text.getDocument();  if ((offset != 0) && (offset > doc.getLength())) {    offset=doc.getLength();  }  if (offset < 0) {    offset=0;  }  return offset;}  }
class C{  public static UpdateSource guess_update_source(PackageInfo pi,Bundle metadata){  android.content.pm.Signature[] signs=pi.signatures;  ArrayList<String> details=new ArrayList<String>();  for (  Signature sign : signs) {    X509Certificate cert;    try {      cert=(X509Certificate)CertificateFactory.getInstance("X509").generateCertificate(new ByteArrayInputStream(sign.toByteArray()));    } catch (    CertificateException e) {      Log.v(MainActivity.TAG,"Error while reading " + pi.packageName + "'s certificate.");      return null;    }    details.addAll(Arrays.asList(cert.getSubjectDN().getName().split(",")));  }  if (metadata != null) {    for (    String key : metadata.keySet()) {      details.add("metadata=" + key);    }  }  for (  UpdateSource us : get_update_sources()) {    if (us.test_autoselection(pi.packageName,details)) {      return us;    }  }  return null;}  }
class C{  public ByteArray resize(ByteArray array,long size){  if (array instanceof BigByteArray) {    return resizeInPlace((BigByteArray)array,size);  } else {    AbstractArray arr=(AbstractArray)array;    final ByteArray newArray=newByteArray(size,arr.clearOnResize);    final byte[] rawArray=((ByteArrayWrapper)array).array;    newArray.set(0,rawArray,0,(int)Math.min(rawArray.length,newArray.size()));    arr.close();    return newArray;  }}  }
class C{  public Matrix4d add4x3(Matrix4fc other){  return add4x3(other,this);}  }
class C{  @Override public String toString(){  return getNormalizedWithTypeString();}  }
class C{  public final static byte[] writeShort(short v){  return writeShort(v,new byte[2],0);}  }
class C{  public VOParameterOption(String optionId,String optionDescription,String paramDefId){  this.optionId=optionId;  this.optionDescription=optionDescription;  this.paramDefId=paramDefId;}  }
class C{  public boolean intersects(QuadTree quadTree){  Vector3[] testPoints=quadTree.getTestPoints();  BoundingBox bbox=(BoundingBox)getWorldBound();  for (int i=0; i < testPoints.length; ++i) {    if (bbox.contains(testPoints[i])) {      return (true);    }  }  ReadOnlyVector3 center=new Vector3(bbox.getCenter());  double x=center.getX() - bbox.getXExtent();  double y=center.getY() - bbox.getYExtent();  if (quadTree.contains(x,y)) {    return (true);  }  x=center.getX() + bbox.getXExtent();  y=center.getY() + bbox.getYExtent();  if (quadTree.contains(x,y)) {    return (true);  }  return (false);}  }
class C{  public boolean satisfies(ServiceResourceProfile profile){  return scalarValues.containsKey(RESOURCE_CPUS) && scalarValues.get(RESOURCE_CPUS).satisfies(profile.getAggregateCpu()) && scalarValues.containsKey(RESOURCE_MEM)&& scalarValues.get(RESOURCE_MEM).satisfies(profile.getAggregateMemory())&& rangeValues.containsKey(RESOURCE_PORTS)&& rangeValues.get(RESOURCE_PORTS).satisfies(profile.getPorts().values());}  }
class C{  public BatchFraction defaultThreadPool(final String name,final int maxThreads,final int keepAliveTime,final TimeUnit keepAliveUnits){  threadPool(name,maxThreads,keepAliveTime,keepAliveUnits);  return defaultThreadPool(name);}  }
class C{  public EscapeTokenizer(String source){  this.source=source;  this.sourceLength=source.length();  this.pos=0;}  }
class C{  protected void rejectQuest(){  concreteQuest.getNPC().add(ConversationStates.QUEST_OFFERED,ConversationPhrases.NO_MESSAGES,null,ConversationStates.IDLE,concreteQuest.respondToQuestRefusal(),new DecreaseKarmaAction(concreteQuest.getKarmaDiffForQuestResponse()));}  }
class C{  public static <E>Set<E> constrainedSet(Set<E> set,Constraint<? super E> constraint){  return new ConstrainedSet<E>(set,constraint);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override public void updateWith(final IStatusMessage m){  if (isUpdating) {    return;  }  isUpdating=true;  if (m instanceof SubTaskMessage) {    if (inUserStatus) {      return;    }    final SubTaskMessage m2=(SubTaskMessage)m;    final Boolean beginOrEnd=m2.getBeginOrEnd();    if (beginOrEnd == null) {      subTaskCompletion=((SubTaskMessage)m).getCompletion();    } else     if (beginOrEnd) {      subTaskName=m.getText();      inSubTask=true;      subTaskCompletion=null;    } else {      inSubTask=false;      subTaskCompletion=null;    }  } else   if (m instanceof UserStatusMessage) {    final String s=m.getText();    if (s == null) {      resume();    } else {      inSubTask=false;      inUserStatus=true;      final Color c=m.getColor();      if (c == null) {        color=null;        state=IGui.NEUTRAL;      } else {        color=GamaColors.get(c);      }      mainTaskName=m.getText();    }  } else   if (m instanceof StatusMessage) {    if (inUserStatus) {      return;    }    inSubTask=false;    mainTaskName=m.getText();    state=m.getCode();  }  if (m.getIcon() != null) {    label.setImage(GamaIcons.create(m.getIcon()).image());  } else {    label.setImage(null);  }  label.setColor(getPopupBackground());  if (!inUserStatus && !inSubTask && mainTaskName == null) {    if (getStatusAgent() == null)     label.setColor(IGamaColors.NEUTRAL); else     label.setColor(GamaColors.get(getStatusAgent().getColor()));  }  if (inSubTask) {    label.setText(subTaskName + (subTaskCompletion != null ? " [" + (int)(subTaskCompletion * 100) + "%]" : ""));  } else {    label.setText(mainTaskName == null ? getClockMessage() : mainTaskName);  }  if (popup.isVisible()) {    popup.display();  }  isUpdating=false;  inUserStatus=false;}  }
class C{  @Override public Class<? extends Task> taskClass(){  return MqttSourceTask.class;}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.ANNOTABLE_N4_MEMBER_DECLARATION___GET_ANNOTATIONS:    return getAnnotations();}return super.eInvoke(operationID,arguments);}  }
class C{  public void parse(Reader reader) throws IOException {  parse(reader,DEFAULT_BUFFER_SIZE);}  }
class C{  public static Dcs cs_compress(Dcs T){  int m, n, nz, p, k, Cp[], Ci[], w[], Ti[], Tj[];  double Cx[], Tx[];  Dcs C;  if (!Dcs_util.CS_TRIPLET(T))   return (null);  m=T.m;  n=T.n;  Ti=T.i;  Tj=T.p;  Tx=T.x;  nz=T.nz;  C=Dcs_util.cs_spalloc(m,n,nz,Tx != null,false);  w=new int[n];  Cp=C.p;  Ci=C.i;  Cx=C.x;  for (k=0; k < nz; k++)   w[Tj[k]]++;  Dcs_cumsum.cs_cumsum(Cp,w,n);  for (k=0; k < nz; k++) {    Ci[p=w[Tj[k]]++]=Ti[k];    if (Cx != null)     Cx[p]=Tx[k];  }  return C;}  }
class C{  public static NinePatch createNinePatch(URL fileUrl,boolean convert){  try {    return NinePatch.load(fileUrl,convert);  } catch (  Exception e) {    e.printStackTrace();    return null;  }}  }
class C{  protected void ui_initStreamColors(){  assertTrue(disposed == false);}  }
class C{  @RequestMapping(value="/{cubeName}/rebuild2",method={RequestMethod.PUT}) @ResponseBody public JobInstance rebuild(@PathVariable String cubeName,@RequestBody JobBuildRequest2 req){  return buildInternal(cubeName,0,0,req.getSourceOffsetStart(),req.getSourceOffsetEnd(),req.getSourcePartitionOffsetStart(),req.getSourcePartitionOffsetEnd(),req.getBuildType(),req.isForce());}  }
class C{  public void delete() throws IOException, ServiceException {  if (state.service == null) {    throw new ServiceException(CoreErrorDomain.ERR.entryNotAssociated);  }  Link editLink=getEditLink();  if (editLink == null) {    throw new UnsupportedOperationException("Entry cannot be deleted");  }  URI editUrl=editLink.getHrefUri();  String etag=getEtag();  state.service.delete(editUrl,GDataProtocol.isWeakEtag(etag) ? null : etag);}  }
class C{  private int systemListenerIndex(Object topic){  assert topic instanceof GridTopic;  return ((GridTopic)topic).ordinal();}  }
class C{  public static void traverse(Treechildren treechildren,TreeItemAction action){  List<?> list=treechildren.getChildren();  for (int index=0; index < list.size(); index++) {    Object o=list.get(index);    if (o instanceof Treechildren) {      Treechildren treechild=(Treechildren)o;      traverse(treechild,action);    } else     if (o instanceof Treeitem) {      Treeitem treeitem=(Treeitem)o;      action.run(treeitem);      List<?> treeitemChildren=treeitem.getChildren();      for (int childIndex=0; childIndex < treeitemChildren.size(); childIndex++) {        Object child=treeitemChildren.get(childIndex);        if (child instanceof Treechildren) {          Treechildren treechild=(Treechildren)child;          traverse(treechild,action);        }      }    }  }}  }
class C{  public boolean isResponseAvailable() throws IOException {  LOG.trace("enter HttpConnection.isResponseAvailable()");  try {    if (isOpen) {      return inputStream.available() > 0;    } else {      return false;    }  } catch (  final Throwable t) {    LOG.debug("",t);    if (t instanceof IOException) {      throw (IOException)t;    }    throw new Error(t);  }}  }
class C{  private void attemptMatch(BasicBlock basicBlock,BasicBlock.InstructionIterator instructionIterator) throws DataflowAnalysisException {  work(new State(basicBlock,instructionIterator,pattern.getFirst()));}  }
class C{  public double[] distributionForInstance(Instance instance) throws Exception {  double[] probOfClassGivenDoc=new double[m_numClasses];  double[] logDocGivenClass=new double[m_numClasses];  for (int h=0; h < m_numClasses; h++)   logDocGivenClass[h]=probOfDocGivenClass(instance,h);  double max=logDocGivenClass[Utils.maxIndex(logDocGivenClass)];  double probOfDoc=0.0;  for (int i=0; i < m_numClasses; i++) {    probOfClassGivenDoc[i]=Math.exp(logDocGivenClass[i] - max) * m_probOfClass[i];    probOfDoc+=probOfClassGivenDoc[i];  }  Utils.normalize(probOfClassGivenDoc,probOfDoc);  return probOfClassGivenDoc;}  }
class C{  public IconicsDrawableOld sizeDp(int size){  return sizePx(Utils.convertDpToPx(context,size));}  }
class C{  ScheduledFutureTask(Runnable r,V result,long ns,long period){  super(r,result);  this.time=ns;  this.period=period;  this.sequenceNumber=sequencer.getAndIncrement();}  }
class C{  public void cancel(final int id){  final BaseNotificationItem notification=remove(id);  if (notification == null) {    return;  }  notification.cancel();}  }
class C{  @Override public int hashCode(){  return this.value;}  }
class C{  protected final void throwObjectContractViolation(Object o1,Object o2,int size,int oldSize,Object[] oldKeys) throws IllegalArgumentException {  String extra=dumpExtraInfo(o1,o2,size(),oldSize,oldKeys);  throw buildObjectContractViolation(o1,o2,extra);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:43.558 -0500",hash_original_method="6776820FB8E88CBACCBB30EFABCCA565",hash_generated_method="065503F9B989D3D0FA336BA1746F0CEC") public int timePassed(){  final long time=AnimationUtils.currentAnimationTimeMillis();  final long startTime=Math.min(mScrollerX.mStartTime,mScrollerY.mStartTime);  return (int)(time - startTime);}  }
class C{  protected static Instantiator newInstance(Class instantiatorClass,Class instantiatedClass,int id){  if (!Instantiator.class.isAssignableFrom(instantiatorClass)) {    throw new IllegalArgumentException(LocalizedStrings.InternalInstantiator_0_DOES_NOT_EXTEND_INSTANTIATOR.toLocalizedString(instantiatorClass.getName()));  }  Constructor init;  boolean intConstructor=false;  Class[] types;  try {    types=new Class[]{Class.class,int.class};    init=instantiatorClass.getDeclaredConstructor(types);    intConstructor=true;  } catch (  NoSuchMethodException ex) {    try {      types=new Class[]{Class.class,byte.class};      init=instantiatorClass.getDeclaredConstructor(types);    } catch (    NoSuchMethodException ex2) {      StringId msg=LocalizedStrings.InternalInstantiator_CLASS_0_DOES_NOT_HAVE_A_TWOARGUMENT_CLASS_INT_CONSTRUCTOR;      Object[] msgArgs=new Object[]{instantiatorClass.getName()};      if (instantiatorClass.getDeclaringClass() != null) {        msg=LocalizedStrings.InternalInstantiator_CLASS_0_DOES_NOT_HAVE_A_TWOARGUMENT_CLASS_INT_CONSTRUCTOR_IT_IS_AN_INNER_CLASS_OF_1_SHOULD_IT_BE_A_STATIC_INNER_CLASS;        msgArgs=new Object[]{instantiatorClass.getName(),instantiatorClass.getDeclaringClass()};      }      throw new IllegalArgumentException(msg.toLocalizedString(msgArgs));    }  }  Instantiator s;  try {    init.setAccessible(true);    Object[] args=new Object[]{instantiatedClass,intConstructor ? (Object)Integer.valueOf(id) : (Object)Byte.valueOf((byte)id)};    s=(Instantiator)init.newInstance(args);  } catch (  IllegalAccessException ex) {    throw new IllegalArgumentException(LocalizedStrings.InternalInstantiator_COULD_NOT_ACCESS_ZEROARGUMENT_CONSTRUCTOR_OF_0.toLocalizedString(instantiatorClass.getName()));  }catch (  InstantiationException ex) {    RuntimeException ex2=new IllegalArgumentException(LocalizedStrings.InternalInstantiator_COULD_NOT_INSTANTIATE_AN_INSTANCE_OF_0.toLocalizedString(instantiatorClass.getName()));    ex2.initCause(ex);    throw ex2;  }catch (  InvocationTargetException ex) {    RuntimeException ex2=new IllegalArgumentException(LocalizedStrings.InternalInstantiator_WHILE_INSTANTIATING_AN_INSTANCE_OF_0.toLocalizedString(instantiatorClass.getName()));    ex2.initCause(ex);    throw ex2;  }  return s;}  }
class C{  protected boolean afterDelete(boolean success){  if (!success)   return success;  return updateBatch();}  }
class C{  public ShortInterleavedRaster(SampleModel sampleModel,DataBuffer dataBuffer,Point origin){  this(sampleModel,dataBuffer,new Rectangle(origin.x,origin.y,sampleModel.getWidth(),sampleModel.getHeight()),origin,null);}  }
class C{  public final void addExceptions(Collection<? extends Throwable> ex){  getExceptions().addAll(ex);}  }
class C{  public void transformPoints(float[] xValues,float[] yValues){  int n=xValues.length;  for (int i=0; i < n; i++) {    float x=xValues[i];    float y=yValues[i];    float denominator=a13 * x + a23 * y + a33;    xValues[i]=(a11 * x + a21 * y + a31) / denominator;    yValues[i]=(a12 * x + a22 * y + a32) / denominator;  }}  }
class C{  public static float sqrt(float fValue){  return (float)Math.sqrt(fValue);}  }
class C{  public StoreField(Token t,Symbol symbol,Type type,Expression index,Expression value){  super(t);  this.symbol=symbol;  this.index=index;  this.type=type;  this.value=value;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeaderRed=null;  String inputHeaderGreen=null;  String inputHeaderBlue=null;  String inputHeaderAlpha=null;  String outputHeader=null;  boolean alphaChannelSpecified=true;  boolean performContrastEnhancement=true;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeaderRed=args[0];  inputHeaderGreen=args[1];  inputHeaderBlue=args[2];  inputHeaderAlpha=args[3];  if (inputHeaderAlpha.toLowerCase().contains("not specified")) {    alphaChannelSpecified=false;  }  outputHeader=args[4];  String doEnhancement=args[5];  if (doEnhancement.toLowerCase().contains("not specified") || doEnhancement.toLowerCase().contains("f")) {    performContrastEnhancement=false;  }  if ((inputHeaderRed == null) || (inputHeaderGreen == null) || (inputHeaderBlue == null)|| (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double redVal, greenVal, blueVal, alphaVal;    double redRange, greenRange, blueRange;    double redMin, greenMin, blueMin;    int r, g, b, a;    double z;    int progress=0;    int oldProgress=-1;    WhiteboxRasterInfo red=new WhiteboxRasterInfo(inputHeaderRed);    int rows=red.getNumberRows();    int cols=red.getNumberColumns();    WhiteboxRasterInfo green=new WhiteboxRasterInfo(inputHeaderGreen);    if ((green.getNumberRows() != rows) || (green.getNumberColumns() != cols)) {      showFeedback("All input images must have the same dimensions.");      return;    }    WhiteboxRasterInfo blue=new WhiteboxRasterInfo(inputHeaderBlue);    if ((blue.getNumberRows() != rows) || (blue.getNumberColumns() != cols)) {      showFeedback("All input images must have the same dimensions.");      return;    }    double noData=red.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeaderRed,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("rgb.pal");    outputFile.setDataScale(WhiteboxRaster.DataScale.RGB);    redMin=red.getDisplayMinimum();    greenMin=green.getDisplayMinimum();    blueMin=blue.getDisplayMinimum();    redRange=red.getDisplayMaximum() - redMin;    greenRange=green.getDisplayMaximum() - greenMin;    blueRange=blue.getDisplayMaximum() - blueMin;    if (!alphaChannelSpecified) {      double[] dataRed, dataGreen, dataBlue;      oldProgress=-1;      for (row=0; row < rows; row++) {        dataRed=red.getRowValues(row);        dataGreen=green.getRowValues(row);        dataBlue=blue.getRowValues(row);        for (col=0; col < cols; col++) {          redVal=dataRed[col];          greenVal=dataGreen[col];          blueVal=dataBlue[col];          if ((redVal != noData) && (greenVal != noData) && (blueVal != noData)) {            r=(int)((redVal - redMin) / redRange * 255);            if (r < 0) {              r=0;            }            if (r > 255) {              r=255;            }            g=(int)((greenVal - greenMin) / greenRange * 255);            if (g < 0) {              g=0;            }            if (g > 255) {              g=255;            }            b=(int)((blueVal - blueMin) / blueRange * 255);            if (b < 0) {              b=0;            }            if (b > 255) {              b=255;            }            z=(double)((255 << 24) | (b << 16) | (g << 8)| r);            outputFile.setValue(row,col,z);          } else {            outputFile.setValue(row,col,noData);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          updateProgress(progress);          oldProgress=progress;          if (cancelOp) {            cancelOperation();            return;          }        }      }    } else {      WhiteboxRaster alpha=new WhiteboxRaster(inputHeaderAlpha,"r");      if ((alpha.getNumberRows() != rows) || (alpha.getNumberColumns() != cols)) {        showFeedback("All input images must have the same dimensions.");        return;      }      double[] dataRed, dataGreen, dataBlue, dataAlpha;      double alphaMin, alphaRange;      alphaMin=alpha.getDisplayMinimum();      alphaRange=alpha.getDisplayMaximum() - alphaMin;      oldProgress=-1;      for (row=0; row < rows; row++) {        dataRed=red.getRowValues(row);        dataGreen=green.getRowValues(row);        dataBlue=blue.getRowValues(row);        dataAlpha=alpha.getRowValues(row);        for (col=0; col < cols; col++) {          redVal=dataRed[col];          greenVal=dataGreen[col];          blueVal=dataBlue[col];          alphaVal=dataAlpha[col];          if ((redVal != noData) && (greenVal != noData) && (blueVal != noData)) {            r=(int)((redVal - redMin) / redRange * 255);            if (r < 0) {              r=0;            }            if (r > 255) {              r=255;            }            g=(int)((greenVal - greenMin) / greenRange * 255);            if (g < 0) {              g=0;            }            if (g > 255) {              g=255;            }            b=(int)((blueVal - blueMin) / blueRange * 255);            if (b < 0) {              b=0;            }            if (b > 255) {              b=255;            }            a=(int)((alphaVal - alphaMin) / alphaRange * 255);            if (a < 0) {              a=0;            }            if (a > 255) {              a=255;            }            z=(a << 24) | (b << 16) | (g << 8)| r;            outputFile.setValue(row,col,z);          } else {            outputFile.setValue(row,col,noData);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          updateProgress(progress);          oldProgress=progress;          if (cancelOp) {            cancelOperation();            return;          }        }      }      alpha.close();    }    red.close();    green.close();    blue.close();    if (performContrastEnhancement) {      outputFile.flush();      int rOut, gOut, bOut;      int E=100;      double[] data;      long numPixels=0;      int r_l=Integer.MAX_VALUE;      int r_h=Integer.MIN_VALUE;      long r_e=0;      long rSqrTotal=0;      int g_l=Integer.MAX_VALUE;      int g_h=Integer.MIN_VALUE;      long g_e=0;      long gSqrTotal=0;      int b_l=Integer.MAX_VALUE;      int b_h=Integer.MIN_VALUE;      long b_e=0;      long bSqrTotal=0;      int L=0;      int H=255;      oldProgress=-1;      for (row=0; row < rows; row++) {        data=outputFile.getRowValues(row);        for (col=0; col < cols; col++) {          z=data[col];          if (z != noData) {            numPixels++;            r=((int)z & 0xFF);            g=(((int)z >> 8) & 0xFF);            b=(((int)z >> 16) & 0xFF);            if (r < r_l) {              r_l=r;            }            if (r > r_h) {              r_h=r;            }            r_e+=r;            rSqrTotal+=r * r;            if (g < g_l) {              g_l=g;            }            if (g > g_h) {              g_h=g;            }            g_e+=g;            gSqrTotal+=g * g;            if (b < b_l) {              b_l=b;            }            if (b > b_h) {              b_h=b;            }            b_e+=b;            bSqrTotal+=b * b;          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          updateProgress("Performing Enhancement (2 of 2):",progress);          oldProgress=progress;          if (cancelOp) {            cancelOperation();            return;          }        }      }      r_e=r_e / numPixels;      g_e=g_e / numPixels;      b_e=b_e / numPixels;      double r_s=(double)rSqrTotal / numPixels;      double g_s=(double)gSqrTotal / numPixels;      double b_s=(double)bSqrTotal / numPixels;      double r_b=(r_h * r_h * (E - L) - r_s * (H - L) + r_l * r_l * (H - E)) / (2 * (r_h * (E - L) - r_e * (H - L) + r_l * (H - E)));      double r_a=(H - L) / ((r_h - r_l) * (r_h + r_l - 2 * r_b));      double r_c=L - r_a * ((r_l - r_b) * (r_l - r_b));      double g_b=(g_h * g_h * (E - L) - g_s * (H - L) + g_l * g_l * (H - E)) / (2 * (g_h * (E - L) - g_e * (H - L) + g_l * (H - E)));      double g_a=(H - L) / ((g_h - g_l) * (g_h + g_l - 2 * g_b));      double g_c=L - g_a * ((g_l - g_b) * (g_l - g_b));      double b_b=(b_h * b_h * (E - L) - b_s * (H - L) + b_l * b_l * (H - E)) / (2 * (b_h * (E - L) - b_e * (H - L) + b_l * (H - E)));      double b_a=(H - L) / ((b_h - b_l) * (b_h + b_l - 2 * b_b));      double b_c=L - b_a * ((b_l - b_b) * (b_l - b_b));      oldProgress=-1;      for (row=0; row < rows; row++) {        data=outputFile.getRowValues(row);        for (col=0; col < cols; col++) {          z=data[col];          if (z != noData) {            numPixels++;            r=((int)z & 0xFF);            g=(((int)z >> 8) & 0xFF);            b=(((int)z >> 16) & 0xFF);            a=(((int)z >> 24) & 0xFF);            rOut=(int)(r_a * ((r - r_b) * (r - r_b)) + r_c);            gOut=(int)(g_a * ((g - g_b) * (g - g_b)) + g_c);            bOut=(int)(b_a * ((b - b_b) * (b - b_b)) + b_c);            if (rOut > 255) {              rOut=255;            }            if (gOut > 255) {              gOut=255;            }            if (bOut > 255) {              bOut=255;            }            if (rOut < 0) {              rOut=0;            }            if (gOut < 0) {              gOut=0;            }            if (bOut < 0) {              bOut=0;            }            z=(double)((a << 24) | (bOut << 16) | (gOut << 8)| rOut);            outputFile.setValue(row,col,z);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          updateProgress("Performing Enhancement (2 of 2):",progress);          oldProgress=progress;          if (cancelOp) {            cancelOperation();            return;          }        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @SuppressWarnings("unchecked") @Override protected final Button createContentButton(String name,Supplier<MenuContent> contentSupplier){  Button btn=FXGL.getUIFactory().newButton(name);  btn.setUserData(contentSupplier);  btn.setOnAction(null);  return btn;}  }
class C{  public static String encodeDataFlavor(DataFlavor flav){  return (flav != null) ? SystemFlavorMap.encodeJavaMIMEType(flav.getMimeType()) : null;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static String readFirstLine(File file,Charset charset) throws IOException {  return asCharSource(file,charset).readFirstLine();}  }
class C{  @Override public synchronized IAccountInfo loginSilent() throws ClientException {  if (!mInitialized) {    throw new IllegalStateException("init must be called");  }  mLogger.logDebug("Starting login silent");  final AccountType accountType=getAccountTypeInPreferences();  if (accountType != null) {    mLogger.logDebug(String.format("Expecting %s type of account",accountType));  }  mLogger.logDebug("Checking MSA");  IAccountInfo accountInfo=mMSAAuthenticator.loginSilent();  if (accountInfo != null) {    mLogger.logDebug("Found account info in MSA");    setAccountTypeInPreferences(accountType);    mAccountInfo.set(accountInfo);    return accountInfo;  }  mLogger.logDebug("Checking ADAL");  accountInfo=mADALAuthenticator.loginSilent();  mAccountInfo.set(accountInfo);  if (accountInfo != null) {    mLogger.logDebug("Found account info in ADAL");    setAccountTypeInPreferences(accountType);  }  return mAccountInfo.get();}  }
class C{  @Override protected EClass eStaticClass(){  return SexecPackage.Literals.TRACE_NODE_EXECUTED;}  }
class C{  public void buildClassifier(Instances D) throws Exception {  int L=D.classIndex();  int featlength=(D.numAttributes() - L) * 2;  int numSamples=D.numInstances();  int classlength=L * 2;  if (this.order == null) {    order=new ArrayList<Integer>();    for (int j=0; j < D.numInstances(); j++) {      order.add(j);    }  }  if (numFeatures == -1) {    initARAM(featlength,classlength,roa,threshold);  } else {    if (featlength != numFeatures) {      return;    }    if (classlength != numClasses) {      return;    }  }  for (int i=0; i < D.numInstances(); i++) {    Instance instance=D.get(order.get(i));    updateClassifier(instance);  }  System.out.println("Training done, used " + numCategories + " neurons with rho ="+ roa+ ".");}  }
class C{  BluetoothGattServer(Context context,IBluetoothGatt iGatt){  mContext=context;  mService=iGatt;  mAdapter=BluetoothAdapter.getDefaultAdapter();  mCallback=null;  mServerIf=0;  mServices=new ArrayList<BluetoothGattService>();}  }
class C{  protected void removeExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  logger.info("Inicio de removeExecuteLogic");  ListaDescriptoraForm frm=(ListaDescriptoraForm)form;  String[] listaIds=frm.getIds();  if (StringUtils.isNotEmpty(listaIds) && !isListaDescriptoraEnUso(request,listaIds)) {    ResultadoRegistrosVO res=getGestionDescripcionBI(request).deleteListasDescriptoras(listaIds);    if (!res.getErrores().isEmpty()) {      ActionErrors errores=obtenerErrores(request,true);      errores.add(res.getErrores());    }  }  setReturnActionFordward(request,redirectForwardMethod(request,"method","show"));}  }
class C{  public void drawPolyline(int xPoints[],int yPoints[],int nPoints){  DebugGraphicsInfo info=info();  if (debugLog()) {    info().log(toShortString() + " Drawing polyline: " + " nPoints: "+ nPoints+ " X's: "+ xPoints+ " Y's: "+ yPoints);  }  if (isDrawingBuffer()) {    if (debugBuffered()) {      Graphics debugGraphics=debugGraphics();      debugGraphics.drawPolyline(xPoints,yPoints,nPoints);      debugGraphics.dispose();    }  } else   if (debugFlash()) {    Color oldColor=getColor();    int i, count=(info.flashCount * 2) - 1;    for (i=0; i < count; i++) {      graphics.setColor((i % 2) == 0 ? info.flashColor : oldColor);      graphics.drawPolyline(xPoints,yPoints,nPoints);      Toolkit.getDefaultToolkit().sync();      sleep(info.flashTime);    }    graphics.setColor(oldColor);  }  graphics.drawPolyline(xPoints,yPoints,nPoints);}  }
class C{  public BaseRequestBuilder(final String requestUrl,final IOneDriveClient client,final List<Option> options){  mRequestUrl=requestUrl;  mClient=client;  if (options != null) {    mOptions.addAll(options);  }}  }
class C{  public DeltaRequest(final String requestUrl,final IOneDriveClient client,final List<Option> options,final String token){  super(requestUrl,client,options,token);}  }
class C{  public static void log(ILog log,IStatus status){  log.log(status);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(1);  newVector.addElement(new Option("\tSets the range of attribute indices (default last).","R",1,"-R <col>"));  newVector.addElement(new Option("\tInvert the range specified by -R.","V",1,"-V <col>"));  return newVector.elements();}  }
class C{  public final int numClasses(){  return m_perClass.length;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  final public void clear(final boolean clearRefs){  if (clearRefs) {    while (size > 0) {      refs[tail]=null;      size--;      tail=(tail + 1) % capacity;    }  }  head=tail=size=0;}  }
class C{  public static Paint newGuidelinePaint(){  final Paint paint=new Paint();  paint.setColor(Color.parseColor(SEMI_TRANSPARENT));  paint.setStrokeWidth(DEFAULT_GUIDELINE_THICKNESS_PX);  return paint;}  }
class C{  public void deleteList(String listName){  this.getItemLists().remove(listName);}  }
class C{  public void removeProcessStateListener(ProcessStateListener processStateListener){  this.processStateListeners.remove(processStateListener);}  }
class C{  public GridBoundedConcurrentLinkedHashMap(int max,int initCap,float loadFactor,int concurLvl,QueuePolicy qPlc){  super(initCap,loadFactor,concurLvl,max,qPlc);}  }
class C{  public static void generateRPClass(){  final RPClass rpclass=new RPClass(Events.VIEW_CHANGE);  rpclass.addAttribute("x",Type.INT);  rpclass.addAttribute("y",Type.INT);}  }
class C{  private void monitorMetadata(){  if (isAlive && (metadataRefreshRetryLimit == -1 || retryCounter.get() < metadataRefreshRetryLimit)) {    logger.debug("{}: Update metadata for topic {}",Thread.currentThread().getName(),topic);    Map<String,List<PartitionMetadata>> pms=KafkaMetadataUtil.getPartitionsForTopic(brokers,topic);    if (pms == null) {      retryCounter.getAndAdd(1);      return;    }    for (    Entry<String,List<PartitionMetadata>> pmLEntry : pms.entrySet()) {      if (pmLEntry.getValue() == null)       continue;      for (      PartitionMetadata pm : pmLEntry.getValue()) {        KafkaPartition kp=new KafkaPartition(pmLEntry.getKey(),topic,pm.partitionId());        if (!kps.contains(kp)) {          continue;        }        Broker b=pm.leader();        if (b == null) {          logger.info("No Leader broker for Kafka Partition {}. Skipping it for time until new leader is elected",kp.getPartitionId());          continue;        }        Broker oldB=partitionToBroker.put(kp,b);        if (b.equals(oldB)) {          continue;        }        deltaPositive.put(b,kp);        stats.updatePartitionStats(kp,pm.leader().id(),pm.leader().host() + ":" + pm.leader().port());      }    }    for (Iterator<Entry<Broker,ConsumerThread>> iterator=simpleConsumerThreads.entrySet().iterator(); iterator.hasNext(); ) {      Entry<Broker,ConsumerThread> item=iterator.next();      if (item.getValue().getThreadItSelf().isDone()) {        iterator.remove();      }    }    for (    Broker b : deltaPositive.keySet()) {      if (!simpleConsumerThreads.containsKey(b)) {        ConsumerThread ct=new ConsumerThread(b,deltaPositive.get(b),ref);        ct.setThreadItSelf(kafkaConsumerExecutor.submit(ct));        simpleConsumerThreads.put(b,ct);      } else {        simpleConsumerThreads.get(b).addPartitions(deltaPositive.get(b));      }    }    deltaPositive.clear();    retryCounter.set(0);  }}  }
class C{  protected final int readFully(byte[] buffer,int offset,int size) throws IOException {  int n;  int oo=offset;  while (size > 0 && (n=in.read(buffer,offset,size)) != -1) {    offset+=n;    size-=n;  }  return offset - oo;}  }
class C{  public boolean isSavedState(){  return this == history.getSavedState();}  }
class C{  public MutableDirectoryPageData(final byte[] overflowKey,final long[] childAddr,final boolean hasVersionTimestamps,final long minimumVersionTimestamp,final long maximumVersionTimestamp){  assert childAddr != null;  this.overflowKey=overflowKey;  this.childAddr=childAddr;  this.hasVersionTimestamps=hasVersionTimestamps;  this.minimumVersionTimestamp=minimumVersionTimestamp;  this.maximumVersionTimestamp=maximumVersionTimestamp;}  }
class C{  public void rejectInvitation() throws RcsGenericException {  try {    mSharingInf.rejectInvitation();  } catch (  Exception e) {    throw new RcsGenericException(e);  }}  }
class C{  @Override public boolean queueAudioBuffer(AudioBuffer audioBuffer){  if (!_initialised) {    log.error("Source Not Initialized: " + this.getSystemName());    return false;  }  if (audioBuffer instanceof JoalAudioBuffer) {    int[] bids=new int[1];    bids[0]=((JoalAudioBuffer)audioBuffer).getDataStorageBuffer()[0];    if (log.isDebugEnabled()) {      log.debug("Queueing Buffer: " + audioBuffer.getSystemName() + " bid: "+ ((JoalAudioBuffer)audioBuffer).getDataStorageBuffer()[0]+ " Source: "+ this.getSystemName());    }    al.alSourceQueueBuffers(_source[0],1,bids,0);    if (JoalAudioFactory.checkALError()) {      log.warn("Error queueing JoalSource (" + this.getSystemName() + ") to AudioBuffers ("+ audioBuffer.getDisplayName()+ ")");      return false;    }    if (log.isDebugEnabled()) {      log.debug("Queue JoalAudioBuffer (" + audioBuffer.getSystemName() + ") to JoalAudioSource ("+ this.getSystemName()+ ")");    }    return true;  } else {    throw new IllegalArgumentException(audioBuffer.getSystemName() + " is not a JoalAudioBuffer");  }}  }
class C{  @Override public void paintComponent(Graphics g){  super.paintComponent(g);  paint((Graphics2D)g);}  }
class C{  public String globalInfo(){  return "Locally weighted learning. Uses an instance-based algorithm to " + "assign instance weights which are then used by a specified " + "WeightedInstancesHandler.\n"+ "Can do classification (e.g. using naive Bayes) or regression "+ "(e.g. using linear regression).\n\n"+ "For more info, see\n\n"+ getTechnicalInformation().toString();}  }
class C{  public boolean affectEntity(float radius,Entity entity,boolean doExplosion){  boolean explosionCreated=false;  if (entity == controller) {    return false;  }  if (entity instanceof IExplosiveIgnore) {    if (((IExplosiveIgnore)entity).canIgnore(this)) {      return false;    }  }  if (entity instanceof EntityPlayer) {    if (((EntityPlayer)entity).capabilities.isCreativeMode) {      return false;    }  }  double xDifference=entity.posX - position.xPos;  double yDifference=entity.posY - position.yPos;  double zDifference=entity.posZ - position.zPos;  double xPercentage=1 - (xDifference / radius);  double yPercentage=1 - (yDifference / radius);  double zPercentage=1 - (zDifference / radius);  double distancePercentage=(this.position.distance(new Pos3D(entity)) / radius);  Pos3D entityPosition=new Pos3D(entity);  Pos3D centeredPosition=entityPosition.clone().diff(this.position);  centeredPosition.rotate(1.5 * distancePercentage * Math.random(),1.5 * distancePercentage * Math.random(),1.5 * distancePercentage * Math.random());  Pos3D newPosition=this.position.clone().translate(centeredPosition);  entity.addVelocity(newPosition.xPos - entityPosition.xPos,0,newPosition.zPos - entityPosition.zPos);  entity.addVelocity(-xDifference * 0.015 * xPercentage,-yDifference * 0.015 * yPercentage,-zDifference * 0.015 * zPercentage);  if (worldObj.isRemote) {    if (entity instanceof EntityFlyingBlock) {      if (DefenseTech.proxy.getParticleSetting() == 0) {        if (this.worldObj.rand.nextInt(5) == 0) {          DefenseTech.proxy.spawnParticle("digging",this.worldObj,new Pos3D(entity),-xDifference,-yDifference + 10,-zDifference,Block.getIdFromBlock(((EntityFlyingBlock)entity).block),0,((EntityFlyingBlock)entity).metadata,2,1);        }      }    }  }  if (new Pos3D(entity.posX,entity.posY,entity.posZ).distance(position) < 4) {    if (doExplosion && !explosionCreated && callCount % 5 == 0) {      Pos3D tempMotion=new Pos3D(this.controller.motionX,this.controller.motionY,this.controller.motionZ);      this.worldObj.createExplosion(this.exploder,entity.posX,entity.posY,entity.posZ,3.0F,true);      this.controller.motionX=tempMotion.xPos;      this.controller.motionY=tempMotion.yPos;      this.controller.motionZ=tempMotion.zPos;      explosionCreated=true;    }    if (entity instanceof EntityLivingBase) {      entity.fallDistance=0;      entity.attackEntityFrom(DamageSource.setExplosionSource(this),4F);    } else {      if (entity instanceof EntityExplosion) {        if (((EntityExplosion)entity).blast instanceof BlastAntimatter || ((EntityExplosion)entity).blast instanceof BlastRedmatter) {          worldObj.playSoundEffect(position.xPos,position.yPos,position.zPos,Reference.PREFIX + "explosion",7.0F,(1.0F + (this.worldObj.rand.nextFloat() - this.worldObj.rand.nextFloat()) * 0.2F) * 0.7F);          if (worldObj.rand.nextFloat() > 0.85 && !worldObj.isRemote) {            entity.setDead();            return explosionCreated;          }        }      } else       if (entity instanceof EntityExplosive) {        ((EntityExplosive)entity).explode();      } else {        entity.setDead();      }    }  }  return explosionCreated;}  }
class C{  public final Collection<Component> components(){  return new HashSet<>(components.values());}  }
class C{  @Override public void requestUpdateFromLayout(){  if (shouldRequestUpdateFromLayout()) {    initThread=new Thread(new XNetConsistReader());    int it=initThread.getPriority();    it--;    initThread.setPriority(it);    initThread.start();  }}  }
class C{  public String toInt(String num){  return Integer.toString(FunctionHandler.getInt(num));}  }
class C{  public HostIdentifier(String uriString) throws URISyntaxException {  uri=canonicalize(uriString);}  }
class C{  public V put(K key,V value){  if (value == null)   throw new NullPointerException();  int h=hash(key.hashCode());  return segFor(h).put(key,h,value,false);}  }
class C{  public final Enumeration elements(int index){  return new FastVectorEnumeration(this,index);}  }
class C{  @Override public void buildClassifier(Instances trainInstances) throws Exception {  m_numSubsets=0;  m_splitPoint=Double.MAX_VALUE;  m_infoGain=0;  m_gainRatio=0;  if (trainInstances.attribute(m_attIndex).isNominal()) {    m_complexityIndex=trainInstances.attribute(m_attIndex).numValues();    m_index=m_complexityIndex;    handleEnumeratedAttribute(trainInstances);  } else {    m_complexityIndex=2;    m_index=0;    trainInstances.sort(trainInstances.attribute(m_attIndex));    handleNumericAttribute(trainInstances);  }}  }
class C{  public int compareTo(ByteBuffer byteBuffer1,ByteBuffer byteBuffer2){  if (byteBuffer1 == byteBuffer2) {    return 0;  }  int len1=byteBuffer1.remaining();  int len2=byteBuffer2.remaining();  byte[] buffer1=new byte[len1];  byte[] buffer2=new byte[len2];  byteBuffer1.get(buffer1);  byteBuffer2.get(buffer2);  return compareTo(buffer1,buffer2);}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public static Map<String,String> parseQuery(String uri) throws URISyntaxException {  try {    uri=uri.substring(uri.lastIndexOf("?") + 1);    Map<String,String> rc=new HashMap<>();    if (uri != null && !uri.isEmpty()) {      parseParameters(rc,uri.split("&"));      parseParameters(rc,uri.split(";"));    }    return rc;  } catch (  UnsupportedEncodingException e) {    throw (URISyntaxException)new URISyntaxException(e.toString(),"Invalid encoding").initCause(e);  }}  }
class C{  public Interval(String duration) throws NumberFormatException {  this.duration=parseDurationString(duration);}  }
class C{  public boolean isAssignableFrom(Class cl){  return _class.isAssignableFrom(cl);}  }
class C{  public final IntGrid2D upperBound(int toNoMoreThanThisMuch){  int[] fieldx=null;  final int width=this.width;  final int height=this.height;  for (int x=0; x < width; x++) {    fieldx=field[x];    for (int y=0; y < height; y++) {      assert sim.util.LocationLog.it(this,new Int2D(x,y));      if (fieldx[y] > toNoMoreThanThisMuch)       fieldx[y]=toNoMoreThanThisMuch;    }  }  return this;}  }
class C{  public static CachedFile addCachedFile(String parentname,String childname){  if (Helper.isNullOrEmpty(parentname) || Helper.isNullOrEmpty(childname)) {    if (logger.isTraceEnabled())     logger.trace("addCachedFile(parentname,childname) - unexpected null parameter");    return null;  }  return addCachedFile(new File(parentname,childname));}  }
class C{  @Around("execution(* org.yes.cart.web.support.service.impl.CustomerServiceFacadeImpl.registerNewsletter(..))") public Object doSignupNewsletter(final ProceedingJoinPoint pjp) throws Throwable {  return notifyInternal(pjp);}  }
class C{  public Terrain(int terrainSize,float scale,float minY,float maxY,String heightMapFile,String textureFile,int textInc) throws Exception {  this.terrainSize=terrainSize;  gameItems=new GameItem[terrainSize * terrainSize];  BufferedImage heightMapImage=ImageIO.read(getClass().getResourceAsStream(heightMapFile));  verticesPerCol=heightMapImage.getWidth() - 1;  verticesPerRow=heightMapImage.getHeight() - 1;  heightMapMesh=new HeightMapMesh(minY,maxY,heightMapImage,textureFile,textInc);  boundingBoxes=new Rectangle2D.Float[terrainSize][terrainSize];  for (int row=0; row < terrainSize; row++) {    for (int col=0; col < terrainSize; col++) {      float xDisplacement=(col - ((float)terrainSize - 1) / (float)2) * scale * HeightMapMesh.getXLength();      float zDisplacement=(row - ((float)terrainSize - 1) / (float)2) * scale * HeightMapMesh.getZLength();      GameItem terrainBlock=new GameItem(heightMapMesh.getMesh());      terrainBlock.setScale(scale);      terrainBlock.setPosition(xDisplacement,0,zDisplacement);      gameItems[row * terrainSize + col]=terrainBlock;      boundingBoxes[row][col]=getBoundingBox(terrainBlock);    }  }}  }
class C{  public void onAttach(Activity activity){  mActivity=activity;}  }
class C{  public Path[] expand(final QueryEngine queryEngine,int limitIn,final int round,final Path[] a,Map<PathIds,EdgeSample> edgeSamples) throws Exception {  if (queryEngine == null)   throw new IllegalArgumentException();  if (limitIn <= 0)   throw new IllegalArgumentException();  if (round <= 0)   throw new IllegalArgumentException();  if (a == null)   throw new IllegalArgumentException();  if (a.length == 0)   throw new IllegalArgumentException();  edgeSamples=Collections.synchronizedMap(edgeSamples);  if (log.isDebugEnabled())   log.debug("round=" + round + ", #paths(in)="+ a.length);  if (log.isDebugEnabled())   log.debug("Expanding paths: #paths(in)=" + a.length);  final List<Path> tmpAll=new LinkedList<Path>();  final List<Callable<List<Path>>> tasks=new LinkedList<Callable<List<Path>>>();  for (  Path x : a) {    tasks.add(new ExpandPathTask(queryEngine,x,edgeSamples));  }  final List<Future<List<Path>>> futures=queryEngine.getIndexManager().getExecutorService().invokeAll(tasks);  for (  Future<List<Path>> f : futures) {    tmpAll.addAll(f.get());  }  final Path[] paths_tp1=tmpAll.toArray(new Path[tmpAll.size()]);  final Path[] paths_tp1_pruned=pruneJoinPaths(paths_tp1,edgeSamples);  if (log.isDebugEnabled())   log.info("\n*** round=" + round + ": paths{in="+ a.length+ ",considered="+ paths_tp1.length+ ",out="+ paths_tp1_pruned.length+ "}\n"+ JGraph.showTable(paths_tp1,paths_tp1_pruned));  if (log.isInfoEnabled())   log.info("\n*** round=" + round + ": paths{in="+ a.length+ ",considered="+ paths_tp1.length+ ",out="+ paths_tp1_pruned.length+ "}\n"+ JGraph.showTable(paths_tp1_pruned));  return paths_tp1_pruned;}  }
class C{  public String toString(){  return ("X400Address: <DER-encoded value>");}  }
class C{  @Override public void run(){  amIActive=true;  WhiteboxRaster features;  WhiteboxRaster dataImage;  WhiteboxRaster output;  String featureHeader=null;  String dataHeader=null;  String outputHeader=null;  int row, col;  int progress=0;  int i;  double featuresNoData=-32768;  double dataNoData=-32768;  double distThreshold=0;  boolean blnSelect=true;  int featureID;  String instructions=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      if (args[i].toLowerCase().contains("isolate features from")) {        blnSelect=true;      } else       if (args[i].toLowerCase().contains("remove features from")) {        blnSelect=false;      }    } else     if (i == 1) {      featureHeader=args[i];    } else     if (i == 2) {      if (args[i].toLowerCase().contains("intersect")) {        instructions="intersect";      } else       if (args[i].toLowerCase().contains("are completely within")) {        instructions="within";      } else       if (args[i].toLowerCase().contains("are within a distance of")) {        instructions="distance";      } else       if (args[i].toLowerCase().contains("have their centroid in")) {        instructions="centroid";      }    } else     if (i == 3) {      dataHeader=args[i];    } else     if (i == 4) {      outputHeader=args[i];    } else     if (i == 5) {      if (!args[i].equals("not specified")) {        distThreshold=Double.parseDouble(args[i]);      }    }  }  if ((featureHeader == null) || (dataHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    features=new WhiteboxRaster(featureHeader,"r");    int rows=features.getNumberRows();    int cols=features.getNumberColumns();    featuresNoData=features.getNoDataValue();    int minFeatureID=(int)features.getMinimumValue();    int numFeatures=(int)(features.getMaximumValue() - minFeatureID);    dataImage=new WhiteboxRaster(dataHeader,"r");    if (dataImage.getNumberColumns() != cols || dataImage.getNumberRows() != rows) {      showFeedback("The input files must have the same dimensions, i.e. number of" + " rows and columns.");      return;    }    dataNoData=dataImage.getNoDataValue();    output=new WhiteboxRaster(outputHeader,"rw",featureHeader,WhiteboxRaster.DataType.FLOAT,featuresNoData);    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    output.setPreferredPalette("qual.pal");    if (instructions.equals("intersect")) {      boolean[] intersect=new boolean[numFeatures + 1];      double[] featuresData=null;      double[] data=null;      updateProgress("Loop 1 of 2:",0);      for (row=0; row < rows; row++) {        featuresData=features.getRowValues(row);        data=dataImage.getRowValues(row);        for (col=0; col < cols; col++) {          if (featuresData[col] != featuresNoData) {            featureID=(int)featuresData[col];            if (featureID != 0 && data[col] > 0 && data[col] != dataNoData) {              intersect[featureID - minFeatureID]=true;            }          } else {            output.setValue(row,col,featuresNoData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress("Loop 1 of 2:",progress);      }      updateProgress("Loop 2 of 2:",0);      for (row=0; row < rows; row++) {        featuresData=features.getRowValues(row);        data=dataImage.getRowValues(row);        for (col=0; col < cols; col++) {          if (featuresData[col] != featuresNoData) {            featureID=(int)featuresData[col];            if (intersect[featureID - minFeatureID] == blnSelect) {              output.setValue(row,col,featureID);            } else {              output.setValue(row,col,0);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress("Loop 2 of 2:",progress);      }    } else     if (instructions.equals("within")) {      boolean[] within=new boolean[numFeatures + 1];      double[] dataFeature=new double[numFeatures + 1];      for (i=0; i <= numFeatures; i++) {        within[i]=true;        dataFeature[i]=-9999999;      }      double[] featuresData=null;      double[] data=null;      updateProgress("Loop 1 of 2:",0);      for (row=0; row < rows; row++) {        featuresData=features.getRowValues(row);        data=dataImage.getRowValues(row);        for (col=0; col < cols; col++) {          if (featuresData[col] != featuresNoData) {            featureID=(int)featuresData[col];            if (featureID != 0) {              if (data[col] != 0 && data[col] != dataNoData && dataFeature[featureID - minFeatureID] != -9999999) {                if (within[featureID - minFeatureID] && data[col] != dataFeature[featureID - minFeatureID]) {                  within[featureID - minFeatureID]=false;                }              } else               if (data[col] == 0) {                within[featureID - minFeatureID]=false;              } else {                dataFeature[featureID - minFeatureID]=data[col];              }            }          } else {            output.setValue(row,col,featuresNoData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress("Loop 1 of 2:",progress);      }      updateProgress("Loop 2 of 2:",0);      for (row=0; row < rows; row++) {        featuresData=features.getRowValues(row);        data=dataImage.getRowValues(row);        for (col=0; col < cols; col++) {          if (featuresData[col] != featuresNoData) {            featureID=(int)featuresData[col];            if (within[featureID - minFeatureID] == blnSelect) {              output.setValue(row,col,featureID);            } else {              output.setValue(row,col,0);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress("Loop 2 of 2:",progress);      }    } else     if (instructions.equals("distance")) {      if (distThreshold <= 0) {        showFeedback("The distance threshold has not been set to an appropriate value.");        return;      }      double z, z2, zMin;      double h=0;      int whichCell;      int x, y;      double infVal=9999999;      int[] dX=new int[]{-1,-1,0,1,1,1,0,-1};      int[] dY=new int[]{0,-1,-1,-1,0,1,1,1};      int[] Gx=new int[]{1,1,0,1,1,1,0,1};      int[] Gy=new int[]{0,1,1,1,0,1,1,1};      double gridRes=(features.getCellSizeX() + features.getCellSizeY()) / 2;      WhiteboxRaster Rx=new WhiteboxRaster(outputHeader.replace(".dep","_temp1.dep"),"rw",featureHeader,WhiteboxRaster.DataType.FLOAT,0);      Rx.isTemporaryFile=true;      WhiteboxRaster Ry=new WhiteboxRaster(outputHeader.replace(".dep","_temp2.dep"),"rw",featureHeader,WhiteboxRaster.DataType.FLOAT,0);      Ry.isTemporaryFile=true;      WhiteboxRaster bufferedData=new WhiteboxRaster(outputHeader.replace(".dep","_temp3.dep"),"rw",featureHeader,WhiteboxRaster.DataType.FLOAT,infVal);      bufferedData.isTemporaryFile=true;      double[] data;      updateProgress("Buffering features:",0);      for (row=0; row < rows; row++) {        data=dataImage.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != 0) {            bufferedData.setValue(row,col,0);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress("Buffering features:",progress);      }      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          z=bufferedData.getValue(row,col);          if (z != 0) {            zMin=infVal;            whichCell=-1;            for (i=0; i <= 3; i++) {              x=col + dX[i];              y=row + dY[i];              z2=bufferedData.getValue(y,x);              if (z2 != dataNoData) {switch (i) {case 0:                  h=2 * Rx.getValue(y,x) + 1;                break;case 1:              h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);            break;case 2:          h=2 * Ry.getValue(y,x) + 1;        break;case 3:      h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);    break;}z2+=h;if (z2 < zMin) {  zMin=z2;  whichCell=i;}}}if (zMin < z) {bufferedData.setValue(row,col,zMin);x=col + dX[whichCell];y=row + dY[whichCell];Rx.setValue(row,col,Rx.getValue(y,x) + Gx[whichCell]);Ry.setValue(row,col,Ry.getValue(y,x) + Gy[whichCell]);}}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * row / (rows - 1));updateProgress("Buffering features:",progress);}for (row=rows - 1; row >= 0; row--) {for (col=cols - 1; col >= 0; col--) {z=bufferedData.getValue(row,col);if (z != 0) {zMin=infVal;whichCell=-1;for (i=4; i <= 7; i++) {x=col + dX[i];y=row + dY[i];z2=bufferedData.getValue(y,x);if (z2 != dataNoData) {switch (i) {case 5:  h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);break;case 4:h=2 * Rx.getValue(y,x) + 1;break;case 6:h=2 * Ry.getValue(y,x) + 1;break;case 7:h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);break;}z2+=h;if (z2 < zMin) {zMin=z2;whichCell=i;}}}if (zMin < z) {bufferedData.setValue(row,col,zMin);x=col + dX[whichCell];y=row + dY[whichCell];Rx.setValue(row,col,Rx.getValue(y,x) + Gx[whichCell]);Ry.setValue(row,col,Ry.getValue(y,x) + Gy[whichCell]);}}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * (rows - 1 - row) / (rows - 1));updateProgress("Buffering features:",progress);}for (row=0; row < rows; row++) {for (col=0; col < cols; col++) {z=bufferedData.getValue(row,col);if (Math.sqrt(z) * gridRes < distThreshold) {bufferedData.setValue(row,col,1);} else {bufferedData.setValue(row,col,0);}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * row / (rows - 1));updateProgress("Buffering features:",progress);}Rx.close();Ry.close();bufferedData.flush();boolean[] intersect=new boolean[numFeatures + 1];double[] featuresData=null;updateProgress("Loop 1 of 2:",0);for (row=0; row < rows; row++) {featuresData=features.getRowValues(row);data=bufferedData.getRowValues(row);for (col=0; col < cols; col++) {if (featuresData[col] != featuresNoData) {featureID=(int)featuresData[col];if (featureID != 0 && data[col] > 0 && data[col] != dataNoData) {intersect[featureID - minFeatureID]=true;}} else {output.setValue(row,col,featuresNoData);}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * row / (rows - 1));updateProgress("Loop 1 of 2:",progress);}updateProgress("Loop 2 of 2:",0);for (row=0; row < rows; row++) {featuresData=features.getRowValues(row);data=bufferedData.getRowValues(row);for (col=0; col < cols; col++) {if (featuresData[col] != featuresNoData) {featureID=(int)featuresData[col];if (intersect[featureID - minFeatureID] == blnSelect) {output.setValue(row,col,featureID);} else {output.setValue(row,col,0);}}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * row / (rows - 1));updateProgress("Loop 2 of 2:",progress);}bufferedData.close();} else if (instructions.equals("centroid")) {long[] totalColumns=new long[numFeatures + 1];long[] totalRows=new long[numFeatures + 1];long[] totalN=new long[numFeatures + 1];updateProgress("Loop 1 of 2:",0);double[] featuresData=null;for (row=0; row < rows; row++) {featuresData=features.getRowValues(row);for (col=0; col < cols; col++) {if (featuresData[col] > 0) {i=(int)featuresData[col] - minFeatureID;totalColumns[i]+=col;totalRows[i]+=row;totalN[i]++;}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * row / (rows - 1));updateProgress("Loop 1 of 2:",progress);}double z;boolean[] intersect=new boolean[numFeatures + 1];double[] data=null;for (i=0; i <= numFeatures; i++) {if (totalN[i] > 0) {col=(int)(totalColumns[i] / totalN[i]);row=(int)(totalRows[i] / totalN[i]);z=dataImage.getValue(row,col);if (z != 0 && z != dataNoData) {intersect[i]=true;}}}updateProgress("Loop 2 of 2:",0);for (row=0; row < rows; row++) {featuresData=features.getRowValues(row);data=dataImage.getRowValues(row);for (col=0; col < cols; col++) {if (featuresData[col] != featuresNoData) {featureID=(int)featuresData[col];if (intersect[featureID - minFeatureID] == blnSelect) {output.setValue(row,col,featureID);} else {output.setValue(row,col,0);}}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * row / (rows - 1));updateProgress("Loop 2 of 2:",progress);}} else {showFeedback("Instructions not recognized.");return;}output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());features.close();dataImage.close();output.close();returnData(outputHeader);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  final void onError(Throwable ex){  for (int c; ; ) {    if (((c=ctl) & (ERROR | DISABLED)) != 0)     break; else     if ((c & ACTIVE) != 0) {      pendingError=ex;      if (U.compareAndSwapInt(this,CTL,c,c | ERROR))       break;    } else     if (U.compareAndSwapInt(this,CTL,c,DISABLED)) {      Flow.Subscriber<? super T> s=subscriber;      if (s != null && ex != null) {        try {          s.onError(ex);        } catch (        Throwable ignore) {        }      }      detach();      break;    }  }}  }
class C{  public static byte[] toByteArray(InputStream input,int size) throws IOException {  if (size < 0) {    throw new IllegalArgumentException("Size must be equal or greater than zero: " + size);  }  if (size == 0) {    return new byte[0];  }  byte[] data=new byte[size];  int offset=0;  int readed;  while (offset < size && (readed=input.read(data,offset,size - offset)) != EOF) {    offset+=readed;  }  if (offset != size) {    throw new IOException("Unexpected readed size. current: " + offset + ", excepted: "+ size);  }  return data;}  }
class C{  private Marketplace validatePermissionForSuspendAndResume(PlatformUser currentUser,Product prod) throws OperationNotPermittedException {  if (prod.getOwningSubscription() != null) {    String message="Service '%s' is related to a subscription.";    OperationNotPermittedException e=new OperationNotPermittedException(String.format(message,Long.valueOf(prod.getKey())));    logger.logWarn(Log4jLogger.SYSTEM_LOG,e,LogMessageIdentifier.WARN_VALIDATE_PERMISSION_FOR_SUSPEND_AND_RESUME,message);    throw e;  }  Product tempOrSelf;  if (prod.getType() == ServiceType.PARTNER_TEMPLATE) {    tempOrSelf=prod;  } else {    tempOrSelf=prod.getTemplateOrSelf();  }  List<CatalogEntry> ces=tempOrSelf.getCatalogEntries();  if (ces == null || ces.isEmpty() || ces.get(0).getMarketplace() == null) {    String message="Service '%s' is not published to a marketplace.";    OperationNotPermittedException e=new OperationNotPermittedException(String.format(message,Long.valueOf(prod.getKey())));    logger.logWarn(Log4jLogger.SYSTEM_LOG,e,LogMessageIdentifier.WARN_VALIDATE_PERMISSION_FOR_SUSPEND_AND_RESUME,message);    throw e;  }  Marketplace mp=ces.get(0).getMarketplace();  PermissionCheck.owns(mp,currentUser.getOrganization(),logger,sessionCtx);  return mp;}  }
class C{  public boolean visitInstruction(ElemTemplateElement elem){  int type=elem.getXSLToken();switch (type) {case Constants.ELEMNAME_CALLTEMPLATE:case Constants.ELEMNAME_TEMPLATE:case Constants.ELEMNAME_FOREACH:{      if (type == Constants.ELEMNAME_FOREACH) {        ElemForEach efe=(ElemForEach)elem;        Expression select=efe.getSelect();        select.callVisitors(efe,this);      }      Vector savedPaths=m_paths;      m_paths=new Vector();      elem.callChildVisitors(this,false);      eleminateRedundentLocals(elem);      m_paths=savedPaths;      return false;    }case Constants.ELEMNAME_NUMBER:case Constants.ELEMNAME_SORT:  boolean savedIsSame=m_isSameContext;m_isSameContext=false;elem.callChildVisitors(this);m_isSameContext=savedIsSame;return false;default :return true;}}  }
class C{  public void deleteButtonActionPerformed(){  int nodeAddress=readNodeAddress();  if (nodeAddress < 0) {    return;  }  curNode=(SerialNode)SerialTrafficController.instance().getNodeFromAddress(nodeAddress);  if (curNode == null) {    statusText1.setText(rb.getString("Error4"));    statusText1.setVisible(true);    errorInStatus1=true;    resetNotes2();    return;  }  if (javax.swing.JOptionPane.OK_OPTION == javax.swing.JOptionPane.showConfirmDialog(this,rb.getString("ConfirmDelete1") + "\n" + rb.getString("ConfirmDelete2"),rb.getString("ConfirmDeleteTitle"),javax.swing.JOptionPane.OK_CANCEL_OPTION,javax.swing.JOptionPane.WARNING_MESSAGE)) {    SerialTrafficController.instance().deleteNode(nodeAddress);    resetNotes();    statusText1.setText(rb.getString("FeedBackDelete") + " " + Integer.toString(nodeAddress));    errorInStatus1=true;    changedNode=true;  } else {    resetNotes();  }}  }
class C{  protected boolean checkColumnNames(ResultSet rs,String[] names) throws SQLException {  ResultSetMetaData rsmd=rs.getMetaData();  if (rsmd.getColumnCount() < names.length) {    System.out.println("Cols=" + rsmd.getColumnCount());    return false;  }  for (int i=1; i <= names.length; i++) {    if (names[i - 1].length() > 0 && !rsmd.getColumnLabel(i).equals(names[i - 1])) {      System.out.println(names[i - 1] + " = " + rsmd.getColumnLabel(i));      return false;    }  }  return true;}  }
class C{  ColorSpaceHintKey(int number){  super(number);}  }
class C{  public void testCalculateGlobalLimit(){  long fileSystemSize=78643200;  long freeSpaceSize=25165824;  long maxSize=WebStorageSizeManager.calculateGlobalLimit(fileSystemSize,freeSpaceSize);  assertEquals(12582912,maxSize);  fileSystemSize=78643200;  freeSpaceSize=60 * 1024 * 1024;  maxSize=WebStorageSizeManager.calculateGlobalLimit(fileSystemSize,freeSpaceSize);  assertEquals(19922944,maxSize);  fileSystemSize=8589934592L;  freeSpaceSize=4294967296L;  maxSize=WebStorageSizeManager.calculateGlobalLimit(fileSystemSize,freeSpaceSize);  assertEquals(536870912L,maxSize);  fileSystemSize=-14;  freeSpaceSize=21;  maxSize=WebStorageSizeManager.calculateGlobalLimit(fileSystemSize,freeSpaceSize);  assertEquals(0,maxSize);  fileSystemSize=100;  freeSpaceSize=101;  maxSize=WebStorageSizeManager.calculateGlobalLimit(fileSystemSize,freeSpaceSize);  assertEquals(0,maxSize);  fileSystemSize=3774873;  freeSpaceSize=2560000;  maxSize=WebStorageSizeManager.calculateGlobalLimit(fileSystemSize,freeSpaceSize);  assertEquals(2097152,maxSize);  fileSystemSize=4404019;  freeSpaceSize=3774873;  maxSize=WebStorageSizeManager.calculateGlobalLimit(fileSystemSize,freeSpaceSize);  assertEquals(2097152,maxSize);  fileSystemSize=4404019;  freeSpaceSize=4404019;  maxSize=WebStorageSizeManager.calculateGlobalLimit(fileSystemSize,freeSpaceSize);  assertEquals(3145728,maxSize);  fileSystemSize=1048576;  freeSpaceSize=1048575;  maxSize=WebStorageSizeManager.calculateGlobalLimit(fileSystemSize,freeSpaceSize);  assertEquals(0,maxSize);  fileSystemSize=3774873;  freeSpaceSize=2097151;  maxSize=WebStorageSizeManager.calculateGlobalLimit(fileSystemSize,freeSpaceSize);  assertEquals(0,maxSize);  fileSystemSize=3774873;  freeSpaceSize=2097151;  maxSize=WebStorageSizeManager.calculateGlobalLimit(fileSystemSize,freeSpaceSize);  assertEquals(0,maxSize);}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();}  }
class C{  public void cleanup(){  lock.lock();  try {    boolean dirty=false;    for (Iterator<Transaction> i=pending.values().iterator(); i.hasNext(); ) {      Transaction tx=i.next();      if (isTransactionRisky(tx,null) && !acceptRiskyTransactions) {        log.debug("Found risky transaction {} in wallet during cleanup.",tx.getHashAsString());        if (!tx.isAnyOutputSpent()) {          for (          TransactionInput input : tx.getInputs()) {            TransactionOutput output=input.getConnectedOutput();            if (output == null)             continue;            if (output.isMineOrWatched(this))             checkState(myUnspents.add(output));            input.disconnect();          }          for (          TransactionOutput output : tx.getOutputs())           myUnspents.remove(output);          i.remove();          transactions.remove(tx.getHash());          dirty=true;          log.info("Removed transaction {} from pending pool during cleanup.",tx.getHashAsString());        } else {          log.info("Cannot remove transaction {} from pending pool during cleanup, as it's already spent partially.",tx.getHashAsString());        }      }    }    if (dirty) {      isConsistentOrThrow();      saveLater();      if (log.isInfoEnabled())       log.info("Estimated balance is now: {}",getBalance(BalanceType.ESTIMATED).toFriendlyString());    }  }  finally {    lock.unlock();  }}  }
class C{  @SuppressWarnings("unchecked") public static Matrix read(BufferedReader input) throws java.io.IOException {  StreamTokenizer tokenizer=new StreamTokenizer(input);  tokenizer.resetSyntax();  tokenizer.wordChars(0,255);  tokenizer.whitespaceChars(0,' ');  tokenizer.eolIsSignificant(true);  java.util.Vector v=new java.util.Vector();  while (tokenizer.nextToken() == StreamTokenizer.TT_EOL)   ;  if (tokenizer.ttype == StreamTokenizer.TT_EOF)   throw new java.io.IOException("Unexpected EOF on matrix read.");  do {    v.addElement(Double.valueOf(tokenizer.sval));  } while (tokenizer.nextToken() == StreamTokenizer.TT_WORD);  int n=v.size();  double row[]=new double[n];  for (int j=0; j < n; j++)   row[j]=((Double)v.elementAt(j)).doubleValue();  v.removeAllElements();  v.addElement(row);  while (tokenizer.nextToken() == StreamTokenizer.TT_WORD) {    v.addElement(row=new double[n]);    int j=0;    do {      if (j >= n)       throw new java.io.IOException("Row " + v.size() + " is too long.");      row[j++]=Double.valueOf(tokenizer.sval).doubleValue();    } while (tokenizer.nextToken() == StreamTokenizer.TT_WORD);    if (j < n)     throw new java.io.IOException("Row " + v.size() + " is too short.");  }  int m=v.size();  double[][] A=new double[m][];  v.copyInto(A);  return new Matrix(A);}  }
class C{  public static boolean isAbstractObject(int format){switch (format) {case FORMAT_ABSTRACT_MULTIMEDIA_ALBUM:case FORMAT_ABSTRACT_IMAGE_ALBUM:case FORMAT_ABSTRACT_AUDIO_ALBUM:case FORMAT_ABSTRACT_VIDEO_ALBUM:case FORMAT_ABSTRACT_AV_PLAYLIST:case FORMAT_ABSTRACT_AUDIO_PLAYLIST:case FORMAT_ABSTRACT_VIDEO_PLAYLIST:case FORMAT_ABSTRACT_MEDIACAST:case FORMAT_ABSTRACT_DOCUMENT:    return true;default :  return false;}}  }
class C{  public final TestSubscriber assertError(Throwable error){  String prefix="";  boolean passed=true;  if (done.getCount() != 0) {    prefix="Subscriber still running! ";  }  int s=errors.size();  if (s == 0) {    fail(prefix,"No errors",Collections.<Throwable>emptyList());    passed=false;  }  pass("error received",passed);  return this;}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case TypesPackage.TSTRUCT_GETTER___GET_DEFAULT_MEMBER_ACCESS_MODIFIER:    return getDefaultMemberAccessModifier();case TypesPackage.TSTRUCT_GETTER___IS_STATIC:  return isStatic();case TypesPackage.TSTRUCT_GETTER___GET_MEMBER_ACCESS_MODIFIER:return getMemberAccessModifier();}return super.eInvoke(operationID,arguments);}  }
class C{  public final void testGetQ(){  DSAPublicKeySpec dpks=new DSAPublicKeySpec(new BigInteger("1"),new BigInteger("2"),new BigInteger("3"),new BigInteger("4"));  assertEquals(3,dpks.getQ().intValue());}  }
class C{  public static <T>CopyOnWriteArraySet<T> copyOnWriteArraySet(){  return new CopyOnWriteArraySet<T>();}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  public SearchRequestBuilder addFields(String... fields){  sourceBuilder().fields(fields);  return this;}  }
class C{  void resetChannel(){  reset(channel);  expect(channel.getPipeline()).andReturn(pipeline).anyTimes();  expect(channel.getRemoteAddress()).andReturn(null).anyTimes();}  }
class C{  public CannotParseException(String reason){  super(reason);}  }
class C{  public static HttpResponse httpGet(String httpUrl){  return httpGet(new HttpRequest(httpUrl));}  }
class C{  private ResultPoint correctTopRightRectangular(ResultPoint bottomLeft,ResultPoint bottomRight,ResultPoint topLeft,ResultPoint topRight,int dimensionTop,int dimensionRight){  float corr=distance(bottomLeft,bottomRight) / (float)dimensionTop;  int norm=distance(topLeft,topRight);  float cos=(topRight.getX() - topLeft.getX()) / norm;  float sin=(topRight.getY() - topLeft.getY()) / norm;  ResultPoint c1=new ResultPoint(topRight.getX() + corr * cos,topRight.getY() + corr * sin);  corr=distance(bottomLeft,topLeft) / (float)dimensionRight;  norm=distance(bottomRight,topRight);  cos=(topRight.getX() - bottomRight.getX()) / norm;  sin=(topRight.getY() - bottomRight.getY()) / norm;  ResultPoint c2=new ResultPoint(topRight.getX() + corr * cos,topRight.getY() + corr * sin);  if (!isValid(c1)) {    if (isValid(c2)) {      return c2;    }    return null;  }  if (!isValid(c2)) {    return c1;  }  int l1=Math.abs(dimensionTop - transitionsBetween(topLeft,c1).getTransitions()) + Math.abs(dimensionRight - transitionsBetween(bottomRight,c1).getTransitions());  int l2=Math.abs(dimensionTop - transitionsBetween(topLeft,c2).getTransitions()) + Math.abs(dimensionRight - transitionsBetween(bottomRight,c2).getTransitions());  if (l1 <= l2) {    return c1;  }  return c2;}  }
class C{  @Override public void parse(XmlPullParser parser) throws XmlPullParserException, IOException {  if (!parser.getName().equals(TAG)) {    throw new XmlPullParserException(String.format("invalid XML: Expected %s tag but received %s",TAG,parser.getName()));  }  int eventType=parser.getEventType();  while (eventType != XmlPullParser.END_DOCUMENT) {    if (eventType == XmlPullParser.START_TAG) {      if (parser.getName().equals(SCREEN_TAG) || parser.getName().equals(PHONE_TAG) || parser.getName().equals(BUILD_TAG)) {        addMetricsFromAttributes(parser);      } else       if (parser.getName().equals(FEATURE_INFO_TAG)) {        mMetrics.put(DeviceInfoConstants.FEATURES,parseFeatures(parser));      } else       if (parser.getName().equals(PROCESS_INFO_TAG)) {        mMetrics.put(DeviceInfoConstants.PROCESSES,parseProcess(parser));      } else       if (parser.getName().equals(SYSLIB_INFO_TAG)) {        mMetrics.put(DeviceInfoConstants.SYS_LIBRARIES,parseSystemLibraries(parser));      } else       if (parser.getName().equals(OPENGL_TEXTURE_FORMATS_INFO_TAG)) {        mMetrics.put(DeviceInfoConstants.OPEN_GL_COMPRESSED_TEXTURE_FORMATS,parseOpenGLCompressedTextureFormats(parser));      }    } else     if (eventType == XmlPullParser.END_TAG && parser.getName().equals(TAG)) {      return;    }    eventType=parser.next();  }}  }
class C{  public void removeFromTags(String removeTag){  tags.remove(removeTag);  firePropertyChange(TAG,null,removeTag);  firePropertyChange(TAGS_AS_STRING,null,removeTag);}  }
class C{  protected void appendDetail(final StringBuffer buffer,final String fieldName,final byte value){  buffer.append(value);}  }
class C{  @SuppressWarnings("unchecked") public synchronized Reference<? extends T> poll(){  if (head == null) {    return null;  }  Reference<? extends T> ret;  ret=head;  if (head == head.queueNext) {    head=null;  } else {    head=head.queueNext;  }  ret.queueNext=null;  return ret;}  }
class C{  private void reducingTradeQuantity(List<Trade> trades){  Optional<Integer> totalQuantity=trades.stream().map(null).reduce(null);  System.out.println("Total quantity: " + totalQuantity.get());}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case MappingPackage.STEREO_TYPE_TARGET__ATTRIBUTES:    return ((InternalEList<?>)getAttributes()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  private int readAMF3Integer(){  int n=0;  int b=buf.get();  int result=0;  while ((b & 0x80) != 0 && n < 3) {    result<<=7;    result|=(b & 0x7f);    b=buf.get();    n++;  }  if (n < 3) {    result<<=7;    result|=b;  } else {    result<<=8;    result|=b & 0x0ff;    if ((result & 0x10000000) != 0) {      result|=0xe0000000;    }  }  return result;}  }
class C{  public double distance(final MutableInt3D p){  final double dx=(double)this.x - p.x;  final double dy=(double)this.y - p.y;  final double dz=(double)this.z - p.z;  return Math.sqrt(dx * dx + dy * dy + dz * dz);}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  Node<E> h=null, t=null;  Object item;  while ((item=s.readObject()) != null) {    @SuppressWarnings("unchecked") Node<E> newNode=new Node<E>((E)item);    if (h == null)     h=t=newNode; else {      t.lazySetNext(newNode);      t=newNode;    }  }  if (h == null)   h=t=new Node<E>(null);  head=h;  tail=t;}  }
class C{  public MethExecutorResult executeMethodOnClass(String className,String methodName,Object[] args){  String name=className + "." + methodName+ (args != null ? " with " + args.length + " args" : "");  long start=start(name);  MethExecutorResult result=MethExecutor.execute(className,methodName,args);  logDelta(name,start,result);  return result;}  }
class C{  public Curve makeCurve(int color){  Curve c=new Curve(color);  curves.add(c);  return c;}  }
class C{  public Implementation(){  super();  plugin=this;}  }
class C{  @Override public void poll(){  if (!removed) {    final String basePollJson=controllerResource.get(getTenant(),getId());    try {      final String href=JsonPath.parse(basePollJson).read("_links.deploymentBase.href");      final long actionId=Long.parseLong(href.substring(href.lastIndexOf('/') + 1,href.indexOf('?')));      if (currentActionId == null) {        final String deploymentJson=controllerResource.getDeployment(getTenant(),getId(),actionId);        final String swVersion=JsonPath.parse(deploymentJson).read("deployment.chunks[0].version");        currentActionId=actionId;        startDdiUpdate(actionId,swVersion);      }    } catch (    final PathNotFoundException e) {      LOGGER.trace("Response does not contain a deploymentbase href link, ignoring.",e);    }  }}  }
class C{  private String buildRow(long n){  ArrayList<Long> times=timings.get(n);  long sum, min, max;  if (times == null || times.size() == 0) {    return n + ",*,*,*,*,0";  }  sum=0;  min=max=sum=times.get(0);  if (times.size() == 1) {    return n + "," + min+ ","+ min+ ","+ max+ ","+ 0.0+ ","+ 1;  }  int minIdx=0;  int maxIdx=0;  for (int i=1; i < times.size(); i++) {    long t=times.get(i);    if (t < min) {      min=t;      minIdx=i;    }    if (t > max) {      max=t;      maxIdx=i;    }    sum+=t;  }  if (times.size() == 2) {    double diff=Math.abs(max - min);    diff=diff / 2;    double avg=max + min;    avg=avg / 2;    return n + "," + avg+ ","+ min+ ","+ max+ ","+ diff+ ","+ 2;  }  sum=sum - min - max;  int ct=times.size() - 2;  double mean=sum;  mean=mean / ct;  double calc=0;  for (int i=0; i < times.size(); i++) {    if (i == minIdx || i == maxIdx)     continue;    calc+=(times.get(i) - mean) * (times.get(i) - mean);  }  if (ct == 1) {    calc=0;  } else {    calc/=(ct - 1);    calc=Math.sqrt(calc);  }  return n + "," + mean+ ","+ min+ ","+ max+ ","+ calc+ ","+ ct;}  }
class C{  public boolean isLayersEnabled(){  return (layerManager.layersEnabled);}  }
class C{  private <T>void runTestWrite(XmlWriter<T> writer,List<T> bundle,List<String> expected) throws Exception {  File tmpFile=tmpFolder.newFile("foo.txt");  try (FileOutputStream fileOutputStream=new FileOutputStream(tmpFile)){    writeBundle(writer,bundle,fileOutputStream.getChannel());  }   List<String> lines=new ArrayList<>();  try (BufferedReader reader=new BufferedReader(new FileReader(tmpFile))){    for (; ; ) {      String line=reader.readLine();      if (line == null) {        break;      }      line=line.trim();      if (line.length() > 0) {        lines.add(line);      }    }    assertEquals(expected,lines);  } }  }
class C{  private void createBldgByCoords(){  bldgByCoords=new Hashtable<Coords,Building>();  Enumeration<Building> loop=buildings.elements();  while (loop.hasMoreElements()) {    final Building bldg=loop.nextElement();    Enumeration<Coords> iter=bldg.getCoords();    while (iter.hasMoreElements()) {      bldgByCoords.put(iter.nextElement(),bldg);    }  }}  }
class C{  public void addRecurrenceDates(RecurrenceDates recurrenceDates){  addProperty(recurrenceDates);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public ModelClassFinder(Log log,String modelJavaPackage,String modelErrorClassName) throws MojoExecutionException {  this.log=log;  this.modelJavaPackage=modelJavaPackage;  this.modelErrorClassName=modelErrorClassName;  findModelClasses();}  }
class C{  public CDeleteTagAction(final JFrame parent,final ITagManager tagManager,final ITreeNode<CTag> tag){  super("Delete Tag");  m_parent=Preconditions.checkNotNull(parent,"IE01217: Parent argument can not be null");  m_tagManager=Preconditions.checkNotNull(tagManager,"IE01218: Tag manager argument can not be null");  m_tag=Preconditions.checkNotNull(tag,"IE01782: Tag can't be null.");}  }
class C{  public void truncate(long newExtent){  throw new UnsupportedOperationException("Mapped file may not be extended or truncated.");}  }
class C{  public JavaModelStatus(){  super(ERROR,JavaCore.PLUGIN_ID,0,"JavaModelStatus",null);}  }
class C{  public void put(String key,File file,String contentType,String customFileName) throws FileNotFoundException {  if (file == null || !file.exists()) {    throw new FileNotFoundException();  }  if (key != null) {    fileParams.put(key,new FileWrapper(file,contentType,customFileName));  }}  }
class C{  public IndonesianStemFilter(TokenStream input,boolean stemDerivational){  super(input);  this.stemDerivational=stemDerivational;}  }
class C{  public void clearDropItemList(){  dropsItems=new ArrayList<DropItem>();  dropItemInstances.clear();}  }
class C{  public static void cleanupInitMaps(ServletContext context){  Map<Thread,InitFacesContext> threadInitContext=InitFacesContext.getThreadInitContextMap();  Map<InitFacesContext,ServletContext> initContextServletContext=InitFacesContext.getInitContextServletContextMap();  Set<Map.Entry<InitFacesContext,ServletContext>> entries=initContextServletContext.entrySet();  for (Iterator<Map.Entry<InitFacesContext,ServletContext>> iterator1=entries.iterator(); iterator1.hasNext(); ) {    Map.Entry<InitFacesContext,ServletContext> entry1=(Map.Entry)iterator1.next();    Object initContextKey=entry1.getKey();    Object value1=entry1.getValue();    if (context == value1) {      initContextServletContext.remove(initContextKey);      Set<Map.Entry<Thread,InitFacesContext>> threadEntries=threadInitContext.entrySet();      for (Iterator<Map.Entry<Thread,InitFacesContext>> iterator2=threadEntries.iterator(); iterator2.hasNext(); ) {        Map.Entry<Thread,InitFacesContext> entry2=(Map.Entry)iterator2.next();        Object thread=entry2.getKey();        Object initContextValue=entry2.getValue();        if (initContextKey == initContextValue) {          threadInitContext.remove(thread);        }      }    }  }}  }
class C{  public List<IComment> appendComment(final String commentText) throws com.google.security.zynamics.binnavi.API.disassembly.CouldntSaveDataException, com.google.security.zynamics.binnavi.API.disassembly.CouldntLoadDataException {  try {    return m_node.appendComment(commentText);  } catch (  final CouldntSaveDataException exception) {    throw new com.google.security.zynamics.binnavi.API.disassembly.CouldntSaveDataException(exception);  }catch (  final CouldntLoadDataException exception) {    throw new com.google.security.zynamics.binnavi.API.disassembly.CouldntLoadDataException(exception);  }}  }
class C{  public final boolean sendMessageAtFrontOfQueue(Message msg){  return mExec.sendMessageAtFrontOfQueue(msg);}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  return success;}  }
class C{  @Override public void process() throws MigrationCallbackException {  DbClient dbClient=this.getDbClient();  InitialSetup initialSetup=dbClient.queryObject(InitialSetup.class,InitialSetup.SINGLETON_ID);  if ((initialSetup != null) && (BooleanUtils.isTrue(initialSetup.getComplete()))) {    log.info("Migrating InitialSetup CF into Coordinator");    ConfigurationImpl config=new ConfigurationImpl();    config.setKind(CONFIG_KIND);    config.setId(CONFIG_ID);    config.setConfig(COMPLETE,Boolean.TRUE.toString());    coordinatorClient.persistServiceConfiguration(config);    dbClient.removeObject(initialSetup);  }}  }
class C{  public void close(){  mPeripheral.close();}  }
class C{  public int trueBitAt(int i){  return arr[i];}  }
class C{  protected boolean hasOutstandingChanges(){  return (fDocumentNo.hasChanged() || fDescription.hasChanged() || fIsPaid.hasChanged()|| fIsSOTrx.hasChanged()|| fBPartner_ID.hasChanged()|| fOrder_ID.hasChanged()|| fAmtFrom.hasChanged()|| fAmtTo.hasChanged()|| fDateFrom.hasChanged()|| fDateTo.hasChanged());}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public HighlightBuilder highlightQuery(QueryBuilder highlightQuery){  this.highlightQuery=highlightQuery;  return this;}  }
class C{  DHPrivateKey(BigInteger x,BigInteger p,BigInteger g,int l){  this.x=x;  this.p=p;  this.g=g;  this.l=l;  try {    this.key=new DerValue(DerValue.tag_Integer,this.x.toByteArray()).toByteArray();    this.encodedKey=getEncoded();  } catch (  IOException e) {    throw new ProviderException("Cannot produce ASN.1 encoding",e);  }}  }
class C{  public static int indexOf(String src,String sub,int startIndex,int endIndex){  if (startIndex < 0) {    startIndex=0;  }  int srclen=src.length();  if (endIndex > srclen) {    endIndex=srclen;  }  int sublen=sub.length();  if (sublen == 0) {    return startIndex > srclen ? srclen : startIndex;  }  int total=endIndex - sublen + 1;  char c=sub.charAt(0);  mainloop:   for (int i=startIndex; i < total; i++) {    if (src.charAt(i) != c) {      continue;    }    int j=1;    int k=i + 1;    while (j < sublen) {      if (sub.charAt(j) != src.charAt(k)) {        continue mainloop;      }      j++;      k++;    }    return i;  }  return -1;}  }
class C{  public static boolean isMinute(String s){  if (isEmpty(s))   return defaultEmptyOK;  return isIntegerInRange(s,0,59);}  }
class C{  public static void received(Channel channel,ChannelBuffer response){  int id=TBaseTools.getTMessageId(response);  try {    DefaultFuture future=FUTURES.remove(id);    if (future != null) {      future.doReceived(response);    } else {      logger.warn("The timeout response finally returned at " + (new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(new Date())) + ", response "+ response+ (channel == null ? "" : ", channel: " + channel.getLocalAddress() + " -> "+ channel.getRemoteAddress()));    }  }  finally {    CHANNELS.remove(id);  }}  }
class C{  public static String readFully(Reader reader) throws IOException {  try {    StringWriter writer=new StringWriter();    char[] buffer=new char[1024];    int count;    while ((count=reader.read(buffer)) != -1) {      writer.write(buffer,0,count);    }    return writer.toString();  }  finally {    reader.close();  }}  }
class C{  public ActivationDesc(ActivationGroupID groupID,String className,String location,MarshalledObject<?> data,boolean restart){  if (groupID == null)   throw new IllegalArgumentException("groupID can't be null");  this.groupID=groupID;  this.className=className;  this.location=location;  this.data=data;  this.restart=restart;}  }
class C{  public boolean isJobNonConcurrent(Connection conn,JobKey jobKey) throws SQLException {  PreparedStatement ps=null;  ResultSet rs=null;  try {    ps=conn.prepareStatement(rtp(SELECT_JOB_NONCONCURRENT));    ps.setString(1,jobKey.getName());    ps.setString(2,jobKey.getGroup());    rs=ps.executeQuery();    if (!rs.next()) {      return false;    }    return getBoolean(rs,COL_IS_NONCONCURRENT);  }  finally {    closeResultSet(rs);    closeStatement(ps);  }}  }
class C{  private void addTermFrequencies(Reader r,Map<String,Map<String,Int>> perFieldTermFrequencies,String fieldName) throws IOException {  if (analyzer == null) {    throw new UnsupportedOperationException("To use MoreLikeThis without " + "term vectors, you must provide an Analyzer");  }  Map<String,Int> termFreqMap=perFieldTermFrequencies.get(fieldName);  if (termFreqMap == null) {    termFreqMap=new HashMap<>();    perFieldTermFrequencies.put(fieldName,termFreqMap);  }  try (TokenStream ts=analyzer.tokenStream(fieldName,r)){    int tokenCount=0;    CharTermAttribute termAtt=ts.addAttribute(CharTermAttribute.class);    ts.reset();    while (ts.incrementToken()) {      String word=termAtt.toString();      tokenCount++;      if (tokenCount > maxNumTokensParsed) {        break;      }      if (isNoiseWord(word)) {        continue;      }      Int cnt=termFreqMap.get(word);      if (cnt == null) {        termFreqMap.put(word,new Int());      } else {        cnt.x++;      }    }    ts.end();  } }  }
class C{  public void unsubscribe(String remoteName,String participantId) throws RoomException {  log.debug("Request [UNSUBSCRIBE] remoteParticipant={} ({})",remoteName,participantId);  Participant participant=getParticipant(participantId);  String name=participant.getName();  Room room=participant.getRoom();  Participant senderParticipant=room.getParticipantByName(remoteName);  if (senderParticipant == null) {    log.warn("PARTICIPANT {}: Requesting to unsubscribe from user {} " + "in room {} but user could not be found",name,remoteName,room.getName());    throw new RoomException(Code.USER_NOT_FOUND_ERROR_CODE,"User " + remoteName + " not found in room "+ room.getName());  }  participant.cancelReceivingMedia(remoteName);}  }
class C{  protected int defaultMaxInstNum(){  return 50;}  }
class C{  public static boolean isJCB(String cc){  String first4digs=cc.substring(0,4);  if ((cc.length() == 16) && (first4digs.equals("3088") || first4digs.equals("3096") || first4digs.equals("3112")|| first4digs.equals("3158")|| first4digs.equals("3337")|| first4digs.equals("3528")))   return isCreditCard(cc);  return false;}  }
class C{  public static String wrap(String inString,int wrap_length,String prepend){  char[] charAry;  int p, p2, offset=0, marker;  StringBuffer result=new StringBuffer();  if (inString == null) {    return null;  }  if (wrap_length < 0) {    throw new IllegalArgumentException("bad params");  }  if (prepend != null) {    result.append(prepend);  }  charAry=inString.toCharArray();  p=marker=0;  while (marker < charAry.length) {    while (p < charAry.length && (charAry[p] != '\n') && ((p - marker) < wrap_length)) {      p++;    }    if (p == charAry.length) {      result.append(inString.substring(marker,p));      return result.toString();    }    if (charAry[p] == '\n') {      result.append(inString.substring(marker,p + 1));      if (prepend != null) {        result.append(prepend);      }      p=marker=p + 1;      continue;    }    p2=p - 1;    if (p < charAry.length) {      if (isspace(charAry[p])) {        offset=1;      } else {        while ((p2 > marker) && !isspace(charAry[p2])) {          p2--;        }        offset=0;      }    }    if (p2 == marker) {      p2=p - 1;    }    if (!isspace(charAry[p2])) {      result.append(inString.substring(marker,p2 + 1));    } else {      result.append(inString.substring(marker,p2));    }    if (p < charAry.length) {      result.append("\n");      if (prepend != null) {        result.append(prepend);      }    }    p=marker=p2 + 1 + offset;  }  return result.toString();}  }
class C{  public void inverseTransform(double[] src,int srcOff,double[] dst,int dstOff,int length) throws NoninvertibleTransformException {  double det=getDeterminant();  if (Math.abs(det) < ZERO) {    throw new NoninvertibleTransformException("Determinant is zero");  }  while (--length >= 0) {    double x=src[srcOff++] - m02;    double y=src[srcOff++] - m12;    dst[dstOff++]=(x * m11 - y * m01) / det;    dst[dstOff++]=(y * m00 - x * m10) / det;  }}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.PROPERTY_GETTER_DECLARATION___GET_DEFINED_GETTER:    return getDefinedGetter();case N4JSPackage.PROPERTY_GETTER_DECLARATION___GET_DEFINED_MEMBER:  return getDefinedMember();case N4JSPackage.PROPERTY_GETTER_DECLARATION___IS_VALID_NAME:return isValidName();case N4JSPackage.PROPERTY_GETTER_DECLARATION___GET_ANNOTATIONS:return getAnnotations();}return super.eInvoke(operationID,arguments);}  }
class C{  public void before(PropertyInfoRestRep oldProps,PropertyInfoRestRep newProps){  for (  UpdateHandler handler : handlers) {    handler.before(oldProps,newProps);  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.SOFTWARE_PATTERN___IS_A1:    return ((InternalEList<?>)getIsA_1()).basicRemove(otherEnd,msgs);case UmplePackage.SOFTWARE_PATTERN___SINGLETON_1:  return ((InternalEList<?>)getSingleton_1()).basicRemove(otherEnd,msgs);case UmplePackage.SOFTWARE_PATTERN___IMMUTABLE_1:return ((InternalEList<?>)getImmutable_1()).basicRemove(otherEnd,msgs);case UmplePackage.SOFTWARE_PATTERN___KEY_DEFINITION_1:return ((InternalEList<?>)getKeyDefinition_1()).basicRemove(otherEnd,msgs);case UmplePackage.SOFTWARE_PATTERN___CODE_INJECTION_1:return ((InternalEList<?>)getCodeInjection_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_textsplittextone.class,args);}  }
class C{  public static boolean deleteDirectoryFiles(Set<String> inputFilePathsAndNames){  if ((inputFilePathsAndNames == null)) {    return false;  }  boolean didSuccessfullyDeleteAllFiles=true;  try {    for (    String filePathAndName : inputFilePathsAndNames) {      File file=new File(filePathAndName);      if (!file.isDirectory()) {        boolean deleteSuccess=deleteFile(filePathAndName);        if (!deleteSuccess) {          logger.debug("Warning - " + filePathAndName + " failed to delete");          didSuccessfullyDeleteAllFiles=false;        }      }    }  } catch (  Exception e) {    logger.debug(e.toString() + System.lineSeparator() + StackTrace.getStringFromStackTrace(e));    return false;  }  return didSuccessfullyDeleteAllFiles;}  }
class C{  public XNetMessage(XNetReply message){  super(message.getNumDataElements());  setBinary(true);  setRetries(_nRetries);  setTimeout(XNetMessageTimeout);  for (int i=0; i < message.getNumDataElements(); i++) {    setElement(i,message.getElement(i));  }}  }
class C{  public void enableDiscoverability(Activity activity,int requestCode){  enableDiscoverability(activity,requestCode,-1);}  }
class C{  public void testSfxMomentConstruction(){  String xml="";  xml+=createStartMissionXml("start","Name");  xml+=createSfxMomentXml("start","start","path/to/something");  xml+=createEndMissionXml();  InputStream momentInputStream=new ByteArrayInputStream(xml.getBytes());  mMission=new Mission(mMissionData);  try {    mMission.readMoments(momentInputStream);  } catch (  MissionParseException e) {    e.printStackTrace();  }  Assert.assertEquals("Mission 1",mMissionData.getMissionId());  Assert.assertEquals(1,mMissionData.getNumMoments());  Assert.assertEquals(true,mMissionData.getMomentFromId("start") instanceof SfxMoment);  Assert.assertEquals("start",mMissionData.getMomentFromId("start").getNextMomentId());}  }
class C{  public VfsStream(InputStream is,OutputStream os){  init(is,os);}  }
class C{  public static synchronized void reset(){  for (  MiniThumbFile file : sThumbFiles.values()) {    file.deactivate();  }  sThumbFiles.clear();}  }
class C{  private CnATreeElement unifyLinks(CnATreeElement sourceElement,CnATreeElement destinationElement) throws CommandException {  for (  CnALink linkDown : sourceElement.getLinksDown()) {    createLink(destinationElement,linkDown.getDependency(),linkDown.getRelationId());  }  for (  CnALink linkUp : sourceElement.getLinksUp()) {    createLink(linkUp.getDependant(),destinationElement,linkUp.getRelationId());  }  return destinationElement;}  }
class C{  private void checkAlterIntervalConverters() throws SecurityException {  SecurityManager sm=System.getSecurityManager();  if (sm != null) {    sm.checkPermission(new JodaTimePermission("ConverterManager.alterIntervalConverters"));  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void position(String arg0,com.ib.client.Contract arg1,int arg2,double arg3){  _log.debug("position: " + arg0 + " "+ arg1.toString()+ " "+ arg2+ " "+ arg3);}  }
class C{  public final ObjectProperty<Node> graphicProperty(){  return graphicProperty;}  }
class C{  public static WebSocketFrame createPongFrame(){  return new WebSocketFrame().setFin(true).setOpcode(PONG);}  }
class C{  public void saveRecord(){  board.saveRecord();}  }
class C{  public static void tripleToEdge(final long[] triple,final long seed,final int numVertices,final int partSize,final int e[]){  if (numVertices == 0) {    e[0]=e[1]=e[2]=-1;    return;  }  final long[] hash=new long[3];  Hashes.spooky4(triple,seed,hash);  e[0]=(int)((hash[0] & 0x7FFFFFFFFFFFFFFFL) % partSize);  e[1]=(int)(partSize + (hash[1] & 0x7FFFFFFFFFFFFFFFL) % partSize);  e[2]=(int)((partSize << 1) + (hash[2] & 0x7FFFFFFFFFFFFFFFL) % partSize);}  }
class C{  public static boolean isEntityBlacklistedFromGravityRod(Class entity){  return gravityRodBlacklist.contains(entity);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Airing air=getAir(stack);  if (Permissions.hasPermission(Permissions.PERMISSION_RECORDINGSCHEDULE,stack.getUIMgr()))   Carny.getInstance().removeDontLike(air);  return null;}  }
class C{  public boolean isSpread(){  return spread;}  }
class C{  public EipItemProviderAdapterFactory(){  supportedTypes.add(IEditingDomainItemProvider.class);  supportedTypes.add(IStructuredItemContentProvider.class);  supportedTypes.add(ITreeItemContentProvider.class);  supportedTypes.add(IItemLabelProvider.class);  supportedTypes.add(IItemPropertySource.class);}  }
class C{  public static boolean pointInView(View v,float localX,float localY,float slop){  return localX >= -slop && localY >= -slop && localX < (v.getWidth() + slop) && localY < (v.getHeight() + slop);}  }
class C{  public FloatMatrix put(int[] indices,int c,float v){  for (int i=0; i < indices.length; i++) {    put(indices[i],c,v);  }  return this;}  }
class C{  private static Dfareporting initializeDfareporting() throws Exception {  Credential credential=authorize();  return new Dfareporting(httpTransport,JSON_FACTORY,credential);}  }
class C{  private Request createTunnelRequest() throws IOException {  return new Request.Builder().url(route.address().url()).header("Host",Util.hostHeader(route.address().url())).header("Proxy-Connection","Keep-Alive").header("User-Agent",Version.userAgent()).build();}  }
class C{  public void addRowSet(RowSet[] rowset,String[] columnName) throws SQLException {  if (rowset.length != columnName.length) {    throw new SQLException(resBundle.handleGetObject("joinrowsetimpl.numnotequal").toString());  } else {    for (int i=0; i < rowset.length; i++) {      ((CachedRowSetImpl)rowset[i]).setMatchColumn(columnName[i]);      addRowSet((Joinable)rowset[i]);    }  }}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(6);  newVector.addElement(new Option("\tFull class name of classifier to use, followed\n" + "\tby scheme options. eg:\n" + "\t\t\"weka.classifiers.bayes.NaiveBayes -D\"\n"+ "\t(default: weka.classifiers.rules.ZeroR)","W",1,"-W <classifier specification>"));  newVector.addElement(new Option("\tAttribute on which misclassifications are based.\n" + "\tIf < 0 will use any current set class or default to the last attribute.","C",1,"-C <class index>"));  newVector.addElement(new Option("\tThe number of folds to use for cross-validation cleansing.\n" + "\t(<2 = no cross-validation - default).","F",1,"-F <number of folds>"));  newVector.addElement(new Option("\tThreshold for the max error when predicting numeric class.\n" + "\t(Value should be >= 0, default = 0.1).","T",1,"-T <threshold>"));  newVector.addElement(new Option("\tThe maximum number of cleansing iterations to perform.\n" + "\t(<1 = until fully cleansed - default)","I",1,"-I"));  newVector.addElement(new Option("\tInvert the match so that correctly classified instances are discarded.\n","V",0,"-V"));  return newVector.elements();}  }
class C{  public Scanner(InputStream is,String enc) throws ParseException {  try {    reader=new StreamNormalizingReader(is,enc);    current=nextChar();  } catch (  IOException e) {    throw new ParseException(e);  }}  }
class C{  public void addSurfaceObject(SurfaceRenderable so,Sector sector){  if (this.intersectingObjects == null)   this.intersectingObjects=new ArrayList<SurfaceRenderable>();  this.intersectingObjects.add(so);  this.objectSector=(this.objectSector != null) ? this.objectSector.union(sector) : sector;}  }
class C{  @Override public void run(){  amIActive=true;  String destHeader=null;  String outputHeader=null;  String backLinkHeader=null;  WhiteboxRaster destImage;  WhiteboxRaster output;  WhiteboxRaster backLink;  int cols, rows;  double z, flowDir;  float progress=0;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double lnOf2=0.693147180559945;  double gridRes;  int col, row, a;  int c;  int x, y, i;  boolean flag=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      destHeader=args[i];    } else     if (i == 1) {      backLinkHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    }  }  if ((destHeader == null) || (backLinkHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    destImage=new WhiteboxRaster(destHeader,"r");    rows=destImage.getNumberRows();    cols=destImage.getNumberColumns();    double noData=destImage.getNoDataValue();    gridRes=(destImage.getCellSizeX() + destImage.getCellSizeY()) / 2;    backLink=new WhiteboxRaster(backLinkHeader,"r");    if (backLink.getNumberColumns() != cols || backLink.getNumberRows() != rows) {      showFeedback("Input images must have the same dimensions");      return;    }    output=new WhiteboxRaster(outputHeader,"rw",backLinkHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    double[] data;    for (row=0; row < rows; row++) {      data=destImage.getRowValues(row);      for (col=0; col < cols; col++) {        if (data[col] > 0) {          x=col;          y=row;          flag=true;          do {            z=output.getValue(y,x);            if (z == noData) {              output.setValue(y,x,1);            } else {              output.setValue(y,x,z + 1);            }            flowDir=backLink.getValue(y,x);            if (flowDir > 0) {              c=(int)(Math.log(flowDir) / lnOf2);              x+=dX[c];              y+=dY[c];            } else {              flag=false;            }          } while (flag);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    destImage.close();    backLink.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void enterTrees(List<JCCompilationUnit> roots){  compiler.enterTrees(roots);}  }
class C{  protected Key engineTranslateKey(Key key) throws InvalidKeyException {  if (key == null) {    throw new InvalidKeyException("Key must not be null");  }  String keyAlg=key.getAlgorithm();  if (keyAlg.equals("EC") == false) {    throw new InvalidKeyException("Not an EC key: " + keyAlg);  }  if (key instanceof PublicKey) {    return implTranslatePublicKey((PublicKey)key);  } else   if (key instanceof PrivateKey) {    return implTranslatePrivateKey((PrivateKey)key);  } else {    throw new InvalidKeyException("Neither a public nor a private key");  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:45.156 -0500",hash_original_method="E50D6CA61897C534ECF6BFE2E6C66EEB",hash_generated_method="15E1CF64B509FE04077205B29E000359") public AcceptParser(String accept){  super(accept);}  }
class C{  public void updateSessionTimeout(TimeSpan span) throws SecurityException {  checkWriteAccess();  boolean hasAccess=ConfigWebUtil.hasAccess(config,SecurityManager.TYPE_SETTING);  if (!hasAccess)   throw new SecurityException("no access to update scope setting");  Element scope=_getRootElement("scope");  if (span != null)   scope.setAttribute("sessiontimeout",span.getDay() + "," + span.getHour()+ ","+ span.getMinute()+ ","+ span.getSecond()); else   scope.removeAttribute("sessiontimeout");}  }
class C{  public PutObjectResult putObject(PutObjectRequest putObjectRequest) throws OSSException, ClientException {  assertParameterNotNull(putObjectRequest,"putObjectRequest");  if (putObjectRequest.getCallback() == null) {    return writeObjectInternal(WriteMode.OVERWRITE,putObjectRequest,putObjectReponseParser);  } else {    return writeObjectInternal(WriteMode.OVERWRITE,putObjectRequest,putObjectCallbackReponseParser);  }}  }
class C{  protected DefRootImpl(){  super();}  }
class C{  public Element addElementToRegistry(Element element){  if (element == null)   return (this);  int hc=element.hashCode();  String s=Integer.toString(hc);  addElementToRegistry(s,element);  return (this);}  }
class C{  public void addAll(PairedStats values){  if (values.count() == 0) {    return;  }  xStats.addAll(values.xStats());  if (yStats.count() == 0) {    sumOfProductsOfDeltas=values.sumOfProductsOfDeltas();  } else {    sumOfProductsOfDeltas+=values.sumOfProductsOfDeltas() + (values.xStats().mean() - xStats.mean()) * (values.yStats().mean() - yStats.mean()) * values.count();  }  yStats.addAll(values.yStats());}  }
class C{  public void clear(){  mSize=0;  mChunks.clear();}  }
class C{  public static PathImpl lookup(){  return getPwd();}  }
class C{  public void drawRect(int x,int y,int width,int height){  impl.drawRect(nativeGraphics,xTranslate + x,yTranslate + y,width,height);}  }
class C{  public boolean exportSelected(){  return exportSelected;}  }
class C{  public Builder(Configuration configuration){  this.webIrcEnabled=configuration.isWebIrcEnabled();  this.webIrcUsername=configuration.getWebIrcUsername();  this.webIrcHostname=configuration.getWebIrcHostname();  this.webIrcAddress=configuration.getWebIrcAddress();  this.webIrcPassword=configuration.getWebIrcPassword();  this.name=configuration.getName();  this.login=configuration.getLogin();  this.version=configuration.getVersion();  this.finger=configuration.getFinger();  this.realName=configuration.getRealName();  this.channelPrefixes=configuration.getChannelPrefixes();  this.userLevelPrefixes=configuration.getUserLevelPrefixes();  this.snapshotsEnabled=configuration.isSnapshotsEnabled();  this.dccFilenameQuotes=configuration.isDccFilenameQuotes();  this.dccPorts.clear();  this.dccPorts.addAll(configuration.getDccPorts());  this.dccLocalAddress=configuration.getDccLocalAddress();  this.dccPublicAddress=configuration.getDccPublicAddress();  this.dccAcceptTimeout=configuration.getDccAcceptTimeout();  this.dccResumeAcceptTimeout=configuration.getDccResumeAcceptTimeout();  this.dccTransferBufferSize=configuration.getDccTransferBufferSize();  this.dccPassiveRequest=configuration.isDccPassiveRequest();  this.servers.clear();  this.servers.addAll(configuration.getServers());  this.serverPassword=configuration.getServerPassword();  this.socketFactory=configuration.getSocketFactory();  this.localAddress=configuration.getLocalAddress();  this.encoding=configuration.getEncoding();  this.locale=configuration.getLocale();  this.socketConnectTimeout=configuration.getSocketConnectTimeout();  this.socketTimeout=configuration.getSocketTimeout();  this.maxLineLength=configuration.getMaxLineLength();  this.autoSplitMessage=configuration.isAutoSplitMessage();  this.autoNickChange=configuration.isAutoNickChange();  this.messageDelay=configuration.getMessageDelay();  this.listenerManager=configuration.getListenerManager();  this.nickservPassword=configuration.getNickservPassword();  this.nickservOnSuccess=configuration.getNickservOnSuccess();  this.nickservNick=configuration.getNickservNick();  this.nickservCustomMessage=configuration.getNickservCustomMessage();  this.nickservDelayJoin=configuration.isNickservDelayJoin();  this.userModeHideRealHost=configuration.isUserModeHideRealHost();  this.autoReconnect=configuration.isAutoReconnect();  this.autoReconnectDelay=configuration.getAutoReconnectDelay();  this.autoReconnectAttempts=configuration.getAutoReconnectAttempts();  this.autoJoinChannels.clear();  this.autoJoinChannels.putAll(configuration.getAutoJoinChannels());  this.onJoinWhoEnabled=configuration.isOnJoinWhoEnabled();  this.identServerEnabled=configuration.isIdentServerEnabled();  this.capEnabled=configuration.isCapEnabled();  this.capHandlers.clear();  this.capHandlers.addAll(configuration.getCapHandlers());  this.channelModeHandlers.clear();  this.channelModeHandlers.addAll(configuration.getChannelModeHandlers().values());  this.shutdownHookEnabled=configuration.isShutdownHookEnabled();  this.botFactory=configuration.getBotFactory();}  }
class C{  public static BasicAuthInfo parseAuthHeader(final PwmApplication pwmApplication,final PwmRequest pwmRequest){  final String authHeader=pwmRequest.readHeaderValueAsString(PwmConstants.HttpHeader.Authorization);  if (authHeader != null) {    if (authHeader.contains(PwmConstants.HTTP_BASIC_AUTH_PREFIX)) {      final String toStrip=PwmConstants.HTTP_BASIC_AUTH_PREFIX + " ";      final String encodedValue=authHeader.substring(toStrip.length(),authHeader.length());      try {        final String charSet=pwmApplication.getConfig().readAppProperty(AppProperty.HTTP_BASIC_AUTH_CHARSET);        final String decoded=new String(StringUtil.base64Decode(encodedValue),charSet);        return parseHeaderString(decoded);      } catch (      Exception e) {        LOGGER.debug(pwmRequest,"error decoding auth header");      }    }  }  return null;}  }
class C{  protected void undo(MqttPublish message) throws MqttPersistenceException {  final String methodName="undo";synchronized (queueLock) {    log.fine(CLASS_NAME,methodName,"618",new Object[]{new Integer(message.getMessageId()),new Integer(message.getMessage().getQos())});    if (message.getMessage().getQos() == 1) {      outboundQoS1.remove(new Integer(message.getMessageId()));    } else {      outboundQoS2.remove(new Integer(message.getMessageId()));    }    pendingMessages.removeElement(message);    persistence.remove(getSendPersistenceKey(message));    tokenStore.removeToken(message);    checkQuiesceLock();  }}  }
class C{  public static Document newDocument(){  try {    return newBuilder().newDocument();  } catch (  ParserConfigurationException e) {    throw new RuntimeException("Cannot create new document",e);  }}  }
class C{  @Override public void execute(Runnable runnable){  if (runnable == null) {    throw new NullPointerException("runnable parameter is null");  }  if (!mWorkQueue.offer(runnable)) {    throw new RejectedExecutionException(mName + " queue is full, size=" + mWorkQueue.size());  }  final int queueSize=mWorkQueue.size();  final int maxSize=mMaxQueueSize.get();  if ((queueSize > maxSize) && mMaxQueueSize.compareAndSet(maxSize,queueSize)) {    FLog.v(TAG,"%s: max pending work in queue = %d",mName,queueSize);  }  startWorkerIfNeeded();}  }
class C{  public void dispose(){  m_debuggerBox.removeItemListener(m_internalItemListener);}  }
class C{  public ArrayList<OUTTYPE> sort(HashMap<T,Double> input){  ArrayList<Entry<T,Double>> entries=new ArrayList<Entry<T,Double>>(input.entrySet());  Collections.sort(entries,comparator);  ArrayList<OUTTYPE> result=new ArrayList<OUTTYPE>(entries.size());  for (  Entry<T,Double> entry : entries)   result.add(entry.getKey());  return result;}  }
class C{  public GrammarException(String message,int line){  super(MessageFormat.format("{0} (line {1})",message,line));}  }
class C{  public boolean isTrickling(){  return trickle;}  }
class C{  private TextUtil(){  instanceNotAllowed(getClass());}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.ABSTRACT_CASE_CLAUSE;}  }
class C{  public boolean addGroupToGroup(String tenantName,PrincipalId groupId,String groupName) throws Exception {  return getService().addGroupToGroup(tenantName,groupId,groupName,this.getServiceContext());}  }
class C{  public void deleteThreadVars() throws IOException {  writeCode(DEL_THREAD_VARS);}  }
class C{  private static void createFlattenedListFromMap(List<Distributable> blockInfos,List<NodeBlockRelation> flattenedList,Set<Distributable> uniqueBlocks,Set<String> nodeList){  for (  Distributable blockInfo : blockInfos) {    uniqueBlocks.add(blockInfo);    for (    String eachNode : blockInfo.getLocations()) {      NodeBlockRelation nbr=new NodeBlockRelation(blockInfo,eachNode);      flattenedList.add(nbr);      nodeList.add(eachNode);    }  }}  }
class C{  public static <K,V>Map<K,V> of(){  return newHashMap();}  }
class C{  public boolean isSetPutRequest(){  return this.putRequest != null;}  }
class C{  public static double min(final double a,final double b,final double c){  return min(min(a,b),c);}  }
class C{  public Date(){  super("date",TextTemplateMessages.MESSAGES.variableDescriptionDate());}  }
class C{  public static void putLong(long addr,long val){  if (UNALIGNED)   UNSAFE.putLong(addr,val); else   putLongByByte(addr,val,BIG_ENDIAN);}  }
class C{  public static Color hsl(Vector3D hsl){  return hsl(hsl.getX(),hsl.getY(),hsl.getZ());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:22.956 -0400",hash_original_method="4E26E368F0DE6132017E692569B3B9A8",hash_generated_method="09069326505DC88BD225D86874FBE42A") private int doRegister(int registrations){  long adjust=((long)registrations << PARTIES_SHIFT) | registrations;  final Phaser parent=this.parent;  int phase;  for (; ; ) {    long s=(parent == null) ? state : reconcileState();    int counts=(int)s;    int parties=counts >>> PARTIES_SHIFT;    int unarrived=counts & UNARRIVED_MASK;    if (registrations > MAX_PARTIES - parties)     throw new IllegalStateException(badRegister(s));    phase=(int)(s >>> PHASE_SHIFT);    if (phase < 0)     break;    if (counts != EMPTY) {      if (parent == null || reconcileState() == s) {        if (unarrived == 0)         root.internalAwaitAdvance(phase,null); else         if (UNSAFE.compareAndSwapLong(this,stateOffset,s,s + adjust))         break;      }    } else     if (parent == null) {      long next=((long)phase << PHASE_SHIFT) | adjust;      if (UNSAFE.compareAndSwapLong(this,stateOffset,s,next))       break;    } else {synchronized (this) {        if (state == s) {          phase=parent.doRegister(1);          if (phase < 0)           break;          while (!UNSAFE.compareAndSwapLong(this,stateOffset,s,((long)phase << PHASE_SHIFT) | adjust)) {            s=state;            phase=(int)(root.state >>> PHASE_SHIFT);          }          break;        }      }    }  }  return phase;}  }
class C{  public static Document createDOM(InputStream is) throws ParserConfigurationException, SAXException, IOException {  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();  dbf.setValidating(false);  dbf.setIgnoringComments(false);  dbf.setIgnoringElementContentWhitespace(true);  dbf.setNamespaceAware(true);  dbf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,true);  dbf.setFeature(DISALLOW_DOCTYPE_DECL,true);  dbf.setFeature(EXTERNAL_GENERAL_ENTITIES,false);  dbf.setFeature(EXTERNAL_PARAMETER_ENTITIES,false);  dbf.setFeature(LOAD_EXTERNAL_DTD,false);  DocumentBuilder db=null;  db=dbf.newDocumentBuilder();  db.setEntityResolver(new NullResolver());  db.setErrorHandler(new SamlParserErrorHandler());  return db.parse(is);}  }
class C{  public void unregisterDownloadFileChangeListener(OnDownloadFileChangeListener onDownloadFileChangeListener){  mDownloadFileChangeObserver.removeOnDownloadFileChangeListener(onDownloadFileChangeListener);}  }
class C{  @TargetApi(8) public Bundler putCharSequenceArrayList(String key,ArrayList<CharSequence> value){  bundle.putCharSequenceArrayList(key,value);  return this;}  }
class C{  public Hospital(){  super();}  }
class C{  private SolrInputDocument genNestedDocuments(Map<String,SolrInputDocument> allDocs,int thisLevel,int maxDepth){  String id="" + (idCounter++);  SolrInputDocument sdoc=new SolrInputDocument();  allDocs.put(id,sdoc);  sdoc.addField("id",id);  sdoc.addField("level_i",thisLevel);  sdoc.addField("name",names[TestUtil.nextInt(random(),0,names.length - 1)]);  if (0 < maxDepth) {    int numKids=TestUtil.nextInt(random(),-2,7);    for (int i=0; i < numKids; i++) {      sdoc.addChildDocument(genNestedDocuments(allDocs,thisLevel + 1,maxDepth - 1));    }  }  return sdoc;}  }
class C{  public long nextBinlogPosition(){  return nextBinlogPosition;}  }
class C{  public MLOutput execute(String dmlScriptFilePath,String[] args) throws IOException, DMLException, ParseException {  return execute(dmlScriptFilePath,args,false,null);}  }
class C{  public Collection<Map<Integer,int[]>> calculateSplits(Map<Integer,int[]> allSelectedExamples,int bestAttribute,double bestSplitValue){  double[] attributeColumn=columnTable.getNumericalAttributeColumn(bestAttribute);  List<Map<Integer,int[]>> results=new ArrayList<>(3);  results.add(0,new HashMap<Integer,int[]>());  results.add(1,new HashMap<Integer,int[]>());  boolean existNaNs=false;  if (Double.isNaN(attributeColumn[allSelectedExamples.get(bestAttribute)[allSelectedExamples.get(bestAttribute).length - 1]])) {    existNaNs=true;    results.add(2,new HashMap<Integer,int[]>());  }  int maximalLength=getArbitraryValue(allSelectedExamples).length;  int[] smaller=new int[maximalLength];  int[] bigger=new int[maximalLength];  int[] naNs=new int[maximalLength];  double value;  for (  int i : allSelectedExamples.keySet()) {    int smallerPosition=0;    int biggerPosition=0;    int naNsPosition=0;    int[] selectedExamples=allSelectedExamples.get(i);    for (    int j : selectedExamples) {      value=attributeColumn[j];      if (Double.isNaN(value)) {        naNs[naNsPosition]=j;        naNsPosition++;      } else       if (Tools.isLessEqual(value,bestSplitValue)) {        smaller[smallerPosition]=j;        smallerPosition++;      } else {        bigger[biggerPosition]=j;        biggerPosition++;      }    }    results.get(0).put(i,Arrays.copyOf(smaller,smallerPosition));    results.get(1).put(i,Arrays.copyOf(bigger,biggerPosition));    if (existNaNs) {      results.get(2).put(i,Arrays.copyOf(naNs,naNsPosition));    }  }  return results;}  }
class C{  public final byte[] update(byte[] input){  checkCipherState();  if (input == null) {    throw new IllegalArgumentException("Null input buffer");  }  chooseFirstProvider();  if (input.length == 0) {    return null;  }  return spi.engineUpdate(input,0,input.length);}  }
class C{  private static boolean isKnownType(Object obj){  return obj instanceof String || obj instanceof Boolean || obj instanceof Byte|| obj instanceof Integer|| obj instanceof Long|| obj instanceof Short|| obj instanceof Date|| obj instanceof Double|| obj instanceof Float|| obj instanceof BigDecimal|| obj instanceof URL;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.WITH_STATEMENT__EXPRESSION:    setExpression((Expression)newValue);  return;case N4JSPackage.WITH_STATEMENT__STATEMENT:setStatement((Statement)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  protected void childJustRemovedHook(Object child,BCSChild bcsChild){}  }
class C{  public static char[] encodeHex(final byte[] data,final boolean toLowerCase){  return encodeHex(data,toLowerCase ? DIGITS_LOWER : DIGITS_UPPER);}  }
class C{  public FoldingDescriptor(@NotNull ASTNode node,@NotNull TextRange range,@Nullable FoldingGroup group,Set<Object> dependencies,boolean neverExpands){  assert range.getLength() > 0 : range + ", text: " + node.getText()+ ", language = "+ node.getPsi().getLanguage();  myElement=node;  myRange=range;  myGroup=group;  myDependencies=dependencies;  assert !myDependencies.contains(null);  myNeverExpands=neverExpands;}  }
class C{  public OffsetInfo(long scn,String topologyName,String topologyInstanceId,String databaseName,int binLogPosition,String binLogFileName){  this.scn=scn;  this.topologyName=topologyName;  this.topologyInstanceId=topologyInstanceId;  this.databaseName=databaseName;  this.binLogPosition=binLogPosition;  this.binLogFileName=binLogFileName;}  }
class C{  public int size(){  return size;}  }
class C{  public static String prettyXml(Node doc) throws IOException, TransformerFactoryConfigurationError, TransformerException {  Transformer transformer=TransformerFactory.newInstance().newTransformer();  transformer.setOutputProperty(OutputKeys.INDENT,"yes");  return transform(transformer,doc);}  }
class C{  @Override public boolean equals(Object o){  if (this == o) {    return true;  }  if (o == null || getClass() != o.getClass()) {    return false;  }  if (!super.equals(o)) {    return false;  }  final MkCoPLeafEntry that=(MkCoPLeafEntry)o;  if (conservativeApproximation != null ? !conservativeApproximation.equals(that.conservativeApproximation) : that.conservativeApproximation != null) {    return false;  }  return !(progressiveApproximation != null ? !progressiveApproximation.equals(that.progressiveApproximation) : that.progressiveApproximation != null);}  }
class C{  public MutableValuesRaba(final byte[][] a){  this(0,a.length,a.length,a);}  }
class C{  public BezierNodeEdit(BezierFigure owner,int index,BezierPath.Node oldValue,BezierPath.Node newValue){  this.owner=owner;  this.index=index;  this.oldValue=oldValue;  this.newValue=newValue;}  }
class C{  @SuppressWarnings("rawtypes") public List<Object> buildCommandLineParts(Draft3Job job,File workingDir,FilePathMapper filePathMapper) throws BindingException {  logger.info("Building command line parts...");  Draft3CommandLineTool commandLineTool=(Draft3CommandLineTool)job.getApp();  List<Draft3InputPort> inputPorts=commandLineTool.getInputs();  List<Object> result=new LinkedList<>();  try {    List<Object> baseCmds=commandLineTool.getBaseCmd(job);    result.addAll(baseCmds);    List<Draft3CommandLinePart> commandLineParts=new LinkedList<>();    if (commandLineTool.hasArguments()) {      for (int i=0; i < commandLineTool.getArguments().size(); i++) {        Object argBinding=commandLineTool.getArguments().get(i);        if (argBinding instanceof String) {          Draft3CommandLinePart commandLinePart=new Draft3CommandLinePart.Builder(0,false).part(argBinding).keyValue("").build();          commandLinePart.setArgsArrayOrder(i);          commandLineParts.add(commandLinePart);          continue;        }        Object argValue=commandLineTool.getArgument(job,argBinding);        Map<String,Object> emptySchema=new HashMap<>();        Draft3CommandLinePart commandLinePart=buildCommandLinePart(job,null,argBinding,argValue,emptySchema,null);        if (commandLinePart != null) {          commandLinePart.setArgsArrayOrder(i);          commandLineParts.add(commandLinePart);        }      }    }    for (    Draft3InputPort inputPort : inputPorts) {      String key=inputPort.getId();      Object schema=inputPort.getSchema();      if (schema instanceof Map && ((Map)schema).get("type").equals("record") && inputPort.getInputBinding() == null) {        List<Draft3CommandLinePart> parts=buildRecordCommandLinePart(job,job.getInputs().get(Draft3SchemaHelper.normalizeId(key)),schema);        commandLineParts.addAll(parts);      } else {        Draft3CommandLinePart part=buildCommandLinePart(job,inputPort,inputPort.getInputBinding(),job.getInputs().get(Draft3SchemaHelper.normalizeId(key)),schema,key);        if (part != null) {          commandLineParts.add(part);        }      }    }    Collections.sort(commandLineParts,new Draft3CommandLinePart.CommandLinePartComparator());    for (    Draft3CommandLinePart part : commandLineParts) {      List<Object> flattenedObjects=part.flatten();      for (      Object obj : flattenedObjects) {        result.add(obj);      }    }  } catch (  Draft3ExpressionException e) {    logger.error("Failed to build command line.",e);    throw new BindingException("Failed to build command line.",e);  }  return result;}  }
class C{  public ClusterHealthStatus ensureGreen(Client client,String... indices){  ClusterHealthResponse actionGet=client.admin().cluster().health(Requests.clusterHealthRequest(indices).waitForGreenStatus().waitForEvents(Priority.LANGUID).waitForRelocatingShards(0)).actionGet();  if (actionGet.isTimedOut()) {    logger.info("ensureGreen timed out, cluster state:\n{}\n{}",client.admin().cluster().prepareState().get().getState().prettyPrint(),client.admin().cluster().preparePendingClusterTasks().get().prettyPrint());    assertThat("timed out waiting for green state",actionGet.isTimedOut(),equalTo(false));  }  assertThat(actionGet.getStatus(),equalTo(ClusterHealthStatus.GREEN));  return actionGet.getStatus();}  }
class C{  @Override public AgentAppFrame createFrame(){  return new NQueensFrame();}  }
class C{  public static <T,P>boolean allSatisfyWith(Iterable<T> iterable,Predicate2<? super T,? super P> predicate,P parameter){  if (iterable instanceof MutableCollection) {    return ((MutableCollection<T>)iterable).allSatisfyWith(predicate,parameter);  }  if (iterable instanceof ArrayList) {    return ArrayListIterate.allSatisfyWith((ArrayList<T>)iterable,predicate,parameter);  }  if (iterable instanceof RandomAccess) {    return RandomAccessListIterate.allSatisfyWith((List<T>)iterable,predicate,parameter);  }  if (iterable != null) {    return IterableIterate.allSatisfyWith(iterable,predicate,parameter);  }  throw new IllegalArgumentException("Cannot perform an allSatisfyWith on null");}  }
class C{  public Vec2D(ReadonlyVec2D v){  this.x=v.x();  this.y=v.y();}  }
class C{  public static void checkArgument(boolean expression,@Nullable String errorMessageTemplate,@Nullable Object... errorMessageArgs){  if (!expression) {    throw new IllegalArgumentException(format(errorMessageTemplate,errorMessageArgs));  }}  }
class C{  public DestinationTable.Builder buildDestinationTable(String tableName){  return new DestinationTable.Builder().datasetId(datasetId).type(TableType.TABLE).name(tableName).overwrite(overwrite);}  }
class C{  final boolean acquireQueued(final Node node,long arg){  boolean failed=true;  try {    boolean interrupted=false;    for (; ; ) {      final Node p=node.predecessor();      if (p == head && tryAcquire(arg)) {        setHead(node);        p.next=null;        failed=false;        return interrupted;      }      if (shouldParkAfterFailedAcquire(p,node) && parkAndCheckInterrupt())       interrupted=true;    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  boolean isNumeric(char ch){  return (ch >= '0' && ch <= '9');}  }
class C{  public float loadFloat(Offset offset){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return 0;}  }
class C{  public void sort() throws Exception {  sort(m_map,0,m_firstFree - 1);}  }
class C{  public CouldntInitializeDatabaseException(final Exception exception){  super(exception);  m_stacktrace=exception.getStackTrace();}  }
class C{  public EvictingQueueBuilder(String pattern,List<Filter<ILoggingEvent>> filters,int maxSize){  super(NAME,pattern,filters);  this.appender=new EvictingQueueAppender<ILoggingEvent>(maxSize);}  }
class C{  public void actionPerformed(ActionEvent e){  DataModel dataModel=getDataEditor().getSelectedDataModel();  if (dataModel instanceof DataSet) {    DataSet dataSet=(DataSet)dataModel;    JComponent editor=editor();    int selection=JOptionPane.showOptionDialog(JOptionUtils.centeringComp(),editor,"Probability",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE,null,new String[]{"Done","Cancel"},"Done");    if (selection != 0) {      return;    }    int numVars=dataSet.getNumColumns();    double prob=getProb();    double[] probs=new double[numVars];    for (int i=0; i < probs.length; i++) {      probs[i]=prob;    }    DataSet newDataSet=DataUtils.addMissingData(dataSet,probs);    DataModelList list=new DataModelList();    list.add(newDataSet);    getDataEditor().reset(list);    getDataEditor().selectFirstTab();  } else {    JOptionPane.showMessageDialog(JOptionUtils.centeringComp(),"Must be a tabular data set.");  }}  }
class C{  public static Map<String,TaskBlockInfo> createMappingForSegments(List<TableBlockInfo> tableBlockInfoList){  Map<String,TaskBlockInfo> segmentBlockInfoMapping=new HashMap<>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);  for (  TableBlockInfo info : tableBlockInfoList) {    String segId=info.getSegmentId();    TaskBlockInfo taskBlockInfoMapping=segmentBlockInfoMapping.get(segId);    String taskNo=CarbonTablePath.DataFileUtil.getTaskNo(info.getFilePath());    if (null == taskBlockInfoMapping) {      taskBlockInfoMapping=new TaskBlockInfo();      groupCorrespodingInfoBasedOnTask(info,taskBlockInfoMapping,taskNo);      segmentBlockInfoMapping.put(segId,taskBlockInfoMapping);    } else {      groupCorrespodingInfoBasedOnTask(info,taskBlockInfoMapping,taskNo);    }  }  return segmentBlockInfoMapping;}  }
class C{  protected WizardBranchController(WizardPanelProvider base){  this(new SimpleWizardInfo(base));}  }
class C{  private void onTransitPingAck(Message message){  LOGGER.trace("Received transit PingAck: {}",message);  PingData data=message.data();  Member target=data.getOriginalIssuer();  String correlationId=message.correlationId();  PingData originalAckData=new PingData(target,data.getTo());  Message originalAckMessage=Message.withData(originalAckData).qualifier(PING_ACK).correlationId(correlationId).build();  LOGGER.trace("Resend transit PingAck to {}",target.address());  transport.send(target.address(),originalAckMessage);}  }
class C{  public boolean isEmpty(){  if (lastBatch != null) {    if (!lastBatch.isEmpty()) {      return false;    }  }  return currentBatch.isEmpty();}  }
class C{  public ServiceCall<Customization> createCustomization(String name,SpeechModel baseModel,String description){  Validator.notNull(name,"name cannot be null");  Validator.notNull(baseModel,"baseModel cannot be null");  RequestBuilder requestBuilder=RequestBuilder.post(PATH_CUSTOMIZATIONS);  Customization newCustomization=new Customization();  newCustomization.setBaseModelName(baseModel.getName());  newCustomization.setDescription(description);  newCustomization.setName(name);  requestBuilder.bodyContent(GSON.toJson(newCustomization),HttpMediaType.APPLICATION_JSON);  return createServiceCall(requestBuilder.build(),ResponseConverterUtils.getObject(Customization.class));}  }
class C{  protected boolean isSystemConfigExisted(){  return SingletonRegistry.INSTANCE.containsSingleton(SystemConfig.HERON_SYSTEM_CONFIG);}  }
class C{  public static Resource copyInstance(ResourceNode source,String destinationKey,ResourceNode destination,Directory directory) throws ResourceException {  Resource copy=(Resource)ReflectUtils.clone(source.getResource());  if (copy.getType() != destination.getResource().getChildType()) {    throw new ResourceException(String.format("cannot create a copy of type '%s' in destination for type '%s'",copy.getType(),destination.getResource().getChildType()));  }  copy.setName(destinationKey);  return copy;}  }
class C{  public AttemptAndTimeBoundedExponentialBackOff(int maximumNumberOfAttempts,long initialIntervalMillis,long maximumTotalWaitTimeMillis,ResetPolicy resetPolicy){  this(maximumNumberOfAttempts,initialIntervalMillis,maximumTotalWaitTimeMillis,resetPolicy,NanoClock.SYSTEM);}  }
class C{  public void deactivateLocalization(final String nickname){  this.services.remove(nickname);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case DomPackage.STRUCTURED_TEXT__ROOT_ELEMENT:    return getRootElement();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public PreparedPolygonContainsProperly(PreparedPolygon prepPoly){  super(prepPoly);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  if (instruction.getMnemonic().startsWith("QASX")) {    TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"QASX");    translateAll(environment,instruction,"QASX",instructions);  } else {    TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"QADDSUBX");    translateAll(environment,instruction,"QADDSUBX",instructions);  }}  }
class C{  protected PhysicalConstants(){}  }
class C{  public IntMap(int initialCapacity){  int capacity;  for (capacity=16; capacity < 2 * initialCapacity; capacity*=2) {  }  _entries=new Item[capacity];  _mask=capacity - 1;}  }
class C{  public Vector subtract(Vector other){  return new Vector(x - other.x,y - other.y,z - other.z);}  }
class C{  void expandAll(boolean expand){  groups.keySet().forEach(null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:06.769 -0500",hash_original_method="33B2EE0D613829F3E6CC4153F4B973DF",hash_generated_method="0DD6982524DC9E51BEE039C819E1E1B3") public Reader retrieveArticleHeader(int articleNumber) throws IOException {  return retrieveArticleHeader(articleNumber,null);}  }
class C{  public static int writeShort(byte[] array,int offset,int v){  array[offset + 0]=(byte)(v >>> 8);  array[offset + 1]=(byte)(v >>> 0);  return SIZE_SHORT;}  }
class C{  @Override public boolean isEnabled(){  return mIsEnabled;}  }
class C{  public void caretUpdate(CaretEvent e){  log.finest("Dot=" + e.getDot() + ",Last="+ m_lastDot+ ", Mark="+ e.getMark());  if (e.getDot() != e.getMark()) {    m_lastDot=e.getDot();    return;  }  if (e.getDot() + 1 > m_mask.length() || m_mask.charAt(e.getDot()) != DELIMITER) {    m_lastDot=e.getDot();    return;  }  int newDot=-1;  if (m_lastDot > e.getDot())   newDot=e.getDot() - 1; else   newDot=e.getDot() + 1;  if (e.getDot() == 0)   newDot=1; else   if (e.getDot() == m_mask.length() - 1)   newDot=e.getDot() - 1;  log.fine("OnFixedChar=" + m_mask.charAt(e.getDot()) + ", newDot="+ newDot+ ", last="+ m_lastDot);  m_lastDot=e.getDot();  if (newDot >= 0 && newDot < getText().length())   m_tc.setCaretPosition(newDot);}  }
class C{  @GET("paginationContextAvailable") public void paginationContextAvailable(PaginationContext pageContext,Payload<Dog> payload){  payload.set(new Dog("Milou","Fox terrier"));}  }
class C{  public PlaylistDataSource(PlayMusicManager playMusicManager){  super(playMusicManager);}  }
class C{  public List<OozieNode> rearrangeOozieNodes(Map<String,OozieNode> oozieNodeMap){  this.oozieNodeMap=oozieNodeMap;  addToNode(oozieNodeMap.get("fork-205"));  addToNode(oozieNodeMap.get("term-step-206"));  return oozieNodeList;}  }
class C{  @Override public String toString(){  StringWriter sw=new StringWriter();  try {    dump(sw);  } catch (  IOException ioe) {    throw new RuntimeException(ioe.getMessage());  }  return sw.toString();}  }
class C{  public String create(){  append("create()");  clear();  List list=list();  if (list != null) {    CustomerBean customer=new CustomerBean();    list.add(customer);    int index=data.getRowIndex();    data.setRowIndex(list.size() - 1);    created.setSelected(true);    data.setRowIndex(index);  }  scroll(list.size());  return (null);}  }
class C{  public ValidateQueryRequest source(BytesReference source){  this.source=source;  return this;}  }
class C{  public SpatialIndex(String shpFilename) throws IOException {  this.shpFileName=shpFilename;  if (logger.isLoggable(Level.FINE)) {    logger.fine("SpatialIndex(" + shpFilename + ");");  }}  }
class C{  @ObjectiveCName("changeGroupNotificationsEnabled:") public void changeGroupNotificationsEnabled(boolean val){  modules.getSettingsModule().changeGroupNotificationsEnabled(val);}  }
class C{  @Override public NotificationChain eInverseAdd(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case ImPackage.PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION_IM__REWIRED_TARGET:    if (rewiredTarget != null)     msgs=((InternalEObject)rewiredTarget).eInverseRemove(this,ImPackage.SYMBOL_TABLE_ENTRY__REFERENCING_ELEMENTS,SymbolTableEntry.class,msgs);  return basicSetRewiredTarget((SymbolTableEntry)otherEnd,msgs);}return super.eInverseAdd(otherEnd,featureID,msgs);}  }
class C{  public static String validateCreditCardNumber(String creditCardNumber,String creditCardType){  if (creditCardNumber == null || creditCardType == null)   return "CreditCardNumberError";  String ccStartList="";  String ccLengthList="";  if (creditCardType.equals(X_C_Payment.CREDITCARDTYPE_MasterCard)) {    ccStartList="51,52,53,54,55";    ccLengthList="16";  } else   if (creditCardType.equals(X_C_Payment.CREDITCARDTYPE_Visa)) {    ccStartList="4";    ccLengthList="13,16";  } else   if (creditCardType.equals(X_C_Payment.CREDITCARDTYPE_Amex)) {    ccStartList="34,37";    ccLengthList="15";  } else   if (creditCardType.equals(X_C_Payment.CREDITCARDTYPE_Discover)) {    ccStartList="6011";    ccLengthList="16";  } else   if (creditCardType.equals(X_C_Payment.CREDITCARDTYPE_Diners)) {    ccStartList="300,301,302,303,304,305,36,38";    ccLengthList="14";  } else {    ccStartList="2014,2149";    ccLengthList="15";    ccStartList+=",3088,3096,3112,3158,3337,3528";    ccLengthList+=",16";    ccStartList+=",2131,1800";    ccLengthList+=",15";  }  String ccNumber=checkNumeric(creditCardNumber);  int ccLength=ccNumber.length();  boolean ccLengthOK=false;  StringTokenizer st=new StringTokenizer(ccLengthList,",",false);  while (st.hasMoreTokens() && !ccLengthOK) {    int l=Integer.parseInt(st.nextToken());    if (ccLength == l)     ccLengthOK=true;  }  if (!ccLengthOK) {    s_log.fine("validateCreditCardNumber Length=" + ccLength + " <> "+ ccLengthList);    return "CreditCardNumberError";  }  boolean ccIdentified=false;  st=new StringTokenizer(ccStartList,",",false);  while (st.hasMoreTokens() && !ccIdentified) {    if (ccNumber.startsWith(st.nextToken()))     ccIdentified=true;  }  if (!ccIdentified)   s_log.fine("validateCreditCardNumber Type=" + creditCardType + " <> "+ ccStartList);  String check=validateCreditCardNumber(ccNumber);  if (check.length() != 0)   return check;  if (!ccIdentified)   return "CreditCardNumberProblem?";  return "";}  }
class C{  static boolean isCorrectClass(final List<Class<?>> validClasses,final RPObject object){  for (  final Class<?> clazz : validClasses) {    if (clazz.isInstance(object)) {      return true;    }  }  logger.debug("object " + object.getID() + " is not of the correct class. it is "+ object.getClass().getName());  return false;}  }
class C{  public MultiKeyConcurrentHashMap(){  this(DEFAULT_INITIAL_CAPACITY,DEFAULT_LOAD_FACTOR,DEFAULT_SEGMENTS);}  }
class C{  public final int code(){  return this.status;}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getCodeLangs_();}  }
class C{  private boolean handleMessageDuplexInfoReport(LocoNetMessage m){  String gr_name="";  String gr_password="";  int gr_ch;  int gr_id;  int i;  if (getDuplexGroupIdentityMessageType(m) == DuplexGroupMessageType.DUPLEX_GROUP_NAME_ETC_REPORT_MESSAGE) {    gr_name=extractDuplexGroupName(m);    i=(gr_name.length() - 1);    while ((gr_name.charAt(i) == ' ') && (i > 0)) {      if (i > 0) {        gr_name=gr_name.substring(0,i);      }      i--;    }    gr_password=extractDuplexGroupPassword(m);    gr_ch=extractDuplexGroupChannel(m);    gr_id=extractDuplexGroupID(m);    if (awaitingGroupReadReport == true) {      awaitingGroupReadReport=false;      acceptedGroupName=gr_name;      acceptedGroupChannel=Integer.toString(gr_ch,LnDplxGrpInfoImplConstants.GENERAL_DECIMAL_RADIX);      acceptedGroupPassword=gr_password;      acceptedGroupId=Integer.toString(gr_id,LnDplxGrpInfoImplConstants.GENERAL_DECIMAL_RADIX);      thisone.firePropertyChange(DPLX_PC_NAME_UPDATE,false,true);      thisone.firePropertyChange(DPLX_PC_CHANNEL_UPDATE,false,true);      thisone.firePropertyChange(DPLX_PC_PASSWORD_UPDATE,false,true);      thisone.firePropertyChange(DPLX_PC_ID_UPDATE,false,true);      thisone.firePropertyChange(DPLX_PC_NAME_VALIDITY,false,true);      thisone.firePropertyChange(DPLX_PC_CHANNEL_VALIDITY,false,true);      thisone.firePropertyChange(DPLX_PC_PASSWORD_VALIDITY,false,true);      thisone.firePropertyChange(DPLX_PC_ID_VALIDITY,false,true);      thisone.firePropertyChange(DPLX_PC_STAT_LN_UPDATE,""," ");    } else {      String c="" + Integer.toString(gr_ch,LnDplxGrpInfoImplConstants.GENERAL_DECIMAL_RADIX);      String p="" + gr_password;      String d="" + Integer.toString(gr_id,LnDplxGrpInfoImplConstants.GENERAL_DECIMAL_RADIX);      if ((!acceptedGroupName.equals(gr_name)) || (!acceptedGroupChannel.equals(c)) || (!acceptedGroupPassword.equals(p))|| (!acceptedGroupId.equals(d))) {        thisone.firePropertyChange(DPLX_PC_STAT_LN_UPDATE," ","ErrorGroupMismatch");      }    }    return true;  }  return false;}  }
class C{  public PI addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  private void initializeLiveAttributes(){  className=createLiveAnimatedString(null,SVG_CLASS_ATTRIBUTE);}  }
class C{  public Ping ping() throws IOException {  Ping ping=new Ping();  int pingId;synchronized (this) {    if (shutdown) {      throw new IOException("shutdown");    }    pingId=nextPingId;    nextPingId+=2;    if (pings == null)     pings=new HashMap<Integer,Ping>();    pings.put(pingId,ping);  }  writePing(false,pingId,0x4f4b6f6b,ping);  return ping;}  }
class C{  public void refreshRemoveDocument(int id) throws Exception {  m_documents.refreshRemoveNode(id);}  }
class C{  public ClosedWatchServiceException(){}  }
class C{  @ExceptionHandler(NoResultException.class) public ResponseEntity<Exception> handleNoResultException(final NoResultException nre){  logger.error("> handleNoResultException");  logger.error("- NoResultException: ",nre);  logger.error("< handleNoResultException");  return new ResponseEntity<Exception>(HttpStatus.NOT_FOUND);}  }
class C{  protected ArrayPaddingImpl(){  super();}  }
class C{  private boolean calculatePLV_VB(){  if (m_M_Product_ID == 0 || m_M_PriceList_Version_ID == 0)   return false;  String sql="SELECT pp.PriceStd," + " pp.PriceList," + " pp.PriceLimit,"+ " p.C_UOM_ID,pv.ValidFrom,pl.C_Currency_ID,p.M_Product_Category_ID,"+ " pl.EnforcePriceLimit, pl.IsTaxIncluded "+ "FROM M_Product p"+ " INNER JOIN M_ProductPriceVendorBreak pp ON (p.M_Product_ID=pp.M_Product_ID)"+ " INNER JOIN  M_PriceList_Version pv ON (pp.M_PriceList_Version_ID=pv.M_PriceList_Version_ID)"+ " INNER JOIN M_Pricelist pl ON (pv.M_PriceList_ID=pl.M_PriceList_ID) "+ "WHERE pv.IsActive='Y'"+ " AND pp.IsActive='Y'"+ " AND p.M_Product_ID=?"+ " AND pv.M_PriceList_Version_ID=?"+ " AND pp.C_BPartner_ID=?"+ " AND ?>=pp.BreakValue"+ " ORDER BY BreakValue DESC";  m_calculated=false;  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,m_M_Product_ID);    pstmt.setInt(2,m_M_PriceList_Version_ID);    pstmt.setInt(3,m_C_BPartner_ID);    pstmt.setBigDecimal(4,m_Qty);    rs=pstmt.executeQuery();    if (rs.next()) {      m_PriceStd=rs.getBigDecimal(1);      if (rs.wasNull())       m_PriceStd=Env.ZERO;      m_PriceList=rs.getBigDecimal(2);      if (rs.wasNull())       m_PriceList=Env.ZERO;      m_PriceLimit=rs.getBigDecimal(3);      if (rs.wasNull())       m_PriceLimit=Env.ZERO;      m_C_UOM_ID=rs.getInt(4);      m_C_Currency_ID=rs.getInt(6);      m_M_Product_Category_ID=rs.getInt(7);      m_enforcePriceLimit="Y".equals(rs.getString(8));      m_isTaxIncluded="Y".equals(rs.getString(9));      log.fine("M_PriceList_Version_ID=" + m_M_PriceList_Version_ID + " - "+ m_PriceStd);      m_calculated=true;    }  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);    m_calculated=false;  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  return m_calculated;}  }
class C{  public void removeOrientationListener(ActionListener l){  if (orientationListener == null) {    return;  }  orientationListener.removeListener(l);}  }
class C{  protected void nodeAdded(Node n){}  }
class C{  public void close() throws IOException {  try {    if (bufferedBlockCipher != null) {      byte[] buf=new byte[bufferedBlockCipher.getOutputSize(0)];      int outLen=bufferedBlockCipher.doFinal(buf,0);      if (outLen != 0) {        out.write(buf,0,outLen);      }    }  } catch (  Exception e) {    throw new IOException("Error closing stream: " + e.toString());  }  flush();  super.close();}  }
class C{  private void readJarFile(String fileName) throws IOException {  JarEntry je;  JarInputStream jis=new JarInputStream(new FileInputStream(fileName));  while ((je=jis.getNextJarEntry()) != null) {    String jarName=je.getName();    if (jarName.endsWith(".class"))     loadClassBytes(jis,jarName);    jis.closeEntry();  }}  }
class C{  private static byte positionToByte(int position){  return (byte)(position % 0xff);}  }
class C{  public HunspellStemFilter(TokenStream input,Dictionary dictionary,boolean dedup,boolean longestOnly){  super(input);  this.dedup=dedup && longestOnly == false;  this.stemmer=new Stemmer(dictionary);  this.longestOnly=longestOnly;}  }
class C{  private void searchHex(){  final String text=m_inputField.getText();  if ((text.length() % 2) != 0) {    m_inputField.setBackground(Color.RED);    return;  }  m_inputField.setBackground(Color.WHITE);  final byte[] data=new byte[text.length() / 2];  for (int i=0; i < text.length(); i+=2) {    final String substr=text.substring(i,i + 2);    data[i / 2]=(byte)(int)Integer.valueOf(substr,16);  }  search(data);}  }
class C{  public String toString(){  long offset=-1;  try {    offset=getOffset();  } catch (  IOException e) {  }  StringBuffer sb=new StringBuffer();  sb.append(this.getClass().getSimpleName());  sb.append(" file=").append(file.getName());  sb.append(" buffersize=").append(bufferSize);  sb.append(" offset=").append(offset);  return sb.toString();}  }
class C{  public SubscriptionAlreadyExistsException(String message){  super(message);}  }
class C{  @Override public void closeOnCompletion(){}  }
class C{  public void variableAssignment(VariableReference varRef,VariableReference newAssignment){  for (  Map.Entry<String,VariableReference> entry : currentMethodVars.entrySet()) {    if (entry.getValue() == varRef) {      currentMethodVars.put(entry.getKey(),newAssignment);      return;    }  }  for (  Map.Entry<String,VariableReference> entry : fieldVars.entrySet()) {    if (entry.getValue() == varRef) {      fieldVars.put(entry.getKey(),newAssignment);      return;    }  }  if (parent != null) {    for (    Map.Entry<String,VariableReference> entry : parent.fieldVars.entrySet()) {      if (entry.getValue() == varRef) {        parent.fieldVars.put(entry.getKey(),newAssignment);        return;      }    }  }  throw new RuntimeException("Assignment " + varRef + " not found!");}  }
class C{  public static void main(String[] args){  for (int i=0; i < 100; i++) {    System.out.println(i + ": " + estimate(19));  }}  }
class C{  @Override public void reset(){  foundServices.clear();  stop();}  }
class C{  public X509Principal(boolean reverse,Hashtable lookUp,String dirName){  super(reverse,lookUp,dirName);}  }
class C{  private String createColumnMethods(StringBuffer mandatory,String columnName,boolean isUpdateable,boolean isMandatory,int displayType,int AD_Reference_ID,int fieldLength,String defaultValue,String ValueMin,String ValueMax,String VFormat,String Callout,String Name,String Description,boolean virtualColumn,boolean IsEncrypted,boolean IsKey,int AD_Table_ID){  Class<?> clazz=getClass(columnName,displayType,AD_Reference_ID);  String dataType=getDataTypeName(clazz,displayType);  if (defaultValue == null)   defaultValue="";  StringBuffer sb=new StringBuffer();  if (isGenerateSetter(columnName)) {    generateJavaComment("Set",Name,Description,sb);    sb.append("\tpublic void set").append(columnName).append(" (").append(dataType).append(" ").append(columnName).append(");");  }  generateJavaComment("Get",Name,Description,sb);  sb.append("\tpublic ").append(dataType);  if (clazz.equals(Boolean.class)) {    sb.append(" is");    if (columnName.toLowerCase().startsWith("is"))     sb.append(columnName.substring(2)); else     sb.append(columnName);  } else   sb.append(" get").append(columnName);  sb.append("();");  if (isGenerateModelGetter(columnName) && DisplayType.isID(displayType) && !IsKey) {    String fieldName=getFieldName(columnName);    String referenceClassName=getReferenceClassName(AD_Table_ID,columnName,displayType,AD_Reference_ID);    if (fieldName != null && referenceClassName != null) {      sb.append("\n").append("\tpublic " + referenceClassName + " get").append(fieldName).append("() throws RuntimeException;");    }  }  addImportClass(clazz);  return sb.toString();}  }
class C{  @SuppressWarnings("unused") private AbstractHttpClient(){  this("");}  }
class C{  public void writeFacilityAttributes(String file){  ObjectAttributesXmlWriter ow=new ObjectAttributesXmlWriter(this.amenityAttributes);  ow.writeFile(file);}  }
class C{  private static String createPtrServiceQuery(String instanceName,String serviceType){  StringBuffer sb=new StringBuffer();  sb.append("bonjour ");  sb.append(createRequest(serviceType + ".local.",DNS_TYPE_PTR,VERSION_1));  sb.append(" ");  byte[] data=instanceName.getBytes();  sb.append(String.format("%02x",data.length));  sb.append(WifiP2pServiceInfo.bin2HexStr(data));  sb.append("c027");  return sb.toString();}  }
class C{  public int removeAllSignatures(Document document){  NodeList nl=getSignatures(document);  int nrSig=nl.getLength();  for (int i=0; i < nrSig; i++) {    Node parent=nl.item(0).getParentNode();    parent.removeChild(nl.item(0));  }  removeEmptyTags(document);  document.normalize();  return nrSig;}  }
class C{  @Inline @Entrypoint public static Object objectArrayRead(Object[] ref,int index){  if (NEEDS_OBJECT_GC_READ_BARRIER) {    ObjectReference array=ObjectReference.fromObject(ref);    Offset offset=Offset.fromIntZeroExtend(index << LOG_BYTES_IN_ADDRESS);    return Selected.Mutator.get().objectReferenceRead(array,array.toAddress().plus(offset),offset.toWord(),Word.zero(),ARRAY_ELEMENT).toObject();  } else   if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return null;}  }
class C{  void beginDestroyRegion(LocalRegion region,DiskRegion dr){  if (dr.isBackup()) {    getDiskInitFile().beginDestroyRegion(dr);  }}  }
class C{  public ContainerAllocationPolicySimple(){  super();  setFreePes(new ArrayList<Integer>());  setContainerVmTable(new HashMap<String,ContainerVm>());  setUsedPes(new HashMap<String,Integer>());}  }
class C{  private void createEntriesK1andK2(){  Region r1=getCache().getRegion(Region.SEPARATOR + REGION_NAME);  assertNotNull(r1);  if (!r1.containsKey("key1")) {    r1.put("key1","key-1");  }  if (!r1.containsKey("key2")) {    r1.put("key2","key-2");  }  assertEquals(r1.get("key1"),"key-1");  if (r1.getAttributes().getPartitionAttributes() == null) {    assertEquals(r1.getEntry("key1").getValue(),"key-1");    assertEquals(r1.getEntry("key2").getValue(),"key-2");  } else {    assertEquals(r1.get("key1"),"key-1");    assertEquals(r1.get("key2"),"key-2");  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputFile;  int progress;  int i, n;  int numFeatures;  int oneHundredthTotal;  ShapeType shapeType, outputShapeType;  GeometryFactory factory=new GeometryFactory();  double distTolerance=10;  boolean loseNoFeatures=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputFile=args[1];  distTolerance=Double.parseDouble(args[2]);  loseNoFeatures=Boolean.parseBoolean(args[3]);  if ((inputFile == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    shapeType=input.getShapeType();    if (shapeType.getBaseType() != ShapeType.POLYGON && shapeType.getBaseType() != ShapeType.POLYLINE) {      showFeedback("This tool only works with shapefiles of a polygon or line base shape type.");      return;    }    if (shapeType.getBaseType() == ShapeType.POLYGON) {      outputShapeType=ShapeType.POLYGON;    } else     if (shapeType.getBaseType() == ShapeType.POLYLINE) {      outputShapeType=ShapeType.POLYLINE;    } else {      showFeedback("This tool only works with shapefiles of a polygon or line base shape type.");      return;    }    int numOutputFields=input.getAttributeTable().getFieldCount() + 1;    int numInputFields=input.getAttributeTable().getFieldCount();    DBFField[] inputFields=input.getAttributeTable().getAllFields();    DBFField fields[]=new DBFField[numOutputFields];    fields[0]=new DBFField();    fields[0].setName("PARENT_ID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    System.arraycopy(inputFields,0,fields,1,numInputFields);    ShapeFile output=new ShapeFile(outputFile,outputShapeType,fields);    output.setProjectionStringFromOtherShapefile(input);    numFeatures=input.getNumberOfRecords();    oneHundredthTotal=numFeatures / 100;    n=0;    progress=0;    com.vividsolutions.jts.geom.Geometry[] recJTS=null;    int recordNum;    for (    ShapeFileRecord record : input.records) {      recordNum=record.getRecordNumber();      Object[] attData=input.getAttributeTable().getRecord(recordNum - 1);      recJTS=record.getGeometry().getJTSGeometries();      ArrayList<com.vividsolutions.jts.geom.Geometry> geomList=new ArrayList<>();      for (int a=0; a < recJTS.length; a++) {        geomList.add(recJTS[a]);      }      DouglasPeuckerSimplifier dps=new DouglasPeuckerSimplifier(factory.buildGeometry(geomList));      dps.setDistanceTolerance(distTolerance);      com.vividsolutions.jts.geom.Geometry outputGeom=dps.getResultGeometry();      if (outputGeom.isEmpty() && loseNoFeatures) {        outputGeom=factory.buildGeometry(geomList);      }      if (!outputGeom.isEmpty()) {        for (int a=0; a < outputGeom.getNumGeometries(); a++) {          com.vividsolutions.jts.geom.Geometry g=outputGeom.getGeometryN(a);          if (g instanceof com.vividsolutions.jts.geom.Polygon && !g.isEmpty()) {            com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)g;            ArrayList<ShapefilePoint> pnts=new ArrayList<>();            int[] parts=new int[p.getNumInteriorRing() + 1];            Coordinate[] buffCoords=p.getExteriorRing().getCoordinates();            if (!Topology.isLineClosed(buffCoords)) {              System.out.println("Exterior ring not closed.");            }            if (Topology.isClockwisePolygon(buffCoords)) {              for (i=0; i < buffCoords.length; i++) {                pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));              }            } else {              for (i=buffCoords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));              }            }            for (int b=0; b < p.getNumInteriorRing(); b++) {              parts[b + 1]=pnts.size();              buffCoords=p.getInteriorRingN(b).getCoordinates();              if (!Topology.isLineClosed(buffCoords)) {                System.out.println("Interior ring not closed.");              }              if (Topology.isClockwisePolygon(buffCoords)) {                for (i=buffCoords.length - 1; i >= 0; i--) {                  pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));                }              } else {                for (i=0; i < buffCoords.length; i++) {                  pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));                }              }            }            PointsList pl=new PointsList(pnts);            whitebox.geospatialfiles.shapefile.Polygon wbPoly=new whitebox.geospatialfiles.shapefile.Polygon(parts,pl.getPointsArray());            Object[] rowData=new Object[numOutputFields];            rowData[0]=new Double(recordNum - 1);            System.arraycopy(attData,0,rowData,1,numInputFields);            output.addRecord(wbPoly,rowData);          } else           if (g instanceof com.vividsolutions.jts.geom.LineString && !g.isEmpty()) {            LineString ls=(LineString)g;            ArrayList<ShapefilePoint> pnts=new ArrayList<>();            int[] parts={0};            Coordinate[] coords=ls.getCoordinates();            for (i=0; i < coords.length; i++) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }            PointsList pl=new PointsList(pnts);            whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());            Object[] rowData=new Object[numOutputFields];            rowData[0]=new Double(recordNum - 1);            System.arraycopy(attData,0,rowData,1,numInputFields);            output.addRecord(wbGeometry,rowData);          }        }      }      n++;      if (n >= oneHundredthTotal) {        n=0;        if (cancelOp) {          cancelOperation();          return;        }        progress++;        updateProgress(progress);      }    }    output.write();    updateProgress("Displaying vector: ",0);    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void startDTD(String name,String publicId,String systemId) throws org.xml.sax.SAXException {}  }
class C{  public T caseDocumentedElement(DocumentedElement object){  return null;}  }
class C{  public ByteBuffer(int initialSize){  elems=new byte[initialSize];  length=0;}  }
class C{  @Override public void useDefaultVisual(){  m_visual.loadIcons(BeanVisual.ICON_PATH + "Sorter.gif",BeanVisual.ICON_PATH + "Sorter_animated.gif");  m_visual.setText("Sorter");}  }
class C{  public static Vector3 azElToPoint(double az,double el,Vector3 result){  if (result == null) {    result=new Vector3();  }  Matrix3 mat=Matrix3.fetchTempInstance();  mat.fromAngleAxis(az,Vector3.NEG_UNIT_Z);  Matrix3 mat2=Matrix3.fetchTempInstance();  mat2.fromAngleAxis(el,Vector3.UNIT_X);  mat.multiplyLocal(mat2);  result.set(Vector3.UNIT_Y);  mat.applyPost(result,result);  Matrix3.releaseTempInstance(mat);  Matrix3.releaseTempInstance(mat2);  return (result);}  }
class C{  public static boolean isMagicBranch(String refName){  return refName.startsWith(NEW_DRAFT_CHANGE) || refName.startsWith(NEW_PUBLISH_CHANGE) || refName.startsWith(NEW_CHANGE);}  }
class C{  private MobModifier createMobModifiers(EntityLivingBase entity){  int number=2 + entity.worldObj.rand.nextInt(3);  ArrayList<Class<? extends MobModifier>> possibleMods=Lists.newArrayList(mobMods);  if (entity.worldObj.rand.nextInt(ultraRarity) == 0) {    number+=3 + entity.worldObj.rand.nextInt(2);    if (entity.worldObj.rand.nextInt(infernoRarity) == 0) {      number+=3 + entity.worldObj.rand.nextInt(2);    }  }  MobModifier lastMod=null;  while (number > 0 && !possibleMods.isEmpty()) {    int index=entity.worldObj.rand.nextInt(possibleMods.size());    MobModifier nextMod=null;    try {      if (lastMod == null) {        nextMod=(MobModifier)possibleMods.get(index).getConstructor(new Class[]{}).newInstance();      } else {        nextMod=(MobModifier)possibleMods.get(index).getConstructor(new Class[]{MobModifier.class}).newInstance(lastMod);      }    } catch (    Exception e) {      e.printStackTrace();    }    boolean allowed=true;    if (nextMod != null && nextMod.getBlackListMobClasses() != null) {      for (      Class<?> cl : nextMod.getBlackListMobClasses()) {        if (entity.getClass().isAssignableFrom(cl)) {          allowed=false;          break;        }      }    }    if (lastMod != null) {      if (lastMod.getModsNotToMixWith() != null) {        for (        Class<?> cl : lastMod.getModsNotToMixWith()) {          if (lastMod.containsModifierClass(cl)) {            allowed=false;            break;          }        }      }    }    possibleMods.remove(index);    if (allowed) {      lastMod=nextMod;      number--;    }  }  return lastMod;}  }
class C{  public boolean isAllSolutionSets(){  return getProperty(Annotations.ALL_SOLUTION_SETS,Annotations.DEFAULT_ALL_SOLUTION_SETS);}  }
class C{  @Produces(value="application/json") @Timed(name="node-deregistration") @Path("{nodeId}") @DELETE public NodeDeRegistrationResponse deregisterNode(@PathParam("nodeId") final String nodeId){  return this.nodeManager.deregisterNode(nodeId);}  }
class C{  public void removeMetric(MetricName name){  final Metric metric=metrics.remove(name);  if (metric != null) {    if (metric instanceof Stoppable) {      ((Stoppable)metric).stop();    }    notifyMetricRemoved(name);  }}  }
class C{  public boolean canZoom(final boolean zoomIn){  return zoomIn ? viewBox.canZoomIn() : viewBox.canZoomOut();}  }
class C{  public CacheHeader(String key,Entry entry){  this.key=key;  this.size=entry.data.length;  this.etag=entry.etag;  this.serverDate=entry.serverDate;  this.lastModified=entry.lastModified;  this.ttl=entry.ttl;  this.softTtl=entry.softTtl;  this.responseHeaders=entry.responseHeaders;}  }
class C{  public static void hayErrorExcepcion(DocumentoIER dier) throws Excepcion {  if (hayError(dier)) {    InformacionError ie=dier.getInformacionError();    Excepcion e=new Excepcion("el documento tiene un codigo de error: " + ie.getCodigo().get());    e.setCodigo(new Integer(ie.getCodigo().get()).intValue());    e.setDetalle(ie.getDetalle().get());    e.setDescripcion(ie.getDescripcion().get());    throw e;  }}  }
class C{  public static String findNode(){  String path=getNodeExe();  if (path != null && !path.isEmpty() && isExe(path)) {    return path;  }  String winpath=findNodeInPath(System.getenv("PATH"));  if (winpath != null) {    return winpath;  }  String errmsg="Could not find 'node' executable. Please install Node.js (from http://nodejs.org)." + "\nMake sure the path to the node executable is included in your PATH environment variable." + "\nIf you have node installed in a non-standard location, you can either set the environment variable"+ "\nNODE_EXE or the JVM system property '" + Constants.PROP_CEYLON_EXTCMD_NODE + "' with the full path to the node executable.";  throw new CeylonRunJsException(errmsg);}  }
class C{  public synchronized void removeListener(Callback listener){  BetterWeakReference<Callback> r=new BetterWeakReference<Callback>(listener);  if (mListenersUniversal.contains(r)) {    mListenersUniversal.remove(r);  }}  }
class C{  boolean isVariableFieldWidth(){  return variableFieldWidth;}  }
class C{  public final void addTransition(long fp,int tidx,int slen,int alen,final BitVector acts,final int actsOffset,final int allocationHint){  if (acts != null) {    int pos=slen + alen * this.succSize();    for (int i=0; i < alen; i++) {      if (acts.get(actsOffset + i)) {        this.checks.set(pos + i);      }    }  }  if (this.offset == NO_FREE_SLOTS) {    this.allocate(Math.max(allocationHint,1));  }  this.nnodes[this.offset]=(int)(fp >>> 32);  this.nnodes[this.offset + 1]=(int)(fp & 0xFFFFFFFFL);  this.nnodes[this.offset + 2]=tidx;  this.offset=this.offset + NNODE_RECORD_SIZE;  if (this.offset == this.nnodes.length) {    this.offset=NO_FREE_SLOTS;  }}  }
class C{  private long checkZone(String MGRSString){  int i=0;  int j=0;  int num_digits=0;  long error_code=MGRS_NO_ERROR;  while (i < MGRSString.length() && MGRSString.charAt(i) == ' ') {    i++;  }  j=i;  while (i < MGRSString.length() && Character.isDigit(MGRSString.charAt(i))) {    i++;  }  num_digits=i - j;  if (num_digits > 2)   error_code|=MGRS_STRING_ERROR; else   if (num_digits <= 0)   error_code|=MGRS_NOZONE_WARNING;  return error_code;}  }
class C{  public static String trimTrailingCharacter(String str,char trailingCharacter){  if (!hasLength(str)) {    return str;  }  StringBuilder sb=new StringBuilder(str);  while (sb.length() > 0 && sb.charAt(sb.length() - 1) == trailingCharacter) {    sb.deleteCharAt(sb.length() - 1);  }  return sb.toString();}  }
class C{  public ValidateException(){  super(422);}  }
class C{  public int lastIndexOfFromTo(double element,int from,int to){  if (size == 0)   return -1;  checkRangeFromTo(from,to,size);  double[] theElements=elements;  for (int i=to; i >= from; i--) {    if (element == theElements[i]) {      return i;    }  }  return -1;}  }
class C{  public boolean visitExtensionElement(ElemExtensionCall elem){  return true;}  }
class C{  void push(final WindowInfoImpl info){  LOG.assertTrue(info.isDocked());  LOG.assertTrue(!info.isAutoHide());  myStack.push(info.copy());}  }
class C{  public final void writeByte(int v) throws IOException {  write(v);}  }
class C{  public ClientSocket openIfHeartbeatActive(){  if (_state.isClosed()) {    return null;  }  if (!_isHeartbeatActive && _isHeartbeatServer) {    return null;  }  ClientSocket stream=openRecycle();  if (stream != null)   return stream;  return connect();}  }
class C{  public Expression copyInline(Context ctx){  return (Expression)clone();}  }
class C{  public static JBossWebXml parseJBossWebXml(InputStream theInput) throws IOException, JDOMException {  return (JBossWebXml)JBossWebXmlType.getInstance().getDescriptorIo().parseXml(theInput);}  }
class C{  public JSONObject accumulate(String key,Object value) throws JSONException {  testValidity(value);  Object o=opt(key);  if (o == null) {    put(key,value instanceof JSONArray ? new JSONArray().put(value) : value);  } else   if (o instanceof JSONArray) {    ((JSONArray)o).put(value);  } else {    put(key,new JSONArray().put(o).put(value));  }  return this;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void detachMirrorFromLocalVirtualVolume(String virtualVolumeName,String mirrorDeviceName,boolean discard) throws VPlexApiException {  s_logger.info("Request to detach mirror {} from a virtual volume {}",mirrorDeviceName,virtualVolumeName);  ClientResponse response=null;  try {    VPlexApiDiscoveryManager discoveryMgr=_vplexApiClient.getDiscoveryManager();    VPlexVirtualVolumeInfo virtualVolumeInfo=findVirtualVolumeAndUpdateInfo(virtualVolumeName,discoveryMgr);    String sourceDeviceName=virtualVolumeInfo.getSupportingDevice();    VPlexDeviceInfo sourceDeviceInfo=discoveryMgr.findLocalDevice(sourceDeviceName);    if (sourceDeviceInfo == null) {      throw VPlexApiException.exceptions.cantFindLocalDeviceForVolume(virtualVolumeName);    }    String mirrorDevicePath=null;    List<VPlexLocalDeviceComponentInfo> components=discoveryMgr.getLocalDeviceComponents(sourceDeviceInfo);    for (    VPlexLocalDeviceComponentInfo component : components) {      if (component.getName().equals(mirrorDeviceName)) {        mirrorDevicePath=component.getPath();        break;      }    }    if (mirrorDevicePath == null) {      throw VPlexApiException.exceptions.cantFindMirror(mirrorDeviceName,virtualVolumeName);    }    URI requestURI=_vplexApiClient.getBaseURI().resolve(VPlexApiConstants.URI_DEVICE_DETACH_MIRROR);    Map<String,String> argsMap=new HashMap<String,String>();    argsMap.put(VPlexApiConstants.ARG_DASH_D,sourceDeviceInfo.getPath());    argsMap.put(VPlexApiConstants.ARG_DASH_M,mirrorDevicePath);    if (discard) {      argsMap.put(VPlexApiConstants.ARG_DISCARD,"");    }    JSONObject postDataObject=VPlexApiUtils.createPostData(argsMap,true);    s_logger.info("Detach mirror for virtual volume POST data is {}",postDataObject.toString());    response=_vplexApiClient.post(requestURI,postDataObject.toString());    String responseStr=response.getEntity(String.class);    s_logger.info("Detach mirror for virtual volume response is {}",responseStr);    if (response.getStatus() != VPlexApiConstants.SUCCESS_STATUS) {      if (response.getStatus() == VPlexApiConstants.ASYNC_STATUS) {        s_logger.info("Detach mirror for virtual volume is completing asynchrounously");        _vplexApiClient.waitForCompletion(response);      } else {        String cause=VPlexApiUtils.getCauseOfFailureFromResponse(responseStr);        throw VPlexApiException.exceptions.detachMirrorFailureStatus(mirrorDeviceName,virtualVolumeName,String.valueOf(response.getStatus()),cause);      }    }    _vplexApiClient.deviceCollapse(sourceDeviceName,VPlexApiConstants.LOCAL_DEVICE);  } catch (  VPlexApiException vae) {    throw vae;  }catch (  Exception e) {    throw VPlexApiException.exceptions.failedDetachingVPlexVolumeMirror(mirrorDeviceName,virtualVolumeName,e);  } finally {    if (response != null) {      response.close();    }  }}  }
class C{  public ErrorNotification(String userMessage,long seqno,String eventId,Throwable e){  super(e);  this.userMessage=userMessage;  this.seqno=seqno;  this.eventId=eventId;}  }
class C{  public static CommandResult execCommand(String[] commands,boolean isRoot,boolean isNeedResultMsg){  int result=-1;  if (commands == null || commands.length == 0) {    return new CommandResult(result,null,null);  }  Process process=null;  BufferedReader successResult=null;  BufferedReader errorResult=null;  StringBuilder successMsg=null;  StringBuilder errorMsg=null;  DataOutputStream os=null;  try {    process=Runtime.getRuntime().exec(isRoot ? COMMAND_SU : COMMAND_SH);    os=new DataOutputStream(process.getOutputStream());    for (    String command : commands) {      if (command == null) {        continue;      }      os.write(command.getBytes());      os.writeBytes(COMMAND_LINE_END);      os.flush();    }    os.writeBytes(COMMAND_EXIT);    os.flush();    result=process.waitFor();    if (isNeedResultMsg) {      successMsg=new StringBuilder();      errorMsg=new StringBuilder();      successResult=new BufferedReader(new InputStreamReader(process.getInputStream()));      errorResult=new BufferedReader(new InputStreamReader(process.getErrorStream()));      String s;      while ((s=successResult.readLine()) != null) {        successMsg.append(s);      }      while ((s=errorResult.readLine()) != null) {        errorMsg.append(s);      }    }  } catch (  IOException e) {    e.printStackTrace();  }catch (  Exception e) {    e.printStackTrace();  } finally {    try {      if (os != null) {        os.close();      }      if (successResult != null) {        successResult.close();      }      if (errorResult != null) {        errorResult.close();      }    } catch (    IOException e) {      e.printStackTrace();    }    if (process != null) {      process.destroy();    }  }  return new CommandResult(result,successMsg == null ? null : successMsg.toString(),errorMsg == null ? null : errorMsg.toString());}  }
class C{  public final static boolean osStatsAreAvailable(){  return osStatsAreAvailable;}  }
class C{  private float[] calculateImageIndents(){  mTempMatrix.reset();  mTempMatrix.setRotate(-getCurrentAngle());  float[] unrotatedImageCorners=Arrays.copyOf(mCurrentImageCorners,mCurrentImageCorners.length);  float[] unrotatedCropBoundsCorners=RectUtils.getCornersFromRect(mCropRect);  mTempMatrix.mapPoints(unrotatedImageCorners);  mTempMatrix.mapPoints(unrotatedCropBoundsCorners);  RectF unrotatedImageRect=RectUtils.trapToRect(unrotatedImageCorners);  RectF unrotatedCropRect=RectUtils.trapToRect(unrotatedCropBoundsCorners);  float deltaLeft=unrotatedImageRect.left - unrotatedCropRect.left;  float deltaTop=unrotatedImageRect.top - unrotatedCropRect.top;  float deltaRight=unrotatedImageRect.right - unrotatedCropRect.right;  float deltaBottom=unrotatedImageRect.bottom - unrotatedCropRect.bottom;  float indents[]=new float[4];  indents[0]=(deltaLeft > 0) ? deltaLeft : 0;  indents[1]=(deltaTop > 0) ? deltaTop : 0;  indents[2]=(deltaRight < 0) ? deltaRight : 0;  indents[3]=(deltaBottom < 0) ? deltaBottom : 0;  mTempMatrix.reset();  mTempMatrix.setRotate(getCurrentAngle());  mTempMatrix.mapPoints(indents);  return indents;}  }
class C{  private ValueEncoderMeta deserializeEncoderMeta(byte[] encoderMeta){  ByteArrayInputStream aos=null;  ObjectInputStream objStream=null;  ValueEncoderMeta meta=null;  try {    aos=new ByteArrayInputStream(encoderMeta);    objStream=new ObjectInputStream(aos);    meta=(ValueEncoderMeta)objStream.readObject();  } catch (  ClassNotFoundException e) {    LOGGER.error(e);  }catch (  IOException e) {    CarbonUtil.closeStreams(objStream);  }  return meta;}  }
class C{  public static void addQueryParam(UriBuilder builder,String name,Object value){  if (value != null) {    if (value instanceof List) {      for (      Object item : (List)value) {        builder.queryParam(name,item);      }    } else {      builder.queryParam(name,value);    }  }}  }
class C{  public Builder swipeDismissCallback(SnackbarSwipeDismissCallback callback){  swipeDismissCallback=callback;  return this;}  }
class C{  public void find(Session s,ArrayList<IndexCondition> indexConditions){  Expression filter=tableFilter.getFilterCondition();  if (filter == null) {  }}  }
class C{  private String constructAddLUNQuery(String systemId,List<Path> pathList,String model){  Map<String,Object> attributeMap=new HashMap<String,Object>();  StorageArray array=new StorageArray(systemId);  Add addOp=new Add(HDSConstants.LUN_TARGET);  attributeMap.put(HDSConstants.STORAGEARRAY,array);  attributeMap.put(HDSConstants.ADD,addOp);  attributeMap.put(HDSConstants.MODEL,model);  attributeMap.put(HDSConstants.PATH_LIST,pathList);  return InputXMLGenerationClient.getInputXMLString(HDSConstants.ADD_PATH_TO_HSD_OP,attributeMap,HDSConstants.HITACHI_INPUT_XML_CONTEXT_FILE,HDSConstants.HITACHI_SMOOKS_CONFIG_FILE);}  }
class C{  public static String genDeviceNameByBSSID(String prefix,String BSSID){  System.out.println("genDeviceNameByBSSID BSSID =  " + BSSID);  if (BSSID.length() == 12) {    BSSID=MeshUtil.getRawMacAddress(BSSID);  }  String tail="";  tail+=UpperCase(BSSID.substring(9,11));  tail+=BSSID.substring(12,14).toUpperCase(Locale.US);  tail+=BSSID.substring(15,17).toUpperCase(Locale.US);  return prefix + tail;}  }
class C{  public static byte[] subarray(byte[] buffer,int offset,int length){  byte temp[]=new byte[length];  System.arraycopy(buffer,offset,temp,0,length);  return temp;}  }
class C{  public static Object toGUId(Object o,Object defaultValue){  String str=toString(o,null);  if (str == null)   return defaultValue;  if (!Decision.isGUId(str))   return defaultValue;  return str;}  }
class C{  public void reset(){  digest.reset();  digest.update(inputPad,0,inputPad.length);}  }
class C{  private void trace(){  glUseProgram(computeProgram);  if (mouseDown) {    currRotationAboutY=rotationAboutY + (mouseX - mouseDownX) * 0.01f;  } else {    currRotationAboutY=rotationAboutY;  }  cameraPosition.set((float)sin(-currRotationAboutY) * 3.0f,2.0f,(float)cos(-currRotationAboutY) * 3.0f);  viewMatrix.setLookAt(cameraPosition,cameraLookAt,cameraUp);  if (resetFramebuffer) {    projMatrix.setPerspective((float)Math.toRadians(60.0f),(float)width / height,1f,2f);    resizeFramebufferTexture();    resetFramebuffer=false;  }  projMatrix.invertPerspectiveView(viewMatrix,invViewProjMatrix);  long thisTime=System.nanoTime();  float elapsedSeconds=(thisTime - firstTime) / 1E9f;  glUniform1f(timeUniform,elapsedSeconds);  glUniform3f(eyeUniform,cameraPosition.x,cameraPosition.y,cameraPosition.z);  invViewProjMatrix.transformProject(tmpVector.set(-1,-1,0)).sub(cameraPosition);  glUniform3f(ray00Uniform,tmpVector.x,tmpVector.y,tmpVector.z);  invViewProjMatrix.transformProject(tmpVector.set(-1,1,0)).sub(cameraPosition);  glUniform3f(ray01Uniform,tmpVector.x,tmpVector.y,tmpVector.z);  invViewProjMatrix.transformProject(tmpVector.set(1,-1,0)).sub(cameraPosition);  glUniform3f(ray10Uniform,tmpVector.x,tmpVector.y,tmpVector.z);  invViewProjMatrix.transformProject(tmpVector.set(1,1,0)).sub(cameraPosition);  glUniform3f(ray11Uniform,tmpVector.x,tmpVector.y,tmpVector.z);  glUniform2i(sizeUniform,width,height);  glBindBufferBase(GL_SHADER_STORAGE_BUFFER,boxesSsboBinding,ssbo);  glBindBufferBase(GL_SHADER_STORAGE_BUFFER,outputImageBinding,imageBuffer);  int worksizeX=mathRoundPoT(width);  int worksizeY=mathRoundPoT(height);  glDispatchCompute(worksizeX / workGroupSizeX,worksizeY / workGroupSizeY,1);  glMemoryBarrier(GL_SHADER_STORAGE_BARRIER_BIT);  glBindBufferBase(GL_SHADER_STORAGE_BUFFER,boxesSsboBinding,0);  glBindBufferBase(GL_SHADER_STORAGE_BUFFER,outputImageBinding,0);  glBindTexture(GL_TEXTURE_2D,tex);  glBindBuffer(GL_PIXEL_UNPACK_BUFFER,imageBuffer);  glTexSubImage2D(GL_TEXTURE_2D,0,0,0,width,height,GL_RGBA,GL_FLOAT,0L);  glBindBuffer(GL_PIXEL_UNPACK_BUFFER,0);  glBindTexture(GL_TEXTURE_2D,0);  glUseProgram(0);}  }
class C{  public CallSpec<Void,HttpError> leaveGroup(String groupId){  return Resource.<Void,HttpError>newDeleteSpec(api,"/v1/groups/{group_id}/memberships",false).responseAs(Void.class).pathParam("group_id",groupId).build();}  }
class C{  public void deleteRow() throws SQLException {  throw new UnsupportedOperationException();}  }
class C{  protected void closeStartTag() throws SAXException {  if (m_elemContext.m_startTagOpen) {    try {      if (m_tracer != null)       super.fireStartElem(m_elemContext.m_elementName);      int nAttrs=m_attributes.getLength();      if (nAttrs > 0) {        processAttributes(m_writer,nAttrs);        m_attributes.clear();      }      m_writer.write('>');    } catch (    IOException e) {      throw new SAXException(e);    }    if (m_CdataElems != null)     m_elemContext.m_isCdataSection=isCdataSection();    if (m_doIndent) {      m_isprevtext=false;      m_preserves.push(m_ispreserve);    }  }}  }
class C{  public ObjectFactory(){}  }
class C{  public boolean isAttributeUsed(Attribute attribute){  return getWeight(attribute) != 0.0d;}  }
class C{  public void printStatistics(PrintStream out){  int length=this.length();  int leaves=getNbrOfLeaves();synchronized (out) {    out.print("LENGTH: " + length());    out.print(", MAX DEPTH: " + getDepth());    out.print(", NBR OF BRANCHES: " + getNbrOfBranches());    out.print(", NBR OF LEAVES: " + leaves);    out.print(", AVG LEAVE LENGTH: " + (length + (leaves >> 1)) / leaves);    out.println();  }}  }
class C{  public StreamConsumer(InputStream stream,String charset){  in=new BufferedInputStream(stream);  this.charset=charset;  thread.start();}  }
class C{  public static void markAsUnauthorizedForViewing(UIObject uiObject){  getPermissionsUIHandler().markAsUnauthorizedForViewing(uiObject);}  }
class C{  public EmergencyPhone(){  super();}  }
class C{  public static int arraySize(final int expected,final float f){  final long s=Math.max(2,nextPowerOfTwo((long)Math.ceil(expected / f)));  if (s > (1 << 30))   throw new IllegalArgumentException("Too large (" + expected + " expected elements with load factor "+ f+ ")");  return (int)s;}  }
class C{  @Override protected void finishLine(){  super.finishLine();  addLineNumber();}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.SWITCH_STATEMENT__EXPRESSION:    setExpression((Expression)newValue);  return;case N4JSPackage.SWITCH_STATEMENT__CASES:getCases().clear();getCases().addAll((Collection<? extends AbstractCaseClause>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void testPatientDetailsLoaded_SetsObservationsOnUi(){  List<Obs> allObservations=ImmutableList.of(OBS_1);  Map<String,Obs> recentObservations=ImmutableMap.of(OBS_1.conceptUuid,OBS_1);  when(mMockChartHelper.getObservations(PATIENT_UUID_1)).thenReturn(allObservations);  when(mMockChartHelper.getLatestObservations(PATIENT_UUID_1)).thenReturn(recentObservations);  mController.init();  Patient patient=Patient.builder().build();  mFakeCrudEventBus.post(new ItemFetchedEvent<>(patient));  mFakeHandler.runUntilEmpty();  verify(mMockUi).updateTilesAndGrid(null,recentObservations,allObservations,ImmutableList.<Order>of(),null,null);  verify(mMockUi).updateAdmissionDateAndFirstSymptomsDateUi(null,null);  verify(mMockUi).updateWeightUi(recentObservations);  verify(mMockUi).updateEbolaPcrTestResultUi(recentObservations);  verify(mMockUi).updatePregnancyAndIvStatusUi(recentObservations);}  }
class C{  public long fileSize(final String path){  long size=-1;  try {    size=size(path);  } catch (  final IOException e) {    final entryInfo info=fileInfo(path);    if (info != null) {      size=info.size;    }  }  return size;}  }
class C{  public void clearDomainMarkers(int index){  Integer key=new Integer(index);  if (this.backgroundDomainMarkers != null) {    Collection markers=(Collection)this.backgroundDomainMarkers.get(key);    if (markers != null) {      Iterator iterator=markers.iterator();      while (iterator.hasNext()) {        Marker m=(Marker)iterator.next();        m.removeChangeListener(this);      }      markers.clear();    }  }  if (this.foregroundDomainMarkers != null) {    Collection markers=(Collection)this.foregroundDomainMarkers.get(key);    if (markers != null) {      Iterator iterator=markers.iterator();      while (iterator.hasNext()) {        Marker m=(Marker)iterator.next();        m.removeChangeListener(this);      }      markers.clear();    }  }  fireChangeEvent();}  }
class C{  public boolean hasKilled(final String name){  return hasKilledShared(name) || hasKilledSolo(name);}  }
class C{  public static boolean isPrimitiveType(Type type){  String className=type.getClassName();  if (className.indexOf('.') != -1)   return false;  if ("boolean".equals(className))   return true;  if ("short".equals(className))   return true;  if ("float".equals(className))   return true;  if ("long".equals(className))   return true;  if ("double".equals(className))   return true;  if ("char".equals(className))   return true;  if ("int".equals(className))   return true;  if ("byte".equals(className))   return true;  return false;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public static <E>Set<E> of(){  return ImmutableCollections.setOf();}  }
class C{  @Override public byte[] randomBinaryKey(){  checkIsInMultiOrPipeline();  client.randomKey();  return client.getBinaryBulkReply();}  }
class C{  protected void paintMarginLine(Graphics g,Rectangle visibleRect){  if (textArea.isMarginLineEnabled()) {    g.setColor(textArea.getMarginLineColor());    Insets insets=textArea.getInsets();    int marginLineX=textArea.getMarginLinePixelLocation() + (insets == null ? 0 : insets.left);    g.drawLine(marginLineX,visibleRect.y,marginLineX,visibleRect.y + visibleRect.height);  }}  }
class C{  public static List<String> fileToLines(String filename){  List<String> lines=new LinkedList<String>();  String line="";  BufferedReader in=null;  try {    in=new BufferedReader(new FileReader(filename));    while ((line=in.readLine()) != null) {      lines.add(line);    }  } catch (  IOException e) {    e.printStackTrace();  } finally {    if (in != null) {      try {        in.close();      } catch (      IOException e) {      }    }  }  return lines;}  }
class C{  protected void addResizeRequest(TerminalSize newSize){  latestResizeRequest=newSize;}  }
class C{  public StringLiteralItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public boolean hasEmptyRow(){  if (m_dataVector.size() == 0) {    return false;  }  List<String> dataRow=m_dataVector.get(m_dataVector.size() - 1);  for (  String s : dataRow) {    if (s.length() != 0) {      return false;    }  }  return true;}  }
class C{  public void testGetPrototype() throws Exception {  TestService mockService=control.createMock(TestService.class);  assertSame(mockService.getRequestPrototype(fooDescriptor),FooRequest.getDefaultInstance());  assertSame(mockService.getResponsePrototype(fooDescriptor),FooResponse.getDefaultInstance());  assertSame(mockService.getRequestPrototype(barDescriptor),BarRequest.getDefaultInstance());  assertSame(mockService.getResponsePrototype(barDescriptor),BarResponse.getDefaultInstance());}  }
class C{  public static void main(String[] args) throws Exception {  new SobolAnalysis().start(args);}  }
class C{  public AbstractDataSource(){  useDefaultVisual();  setLayout(new BorderLayout());  add(m_visual,BorderLayout.CENTER);  m_listeners=new Vector<EventListener>();}  }
class C{  public RotationVectorProvider(SensorManager sensorManager){  super(sensorManager);  sensorList.add(sensorManager.getDefaultSensor(Sensor.TYPE_ROTATION_VECTOR));}  }
class C{  @Override public String toString(){  return getTimeStringOrEmptyString();}  }
class C{  public InvalidPreferencesFormatException(String message,Throwable cause){  super(message,cause);}  }
class C{  public static boolean isAffectedByAngelECM(Entity ae,Coords a,Coords b){  return ComputeECM.isAffectedByAngelECM(ae,a,b,null);}  }
class C{  public boolean equals(RE x){  if (this == x) {    return true;  }  if (x == null) {    return false;  }  if (op != x.op) {    return false;  }  if (low != x.low) {    return false;  }  if (high != x.high) {    return false;  }  if (lit == null && x.lit != null) {    return false;  }  if (lit != null && !lit.equals(x.lit)) {    return false;  }  if (unaryArg == null && x.unaryArg != null) {    return false;  }  if (unaryArg != null && !unaryArg.equals(x.unaryArg)) {    return false;  }  if (cats == null && x.cats != null) {    return false;  }  if (cats != null && !cats.equals(x.cats)) {    return false;  }  if (alts == null && x.alts != null) {    return false;  }  if (alts != null && !alts.equals(x.alts)) {    return false;  }  if (meta == null && x.meta != null) {    return false;  }  if (meta != null && !meta.equals(x.meta)) {    return false;  }  if (strOp == null && x.strOp != null) {    return false;  }  if (strOp != null && !strOp.equals(x.strOp)) {    return false;  }  return true;}  }
class C{  public EmailHeader(String name,String value){  this.name=name;  this.value=value;}  }
class C{  private void syncMenu(){  if (bugInstance != null) {    isBugItem.setEnabled(true);    notBugItem.setEnabled(true);    BugProperty isBugProperty=bugInstance.lookupProperty(BugProperty.IS_BUG);    if (isBugProperty == null) {      isBugItem.setSelection(false);      notBugItem.setSelection(false);    } else {      boolean isBug=isBugProperty.getValueAsBoolean();      isBugItem.setSelection(isBug);      notBugItem.setSelection(!isBug);    }  } else {    if (DEBUG) {      System.out.println("No bug instance found, disabling menu items");    }    isBugItem.setEnabled(false);    notBugItem.setEnabled(false);    isBugItem.setSelection(false);    notBugItem.setSelection(false);  }}  }
class C{  private void init(){  setComponentPopupMenu(POPUP);  undoManager=new UndoManager();  undoManager.setLimit(1);  getDocument().addUndoableEditListener(undoManager);  ThemeMediator.fixKeyStrokes(this);}  }
class C{  public Builder withDrawable(final Drawable drawable){  this.drawable=drawable;  return this;}  }
class C{  public void onMap() throws IOException {}  }
class C{  public void visitFieldInsn(int opcode,String owner,String name,String desc){  if (mv != null) {    mv.visitFieldInsn(opcode,owner,name,desc);  }}  }
class C{  public GenericValue currentGenericValue() throws GenericEntityException {  if (closed)   throw new GenericResultSetClosedException("This EntityListIterator has been closed, this operation cannot be performed");  GenericValue value=GenericValue.create(modelEntity);  value.setDelegator(this.delegator);  for (int j=0; j < selectFields.size(); j++) {    ModelField curField=selectFields.get(j);    SqlJdbcUtil.getValue(resultSet,j + 1,curField,value,modelFieldTypeReader);  }  value.synchronizedWithDatasource();  this.haveMadeValue=true;  return value;}  }
class C{  private GoTerm processGoTerm(final StartElement startElement,final XMLEventReader reader) throws XMLStreamException {  final String classificationClass=retrieveAttributeValue(startElement,QNAME_AT_CLASS_TYPE);  if (!GO.equals(classificationClass)) {    return null;  }  final String goAccession=retrieveAttributeValue(startElement,QNAME_AT_ID,true,"/interprodb/interpro/class_list/classification/@id");  String goTerm=null;  String goRoot=null;  boolean stillInClassificationElement=true;  while (stillInClassificationElement) {    XMLEvent currentEvent=reader.nextEvent();    if (currentEvent.isEndElement()) {      final EndElement endElement=currentEvent.asEndElement();      stillInClassificationElement=!EL_CLASSIFICATION.equals(endElement.getName().getLocalPart());    } else     if (currentEvent.isStartElement()) {      final StartElement innerStartElement=currentEvent.asStartElement();      final String elementName=innerStartElement.getName().getLocalPart();      if (EL_CATEGORY.equals(elementName)) {        goRoot=retrieveElementCdata(reader,true,"/interprodb/interpro/class_list/classification/category");      } else       if (EL_DESCRIPTION.equals(elementName)) {        goTerm=retrieveElementCdata(reader,true,"/interprodb/interpro/class_list/classification/description");      }    }  }  if (goTerm == null || goRoot == null) {    throw new IllegalStateException("Found a GO accession " + goAccession + " but no corresponding term and / or root term.");  }  return new GoTerm(goRoot,goAccession,goTerm);}  }
class C{  @Override public void insertUnspillBefore(Instruction s,Register r,byte type,int location){  PhysicalRegisterSet phys=ir.regpool.getPhysicalRegisterSet().asPPC();  Register FP=phys.getFP();  if (type == CONDITION_VALUE) {    Register temp=phys.getTemp();    s.insertBefore(MIR_Load.create(PPC_LWZ,I(temp),A(FP),IC(location + BYTES_IN_ADDRESS - BYTES_IN_INT)));  } else   if (type == DOUBLE_VALUE) {    s.insertBefore(MIR_Load.create(PPC_LFD,D(r),A(FP),IC(location)));  } else   if (type == FLOAT_VALUE) {    s.insertBefore(MIR_Load.create(PPC_LFS,F(r),A(FP),IC(location + BYTES_IN_ADDRESS - BYTES_IN_FLOAT)));  } else   if (type == INT_VALUE) {    s.insertBefore(MIR_Load.create(PPC_LAddr,A(r),A(FP),IC(location)));  } else {    throw new OptimizingCompilerException("insertUnspillBefore","unknown type:" + type);  }}  }
class C{  public boolean checkError(){  return false;}  }
class C{  public void modify(Network network){}  }
class C{  private static boolean partialMatch(String actual,String partial){  if (actual == null || partial == null) {    return actual == null && partial == null;  }  int actualLength=actual.length();  int partialLength=partial.length();  if (actualLength == partialLength) {    return actual.equalsIgnoreCase(partial);  } else   if (actualLength > partialLength) {    if (actual.toLowerCase().endsWith(partial.toLowerCase())) {      return true;    } else     if (partialLength == PARTIAL_WWN_LENGTH && actual.toLowerCase().contains(partial.toLowerCase())) {      return true;    }  }  return false;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ANONYMOUS_CONSTANT_DECLARATION_2__VALUE_1:    return getValue_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public boolean isDirectoryLoader(){  if (_isDirectoryLoader)   return true;  ClassLoader parent=getParent();  if (parent instanceof DynamicClassLoader)   return ((DynamicClassLoader)parent).isDirectoryLoader(); else   return false;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public String completeIt(){  if (!m_justPrepared) {    String status=prepareIt();    if (!DocAction.STATUS_InProgress.equals(status))     return status;  }  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_COMPLETE);  if (m_processMsg != null)   return DocAction.STATUS_Invalid;  if (!isApproved())   approveIt();  log.info("completeIt - " + toString());  MMovement move=new MMovement(getCtx(),getM_Movement_ID(),get_TrxName());  MMovementLineConfirm[] lines=getLines(false);  for (int i=0; i < lines.length; i++) {    MMovementLineConfirm confirm=lines[i];    confirm.set_TrxName(get_TrxName());    if (!confirm.processLine()) {      m_processMsg="ShipLine not saved - " + confirm;      return DocAction.STATUS_Invalid;    }    if (confirm.isFullyConfirmed()) {      confirm.setProcessed(true);      confirm.save(get_TrxName());    } else {      if (createDifferenceDoc(move,confirm)) {        confirm.setProcessed(true);        confirm.save(get_TrxName());      } else {        log.log(Level.SEVERE,"completeIt - Scrapped=" + confirm.getScrappedQty() + " - Difference="+ confirm.getDifferenceQty());        m_processMsg="Differnce Doc not created";        return DocAction.STATUS_Invalid;      }    }  }  if (m_inventoryInfo != null) {    m_processMsg=" @M_Inventory_ID@: " + m_inventoryInfo;    addDescription(Msg.translate(getCtx(),"M_Inventory_ID") + ": " + m_inventoryInfo);  }  String valid=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_COMPLETE);  if (valid != null) {    m_processMsg=valid;    return DocAction.STATUS_Invalid;  }  setProcessed(true);  setDocAction(DOCACTION_Close);  return DocAction.STATUS_Completed;}  }
class C{  private void append(char[] plain) throws Exception {  buffer.append(plain);}  }
class C{  @Override public Map<String,Runnable> handleMenu(final IAgent data,final int x,final int y){  return null;}  }
class C{  public static boolean isBase64(final byte octet){  return octet == PAD_DEFAULT || (octet >= 0 && octet < DECODE_TABLE.length && DECODE_TABLE[octet] != -1);}  }
class C{  public static PatternObserverExpr timerAt(Integer minutes,Integer hours,Integer daysOfMonth,Integer month,Integer daysOfWeek,Integer seconds){  Expression wildcard=new CrontabParameterExpression(ScheduleItemType.WILDCARD);  List<Expression> parameters=new ArrayList<Expression>();  parameters.add(minutes == null ? wildcard : Expressions.constant(minutes));  parameters.add(hours == null ? wildcard : Expressions.constant(hours));  parameters.add(daysOfMonth == null ? wildcard : Expressions.constant(daysOfMonth));  parameters.add(month == null ? wildcard : Expressions.constant(month));  parameters.add(daysOfWeek == null ? wildcard : Expressions.constant(daysOfWeek));  parameters.add(seconds == null ? wildcard : Expressions.constant(seconds));  return new PatternObserverExpr("timer","at",parameters);}  }
class C{  @Override public int doStartTag() throws JspException {  HttpServletRequest request=(HttpServletRequest)pageContext.getRequest();  String serverName=(this.server == null) ? request.getServerName() : this.server;  String baseTag=renderBaseElement(request.getScheme(),serverName,request.getServerPort(),request.getContextPath());  JspWriter out=pageContext.getOut();  try {    out.write(baseTag);  } catch (  IOException e) {    throw new JspException(e);  }  return EVAL_BODY_INCLUDE;}  }
class C{  public static ObjectAnimator ofObject(Object target,String propertyName,TypeEvaluator evaluator,Object... values){  ObjectAnimator anim=new ObjectAnimator(target,propertyName);  anim.setObjectValues(values);  anim.setEvaluator(evaluator);  return anim;}  }
class C{  public String pad(String value,int places,String padCharacter){  StringBuilder sb=new StringBuilder();  sb.append(value);  while (sb.length() < places) {    sb.append(padCharacter);  }  return sb.toString();}  }
class C{  @Override public void writeInvertedSortIndex(List<Integer> invertedSortIndexList) throws IOException {  columnSortInfo.setSort_index_inverted(invertedSortIndexList);}  }
class C{  public static String[] parseAuthorization(final HttpServletRequest request){  final String auth=request.getHeader("Authorization");  logger.debug("Auth header: {}",auth);  if (auth == null || auth.isEmpty()) {    return null;  }  final String[] toks=auth.split("\\s");  if (toks.length < 2) {    return null;  }  if (!"Basic".equalsIgnoreCase(toks[0])) {    return null;  }  final byte[] authData=Base64.getDecoder().decode(toks[1]);  final String authStr=StandardCharsets.ISO_8859_1.decode(ByteBuffer.wrap(authData)).toString();  logger.debug("Auth String: {}",authStr);  final String[] authToks=authStr.split(":",2);  logger.debug("Auth tokens: {}",new Object[]{authToks});  if (authToks.length != 2) {    return null;  }  return authToks;}  }
class C{  public static void divideRowBy(DenseDoubleMatrix2D matrix,long aRow,long fromCol,double value){  long cols=matrix.getColumnCount();  for (long col=fromCol; col < cols; col++) {    matrix.setDouble(matrix.getDouble(aRow,col) / value,aRow,col);  }}  }
class C{  @UiHandler("secondChoiceButton") public void handleSecondChoiceClick(final ClickEvent event){  this.actionDelegate.secondChoiceClicked();}  }
class C{  protected void sequence_Alternative(ISerializationContext context,Sequence semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public MinPQ(Key[] keys){  n=keys.length;  pq=(Key[])new Object[keys.length + 1];  for (int i=0; i < n; i++)   pq[i + 1]=keys[i];  for (int k=n / 2; k >= 1; k--)   sink(k);  assert isMinHeap();}  }
class C{  public static void keyPress(int keyCode){  if (verbose) {    log("keyPress(" + keyCode + ")");  }  Display.getInstance().getCurrent().keyPressed(keyCode);  waitFor(10);}  }
class C{  public static boolean isExistingNode(ASTNode node){  return node.getStartPosition() != -1;}  }
class C{  protected void sequence_HexIntLiteral(ISerializationContext context,HexIntLiteral semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.NUMERIC_LITERAL__VALUE) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.NUMERIC_LITERAL__VALUE));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getHexIntLiteralAccess().getValueHEX_INTTerminalRuleCall_0(),semanticObject.getValue());  feeder.finish();}  }
class C{  private void removeVariableReferences(ASTRewrite rewrite,SimpleName reference,TextEditGroup group){  ASTNode parent=reference.getParent();  while (parent instanceof QualifiedName) {    parent=parent.getParent();  }  if (parent instanceof FieldAccess) {    parent=parent.getParent();  }  int nameParentType=parent.getNodeType();  if (nameParentType == ASTNode.ASSIGNMENT) {    Assignment assignment=(Assignment)parent;    Expression rightHand=assignment.getRightHandSide();    ASTNode assignParent=assignment.getParent();    if (assignParent.getNodeType() == ASTNode.EXPRESSION_STATEMENT && rightHand.getNodeType() != ASTNode.ASSIGNMENT) {      removeVariableWithInitializer(rewrite,rightHand,assignParent,group);    } else {      rewrite.replace(assignment,rewrite.createCopyTarget(rightHand),group);    }  } else   if (nameParentType == ASTNode.SINGLE_VARIABLE_DECLARATION) {    rewrite.remove(parent,group);  } else   if (nameParentType == ASTNode.VARIABLE_DECLARATION_FRAGMENT) {    VariableDeclarationFragment frag=(VariableDeclarationFragment)parent;    ASTNode varDecl=frag.getParent();    List<VariableDeclarationFragment> fragments;    if (varDecl instanceof VariableDeclarationExpression) {      fragments=((VariableDeclarationExpression)varDecl).fragments();    } else     if (varDecl instanceof FieldDeclaration) {      fragments=((FieldDeclaration)varDecl).fragments();    } else {      fragments=((VariableDeclarationStatement)varDecl).fragments();    }    Expression initializer=frag.getInitializer();    ArrayList<Expression> sideEffects=new ArrayList<Expression>();    if (initializer != null) {      initializer.accept(new SideEffectFinder(sideEffects));    }    boolean sideEffectInitializer=sideEffects.size() > 0;    if (fragments.size() == fUnusedNames.length) {      if (fForceRemove) {        rewrite.remove(varDecl,group);        return;      }      if (parent.getParent() instanceof FieldDeclaration) {        rewrite.remove(varDecl,group);        return;      }      if (sideEffectInitializer) {        Statement[] wrapped=new Statement[sideEffects.size()];        for (int i=0; i < wrapped.length; i++) {          Expression sideEffect=sideEffects.get(i);          Expression movedInit=(Expression)rewrite.createMoveTarget(sideEffect);          wrapped[i]=rewrite.getAST().newExpressionStatement(movedInit);        }        StatementRewrite statementRewrite=new StatementRewrite(rewrite,new ASTNode[]{varDecl});        statementRewrite.replace(wrapped,group);      } else {        rewrite.remove(varDecl,group);      }    } else {      if (fForceRemove) {        rewrite.remove(frag,group);        return;      }      ASTNode declaration=parent.getParent();      if (declaration instanceof FieldDeclaration) {        rewrite.remove(frag,group);        return;      }      if (declaration instanceof VariableDeclarationStatement) {        splitUpDeclarations(rewrite,group,frag,(VariableDeclarationStatement)declaration,sideEffects);        rewrite.remove(frag,group);        return;      }      if (declaration instanceof VariableDeclarationExpression) {        if (!sideEffectInitializer) {          rewrite.remove(frag,group);        }      }    }  } else   if (nameParentType == ASTNode.POSTFIX_EXPRESSION || nameParentType == ASTNode.PREFIX_EXPRESSION) {    Expression expression=(Expression)parent;    ASTNode expressionParent=expression.getParent();    if (expressionParent.getNodeType() == ASTNode.EXPRESSION_STATEMENT) {      removeStatement(rewrite,expressionParent,group);    } else {      rewrite.remove(expression,group);    }  }}  }
class C{  protected void onNetworkTypeChange(NetworkInfo oldNetwork,NetworkInfo newNetwork) throws RouterException {  log.info(String.format("Network type changed %s => %s",oldNetwork == null ? "" : oldNetwork.getTypeName(),newNetwork == null ? "NONE" : newNetwork.getTypeName()));  if (disable()) {    log.info(String.format("Disabled router on network type change (old network: %s)",oldNetwork == null ? "NONE" : oldNetwork.getTypeName()));  }  networkInfo=newNetwork;  if (enable()) {    log.info(String.format("Enabled router on network type change (new network: %s)",newNetwork == null ? "NONE" : newNetwork.getTypeName()));  }}  }
class C{  @Override public final StatisticsType createType(String name,String description,StatisticDescriptor[] stats){  return tf.createType(name,description,stats);}  }
class C{  void recomposeImports(){  m_importNumber=getStylesheetRoot().getImportNumber(this);  StylesheetRoot root=getStylesheetRoot();  int globalImportCount=root.getGlobalImportCount();  m_importCountComposed=(globalImportCount - m_importNumber) - 1;  int count=getImportCount();  if (count > 0) {    m_endImportCountComposed+=count;    while (count > 0)     m_endImportCountComposed+=this.getImport(--count).getEndImportCountComposed();  }  count=getIncludeCountComposed();  while (count > 0) {    int imports=getIncludeComposed(--count).getImportCount();    m_endImportCountComposed+=imports;    while (imports > 0)     m_endImportCountComposed+=getIncludeComposed(count).getImport(--imports).getEndImportCountComposed();  }}  }
class C{  public int hashCode(){  return this.url.hashCode();}  }
class C{  public static BufferedImage createPattern(String pattern,Dimension size,float scale,Color lineColor){  return createPattern(pattern,size,scale,lineColor,defaultBackColor);}  }
class C{  @Override public Void visitTypeCast(TypeCastTree node,Void p){  if (isPrimitive(node) && !isPrimitive(node.getExpression())) {    checkForNullability(node.getExpression(),UNBOXING_OF_NULLABLE);  }  return super.visitTypeCast(node,p);}  }
class C{  public void authenticate(String username,String host,String password) throws IOException, XMPPException {  String[] mechanisms={getName()};  Map<String,String> props=new HashMap<String,String>();  props.put(Sasl.SERVER_AUTH,"TRUE");  sc=Sasl.createSaslClient(mechanisms,username,"xmpp",host,props,this);  authenticate();}  }
class C{  public void addClassPath(String classpath){  char sep=CauchoUtil.getPathSeparatorChar();  int head=0;  int tail=0;  while (head < classpath.length()) {    tail=classpath.indexOf(sep,head);    String segment=null;    if (tail < 0) {      segment=classpath.substring(head);      head=classpath.length();    } else {      segment=classpath.substring(head,tail);      head=tail + 1;    }    if (segment.equals(""))     continue; else     if (segment.endsWith(".jar") || segment.endsWith(".zip"))     addMergePath(JarPath.create(VfsOld.lookup(segment))); else     addMergePath(VfsOld.lookup(segment));  }}  }
class C{  public static double loss(double pred,double y){  final double x=y - pred;  return x * x * 0.5;}  }
class C{  public InternationalFormatter(Format format){  this();  setFormat(format);}  }
class C{  public static Object parse(Reader in){  try {    JSONParser parser=new JSONParser();    return parser.parse(in);  } catch (  Exception e) {    return null;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:58.896 -0500",hash_original_method="838B8546D14F7398B1EA6F37263E6517",hash_generated_method="838B8546D14F7398B1EA6F37263E6517") void _setWantDo(int option){  _options[option]|=_REQUESTED_DO_MASK;}  }
class C{  synchronized void sendRoleRequest(OFControllerRole role) throws IOException {  Boolean supportsNxRole=(Boolean)sw.getAttribute(IOFSwitch.SWITCH_SUPPORTS_NX_ROLE);  if ((supportsNxRole != null) && !supportsNxRole) {    setSwitchRole(role,RoleRecvStatus.UNSUPPORTED);  } else {    pendingXid=sendNiciraRoleRequest(role);    pendingRole=role;    this.roleSubmitTimeNs=System.nanoTime();    requestPending=true;  }}  }
class C{  public static boolean isInBuilding(IGame game,Entity entity){  if (game == null) {    return false;  }  if (entity == null) {    return false;  }  return Compute.isInBuilding(game,entity,entity.getPosition());}  }
class C{  public CompiledST defineTemplate(String templateName,String template){  if (templateName.charAt(0) != '/')   templateName="/" + templateName;  try {    CompiledST impl=defineTemplate(templateName,new CommonToken(GroupParser.ID,templateName),null,template,null);    return impl;  } catch (  STException se) {  }  return null;}  }
class C{  protected double[] weightSamples(Set<P> samples,R[] rangeReadings){  Iterator<P> samplesIterator=samples.iterator();  double[] w=new double[samples.size()];  for (int j=0; j < samples.size(); j++) {    P sample=samplesIterator.next();    if (map.isPoseValid(sample)) {      w[j]=1.0d;      for (int i=0; i < rangeReadings.length; i++) {        w[j]=w[j] * rangeReadings[i].calculateWeight(map.rayCast(sample.addAngle(rangeReadings[i].getAngle())));      }    } else {      w[j]=0.0d;    }  }  return w;}  }
class C{  public boolean canPerformEdits(){  try {    fRoot.dispatchCheckIntegrity(this);    fChecked=true;  } catch (  MalformedTreeException e) {    fException=e;    return false;  }  return true;}  }
class C{  public static Scale quartiles(){  return scale(4);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:23.189 -0500",hash_original_method="78B640B3511AD026106C387D36058FFC",hash_generated_method="079CB038114B3C01EA312AE5CCEF3330") public void clear(){  mSize=0;}  }
class C{  public ActivateFailedException(String s,Exception ex){  super(s,ex);}  }
class C{  void zSetParentCalendarPanel(CalendarPanel parentCalendarPanel){  if (hasParent()) {    throw new RuntimeException("DatePickerSettings.setParentCalendarPanel(), " + "A DatePickerSettings instance can only be used as the settings for " + "one parent object. (Settings instances cannot be reused for multiple "+ "DatePickers, multiple independent CalendarPanels, or for combinations "+ "of both. )");  }  this.parentCalendarPanel=parentCalendarPanel;}  }
class C{  public MetaData modifyMetaData(MetaData unmodifiedMetaData,int outputIndex){  return unmodifiedMetaData;}  }
class C{  public MBeanInvocationFailedException(final Throwable thr){  super(thr.getMessage(),thr);}  }
class C{  public void testRandom(){  m_Filter=getFilter();  ((ClassOrder)m_Filter).setClassOrder(ClassOrder.RANDOM);  Instances result=useFilter();  performTests(result);}  }
class C{  void skipParameterSpace() throws IOException {  while (true) {switch (ch) {case '\n':case ' ':case '\t':      ch=in.read();    break;case '-':  if ((ch=in.read()) != '-') {    in.push(ch);    ch='-';    return;  }in.replace++;while (true) {switch (ch=in.read()) {case '-':  if ((ch=in.read()) == '-') {    ch=in.read();    in.replace--;    skipParameterSpace();    return;  }break;case -1:error("eof.arg","comment");in.replace--;return;}}default :return;}}}  }
class C{  public View findViewById(int viewId){  if (mCurrentViewHolder != null) {    return mCurrentViewHolder.findViewById(viewId);  }  return null;}  }
class C{  public Iterator<Edge> removedEdgeIterator(){  return removedEdgeList != null ? removedEdgeList.iterator() : new NullIterator<Edge>();}  }
class C{  public static void run(AdSense adsense,String adClientId) throws Exception {  System.out.println("=================================================================");  System.out.printf("Running report for ad client %s\n",adClientId);  System.out.println("=================================================================");  Date today=new Date();  Calendar calendar=Calendar.getInstance();  calendar.setTime(today);  calendar.add(Calendar.DATE,-7);  Date oneWeekAgo=calendar.getTime();  String startDate=DATE_FORMATTER.format(oneWeekAgo);  String endDate=DATE_FORMATTER.format(today);  Generate request=adsense.reports().generate(startDate,endDate);  request.setFilter(Arrays.asList("AD_CLIENT_ID==" + escapeFilterParameter(adClientId)));  request.setMetric(Arrays.asList("PAGE_VIEWS","AD_REQUESTS","AD_REQUESTS_COVERAGE","CLICKS","AD_REQUESTS_CTR","COST_PER_CLICK","AD_REQUESTS_RPM","EARNINGS"));  request.setDimension(Arrays.asList("DATE"));  request.setSort(Arrays.asList("+DATE"));  AdsenseReportsGenerateResponse response=request.execute();  if (response.getRows() != null && !response.getRows().isEmpty()) {    for (    AdsenseReportsGenerateResponse.Headers header : response.getHeaders()) {      System.out.printf("%25s",header.getName());    }    System.out.println();    for (    List<String> row : response.getRows()) {      for (      String column : row) {        System.out.printf("%25s",column);      }      System.out.println();    }    System.out.println();  } else {    System.out.println("No rows returned.");  }  System.out.println();}  }
class C{  public boolean goToBack(){  if (getSupportFragmentManager().getBackStackEntryCount() > 0) {    removeCurrentFragment();    getSupportFragmentManager().popBackStack();    return true;  } else {    if (!isTaskRoot()) {      finish();      return true;    }  }  return false;}  }
class C{  public Vertex discover(Vertex source,Vertex vertex){  return discover(source,vertex,null);}  }
class C{  private void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException {  ois.defaultReadObject();  try {    resBundle=JdbcRowSetResourceBundle.getJdbcRowSetResourceBundle();  } catch (  IOException ioe) {    throw new RuntimeException(ioe);  }}  }
class C{  private void sendMail(String instanceId,Status currentState) throws APPlatformException {  String subject=Messages.get(Messages.DEFAULT_LOCALE,"mail.subject",new Object[]{instanceId});  String text=Messages.get(Messages.DEFAULT_LOCALE,"mail.text",new Object[]{instanceId,paramHandler.getMessage(),currentState.toString()});  platformService.sendMail(Collections.singletonList(paramHandler.getEMail()),subject,text);}  }
class C{  synchronized static void unregister(JComponent c){  for (int counter=components.size() - 1; counter >= 0; counter--) {    JComponent target=components.get(counter).get();    if (target == c || target == null) {      components.remove(counter);    }  }}  }
class C{  private void info(String msg,IgniteLogger... loggers){  for (  IgniteLogger logger : loggers)   if (logger != null && logger.isInfoEnabled())   logger.info(msg);}  }
class C{  public AudioModule(DialogueSystem system){  this.system=system;}  }
class C{  public UUID client(){  return client;}  }
class C{  public SQLDataException(String reason,String SQLState,int vendorCode,Throwable cause){  super(reason,SQLState,vendorCode,cause);}  }
class C{  public boolean supportsMaybe(Capabilities c){  if (doNotCheckCapabilities()) {    return true;  }  boolean result;  result=true;  for (  Capability cap : Capability.values()) {    if (c.handles(cap) && !(handles(cap) || hasDependency(cap))) {      result=false;      break;    }  }  return result;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.728 -0400",hash_original_method="058065C74CFCB0AFFAB499776A561505",hash_generated_method="F3F11C285D3F2B6795073B4C62CE9A1E") private static Writer initWriter(File file,Object encoding,boolean append) throws IOException {  if (file == null) {    throw new NullPointerException("File is missing");  }  if (encoding == null) {    throw new NullPointerException("Encoding is missing");  }  boolean fileExistedAlready=file.exists();  OutputStream stream=null;  Writer writer=null;  try {    stream=new FileOutputStream(file,append);    if (encoding instanceof Charset) {      writer=new OutputStreamWriter(stream,(Charset)encoding);    } else     if (encoding instanceof CharsetEncoder) {      writer=new OutputStreamWriter(stream,(CharsetEncoder)encoding);    } else {      writer=new OutputStreamWriter(stream,(String)encoding);    }  } catch (  IOException ex) {    IOUtils.closeQuietly(writer);    IOUtils.closeQuietly(stream);    if (fileExistedAlready == false) {      FileUtils.deleteQuietly(file);    }    throw ex;  }catch (  RuntimeException ex) {    IOUtils.closeQuietly(writer);    IOUtils.closeQuietly(stream);    if (fileExistedAlready == false) {      FileUtils.deleteQuietly(file);    }    throw ex;  }  return writer;}  }
class C{  public DiscoverInfo discoverInfo(String entityID) throws XMPPException {  if (entityID == null)   return discoverInfo(null,null);  DiscoverInfo info=EntityCapsManager.getDiscoverInfoByUser(entityID);  if (info != null) {    return info;  }  EntityCapsManager.NodeVerHash nvh=EntityCapsManager.getNodeVerHashByJid(entityID);  info=discoverInfo(entityID,nvh != null ? nvh.getNodeVer() : null);  if (nvh != null) {    if (EntityCapsManager.verifyDiscoverInfoVersion(nvh.getVer(),nvh.getHash(),info))     EntityCapsManager.addDiscoverInfoByNode(nvh.getNodeVer(),info);  }  return info;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Airing s=getAir(stack);  return Boolean.valueOf(s != null && s.isFirstRun());}  }
class C{  public void messageTransferAborted(Message m,DTNHost from,DTNHost to){}  }
class C{  protected void sequence_AnnotatedScriptElement_ClassExtendsClause_ClassImplementsList_Members_TypeVariables(ISerializationContext context,N4ClassDeclaration semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public Combinatorics(T[] values){  this.values=values;  this.size=-1;  this.result=new ArrayList<>();}  }
class C{  @Override public void assertEquals(String message,Object expectedObj,Object actualObj){  AverageVector expected=(AverageVector)expectedObj;  AverageVector actual=(AverageVector)actualObj;  message=message + "Average vectors are not equals";  int expSize=expected.getSize();  int actSize=actual.getSize();  Assert.assertEquals(message + " (size of the average vector is not equal)",expSize,actSize);  int size=expSize;  for (int i=0; i < size; i++) {    RapidAssert.assertEquals(message,expected.getAveragable(i),actual.getAveragable(i));  }}  }
class C{  public static void assertWarnings(int expectedSize,StreamReader reader){  assertWarnings(expectedSize,reader.getWarnings());}  }
class C{  public CThreadEventSynchronizer(final IDebugger debugger,final ZyGraph graph){  Preconditions.checkNotNull(debugger,"IE01514: Debugger argument can not be null");  Preconditions.checkNotNull(graph,"IE01515: Graph argument can not be null");  m_debugger=debugger;  m_graph=graph;  synchronizeThreads(null,debugger.getProcessManager().getActiveThread());  debugger.getProcessManager().addListener(m_processManagerListener);}  }
class C{  public static ByteBuffer decode(ByteBuffer buf,PDFObject params) throws PDFParseException {  RunLengthDecode me=new RunLengthDecode(buf);  return me.decode();}  }
class C{  protected void estimateCardinality(StatementPatternNode sp,final AST2BOpContext ctx,final IBindingSet exogenousBindings,final int nrExogeneousBindings){  final AtomicBoolean usesExogeneousBindings=new AtomicBoolean(false);  final IV<?,?> s=getIV(sp.s(),exogenousBindings,usesExogeneousBindings);  final IV<?,?> p=getIV(sp.p(),exogenousBindings,usesExogeneousBindings);  final IV<?,?> o=getIV(sp.o(),exogenousBindings,usesExogeneousBindings);  final IV<?,?> c=getIV(sp.c(),exogenousBindings,usesExogeneousBindings);  final int exogenousBindingsAdjustmentFactor=usesExogeneousBindings.get() ? Math.max(1,nrExogeneousBindings) : 1;  estimateCardinalities(sp,s,p,o,c,ctx,exogenousBindingsAdjustmentFactor);}  }
class C{  @Override public String toString(){  LinkedList<Result> includedResultsForDiversityCalculation=new LinkedList<Result>();  StringBuffer result=new StringBuffer("(Rule, Utility)" + Tools.getLineSeparator());  Iterator it=this.results.iterator();  double cumulativeWeight=0.0d;  for (int i=1; it.hasNext(); i++) {    result.append(i + ") ");    Result r=(Result)it.next();    includedResultsForDiversityCalculation.addLast(r);    cumulativeWeight=cumulativeWeight + r.getTotalWeight();    result.append(r.getHypothesis().toString() + ", " + r.getUtility()+ Tools.getLineSeparator());  }  result.append("total necessary example weight: " + cumulativeWeight + Tools.getLineSeparator());  result.append("a priori probability: " + this.priors[Hypothesis.POSITIVE_CLASS] + Tools.getLineSeparator());  return result.toString();}  }
class C{  @POST @Path("create/change") @Produces("application/json") @Consumes("application/json") public ChangeCreationResult createChange(RefactoringSession refactoringSession) throws RefactoringException {  return manager.createChange(refactoringSession.getSessionId());}  }
class C{  public static boolean isDefaultJournalSyncTransactional(){  return DEFAULT_JOURNAL_SYNC_TRANSACTIONAL;}  }
class C{  public void testLoadClass() throws MalformedURLException {  String simpleJar=System.getProperty("cargo.testdata.simple-jar");  if (simpleJar == null) {    throw new CargoException("Please set property [cargo.testdata.simple-jar] to a valid " + "location of simple-jar");  }  WAR war=(WAR)new DefaultDeployableFactory().createDeployable(getContainer().getId(),getTestData().getTestDataFileFor("classpath-war"),DeployableType.WAR);  war.setExtraClasspath(new String[]{simpleJar});  getLocalContainer().getConfiguration().addDeployable(war);  getLocalContainer().getConfiguration().setProperty(TomcatPropertySet.COPY_WARS,"false");  URL warPingURL=new URL("http://localhost:" + getTestData().port + "/"+ "classpath-war/test");  getLocalContainer().start();  PingUtils.assertPingTrue("simple war should have been started at this point",warPingURL,getLogger());  getLocalContainer().stop();  PingUtils.assertPingFalse("simple war should have been stopped at this point",warPingURL,getLogger());}  }
class C{  protected void process(Document document) throws Exception {  DocumentTreeModel treeModel=new DocumentTreeModel(document);  JTree tree=new JTree(treeModel);  JFrame frame=new JFrame("JTreeDemo: " + document.getName());  frame.setSize(300,300);  frame.setLocation(100,100);  frame.getContentPane().add(new JScrollPane(tree));  frame.validate();  frame.setVisible(true);}  }
class C{  @Before public void loadData(){  featureData=SimpleFeatureData.load(Stream.of(tuple(1,1,1.0),tuple(2,1,1.0),tuple(3,2,1.0)));  preferences=SimplePreferenceData.load(Stream.of(tuple(1,1,1.0),tuple(1,2,1.0),tuple(2,1,1.0),tuple(2,2,1.0),tuple(2,3,1.0)));}  }
class C{  public GuavaCacheConfig(final String cacheName,final String spec){  this.cacheName=cacheName;  this.spec=parse(spec);}  }
class C{  public ManualFocusRing(Invalidator invalidator,Paint ringPaint,float exitDurationMillis){  super(invalidator,ringPaint,0.0f,exitDurationMillis);}  }
class C{  public void rollback(){  rollbackTo(currentVersion);}  }
class C{  public AndroidConnectionConfiguration(String serviceName) throws XMPPException {  super();  AndroidInit(serviceName,DEFAULT_TIMEOUT);}  }
class C{  private void assertWriteVarint(byte[] data,long value) throws Exception {  if ((value >>> 32) == 0) {    ByteArrayOutputStream rawOutput=new ByteArrayOutputStream();    CodedOutputStream output=CodedOutputStream.newInstance(rawOutput);    output.writeRawVarint32((int)value);    output.flush();    assertEqualBytes(data,rawOutput.toByteArray());    assertEquals(data.length,CodedOutputStream.computeRawVarint32Size((int)value));  }{    ByteArrayOutputStream rawOutput=new ByteArrayOutputStream();    CodedOutputStream output=CodedOutputStream.newInstance(rawOutput);    output.writeRawVarint64(value);    output.flush();    assertEqualBytes(data,rawOutput.toByteArray());    assertEquals(data.length,CodedOutputStream.computeRawVarint64Size(value));  }  for (int blockSize=1; blockSize <= 16; blockSize*=2) {    if ((value >>> 32) == 0) {      ByteArrayOutputStream rawOutput=new ByteArrayOutputStream();      CodedOutputStream output=CodedOutputStream.newInstance(rawOutput,blockSize);      output.writeRawVarint32((int)value);      output.flush();      assertEqualBytes(data,rawOutput.toByteArray());    }{      ByteArrayOutputStream rawOutput=new ByteArrayOutputStream();      CodedOutputStream output=CodedOutputStream.newInstance(rawOutput,blockSize);      output.writeRawVarint64(value);      output.flush();      assertEqualBytes(data,rawOutput.toByteArray());    }  }}  }
class C{  protected static String reduceString(String input){  String newString=input.toLowerCase();  int len=newString.length();  String retval="";  for (int i=0; i < len; i++) {    if (newString.charAt(i) == ' ' || newString.charAt(i) == '\t')     continue; else     retval+=newString.charAt(i);  }  return retval;}  }
class C{  public boolean useDynamic(){  if (getInputProperties() == null) {    loadInputProperties();  }  return Boolean.parseBoolean(getInputProperties().getProperty(USE_DYNAMIC,"true"));}  }
class C{  public void createByConfiguration(){  removeAll();  Map<String,ExceptionHandlersConfiguration> map=AppBeans.getAll(ExceptionHandlersConfiguration.class);  List<ExceptionHandlersConfiguration> configurations=new ArrayList<>(map.values());  Collections.reverse(configurations);  for (  ExceptionHandlersConfiguration conf : configurations) {    for (    Class aClass : conf.getHandlerClasses()) {      try {        handlers.add(ReflectionHelper.<ExceptionHandler>newInstance(aClass));      } catch (      NoSuchMethodException e) {        log.error("Unable to instantiate " + aClass,e);      }    }  }  Map<String,GenericExceptionHandler> handlerMap=AppBeans.getAll(GenericExceptionHandler.class);  List<GenericExceptionHandler> handlers=new ArrayList<>(handlerMap.values());  Collections.sort(handlers,new OrderComparator());  for (  GenericExceptionHandler handler : handlers) {    addHandler(handler);  }}  }
class C{  private ResolvedMigration createAvailableMigration(int version){  ResolvedMigration migration=new ResolvedMigration();  migration.setVersion(MigrationVersion.fromVersion(Integer.toString(version)));  migration.setDescription("abc");  migration.setScript("x");  migration.setType(MigrationType.CQL);  return migration;}  }
class C{  public void startAutoScroll(){  sendScrollMessage(interval);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:44.896 -0500",hash_original_method="7F26B81C9250A7120577E4D4C011F353",hash_generated_method="093A5278708C51FD7AEEA247A5D87A5C") private String cookieToString(Cookie cookie){  return cookie.getClass().getSimpleName() + "[version=" + cookie.getVersion()+ ",name="+ cookie.getName()+ ",domain="+ cookie.getDomain()+ ",path="+ cookie.getPath()+ ",expiry="+ cookie.getExpiryDate()+ "]";}  }
class C{  public ScaledThumbnailMaker scale(double factor){  return scale(factor,factor);}  }
class C{  @AssistedInject public ActiveConnectionResource(@Assisted UserContext userContext,@Assisted Directory<ActiveConnection> directory,@Assisted ActiveConnection activeConnection,DirectoryObjectTranslator<ActiveConnection,APIActiveConnection> translator){  super(directory,activeConnection,translator);  this.userContext=userContext;  this.activeConnection=activeConnection;}  }
class C{  public static double[] doubleArrayFromString(String data){  double[] result=null;  LinkedList<Double> tmp=new LinkedList<Double>();  data=data.replace('[',' ');  data=data.replace(']',' ');  data=data.replace(',',' ');  StringTokenizer st=new StringTokenizer(data);  while (st.hasMoreTokens())   tmp.add(Double.parseDouble(st.nextToken()));  result=new double[tmp.size()];  int i=0;  for (Iterator<Double> iterator=tmp.iterator(); iterator.hasNext(); ) {    Double next=iterator.next();    result[i]=next;    i++;  }  return result;}  }
class C{  public int compareTo(Object o){  ObjectStreamField f=(ObjectStreamField)o;  boolean thisPrimitive=this.isPrimitive();  boolean fPrimitive=f.isPrimitive();  if (thisPrimitive != fPrimitive) {    return thisPrimitive ? -1 : 1;  }  return this.getName().compareTo(f.getName());}  }
class C{  @Override public void putAll(Map<? extends V,? extends Long> map){  Iterator<? extends Entry<? extends V,? extends Long>> it=map.entrySet().iterator();  for (int i=map.size(); i-- > 0; ) {    Entry<? extends V,? extends Long> e=it.next();    this.put(e.getKey(),e.getValue());  }}  }
class C{  private boolean writeTemplate(String file,String basedir,String newBasedir){  if (file.indexOf(WM_EXT) < 0) {    return false;  }  System.out.println("Converting " + file + "...");  String template;  String templateDir;  String newTemplate;  File outputDirectory;  if (basedir.length() == 0) {    template=file;    templateDir="";    newTemplate=convertName(file);  } else {    template=basedir + File.separator + file;    templateDir=newBasedir + extractPath(file);    outputDirectory=new File(templateDir);    if (!outputDirectory.exists()) {      outputDirectory.mkdirs();    }    newTemplate=newBasedir + File.separator + convertName(file);  }  String convertedTemplate=convertTemplate(template);  try {    FileWriter fw=new FileWriter(newTemplate);    fw.write(convertedTemplate);    fw.close();  } catch (  Exception e) {    e.printStackTrace();  }  return true;}  }
class C{  public static boolean isWindowsXP(){  return _isWindowsXP;}  }
class C{  @SuppressWarnings("unchecked") @Override public final V remove(final Object s){  return this.arc[getPartition(s)].remove((K)s);}  }
class C{  public void hideOutShowIn(){  inScene.setVisible(true);  outScene.setVisible(false);}  }
class C{  public boolean isEndCharacter(char c){  return this.isOpeningCharacter(c,false);}  }
class C{  public static Collection intersect(Collection c1,Collection c2,Comparator comparator){  Collection result=new LinkedList();  if (c1 == null || c2 == null || c1.size() == 0 || c2.size() == 0)   return result;  Collection left=c1;  Collection right=c2;  if ((left instanceof Set) && !(right instanceof Set) || (left.size() > right.size())) {    left=c2;    right=c1;  }  for (  Object l : left) {    if (contains(right,l,comparator))     result.add(l);  }  return result;}  }
class C{  public static File copyToLocalFileSystem(FileSystem fs,String destinationPath,String destinationFile,String dfsFile,Configuration conf) throws IOException {  File destinationDir=new File(destinationPath);  if (!destinationDir.exists() && !destinationDir.mkdirs()) {    throw new RuntimeException("Unable to create local directory");  }  try (RawLocalFileSystem localFileSystem=new RawLocalFileSystem()){    FsPermission permissions=new FsPermission(FsAction.ALL,FsAction.NONE,FsAction.NONE);    localFileSystem.setPermission(new Path(destinationDir.getAbsolutePath()),permissions);    Path dfsFilePath=new Path(dfsFile);    File localFile=new File(destinationDir,destinationFile);    FileUtil.copy(fs,dfsFilePath,localFile,false,conf);    permissions=new FsPermission(FsAction.READ,FsAction.NONE,FsAction.NONE);    localFileSystem.setPermission(new Path(localFile.getAbsolutePath()),permissions);    return localFile;  } }  }
class C{  public ComplexVector generateRandomVector(int dimension,Random random){  if (getDominantMode().equals(Mode.HERMITIAN))   return generateHermitianRandomVector(dimension,random);  ComplexVector randomVector=new ComplexVector(dimension,Mode.POLAR_DENSE);  for (int d=0; d < randomVector.phaseAngles.length; d++)   randomVector.phaseAngles[d]=(short)random.nextInt(CircleLookupTable.PHASE_RESOLUTION);  return randomVector;}  }
class C{  @Override public void dismissed(ExtensionPopupMenuComponent selectedMenuComponent){}  }
class C{  private static void parseTrun(Track track,DefaultSampleValues defaultSampleValues,long decodeTime,int workaroundFlags,ParsableByteArray trun,TrackFragment out){  trun.setPosition(Mp4Util.ATOM_HEADER_SIZE);  int fullAtom=trun.readInt();  int flags=Mp4Util.parseFullAtomFlags(fullAtom);  int sampleCount=trun.readUnsignedIntToInt();  if ((flags & 0x01) != 0) {    trun.skip(4);  }  boolean firstSampleFlagsPresent=(flags & 0x04) != 0;  int firstSampleFlags=defaultSampleValues.flags;  if (firstSampleFlagsPresent) {    firstSampleFlags=trun.readUnsignedIntToInt();  }  boolean sampleDurationsPresent=(flags & 0x100) != 0;  boolean sampleSizesPresent=(flags & 0x200) != 0;  boolean sampleFlagsPresent=(flags & 0x400) != 0;  boolean sampleCompositionTimeOffsetsPresent=(flags & 0x800) != 0;  out.initTables(sampleCount);  int[] sampleSizeTable=out.sampleSizeTable;  int[] sampleCompositionTimeOffsetTable=out.sampleCompositionTimeOffsetTable;  long[] sampleDecodingTimeTable=out.sampleDecodingTimeTable;  boolean[] sampleIsSyncFrameTable=out.sampleIsSyncFrameTable;  long timescale=track.timescale;  long cumulativeTime=decodeTime;  boolean workaroundEveryVideoFrameIsSyncFrame=track.type == Track.TYPE_VIDEO && ((workaroundFlags & WORKAROUND_EVERY_VIDEO_FRAME_IS_SYNC_FRAME) == WORKAROUND_EVERY_VIDEO_FRAME_IS_SYNC_FRAME);  for (int i=0; i < sampleCount; i++) {    int sampleDuration=sampleDurationsPresent ? trun.readUnsignedIntToInt() : defaultSampleValues.duration;    int sampleSize=sampleSizesPresent ? trun.readUnsignedIntToInt() : defaultSampleValues.size;    int sampleFlags=(i == 0 && firstSampleFlagsPresent) ? firstSampleFlags : sampleFlagsPresent ? trun.readInt() : defaultSampleValues.flags;    if (sampleCompositionTimeOffsetsPresent) {      int sampleOffset=trun.readInt();      sampleCompositionTimeOffsetTable[i]=(int)((sampleOffset * 1000) / timescale);    } else {      sampleCompositionTimeOffsetTable[i]=0;    }    sampleDecodingTimeTable[i]=(cumulativeTime * 1000) / timescale;    sampleSizeTable[i]=sampleSize;    sampleIsSyncFrameTable[i]=((sampleFlags >> 16) & 0x1) == 0 && (!workaroundEveryVideoFrameIsSyncFrame || i == 0);    cumulativeTime+=sampleDuration;  }}  }
class C{  void closeInternal() throws SQLException {  if (result != null) {    try {      result.close();      if (closeStatement && stat != null) {        stat.close();      }    }  finally {      columnCount=0;      result=null;      stat=null;      conn=null;      insertRow=null;      updateRow=null;    }  }}  }
class C{  public CallChainInfo process_call_chain(Stmt s,MethodOrMethodContext mc){  if (is_terminal(mc))   return new CallChainInfo(mc.method(),s,"syscall");  CallChainInfo cci=new CallChainInfo(mc.method(),s,"call-chain");  CallGraph cg=PTABridge.v().getCallGraph();  Set<SootMethod> processed_methods=new HashSet<SootMethod>();  List<CallChainInfo> calls=new ArrayList<CallChainInfo>();  for (Iterator<Edge> tit=cg.edgesOutOf(mc); tit.hasNext(); ) {    if (timeout())     break;    Edge e=tit.next();    SootMethod m=e.getTgt().method();    if (ignore_dup_methods) {      if (processed_methods.contains(m)) {        logger.info("pcc: method {}, duplicate callee {}",mc.method(),m);        continue;      }      processed_methods.add(m);    }    boolean print_m=!(is_system(mc.method()) && is_system(m));    if (m.toString().contains("<clinit>")) {      continue;    } else     if (stack.contains(m)) {    } else {      stack.push(m);      CallChainInfo callee=process_call_chain(e.srcStmt(),e.getTgt());      stack.pop();      if (print_m) {        calls.add(callee);      } else {        if (ignore_dup_methods) {          for (          CallChainInfo callee_call : callee.contents) {            if (!processed_methods.contains(callee_call.method)) {              calls.add(callee_call);              processed_methods.add(callee_call.method);            }          }        } else {          calls.addAll(Arrays.asList(callee.contents));        }      }    }  }  cci.contents=calls.toArray(cci.contents);  if (ignore_dup_methods)   Arrays.sort(cci.contents); else   cci.merge_contents();  return cci;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static byte[] decode(String string){  int length=string.length();  if (length == 0)   return new byte[0];  int pad=(string.charAt(length - 2) == '=') ? 2 : (string.charAt(length - 1) == '=') ? 1 : 0;  int size=length * 3 / 4 - pad;  byte[] buffer=new byte[size];  int block;  int i=0;  int index=0;  while (i < length) {    block=(ALPHABET.indexOf(string.charAt(i++)) & 0xff) << 18 | (ALPHABET.indexOf(string.charAt(i++)) & 0xff) << 12 | (ALPHABET.indexOf(string.charAt(i++)) & 0xff) << 6 | (ALPHABET.indexOf(string.charAt(i++)) & 0xff);    buffer[index++]=(byte)(block >>> 16);    if (index < size)     buffer[index++]=(byte)((block >>> 8) & 0xff);    if (index < size)     buffer[index++]=(byte)(block & 0xff);  }  return buffer;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public synchronized void write(int b) throws IOException {  flushBufferIfSizeLimitReached();  throwOnFlusherError();  buf[count++]=(byte)b;}  }
class C{  public static byte[] decode(byte[] source,int off,int len,int options){  byte[] DECODABET=getDecodabet(options);  int len34=len * 3 / 4;  byte[] outBuff=new byte[len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiCrop=0;  byte sbiDecode=0;  for (i=off; i < off + len; i++) {    sbiCrop=(byte)(source[i] & 0x7f);    sbiDecode=DECODABET[sbiCrop];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        b4[b4Posn++]=sbiCrop;        if (b4Posn > 3) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,options);          b4Posn=0;          if (sbiCrop == EQUALS_SIGN)           break;        }      }    } else {      System.err.println("Bad Base64 input character at " + i + ": "+ source[i]+ "(decimal)");      return null;    }  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  @SuppressWarnings({"SimplifiableIfStatement"}) private boolean shouldUpload(BugDesignation loaded,BugDesignation inCloud){  if (inCloud == null)   return true;  if (inCloud.getTimestamp() > loaded.getTimestamp())   return false;  return !loaded.getDesignationKey().equals(inCloud.getDesignationKey()) || !Util.nullSafeEquals(loaded.getAnnotationText(),inCloud.getAnnotationText());}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public boolean isErrorMessageDuplicate(){  FacesContext fc=FacesContext.getCurrentInstance();  String errorKey=(String)getRequest().getAttribute(Constants.REQ_ATTR_ERROR_KEY);  List<Object> params=new ArrayList<>();  for (int i=0; i < 5; i++) {    Object param=getRequest().getAttribute(Constants.REQ_ATTR_ERROR_PARAM + i);    if (param != null) {      params.add(param);    }  }  String errorMessage=JSFUtils.getText(errorKey,params.toArray());  return JSFUtils.existMessageInList(fc,errorMessage);}  }
class C{  public EventType defineEvent(String name,String description,EventAttribute[] attributes){  if (state == State.SHUT_DOWN)   return null;  EventType result=new EventType(name,description,attributes);  internalDefineEvent(result);  return result;}  }
class C{  public static void verifyRemovalOfResourceState(VerificationHost host,List<String> resourceStateLinks) throws Throwable {  for (  String resourceLink : resourceStateLinks) {    ResourceState resourceState=getResourceState(host,resourceLink);    assertNotNull(resourceState);    assertNull(resourceState.documentSelfLink);  }}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  private void handleQueryExamples(ExampleTaskServiceState task){  Query.Builder builder=Query.Builder.create().addKindFieldClause(ExampleServiceState.class);  if (task.customQueryClause != null) {    builder.addClause((task.customQueryClause));  }  Query exampleDocumentQuery=builder.build();  task.exampleQueryTask=QueryTask.Builder.createDirectTask().setQuery(exampleDocumentQuery).build();  URI queryTaskUri=UriUtils.buildUri(this.getHost(),ServiceUriPaths.CORE_QUERY_TASKS);  Operation queryRequest=Operation.createPost(queryTaskUri).setBody(task.exampleQueryTask).setCompletion(null);  sendRequest(queryRequest);}  }
class C{  public void addElement(Element element,short method){  if (!currentGroup.hasChildNodes()) {    currentGroup.appendChild(element);    groupGC=domTreeManager.gcConverter.toSVG(gc);    SVGGraphicContext deltaGC;    deltaGC=processDeltaGC(groupGC,domTreeManager.defaultGC);    domTreeManager.getStyleHandler().setStyle(currentGroup,deltaGC.getGroupContext(),domTreeManager.getGeneratorContext());    if ((method & DRAW) == 0) {      deltaGC.getGraphicElementContext().put(SVG_STROKE_ATTRIBUTE,SVG_NONE_VALUE);    }    if ((method & FILL) == 0) {      deltaGC.getGraphicElementContext().put(SVG_FILL_ATTRIBUTE,SVG_NONE_VALUE);    }    domTreeManager.getStyleHandler().setStyle(element,deltaGC.getGraphicElementContext(),domTreeManager.getGeneratorContext());    setTransform(currentGroup,deltaGC.getTransformStack());    domTreeManager.appendGroup(currentGroup,this);  } else {    if (gc.isTransformStackValid()) {      SVGGraphicContext elementGC=domTreeManager.gcConverter.toSVG(gc);      SVGGraphicContext deltaGC=processDeltaGC(elementGC,groupGC);      trimContextForElement(deltaGC,element);      if (countOverrides(deltaGC) <= domTreeManager.maxGCOverrides) {        currentGroup.appendChild(element);        if ((method & DRAW) == 0) {          deltaGC.getContext().put(SVG_STROKE_ATTRIBUTE,SVG_NONE_VALUE);        }        if ((method & FILL) == 0) {          deltaGC.getContext().put(SVG_FILL_ATTRIBUTE,SVG_NONE_VALUE);        }        domTreeManager.getStyleHandler().setStyle(element,deltaGC.getContext(),domTreeManager.getGeneratorContext());        setTransform(element,deltaGC.getTransformStack());      } else {        currentGroup=domTreeManager.getDOMFactory().createElementNS(SVG_NAMESPACE_URI,SVG_G_TAG);        addElement(element,method);      }    } else {      currentGroup=domTreeManager.getDOMFactory().createElementNS(SVG_NAMESPACE_URI,SVG_G_TAG);      gc.validateTransformStack();      addElement(element,method);    }  }}  }
class C{  public synchronized OMGraphicList prepare(){  OMGraphicList g=getList();  if (g == null) {    try {      E00Parser parser=new E00Parser(E00File);      parser.setPaints(ArcColors,LabColors,Tx7Color,SelectTx7Color,SelectLabColor,SelectArcColor,LabTextColor);      parser.setLabMarker(LabMarker);      parser.setFonts(LabFont,Tx7Font);      g=parser.getOMGraphics();      arcs=parser.getArcList();      labs=parser.getLabList();      tx7=parser.getTx7List();      setListVisibility();    } catch (    Exception ex) {      ex.printStackTrace(System.out);      Debug.error("E00Layer|" + getName() + ".prepare(): "+ ex.getMessage());    }  }  Projection proj=getProjection();  if (proj != null && g != null) {    g.generate(proj);  }  return g;}  }
class C{  private void initJumpView(Context context,AttributeSet attrs){  jumpingView=new JumpingView(context,attrs);  addView(jumpingView);  jumpingView.addListener(this);}  }
class C{  public void zDrawTextFieldIndicators(){  if (!isEnabled()) {    timeTextField.setBackground(new Color(240,240,240));    timeTextField.setForeground(new Color(109,109,109));    timeTextField.setFont(settings.fontValidTime);    return;  }  timeTextField.setBackground(settings.getColor(TimeArea.TextFieldBackgroundValidTime));  timeTextField.setForeground(settings.getColor(TimeArea.TimePickerTextValidTime));  timeTextField.setFont(settings.fontValidTime);  String timeText=timeTextField.getText();  boolean textIsEmpty=timeText.trim().isEmpty();  if (textIsEmpty) {    if (settings.getAllowEmptyTimes()) {    } else {      timeTextField.setBackground(settings.getColor(TimeArea.TextFieldBackgroundDisallowedEmptyTime));    }    return;  }  LocalTime parsedTime=InternalUtilities.getParsedTimeOrNull(timeText,settings.getFormatForDisplayTime(),settings.getFormatForMenuTimes(),settings.formatsForParsing,settings.getLocale());  if (parsedTime == null) {    timeTextField.setBackground(settings.getColor(TimeArea.TextFieldBackgroundInvalidTime));    timeTextField.setForeground(settings.getColor(TimeArea.TimePickerTextInvalidTime));    timeTextField.setFont(settings.fontInvalidTime);    return;  }  TimeVetoPolicy vetoPolicy=settings.getVetoPolicy();  boolean isTimeVetoed=InternalUtilities.isTimeVetoed(vetoPolicy,parsedTime);  if (isTimeVetoed) {    timeTextField.setBackground(settings.getColor(TimeArea.TextFieldBackgroundVetoedTime));    timeTextField.setForeground(settings.getColor(TimeArea.TimePickerTextVetoedTime));    timeTextField.setFont(settings.fontVetoedTime);  }}  }
class C{  public void addToNode(OozieNode node){  toNodes.add(node);}  }
class C{  public synchronized InputStream readNotify() throws IOException {  RMIMasterSocketFactory.proxyLog.log(Log.VERBOSE,"sending request and activating input stream");  outNotifier.deactivate();  out.close();  out=null;  try {    in=conn.getInputStream();  } catch (  IOException e) {    RMIMasterSocketFactory.proxyLog.log(Log.BRIEF,"failed to get input stream, exception: ",e);    throw new IOException("HTTP request failed");  }  String contentType=conn.getContentType();  if (contentType == null || !conn.getContentType().equals("application/octet-stream")) {    if (RMIMasterSocketFactory.proxyLog.isLoggable(Log.BRIEF)) {      String message;      if (contentType == null) {        message="missing content type in response" + lineSeparator;      } else {        message="invalid content type in response: " + contentType + lineSeparator;      }      message+="HttpSendSocket.readNotify: response body: ";      try {        BufferedReader din=new BufferedReader(new InputStreamReader(in));        String line;        while ((line=din.readLine()) != null)         message+=line + lineSeparator;      } catch (      IOException e) {      }      RMIMasterSocketFactory.proxyLog.log(Log.BRIEF,message);    }    throw new IOException("HTTP request failed");  }  return in;}  }
class C{  public FormatFlagsConversionMismatchException(String f,char c){  if (f == null)   throw new NullPointerException();  this.f=f;  this.c=c;}  }
class C{  @Override public void useDefaultVisual(){  m_visual.loadIcons(BeanVisual.ICON_PATH + "DefaultFilter.gif",BeanVisual.ICON_PATH + "DefaultFilter_animated.gif");  m_visual.setText("SubstringReplacer");}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapremovenameditemgetvalue.class,args);}  }
class C{  public static void isValidPriceScale(String member,BigDecimal bigDecimal) throws ValidationException {  if (bigDecimal.scale() > PriceConverter.NUMBER_OF_DECIMAL_PLACES) {    ValidationException vf=new ValidationException(ReasonEnum.SCALE_TO_LONG,member,null);    logValidationFailure(vf);    throw vf;  }}  }
class C{  public boolean inTransaction(){  return transaction != null && transaction.getState() == TransactionState.ACTIVE;}  }
class C{  public Buffer root(){  return root;}  }
class C{  void moveToUnassigned(UnassignedInfo unassignedInfo){  ensureNotFrozen();  version++;  assert state != ShardRoutingState.UNASSIGNED : this;  state=ShardRoutingState.UNASSIGNED;  currentNodeId=null;  relocatingNodeId=null;  this.unassignedInfo=unassignedInfo;  allocationId=null;  expectedShardSize=UNAVAILABLE_EXPECTED_SHARD_SIZE;}  }
class C{  public void finalStatistics(final EvolutionState state,final int result){  super.finalStatistics(state,result);  ((SimpleProblemForm)(state.evaluator.p_problem.clone())).describe(state,best_of_run,0,0,0);}  }
class C{  private void chooseAccount(){  startActivityForResult(youTubeSearch.getCredential().newChooseAccountIntent(),REQUEST_ACCOUNT_PICKER);}  }
class C{  @Override public int hashCode(){  return id.hashCode() + triggers.hashCode() - rules.hashCode();}  }
class C{  public HelpTipObject(int id){  this.id=id;}  }
class C{  public UserSynchronizer(SynchronizerConf sync_conf) throws ODataException {  Objects.requireNonNull(sync_conf);  if (!sync_conf.getType().equals("ODataUserSynchronizer")) {    throw new ODataException("UserSynchronizer only accepts instances of ODataUserSynchronizer");  }  this.syncConf=sync_conf;}  }
class C{  public boolean assembleLoops(List<S2Loop> loops,List<S2Edge> unusedEdges){  if (options.getMergeDistance().radians() > 0) {    mergeVertices();  }  List<S2Edge> dummyUnusedEdges=Lists.newArrayList();  if (unusedEdges == null) {    unusedEdges=dummyUnusedEdges;  }  unusedEdges.clear();  while (!edges.isEmpty()) {    Map.Entry<S2Point,Multiset<S2Point>> edge=edges.entrySet().iterator().next();    S2Point v0=edge.getKey();    S2Point v1=edge.getValue().iterator().next();    S2Loop loop=assembleLoop(v0,v1,unusedEdges);    if (loop == null) {      continue;    }    while (options.getUndirectedEdges() && !loop.isNormalized()) {      loop=assembleLoop(loop.vertex(1),loop.vertex(0),unusedEdges);    }    loops.add(loop);    eraseLoop(loop,loop.numVertices());  }  return unusedEdges.isEmpty();}  }
class C{  public SVGPath relativeMoveTo(double[] xy){  return relativeMoveTo(xy[0],xy[1]);}  }
class C{  @Override public void close(){  if (!closed) {    closed=true;    firePropertyChange(CLOSED_PROPERTY,false,true);    ActivityManager.getInstance().remove(this);  }}  }
class C{  final public void print(int i){  Writer out=this.out;  if (out == null)   return;  if (i == 0x80000000) {    print("-2147483648");    return;  }  try {    if (i < 0) {      out.write('-');      i=-i;    } else     if (i < 9) {      out.write('0' + i);      return;    }    int length=0;    int exp=10;    if (i >= 1000000000)     length=9; else {      for (; i >= exp; length++)       exp=10 * exp;    }    int j=31;    while (i > 0) {      _tempCharBuffer[--j]=(char)((i % 10) + '0');      i/=10;    }    out.write(_tempCharBuffer,j,31 - j);  } catch (  IOException e) {    log.log(Level.FINE,e.toString(),e);  }}  }
class C{  @Override public String toString(){  try {    return this.toString(0);  } catch (  Exception e) {    return null;  }}  }
class C{  private static SearchResultMediator addResultTab(long token,SearchInformation info){  List<String> searchTokens=instance().tokenize(info.getQuery());  return getSearchResultDisplayer().addResultTab(token,searchTokens,info);}  }
class C{  private List<VolumeDescriptor> prepareVolumeDescriptorsForFullCopy(List<Volume> volumes,boolean createInactive){  final List<VolumeDescriptor> volumeDescriptors=new ArrayList<VolumeDescriptor>();  VirtualPoolCapabilityValuesWrapper vpoolCapabilities=new VirtualPoolCapabilityValuesWrapper();  vpoolCapabilities.put(VirtualPoolCapabilityValuesWrapper.REPLICA_CREATE_INACTIVE,new Boolean(createInactive).toString());  for (  Volume volume : volumes) {    VolumeDescriptor desc=new VolumeDescriptor(VolumeDescriptor.Type.BLOCK_DATA,volume.getStorageController(),volume.getId(),volume.getPool(),volume.getConsistencyGroup(),vpoolCapabilities);    volumeDescriptors.add(desc);  }  return volumeDescriptors;}  }
class C{  public void decorate(OutputNode node){  decorator.decorate(node);}  }
class C{  protected void onBeforeClusterItemRendered(T item,MarkerOptions markerOptions){}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override protected void register(PackagerFactory packagerFactory){}  }
class C{  public static void main(String[] argv){  runFilter(new Resample(),argv);}  }
class C{  public boolean isKeepAlive(){  return keepAlive;}  }
class C{  @RpcMethod public FinalizeImageResponse finalizeImage(String imageId,String datastore,String tmpImagePath) throws InterruptedException, RpcException {  SyncHandler<FinalizeImageResponse,Host.AsyncClient.finalize_image_call> syncHandler=new SyncHandler<>();  finalizeImage(imageId,datastore,tmpImagePath,syncHandler);  syncHandler.await();  return ResponseValidator.checkFinalizeImageResponse(syncHandler.getResponse());}  }
class C{  public void checkStateErrors(MediaPlayerStateErrors stateErrors){  assertTrue(!stateErrors.errorInPreparedState);  assertTrue(!stateErrors.errorInPreparedStateAfterStop);  assertTrue(!stateErrors.errorInStartedState);  assertTrue(!stateErrors.errorInStartedStateAfterPause);  assertTrue(!stateErrors.errorInPausedState);  assertTrue(!stateErrors.errorInPlaybackCompletedState);  assertTrue(!stateErrors.errorInIdleState);  assertTrue(!stateErrors.errorInIdleStateAfterReset);  assertTrue(!stateErrors.errorInInitializedState);  assertTrue(!stateErrors.errorInStoppedState);  assertTrue(stateErrors.errorInErrorState);}  }
class C{  public String toString(){  return getClass().getName() + "[color=" + color+ (italic ? ",italic" : "")+ (bold ? ",bold" : "")+ "]";}  }
class C{  protected double time(LuaTable table){  java.util.Date d;  if (table == null) {    d=new java.util.Date();  } else {    Calendar c=Calendar.getInstance();    c.set(Calendar.YEAR,table.get("year").checkint());    c.set(Calendar.MONTH,table.get("month").checkint() - 1);    c.set(Calendar.DAY_OF_MONTH,table.get("day").checkint());    c.set(Calendar.HOUR_OF_DAY,table.get("hour").optint(0));    c.set(Calendar.MINUTE,table.get("min").optint(0));    c.set(Calendar.SECOND,table.get("sec").optint(0));    c.set(Calendar.MILLISECOND,0);    d=c.getTime();  }  return d.getTime() / 1000.;}  }
class C{  public static DBIDVar randomSample(DBIDs ids,RandomFactory random){  return randomSample(ids,random.getSingleThreadedRandom());}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response){  processGetRequest(request,response);}  }
class C{  public Builder updatePassword(String password){  this.password=password;  return this;}  }
class C{  @Thunk static CharSequence ensureValidName(Context context,Intent intent,CharSequence name){  if (name == null) {    try {      PackageManager pm=context.getPackageManager();      ActivityInfo info=pm.getActivityInfo(intent.getComponent(),0);      name=info.loadLabel(pm);    } catch (    PackageManager.NameNotFoundException nnfe) {      return "";    }  }  return name;}  }
class C{  public CRenameBackAction(final Window parent,final INaviView view,final String originalName){  super(String.format("Rename back to '%s'",originalName));  m_parent=parent;  m_view=view;  m_originalName=originalName;}  }
class C{  public void updateNotificationInformation(@Nullable String title,@Nullable String album,@Nullable String artist,@Nullable Bitmap notificationImage,@Nullable Bitmap secondaryNotificationImage){  updateNotificationInformation(title,album,artist,notificationImage,secondaryNotificationImage,null);}  }
class C{  static void accept(final AnnotationVisitor av,final String name,final Object value){  if (av != null) {    if (value instanceof String[]) {      String[] typeconst=(String[])value;      av.visitEnum(name,typeconst[0],typeconst[1]);    } else     if (value instanceof AnnotationNode) {      AnnotationNode an=(AnnotationNode)value;      an.accept(av.visitAnnotation(name,an.desc));    } else     if (value instanceof List) {      AnnotationVisitor v=av.visitArray(name);      if (v != null) {        List<?> array=(List<?>)value;        for (int j=0; j < array.size(); ++j) {          accept(v,null,array.get(j));        }        v.visitEnd();      }    } else {      av.visit(name,value);    }  }}  }
class C{  public static WCS100Capabilities retrieve(URI uri) throws Exception {  try {    CapabilitiesRequest request=new CapabilitiesRequest(uri,"WCS");    request.setVersion("1.0.0");    return new WCS100Capabilities(request.toString());  } catch (  URISyntaxException e) {    String message=Logging.getMessage("OGC.GetCapabilitiesURIInvalid",uri);    Logging.logger().warning(message);    throw new IllegalArgumentException(message);  }}  }
class C{  @Override public void process(Map<K,V> tuple){  HashMap<K,V> dtuple=null;  for (  Map.Entry<K,V> e : tuple.entrySet()) {    boolean contains=keys.containsKey(e.getKey());    if ((contains && !inverse) || (!contains && inverse)) {      if (dtuple == null) {        dtuple=new HashMap<K,V>(4);      }      dtuple.put(cloneKey(e.getKey()),cloneValue(e.getValue()));    }  }  if (dtuple != null) {    filter.emit(dtuple);  }}  }
class C{  private <T extends MessageNano>T unpackProto(T proto,byte[] buffer,int dataSize) throws InvalidProtocolBufferNanoException {  MessageNano.mergeFrom(proto,readCheckedBytes(buffer,dataSize));  if (DEBUG)   Log.d(TAG,"unpacked proto " + proto);  return proto;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private Angular2ImageResource(){}  }
class C{  public static boolean isSubpathOf(Path subpath,Path path) throws IOException {  return isSubpathOf(subpath,path,true);}  }
class C{  public static DateTimeFormatter weekyear(){  return weekyearElement();}  }
class C{  static void testStoreWithBadEncoding() throws IOException {  System.out.println("testStoreWithBadEncoding");  Properties props=new Properties();  props.put("foo","bar");  ByteArrayOutputStream out=new ByteArrayOutputStream();  try {    props.storeToXML(out,null,"BAD");    throw new RuntimeException("UnsupportedEncodingException expected");  } catch (  UnsupportedEncodingException expected) {  }}  }
class C{  public void unread(char cbuf[]) throws IOException {  unread(cbuf,0,cbuf.length);}  }
class C{  @Override public void add(Block block,Object key){}  }
class C{  public void generateKeyPair() throws NoSuchAlgorithmException, NoSuchProviderException, InvalidKeySpecException {  KeyPairGenerator keyPairGenerator=KeyPairGenerator.getInstance("RSA","BC");  if (keySize < 512) {    keySize=512;  }  keyPairGenerator.initialize(keySize,new SecureRandom());  KeyPair keyPair=keyPairGenerator.generateKeyPair();  privateKey=keyPair.getPrivate();  publicKey=keyPair.getPublic();}  }
class C{  public boolean satisfies(HyperGraph hg,HGHandle handle){  if (ras == null)   ras=(HGRandomAccessResult)query.execute();  return ras.goTo(handle,true) == HGRandomAccessResult.GotoResult.found;}  }
class C{  @SuppressWarnings("unchecked") static <T>void downSamplingMergeInto(final ItemsSketch<T> src,final ItemsSketch<T> tgt){  final int targetK=tgt.getK();  final int sourceK=src.getK();  if ((sourceK % targetK) != 0) {    throw new SketchesArgumentException("source.getK() must equal target.getK() * 2^(nonnegative integer).");  }  final int downFactor=sourceK / targetK;  checkIfPowerOf2(downFactor,"source.getK()/target.getK() ratio");  int lgDownFactor=Integer.numberOfTrailingZeros(downFactor);  final Object[] sourceLevels=src.getCombinedBuffer();  final Object[] sourceBaseBuffer=src.getCombinedBuffer();  final long nFinal=tgt.getN() + src.getN();  for (int i=0; i < src.getBaseBufferCount(); i++) {    tgt.update((T)sourceBaseBuffer[i]);  }  maybeGrowLevels(nFinal,tgt);  final Object[] scratchBuf=new Object[2 * targetK];  final Object[] downBuf=new Object[targetK];  long srcBitPattern=src.getBitPattern();  for (int srcLvl=0; srcBitPattern != 0L; srcLvl++, srcBitPattern>>>=1) {    if ((srcBitPattern & 1L) > 0L) {      justZipWithStride(sourceLevels,(2 + srcLvl) * sourceK,downBuf,0,targetK,downFactor);      inPlacePropagateCarry(srcLvl + lgDownFactor,(T[])downBuf,0,(T[])scratchBuf,0,false,tgt);    }  }  tgt.n_=nFinal;  assert tgt.getN() / (2 * targetK) == tgt.getBitPattern();  final T srcMax=src.getMaxValue();  final T srcMin=src.getMinValue();  final T tgtMax=tgt.getMaxValue();  final T tgtMin=tgt.getMinValue();  if (src.getComparator().compare(srcMax,tgtMax) > 0)   tgt.maxValue_=srcMax;  if (src.getComparator().compare(srcMin,tgtMin) < 0)   tgt.minValue_=srcMin;}  }
class C{  public void refreshUpdateDividers() throws Exception {  m_dividers.refreshUpdateDividers();}  }
class C{  public void testServerResponseRetransmissions() throws Exception {  stunStack.addRequestListener(serverAddress,requestCollector);  stunStack.sendRequest(bindingRequest,serverAddress,clientAddress,responseCollector);  requestCollector.waitForRequest();  StunMessageEvent evt=requestCollector.receivedRequests.get(0);  byte[] tid=evt.getMessage().getTransactionID();  stunStack.sendResponse(tid,bindingResponse,serverAddress,clientAddress);  responseCollector.waitForResponse();  assertTrue("There were no retransmissions of a binding response",responseCollector.receivedResponses.size() == 1);}  }
class C{  private void expandLeafNodes(SpatialPrimitiveDistanceFunction<NV> distFunction,DeLiCluNode node1,DeLiCluNode node2,Relation<KNNList> knns){  if (LOG.isDebuggingFinest()) {    LOG.debugFinest("ExpandLeafNodes: " + node1.getPageID() + " + "+ node2.getPageID());  }  int numEntries_1=node1.getNumEntries();  int numEntries_2=node2.getNumEntries();  for (int i=0; i < numEntries_1; i++) {    DeLiCluEntry entry1=node1.getEntry(i);    if (!entry1.hasUnhandled()) {      continue;    }    for (int j=0; j < numEntries_2; j++) {      DeLiCluEntry entry2=node2.getEntry(j);      if (!entry2.hasHandled()) {        continue;      }      double distance=distFunction.minDist(entry1,entry2);      double reach=MathUtil.max(distance,knns.get(((LeafEntry)entry2).getDBID()).getKNNDistance());      SpatialObjectPair dataPair=new SpatialObjectPair(reach,entry1,entry2,false);      heap.add(dataPair);    }  }}  }
class C{  public static long copy(InputStream from,OutputStream to) throws IOException {  checkNotNull(from);  checkNotNull(to);  byte[] buf=new byte[BUF_SIZE];  long total=0;  while (true) {    int r=from.read(buf);    if (r == -1) {      break;    }    to.write(buf,0,r);    total+=r;  }  return total;}  }
class C{  private void addNewAlgorithm(Classifier newScheme){  if (!m_Editing) {    m_AlgorithmListModel.addElement(newScheme);  } else {    m_AlgorithmListModel.setElementAt(newScheme,m_List.getSelectedIndex());  }  updateExperiment();  m_Editing=false;}  }
class C{  public SimpleHttpRequestBuilder content(String chars,Charset charset){  return content(chars.getBytes(charset));}  }
class C{  public void overwriteSetSelectedText(String str){  if (!overwrite || selectionStart != selectionEnd) {    setSelectedText(str);    return;  }  int caret=getCaretPosition();  int caretLineEnd=getLineEndOffset(getCaretLine());  if (caretLineEnd - caret <= str.length()) {    setSelectedText(str);    return;  }  document.beginCompoundEdit();  try {    document.remove(caret,str.length());    document.insertString(caret,str,null);  } catch (  BadLocationException bl) {    bl.printStackTrace();  } finally {    document.endCompoundEdit();  }}  }
class C{  public void add(){  if (isAdded) {    logger.warn("-- add() > already added");  }  try {    Runtime.getRuntime().addShutdownHook(this);    isAdded=true;  } catch (  IllegalStateException|IllegalArgumentException|SecurityException ex) {    logger.warn("-- add() > exception: ",ex);  }}  }
class C{  @Override public String toString(){  String result=toString;  if (result == null) {    result=computeToString();    toString=result;  }  return result;}  }
class C{  @Override public OptimizedEdgeIterator resetForNode(int node){  this.position=optimizedDegreeEdgePool.getNodePosition(node);  this.degree=optimizedDegreeEdgePool.getNodeDegree(node);  currentEdge=0;  return this;}  }
class C{  protected Cluster createNewCluster(TenantOrg tenant,ClusterParam param){  Cluster cluster=new Cluster();  cluster.setId(URIUtil.createId(Cluster.class));  cluster.setTenant(tenant.getId());  populateCluster(param,cluster);  return cluster;}  }
class C{  @SuppressWarnings("unchecked") public SolrHttpRequestRetryHandler(final int retryCount){  this(retryCount,Arrays.asList(InterruptedIOException.class,UnknownHostException.class,ConnectException.class,SSLException.class));}  }
class C{  private GfManagerAgentConfig buildAgentConfig(InternalLogWriter logWriter){  RemoteTransportConfig conf=new RemoteTransportConfig(isMcastEnabled(),getDisableTcp(),getDisableAutoReconnect(),getBindAddress(),buildSSLConfig(),parseLocators(),getMembershipPortRange(),getTcpPort(),DistributionManager.ADMIN_ONLY_DM_TYPE);  return new GfManagerAgentConfig(getSystemName(),conf,logWriter,this.alertLevel.getSeverity(),this,this);}  }
class C{  private static int indexFor(int h,int length){  return h & (length - 1);}  }
class C{  public Matrix solve(Matrix B){  if (B.getRowDimension() != m) {    throw new IllegalArgumentException("Matrix row dimensions must agree.");  }  if (!this.isNonsingular()) {    throw new RuntimeException("Matrix is singular.");  }  int nx=B.getColumnDimension();  Matrix Xmat=B.getMatrix(piv,0,nx - 1);  double[][] X=Xmat.getArray();  for (int k=0; k < n; k++) {    for (int i=k + 1; i < n; i++) {      for (int j=0; j < nx; j++) {        X[i][j]-=X[k][j] * LU[i][k];      }    }  }  for (int k=n - 1; k >= 0; k--) {    for (int j=0; j < nx; j++) {      X[k][j]/=LU[k][k];    }    for (int i=0; i < k; i++) {      for (int j=0; j < nx; j++) {        X[i][j]-=X[k][j] * LU[i][k];      }    }  }  return Xmat;}  }
class C{  private void handleMotionEventStateDragging(MotionEvent event,int policyFlags){  final int pointerIdBits=(1 << mDraggingPointerId);switch (event.getActionMasked()) {case MotionEvent.ACTION_DOWN:{      throw new IllegalStateException("Dragging state can be reached only if two " + "pointers are already down");    }case MotionEvent.ACTION_POINTER_DOWN:{    mCurrentState=STATE_DELEGATING;    if (mDraggingPointerId != INVALID_POINTER_ID) {      sendMotionEvent(event,MotionEvent.ACTION_UP,pointerIdBits,policyFlags);    }    sendDownForAllActiveNotInjectedPointers(event,policyFlags);  }break;case MotionEvent.ACTION_MOVE:{final int activePointerCount=mReceivedPointerTracker.getActivePointerCount();switch (activePointerCount) {case 1:{  }break;case 2:{if (isDraggingGesture(event)) {  int[] pointerIds=mTempPointerIds;  mReceivedPointerTracker.populateActivePointerIds(pointerIds);  final int firstPtrIndex=event.findPointerIndex(pointerIds[0]);  final int secondPtrIndex=event.findPointerIndex(pointerIds[1]);  final float firstPtrX=event.getX(firstPtrIndex);  final float firstPtrY=event.getY(firstPtrIndex);  final float secondPtrX=event.getX(secondPtrIndex);  final float secondPtrY=event.getY(secondPtrIndex);  final float deltaX=firstPtrX - secondPtrX;  final float deltaY=firstPtrY - secondPtrY;  final double distance=Math.hypot(deltaX,deltaY);  if (distance > mScaledMinPointerDistanceToUseMiddleLocation) {    event.setLocation(deltaX / 2,deltaY / 2);  }  sendMotionEvent(event,MotionEvent.ACTION_MOVE,pointerIdBits,policyFlags);} else {  mCurrentState=STATE_DELEGATING;  sendMotionEvent(event,MotionEvent.ACTION_UP,pointerIdBits,policyFlags);  sendDownForAllActiveNotInjectedPointers(event,policyFlags);}}break;default :{mCurrentState=STATE_DELEGATING;sendMotionEvent(event,MotionEvent.ACTION_UP,pointerIdBits,policyFlags);sendDownForAllActiveNotInjectedPointers(event,policyFlags);}}}break;case MotionEvent.ACTION_POINTER_UP:{final int pointerId=event.getPointerId(event.getActionIndex());if (pointerId == mDraggingPointerId) {mDraggingPointerId=INVALID_POINTER_ID;sendMotionEvent(event,MotionEvent.ACTION_UP,pointerIdBits,policyFlags);}}break;case MotionEvent.ACTION_UP:{mAms.onTouchInteractionEnd();sendAccessibilityEvent(AccessibilityEvent.TYPE_TOUCH_INTERACTION_END);final int pointerId=event.getPointerId(event.getActionIndex());if (pointerId == mDraggingPointerId) {mDraggingPointerId=INVALID_POINTER_ID;sendMotionEvent(event,MotionEvent.ACTION_UP,pointerIdBits,policyFlags);}mCurrentState=STATE_TOUCH_EXPLORING;}break;case MotionEvent.ACTION_CANCEL:{clear(event,policyFlags);}break;}}  }
class C{  public NotificationChain basicSetLeftOperand(Expression newLeftOperand,NotificationChain msgs){  Expression oldLeftOperand=leftOperand;  leftOperand=newLeftOperand;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,ExpressionsPackage.NUMERICAL_ADD_SUBTRACT_EXPRESSION__LEFT_OPERAND,oldLeftOperand,newLeftOperand);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  final public void filterInputEvent(InputEvent event,int policyFlags){  mH.obtainMessage(MSG_INPUT_EVENT,policyFlags,0,event).sendToTarget();}  }
class C{  public <T>DrawingAttributeAction(DrawingEditor editor,AttributeKey<T> key,@Nullable T value){  this(editor,key,value,null,null);}  }
class C{  public void disableControls(){  VOLUME.setEnabled(false);  PAUSE_BUTTON.setEnabled(false);}  }
class C{  void checkEndMethod(){  if (endMethod) {    throw new IllegalStateException("Cannot visit elements after visitEnd has been called.");  }}  }
class C{  public void removeListener(ConnectableDeviceListener listener){  listeners.remove(listener);}  }
class C{  public static String nextCode(final Date d){  return nextCode(d,true);}  }
class C{  public final void prependPhase(LIRPhase<C> phase){  phases.add(0,phase);}  }
class C{  public static String[] values(){  return ALL_VALUES;}  }
class C{  public NNChainHAC(LanceWilliamsDissimilarity distMeasure){  this(distMeasure,new EuclideanDistance());}  }
class C{  protected TestedProjectsImpl(){  super();}  }
class C{  public void boot(final String className,final String[] args){  try {    System.setSecurityManager(null);  } catch (  final Throwable t) {    t.printStackTrace(System.err);  }  boolean startSelfBuild=true;  if (isSigned()) {    startSelfBuild=false;    System.err.println("Integrating old updates and looking for new ones");    try {      AccessController.doPrivileged(new PrivilegedBoot<Object>(className,args));    } catch (    final SecurityException e) {      e.printStackTrace();      int res=LoneOptionDialog.showConfirmDialog("Sorry an error occurred because of inconsistent code signing.\r\n" + "Delete update files so that they are downloaded again after you restart " + ClientGameConfiguration.get("GAME_NAME") + "?\r\n"+ "Note: This exception can occur if you include signed jars into a self build client.",ClientGameConfiguration.get("GAME_NAME"),JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);      if (res == JOptionPane.YES_OPTION) {        clearUpdateFiles();        System.exit(-1);      }      startSelfBuild=true;    }  }  if (startSelfBuild) {    System.err.println("Self build client, starting without update .jar-files");    try {      final ClassLoader classLoader=createClassloader(false,false);      final Class<?> clazz=classLoader.loadClass(className);      final Method method=clazz.getMethod("main",args.getClass());      method.invoke(null,(Object)args);    } catch (    final Exception err) {      err.printStackTrace(System.err);      LoneOptionDialog.showMessageDialog("Something nasty happened while trying to start your self build client: " + err);    }  }}  }
class C{  public void focusLost(FocusEvent e){  m_setting=true;  try {    String clear=m_text.getText();    if (clear.length() > m_fieldLength)     clear=clear.substring(0,m_fieldLength);    fireVetoableChange(m_columnName,m_oldText,clear);  } catch (  PropertyVetoException pve) {  }  m_setting=false;}  }
class C{  private void printHeader(Problem problem,boolean reduced,List<String> attributes,PrintWriter writer){  int numberOfVariables=problem.getNumberOfVariables();  int numberOfObjectives=problem.getNumberOfObjectives();  if (reduced) {    numberOfVariables=0;  }  writer.println("% Title: MOEA Framework Data Set");  writer.println("% Date: " + new Date());  writer.print("@RELATION \"");  writer.print(problem.getName());  writer.println("\"");  if (attributes.size() == numberOfObjectives) {    for (int i=0; i < numberOfVariables; i++) {      writer.print("@ATTRIBUTE Var");      writer.print(i + 1);      writer.println(" NUMERIC");    }    for (int i=0; i < numberOfObjectives; i++) {      writer.print("@ATTRIBUTE ");      writer.print(attributes.get(i));      writer.println(" NUMERIC");    }  } else   if (attributes.size() == numberOfVariables + numberOfObjectives) {    for (int i=0; i < numberOfVariables + numberOfObjectives; i++) {      writer.print("@ATTRIBUTE ");      writer.print(attributes.get(i));      writer.println(" NUMERIC");    }  } else {    if (!attributes.isEmpty()) {      System.err.println("incorrect number of names, using defaults");    }    for (int i=0; i < numberOfVariables; i++) {      writer.print("@ATTRIBUTE Var");      writer.print(i + 1);      writer.println(" NUMERIC");    }    for (int i=0; i < numberOfObjectives; i++) {      writer.print("@ATTRIBUTE Obj");      writer.print(i + 1);      writer.println(" NUMERIC");    }  }  writer.println("@DATA");}  }
class C{  void close(int contextPrec,int ownPrec) throws IOException {  if (ownPrec < contextPrec)   out.write(")");}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public AnimationBuilder rotationY(float... rotationY){  return property("rotationY",rotationY);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:49.392 -0500",hash_original_method="704394E46FC1A63E6F1F5F09E7A57B00",hash_generated_method="8FAF493A55EDB5B9A9A1EEB1456CF4B2") public boolean isNamespaceDeclUris(){  return namespaceDeclUris;}  }
class C{  public static String readString(final JSONObject jsonObject,final String key,final boolean required,final boolean notNull) throws JSONException {  if (required) {    return jsonObject.getString(key);  }  if (notNull && jsonObject.isNull(key)) {    throw new JSONException(String.format(Locale.US,NULL_VALUE_FORMAT_OBJECT,key));  }  String value=null;  if (!jsonObject.isNull(key)) {    value=jsonObject.getString(key);  }  return value;}  }
class C{  public static String xmlNode(String name,String attributes,String content,boolean indent){  String start=attributes == null ? name : name + attributes;  if (content == null) {    return "<" + start + "/>\n";  }  if (indent && content.indexOf('\n') >= 0) {    content="\n" + indent(content);  }  return "<" + start + ">"+ content+ "</"+ name+ ">\n";}  }
class C{  public int stealOperatorsFrom(ExecutionUnit otherUnit){  int failedReconnects=0;  Map<String,InputPort> sourceMap=new HashMap<String,InputPort>();  Map<String,OutputPort> sinkMap=new HashMap<String,OutputPort>();  for (  OutputPort source : otherUnit.getInnerSources().getAllPorts()) {    if (source.isConnected()) {      sourceMap.put(source.getName(),source.getDestination());    }  }  otherUnit.getInnerSources().disconnectAll();  for (  InputPort sink : otherUnit.getInnerSinks().getAllPorts()) {    if (sink.isConnected()) {      sinkMap.put(sink.getName(),sink.getSource());    }  }  otherUnit.getInnerSinks().disconnectAll();  Iterator<Operator> i=otherUnit.operators.iterator();  while (i.hasNext()) {    Operator operator=i.next();    i.remove();    otherUnit.unregister(operator);    Process otherProcess=operator.getProcess();    if (otherProcess != null) {      operator.unregisterOperator(otherProcess);    }    this.operators.add(operator);    operator.setEnclosingProcess(null);    registerOperator(operator,true);  }  for (  Map.Entry<String,InputPort> entry : sourceMap.entrySet()) {    OutputPort mySource=getInnerSources().getPortByName(entry.getKey());    if (mySource != null) {      mySource.connectTo(entry.getValue());    } else {      failedReconnects++;    }  }  getInnerSources().unlockPortExtenders();  for (  Map.Entry<String,OutputPort> entry : sinkMap.entrySet()) {    InputPort mySink=getInnerSinks().getPortByName(entry.getKey());    if (mySink != null) {      entry.getValue().connectTo(mySink);    } else {      failedReconnects++;    }  }  getInnerSinks().unlockPortExtenders();  fireUpdate(this);  return failedReconnects;}  }
class C{  public static boolean isUsableConnection(Connection C){  boolean open=false, valid=false;  final int timeoutSeconds=MAX_CONNECTION_PROBE_TIME;  logger.trace("isUsableConnection() -->entry");  if (C == null) {    logger.error("isUsableConnection() <-- exit (No Connection)");    return false;  }  try {    open=!C.isClosed();  } catch (  Throwable t) {    surfaceThrowable("isUsableConnection called Connection.isClosed()",t);  }  try {    valid=C.isValid(timeoutSeconds);  } catch (  Throwable t) {    surfaceThrowable("isUsableConnection called isValid()",t);  }  logger.trace(String.format("isUsableConnection() <-- exit (Connection is open: %b, is valid: %b)",open,valid));  return open && valid;}  }
class C{  private void destroyCaches(){  cache1.destroy();  cache2.destroy();}  }
class C{  public int size(){  return labelsToKeys.size();}  }
class C{  private boolean isJavadocProcessingEnabled(){  IJavaProject project=fCompilationUnit.getJavaProject();  boolean processJavadoc;  if (project == null)   processJavadoc=JavaCore.ENABLED.equals(JavaCore.getOption(JavaCore.COMPILER_DOC_COMMENT_SUPPORT)); else   processJavadoc=JavaCore.ENABLED.equals(project.getOption(JavaCore.COMPILER_DOC_COMMENT_SUPPORT,true));  return processJavadoc;}  }
class C{  static boolean primingNeedsParens(SemanticNode node){  if (!(node instanceof OpApplNode)) {    return false;  }  if (((OpApplNode)node).getArgs().length == 0) {    return false;  }  SymbolNode ops=((OpApplNode)node).getOperator();  if (ops instanceof OpDefNode) {    OpDefNode odn=(OpDefNode)ops;    return (odn.getKind() == ASTConstants.BuiltInKind) || !StringHelper.isIdentifier(odn.getName().toString());  } else {    return false;  }}  }
class C{  public static void layoutControls(Control[] controls,Control grabbingControl,Control colSpanningControl){  assertNotNull(controls);  controls=ArrayUtil.removeAll(controls,null);  if (controls.length == 0) {    return;  }  GridLayout gridLayout=(GridLayout)controls[0].getParent().getLayout();  int extraColumns=gridLayout.numColumns - controls.length;  if (extraColumns < 0) {    extraColumns=0;  }  for (int ix=0; ix < controls.length; ix++) {    Control control=controls[ix];    GridData gridData;    if (control == grabbingControl) {      gridData=layoutExpandedControl(control);    } else {      gridData=GridDataFactory.swtDefaults().create();      control.setLayoutData(gridData);    }    if (control == colSpanningControl) {      gridData.horizontalSpan=extraColumns + 1;    }  }}  }
class C{  public static UUID uuidFromString(String str){  if (str == null) {    return null;  }  if (str.length() == 32) {    StringBuilder sb=new StringBuilder(str);    sb.insert(8,'-');    sb.insert(13,'-');    sb.insert(18,'-');    sb.insert(23,'-');    return UUID.fromString(sb.toString());  } else {    return UUID.fromString(str);  }}  }
class C{  public void mouseMoved(MouseEvent e){}  }
class C{  private String removeLeadingText(String text,String leadingText){  if (Helper.isNullOrEmpty(text) || Helper.isNullOrEmpty(leadingText))   return text;  int textLength=text.length();  int leadingLength=leadingText.length();  int cutStart=0;  int cutStartMax=textLength - leadingLength - 1;  boolean scanning=true;  while (scanning) {    if (cutStart > cutStartMax)     return text;switch (text.charAt(cutStart)) {case ' ':      cutStart++;    break;case '<':  int tagEnd=text.indexOf('>',cutStart);if (tagEnd == -1) return text; else cutStart=tagEnd + 1;break;default :scanning=false;break;}}if (!text.substring(cutStart).toUpperCase(Locale.ENGLISH).startsWith(leadingText.toUpperCase(Locale.ENGLISH))) return text;int cutEnd=cutStart + leadingLength;scanning=true;while (scanning) {if (cutEnd >= textLength) {scanning=false;} else {switch (text.charAt(cutEnd)) {case ' ':case ':':cutEnd++;break;case '<':if (text.charAt(cutEnd + 1) != '/') {if (text.substring(cutEnd).toUpperCase().startsWith("<BR")) {int tagEnd=text.indexOf('>',cutEnd + 1);if (tagEnd != -1) {cutEnd=tagEnd + 1;break;}}scanning=false;break;} else {int tagEnd=text.indexOf('>');if (tagEnd == -1) {scanning=false;break;} else {cutEnd=tagEnd + 1;}}break;default :scanning=false;break;}}}if (cutStart > 0) return (text.substring(0,cutStart) + text.substring(cutEnd)).trim(); else return text.substring(cutEnd).trim();}  }
class C{  protected Element createNewTextElement(String text){  Element e=new Element(text,true);  e.caseSensitive=caseSensitive;  return e;}  }
class C{  public void testSequenceBoundedLinearizableOperations() throws Throwable {  testSequenceOperations(5,Query.ConsistencyLevel.LINEARIZABLE_LEASE);}  }
class C{  public static String replace(String original,char search,String replace){  if (original == null)   original="";  return doReplace(new StringBuffer(original),search,replace,true).toString();}  }
class C{  public XMLDocument() throws Exception {  m_Factory=DocumentBuilderFactory.newInstance();  m_XPath=XPathFactory.newInstance(XPathFactory.DEFAULT_OBJECT_MODEL_URI).newXPath();  setDocType(null);  setRootNode(null);  setValidating(false);}  }
class C{  public boolean hasHousename(){  return hasExtension(HouseName.class);}  }
class C{  public void analyze(Node node){  if (node instanceof DocumentNode)   documentNode=(DocumentNode)node;  super.analyze(node);}  }
class C{  public void addRoles(final Set<String> newRoles){  if (null == this.roles) {    setRoles(new StringSet());  }  if (newRoles != null && !newRoles.isEmpty()) {    roles.addAll(newRoles);  }}  }
class C{  public static boolean isSignedIn(){  String userIdToken=AuthToken.get();  try {    verifyAndDeserialize(userIdToken);  } catch (  Exception e) {    return false;  }  return true;}  }
class C{  protected void checkAllDriversForRootAddress(Address addr){  if (addr.isZero())   return;  SSGCspy.ss0Driver.handleRoot(addr);  SSGCspy.ss1Driver.handleRoot(addr);  SSGCspy.immortalDriver.handleRoot(addr);  SSGCspy.losNurseryDriver.handleRoot(addr);  SSGCspy.losDriver.handleRoot(addr);  SSGCspy.plosNurseryDriver.handleRoot(addr);  SSGCspy.plosDriver.handleRoot(addr);}  }
class C{  private String printSFormat(String x){  int nPrint=x.length();  int width=fieldWidth;  if (precisionSet && nPrint > precision)   nPrint=precision;  if (!fieldWidthSet)   width=nPrint;  int n=0;  if (width > nPrint)   n+=width - nPrint;  if (nPrint >= x.length())   n+=x.length(); else   n+=nPrint;  char[] ca=new char[n];  int i=0;  if (leftJustify) {    if (nPrint >= x.length()) {      char[] csx=x.toCharArray();      for (i=0; i < x.length(); i++)       ca[i]=csx[i];    } else {      char[] csx=x.substring(0,nPrint).toCharArray();      for (i=0; i < nPrint; i++)       ca[i]=csx[i];    }    for (int j=0; j < width - nPrint; j++, i++)     ca[i]=' ';  } else {    for (i=0; i < width - nPrint; i++)     ca[i]=' ';    if (nPrint >= x.length()) {      char[] csx=x.toCharArray();      for (int j=0; j < x.length(); i++, j++)       ca[i]=csx[j];    } else {      char[] csx=x.substring(0,nPrint).toCharArray();      for (int j=0; j < nPrint; i++, j++)       ca[i]=csx[j];    }  }  return new String(ca);}  }
class C{  private <T>PubsubFuture<T> request(final String operation,final HttpMethod method,final String path,final Class<T> responseClass){  return request(operation,method,path,responseClass,NO_PAYLOAD);}  }
class C{  public void initNormals(){  normals=new DenseMatrix(3,4);  normals.vals[0][0]=-edges.vals[1][0];  normals.vals[1][0]=edges.vals[0][0];  normals.vals[2][0]=1;  normals.vals[0][1]=-edges.vals[1][1];  normals.vals[1][1]=edges.vals[0][1];  normals.vals[2][1]=1;  normals.vals[0][2]=-edges.vals[1][2];  normals.vals[1][2]=edges.vals[0][2];  normals.vals[2][2]=1;  normals.vals[0][3]=-edges.vals[1][3];  normals.vals[1][3]=edges.vals[0][3];  normals.vals[2][3]=1;}  }
class C{  protected TemplateException unknownSettingException(String name){  return new UnknownSettingException(getEnvironment(),name,getCorrectedNameForUnknownSetting(name));}  }
class C{  public void reset(){  releaseDTMXRTreeFrags();  if (m_rtfdtm_stack != null)   for (java.util.Enumeration e=m_rtfdtm_stack.elements(); e.hasMoreElements(); )   m_dtmManager.release((DTM)e.nextElement(),true);  m_rtfdtm_stack=null;  m_which_rtfdtm=-1;  if (m_global_rtfdtm != null)   m_dtmManager.release(m_global_rtfdtm,true);  m_global_rtfdtm=null;  m_dtmManager=DTMManager.newInstance(org.apache.xpath.objects.XMLStringFactoryImpl.getFactory());  m_saxLocations.removeAllElements();  m_axesIteratorStack.removeAllElements();  m_contextNodeLists.removeAllElements();  m_currentExpressionNodes.removeAllElements();  m_currentNodes.removeAllElements();  m_iteratorRoots.RemoveAllNoClear();  m_predicatePos.removeAllElements();  m_predicateRoots.RemoveAllNoClear();  m_prefixResolvers.removeAllElements();  m_prefixResolvers.push(null);  m_currentNodes.push(DTM.NULL);  m_currentExpressionNodes.push(DTM.NULL);  m_saxLocations.push(null);}  }
class C{  public static String readString(InputStream is,String encoding){  if (is == null)   return null;  BufferedReader reader=null;  try {    StringBuffer buffer=new StringBuffer();    char[] part=new char[2048];    int read=0;    reader=new BufferedReader(new InputStreamReader(is,encoding));    while ((read=reader.read(part)) != -1)     buffer.append(part,0,read);    return buffer.toString();  } catch (  IOException ex) {  } finally {    if (reader != null) {      try {        reader.close();      } catch (      IOException ex) {      }    }  }  return null;}  }
class C{  public boolean isClassNode(){  return cn != null;}  }
class C{  public PdfRendererBuilder useReplacementText(String replacement){  this._replacementText=replacement;  return this;}  }
class C{  private boolean validateColors(float[] colors){  if (colors == null || colors.length != 3) {    return false;  }  for (int i=0; i < 3; i++) {    colors[i]=MathUtils.constrain(colors[i],0.0f,1.0f);  }  return true;}  }
class C{  public String chooseColorString(int type,Color presetColor,Color secondaryColor,String name,String text){  return HtmlColors.getNamedColorString(chooseColor(type,presetColor,secondaryColor,name,text));}  }
class C{  public static void main(String[] args) throws IOException {  SWFWriter writer=new SWFWriter(System.out);  SWFReader reader=new SWFReader(writer,System.in);  reader.readFile();  System.out.flush();}  }
class C{  public void addWith(BaseComponent component){  if (with == null) {    with=new ArrayList<BaseComponent>();  }  component.parent=this;  with.add(component);}  }
class C{  private BitMatrix sampleGrid(BitMatrix image,ResultPoint topLeft,ResultPoint bottomLeft,ResultPoint bottomRight,ResultPoint topRight) throws NotFoundException {  int dimension;  if (compact) {    dimension=4 * nbLayers + 11;  } else {    if (nbLayers <= 4) {      dimension=4 * nbLayers + 15;    } else {      dimension=4 * nbLayers + 2 * ((nbLayers - 4) / 8 + 1) + 15;    }  }  GridSampler sampler=GridSampler.getInstance();  return sampler.sampleGrid(image,dimension,dimension,0.5f,0.5f,dimension - 0.5f,0.5f,dimension - 0.5f,dimension - 0.5f,0.5f,dimension - 0.5f,topLeft.getX(),topLeft.getY(),topRight.getX(),topRight.getY(),bottomRight.getX(),bottomRight.getY(),bottomLeft.getX(),bottomLeft.getY());}  }
class C{  public NetworkPermission(String name){  super(name);}  }
class C{  private void fireOperatorMoved(final Operator op){  List<ProcessInteractionListener> copy=new LinkedList<>(processInteractionListeners);  for (  ProcessInteractionListener l : copy) {    l.operatorMoved(op);  }}  }
class C{  public boolean isInStandbyMode() throws SchedulerException {  try {    return getRemoteScheduler().isInStandbyMode();  } catch (  RemoteException re) {    throw invalidateHandleCreateException("Error communicating with remote scheduler.",re);  }}  }
class C{  public void remove(final DLItem item){  checkWidget();  if (item == null) {    SWT.error(SWT.ERROR_NULL_ARGUMENT);  }  if (!items.contains(item)) {    SWT.error(SWT.ERROR_INVALID_ARGUMENT);  }  items.remove(item);  redrawTables();}  }
class C{  public void releaseResultSet(ResultSet rs){  if (rs == null)   return;  String rsName=rs.toString();  try {    rs.close();  } catch (  SQLException e) {    s_dbEngine.setDBError(true);    s_logger.log(Level.SEVERE,this.getClass().getSimpleName(),Thread.currentThread().getStackTrace()[2].getMethodName(),"releaseResultSetError",new Object[]{rsName,e.getMessage()});  } finally {    rs=null;  }}  }
class C{  @Override public boolean supportsCapability(OperatorCapability lc){  if (lc == OperatorCapability.NUMERICAL_ATTRIBUTES) {    return true;  }  if (lc == OperatorCapability.POLYNOMINAL_LABEL) {    return true;  }  if (lc == OperatorCapability.BINOMINAL_LABEL) {    return true;  }  return false;}  }
class C{  private void push(final int type){  if (outputStack == null) {    outputStack=new int[10];  }  int n=outputStack.length;  if (outputStackTop >= n) {    int[] t=new int[Math.max(outputStackTop + 1,2 * n)];    System.arraycopy(outputStack,0,t,0,n);    outputStack=t;  }  outputStack[outputStackTop++]=type;  int top=owner.inputStackTop + outputStackTop;  if (top > owner.outputStackMax) {    owner.outputStackMax=top;  }}  }
class C{  public void reset(){  FLog.v(TAG,"reset");  mGestureDetector.reset();  mPreviousTransform.reset();  mActiveTransform.reset();  onTransformChanged();}  }
class C{  public JRadioButton createJRadioButton(String name) throws MissingResourceException, ResourceFormatException, MissingListenerException {  JRadioButton result=new JRadioButton(getString(name + TEXT_SUFFIX));  initializeButton(result,name);  try {    result.setSelected(getBoolean(name + SELECTED_SUFFIX));  } catch (  MissingResourceException e) {  }  return result;}  }
class C{  private void assertReaderConfigurations(Optional<Integer> numberOfShards,int whichReader,int expectedOffset,int expectedMaxResults) throws Exception {  RdeContactInput input=getInput(numberOfShards);  List<?> readers=input.createReaders();  RdeContactReader reader=(RdeContactReader)readers.get(whichReader);  assertImportBucketAndFilename(reader);  assertThat(reader.offset).isEqualTo(expectedOffset);  assertThat(reader.maxResults).isEqualTo(expectedMaxResults);}  }
class C{  private void updateTabSecurityState(Tab t){  if (t != null && t.inForeground()) {    mNavigationBar.setSecurityState(t.getSecurityState());    setUrlTitle(t);  }}  }
class C{  private Map<PhobiusFeatureType,Signature> loadPersistedSignatures(){  Map<PhobiusFeatureType,Signature> signatures=new HashMap<PhobiusFeatureType,Signature>(PhobiusFeatureType.values().length);  final SignatureLibraryRelease release=loadPhobiusRelease();  final Query query=entityManager.createQuery("select s from Signature s where s.signatureLibraryRelease = :release");  query.setParameter("release",release);  @SuppressWarnings("unchecked") List<Signature> retrievedSignatures=query.getResultList();  for (  final PhobiusFeatureType type : PhobiusFeatureType.values()) {    boolean found=false;    for (    final Signature retrievedSignature : retrievedSignatures) {      if (type.getName().equals(retrievedSignature.getName()) && type.getAccession().equals(retrievedSignature.getAccession()) && type.getDescription().equals(retrievedSignature.getDescription())) {        signatures.put(type,retrievedSignature);        found=true;        break;      }    }    if (!found) {      Signature.Builder builder=new Signature.Builder(type.getAccession());      final Signature signature=builder.name(type.getName()).description(type.getDescription()).signatureLibraryRelease(release).build();      entityManager.persist(signature);      signatures.put(type,signature);    }  }  return signatures;}  }
class C{  protected void put(String propName,Object propValue){  properties.put(propName,propValue);}  }
class C{  public PostRenderViewEvent(UIViewRoot root){  super(root);}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  private void actionOK(){  if (fCreateNew.isSelected()) {    KeyNamePair pp=(KeyNamePair)fWarehouse.getSelectedItem();    if (pp != null)     getWarehouseInfo(pp.getKey());    String mandatoryFields="";    if (m_M_Warehouse_ID == 0)     mandatoryFields+=lWarehouse.getText() + " - ";    if (fValue.getText().length() == 0)     mandatoryFields+=lValue.getText() + " - ";    if (fX.getText().length() == 0)     mandatoryFields+=lX.getText() + " - ";    if (fY.getText().length() == 0)     mandatoryFields+=lY.getText() + " - ";    if (fZ.getText().length() == 0)     mandatoryFields+=lZ.getText() + " - ";    if (mandatoryFields.length() != 0) {      ADialog.error(m_WindowNo,this,"FillMandatory",mandatoryFields.substring(0,mandatoryFields.length() - 3));      return;    }    MLocator loc=MLocator.get(Env.getCtx(),m_M_Warehouse_ID,fValue.getText(),fX.getText(),fY.getText(),fZ.getText());    m_M_Locator_ID=loc.getM_Locator_ID();    fLocator.addItem(loc);    fLocator.setSelectedItem(loc);  }  log.config("M_Locator_ID=" + m_M_Locator_ID);}  }
class C{  public Bitmap put(String key,Bitmap value){  return cache.put(key,value);}  }
class C{  public int size(){  return size;}  }
class C{  public boolean unBindServiceIfIdle(){  if (!isServiceConnected()) {    return false;  }  if (FileDownloadList.getImpl().isEmpty() && FileDownloadServiceProxy.getImpl().isIdle()) {    unBindService();    return true;  }  return false;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public static void asserts(final boolean b,final String string){  if (enabled && b != true) {    if (Cfg.DEBUG) {      Check.log(TAG + "##### Asserts - " + string+ " #####");    }  }}  }
class C{  protected void changeAvailabilityDatesAndAssert(final String skuCode,final Date availableFrom,final boolean expectedAvailable){  final Product product=productService.getProductBySkuCode(skuCode);  assertNotNull("No product exists: " + skuCode,product);  product.setAvailablefrom(availableFrom);  productService.update(product);  assertEquals(expectedAvailable,DomainApiUtils.isObjectAvailableNow(true,product.getAvailablefrom(),product.getAvailableto(),new Date()));}  }
class C{  private KrbAsReq build(EncryptionKey key) throws KrbException, IOException {  int[] eTypes;  if (password != null) {    eTypes=EType.getDefaults("default_tkt_enctypes");  } else {    EncryptionKey[] ks=Krb5Util.keysFromJavaxKeyTab(ktab,cname);    eTypes=EType.getDefaults("default_tkt_enctypes",ks);    for (    EncryptionKey k : ks)     k.destroy();  }  return new KrbAsReq(key,options,cname,sname,from,till,rtime,eTypes,addresses);}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == TypeProvidingElement.class) {switch (derivedFeatureID) {default :      return -1;  }}if (baseClass == NamedElement.class) {switch (derivedFeatureID) {default :    return -1;}}if (baseClass == PropertyNameOwner.class) {switch (derivedFeatureID) {case N4JSPackage.FIELD_ACCESSOR__DECLARED_NAME:  return N4JSPackage.PROPERTY_NAME_OWNER__DECLARED_NAME;default :return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public static int installSilent(Context context,String filePath){  return installSilent(context,filePath," -r " + getInstallLocationParams());}  }
class C{  public MetadataIndexCheckpoint(IndexMetadata metadata){  super(metadata);  nextPartitionId=0;}  }
class C{  public TimeSeriesPlotComponent(final String name){  super(name);  model=new TimeSeriesModel();  initializeAttributes();  addListener();  model.defaultInit();}  }
class C{  public void print() throws PrinterException {  PrinterJob printerJob=PrinterJob.getPrinterJob();  PageFormat pageFormat=printerJob.defaultPage();  Paper paper=pageFormat.getPaper();  Float pageWidth=(Float)hints.get(KEY_PAGE_WIDTH);  Float pageHeight=(Float)hints.get(KEY_PAGE_HEIGHT);  if (pageWidth != null) {    paper.setSize(pageWidth.floatValue(),paper.getHeight());  }  if (pageHeight != null) {    paper.setSize(paper.getWidth(),pageHeight.floatValue());  }  float x=0, y=0;  float width=(float)paper.getWidth();  float height=(float)paper.getHeight();  Float leftMargin=(Float)hints.get(KEY_MARGIN_LEFT);  Float topMargin=(Float)hints.get(KEY_MARGIN_TOP);  Float rightMargin=(Float)hints.get(KEY_MARGIN_RIGHT);  Float bottomMargin=(Float)hints.get(KEY_MARGIN_BOTTOM);  if (leftMargin != null) {    x=leftMargin.floatValue();    width-=leftMargin.floatValue();  }  if (topMargin != null) {    y=topMargin.floatValue();    height-=topMargin.floatValue();  }  if (rightMargin != null) {    width-=rightMargin.floatValue();  }  if (bottomMargin != null) {    height-=bottomMargin.floatValue();  }  paper.setImageableArea(x,y,width,height);  String pageOrientation=(String)hints.get(KEY_PAGE_ORIENTATION);  if (VALUE_PAGE_ORIENTATION_PORTRAIT.equalsIgnoreCase(pageOrientation)) {    pageFormat.setOrientation(PageFormat.PORTRAIT);  } else   if (VALUE_PAGE_ORIENTATION_LANDSCAPE.equalsIgnoreCase(pageOrientation)) {    pageFormat.setOrientation(PageFormat.LANDSCAPE);  } else   if (VALUE_PAGE_ORIENTATION_REVERSE_LANDSCAPE.equalsIgnoreCase(pageOrientation)) {    pageFormat.setOrientation(PageFormat.REVERSE_LANDSCAPE);  }  pageFormat.setPaper(paper);  pageFormat=printerJob.validatePage(pageFormat);  Boolean showPageFormat=(Boolean)hints.get(KEY_SHOW_PAGE_DIALOG);  if ((showPageFormat != null) && (showPageFormat.booleanValue())) {    PageFormat tmpPageFormat=printerJob.pageDialog(pageFormat);    if (tmpPageFormat == pageFormat) {      return;    }    pageFormat=tmpPageFormat;  }  printerJob.setPrintable(this,pageFormat);  Boolean showPrinterDialog;  showPrinterDialog=(Boolean)hints.get(KEY_SHOW_PRINTER_DIALOG);  if (showPrinterDialog != null && showPrinterDialog.booleanValue()) {    if (!printerJob.printDialog()) {      return;    }  }  printerJob.print();}  }
class C{  public static boolean isOp(EntityPlayerMP player){  return player.mcServer.getConfigurationManager().func_152596_g(player.getGameProfile());}  }
class C{  private boolean searchEndMatch(final String itemName){  for (  Map.Entry<String,Sentence> e : parsedNames.entrySet()) {    Sentence parsed=e.getValue();    if (itemName.endsWith(parsed.getOriginalText()) || itemName.endsWith(parsed.getNormalized())) {      name=e.getKey();      return true;    }  }  return false;}  }
class C{  public RotateStrategyByTime(final long timeInterval){  m_startingTime=System.currentTimeMillis();  m_currentRotation=0;  m_timeInterval=timeInterval;}  }
class C{  private static DeleteVmResponse checkDeleteVmResponse(DeleteVmResponse deleteVmResponse) throws RpcException {  logger.info("Checking {}",deleteVmResponse);switch (deleteVmResponse.getResult()) {case OK:    break;case SYSTEM_ERROR:  throw new SystemErrorException(deleteVmResponse.getError());case VM_NOT_FOUND:throw new VmNotFoundException(deleteVmResponse.getError());case VM_NOT_POWERED_OFF:throw new VmNotPoweredOffException(deleteVmResponse.getError());default :throw new RpcException(String.format("Unknown response: %s",deleteVmResponse.getResult()));}return deleteVmResponse;}  }
class C{  private CacheDataPage readDataPage(Integer pageNumber) throws IOException {  DataPageMain dataPage=new DataPageMain(pageNumber);  DataPageExtra extra=new DataPageExtra();  CacheDataPage cacheDataPage=new CacheDataPage(dataPage,extra);  getIndexData().readDataPage(cacheDataPage);  dataPage.setExtra(extra);  return cacheDataPage;}  }
class C{  @Override public ServerPrepareResult prepare(String sql,boolean executeOnMaster) throws QueryException {  cmdPrologue();  lock.lock();  try {    if (options.cachePrepStmts) {      String key=new StringBuilder(database).append("-").append(sql).toString();      ServerPrepareResult pr=serverPrepareStatementCache.get(key);      if (pr != null && pr.incrementShareCounter()) {        return pr;      }    }    writer.startPacket(0,true);    ComStmtPrepare comStmtPrepare=new ComStmtPrepare(this,sql);    comStmtPrepare.send(writer);    ServerPrepareResult result=comStmtPrepare.read(packetFetcher);    return result;  } catch (  MaxAllowedPacketException e) {    if (e.isMustReconnect())     connect();    throw new QueryException("Could not send query: " + e.getMessage(),-1,INTERRUPTED_EXCEPTION.getSqlState(),e);  }catch (  IOException e) {    throw new QueryException(e.getMessage(),-1,CONNECTION_EXCEPTION.getSqlState(),e);  } finally {    lock.unlock();  }}  }
class C{  public static InputStream toInputStream(final String input){  return IOUtils.toInputStream(input,Charset.defaultCharset());}  }
class C{  @Override public void addChild(FXGNode child){  if (child instanceof TCYNode || child instanceof LinkNode || child instanceof SpanNode|| child instanceof BRNode|| child instanceof TabNode|| child instanceof ImgNode|| child instanceof CDATANode) {    if (child instanceof LinkNode && (((LinkNode)child).href == null)) {      throw new FXGException(getStartLine(),getStartColumn(),"MissingHref");    }    if (content == null)     content=new ArrayList<TextNode>();    content.add((TextNode)child);  } else {    super.addChild(child);    return;  }  if (child instanceof AbstractRichTextNode)   ((AbstractRichTextNode)child).setParent(this);}  }
class C{  public void adjustVolume(double delta) throws CastException, TransientNetworkDisconnectionException, NoConnectionException {  checkConnectivity();  double vol=getVolume() + delta;  if (vol > 1) {    vol=1;  } else   if (vol < 0) {    vol=0;  }  setVolume(vol);}  }
class C{  public static final Criterion not(Criterion criterion){  final List<Criterion> criteria=new ArrayList<Criterion>();  criteria.add(criterion);  return new ConjunctionCriterion(Conjunction.NOR,criteria);}  }
class C{  void unregister(Address address){  registry.remove(address);}  }
class C{  @Override public double[] computeLocalUsingPreviousObservations(double[] newSourceObservations,double[] newDestObservations) throws Exception {  throw new UnsupportedOperationException("Not implemented yet");}  }
class C{  public SQLRecoverableException(String reason,String SQLState,Throwable cause){  super(reason,SQLState,cause);}  }
class C{  private static String escapeString(String s){  if (s == null)   return null;  s=s.replace("\\","\\\\");  s=s.replace("*","\\*");  s=s.replace("?","\\?");  s=s.replace("[","\\[");  return s;}  }
class C{  public TargetSourceRangeComputer(){}  }
class C{  protected void messageSent() throws Exception {}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public static double studentTInverse(double alpha,int size){  double cumProb=1 - alpha / 2;  double f1, f2, f3;  double x1, x2, x3;  double g, s12;  cumProb=1 - alpha / 2;  x1=normalInverse(cumProb);  if (size > 200) {    return x1;  }  f1=studentT(size,x1) - cumProb;  x2=x1;  f2=f1;  do {    if (f1 > 0) {      x2=x2 / 2;    } else {      x2=x2 + x1;    }    f2=studentT(size,x2) - cumProb;  } while (f1 * f2 > 0);  do {    s12=(f2 - f1) / (x2 - x1);    x3=x2 - f2 / s12;    f3=studentT(size,x3) - cumProb;    if (Math.abs(f3) < 1e-8) {      return x3;    }    if (f3 * f2 < 0) {      x1=x2;      f1=f2;      x2=x3;      f2=f3;    } else {      g=f2 / (f2 + f3);      f1=g * f1;      x2=x3;      f2=f3;    }  } while (Math.abs(x2 - x1) > 0.001);  if (Math.abs(f2) <= Math.abs(f1)) {    return x2;  } else {    return x1;  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodecdatasectionnodetype.class,args);}  }
class C{  public String toString(){  String str="jdbc:mysql://";  if (!haMode.equals(HaMode.NONE)) {    str="jdbc:mysql:" + haMode.toString().toLowerCase() + "://";  }  if (addresses != null) {    str+=HostAddress.toString(addresses);  }  if (database != null) {    str+="/" + database;  }  return str;}  }
class C{  private void testBug71396PrepStatementMultiCheck(Connection testConn,String[] queries,int[] expRowCount) throws SQLException {  if (queries.length != expRowCount.length) {    fail("Bad arguments!");  }  for (int i=0; i < queries.length; i++) {    testBug71396PrepStatementCheck(testConn,queries[i],expRowCount[i],-1);  }}  }
class C{  @Override public void printStateMachine(Vertex state,Writer writer,Network network,long start,long timeout){  try {    if (!state.hasRelationship(Primitive.LANGUAGE) || state.hasRelationship(Primitive.LANGUAGE,Primitive.SELF2)) {      new SelfDecompiler().printStateMachine(state,writer,network,start,timeout);      return;    }    Set<Vertex> elements=new HashSet<Vertex>();    elements.add(state);    printState(state,writer,"",elements,network,start,timeout);    writer.write("\r\n");  } catch (  IOException error) {    network.getBot().log(this,error);    return;  }}  }
class C{  public void instancesInScope(){  Binding.this.instancesInScope();}  }
class C{  public static void assertNotEqual(long expected,long actual,double minRelativeError){  if (verbose) {    log("assertNotEqual(" + expected + ", "+ actual+ ", "+ minRelativeError+ ")");  }  if (expected == actual) {    assertBool(false);  } else {    assertRelativeErrorExceeded(expected,actual,minRelativeError);  }}  }
class C{  private CBreakpointSetFunctions(){}  }
class C{  private void action_treeDelete(ListItem item){  log.info("VTreeMaintenance.action_treeDelete" + item);  if (item != null) {  }}  }
class C{  private void Substitution(byte[] box){  A0=applyS(A0,box);  A1=applyS(A1,box);  A2=applyS(A2,box);  A3=applyS(A3,box);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case FunctionblockPackage.FUNCTIONBLOCK_MODEL__NAME:    return getName();case FunctionblockPackage.FUNCTIONBLOCK_MODEL__NAMESPACE:  return getNamespace();case FunctionblockPackage.FUNCTIONBLOCK_MODEL__VERSION:return getVersion();case FunctionblockPackage.FUNCTIONBLOCK_MODEL__REFERENCES:return getReferences();case FunctionblockPackage.FUNCTIONBLOCK_MODEL__DESCRIPTION:return getDescription();case FunctionblockPackage.FUNCTIONBLOCK_MODEL__DISPLAYNAME:return getDisplayname();case FunctionblockPackage.FUNCTIONBLOCK_MODEL__CATEGORY:return getCategory();case FunctionblockPackage.FUNCTIONBLOCK_MODEL__FUNCTIONBLOCK:return getFunctionblock();case FunctionblockPackage.FUNCTIONBLOCK_MODEL__ENTITIES:return getEntities();case FunctionblockPackage.FUNCTIONBLOCK_MODEL__ENUMS:return getEnums();case FunctionblockPackage.FUNCTIONBLOCK_MODEL__SUPER_TYPE:if (resolve) return getSuperType();return basicGetSuperType();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private String startSetToString(){  StringBuffer FString=new StringBuffer();  boolean didPrint;  if (m_starting == null) {    return getStartSet();  }  for (int i=0; i < m_starting.length; i++) {    didPrint=false;    if ((m_hasClass == false) || (m_hasClass == true && i != m_classIndex)) {      FString.append((m_starting[i] + 1));      didPrint=true;    }    if (i == (m_starting.length - 1)) {      FString.append("");    } else {      if (didPrint) {        FString.append(",");      }    }  }  return FString.toString();}  }
class C{  public DerParser(byte[] bytes) throws IOException {  this(new ByteArrayInputStream(bytes));}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String q=getString(stack);  CaptureDevice capDev=getCapDev(stack);  if (capDev != null)   capDev.setDefaultQuality(q);  return null;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case MappingPackage.MAPPING_MODEL__NAME:    return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);case MappingPackage.MAPPING_MODEL__NAMESPACE:  return NAMESPACE_EDEFAULT == null ? namespace != null : !NAMESPACE_EDEFAULT.equals(namespace);case MappingPackage.MAPPING_MODEL__VERSION:return VERSION_EDEFAULT == null ? version != null : !VERSION_EDEFAULT.equals(version);case MappingPackage.MAPPING_MODEL__REFERENCES:return references != null && !references.isEmpty();case MappingPackage.MAPPING_MODEL__DESCRIPTION:return DESCRIPTION_EDEFAULT == null ? description != null : !DESCRIPTION_EDEFAULT.equals(description);case MappingPackage.MAPPING_MODEL__DISPLAYNAME:return DISPLAYNAME_EDEFAULT == null ? displayname != null : !DISPLAYNAME_EDEFAULT.equals(displayname);case MappingPackage.MAPPING_MODEL__CATEGORY:return CATEGORY_EDEFAULT == null ? category != null : !CATEGORY_EDEFAULT.equals(category);case MappingPackage.MAPPING_MODEL__RULES:return rules != null && !rules.isEmpty();case MappingPackage.MAPPING_MODEL__TARGET_PLATFORM:return TARGET_PLATFORM_EDEFAULT == null ? targetPlatform != null : !TARGET_PLATFORM_EDEFAULT.equals(targetPlatform);}return super.eIsSet(featureID);}  }
class C{  public EclipseProjectGenerator<Context> copy(URL resource,String targetFolder,String fileSuffix){  tasks.add(new CopyResourceTask<Context>(resource,targetFolder));  return this;}  }
class C{  public void writeThrough(byte[] buf,int offset,int length) throws IOException {  if (_writeLength > 0) {    flush();  }  StreamImpl source=_source;  if (source == null) {    return;  }  source.write(buf,offset,length,false);  _position+=length;}  }
class C{  public int sampleData(DataSource dataSource,int length,boolean allowEndOfInput) throws IOException {  return rollingBuffer.appendData(dataSource,length,allowEndOfInput);}  }
class C{  public DominatorTree(ControlFlowGraph<V> cfg){  super(DefaultEdge.class);  logger.debug("Computing DominatorTree for " + cfg.getName());  this.cfg=cfg;  createDominatorNodes();  V root=cfg.determineEntryPoint();  logger.debug("determined root: " + root);  DominatorNode<V> rootNode=getDominatorNodeFor(root);  depthFirstAnalyze(rootNode);  computeSemiDominators();  computeImmediateDominators(rootNode);  createDominatorTree();  computeDominatorFrontiers(rootNode);}  }
class C{  public ValueExp apply(ObjectName name) throws BadStringOperationException, BadBinaryOpValueExpException, BadAttributeValueExpException, InvalidApplicationException {  return this;}  }
class C{  public boolean mergeWithSlot(@Nonnull IInventory inv,@Nullable ItemStack item,int slot){  if (!ItemTest.isValid(item))   return false;  final ItemStack existing=inv.getStackInSlot(slot);  if (existing == null || existing.stackSize <= 0) {    inv.setInventorySlotContents(slot,item.copy());    item.stackSize-=MathHelper.clamp_int(item.stackSize,0,item.getMaxStackSize());  } else {    if (existing.isItemEqual(item)) {      final int maxStackSize=inv.getInventoryStackLimit();      final int newSize=MathHelper.clamp_int(existing.stackSize + item.stackSize,0,maxStackSize);      if (newSize == existing.stackSize) {        return false;      } else {        final int consumed=newSize - existing.stackSize;        item.stackSize-=consumed;        existing.stackSize=newSize;        inv.setInventorySlotContents(slot,existing);      }    } else {      return false;    }  }  return true;}  }
class C{  @Inline public static boolean stateIsForwardedOrBeingForwarded(Word header){  return (header.toInt() & FORWARDING_MASK) != 0;}  }
class C{  public JSONArray(Collection<?> collection){  this.myArrayList=new ArrayList<Object>();  if (collection != null) {    for (    Object o : collection) {      this.myArrayList.add(JSONObject.wrap(o));    }  }}  }
class C{  public static void defaultvarray(){  render();}  }
class C{  public void updateCharacterStream(int columnIndex,java.io.Reader x) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("cachedrowsetimpl.featnotsupp").toString());}  }
class C{  public static void main(String[] args){  TestSerializedFormDeprecationInfo tester=new TestSerializedFormDeprecationInfo();  tester.exactNewlineMatch=false;  run(tester,ARGS1,TEST_CMNT_DEPR,TEST_NOCMNT);  run(tester,ARGS2,TEST_NOCMNT,TEST_CMNT_DEPR);  run(tester,ARGS3,TEST_NODEPR,TEST_NOCMNT_NODEPR);  run(tester,ARGS4,TEST_NOCMNT_NODEPR,TEST_NODEPR);  tester.printSummary();}  }
class C{  protected void plotUncolored(SVGPlot plot,Element parent,double x,double y,double size){  Element marker=plot.svgCircle(x,y,size * .5);  SVGUtil.setStyle(marker,SVGConstants.CSS_FILL_PROPERTY + ":" + dotcolor);  parent.appendChild(marker);}  }
class C{  public String convertDirectionToString(EDataType eDataType,Object instanceValue){  return instanceValue == null ? null : instanceValue.toString();}  }
class C{  public static void showPosition(File file,int line){  try {    String ln=getLine(file,line);    if (ln != null)     err(ln);  } catch (  IOException e) {  }}  }
class C{  public RocPlot(double[][] points,String title,String info){  this.points=points;  this.info=info;  Font font=new Font("Serif",Font.PLAIN,12);  fm=getFontMetrics(font);  titleFm=getFontMetrics(titleFont);  setFont(font);  if (title != null) {    this.title=title;  }}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  public String[] jplot(double x[],double y[],String lineSpec,Object... args){  if (args.length % 3 != 0) {    throw new IllegalArgumentException("The number of input args should " + "be multiple of 3! It is: " + args.length);  }  int noOfSeries=args.length / 3 + 1;  String[] seriesKeys=new String[noOfSeries];  seriesKeys[0]=jplot(x,y,lineSpec,"")[0];  int keyIndex=1;  for (int i=0; i < args.length; i+=3) {    double xa[]=(double[])args[i];    double ya[]=(double[])args[i + 1];    String lineSpecA=(String)args[i + 2];    seriesKeys[keyIndex++]=addPlot(xa,ya,lineSpecA,"");  }  return seriesKeys;}  }
class C{  private StateSet closure(int startState){  StateSet notvisited=tempStateSet;  StateSet closure=new StateSet(numStates,startState);  notvisited.clear();  notvisited.addState(startState);  while (notvisited.containsElements()) {    int state=notvisited.getAndRemoveElement();    notvisited.add(closure.complement(epsilon[state]));    closure.add(epsilon[state]);  }  return closure;}  }
class C{  public <T>List<T> fetch(Class<T> clazz,String profile,String entity,List<Object> groups,long start,long end){  byte[] columnFamily=Bytes.toBytes(columnBuilder.getColumnFamily());  byte[] columnQualifier=columnBuilder.getColumnQualifier("value");  List<byte[]> keysToFetch=rowKeyBuilder.rowKeys(profile,entity,groups,start,end);  List<Get> gets=keysToFetch.stream().map(null).collect(Collectors.toList());  return get(gets,columnQualifier,columnFamily,clazz);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (usingInOutNotation: ");  result.append(usingInOutNotation);  result.append(')');  return result.toString();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:24.408 -0500",hash_original_method="40815EC709415499328FA1CBE062ACB5",hash_generated_method="AB033A1CDE8B1578E309F49415571B96") private void printRouteList(){  if (sipStack.isLoggingEnabled()) {    sipStack.getStackLogger().logDebug("this : " + this);    sipStack.getStackLogger().logDebug("printRouteList : " + this.routeList.encode());  }}  }
class C{  private static void computeCircleEdges(int rad,int[] left,int[] right){  int x, y, d;  d=1 - rad;  x=0;  y=rad;  while (x <= y) {    setCircleValues(rad,x,y,left,right);    if (d < 0) {      d=d + (x << 2) + 3;    } else {      d=d + ((x - y) << 2) + 5;      y--;    }    x++;  }}  }
class C{  @Ignore("Bug50247") @Test public void testPersistentPartitionedRegionWithGatewaySender_Restart(){  Integer lnPort=(Integer)vm0.invoke(null);  Integer nyPort=(Integer)vm1.invoke(null);  createCacheInVMs(nyPort,vm2,vm3);  createReceiverInVMs(vm2,vm3);  createCacheInVMs(lnPort,vm4,vm5,vm6,vm7);  vm4.invoke(null);  vm5.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  vm2.invoke(null);  vm3.invoke(null);  vm4.invoke(null);  vm5.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  startSenderInVMs("ln",vm4,vm5,vm6,vm7);  vm4.invoke(waitForSenderRunnable());  vm5.invoke(waitForSenderRunnable());  vm6.invoke(waitForSenderRunnable());  vm7.invoke(waitForSenderRunnable());  vm4.invoke(pauseSenderRunnable());  vm5.invoke(pauseSenderRunnable());  vm6.invoke(pauseSenderRunnable());  vm7.invoke(pauseSenderRunnable());  vm4.invoke(null);  LogWriterUtils.getLogWriter().info("Completed puts in the region");  vm4.invoke(killSenderRunnable());  vm5.invoke(killSenderRunnable());  vm6.invoke(killSenderRunnable());  vm7.invoke(killSenderRunnable());  LogWriterUtils.getLogWriter().info("Killed all the senders.");  createCacheInVMs(lnPort,vm4,vm5,vm6,vm7);  LogWriterUtils.getLogWriter().info("Created back the cache");  vm4.invoke(null);  vm5.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  LogWriterUtils.getLogWriter().info("Created the senders again");  startSenderInVMsAsync("ln",vm4,vm5,vm6,vm7);  LogWriterUtils.getLogWriter().info("Started the senders.");  LogWriterUtils.getLogWriter().info("Waiting for senders running.");  vm4.invoke(waitForSenderRunnable());  vm5.invoke(waitForSenderRunnable());  vm6.invoke(waitForSenderRunnable());  vm7.invoke(waitForSenderRunnable());  LogWriterUtils.getLogWriter().info("All the senders are now running...");  AsyncInvocation inv1=vm4.invokeAsync(null);  AsyncInvocation inv2=vm5.invokeAsync(null);  AsyncInvocation inv3=vm6.invokeAsync(null);  AsyncInvocation inv4=vm7.invokeAsync(null);  try {    inv1.join();    inv2.join();    inv3.join();    inv4.join();  } catch (  InterruptedException e) {    e.printStackTrace();    fail();  }  LogWriterUtils.getLogWriter().info("Created back the partitioned regions");  vm4.invoke(null);  LogWriterUtils.getLogWriter().info("Completed puts in the region");  vm2.invoke(null);  vm3.invoke(null);}  }
class C{  public void buttonSetCaption(final String cCaption){  buttonSetCaption(cCaption,0);}  }
class C{  public void startFtpDownload(final String hostname,final int port,final String uri,final String user,final String password){  mTask.startFtpDownload(hostname,port,uri,user,password);}  }
class C{  public boolean firstTimeIn(){  try {    mRetainedFragment=(RetainedFragment)mFragmentManager.get().findFragmentByTag(mRetainedFragmentTag);    if (mRetainedFragment == null) {      Log.d(TAG,"Creating new RetainedFragment " + mRetainedFragmentTag);      mRetainedFragment=new RetainedFragment();      mFragmentManager.get().beginTransaction().add(mRetainedFragment,mRetainedFragmentTag).commit();      return true;    } else {      Log.d(TAG,"Returning existing RetainedFragment " + mRetainedFragmentTag);      return false;    }  } catch (  NullPointerException e) {    Log.d(TAG,"NPE in firstTimeIn()");    return false;  }}  }
class C{  private void freeNode(Node<E> node){  node.item=null;  Node<E> oldNew;  do {    oldNew=freeNode;    node.next=oldNew;  } while (!casNewNode(oldNew,node));}  }
class C{  public void drawLegendShape(Canvas canvas,SimpleSeriesRenderer renderer,float x,float y,int seriesIndex,Paint paint){  float halfShapeWidth=SHAPE_WIDTH / 2;  canvas.drawRect(x,y - halfShapeWidth,x + SHAPE_WIDTH,y + halfShapeWidth,paint);}  }
class C{  private void resetColor(List<UIComponent> children){  for (  UIComponent uiComponent : children) {    if (isErrorStyle(uiComponent)) {      uiComponent.getAttributes().put(ATTRIBUTE_STYLE,"");    }    resetColor(uiComponent.getChildren());  }}  }
class C{  public Authentication doAuthenticate(final TenantSecurityToken secruityToken){  resolveTenant(secruityToken);  PreAuthenticatedAuthenticationToken authentication=new PreAuthenticatedAuthenticationToken(null,null);  for (  final PreAuthentificationFilter filter : filterChain) {    final PreAuthenticatedAuthenticationToken authenticationRest=createAuthentication(filter,secruityToken);    if (authenticationRest != null) {      authentication=authenticationRest;      authentication.setDetails(new TenantAwareAuthenticationDetails(secruityToken.getTenant(),true));      break;    }  }  return preAuthenticatedAuthenticationProvider.authenticate(authentication);}  }
class C{  private void validateExportGroupNoPendingEvents(ExportGroup exportGroup){  List<URI> computeResourceIDs=new ArrayList<>();  if (exportGroup == null) {    return;  }  if (exportGroup.getClusters() != null && !exportGroup.getClusters().isEmpty()) {    computeResourceIDs.addAll(URIUtil.toURIList(exportGroup.getClusters()));  }  if (exportGroup.getHosts() != null && !exportGroup.getHosts().isEmpty()) {    computeResourceIDs.addAll(URIUtil.toURIList(exportGroup.getHosts()));  }  StringBuffer errMsg=new StringBuffer();  for (  URI computeResourceID : computeResourceIDs) {    List<ActionableEvent> events=EventUtils.findAffectedResourceEvents(_dbClient,computeResourceID);    if (events != null && !events.isEmpty()) {      for (      ActionableEvent event : events) {        if (event.getEventStatus().equalsIgnoreCase(ActionableEvent.Status.pending.name()) || event.getEventStatus().equalsIgnoreCase(ActionableEvent.Status.failed.name())) {          errMsg.append(event.forDisplay() + "\n");        }      }    }  }  if (errMsg.length() != 0) {    throw APIException.badRequests.cannotExecuteOperationWhilePendingOrFailedEvent(errMsg.toString());  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:23.107 -0500",hash_original_method="7E883A5461EB25C0FF6C63AC2DCB994A",hash_generated_method="308A7D66765E2C120C9128A71ECB6416") public static boolean isSurrogatePair(char high,char low){  return ((high + low) == 1);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Comment newCommentNode;  String newCommentValue;  String newCommentName;  int newCommentType;  doc=(Document)load("staff",true);  newCommentNode=doc.createComment("This is a new Comment node");  newCommentValue=newCommentNode.getNodeValue();  assertEquals("value","This is a new Comment node",newCommentValue);  newCommentName=newCommentNode.getNodeName();  assertEquals("name","#comment",newCommentName);  newCommentType=(int)newCommentNode.getNodeType();  assertEquals("type",8,newCommentType);}  }
class C{  public Vertex define(Vertex source,Vertex vertex,Vertex vertex2,Vertex vertex3,Vertex vertex4,Vertex vertex5){  return discover(false,false,null,vertex,vertex2,vertex3,vertex4,vertex5);}  }
class C{  public void fireOperatorSelectionChanged(Collection<Operator> operators){  fireOperatorsChanged(OperatorEvent.SELECTED_OPERATORS_CHANGED,operators);}  }
class C{  public HtmlPolicyBuilder disallowElements(String... elementNames){  return allowElements(ElementPolicy.REJECT_ALL_ELEMENT_POLICY,elementNames);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:29.740 -0500",hash_original_method="880C6B6FFD6476FB4BC9E8F8AE296E97",hash_generated_method="3770FEFFBAC67FD1905A83F293D6AE9F") private static void readIndex(){}  }
class C{  public Matrix4f m30(float m30){  this.m30=m30;  properties&=~(PROPERTY_IDENTITY | PROPERTY_PERSPECTIVE);  return this;}  }
class C{  public static int millisToPixels(double mm,int dpi){  return (int)(mm / INCH_MM * dpi);}  }
class C{  public boolean isDigestOn(){  return parseBoolean(getFieldValue(SubscribeOptionFields.digest));}  }
class C{  public boolean isClosed(){  return state == STATE_CLOSED;}  }
class C{  private Map<String,File> compileHierarchy(Type type){  HashMap<String,File> outputDirs=new HashMap<>();  File outDir=compileOne(type);  outputDirs.put(type.getName(),outDir);  Class superClass=type.getSuperclass();  if (superClass != null) {    for (    Map.Entry<String,File> each : compileHierarchy(superClass).entrySet()) {      outputDirs.put(each.getKey(),each.getValue());    }  }  for (  Extends ext : type.getSupertypes()) {    Type iface=ext.getType();    for (    Map.Entry<String,File> each : compileHierarchy(iface).entrySet()) {      outputDirs.put(each.getKey(),each.getValue());    }  }  return outputDirs;}  }
class C{  private void checkPriority(double priority){  if (Double.isNaN(priority))   throw new IllegalArgumentException(priority + " is invalid.");}  }
class C{  private static int calculateSampleSize(BitmapFactory.Options options,int width,int height){  int sampleSize=1;  if (options.outHeight > height || options.outWidth > width) {    final int halfHeight=options.outHeight / 2;    final int halfWidth=options.outWidth / 2;    while ((halfHeight / sampleSize) > height && (halfWidth / sampleSize) > width) {      sampleSize*=2;    }  }  return sampleSize;}  }
class C{  public void findLoops(Path webGraphDb) throws IOException {  SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");  long start=System.currentTimeMillis();  if (LOG.isInfoEnabled()) {    LOG.info("Loops: starting at " + sdf.format(start));    LOG.info("Loops: webgraphdb: " + webGraphDb);  }  Configuration conf=getConf();  FileSystem fs=FileSystem.get(conf);  Path outlinkDb=new Path(webGraphDb,WebGraph.OUTLINK_DIR);  Path nodeDb=new Path(webGraphDb,WebGraph.NODE_DIR);  Path routes=new Path(webGraphDb,ROUTES_DIR);  Path tempRoute=new Path(webGraphDb,ROUTES_DIR + "-" + Integer.toString(new Random().nextInt(Integer.MAX_VALUE)));  JobConf init=new NutchJob(conf);  init.setJobName("Initializer: " + webGraphDb);  FileInputFormat.addInputPath(init,outlinkDb);  FileInputFormat.addInputPath(init,nodeDb);  init.setInputFormat(SequenceFileInputFormat.class);  init.setMapperClass(Initializer.class);  init.setReducerClass(Initializer.class);  init.setMapOutputKeyClass(Text.class);  init.setMapOutputValueClass(ObjectWritable.class);  init.setOutputKeyClass(Text.class);  init.setOutputValueClass(Route.class);  FileOutputFormat.setOutputPath(init,tempRoute);  init.setOutputFormat(SequenceFileOutputFormat.class);  try {    LOG.info("Loops: starting initializer");    JobClient.runJob(init);    LOG.info("Loops: installing initializer " + routes);    FSUtils.replace(fs,routes,tempRoute,true);    LOG.info("Loops: finished initializer");  } catch (  IOException e) {    LOG.error(StringUtils.stringifyException(e));    throw e;  }  int depth=conf.getInt("link.loops.depth",2);  for (int i=0; i < depth; i++) {    JobConf looper=new NutchJob(conf);    looper.setJobName("Looper: " + (i + 1) + " of "+ depth);    FileInputFormat.addInputPath(looper,outlinkDb);    FileInputFormat.addInputPath(looper,routes);    looper.setInputFormat(SequenceFileInputFormat.class);    looper.setMapperClass(Looper.class);    looper.setReducerClass(Looper.class);    looper.setMapOutputKeyClass(Text.class);    looper.setMapOutputValueClass(ObjectWritable.class);    looper.setOutputKeyClass(Text.class);    looper.setOutputValueClass(Route.class);    FileOutputFormat.setOutputPath(looper,tempRoute);    looper.setOutputFormat(SequenceFileOutputFormat.class);    looper.setBoolean("last",i == (depth - 1));    try {      LOG.info("Loops: starting looper");      JobClient.runJob(looper);      LOG.info("Loops: installing looper " + routes);      FSUtils.replace(fs,routes,tempRoute,true);      LOG.info("Loops: finished looper");    } catch (    IOException e) {      LOG.error(StringUtils.stringifyException(e));      throw e;    }  }  JobConf finalizer=new NutchJob(conf);  finalizer.setJobName("Finalizer: " + webGraphDb);  FileInputFormat.addInputPath(finalizer,routes);  finalizer.setInputFormat(SequenceFileInputFormat.class);  finalizer.setMapperClass(Finalizer.class);  finalizer.setReducerClass(Finalizer.class);  finalizer.setMapOutputKeyClass(Text.class);  finalizer.setMapOutputValueClass(Route.class);  finalizer.setOutputKeyClass(Text.class);  finalizer.setOutputValueClass(LoopSet.class);  FileOutputFormat.setOutputPath(finalizer,new Path(webGraphDb,LOOPS_DIR));  finalizer.setOutputFormat(MapFileOutputFormat.class);  try {    LOG.info("Loops: starting finalizer");    JobClient.runJob(finalizer);    LOG.info("Loops: finished finalizer");  } catch (  IOException e) {    LOG.error(StringUtils.stringifyException(e));    throw e;  }  long end=System.currentTimeMillis();  LOG.info("Loops: finished at " + sdf.format(end) + ", elapsed: "+ TimingUtil.elapsedTime(start,end));}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public RadialGradientPaint(Point2D center,float radius,Point2D focus,float[] fractions,Color[] colors,CycleMethodEnum cycleMethod,ColorSpaceEnum colorSpace,AffineTransform gradientTransform){  super(fractions,colors,cycleMethod,colorSpace,gradientTransform);  if (center == null) {    throw new NullPointerException("Center point should not be null.");  }  if (focus == null) {    throw new NullPointerException("Focus point should not be null.");  }  if (radius <= 0) {    throw new IllegalArgumentException("radius should be greater than zero");  }  this.center=(Point2D)center.clone();  this.focus=(Point2D)focus.clone();  this.radius=radius;}  }
class C{  public Builder consumptionPreferences(Boolean consumptionPreferences){  this.consumptionPreferences=consumptionPreferences;  return this;}  }
class C{  public boolean equals(Object object){  if (this == object)   return true;  if (object == null)   return false;  if (!(object instanceof NamedObject))   return false;  NamedObject no=(NamedObject)object;  return name.equals(no.getName());}  }
class C{  public DNewKeyStoreType(JFrame parent){  super(parent,Dialog.ModalityType.DOCUMENT_MODAL);  setTitle(res.getString("DNewKeyStoreType.Title"));  initComponents();}  }
class C{  private static void writeByte(int x){  assert x >= 0 && x < 256;  if (n == 0) {    try {      out.write(x);    } catch (    IOException e) {      e.printStackTrace();    }    return;  }  for (int i=0; i < 8; i++) {    boolean bit=((x >>> (8 - i - 1)) & 1) == 1;    writeBit(bit);  }}  }
class C{  public static Object decrypt(Object value){  if (value instanceof String)   return decrypt((String)value);  return value;}  }
class C{  public PcStableRunner(DataWrapper dataWrapper,Parameters params){  super(dataWrapper,params,null);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:30.661 -0500",hash_original_method="05094F845E3E5F63D2D668EAFF7A5EA3",hash_generated_method="ED464C8D245A65A5099E569089B93A45") private static void parsePropertyAssignments(Properties p,String[] assignments){  for (  String assignment : assignments) {    int split=assignment.indexOf('=');    String key=assignment.substring(0,split);    String value=assignment.substring(split + 1);    p.put(key,value);  }}  }
class C{  private static double[] coord(double min,double max,double resolution){  double[] coord=new double[(int)((max - min) / resolution) + 1];  coord[0]=min;  for (int i=1; i < coord.length; i++) {    coord[i]=min + i * resolution;  }  return coord;}  }
class C{  protected void linkDataSourceToConfigXml(DataSource ds){  Document configXml=readConfigXml();  Element domain=configXml.getDocumentElement();  addDataSourceToDomain(ds,domain);  writeConfigXml(configXml);}  }
class C{  public boolean allowsCoreThreadTimeOut(){  return allowCoreThreadTimeOut;}  }
class C{  public double norm2(){  return s[0];}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  @Deprecated public boolean validate(String regex,CharSequence errorText){  boolean isValid=isValid(regex);  if (!isValid) {    setError(errorText);  }  postInvalidate();  return isValid;}  }
class C{  private XMLParseException unexpectedEndOfData(){  String msg="Unexpected end of data reached";  return new XMLParseException(this.getName(),this.parserLineNr,msg);}  }
class C{  private void invalidateVisualState(){  this.anchor.invalidateVisualState();  boolean validConnection=this.anchor.hasValidConnection();  this.setTranslateY(validConnection ? 0 : -9);  this.inputType.setText(validConnection ? "zyxwv" : this.anchor.getStringType());  this.inputType.setVisible(!validConnection);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeprocessinginstructionnodeattributes.class,args);}  }
class C{  private static ArrayList<Object> find(DroidModel model) throws DroidModelException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {  DatabaseRequest dbRequest=new DatabaseRequest();  String modelName=sanitizeCanonicalName(model.getClass().getName());  dbRequest.setTableName(modelName);  dbRequest.setActionType(DatabaseRequest.Action.SELECT);  StringBuffer conditionBuffer=new StringBuffer();  HashMap<String,String> values=model.getValues();  Iterator<String> keys=values.keySet().iterator();  boolean first=true;  while (keys.hasNext()) {    String key=keys.next();    String value=values.get(key);    if (DroidUtils.isStringValid(value) && DroidUtils.isStringValid(key)) {      String condition=key + EQUALS + DroidUtils.enclose(value);      if (first) {        first=false;      } else {        conditionBuffer.append(" AND ");      }      conditionBuffer.append(condition);    }  }  dbRequest.setConditions(conditionBuffer.toString());  ArrayList<HashMap<String,String>> response=DatabaseHandler.getInstance().processRequest(dbRequest.getRW(),dbRequest.getRawQuery());  ArrayList<Object> returning=new ArrayList<>();  Iterator<HashMap<String,String>> i=response.iterator();  while (i.hasNext()) {    HashMap<String,String> rvalues=i.next();    Object dm=model.getClass().getConstructor().newInstance();    Method m=model.getClass().getMethod("setModelValues",HashMap.class);    m.invoke(dm,rvalues);    returning.add(dm);  }  return returning;}  }
class C{  public static String urlEncode(String s){  try {    return URLEncoder.encode(s,"UTF-8");  } catch (  Exception e) {    throw DbException.convert(e);  }}  }
class C{  @Override public int distanceToHomeEdge(Coords position,HomeEdge homeEdge,IGame game){  final String METHOD_NAME="distanceToHomeEdge(Coords, HomeEdge, IGame)";  getOwner().methodBegin(BasicPathRanker.class,METHOD_NAME);  try {    String msg="Getting distance to home edge: " + homeEdge.toString();    int width=game.getBoard().getWidth();    int height=game.getBoard().getHeight();    int distance;switch (homeEdge) {case NORTH:{        distance=position.getY();        break;      }case SOUTH:{      distance=height - position.getY() - 1;      break;    }case WEST:{    distance=position.getX();    break;  }case EAST:{  distance=width - position.getX() - 1;  break;}default :{getOwner().log(getClass(),METHOD_NAME,LogLevel.WARNING,"Invalid home edge.  Defaulting to NORTH.");distance=position.getY();}}msg+=" -> " + distance;getOwner().log(BasicPathRanker.class,METHOD_NAME,msg);return distance;}  finally {getOwner().methodEnd(BasicPathRanker.class,METHOD_NAME);}}  }
class C{  @Deprecated public ClassDefinition beginClass(long off,String doc,int mod,IdentifierToken nm,IdentifierToken sup,IdentifierToken impl[]){  Identifier supId=(sup == null) ? null : sup.id;  Identifier implIds[]=null;  if (impl != null) {    implIds=new Identifier[impl.length];    for (int i=0; i < impl.length; i++) {      implIds[i]=impl[i].id;    }  }  beginClass(off,doc,mod,nm.id,supId,implIds);  return getCurrentClass();}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  int filterSizeX=3;  int filterSizeY=3;  double n;  double sum;  double sumOfTheSquares;  double average;  double stdDev;  int dX[];  int dY[];  int midPointX;  int midPointY;  int numPixelsInFilter;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      filterSizeX=Integer.parseInt(args[i]);    } else     if (i == 3) {      filterSizeY=Integer.parseInt(args[i]);    } else     if (i == 4) {      filterRounded=Boolean.parseBoolean(args[i]);    } else     if (i == 5) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          n=0;          sum=0;          sumOfTheSquares=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z != noData) {              n+=filterShape[a];              sum+=z * filterShape[a];              sumOfTheSquares+=(z * filterShape[a]) * z;            }          }          if (n > 2) {            average=sum / n;            stdDev=(sumOfTheSquares - (sum * sum) / n) / n;            if (stdDev > 0) {              stdDev=Math.sqrt(stdDev);            }            outputFile.setValue(row,col,stdDev);          } else {            outputFile.setValue(row,col,noData);          }        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void fillFieldValues(){  if (isCreationPanel) {    activation.setText("" + TileSensor.DEFAULT_ACTIVATION);    x.setText("" + TileSensor.DEFAULT_X);    y.setText("" + TileSensor.DEFAULT_Y);    width.setText("" + TileSensor.DEFAULT_WIDTH);    height.setText("" + TileSensor.DEFAULT_HEIGHT);  } else {    activation.setText("" + Double.toString(tileSensor.getActivationAmount()));    x.setText("" + Integer.toString(tileSensor.getX()));    y.setText("" + Integer.toString(tileSensor.getY()));    width.setText("" + Integer.toString(tileSensor.getWidth()));    height.setText("" + Integer.toString(tileSensor.getHeight()));  }}  }
class C{  protected void deleteLeastUsedEntry(){  try {    poolLock.lock();    BasicPoolEntry entry=freeConnections.remove();    if (entry != null) {      deleteEntry(entry);    } else     if (log.isDebugEnabled()) {      log.debug("No free connection to delete.");    }  }  finally {    poolLock.unlock();  }}  }
class C{  private void updatePreviewArea(Matrix matrix){  mPreviewArea.set(0,0,mWidth,mHeight);  matrix.mapRect(mPreviewArea);  onPreviewAreaChanged(mPreviewArea);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.CODE_LANG___CODE_LANG_1:    return getCodeLang_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override public void start(){  super.start();}  }
class C{  public final Object[] returnInputArgs(final Operation operation,final Map<String,Object> keyMap,int index) throws BaseCollectionException, IllegalAccessException, InvocationTargetException {  final List<Object> args=operation.getArguments();  final int nArgs=args.size();  final Object[] inputArgs1=new Object[nArgs];  int count=0;  for (  Object argobj : args) {    Argument arg=(Argument)argobj;    final Object instance=arg.getCreator();    final Method method=getMethod(operation,arg.getMethod(),instance,Util.ENDPOINTS.ARGUMENT.toString());    final Object[] inputArgs={arg,keyMap,index};    final Object resultObj=method.invoke(instance,inputArgs);    inputArgs1[count++]=resultObj;  }  return normalizedWriteArgs(keyMap,inputArgs1);}  }
class C{  private static boolean checkForStringIsNotEmpty(GrExpression condition,GrExpression then){  if (!(condition instanceof GrUnaryExpression))   return false;  if (((GrUnaryExpression)condition).getOperationTokenType() != GroovyTokenTypes.mLNOT)   return false;  return checkForStringIsEmpty(((GrUnaryExpression)condition).getOperand(),then);}  }
class C{  protected InterestResultPolicy(String name){  this.name=name;  this.ordinal=nextOrdinal++;  VALUES[this.ordinal]=this;}  }
class C{  public void resetInternalMediaURL(HttpServletRequest request){  internalMediaURL=request.getRequestURL().toString().substring(0,request.getRequestURL().toString().indexOf(request.getServerName()) + request.getServerName().length()) + request.getContextPath() + "/media/";}  }
class C{  private void join(Iterator<MemberState> iterator){  if (iterator.hasNext()) {    cancelJoinTimer();    joinTimeout=context.getThreadContext().schedule(context.getElectionTimeout().multipliedBy(2),null);    MemberState member=iterator.next();    LOGGER.debug("{} - Attempting to join via {}",member().address(),member.getMember().serverAddress());    context.getConnections().getConnection(member.getMember().serverAddress()).thenCompose(null).whenComplete(null);  } else {    LOGGER.debug("{} - Failed to join cluster, retrying...",member.address());    resetJoinTimer();  }}  }
class C{  public BreakStatement createBreakStatement(){  BreakStatementImpl breakStatement=new BreakStatementImpl();  return breakStatement;}  }
class C{  private NetworkState checkSizeAllowedForNetwork(int networkType){  if (totalBytes <= 0) {    return NetworkState.OK;  }  if (networkType == ConnectivityManager.TYPE_WIFI) {    return NetworkState.OK;  }  Long maxBytesOverMobile=systemFacade.getMaxBytesOverMobile();  if (maxBytesOverMobile != null && totalBytes > maxBytesOverMobile) {    return NetworkState.UNUSABLE_DUE_TO_SIZE;  }  if (bypassRecommendedSizeLimit == 0) {    Long recommendedMaxBytesOverMobile=systemFacade.getRecommendedMaxBytesOverMobile();    if (recommendedMaxBytesOverMobile != null && totalBytes > recommendedMaxBytesOverMobile) {      return NetworkState.RECOMMENDED_UNUSABLE_DUE_TO_SIZE;    }  }  return NetworkState.OK;}  }
class C{  @Override public void onContactNumberSelected(String contactNumber,String contactName){  Intent intent=new Intent();  intent.putExtra(KEY_PHONE_NUMBER,contactNumber);  intent.putExtra(KEY_CONTACT_NAME,contactName);  setResult(RESULT_OK,intent);  finish();}  }
class C{  static String classReaderToClassName(ClassReader classReader){  if (classReader == null) {    return null;  } else {    return classReader.getClassName().replace('/','.');  }}  }
class C{  protected void processSerialized(DatabaseMapping mapping,MetadataClass referenceClass,MetadataClass classification,boolean isForMapKey){  new SerializedMetadata(this).process(mapping,this,referenceClass,classification,isForMapKey);}  }
class C{  private static Map<String,String> convertHeaders(Header[] headers){  Map<String,String> result=new HashMap<String,String>();  for (int i=0; i < headers.length; i++) {    result.put(headers[i].getName(),headers[i].getValue());  }  return result;}  }
class C{  private void startRecording(){  if (DEBUG)   Log.v(TAG,"startRecording:");  try {    mRecordButton.setColorFilter(0xffff0000);    mMuxer=new MediaMuxerWrapper(".mp4");    if (true) {      new MediaVideoEncoder(mMuxer,mMediaEncoderListener,mCameraView.getVideoWidth(),mCameraView.getVideoHeight());    }    if (true) {      new MediaAudioEncoder(mMuxer,mMediaEncoderListener);    }    mMuxer.prepare();    mMuxer.startRecording();  } catch (  final IOException e) {    mRecordButton.setColorFilter(0);    Log.e(TAG,"startCapture:",e);  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:04.125 -0400",hash_original_method="6E9FF04EDBC10C1681EBB7B80AAD70DA",hash_generated_method="6B2F8573B12D5EEA4E1F115F0BDFF2D3") public Object clone() throws CloneNotSupportedException {  SHA1_MessageDigestImpl cloneObj=(SHA1_MessageDigestImpl)super.clone();  cloneObj.buffer=buffer.clone();  cloneObj.oneByte=oneByte.clone();  return cloneObj;}  }
class C{  public List<LiveChannel> listLiveChannels(String bucketName) throws OSSException, ClientException {  LiveChannelListing liveChannelListing=listLiveChannels(new ListLiveChannelsRequest(bucketName));  List<LiveChannel> liveChannels=liveChannelListing.getLiveChannels();  while (liveChannelListing.isTruncated()) {    liveChannelListing=listLiveChannels(new ListLiveChannelsRequest(bucketName,liveChannelListing.getNextMarker(),null));    liveChannels.addAll(liveChannelListing.getLiveChannels());  }  return liveChannels;}  }
class C{  private static void initLog4J(){  System.setProperty("org.apache.logging.log4j.level","INFO");  System.setProperty("org.apache.logging.simplelogj.level","INFO");  System.setProperty("Log4jDefaultStatusLevel","INFO");  String[] levels=new String[]{".info",".debug",".trace",".trace.FileCachingSystem","STANDARD"};  String defaultLevel=".info";  configurationFolder=getDefaultConfigurationDirectory();  if (configurationFolder == null) {    addStartupLogMessage("ERROR: Failed to initialize logging - could not find suitable log folder");    System.exit(-5);  }  System.setProperty("calibre2opds.home",configurationFolder.getAbsolutePath());  addStartupLogMessage("calibre2opds.home=" + configurationFolder.getAbsolutePath());  String defaultOutFileName="log/log4j2";  File log4jConfig=null;  for (  String level : levels) {    String outFileName;    String inFileName="log4j2";    if (level.equals("STANDARD")) {      outFileName=defaultOutFileName;      inFileName+=defaultLevel;    } else {      outFileName=defaultOutFileName + level;      inFileName+=level;    }    inFileName+=Constants.XML_EXTENSION;    outFileName+=Constants.XML_EXTENSION;    log4jConfig=new File(configurationFolder,outFileName);    if (!log4jConfig.exists()) {      try {        new File(log4jConfig.getParent()).mkdirs();        InputStream is=null;        FileOutputStream os=null;        try {          is=Runner.class.getResourceAsStream(inFileName);          if (is == null) {            addStartupLogMessage("Cannot find " + inFileName + " in the resources");          }          os=new FileOutputStream(log4jConfig);          byte buffer[]=new byte[1024];          int bytesRead;          while ((bytesRead=is.read(buffer)) != -1) {            os.write(buffer,0,bytesRead);          }        }  finally {          if (os != null) {            os.flush();            os.close();          }          if (is != null) {            is.close();          }        }      } catch (      Exception e) {        e.printStackTrace(System.out);      }    }  }  addStartupLogMessage("Log4j2 configuration file is " + log4jConfig.getAbsolutePath());  System.setProperty("log4j.configurationFile",log4jConfig.getAbsolutePath());  try {    ConfigurationSource source=new ConfigurationSource(new FileInputStream(log4jConfig));    Configurator.initialize(null,source);    logger=LogManager.getLogger(Runner.class.getName());    addStartupLogMessage("Using log4j2 configuration file " + log4jConfig);  } catch (  java.io.FileNotFoundException e) {  }catch (  java.io.IOException f) {  }  for (  String s : getStartupLogMessages()) {    logger.debug(s);  }  clearStartupLogMessages();}  }
class C{  static boolean isOSMatch(final String osName,final String osVersion,final String osNamePrefix,final String osVersionPrefix){  if (osName == null || osVersion == null) {    return false;  }  return isOSNameMatch(osName,osNamePrefix) && isOSVersionMatch(osVersion,osVersionPrefix);}  }
class C{  private double clip(final double val){  double ret=val;  if (ret > upperBound) {    ret=upperBound;  } else   if (ret < lowerBound) {    ret=lowerBound;  }  return ret;}  }
class C{  public void initialize(RealtimeContext context) throws Exception {  super.initialize(context);  Map<String,String> runtimeArguments=Maps.newHashMap();  runtimeArguments.putAll(config.getProperties().getProperties());  if (config.customProperties != null) {    Map<String,String> customProperties=GSON.fromJson(config.customProperties,STRING_MAP_TYPE);    runtimeArguments.putAll(customProperties);  }  Integer configMessagesToReceive=config.messagesToReceive;  messagesToReceive=configMessagesToReceive.intValue();  final Hashtable<String,String> envVars=new Hashtable<>();  for (  Map.Entry<String,String> entry : runtimeArguments.entrySet()) {    envVars.put(entry.getKey(),entry.getValue());  }  envVars.put(Context.INITIAL_CONTEXT_FACTORY,config.initialContextFactory);  envVars.put(Context.PROVIDER_URL,config.providerUrl);  Class<Object> driver=context.loadPluginClass(getPluginId());  ClassLoader driverCL=null;  if (driver != null) {    driverCL=driver.getClassLoader();  }  initializeJMSConnection(envVars,config.destinationName,config.connectionFactoryName,driverCL);}  }
class C{  public static List<List<Channel>> compareChannels(List<Channel> localChannels,List<Channel> serverChannels){  List<Channel> channelsToAdd=new ArrayList<>();  List<Channel> channelsToDelete=new ArrayList<>();  List<Channel> channelsToUpdate=new ArrayList<>();  Map<String,Channel> localChannelMap=new ArrayMap<>();  Map<String,Channel> serverChannelMap=new ArrayMap<>();  for (  Channel channel : localChannels) {    localChannelMap.put(channel.getGeneratedId(),channel);  }  for (  Channel channel : serverChannels) {    serverChannelMap.put(channel.getGeneratedId(),channel);  }  for (  Channel channel : serverChannelMap.values()) {    if (!localChannelMap.containsKey(channel.getGeneratedId())) {      channelsToAdd.add(channel);    }  }  for (  Channel channel : localChannelMap.values()) {    if (!serverChannelMap.containsKey(channel.getGeneratedId())) {      channelsToDelete.add(channel);    }  }  for (  Channel channel : serverChannelMap.values()) {    Channel localChannel=localChannelMap.get(channel.getGeneratedId());    if (localChannel != null) {      if (!localChannel.metadataEquals(channel)) {        channel.setId(localChannel.getId());        channelsToUpdate.add(channel);      }    }  }  List<List<Channel>> channelComparison=new ArrayList<>();  channelComparison.add(channelsToUpdate);  channelComparison.add(channelsToAdd);  channelComparison.add(channelsToDelete);  return channelComparison;}  }
class C{  public String format(long x){  String r;  int s=0;  if (fmt == 'd' || fmt == 'i') {    if (x < 0) {      r=("" + x).substring(1);      s=-1;    } else {      r="" + x;      s=1;    }  } else   if (fmt == 'o')   r=convert(x,3,7,"01234567"); else   if (fmt == 'x')   r=convert(x,4,15,"0123456789abcdef"); else   if (fmt == 'X')   r=convert(x,4,15,"0123456789ABCDEF"); else   throw new java.lang.IllegalArgumentException();  return pad(sign(s,r));}  }
class C{  public ImageWarp(BufferedImage bi){  this(bi,LatLonGCT.INSTANCE,new DataBounds(-180.0,-90.0,180.0,90.0));}  }
class C{  public static TestSuite suite(){  return new TestSuite(DateConverterTestCase.class);}  }
class C{  public static long[] shiftLeftI(long[] v,int off){  if (off == 0) {    return v;  }  if (off < 0) {    return shiftRightI(v,-off);  }  final int shiftWords=off >>> LONG_LOG2_SIZE;  final int shiftBits=off & LONG_LOG2_MASK;  if (shiftWords >= v.length) {    return zeroI(v);  }  if (shiftBits == 0) {    System.arraycopy(v,0,v,shiftWords,v.length - shiftWords);    Arrays.fill(v,0,shiftWords,0);    return v;  }  final int unshiftBits=Long.SIZE - shiftBits;  for (int i=v.length - 1; i > shiftWords; i--) {    final int src=i - shiftWords;    v[i]=(v[src] << shiftBits) | (v[src - 1] >>> unshiftBits);  }  v[shiftWords]=v[0] << shiftBits;  Arrays.fill(v,0,shiftWords,0);  return v;}  }
class C{  protected static IVCount[] predicateUsage(final AbstractTripleStore kb,final IV<?,?> civ,final IVCount[] predicatePartitionCounts){  final SPORelation r=kb.getSPORelation();  final boolean quads=kb.isQuads();  if (!quads) {    throw new IllegalArgumentException();  }  final List<IVCount> counts=new LinkedList<IVCount>();  for (  IVCount in : predicatePartitionCounts) {    final long n=r.getAccessPath(null,in.iv,null,civ).rangeCount(false);    if (n == 0)     continue;    final IVCount out=new IVCount(in.iv,n);    out.setValue(in.getValue());    counts.add(out);  }  final IVCount[] a=counts.toArray(new IVCount[counts.size()]);  Arrays.sort(a);  return a;}  }
class C{  public JSweetTranspiler(){  this(new File(System.getProperty("java.io.tmpdir")),null,null,System.getProperty("java.class.path"));}  }
class C{  @NoInline public static void sysFail(String message,int number){  handlePossibleRecursiveCallToSysFail(message,number);  RVMThread.traceback(message,number);  bugReportMessage();  if (VM.runningVM) {    VM.shutdown(EXIT_STATUS_SYSFAIL);  } else {    VM.sysExit(EXIT_STATUS_SYSFAIL);  }  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  public void removeAllLayers(){  _layers.removeAllElements();  refreshLayers=true;  super.repaint();}  }
class C{  private boolean isMainActivity(Node activityNode){  if (TAG_ACTIVITY.equals(activityNode.getNodeName())) {    for (    Element activityChild : LintUtils.getChildren(activityNode)) {      if (TAG_INTENT_FILTER.equals(activityChild.getNodeName())) {        boolean hasLauncherCategory=false;        boolean hasMainAction=false;        for (        Element intentFilterChild : LintUtils.getChildren(activityChild)) {          if (NODE_CATEGORY.equals(intentFilterChild.getNodeName()) && CATEGORY_NAME_LAUNCHER.equals(intentFilterChild.getAttributeNS(ANDROID_URI,ATTR_NAME))) {            hasLauncherCategory=true;          }          if (NODE_ACTION.equals(intentFilterChild.getNodeName()) && ACTION_NAME_MAIN.equals(intentFilterChild.getAttributeNS(ANDROID_URI,ATTR_NAME))) {            hasMainAction=true;          }        }        if (hasLauncherCategory && hasMainAction) {          return true;        }      }    }  }  return false;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  java.util.ArrayList v=stack.getUIMgrSafe().getRouter().getKBAccel(UserEvent.getEvtCodeForName(getString(stack)));  String[] rv=new String[v.size()];  for (int i=0; i < v.size(); i++) {    int[] ia=(int[])v.get(i);    rv[i]=Catbert.getStringFromKeystroke(ia[0],ia[1]);  }  return rv;}  }
class C{  @CheckReturnValue public Resolve resolve(String pluginName,String... versions){  Resolve mapping=new Resolve(versions);  resolvable.put(pluginName,mapping);  return mapping;}  }
class C{  private synchronized MonitorNotification updateNotifications(CounterMonitorObservedObject o){  MonitorNotification n=null;  if (!o.getEventAlreadyNotified()) {    if (((Number)o.getDerivedGauge()).longValue() >= o.getThreshold().longValue()) {      if (notify) {        n=new MonitorNotification(THRESHOLD_VALUE_EXCEEDED,this,0,0,"",null,null,null,o.getThreshold());      }      if (!differenceMode) {        o.setEventAlreadyNotified(true);      }    }  } else {    if (MONITOR_LOGGER.isLoggable(Level.FINER)) {      final StringBuilder strb=new StringBuilder().append("The notification:").append("\n\tNotification observed object = ").append(o.getObservedObject()).append("\n\tNotification observed attribute = ").append(getObservedAttribute()).append("\n\tNotification threshold level = ").append(o.getThreshold()).append("\n\tNotification derived gauge = ").append(o.getDerivedGauge()).append("\nhas already been sent");      MONITOR_LOGGER.logp(Level.FINER,CounterMonitor.class.getName(),"updateNotifications",strb.toString());    }  }  return n;}  }
class C{  public void testParameters() throws Exception {  Similarity sim=getSimilarity("text_params");  assertEquals(DFRSimilarity.class,sim.getClass());  DFRSimilarity dfr=(DFRSimilarity)sim;  assertEquals(BasicModelIF.class,dfr.getBasicModel().getClass());  assertEquals(AfterEffectB.class,dfr.getAfterEffect().getClass());  assertEquals(NormalizationH3.class,dfr.getNormalization().getClass());  NormalizationH3 norm=(NormalizationH3)dfr.getNormalization();  assertEquals(900f,norm.getMu(),0.01f);}  }
class C{  public IGPO materialize(){  checkLive();  if (!m_materialized) {synchronized (this) {      if (!m_materialized && m_stmt == null) {        m_om.materialize(this);        m_materialized=true;      }    }  }  return this;}  }
class C{  private Track PromptFromStagingDialog(){  List<Track> tracksIn=_departLocation.getTrackList();  List<Track> validTracks=new ArrayList<Track>();  for (  Track track : tracksIn) {    if (checkDepartureStagingTrack(track)) {      validTracks.add(track);    }  }  if (validTracks.size() > 1) {    Object[] tracks=new Object[validTracks.size()];    for (int i=0; i < validTracks.size(); i++) {      tracks[i]=validTracks.get(i);    }    Track selected=(Track)JOptionPane.showInputDialog(null,MessageFormat.format(Bundle.getMessage("TrainDepartingStaging"),new Object[]{_train.getName(),_departLocation.getName()}),Bundle.getMessage("SelectDepartureTrack"),JOptionPane.QUESTION_MESSAGE,null,tracks,null);    if (selected != null) {      addLine(_buildReport,FIVE,MessageFormat.format(Bundle.getMessage("buildUserSelectedDeparture"),new Object[]{selected.getName(),selected.getLocation().getName()}));    }    return selected;  } else   if (validTracks.size() == 1) {    Track track=validTracks.get(0);    addLine(_buildReport,FIVE,MessageFormat.format(Bundle.getMessage("buildOnlyOneDepartureTrack"),new Object[]{track.getName(),track.getLocation().getName()}));    return track;  }  return null;}  }
class C{  public DrawerBuilder withActionBarDrawerToggle(@NonNull ActionBarDrawerToggle actionBarDrawerToggle){  this.mActionBarDrawerToggleEnabled=true;  this.mActionBarDrawerToggle=actionBarDrawerToggle;  return this;}  }
class C{  public void error(int message){  sendPluginResult(new PluginResult(PluginResult.Status.ERROR,message));}  }
class C{  public NotificationChain basicSetTrueExpression(Expression newTrueExpression,NotificationChain msgs){  Expression oldTrueExpression=trueExpression;  trueExpression=newTrueExpression;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.CONDITIONAL_EXPRESSION__TRUE_EXPRESSION,oldTrueExpression,newTrueExpression);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  private IgfsMode resolveMode(IgfsPath path){  return modeRslvr.resolveMode(path);}  }
class C{  public static boolean isStringType(Type t){  return t.equals(RefType.v("java.lang.String"));}  }
class C{  public HistoryReadResult clone(){  HistoryReadResult result=new HistoryReadResult();  result.StatusCode=StatusCode;  result.ContinuationPoint=ContinuationPoint;  result.HistoryData=HistoryData;  return result;}  }
class C{  public boolean configureSpliceTo(SampleQueue nextQueue){  if (spliceOutTimeUs != Long.MIN_VALUE) {    return true;  }  long firstPossibleSpliceTime;  if (rollingBuffer.peekSample(sampleInfoHolder)) {    firstPossibleSpliceTime=sampleInfoHolder.timeUs;  } else {    firstPossibleSpliceTime=lastReadTimeUs + 1;  }  RollingSampleBuffer nextRollingBuffer=nextQueue.rollingBuffer;  while (nextRollingBuffer.peekSample(sampleInfoHolder) && (sampleInfoHolder.timeUs < firstPossibleSpliceTime || (sampleInfoHolder.flags & C.SAMPLE_FLAG_SYNC) == 0)) {    nextRollingBuffer.skipSample();  }  if (nextRollingBuffer.peekSample(sampleInfoHolder)) {    spliceOutTimeUs=sampleInfoHolder.timeUs;    return true;  }  return false;}  }
class C{  public synchronized String dump() throws IOException {  StringBuilder buffer=new StringBuilder();  buffer.append(header.dump());  for (  Datasource datasource : datasources) {    buffer.append(datasource.dump());  }  for (  Archive archive : archives) {    buffer.append(archive.dump());  }  return buffer.toString();}  }
class C{  public static boolean findPhotoFromSDCard(String path,String photoName){  boolean flag=false;  if (checkSDCardAvailable()) {    File dir=new File(path);    if (dir.exists()) {      File folders=new File(path);      File photoFile[]=folders.listFiles();      for (int i=0; i < photoFile.length; i++) {        String fileName=photoFile[i].getName().split("\\.")[0];        if (fileName.equals(photoName)) {          flag=true;        }      }    } else {      flag=false;    }  } else {    flag=false;  }  return flag;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void reset(ActionMapping mapping,HttpServletRequest request){  solverParamDefs=new ArrayList();}  }
