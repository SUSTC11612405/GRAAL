class C{  void generateTrace(PrintWriter writer){  vm.setDebugTraceMode(debugTraceMode);  EventThread eventThread=new EventThread(vm,excludes,writer);  eventThread.setEventRequests(watchFields);  eventThread.start();  redirectOutput();  vm.resume();  try {    eventThread.join();    errThread.join();    outThread.join();  } catch (  InterruptedException exc) {  }  writer.close();}  }
class C{  public CertificateIssuer(byte[] encoding){  super(encoding);}  }
class C{  public synchronized AddressbookEntry add(String name,Set<String> categories){  name=StringUtil.toLowerCase(name);  addPresetCategories(categories);  if (!entries.containsKey(name)) {    set(name,categories);    return null;  } else {    AddressbookEntry currentEntry=entries.get(name);    AddressbookEntry changedEntry=new AddressbookEntry(currentEntry,categories);    entries.put(name,changedEntry);    if (!changedEntry.equalsFully(currentEntry)) {      saveOnChange();    }    return changedEntry;  }}  }
class C{  public static CustomTabsHelperFragment attachTo(Fragment fragment){  return attachTo(fragment.getActivity());}  }
class C{  public static void close(Writer writer){  try {    if (writer != null) {      writer.close();    }  } catch (  IOException ioE) {  }}  }
class C{  protected int count(int add){  inputStreamCount+=add;  return (int)add;}  }
class C{  public DoubleMatrix2D viewRow(int row){  checkRow(row);  int viewRows=this.slices;  int viewColumns=this.columns;  int viewRowZero=sliceZero;  int viewColumnZero=columnZero;  int viewOffset=this.offset + _rowOffset(_rowRank(row));  int viewRowStride=this.sliceStride;  int viewColumnStride=this.columnStride;  int[] viewRowOffsets=this.sliceOffsets;  int[] viewColumnOffsets=this.columnOffsets;  return new SelectedDenseDoubleMatrix2D(viewRows,viewColumns,this.elements,viewRowZero,viewColumnZero,viewRowStride,viewColumnStride,viewRowOffsets,viewColumnOffsets,viewOffset);}  }
class C{  protected void emit_ArrowFunctionTypeExpression_FunctionTypeExpressionOLD_LeftParenthesisKeyword_1_or___LeftCurlyBracketKeyword_1_FunctionKeyword_3_LeftParenthesisKeyword_5__(EObject semanticObject,ISynNavigable transition,List<INode> nodes){  acceptNodes(transition,nodes);}  }
class C{  private void startThreads(){  for (int i=0; i < 4; i++) {    threads[i]=new PostThread(i);    threads[i].start();  }}  }
class C{  public void toggle(){  mSlidingMenu.toggle();}  }
class C{  void validateAs(@NonNull Object obj,@NonNull Class<?> clazz,@NonNull ExclusionStrategy exclusionStrategy) throws RaveException {  if (!clazz.isInstance(obj)) {    throw new IllegalArgumentException("Trying to validate " + obj.getClass().getCanonicalName() + " as "+ clazz.getCanonicalName());  }  BaseValidator base;synchronized (this) {    base=classValidatorMap.get(clazz);    if (base == null) {      base=getValidatorInstance(clazz);    }    if (base == null) {      throw new UnsupportedObjectException(Collections.singletonList(new RaveError(obj.getClass(),"",RaveErrorStrings.CLASS_NOT_SUPPORTED_ERROR)));    }  }  base.validateAs(obj,clazz,exclusionStrategy);}  }
class C{  public static String formatColumn(OneRowChange.ColumnSpec colSpec,OneRowChange.ColumnVal value,String prefix,String charset,boolean hex,boolean specs,DateFormat dateFormatter){  String log="  - " + prefix + "(";  if (colSpec != null) {    if (specs) {      log+="index=" + colSpec.getIndex();      log+=" name=" + colSpec.getName();      log+=" type=" + colSpec.getType();      log+=" [" + sqlTypes.sqlTypeToString(colSpec.getType()) + "]";      log+=" length=" + colSpec.getLength();      log+=" unsigned=" + colSpec.isUnsigned();      log+=" blob=" + colSpec.isBlob();      log+=" desc=" + colSpec.getTypeDescription();    } else {      log+=colSpec.getIndex() + ": " + colSpec.getName();    }  }  log+=") = ";  if (value != null)   if (value.getValue() != null) {    if (value.getValue() instanceof SerialBlob) {      try {        SerialBlob blob=(SerialBlob)value.getValue();        String blobString=new String(blob.getBytes(1,maxBlobPrintLength));        log+=blobString;        if (blob.length() > maxBlobPrintLength)         log+="<...>";      } catch (      Exception e) {        log+=value.getValue().toString();      }    } else     if (value.getValue() instanceof byte[] && charset != null) {      try {        byte[] byteValue=(byte[])value.getValue();        log+=new String(byteValue,charset);        if (hex) {          StringBuffer hexValue=new StringBuffer();          hexValue.append(" (x");          for (          byte b : byteValue) {            hexValue.append(String.format("%2.2x",b));          }          hexValue.append(")");          log+=hexValue.toString();        }      } catch (      UnsupportedEncodingException e) {        logger.warn("Unsupported encoding " + charset,e);      }    } else     if (colSpec.getType() == Types.DATE && value.getValue() instanceof Timestamp) {      Timestamp ts=(Timestamp)value.getValue();      StringBuffer date=new StringBuffer(dateFormatter.format(ts));      if (ts.getNanos() > 0) {        date.append(".");        date.append(String.format("%09d%n",ts.getNanos()));      }      log+=date.toString();    } else     log+=value.getValue().toString();  } else   log+="NULL"; else   log+="NULL";  return log;}  }
class C{  public Object toIdObject(String baseId) throws ActiveMQAMQPIllegalStateException {  if (baseId == null) {    return null;  }  try {    if (hasAmqpUuidPrefix(baseId)) {      String uuidString=strip(baseId,AMQP_UUID_PREFIX_LENGTH);      return UUID.fromString(uuidString);    } else     if (hasAmqpUlongPrefix(baseId)) {      String longString=strip(baseId,AMQP_ULONG_PREFIX_LENGTH);      return UnsignedLong.valueOf(longString);    } else     if (hasAmqpStringPrefix(baseId)) {      return strip(baseId,AMQP_STRING_PREFIX_LENGTH);    } else     if (hasAmqpBinaryPrefix(baseId)) {      String hexString=strip(baseId,AMQP_BINARY_PREFIX_LENGTH);      byte[] bytes=convertHexStringToBinary(hexString);      return new Binary(bytes);    } else {      return baseId;    }  } catch (  IllegalArgumentException e) {    throw new ActiveMQAMQPIllegalStateException("Unable to convert ID value");  }}  }
class C{  public static int px2dip(Context context,float px){  if (context == null) {    return -1;  }  return (int)(pxToDip(context,px) + 0.5f);}  }
class C{  protected void replaceBody(final Object newValue){}  }
class C{  public Boolean isAcceptRouterAdvert(){  return acceptRouterAdvert;}  }
class C{  @Override public void printStackTrace(){  printStackTrace(System.err);}  }
class C{  public IntroduceParameterDescriptor(){  super(IJavaRefactorings.INTRODUCE_PARAMETER);}  }
class C{  public void onBlockHarvested(World world,BlockPos pos,IBlockState state,EntityPlayer player){}  }
class C{  public static void destroy(ServiceHost host) throws Throwable {  host.stop();  File sandbox=new File(host.getStorageSandbox());  int maxAttempts=10;  for (int i=0; i < maxAttempts; i++) {    try {      if (sandbox.exists()) {        FileUtils.forceDelete(sandbox);      }      break;    } catch (    FileNotFoundException ex) {      if (i == maxAttempts - 1) {        throw ex;      }      logger.warn("Some file disappeared from the sandbox during deletion, will retry deleting sandbox",ex);      Thread.sleep(TimeUnit.SECONDS.toMillis(1));    }  }}  }
class C{  private boolean fireSelectionListeners(final MouseEvent mouseEvent){  for (  final SelectionListener listener : this.listOfSelectionListeners) {    final Event event=new Event();    event.button=mouseEvent.button;    event.display=this.getDisplay();    event.item=null;    event.widget=this;    event.data=null;    event.time=mouseEvent.time;    event.x=mouseEvent.x;    event.y=mouseEvent.y;    final SelectionEvent selEvent=new SelectionEvent(event);    listener.widgetSelected(selEvent);    if (!selEvent.doit) {      return false;    }  }  return true;}  }
class C{  public ProtocolException(){  super();}  }
class C{  public void paintComponent(Graphics g){  g.drawImage(track,0,0,null);  Graphics2D g2d=(Graphics2D)g.create();  g2d.translate(carPosition.x,carPosition.y);  g2d.rotate(Math.toRadians(carRotation));  g2d.translate(-(carPosition.x),-(carPosition.y));  g2d.drawImage(car,carPosition.x - carWHalf,carPosition.y - carHHalf,null);}  }
class C{  public PrintException(String s){  super(s);}  }
class C{  public boolean onReceivedHttpAuthRequest(CordovaWebView view,ICordovaHttpAuthHandler handler,String host,String realm){  for (  CordovaPlugin plugin : this.pluginMap.values()) {    if (plugin != null && plugin.onReceivedHttpAuthRequest(view,handler,host,realm)) {      return true;    }  }  return false;}  }
class C{  @GET @Path("repository") @ZeppelinApi public Response listRepositories(){  List<RemoteRepository> interpreterRepositories=interpreterFactory.getRepositories();  return new JsonResponse<>(Status.OK,"",interpreterRepositories).build();}  }
class C{  public Object options(){  return options;}  }
class C{  public void initialize() throws ODataUnmarshallingException {  LOG.info("Parser is initializing");  try {    JsonParser jsonParser=JSON_FACTORY.createParser(inputJson);    while (jsonParser.nextToken() != JsonToken.END_OBJECT) {      String token=jsonParser.getCurrentName();      if (token != null) {        if (token.startsWith(ODATA)) {          processSpecialTags(jsonParser);        } else         if (token.endsWith(ODATA_BIND)) {          processLinks(jsonParser);        } else {          process(jsonParser);        }      }    }  } catch (  IOException e) {    throw new ODataUnmarshallingException("It is unable to unmarshall",e);  }}  }
class C{  public boolean isUseFieldNames(){  return super.isUseFieldNames();}  }
class C{  public final void readDouble(double[] pa,int start,int n) throws IOException {  for (int i=0; i < n; i++) {    pa[start + i]=Double.longBitsToDouble(readLong());  }}  }
class C{  public MergePath(){  this(null,"/",null,"/");}  }
class C{  private double estimatePolychoric(int indices[]){  this.indices=indices;  double start[]=new double[1];  RandomUtil r=RandomUtil.getInstance();  this.currentVar1=indices[0];  this.currentVar2=indices[1];  this.currentFiBuffer=new double[this.values[currentVar1].length + 1][this.values[currentVar2].length + 1];  this.currentPi=new double[this.values[currentVar1].length][this.values[currentVar2].length];  this.currentRho=start[0]=r.nextDouble() / 2. + 0.2;  this.currentRho=gridOptimizer();  return this.currentRho;}  }
class C{  @Override public void run(){  amIActive=true;  String outputHeader=null;  WhiteboxRaster image=null;  WhiteboxRaster output=null;  int row, col;  int nRows, nCols;  double z;  int progress=0;  int i, a;  double noData=-32768;  double outputNoData=-32768;  String inputDataString=null;  int numImages=0;  double sumOfWeights=0;  double d=0;  double weight=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String[] dataSplit=args[0].split(";");  outputHeader=args[1];  if (outputHeader == null) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  ArrayList<String> imageFiles=new ArrayList<>();  ArrayList<Double> weights=new ArrayList<>();  for (a=0; a < dataSplit.length; a+=2) {    if (!dataSplit[a].trim().equals("") && !dataSplit[a].trim().toLowerCase().equals("not specified")) {      imageFiles.add(dataSplit[a]);      weights.add(Double.parseDouble(dataSplit[a + 1]));      sumOfWeights+=weights.get(numImages);      numImages++;    }  }  for (a=0; a < numImages; a++) {    d=weights.get(a) / sumOfWeights;    weights.set(a,d);  }  try {    image=new WhiteboxRaster(imageFiles.get(0),"r");    nRows=image.getNumberRows();    nCols=image.getNumberColumns();    outputNoData=image.getNoDataValue();    output=new WhiteboxRaster(outputHeader,"rw",imageFiles.get(0),WhiteboxRaster.DataType.FLOAT,0);    for (i=0; i < numImages; i++) {      progress=(int)(100f * (i + 1) / numImages);      updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      weight=weights.get(i);      if (i > 0) {        image=new WhiteboxRaster(imageFiles.get(i),"r");        noData=image.getNoDataValue();        if (image.getNumberRows() != nRows || image.getNumberColumns() != nCols) {          showFeedback("All input images must have the same dimensions (rows and columns).");          return;        }      }      double[] data=null;      for (row=0; row < nRows; row++) {        data=image.getRowValues(row);        for (col=0; col < nCols; col++) {          if (data[col] != noData) {            z=output.getValue(row,col);            if (z != outputNoData) {              output.setValue(row,col,z + data[col] * weight);            }          } else {            output.setValue(row,col,outputNoData);          }        }        if (cancelOp) {          cancelOperation();          return;        }      }      image.close();    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override protected void doAction(){  try {    KeyStoreHistory history=kseFrame.getActiveKeyStoreHistory();    KeyStoreState currentState=history.getCurrentState();    KeyStore keyStore=currentState.getKeyStore();    String alias=kseFrame.getSelectedEntryAlias();    PublicKey pubKey=keyStore.getCertificate(alias).getPublicKey();    DViewPublicKey dViewPublicKey=new DViewPublicKey(frame,MessageFormat.format(res.getString("TrustedCertificatePublicKeyDetailsAction.PubKeyDetailsEntry.Title"),alias),pubKey);    dViewPublicKey.setLocationRelativeTo(frame);    dViewPublicKey.setVisible(true);  } catch (  Exception ex) {    DError.displayError(frame,ex);  }}  }
class C{  public void replaceText(int startIndex,int endIndex,String s){  AccessibleEditableText at=getEditorAccessibleEditableText();  if (at != null) {    at.replaceText(startIndex,endIndex,s);  }}  }
class C{  public boolean enterBusy(){  int val=state().incrementAndGet();  if ((val & WRITER_MASK) == WRITER_MASK) {    leaveBusy();    return false;  } else   return true;}  }
class C{  public void addFilterField(String id,String description){  addFilterField(new FilterField(id,description));}  }
class C{  static OutputStream ostreamFromFile(File f,boolean allowoverwrite){  java.io.FileOutputStream os=null;  if (f.exists() && !allowoverwrite)   throw new PngjOutputException("File already exists: " + f);  try {    os=new java.io.FileOutputStream(f);  } catch (  Exception e) {    throw new PngjInputException("Could not open for write" + f,e);  }  return os;}  }
class C{  static Map processDeltaMap(Map map,Map referenceMap){  Map mapDelta=new HashMap();  Iterator iter=map.keySet().iterator();  while (iter.hasNext()) {    String key=(String)iter.next();    String value=(String)map.get(key);    String refValue=(String)referenceMap.get(key);    if (!value.equals(refValue)) {      mapDelta.put(key,value);    }  }  return mapDelta;}  }
class C{  private void clientDestroy() throws Exception {  grid(0).getOrCreateCache(getClientConfig());  assertNull(grid(0).cache(CACHE_NAME_CLIENT).get(KEY_VAL));  grid(0).cache(CACHE_NAME_CLIENT).put(KEY_VAL,KEY_VAL);  assertEquals(KEY_VAL,grid(0).cache(CACHE_NAME_CLIENT).get(KEY_VAL));  assertEquals(KEY_VAL,grid(1).cache(CACHE_NAME_CLIENT).get(KEY_VAL));  assertEquals(KEY_VAL,grid(2).cache(CACHE_NAME_CLIENT).get(KEY_VAL));  assertTrue(grid(2).configuration().isClientMode());  IgniteCache<Object,Object> cache=grid(2).cache(CACHE_NAME_CLIENT);  cache.destroy();  checkDestroyed(cache);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypeRefsPackage.PARAMETERIZED_TYPE_REF__DECLARED_TYPE:    setDeclaredType((Type)newValue);  return;case TypeRefsPackage.PARAMETERIZED_TYPE_REF__TYPE_ARGS:getTypeArgs().clear();getTypeArgs().addAll((Collection<? extends TypeArgument>)newValue);return;case TypeRefsPackage.PARAMETERIZED_TYPE_REF__ARRAY_TYPE_LITERAL:setArrayTypeLiteral((Boolean)newValue);return;case TypeRefsPackage.PARAMETERIZED_TYPE_REF__DEFINED_TYPING_STRATEGY:setDefinedTypingStrategy((TypingStrategy)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  private void updateImageBasedOnHeading(){  for (  Entry<Double,Animation> entry : imageMap.entrySet()) {    if (heading < entry.getKey()) {      setAnimation(entry.getValue());      break;    }  }}  }
class C{  public void visitTryCatchBlock(Label start,Label end,Label handler,String type){  if (mv != null) {    mv.visitTryCatchBlock(start,end,handler,type);  }}  }
class C{  protected static void assertNotNull(final Object obj,final String message,final Object... args){  if (obj == null) {    throw new NullPointerException(String.format(message,args));  }}  }
class C{  public boolean isLegalDeployment(Coords c,int nDir){  if ((c == null) || !contains(c)) {    return false;  }  int nLimit=3;  int minx=0;  int maxx=width;  int miny=0;  int maxy=height;  if (nDir > 10) {    nDir-=10;    minx=width / 5;    maxx-=width / 5;    miny=height / 5;    maxy-=height / 5;    if ((c.getX() < minx) || (c.getY() < miny) || (c.getX() >= maxx)|| (c.getY() >= maxy)) {      return false;    }  }switch (nDir) {case START_ANY:    return true;case START_NW:  return ((c.getX() < (minx + nLimit)) && (c.getX() >= minx) && (c.getY() < (height / 2))) || ((c.getY() < (miny + nLimit)) && (c.getY() >= miny) && (c.getX() < (width / 2)));case START_N:return (c.getY() < (miny + nLimit)) && (c.getY() >= miny);case START_NE:return ((c.getX() > (maxx - nLimit)) && (c.getX() < maxx) && (c.getY() < (height / 2))) || ((c.getY() < (miny + nLimit)) && (c.getY() >= miny) && (c.getX() > (width / 2)));case START_E:return (c.getX() >= (maxx - nLimit)) && (c.getX() < maxx);case START_SE:return ((c.getX() >= (maxx - nLimit)) && (c.getX() < maxx) && (c.getY() > (height / 2))) || ((c.getY() >= (maxy - nLimit)) && (c.getY() < maxy) && (c.getX() > (width / 2)));case START_S:return (c.getY() >= (maxy - nLimit)) && (c.getY() < maxy);case START_SW:return ((c.getX() < (minx + nLimit)) && (c.getX() >= minx) && (c.getY() > (height / 2))) || ((c.getY() >= (maxy - nLimit)) && (c.getY() < maxy) && (c.getX() < (width / 2)));case START_W:return (c.getX() < (minx + nLimit)) && (c.getX() >= minx);case START_EDGE:return ((c.getX() < (minx + nLimit)) && (c.getX() >= minx)) || ((c.getY() < (miny + nLimit)) && (c.getY() >= miny)) || ((c.getX() >= (maxx - nLimit)) && (c.getX() < maxx))|| ((c.getY() >= (maxy - nLimit)) && (c.getY() < maxy));case START_CENTER:return (c.getX() >= (width / 3)) && (c.getX() <= ((2 * width) / 3)) && (c.getY() >= (height / 3))&& (c.getY() <= ((2 * height) / 3));default :return false;}}  }
class C{  public static int overload1or2(int one,int two){  return one + two;}  }
class C{  public SessionChannel createSessionChannel(EndpointDescription endpoint) throws ServiceResultException {  return createSessionChannel(endpoint.getEndpointUrl(),endpoint);}  }
class C{  protected boolean hasCompressedThumbnail(){  return mThumbnail != null;}  }
class C{  @Inline public static Offset alignAllocation(Offset initialOffset,int align,int offset){  Address region=org.jikesrvm.runtime.Memory.alignUp(initialOffset.toWord().toAddress(),MIN_ALIGNMENT);  return Allocator.alignAllocationNoFill(region,align,offset).toWord().toOffset();}  }
class C{  static boolean pidSeExAlive(String pid){  final Pattern pattern=Pattern.compile(M.e("event_handler"));  if (pidAlive(pid)) {    try {      String stat=AutoFile.getFileContents(M.e("/proc/") + pid + "/"+ M.e("stat"));      Matcher matcher=pattern.matcher(stat);      if (matcher.find()) {        return false;      }    } catch (    Exception e1) {      if (Cfg.EXCEPTION) {        Check.log(e1);      }      if (Cfg.DEBUG) {        Check.log(e1);        Check.log(TAG + " (pidSeExAlive): Exception");      }    }    return true;  }  return false;}  }
class C{  public IntPanel(){  initComponents();}  }
class C{  public static void main(String args[]){  new SimpleAgentApp().startApplication();}  }
class C{  public DERSequence(){}  }
class C{  static Object newPropertyChangeEvent(Object source,String prop,Object oldValue,Object newValue){  try {    return propertyEventCtor.newInstance(source,prop,oldValue,newValue);  } catch (  InstantiationException|IllegalAccessException x) {    throw new AssertionError(x);  }catch (  InvocationTargetException x) {    Throwable cause=x.getCause();    if (cause instanceof Error)     throw (Error)cause;    if (cause instanceof RuntimeException)     throw (RuntimeException)cause;    throw new AssertionError(x);  }}  }
class C{  public static boolean isMirror(UnManagedVolume volume){  if (null == volume.getVolumeCharacterstics()) {    return false;  }  String status=volume.getVolumeCharacterstics().get(SupportedVolumeCharacterstics.IS_LOCAL_MIRROR.toString());  return TRUE.equals(status);}  }
class C{  public boolean containsValue(V val){  V[] values=_values;  if (null == val) {    for (int i=values.length; i-- > 0; ) {      if (TObjectHash.NULL == values[i]) {        return true;      }    }  } else {    for (int i=values.length; i-- > 0; ) {      V value=unwrapNull(values[i]);      if (isFull(values,i) && (val == value || val.equals(value))) {        return true;      }    }  }  return false;}  }
class C{  private boolean warmUpTextLayoutCache(Layout layout){  boolean result;  try {    layout.draw(DUMMY_CANVAS);    result=true;  } catch (  Exception e) {    WXLogUtils.eTag(TAG,e);    result=false;  }  return result;}  }
class C{  SimpleTimeZone convertToTz(){  if (validParse) {    int startDayOfWeek=days[startDates[2]];    int startDay;    if (startDates[1] != 5) {      startDay=(startDates[1] - 1) * 7 + startDayOfWeek;      startDayOfWeek=-startDayOfWeek;    } else {      startDay=-1;    }    int endDayOfWeek=days[endDates[2]];    int endDay;    if (endDates[1] != 5) {      endDay=(endDates[1] - 1) * 7 + endDayOfWeek;      endDayOfWeek=-endDay;    } else {      endDay=-1;    }    SimpleTimeZone tz;    try {      if (noDST) {        tz=new SimpleTimeZone(-stdOffsetMS,stdName);      } else {        tz=new SimpleTimeZone(-stdOffsetMS,stdName,months[startDates[0]],startDay,startDayOfWeek,startTime,months[endDates[0]],endDay,endDayOfWeek,endTime,(stdOffsetMS - dstOffsetMS));      }    } catch (    IllegalArgumentException e) {      return null;    }    return tz;  }  return null;}  }
class C{  public BrowsableEditableData(ListProvider dataprov,SaveProvider saveprov,Comparator c,EditorRecord ed,DirtyManager dirty){  this(new BrowsableData(dataprov,saveprov,c),ed,dirty);}  }
class C{  private boolean isVisible(SootClass from,SootMethod m){  from.checkLevel(SootClass.HIERARCHY);  if (m.isPublic())   return true;  if (m.isPrivate()) {    return from.equals(m.getDeclaringClass());  }  if (m.isProtected()) {    return canStoreClass(from,m.getDeclaringClass());  }  return from.getJavaPackageName().equals(m.getDeclaringClass().getJavaPackageName());}  }
class C{  public MlBayesImObs(BayesPm bayesPm) throws IllegalArgumentException {  this(bayesPm,MANUAL);}  }
class C{  protected void initializeAllLiveAttributes(){  super.initializeAllLiveAttributes();  initializeLiveAttributes();}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputFile;  int progress;  int i, n;  int numFeatures;  int oneHundredthTotal;  int startingPointInPart, endingPointInPart;  double[][] vertices;  ShapeType shapeType, outputShapeType;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputFile=args[1];  if ((inputFile == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    shapeType=input.getShapeType();    if (shapeType.getBaseType() != ShapeType.POLYGON) {      showFeedback("This tool only works with shapefiles of a polygon base shape type.");      return;    }    outputShapeType=shapeType;    ShapeFile output=new ShapeFile(outputFile,outputShapeType);    output.setProjectionStringFromOtherShapefile(input);    FileUtilities.copyFile(new File(input.getDatabaseFile()),new File(output.getDatabaseFile()));    numFeatures=input.getNumberOfRecords();    oneHundredthTotal=numFeatures / 100;    n=0;    progress=0;    for (    ShapeFileRecord record : input.records) {switch (shapeType) {case POLYGON:        whitebox.geospatialfiles.shapefile.Polygon recPoly=(whitebox.geospatialfiles.shapefile.Polygon)(record.getGeometry());      vertices=recPoly.getPoints();    if (recPoly.getNumberOfHoles() == 0) {      output.addRecord(recPoly);    } else {      whitebox.geospatialfiles.shapefile.Polygon recPolygonOutput=(whitebox.geospatialfiles.shapefile.Polygon)(record.getGeometry());      ArrayList<ShapefilePoint> pnts=new ArrayList<>();      int numParts=recPoly.getNumParts() - recPoly.getNumberOfHoles();      int[] outParts=new int[numParts];      int[] inParts=recPoly.getParts();      int numPoints=recPoly.getNumPoints();      int numPartsIn=recPoly.getNumParts();      boolean[] isHole=recPoly.getPartHoleData();      int outPartNum=0;      for (int part=0; part < inParts.length; part++) {        if (!isHole[part]) {          outParts[outPartNum]=pnts.size();          startingPointInPart=inParts[part];          if (part < numPartsIn - 1) {            endingPointInPart=inParts[part + 1];          } else {            endingPointInPart=numPoints;          }          for (int p=startingPointInPart; p < endingPointInPart; p++) {            pnts.add(new ShapefilePoint(vertices[p][0],vertices[p][1]));          }          outPartNum++;        }      }      PointsList pl=new PointsList(pnts);      whitebox.geospatialfiles.shapefile.Polygon wbPoly=new whitebox.geospatialfiles.shapefile.Polygon(outParts,pl.getPointsArray());      output.addRecord(wbPoly);    }  break;case POLYGONZ:PolygonZ recPolyZ=(PolygonZ)(record.getGeometry());vertices=recPolyZ.getPoints();if (recPolyZ.getNumberOfHoles() == 0) {output.addRecord(recPolyZ);} else {ArrayList<ShapefilePoint> pnts=new ArrayList<ShapefilePoint>();int numParts=recPolyZ.getNumParts() - recPolyZ.getNumberOfHoles();int[] outParts=new int[numParts];int[] inParts=recPolyZ.getParts();int numPoints=recPolyZ.getNumPoints();int numPartsIn=recPolyZ.getNumParts();boolean[] isHole=recPolyZ.getPartHoleData();int outPartNum=0;for (int part=0; part < inParts.length; part++) {if (!isHole[part]) {  outParts[outPartNum]=pnts.size();  startingPointInPart=inParts[part];  if (part < numPartsIn - 1) {    endingPointInPart=inParts[part + 1];  } else {    endingPointInPart=numPoints;  }  for (int p=startingPointInPart; p < endingPointInPart; p++) {    pnts.add(new ShapefilePoint(vertices[p][0],vertices[p][1]));  }  outPartNum++;}}PointsList pl=new PointsList(pnts);double[] zArray=recPolyZ.getzArray();double[] zArrayOut=new double[pnts.size()];int j=0;for (int part=0; part < inParts.length; part++) {if (!isHole[part]) {  startingPointInPart=inParts[part];  if (part < numPartsIn - 1) {    endingPointInPart=inParts[part + 1];  } else {    endingPointInPart=numPoints;  }  for (int p=startingPointInPart; p < endingPointInPart; p++) {    zArrayOut[j]=zArray[p];    j++;  }}}double[] mArray=recPolyZ.getmArray();double[] mArrayOut=new double[pnts.size()];j=0;for (int part=0; part < inParts.length; part++) {if (!isHole[part]) {  startingPointInPart=inParts[part];  if (part < numPartsIn - 1) {    endingPointInPart=inParts[part + 1];  } else {    endingPointInPart=numPoints;  }  for (int p=startingPointInPart; p < endingPointInPart; p++) {    mArrayOut[j]=mArray[p];    j++;  }}}PolygonZ wbPoly=new PolygonZ(outParts,pl.getPointsArray(),zArrayOut,mArrayOut);output.addRecord(wbPoly);}break;case POLYGONM:PolygonM recPolyM=(PolygonM)(record.getGeometry());vertices=recPolyM.getPoints();if (recPolyM.getNumberOfHoles() == 0) {output.addRecord(recPolyM);} else {ArrayList<ShapefilePoint> pnts=new ArrayList<>();int numParts=recPolyM.getNumParts() - recPolyM.getNumberOfHoles();int[] outParts=new int[numParts];int[] inParts=recPolyM.getParts();int numPoints=recPolyM.getNumPoints();int numPartsIn=recPolyM.getNumParts();boolean[] isHole=recPolyM.getPartHoleData();int outPartNum=0;for (int part=0; part < inParts.length; part++) {if (!isHole[part]) {outParts[outPartNum]=pnts.size();startingPointInPart=inParts[part];if (part < numPartsIn - 1) {endingPointInPart=inParts[part + 1];} else {endingPointInPart=numPoints;}for (int p=startingPointInPart; p < endingPointInPart; p++) {pnts.add(new ShapefilePoint(vertices[p][0],vertices[p][1]));}outPartNum++;}}PointsList pl=new PointsList(pnts);double[] mArray=recPolyM.getmArray();double[] mArrayOut=new double[pnts.size()];int j=0;for (int part=0; part < inParts.length; part++) {if (!isHole[part]) {startingPointInPart=inParts[part];if (part < numPartsIn - 1) {endingPointInPart=inParts[part + 1];} else {endingPointInPart=numPoints;}for (int p=startingPointInPart; p < endingPointInPart; p++) {mArrayOut[j]=mArray[p];j++;}}}PolygonM wbPoly=new PolygonM(outParts,pl.getPointsArray(),mArrayOut);output.addRecord(wbPoly);}break;}n++;if (n >= oneHundredthTotal) {n=0;if (cancelOp) {cancelOperation();return;}progress++;updateProgress(progress);}}output.write();updateProgress("Displaying vector: ",0);returnData(outputFile);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public static void putObject(SharedPreferences.Editor editor,String key,Object value){  if (value instanceof Integer) {    int intValue=((Integer)value).intValue();    editor.putInt(key,intValue);  } else   if (value instanceof String) {    String stringValue=value.toString();    editor.putString(key,stringValue);  } else   if (value instanceof Boolean) {    boolean booleanValue=((Boolean)value).booleanValue();    editor.putBoolean(key,booleanValue);  } else {    throw new IllegalArgumentException("Preference " + value + " of type "+ value.getClass()+ " is not supported");  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static double[][] readMatrix(int numberOfRows,int numberOfColumns,boolean ignoreFirstLine,String fileName){  double[][] matrix=new double[numberOfRows][numberOfColumns];  try {    FileReader fr=new FileReader(fileName);    BufferedReader br=new BufferedReader(fr);    String line;    StringTokenizer tokenizer;    String token;    if (ignoreFirstLine) {      br.readLine();    }    line=br.readLine();    int rowId=0;    while (line != null) {      tokenizer=new StringTokenizer(line);      for (int i=0; i < numberOfColumns; i++) {        token=tokenizer.nextToken();        double parsedNumber=Double.parseDouble(token);        matrix[rowId][i]=parsedNumber;      }      if (tokenizer.hasMoreTokens()) {        throw new RuntimeException("the number of columns is wrong");      }      line=br.readLine();      rowId++;    }    if (rowId != numberOfRows) {      throw new RuntimeException("the number of rows is wrong");    }  } catch (  RuntimeException e) {    throw e;  }catch (  Exception e) {    e.printStackTrace();    throw new RuntimeException("Error reading the matrix from the file");  }  return matrix;}  }
class C{  public SVGZOutputFormat(){}  }
class C{  public static Builder builder(VoteRequest request){  return new Builder(request);}  }
class C{  public static ComponentUI createUI(JComponent c){  throw new Error("ComponentUI.createUI not implemented.");}  }
class C{  public void write(InputStream stream){  if (isFinal) {    log.warning("attempting to write to a final SpeechData object");    return;  }  try {    int nRead;    byte[] buffer=new byte[1024 * 16];    while ((nRead=stream.read(buffer,0,buffer.length)) != -1) {      byte[] newData=new byte[data.length + nRead];      System.arraycopy(data,0,newData,0,data.length);      System.arraycopy(buffer,0,newData,data.length,nRead);      data=newData;    }  } catch (  IOException e) {    log.warning("Cannot write the stream to the speech data");  }}  }
class C{  private boolean pruned(Type type){  return pruned(TypeToken.of(type).getRawType());}  }
class C{  public DefaultRequest userTimingCategory(String value){  setString(USER_TIMING_CATEGORY,value);  return this;}  }
class C{  String codebaseToString(){  String stringEntry=new String();  if (grantEntry.codeBase != null && grantEntry.codeBase.equals("") == false)   stringEntry=stringEntry.concat("CodeBase \"" + grantEntry.codeBase + "\"");  if (grantEntry.signedBy != null && grantEntry.signedBy.equals("") == false)   stringEntry=((stringEntry.length() > 0) ? stringEntry.concat(", SignedBy \"" + grantEntry.signedBy + "\"") : stringEntry.concat("SignedBy \"" + grantEntry.signedBy + "\""));  if (stringEntry.length() == 0)   return new String("CodeBase <ALL>");  return stringEntry;}  }
class C{  protected DOMException createDOMException(short type,String key,Object[] args){  return element.createDOMException(type,key,args);}  }
class C{  private void initRequestFactory(String applicationName){  if (applicationName != null) {    requestFactory.setHeader("User-Agent",applicationName + " " + getServiceVersion());  } else {    requestFactory.setHeader("User-Agent",getServiceVersion());  }}  }
class C{  public void createPictScenario03_5() throws Exception {  BillingIntegrationTestBase.setDateFactoryInstance("2013-02-28 00:00:00");  String supplierAdminId="Pict03_5Supplier";  VOOrganization supplier=orgSetup.createOrganization(basicSetup.getPlatformOperatorUserKey(),supplierAdminId,"Pict03_5SupplierOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_DE,OrganizationRoleType.TECHNOLOGY_PROVIDER,OrganizationRoleType.SUPPLIER);  VOUser supplierAdmin=orgSetup.getUser(supplierAdminId,true);  VOMarketplace supplMarketplace=orgSetup.createMarketplace("Pict03_5Supplier_MP",false,supplier);  paymentSetup.createPaymentForSupplier(basicSetup.getPlatformOperatorUserKey(),supplierAdmin.getKey(),supplier);  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER,ROLE_TECHNOLOGY_MANAGER);  serviceSetup.importTechnicalServices(BaseAdmUmTest.TECHNICAL_SERVICE_EXAMPLE2_ASYNC_XML);  VOTechnicalService example2TechService=serviceSetup.getTechnicalService(VOTechServiceFactory.TECH_SERVICE_EXAMPLE2_ASYNC_ID);  setCutOffDay(supplierAdmin.getKey(),1);  String customerAdminId="PIC03_5Customer";  VOOrganization customer=orgSetup.registerCustomer("PIC03_5CustomerOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_UK,customerAdminId,supplMarketplace.getMarketplaceId(),supplier.getOrganizationId());  VOUser customerAdmin=orgSetup.getUser(customerAdminId,true);  VOServiceDetails serviceDetailsTemp=serviceSetup.createAndPublishMarketableService(supplierAdmin.getKey(),"PICT_TEST_03_5",TestService.EXAMPLE2_ASYNC,TestPriceModel.FREE,example2TechService,supplMarketplace);  VOServiceDetails serviceDetails=serviceSetup.savePriceModelForCustomer(serviceDetailsTemp,TestPriceModel.EXAMPLE_PICT03_5_UNIT_HOUR,customer);  serviceDetails=serviceSetup.activateMarketableService(serviceDetails);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("PICT_TEST_03_5",serviceDetails,customerAdmin,role);  long usageStartTime=DateTimeHandling.calculateMillis("2013-03-01 00:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  subDetails=subscrSetup.completeAsyncSubscription(supplierAdmin.getKey(),customerAdmin,subDetails);  long userDeassignedTime=DateTimeHandling.calculateMillis("2013-03-02 10:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userDeassignedTime);  subscrSetup.revokeUser(customerAdmin,subDetails.getSubscriptionId());  long userAssignedTime=DateTimeHandling.calculateMillis("2013-03-02 12:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userAssignedTime);  role=VOServiceFactory.getRole(serviceDetails,"USER");  subDetails=subscrSetup.addUser(customerAdmin,role,subDetails.getSubscriptionId());  userDeassignedTime=DateTimeHandling.calculateMillis("2013-03-02 13:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userDeassignedTime);  subscrSetup.revokeUser(customerAdmin,subDetails.getSubscriptionId());  userAssignedTime=DateTimeHandling.calculateMillis("2013-03-02 14:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userAssignedTime);  subDetails=subscrSetup.addUser(customerAdmin,role,subDetails.getSubscriptionId());  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER,ROLE_TECHNOLOGY_MANAGER);  subscrSetup.recordEventForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-03-03 05:00:00"),"FILE_DOWNLOAD",1);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  userDeassignedTime=DateTimeHandling.calculateMillis("2013-03-22 10:10:00");  BillingIntegrationTestBase.setDateFactoryInstance(userDeassignedTime);  subDetails=subscrSetup.revokeUser(customerAdmin,subDetails.getSubscriptionId());  userAssignedTime=DateTimeHandling.calculateMillis("2013-03-22 10:15:00");  BillingIntegrationTestBase.setDateFactoryInstance(userAssignedTime);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,userAssignedTime,"PERIOD",DateTimeHandling.daysToMillis(200) + "");  userAssignedTime=DateTimeHandling.calculateMillis("2013-03-22 10:20:00");  BillingIntegrationTestBase.setDateFactoryInstance(userAssignedTime);  subDetails=subscrSetup.completeAsyncModifySubscription(supplierAdmin.getKey(),customerAdmin,subDetails);  role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  subDetails=subscrSetup.addUser(customerAdmin,role,subDetails.getSubscriptionId());  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER,ROLE_TECHNOLOGY_MANAGER);  subscrSetup.recordEventForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-03-23 05:00:00"),"FILE_UPLOAD",1);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  long userterminateTime=DateTimeHandling.calculateMillis("2013-04-01 10:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userterminateTime);  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-04-01 13:00:01"));  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  serviceSetup.deleteMarketableService(serviceDetails);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-04-01 13:00:02"));  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  serviceSetup.deleteMarketableService(serviceDetailsTemp);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-04-01 13:00:03"));  container.login(supplierAdmin.getKey(),ROLE_TECHNOLOGY_MANAGER);  serviceSetup.deleteTechnicalService(example2TechService);  resetCutOffDay(supplierAdmin.getKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_03_5",subDetails);  BillingIntegrationTestBase.updateCustomerListForTests("PICT_TEST_03_5",customer);}  }
class C{  public static void moveCaretToLineEnd(@NotNull Editor editor,boolean isWithSelection,boolean ignoreTrailingWhitespace){  Document document=editor.getDocument();  SelectionModel selectionModel=editor.getSelectionModel();  int selectionStart=selectionModel.getLeadSelectionOffset();  CaretModel caretModel=editor.getCaretModel();  LogicalPosition blockSelectionStart=caretModel.getLogicalPosition();  SoftWrapModel softWrapModel=editor.getSoftWrapModel();  int lineNumber=editor.getCaretModel().getLogicalPosition().line;  if (lineNumber >= document.getLineCount()) {    LogicalPosition pos=new LogicalPosition(lineNumber,0);    editor.getCaretModel().moveToLogicalPosition(pos);    setupSelection(editor,isWithSelection,selectionStart,blockSelectionStart);    EditorModificationUtil.scrollToCaret(editor);    return;  }  VisualPosition currentVisualCaret=editor.getCaretModel().getVisualPosition();  VisualPosition visualEndOfLineWithCaret=new VisualPosition(currentVisualCaret.line,EditorUtil.getLastVisualLineColumnNumber(editor,currentVisualCaret.line),true);  if (currentVisualCaret.equals(visualEndOfLineWithCaret)) {    LogicalPosition logical=editor.visualToLogicalPosition(visualEndOfLineWithCaret);    int offset=editor.logicalPositionToOffset(logical);    if (offset < editor.getDocument().getTextLength()) {      SoftWrap softWrap=softWrapModel.getSoftWrap(offset);      if (softWrap == null) {        softWrap=softWrapModel.getSoftWrap(offset + 1);      }      int line=currentVisualCaret.line;      int column=currentVisualCaret.column;      if (softWrap != null) {        line++;        column=EditorUtil.getLastVisualLineColumnNumber(editor,line);      }      visualEndOfLineWithCaret=new VisualPosition(line,column,true);    }  }  LogicalPosition logLineEnd=editor.visualToLogicalPosition(visualEndOfLineWithCaret);  int offset=editor.logicalPositionToOffset(logLineEnd);  lineNumber=logLineEnd.line;  int newOffset=offset;  CharSequence text=document.getCharsSequence();  for (int i=newOffset - 1; i >= document.getLineStartOffset(lineNumber); i--) {    if (softWrapModel.getSoftWrap(i) != null) {      newOffset=offset;      break;    }    if (text.charAt(i) != ' ' && text.charAt(i) != '\t') {      break;    }    newOffset=i;  }  if (newOffset == offset || newOffset == caretModel.getOffset() || !ignoreTrailingWhitespace) {    caretModel.moveToVisualPosition(visualEndOfLineWithCaret);  } else {    if (editor instanceof EditorImpl && ((EditorImpl)editor).myUseNewRendering) {      caretModel.moveToLogicalPosition(editor.offsetToLogicalPosition(newOffset).leanForward(true));    } else {      caretModel.moveToOffset(newOffset);    }  }  EditorModificationUtil.scrollToCaret(editor);  setupSelection(editor,isWithSelection,selectionStart,blockSelectionStart);}  }
class C{  public static void deleteFiles(String directoryName){  File dir=new File(directoryName);  File[] files=dir.listFiles();  for (int i=0; i < files.length; i++) {    files[i].delete();  }}  }
class C{  public Geo antipode(Geo ret){  return this.scale(-1.0,ret);}  }
class C{  public TerminalSeq(Collection<Terminal> terminals){  this.terminals=new LinkedList<Terminal>(terminals);}  }
class C{  public void init(final CustomTargetTagFilterButtonClick filterButtonClickBehaviour){  this.customTargetTagFilterButtonClick=filterButtonClickBehaviour;  createTable();  eventBus.subscribe(this);}  }
class C{  public static double pdf(double val,double loc,double scale){  val=Math.abs((val - loc) / scale);  double e=Math.exp(-val);  double f=1.0 + e;  return e / (scale * f * f);}  }
class C{  public void validationError(int line,int charPositionInLine,String msg){  parseIssues.add(new ParseIssue(line,charPositionInLine,msg,currentFileName,ParseIssueType.VALIDATION_ERROR));  try {    setAtLeastOneError(true);    if (currentFileName == null) {      log.error("line " + line + ":"+ charPositionInLine+ " "+ msg);    } else {      String fileName=currentFileName;      log.error(fileName + " line " + line+ ":"+ charPositionInLine+ " "+ msg);    }  } catch (  Exception e1) {    log.error("ERROR: while customizing error message:" + e1);  }}  }
class C{  public synchronized String nextToken(){  StringBuilder tokenBuf=new StringBuilder();  boolean backslashEscape=false;  if (this.emittingEscapeCode) {    tokenBuf.append("{");    this.emittingEscapeCode=false;  }  for (; this.pos < this.sourceLength; this.pos++) {    char c=this.source.charAt(this.pos);    if (c == CHR_ESCAPE) {      tokenBuf.append(c);      backslashEscape=!backslashEscape;      continue;    }    if ((c == CHR_SGL_QUOTE || c == CHR_DBL_QUOTE) && !backslashEscape) {      tokenBuf.append(c);      if (this.inQuotes) {        if (c == this.quoteChar) {          if ((this.pos + 1 < this.sourceLength) && (this.source.charAt(this.pos + 1) == this.quoteChar)) {            tokenBuf.append(c);            this.pos++;          } else {            this.inQuotes=false;          }        }      } else {        this.inQuotes=true;        this.quoteChar=c;      }      continue;    }    if ((c == CHR_LF) || (c == CHR_CR)) {      tokenBuf.append(c);      backslashEscape=false;      continue;    }    if (!this.inQuotes && !backslashEscape) {      if (c == CHR_COMMENT) {        tokenBuf.append(c);        if ((this.pos + 1 < this.sourceLength) && (this.source.charAt(this.pos + 1) == CHR_COMMENT)) {          while (++this.pos < this.sourceLength && c != CHR_LF && c != CHR_CR) {            c=this.source.charAt(this.pos);            tokenBuf.append(c);          }          this.pos--;        }        continue;      }      if (c == CHR_BEGIN_TOKEN) {        this.bracesLevel++;        if (this.bracesLevel == 1) {          this.emittingEscapeCode=true;          this.pos++;          return tokenBuf.toString();        }        tokenBuf.append(c);        continue;      }      if (c == CHR_END_TOKEN) {        tokenBuf.append(c);        this.bracesLevel--;        if (this.bracesLevel == 0) {          this.pos++;          return tokenBuf.toString();        }        continue;      }      if (c == CHR_VARIABLE) {        this.sawVariableUse=true;      }    }    tokenBuf.append(c);    backslashEscape=false;  }  return tokenBuf.toString();}  }
class C{  public void notifyServiceDestroy(){  if (timer != null)   timer.cancel();  timer=null;  notifyHardwareStateChanged();  serviceWeakReference=null;}  }
class C{  public static Object readStaticField(final Field field,final boolean forceAccess) throws IllegalAccessException {  if (field == null) {    throw new IllegalArgumentException("The field must not be null");  }  if (!Modifier.isStatic(field.getModifiers())) {    throw new IllegalArgumentException("The field '" + field.getName() + "' is not static");  }  return FieldUtils.readField(field,(Object)null,forceAccess);}  }
class C{  public void writeTo(Path path) throws IOException {  Files.write(path,getBytes());}  }
class C{  public void visitEnum(String name,String desc,String value){  if (av != null) {    av.visitEnum(name,desc,value);  }}  }
class C{  @Override public void onClick(View v){  dispatchUpdate();}  }
class C{  public void restoreComponentsValue(){  targetBulkTokenTags.populateContainer();  final TargetBulkUpload targetBulkUpload=managementUIState.getTargetTableFilters().getBulkUpload();  progressBar.setValue(targetBulkUpload.getProgressBarCurrentValue());  dsNamecomboBox.setValue(targetBulkUpload.getDsNameAndVersion());  descTextArea.setValue(targetBulkUpload.getDescription());  targetBulkTokenTags.addAlreadySelectedTags();  if (targetBulkUpload.getSucessfulUploadCount() > 0 || targetBulkUpload.getFailedUploadCount() > 0) {    targetsCountLabel.setVisible(true);    targetsCountLabel.setCaption(getFormattedCountLabelValue(targetBulkUpload.getSucessfulUploadCount(),targetBulkUpload.getFailedUploadCount()));  }  if (targetBulkUpload.getProgressBarCurrentValue() < 1) {    bulkUploader.getUpload().setEnabled(false);  }}  }
class C{  public XMLWriter(OutputStream stream){  this.writer=new PrintWriter(stream);}  }
class C{  public void buildClassifier(Instances D) throws Exception {  testCapabilities(D);  int L=D.classIndex();  int featlength=(D.numAttributes() - L) * 2;  int numSamples=D.numInstances();  int classlength=L * 2;  System.out.println("Using rho=" + roa);  if (numFeatures == -1) {    initARAM(featlength,classlength,roa,threshold);  } else {    if (featlength != numFeatures) {      return;    }    if (classlength != numClasses) {      return;    }  }  Enumeration enumInsts=D.enumerateInstances();  while (enumInsts.hasMoreElements()) {    Instance instance=(Instance)enumInsts.nextElement();    updateClassifier(instance);  }  System.out.println("Training done, used " + numCategories + " neurons.");}  }
class C{  public void error(SourceLocator srcLctr,Node styleNode,Node sourceNode,String msg,Object args[]) throws TransformerException {  String formattedMsg=XSLMessages.createMessage(msg,args);  ErrorListener errHandler=m_transformer.getErrorListener();  if (null != errHandler)   errHandler.fatalError(new TransformerException(formattedMsg,srcLctr)); else   throw new TransformerException(formattedMsg,srcLctr);}  }
class C{  private Row<String,CompositeColumnName> queryRowWithAllColumns(Keyspace ks,URI id,ColumnFamily<String,CompositeColumnName> cf){  Rows<String,CompositeColumnName> result=queryRowsWithAllColumns(ks,Arrays.asList(id),cf);  Row<String,CompositeColumnName> row=result.iterator().next();  if (row.getColumns().size() == 0) {    return null;  }  return row;}  }
class C{  public boolean isGenClass(String clz){  return genClasses.contains(clz);}  }
class C{  public void updateProrroga(ProrrogaVO prorrogaVO){  final String qual=new StringBuffer().append(DBUtils.WHERE).append(DBUtils.generateEQTokenField(CAMPO_ID,prorrogaVO.getId())).toString();  updateVO(qual,TABLE_NAME,COLUMN_DEFINITIONS,prorrogaVO);}  }
class C{  public static LatLon fromDegrees(double latitude,double longitude){  return new LatLon(latitude,longitude);}  }
class C{  @SuppressWarnings("unused") public static final boolean validateGroupPassword(String sGroupPassword){  if (sGroupPassword.length() == 0) {    return false;  }  return (limitPasswordToNumericCharacters && sGroupPassword.matches("^[0-9][0-9][0-9][0-9]$")) || sGroupPassword.matches("^[0-9A-C][0-9A-C][0-9A-C][0-9A-C]$");}  }
class C{  static int convertUnitsOrPercentage(String units){  return convertUnitsOrPercentage(units,LENGTH_SUFFIX_PX);}  }
class C{  public static Channel toChannel(Cursor cursor){  if (cursor == null || cursor.isClosed()) {    throw new IllegalArgumentException("Cannot process null or closed cursor");  }  Channel channel=new Channel();  channel.setId(cursor.getInt(cursor.getColumnIndex(PremoContract.ChannelEntry._ID)));  channel.setGeneratedId(cursor.getString(cursor.getColumnIndex(PremoContract.ChannelEntry.GENERATED_ID)));  channel.setTitle(cursor.getString(cursor.getColumnIndex(PremoContract.ChannelEntry.TITLE)));  channel.setAuthor(cursor.getString(cursor.getColumnIndex(PremoContract.ChannelEntry.AUTHOR)));  channel.setDescription(cursor.getString(cursor.getColumnIndex(PremoContract.ChannelEntry.DESCRIPTION)));  channel.setSiteUrl(cursor.getString(cursor.getColumnIndex(PremoContract.ChannelEntry.SITE_URL)));  channel.setFeedUrl(cursor.getString(cursor.getColumnIndex(PremoContract.ChannelEntry.FEED_URL)));  channel.setArtworkUrl(cursor.getString(cursor.getColumnIndex(PremoContract.ChannelEntry.ARTWORK_URL)));  channel.setSubscribed(cursor.getInt(cursor.getColumnIndex(PremoContract.ChannelEntry.IS_SUBSCRIBED)) == 1);  channel.setETag(cursor.getString(cursor.getColumnIndex(PremoContract.ChannelEntry.ETAG)));  channel.setLastModified(cursor.getLong(cursor.getColumnIndex(PremoContract.ChannelEntry.LAST_MODIFIED)));  channel.setDataMd5(cursor.getString(cursor.getColumnIndex(PremoContract.ChannelEntry.MD5)));  channel.setLastSyncTime(cursor.getLong(cursor.getColumnIndex(PremoContract.ChannelEntry.LAST_SYNC_TIME)));  channel.setLastSyncSuccessful(cursor.getInt(cursor.getColumnIndex(PremoContract.ChannelEntry.LAST_SYNC_SUCCESSFUL)) == 1);  return channel;}  }
class C{  protected EntryImpl(){  super();}  }
class C{  public int toInt(Element el,String attributeName,int defaultValue){  String value=el.getAttribute(attributeName);  if (value == null)   return defaultValue;  int intValue=Caster.toIntValue(value,Integer.MIN_VALUE);  if (intValue == Integer.MIN_VALUE)   return defaultValue;  return intValue;}  }
class C{  public String toString(){  return name;}  }
class C{  public static void writeToFile(Bitmap bitmap,String dir,String filename) throws FileNotFoundException, IOException {  File sdCard=Environment.getExternalStorageDirectory();  File dirFile=new File(sdCard.getAbsolutePath() + "/" + dir);  dirFile.mkdirs();  File f=new File(dirFile,filename);  FileOutputStream fos=new FileOutputStream(f,false);  bitmap.compress(CompressFormat.PNG,100,fos);  fos.flush();  fos.close();}  }
class C{  protected static void postProcessDrought(IHex[] hexSet,int modifier){  int n;  IHex field;  int level, newlevel;  int severity=1 + Compute.randomInt(3) + modifier;  if (severity < 0) {    return;  }  ITerrainFactory f=Terrains.getTerrainFactory();  for (n=0; n < hexSet.length; n++) {    field=hexSet[n];    if (field.containsTerrain(Terrains.SWAMP)) {      field.removeTerrain(Terrains.SWAMP);      if ((field.terrainsPresent() == 0) && (Compute.randomInt(100) < 30)) {        field.addTerrain(f.createTerrain(Terrains.ROUGH,1));      }    }    level=field.terrainLevel(Terrains.WATER);    if (level != ITerrain.LEVEL_NONE) {      newlevel=level - severity;      field.removeTerrain(Terrains.WATER);      if (newlevel == 0) {        field.addTerrain(f.createTerrain(Terrains.SWAMP,1));      } else       if (newlevel < 0) {        field.addTerrain(f.createTerrain(Terrains.ROUGH,1));      } else {        field.addTerrain(f.createTerrain(Terrains.WATER,newlevel));      }      if (level > severity) {        newlevel=severity;      } else {        newlevel=level;      }      field.setLevel(field.getLevel() - newlevel);    }  }}  }
class C{  public Map<String,Object> processOutputs(Map<String,Object> outputs,Draft2PortProcessorCallback portProcessor) throws Draft2PortProcessorException {  return processValues(outputs,job.getApp().getOutputs(),Draft2OutputPort.class,portProcessor);}  }
class C{  protected ProphetV2Router(ProphetV2Router r){  super(r);  this.secondsInTimeUnit=r.secondsInTimeUnit;  this.beta=r.beta;  initPreds();  initEncTimes();}  }
class C{  public static boolean cs_ltsolve(Dcs L,double[] x){  int p, j, n, Lp[], Li[];  double Lx[];  if (!Dcs_util.CS_CSC(L) || x == null)   return (false);  n=L.n;  Lp=L.p;  Li=L.i;  Lx=L.x;  for (j=n - 1; j >= 0; j--) {    for (p=Lp[j] + 1; p < Lp[j + 1]; p++) {      x[j]-=Lx[p] * x[Li[p]];    }    x[j]/=Lx[Lp[j]];  }  return (true);}  }
class C{  boolean isDefined(String name){  return table.containsKey(name);}  }
class C{  public final DD selfSubtract(double y){  if (isNaN())   return this;  return selfAdd(-y,0.0);}  }
class C{  public static ComponentUI createUI(JComponent list){  return new BasicListUI();}  }
class C{  @DSSink({DSSinkKind.FILE}) @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.192 -0400",hash_original_method="8414B6D4CB25174C916084B1680ECA65",hash_generated_method="EABA24B5B5D9B7240352ACF9EA79CD2A") public static void writeLines(File file,Collection<?> lines,boolean append) throws IOException {  writeLines(file,null,lines,null,append);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeattributenodeattribute.class,args);}  }
class C{  public JsonElement parse(String json) throws JsonSyntaxException {  return parse(new StringReader(json));}  }
class C{  FunctionBlock(final Function function){  m_function=Preconditions.checkNotNull(function,"Error: Function argument can not be null");}  }
class C{  private void goToNextFragment(int currentPosition){  if (currentPosition + 1 >= onboardingFragmentPagerAdapter.getCount()) {    finish();    return;  }  viewPager.setCurrentItem(currentPosition + 1);}  }
class C{  public static void onEventDuration(final Context context,final String event_id,final long duration){  onEventDuration(context,event_id,null,duration);}  }
class C{  public void testGetXmlConfigString() throws Exception {  System.out.println("getXmlConfigString");  try {    final File file=File.createTempFile("testconf",".xml");    final ScanDirConfig instance=new ScanDirConfig(file.getAbsolutePath());    final ScanManagerConfig bean=new ScanManagerConfig("testGetXmlConfigString");    final DirectoryScannerConfig dir=new DirectoryScannerConfig("tmp");    dir.setRootDirectory(file.getParent());    bean.putScan(dir);    instance.setConfiguration(bean);    System.out.println("Expected: " + XmlConfigUtils.toString(bean));    System.out.println("Received: " + instance.getConfiguration().toString());    assertEquals(XmlConfigUtils.toString(bean),instance.getConfiguration().toString());  } catch (  Exception x) {    x.printStackTrace();    throw x;  }}  }
class C{  public boolean isArray(){  return _rawClass.isArray();}  }
class C{  public static byte[] toByteArray(final BigInteger b){  if (b.compareTo(BigInteger.ONE.shiftLeft(256)) >= 0) {    throw new RuntimeException("only numbers < 2^256 are allowed");  }  final byte[] bytes=new byte[32];  final byte[] original=b.toByteArray();  final int offset=original.length > 32 ? original.length - 32 : 0;  for (int i=0; i < original.length - offset; i++) {    bytes[original.length - i - offset- 1]=original[i + offset];  }  return bytes;}  }
class C{  private boolean checkForClassHistogram(DefaultMutableTreeNode threadDump) throws IOException {  HistogramTableModel classHistogram=parseNextClassHistogram(getBis());  if (classHistogram.getRowCount() > 0) {    addHistogramToDump(threadDump,classHistogram);  }  return (classHistogram.getRowCount() > 0);}  }
class C{  private boolean requiresUserAuthentication(String userName,String password){  return userName != null && userName.length() > 0 && password != null;}  }
class C{  public boolean hasLabel(){  return super.hasAttribute(LABEL);}  }
class C{  public final void pushNamespaceContext(PrefixResolver pr){  m_prefixResolvers.push(pr);}  }
class C{  private LicenseFeature createLicenseFeatureFromLicenseInfoExt(LicenseInfoExt licenseInfo){  if (licenseInfo == null) {    return null;  }  LicenseFeature licenseFeature=new LicenseFeature();  licenseFeature.setDateExpires(licenseInfo.getExpirationDate());  licenseFeature.setExpired(isExpired(licenseFeature.getDateExpires()));  licenseFeature.setStorageCapacity(licenseInfo.getStorageCapacity());  licenseFeature.setProductId(licenseInfo.getProductId());  licenseFeature.setSerial(licenseInfo.getProductId());  licenseFeature.setModelId(licenseInfo.getModelId());  licenseFeature.setDateIssued(licenseInfo.getIssuedDate());  licenseFeature.setLicenseIdIndicator(licenseInfo.getLicenseTypeIndicator());  licenseFeature.setVersion(licenseInfo.getVersion());  licenseFeature.setNotice(licenseInfo.getNotice());  licenseFeature.setTrialLicense(licenseInfo.isTrialLicense());  licenseFeature.setLicensed(true);  return licenseFeature;}  }
class C{  private void initActionBarDrawerToggle(){  mActionBarDrawerToggle=new ActionBarDrawerToggle((Activity)getContext(),mDelegate.getDrawerLayout(),this,R.string.accessibility_enhanced_bookmark_drawer_toggle_btn_open,R.string.accessibility_enhanced_bookmark_drawer_toggle_btn_close);  mDelegate.getDrawerLayout().setDrawerListener(mActionBarDrawerToggle);  mActionBarDrawerToggle.syncState();}  }
class C{  public void addFatalError(String msg,RefactoringStatusContext context){  fEntries.add(new RefactoringStatusEntry(RefactoringStatus.FATAL,msg,context));  fSeverity=Math.max(fSeverity,FATAL);}  }
class C{  public String signToken(String input) throws KeyczarException {  return signingKey.sign(input);}  }
class C{  protected void sequence_S_Global(ISerializationContext context,S_Global semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void addFetchFilter(FetchFilter filter){  controller.addFetchFilter(filter);}  }
class C{  public void resumeAll(){synchronized (lock) {    pausedJobGroups.clear();    resumeTriggers(GroupMatcher.anyTriggerGroup());  }}  }
class C{  public void add(AnnotatedMethod am){  if (_methods == null) {    _methods=new LinkedHashMap<MemberKey,AnnotatedMethod>();  }  _methods.put(new MemberKey(am.getAnnotated()),am);}  }
class C{  public static byte[] decodeWebSafe(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decodeWebSafe(bytes,0,bytes.length);}  }
class C{  public static boolean isMainBuildingImpl(final String id){  return UNIT_NEXUS.equals(id) || UNIT_HATCHERY.equals(id) || UNIT_COMMAND_CENTER.equals(id);}  }
class C{  public static void doGet(URL url){  try {    if (mockMode)     return;    HttpURLConnection urlc=(HttpURLConnection)url.openConnection();    basicAuth(urlc);    urlc.connect();    checkResponseCode(urlc);  } catch (  IOException e) {    warn("An error occurred getting data from " + url + ". Please check that Solr is running.");  }catch (  Exception e) {    warn("An error occurred getting data from " + url + ". Message: "+ e.getMessage());  }}  }
class C{  public static void textLeft(double x,double y,String s){  offscreen.setFont(font);  FontMetrics metrics=offscreen.getFontMetrics();  double xs=scaleX(x);  double ys=scaleY(y);  int hs=metrics.getDescent();  offscreen.drawString(s,(float)(xs),(float)(ys + hs));  draw();}  }
class C{  public XmlFriendlyNameCoder(final String dollarReplacement,final String escapeCharReplacement){  this(dollarReplacement,escapeCharReplacement,"_.");}  }
class C{  private void errms(StreamTokenizer tokenizer,String theMsg) throws IOException {  throw new IOException(theMsg + ", read " + tokenizer.toString());}  }
class C{  public TObjectLongHashMap(int initialCapacity,TObjectHashingStrategy<K> strategy){  super(initialCapacity,strategy);}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void done() throws IOException {}  }
class C{  public void doPrintSetup(){}  }
class C{  @DSComment("OpenGL Math") @DSSafe(DSCat.GRAPHICS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:10.007 -0500",hash_original_method="9787BFCD9D5823D1A5657457A23F3565",hash_generated_method="12A7B14EF93BB6FE3B723AEAAD02B355") public static void orthoM(float[] m,int mOffset,float left,float right,float bottom,float top,float near,float far){  if (left == right) {    throw new IllegalArgumentException("left == right");  }  if (bottom == top) {    throw new IllegalArgumentException("bottom == top");  }  if (near == far) {    throw new IllegalArgumentException("near == far");  }  final float r_width=1.0f / (right - left);  final float r_height=1.0f / (top - bottom);  final float r_depth=1.0f / (far - near);  final float x=2.0f * (r_width);  final float y=2.0f * (r_height);  final float z=-2.0f * (r_depth);  final float tx=-(right + left) * r_width;  final float ty=-(top + bottom) * r_height;  final float tz=-(far + near) * r_depth;  m[mOffset + 0]=x;  m[mOffset + 5]=y;  m[mOffset + 10]=z;  m[mOffset + 12]=tx;  m[mOffset + 13]=ty;  m[mOffset + 14]=tz;  m[mOffset + 15]=1.0f;  m[mOffset + 1]=0.0f;  m[mOffset + 2]=0.0f;  m[mOffset + 3]=0.0f;  m[mOffset + 4]=0.0f;  m[mOffset + 6]=0.0f;  m[mOffset + 7]=0.0f;  m[mOffset + 8]=0.0f;  m[mOffset + 9]=0.0f;  m[mOffset + 11]=0.0f;}  }
class C{  public static AndroidHttpClient newInstance(String userAgent){  return newInstance(userAgent,null);}  }
class C{  public Server(){  conversations.put(ServerInfo.DEFAULT_NAME,new ServerInfo());  this.selected=ServerInfo.DEFAULT_NAME;}  }
class C{  void registerSpring(Spring spring){  if (spring == null) {    throw new IllegalArgumentException("spring is required");  }  if (mSpringRegistry.containsKey(spring.getId())) {    throw new IllegalArgumentException("spring is already registered");  }  mSpringRegistry.put(spring.getId(),spring);}  }
class C{  public static boolean noEnemyUnitsOnPathMiddleSteps(final Route route,final PlayerID player,final GameData data){  final CompositeMatch<Unit> alliedOrNonCombat=new CompositeMatchOr<>(Matches.UnitIsInfrastructure,Matches.enemyUnit(player,data).invert(),Matches.unitIsSubmerged(data));  for (  final Territory current : route.getMiddleSteps()) {    if (!current.getUnits().allMatch(alliedOrNonCombat)) {      return false;    }  }  return true;}  }
class C{  public void fireProjectorDataChanged(){  for (  ProjectorListener listener : listeners) {    listener.projectorDataChanged();  }}  }
class C{  @Override public void startObserving(String shardId,String observedShardId,long timeoutMs) throws ShardManagerException, InterruptedException {  boolean success=false;  trace("[{}-{}] Try to follow shardId={} as slave...",gondola.getHostId(),gondola.getShard(shardId).getLocalMember().getMemberId(),observedShardId);  List<Config.ConfigMember> membersInShard=config.getMembersInShard(observedShardId);  for (  Config.ConfigMember m : membersInShard) {    if (success=setSlave(shardId,m.getMemberId(),timeoutMs / membersInShard.size())) {      filter.getChangeLogProcessor().reset(shardId);      trace("[{}-{}] Successfully to follow masterId={}",gondola.getHostId(),gondola.getShard(shardId).getLocalMember().getMemberId(),m.getMemberId());      break;    }  }  if (!success) {    logger.error("[{}-{}] Failed follow master={}",gondola.getHostId(),gondola.getShard(shardId).getLocalMember().getMemberId(),observedShardId);    throw new ShardManagerException(FAILED_START_SLAVE);  }  observedShards.add(observedShardId);}  }
class C{  private boolean distImpr(double newDistance){  return newDistance < checkpointedDistance;}  }
class C{  public static boolean isJDKJar(File f){  String file=f.getAbsolutePath();  String jdk=new File(Environment.getJava_home()).getParentFile().getAbsolutePath();  return file.startsWith(jdk);}  }
class C{  private ActionForward verNoDisponiblesAutorizadas(){  ActionForward ret=new ActionForward();  ret.setPath(PATH_ACTION_LISTADO_PRESTAMOS_NO_DISPONIBLES_AUTORIZADAS);  ret.setRedirect(false);  return ret;}  }
class C{  public boolean isIdle(){  return spdyConnection == null || spdyConnection.isIdle();}  }
class C{  @Override public Object clone(){  try {    MathVector v=(MathVector)super.clone();    v.data=new double[NDIM];    for (int i=0; i < NDIM; i++) {      v.data[i]=data[i];    }    return v;  } catch (  CloneNotSupportedException e) {    throw new Error();  }}  }
class C{  void findAnnotationsPresent(){  ComputeAnnotationSet annotationComputer=new ComputeAnnotationSet(elementUtils);  annotationsPresent=new LinkedHashSet<TypeElement>();  for (  ClassSymbol classSym : topLevelClasses)   annotationComputer.scan(classSym,annotationsPresent);  for (  PackageSymbol pkgSym : packageInfoFiles)   annotationComputer.scan(pkgSym,annotationsPresent);}  }
class C{  protected void process(StepSingle stepSingle){  checkDumpStep();  steps[pos++]=stepSingle;  if (pos >= steps.length) {    Step[] o=steps;    steps=new Step[conf.profile_step_max_count];    pos=0;    DataProxy.sendProfile(o,context);  }}  }
class C{  public void addUpdateListener(PreferenceUpdateListener listener){  updateListeners.add(listener);}  }
class C{  public static double distance(Geometry g0,Geometry g1){  DistanceOp distOp=new DistanceOp(g0,g1);  return distOp.distance();}  }
class C{  public String nextToken() throws NoSuchElementException {  if (pos < len && delim.indexOf(str.charAt(pos)) >= 0) {    if (retDelims)     return str.substring(pos,++pos);    while (++pos < len && delim.indexOf(str.charAt(pos)) >= 0)     ;  }  if (pos < len) {    int start=pos;    while (++pos < len && delim.indexOf(str.charAt(pos)) < 0)     ;    return str.substring(start,pos);  }  throw new NoSuchElementException();}  }
class C{  public AdjustableGZIPOutputStream(OutputStream out,int gzipSize,int level) throws IOException {  super(out,gzipSize);  assert -1 <= level && level <= 9;  def=new Deflater(level,true);}  }
class C{  public Action(String content,int priority){  this.content=content.trim();  this.priority=priority;}  }
class C{  public final void testHashCode05(){  assertTrue(new ECFieldF2m(2000,new int[]{981,2,1}).hashCode() == new ECFieldF2m(2000,BigInteger.valueOf(0L).setBit(0).setBit(1).setBit(2).setBit(981).setBit(2000)).hashCode());}  }
class C{  protected void rehash(){  Entry[] oldTable=table;  table=new Entry[oldTable.length * 2 + 1];  for (int i=oldTable.length - 1; i >= 0; i--) {    for (Entry old=oldTable[i]; old != null; ) {      Entry e=old;      old=old.next;      int index=e.hash % table.length;      e.next=table[index];      table[index]=e;    }  }}  }
class C{  public void registerFocusHotkey(final JComponent rootComponent){  registerFocusHotkey(rootComponent,KeyStroke.getKeyStroke(KeyEvent.VK_S,InputEvent.CTRL_MASK));}  }
class C{  private void enableNew(){  boolean sel=chkCreateNew.isChecked();  lstWarehouse.setVisible(sel);  txtWarehouse.setVisible(!sel);  txtWarehouse.setReadonly(true);  txtAisleX.setReadonly(!sel);  txtBinY.setReadonly(!sel);  txtLevelZ.setReadonly(!sel);  txtKey.setReadonly(!sel);}  }
class C{  public void editingCanceled(ChangeEvent e){  getHandler().editingCanceled(e);}  }
class C{  public static String printLine(String[] values,CSVStrategy strategy){  StringWriter stringWriter=new StringWriter();  CSVPrinter csvPrinter=new CSVPrinter(stringWriter,strategy);  for (int i=0; i < values.length; i++) {    if (values[i] == null) {      values[i]="null";    } else     if (values[i].equals("null")) {      values[i]="\"null\"";    }  }  try {    csvPrinter.println(values);  } catch (  IOException e) {  }  return stringWriter.toString().trim();}  }
class C{  public static void close(Reader reader){  try {    if (reader != null) {      reader.close();    }  } catch (  IOException ioE) {  }}  }
class C{  @Transactional public void resetUnverifiedUsers(){  final Date now=new Date();  final long yesterdayTime=DateUtils.addDays(now,-1).getTime();  final List<Filter> filters=new ArrayList<Filter>();  filters.add(new PropertyFilter(UserExt.USER_STATUS,FilterOperator.EQUAL,UserExt.USER_STATUS_C_NOT_VERIFIED));  filters.add(new PropertyFilter(Keys.OBJECT_ID,FilterOperator.LESS_THAN_OR_EQUAL,yesterdayTime));  filters.add(new PropertyFilter(User.USER_NAME,FilterOperator.NOT_EQUAL,UserExt.NULL_USER_NAME));  final Query query=new Query().setFilter(new CompositeFilter(CompositeFilterOperator.AND,filters));  try {    final JSONObject result=userRepository.get(query);    final JSONArray users=result.optJSONArray(Keys.RESULTS);    for (int i=0; i < users.length(); i++) {      final JSONObject user=users.optJSONObject(i);      final String id=user.optString(Keys.OBJECT_ID);      user.put(User.USER_NAME,UserExt.NULL_USER_NAME);      userRepository.update(id,user);      LOGGER.log(Level.INFO,"Reset unverified user [email=" + user.optString(User.USER_EMAIL));    }  } catch (  final RepositoryException e) {    LOGGER.log(Level.ERROR,"Reset unverified users failed",e);  }}  }
class C{  private void handleKeyDown(final Event event){  boolean needRedraw=false;  if (lastSelected == SELECTED_KNOB.NONE) {    lastSelected=SELECTED_KNOB.LOWER;  }switch (event.keyCode) {case SWT.HOME:    if (lastSelected == SELECTED_KNOB.UPPER) {      upperValue=minimum;    } else {      lowerValue=minimum;    }  needRedraw=true;break;case SWT.END:if (lastSelected == SELECTED_KNOB.UPPER) {upperValue=maximum;} else {lowerValue=maximum;}needRedraw=true;break;case SWT.PAGE_UP:if (lastSelected == SELECTED_KNOB.UPPER) {upperValue+=pageIncrement;} else {lowerValue+=pageIncrement;}needRedraw=true;break;case SWT.PAGE_DOWN:if (lastSelected == SELECTED_KNOB.UPPER) {upperValue-=pageIncrement;} else {lowerValue-=pageIncrement;}needRedraw=true;break;case SWT.ARROW_LEFT:case SWT.ARROW_UP:if (lastSelected == SELECTED_KNOB.UPPER) {upperValue-=increment;} else {lowerValue-=increment;}needRedraw=true;break;case SWT.ARROW_RIGHT:case SWT.ARROW_DOWN:if (lastSelected == SELECTED_KNOB.UPPER) {upperValue+=increment;} else {lowerValue+=increment;}needRedraw=true;break;}if (needRedraw) {if (lastSelected == SELECTED_KNOB.UPPER) {checkUpperValue();} else {checkLowerValue();}redraw();}}  }
class C{  public void deleteAll(String idLibro,String idRegistro){  List<InteresadoVO> interesados=((InteresadoDao)getDao()).getInteresados(idLibro,idRegistro);  deleteAll(interesados);}  }
class C{  public PictureDrawable createPictureDrawable(){  return new PictureDrawable(picture);}  }
class C{  public final void writeDouble(double v) throws IOException {  writeLong(Double.doubleToLongBits(v));}  }
class C{  static public double incompleteGamma(double a,double x) throws ArithmeticException {  double ans, ax, c, r;  if (x <= 0 || a <= 0)   return 0.0;  if (x > 1.0 && x > a)   return 1.0 - incompleteGammaComplement(a,x);  ax=a * Math.log(x) - x - logGamma(a);  if (ax < -MAXLOG)   return (0.0);  ax=Math.exp(ax);  r=a;  c=1.0;  ans=1.0;  do {    r+=1.0;    c*=x / r;    ans+=c;  } while (c / ans > MACHEP);  return (ans * ax / a);}  }
class C{  @DSSink({DSSinkKind.NETWORK}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:18.868 -0500",hash_original_method="126A86B00CA0552F526F15B68A83F2ED",hash_generated_method="7B3AB6A860409BD4AD0AC35129DC39E7") public void put(int key,String value){  mCapabilities.put(key,value);}  }
class C{  protected long allocate(int cap){  return GridUnsafe.allocateMemory(cap);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case ExpressionsPackage.BITWISE_OR_EXPRESSION__LEFT_OPERAND:    setLeftOperand((Expression)null);  return;case ExpressionsPackage.BITWISE_OR_EXPRESSION__RIGHT_OPERAND:setRightOperand((Expression)null);return;}super.eUnset(featureID);}  }
class C{  public RestoreSnapshotRequest indexSettings(Settings settings){  this.indexSettings=settings;  return this;}  }
class C{  private boolean isFull(){  return top >= STACK_SIZE - 1;}  }
class C{  public static boolean exists(IndexSearcher searcher,Query query,EarlyTerminatingCollector collector) throws IOException {  collector.reset();  countWithEarlyTermination(searcher,query,collector);  return collector.exists();}  }
class C{  private AccessTokenService createTokenService(){  return mLoginAdapter.create(AccessTokenService.class);}  }
class C{  public SVGPath relativeEllipticalArc(double rx,double ry,double ar,double la,double sp,double x,double y){  append(PATH_ARC_RELATIVE,rx,ry,ar,la,sp,x,y);  return this;}  }
class C{  public static void showOpenSheet(URIChooser chooser,Component parent,SheetListener listener){  chooser.setDialogType(JFileChooser.OPEN_DIALOG);  showSheet(chooser,parent,null,listener);}  }
class C{  private void checkVars(){  if (startTime == -1 || endTime == -1) {    fixedStartTime=0;    fixedEndTime=0;    updateVars();  }}  }
class C{  public List<ChangeControl> find(String id,CurrentUser user) throws OrmException {  InternalChangeQuery query=queryProvider.get().noFields();  if (!id.isEmpty() && id.charAt(0) != '0') {    Integer n=Ints.tryParse(id);    if (n != null) {      return asChangeControls(query.byLegacyChangeId(new Change.Id(n)),user);    }  }  if (!id.contains("~")) {    return asChangeControls(query.byKeyPrefix(id),user);  }  Optional<ChangeTriplet> triplet=ChangeTriplet.parse(id);  if (triplet.isPresent()) {    return asChangeControls(query.byBranchKey(triplet.get().branch(),triplet.get().id()),user);  }  return Collections.emptyList();}  }
class C{  protected static void succeed(){  System.exit(0);}  }
class C{  protected void sequence_TStructMemberList_ThisTypeRefStructural_TypeRef_TypeRefWithoutModifiers(ISerializationContext context,ThisTypeRefStructural semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static boolean compare(final Integer me,final Integer you){  if (me == you) {    return true;  }  if (me == null) {    return false;  }  return me.equals(you);}  }
class C{  protected boolean isRecompilationNeeded(int[] loadedChecksums){  this.checksums[0]=calculateChecksum();  if (this.checksums[0] != loadedChecksums[0]) {    if (Trace.swcChecksum) {      Trace.trace("isRecompilationNeeded: calculated checksum differs from last checksum, recompile");    }    return true;  }  if (!isSwcChecksumEnabled) {    if (Trace.swcChecksum) {      Trace.trace("isRecompilationNeeded: checksums equal, swc-checksum disabled, incremental compile");    }    return false;  }  Map<QName,Long> signatureChecksums=swcDefSignatureChecksums;  if (signatureChecksums == null) {    if (Trace.swcChecksum) {      Trace.trace("isRecompilationNeeded: checksums equal, signatureChecksums is null, incremental compile");    }  } else {    for (    Map.Entry<QName,Long> entry : signatureChecksums.entrySet()) {      QName qName=(QName)entry.getKey();      Long dataSignatureChecksum=(Long)entry.getValue();      Long swcSignatureChecksum=swcContext.getChecksum(qName);      if (swcSignatureChecksum == null && qName != null) {        Source source=swcContext.getSource(qName.getNamespace(),qName.getLocalPart());        if (source != null) {          swcSignatureChecksum=new Long(source.getLastModified());        }      }      if (Trace.swcChecksum) {        if (dataSignatureChecksum == null) {          throw new IllegalStateException("dataSignatureChecksum should never be null");        }      }      if (dataSignatureChecksum != null && swcSignatureChecksum == null) {        if (Trace.swcChecksum) {          Trace.trace("isRecompilationNeeded: signature checksums not equal, recompile");          Trace.trace("compare " + entry.getKey());          Trace.trace("data =  " + dataSignatureChecksum);          Trace.trace("swc  =  " + swcSignatureChecksum);        }        return true;      }      if (dataSignatureChecksum != null) {        if (dataSignatureChecksum.longValue() != swcSignatureChecksum.longValue()) {          if (Trace.swcChecksum) {            Trace.trace("isRecompilationNeeded: signature checksums not equal, recompile");            Trace.trace("compare " + entry.getKey());            Trace.trace("data =  " + dataSignatureChecksum);            Trace.trace("swc  =  " + swcSignatureChecksum);          }          return true;        }      } else {        return true;      }    }  }  boolean result=!areSwcFileChecksumsEqual();  if (Trace.swcChecksum) {    Trace.trace("isRecompilationNeeded: " + (result ? "recompile" : "incremental compile"));  }  return result;}  }
class C{  protected void joinLegs(Box leg1,Box leg2){  LatLon[] locations1=leg1.getLocations();  LatLon[] locations2=leg2.getLocations();  Angle[] azimuths1=leg1.getCornerAzimuths();  Angle[] azimuths2=leg2.getCornerAzimuths();  Angle azimuth1=LatLon.greatCircleAzimuth(locations1[1],locations1[0]);  Angle azimuth2=LatLon.greatCircleAzimuth(locations2[0],locations2[1]);  Angle angularDistance=azimuth1.angularDistanceTo(azimuth2);  Angle signedDistance=azimuth2.subtract(azimuth1).normalize();  Angle shortAngle=Angle.mix(0.5,azimuth1,azimuth2);  Angle longAngle=shortAngle.add(Angle.POS180).normalize();  boolean isLeftTurn=signedDistance.compareTo(Angle.ZERO) > 0;  if (angularDistance.compareTo(this.getSmallAngleThreshold()) > 0) {    Angle leftAzimuth=isLeftTurn ? shortAngle : longAngle;    Angle rightAzimuth=isLeftTurn ? longAngle : shortAngle;    boolean widthsDifferent=!Arrays.equals(leg1.getWidths(),leg2.getWidths());    leg1.setEnableEndCap(widthsDifferent || this.isEnableInnerCaps());    leg2.setEnableStartCap(widthsDifferent || this.isEnableInnerCaps());    leg1.setCornerAzimuths(azimuths1[0],azimuths1[1],leftAzimuth,rightAzimuth);    leg2.setCornerAzimuths(leftAzimuth,rightAzimuth,azimuths2[2],azimuths2[3]);  } else   if (isLeftTurn) {    leg1.setEnableEndCap(true);    leg2.setEnableStartCap(true);    leg1.setCornerAzimuths(azimuths1[0],azimuths1[1],shortAngle,azimuths1[3]);    leg2.setCornerAzimuths(shortAngle,azimuths2[1],azimuths2[2],azimuths2[3]);  } else {    leg1.setEnableEndCap(true);    leg2.setEnableStartCap(true);    leg1.setCornerAzimuths(azimuths1[0],azimuths1[1],azimuths1[2],shortAngle);    leg2.setCornerAzimuths(azimuths2[0],shortAngle,azimuths2[2],azimuths2[3]);  }}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  public CircularInterpolation(boolean isFlipped){  this.isFlipped=isFlipped;}  }
class C{  public boolean hasNotification(int entryId){  return mCenter.hasEntry(ID,entryId);}  }
class C{  public AxesWalker(LocPathIterator locPathIterator,int axis){  super(locPathIterator);  m_axis=axis;}  }
class C{  public static SingleVariableDeclaration cloneMethodParameter(AST ast,SingleVariableDeclaration param,ImportRewrite imports){  SingleVariableDeclaration newParam=ast.newSingleVariableDeclaration();  Type type=normalizeTypeAndAddImport(ast,param.getType(),imports);  newParam.setType(type);  newParam.setName(ast.newSimpleName(param.getName().getIdentifier()));  return newParam;}  }
class C{  public Boolean isIpv4Enabled(){  return ipv4Enabled;}  }
class C{  public boolean removeAll(float[] array){  boolean changed=false;  for (int i=array.length; i-- > 0; ) {    if (remove(array[i])) {      changed=true;    }  }  return changed;}  }
class C{  public LruEvictionPolicy(int max){  A.ensure(max >= 0,"max >= 0");  this.max=max;}  }
class C{  void validateIterator(){  refreshIfEmpty();  if (delegate != originalDelegate) {    throw new ConcurrentModificationException();  }}  }
class C{  private Integer updateCas(CAS aCas,int aBegin,int aEnd,AnnotationFeature aFeature,Object aValue) throws BratAnnotationException {  Type type=CasUtil.getType(aCas,getAnnotationTypeName());  for (  AnnotationFS fs : CasUtil.selectCovered(aCas,type,aBegin,aEnd)) {    if (fs.getBegin() == aBegin && fs.getEnd() == aEnd) {      if (!allowStacking) {        setFeature(fs,aFeature,aValue);        return getAddr(fs);      }    }  }  AnnotationFS newAnnotation=createAnnotation(aCas,aBegin,aEnd,aFeature,aValue,type);  return getAddr(newAnnotation);}  }
class C{  public void actionPerformed(java.awt.event.ActionEvent e){  Object source=e.getSource();  if (!(source instanceof JMenuItem))   return;  JMenuItem mi=(JMenuItem)source;  String name=mi.getText();  OMGraphicHandlerLayer targetLayer=(OMGraphicHandlerLayer)layers.get(name);  if (targetLayer == null) {    Debug.message("defaultdndcatcher","ERROR> DefaultDnDCatcher::actionPerformed: " + "no layer found with name " + name);    return;  }  targetLayer.doAction((OMGraphic)transferData,new OMAction(OMAction.UPDATE_GRAPHIC_MASK));}  }
class C{  public InExRules(InExRuleMatcher<T,R> inExRuleMatcher){  this.inExRuleMatcher=inExRuleMatcher;}  }
class C{  public Device(DeviceManagerImpl deviceManager,Long deviceKey,Entity entity,IEntityClass entityClass){  this.deviceManager=deviceManager;  this.deviceKey=deviceKey;  this.entities=new Entity[]{entity};  this.macAddressString=entity.getMacAddress().toString();  this.entityClass=entityClass;  Arrays.sort(this.entities);  this.dhcpClientName=null;  this.oldAPs=null;  this.attachmentPoints=null;  if (entity.getSwitchDPID() != null && entity.getSwitchPort() != null) {    DatapathId sw=entity.getSwitchDPID();    OFPort port=entity.getSwitchPort();    if (deviceManager.isValidAttachmentPoint(sw,port)) {      AttachmentPoint ap;      ap=new AttachmentPoint(sw,port,entity.getLastSeenTimestamp());      this.attachmentPoints=new ArrayList<AttachmentPoint>();      this.attachmentPoints.add(ap);    }  }  vlanIds=computeVlandIds();}  }
class C{  public CipherParameters decrypt(byte[] in,int inOff,int inLen,int keyLen) throws IllegalArgumentException {  if (!(key instanceof ECPrivateKeyParameters)) {    throw new IllegalArgumentException("Private key required for encryption");  }  ECPrivateKeyParameters ecPrivKey=(ECPrivateKeyParameters)key;  ECDomainParameters ecParams=ecPrivKey.getParameters();  ECCurve curve=ecParams.getCurve();  BigInteger n=ecParams.getN();  BigInteger h=ecParams.getH();  byte[] C=new byte[inLen];  System.arraycopy(in,inOff,C,0,inLen);  ECPoint gTilde=curve.decodePoint(C);  ECPoint gHat=gTilde;  if ((CofactorMode) || (OldCofactorMode)) {    gHat=gHat.multiply(h);  }  BigInteger xHat=ecPrivKey.getD();  if (CofactorMode) {    xHat=xHat.multiply(h.modInverse(n)).mod(n);  }  ECPoint hTilde=gHat.multiply(xHat).normalize();  byte[] PEH=hTilde.getAffineXCoord().getEncoded();  return deriveKey(keyLen,C,PEH);}  }
class C{  public boolean isNativeLookAndFeel(){  return false;}  }
class C{  public boolean isFillLastRow(){  return fillLastRow;}  }
class C{  public int findStartOfColumn(int column){  if (column == mColumns)   return getSpaceUsed();  int currentColumn=0;  int currentCharIndex=0;  while (true) {    int newCharIndex=currentCharIndex;    char c=mText[newCharIndex++];    boolean isHigh=Character.isHighSurrogate(c);    int codePoint=isHigh ? Character.toCodePoint(c,mText[newCharIndex++]) : c;    int wcwidth=WcWidth.width(codePoint);    if (wcwidth > 0) {      currentColumn+=wcwidth;      if (currentColumn == column) {        while (newCharIndex < mSpaceUsed) {          if (Character.isHighSurrogate(mText[newCharIndex])) {            if (WcWidth.width(Character.toCodePoint(mText[newCharIndex],mText[newCharIndex + 1])) <= 0) {              newCharIndex+=2;            } else {              break;            }          } else           if (WcWidth.width(mText[newCharIndex]) <= 0) {            newCharIndex++;          } else {            break;          }        }        return newCharIndex;      } else       if (currentColumn > column) {        return currentCharIndex;      }    }    currentCharIndex=newCharIndex;  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @SuppressWarnings("LockAcquiredButNotSafelyReleased") private long readLock(int hash){  lock.readLock().lock();  return binAddress(hash);}  }
class C{  public boolean hasReserved(){  if (reservationId == -1) {    return false;  }  return true;}  }
class C{  public static SECType newInstance(String value){  final SECType returnInstance=new SECType();  returnInstance.setValue(value);  return returnInstance;}  }
class C{  public static org.oscm.internal.vo.VOVatRate convertToUp(org.oscm.vo.VOVatRate oldVO){  if (oldVO == null) {    return null;  }  org.oscm.internal.vo.VOVatRate newVO=new org.oscm.internal.vo.VOVatRate();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setRate(oldVO.getRate());  return newVO;}  }
class C{  private static void purgeMissingOffExtModConfigs(){  final ModulesBean modules=ScelightLauncher.INSTANCE().getModules();  if (modules.getOrigin() == ModulesBeanOrigin.UPDATER_FAKE)   return;  final OffExtModConfsBean offExtModConfsBean=Env.LAUNCHER_SETTINGS.get(LSettings.OFF_EXT_MOD_CONFS);  OffExtModConfsBean offExtModConfsBeanClone=null;  for (  final OffExtModConfBean conf : offExtModConfsBean.getOffExtModConfBeanList())   if (modules.getExtModRefForFolder(conf.getFolder()) == null) {    if (offExtModConfsBeanClone == null)     offExtModConfsBeanClone=offExtModConfsBean.cloneBean();    offExtModConfsBeanClone.getOffExtModConfBeanList().remove(offExtModConfsBeanClone.getModuleConfForFolder(conf.getFolder()));  }  if (offExtModConfsBeanClone != null)   Env.LAUNCHER_SETTINGS.set(LSettings.OFF_EXT_MOD_CONFS,offExtModConfsBeanClone);}  }
class C{  public void testParsingOfLongerSequences() throws Exception {  double[] values=new double[]{0.01,-10.5,2.1e9,4.0e-8};  StringBuilder sb=new StringBuilder();  for (int i=0; i < values.length; ++i) {    if (i > 0) {      sb.append(',');    }    sb.append(values[i]);  }  String segment=sb.toString();  int COUNT=1000;  sb=new StringBuilder(COUNT * segment.length() + 20);  sb.append("[");  for (int i=0; i < COUNT; ++i) {    if (i > 0) {      sb.append(',');    }    sb.append(segment);    sb.append('\n');    int x=(i & 3);    if (i > 300) {      x+=i % 5;    }    while (--x > 0) {      sb.append(' ');    }  }  sb.append("]");  String DOC=sb.toString();  for (int input=0; input < 2; ++input) {    JsonParser jp;    if (input == 0) {      jp=createParserUsingStream(DOC,"UTF-8");    } else {      jp=createParserUsingReader(DOC);    }    assertToken(JsonToken.START_ARRAY,jp.nextToken());    for (int i=0; i < COUNT; ++i) {      for (      double d : values) {        assertToken(JsonToken.VALUE_NUMBER_FLOAT,jp.nextToken());        assertEquals(d,jp.getDoubleValue());      }    }    assertToken(JsonToken.END_ARRAY,jp.nextToken());  }}  }
class C{  public static Position interpolateGreatCircle(double amount,Position value1,Position value2){  if (value1 == null || value2 == null) {    String message=Logging.getMessage("nullValue.PositionIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  LatLon latLon=LatLon.interpolateGreatCircle(amount,value1,value2);  double elevation=WWMath.mix(amount,value1.getElevation(),value2.getElevation());  return new Position(latLon,elevation);}  }
class C{  public String putImagePNG(String theFolder,String theImageName,Bitmap theBitmap){  this.DEFAULT_APP_IMAGEDATA_DIRECTORY=theFolder;  String mFullPath=setupFolderPath(theImageName);  saveBitmapPNG(mFullPath,theBitmap);  lastImagePath=mFullPath;  return mFullPath;}  }
class C{  public void putBoolean(String key,boolean value){  checkForNullKey(key);  preferences.edit().putBoolean(key,value).apply();}  }
class C{  @BeforeClass public static void initProxy() throws Exception {  proxy=new LittleProxyMitmProxy(9093,new CertificateSniffingMitmManager()).start();}  }
class C{  public boolean hasMoney(){  return hasRepeatingExtension(Money.class);}  }
class C{  public LayerDrawable(@NonNull Drawable[] layers){  this(layers,null);}  }
class C{  private static File createTempFileFor(String content) throws IOException {  final File temp=File.createTempFile("n4jsnode",N4JSGlobals.JS_FILE_EXTENSION);  final BufferedWriter writer=new BufferedWriter(new FileWriter(temp));  try {    writer.write(content);  }  finally {    writer.close();  }  temp.deleteOnExit();  return temp;}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return zzCurrentPos >= s.offset + s.count;}  }
class C{  protected Messages(){}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  protected void retransmitResponse() throws StunException, IOException, IllegalArgumentException {  if (isExpired() || !isRetransmitting)   return;  stackCallback.getNetAccessManager().sendMessage(response,localSendingAddress,responseDestination);}  }
class C{  private double calculateError(Matrix points1,Matrix points2){  Matrix pts2est=R.times(points1).times(scaleFactor);  for (int i=0; i < pts2est.getColumnDimension(); i++) {    pts2est.set(0,i,pts2est.get(0,i) + T.get(0,0));    pts2est.set(1,i,pts2est.get(1,i) + T.get(1,0));    pts2est.set(2,i,pts2est.get(2,i) + T.get(2,0));  }  double error=0;  for (int i=0; i < pts2est.getColumnDimension(); i++) {    error+=Math.pow(pts2est.get(0,i) - points2.get(0,i),2);    error+=Math.pow(pts2est.get(1,i) - points2.get(1,i),2);    error+=Math.pow(pts2est.get(2,i) - points2.get(2,i),2);  }  return error;}  }
class C{  @OnClick(R.id.dismiss_button) public void onDismissClick(View view){  if (SystemClock.elapsedRealtime() - mLastClickTime < 500) {    return;  }  mLastClickTime=SystemClock.elapsedRealtime();  dismissOffer(getAdapterPosition());  if (snackbar != null) {    snackbar.dismiss();  }}  }
class C{  private void validateBlockObjectNativeId(List<URI> blockObjectURIs){  if (!CollectionUtils.isEmpty(blockObjectURIs)) {    for (    URI boURI : blockObjectURIs) {      BlockObject bo=BlockObject.fetch(_dbClient,boURI);      ArgValidator.checkEntity(bo,boURI,false);      if (NullColumnValueGetter.isNullValue(bo.getNativeId())) {        throw APIException.badRequests.nativeIdCannotBeNull(boURI);      }    }  }}  }
class C{  public PlatformDotNetConfiguration unwrap(){  return new PlatformDotNetConfiguration(this);}  }
class C{  protected boolean dumpProvider(FileDescriptor fd,PrintWriter pw,String name,String[] args,int opti,boolean dumpAll){  return mProviderMap.dumpProvider(fd,pw,name,args,opti,dumpAll);}  }
class C{  @After public void tearDown() throws Exception {  Aspects accounts=aspectHome.findByClassName(Account.class.getName());  for (  Aspect aspect : accounts.getAspect()) {    aspectHome.remove(aspect);  }}  }
class C{  public List depthFirst(boolean preorder){  List answer=new NodeList();  if (preorder)   answer.add(this);  answer.addAll(depthFirstRest(preorder));  if (!preorder)   answer.add(this);  return answer;}  }
class C{  @Override public void retry(VolleyError error) throws VolleyError {  mCurrentRetryCount++;  mCurrentTimeoutMs+=(mCurrentTimeoutMs * mBackoffMultiplier);  if (!hasAttemptRemaining()) {    throw error;  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public DefaultActionGroup(@NotNull List<? extends AnAction> actions){  this(null,false);  addActions(actions);}  }
class C{  public LicenseException(String message,Throwable thr){  super(message,thr);}  }
class C{  public void addCommit() throws IOException {  add();  commit();}  }
class C{  public static void showToast(String message){  showToast(message,0);}  }
class C{  public void failoverCopyCancel(RPCopyRequestParams copyToFailoverTo) throws RecoverPointException {  RecoverPointImageManagementUtils imageManager=new RecoverPointImageManagementUtils();  imageManager.disableCopyImage(functionalAPI,copyToFailoverTo);}  }
class C{  public Scoping(Alias alias,CharSequence column){  clause=format(PATTERN,alias.getAlias(),column);}  }
class C{  private SerializerReadUTF8(){}  }
class C{  public static URI createId(Class<? extends DataObject> clazz){  return newId(clazz,getLocation(clazz));}  }
class C{  public JSONArray(){  this.myArrayList=new ArrayList<Object>();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(entitygetpublicid.class,args);}  }
class C{  @Override public void validate(final Cookie cookie,final CookieOrigin origin){}  }
class C{  protected SuperClass(){  this.intValue=42;  this.map=new HashMap();  map.put("one",new Integer(1));  map.put("two",new Integer(2));  map.put("three",new Integer(3));  map.put("four",new Integer(4));}  }
class C{  public List<AsyncHandler> asyncHandlers(){  return subresources().asyncHandlers();}  }
class C{  private void decode(byte[] data,int width,int height){  long start=System.currentTimeMillis();  Result rawResult=null;  byte[] rotatedData=new byte[data.length];  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++)     rotatedData[x * height + height - y - 1]=data[x + y * width];  }  int tmp=width;  width=height;  height=tmp;  PlanarYUVLuminanceSource source=CameraManager.get().buildLuminanceSource(rotatedData,width,height);  BinaryBitmap bitmap=new BinaryBitmap(new HybridBinarizer(source));  try {    rawResult=multiFormatReader.decodeWithState(bitmap);  } catch (  ReaderException re) {  } finally {    multiFormatReader.reset();  }  if (rawResult != null) {    long end=System.currentTimeMillis();    Log.d(TAG,"Found barcode (" + (end - start) + " ms):\n"+ rawResult.toString());    Message message=Message.obtain(activity.getHandler(),R.id.decode_succeeded,rawResult);    Bundle bundle=new Bundle();    bundle.putParcelable(DecodeThread.BARCODE_BITMAP,source.renderCroppedGreyscaleBitmap());    message.setData(bundle);    message.sendToTarget();  } else {    Message message=Message.obtain(activity.getHandler(),R.id.decode_failed);    message.sendToTarget();  }}  }
class C{  public void closeFrame(){  if (m_ParentFrame != null)   m_ParentFrame.setVisible(false);}  }
class C{  public RVMMethod findDeclaredMethod(Atom methodName){  for (  RVMMethod method : declaredMethods) {    if (method.getName() == methodName) {      return method;    }  }  return null;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  void acc_add(AccurateValue n1,AccurateValue n2,AccurateValue sum){  acc_align(n1,n2);  if (n1.acc_isZero()) {    AccurateValue av=n2.acc_copy();    sum.sign=n2.sign;    sum.digits=av.digits;    return;  } else   if (n2.acc_isZero()) {    AccurateValue av=n1.acc_copy();    sum.sign=n1.sign;    sum.digits=av.digits;    return;  }  if (n1.sign == n2.sign) {    acc_realAdd(n1,n2,sum);  } else {    AccurateValue o1=n1.acc_copy();    AccurateValue o2=n2.acc_copy();    if (o1.sign == -1) {      o1.sign=1;      acc_subtract(o2,o1,sum);    } else {      o2.sign=1;      acc_subtract(o1,o2,sum);    }  }}  }
class C{  public boolean isLiteralText(){  return false;}  }
class C{  private void createDeleteTableEntry(String tableName,ADDataElement data1,Vector<String> keycolumns,Vector<Column> columns1){  String alterStatement="DELETE FROM " + tableName + " WHERE ";  boolean and=false;  for (int i=0; i < columns1.size(); i++) {    final Column column=columns1.get(i);    final String columnName=column.getColumnName();    if (keycolumns.contains(columnName)) {      if (and) {        alterStatement+=" AND ";      }      and=true;      if (data1.getValueForColumn(columnName) == null) {        alterStatement+=column.getColumnName() + " is null ";        continue;      }      alterStatement+=column.getColumnName() + "=";      if (column.isStringType()) {        alterStatement+="'" + data1.getValueForColumn(columnName).replaceAll("'","''") + "'";      } else {        alterStatement+=data1.getValueForColumn(columnName);      }    }  }  alterStatement+=";";  m_deleteADEntry.add(alterStatement);}  }
class C{  public void activateNextFrame(final JInternalFrame f){  fInitialFrame=f;  switchFrame(true);}  }
class C{  public TradeOrder findTradeOrderByKey(final Integer orderKey) throws PersistentModelException {  return m_tradeOrderHome.findTradeOrderByKey(orderKey);}  }
class C{  protected void startTag(int tagType,boolean longTag){  this.tagType=tagType;  this.longTag=longTag;  bytes=new ByteArrayOutputStream(10000);  out=new OutStream(bytes);}  }
class C{  protected AssertionImpl(){  super();}  }
class C{  public String lastSegment(){  int len=segments.length;  return len == 0 ? null : segments[len - 1];}  }
class C{  public ListaDescrVO insertListaDescriptora(ListaDescrVO listaDescriptora){  Locale locale=getServiceClient().getLocale();  checkPermission(DescripcionSecurityManager.ADMINISTRAR_DESCRIPTORES_ACTION);  iniciarTransaccion();  LoggingEvent event=AuditoriaDescripcion.getLogginEvent(this,ArchivoActions.DESCRIPCION_MODULE_ALTA_LISTA_DESCRIPTORES);  listaDescriptora=catalogoListaDescriptoresDBEntity.insert(listaDescriptora);  AuditoriaDescripcion.auditaInsercionListaDescriptora(locale,event,listaDescriptora);  commit();  return listaDescriptora;}  }
class C{  public void remove(int key){  map.remove(key);}  }
class C{  public static void cacheInternalItemId(ConsumerBean consumerBean,String clientId,Long internalId){  final String clientIdKey=MemCacheKeys.getItemInternalId(consumerBean.getShort_name(),clientId);  MemCachePeer.put(clientIdKey,internalId,Constants.CACHING_TIME);}  }
class C{  public final void push(String s){  if ((m_firstFree + 1) >= m_mapSize) {    m_mapSize+=m_blocksize;    String newMap[]=new String[m_mapSize];    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);    m_map=newMap;  }  m_map[m_firstFree]=s;  m_firstFree++;}  }
class C{  public boolean dependsOnResolutionOf(InferenceVariable infVar,InferenceVariable candidate){  for (  TypeBound currBound : getBounds(infVar)) {    if (TypeUtils.isOrContainsRefToTypeVar(currBound.right,candidate)) {      return true;    }  }  return false;}  }
class C{  public static String match(String content,String pattern,int group){  return match(content,pattern,group,false);}  }
class C{  @Override protected boolean is(String word){  return m_Words.contains(word.trim().toLowerCase());}  }
class C{  @Override public void drawItem(Graphics2D g2,XYItemRendererState state,Rectangle2D dataArea,PlotRenderingInfo info,XYPlot plot,ValueAxis domainAxis,ValueAxis rangeAxis,XYDataset dataset,int series,int item,CrosshairState crosshairState,int pass){  if (!getItemVisible(series,item)) {    return;  }  double x1=dataset.getXValue(series,item);  double y1=dataset.getYValue(series,item);  if (Double.isNaN(y1)) {    y1=0.0;  }  double transX1=domainAxis.valueToJava2D(x1,dataArea,plot.getDomainAxisEdge());  double transY1=rangeAxis.valueToJava2D(y1,dataArea,plot.getRangeAxisEdge());  double x0=dataset.getXValue(series,Math.max(item - 1,0));  double y0=dataset.getYValue(series,Math.max(item - 1,0));  if (Double.isNaN(y0)) {    y0=0.0;  }  double transX0=domainAxis.valueToJava2D(x0,dataArea,plot.getDomainAxisEdge());  double transY0=rangeAxis.valueToJava2D(y0,dataArea,plot.getRangeAxisEdge());  int itemCount=dataset.getItemCount(series);  double x2=dataset.getXValue(series,Math.min(item + 1,itemCount - 1));  double y2=dataset.getYValue(series,Math.min(item + 1,itemCount - 1));  if (Double.isNaN(y2)) {    y2=0.0;  }  double transX2=domainAxis.valueToJava2D(x2,dataArea,plot.getDomainAxisEdge());  double transY2=rangeAxis.valueToJava2D(y2,dataArea,plot.getRangeAxisEdge());  double transZero=rangeAxis.valueToJava2D(0.0,dataArea,plot.getRangeAxisEdge());  GeneralPath hotspot=new GeneralPath();  if (plot.getOrientation() == PlotOrientation.HORIZONTAL) {    moveTo(hotspot,transZero,((transX0 + transX1) / 2.0));    lineTo(hotspot,((transY0 + transY1) / 2.0),((transX0 + transX1) / 2.0));    lineTo(hotspot,transY1,transX1);    lineTo(hotspot,((transY1 + transY2) / 2.0),((transX1 + transX2) / 2.0));    lineTo(hotspot,transZero,((transX1 + transX2) / 2.0));  } else {    moveTo(hotspot,((transX0 + transX1) / 2.0),transZero);    lineTo(hotspot,((transX0 + transX1) / 2.0),((transY0 + transY1) / 2.0));    lineTo(hotspot,transX1,transY1);    lineTo(hotspot,((transX1 + transX2) / 2.0),((transY1 + transY2) / 2.0));    lineTo(hotspot,((transX1 + transX2) / 2.0),transZero);  }  hotspot.closePath();  PlotOrientation orientation=plot.getOrientation();  Paint paint=getItemPaint(series,item);  Stroke stroke=getItemStroke(series,item);  g2.setPaint(paint);  g2.setStroke(stroke);  g2.fill(hotspot);  if (isOutline()) {    g2.setStroke(lookupSeriesOutlineStroke(series));    g2.setPaint(lookupSeriesOutlinePaint(series));    g2.draw(hotspot);  }  int domainAxisIndex=plot.getDomainAxisIndex(domainAxis);  int rangeAxisIndex=plot.getRangeAxisIndex(rangeAxis);  updateCrosshairValues(crosshairState,x1,y1,domainAxisIndex,rangeAxisIndex,transX1,transY1,orientation);  if (state.getInfo() != null) {    EntityCollection entities=state.getEntityCollection();    if (entities != null) {      Area dataAreaHotspot=new Area(hotspot);      dataAreaHotspot.intersect(new Area(dataArea));      if (!dataAreaHotspot.isEmpty()) {        String tip=null;        XYToolTipGenerator generator=getToolTipGenerator(series,item);        if (generator != null) {          tip=generator.generateToolTip(dataset,series,item);        }        String url=null;        if (getURLGenerator() != null) {          url=getURLGenerator().generateURL(dataset,series,item);        }        XYItemEntity entity=new XYItemEntity(dataAreaHotspot,dataset,series,item,tip,url);        entities.add(entity);      }    }  }}  }
class C{  private void index() throws IOException {  IndexWriter indexWriter=new IndexWriter(indexDir,new IndexWriterConfig(new WhitespaceAnalyzer()).setOpenMode(OpenMode.CREATE));  DirectoryTaxonomyWriter taxoWriter=new DirectoryTaxonomyWriter(taxoDir);  Document doc=new Document();  doc.add(new FacetField("Author","Bob"));  doc.add(new FacetField("Publish Date","2010","10","15"));  indexWriter.addDocument(config.build(taxoWriter,doc));  doc=new Document();  doc.add(new FacetField("Author","Lisa"));  doc.add(new FacetField("Publish Date","2010","10","20"));  indexWriter.addDocument(config.build(taxoWriter,doc));  doc=new Document();  doc.add(new FacetField("Author","Lisa"));  doc.add(new FacetField("Publish Date","2012","1","1"));  indexWriter.addDocument(config.build(taxoWriter,doc));  doc=new Document();  doc.add(new FacetField("Author","Susan"));  doc.add(new FacetField("Publish Date","2012","1","7"));  indexWriter.addDocument(config.build(taxoWriter,doc));  doc=new Document();  doc.add(new FacetField("Author","Frank"));  doc.add(new FacetField("Publish Date","1999","5","5"));  indexWriter.addDocument(config.build(taxoWriter,doc));  indexWriter.close();  taxoWriter.close();}  }
class C{  public static Object deserialize(InputStream in){  Class<?> cls;  Class<?>[] paramTypes;  Constructor<?> constr;  Object[] arglist;  Object obj;  Object result;  result=null;  try {    cls=Class.forName(CLASS_PYTHONOBJECTINPUTSTREAM);    paramTypes=new Class[]{InputStream.class};    constr=cls.getConstructor(paramTypes);    arglist=new Object[]{in};    obj=constr.newInstance(arglist);    result=invoke(obj,"readObject",new Class[]{},new Object[]{});  } catch (  Exception e) {    e.printStackTrace();  }  return result;}  }
class C{  private static void convertToHTML40(AttributeSet from,MutableAttributeSet to){  Enumeration keys=from.getAttributeNames();  String value="";  while (keys.hasMoreElements()) {    Object key=keys.nextElement();    if (key instanceof CSS.Attribute) {      value=value + " " + key+ "="+ from.getAttribute(key)+ ";";    } else {      to.addAttribute(key,from.getAttribute(key));    }  }  if (value.length() > 0) {    to.addAttribute(HTML.Attribute.STYLE,value);  }}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public final CC alignY(String align){  ver.setAlign(ConstraintParser.parseUnitValueOrAlign(align,false,null));  return this;}  }
class C{  public void execute(SessionNode sessionNode,boolean overwrite){  if (!this.session.contains(sessionNode)) {    throw new IllegalArgumentException("Session node not in the " + "session: " + sessionNode.getDisplayName());  }  this.nodesToExecute=this.session.getNodes();  LinkedList<SessionNode> tierOrdering=new LinkedList<>(getTierOrdering(sessionNode));  notifyDownstreamOfStart(sessionNode);  boolean doRepetition=true;  boolean simulation=true;  TetradLogger.getInstance().forceLogMessage("\n\n===STARTING SIMULATION STUDY===");  long time1=System.currentTimeMillis();  execute(tierOrdering,doRepetition,simulation,overwrite);  TetradLogger.getInstance().forceLogMessage("\n\n===FINISHING SIMULATION STUDY===");  long time2=System.currentTimeMillis();  TetradLogger.getInstance().forceLogMessage("Elapsed time = " + (time2 - time1) / 1000. + " s");}  }
class C{  protected void clearEvents(){  sCInterface.clearEvents();}  }
class C{  public int size(Macros macros){  RegExp1 unary;  RegExp2 binary;  RegExp content;switch (type) {case sym.BAR:    binary=(RegExp2)this;  return binary.r1.size(macros) + binary.r2.size(macros) + 2;case sym.CONCAT:binary=(RegExp2)this;return binary.r1.size(macros) + binary.r2.size(macros);case sym.STAR:unary=(RegExp1)this;content=(RegExp)unary.content;return content.size(macros) + 2;case sym.PLUS:unary=(RegExp1)this;content=(RegExp)unary.content;return content.size(macros) + 2;case sym.QUESTION:unary=(RegExp1)this;content=(RegExp)unary.content;return content.size(macros);case sym.BANG:unary=(RegExp1)this;content=(RegExp)unary.content;return content.size(macros) * content.size(macros);case sym.TILDE:unary=(RegExp1)this;content=(RegExp)unary.content;return content.size(macros) * content.size(macros) * 3;case sym.STRING:case sym.STRING_I:unary=(RegExp1)this;return ((String)unary.content).length() + 1;case sym.CHAR:case sym.CHAR_I:return 2;case sym.CCLASS:case sym.CCLASSNOT:return 2;case sym.MACROUSE:unary=(RegExp1)this;return macros.getDefinition((String)unary.content).size(macros);}throw new Error("unknown regexp type " + type);}  }
class C{  public synchronized void addSelectionListener(SelectionListener listener){  if (listeners == null) {    listeners=new Vector<SelectionListener>();  }  listeners.addElement(listener);}  }
class C{  public boolean makeReflective(CtClass clazz,CtClass metaobject,CtClass metaclass) throws CannotCompileException, CannotReflectException, NotFoundException {  if (clazz.isInterface())   throw new CannotReflectException("Cannot reflect an interface: " + clazz.getName());  if (clazz.subclassOf(classPool.get(classMetaobjectClassName)))   throw new CannotReflectException("Cannot reflect a subclass of ClassMetaobject: " + clazz.getName());  if (clazz.subclassOf(classPool.get(metaobjectClassName)))   throw new CannotReflectException("Cannot reflect a subclass of Metaobject: " + clazz.getName());  registerReflectiveClass(clazz);  return modifyClassfile(clazz,metaobject,metaclass);}  }
class C{  public boolean canInvert(){  return true;}  }
class C{  protected int[] mapColumnsToProperties(ResultSetMetaData rsmd,PropertyDescriptor[] props) throws SQLException {  int cols=rsmd.getColumnCount();  int[] columnToProperty=new int[cols + 1];  Arrays.fill(columnToProperty,PROPERTY_NOT_FOUND);  for (int col=1; col <= cols; col++) {    String columnName=rsmd.getColumnName(col);    for (int i=0; i < props.length; i++) {      if (columnName.equalsIgnoreCase(props[i].getName())) {        columnToProperty[col]=i;        break;      }    }  }  return columnToProperty;}  }
class C{  public ArffPanel(Instances data){  this();  m_Filename="";  setInstances(data);}  }
class C{  public static Collection flatten(char[] self){  return flatten(toList(self),new ArrayList());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:04.436 -0500",hash_original_method="158F810291D2A91A31DC503BED9BBD2A",hash_generated_method="42CC10676CEAC90699D7C56616C8A5AB") TFTPRequestPacket(int type,DatagramPacket datagram) throws TFTPPacketException {  super(type,datagram.getAddress(),datagram.getPort());  byte[] data;  int index, length;  String mode;  StringBuffer buffer;  data=datagram.getData();  if (getType() != data[1])   throw new TFTPPacketException("TFTP operator code does not match type.");  buffer=new StringBuffer();  index=2;  length=datagram.getLength();  while (index < length && data[index] != 0) {    buffer.append((char)data[index]);    ++index;  }  _filename=buffer.toString();  if (index >= length)   throw new TFTPPacketException("Bad filename and mode format.");  buffer.setLength(0);  ++index;  while (index < length && data[index] != 0) {    buffer.append((char)data[index]);    ++index;  }  mode=buffer.toString().toLowerCase();  length=_modeStrings.length;  for (index=0; index < length; index++) {    if (mode.equals(_modeStrings[index])) {      _mode=index;      break;    }  }  if (index >= length) {    throw new TFTPPacketException("Unrecognized TFTP transfer mode: " + mode);  }}  }
class C{  public void addLifecycleListener(LifecycleListener listener){synchronized (listenersLock) {    LifecycleListener results[]=new LifecycleListener[listeners.length + 1];    for (int i=0; i < listeners.length; i++)     results[i]=listeners[i];    results[listeners.length]=listener;    listeners=results;  }}  }
class C{  public void reseed(byte[] additionalInput){  CTR_DRBG_Reseed_algorithm(_entropySource,additionalInput);}  }
class C{  public InputBitStream(final byte[] a,final int off,final int len){  if (a == null)   throw new IllegalArgumentException();  if (off < 0)   throw new IllegalArgumentException();  if (off + len > a.length)   throw new IllegalArgumentException();  is=NullInputStream.getInstance();  repositionableStream=null;  fileChannel=null;  if (a.length > 0) {    buffer=a;    avail=len;    this.off=pos=off;    wrapping=true;    noBuffer=false;  } else {    buffer=null;    avail=0;    wrapping=false;    noBuffer=true;  }}  }
class C{  public static SourceViewer createSourceViewer(Composite parent,int flags){  SourceViewer sourceViewer=new SourceViewer(parent,null,null,false,flags);  SourceViewerConfiguration configuration=new SourceViewerConfiguration();  sourceViewer.configure(configuration);  sourceViewer.setTabsToSpacesConverter(getTabToSpacesConverter());  StyledText control=sourceViewer.getTextWidget();  control.setWordWrap(true);  control.setFont(TLCUIActivator.getDefault().getCourierFont());  control.setEditable(true);  return sourceViewer;}  }
class C{  public static BufferedImage loadCompatibleImage(URL resource) throws IOException {  BufferedImage image=ImageIO.read(resource);  return toCompatibleImage(image);}  }
class C{  private IdleStatus(String strValue){  this.strValue=strValue;}  }
class C{  public static Hashtable<String,String> indexString(String thisText){  thisText=removeHTML(thisText);  if (thisText != null) {    String[] keywords=thisText.toUpperCase().split("\\t|\\p{Punct}|\\p{Space}");    Hashtable<String,String> keyhash=new Hashtable<String,String>(keywords.length);    int currentPos=0;    for (int i=0; i < keywords.length; i++) {      String thisExcerpt="";      if (keywords[i].length() >= 2) {        if (!keyhash.contains(keywords[i])) {          int startExcerpt=thisText.toUpperCase().indexOf(keywords[i],currentPos);          if (startExcerpt > 50)           startExcerpt=startExcerpt - 50;          if (startExcerpt > thisText.length() && startExcerpt > 50 && thisText.length() > 50)           startExcerpt=thisText.length() - 50;          int endExcerpt=thisText.toUpperCase().indexOf(keywords[i],currentPos) + keywords[i].length();          if (endExcerpt > currentPos)           currentPos=endExcerpt;          if (endExcerpt < thisText.length() - 50)           endExcerpt=endExcerpt + 50;          if (endExcerpt > thisText.length())           endExcerpt=thisText.length();          thisExcerpt=thisText.substring(startExcerpt,endExcerpt);          keyhash.put(keywords[i],thisExcerpt);        }      }    }    return keyhash;  } else {    return null;  }}  }
class C{  @DSSpec(DSCat.IO) @DSSource({DSSourceKind.IO}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.339 -0400",hash_original_method="9ACE53EBE9E224BA089484C6AABDF5C3",hash_generated_method="0139704B104F196A88422C5465D86838") @Override public int read(){  if (idx >= charSequence.length()) {    return -1;  } else {    return charSequence.charAt(idx++);  }}  }
class C{  public void maybeLookAheadScripts(){}  }
class C{  public boolean isSetId(){  return EncodingUtils.testBit(__isset_bitfield,__ID_ISSET_ID);}  }
class C{  @Override public Object readFromRowIntoObject(AbstractRecord databaseRow,JoinedAttributeManager joinManager,Object targetObject,CacheKey parentCacheKey,ObjectBuildingQuery sourceQuery,AbstractSession executionSession,boolean isTargetProtected) throws DatabaseException {  Object aggregate=buildAggregateFromRow(databaseRow,targetObject,parentCacheKey,joinManager,sourceQuery,false,executionSession,isTargetProtected);  setAttributeValueInObject(targetObject,aggregate);  return aggregate;}  }
class C{  @Override public void visitInnerClass(final String aname,final String outerName,final String innerName,final int attr_access){  if ((name != null) && name.equals(aname)) {    this.access=attr_access;  }  super.visitInnerClass(aname,outerName,innerName,attr_access);}  }
class C{  public final synchronized UnicodeBOMInputStream skipBOM() throws IOException {  if (!skipped) {    in.skip(bom.bytes.length);    skipped=true;  }  return this;}  }
class C{  public boolean requestDeliverableMessages(Connection con){  return this.router.requestDeliverableMessages(con);}  }
class C{  public void requestPreviewFrame(PreviewCallback callback){  Camera theCamera=camera;  if (theCamera != null && previewing) {    cameraPreviewCallback.setCallback(callback);    theCamera.setOneShotPreviewCallback(cameraPreviewCallback);  }}  }
class C{  private void launchAnim4(){  animatedVector4.start();}  }
class C{  public final void testRSAMultiPrimePrivateCrtKeySpec02(){  try {    new RSAMultiPrimePrivateCrtKeySpec(null,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,opi);    fail("Expected NPE not thrown");  } catch (  NullPointerException e) {  }}  }
class C{  @Override public boolean isEmpty(){  return size() == 0;}  }
class C{  public boolean isOnlineVersion(){  return onlineVersion;}  }
class C{  @Override public void offset(int offset){  _writeLength=offset;}  }
class C{  public void start(){  lock.lock();  try {    if (State.NOT_STARTED.equals(state)) {      spiderThread.addSpiderListener(this);      spiderThread.start();      state=State.RUNNING;    }  }  finally {    lock.unlock();  }}  }
class C{  private void assertCharVectors(int n){  int k=2 * n + 1;  int limit=(int)Math.pow(2,k + 2);  for (int i=0; i < limit; i++) {    String encoded=Integer.toString(i,2);    assertLev(encoded,n);  }}  }
class C{  public void testEqualsBigIntegerFalse(){  byte aBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  byte bBytes[]={45,91,3,-15,35,26,3,91};  int aSign=1;  int bSign=1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  Object bNumber=new BigInteger(bSign,bBytes);  assertFalse(aNumber.equals(bNumber));}  }
class C{  public void push(int ch) throws IOException {  char data[]={(char)ch};  push(new CharArrayReader(data));}  }
class C{  public void error(SAXParseException spe) throws SAXException {  String message="Error: " + getParseExceptionInfo(spe);  throw new SAXException(message);}  }
class C{  void fireMonitorStatusChangedEvents(List inserted,List removed){  ArrayList registered=null;  MonitorStatusChangeEvent ev=null;synchronized (listeners) {    registered=(ArrayList)listeners.clone();  }  for (Iterator i=registered.iterator(); i.hasNext(); ) {    VmListener l=(VmListener)i.next();    if (ev == null) {      ev=new MonitorStatusChangeEvent(this,inserted,removed);    }    l.monitorStatusChanged(ev);  }}  }
class C{  public static String fullVersion(){  return version("full");}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public DatumComparator(int dimension){  this.dimension=dimension;}  }
class C{  public boolean isOpaque(){  return opaque;}  }
class C{  public void writeExif(byte[] jpeg,OutputStream exifOutStream) throws IOException {  if (jpeg == null || exifOutStream == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  OutputStream s=getExifWriterStream(exifOutStream);  s.write(jpeg,0,jpeg.length);  s.flush();}  }
class C{  final Object pop(){  int size=stack.size();  return size == 0 ? null : stack.remove(size - 1);}  }
class C{  public void deleteShaders(){  if (this.worldShader != null)   this.worldShader.delete();  this.worldShader=null;  if (this.blitBuffer != null)   this.blitBuffer.delete();  this.blitBuffer=null;  if (this.toneMappingShader != null)   this.toneMappingShader.delete();  this.toneMappingShader=null;}  }
class C{  @Override public boolean onUnbind(Intent intent){  if (mState == State.PAUSED || mState == State.STOPPED) {    processStopRequest(false);  }  return false;}  }
class C{  public static void start(Flow flow){  flow.start();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node oldChild=null;  Node newChild=null;  String childName;  Node childNode;  int length;  java.util.List actual=new java.util.ArrayList();  java.util.List expected=new java.util.ArrayList();  java.util.List expectedWithoutWhitespace=new java.util.ArrayList();  expectedWithoutWhitespace.add("name");  expectedWithoutWhitespace.add("position");  expectedWithoutWhitespace.add("salary");  expectedWithoutWhitespace.add("gender");  expectedWithoutWhitespace.add("employeeId");  java.util.List expectedWithWhitespace=new java.util.ArrayList();  expectedWithWhitespace.add("#text");  expectedWithWhitespace.add("#text");  expectedWithWhitespace.add("name");  expectedWithWhitespace.add("#text");  expectedWithWhitespace.add("position");  expectedWithWhitespace.add("#text");  expectedWithWhitespace.add("salary");  expectedWithWhitespace.add("#text");  expectedWithWhitespace.add("gender");  expectedWithWhitespace.add("#text");  expectedWithWhitespace.add("employeeId");  expectedWithWhitespace.add("#text");  Node replacedChild;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  length=(int)childList.getLength();  if (equals(13,length)) {    newChild=childList.item(1);    oldChild=childList.item(11);    expected=expectedWithWhitespace;  } else {    newChild=childList.item(0);    oldChild=childList.item(5);    expected=expectedWithoutWhitespace;  }  replacedChild=employeeNode.replaceChild(newChild,oldChild);  assertSame("return_value_same",oldChild,replacedChild);  for (int indexN100DE=0; indexN100DE < childList.getLength(); indexN100DE++) {    childNode=(Node)childList.item(indexN100DE);    childName=childNode.getNodeName();    actual.add(childName);  }  assertEquals("childNames",expected,actual);}  }
class C{  private Producer<EncodedImage> newLocalTransformationsSequence(Producer<EncodedImage> inputProducer){  Producer<EncodedImage> localImageProducer=mProducerFactory.newAddImageTransformMetaDataProducer(inputProducer);  if (!mDownsampleEnabled) {    localImageProducer=mProducerFactory.newResizeAndRotateProducer(localImageProducer);  }  ThrottlingProducer<EncodedImage> localImageThrottlingProducer=mProducerFactory.newThrottlingProducer(MAX_SIMULTANEOUS_FILE_FETCH_AND_RESIZE,localImageProducer);  Producer<EncodedImage> localExifThumbnailProducer=mProducerFactory.newLocalExifThumbnailProducer();  if (!mDownsampleEnabled) {    localExifThumbnailProducer=mProducerFactory.newResizeAndRotateProducer(localExifThumbnailProducer);  }  return mProducerFactory.newBranchOnSeparateImagesProducer(localExifThumbnailProducer,localImageThrottlingProducer);}  }
class C{  protected void doGatherTest(final EdgesEnum gatherEdges,final Set<? extends Statement> expected,final Value startingVertex) throws Exception {  final IGASEngine gasEngine=getGraphFixture().newGASEngine(1);  try {    final SailConnection cxn=getGraphFixture().getSail().getConnection();    try {      final IGraphAccessor graphAccessor=getGraphFixture().newGraphAccessor(cxn);      final IGASContext<Set<Statement>,Set<Statement>,Set<Statement>> gasContext=gasEngine.newGASContext(graphAccessor,new MockGASProgram(gatherEdges));      final IGASState<Set<Statement>,Set<Statement>,Set<Statement>> gasState=gasContext.getGASState();      gasState.setFrontier(gasContext,startingVertex);      gasContext.doRound(new GASStats());      final Set<Statement> actual=gasState.getState(startingVertex);      assertSameEdges(expected,actual);    }  finally {      try {        cxn.rollback();      }  finally {        cxn.close();      }    }  }  finally {    gasEngine.shutdownNow();  }}  }
class C{  protected void doResort(){  super.doResort();  _indexes.clear();  remapIndexes(0);}  }
class C{  public InvalidApplicationException(Object val){  this.val=val;}  }
class C{  private CloseableIteration<MemStatement,SailException> createStatementIterator(Resource subj,IRI pred,Value obj,Boolean explicit,int snapshot,Resource... contexts){  MemResource memSubj=valueFactory.getMemResource(subj);  if (subj != null && memSubj == null) {    return new EmptyIteration<MemStatement,SailException>();  }  MemIRI memPred=valueFactory.getMemURI(pred);  if (pred != null && memPred == null) {    return new EmptyIteration<MemStatement,SailException>();  }  MemValue memObj=valueFactory.getMemValue(obj);  if (obj != null && memObj == null) {    return new EmptyIteration<MemStatement,SailException>();  }  MemResource[] memContexts;  MemStatementList smallestList;  if (contexts.length == 0) {    memContexts=new MemResource[0];    smallestList=statements;  } else   if (contexts.length == 1 && contexts[0] != null) {    MemResource memContext=valueFactory.getMemResource(contexts[0]);    if (memContext == null) {      return new EmptyIteration<MemStatement,SailException>();    }    memContexts=new MemResource[]{memContext};    smallestList=memContext.getContextStatementList();  } else {    Set<MemResource> contextSet=new LinkedHashSet<MemResource>(2 * contexts.length);    for (    Resource context : contexts) {      MemResource memContext=valueFactory.getMemResource(context);      if (context == null || memContext != null) {        contextSet.add(memContext);      }    }    if (contextSet.isEmpty()) {      return new EmptyIteration<MemStatement,SailException>();    }    memContexts=contextSet.toArray(new MemResource[contextSet.size()]);    smallestList=statements;  }  if (memSubj != null) {    MemStatementList l=memSubj.getSubjectStatementList();    if (l.size() < smallestList.size()) {      smallestList=l;    }  }  if (memPred != null) {    MemStatementList l=memPred.getPredicateStatementList();    if (l.size() < smallestList.size()) {      smallestList=l;    }  }  if (memObj != null) {    MemStatementList l=memObj.getObjectStatementList();    if (l.size() < smallestList.size()) {      smallestList=l;    }  }  return new MemStatementIterator<SailException>(smallestList,memSubj,memPred,memObj,explicit,snapshot,memContexts);}  }
class C{  public boolean hasIsdnSubaddress(){  return hasParm(ISUB);}  }
class C{  public final TextBuilder append(float f){  return append(f,10,(MathLib.abs(f) >= 1E7) || (MathLib.abs(f) < 0.001),false);}  }
class C{  private int convertLocationToRow(int x,int y0,boolean closest){  int size=list.getModel().getSize();  if (size <= 0) {    return -1;  }  Insets insets=list.getInsets();  if (cellHeights == null) {    int row=(cellHeight == 0) ? 0 : ((y0 - insets.top) / cellHeight);    if (closest) {      if (row < 0) {        row=0;      } else       if (row >= size) {        row=size - 1;      }    }    return row;  } else   if (size > cellHeights.length) {    return -1;  } else {    int y=insets.top;    int row=0;    if (closest && y0 < y) {      return 0;    }    int i;    for (i=0; i < size; i++) {      if ((y0 >= y) && (y0 < y + cellHeights[i])) {        return row;      }      y+=cellHeights[i];      row+=1;    }    return i - 1;  }}  }
class C{  private static boolean omitDashServerArg(final File javaBinDir){  final String vendor=System.getProperty("java.vm.vendor");  if (vendor != null) {    final String vendorUpperCase=vendor.toUpperCase();    if (vendorUpperCase.startsWith("IBM")) {      return true;    }    if (vendorUpperCase.startsWith("SUN")) {      final String os=System.getProperty("os.name");      if (os != null && os.indexOf("Windows") != -1) {        final File serverDir=new File(javaBinDir,"server");        if (!serverDir.isDirectory()) {          return true;        }      }    }  }  return false;}  }
class C{  public static vec3 r_mul(vec3 a,vec3 b){  float x=a.m[0] * b.m[0];  float y=a.m[1] * b.m[1];  float z=a.m[2] * b.m[2];  vec3 result=new vec3(x,y,z);  return result;}  }
class C{  public static List<Operation> mapInstanceIPAddressToNICCreationOperations(Instance instance,ComputeState resultDesc,List<String> tenantLinks,StatelessService service){  List<Operation> createOperations=new ArrayList<Operation>();  if (instance.getPrivateIpAddress() != null) {    NetworkInterfaceState privateNICState=mapIPAddressToNetworkInterfaceState(instance,false,tenantLinks,null);    Operation postPrivateNetworkInterface=createPostOperation(service,privateNICState,NetworkInterfaceService.FACTORY_LINK);    createOperations.add(postPrivateNetworkInterface);    resultDesc.networkInterfaceLinks=new ArrayList<String>();    resultDesc.networkInterfaceLinks.add(UriUtils.buildUriPath(NetworkInterfaceService.FACTORY_LINK,privateNICState.documentSelfLink));  }  if (instance.getPublicIpAddress() != null) {    NetworkInterfaceState publicNICState=mapIPAddressToNetworkInterfaceState(instance,true,tenantLinks,null);    Operation postPublicNetworkInterface=createPostOperation(service,publicNICState,NetworkInterfaceService.FACTORY_LINK);    createOperations.add(postPublicNetworkInterface);    resultDesc.networkInterfaceLinks.add(UriUtils.buildUriPath(NetworkInterfaceService.FACTORY_LINK,publicNICState.documentSelfLink));  }  return createOperations;}  }
class C{  public void addEvent(NodeEvent nodeEvent){  nodeEvents.add(nodeEvent);}  }
class C{  public void replace(Name name,int type,long ttl,Tokenizer tokenizer) throws IOException {  delete(name,type);  add(name,type,ttl,tokenizer);}  }
class C{  public BrazilianStemFilter(TokenStream in){  super(in);}  }
class C{  public static void smoothScrollToPositionWithOffset(RecyclerView recyclerView,int position,int offset){  recyclerView.smoothScrollToPosition(position);}  }
class C{  private void initTransportedLandUnits(final IDelegateBridge aBridge){  final GameData data=aBridge.getData();  boolean historyItemCreated=false;  final Iterator<Territory> allTerritories=data.getMap().getTerritories().iterator();  while (allTerritories.hasNext()) {    final Territory current=allTerritories.next();    if (!current.isWater()) {      continue;    }    final Collection<Unit> units=current.getUnits().getUnits();    if (units.size() == 0 || !Match.someMatch(units,Matches.UnitIsLand)) {      continue;    }    final Collection<Unit> transports=Match.getMatches(units,Matches.UnitIsTransport);    final Collection<Unit> land=Match.getMatches(units,Matches.UnitIsLand);    for (    final Unit toLoad : land) {      final UnitAttachment ua=UnitAttachment.get(toLoad.getType());      final int cost=ua.getTransportCost();      if (cost == -1) {        throw new IllegalStateException("Non transportable unit in sea");      }      final Iterator<Unit> transportIter=transports.iterator();      boolean found=false;      while (transportIter.hasNext()) {        final Unit transport=transportIter.next();        final int capacity=TransportTracker.getAvailableCapacity(transport);        if (capacity >= cost) {          if (!historyItemCreated) {            aBridge.getHistoryWriter().startEvent("Initializing Units in Transports");            historyItemCreated=true;          }          try {            aBridge.addChange(TransportTracker.loadTransportChange((TripleAUnit)transport,toLoad));          } catch (          final IllegalStateException e) {            System.err.println("You can only edit add transports+units after the initialization delegate of the game is finished.  " + "If this error came up and you have not used Edit Mode to add units + transports, then please report this as a bug:  \r\n" + e.getMessage());          }          found=true;          break;        }      }      if (!found) {        throw new IllegalStateException("Cannot load all land units in sea transports. " + "Please make sure you have enough transports. " + "You may need to re-order the xml's placement of transports and land units, "+ "as the engine will try to fill them in the order they are given.");      }    }  }}  }
class C{  public EdgeFeature(PointFeature vertex1,PointFeature vertex2,PointFeature max,Vector2 edge,int index){  super(index);  this.vertex1=vertex1;  this.vertex2=vertex2;  this.edge=edge;  this.max=max;}  }
class C{  private void showLabel(boolean animate){  if (animate) {    mLabel.setVisibility(View.VISIBLE);    ViewCompat.setTranslationY(mLabel,mLabel.getHeight());    float scale=mEditText.getTextSize() / mLabel.getTextSize();    ViewCompat.setScaleX(mLabel,scale);    ViewCompat.setScaleY(mLabel,scale);    ViewCompat.animate(mLabel).translationY(0f).scaleY(1f).scaleX(1f).setDuration(ANIMATION_DURATION).setListener(null).setInterpolator(mInterpolator).start();  } else {    mLabel.setVisibility(VISIBLE);  }  mEditText.setHint(null);}  }
class C{  public CDebuggerUpdater(final ZyGraph graph){  m_graph=graph;}  }
class C{  public static String toString(Date date){  if (date == null)   return null; else   return getDate(date);}  }
class C{  public String toString(){  return "Rect bitsize=" + bitSize + " ("+ minX+ ","+ minY+ ")-("+ maxX+ ","+ maxY+ ")";}  }
class C{  private static String generateValueFromList(List list,String Separator){  if (list.size() == 1) {    return (String)list.get(0);  } else   if (list.size() > 1) {    StringBuffer sb=new StringBuffer();    for (Iterator it=list.iterator(); it.hasNext(); ) {      if (sb.length() > 0)       sb.append(Separator);      sb.append((String)it.next());    }    return sb.toString();  }  return null;}  }
class C{  private static void recDrawEdges(SVGPath path,double minx,double miny,List<double[]> r_edges,long[] b){  for (int i=0; i < r_edges.size(); i++) {    if (BitsUtil.get(b,i)) {      continue;    }    final double[] edge=r_edges.get(i);    final double x_i=minx + edge[0];    if (!isFinite(x_i)) {      continue;    }    final double y_i=miny + edge[1];    if (!isFinite(y_i)) {      continue;    }    path.moveTo(minx,miny);    path.drawTo(x_i,y_i);    BitsUtil.setI(b,i);    recDrawEdges(path,x_i,y_i,r_edges,b);    BitsUtil.clearI(b,i);  }}  }
class C{  protected String buildQualifierRegex(String qualifierValue){  StringBuilder sb=new StringBuilder();  sb.append("^");  sb.append(qualifierValue);  sb.append("$");  return sb.toString();}  }
class C{  private void finalizeDestinationFile(State state){  if (state.filename != null) {    setPermissions(state.filename,0644,-1,-1);  }}  }
class C{  public static ArrayList list(Enumeration e){  ArrayList l=new ArrayList();  while (e.hasMoreElements())   l.add(e.nextElement());  return l;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SexecPackage.SEQUENCE__STEPS:    return steps != null && !steps.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public void reset(ActionMapping mapping,HttpServletRequest request){  super.reset(mapping,request);  estados=new String[0];}  }
class C{  public SqlDateConverter(){  super();}  }
class C{  final static List<DriverTrip> parseDriverTrips(final JointPlan plan){  final List<DriverTrip> driverTrips=new ArrayList<DriverTrip>();  for (  final Plan indivPlan : plan.getIndividualPlans().values()) {    final Id driverId=indivPlan.getPerson().getId();    final List<Id> currentPassengers=new ArrayList<Id>();    DriverTrip currentDriverTrip=null;    for (    final PlanElement pe : indivPlan.getPlanElements()) {      if (pe instanceof Leg && JointActingTypes.DRIVER.equals(((Leg)pe).getMode())) {        if (currentDriverTrip == null) {          currentDriverTrip=new DriverTrip(driverId);          driverTrips.add(currentDriverTrip);          currentPassengers.clear();        }        currentDriverTrip.driverTrip.add((Leg)pe);        final DriverRoute dRoute=(DriverRoute)((Leg)pe).getRoute();        final Id origin=dRoute.getStartLinkId();        final Id destination=dRoute.getEndLinkId();        final Collection<Id<Person>> passengerIds=dRoute.getPassengersIds();        for (        final Id passengerId : passengerIds) {          if (!currentPassengers.contains(passengerId)) {            currentDriverTrip.passengerOrigins.put(passengerId,origin);            currentPassengers.add(passengerId);          }        }        final Iterator<Id> currPassengersIter=currentPassengers.iterator();        while (currPassengersIter.hasNext()) {          final Id p=currPassengersIter.next();          if (!passengerIds.contains(p)) {            currPassengersIter.remove();          } else {            currentDriverTrip.passengerDestinations.put(p,destination);          }        }      } else       if (pe instanceof Leg || !JointActingTypes.JOINT_STAGE_ACTS.isStageActivity(((Activity)pe).getType())) {        currentDriverTrip=null;      }    }  }  return driverTrips;}  }
class C{  public void closeDriver(){  if (camera != null) {    FlashlightManager.disableFlashlight();    camera.release();    camera=null;  }}  }
class C{  @SuppressWarnings("rawtypes") protected Long assertDocExists(HttpSolrClient solr,String coll,String docId,Long expVers) throws Exception {  QueryRequest qr=new QueryRequest(params("qt","/get","id",docId,"distrib","false","fl","id,_version_"));  NamedList rsp=solr.request(qr);  SolrDocument doc=(SolrDocument)rsp.get("doc");  String match=JSONTestUtil.matchObj("/id",doc,docId);  assertTrue("Doc with id=" + docId + " not found in "+ solr.getBaseURL()+ " due to: "+ match+ "; rsp="+ rsp,match == null);  Long vers=(Long)doc.getFirstValue("_version_");  assertNotNull(vers);  if (expVers != null)   assertEquals("expected version of doc " + docId + " to be "+ expVers,expVers,vers);  return vers;}  }
class C{  public NameStaticPair(String name,boolean isStatic){  if (name == null) {    throw new IllegalArgumentException("name may not be null");  }  this.name=name;  this.isStatic=isStatic;}  }
class C{  @Override public void onClick(View v){switch (v.getId()) {case R.id.style_hour_bt:    this.styleTv.setTimeHour(1);  break;case R.id.style_minute_bt:this.styleTv.setTimeMinute(1);break;case R.id.style_second_bt:this.styleTv.setTimeSecond(1);break;case R.id.style_start_bt:this.styleTv.start();break;case R.id.style_stop_bt:this.styleTv.stop();break;}}  }
class C{  public Object[] constructIndexRow(String colName,Object value){  return constructIndexRow(Collections.singletonMap(colName,value));}  }
class C{  @Override public int hashCode(){  final int prime=31;  int result=1;  result=prime * result + id;  result=prime * result + ((object == null) ? 0 : object.hashCode());  return result;}  }
class C{  public void appendPathList(String pathlist) throws NotFoundException {  char sep=File.pathSeparatorChar;  int i=0;  for (; ; ) {    int j=pathlist.indexOf(sep,i);    if (j < 0) {      appendClassPath(pathlist.substring(i));      break;    } else {      appendClassPath(pathlist.substring(i,j));      i=j + 1;    }  }}  }
class C{  public static void addShortcutAction(String name,JComponent component,KeyStroke key,Action action){  ActionMap actionMap=component.getActionMap();  InputMap inputMap=component.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);  inputMap.put(key,name);  actionMap.put(name,action);}  }
class C{  public static void closeInputStream(InputStream stream,String tag){  if (stream != null) {    try {      stream.close();    } catch (    IOException e) {      Log.e(tag,"Exception occured when closing InputStream." + e);    }  }}  }
class C{  public static <T extends Enum<T>>Set<T> convertSet(Set<? extends Enum<?>> values,Class<T> targetClass){  Set<T> list=new HashSet<T>();  if (values == null) {    return null;  }  for (  Enum<?> e : values) {    T result=convert(e,targetClass);    if (result != null) {      list.add(result);    }  }  return list;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public void writeUint8(long n){  check(1);  buffer[write_pos++]=(byte)(n & 0x00ff);}  }
class C{  public Element store(Object o){  LayoutTurnout p=(LayoutTurnout)o;  Element element=new Element("layoutturnout");  element.setAttribute("ident",p.getName());  if (p.getTurnoutName().length() > 0) {    element.setAttribute("turnoutname",p.getTurnoutName());  }  if (p.getSecondTurnoutName().length() > 0) {    element.setAttribute("secondturnoutname",p.getSecondTurnoutName());  }  if (p.getBlockName().length() > 0) {    element.setAttribute("blockname",p.getBlockName());  }  if (p.getBlockBName().length() > 0) {    element.setAttribute("blockbname",p.getBlockBName());  }  if (p.getBlockCName().length() > 0) {    element.setAttribute("blockcname",p.getBlockCName());  }  if (p.getBlockDName().length() > 0) {    element.setAttribute("blockdname",p.getBlockDName());  }  element.setAttribute("type","" + p.getTurnoutType());  if (p.getHidden()) {    element.setAttribute("hidden","" + (p.getHidden() ? "yes" : "no"));  }  if (p.getConnectA() != null) {    element.setAttribute("connectaname",((TrackSegment)p.getConnectA()).getID());  }  if (p.getConnectB() != null) {    element.setAttribute("connectbname",((TrackSegment)p.getConnectB()).getID());  }  if (p.getConnectC() != null) {    element.setAttribute("connectcname",((TrackSegment)p.getConnectC()).getID());  }  if (p.getConnectD() != null) {    element.setAttribute("connectdname",((TrackSegment)p.getConnectD()).getID());  }  if (p.getSignalA1Name().length() > 0) {    element.setAttribute("signala1name",p.getSignalA1Name());  }  if (p.getSignalA2Name().length() > 0) {    element.setAttribute("signala2name",p.getSignalA2Name());  }  if (p.getSignalA3Name().length() > 0) {    element.setAttribute("signala3name",p.getSignalA3Name());  }  if (p.getSignalB1Name().length() > 0) {    element.setAttribute("signalb1name",p.getSignalB1Name());  }  if (p.getSignalB2Name().length() > 0) {    element.setAttribute("signalb2name",p.getSignalB2Name());  }  if (p.getSignalC1Name().length() > 0) {    element.setAttribute("signalc1name",p.getSignalC1Name());  }  if (p.getSignalC2Name().length() > 0) {    element.setAttribute("signalc2name",p.getSignalC2Name());  }  if (p.getSignalD1Name().length() > 0) {    element.setAttribute("signald1name",p.getSignalD1Name());  }  if (p.getSignalD2Name().length() > 0) {    element.setAttribute("signald2name",p.getSignalD2Name());  }  if (p.getLinkedTurnoutName().length() > 0) {    element.setAttribute("linkedturnoutname",p.getLinkedTurnoutName());    element.setAttribute("linktype","" + p.getLinkType());  }  if (p.getSignalAMastName().length() > 0) {    element.addContent(new Element("signalAMast").addContent(p.getSignalAMastName()));  }  if (p.getSignalBMastName().length() > 0) {    element.addContent(new Element("signalBMast").addContent(p.getSignalBMastName()));  }  if (p.getSignalCMastName().length() > 0) {    element.addContent(new Element("signalCMast").addContent(p.getSignalCMastName()));  }  if (p.getSignalDMastName().length() > 0) {    element.addContent(new Element("signalDMast").addContent(p.getSignalDMastName()));  }  if (p.getSensorAName().length() > 0) {    element.addContent(new Element("sensorA").addContent(p.getSensorAName()));  }  if (p.getSensorBName().length() > 0) {    element.addContent(new Element("sensorB").addContent(p.getSensorBName()));  }  if (p.getSensorCName().length() > 0) {    element.addContent(new Element("sensorC").addContent(p.getSensorCName()));  }  if (p.getSensorDName().length() > 0) {    element.addContent(new Element("sensorD").addContent(p.getSensorDName()));  }  element.setAttribute("continuing","" + p.getContinuingSense());  element.setAttribute("disabled","" + (p.isDisabled() ? "yes" : "no"));  element.setAttribute("disableWhenOccupied","" + (p.isDisabledWhenOccupied() ? "yes" : "no"));  Point2D coords=p.getCoordsCenter();  element.setAttribute("xcen","" + coords.getX());  element.setAttribute("ycen","" + coords.getY());  coords=p.getCoordsA();  element.setAttribute("xa","" + coords.getX());  element.setAttribute("ya","" + coords.getY());  coords=p.getCoordsB();  element.setAttribute("xb","" + coords.getX());  element.setAttribute("yb","" + coords.getY());  coords=p.getCoordsC();  element.setAttribute("xc","" + coords.getX());  element.setAttribute("yc","" + coords.getY());  coords=p.getCoordsD();  element.setAttribute("xd","" + coords.getX());  element.setAttribute("yd","" + coords.getY());  element.setAttribute("ver","" + p.getVersion());  element.setAttribute("class",getClass().getName());  return element;}  }
class C{  public boolean isConnected(){  return server != null;}  }
class C{  public boolean shouldAllowBridgeAccess(String url){  for (  PluginEntry entry : this.entryMap.values()) {    CordovaPlugin plugin=pluginMap.get(entry.service);    if (plugin != null) {      Boolean result=plugin.shouldAllowBridgeAccess(url);      if (result != null) {        return result;      }    }  }  return url.startsWith("file://");}  }
class C{  public RoundedTransformationBuilder cornerRadiusTopLeft(float radiusPx){  mCornerRadius[0]=radiusPx;  return this;}  }
class C{  private int measureShort(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public void addPropertyChangeListener(PropertyChangeListener listener){  m_propSupport.addPropertyChangeListener(listener);}  }
class C{  @ResponseBody @RequestMapping(value="/users",method=RequestMethod.GET) public List<User> findAll() throws ServiceException, CheckException {  return this.userService.findAll();}  }
class C{  public Object jjtAccept(PartitionParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  public FastBuffer<E> append(E[] array){  return append(array,0,array.length);}  }
class C{  public void addException(final String key,final String value){  if (value == null) {    keyValueExceptions.put(key,null);  } else {    Set<String> values=MapUtils.getSet(key,keyValueExceptions);    values.add(value);  }}  }
class C{  public void removeFromCFGAndCodeOrder(BasicBlock bb){  removeFromCFG(bb);  removeFromCodeOrder(bb);}  }
class C{  public void startExec(final StartExecParams params,@Nullable MessageProcessor<LogMessage> execOutputProcessor) throws IOException {  final ExecStart execStart=new ExecStart().withDetach(params.isDetach() == Boolean.TRUE).withTty(params.isTty() == Boolean.TRUE);  byte[] entityBytesArray=toJson(execStart).getBytes(StandardCharsets.UTF_8);  try (DockerConnection connection=connectionFactory.openConnection(dockerDaemonUri).method("POST").path(apiVersionPathPrefix + "/exec/" + params.getExecId()+ "/start").header("Content-Type",MediaType.APPLICATION_JSON).header("Content-Length",entityBytesArray.length).entity(entityBytesArray)){    final DockerResponse response=connection.request();    final int status=response.getStatus();    if (status / 100 != 2) {      throw getDockerException(response);    }    if (status != NO_CONTENT.getStatusCode() && execOutputProcessor != null) {      try (InputStream responseStream=response.getInputStream()){        new LogMessagePumper(responseStream,execOutputProcessor).start();      }     }  } }  }
class C{  public double compute(long... dataset){  return computeInPlace(longsToDoubles(dataset));}  }
class C{  private static PieDataset createDataset(){  DefaultPieDataset dataset=new DefaultPieDataset();  dataset.setValue("Samsung",new Double(27.8));  dataset.setValue("Others",new Double(55.3));  dataset.setValue("Nokia",new Double(16.8));  dataset.setValue("Apple",new Double(17.1));  return dataset;}  }
class C{  @Override public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {  super.readExternal(in);  this.knnDistance=in.readDouble();}  }
class C{  public void stop(){  reporter.stop();}  }
class C{  public static CaseSwitchExpression caseSwitch(String propertyName){  return new CaseSwitchExpression(getPropExpr(propertyName));}  }
class C{  public static boolean isMasterCard(String cc){  int firstdig=Integer.parseInt(cc.substring(0,1));  int seconddig=Integer.parseInt(cc.substring(1,2));  if ((cc.length() == 16) && (firstdig == 5) && ((seconddig >= 1) && (seconddig <= 5)))   return isCreditCard(cc);  return false;}  }
class C{  public void onStart(Object proc,long memPtr){  enter();  try {    PlatformCallbackUtils.onStart(envPtr,proc,memPtr);  }  finally {    leave();  }}  }
class C{  public synchronized boolean isRunning(){  return running;}  }
class C{  public ParserException(final Exception exception){  super(exception);  setStackTrace(exception.getStackTrace());}  }
class C{  public boolean isConvex(){  boolean isPositive=false;  int num=vertices.size();  for (int i=0; i < num; i++) {    int prev=(i == 0) ? num - 1 : i - 1;    int next=(i == num - 1) ? 0 : i + 1;    Vec2D d0=vertices.get(i).sub(vertices.get(prev));    Vec2D d1=vertices.get(next).sub(vertices.get(i));    boolean newIsP=(d0.cross(d1) > 0);    if (i == 0) {      isPositive=newIsP;    } else     if (isPositive != newIsP) {      return false;    }  }  return true;}  }
class C{  public TfIdf(TermFrequencyWeight tfWeighting){  this.tfWeighting=tfWeighting;}  }
class C{  private void printRoundInfo(boolean lastRound){  if (printRounds || verbose) {    List<ClassSymbol> tlc=lastRound ? List.<ClassSymbol>nil() : topLevelClasses;    Set<TypeElement> ap=lastRound ? Collections.<TypeElement>emptySet() : annotationsPresent;    log.printLines("x.print.rounds",number,"{" + tlc.toString(", ") + "}",ap,lastRound);  }}  }
class C{  protected void saveHistory(){  int size;  int from;  int i;  String filename;  BufferedOutputStream stream;  size=Integer.parseInt(PROPERTIES.getProperty("HistorySize","50"));  from=m_CommandHistory.size() - size;  if (from < 0) {    from=0;  }  PROPERTIES.setProperty("HistorySize","" + size);  for (i=from; i < m_CommandHistory.size(); i++) {    PROPERTIES.setProperty("Command" + (i - from),m_CommandHistory.get(i));  }  try {    filename=System.getProperties().getProperty("user.home") + File.separatorChar + FILENAME;    stream=new BufferedOutputStream(new FileOutputStream(filename));    PROPERTIES.store(stream,"SimpleCLI");    stream.close();  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public Element store(Object o){  Element e=new Element("managerdefaults");  e.setAttribute("class",getClass().getName());  for (  Class<?> c : InstanceManager.getDefault(ManagerDefaultSelector.class).defaults.keySet()) {    String n=InstanceManager.getDefault(ManagerDefaultSelector.class).defaults.get(c);    Element p=new Element("setting");    Element key=new Element("key");    key.addContent(c.getName());    Element value=new Element("value");    value.addContent(n);    p.addContent(key);    p.addContent(value);    e.addContent(p);  }  return e;}  }
class C{  public ServerExecutionException(String arg0){  super(arg0);}  }
class C{  private ColumnError makeDuplicateRoleError(Entry<String,List<Integer>> roleEntry){  final String duplicateRoleMessage=I18N.getGUILabel("io.dataimport.step.data_column_configuration.error_table.column_error.duplicate_role_message",roleEntry.getKey(),listToString(roleEntry.getValue()));  return new ColumnError(roleEntry.getValue(),roleEntry.getKey(),duplicateRoleMessage);}  }
class C{  public static boolean isInit(){  if (FileDownloadManager.getFileDownloadConfiguration() == null) {    return false;  }  return getFileDownloadManager().isInit();}  }
class C{  protected RandomAccessFile init(File f) throws IOException {  RandomAccessFile inputFile=null;  try {    inputFile=new RandomAccessFile(f,"r");  } catch (  IOException i) {    if (i instanceof FileNotFoundException) {      throw i;    }    if (f.canRead()) {      BinaryFile.closeClosable();      inputFile=new RandomAccessFile(f,"r");    } else {      throw i;    }  }  return inputFile;}  }
class C{  @SuppressWarnings({"BusyWait"}) private static void test(C2<Integer,ConcurrentLinkedHashMap<Integer,Integer>,Integer> readOp,int threadCnt,double writeProportion){  assert writeProportion < 1;  ConcurrentLinkedHashMap<Integer,Integer> map=new ConcurrentLinkedHashMap<>();  CyclicBarrier barrier=new CyclicBarrier(threadCnt + 1);  Collection<TestThread> threads=new ArrayList<>(threadCnt);  for (int i=0; i < threadCnt; i++) {    TestThread thread=new TestThread(readOp,map,writeProportion,barrier);    threads.add(thread);    thread.start();  }  long start;  try {    while (barrier.getNumberWaiting() != threadCnt)     Thread.sleep(1);    barrier.await();    start=System.currentTimeMillis();    Thread.sleep(60000);  } catch (  InterruptedException ignored) {    return;  }catch (  BrokenBarrierException e) {    e.printStackTrace();    return;  }  for (  TestThread th : threads)   th.interrupt();  try {    for (    TestThread th : threads)     th.join();  } catch (  InterruptedException ignored) {    return;  }  long time=System.currentTimeMillis() - start;  long iters=0;  for (  TestThread th : threads)   iters+=th.iterations();  System.out.printf("%8s, %8d, %12d, %12d, %12d, %8.3f, %8.2f\n",readOp.toString(),threadCnt,1000 * iters / time,1000 * iters / (time * threadCnt),iters,time / (double)1000,writeProportion);}  }
class C{  private void openThriftWriter(String dictionaryFile) throws IOException {  dictionaryThriftWriter=new ThriftWriter(dictionaryFile,true);  dictionaryThriftWriter.open();}  }
class C{  protected void cancel(){  if (compute != null) {    logger.info("Cancelling computing hierarchy for domain " + root);  }}  }
class C{  public boolean isLooping(){  return loop;}  }
class C{  @Override public void onConfigurationChanged(Configuration newConfig){  super.onConfigurationChanged(newConfig);  if (this.appView == null) {    return;  }  PluginManager pm=this.appView.getPluginManager();  if (pm != null) {    pm.onConfigurationChanged(newConfig);  }}  }
class C{  public static synchronized Collection<String> allLocalIps(){  List<String> ips=new ArrayList<>(4);  try {    Enumeration<NetworkInterface> itfs=NetworkInterface.getNetworkInterfaces();    if (itfs != null) {      for (      NetworkInterface itf : asIterable(itfs)) {        if (!itf.isLoopback()) {          Enumeration<InetAddress> addrs=itf.getInetAddresses();          for (          InetAddress addr : asIterable(addrs)) {            String hostAddr=addr.getHostAddress();            if (!addr.isLoopbackAddress() && !ips.contains(hostAddr))             ips.add(hostAddr);          }        }      }    }  } catch (  SocketException ignore) {    return Collections.emptyList();  }  Collections.sort(ips);  return ips;}  }
class C{  @Override public Boolean doTask() throws Exception {  final String name=getOnlyResource();  try {    getJournal().dropIndex(name);  } catch (  NoSuchIndexException ex) {    log.warn("Index does not exist: " + name);    return Boolean.FALSE;  }  return Boolean.TRUE;}  }
class C{  public boolean isStatic(){  return invokeKind() == InvokeKind.Static;}  }
class C{  public int lastIndexOfAnyOf(final char[] c){  return lastIndexOfAnyOf(c,length());}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void main(String[] args){  runFilter(new AddValues(),args);}  }
class C{  public boolean isDataSetStriped(){  return dataSetStriped;}  }
class C{  private void reduceUsingSeed(){  List<Integer> ints=Arrays.asList(11,13,12,15);  int sum=ints.stream().reduce(10,null);  System.out.println("Total: " + sum);}  }
class C{  public int nextInt(int n){  if (n <= 0)   throw new IllegalArgumentException("n must be positive, got: " + n);  if ((n & -n) == n)   return (int)((n * (long)next(31)) >> 31);  int bits, val;  do {    bits=next(31);    val=bits % n;  } while (bits - val + (n - 1) < 0);  return val;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case SexecPackage.EXIT_STATE__STATE:    setState((ExecutionState)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  @Override protected void onActivityResult(final int requestCode,final int resultCode,final Intent intent){  super.onActivityResult(requestCode,resultCode,intent);switch (requestCode) {case GalleryFilterActivity.resultID:    onFilterChanged(GalleryFilterActivity.getFilter(intent),mDebugPrefix + "#onActivityResult from GalleryFilterActivity");  break;case ImageDetailActivityViewPager.ACTIVITY_ID:if (resultCode == ImageDetailActivityViewPager.RESULT_CHANGE) {  invalidateDirectories(mDebugPrefix + "#onActivityResult from ImageDetailActivityViewPager");}break;case GeoEditActivity.RESULT_ID:if (resultCode == ImageDetailActivityViewPager.RESULT_CHANGE) {invalidateDirectories(mDebugPrefix + "#onActivityResult from GeoEditActivity");}break;default :break;}}  }
class C{  public boolean removeHeaderView(View v){  if (mHeaderViewInfos.size() > 0) {    boolean result=false;    ListAdapter adapter=getAdapter();    if (adapter != null && ((HeaderViewGridAdapter)adapter).removeHeader(v)) {      result=true;    }    removeFixedViewInfo(v,mHeaderViewInfos);    return result;  }  return false;}  }
class C{  public DrawerBuilder withSavedInstance(Bundle savedInstance){  this.mSavedInstance=savedInstance;  return this;}  }
class C{  public static String unescapeJava(String str){  if (str == null) {    return null;  }  try {    StringWriter writer=new StringWriter(str.length());    unescapeJava(writer,str);    return writer.toString();  } catch (  IOException ioe) {    ioe.printStackTrace();    return null;  }}  }
class C{  private static void initializeDefaultLAF(Properties swingProps){  if (getLAFState().lookAndFeel != null) {    return;  }  String lafName=null;  HashMap lafData=(HashMap)AppContext.getAppContext().remove("swing.lafdata");  if (lafData != null) {    lafName=(String)lafData.remove("defaultlaf");  }  if (lafName == null) {    lafName=getCrossPlatformLookAndFeelClassName();  }  lafName=swingProps.getProperty(defaultLAFKey,lafName);  try {    setLookAndFeel(lafName);  } catch (  Exception e) {    throw new Error("Cannot load " + lafName);  }  if (lafData != null) {    for (    Object key : lafData.keySet()) {      UIManager.put(key,lafData.get(key));    }  }}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws IOException {  Iterator<Map.Entry<K,V>> i=entrySet().iterator();  s.defaultWriteObject();  s.writeInt(table.length);  s.writeInt(size);  while (i.hasNext()) {    Map.Entry<K,V> e=i.next();    s.writeObject(e.getKey());    s.writeObject(e.getValue());  }}  }
class C{  public final AlertDialog initiateScan(int cameraId){  return initiateScan(ALL_CODE_TYPES,cameraId);}  }
class C{  private void commitSOMNetworkFieldValues(){  ((SOMNetwork)som).getSom().setInitAlpha(Double.parseDouble(tfAlpha.getText()));  ((SOMNetwork)som).getSom().setInitNeighborhoodSize(Double.parseDouble(tfInitNeighborhoodSize.getText()));  ((SOMNetwork)som).getSom().setAlphaDecayRate(Double.parseDouble(tfAlphaDecayRate.getText()));  ((SOMNetwork)som).getSom().setNeighborhoodDecayAmount(Double.parseDouble(tfNeigborhoodDecayAmount.getText()));}  }
class C{  byte[] createPacket(String s){  byte b[]=StringUtil.bytesFromHexString(s);  if (b.length == 0) {    return null;  }  return b;}  }
class C{  public static void throwException(QueryException exception,MariaDbConnection connection,java.sql.Statement statement) throws SQLException {  SQLException sqlException=get(exception);  String sqlState=exception.getSqlState();  SqlStates state=SqlStates.fromString(sqlState);  if (connection != null) {    if (state.equals(SqlStates.CONNECTION_EXCEPTION)) {      connection.setHostFailed();      if (connection.pooledConnection != null) {        connection.pooledConnection.fireConnectionErrorOccured(sqlException);      }    } else     if (connection.pooledConnection != null && statement != null) {      connection.pooledConnection.fireStatementErrorOccured(statement,sqlException);    }  }  throw sqlException;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(7);  newVector.addElement(new Option("\tIf set, average estimate is used rather " + "than one estimate from pooled predictions.\n","A",0,"-A"));  newVector.addElement(new Option("\t" + lookAheadIterationsTipText() + "\n"+ "\t(default 50)","L",1,"-L <num>"));  newVector.addElement(new Option("\t" + poolSizeTipText() + "\n\t(default 1)","P",1,"-P <int>"));  newVector.addElement(new Option("\t" + numThreadsTipText() + "\n"+ "\t(default 1)","E",1,"-E <int>"));  newVector.addElement(new Option("\t" + stepSizeTipText() + "\n"+ "\t(default 1)","I",1,"-I <num>"));  newVector.addElement(new Option("\tNumber of folds for cross-validation.\n" + "\t(default 10)","F",1,"-F <num>"));  newVector.addElement(new Option("\tNumber of runs for cross-validation.\n" + "\t(default 1)","R",1,"-R <num>"));  newVector.addElement(new Option("\tFull name of base classifier.\n" + "\t(default: " + defaultIterativeClassifierString() + ")","W",1,"-W"));  List<String> metrics=EvaluationMetricHelper.getAllMetricNames();  StringBuilder b=new StringBuilder();  int length=0;  for (  String m : metrics) {    b.append(m.toLowerCase()).append(",");    length+=m.length();    if (length >= 60) {      b.append("\n\t");      length=0;    }  }  newVector.addElement(new Option("\tEvaluation metric to optimise (default rmse). Available metrics:\n\t" + b.substring(0,b.length() - 1),"metric",1,"-metric <name>"));  newVector.addElement(new Option("\tClass value index to optimise. Ignored for all but information-retrieval\n\t" + "type metrics (such as roc area). If unspecified (or a negative value is supplied),\n\t" + "and an information-retrieval metric is specified, then the class-weighted average\n\t"+ "metric used. (default -1)","class-value-index",1,"-class-value-index <0-based index>"));  newVector.addAll(Collections.list(super.listOptions()));  newVector.addElement(new Option("","",0,"\nOptions specific to classifier " + m_IterativeClassifier.getClass().getName() + ":"));  newVector.addAll(Collections.list(((OptionHandler)m_IterativeClassifier).listOptions()));  return newVector.elements();}  }
class C{  @Deprecated public Elide(AuditLogger auditLogger,DataStore dataStore){  this(auditLogger,dataStore,new EntityDictionary(new HashMap<>()));}  }
class C{  protected SecretKey engineGenerateKey(){  if (this.random == null) {    this.random=SunJCE.getRandom();  }  byte[] keyBytes=new byte[this.keysize];  this.random.nextBytes(keyBytes);  return new SecretKeySpec(keyBytes,"HmacSHA1");}  }
class C{  public Entry(final String id,final String name,final long size){  this.id=id;  this.name=name;  this.size=size;  this.error=null;}  }
class C{  public boolean isFinished(){  if (ga != null && ga.isFinished())   return true;  boolean isFinished=false;switch (Properties.LOCAL_SEARCH_BUDGET_TYPE) {case FITNESS_EVALUATIONS:    isFinished=fitnessEvaluations >= Properties.LOCAL_SEARCH_BUDGET;  break;case SUITES:isFinished=suites >= Properties.LOCAL_SEARCH_BUDGET;break;case STATEMENTS:isFinished=MaxStatementsStoppingCondition.getNumExecutedStatements() > executedStart + Properties.LOCAL_SEARCH_BUDGET;break;case TESTS:isFinished=tests >= Properties.LOCAL_SEARCH_BUDGET;break;case TIME:isFinished=System.currentTimeMillis() > endTime;break;default :throw new RuntimeException("Unknown budget type: " + Properties.LOCAL_SEARCH_BUDGET_TYPE);}if (isFinished) {logger.info("Local search budget used up; type: " + Properties.LOCAL_SEARCH_BUDGET_TYPE);}return isFinished;}  }
class C{  public Integer evaluate(float fraction,Integer startValue,Integer endValue){  int startInt=startValue;  return (int)(startInt + fraction * (endValue - startInt));}  }
class C{  public void addHeaderView(View v){  addHeaderView(v,null,true);}  }
class C{  public String maxInstNumTipText(){  return "The upper boundary for instances per cluster.";}  }
class C{  public boolean enclosesFineGrained(IJavaElement element){  if ((this.subTypes == null) && this.allowMemberAndEnclosingTypes)   return true;  return encloses(element,null);}  }
class C{  protected String processCommand(final String command,final Map<String,String> environment,final byte[][] fileData){  logger.info(LogMarker.CONFIG,"Processing Command ({}) with Environment ({}) having File Data ({})...",command,environment,(fileData != null));  return getManagingMemberMXBean().processCommand(command,environment,ArrayUtils.toByteArray(fileData));}  }
class C{  public static WifiP2pUpnpServiceRequest newInstance(String st){  if (st == null) {    throw new IllegalArgumentException("search target cannot be null");  }  StringBuffer sb=new StringBuffer();  sb.append(String.format("%02x",WifiP2pUpnpServiceInfo.VERSION_1_0));  sb.append(WifiP2pServiceInfo.bin2HexStr(st.getBytes()));  return new WifiP2pUpnpServiceRequest(sb.toString());}  }
class C{  public TextUndoManager(){}  }
class C{  private void onConnectingFailed(String reason){  connectNotification.setTitle(machineLocale.targetsViewConnectError(selectedTarget.getName()));  if (reason != null) {    connectNotification.setContent(reason);  }  connectNotification.setStatus(StatusNotification.Status.FAIL);  updateButtons(false);}  }
class C{  public void removeConnection(Connection connection){  connections.remove(connection.handle());  persistence.deleteConnection(connection);}  }
class C{  private void saveCiClasses(){  try {    FileOutputStream fileOut=new FileOutputStream(CI_CLASSES_BASEPATH + CI_CLASSES_FILENAME);    ObjectOutputStream out=new ObjectOutputStream(fileOut);    out.writeObject(this.ciClasses);    out.close();    fileOut.close();  } catch (  IOException ioe) {    ioe.printStackTrace(System.err);  }}  }
class C{  public void firePropertyChange(String propertyName,int oldValue,int newValue){}  }
class C{  public static <T>int binarySearchCeil(List<? extends Comparable<? super T>> list,T key,boolean inclusive,boolean stayInBounds){  int index=Collections.binarySearch(list,key);  index=index < 0 ? ~index : (inclusive ? index : (index + 1));  return stayInBounds ? Math.min(list.size() - 1,index) : index;}  }
class C{  public Word prepareWord(){  return null;}  }
class C{  public GridClientFutureAdapter(){}  }
class C{  public static String toString(URL url,Charset encoding) throws IOException {  InputStream inputStream=url.openStream();  try {    return toString(inputStream,encoding);  }  finally {    inputStream.close();  }}  }
class C{  public Bundler putParcelableArrayList(String key,ArrayList<? extends Parcelable> value){  bundle.putParcelableArrayList(key,value);  return this;}  }
class C{  public UUID(long mostSigBits,long leastSigBits){  this.mostSigBits=mostSigBits;  this.leastSigBits=leastSigBits;  init();}  }
class C{  public Rule(String id,RuleType ruleType){  this.id=id;  this.ruleType=ruleType;  cases=new ArrayList<RuleCase>();}  }
class C{  public final CC push(Float weightX,Float weightY){  return pushX(weightX).pushY(weightY);}  }
class C{  public Tradingday findTradingdayById(final Integer id) throws PersistentModelException {  Tradingday instance=m_tradingdayHome.findTradingdayById(id);  if (null == instance)   throw new PersistentModelException("Tradingday not found for id: " + id);  return instance;}  }
class C{  protected SVGOMAElement(){}  }
class C{  @Step("Asserting element {1} is clickable after {2} seconds") public static void assertElementIsClickableAfter(AugmentedFunctions driver,By by,int timeoutInSeconds){  Preconditions.checkNotNull(driver);  Preconditions.checkNotNull(by);  try {    driver.findElementClickableAfter(by,timeoutInSeconds);  } catch (  TimeoutException e) {    throw new AssertionError(String.format("Element %s is not clickable after %s seconds",by,timeoutInSeconds),e);  }}  }
class C{  public static void main(String... args) throws IOException {  new Listener().test(args);}  }
class C{  private void insert(String key,RadixTreeNode<T> node,T value) throws DuplicateKeyException {  int numberOfMatchingCharacters=node.getNumberOfMatchingCharacters(key);  if (node.getKey().equals("") == true || numberOfMatchingCharacters == 0 || (numberOfMatchingCharacters < key.length() && numberOfMatchingCharacters >= node.getKey().length())) {    boolean flag=false;    String newText=key.substring(numberOfMatchingCharacters,key.length());    for (    RadixTreeNode<T> child : node.getChildern()) {      if (child.getKey().startsWith(newText.charAt(0) + "")) {        flag=true;        insert(newText,child,value);        break;      }    }    if (flag == false) {      RadixTreeNode<T> n=new RadixTreeNode<T>();      n.setKey(newText);      n.setReal(true);      n.setValue(value);      node.getChildern().add(n);    }  } else   if (numberOfMatchingCharacters == key.length() && numberOfMatchingCharacters == node.getKey().length()) {    if (node.isReal() == true) {      throw new DuplicateKeyException("Duplicate key");    }    node.setReal(true);    node.setValue(value);  } else   if (numberOfMatchingCharacters > 0 && numberOfMatchingCharacters < node.getKey().length()) {    RadixTreeNode<T> n1=new RadixTreeNode<T>();    n1.setKey(node.getKey().substring(numberOfMatchingCharacters,node.getKey().length()));    n1.setReal(node.isReal());    n1.setValue(node.getValue());    n1.setChildern(node.getChildern());    node.setKey(key.substring(0,numberOfMatchingCharacters));    node.setReal(false);    node.setChildern(new ArrayList<RadixTreeNode<T>>());    node.getChildern().add(n1);    if (numberOfMatchingCharacters < key.length()) {      RadixTreeNode<T> n2=new RadixTreeNode<T>();      n2.setKey(key.substring(numberOfMatchingCharacters,key.length()));      n2.setReal(true);      n2.setValue(value);      node.getChildern().add(n2);    } else {      node.setValue(value);      node.setReal(true);    }  } else {    RadixTreeNode<T> n=new RadixTreeNode<T>();    n.setKey(node.getKey().substring(numberOfMatchingCharacters,node.getKey().length()));    n.setChildern(node.getChildern());    n.setReal(node.isReal());    n.setValue(node.getValue());    node.setKey(key);    node.setReal(true);    node.setValue(value);    node.getChildern().add(n);  }}  }
class C{  public void resetLearningImpl(){  this.initialisePerceptron=true;  this.reset();}  }
class C{  public static MultiLabelInstances convertMekaInstancesToMulanInstances(Instances instances) throws InvalidDataFormatException {  LabelsMetaDataImpl labelsMetaDataImpl=new LabelsMetaDataImpl();  for (int i=0; i < instances.classIndex(); i++) {    String classAttName=instances.attribute(i).name();    LabelNodeImpl labelNodeImpl=new LabelNodeImpl(classAttName);    labelsMetaDataImpl.addRootNode(labelNodeImpl);  }  return new MultiLabelInstances(instances,labelsMetaDataImpl);}  }
class C{  protected void dispatchKeyEvent(String eventType,GraphicsNodeKeyEvent evt){  FocusManager fmgr=context.getFocusManager();  if (fmgr == null)   return;  Element targetElement=(Element)fmgr.getCurrentEventTarget();  if (targetElement == null) {    targetElement=context.getDocument().getDocumentElement();  }  DocumentEvent d=(DocumentEvent)targetElement.getOwnerDocument();  DOMKeyEvent keyEvt=(DOMKeyEvent)d.createEvent("KeyEvents");  keyEvt.initKeyEvent(eventType,true,true,evt.isControlDown(),evt.isAltDown(),evt.isShiftDown(),evt.isMetaDown(),mapKeyCode(evt.getKeyCode()),evt.getKeyChar(),null);  try {    ((EventTarget)targetElement).dispatchEvent(keyEvt);  } catch (  RuntimeException e) {    ua.displayError(e);  }}  }
class C{  protected int defaultNumAttributes(){  return 10;}  }
class C{  protected void writePalette() throws IOException {  out.write(colorTab,0,colorTab.length);  int n=(3 * 256) - colorTab.length;  for (int i=0; i < n; i++) {    out.write(0);  }}  }
class C{  public boolean isUnion(){  return false;}  }
class C{  public static final void writeMapXml(Map val,String name,XmlSerializer out) throws XmlPullParserException, IOException {  if (val == null) {    out.startTag(null,"null");    out.endTag(null,"null");    return;  }  Set s=val.entrySet();  Iterator i=s.iterator();  out.startTag(null,"map");  if (name != null) {    out.attribute(null,"name",name);  }  while (i.hasNext()) {    Map.Entry e=(Map.Entry)i.next();    writeValueXml(e.getValue(),(String)e.getKey(),out);  }  out.endTag(null,"map");}  }
class C{  public static void removePlayer(final String playerName,final String zoneName){  removePlayer(playerName,MockStendlRPWorld.get().getZone(zoneName));}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public ServiceDiscovery registerServiceImporter(ServiceImporter importer,JsonObject configuration){  ServiceDiscovery ret=ServiceDiscovery.newInstance(delegate.registerServiceImporter((io.vertx.servicediscovery.spi.ServiceImporter)importer.getDelegate(),configuration));  return ret;}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public static final byte[] inputStreamToBuffer(final InputStream iStream,final int offset){  try {    int i;    final ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream(1024);    byte[] buffer=new byte[1024];    if (offset > 0) {      byte[] discard=new byte[offset];      iStream.read(discard);      discard=null;    }    while ((i=iStream.read(buffer)) != -1) {      byteArrayOutputStream.write(buffer,0,i);    }    iStream.close();    return byteArrayOutputStream.toByteArray();  } catch (  final IOException e) {    if (Cfg.EXCEPTION) {      Check.log(e);    }    if (Cfg.DEBUG) {      Check.log(e);    }    if (Cfg.DEBUG) {      Check.log(TAG + " IOException() caught in Utils.RawResourceToBuffer()");    }    return null;  }}  }
class C{  private String cleanupPathElement(String path){  return path.endsWith(File.separator) ? path : (path + File.separator);}  }
class C{  public static HandlerLibrary load(){  HandlerLibrary lib=new HandlerLibrary();  loadAnnotationHandlers(lib);  loadVisitorHandlers(lib);  lib.calculatePriorities();  return lib;}  }
class C{  @Override public void featurizePhrase(AlignmentTemplateInstance alTemp,AlignmentGrid alGrid){}  }
class C{  public String toStringSimple(final int depth,final boolean titles,final boolean joinDetails){  final String ZE="0";  final String NA="0";  final String DZ="0";  final long solutionCount=this.solutionCount.get();  final String solutionCountStr=solutionCount == 0 ? ZE : "" + solutionCount;  final String solutionsPerSec=(solutionCount == 0 ? NA : (elapsed == 0L ? DZ : "" + (long)(solutionCount * 1000d / elapsed)));  final long mutationCount=this.mutationCount.get();  final String mutationCountStr=mutationCount == 0 ? ZE : "" + mutationCount;  final String mutationsPerSec=(mutationCount == 0 ? NA : (elapsed == 0L ? DZ : "" + (long)(mutationCount * 1000d / elapsed)));  final String q="";  final StringBuilder sb=new StringBuilder();  final String ruleNameStr="\"" + depthStr.substring(0,depth) + name.replace(",","")+ (closureRound == 0 ? "" : " round#" + closureRound)+ "\"";  final DateFormat dateFormat=DateFormat.getDateTimeInstance(DateFormat.MEDIUM,DateFormat.MEDIUM);  final String dateStr=dateFormat.format(startTime).replace(",","");  sb.append((titles ? "startTime=" : "") + dateStr);  sb.append(sep + (titles ? "rule=" : "") + ruleNameStr);  sb.append(sep + (titles ? "elapsed=" : "") + elapsed);  sb.append(sep + (titles ? "solutionCount=" : "") + solutionCountStr);  sb.append(sep + (titles ? "solutions/sec=" : "") + solutionsPerSec);  sb.append(sep + (titles ? "mutationCount=" : "") + mutationCountStr);  sb.append(sep + (titles ? "mutations/sec=" : "") + mutationsPerSec);  if (!aggregation) {    if (!joinDetails) {      sb.append(sep + (titles ? "evalOrder=" : "") + q+ toString(evalOrder)+ q);      sb.append(sep + (titles ? "keyOrder=" : "") + q+ toString(keyOrder)+ q);      sb.append(sep + (titles ? "nvars=" : "") + q+ toString(nvars)+ q);      sb.append(sep + (titles ? "rangeCount=" : "") + q+ toString(rangeCount)+ q);      sb.append(sep + (titles ? "chunkCount=" : "") + q+ toString(chunkCount)+ q);      sb.append(sep + (titles ? "elementCount=" : "") + q+ toString(elementCount)+ q);      sb.append(sep + (titles ? "subqueryCount=" : "") + q+ toString(subqueryCount)+ q);    } else {      final IRule r=(IRule)rule;      final int tailCount=r.getTailCount();      for (int tailIndex=0; tailIndex < tailCount; tailIndex++) {        if (tailIndex > 0)         sb.append("\n" + dateStr + sep+ ruleNameStr+ (sep + sep + sep+ sep+ sep));        final int i=showInEvalOrder ? evalOrder[tailIndex] : tailIndex;        final int orderIndex=showInEvalOrder ? tailIndex : permutation[i];        sb.append(sep + orderIndex);        sb.append(sep + keyOrder[i]);        sb.append(sep + nvars[i]);        sb.append(sep + rangeCount[i]);        sb.append(sep + chunkCount[i]);        sb.append(sep + elementCount[i]);        sb.append(sep + subqueryCount[i]);        sb.append(sep + i);        sb.append(sep + "\"" + toString(r.getTail(i)).replace(","," ")+ "\"");      }    }  }  return sb.toString();}  }
class C{  public BalloonResizeController(WorldWindow wwd,Balloon balloon){  if (wwd == null) {    String message=Logging.getMessage("nullValue.WorldWindow");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (balloon == null) {    String message=Logging.getMessage("nullValue.BalloonIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.wwd=wwd;  this.balloon=balloon;  this.wwd.addSelectListener(this);  this.wwd.getInputHandler().addMouseMotionListener(this);}  }
class C{  public boolean isEmpty(){  return m_size == 0;}  }
class C{  public static boolean testRayTriangleFront(Vector3d origin,Vector3d dir,Vector3d v0,Vector3d v1,Vector3d v2,double epsilon){  return testRayTriangleFront(origin.x,origin.y,origin.z,dir.x,dir.y,dir.z,v0.x,v0.y,v0.z,v1.x,v1.y,v1.z,v2.x,v2.y,v2.z,epsilon);}  }
class C{  public static ActionBarBackground fadeDrawable(AppCompatActivity activity,Drawable newDrawable){  ActionBarBackground abColor=new ActionBarBackground(activity);  abColor.fadeBackground(newDrawable);  return abColor;}  }
class C{  private void finish(){  getActivity().onBackPressed();}  }
class C{  protected boolean isConnectionOpen(HttpServletRequest request){  return true;}  }
class C{  @CanIgnoreReturnValue @Override public Builder<K,V> put(Entry<? extends K,? extends V> entry){  builderMultimap.put(checkNotNull(entry.getKey()),checkNotNull(entry.getValue()));  return this;}  }
class C{  public static final boolean isIplIdentityQueryMessage(LocoNetMessage m){  if ((m.getElement(0) == LnConstants.OPC_PEER_XFER) && (m.getElement(1) == LnConstants.RE_IPL_OP_LEN)) {    if (m.getElement(2) == LnConstants.RE_IPL_IDENTITY_OPERATION) {      if (m.getElement(3) == LnConstants.RE_IPL_OP_QUERY) {        return true;      }    }  }  return false;}  }
class C{  @Override public boolean hasCustomName(){  return displayName != null;}  }
class C{  public static void v(String msg,Throwable cause){  Log.v(LOG_TAG,msg,cause);}  }
class C{  public int clearBytesWritten(){  return dos.clearWritten();}  }
class C{  public NotificationChain basicSetCheck(Check newCheck,NotificationChain msgs){  Check oldCheck=check;  check=newCheck;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,SexecPackage.IF__CHECK,oldCheck,newCheck);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public static String changeToNewSelectedPreviewColor(final String colorPickedPreview){  return new StringBuilder().append(NEW_PREVIEW_COLOR_REMOVE_SCRIPT).append(NEW_PREVIEW_COLOR_CREATE_SCRIPT).append("var newColorPreviewStyle = \".v-app .new-tag-name{ border: solid 3px ").append(colorPickedPreview).append(" !important; width:138px; margin-left:2px !important; box-shadow:none !important; } \"; ").append("newColorPreviewStyle = newColorPreviewStyle + \".v-app .new-tag-desc{ border: solid 3px ").append(colorPickedPreview).append(" !important; width:138px; height:75px !important; margin-top:4px !important; margin-left:2px !important;;box-shadow:none !important;} \"; ").append(NEW_PREVIEW_COLOR_SET_STYLE_SCRIPT).toString();}  }
class C{  public boolean addSubAction(final ConfAction actionConf) throws GeneralException, ConfigurationException {  if (actionConf.getType() != null) {    final SubAction sub=SubAction.factory(actionConf.getType(),actionConf);    if (sub == null) {      if (Cfg.DEBUG) {        Check.log(TAG + " Error (addSubAction): unknown type: " + actionConf.getType());      }      return false;    }    list.add(sub);    if (sub instanceof SubActionSlow) {      setQueue(MAIN_QUEUE);    }    return true;  } else {    if (Cfg.DEBUG) {      Check.log(TAG + " Error (addSubAction): null type ");    }    return false;  }}  }
class C{  public boolean isError(){  return SPIN.Error.equals(getLevel()) || SPIN.Fatal.equals(getLevel());}  }
class C{  public JumpingSolitaireState(boolean[] pre){  if (pre.length < 10) {    throw new IllegalArgumentException("invalid triangle problem size. Must be >= 10");  }  k=pre.length;  int adjust=0;  if ((int)(Math.sqrt(k)) * (int)(Math.sqrt(k)) == k) {    adjust=1;  }  r=adjust + 1 + (int)(Math.ceil(Math.sqrt(k)));  filled=new boolean[k];  for (int i=0; i < filled.length; i++) {    filled[i]=pre[i];  }  computeMoves();}  }
class C{  public HashCodeBuilder append(long value){  iTotal=iTotal * iConstant + ((int)(value ^ (value >> 32)));  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.716 -0400",hash_original_method="F488C8683BAD79FEBB225BED0B2508A5",hash_generated_method="A3F7457ABB3A44E256A7D31F35B4F200") private char map(char ch){  int index=ch - 'A';  if (index < 0 || index >= this.getSoundexMapping().length) {    throw new IllegalArgumentException("The character is not mapped: " + ch);  }  return this.getSoundexMapping()[index];}  }
class C{  public FastAdapterBottomSheetDialog<Item> add(List<Item> items){  mFastItemAdapter.add(items);  return this;}  }
class C{  private static void long_to_bytes(long anUnsignedInt,byte[] buf,int offset){  buf[offset]=(byte)((anUnsignedInt & 0xFF000000L) >>> 24);  buf[offset + 1]=(byte)((anUnsignedInt & 0x00FF0000L) >>> 16);  buf[offset + 2]=(byte)((anUnsignedInt & 0x0000FF00L) >>> 8);  buf[offset + 3]=(byte)((anUnsignedInt & 0x000000FFL));}  }
class C{  private static void createAndShowGUI(boolean showUI){  JFrame frame=new JFrame("FileChooserDemo");  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  frame.add(new FileChooser(null));  frame.pack();  frame.setVisible(showUI);}  }
class C{  public void addSatallite(SatelliteBase satallite){  satallites.add(satallite);  if (satallite.canTick())   tickingSatallites.add(satallite);}  }
class C{  @Override public double distance(NumberVector v1,NumberVector v2){  final double pcc=PearsonCorrelation.weightedCoefficient(v1,v2,weights);  return 1 - pcc * pcc;}  }
class C{  private StringBuilder spacer(int spaces){  StringBuilder sb=new StringBuilder();  for (int i=0; i < spaces; i++) {    sb.append(" ");  }  return sb;}  }
class C{  @Nullable public static <T>CloseableReference<T> cloneOrNull(@Nullable CloseableReference<T> ref){  return (ref != null) ? ref.cloneOrNull() : null;}  }
class C{  protected void fillToolbar(){  ToolBarManager toolBarManager=getToolBarManager();  if (toolBarManager == null)   return;  fInput.fillToolBar(toolBarManager,this);  toolBarManager.update(true);}  }
class C{  public Integer inactivityTimeout(){  return inactivityTimeout;}  }
class C{  public IntList(int initialCapacity){  array=new int[initialCapacity];}  }
class C{  @Override public boolean dispatchTouchEvent(MotionEvent ev){  int action=MotionEventCompat.getActionMasked(ev);  if (stopScrollWhenTouch) {    if ((action == MotionEvent.ACTION_DOWN) && isAutoScroll) {      isStopByTouch=true;      stopAutoScroll();    } else     if (ev.getAction() == MotionEvent.ACTION_UP && isStopByTouch) {      startAutoScroll();    }  }  if (slideBorderMode == SLIDE_BORDER_MODE_TO_PARENT || slideBorderMode == SLIDE_BORDER_MODE_CYCLE) {    touchX=ev.getX();    if (ev.getAction() == MotionEvent.ACTION_DOWN) {      downX=touchX;    }    int currentItem=getCurrentItem();    PagerAdapter adapter=getAdapter();    int pageCount=adapter == null ? 0 : adapter.getCount();    if ((currentItem == 0 && downX <= touchX) || (currentItem == pageCount - 1 && downX >= touchX)) {      if (slideBorderMode == SLIDE_BORDER_MODE_TO_PARENT) {        getParent().requestDisallowInterceptTouchEvent(false);      } else {        if (pageCount > 1) {          setCurrentItem(pageCount - currentItem - 1,isBorderAnimation);        }        getParent().requestDisallowInterceptTouchEvent(true);      }      return super.dispatchTouchEvent(ev);    }  }  getParent().requestDisallowInterceptTouchEvent(true);  return super.dispatchTouchEvent(ev);}  }
class C{  public DimensionProperties generateRandom(int starId,String name,int baseAtmosphere,int baseDistance,int baseGravity,int atmosphereFactor,int distanceFactor,int gravityFactor){  DimensionProperties properties=new DimensionProperties(getNextFreeDim());  if (name == "")   properties.setName(getNextName(properties.getId())); else {    properties.setName(name);  }  properties.setAtmosphereDensityDirect(MathHelper.clamp_int(baseAtmosphere + random.nextInt(atmosphereFactor) - atmosphereFactor / 2,0,200));  properties.orbitalDist=MathHelper.clamp_int(baseDistance + random.nextInt(distanceFactor),0,200);  properties.gravitationalMultiplier=Math.min(Math.max(0.05f,(baseGravity + random.nextInt(gravityFactor) - gravityFactor / 2) / 100f),1.3f);  double minDistance;  do {    minDistance=Double.MAX_VALUE;    properties.orbitTheta=random.nextInt(360) * (2f * Math.PI) / 360f;    for (    IDimensionProperties properties2 : sol.getPlanets()) {      double dist=Math.abs(((DimensionProperties)properties2).orbitTheta - properties.orbitTheta);      if (dist < minDistance)       minDistance=dist;    }  } while (minDistance < (Math.PI / 40f));  properties.setStar(getStar(starId));  properties.averageTemperature=(properties.getStar().getTemperature() + (100 - properties.orbitalDist) * 15 + properties.getAtmosphereDensity() * 18) / 20;  properties.addBiomes(properties.getViableBiomes());  registerDim(properties,true);  return properties;}  }
class C{  public NTRUEncryptionParameters(InputStream is) throws IOException {  DataInputStream dis=new DataInputStream(is);  N=dis.readInt();  q=dis.readInt();  df=dis.readInt();  df1=dis.readInt();  df2=dis.readInt();  df3=dis.readInt();  db=dis.readInt();  dm0=dis.readInt();  c=dis.readInt();  minCallsR=dis.readInt();  minCallsMask=dis.readInt();  hashSeed=dis.readBoolean();  oid=new byte[3];  dis.read(oid);  sparse=dis.readBoolean();  fastFp=dis.readBoolean();  polyType=dis.read();  String alg=dis.readUTF();  if ("SHA-512".equals(alg)) {    hashAlg=new SHA512Digest();  } else   if ("SHA-256".equals(alg)) {    hashAlg=new SHA256Digest();  }  init();}  }
class C{  public void addFile(File file){  fileList.addFirst(file);}  }
class C{  public void init(StateMachineExecutor executor){  this.executor=Assert.notNull(executor,"executor");  this.context=executor.context();  this.clock=context.clock();  this.sessions=context.sessions();  if (this instanceof SessionListener) {    executor.context().sessions().addListener((SessionListener)this);  }  configure(executor);}  }
class C{  public FolderTokenDivider findById(int id) throws Exception {  int idx;  FolderTokenDivider div=null;  idx=super.findIndexById(id);  if (idx == -1) {    throw new IeciTdException(FolderBaseError.EC_NOT_FOUND,FolderBaseError.EM_NOT_FOUND);  }  div=get(idx);  return div;}  }
class C{  private void processOnline(){  log.config("");  if (!checkMandatory())   return;  boolean approved=false;  String info="";  ValueNamePair vp=paymentCombo.getSelectedItem().toValueNamePair();  String PaymentRule=vp.getValue();  if (PaymentRule.equals(X_C_Order.PAYMENTRULE_CreditCard)) {    vp=kTypeCombo.getSelectedItem().toValueNamePair();    String CCType=vp.getValue();    m_mPayment.setCreditCard(MPayment.TRXTYPE_Sales,CCType,kNumberField.getText(),"",kExpField.getText());    m_mPayment.setAmount(m_C_Currency_ID,m_Amount);    m_mPayment.setPaymentProcessor();    m_mPayment.setC_BPartner_ID(m_C_BPartner_ID);    int C_Invoice_ID=Env.getContextAsInt(Env.getCtx(),m_WindowNo,"C_Invoice_ID");    if (C_Invoice_ID == 0 && m_DocStatus.equals("CO")) {      int C_Order_ID=Env.getContextAsInt(Env.getCtx(),m_WindowNo,"C_Order_ID");      C_Invoice_ID=getInvoiceID(C_Order_ID);    }    m_mPayment.setC_Invoice_ID(C_Invoice_ID);    m_mPayment.setDateTrx(m_DateAcct);    m_mPayment.setAmount(m_C_Currency_ID,m_Amount);    if (!m_mPayment.save()) {      FDialog.error(m_WindowNo,this,"PaymentError","PaymentNotCreated");    } else {      approved=m_mPayment.processOnline();      info=m_mPayment.getR_RespMsg() + " (" + m_mPayment.getR_AuthCode()+ ") ID="+ m_mPayment.getR_PnRef();      m_mPayment.saveEx();      if (approved) {        boolean ok=m_mPayment.processIt(DocAction.ACTION_Complete);        m_mPayment.saveEx();        if (ok)         FDialog.info(m_WindowNo,this,"PaymentProcessed",info + "\n" + m_mPayment.getDocumentNo()); else         FDialog.error(m_WindowNo,this,"PaymentError","PaymentNotCreated");        saveChanges();      } else {        FDialog.error(m_WindowNo,this,"PaymentNotProcessed",info);      }    }  } else   FDialog.error(m_WindowNo,this,"PaymentNoProcessor");}  }
class C{  public static byte[] intToRegisters(int v){  byte[] registers=new byte[4];  registers[0]=(byte)(0xff & (v >> 24));  registers[1]=(byte)(0xff & (v >> 16));  registers[2]=(byte)(0xff & (v >> 8));  registers[3]=(byte)(0xff & v);  return registers;}  }
class C{  public void append(KeyStoreState keyStoreState){  keyStoreState.previous=this;  this.next=keyStoreState;  keyStoreState.setAsCurrentState();}  }
class C{  @Override public synchronized void connectionNotification(String eventName,Object source){  if (connectionAllowed(eventName)) {    m_listenees.put(eventName,source);    if (m_Filter instanceof ConnectionNotificationConsumer) {      ((ConnectionNotificationConsumer)m_Filter).connectionNotification(eventName,source);    }  }}  }
class C{  public void testNtlmAuth() throws Exception {  startServer(47501);  fetchPage("/ntlm.jsp",200);}  }
class C{  public void replaceCredentials(HomeserverConnectionConfig config){  if (null != config && config.getCredentials() != null) {    SharedPreferences prefs=mContext.getSharedPreferences(PREFS_LOGIN,Context.MODE_PRIVATE);    SharedPreferences.Editor editor=prefs.edit();    ArrayList<HomeserverConnectionConfig> configs=getCredentialsList();    ArrayList<JSONObject> serialized=new ArrayList<>(configs.size());    boolean found=false;    try {      for (      HomeserverConnectionConfig c : configs) {        if (c.getCredentials().userId.equals(config.getCredentials().userId)) {          serialized.add(config.toJson());          found=true;        } else {          serialized.add(c.toJson());        }      }    } catch (    JSONException e) {      throw new RuntimeException("Failed to serialize connection config");    }    if (!found)     return;    String ser=new JSONArray(serialized).toString();    Log.d(LOG_TAG,"Storing " + serialized.size() + " credentials");    editor.putString(PREFS_KEY_CONNECTION_CONFIGS,ser);    editor.apply();  }}  }
class C{  static void accumSingleSeg(int counts[],SortedDocValues si,DocIdSetIterator disi,int subIndex,OrdinalMap map) throws IOException {  final int segCounts[];  if (map == null) {    segCounts=counts;  } else {    segCounts=new int[1 + si.getValueCount()];  }  int doc;  while ((doc=disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {    if (si.advanceExact(doc)) {      segCounts[1 + si.ordValue()]++;    } else {      segCounts[0]++;    }  }  if (map != null) {    migrateGlobal(counts,segCounts,subIndex,map);  }}  }
class C{  private void doTestEnded(String identifier,boolean testPassed){  ParsedTestInfo parsedResults=parseTestIdentifier(identifier);  TestResult testResult=getCurrentTestResult();  TestIdentifier testId=new TestIdentifier(mFakePackagePrefix + testResult.mTestClass,testResult.mTestName);  if (!testInProgress()) {    Log.e(LOG_TAG,"Test currently not in progress when trying to end test: " + identifier);    return;  }  if (parsedResults.mTestRunTime != null) {    try {      testResult.mRunTime=new Long(parsedResults.mTestRunTime);    } catch (    NumberFormatException e) {      Log.e(LOG_TAG,"Test run time value is invalid, received: " + parsedResults.mTestRunTime);    }  }  boolean encounteredUnexpectedTest=false;  if (!testResult.isComplete()) {    Log.e(LOG_TAG,"No test/class name is currently recorded as running!");  } else {    if (testResult.mTestClass.compareTo(parsedResults.mTestClassName) != 0) {      Log.e(LOG_TAG,"Name for current test class does not match class we started " + "with, expected: " + testResult.mTestClass + " but got: "+ parsedResults.mTestClassName);      encounteredUnexpectedTest=true;    }    if (testResult.mTestName.compareTo(parsedResults.mTestName) != 0) {      Log.e(LOG_TAG,"Name for current test does not match test we started with," + "expected: " + testResult.mTestName + " bug got: "+ parsedResults.mTestName);      encounteredUnexpectedTest=true;    }  }  if (encounteredUnexpectedTest) {    for (    ITestRunListener listener : mTestListeners) {      listener.testFailed(ITestRunListener.TestFailure.ERROR,testId,mCurrentTestResult.getTrace());    }  } else   if (!testPassed) {    for (    ITestRunListener listener : mTestListeners) {      listener.testFailed(ITestRunListener.TestFailure.FAILURE,testId,mCurrentTestResult.getTrace());    }  }  Map<String,String> emptyMap=Collections.emptyMap();  for (  ITestRunListener listener : mTestListeners) {    listener.testEnded(testId,emptyMap);  }  setTestEnded();  ++mNumTestsRun;}  }
class C{  public void touchEvent(float x,float y){  float arenaX=(x - mViewportXoff) * (GameState.ARENA_WIDTH / mViewportWidth);  float arenaY=(y - mViewportYoff) * (GameState.ARENA_HEIGHT / mViewportHeight);  mGameState.movePaddle(arenaX);}  }
class C{  public String nextToken(){  StringBuffer buffer=new StringBuffer();  while (hasMoreTokens()) {    String token=super.nextToken();    if (token.endsWith("\\")) {      buffer.append(token.substring(0,token.length() - 1));      buffer.append(DELIMITER);    } else {      buffer.append(token);      break;    }  }  return buffer.toString().trim();}  }
class C{  public boolean isActive(){  if (stub != null) {    return stub.isActive();  } else {    return false;  }}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  void read(InputStream in,Document doc) throws IOException {  if (!Boolean.TRUE.equals(doc.getProperty("IgnoreCharsetDirective"))) {    final int READ_LIMIT=1024 * 10;    in=new BufferedInputStream(in,READ_LIMIT);    in.mark(READ_LIMIT);  }  try {    String charset=(String)getClientProperty("charset");    Reader r=(charset != null) ? new InputStreamReader(in,charset) : new InputStreamReader(in);    kit.read(r,doc,0);  } catch (  BadLocationException e) {    throw new IOException(e.getMessage());  }catch (  ChangedCharSetException changedCharSetException) {    String charSetSpec=changedCharSetException.getCharSetSpec();    if (changedCharSetException.keyEqualsCharSet()) {      putClientProperty("charset",charSetSpec);    } else {      setCharsetFromContentTypeParameters(charSetSpec);    }    try {      in.reset();    } catch (    IOException exception) {      in.close();      URL url=(URL)doc.getProperty(Document.StreamDescriptionProperty);      if (url != null) {        URLConnection conn=url.openConnection();        in=conn.getInputStream();      } else {        throw changedCharSetException;      }    }    try {      doc.remove(0,doc.getLength());    } catch (    BadLocationException e) {    }    doc.putProperty("IgnoreCharsetDirective",Boolean.valueOf(true));    read(in,doc);  }}  }
class C{  public static Driver driver(URI uri){  return driver(uri,Config.defaultConfig());}  }
class C{  public SendableDocumentMessage build(){  return new SendableDocumentMessage(document,replyTo,replyMarkup,disableNotification,caption);}  }
class C{  public OsmRuntimeException(String message,Throwable cause){  super(message,cause);}  }
class C{  public void paintMenuItemBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  boolean verifyUserPermission(PlatformUser pUser,String marketplaceId) throws MailOperationException {  if (ids.isUserLoggedIn(pUser.getKey())) {    return false;  }  if (isAccountLocked(pUser.getStatus())) {    sendPasswordRecoveryMails(pUser,EmailType.RECOVERPASSWORD_USER_LOCKED,marketplaceId,new Object[]{});    return false;  }  if (pUser.getOrganization().isRemoteLdapActive()) {    sendPasswordRecoveryMails(pUser,EmailType.RECOVERPASSWORD_FAILED_LDAP,marketplaceId,new Object[]{});    return false;  }  if (!pUser.hasManagerRole() && (marketplaceId == null)) {    sendPasswordRecoveryMails(pUser,EmailType.RECOVERPASSWORD_CLASSICPORTAL_FAILED,null,new Object[]{});    return false;  }  if ((pUser.hasManagerRole()) && (marketplaceId != null) && (!marketplaceId.equals(""))) {    sendPasswordRecoveryMails(pUser,EmailType.RECOVERPASSWORD_MARKETPLACE_FAILED,marketplaceId,new Object[]{});    return false;  }  return true;}  }
class C{  public static boolean isFile(String path){  File f=new File(path);  return f.isFile();}  }
class C{  public void initShare(String wechatAppId,String weiboAppId,String qqAppId,String wechatSecret){  mWechatAppId=wechatAppId;  mWeiboAppId=weiboAppId;  mQQAppId=qqAppId;  mWechatSecret=wechatSecret;}  }
class C{  protected List<Vertex> parseArguments(Vertex equation,Primitive type,int index,TextStream stream,Map<String,Map<String,Vertex>> elements,boolean bracket,boolean debug,Network network){  List<Vertex> arguments=new ArrayList<Vertex>();  if (!bracket) {    bracket=checkNext('(',stream);  }  boolean moreArguments=true;  stream.skipWhitespace();  char peek=stream.peek();  if (peek == ')') {    moreArguments=false;  }  while (moreArguments) {    stream.skipWhitespace();    peek=stream.peek();    if (peek == ')' || peek == '}') {      break;    }    if ((peek == ',') || (peek == ';')) {      break;    }    Vertex argument=parseElement(stream,elements,debug,network);    arguments.add(argument);    equation.addRelationship(type,argument,index);    if (!bracket) {      break;    }    stream.skipWhitespace();    peek=stream.peek();    if ((peek == ',') || (peek == ';')) {      stream.skip();    } else {      moreArguments=false;    }    index++;  }  if (bracket) {    ensureNext(')',stream);  }  return arguments;}  }
class C{  @Override protected boolean isSwitchFor(EPackage ePackage){  return ePackage == modelPackage;}  }
class C{  private void rejectUsagesOfThisInTopLevelLambda(ArrowFunction topLevelLambda){  assert LambdaUtils.isLambda(topLevelLambda);  Iterator<EObject> thisUsages=LambdaUtils.thisLiterals(topLevelLambda.getBody());  while (thisUsages.hasNext()) {    EObject thisUsage=thisUsages.next();    String message=IssueCodes.getMessageForKEY_THIS_REJECTED_IN_TOP_LEVEL_LAMBDA();    addIssue(message,thisUsage,IssueCodes.KEY_THIS_REJECTED_IN_TOP_LEVEL_LAMBDA);  }}  }
class C{  public void create(){  WindowSupport.setDefaultWindowSupportDisplayType(WindowSupport.Dlg.class);  setLayout(createLayoutManager());  leftSlider=new JSplitPane();  leftSlider.setBorder(null);  leftSlider.setResizeWeight(0);  leftSlider.setOneTouchExpandable(true);  rightSlider=new JSplitPane();  rightSlider.setBorder(null);  rightSlider.setResizeWeight(1);  rightSlider.setOneTouchExpandable(true);  rightSlider.setLeftComponent(leftSlider);  rightSlider.setRightComponent(null);  if (false) {    bottomSlider=new JSplitPane(JSplitPane.VERTICAL_SPLIT);    bottomSlider.setBorder(null);    bottomSlider.setResizeWeight(1);    bottomSlider.setOneTouchExpandable(true);    leftSlider.setRightComponent(bottomSlider);  }  super.add(rightSlider,BorderLayout.CENTER);}  }
class C{  public void validate(){  if (VALIDATE) {    Set<Integer> values=new HashSet<Integer>();    for (int i=0; i < members.length; i++) {      values.add(members[i]);    }    if (values.size() != members.length) {      throw new FrameworkException("not a valid subset");    }  }}  }
class C{  public T marginwidth(String value){  return attr("marginwidth",value);}  }
class C{  public Object clone(){  mxPoint clone;  try {    clone=(mxPoint)super.clone();  } catch (  CloneNotSupportedException e) {    clone=new mxPoint();  }  clone.setX(getX());  clone.setY(getY());  return clone;}  }
class C{  public int read32bit(int offset){  int v1=read16bit(offset);  int v2=read16bit(offset + 2);  return (v1 << 16) + (v2 & 0xffff);}  }
class C{  int readUtah(int row,int column,int numRows,int numColumns){  int currentByte=0;  if (readModule(row - 2,column - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row - 2,column - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row - 1,column - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row - 1,column - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row - 1,column,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row,column - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row,column - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row,column,numRows,numColumns)) {    currentByte|=1;  }  return currentByte;}  }
class C{  public static boolean appendDataToFile(EvoSuiteFile file,byte[] data){  if (file == null || data == null) {    return false;  }  FSObject target=VirtualFileSystem.getInstance().findFSObject(file.getPath());  if (target != null && (target.isFolder() || !target.isWritePermission())) {    return false;  }  if (target == null) {    boolean created=VirtualFileSystem.getInstance().createFile(file.getPath());    if (!created) {      return false;    }    target=VirtualFileSystem.getInstance().findFSObject(file.getPath());    assert target != null;  }  VFile vf=(VFile)target;  vf.writeBytes(data,0,data.length);  return true;}  }
class C{  public static String wrapText(String line,int columnWidth){  int lenght=line.length();  int delimiter="<br>".length();  int widthIndex=columnWidth;  for (int count=0; lenght > widthIndex; count++) {    line=line.subSequence(0,widthIndex + delimiter * count) + "<br>" + line.substring(widthIndex + delimiter * count);    widthIndex+=columnWidth;  }  return line;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:44.752 -0500",hash_original_method="F5346A2FCFA56F0B2264ABE6F2542994",hash_generated_method="78F0B9034785C01AE417B801F62881AF") public static void enforceAccessDrmPermission(Context context){  if (context.checkCallingOrSelfPermission(ACCESS_DRM_PERMISSION) != PackageManager.PERMISSION_GRANTED) {    throw new SecurityException("Requires DRM permission");  }}  }
class C{  private ReadGraph create(Object map) throws Exception {  ReadGraph read=fetch(map);  if (read == null) {    read=new ReadGraph(contract,loader);    cache(map,read);  }  return read;}  }
class C{  public void startFullCopy(Map<URI,List<URI>> fullCopies){  Iterator<URI> it=fullCopies.keySet().iterator();  while (it.hasNext()) {    URI blockObject=it.next();    List<URI> copyIds=fullCopies.get(blockObject);    if (!copyIds.isEmpty()) {      BlockStorageUtils.startFullCopy(copyIds.get(0));      break;    }  }}  }
class C{  @Override public boolean onTouchEvent(MotionEvent event,IMapView mapView){  boolean done=false;switch (event.getAction()) {case MotionEvent.ACTION_DOWN:    downX=event.getX();  downY=event.getY();moved=false;break;case MotionEvent.ACTION_UP:done=true;case MotionEvent.ACTION_MOVE:moved|=(Math.abs(event.getX() - downX) > 20 || Math.abs(event.getY() - downY) > 20);if (done && !moved && (tapArea != null)&& tapArea.contains((int)event.getX(),(int)event.getY())) {String touUri=myRendererInfo.getTouUri();if (touUri != null) {Intent intent=new Intent(Intent.ACTION_VIEW);intent.setData(Uri.parse(touUri));intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);myView.getContext().startActivity(intent);return true;}}break;}return false;}  }
class C{  public Page(int pageNum,Object icon,String text){  if (pageNum == 0)   throw new ArithmeticException("The Page number can't be zero");  this.pageNum=pageNum;  if (icon != null)   if (!(icon instanceof ResourceLocation) && !(icon instanceof ItemStack) && !(icon instanceof CraftingStack))   throw new IllegalArgumentException("Icon isn't a ResourceLocation, ItemStack or CraftingStack!");  this.icon=icon;  this.text=text;}  }
class C{  public Interval1D(double min,double max){  if (Double.isInfinite(min) || Double.isInfinite(max))   throw new IllegalArgumentException("Endpoints must be finite");  if (Double.isNaN(min) || Double.isNaN(max))   throw new IllegalArgumentException("Endpoints cannot be NaN");  if (min == 0.0)   min=0.0;  if (max == 0.0)   max=0.0;  if (min <= max) {    this.min=min;    this.max=max;  } else   throw new IllegalArgumentException("Illegal interval");}  }
class C{  public boolean forEachKey(DoubleProcedure procedure){  for (int i=table.length; i-- > 0; ) {    if (state[i] == FULL)     if (!procedure.apply(table[i]))     return false;  }  return true;}  }
class C{  protected void deallocateUpToBlock(int idx){  for (int i=0; i <= idx; i++) {    OBlock block_i=getBlockOrderAt(i).getBlock();    if (block_i.isAllocatedTo(this)) {      if ((block_i.getState() & OBlock.UNOCCUPIED) != OBlock.UNOCCUPIED) {        return;      }      boolean deAllocate=true;      for (int j=_idxCurrentOrder; j < _orders.size(); j++) {        OBlock block_j=getBlockOrderAt(j).getBlock();        if (!block_j.isAllocatedTo(this)) {          deAllocate=true;          break;        }        if (block_i == block_j) {          deAllocate=false;          break;        }      }      if (deAllocate) {        block_i.deAllocate(this);      }    }  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("PO_LOB[");  sb.append(m_tableName).append(".").append(m_columnName).append(",DisplayType=").append(m_displayType).append("]");  return sb.toString();}  }
class C{  public static BigDecimal toBTC(String currency,BigDecimal value,String apiCode) throws APIException, IOException {  Map<String,String> params=new HashMap<String,String>();  params.put("currency",currency);  params.put("value",String.valueOf(value));  if (apiCode != null) {    params.put("api_code",apiCode);  }  String response=HttpClient.getInstance().get("tobtc",params);  return new BigDecimal(response);}  }
class C{  protected static SyncToken createSyncToken(String dateString,@Nullable String uuid){  try {    return new SyncToken(DB_DATE_FORMAT.parse(dateString),uuid);  } catch (  ParseException e) {    throw new RuntimeException(e);  }}  }
class C{  public boolean removeElement(int s){  if (null == m_map)   return false;  for (int i=0; i < m_firstFree; i++) {    int node=m_map[i];    if (node == s) {      if (i > m_firstFree)       System.arraycopy(m_map,i + 1,m_map,i - 1,m_firstFree - i); else       m_map[i]=DTM.NULL;      m_firstFree--;      return true;    }  }  return false;}  }
class C{  public ColladaSurface(String ns){  super(ns);}  }
class C{  public Response newFatalErrorResponse(){  return null;}  }
class C{  public void addFrame(Drawable frame,int duration){  mAnimationState.addFrame(frame,duration);  if (mCurFrame < 0) {    setFrame(0,true,false);  }}  }
class C{  public OFMatch loadFromPacket(byte[] packetData,short inputPort){  short scratch;  int transportOffset=34;  ByteBuffer packetDataBB=ByteBuffer.wrap(packetData);  int limit=packetDataBB.limit();  this.wildcards=0;  this.inputPort=inputPort;  if (inputPort == OFPort.OFPP_ALL.getValue())   this.wildcards|=OFPFW_IN_PORT;  assert (limit >= 14);  this.dataLayerDestination=new byte[6];  packetDataBB.get(this.dataLayerDestination);  this.dataLayerSource=new byte[6];  packetDataBB.get(this.dataLayerSource);  this.dataLayerType=packetDataBB.getShort();  if (getDataLayerType() != (short)0x8100) {    setDataLayerVirtualLan((short)0xffff);    setDataLayerVirtualLanPriorityCodePoint((byte)0);  } else {    scratch=packetDataBB.getShort();    setDataLayerVirtualLan((short)(0xfff & scratch));    setDataLayerVirtualLanPriorityCodePoint((byte)((0xe000 & scratch) >> 13));    this.dataLayerType=packetDataBB.getShort();  }switch (getDataLayerType()) {case 0x0800:    scratch=packetDataBB.get();  scratch=(short)(0xf & scratch);transportOffset=(packetDataBB.position() - 1) + (scratch * 4);scratch=packetDataBB.get();setNetworkTypeOfService((byte)((0xfc & scratch) >> 2));packetDataBB.position(packetDataBB.position() + 7);this.networkProtocol=packetDataBB.get();packetDataBB.position(packetDataBB.position() + 2);this.networkSource=packetDataBB.getInt();this.networkDestination=packetDataBB.getInt();packetDataBB.position(transportOffset);break;case 0x0806:int arpPos=packetDataBB.position();scratch=packetDataBB.getShort(arpPos + 6);setNetworkProtocol((byte)(0xff & scratch));scratch=packetDataBB.getShort(arpPos + 2);if (scratch == 0x800 && packetDataBB.get(arpPos + 5) == 4) {this.networkSource=packetDataBB.getInt(arpPos + 14);this.networkDestination=packetDataBB.getInt(arpPos + 24);} else {setNetworkSource(0);setNetworkDestination(0);}break;default :this.wildcards|=OFPFW_NW_DST_ALL | OFPFW_NW_SRC_ALL | OFPFW_NW_PROTO| OFPFW_NW_TOS;setNetworkTypeOfService((byte)0);setNetworkProtocol((byte)0);setNetworkSource(0);setNetworkDestination(0);break;}switch (getNetworkProtocol()) {case 0x01:this.transportSource=U8.f(packetDataBB.get());this.transportDestination=U8.f(packetDataBB.get());break;case 0x06:this.transportSource=packetDataBB.getShort();this.transportDestination=packetDataBB.getShort();break;case 0x11:this.transportSource=packetDataBB.getShort();this.transportDestination=packetDataBB.getShort();break;default :this.wildcards|=OFPFW_TP_DST | OFPFW_TP_SRC;setTransportDestination((short)0);setTransportSource((short)0);break;}return this;}  }
class C{  public static String padLeft(String inString,int length){  return fixStringLength(inString,length,false);}  }
class C{  public static String obtenerURLNotificacionExpedientes() throws ConsultaExcepcion {  try {    return Configuracion.getURLNotificacion();  } catch (  Exception e) {    logger.error("Error al obtener URL de notificacion  [obtenerURLNotificacionExpedientes][Excepcion]",e.fillInStackTrace());    throw new ConsultaExcepcion(ConsultaCodigosError.EC_OBTENER_URL_NOTIFICACION,e.getCause());  }}  }
class C{  public AngelFontVisualPanel1(){  initComponents();  GraphicsEnvironment ge=GraphicsEnvironment.getLocalGraphicsEnvironment();  String[] fontNames=ge.getAvailableFontFamilyNames();  jList1.setListData(fontNames);}  }
class C{  @MainThread @ObjectiveCName("unsubscribeWithListener:") public void unsubscribe(@NotNull ModelChangedListener<UserVM> listener){  listeners.remove(listener);}  }
class C{  public static <V>int addDistinctList(List<V> sourceList,List<V> entryList){  if (sourceList == null || isEmpty(entryList)) {    return 0;  }  int sourceCount=sourceList.size();  for (  V entry : entryList) {    if (!sourceList.contains(entry)) {      sourceList.add(entry);    }  }  return sourceList.size() - sourceCount;}  }
class C{  public static String loadPriceListAsHTMLSelect(Properties ctx,ArrayList<PriceListBean> bean){  StringBuffer selectHTML=new StringBuffer();  int m_pricelist_id=Env.getContextAsInt(ctx,UdiConstants.PRICELIST_CTX_PARAM);  selectHTML.append("<select id=\"priceList\">");  for (  PriceListBean priceListBean : bean) {    selectHTML.append("<option value=\"").append(priceListBean.getPriceListId()).append("\"");    if (m_pricelist_id == priceListBean.getPriceListId()) {      selectHTML.append(" selected >");    } else {      selectHTML.append(" >");    }    selectHTML.append(priceListBean.getName()).append("</option>");  }  selectHTML.append("</select>");  return selectHTML.toString();}  }
class C{  public static boolean isDefaultLookAndFeelDecorated(){  Boolean defaultLookAndFeelDecorated=(Boolean)SwingUtilities.appContextGet(defaultLookAndFeelDecoratedKey);  if (defaultLookAndFeelDecorated == null) {    defaultLookAndFeelDecorated=Boolean.FALSE;  }  return defaultLookAndFeelDecorated.booleanValue();}  }
class C{  public static boolean isAssignable(Class<?> lhsType,Class<?> rhsType){  Assert.notNull(lhsType,"Left-hand side type must not be null");  Assert.notNull(rhsType,"Right-hand side type must not be null");  if (lhsType.isAssignableFrom(rhsType)) {    return true;  }  if (lhsType.isPrimitive()) {    Class<?> resolvedPrimitive=primitiveWrapperTypeMap.get(rhsType);    if (resolvedPrimitive != null && lhsType.equals(resolvedPrimitive)) {      return true;    }  } else {    Class<?> resolvedWrapper=primitiveTypeToWrapperMap.get(rhsType);    if (resolvedWrapper != null && lhsType.isAssignableFrom(resolvedWrapper)) {      return true;    }  }  return false;}  }
class C{  private static double v2DistanceBetween2Points(Point2D.Double a,Point2D.Double b){  return Math.sqrt(v2SquaredDistanceBetween2Points(a,b));}  }
class C{  public boolean isCurrent(){  return (System.currentTimeMillis() <= getEndTime().getTime());}  }
class C{  private String makeHashChain(int itemIndex) throws Exception {  LOG.trace("makeHashChain({})",itemIndex);  HashChainType hashChain=new HashChainType();  hashChain.setDefaultDigestMethod(digestMethod());  int stepCount=0;  int currentNodeIdx=ROOT_IDX;  int currentLevel=ceilingLog2(inputs.size()) - 1;  while (currentNodeIdx < nodes.length) {    int myDirection=(itemIndex & (1 << currentLevel)) >> currentLevel;    LOG.trace("Level {}, direction {}",currentLevel,myDirection);    int myChildIdx=childIdx(currentNodeIdx,myDirection);    int otherChildIdx=childIdx(currentNodeIdx,1 - myDirection);    while (get(myChildIdx) == null) {      myChildIdx=leftIdx(myChildIdx);      LOG.trace("Skipping down, new index = {}",myChildIdx);      --currentLevel;    }    AbstractValueType otherData=hashValue(getDeep(otherChildIdx));    AbstractValueType myData;    if (isLeaf(myChildIdx) && !multiparts.containsKey(itemIndex)) {      myData=dataRef(get(myChildIdx));    } else {      myData=stepRef(stepCount + 1);    }    HashStepType hashStep=new HashStepType();    hashStep.setId(STEP + stepCount);    hashStep.getHashValueOrStepRefOrDataRef().add(null);    hashStep.getHashValueOrStepRefOrDataRef().add(null);    hashStep.getHashValueOrStepRefOrDataRef().set(myDirection,myData);    hashStep.getHashValueOrStepRefOrDataRef().set(1 - myDirection,otherData);    hashChain.getHashStep().add(hashStep);    ++stepCount;    currentNodeIdx=myChildIdx;    --currentLevel;  }  if (multiparts.containsKey(itemIndex)) {    LOG.trace("Adding attachments");    hashChain.getHashStep().add(multipartStep(multiparts.get(itemIndex),stepCount));  }  return elementToString(objectFactory.createHashChain(hashChain));}  }
class C{  private void addCondition(Condition c){  if (conditions == null) {    conditions=new java.util.ArrayList();  }  if (_pe != null) {    conditions.add(Condition.createUnsupportedCondition());    XRLog.match(Level.WARNING,"Trying to append conditions to pseudoElement " + _pe);  }  conditions.add(c);}  }
class C{  @DSComment("not sensitive, memory stream") @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:49.104 -0500",hash_original_method="B210C316A5935A34586C62D959011891",hash_generated_method="1774137BABF77D6332E3E77ADE4EE85A") @Override public String toString(){  return buf.toString();}  }
class C{  private boolean test_float_2D(){  CUarray array=new CUarray();  CUDA_ARRAY_DESCRIPTOR ad=new CUDA_ARRAY_DESCRIPTOR();  ad.Format=CU_AD_FORMAT_FLOAT;  ad.Width=sizeX;  ad.Height=sizeY;  ad.NumChannels=1;  cuArrayCreate(array,ad);  CUDA_MEMCPY2D copyHD=new CUDA_MEMCPY2D();  copyHD.srcMemoryType=CUmemorytype.CU_MEMORYTYPE_HOST;  copyHD.srcHost=Pointer.to(input_float_2D);  copyHD.srcPitch=sizeX * Sizeof.FLOAT;  copyHD.dstMemoryType=CUmemorytype.CU_MEMORYTYPE_ARRAY;  copyHD.dstArray=array;  copyHD.WidthInBytes=sizeX * Sizeof.FLOAT;  copyHD.Height=sizeY;  cuMemcpy2D(copyHD);  CUtexref texref=new CUtexref();  cuModuleGetTexRef(texref,module,"texture_float_2D");  cuTexRefSetFilterMode(texref,CU_TR_FILTER_MODE_LINEAR);  cuTexRefSetAddressMode(texref,0,CU_TR_ADDRESS_MODE_CLAMP);  cuTexRefSetAddressMode(texref,1,CU_TR_ADDRESS_MODE_CLAMP);  cuTexRefSetFlags(texref,CU_TRSF_NORMALIZED_COORDINATES);  cuTexRefSetFormat(texref,CU_AD_FORMAT_FLOAT,1);  cuTexRefSetArray(texref,array,CU_TRSA_OVERRIDE_FORMAT);  CUdeviceptr dOutput=new CUdeviceptr();  cuMemAlloc(dOutput,Sizeof.FLOAT * 1);  CUfunction function=new CUfunction();  cuModuleGetFunction(function,module,"test_float_2D");  Pointer kernelParameters=Pointer.to(Pointer.to(dOutput),Pointer.to(new float[]{posX}),Pointer.to(new float[]{posY}));  cuLaunchKernel(function,1,1,1,1,1,1,0,null,kernelParameters,null);  cuCtxSynchronize();  float hOutput[]=new float[1];  cuMemcpyDtoH(Pointer.to(hOutput),dOutput,Sizeof.FLOAT * 1);  log("Result float  2D " + Arrays.toString(hOutput));  float expected[]=new float[]{1.5f};  boolean passed=Arrays.equals(hOutput,expected);  log("Test   float  2D " + (passed ? "PASSED" : "FAILED"));  cuArrayDestroy(array);  cuMemFree(dOutput);  return passed;}  }
class C{  public XintroActivityBuilder addFragment(IntroFragmentModel introFragmentModel){  introFragmentModelList.add(introFragmentModel);  return this;}  }
class C{  public static Date parseDate(final String str,final Locale locale,final String... parsePatterns) throws ParseException {  return parseDateWithLeniency(str,locale,parsePatterns,true);}  }
class C{  public IntBuffer sizeBuffer(){  IntBuffer ib=IntBuffer.allocate(1);  ib.put(byteBuffer.capacity());  return ib;}  }
class C{  private boolean isProcessableWithWrappedWorkflow(ResourceResolver resourceResolver,String payloadPath){  Resource resource=resourceResolver.getResource(payloadPath);  return !DamUtil.isSubAsset(resource);}  }
class C{  public static final String copyString(String str,int copies){  String result="";  String powerOf2Copies=str;  int remaining=copies;  while (remaining > 0) {    if (remaining % 2 != 0) {      result=result + powerOf2Copies;    }    remaining=remaining / 2;    if (remaining != 0) {      powerOf2Copies=powerOf2Copies + powerOf2Copies;    }  }  return result;}  }
class C{  public DragDividerDecoration(Context context,boolean drawOnLastItem,@IdRes int... excludedLayoutIDs){  super(context,drawOnLastItem,excludedLayoutIDs);}  }
class C{  public boolean wasFinished(){  return this.isFinished;}  }
class C{  public String sqlAction_dropDuplicates(String vendorName,String catalogName,String schemaName,String tableName,ArrayList<String> keyColumnNames){  if (keyColumnNames != null && keyColumnNames.size() > 0) {    ArrayList<String> translatedColumnNames=new ArrayList<String>();    for (    String columnName : keyColumnNames) {      translatedColumnNames.add(normalizeColumnName(vendorName,columnName));    }    return m_interfaces.get(getDBVendorID(vendorName)).sqlAction_dropDuplicates(catalogName,schemaName,tableName,translatedColumnNames);  } else   return null;}  }
class C{  @Inline static void compilePutfieldBarrierLongImm(Assembler asm,Offset fieldOffset,int locationMetadata,BaselineCompilerImpl compiler){  putfieldStoreBarrierHelper(asm,compiler,fieldOffset,locationMetadata,Entrypoints.longFieldWriteBarrierMethod);}  }
class C{  private void emitEnsureCollection(Method method,String fieldName,StringBuilder builder){  builder.append("    protected void ");  builder.append(getEnsureName(fieldName));  builder.append("() {\n");  builder.append("      if (");  builder.append(fieldName);  builder.append(" == null) {\n        ");  builder.append(fieldName);  builder.append(" = new ");  builder.append(getImplName(method.getGenericReturnType(),true));  builder.append("();\n");  builder.append("      }\n");  builder.append("    }\n");}  }
class C{  private UnicodeBlock(String idName,String... aliases){  this(idName);  for (  String alias : aliases)   map.put(alias,this);}  }
class C{  protected double updateDistance(double currDist,double diff){  double result;  result=currDist;  diff=Math.abs(diff);  if (diff > result)   result=diff;  return result;}  }
class C{  public T codebase(String value){  return attr("codebase",value);}  }
class C{  public boolean isNextAvailable(){  return selectedPage < getNumberOfPages();}  }
class C{  public RdfTypeRdfsResourceFilter(){}  }
class C{  private void doServiceCallWithExpression() throws Exception {  try {    final ICloseableIterator<IBindingSet[]> sitr=context.getSource();    while (sitr.hasNext()) {      final Map<BigdataURI,ServiceCallChunk> serviceCallChunks=new HashMap<BigdataURI,ServiceCallChunk>();      final IBindingSet[] chunk=sitr.next();      for (int i=0; i < chunk.length; i++) {        final IBindingSet bset=chunk[i];        final BigdataURI serviceURI=ServiceCallUtility.getServiceURI(serviceRef,bset);        ServiceCallChunk serviceCallChunk=serviceCallChunks.get(serviceURI);        if (serviceCallChunk == null) {          final ServiceCall<? extends Object> serviceCall=resolveService(serviceURI);          serviceCallChunks.put(serviceURI,serviceCallChunk=new ServiceCallChunk(serviceURI,serviceCall));        }        serviceCallChunk.addSourceSolution(bset);      }      final int nparallel=op.getMaxParallel();      final LatchedExecutor executorService=new LatchedExecutor(context.getExecutorService(),nparallel);      final List<FutureTask<Void>> tasks=new ArrayList<FutureTask<Void>>(serviceCallChunks.size());      try {        for (        ServiceCallChunk serviceCallChunk : serviceCallChunks.values()) {          final FutureTask<Void> ft=new FutureTask<Void>(new ServiceCallTask(serviceCallChunk));          tasks.add(ft);          executorService.execute(ft);        }        for (        FutureTask<Void> ft : tasks) {          try {            ft.get(timeout,TimeUnit.MILLISECONDS);          } catch (          TimeoutException ex) {            ft.cancel(true);            if (!silent)             throw ex;          }        }      }  finally {        for (        FutureTask<Void> ft : tasks) {          ft.cancel(true);        }      }    }    context.getSink().flush();    return;  }  finally {    context.getSource().close();    context.getSink().close();  }}  }
class C{  public void updateLnF(){  if (isImageOK()) {    setBorderPainted(false);    setContentAreaFilled(false);    setText(null);    setPreferredSize(new Dimension(FunctionButton.BUT_IMG_SIZE,FunctionButton.BUT_IMG_SIZE));  } else {    setBorderPainted(true);    setContentAreaFilled(true);    setText(getButtonLabel());    if (getButtonLabel() != null) {      int butWidth=getFontMetrics(getFont()).stringWidth(getButtonLabel());      butWidth=butWidth + 20;      if (butWidth < FunctionButton.BUT_WDTH) {        butWidth=FunctionButton.BUT_WDTH;      }      setPreferredSize(new Dimension(butWidth,FunctionButton.BUT_HGHT));    } else {      setPreferredSize(new Dimension(BUT_WDTH,BUT_HGHT));    }  }}  }
class C{  protected void applyConstaints(){  boolean hasGlobalConstraints=constraints.size() > 0;  for (  VerletParticle2D p : particles) {    if (hasGlobalConstraints) {      for (      ParticleConstraint2D c : constraints) {        c.apply(p);      }    }    if (p.bounds != null) {      p.constrain(p.bounds);    }    if (worldBounds != null) {      p.constrain(worldBounds);    }  }}  }
class C{  public void transcode(TranscoderInput input,TranscoderOutput output) throws TranscoderException {  DataInputStream is=getCompatibleInput(input);  WMFRecordStore currentStore=new WMFRecordStore();  try {    currentStore.read(is);  } catch (  IOException e) {    handler.fatalError(new TranscoderException(e));    return;  }  float wmfwidth;  float wmfheight;  float conv=1.0f;  if (hints.containsKey(KEY_INPUT_WIDTH)) {    wmfwidth=((Integer)hints.get(KEY_INPUT_WIDTH)).intValue();    wmfheight=((Integer)hints.get(KEY_INPUT_HEIGHT)).intValue();  } else {    wmfwidth=currentStore.getWidthPixels();    wmfheight=currentStore.getHeightPixels();  }  float width=wmfwidth;  float height=wmfheight;  if (hints.containsKey(KEY_WIDTH)) {    width=((Float)hints.get(KEY_WIDTH)).floatValue();    conv=width / wmfwidth;    height=height * width / wmfwidth;  }  int xOffset=0;  int yOffset=0;  if (hints.containsKey(KEY_XOFFSET)) {    xOffset=((Integer)hints.get(KEY_XOFFSET)).intValue();  }  if (hints.containsKey(KEY_YOFFSET)) {    yOffset=((Integer)hints.get(KEY_YOFFSET)).intValue();  }  float sizeFactor=currentStore.getUnitsToPixels() * conv;  int vpX=(int)(currentStore.getVpX() * sizeFactor);  int vpY=(int)(currentStore.getVpY() * sizeFactor);  int vpW;  int vpH;  if (hints.containsKey(KEY_INPUT_WIDTH)) {    vpW=(int)(((Integer)hints.get(KEY_INPUT_WIDTH)).intValue() * conv);    vpH=(int)(((Integer)hints.get(KEY_INPUT_HEIGHT)).intValue() * conv);  } else {    vpW=(int)(currentStore.getWidthUnits() * sizeFactor);    vpH=(int)(currentStore.getHeightUnits() * sizeFactor);  }  WMFPainter painter=new WMFPainter(currentStore,xOffset,yOffset,conv);  Document doc=this.createDocument(output);  svgGenerator=new SVGGraphics2D(doc);  svgGenerator.getGeneratorContext().setPrecision(4);  painter.paint(svgGenerator);  svgGenerator.setSVGCanvasSize(new Dimension(vpW,vpH));  Element svgRoot=svgGenerator.getRoot();  svgRoot.setAttributeNS(null,SVG_VIEW_BOX_ATTRIBUTE,String.valueOf(vpX) + ' ' + vpY+ ' '+ vpW+ ' '+ vpH);  writeSVGToOutput(svgGenerator,svgRoot,output);}  }
class C{  synchronized void specificStart() throws IllegalStateException, IOException {  if (Cfg.DEBUG) {    Check.log(TAG + " (specificStart)");  }  numFailures=0;  unfinished=null;  final DateTime dateTime=new DateTime();  fId=dateTime.getFiledate();  createSockets();  try {    recorder=new MediaRecorder();    recorder.setOnErrorListener(this);    recorder.setOnInfoListener(this);    recorder.setAudioSource(MediaRecorder.AudioSource.MIC);    recorder.setOutputFormat(MediaRecorder.OutputFormat.RAW_AMR);    recorder.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB);    recorder.setOutputFile(sender.getFileDescriptor());    recorder.prepare();    recorder.start();  } catch (  Exception e) {    if (Cfg.EXCEPTION) {      Check.log(e);    }    if (Cfg.DEBUG) {      Check.log(TAG + " (specificStart) Exception Error: delete socket and release recorder calling stopRecorder()");      stopRecorder();    }  }}  }
class C{  private SparkContext createSparkContext_2(){  return (SparkContext)Utils.invokeMethod(sparkSession,"sparkContext");}  }
class C{  private Map<Port,Set<Port>> insertExternalTopology(TopologyTree root,Map<Port,Set<Port>> inputMap){  HashMap<Port,Set<Port>> returnMap=new HashMap<>(inputMap);  returnMap.entrySet().removeIf(null);  return returnMap;}  }
class C{  public synchronized void close() throws IOException {  array.close();}  }
class C{  static String generateErrorCorrection(CharSequence dataCodewords,int errorCorrectionLevel){  int k=getErrorCorrectionCodewordCount(errorCorrectionLevel);  char[] e=new char[k];  int sld=dataCodewords.length();  for (int i=0; i < sld; i++) {    int t1=(dataCodewords.charAt(i) + e[e.length - 1]) % 929;    int t2;    int t3;    for (int j=k - 1; j >= 1; j--) {      t2=(t1 * EC_COEFFICIENTS[errorCorrectionLevel][j]) % 929;      t3=929 - t2;      e[j]=(char)((e[j - 1] + t3) % 929);    }    t2=(t1 * EC_COEFFICIENTS[errorCorrectionLevel][0]) % 929;    t3=929 - t2;    e[0]=(char)(t3 % 929);  }  StringBuilder sb=new StringBuilder(k);  for (int j=k - 1; j >= 0; j--) {    if (e[j] != 0) {      e[j]=(char)(929 - e[j]);    }    sb.append(e[j]);  }  return sb.toString();}  }
class C{  protected TypeCastExpressionImpl(){  super();}  }
class C{  public int blue(){  return (int)scalar.val[2];}  }
class C{  private void addDummyBoundaryPatch(boolean isShadow,int xTo,InputView inputView,ViewPoint inputLayoutOrigin){  final NinePatchDrawable inputDrawable=getColoredPatchDrawable(isShadow ? R.drawable.dummy_input_shadow : R.drawable.dummy_input);  final NinePatchDrawable inputBorderDrawable=mPatchManager.getPatchDrawable(R.drawable.dummy_input_border);  int width=inputDrawable.getIntrinsicWidth();  if (mHasValueInput) {    width+=mPatchManager.mValueInputWidth;  }  boolean inTopRow=(inputLayoutOrigin.y == 0);  mHelper.setRtlAwareBounds(tempRect,mBlockViewSize.x,xTo - width,inputLayoutOrigin.y + (inTopRow ? mBlockTopPadding : 0),xTo,inputLayoutOrigin.y + inputView.getRowHeight());  inputDrawable.setBounds(tempRect);  inputBorderDrawable.setBounds(tempRect);  mBlockPatches.add(inputDrawable);  mBlockBorderPatches.add(inputBorderDrawable);}  }
class C{  public Builder maxConnections(final int maxConnections){  clientConfig.setMaxConnections(maxConnections);  return this;}  }
class C{  public Tokenizer(Reader reader){  this(reader,Integer.MAX_VALUE);}  }
class C{  public MaskWriteRegisterRequest(int ref,int andMask,int orMask){  super();  setFunctionCode(Modbus.MASK_WRITE_REGISTER);  setReference(ref);  setAndMask(andMask);  setOrMask(orMask);  setDataLength(6);}  }
class C{  public void footer(){  out.println("\t}");  out.println("}");}  }
class C{  private int animationStateForProgress(float progress){  int length=animationCuePoints.length;  for (int i=0; i < length; i++) {    if (animationCuePoints[i] >= progress) {      return i;    }  }  return INVALID_INDEX;}  }
class C{  public void append(final StringBuffer buffer,final String fieldName,final double[] array,final Boolean fullDetail){  appendFieldStart(buffer,fieldName);  if (array == null) {    appendNullText(buffer,fieldName);  } else   if (isFullDetail(fullDetail)) {    appendDetail(buffer,fieldName,array);  } else {    appendSummary(buffer,fieldName,array);  }  appendFieldEnd(buffer,fieldName);}  }
class C{  public String reverseStringC(String s){  byte[] bytes=s.getBytes();  int i=0;  int j=s.length() - 1;  while (i < j) {    bytes[i]=(byte)(bytes[i] ^ bytes[j]);    bytes[j]=(byte)(bytes[i] ^ bytes[j]);    bytes[i]=(byte)(bytes[i] ^ bytes[j]);    i++;    j--;  }  return new String(bytes);}  }
class C{  public boolean addUndirectedEdge(Node node1,Node node2){  return addEdge(Edges.undirectedEdge(node1,node2));}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4mfPackage.PROJECT_DESCRIPTION__PROJECT_VERSION:    return basicSetProjectVersion(null,msgs);case N4mfPackage.PROJECT_DESCRIPTION__EXTENDED_RUNTIME_ENVIRONMENT:  return basicSetExtendedRuntimeEnvironment(null,msgs);case N4mfPackage.PROJECT_DESCRIPTION__PROVIDED_RUNTIME_LIBRARIES:return basicSetProvidedRuntimeLibraries(null,msgs);case N4mfPackage.PROJECT_DESCRIPTION__REQUIRED_RUNTIME_LIBRARIES:return basicSetRequiredRuntimeLibraries(null,msgs);case N4mfPackage.PROJECT_DESCRIPTION__PROJECT_DEPENDENCIES:return basicSetProjectDependencies(null,msgs);case N4mfPackage.PROJECT_DESCRIPTION__IMPLEMENTED_PROJECTS:return basicSetImplementedProjects(null,msgs);case N4mfPackage.PROJECT_DESCRIPTION__INIT_MODULES:return basicSetInitModules(null,msgs);case N4mfPackage.PROJECT_DESCRIPTION__EXEC_MODULE:return basicSetExecModule(null,msgs);case N4mfPackage.PROJECT_DESCRIPTION__SOURCE_FRAGMENT:return ((InternalEList<?>)getSourceFragment()).basicRemove(otherEnd,msgs);case N4mfPackage.PROJECT_DESCRIPTION__MODULE_FILTERS:return ((InternalEList<?>)getModuleFilters()).basicRemove(otherEnd,msgs);case N4mfPackage.PROJECT_DESCRIPTION__TESTED_PROJECTS:return basicSetTestedProjects(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  private <T>void modify(URI url,String id,String key,T obj) throws IsilonException {  ClientResponse resp=null;  try {    String body=new Gson().toJson(obj);    resp=_client.put(url.resolve(id),null,body);    if (resp.getStatus() != 204) {      if (resp.hasEntity()) {        JSONObject jObj=resp.getEntity(JSONObject.class);        processErrorResponse("modify",key + ": " + id,resp.getStatus(),jObj);      } else {        processErrorResponse("modify",key + ": " + id,resp.getStatus(),null);      }    }  } catch (  IsilonException ie) {    throw ie;  }catch (  Exception e) {    String response=String.format("%1$s",(resp == null) ? "" : resp);    throw IsilonException.exceptions.modifyResourceFailedOnIsilonArray(key,id,response,e);  } finally {    if (resp != null) {      resp.close();    }  }}  }
class C{  public void testSetIssuersLjava_util_Collection(){  X509CRLSelector selector=new X509CRLSelector();  X500Principal iss1=new X500Principal("O=First Org.");  X500Principal iss2=new X500Principal("O=Second Org.");  X500Principal iss3=new X500Principal("O=Third Org.");  TestCRL crl1=new TestCRL(iss1);  TestCRL crl2=new TestCRL(iss2);  TestCRL crl3=new TestCRL(iss3);  selector.setIssuers(null);  assertTrue("Any CRL issuers should match in the case of null issuers.",selector.match(crl1) && selector.match(crl2));  ArrayList<X500Principal> issuers=new ArrayList<X500Principal>(2);  issuers.add(iss1);  issuers.add(iss2);  selector.setIssuers(issuers);  assertTrue("The CRL should match the selection criteria.",selector.match(crl1) && selector.match(crl2));  assertFalse("The CRL should not match the selection criteria.",selector.match(crl3));  issuers.add(iss3);  assertFalse("The internal issuer collection is not protected " + "against the modifications.",selector.match(crl3));}  }
class C{  public GeoPoint[] findIntersections(final PlanetModel planetModel,final Plane q,final Membership... bounds){  if (isNumericallyIdentical(q)) {    return null;  }  return findIntersections(planetModel,q,bounds,NO_BOUNDS);}  }
class C{  public void addHtmlLink(String htmlUri,String lang,String title){  Link link=new Link();  link.setRel(Link.Rel.ALTERNATE);  link.setType(Link.Type.HTML);  link.setHref(htmlUri);  if (lang != null) {    link.setHrefLang(lang);  }  if (title != null) {    link.setTitle(title);  }  addLink(link);}  }
class C{  public CountingInputStream(InputStream in){  super(checkNotNull(in));}  }
class C{  private void addEndToken(int tokenType){  addToken(zzMarkedPos,zzMarkedPos,tokenType);}  }
class C{  private void applyTypeVarUseOnReturnType(){  new TypeVarUseApplier(methodType.getReturnType(),methodSymbol,typeFactory).extractAndApply();}  }
class C{  public final Observable<String> posterUrl(){  return mPosterUrlSubject.asObservable();}  }
class C{  public int compareTo(cp_info constant_pool[],cp_info cp,cp_info cp_constant_pool[]){  int i;  if (tag != cp.tag)   return tag - cp.tag;  CONSTANT_InvokeDynamic_info cu=(CONSTANT_InvokeDynamic_info)cp;  i=constant_pool[bootstrap_method_index].compareTo(constant_pool,cp_constant_pool[cu.bootstrap_method_index],cp_constant_pool);  if (i != 0)   return i;  i=constant_pool[name_and_type_index].compareTo(constant_pool,cp_constant_pool[cu.name_and_type_index],cp_constant_pool);  return i;}  }
class C{  @Override public void retry(VolleyError error) throws VolleyError {  mCurrentRetryCount++;  mCurrentTimeoutMs+=(mCurrentTimeoutMs * mBackoffMultiplier);  if (!hasAttemptRemaining()) {    throw error;  }}  }
class C{  @Override protected final Address allocSlowOnce(int bytes,int align,int offset){  if (space == null) {    VM.assertions.fail("Allocation on unbound bump pointer.");  }  if (allowScanning && !region.isZero()) {    Address nextRegion=getNextRegion(region);    if (!nextRegion.isZero()) {      return consumeNextRegion(nextRegion,bytes,align,offset);    }  }  Extent blockSize=Word.fromIntZeroExtend(bytes).plus(BLOCK_MASK).and(BLOCK_MASK.not()).toExtent();  Address start=space.acquire(Conversions.bytesToPages(blockSize));  if (start.isZero())   return start;  if (!allowScanning) {    if (start.NE(limit))     cursor=start;    updateLimit(start.plus(blockSize),start,bytes);  } else   updateMetaData(start,blockSize,bytes);  return alloc(bytes,align,offset);}  }
class C{  public boolean equalsXMLElement(IXMLElement elt){  if (!this.name.equals(elt.getName())) {    return false;  }  if (this.attributes.size() != elt.getAttributeCount()) {    return false;  }  Iterator enm=this.attributes.iterator();  while (enm.hasNext()) {    XMLAttribute attr=(XMLAttribute)enm.next();    if (!elt.hasAttribute(attr.getName(),attr.getNamespace())) {      return false;    }    String value=elt.getAttribute(attr.getName(),attr.getNamespace(),null);    if (!attr.getValue().equals(value)) {      return false;    }    String type=elt.getAttributeType(attr.getName(),attr.getNamespace());    if (!attr.getType().equals(type)) {      return false;    }  }  if (this.children.size() != elt.getChildrenCount()) {    return false;  }  for (int i=0; i < this.children.size(); i++) {    IXMLElement child1=this.getChildAtIndex(i);    IXMLElement child2=elt.getChildAtIndex(i);    if (!child1.equalsXMLElement(child2)) {      return false;    }  }  return true;}  }
class C{  public static Task<Void> sendMessageInBackground(String message,ParseQuery<ParseInstallation> query){  ParsePush push=new ParsePush();  push.setQuery(query);  push.setMessage(message);  return push.sendInBackground();}  }
class C{  public static String extractDuplexGroupPassword(LocoNetMessage m){switch (getDuplexGroupIdentityMessageType(m)) {case DUPLEX_GROUP_NAME_ETC_REPORT_MESSAGE:    return extractDuplexGroupPasswordSimplified((m.getElement(15) & 0x70) >> 4,(m.getElement(15) & 0x0f),(m.getElement(16) & 0x70) >> 4,(m.getElement(16) & 0x0f),(((m.getElement(14) & 0x1) == 0x1) ? true : false),false,(((m.getElement(14) & 0x2) == 0x2) ? true : false),false);case DUPLEX_GROUP_PASSWORD_REPORT_MESSAGE:case DUPLEX_GROUP_PASSWORD_WRITE_MESSAGE:  return extractDuplexGroupPasswordSimplified((m.getElement(5) & 0x0f),(m.getElement(6) & 0x0f),(m.getElement(7) & 0x0f),(m.getElement(8) & 0x0f),false,false,false,false);default :return null;}}  }
class C{  public int asNode(XPathContext xctxt) throws javax.xml.transform.TransformerException {  int current=xctxt.getCurrentNode();  DTM dtm=xctxt.getDTM(current);  return dtm.getFirstChild(current);}  }
class C{  public static void convolve(Kernel kernel,int[] inPixels,int[] outPixels,int width,int height,boolean alpha,int edgeAction){  if (kernel.getHeight() == 1)   convolveH(kernel,inPixels,outPixels,width,height,alpha,edgeAction); else   if (kernel.getWidth() == 1)   convolveV(kernel,inPixels,outPixels,width,height,alpha,edgeAction); else   convolveHV(kernel,inPixels,outPixels,width,height,alpha,edgeAction);}  }
class C{  private Object returnFromResponse() throws RemotingException {  ChannelBuffer res=response;  try {    TProtocol iprot=TBaseTools.newProtocol(res,null);    TMessage msg=iprot.readMessageBegin();    if (msg.type == TMessageType.EXCEPTION) {      TApplicationException x=TApplicationException.read(iprot);      iprot.readMessageEnd();      throw x;    }    if (msg.type == T_CLIENT_TIMEOUT || msg.type == T_SERVER_TIMEOUT) {      throw new TimeoutException(msg.type == T_SERVER_TIMEOUT,channel,getTimeoutMessage(true));    }    if (msg.seqid != id) {      throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,methodName + " failed: out of sequence response");    }    Class<?> clazz=TBaseTools.getTBaseClass(serviceName,methodName,"_result");    TBase<?,?> _result=TBaseTools.getTBaseObject(clazz,null,null);    _result.read(iprot);    Object value=TBaseTools.getResult(_result);    RpcResult result=new RpcResult(value);    return result;  } catch (  Exception e) {    throw new RpcException(e);  }}  }
class C{  public boolean canBeNegative(){  boolean negative=false;  return negative;}  }
class C{  private GridBagConstraints gbcLicenseLabel(){  gbc.gridx=0;  gbc.gridwidth=GridBagConstraints.RELATIVE;  gbc.anchor=GridBagConstraints.WEST;  gbc.insets=new Insets(0,10,5,0);  return gbc;}  }
class C{  protected void export(EsriGraphicList egList){  Object obj=egList.getAttribute(DBF_ATTRIBUTE);  if (obj == null) {    egList.putAttribute(DBF_ATTRIBUTE,getMasterDBF());  }  eseInterfaces.add(new ESEInterface(egList,filePath,null));  writeFiles();}  }
class C{  protected void sequence_ArrowExpression(ISerializationContext context,ArrowFunction semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public final boolean checkTag(int identifier){  return this.id == identifier;}  }
class C{  public static String generateSPNativeGuidFromVolumeViewIndication(Hashtable<String,String> cimIndication){  return generateSPNativeGuidFromIndication(cimIndication,CIMConstants.SOURCE_INSTANCE_MODEL_PATH_SP_INSTANCE_ID);}  }
class C{  public DD max(DD x){  if (this.ge(x)) {    return this;  } else {    return x;  }}  }
class C{  public static DownscaleQuality forString(String type,DownscaleQuality dflt){  DownscaleQuality q=(DownscaleQuality)constList.get(type);  return q == null ? dflt : q;}  }
class C{  public void add(float f){  data.add(f);}  }
class C{  public Matrix4x3f(float m00,float m01,float m02,float m10,float m11,float m12,float m20,float m21,float m22,float m30,float m31,float m32){  this.m00=m00;  this.m01=m01;  this.m02=m02;  this.m10=m10;  this.m11=m11;  this.m12=m12;  this.m20=m20;  this.m21=m21;  this.m22=m22;  this.m30=m30;  this.m31=m31;  this.m32=m32;  properties=0;}  }
class C{  @DELETE @Path("/{id}") public Response cancelOrder(@PathParam("id") int orderId){  orderService.cancelOrder(orderId);  return Response.ok().build();}  }
class C{  public static void showToast(Context context,String message){  Toast.makeText(context,message,Toast.LENGTH_SHORT).show();}  }
class C{  public static AlipayFragment newInstance(int sectionNumber){  AlipayFragment fragment=new AlipayFragment();  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  private Number toNumber(final Class sourceType,final Class targetType,final Number value){  if (targetType.equals(value.getClass())) {    return value;  }  if (targetType.equals(Byte.class)) {    long longValue=value.longValue();    if (longValue > Byte.MAX_VALUE) {      throw new ConversionException(this.toString(sourceType) + " value '" + value+ "' is too large for "+ this.toString(targetType));    }    if (longValue < Byte.MIN_VALUE) {      throw new ConversionException(this.toString(sourceType) + " value '" + value+ "' is too small "+ this.toString(targetType));    }    return new Byte(value.byteValue());  }  if (targetType.equals(Short.class)) {    long longValue=value.longValue();    if (longValue > Short.MAX_VALUE) {      throw new ConversionException(this.toString(sourceType) + " value '" + value+ "' is too large for "+ this.toString(targetType));    }    if (longValue < Short.MIN_VALUE) {      throw new ConversionException(this.toString(sourceType) + " value '" + value+ "' is too small "+ this.toString(targetType));    }    return new Short(value.shortValue());  }  if (targetType.equals(Integer.class)) {    long longValue=value.longValue();    if (longValue > Integer.MAX_VALUE) {      throw new ConversionException(this.toString(sourceType) + " value '" + value+ "' is too large for "+ this.toString(targetType));    }    if (longValue < Integer.MIN_VALUE) {      throw new ConversionException(this.toString(sourceType) + " value '" + value+ "' is too small "+ this.toString(targetType));    }    return new Integer(value.intValue());  }  if (targetType.equals(Long.class)) {    return new Long(value.longValue());  }  if (targetType.equals(Float.class)) {    if (value.doubleValue() > Float.MAX_VALUE) {      throw new ConversionException(this.toString(sourceType) + " value '" + value+ "' is too large for "+ this.toString(targetType));    }    return new Float(value.floatValue());  }  if (targetType.equals(Double.class)) {    return new Double(value.doubleValue());  }  if (targetType.equals(BigDecimal.class)) {    if (value instanceof Float || value instanceof Double) {      return new BigDecimal(value.toString());    } else     if (value instanceof BigInteger) {      return new BigDecimal((BigInteger)value);    } else {      return BigDecimal.valueOf(value.longValue());    }  }  if (targetType.equals(BigInteger.class)) {    if (value instanceof BigDecimal) {      return ((BigDecimal)value).toBigInteger();    } else {      return BigInteger.valueOf(value.longValue());    }  }  String msg=this.toString(this.getClass()) + " cannot handle conversion to '" + this.toString(targetType)+ "'";  throw new ConversionException(msg);}  }
class C{  public int update(DatabaseConnection databaseConnection,T data,ObjectCache objectCache) throws SQLException {  if (mappedUpdate == null) {    mappedUpdate=MappedUpdate.build(databaseType,tableInfo);  }  return mappedUpdate.update(databaseConnection,data,objectCache);}  }
class C{  public void loadThis(){  if ((access & Opcodes.ACC_STATIC) != 0) {    throw new IllegalStateException("no 'this' pointer within static method");  }  mv.visitVarInsn(Opcodes.ALOAD,0);}  }
class C{  public Shape createArrowLeft(final double x,final double y,final double w,final double h){  path.reset();  path.moveTo(x + w,y);  path.lineTo(x,y + h / 2.0);  path.lineTo(x + w,y + h);  path.closePath();  return path;}  }
class C{  public void addCustomMenuItem(final JMenuItem item){  customMenuItems.add(item);}  }
class C{  public void insert(int offset,int value){  if (offset == _pos) {    add(value);    return;  }  ensureCapacity(_pos + 1);  System.arraycopy(_data,offset,_data,offset + 1,_pos - offset);  _data[offset]=value;  _pos++;}  }
class C{  public void reconfigProperties(String propertyTags) throws LocalRepositoryException {  final String prefix=String.format("reconfigProperty(%s): ",propertyTags);  _log.debug(prefix);  final String[] cmd={_SYSTOOL_CMD,_SYSTOOL_RECONFIG_PROPS,propertyTags};  final Exec.Result result=Exec.sudo(_SYSTOOL_TIMEOUT,cmd);  checkFailure(result,prefix);}  }
class C{  private void handleSquareButtonEvent(ActionEvent ae){  for (int i=0; i < 9; i++)   if (ae.getSource() == squareBtns[i])   currState=game.getResult(currState,new XYLocation(i % 3,i / 3));  searchMetrics=null;  update();}  }
class C{  public static void startAllocationRecording(){  if (m_profiler != null) {    m_profiler.startAllocationRecording(10,4 * 1024);  }}  }
class C{  @Override public void connect(SocketAddress endpoint,int timeout) throws IOException {  super.connect(endpoint,timeout);  init();}  }
class C{  @Override public void paint(Graphics g){  g.drawImage(image,0,0,this);  if (!paintCalled) {    paintCalled=true;synchronized (this) {      notifyAll();    }  }}  }
class C{  public void calculateCpuMax(double time){  cpuMax=Math.max(cpuMax,time);}  }
class C{  public boolean hasFeedLink(){  return hasExtension(PositionFeedLink.class);}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public static void loadLibraryFromJar(String path) throws IOException {  if (!path.startsWith("/")) {    throw new IllegalArgumentException("The path has to be absolute (start with '/').");  }  String[] parts=path.split("/");  String filename=(parts.length > 1) ? parts[parts.length - 1] : null;  String prefix="";  String suffix=null;  if (filename != null) {    parts=filename.split("\\.",2);    prefix=parts[0];    suffix=(parts.length > 1) ? "." + parts[parts.length - 1] : null;  }  if (filename == null || prefix.length() < 3) {    throw new IllegalArgumentException("The filename has to be at least 3 characters long.");  }  File temp=File.createTempFile(prefix,suffix);  temp.deleteOnExit();  if (!temp.exists()) {    throw new FileNotFoundException("File " + temp.getAbsolutePath() + " does not exist.");  }  byte[] buffer=new byte[1024];  int readBytes;  InputStream is=NativeUtils.class.getResourceAsStream(path);  if (is == null) {    throw new FileNotFoundException("File " + path + " was not found inside JAR.");  }  OutputStream os=new FileOutputStream(temp);  try {    while ((readBytes=is.read(buffer)) != -1) {      os.write(buffer,0,readBytes);    }  }  finally {    os.close();    is.close();  }  System.load(temp.getAbsolutePath());}  }
class C{  public Context duplicate(ExternalModuleTable exMT){  Context dup=new Context(exMT,errors);  Pair p=this.lastPair;  Pair current=null;  boolean firstTime=true;  while (p != null) {    if (firstTime) {      current=new Pair(null,p.info);      dup.lastPair=current;      firstTime=false;    } else {      current.link=new Pair(null,p.info);      current=current.link;    }    dup.table.put(current.info.getName(),current);    p=p.link;  }  return dup;}  }
class C{  public GeoDistanceSortBuilder sortMode(String sortMode){  this.sortMode=sortMode;  return this;}  }
class C{  public void mouseDragged(MouseEvent me){  if (this.component.getClickedNode() != null) {    this.component.getClickedNode().moveNodeWithOffset(me.getPoint());  }  this.component.repaint();}  }
class C{  public boolean isWinVisibleLw(){  final AppWindowToken atoken=mAppToken;  return mHasSurface && mPolicyVisibility && !mAttachedHidden&& (atoken == null || !atoken.hiddenRequested || atoken.mAppAnimator.animating)&& !mExiting&& !mDestroying;}  }
class C{  boolean isUnregistering(){  return unregistering;}  }
class C{  public I18n(){}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  public void onCreate(Bundle savedInstanceState){  mSlidingMenu=(SlidingMenu)LayoutInflater.from(mActivity).inflate(R.layout.slidingmenumain,null);}  }
class C{  public void testConnect_BlockWithServer() throws IOException {  assertTrue(this.channel1.isBlocking());  connectLocalServer();  datagramSocket1.close();  disconnectAfterConnected();}  }
class C{  private String readText(String name) throws IOException, XmlPullParserException {  parser.require(XmlPullParser.START_TAG,null,name);  String text="";  if (parser.next() == XmlPullParser.TEXT) {    text=parser.getText();    parser.nextTag();  }  parser.require(XmlPullParser.END_TAG,null,name);  return text;}  }
class C{  public CtClass[] mayThrow(){  return super.mayThrow();}  }
class C{  public void queueSongsToPin(boolean getAllPinnedSongs,boolean pinPlaylist,String selection){  if (mPinnedSongsCursor == null || mPinnedSongsCursor.getCount() <= 0) {    if (getAllPinnedSongs == true) {      mPinnedSongsCursor=null;      mIsFetchingPinnedSongs=true;      Toast.makeText(mContext,R.string.getting_pinned_songs,Toast.LENGTH_LONG).show();    } else     if (pinPlaylist == true) {      mPinnedSongsCursor=mDBAccessHelper.getAllSongsInPlaylistSearchable(selection);    } else {      if (selection.equals("TOP_25_PLAYED_SONGS")) {        mPinnedSongsCursor=mDBAccessHelper.getTop25PlayedTracks(selection);      } else       if (selection.equals("RECENTLY_ADDED")) {        mPinnedSongsCursor=mDBAccessHelper.getRecentlyAddedSongs(selection);      } else       if (selection.equals("TOP_RATED")) {        mPinnedSongsCursor=mDBAccessHelper.getTopRatedSongs(selection);      } else       if (selection.equals("RECENTLY_PLAYED")) {        mPinnedSongsCursor=mDBAccessHelper.getRecentlyPlayedSongs(selection);      } else {        mPinnedSongsCursor=mDBAccessHelper.getAllSongsSearchable(selection);      }    }    Intent intent=new Intent(this,PinGMusicSongsService.class);    startService(intent);  } else {    Cursor intermCursor=null;    if (getAllPinnedSongs == true) {      Toast.makeText(mContext,R.string.wait_until_pinning_complete,Toast.LENGTH_SHORT).show();      return;    } else     if (pinPlaylist == true) {      intermCursor=mDBAccessHelper.getAllSongsInPlaylistSearchable(selection);    } else {      if (selection.equals("TOP_25_PLAYED_SONGS")) {        intermCursor=mDBAccessHelper.getTop25PlayedTracks(selection);      } else       if (selection.equals("RECENTLY_ADDED")) {        intermCursor=mDBAccessHelper.getRecentlyAddedSongs(selection);      } else       if (selection.equals("TOP_RATED")) {        intermCursor=mDBAccessHelper.getTopRatedSongs(selection);      } else       if (selection.equals("RECENTLY_PLAYED")) {        intermCursor=mDBAccessHelper.getRecentlyPlayedSongs(selection);      } else {        intermCursor=mDBAccessHelper.getAllSongsSearchable(selection);      }    }    Cursor[] cursorArray={mPinnedSongsCursor,intermCursor};    MergeCursor mergeCursor=new MergeCursor(cursorArray);    mPinnedSongsCursor=(Cursor)mergeCursor;  }}  }
class C{  public static void writeCmd(final int statementId,final ParameterHolder[] parameters,final int parameterCount,MariaDbType[] parameterTypeHeader,final PacketOutputStream pos) throws IOException {  pos.buffer.put(Packet.COM_STMT_EXECUTE);  pos.buffer.putInt(statementId);  pos.buffer.put((byte)0x00);  pos.buffer.putInt(1);  if (parameterCount > 0) {    int nullCount=(parameterCount + 7) / 8;    pos.assureBufferCapacity(nullCount + 1);    byte[] nullBitsBuffer=new byte[nullCount];    for (int i=0; i < parameterCount; i++) {      if (parameters[i].isNullData()) {        nullBitsBuffer[i / 8]|=(1 << (i % 8));      }    }    pos.buffer.put(nullBitsBuffer,0,nullCount);    boolean mustSendHeaderType=false;    if (parameterCount == 0 || parameterTypeHeader[0] == null) {      mustSendHeaderType=true;    } else {      for (int i=0; i < parameterCount; i++) {        if (!parameterTypeHeader[i].equals(parameters[i].getMariaDbType())) {          mustSendHeaderType=true;          break;        }      }    }    if (mustSendHeaderType) {      pos.assureBufferCapacity(1 + parameterCount * 2);      pos.buffer.put((byte)0x01);      for (int i=0; i < parameterCount; i++) {        parameterTypeHeader[i]=parameters[i].getMariaDbType();        pos.buffer.putShort((short)parameterTypeHeader[i].getType());      }    } else {      pos.buffer.put((byte)0x00);    }  }  for (int i=0; i < parameterCount; i++) {    if (!parameters[i].isLongData())     parameters[i].writeBinary(pos);  }}  }
class C{  @SuppressLint("PrivateResource") public IconSwitchCompat(Context context,AttributeSet attrs,int defStyleAttr){  super(context,attrs,defStyleAttr);  mTextPaint=new TextPaint(Paint.ANTI_ALIAS_FLAG);  Resources res=getResources();  mTextPaint.density=res.getDisplayMetrics().density;  TintTypedArray a;  a=TintTypedArray.obtainStyledAttributes(context,attrs,android.support.v7.appcompat.R.styleable.SwitchCompat,defStyleAttr,0);  mThumbDrawable=a.getDrawable(android.support.v7.appcompat.R.styleable.SwitchCompat_android_thumb);  if (mThumbDrawable != null) {    mThumbDrawable.setCallback(this);  }  mTrackDrawable=a.getDrawable(android.support.v7.appcompat.R.styleable.SwitchCompat_track);  if (mTrackDrawable != null) {    mTrackDrawable.setCallback(this);  }  mTextOn=a.getText(android.support.v7.appcompat.R.styleable.SwitchCompat_android_textOn);  mTextOff=a.getText(android.support.v7.appcompat.R.styleable.SwitchCompat_android_textOff);  mShowText=a.getBoolean(android.support.v7.appcompat.R.styleable.SwitchCompat_showText,true);  mThumbTextPadding=a.getDimensionPixelSize(android.support.v7.appcompat.R.styleable.SwitchCompat_thumbTextPadding,0);  mSwitchPadding=a.getDimensionPixelSize(android.support.v7.appcompat.R.styleable.SwitchCompat_switchPadding,0);  mSplitTrack=a.getBoolean(android.support.v7.appcompat.R.styleable.SwitchCompat_splitTrack,false);  final int appearance=a.getResourceId(android.support.v7.appcompat.R.styleable.SwitchCompat_switchTextAppearance,0);  if (appearance != 0) {    setSwitchTextAppearance(context,appearance);  }  mDrawableManager=AppCompatDrawableManager.get();  a.recycle();  a=TintTypedArray.obtainStyledAttributes(context,attrs,R.styleable.IconSwitchCompat,defStyleAttr,0);  mSwitchMinWidth=a.getDimensionPixelSize(R.styleable.IconSwitchCompat_minWidth,0);  Drawable icon=a.getDrawable(R.styleable.IconSwitchCompat_iconDrawable);  Drawable iconChecked=a.getDrawable(R.styleable.IconSwitchCompat_iconDrawableChecked);  DrawableCompat.setTintList(icon,a.getColorStateList(R.styleable.IconSwitchCompat_iconColor));  DrawableCompat.setTintList(iconChecked,a.getColorStateList(R.styleable.IconSwitchCompat_iconColor));  mIconDrawable=new StateListDrawable();  ((StateListDrawable)mIconDrawable).addState(CHECKED_STATE_SET,iconChecked);  ((StateListDrawable)mIconDrawable).addState(new int[]{},icon);  if (mIconDrawable != null) {    mIconDrawable.setCallback(this);  }  a.recycle();  ViewConfiguration config=ViewConfiguration.get(context);  mTouchSlop=config.getScaledTouchSlop();  mMinFlingVelocity=config.getScaledMinimumFlingVelocity();  refreshDrawableState();  setChecked(isChecked());}  }
class C{  public void dispatch(EventType type,Object data){  dispatch(new AppEvent(type,data));}  }
class C{  public boolean isTransient(){  return isTransient;}  }
class C{  public GenericClass(Type type){  if (type instanceof Class<?>) {    this.type=addTypeParameters((Class<?>)type);    this.rawClass=(Class<?>)type;  } else {    if (!handleGenericArraySpecialCase(type)) {      this.type=type;      try {        this.rawClass=erase(type);      } catch (      RuntimeException e) {        this.rawClass=Object.class;      }    }  }}  }
class C{  public static <E>void bubbleSort(E[] list,Comparator<? super E> comparator){  boolean needNextPass=true;  for (int k=1; k < list.length && needNextPass; k++) {    needNextPass=false;    for (int i=0; i < list.length - k; i++) {      if (comparator.compare(list[i],list[i + 1]) > 0) {        E temp=list[i];        list[i]=list[i + 1];        list[i + 1]=temp;        needNextPass=true;      }    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:24.666 -0500",hash_original_method="6E3A450019A5044B67A49D3D4BD4953E",hash_generated_method="A2E9B5AB9555B7EA582BEFC558753027") public Rect[] newArray(int size){  return new Rect[size];}  }
class C{  protected StringBuilder appendToString(){  return null;}  }
class C{  private static boolean isActiveExecutor(List activeNode,String nodeName){  boolean isActiveNode=activeNode.contains(nodeName);  if (isActiveNode) {    return isActiveNode;  } else   if (nodeName.equals("localhost")) {    try {      String hostName=InetAddress.getLocalHost().getHostName();      isActiveNode=activeNode.contains(hostName);    } catch (    UnknownHostException ue) {      isActiveNode=false;    }  } else {    try {      String hostAddress=InetAddress.getLocalHost().getHostAddress();      isActiveNode=activeNode.contains(hostAddress);    } catch (    UnknownHostException ue) {      isActiveNode=false;    }  }  return isActiveNode;}  }
class C{  protected SecretKeyFactory(SecretKeyFactorySpi keyFacSpi,Provider provider,String algorithm){  this.spi=keyFacSpi;  this.provider=provider;  this.algorithm=algorithm;}  }
class C{  public SetContribution(){  super();}  }
class C{  public final double avgCost(){  return m_delegate.avgCost();}  }
class C{  public static int compareTo(int[] n1,int[] n2,int len){  for (int i=0; i < len; i++) {    if (n2[i] == n1[i]) {      continue;    }    if (n2[i] > n1[i]) {      return -1;    } else {      return +1;    }  }  return 0;}  }
class C{  public void populate(int lastIndex){  if (lastIndex < 0) {    throw new IndexOutOfBoundsException("index cannot be negative");  }  final UInt4Vector.Accessor accessor=offsets.getAccessor();  final UInt4Vector.Mutator mutator=offsets.getMutator();  final int lastSet=Math.max(accessor.getValueCount() - 1,0);  final int previousEnd=accessor.get(lastSet);  for (int i=lastSet; i < lastIndex; i++) {    mutator.setSafe(i + 1,previousEnd);  }  mutator.setValueCount(lastIndex + 1);}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  @Override public void reset(){  resetStructure();  try {    if (m_DataBaseConnection != null && m_DataBaseConnection.isConnected()) {      m_DataBaseConnection.disconnectFromDatabase();    }    m_DataBaseConnection=newDatabaseConnection();  } catch (  Exception ex) {    printException(ex);  }  if (m_URL != null) {    setUrl(m_URL);  }  if (m_User != null) {    setUser(m_User);  }  if (m_Password != null) {    setPassword(m_Password);  }  m_orderBy=new ArrayList<String>();  if (m_Keys != null) {    String k=m_Keys;    try {      k=m_env.substitute(k);    } catch (    Exception ex) {    }    setKeys(k);  }  m_inc=false;}  }
class C{  public static float[] toFloatArray(Boolean[] array){  float[] result=new float[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i] ? 1 : 0;  }  return result;}  }
class C{  private void removeSessionListener(final MXSession session){  if (mListenersBySession.containsKey(session)) {    session.getDataHandler().removeListener(mListenersBySession.get(session));    mListenersBySession.remove(session);  }  if (mCallListenersBySession.containsKey(session)) {    session.mCallsManager.removeListener(mCallListenersBySession.get(session));    mCallListenersBySession.remove(session);  }}  }
class C{  private int verifyRow(int targetRow){  int newRow=targetRow;  if (!m_mTable.isOpen()) {    log.severe("Table not open");    return -1;  }  int rows=getRowCount();  if (rows == 0) {    log.fine("No Rows");    return -1;  }  if (newRow >= rows) {    newRow=rows - 1;    log.fine("Set to max Row: " + newRow);  } else   if (newRow < 0) {    newRow=0;    log.fine("Set to first Row");  }  return newRow;}  }
class C{  public static final String timeStampGMT(){  return timeStamp(new Date(),GMT);}  }
class C{  private Figure readPolylineElement(IXMLElement elem) throws IOException {  HashMap<AttributeKey,Object> a=new HashMap<AttributeKey,Object>();  readCoreAttributes(elem,a);  readTransformAttribute(elem,a);  readOpacityAttribute(elem,a);  readLineAttributes(elem,a);  Point2D.Double[] points=toPoints(elem,readAttribute(elem,"points",""));  Figure figure=factory.createPolyline(points,a);  elementObjects.put(elem,figure);  return figure;}  }
class C{  public static String readStringASCII(ByteBuf stream) throws UnsupportedEncodingException {  final int len=stream.readInt();  final byte[] bytes=stream.readBytes(len).array();  return new String(bytes,"US-ASCII");}  }
class C{  @NotNull @ObjectiveCName("isContactModel") public BooleanValueModel isContact(){  return isContact;}  }
class C{  public final void removeAllHelperTexts(@NonNull final CharSequence... helperTexts){  ensureNotNull(helperTexts,"The array may not be null");  removeAllHelperTexts(Arrays.asList(helperTexts));}  }
class C{  public CpcStable(IndependenceTest independenceTest){  if (independenceTest == null) {    throw new NullPointerException();  }  this.independenceTest=independenceTest;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:13.109 -0500",hash_original_method="10315B5B788523AD56571BFBE30F6A43",hash_generated_method="10315B5B788523AD56571BFBE30F6A43") boolean isCandidate(Rect srcRect,Rect destRect,int direction){  if (DroidSafeAndroidRuntime.control)   throw new IllegalArgumentException("direction must be one of " + "{FOCUS_UP, FOCUS_DOWN, FOCUS_LEFT, FOCUS_RIGHT}.");  return ((((direction + srcRect.getTaintInt() + destRect.getTaintInt())) == 1));}  }
class C{  private void prepareNames(){  permitted_names=new ArrayList[9];  if (permittedSubtrees != null) {    for (    GeneralSubtree generalSubtree : permittedSubtrees.getSubtrees()) {      GeneralName name=generalSubtree.getBase();      int tag=name.getTag();      if (permitted_names[tag] == null) {        permitted_names[tag]=new ArrayList<GeneralName>();      }      permitted_names[tag].add(name);    }  }  excluded_names=new ArrayList[9];  if (excludedSubtrees != null) {    for (    GeneralSubtree generalSubtree : excludedSubtrees.getSubtrees()) {      GeneralName name=generalSubtree.getBase();      int tag=name.getTag();      if (excluded_names[tag] == null) {        excluded_names[tag]=new ArrayList<GeneralName>();      }      excluded_names[tag].add(name);    }  }}  }
class C{  public static String decodeString(String s){  return new String(decode(s));}  }
class C{  public TransitionFadeBlack createTFadeBlack(String transitionId,MediaItem afterMediaItem,MediaItem beforeMediaItem,long durationMs,int behavior){  TransitionFadeBlack transitionFB=null;  transitionFB=new TransitionFadeBlack(transitionId,afterMediaItem,beforeMediaItem,durationMs,behavior);  return transitionFB;}  }
class C{  public MatrixReader(Reader reader,int numberOfColumns){  super();  if (reader instanceof CommentedLineReader) {    this.reader=(CommentedLineReader)reader;  } else {    this.reader=new CommentedLineReader(reader);  }  this.numberOfColumns=numberOfColumns;}  }
class C{  @Override public Object next(){  try {    currentEntry=elements[current++];  } catch (  IndexOutOfBoundsException e) {    throw new NoSuchElementException();  }  return currentEntry;}  }
class C{  public DeployDeployableScriptCommand(Configuration configuration,String resourcePath,Deployable deployable){  super(configuration,resourcePath);  this.deployable=deployable;}  }
class C{  public DTMException(Throwable e){  super(e.getMessage());  this.containedException=e;  this.locator=null;}  }
class C{  public String toSpacedString(){  final String original=toString();  final StringBuilder builder=new StringBuilder();  for (int i=0; i < original.length(); i++) {    if (i > 0 && (i % 4) == 0)     builder.append(' ');    builder.append(original.charAt(i));  }  return builder.toString();}  }
class C{  public void testDeleteMetaStore() throws Throwable {  MetaStore meta=createMetaStore();  assertEquals(meta.loadTerm(),0);  assertEquals(meta.loadVote(),0);  meta.storeTerm(1);  meta.storeVote(2);  assertEquals(meta.loadTerm(),1);  assertEquals(meta.loadVote(),2);  meta=createMetaStore();  assertEquals(meta.loadTerm(),1);  assertEquals(meta.loadVote(),2);  storage.deleteMetaStore("test");  meta=createMetaStore();  assertEquals(meta.loadTerm(),0);  assertEquals(meta.loadVote(),0);}  }
class C{  public void interpolatePathDataNode(PathDataNode nodeFrom,PathDataNode nodeTo,float fraction){  for (int i=0; i < nodeFrom.mParams.length; i++) {    mParams[i]=nodeFrom.mParams[i] * (1 - fraction) + nodeTo.mParams[i] * fraction;  }}  }
class C{  public void start(){  for (int i=startedIndex + 1; i < listeners.size(); i++) {    LifecycleListener listener=listeners.get(i).get();    startedIndex=i;    listener.start();  }}  }
class C{  @PostConstruct public void init(){  if (_loader != null) {    _loader.addLoader(this);  }}  }
class C{  private static int numberInstructions(LIR lir,AbstractBlockBase<?>[] sortedBlocks){  int opId=0;  int index=0;  for (  AbstractBlockBase<?> block : sortedBlocks) {    List<LIRInstruction> instructions=lir.getLIRforBlock(block);    int numInst=instructions.size();    for (int j=0; j < numInst; j++) {      LIRInstruction op=instructions.get(j);      op.setId(opId);      index++;      opId+=2;    }  }  assert (index << 1) == opId : "must match: " + (index << 1);  return opId - 2;}  }
class C{  public static void logCompilationUnit(final ASTNode cu){  numMethods+=metrics.countMethods(cu);}  }
class C{  public long backgroundColor(){  return mBackgroundColor;}  }
class C{  protected void displayImageFromContent(String imageUri,ImageView imageView) throws FileNotFoundException {  ContentResolver res=context.getContentResolver();  Uri uri=Uri.parse(imageUri);  InputStream inputStream=res.openInputStream(uri);  Bitmap bitmap=BitmapUtils.loadFromInputStream(inputStream,null);  imageView.setImageBitmap(bitmap);  return;}  }
class C{  public Metadata(MetadataType metadataType,String value,boolean temporal){  this(metadataType,value,null,temporal);}  }
class C{  private void endAllActions(){  this.selectBodyAction.end();  this.editBodyAction.end();  this.selectFixtureAction.end();  this.moveBodyAction.end();  this.rotateBodyAction.end();  this.moveFixtureAction.end();  this.rotateFixtureAction.end();}  }
class C{  @Override public void clear(){  if (attacks.size() > 0) {    attacks.removeAllElements();  }  if (ce() != null) {    clientgui.mechD.wPan.displayMech(ce());  }  updateTarget();  Entity entity=clientgui.getClient().getGame().getEntity(cen);  entity.dodging=true;}  }
class C{  public static String numberString(final int n){switch (n) {case 0:    return "no";case 1:  return "one";case 2:return "two";case 3:return "three";case 4:return "four";case 5:return "five";case 6:return "six";case 7:return "seven";case 8:return "eight";case 9:return "nine";case 10:return "ten";case 11:return "eleven";case 12:return "twelve";default :return Integer.toString(n);}}  }
class C{  private static void sqlJoinQuery(IgniteCache<BinaryObject,BinaryObject> cache){  SqlQuery<BinaryObject,BinaryObject> qry=new SqlQuery<>(Employee.class,"from Employee, \"" + ORGANIZATION_CACHE_NAME + "\".Organization as org "+ "where Employee.organizationId = org._key and org.name = ?");  String organizationName="GridGain";  QueryCursor<Cache.Entry<BinaryObject,BinaryObject>> employees=cache.query(qry.setArgs(organizationName));  System.out.println();  System.out.println(">>> Employees working for " + organizationName + ':');  for (  Cache.Entry<BinaryObject,BinaryObject> e : employees.getAll())   System.out.println(">>>     " + e.getValue());}  }
class C{  public static DigitalOutput digitalOutput(int port){  return dioRegistrar.fetch(port,DigitalOutput.class,null);}  }
class C{  public boolean visitFunction(ExpressionOwner owner,Function func){  if (func instanceof FuncExtFunction) {    String namespace=((FuncExtFunction)func).getNamespace();    m_sroot.getExtensionNamespacesManager().registerExtension(namespace);  } else   if (func instanceof FuncExtFunctionAvailable) {    String arg=((FuncExtFunctionAvailable)func).getArg0().toString();    if (arg.indexOf(":") > 0) {      String prefix=arg.substring(0,arg.indexOf(":"));      String namespace=this.m_sroot.getNamespaceForPrefix(prefix);      m_sroot.getExtensionNamespacesManager().registerExtension(namespace);    }  }  return true;}  }
class C{  public static boolean hasService(Class<?> service,URL[] urls) throws ServiceConfigurationError {  for (  URL url : urls) {    try {      String fullName=prefix + service.getName();      URL u=new URL(url,fullName);      boolean found=parse(service,u);      if (found)       return true;    } catch (    MalformedURLException e) {    }  }  return false;}  }
class C{  public static synchronized boolean isRecordingMacro(){  return recordingMacro;}  }
class C{  public static void sort(Comparable[] a){  sort(a,0,a.length - 1);}  }
class C{  public ScientificIntLiteral createScientificIntLiteral(){  ScientificIntLiteralImpl scientificIntLiteral=new ScientificIntLiteralImpl();  return scientificIntLiteral;}  }
class C{  public boolean isReadOnly() throws SQLException {  return protocol.getReadonly();}  }
class C{  private CTagFunctions(){}  }
class C{  public void mouseClicked(MouseEvent e){}  }
class C{  public void copyContent(){  if (!isPanelSelected()) {    return;  }  getCurrentPanel().copyContent();}  }
class C{  private double evaluateClusters(ArrayList<PROCLUSCluster> clusters,long[][] dimensions,Relation<V> database){  double result=0;  for (int i=0; i < dimensions.length; i++) {    PROCLUSCluster c_i=clusters.get(i);    double[] centroid_i=c_i.centroid;    long[] dims_i=dimensions[i];    double w_i=0;    for (int d=BitsUtil.nextSetBit(dims_i,0); d >= 0; d=BitsUtil.nextSetBit(dims_i,d + 1)) {      w_i+=avgDistance(centroid_i,c_i.objectIDs,database,d);    }    w_i/=dimensions.length;    result+=c_i.objectIDs.size() * w_i;  }  return result / database.size();}  }
class C{  private Watcher initWatcher(SolrZkClient zkClient){  wrappedWatcher=new BufferStateWatcher();  return zkClient.wrapWatcher(wrappedWatcher);}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  private Optional(T value){  this.value=Objects.requireNonNull(value);}  }
class C{  public T caseEventRaisingExpression(EventRaisingExpression object){  return null;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"LDR");  translateAll(environment,instruction,"LDR",instructions);}  }
class C{  public boolean isCachedFile(){  return true;}  }
class C{  public static String encode(byte[] source,int off,int len,byte[] alphabet,boolean doPadding){  byte[] outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE);  int outLen=outBuff.length;  while (doPadding == false && outLen > 0) {    if (outBuff[outLen - 1] != '=') {      break;    }    outLen-=1;  }  return new String(outBuff,0,outLen);}  }
class C{  public static void forceDelete(File file) throws IOException {  if (file.isDirectory()) {    deleteDirectory(file);  } else {    boolean filePresent=file.exists();    if (!file.delete()) {      if (!filePresent) {        throw new FileNotFoundException("File does not exist: " + file);      }      String message="Unable to delete file: " + file;      throw new IOException(message);    }  }}  }
class C{  @Override public void initView(){  editableBox.setSelected(isEditable());  positionableBox.setSelected(allPositionable());  controllingBox.setSelected(allControlling());  showTooltipBox.setSelected(showTooltip());  hiddenBox.setSelected(showHidden());  menuBox.setSelected(getTargetFrame().getJMenuBar().isVisible());}  }
class C{  @Override public synchronized void parse(InputStream in,String baseURI) throws IOException, RDFParseException, RDFHandlerException {  if (in == null) {    throw new IllegalArgumentException("Input stream cannot be 'null'");  }  if (baseURI == null) {    throw new IllegalArgumentException("Base URI cannot be 'null'");  }  InputSource inputSource=new InputSource(new BOMInputStream(in,false));  inputSource.setSystemId(baseURI);  parse(inputSource);}  }
class C{  public static synchronized void closeLog(){  if (sLogStream != null) {    sLogStream.close();    sLogClosed=true;  }  if (sProgressStream != null) {    sProgressStream.close();    sProgressClosed=true;    sProgressStream=null;  }}  }
class C{  public void fireProcessesChanged(){  fireModelChanged(ModelEvent.DISPLAYED_PROCESSES_CHANGED);}  }
class C{  CLDevice[] createSubDevices(Pointer<SizeT> pProperties){}  }
class C{  public int update(Connection conn,String sql,Object[] params,int[] paramTypes) throws SQLException {  if ((paramTypes != null) && params.length != paramTypes.length) {    throw new IllegalArgumentException("Sizes of params and paramTypes must be equal!");  }  PreparedStatement stmt=null;  int rows=0;  try {    stmt=this.prepareStatement(conn,sql);    this.fillStatement(stmt,params,paramTypes);    rows=stmt.executeUpdate();  } catch (  SQLException e) {    this.rethrow(e,sql,params);  } finally {    close(stmt);  }  return rows;}  }
class C{  public PrinterURI(URI uri){  super(uri);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public void mousePressed(MouseEvent e){  if (CLogMgt.isLevelFinest())   log.finest("" + this + " - "+ e);}  }
class C{  public void printFakeHubs(int numberOfHubs){  for (int i=0; i < numberOfTimeBins; i++) {    for (int j=0; j < numberOfHubs; j++) {      System.out.print(hubPrice[0][i]);      System.out.print("\t");    }    System.out.println();  }}  }
class C{  public GuacamoleConfiguration asGuacamoleConfiguration(){  return config;}  }
class C{  @Override public int hashCode(){  return Objects.hashCode(name,url,duration);}  }
class C{  @Override public int available() throws IOException {  if (entrySize - entryOffset > Integer.MAX_VALUE) {    return Integer.MAX_VALUE;  }  return (int)(entrySize - entryOffset);}  }
class C{  @Override public boolean supportsDb(String type){  return true;}  }
class C{  public void put(String key,long value){  put(key,Long.toString(value));}  }
class C{  public List<Bucket> buckets(){  if (buckets == null) {    return new LinkedList<>();  }  return buckets.bucketList();}  }
class C{  public void sendPacket(Packet packet){  if (!done) {    connection.firePacketInterceptors(packet);    try {      queue.put(packet);    } catch (    InterruptedException ie) {      ie.printStackTrace();      return;    }synchronized (queue) {      queue.notifyAll();    }    connection.firePacketSendingListeners(packet);  }}  }
class C{  public GenericItemAdapter<Model,Item> moveModel(int fromPosition,int toPosition){  super.move(fromPosition,toPosition);  return this;}  }
class C{  public static void main(String[] args){  SqlViewerDialog dialog;  dialog=new SqlViewerDialog(null);  dialog.setDefaultCloseOperation(SqlViewerDialog.DISPOSE_ON_CLOSE);  dialog.setVisible(true);  System.out.println("ReturnValue = " + dialog.getReturnValue());  if (dialog.getReturnValue() == JOptionPane.OK_OPTION) {    System.out.println("URL      = " + dialog.getURL());    System.out.println("User     = " + dialog.getUser());    System.out.println("Password = " + dialog.getPassword().replaceAll(".","*"));    System.out.println("Query    = " + dialog.getQuery());  }}  }
class C{  public void mousePressed(MouseEvent e){synchronized (mouseLock) {    mouseX=StdDraw.userX(e.getX());    mouseY=StdDraw.userY(e.getY());    mousePressed=true;  }}  }
class C{  private void nextChunk() throws IOException {  chunkSize=getChunkSize();  if (chunkSize < 0) {    throw new MalformedChunkCodingException("Negative chunk size");  }  bof=false;  pos=0;  if (chunkSize == 0) {    eof=true;    parseTrailerHeaders();  }}  }
class C{  public static float convertPixelsToDp(float px){  if (mMetrics == null) {    Log.e("MPChartLib-Utils","Utils NOT INITIALIZED. You need to call Utils.init(...) at least once before calling Utils.convertPixelsToDp(...). Otherwise conversion does not take place.");    return px;  }  DisplayMetrics metrics=mMetrics;  float dp=px / (metrics.densityDpi / 160f);  return dp;}  }
class C{  public void testPL2() throws IOException {  SimilarityBase sim=new DFRSimilarity(new BasicModelP(),new AfterEffectL(),new NormalizationH2());  float tfn=(float)(FREQ * SimilarityBase.log2(1 + AVG_FIELD_LENGTH / DOC_LEN));  float l=1.0f / (tfn + 1.0f);  float lambda=(1.0f + TOTAL_TERM_FREQ) / (1f + NUMBER_OF_DOCUMENTS);  float p=(float)(tfn * SimilarityBase.log2(tfn / lambda) + (lambda + 1 / (12 * tfn) - tfn) * SimilarityBase.log2(Math.E) + 0.5 * SimilarityBase.log2(2 * Math.PI * tfn));  float gold=l * p;  correctnessTestCore(sim,gold);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean isInSearchRange(final byte[] dividingRecord){  final boolean dimShownToBeLargerThanMin[]=new boolean[numDimensions];  final boolean dimShownToBeSmallerThanMax[]=new boolean[numDimensions];  int firstDifferingByte=0;  for (; firstDifferingByte < dividingRecord.length; firstDifferingByte++) {    if (dividingRecord[firstDifferingByte] != searchMinZOrder[firstDifferingByte] || dividingRecord[firstDifferingByte] != searchMaxZOrder[firstDifferingByte]) {      break;    }  }  int unsatisfiedConstraintsCtr=numDimensions * 2;  for (int i=firstDifferingByte * Byte.SIZE; i < dividingRecord.length * Byte.SIZE && unsatisfiedConstraintsCtr > 0; i++) {    final int dimension=i % numDimensions;    final boolean divRecordBitSet=BytesUtil.getBit(dividingRecord,i);    if (!dimShownToBeLargerThanMin[dimension]) {      final boolean searchMinBitSet=BytesUtil.getBit(searchMinZOrder,i);      if (divRecordBitSet && !searchMinBitSet) {        dimShownToBeLargerThanMin[dimension]=true;        unsatisfiedConstraintsCtr--;      } else       if (!divRecordBitSet && searchMinBitSet) {        return false;      }    }    if (!dimShownToBeSmallerThanMax[dimension]) {      final boolean searchMaxBitSet=BytesUtil.getBit(searchMaxZOrder,i);      if (!divRecordBitSet && searchMaxBitSet) {        dimShownToBeSmallerThanMax[dimension]=true;        unsatisfiedConstraintsCtr--;      } else       if (divRecordBitSet && !searchMaxBitSet) {        return false;      }    }  }  return true;}  }
class C{  private void convertToNV21(int k){  byte[] buffer=new byte[3 * mSize / 2];  int stride=mWidth, sliceHeight=mHeight;  int colorFormat=mDecoderColorFormat;  boolean planar=false;  if (mDecOutputFormat != null) {    MediaFormat format=mDecOutputFormat;    if (format != null) {      if (format.containsKey("slice-height")) {        sliceHeight=format.getInteger("slice-height");        if (sliceHeight < mHeight)         sliceHeight=mHeight;      }      if (format.containsKey("stride")) {        stride=format.getInteger("stride");        if (stride < mWidth)         stride=mWidth;      }      if (format.containsKey(MediaFormat.KEY_COLOR_FORMAT)) {        if (format.getInteger(MediaFormat.KEY_COLOR_FORMAT) > 0) {          colorFormat=format.getInteger(MediaFormat.KEY_COLOR_FORMAT);        }      }    }  }switch (colorFormat) {case MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV420SemiPlanar:case MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV420PackedSemiPlanar:case MediaCodecInfo.CodecCapabilities.COLOR_TI_FormatYUV420PackedSemiPlanar:    planar=false;  break;case MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV420Planar:case MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV420PackedPlanar:planar=true;break;}for (int i=0; i < mSize; i++) {if (i % mWidth == 0) i+=stride - mWidth;buffer[i]=mDecodedVideo[k][i];}if (!planar) {for (int i=0, j=0; j < mSize / 4; i+=1, j+=1) {if (i % mWidth / 2 == 0) i+=(stride - mWidth) / 2;buffer[mSize + 2 * j + 1]=mDecodedVideo[k][stride * sliceHeight + 2 * i];buffer[mSize + 2 * j]=mDecodedVideo[k][stride * sliceHeight + 2 * i + 1];}} else {for (int i=0, j=0; j < mSize / 4; i+=1, j+=1) {if (i % mWidth / 2 == 0) i+=(stride - mWidth) / 2;buffer[mSize + 2 * j + 1]=mDecodedVideo[k][stride * sliceHeight + i];buffer[mSize + 2 * j]=mDecodedVideo[k][stride * sliceHeight * 5 / 4 + i];}}mDecodedVideo[k]=buffer;}  }
class C{  public int length(){  return 18 + info.length + exceptions.size() * 8 + AttributeInfo.getLength(attributes);}  }
class C{  public T caseWord_(Word_ object){  return null;}  }
class C{  public DigicoreVehiclesReader(DigicoreVehicles vehicles){  this.vehicles=vehicles;}  }
class C{  MyRectangle2D(){  this(0,0,1,1);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:14.187 -0400",hash_original_method="DB3E1C941A9335F00C3790ED360475B2",hash_generated_method="669A997AA46BE6BD8344E04E659EA264") public YuvImage(byte[] yuv,int format,int width,int height,int[] strides){  if (format != ImageFormat.NV21 && format != ImageFormat.YUY2) {    throw new IllegalArgumentException("only support ImageFormat.NV21 " + "and ImageFormat.YUY2 for now");  }  if (width <= 0 || height <= 0) {    throw new IllegalArgumentException("width and height must large than 0");  }  if (yuv == null) {    throw new IllegalArgumentException("yuv cannot be null");  }  if (strides == null) {    mStrides=calculateStrides(width,format);  } else {    mStrides=strides;  }  mData=yuv;  mFormat=format;  mWidth=width;  mHeight=height;}  }
class C{  public static long parseDateAsEpoch(String dateStr){  try {    return DateUtils.parseDate(dateStr).getTime();  } catch (  DateParseException e) {    return 0;  }}  }
class C{  public ToParentBlockJoinSortField(String field,Type type,boolean reverse,boolean order,BitSetProducer parentFilter,BitSetProducer childFilter){  super(field,type,reverse);  this.order=order;  this.parentFilter=parentFilter;  this.childFilter=childFilter;}  }
class C{  public TimezoneUrl(String url){  super(url);}  }
class C{  public void selectAllSubsets(){  partition.clearSelection();  for (int i=0; i < partition.getNumberOfSubsets(); i++) {    partition.selectSubset(i);  }}  }
class C{  public static final CButton createCancelButton(String text){  AppsAction aa=new AppsAction(A_CANCEL,KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE,0),text);  CButton button=(CButton)aa.getButton();  button.setMargin(s_insets);  return button;}  }
class C{  public UserEntities(List<UserEntity> users){  this.users=users;}  }
class C{  public static double angle(Point pt1,Point pt2,Point pt0){  double dx1=pt1.x - pt0.x;  double dy1=pt1.y - pt0.y;  double dx2=pt2.x - pt0.x;  double dy2=pt2.y - pt0.y;  return (dx1 * dx2 + dy1 * dy2) / Math.sqrt((dx1 * dx1 + dy1 * dy1) * (dx2 * dx2 + dy2 * dy2) + 1e-10);}  }
class C{  private boolean verifyReCaptcha(final PwmRequest pwmRequest) throws PwmUnrecoverableException {  final PwmApplication pwmApplication=pwmRequest.getPwmApplication();  final PasswordData privateKey=pwmApplication.getConfig().readSettingAsPassword(PwmSetting.RECAPTCHA_KEY_PRIVATE);  final StringBuilder bodyText=new StringBuilder();  bodyText.append("secret=").append(privateKey.getStringValue());  bodyText.append("&");  bodyText.append("remoteip=").append(pwmRequest.getSessionLabel().getSrcAddress());  bodyText.append("&");  bodyText.append("response=").append(pwmRequest.readParameterAsString("g-recaptcha-response"));  try {    final PwmHttpClientRequest clientRequest=new PwmHttpClientRequest(HttpMethod.POST,pwmApplication.getConfig().readAppProperty(AppProperty.RECAPTCHA_VALIDATE_URL),bodyText.toString(),Collections.singletonMap("Content-Type",PwmConstants.ContentTypeValue.form.getHeaderValue()));    LOGGER.debug(pwmRequest,"sending reCaptcha verification request");    final PwmHttpClient client=new PwmHttpClient(pwmRequest.getPwmApplication(),pwmRequest.getSessionLabel());    final PwmHttpClientResponse clientResponse=client.makeRequest(clientRequest);    if (clientResponse.getStatusCode() != HttpServletResponse.SC_OK) {      throw new PwmUnrecoverableException(new ErrorInformation(PwmError.ERROR_CAPTCHA_API_ERROR,"unexpected HTTP status code (" + clientResponse.getStatusCode() + ")"));    }    final JsonElement responseJson=new JsonParser().parse(clientResponse.getBody());    final JsonObject topObject=responseJson.getAsJsonObject();    if (topObject != null && topObject.has("success")) {      boolean success=topObject.get("success").getAsBoolean();      if (success) {        return true;      }      if (topObject.has("error-codes")) {        final List<String> errorCodes=new ArrayList<>();        for (        final JsonElement element : topObject.get("error-codes").getAsJsonArray()) {          final String errorCode=element.getAsString();          errorCodes.add(errorCode);        }        LOGGER.debug(pwmRequest,"recaptcha error codes: " + JsonUtil.serializeCollection(errorCodes));      }    }  } catch (  Exception e) {    final String errorMsg="unexpected error during reCaptcha API execution: " + e.getMessage();    LOGGER.error(errorMsg,e);    final ErrorInformation errorInfo=new ErrorInformation(PwmError.ERROR_CAPTCHA_API_ERROR,errorMsg);    final PwmUnrecoverableException pwmE=new PwmUnrecoverableException(errorInfo);    pwmE.initCause(e);    throw pwmE;  }  return false;}  }
class C{  @Override public String toString(){  return this.name;}  }
class C{  @Override public int available() throws IOException {  if (inf.needsInput()) {    return 0;  }  return super.available();}  }
class C{  public AccountHeaderBuilder withSelectionListEnabledForSingleProfile(boolean selectionListEnabledForSingleProfile){  this.mSelectionListEnabledForSingleProfile=selectionListEnabledForSingleProfile;  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:40.664 -0500",hash_original_method="07F73711C3AF49FFEB328A8FE4F43045",hash_generated_method="1B390410608A03DC0D9E987E9EB27ABB") public ClipData(ClipDescription description,Item item){  mClipDescription=description;  if (item == null) {    throw new NullPointerException("item is null");  }  mIcon=null;  mItems.add(item);}  }
class C{  @Override public Request<List<Workspace>> all(){  List<Workspace> workspacesToReturn=new ArrayList<>();  for (  Workspace dummyWorkspace : workspaces.values()) {    workspacesToReturn.add(dummyWorkspace);  }  return new DummyRequest<>(workspacesToReturn);}  }
class C{  @Nullable public static ClassLoader detectObjectClassLoader(@Nullable Object obj){  if (obj == null)   return null;  if (obj instanceof GridPeerDeployAware)   return ((GridPeerDeployAware)obj).classLoader();  return detectClassLoader(obj.getClass());}  }
class C{  public ResultSet read(Reader reader,String[] colNames) throws IOException {  init(null,null);  this.input=reader;  return readResultSet(colNames);}  }
class C{  public static void renderTemplate(String templateLocation,String templateString,Map<String,Object> context,Appendable outWriter,boolean useCache) throws TemplateException, IOException {  if (templateString == null) {    renderTemplate(templateLocation,context,outWriter);  } else {    renderTemplateFromString(templateString,templateLocation,context,outWriter,useCache);  }}  }
class C{  public SassList(){}  }
class C{  public JSONArray(Collection collection){  this.myArrayList=new ArrayList();  if (collection != null) {    Iterator iter=collection.iterator();    while (iter.hasNext()) {      Object o=iter.next();      this.myArrayList.add(JSONObject.wrap(o));    }  }}  }
class C{  @Override protected boolean disconnectInput(Node inputNode,int inputNodeOutputIndex){  int deleteIndex=-1;  boolean removed=false;  int numberOfInputs=inputNodes.length;  do {    deleteIndex=-1;    for (int i=0; i < inputNodes.length; i++) {      if (inputNode == inputNodes[i] && (inputNodeOutputIndex == -1 || inputNodeOutputIndex == inputNodeOutputIndices[i])) {        deleteIndex=i;        break;      }    }    if (deleteIndex >= 0) {      for (int i=deleteIndex + 1; i < inputNodes.length; i++) {        inputNodes[i - 1]=inputNodes[i];        inputNodeOutputIndices[i - 1]=inputNodeOutputIndices[i];        weights[i]=weights[i + 1];        weightChanges[i]=weightChanges[i + 1];        inputNodes[i - 1].outputNodeInputIndices[inputNodeOutputIndices[i - 1]]=i - 1;      }      numberOfInputs--;      removed=true;    }  } while (inputNodeOutputIndex == -1 && deleteIndex != -1);  Node[] newInputNodes=new Node[numberOfInputs];  System.arraycopy(inputNodes,0,newInputNodes,0,numberOfInputs);  inputNodes=newInputNodes;  int[] newInputNodeOutputIndices=new int[numberOfInputs];  System.arraycopy(inputNodeOutputIndices,0,newInputNodeOutputIndices,0,numberOfInputs);  inputNodeOutputIndices=newInputNodeOutputIndices;  double[] newWeights=new double[numberOfInputs + 1];  System.arraycopy(weights,0,newWeights,0,numberOfInputs + 1);  weights=newWeights;  double[] newWeightChanges=new double[numberOfInputs + 1];  System.arraycopy(weightChanges,0,newWeightChanges,0,numberOfInputs + 1);  weightChanges=newWeightChanges;  return removed;}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  private void writeJSLicence(final Writer writer) throws IOException {  writer.write("<script>");  writer.write("/*");  writer.write("@licstart  The following is the entire license notice for the");  writer.write("JavaScript code in this page.");  writer.write("");  writer.write("Copyright (C) 2013-2015 by Michael Peter Christen and reger");  writer.write("");  writer.write("The JavaScript code in this page is free software: you can redistribute it and/or");  writer.write("modify it under the terms of the GNU General Public License");  writer.write("as published by the Free Software Foundation; either version 2");  writer.write("of the License, or (at your option) any later version.");  writer.write("");  writer.write("This program is distributed in the hope that it will be useful,");  writer.write("but WITHOUT ANY WARRANTY; without even the implied warranty of");  writer.write("MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the");  writer.write("GNU General Public License for more details.");  writer.write("");  writer.write("You should have received a copy of the GNU General Public License");  writer.write("along with this program; if not, write to the Free Software");  writer.write("Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.");  writer.write("");  writer.write("@licend  The above is the entire license notice");  writer.write("for the JavaScript code in this page.");  writer.write("*/");  writer.write("</script>");}  }
class C{  private static boolean skipOperand(final COperandTreeNode treeNode,final boolean hasExpressionList){  if ("!".equals(treeNode.getValue())) {    return true;  }  if ("dword".equals(treeNode.getValue())) {    return true;  }  if (hasExpressionList && (treeNode.getType() == ExpressionType.EXPRESSION_LIST)) {    return true;  }  return false;}  }
class C{  public String toString(int indentFactor){  return toString(indentFactor,0);}  }
class C{  public static BufferedImage[] buildMipmaps(BufferedImage image){  if (image == null) {    String message=Logging.getMessage("nullValue.ImageIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  int mipmapImageType=getMipmapType(image.getType());  int maxLevel=getMaxMipmapLevel(image.getWidth(),image.getHeight());  return buildMipmaps(image,mipmapImageType,maxLevel);}  }
class C{  protected int findTokenSeparator(int from){  if (from < 0) {    throw new IllegalArgumentException("Search position must not be negative: " + from);  }  boolean found=false;  final int to=this.currentHeader.length();  while (!found && (from < to)) {    final char ch=this.currentHeader.charAt(from);    if (isTokenSeparator(ch)) {      found=true;    } else     if (isWhitespace(ch)) {      from++;    } else     if (isTokenChar(ch)) {      throw new ParseException("Tokens without separator (pos " + from + "): "+ this.currentHeader);    } else {      throw new ParseException("Invalid character after token (pos " + from + "): "+ this.currentHeader);    }  }  return from;}  }
class C{  @Nullable public HTMLMasonMethodDefinition findMethodDefinitionByNameInParents(String name){  HTMLMasonFileImpl parentComponent=getParentComponent();  return parentComponent == null ? null : parentComponent.findMethodDefinitionByNameInThisOrParents(name);}  }
class C{  public boolean isValue(){  return value;}  }
class C{  public Plugin(RajawaliRenderer renderer,boolean createVBOs){  mGeometry=new Geometry3D();  mRenderer=renderer;  init(createVBOs);}  }
class C{  public int readInt(byte[] buf,int offset,int length) throws IOException {  if (!_didGet) {    getConnInput();  }  if (_isRequestDone) {    return -1;  }  try {    int len=length;    if (_isChunked) {      if (_chunkLength == 0) {        int ch;        for (ch=_rs.read(); ch >= 0 && (ch == '\r' || ch == '\n' || ch == ' '); ch=_rs.read()) {        }        for (; ch >= 0 && ch != '\n'; ch=_rs.read()) {          if (ch >= '0' && ch <= '9')           _chunkLength=16 * _chunkLength + ch - '0'; else           if (ch >= 'a' && ch <= 'f')           _chunkLength=16 * _chunkLength + ch - 'a' + 10; else           if (ch >= 'A' && ch <= 'F')           _chunkLength=16 * _chunkLength + ch - 'A' + 10;        }        if (_chunkLength == 0) {          _isRequestDone=true;          return -1;        }      } else       if (_chunkLength < 0)       return -1;      if (_chunkLength < len)       len=_chunkLength;    } else     if (_contentLength < 0) {    } else     if (_contentLength == 0) {      _isRequestDone=true;      return -1;    } else     if (_contentLength < len)     len=_contentLength;    len=_rs.read(buf,offset,len);    if (len < 0) {    } else     if (_isChunked)     _chunkLength-=len; else     if (_contentLength > 0)     _contentLength-=len;    return len;  } catch (  IOException e) {    _isKeepalive=false;    throw e;  }catch (  RuntimeException e) {    _isKeepalive=false;    throw e;  }}  }
class C{  public TagDispatcherBuilder enableDispatchingOnUiThread(boolean enableDispatchingOnUiThread){  this.enableDispatchingOnUiThread=enableDispatchingOnUiThread;  return this;}  }
class C{  public void removePolicy() throws IOException, InterruptedException {  Actions actions=new Actions(driver);  driver.findElement(By.xpath(uiElementMapper.getElement("emm.policy.remove.select.button.xpath"))).click();  WebElement policyFile=driver.findElement(By.xpath(uiElementMapper.getElement("emm.policy.remove.file")));  actions.moveToElement(policyFile,0,10).click().build().perform();  driver.findElement(By.xpath(uiElementMapper.getElement("emm.policy.unpublish.button.xpath"))).click();  CommonUtil.waitAndClick(driver,By.xpath(uiElementMapper.getElement("emm.policy.unpublish.yes.button.xpath")));  CommonUtil.waitAndClick(driver,By.xpath(uiElementMapper.getElement("emm.policy.unpublish.ok.button.xpath")));  driver.findElement(By.xpath(uiElementMapper.getElement("emm.policy.remove.select.button.xpath"))).click();  policyFile=driver.findElement(By.xpath(uiElementMapper.getElement("emm.policy.remove.file")));  actions.moveToElement(policyFile,0,10).click().build().perform();  driver.findElement(By.xpath(uiElementMapper.getElement("emm.policy.remove.button"))).click();  CommonUtil.waitAndClick(driver,By.xpath(uiElementMapper.getElement("emm.policy.remove.yes.link.xpath")));  WebDriverWait wait=new WebDriverWait(driver,10);  By successMessageLocator=By.xpath(uiElementMapper.getElement("emm.policy.remove.removed.msg"));  wait.until(ExpectedConditions.invisibilityOfElementWithText(successMessageLocator,"Do you really want to remove the selected policy(s)?"));  String resultText=driver.findElement(successMessageLocator).getText();  if (!resultText.contains("Done. Selected policy was successfully removed.")) {    throw new IllegalStateException("Policy was not removed");  }}  }
class C{  public void removeAttribute(Object key){  int n=keys.size();  for (int i=0; i < n; i++) {    if (keys.elementAt(i).equals(key)) {      keys.removeElementAt(i);      data.removeElementAt(i);      return;    }  }}  }
class C{  public RegisterServerResponse clone(){  RegisterServerResponse result=new RegisterServerResponse();  result.ResponseHeader=ResponseHeader == null ? null : ResponseHeader.clone();  return result;}  }
class C{  public void write(OutputNode node,Object source,Class expect) throws Exception {  Class type=source.getClass();  String root=getName(type);  if (root == null) {    throw new RootException("Root annotation required for %s",type);  }  write(node,source,expect,root);}  }
class C{  @Override public void requestResources(SamzaResourceRequest resourceRequest){  final int DEFAULT_PRIORITY=0;  log.info("Requesting resources on  " + resourceRequest.getPreferredHost() + " for container "+ resourceRequest.getContainerID());  int memoryMb=resourceRequest.getMemoryMB();  int cpuCores=resourceRequest.getNumCores();  String containerLabel=yarnConfig.getContainerLabel();  String preferredHost=resourceRequest.getPreferredHost();  Resource capability=Resource.newInstance(memoryMb,cpuCores);  Priority priority=Priority.newInstance(DEFAULT_PRIORITY);  AMRMClient.ContainerRequest issuedRequest;  if (preferredHost.equals("ANY_HOST")) {    log.info("Making a request for ANY_HOST " + preferredHost);    issuedRequest=new AMRMClient.ContainerRequest(capability,null,null,priority,true,containerLabel);  } else {    log.info("Making a preferred host request on " + preferredHost);    issuedRequest=new AMRMClient.ContainerRequest(capability,new String[]{preferredHost},null,priority,true,containerLabel);  }synchronized (lock) {    requestsMap.put(resourceRequest,issuedRequest);    amClient.addContainerRequest(issuedRequest);  }}  }
class C{  public boolean shouldStripWhiteSpace(org.apache.xpath.XPathContext support,org.w3c.dom.Element targetElement) throws TransformerException {  StylesheetRoot sroot=this.getStylesheetRoot();  return (null != sroot) ? sroot.shouldStripWhiteSpace(support,targetElement) : false;}  }
class C{  public static double mean(double[] x){  double mean=0;  for (  double e : x) {    mean+=e;  }  return mean / x.length;}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  private void processDiscoveredTieringPolicies(StorageSystem system,List<TieringPolicy> tpList){  List<AutoTieringPolicy> newPolicies=new ArrayList<AutoTieringPolicy>();  List<AutoTieringPolicy> allPolicies=new ArrayList<AutoTieringPolicy>();  List<AutoTieringPolicy> updatePolicies=new ArrayList<AutoTieringPolicy>();  for (  TieringPolicy tpFromResponse : tpList) {    if (Integer.parseInt(tpFromResponse.getPolicyID()) > 5) {      _logger.debug("Ignoring custom policy {} on system {} ",tpFromResponse.getPolicyID(),system.getNativeGuid());      continue;    }    String nativeGuid=NativeGUIDGenerator.generateAutoTierPolicyNativeGuid(system.getNativeGuid(),getTieringPolicyLabel(tpFromResponse.getPolicyID()),NativeGUIDGenerator.AUTO_TIERING_POLICY);    AutoTieringPolicy tieringPolicy=checkTieringPolicyExistsInDB(nativeGuid);    boolean isNew=false;    if (null == tieringPolicy) {      isNew=true;      tieringPolicy=new AutoTieringPolicy();      tieringPolicy.setId(URIUtil.createId(AutoTieringPolicy.class));      tieringPolicy.setPolicyName(getTieringPolicyLabel(tpFromResponse.getPolicyID()));      tieringPolicy.setStorageSystem(system.getId());      tieringPolicy.setNativeGuid(nativeGuid);      tieringPolicy.setLabel(getTieringPolicyLabel(tpFromResponse.getPolicyID()));      tieringPolicy.setSystemType(Type.hds.name());      newPolicies.add(tieringPolicy);    }    tieringPolicy.setPolicyEnabled(Boolean.TRUE);    tieringPolicy.setProvisioningType(ProvisioningType.ThinlyProvisioned.name());    if (!isNew) {      updatePolicies.add(tieringPolicy);    }  }  _dbClient.createObject(newPolicies);  _dbClient.persistObject(updatePolicies);  allPolicies.addAll(newPolicies);  allPolicies.addAll(updatePolicies);}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMFontFaceNameElement(prefix,(AbstractDocument)doc);}  }
class C{  private int readAnnotationValues(int v,final char[] buf,final boolean named,final AnnotationVisitor av){  int i=readUnsignedShort(v);  v+=2;  if (named) {    for (; i > 0; --i) {      v=readAnnotationValue(v + 2,buf,readUTF8(v,buf),av);    }  } else {    for (; i > 0; --i) {      v=readAnnotationValue(v,buf,null,av);    }  }  if (av != null) {    av.visitEnd();  }  return v;}  }
class C{  public static DeleteRepositoryRequest deleteRepositoryRequest(String name){  return new DeleteRepositoryRequest(name);}  }
class C{  private void sortBooks(){  if (currentProfile.getOrderAllBooksBySeries()) {    sortBooksBySeries(getBooks());  } else {    sortBooksByTitle(getBooks());  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static void cursorShortToContentValuesIfPresent(Cursor cursor,ContentValues values,String column){  final int index=cursor.getColumnIndex(column);  if (index != -1 && !cursor.isNull(index)) {    values.put(column,cursor.getShort(index));  }}  }
class C{  public boolean containsKey(int key){  return contains(key);}  }
class C{  public FadingButton(String label){  super(label);  setOpaque(false);  timer=new Timer(30,this);  addActionListener(this);}  }
class C{  public void forceFullScan() throws IOException {  final Set<WorkspaceWatcher> watchers=new HashSet<WorkspaceWatcher>();  for (  final TFSRepositoryPathWatcher watcher : getPathWatchers()) {    watchers.add(watcher.getWatcher());  }  for (  final WorkspaceWatcher watcher : watchers) {    watcher.forceFullScan();  }}  }
class C{  public static boolean isBoolean(char[] text,int offset,int length){  if (text == null || length == 0) {    return false;  }  if (length == 1) {    return text[offset] == '0' || text[offset] == '1';  }  if (length == 2) {    return (text[offset] == 'n' && text[offset + 1] == 'o') || (text[offset] == 'o' && text[offset + 1] == 'n');  }  if (length == 3) {    return (text[offset] == 'o' && text[offset + 1] == 'f' && text[offset + 2] == 'f') || (text[offset] == 'y' && text[offset + 1] == 'e' && text[offset + 2] == 's');  }  if (length == 4) {    return (text[offset] == 't' && text[offset + 1] == 'r' && text[offset + 2] == 'u' && text[offset + 3] == 'e');  }  if (length == 5) {    return (text[offset] == 'f' && text[offset + 1] == 'a' && text[offset + 2] == 'l' && text[offset + 3] == 's' && text[offset + 4] == 'e');  }  return false;}  }
class C{  private static void SetDoubleArrayRegion(JNIEnvironment env,int arrayJREF,int startIndex,int length,Address bufAddress){  if (traceJNI)   VM.sysWrite("JNI called: SetDoubleArrayRegion  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    double[] destinationArray=(double[])env.getJNIRef(arrayJREF);    if ((startIndex < 0) || (startIndex + length > destinationArray.length)) {      env.recordException(new ArrayIndexOutOfBoundsException());      return;    }    Memory.memcopy(Magic.objectAsAddress(destinationArray).plus(startIndex << LOG_BYTES_IN_DOUBLE),bufAddress,length << LOG_BYTES_IN_DOUBLE);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);  }}  }
class C{  public Matrix4d fma4x3(Matrix4dc other,double otherFactor){  return fma4x3(other,otherFactor,this);}  }
class C{  protected Shape createArcShape(double x,double y,double fwidth,double fheight){  return new Arc2D.Double(x,y,fwidth,fheight,start,extent,arcType);}  }
class C{  public static boolean isFileExist(String filePath){  if (Handler_String.isBlank(filePath)) {    return false;  }  File file=new File(filePath);  return (file.exists() && file.isFile());}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  Node clonedNode;  Node parentNode;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(1);  clonedNode=employeeNode.cloneNode(false);  parentNode=clonedNode.getParentNode();  assertNull("nodeCloneGetParentNullAssert1",parentNode);}  }
class C{  public static boolean isCacheKey(int optionNumber){  return !isNoCacheKey(optionNumber);}  }
class C{  public void registerResources(Context context){  if (context != null) {    this.myContext=context;    if (!receiverRegistered) {      registerReceiver(this);    }  }}  }
class C{  private static String toRegexPattern(String globPattern,boolean isDos){  boolean inGroup=false;  StringBuilder regex=new StringBuilder("^");  int i=0;  while (i < globPattern.length()) {    char c=globPattern.charAt(i++);switch (c) {case '\\':      if (i == globPattern.length()) {        throw new PatternSyntaxException("No character to escape",globPattern,i - 1);      }    char next=globPattern.charAt(i++);  if (isGlobMeta(next) || isRegexMeta(next)) {    regex.append('\\');  }regex.append(next);break;case '/':if (isDos) {regex.append("\\\\");} else {regex.append(c);}break;case '[':if (isDos) {regex.append("[[^\\\\]&&[");} else {regex.append("[[^/]&&[");}if (next(globPattern,i) == '^') {regex.append("\\^");i++;} else {if (next(globPattern,i) == '!') {regex.append('^');i++;}if (next(globPattern,i) == '-') {regex.append('-');i++;}}boolean hasRangeStart=false;char last=0;while (i < globPattern.length()) {c=globPattern.charAt(i++);if (c == ']') {break;}if (c == '/' || (isDos && c == '\\')) {throw new PatternSyntaxException("Explicit 'name separator' in class",globPattern,i - 1);}if (c == '\\' || c == '[' || c == '&' && next(globPattern,i) == '&') {regex.append('\\');}regex.append(c);if (c == '-') {if (!hasRangeStart) {throw new PatternSyntaxException("Invalid range",globPattern,i - 1);}if ((c=next(globPattern,i++)) == EOL || c == ']') {break;}if (c < last) {throw new PatternSyntaxException("Invalid range",globPattern,i - 3);}regex.append(c);hasRangeStart=false;} else {hasRangeStart=true;last=c;}}if (c != ']') {throw new PatternSyntaxException("Missing ']",globPattern,i - 1);}regex.append("]]");break;case '{':if (inGroup) {throw new PatternSyntaxException("Cannot nest groups",globPattern,i - 1);}regex.append("(?:(?:");inGroup=true;break;case '}':if (inGroup) {regex.append("))");inGroup=false;} else {regex.append('}');}break;case ',':if (inGroup) {regex.append(")|(?:");} else {regex.append(',');}break;case '*':if (next(globPattern,i) == '*') {regex.append(".*");i++;} else {if (isDos) {regex.append("[^\\\\]*");} else {regex.append("[^/]*");}}break;case '?':if (isDos) {regex.append("[^\\\\]");} else {regex.append("[^/]");}break;default :if (isRegexMeta(c)) {regex.append('\\');}regex.append(c);}}if (inGroup) {throw new PatternSyntaxException("Missing '}",globPattern,i - 1);}return regex.append('$').toString();}  }
class C{  public synchronized void unsetPriority(){  unsetPriority(false);}  }
class C{  public void send(String send){  try {    oswr.append(send);    oswr.flush();    _log.debug("Sent: " + send);  } catch (  IOException ex) {    String msg="Exception sending string: " + send + " "+ ex.getLocalizedMessage();    _log.error(msg);  }}  }
class C{  public Tradingday findTradingdayById(Integer id){  try {    EntityManager entityManager=EntityManagerHelper.getEntityManager();    entityManager.getTransaction().begin();    Tradingday instance=entityManager.find(Tradingday.class,id);    if (null != instance) {      for (      Tradestrategy tradestrategy : instance.getTradestrategies()) {        tradestrategy.getStrategy().getIndicatorSeries().size();        tradestrategy.getTradeOrders().size();      }    }    entityManager.getTransaction().commit();    return instance;  } catch (  Exception re) {    EntityManagerHelper.rollback();    throw re;  } finally {    EntityManagerHelper.close();  }}  }
class C{  private void writeObject(java.io.ObjectOutputStream oos) throws IOException {  oos.defaultWriteObject();  if (certs == null || certs.length == 0) {    oos.writeInt(0);  } else {    oos.writeInt(certs.length);    for (int i=0; i < certs.length; i++) {      java.security.cert.Certificate cert=certs[i];      try {        oos.writeUTF(cert.getType());        byte[] encoded=cert.getEncoded();        oos.writeInt(encoded.length);        oos.write(encoded);      } catch (      CertificateEncodingException cee) {        throw new IOException(cee.getMessage());      }    }  }  if (signers != null && signers.length > 0) {    oos.writeObject(signers);  }}  }
class C{  public void saveParam() throws Exception {  Enumeration<AbstractParamPanel> en=tablePanel.elements();  AbstractParamPanel panel=null;  while (en.hasMoreElements()) {    panel=en.nextElement();    panel.saveParam(paramObject);  }}  }
class C{  public static DbException convertInvocation(InvocationTargetException te,String message){  Throwable t=te.getTargetException();  if (t instanceof SQLException || t instanceof DbException || t instanceof InvocationTargetException) {    return convert(t);  }  message=message == null ? t.getMessage() : message + ": " + t.getMessage();  return get(ErrorCode.EXCEPTION_IN_FUNCTION_1,t,message);}  }
class C{  @Override protected void processException(ReplyException ex){  logger.debug("BecomePrimaryBucketMessage ignoring exception {}",ex.getMessage(),ex);}  }
class C{  public Application load(HeliumPackage packageInfo,ApplicationContext context) throws Exception {  if (packageInfo.getType() != HeliumPackage.Type.APPLICATION) {    throw new ApplicationException("Can't instantiate " + packageInfo.getType() + " package using ApplicationLoader");  }  RunningApplication key=new RunningApplication(packageInfo,context.getNoteId(),context.getParagraphId());  ResourceSet resources=findRequiredResourceSet(packageInfo.getResources(),context.getNoteId(),context.getParagraphId());  Class<Application> appClass=loadClass(packageInfo);  ClassLoader oldcl=Thread.currentThread().getContextClassLoader();  ClassLoader cl=appClass.getClassLoader();  Thread.currentThread().setContextClassLoader(cl);  try {    Constructor<Application> constructor=appClass.getConstructor(ApplicationContext.class);    Application app=new ClassLoaderApplication(constructor.newInstance(context),cl);    return app;  } catch (  Exception e) {    throw new ApplicationException(e);  } finally {    Thread.currentThread().setContextClassLoader(oldcl);  }}  }
class C{  public void evaluateInverse(double[] Xr,double[] Xi,double[] xr,double[] xi){  this.yr=xr;  this.yi=xi;  dft.link(Xr,Xi,xr,xi);  arraysUnlinked=false;  evaluateInverse();}  }
class C{  public HelpTipExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  public void markLightingDirty(){synchronized (mFrameTaskQueue) {    mLightsDirty=true;  }}  }
class C{  public void beginHandshake(){  Preconditions.checkState(state instanceof InitState,"must be in InitState");  if (this.featuresReply.getNTables() > 1) {    log.debug("Have {} table(s) for switch {}",this.featuresReply.getNTables(),getSwitchInfoString());  }  if (this.featuresReply.getVersion().compareTo(OFVersion.OF_13) < 0) {    setState(new WaitConfigReplyState());  } else {    setState(new WaitPortDescStatsReplyState());  }}  }
class C{  public final boolean isTargetSolutionSet(){  return getProperty(Annotations.TARGET) instanceof String;}  }
class C{  @Override public boolean isWrapperFor(Class<?> iface) throws SQLException {  return iface != null && iface.isAssignableFrom(getClass());}  }
class C{  @Synchronized("accessLock") public boolean containsUser(@NonNull UserHostmask hostmask){  return containsUser(hostmask.getNick());}  }
class C{  public void deserializeEncryptedColumn(Column<CompositeColumnName> column,Object obj,EncryptionProvider encryptionProvider){  if (!_encrypt) {    throw new IllegalArgumentException("column is not encrypted");  }  if (encryptionProvider == null) {    throw new IllegalArgumentException("null encryption provider");  }  ColumnValue.setEncryptedStringField(column,_property,obj,encryptionProvider);}  }
class C{  public static void enableNewLine(){  Appender appender=Logger.getRootLogger().getAppender("stdout");  appender.setLayout(defaultLayout);}  }
class C{  private String protocolDescription(String raw,ListPreference protocol){  int protocolIndex=protocol.findIndexOfValue(raw);  if (protocolIndex == -1) {    return null;  } else {    String[] values=mRes.getStringArray(R.array.apn_protocol_entries);    try {      return values[protocolIndex];    } catch (    ArrayIndexOutOfBoundsException e) {      return null;    }  }}  }
class C{  public final T timeout(String timeout){  return timeout(TimeValue.parseTimeValue(timeout,null,getClass().getSimpleName() + ".timeout"));}  }
class C{  public List<AddressItem> _queryAddressBook_AddressItemList(Long id){synchronized (this) {    if (addressBook_AddressItemListQuery == null) {      QueryBuilder<AddressItem> queryBuilder=queryBuilder();      queryBuilder.where(Properties.Id.eq(null));      addressBook_AddressItemListQuery=queryBuilder.build();    }  }  Query<AddressItem> query=addressBook_AddressItemListQuery.forCurrentThread();  query.setParameter(0,id);  return query.list();}  }
class C{  public synchronized boolean isNewerThanOrCanFillExceptionsFor(RegionVersionHolder<T> source){  if (source == null || getVersion() > source.getVersion()) {    return true;  }  RegionVersionHolder<T> other=source.clone();  mergeBitSet();  other.mergeBitSet();  List<RVVException> mine=canonicalExceptions(this.exceptions);  Iterator<RVVException> myIterator=mine.iterator();  List<RVVException> his=canonicalExceptions(other.exceptions);  Iterator<RVVException> otherIterator=his.iterator();  RVVException myException=myIterator.hasNext() ? myIterator.next() : null;  RVVException otherException=otherIterator.hasNext() ? otherIterator.next() : null;  while ((otherException != null && otherException.previousVersion > this.version) || isSpecialException(otherException,other)) {    otherException=otherIterator.hasNext() ? otherIterator.next() : null;  }  while (otherException != null) {    if (myException == null) {      return true;    }    if (isSpecialException(myException,this)) {      myException=myIterator.hasNext() ? myIterator.next() : null;      continue;    }    if (isSpecialException(otherException,other)) {      otherException=otherIterator.hasNext() ? otherIterator.next() : null;      continue;    }    if (myException.previousVersion >= otherException.nextVersion) {      myException=myIterator.hasNext() ? myIterator.next() : null;      continue;    }    if (otherException.previousVersion >= myException.nextVersion) {      return true;    }    if ((myException.previousVersion == otherException.previousVersion) && (myException.nextVersion == otherException.nextVersion)) {      myException=myIterator.hasNext() ? myIterator.next() : null;      otherException=otherIterator.hasNext() ? otherIterator.next() : null;      continue;    }    if ((otherException.previousVersion < myException.previousVersion) || (myException.nextVersion < otherException.nextVersion)) {      return true;    }    otherException=otherIterator.hasNext() ? otherIterator.next() : null;  }  return false;}  }
class C{  public Result decodeWithState(BinaryBitmap image) throws NotFoundException {  if (readers == null) {    setHints(null);  }  return decodeInternal(image);}  }
class C{  public static long nextPowerOfTwo(long x){  if (x == 0)   return 1;  x--;  x|=x >> 1;  x|=x >> 2;  x|=x >> 4;  x|=x >> 8;  x|=x >> 16;  return (x | x >> 32) + 1;}  }
class C{  public static int pullChildStopFacilitiesTogether(TransitSchedule schedule,Network network){  int nPulled=0;  for (  TransitLine line : schedule.getTransitLines().values()) {    for (    TransitRoute transitRoute : line.getRoutes().values()) {      boolean hasStopLoop=ScheduleTools.routeHasStopSequenceLoop(transitRoute);      if (transitRoute.getRoute() != null && !hasStopLoop) {        TransitRouteStop currentStop;        List<TransitRouteStop> routeStops=transitRoute.getStops();        Iterator<TransitRouteStop> stopsIterator=routeStops.iterator();        List<Id<Link>> linkIdList=ScheduleTools.getTransitRouteLinkIds(transitRoute);        List<Link> linkList=NetworkTools.getLinksFromIds(network,linkIdList);        currentStop=stopsIterator.next();        Set<Link> inlinksWithSameMode=NetworkTools.filterLinkSetExactlyByModes(linkList.get(0).getFromNode().getInLinks().values(),linkList.get(0).getAllowedModes());        Id<Link> closerLinkBefore=useCloserRefLinkForChildStopFacility(schedule,network,transitRoute,currentStop.getStopFacility(),inlinksWithSameMode);        if (closerLinkBefore != null) {          linkIdList.add(0,closerLinkBefore);          nPulled++;        }        currentStop=stopsIterator.next();        for (int i=1; i < linkList.size() - 1; i++) {          if (linkList.get(i).getId().equals(currentStop.getStopFacility().getLinkId())) {            Set<Link> testSet=new HashSet<>();            testSet.add(linkList.get(i));            testSet.add(linkList.get(i - 1));            testSet.add(linkList.get(i + 1));            Id<Link> check=useCloserRefLinkForChildStopFacility(schedule,network,transitRoute,currentStop.getStopFacility(),testSet);            if (check != null)             nPulled++;            if (stopsIterator.hasNext()) {              currentStop=stopsIterator.next();            }          }        }        currentStop=routeStops.get(routeStops.size() - 1);        Set<Link> outlinksWithSameMode=NetworkTools.filterLinkSetExactlyByModes(linkList.get(linkList.size() - 1).getToNode().getOutLinks().values(),linkList.get(linkList.size() - 1).getAllowedModes());        Id<Link> closerLinkAfter=useCloserRefLinkForChildStopFacility(schedule,network,transitRoute,currentStop.getStopFacility(),outlinksWithSameMode);        if (closerLinkAfter != null) {          linkIdList.add(closerLinkAfter);          nPulled++;        }        transitRoute.setRoute(RouteUtils.createNetworkRoute(linkIdList,network));      }    }  }  return nPulled;}  }
class C{  public void useIfElseAndBrackets(){  if (true) {    if (false) {      if (true) {        Log.i("Coding Guidelines","Brackets are cool");      }    }  }}  }
class C{  public TermCriteria(int type,int maxCount,double epsilon){  this.type=type;  this.maxCount=maxCount;  this.epsilon=epsilon;}  }
class C{  public final void sendAction(String target,String action){  sendCTCPCommand(target,"ACTION " + action);}  }
class C{  public void clearPosition(){  _position=(_readLength - _readOffset);}  }
class C{  public final Position findInputPosition(int outputLine,int outputColumn){  if (entries.isEmpty()) {    return null;  }  if (outputLine < entries.first().getOutputPosition().getLine()) {    return null;  }  if (outputLine > entries.last().getOutputPosition().getLine()) {    return null;  }  if (entries != null) {    Entry[] e=entries.toArray(new Entry[0]);    for (int i=0; i < entries.size(); i++) {      if (i == e.length - 1 || (e[i].getOutputPosition().getLine() == outputLine || e[i + 1].getOutputPosition().getLine() > outputLine)) {        return e[i].getInputPosition();      }    }  }  return null;}  }
class C{  public void addPaths(File file,int type) throws IOException {  addPaths(new FileReader(file),type);}  }
class C{  public void testIsJdbcPackage() throws Exception {  assertTrue(Util.isJdbcPackage("java.sql"));  assertTrue(Util.isJdbcPackage("javax.sql"));  assertTrue(Util.isJdbcPackage("javax.sql.rowset"));  assertTrue(Util.isJdbcPackage("com.mysql.jdbc"));  assertTrue(Util.isJdbcPackage("com.mysql.jdbc"));  assertTrue(Util.isJdbcPackage("com.mysql.jdbc.jdbc2.optional"));  assertFalse(Util.isJdbcPackage("java"));  assertFalse(Util.isJdbcPackage("java.lang"));  assertFalse(Util.isJdbcPackage("com"));  assertFalse(Util.isJdbcPackage("com.mysql"));}  }
class C{  public void createSuccessNullCapacity(){  new SimpleContactManager(null);}  }
class C{  UnknownVariableException(ParserRuleContext ctx,String i18n,Object... arguments){  super(ctx,i18n,arguments);}  }
class C{  public synchronized Future<ReplDBMSHeader> watchForProcessedEventId(String eventId,boolean cancel) throws InterruptedException {  EventIdWatchPredicate eventPredicate=new EventIdWatchPredicate(eventId);  return waitForProcessedEvent(eventPredicate,cancel);}  }
class C{  public static String format(double[][] m,String pre){  StringBuilder output=new StringBuilder();  output.append(pre).append("[\n").append(pre);  for (int i=0; i < m.length; i++) {    double[] row=m[i];    output.append(" [");    formatTo(output,row,", ");    output.append("]\n").append(pre);  }  output.append("]\n");  return output.toString();}  }
class C{  @Override public synchronized void clear() throws IOException {  mActionTracer.clear();}  }
class C{  static UsageMessage startMessage(String serialNumber,String runId,String version,String module){  final UsageMessage ret=new UsageMessage();  ret.setSerialNumber(serialNumber);  ret.setRunId(runId);  ret.setVersion(version);  ret.setModule(module);  ret.setMessageType("Start");  return ret;}  }
class C{  protected <T extends AbstractBase>ResponseEntity<Response<T>> buildOKResponse(T... params){  return buildResponse(HttpStatus.OK,"","",params);}  }
class C{  @Override public List<MatchResult> find(String str,int maxResults){  str=str.trim();  List<MatchResult> results=new ArrayList<MatchResult>();  int start=0;  while (start != -1) {    start=str.indexOf(string,start);    if (start != -1) {      int end=start + string.length();      if (!whole || StringUtils.isDelimited(str,start,end)) {        results.add(new MatchResult(start,end));      }      if (results.size() >= maxResults) {        return results;      }      start=end;    }  }  return results;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case RegularExpressionPackage.CHARACTER_CLASS__NEGATED:    return isNegated();case RegularExpressionPackage.CHARACTER_CLASS__ELEMENTS:  return getElements();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override protected CheckResponse doInBackground(Void... params){  return getCheckResponse(checkRequest);}  }
class C{  public static void assertBetween(int value,int lowerBound,int upperBound,String message){  if (value < lowerBound || value > upperBound) {    throw new IllegalArgumentException("assertion failed: " + message);  }}  }
class C{  public byte[] asn1Encode() throws Asn1Exception, IOException {  DerOutputStream bytes=new DerOutputStream();  DerValue der[]=new DerValue[entry.length];  for (int i=0; i < entry.length; i++) {    der[i]=new DerValue(entry[i].asn1Encode());  }  bytes.putSequence(der);  return bytes.toByteArray();}  }
class C{  public void deleteTasks(List<TaskHandle> tasks){  try {    queue.deleteTask(tasks);  } catch (  TransientFailureException|DeadlineExceededException e) {    logger.severe(e,"Failed deleting tasks too fast");  }}  }
class C{  public Grammar loadImportedGrammar(Grammar g,GrammarAST nameNode) throws IOException {  String name=nameNode.getText();  Grammar imported=importedGrammars.get(name);  if (imported == null) {    g.tool.log("grammar","load " + name + " from "+ g.fileName);    File importedFile=null;    for (    String extension : ALL_GRAMMAR_EXTENSIONS) {      importedFile=getImportedGrammarFile(g,name + extension);      if (importedFile != null) {        break;      }    }    if (importedFile == null) {      errMgr.grammarError(ErrorType.CANNOT_FIND_IMPORTED_GRAMMAR,g.fileName,nameNode.getToken(),name);      return null;    }    String absolutePath=importedFile.getAbsolutePath();    ANTLRFileStream in=new ANTLRFileStream(absolutePath,grammarEncoding);    GrammarRootAST root=parse(g.fileName,in);    if (root == null) {      return null;    }    imported=createGrammar(root);    imported.fileName=absolutePath;    importedGrammars.put(root.getGrammarName(),imported);  }  return imported;}  }
class C{  public ServletOutputStream createOutputStream() throws IOException {  log.debug("createOutputStream gets called");  CompressionResponseStream stream=new CompressionResponseStream(origResponse,compressionLevel,compressionStrategy);  return stream;}  }
class C{  private void runBeelineDistance(final String runNr,final String finalPlanFile){  LOG.warn("This does not factor in the beeline distance factor used in the config. " + "It means, this distance and teleportation distance from events are different.");  Scenario sc=LoadMyScenarios.loadScenarioFromPlans(finalPlanFile);  LegModeDistanceDistribution lmdd=new LegModeDistanceDistribution();  lmdd.init(sc);  lmdd.preProcessData();  lmdd.postProcessData();  lmdd.writeResults(RUN_DIR + runNr + "/analysis/legModeDistributions/"+ runNr+ ".");}  }
class C{  public int tty_nr(){  return Integer.parseInt(fields[6]);}  }
class C{  public void restart(){  thread.resume();}  }
class C{  public static FeatureNode[] makeNodes(Example e,FastExample2SparseTransform ripper,boolean useBias){  int[] nonDefaultIndices=ripper.getNonDefaultAttributeIndices(e);  double[] nonDefaultValues=ripper.getNonDefaultAttributeValues(e,nonDefaultIndices);  int offset=0;  if (useBias) {    offset=1;  }  FeatureNode[] nodeArray=new FeatureNode[nonDefaultIndices.length + offset];  for (int a=0; a < nonDefaultIndices.length; a++) {    FeatureNode node=new FeatureNode(nonDefaultIndices[a] + 1,nonDefaultValues[a]);    nodeArray[a]=node;  }  if (useBias) {    nodeArray[nodeArray.length - 1]=new FeatureNode(nodeArray.length,1);  }  return nodeArray;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public SchedulableEvent removeEventfromPool(){  SchedulableEvent event=null;  if (mEventPool != null && (mEventPool.size() > 1)) {    event=mEventPool.remove();  }  return event;}  }
class C{  public void addFLoad(int local){  xop(ByteCode.FLOAD_0,ByteCode.FLOAD,local);}  }
class C{  public boolean isSecured(){  return mSecured;}  }
class C{  public int reset(){  int counter=0;  int total=0;  for (int i=0; i < m_instances.size(); i++) {    CacheInterface stored=(CacheInterface)m_instances.get(i);    if (stored != null && stored.size() > 0) {      log.fine(stored.toString());      total+=stored.reset();      counter++;    }  }  log.fine("#" + counter + " ("+ total+ ")");  return total;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:37.902 -0500",hash_original_method="8DA892BCFD0BDEE05EB086307BFA5229",hash_generated_method="40EE86BB9C4D2CFC328F760DD3DF07D0") public SIPRequest createCancelRequest() throws SipException {  if (!this.getMethod().equals(Request.INVITE))   throw new SipException("Attempt to create CANCEL for " + this.getMethod());  SIPRequest cancel=new SIPRequest();  cancel.setRequestLine((RequestLine)this.requestLine.clone());  cancel.setMethod(Request.CANCEL);  cancel.setHeader((Header)this.callIdHeader.clone());  cancel.setHeader((Header)this.toHeader.clone());  cancel.setHeader((Header)cSeqHeader.clone());  try {    cancel.getCSeq().setMethod(Request.CANCEL);  } catch (  ParseException e) {    e.printStackTrace();  }  cancel.setHeader((Header)this.fromHeader.clone());  cancel.addFirst((Header)this.getTopmostVia().clone());  cancel.setHeader((Header)this.maxForwardsHeader.clone());  if (this.getRouteHeaders() != null) {    cancel.setHeader((SIPHeaderList<?>)this.getRouteHeaders().clone());  }  if (MessageFactoryImpl.getDefaultUserAgentHeader() != null) {    cancel.setHeader(MessageFactoryImpl.getDefaultUserAgentHeader());  }  return cancel;}  }
class C{  public jMatrix solveTranspose(jMatrix B){  return transpose().solve(B.transpose());}  }
class C{  protected void mergeOrRemovePlatformTypes(Database currentModel,Database desiredModel){  Table[] currentTables=currentModel.getTables();  for (  Table currentTable : currentTables) {    Table desiredTable=desiredModel.findTable(currentTable.getName(),false);    if (desiredTable != null) {      Column[] currentColumns=currentTable.getColumns();      for (      Column currentColumn : currentColumns) {        Column desiredColumn=desiredTable.getColumnWithName(currentColumn.getName());        if (desiredColumn != null) {          currentColumn.removePlatformColumn(databaseName);          PlatformColumn desiredPlatformColumn=desiredColumn.findPlatformColumn(databaseName);          if (desiredPlatformColumn != null) {            currentColumn.addPlatformColumn(desiredPlatformColumn);          }        }      }    }  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case MappingPackage.CONFIGURATION_SOURCE__PROPERTY:    if (resolve)     return getProperty();  return basicGetProperty();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public boolean isReference(){  return !special && (clazz == null || !clazz.isPrimitive());}  }
class C{  private void doRenderView(FacesContext context,UIViewRoot viewToRender) throws IOException {  if (null != associate) {    associate.responseRendered();  }  if (LOGGER.isLoggable(Level.FINE)) {    LOGGER.log(Level.FINE,"About to render view " + viewToRender.getViewId());  }  viewToRender.encodeAll(context);}  }
class C{  public FastCharBuffer(int size){  if (size < 0) {    throw new IllegalArgumentException("Invalid size: " + size);  }  this.minChunkLen=size;}  }
class C{  private static Position nextNonComment(Position pos,Token[][] spec){  Position nextPos=nextTokenPos(pos,spec);  while ((nextPos != null) && (nextPos.toToken(spec).type == Token.COMMENT)) {    nextPos=nextTokenPos(nextPos,spec);  }  return nextPos;}  }
class C{  protected File copyResourceToTempFile(String resource) throws IOException {  File tempFile=File.createTempFile(getClass().getSimpleName(),null);  tempFile.deleteOnExit();  try (InputStream istr=getClass().getResourceAsStream(resource);OutputStream ostr=new FileOutputStream(tempFile)){    ByteStreams.copy(istr,ostr);  }   return tempFile;}  }
class C{  public static String gluErrorString(int error){switch (error) {case GL10.GL_NO_ERROR:    return "no error";case GL10.GL_INVALID_ENUM:  return "invalid enum";case GL10.GL_INVALID_VALUE:return "invalid value";case GL10.GL_INVALID_OPERATION:return "invalid operation";case GL10.GL_STACK_OVERFLOW:return "stack overflow";case GL10.GL_STACK_UNDERFLOW:return "stack underflow";case GL10.GL_OUT_OF_MEMORY:return "out of memory";default :return null;}}  }
class C{  @Override public void installDockViewTitleBarSettings(){  UIManager.put("DockViewTitleBarUI","com.vlsolutions.swing.docking.ui.DockViewTitleBarUI");  UIManager.put("DockViewTitleBar.height",Integer.valueOf(20));  UIManager.put("DockViewTitleBar.closeButtonText",UIManager.getString("InternalFrameTitlePane.closeButtonText"));  UIManager.put("DockViewTitleBar.minimizeButtonText",UIManager.getString("InternalFrameTitlePane.minimizeButtonText"));  UIManager.put("DockViewTitleBar.restoreButtonText",UIManager.getString("InternalFrameTitlePane.restoreButtonText"));  UIManager.put("DockViewTitleBar.maximizeButtonText",UIManager.getString("InternalFrameTitlePane.maximizeButtonText"));  UIManager.put("DockViewTitleBar.floatButtonText","Detach");  UIManager.put("DockViewTitleBar.attachButtonText","Attach");  UIManager.put("DockViewTitleBar.isCloseButtonDisplayed",Boolean.TRUE);  UIManager.put("DockViewTitleBar.isHideButtonDisplayed",Boolean.FALSE);  UIManager.put("DockViewTitleBar.isDockButtonDisplayed",Boolean.FALSE);  UIManager.put("DockViewTitleBar.isMaximizeButtonDisplayed",Boolean.FALSE);  UIManager.put("DockViewTitleBar.isRestoreButtonDisplayed",Boolean.TRUE);  UIManager.put("DockViewTitleBar.isFloatButtonDisplayed",Boolean.FALSE);  UIManager.put("DockViewTitleBar.isAttachButtonDisplayed",Boolean.FALSE);  UIManager.put("DockViewTitleBar.border",BorderFactory.createEmptyBorder());}  }
class C{  private String createWorkflowStepToValidateVPlexVolume(Workflow workflow,StorageSystem vplexSystem,URI vplexVolumeURI,String waitFor){  URI vplexSystemURI=vplexSystem.getId();  Workflow.Method validateVPlexVolumeMethod=createValidateVPlexVolumeMethod(vplexSystemURI,vplexVolumeURI);  waitFor=workflow.createStep(VALIDATE_VPLEX_VOLUME_STEP,String.format("Validating VPLEX volume %s on VPLEX %s",vplexSystem.getId().toString(),vplexVolumeURI),waitFor,vplexSystemURI,vplexSystem.getSystemType(),this.getClass(),validateVPlexVolumeMethod,rollbackMethodNullMethod(),null);  return waitFor;}  }
class C{  public String chooseEngineServerAlias(String keyType,Principal[] issuers,SSLEngine engine){  return null;}  }
class C{  @Override public int available() throws IOException {  return end - pos;}  }
class C{  @Override protected CommandLine createCommandLine(BuilderConfiguration config) throws BuilderException {  final CommandLine commandLine=new CommandLine("npm");  commandLine.add(config.getTargets());  return commandLine;}  }
class C{  public static String encodeString(String s){  StringBuffer b=new StringBuffer();  b.append('\'');  for (int i=0; i < s.length(); i++) {    char c=s.charAt(i);    if (c == '\'') {      b.append(c);    }    b.append(c);  }  b.append('\'');  return b.toString();}  }
class C{  @Override public void draw(Graphics2D g){  BezierFigure f=getBezierFigure();  if (f.getNodeCount() > index) {    BezierPath.Node v=f.getNode(index);    Point2D.Double p0=new Point2D.Double(v.x[0],v.y[0]);    Point2D.Double pc=new Point2D.Double(v.x[controlPointIndex],v.y[controlPointIndex]);    Figure tOwner=getTransformOwner();    if (tOwner.get(TRANSFORM) != null) {      tOwner.get(TRANSFORM).transform(p0,p0);      tOwner.get(TRANSFORM).transform(pc,pc);    }    Color handleFillColor;    Color handleStrokeColor;    Stroke stroke1;    Color strokeColor1;    Stroke stroke2;    Color strokeColor2;    if (getEditor().getTool().supportsHandleInteraction()) {      handleFillColor=(Color)getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_CONTROL_POINT_HANDLE_FILL_COLOR);      handleStrokeColor=(Color)getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_CONTROL_POINT_HANDLE_STROKE_COLOR);      stroke1=(Stroke)getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_TANGENT_STROKE_1);      strokeColor1=(Color)getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_TANGENT_COLOR_1);      stroke2=(Stroke)getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_TANGENT_STROKE_2);      strokeColor2=(Color)getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_TANGENT_COLOR_2);    } else {      handleFillColor=(Color)getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_CONTROL_POINT_HANDLE_FILL_COLOR_DISABLED);      handleStrokeColor=(Color)getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_CONTROL_POINT_HANDLE_STROKE_COLOR_DISABLED);      stroke1=(Stroke)getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_TANGENT_STROKE_1_DISABLED);      strokeColor1=(Color)getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_TANGENT_COLOR_1_DISABLED);      stroke2=(Stroke)getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_TANGENT_STROKE_2_DISABLED);      strokeColor2=(Color)getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_TANGENT_COLOR_2_DISABLED);    }    if (stroke1 != null && strokeColor1 != null) {      g.setStroke(stroke1);      g.setColor(strokeColor1);      g.draw(new Line2D.Double(view.drawingToView(p0),view.drawingToView(pc)));    }    if (stroke2 != null && strokeColor2 != null) {      g.setStroke(stroke2);      g.setColor(strokeColor2);      g.draw(new Line2D.Double(view.drawingToView(p0),view.drawingToView(pc)));    }    if (v.keepColinear && v.mask == BezierPath.C1C2_MASK && (index > 0 && index < f.getNodeCount() - 1 || f.isClosed())) {      drawCircle(g,handleStrokeColor,handleFillColor);    } else {      drawCircle(g,handleFillColor,handleStrokeColor);    }  }}  }
class C{  public synchronized void onNodeJoined(){  joinedNodesCnt++;}  }
class C{  public WhereBuilder and(String columnName,String op,Object value){  appendCondition(whereItems.size() == 0 ? null : "AND",columnName,op,value);  return this;}  }
class C{  public OMGraphic create(String classname,DrawingToolRequestor requestor){  return create(classname,null,requestor);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static double L_LogLossD(int Y[][],double Rpred[][]){  int N=Y.length;  int L=Y[0].length;  return L_LogLoss(Y,Rpred,Math.log((double)N)) / ((double)N * (double)L);}  }
class C{  public double groupDelay(double Omega){  return T.discreteTimeGroupDelay(Omega);}  }
class C{  @Override public MemChunkHolder<NonVolatileMemAllocator> createChunk(long size,boolean autoreclaim){  MemChunkHolder<NonVolatileMemAllocator> ret=null;  Long addr=m_nvmasvc.allocate(m_nid,size,true);  if ((null == addr || 0 == addr) && m_activegc) {    m_chunkcollector.waitReclaimCoolDown(m_gctimeout);    addr=m_nvmasvc.allocate(m_nid,size,true);  }  if (null != addr && 0 != addr) {    ret=new MemChunkHolder<NonVolatileMemAllocator>(this,addr,size);    ret.setCollector(m_chunkcollector);    if (autoreclaim) {      m_chunkcollector.register(ret);    }  }  return ret;}  }
class C{  private void cancelAnimation(){  if (mStateAnimator != null) {    mStateAnimator.setDuration(0);    mStateAnimator.cancel();  }  mStateAnimator=null;}  }
class C{  @Override public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  process(request,response);}  }
class C{  public void add(long value){  if (size == values.length) {    values=Arrays.copyOf(values,size * 2);  }  values[size++]=value;}  }
class C{  public DefaultLineTracker(){}  }
class C{  public boolean equals(Object o){  if (o == null)   return false;  if (o instanceof IRectangle) {    IRectangle other=(IRectangle)o;    return left == other.getLeft() && bottom == other.getBottom() && right == other.getRight() && top == other.getTop();  }  return false;}  }
class C{  public SensorMatrixNode(final VisionWorld visionWorld,final SensorMatrix sensorMatrix){  super(sensorMatrix);  for (int column=0, columns=sensorMatrix.columns(); column < columns; column++) {    for (int row=0, rows=sensorMatrix.rows(); row < rows; row++) {      Sensor sensor=sensorMatrix.getSensor(row,column);      if (sensor != null) {        SensorNode node=new SensorNode(visionWorld,sensor);        node.offset(sensor.getReceptiveField().getX(),sensor.getReceptiveField().getY());        addChild(node);      }    }  }}  }
class C{  public Object invoke(String actionName,Object[] params,String[] signature) throws MBeanException, ReflectionException {  logging.trace("invoke(" + actionName + ","+ params+ ","+ signature+ ")");  Method action=null;  try {    @SuppressWarnings("rawtypes") Class[] classes=new Class[signature.length];    for (int idx=0; idx < signature.length; ++idx) {      classes[idx]=Class.forName(signature[idx]);    }    action=this.getClass().getMethod(actionName,classes);  } catch (  Exception e) {    String msg="Unknown action " + actionName;    logging.error(msg,e);    throw new ReflectionException(e,msg);  }  try {    Object ret=action.invoke(this,params);    logging.info("Successfully invoked action " + actionName);    return ret;  } catch (  Exception e) {    String msg="Error while invoking action " + actionName;    logging.error(msg,e);    throw new ReflectionException(e,msg);  }}  }
class C{  private static BitMatrix extractPureBits(BitMatrix image) throws NotFoundException {  int[] leftTopBlack=image.getTopLeftOnBit();  int[] rightBottomBlack=image.getBottomRightOnBit();  if (leftTopBlack == null || rightBottomBlack == null) {    throw NotFoundException.getNotFoundInstance();  }  int moduleSize=moduleSize(leftTopBlack,image);  int top=leftTopBlack[1];  int bottom=rightBottomBlack[1];  int left=leftTopBlack[0];  int right=rightBottomBlack[0];  int matrixWidth=(right - left + 1) / moduleSize;  int matrixHeight=(bottom - top + 1) / moduleSize;  if (matrixWidth <= 0 || matrixHeight <= 0) {    throw NotFoundException.getNotFoundInstance();  }  int nudge=moduleSize / 2;  top+=nudge;  left+=nudge;  BitMatrix bits=new BitMatrix(matrixWidth,matrixHeight);  for (int y=0; y < matrixHeight; y++) {    int iOffset=top + y * moduleSize;    for (int x=0; x < matrixWidth; x++) {      if (image.get(left + x * moduleSize,iOffset)) {        bits.set(x,y);      }    }  }  return bits;}  }
class C{  public static void tenantsListToAddJson(){  OpenStackTenantsUtils.synchronizeOpenStackTenants();  List<OpenStackTenantsDataTable.OpenStackTenant> tenants=Lists.newArrayList();  for (  OSTenantRestRep tenant : OpenStackTenantsUtils.getOpenStackTenantsFromDataBase()) {    if (tenant.getExcluded()) {      tenants.add(new OpenStackTenantsDataTable.OpenStackTenant(tenant));    }  }  renderJSON(DataTablesSupport.createJSON(tenants,params));}  }
class C{  public ColorRange add(ReadonlyTColor c){  hueConstraint.add(new FloatRange(c.hue(),c.hue()));  saturationConstraint.add(new FloatRange(c.saturation(),c.saturation()));  brightnessConstraint.add(new FloatRange(c.brightness(),c.brightness()));  alphaConstraint.add(new FloatRange(c.alpha(),c.alpha()));  return this;}  }
class C{  public TStructField createTStructField(){  TStructFieldImpl tStructField=new TStructFieldImpl();  return tStructField;}  }
class C{  public void init(){  try {    this.secrets=this.source.read(this.secretBackendMetadata);    if (this.secrets != null) {      this.properties.putAll(secrets.getData());    }  } catch (  RuntimeException e) {    String message=String.format("Unable to read properties from Vault using %s for %s ",getName(),secretBackendMetadata.getVariables());    if (failFast) {      throw e;    }    log.error(message,e);  }}  }
class C{  public void updateFastForward(Project.NameKey name,String refName,ObjectId oldValue,ObjectId newValue){  EntryVal val=cache.getIfPresent(name.get());  if (val != null) {    TagSetHolder holder=val.holder;    if (holder != null) {      TagSet tags=holder.getTagSet();      if (tags != null) {        if (tags.updateFastForward(refName,oldValue,newValue)) {          cache.put(name.get(),val);        }      }    }  }}  }
class C{  protected static byte[] createSalt(){  byte[] salt=new byte[16];  RANDOM.nextBytes(salt);  return salt;}  }
class C{  protected boolean beforeDelete(){  return delete_Accounting("C_BP_Customer_Acct") && delete_Accounting("C_BP_Vendor_Acct") && delete_Accounting("C_BP_Employee_Acct");}  }
class C{  public boolean wasCancelled(){  return m_wasCancelled;}  }
class C{  @Override public void warning(SAXParseException exception) throws SAXException {  this.reportWarning(exception.getMessage());}  }
class C{  public XObject execute(XPathContext xctxt,int context) throws javax.xml.transform.TransformerException {  DTMIterator nl=m_functionExpr.asIterator(xctxt,context);  XNumber score=SCORE_NONE;  if (null != nl) {    int n;    while (DTM.NULL != (n=nl.nextNode())) {      score=(n == context) ? SCORE_OTHER : SCORE_NONE;      if (score == SCORE_OTHER) {        context=n;        break;      }    }  }  nl.detach();  return score;}  }
class C{  byte[] docToXml(){  try {    DOMSource domSource=new DOMSource(xmldoc);    final ByteArrayOutputStream buffer=new ByteArrayOutputStream();    StreamResult result=new StreamResult(buffer);    Transformer transformer=Transformers.newTransformer();    transformer.setOutputProperty(OutputKeys.INDENT,"yes");    transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount","2");    transformer.transform(domSource,result);    return buffer.toByteArray();  } catch (  TransformerException e) {    throw new SaaSSystemException(e);  }}  }
class C{  public EventStoreBuilder clusterNodeDiscoveryFromDnsOnGosipPort(int port){  clusterNodeDiscoveryFromDnsOnGosipPort=port;  return this;}  }
class C{  @Field(29) public __VARIANT_NAME_3_union pparray(Pointer<Pointer<SAFEARRAY>> pparray){  this.io.setPointerField(this,29,pparray);  return this;}  }
class C{  public static DD valueOf(double x){  return new DD(x);}  }
class C{  public void recordEvents(RecordableEvent... events) throws DatabaseException {  List<Event> dbEventsList=new ArrayList<Event>();  for (  RecordableEvent event : events) {    Event dbEvent=ControllerUtils.convertToEvent(event);    if (event.getResourceId() == null && !(event instanceof RecordableBourneEvent)) {      continue;    }    dbEventsList.add(dbEvent);  }  if (!dbEventsList.isEmpty()) {    Event[] dbEvents=new Event[dbEventsList.size()];    dbEventsList.toArray(dbEvents);    try {      String bucketId=_dbClient.insertTimeSeries(EventTimeSeries.class,dbEvents);      s_logger.debug("Event(s) persisted into Cassandra with bucketId/rowId : {}",bucketId);    } catch (    DatabaseException e) {      s_logger.error("Error inserting events into the database",e);      throw e;    }  } else {    s_logger.info("Event list is empty");  }}  }
class C{  public CstArray(List list){  if (list == null) {    throw new NullPointerException("list == null");  }  list.throwIfMutable();  this.list=list;}  }
class C{  public String toString(){  return toXML(false);}  }
class C{  public static double powFast(double value,int power){  if (USE_JDK_MATH) {    return Math.pow(value,power);  }  if (power < 3) {    if (power < 0) {      if (power == Integer.MIN_VALUE) {        return 1.0 / (powFast(value,Integer.MAX_VALUE) * value);      } else {        return 1.0 / powFast(value,-power);      }    } else {      if (power == 2) {        return value * value;      } else       if (power == 0) {        return 1.0;      } else {        return value;      }    }  } else {    double oddRemains=1.0;    while (power > 5) {      if ((power & 1) != 0) {        oddRemains*=value;      }      value*=value;      power>>=1;    }    if (power == 3) {      return oddRemains * value * value* value;    } else {      final double v2=value * value;      if (power == 4) {        return oddRemains * v2 * v2;      } else {        return oddRemains * v2 * v2* value;      }    }  }}  }
class C{  void handshake() throws IgniteCheckedException, SSLException {  if (log.isDebugEnabled())   log.debug("Entered handshake(): [handshakeStatus=" + handshakeStatus + ", ses="+ ses+ ']');  lock();  try {    boolean loop=true;    while (loop) {switch (handshakeStatus) {case NOT_HANDSHAKING:case FINISHED:{          SSLSession sslSes=sslEngine.getSession();          if (log.isDebugEnabled())           log.debug("Finished ssl handshake [protocol=" + sslSes.getProtocol() + ", cipherSuite="+ sslSes.getCipherSuite()+ ", ses="+ ses+ ']');          handshakeFinished=true;          if (!initHandshakeComplete) {            initHandshakeComplete=true;            GridNioFutureImpl<?> fut=ses.removeMeta(HANDSHAKE_FUT_META_KEY);            if (fut != null)             fut.onDone();            parent.proceedSessionOpened(ses);          }          loop=false;          break;        }case NEED_TASK:{        if (log.isDebugEnabled())         log.debug("Need to run ssl tasks: " + ses);        handshakeStatus=runTasks();        break;      }case NEED_UNWRAP:{      if (log.isDebugEnabled())       log.debug("Need to unwrap incoming data: " + ses);      Status status=unwrapHandshake();      if (status == BUFFER_UNDERFLOW && handshakeStatus != FINISHED || sslEngine.isInboundDone())       loop=false;      break;    }case NEED_WRAP:{    if (outNetBuf.hasRemaining())     U.warn(log,"Output net buffer has unsent bytes during handshake (will clear): " + ses);    outNetBuf.clear();    SSLEngineResult res=sslEngine.wrap(handshakeBuf,outNetBuf);    outNetBuf.flip();    handshakeStatus=res.getHandshakeStatus();    if (log.isDebugEnabled())     log.debug("Wrapped handshake data [status=" + res.getStatus() + ", handshakeStatus="+ handshakeStatus+ ", ses="+ ses+ ']');    writeNetBuffer();    break;  }default :{  throw new IllegalStateException("Invalid handshake status in handshake method [handshakeStatus=" + handshakeStatus + ", ses="+ ses+ ']');}}}}  finally {unlock();}if (log.isDebugEnabled()) log.debug("Leaved handshake(): [handshakeStatus=" + handshakeStatus + ", ses="+ ses+ ']');}  }
class C{  @Override public void PUTSTATIC(String owner,String name,String desc){  Class<?> claz=env.ensurePrepared(owner);  Field field=resolveField(claz,name);  Class<?> declaringClass=field.getDeclaringClass();  if (declaringClass.isInterface()) {    logger.debug("Do we have to prepare the static fields of an interface?");    env.ensurePrepared(declaringClass);  }  Operand value_operand=env.topFrame().operandStack.popOperand();  Expression<?> symb_value=null;  if (value_operand instanceof IntegerOperand) {    IntegerOperand intOp=(IntegerOperand)value_operand;    symb_value=intOp.getIntegerExpression();  } else   if (value_operand instanceof RealOperand) {    RealOperand realOp=(RealOperand)value_operand;    symb_value=realOp.getRealExpression();  } else   if (value_operand instanceof ReferenceOperand) {    return;  }  env.heap.putStaticField(owner,name,symb_value);}  }
class C{  public QDate(TimeZone zone){  _timeZone=zone;  if (zone == _gmtTimeZone) {    _stdName=_gmtStdName;    _dstName=_gmtDstName;  } else   if (zone == _localTimeZone) {    _stdName=_localStdName;    _dstName=_localDstName;  } else {    _stdName=_timeZone.getDisplayName(false,TimeZone.SHORT);    _dstName=_timeZone.getDisplayName(true,TimeZone.SHORT);  }  _calendar=new GregorianCalendar(_timeZone);  setLocalTime(CurrentTime.currentTime());}  }
class C{  final void init(ProxyServer proxy,PluginDescription description){  this.proxy=proxy;  this.description=description;  this.file=description.getFile();  this.logger=new PluginLogger(this);}  }
class C{  @Override protected void generatePseudoKingCastlingMoves(long fromBB,PriorityMoveList moves){  FischerRandomUtils.generatePseudoKingCastlingMoves(this,fromBB,moves,initialKingFile,initialShortRookFile,initialLongRookFile);}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public TypeReference type(){  return StampTool.typeReferenceOrNull(checkedStamp);}  }
class C{  public HtmlRegularNode p(String text){  return addSimpleNode("p",text);}  }
class C{  public int readLong() throws IOException {  return this.read() << 24 | this.read() << 16 | this.read() << 8 | this.read();}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,int options){  byte[] ALPHABET=getAlphabet(options);  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=ALPHABET[(inBuff >>> 18)];  destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=ALPHABET[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  @SuppressWarnings("unchecked") public static <T>ArrayAdapter<T,List<? extends T>> listAdapter(List<? extends T> dummy){  return (ListArrayAdapter<T>)LISTADAPTER;}  }
class C{  public ConfigureLoggingDialog(java.awt.Frame parent,boolean modal){  super(parent,modal);  initComponents();  initGuiFields();  translateTexts();}  }
class C{  public int diff_commonSuffix(String text1,String text2){  int text1_length=text1.length();  int text2_length=text2.length();  int n=Math.min(text1_length,text2_length);  for (int i=1; i <= n; i++) {    if (text1.charAt(text1_length - i) != text2.charAt(text2_length - i)) {      return i - 1;    }  }  return n;}  }
class C{  public Imports createImports(){  return mAdapter.create(Imports.class);}  }
class C{  @SuppressWarnings("unchecked") protected List<List<T>> fastNonDominatedSort(List<T> union){  int[] dominateMe=new int[union.size()];  List<Integer>[] iDominate=new List[union.size()];  List<Integer>[] front=new List[union.size() + 1];  int flagDominate;  for (int i=0; i < front.length; i++)   front[i]=new LinkedList<Integer>();  for (int p=0; p < union.size(); p++) {    iDominate[p]=new LinkedList<Integer>();    dominateMe[p]=0;  }  for (int p=0; p < (union.size() - 1); p++) {    for (int q=p + 1; q < union.size(); q++) {      flagDominate=dc.compare(union.get(p),union.get(q));      if (flagDominate == -1) {        iDominate[p].add(q);        dominateMe[q]++;      } else       if (flagDominate == 1) {        iDominate[q].add(p);        dominateMe[p]++;      }    }  }  for (int p=0; p < union.size(); p++) {    if (dominateMe[p] == 0) {      front[0].add(p);      union.get(p).setRank(0);    }  }  int i=0;  Iterator<Integer> it1, it2;  while (front[i].size() != 0) {    i++;    it1=front[i - 1].iterator();    while (it1.hasNext()) {      it2=iDominate[it1.next()].iterator();      while (it2.hasNext()) {        int index=it2.next();        dominateMe[index]--;        if (dominateMe[index] == 0) {          front[i].add(index);          union.get(index).setRank(i);        }      }    }  }  List<List<T>> ranking=new ArrayList<List<T>>(i);  for (int j=0; j < i; j++) {    List<T> f=new ArrayList<T>(front[j].size());    it1=front[j].iterator();    while (it1.hasNext())     f.add(union.get(it1.next()));    ranking.add(f);  }  return ranking;}  }
class C{  public byte[] toByteArray(){  return output.toByteArray();}  }
class C{  public static Validator<String> regEx(Pattern pattern){  return regEx(pattern,null);}  }
class C{  protected Vec4[] computeBezierControlPoints(DrawContext dc,Vec4 start,Vec4 end,int numControlPoints,double curvature){  Globe globe=dc.getGlobe();  Vec4 dir=end.subtract3(start);  double length=dir.getLength3();  dir=dir.normalize3();  Vec4 normal=globe.computeSurfaceNormalAtPoint(start);  Vec4 perpendicular=dir.cross3(normal).normalize3().multiply3(length * curvature);  Vec4[] controlPoints=new Vec4[numControlPoints];  controlPoints[0]=start;  controlPoints[numControlPoints - 1]=end;  int[] signs=new int[]{1,0,-1,0};  double delta=length / numControlPoints;  for (int i=1; i < numControlPoints - 1; i++) {    int sign=signs[i % signs.length];    controlPoints[i]=start.add3(dir.multiply3(i * delta)).add3(perpendicular.multiply3(sign));  }  return controlPoints;}  }
class C{  public ByteMemberValue(byte b,ConstPool cp){  super('B',cp);  setValue(b);}  }
class C{  @SuppressWarnings("deprecation") public CameraPreference(Context context,AttributeSet attrs){  super(context,attrs);  List<CharSequence> entries=new ArrayList<>();  List<CharSequence> entryValues=new ArrayList<>();  CharSequence defaultCamera=null;  for (int i=0; i < Camera.getNumberOfCameras(); ++i) {    Camera.CameraInfo cameraInfo=new Camera.CameraInfo();    Camera.getCameraInfo(i,cameraInfo);    if (cameraInfo.facing == Camera.CameraInfo.CAMERA_FACING_FRONT) {      entries.add(context.getText(R.string.pref_camera_front));    } else {      entries.add(context.getText(R.string.pref_camera_back));      defaultCamera=String.valueOf(i);    }    entryValues.add(String.valueOf(i));  }  if (defaultCamera == null && entryValues.size() != 0) {    defaultCamera=entryValues.get(0);  }  setEntries(entries.toArray(new CharSequence[entries.size()]));  setEntryValues(entryValues.toArray(new CharSequence[entryValues.size()]));  if (defaultCamera != null) {    setDefaultValue(defaultCamera);  }}  }
class C{  public static String createSHA256HashCode(String dataToHash){  if (dataToHash == null) {    return null;  }  return Hashing.sha256().hashString(trimIfNotNull(dataToHash),Charsets.UTF_8).toString();}  }
class C{  public void annotationAdded(Annotation annotation){  addedAnnotations.add(annotation);}  }
class C{  public static <T extends Operator>Collection<Partition<T>> repartitionParallel(Collection<Partition<T>> partitions,PartitioningContext context){  List<Partition<T>> newPartitions=Lists.newArrayList();  newPartitions.addAll(partitions);  int morePartitionsToCreate=context.getParallelPartitionCount() - newPartitions.size();  if (morePartitionsToCreate < 0) {    Iterator<Partition<T>> partitionIterator=newPartitions.iterator();    while (morePartitionsToCreate++ < 0) {      partitionIterator.next();      partitionIterator.remove();    }  } else {    T anOperator=newPartitions.iterator().next().getPartitionedInstance();    while (morePartitionsToCreate-- > 0) {      DefaultPartition<T> partition=new DefaultPartition<T>(anOperator);      newPartitions.add(partition);    }  }  return newPartitions;}  }
class C{  public void deleteBucketReplication(DeleteBucketReplicationRequest deleteBucketReplicationRequest) throws OSSException, ClientException {  assertParameterNotNull(deleteBucketReplicationRequest,"deleteBucketReplicationRequest");  assertParameterNotNull(deleteBucketReplicationRequest.getReplicationRuleID(),"replicationRuleID");  String bucketName=deleteBucketReplicationRequest.getBucketName();  assertParameterNotNull(bucketName,"bucketName");  ensureBucketNameValid(bucketName);  Map<String,String> params=new LinkedHashMap<String,String>();  params.put(RequestParameters.SUBRESOURCE_REPLICATION,null);  params.put(RequestParameters.SUBRESOURCE_COMP,RequestParameters.COMP_DELETE);  byte[] rawContent=deleteBucketReplicationRequestMarshaller.marshall(deleteBucketReplicationRequest);  Map<String,String> headers=new HashMap<String,String>();  addRequestRequiredHeaders(headers,rawContent);  RequestMessage request=new OSSRequestMessageBuilder(getInnerClient()).setEndpoint(getEndpoint()).setMethod(HttpMethod.POST).setBucket(bucketName).setParameters(params).setHeaders(headers).setInputSize(rawContent.length).setInputStream(new ByteArrayInputStream(rawContent)).setOriginalRequest(deleteBucketReplicationRequest).build();  doOperation(request,emptyResponseParser,bucketName,null);}  }
class C{  public SafeCalendar(int year,int month,int day,int hour,int minute){  this(year,month,day);  set(HOUR_OF_DAY,hour);  set(MINUTE,minute);}  }
class C{  public static void start(Context context,String url){  start(context,url,true,true);}  }
class C{  public static Io.Builder<GraphSONIo> build(final GraphSONVersion version){  return new Builder(version);}  }
class C{  private static byte[] generateMultipartBoundary(){  Random rand=new Random();  byte[] bytes=new byte[rand.nextInt(11) + 30];  for (int i=0; i < bytes.length; i++) {    bytes[i]=MULTIPART_CHARS[rand.nextInt(MULTIPART_CHARS.length)];  }  return bytes;}  }
class C{  @Override protected void initListeners(){}  }
class C{  public void checkCRLFTerminator() throws IOException {  if (this.statusLast == LAST_WAS_OTHER) {    this.out.write('\r');    this.out.write('\n');    this.statusLast=LAST_WAS_CR;  }}  }
class C{  public void write(byte buf[],int off,int len){  try {synchronized (this) {      ensureOpen();      out.write(buf,off,len);      if (autoFlush)       out.flush();    }  } catch (  InterruptedIOException x) {    Thread.currentThread().interrupt();  }catch (  IOException x) {    trouble=true;  }}  }
class C{  public static <T>LazyIterable<T> takeWhile(Iterable<T> iterable,Predicate<? super T> predicate){  return new TakeWhileIterable<>(iterable,predicate);}  }
class C{  public boolean exist(char[][] board,String word){  if (board == null || board.length == 0 || board[0].length == 0 || word == null) {    return false;  }  if (word.length() == 0) {    return true;  }  for (int i=0; i < board.length; i++) {    for (int j=0; j < board[0].length; j++) {      if (board[i][j] == word.charAt(0)) {        if (backtrack(board,i,j,word,0)) {          return true;        }      }    }  }  return false;}  }
class C{  public static boolean hasShortCut(Activity activity){  boolean isInstallShortcut=false;  final ContentResolver cr=activity.getContentResolver();  final String AUTHORITY="com.android.launcher.settings";  final Uri CONTENT_URI=Uri.parse("content://" + AUTHORITY + "/favorites?notify=true");  Cursor c=cr.query(CONTENT_URI,new String[]{"title","iconResource"},"title=?",new String[]{activity.getString(R.string.app_name).trim()},null);  if (c != null && c.getCount() > 0) {    isInstallShortcut=true;  }  return isInstallShortcut;}  }
class C{  public void writeExif(InputStream jpegStream,OutputStream exifOutStream) throws IOException {  if (jpegStream == null || exifOutStream == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  OutputStream s=getExifWriterStream(exifOutStream);  doExifStreamIO(jpegStream,s);  s.flush();}  }
class C{  public void allowTypesByWildcard(final String... patterns){  addPermission(new WildcardTypePermission(patterns));}  }
class C{  public void arrayLoad(final Type type){  mv.visitInsn(type.getOpcode(Opcodes.IALOAD));}  }
class C{  private static CharSequence abc(CharSequence a,CharSequence b,CharSequence c){  return a == null ? (b == null ? c : b) : a;}  }
class C{  private int measureWidth(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mVelocityViewPager == null)) {    result=specSize;  } else {    final int count=mVelocityViewPager.getAdapter().getCount();    result=getPaddingLeft() + getPaddingRight() + (count * mLineWidth)+ ((count - 1) * mGapWidth);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)FloatMath.ceil(result);}  }
class C{  public UnsupportedEncodingException(String s){  super(s);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public JSONException(Throwable cause){  super(cause.getMessage());  this.cause=cause;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:33.442 -0500",hash_original_method="E970ED81058B7D7B34834ED92B99A71B",hash_generated_method="F807A53F2862992E0847ADBEAEAD50F3") public Object parseObject(PemObject obj) throws IOException {  ByteArrayInputStream bIn=new ByteArrayInputStream(obj.getContent());  try {    CertificateFactory certFact=CertificateFactory.getInstance("X.509",provider);    return certFact.generateCertificate(bIn);  } catch (  Exception e) {    throw new PEMException("problem parsing cert: " + e.toString(),e);  }}  }
class C{  SelfIteratorNoPredicate(Compiler compiler,int opPos,int analysis) throws javax.xml.transform.TransformerException {  super(compiler,opPos,analysis,false);}  }
class C{  public Builder defaultResources(@NonNull Resources defaultResources){  if (null == defaultResources) {    throw new IllegalArgumentException("Default resources must not be null.");  }  if (null != this.defaultResources) {    throw new IllegalStateException("Default resources already set.");  }  this.defaultResources=defaultResources;  return this;}  }
class C{  public static List<String> split(String sequence,String delimiter,boolean omitEmpty){  Objects.requireNonNull(sequence);  Objects.requireNonNull(delimiter);  String[] splittedValues=sequence.split(delimiter);  List<String> values=Arrays.asList(splittedValues);  return omitEmpty ? values.stream().filter(null).collect(Collectors.toList()) : values;}  }
class C{  public boolean isUseIdleTimeFrom(){  return idleTimeFromSec != null;}  }
class C{  public Alarm saveAlarm(int month,int date,int hour,int minute){  Alarm alarm=new Alarm();  alarm.id=SECURE_RANDOM.nextInt();  alarm.month=month;  alarm.date=date;  alarm.hour=hour;  alarm.minute=minute;  SharedPreferences.Editor editor=mSharedPreferences.edit();  editor.putString(String.valueOf(alarm.id),alarm.toJson());  editor.apply();  return alarm;}  }
class C{  private static AxSf loadAxSfAttributes(Session session,AxSf axsfAux,Map map,String language,String entidad) throws HibernateException, SQLException, Exception {  if (axsfAux.getAttributeValueAsString(AxSf.FLD5_FIELD) != null) {    try {      Integer id=new Integer(axsfAux.getAttributeValueAsString(AxSf.FLD5_FIELD));      ScrOfic ofic=null;      if (map.containsKey(HIBERNATE_ScrOfic + id)) {        ofic=(ScrOfic)map.get(HIBERNATE_ScrOfic + id);      } else {        ofic=ISOfficesValidator.getOfficeById(session,id);        map.put(HIBERNATE_ScrOfic + id,ofic);      }      if (!"es".equals(language)) {        axsfAux.setFld5Name(DBEntityDAOFactory.getCurrentDBEntityDAO().getDescriptionByLocale(ofic.getId(),false,false,language,EntityByLanguage.getTableName(5),entidad));      } else {        axsfAux.setFld5Name(ofic.getName());      }      axsfAux.setFld5(ofic);    } catch (    ValidationException vE) {    }  }  if (axsfAux.getAttributeValueAsString(AxSf.FLD7_FIELD) != null) {    try {      Integer id=new Integer(axsfAux.getAttributeValueAsString(AxSf.FLD7_FIELD));      ScrOrg org=null;      if (map.containsKey(HIBERNATE_ScrOrg + id)) {        org=(ScrOrg)map.get(HIBERNATE_ScrOrg + id);      } else {        org=ISUnitsValidator.getUnitById(session,id);        map.put(HIBERNATE_ScrOrg + id,org);      }      if (!language.equals("es")) {        axsfAux.setFld7Name(DBEntityDAOFactory.getCurrentDBEntityDAO().getDescriptionByLocale(org.getId(),false,false,language,EntityByLanguage.getTableName(7),entidad));      } else {        axsfAux.setFld7Name(org.getName());      }      axsfAux.setFld7(org);    } catch (    ValidationException vE) {    }  }  if (axsfAux.getAttributeValueAsString(AxSf.FLD8_FIELD) != null) {    try {      Integer id=new Integer(axsfAux.getAttributeValueAsString(AxSf.FLD8_FIELD));      ScrOrg org=null;      if (map.containsKey(HIBERNATE_ScrOrg + id)) {        org=(ScrOrg)map.get(HIBERNATE_ScrOrg + id);      } else {        org=ISUnitsValidator.getUnitById(session,id);        map.put(HIBERNATE_ScrOrg + id,org);      }      if (!language.equals("es")) {        axsfAux.setFld8Name(DBEntityDAOFactory.getCurrentDBEntityDAO().getDescriptionByLocale(org.getId(),false,false,language,EntityByLanguage.getTableName(8),entidad));      } else {        axsfAux.setFld8Name(org.getName());      }      axsfAux.setFld8(org);    } catch (    ValidationException vE) {    }  }  axsfAux=loadAxSfInOutAttributes(session,axsfAux,map,language,entidad);  return axsfAux;}  }
class C{  private void checkLevels(Army army){  checkLevels(army.getUnits());  checkLevels(army.getGarrison());  checkLevels(army.getSpells());  checkLevels(army.getHeroes());}  }
class C{  SortedSet<BasicInterval> tailSetInclusive(int lowerBound){  BasicInterval newLowerBound=new BasicInterval(lowerBound - 1,lowerBound - 1);  return tailSet(newLowerBound);}  }
class C{  private void releaseWakeLock(){  if (wakelock != null && wakelock.isHeld()) {    wakelock.release();  }}  }
class C{  public Conditional createNewConditional(String systemName,String userName){  Conditional c=getBySystemName(systemName);  if (c != null) {    return null;  }  if (userName != null && userName.length() > 0) {    c=getByUserName(userName);    if (c != null) {      if (systemName.equals(c.getSystemName())) {        return null;      }    }  }  if (userName == null) {    log.error("User name is null!");  }  if (systemName != null && systemName.length() > 0) {    c=getBySystemName(systemName);    if (c != null) {      return null;    }  }  if (systemName == null) {    return null;  }  if (systemName.startsWith(SensorGroupFrame.ConditionalSystemPrefix)) {    c=new SensorGroupConditional(systemName,userName);  } else {    c=new DefaultConditional(systemName,userName);  }  register(c);  return c;}  }
class C{  public String toString(String pattern,Locale locale) throws IllegalArgumentException {  if (pattern == null) {    return toString();  }  return DateTimeFormat.forPattern(pattern).withLocale(locale).print(this);}  }
class C{  private static long bytes_to_long(byte[] buffer,int offset){  int fByte=(0x000000FF & ((int)buffer[offset]));  int sByte=(0x000000FF & ((int)buffer[offset + 1]));  int tByte=(0x000000FF & ((int)buffer[offset + 2]));  int foByte=(0x000000FF & ((int)buffer[offset + 3]));  return ((long)(fByte << 24 | sByte << 16 | tByte << 8 | foByte)) & 0xFFFFFFFFL;}  }
class C{  @Override public void onUIReset(PtrFrameLayout frame){  mScale=1f;  mDrawable.stop();}  }
class C{  public static boolean pointInRotatedRect(float[] point,RectF bound,float rot){  Matrix m=new Matrix();  float[] p=Arrays.copyOf(point,2);  m.setRotate(rot,bound.centerX(),bound.centerY());  Matrix m0=new Matrix();  if (!m.invert(m0))   return false;  m0.mapPoints(p);  return inclusiveContains(bound,p[0],p[1]);}  }
class C{  public Source<Float> fromZeroToOne(){  return Compositions.weightWithValues(Floats.fromZeroToOne(),1f,0f);}  }
class C{  public String jsonfile(){  return jsonfile;}  }
class C{  public void importFromGPX(InputStream is){  try {    start(is);  } catch (  Exception e) {    Log.e("Track","importFromGPX failed " + e);    e.printStackTrace();  }}  }
class C{  public static boolean isImdnDisplayedRequested(SipRequest request) throws PayloadException {  String content=request.getContent();  SipUtils.assertContentIsNotNull(content,request);  int index=content.indexOf(ImdnUtils.HEADER_IMDN_DISPO_NOTIF);  if (index == -1) {    return false;  }  index=index + ImdnUtils.HEADER_IMDN_DISPO_NOTIF.length() + 1;  String part=content.substring(index);  String notif=part.substring(0,part.indexOf(CRLF));  return notif.indexOf(ImdnDocument.DISPLAY) != -1;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ANONYMOUS_NUM_EXPR_2__INDEX_1:    return getIndex_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  protected long crawlDelayMillis(){  return this.crawlDelayMillis;}  }
class C{  @Override public boolean isEmpty(){  return tail == null;}  }
class C{  private boolean fireSelectionListeners(final SelectionEvent selectionEvent){  selectionEvent.widget=this;  for (  final SelectionListener listener : this.selectionListeners) {    listener.widgetSelected(selectionEvent);    if (!selectionEvent.doit) {      return false;    }  }  return true;}  }
class C{  public synchronized void close() throws IOException {  if (journalWriter == null) {    return;  }  for (  Entry entry : new ArrayList<Entry>(lruEntries.values())) {    if (entry.currentEditor != null) {      entry.currentEditor.abort();    }  }  trimToSize();  trimToFileCount();  journalWriter.close();  journalWriter=null;}  }
class C{  private Text(boolean isPrimitive){  _data=isPrimitive ? new char[BLOCK_SIZE] : null;}  }
class C{  public SqlViewerDialog(JFrame parent){  super(parent,"SQL-Viewer",ModalityType.DOCUMENT_MODAL);  m_Parent=parent;  m_URL="";  m_User="";  m_Password="";  m_Query="";  createDialog();}  }
class C{  public UnweightedGraph(List<V> vertices,List<Edge> edges){  super(vertices,edges);}  }
class C{  public final int pop(){  m_firstFree--;  int n=m_map[m_firstFree];  m_map[m_firstFree]=DTM.NULL;  return n;}  }
class C{  public void printRecord(final Iterable<?> values) throws IOException {  for (  final Object value : values) {    print(value);  }  println();}  }
class C{  private void validate() throws IOException {  getDatabase().validateNewTableName(_name);  if ((_columns == null) || _columns.isEmpty()) {    throw new IllegalArgumentException(withErrorContext("Cannot create table with no columns"));  }  if (_columns.size() > getFormat().MAX_COLUMNS_PER_TABLE) {    throw new IllegalArgumentException(withErrorContext("Cannot create table with more than " + getFormat().MAX_COLUMNS_PER_TABLE + " columns"));  }  Set<String> colNames=new HashSet<String>();  for (  ColumnBuilder column : _columns) {    validateColumn(colNames,column);  }  List<ColumnBuilder> autoCols=getAutoNumberColumns();  if (autoCols.size() > 1) {    Set<DataType> autoTypes=EnumSet.noneOf(DataType.class);    for (    ColumnBuilder c : autoCols) {      validateAutoNumberColumn(autoTypes,c);    }  }  if (hasIndexes()) {    if (_indexes.size() > getFormat().MAX_INDEXES_PER_TABLE) {      throw new IllegalArgumentException(withErrorContext("Cannot create table with more than " + getFormat().MAX_INDEXES_PER_TABLE + " indexes"));    }    Set<String> idxNames=new HashSet<String>();    boolean foundPk[]=new boolean[1];    for (    IndexBuilder index : _indexes) {      validateIndex(colNames,idxNames,foundPk,index);    }  }}  }
class C{  public static void shuffleCards(int[] deck){  for (int i=0; i < deck.length; i++) {    int index=pickCards(deck);    int temp=deck[i];    deck[i]=deck[index];    deck[index]=temp;  }}  }
class C{  public static void validateFormValues(final Configuration configuration,final Map<FormConfiguration,String> formValues,final Locale locale) throws PwmUnrecoverableException, PwmDataValidationException {  for (  final FormConfiguration formItem : formValues.keySet()) {    final String value=formValues.get(formItem);    formItem.checkValue(configuration,value,locale);  }}  }
class C{  public static ValidationResult validateStopsOnNetworkRoute(final TransitSchedule schedule,final Network network){  ValidationResult result=new ValidationResult();  if (network == null || network.getLinks().size() == 0) {    result.addWarning("Cannot validate stops on network route: No network given!");    return result;  }  for (  TransitLine line : schedule.getTransitLines().values()) {    for (    TransitRoute route : line.getRoutes().values()) {      NetworkRoute netRoute=route.getRoute();      if (netRoute == null) {        result.addIssue(new ValidationResult.ValidationIssue(ValidationResult.Severity.ERROR,"Transit line " + line.getId() + ", route "+ route.getId()+ " has no network route.",ValidationResult.Type.OTHER,Collections.singleton(route.getId())));      } else {        List<Id<Link>> linkIds=new ArrayList<>();        linkIds.add(netRoute.getStartLinkId());        linkIds.addAll(netRoute.getLinkIds());        linkIds.add(netRoute.getEndLinkId());        Iterator<Id<Link>> linkIdIterator=linkIds.iterator();        Id<Link> nextLinkId=linkIdIterator.next();        boolean error=false;        for (        TransitRouteStop stop : route.getStops()) {          Id<Link> linkRefId=stop.getStopFacility().getLinkId();          while (!linkRefId.equals(nextLinkId)) {            if (linkIdIterator.hasNext()) {              nextLinkId=linkIdIterator.next();            } else {              result.addIssue(new ValidationResult.ValidationIssue(ValidationResult.Severity.ERROR,"Transit line " + line.getId() + ", route "+ route.getId()+ ": Stop "+ stop.getStopFacility().getId()+ " cannot be reached along network route.",ValidationResult.Type.ROUTE_HAS_UNREACHABLE_STOP,Collections.singletonList(stop.getStopFacility().getId())));              error=true;              break;            }          }          if (error) {            break;          }        }      }    }  }  return result;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:44.510 -0500",hash_original_method="5A1A5CA8E31989238D097F162F5C184C",hash_generated_method="D36D7BBF127F2983896837F632E4EBE0") public boolean isDirectory(){  try {    return S_ISDIR(Libcore.os.stat(path).st_mode);  } catch (  ErrnoException errnoException) {    return false;  }}  }
class C{  static void showMessageDialog(String message,String title,int messageType){  JOptionPane pane=new JOptionPane(new SelectableLabel(message),messageType);  JDialog dialog=pane.createDialog(title);  dialog.setDefaultCloseOperation(JDialog.HIDE_ON_CLOSE);  setLocation(dialog);  dialog.setVisible(true);  dialog.dispose();}  }
class C{  public void pasteSubsession(List sessionElements,Point upperLeft){  getWorkbench().pasteSubgraph(sessionElements,upperLeft);  getWorkbench().deselectAll();  for (int i=0; i < sessionElements.size(); i++) {    Object o=sessionElements.get(i);    if (o instanceof GraphNode) {      Node modelNode=(Node)o;      getWorkbench().selectNode(modelNode);    }  }  getWorkbench().selectConnectingEdges();}  }
class C{  public void removeExtensionFieldValue(ExtensionFieldValueEntity extensionFieldValue){  extensionFieldValues.remove(extensionFieldValue);}  }
class C{  default B clearCustomEffects(){  this.meta().clearCustomEffects();  return this.getBuilder();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:56.664 -0500",hash_original_method="DA4BDBC496D2A998B5C29C74B17A91EA",hash_generated_method="4F10A592A481471502293BBFC0BAA01E") public CertificateIssuer(byte[] encoding){  super(encoding);}  }
class C{  public void testIsValid(){  ParallaxRfidProtocol instance=new ParallaxRfidProtocol();  assertEquals(true,instance.isValid(msgStandalone));  assertEquals(false,instance.isValid(msgInvalidStandalone));}  }
class C{  public static Metadata readMetadata(File file) throws ImageProcessingException {  BufferedInputStream inputStream;  try {    inputStream=new BufferedInputStream(new FileInputStream(file));  } catch (  FileNotFoundException e) {    throw new ImageProcessingException("File not found: " + file.getPath(),e);  }  int magicNumber=readMagicNumber(inputStream);  try {    inputStream.close();  } catch (  IOException e) {    throw new ImageProcessingException("Error closing file: " + file.getPath(),e);  }  return readMetadata(null,file,magicNumber);}  }
class C{  public static void convert(File pcapngInFile,File pcapOutFile) throws IOException {  byte[] inputBytes=Files.readAllBytes(pcapngInFile.toPath());  if (inputBytes[0] != 0x0A || inputBytes[1] != 0x0D || inputBytes[2] != 0x0D || inputBytes[3] != 0x0A) {    throw new IOException("Pcapng file missing expected header");  }  PcapDecoder pcapNgDecoder=new PcapDecoder(inputBytes);  int status=pcapNgDecoder.decode();  if (status == DecoderStatus.SUCCESS_STATUS) {    FileOutputStream fos=new FileOutputStream(pcapOutFile);    try {      fos.write(MAGIC_NUMBER);      fos.write(VERSION);      fos.write(TIMEZONE_OFFSET);      fos.write(TIMING_ACCURACY);      convert(pcapNgDecoder,fos);    }  finally {      fos.close();    }  } else {    throw new IOException("Unable to parse pcapng file");  }}  }
class C{  private static Bitmap takeScreenshot(){  if (VectorApp.getCurrentActivity() == null) {    return null;  }  View contentView=VectorApp.getCurrentActivity().findViewById(android.R.id.content);  if (contentView == null) {    Log.e(LOG_TAG,"Cannot find content view on " + VectorApp.getCurrentActivity() + ". Cannot take screenshot.");    return null;  }  View rootView=contentView.getRootView();  if (rootView == null) {    Log.e(LOG_TAG,"Cannot find root view on " + VectorApp.getCurrentActivity() + ". Cannot take screenshot.");    return null;  }  rootView.setDrawingCacheEnabled(false);  rootView.setDrawingCacheEnabled(true);  try {    return rootView.getDrawingCache();  } catch (  OutOfMemoryError oom) {    Log.e(LOG_TAG,"Cannot get drawing cache for " + VectorApp.getCurrentActivity() + " OOM.");  }catch (  Exception e) {    Log.e(LOG_TAG,"Cannot get snapshot of screen: " + e);  }  return null;}  }
class C{  protected int assertLineTerminates(int c) throws IOException, RDFParseException {  c=readCodePoint();  c=skipWhitespace(c);  if (c == '#') {  } else {    if (c != -1 && c != '\r' && c != '\n') {      reportFatalError("Content after '.' is not allowed");    }  }  return c;}  }
class C{  protected void addEventListeners(Document doc){  NodeEventTarget target=(NodeEventTarget)doc;  mouseclickListener=new MouseClickTracker();  target.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"click",mouseclickListener,true,null);  mouseoverListener=new MouseOverTracker();  target.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"mouseover",mouseoverListener,true,null);  mouseoutListener=new MouseOutTracker();  target.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"mouseout",mouseoutListener,true,null);  domFocusInListener=new DOMFocusInTracker();  target.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMFocusIn",domFocusInListener,true,null);  domFocusOutListener=new DOMFocusOutTracker();  target.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMFocusOut",domFocusOutListener,true,null);}  }
class C{  private void handleResponse(int response,ResponseData rawData){  mPolicy.processServerResponse(response,rawData);  if (mPolicy.allowAccess()) {    mCallback.allow(response);  } else {    mCallback.dontAllow(response);  }}  }
class C{  public static StddevProjectionExpression stddev(Expression expression){  return new StddevProjectionExpression(expression,false);}  }
class C{  public void chain(NavigationChain chain,ViewTransitionDirection direction){  check();  Preconditions.checkArgument(chain != null && !chain.chains.isEmpty(),"Navigation chain cannot be null nor empty");  ViewTransitionDirection defaultDirection=null;  List<History.Entry> entries=new ArrayList<>(chain.chains.size());  for (int i=0; i < chain.chains.size(); i++) {    NavigationChain.Chain c=chain.chains.get(i);    if (c.path == null) {      defaultDirection=ViewTransitionDirection.BACKWARD;      if (history.canKill()) {        if (c.type == NavigationChain.Chain.TYPE_BACK) {          entries.add(history.kill());        } else {          entries.addAll(history.killAll(false));        }      }    } else {      defaultDirection=ViewTransitionDirection.FORWARD;      if (c.type == NavigationChain.Chain.TYPE_REPLACE) {        History.Entry e=history.kill();        if (history.indexOf(e) != 0) {          entries.add(e);        }      }      int type=c.type == NavigationChain.Chain.TYPE_PUSH || c.type == NavigationChain.Chain.TYPE_REPLACE ? History.NAV_TYPE_PUSH : History.NAV_TYPE_MODAL;      entries.add(history.add(c.path,type));    }  }  entries.get(entries.size() - 1).direction=direction != null ? direction : defaultDirection;  entries.get(0).returnsResult=chain.result;  dispatcher.dispatch(entries);}  }
class C{  public void updateNClob(int columnIndex,Reader reader) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("cachedrowsetimpl.featnotsupp").toString());}  }
class C{  static public void queueOperation(Context context,OperationInfo args){  args.calculateScheduledTime();synchronized (sWorkQueue) {    sWorkQueue.add(args);    sWorkQueue.notify();  }  context.startService(new Intent(context,AsyncQueryServiceHelper.class));}  }
