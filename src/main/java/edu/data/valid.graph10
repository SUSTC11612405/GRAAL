class C{  private void write(String str) throws IOException {  writer.write(str);}  }
class C{  protected Set toValSet(String attrName,String vals){  Set valset=new HashSet();  char[] valchars=vals.toCharArray();  int i, j;  for (i=0, j=0; j < valchars.length; j++) {    char c=valchars[j];    if (c == ',') {      if (i == j) {        i=j + 1;      } else {        String val=new String(valchars,i,j - i).trim();        if (val.length() > 0) {          val=decodeVal(val);        }        valset.add(val);        i=j + 1;      }    }  }  if (j == valchars.length && i < j) {    String val=new String(valchars,i,j - i).trim();    if (val.length() > 0) {      val=decodeVal(val);    }    valset.add(val);  }  return valset;}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_lang_String01() throws NoSuchProviderException, NoSuchAlgorithmException {  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  String provider=null;  for (int i=0; i < validValues.length; i++) {    try {      SSLContext.getInstance(defaultProtocol,provider);      fail("IllegalArgumentException must be thrown when provider is null");    } catch (    IllegalArgumentException e) {    }    try {      SSLContext.getInstance(defaultProtocol,"");      fail("IllegalArgumentException must be thrown when provider is empty");    } catch (    IllegalArgumentException e) {    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testEmployee;  NamedNodeMap attributes;  Node child;  String nodeName;  java.util.Collection htmlExpected=new java.util.ArrayList();  htmlExpected.add("title");  htmlExpected.add("class");  java.util.Collection expected=new java.util.ArrayList();  expected.add("title");  expected.add("class");  expected.add("dir");  java.util.Collection actual=new java.util.ArrayList();  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  testEmployee=elementList.item(1);  attributes=testEmployee.getAttributes();  for (int indexN10070=0; indexN10070 < attributes.getLength(); indexN10070++) {    child=(Node)attributes.item(indexN10070);    nodeName=child.getNodeName();    actual.add(nodeName);  }  if (("text/html".equals(getContentType()))) {    assertEqualsIgnoreCase("attrName_html",htmlExpected,actual);  } else {    assertEquals("attrName",expected,actual);  }}  }
class C{  public void updateTitle(){  if (panel.getTitle() != null) {    setTitle(INFO_CTRL_PANEL_GENERIC_TITLE.get(DynamicConstants.PRODUCT_NAME,panel.getTitle()).toString());  }}  }
class C{  public void addResource(ContextResource resource){  Reference ref=new ResourceRef(resource.getType(),resource.getDescription(),resource.getScope(),resource.getAuth(),resource.getSingleton());  Iterator<String> params=resource.listProperties();  while (params.hasNext()) {    String paramName=params.next();    String paramValue=(String)resource.getProperty(paramName);    StringRefAddr refAddr=new StringRefAddr(paramName,paramValue);    ref.add(refAddr);  }  try {    if (log.isDebugEnabled()) {      log.debug("  Adding resource ref " + resource.getName() + "  "+ ref);    }    createSubcontexts(envCtx,resource.getName());    envCtx.bind(resource.getName(),ref);  } catch (  NamingException e) {    log.error(sm.getString("naming.bindFailed",e));  }  if ("javax.sql.DataSource".equals(ref.getClassName()) && resource.getSingleton()) {    try {      ObjectName on=createObjectName(resource);      Object actualResource=envCtx.lookup(resource.getName());      Registry.getRegistry(null,null).registerComponent(actualResource,on,null);      objectNames.put(resource.getName(),on);    } catch (    Exception e) {      log.warn(sm.getString("naming.jmxRegistrationFailed",e));    }  }}  }
class C{  public UnableToRedirectException(Throwable cause){  super(cause);}  }
class C{  public final void signal(){  if (!isHeldExclusively())   throw new IllegalMonitorStateException();  Node first=firstWaiter;  if (first != null)   doSignal(first);}  }
class C{  public BaseRole(CreationTemplate template,AttrSet attrSet) throws UMSException {  super(template,attrSet);}  }
class C{  public void IllegalIndentationException(int expectedIndent,LineCol lineCol) throws IllegalIndentationException {  if (fastFail)   throw new IllegalIndentationException(buildErrInfo(lineCol),expectedIndent,lineCol);  String msg="the indentation should be " + expectedIndent + " spaces";  msg=buildErrInfo(lineCol) + msg;  error(msg + " at " + lineCol);  errorList.add(new CompilingError(msg,lineCol,CompilingError.Indentation));}  }
class C{  protected void CreateKeys(OffsetItem fdarrayRef,OffsetItem fdselectRef,OffsetItem charsetRef,OffsetItem charstringsRef){  OutputList.addLast(fdarrayRef);  OutputList.addLast(new UInt8Item((char)12));  OutputList.addLast(new UInt8Item((char)36));  OutputList.addLast(fdselectRef);  OutputList.addLast(new UInt8Item((char)12));  OutputList.addLast(new UInt8Item((char)37));  OutputList.addLast(charsetRef);  OutputList.addLast(new UInt8Item((char)15));  OutputList.addLast(charstringsRef);  OutputList.addLast(new UInt8Item((char)17));}  }
class C{  public SessionEvent(Session session,String type,Object data){  super(session);  this.session=session;  this.type=type;  this.data=data;}  }
class C{  public double trace_length(){  double result=0;  for (  BrdItem curr_item : item_list) {    if (curr_item instanceof BrdTracep) {      result+=((BrdTracep)curr_item).get_length();    }  }  return result;}  }
class C{  public final WritableRaster filter(Raster src,WritableRaster dst){  if (dst == null) {    dst=createCompatibleDestRaster(src);  } else   if (src == dst) {    throw new IllegalArgumentException("src image cannot be the " + "same as the dst image");  } else   if (src.getNumBands() != dst.getNumBands()) {    throw new ImagingOpException("Different number of bands in src " + " and dst Rasters");  }  if (ImagingLib.filter(this,src,dst) == null) {    throw new ImagingOpException("Unable to convolve src image");  }  return dst;}  }
class C{  public Object clone() throws CloneNotSupportedException {  OptionListModel clone=(OptionListModel)super.clone();  clone.value=(BitSet)value.clone();  clone.listenerList=new EventListenerList();  return clone;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.AuthnContextElement createAuthnContextElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.AuthnContextElementImpl();}  }
class C{  public void mouseMoved(MouseEvent e){  getHandler().mouseMoved(e);}  }
class C{  private PasswordPolicyImpl(ServerContext serverContext,PasswordPolicyCfg configuration) throws ConfigException, InitializationException {  this.serverContext=serverContext;  updateConfiguration(configuration,true);}  }
class C{  public boolean isRequired(){  return this.required;}  }
class C{  protected static void addChoiceValues(AttributeSchema attrSchema,Map choiceValMap) throws SMSException, SSOException {  for (Iterator i=choiceValMap.keySet().iterator(); i.hasNext(); ) {    String i18nKey=(String)i.next();    Set valueSet=(Set)choiceValMap.get(i18nKey);    String value=(String)valueSet.iterator().next();    attrSchema.addChoiceValue(value,i18nKey);  }}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  String realm=getStringOptionValue(IArgument.REALM_NAME);  String pattern=getStringOptionValue(IArgument.FILTER);  boolean recursive=isOptionSet(IArgument.RECURSIVE);  String strRecursive=(recursive) ? "recursive" : "non recursive";  if ((pattern == null) || (pattern.trim().length() == 0)) {    pattern="*";  }  String[] params={realm,pattern,strRecursive};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_SEARCH_REALM",params);  try {    OrganizationConfigManager ocm=new OrganizationConfigManager(adminSSOToken,realm);    Set results=ocm.getSubOrganizationNames(pattern,recursive);    IOutput outputWriter=getOutputWriter();    if ((results != null) && !results.isEmpty()) {      String template=getResourceString("search-realm-results");      String[] arg=new String[1];      for (Iterator i=results.iterator(); i.hasNext(); ) {        arg[0]=(String)i.next();        outputWriter.printlnMessage(MessageFormat.format(template,(Object[])arg));      }      outputWriter.printlnMessage(getResourceString("search-realm-succeed"));    } else {      outputWriter.printlnMessage(getResourceString("search-realm-no-results"));    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_SEARCH_REALM",params);  } catch (  SMSException e) {    String[] args={realm,strRecursive,e.getMessage()};    debugError("SearchRealms.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SEARCH_REALM",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public void removeMember(Member member){synchronized (membersLock) {    map.remove(member);    int n=-1;    for (int i=0; i < members.length; i++) {      if (members[i] == member || members[i].equals(member)) {        n=i;        break;      }    }    if (n < 0)     return;    Member results[]=new Member[members.length - 1];    int j=0;    for (int i=0; i < members.length; i++) {      if (i != n) {        results[j++]=members[i];      }    }    members=results;  }}  }
class C{  public static DecodeException error(final LocalizableMessage message,final Throwable cause){  return new DecodeException(message,false,cause);}  }
class C{  private static void registerProp(String propertyName,String attrName) throws Exception {  String baseName=attrName.substring(7);  String methodBaseName=propNametoCamlCase(baseName);  registerJebProp(attrName,methodBaseName);  attrMap.put(propertyName,attrName);}  }
class C{  public static List<String> readLines(InputStream input,Charset encoding) throws IOException {  InputStreamReader reader=new InputStreamReader(input,Charsets.toCharset(encoding));  return readLines(reader);}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof JobName);}  }
class C{  @Override public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  String realm=getStringOptionValue(IArgument.REALM_NAME);  String name=getStringOptionValue(PARAM_NAME);  String[] params={realm,name};  Set<SubjectImplementation> newSubjects=getSubjects(rc);  boolean bAdd=isOptionSet(PARAM_ADD);  Subject userSubject=SubjectUtils.createSubject(getAdminSSOToken());  ApplicationPrivilegeManager apm=ApplicationPrivilegeManager.getInstance(realm,userSubject);  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_UPDATE_APPLICATION_PRIVILEGE",params);  try {    ApplicationPrivilege appPrivilege=apm.getPrivilege(name);    Set<SubjectImplementation> origSubjects=appPrivilege.getSubjects();    Set<SubjectImplementation> subjects=(bAdd) ? mergeSubjects(origSubjects,newSubjects) : newSubjects;    appPrivilege.setSubject(subjects);    apm.replacePrivilege(appPrivilege);    Object[] msgParam={name};    getOutputWriter().printlnMessage(MessageFormat.format(getResourceString("update-application-privilege-succeeded"),msgParam));    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_UPDATE_APPLICATION_PRIVILEGE",params);  } catch (  EntitlementException ex) {    String[] paramExs={realm,name,ex.getMessage()};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"FAILED_UPDATE_APPLICATION_PRIVILEGE",paramExs);    throw new CLIException(ex,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  private int useCount(){  return m_useCount2;}  }
class C{  private static boolean includeAuthorityInRequestLine(Request request,Proxy.Type proxyType){  return !request.isHttps() && proxyType == Proxy.Type.HTTP;}  }
class C{  private static TypeDescription statementDescription(){  return new TypeDescription.Latent("com.datastax.driver.core.Statement",Modifier.ABSTRACT,null,null);}  }
class C{  static public void fail(){  fail(null);}  }
class C{  public void postMail(String recipients[],String subject,String message,String from,String charset) throws MessagingException {  postMail(recipients,subject,message,from,"text/plain",charset);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentcreateelementNS02.class,args);}  }
class C{  public void parse(InputSource input) throws SAXException, IOException {  setupParse();  parent.parse(input);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.TokenTypesOfferedType createTokenTypesOfferedType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.TokenTypesOfferedTypeImpl();}  }
class C{  public List(Collection<?> list){  super(list);}  }
class C{  void terminatedRequest(Integer index){  serversCounters.decrementAndGet(index);}  }
class C{  private void readObject(ObjectInputStream s) throws InvalidObjectException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_lang_String() throws Exception {  Provider[] providers=Security.getProviders("CertificateFactory.X.509");  if (providers != null) {    for (int i=0; i < providers.length; i++) {      CertificateFactory fact=CertificateFactory.getInstance("X.509",providers[i].getName());      assertNotNull("factory is null",fact);    }  } else {    fail("No providers support CertificateFactory.X.509");  }  try {    CertificateFactory.getInstance("X.509","IHaventBeenConfigured");    fail("Should have thrown NoSuchProviderException");  } catch (  NoSuchProviderException e) {  }}  }
class C{  private AST.MapExp parseExpMap(ElementStartNode startNode) throws SyntaxException {  List<Statement> stmts=parseElemStart(startNode,true,Collections.emptySet(),true);  if (stmts.size() % 2 != 0) {    throw new LtBug("the list should contain key-value entries");  }  boolean isKey=true;  LinkedHashMap<Expression,Expression> map=new LinkedHashMap<>();  Expression exp=null;  boolean jumpValue=false;  for (  Statement s : stmts) {    if (jumpValue) {      jumpValue=false;      continue;    }    if (s instanceof Expression) {      if (isKey) {        exp=(Expression)s;      } else {        map.put(exp,(Expression)s);      }      isKey=!isKey;    } else {      err.UnexpectedTokenException("expression",s.toString(),s.line_col());      err.debug("ignore this entry");      if (isKey) {        jumpValue=true;      } else {        isKey=true;      }    }  }  return new AST.MapExp(map,startNode.getLineCol());}  }
class C{  private final boolean compareAndSetTail(Node expect,Node update){  return unsafe.compareAndSwapObject(this,tailOffset,expect,update);}  }
class C{  public void initWebappDefaults(String contextPath){  Container ctx=getHost().findChild(contextPath);  initWebappDefaults((Context)ctx);}  }
class C{  public static String firstValueAsString(Entry entry,String attrDesc){  Attribute attr=entry.getAttribute(attrDesc);  return (attr != null && !attr.isEmpty()) ? attr.firstValueAsString() : null;}  }
class C{  public static String formatAsGeneralizedTime(final long date){  final StringBuilder sb=new StringBuilder(19);  final GregorianCalendar calendar=new GregorianCalendar(TIME_ZONE_UTC_OBJ);  calendar.setLenient(false);  calendar.setTimeInMillis(date);  int n=calendar.get(Calendar.YEAR);  if (n < 0) {    final IllegalArgumentException e=new IllegalArgumentException("Year cannot be < 0:" + n);    throw e;  } else   if (n < 10) {    sb.append("000");  } else   if (n < 100) {    sb.append("00");  } else   if (n < 1000) {    sb.append("0");  }  sb.append(n);  n=calendar.get(Calendar.MONTH) + 1;  if (n < 10) {    sb.append("0");  }  sb.append(n);  n=calendar.get(Calendar.DAY_OF_MONTH);  if (n < 10) {    sb.append("0");  }  sb.append(n);  n=calendar.get(Calendar.HOUR_OF_DAY);  if (n < 10) {    sb.append("0");  }  sb.append(n);  n=calendar.get(Calendar.MINUTE);  if (n < 10) {    sb.append("0");  }  sb.append(n);  n=calendar.get(Calendar.SECOND);  if (n < 10) {    sb.append("0");  }  sb.append(n);  sb.append('.');  n=calendar.get(Calendar.MILLISECOND);  if (n < 10) {    sb.append("00");  } else   if (n < 100) {    sb.append("0");  }  sb.append(n);  sb.append('Z');  return sb.toString();}  }
class C{  public void test_addSubjectAlternativeNameLintLjava_lang_String2() throws Exception {  GeneralName san6=new GeneralName(6,"http://uniform.Resource.Id");  GeneralName san2=new GeneralName(2,"dNSName");  GeneralNames sans1=new GeneralNames();  sans1.addName(san6);  sans1.addName(san2);  X509CertSelector selector=new X509CertSelector();  selector.addSubjectAlternativeName(6,"http://uniform.Resource.Id");  selector.addSubjectAlternativeName(2,"dNSName");  GeneralNames sans2=new GeneralNames();  sans2.addName(san2);  TestCert cert1=new TestCert(sans1);  TestCert cert2=new TestCert(sans2);  assertTrue(selector.match(cert1));  assertFalse(selector.match(cert2));  selector.setSubjectAlternativeNames(null);  GeneralName name=new GeneralName(new Name("O=Android"));  try {    selector.addSubjectAlternativeName(0,(name.toString()));  } catch (  IOException e) {  }}  }
class C{  public KerberosKey(KerberosPrincipal principal,byte[] keyBytes,int keyType,int versionNum){  this.principal=principal;  this.versionNum=versionNum;  key=new KeyImpl(keyBytes,keyType);}  }
class C{  public Builder removeAllOptionalAttributes(){  this.optionalAttributes.clear();  return this;}  }
class C{  @Override public final boolean isValid(){  return isValid;}  }
class C{  public static void main(String[] args) throws TestFailed, ClassNotFoundException {  testFailLoadAndGc();}  }
class C{  private void replaceBundle(List<Bundle> installedBundles,Path newBundlePath) throws UpdateException {  try {    Path oldBundlePath=getBundlePath(installedBundles.get(0));    for (    Bundle b : installedBundles) {      Path path=getBundlePath(b);      updateLogger.log(newBundlePath,concatArchiveExtension(path));      Files.move(path,concatArchiveExtension(path));    }    Files.copy(newBundlePath,oldBundlePath.getParent().resolve(newBundlePath.getFileName()));  } catch (  IOException e) {    throw new UpdateException("Cannot replace file " + newBundlePath.toString(),e);  }}  }
class C{  public CFFFontSubset(byte[] cff,Map<Integer,int[]> GlyphsUsed){  super(cff);  this.GlyphsUsed=GlyphsUsed;  glyphsInList=new ArrayList<>(GlyphsUsed.keySet());  for (int i=0; i < fonts.length; ++i) {    seek(fonts[i].charstringsOffset);    fonts[i].nglyphs=getCard16();    seek(stringIndexOffset);    fonts[i].nstrings=getCard16() + standardStrings.length;    fonts[i].charstringsOffsets=getIndex(fonts[i].charstringsOffset);    if (fonts[i].fdselectOffset >= 0) {      readFDSelect(i);      BuildFDArrayUsed(i);    }    if (fonts[i].isCID)     ReadFDArray(i);    fonts[i].CharsetLength=CountCharset(fonts[i].charsetOffset,fonts[i].nglyphs);  }}  }
class C{  public void process(String name,Vector elems,Hashtable atts,String pcdata){  str=pcdata;}  }
class C{  @Override public void initialize(ConfigurableApplicationContext c){  c.addBeanFactoryPostProcessor(new JsfCdiToSpringBeanFactoryPostProcessor());}  }
class C{  public Set searchFilteredRoles(String wildcard,Map avPairs,int level) throws AMException, SSOException {  return searchObjects(AMNamingAttrManager.getNamingAttr(FILTERED_ROLE),getSearchFilter(AMObject.FILTERED_ROLE),wildcard,avPairs,level);}  }
class C{  private static void assertEcho(String result,String expected){  assertTrue(result.indexOf("<p>" + expected + "</p>") > 0);}  }
class C{  @Override public void flush() throws IOException {  doFlush(true);}  }
class C{  public void testGenerateCertificate() throws Exception {  CertificateFactory[] certFs=initCertFs();  assertNotNull("CertificateFactory objects were not created",certFs);  Certificate[] certs=new Certificate[3];  for (int i=0; i < certFs.length; i++) {    certs[i]=certFs[i].generateCertificate(new ByteArrayInputStream(TestUtils.getEncodedX509Certificate()));  }  assertEquals(certs[0],certs[1]);  assertEquals(certs[0],certs[2]);}  }
class C{  public boolean forceDaemonThreads(){  return isPropertyTrue(PROPERTY_FORCE_DAEMON_THREADS);}  }
class C{  public String publishInstance(final String urlElement,String realm,STSPublishContext publishContext,CustomTokenOperationContext customTokenOperationContext) throws IOException {  RestSTSInstanceConfig instanceConfig=restSTSInstanceConfigFactory.createRestSTSInstanceConfig(urlElement,realm,publishContext,customTokenOperationContext);  String jsonString=buildPublishInvocationJsonValue(instanceConfig).toString();  logger.log(Level.SEVERE,"Publishing instance according to the following config state: " + jsonString);  String response=invokeRestSTSInstancePublish(jsonString);  logger.log(Level.SEVERE,"Publish result: " + response);  return parseInstanceUrl(response);}  }
class C{  public String toString(){  return ("SamplePrincipal:  " + name);}  }
class C{  public boolean popBoolean(){  BaseTypeWrapper wrapper=(BaseTypeWrapper)this.pop();  Boolean value=(Boolean)wrapper.getValue();  return value.booleanValue();}  }
class C{  ByteString toByteString(){  if (value == null) {    value=ByteString.valueOfLong(id);  }  return value;}  }
class C{  protected int addNode(int type,int expandedTypeID,int parentIndex,int previousSibling,int dataOrPrefix,boolean canHaveFirstChild){  int nodeIndex=m_size++;  if (m_dtmIdent.size() == (nodeIndex >>> DTMManager.IDENT_DTM_NODE_BITS)) {    addNewDTMID(nodeIndex);  }  m_firstch.addElement(canHaveFirstChild ? NOTPROCESSED : DTM.NULL);  m_nextsib.addElement(NOTPROCESSED);  m_parent.addElement(parentIndex);  m_exptype.addElement(expandedTypeID);  m_dataOrQName.addElement(dataOrPrefix);  if (m_prevsib != null) {    m_prevsib.addElement(previousSibling);  }  if (DTM.NULL != previousSibling) {    m_nextsib.setElementAt(nodeIndex,previousSibling);  }  if (m_locator != null && m_useSourceLocationProperty) {    setSourceLocation();  }switch (type) {case DTM.NAMESPACE_NODE:    declareNamespaceInContext(parentIndex,nodeIndex);  break;case DTM.ATTRIBUTE_NODE:break;default :if (DTM.NULL == previousSibling && DTM.NULL != parentIndex) {m_firstch.setElementAt(nodeIndex,parentIndex);}break;}return nodeIndex;}  }
class C{  public static StringArgument adminUid(final LocalizableMessage description) throws ArgumentException {  return adminUidArgument(false,description);}  }
class C{  public SchemaBuilder addToSchemaOverwrite(){  return addToSchema(true);}  }
class C{  public static boolean modifierIsCompatible(String str,Set<Modifier> modifiers){  boolean isAccessMod=accessModifiers.contains(str);  Modifier.Available mod=getModifierFromString(str);  for (  Modifier m : modifiers) {    if (m.modifier.equals(mod) || (isAccessMod && (m.modifier.equals(Modifier.Available.PUBLIC) || m.modifier.equals(Modifier.Available.PRIVATE) || m.modifier.equals(Modifier.Available.PROTECTED)|| m.modifier.equals(Modifier.Available.PKG))) || (mod.equals(Modifier.Available.VAL) && m.modifier.equals(Modifier.Available.ABSTRACT))|| (mod.equals(Modifier.Available.ABSTRACT) && m.modifier.equals(Modifier.Available.VAL))|| (mod.equals(Modifier.Available.VAL) && m.modifier.equals(Modifier.Available.VAR))|| (mod.equals(Modifier.Available.VAR) && m.modifier.equals(Modifier.Available.VAL)))     return false;  }  return true;}  }
class C{  public void handleAddEntityButtonRequest(RequestInvocationEvent event){}  }
class C{  public JwtCookieSession(final Request request,final KeyPair pair,final String cookieName,final String cookieDomain,final TimeService timeService,final Duration sessionTimeout,final SigningHandler signingHandler){  super(new LinkedHashMap<String,Object>());  this.pair=pair;  this.cookieName=cookieName;  this.cookieDomain=cookieDomain;  this.timeService=timeService;  this.signingHandler=signingHandler;  if (sessionTimeout.to(MILLISECONDS) > MAX_SESSION_TIMEOUT.to(MILLISECONDS)) {    this.sessionTimeout=MAX_SESSION_TIMEOUT;  } else {    this.sessionTimeout=sessionTimeout;  }  loadJwtSession(request);}  }
class C{  @RequestMapping(value="/foos",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Foo> createFoo(@RequestBody Foo foo) throws URISyntaxException {  log.debug("REST request to save Foo : {}",foo);  if (foo.getId() != null) {    return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert("foo","idexists","A new foo cannot already have an ID")).body(null);  }  Foo result=fooRepository.save(foo);  return ResponseEntity.created(new URI("/api/foos/" + result.getId())).headers(HeaderUtil.createEntityCreationAlert("foo",result.getId().toString())).body(result);}  }
class C{  protected void count_and_yield(boolean moreExpected) throws SAXException {  if (!moreExpected)   eventcounter=0;  if (--eventcounter <= 0) {    co_yield(true);    eventcounter=frequency;  }}  }
class C{  protected final void _finishToken() throws IOException {  _tokenIncomplete=false;  int tb=_typeAsInt;  int type=(tb >> 5);  if (type == 1) {    _finishNumberToken(tb);    return;  }  if (type <= 3) {    _decodeShortAsciiValue(1 + (tb & 0x3F));    return;  }  if (type <= 5) {    _decodeShortUnicodeValue(2 + (tb & 0x3F));    return;  }  if (type == 7) {    tb&=0x1F;switch (tb >> 2) {case 0:      _decodeLongAscii();    return;case 1:  _decodeLongUnicode();return;case 2:_binaryValue=_read7BitBinaryWithLength();return;case 7:_finishRawBinary();return;}}_throwInternal();}  }
class C{  static Map trustedProviderSetToEntityIDMap(Set providerSet,String realm){  if ((providerSet == null) || providerSet.isEmpty()) {    return Collections.EMPTY_MAP;  }  Map map=new HashMap();  Iterator it=providerSet.iterator();  while (it.hasNext()) {    String val=(String)it.next();    if (debug.messageEnabled()) {      debug.message("COTUtils.setToEntityIDMap: check " + val);    }    if (val.endsWith(SAML2_DELIM)) {      Set set=new HashSet();      set.add(COTConstants.SAML2);      map.put(val.substring(0,val.length() - SAML2_DELIM.length()),set);    } else     if (val.endsWith(IDFF_DELIM)) {      Set set=new HashSet();      set.add(COTConstants.IDFF);      map.put(val.substring(0,val.length() - IDFF_DELIM.length()),set);    } else     if (val.endsWith(WSFED_DELIM)) {      Set set=new HashSet();      set.add(COTConstants.WS_FED);      map.put(val.substring(0,val.length() - WSFED_DELIM.length()),set);    } else {      Set protocolSet=findProtocolsForEntity(val,realm);      if ((protocolSet != null) && !protocolSet.isEmpty()) {        map.put(val,protocolSet);      }    }  }  if (debug.messageEnabled()) {    debug.message("COTUtils.setToEntityIDMap: return " + map);  }  return map;}  }
class C{  public void addElement(Node value){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));  if ((m_firstFree + 1) >= m_mapSize) {    if (null == m_map) {      m_map=new Node[m_blocksize];      m_mapSize=m_blocksize;    } else {      m_mapSize+=m_blocksize;      Node newMap[]=new Node[m_mapSize];      System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);      m_map=newMap;    }  }  m_map[m_firstFree]=value;  m_firstFree++;}  }
class C{  public DeletePropertyActionHandler(SessionPropertyWhitelist sessionPropertyWhitelist,SessionResourceUtil sessionResourceUtil){  this.sessionPropertyWhitelist=sessionPropertyWhitelist;  this.sessionResourceUtil=sessionResourceUtil;}  }
class C{  public void modify(Attr attr,ModificationType modificationType){  Modification modification=new Modification(modificationType,attr.toLDAPAttribute());  modify(Collections.singleton(modification));}  }
class C{  public static ByteBuffer synchronize(ByteBuffer source){  int len=source.remaining();  byte[] bytes=new byte[len + 1];  source.get(bytes,0,len);  int from=0, to=0;  boolean copy=true;  while (from < len) {    byte byteValue=bytes[from++];    if (copy || byteValue != 0)     bytes[to++]=byteValue;    copy=((byteValue & MPEGFrameHeader.SYNC_BYTE1) != MPEGFrameHeader.SYNC_BYTE1);  }  ByteBuffer bb2=ByteBuffer.wrap(bytes,0,to);  return bb2;}  }
class C{  @Override public void toString(StringBuilder buffer){  buffer.append("PersistentSearchControl(changeTypes=\"");  PersistentSearchChangeType.changeTypesToString(changeTypes,buffer);  buffer.append("\",changesOnly=");  buffer.append(changesOnly);  buffer.append(",returnECs=");  buffer.append(returnECs);  buffer.append(")");}  }
class C{  public void registerService(String serviceName,boolean createTemplate,boolean activate) throws AMException, SSOException {  if (debug.messageEnabled()) {    debug.message("AMOrganizationalUnitImpl.registerService(" + serviceName + ", "+ createTemplate+ ", "+ activate+ ")");  }  dsServices.registerService(super.token,super.entryDN,serviceName);  Set serviceStatus=getAttribute(SERVICE_STATUS_ATTRIBUTE);  if (!serviceStatus.equals(Collections.EMPTY_SET)) {    Iterator iter=serviceStatus.iterator();    while (iter.hasNext()) {      String status=(String)iter.next();      if (status.equalsIgnoreCase(serviceName)) {        Object args[]={serviceName};        throw new AMException(AMSDKBundle.getString("464",args,super.locale),"464",args);      }    }  } else {    serviceStatus=new HashSet();  }  serviceStatus.add(serviceName);  setAttribute(SERVICE_STATUS_ATTRIBUTE,serviceStatus);  try {    store();  } catch (  AMException le) {    try {      Set objectClass=getAttribute("objectclass");      if (debug.messageEnabled()) {        debug.message("object class=" + objectClass);      }      if (!objectClass.contains("iplanet-am-managed-org-unit")) {        objectClass.add("iplanet-am-managed-org-unit");        setAttribute("objectclass",objectClass);        setAttribute(SERVICE_STATUS_ATTRIBUTE,serviceStatus);        store();      } else {        throw le;      }    } catch (    Exception e) {      if (debug.messageEnabled()) {        debug.message("error adding objectclass",e);      }      throw le;    }  }  if (createTemplate) {    try {      if (AMServiceUtils.serviceHasSubSchema(super.token,serviceName,SchemaType.POLICY)) {        createTemplate(AMTemplate.POLICY_TEMPLATE,serviceName,null);      }      if (AMServiceUtils.serviceHasSubSchema(super.token,serviceName,SchemaType.DYNAMIC)) {        createTemplate(AMTemplate.DYNAMIC_TEMPLATE,serviceName,null);      }    } catch (    SMSException smsex) {      throw new AMException(AMSDKBundle.getString("451",super.locale),"451");    }  }}  }
class C{  ConcurrentSkipListSet(ConcurrentNavigableMap<E,Object> m){  this.m=m;}  }
class C{  private boolean checkForAttributeStatement(AttributeStatement attrStatement){  List attributes=attrStatement.getAttribute();  if (attributes == null || attributes.size() == 0) {    return false;  }  Iterator iter=attributes.iterator();  Attribute attribute=(Attribute)iter.next();  if (attribute.getAttributeName().equals(IFSConstants.DISCO_RESOURCE_OFFERING_NAME)) {    bootStrapStatement=attrStatement;    return true;  } else   if (attribute.getAttributeName().equals(IFSConstants.AUTO_FED_ATTR)) {    _autoFedStatement=attrStatement;    List attrValue=null;    try {      attrValue=attribute.getAttributeValue();    } catch (    SAMLException se) {      FSUtils.debug.error("FSAssertionArtifactHandler.checkFor" + "AttributeStatement: ",se);    }    String _autoFedValue=null;    if (attrValue != null && attrValue.size() != 0) {      Iterator iter2=attrValue.iterator();      Element elem=(Element)iter2.next();      _autoFedValue=XMLUtils.getElementValue(elem);    }    String enabledStr=IDFFMetaUtils.getFirstAttributeValueFromConfig(hostConfig,IFSConstants.ENABLE_AUTO_FEDERATION);    if (enabledStr != null && enabledStr.equalsIgnoreCase("true") && _autoFedValue != null) {      autoFedSearchMap=new HashMap();      Set set=new HashSet();      set.add(_autoFedValue);      autoFedSearchMap.put(IDFFMetaUtils.getFirstAttributeValueFromConfig(hostConfig,IFSConstants.AUTO_FEDERATION_ATTRIBUTE),set);    }    return true;  }  return false;}  }
class C{  public void removeAccessibleSelection(int i){  if (i < 0 || i >= getItemCount()) {    return;  }  JMenuItem mi=getItem(i);  if (mi != null && mi instanceof JMenu) {    if (mi.isSelected()) {      MenuElement old[]=MenuSelectionManager.defaultManager().getSelectedPath();      MenuElement me[]=new MenuElement[old.length - 2];      for (int j=0; j < old.length - 2; j++) {        me[j]=old[j];      }      MenuSelectionManager.defaultManager().setSelectedPath(me);    }  }}  }
class C{  protected void PredicateExpr() throws javax.xml.transform.TransformerException {  int opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  appendOp(2,OpCodes.OP_PREDICATE);  Expr();  m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),OpCodes.ENDOP);  m_ops.setOp(OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) + 1);  m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);}  }
class C{  Node(E item){  UNSAFE.putObject(this,itemOffset,item);}  }
class C{  public static void main(String[] args){  int returnCode=main(args,true,System.out,System.err);  if (returnCode != 0) {    System.exit(filterExitCode(returnCode));  }}  }
class C{  public boolean isActive(String flagName,FlagContextInterface flagContext){  return isActive(flagName,flagContext,false);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdatareplacedataend.class,args);}  }
class C{  @Override public void startPrefixMapping(String prefix,String namespaceURI) throws SAXException {  if (saxLog.isDebugEnabled()) {    saxLog.debug("startPrefixMapping(" + prefix + ","+ namespaceURI+ ")");  }  ArrayStack<String> stack=namespaces.get(prefix);  if (stack == null) {    stack=new ArrayStack<>();    namespaces.put(prefix,stack);  }  stack.push(namespaceURI);}  }
class C{  public InitializationBuilder requireErrorAndDebugLogPublisher(final PrintStream loggingOut,final PrintStream errConfiguringLogging){  subSystemsToInitialize.add(SubSystem.ERROR_DEBUG_LOGGERS);  this.loggingOut=loggingOut;  this.errConfiguringLogging=errConfiguringLogging;  return this;}  }
class C{  public PluginResult.PostOperation invokePostOperationBindPlugins(PostOperationBindOperation bindOperation){  PluginResult.PostOperation result=null;  PluginResult.PostOperation finalResult=null;  ArrayList<DirectoryServerPlugin> skippedPlugins=skippedPreOperationPlugins.remove(bindOperation);  for (  DirectoryServerPlugin p : postOperationBindPlugins) {    if (isInternalOperation(bindOperation,p) || isSkipped(skippedPlugins,p)) {      continue;    }    try {      result=p.doPostOperation(bindOperation);    } catch (    Exception e) {      logException(bindOperation,p,e,ERR_PLUGIN_POST_OPERATION_PLUGIN_EXCEPTION);    }    if (result == null) {      logNullResult(bindOperation,p,ERR_PLUGIN_POST_OPERATION_PLUGIN_RETURNED_NULL);    } else     if (!result.continueProcessing()) {      finalResult=result;    }  }  if (result == null) {    finalResult=PluginResult.PostOperation.continueOperationProcessing();  } else   if (finalResult == null) {    finalResult=result;  }  return finalResult;}  }
class C{  public void SetOptions(int fillOrder,int compression,int t4Options,int t6Options){  this.fillOrder=fillOrder;  this.compression=compression;  this.t4Options=t4Options;  this.t6Options=t6Options;  this.oneD=t4Options & 0x01;  this.uncompressedMode=(t4Options & 0x02) >> 1;  this.fillBits=(t4Options & 0x04) >> 2;}  }
class C{  public boolean hasFixedXref(){  return fixedXref;}  }
class C{  public final void reset(byte[] encoded) throws IOException {  buffer=encoded;  next();}  }
class C{  public void handleBtnSearchRequest(RequestInvocationEvent event){  submitCycle=true;  forwardTo();}  }
class C{  public void logModifyRequest(ModifyOperation modifyOperation){}  }
class C{  public void testGetSchemasReadOnly() throws SQLException {  ResultSet rs=meta.getSchemas();  checkSchemas(rs,new String[0]);}  }
class C{  public static boolean checkQuery(Element element,String queryname){  String tag=element.getLocalName();  if (tag == null) {    return false;  } else   if (tag.equals("Query") || tag.equals("SubjectQuery")) {    NamedNodeMap nm=element.getAttributes();    int len=nm.getLength();    String attrName;    Attr attr;    boolean found=false;    for (int j=0; j < len; j++) {      attr=(Attr)nm.item(j);      attrName=attr.getLocalName();      if ((attrName != null) && (attrName.equals("type")) && (attr.getNodeValue().equals(queryname + "Type"))) {        found=true;        break;      }    }    if (!found) {      return false;    }  } else   if (!tag.equals(queryname)) {    return false;  }  return true;}  }
class C{  protected DropTargetAutoScroller createDropTargetAutoScroller(Component c,Point p){  return new DropTargetAutoScroller(c,p);}  }
class C{  public boolean isFakeAttribute(Object object,String name){  if (fakeAttributes == null) {    return false;  }  List<String> result=fakeAttributes.get(object.getClass());  if (result == null) {    result=fakeAttributes.get(Object.class);  }  if (result == null) {    return false;  } else {    return result.contains(name);  }}  }
class C{  public String doConsentToIntro(HttpServletRequest request) throws FSPostLoginException {  String metaAlias=request.getParameter(IFSConstants.META_ALIAS);  String targetURL=request.getParameter(IFSConstants.LRURL);  String cotSelected=request.getParameter(IFSConstants.COTKEY);  return doConsentToIntro(metaAlias,targetURL,cotSelected);}  }
class C{  public boolean validate(String value){  return !DN.valueOf(value).isRootDN();}  }
class C{  public XMPNode(String name,String value,PropertyOptions options){  this.name=name;  this.value=value;  this.options=options;}  }
class C{  public static boolean isHexDigit(final char c){  return com.forgerock.opendj.util.StaticUtils.isHexDigit(c);}  }
class C{  @SuppressWarnings("unchecked") @Override public PdfDictionary makeIndirect(PdfDocument document,PdfIndirectReference reference){  return (PdfDictionary)super.makeIndirect(document,reference);}  }
class C{  public WildcardFileFilter(List<String> wildcards,IOCase caseSensitivity){  if (wildcards == null) {    throw new IllegalArgumentException("The wildcard list must not be null");  }  this.wildcards=wildcards.toArray(new String[wildcards.size()]);  this.caseSensitivity=caseSensitivity == null ? IOCase.SENSITIVE : caseSensitivity;}  }
class C{  public PAOSResponse(Element element) throws PAOSException {  parseElement(element);}  }
class C{  public char[] toCharArray(){  Charset utf8=Charset.forName("UTF-8");  CharBuffer charBuffer=utf8.decode(ByteBuffer.wrap(buffer,offset,length));  char[] chars=new char[charBuffer.remaining()];  charBuffer.get(chars);  return chars;}  }
class C{  public Random(){  setSeed(System.currentTimeMillis() + System.identityHashCode(this));}  }
class C{  public DERSequence(){}  }
class C{  public void insert_char(char value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_char",_opsClass);  DynValueOperations $self=(DynValueOperations)$so.servant;  try {    $self.insert_char(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public static String retrieveCurrentVersion(){  return VersionCheck.class.getPackage().getImplementationVersion();}  }
class C{  @Override public void forceResort(){  updateDataArray();  fireTableDataChanged();}  }
class C{  public void sendEvent(InternalSession session,SessionEventType eventType){  sessionDebug.message("Running sendEvent, type = " + eventType.getCode());  if (NotificationsConfig.INSTANCE.isAgentsEnabled()) {    publishSessionNotification(session.getSessionID(),eventType);    for (    SessionID sessionId : session.getRestrictedTokens()) {      publishSessionNotification(sessionId,eventType);    }  }  try {    SessionNotificationSenderTask sns=new SessionNotificationSenderTask(session,eventType);    if (sns.sendToLocal()) {      threadPool.run(sns);    }  } catch (  ThreadPoolException e) {    sessionDebug.error("Sending Notification Error: ",e);  }}  }
class C{  static int toCodePoint(char highSurrogate,char lowSurrogate){  int codePoint=((highSurrogate - 0xd800) << 10) + (lowSurrogate - 0xdc00) + 0x10000;  return codePoint;}  }
class C{  public SubCommandHandlerFactory(SubCommandArgumentParser parser) throws ArgumentException {  this.parser=parser;  helpHandler=HelpSubCommandHandler.create(parser);  processPath(ManagedObjectPath.emptyPath());  allHandlers.add(helpHandler);  allHandlers.addAll(createHandlers);  allHandlers.addAll(deleteHandlers);  allHandlers.addAll(listHandlers);  allHandlers.addAll(getPropHandlers);  allHandlers.addAll(setPropHandlers);  if (exception != null) {    throw exception;  }}  }
class C{  public void doPostConfiguration(ServletContext servletCtx,SSOToken adminSSOToken){  setXSLFiles(servletCtx);  setAuthModules(adminSSOToken);  setSAMLSiteID(adminSSOToken);}  }
class C{  private void generateImageStreamTags(OpenShiftClient client,ImageConfiguration imageConfig,String imageStreamName,Build build) throws MojoExecutionException {  ImageName imageName=new ImageName(imageConfig.getName());  String label=imageName.getTag();  if (Strings.isNullOrBlank(label)) {    throw new MojoExecutionException("No ':' in image name so cannot extract the tag: " + imageName);  }  try {    File manifest=openshiftManifest;    if (!Files.isFile(manifest)) {      throw new MojoFailureException("No such generated manifest file: " + manifest);    }    String namespace=clusterAccess.getNamespace();    Controller controller=new Controller(client);    Set<HasMetadata> entities=loadResources(client,controller,namespace,manifest,project,log);    boolean updated=false;    ImageStream is=KubernetesResourceUtil.findResourceByName(entities,ImageStream.class,imageStreamName);    if (is == null) {      is=new ImageStreamBuilder().withNewMetadata().withName(imageStreamName).endMetadata().withNewSpec().addNewTag().withName(label).withNewFrom().withKind("ImageStreamImage").endFrom().endTag().endSpec().build();      entities.add(is);      updated=true;    }    if (generateImageStreamTag(client,imageConfig,is,imageStreamName)) {      updated=true;    }    if (updated) {      KubernetesList entity=new KubernetesListBuilder().withItems(new ArrayList<>(entities)).build();      File resourceFileBase=new File(this.targetDir,ResourceClassifier.OPENSHIFT.getValue());      AbstractResourceMojo.writeResourcesIndividualAndComposite(entity,resourceFileBase,ResourceFileType.yaml,log);    }  } catch (  KubernetesClientException e) {    KubernetesResourceUtil.handleKubernetesClientException(e,this.log);  }catch (  MojoExecutionException e) {    throw e;  }catch (  Exception e) {    throw new MojoExecutionException(e.getMessage(),e);  }}  }
class C{  public synchronized void stop(){  if (isRunning == false)   return;  isRunning=false;  removeAllOperations();  operationHandlerThread.quit();  operationHandlerThread=null;  operationHandlerThreadHandler=null;  bundle.clear();}  }
class C{  public void error(SourceLocator srcLctr,String msg,Object[] args) throws TransformerException {  error(srcLctr,null,null,msg,args);}  }
class C{  @Override public void removeNotificationListener(NotificationListener listener) throws ListenerNotFoundException {  broadcaster.removeNotificationListener(listener);}  }
class C{  public TooManyListenersException(String s){  super(s);}  }
class C{  @Override public boolean remove(Object object){  return removeElement(object);}  }
class C{  private static QueryResponseHandler createPagingHandler(QueryResourceHandler handler,QueryRequest request){  if (isPagingRequested(request)) {    return new PagingQueryResponseHandler(new QueryResponseHandler(handler),Math.max(0,request.getPageSize()),Math.max(0,request.getPagedResultsOffset()));  } else {    return new QueryResponseHandler(handler);  }}  }
class C{  public LDAPListener(final String host,final int port,final ServerConnectionFactory<LDAPClientContext,Integer> factory,final Options options) throws IOException {  Reject.ifNull(host,factory,options);  final InetSocketAddress address=new InetSocketAddress(host,port);  this.provider=getTransportProvider(options);  this.impl=provider.getLDAPListener(address,factory,options);}  }
class C{  public static char[] readPassword() throws ClientException {  try {    return System.console().readPassword();  } catch (  IOError e) {    throw ClientException.adaptInputException(e);  }}  }
class C{  public boolean isLeadAnchorNotificationEnabled(){  return leadAnchorNotificationEnabled;}  }
class C{  public boolean isECLEnabledDomain(DN baseDN){  return MultimasterReplication.isECLEnabledDomain(baseDN);}  }
class C{  public boolean isShowContainerOnly(){  return showContainerOnly;}  }
class C{  private void printServletEnvironment(HttpServletRequest req) throws IOException {  log.trace("ServletRequest Properties");  Enumeration<String> attrs=req.getAttributeNames();  while (attrs.hasMoreElements()) {    String attr=attrs.nextElement();    log.trace("Request Attribute: " + attr + ": [ "+ req.getAttribute(attr)+ "]");  }  log.trace("Character Encoding: [" + req.getCharacterEncoding() + "]");  log.trace("Content Length: [" + req.getContentLengthLong() + "]");  log.trace("Content Type: [" + req.getContentType() + "]");  Enumeration<Locale> locales=req.getLocales();  while (locales.hasMoreElements()) {    Locale locale=locales.nextElement();    log.trace("Locale: [" + locale + "]");  }  Enumeration<String> params=req.getParameterNames();  while (params.hasMoreElements()) {    String param=params.nextElement();    for (    String value : req.getParameterValues(param)) {      log.trace("Request Parameter: " + param + ":  ["+ value+ "]");    }  }  log.trace("Protocol: [" + req.getProtocol() + "]");  log.trace("Remote Address: [" + req.getRemoteAddr() + "]");  log.trace("Remote Host: [" + req.getRemoteHost() + "]");  log.trace("Scheme: [" + req.getScheme() + "]");  log.trace("Secure: [" + req.isSecure() + "]");  log.trace("Server Name: [" + req.getServerName() + "]");  log.trace("Server Port: [" + req.getServerPort() + "]");  log.trace("HttpServletRequest Properties");  log.trace("Auth Type: [" + req.getAuthType() + "]");  log.trace("Context Path: [" + req.getContextPath() + "]");  Cookie cookies[]=req.getCookies();  if (cookies != null) {    for (    Cookie cookie : cookies) {      log.trace("Cookie: " + cookie.getName() + ": ["+ cookie.getValue()+ "]");    }  }  Enumeration<String> headers=req.getHeaderNames();  while (headers.hasMoreElements()) {    String header=headers.nextElement();    log.trace("HTTP Header: " + header + ": ["+ req.getHeader(header)+ "]");  }  log.trace("Method: [" + req.getMethod() + "]");  log.trace("Path Info: [" + req.getPathInfo() + "]");  log.trace("Path Translated: [" + req.getPathTranslated() + "]");  log.trace("Query String: [" + req.getQueryString() + "]");  log.trace("Remote User: [" + req.getRemoteUser() + "]");  log.trace("Requested Session ID: [" + req.getRequestedSessionId() + "]");  log.trace("Requested Session ID From Cookie: [" + req.isRequestedSessionIdFromCookie() + "]");  log.trace("Requested Session ID From URL: [" + req.isRequestedSessionIdFromURL() + "]");  log.trace("Requested Session ID Valid: [" + req.isRequestedSessionIdValid() + "]");  log.trace("Request URI: [" + req.getRequestURI() + "]");  log.trace("Servlet Path: [" + req.getServletPath() + "]");  log.trace("User Principal: [" + req.getUserPrincipal() + "]");  HttpSession session=req.getSession(false);  if (session != null) {    log.trace("HttpSession Properties");    log.trace("ID: [" + session.getId() + "]");    log.trace("Creation Time: [" + new Date(session.getCreationTime()) + "]");    log.trace("Last Accessed Time: [" + new Date(session.getLastAccessedTime()) + "]");    log.trace("Max Inactive Interval: [" + session.getMaxInactiveInterval() + "]");    attrs=session.getAttributeNames();    while (attrs.hasMoreElements()) {      String attr=attrs.nextElement();      log.trace("Session Attribute: " + attr + ": ["+ session.getAttribute(attr)+ "]");    }  }  log.trace("ServletConfig Properties");  log.trace("Servlet Name: [" + getServletConfig().getServletName() + "]");  params=getServletConfig().getInitParameterNames();  while (params.hasMoreElements()) {    String param=params.nextElement();    String value=getServletConfig().getInitParameter(param);    log.trace("Servlet Init Param: " + param + ": ["+ value+ "]");  }  log.trace("ServletContext Properties");  log.trace("Major Version: [" + getServletContext().getMajorVersion() + "]");  log.trace("Minor Version: [" + getServletContext().getMinorVersion() + "]");  log.trace("Real Path for '/': [" + getServletContext().getRealPath("/") + "]");  log.trace("Server Info: [" + getServletContext().getServerInfo() + "]");  log.trace("ServletContext Initialization Parameters");  params=getServletContext().getInitParameterNames();  while (params.hasMoreElements()) {    String param=params.nextElement();    String value=getServletContext().getInitParameter(param);    log.trace("Servlet Context Init Param: " + param + ": ["+ value+ "]");  }  log.trace("ServletContext Attributes");  attrs=getServletContext().getAttributeNames();  while (attrs.hasMoreElements()) {    String attr=attrs.nextElement();    log.trace("Servlet Context Attribute: " + attr + ": ["+ getServletContext().getAttribute(attr)+ "]");  }}  }
class C{  private static void convertToHTML32(AttributeSet from,MutableAttributeSet to){  if (from == null) {    return;  }  Enumeration keys=from.getAttributeNames();  String value="";  while (keys.hasMoreElements()) {    Object key=keys.nextElement();    if (key instanceof CSS.Attribute) {      if ((key == CSS.Attribute.FONT_FAMILY) || (key == CSS.Attribute.FONT_SIZE) || (key == CSS.Attribute.COLOR)) {        createFontAttribute((CSS.Attribute)key,from,to);      } else       if (key == CSS.Attribute.FONT_WEIGHT) {        CSS.FontWeight weightValue=(CSS.FontWeight)from.getAttribute(CSS.Attribute.FONT_WEIGHT);        if ((weightValue != null) && (weightValue.getValue() > 400)) {          addAttribute(to,HTML.Tag.B,SimpleAttributeSet.EMPTY);        }      } else       if (key == CSS.Attribute.FONT_STYLE) {        String s=from.getAttribute(key).toString();        if (s.indexOf("italic") >= 0) {          addAttribute(to,HTML.Tag.I,SimpleAttributeSet.EMPTY);        }      } else       if (key == CSS.Attribute.TEXT_DECORATION) {        String decor=from.getAttribute(key).toString();        if (decor.indexOf("underline") >= 0) {          addAttribute(to,HTML.Tag.U,SimpleAttributeSet.EMPTY);        }        if (decor.indexOf("line-through") >= 0) {          addAttribute(to,HTML.Tag.STRIKE,SimpleAttributeSet.EMPTY);        }      } else       if (key == CSS.Attribute.VERTICAL_ALIGN) {        String vAlign=from.getAttribute(key).toString();        if (vAlign.indexOf("sup") >= 0) {          addAttribute(to,HTML.Tag.SUP,SimpleAttributeSet.EMPTY);        }        if (vAlign.indexOf("sub") >= 0) {          addAttribute(to,HTML.Tag.SUB,SimpleAttributeSet.EMPTY);        }      } else       if (key == CSS.Attribute.TEXT_ALIGN) {        addAttribute(to,HTML.Attribute.ALIGN,from.getAttribute(key).toString());      } else {        if (value.length() > 0) {          value=value + "; ";        }        value=value + key + ": "+ from.getAttribute(key);      }    } else {      Object attr=from.getAttribute(key);      if (attr instanceof AttributeSet) {        attr=((AttributeSet)attr).copyAttributes();      }      addAttribute(to,key,attr);    }  }  if (value.length() > 0) {    to.addAttribute(HTML.Attribute.STYLE,value);  }}  }
class C{  public void normalize(){}  }
class C{  public ExpressionNode exprGetParent(){  return getParentElem();}  }
class C{  public void handleDrawMessage(DrawMessage msg,long msgId){  room.internalHandleDrawMessage(this,msg,msgId);}  }
class C{  public static void assertPrefix(String prefix) throws XMPException {  if (prefix == null || prefix.length() == 0) {    throw new XMPException("Empty prefix",XMPError.BADPARAM);  }}  }
class C{  public static boolean isTeslaProducer(ICapabilityProvider provider,EnumFacing side){  return provider.hasCapability(TeslaCapabilities.CAPABILITY_PRODUCER,side);}  }
class C{  public void testConstructorStringRadix10(){  String value="987328901348934898";  int radix=10;  byte rBytes[]={13,-77,-78,103,-103,97,68,-14};  BigInteger aNumber=new BigInteger(value,radix);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,aNumber.signum());}  }
class C{  public void from_any(org.omg.CORBA.Any value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("from_any",_opsClass);  DynFixedOperations $self=(DynFixedOperations)$so.servant;  try {    $self.from_any(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public static String parseSchemaFileFromElementDefinition(String definition) throws DirectoryException {  int pos=definition.lastIndexOf(SCHEMA_PROPERTY_FILENAME);  if (pos == -1) {    return null;  }  SubstringReader reader=new SubstringReader(definition);  reader.read(pos + SCHEMA_PROPERTY_FILENAME.length());  int length=0;  reader.skipWhitespaces();  reader.mark();  try {    char c=reader.read();    if (c == '\'') {      reader.mark();      while (reader.read() != '\'') {        length++;      }    } else {      do {        length++;      } while (reader.read() != ' ');    }    reader.reset();    return reader.read(length);  } catch (  final StringIndexOutOfBoundsException e) {    throw new DirectoryException(ResultCode.UNWILLING_TO_PERFORM,LocalizableMessage.raw("Error when trying to parse the schema file from a schema element definition"));  }}  }
class C{  @Override public void add(int field,int amount){  if (amount == 0) {    return;  }  if (field < 0 || field >= ZONE_OFFSET) {    throw new IllegalArgumentException();  }  complete();  if (field == YEAR) {    int year=internalGet(YEAR);    if (internalGetEra() == CE) {      year+=amount;      if (year > 0) {        set(YEAR,year);      } else {        set(YEAR,1 - year);        set(ERA,BCE);      }    } else {      year-=amount;      if (year > 0) {        set(YEAR,year);      } else {        set(YEAR,1 - year);        set(ERA,CE);      }    }    pinDayOfMonth();  } else   if (field == MONTH) {    int month=internalGet(MONTH) + amount;    int year=internalGet(YEAR);    int y_amount;    if (month >= 0) {      y_amount=month / 12;    } else {      y_amount=(month + 1) / 12 - 1;    }    if (y_amount != 0) {      if (internalGetEra() == CE) {        year+=y_amount;        if (year > 0) {          set(YEAR,year);        } else {          set(YEAR,1 - year);          set(ERA,BCE);        }      } else {        year-=y_amount;        if (year > 0) {          set(YEAR,year);        } else {          set(YEAR,1 - year);          set(ERA,CE);        }      }    }    if (month >= 0) {      set(MONTH,month % 12);    } else {      month%=12;      if (month < 0) {        month+=12;      }      set(MONTH,JANUARY + month);    }    pinDayOfMonth();  } else   if (field == ERA) {    int era=internalGet(ERA) + amount;    if (era < 0) {      era=0;    }    if (era > 1) {      era=1;    }    set(ERA,era);  } else {    long delta=amount;    long timeOfDay=0;switch (field) {case HOUR:case HOUR_OF_DAY:      delta*=60 * 60 * 1000;    break;case MINUTE:  delta*=60 * 1000;break;case SECOND:delta*=1000;break;case MILLISECOND:break;case WEEK_OF_YEAR:case WEEK_OF_MONTH:case DAY_OF_WEEK_IN_MONTH:delta*=7;break;case DAY_OF_MONTH:case DAY_OF_YEAR:case DAY_OF_WEEK:break;case AM_PM:delta=amount / 2;timeOfDay=12 * (amount % 2);break;}if (field >= HOUR) {setTimeInMillis(time + delta);return;}long fd=getCurrentFixedDate();timeOfDay+=internalGet(HOUR_OF_DAY);timeOfDay*=60;timeOfDay+=internalGet(MINUTE);timeOfDay*=60;timeOfDay+=internalGet(SECOND);timeOfDay*=1000;timeOfDay+=internalGet(MILLISECOND);if (timeOfDay >= ONE_DAY) {fd++;timeOfDay-=ONE_DAY;} else if (timeOfDay < 0) {fd--;timeOfDay+=ONE_DAY;}fd+=delta;int zoneOffset=internalGet(ZONE_OFFSET) + internalGet(DST_OFFSET);setTimeInMillis((fd - EPOCH_OFFSET) * ONE_DAY + timeOfDay - zoneOffset);zoneOffset-=internalGet(ZONE_OFFSET) + internalGet(DST_OFFSET);if (zoneOffset != 0) {setTimeInMillis(time + zoneOffset);long fd2=getCurrentFixedDate();if (fd2 != fd) {setTimeInMillis(time - zoneOffset);}}}}  }
class C{  @Override public void identityChanged(String universalId){  try {    AMIdentity identity=getIdentity(universalId);    if (!isAgentIdentity(identity)) {      return;    }switch (getIdentityAction(identity)) {case NO_ACTION:      logger.message("Identity is not an OAuth agent no action needed");    break;case CREATE_UMA_APPLICATION:  createApplication(identity.getRealm(),identity.getName());break;case REMOVE_UMA_APPLICATION:removeApplication(identity.getRealm(),identity.getName());break;default :logger.error("Failed to handle identity action");}} catch (IdRepoException e) {logger.error("Failed to get identity",e);}catch (SSOException e) {logger.error("Failed to get identity",e);}catch (NotFoundException e) {logger.error("Failed to get UMA Provider settings",e);}catch (ServerException e) {logger.error("Failed to get UMA Provider settings",e);}}  }
class C{  public static int convertToUtf32(char highSurrogate,char lowSurrogate){  return (highSurrogate - 0xd800) * 0x400 + lowSurrogate - 0xdc00 + 0x10000;}  }
class C{  public SystemConfigurationException(Throwable t){  super(t);}  }
class C{  public LowerCaseIdCachedServicesDecorator(IdCachedServices delegate){  super(delegate);}  }
class C{  public Subpath(float startPointX,float startPointY){  this.startPoint=new Point(startPointX,startPointY);}  }
class C{  public boolean add(Object targetChild){  if (targetChild == null)   throw new IllegalArgumentException();  if (children.containsKey(targetChild))   return false;synchronized (BeanContext.globalHierarchyLock) {    if (children.containsKey(targetChild))     return false;    if (!validatePendingAdd(targetChild)) {      throw new IllegalStateException();    }    BeanContextChild cbcc=getChildBeanContextChild(targetChild);    BeanContextChild bccp=null;synchronized (targetChild) {      if (targetChild instanceof BeanContextProxy) {        bccp=((BeanContextProxy)targetChild).getBeanContextProxy();        if (bccp == null)         throw new NullPointerException("BeanContextPeer.getBeanContextProxy()");      }      BCSChild bcsc=createBCSChild(targetChild,bccp);      BCSChild pbcsc=null;synchronized (children) {        children.put(targetChild,bcsc);        if (bccp != null)         children.put(bccp,pbcsc=createBCSChild(bccp,targetChild));      }      if (cbcc != null) synchronized (cbcc) {        try {          cbcc.setBeanContext(getBeanContextPeer());        } catch (        PropertyVetoException pve) {synchronized (children) {            children.remove(targetChild);            if (bccp != null)             children.remove(bccp);          }          throw new IllegalStateException();        }        cbcc.addPropertyChangeListener("beanContext",childPCL);        cbcc.addVetoableChangeListener("beanContext",childVCL);      }      Visibility v=getChildVisibility(targetChild);      if (v != null) {        if (okToUseGui)         v.okToUseGui(); else         v.dontUseGui();      }      if (getChildSerializable(targetChild) != null)       serializable++;      childJustAddedHook(targetChild,bcsc);      if (bccp != null) {        v=getChildVisibility(bccp);        if (v != null) {          if (okToUseGui)           v.okToUseGui(); else           v.dontUseGui();        }        if (getChildSerializable(bccp) != null)         serializable++;        childJustAddedHook(bccp,pbcsc);      }    }    fireChildrenAdded(new BeanContextMembershipEvent(getBeanContextPeer(),bccp == null ? new Object[]{targetChild} : new Object[]{targetChild,bccp}));  }  return true;}  }
class C{  public static String printTime(java.util.Calendar val){  if (theConverter == null)   initConverter();  return theConverter.printTime(val);}  }
class C{  public CryptPasswordStorageSchemeTestCase(){  super();}  }
class C{  protected void LocationPathPattern() throws javax.xml.transform.TransformerException {  int opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  final int RELATIVE_PATH_NOT_PERMITTED=0;  final int RELATIVE_PATH_PERMITTED=1;  final int RELATIVE_PATH_REQUIRED=2;  int relativePathStatus=RELATIVE_PATH_NOT_PERMITTED;  appendOp(2,OpCodes.OP_LOCATIONPATHPATTERN);  if (lookahead('(',1) && (tokenIs(Keywords.FUNC_ID_STRING) || tokenIs(Keywords.FUNC_KEY_STRING))) {    IdKeyPattern();    if (tokenIs('/')) {      nextToken();      if (tokenIs('/')) {        appendOp(4,OpCodes.MATCH_ANY_ANCESTOR);        nextToken();      } else {        appendOp(4,OpCodes.MATCH_IMMEDIATE_ANCESTOR);      }      m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH) - 2,4);      m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH) - 1,OpCodes.NODETYPE_FUNCTEST);      relativePathStatus=RELATIVE_PATH_REQUIRED;    }  } else   if (tokenIs('/')) {    if (lookahead('/',1)) {      appendOp(4,OpCodes.MATCH_ANY_ANCESTOR);      nextToken();      relativePathStatus=RELATIVE_PATH_REQUIRED;    } else {      appendOp(4,OpCodes.FROM_ROOT);      relativePathStatus=RELATIVE_PATH_PERMITTED;    }    m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH) - 2,4);    m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH) - 1,OpCodes.NODETYPE_ROOT);    nextToken();  } else {    relativePathStatus=RELATIVE_PATH_REQUIRED;  }  if (relativePathStatus != RELATIVE_PATH_NOT_PERMITTED) {    if (!tokenIs('|') && (null != m_token)) {      RelativePathPattern();    } else     if (relativePathStatus == RELATIVE_PATH_REQUIRED) {      error(XPATHErrorResources.ER_EXPECTED_REL_PATH_PATTERN,null);    }  }  m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),OpCodes.ENDOP);  m_ops.setOp(OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) + 1);  m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);}  }
class C{  public void startElement(StylesheetHandler handler,String uri,String localName,String rawName,Attributes attributes) throws org.xml.sax.SAXException {  try {    ElemTemplateElement p=handler.getElemTemplateElement();    boolean excludeXSLDecl=false;    boolean isLREAsStyleSheet=false;    if (null == p) {      XSLTElementProcessor lreProcessor=handler.popProcessor();      XSLTElementProcessor stylesheetProcessor=handler.getProcessorFor(Constants.S_XSLNAMESPACEURL,"stylesheet","xsl:stylesheet");      handler.pushProcessor(lreProcessor);      Stylesheet stylesheet;      try {        stylesheet=getStylesheetRoot(handler);      } catch (      TransformerConfigurationException tfe) {        throw new TransformerException(tfe);      }      SAXSourceLocator slocator=new SAXSourceLocator();      Locator locator=handler.getLocator();      if (null != locator) {        slocator.setLineNumber(locator.getLineNumber());        slocator.setColumnNumber(locator.getColumnNumber());        slocator.setPublicId(locator.getPublicId());        slocator.setSystemId(locator.getSystemId());      }      stylesheet.setLocaterInfo(slocator);      stylesheet.setPrefixes(handler.getNamespaceSupport());      handler.pushStylesheet(stylesheet);      isLREAsStyleSheet=true;      AttributesImpl stylesheetAttrs=new AttributesImpl();      AttributesImpl lreAttrs=new AttributesImpl();      int n=attributes.getLength();      for (int i=0; i < n; i++) {        String attrLocalName=attributes.getLocalName(i);        String attrUri=attributes.getURI(i);        String value=attributes.getValue(i);        if ((null != attrUri) && attrUri.equals(Constants.S_XSLNAMESPACEURL)) {          stylesheetAttrs.addAttribute(null,attrLocalName,attrLocalName,attributes.getType(i),attributes.getValue(i));        } else         if ((attrLocalName.startsWith("xmlns:") || attrLocalName.equals("xmlns")) && value.equals(Constants.S_XSLNAMESPACEURL)) {        } else {          lreAttrs.addAttribute(attrUri,attrLocalName,attributes.getQName(i),attributes.getType(i),attributes.getValue(i));        }      }      attributes=lreAttrs;      try {        stylesheetProcessor.setPropertiesFromAttributes(handler,"stylesheet",stylesheetAttrs,stylesheet);      } catch (      Exception e) {        if (stylesheet.getDeclaredPrefixes() == null || !declaredXSLNS(stylesheet)) {          throw new org.xml.sax.SAXException(XSLMessages.createWarning(XSLTErrorResources.WG_OLD_XSLT_NS,null));        } else {          throw new org.xml.sax.SAXException(e);        }      }      handler.pushElemTemplateElement(stylesheet);      ElemTemplate template=new ElemTemplate();      if (slocator != null)       template.setLocaterInfo(slocator);      appendAndPush(handler,template);      XPath rootMatch=new XPath("/",stylesheet,stylesheet,XPath.MATCH,handler.getStylesheetProcessor().getErrorListener());      template.setMatch(rootMatch);      stylesheet.setTemplate(template);      p=handler.getElemTemplateElement();      excludeXSLDecl=true;    }    XSLTElementDef def=getElemDef();    Class classObject=def.getClassObject();    boolean isExtension=false;    boolean isComponentDecl=false;    boolean isUnknownTopLevel=false;    while (null != p) {      if (p instanceof ElemLiteralResult) {        ElemLiteralResult parentElem=(ElemLiteralResult)p;        isExtension=parentElem.containsExtensionElementURI(uri);      } else       if (p instanceof Stylesheet) {        Stylesheet parentElem=(Stylesheet)p;        isExtension=parentElem.containsExtensionElementURI(uri);        if ((false == isExtension) && (null != uri) && (uri.equals(Constants.S_BUILTIN_EXTENSIONS_URL) || uri.equals(Constants.S_BUILTIN_OLD_EXTENSIONS_URL))) {          isComponentDecl=true;        } else {          isUnknownTopLevel=true;        }      }      if (isExtension)       break;      p=p.getParentElem();    }    ElemTemplateElement elem=null;    try {      if (isExtension) {        elem=new ElemExtensionCall();      } else       if (isComponentDecl) {        elem=(ElemTemplateElement)classObject.newInstance();      } else       if (isUnknownTopLevel) {        elem=(ElemTemplateElement)classObject.newInstance();      } else {        elem=(ElemTemplateElement)classObject.newInstance();      }      elem.setDOMBackPointer(handler.getOriginatingNode());      elem.setLocaterInfo(handler.getLocator());      elem.setPrefixes(handler.getNamespaceSupport(),excludeXSLDecl);      if (elem instanceof ElemLiteralResult) {        ((ElemLiteralResult)elem).setNamespace(uri);        ((ElemLiteralResult)elem).setLocalName(localName);        ((ElemLiteralResult)elem).setRawName(rawName);        ((ElemLiteralResult)elem).setIsLiteralResultAsStylesheet(isLREAsStyleSheet);      }    } catch (    InstantiationException ie) {      handler.error(XSLTErrorResources.ER_FAILED_CREATING_ELEMLITRSLT,null,ie);    }catch (    IllegalAccessException iae) {      handler.error(XSLTErrorResources.ER_FAILED_CREATING_ELEMLITRSLT,null,iae);    }    setPropertiesFromAttributes(handler,rawName,attributes,elem);    if (!isExtension && (elem instanceof ElemLiteralResult)) {      isExtension=((ElemLiteralResult)elem).containsExtensionElementURI(uri);      if (isExtension) {        elem=new ElemExtensionCall();        elem.setLocaterInfo(handler.getLocator());        elem.setPrefixes(handler.getNamespaceSupport());        ((ElemLiteralResult)elem).setNamespace(uri);        ((ElemLiteralResult)elem).setLocalName(localName);        ((ElemLiteralResult)elem).setRawName(rawName);        setPropertiesFromAttributes(handler,rawName,attributes,elem);      }    }    appendAndPush(handler,elem);  } catch (  TransformerException te) {    throw new org.xml.sax.SAXException(te);  }}  }
class C{  @Override public MinguoDate dateEpochDay(long epochDay){  return new MinguoDate(LocalDate.ofEpochDay(epochDay));}  }
class C{  public Fragment createFragment(Context context,Channel channelInfo,String typeName){  String name=mTypeFragmentNameMap.get(typeName);  Fragment fragment=null;  if (name != null && name.length() > 0) {    try {      fragment=Fragment.instantiate(context,name);      addArguments(fragment,channelInfo);      return fragment;    } catch (    Exception e) {      Log.w(TAG,String.format("Instant fragment %s error %s",name,e));    }  }  return null;}  }
class C{  public boolean isTransformed(){  if (!defaulting) {    return tx != null;  } else {    return !getTransform().isIdentity();  }}  }
class C{  protected void checkAndAddPage(int index,PdfPage page){  if (page.isFlushed()) {    throw new PdfException(PdfException.FlushedPageCannotBeAddedOrInserted,page);  }  if (page.getDocument() != null && this != page.getDocument()) {    throw new PdfException(PdfException.Page1CannotBeAddedToDocument2BecauseItBelongsToDocument3).setMessageParams(page,this,page.getDocument());  }  catalog.getPageTree().addPage(index,page);}  }
class C{  public CheckboxGroup(){}  }
class C{  public static PdfFileSpec createEmbeddedFileSpec(PdfDocument doc,byte[] fileStore,String description,String fileDisplay,PdfName mimeType,PdfDictionary fileParameter,PdfName afRelationshipValue,boolean isUnicodeFileName){  PdfStream stream=new PdfStream(fileStore).makeIndirect(doc);  PdfDictionary params=new PdfDictionary();  if (fileParameter != null) {    params.mergeDifferent(fileParameter);  }  if (!params.containsKey(PdfName.ModDate)) {    params.put(PdfName.ModDate,new PdfDate().getPdfObject());  }  if (fileStore != null) {    params.put(PdfName.Size,new PdfNumber(stream.getBytes().length));    stream.put(PdfName.Params,params);  }  return createEmbeddedFileSpec(doc,stream,description,fileDisplay,mimeType,afRelationshipValue,isUnicodeFileName);}  }
class C{  private boolean isShuttingDown(){  return stopRequested;}  }
class C{  public void keyPressed(KeyEvent e){  if (isNavigationKey(e)) {    prefix="";    typedString="";    lastTime=0L;  }}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.restartServer();}  }
class C{  public static UIFacesVisitor visitCurrentView(){  return JKJsfUtil.visitComponent(FacesContext.getCurrentInstance().getViewRoot());}  }
class C{  public boolean isTraceEnabled(){  return (getLogger().isLoggable(Level.FINEST));}  }
class C{  public com.sun.identity.liberty.ws.meta.jaxb.StatusElement createStatusElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.meta.jaxb.impl.StatusElementImpl();}  }
class C{  AuthenticateToRealmCondition(Debug debug,EntitlementCoreWrapper entitlementCoreWrapper){  this.debug=debug;  this.entitlementCoreWrapper=entitlementCoreWrapper;}  }
class C{  protected void deleteSunXmlKeyValFiles(File dirHandle) throws SMSException {  StringBuilder sb=new StringBuilder(SMSEntry.ATTR_XML_KEYVAL);  sb.append("=*");  FilenameFilter filter=new FilenameFilter(sb.toString());  File[] deleteFiles=dirHandle.listFiles(filter);  for (int i=0; deleteFiles != null && i < deleteFiles.length; i++) {    File deleteFile=deleteFiles[i];    deleteFile.delete();  }}  }
class C{  @Override public void storeChildren(PrintWriter aWriter,int indent,Object aInterceptor,StoreDescription parentDesc) throws Exception {  if (aInterceptor instanceof StaticMembershipInterceptor) {    ChannelInterceptor interceptor=(ChannelInterceptor)aInterceptor;    storeElementArray(aWriter,indent + 2,interceptor.getMembers());  }}  }
class C{  public void run(){  amlc.runLogin();}  }
class C{  private void writeNeroData(FileChannel fileReadChannel,FileChannel fileWriteChannel,Mp4BoxHeader tagsHeader) throws IOException, CannotWriteException {  long writeBetweenIlstAndTags=tagsHeader.getFilePos() - fileReadChannel.position();  fileWriteChannel.transferFrom(fileReadChannel,fileWriteChannel.position(),writeBetweenIlstAndTags);  fileWriteChannel.position(fileWriteChannel.position() + writeBetweenIlstAndTags);  convertandWriteTagsAtomToFreeAtom(fileWriteChannel,tagsHeader);  fileReadChannel.position(tagsHeader.getFilePos() + tagsHeader.getLength());  writeDataInChunks(fileReadChannel,fileWriteChannel);}  }
class C{  public AuthContextLocal(String orgName){  authDebug.message("AuthContextLocal() constructor called");  organizationName=orgName;  amlc=new AMLoginContext(this);  if (authDebug.messageEnabled()) {    authDebug.message("AMLoginContext object is... " + amlc);  }  reset();}  }
class C{  public String toString(){  return toString(true,false);}  }
class C{  public AcceptLanguageHeader createAcceptLanguageHeader(Locale language){  if (language == null)   throw new NullPointerException("null arg");  AcceptLanguage acceptLanguage=new AcceptLanguage();  acceptLanguage.setAcceptLanguage(language);  return acceptLanguage;}  }
class C{  public UnknownAttribute(byte[] octets){  super(UnknownAttribute.toOctets(octets));  super.setOctets(octets);}  }
class C{  protected void endNode(Node node) throws org.xml.sax.SAXException {switch (node.getNodeType()) {case Node.DOCUMENT_NODE:    break;case Node.DOCUMENT_TYPE_NODE:  serializeDocType((DocumentType)node,false);break;case Node.ELEMENT_NODE:serializeElement((Element)node,false);break;case Node.CDATA_SECTION_NODE:break;case Node.ENTITY_REFERENCE_NODE:serializeEntityReference((EntityReference)node,false);break;default :}}  }
class C{  public Lyrics3v2Field(AbstractID3v2Frame frame) throws TagException {  AbstractFrameBodyTextInfo textFrame;  String text;  String frameIdentifier=frame.getIdentifier();  if (frameIdentifier.startsWith("USLT")) {    frameBody=new FieldFrameBodyLYR("");    ((FieldFrameBodyLYR)frameBody).addLyric((FrameBodyUSLT)frame.getBody());  } else   if (frameIdentifier.startsWith("SYLT")) {    frameBody=new FieldFrameBodyLYR("");    ((FieldFrameBodyLYR)frameBody).addLyric((FrameBodySYLT)frame.getBody());  } else   if (frameIdentifier.startsWith("COMM")) {    text=((FrameBodyCOMM)frame.getBody()).getText();    frameBody=new FieldFrameBodyINF(text);  } else   if (frameIdentifier.equals("TCOM")) {    textFrame=(AbstractFrameBodyTextInfo)frame.getBody();    frameBody=new FieldFrameBodyAUT("");    if ((textFrame != null) && (textFrame.getText().length() > 0)) {      frameBody=new FieldFrameBodyAUT(textFrame.getText());    }  } else   if (frameIdentifier.equals("TALB")) {    textFrame=(AbstractFrameBodyTextInfo)frame.getBody();    if ((textFrame != null) && (textFrame.getText().length() > 0)) {      frameBody=new FieldFrameBodyEAL(textFrame.getText());    }  } else   if (frameIdentifier.equals("TPE1")) {    textFrame=(AbstractFrameBodyTextInfo)frame.getBody();    if ((textFrame != null) && (textFrame.getText().length() > 0)) {      frameBody=new FieldFrameBodyEAR(textFrame.getText());    }  } else   if (frameIdentifier.equals("TIT2")) {    textFrame=(AbstractFrameBodyTextInfo)frame.getBody();    if ((textFrame != null) && (textFrame.getText().length() > 0)) {      frameBody=new FieldFrameBodyETT(textFrame.getText());    }  } else {    throw new TagException("Cannot createField Lyrics3v2 field from given ID3v2 frame");  }}  }
class C{  public void submitRequirements(Callback[] info){  submitRequirements(info,null,null);}  }
class C{  private XMLElement newElement(String name,String value,ArrayList attributes,boolean collapsed) throws Exception {  XMLElement result=new XMLElement(this,name);  String startTokenString=null;  if (collapsed) {    startTokenString="<" + name + "/>";  } else {    startTokenString="<" + name + ">";  }  BoundedToken startToken=new BoundedToken(startTokenString);  startToken.setTokenIndex(getParser().getNextTokenIndex());  result.setStartToken(startToken);  if (value != null && value.trim().length() > 0) {    if (collapsed) {      throw new Exception("Cannot add a collapsed element with specified value");    }    UnboundedToken valueToken=new UnboundedToken(value);    valueToken.setTokenIndex(getParser().getNextTokenIndex());    result.setValueToken(valueToken);  }  if (!collapsed) {    BoundedToken endToken=new BoundedToken("</" + name + ">");    endToken.setTokenIndex(getParser().getNextTokenIndex());    result.setEndToken(endToken);  }  if (attributes != null && attributes.size() > 0) {    Iterator it=attributes.iterator();    while (it.hasNext()) {      XMLElementAttribute attr=(XMLElementAttribute)it.next();      result.updateAttribute(attr.getName(),attr.getValue());    }  }  return result;}  }
class C{  @Get public Representation discovery() throws OAuth2RestletException {  final OAuth2Request request=requestFactory.create(getRequest());  final String resource=request.getParameter("resource");  final String rel=request.getParameter("rel");  final String realm=request.getParameter("realm");  try {    final String deploymentUrl=baseUrlProviderFactory.get(realm).getRootURL(ServletUtils.getRequest(getRequest()));    final Map<String,Object> response=providerDiscovery.discover(resource,rel,deploymentUrl,request);    return new JsonRepresentation(response);  } catch (  OAuth2Exception e) {    throw new OAuth2RestletException(e.getStatusCode(),e.getError(),e.getMessage(),null);  }}  }
class C{  public LDAPManagementContextFactory(ConnectionFactoryProvider cfp) throws ArgumentException {  this.provider=cfp;  factory=cfp.getAuthenticatedConnectionFactory();  contextCommandBuilder=null;}  }
class C{  public Leading(int type,float value){  this.type=type;  this.value=value;}  }
class C{  public FrameBodyTRDA(byte textEncoding,String text){  super(textEncoding,text);}  }
class C{  public boolean isSessionUpgradeRequest(){  return !"".equals(ssoTokenId);}  }
class C{  public boolean terminate(){switch (model.type) {case '+':    if ((value == 0) && !(model).empty()) {      return false;    }case '*':case '?':  return (next == null) || next.terminate();case '|':for (ContentModel m=(ContentModel)model.content; m != null; m=m.next) {  if (m.empty()) {    return (next == null) || next.terminate();  }}return false;case '&':{ContentModel m=(ContentModel)model.content;for (int i=0; m != null; i++, m=m.next) {if ((value & (1L << i)) == 0) {  if (!m.empty()) {    return false;  }}}return (next == null) || next.terminate();}case ',':{ContentModel m=(ContentModel)model.content;for (int i=0; i < value; i++, m=m.next) ;for (; (m != null) && m.empty(); m=m.next) ;if (m != null) {return false;}return (next == null) || next.terminate();}default :return false;}}  }
class C{  public short[] lookupPixel(short[] src,short[] dst){  if (dst == null) {    dst=new short[src.length];  }  if (numComponents == 1) {    for (int i=0; i < src.length; i++) {      int s=(src[i] & 0xffff) - offset;      if (s < 0) {        throw new ArrayIndexOutOfBoundsException("src[" + i + "]-offset is "+ "less than zero");      }      dst[i]=data[0][s];    }  } else {    for (int i=0; i < src.length; i++) {      int s=(src[i] & 0xffff) - offset;      if (s < 0) {        throw new ArrayIndexOutOfBoundsException("src[" + i + "]-offset is "+ "less than zero");      }      dst[i]=data[i][s];    }  }  return dst;}  }
class C{  @Override public String toString(){  return filename;}  }
class C{  public String convertRealmNameToOrgName(String realm){  return DNMapper.orgNameToDN(realm);}  }
class C{  public String jmxHost(){  return values.jmxHost;}  }
class C{  public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws SAML2Exception {  validate(providerID);  StringBuffer xmlString=new StringBuffer(100);  xmlString.append(SAML2Constants.START_TAG);  if (includeNSPrefix) {    xmlString.append(SAML2Constants.PROTOCOL_PREFIX);  }  xmlString.append(SAML2Constants.IDPENTRY);  if (declareNS) {    xmlString.append(SAML2Constants.PROTOCOL_DECLARE_STR);  }  xmlString.append(SAML2Constants.SPACE).append(PROVIDERID).append(SAML2Constants.EQUAL).append(SAML2Constants.QUOTE).append(providerID).append(SAML2Constants.QUOTE);  if ((name != null) && (name.length() > 0)) {    xmlString.append(SAML2Constants.SPACE).append(NAME).append(SAML2Constants.EQUAL).append(SAML2Constants.QUOTE).append(name).append(SAML2Constants.QUOTE);  }  if ((locationURI != null) && (locationURI.length() > 0)) {    xmlString.append(SAML2Constants.SPACE).append(LOC).append(SAML2Constants.EQUAL).append(SAML2Constants.QUOTE).append(locationURI).append(SAML2Constants.QUOTE);  }  xmlString.append(SAML2Constants.END_TAG).append(SAML2Constants.NEWLINE).append(SAML2Constants.SAML2_END_TAG).append(SAML2Constants.IDPENTRY).append(SAML2Constants.END_TAG);  return xmlString.toString();}  }
class C{  public static Map<String,Set<String>> convertToAttributes(NameIDInfo info,NameIDInfoKey infoKey) throws SAML2Exception {  Map<String,Set<String>> ret=new HashMap<>();  if (infoKey == null) {    infoKey=new NameIDInfoKey(info.getNameIDValue(),info.getHostEntityID(),info.getRemoteEntityID());  }  ret.put(getNameIDInfoAttribute(),Collections.singleton(info.toValueString()));  ret.put(getNameIDInfoKeyAttribute(),Collections.singleton(infoKey.toValueString()));  return ret;}  }
class C{  public void insert(String table,List<DbDataContainer> insertValues) throws GroundDBException {  String insertString="insert into " + table + "(";  String valuesString="values (";  for (  DbDataContainer container : insertValues) {    insertString+=container.getField() + ", ";    valuesString+="?, ";  }  insertString=insertString.substring(0,insertString.length() - 2) + ")";  valuesString=valuesString.substring(0,valuesString.length() - 2) + ")";  try {    PreparedStatement preparedStatement=this.connection.prepareStatement(insertString + valuesString + ";");    int index=1;    for (    DbDataContainer container : insertValues) {      PostgresClient.setValue(preparedStatement,container.getValue(),container.getGroundType(),index);      index++;    }    LOGGER.info("Executing update: " + preparedStatement.toString() + ".");    preparedStatement.executeUpdate();  } catch (  SQLException e) {    LOGGER.error("Unexpected error in database insertion: " + e.getMessage());    throw new GroundDBException(e.getClass().toString() + ": " + e.getMessage());  }}  }
class C{  public void test_getLocalAddress_after_close() throws Exception {  Socket s=new Socket();  try {    s.bind(new InetSocketAddress("localhost",0));    assertTrue(s.getLocalAddress().toString(),s.getLocalAddress().isLoopbackAddress());    int localPort=s.getLocalPort();    assertTrue(localPort > 0);    s.close();    assertTrue(s.getLocalAddress().isAnyLocalAddress());    assertEquals(localPort,s.getLocalPort());  }  finally {    s.close();  }}  }
class C{  public LDAPAttribute(String attributeType){  this.attributeType=attributeType;  values=new ArrayList<>(0);}  }
class C{  public static StorageStatus lockedDown(LocalizableMessage reason){  return new StorageStatus(Code.LOCKED_DOWN,reason);}  }
class C{  private void assertDNSetEquals(SortedSet<DN> actual,String... expected){  String[] actualStrings=new String[actual.size()];  int i=0;  for (  DN dn : actual) {    actualStrings[i]=dn.toString();    i++;  }  Assert.assertEqualsNoOrder(actualStrings,expected);}  }
class C{  public NodeIterator selectNodeIterator(Node contextNode,String str) throws TransformerException {  return selectNodeIterator(contextNode,str,contextNode);}  }
class C{  @Override public Vector clone(){  try {    return (Vector)super.clone();  } catch (  CloneNotSupportedException e) {    throw new Error(e);  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.assertion.AttributeStatementElement createAttributeStatementElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.assertion.impl.AttributeStatementElementImpl();}  }
class C{  public SubjectConfirmation(Set confirmationMethods,Element subjectConfirmationData,Element keyInfo) throws SAMLException {  if (confirmationMethods.isEmpty()) {    if (SAMLUtilsCommon.debug.messageEnabled()) {      SAMLUtilsCommon.debug.message("SubjectConfirmation:  No " + "confirmationMethods  in the Set");    }    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("nullInput"));  }  _confirmationMethodList.addAll(confirmationMethods);  _subjectConfirmationData=subjectConfirmationData;  _keyInfo=keyInfo;}  }
class C{  public static void printUsage(PrintStream out){  System.out.println("Usage: java ARGUMENTS -jar Manifest.jar");  System.out.println("\nARGUMENTS");  System.out.println("\t-D\"" + MANIFEST_CREATE_FILE + "=<RTM zip file>\"");  System.out.println("\tPath of RTM zip file [Required].");  System.out.println("\n\t-D\"" + LATEST_WAR_FILE + "=<latest zip file>\"");  System.out.println("\tPath of the resulting patch file [Optional].");  System.out.println("\n\t-D\"" + IDENTIFIER_ENTRY + "=<name of the entry which indicate version>\"");  System.out.println("\tName of the entry in manifest indicate identity " + "[Default: " + DEFAULT_IDENTIFIER_ENTRY + "].");  System.out.println("\n\t-D\"" + MANIFEST_PATTERN + "=<pattern of manifest file>\"");  System.out.println("\tPattern of the manifest file in the war file " + "[Default: " + DEFAULT_MANIFEST_PATTERN + "].");  System.out.println("\n\t-D\"" + MANIFEST_FILE_NAME + "=<name of the manifest file in the resulting file>\"");  System.out.println("\tName of the manifest file " + "[Required if " + VERSION_FILE + " is not defined].");  System.out.println("\n\t-D\"" + WILDCARD_CHAR + "=<char to be used as wildcard>\"");  System.out.println("\tWild card character [Default: " + DEFAULT_WILDCARD_CHAR + "].");  System.out.println("\n\t-D\"" + VERSION_FILE + "=<properties file indicate version>\"");  System.out.println("\tProperties file indicate the version of patch " + "[Optional].");  System.out.println("\n\t-D\"" + PROPERTIES_FILE + "=<propeties file has the above directive defined>\"");  System.out.println("\tProperties file have above directives defined " + "[Optional].");}  }
class C{  public void transform(double[] srcPts,int srcOff,double[] dstPts,int dstOff,int numPts){  double M00, M01, M02, M10, M11, M12;  if (dstPts == srcPts && dstOff > srcOff && dstOff < srcOff + numPts * 2) {    System.arraycopy(srcPts,srcOff,dstPts,dstOff,numPts * 2);    srcOff=dstOff;  }switch (state) {default :    stateError();  return;case (APPLY_SHEAR | APPLY_SCALE | APPLY_TRANSLATE):M00=m00;M01=m01;M02=m02;M10=m10;M11=m11;M12=m12;while (--numPts >= 0) {double x=srcPts[srcOff++];double y=srcPts[srcOff++];dstPts[dstOff++]=M00 * x + M01 * y + M02;dstPts[dstOff++]=M10 * x + M11 * y + M12;}return;case (APPLY_SHEAR | APPLY_SCALE):M00=m00;M01=m01;M10=m10;M11=m11;while (--numPts >= 0) {double x=srcPts[srcOff++];double y=srcPts[srcOff++];dstPts[dstOff++]=M00 * x + M01 * y;dstPts[dstOff++]=M10 * x + M11 * y;}return;case (APPLY_SHEAR | APPLY_TRANSLATE):M01=m01;M02=m02;M10=m10;M12=m12;while (--numPts >= 0) {double x=srcPts[srcOff++];dstPts[dstOff++]=M01 * srcPts[srcOff++] + M02;dstPts[dstOff++]=M10 * x + M12;}return;case (APPLY_SHEAR):M01=m01;M10=m10;while (--numPts >= 0) {double x=srcPts[srcOff++];dstPts[dstOff++]=M01 * srcPts[srcOff++];dstPts[dstOff++]=M10 * x;}return;case (APPLY_SCALE | APPLY_TRANSLATE):M00=m00;M02=m02;M11=m11;M12=m12;while (--numPts >= 0) {dstPts[dstOff++]=M00 * srcPts[srcOff++] + M02;dstPts[dstOff++]=M11 * srcPts[srcOff++] + M12;}return;case (APPLY_SCALE):M00=m00;M11=m11;while (--numPts >= 0) {dstPts[dstOff++]=M00 * srcPts[srcOff++];dstPts[dstOff++]=M11 * srcPts[srcOff++];}return;case (APPLY_TRANSLATE):M02=m02;M12=m12;while (--numPts >= 0) {dstPts[dstOff++]=srcPts[srcOff++] + M02;dstPts[dstOff++]=srcPts[srcOff++] + M12;}return;case (APPLY_IDENTITY):if (srcPts != dstPts || srcOff != dstOff) {System.arraycopy(srcPts,srcOff,dstPts,dstOff,numPts * 2);}return;}}  }
class C{  public static void access(Level level,String msgid,String data[]){  access(level,msgid,data,null);}  }
class C{  BCRSAPrivateCrtKey(RSAPrivateCrtKeySpec spec){  this.modulus=spec.getModulus();  this.publicExponent=spec.getPublicExponent();  this.privateExponent=spec.getPrivateExponent();  this.primeP=spec.getPrimeP();  this.primeQ=spec.getPrimeQ();  this.primeExponentP=spec.getPrimeExponentP();  this.primeExponentQ=spec.getPrimeExponentQ();  this.crtCoefficient=spec.getCrtCoefficient();}  }
class C{  public void flip(int bitIndex){  if (bitIndex < 0)   throw new IndexOutOfBoundsException("bitIndex < 0: " + bitIndex);  int wordIndex=wordIndex(bitIndex);  expandTo(wordIndex);  words[wordIndex]^=(1L << bitIndex);  recalculateWordsInUse();  checkInvariants();}  }
class C{  public AgentsViewBean(){  super("Agents");  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);}  }
class C{  public boolean isMutable(){  return mutable;}  }
class C{  private void addField(MappedClass clazz,String[] parts){  String original="";  String newName="";  String desc="";  if (parts.length == 3) {    original=parts[1];    newName=parts[1];    desc=parts[2];  } else   if (parts.length == 4) {    original=parts[1];    newName=parts[2];    desc=parts[3];  } else {    return;  }  if (desc.contains("Lnone/")) {    desc=desc.replace("Lnone/","L");  }  MappedMember mm=new MappedMember(clazz,findField(clazz.getNode(),original,desc),-1,desc,original);  mm.setNewName(newName);  clazz.addField(mm);}  }
class C{  public void delete(RandomAccessFile raf,RandomAccessFile rafTemp) throws IOException {  Mp4Tag tag=new Mp4Tag();  try {    write(tag,raf,rafTemp);  } catch (  CannotWriteException cwe) {    throw new IOException(cwe.getMessage());  }}  }
class C{  public void comment(char ch[],int start,int length) throws SAXException {  if (m_insideDTD)   return;  charactersFlush();  m_values.addElement(new String(ch,start,length));  int dataIndex=m_valueIndex++;  m_previous=addNode(DTM.COMMENT_NODE,DTM.COMMENT_NODE,m_parents.peek(),m_previous,dataIndex,false);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.soap.EnvelopeType createEnvelopeType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.soap.impl.EnvelopeTypeImpl();}  }
class C{  public boolean more(){  return pos < in.length();}  }
class C{  private Set mergeSet(Set<String> set1,Set<String> set2){  if (set1 == null || set1.isEmpty()) {    if (set2 == null || set2.isEmpty()) {      return Collections.EMPTY_SET;    } else {      return set2;    }  } else {    if (set2 == null || set2.isEmpty()) {      return set1;    } else {      Set<String> returnSet=new HashSet<String>(set1);      returnSet.addAll(set2);      return returnSet;    }  }}  }
class C{  private JAXBElement<ErrorResponse> createXMLParsingErrorResponse(InputStream is,ObjectFactory objFactory,BatchResponse batchResponse,String parserErrorMessage){  ErrorResponse errorResponse=objFactory.createErrorResponse();  DSMLContentHandler contentHandler=new DSMLContentHandler();  try {    final XMLReader xmlReader=createSafeXMLReader();    xmlReader.setContentHandler(contentHandler);    is.reset();    xmlReader.parse(new InputSource(is));  } catch (  ParserConfigurationException|SAXException|IOException e) {  }  if (parserErrorMessage != null) {    errorResponse.setMessage(parserErrorMessage);  }  batchResponse.setRequestID(contentHandler.requestID);  errorResponse.setType(MALFORMED_REQUEST);  return objFactory.createBatchResponseErrorResponse(errorResponse);}  }
class C{  public SyncFactoryException(){}  }
class C{  private static byte[] readBytes(InputStream source,int length) throws IOException {  byte[] result=new byte[length];  for (int i=0; i < length; i++) {    int bytik=source.read();    if (bytik == -1) {      return null;    }    result[i]=(byte)bytik;  }  return result;}  }
class C{  public static void unlockOrientation(Activity activity){  activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED);}  }
class C{  public V remove(Object key){  if (!isValidKey(key))   return null;  int index=((Enum<?>)key).ordinal();  Object oldValue=vals[index];  vals[index]=null;  if (oldValue != null)   size--;  return unmaskNull(oldValue);}  }
class C{  public static void validate(DefaultJAXBContextImpl jaxbCtx,ValidationContext context,ValidatableObject vo) throws SAXException {  try {    new MSVValidator(jaxbCtx,context,vo)._validate();  } catch (  RuntimeException e) {    context.reportEvent(vo,e);  }}  }
class C{  protected void applicationAnnotationsConfig(){  long t1=System.currentTimeMillis();  WebAnnotationSet.loadApplicationAnnotations(context);  long t2=System.currentTimeMillis();  if (context instanceof StandardContext) {    ((StandardContext)context).setStartupTime(t2 - t1 + ((StandardContext)context).getStartupTime());  }}  }
class C{  public JRadioButtonMenuItem(String text,boolean selected){  this(text);  setSelected(selected);}  }
class C{  public int next(){  int node=_currentNode;  final int nodeType=_nodeType;  if (nodeType >= DTM.NTYPES) {    while (true) {      node++;      if (_sp < 0) {        node=NULL;        break;      } else       if (node >= _stack[_sp]) {        if (--_sp < 0) {          node=NULL;          break;        }      } else       if (_exptype2(node) == nodeType) {        break;      }    }  } else {    int expType;    while (true) {      node++;      if (_sp < 0) {        node=NULL;        break;      } else       if (node >= _stack[_sp]) {        if (--_sp < 0) {          node=NULL;          break;        }      } else {        expType=_exptype2(node);        if (expType < DTM.NTYPES) {          if (expType == nodeType) {            break;          }        } else {          if (m_extendedTypes[expType].getNodeType() == nodeType) {            break;          }        }      }    }  }  _currentNode=node;  return (node == NULL) ? NULL : returnNode(makeNodeHandle(node));}  }
class C{  ReplicationEnvironment(final String rootPath,final ReplicationServer replicationServer,final TimeService timeService) throws ChangelogException {  this.replicationRootPath=rootPath;  this.replicationServer=replicationServer;  this.timeService=timeService;  this.changelogState=readOnDiskChangelogState();  this.cnIndexDBLastRotationTime=readOnDiskLastRotationTime();}  }
class C{  private boolean validateStartIp(Set ipSet) throws PolicyException {  if (ipSet.size() != 1) {    String args[]={START_IP};    throw new PolicyException(ResBundleUtils.rbName,"multiple_values_not_allowed_for_property",args,null);  }  Iterator startIpIter=ipSet.iterator();  String startIpString=null;  try {    startIpString=(String)startIpIter.next();    startIP=IPv6Address.fromString(startIpString);  } catch (  ClassCastException ce) {    String args[]={START_IP};    throw new PolicyException(ResBundleUtils.rbName,"property_is_not_a_String",args,ce);  }catch (  IllegalArgumentException iae) {    String args[]={"ip",startIpString};    throw new PolicyException(ResBundleUtils.rbName,"invalid_property_value",args,null);  }  return true;}  }
class C{  @Post public Representation token(Representation entity) throws OAuth2RestletException {  final OAuth2Request request=requestFactory.create(getRequest());  try {    final AccessToken accessToken=accessTokenService.refreshToken(request);    return jacksonRepresentationFactory.create(accessToken.toMap());  } catch (  IllegalArgumentException e) {    throw new OAuth2RestletException(400,"invalid_request",e.getMessage(),request.<String>getParameter("redirect_uri"),request.<String>getParameter("state"));  }catch (  InvalidClientAuthZHeaderException e) {    getResponse().setChallengeRequests(singletonList(new ChallengeRequest(ChallengeScheme.valueOf(SUPPORTED_RESTLET_CHALLENGE_SCHEMES.get(e.getChallengeScheme())),e.getChallengeRealm())));    throw new OAuth2RestletException(e.getStatusCode(),e.getError(),e.getMessage(),request.<String>getParameter("state"));  }catch (  InvalidGrantException e) {    logger.debug("Invalid grant presented for refresh token",e);    throw new OAuth2RestletException(e.getStatusCode(),e.getError(),"grant is invalid",request.<String>getParameter("redirect_uri"),request.<String>getParameter("state"));  }catch (  OAuth2Exception e) {    throw new OAuth2RestletException(e.getStatusCode(),e.getError(),e.getMessage(),request.<String>getParameter("redirect_uri"),request.<String>getParameter("state"));  }}  }
class C{  public void insert_double(double value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_double",_opsClass);  DynUnionOperations $self=(DynUnionOperations)$so.servant;  try {    $self.insert_double(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public final void testEqualsObject04(){  assertTrue(new ECFieldFp(BigInteger.valueOf(23L)).equals(new ECFieldFp(BigInteger.valueOf(23L))));}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  String outputFile=getStringOptionValue(IArgument.OUTPUT_FILE);  FileOutputStream fout=null;  String[] param={"tty"};  String[] paramException={"tty",""};  dsHost=getStringOptionValue(DS_HOST);  dsPort=getStringOptionValue(DS_PORT);  dsAdmin=getStringOptionValue(DS_ADMIN);  String dsPasswordFile=getStringOptionValue(DS_PWD_FILE);  basedn=getStringOptionValue(DS_BASEDN);  if ((dsHost == null) || (dsHost.length() == 0)) {    dsHost="ds.opensso.java.net";  }  if ((dsPort == null) || (dsPort.length() == 0)) {    dsPort="389";  }  if ((dsAdmin == null) || (dsAdmin.length() == 0)) {    dsAdmin="cn=Directory Manager";  }  if ((dsPasswordFile == null) || (dsPasswordFile.length() == 0)) {    dsPassword="11111111";  } else {    dsPassword=CLIUtil.getFileContent(getCommandManager(),dsPasswordFile);  }  if ((basedn == null) || (basedn.length() == 0)) {    basedn=DEFAULT_ROOT_SUFFIX;  }  dsPassword=(String)AccessController.doPrivileged(new EncodeAction(dsPassword));  try {    if ((outputFile != null) && (outputFile.length() > 0)) {      fout=new FileOutputStream(outputFile);      param[0]=outputFile;      paramException[0]=outputFile;    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_CREATE_SERVERCONFIG_XML",param);    String template=getResource("serverconfig.xml");    String modified=modifyXML(template);    if (fout != null) {      fout.write(modified.getBytes());    } else {      getOutputWriter().printlnMessage(modified);    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_CREATE_SERVERCONFIG_XML",param);  } catch (  IOException e) {    paramException[1]=e.getMessage();    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"FAILED_CREATE_SERVERCONFIG_XML",paramException);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  } finally {    if (fout != null) {      try {        fout.close();      } catch (      IOException ioe) {      }    }  }}  }
class C{  public void update(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).update(a,b);  }}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();}  }
class C{  private static byte[] encode3to4(byte[] b4,byte[] threeBytes,int numSigBytes,int options){  encode3to4(threeBytes,0,numSigBytes,b4,0,options);  return b4;}  }
class C{  private static int parseAttributePattern(String dnString,int pos,StringBuilder attributeName) throws DirectoryException {  int length=dnString.length();  if (pos < length) {    while (dnString.charAt(pos) == ' ') {      pos++;      if (pos == length) {        LocalizableMessage message=ERR_ATTR_SYNTAX_DN_END_WITH_COMMA.get(dnString);        throw new DirectoryException(ResultCode.INVALID_DN_SYNTAX,message);      }    }  }  boolean checkForOID=false;  boolean endOfName=false;  while (pos < length) {    char c=dnString.charAt(pos);switch (c) {case ' ':      endOfName=true;    break;case '!':case '"':case '#':case '$':case '%':case '&':case '\'':case '(':case ')':  throw illegalCharacter(dnString,pos,c);case '*':attributeName.append(c);break;case '+':throw illegalCharacter(dnString,pos,c);case ',':endOfName=true;break;case '-':if (attributeName.length() == 0) {LocalizableMessage message=ERR_ATTR_SYNTAX_DN_ATTR_ILLEGAL_INITIAL_DASH.get(dnString);throw new DirectoryException(ResultCode.INVALID_DN_SYNTAX,message);}attributeName.append(c);break;case '.':attributeName.append(c);checkForOID=true;break;case '/':throw illegalCharacter(dnString,pos,c);case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':attributeName.append(c);break;case ':':throw illegalCharacter(dnString,pos,c);case ';':endOfName=true;break;case '<':throw illegalCharacter(dnString,pos,c);case '=':endOfName=true;break;case '>':case '?':case '@':throw illegalCharacter(dnString,pos,c);case 'A':case 'B':case 'C':case 'D':case 'E':case 'F':case 'G':case 'H':case 'I':case 'J':case 'K':case 'L':case 'M':case 'N':case 'O':case 'P':case 'Q':case 'R':case 'S':case 'T':case 'U':case 'V':case 'W':case 'X':case 'Y':case 'Z':attributeName.append(c);break;case '[':case '\\':case ']':case '^':throw illegalCharacter(dnString,pos,c);case '_':attributeName.append(c);break;case '`':throw illegalCharacter(dnString,pos,c);case 'a':case 'b':case 'c':case 'd':case 'e':case 'f':case 'g':case 'h':case 'i':case 'j':case 'k':case 'l':case 'm':case 'n':case 'o':case 'p':case 'q':case 'r':case 's':case 't':case 'u':case 'v':case 'w':case 'x':case 'y':case 'z':attributeName.append(c);break;default :throw illegalCharacter(dnString,pos,c);}if (endOfName) {break;}pos++;}if (attributeName.length() == 0) {LocalizableMessage message=ERR_ATTR_SYNTAX_DN_ATTR_NO_NAME.get(dnString);throw new DirectoryException(ResultCode.INVALID_DN_SYNTAX,message);} else if (checkForOID) {boolean validOID=true;int namePos=0;int nameLength=attributeName.length();char ch0=attributeName.charAt(0);if (ch0 == 'o' || ch0 == 'O') {if (nameLength <= 4) {validOID=false;} else {char ch1=attributeName.charAt(1);char ch2=attributeName.charAt(2);if ((ch1 == 'i' || ch1 == 'I') && (ch2 == 'd' || ch2 == 'D') && attributeName.charAt(3) == '.') {attributeName.delete(0,4);nameLength-=4;} else {validOID=false;}}}while (validOID && namePos < nameLength) {char ch=attributeName.charAt(namePos++);if (isDigit(ch)) {while (validOID && namePos < nameLength && isDigit(attributeName.charAt(namePos))) {namePos++;}if (namePos < nameLength && attributeName.charAt(namePos) != '.') {validOID=false;}} else if (ch == '.') {if (namePos == 1 || attributeName.charAt(namePos - 2) == '.') {validOID=false;}} else {validOID=false;}}if (validOID && attributeName.charAt(nameLength - 1) == '.') {validOID=false;}if (!validOID) {throw new DirectoryException(ResultCode.INVALID_DN_SYNTAX,ERR_ATTR_SYNTAX_DN_ATTR_ILLEGAL_PERIOD.get(dnString,attributeName));}}return pos;}  }
class C{  public void collectTransactionTermiatedEvent(SipProvider provider) throws TooManyListenersException {  initCollectors(provider);  provider.addSipListener(transactionTerminationCollector);}  }
class C{  public void addCondition(String name,Condition condition) throws NameAlreadyExistsException, InvalidNameException {  conditions.addCondition(name,condition);}  }
class C{  public AuthScope(final String host,int port){  this(host,port,ANY_REALM,ANY_SCHEME);}  }
class C{  @Override public void disconnect(DisconnectReason disconnectReason,boolean sendNotification,LocalizableMessage message){  if (disconnectStarted) {    return;  }  disconnectStarted=true;  jmxConnectionHandler.unregisterClientConnection(this);  DirectoryServer.connectionClosed(this);  finalizeConnectionInternal();  try {    UnbindOperationBasis unbindOp=new UnbindOperationBasis(this,nextOperationID(),nextMessageID(),null);    unbindOp.run();  } catch (  Exception e) {    logger.traceException(e);  }  try {    PluginConfigManager pluginManager=DirectoryServer.getPluginConfigManager();    pluginManager.invokePostDisconnectPlugins(this,disconnectReason,message);  } catch (  Exception e) {    logger.traceException(e);  }}  }
class C{  public static void printUsage(ResourceBundle bundle){  System.out.println(bundle.getString("message.info.usage"));}  }
class C{  static void testFailLoadAndGc() throws TestFailed {  try {    BrokenDexLoader loader;    loader=new BrokenDexLoader(ClassLoader.getSystemClassLoader());    loader.findBrokenClass();    System.err.println("ERROR: Inaccessible was accessible");  } catch (  InvocationTargetException ite) {    Throwable cause=ite.getCause();    if (cause instanceof NullPointerException) {      System.err.println("Got expected ITE/NPE");    } else {      System.err.println("Got unexpected ITE");      ite.printStackTrace();    }  }  System.gc();  System.out.println("GC complete.");}  }
class C{  private boolean removeIndexEntry(ServiceType resourceType,String resourceName,String policyName) throws PolicyException {  ResourceIndex resourceIndex=(ResourceIndex)resourceIndices.get(resourceType.getName());  if (resourceIndex == null) {    resourceIndex=refreshResourceIndexFromDataStore(resourceType);  }  return resourceIndex.removeIndexEntry(resourceName,policyName);}  }
class C{  public boolean modified(){  if (log.isDebugEnabled())   log.debug("modified()");  for (  Entry<String,ResourceEntry> entry : resourceEntries.entrySet()) {    long cachedLastModified=entry.getValue().lastModified;    long lastModified=resources.getClassLoaderResource(entry.getKey()).getLastModified();    if (lastModified != cachedLastModified) {      if (log.isDebugEnabled())       log.debug(sm.getString("webappClassLoader.resourceModified",entry.getKey(),new Date(cachedLastModified),new Date(lastModified)));      return true;    }  }  WebResource[] jars=resources.listResources("/WEB-INF/lib");  int jarCount=0;  for (  WebResource jar : jars) {    if (jar.getName().endsWith(".jar") && jar.isFile() && jar.canRead()) {      jarCount++;      Long recordedLastModified=jarModificationTimes.get(jar.getName());      if (recordedLastModified == null) {        log.info(sm.getString("webappClassLoader.jarsAdded",resources.getContext().getName()));        return true;      }      if (recordedLastModified.longValue() != jar.getLastModified()) {        log.info(sm.getString("webappClassLoader.jarsModified",resources.getContext().getName()));        return true;      }    }  }  if (jarCount < jarModificationTimes.size()) {    log.info(sm.getString("webappClassLoader.jarsRemoved",resources.getContext().getName()));    return true;  }  return false;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeprocessinginstructionnodeattributes.class,args);}  }
class C{  public XMLElement newElementFromXMLFragment(String xmlFragment) throws Exception {  StringReader reader=new StringReader(xmlFragment);  ArrayList newTokens=getParser().parse(reader);  ArrayList filteredTokens=getFilteredTokens(newTokens);  ArrayList elements=getElements(filteredTokens);  if (elements == null || elements.size() != 1) {    throw new Exception("Failed to parse fragment into new element");  }  return (XMLElement)elements.get(0);}  }
class C{  public final void testGetPolicyQualifier02() throws IOException {  byte[] encoding=getDerEncoding();  byte[] pqEncoding=new byte[28];  System.arraycopy(encoding,12,pqEncoding,0,pqEncoding.length);  PolicyQualifierInfo i=new PolicyQualifierInfo(encoding);  byte[] pqEncodingRet=i.getPolicyQualifier();  pqEncodingRet[0]=(byte)0;  byte[] pqEncodingRet1=i.getPolicyQualifier();  assertNotSame(pqEncodingRet,pqEncodingRet1);  assertTrue(Arrays.equals(pqEncoding,pqEncodingRet1));}  }
class C{  public boolean isRevoked(Certificate cert){  if (!cert.getType().equals("X.509")) {    throw new RuntimeException("X.509 CRL used with non X.509 Cert");  }  TBSCertList.CRLEntry[] certs=c.getRevokedCertificates();  X500Name caName=c.getIssuer();  if (certs != null) {    BigInteger serial=((X509Certificate)cert).getSerialNumber();    for (int i=0; i < certs.length; i++) {      if (isIndirect && certs[i].hasExtensions()) {        Extension currentCaName=certs[i].getExtensions().getExtension(Extension.certificateIssuer);        if (currentCaName != null) {          caName=X500Name.getInstance(GeneralNames.getInstance(currentCaName.getParsedValue()).getNames()[0].getName());        }      }      if (certs[i].getUserCertificate().getValue().equals(serial)) {        X500Name issuer;        if (cert instanceof X509Certificate) {          issuer=X500Name.getInstance(((X509Certificate)cert).getIssuerX500Principal().getEncoded());        } else {          try {            issuer=org.bouncycastle.asn1.x509.Certificate.getInstance(cert.getEncoded()).getIssuer();          } catch (          CertificateEncodingException e) {            throw new RuntimeException("Cannot process certificate");          }        }        if (!caName.equals(issuer)) {          return false;        }        return true;      }    }  }  return false;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NamedNodeMap entities;  DocumentType docType;  Node retval;  doc=(Document)load("hc_staff",true);  docType=doc.getDoctype();  if (!(("text/html".equals(getContentType())))) {    assertNotNull("docTypeNotNull",docType);    entities=docType.getEntities();    assertNotNull("entitiesNotNull",entities);{      boolean success=false;      try {        retval=entities.removeNamedItem("alpha");      } catch (      DOMException ex) {        success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);      }      assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.deleteData(4,50);  childData=child.getData();  assertEquals("characterdataDeleteDataExceedsLengthAssert","1230",childData);}  }
class C{  public boolean hasCredentials(){  return _hasCredentials;}  }
class C{  public ChunkedOutputStream(final SessionOutputBuffer out) throws IOException {  this(out,2048);}  }
class C{  public void write(Node node){  if (node == null) {    return;  }  short type=node.getNodeType();switch (type) {case Node.DOCUMENT_NODE:{      Document document=(Document)node;      fXML11=false;      if (!fCanonical) {        if (fXML11) {          fOut.print("<?xml version=\"1.1\" encoding=\"UTF-8\"?>");        } else {          fOut.print("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");        }        fOut.print("\n");        fOut.flush();        write(document.getDoctype());      }      write(document.getDocumentElement());      break;    }case Node.DOCUMENT_TYPE_NODE:{    DocumentType doctype=(DocumentType)node;    fOut.print("<!DOCTYPE ");    fOut.print(doctype.getName());    String publicId=doctype.getPublicId();    String systemId=doctype.getSystemId();    if (publicId != null) {      fOut.print(" PUBLIC '");      fOut.print(publicId);      fOut.print("' '");      fOut.print(systemId);      fOut.print('\'');    } else     if (systemId != null) {      fOut.print(" SYSTEM '");      fOut.print(systemId);      fOut.print('\'');    }    String internalSubset=doctype.getInternalSubset();    if (internalSubset != null) {      fOut.println(" [");      fOut.print(internalSubset);      fOut.print(']');    }    fOut.println('>');    break;  }case Node.ELEMENT_NODE:{  fOut.print('<');  fOut.print(node.getNodeName());  Attr[] attrs=sortAttributes(node.getAttributes());  for (int i=0; i < attrs.length; i++) {    Attr attr=attrs[i];    fOut.print(' ');    fOut.print(attr.getNodeName());    fOut.print("=\"");    normalizeAndPrint(attr.getNodeValue(),true);    fOut.print('"');  }  fOut.print('>');  fOut.flush();  Node child=node.getFirstChild();  while (child != null) {    write(child);    child=child.getNextSibling();  }  break;}case Node.ENTITY_REFERENCE_NODE:{if (fCanonical) {  Node child=node.getFirstChild();  while (child != null) {    write(child);    child=child.getNextSibling();  }} else {  fOut.print('&');  fOut.print(node.getNodeName());  fOut.print(';');  fOut.flush();}break;}case Node.CDATA_SECTION_NODE:{if (fCanonical) {normalizeAndPrint(node.getNodeValue(),false);} else {fOut.print("<![CDATA[");fOut.print(node.getNodeValue());fOut.print("]]>");}fOut.flush();break;}case Node.TEXT_NODE:{normalizeAndPrint(node.getNodeValue(),false);fOut.flush();break;}case Node.PROCESSING_INSTRUCTION_NODE:{fOut.print("<?");fOut.print(node.getNodeName());String data=node.getNodeValue();if (data != null && data.length() > 0) {fOut.print(' ');fOut.print(data);}fOut.print("?>");fOut.flush();break;}case Node.COMMENT_NODE:{if (!fCanonical) {fOut.print("<!--");String comment=node.getNodeValue();if (comment != null && comment.length() > 0) {fOut.print(comment);}fOut.print("-->");fOut.flush();}}}if (type == Node.ELEMENT_NODE) {fOut.print("</");fOut.print(node.getNodeName());fOut.print('>');fOut.flush();}}  }
class C{  public static FileBasedArgument rootDNPwdFileArgument() throws ArgumentException {  return FileBasedArgument.builder("rootUserPasswordFile").shortIdentifier(OPTION_SHORT_BINDPWD_FILE).description(INFO_ARGUMENT_DESCRIPTION_ROOTPWFILE.get()).valuePlaceholder(INFO_ROOT_USER_PWD_FILE_PLACEHOLDER.get()).buildArgument();}  }
class C{  @AfterClass public static void cleanupClass(){  try {    Misc.deleteDirectorySimple(scenario.getRepositoryLocation());  } catch (  Exception ignore) {    System.err.println("cannot remove " + scenario.getRepositoryLocation());  }}  }
class C{  public RealmRuleSet(){  this("");}  }
class C{  public void add(int posn,RefAddr addr){  addrs.insertElementAt(addr,posn);}  }
class C{  private void ensureGeneratorIsInitialized() throws IOException {  if (!isInitialized) {    isInitialized=true;    initialize();  }}  }
class C{  public void test_MultipleAccessToSeveralTables() throws SQLException {  threadPool.runTask(createTask1(1));  threadPool.runTask(createTask2(2));  threadPool.runTask(createTask3(3));}  }
class C{  public final boolean peekOrTrue(){  return (m_index > -1) ? m_values[m_index] : true;}  }
class C{  public void testExecuteWorkflows(PublicKeyAlgorithm algorithm,int port){  GeneralConfig generalConfig=new GeneralConfig();  generalConfig.setLogLevel(Level.INFO);  ConfigHandler configHandler=ConfigHandlerFactory.createConfigHandler("client");  configHandler.initialize(generalConfig);  ClientCommandConfig config=new ClientCommandConfig();  config.setConnect("localhost:" + port);  config.setTlsTimeout(TIMEOUT);  List<String> serverList=Arrays.asList(tlsServer.getCipherSuites());  config.setProtocolVersion(ProtocolVersion.TLS10);  testProtocolCompatibility(serverList,configHandler,config,algorithm);  config.setProtocolVersion(ProtocolVersion.TLS11);  testProtocolCompatibility(serverList,configHandler,config,algorithm);  config.setProtocolVersion(ProtocolVersion.TLS12);  testProtocolCompatibility(serverList,configHandler,config,algorithm);  if (algorithm == PublicKeyAlgorithm.RSA) {    testCustomWorkflow(port);  }}  }
class C{  public void removeSessionPartner(String sessionPartner){  Iterator i=sessionPartners.iterator();  while (i.hasNext()) {    FSSessionPartner oldSessionPartner=(FSSessionPartner)i.next();    if (oldSessionPartner.isEquals(sessionPartner)) {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSSession.removeSessionPartner : Removing " + sessionPartner);      }      i.remove();    }  }}  }
class C{  public Observable<List<Job>> jobRangeByTypeObservable(String type,String state,long from,long to,String order){  io.vertx.rx.java.ObservableFuture<List<Job>> handler=io.vertx.rx.java.RxHelper.observableFuture();  jobRangeByType(type,state,from,to,order,handler.toHandler());  return handler;}  }
class C{  public boolean hasBOM(ByteOrderMark bom) throws IOException {  if (!boms.contains(bom)) {    throw new IllegalArgumentException("Stream not configure to detect " + bom);  }  return byteOrderMark != null && getBOM().equals(bom);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document aNewDoc;  Attr newAttr;  Text importedChild;  Node aNode;  Document ownerDocument;  Element attrOwnerElement;  DocumentType docType;  String system;  boolean specified;  NodeList childList;  String nodeName;  Node child;  String childValue;  java.util.List result=new java.util.ArrayList();  java.util.List expectedResult=new java.util.ArrayList();  expectedResult.add("elem:attr1");  expectedResult.add("importedText");  doc=(Document)load("staffNS",true);  aNewDoc=(Document)load("staffNS",true);  newAttr=aNewDoc.createAttribute("elem:attr1");  importedChild=aNewDoc.createTextNode("importedText");  aNode=newAttr.appendChild(importedChild);  aNode=doc.importNode(newAttr,false);  ownerDocument=aNode.getOwnerDocument();  docType=ownerDocument.getDoctype();  system=docType.getSystemId();  assertNotNull("aNode",aNode);  assertURIEquals("systemId",null,null,null,"staffNS.dtd",null,null,null,null,system);  attrOwnerElement=((Attr)aNode).getOwnerElement();  assertNull("ownerElement",attrOwnerElement);  specified=((Attr)aNode).getSpecified();  assertTrue("specified",specified);  childList=aNode.getChildNodes();  assertSize("childList",1,childList);  nodeName=aNode.getNodeName();  assertEquals("nodeName","elem:attr1",nodeName);  child=aNode.getFirstChild();  childValue=child.getNodeValue();  assertEquals("childValue","importedText",childValue);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.TechnicalProtectionType createTechnicalProtectionType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.TechnicalProtectionTypeImpl();}  }
class C{  static void testBadAccess(){  Mutant mutant=new Mutant();  try {    int x=mutant.inaccessibleField;    System.err.println("ERROR: bad access succeeded\n");  } catch (  IllegalAccessError iae) {    System.out.println("Got expected IllegalAccessError (ifield)");    if (VERBOSE)     System.out.println("--- " + iae);  }  try {    int y=Mutant.inaccessibleStaticField;    System.err.println("ERROR: bad access succeeded\n");  } catch (  IllegalAccessError iae) {    System.out.println("Got expected IllegalAccessError (sfield)");    if (VERBOSE)     System.out.println("--- " + iae);  }  try {    mutant.inaccessibleMethod();    System.err.println("ERROR: bad access succeeded\n");  } catch (  IllegalAccessError iae) {    System.out.println("Got expected IllegalAccessError (method)");    if (VERBOSE)     System.out.println("--- " + iae);  }  try {    Mutant.inaccessibleStaticMethod();    System.err.println("ERROR: bad access succeeded\n");  } catch (  IllegalAccessError iae) {    System.out.println("Got expected IllegalAccessError (smethod)");    if (VERBOSE)     System.out.println("--- " + iae);  }  try {    InaccessibleClass.test();    System.err.println("ERROR: bad meth-class access succeeded\n");  } catch (  IllegalAccessError iae) {    System.out.println("Got expected IllegalAccessError (meth-class)");    if (VERBOSE)     System.out.println("--- " + iae);  }  try {    int blah=InaccessibleClass.blah;    System.err.println("ERROR: bad field-class access succeeded\n");  } catch (  IllegalAccessError iae) {    System.out.println("Got expected IllegalAccessError (field-class)");    if (VERBOSE)     System.out.println("--- " + iae);  }  try {    InaccessibleMethod.test();    System.err.println("ERROR: bad access succeeded\n");  } catch (  IllegalAccessError iae) {    System.out.println("Got expected IllegalAccessError (meth-meth)");    if (VERBOSE)     System.out.println("--- " + iae);  }}  }
class C{  private static void resizeImage(final BufferedImage sourceImage,final int width,final int height,final float quality,final File destFile) throws IOException {  try {    Thumbnails.of(sourceImage).size(width,height).keepAspectRatio(false).outputQuality(quality).toFile(destFile);  } catch (  IllegalStateException e) {    Thumbnails.of(sourceImage).size(width,height).keepAspectRatio(false).toFile(destFile);  }}  }
class C{  public void clearSelection(){  if (selection != null) {    ButtonModel oldSelection=selection;    selection=null;    oldSelection.setSelected(false);  }}  }
class C{  public double num() throws javax.xml.transform.TransformerException {  XMLString s=xstr();  return s.toDouble();}  }
class C{  private boolean isModuleInstanceInUse(String moduleInstance){  Set services=Collections.EMPTY_SET;  boolean returnValue=false;  try {    ServiceConfigManager scm=new ServiceConfigManager(ISAuthConstants.AUTHCONFIG_SERVICE_NAME,token);    ServiceConfig oConfig=scm.getOrganizationConfig(realm,null);    if (oConfig != null) {      ServiceConfig namedConfig=oConfig.getSubConfig("Configurations");      if (namedConfig != null) {        services=namedConfig.getSubConfigNames("*");      }    }  } catch (  Exception e) {    if (DEBUG.messageEnabled()) {      DEBUG.message("Failed to get named sub configurations.");    }  }  for (Iterator it=services.iterator(); it.hasNext(); ) {    String service=(String)it.next();    if (DEBUG.messageEnabled()) {      DEBUG.message("Checking " + service + " ...");    }    if (serviceContains(service,moduleInstance)) {      if (DEBUG.messageEnabled()) {        DEBUG.message(moduleInstance + " is used in " + service);      }      returnValue=true;      break;    }  }  return returnValue;}  }
class C{  private int pop(){  if (outputStackTop > 0) {    return outputStack[--outputStackTop];  } else {    return STACK | -(--owner.inputStackTop);  }}  }
class C{  public static String dateToString(final Date date){  return dateToString(date,UTC_DATE_FORMAT,UTC_TIME_ZONE);}  }
class C{  @Override public String toString(){  StringBuilder buffer=new StringBuilder();  toString(buffer);  return buffer.toString();}  }
class C{  private boolean processPreOperation(){  for (  SynchronizationProvider<?> provider : getSynchronizationProviders()) {    try {      if (!processOperationResult(this,provider.doPreOperation(this))) {        return false;      }    } catch (    DirectoryException de) {      logger.traceException(de);      logger.error(ERR_DELETE_SYNCH_PREOP_FAILED,getConnectionID(),getOperationID(),getExceptionMessage(de));      setResponseData(de);      return false;    }  }  return true;}  }
class C{  public boolean isMutable(){  return isMutable;}  }
class C{  public boolean isOptimizedDrawingEnabled(){  return true;}  }
class C{  public PdfVisibilityExpression(PdfArray visibilityExpressionArray){  super(visibilityExpressionArray);  PdfName operator=visibilityExpressionArray.getAsName(0);  if (visibilityExpressionArray.size() < 1 || !PdfName.Or.equals(operator) && !PdfName.And.equals(operator) && !PdfName.Not.equals(operator)) {    throw new IllegalArgumentException("Invalid visibilityExpressionArray");  }}  }
class C{  public void testGetInstance02() throws NoSuchAlgorithmException, NoSuchProviderException, IllegalArgumentException, InvalidAlgorithmParameterException, CertPathValidatorException {  try {    CertPathValidator.getInstance(null,mProv.getName());    fail("NullPointerException or NoSuchAlgorithmException must be thrown when algorithm is null");  } catch (  NullPointerException e) {  }catch (  NoSuchAlgorithmException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      CertPathValidator.getInstance(invalidValues[i],mProv.getName());      fail("NoSuchAlgorithmException must be thrown (type: ".concat(invalidValues[i]).concat(")"));    } catch (    NoSuchAlgorithmException e) {    }  }  String prov=null;  for (int i=0; i < validValues.length; i++) {    try {      CertPathValidator.getInstance(validValues[i],prov);      fail("IllegalArgumentException must be thrown when provider is null (type: ".concat(validValues[i]).concat(")"));    } catch (    IllegalArgumentException e) {    }    try {      CertPathValidator.getInstance(validValues[i],"");      fail("IllegalArgumentException must be thrown when provider is empty (type: ".concat(validValues[i]).concat(")"));    } catch (    IllegalArgumentException e) {    }  }  for (int i=0; i < validValues.length; i++) {    for (int j=1; j < invalidValues.length; j++) {      try {        CertPathValidator.getInstance(validValues[i],invalidValues[j]);        fail("NoSuchProviderException must be thrown (type: ".concat(validValues[i]).concat(" provider: ").concat(invalidValues[j]).concat(")"));      } catch (      NoSuchProviderException e) {      }    }  }  CertPathValidator cerPV;  for (int i=0; i < validValues.length; i++) {    cerPV=CertPathValidator.getInstance(validValues[i],mProv.getName());    assertEquals("Incorrect type",cerPV.getAlgorithm(),validValues[i]);    assertEquals("Incorrect provider",cerPV.getProvider().getName(),mProv.getName());    checkResult(cerPV);  }}  }
class C{  public boolean isEmpty(){  return size() == 0;}  }
class C{  public Set searchAssignableDynamicGroups(String wildcard,Map avPairs,int level) throws AMException, SSOException {  return searchObjects(AMNamingAttrManager.getNamingAttr(GROUP),getSearchFilter(AMObject.ASSIGNABLE_DYNAMIC_GROUP),wildcard,avPairs,level);}  }
class C{  public boolean startsWith(String prefix){  return m_str.startsWith(prefix);}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  SSOToken adminSSOToken=getAdminSSOToken();  IOutput outputWriter=getOutputWriter();  String realm=getStringOptionValue(IArgument.REALM_NAME);  String idName=getStringOptionValue(ARGUMENT_ID_NAME);  String type=getStringOptionValue(ARGUMENT_ID_TYPE);  IdType idType=convert2IdType(type);  String datafile=getStringOptionValue(IArgument.DATA_FILE);  List attrValues=rc.getOption(IArgument.ATTRIBUTE_VALUES);  if ((datafile == null) && (attrValues == null)) {    throw new CLIException(getResourceString("missing-attributevalues"),ExitCodes.INCORRECT_OPTION,rc.getSubCommand().getName());  }  Map attributeValues=AttributeValues.parse(getCommandManager(),datafile,attrValues);  String[] params={realm,type,idName};  try {    AMIdentityRepository amir=new AMIdentityRepository(adminSSOToken,realm);    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_IDREPO_SET_ATTRIBUTE_VALUES",params);    AMIdentity amid=new AMIdentity(adminSSOToken,idName,idType,realm,null);    amid.setAttributes(attributeValues);    amid.store();    outputWriter.printlnMessage(MessageFormat.format(getResourceString("idrepo-set-attribute-values-succeed"),(Object[])params));    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_IDREPO_SET_ATTRIBUTE_VALUES",params);  } catch (  IdRepoException e) {    String[] args={realm,type,idName,e.getMessage()};    debugError("SetAttributeValues.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_IDREPO_SET_ATTRIBUTE_VALUES",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    String[] args={realm,type,idName,e.getMessage()};    debugError("SetAttributeValues.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_IDREPO_SET_ATTRIBUTE_VALUES",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public void addCharOption(LocalizableMessage c,LocalizableMessage description,MenuResult<T> result){  addCharOption(c,description,new ResultCallback<T>(result));}  }
class C{  protected synchronized void initializeBeanContextResources(){  super.initializeBeanContextResources();  BeanContext nbc=getBeanContext();  if (nbc == null)   return;  try {    BeanContextServices bcs=(BeanContextServices)nbc;    proxy=new BCSSProxyServiceProvider(bcs);  } catch (  ClassCastException cce) {  }}  }
class C{  public LocalizedHttpApplicationException(LocalizableMessage message,Throwable cause){  super(message.toString(),cause);  this.message=message;}  }
class C{  public void insert_ulonglong(long value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_ulonglong",_opsClass);  DynStructOperations $self=(DynStructOperations)$so.servant;  try {    $self.insert_ulonglong(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public boolean putRemoteUpdate(LDAPUpdateMsg update){  pendingChangesWriteLock.lock();  try {    CSN csn=update.getCSN();    return pendingChanges.put(csn,new PendingChange(csn,null,update)) == null;  }  finally {    pendingChangesWriteLock.unlock();  }}  }
class C{  public boolean delete(Long actionID){  if (actionID == null) {    throw new IllegalArgumentException("primary key null.");  }  return database.delete(DATABASE_TABLE,KEY_ACTIONID + "=" + actionID,null) > 0;}  }
class C{  private WindowListener createWindowListener(){  return new WindowHandler();}  }
class C{  protected void write(StringBuffer buffer){  System.err.println(buffer.toString());}  }
class C{  public SoapSTSServerCryptoStateBuilder decryptionKeyAlias(String decryptionKeyAlias){  this.decryptionKeyAlias=decryptionKeyAlias;  return this;}  }
class C{  public void init(boolean encrypting,CipherParameters params){  if (params instanceof KeyParameter) {    this.encrypting=encrypting;    this.workingKey=((KeyParameter)params).getKey();    this.k64Cnt=(this.workingKey.length / 8);    setKey(this.workingKey);    return;  }  throw new IllegalArgumentException("invalid parameter passed to Twofish init - " + params.getClass().getName());}  }
class C{  public boolean hasBinaryAttributes(){  return false;}  }
class C{  public void deleteApiKeys(EntityManager em,Tenant tenant,ApplicationManager am) throws Exception {  EntityTransaction transaction=em.getTransaction();  try {    transaction.begin();    List<ApiKey> apiKeys=getApiKeys(em,tenant);    for (    ApiKey key : apiKeys) {      em.remove(key);      sendApikeyToKafka(am,DELETED_APIKEY,tenant.getTenant_id(),key.getApikey());    }    em.flush();    transaction.commit();    logger.info("Deleted all apikeys for tenant:" + tenant);  } catch (  Exception e) {    if (transaction.isActive()) {      transaction.rollback();    }    if (!(e instanceof NoResultException)) {      logger.log(Level.SEVERE,"Failed to delete apikey",e);    }    throw e;  }}  }
class C{  public void componentAdded(ContainerEvent e){  ((ContainerListener)a).componentAdded(e);  ((ContainerListener)b).componentAdded(e);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList genderList;  Node genderNode;  Node entText;  EntityReference entReference;  doc=(Document)load("staff",true);  genderList=doc.getElementsByTagName("gender");  genderNode=genderList.item(4);  entReference=doc.createEntityReference("ent3");  assertNotNull("createdEntRefNotNull",entReference);  entText=entReference.getFirstChild();  assertNotNull("entTextNotNull",entText);{    boolean success=false;    try {      ((CharacterData)entText).setData("newData");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  public boolean isMutable(){  return mutable;}  }
class C{  public short itemAt(int pos){  if (pos < 0 || pos > state.length) {    throw new IndexOutOfBoundsException();  }  for (; iter <= pos; ++iter) {    int r=random.nextInt(state.length - iter) + iter;    short tmp=state[r];    state[r]=state[iter];    state[iter]=tmp;  }  return state[pos];}  }
class C{  public R visitACI(ACIPropertyDefinition pd,P p){  return visitUnknown(pd,p);}  }
class C{  public void shutdown(){  suspended.set(true);  shutdown.set(true);synchronized (sleeper) {    sleeper.notify();  }  try {    join();  } catch (  InterruptedException ex) {  }  StateMachineTest.shutdown(reader);}  }
class C{  protected void add(Object... components){  if (components == null) {    return;  }  for (  Object component : components) {    add(component);  }}  }
class C{  public void debug(int level,String msg){switch (level) {case 2:    debugInst.error(msg);  break;case 1:debugInst.warning(msg);break;default :debugInst.message(msg);}}  }
class C{  public void insert(Action a,int index){  JMenuItem mi=createActionComponent(a);  mi.setAction(a);  insert(mi,index);}  }
class C{  public void paint(Graphics g){}  }
class C{  public String createStandardContext(String parent,String path,String docBase,boolean xmlValidation,boolean xmlNamespaceAware) throws Exception {  StandardContext context=new StandardContext();  path=getPathStr(path);  context.setPath(path);  context.setDocBase(docBase);  context.setXmlValidation(xmlValidation);  context.setXmlNamespaceAware(xmlNamespaceAware);  ContextConfig contextConfig=new ContextConfig();  context.addLifecycleListener(contextConfig);  ObjectName pname=new ObjectName(parent);  ObjectName deployer=new ObjectName(pname.getDomain() + ":type=Deployer,host=" + pname.getKeyProperty("host"));  if (mserver.isRegistered(deployer)) {    String contextName=context.getName();    mserver.invoke(deployer,"addServiced",new Object[]{contextName},new String[]{"java.lang.String"});    String configPath=(String)mserver.getAttribute(deployer,"configBaseName");    String baseName=context.getBaseName();    File configFile=new File(new File(configPath),baseName + ".xml");    if (configFile.isFile()) {      context.setConfigFile(configFile.toURI().toURL());    }    mserver.invoke(deployer,"manageApp",new Object[]{context},new String[]{"org.apache.catalina.Context"});    mserver.invoke(deployer,"removeServiced",new Object[]{contextName},new String[]{"java.lang.String"});  } else {    log.warn("Deployer not found for " + pname.getKeyProperty("host"));    Service service=getService(pname);    Engine engine=service.getContainer();    Host host=(Host)engine.findChild(pname.getKeyProperty("host"));    host.addChild(context);  }  return context.getObjectName().toString();}  }
class C{  private int defaultThreadID(){  long tid=Thread.currentThread().getId();  if (tid < MIN_SEQUENTIAL_THREAD_ID) {    return (int)tid;  } else {    Integer id=threadIds.get();    if (id == null) {      id=nextThreadId.getAndIncrement();      threadIds.set(id);    }    return id;  }}  }
class C{  public CommandManager(Map env) throws CLIException {  init(env);}  }
class C{  public java.lang.String toString(boolean includeNS,boolean declareNS){  StringBuffer xml=new StringBuffer(3000);  String NS="";  String appendNS="";  if (declareNS)   NS=sc.assertionDeclareStr;  if (includeNS)   appendNS="saml:";  xml.append("<").append(appendNS).append("NameIdentifier").append(NS);  if ((_nameQualifier != null) && (!(_nameQualifier.length() == 0))) {    xml.append(" ").append("NameQualifier").append("=\"").append(_nameQualifier).append("\"");  }  if ((_format != null) && (!(_format.length() == 0))) {    xml.append(" ").append("Format").append("=\"").append(_format).append("\"");  }  xml.append(sc.RIGHT_ANGLE).append(_name);  xml.append(SAMLUtilsCommon.makeEndElementTagXML("NameIdentifier",includeNS));  return xml.toString();}  }
class C{  public static void main(String[] args){  if ((args == null) || (args.length != 1)) {    System.err.println("Invalid parameter.");    System.err.println("Expected parameter : <text_tobe_encoded>");    System.exit(-1);  }  try {    System.out.println((String)AccessController.doPrivileged(new EncodeAction(args[0])));    System.exit(0);  } catch (  Exception e) {    e.printStackTrace();    System.exit(-1);  }}  }
class C{  public void addLine(String line){  int index=line.indexOf(":");  if (index == -1) {    addLenient("",line);  } else {    addLenient(line.substring(0,index),line.substring(index + 1));  }}  }
class C{  public boolean isSubclassOf(QualifiedClassName qualifiedClassname){  if (qualifiedClassname == null)   return false;  if (superclasses == null)   determineSuperclasses();  if (getInternalName() == qualifiedClassname)   return true;  return superclasses.contains(qualifiedClassname.getID());}  }
class C{  public static Long valueOf(String string,int radix) throws NumberFormatException {  return valueOf(parseLong(string,radix));}  }
class C{  public PlaLineInt mirror_vertical(PlaPointInt p_pole){  PlaPointInt new_a=point_b.mirror_vertical(p_pole);  PlaPointInt new_b=point_a.mirror_vertical(p_pole);  return new PlaLineInt(new_a,new_b);}  }
class C{  public LDAPException(int resultCode,LocalizableMessage errorMessage,LocalizableMessage message,Throwable cause){  super(message,cause);  this.resultCode=resultCode;  this.errorMessage=errorMessage;  matchedDN=null;}  }
class C{  private static Exception extractException(Exception e){  while (e instanceof PrivilegedActionException) {    e=((PrivilegedActionException)e).getException();  }  return e;}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.nist.gov";  String localName="invalidlocalname";  Document doc;  NodeList elementList;  Element testAddr;  Attr attribute;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagName("emp:address");  testAddr=(Element)elementList.item(0);  assertNotNull("empAddrNotNull",testAddr);  attribute=testAddr.getAttributeNodeNS(namespaceURI,localName);  assertNull("throw_Null",attribute);}  }
class C{  private void initClusterMemberMap() throws Exception {  Set<String> serverIDs=serverConfig.getServerIDsInLocalSite();  for (  String serverID : serverIDs) {    String serverURL=serverConfig.getServerFromID(serverID);    if ((serverID == null) || (serverURL == null)) {      continue;    }    clusterMemberMap.putIfAbsent(serverURL,serverID);  }}  }
class C{  public int decode(String data,OutputStream out) throws IOException {  byte b1, b2, b3, b4;  int length=0;  int end=data.length();  while (end > 0) {    if (!ignore(data.charAt(end - 1))) {      break;    }    end--;  }  int i=0;  int finish=end - 4;  i=nextI(data,i,finish);  while (i < finish) {    b1=decodingTable[data.charAt(i++)];    i=nextI(data,i,finish);    b2=decodingTable[data.charAt(i++)];    i=nextI(data,i,finish);    b3=decodingTable[data.charAt(i++)];    i=nextI(data,i,finish);    b4=decodingTable[data.charAt(i++)];    if ((b1 | b2 | b3| b4) < 0) {      throw new IOException("invalid characters encountered in base64 data");    }    out.write((b1 << 2) | (b2 >> 4));    out.write((b2 << 4) | (b3 >> 2));    out.write((b3 << 6) | b4);    length+=3;    i=nextI(data,i,finish);  }  length+=decodeLastBlock(out,data.charAt(end - 4),data.charAt(end - 3),data.charAt(end - 2),data.charAt(end - 1));  return length;}  }
class C{  public static int randomNumber(int min,int max){  return ThreadLocalRandom.current().nextInt(min,max);}  }
class C{  public boolean isStreaming(){  return false;}  }
class C{  private static void arcToBezier(Path2D p,double cx,double cy,double a,double b,double e1x,double e1y,double theta,double start,double sweep){  int numSegments=Math.abs((int)Math.ceil(sweep * 4 / Math.PI));  double eta1=start;  double cosTheta=Math.cos(theta);  double sinTheta=Math.sin(theta);  double cosEta1=Math.cos(eta1);  double sinEta1=Math.sin(eta1);  double ep1x=(-a * cosTheta * sinEta1) - (b * sinTheta * cosEta1);  double ep1y=(-a * sinTheta * sinEta1) + (b * cosTheta * cosEta1);  double anglePerSegment=sweep / numSegments;  for (int i=0; i < numSegments; i++) {    double eta2=eta1 + anglePerSegment;    double sinEta2=Math.sin(eta2);    double cosEta2=Math.cos(eta2);    double e2x=cx + (a * cosTheta * cosEta2) - (b * sinTheta * sinEta2);    double e2y=cy + (a * sinTheta * cosEta2) + (b * cosTheta * sinEta2);    double ep2x=-a * cosTheta * sinEta2 - b * sinTheta * cosEta2;    double ep2y=-a * sinTheta * sinEta2 + b * cosTheta * cosEta2;    double tanDiff2=Math.tan((eta2 - eta1) / 2);    double alpha=Math.sin(eta2 - eta1) * (Math.sqrt(4 + (3 * tanDiff2 * tanDiff2)) - 1) / 3;    double q1x=e1x + alpha * ep1x;    double q1y=e1y + alpha * ep1y;    double q2x=e2x - alpha * ep2x;    double q2y=e2y - alpha * ep2y;    p.curveTo((float)q1x,(float)q1y,(float)q2x,(float)q2y,(float)e2x,(float)e2y);    eta1=eta2;    e1x=e2x;    e1y=e2y;    ep1x=ep2x;    ep1y=ep2y;  }}  }
class C{  private void readHheaTable() throws java.io.IOException {  int table_location[];  table_location=tables.get("hhea");  if (table_location == null) {    if (fileName != null) {      throw new IOException("table.1.does.not.exist.in.2").setMessageParams("hhea",fileName);    } else {      throw new IOException("table.1.does.not.exist").setMessageParams("hhea");    }  }  raf.seek(table_location[0] + 4);  hhea=new HorizontalHeader();  hhea.Ascender=raf.readShort();  hhea.Descender=raf.readShort();  hhea.LineGap=raf.readShort();  hhea.advanceWidthMax=raf.readUnsignedShort();  hhea.minLeftSideBearing=raf.readShort();  hhea.minRightSideBearing=raf.readShort();  hhea.xMaxExtent=raf.readShort();  hhea.caretSlopeRise=raf.readShort();  hhea.caretSlopeRun=raf.readShort();  raf.skipBytes(12);  hhea.numberOfHMetrics=raf.readUnsignedShort();}  }
class C{  LibPadstack(String p_name,int p_no,ShapeConvex[] p_shapes,boolean p_attach_allowed,boolean p_placed_absolute){  pads_no=p_no;  pads_name=p_name;  shapes=p_shapes;  attach_allowed=p_attach_allowed;  placed_absolute=p_placed_absolute;}  }
class C{  public boolean isSignatureValid(){  if (signed & !validationDone) {    valid=SAMLUtils.checkSignatureValid(xmlString,ASSERTION_ID_ATTRIBUTE,_issuer);    validationDone=true;  }  return valid;}  }
class C{  protected static byte[] readAll(InputStream in) throws IOException {  ByteArrayOutputStream outputStream=new ByteArrayOutputStream();  byte[] buf=new byte[READ_BUFFER_LENGTH];  int read;  while ((read=in.read(buf,0,READ_BUFFER_LENGTH)) != -1) {    outputStream.write(buf,0,read);  }  return outputStream.toByteArray();}  }
class C{  @Override public void forceResort(){  updateDataArray();  fireTableDataChanged();}  }
class C{  public void addRestrictedDomains(Collection<String> domainNames){  if (domainNames == null) {    return;  }  for (  String domainName : domainNames) {    addRestrictedDomain(domainName);  }}  }
class C{  public ExportException(String s){  super(s);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.NameIdentifierMappingResponseElement createNameIdentifierMappingResponseElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.NameIdentifierMappingResponseElementImpl();}  }
class C{  public SimplexNoiseGenerator(World world){  this(new Random(world.getSeed()));}  }
class C{  public void enableDragItem(@NonNull ItemTouchHelper itemTouchHelper){  enableDragItem(itemTouchHelper,NO_TOGGLE_VIEW,true);}  }
class C{  public static Builder createBuilder(AbstractManagedObjectDefinition<?,?> d,String propertyName){  return new Builder(d,propertyName);}  }
class C{  public static QueryExp leq(ValueExp v1,ValueExp v2){  return new BinaryRelQueryExp(LE,v1,v2);}  }
class C{  @Override public int available(){  return lastValid - pos;}  }
class C{  public static AppConfigurationEntry[] parseValues(String xmlValue){  if (debug.messageEnabled()) {    debug.message("AuthConfigUtil.AppConfigurationEntry, xml=" + xmlValue);  }  Document document=XMLUtils.toDOMDocument(xmlValue,debug);  if (document == null) {    AppConfigurationEntry[] entries=new AppConfigurationEntry[0];    return entries;  }  Element valuePair=document.getDocumentElement();  NodeList children=valuePair.getChildNodes();  final int number=children.getLength();  AppConfigurationEntry[] entries=new AppConfigurationEntry[number];  for (int i=0; i < number; i++) {    entries[i]=processValue(children.item(i));  }  return entries;}  }
class C{  private boolean[] correctBits(boolean[] rawbits) throws FormatException {  GenericGF gf;  int codewordSize;  if (ddata.getNbLayers() <= 2) {    codewordSize=6;    gf=GenericGF.AZTEC_DATA_6;  } else   if (ddata.getNbLayers() <= 8) {    codewordSize=8;    gf=GenericGF.AZTEC_DATA_8;  } else   if (ddata.getNbLayers() <= 22) {    codewordSize=10;    gf=GenericGF.AZTEC_DATA_10;  } else {    codewordSize=12;    gf=GenericGF.AZTEC_DATA_12;  }  int numDataCodewords=ddata.getNbDatablocks();  int numCodewords=rawbits.length / codewordSize;  if (numCodewords < numDataCodewords) {    throw FormatException.getFormatInstance();  }  int offset=rawbits.length % codewordSize;  int numECCodewords=numCodewords - numDataCodewords;  int[] dataWords=new int[numCodewords];  for (int i=0; i < numCodewords; i++, offset+=codewordSize) {    dataWords[i]=readCode(rawbits,offset,codewordSize);  }  try {    ReedSolomonDecoder rsDecoder=new ReedSolomonDecoder(gf);    rsDecoder.decode(dataWords,numECCodewords);  } catch (  ReedSolomonException ex) {    throw FormatException.getFormatInstance(ex);  }  int mask=(1 << codewordSize) - 1;  int stuffedBits=0;  for (int i=0; i < numDataCodewords; i++) {    int dataWord=dataWords[i];    if (dataWord == 0 || dataWord == mask) {      throw FormatException.getFormatInstance();    } else     if (dataWord == 1 || dataWord == mask - 1) {      stuffedBits++;    }  }  boolean[] correctedBits=new boolean[numDataCodewords * codewordSize - stuffedBits];  int index=0;  for (int i=0; i < numDataCodewords; i++) {    int dataWord=dataWords[i];    if (dataWord == 1 || dataWord == mask - 1) {      Arrays.fill(correctedBits,index,index + codewordSize - 1,dataWord > 1);      index+=codewordSize - 1;    } else {      for (int bit=codewordSize - 1; bit >= 0; --bit) {        correctedBits[index++]=(dataWord & (1 << bit)) != 0;      }    }  }  return correctedBits;}  }
class C{  public static void reorderVisually(byte[] levels,int levelStart,Object[] objects,int objectStart,int count){  BidiBase.reorderVisually(levels,levelStart,objects,objectStart,count);}  }
class C{  public String toString(){  return "CreationTemplate: " + getName() + " { Required "+ m_required+ " Optional "+ m_optional+ " Validation "+ m_validated+ " Naming Attribute "+ m_namingAttribute+ " }";}  }
class C{  public void testConstrStringException(){  String a="-238768.787678287a+10";  try {    BigDecimal bd=new BigDecimal(a);    fail("NumberFormatException has not been caught: " + bd.toString());  } catch (  NumberFormatException e) {  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String badString;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("acronym");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();{    boolean success=false;    try {      badString=child.substringData(-5,3);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INDEX_SIZE_ERR);    }    assertTrue("throws_INDEX_SIZE_ERR",success);  }}  }
class C{  public void removeQualifiers(){  PropertyOptions opts=getOptions();  opts.setHasQualifiers(false);  opts.setHasLanguage(false);  opts.setHasType(false);  qualifier=null;}  }
class C{  @DataProvider(name="createParentAndRDNTestData") public Object[][] createParentAndRDNTestData(){  return new Object[][]{{"",null,null},{"dc=com","","dc=com"},{"dc=opendj,dc=com","dc=com","dc=opendj"},{"dc=world,dc=opendj,dc=com","dc=opendj,dc=com","dc=world"},{"dc=hello,dc=world,dc=opendj,dc=com","dc=world,dc=opendj,dc=com","dc=hello"}};}  }
class C{  public static boolean isObtuseAnglePointAndLine(PointF point,PointF linePoint1,PointF linePoint2){  float p_l1, p_l2, l1_l2;  p_l1=getDistanceBetweenTwoPoints(point,linePoint1);  p_l2=getDistanceBetweenTwoPoints(point,linePoint2);  l1_l2=getDistanceBetweenTwoPoints(linePoint1,linePoint2);  return ((p_l1 * p_l1 + l1_l2 * l1_l2) < p_l2 * p_l2) || ((p_l2 * p_l2 + l1_l2 * l1_l2) < p_l1 * p_l1);}  }
class C{  private int shortCircuitInternal(PluginOperation operation,String section){  try {    ShortCircuitRequestControl control=operation.getRequestControl(ShortCircuitRequestControl.DECODER);    if (control != null && section.equalsIgnoreCase(control.getSection())) {      return control.resultCode;    }  } catch (  Exception e) {    System.err.println("***** ERROR:  Could not decode short circuit " + "control value:  " + e);    e.printStackTrace();    return -1;  }  Integer resultCode=shortCircuits.get(operation.getOperationType() + "/" + section.toLowerCase());  if (resultCode != null) {    return resultCode;  }  return -1;}  }
class C{  private String cannonicalPage(String url){  String cannonical="";  if (url.startsWith(HTTP_PROTOCOL)) {    url=url.substring(HTTP_PROTOCOL.length());  } else   if (url.startsWith(HTTPS_PROTOCOL)) {    url=url.substring(HTTPS_PROTOCOL.length());  }  int urlLength=url.length();  for (int i=0; i < urlLength; i++) {    if (url.charAt(i) != '/')     cannonical+=url.charAt(i); else     break;  }  return cannonical;}  }
class C{  public final void testIdentityScopeStringIdentityScope() throws Exception {  IdentityScope scope=new IdentityScopeStub("my scope");  is=new IdentityScopeStub("Aleksei Semenov",scope);  assertNotNull(is);  assertEquals("Aleksei Semenov",is.getName());  assertEquals(scope.getName(),is.getScope().getName());}  }
class C{  public synchronized void put(K k,V v){  Reject.ifNull(k,v);  K previousValue=reverse.get(v);  if (previousValue != null) {    map.remove(previousValue);  }  map.put(k,v);  reverse.put(v,k);}  }
class C{  public boolean isOtherExecutable(){  return is(encodedPermission,OTHER_EXECUTABLE);}  }
class C{  public boolean isMember(SSOToken token) throws SSOException, PolicyException {  boolean userMatch=false;  DN userDN=null;  String userLocalDN=token.getPrincipal().getName();  String tokenID=token.getTokenID().toString();  if (debug.messageEnabled()) {    debug.message("LDAPUsers.isMember(): user local DN is " + userLocalDN);  }  for (  String valueDN : selectedRFCUserDNs) {    Boolean matchFound=SubjectEvaluationCache.isMember(tokenID,ldapServer,valueDN);    if (matchFound != null) {      debug.message("LDAPUsers.isMember():Got membership from cache of {} in subject user {} : {}",userLocalDN,valueDN,matchFound);      if (matchFound) {        return true;      } else {        continue;      }    }    if (debug.messageEnabled()) {      debug.message("LDAPUsers:isMember():entry for " + valueDN + " not in subject evaluation cache, fetching from "+ "directory server.");    }    if (userDN == null) {      userDN=getUserDN(token);      if (userDN == null) {        if (debug.messageEnabled()) {          debug.message("LDAPUsers.isMember(): User {} is not found in the directory",token.getPrincipal().getName());        }        return false;      }    }    if (userDN.equals(DN.valueOf(valueDN))) {      userMatch=true;    }    if (debug.messageEnabled()) {      debug.message("LDAPUsers.isMember:adding entry " + tokenID + " "+ ldapServer+ " "+ valueDN+ " "+ userMatch+ " in subject evaluation cache.");    }    SubjectEvaluationCache.addEntry(tokenID,ldapServer,valueDN,userMatch);    if (!PolicyEvaluator.ssoListenerRegistry.containsKey(tokenID)) {      try {        token.addSSOTokenListener(PolicyEvaluator.ssoListener);        PolicyEvaluator.ssoListenerRegistry.put(tokenID,PolicyEvaluator.ssoListener);        debug.message("LDAPUsers.isMember(): sso listener added");      } catch (      SSOTokenListenersUnsupportedException ex) {        debug.message("LDAPUsers.isMember(): could not add sso listener: {}",ex.getMessage());      }    }    if (userMatch) {      break;    }  }  if (!userMatch) {    debug.message("LDAPUsers.isMember(): User {} is not a member of this LDAPUsers object",userLocalDN);  } else {    debug.message("LDAPUsers.isMember(): User {} is a member of this LDAPUsers object",userLocalDN);  }  return userMatch;}  }
class C{  public boolean isEncodeBlanks(){  return this.encodeBlanks;}  }
class C{  public DiscoveryException(String rbName,String errorCode,Object[] args){  super(rbName,errorCode,args);}  }
class C{  public final void testRSAOtherPrimeInfo02(){  try {    new RSAOtherPrimeInfo(null,BigInteger.valueOf(2L),BigInteger.valueOf(3L));    fail("Expected NPE not thrown");  } catch (  NullPointerException e) {  }}  }
class C{  public void processBye(RequestEvent requestEvent,ServerTransaction serverTransactionId){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  System.out.println("sip provider: " + sipProvider);  Request request=requestEvent.getRequest();  try {    System.out.println("shootme:  got a bye sending OK.");    Response response=messageFactory.createResponse(200,request,null,null);    serverTransactionId.sendResponse(response);    System.out.println("Dialog State is " + serverTransactionId.getDialog().getState());  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  public static boolean parseXML(InputStream in,DefaultHandler handler) throws Exception {  XMLReader parser=XMLReaderFactory.createXMLReader();  InputSource isrc=new InputSource(new BufferedInputStream(in));  isrc.setSystemId("jedit.jar");  parser.setContentHandler(handler);  parser.setDTDHandler(handler);  parser.setEntityResolver(handler);  parser.setErrorHandler(handler);  parser.parse(isrc);  IOUtilities.closeQuietly(in);  return false;}  }
class C{  public void testValueOfPosZeroScale(){  long a=98374823947823578L;  BigDecimal aNumber=BigDecimal.valueOf(a);  String result="98374823947823578";  assertTrue("incorrect value",aNumber.toString().equals(result));}  }
class C{  public boolean isEmpty(){  return map.isEmpty();}  }
class C{  public org.w3c.dom.Document encryptAndReplace(org.w3c.dom.Document doc,org.w3c.dom.Element element,java.lang.String secretKeyAlg,int keyStrength,java.lang.String certAlias,int kekStrength) throws EncryptionException {  return encryptAndReplace(doc,element,secretKeyAlg,keyStrength,keyProvider.getPublicKey(certAlias),kekStrength,null,false);}  }
class C{  private void init(SnmpMib myMib){  if (debug == null) {    final Key<Debug> key=Key.get(Debug.class,Names.named(CoreTokenConstants.CTS_MONITOR_DEBUG));    debug=InjectorHolder.getInstance(key);  }  final List<OperationEntry> operationEntries=new ArrayList<OperationEntry>();  final List<TokenEntry> tokenEntries=new ArrayList<TokenEntry>();  for (  Enum e : crudItems) {    final OperationEntry entry=new OperationEntry(myMib);    entry.OperationType=e.name();    entry.OperationTableIndex=(long)e.ordinal() + 1;    operationEntries.add(entry);  }  for (  Enum e : tokenItems) {    final TokenEntry entry=new TokenEntry(myMib);    entry.TokenType=e.name();    entry.TokenTableIndex=(long)e.ordinal() + 1;    tokenEntries.add(entry);  }  try {    for (    OperationEntry ce : operationEntries) {      OperationTable.addEntry(ce);    }    for (    TokenEntry te : tokenEntries) {      TokenTable.addEntry(te);    }    createCRUDOperationsPerTokenTypeTable(myMib,CtsCRUDOperationsPerTokenTypeTable,operationEntries,tokenEntries);    createCRUDOperationsTable(myMib,CtsCRUDOperationsTable,operationEntries);    createTokenOperationsTable(myMib,CtsTokenOperationsTable,tokenEntries);  } catch (  SnmpStatusException e) {    if (debug.messageEnabled()) {      debug.error("Unable to set up CTS Monitoring tables. CTS monitoring not available.",e);    }  }}  }
class C{  public void removeToTag(){  parameters.delete(ParameterNames.TO_TAG);}  }
class C{  private static String readQuotedDescriptor(final SubstringReader reader,final boolean allowCompatChars) throws DecodeException {  int length=0;  reader.skipWhitespaces();  try {    char c=reader.read();    if (c != '\'') {      throw DecodeException.error(ERR_ATTR_SYNTAX_EXPECTED_QUOTE_AT_POS1.get(reader.pos() - 1,c));    }    reader.mark();    while ((c=reader.read()) != '\'') {      if (length == 0 && !isAlpha(c)) {        throw DecodeException.error(ERR_ATTR_SYNTAX_ILLEGAL_CHAR_IN_STRING_OID1.get(c,reader.pos() - 1));      }      if (!isKeyChar(c,allowCompatChars)) {        throw DecodeException.error(ERR_ATTR_SYNTAX_ILLEGAL_CHAR_IN_STRING_OID1.get(c,reader.pos() - 1));      }      length++;    }    reader.reset();    final String descr=reader.read(length);    reader.read();    return descr;  } catch (  final StringIndexOutOfBoundsException e) {    throw DecodeException.error(ERR_ATTR_SYNTAX_TRUNCATED_VALUE1.get());  }}  }
class C{  @Override public void addField(FieldKey genericKey,String value) throws KeyNotFoundException, FieldDataInvalidException {  if ((genericKey == FieldKey.TRACK) || (genericKey == FieldKey.TRACK_TOTAL) || (genericKey == FieldKey.DISC_NO)|| (genericKey == FieldKey.DISC_TOTAL)) {    setField(genericKey,value);  } else {    TagField tagfield=createField(genericKey,value);    addField(tagfield);  }}  }
class C{  public void testGetAttributeNodeNS1() throws Throwable {  String namespaceURI="http://www.nist.gov";  String localName="invalidlocalname";  Document doc;  NodeList elementList;  Element testAddr;  Attr attribute;  doc=(Document)load("staffNS",builder);  elementList=doc.getElementsByTagName("emp:address");  testAddr=(Element)elementList.item(0);  assertNotNull("empAddrNotNull",testAddr);  attribute=testAddr.getAttributeNodeNS(namespaceURI,localName);  assertNull("throw_Null",attribute);}  }
class C{  public void grabFocus(){  requestFocus();}  }
class C{  public WeakReference(T r){  super(r,null);}  }
class C{  public static com.liferay.blade.samples.servicebuilder.model.Foo updateFoo(com.liferay.blade.samples.servicebuilder.model.Foo foo){  return getService().updateFoo(foo);}  }
class C{  public static int isValid(){  try {    Bootstrap.load();  } catch (  ConfiguratorException ex) {    System.err.println(ex.getL10NMessage(Locale.getDefault()));    System.exit(1);  }catch (  Exception ex) {    System.out.println(bundle.getString("message.error.amconfig") + " " + System.getProperty(Bootstrap.JVM_OPT_BOOTSTRAP));    return 1;  }  return isVersionValid();}  }
class C{  @SuppressWarnings("unchecked") private <T>void addPropertyValue(ManagedObjectDefinition<?,?> d,PropertyDefinition<T> pd,String s) throws ArgumentException {  T value;  try {    value=pd.decodeValue(s);  } catch (  PropertyException e) {    throw ArgumentExceptionFactory.adaptPropertyException(e,d);  }  Collection<T> values=(Collection<T>)properties.get(pd);  if (values == null) {    values=new LinkedList<>();  }  values.add(value);  if (values.size() > 1 && !pd.hasOption(PropertyOption.MULTI_VALUED)) {    PropertyException e=PropertyException.propertyIsSingleValuedException(pd);    throw ArgumentExceptionFactory.adaptPropertyException(e,d);  }  properties.put(pd,values);}  }
class C{  public TreeModelEvent(Object source,TreePath path){  super(source);  this.path=path;  this.childIndices=new int[0];}  }
class C{  public boolean ready() throws IOException {synchronized (lock) {    ensureOpen();    if (skipLF) {      if (nextChar >= nChars && in.ready()) {        fill();      }      if (nextChar < nChars) {        if (cb[nextChar] == '\n')         nextChar++;        skipLF=false;      }    }    return (nextChar < nChars) || in.ready();  }}  }
class C{  private final boolean isSpecialPath(final String path){  return !allowSpecialPaths && (path.toUpperCase(Locale.ENGLISH).startsWith("/WEB-INF") || path.toUpperCase(Locale.ENGLISH).startsWith("/META-INF"));}  }
class C{  private void updateAttributeStrings(){  if (getEndToken() != null) {    getEndToken().removeAttributeString();  }  StringBuffer buff=new StringBuffer();  ArrayList attributes=getAttributes();  if (attributes != null && attributes.size() > 0) {    for (int i=0; i < attributes.size(); i++) {      XMLElementAttribute attr=(XMLElementAttribute)attributes.get(i);      buff.append(attr.getName()).append("=").append(attr.getValue()).append(" ");    }  }  getStartToken().updateAttributeString(buff.toString());}  }
class C{  public IStoreFactory findStoreFactory(Class<?> aClass){  return findStoreFactory(aClass.getName());}  }
class C{  public UCSReader(InputStream inputStream,int size,short encoding){  fInputStream=inputStream;  fBuffer=new byte[size];  fEncoding=encoding;}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  try {    logger.info("shootme: got an ACK! Sending  a BYE");    logger.info("Dialog State = " + dialog.getState());    Dialog dialog=serverTransaction.getDialog();    AbstractRouterTestCase.assertTrue("Dialog mismatch",dialog == this.dialog);    SipProvider provider=(SipProvider)requestEvent.getSource();    AbstractRouterTestCase.assertTrue("Provider mismatch",sipProvider == provider);    Request byeRequest=dialog.createRequest(Request.BYE);    ClientTransaction ct=provider.getNewClientTransaction(byeRequest);    dialog.sendRequest(ct);  } catch (  Exception ex) {    TestHarness.fail(ex.getMessage());  }}  }
class C{  protected void unloadZone(View zone){  zone.removeAll();}  }
class C{  public Obligation createObligation(String xml) throws XACMLException {  Object obj=XACMLSDKUtils.getObjectInstance(XACMLConstants.REQUEST,xml);  if (obj == null) {    return new ObligationImpl(xml);  } else {    return (Obligation)obj;  }}  }
class C{  public void write(ByteArrayOutputStream tagBuffer){  boolean unsynchronization;  logger.config("Writing frame to file:" + getIdentifier());  ByteBuffer headerBuffer=ByteBuffer.allocate(FRAME_HEADER_SIZE);  ByteArrayOutputStream bodyOutputStream=new ByteArrayOutputStream();  ((AbstractID3v2FrameBody)frameBody).write(bodyOutputStream);  byte[] bodyBuffer=bodyOutputStream.toByteArray();  unsynchronization=TagOptionSingleton.getInstance().isUnsyncTags() && ID3Unsynchronization.requiresUnsynchronization(bodyBuffer);  if (unsynchronization) {    bodyBuffer=ID3Unsynchronization.unsynchronize(bodyBuffer);    logger.config("bodybytebuffer:sizeafterunsynchronisation:" + bodyBuffer.length);  }  if (getIdentifier().length() == 3) {    identifier=identifier + ' ';  }  headerBuffer.put(Utils.getDefaultBytes(getIdentifier(),"ISO-8859-1"),0,FRAME_ID_SIZE);  int size=bodyBuffer.length;  logger.fine("Frame Size Is:" + size);  headerBuffer.put(ID3SyncSafeInteger.valueToBuffer(size));  headerBuffer.put(statusFlags.getWriteFlags());  ((ID3v24Frame.EncodingFlags)encodingFlags).unsetNonStandardFlags();  if (unsynchronization) {    ((ID3v24Frame.EncodingFlags)encodingFlags).setUnsynchronised();  } else {    ((ID3v24Frame.EncodingFlags)encodingFlags).unsetUnsynchronised();  }  ((ID3v24Frame.EncodingFlags)encodingFlags).unsetCompression();  ((ID3v24Frame.EncodingFlags)encodingFlags).unsetDataLengthIndicator();  headerBuffer.put(encodingFlags.getFlags());  try {    tagBuffer.write(headerBuffer.array());    if (((EncodingFlags)encodingFlags).isEncryption()) {      tagBuffer.write(encryptionMethod);    }    if (((EncodingFlags)encodingFlags).isGrouping()) {      tagBuffer.write(groupIdentifier);    }    tagBuffer.write(bodyBuffer);  } catch (  IOException ioe) {    throw new RuntimeException(ioe);  }}  }
class C{  public Tasker addTask(Task task){  tasks.add(task);  lastAddedTask=task;  return this;}  }
class C{  public boolean isTrackingActiveSession(){  return session == null;}  }
class C{  public Enum asEnum(){  return this.searchScopeEnum;}  }
class C{  public boolean hasAccessType(EnumAccessType accessType){  return this.accessType == accessType;}  }
class C{  public static <V>int addDistinctList(List<V> sourceList,List<V> entryList){  if (sourceList == null || isEmpty(entryList)) {    return 0;  }  int sourceCount=sourceList.size();  for (  V entry : entryList) {    if (!sourceList.contains(entry)) {      sourceList.add(entry);    }  }  return sourceList.size() - sourceCount;}  }
class C{  public void handleBtnSearchRequest(RequestInvocationEvent event){  forwardTo();}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGetPost(request,response);}  }
class C{  public DNLock tryReadLockEntry(final DN entry){  return acquireLockFromCache(entry).tryReadLockEntry();}  }
class C{  @Override public final String toString(){  return name;}  }
class C{  public void abort() throws IOException {  completeEdit(this,false);}  }
class C{  @Override public void draw(java.awt.Graphics p_graphics,freert.graphics.GdiContext p_graphics_context,double p_intensity){  Color draw_color=java.awt.Color.WHITE;  double layer_visibility=p_graphics_context.get_layer_visibility(get_layer());  p_graphics_context.fill_area(get_shape(),p_graphics,draw_color,p_intensity * layer_visibility);  p_graphics_context.draw_boundary(get_shape(),0,draw_color,p_graphics,layer_visibility);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node commentNode;  String commentName;  String commentValue;  doc=(Document)load("staff",false);  elementList=doc.getChildNodes();  for (int indexN10040=0; indexN10040 < elementList.getLength(); indexN10040++) {    commentNode=(Node)elementList.item(indexN10040);    commentName=commentNode.getNodeName();    if (equals("#comment",commentName)) {      commentValue=commentNode.getNodeValue();      assertEquals("value"," This is comment number 1.",commentValue);    }  }}  }
class C{  public AgeFileFilter(Date cutoffDate,boolean acceptOlder){  this(cutoffDate.getTime(),acceptOlder);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("noMatch");  assertSize("elementGetElementsByTagNameNoMatchNoMatchAssert",0,elementList);}  }
class C{  Node(int symbol,int bits){  this.children=null;  this.symbol=symbol;  int b=bits & 0x07;  this.terminalBits=b == 0 ? 8 : b;}  }
class C{  public boolean is_null(){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("is_null",_opsClass);  DynValueOperations $self=(DynValueOperations)$so.servant;  try {    return $self.is_null();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public Dimension minimumLayoutSize(Container parent){  Dimension minimumSize=insetSize(parent);  if (parent.getComponentCount() > 0) {    Dimension childSize=getComponent(0).getMinimumSize();    minimumSize.width+=childSize.width;    minimumSize.height+=childSize.height;  }  return minimumSize;}  }
class C{  public Enumeration<String> names(){  return new NamesEnumerator(this);}  }
class C{  public void deleteStaticGroups(Set groupDNs) throws AMException, SSOException {  Iterator iter=groupDNs.iterator();  while (iter.hasNext()) {    String groupDN=(String)iter.next();    AMStaticGroup group=new AMStaticGroupImpl(token,groupDN);    group.delete();  }}  }
class C{  public boolean contains(DsnNetId p_net_id){  return nets.containsKey(p_net_id);}  }
class C{  public static Matrix4 tangoPoseToMatrix(TangoPoseData tangoPose){  Vector3 v=new Vector3(tangoPose.translation[0],tangoPose.translation[1],tangoPose.translation[2]);  Quaternion q=new Quaternion(tangoPose.rotation[3],tangoPose.rotation[0],tangoPose.rotation[1],tangoPose.rotation[2]);  q.conjugate();  Matrix4 m=new Matrix4();  m.setAll(v,new Vector3(1,1,1),q);  return m;}  }
class C{  public FrameBodyTKEY(){}  }
class C{  public boolean isDocOrdered(){  return m_exprObj.isDocOrdered();}  }
class C{  public void logEvent(String id,String[] data){  try {    LogMessageProvider provider=MessageProviderFactory.getProvider(LOG_PROVIDER);    LogRecord rec=provider.createLogRecord(id,data,ssoToken);    if (rec != null) {      AMAdminLog.getInstance().doLog(rec);    } else {      debug.error("AMModelBase.logEvent: missing log entry, " + id);    }  } catch (  IOException e) {    debug.error("AMModelBase.logEvent",e);  }}  }
class C{  public PAccessNetworkInfoHeader createPAccessNetworkInfoHeader(){  PAccessNetworkInfo accessNetworkInfo=new PAccessNetworkInfo();  return accessNetworkInfo;}  }
class C{  public FrameBodyTENC(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  public String toHostString(){  CharArrayBuffer buffer=new CharArrayBuffer(32);  buffer.append(this.hostname);  if (this.port != -1) {    buffer.append(':');    buffer.append(Integer.toString(this.port));  }  return buffer.toString();}  }
class C{  @Override protected Object clone() throws CloneNotSupportedException {  throw new CloneNotSupportedException();}  }
class C{  static int formatUnsignedInt(int val,int shift,char[] buf,int offset,int len){  int charPos=len;  int radix=1 << shift;  int mask=radix - 1;  do {    buf[offset + --charPos]=Integer.digits[val & mask];    val>>>=shift;  } while (val != 0 && charPos > 0);  return charPos;}  }
class C{  private void QuickSort2(Vector v,int lo0,int hi0){  int lo=lo0;  int hi=hi0;  if (hi0 > lo0) {    ElemTemplateElement midNode=(ElemTemplateElement)v.elementAt((lo0 + hi0) / 2);    while (lo <= hi) {      while ((lo < hi0) && (((ElemTemplateElement)v.elementAt(lo)).compareTo(midNode) < 0)) {        ++lo;      }      while ((hi > lo0) && (((ElemTemplateElement)v.elementAt(hi)).compareTo(midNode) > 0)) {        --hi;      }      if (lo <= hi) {        ElemTemplateElement node=(ElemTemplateElement)v.elementAt(lo);        v.setElementAt(v.elementAt(hi),lo);        v.setElementAt(node,hi);        ++lo;        --hi;      }    }    if (lo0 < hi) {      QuickSort2(v,lo0,hi);    }    if (lo < hi0) {      QuickSort2(v,lo,hi0);    }  }}  }
class C{  private void startChangeTimeHeartBeatPublishing(ConnectedRS rs){  long changeTimeHeartbeatInterval=config.getChangetimeHeartbeatInterval();  if (changeTimeHeartbeatInterval > 0) {    final String threadName="Replica DS(" + getServerId() + ") change time heartbeat publisher for domain \""+ getBaseDN()+ "\" to RS("+ rs.getServerId()+ ") at "+ rs.replicationServer;    ctHeartbeatPublisherThread=new CTHeartbeatPublisherThread(threadName,rs.session,changeTimeHeartbeatInterval,getServerId());    ctHeartbeatPublisherThread.start();  } else   if (logger.isTraceEnabled()) {    debugInfo("is not configured to send CSN heartbeat interval");  }}  }
class C{  public int nextOffset(float wrappingWidth,int offsetLimit,boolean requireNextWord){  int nextOffset=pos;  if (pos < limit) {    if (offsetLimit <= pos) {      throw new IllegalArgumentException("offsetLimit must be after current position");    }    int charAtMaxAdvance=measurer.getLineBreakIndex(pos,wrappingWidth);    if (charAtMaxAdvance == limit) {      nextOffset=limit;    } else     if (Character.isWhitespace(measurer.getChars()[charAtMaxAdvance - start])) {      nextOffset=breakIter.following(charAtMaxAdvance);    } else {      int testPos=charAtMaxAdvance + 1;      if (testPos == limit) {        breakIter.last();        nextOffset=breakIter.previous();      } else {        nextOffset=breakIter.preceding(testPos);      }      if (nextOffset <= pos) {        if (requireNextWord) {          nextOffset=pos;        } else {          nextOffset=Math.max(pos + 1,charAtMaxAdvance);        }      }    }  }  if (nextOffset > offsetLimit) {    nextOffset=offsetLimit;  }  return nextOffset;}  }
class C{  public Diode(BlockFace facingDirection,int delay,boolean state){  super(state ? Material.DIODE_BLOCK_ON : Material.DIODE_BLOCK_OFF);  setFacingDirection(facingDirection);  setDelay(delay);}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.LCNElement createLCNElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.LCNElementImpl();}  }
class C{  public ConnectionChangeRecordWriter(final Connection connection){  Reject.ifNull(connection);  this.connection=connection;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documenttypegetentitiestype.class,args);}  }
class C{  protected ErodingKeyedObjectPool(final KeyedObjectPool<K,V> keyedPool,final ErodingFactor erodingFactor){  if (keyedPool == null) {    throw new IllegalArgumentException("keyedPool must not be null.");  }  this.keyedPool=keyedPool;  this.erodingFactor=erodingFactor;}  }
class C{  public String toXMLString(){  StringBuilder xml=new StringBuilder(300);  xml.append("<?xml version=").append(QUOTE).append("1.0").append(QUOTE).append(" encoding=").append(QUOTE).append("UTF-8").append(QUOTE).append(" standalone=").append(QUOTE).append("yes").append(QUOTE).append("?>").append(NL);  xml.append("<RequestSet vers=").append(QUOTE).append(requestSetVersion).append(QUOTE).append(" svcid=").append(QUOTE).append(serviceID).append(QUOTE).append(" reqid=").append(QUOTE).append(requestSetID).append(QUOTE).append('>').append(NL);  for (  Request req : requestSet) {    xml.append("<Request");    if (req.getDtdID() != null) {      xml.append(" dtdid=").append(QUOTE).append(req.getDtdID()).append(QUOTE);    }    if (req.getSessionID() != null) {      xml.append(" sid=").append(QUOTE).append(req.getSessionID()).append(QUOTE);    }    xml.append('>');    xml.append(BEGIN_CDATA).append(req.getContent()).append(END_CDATA);    xml.append("</Request>").append(NL);  }  xml.append("</RequestSet>");  return (xml.toString());}  }
class C{  protected void installListeners(){  focusListener=createFocusListener();  keyListener=createKeyListener();  mouseInputListener=createMouseInputListener();  table.addFocusListener(focusListener);  table.addKeyListener(keyListener);  table.addMouseListener(mouseInputListener);  table.addMouseMotionListener(mouseInputListener);  table.addPropertyChangeListener(getHandler());  if (isFileList) {    table.getSelectionModel().addListSelectionListener(getHandler());  }}  }
class C{  public static GifImageData createGif(byte[] bytes){  byte[] imageType=readImageType(bytes);  if (imageTypeIs(imageType,gif)) {    GifImageData image=new GifImageData(bytes);    GifImageHelper.processImage(image);    return image;  }  throw new IllegalArgumentException("GIF image expected.");}  }
class C{  private static void initCharTables(){  xmlNameChars=new boolean[0x0100];  xmlNameStartChars=new boolean[0x0100];  for (int i=0; i < xmlNameChars.length; i++) {    char ch=(char)i;    xmlNameStartChars[ch]=ch == ':' || ('A' <= ch && ch <= 'Z') || ch == '_' || ('a' <= ch && ch <= 'z') || (0xC0 <= ch && ch <= 0xD6) || (0xD8 <= ch && ch <= 0xF6) || (0xF8 <= ch && ch <= 0xFF);    xmlNameChars[ch]=xmlNameStartChars[ch] || ch == '-' || ch == '.' || ('0' <= ch && ch <= '9') || ch == 0xB7;  }}  }
class C{  void appendNSDeclaration(int prefixIndex,int namespaceIndex,boolean isID){  final int namespaceForNamespaces=m_nsNames.stringToIndex("http://www.w3.org/2000/xmlns/");  int w0=NAMESPACE_NODE | (m_nsNames.stringToIndex("http://www.w3.org/2000/xmlns/") << 16);  int w1=currentParent;  int w2=0;  int w3=namespaceIndex;  int ourslot=appendNode(w0,w1,w2,w3);  previousSibling=ourslot;  previousSiblingWasParent=false;  return;}  }
class C{  public void beginMonitoringOf(final InetSocketAddress socketAddress,final int inode){  candidateSockets.beginMonitoringSocketIdentifier(socketAddress,fromInet4SocketAddressAndInode(socketAddress,inode));}  }
class C{  public static int configMain(final String[] args,final OutputStream outStream,final OutputStream errStream){  final ConfigureDS tool=new ConfigureDS(args,outStream,errStream);  return tool.run();}  }
class C{  public void showNextButton(boolean animate){  if (animate) {    mButtonStyle=STYLE_DONE;    toggle();  } else {    mButtonStyle=STYLE_NEXT;    setImageDrawable(mNextDrawable);  }}  }
class C{  public MailService(){}  }
class C{  public void keyPressed(KeyEvent e){}  }
class C{  public boolean addEdge(DigraphNode node){  if (outNodes.contains(node)) {    return false;  }  outNodes.add(node);  node.inNodes.add(this);  node.incrementInDegree();  return true;}  }
class C{  public boolean containsAttribute(Object name,Object value){  return value.equals(getAttribute(name));}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  String schemaType=getStringOptionValue(IArgument.SCHEMA_TYPE);  String serviceName=getStringOptionValue(IArgument.SERVICE_NAME);  String subSchemaName=getStringOptionValue(IArgument.SUBSCHEMA_NAME);  List attributeSchemaNames=(List)rc.getOption(IArgument.ATTRIBUTE_SCHEMA);  ServiceSchema ss=getServiceSchema();  IOutput outputWriter=getOutputWriter();  String attributeSchemaName=null;  try {    for (Iterator i=attributeSchemaNames.iterator(); i.hasNext(); ) {      attributeSchemaName=(String)i.next();      String[] params={serviceName,schemaType,subSchemaName,attributeSchemaName};      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_REMOVE_ATTRIBUTE_SCHEMA",params);      ss.removeAttributeSchema(attributeSchemaName);      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_REMOVE_ATTRIBUTE_SCHEMA",params);      outputWriter.printlnMessage(MessageFormat.format(getResourceString("remove-attribute-schema-succeed"),(Object[])params));    }  } catch (  SSOException e) {    String[] args={serviceName,schemaType,subSchemaName,attributeSchemaName,e.getMessage()};    debugError("RemoveAttributeSchemas.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_REMOVE_ATTRIBUTE_SCHEMA",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={serviceName,schemaType,subSchemaName,attributeSchemaName,e.getMessage()};    debugError("RemoveAttributeSchemas.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_REMOVE_ATTRIBUTE_SCHEMA",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public int indexOf(Node elem){  runTo(-1);  if (null == m_map)   return -1;  for (int i=0; i < m_firstFree; i++) {    Node node=m_map[i];    if ((null != node) && node.equals(elem))     return i;  }  return -1;}  }
class C{  public static int startWindowsService(OutputStream outStream,OutputStream errStream){  NullOutputStream.wrapOrNullStream(outStream);  PrintStream err=NullOutputStream.wrapOrNullStream(errStream);  JDKLogging.disableLogging();  String serviceName=ConfigureWindowsService.getServiceName();  if (serviceName == null) {    printWrappedText(err,ERR_WINDOWS_SERVICE_NOT_FOUND.get());    return SERVICE_NOT_FOUND;  }  String[] cmd;  if (hasUAC()) {    cmd=new String[]{ConfigureWindowsService.getLauncherBinaryFullPath(),ConfigureWindowsService.LAUNCHER_OPTION,ConfigureWindowsService.getLauncherAdministratorBinaryFullPath(),ConfigureWindowsService.LAUNCHER_OPTION,"net","start",serviceName};  } else {    cmd=new String[]{"net","start",serviceName};  }  try {    return Runtime.getRuntime().exec(cmd).waitFor() == 0 ? SERVICE_START_SUCCESSFUL : SERVICE_START_ERROR;  } catch (  Throwable t) {    printWrappedText(err,ERR_WINDOWS_SERVICE_START_ERROR.get());    printWrappedText(err,"Exception:" + t);    return SERVICE_START_ERROR;  }}  }
class C{  public JKHttpException(final String message,final Throwable cause){  super(message,cause);}  }
class C{  public ManagedObjectAlreadyExistsException(){  super(ERR_MANAGED_OBJECT_ALREADY_EXISTS_EXCEPTION.get());}  }
class C{  private Promise<ActionResponse,ResourceException> updateInstance(SSOToken admin,final JsonValue details,final String realm){  JsonValue jVal=details;  IdentityDetails newDtls;  String resourceId=jVal.get(USERNAME).asString();  try {    newDtls=jsonValueToIdentityDetails(objectType,jVal,realm);    if (newDtls.getAttributes() == null || newDtls.getAttributes().length < 1) {      throw new BadRequestException("Illegal arguments: One or more required arguments is null or empty");    }    newDtls.setName(resourceId);    identityServices.update(newDtls,admin);    debug.message("IdentityResource.updateInstance :: Anonymous UPDATE in realm={} for resourceId={}",realm,resourceId);    IdentityDetails checkIdent=identityServices.read(resourceId,getIdentityServicesAttributes(realm),admin);    return newResultPromise(newActionResponse(identityDetailsToJsonValue(checkIdent)));  } catch (  ResourceException re) {    debug.warning("IdentityResource.updateInstance() :: Cannot UPDATE in realm={} for resourceId={}",realm,resourceId,re);    return re.asPromise();  }catch (  final Exception e) {    debug.error("IdentityResource.updateInstance() :: Cannot UPDATE in realm={} for resourceId={}",realm,resourceId,e);    return new NotFoundException(e.getMessage(),e).asPromise();  }}  }
class C{  boolean isLegalInsertText(String text){  return true;}  }
class C{  public void init(SecureRandom random) throws IllegalArgumentException {}  }
class C{  public UnderscoreDNTag(){  numComponents=0;}  }
class C{  public List<Long> generateBuckets() throws FileNotFoundException, UnsupportedEncodingException {  logger.info("Generating buckets for: " + dataType.toString() + " with prune factor: "+ pruneFactor);  List<Long> buckets=createBuckets();  System.gc();  if (pruneFactor != 0) {    buckets=pruneBucket(buckets,pruneFactor);    System.gc();  }  if (dataType.equals(FieldDataType.DOUBLE)) {    logger.info("Special case for double; adding a set of low buckets for high precision on lower numbers.");    for (int i=0; i < 10000; i++) {      logger.debug("Adding " + i);      buckets.add(new Long(i));    }    for (int i=10000; i < 100000; i=i + 2) {      logger.debug("Adding " + i);      buckets.add(new Long(i));    }    for (int i=100000; i < 1000000; i=i + 10) {      logger.debug("Adding " + i);      buckets.add(new Long(i));    }  }  if (useNegativeBuckets) {    buckets=addNegativeBuckets(buckets);    System.gc();  }  Collections.sort(buckets);  return buckets;}  }
class C{  public java.lang.String toXMLString(boolean includeNS,boolean declareNS) throws SAML2Exception {  validateData();  StringBuffer result=new StringBuffer(1000);  String prefix="";  String uri="";  if (includeNS) {    prefix=SAML2Constants.ASSERTION_PREFIX;  }  if (declareNS) {    uri=SAML2Constants.ASSERTION_DECLARE_STR;  }  result.append("<").append(prefix).append("AuthnStatement").append(uri).append(" AuthnInstant=\"").append(DateUtils.toUTCDateFormat(authnInstant)).append("\"");  if (sessionIndex != null && sessionIndex.trim().length() != 0) {    result.append(" SessionIndex=\"").append(sessionIndex).append("\"");  }  if (sessionNotOnOrAfter != null) {    result.append(" SessionNotOnOrAfter=\"").append(DateUtils.toUTCDateFormat(sessionNotOnOrAfter)).append("\"");  }  result.append(">");  if (subjectLocality != null) {    result.append(subjectLocality.toXMLString(includeNS,declareNS));  }  result.append(authnContext.toXMLString(includeNS,declareNS));  result.append("</").append(prefix).append("AuthnStatement>");  return result.toString();}  }
class C{  private void start(JComponent c,MouseEvent e){  Point screenLocation=c.getLocationOnScreen();  if (component != c) {    _stop(component);  }  component=c;  event=new MouseEvent(component,e.getID(),e.getWhen(),e.getModifiers(),e.getX() + screenLocation.x,e.getY() + screenLocation.y,e.getXOnScreen(),e.getYOnScreen(),e.getClickCount(),e.isPopupTrigger(),MouseEvent.NOBUTTON);  if (timer == null) {    timer=new Timer(100,this);  }  if (!timer.isRunning()) {    timer.start();  }}  }
class C{  public Boolean isTraversable(File f){  return null;}  }
class C{  private void unparkSuccessor(Node node){  int ws=node.waitStatus;  if (ws < 0)   compareAndSetWaitStatus(node,ws,0);  Node s=node.next;  if (s == null || s.waitStatus > 0) {    s=null;    for (Node t=tail; t != null && t != node; t=t.prev)     if (t.waitStatus <= 0)     s=t;  }  if (s != null)   LockSupport.unpark(s.thread);}  }
class C{  public static Foo fetchByUUID_G(java.lang.String uuid,long groupId){  return getPersistence().fetchByUUID_G(uuid,groupId);}  }
class C{  public static int showConfirmDialog(Component parentComponent,Object message,String title,int optionType) throws HeadlessException {  return showConfirmDialog(parentComponent,message,title,optionType,QUESTION_MESSAGE);}  }
class C{  public Diode(BlockFace facingDirection,int delay){  this(facingDirection,delay,DEFAULT_STATE);}  }
class C{  public PagesPerMinute(int value){  super(value,0,Integer.MAX_VALUE);}  }
class C{  public AlphaComposite derive(int rule){  return (this.rule == rule) ? this : getInstance(rule,this.extraAlpha);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsse.KeyIdentifierElement createKeyIdentifierElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsse.impl.KeyIdentifierElementImpl();}  }
class C{  @Override public void repaint(long tm,int x,int y,int width,int height){}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodedocumenttypenodename.class,args);}  }
class C{  public Object clone(){  LDAPFilterCondition theClone=null;  try {    theClone=(LDAPFilterCondition)super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }  if (properties != null) {    theClone.properties=new HashMap();    Iterator it=properties.keySet().iterator();    while (it.hasNext()) {      Object o=it.next();      Set values=new HashSet();      values.addAll((Set)properties.get(o));      theClone.properties.put(o,values);    }  }  return theClone;}  }
class C{  private ConditionResult processNOT(SearchFilter completeFilter,Entry entry,int depth) throws DirectoryException {  if (notComponent == null) {    LocalizableMessage message=ERR_SEARCH_FILTER_NOT_COMPONENT_NULL.get(entry.getName(),completeFilter);    throw new DirectoryException(DirectoryServer.getServerErrorResultCode(),message);  } else {    if (depth >= MAX_NESTED_FILTER_DEPTH) {      LocalizableMessage message=ERR_SEARCH_FILTER_NESTED_TOO_DEEP.get(entry.getName(),completeFilter);      throw new DirectoryException(DirectoryServer.getServerErrorResultCode(),message);    }    ConditionResult result=notComponent.matchesEntryInternal(completeFilter,entry,depth + 1);switch (result) {case TRUE:      if (logger.isTraceEnabled()) {        logger.trace("Returning FALSE for NOT component %s in filter " + "%s for entry %s",notComponent,completeFilter,entry.getName());      }    return ConditionResult.FALSE;case FALSE:  if (logger.isTraceEnabled()) {    logger.trace("Returning TRUE for NOT component %s in filter " + "%s for entry %s",notComponent,completeFilter,entry.getName());  }return ConditionResult.TRUE;case UNDEFINED:if (logger.isTraceEnabled()) {logger.trace("Undefined result for NOT component %s in filter " + "%s for entry %s",notComponent,completeFilter,entry.getName());}return ConditionResult.UNDEFINED;default :LocalizableMessage message=ERR_SEARCH_FILTER_INVALID_RESULT_TYPE.get(entry.getName(),completeFilter,result);throw new DirectoryException(DirectoryServer.getServerErrorResultCode(),message);}}}  }
class C{  void resetFromValue(InternationalFormatter formatter){  offset=0;  try {    text=formatter.valueToString(value);  } catch (  ParseException pe) {    text="";  }  length=fb.getDocument().getLength();}  }
class C{  public void stopAnalysis(final MetricReference metricReference){  final TImeMetricInfo statInfo=metricStatisticsMap.get(metricReference);  if (statInfo.task != null) {    statInfo.task.cancel();    statInfo.task=null;  }}  }
class C{  public boolean isKbaEnabled(){  return kbaEnabled;}  }
class C{  public static void validateAttribute(Attr attr,Class cls,Guid guid) throws UMSException, DataConstraintException {  if (attr == null) {    return;  }  String validatorClass=null;  String rule=null;  String attrName=attr.getName();  CreationTemplate ct=TemplateManager.getTemplateManager().getCreationTemplate(cls,guid);  if (ct != null) {    Enumeration en=ct.getValidation(attrName);    while (en.hasMoreElements()) {      ValidationElement vElement=(ValidationElement)en.nextElement();      validatorClass=vElement.getValidator();      rule=vElement.getRule();      if (validatorClass != null) {        validateAttribute(attr,validatorClass,rule);      }    }  }}  }
class C{  public static AndroidArtwork createArtworkFromMetadataBlockDataPicture(MetadataBlockDataPicture coverArt){  AndroidArtwork artwork=new AndroidArtwork();  artwork.setFromMetadataBlockDataPicture(coverArt);  return artwork;}  }
class C{  static int findDNKeyParent(ByteSequence dnKey){  if (dnKey.length() == 0) {    return -1;  }  for (int i=dnKey.length() - 1; i >= 0; i--) {    if (positionIsRDNSeparator(dnKey,i)) {      return i;    }  }  return 0;}  }
class C{  public boolean apply(ObjectName name) throws BadStringOperationException, BadBinaryOpValueExpException, BadAttributeValueExpException, InvalidApplicationException {  ValueExp val1=exp1.apply(name);  ValueExp val2=exp2.apply(name);  ValueExp val3=exp3.apply(name);  boolean numeric=val1 instanceof NumericValueExp;  if (numeric) {    if (((NumericValueExp)val1).isLong()) {      long lval1=((NumericValueExp)val1).longValue();      long lval2=((NumericValueExp)val2).longValue();      long lval3=((NumericValueExp)val3).longValue();      return lval2 <= lval1 && lval1 <= lval3;    } else {      double dval1=((NumericValueExp)val1).doubleValue();      double dval2=((NumericValueExp)val2).doubleValue();      double dval3=((NumericValueExp)val3).doubleValue();      return dval2 <= dval1 && dval1 <= dval3;    }  } else {    String sval1=((StringValueExp)val1).getValue();    String sval2=((StringValueExp)val2).getValue();    String sval3=((StringValueExp)val3).getValue();    return sval2.compareTo(sval1) <= 0 && sval1.compareTo(sval3) <= 0;  }}  }
class C{  public static void deregisterTrustManagerProvider(DN providerDN){  directoryServer.trustManagerProviders.remove(providerDN);}  }
class C{  public void testCertPathValidator11() throws NoSuchAlgorithmException, NoSuchProviderException, CertPathValidatorException {  if (!PKIXSupport) {    fail(NotSupportMsg);    return;  }  CertPathValidator[] certPV=createCPVs();  assertNotNull("CertPathValidator objects were not created",certPV);  MyCertPath mCP=new MyCertPath(new byte[0]);  invalidParams mPar=new invalidParams();  for (int i=0; i < certPV.length; i++) {    try {      certPV[i].validate(mCP,mPar);      fail("InvalidAlgorithmParameterException must be thrown");    } catch (    InvalidAlgorithmParameterException e) {    }    try {      certPV[i].validate(mCP,null);      fail("InvalidAlgorithmParameterException must be thrown");    } catch (    InvalidAlgorithmParameterException e) {    }  }}  }
class C{  public Object clone(){  try {    X509CRLSelector copy=(X509CRLSelector)super.clone();    if (issuerNames != null) {      copy.issuerNames=new HashSet<Object>(issuerNames);      copy.issuerX500Principals=new HashSet<X500Principal>(issuerX500Principals);    }    return copy;  } catch (  CloneNotSupportedException e) {    throw new InternalError(e.toString(),e);  }}  }
class C{  public AudienceRestriction createAudienceRestriction(Element elem) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.AUDIENCE_RESTRICTION,elem);  if (obj == null) {    return new AudienceRestrictionImpl(elem);  } else {    return (AudienceRestriction)obj;  }}  }
class C{  protected BCSChild createBCSChild(Object targetChild,Object peer){  return new BCSChild(targetChild,peer);}  }
class C{  public Closure(final Object[] constants,final Object[] locals){  this.constants=constants;  this.locals=locals;}  }
class C{  private void updateEntryPane(){  ViewPositions pos=Utilities.getViewPositions(entryPane);  TreePath[] paths=treePane.getTree().getSelectionPaths();  TreePath path=null;  if (paths != null && paths.length == 1) {    path=paths[0];  }  lastIndexTreePath=path;  if (path != null) {    Object node=path.getLastPathComponent();    if (node instanceof IndexTreeNode) {      entryPane.updateStandardIndex(((IndexTreeNode)node).getIndex());    } else     if (node instanceof VLVIndexTreeNode) {      entryPane.updateVLVIndex(((VLVIndexTreeNode)node).getIndex());    } else     if (node == standardIndexes) {      String backendName=(String)backends.getSelectedItem();      entryPane.updateBackendIndexes(backendName);    } else     if (node == vlvIndexes) {      String backendName=(String)backends.getSelectedItem();      entryPane.updateBackendVLVIndexes(backendName);    } else {      entryPane.displayVoid();    }  } else {    if (paths != null && paths.length > 1) {      entryPane.displayMultiple();    } else {      entryPane.displayVoid();    }  }  Utilities.updateViewPositions(pos);}  }
class C{  public boolean isIdle(){  return spdyConnection == null || spdyConnection.isIdle();}  }
class C{  boolean isTerminatedOnBye(){  return this.terminateOnBye;}  }
class C{  public static boolean deleteLatestPhoto(){  try {    File mediaStorageDir=getMediaStorageDir();    if (!mediaStorageDir.exists())     return false;    File[] images=mediaStorageDir.listFiles();    File latestImage=images[0];    for (    File image : images) {      if (image.lastModified() > latestImage.lastModified())       latestImage=image;    }    return latestImage.delete();  } catch (  Exception e) {    Log.e(TAG,"Failed to delete latest image!");    Log.e(TAG,e.getLocalizedMessage());    return false;  }}  }
class C{  public void read(InputStream is) throws IOException {  FastInputStream fis=new FastInputStream(is);  byte[] lbuf=new byte[512];  attr.read(fis,lbuf);  int ecount=0, acount=0;  int asize=2;  int len;  String name=null;  boolean skipEmptyLines=true;  byte[] lastline=null;  while ((len=fis.readLine(lbuf)) != -1) {    if (lbuf[--len] != '\n') {      throw new IOException("manifest line too long");    }    if (len > 0 && lbuf[len - 1] == '\r') {      --len;    }    if (len == 0 && skipEmptyLines) {      continue;    }    skipEmptyLines=false;    if (name == null) {      name=parseName(lbuf,len);      if (name == null) {        throw new IOException("invalid manifest format");      }      if (fis.peek() == ' ') {        lastline=new byte[len - 6];        System.arraycopy(lbuf,6,lastline,0,len - 6);        continue;      }    } else {      byte[] buf=new byte[lastline.length + len - 1];      System.arraycopy(lastline,0,buf,0,lastline.length);      System.arraycopy(lbuf,1,buf,lastline.length,len - 1);      if (fis.peek() == ' ') {        lastline=buf;        continue;      }      name=new String(buf,0,buf.length,"UTF8");      lastline=null;    }    Attributes attr=getAttributes(name);    if (attr == null) {      attr=new Attributes(asize);      entries.put(name,attr);    }    attr.read(fis,lbuf);    ecount++;    acount+=attr.size();    asize=Math.max(2,acount / ecount);    name=null;    skipEmptyLines=true;  }}  }
class C{  public MetadataDescriptor(final ContainerType type,final String propName,final int propType,final int stream,final int language){  assert type != null;  type.assertConstraints(propName,new byte[0],propType,stream,language);  this.containerType=type;  this.name=propName;  this.descriptorType=propType;  this.streamNumber=stream;  this.languageIndex=language;}  }
class C{  public boolean isCurrent(){  return (System.currentTimeMillis() <= getEndTime().getTime());}  }
class C{  public int process(Callback[] callbacks,int state) throws AuthLoginException {  if (debug.messageEnabled()) {    debug.message("in process(), login state is " + state);  }  this.callbacks=callbacks;  ModuleState moduleState=ModuleState.get(state);  ModuleState nextState=null;switch (moduleState) {case LOGIN_START:    int action=0;  if (callbacks != null && callbacks.length != 0) {    action=((ConfirmationCallback)callbacks[2]).getSelectedIndex();    if (debug.messageEnabled()) {      debug.message("LOGIN page button index: " + action);    }  }if (action == 0) {  nextState=loginUser(callbacks);} else {  initAuthConfig();  clearInfoText(ModuleState.REGISTRATION.intValue());  nextState=ModuleState.REGISTRATION;}break;case CHOOSE_USERNAMES:nextState=chooseUserID(callbacks);break;case DISCLAIMER:int agree=((ConfirmationCallback)callbacks[0]).getSelectedIndex();if (debug.messageEnabled()) {debug.message("DISCLAIMER page button index: " + agree);}if (agree == 0) {RegistrationResult result=registerNewUser();if (result.equals(RegistrationResult.NO_ERROR)) {return ISAuthConstants.LOGIN_SUCCEED;} else {switch (result) {case USER_EXISTS_ERROR:setErrorMessage(result,0);nextState=ModuleState.REGISTRATION;break;case PROFILE_ERROR:nextState=ModuleState.PROFILE_ERROR;break;case NO_ERROR:nextState=ModuleState.COMPLETE;break;}}} else if (agree == 1) {nextState=ModuleState.DISCLAIMER_DECLINED;} else {throw new AuthLoginException(amAuthMembership,"loginException",null);}break;case REGISTRATION:int next=((ConfirmationCallback)callbacks[callbacks.length - 1]).getSelectedIndex();if (debug.messageEnabled()) {debug.message("REGISTRATION page button index: " + next);}if (next == 0) {clearInfoText(ModuleState.REGISTRATION.intValue());ModuleState result=getAndCheckRegistrationFields(callbacks);switch (result) {case DISCLAIMER:nextState=processRegistrationResult();break;case REGISTRATION:case CHOOSE_USERNAMES:case PROFILE_ERROR:if (debug.messageEnabled()) {debug.message("Recoverable error: " + result.toString());}nextState=result;break;}} else if (next == 1) {clearCallbacks(callbacks);nextState=ModuleState.LOGIN_START;} else {return ISAuthConstants.LOGIN_IGNORE;}}return nextState.intValue();}  }
class C{  public void processMenuDragMouseEvent(MenuDragMouseEvent e){switch (e.getID()) {case MouseEvent.MOUSE_ENTERED:    isMouseDragged=false;  fireMenuDragMouseEntered(e);break;case MouseEvent.MOUSE_EXITED:isMouseDragged=false;fireMenuDragMouseExited(e);break;case MouseEvent.MOUSE_DRAGGED:isMouseDragged=true;fireMenuDragMouseDragged(e);break;case MouseEvent.MOUSE_RELEASED:if (isMouseDragged) fireMenuDragMouseReleased(e);break;default :break;}}  }
class C{  static Collection<Investment> mergeInvestments(final Collection<Investment> left,final Collection<Investment> right){  return Collections.unmodifiableCollection(Stream.concat(left.stream(),right.stream()).distinct().collect(Collectors.toList()));}  }
class C{  public static SearchFilter createLessOrEqualFilter(AttributeType attributeType,Set<String> attributeOptions,ByteString assertionValue){  return new SearchFilter(FilterType.LESS_OR_EQUAL,null,null,attributeType,attributeOptions,assertionValue,null,null,null,null,false);}  }
class C{  public boolean verify(BasicOCSPResp ocspResp,X509Certificate signCert,X509Certificate issuerCert,Date signDate) throws GeneralSecurityException, IOException {  if (ocspResp == null)   return false;  SingleResp[] resp=ocspResp.getResponses();  for (int i=0; i < resp.length; i++) {    if (!signCert.getSerialNumber().equals(resp[i].getCertID().getSerialNumber())) {      continue;    }    try {      if (issuerCert == null)       issuerCert=signCert;      if (!SignUtils.checkIfIssuersMatch(resp[i].getCertID(),issuerCert)) {        LOGGER.info("OCSP: Issuers doesn't match.");        continue;      }    } catch (    OCSPException e) {      continue;    }    if (resp[i].getNextUpdate() == null) {      Date nextUpdate=SignUtils.add180Sec(resp[i].getThisUpdate());      LOGGER.info(MessageFormat.format("No 'next update' for OCSP Response; assuming {0}",nextUpdate));      if (signDate.after(nextUpdate)) {        LOGGER.info(MessageFormat.format("OCSP no longer valid: {0} after {1}",signDate,nextUpdate));        continue;      }    } else {      if (signDate.after(resp[i].getNextUpdate())) {        LOGGER.info(MessageFormat.format("OCSP no longer valid: {0} after {1}",signDate,resp[i].getNextUpdate()));        continue;      }    }    Object status=resp[i].getCertStatus();    if (status == CertificateStatus.GOOD) {      isValidResponse(ocspResp,issuerCert);      return true;    }  }  return false;}  }
class C{  public void test_engineInit_01(){  KeyManagerFactorySpiImpl kmf=new KeyManagerFactorySpiImpl();  KeyStore ks;  char[] psw="password".toCharArray();  try {    kmf.engineInit(null,null);    fail("NoSuchAlgorithmException wasn't thrown");  } catch (  NoSuchAlgorithmException kse) {  }catch (  Exception e) {    fail(e + " was thrown instead of NoSuchAlgorithmException");  }  try {    kmf.engineInit(null,psw);    fail("KeyStoreException wasn't thrown");  } catch (  KeyStoreException uke) {  }catch (  Exception e) {    fail(e + " was thrown instead of KeyStoreException");  }  try {    ks=KeyStore.getInstance(KeyStore.getDefaultType());    kmf.engineInit(ks,null);    fail("UnrecoverableKeyException wasn't thrown");  } catch (  UnrecoverableKeyException uke) {  }catch (  Exception e) {    fail(e + " was thrown instead of UnrecoverableKeyException");  }  try {    KeyStore kst=KeyStore.getInstance(KeyStore.getDefaultType());    kst.load(null,null);    kmf.engineInit(kst,psw);  } catch (  Exception e) {    fail("Unexpected exception " + e);  }}  }
class C{  protected void onRequestHandlerNotSpecified(RequestContext requestContext) throws ServletException {  ViewBeanManager viewBeanManager=requestContext.getViewBeanManager();  AuthExceptionViewBean vb=(AuthExceptionViewBean)viewBeanManager.getViewBean(com.sun.identity.authentication.UI.AuthExceptionViewBean.class);  vb.forwardTo(requestContext);  throw new CompleteRequestException();}  }
class C{  protected void runSQL(String sql){  try {    DataSource dataSource=fooPersistence.getDataSource();    DB db=DBManagerUtil.getDB();    sql=db.buildSQL(sql);    sql=PortalUtil.transformSQL(sql);    SqlUpdate sqlUpdate=SqlUpdateFactoryUtil.getSqlUpdate(dataSource,sql);    sqlUpdate.update();  } catch (  Exception e) {    throw new SystemException(e);  }}  }
class C{  public void addBackupCreatedListener(BackupCreatedListener listener){  backupListeners.add(listener);}  }
class C{  public void assign(org.omg.DynamicAny.DynAny dyn_any) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("assign",_opsClass);  DynAnyOperations $self=(DynAnyOperations)$so.servant;  try {    $self.assign(dyn_any);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  private void constructWriter(File file,FilePermission filePermissions,String encoding,boolean append,int bufferSize) throws IOException, DirectoryException {  if (!file.exists()) {    file.createNewFile();  }  FileOutputStream stream=new FileOutputStream(file,append);  outputStream=new MeteredStream(stream,file.length());  OutputStreamWriter osw=new OutputStreamWriter(outputStream,encoding);  if (bufferSize <= 0) {    writer=new BufferedWriter(osw);  } else {    writer=new BufferedWriter(osw,bufferSize);  }  try {    if (!FilePermission.setPermissions(file,filePermissions)) {      logger.warn(WARN_LOGGER_UNABLE_SET_PERMISSIONS,filePermissions,file);    }  } catch (  Exception e) {    logger.warn(WARN_LOGGER_SET_PERMISSION_FAILED,file,stackTraceToSingleLineString(e));  }}  }
class C{  public PagesPerMinuteColor(int value){  super(value,0,Integer.MAX_VALUE);}  }
class C{  public final void addAttribute(String uri,String local,String qname,String type,String val){  int index=super.getLength();  super.addAttribute(uri,local,qname,type,val);  if (index < MAXMinus1) {    return;  } else   if (index == MAXMinus1) {    switchOverToHash(MAX);  } else {    Integer i=new Integer(index);    m_indexFromQName.put(qname,i);    m_buff.setLength(0);    m_buff.append('{').append(uri).append('}').append(local);    String key=m_buff.toString();    m_indexFromQName.put(key,i);  }  return;}  }
class C{  private LocalizableMessage formatTimeString(String timeString){  LocalizableMessage ret=LocalizableMessage.EMPTY;  if (timeString != null && timeString.length() > 0) {    try {      SimpleDateFormat dateFormat;      if (timeString.endsWith("Z")) {        dateFormat=new SimpleDateFormat(DATE_FORMAT_GMT_TIME);        dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));      } else {        dateFormat=new SimpleDateFormat(DATE_FORMAT_COMPACT_LOCAL_TIME);      }      Date date=dateFormat.parse(timeString);      DateFormat df=DateFormat.getDateTimeInstance(DateFormat.MEDIUM,DateFormat.LONG);      String dateString=df.format(date);      ret=LocalizableMessage.raw(dateString);    } catch (    ParseException pe) {      ret=LocalizableMessage.raw(timeString);    }  }  return ret;}  }
class C{  public final SecretKey generateSecret(String algorithm) throws IllegalStateException, NoSuchAlgorithmException, InvalidKeyException {  return spiImpl.engineGenerateSecret(algorithm);}  }
class C{  protected void storeElement(PrintWriter aWriter,int indent,Object aTagElement) throws Exception {  if (aTagElement != null) {    IStoreFactory elementFactory=getRegistry().findStoreFactory(aTagElement.getClass());    if (elementFactory != null) {      StoreDescription desc=getRegistry().findDescription(aTagElement.getClass());      if (!desc.isTransientChild(aTagElement.getClass().getName()))       elementFactory.store(aWriter,indent,aTagElement);    } else {      log.warn(sm.getString("factory.storeNoDescriptor",aTagElement.getClass()));    }  }}  }
class C{  public static void deleteEntry(Entry entry) throws Exception {  deleteEntry(entry.getName());}  }
class C{  protected static ServiceConfig createOrgConfig(SSOToken token,String orgDN,String serviceName,Map avPair) throws SSOException, AMException {  try {    ServiceConfigManager scm=new ServiceConfigManager(serviceName,token);    ServiceConfig sc=scm.createOrganizationConfig(orgDN,avPair);    return sc;  } catch (  ServiceNotFoundException ex) {    Object args[]={serviceName};    String locale=AMCommonUtils.getUserLocale(token);    throw new AMException(AMSDKBundle.getString("481",args,locale),"481",args);  }catch (  ServiceAlreadyExistsException ex) {    Object args[]={serviceName};    String locale=AMCommonUtils.getUserLocale(token);    throw new AMException(AMSDKBundle.getString("479",args,locale),"479",args);  }catch (  SMSException ex) {    Object args[]={serviceName};    String locale=AMCommonUtils.getUserLocale(token);    throw new AMException(AMSDKBundle.getString("482",args,locale),"482",args);  }}  }
class C{  static public boolean trace_count_exceeded(String p_s,RoutingBoard p_board,int p_net_no,int p_max_count){  int found_traces=0;  Iterator<BrdItem> it=p_board.get_items().iterator();  while (it.hasNext()) {    BrdItem curr_ob=it.next();    if (curr_ob instanceof board.items.BrdTracep) {      if (((board.items.BrdTracep)curr_ob).contains_net(p_net_no)) {        ++found_traces;      }    }  }  if (found_traces > p_max_count) {    System.out.print(p_s);    System.out.print(": ");    System.out.print(p_max_count);    System.out.println(" traces exceeded");    return true;  }  return false;}  }
class C{  public DeleteResponseProtocolOp(int resultCode){  this.resultCode=resultCode;}  }
class C{  public void write(int c) throws IOException {  se.write(c);}  }
class C{  public void onTerminate(){  sContext.unregisterReceiver(mModel);  final LauncherAppsCompat launcherApps=LauncherAppsCompat.getInstance(sContext);  launcherApps.removeOnAppsChangedCallback(mModel);  PackageInstallerCompat.getInstance(sContext).onStop();}  }
class C{  public void invokeAndWait(Runnable task){  if (roomLock.isHeldByCurrentThread()) {    if (cachedRunnables == null) {      cachedRunnables=new ArrayList<>();    }    cachedRunnables.add(task);  } else {    roomLock.lock();    try {      cachedRunnables=null;      if (!closed) {        task.run();      }      if (cachedRunnables != null) {        for (int i=0; i < cachedRunnables.size(); i++) {          if (!closed) {            cachedRunnables.get(i).run();          }        }        cachedRunnables=null;      }    }  finally {      roomLock.unlock();    }  }}  }
class C{  private int internalGetEra(){  return isSet(ERA) ? internalGet(ERA) : eras.length - 1;}  }
class C{  public static <E>SparseArray<E> cloneSparseArray(SparseArray<E> orig){  SparseArray<E> result=new SparseArray<E>();  for (int i=0; i < orig.size(); i++) {    result.put(orig.keyAt(i),orig.valueAt(i));  }  return result;}  }
class C{  public void testDoubleValuePosRounded1(){  byte[] a={-128,1,2,3,4,5,60,23,1,-3,-5};  int aSign=1;  double result=1.54747264387948E26;  double aNumber=new BigInteger(aSign,a).doubleValue();  assertTrue(aNumber == result);}  }
class C{  public boolean isDetectionEnabled(){  return detectionEnabled;}  }
class C{  public static JTextField createShortTextField(){  JTextField tf=createTextField();  tf.setColumns(10);  return tf;}  }
class C{  @Nullable private String returnTypeComment(Method method,MethodConfig config,PythonImportHandler importHandler){  MessageType returnMessageType=method.getOutputMessage();  if (PythonProtoElements.isEmptyMessage(returnMessageType)) {    return null;  }  String path=importHandler.elementPath(returnMessageType,true);  String classInfo=":class:`" + path + "`";  if (method.getResponseStreaming()) {    return "Returns:\n" + "  iterator[" + classInfo + "].";  } else   if (config.isPageStreaming()) {    return "Returns:" + "\n  A :class:`google.gax.PageIterator` instance. By default, this" + "\n  is an iterable of " + fieldTypeComment(config.getPageStreaming().getResourcesField(),importHandler) + " instances."+ "\n  This object can also be configured to iterate over the pages"+ "\n  of the response through the `CallOptions` parameter.";  } else {    return "Returns:\n  A " + classInfo + " instance.";  }}  }
class C{  public JobService jobRangeByType(String type,String state,long from,long to,String order,Handler<AsyncResult<List<Job>>> handler){  delegate.jobRangeByType(type,state,from,to,order,handler);  return this;}  }
class C{  public void removeUsers(Set users) throws AMException, SSOException {  SSOTokenManager.getInstance().validateToken(super.token);  dsServices.modifyMemberShip(super.token,users,super.entryDN,GROUP,REMOVE_MEMBER);}  }
class C{  @Indexable(type=IndexableType.REINDEX) @Override public Foo updateFoo(Foo foo){  return fooPersistence.update(foo);}  }
class C{  public void testToBigIntegerPos2(){  String a="123809648392384754573567356745735.63567890295784902768787678287E+15";  BigInteger bNumber=new BigInteger("123809648392384754573567356745735635678902957849");  BigDecimal aNumber=new BigDecimal(a);  BigInteger result=aNumber.toBigInteger();  assertTrue("incorrect value",result.equals(bNumber));}  }
class C{  public static <T>Callable<T> privilegedCallableUsingCurrentClassLoader(Callable<T> callable){  if (callable == null)   throw new NullPointerException();  return new PrivilegedCallableUsingCurrentClassLoader<T>(callable);}  }
class C{  private List<Filter> createFilterList(JsonValue configuration) throws ScriptException {  final JsonValue filterConfig=configuration.get("filters").expect(List.class);  final List<Filter> filters=new ArrayList<>(filterConfig.size());  for (  JsonValue jv : filterConfig) {    Filter filter=newFilter(jv);    if (null != filter) {      filters.add(filter);    }  }  return filters;}  }
class C{  public static String gensalt(){  return gensalt(GENSALT_DEFAULT_LOG2_ROUNDS);}  }
class C{  public boolean isFollowReferrals(){  return followReferralsControl != null;}  }
class C{  private int subParseZoneString(String text,int start,CalendarBuilder calb){  boolean useSameName=false;  TimeZone currentTimeZone=getTimeZone();  int zoneIndex=formatData.getZoneIndex(currentTimeZone.getID());  TimeZone tz=null;  String[][] zoneStrings=formatData.getZoneStringsWrapper();  String[] zoneNames=null;  int nameIndex=0;  if (zoneIndex != -1) {    zoneNames=zoneStrings[zoneIndex];    if ((nameIndex=matchZoneString(text,start,zoneNames)) > 0) {      if (nameIndex <= 2) {        useSameName=zoneNames[nameIndex].equalsIgnoreCase(zoneNames[nameIndex + 2]);      }      tz=TimeZone.getTimeZone(zoneNames[0]);    }  }  if (tz == null) {    zoneIndex=formatData.getZoneIndex(TimeZone.getDefault().getID());    if (zoneIndex != -1) {      zoneNames=zoneStrings[zoneIndex];      if ((nameIndex=matchZoneString(text,start,zoneNames)) > 0) {        if (nameIndex <= 2) {          useSameName=zoneNames[nameIndex].equalsIgnoreCase(zoneNames[nameIndex + 2]);        }        tz=TimeZone.getTimeZone(zoneNames[0]);      }    }  }  if (tz == null) {    int len=zoneStrings.length;    for (int i=0; i < len; i++) {      zoneNames=zoneStrings[i];      if ((nameIndex=matchZoneString(text,start,zoneNames)) > 0) {        if (nameIndex <= 2) {          useSameName=zoneNames[nameIndex].equalsIgnoreCase(zoneNames[nameIndex + 2]);        }        tz=TimeZone.getTimeZone(zoneNames[0]);        break;      }    }  }  if (tz != null) {    if (!tz.equals(currentTimeZone)) {      setTimeZone(tz);    }    int dstAmount=(nameIndex >= 3) ? tz.getDSTSavings() : 0;    if (!(useSameName || (nameIndex >= 3 && dstAmount == 0))) {      calb.clear(Calendar.ZONE_OFFSET).set(Calendar.DST_OFFSET,dstAmount);    }    return (start + zoneNames[nameIndex].length());  }  return 0;}  }
class C{  InterfaceAddress(Inet4Address address,Inet4Address broadcastAddress,Inet4Address mask){  this.address=address;  this.broadcastAddress=broadcastAddress;  this.prefixLength=countPrefixLength(mask);}  }
class C{  protected String generateTableCreationSyntax(Index index){  String newTableName=Utils.calculateITableName(index);  StringBuilder fieldCreateStatement=new StringBuilder();  StringBuilder primaryKeyCreateStatement=new StringBuilder();  boolean first=true;  for (  IndexField field : index.getFields()) {    if (!first) {      fieldCreateStatement.append(", ");      primaryKeyCreateStatement.append(", ");    } else {      first=false;    }    fieldCreateStatement.append(field.getField()).append(" ").append(field.getType().mapToCassandaraDataType());    primaryKeyCreateStatement.append(field.getField());  }  if (!index.isUnique()) {    primaryKeyCreateStatement.append(", ").append("id");  }  String finalStatement=String.format(TABLE_CREATE_CQL,newTableName,fieldCreateStatement,primaryKeyCreateStatement);  logger.debug("For index: " + index.toString() + ", the table create SQL is: "+ finalStatement);  return finalStatement;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.TransformElement createTransformElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.TransformElementImpl();}  }
class C{  public boolean update(Long ruleFilterID,Long ruleID,Long eventAttributeID,Long externalAttributeID,Long dataFilterID,Long parentRuleFilterID,String ruleFilterData){  if (ruleFilterID == null) {    throw new IllegalArgumentException("primary key null.");  }  ContentValues args=new ContentValues();  if (ruleID != null) {    args.put(KEY_RULEID,ruleID);  }  if (eventAttributeID != null) {    args.put(KEY_EVENTATTRIBUTEID,eventAttributeID);  }  if (externalAttributeID != null) {    args.put(KEY_EXTERNALATTRIBUTEID,externalAttributeID);  }  if (dataFilterID != null) {    args.put(KEY_DATAFILTERID,dataFilterID);  }  if (parentRuleFilterID != null) {    args.put(KEY_PARENTRULEFILTERID,parentRuleFilterID);  }  if (ruleFilterData != null) {    args.put(KEY_RULEFILTERDATA,ruleFilterData);  }  if (args.size() > 0) {    return database.update(DATABASE_TABLE,args,KEY_RULEFILTERID + "=" + ruleFilterID,null) > 0;  }  return false;}  }
class C{  public XMLString xstr(){  throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_XSTR_NOT_SUPPORTED_XRTREEFRAGSELECTWRAPPER,null));}  }
class C{  public Paragraph(){}  }
class C{  private boolean isUserActive(String uid) throws NotFoundException {  try {    AMIdentity userIdentity=new AMIdentity(RestUtils.getToken(),uid);    if (debug.messageEnabled()) {      debug.message("IdentityResource.isUserActive() : UID={} isActive={}",uid,userIdentity.isActive());    }    return userIdentity.isActive();  } catch (  IdRepoException idre) {    if (debug.errorEnabled()) {      debug.error("IdentityResource.isUserActive() : Invalid UID={}",uid,idre);    }    throw new NotFoundException("Invalid UID, could not retrieved " + uid,idre);  }catch (  SSOException ssoe) {    if (debug.errorEnabled()) {      debug.error("IdentityResource.isUserActive() : Invalid SSOToken",ssoe);    }    throw new NotFoundException("Invalid SSOToken " + ssoe.getMessage(),ssoe);  }}  }
class C{  public BrokerReader(ReplicationBroker broker){  this.broker=broker;}  }
class C{  public void globalConfigChanged(String serviceName,String version,String groupName,String serviceComponent,int type){  if (debug.messageEnabled()) {    debug.message("AdministrationServiceListener." + "globalConfigChanged : Global Config changed for " + "Service = " + serviceName + " Change type = "+ type);  }  globalInvalidChars=null;  globalPluginName=null;}  }
class C{  private DataConfig(Builder builder){  this.compressed=builder.compressed;  this.encrypted=builder.encrypted;  this.cryptoSuite=builder.cryptoSuite;  if (builder.compressedSchema == null) {    Reject.ifTrue(builder.compactEncoding);    this.encodeConfig=new EntryEncodeConfig(false,builder.compactEncoding,false);  } else {    this.encodeConfig=new EntryEncodeConfig(false,builder.compactEncoding,builder.compactEncoding,builder.compressedSchema);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapreturnlastitem.class,args);}  }
class C{  public void removeListSelectionListener(ListSelectionListener listener){  listenerList.remove(ListSelectionListener.class,listener);}  }
class C{  private static LDAPFilter decodeSubstringFilter(String filterString,String attrDesc,int equalPos,int endPos) throws LDAPException {  byte[] valueBytes=getBytes(filterString.substring(equalPos + 1,endPos));  boolean hasEscape=false;  LinkedList<Integer> asteriskPositions=new LinkedList<>();  for (int i=0; i < valueBytes.length; i++) {    if (valueBytes[i] == 0x2A) {      asteriskPositions.add(i);    } else     if (valueBytes[i] == 0x5C) {      hasEscape=true;    }  }  if (asteriskPositions.isEmpty()) {    LocalizableMessage message=ERR_LDAP_FILTER_SUBSTRING_NO_ASTERISKS.get(filterString,equalPos + 1,endPos);    throw new LDAPException(LDAPResultCode.PROTOCOL_ERROR,message);  }  ByteString subInitial;  int firstPos=asteriskPositions.removeFirst();  if (firstPos == 0) {    subInitial=null;  } else {    if (hasEscape) {      ByteStringBuilder buffer=new ByteStringBuilder(firstPos);      for (int i=0; i < firstPos; i++) {        if (valueBytes[i] == 0x5C) {          if (i + 2 >= valueBytes.length) {            LocalizableMessage message=ERR_LDAP_FILTER_INVALID_ESCAPED_BYTE.get(filterString,equalPos + i + 1);            throw new LDAPException(LDAPResultCode.PROTOCOL_ERROR,message);          }          byte byteValue=0;switch (valueBytes[++i]) {case 0x30:            break;case 0x31:          byteValue=(byte)0x10;        break;case 0x32:      byteValue=(byte)0x20;    break;case 0x33:  byteValue=(byte)0x30;break;case 0x34:byteValue=(byte)0x40;break;case 0x35:byteValue=(byte)0x50;break;case 0x36:byteValue=(byte)0x60;break;case 0x37:byteValue=(byte)0x70;break;case 0x38:byteValue=(byte)0x80;break;case 0x39:byteValue=(byte)0x90;break;case 0x41:case 0x61:byteValue=(byte)0xA0;break;case 0x42:case 0x62:byteValue=(byte)0xB0;break;case 0x43:case 0x63:byteValue=(byte)0xC0;break;case 0x44:case 0x64:byteValue=(byte)0xD0;break;case 0x45:case 0x65:byteValue=(byte)0xE0;break;case 0x46:case 0x66:byteValue=(byte)0xF0;break;default :LocalizableMessage message=ERR_LDAP_FILTER_INVALID_ESCAPED_BYTE.get(filterString,equalPos + i + 1);throw new LDAPException(LDAPResultCode.PROTOCOL_ERROR,message);}switch (valueBytes[++i]) {case 0x30:break;case 0x31:byteValue|=(byte)0x01;break;case 0x32:byteValue|=(byte)0x02;break;case 0x33:byteValue|=(byte)0x03;break;case 0x34:byteValue|=(byte)0x04;break;case 0x35:byteValue|=(byte)0x05;break;case 0x36:byteValue|=(byte)0x06;break;case 0x37:byteValue|=(byte)0x07;break;case 0x38:byteValue|=(byte)0x08;break;case 0x39:byteValue|=(byte)0x09;break;case 0x41:case 0x61:byteValue|=(byte)0x0A;break;case 0x42:case 0x62:byteValue|=(byte)0x0B;break;case 0x43:case 0x63:byteValue|=(byte)0x0C;break;case 0x44:case 0x64:byteValue|=(byte)0x0D;break;case 0x45:case 0x65:byteValue|=(byte)0x0E;break;case 0x46:case 0x66:byteValue|=(byte)0x0F;break;default :LocalizableMessage message=ERR_LDAP_FILTER_INVALID_ESCAPED_BYTE.get(filterString,equalPos + i + 1);throw new LDAPException(LDAPResultCode.PROTOCOL_ERROR,message);}buffer.appendByte(byteValue);} else {buffer.appendByte(valueBytes[i]);}}subInitial=buffer.toByteString();} else {subInitial=ByteString.wrap(valueBytes,0,firstPos);}}ArrayList<ByteString> subAny=new ArrayList<>();for (int asteriskPos : asteriskPositions) {int length=asteriskPos - firstPos - 1;if (hasEscape) {ByteStringBuilder buffer=new ByteStringBuilder(length);for (int i=firstPos + 1; i < asteriskPos; i++) {if (valueBytes[i] == 0x5C) {if (i + 2 >= valueBytes.length) {LocalizableMessage message=ERR_LDAP_FILTER_INVALID_ESCAPED_BYTE.get(filterString,equalPos + i + 1);throw new LDAPException(LDAPResultCode.PROTOCOL_ERROR,message);}byte byteValue=0;switch (valueBytes[++i]) {case 0x30:break;case 0x31:byteValue=(byte)0x10;break;case 0x32:byteValue=(byte)0x20;break;case 0x33:byteValue=(byte)0x30;break;case 0x34:byteValue=(byte)0x40;break;case 0x35:byteValue=(byte)0x50;break;case 0x36:byteValue=(byte)0x60;break;case 0x37:byteValue=(byte)0x70;break;case 0x38:byteValue=(byte)0x80;break;case 0x39:byteValue=(byte)0x90;break;case 0x41:case 0x61:byteValue=(byte)0xA0;break;case 0x42:case 0x62:byteValue=(byte)0xB0;break;case 0x43:case 0x63:byteValue=(byte)0xC0;break;case 0x44:case 0x64:byteValue=(byte)0xD0;break;case 0x45:case 0x65:byteValue=(byte)0xE0;break;case 0x46:case 0x66:byteValue=(byte)0xF0;break;default :LocalizableMessage message=ERR_LDAP_FILTER_INVALID_ESCAPED_BYTE.get(filterString,equalPos + i + 1);throw new LDAPException(LDAPResultCode.PROTOCOL_ERROR,message);}switch (valueBytes[++i]) {case 0x30:break;case 0x31:byteValue|=(byte)0x01;break;case 0x32:byteValue|=(byte)0x02;break;case 0x33:byteValue|=(byte)0x03;break;case 0x34:byteValue|=(byte)0x04;break;case 0x35:byteValue|=(byte)0x05;break;case 0x36:byteValue|=(byte)0x06;break;case 0x37:byteValue|=(byte)0x07;break;case 0x38:byteValue|=(byte)0x08;break;case 0x39:byteValue|=(byte)0x09;break;case 0x41:case 0x61:byteValue|=(byte)0x0A;break;case 0x42:case 0x62:byteValue|=(byte)0x0B;break;case 0x43:case 0x63:byteValue|=(byte)0x0C;break;case 0x44:case 0x64:byteValue|=(byte)0x0D;break;case 0x45:case 0x65:byteValue|=(byte)0x0E;break;case 0x46:case 0x66:byteValue|=(byte)0x0F;break;default :LocalizableMessage message=ERR_LDAP_FILTER_INVALID_ESCAPED_BYTE.get(filterString,equalPos + i + 1);throw new LDAPException(LDAPResultCode.PROTOCOL_ERROR,message);}buffer.appendByte(byteValue);} else {buffer.appendByte(valueBytes[i]);}}subAny.add(buffer.toByteString());buffer.clear();} else {subAny.add(ByteString.wrap(valueBytes,firstPos + 1,length));}firstPos=asteriskPos;}ByteString subFinal;if (firstPos == (valueBytes.length - 1)) {subFinal=null;} else {int length=valueBytes.length - firstPos - 1;if (hasEscape) {ByteStringBuilder buffer=new ByteStringBuilder(length);for (int i=firstPos + 1; i < valueBytes.length; i++) {if (valueBytes[i] == 0x5C) {if (i + 2 >= valueBytes.length) {LocalizableMessage message=ERR_LDAP_FILTER_INVALID_ESCAPED_BYTE.get(filterString,equalPos + i + 1);throw new LDAPException(LDAPResultCode.PROTOCOL_ERROR,message);}byte byteValue=0;switch (valueBytes[++i]) {case 0x30:break;case 0x31:byteValue=(byte)0x10;break;case 0x32:byteValue=(byte)0x20;break;case 0x33:byteValue=(byte)0x30;break;case 0x34:byteValue=(byte)0x40;break;case 0x35:byteValue=(byte)0x50;break;case 0x36:byteValue=(byte)0x60;break;case 0x37:byteValue=(byte)0x70;break;case 0x38:byteValue=(byte)0x80;break;case 0x39:byteValue=(byte)0x90;break;case 0x41:case 0x61:byteValue=(byte)0xA0;break;case 0x42:case 0x62:byteValue=(byte)0xB0;break;case 0x43:case 0x63:byteValue=(byte)0xC0;break;case 0x44:case 0x64:byteValue=(byte)0xD0;break;case 0x45:case 0x65:byteValue=(byte)0xE0;break;case 0x46:case 0x66:byteValue=(byte)0xF0;break;default :LocalizableMessage message=ERR_LDAP_FILTER_INVALID_ESCAPED_BYTE.get(filterString,equalPos + i + 1);throw new LDAPException(LDAPResultCode.PROTOCOL_ERROR,message);}switch (valueBytes[++i]) {case 0x30:break;case 0x31:byteValue|=(byte)0x01;break;case 0x32:byteValue|=(byte)0x02;break;case 0x33:byteValue|=(byte)0x03;break;case 0x34:byteValue|=(byte)0x04;break;case 0x35:byteValue|=(byte)0x05;break;case 0x36:byteValue|=(byte)0x06;break;case 0x37:byteValue|=(byte)0x07;break;case 0x38:byteValue|=(byte)0x08;break;case 0x39:byteValue|=(byte)0x09;break;case 0x41:case 0x61:byteValue|=(byte)0x0A;break;case 0x42:case 0x62:byteValue|=(byte)0x0B;break;case 0x43:case 0x63:byteValue|=(byte)0x0C;break;case 0x44:case 0x64:byteValue|=(byte)0x0D;break;case 0x45:case 0x65:byteValue|=(byte)0x0E;break;case 0x46:case 0x66:byteValue|=(byte)0x0F;break;default :LocalizableMessage message=ERR_LDAP_FILTER_INVALID_ESCAPED_BYTE.get(filterString,equalPos + i + 1);throw new LDAPException(LDAPResultCode.PROTOCOL_ERROR,message);}buffer.appendByte(byteValue);} else {buffer.appendByte(valueBytes[i]);}}subFinal=buffer.toByteString();} else {subFinal=ByteString.wrap(valueBytes,firstPos + 1,length);}}return new LDAPFilter(FilterType.SUBSTRING,null,null,attrDesc,null,subInitial,subAny,subFinal,null,false);}  }
class C{  public int exprGetNumChildren(){  return getLength();}  }
class C{  public void handleRequest(List arguments){  try {    InstallLogger migrateLog=new InstallLogger(STR_MIGRATE);    MultipleMigrateDriver driver=new MultipleMigrateDriver();    if (arguments.isEmpty()) {      Debug.log("MigrateHandler: invoked with 0 arguments.");      driver.migrate(migrateLog);    } else     if (arguments.size() == 2) {      Debug.log("MigrateHandler: invoked with 1 or more arguments.");      driver.migrate(migrateLog);    }  } catch (  InstallAbortException ia) {    Debug.log("MigrateHandler: User Requested Abort ",ia);    Console.printlnRawText(ia.getMessage());  }catch (  InstallException ex) {    Debug.log("MigrateHandler: Failed to process migrate request ",ex);    printConsoleMessage(LOC_HR_ERR_MIGRATE,new Object[]{ex.getMessage()});  }}  }
class C{  private int abortWait(int phase){  AtomicReference<QNode> head=(phase & 1) == 0 ? evenQ : oddQ;  for (; ; ) {    Thread t;    QNode q=head.get();    int p=(int)(root.state >>> PHASE_SHIFT);    if (q == null || ((t=q.thread) != null && q.phase == p))     return p;    if (head.compareAndSet(q,q.next) && t != null) {      q.thread=null;      LockSupport.unpark(t);    }  }}  }
class C{  public int hashCode(){  if (!isHashValueSet) {    hashValue=super.hashCode();    isHashValueSet=true;  }  return hashValue;}  }
class C{  public RecordRouteHeader createRecordRouteHeader(Address address){  if (address == null)   throw new NullPointerException("Null argument!");  RecordRoute recordRoute=new RecordRoute();  recordRoute.setAddress(address);  return recordRoute;}  }
class C{  public void inserts(String extFile,String origFileName,String tag) throws IOException {  String content=getMatched(extFile);  if (content.length() > 0) {    content+="\n" + tag;    String orig=getFileContent(origFileName);    orig=StringUtils.strReplaceAll(orig,tag,content);    writeToFile(origFileName,orig);  }}  }
class C{  private static int spinsFor(Node pred,boolean haveData){  if (MP && pred != null) {    if (pred.isData != haveData)     return FRONT_SPINS + CHAINED_SPINS;    if (pred.isMatched())     return FRONT_SPINS;    if (pred.waiter == null)     return CHAINED_SPINS;  }  return 0;}  }
class C{  public static XMPMeta parse(Object input,ParseOptions options) throws XMPException {  ParameterAsserts.assertNotNull(input);  options=options != null ? options : new ParseOptions();  Document document=parseXml(input,options);  boolean xmpmetaRequired=options.getRequireXMPMeta();  Object[] result=new Object[3];  result=findRootNode(document,xmpmetaRequired,result);  if (result != null && result[1] == XMP_RDF) {    XMPMetaImpl xmp=ParseRDF.parse((Node)result[0]);    xmp.setPacketHeader((String)result[2]);    if (!options.getOmitNormalization()) {      return XMPNormalizer.process(xmp,options);    } else {      return xmp;    }  } else {    return new XMPMetaImpl();  }}  }
class C{  private void remove_concave_corners_at_close(){  add_corner_for_snap_angle();  if (corner_list.size() < 4) {    return;  }  PlaPointInt[] corner_arr=new PlaPointInt[corner_list.size()];  Iterator<PlaPointInt> it=corner_list.iterator();  for (int i=0; i < corner_arr.length; ++i) {    corner_arr[i]=it.next();  }  int new_length=corner_arr.length;  PlaPointInt first_corner=corner_arr[0];  PlaPointInt second_corner=corner_arr[1];  while (new_length > 3) {    PlaPointInt last_corner=corner_arr[new_length - 1];    if (last_corner.side_of(second_corner,first_corner) != PlaSide.ON_THE_LEFT) {      break;    }    --new_length;  }  if (new_length != corner_arr.length) {    corner_list=new java.util.LinkedList<PlaPointInt>();    for (int i=0; i < new_length; ++i) {      corner_list.add(corner_arr[i]);    }    add_corner_for_snap_angle();  }}  }
class C{  public String defaultValue(Field field,PythonImportHandler importHandler){  return defaultValue(field.getType(),importHandler);}  }
class C{  public FrameBodyTPE3(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.ManifestType createManifestType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.ManifestTypeImpl();}  }
class C{  public boolean equals(Object other){  if (other == null)   return false;  if (!this.getClass().equals(other.getClass()))   return false;  GenericObjectList that=(GenericObjectList)other;  if (this.size() != that.size())   return false;  ListIterator myIterator=this.listIterator();  while (myIterator.hasNext()) {    Object myobj=myIterator.next();    ListIterator hisIterator=that.listIterator();    try {      while (true) {        Object hisobj=hisIterator.next();        if (myobj.equals(hisobj))         break;      }    } catch (    NoSuchElementException ex) {      return false;    }  }  ListIterator hisIterator=that.listIterator();  while (hisIterator.hasNext()) {    Object hisobj=hisIterator.next();    myIterator=this.listIterator();    try {      while (true) {        Object myobj=myIterator.next();        if (hisobj.equals(myobj))         break;      }    } catch (    NoSuchElementException ex) {      return false;    }  }  return true;}  }
class C{  public LibLogicalPart(String p_name,int p_no,LibLogicalPin[] p_part_pin_arr){  name=p_name;  part_no=p_no;  part_pin_arr=p_part_pin_arr;}  }
class C{  public final String readInput(LocalizableMessage prompt,final String defaultValue,final Style msgStyle) throws ClientException {  if (msgStyle != null && msgStyle == Style.TITLE) {    println();  }  while (true) {    if (defaultValue != null) {      prompt=INFO_PROMPT_SINGLE_DEFAULT.get(prompt,defaultValue);    }    final String response=readLineOfInput(prompt);    if (msgStyle != null && (msgStyle == Style.TITLE || msgStyle == Style.SUBTITLE)) {      println();    }    if ("".equals(response)) {      if (defaultValue != null) {        return defaultValue;      }      println(INFO_ERROR_EMPTY_RESPONSE.get());    }    return response;  }}  }
class C{  public void addCircleOfTrustMember(String realm,String cotName,String protocolType,String entityId,boolean addToEntityConfig) throws COTException {  String classMethod="COTManager.addCircleOfTrustMember: ";  if (realm == null) {    realm="/";  }  if ((cotName == null) || (cotName.trim().length() == 0)) {    String[] data={realm};    LogUtil.error(Level.INFO,LogUtil.NULL_COT_NAME_ADD_COT_DESCRIPTOR,data);    throw new COTException("invalidCOTName",null);  }  if ((entityId == null) || (entityId.trim().length() == 0)) {    String[] data={realm};    LogUtil.error(Level.INFO,LogUtil.NULL_ENTITYID_ADD_COT_DESCRIPTOR,data);    throw new COTException("invalidEntityID",null);  }  try {    Map attrs=configInst.getConfiguration(realm,cotName);    isValidProtocolType(protocolType);    if (addToEntityConfig) {      updateEntityConfig(realm,cotName,protocolType,entityId);    }    CircleOfTrustDescriptor cotDesc;    if (attrs == null) {      cotDesc=new CircleOfTrustDescriptor(cotName,realm,"active");    } else {      cotDesc=new CircleOfTrustDescriptor(cotName,realm,attrs);    }    if (!cotDesc.add(entityId,protocolType)) {      debug.error(classMethod + "fail to add entityid to the circle of trust." + entityId+ " in Realm "+ realm);      String[] args={realm,entityId};      throw new COTException("addCOTFailed",args);    } else {      modifyCircleOfTrust(realm,cotDesc);    }  } catch (  ConfigurationException e) {    debug.error(classMethod,e);    String[] data={e.getMessage(),cotName,entityId,realm};    LogUtil.error(Level.INFO,LogUtil.CONFIG_ERROR_ADD_COT_MEMBER,data);    throw new COTException(e);  }catch (  JAXBException jbe) {    debug.error(classMethod,jbe);    String[] data={jbe.getMessage(),cotName,entityId,realm};    LogUtil.error(Level.INFO,LogUtil.CONFIG_ERROR_CREATE_COT_DESCRIPTOR,data);    throw new COTException(jbe);  }}  }
class C{  public String encode(){  String retval;  if (statusLine != null)   retval=statusLine.encode() + super.encode(); else   retval=super.encode();  return retval;}  }
class C{  public void deleteSubRealms(String parentRealm,Collection names) throws AMConsoleException {  String[] params=new String[2];  params[0]=parentRealm;  String currentName="";  try {    OrganizationConfigManager orgMgr=new OrganizationConfigManager(getUserSSOToken(),parentRealm);    List orderedByLength=AMAdminUtils.orderByStringLength(names);    for (Iterator iter=orderedByLength.iterator(); iter.hasNext(); ) {      String name=(String)iter.next();      currentName=name;      params[1]=name;      logEvent("ATTEMPT_DELETE_REALM",params);      orgMgr.deleteSubOrganization(name,true);      logEvent("SUCCEED_DELETE_REALM",params);    }  } catch (  SMSException e) {    String strError=getErrorString(e);    String[] paramsEx={parentRealm,currentName,strError};    logEvent("SMS_EXCEPTION_DELETE_REALM",paramsEx);    throw new AMConsoleException(strError);  }}  }
class C{  @Override public boolean equals(Object obj){  return obj instanceof GregorianCalendar && super.equals(obj) && gregorianCutover == ((GregorianCalendar)obj).gregorianCutover;}  }
class C{  protected void writeEndTag(String endTag) throws IOException {  decrIndent();  indent();  write(endTag);  write(NEWLINE);}  }
class C{  @Override public void processExtendedOperation(ExtendedOperation operation){  operation.setResultCode(ResultCode.UNDEFINED);  ClientConnection clientConnection=operation.getClientConnection();  if (!clientConnection.hasPrivilege(Privilege.PASSWORD_RESET,operation)) {    LocalizableMessage message=ERR_PWPSTATE_EXTOP_NO_PRIVILEGE.get();    operation.appendErrorMessage(message);    operation.setResultCode(ResultCode.INSUFFICIENT_ACCESS_RIGHTS);    return;  }  ByteString requestValue=operation.getRequestValue();  if (requestValue == null) {    LocalizableMessage message=ERR_PWPSTATE_EXTOP_NO_REQUEST_VALUE.get();    operation.appendErrorMessage(message);    operation.setResultCode(ResultCode.PROTOCOL_ERROR);    return;  }  ByteString dnString;  ASN1Reader reader=ASN1.getReader(requestValue);  try {    reader.readStartSequence();    dnString=reader.readOctetString();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_PWPSTATE_EXTOP_DECODE_FAILURE.get(getExceptionMessage(e));    operation.appendErrorMessage(message);    operation.setResultCode(ResultCode.PROTOCOL_ERROR);    return;  }  DN targetDN;  try {    targetDN=DN.valueOf(dnString);  } catch (  LocalizedIllegalArgumentException e) {    logger.traceException(e);    operation.setResultCode(ResultCode.INVALID_DN_SYNTAX);    operation.appendErrorMessage(e.getMessageObject());    return;  }  DN rootDN=DirectoryServer.getActualRootBindDN(targetDN);  if (rootDN != null) {    targetDN=rootDN;  }  Entry userEntry;  InternalClientConnection conn=new InternalClientConnection(clientConnection.getAuthenticationInfo());  userEntry=searchUserEntry(conn,operation,targetDN);  if (userEntry == null) {    return;  }  PasswordPolicyState pwpState;  try {    AuthenticationPolicy policy=AuthenticationPolicy.forUser(userEntry,false);    if (!policy.isPasswordPolicy()) {      operation.setResultCode(ResultCode.UNWILLING_TO_PERFORM);      operation.appendErrorMessage(ERR_EXTOP_PWPSTATE_ACCOUNT_NOT_LOCAL.get(userEntry));      return;    }    pwpState=(PasswordPolicyState)policy.createAuthenticationPolicyState(userEntry);  } catch (  DirectoryException de) {    logger.traceException(de);    operation.setResponseData(de);    return;  }  PasswordPolicy policy=pwpState.getAuthenticationPolicy();  isAccountSetDisabled=false;  isAccountSetEnabled=false;  boolean returnAll;  LinkedHashSet<Integer> returnTypes=new LinkedHashSet<>();  try {    if (!reader.hasNextElement()) {      returnAll=true;    } else     if (reader.peekLength() <= 0) {      returnAll=true;      reader.readStartSequence();      reader.readEndSequence();    } else {      returnAll=false;      reader.readStartSequence();      while (reader.hasNextElement()) {        int opType;        ArrayList<String> opValues;        reader.readStartSequence();        opType=(int)reader.readInteger();        if (!reader.hasNextElement()) {          opValues=null;        } else         if (reader.peekLength() <= 0) {          opValues=null;          reader.readStartSequence();          reader.readEndSequence();        } else {          reader.readStartSequence();          opValues=new ArrayList<>();          while (reader.hasNextElement()) {            opValues.add(reader.readOctetStringAsString());          }          reader.readEndSequence();        }        reader.readEndSequence();        if (!processOp(opType,opValues,operation,returnTypes,pwpState,policy)) {          return;        }      }      reader.readEndSequence();    }    reader.readEndSequence();    List<Modification> stateMods=pwpState.getModifications();    if (stateMods != null && !stateMods.isEmpty()) {      ModifyOperation modifyOperation=conn.processModify(targetDN,stateMods);      if (modifyOperation.getResultCode() != ResultCode.SUCCESS) {        operation.setResultCode(modifyOperation.getResultCode());        operation.setErrorMessage(modifyOperation.getErrorMessage());        operation.setMatchedDN(modifyOperation.getMatchedDN());        operation.setReferralURLs(modifyOperation.getReferralURLs());        return;      }      userEntry=searchUserEntry(conn,operation,targetDN);      if (userEntry == null) {        return;      }      try {        pwpState=(PasswordPolicyState)policy.createAuthenticationPolicyState(userEntry);      } catch (      DirectoryException de) {        logger.traceException(de);        operation.setResponseData(de);        return;      }    }  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_PWPSTATE_EXTOP_INVALID_OP_ENCODING.get(e.getLocalizedMessage());    operation.appendErrorMessage(message);    operation.setResultCode(ResultCode.PROTOCOL_ERROR);    return;  }  try {    ByteString responseValue=encodeResponse(dnString,returnAll,returnTypes,pwpState,policy);    operation.setResponseOID(OID_PASSWORD_POLICY_STATE_EXTOP);    operation.setResponseValue(responseValue);    operation.setResultCode(ResultCode.SUCCESS);  } catch (  Exception e) {    LocalizableMessage message=ERR_PWPSTATE_EXTOP_INVALID_OP_ENCODING.get(e.getLocalizedMessage());    operation.appendErrorMessage(message);    operation.setResultCode(ResultCode.PROTOCOL_ERROR);  }  if (isAccountSetDisabled) {    pwpState.generateAccountStatusNotification(AccountStatusNotificationType.ACCOUNT_DISABLED,userEntry,INFO_MODIFY_ACCOUNT_DISABLED.get(),AccountStatusNotification.createProperties(pwpState,false,-1,null,null));  }  if (isAccountSetEnabled) {    pwpState.generateAccountStatusNotification(AccountStatusNotificationType.ACCOUNT_ENABLED,userEntry,INFO_MODIFY_ACCOUNT_ENABLED.get(),AccountStatusNotification.createProperties(pwpState,false,-1,null,null));  }}  }
class C{  public static <V>int distinctList(List<V> sourceList){  if (isEmpty(sourceList)) {    return 0;  }  int sourceCount=sourceList.size();  int sourceListSize=sourceList.size();  for (int i=0; i < sourceListSize; i++) {    for (int j=(i + 1); j < sourceListSize; j++) {      if (sourceList.get(i).equals(sourceList.get(j))) {        sourceList.remove(j);        sourceListSize=sourceList.size();        j--;      }    }  }  return sourceCount - sourceList.size();}  }
class C{  public boolean isMutable(){  return mutable;}  }
class C{  public RetryAfterParser(String retryAfter){  super(retryAfter);}  }
class C{  protected void uninstallListeners(){  if (keyListener != null) {    comboBox.removeKeyListener(keyListener);  }  if (itemListener != null) {    comboBox.removeItemListener(itemListener);  }  if (propertyChangeListener != null) {    comboBox.removePropertyChangeListener(propertyChangeListener);  }  if (focusListener != null) {    comboBox.removeFocusListener(focusListener);  }  if (popupMouseListener != null) {    comboBox.removeMouseListener(popupMouseListener);  }  if (popupMouseMotionListener != null) {    comboBox.removeMouseMotionListener(popupMouseMotionListener);  }  if (popupKeyListener != null) {    comboBox.removeKeyListener(popupKeyListener);  }  if (comboBox.getModel() != null) {    if (listDataListener != null) {      comboBox.getModel().removeListDataListener(listDataListener);    }  }  if (mouseWheelListener != null) {    comboBox.removeMouseWheelListener(mouseWheelListener);  }}  }
class C{  public static CommandResult execCommand(List<String> commands,boolean isRoot,boolean isNeedResultMsg){  return execCommand(commands == null ? null : commands.toArray(new String[]{}),isRoot,isNeedResultMsg);}  }
class C{  static void putFederation(String realm,String federationId,FederationElement federation){  String cacheKey=buildCacheKey(realm,federationId);  if (federation != null) {    if (debug.messageEnabled()) {      debug.message("WSFederationMetaCache.putFederation: " + "cacheKey = " + cacheKey);    }    federationCache.put(cacheKey,federation);  } else {    if (debug.messageEnabled()) {      debug.message("WSFederationMetaCache.putFederation: delete cacheEey = " + cacheKey);    }    federationCache.remove(cacheKey);    configCache.remove(cacheKey);  }}  }
class C{  public void updateUI(){  setUI((ViewportUI)UIManager.getUI(this));}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  Node clonedNode;  Node parentNode;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(1);  clonedNode=employeeNode.cloneNode(false);  parentNode=clonedNode.getParentNode();  assertNull("nodeCloneGetParentNullAssert1",parentNode);}  }
class C{  public ArraySet(){  this(3);}  }
class C{  public void remove(Component child){  child.removeComponentListener(viewListener);  super.remove(child);}  }
class C{  public InputStream call(String message,String lbcookie,String cookies) throws Exception {  if (lbcookie != null) {    if ((cookies == null) || (cookies.length() == 0)) {      cookies=lbcookie;    } else {      cookies=cookies + ";" + lbcookie;    }  }  return (call(message,cookies).getResponse());}  }
class C{  public SignatureVisitor visitParameterType(){  return this;}  }
class C{  public int difference(String s1,String s2) throws EncoderException {  return SoundexUtils.difference(this,s1,s2);}  }
class C{  protected void uninstallComponents(){  if (rendererPane != null) {    tree.remove(rendererPane);  }}  }
class C{  private String generateHash(String algorithm,String valueToEncode,OAuth2ProviderSettings providerSettings) throws ServerException {  if (!providerSettings.getSupportedIDTokenSigningAlgorithms().contains(algorithm)) {    logger.message("Unsupported signing algorithm requested for hash value.");    return null;  }  final JwsAlgorithm alg=JwsAlgorithm.valueOf(algorithm);  MessageDigest digest;  try {    digest=MessageDigest.getInstance(alg.getMdAlgorithm());  } catch (  NoSuchAlgorithmException e) {    logger.message("Unsupported signing algorithm chosen for hashing.");    throw new ServerException("Algorithm not supported.");  }  final byte[] result=digest.digest(valueToEncode.getBytes(Utils.CHARSET));  final byte[] toEncode=Arrays.copyOfRange(result,0,result.length / 2);  return Base64url.encode(toEncode);}  }
class C{  private int enumerateGeneric(Object[] enumeration,boolean recurse,int enumerationIndex,boolean enumeratingThreads){  if (enumeratingThreads) {synchronized (threadRefs) {      for (int i=threadRefs.size() - 1; i >= 0; --i) {        Thread thread=threadRefs.get(i).get();        if (thread != null && thread.isAlive()) {          if (enumerationIndex >= enumeration.length) {            return enumerationIndex;          }          enumeration[enumerationIndex++]=thread;        }      }    }  } else {synchronized (groups) {      for (int i=groups.size() - 1; i >= 0; --i) {        if (enumerationIndex >= enumeration.length) {          return enumerationIndex;        }        enumeration[enumerationIndex++]=groups.get(i);      }    }  }  if (recurse) {synchronized (groups) {      for (      ThreadGroup group : groups) {        if (enumerationIndex >= enumeration.length) {          return enumerationIndex;        }        enumerationIndex=group.enumerateGeneric(enumeration,recurse,enumerationIndex,enumeratingThreads);      }    }  }  return enumerationIndex;}  }
class C{  private void updateSchema() throws OpenDsException {  if (isServerRunning()) {    updateSchemaOnline();  } else {    updateSchemaOffline();  }}  }
class C{  public String toString(){switch (type) {case '*':    return content + "*";case '?':  return content + "?";case '+':return content + "+";case ',':case '|':case '&':char data[]={' ',(char)type,' '};String str="";for (ContentModel m=(ContentModel)content; m != null; m=m.next) {str=str + m;if (m.next != null) {str+=new String(data);}}return "(" + str + ")";default :return content.toString();}}  }
class C{  public void testDisconnect_NonBlockWithServerChannelClosed() throws IOException {  this.channel1.configureBlocking(false);  connectLocalServer();  this.channel1.close();  disconnectAfterClosed();}  }
class C{  public void unread(int c) throws IOException {synchronized (lock) {    ensureOpen();    if (pos == 0)     throw new IOException("Pushback buffer overflow");    buf[--pos]=(char)c;  }}  }
class C{  public void testIntValuePos(){  String a="123809648392384754573567356745735.63567890295784902768787678287E+21";  BigDecimal aNumber=new BigDecimal(a);  int result=-218520473;  assertTrue("incorrect value",aNumber.intValue() == result);}  }
class C{  public OptionalMethod(Class<?> returnType,String methodName,Class... methodParams){  this.returnType=returnType;  this.methodName=methodName;  this.methodParams=methodParams;}  }
class C{  private boolean removeAcquiredTrigger(Trigger trigger,String instanceId) throws JobPersistenceException {synchronized (lock) {    try {      logger.debug("Removing acquired trigger {} for instance {}",trigger.getName(),instanceId);      boolean result=false;      int retries=0;      while (writeRetries == -1 || retries <= writeRetries && !shutdown) {        try {          result=removeRepoListName(getTriggerId(trigger.getGroup(),trigger.getName()),ACQUIRED_TRIGGERS_RESOURCE_PATH,instanceId);          break;        } catch (        PreconditionFailedException e) {          logger.debug("Removing acquired trigger failed {}, retrying",e);          retries++;        }      }      return result;    } catch (    ResourceException e) {      throw new JobPersistenceException("Error removing waiting trigger",e);    }  }}  }
class C{  public void add(AddRequest request) throws LdapException {  addControls(request);  conn.getConnection().add(request);}  }
class C{  static void copySubConfig(ServiceConfig from,ServiceConfig to,ServiceSchema serviceSchema) throws SMSException, SSOException {  Set subConfigNames=from.getSubConfigNames();  for (Iterator items=subConfigNames.iterator(); items.hasNext(); ) {    String subConfigName=(String)items.next();    ServiceConfig scf=from.getSubConfig(subConfigName);    ServiceSchema subSchema=serviceSchema.getSubSchema(scf.getSchemaID());    if (subSchema.isRealmCloneable()) {      to.addSubConfig(subConfigName,scf.getSchemaID(),scf.getPriority(),scf.getAttributesWithoutDefaults());      ServiceConfig sct=to.getSubConfig(subConfigName);      copySubConfig(scf,sct,subSchema);    }  }}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  backTrail();  forwardToPolicyViewBean();}  }
class C{  public BeanContextSupport(BeanContext peer,Locale lcle){  this(peer,lcle,false,true);}  }
class C{  public ServerWriter(Session session,ServerHandler handler,ReplicationServerDomain replicationServerDomain,DSRSShutdownSync dsrsShutdownSync){  super("Replication server RS(" + handler.getReplicationServerId() + ") writing to "+ handler+ " at "+ (session != null ? session.getReadableRemoteAddress() : "unknown"));  this.session=session;  this.handler=handler;  this.replicationServerDomain=replicationServerDomain;  this.dsrsShutdownSync=dsrsShutdownSync;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(processinginstructionsetdatanomodificationallowederrEE.class,args);}  }
class C{  public final void testSetSystemScope(){  IdentityScope systemScope=IdentityScope.getSystemScope();  try {    is=new IdentityScopeStub("Aleksei Semenov");    IdentityScopeStub.mySetSystemScope(is);    assertSame(is,IdentityScope.getSystemScope());  }  finally {    IdentityScopeStub.mySetSystemScope(systemScope);  }}  }
class C{  public void uninstallUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);  }}  }
class C{  public void testGetBaseURI() throws IOException, SAXException {  File f=Support_Resources.resourceToTempFile("/simple.xml");  Document d=db.parse(f);  assertTrue(d.getDocumentElement().getBaseURI().startsWith("file://"));}  }
class C{  private void updateImageSize(){  int newWidth=0;  int newHeight=0;  int newState=0;  Image newImage=getImage();  if (newImage != null) {    Element elem=getElement();    AttributeSet attr=elem.getAttributes();    newWidth=getIntAttr(HTML.Attribute.WIDTH,-1);    if (newWidth > 0) {      newState|=WIDTH_FLAG;    }    newHeight=getIntAttr(HTML.Attribute.HEIGHT,-1);    if (newHeight > 0) {      newState|=HEIGHT_FLAG;    }    if (newWidth <= 0) {      newWidth=newImage.getWidth(imageObserver);      if (newWidth <= 0) {        newWidth=DEFAULT_WIDTH;      }    }    if (newHeight <= 0) {      newHeight=newImage.getHeight(imageObserver);      if (newHeight <= 0) {        newHeight=DEFAULT_HEIGHT;      }    }    if ((newState & (WIDTH_FLAG | HEIGHT_FLAG)) != 0) {      Toolkit.getDefaultToolkit().prepareImage(newImage,newWidth,newHeight,imageObserver);    } else {      Toolkit.getDefaultToolkit().prepareImage(newImage,-1,-1,imageObserver);    }    boolean createText=false;synchronized (this) {      if (image != null) {        if ((newState & WIDTH_FLAG) == WIDTH_FLAG || width == 0) {          width=newWidth;        }        if ((newState & HEIGHT_FLAG) == HEIGHT_FLAG || height == 0) {          height=newHeight;        }      } else {        createText=true;        if ((newState & WIDTH_FLAG) == WIDTH_FLAG) {          width=newWidth;        }        if ((newState & HEIGHT_FLAG) == HEIGHT_FLAG) {          height=newHeight;        }      }      state=state | newState;      state=(state | LOADING_FLAG) ^ LOADING_FLAG;    }    if (createText) {      updateAltTextView();    }  } else {    width=height=DEFAULT_HEIGHT;    updateAltTextView();  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(attrdefaultvalue.class,args);}  }
class C{  public void parseParameters(List<VariableDef> variableDefList,int i,SInvokable invokable,List<Import> imports,boolean allowAccessModifier) throws SyntaxException {  for (int j=0; j < i; ++j) {    VariableDef v=variableDefList.get(j);    SParameter param=new SParameter();    param.setName(v.getName());    param.setTarget(invokable);    STypeDef type;    if (v.getType() == null) {      type=getTypeWithName("java.lang.Object",v.line_col());    } else {      type=getTypeWithAccess(v.getType(),imports);    }    param.setType(type);    for (    Modifier m : v.getModifiers()) {switch (m.modifier) {case VAL:        param.setCanChange(false);      break;case PUBLIC:case PRIVATE:case PROTECTED:case PKG:    if (!allowAccessModifier) {      err.SyntaxException("access modifiers for parameters are only allowed on class constructing parameters",m.line_col());      return;    }  break;case NONNULL:param.setNotNull(true);break;case NONEMPTY:param.setNotEmpty(true);break;default :err.UnexpectedTokenException("valid modifier for parameters (val)",m.toString(),m.line_col());return;}}parseAnnos(v.getAnnos(),param,imports,ElementType.PARAMETER,allowAccessModifier ? Collections.singletonList(ElementType.FIELD) : Collections.emptyList());invokable.getParameters().add(param);}}  }
class C{  boolean matchesOptionalSpacesFollowedBy(String s){  Mark mark=mark();  skipSpaces();  boolean result=matches(s);  if (!result) {    setCurrent(mark);  }  return result;}  }
class C{  public void execute(RequestContext rc) throws CLIException {  CommandManager mgr=rc.getCommandManager();  if (mgr.isVerbose()) {    mgr.getOutputWriter().printlnMessage(rc.getResourceString("verbose-processing-sub-command"));  }  try {    Class<? extends CLICommand> clazz=Class.forName(implClassName).asSubclass(CLICommand.class);    CLICommand cmd=InjectorHolder.getInstance(clazz);    cmd.handleRequest(rc);  } catch (  ClassNotFoundException e) {    throw new CLIException(e.getMessage(),ExitCodes.SUBCOMMAND_IMPLEMENT_CLASS_NOTFOUND);  }}  }
class C{  private void doCancelTest(boolean rfc3261Compliant){  try {    Request invite=createTiInviteRequest(null,null,null);    ClientTransaction tran=null;    try {      eventCollector.collectRequestEvent(riSipProvider);      tran=tiSipProvider.getNewClientTransaction(invite);      tran.sendRequest();    } catch (    SipException ex) {      throw new TiUnexpectedError("A SipExceptionOccurred while trying to send request!",ex);    }catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to regiest a SipListener with an RI SipProvider",ex);    }    waitForMessage();    RequestEvent inviteReceivedEvent=eventCollector.extractCollectedRequestEvent();    if (inviteReceivedEvent == null || inviteReceivedEvent.getRequest() == null)     throw new TiUnexpectedError("The invite request was not received by the RI!");    assertEquals(TransactionState.CALLING,tran.getState());    try {      eventCollector.collectResponseEvent(tiSipProvider);    } catch (    TooManyListenersException ex) {      throw new TiUnexpectedError("Failed to register a SipListener with TI",ex);    }    try {      Response resp=riMessageFactory.createResponse(Response.TRYING,inviteReceivedEvent.getRequest());      addStatus(inviteReceivedEvent.getRequest(),resp);      riSipProvider.sendResponse(resp);    } catch (    Throwable ex) {      throw new TckInternalError("The TCK could not send a trying response back to the TI",ex);    }    waitForMessage();    ResponseEvent responseEvent=eventCollector.extractCollectedResponseEvent();    assertNotNull("The Tested Implementation did not pass a 1xx response to the TU!",responseEvent);    assertNotNull("The Tested Implementation did not pass a 1xx response to the TU!",responseEvent.getResponse());    assertTrue("A response different from TYING was passed to the TU!",responseEvent.getResponse().getStatusCode() == Response.TRYING);    assertSame("The TRYING response was not associated with the right transaction.",tran,responseEvent.getClientTransaction());    assertEquals("The ClientTransaction did not pass in the PROCEEDING state after " + "receiving 1xx provisional response",tran.getState(),TransactionState.PROCEEDING);    Request tiCancel=tran.createCancel();    ClientTransaction tiCancelTrans;    try {      eventCollector.collectRequestEvent(riSipProvider);      tiCancelTrans=tiSipProvider.getNewClientTransaction(tiCancel);      tiCancelTrans.sendRequest();    } catch (    SipException ex) {      throw new TiUnexpectedError("A SipExceptionOccurred while trying to send CANCEL!",ex);    }    waitForMessage();    RequestEvent cancelReceivedEvent=eventCollector.extractCollectedRequestEvent();    if (cancelReceivedEvent == null || cancelReceivedEvent.getRequest() == null)     throw new TiUnexpectedError("The CANCEL request was not received by the RI!");    try {      eventCollector.collectResponseEvent(tiSipProvider);    } catch (    TooManyListenersException ex) {      throw new TiUnexpectedError("Failed to register a SipListener with TI",ex);    }    Response riCancelOk=null;    try {      riCancelOk=riMessageFactory.createResponse(Response.OK,cancelReceivedEvent.getRequest());      addStatus(cancelReceivedEvent.getRequest(),riCancelOk);      riSipProvider.sendResponse(riCancelOk);    } catch (    Throwable ex) {      throw new TckInternalError("The TCK could not send a CANCEL OK response back to the TI",ex);    }    waitForMessage();    responseEvent=eventCollector.extractCollectedResponseEvent();    if (responseEvent == null || responseEvent.getResponse() == null) {      throw new TiUnexpectedError("The CANCEL OK response was not received by the TI!");    }    try {      eventCollector.collectResponseEvent(tiSipProvider);    } catch (    TooManyListenersException ex) {      throw new TiUnexpectedError("Failed to register a SipListener with TI",ex);    }    SipEventCollector ackCollector=new SipEventCollector();    try {      ackCollector.collectRequestEvent(riSipProvider);    } catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to regiest a SipListener with an RI SipProvider",ex);    }    Response riInviteTerminated=null;    try {      riInviteTerminated=riMessageFactory.createResponse(Response.REQUEST_TERMINATED,inviteReceivedEvent.getRequest());      addStatus(inviteReceivedEvent.getRequest(),riInviteTerminated);      riSipProvider.sendResponse(riInviteTerminated);    } catch (    Throwable ex) {      throw new TckInternalError("The TCK could not send a INVITE 487 response back to the TI",ex);    }    waitForMessage();    responseEvent=eventCollector.extractCollectedResponseEvent();    assertNotNull("The Tested Implementation did not pass a 300-699 response to the TU!",responseEvent);    assertNotNull("The Tested Implementation did not pass a 300-699 response to the TU!",responseEvent.getResponse());    assertSame("The 487 response was not associated with the right transaction",tran,responseEvent.getClientTransaction());    assertEquals("A response different from 487 was passed to the TU",Response.REQUEST_TERMINATED,responseEvent.getResponse().getStatusCode());    assertEquals("The ClientTransaction did not pass in the COMPLETED state after " + "receiving 300-699 final response",tran.getState(),TransactionState.COMPLETED);    RequestEvent ackReceivedEvent=ackCollector.extractCollectedRequestEvent();    assertNotNull("The TI did not send an ACK request event",ackReceivedEvent);    assertNotNull("The TI did not send an ACK request",ackReceivedEvent.getRequest());    assertEquals(Request.ACK,ackReceivedEvent.getRequest().getMethod());  } catch (  Throwable exc) {    exc.printStackTrace();    fail(exc.getClass().getName() + ": " + exc.getMessage());  }  assertTrue(new Exception().getStackTrace()[0].toString(),true);}  }
class C{  public void addCookie(Cookie cookie){  if (this._getHttpServletResponse() != null) {    this._getHttpServletResponse().addCookie(cookie);    internalCookies.add(new RemoteCookie(cookie));  } else {    internalCookies.add(new RemoteCookie(cookie));  }}  }
class C{  protected void runSQL(String sql){  try {    DataSource dataSource=fooPersistence.getDataSource();    DB db=DBManagerUtil.getDB();    sql=db.buildSQL(sql);    sql=PortalUtil.transformSQL(sql);    SqlUpdate sqlUpdate=SqlUpdateFactoryUtil.getSqlUpdate(dataSource,sql);    sqlUpdate.update();  } catch (  Exception e) {    throw new SystemException(e);  }}  }
class C{  public synchronized String toString(){  StringBuffer sb=new StringBuffer();  if (dirtyComponents != null)   sb.append("" + dirtyComponents);  return sb.toString();}  }
class C{  public String toString(){  StringBuffer buf=new StringBuffer();  String nl=System.getProperty("line.separator");  buf.append("              Version: ").append(this.getVersion()).append(nl);  buf.append("             IssuerDN: ").append(this.getIssuerDN()).append(nl);  buf.append("          This update: ").append(this.getThisUpdate()).append(nl);  buf.append("          Next update: ").append(this.getNextUpdate()).append(nl);  buf.append("  Signature Algorithm: ").append(this.getSigAlgName()).append(nl);  byte[] sig=this.getSignature();  buf.append("            Signature: ").append(new String(Hex.encode(sig,0,20))).append(nl);  for (int i=20; i < sig.length; i+=20) {    if (i < sig.length - 20) {      buf.append("                       ").append(new String(Hex.encode(sig,i,20))).append(nl);    } else {      buf.append("                       ").append(new String(Hex.encode(sig,i,sig.length - i))).append(nl);    }  }  Extensions extensions=c.getTBSCertList().getExtensions();  if (extensions != null) {    Enumeration e=extensions.oids();    if (e.hasMoreElements()) {      buf.append("           Extensions: ").append(nl);    }    while (e.hasMoreElements()) {      ASN1ObjectIdentifier oid=(ASN1ObjectIdentifier)e.nextElement();      Extension ext=extensions.getExtension(oid);      if (ext.getExtnValue() != null) {        byte[] octs=ext.getExtnValue().getOctets();        ASN1InputStream dIn=new ASN1InputStream(octs);        buf.append("                       critical(").append(ext.isCritical()).append(") ");        try {          if (oid.equals(Extension.cRLNumber)) {            buf.append(new CRLNumber(ASN1Integer.getInstance(dIn.readObject()).getPositiveValue())).append(nl);          } else           if (oid.equals(Extension.deltaCRLIndicator)) {            buf.append("Base CRL: " + new CRLNumber(ASN1Integer.getInstance(dIn.readObject()).getPositiveValue())).append(nl);          } else           if (oid.equals(Extension.issuingDistributionPoint)) {            buf.append(IssuingDistributionPoint.getInstance(dIn.readObject())).append(nl);          } else           if (oid.equals(Extension.cRLDistributionPoints)) {            buf.append(CRLDistPoint.getInstance(dIn.readObject())).append(nl);          } else           if (oid.equals(Extension.freshestCRL)) {            buf.append(CRLDistPoint.getInstance(dIn.readObject())).append(nl);          } else {            buf.append(oid.getId());            buf.append(" value = ").append(ASN1Dump.dumpAsString(dIn.readObject())).append(nl);          }        } catch (        Exception ex) {          buf.append(oid.getId());          buf.append(" value = ").append("*****").append(nl);        }      } else {        buf.append(nl);      }    }  }  Set set=getRevokedCertificates();  if (set != null) {    Iterator it=set.iterator();    while (it.hasNext()) {      buf.append(it.next());      buf.append(nl);    }  }  return buf.toString();}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();}  }
class C{  public AMSearchResults(int count,Set results,int errorCode,Map map){  vlvResponseCount=count;  searchResults=results;  this.errorCode=errorCode;  resultsMap=map;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapreturnnull.class,args);}  }
class C{  public com.sun.identity.liberty.ws.paos.jaxb.RequestElement createRequestElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.paos.jaxb.impl.RequestElementImpl();}  }
class C{  private CacheEntry cacheLocked(ComponentName componentName,LauncherActivityInfoCompat info,UserHandleCompat user,boolean usePackageIcon,boolean useLowResIcon){  ComponentKey cacheKey=new ComponentKey(componentName,user);  CacheEntry entry=mCache.get(cacheKey);  if (entry == null || (entry.isLowResIcon && !useLowResIcon)) {    entry=new CacheEntry();    mCache.put(cacheKey,entry);    if (!getEntryFromDB(cacheKey,entry,useLowResIcon)) {      if (info != null) {        entry.icon=Utilities.createIconBitmap(info.getBadgedIcon(mIconDpi),mContext);      } else {        if (usePackageIcon) {          CacheEntry packageEntry=getEntryForPackageLocked(componentName.getPackageName(),user,false);          if (packageEntry != null) {            if (DEBUG)             Log.d(TAG,"using package default icon for " + componentName.toShortString());            entry.icon=packageEntry.icon;            entry.title=packageEntry.title;            entry.contentDescription=packageEntry.contentDescription;          }        }        if (entry.icon == null) {          if (DEBUG)           Log.d(TAG,"using default icon for " + componentName.toShortString());          entry.icon=getDefaultIcon(user);        }      }    }    if (TextUtils.isEmpty(entry.title) && info != null) {      entry.title=info.getLabel();      entry.contentDescription=mUserManager.getBadgedLabelForUser(entry.title,user);    }  }  return entry;}  }
class C{  public boolean isPsuedoVar(){  java.lang.String ns=m_qname.getNamespaceURI();  if ((null != ns) && ns.equals(RedundentExprEliminator.PSUEDOVARNAMESPACE)) {    if (m_qname.getLocalName().startsWith("#"))     return true;  }  return false;}  }
class C{  public PdfSignature(PdfName filter,PdfName subFilter){  this();  put(PdfName.Filter,filter);  put(PdfName.SubFilter,subFilter);}  }
class C{  public MLet(URL[] urls){  this(urls,true);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.X509DataType.X509Certificate createX509DataTypeX509Certificate(byte[] value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.X509DataTypeImpl.X509CertificateImpl(value);}  }
class C{  public void processDataFile(String filename) throws IOException {  ASN1Reader reader=ASN1.getReader(new FileInputStream(filename));  try {    reader.readStartSequence();    totalIntervals+=reader.readInteger();    long startTime=reader.readInteger();    long stopTime=reader.readInteger();    totalDuration+=stopTime - startTime;    reader.readEndSequence();    while (reader.hasNextElement()) {      ProfileStack stack=ProfileStack.decode(reader);      long count=reader.readInteger();      int pos=stack.getNumFrames() - 1;      if (pos < 0) {        continue;      }      String[] classNames=stack.getClassNames();      String[] methodNames=stack.getMethodNames();      int[] lineNumbers=stack.getLineNumbers();      ProfileStackFrame frame=new ProfileStackFrame(classNames[pos],methodNames[pos]);      ProfileStackFrame existingFrame=rootFrames.get(frame);      if (existingFrame == null) {        existingFrame=frame;      }      String classAndMethod=classNames[pos] + "." + methodNames[pos];      HashMap<ProfileStack,Long> stackMap=stacksByMethod.get(classAndMethod);      if (stackMap == null) {        stackMap=new HashMap<>();        stacksByMethod.put(classAndMethod,stackMap);      }      stackMap.put(stack,count);      existingFrame.updateLineNumberCount(lineNumbers[pos],count);      rootFrames.put(existingFrame,existingFrame);      existingFrame.recurseSubFrames(stack,pos - 1,count,stacksByMethod);    }  }  finally {    close(reader);  }}  }
class C{  public boolean isStableNumber(){  return true;}  }
class C{  @Override public void close(){  if (!closed) {    while (!stack.isEmpty()) {      pop();    }    closed=true;  }}  }
class C{  public static boolean isFMInstance(){  if (instanceType == null) {    instanceType=(String)configTags.get("INSTANCE_TYPE");  }  return (instanceType != null && instanceType.equalsIgnoreCase("FM"));}  }
class C{  private void switchRecordLayout(boolean recordingMode){  ActionBar actionBar=getActionBar();  invalidateOptionsMenu();  actionBar.setDisplayHomeAsUpEnabled(recordingMode);  actionBar.setHomeButtonEnabled(recordingMode);  actionBar.setTitle(recordingMode ? R.string.fm_recorder_name : R.string.app_name);  LinearLayout recBar=(LinearLayout)findViewById(R.id.bottom_bar_recorder);  LinearLayout bottomBar=(LinearLayout)findViewById(R.id.bottom_bar);  bottomBar.setVisibility(recordingMode ? View.GONE : View.VISIBLE);  recBar.setVisibility(recordingMode ? View.VISIBLE : View.GONE);  mButtonAddToFavorite.setVisibility(recordingMode ? View.GONE : View.VISIBLE);}  }
class C{  private static boolean areObjectClassesEqual(ObjectClass oc1,ObjectClass oc2){  return oc1.getOID().equals(oc2.getOID()) && Objects.equals(getElementDefinitionWithFileName(oc1),getElementDefinitionWithFileName(oc2)) && Objects.equals(oc1.getDescription(),oc2.getDescription())&& Objects.equals(oc1.getObjectClassType(),oc2.getObjectClassType())&& Objects.equals(oc1.getDeclaredOptionalAttributes(),oc2.getDeclaredOptionalAttributes())&& Objects.equals(oc1.getDeclaredRequiredAttributes(),oc2.getDeclaredRequiredAttributes())&& Objects.equals(oc1.getSuperiorClasses(),oc2.getSuperiorClasses())&& Objects.equals(oc1.getExtraProperties().keySet(),oc2.getExtraProperties().keySet())&& Objects.equals(toSet(oc1.getNames()),toSet(oc2.getNames()));}  }
class C{  @Override public void addValve(Valve valve){  if (valve instanceof Contained)   ((Contained)valve).setContainer(this.container);  if (getState().isAvailable()) {    if (valve instanceof Lifecycle) {      try {        ((Lifecycle)valve).start();      } catch (      LifecycleException e) {        log.error("StandardPipeline.addValve: start: ",e);      }    }  }  if (first == null) {    first=valve;    valve.setNext(basic);  } else {    Valve current=first;    while (current != null) {      if (current.getNext() == basic) {        current.setNext(valve);        valve.setNext(basic);        break;      }      current=current.getNext();    }  }  container.fireContainerEvent(Container.ADD_VALVE_EVENT,valve);}  }
class C{  public void fix_items(){  for (  BrdItem curr_ob : items_list) {    if (curr_ob.get_fixed_state().ordinal() < ItemFixState.USER_FIXED.ordinal()) {      curr_ob.set_fixed_state(ItemFixState.USER_FIXED);    }  }  actlog_start_scope(LogfileScope.FIX_SELECTED_ITEMS);}  }
class C{  public String toHexString(){  final StringBuilder buf=new StringBuilder(24);  for (  final byte b : toByteArray()) {    buf.append(String.format("%02x",b & 0xff));  }  return buf.toString();}  }
class C{  protected void processRequest(HttpServletRequest request,HttpServletResponse response) throws ServletException, java.io.IOException {  try {    RequestUtils.checkContentLength(request);  } catch (  L10NMessageImpl e) {    ISLocaleContext localeContext=new ISLocaleContext();    localeContext.setLocale(request);    java.util.Locale locale=localeContext.getLocale();    if (Debug.getInstance("amLoginLogoutMapping").messageEnabled()) {      Debug.getInstance("amLoginLogoutMapping").message("LoginLogoutMapping: " + e.getL10NMessage(locale));    }    throw new ServletException(e.getL10NMessage(locale));  }  String servletPath=request.getServletPath();  String forwardUrl="";  if (servletPath.equals("/login")) {    forwardUrl="/UI/Login";  } else   if (servletPath.equals("/logout")) {    forwardUrl="/UI/Logout";  }  RequestDispatcher dispatcher=config.getServletContext().getRequestDispatcher(forwardUrl);  dispatcher.forward(request,response);  return;}  }
class C{  final void chompNewline() throws IOException {  if ((pos != end || fillBuf() != -1) && buf[pos] == '\n') {    ++pos;  }}  }
class C{  public void testEquals(){  int effectiveKeyBits=10;  byte[] iv=new byte[]{1,2,3,4,5,6,7,8};  RC2ParameterSpec ps1=new RC2ParameterSpec(effectiveKeyBits,iv);  RC2ParameterSpec ps2=new RC2ParameterSpec(effectiveKeyBits,iv);  RC2ParameterSpec ps3=new RC2ParameterSpec(10,new byte[]{1,2,3,4,5,6,7,8,9});  assertTrue("The equivalence relation should be reflexive.",ps1.equals(ps1));  assertTrue("Objects built on the same parameters should be equal.",ps1.equals(ps2));  assertTrue("The equivalence relation should be symmetric.",ps2.equals(ps1));  assertTrue("Objects built on the equal parameters should be equal.",ps2.equals(ps3));  assertTrue("The equivalence relation should be transitive.",ps1.equals(ps3));  assertFalse("Should return not be equal to null object.",ps1.equals(null));  ps2=new RC2ParameterSpec(11,iv);  assertFalse("Objects should not be equal.",ps1.equals(ps2));  ps2=new RC2ParameterSpec(11,new byte[]{9,8,7,6,5,4,3,2,1});  assertFalse("Objects should not be equal.",ps1.equals(ps2));}  }
class C{  private boolean argumentsAreValid(){  if (backUpAll) {    if (!backendIDList.isEmpty()) {      logger.error(ERR_BACKUPDB_CANNOT_MIX_BACKUP_ALL_AND_BACKEND_ID,ATTR_TASK_BACKUP_ALL,ATTR_TASK_BACKUP_BACKEND_ID);      return false;    }  } else   if (backendIDList.isEmpty()) {    logger.error(ERR_BACKUPDB_NEED_BACKUP_ALL_OR_BACKEND_ID,ATTR_TASK_BACKUP_ALL,ATTR_TASK_BACKUP_BACKEND_ID);    return false;  }  if (super.isRecurring()) {    backupID=super.getTaskID();  }  if (backupID == null) {    SimpleDateFormat dateFormat=new SimpleDateFormat(DATE_FORMAT_GMT_TIME);    dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));    backupID=dateFormat.format(new Date());  }  if (incrementalBase != null && !incremental) {    logger.error(ERR_BACKUPDB_INCREMENTAL_BASE_REQUIRES_INCREMENTAL,ATTR_TASK_BACKUP_INCREMENTAL_BASE_ID,ATTR_TASK_BACKUP_INCREMENTAL);    return false;  }  if (signHash && !hash) {    logger.error(ERR_BACKUPDB_SIGN_REQUIRES_HASH,ATTR_TASK_BACKUP_SIGN_HASH,ATTR_TASK_BACKUP_HASH);    return false;  }  if (!backupDirectory.exists()) {    try {      backupDirectory.mkdirs();    } catch (    Exception e) {      LocalizableMessage message=ERR_BACKUPDB_CANNOT_CREATE_BACKUP_DIR.get(backupDirectory.getPath(),getExceptionMessage(e));      System.err.println(message);      return false;    }  }  int numBackends=configEntries.size();  backendsToArchive=new ArrayList<>(numBackends);  if (backUpAll) {    for (    Map.Entry<String,Entry> mapEntry : configEntries.entrySet()) {      Backend<?> b=DirectoryServer.getBackend(mapEntry.getKey());      if (b != null && b.supports(BackendOperation.BACKUP)) {        backendsToArchive.add(b);      }    }  } else {    for (    String id : backendIDList) {      Backend<?> b=DirectoryServer.getBackend(id);      if (b == null || configEntries.get(id) == null) {        logger.error(ERR_BACKUPDB_NO_BACKENDS_FOR_ID,id);      } else       if (!b.supports(BackendOperation.BACKUP)) {        logger.warn(WARN_BACKUPDB_BACKUP_NOT_SUPPORTED,b.getBackendID());      } else {        backendsToArchive.add(b);      }    }    if (backendsToArchive.size() != backendIDList.size()) {      return false;    }  }  if (backendsToArchive.isEmpty()) {    logger.warn(WARN_BACKUPDB_NO_BACKENDS_TO_ARCHIVE);    return false;  }  return true;}  }
class C{  public boolean isEncrypted(){  return isEncrypted;}  }
class C{  @Override public String toString(){  String s=null;  try {    s=toJSONObject().toString(2);  } catch (  JSONException e) {    PrivilegeManager.debug.error("EntitlementSubjectImpl.toString",e);  }  return s;}  }
class C{  public void testCertPathValidator06() throws NoSuchAlgorithmException, NoSuchProviderException {  if (!PKIXSupport) {    fail(NotSupportMsg);    return;  }  try {    CertPathValidator.getInstance(null,defaultProviderName);    fail("NullPointerException or NoSuchAlgorithmException must be thrown when algorithm is null");  } catch (  NullPointerException e) {  }catch (  NoSuchAlgorithmException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      CertPathValidator.getInstance(invalidValues[i],defaultProviderName);      fail("NoSuchAlgorithmException must be thrown");    } catch (    NoSuchAlgorithmException e1) {    }  }}  }
class C{  @Override public ThaiBuddhistDate dateEpochDay(long epochDay){  return new ThaiBuddhistDate(LocalDate.ofEpochDay(epochDay));}  }
class C{  public ItemStack(final ItemStack stack) throws IllegalArgumentException {  Validate.notNull(stack,"Cannot copy null stack");  this.type=stack.getTypeId();  this.amount=stack.getAmount();  this.durability=stack.getDurability();  this.data=stack.getData();  if (stack.hasItemMeta()) {    setItemMeta0(stack.getItemMeta(),getType0());  }}  }
class C{  public static String xmlClose(String xmlName){  return xmlCloseStart + xmlName + xmlCloseEnd;}  }
class C{  private boolean iterateChildren(Iterator iterator){  if (skipSiblings) {    skipSiblings=false;    subIterator=Collections.emptyIterator();  }  if ((!subIterator.hasNext()) && iterator.hasNext()) {    XMPNode child=(XMPNode)iterator.next();    index++;    subIterator=new NodeIterator(child,path,index);  }  if (subIterator.hasNext()) {    returnProperty=(XMPPropertyInfo)subIterator.next();    return true;  } else {    return false;  }}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) private void mergeLo(int base1,int len1,int base2,int len2){  assert len1 > 0 && len2 > 0 && base1 + len1 == base2;  Object[] a=this.a;  Object[] tmp=ensureCapacity(len1);  int cursor1=tmpBase;  int cursor2=base2;  int dest=base1;  System.arraycopy(a,base1,tmp,cursor1,len1);  a[dest++]=a[cursor2++];  if (--len2 == 0) {    System.arraycopy(tmp,cursor1,a,dest,len1);    return;  }  if (len1 == 1) {    System.arraycopy(a,cursor2,a,dest,len2);    a[dest + len2]=tmp[cursor1];    return;  }  int minGallop=this.minGallop;  outer:   while (true) {    int count1=0;    int count2=0;    do {      assert len1 > 1 && len2 > 0;      if (((Comparable)a[cursor2]).compareTo(tmp[cursor1]) < 0) {        a[dest++]=a[cursor2++];        count2++;        count1=0;        if (--len2 == 0)         break outer;      } else {        a[dest++]=tmp[cursor1++];        count1++;        count2=0;        if (--len1 == 1)         break outer;      }    } while ((count1 | count2) < minGallop);    do {      assert len1 > 1 && len2 > 0;      count1=gallopRight((Comparable)a[cursor2],tmp,cursor1,len1,0);      if (count1 != 0) {        System.arraycopy(tmp,cursor1,a,dest,count1);        dest+=count1;        cursor1+=count1;        len1-=count1;        if (len1 <= 1)         break outer;      }      a[dest++]=a[cursor2++];      if (--len2 == 0)       break outer;      count2=gallopLeft((Comparable)tmp[cursor1],a,cursor2,len2,0);      if (count2 != 0) {        System.arraycopy(a,cursor2,a,dest,count2);        dest+=count2;        cursor2+=count2;        len2-=count2;        if (len2 == 0)         break outer;      }      a[dest++]=tmp[cursor1++];      if (--len1 == 1)       break outer;      minGallop--;    } while (count1 >= MIN_GALLOP | count2 >= MIN_GALLOP);    if (minGallop < 0)     minGallop=0;    minGallop+=2;  }  this.minGallop=minGallop < 1 ? 1 : minGallop;  if (len1 == 1) {    assert len2 > 0;    System.arraycopy(a,cursor2,a,dest,len2);    a[dest + len2]=tmp[cursor1];  } else   if (len1 == 0) {    throw new IllegalArgumentException("Comparison method violates its general contract!");  } else {    assert len2 == 0;    assert len1 > 1;    System.arraycopy(tmp,cursor1,a,dest,len1);  }}  }
class C{  public static boolean equals(ImmutableList<?> xs,ImmutableList<?> ys){  while (xs.tail != null && ys.tail != null) {    if (xs.head == null) {      if (ys.head != null) {        return false;      }    } else {      if (!xs.head.equals(ys.head)) {        return false;      }    }    xs=xs.tail;    ys=ys.tail;  }  return xs.tail == null && ys.tail == null;}  }
class C{  protected void notifyScrollingListenersAboutStart(){  for (  OnWheelScrollListener listener : scrollingListeners) {    listener.onScrollingStarted(this);  }}  }
class C{  private boolean processBindRequest(LDAPMessage message,List<Control> controls){  BindRequestProtocolOp protocolOp=message.getBindRequestProtocolOp();  String versionString;switch (ldapVersion=protocolOp.getProtocolVersion()) {case 2:    versionString="2";  if (!connectionHandler.allowLDAPv2()) {    BindResponseProtocolOp responseOp=new BindResponseProtocolOp(LDAPResultCode.PROTOCOL_ERROR,ERR_LDAPV2_CLIENTS_NOT_ALLOWED.get());    sendLDAPMessage(new LDAPMessage(message.getMessageID(),responseOp));    disconnect(DisconnectReason.PROTOCOL_ERROR,false,ERR_LDAPV2_CLIENTS_NOT_ALLOWED.get());    return false;  }if (!controls.isEmpty()) {  BindResponseProtocolOp responseOp=new BindResponseProtocolOp(LDAPResultCode.PROTOCOL_ERROR,ERR_LDAPV2_CONTROLS_NOT_ALLOWED.get());  sendLDAPMessage(message,responseOp);  disconnectControlsNotAllowed();  return false;}break;case 3:versionString="3";break;default :BindResponseProtocolOp responseOp=new BindResponseProtocolOp(LDAPResultCode.PROTOCOL_ERROR,ERR_LDAP_UNSUPPORTED_PROTOCOL_VERSION.get(ldapVersion));sendLDAPMessage(new LDAPMessage(message.getMessageID(),responseOp));disconnect(DisconnectReason.PROTOCOL_ERROR,false,ERR_LDAP_UNSUPPORTED_PROTOCOL_VERSION.get(ldapVersion));return false;}ByteString bindDN=protocolOp.getDN();BindOperationBasis bindOp;switch (protocolOp.getAuthenticationType()) {case SIMPLE:bindOp=new BindOperationBasis(this,nextOperationID.getAndIncrement(),message.getMessageID(),controls,versionString,bindDN,protocolOp.getSimplePassword());break;case SASL:bindOp=new BindOperationBasis(this,nextOperationID.getAndIncrement(),message.getMessageID(),controls,versionString,bindDN,protocolOp.getSASLMechanism(),protocolOp.getSASLCredentials());break;default :LocalizableMessage msg=ERR_LDAP_INVALID_BIND_AUTH_TYPE.get(message.getMessageID(),protocolOp.getAuthenticationType());disconnect(DisconnectReason.PROTOCOL_ERROR,true,msg);return false;}try {addOperationInProgress(bindOp);} catch (DirectoryException de) {logger.traceException(de);BindResponseProtocolOp responseOp=new BindResponseProtocolOp(de.getResultCode().intValue(),de.getMessageObject(),de.getMatchedDN(),de.getReferralURLs());sendLDAPMessage(new LDAPMessage(message.getMessageID(),responseOp,bindOp.getResponseControls()));if (de.getResultCode() == ResultCode.PROTOCOL_ERROR) {LocalizableMessage msg=ERR_LDAP_DISCONNECT_DUE_TO_BIND_PROTOCOL_ERROR.get(message.getMessageID(),de.getMessageObject());disconnect(DisconnectReason.PROTOCOL_ERROR,true,msg);}}return connectionValid;}  }
class C{  public void createSAMLv2Provider(String realm,String entityId,Map values) throws AMConsoleException {  try {    List<String> metaAliases=getFederationAlias(values,MetaTemplateParameters.P_SAML_ALIASES);    Set<String> duplicateCheck=new HashSet<String>(metaAliases);    if (duplicateCheck.size() < metaAliases.size()) {      throw new AMConsoleException(getLocalizedString("federation.create.provider.duplicate.metaAlias"));    }    SAML2MetaManager mgr=new SAML2MetaManager();    mgr.validateMetaAliasForNewEntity(realm,metaAliases);    String metadata=CreateSAML2HostedProviderTemplate.buildMetaDataTemplate(entityId,values,requestURL);    String extendedData=CreateSAML2HostedProviderTemplate.createExtendedDataTemplate(entityId,values,requestURL);    ImportSAML2MetaData.importData(realm,metadata,extendedData);  } catch (  WorkflowException ex) {    throw new AMConsoleException(getErrorString(ex));  }catch (  SAML2MetaException ex) {    throw new AMConsoleException(getErrorString(ex));  }}  }
class C{  public static TitledBorder createTitledBorder(Border border,String title,int titleJustification,int titlePosition){  return new TitledBorder(border,title,titleJustification,titlePosition);}  }
class C{  @Override public void onTouchLetterSection(int sectionIndex,EasySection letterSection){  this.imageFloatingTv.setVisibility(View.VISIBLE);  this.imageFloatingIv.setVisibility(View.INVISIBLE);  this.imageFloatingTv.setText(letterSection.letter);  this.scrollToPosition(this.adapter.getPositionForSection(sectionIndex));}  }
class C{  public boolean connectionArgumentsPresent(){  return args != null && args.argumentsPresent();}  }
class C{  public Object clone(){  try {    @SuppressWarnings("unchecked") CopyOnWriteArrayList<E> clone=(CopyOnWriteArrayList<E>)super.clone();    clone.resetLock();    return clone;  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }}  }
class C{  private String encrypt(String in){  String result="";  try {    Cipher cipher=Cipher.getInstance(this.algorithm);    cipher.init(Cipher.ENCRYPT_MODE,key);    byte[] ciphertext=cipher.doFinal(in.getBytes(Charset.defaultCharset()));    result=Base64.encode(ciphertext).trim();  } catch (  GeneralSecurityException gse) {    logger.error("Unable to encrypt header",gse);  }  return result;}  }
class C{  protected boolean checkIfMatch(HttpServletRequest request,HttpServletResponse response,WebResource resource) throws IOException {  String eTag=resource.getETag();  String headerValue=request.getHeader("If-Match");  if (headerValue != null) {    if (headerValue.indexOf('*') == -1) {      StringTokenizer commaTokenizer=new StringTokenizer(headerValue,",");      boolean conditionSatisfied=false;      while (!conditionSatisfied && commaTokenizer.hasMoreTokens()) {        String currentToken=commaTokenizer.nextToken();        if (currentToken.trim().equals(eTag))         conditionSatisfied=true;      }      if (!conditionSatisfied) {        response.sendError(HttpServletResponse.SC_PRECONDITION_FAILED);        return false;      }    }  }  return true;}  }
class C{  public final boolean isLayered(){  return layered;}  }
class C{  public void paint(Graphics g){  g.clearRect(0,0,width,height);}  }
class C{  public static void test_callInstanceMethod(){  Target target=new Target();  assertSame("zorch",target.zorch());}  }
class C{  public boolean delete(String name){  String lcName=name.toLowerCase();  if (this.containsKey(lcName)) {    this.remove(lcName);    return true;  } else {    return false;  }}  }
class C{  public synchronized boolean isSubsetOfSet(NSSet otherSet){  for (  NSObject o : set) {    if (!otherSet.containsObject(o))     return false;  }  return true;}  }
class C{  public String toXMLString() throws FSMsgException {  return toXMLString(true,true);}  }
class C{  public boolean isEncrypted(){  return config.isConfidentialityEnabled();}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.TransformsType createTransformsType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.TransformsTypeImpl();}  }
class C{  SelectWordAction(){  super(selectWordAction);  start=new BeginWordAction("pigdog",false);  end=new EndWordAction("pigdog",true);}  }
class C{  public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws XACMLException {  String xmlString=null;  String nsPrefix="";  String nsDeclaration="";  if (includeNSPrefix) {    nsPrefix=XACMLConstants.CONTEXT_NS_PREFIX + ":";  }  if (declareNS) {    nsDeclaration=XACMLConstants.CONTEXT_NS_DECLARATION;  }  if (element != null) {    if (includeNSPrefix && (element.getPrefix() == null)) {      element.setPrefix(nsPrefix);    }    if (declareNS) {      StringTokenizer st=new StringTokenizer(nsDeclaration,"=");      String nsName=st.nextToken();      String nsUri=st.nextToken();      if (element.getAttribute(nsName) == null) {        element.setAttribute(nsName,nsUri);      }    }    xmlString=XMLUtils.print(element) + "\n";  } else {    StringBuffer sb=new StringBuffer(2000);    sb.append("<").append(nsPrefix).append(XACMLConstants.STATUS_DETAIL).append(" ").append(nsDeclaration).append(">").append("</").append(nsPrefix).append(XACMLConstants.STATUS_DETAIL).append(">\n");    xmlString=sb.toString();  }  return xmlString;}  }
class C{  public void testConnect_BlockWithServer() throws IOException {  assertTrue(this.channel1.isBlocking());  connectLocalServer();  datagramSocket1.close();  disconnectAfterConnected();}  }
class C{  public char first(){  pos=offset;  if (count != 0) {    return array[pos];  }  return DONE;}  }
class C{  public boolean isRequiredOrOptional(final AttributeType attributeType){  return isRequired(attributeType) || isOptional(attributeType);}  }
class C{  @SuppressWarnings("unchecked") public static <M>Iterable<M> emptyIterable(){  return (Iterable<M>)EMPTY_ITERABLE;}  }
class C{  protected Set<String> filterConfigs(Set<String> namedConfigs,ServiceConfig parentConfig,String realm,SSOToken adminToken){  return namedConfigs;}  }
class C{  protected void adjustRow(FlowView fv,int rowIndex,int desiredSpan,int x){}  }
class C{  private int parseTemplate(final int startLineNumber,final String startLine,final String[] lines,final TemplateData templateData,final List<LocalizableMessage> warnings) throws DecodeException {  final String[] templateLines=parseLinesUntilEndOfBlock(startLineNumber,startLine,lines,warnings);  final Template template=parseTemplateDefinition(startLineNumber,templateLines,templateData,warnings);  final String lowerName=template.getName().toLowerCase();  if (templateData.templates.containsKey(lowerName)) {    throw DecodeException.fatalError(ERR_ENTRY_GENERATOR_CONFLICTING_TEMPLATE_NAME.get(String.valueOf(template.getName()),startLineNumber + 1));  }  templateData.templates.put(lowerName,template);  return startLineNumber + templateLines.length;}  }
class C{  public boolean isIssued(){  Set<String> issued=getParameter(ISSUED);  return issued != null && Boolean.parseBoolean(issued.iterator().next());}  }
class C{  public static SearchFilter createGreaterOrEqualFilter(AttributeType attributeType,ByteString assertionValue){  return new SearchFilter(FilterType.GREATER_OR_EQUAL,null,null,attributeType,null,assertionValue,null,null,null,null,false);}  }
class C{  protected void readFDSelect(int Font){  int NumOfGlyphs=fonts[Font].nglyphs;  int[] FDSelect=new int[NumOfGlyphs];  seek(fonts[Font].fdselectOffset);  fonts[Font].FDSelectFormat=getCard8();switch (fonts[Font].FDSelectFormat) {case 0:    for (int i=0; i < NumOfGlyphs; i++) {      FDSelect[i]=getCard8();    }  fonts[Font].FDSelectLength=fonts[Font].nglyphs + 1;break;case 3:int nRanges=getCard16();int l=0;int first=getCard16();for (int i=0; i < nRanges; i++) {int fd=getCard8();int last=getCard16();int steps=last - first;for (int k=0; k < steps; k++) {FDSelect[l]=fd;l++;}first=last;}fonts[Font].FDSelectLength=1 + 2 + nRanges * 3 + 2;break;default :break;}fonts[Font].FDSelect=FDSelect;}  }
class C{  public void _write(OutputStream output){  output.write_long(value);}  }
class C{  public TextEvent(Object source,int id){  super(source,id);}  }
class C{  public void testSetDateAndTimeLjava_util_Date(){  X509CRLSelector selector=new X509CRLSelector();  TestCRL crl=new TestCRL(new Date(200),new Date(300));  selector.setDateAndTime(null);  assertTrue("Any CRL should match in the case of null dateAndTime.",selector.match(crl));  selector.setDateAndTime(new Date(200));  assertTrue("The CRL should match the selection criteria.",selector.match(crl));  selector.setDateAndTime(new Date(250));  assertTrue("The CRL should match the selection criteria.",selector.match(crl));  selector.setDateAndTime(new Date(300));  assertTrue("The CRL should match the selection criteria.",selector.match(crl));  selector.setDateAndTime(new Date(150));  assertFalse("The CRL should not match the selection criteria.",selector.match(crl));  selector.setDateAndTime(new Date(350));  assertFalse("The CRL should not match the selection criteria.",selector.match(crl));}  }
class C{  void clearSubjectResultCache(String tokenIdString) throws PolicyException {  if (PolicyManager.debug.messageEnabled()) {    PolicyManager.debug.message("Subjects.clearSubjectResultCache(tokenIdString): " + " clearing cached subject evaluation result for " + " tokenId XXXXX");  }  resultCache.remove(tokenIdString);}  }
class C{  public void handleButton2Request(RequestInvocationEvent event) throws ModelControlException {  PolicyModel model=(PolicyModel)getModel();  String referralType=(String)propertySheetModel.getValue(ATTR_REFERRAL_TYPE);  setPageSessionAttribute(ReferralOpViewBeanBase.CALLING_VIEW_BEAN,(String)getPageSessionAttribute(CALLING_VIEW_BEAN));  String realmName=(String)getPageSessionAttribute(AMAdminConstants.CURRENT_REALM);  String viewBeanURL=model.getReferralViewBeanURL(realmName,referralType);  unlockPageTrailForSwapping();  if ((viewBeanURL != null) && (viewBeanURL.trim().length() > 0)) {    forwardToURL(viewBeanURL,referralType,realmName);  } else {    forwardToViewBean(model,referralType,realmName);  }}  }
class C{  public JKJsfContext createJsfContext(){  return new JKJsfContext();}  }
class C{  public SQLClientInfoException(String reason,String SQLState,int vendorCode,Map<String,ClientInfoStatus> failedProperties,Throwable cause){  super(reason,SQLState,vendorCode);  initCause(cause);  this.failedProperties=failedProperties;}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  redirectToHome();}  }
class C{  public boolean visitFunction(ExpressionOwner owner,Function func){  return true;}  }
class C{  public static ZTauElement partModReduction(BigInteger k,int m,byte a,BigInteger[] s,byte mu,byte c){  BigInteger d0;  if (mu == 1) {    d0=s[0].add(s[1]);  } else {    d0=s[0].subtract(s[1]);  }  BigInteger[] v=getLucas(mu,m,true);  BigInteger vm=v[1];  SimpleBigDecimal lambda0=approximateDivisionByN(k,s[0],vm,a,m,c);  SimpleBigDecimal lambda1=approximateDivisionByN(k,s[1],vm,a,m,c);  ZTauElement q=round(lambda0,lambda1,mu);  BigInteger r0=k.subtract(d0.multiply(q.u)).subtract(BigInteger.valueOf(2).multiply(s[1]).multiply(q.v));  BigInteger r1=s[1].multiply(q.u).subtract(s[0].multiply(q.v));  return new ZTauElement(r0,r1);}  }
class C{  public static Attribute empty(AttributeType attributeType){  return empty(attributeType,attributeType.getNameOrOID());}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  IOutput outputWriter=getOutputWriter();  String siteName=getStringOptionValue(IArgument.SITE_NAME);  String siteURL=getStringOptionValue(IArgument.SITE_URL);  List secondaryURLs=(List)rc.getOption(IArgument.SECONDARY_URLS);  String[] params={siteName,siteURL};  try {    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_CREATE_SITE",params);    if (!SiteConfiguration.isSiteExist(adminSSOToken,siteName)) {      SiteConfiguration.createSite(adminSSOToken,siteName,siteURL,secondaryURLs);      outputWriter.printlnMessage(MessageFormat.format(getResourceString("create-site-succeeded"),(Object[])params));    } else {      outputWriter.printlnMessage(MessageFormat.format(getResourceString("create-site-already-exists"),(Object[])params));    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_CREATE_SITE",params);  } catch (  SSOException e) {    String[] args={siteName,siteURL,e.getMessage()};    debugError("CreateSite.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_CREATE_SITE",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  ConfigurationException e) {    String[] args={siteName,siteURL,e.getMessage()};    debugError("CreateSite.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_CREATE_SITE",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={siteName,siteURL,e.getMessage()};    debugError("CreateSite.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_CREATE_SITE",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public void removeHeader(String name){  for (int i=0; i < headers.size(); i++) {    MimeHeader hdr=(MimeHeader)headers.elementAt(i);    if (hdr.getName().equalsIgnoreCase(name))     headers.removeElementAt(i--);  }}  }
class C{  private void createBlocks(){  int offset=BLOCK_MINIMUM_CHARACTER_LENGTH;  mNumberOfBlocks=0;  final CharSequence text=mDisplay;  while (true) {    offset=TextUtils.indexOf(text,'\n',offset);    if (offset < 0) {      addBlockAtOffset(text.length());      break;    } else {      addBlockAtOffset(offset);      offset+=BLOCK_MINIMUM_CHARACTER_LENGTH;    }  }  mBlockIndices=new int[mBlockEndLines.length];  for (int i=0; i < mBlockEndLines.length; i++) {    mBlockIndices[i]=INVALID_BLOCK_INDEX;  }}  }
class C{  @Query(operationDescription=@Operation(description=OAUTH2_USER_APPLICATIONS + QUERY_DESCRIPTION,errors=@ApiError(code=500,description=OAUTH2_USER_APPLICATIONS + QUERY + ERROR_500_DESCRIPTION)),type=QueryType.FILTER,queryableFields={}) public Promise<QueryResponse,ResourceException> query(Context context,QueryResourceHandler queryHandler,QueryRequest request){  String userId=contextHelper.getUserId(context);  String realm=contextHelper.getRealm(context);  try {    QueryFilter<CoreTokenField> queryFilter=getQueryFilter(userId,realm);    JsonValue tokens=tokenStore.queryForToken(realm,queryFilter);    Map<String,Set<JsonValue>> applicationTokensMap=new HashMap<>();    for (    JsonValue token : tokens) {      String clientId=getAttributeValue(token,CLIENT_ID.getOAuthField());      realm=getAttributeValue(token,REALM.getOAuthField());      if (tokenClientExists(clientId,realm,context)) {        Set<JsonValue> applicationTokens=applicationTokensMap.get(clientId);        if (applicationTokens == null) {          applicationTokens=new HashSet<>();          applicationTokensMap.put(clientId,applicationTokens);        }        applicationTokens.add(token);      }    }    for (    Map.Entry<String,Set<JsonValue>> applicationTokens : applicationTokensMap.entrySet()) {      ResourceResponse resource=getResourceResponse(context,applicationTokens.getKey(),applicationTokens.getValue());      queryHandler.handleResource(resource);    }    return Promises.newResultPromise(Responses.newQueryResponse());  } catch (  ServerException|InvalidClientException|NotFoundException e) {    debug.message("Failed to query OAuth2 clients for user {}",userId,e);    return new InternalServerErrorException(e).asPromise();  }}  }
class C{  private void readMethods() throws IOException, ClassFormatException {  final int methods_count=dataInputStream.readUnsignedShort();  for (int i=0; i < methods_count; i++) {    Utility.swallowFieldOrMethod(dataInputStream);  }}  }
class C{  @Deprecated public static IOFileFilter andFileFilter(IOFileFilter filter1,IOFileFilter filter2){  return new AndFileFilter(filter1,filter2);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element rootNode;  Node newChild;  NodeList elementList;  Node oldChild;  Node replacedChild;  doc=(Document)load("hc_staff",true);  newChild=doc.createAttribute("lang");  elementList=doc.getElementsByTagName("p");  oldChild=elementList.item(1);  rootNode=(Element)oldChild.getParentNode();{    boolean success=false;    try {      replacedChild=rootNode.replaceChild(newChild,oldChild);    } catch (    DOMException ex) {      success=(ex.code == DOMException.HIERARCHY_REQUEST_ERR);    }    assertTrue("throw_HIERARCHY_REQUEST_ERR",success);  }}  }
class C{  public static WSFederationAction createAction(HttpServletRequest request,HttpServletResponse response){  String classMethod="WSFederationActionFactory.createAction: ";  WSFederationAction action=null;  if (request.getRequestURI().startsWith(request.getContextPath() + WSFederationConstants.MEX_ENDPOINT_PREFIX)) {    return new MexRequest(request,response);  } else   if ("POST".equals(request.getMethod()) && request.getRequestURI().startsWith(request.getContextPath() + WSFederationConstants.STS_ENDPOINT_PREFIX)) {    return new ActiveRequest(request,response);  }  String wa=request.getParameter(WSFederationConstants.WA);  if (wa != null && debug.messageEnabled()) {    debug.message(classMethod + WSFederationConstants.WA + "="+ wa);  }  String wresult=request.getParameter(WSFederationConstants.WRESULT);  if (wresult != null && debug.messageEnabled()) {    debug.message(classMethod + WSFederationConstants.WRESULT + "="+ wresult);  }  String whr=request.getParameter(WSFederationConstants.WHR);  if (whr != null && debug.messageEnabled()) {    debug.message(classMethod + WSFederationConstants.WHR + "="+ whr);  }  String wtrealm=request.getParameter(WSFederationConstants.WTREALM);  if (wtrealm != null && debug.messageEnabled()) {    debug.message(classMethod + WSFederationConstants.WTREALM + "="+ wtrealm);  }  String wreply=request.getParameter(SAML2Constants.GOTO);  if (wreply == null || wreply.length() == 0) {    wreply=request.getParameter(WSFederationConstants.WREPLY);  }  if (!ESAPI.validator().isValidInput("HTTP URL: " + wreply,wreply,"URL",2000,false)) {    wreply=null;  }  if (!WSFederationUtils.isWReplyURLValid(request,wreply)) {    wreply=null;  }  if (wreply != null && debug.messageEnabled()) {    debug.message(classMethod + WSFederationConstants.WREPLY + "="+ wreply);  }  String wct=request.getParameter(WSFederationConstants.WCT);  if (wct != null && debug.messageEnabled()) {    debug.message(classMethod + WSFederationConstants.WCT + "="+ wct);  }  String wctx=request.getParameter(WSFederationConstants.WCTX);  if (wctx != null && debug.messageEnabled()) {    debug.message(classMethod + WSFederationConstants.WCTX + "="+ wctx);  }  if (request.getMethod().equals("GET")) {    if (request.getRequestURI().startsWith(request.getContextPath() + WSFederationConstants.METADATA_URL_PREFIX)) {      action=new MetadataRequest(request,response);    } else     if (wa == null || wa.equals(WSFederationConstants.WSIGNIN10)) {      if (wtrealm != null && (wtrealm.length() > 0)) {        if (debug.messageEnabled()) {          debug.message(classMethod + "initiating IP signin request");        }        action=new IPSigninRequest(request,response,whr,wtrealm,wct,wctx,wreply);      } else {        if (debug.messageEnabled()) {          debug.message(classMethod + "initiating SP signin request");        }        action=new RPSigninRequest(request,response,whr,wct,wctx,wreply);      }    } else     if (wa.equals(WSFederationConstants.WSIGNOUT10) || wa.equals(WSFederationConstants.WSIGNOUTCLEANUP10)) {      if (debug.messageEnabled()) {        debug.message(classMethod + "initiating signout request");      }      action=new IPRPSignoutRequest(request,response,wreply);    }  } else   if (request.getMethod().equals("POST")) {    if (wa.equals(WSFederationConstants.WSIGNIN10) && wresult != null) {      if (debug.messageEnabled()) {        debug.message(classMethod + "initiating SP signin response");      }      action=new RPSigninResponse(request,response,wresult,wctx);    }  }  return action;}  }
class C{  public static String cropWww(String domainName){  if (StringUtils.isEmpty(domainName)) {    return null;  }  if (domainName.startsWith("www.")) {    return domainName.substring(4);  }  return domainName;}  }
class C{  private static String replaceChars(String str){  StringBuffer buf=new StringBuffer(str);  int length=buf.length();  for (int i=0; i < length; i++) {    char currentChar=buf.charAt(i);    if (currentChar == ' ') {      buf.setCharAt(i,'%');      buf.insert(i + 1,"20");      length=length + 2;      i=i + 2;    } else     if (currentChar == '\\') {      buf.setCharAt(i,'/');    }  }  return buf.toString();}  }
class C{  public WritableRaster createCompatibleDestRaster(Raster src){  int ncomponents;  if (CSList != null) {    if (CSList.length != 2) {      throw new IllegalArgumentException("Destination ColorSpace is undefined");    }    ncomponents=CSList[1].getNumComponents();  } else {    int nProfiles=profileList.length;    if (nProfiles < 2) {      throw new IllegalArgumentException("Destination ColorSpace is undefined");    }    ncomponents=profileList[nProfiles - 1].getNumComponents();  }  WritableRaster dest=Raster.createInterleavedRaster(DataBuffer.TYPE_BYTE,src.getWidth(),src.getHeight(),ncomponents,new Point(src.getMinX(),src.getMinY()));  return dest;}  }
class C{  public StringBuilder createQueryString(String command) throws BuildException {  StringBuilder buffer=new StringBuilder();  try {    buffer.append(command);    if (path == null) {      throw new BuildException("Must specify 'path' attribute");    } else {      buffer.append("?path=");      buffer.append(URLEncoder.encode(this.path,getCharset()));      if (this.version != null) {        buffer.append("&version=");        buffer.append(URLEncoder.encode(this.version,getCharset()));      }    }  } catch (  UnsupportedEncodingException e) {    throw new BuildException("Invalid 'charset' attribute: " + getCharset());  }  return buffer;}  }
class C{  protected CORSRequestType checkRequestType(final HttpServletRequest request){  CORSRequestType requestType=CORSRequestType.INVALID_CORS;  if (request == null) {    throw new IllegalArgumentException(sm.getString("corsFilter.nullRequest"));  }  String originHeader=request.getHeader(REQUEST_HEADER_ORIGIN);  if (originHeader != null) {    if (originHeader.isEmpty()) {      requestType=CORSRequestType.INVALID_CORS;    } else     if (!isValidOrigin(originHeader)) {      requestType=CORSRequestType.INVALID_CORS;    } else     if (isLocalOrigin(request,originHeader)) {      return CORSRequestType.NOT_CORS;    } else {      String method=request.getMethod();      if (method != null) {        if ("OPTIONS".equals(method)) {          String accessControlRequestMethodHeader=request.getHeader(REQUEST_HEADER_ACCESS_CONTROL_REQUEST_METHOD);          if (accessControlRequestMethodHeader != null && !accessControlRequestMethodHeader.isEmpty()) {            requestType=CORSRequestType.PRE_FLIGHT;          } else           if (accessControlRequestMethodHeader != null && accessControlRequestMethodHeader.isEmpty()) {            requestType=CORSRequestType.INVALID_CORS;          } else {            requestType=CORSRequestType.ACTUAL;          }        } else         if ("GET".equals(method) || "HEAD".equals(method)) {          requestType=CORSRequestType.SIMPLE;        } else         if ("POST".equals(method)) {          String mediaType=getMediaType(request.getContentType());          if (mediaType != null) {            if (SIMPLE_HTTP_REQUEST_CONTENT_TYPE_VALUES.contains(mediaType)) {              requestType=CORSRequestType.SIMPLE;            } else {              requestType=CORSRequestType.ACTUAL;            }          }        } else {          requestType=CORSRequestType.ACTUAL;        }      }    }  } else {    requestType=CORSRequestType.NOT_CORS;  }  return requestType;}  }
class C{  public Boolean isPassive(){  return isPassive;}  }
class C{  public SizeRequirements(int min,int pref,int max,float a){  minimum=min;  preferred=pref;  maximum=max;  alignment=a > 1.0f ? 1.0f : a < 0.0f ? 0.0f : a;}  }
class C{  protected FloatControl(Type type,float minimum,float maximum,float precision,int updatePeriod,float initialValue,String units,String minLabel,String midLabel,String maxLabel){  super(type);  if (minimum > maximum) {    throw new IllegalArgumentException("Minimum value " + minimum + " exceeds maximum value "+ maximum+ ".");  }  if (initialValue < minimum) {    throw new IllegalArgumentException("Initial value " + initialValue + " smaller than allowable minimum value "+ minimum+ ".");  }  if (initialValue > maximum) {    throw new IllegalArgumentException("Initial value " + initialValue + " exceeds allowable maximum value "+ maximum+ ".");  }  this.minimum=minimum;  this.maximum=maximum;  this.precision=precision;  this.updatePeriod=updatePeriod;  this.value=initialValue;  this.units=units;  this.minLabel=((minLabel == null) ? "" : minLabel);  this.midLabel=((midLabel == null) ? "" : midLabel);  this.maxLabel=((maxLabel == null) ? "" : maxLabel);}  }
class C{  public GSERException(LocalizableMessage message){  super(message);}  }
class C{  public BrdComponent add(PlaPointInt p_location,int p_rotation,boolean p_on_front,LibPackage p_package){  int an_index=component_list.size() + 1;  String component_name="Component#" + an_index;  return add(component_name,p_location,p_rotation,p_on_front,p_package,p_package,false);}  }
class C{  public String toStringImpl(){  return latNode;}  }
class C{  public int hashCode(){  return name.hashCode();}  }
class C{  public boolean isMutable(){  return isMutable;}  }
class C{  public synchronized int search(Object o){  final Object[] dumpArray=elementData;  final int size=elementCount;  if (o != null) {    for (int i=size - 1; i >= 0; i--) {      if (o.equals(dumpArray[i])) {        return size - i;      }    }  } else {    for (int i=size - 1; i >= 0; i--) {      if (dumpArray[i] == null) {        return size - i;      }    }  }  return -1;}  }
class C{  public void parseForField(GenericDeclaration genericDecl,String signature){  setInput(genericDecl,signature);  if (!eof) {    this.fieldType=parseFieldTypeSignature();  }}  }
class C{  public FrameBodyTBPM(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  try {    Request request=requestEvent.getRequest();    SipProvider sipProvider=(SipProvider)requestEvent.getSource();    ServerTransaction st=sipProvider.getNewServerTransaction(request);    TTask ttask=new TTask(requestEvent,st);    int ttime=100;    new Timer().schedule(ttask,ttime);  } catch (  Exception ex) {    ex.printStackTrace();    DialogTimeoutTest.fail("Shootme: Failed on process INVITE",ex);  }}  }
class C{  public boolean isECLEnabled(){  return MultimasterReplication.isECLEnabled();}  }
class C{  public NodeSet(NodeList nodelist){  this(32);  addNodes(nodelist);}  }
class C{  private boolean willExpire(long minutes){  return minutes < Long.MAX_VALUE / 60;}  }
class C{  private static int readBlock(GifParameters gif) throws java.io.IOException {  gif.blockSize=gif.input.read();  if (gif.blockSize <= 0)   return gif.blockSize=0;  gif.blockSize=gif.input.read(gif.block,0,gif.blockSize);  return gif.blockSize;}  }
class C{  protected void parseEndChunk() throws IOException {  while (parseHeader()) {  }}  }
class C{  public Builder trail(boolean trail){  this.trail=trail;  return this;}  }
class C{  public Object remove(int posn) throws InvalidNameException {  return impl.remove(posn);}  }
class C{  public static TextHitInfo beforeOffset(int offset){  return new TextHitInfo(offset - 1,false);}  }
class C{  public void writeStats(){  try {    File file=new File("stats.dat");    FileWriter fw=new FileWriter(file);    BufferedWriter bw=new BufferedWriter(fw);    String[] curStats=stats.getText().split("\n");    int score=Integer.parseInt(scoresDisplay.getText().replaceAll("[^0-9]",""));    int coins=Integer.parseInt(coinCount.getText().replaceAll("[^0-9]",""));    bw.write((Integer.parseInt(curStats[2].substring(curStats[2].length() - 1)) + score) + ":" + (Integer.parseInt(curStats[3].substring(curStats[3].length() - 1)) + coins)+ ":"+ (Integer.parseInt(curStats[4].substring(curStats[4].length() - 1)) + enemyCount));    bw.close();    fw.close();  } catch (  Exception ex) {    System.out.println("Error Occurred while saving Stats. Please make sure you have Access rights. The Stats will not be changed. The error was: " + ex.getMessage() + "\nStackTrace is as Follows:\n");    ex.printStackTrace();  }}  }
class C{  public Reference<? extends T> remove() throws InterruptedException {  return remove(0);}  }
class C{  public NSDictionary(){  dict=new LinkedHashMap<String,NSObject>();}  }
class C{  @Override public boolean is_on_layer(int p_layer){  return get_layer() == p_layer;}  }
class C{  public int size(){  return parts.size();}  }
class C{  protected ReplicationBroker openReplicationSession(final DN baseDN,int serverId,int windowSize,int port,int timeout) throws Exception {  return openReplicationSession(baseDN,serverId,windowSize,port,timeout,getGenerationId(baseDN));}  }
class C{  public void testGetInternalSubset() throws Throwable {  Document doc;  DocumentType docType;  String internal;  doc=(Document)load("staff2",builder);  docType=doc.getDoctype();  internal=docType.getInternalSubset();  assertNull("internalSubsetNull",internal);}  }
class C{  public XObject operate(XObject left,XObject right) throws javax.xml.transform.TransformerException {  return (left.notEquals(right)) ? XBoolean.S_TRUE : XBoolean.S_FALSE;}  }
class C{  @Override public void accept(final LongHashSet targetForOwnedSocketInodes){  targetForOwnedSocketInodes.clear();  try {    Files.list(Paths.get("/proc/self/fd")).filter(null).mapToLong(null).filter(null).forEach(null);  } catch (  final IOException e) {    throw new UncheckedIOException(e);  }}  }
class C{  public String toLocalizedPattern(){  return translatePattern(pattern,DateFormatSymbols.patternChars,formatData.getLocalPatternChars());}  }
class C{  static void destroyMBean(Group group) throws Exception {  String mname=createManagedName(group);  ManagedBean managed=registry.findManagedBean(mname);  if (managed == null) {    return;  }  String domain=managed.getDomain();  if (domain == null)   domain=mserver.getDefaultDomain();  ObjectName oname=createObjectName(domain,group);  if (mserver.isRegistered(oname))   mserver.unregisterMBean(oname);}  }
class C{  private static boolean sendEntryIfMatches(SearchOperation searchOp,Entry entry,String cookie) throws DirectoryException {  if (matchBaseAndScopeAndFilter(searchOp,entry)) {    return searchOp.returnEntry(entry,getControls(cookie));  }  return true;}  }
class C{  public static void saveAsASCII(NSDictionary root,File out) throws IOException {  File parent=out.getParentFile();  if (!parent.exists())   if (!parent.mkdirs())   throw new IOException("The output directory does not exist and could not be created.");  OutputStreamWriter w=new OutputStreamWriter(new FileOutputStream(out),"ASCII");  w.write(root.toASCIIPropertyList());  w.close();}  }
class C{  public final void testHashCode01(){  ECPoint f=new ECPoint(BigInteger.valueOf(-23457L),BigInteger.ONE);  int hc=f.hashCode();  assertTrue(hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode());  hc=ECPoint.POINT_INFINITY.hashCode();  assertTrue(hc == ECPoint.POINT_INFINITY.hashCode() && hc == ECPoint.POINT_INFINITY.hashCode() && hc == ECPoint.POINT_INFINITY.hashCode() && hc == ECPoint.POINT_INFINITY.hashCode() && hc == ECPoint.POINT_INFINITY.hashCode() && hc == ECPoint.POINT_INFINITY.hashCode() && hc == ECPoint.POINT_INFINITY.hashCode() && hc == ECPoint.POINT_INFINITY.hashCode());}  }
class C{  private boolean processAnonymousSimpleBind() throws DirectoryException {  if (DirectoryServer.lockdownMode()) {    throw new DirectoryException(ResultCode.INVALID_CREDENTIALS,ERR_BIND_REJECTED_LOCKDOWN_MODE.get());  }  if (DirectoryServer.bindWithDNRequiresPassword() && bindDN != null && !bindDN.isRootDN()) {    throw new DirectoryException(ResultCode.UNWILLING_TO_PERFORM,ERR_BIND_DN_BUT_NO_PASSWORD.get());  }  if (!invokePreOpPlugins()) {    return false;  }  setResultCode(ResultCode.SUCCESS);  setAuthenticationInfo(new AuthenticationInfo());  return true;}  }
class C{  public StateInteractive select_items(PlaPointFloat p_location){  i_brd.display_layer_messsage();  Set<BrdItem> picked_items=i_brd.pick_items(p_location);  boolean something_found=(picked_items.size() > 0);  StateInteractive result;  if (something_found) {    result=StateSelectedItem.get_instance(picked_items,this,i_brd,this.actlog);    i_brd.screen_messages.set_status_message(resources.getString("in_select_mode"));    actlog_start_scope(LogfileScope.START_SELECT,p_location);  } else {    result=this;  }  i_brd.repaint();  return result;}  }
class C{  public static FSNameRegistrationResponse parseXML(String xml) throws FSMsgException {  try {    Document doc=XMLUtils.toDOMDocument(xml,FSUtils.debug);    Element root=doc.getDocumentElement();    return new FSNameRegistrationResponse(root);  } catch (  SAMLException ex) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSNameRegistrationResponse.parseXML: " + "Error while parsing input xml string");    }    throw new FSMsgException("parseError",null,ex);  }}  }
class C{  public static com.liferay.blade.samples.servicebuilder.model.Foo createFoo(long fooId){  return getService().createFoo(fooId);}  }
class C{  public ID3v22Frame(AbstractID3v2FrameBody body){  super(body);}  }
class C{  public OceanTheme(){}  }
class C{  synchronized String addListener(ServiceListener listener){  String id=SMSUtils.getUniqueID();  listenerObjects.put(id,listener);  return (id);}  }
class C{  public static IOFileFilter fileFileFilter(){  return FileFileFilter.FILE;}  }
class C{  public void decode(byte[] data,OutputStream uncompData){  if (data[0] == (byte)0x00 && data[1] == (byte)0x01) {    throw new PdfException(PdfException.LzwFlavourNotSupported);  }  initializeStringTable();  this.data=data;  this.uncompData=uncompData;  bytePointer=0;  bitPointer=0;  nextData=0;  nextBits=0;  int code, oldCode=0;  byte[] string;  while ((code=getNextCode()) != 257) {    if (code == 256) {      initializeStringTable();      code=getNextCode();      if (code == 257) {        break;      }      writeString(stringTable[code]);      oldCode=code;    } else {      if (code < tableIndex) {        string=stringTable[code];        writeString(string);        addStringToTable(stringTable[oldCode],string[0]);        oldCode=code;      } else {        string=stringTable[oldCode];        string=composeString(string,string[0]);        writeString(string);        addStringToTable(string);        oldCode=code;      }    }  }}  }
class C{  protected void serverinfo(PrintWriter writer,StringManager smClient){  if (debug >= 1)   log("serverinfo");  try {    StringBuilder props=new StringBuilder();    props.append("OK - Server info");    props.append("\nTomcat Version: ");    props.append(ServerInfo.getServerInfo());    props.append("\nOS Name: ");    props.append(System.getProperty("os.name"));    props.append("\nOS Version: ");    props.append(System.getProperty("os.version"));    props.append("\nOS Architecture: ");    props.append(System.getProperty("os.arch"));    props.append("\nJVM Version: ");    props.append(System.getProperty("java.runtime.version"));    props.append("\nJVM Vendor: ");    props.append(System.getProperty("java.vm.vendor"));    writer.println(props.toString());  } catch (  Throwable t) {    ExceptionUtils.handleThrowable(t);    getServletContext().log("ManagerServlet.serverinfo",t);    writer.println(smClient.getString("managerServlet.exception",t.toString()));  }}  }
class C{  public boolean isSearchable(){  return (as.isSearchable());}  }
class C{  public void replaceSchema(InputStream xmlServiceSchema) throws SSOException, SMSException, IOException {  SMSEntry.validateToken(token);  validateServiceSchemaManagerImpl();  CachedSMSEntry smsEntry=ssm.getCachedSMSEntry();  smsEntry.writeXMLSchema(token,xmlServiceSchema);}  }
class C{  private TrustManagers(){}  }
class C{  @Override public Foo findByField2_Last(boolean field2,OrderByComparator<Foo> orderByComparator) throws NoSuchFooException {  Foo foo=fetchByField2_Last(field2,orderByComparator);  if (foo != null) {    return foo;  }  StringBundler msg=new StringBundler(4);  msg.append(_NO_SUCH_ENTITY_WITH_KEY);  msg.append("field2=");  msg.append(field2);  msg.append(StringPool.CLOSE_CURLY_BRACE);  throw new NoSuchFooException(msg.toString());}  }
class C{  public AsfTagBannerField(final MetadataDescriptor descriptor){  super(descriptor);  assert descriptor.getName().equals(AsfFieldKey.BANNER_IMAGE.getFieldName());}  }
class C{  static Set<String> identityAttributeJsonToSet(JsonValue identityAttributeJson){  if (identityAttributeJson.isString()) {    return Collections.singleton(identityAttributeJson.asString());  }  if (identityAttributeJson.isList()) {    Set<String> attributeValues=new HashSet<>();    for (    JsonValue value : identityAttributeJson) {      if (value.isString()) {        attributeValues.add(value.asString());      } else {        attributeValues.add(value.toString());      }    }    return attributeValues;  }  return Collections.singleton(identityAttributeJson.toString());}  }
class C{  protected void eleminateSharedPartialPaths(ElemTemplateElement psuedoVarRecipient,Vector paths){  MultistepExprHolder list=createMultistepExprList(paths);  if (null != list) {    if (DIAGNOSE_MULTISTEPLIST)     list.diagnose();    boolean isGlobal=(paths == m_absPaths);    int longestStepsCount=list.m_stepCount;    for (int i=longestStepsCount - 1; i >= 1; i--) {      MultistepExprHolder next=list;      while (null != next) {        if (next.m_stepCount < i)         break;        list=matchAndEliminatePartialPaths(next,list,isGlobal,i,psuedoVarRecipient);        next=next.m_next;      }    }  }}  }
class C{  public void persistInternalSession(InternalSession session){  session.setStored(true);  putInternalSessionIntoInternalSessionCache(session);  update(session);  if (!session.willExpire()) {    nonExpiringSessionManager.addNonExpiringSession(session);  }}  }
class C{  @KnownFailure("Fixed on DonutBurger, Wrong Exception thrown") public void test_unwrap_ByteBuffer_ByteBuffer_03(){  String host="new host";  int port=8080;  ByteBuffer bbsN=null;  ByteBuffer bbdN=null;  ByteBuffer bbs=ByteBuffer.allocate(10);  ByteBuffer bbd=ByteBuffer.allocate(100);  SSLEngine sse=getEngine(host,port);  sse.setUseClientMode(true);  try {    sse.unwrap(bbsN,bbd);    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException iae) {  }catch (  NullPointerException npe) {  }catch (  Exception e) {    fail(e + " was thrown instead of IllegalArgumentException");  }  try {    sse.unwrap(bbs,bbdN);    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException iae) {  }catch (  NullPointerException npe) {  }catch (  Exception e) {    fail(e + " was thrown instead of IllegalArgumentException");  }  try {    sse.unwrap(bbsN,bbdN);    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException iae) {  }catch (  NullPointerException npe) {  }catch (  Exception e) {    fail(e + " was thrown instead of IllegalArgumentException");  }}  }
class C{  private boolean isGermanic(final String s){  return s.startsWith("VAN ") || s.startsWith("VON ") || s.startsWith("SCH");}  }
class C{  public static ByteString valueOfHex(final String hexString){  if (hexString == null || hexString.length() == 0) {    return EMPTY;  }  final int length=hexString.length();  if (length % 2 != 0) {    throw new LocalizedIllegalArgumentException(ERR_HEX_DECODE_INVALID_LENGTH.get(hexString));  }  final int arrayLength=length / 2;  final byte[] bytes=new byte[arrayLength];  for (int i=0; i < arrayLength; i++) {    bytes[i]=hexToByte(hexString,hexString.charAt(i * 2),hexString.charAt(i * 2 + 1));  }  return valueOfBytes(bytes);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeparentnode.class,args);}  }
class C{  public static SearchRequest copyOfSearchRequest(final SearchRequest request){  return new SearchRequestImpl(request);}  }
class C{  private boolean doAcquireNanos(long arg,long nanosTimeout) throws InterruptedException {  if (nanosTimeout <= 0L)   return false;  final long deadline=System.nanoTime() + nanosTimeout;  final Node node=addWaiter(Node.EXCLUSIVE);  boolean failed=true;  try {    for (; ; ) {      final Node p=node.predecessor();      if (p == head && tryAcquire(arg)) {        setHead(node);        p.next=null;        failed=false;        return true;      }      nanosTimeout=deadline - System.nanoTime();      if (nanosTimeout <= 0L)       return false;      if (shouldParkAfterFailedAcquire(p,node) && nanosTimeout > spinForTimeoutThreshold)       LockSupport.parkNanos(this,nanosTimeout);      if (Thread.interrupted())       throw new InterruptedException();    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  public void focusLost(FocusEvent e){  getHandler().focusLost(e);}  }
class C{  public static AuthnRequest createAuthnRequest(final String realmName,final String spEntityID,final Map paramsMap,final Map spConfigMap,final List extensionsList,final SPSSODescriptorElement spsso,final IDPSSODescriptorElement idpsso,final String ssourl,final boolean isForECP) throws SAML2Exception {  String requestID=SAML2Utils.generateID();  if ((requestID == null) || (requestID.length() == 0)) {    throw new SAML2Exception(SAML2Utils.bundle.getString("cannotGenerateID"));  }  String destinationURI=getParameter(paramsMap,SAML2Constants.DESTINATION);  Boolean isPassive=doPassive(paramsMap,spConfigMap);  Boolean isforceAuthn=isForceAuthN(paramsMap,spConfigMap);  boolean allowCreate=isAllowCreate(paramsMap,spConfigMap);  boolean includeRequestedAuthnContextFlag=includeRequestedAuthnContext(paramsMap,spConfigMap);  String consent=getParameter(paramsMap,SAML2Constants.CONSENT);  Extensions extensions=createExtensions(extensionsList);  String nameIDPolicyFormat=getParameter(paramsMap,SAML2Constants.NAMEID_POLICY_FORMAT);  NameIDPolicy nameIDPolicy=createNameIDPolicy(spEntityID,nameIDPolicyFormat,allowCreate,spsso,idpsso,realmName,paramsMap);  Issuer issuer=createIssuer(spEntityID);  Integer acsIndex=getIndex(paramsMap,SAML2Constants.ACS_URL_INDEX);  Integer attrIndex=getIndex(paramsMap,SAML2Constants.ATTR_INDEX);  String protocolBinding=isForECP ? SAML2Constants.PAOS : getParameter(paramsMap,"binding");  OrderedSet acsSet=getACSUrl(spsso,protocolBinding);  String acsURL=(String)acsSet.get(0);  protocolBinding=(String)acsSet.get(1);  if (!SAML2Utils.isSPProfileBindingSupported(realmName,spEntityID,SAML2Constants.ACS_SERVICE,protocolBinding)) {    SAML2Utils.debug.error("SPSSOFederate.createAuthnRequest:" + protocolBinding + "is not supported for "+ spEntityID);    String[] data={spEntityID,protocolBinding};    LogUtil.error(Level.INFO,LogUtil.BINDING_NOT_SUPPORTED,data,null);    throw new SAML2Exception(SAML2Utils.bundle.getString("unsupportedBinding"));  }  AuthnRequest authnReq=ProtocolFactory.getInstance().createAuthnRequest();  if (!isForECP) {    if ((destinationURI == null) || (destinationURI.length() == 0)) {      authnReq.setDestination(XMLUtils.escapeSpecialCharacters(ssourl));    } else {      authnReq.setDestination(XMLUtils.escapeSpecialCharacters(destinationURI));    }  }  authnReq.setConsent(consent);  authnReq.setIsPassive(isPassive);  authnReq.setForceAuthn(isforceAuthn);  authnReq.setAttributeConsumingServiceIndex(attrIndex);  authnReq.setAssertionConsumerServiceIndex(acsIndex);  authnReq.setAssertionConsumerServiceURL(XMLUtils.escapeSpecialCharacters(acsURL));  authnReq.setProtocolBinding(protocolBinding);  authnReq.setIssuer(issuer);  authnReq.setNameIDPolicy(nameIDPolicy);  if (includeRequestedAuthnContextFlag) {    authnReq.setRequestedAuthnContext(createReqAuthnContext(realmName,spEntityID,paramsMap,spConfigMap));  }  if (extensions != null) {    authnReq.setExtensions(extensions);  }  authnReq.setID(requestID);  authnReq.setVersion(SAML2Constants.VERSION_2_0);  authnReq.setIssueInstant(newDate());  Boolean enableIDPProxy=getAttrValueFromMap(spConfigMap,SAML2Constants.ENABLE_IDP_PROXY);  if ((enableIDPProxy != null) && enableIDPProxy.booleanValue()) {    Scoping scoping=ProtocolFactory.getInstance().createScoping();    String proxyCountParam=getParameter(spConfigMap,SAML2Constants.IDP_PROXY_COUNT);    if (proxyCountParam != null && (!proxyCountParam.equals(""))) {      scoping.setProxyCount(new Integer(proxyCountParam));    }    List proxyIDPs=(List)spConfigMap.get(SAML2Constants.IDP_PROXY_LIST);    if (proxyIDPs != null && !proxyIDPs.isEmpty()) {      Iterator iter=proxyIDPs.iterator();      ArrayList list=new ArrayList();      while (iter.hasNext()) {        IDPEntry entry=ProtocolFactory.getInstance().createIDPEntry();        entry.setProviderID((String)iter.next());        list.add(entry);      }      IDPList idpList=ProtocolFactory.getInstance().createIDPList();      idpList.setIDPEntries(list);      scoping.setIDPList(idpList);    }    authnReq.setScoping(scoping);  }  return authnReq;}  }
class C{  public static ViewItemGroup buildUIFromAction(ModelAction modelAction,ArrayList<DataType> initData,Activity activity){  ArrayList<ModelParameter> parameters=modelAction.getParameters();  if (initData != null && initData.size() != parameters.size()) {    throw new IllegalArgumentException("Action parameter data array does not match parameter size!");  }  if (initData == null) {    initData=generateInitialData(activity.getApplicationContext(),modelAction);  }  ViewItemGroup viewItemGroup=new ViewItemGroup(activity);  int numParameters=parameters.size();  for (int i=0; i < numParameters; i++) {    ModelParameter parameter=parameters.get(i);    TextView tv=new TextView(activity);    tv.setText(parameter.getTypeName() + ":");    viewItemGroup.addView(tv);    ViewItem viewItem=ViewItemFactory.instance().create(i,parameter.getDatatype(),activity);    viewItemGroup.addViewItem(viewItem,initData != null ? initData.get(i) : null);  }  return viewItemGroup;}  }
class C{  public Vector subtract(Vector vec){  x-=vec.x;  y-=vec.y;  z-=vec.z;  return this;}  }
class C{  public void testGetInstanceStringString01() throws NoSuchAlgorithmException, IllegalArgumentException, NoSuchProviderException {  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  try {    KeyAgreement.getInstance(null,defaultProviderName);    fail("NullPointerException or NoSuchAlgorithmException should be thrown if algorithm is null");  } catch (  NullPointerException e) {  }catch (  NoSuchAlgorithmException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      KeyAgreement.getInstance(invalidValues[i],defaultProviderName);      fail("NoSuchAlgorithmException must be thrown");    } catch (    NoSuchAlgorithmException e) {    }  }}  }
class C{  public void on(boolean on){  isOn=on;}  }
class C{  public static void updateInheritance(AMIdentity amid,Map inherit) throws IdRepoException, SSOException, SMSException {  Set toInherit=new HashSet();  Set notToInherit=new HashSet();  for (Iterator i=inherit.keySet().iterator(); i.hasNext(); ) {    String attrName=(String)i.next();    String flag=(String)inherit.get(attrName);    if (flag.equals("1")) {      toInherit.add(attrName);    } else {      notToInherit.add(attrName);    }  }  Map origValues=getAgentAttributes(amid,false);  Map values=amid.getAttributes(toInherit);  if (!values.isEmpty()) {    amid.removeAttributes(values.keySet());  }  String agentType=getAgentType(amid);  Map attrSchemas=getAttributeSchemas(agentType,notToInherit);  Map resetValues=new HashMap(notToInherit.size() * 2);  for (Iterator i=notToInherit.iterator(); i.hasNext(); ) {    String attrName=(String)i.next();    if (origValues.get(attrName) == null) {      AttributeSchema as=(AttributeSchema)attrSchemas.get(attrName);      Set defaultValues=as.getDefaultValues();      if ((defaultValues == null)) {        resetValues.put(attrName,Collections.EMPTY_SET);      } else {        resetValues.put(attrName,defaultValues);      }    }  }  if (!resetValues.isEmpty()) {    amid.setAttributes(resetValues);    amid.store();  }}  }
class C{  public LoginLATGroupAttribute(String latCodes){  super(OctetUtils.toOctets(AttributeType.LOGIN_LAT_GROUP,latCodes));  this.latCodes=new String(super.getOctets(),2,super.getOctets().length - 2);}  }
class C{  private JmxClientConnection bind(String authcID,String password){  try {    DN.valueOf(authcID);  } catch (  Exception e) {    LDAPException ldapEx=new LDAPException(LDAPResultCode.INVALID_CREDENTIALS,CoreMessages.INFO_RESULT_INVALID_CREDENTIALS.get());    throw new SecurityException(ldapEx);  }  ArrayList<Control> requestControls=new ArrayList<>();  ByteString bindPW=password != null ? ByteString.valueOfUtf8(password) : null;  AuthenticationInfo authInfo=new AuthenticationInfo();  JmxClientConnection jmxClientConnection=new JmxClientConnection(jmxConnectionHandler,authInfo);  BindOperationBasis bindOp=new BindOperationBasis(jmxClientConnection,jmxClientConnection.nextOperationID(),jmxClientConnection.nextMessageID(),requestControls,jmxConnectionHandler.getRMIConnector().getProtocolVersion(),ByteString.valueOfUtf8(authcID),bindPW);  bindOp.run();  if (bindOp.getResultCode() == ResultCode.SUCCESS) {    logger.trace("User is authenticated");    authInfo=bindOp.getAuthenticationInfo();    jmxClientConnection.setAuthenticationInfo(authInfo);    if (!jmxClientConnection.hasPrivilege(Privilege.JMX_READ,null)) {      LocalizableMessage message=ERR_JMX_INSUFFICIENT_PRIVILEGES.get();      jmxClientConnection.disconnect(DisconnectReason.CONNECTION_REJECTED,false,message);      throw new SecurityException(message.toString());    }    return jmxClientConnection;  } else {    LDAPException ldapEx=new LDAPException(LDAPResultCode.INVALID_CREDENTIALS,CoreMessages.INFO_RESULT_INVALID_CREDENTIALS.get());    SecurityException se=new SecurityException("return code: " + bindOp.getResultCode());    se.initCause(ldapEx);    throw se;  }}  }
class C{  public String toString(boolean includeNS,boolean declareNS){  return toString(includeNS,declareNS,false);}  }
class C{  public void testClearBitException(){  byte aBytes[]={-1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=-7;  BigInteger aNumber=new BigInteger(aSign,aBytes);  try {    aNumber.clearBit(number);    fail("ArithmeticException has not been caught");  } catch (  ArithmeticException e) {  }}  }
class C{  @DataProvider(name="simpleGet") Object[][] createNames(){  return new Object[][]{{"cn=JMX Connection Handler,cn=Connection Handlers,cn=config","ds-cfg-listen-port",TestCaseUtils.getServerJmxPort()},{"cn=JMX Connection Handler,cn=Connection Handlers,cn=config","objectclass",null},{"cn=JMX Connection Handler,cn=Connection Handlers,cn=config","ds-cfg-ssl-cert-nickname","server-cert"}};}  }
class C{  public void testCount() throws SQLException, Exception {  TestFCCount countTest=new TestFCCount();  int inputCount=10;  assertFalse(countTest.functionCalled);  DatabaseCreator.fillTestTable2(conn,inputCount);  db.create_function("testCount",0,countTest);}  }
class C{  public RoundDotsBorder(Color color,float width){  super(color,width);}  }
class C{  private void hideBothNavigationBarAndStatusBar(){  View decorView=getWindow().getDecorView();  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {    int uiOptions=View.SYSTEM_UI_FLAG_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_FULLSCREEN;    decorView.setSystemUiVisibility(uiOptions);  }}  }
class C{  public MatteBorder(int top,int left,int bottom,int right,Color matteColor){  super(top,left,bottom,right);  this.color=matteColor;}  }
class C{  public static StringBuilder removeLast(final StringBuilder builder,final String string){  final int lastIndexOf=builder.lastIndexOf(string);  if (lastIndexOf == -1) {    return builder;  }  return new StringBuilder(builder.substring(0,lastIndexOf));}  }
class C{  protected boolean accept(Component aComponent){  return fitnessTestPolicy.accept(aComponent);}  }
class C{  public List<Vector2> findPathBetween(Vector2 from,Vector2 to) throws Exception {  resetSearchAlgorithm();  if (!quadTree.isFilled(from) || !quadTree.isFilled(to)) {    throw new Exception("fields are not visited in quadtree");  }  from=quadTree.rasterize(from);  to=quadTree.rasterize(to);  goal=new Node(to);  openList.add(new Node(from));  do {    Node currentNode=getClosestNode();    if (currentNode.equals(goal)) {      while (currentNode.parent != null) {        path.add(new Vector2(currentNode.x,currentNode.y));        currentNode=currentNode.parent;      }      return path;    }    openList.remove(currentNode);    closedList.add(currentNode);    expandNode(currentNode);  } while (!openList.isEmpty());  throw new Exception("no path found");}  }
class C{  public int doFinal(ByteBuffer output) throws ShortBufferException, IllegalBlockSizeException, BadPaddingException {  checkState();  Utils.checkArgument(output.isDirect(),"Direct buffer is required.");  int len=OpenSslNative.doFinal(context,output,output.position(),output.remaining());  output.position(output.position() + len);  return len;}  }
class C{  protected static Set stringArrayToSet(String[] strs){  int count=strs.length;  Set set=((count > 0) ? new HashSet(count) : new HashSet());  for (int i=0; i < count; i++) {    set.add(strs[i]);  }  return set;}  }
class C{  public static void error(Level level,String msgId,String data[],Object session){  try {    logger.error(level,msgId,data,session);  } catch (  LogException le) {    SAMLUtils.debug.error("LogUtils.error: Error writing to" + " log:",le);  }}  }
class C{  public void paintFormattedTextFieldBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  if (context.getComponent().getComponentOrientation().isLeftToRight()) {    paintBackground(context,g,x,y,w,h,null);  } else {    AffineTransform transform=new AffineTransform();    transform.translate(x,y);    transform.scale(-1,1);    transform.translate(-w,0);    paintBackground(context,g,0,0,w,h,transform);  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.IDPProvidedNameIdentifierElement createIDPProvidedNameIdentifierElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.IDPProvidedNameIdentifierElementImpl();}  }
class C{  protected IRoutingResult<R> prepareNotFoundRouting(Object exchange,R requestContext,boolean alreadyTried){  IRoutingResult<R> routingResult=getRouter().route(requestContext,RoutingType.NOT_FOUND);  if (routingResult == null) {    if (alreadyTried) {      throw new RuntimeException("The method prepareNotFoundRouting was already tried, we called addDefaultNotFoundRoute() " + "but there's still no Not Found route!! Full url: " + getServer().getFullUrlOriginal(exchange));    }    addDefaultNotFoundRoute();    return prepareNotFoundRouting(exchange,requestContext,true);  }  requestContext.variables().add(SpincastConstants.RequestScopedVariables.IS_NOT_FOUND_ROUTE,true);  requestContext.response().setStatusCode(HttpStatus.SC_NOT_FOUND);  return routingResult;}  }
class C{  public ClientDetectionException(Throwable t){  super(t.getMessage());  fillInStackTrace();}  }
class C{  @NonNull public static Interpolator bounce(){  return new BounceInterpolator();}  }
class C{  private void createLayout(){  GridBagConstraints gbc=new GridBagConstraints();  CardLayout cardLayout=new CardLayout();  mainPanel=new JPanel(cardLayout);  mainPanel.setOpaque(false);  NoItemSelectedPanel noEntryPanel=new NoItemSelectedPanel();  mainPanel.add(noEntryPanel,NOTHING_SELECTED);  NoItemSelectedPanel multipleEntryPanel=new NoItemSelectedPanel();  multipleEntryPanel.setMessage(INFO_CTRL_PANEL_MULTIPLE_ITEMS_SELECTED_LABEL.get());  mainPanel.add(multipleEntryPanel,MULTIPLE_SELECTED);  StatusGenericPanel[] panels={standardIndexPanel,backendIndexesPanel,backendVLVIndexesPanel,vlvIndexPanel};  for (  StatusGenericPanel panel : panels) {    mainPanel.add(panel,panel.getTitle().toString());  }  cardLayout.show(mainPanel,NOTHING_SELECTED);  gbc.gridx=0;  gbc.gridy=0;  gbc.weightx=1.0;  gbc.weighty=1.0;  gbc.fill=GridBagConstraints.BOTH;  add(mainPanel,gbc);}  }
class C{  public void actionPerformed(ActionEvent e){  JTextComponent target=getTextComponent(e);  if (target != null) {    Document doc=target.getDocument();    int dot=doc.getLength();    if (select) {      target.moveCaretPosition(dot);    } else {      target.setCaretPosition(dot);    }  }}  }
class C{  public void testGetColumnType(){  int[] types={Types.SMALLINT,Types.VARCHAR,Types.VARCHAR};  try {    for (int i=0; i < rsmd.getColumnCount(); i++) {      int type=rsmd.getColumnType(i + 1);      assertEquals(types[i],type);    }  } catch (  SQLException e) {    fail("SQLException is thrown: " + e.getMessage());  }  try {    rsmd.getColumnType(0);    fail("SQLException is not thrown");  } catch (  SQLException e) {  }  try {    rsmd.getColumnType(5);    fail("SQLException is not thrown");  } catch (  SQLException e) {  }}  }
class C{  public void handleTblButtonAddRequest(RequestInvocationEvent event){  IDRepoModel model=(IDRepoModel)getModel();  try {    Map map=model.getIDRepoTypesMap();    IDRepoSelectTypeViewBean vb=(IDRepoSelectTypeViewBean)getViewBean(IDRepoSelectTypeViewBean.class);    unlockPageTrail();    passPgSessionMap(vb);    vb.forwardTo(getRequestContext());  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());    forwardTo();  }}  }
class C{  public static boolean isAdmin(SSOToken admToken,SSOToken usrToken){  if (usrToken == null) {    debug.error("SessionUtils.isAdmin(): user token is null");    return false;  }  if (admToken == null) {    debug.error("SessionUtils.isAdmin(): admin token is null");    return false;  }  boolean result=false;  String usrName;  String admName;  try {    usrName=usrToken.getPrincipal().getName();  } catch (  SSOException ssoEx) {    debug.error("SessionUtils.isAdmin(): user token fails" + "to get principal");    return false;  }  try {    admName=admToken.getPrincipal().getName();  } catch (  SSOException ssoEx) {    debug.error("SessionUtils.isAdmin(): admin token fails " + "to get principal");    return false;  }  if (usrName.equalsIgnoreCase(admName)) {    result=true;  }  if (debug.messageEnabled()) {    debug.message("SessionUtils.isAdmin(): returns " + result + " for user principal: "+ usrName+ " against admin principal: "+ admName);  }  return result;}  }
class C{  public final void testGetPolicyQualifierId() throws IOException {  byte[] encoding=getDerEncoding();  PolicyQualifierInfo i=new PolicyQualifierInfo(encoding);  assertEquals("1.3.6.1.5.5.7.2.1",i.getPolicyQualifierId());  encoding=getDerEncoding();  encoding[5]=(byte)0x86;  encoding[6]=(byte)0x81;  encoding[8]=(byte)0x85;  encoding[9]=(byte)0x87;  i=new PolicyQualifierInfo(encoding);  assertEquals("1.3.98437.82818.1",i.getPolicyQualifierId());}  }
class C{  public SQLRecoverableException(String reason,String sqlState){  super(reason,sqlState,0);}  }
class C{  public static Typeface parseTypeface(ReadableMap propMap,String styleKey,String familyKey){  String fontFamily=null;  if (propMap.hasKey(familyKey)) {    fontFamily=propMap.getString(familyKey);  }  int style=0;  if (propMap.hasKey(styleKey)) {    style=propMap.getInt(styleKey);  }  return Typeface.create(fontFamily,style);}  }
class C{  public void addGlobalArgument(Argument argument,ArgumentGroup group) throws ArgumentException {  String longID=argument.getLongIdentifier();  if (globalArgumentMap.containsKey(longID)) {    throw new ArgumentException(ERR_SUBCMDPARSER_DUPLICATE_GLOBAL_ARG_NAME.get(longID));  }  for (  SubCommand s : subCommands.values()) {    if (s.getArgumentForLongIdentifier(longID) != null) {      throw new ArgumentException(ERR_SUBCMDPARSER_GLOBAL_ARG_NAME_SUBCMD_CONFLICT.get(longID,s.getName()));    }  }  Character shortID=argument.getShortIdentifier();  if (shortID != null) {    if (globalShortIDMap.containsKey(shortID)) {      String conflictingLongID=globalShortIDMap.get(shortID).getLongIdentifier();      throw new ArgumentException(ERR_SUBCMDPARSER_DUPLICATE_GLOBAL_ARG_SHORT_ID.get(shortID,longID,conflictingLongID));    }    for (    SubCommand s : subCommands.values()) {      if (s.getArgument(shortID) != null) {        String conflictingLongID=s.getArgument(shortID).getLongIdentifier();        throw new ArgumentException(ERR_SUBCMDPARSER_GLOBAL_ARG_SHORT_ID_CONFLICT.get(shortID,longID,conflictingLongID,s.getName()));      }    }  }  if (!longArgumentsCaseSensitive()) {    longID=toLowerCase(longID);    if (globalLongIDMap.containsKey(longID)) {      throw new ArgumentException(ERR_SUBCMDPARSER_DUPLICATE_GLOBAL_ARG_LONG_ID.get(longID));    }  }  for (  SubCommand s : subCommands.values()) {    if (s.getArgument(longID) != null) {      throw new ArgumentException(ERR_SUBCMDPARSER_GLOBAL_ARG_LONG_ID_CONFLICT.get(longID,s.getName()));    }  }  if (shortID != null) {    globalShortIDMap.put(shortID,argument);  }  if (longID != null) {    globalLongIDMap.put(longID,argument);  }  globalArgumentList.add(argument);  if (group == null) {    group=getStandardGroup(argument);  }  group.addArgument(argument);  argumentGroups.add(group);}  }
class C{  public boolean isDrawingBuffer(){  return buffer != null;}  }
class C{  private Entry searchUserEntry(InternalClientConnection conn,ExtendedOperation operation,DN targetDN){  final SearchRequest request=newSearchRequest(targetDN,SearchScope.BASE_OBJECT,userFilter).setSizeLimit(1).addAttribute(requestAttributes);  InternalSearchOperation internalSearch=conn.processSearch(request);  if (internalSearch.getResultCode() != ResultCode.SUCCESS) {    operation.setResultCode(internalSearch.getResultCode());    operation.setErrorMessage(internalSearch.getErrorMessage());    operation.setMatchedDN(internalSearch.getMatchedDN());    operation.setReferralURLs(internalSearch.getReferralURLs());    return null;  }  List<SearchResultEntry> matchingEntries=internalSearch.getSearchEntries();  if (matchingEntries.isEmpty()) {    operation.setResultCode(ResultCode.INSUFFICIENT_ACCESS_RIGHTS);    return null;  } else   if (matchingEntries.size() > 1) {    operation.appendErrorMessage(ERR_PWPSTATE_EXTOP_MULTIPLE_ENTRIES.get(targetDN));    operation.setResultCode(ResultCode.CONSTRAINT_VIOLATION);    return null;  } else {    return matchingEntries.get(0);  }}  }
class C{  @Override public synchronized void publish(LogRecord record){  if (!isLoggable(record)) {    return;  }  int ix=(start + count) % buffer.length;  buffer[ix]=record;  if (count < buffer.length) {    count++;  } else {    start++;    start%=buffer.length;  }  if (record.getLevel().intValue() >= pushLevel.intValue()) {    push();  }}  }
class C{  public PdfCanvas endMarkedContent(){  if (--mcDepth < 0)   throw new PdfException(PdfException.UnbalancedBeginEndMarkedContentOperators);  contentStream.getOutputStream().writeBytes(EMC);  return this;}  }
class C{  public static <T>java.util.List<T> dynamicQuery(com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery){  return getService().dynamicQuery(dynamicQuery);}  }
class C{  @Override public String toString(){  String s=null;  try {    s=toJSONObject().toString(2);  } catch (  JSONException e) {    PrivilegeManager.debug.error("EntitlementSubjectImpl.toString",e);  }  return s;}  }
class C{  public int read(byte b[],int off,int len) throws IOException {  if (in == null) {    return -1;  } else   if (b == null) {    throw new NullPointerException();  } else   if (off < 0 || len < 0 || len > b.length - off) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return 0;  }  do {    int n=in.read(b,off,len);    if (n > 0) {      return n;    }    nextStream();  } while (in != null);  return -1;}  }
class C{  public KeyStore loadKeyStore() throws KeyStoreException {  KeyStore ks=null;  try {    KeyStoreBuilder builder=new KeyStoreBuilder();    ks=builder.withKeyStoreFile(getKeyStoreFile()).withKeyStoreType(KeyStoreType.JCEKS).withPassword(getKeyPassword()).build();  } catch (  IOException e) {    throw new KeyStoreException("Could not initialize the Keystore",e);  }  return ks;}  }
class C{  private static void addAllToJson(JsonValue to,JsonValue from){  Iterator<String> iter=from.keys().iterator();  while (iter.hasNext()) {    String key=iter.next();    to.put(key,from.get(key).getObject());  }}  }
class C{  public ACTIVITY_COMPLETED(String detailMessage){  this(detailMessage,0,CompletionStatus.COMPLETED_NO);}  }
class C{  @Override public void addSecurityReference(String name,String link){  referencesLock.writeLock().lock();  try {    references.put(name,link);  }  finally {    referencesLock.writeLock().unlock();  }  fireContainerEvent("addSecurityReference",name);}  }
class C{  public boolean canTraverseOutsideSubtree(){  if (null != m_patterns) {    int n=m_patterns.length;    for (int i=0; i < n; i++) {      if (m_patterns[i].canTraverseOutsideSubtree())       return true;    }  }  return false;}  }
class C{  public boolean isMethodHandleInvoke(){  final int bits=MH_INVOKE_MODS & ~Modifier.PUBLIC;  final int negs=Modifier.STATIC;  if (testFlags(bits | negs,bits) && clazz == MethodHandle.class) {    return isMethodHandleInvokeName(name);  }  return false;}  }
class C{  public MaterialBarcodeScannerBuilder withFrontfacingCamera(){  mFacing=CameraSource.CAMERA_FACING_FRONT;  return this;}  }
class C{  public void paint(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).paint(a,b);  }}  }
class C{  public boolean equals(Object obj){  if (obj instanceof FontKey) {    FontKey font=(FontKey)obj;    return (size == font.size) && (style == font.style) && (family == font.family);  }  return false;}  }
class C{  public static ProtocolOp readProtocolOp(ASN1Reader reader) throws LDAPException {  byte type;  try {    type=reader.peekType();  } catch (  Exception e) {    LocalizableMessage message=ERR_LDAP_PROTOCOL_OP_DECODE_NULL.get();    throw new LDAPException(PROTOCOL_ERROR,message);  }switch (type) {case OP_TYPE_UNBIND_REQUEST:    return readUnbindRequest(reader);case 0x43:case 0x44:case 0x45:case 0x46:case 0x47:case 0x48:case 0x49:  LocalizableMessage message=ERR_LDAP_PROTOCOL_OP_DECODE_INVALID_TYPE.get(type);throw new LDAPException(PROTOCOL_ERROR,message);case OP_TYPE_DELETE_REQUEST:return readDeleteRequest(reader);case 0x4B:case 0x4C:case 0x4D:case 0x4E:case 0x4F:message=ERR_LDAP_PROTOCOL_OP_DECODE_INVALID_TYPE.get(type);throw new LDAPException(PROTOCOL_ERROR,message);case OP_TYPE_ABANDON_REQUEST:return readAbandonRequest(reader);case 0x51:case 0x52:case 0x53:case 0x54:case 0x55:case 0x56:case 0x57:case 0x58:case 0x59:case 0x5A:case 0x5B:case 0x5C:case 0x5D:case 0x5E:case 0x5F:message=ERR_LDAP_PROTOCOL_OP_DECODE_INVALID_TYPE.get(type);throw new LDAPException(PROTOCOL_ERROR,message);case OP_TYPE_BIND_REQUEST:return readBindRequest(reader);case OP_TYPE_BIND_RESPONSE:return readBindResponse(reader);case 0x62:message=ERR_LDAP_PROTOCOL_OP_DECODE_INVALID_TYPE.get(type);throw new LDAPException(PROTOCOL_ERROR,message);case OP_TYPE_SEARCH_REQUEST:return readSearchRequest(reader);case OP_TYPE_SEARCH_RESULT_ENTRY:return readSearchEntry(reader);case OP_TYPE_SEARCH_RESULT_DONE:return readSearchDone(reader);case OP_TYPE_MODIFY_REQUEST:return readModifyRequest(reader);case OP_TYPE_MODIFY_RESPONSE:return readModifyResponse(reader);case OP_TYPE_ADD_REQUEST:return readAddRequest(reader);case OP_TYPE_ADD_RESPONSE:return readAddResponse(reader);case 0x6A:message=ERR_LDAP_PROTOCOL_OP_DECODE_INVALID_TYPE.get(type);throw new LDAPException(PROTOCOL_ERROR,message);case OP_TYPE_DELETE_RESPONSE:return readDeleteResponse(reader);case OP_TYPE_MODIFY_DN_REQUEST:return readModifyDNRequest(reader);case OP_TYPE_MODIFY_DN_RESPONSE:return readModifyDNResponse(reader);case OP_TYPE_COMPARE_REQUEST:return readCompareRequest(reader);case OP_TYPE_COMPARE_RESPONSE:return readCompareResponse(reader);case 0x70:case 0x71:case 0x72:message=ERR_LDAP_PROTOCOL_OP_DECODE_INVALID_TYPE.get(type);throw new LDAPException(PROTOCOL_ERROR,message);case OP_TYPE_SEARCH_RESULT_REFERENCE:return readSearchReference(reader);case 0x74:case 0x75:case 0x76:message=ERR_LDAP_PROTOCOL_OP_DECODE_INVALID_TYPE.get(type);throw new LDAPException(PROTOCOL_ERROR,message);case OP_TYPE_EXTENDED_REQUEST:return readExtendedRequest(reader);case OP_TYPE_EXTENDED_RESPONSE:return readExtendedResponse(reader);case OP_TYPE_INTERMEDIATE_RESPONSE:return readIntermediateResponse(reader);default :message=ERR_LDAP_PROTOCOL_OP_DECODE_INVALID_TYPE.get(type);throw new LDAPException(PROTOCOL_ERROR,message);}}  }
class C{  public PaddedBufferedBlockCipher(BlockCipher cipher,BlockCipherPadding padding){  this.cipher=cipher;  this.padding=padding;  buf=new byte[cipher.getBlockSize()];  bufOff=0;}  }
class C{  public void endDocument() throws SAXException {  if (contentHandler != null) {    contentHandler.endDocument();  }}  }
class C{  public int elementAt(int i){  if (null == m_map)   return DTM.NULL;  return m_map[i];}  }
class C{  public static void executeRandomModifiableVariableModification(ModifiableVariableHolder object){  Field field=object.getRandomModifiableVariableField();  executeModifiableVariableModification(object,field);}  }
class C{  @Override protected void doGet(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {  resp.setContentType("text/plain");  PrintWriter out=resp.getWriter();  processHeaders(invalidHeaderName,req,out);  processHeaders("X-Bug51557",req,out);}  }
class C{  private void recordTokenString(Vector targetStrings){  int tokPos=getTokenQueuePosFromMap(m_patternMapSize - 1);  resetTokenMark(tokPos + 1);  if (m_processor.lookahead('(',1)) {    int tok=getKeywordToken(m_processor.m_token);switch (tok) {case OpCodes.NODETYPE_COMMENT:      targetStrings.addElement(PsuedoNames.PSEUDONAME_COMMENT);    break;case OpCodes.NODETYPE_TEXT:  targetStrings.addElement(PsuedoNames.PSEUDONAME_TEXT);break;case OpCodes.NODETYPE_NODE:targetStrings.addElement(PsuedoNames.PSEUDONAME_ANY);break;case OpCodes.NODETYPE_ROOT:targetStrings.addElement(PsuedoNames.PSEUDONAME_ROOT);break;case OpCodes.NODETYPE_ANYELEMENT:targetStrings.addElement(PsuedoNames.PSEUDONAME_ANY);break;case OpCodes.NODETYPE_PI:targetStrings.addElement(PsuedoNames.PSEUDONAME_ANY);break;default :targetStrings.addElement(PsuedoNames.PSEUDONAME_ANY);}} else {if (m_processor.tokenIs('@')) {tokPos++;resetTokenMark(tokPos + 1);}if (m_processor.lookahead(':',1)) {tokPos+=2;}targetStrings.addElement(m_compiler.getTokenQueue().elementAt(tokPos));}}  }
class C{  @Bean public Docket swaggerSpringfoxDocket(JHipsterProperties jHipsterProperties){  log.debug("Starting Swagger");  StopWatch watch=new StopWatch();  watch.start();  Contact contact=new Contact(jHipsterProperties.getSwagger().getContactName(),jHipsterProperties.getSwagger().getContactUrl(),jHipsterProperties.getSwagger().getContactEmail());  ApiInfo apiInfo=new ApiInfo(jHipsterProperties.getSwagger().getTitle(),jHipsterProperties.getSwagger().getDescription(),jHipsterProperties.getSwagger().getVersion(),jHipsterProperties.getSwagger().getTermsOfServiceUrl(),contact,jHipsterProperties.getSwagger().getLicense(),jHipsterProperties.getSwagger().getLicenseUrl());  Docket docket=new Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo).forCodeGeneration(true).genericModelSubstitutes(ResponseEntity.class).ignoredParameterTypes(java.sql.Date.class).directModelSubstitute(java.time.LocalDate.class,java.sql.Date.class).directModelSubstitute(java.time.ZonedDateTime.class,Date.class).directModelSubstitute(java.time.LocalDateTime.class,Date.class).select().paths(regex(DEFAULT_INCLUDE_PATTERN)).build();  watch.stop();  log.debug("Started Swagger in {} ms",watch.getTotalTimeMillis());  return docket;}  }
class C{  public static void deleteDirectory(String path){  deleteDirectoryContents(path,true);}  }
class C{  public JobGroupWrapper(String jobName){  jobs=new ArrayList<String>();  name=jobName;  paused=false;}  }
class C{  public boolean isWarnEnabled(){  return (getLogger().isLoggable(Level.WARNING));}  }
class C{  static String[] decodeAuthPassword(final String authPasswordValue) throws DecodeException {  final int length=authPasswordValue.length();  int pos=0;  pos=readSpaces(authPasswordValue,pos);  final StringBuilder scheme=new StringBuilder();  pos=readScheme(authPasswordValue,scheme,pos);  if (scheme.length() == 0) {    throw DecodeException.error(ERR_ATTR_SYNTAX_AUTHPW_NO_SCHEME.get());  }  pos=readSpaces(authPasswordValue,pos);  throwIfEndReached(authPasswordValue,length,pos,ERR_ATTR_SYNTAX_AUTHPW_NO_SCHEME_SEPARATOR);  pos++;  pos=readSpaces(authPasswordValue,pos);  final StringBuilder authInfo=new StringBuilder();  pos=readAuthInfo(authPasswordValue,authInfo,pos);  if (authInfo.length() == 0) {    throw DecodeException.error(ERR_ATTR_SYNTAX_AUTHPW_NO_AUTH_INFO.get());  }  pos=readSpaces(authPasswordValue,pos);  throwIfEndReached(authPasswordValue,length,pos,ERR_ATTR_SYNTAX_AUTHPW_NO_AUTH_INFO_SEPARATOR);  pos++;  pos=readSpaces(authPasswordValue,pos);  final StringBuilder authValue=new StringBuilder();  pos=readAuthValue(authPasswordValue,length,pos,authValue);  if (authValue.length() == 0) {    throw DecodeException.error(ERR_ATTR_SYNTAX_AUTHPW_NO_AUTH_VALUE.get());  }  while (pos < length) {    final char c=authPasswordValue.charAt(pos);    if (c == ' ') {      pos++;    } else {      throw DecodeException.error(ERR_ATTR_SYNTAX_AUTHPW_INVALID_TRAILING_CHAR.get(pos));    }  }  return new String[]{scheme.toString(),authInfo.toString(),authValue.toString()};}  }
class C{  public void read(ByteBuffer byteBuffer) throws InvalidFrameException, InvalidDataTypeException {  String identifier=readIdentifier(byteBuffer);  if (!isValidID3v2FrameIdentifier(identifier)) {    logger.config(getLoggingFilename() + ":Invalid identifier:" + identifier);    byteBuffer.position(byteBuffer.position() - (getFrameIdSize() - 1));    throw new InvalidFrameIdentifierException(getLoggingFilename() + ":" + identifier+ ":is not a valid ID3v2.30 frame");  }  frameSize=byteBuffer.getInt();  if (frameSize < 0) {    logger.warning(getLoggingFilename() + ":Invalid Frame Size:" + frameSize+ ":"+ identifier);    throw new InvalidFrameException(identifier + " is invalid frame:" + frameSize);  } else   if (frameSize == 0) {    logger.warning(getLoggingFilename() + ":Empty Frame Size:" + identifier);    byteBuffer.get();    byteBuffer.get();    throw new EmptyFrameException(identifier + " is empty frame");  } else   if (frameSize > byteBuffer.remaining()) {    logger.warning(getLoggingFilename() + ":Invalid Frame size of " + frameSize+ " larger than size of"+ byteBuffer.remaining()+ " before mp3 audio:"+ identifier);    throw new InvalidFrameException(identifier + " is invalid frame:" + frameSize+ " larger than size of"+ byteBuffer.remaining()+ " before mp3 audio:"+ identifier);  }  statusFlags=new StatusFlags(byteBuffer.get());  encodingFlags=new EncodingFlags(byteBuffer.get());  String id;  id=ID3Tags.convertFrameID23To24(identifier);  if (id == null) {    if (ID3Tags.isID3v23FrameIdentifier(identifier)) {      id=identifier;    } else {      id=UNSUPPORTED_ID;    }  }  logger.fine(getLoggingFilename() + ":Identifier was:" + identifier+ " reading using:"+ id+ "with frame size:"+ frameSize);  int extraHeaderBytesCount=0;  int decompressedFrameSize=-1;  if (((EncodingFlags)encodingFlags).isCompression()) {    decompressedFrameSize=byteBuffer.getInt();    extraHeaderBytesCount=FRAME_COMPRESSION_UNCOMPRESSED_SIZE;    logger.fine(getLoggingFilename() + ":Decompressed frame size is:" + decompressedFrameSize);  }  if (((EncodingFlags)encodingFlags).isEncryption()) {    extraHeaderBytesCount+=FRAME_ENCRYPTION_INDICATOR_SIZE;    encryptionMethod=byteBuffer.get();  }  if (((EncodingFlags)encodingFlags).isGrouping()) {    extraHeaderBytesCount+=FRAME_GROUPING_INDICATOR_SIZE;    groupIdentifier=byteBuffer.get();  }  if (((EncodingFlags)encodingFlags).isNonStandardFlags()) {    logger.severe(getLoggingFilename() + ":InvalidEncodingFlags:" + Hex.asHex(((EncodingFlags)encodingFlags).getFlags()));  }  if (((EncodingFlags)encodingFlags).isCompression()) {    if (decompressedFrameSize > (100 * frameSize)) {      throw new InvalidFrameException(identifier + " is invalid frame, frame size " + frameSize+ " cannot be:"+ decompressedFrameSize+ " when uncompressed");    }  }  int realFrameSize=frameSize - extraHeaderBytesCount;  if (realFrameSize <= 0) {    throw new InvalidFrameException(identifier + " is invalid frame, realframeSize is:" + realFrameSize);  }  ByteBuffer frameBodyBuffer;  try {    if (((EncodingFlags)encodingFlags).isCompression()) {      frameBodyBuffer=ID3Compression.uncompress(identifier,getLoggingFilename(),byteBuffer,decompressedFrameSize,realFrameSize);      if (((EncodingFlags)encodingFlags).isEncryption()) {        frameBody=readEncryptedBody(id,frameBodyBuffer,decompressedFrameSize);      } else {        frameBody=readBody(id,frameBodyBuffer,decompressedFrameSize);      }    } else     if (((EncodingFlags)encodingFlags).isEncryption()) {      frameBody=readEncryptedBody(identifier,byteBuffer,frameSize);    } else {      frameBodyBuffer=byteBuffer.slice();      frameBodyBuffer.limit(realFrameSize);      frameBody=readBody(id,frameBodyBuffer,realFrameSize);    }    if (!(frameBody instanceof ID3v23FrameBody)) {      logger.config(getLoggingFilename() + ":Converted frameBody with:" + identifier+ " to deprecated frameBody");      frameBody=new FrameBodyDeprecated((AbstractID3v2FrameBody)frameBody);    }  }  finally {    byteBuffer.position(byteBuffer.position() + realFrameSize);  }}  }
class C{  public SpeechConfiguration(){}  }
class C{  public static boolean isMapped(int code){  return code == LDAP_NOT_ALLOWED_ON_RDN || code == LDAP_NO_SUCH_OBJECT;}  }
class C{  public void testWrite1() throws Exception {  byte[] data=new byte[]{-127,-100,-50,-10,-1,0,1,10,50,127};  TestOutputStream tos=new TestOutputStream();  CipherOutputStream cos=new CipherOutputStream(tos,new NullCipher());  for (int i=0; i < data.length; i++) {    cos.write(data[i]);  }  cos.flush();  byte[] result=tos.toByteArray();  if (!Arrays.equals(result,data)) {    fail("CipherOutputStream wrote incorrect data.");  }}  }
class C{  @AfterClass public static void cleanupClass(){  try {    Misc.deleteDirectorySimple(scenario.getRepositoryLocation());  } catch (  Exception ignore) {    System.err.println("cannot remove " + scenario.getRepositoryLocation());  }}  }
class C{  public boolean isAllowUnlimited(){  return allowUnlimited;}  }
class C{  public void elementDecl(String arg0,String arg1) throws SAXException {  if (m_firstTagNotEmitted) {    emitFirstTag();  }  m_handler.elementDecl(arg0,arg1);}  }
class C{  private List<JsonValue> createUsers(final int numberOfUsers,final ManagedObjectSet managedObjectSet) throws ResourceException {  final List<JsonValue> resources=new LinkedList<>();  for (int i=0; i < numberOfUsers; i++) {    JsonValue user=createUserObject(i + "_" + UUID.randomUUID().toString(),UUID.randomUUID().toString(),UUID.randomUUID().toString());    resources.add(createUser(user.get(FIELD_ID).asString(),user,managedObjectSet));  }  return resources;}  }
class C{  boolean matches(JComponent c){  return matches(c,parts.length - 1);}  }
class C{  @Override public void cacheResult(List<Foo> foos){  for (  Foo foo : foos) {    if (entityCache.getResult(FooModelImpl.ENTITY_CACHE_ENABLED,FooImpl.class,foo.getPrimaryKey()) == null) {      cacheResult(foo);    } else {      foo.resetOriginalValues();    }  }}  }
class C{  public static TestSuite suite() throws Exception {  Class testClass=ClassLoader.getSystemClassLoader().loadClass("org.w3c.domts.level3.xpath.alltests");  Constructor testConstructor=testClass.getConstructor(new Class[]{DOMTestDocumentBuilderFactory.class});  DOMTestDocumentBuilderFactory factory=new BatikTestDocumentBuilderFactory(new DocumentBuilderSetting[0]);  Object test=testConstructor.newInstance(new Object[]{factory});  return new JUnitTestSuiteAdapter((DOMTestSuite)test);}  }
class C{  public static void callMethod(final Object obj,final String methodName,final Object... args) throws InvocationTargetException {  callMethod(obj,methodName,false,args);}  }
class C{  public BrdComponent(String p_name,PlaPointInt p_location,int p_rotation_in_degree,boolean p_on_front,LibPackage p_package_front,LibPackage p_package_back,int p_no,boolean p_position_fixed){  id_no=p_no;  name=p_name;  location=p_location;  on_front=p_on_front;  lib_package_front=p_package_front;  lib_package_back=p_package_back;  position_fixed=p_position_fixed;  rotation_in_degree=normalize_rotation(p_rotation_in_degree);}  }
class C{  public static byte[] decode(String s){  return decode(s.toCharArray());}  }
class C{  public static void main(String args[]){  if (daemon == null) {    Bootstrap bootstrap=new Bootstrap();    try {      bootstrap.init();    } catch (    Throwable t) {      handleThrowable(t);      t.printStackTrace();      return;    }    daemon=bootstrap;  } else {    Thread.currentThread().setContextClassLoader(daemon.catalinaLoader);  }  try {    String command="start";    if (args.length > 0) {      command=args[args.length - 1];    }    if (command.equals("startd")) {      args[args.length - 1]="start";      daemon.load(args);      daemon.start();    } else     if (command.equals("stopd")) {      args[args.length - 1]="stop";      daemon.stop();    } else     if (command.equals("start")) {      daemon.setAwait(true);      daemon.load(args);      daemon.start();    } else     if (command.equals("stop")) {      daemon.stopServer(args);    } else     if (command.equals("configtest")) {      daemon.load(args);      if (null == daemon.getServer()) {        System.exit(1);      }      System.exit(0);    } else {      log.warn("Bootstrap: command \"" + command + "\" does not exist.");    }  } catch (  Throwable t) {    if (t instanceof InvocationTargetException && t.getCause() != null) {      t=t.getCause();    }    handleThrowable(t);    t.printStackTrace();    System.exit(1);  }}  }
class C{  public Subject createSubject(Element elem) throws XACMLException {  Object obj=XACMLSDKUtils.getObjectInstance(XACMLConstants.SUBJECT,elem);  if (obj == null) {    return new SubjectImpl(elem);  } else {    return (Subject)obj;  }}  }
class C{  public void delete() throws IOException {  close();  Util.deleteContents(directory);}  }
class C{  private Field fieldFrom(String typeName,String fieldName,JsonNode root){  if (root.get("description") != null) {    config.getFieldDescription().put(typeName,fieldName,root.get("description").asText());  }  Field.Builder builder=Field.newBuilder();  builder.setName(fieldName);  if (root.get("$ref") != null) {    return builder.setKind(Field.Kind.TYPE_MESSAGE).setCardinality(Field.Cardinality.CARDINALITY_OPTIONAL).setTypeUrl(root.get("$ref").asText()).build();  }  if (root.get("type") == null) {    throw new IllegalArgumentException("unspecified type for field " + fieldName + " in type "+ typeName);  }  if (root.get("repeated") != null && root.get("repeated").asBoolean()) {    return arrayFieldFrom(builder,typeName,fieldName,root);  }  String typeText=root.get("type").asText();  if (root.get("enum") != null) {    return builder.setCardinality(Field.Cardinality.CARDINALITY_OPTIONAL).setKind(Kind.TYPE_ENUM).setTypeUrl(typeText).build();  }  if (TYPE_TABLE.containsRow(typeText)) {    return builder.setCardinality(Field.Cardinality.CARDINALITY_OPTIONAL).setKind(getFieldKind(typeName,fieldName,typeText,root.get("format"),root.get("pattern"))).build();  }  if (typeText.equals("array")) {    return arrayFieldFrom(builder,typeName,fieldName,root.get("items"));  }  if (typeText.equals("object")) {    if (root.get("additionalProperties") != null) {      String propertyType=createSyntheticTypeForProperty(root.get("additionalProperties"));      config.getAdditionalProperties().put(typeName,fieldName,true);      return builder.setKind(Field.Kind.TYPE_MESSAGE).setTypeUrl(propertyType).setCardinality(Field.Cardinality.CARDINALITY_REPEATED).build();    } else {      String propertyType=typeName + "." + lowerCamelToUpperCamel(fieldName);      addType(propertyType,root);      return builder.setKind(Field.Kind.TYPE_MESSAGE).setTypeUrl(propertyType).setCardinality(Field.Cardinality.CARDINALITY_OPTIONAL).build();    }  }  throw new IllegalArgumentException("unknown type: " + typeText);}  }
class C{  public long findKey(Object value,boolean identity,long notFound){  V[] valueTable=this.valueTable;  if (value == null) {    if (hasZeroValue && zeroValue == null)     return 0;    long[] keyTable=this.keyTable;    for (int i=capacity + stashSize; i-- > 0; )     if (keyTable[i] != EMPTY && valueTable[i] == null)     return keyTable[i];  } else   if (identity) {    if (value == zeroValue)     return 0;    for (int i=capacity + stashSize; i-- > 0; )     if (valueTable[i] == value)     return keyTable[i];  } else {    if (hasZeroValue && value.equals(zeroValue))     return 0;    for (int i=capacity + stashSize; i-- > 0; )     if (value.equals(valueTable[i]))     return keyTable[i];  }  return notFound;}  }
class C{  public JKSecurityException(Throwable cause){  super(cause);}  }
class C{  public void modifyEntity(String entityName,String entityType,Map attributes) throws EntityException, SSOException {  try {    Object[] objs={tokenString,entityName,entityType,entityLocation,attributes};    client.send(client.encodeMessage("modifyEntity",objs),sessionCookies.getLBCookie(token.getTokenID().toString()),null);  } catch (  RemoteException rex) {    EntityUtils.debug.warning("EntityObject:modifyEntity->RemoteException",rex);    throw new EntityException(rex.getMessage(),"1000");  }catch (  Exception ex) {    EntityUtils.debug.warning("EntityObject:modifyEntity->Exception",ex);    throw new EntityException(ex.getMessage(),"1000");  }}  }
class C{  public boolean isDocOrdered(){  return true;}  }
class C{  private static Class<?>[] types(Object... values){  if (values == null) {    return new Class[0];  }  Class<?>[] result=new Class[values.length];  for (int i=0; i < values.length; i++) {    Object value=values[i];    result[i]=value == null ? NULL.class : value.getClass();  }  return result;}  }
class C{  protected boolean isValid(){  return isValid;}  }
class C{  public ConnectException(String s,Exception ex){  super(s,ex);}  }
class C{  @RequestMapping(value="/users",method=RequestMethod.PUT,produces=MediaType.APPLICATION_JSON_VALUE) @Timed @Secured(AuthoritiesConstants.ADMIN) public ResponseEntity<ManagedUserVM> updateUser(@RequestBody ManagedUserVM managedUserVM){  log.debug("REST request to update User : {}",managedUserVM);  Optional<User> existingUser=userRepository.findOneByEmail(managedUserVM.getEmail());  if (existingUser.isPresent() && (!existingUser.get().getId().equals(managedUserVM.getId()))) {    return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert("userManagement","emailexists","E-mail already in use")).body(null);  }  existingUser=userRepository.findOneByLogin(managedUserVM.getLogin().toLowerCase());  if (existingUser.isPresent() && (!existingUser.get().getId().equals(managedUserVM.getId()))) {    return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert("userManagement","userexists","Login already in use")).body(null);  }  userService.updateUser(managedUserVM.getId(),managedUserVM.getLogin(),managedUserVM.getFirstName(),managedUserVM.getLastName(),managedUserVM.getEmail(),managedUserVM.isActivated(),managedUserVM.getLangKey(),managedUserVM.getAuthorities());  return ResponseEntity.ok().headers(HeaderUtil.createAlert("userManagement.updated",managedUserVM.getLogin())).body(new ManagedUserVM(userService.getUserWithAuthorities(managedUserVM.getId())));}  }
class C{  public Set<String> searchReferralPrivilegeNames(Set<SearchFilter> filters,boolean boolAnd,int numOfEntries,boolean sortResults,boolean ascendingOrder) throws EntitlementException {  return searchReferralPrivilegeNames(filters,getAdminSubject(),getRealm(),boolAnd,numOfEntries,sortResults,ascendingOrder);}  }
class C{  public void draw_boundary(PlaArea p_area,double p_draw_half_width,Color p_color,Graphics p_g,double p_translucency_factor){  draw_boundary(p_area.get_border(),p_draw_half_width,p_color,p_g,p_translucency_factor);  PlaShape[] holes=p_area.get_holes();  for (int index=0; index < holes.length; ++index) {    draw_boundary(holes[index],p_draw_half_width,p_color,p_g,p_translucency_factor);  }}  }
class C{  public boolean draw(Canvas canvas){  update();  final float centerX=mBounds.centerX();  final float centerY=mBounds.height() - mRadius;  canvas.scale(1.f,Math.min(mGlowScaleY,1.f) * mBaseGlowScale,centerX,0);  final float displacement=Math.max(0,Math.min(mDisplacement,1.f)) - 0.5f;  float translateX=mBounds.width() * displacement / 2;  mPaint.setAlpha((int)(0xff * mGlowAlpha));  canvas.drawCircle(centerX + translateX,centerY,mRadius,mPaint);  boolean oneLastFrame=false;  if (mState == STATE_RECEDE && mGlowScaleY == 0) {    mState=STATE_IDLE;    oneLastFrame=true;  }  return mState != STATE_IDLE || oneLastFrame;}  }
class C{  @Override public com.liferay.blade.samples.servicebuilder.model.Foo addFoo(com.liferay.blade.samples.servicebuilder.model.Foo foo){  return _fooLocalService.addFoo(foo);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList acronymList;  Node testNode;  NamedNodeMap attributes;  Attr titleAttr;  String value;  Text textNode;  Node retval;  Node firstChild;  Node lastChild;  Node refChild=null;  doc=(Document)load("hc_staff",true);  acronymList=doc.getElementsByTagName("acronym");  testNode=acronymList.item(3);  attributes=testNode.getAttributes();  titleAttr=(Attr)attributes.getNamedItem("title");  textNode=doc.createTextNode("terday");  retval=titleAttr.insertBefore(textNode,refChild);  value=titleAttr.getValue();  assertEquals("attrValue","Yesterday",value);  value=titleAttr.getNodeValue();  assertEquals("attrNodeValue","Yesterday",value);  value=retval.getNodeValue();  assertEquals("retvalValue","terday",value);  firstChild=titleAttr.getFirstChild();  value=firstChild.getNodeValue();  assertEquals("firstChildValue","Yes",value);  lastChild=titleAttr.getLastChild();  value=lastChild.getNodeValue();  assertEquals("lastChildValue","terday",value);}  }
class C{  public final String toString(){  return (name + ((isSource == true) ? " source" : " target") + " port");}  }
class C{  public RxGalleryFinal cropropCompressionQuality(@IntRange(from=0) int compressQuality){  configuration.setCompressionQuality(compressQuality);  return this;}  }
class C{  public static void showInternalMessageDialog(Component parentComponent,Object message,String title,int messageType,Icon icon){  showInternalOptionDialog(parentComponent,message,title,DEFAULT_OPTION,messageType,icon,null,null);}  }
class C{  void error(String msg,Object[] args) throws TransformerException {  String fmsg=XSLMessages.createXPATHMessage(msg,args);  ErrorListener ehandler=this.getErrorListener();  TransformerException te=new TransformerException(fmsg,m_sourceLocator);  if (null != ehandler) {    ehandler.fatalError(te);  } else {    throw te;  }}  }
class C{  public void handleButton3Request(RequestInvocationEvent event){  super.handleButton2Request(event);}  }
class C{  public String toString(){  StringBuffer buf=new StringBuffer();  for (StepPattern pat=this; pat != null; pat=pat.m_relativePathPattern) {    if (pat != this)     buf.append("/");    buf.append(Axis.getNames(pat.m_axis));    buf.append("::");    if (0x000005000 == pat.m_whatToShow) {      buf.append("doc()");    } else     if (DTMFilter.SHOW_BYFUNCTION == pat.m_whatToShow) {      buf.append("function()");    } else     if (DTMFilter.SHOW_ALL == pat.m_whatToShow) {      buf.append("node()");    } else     if (DTMFilter.SHOW_TEXT == pat.m_whatToShow) {      buf.append("text()");    } else     if (DTMFilter.SHOW_PROCESSING_INSTRUCTION == pat.m_whatToShow) {      buf.append("processing-instruction(");      if (null != pat.m_name) {        buf.append(pat.m_name);      }      buf.append(")");    } else     if (DTMFilter.SHOW_COMMENT == pat.m_whatToShow) {      buf.append("comment()");    } else     if (null != pat.m_name) {      if (DTMFilter.SHOW_ATTRIBUTE == pat.m_whatToShow) {        buf.append("@");      }      if (null != pat.m_namespace) {        buf.append("{");        buf.append(pat.m_namespace);        buf.append("}");      }      buf.append(pat.m_name);    } else     if (DTMFilter.SHOW_ATTRIBUTE == pat.m_whatToShow) {      buf.append("@");    } else     if ((DTMFilter.SHOW_DOCUMENT | DTMFilter.SHOW_DOCUMENT_FRAGMENT) == pat.m_whatToShow) {      buf.append("doc-root()");    } else {      buf.append("?" + Integer.toHexString(pat.m_whatToShow));    }    if (null != pat.m_predicates) {      for (int i=0; i < pat.m_predicates.length; i++) {        buf.append("[");        buf.append(pat.m_predicates[i]);        buf.append("]");      }    }  }  return buf.toString();}  }
class C{  protected String paramString(){  String str=super.paramString() + ",text=" + getText();  if (editable) {    str+=",editable";  }  return str + ",selection=" + getSelectionStart()+ "-"+ getSelectionEnd();}  }
class C{  @Override public boolean allowedInBranch(){  return true;}  }
class C{  public String toString(){  StringBuffer result=new StringBuffer();  if (addr != null)   for (int i=0; i < addr.length; ++i) {    int x=addr[i] & 0xFF;    result.append((x < 0x10 ? "0" : "") + Integer.toString(x,16));  }  result.append(':');  result.append(uid.toString());  return result.toString();}  }
class C{  public DeviceRgb(){  this(0f,0f,0f);}  }
class C{  public void removeAci(Backend<?> backend){  lock.writeLock().lock();  try {    Iterator<Map.Entry<DN,List<Aci>>> iterator=aciList.entrySet().iterator();    while (iterator.hasNext()) {      Map.Entry<DN,List<Aci>> mapEntry=iterator.next();      if (backend.handlesEntry(mapEntry.getKey())) {        iterator.remove();      }    }  }  finally {    lock.writeLock().unlock();  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  Attr attribute;  NodeList elementList;  String nullNS=null;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagName("emp:employee");  element=(Element)elementList.item(0);  assertNotNull("empEmployeeNotNull",element);  attribute=element.getAttributeNodeNS(nullNS,"defaultAttr");{    boolean success=false;    try {      attribute.setPrefix("test");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("nodesetprefix04",success);  }}  }
class C{  public static void markExistingUsersForNoFolderCreation(Context context){  UserManagerCompat userManager=UserManagerCompat.getInstance(context);  UserHandleCompat myUser=UserHandleCompat.myUserHandle();  SharedPreferences prefs=null;  for (  UserHandleCompat user : userManager.getUserProfiles()) {    if (myUser.equals(user)) {      continue;    }    if (prefs == null) {      prefs=context.getSharedPreferences(LauncherFiles.MANAGED_USER_PREFERENCES_KEY,Context.MODE_PRIVATE);    }    String folderIdKey=USER_FOLDER_ID_PREFIX + userManager.getSerialNumberForUser(user);    if (!prefs.contains(folderIdKey)) {      prefs.edit().putLong(folderIdKey,ItemInfo.NO_ID).apply();    }  }}  }
class C{  private DSAParameters generateParameters_FIPS186_3(){  Digest d=digest;  int outlen=d.getDigestSize() * 8;  int seedlen=N;  byte[] seed=new byte[seedlen / 8];  int n=(L - 1) / outlen;  int b=(L - 1) % outlen;  byte[] output=new byte[d.getDigestSize()];  for (; ; ) {    random.nextBytes(seed);    hash(d,seed,output);    BigInteger U=new BigInteger(1,output).mod(ONE.shiftLeft(N - 1));    BigInteger q=ONE.shiftLeft(N - 1).add(U).add(ONE).subtract(U.mod(TWO));    if (!q.isProbablePrime(certainty)) {      continue;    }    byte[] offset=Arrays.clone(seed);    int counterLimit=4 * L;    for (int counter=0; counter < counterLimit; ++counter) {      BigInteger W=ZERO;      for (int j=0, exp=0; j <= n; ++j, exp+=outlen) {        inc(offset);        hash(d,offset,output);        BigInteger Vj=new BigInteger(1,output);        if (j == n) {          Vj=Vj.mod(ONE.shiftLeft(b));        }        W=W.add(Vj.shiftLeft(exp));      }      BigInteger X=W.add(ONE.shiftLeft(L - 1));      BigInteger c=X.mod(q.shiftLeft(1));      BigInteger p=X.subtract(c.subtract(ONE));      if (p.bitLength() != L) {        continue;      }      if (p.isProbablePrime(certainty)) {        if (usageIndex >= 0) {          BigInteger g=calculateGenerator_FIPS186_3_Verifiable(d,p,q,seed,usageIndex);          if (g != null) {            return new DSAParameters(p,q,g,new DSAValidationParameters(seed,counter,usageIndex));          }        }        BigInteger g=calculateGenerator_FIPS186_3_Unverifiable(p,q,random);        return new DSAParameters(p,q,g,new DSAValidationParameters(seed,counter));      }    }  }}  }
class C{  public ListBuffer<A> appendArray(final A[] xs){  for (  final A x : xs) {    append(x);  }  return this;}  }
class C{  public static int sizeOfCollection(@SuppressWarnings("rawtypes") Collection list){  if (list == null) {    return 0;  }  int size=36;  Object[] values=list.toArray();  for (int i=0; i < values.length; i++) {    Object obj=values[i];    if (obj instanceof String) {      size+=sizeOfString((String)obj);    } else     if (obj instanceof Long) {      size+=sizeOfLong() + sizeOfObject();    } else {      size+=((ICacheable)obj).getCachedSize();    }  }  return size;}  }
class C{  public void update(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).update(a,b);  }}  }
class C{  public DTMDOMException(short code,String message){  super(code,message);}  }
class C{  public ServletSecurityElement(){  super();}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  IOutput outputWriter=getOutputWriter();  String realm=getStringOptionValue(IArgument.REALM_NAME);  String serviceName=getStringOptionValue(IArgument.SERVICE_NAME);  String datafile=getStringOptionValue(IArgument.DATA_FILE);  List attrValues=rc.getOption(IArgument.ATTRIBUTE_VALUES);  boolean bAppend=isOptionSet(OPT_APPEND);  if ((datafile == null) && (attrValues == null)) {    throw new CLIException(getResourceString("missing-attributevalues"),ExitCodes.INCORRECT_OPTION,rc.getSubCommand().getName());  }  Map attributeValues=AttributeValues.parse(getCommandManager(),datafile,attrValues);  try {    OrganizationConfigManager ocm=new OrganizationConfigManager(adminSSOToken,realm);    if (bAppend) {      for (Iterator i=attributeValues.keySet().iterator(); i.hasNext(); ) {        String attributeName=(String)i.next();        String[] params={realm,serviceName,attributeName};        Set values=(Set)attributeValues.get(attributeName);        writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_ADD_ATTR_VALUES_REALM",params);        ocm.addAttributeValues(serviceName,attributeName,values);        writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_ADD_ATTR_VALUES_REALM",params);        outputWriter.printlnMessage(MessageFormat.format(getResourceString("add-attribute-values-realm-succeed"),(Object[])params));      }    } else {      String[] params={realm,serviceName};      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_SET_ATTR_VALUES_REALM",params);      ocm.setAttributes(serviceName,attributeValues);      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_SET_ATTR_VALUES_REALM",params);      outputWriter.printlnMessage(MessageFormat.format(getResourceString("set-attribute-values-realm-succeed"),(Object[])params));    }  } catch (  SMSException e) {    String[] args={realm,serviceName,e.getMessage()};    debugError("RealmSetAttributeValues.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SET_ATTR_VALUES_REALM",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public PrintException(String s){  super(s);}  }
class C{  public static String byteToLowerHex(final byte b){  return BYTE_HEX_STRINGS[LOWER_CASE][b & 0xFF];}  }
class C{  public SQLiteCustomFunction(String name,int numArgs,SQLiteDatabase.CustomFunction callback){  if (name == null) {    throw new IllegalArgumentException("name must not be null.");  }  this.name=name;  this.numArgs=numArgs;  this.callback=callback;}  }
class C{  private void deploy(String user,String home){  String contextPath="/~" + user;  if (host.findChild(contextPath) != null)   return;  File app=new File(home,directoryName);  if (!app.exists() || !app.isDirectory())   return;  host.getLogger().info(sm.getString("userConfig.deploy",user));  try {    Class<?> clazz=Class.forName(contextClass);    Context context=(Context)clazz.newInstance();    context.setPath(contextPath);    context.setDocBase(app.toString());    clazz=Class.forName(configClass);    LifecycleListener listener=(LifecycleListener)clazz.newInstance();    context.addLifecycleListener(listener);    host.addChild(context);  } catch (  Exception e) {    host.getLogger().error(sm.getString("userConfig.error",user),e);  }}  }
class C{  public final boolean equals(Object obj){  return super.equals(obj);}  }
class C{  protected void didExpand(){  int nextRow=setRowAndChildren(row);  FHTreeStateNode parent=(FHTreeStateNode)getParent();  int childRowCount=nextRow - row - 1;  if (parent != null) {    parent.adjustRowBy(childRowCount,parent.getIndex(this) + 1);  }  adjustRowCountBy(childRowCount);}  }
class C{  boolean isValidated(){  return schema != null;}  }
class C{  public InvalidScopeException(){  this("The requested scope is invalid, unknown, or malformed.");}  }
class C{  public int size(){  return cursors.size();}  }
class C{  public boolean equals(Object o){  if (o == null)   return false;  if (this == o)   return true;  if (!(o instanceof SAEPrincipal))   return false;  SAEPrincipal that=(SAEPrincipal)o;  if (this.getName().equals(that.getName()))   return true;  return false;}  }
class C{  public char next(){  pos+=1;  int end=offset + count;  if (pos >= end) {    pos=end;    return DONE;  }  return current();}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.TripleDesSha256Rsa15Element createTripleDesSha256Rsa15Element() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.TripleDesSha256Rsa15ElementImpl();}  }
class C{  public SAML2ConfigBuilder spEntityId(String spEntityId){  this.spEntityId=spEntityId;  return this;}  }
class C{  @DataProvider(name="simpleConnect") Object[][] createCredentials(){  return new Object[][]{{"cn=directory manager","password",false},{"cn=Privileged User,o=test","password",true},{"cn=Privileged User,o=test","wrongPassword",false},{"cn=wrong user","password",false},{"invalid DN","password",false},{"cn=Privileged User,o=test",null,false},{null,"password",false},{null,null,false}};}  }
class C{  static public void assertNotSame(Object expected,Object actual){  assertNotSame(null,expected,actual);}  }
class C{  public GeneralName(int tag,byte[] name) throws IOException {  if (name == null) {    throw new NullPointerException("name == null");  }  if ((tag < 0) || (tag > 8)) {    throw new IOException("GeneralName: unknown tag: " + tag);  }  this.tag=tag;  this.name_encoding=new byte[name.length];  System.arraycopy(name,0,this.name_encoding,0,name.length);  this.name=nameASN1[tag].decode(this.name_encoding);}  }
class C{  public boolean removeServerLibraries(){  return removeServerLibrariesArg.isPresent();}  }
class C{  public void stopServer() throws ApplicationException {  stopServer(false);}  }
class C{  protected void tearDown(){}  }
class C{  private String[] readFile(InputStream s) throws IOException {  BufferedReader reader=new BufferedReader(new InputStreamReader(s));  List<String> lines=new ArrayList<>();  String line;  while ((line=reader.readLine()) != null) {    lines.add(line);  }  return lines.toArray(new String[lines.size()]);}  }
class C{  public final void testToString() throws Exception {  Set<TrustAnchor> taSet=TestUtils.getTrustAnchorSet();  if (taSet == null) {    fail(getName() + ": not performed (could not create test TrustAnchor set)");  }  PKIXParameters p=new PKIXParameters(taSet);  assertNotNull(p.toString());  PKIXParameters p1=null;  try {    p1.toString();    fail("NullPointerException expected");  } catch (  NullPointerException e) {  }}  }
class C{  private void redirectWithAuthNResponse(HttpServletRequest request,HttpServletResponse response,SSOToken token) throws ServletException, IOException {  String gotoURL=getRedirectURL(request,response);  if (debug.messageEnabled()) {    debug.message("CDCServlet.redirectWithAuthNResponse: gotoURL = " + gotoURL);  }  if (debug.messageEnabled()) {    debug.message("CDCServlet.redirectWithAuthNResponse: After encoding: gotoURL = " + gotoURL);  }  if (gotoURL != null) {    try {      String inResponseTo=request.getParameter(REQUEST_ID);      String spDescriptor=request.getParameter(PROVIDER_ID);      String restrictedTokenID;      TokenRestriction tokenRestriction=tokenRestrictionResolver.resolve(FSAuthnRequest.parseURLEncodedRequest(request).getProviderId(),gotoURL,AccessController.doPrivileged(AdminTokenAction.getInstance()),uniqueCookieEnabled);      if (uniqueCookieEnabled) {        restrictedTokenID=sessionService.getRestrictedTokenId(token.getTokenID().toString(),tokenRestriction);      } else {        restrictedTokenID=token.getTokenID().toString();      }      FSAssertion assertion=createAssertion(spDescriptor,SELF_PROVIDER_ID,restrictedTokenID,token.getAuthType(),token.getProperty("authInstant"),token.getPrincipal().getName(),inResponseTo);      String relayState=request.getParameter(RELAY_STATE);      Status status=new Status(new StatusCode(IFSConstants.STATUS_CODE_SUCCESS));      FSAuthnResponse authnResponse=createAuthnResponse(SELF_PROVIDER_ID,responseID,inResponseTo,status,assertion,relayState);      sendAuthnResponse(request,response,authnResponse,gotoURL);    } catch (    SAMLException se) {      debug.error("CDCServlet.doGetPost",se);      showError(response);    }catch (    FSMsgException fe) {      debug.error("CDCServlet.doGetPost",fe);      showError(response);    }catch (    FSException fse) {      debug.error("CDCServlet.doGetPost",fse);      showError(response);    }catch (    SessionException e) {      debug.error("CDCServlet.doGetPost",e);    }catch (    SSOException ssoe) {      debug.error("CDCServlet.doGetPost",ssoe);    }catch (    Exception e) {      debug.error("CDCServlet.doGetPost",e);      showError(response,FORBIDDEN_STR_MATCH);    }  }}  }
class C{  public Phaser(Phaser parent,int parties){  if (parties >>> PARTIES_SHIFT != 0)   throw new IllegalArgumentException("Illegal number of parties");  int phase=0;  this.parent=parent;  if (parent != null) {    final Phaser root=parent.root;    this.root=root;    this.evenQ=root.evenQ;    this.oddQ=root.oddQ;    if (parties != 0)     phase=parent.doRegister(1);  } else {    this.root=this;    this.evenQ=new AtomicReference<QNode>();    this.oddQ=new AtomicReference<QNode>();  }  this.state=(parties == 0) ? (long)EMPTY : ((long)phase << PHASE_SHIFT) | ((long)parties << PARTIES_SHIFT) | ((long)parties);}  }
class C{  public static String replace(String orig,String oldStr,String newStr){  StringBuffer sb=new StringBuffer(orig);  while (contains(sb.toString(),oldStr)) {    if (orig.contains("(") && orig.contains(";")) {      int start=sb.indexOf("L" + oldStr) + 1;      int end=sb.indexOf(oldStr + ";") + oldStr.length();      if (start > -1 && end <= orig.length()) {        sb.replace(start,end,newStr);      } else {        System.err.println("REPLACE FAIL: (" + oldStr + ") - "+ orig);        break;      }    } else     if (orig.startsWith("L") && orig.endsWith(";")) {      if (orig.substring(1,orig.length() - 1).equals(oldStr)) {        sb.replace(1,orig.length() - 1,newStr);      }    } else {      if (orig.equals(oldStr)) {        sb.replace(0,sb.length(),newStr);      } else {        System.err.println("FUCK: (" + sb.toString() + ") - "+ oldStr+ ":"+ newStr);        break;      }    }  }  return sb.toString();}  }
class C{  public void printStackTrace(PrintWriter s){  super.printStackTrace(s);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.RequireSignedTokensElement createRequireSignedTokensElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.RequireSignedTokensElementImpl();}  }
class C{  public static String toUpperCase(String value){  return value != null ? value.toUpperCase() : null;}  }
class C{  @Override public void end(String namespace,String name){  if (bodyTextStack != null && !bodyTextStack.empty()) {    Object parameters[]=(Object[])digester.peekParams();    parameters[paramIndex]=bodyTextStack.pop();  }}  }
class C{  public Connection createConnection(String addr) throws SdpException {  return createConnection("IN","IP4",addr);}  }
class C{  static Object find(String factoryId,String fallbackClassName){  if (isOsgi()) {    return lookupUsingOSGiServiceLoader(factoryId);  }  ClassLoader classLoader;  try {    classLoader=Thread.currentThread().getContextClassLoader();  } catch (  Exception x) {    throw new WebServiceException(x.toString(),x);  }  String serviceId="META-INF/services/" + factoryId;  BufferedReader rd=null;  try {    InputStream is;    if (classLoader == null) {      is=ClassLoader.getSystemResourceAsStream(serviceId);    } else {      is=classLoader.getResourceAsStream(serviceId);    }    if (is != null) {      rd=new BufferedReader(new InputStreamReader(is,"UTF-8"));      String factoryClassName=rd.readLine();      if (factoryClassName != null && !"".equals(factoryClassName)) {        return newInstance(factoryClassName,classLoader);      }    }  } catch (  Exception ignored) {  } finally {    close(rd);  }  FileInputStream inStream=null;  try {    String javah=System.getProperty("java.home");    String configFile=javah + File.separator + "lib"+ File.separator+ "jaxws.properties";    File f=new File(configFile);    if (f.exists()) {      Properties props=new Properties();      inStream=new FileInputStream(f);      props.load(inStream);      String factoryClassName=props.getProperty(factoryId);      return newInstance(factoryClassName,classLoader);    }  } catch (  Exception ignored) {  } finally {    close(inStream);  }  try {    String systemProp=System.getProperty(factoryId);    if (systemProp != null) {      return newInstance(systemProp,classLoader);    }  } catch (  SecurityException ignored) {  }  if (fallbackClassName == null) {    throw new WebServiceException("Provider for " + factoryId + " cannot be found",null);  }  return newInstance(fallbackClassName,classLoader);}  }
class C{  public static boolean isWritable(Object name){  return !(readOnlyContexts.containsKey(name));}  }
class C{  public SQLTimeoutException(String reason,String sqlState,int vendorCode,Throwable cause){  super(reason,sqlState,vendorCode,cause);}  }
class C{  public void testPosNegFirstShorter(){  byte aBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  byte bBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};  int aSign=1;  int bSign=-1;  byte rBytes[]={73,-92,-48,4,12,6,4,32,48,64,0,8,3};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.and(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public ConcurrentModificationException(){}  }
class C{  @Override public void close() throws IOException {  reader.close();}  }
class C{  public DERSequence(ASN1EncodableVector v){  super(v);}  }
class C{  public TargetedNotification(Notification notification,Integer listenerID){  validate(notification,listenerID);  this.notif=notification;  this.id=listenerID;}  }
class C{  public Observable<List<Product>> retrieveProductsByPageObservable(int page){  io.vertx.rx.java.ObservableFuture<List<Product>> resultHandler=io.vertx.rx.java.RxHelper.observableFuture();  retrieveProductsByPage(page,resultHandler.toHandler());  return resultHandler;}  }
class C{  public void insert_dyn_any(org.omg.DynamicAny.DynAny value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_dyn_any",_opsClass);  DynUnionOperations $self=(DynUnionOperations)$so.servant;  try {    $self.insert_dyn_any(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public void add(final JKDataAccessException e){  this.exception.add(e);}  }
class C{  public SAML2TokenRepositoryException(String error,Throwable cause){  super(error,cause);}  }
class C{  @Override public JapaneseDate dateEpochDay(long epochDay){  return new JapaneseDate(LocalDate.ofEpochDay(epochDay));}  }
class C{  @Override protected Object createSsoServerIDFFSvcMBean(String groupName,String groupOid,ObjectName groupObjname,MBeanServer server){  if (server != null)   idffSvcGroup=new SsoServerIDFFSvcImpl(this,server); else   idffSvcGroup=new SsoServerIDFFSvcImpl(this);  return idffSvcGroup;}  }
class C{  public void copyFrom(Properties src,boolean shouldResetDefaults){  Enumeration keys=src.keys();  while (keys.hasMoreElements()) {    String key=(String)keys.nextElement();    if (!isLegalPropertyKey(key))     throw new IllegalArgumentException(XSLMessages.createMessage(XSLTErrorResources.ER_OUTPUT_PROPERTY_NOT_RECOGNIZED,new Object[]{key}));    Object oldValue=m_properties.get(key);    if (null == oldValue) {      String val=(String)src.get(key);      if (shouldResetDefaults && key.equals(OutputKeys.METHOD)) {        setMethodDefaults(val);      }      m_properties.put(key,val);    } else     if (key.equals(OutputKeys.CDATA_SECTION_ELEMENTS)) {      m_properties.put(key,(String)oldValue + " " + (String)src.get(key));    }  }}  }
class C{  private void checkUpdateAssuredParameters(UpdateMsg updateMsg){  boolean ok=true;  if (updateMsg.isAssured() != isAssured) {    debugInfo("Fake RS " + serverId + " received update assured flag is wrong: "+ updateMsg);    ok=false;  }  if (updateMsg.getAssuredMode() != assuredMode) {    debugInfo("Fake RS " + serverId + " received update assured mode is wrong: "+ updateMsg);    ok=false;  }  if (updateMsg.getSafeDataLevel() != safeDataLevel) {    debugInfo("Fake RS " + serverId + " received update assured sd level is wrong: "+ updateMsg);    ok=false;  }  if (ok) {    debugInfo("Fake RS " + serverId + " received update assured parameters are ok: "+ updateMsg);  } else {    everyUpdatesAreOk=false;  }}  }
class C{  public void startElement(String arg0,String arg1,String arg2,Attributes arg3) throws SAXException {  if (m_state != null) {    m_state.resetState(getTransformer());  }  if (m_tracer != null)   super.fireStartElem(arg2);}  }
class C{  public void push(Object object){  if (stack.size() == 0) {    root=object;  }  stack.push(object);}  }
class C{  public void handleButton2Request(RequestInvocationEvent event) throws ModelControlException {  removePageSessionAttribute(PAGE_MODIFIED);  super.handleButton2Request(event);}  }
class C{  private void cleanUp(){  if (rehash()) {    return;  }  if (size == 0) {    return;  }  int index=clean;  Object[] table=this.table;  for (int counter=table.length; counter > 0; counter>>=1, index=next(index)) {    Object k=table[index];    if (k == TOMBSTONE || k == null) {      continue;    }    @SuppressWarnings("unchecked") Reference<ThreadLocal<?>> reference=(Reference<ThreadLocal<?>>)k;    if (reference.get() == null) {      table[index]=TOMBSTONE;      table[index + 1]=null;      tombstones++;      size--;    }  }  clean=index;}  }
class C{  public boolean isSelectDataSupported(String select){  IDPPUtils.debug.message("PersonalProfile:isSelectDataSupported:Init");  String container=getContainerFromSelect(select);  int index=container.indexOf("[");  if (index != -1) {    container=container.substring(0,index);  }  if (IDPPUtils.debug.messageEnabled()) {    IDPPUtils.debug.message("PersonalProfile.isSelectDataSupported: " + " Accessing container = " + container);  }  Set supportedContainers=serviceManager.getSupportedContainers();  if (container == null || supportedContainers == null || supportedContainers.isEmpty()) {    return false;  }  if (supportedContainers.contains(container)) {    return true;  }  return false;}  }
class C{  @Override public String toString(){  return "AdaptivePrincipal:  " + name;}  }
class C{  public ReversedLinesFileReader(final File file,final int blockSize,final String encoding) throws IOException {  this(file,blockSize,Charsets.toCharset(encoding));}  }
class C{  @SuppressWarnings("unchecked") public void writeRowId(RowId x) throws SQLException {  attribs.add(x);}  }
class C{  public TooManyHopsException(String message,Throwable cause){  super(message,cause);}  }
class C{  private HttpServletResponse _getHttpServletResponse(){  return (HttpServletResponse)super.getResponse();}  }
class C{  public final boolean peekOrFalse(){  return (m_index > -1) ? m_values[m_index] : false;}  }
class C{  public double length_approx(int p_from_corner,int p_to_corner){  int from_corner=Math.max(p_from_corner,0);  int to_corner=Math.min(p_to_corner,plaline_len(-2));  double result=0;  for (int iindex=from_corner; iindex < to_corner; ++iindex) {    result+=corner_approx(iindex + 1).distance(corner_approx(iindex));  }  return result;}  }
class C{  public static int findMSBSet(int value){  int numDigits=0;  while (value != 0) {    value>>>=1;    ++numDigits;  }  return numDigits;}  }
class C{  private final String[] _expandSeenNames(String[] oldShared){  int len=oldShared.length;  String[] newShared;  if (len == 0) {    newShared=_smileBufferRecycler.allocSeenNamesBuffer();    if (newShared == null) {      newShared=new String[SmileBufferRecycler.DEFAULT_NAME_BUFFER_LENGTH];    }  } else   if (len == SmileConstants.MAX_SHARED_NAMES) {    newShared=oldShared;    _seenNameCount=0;  } else {    int newSize=(len == SmileBufferRecycler.DEFAULT_STRING_VALUE_BUFFER_LENGTH) ? 256 : SmileConstants.MAX_SHARED_NAMES;    newShared=Arrays.copyOf(oldShared,newSize);  }  return newShared;}  }
class C{  public void updateSizes(@ProgressDrawableSize int size){  if (size == LARGE) {    setSizeParameters(CIRCLE_DIAMETER_LARGE,CIRCLE_DIAMETER_LARGE,CENTER_RADIUS_LARGE,STROKE_WIDTH_LARGE,ARROW_WIDTH_LARGE,ARROW_HEIGHT_LARGE);  } else {    setSizeParameters(CIRCLE_DIAMETER,CIRCLE_DIAMETER,CENTER_RADIUS,STROKE_WIDTH,ARROW_WIDTH,ARROW_HEIGHT);  }}  }
class C{  public static DecimalStyle of(Locale locale){  Objects.requireNonNull(locale,"locale");  DecimalStyle info=CACHE.get(locale);  if (info == null) {    info=create(locale);    CACHE.putIfAbsent(locale,info);    info=CACHE.get(locale);  }  return info;}  }
class C{  private static double euclideanNorm(double vector[]){  int n=vector.length;  if (n < 1) {    return 0;  }  if (n == 1) {    return Math.abs(vector[0]);  }  double scale=0;  double sum=1;  for (int i=0; i < n; i++) {    if (vector[i] != 0) {      double abs=Math.abs(vector[i]);      if (scale < abs) {        double t=scale / abs;        sum=1 + sum * (t * t);        scale=abs;      } else {        double t=abs / scale;        sum+=t * t;      }    }  }  return scale * Math.sqrt(sum);}  }
class C{  public FacebookGraphObjectException(){  super();}  }
class C{  public static String generateCQLStatementForWhereClauses(String CQL,Index index){  String iTableToUpdate=Utils.calculateITableName(index);  return String.format(CQL,iTableToUpdate,getWhereClauseHelper(index));}  }
class C{  @Override public boolean isValidateRoot(){  return true;}  }
class C{  public static void checkOnlyOneArgPresent(Argument... args) throws ArgumentException {  if (args != null) {    for (    Argument arg : args) {      for (      Argument otherArg : args) {        if (arg != otherArg && arg.isPresent() && otherArg.isPresent()) {          throw new ArgumentException(ToolMessages.ERR_INCOMPATIBLE_ARGUMENTS.get(arg.getLongIdentifier(),otherArg.getLongIdentifier()));        }      }    }  }}  }
class C{  void onBindAppWidget(Launcher launcher){  if (!mHasNotifiedInitialWidgetSizeChanged) {    notifyWidgetSizeChanged(launcher);  }}  }
class C{  public void unbindAppearEvent(WXComponent component){  ConcurrentHashMap<String,AppearData> appearMap=mAppearMap.get(getInnerView());  if (appearMap == null) {    return;  }  AppearData appearData=appearMap.get(component.getRef());  if (appearData == null) {    return;  }  appearData.hasAppear=false;  if (!appearData.hasDisappear) {    appearMap.remove(component.getRef());  }}  }
class C{  public void addCertStore(CertStore store){  if (store == null) {    return;  }  if (certStores == null) {    certStores=new ArrayList<CertStore>();  }  certStores.add(store);}  }
class C{  public void returnLocallyAtSource(HttpServletResponse response,boolean isSuccess){  if (regisSource.equals(IFSConstants.REGIS_FEDERATION)) {    try {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("redirecting to Resource : " + returnURL);      }      response.sendRedirect(returnURL);    } catch (    IOException e) {      FSUtils.debug.error("Error when redirecting back to resource");      return;    }  } else   if (regisSource.equals(IFSConstants.REGIS_SSO)) {    StringBuffer ssoURL=new StringBuffer();    ssoURL.append(FSServiceUtils.getBaseURL(request)).append(IFSConstants.SSO_URL).append("/").append(IFSConstants.META_ALIAS).append(FSServiceUtils.getMetaAlias(request)).append(IFSConstants.QUESTION_MARK);    Set ketSet=regisMap.keySet();    Iterator iter=ketSet.iterator();    String key=null;    String value=null;    while (iter.hasNext()) {      key=(String)iter.next();      value=(String)regisMap.get(key);      ssoURL.append(key).append(IFSConstants.EQUAL_TO).append(URLEncDec.encode(value)).append(IFSConstants.AMPERSAND);    }    ssoURL.append(IFSConstants.AUTHN_INDICATOR_PARAM).append(IFSConstants.EQUAL_TO).append(IFSConstants.TRUE).append(IFSConstants.AMPERSAND).append(IFSConstants.NAMEREGIS_INDICATOR_PARAM).append(IFSConstants.EQUAL_TO).append(IFSConstants.TRUE);    try {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("redirecting to SSO : " + ssoURL.toString());      }      response.sendRedirect(ssoURL.toString());    } catch (    IOException e) {      FSUtils.debug.error("Error when redirecting back to SSO service",e);      return;    }  } else   if (regisSource.equals(IFSConstants.REGIS_LINK)) {    try {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("Entered  returnLocallyAtSource with isSuccess set to " + isSuccess);      }      StringBuffer finalReturnURL=new StringBuffer();      finalReturnURL.append(REGISTRATION_DONE_URL);      char delimiter;      if (REGISTRATION_DONE_URL.indexOf(IFSConstants.QUESTION_MARK) < 0) {        delimiter=IFSConstants.QUESTION_MARK;      } else {        delimiter=IFSConstants.AMPERSAND;      }      finalReturnURL.append(delimiter).append(IFSConstants.REGISTRATION_STATUS).append(IFSConstants.EQUAL_TO);      if (isSuccess) {        finalReturnURL.append(IFSConstants.REGISTRATION_SUCCESS);      } else {        finalReturnURL.append(IFSConstants.REGISTRATION_FAILURE);      }      response.sendRedirect(finalReturnURL.toString());    } catch (    IOException e) {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("Exception in  returnLocallyAtSource:",e);      }    }  }  return;}  }
class C{  protected AbstractSynchronousConnection(){}  }
class C{  public FrameBodyUnsupported(String identifier,byte[] value){  this.identifier=identifier;  setObjectValue(DataTypes.OBJ_DATA,value);}  }
class C{  public boolean ready() throws IOException {synchronized (lock) {    ensureOpen();    return true;  }}  }
class C{  @Override public String[] findApplicationListeners(){  return applicationListeners;}  }
class C{  @Override public void removeAll(){  for (  Foo foo : findAll()) {    remove(foo);  }}  }
class C{  public Boolean put(Object key,Object value){  try {    hash.updateObject(key,value);    notifyObservers();    return true;  } catch (  Exception e) {    e.printStackTrace();    return false;  }}  }
class C{  static void removeSoIfExit(String libName,int version){  String file=_targetSoFile(libName,version);  File a=new File(file);  if (a.exists()) {    a.delete();  }}  }
class C{  public GetSessionPropertiesActionHandler(SessionPropertyWhitelist sessionPropertyWhitelist,SessionResourceUtil sessionResourceUtil){  super(sessionPropertyWhitelist,sessionResourceUtil);}  }
class C{  private List<View> addView(View view,List<View> cache){  if (cache == null) {    cache=new LinkedList<View>();  }  cache.add(view);  return cache;}  }
class C{  public FSAssertionManagerClient(String metaAlias) throws FSException {  if (!checkedForLocal) {    try {      this.metaAlias=metaAlias;      hostedEntityId=FSUtils.getIDFFMetaManager().getEntityIDByMetaAlias(metaAlias);      remoteStub=getServiceEndPoint(SystemConfigurationUtil.getProperty(SAMLConstants.SERVER_PROTOCOL),InetAddress.getLocalHost().getHostName(),Integer.parseInt(SystemConfigurationUtil.getProperty(SAMLConstants.SERVER_PORT)),SystemConfigurationUtil.getProperty(SAMLConstants.SERVER_URI));      remoteStub.send("checkForLocal",null,null);      if (FSAssertionManagerImpl.isLocal) {        isLocal=true;        assertionManager=FSAssertionManager.getInstance(metaAlias);      }      checkedForLocal=true;    } catch (    Exception e) {      checkedForLocal=true;      if (FSUtils.debug.warningEnabled()) {        FSUtils.debug.warning("AssertionManagerClient()Exception",e);      }      throw (new FSException(e.getMessage()));    }  }  if (isLocal) {    useLocal=true;  } else {    stub=remoteStub;  }}  }
class C{  public T message(String message){  jsonValue.put(MESSAGE,message);  return self();}  }
class C{  public QRCallbackBuilder withUriScheme(String scheme){  this.scheme=scheme;  return this;}  }
class C{  private String quotedAV() throws IOException {  pos++;  beg=pos;  end=beg;  while (true) {    if (pos == chars.length) {      throw new IOException("Invalid distinguished name string");    }    if (chars[pos] == '"') {      pos++;      break;    } else     if (chars[pos] == '\\') {      chars[end]=getEscaped();    } else {      chars[end]=chars[pos];    }    pos++;    end++;  }  for (; pos < chars.length && chars[pos] == ' '; pos++) {  }  return new String(chars,beg,end - beg);}  }
class C{  public static Map attrSetToMap(AttrSet attrSet,boolean fetchByteValues){  Map attributesMap=new AMHashMap(fetchByteValues);  if (attrSet == null) {    return attributesMap;  }  int attrSetSize=attrSet.size();  if (!fetchByteValues) {    for (int i=0; i < attrSetSize; i++) {      Attr attr=attrSet.elementAt(i);      String values[]=attr.getStringValues();      attributesMap.put(attr.getName(),stringArrayToSet(values));    }  } else {    for (int i=0; i < attrSetSize; i++) {      Attr attr=attrSet.elementAt(i);      attributesMap.put(attr.getName(),attr.getByteValues());    }  }  return attributesMap;}  }
class C{  protected void NumberExpr() throws javax.xml.transform.TransformerException {  int opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  appendOp(2,OpCodes.OP_NUMBER);  Expr();  m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);}  }
class C{  public void removeAttribute(Object name){  StyleContext context=StyleContext.this;  attributes=context.removeAttribute(attributes,name);  fireStateChanged();}  }
class C{  public SipRequestLine createRequestLine(String requestLine) throws ParseException {  RequestLineParser requestLineParser=new RequestLineParser(requestLine);  return (SipRequestLine)requestLineParser.parse();}  }
class C{  public String toXML(){  if (xmlForm == null) {    StringBuilder xmlsb=new StringBuilder(1000);    xmlsb.append("<").append(RESOURCE_RESULT).append(" ").append(RESOURCE_NAME).append("=\"").append(XMLUtils.escapeSpecialCharacters(resourceName)).append("\">").append(PolicyUtils.CRLF);    if (policyDecision != null) {      xmlsb.append(policyDecision.toXML());    }    Iterator rrIter=resourceResults.iterator();    while (rrIter.hasNext()) {      ResourceResult rr=(ResourceResult)rrIter.next();      xmlsb.append(rr.toXML());    }    xmlsb.append("</").append(RESOURCE_RESULT).append(">").append(PolicyUtils.CRLF);    xmlForm=xmlsb.toString();  }  return xmlForm;}  }
class C{  private RootDSE(final Entry entry){  this.entry=entry;}  }
class C{  private static LDAPFilter createFilter(JAXBElement<?> xmlElement) throws LDAPException, IOException {  String filterName=xmlElement.getName().getLocalPart();switch (filterName) {case "and":    return createANDFilter((FilterSet)xmlElement.getValue());case "or":  return createORFilter((FilterSet)xmlElement.getValue());case "not":return createNOTFilter((Filter)xmlElement.getValue());case "equalityMatch":return createEqualityFilter((AttributeValueAssertion)xmlElement.getValue());case "substrings":return createSubstringFilter((SubstringFilter)xmlElement.getValue());case "greaterOrEqual":return createGreaterOrEqualFilter((AttributeValueAssertion)xmlElement.getValue());case "lessOrEqual":return createLessOrEqualFilter((AttributeValueAssertion)xmlElement.getValue());case "present":return createPresentFilter((AttributeDescription)xmlElement.getValue());case "approxMatch":return createApproximateFilter((AttributeValueAssertion)xmlElement.getValue());case "extensibleMatch":return createExtensibleFilter((MatchingRuleAssertion)xmlElement.getValue());default :return null;}}  }
class C{  private void makeRulesCompatible(){switch (startMode) {case DOM_MODE:    startDay=1 + (startDay / 7);  startDayOfWeek=Calendar.SUNDAY;break;case DOW_GE_DOM_MODE:if (startDay != 1) {startDay=1 + (startDay / 7);}break;case DOW_LE_DOM_MODE:if (startDay >= 30) {startDay=-1;} else {startDay=1 + (startDay / 7);}break;}switch (endMode) {case DOM_MODE:endDay=1 + (endDay / 7);endDayOfWeek=Calendar.SUNDAY;break;case DOW_GE_DOM_MODE:if (endDay != 1) {endDay=1 + (endDay / 7);}break;case DOW_LE_DOM_MODE:if (endDay >= 30) {endDay=-1;} else {endDay=1 + (endDay / 7);}break;}switch (startTimeMode) {case UTC_TIME:startTime+=rawOffset;break;}while (startTime < 0) {startTime+=millisPerDay;startDayOfWeek=1 + ((startDayOfWeek + 5) % 7);}while (startTime >= millisPerDay) {startTime-=millisPerDay;startDayOfWeek=1 + (startDayOfWeek % 7);}switch (endTimeMode) {case UTC_TIME:endTime+=rawOffset + dstSavings;break;case STANDARD_TIME:endTime+=dstSavings;}while (endTime < 0) {endTime+=millisPerDay;endDayOfWeek=1 + ((endDayOfWeek + 5) % 7);}while (endTime >= millisPerDay) {endTime-=millisPerDay;endDayOfWeek=1 + (endDayOfWeek % 7);}}  }
class C{  private void skip(){  index++;}  }
class C{  public void createWSFedProvider(String realm,String entityId,Map values) throws AMConsoleException {  try {    List<String> metaAliases=getFederationAlias(values,MetaTemplateParameters.P_WS_FED_ALIASES);    Set<String> duplicateCheck=new HashSet<String>(metaAliases);    if (duplicateCheck.size() < metaAliases.size()) {      throw new AMConsoleException(getLocalizedString("federation.create.provider.duplicate.metaAlias"));    }    WSFederationMetaManager metaManager=new WSFederationMetaManager();    metaManager.validateMetaAliasForNewEntity(realm,metaAliases);    String metadata=CreateWSFedMetaDataTemplate.createStandardMetaTemplate(entityId,values,requestURL);    String extendedData=CreateWSFedMetaDataTemplate.createExtendedMetaTemplate(entityId,values);    FederationElement elt=(FederationElement)WSFederationMetaUtils.convertStringToJAXB(metadata);    String federationID=elt.getFederationID();    if (federationID == null) {      federationID=WSFederationConstants.DEFAULT_FEDERATION_ID;    }    metaManager.createFederation(realm,elt);    FederationConfigElement cfg=(FederationConfigElement)WSFederationMetaUtils.convertStringToJAXB(extendedData);    metaManager.createEntityConfig(realm,cfg);  } catch (  WSFederationMetaException ex) {    throw new AMConsoleException(ex.getMessage());  }catch (  JAXBException ex) {    throw new AMConsoleException(ex.getMessage());  }catch (  CertificateEncodingException ex) {    throw new AMConsoleException(ex.getMessage());  }}  }
class C{  private void updateHorizontalLayoutState(int fixedCellWidth,int fixedCellHeight){  int visRows=list.getVisibleRowCount();  int dataModelSize=list.getModel().getSize();  Insets insets=list.getInsets();  listHeight=list.getHeight();  listWidth=list.getWidth();  if (dataModelSize == 0) {    rowsPerColumn=columnCount=0;    preferredHeight=insets.top + insets.bottom;    return;  }  int height;  if (fixedCellHeight != -1) {    height=fixedCellHeight;  } else {    int maxHeight=0;    if (cellHeights.length > 0) {      maxHeight=cellHeights[cellHeights.length - 1];      for (int counter=cellHeights.length - 2; counter >= 0; counter--) {        maxHeight=Math.max(maxHeight,cellHeights[counter]);      }    }    height=cellHeight=maxHeight;    cellHeights=null;  }  rowsPerColumn=dataModelSize;  if (visRows > 0) {    rowsPerColumn=visRows;    columnCount=Math.max(1,dataModelSize / rowsPerColumn);    if (dataModelSize > 0 && dataModelSize > rowsPerColumn && dataModelSize % rowsPerColumn != 0) {      columnCount++;    }    if (layoutOrientation == JList.HORIZONTAL_WRAP) {      rowsPerColumn=(dataModelSize / columnCount);      if (dataModelSize % columnCount > 0) {        rowsPerColumn++;      }    }  } else   if (layoutOrientation == JList.VERTICAL_WRAP && height != 0) {    rowsPerColumn=Math.max(1,(listHeight - insets.top - insets.bottom) / height);    columnCount=Math.max(1,dataModelSize / rowsPerColumn);    if (dataModelSize > 0 && dataModelSize > rowsPerColumn && dataModelSize % rowsPerColumn != 0) {      columnCount++;    }  } else   if (layoutOrientation == JList.HORIZONTAL_WRAP && cellWidth > 0 && listWidth > 0) {    columnCount=Math.max(1,(listWidth - insets.left - insets.right) / cellWidth);    rowsPerColumn=dataModelSize / columnCount;    if (dataModelSize % columnCount > 0) {      rowsPerColumn++;    }  }  preferredHeight=rowsPerColumn * cellHeight + insets.top + insets.bottom;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeappendchildchildexists.class,args);}  }
class C{  public StatelessSection(int headerResourceId,int itemResourceId){  this(itemResourceId);  this.headerResourceId=headerResourceId;  this.hasHeader=true;}  }
class C{  @BeforeClass public static void initClass(){  scenario=Scenarios.s6_matching_and_non_matching_versions_tags();  if (Misc.isDebugMode()) {    System.out.println("git repository created under: " + scenario.getRepositoryLocation());  }}  }
class C{  private void assertNewAlertsGenerated(int oldAlertCount,int expectedNbNewAlerts){  assertEquals(DummyAlertHandler.getAlertCount(),oldAlertCount + expectedNbNewAlerts,"An alert was not generated when resolving conflicts");}  }
class C{  private static BitMatrix bitMatrixFromEncoder(PDF417 encoder,String contents,int errorCorrectionLevel,int width,int height,int margin) throws WriterException {  encoder.generateBarcodeLogic(contents,errorCorrectionLevel);  int aspectRatio=4;  byte[][] originalScale=encoder.getBarcodeMatrix().getScaledMatrix(1,aspectRatio);  boolean rotated=false;  if ((height > width) ^ (originalScale[0].length < originalScale.length)) {    originalScale=rotateArray(originalScale);    rotated=true;  }  int scaleX=width / originalScale[0].length;  int scaleY=height / originalScale.length;  int scale;  if (scaleX < scaleY) {    scale=scaleX;  } else {    scale=scaleY;  }  if (scale > 1) {    byte[][] scaledMatrix=encoder.getBarcodeMatrix().getScaledMatrix(scale,scale * aspectRatio);    if (rotated) {      scaledMatrix=rotateArray(scaledMatrix);    }    return bitMatrixFrombitArray(scaledMatrix,margin);  }  return bitMatrixFrombitArray(originalScale,margin);}  }
class C{  public void removeValidation(String attrName){  if (m_validated != null) {    m_validated.remove(attrName);  }}  }
class C{  public MBeanPermission(String name,String actions){  super(name);  parseName();  this.actions=actions;  parseActions();}  }
class C{  protected ElemVariable createPseudoVarDecl(ElemTemplateElement psuedoVarRecipient,LocPathIterator lpi,boolean isGlobal) throws org.w3c.dom.DOMException {  QName uniquePseudoVarName=new QName(PSUEDOVARNAMESPACE,"#" + getPseudoVarID());  if (isGlobal) {    return createGlobalPseudoVarDecl(uniquePseudoVarName,(StylesheetRoot)psuedoVarRecipient,lpi);  } else   return createLocalPseudoVarDecl(uniquePseudoVarName,psuedoVarRecipient,lpi);}  }
class C{  protected void storeInRepo(String container,String id,JsonValue value) throws ResourceException {  ResourceResponse oldResource;  try {    oldResource=repoService.read(Requests.newReadRequest(container,id));  } catch (  NotFoundException e) {    logger.debug("creating object " + id);    repoService.create(Requests.newCreateRequest(container,id,value));    return;  }  UpdateRequest updateRequest=Requests.newUpdateRequest(container,id,value);  updateRequest.setRevision(oldResource.getRevision());  repoService.update(updateRequest);}  }
class C{  public LDAPConnectionHandler(){  this(new WorkQueueStrategy(),null);}  }
class C{  public SIPDate(){  wkday=-1;  day=-1;  month=-1;  year=-1;  hour=-1;  minute=-1;  second=-1;  javaCal=null;}  }
class C{  public synchronized void removeAllNotifications(){  TimerAlarmClock alarmClock;  for (  Object[] obj : timerTable.values()) {    alarmClock=(TimerAlarmClock)obj[ALARM_CLOCK_INDEX];    alarmClock.cancel();  }  TIMER_LOGGER.logp(Level.FINER,Timer.class.getName(),"removeAllNotifications","removing all timer notifications");  timerTable.clear();  TIMER_LOGGER.logp(Level.FINER,Timer.class.getName(),"removeAllNotifications","all timer notifications removed");  counterID=0;  TIMER_LOGGER.logp(Level.FINER,Timer.class.getName(),"removeAllNotifications","timer notification counter ID reset");}  }
class C{  public String toString(){  return this.encode();}  }
class C{  private SdpFactory(){}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap entityList;  Entity entityNode;  String publicId;  doc=(Document)load("staff",false);  docType=doc.getDoctype();  assertNotNull("docTypeNotNull",docType);  entityList=docType.getEntities();  assertNotNull("entitiesNotNull",entityList);  entityNode=(Entity)entityList.getNamedItem("ent1");  publicId=entityNode.getPublicId();  assertNull("entityGetPublicIdNullAssert",publicId);}  }
class C{  @Override public void addSessionListener(SessionListener listener){  listeners.add(listener);}  }
class C{  public static PdfAction createSound(PdfStream sound,float volume,boolean synchronous,boolean repeat,boolean mix){  if (volume < -1 || volume > 1) {    throw new IllegalArgumentException("volume");  }  return new PdfAction().put(PdfName.S,PdfName.Sound).put(PdfName.Sound,sound).put(PdfName.Volume,new PdfNumber(volume)).put(PdfName.Synchronous,new PdfBoolean(synchronous)).put(PdfName.Repeat,new PdfBoolean(repeat)).put(PdfName.Mix,new PdfBoolean(mix));}  }
class C{  int run(final String[] args){  final LocalizableMessage toolDescription=INFO_LDAPSEARCH_TOOL_DESCRIPTION.get();  final ArgumentParser argParser=new ArgumentParser(LDAPSearch.class.getName(),toolDescription,false,true,0,0,"[filter] [attributes ...]");  argParser.setVersionHandler(newSdkVersionHandler());  argParser.setShortToolDescription(REF_SHORT_DESC_LDAPSEARCH.get());  ConnectionFactoryProvider connectionFactoryProvider;  ConnectionFactory connectionFactory;  BindRequest bindRequest;  BooleanArgument countEntries;  BooleanArgument dontWrap;  BooleanArgument noop;  BooleanArgument typesOnly;  IntegerArgument simplePageSize;  IntegerArgument timeLimit;  IntegerArgument version;  StringArgument baseDN;  StringArgument controlStr;  MultiChoiceArgument<DereferenceAliasesPolicy> dereferencePolicy;  StringArgument filename;  StringArgument matchedValuesFilter;  StringArgument pSearchInfo;  MultiChoiceArgument<SearchScope> searchScope;  StringArgument vlvDescriptor;  StringArgument effectiveRightsUser;  StringArgument effectiveRightsAttrs;  StringArgument sortOrder;  StringArgument proxyAuthzID;  StringArgument assertionFilter;  IntegerArgument sizeLimit;  try {    connectionFactoryProvider=new ConnectionFactoryProvider(argParser,this);    final StringArgument propertiesFileArgument=propertiesFileArgument();    argParser.addArgument(propertiesFileArgument);    argParser.setFilePropertiesArgument(propertiesFileArgument);    final BooleanArgument noPropertiesFileArgument=noPropertiesFileArgument();    argParser.addArgument(noPropertiesFileArgument);    argParser.setNoPropertiesFileArgument(noPropertiesFileArgument);    baseDN=StringArgument.builder(OPTION_LONG_BASEDN).shortIdentifier(OPTION_SHORT_BASEDN).description(INFO_SEARCH_DESCRIPTION_BASEDN.get()).required().valuePlaceholder(INFO_BASEDN_PLACEHOLDER.get()).buildAndAddToParser(argParser);    searchScope=searchScopeArgument();    argParser.addArgument(searchScope);    filename=StringArgument.builder(OPTION_LONG_FILENAME).shortIdentifier(OPTION_SHORT_FILENAME).description(INFO_SEARCH_DESCRIPTION_FILENAME.get()).valuePlaceholder(INFO_FILE_PLACEHOLDER.get()).buildAndAddToParser(argParser);    proxyAuthzID=StringArgument.builder(OPTION_LONG_PROXYAUTHID).shortIdentifier(OPTION_SHORT_PROXYAUTHID).description(INFO_DESCRIPTION_PROXY_AUTHZID.get()).valuePlaceholder(INFO_PROXYAUTHID_PLACEHOLDER.get()).buildAndAddToParser(argParser);    pSearchInfo=StringArgument.builder("persistentSearch").shortIdentifier('C').description(INFO_DESCRIPTION_PSEARCH_INFO.get()).docDescriptionSupplement(SUPPLEMENT_DESCRIPTION_PSEARCH_INFO.get()).valuePlaceholder(INFO_PSEARCH_PLACEHOLDER.get()).buildAndAddToParser(argParser);    simplePageSize=IntegerArgument.builder("simplePageSize").description(INFO_DESCRIPTION_SIMPLE_PAGE_SIZE.get()).lowerBound(1).defaultValue(1000).valuePlaceholder(INFO_NUM_ENTRIES_PLACEHOLDER.get()).buildAndAddToParser(argParser);    assertionFilter=StringArgument.builder(OPTION_LONG_ASSERTION_FILE).description(INFO_DESCRIPTION_ASSERTION_FILTER.get()).valuePlaceholder(INFO_ASSERTION_FILTER_PLACEHOLDER.get()).buildAndAddToParser(argParser);    matchedValuesFilter=StringArgument.builder("matchedValuesFilter").description(INFO_DESCRIPTION_MATCHED_VALUES_FILTER.get()).multiValued().valuePlaceholder(INFO_FILTER_PLACEHOLDER.get()).buildAndAddToParser(argParser);    sortOrder=StringArgument.builder("sortOrder").shortIdentifier('S').description(INFO_DESCRIPTION_SORT_ORDER.get()).valuePlaceholder(INFO_SORT_ORDER_PLACEHOLDER.get()).buildAndAddToParser(argParser);    vlvDescriptor=StringArgument.builder("virtualListView").shortIdentifier('G').description(INFO_DESCRIPTION_VLV.get()).valuePlaceholder(INFO_VLV_PLACEHOLDER.get()).buildAndAddToParser(argParser);    controlStr=StringArgument.builder("control").shortIdentifier('J').description(INFO_DESCRIPTION_CONTROLS.get()).docDescriptionSupplement(SUPPLEMENT_DESCRIPTION_CONTROLS.get()).multiValued().valuePlaceholder(INFO_LDAP_CONTROL_PLACEHOLDER.get()).buildAndAddToParser(argParser);    effectiveRightsUser=StringArgument.builder(OPTION_LONG_EFFECTIVERIGHTSUSER).shortIdentifier(OPTION_SHORT_EFFECTIVERIGHTSUSER).description(INFO_DESCRIPTION_EFFECTIVERIGHTS_USER.get()).valuePlaceholder(INFO_PROXYAUTHID_PLACEHOLDER.get()).buildAndAddToParser(argParser);    effectiveRightsAttrs=StringArgument.builder(OPTION_LONG_EFFECTIVERIGHTSATTR).shortIdentifier(OPTION_SHORT_EFFECTIVERIGHTSATTR).description(INFO_DESCRIPTION_EFFECTIVERIGHTS_ATTR.get()).multiValued().valuePlaceholder(INFO_ATTRIBUTE_PLACEHOLDER.get()).buildAndAddToParser(argParser);    version=ldapVersionArgument();    argParser.addArgument(version);    dereferencePolicy=MultiChoiceArgument.<DereferenceAliasesPolicy>builder("dereferencePolicy").shortIdentifier('a').description(INFO_SEARCH_DESCRIPTION_DEREFERENCE_POLICY.get()).allowedValues(DereferenceAliasesPolicy.values()).defaultValue(DereferenceAliasesPolicy.NEVER).valuePlaceholder(INFO_DEREFERENCE_POLICE_PLACEHOLDER.get()).buildAndAddToParser(argParser);    typesOnly=BooleanArgument.builder("typesOnly").shortIdentifier('A').description(INFO_DESCRIPTION_TYPES_ONLY.get()).buildAndAddToParser(argParser);    sizeLimit=IntegerArgument.builder("sizeLimit").shortIdentifier('z').description(INFO_SEARCH_DESCRIPTION_SIZE_LIMIT.get()).defaultValue(0).valuePlaceholder(INFO_SIZE_LIMIT_PLACEHOLDER.get()).buildAndAddToParser(argParser);    timeLimit=IntegerArgument.builder("timeLimit").shortIdentifier('l').description(INFO_SEARCH_DESCRIPTION_TIME_LIMIT.get()).defaultValue(0).valuePlaceholder(INFO_TIME_LIMIT_PLACEHOLDER.get()).buildAndAddToParser(argParser);    dontWrap=BooleanArgument.builder("dontWrap").shortIdentifier('t').description(INFO_DESCRIPTION_DONT_WRAP.get()).buildAndAddToParser(argParser);    countEntries=BooleanArgument.builder("countEntries").description(INFO_DESCRIPTION_COUNT_ENTRIES.get()).buildAndAddToParser(argParser);    final BooleanArgument continueOnError=continueOnErrorArgument();    argParser.addArgument(continueOnError);    noop=noOpArgument();    argParser.addArgument(noop);    verbose=verboseArgument();    argParser.addArgument(verbose);    final BooleanArgument showUsage=showUsageArgument();    argParser.addArgument(showUsage);    argParser.setUsageArgument(showUsage,getOutputStream());  } catch (  final ArgumentException ae) {    errPrintln(ERR_CANNOT_INITIALIZE_ARGS.get(ae.getMessage()));    return ResultCode.CLIENT_SIDE_PARAM_ERROR.intValue();  }  try {    argParser.parseArguments(args);    if (argParser.usageOrVersionDisplayed()) {      return 0;    }    connectionFactory=connectionFactoryProvider.getUnauthenticatedConnectionFactory();    bindRequest=connectionFactoryProvider.getBindRequest();  } catch (  final ArgumentException ae) {    argParser.displayMessageAndUsageReference(getErrStream(),ERR_ERROR_PARSING_ARGS.get(ae.getMessage()));    return ResultCode.CLIENT_SIDE_PARAM_ERROR.intValue();  }  final List<Filter> filters=new LinkedList<>();  final List<String> attributes=new LinkedList<>();  final ArrayList<String> filterAndAttributeStrings=argParser.getTrailingArguments();  if (!filterAndAttributeStrings.isEmpty()) {    if (!filename.isPresent()) {      final String filterString=filterAndAttributeStrings.remove(0);      try {        filters.add(Filter.valueOf(filterString));      } catch (      final LocalizedIllegalArgumentException e) {        errPrintln(e.getMessageObject());        return ResultCode.CLIENT_SIDE_FILTER_ERROR.intValue();      }    }    attributes.addAll(filterAndAttributeStrings);  }  if (filename.isPresent()) {    try (BufferedReader in=new BufferedReader(new FileReader(filename.getValue()))){      String line=null;      while ((line=in.readLine()) != null) {        if ("".equals(line.trim())) {          continue;        }        filters.add(Filter.valueOf(line));      }    } catch (    final LocalizedIllegalArgumentException e) {      errPrintln(e.getMessageObject());      return ResultCode.CLIENT_SIDE_FILTER_ERROR.intValue();    }catch (    final IOException e) {      errPrintln(LocalizableMessage.raw(e.toString()));      return ResultCode.CLIENT_SIDE_FILTER_ERROR.intValue();    }  }  if (filters.isEmpty()) {    argParser.displayMessageAndUsageReference(getErrStream(),ERR_SEARCH_NO_FILTERS.get());    return ResultCode.CLIENT_SIDE_PARAM_ERROR.intValue();  }  SearchScope scope;  try {    scope=searchScope.getTypedValue();  } catch (  final ArgumentException ex1) {    errPrintln(ex1.getMessageObject());    return ResultCode.CLIENT_SIDE_PARAM_ERROR.intValue();  }  SearchRequest search;  try {    search=Requests.newSearchRequest(DN.valueOf(baseDN.getValue()),scope,filters.get(0),attributes.toArray(new String[attributes.size()]));  } catch (  final LocalizedIllegalArgumentException e) {    errPrintln(e.getMessageObject());    return ResultCode.CLIENT_SIDE_PARAM_ERROR.intValue();  }  try {    final int versionNumber=version.getIntValue();    if (versionNumber != 2 && versionNumber != 3) {      errPrintln(ERR_DESCRIPTION_INVALID_VERSION.get(String.valueOf(versionNumber)));      return ResultCode.CLIENT_SIDE_PARAM_ERROR.intValue();    }  } catch (  final ArgumentException ae) {    errPrintln(ERR_DESCRIPTION_INVALID_VERSION.get(version.getValue()));    return ResultCode.CLIENT_SIDE_PARAM_ERROR.intValue();  }  search.setTypesOnly(typesOnly.isPresent());  try {    search.setTimeLimit(timeLimit.getIntValue());    search.setSizeLimit(sizeLimit.getIntValue());  } catch (  final ArgumentException ex1) {    errPrintln(ex1.getMessageObject());    return ResultCode.CLIENT_SIDE_PARAM_ERROR.intValue();  }  try {    search.setDereferenceAliasesPolicy(dereferencePolicy.getTypedValue());  } catch (  final ArgumentException ex1) {    errPrintln(ex1.getMessageObject());    return ResultCode.CLIENT_SIDE_PARAM_ERROR.intValue();  }  if (controlStr.isPresent()) {    for (    final String ctrlString : controlStr.getValues()) {      try {        final Control ctrl=Utils.getControl(ctrlString);        search.addControl(ctrl);      } catch (      final DecodeException de) {        errPrintln(ERR_TOOL_INVALID_CONTROL_STRING.get(ctrlString));        ResultCode.CLIENT_SIDE_PARAM_ERROR.intValue();      }    }  }  if (effectiveRightsUser.isPresent()) {    final String authzID=effectiveRightsUser.getValue();    if (!authzID.startsWith("dn:")) {      errPrintln(ERR_EFFECTIVERIGHTS_INVALID_AUTHZID.get(authzID));      return ResultCode.CLIENT_SIDE_PARAM_ERROR.intValue();    }    final Control effectiveRightsControl=GetEffectiveRightsRequestControl.newControl(false,authzID.substring(3),effectiveRightsAttrs.getValues().toArray(new String[effectiveRightsAttrs.getValues().size()]));    search.addControl(effectiveRightsControl);  }  if (proxyAuthzID.isPresent()) {    final Control proxyControl=ProxiedAuthV2RequestControl.newControl(proxyAuthzID.getValue());    search.addControl(proxyControl);  }  if (pSearchInfo.isPresent()) {    final String infoString=StaticUtils.toLowerCase(pSearchInfo.getValue().trim());    boolean changesOnly=true;    boolean returnECs=true;    final StringTokenizer tokenizer=new StringTokenizer(infoString,":");    if (!tokenizer.hasMoreTokens()) {      errPrintln(ERR_PSEARCH_MISSING_DESCRIPTOR.get());      return ResultCode.CLIENT_SIDE_PARAM_ERROR.intValue();    } else {      final String token=tokenizer.nextToken();      if (!"ps".equals(token)) {        errPrintln(ERR_PSEARCH_DOESNT_START_WITH_PS.get(infoString));        return ResultCode.CLIENT_SIDE_PARAM_ERROR.intValue();      }    }    final ArrayList<PersistentSearchChangeType> ct=new ArrayList<>(4);    if (tokenizer.hasMoreTokens()) {      final StringTokenizer st=new StringTokenizer(tokenizer.nextToken(),", ");      if (!st.hasMoreTokens()) {        ct.add(PersistentSearchChangeType.ADD);        ct.add(PersistentSearchChangeType.DELETE);        ct.add(PersistentSearchChangeType.MODIFY);        ct.add(PersistentSearchChangeType.MODIFY_DN);      } else {        do {          final String token=st.nextToken();          if ("add".equals(token)) {            ct.add(PersistentSearchChangeType.ADD);          } else           if ("delete".equals(token) || "del".equals(token)) {            ct.add(PersistentSearchChangeType.DELETE);          } else           if ("modify".equals(token) || "mod".equals(token)) {            ct.add(PersistentSearchChangeType.MODIFY);          } else           if ("modifydn".equals(token) || "moddn".equals(token) || "modrdn".equals(token)) {            ct.add(PersistentSearchChangeType.MODIFY_DN);          } else           if ("any".equals(token) || "all".equals(token)) {            ct.add(PersistentSearchChangeType.ADD);            ct.add(PersistentSearchChangeType.DELETE);            ct.add(PersistentSearchChangeType.MODIFY);            ct.add(PersistentSearchChangeType.MODIFY_DN);          } else {            errPrintln(ERR_PSEARCH_INVALID_CHANGE_TYPE.get(token));            return ResultCode.CLIENT_SIDE_PARAM_ERROR.intValue();          }        } while (st.hasMoreTokens());      }    }    if (tokenizer.hasMoreTokens()) {      final String token=tokenizer.nextToken();      if ("1".equals(token) || "true".equals(token) || "yes".equals(token)) {        changesOnly=true;      } else       if ("0".equals(token) || "false".equals(token) || "no".equals(token)) {        changesOnly=false;      } else {        errPrintln(ERR_PSEARCH_INVALID_CHANGESONLY.get(token));        return ResultCode.CLIENT_SIDE_PARAM_ERROR.intValue();      }    }    if (tokenizer.hasMoreTokens()) {      final String token=tokenizer.nextToken();      if ("1".equals(token) || "true".equals(token) || "yes".equals(token)) {        returnECs=true;      } else       if ("0".equals(token) || "false".equals(token) || "no".equals(token)) {        returnECs=false;      } else {        errPrintln(ERR_PSEARCH_INVALID_RETURN_ECS.get(token));        return ResultCode.CLIENT_SIDE_PARAM_ERROR.intValue();      }    }    final PersistentSearchRequestControl psearchControl=PersistentSearchRequestControl.newControl(true,changesOnly,returnECs,ct.toArray(new PersistentSearchChangeType[ct.size()]));    search.addControl(psearchControl);  }  if (assertionFilter.isPresent()) {    final String filterString=assertionFilter.getValue();    Filter filter;    try {      filter=Filter.valueOf(filterString);      final Control assertionControl=AssertionRequestControl.newControl(true,filter);      search.addControl(assertionControl);    } catch (    final LocalizedIllegalArgumentException le) {      errPrintln(ERR_LDAP_ASSERTION_INVALID_FILTER.get(le.getMessage()));      return ResultCode.CLIENT_SIDE_PARAM_ERROR.intValue();    }  }  if (matchedValuesFilter.isPresent()) {    final List<String> mvFilterStrings=matchedValuesFilter.getValues();    final List<Filter> mvFilters=new ArrayList<>();    for (    final String s : mvFilterStrings) {      try {        final Filter f=Filter.valueOf(s);        mvFilters.add(f);      } catch (      final LocalizedIllegalArgumentException le) {        errPrintln(ERR_LDAP_MATCHEDVALUES_INVALID_FILTER.get(le.getMessage()));        return ResultCode.CLIENT_SIDE_PARAM_ERROR.intValue();      }    }    final MatchedValuesRequestControl mvc=MatchedValuesRequestControl.newControl(true,mvFilters);    search.addControl(mvc);  }  if (sortOrder.isPresent()) {    try {      search.addControl(ServerSideSortRequestControl.newControl(false,sortOrder.getValue()));    } catch (    final LocalizedIllegalArgumentException le) {      errPrintln(ERR_LDAP_SORTCONTROL_INVALID_ORDER.get(le.getMessageObject()));      return ResultCode.CLIENT_SIDE_PARAM_ERROR.intValue();    }  }  if (vlvDescriptor.isPresent()) {    if (!sortOrder.isPresent()) {      final LocalizableMessage message=ERR_LDAPSEARCH_VLV_REQUIRES_SORT.get(vlvDescriptor.getLongIdentifier(),sortOrder.getLongIdentifier());      errPrintln(message);      return ResultCode.CLIENT_SIDE_PARAM_ERROR.intValue();    }    final StringTokenizer tokenizer=new StringTokenizer(vlvDescriptor.getValue(),":");    final int numTokens=tokenizer.countTokens();    if (numTokens == 3) {      try {        final int beforeCount=Integer.parseInt(tokenizer.nextToken());        final int afterCount=Integer.parseInt(tokenizer.nextToken());        final ByteString assertionValue=ByteString.valueOfUtf8(tokenizer.nextToken());        search.addControl(VirtualListViewRequestControl.newAssertionControl(true,assertionValue,beforeCount,afterCount,null));      } catch (      final Exception e) {        errPrintln(ERR_LDAPSEARCH_VLV_INVALID_DESCRIPTOR.get());        return ResultCode.CLIENT_SIDE_PARAM_ERROR.intValue();      }    } else     if (numTokens == 4) {      try {        final int beforeCount=Integer.parseInt(tokenizer.nextToken());        final int afterCount=Integer.parseInt(tokenizer.nextToken());        final int offset=Integer.parseInt(tokenizer.nextToken());        final int contentCount=Integer.parseInt(tokenizer.nextToken());        search.addControl(VirtualListViewRequestControl.newOffsetControl(true,offset,contentCount,beforeCount,afterCount,null));      } catch (      final Exception e) {        errPrintln(ERR_LDAPSEARCH_VLV_INVALID_DESCRIPTOR.get());        return ResultCode.CLIENT_SIDE_PARAM_ERROR.intValue();      }    } else {      errPrintln(ERR_LDAPSEARCH_VLV_INVALID_DESCRIPTOR.get());      return ResultCode.CLIENT_SIDE_PARAM_ERROR.intValue();    }  }  int pageSize=0;  if (simplePageSize.isPresent()) {    if (filters.size() > 1) {      errPrintln(ERR_PAGED_RESULTS_REQUIRES_SINGLE_FILTER.get());      return ResultCode.CLIENT_SIDE_PARAM_ERROR.intValue();    }    try {      pageSize=simplePageSize.getIntValue();      search.addControl(SimplePagedResultsControl.newControl(true,pageSize,ByteString.empty()));    } catch (    final ArgumentException ae) {      errPrintln(ERR_ERROR_PARSING_ARGS.get(ae.getMessage()));      return ResultCode.CLIENT_SIDE_PARAM_ERROR.intValue();    }  }  int wrapColumn=80;  if (dontWrap.isPresent()) {    wrapColumn=0;  }  if (noop.isPresent()) {    return 0;  }  try (Connection connection=connectionFactory.getConnection()){    if (bindRequest != null) {      printPasswordPolicyResults(this,connection.bind(bindRequest));    }    int filterIndex=0;    ldifWriter=new LDIFEntryWriter(getOutputStream()).setWrapColumn(wrapColumn);    final LDAPSearchResultHandler resultHandler=new LDAPSearchResultHandler();    while (true) {      Result result=connection.search(search,resultHandler);      try {        final ServerSideSortResponseControl control=result.getControl(ServerSideSortResponseControl.DECODER,new DecodeOptions());        if (control != null && control.getResult() != ResultCode.SUCCESS) {          println(WARN_LDAPSEARCH_SORT_ERROR.get(control.getResult().toString()));        }      } catch (      final DecodeException e) {        errPrintln(ERR_DECODE_CONTROL_FAILURE.get(e.getLocalizedMessage()));      }      try {        final VirtualListViewResponseControl control=result.getControl(VirtualListViewResponseControl.DECODER,new DecodeOptions());        if (control != null) {          if (control.getResult() == ResultCode.SUCCESS) {            LocalizableMessage msg=INFO_LDAPSEARCH_VLV_TARGET_OFFSET.get(control.getTargetPosition());            println(msg);            msg=INFO_LDAPSEARCH_VLV_CONTENT_COUNT.get(control.getContentCount());            println(msg);          } else {            final LocalizableMessage msg=WARN_LDAPSEARCH_VLV_ERROR.get(control.getResult().toString());            println(msg);          }        }      } catch (      final DecodeException e) {        errPrintln(ERR_DECODE_CONTROL_FAILURE.get(e.getLocalizedMessage()));      }      try {        SimplePagedResultsControl control=result.getControl(SimplePagedResultsControl.DECODER,new DecodeOptions());        if (control != null && control.getCookie().length() > 0) {          if (!isQuiet()) {            pressReturnToContinue();          }          final Iterator<Control> iterator=search.getControls().iterator();          while (iterator.hasNext()) {            if (SimplePagedResultsControl.OID.equals(iterator.next().getOID())) {              iterator.remove();            }          }          control=SimplePagedResultsControl.newControl(true,pageSize,control.getCookie());          search.addControl(control);          continue;        }      } catch (      final DecodeException e) {        errPrintln(ERR_DECODE_CONTROL_FAILURE.get(e.getLocalizedMessage()));      }      errPrintln();      errPrintln(ERR_TOOL_RESULT_CODE.get(result.getResultCode().intValue(),result.getResultCode().toString()));      if (result.getDiagnosticMessage() != null && result.getDiagnosticMessage().length() > 0) {        errPrintln(LocalizableMessage.raw(result.getDiagnosticMessage()));      }      if (result.getMatchedDN() != null && result.getMatchedDN().length() > 0) {        errPrintln(ERR_TOOL_MATCHED_DN.get(result.getMatchedDN()));      }      filterIndex++;      if (filterIndex < filters.size()) {        search.setFilter(filters.get(filterIndex));      } else {        break;      }    }    if (countEntries.isPresent() && !isQuiet()) {      println(INFO_LDAPSEARCH_MATCHING_ENTRY_COUNT.get(resultHandler.entryCount));      println();    }    return 0;  } catch (  final LdapException ere) {    return printErrorMessage(this,ere);  } finally {    closeSilently(ldifWriter);  }}  }
class C{  public static boolean equal(Object a,Object b){  return a == b || (a != null && a.equals(b));}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(createElementNS05.class,args);}  }
class C{  synchronized void removeListener(String listenerID){  if (listenerObjects != null) {    listenerObjects.remove(listenerID);    if (listenerObjects.isEmpty()) {      SMSNotificationManager.getInstance().removeCallbackHandler(listenerId);    }  }}  }
class C{  public static void addClickTooltipListener(JComponent comp){  comp.addMouseListener(new ClickTooltipDisplayer());}  }
class C{  public Object clone(){  Reference r=new Reference(className,classFactory,classFactoryLocation);  Enumeration<RefAddr> a=getAll();  r.addrs=new Vector<>();  while (a.hasMoreElements())   r.addrs.addElement(a.nextElement());  return r;}  }
class C{  private void requestNewInterstitial(){  AdRequest adRequest=new AdRequest.Builder().build();  mInterstitialAd.loadAd(adRequest);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node newChild;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node oldChild;  Node appendedChild;  doc=(Document)load("hc_staff",true);  newChild=doc.getDocumentElement();  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(1);{    boolean success=false;    try {      appendedChild=employeeNode.appendChild(newChild);    } catch (    DOMException ex) {      success=(ex.code == DOMException.HIERARCHY_REQUEST_ERR);    }    assertTrue("throw_HIERARCHY_REQUEST_ERR",success);  }}  }
class C{  public DefaultAccessControlHandler(){  super();}  }
class C{  public Builder obsolete(final boolean isObsolete){  this.isObsolete=isObsolete;  return this;}  }
class C{  public FrameBodyTMOO(byte textEncoding,String text){  super(textEncoding,text);}  }
class C{  protected void removeDomain(Entry... domainCfgEntries) throws Exception {  for (  Entry entry : domainCfgEntries) {    if (entry != null) {      deleteEntry(entry.getName());    }  }}  }
class C{  public OCSPVerifier(CertificateVerifier verifier,List<BasicOCSPResp> ocsps){  super(verifier);  this.ocsps=ocsps;}  }
class C{  public boolean isDeployed(String name){  DeployedApplication app=deployed.get(name);  if (app == null) {    return false;  }  return true;}  }
class C{  public CertPathBuilderResult engineBuild(CertPathParameters params) throws CertPathBuilderException, InvalidAlgorithmParameterException {  if (!(params instanceof PKIXBuilderParameters) && !(params instanceof ExtendedPKIXBuilderParameters)) {    throw new InvalidAlgorithmParameterException("Parameters must be an instance of " + PKIXBuilderParameters.class.getName() + " or "+ ExtendedPKIXBuilderParameters.class.getName()+ ".");  }  ExtendedPKIXBuilderParameters pkixParams=null;  if (params instanceof ExtendedPKIXBuilderParameters) {    pkixParams=(ExtendedPKIXBuilderParameters)params;  } else {    pkixParams=(ExtendedPKIXBuilderParameters)ExtendedPKIXBuilderParameters.getInstance((PKIXBuilderParameters)params);  }  Collection targets;  Iterator targetIter;  List certPathList=new ArrayList();  X509Certificate cert;  Selector certSelect=pkixParams.getTargetConstraints();  if (!(certSelect instanceof X509CertStoreSelector)) {    throw new CertPathBuilderException("TargetConstraints must be an instance of " + X509CertStoreSelector.class.getName() + " for "+ this.getClass().getName()+ " class.");  }  try {    targets=CertPathValidatorUtilities.findCertificates((X509CertStoreSelector)certSelect,pkixParams.getStores());    targets.addAll(CertPathValidatorUtilities.findCertificates((X509CertStoreSelector)certSelect,pkixParams.getCertStores()));  } catch (  AnnotatedException e) {    throw new ExtCertPathBuilderException("Error finding target certificate.",e);  }  if (targets.isEmpty()) {    throw new CertPathBuilderException("No certificate found matching targetContraints.");  }  CertPathBuilderResult result=null;  targetIter=targets.iterator();  while (targetIter.hasNext() && result == null) {    cert=(X509Certificate)targetIter.next();    result=build(cert,pkixParams,certPathList);  }  if (result == null && certPathException != null) {    if (certPathException instanceof AnnotatedException) {      throw new CertPathBuilderException(certPathException.getMessage(),certPathException.getCause());    }    throw new CertPathBuilderException("Possible certificate chain could not be validated.",certPathException);  }  if (result == null && certPathException == null) {    throw new CertPathBuilderException("Unable to find certificate chain.");  }  return result;}  }
class C{  public static String unescapePipe(String text){  return text.replaceAll("&#124;","|");}  }
class C{  public void init(){  try {    filepathMatcher=null;    if (fileNameGlob != null && !fileNameGlob.isEmpty()) {      String filepathRE=TextUtilities.globToRE(fileNameGlob);      if (filepathRE.contains("/") || filepathRE.contains("\\\\")) {        filepathRE=filepathRE.replaceAll("/|\\\\\\\\","[/\\\\\\\\]");      } else {        filepathRE=String.format("(?:.*[/\\\\])?%s",filepathRE);      }      this.filepathMatcher=Pattern.compile(filepathRE,Pattern.CASE_INSENSITIVE).matcher("");    }    firstlineMatcher=null;    if (firstLineGlob != null && !firstLineGlob.isEmpty()) {      firstlineMatcher=Pattern.compile(TextUtilities.globToRE(firstLineGlob),Pattern.CASE_INSENSITIVE).matcher("");    }  } catch (  PatternSyntaxException re) {    L.e("Invalid filename/firstline" + " globs in mode " + name,re);  }  marker=null;}  }
class C{  public static void d(String tag,String msg){  if (sLevel > LEVEL_DEBUG) {    return;  }  Log.d(tag,msg);}  }
class C{  public static void main(String[] args){  JKLogger logger=JKLoggerFactory.getLogger(Integer.class);  logger.info("asdfads");}  }
class C{  public static void signSLOResponse(LogoutResponse sloResponse,String realm,String hostEntity,String hostEntityRole,String remoteEntity) throws SAML2Exception {  signSLOResponse(sloResponse,realm,hostEntity,hostEntityRole,remoteEntity,false);}  }
class C{  public AuthorityKeyIdentifierStructure(PublicKey pubKey) throws InvalidKeyException {  super(fromKey(pubKey));}  }
class C{  public ServletContextAttributeEvent(ServletContext source,String name,Object value){  super(source);  this.name=name;  this.value=value;}  }
class C{  public ContentModel(Element content){  this(0,content,null);}  }
class C{  private boolean extraEntity(String outputString,int charToMap){  boolean extra=false;  if (charToMap < ASCII_MAX) {switch (charToMap) {case '"':      if (!outputString.equals("&quot;"))       extra=true;    break;case '&':  if (!outputString.equals("&amp;"))   extra=true;break;case '<':if (!outputString.equals("&lt;")) extra=true;break;case '>':if (!outputString.equals("&gt;")) extra=true;break;default :extra=true;}}return extra;}  }
class C{  private void processHost(final String rule){  final String[] s=rule.split("^[0-9a-zA-z-.*]+");  if (s.length > 0) {    throw genericDecodeError();  }  hostName=rule.split("\\.",-1);}  }
class C{  public void replaceACI(ACI oldACI,ACI newACI) throws AccessRightsException, UMSException {  Attr attr=new Attr(ACI.ACI,oldACI.getACIText());  modify(attr,ModificationType.DELETE);  attr=new Attr(ACI.ACI,newACI.toString());  modify(attr,ModificationType.ADD);  save();}  }
class C{  static private String toUpperCaseFast(final String s){  boolean different=false;  final int mx=s.length();  char[] chars=new char[mx];  for (int i=0; i < mx; i++) {    char ch=s.charAt(i);    if ('a' <= ch && ch <= 'z') {      ch=(char)(ch + ('A' - 'a'));      different=true;    }    chars[i]=ch;  }  final String upper;  if (different)   upper=String.valueOf(chars); else   upper=s;  return upper;}  }
class C{  private static String resourcePrefixesToXml(Map resourcePrefixes){  StringBuilder sb=new StringBuilder(128);  sb.append(LTS).append(RESOURCE_PREFIXES).append(GTS).append(NEW_LINE);  Iterator prefixes=resourcePrefixes.keySet().iterator();  while (prefixes.hasNext()) {    String prefix=(String)prefixes.next();    String value=(String)resourcePrefixes.get(prefix);    sb.append(LTS).append(PREFIX).append(SPACE).append(NAME).append(EQUALS).append(QUOTE).append(XMLUtils.escapeSpecialCharacters(prefix)).append(QUOTE).append(SPACE).append(COUNT).append(EQUALS).append(QUOTE).append(value).append(QUOTE).append(SGTS).append(NEW_LINE);  }  sb.append(LTSS).append(RESOURCE_PREFIXES).append(GTS).append(NEW_LINE);  return sb.toString();}  }
class C{  private static void loadLegacyConsoleConfig(Document doc){  NodeList nodes=doc.getElementsByTagName("tabs");  if ((nodes == null) || (nodes.getLength() != 1)) {    debug.error("RestUtils.loadLegacyConsoleConfig(): failed to load tab config");    return;  }  Node root=nodes.item(0);  NodeList children=root.getChildNodes();  for (int i=0; i < children.getLength(); i++) {    Node child=children.item(i);    if (child.getNodeName().equalsIgnoreCase("tab")) {      NamedNodeMap attrs=child.getAttributes();      if (attrs != null) {        List<String> accessLevels=getAttributes(attrs,"accesslevel");        List<String> serviceNames=getAttributes(attrs,"permissions");        if (CollectionUtils.isEmpty(accessLevels)) {          realmService.addAll(serviceNames);        } else {          globalService.addAll(serviceNames);        }      }    }  }}  }
class C{  public CRL engineGenerateCRL(InputStream inStream) throws CRLException {  if (currentCrlStream == null) {    currentCrlStream=inStream;    sCrlData=null;    sCrlDataObjectCount=0;  } else   if (currentCrlStream != inStream) {    currentCrlStream=inStream;    sCrlData=null;    sCrlDataObjectCount=0;  }  try {    if (sCrlData != null) {      if (sCrlDataObjectCount != sCrlData.size()) {        return getCRL();      } else {        sCrlData=null;        sCrlDataObjectCount=0;        return null;      }    }    PushbackInputStream pis=new PushbackInputStream(inStream);    int tag=pis.read();    if (tag == -1) {      return null;    }    pis.unread(tag);    if (tag != 0x30) {      return readPEMCRL(pis);    } else {      return readDERCRL(new ASN1InputStream(pis,true));    }  } catch (  CRLException e) {    throw e;  }catch (  Exception e) {    throw new CRLException(e.toString());  }}  }
class C{  public String normalizeSourceId(String aSourceId){  if (!isSourceCaseSensitive()) {    return (aSourceId == null ? null : aSourceId.toLowerCase());  } else {    return aSourceId;  }}  }
class C{  @Override public int hashCode(){  return dateTime.hashCode() ^ offset.hashCode() ^ Integer.rotateLeft(zone.hashCode(),3);}  }
class C{  public boolean isMutable(){  return mutable;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(cdatasectiongetdata.class,args);}  }
class C{  public void assign(org.omg.DynamicAny.DynAny dyn_any) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("assign",_opsClass);  DynFixedOperations $self=(DynFixedOperations)$so.servant;  try {    $self.assign(dyn_any);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public void countTestTrain(){  int countTest=0, countTrain=0;  for (int i=0; i < dataNums; i++) {    if (TestTrain[i] == 1) {      countTrain++;    } else {      countTest++;    }  }  this.test=countTest;  this.train=countTrain;  System.out.println("test + train = " + (test + train));}  }
class C{  public PersistentSearchControl(Set<PersistentSearchChangeType> changeTypes,boolean changesOnly,boolean returnECs){  this(true,changeTypes,changesOnly,returnECs);}  }
class C{  public FrameBodyTRCK(byte textEncoding,String text){  setObjectValue(DataTypes.OBJ_TEXT_ENCODING,textEncoding);  setObjectValue(DataTypes.OBJ_TEXT,new PartOfSet.PartOfSetValue(text));}  }
class C{  @Override public int hashCode(){  if (numFrames != 0) {    return classNames[0].hashCode() + methodNames[0].hashCode() + lineNumbers[0];  }  return 0;}  }
class C{  private boolean canFitRowsInGivenArea(LayoutArea layoutArea,int startRow,float[] columnWidths,List<Float> heights){  layoutArea=layoutArea.clone();  heights=new ArrayList<>(heights);  for (int row=startRow; row < rows.size(); row++) {    CellRenderer[] rowCells=rows.get(row);    float rowHeight=0;    for (int col=0; col < rowCells.length; col++) {      CellRenderer cell=rowCells[col];      if (cell == null) {        continue;      }      int colspan=(int)cell.getPropertyAsInteger(Property.COLSPAN);      int rowspan=(int)cell.getPropertyAsInteger(Property.ROWSPAN);      float cellWidth=0, colOffset=0;      for (int i=col; i < col + colspan; i++) {        cellWidth+=columnWidths[i];      }      for (int i=0; i < col; i++) {        colOffset+=columnWidths[i];      }      float rowspanOffset=0;      for (int i=row - 1; i > row - rowspan && i >= 0; i--) {        rowspanOffset+=(float)heights.get(i);      }      float cellLayoutBoxHeight=rowspanOffset + layoutArea.getBBox().getHeight();      Rectangle cellLayoutBox=new Rectangle(layoutArea.getBBox().getX() + colOffset,layoutArea.getBBox().getY(),cellWidth,cellLayoutBoxHeight);      LayoutArea cellArea=new LayoutArea(layoutArea.getPageNumber(),cellLayoutBox);      LayoutResult cellResult=cell.setParent(this).layout(new LayoutContext(cellArea));      if (cellResult.getStatus() != LayoutResult.FULL) {        return false;      }      rowHeight=Math.max(rowHeight,cellResult.getOccupiedArea().getBBox().getHeight());    }    heights.add(rowHeight);    layoutArea.getBBox().moveUp(rowHeight).decreaseHeight(rowHeight);  }  return true;}  }
class C{  public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws XACMLException {  StringBuffer sb=new StringBuffer(2000);  String nsDeclaration="";  String nsPrefix="";  if (declareNS) {    nsDeclaration=XACMLConstants.CONTEXT_NS_DECLARATION;  }  if (includeNSPrefix) {    nsPrefix=XACMLConstants.CONTEXT_NS_PREFIX + ":";  }  sb.append("<").append(nsPrefix).append(XACMLConstants.RESULT).append(nsDeclaration);  sb.append(" ");  if (resourceId != null) {    sb.append(XACMLConstants.RESOURCE_ID).append("=").append(XACMLSDKUtils.quote(resourceId));  }  sb.append(">\n");  if (decision != null) {    sb.append(decision.toXMLString(includeNSPrefix,false));  }  if (status != null) {    sb.append(status.toXMLString(includeNSPrefix,false));  }  if (obligations != null) {    sb.append(obligations.toXMLString(includeNSPrefix,true));  }  sb.append("</").append(nsPrefix).append(XACMLConstants.RESULT).append(">\n");  return sb.toString();}  }
class C{  public BAD_QOS(String detailMessage,int minorCode,CompletionStatus completionStatus){  super(detailMessage,minorCode,completionStatus);}  }
class C{  @Override public boolean isCommitted(){  return getCoyoteResponse().isCommitted();}  }
class C{  public com.sun.identity.saml2.jaxb.metadataextquery.AuthnQueryDescriptorType createAuthnQueryDescriptorType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadataextquery.impl.AuthnQueryDescriptorTypeImpl();}  }
class C{  public static boolean isSupportedFeature(String featureOID){  return DirectoryServer.isSupportedFeature(featureOID);}  }
class C{  public ExpectedImpl(){  this.value=null;}  }
class C{  public int validateGlobalOptions(PrintStream err){  LocalizableMessageBuilder buf=new LocalizableMessageBuilder();  int returnValue=validateGlobalOptions(buf);  printWrappedText(err,buf.toString());  return returnValue;}  }
class C{  protected void handleButton1Request(Map values) throws AMConsoleException {  editEntry(values);}  }
class C{  public synchronized void reset() throws IOException {  throw new IOException("mark/reset not supported");}  }
class C{  public void handleButton3Request(RequestInvocationEvent event){  forwardToServicesViewBean();}  }
class C{  public boolean canAssignService(String realmName,String idType){  boolean can=false;  try {    AMIdentityRepository repo=new AMIdentityRepository(adminSSOToken,realmName);    Set allowedOperations=repo.getAllowedIdOperations(IdUtils.getType(idType));    can=allowedOperations.contains(IdOperation.SERVICE);  } catch (  IdRepoException e) {    debug.warning("EntitiesModelImpl.canAssignService",e);  }catch (  SSOException e) {    debug.warning("EntitiesModelImpl.canAssignService",e);  }  return can;}  }
class C{  public SimplePropertyMapper defaultJsonValues(final Collection<?> defaultValues){  this.defaultJsonValues=defaultValues != null ? new ArrayList<>(defaultValues) : emptyList();  return this;}  }
class C{  public boolean isFullyQualified(){  return fqdn;}  }
class C{  private void checkBoundedTypeParameter(Method method){  TypeVariable<Method> typeParameter=getTypeParameter(method);  assertEquals("T",typeParameter.getName());  assertEquals(method,typeParameter.getGenericDeclaration());  Type[] bounds=typeParameter.getBounds();  assertLenghtOne(bounds);  Type bound=bounds[0];  assertEquals(BoundedGenericMethods.class,bound);}  }
class C{  BigInteger add(long val){  if (val == 0)   return this;  if (signum == 0)   return valueOf(val);  if (Long.signum(val) == signum)   return new BigInteger(add(mag,Math.abs(val)),signum);  int cmp=compareMagnitude(val);  if (cmp == 0)   return ZERO;  int[] resultMag=(cmp > 0 ? subtract(mag,Math.abs(val)) : subtract(Math.abs(val),mag));  resultMag=trustedStripLeadingZeroInts(resultMag);  return new BigInteger(resultMag,cmp == signum ? 1 : -1);}  }
class C{  private void configure(){  Timestamp ts=new Timestamp(System.currentTimeMillis());  String tsString=ts.toString().substring(0,19);  date=tsString.substring(0,10);  String className=this.getClass().getName();  ClassLoader cl=Thread.currentThread().getContextClassLoader();  rotatable=Boolean.parseBoolean(getProperty(className + ".rotatable","true"));  if (directory == null)   directory=getProperty(className + ".directory","logs");  if (prefix == null)   prefix=getProperty(className + ".prefix","juli.");  if (suffix == null)   suffix=getProperty(className + ".suffix",".log");  String sBufferSize=getProperty(className + ".bufferSize",String.valueOf(bufferSize));  try {    bufferSize=Integer.parseInt(sBufferSize);  } catch (  NumberFormatException ignore) {  }  String encoding=getProperty(className + ".encoding",null);  if (encoding != null && encoding.length() > 0) {    try {      setEncoding(encoding);    } catch (    UnsupportedEncodingException ex) {    }  }  setLevel(Level.parse(getProperty(className + ".level","" + Level.ALL)));  String filterName=getProperty(className + ".filter",null);  if (filterName != null) {    try {      setFilter((Filter)cl.loadClass(filterName).newInstance());    } catch (    Exception e) {    }  }  String formatterName=getProperty(className + ".formatter",null);  if (formatterName != null) {    try {      setFormatter((Formatter)cl.loadClass(formatterName).newInstance());    } catch (    Exception e) {      setFormatter(new OneLineFormatter());    }  } else {    setFormatter(new OneLineFormatter());  }  setErrorManager(new ErrorManager());}  }
class C{  public void addLayoutComponent(String name,Component comp){}  }
