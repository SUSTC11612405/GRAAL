class C{  public void suppressLineNumbers(){  _suppressLineNumbers=true;}  }
class C{  @Override public void write(byte[] b,int off,int len){  if ((off < 0) || (off > b.length) || (len < 0)|| ((off + len) > b.length)|| ((off + len) < 0)) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return;  }synchronized (this) {    int newcount=count + len;    int remaining=len;    int inBufferPos=count - filledBufferSum;    while (remaining > 0) {      int part=Math.min(remaining,currentBuffer.length - inBufferPos);      System.arraycopy(b,off + len - remaining,currentBuffer,inBufferPos,part);      remaining-=part;      if (remaining > 0) {        needNewBuffer(newcount);        inBufferPos=0;      }    }    count=newcount;  }}  }
class C{  public AbstractSessionPropertiesActionHandler(SessionPropertyWhitelist sessionPropertyWhitelist,SessionResourceUtil sessionResourceUtil){  this.sessionPropertyWhitelist=sessionPropertyWhitelist;  this.sessionResourceUtil=sessionResourceUtil;}  }
class C{  private void sendClusterEvent(ConfigAction action,ResourcePath name,String id,JsonValue obj){  if (clusterManagementService != null && clusterManagementService.isEnabled()) {    JsonValue details=json(object(field(EVENT_RESOURCE_ACTION,action.toString()),field(EVENT_RESOURCE_PATH,name.toString()),field(EVENT_RESOURCE_ID,id),field(EVENT_RESOURCE_OBJECT,obj == null ? null : obj.getObject())));    ClusterEvent event=new ClusterEvent(ClusterEventType.CUSTOM,clusterManagementService.getInstanceId(),EVENT_LISTENER_ID,details);    clusterManagementService.sendEvent(event);  }}  }
class C{  @Override public void removeSecurityRole(String role){synchronized (securityRolesLock) {    int n=-1;    for (int i=0; i < securityRoles.length; i++) {      if (role.equals(securityRoles[i])) {        n=i;        break;      }    }    if (n < 0)     return;    int j=0;    String results[]=new String[securityRoles.length - 1];    for (int i=0; i < securityRoles.length; i++) {      if (i != n)       results[j++]=securityRoles[i];    }    securityRoles=results;  }  fireContainerEvent("removeSecurityRole",role);}  }
class C{  public ProtocolException(){  super();}  }
class C{  String fullName(){  String parsable=name;  if (scope != null) {    parsable+="." + scope.getName();  }  return parsable;}  }
class C{  public void testUserDataHandlerNotifiedOfOnlyShallowAdoptions() throws Exception {  domToString(document);  RecordingHandler handler=new RecordingHandler();  name.setUserData("a","apple",handler);  name.setUserData("b","banana",handler);  standard.setUserData("c","cat",handler);  waffles.setUserData("d","dog",handler);  Document newDocument=builder.newDocument();  assertSame(name,newDocument.adoptNode(name));  assertSame(newDocument,name.getOwnerDocument());  assertSame(newDocument,standard.getOwnerDocument());  assertSame(newDocument,waffles.getOwnerDocument());  Set<String> expected=new HashSet<String>();  expected.add(notification(NODE_ADOPTED,"a","apple",name,null));  expected.add(notification(NODE_ADOPTED,"b","banana",name,null));  assertEquals(expected,handler.calls);}  }
class C{  private void initCachingHttpHeadersFilter(ServletContext servletContext,EnumSet<DispatcherType> disps){  log.debug("Registering Caching HTTP Headers Filter");  FilterRegistration.Dynamic cachingHttpHeadersFilter=servletContext.addFilter("cachingHttpHeadersFilter",new CachingHttpHeadersFilter(jHipsterProperties));  cachingHttpHeadersFilter.addMappingForUrlPatterns(disps,true,"/content/*");  cachingHttpHeadersFilter.addMappingForUrlPatterns(disps,true,"/app/*");  cachingHttpHeadersFilter.setAsyncSupported(true);}  }
class C{  private void createScrollPane(){  AttributeSet attributes=getElement().getAttributes();  String scrolling=(String)attributes.getAttribute(HTML.Attribute.SCROLLING);  if (scrolling == null) {    scrolling="auto";  }  if (!scrolling.equals("no")) {    if (scrolling.equals("yes")) {      scroller=new JScrollPane(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);    } else {      scroller=new JScrollPane();    }  } else {    scroller=new JScrollPane(JScrollPane.VERTICAL_SCROLLBAR_NEVER,JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);  }  JViewport vp=scroller.getViewport();  vp.add(htmlPane);  vp.setBackingStoreEnabled(true);  scroller.setMinimumSize(new Dimension(5,5));  scroller.setMaximumSize(new Dimension(Integer.MAX_VALUE,Integer.MAX_VALUE));}  }
class C{  protected boolean isStringFlavor(DataFlavor flavor){  DataFlavor[] flavors=stringFlavors;  for (int i=0; i < flavors.length; i++) {    if (flavors[i].equals(flavor)) {      return true;    }  }  return false;}  }
class C{  public static StringArgument rejectedImportLdifArgument() throws ArgumentException {  return StringArgument.builder("rejectFile").shortIdentifier('R').description(INFO_GENERAL_DESCRIPTION_REJECTED_FILE.get()).valuePlaceholder(INFO_REJECT_FILE_PLACEHOLDER.get()).buildArgument();}  }
class C{  public static String convertFrameID22To23(String identifier){  if (identifier.length() < 3) {    return null;  }  return ID3Frames.convertv22Tov23.get((String)identifier.subSequence(0,3));}  }
class C{  public java.lang.Object newInstance(java.lang.Class javaContentInterface) throws javax.xml.bind.JAXBException {  return super.newInstance(javaContentInterface);}  }
class C{  public final WritableRaster filter(Raster src,WritableRaster dst){  int numBands=src.getNumBands();  int width=src.getWidth();  int height=src.getHeight();  int[] srcPix=null;  int step=0;  int tidx=0;  if (dst == null) {    dst=createCompatibleDestRaster(src);  } else   if (height != dst.getHeight() || width != dst.getWidth()) {    throw new IllegalArgumentException("Width or height of Rasters do not " + "match");  } else   if (numBands != dst.getNumBands()) {    throw new IllegalArgumentException("Number of bands in src " + numBands + " does not equal number of bands in dest "+ dst.getNumBands());  }  if (length != 1 && length != src.getNumBands()) {    throw new IllegalArgumentException("Number of scaling constants " + "does not equal the number of" + " of bands in the src raster");  }  if (ImagingLib.filter(this,src,dst) != null) {    return dst;  }  if (canUseLookup(src,dst)) {    int srcNgray=(1 << srcNbits);    int dstNgray=(1 << dstNbits);    if (dstNgray == 256) {      ByteLookupTable lut=createByteLut(scaleFactors,offsets,numBands,srcNgray);      LookupOp op=new LookupOp(lut,hints);      op.filter(src,dst);    } else {      ShortLookupTable lut=createShortLut(scaleFactors,offsets,numBands,srcNgray);      LookupOp op=new LookupOp(lut,hints);      op.filter(src,dst);    }  } else {    if (length > 1) {      step=1;    }    int sminX=src.getMinX();    int sY=src.getMinY();    int dminX=dst.getMinX();    int dY=dst.getMinY();    int sX;    int dX;    int nbits;    int dstMax[]=new int[numBands];    int dstMask[]=new int[numBands];    SampleModel dstSM=dst.getSampleModel();    for (int z=0; z < numBands; z++) {      nbits=dstSM.getSampleSize(z);      dstMax[z]=(1 << nbits) - 1;      dstMask[z]=~(dstMax[z]);    }    int val;    for (int y=0; y < height; y++, sY++, dY++) {      dX=dminX;      sX=sminX;      for (int x=0; x < width; x++, sX++, dX++) {        srcPix=src.getPixel(sX,sY,srcPix);        tidx=0;        for (int z=0; z < numBands; z++, tidx+=step) {          val=(int)(srcPix[z] * scaleFactors[tidx] + offsets[tidx]);          if ((val & dstMask[z]) != 0) {            if (val < 0) {              val=0;            } else {              val=dstMax[z];            }          }          srcPix[z]=val;        }        dst.setPixel(dX,dY,srcPix);      }    }  }  return dst;}  }
class C{  protected void closeTransportLayer() throws IOException {  super.close();  if (input != null) {    input.close();    output.close();  }}  }
class C{  protected ListSelectionModel createSelectionModel(){  return new DefaultListSelectionModel();}  }
class C{  public SearchFilter(FilterType filterType,Collection<SearchFilter> filterComponents,SearchFilter notComponent,AttributeDescription attributeDescription,ByteString assertionValue,ByteString subInitialElement,List<ByteString> subAnyElements,ByteString subFinalElement,String matchingRuleID,boolean dnAttributes){  if (subAnyElements == null) {    subAnyElements=new ArrayList<>(0);  }  if (filterComponents == null) {    filterComponents=Collections.emptyList();  }  this.filterType=filterType;  this.filterComponents=new LinkedHashSet<>(filterComponents);  this.notComponent=notComponent;  this.attributeDescription=attributeDescription;  this.assertionValue=assertionValue;  this.subInitialElement=subInitialElement;  this.subAnyElements=subAnyElements;  this.subFinalElement=subFinalElement;  this.matchingRuleID=matchingRuleID;  this.dnAttributes=dnAttributes;}  }
class C{  public void useAuthzid(boolean v){  this.useAuthzid=v;}  }
class C{  public void testIntValuePositive3(){  byte aBytes[]={56,13,78,-12,-5,56,100};  int sign=1;  int resInt=-184862620;  int aNumber=new BigInteger(sign,aBytes).intValue();  assertTrue(aNumber == resInt);}  }
class C{  public void testPreferencesClobbersExistingFiles() throws Exception {  File userPrefs=new File(System.getProperty("user.home") + "/.java/.userPrefs/prefs.xml");  FileWriter writer=new FileWriter(userPrefs);  writer.write("lamb");  writer.close();  userPrefs.setReadable(false);  userPrefs.setWritable(false);  long oldLength=userPrefs.length();  Preferences userPreferences=Preferences.userRoot();  userPreferences.sync();  userPreferences.put("a","lion");  userPreferences.flush();  assertTrue("Expected to exist " + userPrefs,userPrefs.exists());  assertTrue("Expected file to be clobbered",oldLength != userPrefs.length());}  }
class C{  public boolean isRunning(){  return DirectoryServer.isRunning();}  }
class C{  public VirtualStaticGroup(DN groupEntryDN,DN targetGroupDN){  super();  ifNull(groupEntryDN,targetGroupDN);  this.groupEntryDN=groupEntryDN;  this.targetGroupDN=targetGroupDN;}  }
class C{  public static Map<String,String> parseAuthorizationDigest(StringReader input) throws IllegalArgumentException, IOException {  Map<String,String> result=new HashMap<>();  if (HttpParser.skipConstant(input,"Digest") != SkipResult.FOUND) {    return null;  }  String field=HttpParser.readToken(input);  if (field == null) {    return null;  }  while (!field.equals("")) {    if (HttpParser.skipConstant(input,"=") != SkipResult.FOUND) {      return null;    }    String value;    Integer type=fieldTypes.get(field.toLowerCase(Locale.ENGLISH));    if (type == null) {      type=FIELD_TYPE_TOKEN_OR_QUOTED_STRING;    }switch (type.intValue()) {case 0:      value=HttpParser.readToken(input);    break;case 1:  value=HttpParser.readQuotedString(input,false);break;case 2:value=HttpParser.readTokenOrQuotedString(input,false);break;case 3:value=HttpParser.readLhex(input);break;case 4:value=HttpParser.readQuotedToken(input);break;default :throw new IllegalArgumentException(sm.getString("authorization.unknownType",type));}if (value == null) {return null;}result.put(field,value);if (HttpParser.skipConstant(input,",") == SkipResult.NOT_FOUND) {return null;}field=HttpParser.readToken(input);if (field == null) {return null;}}return result;}  }
class C{  public void testTestBitPositive3(){  byte aBytes[]={-1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=300;  BigInteger aNumber=new BigInteger(aSign,aBytes);  assertTrue(!aNumber.testBit(number));}  }
class C{  public void arrangeChildren(ArrayList<View> list,int itemCount){  arrangeChildren(list,itemCount,true);}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.MsgTechnologyElement createMsgTechnologyElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.MsgTechnologyElementImpl();}  }
class C{  public DateEditor(JSpinner spinner){  this(spinner,getDefaultPattern(spinner.getLocale()));}  }
class C{  public JButton add(Action a){  JButton b=createActionComponent(a);  b.setAction(a);  add(b);  return b;}  }
class C{  public void testConstrStringExponentIntegerMax(){  String a="-238768.787678287e2147483647";  int aScale=-2147483638;  BigInteger bA=new BigInteger("-238768787678287");  BigDecimal aNumber=new BigDecimal(a);  assertEquals("incorrect value",bA,aNumber.unscaledValue());  assertEquals("incorrect scale",aScale,aNumber.scale());}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  try {    logger.info("shootme: got an ACK " + requestEvent.getRequest());    int ackCount=((ApplicationData)dialog.getApplicationData()).ackCount;    if (ackCount == 1) {      dialog=inviteTid.getDialog();      this.sendReInvite(sipProvider);    } else     ((ApplicationData)dialog.getApplicationData()).ackCount++;  } catch (  Exception ex) {    String s="Unexpected error";    logger.error(s,ex);    SctpTest.fail(s);  }}  }
class C{  public synchronized Object next(Object key) throws IOException {  if (key != null && key.getClass() != WALEntry.class) {    throw new IOException("wrong key class: " + key.getClass().getName() + " is not "+ WALEntry.class);  }  outBuf.reset();  keyLength=next(outBuf);  if (keyLength < 0) {    return null;  }  valBuffer.reset(outBuf.getData(),outBuf.getLength());  key=deserializeKey(key);  valBuffer.mark(0);  if (valBuffer.getPosition() != keyLength) {    throw new IOException(key + " read " + valBuffer.getPosition()+ " bytes, should read "+ keyLength);  }  return key;}  }
class C{  protected String add(HttpServletRequest request,String name,StringManager smClient){  StringWriter stringWriter=new StringWriter();  PrintWriter printWriter=new PrintWriter(stringWriter);  super.add(request,printWriter,name,true,smClient);  return stringWriter.toString();}  }
class C{  public void destroyModuleState(){  userPrincipal=null;  userTokenId=null;}  }
class C{  public void clearPassword(){  this.password=null;}  }
class C{  public void loadPropertyFile(String file,Properties target){  try {    SecuritySupport ss=SecuritySupport.getInstance();    InputStream is=ss.getResourceAsStream(ObjectFactory.findClassLoader(),file);    BufferedInputStream bis=new BufferedInputStream(is);    target.load(bis);    bis.close();  } catch (  Exception ex) {    throw new org.apache.xml.utils.WrappedRuntimeException(ex);  }}  }
class C{  @Override public int hashCode(){  return oid.hashCode();}  }
class C{  private static <T>int gallopLeft(T key,T[] a,int base,int len,int hint,Comparator<? super T> c){  if (DEBUG)   assert len > 0 && hint >= 0 && hint < len;  int lastOfs=0;  int ofs=1;  if (c.compare(key,a[base + hint]) > 0) {    int maxOfs=len - hint;    while (ofs < maxOfs && c.compare(key,a[base + hint + ofs]) > 0) {      lastOfs=ofs;      ofs=(ofs * 2) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    lastOfs+=hint;    ofs+=hint;  } else {    final int maxOfs=hint + 1;    while (ofs < maxOfs && c.compare(key,a[base + hint - ofs]) <= 0) {      lastOfs=ofs;      ofs=(ofs * 2) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    int tmp=lastOfs;    lastOfs=hint - ofs;    ofs=hint - tmp;  }  if (DEBUG)   assert -1 <= lastOfs && lastOfs < ofs && ofs <= len;  lastOfs++;  while (lastOfs < ofs) {    int m=lastOfs + ((ofs - lastOfs) >>> 1);    if (c.compare(key,a[base + m]) > 0)     lastOfs=m + 1; else     ofs=m;  }  if (DEBUG)   assert lastOfs == ofs;  return ofs;}  }
class C{  public static MatchedValuesFilter createPresentFilter(AttributeType attributeType){  Reject.ifNull(attributeType);  String rawAttributeType=attributeType.getNameOrOID();  MatchedValuesFilter filter=new MatchedValuesFilter(PRESENT_TYPE,rawAttributeType,null,null,null,null,null);  filter.attributeType=attributeType;  return filter;}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return new XNumber(getArg0AsString(xctxt).length());}  }
class C{  public static boolean isLoggable(String tag,int level){  return Log.isLoggable(tag,level);}  }
class C{  public static String toHexString(byte b[]){  int pos=0;  char[] c=new char[b.length * 2];  for (int i=0; i < b.length; i++) {    c[pos++]=toHex[(b[i] >> 4) & 0x0F];    c[pos++]=toHex[b[i] & 0x0f];  }  return new String(c);}  }
class C{  protected SSLEngineResult handshakeUnwrap() throws IOException {  if (netInBuffer.position() == netInBuffer.limit()) {    netInBuffer.clear();  }  SSLEngineResult result;  boolean cont=false;  do {    netInBuffer.flip();    getBufHandler().configureReadBufferForWrite();    result=sslEngine.unwrap(netInBuffer,getBufHandler().getReadBuffer());    netInBuffer.compact();    handshakeStatus=result.getHandshakeStatus();    if (result.getStatus() == SSLEngineResult.Status.OK && result.getHandshakeStatus() == HandshakeStatus.NEED_TASK) {      handshakeStatus=tasks();    }    cont=result.getStatus() == SSLEngineResult.Status.OK && handshakeStatus == HandshakeStatus.NEED_UNWRAP;  } while (cont);  return result;}  }
class C{  public FrameBodyTPE1(){}  }
class C{  @SuppressWarnings("unchecked") public void printAtomTree(){  Enumeration<DefaultMutableTreeNode> e=rootNode.preorderEnumeration();  DefaultMutableTreeNode nextNode;  while (e.hasMoreElements()) {    nextNode=e.nextElement();    Mp4BoxHeader header=(Mp4BoxHeader)nextNode.getUserObject();    if (header != null) {      String tabbing="";      for (int i=1; i < nextNode.getLevel(); i++) {        tabbing+="\t";      }      if (header instanceof NullPadding) {        System.out.println(tabbing + "Null pad " + " @ "+ header.getFilePos()+ " of size:"+ header.getLength()+ " ,ends @ "+ (header.getFilePos() + header.getLength()));      } else {        System.out.println(tabbing + "Atom " + header.getId()+ " @ "+ header.getFilePos()+ " of size:"+ header.getLength()+ " ,ends @ "+ (header.getFilePos() + header.getLength()));      }    }  }}  }
class C{  public void startDrag(DragGestureEvent trigger,Cursor dragCursor,Transferable transferable,DragSourceListener dsl,FlavorMap flavorMap) throws InvalidDnDOperationException {  startDrag(trigger,dragCursor,null,null,transferable,dsl,flavorMap);}  }
class C{  public void beforeEvaluation(ELContext context,String expression){}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("SubscriptionStateParser.parse");  SubscriptionState subscriptionState=new SubscriptionState();  try {    headerName(TokenTypes.SUBSCRIPTION_STATE);    subscriptionState.setHeaderName(SIPHeaderNames.SUBSCRIPTION_STATE);    lexer.match(TokenTypes.ID);    Token token=lexer.getNextToken();    subscriptionState.setState(token.getTokenValue());    while (lexer.lookAhead(0) == ';') {      this.lexer.match(';');      this.lexer.SPorHT();      lexer.match(TokenTypes.ID);      token=lexer.getNextToken();      String value=token.getTokenValue();      if (value.equalsIgnoreCase("reason")) {        this.lexer.match('=');        this.lexer.SPorHT();        lexer.match(TokenTypes.ID);        token=lexer.getNextToken();        value=token.getTokenValue();        subscriptionState.setReasonCode(value);      } else       if (value.equalsIgnoreCase("expires")) {        this.lexer.match('=');        this.lexer.SPorHT();        lexer.match(TokenTypes.ID);        token=lexer.getNextToken();        value=token.getTokenValue();        try {          int expires=Integer.parseInt(value);          subscriptionState.setExpires(expires);        } catch (        NumberFormatException ex) {          throw createParseException(ex.getMessage());        }catch (        InvalidArgumentException ex) {          throw createParseException(ex.getMessage());        }      } else       if (value.equalsIgnoreCase("retry-after")) {        this.lexer.match('=');        this.lexer.SPorHT();        lexer.match(TokenTypes.ID);        token=lexer.getNextToken();        value=token.getTokenValue();        try {          int retryAfter=Integer.parseInt(value);          subscriptionState.setRetryAfter(retryAfter);        } catch (        NumberFormatException ex) {          throw createParseException(ex.getMessage());        }catch (        InvalidArgumentException ex) {          throw createParseException(ex.getMessage());        }      } else {        this.lexer.match('=');        this.lexer.SPorHT();        lexer.match(TokenTypes.ID);        Token secondToken=lexer.getNextToken();        String secondValue=secondToken.getTokenValue();        subscriptionState.setParameter(value,secondValue);      }      this.lexer.SPorHT();    }  }  finally {    if (debug)     dbg_leave("SubscriptionStateParser.parse");  }  return subscriptionState;}  }
class C{  private PresentationDirection(int value){  super(value);}  }
class C{  public InvalidDataTypeException(String msg,Throwable ex){  super(msg,ex);}  }
class C{  public void testGetLocalName() throws Throwable {  Document doc;  Element element;  Element qelement;  Attr attr;  Attr qattr;  String localElemName;  String localQElemName;  String localAttrName;  String localQAttrName;  doc=(Document)load("staff",builder);  element=doc.createElementNS("http://www.w3.org/DOM/Test/elem","elem");  qelement=doc.createElementNS("http://www.w3.org/DOM/Test/elem","qual:qelem");  attr=doc.createAttributeNS("http://www.w3.org/DOM/Test/attr","attr");  qattr=doc.createAttributeNS("http://www.w3.org/DOM/Test/attr","qual:qattr");  localElemName=element.getLocalName();  localQElemName=qelement.getLocalName();  localAttrName=attr.getLocalName();  localQAttrName=qattr.getLocalName();  assertEquals("nodegetlocalname03_localElemName","elem",localElemName);  assertEquals("nodegetlocalname03_localQElemName","qelem",localQElemName);  assertEquals("nodegetlocalname03_localAttrName","attr",localAttrName);  assertEquals("nodegetlocalname03_localQAttrName","qattr",localQAttrName);}  }
class C{  @Override public boolean remove(Object o){  if (locked)   throw new IllegalStateException(sm.getString("resourceSet.locked"));  return (super.remove(o));}  }
class C{  public PlaPointInt[] nearest_border_projections(PlaPointInt p_point,int p_max_result_points){  if (p_max_result_points <= 0) {    return new PlaPointInt[0];  }  p_max_result_points=Math.min(p_max_result_points,2);  PlaPointInt[] result=new PlaPointInt[p_max_result_points];  int lower_x_diff=p_point.v_x - box_ll.v_x;  int upper_x_diff=box_ur.v_x - p_point.v_x;  int lower_y_diff=p_point.v_y - box_ll.v_y;  int upper_y_diff=box_ur.v_y - p_point.v_y;  int min_diff;  int second_min_diff;  int nearest_projection_x=p_point.v_x;  int nearest_projection_y=p_point.v_y;  int second_nearest_projection_x=p_point.v_x;  int second_nearest_projection_y=p_point.v_y;  if (lower_x_diff <= upper_x_diff) {    min_diff=lower_x_diff;    second_min_diff=upper_x_diff;    nearest_projection_x=box_ll.v_x;    second_nearest_projection_x=box_ur.v_x;  } else {    min_diff=upper_x_diff;    second_min_diff=lower_x_diff;    nearest_projection_x=box_ur.v_x;    second_nearest_projection_x=box_ll.v_x;  }  if (lower_y_diff < min_diff) {    second_min_diff=min_diff;    min_diff=lower_y_diff;    second_nearest_projection_x=nearest_projection_x;    second_nearest_projection_y=nearest_projection_y;    nearest_projection_x=p_point.v_x;    nearest_projection_y=box_ll.v_y;  } else   if (lower_y_diff < second_min_diff) {    second_min_diff=lower_y_diff;    second_nearest_projection_x=p_point.v_x;    second_nearest_projection_y=box_ll.v_y;  }  if (upper_y_diff < min_diff) {    second_min_diff=min_diff;    min_diff=upper_y_diff;    second_nearest_projection_x=nearest_projection_x;    second_nearest_projection_y=nearest_projection_y;    nearest_projection_x=p_point.v_x;    nearest_projection_y=box_ur.v_y;  } else   if (upper_y_diff < second_min_diff) {    second_min_diff=upper_y_diff;    second_nearest_projection_x=p_point.v_x;    second_nearest_projection_y=box_ur.v_y;  }  result[0]=new PlaPointInt(nearest_projection_x,nearest_projection_y);  if (result.length > 1) {    result[1]=new PlaPointInt(second_nearest_projection_x,second_nearest_projection_y);  }  return result;}  }
class C{  public static boolean isPrintableCharacter(char c){switch (c) {case 'a':case 'b':case 'c':case 'd':case 'e':case 'f':case 'g':case 'h':case 'i':case 'j':case 'k':case 'l':case 'm':case 'n':case 'o':case 'p':case 'q':case 'r':case 's':case 't':case 'u':case 'v':case 'w':case 'x':case 'y':case 'z':case 'A':case 'B':case 'C':case 'D':case 'E':case 'F':case 'G':case 'H':case 'I':case 'J':case 'K':case 'L':case 'M':case 'N':case 'O':case 'P':case 'Q':case 'R':case 'S':case 'T':case 'U':case 'V':case 'W':case 'X':case 'Y':case 'Z':case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':case '\'':case '(':case ')':case '+':case ',':case '-':case '.':case '=':case '/':case ':':case '?':case ' ':    return true;default :  return false;}}  }
class C{  public TransformerHandler newTransformerHandler(Templates templates) throws TransformerConfigurationException {  try {    TransformerImpl transformer=(TransformerImpl)templates.newTransformer();    transformer.setURIResolver(m_uriResolver);    TransformerHandler th=(TransformerHandler)transformer.getInputContentHandler(true);    return th;  } catch (  TransformerConfigurationException ex) {    if (m_errorListener != null) {      try {        m_errorListener.fatalError(ex);        return null;      } catch (      TransformerConfigurationException ex1) {        throw ex1;      }catch (      TransformerException ex1) {        throw new TransformerConfigurationException(ex1);      }    }    throw ex;  }}  }
class C{  protected final void invokePostResponseCallbacks(){  if (postResponseCallbacks != null) {    for (    Runnable callback : postResponseCallbacks) {      try {        callback.run();      } catch (      Exception e) {        logger.traceException(e);      }    }  }}  }
class C{  public final int hashCode(){  return (int)m_char;}  }
class C{  public long loadFromStream(InputStream stream,long pos) throws IOException {  if (pos < length) {    return pos;  }  int offset=(int)(length % BUFFER_LENGTH);  byte[] buf=null;  long len=pos - length;  if (offset != 0) {    buf=getCacheBlock(length / BUFFER_LENGTH);  }  while (len > 0) {    if (buf == null) {      try {        buf=new byte[BUFFER_LENGTH];      } catch (      OutOfMemoryError e) {        throw new IOException("No memory left for cache!");      }      offset=0;    }    int left=BUFFER_LENGTH - offset;    int nbytes=(int)Math.min(len,(long)left);    nbytes=stream.read(buf,offset,nbytes);    if (nbytes == -1) {      return length;    }    if (offset == 0) {      cache.add(buf);    }    len-=nbytes;    length+=nbytes;    offset+=nbytes;    if (offset >= BUFFER_LENGTH) {      buf=null;    }  }  return pos;}  }
class C{  public long insert(String actionName,Long appID){  if (actionName == null || appID == null) {    throw new IllegalArgumentException("insert parameter null.");  }  ContentValues initialValues=new ContentValues();  initialValues.put(KEY_ACTIONNAME,actionName);  initialValues.put(KEY_APPID,appID);  return database.insert(DATABASE_TABLE,null,initialValues);}  }
class C{  public static boolean verify(PublicKey publicKey,String signedData,String signature){  byte[] signatureBytes;  try {    signatureBytes=Base64.decode(signature,Base64.DEFAULT);  } catch (  IllegalArgumentException e) {    Log.e(TAG,"Base64 decoding failed.");    return false;  }  try {    Signature sig=Signature.getInstance(SIGNATURE_ALGORITHM);    sig.initVerify(publicKey);    sig.update(signedData.getBytes());    if (!sig.verify(signatureBytes)) {      Log.e(TAG,"Signature verification failed.");      return false;    }    return true;  } catch (  NoSuchAlgorithmException e) {    Log.e(TAG,"NoSuchAlgorithmException.");  }catch (  InvalidKeyException e) {    Log.e(TAG,"Invalid key specification.");  }catch (  SignatureException e) {    Log.e(TAG,"Signature exception.");  }  return false;}  }
class C{  protected void normalizeAndPrint(String s,boolean isAttValue){  int len=(s != null) ? s.length() : 0;  for (int i=0; i < len; i++) {    char c=s.charAt(i);    normalizeAndPrint(c,isAttValue);  }}  }
class C{  public void testValueOfDoublePos2(){  double a=12321237576.98788767;  BigDecimal result=BigDecimal.valueOf(a);  String res="12321237576.987888";  int resScale=6;  assertEquals("incorrect value",res,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public AxesWalker(LocPathIterator locPathIterator,int axis){  super(locPathIterator);  m_axis=axis;}  }
class C{  public void notifyObservers(){  notifyObservers(null);}  }
class C{  public static SearchResultEntry newSearchResultEntry(final String... ldifLines){  return newSearchResultEntry(new LinkedHashMapEntry(ldifLines));}  }
class C{  static String guidToDN(String guid){  return guid;}  }
class C{  private ByteString normalizedSingleValue(){  if (normalizedValue == null) {    normalizedValue=normalizeValue(this,value);  }  return normalizedValue;}  }
class C{  private void tryNotify(final CSN oldestCSNBefore){  if (mightMoveForwardMediumConsistencyPoint(oldestCSNBefore)) {synchronized (this) {      notify();    }  }}  }
class C{  public Cursor fetch(long id){  Cursor mCursor=database.query(true,DATABASE_TABLE,KEYS,KEY_ID + "=" + id,null,null,null,null,null);  if (mCursor != null) {    mCursor.moveToFirst();  }  return mCursor;}  }
class C{  public boolean isSatisfied(){  return satisfied;}  }
class C{  private void positionClockAndNotifications(){  boolean animate=mStackScroller.isAddOrRemoveAnimationPending();  int stackScrollerPadding=0;  int bottom=mHeader.getCollapsedHeight();  stackScrollerPadding=bottom + mScrollLayoutPeekHeight + mNotificationTopPadding;  mTopPaddingAdjustment=0;  mStackScroller.setIntrinsicPadding(stackScrollerPadding);  requestScrollerTopPaddingUpdate(animate);}  }
class C{  @Inject public OpenIDConnectProviderConfiguration(OAuth2ProviderSettingsFactory providerSettingsFactory,OAuth2UrisFactory urisFactory){  this.providerSettingsFactory=providerSettingsFactory;  this.urisFactory=urisFactory;}  }
class C{  public ObjectFactory(){  super(grammarInfo);}  }
class C{  public DecimalStyle withNegativeSign(char negativeSign){  if (negativeSign == this.negativeSign) {    return this;  }  return new DecimalStyle(zeroDigit,positiveSign,negativeSign,decimalSeparator);}  }
class C{  public void record(String msg){  if (statsState > Stats.OFF) {    formatAndWrite(null,msg);  }}  }
class C{  public boolean isPasswordExpired(){  refreshIfUndefined(isPasswordExpired);  return isPasswordExpired == ConditionResult.TRUE;}  }
class C{  public FrameBodyTIPL(FrameBodyIPLS body){  setObjectValue(DataTypes.OBJ_TEXT_ENCODING,body.getTextEncoding());  setObjectValue(DataTypes.OBJ_TEXT,body.getPairing());}  }
class C{  public void testDoubleValuePositiveInfinity1(){  byte[] a={-1,-1,-1,-1,-1,-1,-1,-8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  int aSign=1;  double aNumber=new BigInteger(aSign,a).doubleValue();  assertTrue(aNumber == Double.POSITIVE_INFINITY);}  }
class C{  public void close(){  try {synchronized (lock) {      if (out == null)       return;      out.close();      out=null;    }  } catch (  IOException x) {    trouble=true;  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.RSAKeyValueType createRSAKeyValueType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.RSAKeyValueTypeImpl();}  }
class C{  public Connection createConnection(String netType,String addrType,String addr,int ttl,int numAddrs) throws SdpException {  ConnectionField connectionImpl=new ConnectionField();  connectionImpl.setNetworkType(netType);  connectionImpl.setAddressType(addrType);  connectionImpl.setAddress(addr);  return connectionImpl;}  }
class C{  public boolean isNotifyListeners(){  return notifyListeners;}  }
class C{  public void start(int restartableId){  stop(restartableId);  requested.add(restartableId);  restartableSubscriptions.put(restartableId,restartables.get(restartableId).call());}  }
class C{  public static void filterCipherSuites(List<CipherSuite> cipherSuites){  KeyExchangeAlgorithm algorithm=AlgorithmResolver.getKeyExchangeAlgorithm(cipherSuites.get(0));  boolean ephemeral=cipherSuites.get(0).isEphemeral();  for (int i=cipherSuites.size() - 1; i > 0; i--) {    CipherSuite cs=cipherSuites.get(i);    if (AlgorithmResolver.getKeyExchangeAlgorithm(cs) != algorithm || cs.isEphemeral() != ephemeral) {      cipherSuites.remove(i);    }  }}  }
class C{  private SOAPResponseObject call(String message,String cookies) throws Exception {  if (debug.messageEnabled()) {    debug.message("SOAP Client: Message being sent:" + message);  }  String url=null;  InputStream in_buf=null;  boolean done=false;  boolean isException=false;  int urlIndex=0;  while (!done) {    if (url == null) {      if (urls != null) {        if (urlIndex >= urls.length) {          if (debug.warningEnabled()) {            debug.warning("SOAPClient: No vaild server found");          }          throw (new RemoteException("no-server-found"));        }        url=urls[urlIndex++];      } else {        boolean validServerFound=false;        try {          if ((url=JAXRPCHelper.getValidURL(serviceName)) != null) {            validServerFound=true;            setURL(url);          }        } catch (        RemoteException re) {        }        if (!validServerFound) {          if (++urlIndex > 3) {            debug.error("SOAPClient::call() no valid servers");            throw (new RemoteException("no-server-found"));          }          try {            Thread.sleep(1000);          } catch (          InterruptedException ie) {          }          continue;        }      }    }    URL endpoint=new URL(url);    HttpURLConnection connection=HttpURLConnectionManager.getConnection(endpoint);    connection.setDoOutput(true);    connection.setRequestMethod("POST");    connection.setRequestProperty("Content-Type","text/xml; charset=\"utf-8\"");    connection.setRequestProperty("SOAPAction","\"\"");    if (cookies != null) {      connection.setRequestProperty("Cookie",cookies);    }    String userInfo=endpoint.getUserInfo();    if (userInfo != null) {      connection.setRequestProperty("Authorization","Basic " + Base64.encode(userInfo.getBytes("UTF-8")));    }    byte[] data=message.getBytes("UTF-8");    int requestLength=data.length;    connection.setRequestProperty("Content-Length",Integer.toString(requestLength));    OutputStream out=null;    try {      out=connection.getOutputStream();    } catch (    ConnectException ce) {      if (debug.warningEnabled()) {        debug.warning("SOAP Client: Connection Exception: " + url,ce);      }      JAXRPCHelper.serverFailed(url);      url=null;      continue;    }    out.write(data);    out.flush();    try {      in_buf=connection.getInputStream();    } catch (    IOException ioe) {      if (debug.messageEnabled()) {        debug.message("SOAP Client: READ Exception",ioe);      }      in_buf=connection.getErrorStream();      isException=true;    } finally {      done=true;    }  }  if (debug.messageEnabled()) {    StringBuffer inbuf=new StringBuffer();    String line;    BufferedReader reader=new BufferedReader(new InputStreamReader(in_buf,"UTF-8"));    while ((line=reader.readLine()) != null) {      inbuf.append(line).append("\n");    }    String data=new String(inbuf);    debug.message("SOAP Client: Input: " + message + "\nOutput: "+ data);    in_buf=new ByteArrayInputStream(data.getBytes("UTF-8"));  }  return (new SOAPResponseObject(in_buf,isException));}  }
class C{  void cellToCenterPoint(int cellX,int cellY,int[] result){  regionToCenterPoint(cellX,cellY,1,1,result);}  }
class C{  protected void StringExpr() throws javax.xml.transform.TransformerException {  int opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  appendOp(2,OpCodes.OP_STRING);  Expr();  m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);}  }
class C{  public FrameBodyWCOM(){}  }
class C{  public AVTPartXPath(String val,org.apache.xml.utils.PrefixResolver nsNode,XPathParser xpathProcessor,XPathFactory factory,XPathContext liaison) throws javax.xml.transform.TransformerException {  m_xpath=new XPath(val,null,nsNode,XPath.SELECT,liaison.getErrorListener());}  }
class C{  public synchronized BukkitTask runTaskTimerAsynchronously(Plugin plugin,long delay,long period) throws IllegalArgumentException, IllegalStateException {  checkState();  return setupId(Bukkit.getScheduler().runTaskTimerAsynchronously(plugin,(Runnable)this,delay,period));}  }
class C{  public LazyMetadataValue(Plugin owningPlugin,Callable<Object> lazyValue){  this(owningPlugin,CacheStrategy.CACHE_AFTER_FIRST_EVAL,lazyValue);}  }
class C{  public void testZeroOne(){  BigInteger aNumber=BigInteger.ZERO;  BigInteger bNumber=BigInteger.ONE;  BigInteger result=aNumber.and(bNumber);  assertTrue(result.equals(BigInteger.ZERO));  assertEquals("incorrect sign",0,result.signum());}  }
class C{  @CallSuper public void onSupportActionModeStarted(ActionMode mode){}  }
class C{  private boolean askForAuthenticationIfNeeded(UninstallUserData userData) throws UserDataException, ClientException {  boolean accepted=true;  String uid=userData.getAdminUID();  String pwd=userData.getAdminPwd();  boolean couldConnect=false;  while (!couldConnect && accepted) {    SecureConnectionCliArgs secureArgsList=parser.getSecureArgsList();    StringArgument hostNameArg=secureArgsList.getHostNameArg();    hostNameArg.setPresent(true);    hostNameArg.clearValues();    hostNameArg.addValue(hostNameArg.getDefaultValue());    IntegerArgument portArg=secureArgsList.getPortArg();    portArg.setPresent(true);    portArg.clearValues();    portArg.addValue(portArg.getDefaultValue());    StringArgument bindDnArg=secureArgsList.getBindDnArg();    bindDnArg.clearValues();    if (uid != null) {      bindDnArg.addValue(ADSContext.getAdministratorDN(uid).toString());      bindDnArg.setPresent(true);    } else {      bindDnArg.setPresent(false);    }    StringArgument bindPasswordArg=secureArgsList.getBindPasswordArg();    bindPasswordArg.clearValues();    if (pwd != null) {      bindPasswordArg.addValue(pwd);      bindPasswordArg.setPresent(true);    } else {      bindPasswordArg.setPresent(false);    }    if (ci == null) {      ci=new LDAPConnectionConsoleInteraction(this,parser.getSecureArgsList());      ci.setDisplayLdapIfSecureParameters(true);    }    try {      ci.run(false);      userData.setAdminUID(ci.getAdministratorUID());      userData.setAdminPwd(ci.getBindPassword());      info.setConnectionPolicy(ConnectionProtocolPolicy.USE_ADMIN);      HostPort adminConnectorHostPort=info.getAdminConnectorHostPort();      if (adminConnectorHostPort == null) {        logger.warn(LocalizableMessage.raw("Error retrieving a valid Administration Connector URL in conf file."));        LocalizableMessage msg=ERR_COULD_NOT_FIND_VALID_LDAPURL.get();        throw new ClientException(ReturnCode.APPLICATION_ERROR,msg);      }      int port=adminConnectorHostPort.getPort();      portArg.clearValues();      portArg.addValue(String.valueOf(port));      ci.setPortNumber(port);      updateTrustManager(userData,ci);      info.setConnectionPolicy(ConnectionProtocolPolicy.USE_ADMIN);      adminConnectorHostPort=info.getAdminConnectorHostPort();      if (adminConnectorHostPort == null) {        logger.warn(LocalizableMessage.raw("Error retrieving a valid Administration Connector URL in conf file."));        LocalizableMessage msg=ERR_COULD_NOT_FIND_VALID_LDAPURL.get();        throw new ClientException(ReturnCode.APPLICATION_ERROR,msg);      }      userData.setLocalServer(adminConnectorHostPort,true);      couldConnect=true;    } catch (    ArgumentException e) {      parser.displayMessageAndUsageReference(getErrStream(),e.getMessageObject());    }catch (    ClientException e) {      printErrorMessage(e.getMessageObject());      println();    }    if (!couldConnect) {      try {        accepted=promptToProvideAuthenticationAgain();        if (accepted) {          uid=null;          pwd=null;        }      } catch (      ClientException ce) {        throw new UserDataException(null,ce.getMessageObject(),ce);      }    }  }  if (accepted) {    String referencedHostName=parser.getReferencedHostName();    while (referencedHostName == null) {      println();      referencedHostName=askForReferencedHostName(userData.getHostName());    }    try {      UninstallData d=new UninstallData(Installation.getLocal());      userData.setReplicationServer(new HostPort(referencedHostName,d.getReplicationServerPort()));      userData.setReferencedHostName(referencedHostName);    } catch (    Throwable t) {      logger.error(LocalizableMessage.raw("Could not create UninstallData: " + t,t));    }  }  userData.setUpdateRemoteReplication(accepted);  return accepted;}  }
class C{  public synchronized boolean isPropagated(){  return propagatedFrom != null;}  }
class C{  protected void activateFrame(JInternalFrame f){  getDesktopManager().activateFrame(f);}  }
class C{  public InvalidDescriptionException(){  super("Invalid plugin.yml");}  }
class C{  public AssignableDynamicGroup(CreationTemplate template,AttrSet attrSet,Guid baseGuid,int scope) throws UMSException {  super(template,attrSet);  setUrl(baseGuid,null,SearchScope.valueOf(scope));}  }
class C{  @Override public String toString(){  String s=null;  try {    s=toJSONObject().toString(2);  } catch (  JSONException e) {    PrivilegeManager.debug.error("AttributeLookupCondition.setState",e);  }  return s;}  }
class C{  @Override public void service(ServletRequest req,ServletResponse res) throws ServletException, IOException {  HttpServletRequest request;  HttpServletResponse response;  try {    request=(HttpServletRequest)req;    response=(HttpServletResponse)res;  } catch (  ClassCastException e) {    throw new ServletException("non-HTTP request or response");  }  service(request,response);}  }
class C{  private void prepareReadersAndWriters(){  readers.put(SupportedFileFormat.OGG.getFilesuffix(),new OggFileReader());  readers.put(SupportedFileFormat.FLAC.getFilesuffix(),new FlacFileReader());  readers.put(SupportedFileFormat.MP3.getFilesuffix(),new MP3FileReader());  readers.put(SupportedFileFormat.MP4.getFilesuffix(),new Mp4FileReader());  readers.put(SupportedFileFormat.M4A.getFilesuffix(),new Mp4FileReader());  readers.put(SupportedFileFormat.M4P.getFilesuffix(),new Mp4FileReader());  readers.put(SupportedFileFormat.M4B.getFilesuffix(),new Mp4FileReader());  readers.put(SupportedFileFormat.WAV.getFilesuffix(),new WavFileReader());  readers.put(SupportedFileFormat.WMA.getFilesuffix(),new AsfFileReader());  readers.put(SupportedFileFormat.AIF.getFilesuffix(),new AiffFileReader());  final RealFileReader realReader=new RealFileReader();  readers.put(SupportedFileFormat.RA.getFilesuffix(),realReader);  readers.put(SupportedFileFormat.RM.getFilesuffix(),realReader);  writers.put(SupportedFileFormat.OGG.getFilesuffix(),new OggFileWriter());  writers.put(SupportedFileFormat.FLAC.getFilesuffix(),new FlacFileWriter());  writers.put(SupportedFileFormat.MP3.getFilesuffix(),new MP3FileWriter());  writers.put(SupportedFileFormat.MP4.getFilesuffix(),new Mp4FileWriter());  writers.put(SupportedFileFormat.M4A.getFilesuffix(),new Mp4FileWriter());  writers.put(SupportedFileFormat.M4P.getFilesuffix(),new Mp4FileWriter());  writers.put(SupportedFileFormat.M4B.getFilesuffix(),new Mp4FileWriter());  writers.put(SupportedFileFormat.WAV.getFilesuffix(),new WavFileWriter());  writers.put(SupportedFileFormat.WMA.getFilesuffix(),new AsfFileWriter());  Iterator<AudioFileWriter> it=writers.values().iterator();  for (  AudioFileWriter curr : writers.values()) {    curr.setAudioFileModificationListener(this.modificationHandler);  }}  }
class C{  public void transform(Source source,boolean shouldRelease) throws TransformerException {  try {    if (getXPathContext().getNamespaceContext() == null) {      getXPathContext().setNamespaceContext(getStylesheet());    }    String base=source.getSystemId();    if (null == base) {      base=m_stylesheetRoot.getBaseIdentifier();    }    if (null == base) {      String currentDir="";      try {        currentDir=System.getProperty("user.dir");      } catch (      SecurityException se) {      }      if (currentDir.startsWith(java.io.File.separator))       base="file://" + currentDir; else       base="file:///" + currentDir;      base=base + java.io.File.separatorChar + source.getClass().getName();    }    setBaseURLOfSource(base);    DTMManager mgr=m_xcontext.getDTMManager();    if ((source instanceof StreamSource && source.getSystemId() == null && ((StreamSource)source).getInputStream() == null && ((StreamSource)source).getReader() == null) || (source instanceof SAXSource && ((SAXSource)source).getInputSource() == null && ((SAXSource)source).getXMLReader() == null) || (source instanceof DOMSource && ((DOMSource)source).getNode() == null)) {      try {        DocumentBuilderFactory builderF=DocumentBuilderFactory.newInstance();        DocumentBuilder builder=builderF.newDocumentBuilder();        String systemID=source.getSystemId();        source=new DOMSource(builder.newDocument());        if (systemID != null) {          source.setSystemId(systemID);        }      } catch (      ParserConfigurationException e) {        fatalError(e);      }    }    DTM dtm=mgr.getDTM(source,false,this,true,true);    dtm.setDocumentBaseURI(base);    boolean hardDelete=true;    try {      this.transformNode(dtm.getDocument());    }  finally {      if (shouldRelease)       mgr.release(dtm,hardDelete);    }    Exception e=getExceptionThrown();    if (null != e) {      if (e instanceof javax.xml.transform.TransformerException) {        throw (javax.xml.transform.TransformerException)e;      } else       if (e instanceof org.apache.xml.utils.WrappedRuntimeException) {        fatalError(((org.apache.xml.utils.WrappedRuntimeException)e).getException());      } else {        throw new javax.xml.transform.TransformerException(e);      }    } else     if (null != m_serializationHandler) {      m_serializationHandler.endDocument();    }  } catch (  org.apache.xml.utils.WrappedRuntimeException wre) {    Throwable throwable=wre.getException();    while (throwable instanceof org.apache.xml.utils.WrappedRuntimeException) {      throwable=((org.apache.xml.utils.WrappedRuntimeException)throwable).getException();    }    fatalError(throwable);  }catch (  org.xml.sax.SAXParseException spe) {    fatalError(spe);  }catch (  org.xml.sax.SAXException se) {    m_errorHandler.fatalError(new TransformerException(se));  } finally {    m_hasTransformThreadErrorCatcher=false;    reset();  }}  }
class C{  public void ensureCapacity(int minCapacity){  int minExpand=(elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA) ? 0 : DEFAULT_CAPACITY;  if (minCapacity > minExpand) {    ensureExplicitCapacity(minCapacity);  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.security.ValidityRestrictionConditionElement createValidityRestrictionConditionElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.security.impl.ValidityRestrictionConditionElementImpl();}  }
class C{  private void loadElementDataIntoBuffer(Element elem,StringBuilder buffer){  AttributeSet attr=elem.getAttributes();  String name=(String)attr.getAttribute(HTML.Attribute.NAME);  if (name == null) {    return;  }  String value=null;  HTML.Tag tag=(HTML.Tag)elem.getAttributes().getAttribute(StyleConstants.NameAttribute);  if (tag == HTML.Tag.INPUT) {    value=getInputElementData(attr);  } else   if (tag == HTML.Tag.TEXTAREA) {    value=getTextAreaData(attr);  } else   if (tag == HTML.Tag.SELECT) {    loadSelectData(attr,buffer);  }  if (name != null && value != null) {    appendBuffer(buffer,name,value);  }}  }
class C{  public void logError(String message){  logger.error(message);}  }
class C{  @Override public long skip(long ln) throws IOException {  try {    return in.skip(ln);  } catch (  IOException e) {    handleIOException(e);    return 0;  }}  }
class C{  protected void startPoolMaintenance(){  if (connectionPool != null && timeBetweenEvictionRunsMillis > 0) {    connectionPool.setTimeBetweenEvictionRunsMillis(timeBetweenEvictionRunsMillis);  }}  }
class C{  public void testCertPathValidator08() throws NoSuchAlgorithmException {  if (!PKIXSupport) {    fail(NotSupportMsg);    return;  }  Provider prov=null;  for (int t=0; t < validValues.length; t++) {    try {      CertPathValidator.getInstance(validValues[t],prov);      fail("IllegalArgumentException must be thrown");    } catch (    IllegalArgumentException e1) {    }  }}  }
class C{  public static boolean isValidIfd(int ifdId){  return ifdId == IfdId.TYPE_IFD_0 || ifdId == IfdId.TYPE_IFD_1 || ifdId == IfdId.TYPE_IFD_EXIF || ifdId == IfdId.TYPE_IFD_INTEROPERABILITY || ifdId == IfdId.TYPE_IFD_GPS;}  }
class C{  @Override public int hashCode(){  int result=1;  for (int i=0; i < vals.length; i++)   result=31 * result + Float.floatToIntBits(vals[i]);  return result;}  }
class C{  public long longValue(){  if (val instanceof Long || val instanceof Integer) {    return val.longValue();  }  return (long)(val.doubleValue());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_documentcreateattribute.class,args);}  }
class C{  public Connection next(String method) throws IOException {  for (Connection pooled; (pooled=pool.get(address)) != null; ) {    if (method.equals("GET") || pooled.isReadable())     return pooled;    pooled.close();  }  if (!hasNextTlsMode()) {    if (!hasNextInetSocketAddress()) {      if (!hasNextProxy()) {        if (!hasNextPostponed()) {          throw new NoSuchElementException();        }        return new Connection(nextPostponed());      }      lastProxy=nextProxy();      resetNextInetSocketAddress(lastProxy);    }    lastInetSocketAddress=nextInetSocketAddress();    resetNextTlsMode();  }  boolean modernTls=nextTlsMode() == TLS_MODE_MODERN;  Route route=new Route(address,lastProxy,lastInetSocketAddress,modernTls);  if (routeDatabase.shouldPostpone(route)) {    postponedRoutes.add(route);    return next(method);  }  return new Connection(route);}  }
class C{  public FrameBodyRVA2(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  public String decode(String value) throws DecoderException {  if (value == null) {    return null;  }  try {    return decodeText(value);  } catch (  UnsupportedEncodingException e) {    throw new DecoderException(e.getMessage());  }}  }
class C{  private static final int compare(CharChunk name,int start,int end,String compareTo){  int result=0;  char[] c=name.getBuffer();  int len=compareTo.length();  if ((end - start) < len) {    len=end - start;  }  for (int i=0; (i < len) && (result == 0); i++) {    if (c[i + start] > compareTo.charAt(i)) {      result=1;    } else     if (c[i + start] < compareTo.charAt(i)) {      result=-1;    }  }  if (result == 0) {    if (compareTo.length() > (end - start)) {      result=-1;    } else     if (compareTo.length() < (end - start)) {      result=1;    }  }  return result;}  }
class C{  public static List<HttpCookie> parse(String header){  return new CookieParser(header).parse();}  }
class C{  public SoapSTSServerCryptoStateBuilder signatureKeyPassword(String signatureKeyPassword){  this.signatureKeyPassword=signatureKeyPassword;  return this;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.RelayStateElement createRelayStateElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.RelayStateElementImpl();}  }
class C{  public void schemaChanged(String serviceName,String version){  if (debug.messageEnabled()) {    debug.message("ServiceListenerImpl.schemaChanged: service = " + serviceName);  }  ConfigurationActionEvent caevent=new ConfigurationActionEventImpl(ConfigurationActionEvent.MODIFIED,null,componentName,null);  configListener.configChanged(caevent);}  }
class C{  public AlreadyRegisteredException(String msg){  super(msg);  fillInStackTrace();}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.WssX509PkiPathV1Token11Element createWssX509PkiPathV1Token11Element() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.WssX509PkiPathV1Token11ElementImpl();}  }
class C{  public void testAlgorithmParameterGenerator10() throws NoSuchAlgorithmException {  if (!DSASupported) {    fail(validAlgName + " algorithm is not supported");    return;  }  AlgorithmParameterGenerator apg=AlgorithmParameterGenerator.getInstance(validAlgName);  apg.init(512);  AlgorithmParameters ap=apg.generateParameters();  assertEquals("Incorrect algorithm",ap.getAlgorithm().toUpperCase(),apg.getAlgorithm().toUpperCase());}  }
class C{  @Override public void onInflate(final Activity activity,final AttributeSet attrs,final Bundle savedInstanceState){  delegate.onInflate(activity,attrs,savedInstanceState);}  }
class C{  public static boolean verify(String queryString,Set<X509Certificate> verificationCerts) throws SAML2Exception {  String classMethod="QuerySignatureUtil.verify: ";  if (queryString == null || queryString.length() == 0 || verificationCerts.isEmpty()) {    SAML2Utils.debug.error(classMethod + "Input query string or certificate is null");    throw new SAML2Exception(SAML2Utils.bundle.getString("nullInput"));  }  if (SAML2Utils.debug.messageEnabled()) {    SAML2Utils.debug.message(classMethod + "Query string to be verifed:\n" + queryString);  }  StringTokenizer st=new StringTokenizer(queryString,"&");  String token=null;  String samlReq=null;  String samlRes=null;  String relay=null;  String sigAlg=null;  String encSig=null;  while (st.hasMoreTokens()) {    token=st.nextToken();    if (token.startsWith(SAML2Constants.SAML_REQUEST)) {      samlReq=token;    } else     if (token.startsWith(SAML2Constants.SAML_RESPONSE)) {      samlRes=token;    } else     if (token.startsWith(SAML2Constants.RELAY_STATE)) {      relay=token;    } else     if (token.startsWith(SAML2Constants.SIG_ALG)) {      sigAlg=token;    } else     if (token.startsWith(SAML2Constants.SIGNATURE)) {      encSig=token;    }  }  if (sigAlg == null || sigAlg.equals("")) {    SAML2Utils.debug.error(classMethod + "Null SigAlg query parameter.");    throw new SAML2Exception(SAML2Utils.bundle.getString("nullSigAlg"));  }  if (encSig == null || encSig.equals("")) {    SAML2Utils.debug.error(classMethod + "Null Signature query parameter.");    throw new SAML2Exception(SAML2Utils.bundle.getString("nullSig"));  }  String newQueryString=null;  if (samlReq != null) {    newQueryString=samlReq;  } else {    newQueryString=samlRes;  }  if (relay != null) {    newQueryString+="&" + relay;  }  newQueryString+="&" + sigAlg;  if (SAML2Utils.debug.messageEnabled()) {    SAML2Utils.debug.message(classMethod + "Query string to be verifed (re-arranged):\n" + newQueryString);  }  int sigAlgValueIndex=sigAlg.indexOf('=');  String sigAlgValue=sigAlg.substring(sigAlgValueIndex + 1);  if (sigAlgValue == null || sigAlgValue.equals("")) {    SAML2Utils.debug.error(classMethod + "Null SigAlg query parameter value.");    throw new SAML2Exception(SAML2Utils.bundle.getString("nullSigAlg"));  }  sigAlgValue=URLEncDec.decode(sigAlgValue);  if (SAML2Utils.debug.messageEnabled()) {    SAML2Utils.debug.message(classMethod + "SigAlg query parameter value: " + sigAlgValue);  }  int encSigValueIndex=encSig.indexOf('=');  String encSigValue=encSig.substring(encSigValueIndex + 1);  if (encSigValue == null || encSigValue.equals("")) {    SAML2Utils.debug.message(classMethod + "Null Signature query parameter value.");    throw new SAML2Exception(SAML2Utils.bundle.getString("nullSig"));  }  encSigValue=URLEncDec.decode(encSigValue);  if (SAML2Utils.debug.messageEnabled()) {    SAML2Utils.debug.message(classMethod + "Signature query parameter value:\n" + encSigValue);  }  byte[] signature=null;  Base64 decoder=new Base64();  signature=decoder.decode(encSigValue);  if (!SIGNATURE.equals(JCEMapper.getAlgorithmClassFromURI(sigAlgValue))) {    SAML2Utils.debug.error(classMethod + "Signature algorithm " + sigAlgValue+ " is not supported.");    throw new SAML2Exception(SAML2Utils.bundle.getString("algNotSupported"));  }  Signature sig;  try {    sig=Signature.getInstance(JCEMapper.translateURItoJCEID(sigAlgValue));  } catch (  NoSuchAlgorithmException nsae) {    throw new SAML2Exception(nsae);  }  return isValidSignature(sig,verificationCerts,newQueryString.getBytes(),signature);}  }
class C{  public static void handleThrowable(Throwable t){  if (t instanceof ThreadDeath) {    throw (ThreadDeath)t;  }  if (t instanceof StackOverflowError) {    return;  }  if (t instanceof VirtualMachineError) {    throw (VirtualMachineError)t;  }}  }
class C{  public SelectSubjectTypeViewBean(){  super("SelectSubjectType",DEFAULT_DISPLAY_URL);}  }
class C{  private void doTerminationInitiation(HttpServletRequest request,HttpServletResponse response,ProviderDescriptorType hostedProviderDesc,BaseConfigType hostedConfig,String realm,String hostedEntityId,String hostedRole,String providerAlias){  FSUtils.debug.message("Entered FSTerminationInitiationServlet::doTerminationInitiation");  try {    Object ssoToken=getValidToken(request);    if (ssoToken != null) {      String remoteEntityId=request.getParameter(IFSConstants.TERMINATION_PROVIDER_ID);      if (remoteEntityId == null || remoteEntityId.length() < 1) {        FSUtils.debug.error("Provider Id not found, display error page");        FSServiceUtils.showErrorPage(response,commonErrorPage,IFSConstants.TERMINATION_NO_PROVIDER,IFSConstants.CONTACT_ADMIN);        return;      }      FSServiceManager instSManager=FSServiceManager.getInstance();      if (instSManager != null) {        FSUtils.debug.message("FSServiceManager Instance not null");        String remoteProviderRole=IFSConstants.SP;        FSAccountFedInfo fedinfo=null;        if (hostedRole.equalsIgnoreCase(IFSConstants.SP)) {          remoteProviderRole=IFSConstants.IDP;          FSSessionManager sessManager=FSSessionManager.getInstance(providerAlias);          FSSession ssoSession=sessManager.getSession(ssoToken);          if (ssoSession != null) {            if (!ssoSession.getOneTime()) {              fedinfo=ssoSession.getAccountFedInfo();            }          }        }        FSFedTerminationHandler handlerObj=instSManager.getFedTerminationHandler(remoteEntityId,remoteProviderRole,SessionManager.getProvider().getPrincipalName(ssoToken),realm,hostedEntityId,providerAlias);        if (handlerObj != null) {          handlerObj.setHostedDescriptor(hostedProviderDesc);          handlerObj.setHostedDescriptorConfig(hostedConfig);          handlerObj.setHostedProviderRole(hostedRole);          handlerObj.setMetaAlias(providerAlias);          handlerObj.setRealm(realm);          handlerObj.setHostedEntityId(hostedEntityId);          if (fedinfo != null) {            handlerObj.setAccountInfo(fedinfo);          }          boolean bStatus=handlerObj.handleFederationTermination(request,response,ssoToken);          if (FSUtils.debug.messageEnabled()) {            FSUtils.debug.message("handleFederationTermination status is : " + bStatus);          }          return;        } else {          if (FSUtils.debug.messageEnabled()) {            FSUtils.debug.message("Unable to get termination " + "handler. User account Not valid");          }        }      } else {        FSUtils.debug.message("FSServiceManager Instance null");      }      FSServiceUtils.returnLocallyAfterOperation(response,termDoneURL,false,IFSConstants.TERMINATION_SUCCESS,IFSConstants.TERMINATION_FAILURE);      return;    } else {      FSServiceUtils.redirectForAuthentication(request,response,providerAlias);      return;    }  } catch (  IOException e) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("IOException in doTerminationInitiation",e);    }  }catch (  SessionException ex) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("SessionException in doTerminationInitiation",ex);    }  }  FSServiceUtils.returnLocallyAfterOperation(response,termDoneURL,false,IFSConstants.TERMINATION_SUCCESS,IFSConstants.TERMINATION_FAILURE);  return;}  }
class C{  private void deploy(){  if (host.getLogger().isDebugEnabled())   host.getLogger().debug(sm.getString("userConfig.deploying"));  UserDatabase database=null;  try {    Class<?> clazz=Class.forName(userClass);    database=(UserDatabase)clazz.newInstance();    database.setUserConfig(this);  } catch (  Exception e) {    host.getLogger().error(sm.getString("userConfig.database"),e);    return;  }  ExecutorService executor=host.getStartStopExecutor();  List<Future<?>> results=new ArrayList<>();  Enumeration<String> users=database.getUsers();  while (users.hasMoreElements()) {    String user=users.nextElement();    if (!isDeployAllowed(user))     continue;    String home=database.getHome(user);    results.add(executor.submit(new DeployUserDirectory(this,user,home)));  }  for (  Future<?> result : results) {    try {      result.get();    } catch (    Exception e) {      host.getLogger().error(sm.getString("userConfig.deploy.threaded.error"),e);    }  }}  }
class C{  public SMethodDef findMethodWithSameSignature(SMethodDef method,List<SMethodDef> methodList,boolean onlyCheckSignature) throws SyntaxException {  outer:   for (  SMethodDef m : methodList) {    if (m.name().equals(method.name())) {      if (m.getParameters().size() == method.getParameters().size()) {        for (int i=0; i < m.getParameters().size(); ++i) {          SParameter p=m.getParameters().get(i);          SParameter param=method.getParameters().get(i);          if (!p.type().equals(param.type())) {            continue outer;          }        }        if (!onlyCheckSignature) {          if (m.modifiers().contains(SModifier.PRIVATE))           continue;          if ((m.modifiers().contains(SModifier.PUBLIC) && !method.modifiers().contains(SModifier.PUBLIC)) || (m.modifiers().contains(SModifier.PROTECTED) && !m.modifiers().contains(SModifier.PUBLIC) && !m.modifiers().contains(SModifier.PROTECTED)) || (!m.modifiers().contains(SModifier.PUBLIC) && !m.modifiers().contains(SModifier.PROTECTED) && !m.modifiers().contains(SModifier.PRIVATE)&& (method.modifiers().contains(SModifier.PRIVATE) || !m.declaringType().pkg().equals(method.declaringType().pkg())))) {            err.SyntaxException(method + " cannot override " + m,method.line_col());            return null;          }          if (!m.getReturnType().isAssignableFrom(method.getReturnType()) && !method.getReturnType().isAssignableFrom(m.getReturnType())) {            err.SyntaxException(m + " return type should be assignable from " + method+ " 's",method.line_col());            return null;          }        }        return m;      }    }  }  return null;}  }
class C{  public EntryMsg(int serverID,int destination,byte[] entryBytes,int msgId){  this(serverID,destination,entryBytes,0,entryBytes.length,msgId);}  }
class C{  public Object clone(){  Paper newPaper;  try {    newPaper=(Paper)super.clone();  } catch (  CloneNotSupportedException e) {    e.printStackTrace();    newPaper=null;  }  return newPaper;}  }
class C{  public UserAttributeInfoBuilder(){  protectedUpdateAttributes=new HashSet<>();  validCreationAttributes=new HashSet<>();}  }
class C{  public void onStatusChanged(String provider,int status,Bundle extras){}  }
class C{  public void deleteChar(AttributedCharacterIterator newParagraph,int deletePos){  measurer.deleteChar(newParagraph,deletePos);  limit=newParagraph.getEndIndex();  pos=start=newParagraph.getBeginIndex();  charIter.reset(measurer.getChars(),start);  breakIter.setText(charIter);}  }
class C{  @Override public void write(char cbuf[],int off,int len) throws IOException {  ensureOpen();  if (bufferSize == 0) {    initOut();    out.write(cbuf,off,len);    return;  }  if ((off < 0) || (off > cbuf.length) || (len < 0)|| ((off + len) > cbuf.length)|| ((off + len) < 0)) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return;  }  if (len >= bufferSize) {    if (autoFlush)     flushBuffer(); else     bufferOverflow();    initOut();    out.write(cbuf,off,len);    return;  }  int b=off, t=off + len;  while (b < t) {    int d=min(bufferSize - nextChar,t - b);    System.arraycopy(cbuf,b,cb,nextChar,d);    b+=d;    nextChar+=d;    if (nextChar >= bufferSize)     if (autoFlush)     flushBuffer(); else     bufferOverflow();  }}  }
class C{  private void addLoginCallbackMessage(Callback[] callbacks,String appUserName,String appPassword) throws UnsupportedCallbackException {  for (int i=0; i < callbacks.length; i++) {    if (callbacks[i] instanceof NameCallback) {      NameCallback nameCallback=(NameCallback)callbacks[i];      nameCallback.setName(appUserName);    } else     if (callbacks[i] instanceof PasswordCallback) {      PasswordCallback pwdCallback=(PasswordCallback)callbacks[i];      pwdCallback.setPassword(appPassword.toCharArray());    }  }}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return execute(xctxt,xctxt.getCurrentNode());}  }
class C{  public void testScaleByPowerOfTen2(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=-13;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal result=aNumber.scaleByPowerOfTen(10);  String res="1.231212478987482988429808779810457634781384756794987E+74";  int resScale=-23;  assertEquals("incorrect value",res,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeappendchilddocfragment.class,args);}  }
class C{  public String encode(){  return headerName + COLON + SP+ encodeBody()+ NEWLINE;}  }
class C{  public KeySelectorException(String message,Throwable cause){  super(message);  this.cause=cause;}  }
class C{  public static String createSingleNode(String key,String val) throws ParserConfigurationException {  DocumentBuilder db=XMLUtils.getSafeDocumentBuilder(false);  Document doc=db.newDocument();  Element item=doc.createElement(key);  item.appendChild(doc.createTextNode(val));  return item.toString();}  }
class C{  public void insert_any(org.omg.CORBA.Any value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_any",_opsClass);  DynStructOperations $self=(DynStructOperations)$so.servant;  try {    $self.insert_any(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NamedNodeMap entities;  DocumentType docType;  Node retval;  Element elem;  doc=(Document)load("hc_staff",true);  docType=doc.getDoctype();  if (!(("text/html".equals(getContentType())))) {    assertNotNull("docTypeNotNull",docType);    entities=docType.getEntities();    assertNotNull("entitiesNotNull",entities);    elem=doc.createElement("br");    try {      retval=entities.setNamedItem(elem);      fail("throw_HIER_OR_NO_MOD_ERR");    } catch (    DOMException ex) {switch (ex.code) {case 3:        break;case 7:      break;default :    throw ex;}}}}  }
class C{  public void add(FilterMap filterMap){synchronized (lock) {    FilterMap results[]=Arrays.copyOf(array,array.length + 1);    results[array.length]=filterMap;    array=results;  }}  }
class C{  private void invokePostResponsePlugins(boolean workflowExecuted){  if (workflowExecuted) {    @SuppressWarnings("unchecked") List<LocalBackendModifyOperation> localOperations=(List<LocalBackendModifyOperation>)getAttachment(Operation.LOCALBACKENDOPERATIONS);    if (localOperations != null) {      for (      LocalBackendModifyOperation localOperation : localOperations) {        getPluginConfigManager().invokePostResponseModifyPlugins(localOperation);      }    }  } else {    getPluginConfigManager().invokePostResponseModifyPlugins(this);  }}  }
class C{  public int hashCode(){  if (hashCodeCache == 0) {    ensureCache();    hashCodeCache=textLine.hashCode();  }  return hashCodeCache;}  }
class C{  public boolean removeElement(Object obj){synchronized (nextTurn[containerNeeded - 1]) {    if (!nextTurn[containerNeeded - 1].remove(obj)) {      for (int i=(containerNeeded - 2); i >= 0; i--) {        if (nextTurn[i].remove(obj)) {          return true;        }      }    } else {      return true;    }  }synchronized (thisTurn) {    return thisTurn.remove(obj);  }}  }
class C{  public int addNodeInDocOrder(Node node,boolean test,XPathContext support){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));  int insertIndex=-1;  if (test) {    int size=size(), i;    for (i=size - 1; i >= 0; i--) {      Node child=(Node)elementAt(i);      if (child == node) {        i=-2;        break;      }      if (!DOM2Helper.isNodeAfter(node,child)) {        break;      }    }    if (i != -2) {      insertIndex=i + 1;      insertElementAt(node,insertIndex);    }  } else {    insertIndex=this.size();    boolean foundit=false;    for (int i=0; i < insertIndex; i++) {      if (this.item(i).equals(node)) {        foundit=true;        break;      }    }    if (!foundit)     addElement(node);  }  return insertIndex;}  }
class C{  @AfterClass public static void cleanupClass(){  try {    Misc.deleteDirectorySimple(scenario.getRepositoryLocation());  } catch (  Exception ignore) {    System.err.println("cannot remove " + scenario.getRepositoryLocation());  }}  }
class C{  public int readShort() throws IOException {  int k=readWord();  if (k > 0x7fff)   k-=0x10000;  return k;}  }
class C{  FontRegisterProvider(){  fontNames.put(FontConstants.COURIER.toLowerCase(),FontConstants.COURIER);  fontNames.put(FontConstants.COURIER_BOLD.toLowerCase(),FontConstants.COURIER_BOLD);  fontNames.put(FontConstants.COURIER_OBLIQUE.toLowerCase(),FontConstants.COURIER_OBLIQUE);  fontNames.put(FontConstants.COURIER_BOLDOBLIQUE.toLowerCase(),FontConstants.COURIER_BOLDOBLIQUE);  fontNames.put(FontConstants.HELVETICA.toLowerCase(),FontConstants.HELVETICA);  fontNames.put(FontConstants.HELVETICA_BOLD.toLowerCase(),FontConstants.HELVETICA_BOLD);  fontNames.put(FontConstants.HELVETICA_OBLIQUE.toLowerCase(),FontConstants.HELVETICA_OBLIQUE);  fontNames.put(FontConstants.HELVETICA_BOLDOBLIQUE.toLowerCase(),FontConstants.HELVETICA_BOLDOBLIQUE);  fontNames.put(FontConstants.SYMBOL.toLowerCase(),FontConstants.SYMBOL);  fontNames.put(FontConstants.TIMES_ROMAN.toLowerCase(),FontConstants.TIMES_ROMAN);  fontNames.put(FontConstants.TIMES_BOLD.toLowerCase(),FontConstants.TIMES_BOLD);  fontNames.put(FontConstants.TIMES_ITALIC.toLowerCase(),FontConstants.TIMES_ITALIC);  fontNames.put(FontConstants.TIMES_BOLDITALIC.toLowerCase(),FontConstants.TIMES_BOLDITALIC);  fontNames.put(FontConstants.ZAPFDINGBATS.toLowerCase(),FontConstants.ZAPFDINGBATS);  List<String> family;  family=new ArrayList<>();  family.add(FontConstants.COURIER);  family.add(FontConstants.COURIER_BOLD);  family.add(FontConstants.COURIER_OBLIQUE);  family.add(FontConstants.COURIER_BOLDOBLIQUE);  fontFamilies.put(FontConstants.COURIER.toLowerCase(),family);  family=new ArrayList<>();  family.add(FontConstants.HELVETICA);  family.add(FontConstants.HELVETICA_BOLD);  family.add(FontConstants.HELVETICA_OBLIQUE);  family.add(FontConstants.HELVETICA_BOLDOBLIQUE);  fontFamilies.put(FontConstants.HELVETICA.toLowerCase(),family);  family=new ArrayList<>();  family.add(FontConstants.SYMBOL);  fontFamilies.put(FontConstants.SYMBOL.toLowerCase(),family);  family=new ArrayList<>();  family.add(FontConstants.TIMES_ROMAN);  family.add(FontConstants.TIMES_BOLD);  family.add(FontConstants.TIMES_ITALIC);  family.add(FontConstants.TIMES_BOLDITALIC);  fontFamilies.put(FontConstants.TIMES.toLowerCase(),family);  fontFamilies.put(FontConstants.TIMES_ROMAN.toLowerCase(),family);  family=new ArrayList<>();  family.add(FontConstants.ZAPFDINGBATS);  fontFamilies.put(FontConstants.ZAPFDINGBATS.toLowerCase(),family);}  }
class C{  public void delete() throws IOException {  close();  fileSystem.deleteContents(directory);}  }
class C{  public void scrollPathToVisible(TreePath path){  if (path != null) {    makeVisible(path);    Rectangle bounds=getPathBounds(path);    if (bounds != null) {      scrollRectToVisible(bounds);      if (accessibleContext != null) {        ((AccessibleJTree)accessibleContext).fireVisibleDataPropertyChange();      }    }  }}  }
class C{  public byte[] wrap(byte[] in,int inOff,int inLen){  if (!forWrapping) {    throw new IllegalStateException("Not initialized for wrapping");  }  byte keyToBeWrapped[]=new byte[inLen];  System.arraycopy(in,inOff,keyToBeWrapped,0,inLen);  byte[] CKS=calculateCMSKeyChecksum(keyToBeWrapped);  byte[] WKCKS=new byte[keyToBeWrapped.length + CKS.length];  System.arraycopy(keyToBeWrapped,0,WKCKS,0,keyToBeWrapped.length);  System.arraycopy(CKS,0,WKCKS,keyToBeWrapped.length,CKS.length);  int blockSize=engine.getBlockSize();  if (WKCKS.length % blockSize != 0) {    throw new IllegalStateException("Not multiple of block length");  }  engine.init(true,paramPlusIV);  byte TEMP1[]=new byte[WKCKS.length];  for (int currentBytePos=0; currentBytePos != WKCKS.length; currentBytePos+=blockSize) {    engine.processBlock(WKCKS,currentBytePos,TEMP1,currentBytePos);  }  byte[] TEMP2=new byte[this.iv.length + TEMP1.length];  System.arraycopy(this.iv,0,TEMP2,0,this.iv.length);  System.arraycopy(TEMP1,0,TEMP2,this.iv.length,TEMP1.length);  byte[] TEMP3=reverse(TEMP2);  ParametersWithIV param2=new ParametersWithIV(this.param,IV2);  this.engine.init(true,param2);  for (int currentBytePos=0; currentBytePos != TEMP3.length; currentBytePos+=blockSize) {    engine.processBlock(TEMP3,currentBytePos,TEMP3,currentBytePos);  }  return TEMP3;}  }
class C{  public void removePropertyChangeListener(PropertyChangeListener listener){  super.removePropertyChangeListener(listener);}  }
class C{  @Override public void update(){  if (flagPoleHit) {    SpriteHandler.getCurrentCast().get(2).update();    if (SpriteHandler.getCurrentCast().get(2).getSpriteFrame() == null)     isReadyForRemoval=true;    return;  }  super.update();  if (super.getCollisionStatus()) {    if (!flagPoleHit) {      main.Main.energyImpact.play();      flagPoleHit=true;    }    super.dispose();    isReadyForRemoval=false;    SpriteHandler.getCurrentCast().get(2).update();  }}  }
class C{  public AndSubject(){  super();}  }
class C{  public IllegalClassFormatException(String s){  super(s);}  }
class C{  public void visitCode(){  if (mv != null) {    mv.visitCode();  }}  }
class C{  @Override public Call<GeocodingResponse> cloneCall(){  return getCall().clone();}  }
class C{  public void visitMethodInsn(int opcode,String owner,String name,String desc,boolean itf){  if (api < Opcodes.ASM5) {    if (itf != (opcode == Opcodes.INVOKEINTERFACE)) {      throw new IllegalArgumentException("INVOKESPECIAL/STATIC on interfaces require ASM 5");    }    visitMethodInsn(opcode,owner,name,desc);    return;  }  if (mv != null) {    mv.visitMethodInsn(opcode,owner,name,desc,itf);  }}  }
class C{  public static boolean isExistingStore(){  return isExistingStore;}  }
class C{  public boolean isConfigurationNode(BasicNode node){  if (node instanceof RootNode) {    return true;  }  if (node instanceof SuffixNode) {    DN dn=node.getDN();    return dn.equals(ADSContext.getAdministrationSuffixDN()) || dn.equals(DN.valueOf(ConfigConstants.DN_DEFAULT_SCHEMA_ROOT)) || dn.equals(DN.valueOf(ConfigConstants.DN_TASK_ROOT))|| dn.equals(DN.valueOf(ConfigConstants.DN_CONFIG_ROOT))|| dn.equals(DN.valueOf(ConfigConstants.DN_MONITOR_ROOT))|| dn.equals(DN.valueOf(ConfigConstants.DN_TRUST_STORE_ROOT))|| dn.equals(DN.valueOf(ConfigConstants.DN_BACKUP_ROOT))|| dn.equals(DN.valueOf(DN_EXTERNAL_CHANGELOG_ROOT));  } else {    BasicNode parentNode=(BasicNode)node.getParent();    return isConfigurationNode(parentNode);  }}  }
class C{  public PushNotificationException(String message){  super(message);}  }
class C{  public static int dip2px(Context context,float dpValue){  final float scale=context.getResources().getDisplayMetrics().density;  return (int)(dpValue * scale + 0.5f);}  }
class C{  @SuppressWarnings("unchecked") @Override public PdfString makeIndirect(PdfDocument document,PdfIndirectReference reference){  return (PdfString)super.makeIndirect(document,reference);}  }
class C{  boolean show(Container c,int x,int y,int w,int h){  return getPaintManager().show(c,x,y,w,h);}  }
class C{  public void clear(){  final Object[] items=this.items;  final ReentrantLock lock=this.lock;  lock.lock();  try {    int k=count;    if (k > 0) {      final int putIndex=this.putIndex;      int i=takeIndex;      do {        items[i]=null;        if (++i == items.length)         i=0;      } while (i != putIndex);      takeIndex=putIndex;      count=0;      if (itrs != null)       itrs.queueIsEmpty();      for (; k > 0 && lock.hasWaiters(notFull); k--)       notFull.signal();    }  }  finally {    lock.unlock();  }}  }
class C{  public void writeExpression(Expression oldExp){  Object oldValue=getValue(oldExp);  if (get(oldValue) != null) {    return;  }  bindings.put(oldValue,(Expression)cloneStatement(oldExp));  writeObject(oldValue);}  }
class C{  private void stopStreamingQuote(){  if (streamingQuoteStarted && websocketThread != null) {    websocketThread.stopWS();    try {      Thread.sleep(1000);    } catch (    InterruptedException e) {      System.out.println("ZStreamingQuoteControl.stopStreamingQuote(): ERROR: InterruptedException while sleeping");    }  }  if (ZStreamingConfig.isStreamingQuoteStoringRequired() && (streamingQuoteStorage != null)) {    streamingQuoteStorage.closeJDBCConn();  }}  }
class C{  public static ImmutableMap<String,InitValueConfig> createCollectionMap(MethodTransformerContext context){  ImmutableMap.Builder<String,InitValueConfig> mapBuilder=ImmutableMap.builder();  Map<String,String> fieldNamePatterns=context.getMethodConfig().getFieldNamePatterns();  for (  Map.Entry<String,String> fieldNamePattern : fieldNamePatterns.entrySet()) {    CollectionConfig collectionConfig=context.getCollectionConfig(fieldNamePattern.getValue());    String apiWrapperClassName=context.getNamer().getApiWrapperClassName(context.getInterface());    InitValueConfig initValueConfig=InitValueConfig.create(apiWrapperClassName,collectionConfig);    mapBuilder.put(fieldNamePattern.getKey(),initValueConfig);  }  return mapBuilder.build();}  }
class C{  void startOptional(){  this.optional++;}  }
class C{  public T exception(Exception exception){  jsonValue.put(EXCEPTION,exception);  return self();}  }
class C{  boolean isEmpty(){  return (referrals.isEmpty());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeelementnodetype.class,args);}  }
class C{  static public void assertEquals(String message,byte expected,byte actual){  assertEquals(message,new Byte(expected),new Byte(actual));}  }
class C{  public LocalPathInterpolator(float controlX1,float controlY1,float controlX2,float controlY2){  initCubic(controlX1,controlY1,controlX2,controlY2);}  }
class C{  public synchronized String sign() throws Exception {  logger=(com.sun.identity.log.Logger)Logger.getLogger(name);  Handler[] handlers=logger.getHandlers();  SecureLogHelper helper=((com.sun.identity.log.handlers.SecureFileHandler)handlers[0]).getSecureLogHelper();  byte[] prevMAC=new byte[1];  prevMAC=helper.getLastMAC();  if (prevMAC == null) {    if (Debug.warningEnabled()) {      Debug.warning(name + "Prev MAC = null");    }    return null;  }  if (Debug.messageEnabled()) {    Debug.message(name + "prevMAC = " + helper.toHexString(prevMAC));  }  byte[] newMAC;  byte[] prevSign=helper.getLastSignatureBytes();  if ((prevSign == null) || (prevSign.length == 0)) {    newMAC=new byte[prevMAC.length];    System.arraycopy(prevMAC,0,newMAC,0,prevMAC.length);  } else {    newMAC=new byte[prevMAC.length + prevSign.length];    System.arraycopy(prevMAC,0,newMAC,0,prevMAC.length);    System.arraycopy(prevSign,0,newMAC,prevMAC.length,prevSign.length);  }  byte[] curSign=helper.signMAC(newMAC);  String sign=helper.toHexString(curSign);  return sign;}  }
class C{  public void paintSplitPaneDragDivider(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this)   return true;  if (!(obj instanceof CodeSource))   return false;  CodeSource cs=(CodeSource)obj;  if (location == null) {    if (cs.location != null)     return false;  } else {    if (!location.equals(cs.location))     return false;  }  return matchCerts(cs,true);}  }
class C{  public void startElement(String qName,AttributeList qAtts) throws SAXException {  ArrayList<SAXParseException> exceptions=null;  if (!namespaces) {    if (contentHandler != null) {      attAdapter.setAttributeList(qAtts);      contentHandler.startElement("","",qName.intern(),attAdapter);    }    return;  }  nsSupport.pushContext();  int length=qAtts.getLength();  for (int i=0; i < length; i++) {    String attQName=qAtts.getName(i);    if (!attQName.startsWith("xmlns"))     continue;    String prefix;    int n=attQName.indexOf(':');    if (n == -1 && attQName.length() == 5) {      prefix="";    } else     if (n != 5) {      continue;    } else     prefix=attQName.substring(n + 1);    String value=qAtts.getValue(i);    if (!nsSupport.declarePrefix(prefix,value)) {      reportError("Illegal Namespace prefix: " + prefix);      continue;    }    if (contentHandler != null)     contentHandler.startPrefixMapping(prefix,value);  }  atts.clear();  for (int i=0; i < length; i++) {    String attQName=qAtts.getName(i);    String type=qAtts.getType(i);    String value=qAtts.getValue(i);    if (attQName.startsWith("xmlns")) {      String prefix;      int n=attQName.indexOf(':');      if (n == -1 && attQName.length() == 5) {        prefix="";      } else       if (n != 5) {        prefix=null;      } else {        prefix=attQName.substring(6);      }      if (prefix != null) {        if (prefixes) {          if (uris)           atts.addAttribute(nsSupport.XMLNS,prefix,attQName.intern(),type,value); else           atts.addAttribute("","",attQName.intern(),type,value);        }        continue;      }    }    try {      String attName[]=processName(attQName,true,true);      atts.addAttribute(attName[0],attName[1],attName[2],type,value);    } catch (    SAXException e) {      if (exceptions == null) {        exceptions=new ArrayList<SAXParseException>();      }      exceptions.add((SAXParseException)e);      atts.addAttribute("",attQName,attQName,type,value);    }  }  if (exceptions != null && errorHandler != null) {    for (    SAXParseException ex : exceptions) {      errorHandler.error(ex);    }  }  if (contentHandler != null) {    String name[]=processName(qName,false,false);    contentHandler.startElement(name[0],name[1],name[2],atts);  }}  }
class C{  public void mouse_pressed(Point2D p_point){  if (interactive_state != null && gdi_context != null) {    current_mouse_position=gdi_context.coordinate_transform.screen_to_board(p_point);    set_interactive_state(interactive_state.mouse_pressed(current_mouse_position));  }}  }
class C{  public void deleteSubOrganization(String subOrgName,boolean recursive) throws SMSException {  validateConfigImpl();  String subOrgDN=normalizeDN(subOrgName,orgDN);  if (subOrgDN.equals(SMSEntry.SLASH_STR) || subOrgDN.equalsIgnoreCase(SMSEntry.getRootSuffix()) || subOrgDN.equalsIgnoreCase(SERVICES_NODE)) {    Object parms[]={orgName};    SMSEntry.debug.error("OrganizationConfigManager: deleteSubOrganization(" + "Root realm " + orgName + " cannot be deleted. ");    throw (new SMSException(UMS_BUNDLE_NAME,"sms-cannot_delete_rootsuffix",parms));  }  OrganizationConfigManager subRlmConfigMgr=getSubOrgConfigManager(subOrgName);  Set subRlmSet=subRlmConfigMgr.getSubOrganizationNames("*",true);  boolean isCopyOrgEnabled=isCopyOrgEnabled();  if (realmEnabled) {    try {      CachedSMSEntry cEntry=CachedSMSEntry.getInstance(token,subOrgDN);      if (cEntry.isDirty()) {        cEntry.refresh();      }      SMSEntry entry=cEntry.getClonedSMSEntry();      if (!recursive) {        if ((subRlmSet != null) && (!subRlmSet.isEmpty())) {          throw (new SMSException(SMSEntry.bundle.getString("sms-entries-exists"),"sms-entries-exists"));        }      }      entry.delete(token);      cEntry.refresh(entry);    } catch (    SSOException ssoe) {      SMSEntry.debug.error("OrganizationConfigManager: deleteSubOrganization(" + "String subOrgName, boolean recursive) Unable to " + "delete sub organization ",ssoe);      throw (new SMSException(SMSEntry.bundle.getString(SMS_INVALID_SSO_TOKEN),SMS_INVALID_SSO_TOKEN));    }  }  if ((coexistMode) || (realmEnabled && isCopyOrgEnabled)) {    String amsdkName=DNMapper.realmNameToAMSDKName(subOrgDN);    if (!SMSEntry.getRootSuffix().equalsIgnoreCase(SMSEntry.getAMSdkBaseDN())) {      String convOrg=subOrgName;      if (subOrgName.startsWith("/")) {        convOrg=DNMapper.convertToDN(subOrgName).toString();      }      amsdkName=convOrg + SMSEntry.COMMA + amSDKOrgDN;    }    amsdk.deleteSubOrganization(amsdkName);  }}  }
class C{  public void initialize() throws InitializationException {  for (  SubSystem subSystem : subSystemsToInitialize) {switch (subSystem) {case CLIENT_INIT:      clientInit();    break;case CORE_CONFIG:  initCoreConfig(configFile);break;case ADMIN_BACKEND:setupAdminBackends();break;case ADMIN_USERS:setupAdminUsers();break;case INIT_CRYPTO:initCryptoServices();break;case PASSWORD_STORAGE_SCHEME:startPasswordStorageScheme();break;case START_CRYPTO:startCryptoServices();break;case USER_PLUGINS:startUserPlugin();break;case ERROR_DEBUG_LOGGERS:startErrorAndDebugLoggers();break;}}}  }
class C{  public final String peek(){  return (m_firstFree <= 0) ? null : m_map[m_firstFree - 1];}  }
class C{  public static String removeRight(final String value,final String suffix,final boolean caseSensitive){  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);  validate(suffix,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);  return endsWith(value,suffix,caseSensitive) ? value.substring(0,value.toLowerCase().lastIndexOf(suffix.toLowerCase())) : value;}  }
class C{  public static long nanoToMillis(final long nano){  return nano / 1_000_000;}  }
class C{  protected void flushRequirementChanges(){  AbstractDocument doc=(AbstractDocument)getDocument();  try {    doc.readLock();    View parent=null;    boolean horizontal=false;    boolean vertical=false;synchronized (this) {synchronized (stats) {        int n=getViewCount();        if ((n > 0) && (minorChanged || estimatedMajorSpan)) {          LayoutQueue q=getLayoutQueue();          ChildState min=getChildState(0);          ChildState pref=getChildState(0);          float span=0f;          for (int i=1; i < n; i++) {            ChildState cs=getChildState(i);            if (minorChanged) {              if (cs.min > min.min) {                min=cs;              }              if (cs.pref > pref.pref) {                pref=cs;              }            }            if (estimatedMajorSpan) {              span+=cs.getMajorSpan();            }          }          if (minorChanged) {            minRequest=min;            prefRequest=pref;          }          if (estimatedMajorSpan) {            majorSpan=span;            estimatedMajorSpan=false;            majorChanged=true;          }        }      }      if (majorChanged || minorChanged) {        parent=getParent();        if (parent != null) {          if (axis == X_AXIS) {            horizontal=majorChanged;            vertical=minorChanged;          } else {            vertical=majorChanged;            horizontal=minorChanged;          }        }        majorChanged=false;        minorChanged=false;      }    }    if (parent != null) {      parent.preferenceChanged(this,horizontal,vertical);      Component c=getContainer();      if (c != null) {        c.repaint();      }    }  }  finally {    doc.readUnlock();  }}  }
class C{  public PriorityParser(String priority){  super(priority);}  }
class C{  protected void onBeforeRequest(RequestContext requestContext) throws ServletException {  try {    HttpServletRequest req=requestContext.getRequest();    req.setCharacterEncoding("UTF-8");    HttpSession session=req.getSession(false);    String sessLocale=null;    if (session != null) {      sessLocale=(String)session.getAttribute(URL_LOCALE);    }    ISLocaleContext lc=new ISLocaleContext();    if (sessLocale != null && sessLocale.length() > 0) {      lc.setLocale(ISLocaleContext.URL_LOCALE,sessLocale);    }    lc.setLocale(req);    String reqLocale=lc.getLocale().toString();    if (req.getParameter(URL_LOCALE) != null) {      if (session == null) {        session=req.getSession(true);      }      session.setAttribute(URL_LOCALE,reqLocale);    }  } catch (  UnsupportedEncodingException ex) {    debug.error("ampassword:encoding error",ex);  }}  }
class C{  private ResourceIndexEntry(String resourceName,String policyName){  this.resourceName=resourceName;  policyNames.add(policyName);}  }
class C{  public static boolean checkIfEntryExists(String dn,SSOToken token){  try {    return (smsObject.entryExists(token,dn));  } catch (  Exception e) {    debug.error("SMSEntry: Error in checking if entry exists: " + dn,e);  }  return (false);}  }
class C{  public void assign(org.omg.DynamicAny.DynAny dyn_any) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("assign",_opsClass);  DynEnumOperations $self=(DynEnumOperations)$so.servant;  try {    $self.assign(dyn_any);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  @Override public void execute(String tokenId,Task task){  try {    task.execute(adapter);  } catch (  DataLayerException e) {    error("processing task",e);  }}  }
class C{  public ReplicationDomainMonitorData recomputeMonitorData() throws InterruptedException {synchronized (pendingMonitorLock) {    if (monitorDataLastBuildDate + monitorDataLifeTime < TimeThread.getTime()) {      try {        DN baseDN=domain.getBaseDN();synchronized (pendingMonitorDataLock) {          pendingMonitorDataServerIDs.clear();          pendingMonitorData=new ReplicationDomainMonitorData(baseDN);          initializePendingMonitorData();          for (          ServerHandler rs : domain.getConnectedRSs().values()) {            final int serverId=rs.getServerId();            MonitorRequestMsg msg=new MonitorRequestMsg(domain.getLocalRSServerId(),serverId);            try {              rs.send(msg);              pendingMonitorDataServerIDs.add(serverId);            } catch (            IOException e) {              logger.error(ERR_SENDING_REMOTE_MONITOR_DATA_REQUEST,baseDN,serverId,e.getMessage());            }          }          pendingMonitorDataLatch=new CountDownLatch(pendingMonitorDataServerIDs.size());        }        pendingMonitorDataLatch.await(5,TimeUnit.SECONDS);synchronized (pendingMonitorDataLock) {          for (          int serverId : monitorDataLateServers) {            if (!pendingMonitorDataServerIDs.contains(serverId)) {              logger.info(NOTE_MONITOR_DATA_RECEIVED,baseDN,serverId);            }          }          for (          int serverId : pendingMonitorDataServerIDs) {            if (!monitorDataLateServers.contains(serverId)) {              logger.warn(WARN_MISSING_REMOTE_MONITOR_DATA,baseDN,serverId);            }          }          monitorDataLateServers.clear();          monitorDataLateServers.addAll(pendingMonitorDataServerIDs);        }synchronized (pendingMonitorDataLock) {          pendingMonitorData.completeComputing();          monitorData=pendingMonitorData;          monitorDataLastBuildDate=TimeThread.getTime();        }      }  finally {synchronized (pendingMonitorDataLock) {          pendingMonitorData=null;          pendingMonitorDataLatch=null;          pendingMonitorDataServerIDs.clear();        }      }    }  }  return monitorData;}  }
class C{  public static boolean addSmiles(Context context,Spannable spannable){  boolean hasChanges=false;  for (  Entry<Pattern,Object> entry : emoticons.entrySet()) {    Matcher matcher=entry.getKey().matcher(spannable);    while (matcher.find()) {      boolean set=true;      for (      ImageSpan span : spannable.getSpans(matcher.start(),matcher.end(),ImageSpan.class))       if (spannable.getSpanStart(span) >= matcher.start() && spannable.getSpanEnd(span) <= matcher.end())       spannable.removeSpan(span); else {        set=false;        break;      }      if (set) {        hasChanges=true;        Object value=entry.getValue();        if (value instanceof String && !((String)value).startsWith("http")) {          File file=new File((String)value);          if (!file.exists() || file.isDirectory()) {            return false;          }          spannable.setSpan(new ImageSpan(context,Uri.fromFile(file)),matcher.start(),matcher.end(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);        } else {          spannable.setSpan(new ImageSpan(context,(Integer)value),matcher.start(),matcher.end(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);        }      }    }  }  return hasChanges;}  }
class C{  public String encode(){  String retval=headerName + COLON;  if (optionTag != null)   retval+=SP + optionTag;  retval+=NEWLINE;  return retval;}  }
class C{  public Element encrypt(String xmlString,Key recipientPublicKey,String dataEncAlgorithm,int dataEncStrength,String recipientEntityID,String outerElementName) throws SAML2Exception {  return encrypt(xmlString,recipientPublicKey,null,dataEncAlgorithm,dataEncStrength,recipientEntityID,outerElementName);}  }
class C{  public static URI toNormalizedURI(String filename){  return toNormalizedURI(new File(filename));}  }
class C{  public void removeChangeListener(ChangeListener l){  listenerList.remove(ChangeListener.class,l);}  }
class C{  public AWTEvent peekEvent(){  pushPopLock.lock();  try {    for (int i=NUM_PRIORITIES - 1; i >= 0; i--) {      if (queues[i].head != null) {        return queues[i].head.event;      }    }  }  finally {    pushPopLock.unlock();  }  return null;}  }
class C{  public Request createRequest(javax.sip.address.URI requestURI,String method,CallIdHeader callId,CSeqHeader cSeq,FromHeader from,ToHeader to,List via,MaxForwardsHeader maxForwards,ContentTypeHeader contentType,Object content) throws ParseException {  if (requestURI == null || method == null || callId == null || cSeq == null || from == null || to == null || via == null || maxForwards == null || content == null || contentType == null)   throw new NullPointerException("Null parameters");  SIPRequest sipRequest=new SIPRequest();  sipRequest.setRequestURI(requestURI);  sipRequest.setMethod(method);  sipRequest.setCallId(callId);  sipRequest.setCSeq(cSeq);  sipRequest.setFrom(from);  sipRequest.setTo(to);  sipRequest.setVia(via);  sipRequest.setMaxForwards(maxForwards);  sipRequest.setContent(content,contentType);  if (userAgent != null) {    sipRequest.setHeader(userAgent);  }  return sipRequest;}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();  dictionaryFile=TestCaseUtils.createTempFile("love","sex","secret","god","password");}  }
class C{  @Override public String toString(){  return super.toString() + "[caseSensitivity=" + caseSensitivity+ "]";}  }
class C{  public Condition removeCondition(String condition){  return conditions.removeCondition(condition);}  }
class C{  public String compress(String imageUri){  return compressImage(imageUri);}  }
class C{  public boolean visitInstruction(ElemTemplateElement elem){  int type=elem.getXSLToken();switch (type) {case Constants.ELEMNAME_CALLTEMPLATE:case Constants.ELEMNAME_TEMPLATE:case Constants.ELEMNAME_FOREACH:{      if (type == Constants.ELEMNAME_FOREACH) {        ElemForEach efe=(ElemForEach)elem;        Expression select=efe.getSelect();        select.callVisitors(efe,this);      }      Vector savedPaths=m_paths;      m_paths=new Vector();      elem.callChildVisitors(this,false);      eleminateRedundentLocals(elem);      m_paths=savedPaths;      return false;    }case Constants.ELEMNAME_NUMBER:case Constants.ELEMNAME_SORT:  boolean savedIsSame=m_isSameContext;m_isSameContext=false;elem.callChildVisitors(this);m_isSameContext=savedIsSame;return false;default :return true;}}  }
class C{  protected void createProperty(Object result){  if (resultproperty != null) {    createProperty(resultproperty,result);  }}  }
class C{  public static byte[] genPasswordKey(String password){  return genKey(hash(getUTF8Bytes(password)));}  }
class C{  @Override public String toString(){  StringBuilder risul=new StringBuilder(1000);  risul.append("RoutingBoard \n");  risul.append("object: search_tree_manager \n");  return risul.toString();}  }
class C{  public FilteredRole(CreationTemplate template,AttrSet attrSet) throws UMSException {  super(template,attrSet);}  }
class C{  public void write(byte[] b,int off,int len) throws IOException {  out.write(b,off,len);  cksum.update(b,off,len);}  }
class C{  private void writeAttribute(ASN1Writer stream,Attribute a) throws IOException {  stream.writeStartSequence();  stream.writeOctetString(a.getAttributeDescription().toString());  stream.writeStartSet();  for (  ByteString value : a) {    stream.writeOctetString(value);  }  stream.writeEndSequence();  stream.writeEndSequence();}  }
class C{  protected AWTKeyStroke(char keyChar,int keyCode,int modifiers,boolean onKeyRelease){  this.keyChar=keyChar;  this.keyCode=keyCode;  this.modifiers=modifiers;  this.onKeyRelease=onKeyRelease;}  }
class C{  private boolean conditionL0(String value,int index){  if (index == value.length() - 3 && contains(value,index - 1,4,"ILLO","ILLA","ALLE")) {    return true;  } else   if ((contains(value,index - 1,2,"AS","OS") || contains(value,value.length() - 1,1,"A","O")) && contains(value,index - 1,4,"ALLE")) {    return true;  } else {    return false;  }}  }
class C{  public Request createRequest(URI requestURI,String method,CallIdHeader callId,CSeqHeader cSeq,FromHeader from,ToHeader to,List via,MaxForwardsHeader maxForwards) throws ParseException {  if (requestURI == null || method == null || callId == null || cSeq == null || from == null || to == null || via == null || maxForwards == null)   throw new ParseException("JAIN-SIP Exception, some parameters are missing" + ", unable to create the request",0);  SIPRequest sipRequest=new SIPRequest();  sipRequest.setRequestURI(requestURI);  sipRequest.setMethod(method);  sipRequest.setCallId(callId);  sipRequest.setCSeq(cSeq);  sipRequest.setFrom(from);  sipRequest.setTo(to);  sipRequest.setVia(via);  sipRequest.setMaxForwards(maxForwards);  if (userAgent != null) {    sipRequest.setHeader(userAgent);  }  return sipRequest;}  }
class C{  private void writeChars(int number,char c) throws IOException {  for (; number > 0; number--) {    writer.write(c);  }}  }
class C{  private String checkForPolicyAdvice(SSOToken token,HttpServletRequest request,HttpServletResponse response){  StringBuilder adviceList=null;  for (Enumeration e=request.getParameterNames(); e.hasMoreElements(); ) {    String paramName=(String)e.nextElement();    if (adviceParams.contains(paramName)) {      if (token != null) {        if (paramName.equals("realm") && request.getParameter("sunamcompositeadvice") == null) {          try {            String orgDN=token.getProperty("Organization");            if (orgDN != null) {              String tokenRealm=LDAPUtils.rdnTypeFromDn(orgDN);              if (tokenRealm.equalsIgnoreCase(SMSEntry.getRootSuffix())) {                tokenRealm="/";              } else {                int orgIndex=tokenRealm.indexOf(SMSEntry.ORGANIZATION_RDN + SMSEntry.EQUALS);                tokenRealm=tokenRealm.substring(orgIndex + 2,tokenRealm.length());              }              String requestRealm=request.getParameter(paramName);              if (tokenRealm.equalsIgnoreCase(requestRealm)) {                return null;              }            }          } catch (          SSOException ssoe) {            debug.error("CDCServlet.checkForPolicyAdvice: Failed to get realm info. ",ssoe);          }        }      }      if (adviceList == null) {        adviceList=new StringBuilder();      } else {        adviceList.append(AMP);      }      String[] values=request.getParameterValues(paramName);      if (values != null) {        for (int i=0; i < values.length; i++) {          adviceList.append(paramName).append(EQUALS).append(values[i]);        }      }    }  }  if (debug.messageEnabled()) {    debug.message("CDCServlet.checkForPolicyAdvice: Advice List is : " + adviceList);  }  return (adviceList == null) ? null : adviceList.toString();}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();  DirectoryServer.registerAlertGenerator(this);}  }
class C{  private void reportFatalError(String msgId,String arg) throws JasperException {  err.jspError(msgId,arg);}  }
class C{  private JsonValue liveSync(Context context,String source,boolean detailedFailure) throws ResourceException {  JsonValue response;  Id id=new Id(source);  String previousStageResourceContainer="repo/synchronisation/pooledSyncStage";  String previousStageId=id.toString().replace("/","").toUpperCase();  ResourceResponse previousStage=null;  try {    ReadRequest readRequest=Requests.newReadRequest(previousStageResourceContainer,previousStageId);    previousStage=connectionFactory.getConnection().read(context,readRequest);    response=locateService(id).liveSynchronize(context,id.getObjectType(),previousStage.getContent() != null ? previousStage.getContent() : null);    UpdateRequest updateRequest=Requests.newUpdateRequest(previousStageResourceContainer,previousStageId,response);    updateRequest.setRevision(previousStage.getRevision());    connectionFactory.getConnection().update(context,updateRequest);  } catch (  ResourceException e) {    if (previousStage != null) {      throw e;    }    response=locateService(id).liveSynchronize(context,id.getObjectType(),null);    if (response != null) {      CreateRequest createRequest=Requests.newCreateRequest(previousStageResourceContainer,previousStageId,response);      connectionFactory.getConnection().create(context,createRequest);    }  }  if (response != null && !detailedFailure) {    response.get("lastException").remove("syncDelta");  }  return response;}  }
class C{  public final int readUnsignedShort() throws IOException {  int ch1=in.read();  int ch2=in.read();  if ((ch1 | ch2) < 0)   throw new EOFException();  return (ch1 << 8) + (ch2 << 0);}  }
class C{  public void remove(){  previous.next=next;  next.previous=previous;}  }
class C{  public boolean implies(Permission permission){  if (!(permission instanceof PropertyPermission))   return false;  PropertyPermission pp=(PropertyPermission)permission;  PropertyPermission x;  int desired=pp.getMask();  int effective=0;  if (all_allowed) {synchronized (this) {      x=perms.get("*");    }    if (x != null) {      effective|=x.getMask();      if ((effective & desired) == desired)       return true;    }  }  String name=pp.getName();synchronized (this) {    x=perms.get(name);  }  if (x != null) {    effective|=x.getMask();    if ((effective & desired) == desired)     return true;  }  int last, offset;  offset=name.length() - 1;  while ((last=name.lastIndexOf(".",offset)) != -1) {    name=name.substring(0,last + 1) + "*";synchronized (this) {      x=perms.get(name);    }    if (x != null) {      effective|=x.getMask();      if ((effective & desired) == desired)       return true;    }    offset=last - 1;  }  return false;}  }
class C{  protected String paramString(){  return super.paramString() + ",selected=" + getSelectedItem();}  }
class C{  public Boolean isInRelationService(){  return myInRelServFlg.get();}  }
class C{  public void testConstrStringExceptionEmptyExponent2(){  String a="-238768.787678287e-";  try {    new BigDecimal(a);    fail("NumberFormatException has not been caught");  } catch (  NumberFormatException e) {  }}  }
class C{  public void testGetCallBackHandler(){  CallbackHandler cbh=new tmpCallbackHandler();  KeyStore.CallbackHandlerProtection ksCBH=new KeyStore.CallbackHandlerProtection(cbh);  assertEquals("Incorrect CallbackHandler",cbh,ksCBH.getCallbackHandler());}  }
class C{  public static int dp2px(float dp){  DisplayMetrics metrics=Resources.getSystem().getDisplayMetrics();  float px=dp * (metrics.densityDpi / 160f);  return Math.round(px);}  }
class C{  private static XMPPathSegment parseStructSegment(PathPosition pos) throws XMPException {  pos.nameStart=pos.stepBegin;  while (pos.stepEnd < pos.path.length() && "/[*".indexOf(pos.path.charAt(pos.stepEnd)) < 0) {    pos.stepEnd++;  }  pos.nameEnd=pos.stepEnd;  if (pos.stepEnd == pos.stepBegin) {    throw new XMPException("Empty XMPPath segment",XMPError.BADXPATH);  }  XMPPathSegment segment=new XMPPathSegment(pos.path.substring(pos.stepBegin,pos.stepEnd),XMPPath.STRUCT_FIELD_STEP);  return segment;}  }
class C{  public void log(ILogRecord record){  try {    extractInfoFromLogFor(record);  } catch (  SSOException e) {    Debug.error("Logger.log " + e.getMessage());  }  if (record instanceof java.util.logging.LogRecord) {    Object logBy=record.getLogBy();    Object cred=(logBy instanceof Subject) ? getPrivateCred((Subject)logBy) : logBy;    log((java.util.logging.LogRecord)record,cred);  } else {    Debug.error("Logger.log: cannot log non java.util.logging.LogRecord class");  }}  }
class C{  public void addRealm(Realm theRealm){  realms.add(theRealm);  if (log.isDebugEnabled()) {    sm.getString("combinedRealm.addRealm",theRealm.getClass().getName(),Integer.toString(realms.size()));  }}  }
class C{  @SuppressWarnings("deprecation") public static boolean isLightweightComponent(Component c){  return c.getPeer() instanceof LightweightPeer;}  }
class C{  protected void processWindowEvent(final WindowEvent e){  super.processWindowEvent(e);  if (e.getID() == WindowEvent.WINDOW_CLOSING) {switch (defaultCloseOperation) {case HIDE_ON_CLOSE:      setVisible(false);    break;case DISPOSE_ON_CLOSE:  dispose();break;case EXIT_ON_CLOSE:System.exit(0);break;case DO_NOTHING_ON_CLOSE:default :}}}  }
class C{  MonitorRequestMsg(byte[] in) throws DataFormatException {  final ByteArrayScanner scanner=new ByteArrayScanner(in);  final byte msgType=scanner.nextByte();  if (msgType != MSG_TYPE_REPL_SERVER_MONITOR_REQUEST) {    throw new DataFormatException("input is not a valid " + getClass().getCanonicalName());  }  this.senderID=scanner.nextIntUTF8();  this.destination=scanner.nextIntUTF8();}  }
class C{  @Override public void accessEntry(){  this.access();  this.setPrimarySession(false);  this.endAccess();}  }
class C{  public boolean hasTimeout(){  return hasTimeout;}  }
class C{  public static void main(String[] args){  parseArgs(args);  Connection connection=null;  try {    final LDAPConnectionFactory factory=new LDAPConnectionFactory(host,port,getTrustAllOptions());    connection=factory.getConnection();    PlainSASLBindRequest request=Requests.newPlainSASLBindRequest(authcid,passwd.toCharArray()).setAuthorizationID(authzid);    connection.bind(request);    System.out.println("Authenticated as " + authcid + ".");  } catch (  final LdapException e) {    System.err.println(e.getMessage());    System.exit(e.getResult().getResultCode().intValue());    return;  }catch (  final GeneralSecurityException e) {    System.err.println(e.getMessage());    System.exit(ResultCode.CLIENT_SIDE_CONNECT_ERROR.intValue());  } finally {    if (connection != null) {      connection.close();    }  }}  }
class C{  private void clampYTranslation(StackScrollState.ViewState childViewState,int childHeight){  clampPositionToBottomStackStart(childViewState,childHeight);  clampPositionToTopStackEnd(childViewState,childHeight);}  }
class C{  public static JTextArea createNonEditableTextArea(LocalizableMessage text,int rows,int cols){  JTextArea ta=createTextArea(text,rows,cols);  ta.setEditable(false);  ta.setOpaque(false);  ta.setForeground(ColorAndFontConstants.foreground);  return ta;}  }
class C{  @Override public void publish(LogRecord record){  super.publish(record);  flush();}  }
class C{  public ObjectInstance(ObjectName objectName,String className){  if (objectName.isPattern()) {    final IllegalArgumentException iae=new IllegalArgumentException("Invalid name->" + objectName.toString());    throw new RuntimeOperationsException(iae);  }  this.name=objectName;  this.className=className;}  }
class C{  public void testGenerateCertPath01() throws Exception {  CertificateFactory[] certFs=initCertFs();  assertNotNull("CertificateFactory objects were not created",certFs);  Certificate cert=certFs[0].generateCertificate(new ByteArrayInputStream(TestUtils.getEncodedX509Certificate()));  List<Certificate> list=new Vector<Certificate>();  list.add(cert);  for (int i=0; i < certFs.length; i++) {    CertPath certPath=null;    certPath=certFs[i].generateCertPath(list);    assertEquals(cert.getType(),certPath.getType());    List<? extends Certificate> list1=certPath.getCertificates();    assertFalse("Result list is empty",list1.isEmpty());    Iterator<? extends Certificate> it=list1.iterator();    assertEquals("Incorrect Certificate in CertPath",cert,it.next());  }}  }
class C{  public void removeAdminData(boolean removeAdministrators) throws ADSContextException {  DN[] dns={getServerContainerDN(),getServerGroupContainerDN(),removeAdministrators ? getAdministratorContainerDN() : null};  try {    for (    DN dn : dns) {      if (dn != null) {        if (isExistingEntry(dn)) {          DeleteRequest request=newDeleteRequest(dn).addControl(SubtreeDeleteRequestControl.newControl(true));          connectionWrapper.getConnection().delete(request);        }      }    }    createAdminDataContainers();  } catch (  LdapException x) {    throw new ADSContextException(ErrorType.ERROR_UNEXPECTED,x);  }}  }
class C{  public void testFlipBitException(){  byte aBytes[]={-1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=-7;  BigInteger aNumber=new BigInteger(aSign,aBytes);  try {    aNumber.flipBit(number);    fail("ArithmeticException has not been caught");  } catch (  ArithmeticException e) {  }}  }
class C{  private Object writeReplace(){  return new UnmodifiableList<E>(list);}  }
class C{  public void updateIDPEntityConfig(String realm,String entityName,Map attrValues) throws AMConsoleException {  String[] params={realm,entityName,"IDFF","IDP-Extended Metadata"};  logEvent("ATTEMPT_MODIFY_ENTITY_DESCRIPTOR",params);  try {    IDFFMetaManager idffMetaMgr=getIDFFMetaManager();    EntityConfigElement entityConfig=idffMetaMgr.getEntityConfig(realm,entityName);    if (entityConfig == null) {      throw new AMConsoleException("invalid.entity.name");    }    IDPDescriptorConfigElement idpDecConfigElement=idffMetaMgr.getIDPDescriptorConfig(realm,entityName);    if (idpDecConfigElement == null) {      throw new AMConsoleException("invalid.config.element");    } else {      updateAttrInConfig(idpDecConfigElement,attrValues,EntityModel.IDENTITY_PROVIDER);    }    idffMetaMgr.setEntityConfig(realm,entityConfig);    logEvent("SUCCEED_MODIFY_ENTITY_DESCRIPTOR",params);  } catch (  IDFFMetaException e) {    String strError=getErrorString(e);    String[] paramsEx={realm,entityName,"IDFF","IDP-Extended Metadata",strError};    logEvent("FEDERATION_EXCEPTION_MODIFY_ENTITY_DESCRIPTOR",paramsEx);    throw new AMConsoleException(strError);  }catch (  JAXBException e) {    String strError=getErrorString(e);    String[] paramsEx={realm,entityName,"IDFF","IDP-Extended Metadata",strError};    logEvent("FEDERATION_EXCEPTION_MODIFY_ENTITY_DESCRIPTOR",paramsEx);    throw new AMConsoleException(strError);  }}  }
class C{  public LDAPPreReadRequestControl(boolean isCritical,Set<String> rawAttributes){  super(OID_LDAP_READENTRY_PREREAD,isCritical);  if (rawAttributes == null) {    this.rawAttributes=new LinkedHashSet<>(0);  } else {    this.rawAttributes=rawAttributes;  }  requestedAttributes=null;}  }
class C{  @Override public boolean isValidateRoot(){  return false;}  }
class C{  public static void mergeFields(ClassNode cn){  List<FieldNode> fields=new ArrayList<FieldNode>();  for (  FieldNode fn : cn.fields) {    if (AccessHelper.isPrivate(fn.access) && AccessHelper.isStatic(fn.access)) {      fields.add(fn);    }  }  if (fields.size() == 0) {    return;  }  FieldNode merged=new FieldNode(Opcodes.ACC_PRIVATE | Opcodes.ACC_STATIC,"_MERGE_","Ljava/util/List;",null,null);  List<MethodNode> getter=new ArrayList<MethodNode>();  List<MethodNode> setter=new ArrayList<MethodNode>();  for (  FieldNode fn : fields) {    int i=fields.indexOf(fn);    MethodNode get=new MethodNode(Opcodes.ACC_STATIC,"get" + i,"()Ljava/lang/Object;",null,null);    get.instructions.add(new FieldInsnNode(Opcodes.GETSTATIC,cn.name,merged.name,merged.desc));    get.instructions.add(OpUtils.toInt(i));    get.instructions.add(new MethodInsnNode(Opcodes.INVOKEINTERFACE,"java/util/List","get","(I)Ljava/lang/Object;",true));    get.instructions.add(new InsnNode(Opcodes.ARETURN));    MethodNode set=new MethodNode(Opcodes.ACC_STATIC,"set" + i,"(Ljava/lang/Object;)V",null,null);    set.instructions.add(new FieldInsnNode(Opcodes.GETSTATIC,cn.name,merged.name,merged.desc));    set.instructions.add(OpUtils.toInt(i));    set.instructions.add(new VarInsnNode(Opcodes.ALOAD,0));    set.instructions.add(new MethodInsnNode(Opcodes.INVOKEINTERFACE,"java/util/List","add","(ILjava/lang/Object;)V",true));    set.instructions.add(new InsnNode(Opcodes.RETURN));    getter.add(i,get);    setter.add(i,set);    cn.methods.add(get);    cn.methods.add(set);  }  MethodNode clinit=null;  for (  MethodNode mn : cn.methods) {    if (mn.name.equals("<clinit>")) {      clinit=mn;    }  }  if (clinit == null) {    clinit=new MethodNode(Opcodes.ACC_STATIC,"<clinit>","()V",null,null);    clinit.instructions.add(new InsnNode(Opcodes.RETURN));    cn.methods.add(clinit);  }  clinit.instructions.insert(new FieldInsnNode(Opcodes.PUTSTATIC,cn.name,merged.name,merged.desc));  clinit.instructions.insert(new MethodInsnNode(Opcodes.INVOKESPECIAL,"java/util/ArrayList","<init>","()V",false));  clinit.instructions.insert(new InsnNode(Opcodes.DUP));  clinit.instructions.insert(new TypeInsnNode(Opcodes.NEW,"java/util/ArrayList"));  cn.fields.add(merged);  for (  FieldNode fn : fields) {    cn.fields.remove(cn.fields.indexOf(fn));  }  for (  MethodNode mn : cn.methods) {    for (    FieldNode fn : fields) {      int i=fields.indexOf(fn);      for (      AbstractInsnNode ain : mn.instructions.toArray()) {        if (ain.getType() == AbstractInsnNode.FIELD_INSN) {          FieldInsnNode fin=(FieldInsnNode)ain;          if (fin.name.equals(fn.name) && fin.desc.equals(fn.desc) && fin.owner.equals(cn.name)) {            MethodNode set=setter.get(i);            MethodNode get=getter.get(i);            if (fin.getOpcode() == Opcodes.PUTSTATIC) {              mn.instructions.set(fin,new MethodInsnNode(Opcodes.INVOKESTATIC,cn.name,set.name,set.desc,false));            }            if (fin.getOpcode() == Opcodes.GETSTATIC) {              if (fn.desc.length() == 1) {switch (fn.desc) {case "Z":                  mn.instructions.insert(fin,new MethodInsnNode(Opcodes.INVOKEVIRTUAL,"java/lang/Boolean","booleanValue","()Z",false));                mn.instructions.insert(fin,new TypeInsnNode(Opcodes.CHECKCAST,"Ljava/lang/Boolean;"));              break;case "I":            mn.instructions.insert(fin,new MethodInsnNode(Opcodes.INVOKEVIRTUAL,"java/lang/Integer","intValue","()I",false));          mn.instructions.insert(fin,new TypeInsnNode(Opcodes.CHECKCAST,"Ljava/lang/Integer;"));        break;case "L":      mn.instructions.insert(fin,new MethodInsnNode(Opcodes.INVOKEVIRTUAL,"java/lang/Long","longValue","()L",false));    mn.instructions.insert(fin,new TypeInsnNode(Opcodes.CHECKCAST,"Ljava/lang/Long;"));  break;case "D":mn.instructions.insert(fin,new MethodInsnNode(Opcodes.INVOKEVIRTUAL,"java/lang/Double","doubleValue","()D",false));mn.instructions.insert(fin,new TypeInsnNode(Opcodes.CHECKCAST,"Ljava/lang/Double;"));break;case "F":mn.instructions.insert(fin,new MethodInsnNode(Opcodes.INVOKEVIRTUAL,"java/lang/Float","floatValue","()F",false));mn.instructions.insert(fin,new TypeInsnNode(Opcodes.CHECKCAST,"Ljava/lang/Float;"));break;case "C":mn.instructions.insert(fin,new MethodInsnNode(Opcodes.INVOKEVIRTUAL,"java/lang/Character","charValue","()C",false));mn.instructions.insert(fin,new TypeInsnNode(Opcodes.CHECKCAST,"Ljava/lang/Character;"));break;}} else {mn.instructions.insert(fin,new TypeInsnNode(Opcodes.CHECKCAST,fn.desc));}mn.instructions.set(fin,new MethodInsnNode(Opcodes.INVOKESTATIC,cn.name,get.name,get.desc,false));}}}}}}}  }
class C{  public float floatValue(){  return (float)doubleValue;}  }
class C{  public void sendUrgentData(int data) throws IOException {  if (!getImpl().supportsUrgentData()) {    throw new SocketException("Urgent data not supported");  }  getImpl().sendUrgentData(data);}  }
class C{  public CoreTokenException(int errorCode,Throwable cause){  super(cause);  this.errorCode=errorCode;  this.message=getLocalizedMessage(Locale.getDefault());}  }
class C{  public boolean isEditing(JTree tree){  return (editingComponent != null);}  }
class C{  protected void selectPreviousIndex(){  int s=list.getSelectedIndex();  if (s > 0) {    s-=1;    list.setSelectedIndex(s);    list.ensureIndexIsVisible(s);  }}  }
class C{  protected void shutdown(){  alert[0]=0;  alert[1]=0;  recordProtocol=null;}  }
class C{  public String toString(){  int iMax=array.length - 1;  if (iMax == -1)   return "[]";  StringBuilder b=new StringBuilder();  b.append('[');  for (int i=0; ; i++) {    b.append(getRaw(byteOffset(i)));    if (i == iMax)     return b.append(']').toString();    b.append(',').append(' ');  }}  }
class C{  public boolean hasAccessType(EnumAccessType accessType){  List<PermBindRulePair> pairs=getPermBindRulePairs();  for (  PermBindRulePair p : pairs) {    if (p.hasAccessType(accessType)) {      return true;    }  }  return false;}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  String authModule=getStringOptionValue(AUTH_MODULE);  ServiceSchema ss=getServiceSchema(ISAuthConstants.AUTH_SERVICE_NAME,null,"Global");  IOutput outputWriter=getOutputWriter();  try {    String[] params={ISAuthConstants.AUTH_SERVICE_NAME};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_REGISTER_AUTH_MODULE",params);    Map attrValues=ss.getAttributeDefaults();    Set values=(Set)attrValues.get(AUTH_AUTHENTICATOR_ATTR);    if ((values == null) || values.isEmpty()) {      values=new HashSet(2);    }    values.add(authModule);    ss.setAttributeDefaults(AUTH_AUTHENTICATOR_ATTR,values);    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_REGISTER_AUTH_MODULE",params);    outputWriter.printlnMessage(getResourceString("register-auth-module-succeeded"));  } catch (  SSOException e) {    String[] args={ISAuthConstants.AUTH_SERVICE_NAME,e.getMessage()};    debugError("RegisterAuthModule.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_REGISTER_AUTH_MODULE",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={ISAuthConstants.AUTH_SERVICE_NAME,e.getMessage()};    debugError("RegisterAuthModule.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_REGISTER_AUTH_MODULE",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  @Override protected MeasureOutput measure(int width,int height){  int screenH=WXViewUtils.getScreenHeight(WXEnvironment.sApplication);  int weexH=WXViewUtils.getWeexHeight(mInstanceId);  int outHeight=height > (weexH >= screenH ? screenH : weexH) ? weexH - mAbsoluteY : height;  return super.measure(width,outHeight);}  }
class C{  public boolean isMutable(){  return isMutable;}  }
class C{  private String stringifyIP(byte[] ip){  String temp="";  for (int i=0; i < ip.length / 2; i++) {    temp+=Integer.toString(ip[i] & 0x00FF) + ".";  }  temp=temp.substring(0,temp.length() - 1);  temp+="/";  for (int i=ip.length / 2; i < ip.length; i++) {    temp+=Integer.toString(ip[i] & 0x00FF) + ".";  }  temp=temp.substring(0,temp.length() - 1);  return temp;}  }
class C{  private boolean isImplicitImport(String name){  Boolean yes=implicitImports.get(name);  if (yes != null) {    return yes;  }  try {    Class.forName("java.lang." + name);    yes=true;  } catch (  Exception e) {    yes=false;  }  implicitImports.put(name,yes);  return yes;}  }
class C{  public char[] GetSuffix(int len){  char[] ret=new char[len];  if ((bufpos + 1) >= len)   System.arraycopy(buffer,bufpos - len + 1,ret,0,len); else {    System.arraycopy(buffer,bufsize - (len - bufpos - 1),ret,0,len - bufpos - 1);    System.arraycopy(buffer,0,ret,len - bufpos - 1,bufpos + 1);  }  return ret;}  }
class C{  TemporalAccessor resolve(ResolverStyle resolverStyle,Set<TemporalField> resolverFields){  if (resolverFields != null) {    fieldValues.keySet().retainAll(resolverFields);  }  this.resolverStyle=resolverStyle;  resolveFields();  resolveTimeLenient();  crossCheck();  resolvePeriod();  resolveFractional();  resolveInstant();  return this;}  }
class C{  long parseDir(String line,String path) throws IOException {  int bytesStart=0;  int bytesEnd=0;  int j=line.length() - 1;  innerLoop1:   while (j >= 0) {    char c=line.charAt(j);    if (Character.isDigit(c)) {      bytesEnd=j + 1;      break innerLoop1;    }    j--;  }  innerLoop2:   while (j >= 0) {    char c=line.charAt(j);    if (!Character.isDigit(c) && c != ',' && c != '.') {      bytesStart=j + 1;      break innerLoop2;    }    j--;  }  if (j < 0) {    throw new IOException("Command line 'dir /-c' did not return valid info " + "for path '" + path + "'");  }  StringBuilder buf=new StringBuilder(line.substring(bytesStart,bytesEnd));  for (int k=0; k < buf.length(); k++) {    if (buf.charAt(k) == ',' || buf.charAt(k) == '.') {      buf.deleteCharAt(k--);    }  }  return parseBytes(buf.toString(),path);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == null) {    return false;  }  if (obj.getClass() != getClass()) {    return false;  }  final RSInfo rsInfo=(RSInfo)obj;  return rsServerId == rsInfo.getId() && generationId == rsInfo.getGenerationId() && groupId == rsInfo.getGroupId() && weight == rsInfo.getWeight();}  }
class C{  private void disableMaintenanceMode(){synchronized (maintenanceEnabled) {    if (maintenanceEnabled.getAndSet(false)) {      maintenanceFilter.disableMaintenanceMode();    }  }}  }
class C{  protected boolean shouldAudit(ConfigOperation operation){  return auditEventPublisher.isAuditing(realm,CONFIG_TOPIC,EventName.AM_CONFIG_CHANGE) && isAudited(operation);}  }
class C{  public CodeException(String msg,Throwable throwable){  super(msg,throwable);}  }
class C{  void addRESTRemotePolicyListener(SSOToken appToken,String serviceName,String notificationURL){  addRESTRemotePolicyListener(appToken,serviceName,notificationURL,false);}  }
class C{  protected boolean isDirectorySelected(){  return directorySelected;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namespaceURI02.class,args);}  }
class C{  static Object[] chooseLocalizedText(XMPNode arrayNode,String genericLang,String specificLang) throws XMPException {  if (!arrayNode.getOptions().isArrayAltText()) {    throw new XMPException("Localized text array is not alt-text",XMPError.BADXPATH);  } else   if (!arrayNode.hasChildren()) {    return new Object[]{new Integer(XMPNodeUtils.CLT_NO_VALUES),null};  }  int foundGenericMatches=0;  XMPNode resultNode=null;  XMPNode xDefault=null;  for (Iterator it=arrayNode.iterateChildren(); it.hasNext(); ) {    XMPNode currItem=(XMPNode)it.next();    if (currItem.getOptions().isCompositeProperty()) {      throw new XMPException("Alt-text array item is not simple",XMPError.BADXPATH);    } else     if (!currItem.hasQualifier() || !XML_LANG.equals(currItem.getQualifier(1).getName())) {      throw new XMPException("Alt-text array item has no language qualifier",XMPError.BADXPATH);    }    String currLang=currItem.getQualifier(1).getValue();    if (specificLang.equals(currLang)) {      return new Object[]{new Integer(XMPNodeUtils.CLT_SPECIFIC_MATCH),currItem};    } else     if (genericLang != null && currLang.startsWith(genericLang)) {      if (resultNode == null) {        resultNode=currItem;      }      foundGenericMatches++;    } else     if (X_DEFAULT.equals(currLang)) {      xDefault=currItem;    }  }  if (foundGenericMatches == 1) {    return new Object[]{new Integer(XMPNodeUtils.CLT_SINGLE_GENERIC),resultNode};  } else   if (foundGenericMatches > 1) {    return new Object[]{new Integer(XMPNodeUtils.CLT_MULTIPLE_GENERIC),resultNode};  } else   if (xDefault != null) {    return new Object[]{new Integer(XMPNodeUtils.CLT_XDEFAULT),xDefault};  } else {    return new Object[]{new Integer(XMPNodeUtils.CLT_FIRST_ITEM),arrayNode.getChild(1)};  }}  }
class C{  private static void extractFilesFromApplicationString(String data,List<File> files) throws IOException {  ByteArrayInputStream bais=new ByteArrayInputStream(Base64.decodeBase64(data));  try (ZipInputStream zis=new ZipInputStream(bais)){    byte[] buf=new byte[32 * 1024];    for (int i=0; i < files.size(); i++) {      try (FileOutputStream fos=new FileOutputStream(files.get(i))){        zis.getNextEntry();        int numRead;        while ((numRead=zis.read(buf)) >= 0) {          fos.write(buf,0,numRead);        }      }     }  } }  }
class C{  public void destroyToken(SSOToken token) throws SSOException {  getProvider(token).destroyToken(token);}  }
class C{  public boolean equals(TextLayout rhs){  if (rhs == null) {    return false;  }  if (rhs == this) {    return true;  }  ensureCache();  return textLine.equals(rhs.textLine);}  }
class C{  public void addChild(XMPNode node) throws XMPException {  assertChildNotExisting(node.getName());  node.setParent(this);  getChildren().add(node);}  }
class C{  protected void cleanupChildren(){  if (children.size() == 0) {    children=null;  }}  }
class C{  protected AWTKeyStroke(){}  }
class C{  static Date decodeUTCTimeValue(final String valueString) throws DecodeException {  try {synchronized (DATE_FORMAT_LOCK) {switch (valueString.charAt(0)) {case '0':case '1':case '2':case '3':case '4':        DATE_FORMAT.set2DigitYearStart(datum2000);      break;case '5':case '6':case '7':case '8':case '9':default :    DATE_FORMAT.set2DigitYearStart(datum1900);  break;}return DATE_FORMAT.parse(valueString);}} catch (final Exception e) {final LocalizableMessage message=ERR_ATTR_SYNTAX_UTC_TIME_CANNOT_PARSE.get(valueString,e);final DecodeException de=DecodeException.error(message,e);logger.debug(LocalizableMessage.raw("%s",de));throw de;}}  }
class C{  public WordIterator(){  this(Locale.getDefault());}  }
class C{  public boolean isValid(){  return messenger.isRegistrationValid(this);}  }
class C{  public WildcardFilter(String[] wildcards){  if (wildcards == null) {    throw new IllegalArgumentException("The wildcard array must not be null");  }  this.wildcards=new String[wildcards.length];  System.arraycopy(wildcards,0,this.wildcards,0,wildcards.length);}  }
class C{  public static String render(XMPDateTime dateTime){  StringBuffer buffer=new StringBuffer();  if (dateTime.hasDate()) {    DecimalFormat df=new DecimalFormat("0000",new DecimalFormatSymbols(Locale.ENGLISH));    buffer.append(df.format(dateTime.getYear()));    if (dateTime.getMonth() == 0) {      return buffer.toString();    }    df.applyPattern("'-'00");    buffer.append(df.format(dateTime.getMonth()));    if (dateTime.getDay() == 0) {      return buffer.toString();    }    buffer.append(df.format(dateTime.getDay()));    if (dateTime.hasTime()) {      buffer.append('T');      df.applyPattern("00");      buffer.append(df.format(dateTime.getHour()));      buffer.append(':');      buffer.append(df.format(dateTime.getMinute()));      if (dateTime.getSecond() != 0 || dateTime.getNanoSecond() != 0) {        double seconds=dateTime.getSecond() + dateTime.getNanoSecond() / 1e9d;        df.applyPattern(":00.#########");        buffer.append(df.format(seconds));      }      if (dateTime.hasTimeZone()) {        long timeInMillis=dateTime.getCalendar().getTimeInMillis();        int offset=dateTime.getTimeZone().getOffset(timeInMillis);        if (offset == 0) {          buffer.append('Z');        } else {          int thours=offset / 3600000;          int tminutes=Math.abs(offset % 3600000 / 60000);          df.applyPattern("+00;-00");          buffer.append(df.format(thours));          df.applyPattern(":00");          buffer.append(df.format(tminutes));        }      }    }  }  return buffer.toString();}  }
class C{  public static ModificationType valueOf(final int intValue){  ModificationType result=null;  if (0 <= intValue && intValue < ELEMENTS.length) {    result=ELEMENTS[intValue];  }  if (result == null) {    result=new ModificationType(intValue,"unknown(" + intValue + ")",Enum.UNKNOWN);  }  return result;}  }
class C{  boolean isVersionNewer(){  return VersionUtils.isVersionNewer();}  }
class C{  @Override public int read(byte[] bytes) throws IOException {  return read(bytes,0,bytes.length);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childValue;  int childLength;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("name");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.appendData(", Esquire");  childValue=child.getData();  childLength=childValue.length();  assertEquals("characterdataAppendDataAssert",24,childLength);}  }
class C{  public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {  if (DEBUG) {    System.out.println("startElement: uri: " + uri + ", localname: "+ localName+ ", qname: "+ qName+ ", atts: "+ attributes);    boolean DEBUG_ATTRS=true;    if (DEBUG_ATTRS & attributes != null) {      int n=attributes.getLength();      if (n == 0)       System.out.println("\tempty attribute list"); else       for (int i=0; i < n; i++)       System.out.println("\t attr: uri: " + attributes.getURI(i) + ", localname: "+ attributes.getLocalName(i)+ ", qname: "+ attributes.getQName(i)+ ", type: "+ attributes.getType(i)+ ", value: "+ attributes.getValue(i));    }  }  charactersFlush();  int exName=m_expandedNameTable.getExpandedTypeID(uri,localName,DTM.ELEMENT_NODE);  String prefix=getPrefix(qName,uri);  int prefixIndex=(null != prefix) ? m_valuesOrPrefixes.stringToIndex(qName) : 0;  int elemNode=addNode(DTM.ELEMENT_NODE,exName,m_parents.peek(),m_previous,prefixIndex,true);  if (m_indexing)   indexNode(exName,elemNode);  m_parents.push(elemNode);  int startDecls=m_contextIndexes.peek();  int nDecls=m_prefixMappings.size();  int prev=DTM.NULL;  if (!m_pastFirstElement) {    prefix="xml";    String declURL="http://www.w3.org/XML/1998/namespace";    exName=m_expandedNameTable.getExpandedTypeID(null,prefix,DTM.NAMESPACE_NODE);    int val=m_valuesOrPrefixes.stringToIndex(declURL);    prev=addNode(DTM.NAMESPACE_NODE,exName,elemNode,prev,val,false);    m_pastFirstElement=true;  }  for (int i=startDecls; i < nDecls; i+=2) {    prefix=(String)m_prefixMappings.elementAt(i);    if (prefix == null)     continue;    String declURL=(String)m_prefixMappings.elementAt(i + 1);    exName=m_expandedNameTable.getExpandedTypeID(null,prefix,DTM.NAMESPACE_NODE);    int val=m_valuesOrPrefixes.stringToIndex(declURL);    prev=addNode(DTM.NAMESPACE_NODE,exName,elemNode,prev,val,false);  }  int n=attributes.getLength();  for (int i=0; i < n; i++) {    String attrUri=attributes.getURI(i);    String attrQName=attributes.getQName(i);    String valString=attributes.getValue(i);    prefix=getPrefix(attrQName,attrUri);    int nodeType;    String attrLocalName=attributes.getLocalName(i);    if ((null != attrQName) && (attrQName.equals("xmlns") || attrQName.startsWith("xmlns:"))) {      if (declAlreadyDeclared(prefix))       continue;      nodeType=DTM.NAMESPACE_NODE;    } else {      nodeType=DTM.ATTRIBUTE_NODE;      if (attributes.getType(i).equalsIgnoreCase("ID"))       setIDAttribute(valString,elemNode);    }    if (null == valString)     valString="";    int val=m_valuesOrPrefixes.stringToIndex(valString);    if (null != prefix) {      prefixIndex=m_valuesOrPrefixes.stringToIndex(attrQName);      int dataIndex=m_data.size();      m_data.addElement(prefixIndex);      m_data.addElement(val);      val=-dataIndex;    }    exName=m_expandedNameTable.getExpandedTypeID(attrUri,attrLocalName,nodeType);    prev=addNode(nodeType,exName,elemNode,prev,val,false);  }  if (DTM.NULL != prev)   m_nextsib.setElementAt(DTM.NULL,prev);  if (null != m_wsfilter) {    short wsv=m_wsfilter.getShouldStripSpace(makeNodeHandle(elemNode),this);    boolean shouldStrip=(DTMWSFilter.INHERIT == wsv) ? getShouldStripWhitespace() : (DTMWSFilter.STRIP == wsv);    pushShouldStripWhitespace(shouldStrip);  }  m_previous=DTM.NULL;  m_contextIndexes.push(m_prefixMappings.size());}  }
class C{  public NameIDMappingRequest createNameIDMappingRequest(){  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.NAMEIDMAPPING_REQ);  if (obj == null) {    return new NameIDMappingRequestImpl();  } else {    return (NameIDMappingRequest)obj;  }}  }
class C{  public void visitOuterClass(String owner,String name,String desc){  if (cv != null) {    cv.visitOuterClass(owner,name,desc);  }}  }
class C{  public Support_StringWriter(int initialSize){  if (initialSize >= 0) {    buf=new StringBuffer(initialSize);    lock=buf;  } else {    throw new IllegalArgumentException();  }}  }
class C{  protected boolean scrollRight(TextView widget,Spannable buffer,int amount){  final int maxScrollX=getScrollBoundsRight(widget) - getInnerWidth(widget);  int scrollX=widget.getScrollX();  if (scrollX < maxScrollX) {    scrollX=Math.min(scrollX + getCharacterWidth(widget) * amount,maxScrollX);    widget.scrollTo(scrollX,widget.getScrollY());    return true;  }  return false;}  }
class C{  public static Pose matrixToPose(Matrix4 m){  Vector3 p=m.getTranslation();  Quaternion q=new Quaternion();  q.fromMatrix(m);  q.conjugate();  return new Pose(p,q);}  }
class C{  public boolean isEmpty(){  return (curves.size() == 0);}  }
class C{  protected boolean isRootPaneCheckingEnabled(){  return rootPaneCheckingEnabled;}  }
class C{  public static TypeReference newExceptionReference(int exceptionIndex){  return new TypeReference((THROWS << 24) | (exceptionIndex << 8));}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_elementcreatenewattribute.class,args);}  }
class C{  private static int lastIndexOf(Object o,Object[] elements,int index){  if (o == null) {    for (int i=index; i >= 0; i--)     if (elements[i] == null)     return i;  } else {    for (int i=index; i >= 0; i--)     if (o.equals(elements[i]))     return i;  }  return -1;}  }
class C{  public XMLFilterImpl(XMLReader parent){  setParent(parent);}  }
class C{  private void verifyDN2ID(ReadableTransaction txn,EntryID entryID,Entry entry){  DN dn=entry.getName();  try {    EntryID id=dn2id.get(txn,dn);    if (id == null) {      logger.error(ERR_VERIFY_DN2ID_MISSING_KEY,dn);      errorCount++;    } else     if (!id.equals(entryID)) {      logger.error(ERR_VERIFY_DN2ID_WRONG_ID,id.longValue(),entryID.longValue(),dn);      errorCount++;    }  } catch (  Exception e) {    if (logger.isTraceEnabled()) {      logger.traceException(e);      logger.trace("File dn2id has error reading key %s: %s.%n",dn,e.getMessage());    }    errorCount++;  }  DN parentDN=getParent(dn);  if (parentDN != null) {    try {      EntryID id=dn2id.get(txn,parentDN);      if (id == null) {        logger.error(ERR_VERIFY_DN2ID_MISSING_KEY,parentDN);        errorCount++;      }    } catch (    Exception e) {      if (logger.isTraceEnabled()) {        logger.traceException(e);        logger.trace("File dn2id has error reading key %s: %s.%n",parentDN,e.getMessage());      }      errorCount++;    }  }}  }
class C{  private StringBuffer format(BigDecimal number,StringBuffer result,FieldPosition fieldPosition){  fieldPosition.setBeginIndex(0);  fieldPosition.setEndIndex(0);  return format(number,result,fieldPosition.getFieldDelegate());}  }
class C{  public boolean bool() throws javax.xml.transform.TransformerException {  error(XPATHErrorResources.ER_CANT_CONVERT_TO_NUMBER,new Object[]{getTypeString()});  return false;}  }
class C{  public void trigger(Date time){  taskList.remove(time);}  }
class C{  public String toString(){  String text="";switch (m_timeout) {case _RETRANSMIT:    text="Retransmission Timeout";  break;case _TRANSACTION:text="Transaction Timeout";break;default :text="Error while printing Timeout";break;}return text;}  }
class C{  public int search(int o){  int i=lastIndexOf(o);  if (i >= 0) {    return size() - i;  }  return -1;}  }
class C{  public synchronized void rejectEntry(Entry e,LocalizableMessage message){  BufferedWriter rejectWriter=importConfig.getRejectWriter();  entriesRejected.incrementAndGet();  if (rejectWriter != null) {    try {      if (message != null && message.length() > 0) {        rejectWriter.write("# ");        rejectWriter.write(message.toString());        rejectWriter.newLine();      }      rejectWriter.write(e.getName().toString());      rejectWriter.newLine();      List<StringBuilder> eLDIF=e.toLDIF();      for (      StringBuilder l : eLDIF) {        rejectWriter.write(l.toString());        rejectWriter.newLine();      }      rejectWriter.newLine();    } catch (    IOException ex) {      logger.traceException(ex);    }  }}  }
class C{  private boolean supportedType(Class<?> ret){  for (int i=0; i < supportedTypes.length; i++) {    if (ret == supportedTypes[i]) {      return true;    }  }  if (isBeanCompatible(ret)) {    return true;  }  return false;}  }
class C{  private void delayedExecute(RunnableScheduledFuture<?> task){  if (isShutdown())   reject(task); else {    super.getQueue().add(task);    if (isShutdown() && !canRunInCurrentRunState(task.isPeriodic()) && remove(task))     task.cancel(false); else     ensurePrestart();  }}  }
class C{  private static void validate(int hours,int minutes,int seconds){  if (hours < -18 || hours > 18) {    throw new DateTimeException("Zone offset hours not in valid range: value " + hours + " is not in the range -18 to 18");  }  if (hours > 0) {    if (minutes < 0 || seconds < 0) {      throw new DateTimeException("Zone offset minutes and seconds must be positive because hours is positive");    }  } else   if (hours < 0) {    if (minutes > 0 || seconds > 0) {      throw new DateTimeException("Zone offset minutes and seconds must be negative because hours is negative");    }  } else   if ((minutes > 0 && seconds < 0) || (minutes < 0 && seconds > 0)) {    throw new DateTimeException("Zone offset minutes and seconds must have the same sign");  }  if (Math.abs(minutes) > 59) {    throw new DateTimeException("Zone offset minutes not in valid range: abs(value) " + Math.abs(minutes) + " is not in the range 0 to 59");  }  if (Math.abs(seconds) > 59) {    throw new DateTimeException("Zone offset seconds not in valid range: abs(value) " + Math.abs(seconds) + " is not in the range 0 to 59");  }  if (Math.abs(hours) == 18 && (Math.abs(minutes) > 0 || Math.abs(seconds) > 0)) {    throw new DateTimeException("Zone offset not in valid range: -18:00 to +18:00");  }}  }
class C{  public void testGetMGFAlgorithm(){  String mdName="SHA-1";  String mgfName="MGF1";  AlgorithmParameterSpec mgfSpec=MGF1ParameterSpec.SHA1;  PSource pSrc=PSource.PSpecified.DEFAULT;  OAEPParameterSpec ps=new OAEPParameterSpec(mdName,mgfName,mgfSpec,pSrc);  assertTrue("The returned value does not equal to the " + "value specified in the constructor.",ps.getMGFAlgorithm().equals(mgfName));}  }
class C{  @Deprecated public ShapelessRecipe addIngredient(Material ingredient,int rawdata){  return addIngredient(1,ingredient,rawdata);}  }
class C{  public static void removeAttributeValue(SSOToken token,Guid guid,String name,String value) throws UMSException {  if (guid == null) {    throw new IllegalArgumentException(i18n.getString(IUMSConstants.NULL_GUIDS));  }  if (token == null) {    throw new IllegalArgumentException(i18n.getString(IUMSConstants.NULL_TOKEN));  }  try {    SSOTokenManager.getInstance().validateToken(token);  } catch (  SSOException se) {    throw new UMSException(i18n.getString(IUMSConstants.INVALID_TOKEN),se);  }  try {    DataLayer.getInstance().removeAttributeValue(token.getPrincipal(),guid,name,value);  } catch (  SSOException se) {    throw new UMSException(i18n.getString(IUMSConstants.BAD_TOKEN_HDL),se);  }}  }
class C{  @Override public void initializeJDBCConn(){  try {    System.out.println("StreamingQuoteDAOModeQuote.initializeJDBCConn(): creating JDBC connection for Streaming Quote...");    Class.forName(JDBC_DRIVER);    conn=DriverManager.getConnection(DB_URL,USER,PASS);  } catch (  ClassNotFoundException e) {    System.out.println("StreamingQuoteDAOModeQuote.initializeJDBCConn(): ClassNotFoundException: " + JDBC_DRIVER);    e.printStackTrace();  }catch (  SQLException e) {    System.out.println("StreamingQuoteDAOModeQuote.initializeJDBCConn(): SQLException on getConnection");    e.printStackTrace();  }}  }
class C{  public View findViewById(int id){  View v;  if (mSlidingMenu != null) {    v=mSlidingMenu.findViewById(id);    if (v != null)     return v;  }  return null;}  }
class C{  boolean engageShutdown(){  return shuttingDown.getAndSet(true);}  }
class C{  public boolean deleteAll(){  return database.delete(DATABASE_TABLE,null,null) > 0;}  }
class C{  public @Nonnull Collection<GlobalVariable> forJob(@CheckForNull Job<?,?> job){  return forRun(job != null ? job.getLastSuccessfulBuild() : null);}  }
class C{  protected void clearCoRoutine(){  clearCoRoutine(null);}  }
class C{  public QrCode(QrCode qr,int mask){  if (qr == null)   throw new NullPointerException();  if (mask < -1 || mask > 7)   throw new IllegalArgumentException("Mask value out of range");  version=qr.version;  size=qr.size;  errorCorrectionLevel=qr.errorCorrectionLevel;  isFunction=qr.isFunction;  modules=qr.modules.clone();  for (int i=0; i < modules.length; i++)   modules[i]=modules[i].clone();  applyMask(qr.mask);  this.mask=handleConstructorMasking(mask);}  }
class C{  protected final void copyAttributes(final int nodeID,SerializationHandler handler) throws SAXException {  for (int current=getFirstAttributeIdentity(nodeID); current != DTM.NULL; current=getNextAttributeIdentity(current)) {    int eType=_exptype2(current);    copyAttribute(current,eType,handler);  }}  }
class C{  private static boolean matchFiltersURL(String testPath,String requestPath){  if (testPath == null)   return false;  if (testPath.equals(requestPath))   return true;  if (testPath.equals("/*"))   return true;  if (testPath.endsWith("/*")) {    if (testPath.regionMatches(0,requestPath,0,testPath.length() - 2)) {      if (requestPath.length() == (testPath.length() - 2)) {        return true;      } else       if ('/' == requestPath.charAt(testPath.length() - 2)) {        return true;      }    }    return false;  }  if (testPath.startsWith("*.")) {    int slash=requestPath.lastIndexOf('/');    int period=requestPath.lastIndexOf('.');    if ((slash >= 0) && (period > slash) && (period != requestPath.length() - 1)&& ((requestPath.length() - period) == (testPath.length() - 1))) {      return (testPath.regionMatches(2,requestPath,period + 1,testPath.length() - 2));    }  }  return false;}  }
class C{  private static String createSOAPMessage(Request req) throws SAMLException {  if (req == null) {    throw new SAMLException(SAMLUtils.bundle.getString("nullInput"));  }  try {    StringBuffer envBegin=new StringBuffer(100);    envBegin.append("<").append(SAMLConstants.SOAP_ENV_PREFIX).append(":Envelope").append(SAMLConstants.SPACE).append("xmlns:").append(SAMLConstants.SOAP_ENV_PREFIX).append("=\"").append(SAMLConstants.SOAP_URI).append("\">").append(SAMLConstants.NL).append("<").append(SAMLConstants.SOAP_ENV_PREFIX).append(":Body>").append(SAMLConstants.NL);    StringBuffer envEnd=new StringBuffer(100);    envEnd.append(SAMLConstants.START_END_ELEMENT).append(SAMLConstants.SOAP_ENV_PREFIX).append(":Body>").append(SAMLConstants.NL).append(SAMLConstants.START_END_ELEMENT).append(SAMLConstants.SOAP_ENV_PREFIX).append(":Envelope>").append(SAMLConstants.NL);    StringBuffer sb=new StringBuffer(300);    sb.append(envBegin).append(req.toString(true,true)).append(envEnd);    return (sb.toString());  } catch (  Exception e) {    throw new SAMLException(e.getMessage());  }}  }
class C{  public static FSLogoutResponse parseURLEncodedRequest(HttpServletRequest request) throws FSMsgException, SAMLException {  FSLogoutResponse retLogoutResponse=new FSLogoutResponse();  try {    FSUtils.debug.message("checking minor version");    retLogoutResponse.majorVersion=Integer.parseInt(request.getParameter(IFSConstants.MAJOR_VERSION));    retLogoutResponse.minorVersion=Integer.parseInt(request.getParameter(IFSConstants.MINOR_VERSION));  } catch (  NumberFormatException ex) {    throw new FSMsgException("invalidNumber",null);  }  String requestID=request.getParameter(IFSConstants.RESPONSE_ID);  if (requestID != null) {    retLogoutResponse.responseID=requestID;  } else {    String[] args={IFSConstants.RESPONSE_ID};    throw new FSMsgException("missingAttribute",args);  }  retLogoutResponse.inResponseTo=request.getParameter(IFSConstants.IN_RESPONSE_TO);  String instantString=request.getParameter(IFSConstants.ISSUE_INSTANT);  if (instantString == null || instantString.length() == 0) {    String[] args={IFSConstants.ISSUE_INSTANT};    throw new FSMsgException("missingAttribute",args);  }  try {    retLogoutResponse.issueInstant=DateUtils.stringToDate(instantString);  } catch (  ParseException e) {    throw new FSMsgException("parseError",null);  }  FSUtils.debug.message(" get provider Id");  String providerID=request.getParameter(IFSConstants.PROVIDER_ID);  if (providerID != null) {    retLogoutResponse.providerId=providerID;    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("ProviderID : " + retLogoutResponse.providerId);    }  } else {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("ProviderID : " + retLogoutResponse.providerId);    }    throw new FSMsgException("missingElement",null);  }  String relayState=request.getParameter(IFSConstants.RELAY_STATE);  if (relayState != null) {    retLogoutResponse.relayState=relayState;    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("RelayState:" + retLogoutResponse.relayState);    }  }  String value=request.getParameter(IFSConstants.VALUE);  if (value != null) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("Status : " + value);    }    StatusCode statusCode=new StatusCode(value);    retLogoutResponse.status=new Status(statusCode);  } else {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("Status : " + value);    }    throw new FSMsgException("missingElement",null);  }  FSUtils.debug.message("Returning Logout response Object");  return retLogoutResponse;}  }
class C{  static Promise<Boolean> promiseBoolean(){  return new BasePromise<>();}  }
class C{  protected void abandon(PooledConnection con){  if (con == null)   return;  try {    con.lock();    String trace=con.getStackTrace();    if (getPoolProperties().isLogAbandoned()) {      log.warn("Connection has been abandoned " + con + ":"+ trace);    }    if (jmxPool != null) {      jmxPool.notify(org.apache.tomcat.jdbc.pool.jmx.ConnectionPool.NOTIFY_ABANDON,trace);    }    release(con);  }  finally {    con.unlock();  }}  }
class C{  public final void toString(StringBuilder builder){  builder.append(getName());}  }
class C{  public SQLInvalidAuthorizationSpecException(String reason,String SQLState,Throwable cause){  super(reason,SQLState,cause);}  }
class C{  public void zoom_out(Point2D p_position){  double zoom_factor=1 / ZOOM_FACTOR;  zoom(zoom_factor,p_position);}  }
class C{  public void deleteAssignableDynamicGroups(Set groupDNs) throws AMException, SSOException {  Iterator iter=groupDNs.iterator();  while (iter.hasNext()) {    String groupDN=(String)iter.next();    AMAssignableDynamicGroup group=new AMAssignableDynamicGroupImpl(super.token,groupDN);    group.delete();  }}  }
class C{  public void insertIndexInterval(int index,int length,boolean before){  int insMinIndex=(before) ? index : index + 1;  int insMaxIndex=(insMinIndex + length) - 1;  for (int i=maxIndex; i >= insMinIndex; i--) {    setState(i + length,value.get(i));  }  boolean setInsertedValues=value.get(index);  for (int i=insMinIndex; i <= insMaxIndex; i++) {    setState(i,setInsertedValues);  }}  }
class C{  public void open(File file) throws IOException {  checkAWTPermission();  checkExec();  checkActionSupport(Action.OPEN);  checkFileValidation(file);  peer.open(file);}  }
class C{  public boolean isExpert(){  return expert;}  }
class C{  public boolean removeAudience(java.lang.String audience){  if ((audience != null) && !(audience.length() == 0)) {    _audience.remove(audience);    return true;  } else   return false;}  }
class C{  public static Mp4MetaBox createiTunesStyleMetaBox(int childrenSize){  Mp4BoxHeader metaHeader=new Mp4BoxHeader(Mp4AtomIdentifier.META.getFieldName());  metaHeader.setLength(Mp4BoxHeader.HEADER_LENGTH + Mp4MetaBox.FLAGS_LENGTH + childrenSize);  ByteBuffer metaData=ByteBuffer.allocate(Mp4MetaBox.FLAGS_LENGTH);  Mp4MetaBox metaBox=new Mp4MetaBox(metaHeader,metaData);  return metaBox;}  }
class C{  public void organizationConfigChanged(String serviceName,String version,String orgName,String groupName,String serviceComponent,int type){  String certModulePortNumber=null;  String certModuleLevel=null;  if (orgName == null) {    orgName=SMSEntry.getRootSuffix();  }  try {    ServiceConfig config=sConfigMgr.getOrganizationConfig(orgName,null);    Map configAttrs=config.getAttributes();    if (debug.messageEnabled()) {      debug.message("GatewayServlet:configAttrs :  " + configAttrs.toString());    }    Set attrs=(Set)configAttrs.get(CERT_PORT_ATTR);    if (attrs == null) {      return;    }    Iterator values=attrs.iterator();    if (values.hasNext()) {      certModulePortNumber=(String)values.next();    }    attrs=(Set)configAttrs.get(AMAuthConfigUtils.getAuthLevelAttribute(configAttrs,moduleName));    if (attrs == null) {      return;    }    values=attrs.iterator();    if (values.hasNext()) {      certModuleLevel=(String)values.next();    }    AuthServiceConfigInfo info=new AuthServiceConfigInfo(orgName,moduleName,certModulePortNumber,certModuleLevel);    AuthConfigMap.put(orgName,info);  } catch (  Exception e) {    debug.error("GatewayServletUtils : " + "Unable to get Cert Module Level and/or Port Number",e);  }}  }
class C{  public int hashCode(){  return this.getClass().hashCode();}  }
class C{  public void removeAttributes(AttributeSet attrs){  StyleContext context=StyleContext.this;  if (attrs == this) {    attributes=context.getEmptySet();  } else {    attributes=context.removeAttributes(attributes,attrs);  }  fireStateChanged();}  }
class C{  private int[] multiplyToLen(int[] x,int xlen,int[] y,int ylen,int[] z){  int xstart=xlen - 1;  int ystart=ylen - 1;  if (z == null || z.length < (xlen + ylen))   z=new int[xlen + ylen];  long carry=0;  for (int j=ystart, k=ystart + 1 + xstart; j >= 0; j--, k--) {    long product=(y[j] & LONG_MASK) * (x[xstart] & LONG_MASK) + carry;    z[k]=(int)product;    carry=product >>> 32;  }  z[xstart]=(int)carry;  for (int i=xstart - 1; i >= 0; i--) {    carry=0;    for (int j=ystart, k=ystart + 1 + i; j >= 0; j--, k--) {      long product=(y[j] & LONG_MASK) * (x[i] & LONG_MASK) + (z[k] & LONG_MASK) + carry;      z[k]=(int)product;      carry=product >>> 32;    }    z[i]=(int)carry;  }  return z;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String badString;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("address");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();{    boolean success=false;    try {      badString=child.substringData(-5,3);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INDEX_SIZE_ERR);    }    assertTrue("throws_INDEX_SIZE_ERR",success);  }}  }
class C{  public void removeMember(Guid guid) throws UMSException {  PersistentObject member=UMSObject.getObject(getPrincipal(),guid);  removeMember(member);}  }
class C{  private static boolean equalsMayBeNullOrZeroLen(String s1,String s2){  int len1=(s1 == null) ? 0 : s1.length();  int len2=(s2 == null) ? 0 : s2.length();  return (len1 != len2) ? false : (len1 == 0) ? true : s1.equals(s2);}  }
class C{  protected void processKeyEvent(KeyEvent evt){  MenuSelectionManager.defaultManager().processKeyEvent(evt);  if (evt.isConsumed())   return;  super.processKeyEvent(evt);}  }
class C{  public JCheckBoxMenuItem(String text,boolean b){  this(text,null,b);}  }
class C{  @Override public void execute() throws MojoExecutionException, MojoFailureException {  String projectBuildDir=project.getBuild().getDirectory();  if (!outputDirectory.contains(projectBuildDir)) {    String errorMsg=String.format("outputDirectory parameter (%s) must be included " + "in ${project.build.directory} (%s)",outputDirectory,projectBuildDir);    getLog().error(errorMsg);    throw new MojoExecutionException(errorMsg);  }  Map<String,Object> map=new HashMap<>();  map.put("year",new SimpleDateFormat("yyyy").format(new Date()));  map.put("lang",locale);  map.put("title",LOG_REF_TITLE.get());  map.put("indexterm",LOG_REF_INDEXTERM.get());  map.put("intro",LOG_REF_INTRO.get());  List<Map<String,Object>> categories=new LinkedList<>();  for (  String category : messageFileNames) {    Map<String,Object> categoryMap=getCategoryMap(category);    if (!categoryMap.isEmpty()) {      categories.add(getCategoryMap(category));    }  }  map.put("categories",categories);  File file=new File(outputDirectory,"log-message-reference.xml");  try {    createOutputDirectory();    writeLogRef(file,"log-message-reference.ftl",map);  } catch (  Exception e) {    throw new MojoFailureException(e.getMessage(),e);  }}  }
class C{  @Indexable(type=IndexableType.DELETE) @Override public Foo deleteFoo(long fooId) throws PortalException {  return fooPersistence.remove(fooId);}  }
class C{  public int hashCode(){  return name.hashCode();}  }
class C{  private void createItemsLayout(){  if (itemsLayout == null) {    itemsLayout=new LinearLayout(getContext());    itemsLayout.setOrientation(LinearLayout.VERTICAL);  }}  }
class C{  public void add(URI uri,HttpCookie cookie){  if (cookie == null) {    throw new NullPointerException("cookie is null");  }  lock.lock();  try {    cookieJar.remove(cookie);    if (cookie.getMaxAge() != 0) {      cookieJar.add(cookie);      if (cookie.getDomain() != null) {        addIndex(domainIndex,cookie.getDomain(),cookie);      }      if (uri != null) {        addIndex(uriIndex,getEffectiveURI(uri),cookie);      }    }  }  finally {    lock.unlock();  }}  }
class C{  public boolean create_overlap_door(ExpandRoomObstacle p_other){  if (p_other == null)   return false;  if (door_exists(p_other))   return false;  if (!(item.is_route() && p_other.item.is_route()))   return false;  if (!item.shares_net(p_other.item))   return false;  if (item == p_other.item) {    if (!(item instanceof BrdTracep))     return false;    if (index_in_item != p_other.index_in_item + 1 && index_in_item != p_other.index_in_item - 1) {      return false;    }  }  ExpandDoor new_door=new ExpandDoor(this,p_other,PlaDimension.AREA);  add_door(new_door);  p_other.add_door(new_door);  return true;}  }
class C{  public String parseDTDMarkup() throws IOException {  StringBuilder strBuff=new StringBuilder();  ch=readCh();  while (true) {switch (ch) {case '>':      ch=readCh();    return strBuff.toString();case -1:  error("invalid.markup");return strBuff.toString();case '\n':ln++;ch=readCh();lfCount++;break;case '"':ch=readCh();break;case '\r':ln++;if ((ch=readCh()) == '\n') {ch=readCh();crlfCount++;} else {crCount++;}break;default :strBuff.append((char)(ch & 0xFF));ch=readCh();break;}}}  }
class C{  public Source newSource(int index) throws IOException {synchronized (DiskLruCache.this) {    if (entry.currentEditor != this) {      throw new IllegalStateException();    }    if (!entry.readable) {      return null;    }    try {      return fileSystem.source(entry.cleanFiles[index]);    } catch (    FileNotFoundException e) {      return null;    }  }}  }
class C{  private boolean tokenClientExists(String clientId,String relam,Context context){  try {    clientRegistrationStore.get(clientId,relam,context);  } catch (  InvalidClientException|NotFoundException e) {    return false;  }  return true;}  }
class C{  public void doLog(String key,String message){  if (logStatus) {    doLog(Locale.getString(rb,key,PWResetModelImpl.debug) + " " + message);  }}  }
class C{  protected void fireAncestorMoved(JComponent source,int id,Container ancestor,Container ancestorParent){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == AncestorListener.class) {      AncestorEvent ancestorEvent=new AncestorEvent(source,id,ancestor,ancestorParent);      ((AncestorListener)listeners[i + 1]).ancestorMoved(ancestorEvent);    }  }}  }
class C{  public XPathExpressionException(String message){  super(message);}  }
class C{  @Override public int hashCode(){  int hash=5;  hash=59 * hash + Objects.hashCode(this.name);  hash=59 * hash + Objects.hashCode(this.description);  return hash;}  }
class C{  private Properties loadLogFile(License license,boolean create){  Properties log=new Properties();  File logFile=getLogFile(license);  try {    if (create && logFile.createNewFile()) {      logger.fine("Created license log file: " + logFile.getAbsolutePath());    }    final InputStream in=new FileInputStream(logFile);    try {      log.load(in);    }  finally {      in.close();    }  } catch (  FileNotFoundException ex) {    if (create) {      logger.log(Level.SEVERE,"Unable to create license log file: " + logFile.getAbsolutePath(),ex);    } else {      logger.fine("Log file does not yet exist");    }  }catch (  IOException ex) {    logger.log(Level.WARNING,"Unable to access license log file: " + logFile.getAbsolutePath(),ex);  }  return log;}  }
class C{  public static int indexOfLastSeparator(String filename){  if (filename == null) {    return -1;  }  int lastUnixPos=filename.lastIndexOf(UNIX_SEPARATOR);  int lastWindowsPos=filename.lastIndexOf(WINDOWS_SEPARATOR);  return Math.max(lastUnixPos,lastWindowsPos);}  }
class C{  @SuppressWarnings("unchecked") public void writeLong(long x) throws SQLException {  attribs.add(Long.valueOf(x));}  }
class C{  @Override public final boolean equals(Object o){  if (o == this)   return true;  if (!(o instanceof RouteTracker))   return false;  RouteTracker that=(RouteTracker)o;  boolean equal=this.targetHost.equals(that.targetHost);  equal&=(this.localAddress == that.localAddress) || ((this.localAddress != null) && this.localAddress.equals(that.localAddress));  equal&=(this.proxyChain == that.proxyChain) || ((this.proxyChain != null) && (that.proxyChain != null) && (this.proxyChain.length == that.proxyChain.length));  equal&=(this.connected == that.connected) && (this.secure == that.secure) && (this.tunnelled == that.tunnelled)&& (this.layered == that.layered);  if (equal && (this.proxyChain != null)) {    for (int i=0; equal && (i < this.proxyChain.length); i++)     equal=this.proxyChain[i].equals(that.proxyChain[i]);  }  return equal;}  }
class C{  public void testDoubleValueNegRounded2(){  byte[] a={-128,1,2,3,4,5,36,23,1,-3,-5};  int aSign=-1;  double result=-1.547472643879479E26;  double aNumber=new BigInteger(aSign,a).doubleValue();  assertTrue(aNumber == result);}  }
class C{  public PdfPatternCanvas(PdfPattern.Tiling pattern,PdfDocument document){  super((PdfStream)pattern.getPdfObject(),pattern.getResources(),document);  this.tilingPattern=pattern;}  }
class C{  public static String downloadString(URL url,Proxy proxy,int readTimeout,int socketTimeout,String encoding,int triesCount){  IOException lastException=null;  for (int i=0; i < triesCount; i++) {    lastException=null;    HttpURLConnection connection=null;    InputStream inputStream=null;    try {      connection=(HttpURLConnection)(proxy == null ? url.openConnection() : url.openConnection(proxy));      connection.setReadTimeout(readTimeout);      connection.setConnectTimeout(socketTimeout);      connection.connect();      inputStream=connection.getInputStream();      return IOUtils.toString(inputStream,encoding);    } catch (    IOException ex) {      if (LOG.isDebugEnabled()) {        LOG.warn("Error downloading string from {}. Try number: {}. Cause:\r\n",url,triesCount,ex);      } else {        LOG.warn("Error downloading string from {}. Try number: {}. Cause:{}",url,triesCount,ex.getMessage());      }      lastException=ex;    } finally {      IOUtils.closeQuietly(inputStream);      if (connection != null) {        connection.disconnect();      }    }  }  if (lastException != null) {    LOG.error("Could not download string from url: " + url,lastException);  }  return null;}  }
class C{  public void disableVertexAttribute(String name){  int location=fetchAttributeLocation(name);  if (location == -1)   return;  GLES20.glDisableVertexAttribArray(location);}  }
class C{  private boolean hasChar(){  return this.pos < this.len;}  }
class C{  public Response createResponse(Element elem) throws XACMLException {  Object object=XACMLSDKUtils.getObjectInstance(XACMLConstants.RESPONSE,elem);  if (object == null) {    return new ResponseImpl(elem);  } else {    return (Response)object;  }}  }
class C{  public FrameBodyXSOA(byte textEncoding,String text){  super(textEncoding,text);}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.EncryptedAttributeElement createEncryptedAttributeElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.EncryptedAttributeElementImpl();}  }
class C{  public void comment(char ch[],int start,int length) throws org.xml.sax.SAXException {  int start_old=start;  if (m_inEntityRef)   return;  if (m_elemContext.m_startTagOpen) {    closeStartTag();    m_elemContext.m_startTagOpen=false;  } else   if (m_needToCallStartDocument) {    startDocumentInternal();    m_needToCallStartDocument=false;  }  try {    final int limit=start + length;    boolean wasDash=false;    if (m_cdataTagOpen)     closeCDATA();    if (shouldIndent())     indent();    final java.io.Writer writer=m_writer;    writer.write(COMMENT_BEGIN);    for (int i=start; i < limit; i++) {      if (wasDash && ch[i] == '-') {        writer.write(ch,start,i - start);        writer.write(" -");        start=i + 1;      }      wasDash=(ch[i] == '-');    }    if (length > 0) {      final int remainingChars=(limit - start);      if (remainingChars > 0)       writer.write(ch,start,remainingChars);      if (ch[limit - 1] == '-')       writer.write(' ');    }    writer.write(COMMENT_END);  } catch (  IOException e) {    throw new SAXException(e);  }  m_startNewLine=true;  if (m_tracer != null)   super.fireCommentEvent(ch,start_old,length);}  }
class C{  private <T>void registerResetModification(PropertyDefinition<T> pd,SortedSet<T> previousValues){  PropertyEditorModification<?> mod=getModification(pd);  SortedSet<T> originalValues;  if (mod != null) {    originalValues=new TreeSet<>(pd);    castAndAddValues(originalValues,mod.getOriginalValues(),pd);    removeModification(mod);  } else {    originalValues=new TreeSet<>(previousValues);  }  addModification(PropertyEditorModification.createResetModification(pd,originalValues));}  }
class C{  public static void processLogoutRequest(HttpServletRequest request,HttpServletResponse response,PrintWriter out,String samlRequest,String relayState) throws SAML2Exception, SessionException {  String method="processLogoutRequest : ";  if (debug.messageEnabled()) {    debug.message(method + "samlRequest : " + samlRequest);    debug.message(method + "relayState : " + relayState);  }  String rmethod=request.getMethod();  String binding=SAML2Constants.HTTP_REDIRECT;  if (rmethod.equals("POST")) {    binding=SAML2Constants.HTTP_POST;  }  String metaAlias=SAML2MetaUtils.getMetaAliasByUri(request.getRequestURI());  if ((SPCache.isFedlet) && ((metaAlias == null) || (metaAlias.length() == 0))) {    List spMetaAliases=sm.getAllHostedServiceProviderMetaAliases("/");    if ((spMetaAliases != null) && !spMetaAliases.isEmpty()) {      metaAlias=(String)spMetaAliases.get(0);    }    if ((metaAlias == null) || (metaAlias.length() == 0)) {      throw new SAML2Exception(SAML2Utils.bundle.getString("nullSPEntityID"));    }  }  String realm=SAML2Utils.getRealm(SAML2MetaUtils.getRealmByMetaAlias(metaAlias));  String spEntityID=sm.getEntityByMetaAlias(metaAlias);  if (!SAML2Utils.isSPProfileBindingSupported(realm,spEntityID,SAML2Constants.SLO_SERVICE,binding)) {    throw new SAML2Exception(SAML2Utils.bundle.getString("unsupportedBinding"));  }  LogoutRequest logoutReq=null;  if (rmethod.equals("POST")) {    logoutReq=LogoutUtil.getLogoutRequestFromPost(samlRequest,response);  } else   if (rmethod.equals("GET")) {    String decodedStr=SAML2Utils.decodeFromRedirect(samlRequest);    if (decodedStr == null) {      throw new SAML2Exception(SAML2Utils.bundle.getString("nullDecodedStrFromSamlRequest"));    }    logoutReq=ProtocolFactory.getInstance().createLogoutRequest(decodedStr);  }  if (logoutReq == null) {    if (debug.messageEnabled()) {      debug.message("SPSingleLogout:processLogoutRequest: logoutReq " + "is null");    }    return;  }  String location=null;  String idpEntityID=logoutReq.getIssuer().getValue();  boolean needToVerify=SAML2Utils.getWantLogoutRequestSigned(realm,spEntityID,SAML2Constants.SP_ROLE);  if (debug.messageEnabled()) {    debug.message(method + "metaAlias : " + metaAlias);    debug.message(method + "realm : " + realm);    debug.message(method + "idpEntityID : " + idpEntityID);    debug.message(method + "spEntityID : " + spEntityID);  }  if (needToVerify == true) {    boolean valid=false;    if (rmethod.equals("POST")) {      valid=LogoutUtil.verifySLORequest(logoutReq,realm,idpEntityID,spEntityID,SAML2Constants.SP_ROLE);    } else {      String queryString=request.getQueryString();      valid=SAML2Utils.verifyQueryString(queryString,realm,SAML2Constants.SP_ROLE,idpEntityID);    }    if (!valid) {      debug.error("SPSingleLogout.processLogoutRequest: " + "Invalid signature in SLO Request.");      throw new SAML2Exception(SAML2Utils.bundle.getString("invalidSignInRequest"));    }    SPSSODescriptorElement spsso=sm.getSPSSODescriptor(realm,spEntityID);    String loc=getSLOResponseLocationOrLocation(spsso,binding);    if (!SAML2Utils.verifyDestination(logoutReq.getDestination(),loc)) {      throw new SAML2Exception(SAML2Utils.bundle.getString("invalidDestination"));    }  }  IDPSSODescriptorElement idpsso=sm.getIDPSSODescriptor(realm,idpEntityID);  if (idpsso == null) {    String[] data={idpEntityID};    LogUtil.error(Level.INFO,LogUtil.IDP_METADATA_ERROR,data,null);    throw new SAML2Exception(SAML2Utils.bundle.getString("metaDataError"));  }  List slosList=idpsso.getSingleLogoutService();  if (slosList == null) {    String[] data={idpEntityID};    LogUtil.error(Level.INFO,LogUtil.SLO_NOT_FOUND,data,null);    throw new SAML2Exception(SAML2Utils.bundle.getString("sloServiceListNotfound"));  }  location=LogoutUtil.getSLOResponseServiceLocation(slosList,binding);  if (location == null || location.length() == 0) {    location=LogoutUtil.getSLOServiceLocation(slosList,binding);    if (location == null || location.length() == 0) {      debug.error("Unable to find the IDP's single logout " + "response service with the HTTP-Redirect binding");      throw new SAML2Exception(SAML2Utils.bundle.getString("sloResponseServiceLocationNotfound"));    } else {      if (debug.messageEnabled()) {        debug.message("SP's single logout response service location = " + location);      }    }  } else {    if (debug.messageEnabled()) {      debug.message("IDP's single logout response service location = " + location);    }  }  List partners=IDPProxyUtil.getSPSessionPartners(request);  if (partners != null && !partners.isEmpty()) {    LogoutResponse logoutRespon=processLogoutRequest(logoutReq,spEntityID,realm,request,response,false,false,binding,true);    logoutRespon.setDestination(XMLUtils.escapeSpecialCharacters(location));    IDPProxyUtil.sendIDPInitProxyLogoutRequest(request,response,out,logoutRespon,location,spEntityID,idpEntityID,binding,realm);  } else {    LogoutResponse logoutRes=processLogoutRequest(logoutReq,spEntityID,realm,request,response,true,binding,true);    logoutRes.setDestination(XMLUtils.escapeSpecialCharacters(location));    LogoutUtil.sendSLOResponse(response,request,logoutRes,location,relayState,realm,spEntityID,SAML2Constants.SP_ROLE,idpEntityID,binding);  }}  }
class C{  @Override public final int read() throws IOException {  return Util.readSingleByte(this);}  }
class C{  public DurationStatistics(){  deltaCount=new AtomicLong();  deltaSum=new AtomicLong();  deltaMax=new AtomicLong();  deltaMin=new AtomicLong(INITIAL_DELTA_MIN);  deltaMean=new AtomicDouble();  deltaStdDev=new AtomicDouble();}  }
class C{  public XMLString emptystr(){  return XString.EMPTYSTRING;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeattributenodeattribute.class,args);}  }
class C{  public void test_getServerAliases(){  init(SERVER);  assertNull(manager.getServerAliases(null,null));  assertNull(manager.getServerAliases("",null));  String[] resArray=manager.getServerAliases(TYPE_RSA,null);  assertNotNull(resArray);  assertEquals("Incorrect length",1,resArray.length);  assertEquals("Incorrect aliase","serverkey_00",resArray[0].toLowerCase());}  }
class C{  public Object encode(Object pObject) throws EncoderException {  if (pObject == null) {    return null;  } else   if (pObject instanceof String) {    return encode((String)pObject);  } else {    throw new EncoderException("Objects of type " + pObject.getClass().getName() + " cannot be encoded using Q codec");  }}  }
class C{  public void testWildcardsDoesNotNeedTwoDots() throws Exception {  String cert="-----BEGIN CERTIFICATE-----\n" + "MIIBjDCCATagAwIBAgIJAOVulXCSu6HuMA0GCSqGSIb3DQEBBQUAMBAxDjAMBgNV\n" + "BAMUBSouY29tMCAXDTEwMTIyMDE2NDkzOFoYDzIxMTAxMTI2MTY0OTM4WjAQMQ4w\n"+ "DAYDVQQDFAUqLmNvbTBcMA0GCSqGSIb3DQEBAQUAA0sAMEgCQQDJd8xqni+h7Iaz\n"+ "ypItivs9kPuiJUqVz+SuJ1C05SFc3PmlRCvwSIfhyD67fHcbMdl+A/LrIjhhKZJe\n"+ "1joO0+pFAgMBAAGjcTBvMB0GA1UdDgQWBBS4Iuzf5w8JdCp+EtBfdFNudf6+YzBA\n"+ "BgNVHSMEOTA3gBS4Iuzf5w8JdCp+EtBfdFNudf6+Y6EUpBIwEDEOMAwGA1UEAxQF\n"+ "Ki5jb22CCQDlbpVwkruh7jAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBBQUAA0EA\n"+ "U6LFxmZr31lFyis2/T68PpjAppc0DpNQuA2m/Y7oTHBDi55Fw6HVHCw3lucuWZ5d\n"+ "qUYo4ES548JdpQtcLrW2sA==\n"+ "-----END CERTIFICATE-----";  CertificateFactory cf=CertificateFactory.getInstance("X.509");  InputStream in=new ByteArrayInputStream(cert.getBytes("UTF-8"));  X509Certificate x509=(X509Certificate)cf.generateCertificate(in);  mySSLSession session=new mySSLSession(new X509Certificate[]{x509});  HostnameVerifier verifier=HttpsURLConnection.getDefaultHostnameVerifier();  assertTrue(verifier.verify("google.com",session));}  }
class C{  @Override public void onPause(){  super.onPause();  mDelegate.detachView();  if (getActivity().isFinishing()) {    mDelegate.destroyPresenter();  }}  }
class C{  public void uninstallUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);  }}  }
class C{  public static void main(String[] args){  int returnCode=ldifModifyMain(args,false,System.out,System.err);  if (returnCode != 0) {    System.exit(filterExitCode(returnCode));  }}  }
class C{  public void removeMember(PersistentObject member) throws UMSException {  member.modify(new Attr(MEMBER_ATTR_NAME,this.getDN()),ModificationType.DELETE);  member.save();}  }
class C{  public void disconnect() throws IOException {  socket.disconnect();}  }
class C{  public static void encodeFileToFile(String infile,String outfile){  String encoded=Base64.encodeFromFile(infile);  java.io.OutputStream out=null;  try {    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));    out.write(encoded.getBytes("US-ASCII"));  } catch (  java.io.IOException ex) {    ex.printStackTrace();  } finally {    try {      out.close();    } catch (    Exception ex) {    }  }}  }
class C{  public void removeMember(PersistentObject member) throws UMSException {  removeMember(member.getGuid());}  }
class C{  protected PooledConnection createConnection(long now,PooledConnection notUsed,String username,String password) throws SQLException {  PooledConnection con=create(false);  if (username != null)   con.getAttributes().put(PooledConnection.PROP_USER,username);  if (password != null)   con.getAttributes().put(PooledConnection.PROP_PASSWORD,password);  boolean error=false;  try {    con.lock();    con.connect();    if (con.validate(PooledConnection.VALIDATE_INIT)) {      con.setTimestamp(now);      if (getPoolProperties().isLogAbandoned()) {        con.setStackTrace(getThreadDump());      }      if (!busy.offer(con)) {        log.debug("Connection doesn't fit into busy array, connection will not be traceable.");      }      return con;    } else {      throw new SQLException("Validation Query Failed, enable logValidationErrors for more details.");    }  } catch (  Exception e) {    error=true;    if (log.isDebugEnabled())     log.debug("Unable to create a new JDBC connection.",e);    if (e instanceof SQLException) {      throw (SQLException)e;    } else {      SQLException ex=new SQLException(e.getMessage());      ex.initCause(e);      throw ex;    }  } finally {    if (error) {      release(con);    }    con.unlock();  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == null) {    return false;  }  if (getClass() != obj.getClass()) {    return false;  }  final Document other=(Document)obj;  if (!Objects.equals(this.id,other.id)) {    return false;  }  if (!Objects.equals(this.table,other.table)) {    return false;  }  if (!Objects.equals(this.object,other.object)) {    return false;  }  return true;}  }
class C{  protected boolean handlingMyLastProtocolMessage(List<ProtocolMessage> protocolMessages,int pointer){  return ((protocolMessages.size() == (pointer + 1)) || (protocolMessages.get(pointer + 1).getMessageIssuer() != tlsContext.getMyConnectionEnd()) || (protocolMessages.get(pointer + 1).getProtocolMessageType() == ProtocolMessageType.APPLICATION_DATA));}  }
class C{  public Object clone() throws CloneNotSupportedException {  return new ObjectVector(this);}  }
class C{  public void show(Container parent,String name){synchronized (parent.getTreeLock()) {    checkLayout(parent);    Component next=null;    int ncomponents=vector.size();    for (int i=0; i < ncomponents; i++) {      Card card=(Card)vector.get(i);      if (card.name.equals(name)) {        next=card.comp;        currentCard=i;        break;      }    }    if ((next != null) && !next.isVisible()) {      ncomponents=parent.getComponentCount();      for (int i=0; i < ncomponents; i++) {        Component comp=parent.getComponent(i);        if (comp.isVisible()) {          comp.setVisible(false);          break;        }      }      next.setVisible(true);      parent.validate();    }  }}  }
class C{  protected void addDefaultNotFoundRoute(){  getRouter().ALL(IRouter.DEFAULT_ROUTE_PATH).notFound().save(getDefaultNotFoundHandler());}  }
class C{  public static IOFileFilter magicNumberFileFilter(String magicNumber){  return new MagicNumberFileFilter(magicNumber);}  }
class C{  void createContext(SSOToken appSSOToken) throws SessionException {  if (appSSOToken == null) {    if (sessionDebug.warningEnabled()) {      sessionDebug.warning("Session." + "createContext():, " + "cannot obtain application SSO token, "+ "defaulting to IP address");    }  } else {    sessionDebug.message("Session." + "createContext():, " + "setting context to  application SSO token");    context=appSSOToken;  }}  }
class C{  public void readByteArray(byte[] arr,int offset) throws InvalidDataTypeException {  logger.finest("Reading from array from offset:" + offset);  String charSetName=getTextEncodingCharSet();  CharsetDecoder decoder=Charset.forName(charSetName).newDecoder();  ByteBuffer inBuffer=ByteBuffer.wrap(arr,offset,arr.length - offset).slice();  CharBuffer outBuffer=CharBuffer.allocate(arr.length - offset);  decoder.reset();  CoderResult coderResult=decoder.decode(inBuffer,outBuffer,true);  if (coderResult.isError()) {    logger.warning("Decoding error:" + coderResult.toString());  }  decoder.flush(outBuffer);  outBuffer.flip();  String stringValue=outBuffer.toString();  value=new PartOfSetValue(stringValue);  setSize(arr.length - offset);  logger.config("Read SizeTerminatedString:" + value + " size:"+ size);}  }
class C{  public void addRealmSubject(String subjectName,SubjectTypeManager stm,boolean exclusive) throws NameAlreadyExistsException, InvalidNameException, PolicyException, SSOException {  String realmName=stm.getPolicyManager().getOrganizationDN();  realmName=LDAPUtils.formatToRFC(realmName);  if ((subjectRealm != null) && !subjectRealm.equals(realmName)) {    String[] objs={realmName,subjectRealm};    if (DEBUG.messageEnabled()) {      DEBUG.message("Policy.addRealmSubject():can not add" + " realm subject " + subjectName + " , from realm : "+ realmName+ " , policy already has subject from different realm:"+ subjectRealm);    }    throw (new InvalidNameException(ResBundleUtils.rbName,"policy_realms_do_not_match",objs,null,realmName,PolicyException.POLICY));  }  if (subjectRealm == null) {    subjectRealm=realmName;  }  stm.getSubjectByName(subjectName);  users.addSubject(subjectName,stm.getSharedSubject(subjectName),exclusive);  if (DEBUG.messageEnabled()) {    DEBUG.message("Policy.addRealmSubject():added " + " realm subject " + subjectName + " , from realm : "+ realmName);  }}  }
class C{  public FrameBodyTPUB(){}  }
class C{  public String elementName(){  return elementName;}  }
class C{  public boolean is_multiple_of_45_degree(){  return direction().is_multiple_of_45_degree();}  }
class C{  public void addEdge(String parentId,String childId,String successorId){  edgeIds.add(successorId);  this.addToParentChildMap(parentId,childId);}  }
class C{  public static POIResult newInstance(String category){  POIResult fragment=new POIResult();  Bundle args=new Bundle();  args.putString(ARG_CATEGORY,category);  fragment.setArguments(args);  return fragment;}  }
class C{  public void cleanup(){  if (isFailed()) {    DEBUG.message("Authentication failed - destroying new session");    authContext.destroySession();    if (authContext.isSessionUpgrade()) {      DEBUG.message("Session upgrade failed - restoring original session");      authContext.restoreOldSession();    } else {      authContext.destroyOldSession();    }  } else   if (isSuccessful()) {    if (authContext.isForceAuth()) {      DEBUG.message("Force Auth succeeded - restoring updated session.");      authContext.destroySession();      authContext.restoreOldSession();    } else     if (authContext.hasOldSession() && SystemProperties.getAsBoolean(Constants.DESTROY_SESSION_AFTER_UPGRADE)) {      DEBUG.message("Session upgrade succeeded - destroying old session");      authContext.destroyOldSession();    }  }}  }
class C{  public MalformedChallengeException(String message){  super(message);}  }
class C{  public SAML2ConfigBuilder customAttributeStatementsProviderClassName(String customAttributeStatementsProviderClassName){  this.customAttributeStatementsProviderClassName=customAttributeStatementsProviderClassName;  return this;}  }
class C{  public boolean isInfoEnabled(){  return (getLogger().isLoggable(Level.INFO));}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList employeeList;  Node child;  String childName;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(2);  employeeList=employeeNode.getChildNodes();  child=employeeList.item(3);  childName=child.getNodeName();  if (equals("#text",childName)) {    assertEquals("childName_space","#text",childName);  } else {    assertEqualsAutoCase("element","childName_strong","strong",childName);  }}  }
class C{  private static X509Certificate[] createCertChain(byte[][] certificatesBytes) throws IOException {  if (certificatesBytes == null) {    return null;  }  X509Certificate[] certificates=new X509Certificate[certificatesBytes.length];  for (int i=0; i < certificatesBytes.length; i++) {    certificates[i]=OpenSSLX509Certificate.fromX509Der(certificatesBytes[i]);  }  return certificates;}  }
class C{  public void apply(Animator animator,float currValue,float endValue,float velocity,float maxDistance){  AnimatorProperties properties=getProperties(currValue,endValue,velocity,maxDistance);  animator.setDuration(properties.duration);  animator.setInterpolator(properties.interpolator);}  }
class C{  public ResponseResetableException(){  super();  this.resetResponse=true;}  }
class C{  public PlaSegmentFloat translate(double p_dist){  double dx=point_b.v_x - point_a.v_x;  double dy=point_b.v_y - point_a.v_y;  double dxdx=dx * dx;  double dydy=dy * dy;  double lenght=Math.sqrt(dxdx + dydy);  PlaPointFloat new_a;  if (dxdx <= dydy) {    double rel_x=(p_dist * lenght) / dy;    new_a=new PlaPointFloat(point_a.v_x - rel_x,point_a.v_y);  } else {    double rel_y=(p_dist * lenght) / dx;    new_a=new PlaPointFloat(point_a.v_x,point_a.v_y + rel_y);  }  PlaPointFloat new_b=new PlaPointFloat(new_a.v_x + dx,new_a.v_y + dy);  return new PlaSegmentFloat(new_a,new_b);}  }
class C{  public static PasswordPolicyResponseControl newControl(final PasswordPolicyWarningType warningType,final int warningValue,final PasswordPolicyErrorType errorType){  Reject.ifNull(warningType);  Reject.ifNull(errorType);  Reject.ifFalse(warningValue >= 0,"warningValue is negative");  return new PasswordPolicyResponseControl(false,warningType,warningValue,errorType);}  }
class C{  boolean isNewEntry(){  return (smsEntry.isNewEntry());}  }
class C{  public void normal(){  mHintView.setVisibility(View.VISIBLE);  mProgressBar.setVisibility(View.GONE);}  }
class C{  @Override public void focusGained(FocusEvent e){  spinner.repaint();}  }
class C{  public void start_scope() throws IOException {  new_line();  write(BEGIN_SCOPE);  current_indent_level++;}  }
class C{  private void finishCompletion(){  for (WaitNode q; (q=waiters) != null; ) {    if (UNSAFE.compareAndSwapObject(this,waitersOffset,q,null)) {      for (; ; ) {        Thread t=q.thread;        if (t != null) {          q.thread=null;          LockSupport.unpark(t);        }        WaitNode next=q.next;        if (next == null)         break;        q.next=null;        q=next;      }      break;    }  }  done();  callable=null;}  }
class C{  public static int findWordStart(String line,int pos,String noWordSep,boolean joinNonWordChars){  return findWordStart(line,pos,noWordSep,joinNonWordChars,false);}  }
class C{  public void delete(String clientId,OAuth2Request request) throws UnauthorizedClientException {  try {    final SSOToken token=AccessController.doPrivileged(AdminTokenAction.getInstance());    final String realm=request.getParameter(OAuth2Constants.Custom.REALM);    AMIdentityRepository repo=idRepoFactory.create(realm,token);    AMIdentity theID=null;    IdSearchControl idsc=new IdSearchControl();    idsc.setRecursive(true);    idsc.setAllReturnAttributes(true);    Set<AMIdentity> results;    idsc.setMaxResults(0);    IdSearchResults searchResults=repo.searchIdentities(IdType.AGENTONLY,clientId,idsc);    results=searchResults.getSearchResults();    if (results == null || results.size() != 1) {      logger.error("OpenAMClientDAO.delete(): No client profile or more than one profile found.");      throw new UnauthorizedClientException("Not able to get client from OpenAM");    }    theID=results.iterator().next();    if (!theID.isActive()) {      theID=null;    }    Set<AMIdentity> identities=new HashSet<AMIdentity>();    identities.add(theID);    repo.deleteIdentities(identities);  } catch (  SSOException e) {    logger.error("OpenAMClientDAO.delete(): Unable to delete client",e);    throw new UnauthorizedClientException();  }catch (  IdRepoException e) {    logger.error("OpenAMClientDAO.delete(): Unable to delete client",e);    throw new UnauthorizedClientException();  }}  }
class C{  public SecureELFFormatter(){  String timestampGeneratorClass=lmanager.getProperty(LogConstants.SECURE_TIMESTAMP_GENERATOR);  try {    Class clz=Class.forName(timestampGeneratorClass);    secureTimestampGenerator=(ITimestampGenerator)clz.newInstance();  } catch (  ClassNotFoundException cnfe) {    Debug.error("SecureELFFormatter: TimeStamp Generator Class " + "not found",cnfe);  }catch (  InstantiationException ie) {    Debug.error("SecureELFFormatter: Timestamp Generator Could " + "not be Instantiated",ie);  }catch (  IllegalAccessException iae) {    Debug.error("SecureELFFormatter: Timestamp Generator Could " + "not be Instantiated",iae);  }}  }
class C{  public void attributeDecl(String arg0,String arg1,String arg2,String arg3,String arg4) throws SAXException {  m_handler.attributeDecl(arg0,arg1,arg2,arg3,arg4);}  }
class C{  private String readInputUntil(char symbol){  String s="";  while (!accept(symbol)) {    s+=(char)data[index];    skip();  }  return s;}  }
class C{  void checkEndCode(){  if (endCode) {    throw new IllegalStateException("Cannot visit instructions after visitMaxs has been called.");  }}  }
class C{  public Collection values(){  if (values == null)   values=new SynchronizedCollection(new ValueCollection(),this);  return values;}  }
class C{  final boolean acquireQueued(final Node node,long arg){  boolean failed=true;  try {    boolean interrupted=false;    for (; ; ) {      final Node p=node.predecessor();      if (p == head && tryAcquire(arg)) {        setHead(node);        p.next=null;        failed=false;        return interrupted;      }      if (shouldParkAfterFailedAcquire(p,node) && parkAndCheckInterrupt())       interrupted=true;    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  public void paintPasswordFieldBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public void add(final AbstractInsnNode insn){  ++size;  if (last == null) {    first=insn;    last=insn;  } else {    last.next=insn;    insn.prev=last;  }  last=insn;  cache=null;  insn.index=0;}  }
class C{  public void startDocument() throws SAXException {  int doc=addNode(DTM.DOCUMENT_NODE,DTM.DOCUMENT_NODE,DTM.NULL,DTM.NULL,0,true);  m_parents.push(doc);  m_previous=DTM.NULL;  m_contextIndexes.push(m_prefixMappings.size());}  }
class C{  private void readHeaderFlags(ByteBuffer byteBuffer) throws TagException {  byte flags=byteBuffer.get();  unsynchronization=(flags & MASK_V22_UNSYNCHRONIZATION) != 0;  compression=(flags & MASK_V22_COMPRESSION) != 0;  if (unsynchronization) {    logger.config(ErrorMessage.ID3_TAG_UNSYNCHRONIZED.getMsg(getLoggingFilename()));  }  if (compression) {    logger.config(ErrorMessage.ID3_TAG_COMPRESSED.getMsg(getLoggingFilename()));  }  if ((flags & FileConstants.BIT5) != 0) {    logger.warning(ErrorMessage.ID3_INVALID_OR_UNKNOWN_FLAG_SET.getMsg(getLoggingFilename(),FileConstants.BIT5));  }  if ((flags & FileConstants.BIT4) != 0) {    logger.warning(ErrorMessage.ID3_INVALID_OR_UNKNOWN_FLAG_SET.getMsg(getLoggingFilename(),FileConstants.BIT4));  }  if ((flags & FileConstants.BIT3) != 0) {    logger.warning(ErrorMessage.ID3_INVALID_OR_UNKNOWN_FLAG_SET.getMsg(getLoggingFilename(),FileConstants.BIT3));  }  if ((flags & FileConstants.BIT2) != 0) {    logger.warning(ErrorMessage.ID3_INVALID_OR_UNKNOWN_FLAG_SET.getMsg(getLoggingFilename(),FileConstants.BIT2));  }  if ((flags & FileConstants.BIT1) != 0) {    logger.warning(ErrorMessage.ID3_INVALID_OR_UNKNOWN_FLAG_SET.getMsg(getLoggingFilename(),FileConstants.BIT1));  }  if ((flags & FileConstants.BIT0) != 0) {    logger.warning(ErrorMessage.ID3_INVALID_OR_UNKNOWN_FLAG_SET.getMsg(getLoggingFilename(),FileConstants.BIT3));  }}  }
class C{  private ResultPointsAndTransitions transitionsBetween(ResultPoint from,ResultPoint to){  int fromX=(int)from.getX();  int fromY=(int)from.getY();  int toX=(int)to.getX();  int toY=(int)to.getY();  boolean steep=Math.abs(toY - fromY) > Math.abs(toX - fromX);  if (steep) {    int temp=fromX;    fromX=fromY;    fromY=temp;    temp=toX;    toX=toY;    toY=temp;  }  int dx=Math.abs(toX - fromX);  int dy=Math.abs(toY - fromY);  int error=-dx / 2;  int ystep=fromY < toY ? 1 : -1;  int xstep=fromX < toX ? 1 : -1;  int transitions=0;  boolean inBlack=image.get(steep ? fromY : fromX,steep ? fromX : fromY);  for (int x=fromX, y=fromY; x != toX; x+=xstep) {    boolean isBlack=image.get(steep ? y : x,steep ? x : y);    if (isBlack != inBlack) {      transitions++;      inBlack=isBlack;    }    error+=dy;    if (error > 0) {      if (y == toY) {        break;      }      y+=ystep;      error-=dx;    }  }  return new ResultPointsAndTransitions(from,to,transitions);}  }
class C{  String readLine(boolean ignoreLF) throws IOException {  StringBuffer s=null;  int startChar;synchronized (lock) {    ensureOpen();    boolean omitLF=ignoreLF || skipLF;    bufferLoop:     for (; ; ) {      if (nextChar >= nChars)       fill();      if (nextChar >= nChars) {        if (s != null && s.length() > 0)         return s.toString(); else         return null;      }      boolean eol=false;      char c=0;      int i;      if (omitLF && (cb[nextChar] == '\n'))       nextChar++;      skipLF=false;      omitLF=false;      charLoop:       for (i=nextChar; i < nChars; i++) {        c=cb[i];        if ((c == '\n') || (c == '\r')) {          eol=true;          break charLoop;        }      }      startChar=nextChar;      nextChar=i;      if (eol) {        String str;        if (s == null) {          str=new String(cb,startChar,i - startChar);        } else {          s.append(cb,startChar,i - startChar);          str=s.toString();        }        nextChar++;        if (c == '\r') {          skipLF=true;        }        return str;      }      if (s == null)       s=new StringBuffer(defaultExpectedLineLength);      s.append(cb,startChar,i - startChar);    }  }}  }
class C{  public void testSignumZero(){  String a="0";  int aScale=41;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  assertEquals("incorrect value",0,aNumber.signum());}  }
class C{  public String toXMLString(){  StringBuilder xml=new StringBuilder(300);  xml.append("<?xml version=").append(QUOTE).append("1.0").append(QUOTE).append(" encoding=").append(QUOTE).append("UTF-8").append(QUOTE).append(" standalone=").append(QUOTE).append("yes").append(QUOTE).append("?>").append(NL);  xml.append("<ResponseSet vers=").append(QUOTE).append(responseSetVersion).append(QUOTE).append(" svcid=").append(QUOTE).append(serviceID).append(QUOTE).append(" reqid=").append(QUOTE).append(requestSetID).append(QUOTE).append('>').append(NL);  for (int i=0; i < responseVector.size(); i++) {    Response res=(Response)responseVector.elementAt(i);    xml.append("<Response");    if (res.getDtdID() != null) {      xml.append(" dtdid=").append(QUOTE).append(res.getDtdID()).append(QUOTE);    }    xml.append('>');    xml.append(BEGIN_CDATA).append(res.getContent()).append(END_CDATA);    xml.append("</Response>").append(NL);  }  xml.append("</ResponseSet>");  return (xml.toString());}  }
class C{  private synchronized void initialize() throws SMSException {  auditorFactory=InjectorHolder.getInstance(ConfigAuditorFactory.class);  if (initialized) {    return;  }  debug=Debug.getInstance("amSMSEmbeddedLdap");  AMResourceBundleCache amCache=AMResourceBundleCache.getInstance();  bundle=amCache.getResBundle(IUMSConstants.UMS_BUNDLE_NAME,java.util.Locale.ENGLISH);  orgUnitAttr=new LinkedHashSet<>(1);  orgUnitAttr.add(getNamingAttribute());  orgAttr=new LinkedHashSet<>(1);  orgAttr.add(getOrgNamingAttribute());  icConn=InternalClientConnection.getRootConnection();  try {    String serviceDN=SMSEntry.SERVICES_RDN + SMSEntry.COMMA + getRootSuffix();    if (!entryExists(serviceDN)) {      Map attrs=new HashMap();      Set attrValues=new HashSet();      attrValues.add(SMSEntry.OC_TOP);      attrValues.add(SMSEntry.OC_ORG_UNIT);      attrs.put(SMSEntry.ATTR_OBJECTCLASS,attrValues);      internalCreate(null,serviceDN,attrs);    }  } catch (  Exception e) {    debug.error("SMSEmbeddedLdapObject.initialize: " + "Unable to initalize(exception):",e);    throw (new SMSException(IUMSConstants.UMS_BUNDLE_NAME,IUMSConstants.CONFIG_MGR_ERROR,null));  }  String[] smsAttrs=getAttributeNames();  smsAttributes=new LinkedHashSet(smsAttrs.length);  for (int i=0; i < smsAttrs.length; i++) {    smsAttributes.add(smsAttrs[i]);  }  initialized=true;}  }
class C{  public FrameBodyTSOP(byte textEncoding,String text){  super(textEncoding,text);}  }
class C{  public static void pickImage(Context context,android.support.v4.app.Fragment fragment,int requestCode){  try {    fragment.startActivityForResult(getImagePicker(),requestCode);  } catch (  ActivityNotFoundException e) {    showImagePickerError(context);  }}  }
class C{  public TypeNotPresentException(String typeName,Throwable cause){  super("Type " + typeName + " not present",cause);  this.typeName=typeName;}  }
class C{  public JsonValue jsonValueOf(SessionInfo session){  return json(object(field(HEADER_USER_ID,session.getProperties().get(SESSION_INFO_USER_ID)),field(HEADER_TIME_REMAINING,TimeUnit.SECONDS.toMinutes(session.getTimeLeft()))));}  }
class C{  public ConsoleUser(){  this(new PrintWriter(System.out),new InputStreamReader(System.in),ResourceBundle.getBundle(LICENSE_PROPERTIES));}  }
class C{  public boolean hasAccessToken(){  final String token=getAccessToken();  return token != null && !token.isEmpty();}  }
class C{  private List<?> checkValueAndIndex(CompositeData value){  checkValueType(value);  List<?> index=internalCalculateIndex(value);  if (dataMap.containsKey(index)) {    throw new KeyAlreadyExistsException("Argument value's index, calculated according to this TabularData " + "instance's tabularType, already refers to a value in this table.");  }  return index;}  }
class C{  @NonNull public static Interpolator anticipateOvershoot(){  return new AnticipateOvershootInterpolator();}  }
class C{  void dispatchOnLauncherTransitionStep(View v,float t){  if (v instanceof LauncherTransitionable) {    ((LauncherTransitionable)v).onLauncherTransitionStep(mLauncher,t);  }}  }
class C{  public void append(byte b){  ensureCapacity(length + 1);  buffer[length++]=b;}  }
class C{  public void authenticationInitialized(){  authInitialized=true;  appSSOToken=getSSOToken();  if (debug.messageEnabled()) {    debug.message("AdminTokenAction:authenticationInit " + "called. AppSSOToken className=" + (String)((appSSOToken == null) ? "null" : appSSOToken.getClass().getName()));  }  internalAppSSOToken=null;}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.SubjectConfirmationType createSubjectConfirmationType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.SubjectConfirmationTypeImpl();}  }
class C{  public void invalidateSizes(){  if (root != null)   root.deepMarkSizeInvalid();  if (!isFixedRowHeight() && visibleNodes.size() > 0) {    updateNodeSizes(true);  }}  }
class C{  @Override public Iterator<E> iterator(){  return new PriorityIterator();}  }
class C{  @Override protected void initializeInjector(ApplicationComponent applicationComponent){  applicationComponent.inject(this);  comicsComponent=DaggerComicsComponent.builder().applicationComponent(applicationComponent).activityModule(new ActivityModule(this)).comicsModule(new ComicsModule()).build();}  }
class C{  public Graphics create(int x,int y,int width,int height){  DebugGraphics debugGraphics;  debugGraphics=new DebugGraphics();  debugGraphics.graphics=graphics.create(x,y,width,height);  debugGraphics.debugOptions=debugOptions;  debugGraphics.buffer=buffer;  debugGraphics.xOffset=xOffset + x;  debugGraphics.yOffset=yOffset + y;  return debugGraphics;}  }
class C{  public void send(boolean checkexpired) throws IOException {  send(checkexpired,null);}  }
class C{  final boolean isShared(){  return nextWaiter == SHARED;}  }
class C{  public boolean isForceAuth(){  return forceAuth;}  }
class C{  public boolean isPercentValue(){  return unitType == PERCENT;}  }
class C{  @VisibleForTesting void clear(){  sessionInfoCache.clear();}  }
class C{  private int stepLogin(final Callback[] realCallbacks,final int state) throws AuthLoginException {  if (authenticationContext == null || authenticationContext.getStatus().equals(AuthContext.Status.FAILED)) {    return processError(bundle.getString("samlLocalAuthFailed"),"SAML2 :: process() : failed to perform local authentication - {} ",bundle.getString("samlLocalAuthFailed"));  } else   if (authenticationContext.getStatus().equals(AuthContext.Status.IN_PROGRESS)) {    return injectCallbacks(realCallbacks,state);  } else   if (authenticationContext.getStatus().equals(AuthContext.Status.SUCCESS)) {    try {      final NameID nameId=getNameId();      final String userName=authenticationContext.getSSOToken().getProperty(UNIVERSAL_IDENTIFIER);      linkAccount(userName,nameId);      return success(authnAssertion,nameId,userName);    } catch (    L10NMessageImpl l10NMessage) {      return processError(l10NMessage,null,"SAML2 :: process() : failed to perform local authentication - {} ",l10NMessage.getL10NMessage(getLoginLocale()));    } finally {      authenticationContext.logout();    }  }  return processError(bundle.getString("invalidLoginState"),"SAML2 :: stepLogin() : unexpected login state");}  }
class C{  public boolean isFull(){  return getData() >= CAULDRON_FULL;}  }
class C{  private void doSetValueCreateReplaceTest(boolean canCreate,String beanName){  BeanNameELResolver resolver=createBeanNameELResolver(canCreate);  ELContext context=new StandardELContext(ELManager.getExpressionFactory());  Object bean=resolver.getValue(context,null,BEAN01_NAME);  Assert.assertTrue(context.isPropertyResolved());  Assert.assertEquals(BEAN01,bean);  context.setPropertyResolved(false);  resolver.setValue(context,null,beanName,BEAN99);  if (canCreate || BEAN01_NAME.equals(beanName)) {    Assert.assertTrue(context.isPropertyResolved());    context.setPropertyResolved(false);    bean=resolver.getValue(context,null,beanName);    Assert.assertTrue(context.isPropertyResolved());    Assert.assertEquals(BEAN99,bean);  } else {    Assert.assertFalse(context.isPropertyResolved());    context.setPropertyResolved(false);    bean=resolver.getValue(context,null,BEAN01_NAME);    Assert.assertTrue(context.isPropertyResolved());    Assert.assertEquals(BEAN01,bean);  }}  }
class C{  public FrameBodyXSOP(){}  }
class C{  public void paintToolBarDragWindowBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  @DataProvider(name="bigIntegerValues") public Object[][] createBigIntegerValues(){  return new Object[][]{{"0123456",true},{"42",true},{"0",true},{"",false},{"0xFF",false},{"NULL",false},{"Not a Number",false},{"2147483648",true}};}  }
class C{  private Object convertStringToOject(String s,FieldDataType dataType) throws IndexParseFieldException {  if (dataType.equals(FieldDataType.BOOLEAN)) {    return ParseUtils.parseStringAsBoolean(s);  } else   if (dataType.equals(FieldDataType.DATE_TIME) || dataType.equals(FieldDataType.TIMEPOINT)) {    return ParseUtils.parseStringAsDate(s);  } else   if (dataType.equals(FieldDataType.LONG)) {    return ParseUtils.parseStringAsLong(s);  } else   if (dataType.equals(FieldDataType.DOUBLE)) {    return ParseUtils.parseStringAsDouble(s);  } else   if (dataType.equals(FieldDataType.INTEGER)) {    return ParseUtils.parseStringAsInt(s);  } else   if (dataType.equals(FieldDataType.UUID)) {    return ParseUtils.parseStringAsUUID(s);  } else {    throw new IndexParseFieldException(s);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdatainsertdataend.class,args);}  }
class C{  private boolean checkSelectForSwipe(int action,MotionEvent motionEvent,int pointerIndex){  if (selected != null || action != MotionEvent.ACTION_MOVE) {    return false;  }  if (recyclerView.getScrollState() == RecyclerView.SCROLL_STATE_DRAGGING) {    return false;  }  final RecyclerView.ViewHolder vh=findSwipedView(motionEvent);  if (vh == null) {    return false;  }  final int movementFlags=callback.getAbsMovementFlags(recyclerView,vh);  final int swipeFlags=(movementFlags & ACTION_MODE_SWIPE_MASK) >> (DIRECTION_FLAG_COUNT * ACTION_STATE_SWIPE);  if (swipeFlags == 0) {    return false;  }  final float x=MotionEventCompat.getX(motionEvent,pointerIndex);  final float y=MotionEventCompat.getY(motionEvent,pointerIndex);  final float dx=x - initialTouchX;  final float dy=y - initialTouchY;  final float absDx=Math.abs(dx);  final float absDy=Math.abs(dy);  if (absDx < slop && absDy < slop) {    return false;  }  if (absDx > absDy) {    if (dx < 0 && (swipeFlags & LEFT) == 0) {      return false;    }    if (dx > 0 && (swipeFlags & RIGHT) == 0) {      return false;    }  } else {    if (dy < 0 && (swipeFlags & UP) == 0) {      return false;    }    if (dy > 0 && (swipeFlags & DOWN) == 0) {      return false;    }  }  dX=dY=0f;  activePointerId=MotionEventCompat.getPointerId(motionEvent,0);  select((SwipeOpenViewHolder)vh,ACTION_STATE_SWIPE);  return true;}  }
class C{  public EnumEvalResult evaluate(AciEvalContext evalCtx){  EnumEvalResult ret;  if (this.booleanType == null) {    KeywordBindRule rule=keywordRuleMap.get(keyword.toString());    ret=rule.evaluate(evalCtx);  } else {    ret=evalComplex(left.evaluate(evalCtx),right.evaluate(evalCtx));  }  return EnumEvalResult.negateIfNeeded(ret,negate);}  }
class C{  public static boolean isTargetApplicable(Aci aci,AciTargetMatchContext matchCtx){  return isTargetApplicable(aci,aci.getTargets(),matchCtx.getResourceEntry().getName());}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.GenderElement createGenderElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.GenderElementImpl();}  }
class C{  public ConcurrentModificationException(LocalizableMessage message){  super(message);}  }
class C{  public void initializeSynchronizationProviders() throws ConfigException, InitializationException {  RootCfg root=serverContext.getRootConfig();  root.addSynchronizationProviderAddListener(this);  root.addSynchronizationProviderDeleteListener(this);  for (  String name : root.listSynchronizationProviders()) {    SynchronizationProviderCfg config=root.getSynchronizationProvider(name);    config.addChangeListener(this);    if (config.isEnabled()) {      SynchronizationProvider<SynchronizationProviderCfg> provider=getSynchronizationProvider(config);      DirectoryServer.registerSynchronizationProvider(provider);      registeredProviders.put(config.dn(),provider);    }  }}  }
class C{  public ISLocaleContext(){  locale=initLocale;  localeLevel=initLocaleLevel;  charset=initCharset;  client=defaultClient;}  }
class C{  public void test_readWhenCharacterSpansBuffer(){  final byte[] suffix={(byte)0x93,(byte)0xa1,(byte)0x8c,(byte)0xb4,(byte)0x97,(byte)0x43,(byte)0x88,(byte)0xea,(byte)0x98,(byte)0x59};  final char[] decodedSuffix={(char)0x85e4,(char)0x539f,(char)0x4f51,(char)0x4e00,(char)0x90ce};  final int prefixLength=8189;  byte[] bytes=new byte[prefixLength + 10];  Arrays.fill(bytes,(byte)' ');  System.arraycopy(suffix,0,bytes,prefixLength,suffix.length);  ByteArrayInputStream is=new ByteArrayInputStream(bytes);  try {    InputStreamReader isr=new InputStreamReader(is,"SHIFT_JIS");    char[] chars=new char[8192];    int at=0;    for (; ; ) {      int amt=isr.read(chars);      if (amt <= 0) {        break;      }      for (int i=0; i < amt; i++) {        char c=chars[i];        if (at < prefixLength) {          if (c != ' ') {            fail("Found bad prefix character " + (int)c + " at "+ at);          }        } else {          char decoded=decodedSuffix[at - prefixLength];          if (c != decoded) {            fail("Found mismatched character " + (int)c + " at "+ at);          }        }        at++;      }    }  } catch (  IOException ex) {    throw new RuntimeException("unexpected exception",ex);  }}  }
class C{  public InputSource(InputStream byteStream){  setByteStream(byteStream);}  }
class C{  public static QrCode encodeText(String text,Ecc ecl){  if (text == null || ecl == null)   throw new NullPointerException();  List<QrSegment> segs=QrSegment.makeSegments(text);  return encodeSegments(segs,ecl);}  }
class C{  public int process(Callback[] callbacks,int state) throws AuthLoginException {  String randomSecret=null;  String principalName=null;  String authLevel=null;  try {    Callback[] cbs=new Callback[3];    cbs[0]=new NameCallback(FMSessionProvider.RANDOM_SECRET);    cbs[1]=new NameCallback(SessionProvider.PRINCIPAL_NAME);    cbs[2]=new NameCallback(SessionProvider.AUTH_LEVEL);    callbackHandler.handle(cbs);    randomSecret=((NameCallback)cbs[0]).getName();    principalName=((NameCallback)cbs[1]).getName();    authLevel=((NameCallback)cbs[2]).getName();  } catch (  IllegalArgumentException ill) {    throw new AuthLoginException(fmAuthFederation,"IllegalArgs",null);  }catch (  IOException ioe) {    throw new AuthLoginException(ioe);  }catch (  UnsupportedCallbackException uce) {    throw new AuthLoginException(fmAuthFederation,"UnsupportedCallback",null);  }  if (!FMSessionProvider.matchSecret(randomSecret)) {    throw new AuthLoginException(fmAuthFederation,"NoMatchingSecret",null);  }  HttpServletRequest request=getHttpServletRequest();  if (request != null) {    Map<String,Set<String>> attrs=(Map<String,Set<String>>)request.getAttribute(SessionProvider.ATTR_MAP);    if (attrs != null) {      setUserAttributes(attrs);      request.removeAttribute(SessionProvider.ATTR_MAP);    }  }  debug.message("Module is successful");  storeUsernamePasswd(principalName,null);  userName=principalName;  if (authLevel != null && authLevel.length() != 0) {    try {      int authLevelInt=Integer.parseInt(authLevel);      setAuthLevel(authLevelInt);    } catch (    Exception e) {      debug.error("Unable to set auth level " + authLevel,e);    }  }  return ISAuthConstants.LOGIN_SUCCEED;}  }
class C{  public ApplicationException(String id,InputStream ins){  this.id=id;  this.ins=ins;}  }
class C{  private void createConnectorData(final Element rootElement){  Element element=creator.getDocument().createElement("ConnectorInfo");  element.setAttribute("enabled",String.valueOf(configuration.enabled()));  element.setAttribute("s",getLicenseName());  element.setAttribute("c",createLicenseKey(configuration.getLicenseKey()));  element.setAttribute("thumbsEnabled",String.valueOf(configuration.getThumbsEnabled()));  element.setAttribute("uploadCheckImages",configuration.checkSizeAfterScaling() ? "false" : "true");  if (configuration.getThumbsEnabled()) {    element.setAttribute("thumbsUrl",configuration.getThumbsURL());    element.setAttribute("thumbsDirectAccess",String.valueOf(configuration.getThumbsDirectAccess()));    element.setAttribute("thumbsWidth",String.valueOf(configuration.getMaxThumbWidth()));    element.setAttribute("thumbsHeight",String.valueOf(configuration.getMaxThumbHeight()));  }  element.setAttribute("imgWidth",String.valueOf(configuration.getImgWidth()));  element.setAttribute("imgHeight",String.valueOf(configuration.getImgHeight()));  if (!configuration.getPlugins().isEmpty()) {    element.setAttribute("plugins",getPlugins());  }  rootElement.appendChild(element);}  }
class C{  static boolean isDynamicalOrIgnoredProfile(String realm){  try {    OrganizationConfigManager orgConfigMgr=AuthD.getAuth().getOrgConfigManager(realm);    ServiceConfig svcConfig=orgConfigMgr.getServiceConfig(ISAuthConstants.AUTH_SERVICE_NAME);    Map attrs=svcConfig.getAttributes();    String tmp=CollectionHelper.getMapAttr(attrs,ISAuthConstants.DYNAMIC_PROFILE);    if (SAMLUtils.debug.messageEnabled()) {      SAMLUtils.debug.message("DefaultSiteAttributeMapper.isDynamicalOrIgnoredProfile:" + " attr = " + tmp);    }    return ((tmp != null) && (tmp.equalsIgnoreCase("createAlias") || tmp.equalsIgnoreCase("true") || tmp.equalsIgnoreCase("ignore")));  } catch (  Exception e) {    SAMLUtils.debug.error("DefaultSiteAttributeMapper." + "isDynamicalOrIgnoredProfile: unable to get attribute",e);    return false;  }}  }
class C{  public Builder withSecurityManager(final SecurityManager securityManager){  this.securityManager=securityManager;  return this;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.AdditionalContextProcessedElement createAdditionalContextProcessedElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.AdditionalContextProcessedElementImpl();}  }
class C{  public boolean isEmpty(){  return collections.isEmpty();}  }
class C{  public AMPostCallBackException(SSOToken token,String errorCode,UMSException ue){  super(token,errorCode,ue);}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("\n<<<<<<< BEGIN SDK CACHE CONTENTS >>>>>>>>");  if (!sdkCache.isEmpty()) {    Enumeration cacheKeys=sdkCache.keys();    while (cacheKeys.hasMoreElements()) {      String key=(String)cacheKeys.nextElement();      CacheBlock cb=(CacheBlock)sdkCache.get(key);      sb.append("\nSDK Cache Block: ").append(key);      sb.append(cb.toString());    }  } else {    sb.append("<empty>");  }  sb.append("\n<<<<<<< END SDK CACHE CONTENTS >>>>>>>>");  return sb.toString();}  }
class C{  public ActivationGroupID(ActivationSystem system){  this.system=system;}  }
class C{  public Object[] toArray(){  return events.toArray();}  }
class C{  @Override public void removeEnvironment(String name){  entries.remove(name);  ContextEnvironment environment=null;synchronized (envs) {    environment=envs.remove(name);  }  if (environment != null) {    support.firePropertyChange("environment",environment,null);    if (resourceRequireExplicitRegistration) {      try {        MBeanUtils.destroyMBean(environment);      } catch (      Exception e) {        log.warn(sm.getString("namingResources.mbeanDestroyFail",environment.getName()),e);      }    }    environment.setNamingResources(null);  }}  }
class C{  @Fluent public Job onFailure(Handler<JsonObject> failureHandler){  this.on("failed",null);  return this;}  }
class C{  public String toString(){  return new String(getType() + " with current value: " + getValue()+ " "+ units+ " (range: "+ minimum+ " - "+ maximum+ ")");}  }
class C{  public void mouseEntered(MouseEvent e){  ((MouseListener)a).mouseEntered(e);  ((MouseListener)b).mouseEntered(e);}  }
class C{  public boolean isSigning(){  return isSigning;}  }
class C{  public void testCase22(){  byte rBytes[]={2};  BigInteger aNumber=BigInteger.ONE;  BigInteger bNumber=BigInteger.ONE;  BigInteger result=aNumber.add(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public World.Environment environment(){  return environment;}  }
class C{  public BufferOverflowException(){}  }
class C{  public boolean isMustBePresent(){  return mustBePresent;}  }
class C{  final int inc(int i){  return (++i == items.length) ? 0 : i;}  }
class C{  public SOAPEntry(String sourceid,String soapUrl,String authType,String user,String bAuthUserID,String bAuthPasswd,String certAlias,PartnerAccountMapper partnerAccountMapper,SiteAttributeMapper siteAttributeMapper,PartnerSiteAttributeMapper partnerSiteAttributeMapper,ConsumerSiteAttributeMapper consumerSiteAttrMapper,NameIdentifierMapper nameIdentifierMapper,AttributeMapper attrMapper,ActionMapper actionMapper,String issuer,Set origHostSet,String version){  destID=sourceid;  soapRevUrl=soapUrl;  authenType=authType;  userid=user;  basicAuthUserID=bAuthUserID;  basicAuthPasswd=bAuthPasswd;  certalias=certAlias;  partnerAcctMapper=partnerAccountMapper;  _siteAttributeMapper=siteAttributeMapper;  _partnerSiteAttributeMapper=partnerSiteAttributeMapper;  this.consumerSiteAttrMapper=consumerSiteAttrMapper;  this.nameIdentifierMapper=nameIdentifierMapper;  attributeMapper=attrMapper;  this.actionMapper=actionMapper;  _issuer=issuer;  this.origHostSet=origHostSet;  prefVersion=version;}  }
class C{  @DataProvider public Object[][] md4DigestData(){  return new Object[][]{{"","31d6cfe0d16ae931b73c59d7e0c089c0"},{"a","bde52cb31de33e46245e05fbdbd6fb24"},{"abc","a448017aaf21d8525fc10ae87aa6729d"},{"message digest","d9130a8164549fe818874806e1c7014b"},{"abcdefghijklmnopqrstuvwxyz","d79e1c308aa5bbcdeea8ed63df412da9"},{"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789","043f8582f241db351ce627e153e7f0e4"},{"12345678901234567890123456789012345678901234567890123456789012345678901234567890","e33b4ddc9c38f2199c3e7b164fcc0536"}};}  }
class C{  public ID3v23Tag(ByteBuffer buffer) throws TagException {  this(buffer,"");}  }
class C{  public void paste(int startIndex){  setCaretPosition(startIndex);  JTextComponent.this.paste();}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.NameIDElement createNameIDElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.NameIDElementImpl();}  }
class C{  public void writeSearchResult(final int messageID,final Result result) throws IOException {  logger.trace("ENCODE LDAP SEARCH RESULT(messageID=%d, result=%s)",messageID,result);  writeMessageHeader(messageID);{    writeResultHeader(LDAP.OP_TYPE_SEARCH_RESULT_DONE,result);    writeResultFooter(writer);  }  writeMessageFooter(result.getControls());}  }
class C{  private void animateProgressToContent(){  AnimatorSet animatorSet=new AnimatorSet();  FrameLayout targetView=((FrameLayout)getView());  animatorSet.play(createCircularReveal(targetView)).with(createColorChange(targetView));  animatorSet.start();}  }
class C{  @Override public void onLoginFailure(Map requestParamsMap,HttpServletRequest request,HttpServletResponse response){}  }
class C{  public void initialize(String jndiName,String userDataBaseTableName,String membershipDataBaseTableName,Debug idRepoDebugLog) throws java.lang.InstantiationException {  useJNDI=true;  if (jndiName == null || jndiName.trim().length() == 0 || userDataBaseTableName == null || userDataBaseTableName.trim().length() == 0 || idRepoDebugLog == null || membershipDataBaseTableName == null) {    String msg="JdbcSimpleUserDao.initialize" + " validation failed to make and make a new instance" + " with paramaters: jndiName=" + jndiName + " userDataBaseTableName="+ userDataBaseTableName+ " membershipDataBaseTableName="+ membershipDataBaseTableName+ " debug="+ idRepoDebugLog == null ? null : idRepoDebugLog.getName();    if (idRepoDebugLog != null && idRepoDebugLog.messageEnabled()) {      idRepoDebugLog.message(msg);    }    throw new java.lang.InstantiationException(msg);  }  debug=idRepoDebugLog;  datasourceName=jndiName.trim();  userTableName=userDataBaseTableName.trim();  if (membershipDataBaseTableName != null) {    membershipTableName=membershipDataBaseTableName.trim();  }  try {    Context ctx=new InitialContext();    datasource=(DataSource)ctx.lookup(datasourceName);  } catch (  Exception ex) {    String msg="JdbcSimpleUserDao.getInstance:" + " Not able to initialize the datasource through JNDI" + " for datasourceName="+ datasourceName;    if (debug.errorEnabled()) {      debug.error(msg + " exception =" + ex);    }    datasourceName=null;    datasource=null;    userTableName=null;    debug=null;    throw new java.lang.InstantiationException(msg + ex.getMessage());  }  Connection con=null;  try {    con=getConnection();    DatabaseMetaData dbmd=con.getMetaData();    if (debug.messageEnabled()) {      debug.message("JdbcSimpleUserDao.initialize: DB Meta Data:" + " name=" + (dbmd == null ? "Not Available" : dbmd.getUserName()) + " url="+ (dbmd == null ? "Not Available" : dbmd.getURL()));    }    databaseURL=(dbmd == null ? null : dbmd.getURL());    isMySQL=isMySQL(databaseURL);  } catch (  Exception ex) {    String msg="JdbcSimpleUserDao.getInstance:" + " Not able to connect the datasource and get the meta" + " data such as DB url";    if (debug.errorEnabled()) {      debug.error(msg + " exception =" + ex);    }    datasourceName=null;    datasource=null;    userTableName=null;    membershipTableName=null;    throw new java.lang.InstantiationException(msg + ex.getMessage());  } finally {    closeConnection(con);    if (datasourceName == null) {      debug=null;    }  }}  }
class C{  @Override public com.liferay.blade.samples.servicebuilder.model.Foo deleteFoo(long fooId) throws com.liferay.portal.kernel.exception.PortalException {  return _fooLocalService.deleteFoo(fooId);}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  FSUtils.debug.message("Entered FSTerminationRequestServlet Init");  metaManager=FSUtils.getIDFFMetaManager();}  }
class C{  public boolean store_items(Collection<BrdItem> p_item_list,boolean p_is_pad_check,boolean p_copper_sharing_allowed){  for (  BrdItem curr_item : p_item_list) {    if (!p_is_pad_check && curr_item instanceof BrdAreaObstacleVia || curr_item instanceof BrdAreaObstacleComp) {      continue;    }    boolean contains_own_net=curr_item.shares_net_no(own_net_nos);    if (curr_item instanceof BrdAreaConduction && (contains_own_net || !((BrdAreaConduction)curr_item).is_area_obstacle())) {      continue;    }    if (curr_item.is_shove_fixed() && !contains_own_net) {      found_obstacle=curr_item;      return false;    }    if (curr_item instanceof BrdAbitVia) {      if (p_is_pad_check || !contains_own_net) {        shove_via_list.add((BrdAbitVia)curr_item);      }    } else     if (curr_item instanceof BrdTracep) {      BrdTracep curr_trace=(BrdTracep)curr_item;      if (!store_trace(curr_trace)) {        return false;      }    } else {      if (contains_own_net) {        if (!p_copper_sharing_allowed) {          found_obstacle=curr_item;          return false;        }        if (p_is_pad_check && !((curr_item instanceof BrdAbitPin) && ((BrdAbitPin)curr_item).drill_allowed())) {          found_obstacle=curr_item;          return false;        }      } else {        found_obstacle=curr_item;        return false;      }    }  }  search_from_side();  resort();  if (!calculate_stack_levels())   return false;  return true;}  }
class C{  public boolean isMutable(){  return isMutable;}  }
class C{  public TriggerWrapper(final String name,final String group,final String serializedValue,boolean paused,final boolean acquired,final String nodeId){  this.name=name;  this.group=group;  this.acquired=acquired;  this.serialized=serializedValue;  if (paused) {    state=Trigger.STATE_PAUSED;  } else {    state=Trigger.STATE_NORMAL;  }  this.nodeId=nodeId;}  }
class C{  void sendLogoutResponse(HttpServletRequest request,HttpServletResponse response,String relayState) throws IOException {  if (debug.messageEnabled()) {    debug.message("SingleLogoutManager.sendLogoutResponse: relaystate=" + relayState);  }  String logoutResponseXML=(String)sloResponseXMLMap.get(relayState);  if (logoutResponseXML == null) {    String origRelayState=(String)relayStateMap.get(relayState);    int logoutStatus=((Integer)currentStatusMap.get(relayState)).intValue();    String statusString=MultiProtocolUtils.getLogoutStatus(logoutStatus);    if ((origRelayState == null) || (origRelayState.length() == 0)) {      response.getWriter().print("Logout DONE. Status = " + statusString);    } else {      if (origRelayState.indexOf("?") == -1) {        response.sendRedirect(origRelayState + "?" + SingleLogoutManager.STATUS_PARAM+ "="+ statusString);      } else {        response.sendRedirect(origRelayState + "&" + SingleLogoutManager.STATUS_PARAM+ "="+ statusString);      }    }  } else {    String protocol=(String)origProtocolMap.get(relayState);    String spEntityID=(String)spEntityIDMap.get(relayState);    String origRelayState=(String)relayStateMap.get(relayState);    String realm=(String)realmMap.get(relayState);    String idpEntityID=(String)idpEntityIDMap.get(relayState);    int currentStatus=((Integer)currentStatusMap.get(relayState)).intValue();    if (protocol.equals(SingleLogoutManager.SAML2)) {      try {        LogoutResponse logResp=ProtocolFactory.getInstance().createLogoutResponse(logoutResponseXML);        String location=logResp.getDestination();        String statusVal=logResp.getStatus().getStatusCode().getValue();        String newVal=getNewStatusCode(currentStatus,statusVal);        if (!statusVal.equals(newVal)) {          logResp.getStatus().getStatusCode().setValue(statusVal);        }        if (debug.messageEnabled()) {          debug.message("SingleLogoutManager.sendLogoutRes:" + "(SAML2) location=" + location + " orig status="+ statusVal+ ", new status="+ newVal+ ", orig relay="+ origRelayState+ ", realm="+ realm+ ", idpEntityID="+ idpEntityID+ ", spEntityID="+ spEntityID);        }        LogoutUtil.sendSLOResponse(response,logResp,location,origRelayState,realm,idpEntityID,SAML2Constants.IDP_ROLE,spEntityID);      } catch (      SAML2Exception ex) {        debug.error("SingleLogoutManager.sendLogoutResponse:saml2",ex);        throw new IOException(ex.getMessage());      }    } else     if (protocol.equals(SingleLogoutManager.IDFF)) {      boolean failed=false;      String logoutDoneURL=null;      try {        debug.message("SingleLogoutManager.sendLogoutResp: IDFF");        IDFFMetaManager metaManager=FSUtils.getIDFFMetaManager();        ProviderDescriptorType descriptor=metaManager.getSPDescriptor(realm,spEntityID);        String retURL=descriptor.getSingleLogoutServiceReturnURL();        Element elem=XMLUtils.toDOMDocument(logoutResponseXML,SingleLogoutManager.debug).getDocumentElement();        FSLogoutResponse responseLogout=new FSLogoutResponse(elem);        BaseConfigType hostedConfig=metaManager.getIDPDescriptorConfig(realm,idpEntityID);        logoutDoneURL=FSServiceUtils.getLogoutDonePageURL(request,hostedConfig,null);        Status status=responseLogout.getStatus();        String statusVal=status.getStatusCode().getValue();        String newVal=getNewStatusCode(currentStatus,statusVal);        if (!statusVal.equals(newVal)) {          com.sun.identity.saml.protocol.StatusCode statCode=new com.sun.identity.saml.protocol.StatusCode(newVal);          com.sun.identity.saml.protocol.Status stat=new com.sun.identity.saml.protocol.Status(statCode);          responseLogout.setStatus(stat);        }        if (debug.messageEnabled()) {          debug.message("SingleLogoutManager.sendLogoutRes:" + "(IDFF) orig status=" + statusVal + ", new status="+ newVal+ ", orig relay="+ origRelayState+ ", logout done URL="+ logoutDoneURL+ ", realm="+ realm+ ", idpEntityID="+ idpEntityID+ ", spEntityID="+ spEntityID);        }        String urlEncodedResponse=responseLogout.toURLEncodedQueryString();        if (FSServiceUtils.isSigningOn()) {          String certAlias=IDFFMetaUtils.getFirstAttributeValueFromConfig(hostedConfig,IFSConstants.SIGNING_CERT_ALIAS);          if (certAlias == null || certAlias.length() == 0) {            if (debug.messageEnabled()) {              debug.message("SingleLogoutManager.sendLogoutRes:" + "signSAMLRequest couldn't obtain cert alias.");            }            throw new SAMLResponderException(FSUtils.bundle.getString(IFSConstants.NO_CERT_ALIAS));          } else {            urlEncodedResponse=FSSignatureUtil.signAndReturnQueryString(urlEncodedResponse,certAlias);          }        }        StringBuffer redirectURL=new StringBuffer();        redirectURL.append(retURL);        if (retURL.indexOf(IFSConstants.QUESTION_MARK) == -1) {          redirectURL.append(IFSConstants.QUESTION_MARK);        } else {          redirectURL.append(IFSConstants.AMPERSAND);        }        redirectURL.append(urlEncodedResponse);        if (debug.messageEnabled()) {          debug.message("SingleLogoutManager.sendResponse " + "for IDFF, url = " + redirectURL.toString());        }        response.sendRedirect(redirectURL.toString());      } catch (      FSMsgException ex) {        debug.error("SingleLogoutManager.sendLogoutRes",ex);        failed=true;      }catch (      SAMLException ex) {        debug.error("SingleLogoutManager.sendLogoutRes",ex);        failed=true;        ;      }catch (      IDFFMetaException ex) {        debug.error("SingleLogoutManager.sendLogoutRes",ex);        failed=true;      }catch (      IOException ex) {        debug.error("SingleLogoutManager.sendLogoutRes",ex);        failed=true;      }      if (failed) {        FSServiceUtils.returnLocallyAfterOperation(response,logoutDoneURL,false,IFSConstants.LOGOUT_SUCCESS,IFSConstants.LOGOUT_FAILURE);      }    } else     if (protocol.equals(SingleLogoutManager.WS_FED)) {      debug.message("SingleLogoutManager.sendLogoutResponse: WSFED");      if (origRelayState != null) {        response.sendRedirect(origRelayState);      } else {        response.getWriter().print("Logout DONE.");      }    } else {      debug.error("SingleLogoutManager.sendLogoutResponse: invalid" + " protocol : " + protocol);    }  }  cleanupParameters(relayState);  return;}  }
class C{  public static void cleanDirectory(File directory) throws IOException {  if (!directory.exists()) {    String message=directory + " does not exist";    throw new IllegalArgumentException(message);  }  if (!directory.isDirectory()) {    String message=directory + " is not a directory";    throw new IllegalArgumentException(message);  }  File[] files=directory.listFiles();  if (files == null) {    throw new IOException("Failed to list contents of " + directory);  }  IOException exception=null;  for (  File file : files) {    try {      forceDelete(file);    } catch (    IOException ioe) {      exception=ioe;    }  }  if (null != exception) {    throw exception;  }}  }
class C{  public String toString(){  return "{" + notif + ", "+ id+ "}";}  }
class C{  private static byte charToByte(char c){  return (byte)"0123456789ABCDEF".indexOf(c);}  }
class C{  public float convertToTb(long valInBytes){  return (float)valInBytes / (BYTEFACTOR * BYTEFACTOR * BYTEFACTOR* BYTEFACTOR);}  }
class C{  private JsonValue performRead(String resourceID) throws ResourceException {  JsonValue readResults=null;  readResults=connectionFactory.getConnection().read(taskScannerContext.getContext(),Requests.newReadRequest(resourceID)).getContent();  return readResults;}  }
class C{  public synchronized void storeContext(Context context) throws InstanceNotFoundException, MBeanException {  try {    ObjectName sname=new ObjectName("Catalina:type=StoreConfig");    if (mserver.isRegistered(sname)) {      mserver.invoke(sname,"store",new Object[]{context},new String[]{"java.lang.String"});    } else {      log.error(sm.getString("standardServer.storeConfig.notAvailable",sname));    }  } catch (  Throwable t) {    ExceptionUtils.handleThrowable(t);    log.error(t);  }}  }
class C{  public void notifyItemChanged(DATA item){  if (item != null) {    int index=itemList.indexOf(item);    notifyItemChanged(index);  }}  }
class C{  public static boolean wildcardMatch(String string,String pattern){  string=string.toLowerCase();  pattern=pattern.toLowerCase();  if (pattern.equals("*") || pattern.equals(string)) {    return true;  }  int length=pattern.length();  int wildCardIndex=pattern.indexOf("*");  if (wildCardIndex >= 0) {    String patternSubStr=pattern.substring(0,wildCardIndex);    if (!string.startsWith(patternSubStr,0)) {      return false;    }    int beginIndex=patternSubStr.length() + 1;    int stringIndex=0;    if (wildCardIndex > 0) {      stringIndex=beginIndex;    }    String sub=pattern.substring(beginIndex,length);    while ((wildCardIndex=pattern.indexOf("*",beginIndex)) != -1) {      patternSubStr=pattern.substring(beginIndex,wildCardIndex);      if (string.indexOf(patternSubStr,stringIndex) == -1) {        return false;      }      beginIndex=wildCardIndex + 1;      stringIndex=stringIndex + patternSubStr.length() + 1;      sub=pattern.substring(beginIndex,length);    }    if (string.endsWith(sub)) {      return true;    }  }  return false;}  }
class C{  public void testPowNegativeNumToEvenExp(){  byte aBytes[]={50,-26,90,69,120,32,63,-103,-14,35};  int aSign=-1;  int exp=4;  byte rBytes[]={102,107,-122,-43,-52,-20,-27,25,-9,88,-13,75,78,81,-33,-77,39,27,-37,106,121,-73,108,-47,-101,80,-25,71,13,94,-7,-33,1,-17,-65,-70,-61,-3,-47};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.pow(exp);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public Assertion createAssertion(Element elem) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ASSERTION,elem);  if (obj == null) {    return new AssertionImpl(elem);  } else {    return (Assertion)obj;  }}  }
class C{  private boolean isNeverExpires(){  return getExpiryTime() == defaultExpireTime();}  }
class C{  private static String[] match(String value){  if (value == null) {    return null;  }  Matcher matcher=IPV4_PATTERN.matcher(value);  if (matcher.matches()) {    int count=matcher.groupCount();    String[] groups=new String[count];    for (int j=0; j < count; j++) {      groups[j]=matcher.group(j + 1);    }    return groups;  }  return null;}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  FSUtils.debug.message("FSReturnLogoutServlet Initializing...");  metaManager=FSUtils.getIDFFMetaManager();}  }
class C{  public void dropActionChanged(DragSourceDragEvent dsde){  ((DragSourceListener)a).dropActionChanged(dsde);  ((DragSourceListener)b).dropActionChanged(dsde);}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    ServerTransaction st=requestEvent.getServerTransaction();    if (st == null) {      st=sipProvider.getNewServerTransaction(request);    }    System.out.println("shootme: got an Invite with Authorization, sending Trying");    Response response=messageFactory.createResponse(Response.TRYING,request);    st.sendResponse(response);    dsam=new DigestServerAuthenticationHelper();    if (!dsam.doAuthenticatePlainTextPassword(request,"pass")) {      Response challengeResponse=messageFactory.createResponse(Response.PROXY_AUTHENTICATION_REQUIRED,request);      dsam.generateChallenge(headerFactory,challengeResponse,"nist.gov");      st.sendResponse(challengeResponse);      return;    }    System.out.println("shootme: got an Invite with Authorization, sending Trying");    dialog=st.getDialog();    st.sendResponse(response);    this.okResponse=messageFactory.createResponse(Response.OK,request);    Address address=addressFactory.createAddress("Shootme <sip:" + myAddress + ":"+ myPort+ ">");    ContactHeader contactHeader=headerFactory.createContactHeader(address);    response.addHeader(contactHeader);    ToHeader toHeader=(ToHeader)okResponse.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    okResponse.addHeader(contactHeader);    this.inviteTid=st;    this.inviteRequest=request;    new Timer().schedule(new MyTimerTask(this),1000);  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList genderList;  Node genderNode;  Node entRef;  Node entElement;  Node createdNode;  Node replacedChild;  int nodeType;  doc=(Document)load("staff",true);  genderList=doc.getElementsByTagName("gender");  genderNode=genderList.item(2);  entRef=genderNode.getFirstChild();  nodeType=(int)entRef.getNodeType();  if (equals(1,nodeType)) {    entRef=doc.createEntityReference("ent4");    assertNotNull("createdEntRefNotNull",entRef);  }  entElement=entRef.getFirstChild();  createdNode=doc.createElement("newChild");{    boolean success=false;    try {      replacedChild=entRef.replaceChild(createdNode,entElement);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  @Override public void sendError(int sc,String msg) throws IOException {  if (!included)   ((HttpServletResponse)getResponse()).sendError(sc,msg);}  }
class C{  private void suppress(Request request){  Header cookieHeader=request.getHeaders().get("Cookie");  if (cookieHeader == null) {    return;  }  List<String> headers=new ArrayList<>(cookieHeader.getValues());  for (ListIterator<String> hi=headers.listIterator(); hi.hasNext(); ) {    String header=hi.next();    List<String> parts=new ArrayList<>(Arrays.asList(DELIM_SEMICOLON.split(header,0)));    int originalSize=parts.size();    boolean remove=false;    int intact=0;    for (ListIterator<String> pi=parts.listIterator(); pi.hasNext(); ) {      String part=pi.next().trim();      if (part.length() != 0 && part.charAt(0) == '$') {        if (remove) {          pi.remove();        }      } else {        Action action=action((DELIM_EQUALS.split(part,2))[0].trim());        if (action == Action.SUPPRESS || action == Action.MANAGE) {          pi.remove();          remove=true;        } else {          intact++;          remove=false;        }      }    }    if (intact == 0) {      hi.remove();    } else     if (parts.size() != originalSize) {      hi.set(joinAsString(";",parts));    }  }  commitNewValues(request,"Cookie",headers);}  }
class C{  public void testFloatValueZero(){  String a="0";  float result=0.0f;  float aNumber=new BigInteger(a).floatValue();  assertTrue(aNumber == result);}  }
class C{  public boolean isIncludeCommonAttributes(){  return includeCommonAttribute;}  }
class C{  public static String tagSwap(String content,Map<String,String> tagSwapMap){  for (  Map.Entry<String,String> entry : tagSwapMap.entrySet()) {    content=content.replace(entry.getKey(),entry.getValue());  }  return content;}  }
class C{  private boolean compareSetsOfStrings(Set<String> one,Set<String> two){  if (one == two) {    return true;  }  if (one == null && two == null) {    return true;  }  if (one == null || two == null) {    return false;  }  if (one.size() != two.size()) {    return false;  }  for (  String oneString : one) {    if (!two.contains(oneString)) {      return false;    }  }  return true;}  }
class C{  public VirtualAttributeConfigManager(ServerContext serverContext){  this.serverContext=serverContext;}  }
class C{  public static void registerPasswordGenerator(DN configEntryDN,PasswordGenerator<?> generator){  directoryServer.passwordGenerators.put(configEntryDN,generator);}  }
class C{  public int compareTo(Byte object){  return compare(value,object.value);}  }
class C{  TransferHandler.DropLocation dropLocationForPoint(Point p){  return null;}  }
class C{  public AttributeSet removeAttribute(AttributeSet old,Object key){  if (key instanceof StyleConstants) {    HTML.Tag tag=HTML.getTagForStyleConstantsKey((StyleConstants)key);    if (tag != null) {      old=super.removeAttribute(old,tag);    }    Object cssKey=css.styleConstantsKeyToCSSKey((StyleConstants)key);    if (cssKey != null) {      return super.removeAttribute(old,cssKey);    }  }  return super.removeAttribute(old,key);}  }
class C{  public static boolean inOrganizationalUnit(Debug debug,AMStoreConnection storeConn,AMObject obj){  boolean inOrgUnit=false;  String parentDN=obj.getParentDN();  try {    while ((parentDN != null) && !inOrgUnit) {      if (storeConn.getAMObjectType(parentDN) == AMObject.ORGANIZATIONAL_UNIT) {        inOrgUnit=true;      } else {        AMObject parent=getAMObject(debug,parentDN,storeConn);        parentDN=(parent != null) ? parent.getParentDN() : null;      }    }  } catch (  SSOException ssoe) {    debug.warning("AdminInterfaceUtils.inOrganizationalUnit",ssoe);  }catch (  AMException ame) {    debug.warning("AdminInterfaceUtils.inOrganizationalUnit",ame);  }  return inOrgUnit;}  }
class C{  public Commit(ObjectId gitObject,int headDistance,List<Ref> annotatedTags,List<Ref> lightTags){  super();  this.gitObject=gitObject;  this.headDistance=headDistance;  this.annotatedTags=annotatedTags;  this.lightTags=lightTags;}  }
class C{  public void bind_context(org.omg.CosNaming.NameComponent[] n,org.omg.CosNaming.NamingContext nc) throws org.omg.CosNaming.NamingContextPackage.NotFound, org.omg.CosNaming.NamingContextPackage.CannotProceed, org.omg.CosNaming.NamingContextPackage.InvalidName, org.omg.CosNaming.NamingContextPackage.AlreadyBound {  org.omg.CORBA.portable.InputStream $in=null;  try {    org.omg.CORBA.portable.OutputStream $out=_request("bind_context",true);    org.omg.CosNaming.NameHelper.write($out,n);    org.omg.CosNaming.NamingContextHelper.write($out,nc);    $in=_invoke($out);    return;  } catch (  org.omg.CORBA.portable.ApplicationException $ex) {    $in=$ex.getInputStream();    String _id=$ex.getId();    if (_id.equals("IDL:omg.org/CosNaming/NamingContext/NotFound:1.0"))     throw org.omg.CosNaming.NamingContextPackage.NotFoundHelper.read($in); else     if (_id.equals("IDL:omg.org/CosNaming/NamingContext/CannotProceed:1.0"))     throw org.omg.CosNaming.NamingContextPackage.CannotProceedHelper.read($in); else     if (_id.equals("IDL:omg.org/CosNaming/NamingContext/InvalidName:1.0"))     throw org.omg.CosNaming.NamingContextPackage.InvalidNameHelper.read($in); else     if (_id.equals("IDL:omg.org/CosNaming/NamingContext/AlreadyBound:1.0"))     throw org.omg.CosNaming.NamingContextPackage.AlreadyBoundHelper.read($in); else     throw new org.omg.CORBA.MARSHAL(_id);  }catch (  org.omg.CORBA.portable.RemarshalException $rm) {    bind_context(n,nc);  } finally {    _releaseReply($in);  }}  }
class C{  public void find(int index,float weightLoss,float moveCost,ArrayList<DbEntry> itemsPlaced){  if ((weightLoss >= lowestWeightLoss) || ((weightLoss == lowestWeightLoss) && (moveCost >= lowestMoveCost))) {    return;  } else   if (index >= itemsToPlace.size()) {    lowestWeightLoss=weightLoss;    lowestMoveCost=moveCost;    finalPlacedItems=deepCopy(itemsPlaced);    return;  }  DbEntry me=itemsToPlace.get(index);  int myX=me.cellX;  int myY=me.cellY;  ArrayList<DbEntry> itemsIncludingMe=new ArrayList<>(itemsPlaced.size() + 1);  itemsIncludingMe.addAll(itemsPlaced);  itemsIncludingMe.add(me);  if (me.spanX > 1 || me.spanY > 1) {    int myW=me.spanX;    int myH=me.spanY;    for (int y=0; y < mTrgY; y++) {      for (int x=0; x < mTrgX; x++) {        float newMoveCost=moveCost;        if (x != myX) {          me.cellX=x;          newMoveCost++;        }        if (y != myY) {          me.cellY=y;          newMoveCost++;        }        if (ignoreMove) {          newMoveCost=moveCost;        }        if (isVacant(occupied,x,y,myW,myH)) {          markCells(occupied,me,true);          find(index + 1,weightLoss,newMoveCost,itemsIncludingMe);          markCells(occupied,me,false);        }        if (myW > me.minSpanX && isVacant(occupied,x,y,myW - 1,myH)) {          me.spanX--;          markCells(occupied,me,true);          find(index + 1,weightLoss,newMoveCost + 1,itemsIncludingMe);          markCells(occupied,me,false);          me.spanX++;        }        if (myH > me.minSpanY && isVacant(occupied,x,y,myW,myH - 1)) {          me.spanY--;          markCells(occupied,me,true);          find(index + 1,weightLoss,newMoveCost + 1,itemsIncludingMe);          markCells(occupied,me,false);          me.spanY++;        }        if (myH > me.minSpanY && myW > me.minSpanX && isVacant(occupied,x,y,myW - 1,myH - 1)) {          me.spanX--;          me.spanY--;          markCells(occupied,me,true);          find(index + 1,weightLoss,newMoveCost + 2,itemsIncludingMe);          markCells(occupied,me,false);          me.spanX++;          me.spanY++;        }        me.cellX=myX;        me.cellY=myY;      }    }    find(index + 1,weightLoss + me.weight,moveCost,itemsPlaced);  } else {    int newDistance=Integer.MAX_VALUE;    int newX=Integer.MAX_VALUE, newY=Integer.MAX_VALUE;    for (int y=0; y < mTrgY; y++) {      for (int x=0; x < mTrgX; x++) {        if (!occupied[x][y]) {          int dist=ignoreMove ? 0 : ((me.cellX - x) * (me.cellX - x) + (me.cellY - y) * (me.cellY - y));          if (dist < newDistance) {            newX=x;            newY=y;            newDistance=dist;          }        }      }    }    if (newX < mTrgX && newY < mTrgY) {      float newMoveCost=moveCost;      if (newX != myX) {        me.cellX=newX;        newMoveCost++;      }      if (newY != myY) {        me.cellY=newY;        newMoveCost++;      }      if (ignoreMove) {        newMoveCost=moveCost;      }      markCells(occupied,me,true);      find(index + 1,weightLoss,newMoveCost,itemsIncludingMe);      markCells(occupied,me,false);      me.cellX=myX;      me.cellY=myY;      if (index + 1 < itemsToPlace.size() && itemsToPlace.get(index + 1).weight >= me.weight && !ignoreMove) {        find(index + 1,weightLoss + me.weight,moveCost,itemsPlaced);      }    } else {      for (int i=index + 1; i < itemsToPlace.size(); i++) {        weightLoss+=itemsToPlace.get(i).weight;      }      find(itemsToPlace.size(),weightLoss + me.weight,moveCost,itemsPlaced);    }  }}  }
class C{  public Set<String> schemaSubEntries(SSOToken token,String dn,String filter,String sidFilter,int numOfEntries,boolean sortResults,boolean ascendingOrder) throws SMSException, SSOException {  try {    Object[] objs={token.getTokenID().toString(),dn,filter,sidFilter,new Integer(numOfEntries),Boolean.valueOf(sortResults),Boolean.valueOf(ascendingOrder)};    return ((Set<String>)client.send(client.encodeMessage("schemaSubEntries",objs),sessionCookies.getLBCookie(token.getTokenID().toString()),null));  } catch (  SSOException ssoe) {    throw ssoe;  }catch (  SMSException smse) {    throw smse;  }catch (  Exception re) {    debug.error("SMSJAXRPCObject:subEntries -- Exception:",re);    throw (new SMSException(re,"sms-JAXRPC-schemasubentry-cannot-search"));  }}  }
class C{  protected void replacePane(JComponent currentPane,JComponent newPane){  if (currentPane != null) {    deinstallMouseHandlers(currentPane);    frame.remove(currentPane);  }  if (newPane != null) {    frame.add(newPane);    installMouseHandlers(newPane);  }}  }
class C{  public ThrottlingFilter(AsyncFunction<ContextAndRequest,String,Exception> requestGroupingPolicy,ThrottlingPolicy throttlingRatePolicy,ThrottlingStrategy throttlingStrategy){  this.requestGroupingPolicy=checkNotNull(requestGroupingPolicy);  this.throttlingRatePolicy=checkNotNull(throttlingRatePolicy);  this.throttlingStrategy=checkNotNull(throttlingStrategy);}  }
class C{  public static ItemStack deserialize(Map<String,Object> args){  Material type=Material.getMaterial((String)args.get("type"));  short damage=0;  int amount=1;  if (args.containsKey("damage")) {    damage=((Number)args.get("damage")).shortValue();  }  if (args.containsKey("amount")) {    amount=((Number)args.get("amount")).intValue();  }  ItemStack result=new ItemStack(type,amount,damage);  if (args.containsKey("enchantments")) {    Object raw=args.get("enchantments");    if (raw instanceof Map) {      Map<?,?> map=(Map<?,?>)raw;      for (      Map.Entry<?,?> entry : map.entrySet()) {        Enchantment enchantment=Enchantment.getByName(entry.getKey().toString());        if ((enchantment != null) && (entry.getValue() instanceof Integer)) {          result.addUnsafeEnchantment(enchantment,(Integer)entry.getValue());        }      }    }  } else   if (args.containsKey("meta")) {    Object raw=args.get("meta");    if (raw instanceof ItemMeta) {      result.setItemMeta((ItemMeta)raw);    }  }  return result;}  }
class C{  int readCorner1(int numRows,int numColumns){  int currentByte=0;  if (readModule(numRows - 1,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 1,1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 1,2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(1,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(2,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(3,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  return currentByte;}  }
class C{  public void modifyService(String serviceName,Map attrMap) throws IdRepoException, SSOException {  IdServices idServices=IdServicesFactory.getDataStoreServices();  Set OCs=getServiceOCs(token,serviceName);  SchemaType stype;  Map tMap=new HashMap();  tMap.put(serviceName,OCs);  Set assignedServices=idServices.getAssignedServices(token,type,name,tMap,orgName,univDN);  if (!assignedServices.contains(serviceName)) {    Object args[]={serviceName};    throw new IdRepoException(IdRepoBundle.BUNDLE_NAME,IdRepoErrorCode.SERVICE_NOT_ASSIGNED,args);  }  boolean hasCosPriority=(new CaseInsensitiveHashSet(attrMap.keySet()).contains(COS_PRIORITY));  Object values=null;  if (hasCosPriority) {    attrMap=new CaseInsensitiveHashMap(attrMap);    values=attrMap.remove(COS_PRIORITY);  }  try {    ServiceSchemaManager ssm=new ServiceSchemaManager(serviceName,token);    ServiceSchema ss=ssm.getSchema(type.getName());    if (ss != null) {      attrMap=ss.validateAndInheritDefaults(attrMap,false);      stype=ss.getServiceType();    } else     if ((ss=ssm.getSchema(SchemaType.DYNAMIC)) != null) {      attrMap=ss.validateAndInheritDefaults(attrMap,false);      stype=SchemaType.DYNAMIC;    } else {      Object args[]={serviceName};      throw new IdRepoException(IdRepoBundle.BUNDLE_NAME,IdRepoErrorCode.UNABLE_GET_SERVICE_SCHEMA,args);    }  } catch (  SMSException smse) {    Object args[]={serviceName};    throw new IdRepoException(IdRepoBundle.BUNDLE_NAME,IdRepoErrorCode.DATA_INVALID_FOR_SERVICE,args);  }  if (hasCosPriority) {    attrMap.put(COS_PRIORITY,values);  }  if (debug.messageEnabled()) {    debug.message("AMIdentity.modifyService befre idService " + "serviceName=" + serviceName + ";  attrMap="+ attrMap);  }  idServices.modifyService(token,type,name,serviceName,stype,attrMap,orgName,univDN);}  }
class C{  public void enableSync(){  data.put("enabled",Boolean.TRUE);}  }
class C{  public void _testImportNode1() throws Throwable {  Document doc;  Document aNewDoc;  Attr newAttr;  Text importedChild;  Node aNode;  Document ownerDocument;  Element attrOwnerElement;  DocumentType docType;  String system;  boolean specified;  NodeList childList;  String nodeName;  Node child;  String childValue;  List<String> expectedResult=new ArrayList<String>();  expectedResult.add("elem:attr1");  expectedResult.add("importedText");  doc=(Document)load("staffNS",builder);  aNewDoc=(Document)load("staffNS",builder);  newAttr=aNewDoc.createAttribute("elem:attr1");  importedChild=aNewDoc.createTextNode("importedText");  aNode=newAttr.appendChild(importedChild);  aNode=doc.importNode(newAttr,false);  ownerDocument=aNode.getOwnerDocument();  docType=ownerDocument.getDoctype();  system=docType.getSystemId();  assertNotNull("aNode",aNode);  assertURIEquals("systemId",null,null,null,"staffNS.dtd",null,null,null,null,system);  attrOwnerElement=((Attr)aNode).getOwnerElement();  assertNull("ownerElement",attrOwnerElement);  specified=((Attr)aNode).getSpecified();  assertTrue("specified",specified);  childList=aNode.getChildNodes();  assertEquals("childList",1,childList.getLength());  nodeName=aNode.getNodeName();  assertEquals("nodeName","elem:attr1",nodeName);  child=aNode.getFirstChild();  childValue=child.getNodeValue();  assertEquals("childValue","importedText",childValue);}  }
class C{  public boolean trace_widths_are_layer_dependent(int p_net_no){  int compare_width=get_trace_half_width(p_net_no,0);  for (int iindex=1; iindex < layer_structure.size(); ++iindex) {    if (get_trace_half_width(p_net_no,iindex) != compare_width) {      return true;    }  }  return false;}  }
class C{  private void startExpandingAnimation(){  if (!isWindowFocused)   return;  if (mExpandingController == null) {    initExpandingAnimationController();  }  if (mExpandingController.isRunning() || mExpandingController.isStarted()) {    mExpandingController.end();    mExpandingController.cancel();  }  mExpandingController.start();}  }
class C{  ThaiBuddhistDate(LocalDate isoDate){  Objects.requireNonNull(isoDate,"isoDate");  this.isoDate=isoDate;}  }
class C{  public PercentLayoutConstraint(double x,double y,double width,double height){  this.x=x;  this.y=y;  this.width=width;  this.height=height;}  }
class C{  public boolean hasOperationalAttribute(AttributeType attributeType){  return hasAttribute(operationalAttributes,attributeType);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NamedNodeMap entities;  DocumentType docType;  Node retval;  Element elem;  doc=(Document)load("hc_staff",true);  docType=doc.getDoctype();  if (!(("text/html".equals(getContentType())))) {    assertNotNull("docTypeNotNull",docType);    entities=docType.getEntities();    assertNotNull("entitiesNotNull",entities);    elem=doc.createElementNS("http://www.w3.org/1999/xhtml","br");    try {      retval=entities.setNamedItemNS(elem);      fail("throw_HIER_OR_NO_MOD_ERR");    } catch (    DOMException ex) {switch (ex.code) {case 3:        break;case 7:      break;default :    throw ex;}}}}  }
class C{  @BeforeClass public void disableLogging(){  TestCaseUtils.setDefaultLogLevel(Level.SEVERE);}  }
class C{  private void push(final int type){  if (outputStack == null) {    outputStack=new int[10];  }  int n=outputStack.length;  if (outputStackTop >= n) {    int[] t=new int[Math.max(outputStackTop + 1,2 * n)];    System.arraycopy(outputStack,0,t,0,n);    outputStack=t;  }  outputStack[outputStackTop++]=type;  int top=owner.inputStackTop + outputStackTop;  if (top > owner.outputStackMax) {    owner.outputStackMax=top;  }}  }
class C{  public XPathException(String message,Object styleNode){  super(message);  m_styleNode=styleNode;}  }
class C{  public static QueryExp match(AttributeValueExp a,StringValueExp s){  return new MatchQueryExp(a,s);}  }
class C{  public static boolean equals(Object[] a,Object[] a2){  if (a == a2)   return true;  if (a == null || a2 == null)   return false;  int length=a.length;  if (a2.length != length)   return false;  for (int i=0; i < length; i++) {    Object o1=a[i];    Object o2=a2[i];    if (!(o1 == null ? o2 == null : o1.equals(o2)))     return false;  }  return true;}  }
class C{  private static Map initializeConfigProperties() throws SecurityException, IOException {  Map<String,String> mapFileNameToContent=new HashMap<String,String>();  List<String> dataFiles=getTagSwapConfigFiles();  Map<String,Object> map=ServicesDefaultValues.getDefaultValues();  String basedir=(String)map.get(SetupConstants.CONFIG_VAR_BASE_DIR);  String deployuri=(String)map.get(SetupConstants.CONFIG_VAR_SERVER_URI);  try {    File fhm=new File(basedir + deployuri + "/"+ SMS_STR);    fhm.mkdirs();  } catch (  SecurityException e) {    Debug.getInstance(SetupConstants.DEBUG_NAME).error("AMSetupServlet.initializeConfigProperties",e);    throw e;  }  for (  String file : dataFiles) {    StringBuilder sbuf;    try {      sbuf=new StringBuilder(readFile(file));    } catch (    IOException ioex) {      break;    }    int idx=file.lastIndexOf("/");    String absFile=idx != -1 ? file.substring(idx + 1) : file;    if (absFile.equalsIgnoreCase(SetupConstants.AMCONFIG_PROPERTIES)) {      String dbOption=(String)map.get(SetupConstants.CONFIG_VAR_DATA_STORE);      boolean embedded=dbOption.equals(SetupConstants.SMS_EMBED_DATASTORE);      boolean dbSunDS;      boolean dbMsAD=false;      if (embedded) {        dbSunDS=true;      } else {        dbSunDS=dbOption.equals(SetupConstants.SMS_DS_DATASTORE);        dbMsAD=dbOption.equals(SetupConstants.SMS_AD_DATASTORE);      }      if (dbSunDS || dbMsAD) {        int idx1=sbuf.indexOf(SetupConstants.CONFIG_VAR_SMS_DATASTORE_CLASS);        if (idx1 != -1) {          String dataStoreClass=embedded ? SetupConstants.CONFIG_VAR_EMBEDDED_DATASTORE_CLASS : SetupConstants.CONFIG_VAR_DS_DATASTORE_CLASS;          sbuf.replace(idx1,idx1 + SetupConstants.CONFIG_VAR_SMS_DATASTORE_CLASS.length(),dataStoreClass);        }      }    }    String swapped=ServicesDefaultValues.tagSwap(sbuf.toString(),file.endsWith("xml"));    if (absFile.equalsIgnoreCase(SetupConstants.AMCONFIG_PROPERTIES) || absFile.equalsIgnoreCase(SystemProperties.CONFIG_FILE_NAME)) {      mapFileNameToContent.put(absFile,swapped);    } else     if (absFile.equalsIgnoreCase(SetupConstants.SECURID_PROPERTIES)) {      writeToFile(basedir + deployuri + "/auth/ace/data/"+ absFile,swapped);    } else {      writeToFile(basedir + "/" + absFile,swapped);    }  }  return mapFileNameToContent;}  }
class C{  public void removeUserProviderInfo(String userDN){  FSUtils.debug.message("Entered FSReturnSessionManager::removeUserProviderInfo");  userDN=DN.valueOf(userDN).toString().toLowerCase();synchronized (userAndProviderMap) {    userAndProviderMap.remove(userDN);  }}  }
class C{  public void addTreeSelectionListener(TreeSelectionListener tsl){  listenerList.add(TreeSelectionListener.class,tsl);  if (listenerList.getListenerCount(TreeSelectionListener.class) != 0 && selectionRedirector == null) {    selectionRedirector=new TreeSelectionRedirector();    selectionModel.addTreeSelectionListener(selectionRedirector);  }}  }
class C{  public boolean isSingleValue(){  return isSingleValue;}  }
class C{  public static boolean isLowSurrogate(int c){  return (0xDC00 <= c && c <= 0xDFFF);}  }
class C{  public ConfigDeleteListenerAdaptor(ServerManagementContext serverContext,ManagedObjectPath<?,?> path,InstantiableRelationDefinition<?,S> relation,ServerManagedObjectDeleteListener<S> listener){  this.serverContext=serverContext;  this.path=path;  this.optionalRelation=null;  this.instantiableRelation=relation;  this.setRelation=null;  this.listener=listener;  this.cachedManagedObject=null;}  }
class C{  public NoSuchAttributeException(String explanation){  super(explanation);}  }
class C{  public boolean hasName(final String name){  for (  final String n : names) {    if (n.equalsIgnoreCase(name)) {      return true;    }  }  return false;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer();  int i;  for (i=0; i < ncolumns; i++) {    sb.append(column[i] == null ? "NULL" : column[i]);    sb.append('|');  }  sb.append('\n');  for (i=0; i < nrows; i++) {    int k;    String row[]=(String[])rows.elementAt(i);    for (k=0; k < ncolumns; k++) {      sb.append(row[k] == null ? "NULL" : row[k]);      sb.append('|');    }    sb.append('\n');  }  return sb.toString();}  }
class C{  protected AdminClientException(LocalizableMessage message,Throwable cause){  super(message,cause);}  }
class C{  public final void test_ROUNDTRIP_GetKeySpecKeyString02() throws Exception {  boolean performed=false;  for (int i=0; i < algName.length; i++) {    for (int l=0; l < provider.length; l++) {      if (provider[l] == null) {        continue;      }      TestDataGenerator g;      try {        g=new TestDataGenerator(algName[i][0],algName[i][1],privateKeyInfoDamaged,provider[l]);      } catch (      TestDataGenerator.AllowedFailure allowedFailure) {        continue;      }      try {        EncryptedPrivateKeyInfo epki;        if (g.ap() == null) {          epki=new EncryptedPrivateKeyInfo(algName[i][0],g.ct());        } else {          epki=new EncryptedPrivateKeyInfo(g.ap(),g.ct());        }        try {          epki.getKeySpec(g.pubK() == null ? g.k() : g.pubK(),provider[l].getName());          fail(algName[i][0] + ", " + algName[i][1]);        } catch (        InvalidKeyException e) {        }        performed=true;      } catch (      NoSuchAlgorithmException allowedFailure) {      }    }  }  assertTrue("Test not performed",performed);}  }
class C{  public int viewToModel(float x,float y,Shape a,Position.Bias[] bias){  return view.viewToModel(x,y,a,bias);}  }
class C{  public static void executeActions(Context context,List<Action> actions) throws OmnidroidException {  for (  Action action : actions) {    try {      if (action.getExecutionMethod().equals(Action.BY_ACTIVITY)) {        context.startActivity(action.getIntent());      } else       if (action.getExecutionMethod().equals(Action.BY_SERVICE)) {        context.startService(action.getIntent());      } else       if (action.getExecutionMethod().equals(Action.BY_BROADCAST)) {        context.sendBroadcast(action.getIntent());      } else {        throw new OmnidroidException(120001,ExceptionMessageMap.getMessage(new Integer(120001).toString()) + action.getActionName());      }    } catch (    SecurityException e) {      Logger.w(TAG,e.toString(),e);      Logger.w(TAG,e.getLocalizedMessage());      Logger.w(TAG,"No permissions to perform this action: " + action.getActionName());    }catch (    ActivityNotFoundException e) {      Logger.w(TAG,e.toString(),e);      Logger.w(TAG,e.getLocalizedMessage());      Logger.w(TAG,"No activity found to perform this action: " + action.getActionName());    }  }}  }
class C{  public void removeParameter(String parameterName){  if (!(address instanceof SipUri))   throw new RuntimeException("address is not a SipUri");  SipUri uri=(SipUri)address;  uri.removeParameter(parameterName);}  }
class C{  protected void fireColumnMoved(TableColumnModelEvent e){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == TableColumnModelListener.class) {      ((TableColumnModelListener)listeners[i + 1]).columnMoved(e);    }  }}  }
class C{  public StatefulAccessToken(String id,String authorizationCode,String resourceOwnerId,String clientId,String redirectUri,Set<String> scope,long expiryTime,RefreshToken refreshToken,String tokenName,String grantType,String nonce,String realm,String claims,String auditTrackingId,long authTime,JsonValue confirmationKey){  super(new HashMap<String,Object>());  setId(id);  setAuthorizationCode(authorizationCode);  setResourceOwnerId(resourceOwnerId);  setClientId(clientId);  setRedirectUri(redirectUri);  setScope(scope);  setExpiryTime(expiryTime);  if (refreshToken != null) {    setRefreshTokenId(refreshToken.getTokenId());    setAuthGrantId(refreshToken.getAuthGrantId());  }  setTokenType(BEARER);  setTokenName(tokenName);  setGrantType(grantType);  setNonce(nonce);  setRealm(realm);  setAuditTrackingId(auditTrackingId);  setAuthTime(authTime);  if (!StringUtils.isBlank(claims)) {    setClaims(claims);  }  if (confirmationKey != null) {    setConfirmationKey(confirmationKey);  }}  }
class C{  private static File file(String alias){  File dir;  if (TrustedCertificateStore.isSystem(alias)) {    dir=DIR_SYSTEM;  } else   if (TrustedCertificateStore.isUser(alias)) {    dir=DIR_ADDED;  } else {    throw new IllegalArgumentException(alias);  }  int index=alias.lastIndexOf(":");  if (index == -1) {    throw new IllegalArgumentException(alias);  }  String filename=alias.substring(index + 1);  return new File(dir,filename);}  }
class C{  public AMSearchResults searchUsers(String wildcard,Map avPairs,AMSearchControl searchControl) throws AMException, SSOException {  return searchObjects(AMNamingAttrManager.getNamingAttr(USER),getSearchFilter(AMObject.USER),wildcard,avPairs,searchControl);}  }
class C{  public static SearchResultEntry copyOfSearchResultEntry(final SearchResultEntry entry){  return new SearchResultEntryImpl(entry);}  }
class C{  public BufferedImage createCompatibleDestImage(BufferedImage src,ColorModel destCM){  ColorSpace cs=null;  ;  if (destCM == null) {    if (CSList == null) {      int nProfiles=profileList.length;      if (nProfiles == 0) {        throw new IllegalArgumentException("Destination ColorSpace is undefined");      }      ICC_Profile destProfile=profileList[nProfiles - 1];      cs=new ICC_ColorSpace(destProfile);    } else {      int nSpaces=CSList.length;      cs=CSList[nSpaces - 1];    }  }  return createCompatibleDestImage(src,destCM,cs);}  }
class C{  private void assignServices(OrganizationConfigManager ocm,List newServiceNames) throws SMSException {  try {    Set assignedServices=ocm.getAssignedServices();    Set allServices=new HashSet(newServiceNames.size() + assignedServices.size());    allServices.addAll(assignedServices);    allServices.addAll(newServiceNames);    for (    Object tmp : allServices) {      String serviceName=(String)tmp;      if (newServiceNames.contains(serviceName) && assignedServices.contains(serviceName)) {      } else       if (newServiceNames.contains(serviceName) && !assignedServices.contains(serviceName)) {        ocm.assignService(serviceName,null);      } else       if (!newServiceNames.contains(serviceName) && assignedServices.contains(serviceName)) {        ocm.unassignService(serviceName);      }    }  } catch (  SMSException smse) {    debug.error("RealmResource.assignServices() : Unable to assign services");    throw smse;  }}  }
class C{  final Node<K,V> findNear(K key,int rel,Comparator<? super K> cmp){  if (key == null)   throw new NullPointerException();  for (; ; ) {    for (Node<K,V> b=findPredecessor(key,cmp), n=b.next; ; ) {      Object v;      if (n == null)       return ((rel & LT) == 0 || b.isBaseHeader()) ? null : b;      Node<K,V> f=n.next;      if (n != b.next)       break;      if ((v=n.value) == null) {        n.helpDelete(b,f);        break;      }      if (b.value == null || v == n)       break;      int c=cpr(cmp,key,n.key);      if ((c == 0 && (rel & EQ) != 0) || (c < 0 && (rel & LT) == 0))       return n;      if (c <= 0 && (rel & LT) != 0)       return b.isBaseHeader() ? null : b;      b=n;      n=f;    }  }}  }
class C{  public boolean isCollapsed(int row){  return !isExpanded(row);}  }
class C{  private static void printFullVersionInformation(){  String separator=": ";  System.out.println(getVersionString());  System.out.println(SetupUtils.BUILD_ID + separator + BUILD_ID);  System.out.println(SetupUtils.MAJOR_VERSION + separator + MAJOR_VERSION);  System.out.println(SetupUtils.MINOR_VERSION + separator + MINOR_VERSION);  System.out.println(SetupUtils.POINT_VERSION + separator + POINT_VERSION);  System.out.println(SetupUtils.VERSION_QUALIFIER + separator + VERSION_QUALIFIER);  if (BUILD_NUMBER > 0) {    System.out.println(SetupUtils.BUILD_NUMBER + separator + new DecimalFormat("000").format(BUILD_NUMBER));  }  System.out.println(SetupUtils.REVISION + separator + REVISION);  System.out.println(SetupUtils.URL_REPOSITORY + separator + URL_REPOSITORY);  System.out.println(SetupUtils.FIX_IDS + separator + FIX_IDS);  System.out.println(SetupUtils.DEBUG_BUILD + separator + DEBUG_BUILD);  System.out.println(SetupUtils.BUILD_OS + separator + BUILD_OS);  System.out.println(SetupUtils.BUILD_USER + separator + BUILD_USER);  System.out.println(SetupUtils.BUILD_JAVA_VERSION + separator + BUILD_JAVA_VERSION);  System.out.println(SetupUtils.BUILD_JAVA_VENDOR + separator + BUILD_JAVA_VENDOR);  System.out.println(SetupUtils.BUILD_JVM_VERSION + separator + BUILD_JVM_VERSION);  System.out.println(SetupUtils.BUILD_JVM_VENDOR + separator + BUILD_JVM_VENDOR);  String extensionInformation=ConfigurationFramework.getPrintableExtensionInformation(getServerRoot(),getInstanceRoot());  if (extensionInformation != null) {    System.out.print(extensionInformation);  }}  }
class C{  public Response cacheResponse(){  return cacheResponse;}  }
class C{  public void endDocument() throws SAXException {}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.EncryptedElementType createEncryptedElementType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.EncryptedElementTypeImpl();}  }
class C{  public ByteVector putShort(final int s){  int length=this.length;  if (length + 2 > data.length) {    enlarge(2);  }  byte[] data=this.data;  data[length++]=(byte)(s >>> 8);  data[length++]=(byte)s;  this.length=length;  return this;}  }
class C{  public Set<Map<AdministratorProperty,Object>> readAdministratorRegistry() throws ADSContextException {  Set<Map<AdministratorProperty,Object>> result=new HashSet<>();  SearchRequest request=newSearchRequest(getAdministratorContainerDN(),SINGLE_LEVEL,objectClassPresent(),"cn","userpassword","ds-privilege-name","description");  try (ConnectionEntryReader entryReader=connectionWrapper.getConnection().search(request)){    while (entryReader.hasNext()) {      SearchResultEntry sr=entryReader.readEntry();      result.add(makePropertiesFromAdministratorAttrs(sr.getName().rdn(),sr.getAllAttributes()));    }  } catch (  EntryNotFoundException x) {    throw new ADSContextException(ErrorType.BROKEN_INSTALL);  }catch (  AuthorizationException x) {    throw new ADSContextException(ErrorType.ACCESS_PERMISSION);  }catch (  IOException x) {    throw new ADSContextException(ErrorType.ERROR_UNEXPECTED,x);  }  return result;}  }
class C{  public Period plusYears(long yearsToAdd){  if (yearsToAdd == 0) {    return this;  }  return create(Math.toIntExact(Math.addExact(years,yearsToAdd)),months,days);}  }
class C{  public com.sun.identity.liberty.ws.paos.jaxb.ResponseElement createResponseElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.paos.jaxb.impl.ResponseElementImpl();}  }
class C{  public void caretPositionChanged(InputMethodEvent e){  ((InputMethodListener)a).caretPositionChanged(e);  ((InputMethodListener)b).caretPositionChanged(e);}  }
class C{  boolean isValidMask(){  return validMask;}  }
class C{  public AuthPropertiesViewBean(){  super("AuthProperties");  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);}  }
class C{  public IDFFMetaException(Throwable rootCause){  super(rootCause);}  }
class C{  public final void testGetEncoded(){  byte[] encodedKey=new byte[]{(byte)1,(byte)2,(byte)3,(byte)4};  PKCS8EncodedKeySpec meks=new PKCS8EncodedKeySpec(encodedKey);  byte[] ek=meks.getEncoded();  assertTrue(Arrays.equals(encodedKey,ek));}  }
class C{  MarshalledObjectOutputStream(OutputStream objOut,OutputStream locOut) throws IOException {  super(objOut);  this.useProtocolVersion(ObjectStreamConstants.PROTOCOL_VERSION_2);  this.locOut=new ObjectOutputStream(locOut);  hadAnnotations=false;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodecloneattributescopied.class,args);}  }
class C{  private JPanel createListenersPanel(){  JPanel p=new JPanel(new GridBagLayout());  p.setOpaque(false);  GridBagConstraints gbc=new GridBagConstraints();  gbc.insets=new Insets(0,0,0,0);  gbc.gridwidth=GridBagConstraints.REMAINDER;  gbc.weightx=1.0;  gbc.anchor=GridBagConstraints.WEST;  gbc.fill=GridBagConstraints.HORIZONTAL;  JLabel l=Utilities.createTitleLabel(INFO_CTRL_PANEL_CONNECTION_HANDLERS.get());  p.add(l,gbc);  connectionHandlerTableModel=new ConnectionHandlerTableModel();  connectionHandlersTable=Utilities.createSortableTable(connectionHandlerTableModel,new CustomCellRenderer());  connectionHandlersTable.setCellSelectionEnabled(false);  gbc.insets.top=5;  p.add(connectionHandlersTable.getTableHeader(),gbc);  gbc.insets.top=0;  p.add(connectionHandlersTable,gbc);  connectionHandlerTableEmpty=Utilities.makeHtmlPane(INFO_CTRL_PANEL_NO_CONNECTION_HANDLER_FOUND.get().toString(),ColorAndFontConstants.primaryFont);  gbc.insets.top=5;  gbc.anchor=GridBagConstraints.CENTER;  gbc.fill=GridBagConstraints.NONE;  p.add(connectionHandlerTableEmpty,gbc);  connectionHandlerTableEmpty.setVisible(false);  l.setLabelFor(connectionHandlersTable);  return p;}  }
class C{  private void forwardToPWResetQuestionVB(String orgDN,String value,String orgDNFlag,String locale){  RequestContext rc=getRequestContext();  PWResetUserValidationModel model=(PWResetUserValidationModel)getModel();  PWResetQuestionViewBean vb=(PWResetQuestionViewBean)getViewBean(PWResetQuestionViewBean.class);  vb.setPageSessionAttribute(USER_DN,model.getUserId());  vb.setPageSessionAttribute(USER_ATTR_VALUE,value);  vb.setPageSessionAttribute(URL_LOCALE,locale);  vb.setPageSessionAttribute(INITIAL_ORG_DN,orgDN);  vb.setPageSessionAttribute(ORG_DN,model.getUserRealm());  if (orgDNFlag != null && orgDNFlag.equals(STRING_TRUE)) {    vb.setPageSessionAttribute(ORG_DN_FLAG,STRING_TRUE);  }  vb.forwardTo(rc);}  }
class C{  public StaticGroup(CreationTemplate template,AttrSet attrSet) throws UMSException {  super(template,attrSet);}  }
class C{  public NSSet(){  set=new LinkedHashSet<NSObject>();}  }
class C{  public String toXMLString() throws XACMLException {  return toXMLString(true,false);}  }
class C{  @Override public String findSecurityReference(String name){  referencesLock.readLock().lock();  try {    return references.get(name);  }  finally {    referencesLock.readLock().unlock();  }}  }
class C{  public Enumeration identities(){  return null;}  }
class C{  private static boolean isUnreservedCharacter(char p_char){  return (isAlphanum(p_char) || MARK_CHARACTERS.indexOf(p_char) != -1);}  }
class C{  protected Object createRemoteSessionsMBean(String groupName,String groupOid,ObjectName groupObjname,MBeanServer server){  remoteSessions=new RemoteSessionsImpl(this,InjectorHolder.getInstance(SessionMonitoringStore.class));  return remoteSessions;}  }
class C{  public static int flashTime(){  return info().flashTime;}  }
class C{  public boolean nextTile() throws ModelControlException {  boolean movedToRow=super.nextTile();  if (movedToRow) {    curTile=getTileIndex();    setDisplayFieldValue(TXT_PARENT_INDEX,parentIdx);    setDisplayFieldValue(TXT_CHOICE,choices[curTile]);    setDisplayFieldValue(TXT_INDEX,Integer.toString(curTile));  }  return movedToRow;}  }
class C{  public synchronized void start(){  if (isActive()) {    MONITOR_LOGGER.logp(Level.FINER,CounterMonitor.class.getName(),"start","the monitor is already active");    return;  }  for (  ObservedObject o : observedObjects) {    final CounterMonitorObservedObject cmo=(CounterMonitorObservedObject)o;    cmo.setThreshold(initThreshold);    cmo.setModulusExceeded(false);    cmo.setEventAlreadyNotified(false);    cmo.setPreviousScanCounter(null);  }  doStart();}  }
class C{  public int size(){  return opQueue.size();}  }
class C{  void recomposeIncludes(Stylesheet including){  int n=including.getIncludeCount();  if (n > 0) {    if (null == m_includesComposed)     m_includesComposed=new Vector();    for (int i=0; i < n; i++) {      Stylesheet included=including.getInclude(i);      m_includesComposed.addElement(included);      recomposeIncludes(included);    }  }}  }
class C{  boolean isTransient(){  Object value=getValue(TRANSIENT);  return (value instanceof Boolean) ? (Boolean)value : false;}  }
class C{  private static Collection<Collection<DsnNetPin>> create_ordered_subnets(Collection<DsnNetPin> p_pin_list){  Collection<Collection<DsnNetPin>> result=new LinkedList<Collection<DsnNetPin>>();  if (p_pin_list.isEmpty()) {    return result;  }  Iterator<DsnNetPin> it=p_pin_list.iterator();  DsnNetPin prev_pin=it.next();  while (it.hasNext()) {    DsnNetPin next_pin=it.next();    Set<DsnNetPin> curr_subnet_pin_list=new java.util.TreeSet<DsnNetPin>();    curr_subnet_pin_list.add(prev_pin);    curr_subnet_pin_list.add(next_pin);    result.add(curr_subnet_pin_list);    prev_pin=next_pin;  }  return result;}  }
class C{  public Object clone() throws CloneNotSupportedException {  NodeSetDTM clone=(NodeSetDTM)super.clone();  return clone;}  }
class C{  protected void fireTreeNodesRemoved(Object source,Object[] path,int[] childIndices,Object[] children){  Object[] listeners=listenerList.getListenerList();  TreeModelEvent e=null;  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == TreeModelListener.class) {      if (e == null)       e=new TreeModelEvent(source,path,childIndices,children);      ((TreeModelListener)listeners[i + 1]).treeNodesRemoved(e);    }  }}  }
class C{  public void testIntbyInt2(){  byte aBytes[]={-1,-1,-1,-1};  byte bBytes[]={-1,-1,-1,-1};  int aSign=1;  int bSign=1;  byte rBytes[]={0,-1,-1,-1,-2,0,0,0,1};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.multiply(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  private void paragraphInit(byte aBaseline,CoreMetrics lm,Map<? extends Attribute,?> paragraphAttrs,char[] text){  baseline=aBaseline;  baselineOffsets=TextLine.getNormalizedOffsets(lm.baselineOffsets,baseline);  justifyRatio=AttributeValues.getJustification(paragraphAttrs);  NumericShaper shaper=AttributeValues.getNumericShaping(paragraphAttrs);  if (shaper != null) {    shaper.shape(text,0,text.length);  }}  }
class C{  public static void write(char[] data,Writer output) throws IOException {  if (data != null) {    output.write(data);  }}  }
class C{  public Object clone(){  LDAPUsers theClone=null;  try {    theClone=(LDAPUsers)super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }  if (selectedRFCUserDNs != null) {    theClone.selectedRFCUserDNs=new HashSet();    theClone.selectedRFCUserDNs.addAll(selectedRFCUserDNs);  }  return theClone;}  }
class C{  @Override public void execute() throws BuildException {  super.execute();  execute("/list");}  }
class C{  public static int applyMaskPenaltyRule3(ByteMatrix matrix){  int penalty=0;  byte[][] array=matrix.getArray();  int width=matrix.getWidth();  int height=matrix.getHeight();  for (int y=0; y < height; ++y) {    for (int x=0; x < width; ++x) {      if (x + 6 < width && array[y][x] == 1 && array[y][x + 1] == 0 && array[y][x + 2] == 1 && array[y][x + 3] == 1 && array[y][x + 4] == 1 && array[y][x + 5] == 0 && array[y][x + 6] == 1 && ((x + 10 < width && array[y][x + 7] == 0 && array[y][x + 8] == 0 && array[y][x + 9] == 0 && array[y][x + 10] == 0) || (x - 4 >= 0 && array[y][x - 1] == 0 && array[y][x - 2] == 0 && array[y][x - 3] == 0 && array[y][x - 4] == 0))) {        penalty+=40;      }      if (y + 6 < height && array[y][x] == 1 && array[y + 1][x] == 0 && array[y + 2][x] == 1 && array[y + 3][x] == 1 && array[y + 4][x] == 1 && array[y + 5][x] == 0 && array[y + 6][x] == 1 && ((y + 10 < height && array[y + 7][x] == 0 && array[y + 8][x] == 0 && array[y + 9][x] == 0 && array[y + 10][x] == 0) || (y - 4 >= 0 && array[y - 1][x] == 0 && array[y - 2][x] == 0 && array[y - 3][x] == 0 && array[y - 4][x] == 0))) {        penalty+=40;      }    }  }  return penalty;}  }
class C{  @Override public Principal authenticate(String username){  Principal authenticatedUser=null;  for (  Realm realm : realms) {    if (log.isDebugEnabled()) {      log.debug(sm.getString("combinedRealm.authStart",username,realm.getClass().getName()));    }    authenticatedUser=realm.authenticate(username);    if (authenticatedUser == null) {      if (log.isDebugEnabled()) {        log.debug(sm.getString("combinedRealm.authFail",username,realm.getClass().getName()));      }    } else {      if (log.isDebugEnabled()) {        log.debug(sm.getString("combinedRealm.authSuccess",username,realm.getClass().getName()));      }      break;    }  }  return authenticatedUser;}  }
class C{  public static Executor createTaskDistributor(){  return Executors.newCachedThreadPool(createThreadFactory(Thread.NORM_PRIORITY,"uil-pool-d-"));}  }
class C{  protected void appendConstant(final Object cst){  appendConstant(buf,cst);}  }
class C{  Entry(K key,long value,ReferenceQueue<K> queue,int hash,Entry<K> next){  super(key,queue);  this.value=value;  this.hash=hash;  this.next=next;}  }
class C{  public static boolean containsObjectClass(final Entry entry,final Schema schema,final ObjectClass objectClass){  return getObjectClasses(entry,schema).contains(objectClass);}  }
class C{  public void removeQualifier(XMPNode qualNode){  PropertyOptions opts=getOptions();  if (qualNode.isLanguageNode()) {    opts.setHasLanguage(false);  } else   if (qualNode.isTypeNode()) {    opts.setHasType(false);  }  getQualifier().remove(qualNode);  if (qualifier.size() == 0) {    opts.setHasQualifiers(false);    qualifier=null;  }}  }
class C{  void cellToPoint(int cellX,int cellY,int[] result){  final int hStartPadding=getPaddingLeft();  final int vStartPadding=getPaddingTop();  result[0]=hStartPadding + cellX * (mCellWidth + mWidthGap);  result[1]=vStartPadding + cellY * (mCellHeight + mHeightGap);}  }
class C{  public void testDoubleValueZero(){  String a="0";  double result=0.0;  double aNumber=new BigInteger(a).doubleValue();  assertTrue(aNumber == result);}  }
class C{  public void endElement(String namespaceURI,String localName,String qName) throws SAXException {  if (m_firstTagNotEmitted) {    flush();    if (namespaceURI == null && m_firstElementURI != null)     namespaceURI=m_firstElementURI;    if (localName == null && m_firstElementLocalName != null)     localName=m_firstElementLocalName;  }  m_handler.endElement(namespaceURI,localName,qName);}  }
class C{  public void addSigner(PrivateKey key,byte[] subjectKeyID,String digestOID,AttributeTable signedAttr,AttributeTable unsignedAttr) throws IllegalArgumentException {  addSigner(key,subjectKeyID,getEncOID(key,digestOID),digestOID,signedAttr,unsignedAttr);}  }
class C{  public AMSearchResults searchDynamicGroups(String wildcard,AMSearchControl searchControl) throws AMException, SSOException {  return searchDynamicGroups(wildcard,null,searchControl);}  }
class C{  private boolean annotationIsVisible(SAnno anno){  SAnnoDef annoType=anno.type();  for (  SAnno a : annoType.annos()) {    if (a.type().fullName().equals("java.lang.annotation.Retention")) {      for (      Map.Entry<SAnnoField,Value> entry : a.values().entrySet()) {        if (entry.getKey().name().equals("value")) {          Value v=entry.getValue();          if (v instanceof EnumValue) {            if (v.type().fullName().equals("java.lang.annotation.RetentionPolicy")) {              return ((EnumValue)v).enumStr().equals("RUNTIME");            }          }          throw new LtBug("value of java.lang.annotation.Retention.value() " + "should be instance of " + "java.lang.annotation.RetentionPolicy, "+ "but got "+ v);        }      }      break;    }  }  return false;}  }
class C{  public java.io.InputStream readBinaryStream() throws SQLException {  return (java.io.InputStream)getNextAttribute();}  }
class C{  public boolean hasPort(){  return port != -1;}  }
class C{  void dispatchOnLauncherTransitionPrepare(View v,boolean animated,boolean toWorkspace){  if (v instanceof LauncherTransitionable) {    ((LauncherTransitionable)v).onLauncherTransitionPrepare(mLauncher,animated,toWorkspace);  }}  }
class C{  public SignatureVisitor visitClassBound(){  return this;}  }
class C{  public static void removeByUuid_C(java.lang.String uuid,long companyId){  getPersistence().removeByUuid_C(uuid,companyId);}  }
class C{  public static void showErrorPage(HttpServletResponse response,String commonErrorPage,String errorLocaleString,String remarkLocaleString){  StringBuffer errorPage=new StringBuffer();  errorPage.append(commonErrorPage);  char delimiter;  if (commonErrorPage.indexOf(IFSConstants.QUESTION_MARK) < 0) {    delimiter=IFSConstants.QUESTION_MARK;  } else {    delimiter=IFSConstants.AMPERSAND;  }  errorPage.append(delimiter).append(IFSConstants.FEDERROR).append(IFSConstants.EQUAL_TO).append(URLEncDec.encode(FSUtils.bundle.getString(errorLocaleString))).append(IFSConstants.AMPERSAND).append(IFSConstants.FEDREMARK).append(IFSConstants.EQUAL_TO).append(URLEncDec.encode(FSUtils.bundle.getString(remarkLocaleString)));  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("Redirecting to Error page : " + errorPage.toString());  }  try {    response.sendRedirect(errorPage.toString());  } catch (  IOException e) {    FSUtils.debug.error("Failed to redirect to error page");  }}  }
class C{  public InputSource resolveEntity(String publicId,String systemId) throws SAXException, IOException {  if (m_entityResolver != null) {    return m_entityResolver.resolveEntity(publicId,systemId);  } else {    return null;  }}  }
class C{  synchronized public boolean writeRequestImmediate(){  if (writerLocks.size() == 0 && currentReaders == 0 && currentWriters == 0) {    ++currentWriters;    return true;  }  return false;}  }
class C{  public List<Order> loadAllDeepFromCursor(Cursor cursor){  int count=cursor.getCount();  List<Order> list=new ArrayList<Order>(count);  if (cursor.moveToFirst()) {    if (identityScope != null) {      identityScope.lock();      identityScope.reserveRoom(count);    }    try {      do {        list.add(loadCurrentDeep(cursor,false));      } while (cursor.moveToNext());    }  finally {      if (identityScope != null) {        identityScope.unlock();      }    }  }  return list;}  }
class C{  public void addRow(Object[] rowData){  addRow(convertToVector(rowData));}  }
class C{  public static void writeSingleByte(OutputStream out,int b) throws IOException {  byte[] buffer=new byte[1];  buffer[0]=(byte)(b & 0xff);  out.write(buffer);}  }
class C{  public void printStats(){  if (table.size() != 0) {    FSAssertionManager.artStats.record("Number of artifact in table for provider " + providerId + " under realm "+ realm+ " : "+ table.size());  } else {    FSAssertionManager.artStats.record("No artifact found in table for provider " + providerId + " under realm "+ realm+ ".");  }}  }
class C{  public static Object call(Object object){  if (object instanceof Closure<?>) {    try {      return ((Closure<?>)object).call();    } catch (    Exception e) {      return null;    }  }  if (object instanceof CharSequence && object.toString().isEmpty()) {    return null;  }  return object;}  }
class C{  protected List createSAMLAssertionArtifact(Object ssoToken,String inResponseTo,NameIdentifier userHandle,NameIdentifier idpHandle){  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("FSSSOBrowserArtifactProfileHandler." + "createSAMLAssertionArtifact: Called");  }  List artifactList=new ArrayList();  try {    FSAssertionManager am=FSAssertionManager.getInstance(metaAlias);    AssertionArtifact artifact=am.createFSAssertionArtifact(SessionManager.getProvider().getSessionID(ssoToken),realm,spEntityId,userHandle,idpHandle,inResponseTo,authnRequest.getMinorVersion());    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("AssertionArtifact id = " + artifact.toString());    }    String artid=artifact.getAssertionArtifact();    artifactList.add(artid);    return artifactList;  } catch (  FSException se) {    FSUtils.debug.error("FSSSOBrowserArtifactProfileHandler." + "createSAMLAssertionArtifact(0): ",se);    return null;  }catch (  SAMLException se) {    FSUtils.debug.error("FSSSOBrowserArtifactProfileHandler." + "createSAMLAssertionArtifact(1): ",se);    return null;  }catch (  SessionException se) {    FSUtils.debug.error("FSSSOBrowserArtifactProfileHandler." + "createSAMLAssertionArtifact(2): ",se);    return null;  }}  }
class C{  public void visitEnum(String name,String desc,String value){  if (av != null) {    av.visitEnum(name,desc,value);  }}  }
class C{  @NonNull public static Interpolator accelerate(float factor){  return new AccelerateInterpolator(factor);}  }
class C{  protected void charactersFlush(){  if (m_textPendingStart >= 0) {    int length=m_chars.size() - m_textPendingStart;    boolean doStrip=false;    if (getShouldStripWhitespace()) {      doStrip=m_chars.isWhitespace(m_textPendingStart,length);    }    if (doStrip) {      m_chars.setLength(m_textPendingStart);    } else {      if (length > 0) {        int exName=m_expandedNameTable.getExpandedTypeID(DTM.TEXT_NODE);        int dataIndex=m_data.size();        m_previous=addNode(m_coalescedTextType,exName,m_parents.peek(),m_previous,dataIndex,false);        m_data.addElement(m_textPendingStart);        m_data.addElement(length);      }    }    m_textPendingStart=-1;    m_textType=m_coalescedTextType=DTM.TEXT_NODE;  }}  }
class C{  public void ssoTokenChanged(SSOTokenEvent evt){  try {    int type=evt.getType();switch (type) {case SSOTokenEvent.SSO_TOKEN_IDLE_TIMEOUT:case SSOTokenEvent.SSO_TOKEN_MAX_TIMEOUT:case SSOTokenEvent.SSO_TOKEN_DESTROY:      SSOToken token=evt.getToken();    clearAllTrails(token.getTokenID());  break;}} catch (SSOException ssoe) {debug.warning("PageTrailManager.ssoTokenChanged()",ssoe);}}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList acronymList;  Node testNode;  NamedNodeMap attributes;  Attr titleAttr;  String value;  Text textNode;  Node retval;  Node firstChild;  doc=(Document)load("hc_staff",true);  acronymList=doc.getElementsByTagName("acronym");  testNode=acronymList.item(3);  attributes=testNode.getAttributes();  titleAttr=(Attr)attributes.getNamedItem("title");  textNode=doc.createTextNode("terday");  firstChild=titleAttr.getFirstChild();  assertNotNull("attrChildNotNull",firstChild);  retval=titleAttr.replaceChild(textNode,firstChild);  value=titleAttr.getValue();  assertEquals("attrValue","terday",value);  value=titleAttr.getNodeValue();  assertEquals("attrNodeValue","terday",value);  value=retval.getNodeValue();  assertEquals("retvalValue","Yes",value);  firstChild=titleAttr.getFirstChild();  value=firstChild.getNodeValue();  assertEquals("firstChildValue","terday",value);}  }
class C{  public TransformException(String message,Throwable cause){  super(message);  this.cause=cause;}  }
class C{  public void endHeader(){}  }
class C{  public XMLStringDefault(String str){  m_str=str;}  }
class C{  protected synchronized byte[] engineGenerateSeed(int numBytes){  byte[] myBytes;  if (numBytes < 0) {    throw new NegativeArraySizeException(Integer.toString(numBytes));  }  if (numBytes == 0) {    return EmptyArray.BYTE;  }  if (myRandom == null) {    myRandom=new SHA1PRNG_SecureRandomImpl();    myRandom.engineSetSeed(getRandomBytes(DIGEST_LENGTH));  }  myBytes=new byte[numBytes];  myRandom.engineNextBytes(myBytes);  return myBytes;}  }
class C{  private static AddRequestProtocolOp readAddRequest(ASN1Reader reader) throws LDAPException {  try {    reader.readStartSequence();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_ADD_REQUEST_DECODE_SEQUENCE.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  ByteString dn;  try {    dn=reader.readOctetString();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_ADD_REQUEST_DECODE_DN.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  ArrayList<RawAttribute> attributes;  try {    reader.readStartSequence();    attributes=new ArrayList<>();    while (reader.hasNextElement()) {      attributes.add(LDAPAttribute.decode(reader));    }    reader.readEndSequence();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_ADD_REQUEST_DECODE_ATTRS.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  try {    reader.readEndSequence();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_ADD_REQUEST_DECODE_SEQUENCE.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  return new AddRequestProtocolOp(dn,attributes);}  }
class C{  public void moveToBack(){  if (isIcon()) {    if (getDesktopIcon().getParent() instanceof JLayeredPane) {      ((JLayeredPane)getDesktopIcon().getParent()).moveToBack(getDesktopIcon());    }  } else   if (getParent() instanceof JLayeredPane) {    ((JLayeredPane)getParent()).moveToBack(this);  }}  }
class C{  PriorityQueueSpliterator(PriorityQueue<E> pq,int origin,int fence,int expectedModCount){  this.pq=pq;  this.index=origin;  this.fence=fence;  this.expectedModCount=expectedModCount;}  }
class C{  public void removeTempGruuParam(){  if (parameters != null)   parameters.delete(ParameterNames.TEMP_GRUU);}  }
class C{  public static double fixEulerRotation(double first,double second,int eulerBreak){  if (first == second)   return first;  double normalizedFirst=(first + eulerBreak) % 360;  double normalizedSecond=(second + eulerBreak) % 360;  double pathDifference=Math.abs(normalizedSecond - normalizedFirst);  int factor=normalizedSecond > normalizedFirst ? 1 : -1;  if (pathDifference > 180) {    pathDifference=-1 * (360 - pathDifference);  }  return first + factor * pathDifference;}  }
class C{  public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws SAML2Exception {  StringBuffer sb=new StringBuffer(2000);  String NS="";  String appendNS="";  if (declareNS) {    NS=SAML2Constants.ASSERTION_DECLARE_STR;  }  if (includeNSPrefix) {    appendNS=SAML2Constants.ASSERTION_PREFIX;  }  sb.append("<").append(appendNS).append(SUBJECT_ELEMENT).append(NS).append(">\n");  boolean idFound=false;  if (baseId != null) {    sb.append(baseId.toXMLString(includeNSPrefix,false));    idFound=true;  }  if (nameId != null) {    if (idFound) {      SAML2SDKUtils.debug.error("SubjectImpl.toXMLString(): " + "more than one types of id specified");      throw new SAML2Exception(SAML2SDKUtils.bundle.getString("too_many_ids_specified"));    } else {      sb.append(nameId.toXMLString(includeNSPrefix,false));      idFound=true;    }  }  if (encryptedId != null) {    if (idFound) {      SAML2SDKUtils.debug.error("SubjectImpl.toXMLString(): " + "more than one types of id specified");      throw new SAML2Exception(SAML2SDKUtils.bundle.getString("too_many_ids_specified"));    } else {      sb.append(encryptedId.toXMLString(includeNSPrefix,false));      idFound=true;    }  }  int length=subjectConfirmations.size();  if (length == 0) {    if (!idFound) {      SAML2SDKUtils.debug.error("SubjectImpl.toXMLString(): Need at " + "least one id or one subject confirmation in a subject");      throw new SAML2Exception(SAML2SDKUtils.bundle.getString("need_at_least_one_id_or_on_SubjectConfirmation"));    }  } else {    for (int i=0; i < length; i++) {      SubjectConfirmation sc=(SubjectConfirmation)subjectConfirmations.get(i);      sb.append(sc.toXMLString(includeNSPrefix,false));    }  }  sb.append("</").append(appendNS).append(SUBJECT_ELEMENT).append(">");  return sb.toString();}  }
class C{  @DataProvider(name="integerValues") public Object[][] createIntegerValues(){  return new Object[][]{{"0123456",true},{"42",true},{"0",true},{"",false},{"0xFF",false},{"NULL",false},{"Not a Number",false}};}  }
class C{  public SecurityPermission(String name,String actions){  super(name,actions);}  }
class C{  public static String decryptWithSymmetricKey(String data,String encAlgorithm,String secret) throws Exception {  try {    String algorithm=encAlgorithm;    if (!algorithm.startsWith("PBEWith")) {      algorithm="PBEWithMD5And" + encAlgorithm;    }    SecretKeyFactory skFactory=SecretKeyFactory.getInstance(algorithm);    PBEKeySpec pbeKeySpec=new PBEKeySpec(secret.toCharArray());    SecretKey sKey=skFactory.generateSecret(pbeKeySpec);    Cipher cipher=Cipher.getInstance(algorithm);    cipher.init(Cipher.DECRYPT_MODE,sKey,pbeParameterSpec);    byte[] tmp=Base64.decode(data);    byte[] encData=removePrefix(tmp);    byte[] decData=cipher.doFinal(encData);    return Base64.encode(decData);  } catch (  NoSuchAlgorithmException nse) {    throw new Exception(nse.getMessage());  }}  }
class C{  public void registerCallbackHandler(SMSObjectListener changeListener) throws SMSException {  LDAPEventManager.addObjectChangeListener(changeListener);}  }
class C{  public PackedColorModel(ColorSpace space,int bits,int rmask,int gmask,int bmask,int amask,boolean isAlphaPremultiplied,int trans,int transferType){  super(bits,PackedColorModel.createBitsArray(rmask,gmask,bmask,amask),space,(amask == 0 ? false : true),isAlphaPremultiplied,trans,transferType);  if (space.getType() != ColorSpace.TYPE_RGB) {    throw new IllegalArgumentException("ColorSpace must be TYPE_RGB.");  }  maskArray=new int[numComponents];  maskOffsets=new int[numComponents];  scaleFactors=new float[numComponents];  DecomposeMask(rmask,0,"red");  DecomposeMask(gmask,1,"green");  DecomposeMask(bmask,2,"blue");  if (amask != 0) {    DecomposeMask(amask,3,"alpha");    if (nBits[3] == 1) {      transparency=Transparency.BITMASK;    }  }}  }
class C{  public SubjectConfirmationData createSubjectConfirmationData(Element elem) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.SUBJECT_CONFIRMATION_DATA,elem);  if (obj == null) {    return new SubjectConfirmationDataImpl(elem);  } else {    return (SubjectConfirmationData)obj;  }}  }
class C{  public void mouseDragged(MouseEvent e){  if ((!e.isConsumed()) && SwingUtilities.isLeftMouseButton(e)) {    moveCaret(e);  }}  }
class C{  public XObject operate(XObject left,XObject right) throws javax.xml.transform.TransformerException {  return new XNumber(left.num() * right.num());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrcreatetextnode2.class,args);}  }
class C{  public StringBuilder encodeBody(StringBuilder retval){  if (address == null)   return null;  if (address.getAddressType() == AddressImpl.ADDRESS_SPEC) {    retval.append(LESS_THAN);  }  address.encode(retval);  if (address.getAddressType() == AddressImpl.ADDRESS_SPEC) {    retval.append(GREATER_THAN);  }  if (!parameters.isEmpty()) {    retval.append(SEMICOLON);    parameters.encode(retval);  }  return retval;}  }
class C{  public NamePath withUpperPieces(){  List<String> newPathPieces=new ArrayList<>();  for (  String piece : pathPieces) {    String newPiece=(piece.isEmpty()) ? piece : new StringBuilder(piece.length()).append(Ascii.toUpperCase(piece.charAt(0))).append(piece.substring(1)).toString();    newPathPieces.add(newPiece);  }  return new NamePath(newPathPieces);}  }
class C{  public OnlineUpdateException(LocalizableMessage msg,Throwable rootCause){  super(msg,rootCause);}  }
class C{  private boolean dbFilesExist(){  File dbDir=Installation.getLocal().getDatabasesDirectory();  File[] children=dbDir.listFiles();  return children != null && children.length > 0;}  }
class C{  public void write(String p_name,OutputStreamWriter p_file){  try {    if (is_legal(p_name)) {      p_file.write(p_name);    } else {      p_file.write(quote(p_name));    }  } catch (  java.io.IOException e) {    System.out.println("IndentFileWriter.new_line: unable to write to file");  }}  }
class C{  public Object[] toArray(){  ArrayList<E> al=new ArrayList<E>();  for (Node<E> p=first(); p != null; p=succ(p)) {    E item=p.item;    if (item != null)     al.add(item);  }  return al.toArray();}  }
class C{  public static UUID randomUUID(){  byte[] data=new byte[16];synchronized (UUID.class) {    if (rng == null) {      rng=new SecureRandom();    }  }  rng.nextBytes(data);  return makeUuid(data,4);}  }
class C{  public String timeoutBackoffMethodName(String key){  return privateMethodName(Name.from("get").join(key).join("timeout").join("backoff"));}  }
class C{  public static boolean startupCalled(){  return startupCalled;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodegetfirstchildnull.class,args);}  }
class C{  String toXML(){  StringBuilder sb=new StringBuilder(256);  sb.append(ResourceIndexManager.LTS).append(ResourceIndexManager.POLICY_CROSS_REFERENCES).append(ResourceIndexManager.SPACE).append(ResourceIndexManager.NAME).append(ResourceIndexManager.EQUALS).append(ResourceIndexManager.QUOTE).append(XMLUtils.escapeSpecialCharacters(resourceType.getName())).append(ResourceIndexManager.QUOTE).append(ResourceIndexManager.SPACE).append(ResourceIndexManager.TYPE).append(ResourceIndexManager.EQUALS).append(ResourceIndexManager.QUOTE).append(ResourceIndexManager.RESOURCES).append(ResourceIndexManager.QUOTE).append(ResourceIndexManager.GTS).append(ResourceIndexManager.NEW_LINE);  Iterator iter=topLevelEntries.iterator();  while (iter.hasNext()) {    ResourceIndexEntry rie=(ResourceIndexEntry)iter.next();    sb.append(rie.toXML());  }  sb.append(ResourceIndexManager.LTSS).append(ResourceIndexManager.POLICY_CROSS_REFERENCES).append(GTS).append(ResourceIndexManager.NEW_LINE);  return sb.toString();}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.Basic128Sha256Element createBasic128Sha256Element() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.Basic128Sha256ElementImpl();}  }
class C{  public static boolean isNormalized(CharSequence src,Form form){  return NormalizerBase.isNormalized(src.toString(),form);}  }
class C{  private void buildInfo(){  Object lock=lock();  try {    Document doc=getDocument();    Element root=doc.getDefaultRootElement();    rootElementInfo=new ElementInfo(root);    rootElementInfo.validate();  }  finally {    unlock(lock);  }}  }
class C{  public int left_x_value(int p_y){  int result=Math.max(oct_lx,oct_ulx + p_y);  return Math.max(result,oct_llx - p_y);}  }
class C{  public static MapView createMap(World world){  return server.createMap(world);}  }
class C{  public boolean isSplitForcedByNewline(){  return splitForcedByNewline;}  }
class C{  public FQDNUrl(String strURL) throws MalformedURLException {  url=new URL(strURL);  valid=strURL.startsWith("http://") || strURL.startsWith("https://");  String host=url.getHost();  fqdn=(host.indexOf(".") != -1);}  }
class C{  public Name addAll(Name suffix) throws InvalidNameException {  return addAll(size(),suffix);}  }
class C{  public static ScrollPaneBorderListener createBottomAndTopBorderListener(JScrollPane scroll){  ScrollPaneBorderListener listener=createBottomBorderListener(scroll);  listener.etchedBorder=BorderFactory.createMatteBorder(1,0,1,0,ColorAndFontConstants.defaultBorderColor);  return listener;}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGetPost(request,response);}  }
class C{  static ByteSequence encodeTargetAssertion(final List<SortKey> sortKeys,final ByteString assertion,final SearchOperation searchOperation,final int resultSetSize) throws DirectoryException {  final SortKey primarySortKey=sortKeys.get(0);  try {    final ByteStringBuilder encodedPrimaryKey=new ByteStringBuilder(assertion.length() + 10);    final MatchingRule matchingRule=getEffectiveOrderingRule(primarySortKey);    final ByteString normalizedAttributeValue=matchingRule.normalizeAttributeValue(assertion);    encodeVLVKeyValue(normalizedAttributeValue,encodedPrimaryKey,primarySortKey.isReverseOrder());    return encodedPrimaryKey;  } catch (  final DecodeException e) {    addVLVResponseControl(searchOperation,0,resultSetSize,LDAPResultCode.OFFSET_RANGE_ERROR);    final String attrDesc=primarySortKey.getAttributeDescription();    throw new DirectoryException(ResultCode.VIRTUAL_LIST_VIEW_ERROR,ERR_VLV_BAD_ASSERTION.get(attrDesc));  }}  }
class C{  private void genPreambleMethods(){  out.printil("public java.util.Map<java.lang.String,java.lang.Long> getDependants() {");  out.pushIndent();  out.printil("return _jspx_dependants;");  out.popIndent();  out.printil("}");  out.println();  out.printil("public java.util.Set<java.lang.String> getPackageImports() {");  out.pushIndent();  out.printil("return _jspx_imports_packages;");  out.popIndent();  out.printil("}");  out.println();  out.printil("public java.util.Set<java.lang.String> getClassImports() {");  out.pushIndent();  out.printil("return _jspx_imports_classes;");  out.popIndent();  out.printil("}");  out.println();  generateGetters();  generateInit();  generateDestroy();}  }
class C{  public List<Measurement> collectMeasurements(){  List<Measurement> measurements=new ArrayList<Measurement>();  for (  final MetricsMBean mbean : mbeans) {    for (    final MBeanAttributeInfo attribute : mbean.getMBeanAttributes()) {      if (attribute.getType().equals(TimeUnit.class.getName()) || attribute.getType().equals(String.class.getName())) {        continue;      }      try {        final Object value=mbeanServerConn.getAttribute(mbean.getMBean().getObjectName(),attribute.getName());        if (value != null) {          measurements.add(createMeasurement(mbean.getMeasurementName() + config.metricsSeparator() + attribute.getName(),Double.parseDouble(value.toString())));        }      } catch (      Exception e) {        logger.error("Exception while reading attributes",e);      }    }  }  return measurements;}  }
class C{  private boolean conditionC0(String value,int index){  if (contains(value,index,4,"CHIA")) {    return true;  } else   if (index <= 1) {    return false;  } else   if (isVowel(charAt(value,index - 2))) {    return false;  } else   if (!contains(value,index - 1,3,"ACH")) {    return false;  } else {    char c=charAt(value,index + 2);    return (c != 'I' && c != 'E') || contains(value,index - 2,6,"BACHER","MACHER");  }}  }
class C{  private void populateLabelAndFieldsMap(){  final HashMap<FieldName,LabelFieldDescriptor> hm=new HashMap<>();  hm.put(FieldName.HOST_NAME,new LabelFieldDescriptor(INFO_HOST_NAME_LABEL.get(),INFO_HOST_NAME_TOOLTIP.get(),LabelFieldDescriptor.FieldType.READ_ONLY,LabelFieldDescriptor.LabelType.PRIMARY,0));  hm.put(FieldName.SERVER_PORT,new LabelFieldDescriptor(INFO_SERVER_PORT_LABEL.get(),INFO_SERVER_PORT_TOOLTIP.get(),LabelFieldDescriptor.FieldType.READ_ONLY,LabelFieldDescriptor.LabelType.PRIMARY,0));  hm.put(FieldName.ADMIN_CONNECTOR_PORT,new LabelFieldDescriptor(INFO_ADMIN_CONNECTOR_PORT_LABEL.get(),INFO_ADMIN_CONNECTOR_PORT_TOOLTIP.get(),LabelFieldDescriptor.FieldType.READ_ONLY,LabelFieldDescriptor.LabelType.PRIMARY,0));  hm.put(FieldName.SECURITY_OPTIONS,new LabelFieldDescriptor(INFO_SERVER_SECURITY_LABEL.get(),INFO_SERVER_SECURITY_TOOLTIP.get(),LabelFieldDescriptor.FieldType.READ_ONLY,LabelFieldDescriptor.LabelType.PRIMARY,0));  hm.put(FieldName.DIRECTORY_MANAGER_DN,new LabelFieldDescriptor(INFO_SERVER_DIRECTORY_MANAGER_DN_LABEL.get(),INFO_SERVER_DIRECTORY_MANAGER_DN_TOOLTIP.get(),LabelFieldDescriptor.FieldType.READ_ONLY,LabelFieldDescriptor.LabelType.PRIMARY,0));  hm.put(FieldName.GLOBAL_ADMINISTRATOR_UID,new LabelFieldDescriptor(INFO_GLOBAL_ADMINISTRATOR_UID_LABEL.get(),null,LabelFieldDescriptor.FieldType.READ_ONLY,LabelFieldDescriptor.LabelType.PRIMARY,0));  hm.put(FieldName.DATA_OPTIONS,new LabelFieldDescriptor(INFO_DIRECTORY_DATA_LABEL.get(),null,LabelFieldDescriptor.FieldType.READ_ONLY,LabelFieldDescriptor.LabelType.PRIMARY,0));  hm.put(FieldName.REPLICATION_PORT,new LabelFieldDescriptor(INFO_REPLICATION_PORT_LABEL.get(),null,LabelFieldDescriptor.FieldType.READ_ONLY,LabelFieldDescriptor.LabelType.PRIMARY,0));  hm.put(FieldName.SERVER_JAVA_ARGUMENTS,new LabelFieldDescriptor(INFO_RUNTIME_OPTIONS_LABEL.get(),null,LabelFieldDescriptor.FieldType.READ_ONLY,LabelFieldDescriptor.LabelType.PRIMARY,0));  for (  final FieldName fieldName : hm.keySet()) {    final LabelFieldDescriptor desc=hm.get(fieldName);    final JLabel label=UIFactory.makeJLabel(desc);    final JTextComponent field=UIFactory.makeJTextComponent(desc,null);    field.setOpaque(false);    label.setLabelFor(field);    hmFields.put(fieldName,field);    hmLabels.put(fieldName,label);  }}  }
class C{  public void initialize(Map configParams){}  }
class C{  final int compareMagnitude(long val){  assert val != Long.MIN_VALUE;  int[] m1=mag;  int len=m1.length;  if (len > 2) {    return 1;  }  if (val < 0) {    val=-val;  }  int highWord=(int)(val >>> 32);  if (highWord == 0) {    if (len < 1)     return -1;    if (len > 1)     return 1;    int a=m1[0];    int b=(int)val;    if (a != b) {      return ((a & LONG_MASK) < (b & LONG_MASK)) ? -1 : 1;    }    return 0;  } else {    if (len < 2)     return -1;    int a=m1[0];    int b=highWord;    if (a != b) {      return ((a & LONG_MASK) < (b & LONG_MASK)) ? -1 : 1;    }    a=m1[1];    b=(int)val;    if (a != b) {      return ((a & LONG_MASK) < (b & LONG_MASK)) ? -1 : 1;    }    return 0;  }}  }
class C{  public LDAPKeyManagerProvider(){}  }
class C{  @org.opends.server.types.PublicAPI(stability=org.opends.server.types.StabilityLevel.PRIVATE,mayInstantiate=false,mayExtend=false,mayInvoke=false) public void addSearchReference(SearchResultReference searchReference) throws DirectoryException {  if (searchListener == null) {    referenceList.add(searchReference);  } else {    searchListener.handleInternalSearchReference(this,searchReference);  }}  }
class C{  public String toString(){  return host + ":" + port+ "/"+ transport;}  }
class C{  @Override public synchronized void mark(int readlimit){  in.mark(readlimit);  mark=pos;}  }
class C{  private synchronized void trim(){  while (mCurrentSize > mSizeLimit) {    byte[] buf=mBuffersByLastUse.remove(0);    mBuffersBySize.remove(buf);    mCurrentSize-=buf.length;  }}  }
class C{  public AMException(SSOToken token,String errorCode){  this.localizedMsg=AMSDKBundle.getString(errorCode,AMCommonUtils.getUserLocale(token));  this.errorCode=errorCode;}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  try {    logger.info("shootme: got an ACK " + requestEvent.getRequest());    dialog=inviteTid.getDialog();    this.ackReceived=true;    ((ApplicationData)dialog.getApplicationData()).ackCount++;    this.sendReInvite(sipProvider);  } catch (  Exception ex) {    String s="Unexpected error";    logger.error(s,ex);    ReInviteAllowInterleavingTest.fail(s);  }}  }
class C{  public void onFileDelete(final File file){}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node refChild;  Node newChild;  Node child;  String childName;  Node insertedNode;  java.util.List actual=new java.util.ArrayList();  java.util.List expected=new java.util.ArrayList();  expected.add("em");  expected.add("strong");  expected.add("code");  expected.add("br");  expected.add("sup");  expected.add("var");  expected.add("acronym");  int nodeType;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("sup");  refChild=elementList.item(2);  employeeNode=refChild.getParentNode();  childList=employeeNode.getChildNodes();  newChild=doc.createElement("br");  insertedNode=employeeNode.insertBefore(newChild,refChild);  for (int indexN10091=0; indexN10091 < childList.getLength(); indexN10091++) {    child=(Node)childList.item(indexN10091);    nodeType=(int)child.getNodeType();    if (equals(1,nodeType)) {      childName=child.getNodeName();      actual.add(childName);    }  }  assertEqualsAutoCase("element","nodeNames",expected,actual);}  }
class C{  public SessionException(String message){  super(message);}  }
class C{  public boolean validate(Set<String> values){  if (values.size() > 0) {    for (    String value : values) {      if (!StringUtils.isNotEmpty(value)) {        return false;      }    }    return true;  }  return false;}  }
class C{  public PdfCanvas rectangle(Rectangle rectangle){  return rectangle(rectangle.getX(),rectangle.getY(),rectangle.getWidth(),rectangle.getHeight());}  }
class C{  public HashPrintRequestAttributeSet(){  super(PrintRequestAttribute.class);}  }
class C{  @Override public void sendResponse(Operation operation){  if (keepStats) {    long time;    if (useNanoTime) {      time=operation.getProcessingNanoTime();    } else {      time=operation.getProcessingTime();    }    this.statTracker.updateOperationMonitoringData(operation.getOperationType(),time);  }  if (removeOperationInProgress(operation.getMessageID())) {    LDAPMessage message=operationToResponseLDAPMessage(operation);    if (message != null) {      sendLDAPMessage(message);    }  }}  }
class C{  public void loadPatterns(InputStream stream,String name) throws HyphenationException {  PatternParser pp=new PatternParser(this);  ivalues=new TernaryTree();  pp.parse(stream,name);  trimToSize();  vspace.trimToSize();  classmap.trimToSize();  ivalues=null;}  }
class C{  private AccessControlConfigManager(){  this.accessControlHandler=new AtomicReference<AccessControlHandler<?>>(new DefaultAccessControlHandler());  this.currentConfiguration=null;}  }
class C{  public String toXml(Object obj){  return toXml(obj,obj.getClass());}  }
class C{  public void test_getG(){  DSAParams params=new DSAParameterSpec(p,q,g);  assertEquals("Invalid G",g,params.getG());}  }
class C{  @Override public synchronized void stop(int svc) throws ChannelException {  if (hbthread != null) {    hbthread.stopHeartbeat();    hbthread=null;  }  super.stop(svc);}  }
class C{  public void processKeyEvent(KeyEvent e){  MenuElement[] sel2=new MenuElement[0];  sel2=selection.toArray(sel2);  int selSize=sel2.length;  MenuElement[] path;  if (selSize < 1) {    return;  }  for (int i=selSize - 1; i >= 0; i--) {    MenuElement elem=sel2[i];    MenuElement[] subs=elem.getSubElements();    path=null;    for (int j=0; j < subs.length; j++) {      if (subs[j] == null || !subs[j].getComponent().isShowing() || !subs[j].getComponent().isEnabled()) {        continue;      }      if (path == null) {        path=new MenuElement[i + 2];        System.arraycopy(sel2,0,path,0,i + 1);      }      path[i + 1]=subs[j];      subs[j].processKeyEvent(e,path,this);      if (e.isConsumed()) {        return;      }    }  }  path=new MenuElement[1];  path[0]=sel2[0];  path[0].processKeyEvent(e,path,this);  if (e.isConsumed()) {    return;  }}  }
class C{  private static int hash(Object x,int length){  int h=System.identityHashCode(x);  return ((h << 1) - (h << 8)) & (length - 1);}  }
class C{  public ShapeTileBox nearest_part(ShapeTileBox p_from_box){  int ll_x;  if (p_from_box.box_ll.v_x >= box_ll.v_x) {    ll_x=p_from_box.box_ll.v_x;  } else   if (p_from_box.box_ur.v_x >= box_ll.v_x) {    ll_x=box_ll.v_x;  } else {    ll_x=p_from_box.box_ur.v_x;  }  int ur_x;  if (p_from_box.box_ur.v_x <= box_ur.v_x) {    ur_x=p_from_box.box_ur.v_x;  } else   if (p_from_box.box_ll.v_x <= box_ur.v_x) {    ur_x=box_ur.v_x;  } else {    ur_x=p_from_box.box_ll.v_x;  }  int ll_y;  if (p_from_box.box_ll.v_y >= box_ll.v_y) {    ll_y=p_from_box.box_ll.v_y;  } else   if (p_from_box.box_ur.v_y >= box_ll.v_y) {    ll_y=box_ll.v_y;  } else {    ll_y=p_from_box.box_ur.v_y;  }  int ur_y;  if (p_from_box.box_ur.v_y <= box_ur.v_y) {    ur_y=p_from_box.box_ur.v_y;  } else   if (p_from_box.box_ll.v_y <= box_ur.v_y) {    ur_y=box_ur.v_y;  } else {    ur_y=p_from_box.box_ll.v_y;  }  return new ShapeTileBox(ll_x,ll_y,ur_x,ur_y);}  }
class C{  private void runTask(){  while (!stopped) {    try {synchronized (idleThreadList) {        idleThreadList[++tail]=this;        if (tail == 0) {          idleThreadList.notifyAll();        }      }synchronized (this) {        while (task == null) {          wait();        }      }      try {        task.run();      } catch (      Exception e) {        if (debug != null) {          debug.error(thread.getName() + " caught exception that fell through from " + task+ ".run()",e);        }      } finally {        Thread.interrupted();      }    } catch (    InterruptedException e) {      Thread.currentThread().interrupt();    }catch (    Throwable t) {      if (debug != null) {        debug.error(thread.getName() + ": runTask() caught throwable. Investigate " + "the problem",t);      }    } finally {      task=null;    }  }  if (debug != null) {    debug.error(thread.getName() + " stopped.",(Throwable)null);  }}  }
class C{  public static BooleanArgument quietArgument() throws ArgumentException {  return BooleanArgument.builder(OPTION_LONG_QUIET).shortIdentifier(OPTION_SHORT_QUIET).description(INFO_DESCRIPTION_QUIET.get()).buildArgument();}  }
class C{  public DirectoryException(ResultCode resultCode,LocalizableMessage errorMessage){  super(errorMessage);  this.resultCode=resultCode;  this.matchedDN=null;  this.referralURLs=null;}  }
class C{  private void buildFileUploadXML(AttributeSchema as,StringBuffer xml,AMModel model){  final String name=getAttributeNameForPropertyXML(as);  final String label=model.getLocalizedString(UPLOAD_LABEL);  xml.append(PROPERTY_START_TAG).append(MessageFormat.format(COMPONENT_UPLOAD_BUTTON_START_TAG,name,label)).append(COMPONENT_END_TAG).append(PROPERTY_END_TAG);}  }
class C{  public SQLDataException(String reason){  super(reason,null,0);}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.SubjectConfirmationDataType createSubjectConfirmationDataType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.SubjectConfirmationDataTypeImpl();}  }
class C{  public static byte[] toByteArray(URLConnection urlConn) throws IOException {  InputStream inputStream=urlConn.getInputStream();  try {    return IOUtils.toByteArray(inputStream);  }  finally {    inputStream.close();  }}  }
class C{  protected void postClosingEvent(JInternalFrame frame){  InternalFrameEvent e=new InternalFrameEvent(frame,InternalFrameEvent.INTERNAL_FRAME_CLOSING);  try {    Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(e);  } catch (  SecurityException se) {    frame.dispatchEvent(e);  }}  }
class C{  public Door(final TreeSpecies species,BlockFace face){  this(getWoodDoorOfSpecies(species),face,false);}  }
class C{  public final boolean sameNodeAs(Node other){  if (!(other instanceof DTMNodeProxy))   return false;  DTMNodeProxy that=(DTMNodeProxy)other;  return this.dtm == that.dtm && this.node == that.node;}  }
class C{  public void testConstructorStringRadix2(){  String value="10101010101010101";  int radix=2;  byte rBytes[]={1,85,85};  BigInteger aNumber=new BigInteger(value,radix);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,aNumber.signum());}  }
class C{  public void _read(InputStream input){  value=input.read_fixed();}  }
class C{  public Duration withNanos(int nanoOfSecond){  NANO_OF_SECOND.checkValidIntValue(nanoOfSecond);  return create(seconds,nanoOfSecond);}  }
class C{  public void removeSection(String tag){  this.sections.remove(tag);}  }
class C{  public void reset() throws IOException {synchronized (lock) {    ensureOpen();    pos=markedPos;  }}  }
class C{  public static JTextComponent makeJTextComponent(LabelFieldDescriptor desc,String defaultValue){  if (defaultValue == null) {    defaultValue="";  }switch (desc.getType()) {case TEXTFIELD:    return makeJTextField(LocalizableMessage.raw(defaultValue),desc.getTooltip(),desc.getSize(),TextStyle.TEXTFIELD);case PASSWORD:  return makeJPasswordField(LocalizableMessage.raw(defaultValue),desc.getTooltip(),desc.getSize(),TextStyle.PASSWORD_FIELD);case READ_ONLY:return makeTextPane(LocalizableMessage.raw(defaultValue),TextStyle.READ_ONLY);default :throw new IllegalArgumentException("Unknown type: " + desc.getType());}}  }
class C{  public void insertRow(int row,Vector rowData){  dataVector.insertElementAt(rowData,row);  justifyRows(row,row + 1);  fireTableRowsInserted(row,row);}  }
class C{  public boolean isClosed(){  return state == STATE_CLOSED;}  }
class C{  public double noise(double x,double y,double frequency,double amplitude){  return noise(x,y,0,frequency,amplitude);}  }
class C{  public static QueryRequest buildQueryRequestFromParameterMap(String resourceContainer,Map<String,Object> parameters) throws BadRequestException {  final QueryRequest request=Requests.newQueryRequest(resourceContainer);  for (  Map.Entry<String,Object> e : parameters.entrySet()) {    if (PARAM_QUERY_ID.equals(e.getKey()) || FIELD_QUERY_ID.equals(e.getKey())) {      request.setQueryId(String.valueOf(e.getValue()));    } else     if (PARAM_QUERY_EXPRESSION.equals(e.getKey()) || FIELD_QUERY_EXPRESSION.equals(e.getKey())) {      request.setQueryExpression(String.valueOf(e.getValue()));    } else     if (PARAM_QUERY_FILTER.equals(e.getKey()) || FIELD_QUERY_FILTER.equals(e.getKey())) {      request.setQueryFilter(QueryFilters.parse(String.valueOf(e.getValue())));    } else     if (PARAM_FIELDS.equals(e.getKey())) {      request.addField(String.valueOf(e.getValue()).split(","));    } else {      request.setAdditionalParameter(e.getKey(),String.valueOf(e.getValue()));    }  }  return request;}  }
class C{  public boolean hasTag(){  if (parameters == null)   return false;  return hasParameter(ParameterNames.TAG);}  }
class C{  public void nodesChanged(TreeNode node,int[] childIndices){  if (node != null) {    if (childIndices != null) {      int cCount=childIndices.length;      if (cCount > 0) {        Object[] cChildren=new Object[cCount];        for (int counter=0; counter < cCount; counter++)         cChildren[counter]=node.getChildAt(childIndices[counter]);        fireTreeNodesChanged(this,getPathToRoot(node),childIndices,cChildren);      }    } else     if (node == getRoot()) {      fireTreeNodesChanged(this,getPathToRoot(node),null,null);    }  }}  }
class C{  public void testCreateAttributeNS1() throws Throwable {  String namespaceURI="http://www.ecommerce.org/";  String malformedName="prefix::local";  Document doc;  doc=(Document)load("staffNS",builder);{    boolean success=false;    try {      doc.createAttributeNS(namespaceURI,malformedName);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("throw_NAMESPACE_ERR",success);  }}  }
class C{  public void run(){  allowToChange=false;synchronized (actions) {    if (!actions.isEmpty()) {      for (Iterator iter=actions.iterator(); iter.hasNext(); ) {        doGroupAction(iter.next());        if (removeElementAfterAction) {          iter.remove();        }      }    }  }  reset();}  }
class C{  public void store() throws IOException, CertificateException, NoSuchAlgorithmException, KeyStoreException {  try {    FileOutputStream keyStoreOStream=new FileOutputStream(keystoreFile);    ks.store(keyStoreOStream,keystorePass.toCharArray());    keyStoreOStream.close();    keyStoreOStream=null;    if (logger.messageEnabled()) {      logger.message("Keystore saved in " + keystoreFile);    }  } catch (  KeyStoreException e) {    logger.error(e.getMessage());    throw e;  }}  }
class C{  public ServerSideSortResponseControl(boolean isCritical,int resultCode,String attributeType){  super(OID_SERVER_SIDE_SORT_RESPONSE_CONTROL,isCritical);  this.resultCode=resultCode;  this.attributeType=attributeType;}  }
class C{  public boolean empty(){  return isEmpty();}  }
class C{  public boolean toLDIF(LDIFExportConfig exportConfig) throws IOException, LDIFException {  LinkedHashMap<ObjectClass,String> objectClasses=new LinkedHashMap<>();  LinkedHashMap<AttributeType,List<Attribute>> userAttributes=new LinkedHashMap<>();  LinkedHashMap<AttributeType,List<Attribute>> operationalAttributes=new LinkedHashMap<>();  LinkedHashMap<AttributeType,List<Attribute>> urlAttributes=new LinkedHashMap<>();  LinkedHashMap<AttributeType,List<Attribute>> base64Attributes=new LinkedHashMap<>();  for (  AttributeType t : attributes.keySet()) {    ArrayList<TemplateValue> valueList=attributes.get(t);    if (t.isObjectClass()) {      for (      TemplateValue v : valueList) {        String ocName=v.getValue().toString();        objectClasses.put(DirectoryServer.getSchema().getObjectClass(ocName),ocName);      }    } else     if (t.isOperational()) {      AttributeBuilder builder=new AttributeBuilder(t);      for (      TemplateValue v : valueList) {        builder.add(v.getValue().toString());      }      operationalAttributes.put(t,builder.toAttributeList());    } else {      AttributeBuilder builder=new AttributeBuilder(t);      AttributeBuilder urlBuilder=null;      AttributeBuilder base64Builder=null;      for (      TemplateValue v : valueList) {        ByteString value=ByteString.valueOfUtf8(v.getValue().toString());        builder.add(value);        if (v.getTemplateLine().isURL()) {          if (urlBuilder == null) {            urlBuilder=new AttributeBuilder(t);          }          urlBuilder.add(value);        } else         if (v.getTemplateLine().isBase64()) {          if (base64Builder == null) {            base64Builder=new AttributeBuilder(t);          }          base64Builder.add(value);        }      }      userAttributes.put(t,builder.toAttributeList());      if (urlBuilder != null) {        urlAttributes.put(t,urlBuilder.toAttributeList());      }      if (base64Builder != null) {        base64Attributes.put(t,base64Builder.toAttributeList());      }    }  }  BufferedWriter writer=exportConfig.getWriter();  int wrapColumn=exportConfig.getWrapColumn();  boolean wrapLines=wrapColumn > 1;  StringBuilder dnLine=new StringBuilder("dn");  appendLDIFSeparatorAndValue(dnLine,ByteString.valueOfUtf8(getDN().toString()));  writeLDIFLine(dnLine,writer,wrapLines,wrapColumn);  final boolean typesOnly=exportConfig.typesOnly();  if (exportConfig.includeObjectClasses()) {    if (typesOnly) {      StringBuilder ocLine=new StringBuilder("objectClass:");      writeLDIFLine(ocLine,writer,wrapLines,wrapColumn);    } else {      for (      String s : objectClasses.values()) {        StringBuilder ocLine=new StringBuilder("objectClass: ").append(s);        writeLDIFLine(ocLine,writer,wrapLines,wrapColumn);      }    }  }  for (  AttributeType attrType : userAttributes.keySet()) {    if (exportConfig.includeAttribute(attrType)) {      for (      Attribute a : userAttributes.get(attrType)) {        if (a.isVirtual() && !exportConfig.includeVirtualAttributes()) {          continue;        }        String attrName=a.getAttributeDescription().toString();        if (typesOnly) {          StringBuilder attrLine=new StringBuilder(attrName);          attrLine.append(":");          writeLDIFLine(attrLine,writer,wrapLines,wrapColumn);        } else {          List<Attribute> urlAttrList=urlAttributes.get(attrType);          List<Attribute> base64AttrList=base64Attributes.get(attrType);          for (          ByteString v : a) {            StringBuilder attrLine=new StringBuilder(attrName);            boolean isURLValue=contains(urlAttrList,v);            boolean isBase64Value=contains(base64AttrList,v);            appendLDIFSeparatorAndValue(attrLine,v,isURLValue,isBase64Value);            writeLDIFLine(attrLine,writer,wrapLines,wrapColumn);          }        }      }    }  }  if (exportConfig.includeOperationalAttributes()) {    for (    AttributeType attrType : operationalAttributes.keySet()) {      if (exportConfig.includeAttribute(attrType)) {        for (        Attribute a : operationalAttributes.get(attrType)) {          if (a.isVirtual() && !exportConfig.includeVirtualAttributes()) {            continue;          }          String attrName=a.getAttributeDescription().toString();          if (typesOnly) {            StringBuilder attrLine=new StringBuilder(attrName);            attrLine.append(":");            writeLDIFLine(attrLine,writer,wrapLines,wrapColumn);          } else {            for (            ByteString v : a) {              StringBuilder attrLine=new StringBuilder(attrName);              appendLDIFSeparatorAndValue(attrLine,v);              writeLDIFLine(attrLine,writer,wrapLines,wrapColumn);            }          }        }      }    }  }  writer.newLine();  return true;}  }
class C{  public void fireSessionEvent(String type,Object data){  if (listeners.size() < 1)   return;  SessionEvent event=new SessionEvent(this,type,data);  SessionListener list[]=new SessionListener[0];synchronized (listeners) {    list=listeners.toArray(list);  }  for (int i=0; i < list.length; i++) {    (list[i]).sessionEvent(event);  }}  }
class C{  public ValidationResult isValidProtocol(String proto,Map props,IStateAccess state){  ValidationResultStatus validRes=ValidationResultStatus.STATUS_FAILED;  LocalizedMessage returnMessage=null;  if ((proto != null) && (proto.length() > 0)) {    if ((proto.compareToIgnoreCase(STR_VA_HTTP_PROTO) == 0) || (proto.compareToIgnoreCase(STR_VA_HTTPS_PROTO) == 0)) {      returnMessage=LocalizedMessage.get(LOC_VA_MSG_VAL_PROTO,new Object[]{proto});      validRes=ValidationResultStatus.STATUS_SUCCESS;    }  }  if (validRes.getIntValue() == ValidationResultStatus.INT_STATUS_FAILED) {    returnMessage=LocalizedMessage.get(LOC_VA_WRN_IN_VAL_PROTO,new Object[]{proto});  }  Debug.log("NetworkValidator : Is protocol : " + proto + " valid ? "+ validRes.isSuccessful());  return new ValidationResult(validRes,null,returnMessage);}  }
class C{  public final void testRSAKeyGenParameterSpec(){  AlgorithmParameterSpec aps=new RSAKeyGenParameterSpec(512,BigInteger.valueOf(0L));  assertTrue(aps instanceof RSAKeyGenParameterSpec);}  }
class C{  @Override void onShutdown(){  BlockingQueue<Runnable> q=super.getQueue();  boolean keepDelayed=getExecuteExistingDelayedTasksAfterShutdownPolicy();  boolean keepPeriodic=getContinueExistingPeriodicTasksAfterShutdownPolicy();  if (!keepDelayed && !keepPeriodic) {    for (    Object e : q.toArray())     if (e instanceof RunnableScheduledFuture<?>)     ((RunnableScheduledFuture<?>)e).cancel(false);    q.clear();  } else {    for (    Object e : q.toArray()) {      if (e instanceof RunnableScheduledFuture) {        RunnableScheduledFuture<?> t=(RunnableScheduledFuture<?>)e;        if ((t.isPeriodic() ? !keepPeriodic : !keepDelayed) || t.isCancelled()) {          if (q.remove(t))           t.cancel(false);        }      }    }  }  tryTerminate();}  }
class C{  private static int handleResources(QueryResourceHandler handler,List<ResourceResponse> resources){  int count=0;  for (  ResourceResponse response : resources) {    count++;    boolean handled=handler.handleResource(response);    if (!handled) {      break;    }  }  return count;}  }
class C{  public void startElement(String ns,String localName,String name,Attributes atts) throws org.xml.sax.SAXException {  Element elem;  if ((null == ns) || (ns.length() == 0))   elem=m_doc.createElementNS(null,name); else   elem=m_doc.createElementNS(ns,name);  append(elem);  try {    int nAtts=atts.getLength();    if (0 != nAtts) {      for (int i=0; i < nAtts; i++) {        if (atts.getType(i).equalsIgnoreCase("ID"))         setIDAttribute(atts.getValue(i),elem);        String attrNS=atts.getURI(i);        if ("".equals(attrNS))         attrNS=null;        String attrQName=atts.getQName(i);        if (attrQName.startsWith("xmlns:") || attrQName.equals("xmlns")) {          attrNS="http://www.w3.org/2000/xmlns/";        }        elem.setAttributeNS(attrNS,attrQName,atts.getValue(i));      }    }    int nDecls=m_prefixMappings.size();    String prefix, declURL;    for (int i=0; i < nDecls; i+=2) {      prefix=(String)m_prefixMappings.elementAt(i);      if (prefix == null)       continue;      declURL=(String)m_prefixMappings.elementAt(i + 1);      elem.setAttributeNS("http://www.w3.org/2000/xmlns/",prefix,declURL);    }    m_prefixMappings.clear();    m_elemStack.push(elem);    m_currentNode=elem;  } catch (  java.lang.Exception de) {    throw new org.xml.sax.SAXException(de);  }}  }
class C{  public final void addElement(int value){  if ((m_firstFree + 1) >= m_mapSize) {    m_mapSize+=m_blocksize;    int newMap[]=new int[m_mapSize];    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);    m_map=newMap;  }  m_map[m_firstFree]=value;  m_firstFree++;}  }
class C{  public Installation(String rootDirectory,String instanceRootDirectory){  this(new File(rootDirectory),new File(instanceRootDirectory));}  }
class C{  public boolean addAll(int index,Collection<? extends E> c){  Object[] cs=c.toArray();  final ReentrantLock lock=this.lock;  lock.lock();  try {    Object[] elements=getArray();    int len=elements.length;    if (index > len || index < 0)     throw new IndexOutOfBoundsException("Index: " + index + ", Size: "+ len);    if (cs.length == 0)     return false;    int numMoved=len - index;    Object[] newElements;    if (numMoved == 0)     newElements=Arrays.copyOf(elements,len + cs.length); else {      newElements=new Object[len + cs.length];      System.arraycopy(elements,0,newElements,0,index);      System.arraycopy(elements,index,newElements,index + cs.length,numMoved);    }    System.arraycopy(cs,0,newElements,index,cs.length);    setArray(newElements);    return true;  }  finally {    lock.unlock();  }}  }
class C{  private Promise<ActionResponse,ResourceException> confirmationIdCheck(final Context context,final ActionRequest request,final String realm){  final String METHOD="IdentityResource.confirmationIdCheck";  final JsonValue jVal=request.getContent();  String tokenID;  String confirmationId;  String email=null;  String username=null;  String hashComponent=null;  String hashComponentAttr=null;  JsonValue result=new JsonValue(new LinkedHashMap<String,Object>(1));  try {    tokenID=jVal.get(TOKEN_ID).asString();    confirmationId=jVal.get(CONFIRMATION_ID).asString();    email=jVal.get(EMAIL).asString();    username=jVal.get(USERNAME).asString();    if (StringUtils.isBlank(confirmationId)) {      if (debug.errorEnabled()) {        debug.error("{} :: Bad Request - confirmationId not found in request.",METHOD);      }      throw new BadRequestException("confirmationId not provided");    }    if (StringUtils.isBlank(email) && !StringUtils.isBlank(username)) {      hashComponent=username;      hashComponentAttr=USERNAME;    }    if (!StringUtils.isBlank(email) && StringUtils.isBlank(username)) {      hashComponent=email;      hashComponentAttr=EMAIL;    }    if (StringUtils.isBlank(hashComponent)) {      if (debug.errorEnabled()) {        debug.error("{} :: Bad Request - hashComponent not found in request.",METHOD);      }      throw new BadRequestException("Required information not provided");    }    if (StringUtils.isBlank(tokenID)) {      if (debug.errorEnabled()) {        debug.error("{} :: Bad Request - tokenID not found in request.",METHOD);      }      throw new BadRequestException("tokenId not provided");    }    validateToken(tokenID,realm,hashComponent,confirmationId);    result.put(hashComponentAttr,hashComponent);    result.put(TOKEN_ID,tokenID);    result.put(CONFIRMATION_ID,confirmationId);    if (debug.messageEnabled()) {      debug.message("{} :: Confirmed for token '{}' with confirmation '{}'",METHOD,tokenID,confirmationId);    }    return newResultPromise(newActionResponse(result));  } catch (  BadRequestException bre) {    debug.warning("{} :: Cannot confirm registration/forgotPassword for : {}",METHOD,hashComponent,bre);    return bre.asPromise();  }catch (  ResourceException re) {    debug.warning("{} :: Resource error for : {}",METHOD,hashComponent,re);    return re.asPromise();  }catch (  CoreTokenException cte) {    debug.error("{} :: CTE error for : {}",METHOD,hashComponent,cte);    return new InternalServerErrorException(cte).asPromise();  }}  }
class C{  static Object createObject(String factoryId,String fallbackClassName) throws ConfigurationError {  return createObject(factoryId,null,fallbackClassName);}  }
class C{  public void addField(PdfFormField field,PdfPage page){  PdfArray kids=field.getKids();  PdfDictionary fieldDic=field.getPdfObject();  if (kids != null) {    processKids(kids,fieldDic,page);  }  getFields().add(fieldDic);  fields.put(field.getFieldName().toUnicodeString(),field);  if (field.getKids() != null) {    iterateFields(field.getKids(),fields);  }  if (field.getFormType() != null && (field.getFormType().equals(PdfName.Tx) || field.getFormType().equals(PdfName.Ch))) {    List<PdfDictionary> resources=getResources(field.getPdfObject());    for (    PdfDictionary resDict : resources) {      mergeResources(defaultResources,resDict);    }    if (!defaultResources.isEmpty()) {      put(PdfName.DR,defaultResources);    }  }  if (fieldDic.containsKey(PdfName.Subtype) && page != null) {    PdfAnnotation annot=PdfAnnotation.makeAnnotation(fieldDic);    addWidgetAnnotationToPage(page,annot);  }}  }
class C{  Subject fetchSubject(String subjectName){  QualifiedSubject answer=(QualifiedSubject)users.get(subjectName);  return (answer != null) ? answer.getSubject() : null;}  }
class C{  public Set createStaticGroups(Set groupNames) throws AMException, SSOException {  Iterator iter=groupNames.iterator();  Set groups=new HashSet();  while (iter.hasNext()) {    StringBuffer groupDNSB=new StringBuffer();    groupDNSB.append(AMNamingAttrManager.getNamingAttr(GROUP)).append("=").append((String)iter.next()).append(",").append(super.entryDN);    AMStaticGroupImpl groupImpl=new AMStaticGroupImpl(super.token,groupDNSB.toString());    groupImpl.create();    groups.add(groupImpl);  }  return groups;}  }
class C{  public BucketItem(final String n,final String p,final String taken,int i){  super(n,p,taken,0);  id=i;}  }
class C{  protected void createAdminGroups(SSOToken token,PersistentObject org) throws AMException, SSOException {  String gcDN=NamingAttributeManager.getNamingAttribute(AMObject.GROUP_CONTAINER) + "=groups," + org.getDN();  AttrSet attrSet=new AttrSet();  Attr attr=new Attr("objectclass",INET_ADMIN_OBJECT_CLASS);  attrSet.add(attr);  attr=new Attr(ADMIN_ROLE_ATTR,DOMAIN_ADMINISTRATORS);  attrSet.add(attr);  Map attributes=CommonUtils.attrSetToMap(attrSet);  DirectoryServicesFactory.getInstance().createEntry(token,DOMAIN_ADMINISTRATORS,AMObject.ASSIGNABLE_DYNAMIC_GROUP,gcDN,attributes);  attrSet=new AttrSet();  attr=new Attr("objectclass",INET_ADMIN_OBJECT_CLASS);  attrSet.add(attr);  attr=new Attr(ADMIN_ROLE_ATTR,DOMAIN_ADMINISTRATORS);  attrSet.add(attr);  attributes=CommonUtils.attrSetToMap(attrSet);  DirectoryServicesFactory.getInstance().createEntry(token,DOMAIN_HELP_DESK_ADMINISTRATORS,AMObject.ASSIGNABLE_DYNAMIC_GROUP,gcDN,attributes);}  }
class C{  public void test_getLowestSetBitNeg(){  byte aBytes[]={-1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=-1;  int iNumber=1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  int result=aNumber.getLowestSetBit();  assertTrue("incorrect value",result == iNumber);}  }
class C{  public LibertyManagerClient(){}  }
class C{  public static int encodePassword(String[] args,boolean initializeServer,OutputStream outStream,OutputStream errStream){  PrintStream out=NullOutputStream.wrapOrNullStream(outStream);  PrintStream err=NullOutputStream.wrapOrNullStream(errStream);  JDKLogging.disableLogging();  BooleanArgument authPasswordSyntax=null;  BooleanArgument useCompareResultCode=null;  BooleanArgument listSchemes=null;  BooleanArgument showUsage=null;  BooleanArgument interactivePassword=null;  StringArgument clearPassword=null;  FileBasedArgument clearPasswordFile=null;  StringArgument encodedPassword=null;  FileBasedArgument encodedPasswordFile=null;  StringArgument configFile=null;  StringArgument schemeName=null;  LocalizableMessage toolDescription=INFO_ENCPW_TOOL_DESCRIPTION.get();  ArgumentParser argParser=new ArgumentParser("org.opends.server.tools.EncodePassword",toolDescription,false);  argParser.setShortToolDescription(REF_SHORT_DESC_ENCODE_PASSWORD.get());  argParser.setVersionHandler(new DirectoryServerVersionHandler());  try {    listSchemes=BooleanArgument.builder("listSchemes").shortIdentifier('l').description(INFO_ENCPW_DESCRIPTION_LISTSCHEMES.get()).buildAndAddToParser(argParser);    interactivePassword=BooleanArgument.builder("interactivePassword").shortIdentifier('i').description(INFO_ENCPW_DESCRIPTION_INPUT_PW.get()).buildAndAddToParser(argParser);    clearPassword=StringArgument.builder("clearPassword").shortIdentifier('c').description(INFO_ENCPW_DESCRIPTION_CLEAR_PW.get()).valuePlaceholder(INFO_CLEAR_PWD.get()).buildAndAddToParser(argParser);    clearPasswordFile=FileBasedArgument.builder("clearPasswordFile").shortIdentifier('f').description(INFO_ENCPW_DESCRIPTION_CLEAR_PW_FILE.get()).valuePlaceholder(INFO_FILE_PLACEHOLDER.get()).buildAndAddToParser(argParser);    encodedPassword=StringArgument.builder("encodedPassword").shortIdentifier('e').description(INFO_ENCPW_DESCRIPTION_ENCODED_PW.get()).valuePlaceholder(INFO_ENCODED_PWD_PLACEHOLDER.get()).buildAndAddToParser(argParser);    encodedPasswordFile=FileBasedArgument.builder("encodedPasswordFile").shortIdentifier('E').description(INFO_ENCPW_DESCRIPTION_ENCODED_PW_FILE.get()).valuePlaceholder(INFO_FILE_PLACEHOLDER.get()).buildAndAddToParser(argParser);    configFile=StringArgument.builder("configFile").shortIdentifier('F').description(INFO_DESCRIPTION_CONFIG_FILE.get()).hidden().required().valuePlaceholder(INFO_CONFIGFILE_PLACEHOLDER.get()).buildAndAddToParser(argParser);    schemeName=StringArgument.builder("storageScheme").shortIdentifier('s').description(INFO_ENCPW_DESCRIPTION_SCHEME.get()).valuePlaceholder(INFO_STORAGE_SCHEME_PLACEHOLDER.get()).buildAndAddToParser(argParser);    authPasswordSyntax=BooleanArgument.builder("authPasswordSyntax").shortIdentifier('a').description(INFO_ENCPW_DESCRIPTION_AUTHPW.get()).buildAndAddToParser(argParser);    useCompareResultCode=BooleanArgument.builder("useCompareResultCode").shortIdentifier('r').description(INFO_ENCPW_DESCRIPTION_USE_COMPARE_RESULT.get()).buildAndAddToParser(argParser);    showUsage=showUsageArgument();    argParser.addArgument(showUsage);    argParser.setUsageArgument(showUsage,out);  } catch (  ArgumentException ae) {    printWrappedText(err,ERR_CANNOT_INITIALIZE_ARGS.get(ae.getMessage()));    return OPERATIONS_ERROR;  }  try {    argParser.parseArguments(args);  } catch (  ArgumentException ae) {    argParser.displayMessageAndUsageReference(err,ERR_ERROR_PARSING_ARGS.get(ae.getMessage()));    return OPERATIONS_ERROR;  }  if (argParser.usageOrVersionDisplayed()) {    return SUCCESS;  }  try {    BuildVersion.checkVersionMismatch();  } catch (  InitializationException e) {    printWrappedText(err,e.getMessage());    return 1;  }  try {    throwIfArgumentsConflict(clearPassword,clearPasswordFile);    throwIfArgumentsConflict(clearPassword,interactivePassword);    throwIfArgumentsConflict(clearPasswordFile,interactivePassword);    throwIfArgumentsConflict(encodedPassword,encodedPasswordFile);  } catch (  final ArgumentException conflict) {    printWrappedText(err,conflict.getMessageObject());    return OPERATIONS_ERROR;  }  if (!listSchemes.isPresent() && !encodedPassword.isPresent() && !encodedPasswordFile.isPresent()&& !schemeName.isPresent()) {    argParser.displayMessageAndUsageReference(err,ERR_ENCPW_NO_SCHEME.get(schemeName.getLongIdentifier()));    return OPERATIONS_ERROR;  }  boolean compareMode;  ByteString encodedPW=null;  if (encodedPassword.hasValue()) {    compareMode=true;    encodedPW=ByteString.valueOfUtf8(encodedPassword.getValue());  } else   if (encodedPasswordFile.hasValue()) {    compareMode=true;    encodedPW=ByteString.valueOfUtf8(encodedPasswordFile.getValue());  } else {    compareMode=false;  }  if (initializeServer) {    try {      new DirectoryServer.InitializationBuilder(configFile.getValue()).requirePasswordStorageSchemes().initialize();    } catch (    InitializationException ie) {      printWrappedText(err,ERR_CANNOT_INITIALIZE_SERVER_COMPONENTS.get(getExceptionMessage(ie)));      return OPERATIONS_ERROR;    }  }  if (listSchemes.isPresent()) {    if (authPasswordSyntax.isPresent()) {      listPasswordStorageSchemes(out,err,DirectoryServer.getAuthPasswordStorageSchemes().values(),true);    } else {      listPasswordStorageSchemes(out,err,DirectoryServer.getPasswordStorageSchemes(),false);    }    return SUCCESS;  }  ByteString clearPW=null;  if (compareMode) {    if (authPasswordSyntax.isPresent()) {      String[] authPWElements;      try {        authPWElements=AuthPasswordSyntax.decodeAuthPassword(encodedPW.toString());      } catch (      DirectoryException de) {        printWrappedText(err,ERR_ENCPW_INVALID_ENCODED_AUTHPW.get(de.getMessageObject()));        return OPERATIONS_ERROR;      }catch (      Exception e) {        printWrappedText(err,ERR_ENCPW_INVALID_ENCODED_AUTHPW.get(e));        return OPERATIONS_ERROR;      }      String scheme=authPWElements[0];      String authInfo=authPWElements[1];      String authValue=authPWElements[2];      PasswordStorageScheme storageScheme=DirectoryServer.getAuthPasswordStorageScheme(scheme);      if (storageScheme == null) {        printWrappedText(err,ERR_ENCPW_NO_SUCH_AUTH_SCHEME.get(scheme));        return OPERATIONS_ERROR;      }      if (clearPW == null) {        clearPW=getClearPW(err,argParser,clearPassword,clearPasswordFile,interactivePassword);        if (clearPW == null) {          return OPERATIONS_ERROR;        }      }      final boolean authPasswordMatches=storageScheme.authPasswordMatches(clearPW,authInfo,authValue);      out.println(getOutputMessage(authPasswordMatches));      if (useCompareResultCode.isPresent()) {        return authPasswordMatches ? COMPARE_TRUE : COMPARE_FALSE;      }      return SUCCESS;    } else {      PasswordStorageScheme storageScheme;      String encodedPWString;      if (UserPasswordSyntax.isEncoded(encodedPW)) {        try {          String[] userPWElements=UserPasswordSyntax.decodeUserPassword(encodedPW.toString());          encodedPWString=userPWElements[1];          storageScheme=DirectoryServer.getPasswordStorageScheme(userPWElements[0]);          if (storageScheme == null) {            printWrappedText(err,ERR_ENCPW_NO_SUCH_SCHEME.get(userPWElements[0]));            return OPERATIONS_ERROR;          }        } catch (        DirectoryException de) {          printWrappedText(err,ERR_ENCPW_INVALID_ENCODED_USERPW.get(de.getMessageObject()));          return OPERATIONS_ERROR;        }catch (        Exception e) {          printWrappedText(err,ERR_ENCPW_INVALID_ENCODED_USERPW.get(e));          return OPERATIONS_ERROR;        }      } else {        if (!schemeName.isPresent()) {          printWrappedText(err,ERR_ENCPW_NO_SCHEME.get(schemeName.getLongIdentifier()));          return OPERATIONS_ERROR;        }        encodedPWString=encodedPW.toString();        String scheme=toLowerCase(schemeName.getValue());        storageScheme=DirectoryServer.getPasswordStorageScheme(scheme);        if (storageScheme == null) {          printWrappedText(err,ERR_ENCPW_NO_SUCH_SCHEME.get(scheme));          return OPERATIONS_ERROR;        }      }      if (clearPW == null) {        clearPW=getClearPW(err,argParser,clearPassword,clearPasswordFile,interactivePassword);        if (clearPW == null) {          return OPERATIONS_ERROR;        }      }      boolean passwordMatches=storageScheme.passwordMatches(clearPW,ByteString.valueOfUtf8(encodedPWString));      out.println(getOutputMessage(passwordMatches));      if (useCompareResultCode.isPresent()) {        return passwordMatches ? COMPARE_TRUE : COMPARE_FALSE;      }      return SUCCESS;    }  } else {    PasswordStorageScheme storageScheme;    if (authPasswordSyntax.isPresent()) {      String scheme=schemeName.getValue();      storageScheme=DirectoryServer.getAuthPasswordStorageScheme(scheme);      if (storageScheme == null) {        printWrappedText(err,ERR_ENCPW_NO_SUCH_AUTH_SCHEME.get(scheme));        return OPERATIONS_ERROR;      }    } else {      String scheme=toLowerCase(schemeName.getValue());      storageScheme=DirectoryServer.getPasswordStorageScheme(scheme);      if (storageScheme == null) {        printWrappedText(err,ERR_ENCPW_NO_SUCH_SCHEME.get(scheme));        return OPERATIONS_ERROR;      }    }    if (authPasswordSyntax.isPresent()) {      try {        if (clearPW == null) {          clearPW=getClearPW(err,argParser,clearPassword,clearPasswordFile,interactivePassword);          if (clearPW == null) {            return OPERATIONS_ERROR;          }        }        encodedPW=storageScheme.encodeAuthPassword(clearPW);        LocalizableMessage message=ERR_ENCPW_ENCODED_PASSWORD.get(encodedPW);        out.println(message);      } catch (      DirectoryException de) {        printWrappedText(err,ERR_ENCPW_CANNOT_ENCODE.get(de.getMessageObject()));        return OPERATIONS_ERROR;      }catch (      Exception e) {        printWrappedText(err,ERR_ENCPW_CANNOT_ENCODE.get(getExceptionMessage(e)));        return OPERATIONS_ERROR;      }    } else {      try {        if (clearPW == null) {          clearPW=getClearPW(err,argParser,clearPassword,clearPasswordFile,interactivePassword);          if (clearPW == null) {            return OPERATIONS_ERROR;          }        }        encodedPW=storageScheme.encodePasswordWithScheme(clearPW);        out.println(ERR_ENCPW_ENCODED_PASSWORD.get(encodedPW));      } catch (      DirectoryException de) {        printWrappedText(err,ERR_ENCPW_CANNOT_ENCODE.get(de.getMessageObject()));        return OPERATIONS_ERROR;      }catch (      Exception e) {        printWrappedText(err,ERR_ENCPW_CANNOT_ENCODE.get(getExceptionMessage(e)));        return OPERATIONS_ERROR;      }    }  }  return SUCCESS;}  }
class C{  private void registerSvcsForOrg(String subOrgName,String subOrgDN){  try {    Set defaultServices=ServiceManager.servicesAssignedByDefault();    if (SMSEntry.debug.messageEnabled()) {      SMSEntry.debug.message("OrganizationConfigManager::" + "registerSvcsForOrg. " + "defaultServices : "+ defaultServices);    }    if (defaultServices != null) {      Set assignedServices=amsdk.getAssignedServices();      if (SMSEntry.debug.messageEnabled()) {        SMSEntry.debug.message("OrganizationConfigManager::" + "registerSvcsForOrg:assignedServices: " + assignedServices);      }      Iterator items=defaultServices.iterator();      String serviceName=null;      if (SMSEntry.getRootSuffix().equalsIgnoreCase(SMSEntry.getAMSdkBaseDN())) {        amsdk=new OrgConfigViaAMSDK(token,orgNamingAttrInLegacyMode + SMSEntry.EQUALS + subOrgName+ SMSEntry.COMMA+ DNMapper.realmNameToAMSDKName(orgDN),subOrgDN);      } else {        amsdk=new OrgConfigViaAMSDK(token,orgNamingAttrInLegacyMode + SMSEntry.EQUALS + subOrgName+ SMSEntry.COMMA+ amSDKOrgDN,subOrgDN);      }      while (items.hasNext()) {        serviceName=(String)items.next();        if (assignedServices.contains(serviceName)) {          if (SMSEntry.debug.messageEnabled()) {            SMSEntry.debug.message("OrganizationConfigManager::" + "registerSvcsForOrg:ServiceName : " + serviceName);          }          amsdk.assignService(serviceName);        }      }    }  } catch (  SMSException smse) {    if (SMSEntry.debug.warningEnabled()) {      SMSEntry.debug.warning("OrganizationConfigManager::" + "registerSvcsForOrg. " + "SMSException in registering services: ",smse);    }  }}  }
class C{  public final void testVerifyPublicKey() throws InvalidKeyException, CertificateException, NoSuchAlgorithmException, NoSuchProviderException, SignatureException {  Certificate c1=new MyCertificate("TEST_TYPE",testEncoding);  c1.verify(null);}  }
class C{  public void readUTCTime() throws IOException {  if (tag == ASN1Constants.TAG_UTCTIME) {switch (length) {case ASN1UTCTime.UTC_HM:case ASN1UTCTime.UTC_HMS:      break;case ASN1UTCTime.UTC_LOCAL_HM:case ASN1UTCTime.UTC_LOCAL_HMS:    throw new ASN1Exception("ASN.1 UTCTime: local time format is not supported");default :  throw new ASN1Exception("ASN.1 UTCTime: wrong length, identifier at " + tagOffset);}readContent();if (buffer[offset - 1] != 'Z') {throw new ASN1Exception("ASN.1 UTCTime wrongly encoded at [" + contentOffset + ']');}if (times == null) {times=new int[7];}times[0]=strToInt(contentOffset,2);if (times[0] > 49) {times[0]+=1900;} else {times[0]+=2000;}times[1]=strToInt(contentOffset + 2,2);times[2]=strToInt(contentOffset + 4,2);times[3]=strToInt(contentOffset + 6,2);times[4]=strToInt(contentOffset + 8,2);if (length == ASN1UTCTime.UTC_HMS) {times[5]=strToInt(contentOffset + 10,2);}} else if (tag == ASN1Constants.TAG_C_UTCTIME) {throw new ASN1Exception("Decoding constructed ASN.1 UTCTime type is not supported");} else {throw expected("UTCTime");}}  }
class C{  private void initializeBackendSet(){  backendSet=new TreeSet<>();  DN theDN=null;  for (  String baseDN : baseDNs) {    try {      theDN=DN.valueOf(baseDN);    } catch (    Throwable t) {      throw new IllegalArgumentException("Could not decode dn " + baseDN,t);    }    BackendDescriptor backend=findBackendByID(theDN);    if (backend != null) {      backendSet.add(backend.getBackendID());    }  }}  }
class C{  @Override public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {  AlbianAopAttribute attr=method.getAnnotation(AlbianAopAttribute.class);  if (null != attr && attr.avoid()) {    Object rc=method.invoke(_service,args);    return rc;  }  if (Validate.isNullOrEmpty(_aopAttributes)) {    Object rc=method.invoke(_service,args);    return rc;  }  for (  IAlbianServiceAopAttribute aaa : _aopAttributes) {    IAlbianAopService aas=AlbianServiceRouter.getSingletonService(IAlbianAopService.class,aaa.getServiceName(),false);    if (null == aas)     continue;    if (aaa.matches(method.getName())) {      aas.before(_service,method,args);    }  }  Object rc=null;  Throwable throwable=null;  try {    rc=method.invoke(_service,args);  } catch (  Throwable t) {    for (    IAlbianServiceAopAttribute aaa : _aopAttributes) {      IAlbianAopService aas=AlbianServiceRouter.getSingletonService(IAlbianAopService.class,aaa.getServiceName(),false);      if (null == aas)       continue;      if (aaa.matchsException(method.getName(),t)) {        aas.exception(_service,method,t,args);      }    }  }  for (  IAlbianServiceAopAttribute aaa : _aopAttributes) {    IAlbianAopService aas=AlbianServiceRouter.getSingletonService(IAlbianAopService.class,aaa.getServiceName(),false);    if (null == aas)     continue;    if (aaa.matches(method.getName())) {      aas.after(_service,method,args);    }  }  return rc;}  }
class C{  static String format(String property,Object[] args){  String text=ResourceBundle.getBundle(Messages.class.getName()).getString(property);  return MessageFormat.format(text,args);}  }
class C{  public Conversation(Plugin plugin,Conversable forWhom,Prompt firstPrompt){  this(plugin,forWhom,firstPrompt,new HashMap<Object,Object>());}  }
class C{  long removeCount(final WriteableTransaction txn,final EntryID entryID){  return counter.removeCount(txn,toKey(entryID));}  }
class C{  public void add(Permission permission){synchronized (this) {    permsMap.put(permission,permission);  }}  }
class C{  private void checkConnected(LDAPMessage responseMessage) throws LDAPException, ClientException {switch (responseMessage.getProtocolOpType()) {case OP_TYPE_BIND_RESPONSE:    break;case OP_TYPE_EXTENDED_RESPONSE:  ExtendedResponseProtocolOp extendedResponse=responseMessage.getExtendedResponseProtocolOp();String responseOID=extendedResponse.getOID();if (OID_NOTICE_OF_DISCONNECTION.equals(responseOID)) {LocalizableMessage message=ERR_LDAPAUTH_SERVER_DISCONNECT.get(extendedResponse.getResultCode(),extendedResponse.getErrorMessage());throw new LDAPException(extendedResponse.getResultCode(),message);} else {LocalizableMessage message=ERR_LDAPAUTH_UNEXPECTED_EXTENDED_RESPONSE.get(extendedResponse);throw new ClientException(ReturnCode.CLIENT_SIDE_LOCAL_ERROR,message);}default :LocalizableMessage message=ERR_LDAPAUTH_UNEXPECTED_RESPONSE.get(responseMessage.getProtocolOp());throw new ClientException(ReturnCode.CLIENT_SIDE_LOCAL_ERROR,message);}}  }
class C{  public XACMLAuthzDecisionStatementImpl(String xml) throws XACMLException {  Document document=XMLUtils.toDOMDocument(xml,XACMLSDKUtils.debug);  if (document != null) {    Element rootElement=document.getDocumentElement();    processElement(rootElement);    makeImmutable();  } else {    XACMLSDKUtils.debug.error("DecisionImpl.processElement(): invalid XML input");    throw new XACMLException(XACMLSDKUtils.xacmlResourceBundle.getString("errorObtainingElement"));  }}  }
class C{  public Evidence(org.w3c.dom.Element assertionSpecifierElement) throws SAMLException {  super(assertionSpecifierElement);}  }
class C{  public boolean append_class(String p_class_name){  if (get_no(p_class_name) >= 0)   return false;  int old_class_count=class_count;  ++class_count;  ClearanceMatrixRow[] new_row=new ClearanceMatrixRow[class_count];  for (int i=0; i < old_class_count; ++i) {    ClearanceMatrixRow curr_old_row=clearance_rows[i];    new_row[i]=new ClearanceMatrixRow(this,curr_old_row.name);    ClearanceMatrixRow curr_new_row=new_row[i];    curr_new_row.max_value=curr_old_row.max_value;    for (int j=0; j < old_class_count; ++j) {      curr_new_row.column[j]=curr_old_row.column[j];    }    curr_new_row.column[old_class_count]=new ClearanceMatrixEntry(layer_structure);  }  new_row[old_class_count]=new ClearanceMatrixRow(this,p_class_name);  clearance_rows=new_row;  for (int index=0; index < old_class_count; ++index) {    for (int j=0; j < layer_structure.size(); ++j) {      int default_value=value_at(1,index,j);      set_value(old_class_count,index,j,default_value);      set_value(index,old_class_count,j,default_value);    }  }  for (int j=0; j < layer_structure.size(); ++j) {    int default_value=value_at(1,1,j);    set_value(old_class_count,old_class_count,j,default_value);  }  return true;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(textindexsizeerroffsetoutofbounds.class,args);}  }
class C{  private long monthRange(){  ValueRange startRange=chrono.range(MONTH_OF_YEAR);  if (startRange.isFixed() && startRange.isIntValue()) {    return startRange.getMaximum() - startRange.getMinimum() + 1;  }  return -1;}  }
class C{  public void reset(){  m_sourceTree=new Vector();}  }
class C{  public static void logAbandonRequest(AbandonOperation abandonOperation){  for (  AccessLogPublisher<?> publisher : getAccessLogPublishers()) {    publisher.logAbandonRequest(abandonOperation);  }}  }
class C{  public ActionMap(){}  }
class C{  public boolean check_shape(ShapeTile[] tiles,int p_layer,NetNosList p_net_no_arr,int p_cl_class){  AwtreeShapeSearch default_tree=search_tree_manager.get_default_tree();  for (int index=0; index < tiles.length; ++index) {    ShapeTile curr_shape=tiles[index];    if (!curr_shape.is_contained_in(bounding_box))     return false;    Collection<AwtreeFindEntry> obstacles=default_tree.find_overlap_tree_entries_with_clearance(curr_shape,p_layer,p_net_no_arr,p_cl_class);    for (    AwtreeFindEntry cur_entry : obstacles) {      AwtreeObject curr_ob=cur_entry.object;      boolean is_obstacle=p_net_no_arr.is_obstacle(curr_ob);      if (is_obstacle)       return false;    }  }  return true;}  }
class C{  private static String wildcardToRegex(String pattern){  return "^" + StringUtils.replaceEach(escapeRegexp(pattern),new String[]{"\\*","\\?"},new String[]{".*","."}) + "$";}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childValue;  int childLength;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("strong");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.appendData(", Esquire");  childValue=child.getData();  childLength=childValue.length();  assertEquals("characterdataAppendDataAssert",24,childLength);}  }
class C{  protected void checkAndAddPage(PdfPage page){  if (page.isFlushed())   throw new PdfException(PdfException.FlushedPageCannotBeAddedOrInserted,page);  if (page.getDocument() != null && this != page.getDocument())   throw new PdfException(PdfException.Page1CannotBeAddedToDocument2BecauseItBelongsToDocument3).setMessageParams(page,this,page.getDocument());  catalog.getPageTree().addPage(page);}  }
class C{  public void testNegateNegative(){  byte aBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  int aSign=-1;  byte rBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.negate();  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertTrue("incorrect sign",result.signum() == 1);}  }
class C{  public static String defaultGroupContainerName(){  initialize();  return (defaultGC);}  }
class C{  public NotFoundException(Throwable cause){  super(cause);}  }
class C{  public PartialResultException(){  super();}  }
class C{  public boolean delete(final String alias){  try {    this.keyStore.deleteEntry(alias);    this.dirty.set(true);    return true;  } catch (  final KeyStoreException ex) {    KeyStoreHandler.LOGGER.debug("Entry '{}' not deleted.",alias,ex);    return false;  }}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  String realm=getStringOptionValue(IArgument.REALM_NAME);  String name=getStringOptionValue(AuthOptions.AUTH_CONFIG_NAME);  String[] params={realm,name};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_CREATE_AUTH_CONFIGURATION",params);  try {    AMAuthConfigUtils.createNamedConfig(name,0,new HashMap(),realm,adminSSOToken);    getOutputWriter().printlnMessage(getResourceString("authentication-created-auth-configuration-succeeded"));    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_CREATE_AUTH_CONFIGURATION",params);  } catch (  AMConfigurationException e) {    debugError("CreateAuthConfiguration.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_CREATE_AUTH_CONFIGURATION",params);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    debugError("CreateAuthConfiguration.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_CREATE_AUTH_CONFIGURATION",params);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    debugError("CreateAuthConfiguration.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_CREATE_AUTH_CONFIGURATION",params);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public InvalidConfigurationException(String msg){  super(msg);}  }
class C{  private void writeObject(java.io.ObjectOutputStream out) throws NotSerializableException {  throw new NotSerializableException("Not serializable.");}  }
class C{  public static void verifyAttrQuerySignature(AttributeQuery attrQuery,String attrAuthorityEntityID,String realm) throws SAML2Exception {  if (!attrQuery.isSigned()) {    throw new SAML2Exception(SAML2Utils.bundle.getString("attrQueryNotSigned"));  }  String requestedEntityID=attrQuery.getIssuer().getValue();  AttributeQueryDescriptorElement attrqDesc=metaManager.getAttributeQueryDescriptor(realm,requestedEntityID);  if (attrqDesc == null) {    throw new SAML2Exception(SAML2Utils.bundle.getString("attrQueryIssuerNotFound"));  }  Set<X509Certificate> signingCerts=KeyUtil.getVerificationCerts(attrqDesc,requestedEntityID,SAML2Constants.ATTR_QUERY_ROLE);  if (!signingCerts.isEmpty()) {    boolean valid=attrQuery.isSignatureValid(signingCerts);    if (SAML2Utils.debug.messageEnabled()) {      SAML2Utils.debug.message("AttributeQueryUtil.verifyAttributeQuery: " + "Signature validity is : " + valid);    }    if (!valid) {      throw new SAML2Exception(SAML2Utils.bundle.getString("invalidSignatureAttrQuery"));    }  } else {    throw new SAML2Exception(SAML2Utils.bundle.getString("missingSigningCertAlias"));  }}  }
class C{  public static ScheduleType createLaunchNow(){  ScheduleType schedule=new ScheduleType();  schedule.type=Type.LAUNCH_NOW;  schedule.toString=schedule.calculateToString();  schedule.hashCode=schedule.calculateHashCode();  return schedule;}  }
class C{  private void sslTest(int size,String qop) throws NamingException, IOException {  LdapContext ctx=null;  try {    Hashtable<String,String> env=new Hashtable<>();    env.put(Context.INITIAL_CONTEXT_FACTORY,factory);    String url="ldaps://localhost:" + TestCaseUtils.getServerLdapsPort();    env.put(Context.PROVIDER_URL,url);    env.put(Context.SECURITY_AUTHENTICATION,digest);    env.put(Context.SECURITY_PRINCIPAL,digestDN);    env.put(Context.SECURITY_CREDENTIALS,"password");    env.put("java.naming.ldap.attributes.binary","jpegPhoto");    env.put("javax.security.sasl.qop",qop);    env.put("java.naming.ldap.factory.socket",TestSSLSocketFactory.class.getName());    ctx=new InitialLdapContext(env,null);    byte[] jpegBytes=getRandomBytes(size);    ModificationItem[] mods=new ModificationItem[1];    Attribute jpegPhoto=new BasicAttribute("jpegPhoto",jpegBytes);    mods[0]=new ModificationItem(DirContext.REPLACE_ATTRIBUTE,jpegPhoto);    ctx.modifyAttributes(testUserDN,mods);    Attributes testAttributes=ctx.getAttributes(testUserDN);    Attribute jpegPhoto1=testAttributes.get("jpegPhoto");    byte[] jpegBytes1=(byte[])jpegPhoto1.get();    Assert.assertTrue(Arrays.equals(jpegBytes,jpegBytes1));  }  finally {    if (ctx != null) {      ctx.close();    }  }}  }
class C{  public static boolean isDN(String candidateDN){  return isDN(candidateDN,0);}  }
class C{  public ConfigParameters disableConnectionHandlers(boolean disable){  disableConnectionHandlers=disable;  return this;}  }
class C{  public static void putHeaders(MimeHeaders headers,HttpServletResponse response){  if (debug.messageEnabled()) {    debug.message("SAML2Util.putHeaders: Header=" + headers.toString());  }  Iterator it=headers.getAllHeaders();  while (it.hasNext()) {    MimeHeader header=(MimeHeader)it.next();    String[] values=headers.getHeader(header.getName());    if (debug.messageEnabled()) {      debug.message("SAML2Util.putHeaders: Header name=" + header.getName() + ", value="+ Arrays.toString(values));    }    if (values.length == 1) {      response.setHeader(header.getName(),header.getValue());    } else {      StringBuilder concatenatedHeaderValues=new StringBuilder();      for (int i=0; i < values.length; i++) {        if (i != 0) {          concatenatedHeaderValues.append(',');        }        concatenatedHeaderValues.append(values[i]);      }      response.setHeader(header.getName(),concatenatedHeaderValues.toString());    }  }}  }
class C{  private void detectEncoding(char[] cbuf,int off,int len) throws IOException {  int size=len;  StringBuffer xmlProlog=xmlPrologWriter.getBuffer();  if (xmlProlog.length() + len > BUFFER_SIZE) {    size=BUFFER_SIZE - xmlProlog.length();  }  xmlPrologWriter.write(cbuf,off,size);  if (xmlProlog.length() >= 5) {    if (xmlProlog.substring(0,5).equals("<?xml")) {      int xmlPrologEnd=xmlProlog.indexOf("?>");      if (xmlPrologEnd > 0) {        Matcher m=ENCODING_PATTERN.matcher(xmlProlog.substring(0,xmlPrologEnd));        if (m.find()) {          encoding=m.group(1).toUpperCase();          encoding=encoding.substring(1,encoding.length() - 1);        } else {          encoding=defaultEncoding;        }      } else {        if (xmlProlog.length() >= BUFFER_SIZE) {          encoding=defaultEncoding;        }      }    } else {      encoding=defaultEncoding;    }    if (encoding != null) {      xmlPrologWriter=null;      writer=new OutputStreamWriter(out,encoding);      writer.write(xmlProlog.toString());      if (len > size) {        writer.write(cbuf,off + size,len - size);      }    }  }}  }
class C{  private void addEntry(Entry e,ResultCode rc) throws Exception {  AddOperation addOperation=getRootConnection().processAdd(e);  assertEquals(addOperation.getResultCode(),rc);}  }
class C{  public void abort() throws IOException {  completeEdit(this,false);}  }
class C{  public void d(Object str){  if (logFlag) {    if (logLevel <= android.util.Log.DEBUG) {      String name=getFunctionName();      if (name != null) {        android.util.Log.d(tag,name + " - " + str);      } else {        android.util.Log.d(tag,str.toString());      }    }  }}  }
class C{  private String encodeSymmetricKeyAttribute(final String wrappingTransformationName,final String wrappingKeyID,final byte[] wrappingKeyCertificateData,final SecretKey secretKey) throws CryptoManagerException {  String wrappedKeyElement;  try {    final CertificateFactory cf=CertificateFactory.getInstance("X.509");    final Certificate certificate=cf.generateCertificate(new ByteArrayInputStream(wrappingKeyCertificateData));    final Cipher wrapper=Cipher.getInstance(wrappingTransformationName);    wrapper.init(Cipher.WRAP_MODE,certificate);    byte[] wrappedKey=wrapper.wrap(secretKey);    wrappedKeyElement=StaticUtils.bytesToHexNoSpace(wrappedKey);  } catch (  GeneralSecurityException ex) {    logger.traceException(ex);    throw new CryptoManagerException(ERR_CRYPTOMGR_FAILED_TO_ENCODE_SYMMETRIC_KEY_ATTRIBUTE.get(getExceptionMessage(ex)),ex);  }  return wrappingKeyID + ":" + wrappingTransformationName+ ":"+ secretKey.getAlgorithm()+ ":"+ wrappedKeyElement;}  }
class C{  public static ResourceIDElement createResourceIDElement(String resourceID) throws JAXBException, IDPPException {  if (resourceID == null) {    debug.error("IDPPUtils:ResourceIDType: Resource id is null");    throw new IDPPException("ResourceID is null");  }  ResourceIDElement resourceIDElement=idppFactory.createResourceIDElement();  resourceIDElement.setValue(resourceID);  return resourceIDElement;}  }
class C{  public Location add(Location vec){  if (vec == null || vec.getWorld() != getWorld()) {    throw new IllegalArgumentException("Cannot add Locations of differing worlds");  }  x+=vec.x;  y+=vec.y;  z+=vec.z;  return this;}  }
class C{  protected List<Modification> generatemods(String attrName,String attrValue){  Attribute attr=Attributes.create(attrName,attrValue);  return newArrayList(new Modification(REPLACE,attr));}  }
class C{  public boolean containsObject(Object obj){  NSObject nso=NSObject.wrap(obj);  for (  NSObject elem : array) {    if (elem == null) {      if (obj == null)       return true;      continue;    }    if (elem.equals(nso)) {      return true;    }  }  return false;}  }
class C{  public LoginViewBean(){  super(PAGE_NAME);  loginDebug.message("LoginViewBean() constructor called");  registerChildren();}  }
class C{  public final char readChar() throws IOException {  return (char)readShort();}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) public static <T>T min(Collection<? extends T> coll,Comparator<? super T> comp){  if (comp == null)   return (T)min((Collection)coll);  Iterator<? extends T> i=coll.iterator();  T candidate=i.next();  while (i.hasNext()) {    T next=i.next();    if (comp.compare(next,candidate) < 0)     candidate=next;  }  return candidate;}  }
class C{  public static FSAuthnRequest parseURLEncodedRequest(HttpServletRequest request) throws FSMsgException {  FSAuthnRequest retAuthnRequest=new FSAuthnRequest();  String authReqID=request.getParameter(IFSConstants.AUTH_REQUEST_ID);  if (authReqID == null || authReqID.length() == 0) {    throw new FSMsgException("nullAuthnRequestID",null);  }  retAuthnRequest.requestID=authReqID;  String instantString=request.getParameter(IFSConstants.ISSUE_INSTANT);  if (instantString == null || instantString.length() == 0) {    String[] args={IFSConstants.ISSUE_INSTANT};    throw new FSMsgException("missingAttribute",args);  }  try {    retAuthnRequest.issueInstant=DateUtils.stringToDate(instantString);  } catch (  ParseException e) {    throw new FSMsgException("parseError",null);  }  retAuthnRequest.majorVersion=checkMajorVersion(request.getParameter(IFSConstants.MAJOR_VERSION));  retAuthnRequest.minorVersion=checkMinorVersion(request.getParameter(IFSConstants.MINOR_VERSION));  String providerId=request.getParameter(IFSConstants.PROVIDER_ID);  if (providerId == null || providerId.length() == 0) {    throw new FSMsgException("nullProviderIdInRequest",null);  } else {    FSUtils.debug.message("ProviderID of the sender: " + providerId);    retAuthnRequest.providerId=providerId;  }  retAuthnRequest.affiliationID=request.getParameter(IFSConstants.AFFILIATIONID);  String forceAuthn=request.getParameter(IFSConstants.FORCE_AUTHN_ELEM);  if (forceAuthn != null && forceAuthn.length() != 0 && (forceAuthn.equals(IFSConstants.TRUE) || forceAuthn.equals(IFSConstants.ONE))) {    retAuthnRequest.forceAuthn=true;  } else {    retAuthnRequest.forceAuthn=false;  }  String isPassive=request.getParameter(IFSConstants.IS_PASSIVE_ELEM);  if (isPassive != null && isPassive.length() != 0 && (isPassive.equals(IFSConstants.TRUE) || isPassive.equals(IFSConstants.ONE))) {    retAuthnRequest.isPassive=true;  } else {    retAuthnRequest.isPassive=false;  }  if (retAuthnRequest.minorVersion == IFSConstants.FF_12_PROTOCOL_MINOR_VERSION) {    String nameIDPolicy=request.getParameter(IFSConstants.NAMEID_POLICY_ELEMENT);    if (nameIDPolicy != null && (nameIDPolicy.equals(IFSConstants.NAME_ID_POLICY_FEDERATED) || nameIDPolicy.equals(IFSConstants.NAME_ID_POLICY_ONETIME))) {      retAuthnRequest.federate=true;    }    retAuthnRequest.nameIDPolicy=nameIDPolicy;  } else {    String federate=request.getParameter(IFSConstants.FEDERATE);    if (federate != null && federate.length() != 0 && (federate.equals(IFSConstants.TRUE) || federate.equals(IFSConstants.ONE))) {      retAuthnRequest.federate=true;    } else {      retAuthnRequest.federate=false;    }  }  String protocolProfile=request.getParameter(IFSConstants.PROTOCOL_PROFILE);  if (protocolProfile != null && protocolProfile.length() != 0) {    retAuthnRequest.protocolProfile=protocolProfile;  }  String relayState=request.getParameter(IFSConstants.RELAY_STATE);  if (relayState != null && relayState.length() != 0) {    retAuthnRequest.setRelayState(relayState);  }  String authnContextComparison=request.getParameter(IFSConstants.AUTHN_CONTEXT_COMPARISON);  if (authnContextComparison != null && authnContextComparison.length() != 0) {    retAuthnRequest.setAuthContextCompType(authnContextComparison);    String authType=retAuthnRequest.getAuthContextCompType();    if (!(authType.equals(IFSConstants.MINIMUM) || authType.equals(IFSConstants.EXACT) || authType.equals(IFSConstants.MAXIMUM)|| authType.equals(IFSConstants.BETTER))) {      throw new FSMsgException("wrongInput",null);    }  }  retAuthnRequest.authnContext=RequestAuthnContext.parseURLEncodedRequest(request,retAuthnRequest.getMinorVersion());  retAuthnRequest.scoping=FSScoping.parseURLEncodedRequest(request);  Extension extension=Extension.parseURLEncodedRequest(request,QUERY_STRING_EXTENSION_PREFIX,retAuthnRequest.getMinorVersion());  if (extension != null) {    retAuthnRequest.extensions=new ArrayList();    retAuthnRequest.extensions.add(extension);  }  return retAuthnRequest;}  }
class C{  public static void sendAlertNotification(AlertGenerator generator,String alertType,LocalizableMessage alertMessage){  DirectoryServer.sendAlertNotification(generator,alertType,alertMessage);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NamedNodeMap attributes;  NodeList elementList;  Element element;  Attr attr;  Node newNode;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagNameNS("*","address");  element=(Element)elementList.item(0);  attributes=element.getAttributes();  attr=(Attr)attributes.getNamedItemNS("http://www.usa.com","domestic");  element=(Element)elementList.item(1);  attributes=element.getAttributes();{    boolean success=false;    try {      newNode=attributes.setNamedItemNS(attr);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INUSE_ATTRIBUTE_ERR);    }    assertTrue("namednodemapsetnameditemns07",success);  }}  }
class C{  public static SmsRouteTreeBuilder branch(String uriTemplate,Predicate<String> handlesFunction,SmsRouteTreeBuilder... subTreeBuilders){  return new SmsRouteTreeBuilder(uriTemplate).handles(handlesFunction).subTrees(subTreeBuilders);}  }
class C{  public PolicyNormalEditViewBean(){  super("PolicyNormalEdit",DEFAULT_DISPLAY_URL);}  }
class C{  private void fillBuffer() throws CharacterCodingException {  this.bbuf.compact();  CoderResult result=this.encoder.encode(this.cbuf,this.bbuf,true);  if (result.isError()) {    result.throwException();  }  this.bbuf.flip();}  }
class C{  public void copyTo(int srcPos,byte[] buffer,int offset,int count){  System.arraycopy(bytes,srcPos,buffer,offset,count);}  }
class C{  void dispose(){}  }
class C{  public SQLIntegrityConstraintViolationException(String reason,String SQLState,int vendorCode,Throwable cause){  super(reason,SQLState,vendorCode,cause);}  }
class C{  public String quotedString() throws ParseException {  int startIdx=ptr + 1;  if (lookAhead(0) != '\"')   return null;  consume(1);  while (true) {    char next=getNextChar();    if (next == '\"') {      break;    } else     if (next == '\0') {      throw new ParseException(String.valueOf(this.buffer) + " :unexpected EOL",this.ptr);    } else     if (next == '\\') {      consume(1);    }  }  return String.valueOf(buffer,startIdx,ptr - startIdx - 1);}  }
class C{  public static boolean checkForUserAttributes(String userDN,Set set) throws IDPPException {  try {    Map map=userProvider.getAttributes(userDN,set);    if ((map == null) || map.isEmpty()) {      return false;    }    return true;  } catch (  DataStoreProviderException dspe) {    debug.error("IDPPUtils:checkForUserAttributes:Error while " + "checking for user attributes.",dspe);    throw new IDPPException(dspe);  }}  }
class C{  public void testSetBitPositiveInside4(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=50;  byte rBytes[]={1,-128,56,100,-2,-76,93,45,91,3,-15,35,26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.setBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public void write(ByteArrayOutputStream tagBuffer){  if (!((AbstractString)getObject(DataTypes.OBJ_DESCRIPTION)).canBeEncoded()) {    this.setTextEncoding(TextEncoding.UTF_16);  }  super.write(tagBuffer);}  }
class C{  Node(Object item,boolean isData){  UNSAFE.putObject(this,itemOffset,item);  this.isData=isData;}  }
class C{  private static void cleanDirectoryOnExit(File directory) throws IOException {  if (!directory.exists()) {    String message=directory + " does not exist";    throw new IllegalArgumentException(message);  }  if (!directory.isDirectory()) {    String message=directory + " is not a directory";    throw new IllegalArgumentException(message);  }  File[] files=directory.listFiles();  if (files == null) {    throw new IOException("Failed to list contents of " + directory);  }  IOException exception=null;  for (  File file : files) {    try {      forceDeleteOnExit(file);    } catch (    IOException ioe) {      exception=ioe;    }  }  if (null != exception) {    throw exception;  }}  }
class C{  public static void d(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_DEBUG) {    return;  }  Log.d(tag,msg,throwable);}  }
class C{  public static Map<String,MappedClass> mappingsFromNodesNoLinking(Map<String,ClassNode> nodes){  Map<String,MappedClass> mappings=new HashMap<String,MappedClass>();  for (  ClassNode node : nodes.values()) {    mappings=generateClassMapping(node,nodes,mappings);  }  return mappings;}  }
class C{  public PdfReader(InputStream is) throws IOException {  this(is,new ReaderProperties());}  }
class C{  public boolean hasBlock(){  return this.blockClicked != null;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementnormalize.class,args);}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  if (CookieUtils.debug.messageEnabled()) {    CookieUtils.debug.message("CookieReaderServlet: Initializing...");  }}  }
class C{  public static void initializePropertyDefinition(PropertyDefinition<?> propertyDef) throws Exception {  propertyDef.initialize();  propertyDef.getDefaultBehaviorProvider().initialize();}  }
class C{  public static ItemStack asBukkitCopy(net.minecraft.item.ItemStack original){  if (original == null) {    return new ItemStack(Material.AIR);  }  ItemStack stack=new ItemStack(CraftMagicNumbers.getMaterial(original.getItem()),original.stackSize,(short)original.getItemDamage());  if (hasItemMeta(original)) {    stack.setItemMeta(getItemMeta(original));  }  return stack;}  }
class C{  public FileWriterWithEncoding(String filename,CharsetEncoder encoding,boolean append) throws IOException {  this(new File(filename),encoding,append);}  }
class C{  private String createAddressCard(AddressCardElement ace,String addressType){  StringBuffer sb=new StringBuffer();  sb.append("AddrType").append("=").append(addressType).append("|");  AddressType ae=ace.getAddress();  if (ae == null) {    IDPPUtils.debug.error("IDPPAddressContainer.createAddressCard:" + "Address Element is null");    return null;  }  String address=createAddress(ae);  if (address != null) {    sb.append(address);  }  DSTString nickName=ace.getNick();  if (nickName != null) {    sb.append("Nick=").append(nickName.getValue()).append("|");  }  DSTString comment=ace.getLComment();  if (comment != null) {    sb.append("LComment=").append(comment.getValue());  }  return sb.toString();}  }
class C{  public void printStackTrace(java.io.PrintWriter pw){  if (rootCause != null) {    String superString=super.toString();synchronized (pw) {      pw.print(superString + (superString.endsWith(".") ? "" : ".") + "  Root exception is ");      rootCause.printStackTrace(pw);    }  } else {    super.printStackTrace(pw);  }}  }
class C{  public static void deleteFile(String path){  File file=new File(path);  if (file.exists()) {    file.delete();  }}  }
class C{  public CoreTokenConfig(){  caseSensitiveUserId=SystemProperties.getAsBoolean(com.sun.identity.shared.Constants.CASE_SENSITIVE_UUID);  sessionExpiryGracePeriod=5 * 60;  expiredSessionsSearchLimit=getSystemManagerPropertyAsInt(CoreTokenConstants.SYS_PROPERTY_EXPIRED_SEARCH_LIMIT,250);  cleanupPeriod=getSystemManagerPropertyAsInt(CoreTokenConstants.CLEANUP_PERIOD,5 * 60 * 1000);  healthCheckPeriod=getSystemManagerPropertyAsInt(CoreTokenConstants.HEALTH_CHECK_PERIOD,1 * 60 * 1000);  runPeriod=Math.min(cleanupPeriod,healthCheckPeriod);  sleepInterval=60 * 1000;  tokensEncrypted=SystemProperties.getAsBoolean(Constants.SESSION_REPOSITORY_ENCRYPTION);  tokensCompressed=SystemProperties.getAsBoolean(Constants.SESSION_REPOSITORY_COMPRESSION);  attributeNamesCompressed=SystemProperties.getAsBoolean(Constants.SESSION_REPOSITORY_ATTRIBUTE_NAME_COMPRESSION);  cleanupPageSize=1000;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.X509DataType.X509SKI createX509DataTypeX509SKI(byte[] value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.X509DataTypeImpl.X509SKIImpl(value);}  }
class C{  public SessionInfo(){}  }
class C{  @org.opends.server.types.PublicAPI(stability=org.opends.server.types.StabilityLevel.PRIVATE,mayInstantiate=false,mayExtend=false,mayInvoke=false) @Override public void sendResponse(Operation operation){}  }
class C{  public Lyrics3Image(String identifier,AbstractTagFrameBody frameBody){  super(identifier,frameBody);}  }
class C{  final boolean tokenIs(char c){  return (m_token != null) ? (m_tokenChar == c) : false;}  }
class C{  public int hashCode(){  int fhash=(family != null) ? family.hashCode() : 0;  return fhash ^ style ^ size;}  }
class C{  @Override public ErrorPage findErrorPage(String exceptionType){synchronized (exceptionPages) {    return (exceptionPages.get(exceptionType));  }}  }
class C{  private static int convertFromDphi(int dphi,int units){  if (units < 1) {    throw new IllegalArgumentException(": units is < 1");  }  int round=units / 2;  return (dphi + round) / units;}  }
class C{  BigInteger toBigInteger(int sign){  if (intLen == 0 || sign == 0)   return BigInteger.ZERO;  return new BigInteger(getMagnitudeArray(),sign);}  }
class C{  public Vector(int initialCapacity){  this(initialCapacity,0);}  }
class C{  public void apply(JsonValue sourceObject,JsonValue oldSource,JsonValue targetObject,JsonValue oldTarget,String linkQualifier,Context context) throws SynchronizationException {  if (!evaluateCondition(sourceObject,oldSource,targetObject,oldTarget,linkQualifier,context)) {    return;  }  Object result=null;  if (sourcePointer != null) {    JsonValue jv=sourceObject.get(sourcePointer);    if (jv != null) {      result=jv.getObject();    }  }  if (transform != null) {    Map<String,Object> scope=new HashMap<String,Object>();    scope.put("source",result);    scope.put("linkQualifier",linkQualifier);    try {      result=transform.exec(scope,context);    } catch (    ScriptException se) {      LOGGER.warn("Property mapping " + targetPointer + " transformation script encountered exception",se);      throw new SynchronizationException("Transformation script error :  " + se.getMessage() + " for attribute '"+ targetPointer+ "'");    }  }  if (result == null) {    result=defaultValue;  }  put(targetObject,targetPointer,result);}  }
class C{  private static LocalTime create(int hour,int minute,int second,int nanoOfSecond){  if ((minute | second | nanoOfSecond) == 0) {    return HOURS[hour];  }  return new LocalTime(hour,minute,second,nanoOfSecond);}  }
class C{  public synchronized NSObject member(NSObject obj){  for (  NSObject o : set) {    if (o.equals(obj))     return o;  }  return null;}  }
class C{  public void paintIndeterminate(Graphics g,JComponent c){  super.paintIndeterminate(g,c);  if (!progressBar.isBorderPainted() || (!(g instanceof Graphics2D))) {    return;  }  Insets b=progressBar.getInsets();  int barRectWidth=progressBar.getWidth() - (b.left + b.right);  int barRectHeight=progressBar.getHeight() - (b.top + b.bottom);  int amountFull=getAmountFull(b,barRectWidth,barRectHeight);  boolean isLeftToRight=MetalUtils.isLeftToRight(c);  int startX, startY, endX, endY;  Rectangle box=null;  box=getBox(box);  startX=b.left;  startY=b.top;  endX=b.left + barRectWidth - 1;  endY=b.top + barRectHeight - 1;  Graphics2D g2=(Graphics2D)g;  g2.setStroke(new BasicStroke(1.f));  if (progressBar.getOrientation() == JProgressBar.HORIZONTAL) {    g2.setColor(MetalLookAndFeel.getControlShadow());    g2.drawLine(startX,startY,endX,startY);    g2.drawLine(startX,startY,startX,endY);    g2.setColor(MetalLookAndFeel.getPrimaryControlDarkShadow());    g2.drawLine(box.x,startY,box.x + box.width - 1,startY);  } else {    g2.setColor(MetalLookAndFeel.getControlShadow());    g2.drawLine(startX,startY,startX,endY);    g2.drawLine(startX,startY,endX,startY);    g2.setColor(MetalLookAndFeel.getPrimaryControlDarkShadow());    g2.drawLine(startX,box.y,startX,box.y + box.height - 1);  }}  }
class C{  static protected int convertCharacter(int[] conversion,char ch){  int index;  for (index=0; index < conversion.length; index+=2) {    if (conversion[index] == ch)     return conversion[index + 1];  }  return 0;}  }
class C{  static String quote(char c){  StringBuilder b=new StringBuilder();  b.append('\'');  if (c == '\'')   b.append('\\').append('\''); else   if (c == '\\')   b.append('\\').append('\\'); else   if (c == '\n')   b.append('\\').append('n'); else   if (c == '\r')   b.append('\\').append('r'); else   b.append(c);  b.append('\'');  return b.toString();}  }
class C{  public TelephoneNumber parseTelephoneNumber(String telephone_number) throws ParseException {  return new URLParser(telephone_number).parseTelephoneNumber(true);}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap notations;  Node notationNode;  String notationName;  doc=(Document)load("staff",false);  docType=doc.getDoctype();  assertNotNull("docTypeNotNull",docType);  notations=docType.getNotations();  assertNotNull("notationsNotNull",notations);  notationNode=notations.getNamedItem("notation1");  assertNotNull("notationNotNull",notationNode);  notationName=notationNode.getNodeName();  assertEquals("nodeName","notation1",notationName);}  }
class C{  public void insert_wstring(String value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_wstring",_opsClass);  DynFixedOperations $self=(DynFixedOperations)$so.servant;  try {    $self.insert_wstring(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  private Node firstOfMode(boolean isData){  for (Node p=head; p != null; p=succ(p)) {    if (!p.isMatched())     return (p.isData == isData) ? p : null;  }  return null;}  }
class C{  @Override public void handle(final Callback[] callbacks) throws UnsupportedCallbackException {  for (  final Callback callback : callbacks) {    if (callback instanceof NameCallback) {      nameCallback((NameCallback)callback);    } else     if (callback instanceof PasswordCallback) {      passwordCallback((PasswordCallback)callback);    } else     if (callback instanceof RealmCallback) {      realmCallback((RealmCallback)callback);    } else     if (callback instanceof AuthorizeCallback) {      authorizeCallback((AuthorizeCallback)callback);    } else {      final LocalizableMessage message=INFO_SASL_UNSUPPORTED_CALLBACK.get(mechanism,callback);      throw new UnsupportedCallbackException(callback,message.toString());    }  }}  }
class C{  @Override public void addRoleMapping(String role,String link){synchronized (roleMappings) {    roleMappings.put(role,link);  }  fireContainerEvent("addRoleMapping",role);}  }
class C{  protected void removeOldest(ConcurrentHashMap<String,QueryStats> queries){  ArrayList<QueryStats> list=new ArrayList<>(queries.values());  Collections.sort(list,queryStatsComparator);  int removeIndex=0;  while (queries.size() > maxQueries) {    String sql=list.get(removeIndex).getQuery();    queries.remove(sql);    if (log.isDebugEnabled())     log.debug("Removing slow query, capacity reached:" + sql);    removeIndex++;  }}  }
class C{  @After public void clean(){  mute(null);  mute(null);  mute(null);}  }
class C{  private void startOCR(Uri imgUri){  try {    BitmapFactory.Options options=new BitmapFactory.Options();    options.inSampleSize=4;    Bitmap bitmap=BitmapFactory.decodeFile(imgUri.getPath(),options);    result=extractText(bitmap);    textView.setText(result);  } catch (  Exception e) {    Log.e(TAG,e.getMessage());  }}  }
class C{  private void handleFormat(Format format,Object arg,int begin,List<FieldContainer> fields){  if (fields == null) {    return;  }  AttributedCharacterIterator iterator=format.formatToCharacterIterator(arg);  while (iterator.getIndex() != iterator.getEndIndex()) {    int start=iterator.getRunStart();    int end=iterator.getRunLimit();    Iterator<?> it=iterator.getAttributes().keySet().iterator();    while (it.hasNext()) {      AttributedCharacterIterator.Attribute attribute=(AttributedCharacterIterator.Attribute)it.next();      Object value=iterator.getAttribute(attribute);      fields.add(new FieldContainer(begin + start,begin + end,attribute,value));    }    iterator.setIndex(end);  }}  }
class C{  public PSpecified(byte[] p){  super("PSpecified");  if (p == null) {    throw new NullPointerException("p == null");  }  this.p=new byte[p.length];  System.arraycopy(p,0,this.p,0,p.length);}  }
class C{  public static void writeDWord(OutputStream os,int v) throws IOException {  writeWord(os,v & 0xffff);  writeWord(os,v >>> 16 & 0xffff);}  }
class C{  public static SearchResultEntryProtocolOp readSearchEntry(ASN1Reader reader) throws LDAPException {  try {    reader.readStartSequence();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_SEARCH_ENTRY_DECODE_SEQUENCE.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  DN dn;  try {    dn=DN.valueOf(reader.readOctetStringAsString());  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_SEARCH_ENTRY_DECODE_DN.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  LinkedList<LDAPAttribute> attributes;  try {    reader.readStartSequence();    attributes=new LinkedList<>();    while (reader.hasNextElement()) {      attributes.add(LDAPAttribute.decode(reader));    }    reader.readEndSequence();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_SEARCH_ENTRY_DECODE_ATTRS.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  try {    reader.readEndSequence();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_SEARCH_ENTRY_DECODE_SEQUENCE.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  return new SearchResultEntryProtocolOp(dn,attributes);}  }
class C{  public Ins.InvokeStatic boxPrimitive(Value primitive,LineCol lineCol) throws SyntaxException {  assert primitive.type() instanceof PrimitiveTypeDef;  if (primitive.type() instanceof ByteTypeDef) {    SClassDef aByte=(SClassDef)getTypeWithName("java.lang.Byte",lineCol);    assert aByte != null;    SMethodDef valueOf=null;    for (    SMethodDef m : aByte.methods()) {      if (m.name().equals("valueOf") && m.getParameters().size() == 1 && m.getParameters().get(0).type().equals(ByteTypeDef.get())) {        valueOf=m;      }    }    if (valueOf == null)     throw new LtBug("java.lang.Byte.valueOf(byte) should exist");    Ins.InvokeStatic invokeStatic=new Ins.InvokeStatic(valueOf,lineCol);    invokeStatic.arguments().add(primitive);    return invokeStatic;  } else   if (primitive.type() instanceof BoolTypeDef) {    SClassDef aBoolean=(SClassDef)getTypeWithName("java.lang.Boolean",lineCol);    assert aBoolean != null;    SMethodDef valueOf=null;    for (    SMethodDef m : aBoolean.methods()) {      if (m.name().equals("valueOf") && m.getParameters().size() == 1 && m.getParameters().get(0).type().equals(BoolTypeDef.get())) {        valueOf=m;      }    }    if (valueOf == null)     throw new LtBug("java.lang.Boolean.valueOf(boolean) should exist");    Ins.InvokeStatic invokeStatic=new Ins.InvokeStatic(valueOf,lineCol);    invokeStatic.arguments().add(primitive);    return invokeStatic;  } else   if (primitive.type() instanceof CharTypeDef) {    SClassDef integer=(SClassDef)getTypeWithName("java.lang.Character",lineCol);    assert integer != null;    SMethodDef valueOf=null;    for (    SMethodDef m : integer.methods()) {      if (m.name().equals("valueOf") && m.getParameters().size() == 1 && m.getParameters().get(0).type().equals(CharTypeDef.get())) {        valueOf=m;      }    }    if (valueOf == null)     throw new LtBug("java.lang.Character.valueOf(char) should exist");    Ins.InvokeStatic invokeStatic=new Ins.InvokeStatic(valueOf,lineCol);    invokeStatic.arguments().add(primitive);    return invokeStatic;  } else   if (primitive.type() instanceof DoubleTypeDef) {    SClassDef aDouble=(SClassDef)getTypeWithName("java.lang.Double",lineCol);    assert aDouble != null;    SMethodDef valueOf=null;    for (    SMethodDef m : aDouble.methods()) {      if (m.name().equals("valueOf") && m.getParameters().size() == 1 && m.getParameters().get(0).type().equals(DoubleTypeDef.get())) {        valueOf=m;      }    }    if (valueOf == null)     throw new LtBug("java.lang.Double.valueOf(double) should exist");    Ins.InvokeStatic invokeStatic=new Ins.InvokeStatic(valueOf,lineCol);    invokeStatic.arguments().add(primitive);    return invokeStatic;  } else   if (primitive.type() instanceof FloatTypeDef) {    SClassDef aFloat=(SClassDef)getTypeWithName("java.lang.Float",lineCol);    assert aFloat != null;    SMethodDef valueOf=null;    for (    SMethodDef m : aFloat.methods()) {      if (m.name().equals("valueOf") && m.getParameters().size() == 1 && m.getParameters().get(0).type().equals(FloatTypeDef.get())) {        valueOf=m;      }    }    if (valueOf == null)     throw new LtBug("java.lang.Float.valueOf(float) should exist");    Ins.InvokeStatic invokeStatic=new Ins.InvokeStatic(valueOf,lineCol);    invokeStatic.arguments().add(primitive);    return invokeStatic;  } else   if (primitive.type() instanceof IntTypeDef) {    SClassDef integer=(SClassDef)getTypeWithName("java.lang.Integer",lineCol);    assert integer != null;    SMethodDef valueOf=null;    for (    SMethodDef m : integer.methods()) {      if (m.name().equals("valueOf") && m.getParameters().size() == 1 && m.getParameters().get(0).type().equals(IntTypeDef.get())) {        valueOf=m;      }    }    if (valueOf == null)     throw new LtBug("java.lang.Integer.valueOf(int) should exist");    Ins.InvokeStatic invokeStatic=new Ins.InvokeStatic(valueOf,lineCol);    invokeStatic.arguments().add(primitive);    return invokeStatic;  } else   if (primitive.type() instanceof LongTypeDef) {    SClassDef aLong=(SClassDef)getTypeWithName("java.lang.Long",lineCol);    assert aLong != null;    SMethodDef valueOf=null;    for (    SMethodDef m : aLong.methods()) {      if (m.name().equals("valueOf") && m.getParameters().size() == 1 && m.getParameters().get(0).type().equals(LongTypeDef.get())) {        valueOf=m;      }    }    if (valueOf == null)     throw new LtBug("java.lang.Long.valueOf(long) should exist");    Ins.InvokeStatic invokeStatic=new Ins.InvokeStatic(valueOf,lineCol);    invokeStatic.arguments().add(primitive);    return invokeStatic;  } else   if (primitive.type() instanceof ShortTypeDef) {    SClassDef aShort=(SClassDef)getTypeWithName("java.lang.Short",lineCol);    assert aShort != null;    SMethodDef valueOf=null;    for (    SMethodDef m : aShort.methods()) {      if (m.name().equals("valueOf") && m.getParameters().size() == 1 && m.getParameters().get(0).type().equals(ShortTypeDef.get())) {        valueOf=m;      }    }    if (valueOf == null)     throw new LtBug("java.lang.Short.valueOf(short) should exist");    Ins.InvokeStatic invokeStatic=new Ins.InvokeStatic(valueOf,lineCol);    invokeStatic.arguments().add(primitive);    return invokeStatic;  } else   throw new LtBug("primitive can only be byte/boolean/char/double/float/int/long/short");}  }
class C{  public static void createService(String fileName) throws UpgradeException {  String classMethod="UpgradeUtils:createService : ";  replaceTag(fileName,configTags);  if (debug.messageEnabled()) {    debug.message(classMethod + fileName);  }  FileInputStream fis=null;  try {    ServiceManager ssm=getServiceManager();    fis=new FileInputStream(fileName);    ssm.registerServices(fis);  } catch (  FileNotFoundException fe) {    debug.error(classMethod + "File not found: " + fileName,fe);    throw new UpgradeException(fe.getMessage());  }catch (  SSOException ssoe) {    debug.error(classMethod + "SSOToken is not valid",ssoe);    throw new UpgradeException(ssoe.getMessage());  }catch (  SMSException sme) {    debug.error(classMethod + "Invalid service schema xml" + fileName);    throw new UpgradeException(sme.getMessage());  } finally {    if (fis != null) {      try {        fis.close();      } catch (      IOException ie) {      }    }  }}  }
class C{  public Token(int kind,String image){  this.kind=kind;  this.image=image;}  }
class C{  public static final int primaryOrder(int order){  return CollationElementIteratorICU.primaryOrder(order);}  }
class C{  protected String toResourcesXml(String policyName){  StringBuffer beginning=new StringBuffer(100);  beginning.append("<").append(PolicyManager.POLICY_INDEX_ROOT_NODE).append(" ").append(PolicyManager.POLICY_INDEX_ROOT_NODE_NAME_ATTR).append("=\"").append(serviceTypeName).append("\" ").append(PolicyManager.POLICY_INDEX_ROOT_NODE_TYPE_ATTR).append("=\"").append(PolicyManager.POLICY_INDEX_ROOT_NODE_TYPE_ATTR_RESOURCES_VALUE).append("\">");  String normalizedResName=null;  if ((resourceNames == null) || resourceNames.isEmpty()) {    normalizedResName=ResourceManager.EMPTY_RESOURCE_NAME;  } else {    normalizedResName=resourceNames.iterator().next();  }  String[] resources=serviceType.split(normalizedResName);  int n=resources.length;  StringBuilder middle=new StringBuilder(100);  middle.append("<").append(PolicyManager.POLICY_INDEX_REFERENCE_NODE).append(" ").append(PolicyManager.POLICY_INDEX_REFERENCE_NODE_NAME_ATTR).append("=\"").append(resources[n - 1]).append("\"><").append(PolicyManager.POLICY_INDEX_POLICYNAME_NODE).append(" ").append(PolicyManager.POLICY_INDEX_POLICYNAME_NODE_NAME_ATTR).append("=\"").append(policyName).append("\"/></").append(PolicyManager.POLICY_INDEX_REFERENCE_NODE).append(">");  String tmp=middle.toString();  for (int i=n - 2; i >= 0; i--) {    tmp="<" + PolicyManager.POLICY_INDEX_REFERENCE_NODE + " "+ PolicyManager.POLICY_INDEX_REFERENCE_NODE_NAME_ATTR+ "=\""+ resources[i]+ "\">"+ tmp+ "</"+ PolicyManager.POLICY_INDEX_REFERENCE_NODE+ ">";  }  return (beginning + tmp + "</"+ PolicyManager.POLICY_INDEX_ROOT_NODE+ ">");}  }
class C{  protected void installDefaults(){  LookAndFeel.installColorsAndFont(table,"Table.background","Table.foreground","Table.font");  LookAndFeel.installProperty(table,"opaque",Boolean.TRUE);  Color sbg=table.getSelectionBackground();  if (sbg == null || sbg instanceof UIResource) {    sbg=UIManager.getColor("Table.selectionBackground");    table.setSelectionBackground(sbg != null ? sbg : UIManager.getColor("textHighlight"));  }  Color sfg=table.getSelectionForeground();  if (sfg == null || sfg instanceof UIResource) {    sfg=UIManager.getColor("Table.selectionForeground");    table.setSelectionForeground(sfg != null ? sfg : UIManager.getColor("textHighlightText"));  }  Color gridColor=table.getGridColor();  if (gridColor == null || gridColor instanceof UIResource) {    gridColor=UIManager.getColor("Table.gridColor");    table.setGridColor(gridColor != null ? gridColor : Color.GRAY);  }  Container parent=SwingUtilities.getUnwrappedParent(table);  if (parent != null) {    parent=parent.getParent();    if (parent != null && parent instanceof JScrollPane) {      LookAndFeel.installBorder((JScrollPane)parent,"Table.scrollPaneBorder");    }  }  isFileList=Boolean.TRUE.equals(table.getClientProperty("Table.isFileList"));}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) private static Object asSimpleBinding(Object objToClean){  if (objToClean instanceof ODocument) {    logger.trace("Converting embedded ODocument {} to map ",objToClean);    return DocumentUtil.toMap((ODocument)objToClean,false);  } else   if (objToClean instanceof List) {    logger.trace("Checking embedded list {} ",objToClean);    return toSimpleModel((List)objToClean);  } else   if (objToClean instanceof Set) {    logger.trace("Converting embedded Set {} ",objToClean);    return toSimpleModel((Set)objToClean);  } else   if (objToClean instanceof Map) {    logger.trace("Checking embedded map {} ",objToClean);    return toSimpleModel((Map)objToClean);  } else   if (objToClean instanceof com.orientechnologies.orient.core.id.ORID) {    logger.warn("Unexpected value of type ORecordId in document. Returning as String.{}",objToClean);    return objToClean.toString();  } else {    return objToClean;  }}  }
class C{  protected void completeDrag(MouseEvent e){  finishDraggingTo(positionForMouseEvent(e));}  }
class C{  public Builder removeName(String name){  this.names.remove(name);  return this;}  }
class C{  public DTMException(String message,SourceLocator locator,Throwable e){  super(message);  this.containedException=e;  this.locator=locator;}  }
class C{  public void testX509CRLEntry(){  TBTCRLEntry tbt_crlentry=new TBTCRLEntry();  assertNull(tbt_crlentry.getCertificateIssuer());  assertNull(tbt_crlentry.getCriticalExtensionOIDs());  try {    assertNull(tbt_crlentry.getEncoded());  } catch (  CRLException e) {    fail("Unexpected exception " + e.getMessage());  }  assertNull(tbt_crlentry.getNonCriticalExtensionOIDs());  assertNull(tbt_crlentry.getRevocationDate());}  }
class C{  @Override public String create(String path,InputStream is) throws MalformedURLException, IOException, AuthenticationException {  String resp=null;  ensureValidToken();  String redirectUrl=null;  logger.info(MessageFormat.format("/webhdfs/v1/{0}?op=CREATE",URLUtil.encodePath(path)));  HttpURLConnection conn=authenticatedURL.openConnection(new URL(new URL(httpfsUrl),MessageFormat.format("/webhdfs/v1/{0}?op=CREATE",URLUtil.encodePath(path))),token);  conn.setRequestMethod("PUT");  conn.setInstanceFollowRedirects(false);  conn.connect();  logger.info("Location:" + conn.getHeaderField("Location"));  resp=result(conn,true);  if (conn.getResponseCode() == 307)   redirectUrl=conn.getHeaderField("Location");  conn.disconnect();  if (redirectUrl != null) {    logger.info("Redirected URL : " + redirectUrl);    conn=authenticatedURL.openConnection(new URL(redirectUrl),token);    conn.setRequestMethod("PUT");    conn.setDoOutput(true);    conn.setDoInput(true);    conn.setUseCaches(false);    conn.setRequestProperty("Content-Type","application/octet-stream");    conn.setChunkedStreamingMode(1024);    conn.connect();    OutputStream os=conn.getOutputStream();    copy(is,os);    is.close();    os.close();    resp=result(conn,false);    conn.disconnect();  }  return resp;}  }
class C{  static public void assertTrue(String message,boolean condition){  if (!condition)   fail(message);}  }
class C{  public static synchronized int insertProviderAt(Provider provider,int position){  int size=providers.size();  if ((position < 1) || (position > size)) {    position=size + 1;  }  providers.add(position - 1,provider);  providersNames.put(provider.getName(),provider);  setNeedRefresh();  return position;}  }
class C{  public void mouseEntered(MouseEvent e){  if (e.getSource() == BasicSplitPaneDivider.this) {    setMouseOver(true);  }}  }
class C{  public boolean isFatal(){  return isFatal;}  }
class C{  public void removeEjb(String name){  entries.remove(name);  ContextEjb ejb=null;synchronized (ejbs) {    ejb=ejbs.remove(name);  }  if (ejb != null) {    support.firePropertyChange("ejb",ejb,null);    ejb.setNamingResources(null);  }}  }
class C{  public RowSetWarning(){  super();}  }
class C{  @Override public void toString(StringBuilder buffer){  buffer.append("InternalClientConnection(connID=");  buffer.append(connectionID);  buffer.append(", authDN=\"");  if (getAuthenticationInfo() != null) {    buffer.append(getAuthenticationInfo().getAuthenticationDN());  }  buffer.append("\")");}  }
class C{  public static Column column(final String id,final String title,final int width,final int doublePrecision){  return new Column(id,title,Math.max(width,title.length()),doublePrecision);}  }
class C{  public TRANSACTION_UNAVAILABLE(String s){  this(s,0,CompletionStatus.COMPLETED_NO);}  }
class C{  public TabStop(float pos){  this(pos,ALIGN_LEFT,LEAD_NONE);}  }
class C{  public void processExpires(){  long timeNow=System.currentTimeMillis();  Session sessions[]=findSessions();  int expireHere=0;  if (log.isDebugEnabled())   log.debug("Start expire sessions " + getName() + " at "+ timeNow+ " sessioncount "+ sessions.length);  for (int i=0; i < sessions.length; i++) {    if (sessions[i] != null && !sessions[i].isValid()) {      expireHere++;    }  }  long timeEnd=System.currentTimeMillis();  if (log.isDebugEnabled())   log.debug("End expire sessions " + getName() + " processingTime "+ (timeEnd - timeNow)+ " expired sessions: "+ expireHere);  processingTime+=(timeEnd - timeNow);}  }
class C{  public MemberName(Class<?> defClass,String name,Class<?> type,byte refKind){  init(defClass,name,type,flagsMods(IS_FIELD,0,refKind));  initResolved(false);}  }
class C{  private Environment(){  throw ContractUtils.unreachable();}  }
class C{  public static void writeUINT16(int number,OutputStream out) throws IOException {  if (number < 0) {    throw new IllegalArgumentException("positive value expected.");  }  byte[] toWrite=new byte[2];  for (int i=0; i <= 8; i+=8) {    toWrite[i / 8]=(byte)((number >> i) & 0xFF);  }  out.write(toWrite);}  }
class C{  @DataProvider(name="csnData") public Object[][] createConstructorData(){  long time=0x12ABC;  return new Object[][]{{1,0,1,"0000000000000001000100000000"},{time,123,45,"0000000000012abc002d0000007b"},{time,123456789,32767,"0000000000012abc7fff075bcd15"},{time,123456789,32768,"0000000000012abc8000075bcd15"},{time,123456789,65000,"0000000000012abcfde8075bcd15"},{time,123,45678,"0000000000012abcb26e0000007b"}};}  }
class C{  public String toString(){  return ("WindowsDesktopSSOPrincipal: " + name);}  }
class C{  @BeforeClass public void disableLogging(){  TestCaseUtils.setDefaultLogLevel(Level.SEVERE);}  }
class C{  public void forceDataStructureChange(){  updateDataArray();  fireTableStructureChanged();  fireTableDataChanged();}  }
class C{  public Info createInfo(String value){  InformationField infoImpl=new InformationField();  try {    infoImpl.setValue(value);  } catch (  SdpException s) {    s.printStackTrace();  }  return infoImpl;}  }
class C{  public static String convertToHex(byte[] bytes){  ByteBuffer buf=new ByteBuffer();  for (  byte b : bytes) {    buf.appendHex(b);  }  return PdfEncodings.convertToString(buf.toByteArray(),null).toUpperCase();}  }
class C{  public final void signal(){  if (!isHeldExclusively())   throw new IllegalMonitorStateException();  Node first=firstWaiter;  if (first != null)   doSignal(first);}  }
class C{  public InternalSession fromToken(Token token){  String jsonBlob=blobUtils.getBlobAsString(token);  int index=findIndexOfValidField(jsonBlob);  String latestAccessTime=token.getAttribute(SessionTokenField.LATEST_ACCESS_TIME.getField());  if (latestAccessTime != null && index != -1) {    String fieldName=SessionTokenField.LATEST_ACCESS_TIME.getInternalSessionFieldName();    String jsonField=JSONSerialisation.jsonAttributeName(fieldName);    String addition=jsonField + latestAccessTime + ",";    jsonBlob=jsonBlob.substring(0,index) + addition + jsonBlob.substring(index,jsonBlob.length());  }  InternalSession session=serialisation.deserialise(jsonBlob,InternalSession.class);  if (session.getSessionHandle() == null) {    session.setSessionHandle(token.<String>getAttribute(SessionTokenField.SESSION_HANDLE.getField()));  }  return session;}  }
class C{  public CertificateRequest(HandshakeIODataStream in,int length) throws IOException {  int size=in.readUint8();  certificate_types=new byte[size];  Streams.readFully(in,certificate_types);  size=in.readUint16();  int totalPrincipalsLength=0;  int principalLength=0;  ArrayList<X500Principal> principals=new ArrayList<X500Principal>();  while (totalPrincipalsLength < size) {    principalLength=in.readUint16();    principals.add(new X500Principal(in));    totalPrincipalsLength+=2;    totalPrincipalsLength+=principalLength;  }  certificate_authorities=principals.toArray(new X500Principal[principals.size()]);  this.length=3 + certificate_types.length + totalPrincipalsLength;  if (this.length != length) {    fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect CertificateRequest");  }}  }
class C{  public void decompile(String root,String classPackage,String className){  start=System.currentTimeMillis();  log="";  source="";  Boolean displayNumber=null;  File workingDir=new File(root);  File zipFile=new File(System.getProperty("java.io.tmpdir"),className.replaceAll("(?i)\\.class",System.currentTimeMillis() + ".jar"));  String zipFileName=zipFile.getAbsolutePath();  try {    if (classPackage.length() == 0) {      DecompilerContext.initContext(new HashMap<String,Object>());      DecompilerContext.setCounterContainer(new CounterContainer());      StructClass structClass=new StructClass(FileUtil.getBytes(new File(root,className)),true,new LazyLoader(null));      structClass.releaseResources();      classPackage=structClass.qualifiedName.replace("/" + className.replaceAll("(?i)\\.class",""),"");    }    FileUtil.zipDir(workingDir,classPackage,zipFileName);    if (UIUtil.isDebugPerspective() || JavaDecompilerPlugin.getDefault().isDebugMode()) {      displayNumber=JavaDecompilerPlugin.getDefault().isDisplayLineNumber();      JavaDecompilerPlugin.getDefault().displayLineNumber(Boolean.TRUE);    }    source=mapper.decompile(zipFileName,(classPackage.length() > 0 ? (classPackage + "/") : "") + className);    if (!zipFile.delete()) {      zipFile.deleteOnExit();    }  } catch (  Exception e) {    JavaDecompilerPlugin.logError(e,e.getMessage());  }  if (displayNumber != null) {    JavaDecompilerPlugin.getDefault().displayLineNumber(displayNumber);  }  if (source != null) {    Pattern wp=Pattern.compile("/\\*.+?\\*/",Pattern.DOTALL);    Matcher m=wp.matcher(source);    while (m.find()) {      if (m.group().matches("/\\*\\s+\\d*\\s+\\*/"))       continue;      String group=m.group();      group=group.replace("/* ","\t");      group=group.replace(" */","");      group=group.replace(" * ","\t");      if (log.length() > 0)       log+="\n";      log+=group;      source=source.replace(m.group(),"");    }  }  time=System.currentTimeMillis() - start;}  }
class C{  @Override public String toString(){  return "RewriteRule " + patternString + " "+ substitutionString;}  }
class C{  public JEditorPane(String url) throws IOException {  this();  setPage(url);}  }
class C{  public final void testEqualsObject02(){  Certificate c1=new MyCertificate("TEST_TYPE",testEncoding);  Certificate c2=new MyCertificate("TEST_TYPE",testEncoding);  assertTrue(c1.equals(c2) && c2.equals(c1));}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documenttypegetdoctype.class,args);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodetextnodetype.class,args);}  }
class C{  @Override public void flush(){  Cell[] row=null;  if (!rows.isEmpty()) {    row=rows.get(rows.size() - 1);  }  document.add(this);  if (row != null) {    lastAddedRow=row;  }}  }
class C{  private static int intIntoCharArray(char[] buf,int cursor,int n){  while ((n & 0xffff0000) != 0) {    int q=(int)((0x51EB851FL * (n >>> 2)) >>> 35);    int r=n - 100 * q;    buf[--cursor]=ONES[r];    buf[--cursor]=TENS[r];    n=q;  }  while (n != 0) {    int q=(0xCCCD * n) >>> 19;    int r=n - 10 * q;    buf[--cursor]=DIGITS[r];    n=q;  }  return cursor;}  }
class C{  void releaseAckSem(){  if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {    logger.logDebug("releaseAckSem-enter]]" + this + " sem="+ this.ackSem+ " b2bua="+ this.isBackToBackUserAgent);    logger.logStackTrace();  }  if (this.isBackToBackUserAgent) {    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {      logger.logDebug("releaseAckSem]]" + this + " sem="+ this.ackSem);      logger.logStackTrace();    }    if (this.ackSem.availablePermits() == 0) {      this.ackSem.release();      if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {        logger.logDebug("releaseAckSem]]" + this + " sem="+ this.ackSem);      }    }  }}  }
class C{  private static char toHex(int nibble){  return hexDigit[(nibble & 0xF)];}  }
class C{  public boolean hasCorrelation(String linkQualifier){switch (type) {case correlationQuery:    return correlationQueries.get(linkQualifier) != null;case correlationScript:  return true;default :return false;}}  }
class C{  public TagStructureContext removeAllConnectionsToTags(){  for (  PdfStructElem structElem : connectedModelToStruct.values()) {    removeStructToModelConnection(structElem);  }  connectedModelToStruct.clear();  return this;}  }
class C{  public boolean isUserActive(String realm){  boolean active=false;  try {    AMIdentity user=IdUtils.getIdentity(ssoToken,userId);    boolean isUserActive=user.isActive();    String loginStatus=getUserAttributeValue(user,USER_SERVICE_LOGIN_STATUS,ACTIVE);    String lockout=getUserAttributeValue(user,USER_SERVICE_NS_LOCKOUT,STRING_FALSE);    if (!isUserActive || !loginStatus.equalsIgnoreCase(ACTIVE) || !lockout.equalsIgnoreCase(STRING_FALSE)) {      errorMsg=getLocalizedString("userNotActive.message");      writeLog("accountInactive.message",userId);    } else     if (isAccountExpired(user)) {      errorMsg=getLocalizedString("userAccountExpired.message");      writeLog("accountExpired.message",userId);    } else     if (isUserLockout(userId,realm)) {      String obj[]={userId};      informationMsg=getLocalizedString("lockoutMsg.message");      writeLog("accountLocked.message",userId);    } else {      active=true;    }  } catch (  SSOException e) {    debug.warning("PWResetUserValidationModelImpl.isUserActive",e);    errorMsg=getErrorString(e);  }catch (  IdRepoException e) {    debug.warning("PWResetUserValidationModelImpl.isUserActive",e);    errorMsg=getErrorString(e);  }  return active;}  }
class C{  public LogException(Throwable rootCause){  super(rootCause);}  }
class C{  public ZonkyApi authenticatedNonInvesting(final CommonFilter filter){  return this.obtain(ZonkyApi.class,ApiProvider.ZONKY_URL,filter);}  }
class C{  @Override public void removeManager(Manager manager){  if (manager instanceof ClusterManager) {    ClusterManager cmgr=(ClusterManager)manager;    fireLifecycleEvent(BEFORE_MANAGERUNREGISTER_EVENT,manager);    managers.remove(getManagerName(cmgr.getName(),manager));    cmgr.setCluster(null);    fireLifecycleEvent(AFTER_MANAGERUNREGISTER_EVENT,manager);  }}  }
class C{  public NameConstraints(GeneralSubtrees permittedSubtrees,GeneralSubtrees excludedSubtrees){  if (permittedSubtrees != null) {    List<GeneralSubtree> ps=permittedSubtrees.getSubtrees();    if (ps == null || ps.isEmpty()) {      throw new IllegalArgumentException("permittedSubtrees are empty");    }  }  if (excludedSubtrees != null) {    List<GeneralSubtree> es=excludedSubtrees.getSubtrees();    if (es == null || es.isEmpty()) {      throw new IllegalArgumentException("excludedSubtrees are empty");    }  }  this.permittedSubtrees=permittedSubtrees;  this.excludedSubtrees=excludedSubtrees;}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  submitCycle=true;  try {    handleButton1Request(getCachedPolicy());  } catch (  AMConsoleException e) {    redirectToStartURL();  }}  }
class C{  public LogoutResponseImpl(){  isMutable=true;}  }
class C{  public void write(String str,int off,int len) throws IOException {  se.write(str,off,len);}  }
class C{  @Override public void removeNotificationListener(NotificationListener listener) throws ListenerNotFoundException {  broadcaster.removeNotificationListener(listener);}  }
class C{  @Override protected Token assertTokens(SoapMessage message){  AssertionInfoMap aim=message.get(AssertionInfoMap.class);  Collection<AssertionInfo> ais=aim.getAssertionInfo(AMSTSConstants.AM_SESSION_TOKEN_ASSERTION_QNAME);  Token token=null;  for (  AssertionInfo ai : ais) {    token=(Token)ai.getAssertion();    ai.setAsserted(true);  }  ais=aim.getAssertionInfo(SP12Constants.SUPPORTING_TOKENS);  for (  AssertionInfo ai : ais) {    ai.setAsserted(true);  }  if (isTLSInUse(message)) {    ais=aim.getAssertionInfo(SP12Constants.SIGNED_SUPPORTING_TOKENS);    for (    AssertionInfo ai : ais) {      ai.setAsserted(true);    }    ais=aim.getAssertionInfo(SP12Constants.TRANSPORT_TOKEN);    for (    AssertionInfo ai : ais) {      ai.setAsserted(true);    }  }  return token;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.ResponseEnvelopeType createResponseEnvelopeType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.ResponseEnvelopeTypeImpl();}  }
class C{  public void shutdown(){  if (shutdown) {    return;  }  shutdown=true;  StaticUtils.close(listenSocket);  StaticUtils.close(session);  try {    join();  } catch (  InterruptedException ie) {  }}  }
class C{  public String toStringImpl(){  return new StringBuilder().append(networkNumber).toString();}  }
class C{  public final void removeAllElements(){  for (int i=0; i < m_firstFree; i++) {    m_map[i]=java.lang.Integer.MIN_VALUE;  }  m_firstFree=0;}  }
class C{  static MemberName generateCustomizedCode(LambdaForm form,MethodType invokerType){  InvokerBytecodeGenerator g=new InvokerBytecodeGenerator("MH",form,invokerType);  return g.loadMethod(g.generateCustomizedCodeBytes());}  }
class C{  private String invalidBaseDNValue(final String dn,final LocalizableMessage errorMsg,final Set<LocalizableMessage> errors){  errors.add(errorMsg);  setPrimaryInvalid(lDirectoryBaseDN);  return dn;}  }
class C{  protected void paint(SynthContext context,Graphics g){}  }
class C{  public TRANSACTION_REQUIRED(int minor,CompletionStatus completed){  this("",minor,completed);}  }
class C{  public static ArgumentException missingMandatoryNonInteractiveArgument(Argument arg){  LocalizableMessage msg=ERR_DSCFG_ERROR_MISSING_NON_INTERACTIVE_ARG.get(arg.getLongIdentifier());  return new ArgumentException(msg);}  }
class C{  public boolean shouldStripWhiteSpace(org.apache.xpath.XPathContext support,org.w3c.dom.Element targetElement) throws TransformerException {  StylesheetRoot sroot=this.getStylesheetRoot();  return (null != sroot) ? sroot.shouldStripWhiteSpace(support,targetElement) : false;}  }
class C{  public void modifyEntity(String ssoToken,String entityName,String entityType,String entityLocation,Map attributes) throws EntityException, SSOException, RemoteException {  initializeObject(ssoToken,entityLocation);  AMEntity amEntity=getAMEntity(ssoToken,entityName,entityType,entityLocation);  try {    if (amEntity != null) {      amEntity.setAttributes(attributes);      amEntity.store();    }  } catch (  AMException amex) {    EntityUtils.debug.error("EntityObjectImpl.modifyEntity() : " + "Modify Entity Failed. " + amex);    throw EntityUtils.convertException(amex);  }}  }
class C{  public boolean doFedletSLO(HttpServletRequest request,HttpServletResponse response,LogoutRequest logoutReq,String hostedEntityID,String idpEntityID,List siList,String nameIDValue,String binding) throws SAML2Exception {  boolean status=true;  String method="DefaultFedletAdapter:doFedletSLO:";  try {    if (logoutUrl == null) {      BaseConfigType spConfig=SAML2Utils.getSAML2MetaManager().getSPSSOConfig("/",hostedEntityID);      List appLogoutURL=(List)SAML2MetaUtils.getAttributes(spConfig).get(SAML2Constants.APP_LOGOUT_URL);      if ((appLogoutURL != null) && !appLogoutURL.isEmpty()) {        logoutUrl=(String)appLogoutURL.get(0);      }    }    if (logoutUrl == null) {      String deployuri=request.getRequestURI();      int slashLoc=deployuri.indexOf("/",1);      if (slashLoc != -1) {        deployuri=deployuri.substring(0,slashLoc);      }      if (deployuri != null) {        String url=request.getRequestURL().toString();        int loc=url.indexOf(deployuri + "/");        if (loc != -1) {          logoutUrl=url.substring(0,loc + deployuri.length()) + "/logout";        }      }    }    if (logoutUrl == null) {      return status;    }    URL url=new URL(logoutUrl);    HttpURLConnection conn=HttpURLConnectionManager.getConnection(url);    conn.setDoOutput(true);    conn.setRequestMethod("POST");    conn.setFollowRedirects(false);    conn.setInstanceFollowRedirects(false);    String strCookies=SAML2Utils.getCookiesString(request);    if (strCookies != null) {      if (SAML2Utils.debug.messageEnabled()) {        SAML2Utils.debug.message(method + "Sending cookies : " + strCookies);      }      conn.setRequestProperty("Cookie",strCookies);    }    conn.setRequestProperty("Content-Type","application/x-www-form-urlencoded");    conn.setRequestProperty("IDP",URLEncDec.encode(idpEntityID));    conn.setRequestProperty("SP",URLEncDec.encode(hostedEntityID));    conn.setRequestProperty("NameIDValue",URLEncDec.encode(nameIDValue));    if (siList != null && !siList.isEmpty()) {      Iterator iter=siList.iterator();      StringBuffer siValue=new StringBuffer();      siValue.append((String)iter.next());      while (iter.hasNext()) {        siValue.append(",").append((String)iter.next());      }      conn.setRequestProperty("SessionIndex",URLEncDec.encode(siValue.toString()));    }    conn.setRequestProperty("Binding",binding);    OutputStream outputStream=conn.getOutputStream();    outputStream.write("".getBytes());    outputStream.flush();    outputStream.close();    if (conn.getResponseCode() == HttpURLConnection.HTTP_OK) {      if (SAML2Utils.debug.messageEnabled()) {        SAML2Utils.debug.message(method + "Response code OK");      }      status=true;    } else {      SAML2Utils.debug.error(method + "Response code NOT OK: " + conn.getResponseCode());      status=false;    }  } catch (  Exception e) {    status=false;  }  return status;}  }
class C{  public boolean isLocallyInitiated(){  boolean streamIsClient=(id % 2 == 1);  return connection.client == streamIsClient;}  }
class C{  public ErrorMsg(int destination,LocalizableMessage details){  this(-2,destination,details);}  }
class C{  public ExifTag buildTag(int tagId,Object val){  int ifdId=getTrueIfd(tagId);  return buildTag(tagId,ifdId,val);}  }
class C{  public AuthenticationEnforcer exceptActions(String... actions){  exceptActions.addAll(Arrays.asList(actions));  return this;}  }
class C{  private static URI cookieUri(URI uri,HttpCookie cookie){  URI cookieUri=uri;  if (cookie.getDomain() != null) {    String domain=cookie.getDomain();    if (domain.charAt(0) == '.') {      domain=domain.substring(1);    }    try {      cookieUri=new URI(uri.getScheme() == null ? "http" : uri.getScheme(),domain,cookie.getPath() == null ? "/" : cookie.getPath(),null);    } catch (    URISyntaxException e) {      Log.w(TAG,e);    }  }  return cookieUri;}  }
class C{  private void waitForClockUpdate() throws InterruptedException {  long startTime=System.currentTimeMillis();  int waitTime=1;  do {    Thread.sleep(waitTime);    waitTime*=10;  } while (System.currentTimeMillis() == startTime);}  }
class C{  public StandardScriptEvaluator(StandardScriptEngineManager scriptEngineManager){  Reject.ifNull(scriptEngineManager);  this.scriptEngineManager=scriptEngineManager;}  }
class C{  public static ComponentUI createUI(JComponent a){  ComponentUI mui=new MultiComboBoxUI();  return MultiLookAndFeel.createUIs(mui,((MultiComboBoxUI)mui).uis,a);}  }
class C{  public static File[] convertFileCollectionToFileArray(Collection<File> files){  return files.toArray(new File[files.size()]);}  }
class C{  public Marker backTo(int idx) throws AMConsoleException {  int size=trail.size();  if (idx >= size) {    throw new AMConsoleException("cannot be discard items in page trail");  }  for (int i=size - 1; i > idx; --i) {    trail.remove(i);  }  return (Marker)trail.get(idx);}  }
class C{  private boolean split_wtrace_other(BrdTracep found_trace,Collection<BrdTracep> split_pieces,ArrayList<PlaLineInt> intersecting_lines,AwtreeFindEntry found_entry){  if (found_trace == this)   return false;  boolean have_trace_split=false;  for (  PlaLineInt inter_line : intersecting_lines) {    if (have_trace_split)     break;    int line_no=found_entry.shape_index_in_object + 1;    ArrayList<BrdTracep> curr_split_pieces=found_trace.split_with_end_line(line_no,inter_line);    if (curr_split_pieces.size() < 1)     continue;    have_trace_split=true;    split_pieces.addAll(curr_split_pieces);  }  if (!have_trace_split)   split_pieces.add(found_trace);  return have_trace_split;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.LengthType createLengthType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.LengthTypeImpl();}  }
class C{  public boolean isLocalSite(SessionID sid){  return isLocalSite(sid.getSessionServerID());}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap notations;  Notation notationNode;  int nodeType;  doc=(Document)load("staff",false);  docType=doc.getDoctype();  assertNotNull("docTypeNotNull",docType);  notations=docType.getNotations();  assertNotNull("notationsNotNull",notations);  notationNode=(Notation)notations.getNamedItem("notation1");  assertNotNull("notationNotNull",notationNode);  nodeType=(int)notationNode.getNodeType();  assertEquals("nodeNotationNodeTypeAssert1",12,nodeType);}  }
class C{  public SimpleLabelProvider(Class<T> type){  getTextMethod=findAnyMethod(type,"getText","getName","toString");  getIconMethod=findAnyMethod(type,"getIcon");}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodelistreturnfirstitem.class,args);}  }
class C{  public String toXMLString(boolean includeNS,boolean declareNS) throws FSMsgException {  return toXMLString(includeNS,declareNS,false);}  }
class C{  public void detach(){  throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_DETACH_NOT_SUPPORTED_XRTREEFRAGSELECTWRAPPER,null));}  }
class C{  public boolean isPowered(){  return (getData() & 0x8) == 0x8;}  }
class C{  public boolean isTrustAll(){  return state.trustAll;}  }
class C{  public static Set<String> search(SSOToken token,String dn,String filter,int numOfEntries,int timeLimit,boolean sortResults,boolean ascendingOrder) throws SMSException {  try {    return smsObject.search(token,dn,filter,numOfEntries,timeLimit,sortResults,ascendingOrder);  } catch (  SSOException ssoe) {    debug.error("SMSEntry: Search ERROR: " + filter,ssoe);    throw new SMSException(bundle.getString("sms-error-in-searching"),ssoe,"sms-error-in-searching");  }}  }
class C{  private void insertTimeStamp(Intent intent){  Date date=new Date(System.currentTimeMillis());  OmniDate omniDate=new OmniDate(date);  intent.putExtra(Event.ATTRIBUTE_TIME,omniDate.toString());}  }
class C{  public String generateName(final IntUnaryOperator randomInRange,final int length,int middlesToUse){  if (length == 0) {    return "LENGTH_WAS_ZERO";  }  if (middles == null) {    middlesToUse=0;  }  if (middlesToUse < 0) {    middlesToUse=0;  }  final int beginningIndex=randomInRange.applyAsInt(beginnings.length);  final int endingIndex=randomInRange.applyAsInt(endings.length);  final StringBuilder sb=new StringBuilder();  sb.append(beginnings[beginningIndex]);  for (int i=0; i < middlesToUse; i++) {    final int middleIndex=randomInRange.applyAsInt(middles.length);    sb.append(middles[middleIndex]);  }  sb.append(endings[endingIndex]);  if (length >= 0 && length <= sb.length()) {    return sb.substring(0,length);  } else {    return sb.toString();  }}  }
class C{  public static void applyPluginArguments(List<String> args,Config.Builder configBuilder){  Map<String,PluginArgument> pluginArguments=configBuilder.fetchPluginArguments();  Iterator<String> iter=args.iterator();  while (iter.hasNext()) {    String arg=iter.next();    if (!arg.startsWith("-rvm") && arg.startsWith("-")) {      String argName=arg.substring(1);      if (argName.contains("=")) {        argName=argName.substring(0,argName.indexOf('='));      }      PluginArgument pluginArg=pluginArguments.get(argName);      if (pluginArg != null) {        if (configBuilder != null) {          configBuilder.addPluginArgument(arg.substring(1));          iter.remove();        }      }    }  }}  }
class C{  protected void isPIWellFormed(ProcessingInstruction node){  if (!isXMLName(node.getNodeName(),fIsXMLVersion11)) {    String msg=Utils.messages.createMessage(MsgKey.ER_WF_INVALID_CHARACTER_IN_NODE_NAME,new Object[]{"ProcessingInstruction",node.getTarget()});    if (fErrorHandler != null) {      fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_INVALID_CHARACTER_IN_NODE_NAME,null,null,null));    }  }  Character invalidChar=isWFXMLChar(node.getData());  if (invalidChar != null) {    String msg=Utils.messages.createMessage(MsgKey.ER_WF_INVALID_CHARACTER_IN_PI,new Object[]{Integer.toHexString(Character.getNumericValue(invalidChar.charValue()))});    if (fErrorHandler != null) {      fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_INVALID_CHARACTER,null,null,null));    }  }}  }
class C{  public String toXMLString() throws SAML2Exception {  return toXMLString(true,false);}  }
class C{  protected void addServiced(String name) throws Exception {  String[] params={name};  String[] signature={"java.lang.String"};  mBeanServer.invoke(oname,"addServiced",params,signature);}  }
class C{  private boolean addViewItem(int index,boolean first){  View view=getItemView(index);  if (view != null) {    if (first) {      itemsLayout.addView(view,0);    } else {      itemsLayout.addView(view);    }    return true;  }  return false;}  }
class C{  @Override public void addChangeListener(ConfigurationChangeListener<ExternalChangelogDomainCfg> listener){}  }
class C{  public boolean initializeAuth(ServletContext servletCtx){  AuthD authD=AuthD.getAuth();  if (authD == null) {    return false;  } else {    authD.setServletContext(servletCtx);  }  if (Debug.getInstance("amLoginLogoutMapping").messageEnabled()) {    Debug.getInstance("amLoginLogoutMapping").message("LoginLogoutMapping.initializeAuth: " + "Initializing AdminTokenAction to use AuthN");  }  com.sun.identity.security.AdminTokenAction.getInstance().authenticationInitialized();  return true;}  }
class C{  RuleBasedCollationKey(String source,String key){  super(source);  this.key=key;}  }
class C{  public static Boolean isStreamingQuoteStartAtBootup(){  return QUOTE_STREAMING_START_AT_BOOTUP;}  }
class C{  public String toString(String enc) throws UnsupportedEncodingException {  return new String(buf,0,count,enc);}  }
class C{  public ShapeTileOctagon(PlaPointFloat a_point){  PlaPointFloat fp=a_point;  int lx=(int)Math.floor(fp.v_x);  int ly=(int)Math.floor(fp.v_y);  int rx=(int)Math.ceil(fp.v_x);  int uy=(int)Math.ceil(fp.v_y);  double tmp=fp.v_x - fp.v_y;  int ulx=(int)Math.floor(tmp);  int lrx=(int)Math.ceil(tmp);  tmp=fp.v_x + fp.v_y;  int llx=(int)Math.floor(tmp);  int urx=(int)Math.ceil(tmp);  oct_lx=lx;  oct_ly=ly;  oct_rx=rx;  oct_uy=uy;  oct_ulx=ulx;  oct_lrx=lrx;  oct_llx=llx;  oct_urx=urx;}  }
class C{  public SOAPMessage onMessage(SOAPMessage message,HttpServletRequest request,HttpServletResponse response,String idpEntityID,String realm){  SAML2Utils.debug.message("IDPSingleLogoutServiceSOAP.onMessage: init");  LogoutRequest logoutReq=null;  try {    Element reqElem=SOAPCommunicator.getInstance().getSamlpElement(message,"LogoutRequest");    logoutReq=ProtocolFactory.getInstance().createLogoutRequest(reqElem);  } catch (  SAML2Exception se) {    SAML2Utils.debug.error("IDPSingleLogoutServiceSOAP.onMessage: " + "unable to get LogoutRequest from message",se);    return SOAPCommunicator.getInstance().createSOAPFault(SAML2Constants.CLIENT_FAULT,"errorLogoutRequest",se.getMessage());  }  if (logoutReq == null) {    SAML2Utils.debug.error("IDPSingleLogoutServiceSOAP.onMessage: " + "LogoutRequest is null");    return SOAPCommunicator.getInstance().createSOAPFault(SAML2Constants.CLIENT_FAULT,"nullLogoutRequest",null);  }  LogoutResponse loRes=null;  try {    loRes=IDPSingleLogout.processLogoutRequest(logoutReq,request,response,response.getWriter(),SAML2Constants.SOAP,null,idpEntityID,realm,false);    LogoutUtil.signSLOResponse(loRes,realm,idpEntityID,SAML2Constants.IDP_ROLE,logoutReq.getIssuer().getValue());  } catch (  IOException|SAML2Exception e) {    SAML2Utils.debug.error("IDPSingleLogoutServiceSOAP.onMessage;",e);    return SOAPCommunicator.getInstance().createSOAPFault(SAML2Constants.SERVER_FAULT,"errorLogoutResponse",e.getMessage());  }  if (loRes == null) {    SAML2Utils.debug.error("IDPSingleLogoutServiceSOAP.onMessage: " + "LogoutResponse is null");    return SOAPCommunicator.getInstance().createSOAPFault(SAML2Constants.SERVER_FAULT,"errorLogoutResponse",null);  }  SOAPMessage msg=null;  try {    msg=SOAPCommunicator.getInstance().createSOAPMessage(loRes.toXMLString(true,true),false);  } catch (  SAML2Exception se) {    SAML2Utils.debug.error("IDPSingleLogoutServiceSOAP.onMessage: " + "Unable to create SOAP message:",se);    return SOAPCommunicator.getInstance().createSOAPFault(SAML2Constants.SERVER_FAULT,"errorLogoutResponseSOAP",se.getMessage());  }catch (  SOAPException ex) {    SAML2Utils.debug.error("IDPSingleLogoutServiceSOAP.onMessage: " + "Unable to create SOAP message:",ex);    return SOAPCommunicator.getInstance().createSOAPFault(SAML2Constants.SERVER_FAULT,"errorLogoutResponseSOAP",ex.getMessage());  }  return msg;}  }
class C{  public void testCertPathValidator05() throws NoSuchAlgorithmException {  if (!PKIXSupport) {    fail(NotSupportMsg);    return;  }  for (int t=0; t < validValues.length; t++) {    for (int i=1; i < invalidValues.length; i++) {      try {        CertPathValidator.getInstance(validValues[t],invalidValues[i]);        fail("NoSuchProviderException must be thrown");      } catch (      NoSuchProviderException e1) {      }    }  }}  }
class C{  @Inject public ValidationServerResource(OAuth2RequestFactory requestFactory,TokenInfoService tokenInfoService,ExceptionHandler exceptionHandler,JacksonRepresentationFactory jacksonRepresentationFactory){  this.requestFactory=requestFactory;  this.tokenInfoService=tokenInfoService;  this.exceptionHandler=exceptionHandler;  this.jacksonRepresentationFactory=jacksonRepresentationFactory;}  }
class C{  public static MethodType methodType(Class<?> rtype,Class<?>[] ptypes){  return makeImpl(rtype,ptypes,false);}  }
class C{  public boolean isInCircleOfTrust(String realm,String name,String protocolType,String entityId){  Set tProviders=new HashSet();  try {    CircleOfTrustDescriptor cotd=getCircleOfTrust(realm,name);    Set pSet=cotd.getTrustedProviders(protocolType);    return ((pSet != null) && !pSet.isEmpty() && pSet.contains(entityId));  } catch (  Exception me) {    debug.error("COTManager.isInCircleOfTrust",me);    String[] data={me.getMessage(),name,entityId,realm};    LogUtil.error(Level.INFO,LogUtil.CONFIG_ERROR_RETREIVE_COT,data);  }  return false;}  }
class C{  @Inject public CTSPersistentStoreImpl(CoreTokenAdapter adapter,@Named(CoreTokenConstants.CTS_DEBUG) Debug debug){  this.adapter=adapter;  this.debug=debug;}  }
class C{  public DataBufferDouble(int size){  super(STABLE,TYPE_DOUBLE,size);  data=new double[size];  bankdata=new double[1][];  bankdata[0]=data;}  }
class C{  protected void handleEndTag(TagElement tag){}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder("User username=\"");  sb.append(RequestUtil.filter(username));  sb.append("\"");  if (fullName != null) {    sb.append(", fullName=\"");    sb.append(RequestUtil.filter(fullName));    sb.append("\"");  }synchronized (groups) {    if (groups.size() > 0) {      sb.append(", groups=\"");      int n=0;      Iterator<Group> values=groups.iterator();      while (values.hasNext()) {        if (n > 0) {          sb.append(',');        }        n++;        sb.append(RequestUtil.filter(values.next().getGroupname()));      }      sb.append("\"");    }  }synchronized (roles) {    if (roles.size() > 0) {      sb.append(", roles=\"");      int n=0;      Iterator<Role> values=roles.iterator();      while (values.hasNext()) {        if (n > 0) {          sb.append(',');        }        n++;        sb.append(RequestUtil.filter(values.next().getRolename()));      }      sb.append("\"");    }  }  return (sb.toString());}  }
class C{  public static int supplemental(char h,char l){  return (h - 0xD800) * 0x400 + (l - 0xDC00) + 0x10000;}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  final XObject obj=m_arg0.execute(xctxt);  final double val=obj.num();  if (val >= -0.5 && val < 0)   return new XNumber(-0.0);  if (val == 0.0)   return new XNumber(val);  return new XNumber(java.lang.Math.floor(val + 0.5));}  }
class C{  private boolean isForwarding(){  return (_depth > 0);}  }
class C{  public final boolean isQueued(Thread thread){  if (thread == null)   throw new NullPointerException();  for (Node p=tail; p != null; p=p.prev)   if (p.thread == thread)   return true;  return false;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  NodeList elementList;  Attr attribute;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagName("employee");  element=(Element)elementList.item(0);  attribute=element.getAttributeNode("xmlns");{    boolean success=false;    try {      attribute.setPrefix("xml");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("throw_NAMESPACE_ERR",success);  }}  }
class C{  private ObjID(long objNum,UID space){  this.objNum=objNum;  this.space=space;}  }
class C{  private Map mapNameToDisplayName(Set names){  Map map=new HashMap(names.size() * 2);  AMViewConfig vConfig=AMViewConfig.getInstance();  for (Iterator iter=names.iterator(); iter.hasNext(); ) {    String name=(String)iter.next();    if (vConfig.isServiceVisible(name)) {      String displayName=getLocalizedServiceName(name);      if (!name.equals(displayName)) {        map.put(name,displayName);      }    }  }  return map;}  }
class C{  public OrderService initializePersistence(Handler<AsyncResult<Void>> resultHandler){  delegate.initializePersistence(resultHandler);  return this;}  }
class C{  public void openFileChooser(ValueCallback<Uri> uploadMsg,String acceptType,String capture){  openFileChooser(uploadMsg,acceptType);}  }
class C{  public AgentGroupAddViewBean(){  super("AgentGroupAdd");  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);}  }
class C{  public int hashCode(){  int result=17;  if (isDestroyed()) {    return result;  }  result=37 * result + Arrays.hashCode(getEncoded());  result=37 * result + getKeyType();  if (principal != null) {    result=37 * result + principal.hashCode();  }  return result * 37 + versionNum;}  }
class C{  public Matrix(float tx,float ty){  vals[I31]=tx;  vals[I32]=ty;}  }
