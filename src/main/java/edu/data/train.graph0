class C{  protected void tearDown(){}  }
class C{  @KnownFailure("Fixed on DonutBurger, Wrong Exception thrown") public void test_unwrap_ByteBuffer$ByteBuffer_02(){  String host="new host";  int port=8080;  ByteBuffer bbs=ByteBuffer.allocate(10);  ByteBuffer bbR=ByteBuffer.allocate(100).asReadOnlyBuffer();  ByteBuffer[] bbA={bbR,ByteBuffer.allocate(10),ByteBuffer.allocate(100)};  SSLEngine sse=getEngine(host,port);  sse.setUseClientMode(true);  try {    sse.unwrap(bbs,bbA);    fail("ReadOnlyBufferException wasn't thrown");  } catch (  ReadOnlyBufferException iobe) {  }catch (  Exception e) {    fail(e + " was thrown instead of ReadOnlyBufferException");  }}  }
class C{  public static CstFloat make(int bits){  return new CstFloat(bits);}  }
class C{  public long size(){  long size=0;  if (parsedGeneExpressions == null)   parseGenes();  for (int i=0; i < parsedGeneExpressions.length; i++)   size+=parsedGeneExpressions[i].numberOfNodes();  return size;}  }
class C{  public void increment(View view){  if (quantity == 100) {    return;  }  quantity=quantity + 1;  displayQuantity(quantity);}  }
class C{  public void trimToSize(){  ++modCount;  if (size < elementData.length) {    elementData=Arrays.copyOf(elementData,size);  }}  }
class C{  public SyncValueResponseMessage(SyncValueResponseMessage other){  __isset_bitfield=other.__isset_bitfield;  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  this.count=other.count;}  }
class C{  public void clearParsers(){  if (parserManager != null) {    parserManager.clearParsers();  }}  }
class C{  @Override public void run(){  while (doWork) {    deliverLock();    while (tomLayer.isRetrievingState()) {      System.out.println("-- Retrieving State");      canDeliver.awaitUninterruptibly();      if (tomLayer.getLastExec() == -1)       System.out.println("-- Ready to process operations");    }    try {      ArrayList<Decision> decisions=new ArrayList<Decision>();      decidedLock.lock();      if (decided.isEmpty()) {        notEmptyQueue.await();      }      decided.drainTo(decisions);      decidedLock.unlock();      if (!doWork)       break;      if (decisions.size() > 0) {        TOMMessage[][] requests=new TOMMessage[decisions.size()][];        int[] consensusIds=new int[requests.length];        int[] leadersIds=new int[requests.length];        int[] regenciesIds=new int[requests.length];        CertifiedDecision[] cDecs;        cDecs=new CertifiedDecision[requests.length];        int count=0;        for (        Decision d : decisions) {          requests[count]=extractMessagesFromDecision(d);          consensusIds[count]=d.getConsensusId();          leadersIds[count]=d.getLeader();          regenciesIds[count]=d.getRegency();          CertifiedDecision cDec=new CertifiedDecision(this.controller.getStaticConf().getProcessId(),d.getConsensusId(),d.getValue(),d.getDecisionEpoch().proof);          cDecs[count]=cDec;          if (requests[count][0].equals(d.firstMessageProposed)) {            long time=requests[count][0].timestamp;            long seed=requests[count][0].seed;            int numOfNonces=requests[count][0].numOfNonces;            requests[count][0]=d.firstMessageProposed;            requests[count][0].timestamp=time;            requests[count][0].seed=seed;            requests[count][0].numOfNonces=numOfNonces;          }          count++;        }        Decision lastDecision=decisions.get(decisions.size() - 1);        if (requests != null && requests.length > 0) {          deliverMessages(consensusIds,regenciesIds,leadersIds,cDecs,requests);          if (controller.hasUpdates()) {            processReconfigMessages(lastDecision.getConsensusId());            tomLayer.setLastExec(lastDecision.getConsensusId());            tomLayer.setInExec(-1);          }        }        int cid=lastDecision.getConsensusId();        if (cid > 2) {          int stableConsensus=cid - 3;          tomLayer.execManager.removeConsensus(stableConsensus);        }      }    } catch (    Exception e) {      e.printStackTrace(System.err);    }    deliverUnlock();  }  java.util.logging.Logger.getLogger(DeliveryThread.class.getName()).log(Level.INFO,"DeliveryThread stopped.");}  }
class C{  private byte[] calculateUValue(byte[] generalKey,byte[] firstDocIdValue,int revision) throws GeneralSecurityException, EncryptionUnsupportedByProductException {  if (revision == 2) {    Cipher rc4=createRC4Cipher();    SecretKey key=createRC4Key(generalKey);    initEncryption(rc4,key);    return crypt(rc4,PW_PADDING);  } else   if (revision >= 3) {    MessageDigest md5=createMD5Digest();    md5.update(PW_PADDING);    if (firstDocIdValue != null) {      md5.update(firstDocIdValue);    }    final byte[] hash=md5.digest();    Cipher rc4=createRC4Cipher();    SecretKey key=createRC4Key(generalKey);    initEncryption(rc4,key);    final byte[] v=crypt(rc4,hash);    rc4shuffle(v,generalKey,rc4);    assert v.length == 16;    final byte[] entryValue=new byte[32];    System.arraycopy(v,0,entryValue,0,v.length);    System.arraycopy(v,0,entryValue,16,v.length);    return entryValue;  } else {    throw new EncryptionUnsupportedByProductException("Unsupported standard security handler revision " + revision);  }}  }
class C{  private void assign(HashMap<String,DBIDs> labelMap,String label,DBIDRef id){  if (labelMap.containsKey(label)) {    DBIDs exist=labelMap.get(label);    if (exist instanceof DBID) {      ModifiableDBIDs n=DBIDUtil.newHashSet();      n.add((DBID)exist);      n.add(id);      labelMap.put(label,n);    } else {      assert (exist instanceof HashSetModifiableDBIDs);      assert (exist.size() > 1);      ((ModifiableDBIDs)exist).add(id);    }  } else {    labelMap.put(label,DBIDUtil.deref(id));  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public CDeleteAction(final BackEndDebuggerProvider debuggerProvider,final int[] rows){  super(rows.length == 1 ? "Remove Breakpoint" : "Remove Breakpoints");  m_debuggerProvider=Preconditions.checkNotNull(debuggerProvider,"IE01344: Debugger provider argument can not be null");  m_rows=rows.clone();}  }
class C{  public Yaml(BaseConstructor constructor,Representer representer,DumperOptions dumperOptions,Resolver resolver){  if (!constructor.isExplicitPropertyUtils()) {    constructor.setPropertyUtils(representer.getPropertyUtils());  } else   if (!representer.isExplicitPropertyUtils()) {    representer.setPropertyUtils(constructor.getPropertyUtils());  }  this.constructor=constructor;  representer.setDefaultFlowStyle(dumperOptions.getDefaultFlowStyle());  representer.setDefaultScalarStyle(dumperOptions.getDefaultScalarStyle());  representer.getPropertyUtils().setAllowReadOnlyProperties(dumperOptions.isAllowReadOnlyProperties());  representer.setTimeZone(dumperOptions.getTimeZone());  this.representer=representer;  this.dumperOptions=dumperOptions;  this.resolver=resolver;  this.name="Yaml:" + System.identityHashCode(this);}  }
class C{  public void testHitEndAfterFind(){  hitEndTest(true,"#01.0","r((ege)|(geg))x","regexx",false);  hitEndTest(true,"#01.1","r((ege)|(geg))x","regex",false);  hitEndTest(true,"#01.2","r((ege)|(geg))x","rege",true);  hitEndTest(true,"#01.2","r((ege)|(geg))x","xregexx",false);  hitEndTest(true,"#02.0","regex","rexreger",true);  hitEndTest(true,"#02.1","regex","raxregexr",false);  String floatRegex=getHexFloatRegex();  hitEndTest(true,"#03.0",floatRegex,Double.toHexString(-1.234d),true);  hitEndTest(true,"#03.1",floatRegex,"1 ABC" + Double.toHexString(Double.NaN) + "buhuhu",false);  hitEndTest(true,"#03.2",floatRegex,Double.toHexString(-0.0) + "--",false);  hitEndTest(true,"#03.3",floatRegex,"--" + Double.toHexString(Double.MIN_VALUE) + "--",false);  hitEndTest(true,"#04.0","(\\d+) fish (\\d+) fish (\\w+) fish (\\d+)","1 fish 2 fish red fish 5",true);  hitEndTest(true,"#04.1","(\\d+) fish (\\d+) fish (\\w+) fish (\\d+)","----1 fish 2 fish red fish 5----",false);}  }
class C{  public void add(Individual individual){  individuals.add(individual);}  }
class C{  public boolean removeSession(IgniteUuid sesId){  GridTaskSessionImpl ses=sesMap.get(sesId);  assert ses == null || ses.isFullSupport();  if (ses != null && ses.release()) {    sesMap.remove(sesId,ses);    return true;  }  return false;}  }
class C{  public static Bitmap loadBitmapOptimized(Uri uri,Context context,int limit) throws ImageLoadException {  return loadBitmapOptimized(new UriSource(uri,context){  },limit);}  }
class C{  protected BasePeriod(long duration){  super();  iType=PeriodType.standard();  int[] values=ISOChronology.getInstanceUTC().get(DUMMY_PERIOD,duration);  iValues=new int[8];  System.arraycopy(values,0,iValues,4,4);}  }
class C{  public FlatBufferBuilder(){  this(1024);}  }
class C{  public PbrpcConnectionException(String arg0,Throwable arg1){  super(arg0,arg1);}  }
class C{  public void uninstallUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);  }}  }
class C{  public static void shutdown(){  if (instance != null) {    instance.save();  }}  }
class C{  public boolean GE(Word w2){  return value.GE(w2.value);}  }
class C{  public static UnionCoder of(List<Coder<?>> elementCoders){  return new UnionCoder(elementCoders);}  }
class C{  public void testFileDeletion() throws Exception {  File testDir=createTestDir("testFileDeletion");  String prefix1="testFileDeletion1";  File[] files1=createFiles(testDir,prefix1,5);  String prefix2="testFileDeletion2";  File[] files2=createFiles(testDir,prefix2,5);  FileCommands.deleteFiles(files1,true);  assertNotExists(files1);  FileCommands.deleteFiles(files2,false);  Thread.sleep(1000);  assertNotExists(files2);}  }
class C{  public boolean isOnClasspath(String classpath){  return this.classpath.equals(classpath);}  }
class C{  protected void source(String ceylon){  String providerPreSrc="provider/" + ceylon + "_pre.ceylon";  String providerPostSrc="provider/" + ceylon + "_post.ceylon";  String clientSrc="client/" + ceylon + "_client.ceylon";  compile(providerPreSrc,providerModuleSrc,providerPackageSrc);  compile(clientSrc,clientModuleSrc);  compile(providerPostSrc,providerModuleSrc,providerPackageSrc);  compile(clientSrc,clientModuleSrc);}  }
class C{  public PerformanceMonitor(){  initComponents();  if (Display.getInstance().getCurrent() != null) {    refreshFrameActionPerformed(null);  }  resultData.setModel(new Model());  performanceLog.setLineWrap(true);  resultData.setRowSorter(new TableRowSorter<Model>((Model)resultData.getModel()));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:15.190 -0400",hash_original_method="F262A3A18BABECF7EC492736953EAF6E",hash_generated_method="94A4545C167C029CC38AACEACF2087E9") private void unparkSuccessor(Node node){  int ws=node.waitStatus;  if (ws < 0)   compareAndSetWaitStatus(node,ws,0);  Node s=node.next;  if (s == null || s.waitStatus > 0) {    s=null;    for (Node t=tail; t != null && t != node; t=t.prev)     if (t.waitStatus <= 0)     s=t;  }  if (s != null)   LockSupport.unpark(s.thread);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:44.364 -0500",hash_original_method="EA3734ADDEB20313C9CAB09B48812C54",hash_generated_method="4858AFE909DDE63867ACB561D5449C13") static public void assertFalse(String message,boolean condition){  assertTrue(message,!condition);}  }
class C{  @Override protected void initData(){  Intent intent=new Intent(this,PushMessageService.class);  this.startService(intent);  this.bindService(intent,this.connection,Context.BIND_AUTO_CREATE);}  }
class C{  public static Date parseDateDay(String dateString) throws ParseException {  return getSimplDateFormat(DF_DEF).parse(dateString);}  }
class C{  private boolean doesStoragePortExistsInVArray(StoragePort umfsStoragePort,VirtualArray virtualArray){  List<URI> virtualArrayPorts=returnAllPortsInVArray(virtualArray.getId());  if (virtualArrayPorts.contains(umfsStoragePort.getId())) {    return true;  }  return false;}  }
class C{  public SpringVaadinServletService(VaadinServlet servlet,DeploymentConfiguration deploymentConfiguration,String serviceUrl) throws ServiceException {  super(servlet,deploymentConfiguration);  this.serviceUrl=serviceUrl;}  }
class C{  private static List<TranslationResult> translateChildrenOfNode(final ITranslationEnvironment environment,final IOperandTreeNode expression,OperandSize size,final boolean loadOperand,Long baseOffset) throws InternalTranslationException {  final List<TranslationResult> partialResults=new ArrayList<>();  final List<? extends IOperandTreeNode> children=expression.getChildren();  Collections.sort(children,comparator);  for (  final IOperandTreeNode child : children) {    final TranslationResult nextResult=loadOperand(environment,baseOffset,child,isSegmentExpression(expression.getValue()) ? expression : null,size,loadOperand);    partialResults.add(nextResult);    baseOffset+=nextResult.getInstructions().size();  }  return partialResults;}  }
class C{  public void removeShutdownLatch(final CountDownLatch latch){  removeShutdownLatch(latch,false);}  }
class C{  public Version(){  this(CommonReflection.getVersionTag());}  }
class C{  public static void startActivity(Context context,String chatId){  Intent intent=new Intent(context,SendGroupFile.class);  intent.putExtra(EXTRA_CHAT_ID,chatId);  context.startActivity(intent);}  }
class C{  public Index excludedDataCenters(String excludedDataCenters){  this.excludedDataCenters=excludedDataCenters;  return this;}  }
class C{  public final int read() throws IOException {  int result=src.read();  if (result != -1) {    ++pointer;  }  return result;}  }
class C{  public static boolean compareAndSwapInt(Object obj,long off,int exp,int upd){  return UNSAFE.compareAndSwapInt(obj,off,exp,upd);}  }
class C{  public static String dec2Bin(int value){  String result="";  return dec2Bin(value,result);}  }
class C{  public void apply(RecyclerView recyclerView,Iterable<Item> items){  if (items != null) {    HashMap<Integer,Stack<RecyclerView.ViewHolder>> cache=new HashMap<>();    for (    Item d : items) {      if (!cache.containsKey(d.getType())) {        cache.put(d.getType(),new Stack<RecyclerView.ViewHolder>());      }      if (mCacheSize == -1 || cache.get(d.getType()).size() <= mCacheSize) {        cache.get(d.getType()).push(d.getViewHolder(recyclerView));      }      RecyclerView.RecycledViewPool recyclerViewPool=new RecyclerView.RecycledViewPool();      for (      Map.Entry<Integer,Stack<RecyclerView.ViewHolder>> entry : cache.entrySet()) {        recyclerViewPool.setMaxRecycledViews(entry.getKey(),mCacheSize);        for (        RecyclerView.ViewHolder holder : entry.getValue()) {          recyclerViewPool.putRecycledView(holder);        }        entry.getValue().clear();      }      cache.clear();      recyclerView.setRecycledViewPool(recyclerViewPool);    }  }}  }
class C{  public void incNumOverflowOnDisk(long delta){  this.stats.incLong(numOverflowOnDiskId,delta);}  }
class C{  public void paint(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).paint(a,b);  }}  }
class C{  public void updateUI(){  setUI((TableHeaderUI)UIManager.getUI(this));  TableCellRenderer renderer=getDefaultRenderer();  if (renderer instanceof Component) {    SwingUtilities.updateComponentTreeUI((Component)renderer);  }}  }
class C{  public static RefactoringStatus create(IStatus status){  if (status.isOK())   return new RefactoringStatus();  if (!status.isMultiStatus()) {switch (status.getSeverity()) {case IStatus.OK:      return new RefactoringStatus();case IStatus.INFO:    return RefactoringStatus.createWarningStatus(status.getMessage());case IStatus.WARNING:  return RefactoringStatus.createErrorStatus(status.getMessage());case IStatus.ERROR:return RefactoringStatus.createFatalErrorStatus(status.getMessage());case IStatus.CANCEL:return RefactoringStatus.createFatalErrorStatus(status.getMessage());default :return RefactoringStatus.createFatalErrorStatus(status.getMessage());}} else {IStatus[] children=status.getChildren();RefactoringStatus result=new RefactoringStatus();for (int i=0; i < children.length; i++) {result.merge(RefactoringStatus.create(children[i]));}return result;}}  }
class C{  public void debug(String msg){  debugLogger.debug(msg);}  }
class C{  public int size(){  return codon.length;}  }
class C{  public Diff decode() throws UnsupportedEncodingException, DecodingException {  int header=r.read(3);  if (DiffAction.parse(header) != DiffAction.DECODER_DATA) {    throw new DecodingException("Invalid codecData code: " + header);  }  int blockSize_C=3;  int blockSize_S=r.read(5);  int blockSize_E=r.read(5);  int blockSize_B=r.read(5);  int blockSize_L=r.read(5);  r.read(1);  if (blockSize_S < 0 || blockSize_S > 31) {    throw new DecodingException("blockSize_S out of range: " + blockSize_S);  }  if (blockSize_E < 0 || blockSize_E > 31) {    throw new DecodingException("blockSize_E out of range: " + blockSize_E);  }  if (blockSize_B < 0 || blockSize_B > 31) {    throw new DecodingException("blockSize_B out of range: " + blockSize_B);  }  if (blockSize_L < 0 || blockSize_L > 31) {    throw new DecodingException("blockSize_L out of range: " + blockSize_L);  }  return decode(blockSize_C,blockSize_S,blockSize_E,blockSize_B,blockSize_L);}  }
class C{  public FontSizeLocator(){}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) static <E extends Comparable<E>>AutoSortedCollection<E> createAutoSortedCollection(Collection<? extends E> values){  return createAutoSortedCollection(null,values);}  }
class C{  @Override public String toString(){  return super.toString();}  }
class C{  public boolean useLayoutEditor(SignalMast destination){  if (!destList.containsKey(destination)) {    return false;  }  return destList.get(destination).useLayoutEditor();}  }
class C{  private static String unescapePathComponent(String name){  return name.replaceAll("\\\\(.)","$1");}  }
class C{  public AbstractExampleTable(List<Attribute> attributes){  addAttributes(attributes);}  }
class C{  public void zoomOut(){  Matrix save=mViewPortHandler.zoomOut(getWidth() / 2f,-(getHeight() / 2f));  mViewPortHandler.refresh(save,this,true);}  }
class C{  public Media createBackgroundMedia(String uri) throws IOException {  return impl.createBackgroundMedia(uri);}  }
class C{  private boolean hasNextTlsMode(){  return nextTlsMode != TLS_MODE_NULL;}  }
class C{  protected void copyToOpsw(){  opsw[1]=fullmode.isSelected();  opsw[2]=twoaspects.isSelected();  opsw[11]=semaphore.isSelected();  opsw[12]=pulsed.isSelected();  opsw[13]=disableDS.isSelected();  opsw[14]=fromloconet.isSelected();  opsw[15]=disablelocal.isSelected();  opsw[17]=sigaddress.isSelected();  opsw[18]=bcastaddress.isSelected();  opsw[19]=semaddress.isSelected();  opsw[20]=setdefault.isSelected();  opsw[21]=exercise.isSelected();  int value=section1to4mode.getSelectedIndex();  if ((value & 0x01) != 0) {    opsw[5]=true;  } else {    opsw[5]=false;  }  if ((value & 0x02) != 0) {    opsw[4]=true;  } else {    opsw[4]=false;  }  if ((value & 0x04) != 0) {    opsw[3]=true;  } else {    opsw[3]=false;  }  value=section5to8mode.getSelectedIndex();  if ((value & 0x01) != 0) {    opsw[8]=true;  } else {    opsw[8]=false;  }  if ((value & 0x02) != 0) {    opsw[7]=true;  } else {    opsw[7]=false;  }  if ((value & 0x04) != 0) {    opsw[6]=true;  } else {    opsw[6]=false;  }  value=fourthAspect.getSelectedIndex();  if ((value & 0x01) != 0) {    opsw[10]=true;  } else {    opsw[10]=false;  }  if ((value & 0x02) != 0) {    opsw[9]=true;  } else {    opsw[9]=false;  }}  }
class C{  @Override public void onRequestPermissionsResult(int requestCode,@NonNull String[] permissions,@NonNull int[] grantResults){  if (requestCode == ALLOW_PERMISSIONS && grantResults.length > 0) {    List<String> permissionsNotAllowed=new ArrayList<>();    for (int i=0; i < permissions.length; i++) {      if (grantResults[i] == PackageManager.PERMISSION_DENIED) {        permissionsNotAllowed.add(permissions[i]);      }    }    if (permissionsNotAllowed.isEmpty()) {      initEvent();    } else {      permissionNotEnabled();    }  } else {    permissionNotEnabled();  }}  }
class C{  public String rowGet(String key){  String resolvedKey=resolveRowKey(key);  String cachedValue=rowMapCache.get(resolvedKey);  if (cachedValue != null) {    return cachedValue;  }  String value=rowMap.get(resolvedKey);  if (value == null && parent != null) {    value=parent.rowGet(resolvedKey);  }  if (value == null) {    return null;  }  String expandedString=expand(value,false);  rowMapCache.put(resolvedKey,expandedString);  return expandedString;}  }
class C{  public void postEvaluationStatistics(final EvolutionState state){  super.postEvaluationStatistics(state);  state.output.println("\nGeneration: " + state.generation,Output.V_NO_GENERAL,statisticslog);  for (int x=0; x < state.population.subpops.length; x++)   for (int y=1; y < state.population.subpops[x].individuals.length; y++)   state.population.subpops[x].individuals[y].printIndividualForHumans(state,statisticslog,Output.V_NO_GENERAL);}  }
class C{  private void checkUserExists(String entidad) throws Exception {  int count;  UsersTable table=new UsersTable();  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession());    if (_id == ISicresAdminDefsKeys.NULL_ID)     count=DbSelectFns.selectCount(dbConn,table.getBaseTableName(),table.getCountNameQual(_name)); else     count=DbSelectFns.selectCount(dbConn,table.getBaseTableName(),table.getCountNameIdQual(_id,_name));    if (count > 0)     ISicresAdminBasicException.throwException(ISicresAdminUserKeys.EC_USER_EXISTS_NAME);  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }}  }
class C{  @Transactional public Role createRoleWithPermissions(Role role,Set<Long> permissionIds){  Role current=findRoleByRoleName(role.getRoleName());  Preconditions.checkState(current == null,"Role %s already exists!",role.getRoleName());  Role createdRole=roleRepository.save(role);  if (!CollectionUtils.isEmpty(permissionIds)) {    Iterable<RolePermission> rolePermissions=FluentIterable.from(permissionIds).transform(null);    rolePermissionRepository.save(rolePermissions);  }  return createdRole;}  }
class C{  protected void generateNewCursorBox(){  if ((old_m_x2 != -1) || (old_m_y2 != -1) || (Math.abs(commonValues.m_x2 - old_m_x2) > 5)|| (Math.abs(commonValues.m_y2 - old_m_y2) > 5)) {    int top_x=commonValues.m_x1;    if (commonValues.m_x1 > commonValues.m_x2) {      top_x=commonValues.m_x2;    }    int top_y=commonValues.m_y1;    if (commonValues.m_y1 > commonValues.m_y2) {      top_y=commonValues.m_y2;    }    final int w=Math.abs(commonValues.m_x2 - commonValues.m_x1);    final int h=Math.abs(commonValues.m_y2 - commonValues.m_y1);    final int[] currentRectangle={top_x,top_y,w,h};    decode_pdf.updateCursorBoxOnScreen(currentRectangle,DecoderOptions.highlightColor.getRGB());    if (!currentCommands.extractingAsImage) {      final int[] r={commonValues.m_x1,commonValues.m_y1,commonValues.m_x2 - commonValues.m_x1,commonValues.m_y2 - commonValues.m_y1};      decode_pdf.getTextLines().addHighlights(new int[][]{r},false,commonValues.getCurrentPage());    }    old_m_x2=commonValues.m_x2;    old_m_y2=commonValues.m_y2;  }  decode_pdf.repaintPane(commonValues.getCurrentPage());}  }
class C{  public OMGraphicList(int initialCapacity){  graphics=Collections.synchronizedList(new ArrayList<OMGraphic>(initialCapacity));}  }
class C{  private void saveToSettings(){  List<String> dataToSave=new LinkedList<>();  for (  UsercolorItem item : data) {    dataToSave.add(item.getId() + "," + HtmlColors.getColorString(item.getColor()));  }  settings.putList("usercolors",dataToSave);}  }
class C{  public static boolean isArrayForName(String value){  return ARRAY_FOR_NAME_PATTERN.matcher(value).matches();}  }
class C{  public double length(){  return Math.sqrt(this.x * this.x + this.y * this.y);}  }
class C{  public String toString(){  return schema;}  }
class C{  public void restoreStarting(int numPackages){}  }
class C{  private boolean resourceIsGwtXmlAndInGwt(IResource resource) throws CoreException {  return GWTNature.isGWTProject(resource.getProject()) && resource.getName().endsWith(".gwt.xml");}  }
class C{  public GlowCreature(Location location,EntityType type,double maxHealth){  super(location,maxHealth);  this.type=type;}  }
class C{  public CacheLayer(){}  }
class C{  protected Address buildAndroidAddress(JSONObject jResult) throws JSONException {  Address gAddress=new Address(mLocale);  gAddress.setLatitude(jResult.getDouble("lat"));  gAddress.setLongitude(jResult.getDouble("lng"));  int addressIndex=0;  if (jResult.has("streetName")) {    gAddress.setAddressLine(addressIndex++,jResult.getString("streetName"));    gAddress.setThoroughfare(jResult.getString("streetName"));  }  if (jResult.has("zipCode")) {    gAddress.setAddressLine(addressIndex++,jResult.getString("zipCode"));    gAddress.setPostalCode(jResult.getString("zipCode"));  }  if (jResult.has("city")) {    gAddress.setAddressLine(addressIndex++,jResult.getString("city"));    gAddress.setLocality(jResult.getString("city"));  }  if (jResult.has("state")) {    gAddress.setAdminArea(jResult.getString("state"));  }  if (jResult.has("country")) {    gAddress.setAddressLine(addressIndex++,jResult.getString("country"));    gAddress.setCountryName(jResult.getString("country"));  }  if (jResult.has("countrycode"))   gAddress.setCountryCode(jResult.getString("countrycode"));  return gAddress;}  }
class C{  public JDBCCategoryDataset(Connection connection,String query) throws SQLException {  this(connection);  executeQuery(query);}  }
class C{  public static Map<String,Object> generateReqsFromCancelledPOItems(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  GenericValue userLogin=(GenericValue)context.get("userLogin");  Locale locale=(Locale)context.get("locale");  String orderId=(String)context.get("orderId");  String facilityId=(String)context.get("facilityId");  try {    GenericValue orderHeader=EntityQuery.use(delegator).from("OrderHeader").where("orderId",orderId).queryOne();    if (UtilValidate.isEmpty(orderHeader)) {      String errorMessage=UtilProperties.getMessage(resource_error,"OrderErrorOrderIdNotFound",UtilMisc.toMap("orderId",orderId),locale);      Debug.logError(errorMessage,module);      return ServiceUtil.returnError(errorMessage);    }    if (!"PURCHASE_ORDER".equals(orderHeader.getString("orderTypeId"))) {      String errorMessage=UtilProperties.getMessage(resource_error,"ProductErrorOrderNotPurchaseOrder",UtilMisc.toMap("orderId",orderId),locale);      Debug.logError(errorMessage,module);      return ServiceUtil.returnError(errorMessage);    }    Map<String,Object> productRequirementQuantities=new HashMap<String,Object>();    List<GenericValue> orderItems=orderHeader.getRelated("OrderItem",null,null,false);    for (    GenericValue orderItem : orderItems) {      if (!"PRODUCT_ORDER_ITEM".equals(orderItem.getString("orderItemTypeId")))       continue;      BigDecimal orderItemCancelQuantity=BigDecimal.ZERO;      if (!UtilValidate.isEmpty(orderItem.get("cancelQuantity"))) {        orderItemCancelQuantity=orderItem.getBigDecimal("cancelQuantity");      }      if (orderItemCancelQuantity.compareTo(BigDecimal.ZERO) <= 0)       continue;      String productId=orderItem.getString("productId");      if (productRequirementQuantities.containsKey(productId)) {        orderItemCancelQuantity=orderItemCancelQuantity.add((BigDecimal)productRequirementQuantities.get(productId));      }      productRequirementQuantities.put(productId,orderItemCancelQuantity);    }    for (    String productId : productRequirementQuantities.keySet()) {      BigDecimal requiredQuantity=(BigDecimal)productRequirementQuantities.get(productId);      Map<String,Object> createRequirementResult=dispatcher.runSync("createRequirement",UtilMisc.<String,Object>toMap("requirementTypeId","PRODUCT_REQUIREMENT","facilityId",facilityId,"productId",productId,"quantity",requiredQuantity,"userLogin",userLogin));      if (ServiceUtil.isError(createRequirementResult))       return createRequirementResult;    }  } catch (  GenericEntityException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(e.getMessage());  }catch (  GenericServiceException se) {    Debug.logError(se,module);    return ServiceUtil.returnError(se.getMessage());  }  return ServiceUtil.returnSuccess();}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (bayesIm == null) {    throw new NullPointerException();  }  if (variables == null) {    throw new NullPointerException();  }}  }
class C{  boolean contains(ProtocolVersion protocolVersion){  if (protocolVersion == ProtocolVersion.SSL20Hello) {    return false;  }  return protocols.contains(protocolVersion);}  }
class C{  @Override protected EClass eStaticClass(){  return DatatypePackage.Literals.OBJECT_PROPERTY_TYPE;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:35.806 -0500",hash_original_method="E14DF72F5869874CC38AD67447F5264E",hash_generated_method="127365361841BB38033FE96228DFD635") public final Iterator<String> typesIterator(){  return mDataTypes != null ? mDataTypes.iterator() : null;}  }
class C{  public void registerGUI(final ConfigGUI gui){  this.gui=gui;}  }
class C{  public IntersectionMatrix(IntersectionMatrix other){  this();  matrix[Location.INTERIOR][Location.INTERIOR]=other.matrix[Location.INTERIOR][Location.INTERIOR];  matrix[Location.INTERIOR][Location.BOUNDARY]=other.matrix[Location.INTERIOR][Location.BOUNDARY];  matrix[Location.INTERIOR][Location.EXTERIOR]=other.matrix[Location.INTERIOR][Location.EXTERIOR];  matrix[Location.BOUNDARY][Location.INTERIOR]=other.matrix[Location.BOUNDARY][Location.INTERIOR];  matrix[Location.BOUNDARY][Location.BOUNDARY]=other.matrix[Location.BOUNDARY][Location.BOUNDARY];  matrix[Location.BOUNDARY][Location.EXTERIOR]=other.matrix[Location.BOUNDARY][Location.EXTERIOR];  matrix[Location.EXTERIOR][Location.INTERIOR]=other.matrix[Location.EXTERIOR][Location.INTERIOR];  matrix[Location.EXTERIOR][Location.BOUNDARY]=other.matrix[Location.EXTERIOR][Location.BOUNDARY];  matrix[Location.EXTERIOR][Location.EXTERIOR]=other.matrix[Location.EXTERIOR][Location.EXTERIOR];}  }
class C{  public long readUnsignedInt(){  long result=shiftIntoLong(data,position,4);  position+=4;  return result;}  }
class C{  public void emit(final SpannableStringBuilder out,final Block root){  root.removeSurroundingEmptyLines();switch (root.type) {case NONE:    break;case PARAGRAPH:  this.config.decorator.openParagraph(out);break;case BLOCKQUOTE:this.config.decorator.openBlockquote(out);break;case UNORDERED_LIST:this.config.decorator.openUnorderedList(out);break;case ORDERED_LIST:this.config.decorator.openOrderedList(out);break;case UNORDERED_LIST_ITEM:this.config.decorator.openUnOrderedListItem(out);break;case ORDERED_LIST_ITEM:this.config.decorator.openOrderedListItem(out);break;}if (root.hasLines()) {this.emitLines(out,root);} else {Block block=root.blocks;while (block != null) {this.emit(out,block);block=block.next;}}switch (root.type) {case NONE:break;case PARAGRAPH:this.config.decorator.closeParagraph(out);break;case BLOCKQUOTE:this.config.decorator.closeBlockquote(out);break;case UNORDERED_LIST:this.config.decorator.closeUnorderedList(out);break;case ORDERED_LIST:this.config.decorator.closeOrderedList(out);break;case UNORDERED_LIST_ITEM:this.config.decorator.closeUnOrderedListItem(out);break;case ORDERED_LIST_ITEM:this.config.decorator.closeOrderedListItem(out);break;}}  }
class C{  public boolean isInternable(){  return (classAnnotations != null) && (fieldAnnotations == null) && (methodAnnotations == null)&& (parameterAnnotations == null);}  }
class C{  public URI(final String scheme,final String userinfo,final String host,final int port,final String path,final String query,final String fragment) throws URIException {  this(scheme,(host == null) ? null : ((userinfo != null) ? userinfo + '@' : "") + host + ((port != -1) ? ":" + port : ""),path,query,fragment);}  }
class C{  public void addUser(User user){  users.addElement(user);}  }
class C{  protected void engineUpdate(byte b) throws SignatureException {  msgDigest.update(b);}  }
class C{  public RqMtFake(final Request req,final Request... dispositions) throws IOException {  this.fake=new RqMtBase(new RqMtFake.FakeMultipartRequest(req,dispositions));}  }
class C{  public static Video randomVideo(){  String id=UUID.randomUUID().toString();  String title="Video-" + id;  String url="http://coursera.org/some/video-" + id;  long duration=60 * (int)Math.rint(Math.random() * 60) * 1000;  return new Video(title,url,duration);}  }
class C{  public void addHeader(String header,String value){  clientHeaderMap.put(header,value);}  }
class C{  public void addPostalAddress(PostalAddress postalAddress){  getPostalAddresses().add(postalAddress);}  }
class C{  public CaughtExceptionRef newCaughtExceptionRef(){  return new JCaughtExceptionRef();}  }
class C{  public void actionPerformed(ActionEvent e){  if (e.getSource() instanceof PerformanceIndicator) {    PerformanceIndicator pi=(PerformanceIndicator)e.getSource();    log.info(pi.getName());    MGoal goal=pi.getGoal();    if (goal.getMeasure() != null)     new PerformanceDetail(goal);  }}  }
class C{  public Iterator<AbstractNode> childIterator(final boolean dirtyNodesOnly){  if (dirtyNodesOnly) {    return new DirtyChildIterator(this);  } else {    return new ChildIterator(this);  }}  }
class C{  public static int maxIndex(double[] doubles){  double maximum=0;  int maxIndex=0;  for (int i=0; i < doubles.length; i++) {    if ((i == 0) || (doubles[i] > maximum)) {      maxIndex=i;      maximum=doubles[i];    }  }  return maxIndex;}  }
class C{  private List<PreferenceIndex> crawlSingleIndexableResource(IndexableFragment indexableFragment){  List<PreferenceIndex> indexablePreferences=new ArrayList<>();  XmlPullParser parser=mContext.getResources().getXml(indexableFragment.xmlRes);  int type;  try {    while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && type != XmlPullParser.START_TAG) {    }    String nodeName=parser.getName();    if (!NODE_NAME_PREFERENCE_SCREEN.equals(nodeName)) {      throw new RuntimeException("XML document must start with <PreferenceScreen> tag; found" + nodeName + " at "+ parser.getPositionDescription());    }    final int outerDepth=parser.getDepth();    final AttributeSet attrs=Xml.asAttributeSet(parser);    while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {      if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {        continue;      }      nodeName=parser.getName();      String key=PreferenceXmlUtil.getDataKey(mContext,attrs);      String title=PreferenceXmlUtil.getDataTitle(mContext,attrs);      if (NODE_NAME_PREFERENCE_CATEGORY.equals(nodeName) || TextUtils.isEmpty(key) || TextUtils.isEmpty(title)) {        continue;      }      PreferenceIndex indexablePreference=new PreferenceIndex(key,title,indexableFragment.fragmentName);      indexablePreferences.add(indexablePreference);    }  } catch (  XmlPullParserException|IOException|ReflectiveOperationException ex) {    Log.e(TAG,"Error in parsing a preference xml file, skip it",ex);  }  return indexablePreferences;}  }
class C{  @Inline private static void genNullCheck(Assembler asm,GPR objRefReg){  asm.emitTEST_Reg_Reg(objRefReg,objRefReg);  asm.emitBranchLikelyNextInstruction();  ForwardReference fr=asm.forwardJcc(NE);  asm.emitINT_Imm(RuntimeEntrypoints.TRAP_NULL_POINTER + RVM_TRAP_BASE);  fr.resolve(asm);}  }
class C{  public Location(String provider){  mProvider=provider;}  }
class C{  @Override public void run(){  amIActive=true;  String demHeader=null;  String creekHeader=null;  String ttControlHeader=null;  String eacOutputHeader=null;  String dfcOutputHeader=null;  String gtcOutputHeader=null;  String ttpOutputHeader=null;  WhiteboxRaster dem;  WhiteboxRaster creek;  WhiteboxRaster ttControl=null;  WhiteboxRaster eacOutput;  WhiteboxRaster dfcOutput;  WhiteboxRaster gtcOutput;  WhiteboxRaster ttpOutput;  int numCols, numRows;  double gridRes;  boolean blnTTControl=true;  int flowIndex;  List<FlowCell> flowPath=new ArrayList<>();  int c;  int x, y;  int xn, yn;  double p;  int maxDirection;  double grad, maxGrad;  double deltaElev;  double deltaXY;  int radius;  float maxRadius=200;  int maxX=0, maxY=0;  double ttControlMean;  int[] xd=new int[]{0,-1,-1,-1,0,1,1,1};  int[] yd=new int[]{-1,-1,0,1,1,1,0,-1};  double[] dd=new double[]{1,Math.sqrt(2),1,Math.sqrt(2),1,Math.sqrt(2),1,Math.sqrt(2)};  double noData;  float progress=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      demHeader=args[i];    } else     if (i == 1) {      creekHeader=args[i];    } else     if (i == 2) {      ttControlHeader=args[i];      if (ttControlHeader.toLowerCase().contains("not specified")) {        blnTTControl=false;      }    } else     if (i == 3) {      eacOutputHeader=args[i];    } else     if (i == 4) {      dfcOutputHeader=args[i];    } else     if (i == 5) {      gtcOutputHeader=args[i];    } else     if (i == 6) {      ttpOutputHeader=args[i];    }  }  if ((demHeader == null) || (creekHeader == null) || (eacOutputHeader == null)|| (dfcOutputHeader == null)|| (gtcOutputHeader == null)|| (ttpOutputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    dem=new WhiteboxRaster(demHeader,"r");    creek=new WhiteboxRaster(creekHeader,"r");    if (blnTTControl == true) {      ttControl=new WhiteboxRaster(ttControlHeader,"r");    }    numRows=dem.getNumberRows();    numCols=dem.getNumberColumns();    noData=dem.getNoDataValue();    gridRes=dem.getCellSizeX();    eacOutput=new WhiteboxRaster(eacOutputHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,0);    eacOutput.setPreferredPalette("blueyellow.pal");    eacOutput.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    eacOutput.setZUnits("dimensionless");    dfcOutput=new WhiteboxRaster(dfcOutputHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,0);    dfcOutput.setPreferredPalette("blueyellow.pal");    dfcOutput.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    dfcOutput.setZUnits("dimensionless");    gtcOutput=new WhiteboxRaster(gtcOutputHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,0);    gtcOutput.setPreferredPalette("blueyellow.pal");    gtcOutput.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    gtcOutput.setZUnits("dimensionless");    ttpOutput=new WhiteboxRaster(ttpOutputHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,0);    ttpOutput.setPreferredPalette("blueyellow.pal");    ttpOutput.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    ttpOutput.setZUnits("dimensionless");    updateProgress("Loop 1 of 2:",0);    for (int row=0; row < numRows; row++) {      for (int col=0; col < numCols; col++) {        if (dem.getValue(row,col) != noData) {          if (creek.getValue(row,col) <= 0) {            eacOutput.setValue(row,col,-1048);          }        } else {          eacOutput.setValue(row,col,noData);          dfcOutput.setValue(row,col,noData);          gtcOutput.setValue(row,col,noData);          ttpOutput.setValue(row,col,noData);        }      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("Loop 1 of 2:",(int)progress);    }    updateProgress("Loop 2 of 2:",0);    for (int row=0; row < numRows; row++) {      for (int col=0; col < numCols; col++) {        if (eacOutput.getValue(row,col) == -1048) {          flowIndex=-1;          flowPath=new ArrayList<>();          x=col;          y=row;          while (eacOutput.getValue(y,x) == -1048) {            flowIndex=flowIndex + 1;            flowPath.add(new FlowCell(y,x));            p=dem.getValue(y,x);            maxDirection=-1;            maxGrad=0;            for (c=0; c < 8; c++) {              xn=x + xd[c];              yn=y + yd[c];              if (dem.getValue(yn,xn) != noData) {                grad=(p - dem.getValue(yn,xn)) / (dd[c] * gridRes);                if (grad > maxGrad) {                  maxGrad=grad;                  maxDirection=c;                }              }            }            if (maxDirection > -1) {              x=x + xd[maxDirection];              y=y + yd[maxDirection];            } else {              radius=1;              do {                for (int i=-radius; i <= radius; i++) {                  for (int j=-radius; j <= radius; j++) {                    if (Math.abs(i) > radius - 1 || Math.abs(j) > radius - 1) {                      xn=x + i;                      yn=y + j;                      if (dem.getValue(yn,xn) != noData && dem.getValue(yn,xn) < p) {                        grad=(p - dem.getValue(yn,xn)) / (Math.sqrt(i * i + j * j) * gridRes);                        if (grad > maxGrad) {                          maxGrad=grad;                          maxX=xn;                          maxY=yn;                        }                      }                    }                  }                }                radius=radius + 1;              } while (maxGrad == 0 & radius <= maxRadius);              if (maxGrad > 0) {                x=maxX;                y=maxY;              } else {                eacOutput.setValue(y,x,noData);                dfcOutput.setValue(y,x,noData);                gtcOutput.setValue(y,x,noData);                ttpOutput.setValue(y,x,noData);              }            }          }          if (eacOutput.getValue(y,x) == noData) {            eacOutput.setValue(flowPath.get(flowIndex).rowIndex,flowPath.get(flowIndex).columnIndex,noData);            dfcOutput.setValue(flowPath.get(flowIndex).rowIndex,flowPath.get(flowIndex).columnIndex,noData);            gtcOutput.setValue(flowPath.get(flowIndex).rowIndex,flowPath.get(flowIndex).columnIndex,noData);            ttpOutput.setValue(flowPath.get(flowIndex).rowIndex,flowPath.get(flowIndex).columnIndex,noData);          } else {            deltaElev=dem.getValue(flowPath.get(flowIndex).rowIndex,flowPath.get(flowIndex).columnIndex) - dem.getValue(y,x);            deltaXY=Math.sqrt(Math.pow(flowPath.get(flowIndex).rowIndex - y,2) + Math.pow(flowPath.get(flowIndex).columnIndex - x,2)) * gridRes;            eacOutput.setValue(flowPath.get(flowIndex).rowIndex,flowPath.get(flowIndex).columnIndex,eacOutput.getValue(y,x) + deltaElev);            dfcOutput.setValue(flowPath.get(flowIndex).rowIndex,flowPath.get(flowIndex).columnIndex,dfcOutput.getValue(y,x) + deltaXY);            gtcOutput.setValue(flowPath.get(flowIndex).rowIndex,flowPath.get(flowIndex).columnIndex,(gtcOutput.getValue(y,x) * dfcOutput.getValue(y,x) + deltaElev) / dfcOutput.getValue(flowPath.get(flowIndex).rowIndex,flowPath.get(flowIndex).columnIndex));            if (blnTTControl == false) {              ttpOutput.setValue(flowPath.get(flowIndex).rowIndex,flowPath.get(flowIndex).columnIndex,ttpOutput.getValue(y,x) + Math.pow(deltaXY,2) / deltaElev);            } else {              ttControlMean=(ttControl.getValue(y,x) + ttControl.getValue(flowPath.get(flowIndex).rowIndex,flowPath.get(flowIndex).columnIndex)) / 2;              ttpOutput.setValue(flowPath.get(flowIndex).rowIndex,flowPath.get(flowIndex).columnIndex,ttpOutput.getValue(y,x) + Math.pow(deltaXY,2) / (deltaElev * ttControlMean));            }          }          for (int i=flowIndex - 1; i >= 0; i--) {            if (eacOutput.getValue(flowPath.get(i + 1).rowIndex,flowPath.get(i + 1).columnIndex) == noData) {              eacOutput.setValue(flowPath.get(i).rowIndex,flowPath.get(i).columnIndex,noData);              dfcOutput.setValue(flowPath.get(i).rowIndex,flowPath.get(i).columnIndex,noData);              gtcOutput.setValue(flowPath.get(i).rowIndex,flowPath.get(i).columnIndex,noData);              ttpOutput.setValue(flowPath.get(i).rowIndex,flowPath.get(i).columnIndex,noData);            } else {              deltaElev=dem.getValue(flowPath.get(i).rowIndex,flowPath.get(i).columnIndex) - dem.getValue(flowPath.get(i + 1).rowIndex,flowPath.get(i + 1).columnIndex);              deltaXY=Math.sqrt(Math.pow(flowPath.get(i).rowIndex - flowPath.get(i + 1).rowIndex,2) + Math.pow(flowPath.get(i).columnIndex - flowPath.get(i + 1).columnIndex,2)) * gridRes;              eacOutput.setValue(flowPath.get(i).rowIndex,flowPath.get(i).columnIndex,eacOutput.getValue(flowPath.get(i + 1).rowIndex,flowPath.get(i + 1).columnIndex) + deltaElev);              dfcOutput.setValue(flowPath.get(i).rowIndex,flowPath.get(i).columnIndex,dfcOutput.getValue(flowPath.get(i + 1).rowIndex,flowPath.get(i + 1).columnIndex) + deltaXY);              gtcOutput.setValue(flowPath.get(i).rowIndex,flowPath.get(i).columnIndex,(gtcOutput.getValue(flowPath.get(i + 1).rowIndex,flowPath.get(i + 1).columnIndex) * dfcOutput.getValue(flowPath.get(i + 1).rowIndex,flowPath.get(i + 1).columnIndex) + deltaElev) / dfcOutput.getValue(flowPath.get(i).rowIndex,flowPath.get(i).columnIndex));              if (blnTTControl == false) {                ttpOutput.setValue(flowPath.get(i).rowIndex,flowPath.get(i).columnIndex,ttpOutput.getValue(flowPath.get(i + 1).rowIndex,flowPath.get(i + 1).columnIndex) + Math.pow(deltaXY,2) / deltaElev);              } else {                ttControlMean=(ttControl.getValue(flowPath.get(i).rowIndex,flowPath.get(i).columnIndex) + ttControl.getValue(flowPath.get(i + 1).rowIndex,flowPath.get(i + 1).columnIndex)) / 2;                ttpOutput.setValue(flowPath.get(i).rowIndex,flowPath.get(i).columnIndex,ttpOutput.getValue(flowPath.get(i + 1).rowIndex,flowPath.get(i + 1).columnIndex) + Math.pow(deltaXY,2) / (deltaElev * ttControlMean));              }            }          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("Loop 2 of 2:",(int)progress);    }    eacOutput.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    eacOutput.addMetadataEntry("Created on " + new Date());    dfcOutput.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    dfcOutput.addMetadataEntry("Created on " + new Date());    gtcOutput.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    gtcOutput.addMetadataEntry("Created on " + new Date());    ttpOutput.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    ttpOutput.addMetadataEntry("Created on " + new Date());    dem.close();    creek.close();    if (blnTTControl == true) {      ttControl.close();    }    eacOutput.close();    dfcOutput.close();    gtcOutput.close();    ttpOutput.close();    returnData(eacOutputHeader);  } catch (  Exception e) {    showFeedback(e.getMessage());  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public NodesInfoRequest(String... nodesIds){  super(nodesIds);}  }
class C{  public static double norm(double[] a){  double squaredSum=0;  for (int i=0; i < a.length; i++) {    squaredSum+=a[i] * a[i];  }  return Math.sqrt(squaredSum);}  }
class C{  private static double[] toDoubleAray(Integer[] intArray,HashSet<Integer> skipIndex){  double[] res=new double[intArray.length - skipIndex.size()];  int skip=0;  for (int i=0; i < intArray.length; i++) {    if (skipIndex.contains(i)) {      skip++;      continue;    }    res[i - skip]=intArray[i].doubleValue();  }  return res;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public CompositeValidationIssueProcessor(final IValidationIssueProcessor first,final IValidationIssueProcessor... others){  processors=Lists.asList(first,others);}  }
class C{  public OptionSet removeMaxAge(){  max_age=null;  return this;}  }
class C{  public Request(){  locality="";  state="";  organization="";  orgunit="";  dnsname="";  uri="";  email="";  ipaddress="";  keyusage=0;}  }
class C{  @Override protected Position determineMainLabelPosition(DrawContext dc){  return this.getReferencePosition();}  }
class C{  @Override Map<String,Object> extractFields(String line){  if (!initialized) {    init();    initialized=true;  }  String[] values=fixedWidthParser.parseLine(line);  if (hasHeader && Arrays.deepEquals(values,header)) {    return null;  }  Map<String,Object> map=Maps.newHashMap();  int i=0;  for (  FixedWidthField field : fields) {    map.put(field.getName(),getValue(field,values[i++]));  }  return map;}  }
class C{  @Override public boolean contains(Value subvalue){  return toString().contains(subvalue.toString());}  }
class C{  private void applyTo(ClassVisitor v,Field f){  if (Log.isLoggingOn()) {    Log.logLine(String.format("Visiting field %s",f.toGenericString()));  }  v.visit(f);}  }
class C{  @Override protected EClass eStaticClass(){  return ExpressionsPackage.Literals.BITWISE_AND_EXPRESSION;}  }
class C{  @Override public final void closePath(){  shape_primitives.addElement(H);  shape_primitive_x.addElement(0);  shape_primitive_y.addElement(0);  shape_primitive_x2.addElement(0);  shape_primitive_y2.addElement(0);  shape_primitive_x3.addElement(0);  shape_primitive_y3.addElement(0);}  }
class C{  public DefaultBoundValueOperations(K key,RedisOperations<K,V> operations){  super(key,operations);  this.ops=operations.opsForValue();}  }
class C{  @Override public void writeBatch() throws IOException {  if (getInstances() == null) {    throw new IOException("No instances to save");  }  if (getRetrieval() == INCREMENTAL) {    throw new IOException("Batch and incremental saving cannot be mixed.");  }  setRetrieval(BATCH);  setWriteMode(WRITE);  if ((retrieveFile() == null) && (getWriter() == null)) {    for (int i=0; i < getInstances().numInstances(); i++) {      System.out.println(instanceToLibsvm(getInstances().instance(i)));    }    setWriteMode(WAIT);  } else {    PrintWriter outW=new PrintWriter(getWriter());    for (int i=0; i < getInstances().numInstances(); i++) {      outW.println(instanceToLibsvm(getInstances().instance(i)));    }    outW.flush();    outW.close();    setWriteMode(WAIT);    outW=null;    resetWriter();    setWriteMode(CANCEL);  }}  }
class C{  public FloatMatrix truthi(){  for (int i=0; i < length; i++) {    put(i,get(i) == 0.0f ? 0.0f : 1.0f);  }  return this;}  }
class C{  public void testCallProcEscapeSequenceWithWhitespaces() throws Exception {  check("CALL func1()","{ call func1()}");  check("CALL func1()","{    call  func1()}");  check("CALL func1()","{ \n call\nfunc1()}");  checkFail("{ \n func1()}");}  }
class C{  public EnumRowStatus(Long valueIndex) throws IllegalArgumentException {  this(valueIndex.longValue());}  }
class C{  private void generateOps708(char[][] screenData,long[][] screenCellData,java.awt.geom.Rectangle2D.Float clipRect,float alphaFactor,float xoff,float yoff,float rowHeight,float currY,float charWidth,float currX){  if (reality.isIntegerPixels())   currY=(float)Math.floor(currY);  StringBuffer sb=new StringBuffer();  printCCBuffer("708 CCData to render",screenData,sb,screenCellData,new StringBuffer());  sb.setLength(0);  for (int row=0; row < sage.media.sub.CCSubtitleHandler.CC_ROWS && screenData != null; row++) {    long lastCellFormat=screenCellData[row][0];    if (CellFormat.getBackgroundOpacity(lastCellFormat) == DTVCCOpacity.TRANSPARENT && screenData[row][0] == 0) {      lastCellFormat=CellFormat.setForeground(lastCellFormat,(byte)CellFormat.getForeground(lastCellFormat),DTVCCOpacity.TRANSPARENT);    }    rowOffsets[row]=-1;    float rowStartY=rowHeight * row;    float textOffset=charWidth;    int maxCols=screenCellData[row].length - 1;    int lastRenderedCol=-1;    for (int col=0; col < maxCols; col++) {      if (lastCellFormat != screenCellData[row][col]) {        int windowID=CellFormat.getWindowID(lastCellFormat);        if ((CellFormat.getForegroundOpacity(lastCellFormat) != DTVCCOpacity.TRANSPARENT || CellFormat.getBackgroundOpacity(lastCellFormat) != DTVCCOpacity.TRANSPARENT)) {          textOffset+=render708ops(screenData,screenCellData,clipRect,alphaFactor,xoff,yoff,rowHeight,currY,charWidth,currX,sb,lastCellFormat,rowStartY,textOffset,lastRenderedCol,row,col);          lastRenderedCol=col - 1;        } else {          addTo708WindowRect(windowID,xoff + currX + textOffset,yoff + rowStartY,sb.length() * charWidth,rowHeight);          textOffset+=sb.length() * charWidth;        }        sb.setLength(0);      }      lastCellFormat=screenCellData[row][col];      if (CellFormat.getBackgroundOpacity(lastCellFormat) == DTVCCOpacity.TRANSPARENT && screenData[row][col] == 0) {        lastCellFormat=CellFormat.setForeground(lastCellFormat,(byte)CellFormat.getForeground(lastCellFormat),DTVCCOpacity.TRANSPARENT);      }      if (CellFormat.getBackgroundOpacity(lastCellFormat) == DTVCCOpacity.TRANSPARENT && (CellFormat.getForegroundOpacity(lastCellFormat) == DTVCCOpacity.TRANSPARENT || screenData[row][col] == 0)) {        textOffset+=charWidth;      } else       if (screenData[row][col] != 0) {        if (rowOffsets[row] == -1) {          rowOffsets[row]=col;        }        sb.append(screenData[row][col]);      } else {        sb.append(' ');      }    }    if (sb.length() > 0) {      if (CellFormat.getForegroundOpacity(lastCellFormat) != DTVCCOpacity.TRANSPARENT || CellFormat.getBackgroundOpacity(lastCellFormat) != DTVCCOpacity.TRANSPARENT) {        render708ops(screenData,screenCellData,clipRect,alphaFactor,xoff,yoff,rowHeight,currY,charWidth,currX,sb,lastCellFormat,rowStartY,textOffset,lastRenderedCol,row,maxCols);      }    }    sb.setLength(0);  }  for (  List<RenderingOp> ops : cached708WindowOps) {    cachedRenderOps.addAll(ops);  }}  }
class C{  public static void putbytes2Uint8s(char[] destUint8s,byte[] srcBytes,int destOffset,int srcOffset,int count){  for (int i=0; i < count; i++) {    destUint8s[destOffset + i]=convertByte2Uint8(srcBytes[srcOffset + i]);  }}  }
class C{  public static void superposeWithAngle(ComplexVector vec1,ComplexVector vec2,float weight,int[] permutation){  int positionToAdd;  int dim=vec1.getDimension();  short c[]=vec2.getPhaseAngles();  float[] coordinates=vec1.getCoordinates();  if (permutation != null) {    for (int i=0; i < dim; i++) {      positionToAdd=permutation[i] << 1;      coordinates[positionToAdd]+=CircleLookupTable.getRealEntry(c[i]) * weight;      coordinates[positionToAdd + 1]+=CircleLookupTable.getImagEntry(c[i]) * weight;    }  } else {    for (int i=0; i < dim; i++) {      positionToAdd=i << 1;      coordinates[positionToAdd]+=CircleLookupTable.getRealEntry(c[i]) * weight;      coordinates[positionToAdd + 1]+=CircleLookupTable.getImagEntry(c[i]) * weight;    }  }}  }
class C{  protected void _addFieldMixIns(Class<?> targetClass,Class<?> mixInCls,Map<String,AnnotatedField> fields){  List<Class<?>> parents=new ArrayList<Class<?>>();  parents.add(mixInCls);  ClassUtil.findSuperTypes(mixInCls,targetClass,parents);  for (  Class<?> mixin : parents) {    for (    Field mixinField : mixin.getDeclaredFields()) {      if (!_isIncludableField(mixinField)) {        continue;      }      String name=mixinField.getName();      AnnotatedField maskedField=fields.get(name);      if (maskedField != null) {        for (        Annotation a : mixinField.getDeclaredAnnotations()) {          if (_annotationIntrospector.isHandled(a)) {            maskedField.addOrOverride(a);          }        }      }    }  }}  }
class C{  @Override public boolean input(Instance instance) throws Exception {  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_NewBatch) {    resetQueue();    m_NewBatch=false;  }  double[] vals=new double[instance.numAttributes() + 1];  for (int i=0; i < instance.numAttributes(); i++) {    if (instance.isMissing(i)) {      vals[i]=Utils.missingValue();    } else {      vals[i]=instance.value(i);    }  }  m_attributeExpression.evaluateExpression(vals);  Instance inst=null;  if (instance instanceof SparseInstance) {    inst=new SparseInstance(instance.weight(),vals);  } else {    inst=new DenseInstance(instance.weight(),vals);  }  inst.setDataset(getOutputFormat());  copyValues(inst,false,instance.dataset(),getOutputFormat());  inst.setDataset(getOutputFormat());  push(inst);  return true;}  }
class C{  public String lookup(String data){  Iterator<String> it=map.getPrefixedBy(data);  if (!it.hasNext())   return null;  return it.next();}  }
class C{  public boolean attempt(LiveAnalysis live,Register r1,Register r2){  if (isLiveAtDef(r2,r1,live))   return false;  if (isLiveAtDef(r1,r2,live))   return false;  if (split(r1,r2))   return false;  if (r1 == r2)   return false;  live.merge(r1,r2);  for (Enumeration<RegisterOperand> e=DefUse.defs(r2); e.hasMoreElements(); ) {    RegisterOperand def=e.nextElement();    DefUse.removeDef(def);    def.setRegister(r1);    DefUse.recordDef(def);  }  for (Enumeration<RegisterOperand> e=DefUse.uses(r2); e.hasMoreElements(); ) {    RegisterOperand use=e.nextElement();    DefUse.removeUse(use);    use.setRegister(r1);    DefUse.recordUse(use);  }  return true;}  }
class C{  private void registerTarget(final Message message,final String virtualHost){  final String thingId=getStringHeaderKey(message,MessageHeaderKey.THING_ID,"ThingId is null");  final String replyTo=message.getMessageProperties().getReplyTo();  if (StringUtils.isEmpty(replyTo)) {    logAndThrowMessageError(message,"No ReplyTo was set for the createThing Event.");  }  final URI amqpUri=IpUtil.createAmqpUri(virtualHost,replyTo);  final Target target=controllerManagement.findOrRegisterTargetIfItDoesNotexist(thingId,amqpUri);  LOG.debug("Target {} reported online state.",thingId);  lookIfUpdateAvailable(target);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public long term(){  return term;}  }
class C{  public void purgePlayer(Player player){  zombies.remove(player.getUniqueId());  humans.remove(player.getUniqueId());}  }
class C{  public RestClient(String target,String username,String password,CloseableHttpAsyncClient asyncClient){  checkNotNull(target,"target cannot be null");  checkNotNull(username,"username cannot be null");  checkNotNull(password,"password cannot be null");  this.target=target;  this.clientContext=getHttpClientContext(target,username,password);  this.asyncClient=asyncClient == null ? getHttpClient() : asyncClient;}  }
class C{  private String createPatternHash(int baseColorIndex){  String hashSource="" + baseColorIndex + "";  int count=0;synchronized (PatternList) {    for (    BannerPattern bp : PatternList) {      if (count++ != 0) {        hashSource+="-";      }      hashSource+=bp.toString();    }  }  return hashSource;}  }
class C{  public void close() throws IOException {  super.close();  disposerRecord.dispose();  stream=null;  cache=null;  cacheFile=null;  StreamCloser.removeFromQueue(closeAction);}  }
class C{  public static Uri importContent(String sessionId,String sourcePath) throws IOException {  File sourceFile=new File(sourcePath);  String targetPath="/" + sessionId + "/upload/"+ sourceFile.getName();  targetPath=createUniqueFilename(targetPath);  copyToVfs(sourcePath,targetPath);  return vfsUri(targetPath);}  }
class C{  public static ProjectActionEvent createProjectClosedEvent(ProjectDescriptor project,boolean closingBeforeOpening){  return new ProjectActionEvent(project,ProjectAction.CLOSED,closingBeforeOpening);}  }
class C{  public static void initiateItemEvent(EntityPlayer player,ItemStack itemStack,int event,boolean limitRange){  try {    if (NetworkManager_initiateItemEvent == null)     NetworkManager_initiateItemEvent=Class.forName(getPackage() + ".core.network.NetworkManager").getMethod("initiateItemEvent",EntityPlayer.class,ItemStack.class,Integer.TYPE,Boolean.TYPE);    if (instance == null)     instance=getInstance();    NetworkManager_initiateItemEvent.invoke(instance,player,itemStack,event,limitRange);  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public Enumeration<V> elements(){  return new ValueIterator();}  }
class C{  private boolean trackerAt(StendhalRPZone zone,int x,int y){  final List<Entity> list=zone.getEntitiesAt(x,y);  for (  Entity entity : list) {    if (entity instanceof ExpirationTracker) {      return true;    }  }  return false;}  }
class C{  public Segment segment(long index){  assertOpen();  if (currentSegment != null && currentSegment.validIndex(index))   return currentSegment;  Map.Entry<Long,Segment> segment=segments.floorEntry(index);  return segment != null ? segment.getValue() : null;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:20.138 -0400",hash_original_method="5CC57CD7C5B9408E54C315A9BE16050C",hash_generated_method="E0C143C4A578FB33A41B66D46278449D") public int nextInt(int least,int bound){  if (least >= bound)   throw new IllegalArgumentException();  return nextInt(bound - least) + least;}  }
class C{  protected ECPoint multiplyPositive(ECPoint p,BigInteger k){  ECPoint[] R=new ECPoint[]{p.getCurve().getInfinity(),p};  int n=k.bitLength();  for (int i=0; i < n; ++i) {    int b=k.testBit(i) ? 1 : 0;    int bp=1 - b;    R[bp]=R[bp].twicePlus(R[b]);  }  return R[0];}  }
class C{  void listItemsSortedSecure() throws Exception {  System.out.println("Secure Systems Inc. - list items");  String order=input("order (id, name)?");  if (!order.matches("[a-zA-Z0-9_]*")) {    order="id";  }  try {    ResultSet rs=stat.executeQuery("SELECT ID, NAME FROM ITEMS ORDER BY " + order);    while (rs.next()) {      System.out.println(rs.getString(1) + ": " + rs.getString(2));    }  } catch (  SQLException e) {    System.out.println(e);  }}  }
class C{  private int readInt(InputStream is) throws IOException {  return ((is.read() << 24) | (is.read() << 16) | (is.read() << 8)| (is.read()));}  }
class C{  void enableConfirmButtons(){  confirmChangesButton.setToolTipText(SymbolicProgBundle.getMessage("TipConfirmChangesSheet"));  confirmAllButton.setToolTipText(SymbolicProgBundle.getMessage("TipConfirmAllSheet"));  if (_cvModel.getProgrammer() != null && !_cvModel.getProgrammer().getCanRead()) {    confirmChangesButton.setEnabled(false);    confirmAllButton.setEnabled(false);    confirmChangesButton.setToolTipText(SymbolicProgBundle.getMessage("TipNoRead"));    confirmAllButton.setToolTipText(SymbolicProgBundle.getMessage("TipNoRead"));  } else {    confirmChangesButton.setEnabled(true);    confirmAllButton.setEnabled(true);  }}  }
class C{  private String eventName(String taskType,int taskNum,String evtType){  assert nodeId != null;  return taskType + " " + taskNum+ " "+ evtType+ " "+ nodeId;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.ACTION___ANONYMOUS_ACTION_11:    return ((InternalEList<?>)getAnonymous_action_1_1()).basicRemove(otherEnd,msgs);case UmplePackage.ACTION___ANONYMOUS_ACTION_21:  return ((InternalEList<?>)getAnonymous_action_2_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static void showPathInFileBrowser(final Path path){  try {    final boolean isFolder=Files.isDirectory(path);    final boolean isFile=!isFolder;    if (isFile && LEnv.OS == OpSys.WINDOWS) {      new ProcessBuilder("explorer.exe","/select,",path.toAbsolutePath().toString()).start();    } else     Desktop.getDesktop().open(isFolder ? path.toFile() : path.getParent().toFile());  } catch (  final IOException ie) {    LEnv.LOGGER.warning("Failed to open file browser!",ie);  }}  }
class C{  private <T>T processExtremes(Stamp forX,Stamp forY,BiFunction<Long,Long,T> op){  IntegerStamp xStamp=(IntegerStamp)forX;  IntegerStamp yStamp=(IntegerStamp)forY;  JavaKind kind=getStackKind();  assert kind == JavaKind.Int || kind == JavaKind.Long;  long[] xExtremes=getUnsignedExtremes(xStamp);  long[] yExtremes=getUnsignedExtremes(yStamp);  long min=Long.MAX_VALUE;  long max=Long.MIN_VALUE;  for (  long a : xExtremes) {    for (    long b : yExtremes) {      long result=kind == JavaKind.Int ? multiplyHighUnsigned((int)a,(int)b) : multiplyHighUnsigned(a,b);      min=Math.min(min,result);      max=Math.max(max,result);    }  }  return op.apply(min,max);}  }
class C{  public String toSignatureString(){  StringBuilder sb=new StringBuilder();  String accessLevel=convertModifiersToAccessLevel(mModifier);  if (!"".equals(accessLevel)) {    sb.append(accessLevel).append(" ");  }  if (!JDiffType.INTERFACE.equals(mClassType)) {    String modifierString=convertModifersToModifierString(mModifier);    if (!"".equals(modifierString)) {      sb.append(modifierString).append(" ");    }    sb.append("class ");  } else {    sb.append("interface ");  }  sb.append(mShortClassName);  if (mExtendedClass != null) {    sb.append(" extends ").append(mExtendedClass).append(" ");  }  if (implInterfaces.size() > 0) {    sb.append(" implements ");    for (int x=0; x < implInterfaces.size(); x++) {      String interf=implInterfaces.get(x);      sb.append(interf);      if (x + 1 != implInterfaces.size()) {        sb.append(", ");      }    }  }  return sb.toString();}  }
class C{  public void showPopup(){  if (getPopup() != null) {    getPopup().setVisible(true);  }}  }
class C{  public boolean isGame(){  return true;}  }
class C{  private FigureLayerComparator(){}  }
class C{  public TDoubleDoubleHashMap normalizedDistribution(){  return normalizedDistribution(absoluteDistribution());}  }
class C{  private void waitForUsers(URI hostUri,String authToken) throws Throwable {  URI usersLink=UriUtils.buildUri(hostUri,UserService.FACTORY_LINK);  Integer[] numberUsers=new Integer[1];  for (int i=0; i < 20; i++) {    Operation get=Operation.createGet(usersLink).forceRemote().addRequestHeader(Operation.REQUEST_AUTH_TOKEN_HEADER,authToken).setCompletion(null);    this.host.testStart(1);    this.host.send(get);    this.host.testWait();    if (numberUsers[0] == 2) {      break;    }    Thread.sleep(250);  }  assertTrue(numberUsers[0] == 2);}  }
class C{  public synchronized int send(byte[] buffer,int offset,int len) throws IOException {  if (m_state != PseudoTcpState.TCP_ESTABLISHED) {    throw new IOException("Socket not connected");  }  long available_space;  available_space=m_sbuf.getWriteRemaining();  if (available_space == 0) {    m_bWriteEnable=true;    return 0;  }  int written=queue(buffer,offset,len,false);  attemptSend(SendFlags.sfNone);  return written;}  }
class C{  public SampleAxioms(){  super();}  }
class C{  public void validateTagTypeKey(TagTypeKey tagTypeKey) throws IllegalArgumentException {  Assert.notNull(tagTypeKey,"A tag type key must be specified.");  tagTypeKey.setTagTypeCode(alternateKeyHelper.validateStringParameter("tag type code",tagTypeKey.getTagTypeCode()));}  }
class C{  public static BigInteger nextPrime(long n){  long i;  boolean found=false;  long result=0;  if (n <= 1) {    return BigInteger.valueOf(2);  }  if (n == 2) {    return BigInteger.valueOf(3);  }  for (i=n + 1 + (n & 1); (i <= n << 1) && !found; i+=2) {    for (long j=3; (j <= i >> 1) && !found; j+=2) {      if (i % j == 0) {        found=true;      }    }    if (found) {      found=false;    } else {      result=i;      found=true;    }  }  return BigInteger.valueOf(result);}  }
class C{  @Override public void addCharacterToOutput(final Entry<Character,GrayscaleMatrix> characterEntry,final int[] sourceImagePixels,final int tileX,final int tileY,final int imageWidth){  this.output.append(characterEntry.getKey());  if ((tileX + 1) * this.characterCache.getCharacterImageSize().getWidth() == imageWidth) {    this.output.append(System.lineSeparator());  }}  }
class C{  @VisibleForTesting static int chooseTableSize(int setSize){  if (setSize == 1) {    return 2;  }  int tableSize=Integer.highestOneBit(setSize - 1) << 1;  while (tableSize * DESIRED_LOAD_FACTOR < setSize) {    tableSize<<=1;  }  return tableSize;}  }
class C{  public void validateMinimum(){  double newMin;  try {    newMin=Double.parseDouble(this.minimumRangeValue.getText());    if (newMin >= this.maximumValue) {      newMin=this.minimumValue;    }  } catch (  NumberFormatException e) {    newMin=this.minimumValue;  }  this.minimumValue=newMin;  this.minimumRangeValue.setText(Double.toString(this.minimumValue));}  }
class C{  public static void init(ActorSystem actorSystem){  if (instance == null) {    instance=actorSystem.actorOf(Props.create(BatchSigner.class));  }}  }
class C{  private static void dump(PrintData pd){  dumpHeader(pd);  for (int i=0; i < pd.getRowCount(); i++)   dumpRow(pd,i);}  }
class C{  public boolean isHIGHER(){  return value == HIGHER;}  }
class C{  public Matrix4x3d rotateZ(double ang){  return rotateZ(ang,this);}  }
class C{  @Override protected URLConnection openConnection(URL url,Proxy proxy) throws IOException {  if (url == null || proxy == null) {    throw new IllegalArgumentException("url == null || proxy == null");  }  return new FtpURLConnection(url,proxy);}  }
class C{  private boolean saveMacro(){  if (firstTime) {    try {      Thread.sleep(firstTimeSleep);    } catch (    InterruptedException e) {      e.printStackTrace();    }  }  firstTime=false;  byte[] macroAccy=new byte[macroSize];  int index=0;  int accyNum=0;  accyNum=getAccyRow(macroAccy,index,textAccy1,accyTextField1,cmdButton1);  if (accyNum < 0) {    return false;  }  if (accyNum > 0) {    index+=2;  }  accyNum=getAccyRow(macroAccy,index,textAccy2,accyTextField2,cmdButton2);  if (accyNum < 0) {    return false;  }  if (accyNum > 0) {    index+=2;  }  accyNum=getAccyRow(macroAccy,index,textAccy3,accyTextField3,cmdButton3);  if (accyNum < 0) {    return false;  }  if (accyNum > 0) {    index+=2;  }  accyNum=getAccyRow(macroAccy,index,textAccy4,accyTextField4,cmdButton4);  if (accyNum < 0) {    return false;  }  if (accyNum > 0) {    index+=2;  }  accyNum=getAccyRow(macroAccy,index,textAccy5,accyTextField5,cmdButton5);  if (accyNum < 0) {    return false;  }  if (accyNum > 0) {    index+=2;  }  accyNum=getAccyRow(macroAccy,index,textAccy6,accyTextField6,cmdButton6);  if (accyNum < 0) {    return false;  }  if (accyNum > 0) {    index+=2;  }  accyNum=getAccyRow(macroAccy,index,textAccy7,accyTextField7,cmdButton7);  if (accyNum < 0) {    return false;  }  if (accyNum > 0) {    index+=2;  }  if (!isUsb) {    accyNum=getAccyRow(macroAccy,index,textAccy8,accyTextField8,cmdButton8);    if (accyNum < 0) {      return false;    }    if (accyNum > 0) {      index+=2;    }    accyNum=getAccyRow(macroAccy,index,textAccy9,accyTextField9,cmdButton9);    if (accyNum < 0) {      return false;    }    if (accyNum > 0) {      index+=2;    }  }  accyNum=getAccyRow(macroAccy,index,textAccy10,accyTextField10,cmdButton10);  if (accyNum < 0) {    JOptionPane.showMessageDialog(this,rb.getString("EnterMacroNumberLine10"),rb.getString("NceMacro"),JOptionPane.ERROR_MESSAGE);    return false;  }  processMemory(false,true,macroNum,macroAccy);  return true;}  }
class C{  private boolean matchesMobile4g(NetworkIdentity ident){  ensureSubtypeAvailable();  if (ident.mType == TYPE_WIMAX) {    return true;  } else   if (matchesMobile(ident)) {switch (getNetworkClass(ident.mSubType)) {case NETWORK_CLASS_4_G:      return true;  }}return false;}  }
class C{  public void writeToBuffer(ByteBuf buffer) throws Exception {  if (id != -1) {    Type.VAR_INT.write(buffer,id);  }  if (readableObjects.size() > 0) {    packetValues.addAll(readableObjects);    readableObjects.clear();  }  int index=0;  for (  Pair<Type,Object> packetValue : packetValues) {    try {      Object value=packetValue.getValue();      if (value != null) {        if (!packetValue.getKey().getOutputClass().isAssignableFrom(value.getClass())) {          if (packetValue.getKey() instanceof TypeConverter) {            value=((TypeConverter)packetValue.getKey()).from(value);          } else {            System.out.println("Possible type mismatch: " + value.getClass().getName() + " -> "+ packetValue.getKey().getOutputClass());          }        }      }      packetValue.getKey().write(buffer,value);    } catch (    Exception e) {      throw new InformativeException(e).set("Index",index).set("Type",packetValue.getKey().getTypeName()).set("Packet ID",getId()).set("Data",packetValues);    }    index++;  }  writeRemaining(buffer);}  }
class C{  public RandomDecisionTree(int numFeatures,int maxDepth,int minSamples,TreePruner.PruningMethod pruningMethod,double testProportion){  super(maxDepth,minSamples,pruningMethod,testProportion);  setRandomFeatureCount(numFeatures);}  }
class C{  protected void fireCommentEvent(char[] chars,int start,int length) throws org.xml.sax.SAXException {  if (m_tracer != null) {    flushMyWriter();    m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_COMMENT,new String(chars,start,length));  }}  }
class C{  private void init(Context context,AttributeSet attrs,RuqusTheme theme){  inflate(context,R.layout.rqv_card,this);  outlineView=(FrameLayout)findViewById(R.id.outline);  outlineTextView=(TextView)findViewById(R.id.outline_text);  cardView=(CardView)findViewById(R.id.card);  cardTextView=(TextView)findViewById(R.id.card_text);  setTheme(theme);  TypedArray typedArray=context.obtainStyledAttributes(attrs,R.styleable.RQVCard);  mode=typedArray.getInt(R.styleable.RQVCard_rqv_card_mode,0) == 0 ? Mode.OUTLINE : Mode.CARD;  outlineTextView.setText(typedArray.getString(R.styleable.RQVCard_rqv_outline_text));  cardTextView.setText(typedArray.getString(R.styleable.RQVCard_rqv_card_text));  typedArray.recycle();}  }
class C{  public void onUndeploy(ClassLoader ldr){  for (  Class<?> cls : descByCls.keySet()) {    if (ldr.equals(cls.getClassLoader()))     descByCls.remove(cls);  }  U.clearClassCache(ldr);}  }
class C{  @Override public int compare(final Long o1,final Long o2){  if (o1.longValue() < o2.longValue())   return 1;  if (o1.longValue() > o2.longValue())   return -1;  return 0;}  }
class C{  public void testResourceParameterOfListType(){  doTest();}  }
class C{  public TeXFormula add(String s) throws ParseException {  if (s != null && s.length() != 0) {    textStyle=null;    add(new TeXFormula(s));  }  return this;}  }
class C{  public ResponseEntity<List<Recommendation>> defaultRecommendations(int productId){  LOG.warn("Using fallback method for recommendation-service");  return util.createResponse(Arrays.asList(new Recommendation(productId,1,"Fallback Author 1",1,"Fallback Content 1")),HttpStatus.OK);}  }
class C{  private void cmd_annotateDifference(){  BigDecimal previousValue, actualValue, difference;  previousValue=(BigDecimal)v_previousBalance.getValue();  actualValue=(BigDecimal)v_ActualBalance.getValue();  difference=actualValue.subtract(previousValue);  MCashBook cashBook=new MCashBook(p_ctx,p_pos.getC_CashBook_ID(),null);  Timestamp today=TimeUtil.getDay(System.currentTimeMillis());  MCash cash=MCash.get(p_ctx,cashBook.getC_CashBook_ID(),today,null);  if (cash != null && cash.get_ID() != 0 && difference.compareTo(cash.getStatementDifference()) != 0) {    MCashLine cl=new MCashLine(cash);    cl.setCashType(MCashLine.CASHTYPE_Difference);    cl.setAmount(difference);    cl.setDescription(Msg.translate(p_pos.getCtx(),"Cash Scrutiny -> Before: ") + previousValue + " Now: "+ actualValue);    cl.saveEx();  }  cash=MCash.get(p_pos.getCtx(),p_pos.getC_CashBook_ID(),today,null);  v_previousBalance.setValue(cash.getEndingBalance());  v_ActualBalance.setValue(Env.ZERO);  v_difference.setValue(Env.ZERO);}  }
class C{  public boolean hasJpgThumbnail(){  if (getThumbnailType() != ExifDirectory.COMPRESSION_JPEG)   return false;  byte[] thumbData;  try {    ExifDirectory exif=(ExifDirectory)metadata.getDirectory(ExifDirectory.class);    thumbData=exif.getThumbnailData();  } catch (  MetadataException e) {    return false;  }  if (thumbData.length > 2) {    int magicNumber;    magicNumber=(thumbData[0] & 0xFF) << 8;    magicNumber|=(thumbData[1] & 0xFF);    if (magicNumber == ImageMetadataReader.JPEG_FILE_MAGIC_NUMBER)     return true;  }  return false;}  }
class C{  private void waitForRScriptInitialized() throws InterpreterException {synchronized (rScriptInitializeNotifier) {    long startTime=System.nanoTime();    while (rScriptInitialized == false && rScriptRunning && System.nanoTime() - startTime < 10L * 1000 * 1000000) {      try {        rScriptInitializeNotifier.wait(1000);      } catch (      InterruptedException e) {        logger.error(e.getMessage(),e);      }    }  }  String errorMessage="";  try {    initialOutput.flush();    errorMessage=new String(initialOutput.toByteArray());  } catch (  IOException e) {    e.printStackTrace();  }  if (rScriptInitialized == false) {    throw new InterpreterException("sparkr is not responding " + errorMessage);  }}  }
class C{  private DefaultUnitConverter(){}  }
class C{  public static String morpha(String text,boolean tags){  if (text.isEmpty()) {    return "";  }  String[] textParts=whitespace.split(text);  StringBuilder result=new StringBuilder();  try {    for (    String textPart : textParts) {      Morpha morpha=new Morpha(new StringReader(textPart),tags);      if (result.length() != 0) {        result.append(" ");      }      result.append(morpha.next());    }  } catch (  Error e) {    return text;  }catch (  java.io.IOException e) {    return text;  }  return result.toString();}  }
class C{  protected void readUnzipedResponse(InputStream input) throws IOException {  super.readResponse(input);}  }
class C{  public EventStream<S> events() throws Exception {  return EventStream.empty();}  }
class C{  public Object invoke(Remote obj,java.lang.reflect.Method method,Object[] params,long opnum) throws Exception {  boolean force=false;  RemoteRef localRef;  Exception exception=null;synchronized (this) {    if (ref == null) {      localRef=activate(force);      force=true;    } else {      localRef=ref;    }  }  for (int retries=MAX_RETRIES; retries > 0; retries--) {    try {      return localRef.invoke(obj,method,params,opnum);    } catch (    NoSuchObjectException e) {      exception=e;    }catch (    ConnectException e) {      exception=e;    }catch (    UnknownHostException e) {      exception=e;    }catch (    ConnectIOException e) {      exception=e;    }catch (    MarshalException e) {      throw e;    }catch (    ServerError e) {      throw e;    }catch (    ServerException e) {      throw e;    }catch (    RemoteException e) {synchronized (this) {        if (localRef == ref) {          ref=null;        }      }      throw e;    }    if (retries > 1) {synchronized (this) {        if (localRef.remoteEquals(ref) || ref == null) {          RemoteRef newRef=activate(force);          if (newRef.remoteEquals(localRef) && exception instanceof NoSuchObjectException && force == false) {            newRef=activate(true);          }          localRef=newRef;          force=true;        } else {          localRef=ref;          force=false;        }      }    }  }  throw exception;}  }
class C{  public String lookupCacheSizeTipText(){  return "Set the maximum size of the lookup cache of evaluated subsets. This is " + "expressed as a multiplier of the number of attributes in the data set. " + "(default = 1).";}  }
class C{  private SimpleObject providerToJson(Provider provider){  SimpleObject jsonForm=new SimpleObject();  if (provider != null) {    jsonForm.add(USER_ID,provider.getUuid());    jsonForm.add(FULL_NAME,provider.getName());    Person person=provider.getPerson();    if (person != null) {      jsonForm.add(GIVEN_NAME,person.getGivenName());      jsonForm.add(FAMILY_NAME,person.getFamilyName());    }  }  return jsonForm;}  }
class C{  @Override public int next() throws XMLStreamException {  log.fine("next()");  if (event == START_DOCUMENT) {    event=START_ELEMENT;    elementIndex.currentElement=parser.getDocument().getBody().getElement();  } else   if (event == START_ELEMENT) {    elementIndex.index=0;    event=nextInElement(false);  } else   if (event == ATTRIBUTE) {    elementIndex.index=0;    event=nextInElement(false);  } else   if (event == CHARACTERS) {    elementIndex.index++;    event=nextInElement(false);  } else   if (event == SPACE) {    elementIndex.index++;    event=nextInElement(false);  } else   if (event == ENTITY_REFERENCE) {    elementIndex.index++;    event=nextInElement(false);  } else   if (event == PROCESSING_INSTRUCTION) {    elementIndex.index++;    event=nextInElement(false);  } else   if (event == END_ELEMENT) {    if (parents.isEmpty()) {      event=END_DOCUMENT;    } else {      elementIndex=parents.pop();      elementIndex.index++;      event=nextInElement(false);    }  } else   if (event == END_DOCUMENT) {    throw new XMLStreamException("End of coument reached!");  } else {    throw new XMLStreamException("Invalid event state!");  }  log.log(Level.FINE,"next(): {0}",event);  return event;}  }
class C{  @SuppressWarnings("unchecked") public synchronized List<Relationship> findAllRelationshipsTo(Vertex vertex){  Query query=this.entityManager.createQuery("Select r from Relationship r where r.target = :vertex or r.type = :vertex");  setHints(query);  query.setParameter("vertex",vertex);  return query.getResultList();}  }
class C{  public static String convertMethodSignature(InvokeInstruction inv,ConstantPoolGen cpg){  return convertMethodSignature(inv.getClassName(cpg),inv.getName(cpg),inv.getSignature(cpg));}  }
class C{  @Override public int count(Selector obj){  if ((obj.getMask() & Selector.MASK_INSTANCE) > 0) {    if (device.findObject(obj.toUiSelector()).exists())     return 1; else     return 0;  } else {    UiSelector sel=obj.toUiSelector();    if (!device.findObject(sel).exists())     return 0;    int low=1;    int high=2;    sel=sel.instance(high - 1);    while (device.findObject(sel).exists()) {      low=high;      high=high * 2;      sel=sel.instance(high - 1);    }    while (high > low + 1) {      int mid=(low + high) / 2;      sel=sel.instance(mid - 1);      if (device.findObject(sel).exists())       low=mid; else       high=mid;    }    return low;  }}  }
class C{  private boolean isComputeHost(ComputeDescription computeDescription){  List<String> supportedChildren=computeDescription.supportedChildren;  return supportedChildren != null && supportedChildren.contains(ComputeType.VM_GUEST.name());}  }
class C{  public File prepareTestDir(String logDirName) throws Exception {  File logDir=new File(logDirName);  FilePath path=new FilePath(logDir.getAbsolutePath());  fileIO.delete(path,true);  fileIO.mkdir(path);  return logDir;}  }
class C{  public void receiveErrorqueryAssociatedPortsForProcessor(java.lang.Exception e){}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  private void dump(File from,OutputStream out) throws IOException {  writeHeader(from,out);  FileInputStream in=null;  try {    in=new FileInputStream(from);    int count;    while ((count=in.read(buffer)) != -1) {      out.write(buffer,0,count);    }  }  finally {    closeQuietly(in);  }}  }
class C{  public static long lastLocalId(){  return cntGen.get();}  }
class C{  RoleEventImpl(Region region,Operation op,Object callbackArgument,boolean originRemote,DistributedMember distributedMember,Set requiredRoles){  super(region,op,callbackArgument,originRemote,distributedMember);  this.requiredRoles=Collections.unmodifiableSet(requiredRoles);}  }
class C{  public QLFFilesCollection(File directory,String extension,Class<F> featureClass,String pathRegexFind,String pathRegexRep){  this(featureClass,pathRegexFind,pathRegexRep);  processDirs(directory,extension);}  }
class C{  public static void main(String[] args) throws IOException {  boolean enableOutput=true;  boolean outputToFile=false;  String inputFolder=LrMc.class.getClassLoader().getResource("workload/planetlab").getPath();  String outputFolder="output";  String workload="20110303";  String vmAllocationPolicy="lr";  String vmSelectionPolicy="mc";  String parameter="1.2";  new PlanetLabRunner(enableOutput,outputToFile,inputFolder,outputFolder,workload,vmAllocationPolicy,vmSelectionPolicy,parameter);}  }
class C{  void make(BulkTest bulk){  Class c=bulk.getClass();  Method[] all=c.getMethods();  for (int i=0; i < all.length; i++) {    if (isTest(all[i]))     addTest(bulk,all[i]);    if (isBulk(all[i]))     addBulk(bulk,all[i]);  }}  }
class C{  private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {  String inName=(String)in.readObject();  String inDescription=(String)in.readObject();  Object inValue=in.readObject();  Class inClass=(Class)in.readObject();  boolean inUserModifiable=in.readBoolean();  Assert.assertTrue(inName != null);  Assert.assertTrue(inDescription != null);  Assert.assertTrue(inValue != null);  Assert.assertTrue(inClass != null);  this.deserialized=true;  this.name=inName;  setInternalState(inDescription,inValue,inClass,inUserModifiable);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static String escape(String s){  if (s == null)   return null;  StringBuffer sb=new StringBuffer();  escape(s,sb);  return sb.toString();}  }
class C{  public ArrayDeque<E> clone(){  try {    @SuppressWarnings("unchecked") ArrayDeque<E> result=(ArrayDeque<E>)super.clone();    result.elements=Arrays.copyOf(elements,elements.length);    return result;  } catch (  CloneNotSupportedException e) {    throw new AssertionError();  }}  }
class C{  public void generateCode(BlockScope currentScope){  if ((this.bits & IsReachable) == 0) {    return;  }  generateInit: {    if (this.initialization == null)     break generateInit;    if (this.binding.resolvedPosition < 0) {      if (this.initialization.constant != Constant.NotAConstant)       break generateInit;      this.initialization.generateCode(currentScope,false);      break generateInit;    }    this.initialization.generateCode(currentScope,true);  }}  }
class C{  public static boolean isPotentialValidLink(File file) throws IOException {  boolean isPotentiallyValid;  try (InputStream fis=new FileInputStream(file)){    final int minimumLength=0x64;    isPotentiallyValid=file.isFile() && file.getName().toLowerCase().endsWith(".lnk") && fis.available() >= minimumLength && isMagicPresent(getBytes(fis,32));  }   return isPotentiallyValid;}  }
class C{  public IGameMove decideMove(IGameState state){  if (state.isDraw())   return null;  if (state.isWin())   return null;  Collection<IGameMove> moves=logic.validMoves(this,state);  if (moves.size() == 0) {    return null;  } else {    IGameMove[] mvs=moves.toArray(new IGameMove[]{});    int idx=(int)(Math.random() * moves.size());    return mvs[idx];  }}  }
class C{  public static int nextPowerOf2(int x){  long i=1;  while (i < x && i < (Integer.MAX_VALUE / 2)) {    i+=i;  }  return (int)i;}  }
class C{  public Point2D inverseTransform(Point2D viewPoint){  Point2D viewCenter=getViewCenter();  double viewRadius=getViewRadius();  double ratio=getRatio();  double dx=viewPoint.getX() - viewCenter.getX();  double dy=viewPoint.getY() - viewCenter.getY();  dx*=ratio;  Point2D pointFromCenter=new Point2D.Double(dx,dy);  PolarPoint polar=PolarPoint.cartesianToPolar(pointFromCenter);  double radius=polar.getRadius();  if (radius > viewRadius)   return delegate.inverseTransform(viewPoint);  radius/=viewRadius;  radius=Math.abs(Math.tan(radius));  radius/=Math.PI / 2;  radius*=viewRadius;  double mag=Math.tan(Math.PI / 2 * magnification);  radius/=mag;  polar.setRadius(radius);  Point2D projectedPoint=PolarPoint.polarToCartesian(polar);  projectedPoint.setLocation(projectedPoint.getX() / ratio,projectedPoint.getY());  Point2D translatedBack=new Point2D.Double(projectedPoint.getX() + viewCenter.getX(),projectedPoint.getY() + viewCenter.getY());  return delegate.inverseTransform(translatedBack);}  }
class C{  private boolean iconBoundsIntersectBar(RectF barBounds,Rect icon,double scaleFactor){  int iconL=icon.left + scale(icon.width(),scaleFactor);  int iconT=icon.top + scale(icon.height(),scaleFactor);  int iconR=icon.right - scale(icon.width(),scaleFactor);  int iconB=icon.bottom - scale(icon.height(),scaleFactor);  return barBounds.intersects(iconL,iconT,iconR,iconB);}  }
class C{  public void closeRegistration(){  flushDeferrables();  for (  Map.Entry<String,ClassPlugins> e : registrations.entrySet()) {    e.getValue().initializeMap();  }}  }
class C{  public static String toGml(final IDirectedGraph<?,? extends IGraphEdge<?>> graph){  Preconditions.checkNotNull(graph,"Graph argument can not be null");  final StringBuilder sb=new StringBuilder();  sb.append("graph\n" + "[\n");  int currentId=0;  final Map<Object,Integer> nodeMap=new HashMap<>();  for (  final Object node : graph.getNodes()) {    sb.append("\tnode\n" + "\t[\n" + "\tid "+ "\n");    sb.append(currentId);    sb.append("\tlabel \"");    sb.append(node);    sb.append("\"\n" + "\t]\n");    nodeMap.put(node,currentId);    ++currentId;  }  for (  final IGraphEdge<?> edge : graph.getEdges()) {    sb.append("\tedge\n" + "\t[\n" + "\tsource ");    sb.append(nodeMap.get(edge.getSource()));    sb.append("\n" + "\ttarget ");    sb.append(nodeMap.get(edge.getTarget()));    sb.append("\n" + "\tgraphics\n" + "\t[\n"+ "\t\tfill \"#000000\"\n"+ "\t\ttargetArrow \"standard\"\n"+ "\t]\n"+ "\t]\n");  }  sb.append("]\n");  return sb.toString();}  }
class C{  void cachePage(long pos,Page page,int memory){  if (cache != null) {    cache.put(pos,page,memory);  }}  }
class C{  public static Class<?> typeToClass(int type){  Class<?> result;switch (type) {case Types.BIGINT:    result=Long.class;  break;case Types.BINARY:result=String.class;break;case Types.BIT:result=Boolean.class;break;case Types.CHAR:result=Character.class;break;case Types.DATE:result=java.sql.Date.class;break;case Types.DECIMAL:result=Double.class;break;case Types.DOUBLE:result=Double.class;break;case Types.FLOAT:result=Float.class;break;case Types.INTEGER:result=Integer.class;break;case Types.LONGVARBINARY:result=String.class;break;case Types.LONGVARCHAR:result=String.class;break;case Types.NULL:result=String.class;break;case Types.NUMERIC:result=Double.class;break;case Types.OTHER:result=String.class;break;case Types.REAL:result=Double.class;break;case Types.SMALLINT:result=Short.class;break;case Types.TIME:result=java.sql.Time.class;break;case Types.TIMESTAMP:result=java.sql.Timestamp.class;break;case Types.TINYINT:result=Short.class;break;case Types.VARBINARY:result=String.class;break;case Types.VARCHAR:result=String.class;break;default :result=null;}return result;}  }
class C{  private String noteToString(Repository repo,Note note) throws MissingObjectException, IOException, UnsupportedEncodingException {  ObjectLoader loader=repo.open(note.getData());  ByteArrayOutputStream baos=new ByteArrayOutputStream();  loader.copyTo(baos);  return new String(baos.toByteArray(),"UTF-8");}  }
class C{  @TransactionAttribute(TransactionAttributeType.REQUIRES_NEW) public void initTimers() throws ValidationException {  initAllTimers();}  }
class C{  public static String tbiIndexToUniqueString(InputStream is) throws IOException {  final StringBuilder ret=new StringBuilder();  final byte[] buf=new byte[4096];  readIOFully(is,buf,4);  final String header=new String(buf,0,4);  ret.append("Header correct: ").append(header.equals("TBI\u0001")).append(StringUtils.LS);  readIOFully(is,buf,4);  final int numRefs=ByteArrayIOUtils.bytesToIntLittleEndian(buf,0);  ret.append("numRefs: ").append(numRefs).append(StringUtils.LS);  readIOFully(is,buf,28);  final int format=ByteArrayIOUtils.bytesToIntLittleEndian(buf,0);  final int colSeq=ByteArrayIOUtils.bytesToIntLittleEndian(buf,4);  final int colBeg=ByteArrayIOUtils.bytesToIntLittleEndian(buf,8);  final int colEnd=ByteArrayIOUtils.bytesToIntLittleEndian(buf,12);  final int meta=ByteArrayIOUtils.bytesToIntLittleEndian(buf,16);  final int skip=ByteArrayIOUtils.bytesToIntLittleEndian(buf,20);  final int refNameLength=ByteArrayIOUtils.bytesToIntLittleEndian(buf,24);  final String formatStr;  formatStr=TbiFormat.values()[format & 0xffff].name();  ret.append("Format: ").append(formatStr).append(" 0-based: ").append((format & 0x10000) != 0).append(StringUtils.LS);  ret.append("Columns: (refName:Start-End) ").append(colSeq).append(":").append(colBeg).append("-").append(colEnd).append(StringUtils.LS);  ret.append("Meta: ").append((char)meta).append(StringUtils.LS);  ret.append("Skip: ").append(skip).append(StringUtils.LS);  final byte[] names=new byte[refNameLength];  readIOFully(is,names,names.length);  ret.append("Sequence names: ");  boolean first=true;  int off=0;  for (int i=0; i < numRefs; i++) {    int newOff=off;    while (newOff < names.length && names[newOff] != 0) {      newOff++;    }    if (!first) {      ret.append(", ");    }    ret.append(new String(names,off,newOff - off));    off=newOff + 1;    first=false;  }  ret.append(StringUtils.LS);  ret.append(indicesToUniqueString(is,numRefs)).append(StringUtils.LS);  return ret.toString();}  }
class C{  public void addFeatureChangeListener(final FeatureChangeListener l){  featureListeners.add(l);}  }
class C{  protected UserPassword(){  super();}  }
class C{  public void firePropertyChange(String propertyName,float oldValue,float newValue){}  }
class C{  public void testUpdate5(){  int factor=3;  String updateQuery="UPDATE " + DatabaseCreator.TEST_TABLE1 + " SET field2=field2 *"+ factor;  try {    String selectQuery="SELECT field2 FROM " + DatabaseCreator.TEST_TABLE1;    ResultSet result=statement.executeQuery(selectQuery);    HashSet<BigDecimal> values=new HashSet<BigDecimal>();    int num=statement.executeUpdate(updateQuery);    assertEquals("Not all records in the database were updated",numberOfRecords,num);    result=statement.executeQuery(selectQuery);    assertTrue("Not all records were updated",values.isEmpty());    result.close();  } catch (  SQLException e) {    fail("Unexpected exception" + e.getMessage());  }}  }
class C{  public final boolean isCaretBlinkEnabled(){  return caretBlinks;}  }
class C{  public void testBug73663() throws Exception {  this.rs=this.stmt.executeQuery("show variables like 'collation_server'");  this.rs.next();  String collation=this.rs.getString(2);  if (collation != null && collation.startsWith("utf8mb4") && "utf8mb4".equals(((MySQLConnection)this.conn).getServerVariable("character_set_server"))) {    Properties p=new Properties();    p.setProperty("characterEncoding","UTF-8");    p.setProperty("statementInterceptors",Bug73663StatementInterceptor.class.getName());    getConnectionWithProps(p);  } else {    System.out.println("testBug73663 was skipped: This test is only run when character_set_server=utf8mb4 and collation-server set to one of utf8mb4 collations.");  }}  }
class C{  @Override public void removeEdge(final InstructionGraphEdge edge){  super.removeEdge(edge);}  }
class C{  public void addApps(List<AppInfo> apps){  mApps.addApps(apps);}  }
class C{  public void stop(){  final String methodName="stop";synchronized (lifecycle) {    log.fine(CLASS_NAME,methodName,"850");    if (running) {      running=false;      receiving=false;      if (!Thread.currentThread().equals(recThread)) {        try {          recThread.join();        } catch (        InterruptedException ex) {        }      }    }  }  recThread=null;  log.fine(CLASS_NAME,methodName,"851");}  }
class C{  First(){}  }
class C{  @Override public String toString(){  String temp="";  for (int i=0; i < variables.length; i++) {    temp+=variables[i].toString();    temp+="\n";  }  return structName + "\n" + temp;}  }
class C{  public void addActionListener(ActionListener l){  dispatcher.addListener(l);}  }
class C{  @Override protected SystemMemberCache createSystemMemberCache(GemFireVM vm) throws org.apache.geode.admin.AdminException {  if (managedSystemMemberCache == null) {    managedSystemMemberCache=new SystemMemberCacheJmxImpl(vm);  }  return managedSystemMemberCache;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile=args[0];  if (inputFile.toLowerCase().contains(".dep")) {    calculateRaster();  } else   if (inputFile.toLowerCase().contains(".shp")) {    calculateVector();  } else {    showFeedback("There was a problem reading the input file.");  }}  }
class C{  public void test_compressed_timestamp_01b() throws Exception {  new TestHelper("compressed-timestamp-01b","compressed-timestamp-01b.rq","compressed-timestamp.ttl","compressed-timestamp-01.srx").runTest();}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  private void addTag(String newTag){  if (StringUtils.isBlank(newTag)) {    return;  }synchronized (tagsObservable) {    if (tagsObservable.contains(newTag)) {      return;    }    tagsObservable.add(newTag);  }  firePropertyChange("tag",null,tagsObservable);}  }
class C{  public EObject basicGetAstElement(){  return astElement;}  }
class C{  public void detach(){  if (systemOverlay) {    getWindowManager().removeView(this);  } else {    ((ViewGroup)getActivityContentView()).removeView(this);  }}  }
class C{  private static void patternCompile(){  try {    ptnNumber=Pattern.compile(strNumberPattern);    ptnShortDate=Pattern.compile(strShortDatePattern);    ptnLongDate=Pattern.compile(strLongDatePattern);    ptnPercentage=Pattern.compile(strPercentagePattern);    ptnCurrency=Pattern.compile(strCurrencyPattern);    ptnViCurrency=Pattern.compile(strViCurrencyPattern);  } catch (  PatternSyntaxException ex) {    System.err.println(ex.getMessage());    System.exit(1);  }}  }
class C{  public NotificationChain basicSetParams(ExpressionList newParams,NotificationChain msgs){  ExpressionList oldParams=params;  params=newParams;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,GamlPackage.PARAMETERS__PARAMS,oldParams,newParams);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  static public int unpackInt(DataInput is) throws IOException {  int ret=0;  byte v;  do {    v=is.readByte();    ret=(ret << 7) | (v & 0x7F);  } while ((v & 0x80) == 0);  return ret;}  }
class C{  public Object loadWorkflowData(String stepId,String key){  Object data=null;  String workflowUri=getMainWorkflowUri(stepId);  try {    if (workflowUri != null) {      String dataPath=String.format(_zkStepDataPath,workflowUri) + String.format(_zkWorkflowData,key);      if (_dataManager.checkExists(dataPath) != null) {        data=_dataManager.getData(dataPath,false);      }    }  } catch (  Exception ex) {    String exMsg="Exception adding global data to workflow from stepId: " + stepId + ": "+ ex.getMessage();    _log.error(exMsg);    data=null;  }  return data;}  }
class C{  public static void fillByte(byte[] array,byte x){  for (int i=0; i < array.length; i++) {    array[i]=x;  }}  }
class C{  @Override public void addDictionaryChunk(List<byte[]> dictionaryChunk){  dictionaryChunks.add(dictionaryChunk);  if (null == dictionaryByteArrayToSurrogateKeyMap) {    createDictionaryByteArrayToSurrogateKeyMap(dictionaryChunk.size());  }  addDataToDictionaryMap();}  }
class C{  public OMWarpingImage(BufferedImage bi){  setWarp(bi,LatLonGCT.INSTANCE,new DataBounds(-180,-90,180,90));}  }
class C{  private void acquirePrecachingWakeLock(){  if (mPrecachingWakeLock == null) {    PowerManager pm=(PowerManager)getSystemService(Context.POWER_SERVICE);    mPrecachingWakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,TAG);  }  mPrecachingWakeLock.acquire();}  }
class C{  public static List<Long> entropyHybridTest(GeoTimeSerie gts,int buckets_per_period,int periods_per_piece,int k,double alpha) throws WarpScriptException {  doubleCheck(gts);  List<Long> anomalous_ticks=new ArrayList<Long>();  if (!GTSHelper.isBucketized(gts)) {    throw new WarpScriptException("GTS must be bucketized");  }  if (k >= periods_per_piece * buckets_per_period / 2) {    throw new WarpScriptException("Upper bound of number of outliers must be less than half of the number of observations per piece");  }  GeoTimeSerie subgts=null;  GeoTimeSerie subsubgts=null;  GeoTimeSerie seasonal=null;  long pieces=gts.bucketcount / buckets_per_period / periods_per_piece;  int bpp=periods_per_piece * buckets_per_period;  long lb=gts.lastbucket;  long bs=gts.bucketspan;  for (int u=0; u < pieces; u++) {    long start=lb - bs * ((pieces - u) * bpp - 1);    long stop=lb - bs * (pieces - u - 1) * bpp;    subgts=GTSHelper.subSerie(gts,start,stop,false,false,subgts);    subgts.lastbucket=stop;    subgts.bucketcount=bpp;    subgts.bucketspan=bs;    if (null == seasonal) {      seasonal=new GeoTimeSerie(bpp);      seasonal.doubleValues=new double[bpp];      seasonal.ticks=new long[bpp];    } else {      GTSHelper.reset(seasonal);    }    seasonal.type=TYPE.DOUBLE;    for (int v=0; v < buckets_per_period; v++) {      subsubgts=GTSHelper.subCycleSerie(subgts,stop - v * bs,buckets_per_period,true,subsubgts);      double[] madsigma=madsigma(subsubgts,true);      double median=madsigma[0];      double mad=madsigma[1];      double sum=0.0D;      for (int w=0; w < subsubgts.values; w++) {        subsubgts.doubleValues[w]=0.0D != mad ? Math.abs((subsubgts.doubleValues[w] - median) / mad) : 1.0D;        sum+=subsubgts.doubleValues[w];      }      double entropy=0.0D;      for (int w=0; w < subsubgts.values; w++) {        subsubgts.doubleValues[w]/=sum;        double tmp=subsubgts.doubleValues[w];        if (0.0D != tmp) {          entropy-=tmp * Math.log(tmp);        }      }      if (0.0D != entropy) {        entropy/=Math.log(subsubgts.values);      } else {        entropy=1.0D;      }      for (int w=0; w < subsubgts.values; w++) {        GTSHelper.setValue(seasonal,subsubgts.ticks[w],entropy * subsubgts.doubleValues[w]);      }    }    GTSHelper.sort(seasonal);    double m=median(seasonal);    int idx=0;    for (int i=0; i < subgts.values; i++) {      idx=Arrays.binarySearch(seasonal.ticks,idx,seasonal.values,subgts.ticks[i]);      if (idx < 0) {        throw new WarpScriptException("Internal bug method entropyHybridTest: can't find tick " + subgts.ticks[i] + " in seasonal.ticks");      } else {        subgts.doubleValues[i]-=(seasonal.doubleValues[idx] + m);      }    }    anomalous_ticks.addAll(ESDTest(subgts,k,true,alpha));  }  return anomalous_ticks;}  }
class C{  public static void collectAndFireTriggers(final HashSet<PlayerID> players,final Match<TriggerAttachment> triggerMatch,final IDelegateBridge aBridge,final String beforeOrAfter,final String stepName){  final HashSet<TriggerAttachment> toFirePossible=collectForAllTriggersMatching(players,triggerMatch,aBridge);  if (toFirePossible.isEmpty()) {    return;  }  final HashMap<ICondition,Boolean> testedConditions=collectTestsForAllTriggers(toFirePossible,aBridge);  final List<TriggerAttachment> toFireTestedAndSatisfied=Match.getMatches(toFirePossible,AbstractTriggerAttachment.isSatisfiedMatch(testedConditions));  if (toFireTestedAndSatisfied.isEmpty()) {    return;  }  TriggerAttachment.fireTriggers(new HashSet<>(toFireTestedAndSatisfied),testedConditions,aBridge,beforeOrAfter,stepName,true,true,true,true);}  }
class C{  public static long[] clone(long[] array){  if (array == null) {    return null;  }  return (long[])array.clone();}  }
class C{  public ColorPredicate(String input) throws IllegalArgumentException {  String rest=input.trim().toLowerCase();  if (rest.startsWith("leaf")) {    this.isLeaf=true;    rest=rest.substring(4).trim();  } else {    this.isLeaf=false;  }  int endOfStartToken=0;  while (endOfStartToken < rest.length() && Character.isLetter(rest.charAt(endOfStartToken))) {    endOfStartToken++;  }  String startToken=rest.substring(0,endOfStartToken);  String macro=getMacro(startToken);  if (macro != null) {    rest=macro;  }  if (rest.startsWith("some")) {    this.isSome=true;    rest=rest.substring(4).trim();  } else   if (rest.startsWith("every")) {    this.isSome=false;    rest=rest.substring(5).trim();  } else {    throw new IllegalArgumentException("" + " Color predicate must start with the optional keyword `leaf'\n" + " followed by a legal macro name or `every' or `some'.");  }  this.set=0;  while (!rest.equals("")) {    if (rest.startsWith("omitted")) {      this.set=this.set | (1 << NUMBER_OF_OMITTED_STATE);      rest=rest.substring(7).trim();    } else     if (rest.startsWith("missing")) {      this.set=this.set | (1 << NUMBER_OF_MISSING_STATE);      rest=rest.substring(7).trim();    } else     if (rest.startsWith("(")) {      rest=rest.substring(1).trim();      int[][] stateSetSpec=new int[NUMBER_OF_PROVERS][];      for (int i=0; i < NUMBER_OF_PROVERS; i++) {        boolean invert=false;        if (rest.startsWith("-")) {          invert=true;          rest=rest.substring(1).trim();        }        boolean[] appears=new boolean[PROVER_STATUSES[i].length];        for (int j=0; j < appears.length; j++) {          appears[j]=invert;        }        String endChar=(i == NUMBER_OF_PROVERS - 1) ? ")" : ",";        while (rest.length() > 0 && !rest.startsWith(endChar)) {          int endOfToken=0;          while (endOfToken < rest.length() && Character.isLetter(rest.charAt(endOfToken))) {            endOfToken++;          }          String token=rest.substring(0,endOfToken);          rest=rest.substring(endOfToken).trim();          int statusNumber;          try {            statusNumber=numberOfProverStatus(i,token);          } catch (          IllegalArgumentException e) {            String errorMsg="Was expecting status of prover " + PROVER_NAMES[i] + " but found `"+ token+ "' followed by: \n `"+ rest+ "'";            throw new IllegalArgumentException(errorMsg);          }          appears[statusNumber]=!invert;        }        if (rest.length() == 0) {          throw new IllegalArgumentException("Color predicate specifier ended before `(...)' expression complete");        }        rest=rest.substring(1).trim();        int count=0;        for (int j=0; j < appears.length; j++) {          if (appears[j]) {            count++;          }        }        if (count == 0) {          if (invert) {            throw new IllegalArgumentException("A `-' must be followed by one or more statuses");          } else {            count=appears.length;            for (int j=0; j < count; j++) {              appears[j]=true;            }          }        }        stateSetSpec[i]=new int[count];        int k=0;        for (int j=0; j < appears.length; j++) {          if (appears[j]) {            stateSetSpec[i][k]=j;            k++;          }        }      }      this.set=this.set | bitVectorOfStates(stateSetSpec);    } else {      throw new IllegalArgumentException("Unexpected token at: `" + rest + "'");    }  }}  }
class C{  protected void transferFromFile(File idFile) throws IOException {  try (BufferedReader br=new BufferedReader(new FileReader(idFile))){    String line;    while ((line=br.readLine()) != null) {      line=line.trim();      if (line.length() > 0) {        transfer(line);      }    }  } }  }
class C{  public String toNamespacedString(){  return (_namespaceURI != null ? ("{" + _namespaceURI + "}"+ _localName) : _localName);}  }
class C{  @SuppressWarnings("deprecation") public void configureManagers(){  powerManager=new jmri.jmrix.nce.NcePowerManager(this);  InstanceManager.store(powerManager,jmri.PowerManager.class);  turnoutManager=new jmri.jmrix.nce.NceTurnoutManager(getNceTrafficController(),getSystemPrefix());  InstanceManager.setTurnoutManager(turnoutManager);  lightManager=new jmri.jmrix.nce.NceLightManager(getNceTrafficController(),getSystemPrefix());  InstanceManager.setLightManager(lightManager);  sensorManager=new jmri.jmrix.nce.NceSensorManager(getNceTrafficController(),getSystemPrefix());  InstanceManager.setSensorManager(sensorManager);  throttleManager=new jmri.jmrix.nce.NceThrottleManager(this);  InstanceManager.setThrottleManager(throttleManager);  if (getNceUsbSystem() != NceTrafficController.USB_SYSTEM_NONE) {    if (getNceUsbSystem() != NceTrafficController.USB_SYSTEM_POWERHOUSE) {    }  } else {    InstanceManager.setProgrammerManager(getProgrammerManager());  }  clockManager=new jmri.jmrix.nce.NceClockControl(getNceTrafficController(),getSystemPrefix());  InstanceManager.addClockControl(clockManager);  consistManager=new jmri.jmrix.nce.NceConsistManager(this);  InstanceManager.setConsistManager(consistManager);}  }
class C{  public void newLine() throws IOException {  out.append('\n');  for (int n=0; n < currentIndentLevel; n++)   out.append(indent);  currentLine++;  currentCol=currentIndentLevel * indent.length();}  }
class C{  @Override protected void checkForDuplicatSnapshotName(String name,Volume vplexVolume){  Volume snapshotSourceVolume=getVPLEXSnapshotSourceVolume(vplexVolume);  super.checkForDuplicatSnapshotName(name,snapshotSourceVolume);}  }
class C{  public boolean isOneAssetPerUOM(){  Object oo=get_Value(COLUMNNAME_IsOneAssetPerUOM);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public int value(){  return this.value;}  }
class C{  public boolean isRemove(){  boolean is;  if (m_editFlag == FolderEditFlag.REMOVE)   is=true; else   is=false;  return is;}  }
class C{  public static String encodeWebSafe(byte[] source,boolean doPadding){  return encode(source,0,source.length,WEBSAFE_ALPHABET,doPadding);}  }
class C{  @Override public void commence(HttpServletRequest request,HttpServletResponse response,AuthenticationException arg2) throws IOException, ServletException {  log.debug("Pre-authenticated entry point called. Rejecting access");  response.sendError(HttpServletResponse.SC_UNAUTHORIZED,"Access Denied");}  }
class C{  public int size(){  return _size;}  }
class C{  private List<Volume> createVolumeData(String name,int numVolumes){  List<Volume> volumes=new ArrayList<Volume>();  URI cgUri=createBlockConsistencyGroup(name + "-cg");  for (int i=1; i <= numVolumes; i++) {    Volume volume=new Volume();    URI volumeURI=URIUtil.createId(Volume.class);    testVolumeURIs.add(volumeURI);    volume.setId(volumeURI);    volume.setLabel(name + i);    volume.setConsistencyGroup(cgUri);    _dbClient.createObject(volume);  }  return volumes;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static void closeStream(Closeable stream){  if (stream != null) {    try {      stream.close();    } catch (    IOException e) {      android.util.Log.e("IO","Could not close stream",e);    }  }}  }
class C{  private static BufferedImage loadImage(final IdocScanInterface ui,int finalWidth,int finalHeight){  return loadImage(ui,finalWidth,finalHeight,0);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void configure(){  XpaSystemConnectionMemo memo=((XpaSystemConnectionMemo)getSystemConnectionMemo());  XpaTrafficController tc=memo.getXpaTrafficController();  tc.connectPort(this);  memo.setPowerManager(new jmri.jmrix.xpa.XpaPowerManager(tc));  jmri.InstanceManager.store(memo.getPowerManager(),jmri.PowerManager.class);  memo.setTurnoutManager(new jmri.jmrix.xpa.XpaTurnoutManager(memo));  jmri.InstanceManager.store(memo.getTurnoutManager(),jmri.TurnoutManager.class);  memo.setThrottleManager(new jmri.jmrix.xpa.XpaThrottleManager(memo));  jmri.InstanceManager.store(memo.getThrottleManager(),jmri.ThrottleManager.class);  tc.startTransmitThread();  sinkThread=new Thread(tc);  sinkThread.start();}  }
class C{  public void executeQuery(IMiniTable miniTable){  log.info("");  String sql="";  if (m_DD_Order_ID == null)   return;  sql=getOrderSQL();  log.fine(sql);  int row=0;  miniTable.setRowCount(row);  try {    PreparedStatement pstmt=DB.prepareStatement(sql.toString(),null);    pstmt.setInt(1,Integer.parseInt(m_DD_Order_ID.toString()));    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      miniTable.setRowCount(row + 1);      miniTable.setValueAt(new IDColumn(rs.getInt(1)),row,0);      miniTable.setValueAt(rs.getBigDecimal(2),row,1);      miniTable.setValueAt(rs.getString(3),row,2);      miniTable.setValueAt(rs.getString(4),row,4);      miniTable.setValueAt(rs.getString(5),row,3);      miniTable.setValueAt(rs.getString(6),row,5);      row++;    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql.toString(),e);  }  miniTable.autoSize();}  }
class C{  public ParameterDatabase(){  super();  accessed=new Hashtable();  gotten=new Hashtable();  directory=new File(new File("").getAbsolutePath());  label="Basic Database";  parents=new Vector();  checked=false;}  }
class C{  private CTagHelpers(){}  }
class C{  public EventSourceImpl(){  LOG.entering(CLASS_NAME,"<init>");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:25.281 -0500",hash_original_method="8F9A0D25038BAA53AA87BFFA0D47316A",hash_generated_method="D647B858B68B1333AC193E85FEBDEE73") public static void registrationComplete(){synchronized (mHandlerMap) {    mRegistrationComplete=true;    mHandlerMap.notifyAll();  }}  }
class C{  public long next(){  return next(RecurrenceUtil.now());}  }
class C{  @Override public void writeExternal(ObjectOutput out) throws IOException {  super.writeExternal(out);  mbr.writeExternal(out);}  }
class C{  protected void validate_return(StorageCapability[] param){}  }
class C{  public static String jQuote(String s){  if (s == null) {    return "null";  }  int ln=s.length();  StringBuilder b=new StringBuilder(ln + 4);  b.append('"');  for (int i=0; i < ln; i++) {    char c=s.charAt(i);    if (c == '"') {      b.append("\\\"");    } else     if (c == '\\') {      b.append("\\\\");    } else     if (c < 0x20) {      if (c == '\n') {        b.append("\\n");      } else       if (c == '\r') {        b.append("\\r");      } else       if (c == '\f') {        b.append("\\f");      } else       if (c == '\b') {        b.append("\\b");      } else       if (c == '\t') {        b.append("\\t");      } else {        b.append("\\u00");        int x=c / 0x10;        b.append(toHexDigit(x));        x=c & 0xF;        b.append(toHexDigit(x));      }    } else {      b.append(c);    }  }  b.append('"');  return b.toString();}  }
class C{  public FluentFunction<T3,R> partiallyApply(final T1 param1,final T2 param2){  return new FluentFunction<>(PartialApplicator.partial3(param1,param2,fn));}  }
class C{  public static boolean deleteFile(String path){  if (Handler_String.isBlank(path)) {    return true;  }  File file=new File(path);  if (!file.exists()) {    return true;  }  if (file.isFile()) {    return file.delete();  }  if (!file.isDirectory()) {    return false;  }  for (  File f : file.listFiles()) {    if (f.isFile()) {      f.delete();    } else     if (f.isDirectory()) {      deleteFile(f.getAbsolutePath());    }  }  return file.delete();}  }
class C{  private ImmutableSet<CassandraJmxCompactionClient> createCompactionClients(CassandraJmxCompactionConfig jmxConfig){  Set<CassandraJmxCompactionClient> clients=Sets.newHashSet();  Set<InetSocketAddress> servers=config.servers();  int jmxPort=jmxConfig.port();  for (  InetSocketAddress addr : servers) {    CassandraJmxCompactionClient client=createCompactionClient(addr.getHostString(),jmxPort,jmxConfig.username(),jmxConfig.password());    clients.add(client);  }  return ImmutableSet.copyOf(clients);}  }
class C{  public static String hashKeyForDisk(String key){  String cacheKey;  try {    final MessageDigest mDigest=MessageDigest.getInstance("MD5");    mDigest.update(key.getBytes());    cacheKey=bytesToHexString(mDigest.digest());  } catch (  NoSuchAlgorithmException e) {    cacheKey=String.valueOf(key.hashCode());  }  return cacheKey;}  }
class C{  @Nullable public String space(){  return space;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  SeriesInfo si=getSeriesInfo(stack);  return si == null ? "" : si.getDescription();}  }
class C{  public UserEntry restoreUser(String username) throws AppsForYourDomainException, ServiceException, IOException {  LOGGER.log(Level.INFO,"Restoring user '" + username + "'.");  URL retrieveUrl=new URL(domainUrlBase + "user/" + SERVICE_VERSION+ "/"+ username);  UserEntry userEntry=userService.getEntry(retrieveUrl,UserEntry.class);  userEntry.getLogin().setSuspended(false);  URL updateUrl=new URL(domainUrlBase + "user/" + SERVICE_VERSION+ "/"+ username);  return userService.update(updateUrl,userEntry);}  }
class C{  private Class(RVMType type){  this.type=type;}  }
class C{  public double weightedFMeasure(){  double[] classCounts=new double[m_NumClasses];  double classCountSum=0;  for (int i=0; i < m_NumClasses; i++) {    for (int j=0; j < m_NumClasses; j++) {      classCounts[i]+=m_ConfusionMatrix[i][j];    }    classCountSum+=classCounts[i];  }  double fMeasureTotal=0;  for (int i=0; i < m_NumClasses; i++) {    double temp=fMeasure(i);    fMeasureTotal+=(temp * classCounts[i]);  }  return fMeasureTotal / classCountSum;}  }
class C{  @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:08.711 -0500",hash_original_method="05A7D65C6D911E0B1F3261A66888CB52",hash_generated_method="3AFFFBA2DDE5D54646A6F203B3BBAF40") public int lastIndexOf(Object obj){  return this.hlist.lastIndexOf(obj);}  }
class C{  public Builder showNextButton(boolean showNextButton){  this.showNextButton=showNextButton;  return this;}  }
class C{  public static ValueLobDb createSmallLob(int type,byte[] small,long precision){  return new ValueLobDb(type,small,precision);}  }
class C{  public void invDct8x8(double[][] input,int[][] output){  double[][] temp=new double[NJPEG][NJPEG];  double temp1=0.0;  int i=0;  int j=0;  int k=0;  for (i=0; i < NJPEG; i++) {    for (j=0; j < NJPEG; j++) {      temp[i][j]=0.0;      for (k=0; k < NJPEG; k++) {        temp[i][j]+=input[i][k] * this.C[k][j];      }    }  }  for (i=0; i < NJPEG; i++) {    for (j=0; j < NJPEG; j++) {      temp1=0.0;      for (k=0; k < NJPEG; k++) {        temp1+=this.Ct[i][k] * temp[k][j];      }      temp1+=128.0;      output[i][j]=ImageUtil.pixelRange(round(temp1));    }  }}  }
class C{  public static InputStream openDataFile(){  InputStream stream=SantaFeExample.class.getResourceAsStream("santafe.trail");  if (stream == null) {    System.err.println("Unable to find the file santafe.trail.");    System.exit(-1);  }  return stream;}  }
class C{  public ProductionRule(final String name,final GameData data,final IntegerMap<NamedAttachable> results,final IntegerMap<Resource> costs){  super(name,data);  m_results=results;  m_cost=costs;}  }
class C{  public RootConfiguration(ApplicationInformation ai){  this(ai,getDefaultContexts(applicationClass(ai,CommonUtils.getCallingClass(2))));}  }
class C{  public void addString(String word,Tuple t){  TrieLeaf leaf=new TrieLeaf(word,t);  addLeaf(root,leaf,0);}  }
class C{  public void waitOnInitialization() throws InterruptedException {  this.initializationLatch.await();}  }
class C{  @Override public Object execute(ExecutionEvent event) throws ExecutionException {  IWorkbenchPart viewPart=HandlerUtil.getActivePart(event);  if (viewPart instanceof DroidsafeInfoOutlineViewPart) {    Command command=event.getCommand();    boolean oldValue=HandlerUtil.toggleCommandState(command);    ((DroidsafeInfoOutlineViewPart)viewPart).setLongLabel(!oldValue);  }  return null;}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getCodeLang_();}  }
class C{  private static byte[] streamToBytes(InputStream in,int length) throws IOException {  byte[] bytes=new byte[length];  int count;  int pos=0;  while (pos < length && ((count=in.read(bytes,pos,length - pos)) != -1)) {    pos+=count;  }  if (pos != length) {    throw new IOException("Expected " + length + " bytes, read "+ pos+ " bytes");  }  return bytes;}  }
class C{  public void testUpdatePathDoesNotExist() throws Exception {  final Map<String,String> props=properties("owner","group","0555");  assert igfs.update(SUBDIR,props) == null;  checkNotExist(igfs,igfsSecondary,SUBDIR);}  }
class C{  public void stopProcess() throws InterruptedException {  latch.await();  if (this.process != null) {    System.out.println("ProcessThread.stopProcess() will kill process");    this.process.destroy();  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  int progress=0;  double z;  int i, c;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double zFactor=0;  double slopeThreshold=0;  double profCurvThreshold=0;  double planCurvThreshold=0;  double radToDeg=180 / Math.PI;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      zFactor=Double.parseDouble(args[i]);    } else     if (i == 3) {      slopeThreshold=Double.parseDouble(args[i]);    } else     if (i == 4) {      profCurvThreshold=Double.parseDouble(args[i]);    } else     if (i == 5) {      planCurvThreshold=Double.parseDouble(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    double gridResX=DEM.getCellSizeX();    double gridResY=DEM.getCellSizeY();    double diagGridRes=Math.sqrt(gridResX * gridResX + gridResY * gridResY);    double[] gridLengths=new double[]{diagGridRes,gridResX,diagGridRes,gridResY,diagGridRes,gridResX,diagGridRes,gridResY};    double Zx, Zy, Zxx, Zyy, Zxy, p, Zx2, q, Zy2;    double fx, fy;    double gridResTimes2=gridResX * 2;    double gridResSquared=gridResX * gridResX;    double fourTimesGridResSquared=gridResSquared * 4;    double planCurv, profCurv, slope;    double eightGridRes=8 * gridResX;    double[] N=new double[8];    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,-999);    output.setPreferredPalette("landclass.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          z=z * zFactor;          for (c=0; c < 8; c++) {            N[c]=DEM.getValue(row + dY[c],col + dX[c]);            if (N[c] != noData) {              N[c]=N[c] * zFactor;            } else {              N[c]=z;            }          }          Zx=(N[1] - N[5]) / gridResTimes2;          Zy=(N[7] - N[3]) / gridResTimes2;          Zxx=(N[1] - 2 * z + N[5]) / gridResSquared;          Zyy=(N[7] - 2 * z + N[3]) / gridResSquared;          Zxy=(-N[6] + N[0] + N[4] - N[2]) / fourTimesGridResSquared;          Zx2=Zx * Zx;          Zy2=Zy * Zy;          p=Zx2 + Zy2;          q=p + 1;          if (p > 0) {            fy=(N[6] - N[4] + 2 * (N[7] - N[3]) + N[0] - N[2]) / eightGridRes;            fx=(N[2] - N[4] + 2 * (N[1] - N[5]) + N[0] - N[6]) / eightGridRes;            slope=Math.atan(Math.sqrt(fx * fx + fy * fy));            slope=slope * radToDeg;            planCurv=-1 * (Zxx * Zy2 - 2 * Zxy * Zx* Zy + Zyy * Zx2) / Math.pow(p,1.5);            planCurv=(planCurv * radToDeg);            profCurv=-1 * (Zxx * Zx2 + 2 * Zxy * Zx* Zy + Zyy * Zy2) / Math.pow(p * q,1.5);            profCurv=(profCurv * radToDeg);            if (profCurv < -profCurvThreshold && planCurv <= -planCurvThreshold & slope > slopeThreshold) {              output.setValue(row,col,1);            } else             if (profCurv < -profCurvThreshold && planCurv > planCurvThreshold && slope > slopeThreshold) {              output.setValue(row,col,2);            } else             if (profCurv > profCurvThreshold && planCurv <= planCurvThreshold && slope > slopeThreshold) {              output.setValue(row,col,3);            } else             if (profCurv > profCurvThreshold && planCurv > planCurvThreshold && slope > slopeThreshold) {              output.setValue(row,col,4);            } else             if (profCurv >= -profCurvThreshold && profCurv < profCurvThreshold && slope > slopeThreshold && planCurv <= -planCurvThreshold) {              output.setValue(row,col,5);            } else             if (profCurv >= -profCurvThreshold && profCurv < profCurvThreshold && slope > slopeThreshold && planCurv > planCurvThreshold) {              output.setValue(row,col,6);            } else             if (slope <= slopeThreshold) {              output.setValue(row,col,7);            } else {              output.setValue(row,col,noData);            }          } else {            output.setValue(row,col,noData);          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);    String retstr="LANDFORM CLASSIFICATION KEY\n";    retstr+="\nValue:\tClass";    retstr+="\n1\tConvergent Footslope";    retstr+="\n2\tDivergent Footslope";    retstr+="\n3\tConvergent Shoulder";    retstr+="\n4\tDivergent Shoulder";    retstr+="\n5\tConvergent Backslope";    retstr+="\n6\tDivergent Backslope";    retstr+="\n7\tLevel";    returnData(retstr);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public R reduce(R r1,R r2){  return r1;}  }
class C{  public void numParameters(int num) throws IOException {  output.write(num);}  }
class C{  public ResultFormatter(Object result){  this.result=result;  printHeader=true;}  }
class C{  @Override public Eval<String> join(){  return Eval.later(null);}  }
class C{  public GetRequest type(@Nullable String type){  if (type == null) {    type="_all";  }  this.type=type;  return this;}  }
class C{  @Override public ImmutableSet<Entry<K,V>> entries(){  ImmutableSet<Entry<K,V>> result=entries;  return result == null ? (entries=new EntrySet<K,V>(this)) : result;}  }
class C{  private int luminance(int r,int g,int b){  return (int)((0.299 * r) + (0.58 * g) + (0.11 * b));}  }
class C{  private void puntPlay(Team offense){  gameYardLine=(int)(100 - (gameYardLine + offense.getK(0).ratKickPow / 3 + 20 - 10 * Math.random()));  if (gameYardLine < 0) {    gameYardLine=20;  }  gameDown=1;  gameYardsNeed=10;  gamePoss=!gamePoss;  gameTime-=20 + 15 * Math.random();}  }
class C{  private List<String[]> readSentence(BufferedReader aReader) throws IOException {  List<String[]> words=new ArrayList<String[]>();  String line;  boolean beginSentence=true;  while ((line=aReader.readLine()) != null) {    if (StringUtils.isBlank(line)) {      beginSentence=true;      break;    }    if (hasHeader && beginSentence) {      beginSentence=false;      continue;    }    String[] fields=line.split(columnSeparator.getValue());    if (!hasEmbeddedNamedEntity && fields.length != 2 + FORM) {      throw new IOException(String.format("Invalid file format. Line needs to have %d %s-separated fields: [%s]",2 + FORM,columnSeparator.getName(),line));    } else     if (hasEmbeddedNamedEntity && fields.length != 3 + FORM) {      throw new IOException(String.format("Invalid file format. Line needs to have %d %s-separated fields: [%s]",3 + FORM,columnSeparator.getName(),line));    }    words.add(fields);  }  if (line == null && words.isEmpty()) {    return null;  } else {    return words;  }}  }
class C{  public static ConditionOperand OVERFLOW_FROM_SUB(){  return new ConditionOperand(OVERFLOW_FROM_SUB);}  }
class C{  protected void initCheckLists(){  List<IceMediaStream> streams=getStreamsWithPendingConnectivityEstablishment();  int streamCount=streams.size();  int maxCheckListSize=Integer.getInteger(StackProperties.MAX_CHECK_LIST_SIZE,DEFAULT_MAX_CHECK_LIST_SIZE);  int maxPerStreamSize=streamCount == 0 ? 0 : maxCheckListSize / streamCount;  for (  IceMediaStream stream : streams) {    logger.info("Init checklist for stream " + stream.getName());    stream.setMaxCheckListSize(maxPerStreamSize);    stream.initCheckList();  }  if (streamCount > 0)   streams.get(0).getCheckList().computeInitialCheckListPairStates();}  }
class C{  private void checkSearchables(ArrayList<SearchableInfo> searchablesList){  assertNotNull(searchablesList);  int count=searchablesList.size();  for (int ii=0; ii < count; ii++) {    SearchableInfo si=searchablesList.get(ii);    checkSearchable(si);  }}  }
class C{  private void generateImplementsParcelableInterface(PsiClass targetPsiClass){  PsiJavaCodeReferenceElement referenceElement=factory.createReferenceFromText(PARCELABLE_CLASS_SIMPLE_NAME,null);  PsiReferenceList implementsList=targetPsiClass.getImplementsList();  if (null != implementsList) {    implementsList.add(referenceElement);  }  generateImportStatement(PARCELABLE_PACKAGE);  generateExtraMethods(targetPsiClass);}  }
class C{  private RemoteDirectorGroup fetchRDFGroupFromCache(Map<URI,RemoteDirectorGroup> rdfGroupCache,URI srdfGroupURI){  if (rdfGroupCache.containsKey(srdfGroupURI)) {    return rdfGroupCache.get(srdfGroupURI);  }  RemoteDirectorGroup rdfGroup=this.getDbClient().queryObject(RemoteDirectorGroup.class,srdfGroupURI);  if (null != rdfGroup && !rdfGroup.getInactive()) {    rdfGroupCache.put(srdfGroupURI,rdfGroup);  }  return rdfGroup;}  }
class C{  public static int minCut(String s){  Set<String> palin=new HashSet<String>();  return minCut(s,0,palin);}  }
class C{  public ObjectWriter withDateFormat(DateFormat df){  SerializationConfig newConfig=_config.withDateFormat(df);  if (newConfig == _config) {    return this;  }  return new ObjectWriter(this,newConfig);}  }
class C{  LockMode(final boolean allowsTouch,final boolean allowsCommands){  this.allowsTouch=allowsTouch;  this.allowsCommands=allowsCommands;}  }
class C{  public boolean match(Element e,String pseudoE){  return (e instanceof CSSStylableElement) ? ((CSSStylableElement)e).isPseudoInstanceOf(getValue()) : false;}  }
class C{  RandomAccessFile openInputFileAsZip(String fileName) throws IOException {  ZipFile zipFile;  try {    zipFile=new ZipFile(fileName);  } catch (  FileNotFoundException fnfe) {    System.err.println("Unable to open '" + fileName + "': "+ fnfe.getMessage());    throw fnfe;  }catch (  ZipException ze) {    return null;  }  ZipEntry entry=zipFile.getEntry(CLASSES_DEX);  if (entry == null) {    System.err.println("Unable to find '" + CLASSES_DEX + "' in '"+ fileName+ "'");    zipFile.close();    throw new ZipException();  }  InputStream zis=zipFile.getInputStream(entry);  File tempFile=File.createTempFile("dexdeps",".dex");  RandomAccessFile raf=new RandomAccessFile(tempFile,"rw");  tempFile.delete();  byte copyBuf[]=new byte[32768];  int actual;  while (true) {    actual=zis.read(copyBuf);    if (actual == -1)     break;    raf.write(copyBuf,0,actual);  }  zis.close();  raf.seek(0);  return raf;}  }
class C{  public boolean generate(Projection proj){  setNeedToRegenerate(true);  if (proj == null) {    Debug.message("omgraphic","OMRect: null projection in generate!");    return false;  }switch (renderType) {case RENDERTYPE_XY:    setShape(createBoxShape((int)Math.min(x2,x1),(int)Math.min(y2,y1),(int)Math.abs(x2 - x1),(int)Math.abs(y2 - y1)));  break;case RENDERTYPE_OFFSET:if (!proj.isPlotable(lat1,lon1)) {  setNeedToRegenerate(true);  return false;}Point p1=(Point)proj.forward(lat1,lon1,new Point());setShape(createBoxShape((int)Math.min(p1.x + x1,p1.x + x2),(int)Math.min(p1.y + y1,p1.y + y2),(int)Math.abs(x2 - x1),(int)Math.abs(y2 - y1)));break;case RENDERTYPE_LATLON:ArrayList<float[]> rects;if (proj instanceof GeoProj) {rects=((GeoProj)proj).forwardRect(new LatLonPoint.Double(lat1,lon1),new LatLonPoint.Double(lat2,lon2),lineType,nsegs,!isClear(fillPaint));} else {rects=proj.forwardRect(new Point2D.Double(lon1,lat1),new Point2D.Double(lon2,lat2));}int size=rects.size();GeneralPath projectedShape=null;for (int i=0; i < size; i+=2) {GeneralPath gp=createShape(rects.get(i),rects.get(i + 1),true);projectedShape=appendShapeEdge(projectedShape,gp,false);}setShape(projectedShape);break;case RENDERTYPE_UNKNOWN:System.err.println("OMRect.generate(): invalid RenderType");return false;}setLabelLocation(getShape(),proj);setNeedToRegenerate(false);return true;}  }
class C{  public void stream(OutputStream os) throws IOException {  MessageHeader globals=entries.elementAt(0);  if (globals.findValue("Signature-Version") == null) {    throw new JarException("Signature file requires " + "Signature-Version: 1.0 in 1st header");  }  PrintStream ps=new PrintStream(os);  globals.print(ps);  for (int i=1; i < entries.size(); ++i) {    MessageHeader mh=entries.elementAt(i);    mh.print(ps);  }}  }
class C{  public long readDateTimeAsLong(int index){  return this.readULong(index) << 32 | this.readULong(index + 4);}  }
class C{  public static Value BagToSet(Value b){  FcnRcdValue fcn=FcnRcdValue.convert(b);  if (fcn == null) {    throw new EvalException(EC.TLC_MODULE_APPLYING_TO_WRONG_VALUE,new String[]{"BagToSet","a function with a finite domain",Value.ppr(b.toString())});  }  return fcn.getDomain();}  }
class C{  public static ProjectActionEvent createProjectClosingEvent(ProjectDescriptor project){  return new ProjectActionEvent(project,ProjectAction.CLOSING,false);}  }
class C{  public int fullyConnectSync(Context srcContext,Handler srcHandler,Handler dstHandler){  int status=connectSync(srcContext,srcHandler,dstHandler);  if (status == STATUS_SUCCESSFUL) {    Message response=sendMessageSynchronously(CMD_CHANNEL_FULL_CONNECTION);    status=response.arg1;  }  return status;}  }
class C{  public static boolean hasInterface(String intf,String cls){  try {    return hasInterface(Class.forName(intf),Class.forName(cls));  } catch (  Exception e) {    return false;  }}  }
class C{  public void removePropertyChangeListener(String propertyName,PropertyChangeListener in_pcl){  beanContextChildSupport.removePropertyChangeListener(propertyName,in_pcl);}  }
class C{  private boolean isIgnoreLocallyExistingFiles(){  return ignoreLocallyExistingFiles;}  }
class C{  private boolean isViewDescendantOf(View child,View parent){  if (child == parent) {    return true;  }  final ViewParent theParent=child.getParent();  return (theParent instanceof ViewGroup) && isViewDescendantOf((View)theParent,parent);}  }
class C{  public void add(double value){  if (count == 0) {    count=1;    mean=value;    min=value;    max=value;    if (!isFinite(value)) {      sumOfSquaresOfDeltas=NaN;    }  } else {    count++;    if (isFinite(value) && isFinite(mean)) {      double delta=value - mean;      mean+=delta / count;      sumOfSquaresOfDeltas+=delta * (value - mean);    } else {      mean=calculateNewMeanNonFinite(mean,value);      sumOfSquaresOfDeltas=NaN;    }    min=Math.min(min,value);    max=Math.max(max,value);  }}  }
class C{  private void init(Context context,RuqusTheme theme,String currClassName){  this.currClassName=currClassName;  inflate(context,R.layout.sort_field_view,this);  setOrientation(VERTICAL);  label=(TextView)findViewById(R.id.sort_field_label);  sortFieldChooser=(Spinner)findViewById(R.id.sort_field);  removeButton=(ImageButton)findViewById(R.id.remove_field);  sortDirRg=(RadioGroup)findViewById(R.id.rg_sort_dir);  ascRb=(RadioButton)findViewById(R.id.asc);  descRb=(RadioButton)findViewById(R.id.desc);  setTheme(theme);  sortFieldChooser.setOnTouchListener(sortFieldChooserListener);  sortFieldChooser.setOnItemSelectedListener(sortFieldChooserListener);}  }
class C{  protected Future<Void> closeNoThrow(){  Promise<Void> closeFuture;synchronized (this) {    if (null != closePromise) {      return closePromise;    }    closeFuture=closePromise=new Promise<Void>();  }  cancelTruncation();  Utils.closeSequence(bkDistributedLogManager.getScheduler(),true,getCachedLogWriter(),getAllocatedLogWriter(),getCachedWriteHandler()).proxyTo(closeFuture);  return closeFuture;}  }
class C{  public Boolean isValidating(){  return validating;}  }
class C{  private String scanPlainSpaces(){  int length=0;  while (reader.peek(length) == ' ' || reader.peek(length) == '\t') {    length++;  }  String whitespaces=reader.prefixForward(length);  String lineBreak=scanLineBreak();  if (lineBreak.length() != 0) {    this.allowSimpleKey=true;    String prefix=reader.prefix(3);    if ("---".equals(prefix) || "...".equals(prefix) && Constant.NULL_BL_T_LINEBR.has(reader.peek(3))) {      return "";    }    StringBuilder breaks=new StringBuilder();    while (true) {      if (reader.peek() == ' ') {        reader.forward();      } else {        String lb=scanLineBreak();        if (lb.length() != 0) {          breaks.append(lb);          prefix=reader.prefix(3);          if ("---".equals(prefix) || "...".equals(prefix) && Constant.NULL_BL_T_LINEBR.has(reader.peek(3))) {            return "";          }        } else {          break;        }      }    }    if (!"\n".equals(lineBreak)) {      return lineBreak + breaks;    } else     if (breaks.length() == 0) {      return " ";    }    return breaks.toString();  }  return whitespaces;}  }
class C{  public static void w(String tag,String s,Throwable e){  if (LOG.WARN >= LOGLEVEL)   Log.w(tag,s,e);}  }
class C{  public static double mean(double[] vector){  double sum=0;  if (vector.length == 0) {    return 0;  }  for (int i=0; i < vector.length; i++) {    sum+=vector[i];  }  return sum / (double)vector.length;}  }
class C{  protected byte[] toJsonBytes(final Object object) throws Exception {  ObjectMapper mapper=new ObjectMapper();  mapper.setSerializationInclusion(JsonSerialize.Inclusion.NON_NULL);  return mapper.writeValueAsBytes(object);}  }
class C{  public void shuffleInventory(@Nonnull IInventory inv,@Nonnull Random random){  final List<ItemStack> list=getInventoryList(inv);  Collections.shuffle(list,random);  for (int i=0; i < inv.getSizeInventory(); ++i) {    inv.setInventorySlotContents(i,list.get(i));  }}  }
class C{  public QueueCursor(int capacity){  this(capacity,false);}  }
class C{  public void destroy(DistributedRegion r){}  }
class C{  public Process executeAsync(final CommandLine command,ExecuteResultHandler handler) throws IOException {  return executeAsync(command,null,handler);}  }
class C{  public static void destroy(){  try {    Region region1=cache.getRegion(Region.SEPARATOR + REGION_NAME);    region1.localDestroy("key-1");  } catch (  Exception e) {    e.printStackTrace();    fail("test failed due to exception in destroy ");  }}  }
class C{  public boolean isSelected(){  return this.selected;}  }
class C{  public String(String string){  value=string.value;  offset=string.offset;  count=string.count;}  }
class C{  private void needNewBuffer(int newSize){  int delta=newSize - size;  int newBufferSize=Math.max(minChunkLen,delta);  currentBufferIndex++;  currentBuffer=new int[newBufferSize];  offset=0;  if (currentBufferIndex >= buffers.length) {    int newLen=buffers.length << 1;    int[][] newBuffers=new int[newLen][];    System.arraycopy(buffers,0,newBuffers,0,buffers.length);    buffers=newBuffers;  }  buffers[currentBufferIndex]=currentBuffer;  buffersCount++;}  }
class C{  public void patch_splitMax(LinkedList<Patch> patches){  short patch_size=Match_MaxBits;  String precontext, postcontext;  Patch patch;  int start1, start2;  boolean empty;  Operation diff_type;  String diff_text;  ListIterator<Patch> pointer=patches.listIterator();  Patch bigpatch=pointer.hasNext() ? pointer.next() : null;  while (bigpatch != null) {    if (bigpatch.length1 <= Match_MaxBits) {      bigpatch=pointer.hasNext() ? pointer.next() : null;      continue;    }    pointer.remove();    start1=bigpatch.start1;    start2=bigpatch.start2;    precontext="";    while (!bigpatch.diffs.isEmpty()) {      patch=new Patch();      empty=true;      patch.start1=start1 - precontext.length();      patch.start2=start2 - precontext.length();      if (precontext.length() != 0) {        patch.length1=patch.length2=precontext.length();        patch.diffs.add(new Diff(Operation.EQUAL,precontext));      }      while (!bigpatch.diffs.isEmpty() && patch.length1 < patch_size - Patch_Margin) {        diff_type=bigpatch.diffs.getFirst().operation;        diff_text=bigpatch.diffs.getFirst().text;        if (diff_type == Operation.INSERT) {          patch.length2+=diff_text.length();          start2+=diff_text.length();          patch.diffs.addLast(bigpatch.diffs.removeFirst());          empty=false;        } else         if (diff_type == Operation.DELETE && patch.diffs.size() == 1 && patch.diffs.getFirst().operation == Operation.EQUAL && diff_text.length() > 2 * patch_size) {          patch.length1+=diff_text.length();          start1+=diff_text.length();          empty=false;          patch.diffs.add(new Diff(diff_type,diff_text));          bigpatch.diffs.removeFirst();        } else {          diff_text=diff_text.substring(0,Math.min(diff_text.length(),patch_size - patch.length1 - Patch_Margin));          patch.length1+=diff_text.length();          start1+=diff_text.length();          if (diff_type == Operation.EQUAL) {            patch.length2+=diff_text.length();            start2+=diff_text.length();          } else {            empty=false;          }          patch.diffs.add(new Diff(diff_type,diff_text));          if (diff_text.equals(bigpatch.diffs.getFirst().text)) {            bigpatch.diffs.removeFirst();          } else {            bigpatch.diffs.getFirst().text=bigpatch.diffs.getFirst().text.substring(diff_text.length());          }        }      }      precontext=diff_text2(patch.diffs);      precontext=precontext.substring(Math.max(0,precontext.length() - Patch_Margin));      if (diff_text1(bigpatch.diffs).length() > Patch_Margin) {        postcontext=diff_text1(bigpatch.diffs).substring(0,Patch_Margin);      } else {        postcontext=diff_text1(bigpatch.diffs);      }      if (postcontext.length() != 0) {        patch.length1+=postcontext.length();        patch.length2+=postcontext.length();        if (!patch.diffs.isEmpty() && patch.diffs.getLast().operation == Operation.EQUAL) {          patch.diffs.getLast().text+=postcontext;        } else {          patch.diffs.add(new Diff(Operation.EQUAL,postcontext));        }      }      if (!empty) {        pointer.add(patch);      }    }    bigpatch=pointer.hasNext() ? pointer.next() : null;  }}  }
class C{  public static TestResult execJavac(String toCompile,File dir,String jflexTestVersion){  Project p=new Project();  Javac javac=new Javac();  Path path=new Path(p,dir.toString());  javac.setProject(p);  javac.setSrcdir(path);  javac.setDestdir(dir);  javac.setTarget(javaVersion);  javac.setSource(javaVersion);  javac.setSourcepath(new Path(p,""));  javac.setIncludes(toCompile);  Path classPath=javac.createClasspath();  classPath.setPath(System.getProperty("user.home") + "/.m2/repository/de/jflex/jflex/" + jflexTestVersion+ "/jflex-"+ jflexTestVersion+ ".jar");  ByteArrayOutputStream out=new ByteArrayOutputStream();  PrintStream outSafe=System.err;  System.setErr(new PrintStream(out));  try {    javac.execute();    return new TestResult(out.toString(),true);  } catch (  BuildException e) {    return new TestResult(e + System.getProperty("line.separator") + out.toString(),false);  } finally {    System.setErr(outSafe);  }}  }
class C{  private void cloneProperties(BurpCertificate certificate,BurpCertificateBuilder burpCertificateBuilder){  burpCertificateBuilder.setVersion(certificate.getVersionNumber());  burpCertificateBuilder.setSerial(certificate.getSerialNumberBigInteger());  if (certificate.getPublicKeyAlgorithm().equals("RSA")) {    burpCertificateBuilder.setSignatureAlgorithm(certificate.getSignatureAlgorithm());  } else {    burpCertificateBuilder.setSignatureAlgorithm("SHA256withRSA");  }  burpCertificateBuilder.setIssuer(certificate.getIssuer());  burpCertificateBuilder.setNotAfter(certificate.getNotAfter());  burpCertificateBuilder.setNotBefore(certificate.getNotBefore());  burpCertificateBuilder.setKeySize(certificate.getKeySize());  for (  BurpCertificateExtension extension : certificate.getAllExtensions()) {    burpCertificateBuilder.addExtension(extension);  }}  }
class C{  protected void emit_PropertyMethodDeclaration_SemicolonKeyword_1_q(EObject semanticObject,ISynNavigable transition,List<INode> nodes){  acceptNodes(transition,nodes);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element rootNode;  Node newChild;  NodeList elementList;  Node oldChild;  Node replacedChild;  doc=(Document)load("hc_staff",true);  newChild=doc.createAttribute("lang");  elementList=doc.getElementsByTagName("p");  oldChild=elementList.item(1);  rootNode=(Element)oldChild.getParentNode();{    boolean success=false;    try {      replacedChild=rootNode.replaceChild(newChild,oldChild);    } catch (    DOMException ex) {      success=(ex.code == DOMException.HIERARCHY_REQUEST_ERR);    }    assertTrue("throw_HIERARCHY_REQUEST_ERR",success);  }}  }
class C{  public void preComputeBestReplicaMapping(){  Map<String,Map<String,Map<String,String>>> collectionToShardToCoreMapping=getZkClusterData().getCollectionToShardToCoreMapping();  for (  String collection : collectionNames) {    Map<String,Map<String,String>> shardToCoreMapping=collectionToShardToCoreMapping.get(collection);    for (    String shard : shardToCoreMapping.keySet()) {      Map<String,String> coreToNodeMap=shardToCoreMapping.get(shard);      for (      String core : coreToNodeMap.keySet()) {        String currentCore=core;        String node=coreToNodeMap.get(core);        SolrCore currentReplica=new SolrCore(node,currentCore);        try {          currentReplica.loadStatus();          fillUpAllCoresForShard(currentReplica,coreToNodeMap);          break;        } catch (        Exception e) {          logger.info(ExceptionUtils.getFullStackTrace(e));          continue;        }      }      shardToBestReplicaMapping.put(shard,coreToBestReplicaMappingByHealth);    }  }}  }
class C{  private void statInit(){  lDocumentNo.setLabelFor(fDocumentNo);  fDocumentNo.setBackground(AdempierePLAF.getInfoBackground());  fDocumentNo.addActionListener(this);  lDescription.setLabelFor(fDescription);  fDescription.setBackground(AdempierePLAF.getInfoBackground());  fDescription.addActionListener(this);  lPOReference.setLabelFor(fPOReference);  fPOReference.setBackground(AdempierePLAF.getInfoBackground());  fPOReference.addActionListener(this);  fIsSOTrx.setSelected(!"N".equals(Env.getContext(Env.getCtx(),p_WindowNo,"IsSOTrx")));  fIsSOTrx.addActionListener(this);  fBPartner_ID=new VLookup("C_BPartner_ID",false,false,true,MLookupFactory.get(Env.getCtx(),p_WindowNo,0,MColumn.getColumn_ID(MInOut.Table_Name,MInOut.COLUMNNAME_C_BPartner_ID),DisplayType.Search));  lBPartner_ID.setLabelFor(fBPartner_ID);  fBPartner_ID.setBackground(AdempierePLAF.getInfoBackground());  fBPartner_ID.addActionListener(this);  fShipper_ID=new VLookup("M_Shipper_ID",false,false,true,MLookupFactory.get(Env.getCtx(),p_WindowNo,0,MColumn.getColumn_ID(MInOut.Table_Name,MInOut.COLUMNNAME_M_Shipper_ID),DisplayType.TableDir));  lShipper_ID.setLabelFor(fShipper_ID);  fShipper_ID.setBackground(AdempierePLAF.getInfoBackground());  fShipper_ID.addActionListener(this);  lDateFrom.setLabelFor(fDateFrom);  fDateFrom.setBackground(AdempierePLAF.getInfoBackground());  fDateFrom.setToolTipText(Msg.translate(Env.getCtx(),"DateFrom"));  fDateFrom.addActionListener(this);  lDateTo.setLabelFor(fDateTo);  fDateTo.setBackground(AdempierePLAF.getInfoBackground());  fDateTo.setToolTipText(Msg.translate(Env.getCtx(),"DateTo"));  fDateTo.addActionListener(this);  CPanel datePanel=new CPanel();  datePanel.setLayout(new ALayout(0,0,true));  datePanel.add(fDateFrom,new ALayoutConstraint(0,0));  datePanel.add(lDateTo,null);  datePanel.add(fDateTo,null);  p_criteriaGrid.add(lDocumentNo,new ALayoutConstraint(0,0));  p_criteriaGrid.add(fDocumentNo,null);  p_criteriaGrid.add(lBPartner_ID,null);  p_criteriaGrid.add(fBPartner_ID,null);  p_criteriaGrid.add(fIsSOTrx,new ALayoutConstraint(0,5));  p_criteriaGrid.add(lDescription,new ALayoutConstraint(1,0));  p_criteriaGrid.add(fDescription,null);  p_criteriaGrid.add(lDateFrom,null);  p_criteriaGrid.add(datePanel,null);  p_criteriaGrid.add(lPOReference,new ALayoutConstraint(2,0));  p_criteriaGrid.add(fPOReference,null);  p_criteriaGrid.add(lShipper_ID,null);  p_criteriaGrid.add(fShipper_ID,null);}  }
class C{  @Override public boolean check(final CertificateToken certificateToken){  final boolean keyUsage=certificateToken.checkKeyUsage(bit);  return keyUsage == value;}  }
class C{  public static boolean isValidFolderPath(Path path){  if (path == null) {    return false;  }  File f=path.toFile();  return path.toString().isEmpty() || (f.isDirectory() && f.canWrite());}  }
class C{  public float[][] extract(int maxFeatureValue,int[] distanceSet,int[][] img){  int[] histogram=new int[maxFeatureValue];  final int W=img.length;  final int H=img[0].length;  for (int x=0; x < W; x++) {    for (int y=0; y < H; y++) {      histogram[img[x][y]]++;    }  }  float[][] correlogram=new float[maxFeatureValue][distanceSet.length];  int[] tmpCorrelogram=new int[distanceSet.length];  for (int x=0; x < W; x++) {    for (int y=0; y < H; y++) {      int color=img[x][y];      getNumPixelsInNeighbourhood(x,y,img,tmpCorrelogram,maxFeatureValue,distanceSet);      for (int i=0; i < distanceSet.length; i++) {        correlogram[color][i]+=tmpCorrelogram[i];      }    }  }  float[] max=new float[distanceSet.length];  for (int c=0; c < maxFeatureValue; c++) {    for (int i=0; i < distanceSet.length; i++) {      max[i]=Math.max(correlogram[c][i],max[i]);    }  }  for (int c=0; c < maxFeatureValue; c++) {    for (int i=0; i < distanceSet.length; i++) {      correlogram[c][i]=correlogram[c][i] / max[i];    }  }  return correlogram;}  }
class C{  public static CC parseComponentConstraint(String s){  CC cc=new CC();  if (s.length() == 0) {    return cc;  }  String[] parts=toTrimmedTokens(s,',');  for (  String part : parts) {    try {      if (part.length() == 0) {        continue;      }      int ix=-1;      char c=part.charAt(0);      if (c == 'n') {        if (part.equals("north")) {          cc.setDockSide(0);          continue;        }        if (part.equals("newline")) {          cc.setNewline(true);          continue;        }        if (part.startsWith("newline ")) {          String gapSz=part.substring(7).trim();          cc.setNewlineGapSize(parseBoundSize(gapSz,true,true));          continue;        }      }      if (c == 'f' && (part.equals("flowy") || part.equals("flowx"))) {        cc.setFlowX(part.charAt(4) == 'x' ? Boolean.TRUE : Boolean.FALSE);        continue;      }      if (c == 's') {        ix=startsWithLenient(part,"skip",4,true);        if (ix > -1) {          String num=part.substring(ix).trim();          cc.setSkip(num.length() != 0 ? Integer.parseInt(num) : 1);          continue;        }        ix=startsWithLenient(part,"split",5,true);        if (ix > -1) {          String split=part.substring(ix).trim();          cc.setSplit(split.length() > 0 ? Integer.parseInt(split) : LayoutUtil.INF);          continue;        }        if (part.equals("south")) {          cc.setDockSide(2);          continue;        }        ix=startsWithLenient(part,new String[]{"spany","sy"},new int[]{5,2},true);        if (ix > -1) {          cc.setSpanY(parseSpan(part.substring(ix).trim()));          continue;        }        ix=startsWithLenient(part,new String[]{"spanx","sx"},new int[]{5,2},true);        if (ix > -1) {          cc.setSpanX(parseSpan(part.substring(ix).trim()));          continue;        }        ix=startsWithLenient(part,"span",4,true);        if (ix > -1) {          String[] spans=toTrimmedTokens(part.substring(ix).trim(),' ');          cc.setSpanX(spans[0].length() > 0 ? Integer.parseInt(spans[0]) : LayoutUtil.INF);          cc.setSpanY(spans.length > 1 ? Integer.parseInt(spans[1]) : 1);          continue;        }        ix=startsWithLenient(part,"shrinkx",7,true);        if (ix > -1) {          cc.getHorizontal().setShrink(parseFloat(part.substring(ix).trim(),ResizeConstraint.WEIGHT_100));          continue;        }        ix=startsWithLenient(part,"shrinky",7,true);        if (ix > -1) {          cc.getVertical().setShrink(parseFloat(part.substring(ix).trim(),ResizeConstraint.WEIGHT_100));          continue;        }        ix=startsWithLenient(part,"shrink",6,false);        if (ix > -1) {          String[] shrinks=toTrimmedTokens(part.substring(ix).trim(),' ');          cc.getHorizontal().setShrink(parseFloat(part.substring(ix).trim(),ResizeConstraint.WEIGHT_100));          if (shrinks.length > 1) {            cc.getVertical().setShrink(parseFloat(part.substring(ix).trim(),ResizeConstraint.WEIGHT_100));          }          continue;        }        ix=startsWithLenient(part,new String[]{"shrinkprio","shp"},new int[]{10,3},true);        if (ix > -1) {          String sp=part.substring(ix).trim();          if (sp.startsWith("x") || sp.startsWith("y")) {            (sp.startsWith("x") ? cc.getHorizontal() : cc.getVertical()).setShrinkPriority(Integer.parseInt(sp.substring(2)));          } else {            String[] shrinks=toTrimmedTokens(sp,' ');            cc.getHorizontal().setShrinkPriority(Integer.parseInt(shrinks[0]));            if (shrinks.length > 1) {              cc.getVertical().setShrinkPriority(Integer.parseInt(shrinks[1]));            }          }          continue;        }        ix=startsWithLenient(part,new String[]{"sizegroupx","sizegroupy","sgx","sgy"},new int[]{9,9,2,2},true);        if (ix > -1) {          String sg=part.substring(ix).trim();          char lc=part.charAt(ix - 1);          if (lc != 'y') {            cc.getHorizontal().setSizeGroup(sg);          }          if (lc != 'x') {            cc.getVertical().setSizeGroup(sg);          }          continue;        }      }      if (c == 'g') {        ix=startsWithLenient(part,"growx",5,true);        if (ix > -1) {          cc.getHorizontal().setGrow(parseFloat(part.substring(ix).trim(),ResizeConstraint.WEIGHT_100));          continue;        }        ix=startsWithLenient(part,"growy",5,true);        if (ix > -1) {          cc.getVertical().setGrow(parseFloat(part.substring(ix).trim(),ResizeConstraint.WEIGHT_100));          continue;        }        ix=startsWithLenient(part,"grow",4,false);        if (ix > -1) {          String[] grows=toTrimmedTokens(part.substring(ix).trim(),' ');          cc.getHorizontal().setGrow(parseFloat(grows[0],ResizeConstraint.WEIGHT_100));          cc.getVertical().setGrow(parseFloat(grows.length > 1 ? grows[1] : "",ResizeConstraint.WEIGHT_100));          continue;        }        ix=startsWithLenient(part,new String[]{"growprio","gp"},new int[]{8,2},true);        if (ix > -1) {          String gp=part.substring(ix).trim();          char c0=gp.length() > 0 ? gp.charAt(0) : ' ';          if (c0 == 'x' || c0 == 'y') {            (c0 == 'x' ? cc.getHorizontal() : cc.getVertical()).setGrowPriority(Integer.parseInt(gp.substring(2)));          } else {            String[] grows=toTrimmedTokens(gp,' ');            cc.getHorizontal().setGrowPriority(Integer.parseInt(grows[0]));            if (grows.length > 1) {              cc.getVertical().setGrowPriority(Integer.parseInt(grows[1]));            }          }          continue;        }        if (part.startsWith("gap")) {          BoundSize[] gaps=parseGaps(part);          if (gaps[0] != null) {            cc.getVertical().setGapBefore(gaps[0]);          }          if (gaps[1] != null) {            cc.getHorizontal().setGapBefore(gaps[1]);          }          if (gaps[2] != null) {            cc.getVertical().setGapAfter(gaps[2]);          }          if (gaps[3] != null) {            cc.getHorizontal().setGapAfter(gaps[3]);          }          continue;        }      }      if (c == 'a') {        ix=startsWithLenient(part,new String[]{"aligny","ay"},new int[]{6,2},true);        if (ix > -1) {          cc.getVertical().setAlign(parseUnitValueOrAlign(part.substring(ix).trim(),false,null));          continue;        }        ix=startsWithLenient(part,new String[]{"alignx","ax"},new int[]{6,2},true);        if (ix > -1) {          cc.getHorizontal().setAlign(parseUnitValueOrAlign(part.substring(ix).trim(),true,null));          continue;        }        ix=startsWithLenient(part,"align",2,true);        if (ix > -1) {          String[] gaps=toTrimmedTokens(part.substring(ix).trim(),' ');          cc.getHorizontal().setAlign(parseUnitValueOrAlign(gaps[0],true,null));          if (gaps.length > 1) {            cc.getVertical().setAlign(parseUnitValueOrAlign(gaps[1],false,null));          }          continue;        }      }      if ((c == 'x' || c == 'y') && part.length() > 2) {        char c2=part.charAt(1);        if (c2 == ' ' || (c2 == '2' && part.charAt(2) == ' ')) {          if (cc.getPos() == null) {            cc.setPos(new UnitValue[4]);          } else           if (cc.isBoundsInGrid() == false) {            throw new IllegalArgumentException("Cannot combine 'position' with 'x/y/x2/y2' keywords.");          }          int edge=(c == 'x' ? 0 : 1) + (c2 == '2' ? 2 : 0);          UnitValue[] pos=cc.getPos();          pos[edge]=parseUnitValue(part.substring(2).trim(),null,c == 'x');          cc.setPos(pos);          cc.setBoundsInGrid(true);          continue;        }      }      if (c == 'c') {        ix=startsWithLenient(part,"cell",4,true);        if (ix > -1) {          String[] grs=toTrimmedTokens(part.substring(ix).trim(),' ');          if (grs.length < 2) {            throw new IllegalArgumentException("At least two integers must follow " + part);          }          cc.setCellX(Integer.parseInt(grs[0]));          cc.setCellY(Integer.parseInt(grs[1]));          if (grs.length > 2) {            cc.setSpanX(Integer.parseInt(grs[2]));          }          if (grs.length > 3) {            cc.setSpanY(Integer.parseInt(grs[3]));          }          continue;        }      }      if (c == 'p') {        ix=startsWithLenient(part,"pos",3,true);        if (ix > -1) {          if (cc.getPos() != null && cc.isBoundsInGrid()) {            throw new IllegalArgumentException("Can not combine 'pos' with 'x/y/x2/y2' keywords.");          }          String[] pos=toTrimmedTokens(part.substring(ix).trim(),' ');          UnitValue[] bounds=new UnitValue[4];          for (int j=0; j < pos.length; j++) {            bounds[j]=parseUnitValue(pos[j],null,j % 2 == 0);          }          if (bounds[0] == null && bounds[2] == null || bounds[1] == null && bounds[3] == null) {            throw new IllegalArgumentException("Both x and x2 or y and y2 can not be null!");          }          cc.setPos(bounds);          cc.setBoundsInGrid(false);          continue;        }        ix=startsWithLenient(part,"pad",3,true);        if (ix > -1) {          UnitValue[] p=parseInsets(part.substring(ix).trim(),false);          cc.setPadding(new UnitValue[]{p[0],p.length > 1 ? p[1] : null,p.length > 2 ? p[2] : null,p.length > 3 ? p[3] : null});          continue;        }        ix=startsWithLenient(part,"pushx",5,true);        if (ix > -1) {          cc.setPushX(parseFloat(part.substring(ix).trim(),ResizeConstraint.WEIGHT_100));          continue;        }        ix=startsWithLenient(part,"pushy",5,true);        if (ix > -1) {          cc.setPushY(parseFloat(part.substring(ix).trim(),ResizeConstraint.WEIGHT_100));          continue;        }        ix=startsWithLenient(part,"push",4,false);        if (ix > -1) {          String[] pushs=toTrimmedTokens(part.substring(ix).trim(),' ');          cc.setPushX(parseFloat(pushs[0],ResizeConstraint.WEIGHT_100));          cc.setPushY(parseFloat(pushs.length > 1 ? pushs[1] : "",ResizeConstraint.WEIGHT_100));          continue;        }      }      if (c == 't') {        ix=startsWithLenient(part,"tag",3,true);        if (ix > -1) {          cc.setTag(part.substring(ix).trim());          continue;        }      }      if (c == 'w' || c == 'h') {        if (part.equals("wrap")) {          cc.setWrap(true);          continue;        }        if (part.startsWith("wrap ")) {          String gapSz=part.substring(5).trim();          cc.setWrapGapSize(parseBoundSize(gapSz,true,true));          continue;        }        boolean isHor=c == 'w';        if (isHor && (part.startsWith("w ") || part.startsWith("width "))) {          String uvStr=part.substring(part.charAt(1) == ' ' ? 2 : 6).trim();          cc.getHorizontal().setSize(parseBoundSize(uvStr,false,true));          continue;        }        if (!isHor && (part.startsWith("h ") || part.startsWith("height "))) {          String uvStr=part.substring(part.charAt(1) == ' ' ? 2 : 7).trim();          cc.getVertical().setSize(parseBoundSize(uvStr,false,false));          continue;        }        if (part.startsWith("wmin ") || part.startsWith("wmax ") || part.startsWith("hmin ")|| part.startsWith("hmax ")) {          String uvStr=part.substring(5).trim();          if (uvStr.length() > 0) {            UnitValue uv=parseUnitValue(uvStr,null,isHor);            boolean isMin=part.charAt(3) == 'n';            DimConstraint dc=isHor ? cc.getHorizontal() : cc.getVertical();            dc.setSize(new BoundSize(isMin ? uv : dc.getSize().getMin(),dc.getSize().getPreferred(),isMin ? (dc.getSize().getMax()) : uv,uvStr));            continue;          }        }        if (part.equals("west")) {          cc.setDockSide(1);          continue;        }        if (part.startsWith("hidemode ")) {          cc.setHideMode(Integer.parseInt(part.substring(9)));          continue;        }      }      if (c == 'i' && part.startsWith("id ")) {        cc.setId(part.substring(3).trim());        int dIx=cc.getId().indexOf('.');        if (dIx == 0 || dIx == cc.getId().length() - 1) {          throw new IllegalArgumentException("Dot must not be first or last!");        }        continue;      }      if (c == 'e') {        if (part.equals("east")) {          cc.setDockSide(3);          continue;        }        if (part.equals("external")) {          cc.setExternal(true);          continue;        }        ix=startsWithLenient(part,new String[]{"endgroupx","endgroupy","egx","egy"},new int[]{-1,-1,-1,-1},true);        if (ix > -1) {          String sg=part.substring(ix).trim();          char lc=part.charAt(ix - 1);          DimConstraint dc=(lc == 'x' ? cc.getHorizontal() : cc.getVertical());          dc.setEndGroup(sg);          continue;        }      }      if (c == 'd') {        if (part.equals("dock north")) {          cc.setDockSide(0);          continue;        }        if (part.equals("dock west")) {          cc.setDockSide(1);          continue;        }        if (part.equals("dock south")) {          cc.setDockSide(2);          continue;        }        if (part.equals("dock east")) {          cc.setDockSide(3);          continue;        }        if (part.equals("dock center")) {          cc.getHorizontal().setGrow(new Float(100f));          cc.getVertical().setGrow(new Float(100f));          cc.setPushX(new Float(100f));          cc.setPushY(new Float(100f));          continue;        }      }      if (c == 'v') {        ix=startsWithLenient(part,new String[]{"visualpadding","vp"},new int[]{3,2},true);        if (ix > -1) {          UnitValue[] p=parseInsets(part.substring(ix).trim(),false);          cc.setVisualPadding(new UnitValue[]{p[0],p.length > 1 ? p[1] : null,p.length > 2 ? p[2] : null,p.length > 3 ? p[3] : null});          continue;        }      }      UnitValue horAlign=parseAlignKeywords(part,true);      if (horAlign != null) {        cc.getHorizontal().setAlign(horAlign);        continue;      }      UnitValue verAlign=parseAlignKeywords(part,false);      if (verAlign != null) {        cc.getVertical().setAlign(verAlign);        continue;      }      throw new IllegalArgumentException("Unknown keyword.");    } catch (    Exception ex) {      ex.printStackTrace();      throw new IllegalArgumentException("Error parsing Constraint: '" + part + "'");    }  }  return cc;}  }
class C{  SegmentTreeNode<?> computeRightChild(SegmentTreeNode<?> node){  if (node.right - node.left > 1) {    return constructor.construct((node.left + node.right) / 2,node.right);  }  return null;}  }
class C{  public static boolean isValidIPAddress(String address){  if (address == null || address.length() == 0) {    return false;  }  boolean ipv6Expected=false;  if (address.charAt(0) == '[') {    if (address.length() > 2 && address.charAt(address.length() - 1) == ']') {      address=address.substring(1,address.length() - 1);      ipv6Expected=true;    } else {      return false;    }  }  if (Character.digit(address.charAt(0),16) != -1 || (address.charAt(0) == ':')) {    byte[] addr=null;    addr=strToIPv4(address);    if (addr == null) {      addr=strToIPv6(address);    } else     if (ipv6Expected) {      return false;    }    if (addr != null) {      return true;    }  }  return false;}  }
class C{  private void loadVerticesAndRelatives(){  List<CnATreeElement> elementList=new LinkedList<CnATreeElement>();  for (  IGraphElementLoader loader : getLoaderList()) {    loader.setCnaTreeElementDao(getCnaTreeElementDao());    elementList.addAll(loader.loadElements());  }  for (  CnATreeElement element : elementList) {    graph.addVertex(element);    if (LOG.isDebugEnabled()) {      LOG.debug("Vertex added: " + element.getTitle());    }    uuidMap.put(element.getUuid(),element);  }  for (  CnATreeElement parent : elementList) {    Set<CnATreeElement> children=parent.getChildren();    for (    CnATreeElement child : children) {      createParentChildEdge(parent,child);    }  }}  }
class C{  private void initializeLiveAttributes(){  transform=createLiveAnimatedTransformList(null,SVG_TRANSFORM_ATTRIBUTE,"");  externalResourcesRequired=createLiveAnimatedBoolean(null,SVG_EXTERNAL_RESOURCES_REQUIRED_ATTRIBUTE,false);}  }
class C{  public void putParcelable(String key,Parcelable value){  unparcel();  mMap.put(key,value);  mFdsKnown=false;}  }
class C{  public static <T>Collection<T> flatten(Iterable<T> self,Closure<? extends T> flattenUsing){  return flatten(self,createSimilarCollection(self),flattenUsing);}  }
class C{  public double semiDeviation(){  return Math.sqrt(semiVariance());}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String val=getString(stack);  Sage.put(getString(stack),val);  return null;}  }
class C{  protected Preference createUserDictionaryPreference(String locale,Activity activity){  final Preference newPref=new Preference(getActivity());  final Intent intent=new Intent(USER_DICTIONARY_SETTINGS_INTENT_ACTION);  if (null == locale) {    newPref.setTitle(Locale.getDefault().getDisplayName());  } else {    if ("".equals(locale))     newPref.setTitle(getString(R.string.user_dict_settings_all_languages)); else     newPref.setTitle(Utils.createLocaleFromString(locale).getDisplayName());    intent.putExtra("locale",locale);    newPref.getExtras().putString("locale",locale);  }  newPref.setIntent(intent);  newPref.setFragment(com.android.settings.UserDictionarySettings.class.getName());  return newPref;}  }
class C{  public static <T>T withPrintWriter(Path self,@ClosureParams(value=SimpleType.class,options="java.io.PrintWriter") Closure<T> closure) throws IOException {  return IOGroovyMethods.withWriter(newPrintWriter(self),closure);}  }
class C{  public void testBug77649() throws Exception {  Properties props=getPropertiesFromTestsuiteUrl();  String host=props.getProperty(NonRegisteringDriver.HOST_PROPERTY_KEY);  String port=props.getProperty(NonRegisteringDriver.PORT_PROPERTY_KEY);  String[] hosts=new String[]{host,"address","address.somewhere","addressing","addressing.somewhere"};  UnreliableSocketFactory.flushAllStaticData();  for (int i=1; i < hosts.length; i++) {    UnreliableSocketFactory.mapHost(hosts[i],host);  }  props=getHostFreePropertiesFromTestsuiteUrl();  props.setProperty("socketFactory",UnreliableSocketFactory.class.getName());  for (  String h : hosts) {    getConnectionWithProps(String.format("jdbc:mysql://%s:%s",h,port),props).close();    getConnectionWithProps(String.format("jdbc:mysql://address=(protocol=tcp)(host=%s)(port=%s)",h,port),props).close();  }}  }
class C{  public final Iterator<PluginPatternMatcher> pathsIterator(){  return mDataPaths != null ? mDataPaths.iterator() : null;}  }
class C{  private void checkInMoving(float x,float y){  final int xDiff=(int)Math.abs(x - lastMotionX);  final int yDiff=(int)Math.abs(y - lastMotionY);  final int touchSlop=this.touchSlop;  boolean xMoved=xDiff > touchSlop;  boolean yMoved=yDiff > touchSlop;  if (xMoved) {    touchState=TOUCH_STATE_SCROLLING_X;    lastMotionX=x;    lastMotionY=y;  }  if (yMoved) {    touchState=TOUCH_STATE_SCROLLING_Y;    lastMotionX=x;    lastMotionY=y;  }}  }
class C{  public final boolean checkInstance(Instance instance){  if (instance.numAttributes() != numAttributes()) {    return false;  }  for (int i=0; i < numAttributes(); i++) {    if (instance.isMissing(i)) {      continue;    } else     if (attribute(i).isNominal() || attribute(i).isString()) {      if (!(Utils.eq(instance.value(i),(double)(int)instance.value(i)))) {        return false;      } else       if (Utils.sm(instance.value(i),0) || Utils.gr(instance.value(i),attribute(i).numValues())) {        return false;      }    }  }  return true;}  }
class C{  private static byte[] concatBytes(byte[] array1,byte[] array2){  byte[] cBytes=new byte[array1.length + array2.length];  try {    System.arraycopy(array1,0,cBytes,0,array1.length);    System.arraycopy(array2,0,cBytes,array1.length,array2.length);  } catch (  Exception e) {    throw new FacesException(e);  }  return cBytes;}  }
class C{  void layout(int delta,boolean animate){  if (mDataChanged) {    handleDataChanged();  }  if (getCount() == 0) {    resetList();    return;  }  if (mNextSelectedPosition >= 0) {    setSelectedPositionInt(mNextSelectedPosition);  }  recycleAllViews();  detachAllViewsFromParent();  int count=getAdapter().getCount();  float angleUnit=360.0f / count;  float angleOffset=mSelectedPosition * angleUnit;  for (int i=0; i < getAdapter().getCount(); i++) {    float angle=angleUnit * i - angleOffset;    if (angle < 0.0f)     angle=360.0f + angle;    makeAndAddView(i,angle);  }  mRecycler.clear();  invalidate();  setNextSelectedPositionInt(mSelectedPosition);  checkSelectionChanged();  mNeedSync=false;  updateSelectedItemMetadata();}  }
class C{  private void updateMenuItems(boolean isGpsStarted,boolean isRecording){  boolean hasTrack=listView != null && listView.getCount() != 0;  if (startGpsMenuItem != null) {    startGpsMenuItem.setVisible(!isRecording);    if (!isRecording) {      startGpsMenuItem.setTitle(isGpsStarted ? R.string.menu_stop_gps : R.string.menu_start_gps);      startGpsMenuItem.setIcon(isGpsStarted ? R.drawable.ic_menu_stop_gps : R.drawable.ic_menu_start_gps);      TrackIconUtils.setMenuIconColor(startGpsMenuItem);    }  }  if (playMultipleItem != null) {    playMultipleItem.setVisible(hasTrack);  }  if (syncNowMenuItem != null) {    syncNowMenuItem.setTitle(driveSync ? R.string.menu_sync_now : R.string.menu_sync_drive);  }  if (aggregatedStatisticsMenuItem != null) {    aggregatedStatisticsMenuItem.setVisible(hasTrack);  }  if (exportAllMenuItem != null) {    exportAllMenuItem.setVisible(hasTrack && !isRecording);  }  if (importAllMenuItem != null) {    importAllMenuItem.setVisible(!isRecording);  }  if (deleteAllMenuItem != null) {    deleteAllMenuItem.setVisible(hasTrack && !isRecording);  }}  }
class C{  public boolean isDuplicateSupported(){  return duplicateSupported;}  }
class C{  public void onStart(){}  }
class C{  public static int[][] loadPNMFile(InputStream str) throws IOException {  BufferedInputStream stream=new BufferedInputStream(str);  String type=tokenizeString(stream);  if (type.equals("P1"))   return loadPlainPBM(stream); else   if (type.equals("P2"))   return loadPlainPGM(stream); else   if (type.equals("P4"))   return loadRawPBM(stream); else   if (type.equals("P5"))   return loadRawPGM(stream); else   throw new IOException("Not a viable PBM or PGM stream");}  }
class C{  public BiCorpus alignedFromFiles(String f) throws IOException {  return new BiCorpus(fpath + f + extf,epath + f + exte,apath + f + exta);}  }
class C{  public LognormalDistr(double shape,double scale){  numGen=new LogNormalDistribution(scale,shape);}  }
class C{  private static String contentLengthHeader(final long length){  return String.format("Content-Length: %d",length);}  }
class C{  @Bean @ConditionalOnMissingBean public AmqpSenderService amqpSenderServiceBean(){  return new DefaultAmqpSenderService(rabbitTemplate());}  }
class C{  @Override protected void initialize(){  super.initialize();  m_Processor=new MarkdownProcessor();  m_Markdown="";}  }
class C{  public void upperBound(byte[] key) throws IOException {  upperBound(key,0,key.length);}  }
class C{  public static String replaceLast(String s,char sub,char with){  int index=s.lastIndexOf(sub);  if (index == -1) {    return s;  }  char[] str=s.toCharArray();  str[index]=with;  return new String(str);}  }
class C{  public static void main(String[] args){  Thrust simulation=new Thrust();  simulation.run();}  }
class C{  public static <T>T checkNotNull(T reference,@Nullable String errorMessageTemplate,@Nullable Object... errorMessageArgs){  if (reference == null) {    throw new NullPointerException(format(errorMessageTemplate,errorMessageArgs));  }  return reference;}  }
class C{  public boolean insert(String name,RegExp definition){  if (Options.DEBUG)   Out.debug("inserting macro " + name + " with definition :"+ Out.NL+ definition);  used.put(name,Boolean.FALSE);  return macros.put(name,definition) == null;}  }
class C{  public boolean add(Object o){  ensureCapacity(size + 1);  elementData[size++]=o;  return true;}  }
class C{  public InvocationTargetException(Throwable target,String s){  super(s,null);  this.target=target;}  }
class C{  public boolean isExternalSkin(){  return !isDefaultSkin && mResources != null;}  }
class C{  private void updateActions(){  actions.removeAll();  final ActionGroup mainActionGroup=(ActionGroup)actionManager.getAction(getGroupMenu());  if (mainActionGroup == null) {    return;  }  final Action[] children=mainActionGroup.getChildren(null);  for (  final Action action : children) {    final Presentation presentation=presentationFactory.getPresentation(action);    final ActionEvent e=new ActionEvent(ActionPlaces.MAIN_CONTEXT_MENU,presentation,actionManager,0);    action.update(e);    if (presentation.isVisible()) {      actions.add(action);    }  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  TechCategory fallthrough(){switch (this) {case OMNI_AERO:    return OMNI;case CLAN_AERO:case CLAN_VEE:  return CLAN;case IS_ADVANCED_AERO:case IS_ADVANCED_VEE:return IS_ADVANCED;default :return null;}}  }
class C{  static void svd_dscal(int n,double da,double[] dx,int incx){  if (n <= 0 || incx == 0)   return;  int ix=(incx < 0) ? n - 1 : 0;  for (int i=0; i < n; i++) {    dx[ix]*=da;    ix+=incx;  }  return;}  }
class C{  public CampoFechaVO insertValue(final CampoFechaVO value){  try {    DbConnection conn=getConnection();    DbInsertFns.insert(conn,TABLE_NAME,DbUtil.getColumnNames(COL_DEFS),new SigiaDbInputRecord(COL_DEFS,value));    return value;  } catch (  Exception e) {    logger.error("Error insertando campo de tipo fecha para el descriptor " + value.getIdObjeto(),e);    throw new DBException("insertando campo de tipo fecha",e);  }}  }
class C{  private synchronized void closeActiveFile(){  StringWriterFile activeFile=this.activeFile;  try {    this.activeFile=null;    if (activeFile != null) {      activeFile.close();      getPolicy().closeActiveFile(activeFile.path());      activeFile=null;    }  } catch (  IOException e) {    trace.error("error closing active file '{}'",activeFile.path(),e);  }}  }
class C{  public void testWARTypeEquality(){  WAR war1=new WAR("/some/path/to/file.war");  WAR war2=new WAR("/otherfile.war");  assertEquals(war1.getType(),war2.getType());}  }
class C{  public static Vector readSignatureAlgorithmsExtension(byte[] extensionData) throws IOException {  if (extensionData == null) {    throw new IllegalArgumentException("'extensionData' cannot be null");  }  ByteArrayInputStream buf=new ByteArrayInputStream(extensionData);  Vector supported_signature_algorithms=parseSupportedSignatureAlgorithms(false,buf);  TlsProtocol.assertEmpty(buf);  return supported_signature_algorithms;}  }
class C{  public void updateNCharacterStream(int columnIndex,java.io.Reader x,long length) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("jdbcrowsetimpl.featnotsupp").toString());}  }
class C{  public boolean isModified(){  return isCustom() && !isUserAdded();}  }
class C{  public String toString(){  return this.getClass().getName() + "(" + my_k+ ")";}  }
class C{  private static PostingsEnum termDocs(IndexReader reader,Term term) throws IOException {  return MultiFields.getTermDocsEnum(reader,MultiFields.getLiveDocs(reader),term.field(),term.bytes());}  }
class C{  public boolean isSubregion(){  return subregion;}  }
class C{  public static void encodeToFile(byte[] dataToEncode,String filename) throws java.io.IOException {  if (dataToEncode == null) {    throw new NullPointerException("Data to encode was null.");  }  Base64.OutputStream bos=null;  try {    bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.ENCODE);    bos.write(dataToEncode);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bos.close();    } catch (    Exception e) {    }  }}  }
class C{  public synchronized void addDataStatusListener(DataStatusListener l){  m_mTab.addDataStatusListener(l);}  }
class C{  protected void addField(DurationFieldType field,int value){  addFieldInto(iValues,field,value);}  }
class C{  @Override public int perimeter(int size){  size=size / 2;  int retval=sw.perimeter(size);  retval+=se.perimeter(size);  retval+=ne.perimeter(size);  retval+=nw.perimeter(size);  return retval;}  }
class C{  public BigdataStatementIterator addedIterator(){  final IChunkedOrderedIterator<ISPO> src=new ChunkedWrappedIterator<ISPO>(added.iterator());  return new BigdataStatementIteratorImpl(kb,src).start(kb.getExecutorService());}  }
class C{  public <V extends Object,C extends RTSpan<V>>void applyEffect(Effect<V,C> effect,V value){  if (mUseRTFormatting && !mIsSelectionChanging && !mIsSaving) {    Spannable oldSpannable=mIgnoreTextChanges ? null : cloneSpannable();    effect.applyToSelection(this,value);synchronized (this) {      if (mListener != null && !mIgnoreTextChanges) {        Spannable newSpannable=cloneSpannable();        mListener.onTextChanged(this,oldSpannable,newSpannable,getSelectionStart(),getSelectionEnd(),getSelectionStart(),getSelectionEnd());      }      mLayoutChanged=true;    }  }}  }
class C{  public DefaultLmlParser(final LmlData data,final LmlSyntax syntax,final LmlTemplateReader templateReader,final boolean strict){  super(data,syntax,templateReader,new DefaultLmlStyleSheet(),strict);}  }
class C{  private static void populateFancy(SQLiteDatabase writableDb){  long startOfToday=DateUtil.parse(DateUtil.format(System.currentTimeMillis()));  ItemDao.saveItem(writableDb,new Item(Item.TYPE_EXPENSE,"Clothes","New jeans",10000,startOfToday,Item.NO_ID));  ItemDao.saveItem(writableDb,new Item(Item.TYPE_EXPENSE,"Flat / House","Monthly rent",35000,startOfToday,Item.NO_ID));  ItemDao.saveItem(writableDb,new Item(Item.TYPE_EXPENSE,"Grocery","Fruits & vegetables",3567,DateUtil.parse("19/08/2015"),Item.NO_ID));  ItemDao.saveItem(writableDb,new Item(Item.TYPE_EXPENSE,"Fuel","Full gas tank",7590,DateUtil.parse("14/08/2015"),Item.NO_ID));  ItemDao.saveItem(writableDb,new Item(Item.TYPE_EXPENSE,"Clothes","New shirt",3599,DateUtil.parse("11/08/2015"),Item.NO_ID));  ItemDao.saveItem(writableDb,new Item(Item.TYPE_EXPENSE,"Restaurant","Family get together",3691,DateUtil.parse("05/08/2015"),Item.NO_ID));  ItemDao.saveItem(writableDb,new Item(Item.TYPE_INCOME,"Salary","",90000,DateUtil.parse("31/07/2015"),Item.NO_ID));  ItemDao.saveItem(writableDb,new Item(Item.TYPE_EXPENSE,"Personal care","New perfume",3865,DateUtil.parse("29/07/2015"),Item.NO_ID));  ItemDao.saveItem(writableDb,new Item(Item.TYPE_EXPENSE,"Grocery","Bottle of milk",345,DateUtil.parse("26/07/2015"),Item.NO_ID));}  }
class C{  public TestEntity(int index,String text,String value,double minConfidence){  super(index,text);  this.value=value;  this.minConfidence=minConfidence;}  }
class C{  public boolean contains(JComponent a,int b,int c){  boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);  }  return returnValue;}  }
class C{  public boolean isClosed(){  return closed;}  }
class C{  public void store(float val,Offset offset){  this.plus(offset).store(val);}  }
class C{  public List<IvrZone> showIvrZones(boolean active) throws NetworkDeviceControllerException {  List<IvrZone> zones=new ArrayList<IvrZone>();  SSHPrompt[] prompts={SSHPrompt.POUND,SSHPrompt.GREATER_THAN};  StringBuilder buf=new StringBuilder();  String cmdKey=active ? "MDSDialog.ivr.show.zone.active.cmd" : "MDSDialog.ivr.show.zone.cmd";  sendWaitFor(MDSDialogProperties.getString(cmdKey),defaultTimeout,prompts,buf);  String[] lines=getLines(buf);  IvrZone zone=null;  IvrZoneMember member=null;  String[] regex={MDSDialogProperties.getString("MDSDialog.ivr.showZoneset.zone.name.match"),MDSDialogProperties.getString("MDSDialog.ivr.showZoneset.zone.member.match")};  String[] groups=new String[10];  for (  String line : lines) {    int index=match(line,regex,groups);switch (index) {case 0:      zone=new IvrZone(groups[0]);    zones.add(zone);  break;case 1:member=new IvrZoneMember(groups[0],Integer.valueOf(groups[3]));zone.getMembers().add(member);break;}}return zones;}  }
class C{  public static void append(File file,Reader reader,String charset) throws IOException {  append(file,reader,charset,false);}  }
class C{  public static LifetimeAttribute createLifetimeAttribute(int lifetime){  LifetimeAttribute attribute=new LifetimeAttribute();  attribute.setLifetime(lifetime);  return attribute;}  }
class C{  public void testFilePrimary() throws Exception {  start();  igfsPrimary.create(FILE,true).close();  checkEvictionPolicy(0,0);  int blockSize=igfsPrimary.info(FILE).blockSize();  append(FILE,blockSize);  checkEvictionPolicy(0,0);  read(FILE,0,blockSize);  checkEvictionPolicy(0,0);}  }
class C{  public static String createTestPtStationCSVFile(File file){  try (BufferedWriter bw=new BufferedWriter(new FileWriter(file))){    bw.write("id,x,y");    bw.newLine();    bw.write("1,10,10");    bw.newLine();    bw.write("2,10, 190");    bw.newLine();    bw.write("3,190,190");    bw.newLine();    bw.write("4,190,10");    bw.newLine();    return file.getCanonicalPath();  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  @Override public int hashCode(){  int result=super.hashCode();  return result;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case SGenPackage.FEATURE_TYPE__DEPRECATED:    setDeprecated(DEPRECATED_EDEFAULT);  return;case SGenPackage.FEATURE_TYPE__COMMENT:setComment(COMMENT_EDEFAULT);return;case SGenPackage.FEATURE_TYPE__PARAMETERS:getParameters().clear();return;case SGenPackage.FEATURE_TYPE__OPTIONAL:setOptional(OPTIONAL_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public boolean isVMAX3VolumeCompressionEnabled(URI blockObjectURI){  VirtualPool virtualPool=null;  Volume volume=null;  if (URIUtil.isType(blockObjectURI,Volume.class)) {    volume=_dbClient.queryObject(Volume.class,blockObjectURI);  } else   if (URIUtil.isType(blockObjectURI,BlockSnapshot.class)) {    BlockSnapshot snapshot=_dbClient.queryObject(BlockSnapshot.class,blockObjectURI);    volume=_dbClient.queryObject(Volume.class,snapshot.getParent());  } else   if (URIUtil.isType(blockObjectURI,BlockMirror.class)) {    BlockMirror mirror=_dbClient.queryObject(BlockMirror.class,blockObjectURI);    virtualPool=_dbClient.queryObject(VirtualPool.class,mirror.getVirtualPool());  }  if (volume != null) {    virtualPool=_dbClient.queryObject(VirtualPool.class,volume.getVirtualPool());  }  return ((virtualPool != null) && virtualPool.getCompressionEnabled());}  }
class C{  public void releaseConnection(Database conn){  if (conn != null)   conn.close();}  }
class C{  public final void testRemoveHelperTextId(){  PasswordEditText passwordEditText=new PasswordEditText(getContext());  passwordEditText.addHelperTextId(android.R.string.cancel);  passwordEditText.addHelperTextId(android.R.string.copy);  passwordEditText.removeHelperTextId(android.R.string.cancel);  passwordEditText.removeHelperTextId(android.R.string.cancel);  assertEquals(1,passwordEditText.getHelperTexts().size());  assertEquals(getContext().getText(android.R.string.copy),passwordEditText.getHelperTexts().iterator().next());}  }
class C{  private void logMessage(String msg,Object[] obj){  if (getMonitoringPropertiesLoader().isToLogIndications()) {    _logger.debug(msg,obj);  }}  }
class C{  public static Float toRef(float f){  return new Float(f);}  }
class C{  @Override protected boolean shouldComposeCreationImage(){  return true;}  }
class C{  public synchronized void promote(Tile tile){  if (tileQueue.contains(tile)) {    try {      tileQueue.remove(tile);      tile.setPriority(Tile.Priority.High);      tileQueue.put(tile);    } catch (    Exception ex) {      ex.printStackTrace();    }  }}  }
class C{  public void exitApp(){  this.webView.getPluginManager().postMessage("exit",null);}  }
class C{  public void test_getInnerCause01_reject_otherType(){  Throwable t=new Throwable();  assertNull(getInnerCause(t,Exception.class));}  }
class C{  public Handshake handshake(){  return handshake;}  }
class C{  private Coordinate averagePoint(CoordinateSequence seq){  Coordinate a=new Coordinate(0,0,0);  int n=seq.size();  for (int i=0; i < n; i++) {    a.x+=seq.getOrdinate(i,CoordinateSequence.X);    a.y+=seq.getOrdinate(i,CoordinateSequence.Y);    a.z+=seq.getOrdinate(i,CoordinateSequence.Z);  }  a.x/=n;  a.y/=n;  a.z/=n;  return a;}  }
class C{  public static void invokeWebserviceASync(WSDefinition def,SuccessCallback scall,FailureCallback fcall,Object... arguments){  WSConnection cr=new WSConnection(def,scall,fcall,arguments);  NetworkManager.getInstance().addToQueue(cr);}  }
class C{  public PutResponseMessage(PutResponseMessage other){  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }}  }
class C{  private boolean isSynthetic(Method m){  if ((m.getAccessFlags() & Constants.ACC_SYNTHETIC) != 0) {    return true;  }  Attribute[] attrs=m.getAttributes();  for (  Attribute attr : attrs) {    if (attr instanceof Synthetic) {      return true;    }  }  return false;}  }
class C{  public boolean isTagline(){  return tagline;}  }
class C{  protected LocaTable(TrueTypeFont ttf){  super(TrueTypeTable.LOCA_TABLE);  MaxpTable maxp=(MaxpTable)ttf.getTable("maxp");  int numGlyphs=maxp.getNumGlyphs();  HeadTable head=(HeadTable)ttf.getTable("head");  short format=head.getIndexToLocFormat();  isLong=(format == 1);  offsets=new int[numGlyphs + 1];}  }
class C{  public static <T>T create(Class<T> theQueryClass){  return AgentClass.createAgent(theQueryClass);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:44.163 -0500",hash_original_method="CE28B7D5A93F674A0286463AAF68C789",hash_generated_method="4C5D61097E13A407D793E43190510D41") public synchronized void addFailure(Test test,AssertionFailedError t){  fFailures.addElement(new TestFailure(test,t));  for (Enumeration e=cloneListeners().elements(); e.hasMoreElements(); ) {    ((TestListener)e.nextElement()).addFailure(test,t);  }}  }
class C{  public ExtendedKeyUsage(byte[] encoding){  super(encoding);}  }
class C{  public Iterator<E> subsetIterator(E from,E to){  return new BinarySearchTreeIterator<E>(this.root,from,to);}  }
class C{  public int valueForXPosition(int xPos){  int value;  int minValue=slider.getMinimum();  int maxValue=slider.getMaximum();  int trackLeft=trackRect.x + thumbRect.width / 2 + trackBorder;  int trackRight=trackRect.x + trackRect.width - thumbRect.width / 2 - trackBorder;  int trackLength=trackRight - trackLeft;  if (xPos <= trackLeft) {    value=drawInverted() ? maxValue : minValue;  } else   if (xPos >= trackRight) {    value=drawInverted() ? minValue : maxValue;  } else {    int distanceFromTrackLeft=xPos - trackLeft;    double valueRange=(double)maxValue - (double)minValue;    double valuePerPixel=valueRange / (double)trackLength;    int valueFromTrackLeft=(int)Math.round(distanceFromTrackLeft * valuePerPixel);    value=drawInverted() ? maxValue - valueFromTrackLeft : minValue + valueFromTrackLeft;  }  return value;}  }
class C{  @Override protected EClass eStaticClass(){  return SRuntimePackage.Literals.COMPOSITE_SLOT;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentcreateattributeNS03.class,args);}  }
class C{  public ListIterator<AbstractInsnNode> iterator(){  return iterator(0);}  }
class C{  public static String escapeXml(String str){  if (str == null) {    return null;  }  return EntitiesUtils.XML.escape(str);}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void processResponse(SIPResponse response,MessageChannel incomingMessageChannel,SIPDialog dialog){  if (sipStack.isLoggingEnabled()) {    sipStack.getStackLogger().logDebug("PROCESSING INCOMING RESPONSE" + response.encodeMessage());  }  if (listeningPoint == null) {    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logError("Dropping message: No listening point" + " registered!");    return;  }  if (sipStack.checkBranchId() && !Utils.getInstance().responseBelongsToUs(response)) {    if (sipStack.isLoggingEnabled()) {      sipStack.getStackLogger().logError("Dropping response - topmost VIA header does not originate from this stack");    }    return;  }  SipProviderImpl sipProvider=listeningPoint.getProvider();  if (sipProvider == null) {    if (sipStack.isLoggingEnabled()) {      sipStack.getStackLogger().logError("Dropping message:  no provider");    }    return;  }  if (sipProvider.getSipListener() == null) {    if (sipStack.isLoggingEnabled()) {      sipStack.getStackLogger().logError("No listener -- dropping response!");    }    return;  }  SIPClientTransaction transaction=(SIPClientTransaction)this.transactionChannel;  SipStackImpl sipStackImpl=sipProvider.sipStack;  if (sipStack.isLoggingEnabled()) {    sipStackImpl.getStackLogger().logDebug("Transaction = " + transaction);  }  if (transaction == null) {    if (dialog != null) {      if (response.getStatusCode() / 100 != 2) {        if (sipStack.isLoggingEnabled()) {          sipStack.getStackLogger().logDebug("Response is not a final response and dialog is found for response -- dropping response!");        }        return;      } else       if (dialog.getState() == DialogState.TERMINATED) {        if (sipStack.isLoggingEnabled()) {          sipStack.getStackLogger().logDebug("Dialog is terminated -- dropping response!");        }        return;      } else {        boolean ackAlreadySent=false;        if (dialog.isAckSeen() && dialog.getLastAckSent() != null) {          if (dialog.getLastAckSent().getCSeq().getSeqNumber() == response.getCSeq().getSeqNumber()) {            ackAlreadySent=true;          }        }        if (ackAlreadySent && response.getCSeq().getMethod().equals(dialog.getMethod())) {          try {            if (sipStack.isLoggingEnabled()) {              sipStack.getStackLogger().logDebug("Retransmission of OK detected: Resending last ACK");            }            dialog.resendAck();            return;          } catch (          SipException ex) {            if (sipStack.isLoggingEnabled())             sipStack.getStackLogger().logError("could not resend ack",ex);          }        }      }    }    if (sipStack.isLoggingEnabled()) {      sipStack.getStackLogger().logDebug("could not find tx, handling statelessly Dialog =  " + dialog);    }    ResponseEventExt sipEvent=new ResponseEventExt(sipProvider,transaction,dialog,(Response)response);    if (response.getCSeqHeader().getMethod().equals(Request.INVITE)) {      SIPClientTransaction forked=this.sipStack.getForkedTransaction(response.getTransactionId());      sipEvent.setOriginalTransaction(forked);    }    sipProvider.handleEvent(sipEvent,transaction);    return;  }  ResponseEventExt responseEvent=null;  responseEvent=new ResponseEventExt(sipProvider,(ClientTransactionExt)transaction,dialog,(Response)response);  if (response.getCSeqHeader().getMethod().equals(Request.INVITE)) {    SIPClientTransaction forked=this.sipStack.getForkedTransaction(response.getTransactionId());    responseEvent.setOriginalTransaction(forked);  }  if (dialog != null && response.getStatusCode() != 100) {    dialog.setLastResponse(transaction,response);    transaction.setDialog(dialog,dialog.getDialogId());  }  sipProvider.handleEvent(responseEvent,transaction);}  }
class C{  public AnnotationAtttributeProposalInfo(IJavaProject project,CompletionProposal proposal){  super(project,proposal);}  }
class C{  public static void restoreReminderPreference(Context context){  int hour=MehPreferencesManager.getNotificationPreferenceHour(context);  int minute=MehPreferencesManager.getNotificationPreferenceMinute(context);  scheduleDailyReminder(context,hour,minute);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  BarChart(){}  }
class C{  public boolean isTransactionRelevant(Transaction tx) throws ScriptException {  lock.lock();  try {    return tx.getValueSentFromMe(this).signum() > 0 || tx.getValueSentToMe(this).signum() > 0 || !findDoubleSpendsAgainst(tx,transactions).isEmpty();  }  finally {    lock.unlock();  }}  }
class C{  public void free(GL2 gl){  if (vbos[0] >= 0) {    gl.glDeleteBuffers(1,vbos,0);  }  vbos[0]=-1;}  }
class C{  public Vector3(float x,float y,float z){  this.set(x,y,z);}  }
class C{  protected S_ActionImpl(){  super();}  }
class C{  public void clear(int maximumCapacity){  if (capacity <= maximumCapacity) {    clear();    return;  }  zeroValue=null;  hasZeroValue=false;  size=0;  resize(maximumCapacity);}  }
class C{  public void bulkLoad(DBIDs ids){  if (ids.size() == 0) {    return;  }  assert (root == null) : "Tree already initialized.";  DBIDIter it=ids.iter();  DBID first=DBIDUtil.deref(it);  ModifiableDoubleDBIDList candidates=DBIDUtil.newDistanceDBIDList(ids.size() - 1);  for (it.advance(); it.valid(); it.advance()) {    candidates.add(distance(first,it),it);  }  root=bulkConstruct(first,Integer.MAX_VALUE,candidates);}  }
class C{  protected ExtendedSolrQueryParser createEdismaxQueryParser(QParser qParser,String field){  return new ExtendedSolrQueryParser(qParser,field);}  }
class C{  protected void appendSummary(StringBuffer buffer,String fieldName,long[] array){  appendSummarySize(buffer,fieldName,array.length);}  }
class C{  protected UndoableEdit editToBeRedone(){  int count=edits.size();  int i=indexOfNextAdd;  while (i < count) {    UndoableEdit edit=edits.elementAt(i++);    if (edit.isSignificant()) {      return edit;    }  }  return null;}  }
class C{  public void actionPerformed(ActionEvent e){  Box b1=Box.createVerticalBox();  Version currentVersion=Version.currentViewableVersion();  String copyright=LicenseUtils.copyright();  copyright=copyright.replaceAll("\n","<br>");  String latestVersion=LatestClient.getInstance().getLatestResult(60);  latestVersion=latestVersion.replaceAll("\n","<br>");  JLabel label=new JLabel();  label.setText("<html>" + "<b>Tetrad " + currentVersion + "</b>"+ "<br>"+ "<br>Laboratory for Symbolic and Educational Computing"+ "<br>Department of Philosophy"+ "<br>Carnegie Mellon University"+ "<br>"+ "<br>Project Direction: Clark Glymour, Richard Scheines, Peter Spirtes"+ "<br>Lead Developer: Joseph Ramsey"+ "<br>"+ copyright+ "<br>"+ latestVersion+ "</html>");  label.setBackground(Color.LIGHT_GRAY);  label.setFont(new Font("Dialog",Font.PLAIN,12));  label.setBorder(new CompoundBorder(new LineBorder(Color.DARK_GRAY),new EmptyBorder(10,10,10,10)));  b1.add(label);  JOptionPane.showMessageDialog(JOptionUtils.centeringComp(),b1,"About Tetrad...",JOptionPane.PLAIN_MESSAGE);}  }
class C{  private void redrawMarkers(){  UI.execute(null);}  }
class C{  public void addToolTipSeries(List toolTips){  this.toolTipSeries.add(toolTips);}  }
class C{  static private String[] alphaMixedNumeric(){  return StringFunctions.combineStringArrays(StringFunctions.alphaMixed(),StringFunctions.numeric);}  }
class C{  long incrementInMsgs(){  return inMsgs.incrementAndGet();}  }
class C{  public final void yyreset(java.io.Reader reader){  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtEOF=false;}  }
class C{  public IntArraySpliterator(int[] array,int origin,int fence,int additionalCharacteristics){  this.array=array;  this.index=origin;  this.fence=fence;  this.characteristics=additionalCharacteristics | Spliterator.SIZED | Spliterator.SUBSIZED;}  }
class C{  @Override public void populateDAG(DAG dag,Configuration conf){  TweetsInput input=new TweetsInput();  Collector collector=new Collector();  WindowOption windowOption=new WindowOption.GlobalWindow();  ApexStream<String> tags=StreamFactory.fromInput(input,input.output,name("tweetSampler")).flatMap(new ExtractHashtags());  tags.window(windowOption,new TriggerOption().accumulatingFiredPanes().withEarlyFiringsAtEvery(1)).addCompositeStreams(ComputeTopCompletions.top(10,true)).print(name("console")).endWith(collector,collector.input,name("collector")).populateDag(dag);}  }
class C{  public void testBug21947042() throws Exception {  Connection sslConn=null;  Properties props=new Properties();  props.setProperty("logger","StandardLogger");  StandardLogger.startLoggingToBuffer();  try {    int searchFrom=0;    int found=0;    sslConn=getConnectionWithProps(props);    if (versionMeetsMinimum(5,7)) {      assertTrue(((MySQLConnection)sslConn).getUseSSL());      assertFalse(((MySQLConnection)sslConn).getVerifyServerCertificate());      assertTrue(((MySQLConnection)sslConn).getIO().isSSLEstablished());    } else {      assertFalse(((MySQLConnection)sslConn).getUseSSL());      assertTrue(((MySQLConnection)sslConn).getVerifyServerCertificate());      assertFalse(((MySQLConnection)sslConn).getIO().isSSLEstablished());    }    ResultSet rset=sslConn.createStatement().executeQuery("SHOW STATUS LIKE 'ssl_cipher'");    assertTrue(rset.next());    String cipher=rset.getString(2);    System.out.println("ssl_cipher=" + cipher);    rset=sslConn.createStatement().executeQuery("SHOW STATUS LIKE 'ssl_version'");    assertTrue(rset.next());    cipher=rset.getString(2);    System.out.println("ssl_version=" + cipher);    sslConn.close();    String log=StandardLogger.getBuffer().toString();    found=log.indexOf(Messages.getString("MysqlIO.SSLWarning"),searchFrom);    searchFrom=found + 1;    if (versionMeetsMinimum(5,7)) {      assertTrue(found != -1);    }    props.setProperty("useSSL","false");    sslConn=getConnectionWithProps(props);    assertFalse(((MySQLConnection)sslConn).getUseSSL());    assertTrue(((MySQLConnection)sslConn).getVerifyServerCertificate());    assertFalse(((MySQLConnection)sslConn).getIO().isSSLEstablished());    rset=sslConn.createStatement().executeQuery("SHOW STATUS LIKE 'ssl_cipher'");    assertTrue(rset.next());    cipher=rset.getString(2);    System.out.println("ssl_cipher=" + cipher);    rset=sslConn.createStatement().executeQuery("SHOW STATUS LIKE 'ssl_version'");    assertTrue(rset.next());    cipher=rset.getString(2);    System.out.println("ssl_version=" + cipher);    sslConn.close();    log=StandardLogger.getBuffer().toString();    found=log.indexOf(Messages.getString("MysqlIO.SSLWarning"),searchFrom);    if (found != -1) {      searchFrom=found + 1;      fail("Warning is not expected when useSSL is explicitly set to 'false'.");    }    props.setProperty("useSSL","true");    props.setProperty("trustCertificateKeyStoreUrl","file:src/testsuite/ssl-test-certs/test-cert-store");    props.setProperty("trustCertificateKeyStoreType","JKS");    props.setProperty("trustCertificateKeyStorePassword","password");    sslConn=getConnectionWithProps(props);    assertTrue(((MySQLConnection)sslConn).getUseSSL());    assertTrue(((MySQLConnection)sslConn).getVerifyServerCertificate());    assertTrue(((MySQLConnection)sslConn).getIO().isSSLEstablished());    rset=sslConn.createStatement().executeQuery("SHOW STATUS LIKE 'ssl_cipher'");    assertTrue(rset.next());    cipher=rset.getString(2);    System.out.println("ssl_cipher=" + cipher);    rset=sslConn.createStatement().executeQuery("SHOW STATUS LIKE 'ssl_version'");    assertTrue(rset.next());    cipher=rset.getString(2);    System.out.println("ssl_version=" + cipher);    sslConn.close();    log=StandardLogger.getBuffer().toString();    found=log.indexOf(Messages.getString("MysqlIO.SSLWarning"),searchFrom);    if (found != -1) {      searchFrom=found + 1;      fail("Warning is not expected when useSSL is explicitly set to 'false'.");    }  }  finally {    StandardLogger.dropBuffer();  }}  }
class C{  public JComponent createEmbeddedPropertyGUI(String prefix,Properties props,Properties info){  if (Debug.debugging("inspectordetail")) {    Debug.output("Inspector creating GUI for " + prefix + "\nPROPERTIES "+ props+ "\nPROP INFO "+ info);  }  String propertyList=info.getProperty(PropertyConsumer.initPropertiesProperty);  Vector<String> sortedKeys;  if (propertyList != null) {    Vector<String> propertiesToShow=PropUtils.parseSpacedMarkers(propertyList);    for (int i=0; i < propertiesToShow.size(); i++) {      propertiesToShow.set(i,prefix + "." + propertiesToShow.get(i));    }    sortedKeys=propertiesToShow;  } else {    sortedKeys=sortKeys(props.keySet());  }  editors=new Hashtable<String,PropertyEditor>(sortedKeys.size());  JPanel component=new JPanel();  component.setLayout(new BorderLayout());  JPanel propertyPanel=new JPanel();  GridBagLayout gridbag=new GridBagLayout();  GridBagConstraints c=new GridBagConstraints();  c.insets=new Insets(2,10,2,10);  propertyPanel.setLayout(gridbag);  int i=0;  for (  String prop : sortedKeys) {    String marker=prop;    if (prefix != null && prop.startsWith(prefix)) {      marker=prop.substring(prefix.length() + 1);    }    if (marker.startsWith(".")) {      marker=marker.substring(1);    }    String editorMarker=marker + PropertyConsumer.ScopedEditorProperty;    String editorClass=info.getProperty(editorMarker);    if (editorClass == null) {      editorClass=defaultEditorClass;    }    Class<?> propertyEditorClass=null;    PropertyEditor editor=null;    try {      propertyEditorClass=Class.forName(editorClass);      editor=(PropertyEditor)propertyEditorClass.newInstance();      if (editor instanceof PropertyConsumer) {        ((PropertyConsumer)editor).setProperties(marker,info);      }      editors.put(prop,editor);    } catch (    Exception e) {      e.printStackTrace();      editorClass=null;    }    Component editorFace=null;    if (editor != null && editor.supportsCustomEditor()) {      editorFace=editor.getCustomEditor();    } else {      editorFace=new JLabel(i18n.get(Inspector.class,"Does_not_support_custom_editor","Does not support custom editor"));    }    if (editor != null) {      Object propVal=props.get(prop);      if (Debug.debugging("inspector")) {        Debug.output("Inspector loading " + prop + "("+ propVal+ ")");      }      editor.setValue(propVal);    }    String labelMarker=marker + PropertyConsumer.LabelEditorProperty;    String labelText=info.getProperty(labelMarker);    if (labelText == null) {      labelText=marker;    }    JLabel label=new JLabel(labelText + ":");    label.setHorizontalAlignment(SwingConstants.RIGHT);    c.gridx=0;    c.gridy=i++;    c.weightx=0;    c.fill=GridBagConstraints.NONE;    c.anchor=GridBagConstraints.EAST;    gridbag.setConstraints(label,c);    propertyPanel.add(label);    c.gridx=1;    c.anchor=GridBagConstraints.WEST;    c.fill=GridBagConstraints.HORIZONTAL;    c.weightx=1f;    gridbag.setConstraints(editorFace,c);    propertyPanel.add(editorFace);    String toolTip=(String)info.get(marker);    label.setToolTipText(toolTip == null ? i18n.get(Inspector.class,"No_further_information_available","No further information available.") : toolTip);  }  JScrollPane scrollPane=new JScrollPane(propertyPanel,ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED,ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);  scrollPane.setBorder(null);  scrollPane.setAlignmentY(Component.TOP_ALIGNMENT);  component.add(scrollPane,BorderLayout.CENTER);  return component;}  }
class C{  public void onScanImageClick(View v){  Intent intent=new Intent(this,ScanImageActivity.class);  intent.putExtra(ExtrasKeys.EXTRAS_LICENSE_KEY,LICENSE_KEY);  intent.putExtra(ExtrasKeys.EXTRAS_RECOGNITION_SETTINGS,mRecognitionSettings);  startActivityForResult(intent,MY_REQUEST_CODE);}  }
class C{  public boolean isReadOnly(){  Object oo=get_Value(COLUMNNAME_IsReadOnly);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static <K,V>Map<K,V> asSynchronized(Map<K,V> self){  return Collections.synchronizedMap(self);}  }
class C{  private boolean isRecursive(Nonterminal nonterm){  return comp.getNodes().contains(nonterm);}  }
class C{  private void initInfo(int record_id,String value){  if (!(record_id == 0) && value != null && value.length() > 0) {    log.severe("Received both a record_id and a value: " + record_id + " - "+ value);  }  if (!(record_id == 0)) {    fieldID=record_id;  } else {    if (value != null && value.length() > 0) {      fDocumentNo.setValue(value);    } else {      String id;      id=Env.getContext(Env.getCtx(),p_WindowNo,p_TabNo,"M_InOut_ID",true);      if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0)) {        fieldID=new Integer(id).intValue();      }      id=Env.getContext(Env.getCtx(),p_WindowNo,p_TabNo,"C_BPartner_ID",true);      if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0))       fBPartner_ID.setValue(new Integer(id));      id=Env.getContext(Env.getCtx(),p_WindowNo,p_TabNo,"M_Shipper_ID",true);      if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0)) {        fShipper_ID.setValue(new Integer(id).intValue());      }    }  }}  }
class C{  public IssueMatcher add(){  IssueMatcher issueMatcher=new IssueMatcher();  issueMatchers.add(issueMatcher);  return issueMatcher;}  }
class C{  protected ParameterizedPropertyAccessExpression_IMImpl(){  super();}  }
class C{  private void loadFinishScreen(){  CoordinatorLayout.LayoutParams lp=new CoordinatorLayout.LayoutParams(CoordinatorLayout.LayoutParams.WRAP_CONTENT,CoordinatorLayout.LayoutParams.WRAP_CONTENT);  mFloatingActionButton.setLayoutParams(lp);  mFloatingActionButton.setVisibility(View.INVISIBLE);  NestedScrollView contentLayout=(NestedScrollView)findViewById(R.id.challenge_rootcontainer);  if (contentLayout != null) {    contentLayout.removeAllViews();    View view=getLayoutInflater().inflate(R.layout.fragment_finish_challenge,contentLayout,false);    contentLayout.addView(view);  }}  }
class C{  private void compactSegment(Segment segment,OffsetPredicate predicate,Segment compactSegment){  for (long i=segment.firstIndex(); i <= segment.lastIndex(); i++) {    checkEntry(i,segment,predicate,compactSegment);  }}  }
class C{  public static Class<?> forName(String name,ClassLoader classLoader) throws ClassNotFoundException, LinkageError {  Assert.notNull(name,"Name must not be null");  Class<?> clazz=resolvePrimitiveClassName(name);  if (clazz == null) {    clazz=commonClassCache.get(name);  }  if (clazz != null) {    return clazz;  }  if (name.endsWith(ARRAY_SUFFIX)) {    String elementClassName=name.substring(0,name.length() - ARRAY_SUFFIX.length());    Class<?> elementClass=forName(elementClassName,classLoader);    return Array.newInstance(elementClass,0).getClass();  }  if (name.startsWith(NON_PRIMITIVE_ARRAY_PREFIX) && name.endsWith(";")) {    String elementName=name.substring(NON_PRIMITIVE_ARRAY_PREFIX.length(),name.length() - 1);    Class<?> elementClass=forName(elementName,classLoader);    return Array.newInstance(elementClass,0).getClass();  }  if (name.startsWith(INTERNAL_ARRAY_PREFIX)) {    String elementName=name.substring(INTERNAL_ARRAY_PREFIX.length());    Class<?> elementClass=forName(elementName,classLoader);    return Array.newInstance(elementClass,0).getClass();  }  ClassLoader classLoaderToUse=classLoader;  if (classLoaderToUse == null) {    classLoaderToUse=getDefaultClassLoader();  }  try {    return classLoaderToUse.loadClass(name);  } catch (  ClassNotFoundException ex) {    int lastDotIndex=name.lastIndexOf('.');    if (lastDotIndex != -1) {      String innerClassName=name.substring(0,lastDotIndex) + '$' + name.substring(lastDotIndex + 1);      try {        return classLoaderToUse.loadClass(innerClassName);      } catch (      ClassNotFoundException ex2) {      }    }    throw ex;  }}  }
class C{  public String toString(int indentFactor) throws JSONException {  return toString(indentFactor,0);}  }
class C{  @SuppressWarnings("MethodWithMultipleReturnPoints") public static boolean checkSu(){  if (!new File("/system/bin/su").exists() && !new File("/system/xbin/su").exists()) {    Log.e(TAG,"su binary does not exist!!!");    return false;  }  try {    if (runSuCommand("ls /data/app-private").success()) {      Log.i(TAG," SU exists and we have permission");      return true;    } else {      Log.i(TAG," SU exists but we don't have permission");      return false;    }  } catch (  NullPointerException e) {    Log.e(TAG,"NullPointer throw while looking for su binary",e);    return false;  }}  }
class C{  public String toString(int indentFactor) throws JSONException {  StringWriter sw=new StringWriter();synchronized (sw.getBuffer()) {    return this.write(sw,indentFactor,0).toString();  }}  }
class C{  public Boolean isHttpSupportInformation(){  return httpSupportInformation;}  }
class C{  public static URLConnection createConnectionToURL(final String url,final Map<String,String> requestHeaders) throws IOException {  final URL connectionURL=URLUtility.stringToUrl(url);  if (connectionURL == null) {    throw new IOException("Invalid url format: " + url);  }  final URLConnection urlConnection=connectionURL.openConnection();  urlConnection.setConnectTimeout(CONNECTION_TIMEOUT);  urlConnection.setReadTimeout(READ_TIMEOUT);  if (requestHeaders != null) {    for (    final Map.Entry<String,String> entry : requestHeaders.entrySet()) {      urlConnection.setRequestProperty(entry.getKey(),entry.getValue());    }  }  return urlConnection;}  }
class C{  public ASN1Primitive toASN1Primitive(){  try {    if (certificateType == profileType) {      return profileToASN1Object();    }    if (certificateType == requestType) {      return requestToASN1Object();    }  } catch (  IOException e) {    return null;  }  return null;}  }
class C{  public Builder mapper(final Mapper<ObjectMapper> mapper){  this.mapper=mapper;  return this;}  }
class C{  private int[][] div(int[] a,int[] f){  int df=computeDegree(f);  int da=computeDegree(a) + 1;  if (df == -1) {    throw new ArithmeticException("Division by zero.");  }  int[][] result=new int[2][];  result[0]=new int[1];  result[1]=new int[da];  int hc=headCoefficient(f);  hc=field.inverse(hc);  result[0][0]=0;  System.arraycopy(a,0,result[1],0,result[1].length);  while (df <= computeDegree(result[1])) {    int[] q;    int[] coeff=new int[1];    coeff[0]=field.mult(headCoefficient(result[1]),hc);    q=multWithElement(f,coeff[0]);    int n=computeDegree(result[1]) - df;    q=multWithMonomial(q,n);    coeff=multWithMonomial(coeff,n);    result[0]=add(coeff,result[0]);    result[1]=add(q,result[1]);  }  return result;}  }
class C{  public static short toShort(byte[] bytes,int start){  return toShort(bytes[start],bytes[start + 1]);}  }
class C{  public void addAttribute(AttributedCharacterIterator.Attribute attribute,Object value,int start,int end){  if (attribute == null) {    throw new NullPointerException("attribute == null");  }  if (start < 0 || end > text.length() || start >= end) {    throw new IllegalArgumentException();  }  if (value == null) {    return;  }  List<Range> ranges=attributeMap.get(attribute);  if (ranges == null) {    ranges=new ArrayList<Range>(1);    ranges.add(new Range(start,end,value));    attributeMap.put(attribute,ranges);    return;  }  ListIterator<Range> it=ranges.listIterator();  while (it.hasNext()) {    Range range=it.next();    if (end <= range.start) {      it.previous();      break;    } else     if (start < range.end || (start == range.end && value.equals(range.value))) {      Range r1=null, r3;      it.remove();      r1=new Range(range.start,start,range.value);      r3=new Range(end,range.end,range.value);      while (end > range.end && it.hasNext()) {        range=it.next();        if (end <= range.end) {          if (end > range.start || (end == range.start && value.equals(range.value))) {            it.remove();            r3=new Range(end,range.end,range.value);            break;          }        } else {          it.remove();        }      }      if (value.equals(r1.value)) {        if (value.equals(r3.value)) {          it.add(new Range(r1.start < start ? r1.start : start,r3.end > end ? r3.end : end,r1.value));        } else {          it.add(new Range(r1.start < start ? r1.start : start,end,r1.value));          if (r3.start < r3.end) {            it.add(r3);          }        }      } else {        if (value.equals(r3.value)) {          if (r1.start < r1.end) {            it.add(r1);          }          it.add(new Range(start,r3.end > end ? r3.end : end,r3.value));        } else {          if (r1.start < r1.end) {            it.add(r1);          }          it.add(new Range(start,end,value));          if (r3.start < r3.end) {            it.add(r3);          }        }      }      return;    }  }  it.add(new Range(start,end,value));}  }
class C{  @Override public Double hincrByFloat(final String key,final String field,final double value){  checkIsInMultiOrPipeline();  client.hincrByFloat(key,field,value);  final String dval=client.getBulkReply();  return (dval != null ? new Double(dval) : null);}  }
class C{  public DrawerBuilder withFooter(@NonNull View footerView){  this.mFooterView=footerView;  return this;}  }
class C{  @Override public int compareTo(final Object obj) throws ClassCastException {  final URI another=(URI)obj;  if (!equals(_authority,another.getRawAuthority())) {    return -1;  }  return toString().compareTo(another.toString());}  }
class C{  public boolean isNavigationAtBottom(){  return (mSmallestWidthDp >= 600 || mInPortrait);}  }
class C{  @Override public void execute(String filePath){  final CurrentProject currentProject=appContext.getCurrentProject();  if (filePath != null && !filePath.startsWith("/")) {    filePath="/".concat(filePath);  }  if (currentProject != null) {    String fullPath=currentProject.getRootProject().getPath() + filePath;    log.debug("Open file {0}",fullPath);    currentProject.getCurrentTree().getNodeByPath(fullPath,new TreeNodeAsyncCallback());  }}  }
class C{  public void executionDetailsEnd(final ConcurrentHashMap<Integer,TradeOrder> tradeOrders){  try {    Tradingday todayTradingday=m_tradingdays.getTradingday(TradingCalendar.getTradingDayStart(TradingCalendar.getDateTimeNowMarketTimeZone()),TradingCalendar.getTradingDayEnd(TradingCalendar.getDateTimeNowMarketTimeZone()));    if (null == todayTradingday) {      return;    }    tradingdayPanel.doRefresh(todayTradingday);    tradingdayPanel.doRefreshTradingdayTable(todayTradingday);  } catch (  Exception ex) {    this.setErrorMessage("Error starting PositionManagerRule.",ex.getMessage(),ex);  }}  }
class C{  public void successfullyCreated(){  if (notification != null) {    notification.setStatus(SUCCESS);    notification.setTitle(locale.createSnapshotSuccess());  }}  }
class C{  public HybridTimestampFactory(int counterBits){  if (counterBits < 0 || counterBits > 31) {    throw new IllegalArgumentException("counterBits must be in [0:31]");  }  lastTimestamp=0L;  this.counterBits=counterBits;  maxCounter=BigInteger.valueOf(2).pow(counterBits).intValue() - 1;  log.warn("#counterBits=" + counterBits + ", maxCounter="+ maxCounter);}  }
class C{  @Override public void clear(){  this._map.clear();}  }
class C{  public boolean removeElement(int s){  if (null == m_map)   return false;  for (int i=0; i < m_firstFree; i++) {    int node=m_map[i];    if (node == s) {      if (i > m_firstFree)       System.arraycopy(m_map,i + 1,m_map,i - 1,m_firstFree - i); else       m_map[i]=DTM.NULL;      m_firstFree--;      return true;    }  }  return false;}  }
class C{  private void addSingleton(TempCluster clus,DBIDRef id,double dist,boolean asCluster){  if (asCluster) {    clus.addChild(makeSingletonCluster(id,dist));  } else {    clus.add(id);  }  clus.depth=dist;}  }
class C{  public int size(){  return values.length;}  }
class C{  private void testServerJoinLate(Member.Type type,CopycatServer.State state) throws Throwable {  createServers(3);  CopycatClient client=createClient();  submit(client,0,1000);  await(30000);  CopycatServer joiner=createServer(nextMember(type));  joiner.onStateChange(null);  joiner.join(members.stream().map(null).collect(Collectors.toList())).thenRun(null);  await(30000,2);}  }
class C{  public Shape createRadioButton(int x,int y,int diameter){  return createEllipseInternal(x,y,diameter,diameter);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:11.638 -0500",hash_original_method="3CEC44303CC022BBEC9F119BC403FDBC",hash_generated_method="FD349EDA389F166F5AB5B32AD7B69928") public int size(){  return al.size();}  }
class C{  public static String formatRateString(float rate){  return String.format(java.util.Locale.US,"%.2fx",rate);}  }
class C{  private static BitmapFactory.Options decodeImageForOption(ContentResolver resolver,Uri uri) throws FileNotFoundException {  InputStream stream=null;  try {    stream=resolver.openInputStream(uri);    BitmapFactory.Options options=new BitmapFactory.Options();    options.inJustDecodeBounds=true;    BitmapFactory.decodeStream(stream,EMPTY_RECT,options);    options.inJustDecodeBounds=false;    return options;  }  finally {    closeSafe(stream);  }}  }
class C{  public FinalSQLString(BasicSQLString sqlstring){  this.delegate=sqlstring;}  }
class C{  public void loadArgArray(){  push(argumentTypes.length);  newArray(OBJECT_TYPE);  for (int i=0; i < argumentTypes.length; i++) {    dup();    push(i);    loadArg(i);    box(argumentTypes[i]);    arrayStore(OBJECT_TYPE);  }}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  WebUtil.createLoginPage(request,response,this,null,null);}  }
class C{  private DeferredFileOutputStream(int threshold,File outputFile,String prefix,String suffix,File directory){  super(threshold);  this.outputFile=outputFile;  memoryOutputStream=new ByteArrayOutputStream();  currentOutputStream=memoryOutputStream;  this.prefix=prefix;  this.suffix=suffix;  this.directory=directory;}  }
class C{  public final void testSetSystemScope(){  IdentityScope systemScope=IdentityScope.getSystemScope();  try {    is=new IdentityScopeStub("Aleksei Semenov");    IdentityScopeStub.mySetSystemScope(is);    assertSame(is,IdentityScope.getSystemScope());  }  finally {    IdentityScopeStub.mySetSystemScope(systemScope);  }}  }
class C{  public static void main(String[] args){  runEvaluator(new WrapperSubsetEval(),args);}  }
class C{  public static void v(String tag,String msg,Object... args){  if (sLevel > LEVEL_VERBOSE) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.v(tag,msg);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:04.267 -0500",hash_original_method="2CE5F24A4C571BEECB25C40400E44908",hash_generated_method="A3579B97578194B5EA0183D0F747142C") void computeNextElement(){  while (true) {    if (currentBits != 0) {      mask=currentBits & -currentBits;      return;    } else     if (++index < bits.length) {      currentBits=bits[index];    } else {      mask=0;      return;    }  }}  }
class C{  public HierarchyEvent(Component source,int id,Component changed,Container changedParent,long changeFlags){  super(source,id);  this.changed=changed;  this.changedParent=changedParent;  this.changeFlags=changeFlags;}  }
class C{  public void step(SimState state){}  }
class C{  public static void resetRuntime(){  currentTime=1392409281320L;  wasTimeAccessed=false;  hashKeys.clear();  restoreProperties();  needToRestoreProperties=false;}  }
class C{  public ExpandCaseMultipliersAction(DataEditor editor){  super("Expand Case Multipliers");  if (editor == null) {    throw new NullPointerException();  }  this.dataEditor=editor;}  }
class C{  public ScaleFake(){}  }
class C{  protected ArrayElementImpl(){  super();}  }
class C{  public FilterRowIterator(IntIterator rows,Table t,Predicate p){  this.predicate=p;  this.rows=rows;  this.t=t;  next=advance();}  }
class C{  private void scanJar(JarURLConnection conn,List<String> tldNames,boolean isLocal) throws JasperException {  String resourcePath=conn.getJarFileURL().toString();  TldInfo[] tldInfos=jarTldCacheLocal.get(resourcePath);  if (tldInfos != null && tldInfos.length == 0) {    try {      conn.getJarFile().close();    } catch (    IOException ex) {    }    return;  }  if (tldInfos == null) {    JarFile jarFile=null;    ArrayList<TldInfo> tldInfoA=new ArrayList<TldInfo>();    try {      jarFile=conn.getJarFile();      if (tldNames != null) {        for (        String tldName : tldNames) {          JarEntry entry=jarFile.getJarEntry(tldName);          InputStream stream=jarFile.getInputStream(entry);          tldInfoA.add(scanTld(resourcePath,tldName,stream));        }      } else {        Enumeration<JarEntry> entries=jarFile.entries();        while (entries.hasMoreElements()) {          JarEntry entry=entries.nextElement();          String name=entry.getName();          if (!name.startsWith("META-INF/"))           continue;          if (!name.endsWith(".tld"))           continue;          InputStream stream=jarFile.getInputStream(entry);          tldInfoA.add(scanTld(resourcePath,name,stream));        }      }    } catch (    IOException ex) {      if (resourcePath.startsWith(FILE_PROTOCOL) && !((new File(resourcePath)).exists())) {        if (log.isLoggable(Level.WARNING)) {          log.log(Level.WARNING,Localizer.getMessage("jsp.warn.nojar",resourcePath),ex);        }      } else {        throw new JasperException(Localizer.getMessage("jsp.error.jar.io",resourcePath),ex);      }    } finally {      if (jarFile != null) {        try {          jarFile.close();        } catch (        Throwable t) {        }      }    }    tldInfos=tldInfoA.toArray(new TldInfo[tldInfoA.size()]);    jarTldCacheLocal.put(resourcePath,tldInfos);    if (!isLocal) {      jarTldCache.put(resourcePath,tldInfos);    }  }  for (  TldInfo tldInfo : tldInfos) {    if (scanListeners) {      addListener(tldInfo,isLocal);    }    mapTldLocation(resourcePath,tldInfo,isLocal);  }}  }
class C{  public static void cosft1(double[] y){  com.nr.fft.FFT.cosft1(y);}  }
class C{  public void stop(){  mRunning=false;  mStop=true;}  }
class C{  public boolean hasNext(){  return cursor > 0;}  }
class C{  @Override protected void onFinished(final Player player,final boolean successful){  if (successful) {    final String itemName=items[Rand.rand(items.length)];    final Item item=SingletonRepository.getEntityManager().getItem(itemName);    int amount=1;    if (itemName.equals("dark dagger") || itemName.equals("horned golden helmet")) {      item.setBoundTo(player.getName());    } else     if (itemName.equals("money")) {      amount=Rand.roll1D100();      ((StackableItem)item).setQuantity(amount);    }    player.equipOrPutOnGround(item);    player.incObtainedForItem(item.getName(),item.getQuantity());    SingletonRepository.getAchievementNotifier().onObtain(player);    player.sendPrivateText("You were lucky and found " + Grammar.quantityplnoun(amount,itemName,"a") + ".");  } else {    player.sendPrivateText("Your wish didn't come true.");  }}  }
class C{  public void saveWalletAndWalletInfoSimple(WalletData perWalletModelData,String walletFilename,String walletInfoFilename){  File walletFile=new File(walletFilename);  WalletInfoData walletInfo=perWalletModelData.getWalletInfo();  FileOutputStream fileOutputStream=null;  try {    if (perWalletModelData.getWallet() != null) {      if (walletInfo != null) {        String walletDescriptionInInfoFile=walletInfo.getProperty(WalletInfoData.DESCRIPTION_PROPERTY);        if (walletDescriptionInInfoFile != null) {          perWalletModelData.getWallet().setDescription(walletDescriptionInInfoFile);        }      }      log.debug("Saving wallet file '" + walletFile.getAbsolutePath() + "' ...");      if (MultiBitWalletVersion.SERIALIZED == walletInfo.getWalletVersion()) {        throw new WalletSaveException("Cannot save wallet '" + walletFile.getAbsolutePath() + "'. Serialized wallets are no longer supported.");      } else {        boolean walletIsActuallyEncrypted=false;        Wallet wallet=perWalletModelData.getWallet();        for (        ECKey key : wallet.getKeychain()) {          if (key.isEncrypted()) {            walletIsActuallyEncrypted=true;            break;          }        }        if (walletIsActuallyEncrypted) {          walletInfo.setWalletVersion(MultiBitWalletVersion.PROTOBUF_ENCRYPTED);        }        if (MultiBitWalletVersion.PROTOBUF == walletInfo.getWalletVersion()) {          perWalletModelData.getWallet().saveToFile(walletFile);        } else         if (MultiBitWalletVersion.PROTOBUF_ENCRYPTED == walletInfo.getWalletVersion()) {          fileOutputStream=new FileOutputStream(walletFile);          walletProtobufSerializer.writeWallet(perWalletModelData.getWallet(),fileOutputStream);        } else {          throw new WalletVersionException("Cannot save wallet '" + perWalletModelData.getWalletFilename() + "'. Its wallet version is '"+ walletInfo.getWalletVersion().toString()+ "' but this version of MultiBit does not understand that format.");        }      }      log.debug("... done saving wallet file.");    }  } catch (  IOException ioe) {    throw new WalletSaveException("Cannot save wallet '" + perWalletModelData.getWalletFilename(),ioe);  } finally {    if (fileOutputStream != null) {      try {        fileOutputStream.flush();        fileOutputStream.close();      } catch (      IOException e) {        throw new WalletSaveException("Cannot save wallet '" + perWalletModelData.getWalletFilename(),e);      }    }  }  walletInfo.writeToFile(walletInfoFilename,walletInfo.getWalletVersion());}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  DefaultIntervalXYDataset clone=(DefaultIntervalXYDataset)super.clone();  clone.seriesKeys=new java.util.ArrayList(this.seriesKeys);  clone.seriesList=new ArrayList(this.seriesList.size());  for (int i=0; i < this.seriesList.size(); i++) {    double[][] data=(double[][])this.seriesList.get(i);    double[] x=data[0];    double[] xStart=data[1];    double[] xEnd=data[2];    double[] y=data[3];    double[] yStart=data[4];    double[] yEnd=data[5];    double[] xx=new double[x.length];    double[] xxStart=new double[xStart.length];    double[] xxEnd=new double[xEnd.length];    double[] yy=new double[y.length];    double[] yyStart=new double[yStart.length];    double[] yyEnd=new double[yEnd.length];    System.arraycopy(x,0,xx,0,x.length);    System.arraycopy(xStart,0,xxStart,0,xStart.length);    System.arraycopy(xEnd,0,xxEnd,0,xEnd.length);    System.arraycopy(y,0,yy,0,y.length);    System.arraycopy(yStart,0,yyStart,0,yStart.length);    System.arraycopy(yEnd,0,yyEnd,0,yEnd.length);    clone.seriesList.add(i,new double[][]{xx,xxStart,xxEnd,yy,yyStart,yyEnd});  }  return clone;}  }
class C{  public EveningActivityMovement(Settings settings){  super(settings);  super.backAllowed=false;  pathFinder=new DijkstraPathFinder(null);  mode=WALKING_TO_MEETING_SPOT_MODE;  nrOfMeetingSpots=settings.getInt(NR_OF_MEETING_SPOTS_SETTING);  minGroupSize=settings.getInt(MIN_GROUP_SIZE_SETTING);  maxGroupSize=settings.getInt(MAX_GROUP_SIZE_SETTING);  MapNode[] mapNodes=(MapNode[])getMap().getNodes().toArray(new MapNode[0]);  String shoppingSpotsFile=null;  try {    shoppingSpotsFile=settings.getSetting(MEETING_SPOTS_FILE_SETTING);  } catch (  Throwable t) {  }  List<Coord> meetingSpotLocations=null;  if (shoppingSpotsFile == null) {    meetingSpotLocations=new LinkedList<Coord>();    for (int i=0; i < mapNodes.length; i++) {      if ((i % (mapNodes.length / nrOfMeetingSpots)) == 0) {        startAtLocation=mapNodes[i].getLocation().clone();        meetingSpotLocations.add(startAtLocation.clone());      }    }  } else {    try {      meetingSpotLocations=new LinkedList<Coord>();      List<Coord> locationsRead=(new WKTReader()).readPoints(new File(shoppingSpotsFile));      for (      Coord coord : locationsRead) {        SimMap map=getMap();        Coord offset=map.getOffset();        if (map.isMirrored()) {          coord.setLocation(coord.getX(),-coord.getY());        }        coord.translate(offset.getX(),offset.getY());        meetingSpotLocations.add(coord);      }    } catch (    Exception e) {      e.printStackTrace();    }  }  this.id=nextID++;  int scsID=settings.getInt(EVENING_ACTIVITY_CONTROL_SYSTEM_NR_SETTING);  scs=EveningActivityControlSystem.getEveningActivityControlSystem(scsID);  scs.setRandomNumberGenerator(rng);  scs.addEveningActivityNode(this);  scs.setMeetingSpots(meetingSpotLocations);  maxPathLength=100;  minPathLength=10;  maxWaitTime=settings.getInt(MAX_WAIT_TIME_SETTING);  minWaitTime=settings.getInt(MIN_WAIT_TIME_SETTING);}  }
class C{  protected Polygon makeHullComplex(double[][] pc){  GrahamScanConvexHull2D hull=new GrahamScanConvexHull2D();  double[] diag=new double[]{0,0};  for (int j=0; j < pc.length; j++) {    hull.add(pc[j]);    hull.add(times(pc[j],-1));    for (int k=j + 1; k < pc.length; k++) {      double[] q=pc[k];      double[] ppq=timesEquals(plus(pc[j],q),MathUtil.SQRTHALF);      double[] pmq=timesEquals(minus(pc[j],q),MathUtil.SQRTHALF);      hull.add(ppq);      hull.add(times(ppq,-1));      hull.add(pmq);      hull.add(times(pmq,-1));      for (int l=k + 1; l < pc.length; l++) {        double[] r=pc[k];        double[] ppqpr=timesEquals(plus(ppq,r),Math.sqrt(1 / 3.));        double[] pmqpr=timesEquals(plus(pmq,r),Math.sqrt(1 / 3.));        double[] ppqmr=timesEquals(minus(ppq,r),Math.sqrt(1 / 3.));        double[] pmqmr=timesEquals(minus(pmq,r),Math.sqrt(1 / 3.));        hull.add(ppqpr);        hull.add(times(ppqpr,-1));        hull.add(pmqpr);        hull.add(times(pmqpr,-1));        hull.add(ppqmr);        hull.add(times(ppqmr,-1));        hull.add(pmqmr);        hull.add(times(pmqmr,-1));      }    }    plusEquals(diag,pc[j]);  }  timesEquals(diag,1.0 / Math.sqrt(pc.length));  hull.add(diag);  hull.add(times(diag,-1));  return hull.getHull();}  }
class C{  public void visitAnnotations(AnnotatedNode node){  super.visitAnnotations(node);  for (  AnnotationNode annotation : node.getAnnotations()) {    if (transforms.containsKey(annotation)) {      targetNodes.add(new ASTNode[]{annotation,node});    }  }}  }
class C{  Node(Node<K,V> next){  this.key=null;  this.value=this;  this.next=next;}  }
class C{  public void onDrawerClosed(View view){  super.onDrawerClosed(view);}  }
class C{  public static List<String> deserializeAddressList(String serializedAddresses){  return Arrays.asList(serializedAddresses.split(","));}  }
class C{  void challengeReceived(String challenge) throws IOException {  currentMechanism.challengeReceived(challenge);}  }
class C{  public boolean fitsType(Environment env,Context ctx,Type t){  if (this.type.isType(TC_CHAR)) {    return super.fitsType(env,ctx,t);  }switch (t.getTypeCode()) {case TC_BYTE:    return value == (byte)value;case TC_SHORT:  return value == (short)value;case TC_CHAR:return value == (char)value;}return super.fitsType(env,ctx,t);}  }
class C{  public ServiceManager(Iterable<? extends Service> services){  ImmutableList<Service> copy=ImmutableList.copyOf(services);  if (copy.isEmpty()) {    logger.log(Level.WARNING,"ServiceManager configured with no services.  Is your application configured properly?",new EmptyServiceManagerWarning());    copy=ImmutableList.<Service>of(new NoOpService());  }  this.state=new ServiceManagerState(copy);  this.services=copy;  WeakReference<ServiceManagerState> stateReference=new WeakReference<ServiceManagerState>(state);  for (  Service service : copy) {    service.addListener(new ServiceListener(service,stateReference),directExecutor());    checkArgument(service.state() == NEW,"Can only manage NEW services, %s",service);  }  this.state.markReady();}  }
class C{  public boolean hasModule(String moduleName){  return moduleStore.containsKey(moduleName) || moduleStore.containsValue(moduleName);}  }
class C{  private void removeUnusedTilesets(final Map map){  for (final Iterator<?> sets=map.getTileSets().iterator(); sets.hasNext(); ) {    final TileSet tileset=(TileSet)sets.next();    if (!isUsedTileset(map,tileset)) {      sets.remove();    }  }}  }
class C{  public vec3 transformPoint(vec3 v){  vec3 result=new vec3();  result.m[0]=this.m[0] * v.m[0] + this.m[4] * v.m[1] + this.m[8] * v.m[2] + this.m[12];  result.m[1]=this.m[1] * v.m[0] + this.m[5] * v.m[1] + this.m[9] * v.m[2] + this.m[13];  result.m[2]=this.m[2] * v.m[0] + this.m[6] * v.m[1] + this.m[10] * v.m[2] + this.m[14];  return result;}  }
class C{  static AttrSessionID createFromString(final String str){  return new AttrSessionID(str);}  }
class C{  Spinner(ListModel model,ListCellRenderer rendererInstance){  super(model);  ios7Mode=UIManager.getInstance().isThemeConstant("ios7SpinnerBool",false);  if (ios7Mode) {    super.setMinElementHeight(6);  }  SpinnerRenderer.iOS7Mode=ios7Mode;  setRenderer(rendererInstance);  setUIID("Spinner");  setFixedSelection(FIXED_CENTER);  setOrientation(VERTICAL);  setInputOnFocus(false);  setIsScrollVisible(false);  initSpinnerRenderer();  quickType.setReplaceMenu(false);  quickType.setInputModeOrder(new String[]{"123"});  quickType.setFocus(true);  quickType.setRTL(false);  quickType.setAlignment(LEFT);  quickType.setConstraint(TextField.NUMERIC);  setIgnoreFocusComponentWhenUnfocused(true);  setRenderingPrototype(model.getItemAt(model.getSize() - 1));  if (getRenderer() instanceof DateTimeRenderer) {    quickType.setColumns(2);  }}  }
class C{  @SuppressWarnings("resource") @Override public void start(){  paused=false;  log.info("Starting text-only user interface...");  log.info("Local address: " + system.getLocalAddress());  log.info("Press Ctrl + C to exit");  new Thread(null).start();}  }
class C{  public static byte[] encodeBase64(byte[] binaryData){  return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData);}  }
class C{  public int previousNode(){  if (!m_cacheNodes)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_CANNOT_ITERATE,null));  if ((m_next - 1) > 0) {    m_next--;    return this.elementAt(m_next);  } else   return DTM.NULL;}  }
class C{  public synchronized void decrease(Bitmap bitmap){  final int bitmapSize=BitmapUtil.getSizeInBytes(bitmap);  Preconditions.checkArgument(mCount > 0,"No bitmaps registered.");  Preconditions.checkArgument(bitmapSize <= mSize,"Bitmap size bigger than the total registered size: %d, %d",bitmapSize,mSize);  mSize-=bitmapSize;  mCount--;}  }
class C{  public void addExcludedName(String name){  Object obj=lookupQualifiedName(scope,name);  if (!(obj instanceof Scriptable)) {    throw new IllegalArgumentException("Object for excluded name " + name + " not found.");  }  table.put(obj,name);}  }
class C{  public void normalizeExcitatoryFanIn(){  double sum=0;  double str=0;  for (int i=0, n=fanIn.size(); i < n; i++) {    str=fanIn.get(i).getStrength();    if (str > 0) {      sum+=str;    }  }  Synapse s=null;  for (int i=0, n=fanIn.size(); i < n; i++) {    s=fanIn.get(i);    str=s.getStrength();    if (str > 0) {      s.setStrength(s.getStrength() / sum);    }  }}  }
class C{  @MethodDesc(description="Configure properties by either rereading them or setting all properties from outside.",usage="configure <properties>") public void configure(@ParamDesc(name="tp",description="Optional properties to replace replicator.properties") TungstenProperties tp) throws Exception {  handleEventSynchronous(new ConfigureEvent(tp));}  }
class C{  public boolean isArrayIndex(){  return true;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return NetworkClient.getConnectedClients();}  }
class C{  public Debug(String filename){  this(filename,1000000,1);}  }
class C{  private String createKeywordDisplayName(TaxonKeyword keyword){  String combined=null;  if (keyword != null) {    String scientificName=StringUtils.trimToNull(keyword.getScientificName());    String commonName=StringUtils.trimToNull(keyword.getCommonName());    if (scientificName != null && commonName != null) {      combined=scientificName + " (" + commonName+ ")";    } else     if (scientificName != null) {      combined=scientificName;    } else     if (commonName != null) {      combined=commonName;    }  }  return combined;}  }
class C{  public static void w(String tag,String msg){  w(tag,msg,null);}  }
class C{  public BehaviorEvent(FacesContext facesContext,UIComponent component,Behavior behavior){  super(facesContext,component);  if (null == behavior) {    throw new IllegalArgumentException("Behavior agrument cannot be null");  }  this.behavior=behavior;}  }
class C{  public static Number intdiv(Number left,Character right){  return intdiv(left,Integer.valueOf(right));}  }
class C{  public SQLDataException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  public boolean increment(float key){  return adjustValue(key,1);}  }
class C{  public boolean finish(){  if (!started)   return false;  boolean ok=true;  started=false;  try {    out.write(0x3b);    out.flush();    if (closeStream) {      out.close();    }  } catch (  IOException e) {    ok=false;  }  transIndex=0;  out=null;  image=null;  pixels=null;  indexedPixels=null;  colorTab=null;  closeStream=false;  firstFrame=true;  return ok;}  }
class C{  public void initializeDefinition(String tableName,boolean isUnique){  m_table=tableName;  m_isUnique=isUnique;  s_logger.log(Level.FINEST,toString());}  }
class C{  private static String concatHeirTokens(SyntaxTreeNode stn){  SyntaxTreeNode[] heirs=stn.getHeirs();  if (heirs.length == 0) {    if (stn.getKind() < SyntaxTreeConstants.NULL_ID) {      return stn.getImage();    } else {      return "";    }  }  String val="";  for (int i=0; i < heirs.length; i++) {    val=val + concatHeirTokens(heirs[i]);  }  return val;}  }
class C{  public Object jjtAccept(ParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  public static Bitmap createImageThumbnail(String filePath,int kind){  boolean wantMini=(kind == Images.Thumbnails.MINI_KIND);  int targetSize=wantMini ? TARGET_SIZE_MINI_THUMBNAIL : TARGET_SIZE_MICRO_THUMBNAIL;  int maxPixels=wantMini ? MAX_NUM_PIXELS_THUMBNAIL : MAX_NUM_PIXELS_MICRO_THUMBNAIL;  SizedThumbnailBitmap sizedThumbnailBitmap=new SizedThumbnailBitmap();  Bitmap bitmap=null;  MediaFileType fileType=MediaFile.getFileType(filePath);  if (fileType != null && fileType.fileType == MediaFile.FILE_TYPE_JPEG) {    createThumbnailFromEXIF(filePath,targetSize,maxPixels,sizedThumbnailBitmap);    bitmap=sizedThumbnailBitmap.mBitmap;  }  if (bitmap == null) {    FileInputStream stream=null;    try {      stream=new FileInputStream(filePath);      FileDescriptor fd=stream.getFD();      BitmapFactory.Options options=new BitmapFactory.Options();      options.inSampleSize=1;      options.inJustDecodeBounds=true;      BitmapFactory.decodeFileDescriptor(fd,null,options);      if (options.mCancel || options.outWidth == -1 || options.outHeight == -1) {        return null;      }      options.inSampleSize=computeSampleSize(options,targetSize,maxPixels);      options.inJustDecodeBounds=false;      options.inDither=false;      options.inPreferredConfig=Bitmap.Config.ARGB_8888;      bitmap=BitmapFactory.decodeFileDescriptor(fd,null,options);    } catch (    IOException ex) {      Log.e(TAG,"",ex);    }catch (    OutOfMemoryError oom) {      Log.e(TAG,"Unable to decode file " + filePath + ". OutOfMemoryError.",oom);    } finally {      try {        if (stream != null) {          stream.close();        }      } catch (      IOException ex) {        Log.e(TAG,"",ex);      }    }  }  if (kind == Images.Thumbnails.MICRO_KIND) {    bitmap=extractThumbnail(bitmap,TARGET_SIZE_MICRO_THUMBNAIL,TARGET_SIZE_MICRO_THUMBNAIL,OPTIONS_RECYCLE_INPUT);  }  return bitmap;}  }
class C{  public static <T extends Annotation>T checkAnnotationPresent(AnnotatedElement annotatedType,Class<T> annotationClass){  return getAnnotation(annotatedType,annotationClass);}  }
class C{  public Element store(Object o){  PortalIcon p=(PortalIcon)o;  if (!p.isActive()) {    return null;  }  Element element=new Element("PortalIcon");  storeCommonAttributes(p,element);  element.setAttribute("scale",String.valueOf(p.getScale()));  element.setAttribute("rotate",String.valueOf(p.getDegrees()));  Portal portal=p.getPortal();  if (portal == null) {    log.info("PortalIcon has no associated Portal.");    return null;  }  element.setAttribute("portalName",portal.getName());  if (portal.getToBlock() != null) {    element.setAttribute("toBlockName",portal.getToBlockName());  }  if (portal.getFromBlockName() != null) {    element.setAttribute("fromBlockName",portal.getFromBlockName());  }  element.setAttribute("arrowSwitch","" + (p.getArrowSwitch() ? "yes" : "no"));  element.setAttribute("arrowHide","" + (p.getArrowHide() ? "yes" : "no"));  element.setAttribute("class","jmri.jmrit.display.controlPanelEditor.configurexml.PortalIconXml");  return element;}  }
class C{  public Address __rxor__(final Object rhs){  return new Address(m_value.xor(getBigInteger(rhs)));}  }
class C{  public SimpleUser(String username,Collection<String> userIdentifiers,Collection<String> connectionIdentifiers,Collection<String> connectionGroupIdentifiers){  this(username);  addReadPermissions(userPermissions,userIdentifiers);  addReadPermissions(connectionPermissions,connectionIdentifiers);  addReadPermissions(connectionGroupPermissions,connectionGroupIdentifiers);}  }
class C{  public void startDocument() throws org.xml.sax.SAXException {}  }
class C{  protected AbstractIntSpliterator(long est,int additionalCharacteristics){  this.est=est;  this.characteristics=((additionalCharacteristics & Spliterator.SIZED) != 0) ? additionalCharacteristics | Spliterator.SUBSIZED : additionalCharacteristics;}  }
class C{  private Set<DefUseCoverageTestFitness> preAnalyzeMethods(){  Set<DefUseCoverageTestFitness> r=new HashSet<DefUseCoverageTestFitness>();  LinkedList<ClassCallNode> toAnalyze=new LinkedList<ClassCallNode>();  toAnalyze.addAll(getInitialPreAnalyzeableMethods());  while (!toAnalyze.isEmpty()) {    ClassCallNode currentMethod=toAnalyze.poll();    CCFGMethodEntryNode analyzeableEntry=ccfg.getMethodEntryNodeForClassCallNode(currentMethod);    if (analyzedMethods.contains(analyzeableEntry))     continue;    r.addAll(determineIntraInterMethodPairs(analyzeableEntry));    Set<ClassCallNode> parents=ccfg.getCcg().getParents(currentMethod);    for (    ClassCallNode parent : parents) {      if (toAnalyze.contains(parent))       continue;      if (analyzedMethods.contains(ccfg.getMethodEntryNodeForClassCallNode(parent)))       continue;      Set<ClassCallNode> parentsChildren=ccfg.getCcg().getChildren(parent);      boolean canAnalyzeNow=true;      for (      ClassCallNode parentsChild : parentsChildren) {        if (parentsChild == null)         continue;        if (!parentsChild.equals(parent) && !(toAnalyze.contains(parentsChild) || analyzedMethods.contains(ccfg.getMethodEntryNodeForClassCallNode(parentsChild)))) {          canAnalyzeNow=false;          break;        }      }      if (canAnalyzeNow) {        toAnalyze.offer(parent);      }    }  }  return r;}  }
class C{  public SimpleProjectDescription createSimpleProjectDescription(){  SimpleProjectDescriptionImpl simpleProjectDescription=new SimpleProjectDescriptionImpl();  return simpleProjectDescription;}  }
class C{  public void writeAll(){  for (int row=0; row < _numRows; row++) {    writeState[row]=WRITE;  }  issueNextOperation();}  }
class C{  public String str(){  return (m_obj != null) ? m_obj.toString() : "";}  }
class C{  public int checkThreadIDAllow0(int uid){  if (uid == 0) {    uid=currentThread.uid;  }  if (!threadMap.containsKey(uid)) {    log.warn(String.format("checkThreadID not found thread 0x%08X",uid));    throw new SceKernelErrorException(ERROR_KERNEL_NOT_FOUND_THREAD);  }  if (!SceUidManager.checkUidPurpose(uid,"ThreadMan-thread",true)) {    throw new SceKernelErrorException(ERROR_KERNEL_NOT_FOUND_THREAD);  }  return uid;}  }
class C{  public boolean isPowerOfThreeB(int n){  return n > 0 && maxPow3 % n == 0;}  }
class C{  protected void addDefinitionRef(Element defRef){  String ref=defRef.getAttributeNS(null,XBL_REF_ATTRIBUTE);  Element e=ctx.getReferencedElement(defRef,ref);  if (!XBL_NAMESPACE_URI.equals(e.getNamespaceURI()) || !XBL_DEFINITION_TAG.equals(e.getLocalName())) {    throw new BridgeException(ctx,defRef,ErrorConstants.ERR_URI_BAD_TARGET,new Object[]{ref});  }  ImportRecord ir=new ImportRecord(defRef,e);  imports.put(defRef,ir);  NodeEventTarget et=(NodeEventTarget)defRef;  et.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMAttrModified",refAttrListener,false,null);  XBLOMDefinitionElement d=(XBLOMDefinitionElement)defRef;  String ns=d.getElementNamespaceURI();  String ln=d.getElementLocalName();  addDefinition(ns,ln,(XBLOMDefinitionElement)e,defRef);}  }
class C{  public ActiveMQRATopicSubscriber(final TopicSubscriber consumer,final ActiveMQRASession session){  super(consumer,session);  if (ActiveMQRATopicSubscriber.trace) {    ActiveMQRALogger.LOGGER.trace("constructor(" + consumer + ", "+ session+ ")");  }}  }
class C{  private void fieldInsn(final int opcode,final Type ownerType,final String name,final Type fieldType){  mv.visitFieldInsn(opcode,ownerType.getInternalName(),name,fieldType.getDescriptor());}  }
class C{  @Override public void doFrame(long frameTimeNanos){  if (isPaused.get()) {    return;  }  long frameTimeMillis=frameTimeNanos / 1000000;  WritableArray timersToCall=null;synchronized (mTimerGuard) {    while (!mTimers.isEmpty() && mTimers.peek().mTargetTime < frameTimeMillis) {      Timer timer=mTimers.poll();      if (timersToCall == null) {        timersToCall=Arguments.createArray();      }      timersToCall.pushInt(timer.mCallbackID);      if (timer.mRepeat) {        timer.mTargetTime=frameTimeMillis + timer.mInterval;        mTimers.add(timer);      } else {        mTimerIdsToTimers.remove(timer.mCallbackID);      }    }  }  if (timersToCall != null) {    Assertions.assertNotNull(mJSTimersModule).callTimers(timersToCall);  }  Assertions.assertNotNull(mReactChoreographer).postFrameCallback(ReactChoreographer.CallbackType.TIMERS_EVENTS,this);}  }
class C{  protected void executeLogoutCommand(){  shoppingCartCommandFactory.execute(ShoppingCartCommand.CMD_LOGIN,cartMixin.getCurrentCart(),new HashMap<String,Object>(){{      put(ShoppingCartCommand.CMD_LOGOUT,ShoppingCartCommand.CMD_LOGOUT);    }  });}  }
class C{  public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (obj instanceof CharSet == false) {    return false;  }  CharSet other=(CharSet)obj;  return set.equals(other.set);}  }
class C{  private PlatformUtils(){}  }
class C{  @Override @TransactionAttribute(TransactionAttributeType.NOT_SUPPORTED) public InstanceStatus deleteInstance(String instanceId,ProvisioningSettings settings) throws APPlatformException {  PropertyHandler paramHandler=new PropertyHandler(settings);  paramHandler.setState(Status.DELETION_REQUESTED);  InstanceStatus result=new InstanceStatus();  result.setChangedParameters(settings.getParameters());  return result;}  }
class C{  public boolean isOnline(){  Object oo=get_Value(COLUMNNAME_IsOnline);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public EditSensorsAction(final VisionWorld visionWorld){  super("Edit selected sensor(s)...");  if (visionWorld == null) {    throw new IllegalArgumentException("visionWorld must not be null");  }  this.visionWorld=visionWorld;  this.visionWorld.getSensorSelectionModel().addSensorSelectionListener(new SelectionListener());}  }
class C{  @Override public final V replace(K key,V value){  long hash, allocIndex;  Segment<K,V> segment;  V oldValue;  if ((allocIndex=(segment=segment(segmentIndex(hash=keyHashCode(key)))).find(this,hash,key)) > 0) {    oldValue=segment.readValue(allocIndex);    segment.writeValue(allocIndex,value);    return oldValue;  }  return null;}  }
class C{  public UserResource user(){  return user;}  }
class C{  private boolean isExportable(Step step){  return Exporter.class.getResource(String.format("/edu/wpi/grip/ui/codegeneration/%s/operations/%s.vm",lang.filePath,step.getOperationDescription().name().replace(' ','_'))) != null;}  }
class C{  public static List<Long> view(long[] array,int length){  return new LongList(array,length);}  }
class C{  final public MutableString insert(final int index,final Object o){  return insert(index,String.valueOf(o));}  }
class C{  public boolean checkAttributeValuesChanged(BlockVirtualPoolUpdateParam param,VirtualPool vpool){  return super.checkAttributeValuesChanged(param,vpool) || checkPathParameterModified(vpool.getNumPaths(),param.getMaxPaths()) || checkPathParameterModified(vpool.getMinPaths(),param.getMinPaths())|| checkPathParameterModified(vpool.getPathsPerInitiator(),param.getPathsPerInitiator())|| checkPathParameterModified(vpool.getHostIOLimitBandwidth(),param.getHostIOLimitBandwidth())|| checkPathParameterModified(vpool.getHostIOLimitIOPs(),param.getHostIOLimitIOPs())|| VirtualPoolUtil.checkRaidLevelsChanged(vpool.getArrayInfo(),param.getRaidLevelChanges())|| VirtualPoolUtil.checkForVirtualPoolAttributeModification(vpool.getDriveType(),param.getDriveType())|| VirtualPoolUtil.checkThinVolumePreAllocationChanged(vpool.getThinVolumePreAllocationPercentage(),param.getThinVolumePreAllocationPercentage())|| VirtualPoolUtil.checkProtectionChanged(vpool,param.getProtection())|| VirtualPoolUtil.checkHighAvailabilityChanged(vpool,param.getHighAvailability());}  }
class C{  @Override public Boolean visitIntersection_Intersection(final AnnotatedIntersectionType type1,final AnnotatedIntersectionType type2,final VisitHistory visited){  if (!arePrimeAnnosEqual(type1,type2)) {    return false;  }  visited.add(type1,type2);  return areAllEqual(type1.directSuperTypes(),type2.directSuperTypes(),visited);}  }
class C{  public void writeEnum(final int fieldNumber,final int value) throws IOException {  writeTag(fieldNumber,WireFormat.WIRETYPE_VARINT);  writeEnumNoTag(value);}  }
class C{  @Override protected char[] escape(int cp){  if (cp < safeOctets.length && safeOctets[cp]) {    return null;  } else   if (cp == ' ' && plusForSpace) {    return PLUS_SIGN;  } else   if (cp <= 0x7F) {    char[] dest=new char[3];    dest[0]='%';    dest[2]=UPPER_HEX_DIGITS[cp & 0xF];    dest[1]=UPPER_HEX_DIGITS[cp >>> 4];    return dest;  } else   if (cp <= 0x7ff) {    char[] dest=new char[6];    dest[0]='%';    dest[3]='%';    dest[5]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[4]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];    cp>>>=2;    dest[2]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[1]=UPPER_HEX_DIGITS[0xC | cp];    return dest;  } else   if (cp <= 0xffff) {    char[] dest=new char[9];    dest[0]='%';    dest[1]='E';    dest[3]='%';    dest[6]='%';    dest[8]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[7]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];    cp>>>=2;    dest[5]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[4]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];    cp>>>=2;    dest[2]=UPPER_HEX_DIGITS[cp];    return dest;  } else   if (cp <= 0x10ffff) {    char[] dest=new char[12];    dest[0]='%';    dest[1]='F';    dest[3]='%';    dest[6]='%';    dest[9]='%';    dest[11]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[10]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];    cp>>>=2;    dest[8]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[7]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];    cp>>>=2;    dest[5]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[4]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];    cp>>>=2;    dest[2]=UPPER_HEX_DIGITS[cp & 0x7];    return dest;  } else {    throw new IllegalArgumentException("Invalid unicode character value " + cp);  }}  }
class C{  public X509CRLImpl(InputStream inStrm) throws CRLException {  try {    parse(new DerValue(inStrm));  } catch (  IOException e) {    signedCRL=null;    throw new CRLException("Parsing error: " + e.getMessage());  }}  }
class C{  protected boolean removeTurntable(LayoutTurntable o){  if (!noWarnTurntable) {    int selectedValue=JOptionPane.showOptionDialog(this,rb.getString("Question4r"),Bundle.getMessage("WarningTitle"),JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,new Object[]{Bundle.getMessage("ButtonYes"),Bundle.getMessage("ButtonNo"),rb.getString("ButtonYesPlus")},Bundle.getMessage("ButtonNo"));    if (selectedValue == 1) {      return (false);    }    if (selectedValue == 2) {      noWarnTurntable=true;    }  }  if (selectedObject == o) {    selectedObject=null;  }  if (prevSelectedObject == o) {    prevSelectedObject=null;  }  for (int j=0; j < o.getNumberRays(); j++) {    TrackSegment t=o.getRayConnectOrdered(j);    if (t != null) {      substituteAnchor(o.getRayCoordsIndexed(j),o,t);    }  }  for (int i=0; i < turntableList.size(); i++) {    LayoutTurntable lx=turntableList.get(i);    if (lx == o) {      turntableList.remove(i);      o.remove();      setDirty(true);      repaint();      return (true);    }  }  return (false);}  }
class C{  protected void emptyTag(Element elem) throws BadLocationException, IOException {  if (!inContent && !inPre) {    indentSmart();  }  AttributeSet attr=elem.getAttributes();  closeOutUnwantedEmbeddedTags(attr);  writeEmbeddedTags(attr);  if (matchNameAttribute(attr,HTML.Tag.CONTENT)) {    inContent=true;    text(elem);  } else   if (matchNameAttribute(attr,HTML.Tag.COMMENT)) {    comment(elem);  } else {    boolean isBlock=isBlockTag(elem.getAttributes());    if (inContent && isBlock) {      writeLineSeparator();      indentSmart();    }    Object nameTag=(attr != null) ? attr.getAttribute(StyleConstants.NameAttribute) : null;    Object endTag=(attr != null) ? attr.getAttribute(HTML.Attribute.ENDTAG) : null;    boolean outputEndTag=false;    if (nameTag != null && endTag != null && (endTag instanceof String) && endTag.equals("true")) {      outputEndTag=true;    }    if (completeDoc && matchNameAttribute(attr,HTML.Tag.HEAD)) {      if (outputEndTag) {        writeStyles(((HTMLDocument)getDocument()).getStyleSheet());      }      wroteHead=true;    }    write('<');    if (outputEndTag) {      write('/');    }    write(elem.getName());    writeAttributes(attr);    write('>');    if (matchNameAttribute(attr,HTML.Tag.TITLE) && !outputEndTag) {      Document doc=elem.getDocument();      String title=(String)doc.getProperty(Document.TitleProperty);      write(title);    } else     if (!inContent || isBlock) {      writeLineSeparator();      if (isBlock && inContent) {        indentSmart();      }    }  }}  }
class C{  public boolean isPending(){  return getConfidence().getConfidenceType() == TransactionConfidence.ConfidenceType.PENDING;}  }
class C{  public final void fireSensorMatrixChanged(final SensorMatrix oldSensorMatrix,final SensorMatrix sensorMatrix){  if (oldSensorMatrix == null) {    throw new IllegalArgumentException("oldSensorMatrix must not be null");  }  if (sensorMatrix == null) {    throw new IllegalArgumentException("sensorMatrix must not be null");  }  Object[] listeners=listenerList.getListenerList();  VisionWorldModelEvent event=null;  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == VisionWorldModelListener.class) {      if (event == null) {        event=new VisionWorldModelEvent(source,oldSensorMatrix,sensorMatrix);      }      ((VisionWorldModelListener)listeners[i + 1]).sensorMatrixChanged(event);    }  }}  }
class C{  public DNameConstraints(JDialog parent){  super(parent);  setTitle(res.getString("DNameConstraints.Title"));  initComponents();}  }
class C{  @Override public void visit(NodeVisitor v){  v.visit(this);}  }
class C{  @Override public void LDC(int x){  env.topFrame().operandStack.pushBv32(ExpressionFactory.buildNewIntegerConstant(x));}  }
class C{  @SuppressWarnings("unused") private SentenceFilteredTrie filter_regexp(Trie unfilteredTrie){  SentenceFilteredTrie trie=null;  if (unfilteredTrie.hasRules())   if (matchesSentence(unfilteredTrie))   trie=new SentenceFilteredTrie(unfilteredTrie); else   return null;  if (unfilteredTrie.hasExtensions())   for (  Entry<Integer,? extends Trie> arc : unfilteredTrie.getChildren().entrySet()) {    Trie unfilteredChildTrie=arc.getValue();    SentenceFilteredTrie nextTrie=filter_regexp(unfilteredChildTrie);    if (nextTrie != null) {      if (trie == null)       trie=new SentenceFilteredTrie(unfilteredTrie);      trie.children.put(arc.getKey(),nextTrie);    }  }  return trie;}  }
class C{  protected void engineUpdate(byte input){  if (first == true) {    md.update(k_ipad);    first=false;  }  md.update(input);}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildAdosGreetingSoldier(zone);}  }
class C{  public static KerberosTime parse(DerInputStream data,byte explicitTag,boolean optional) throws Asn1Exception, IOException {  if ((optional) && (((byte)data.peekByte() & (byte)0x1F) != explicitTag))   return null;  DerValue der=data.getDerValue();  if (explicitTag != (der.getTag() & (byte)0x1F)) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  } else {    DerValue subDer=der.getData().getDerValue();    Date temp=subDer.getGeneralizedTime();    return new KerberosTime(temp.getTime(),0);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:38.770 -0500",hash_original_method="C464D16A28A9DCABA3B0B8FD02F52155",hash_generated_method="0A183B7841054C14E915336FD1A0DC9E") public static boolean hasExtension(String extension){  if (extension == null || extension.isEmpty()) {    return false;  }  return extensionToMimeTypeMap.containsKey(extension);}  }
class C{  public void testExhaustContentSource() throws Exception {  String algLines[]={"# ----- properties ","content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource","content.source.log.step=1","doc.term.vector=false","content.source.forever=false","directory=RAMDirectory","doc.stored=false","doc.tokenized=false","# ----- alg ","CreateIndex","{ AddDoc } : * ","ForceMerge(1)","CloseIndex","OpenReader","{ CountingSearchTest } : 100","CloseReader","[ CountingSearchTest > : 30","[ CountingSearchTest > : 9"};  CountingSearchTestTask.numSearches=0;  Benchmark benchmark=execBenchmark(algLines);  assertEquals("TestSearchTask was supposed to be called!",139,CountingSearchTestTask.numSearches);  assertTrue("Index does not exist?...!",DirectoryReader.indexExists(benchmark.getRunData().getDirectory()));  IndexWriter iw=new IndexWriter(benchmark.getRunData().getDirectory(),new IndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));  iw.close();  IndexReader ir=DirectoryReader.open(benchmark.getRunData().getDirectory());  assertEquals("1 docs were added to the index, this is what we expect to find!",1,ir.numDocs());  ir.close();}  }
class C{  @DSSource({DSSourceKind.NETWORK}) @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:10.723 -0500",hash_original_method="8EB7107FA2367D701AF7CBC234A81F19",hash_generated_method="B23ED7B4CA5FBA5E6343C71EA6EDB1E4") public String toString(){  StringBuffer header=new StringBuffer();  header.append("From: ");  header.append(__from);  header.append("\nNewsgroups: ");  header.append(__newsgroups.toString());  header.append("\nSubject: ");  header.append(__subject);  header.append('\n');  if (__headerFields.length() > 0)   header.append(__headerFields.toString());  header.append('\n');  return header.toString();}  }
class C{  private void sincronizarBase(){  listaOrganizacao=ControleDAO.getBanco().getOrganizacaoDAO().listar();}  }
class C{  protected int newlines(char[] text){  int result=0;  for (int i=0; i < text.length; i++) {    if (text[i] == 10) {      result++;    }  }  return result;}  }
class C{  protected BinaryBitmap toBitmap(LuminanceSource source){  return new BinaryBitmap(new HybridBinarizer(source));}  }
class C{  protected void handleMergeException(Directory dir,Throwable exc){  throw new MergePolicy.MergeException(exc,dir);}  }
class C{  public FactoryDto merge(FactoryDto factory,ProjectConfigDto computedProjectConfig){  final List<ProjectConfigDto> projects=factory.getWorkspace().getProjects();  if (projects == null || projects.isEmpty()) {    factory.getWorkspace().setProjects(singletonList(computedProjectConfig));    return factory;  }  if (projects.size() == 1) {    ProjectConfigDto projectConfig=projects.get(0);    if (projectConfig.getSource() == null)     projectConfig.setSource(computedProjectConfig.getSource());  }  return factory;}  }
class C{  public StatusLine parseSIPStatusLine(String statusLine) throws ParseException {  statusLine+="\n";  return new StatusLineParser(statusLine).parse();}  }
class C{  public void initQuitAction(QuitAction quitAction){  if (quitAction == null)   throw new IllegalArgumentException("quitAction is null");  if (this.quitAction != null)   throw new IllegalArgumentException("The method is once-call.");  this.quitAction=quitAction;}  }
class C{  public static boolean isFileStoragePool(StoragePool storagePool,DbClient dbClient){  URI storageSystemUri=storagePool.getStorageDevice();  StorageSystem storageSystem=dbClient.queryObject(StorageSystem.class,storageSystemUri);  ArgValidator.checkEntity(storageSystem,storageSystemUri,false);  StorageSystem.Type storageSystemType=StorageSystem.Type.valueOf(storageSystem.getSystemType());  return (storageSystemType.equals(StorageSystem.Type.isilon) || storageSystemType.equals(StorageSystem.Type.vnxfile));}  }
class C{  public static Object invokeStatic(String clazz,String methodName,Class[] types,Object[] values,Object defaultValue){  try {    return invokeStatic(Class.forName(clazz),methodName,types,values);  } catch (  ClassNotFoundException e) {    return defaultValue;  }catch (  NoSuchMethodException e) {    return defaultValue;  }}  }
class C{  String internalsprintf(double s) throws IllegalArgumentException {  String s2="";switch (conversionCharacter) {case 'f':    s2=printFFormat(s);  break;case 'E':case 'e':s2=printEFormat(s);break;case 'G':case 'g':s2=printGFormat(s);break;default :throw new IllegalArgumentException("Cannot " + "format a double with a format using a " + conversionCharacter + " conversion character.");}return s2;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4mfPackage.MODULE_FILTER__MODULE_SPECIFIERS:    return ((InternalEList<?>)getModuleSpecifiers()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public boolean hasUiObjectExpression(){  return !StringUtils.isEmpty(getUiObjectExpression);}  }
class C{  public void restore(){  try {    if (inCurrentStorage)     currentStorage.insertElementSafe(element); else     currentStorage.removeElement(element);    if (inApiStorage)     apiStorage.insertElementSafe(element); else     apiStorage.removeElement(element);  } catch (  StorageException e) {    e.printStackTrace();  }  element.osmId=osmId;  element.osmVersion=osmVersion;  element.state=state;  element.setTags(tags);  if (parentRelations != null) {    element.parentRelations=new ArrayList<Relation>();    element.parentRelations.addAll(parentRelations);  } else {    element.parentRelations=null;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:00.382 -0500",hash_original_method="A7CC818E7F384DAEC54D76069E9C5019",hash_generated_method="E8FCEBA0D995DB6EE22CA1B5390C8697") protected int available() throws IOException {  return getInputStream().available();}  }
class C{  public boolean isOverwriteMode(){  return hexEditControl == null || hexEditControl.isOverwriteMode();}  }
class C{  public String[] loadStrings(String filename){  InputStream is=createInput(filename);  if (is != null)   return loadStrings(is);  System.err.println("The file \"" + filename + "\" "+ "is missing or inaccessible, make sure "+ "the URL is valid or that the file has been "+ "added to your sketch and is readable.");  return null;}  }
class C{  private Iterable<Field> fieldsWithAnnotation(Class<?> cls){synchronized (mux) {    List<Field> fields=fieldCache.get(cls);    if (fields == null) {      fields=new ArrayList<>();      for (      Field field : cls.getDeclaredFields()) {        Annotation ann=field.getAnnotation(annCls);        if (ann != null || needsRecursion(field))         fields.add(field);      }      if (!fields.isEmpty())       fieldCache.put(cls,fields);    }    return fields;  }}  }
class C{  public Resource mapRelations(Resource object,JSONObject jsonObject,List<Resource> included) throws Exception {  HashMap<String,String> relationshipNames=getRelationshipNames(object.getClass());  for (  String relationship : relationshipNames.keySet()) {    JSONObject relationJsonObject=null;    try {      relationJsonObject=jsonObject.getJSONObject(relationship);    } catch (    JSONException e) {      Logger.debug("Relationship named " + relationship + "not found in JSON");      continue;    }    JSONObject relationDataObject=null;    try {      relationDataObject=relationJsonObject.getJSONObject("data");      Resource relationObject=Factory.newObjectFromJSONObject(relationDataObject,null);      relationObject=matchIncludedToRelation(relationObject,included);      mDeserializer.setField(object,relationshipNames.get(relationship),relationObject);    } catch (    JSONException e) {      Logger.debug("JSON relationship does not contain data");    }    JSONArray relationDataArray=null;    try {      relationDataArray=relationJsonObject.getJSONArray("data");      List<Resource> relationArray=Factory.newObjectFromJSONArray(relationDataArray,null);      relationArray=matchIncludedToRelation(relationArray,included);      mDeserializer.setField(object,relationshipNames.get(relationship),relationArray);    } catch (    JSONException e) {      Logger.debug("JSON relationship does not contain data");    }  }  return object;}  }
class C{  @Override public void onDestroyView(){  mIsWebViewAvailable=false;  super.onDestroyView();}  }
class C{  public void clearMovementData(){  pathSprites=new ArrayList<StepSprite>();  movementTarget=null;  checkFoVHexImageCacheClear();  repaint();  refreshMoveVectors();}  }
class C{  public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  EditRoomDeptForm editRoomDeptForm=(EditRoomDeptForm)form;  MessageResources rsc=getResources(request);  String doit=editRoomDeptForm.getDoit();  if (doit != null) {    if (doit.equals(rsc.getMessage("button.update"))) {      ActionMessages errors=new ActionMessages();      errors=editRoomDeptForm.validate(mapping,request);      if (errors.size() == 0) {        doUpdate(editRoomDeptForm,request);        return mapping.findForward("showRoomDetail");      } else {        saveErrors(request,errors);      }    }    if (doit.equals(rsc.getMessage("button.returnToRoomDetail"))) {      response.sendRedirect("roomDetail.do?id=" + editRoomDeptForm.getId());      return null;    }    if (doit.equals(rsc.getMessage("button.addRoomDept"))) {      if (editRoomDeptForm.getDept() == null || editRoomDeptForm.getDept().length() == 0) {        ActionMessages errors=new ActionMessages();        errors.add("roomDept",new ActionMessage("errors.required","Department"));        saveErrors(request,errors);      } else       if (editRoomDeptForm.getDepartmentIds().contains(new Long(editRoomDeptForm.getDept()))) {        ActionMessages errors=new ActionMessages();        errors.add("roomDept",new ActionMessage("errors.alreadyPresent","Department"));        saveErrors(request,errors);      } else {        editRoomDeptForm.addDepartment(editRoomDeptForm.getDept());      }    }    if (doit.equals(rsc.getMessage("button.removeRoomDept"))) {      if (editRoomDeptForm.getDept() == null || editRoomDeptForm.getDept().length() == 0) {        ActionMessages errors=new ActionMessages();        errors.add("roomDept",new ActionMessage("errors.required","Department"));        saveErrors(request,errors);      } else       if (!editRoomDeptForm.getDepartmentIds().contains(new Long(editRoomDeptForm.getDept()))) {        ActionMessages errors=new ActionMessages();        errors.add("roomDept",new ActionMessage("errors.notPresent","Department"));        saveErrors(request,errors);      } else {        editRoomDeptForm.removeDepartment(editRoomDeptForm.getDept());      }    }  }  Long id=Long.valueOf(request.getParameter("id"));  LocationDAO ldao=new LocationDAO();  Location location=ldao.get(id);  sessionContext.checkPermission(location,Right.RoomEditAvailability);  if (doit != null && doit.equals(rsc.getMessage("button.modifyRoomDepts"))) {    TreeSet roomDepts=new TreeSet(location.getRoomDepts());    for (Iterator i=roomDepts.iterator(); i.hasNext(); ) {      RoomDept roomDept=(RoomDept)i.next();      editRoomDeptForm.addDepartment(roomDept.getDepartment().getUniqueId().toString());    }  }  boolean timeVertical=CommonValues.VerticalGrid.eq(UserProperty.GridOrientation.get(sessionContext.getUser()));  RequiredTimeTable rtt=location.getRoomSharingTable(sessionContext.getUser(),editRoomDeptForm.getDepartmentIds());  rtt.getModel().setDefaultSelection(UserProperty.GridSize.get(sessionContext.getUser()));  if (doit != null && (doit.equals(rsc.getMessage("button.removeRoomDept")) || doit.equals(rsc.getMessage("button.addRoomDept")))) {    rtt.update(request);  }  editRoomDeptForm.setSharingTable(rtt.print(true,timeVertical));  if (location instanceof Room) {    Room r=(Room)location;    editRoomDeptForm.setName(r.getLabel());    editRoomDeptForm.setNonUniv(false);  } else   if (location instanceof NonUniversityLocation) {    NonUniversityLocation nonUnivLocation=(NonUniversityLocation)location;    editRoomDeptForm.setName(nonUnivLocation.getName());    editRoomDeptForm.setNonUniv(true);  } else {    ActionMessages errors=new ActionMessages();    errors.add("editRoomDept",new ActionMessage("errors.lookup.notFound","Room Department"));    saveErrors(request,errors);  }  setupDepartments(editRoomDeptForm,request,location);  return mapping.findForward("showEditRoomDept");}  }
class C{  @Override public void execute(MetricTimeSeries timeSeries,FunctionValueMap functionValueMap){  if (timeSeries.isEmpty()) {    functionValueMap.add(this,false,null);    return;  }  DoubleList points=timeSeries.getValues();  double q1=Percentile.evaluate(points,.25);  double q3=Percentile.evaluate(points,.75);  double threshold=(q3 - q1) * 1.5 + q3;  for (int i=0; i < points.size(); i++) {    double point=points.get(i);    if (point > threshold) {      functionValueMap.add(this,true,null);      return;    }  }  functionValueMap.add(this,false,null);}  }
class C{  public DuplicatePrimaryPartitionException(String message){  super(message);}  }
class C{  public void buildFieldTypes(TableDefinition tableDef){  ((JPAMTableDefinition)tableDef).buildFieldTypes(getSession());}  }
class C{  public static void clearCache(){  softCache=new SoftReference<String[]>(null);}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  protected void remove(int id){  nodes.remove(id);}  }
class C{  public void addHaptic(int id){  mHapticFeedback.add(id);}  }
class C{  private void init(){  Grid grid=new Grid();  appendChild(grid);  grid.setWidth("100%");  grid.setStyle("margin:0; padding:0; position: absolute;");  grid.makeNoStrip();  grid.setOddRowSclass("even");  Rows rows=new Rows();  grid.appendChild(rows);  for (int i=0; i < m_goals.length; i++) {    Row row=new Row();    rows.appendChild(row);    row.setWidth("100%");    WPerformanceIndicator pi=new WPerformanceIndicator(m_goals[i]);    row.appendChild(pi);    pi.addEventListener(Events.ON_CLICK,this);  }}  }
class C{  public int deleteBack(){  int oldBack=getBack();  size=size - 1;  return oldBack;}  }
class C{  public boolean isLicensed(){  return resourceExists(thresholdFileResource) && resourceExists(overlappingFileResource);}  }
class C{  protected SimplePhase(String name){  super(name);}  }
class C{  private void URIUtil(){}  }
class C{  public synchronized void processResponse(SIPResponse transactionResponse,MessageChannel sourceChannel,SIPDialog dialog){  if (getState() == null)   return;  if ((TransactionState.COMPLETED == this.getState() || TransactionState.TERMINATED == this.getState()) && transactionResponse.getStatusCode() / 100 == 1) {    return;  }  if (sipStack.isLoggingEnabled()) {    sipStack.getStackLogger().logDebug("processing " + transactionResponse.getFirstLine() + "current state = "+ getState());    sipStack.getStackLogger().logDebug("dialog = " + dialog);  }  this.lastResponse=transactionResponse;  try {    if (isInviteTransaction())     inviteClientTransaction(transactionResponse,sourceChannel,dialog); else     nonInviteClientTransaction(transactionResponse,sourceChannel,dialog);  } catch (  IOException ex) {    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logException(ex);    this.setState(TransactionState.TERMINATED);    raiseErrorEvent(SIPTransactionErrorEvent.TRANSPORT_ERROR);  }}  }
class C{  public void disable(BluetoothAdapter adapter){  int mask=(BluetoothReceiver.STATE_TURNING_OFF_FLAG | BluetoothReceiver.STATE_OFF_FLAG | BluetoothReceiver.SCAN_MODE_NONE_FLAG);  long start=-1;  BluetoothReceiver receiver=getBluetoothReceiver(mask);  int state=adapter.getState();switch (state) {case BluetoothAdapter.STATE_OFF:    assertFalse(adapter.isEnabled());  removeReceiver(receiver);return;case BluetoothAdapter.STATE_TURNING_ON:assertFalse(adapter.isEnabled());start=System.currentTimeMillis();break;case BluetoothAdapter.STATE_ON:assertTrue(adapter.isEnabled());start=System.currentTimeMillis();assertTrue(adapter.disable());break;case BluetoothAdapter.STATE_TURNING_OFF:assertFalse(adapter.isEnabled());mask=0;break;default :removeReceiver(receiver);fail(String.format("disable() invalid state: state=%d",state));}long s=System.currentTimeMillis();while (System.currentTimeMillis() - s < ENABLE_DISABLE_TIMEOUT) {state=adapter.getState();if (state == BluetoothAdapter.STATE_OFF && (receiver.getFiredFlags() & mask) == mask) {assertFalse(adapter.isEnabled());long finish=receiver.getCompletedTime();if (start != -1 && finish != -1) {writeOutput(String.format("disable() completed in %d ms",(finish - start)));} else {writeOutput("disable() completed");}removeReceiver(receiver);return;}sleep(POLL_TIME);}int firedFlags=receiver.getFiredFlags();removeReceiver(receiver);fail(String.format("disable() timeout: state=%d (expected %d), flags=0x%x (expected 0x%x)",state,BluetoothAdapter.STATE_OFF,firedFlags,mask));}  }
class C{  public boolean isLocal(){  return local;}  }
class C{  public PowerDecay(){  this(10,0.5);}  }
class C{  public Boolean isStorageIORMSupported(){  return storageIORMSupported;}  }
class C{  public final byte[] array(){  return array;}  }
class C{  public void buildClassifier(Instances D) throws Exception {  Random r=new Random(m_seed);  if (fastaram) {    networks=new ARAMNetworkfast[numberofnetworks];  } else   if (sparsearam) {    networks=new ARAMNetworkSparse[numberofnetworks];  } else   if (sparsearamH) {    networks=new ARAMNetworkSparseV[numberofnetworks];  } else   if (sparsearamHT) {    networks=new ARAMNetworkSparseHT[numberofnetworks];  } else {    networks=new ARAMNetwork[numberofnetworks];  }  numClasses=D.classIndex();  if (tfastaram) {    BuildClassifier[] bc=new BuildClassifier[numberofnetworks];    for (int i=0; i < numberofnetworks; i++) {      List<Integer> list=new ArrayList<Integer>();      for (int j=0; j < D.numInstances(); j++) {        list.add(j);      }      java.util.Collections.shuffle(list,r);      if (fastaram) {        networks[i]=new ARAMNetworkfast();      } else       if (sparsearam) {        networks[i]=new ARAMNetworkSparse();      } else       if (sparsearamH) {        networks[i]=new ARAMNetworkSparseV();      } else       if (sparsearamHT) {        networks[i]=new ARAMNetworkSparseHT();      } else {        networks[i]=new ARAMNetwork();      }      networks[i].order=list;      networks[i].roa=roa;      bc[i]=new BuildClassifier(networks[i]);      bc[i].setinstances(D);      bc[i].start();    }    for (int i=0; i < numberofnetworks; i++) {      bc[i].join();      networks[i]=bc[i].m_network;      networks[i].learningphase=false;    }  } else {    for (int i=0; i < numberofnetworks; i++) {      if (fastaram) {        networks[i]=new ARAMNetworkfast();      } else       if (sparsearam) {        networks[i]=new ARAMNetworkSparse();      } else       if (sparsearamH) {        networks[i]=new ARAMNetworkSparseV();      } else       if (sparsearamHT) {        networks[i]=new ARAMNetworkSparseHT();      } else {        networks[i]=new ARAMNetwork();      }      networks[i].roa=roa;      networks[i].buildClassifier(D);      networks[i].learningphase=false;      D.randomize(r);    }  }  dc=new DistributionCalc[numberofnetworks];}  }
class C{  private void startCameraSource(){  int code=GoogleApiAvailability.getInstance().isGooglePlayServicesAvailable(getApplicationContext());  if (code != ConnectionResult.SUCCESS) {    Dialog dlg=GoogleApiAvailability.getInstance().getErrorDialog(this,code,RC_HANDLE_GMS);    dlg.show();  }  if (mCameraSource != null) {    try {      mPreview.start(mCameraSource,mGraphicOverlay);    } catch (    IOException e) {      Log.e(TAG,"Unable to start camera source.",e);      mCameraSource.release();      mCameraSource=null;    }  }}  }
class C{  public Timezone(String text){  this(null,text);}  }
class C{  public static <K,V>V putAt(Map<K,V> self,K key,V value){  self.put(key,value);  return value;}  }
class C{  @Override public String toString(){  return toString(",");}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.857 -0400",hash_original_method="8DBE36D3CC23C0C9E5FAAD9804EB9F8E",hash_generated_method="B8E268DF01A1D59287B8F2ED5303EAE7") private void processInput(boolean endOfInput) throws IOException {  decoderIn.flip();  CoderResult coderResult;  while (true) {    coderResult=decoder.decode(decoderIn,decoderOut,endOfInput);    if (coderResult.isOverflow()) {      flushOutput();    } else     if (coderResult.isUnderflow()) {      break;    } else {      throw new IOException("Unexpected coder result");    }  }  decoderIn.compact();}  }
class C{  public static float byte52ToFloat(byte b){  if (b == 0)   return 0.0f;  int bits=(b & 0xff) << (24 - 5);  bits+=(63 - 2) << 24;  return Float.intBitsToFloat(bits);}  }
class C{  private void createAndRegisterObserverProxyLocked(IContentObserver observer){  if (mObserver != null) {    throw new IllegalStateException("an observer is already registered");  }  mObserver=new ContentObserverProxy(observer,this);  mCursor.registerContentObserver(mObserver);}  }
class C{  public int compressEstim(byte[] src,int srcOff,final int srcLen){  if (srcLen < 10)   return srcLen;  int stride=LZ4_64K_LIMIT - 1;  int segments=(srcLen + stride - 1) / stride;  stride=srcLen / segments;  if (stride >= LZ4_64K_LIMIT - 1 || stride * segments > srcLen || segments < 1 || stride < 1)   throw new RuntimeException("?? " + srcLen);  int bytesIn=0;  int bytesOut=0;  int len=srcLen;  while (len > 0) {    if (len > stride)     len=stride;    bytesOut+=compress64k(src,srcOff,len);    srcOff+=len;    bytesIn+=len;    len=srcLen - bytesIn;  }  double ratio=bytesOut / (double)bytesIn;  return bytesIn == srcLen ? bytesOut : (int)(ratio * srcLen + 0.5);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.ARRAY_LITERAL__ELEMENTS:    return elements != null && !elements.isEmpty();case N4JSPackage.ARRAY_LITERAL__TRAILING_COMMA:  return trailingComma != TRAILING_COMMA_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  public FilterStreamSpecRaw(){}  }
class C{  void onMenuVisibilityChanged(boolean isVisible){  for (int i=0; i < mObservers.size(); ++i) {    mObservers.get(i).onMenuVisibilityChanged(isVisible);  }}  }
class C{  public void updateDownload(){  ArrayList<DownloadInfoRunnable> ongoingDownloads=getOngoingDownloads();  if (!ongoingDownloads.isEmpty()) {    updateProgress();  } else {    timer.cancel();    timer.purge();    stopSelf();    mBuilder=null;    stopForeground(true);    isStopped=true;  }}  }
class C{  private int remoteAddPois(List<Poi> pois,String changeSetId){  int count=0;  for (  Poi poi : pois) {    if (remoteAddPoi(poi,changeSetId)) {      count++;    }  }  return count;}  }
class C{  public CopyOnWriteArraySet(Collection<? extends E> c){  al=new CopyOnWriteArrayList<E>();  al.addAllAbsent(c);}  }
class C{  @Override public void close() throws SQLException {  try {    super.close();  }  finally {    this.outputLogger.close();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:41.688 -0500",hash_original_method="1623111994CBCA0890DA0FF2A1E140E0",hash_generated_method="478ACA79A313929F4EF55B9242DEEF4D") public boolean isBackToBackUserAgent(){  return super.isBackToBackUserAgent;}  }
class C{  public EnglishMinimalStemFilterFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public AABB(ReadonlyVec3D pos,float extent){  super(pos);  setExtent(new Vec3D(extent,extent,extent));}  }
class C{  public static <T>JavaslangSubscriber<T> subscriber(){  return new JavaslangSubscriber<T>();}  }
class C{  public SQLNonTransientException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  public void localTransactionCommitted(ConnectionEvent event){}  }
class C{  protected boolean runAndReset(){  if (state != NEW || !UNSAFE.compareAndSwapObject(this,runnerOffset,null,Thread.currentThread()))   return false;  boolean ran=false;  int s=state;  try {    Callable<V> c=callable;    if (c != null && s == NEW) {      try {        c.call();        ran=true;      } catch (      Throwable ex) {        setException(ex);      }    }  }  finally {    runner=null;    s=state;    if (s >= INTERRUPTING)     handlePossibleCancellationInterrupt(s);  }  return ran && s == NEW;}  }
class C{  public void addCookie(GoogleCookie cookie){  if (cookieManager != null) {    cookieManager.addCookie(cookie);  }}  }
class C{  public void debug(String trace){  printTrace(trace,DEBUG_LEVEL);}  }
class C{  public boolean isAutoIndentEnabled(){  return autoIndentEnabled;}  }
class C{  public void disableHardwareLayersForContent(){  View widget=getContent();  if (widget != null) {    widget.setLayerType(LAYER_TYPE_NONE,null);  }}  }
class C{  public PaymentGatewayDescriptorImpl(final String description,final String label,final String url){  super(description,label);  this.url=url;}  }
class C{  public static Date parseDateLong(String dateString,String pattern) throws ParseException {  return getSimplDateFormat(pattern).parse(dateString);}  }
class C{  public void add(int i,Coordinate coord,boolean allowRepeated){  if (!allowRepeated) {    int size=size();    if (size > 0) {      if (i > 0) {        Coordinate prev=(Coordinate)get(i - 1);        if (prev.equals2D(coord))         return;      }      if (i < size) {        Coordinate next=(Coordinate)get(i);        if (next.equals2D(coord))         return;      }    }  }  super.add(i,coord);}  }
class C{  private void loadAppThemeDefaults(){  TypedValue typedValue=new TypedValue();  TypedArray a=getContext().obtainStyledAttributes(typedValue.data,new int[]{R.attr.colorAccent,android.R.attr.textColorPrimary,R.attr.colorControlNormal});  dialColor=a.getColor(0,dialColor);  textColor=a.getColor(1,textColor);  clockColor=a.getColor(2,clockColor);  a.recycle();}  }
class C{  public void increaseRefcount(){  refcount++;}  }
class C{  public static double computePolygonAreaFromVertices(Iterable<? extends Vec4> points){  if (points == null) {    String message=Logging.getMessage("nullValue.IterableIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  java.util.Iterator<? extends Vec4> iter=points.iterator();  if (!iter.hasNext()) {    return 0;  }  double area=0;  Vec4 firstPoint=iter.next();  Vec4 point=firstPoint;  while (iter.hasNext()) {    Vec4 nextLocation=iter.next();    area+=point.x * nextLocation.y;    area-=nextLocation.x * point.y;    point=nextLocation;  }  if (!point.equals(firstPoint)) {    area+=point.x * firstPoint.y;    area-=firstPoint.x * point.y;  }  area/=2.0;  return area;}  }
class C{  public void init(KeyGenerationParameters param){  this.params=(NTRUEncryptionKeyGenerationParameters)param;}  }
class C{  public static JPanel createDemoPanel(){  JFreeChart chart=createChart(createDataset());  ChartPanel panel=new ChartPanel(chart,false);  panel.setFillZoomRectangle(true);  panel.setMouseWheelEnabled(true);  return panel;}  }
class C{  public static void deleteVMsOnThisEndpoint(VerificationHost host,boolean isMock,String parentComputeLink,List<String> instanceIdsToDelete) throws Throwable {  deleteVMsOnThisEndpoint(host,null,isMock,parentComputeLink,instanceIdsToDelete,null);}  }
class C{  public boolean isIn(byte i){  return (i >= this.min) && (i <= this.max);}  }
class C{  public void completeAll(){  long currentCompleted=completedCount;  int size=Math.max(1,actionList.size());  while (completedCount - currentCompleted < size) {    if (getState() != Thread.State.BLOCKED && getState() != Thread.State.RUNNABLE)     break;    try {      Thread.sleep(50);    } catch (    InterruptedException ex) {      break;    }  }}  }
class C{  public String toString(){  return image;}  }
class C{  public KtVisualPanel1(){  initComponents();}  }
class C{  public URI(String p_scheme,String p_schemeSpecificPart) throws MalformedURIException {  if (p_scheme == null || p_scheme.trim().length() == 0) {    throw new MalformedURIException("Cannot construct URI with null/empty scheme!");  }  if (p_schemeSpecificPart == null || p_schemeSpecificPart.trim().length() == 0) {    throw new MalformedURIException("Cannot construct URI with null/empty scheme-specific part!");  }  setScheme(p_scheme);  setPath(p_schemeSpecificPart);}  }
class C{  public boolean isDoingRangedAttack(){  return isDoingRangedAttack;}  }
class C{  public SdfReaderWrapper(File sdfDir,boolean useMem,boolean checkConsistency) throws IOException {  mIsPaired=ReaderUtils.isPairedEndDirectory(sdfDir);  if (mIsPaired) {    mSingle=null;    mLeft=createSequencesReader(ReaderUtils.getLeftEnd(sdfDir),useMem);    mRight=createSequencesReader(ReaderUtils.getRightEnd(sdfDir),useMem);    if (checkConsistency) {      if (mLeft.numberSequences() != mRight.numberSequences() || !mLeft.type().equals(mRight.type()) || mLeft.hasQualityData() != mRight.hasQualityData() || mLeft.hasNames() != mRight.hasNames()) {        throw new NoTalkbackSlimException(ErrorType.INFO_ERROR,"Paired end SDF has inconsistencies between arms.");      }    }  } else {    mLeft=null;    mRight=null;    mSingle=createSequencesReader(sdfDir,useMem);  }}  }
class C{  public DefaultRenderStack(){  stack=new ArrayDeque<>();}  }
class C{  public void onLocationChanged(Location location){  if (location == null) {    return;  }  float distance=getDistanceFromNetwork(location);  mTrackerData.writeEntry(location,distance);}  }
class C{  public static File secondaryIndexFileName(File data){  final int extensionIndex=data.getName().lastIndexOf('.');  if (extensionIndex != -1) {    return new File(data.getParentFile(),data.getName().substring(0,extensionIndex) + BamIndexer.BAM_INDEX_EXTENSION);  }  return indexFileName(data);}  }
class C{  private void cancelOrder(Contract contract,TradeOrder order) throws IOException {  OrderState orderState=new OrderState();  orderState.m_status=OrderStatus.CANCELLED;  this.brokerModel.openOrder(order.getOrderKey(),contract,order,orderState);  order.setStatus(OrderStatus.CANCELLED);}  }
class C{  private TempTripleStore(final TemporaryStore store,final Properties properties){  this(store,UUID.randomUUID() + "kb",ITx.UNISOLATED,properties);}  }
class C{  public static <T>T[] newSameSize(List<?> list,Class<T> cpType){  if (list == null)   return create(cpType,0); else   return create(cpType,list.size());}  }
class C{  public void addPaintListener(PaintListener pl){  if (m_painters == null) {    m_painters=new CopyOnWriteArrayList();  }  m_painters.add(pl);}  }
class C{  @Override public boolean isNamed(){  return (flags & NO_NAME) == 0;}  }
class C{  public CopyOnWriteMap(){  internalMap=new HashMap<K,V>();}  }
class C{  public static void runTrialParallel(int size,TrialSuite set,IPoint[] pts,IPivotIndex selector,int numThreads,int ratio){  Integer[] ar=new Integer[size];  for (int i=0, idx=0; i < pts.length; i++) {    ar[idx++]=(int)(pts[i].getX() * BASE);    ar[idx++]=(int)(pts[i].getY() * BASE);  }  MultiThreadQuickSort<Integer> qs=new MultiThreadQuickSort<Integer>(ar);  qs.setPivotMethod(selector);  qs.setNumberHelperThreads(numThreads);  qs.setThresholdRatio(ratio);  System.gc();  long start=System.currentTimeMillis();  qs.qsort(0,size - 1);  long end=System.currentTimeMillis();  set.addTrial(size,start,end);  for (int i=0; i < ar.length - 1; i++) {    assert (ar[i] <= ar[i + 1]);  }}  }
class C{  private void initResumableMediaRequest(GDataRequest request,MediaFileSource file,String title){  initMediaRequest(request,title);  request.setHeader(GDataProtocol.Header.X_UPLOAD_CONTENT_TYPE,file.getContentType());  request.setHeader(GDataProtocol.Header.X_UPLOAD_CONTENT_LENGTH,new Long(file.getContentLength()).toString());}  }
class C{  public static short[] toShortArray(Short[] array){  short[] result=new short[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i];  }  return result;}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'SIMPLE_ADDRESS_ITEM' ("+ "'_id' INTEGER PRIMARY KEY ,"+ "'NAME' TEXT,"+ "'ADDRESS' TEXT,"+ "'CITY' TEXT,"+ "'STATE' TEXT,"+ "'PHONE' INTEGER);");}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.ABSTRACT_METHOD_DECLARATION___METHOD_DECLARATOR_1:    return ((InternalEList<?>)getMethodDeclarator_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  protected void emit_N4SetterDeclaration_SemicolonKeyword_5_q(EObject semanticObject,ISynNavigable transition,List<INode> nodes){  acceptNodes(transition,nodes);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public FitsDate(String dStr) throws FitsException {  if (dStr == null || dStr.isEmpty()) {    return;  }  Matcher match=FitsDate.NORMAL_REGEX.matcher(dStr);  if (match.matches()) {    this.year=getInt(match,FitsDate.NEW_FORMAT_YEAR_GROUP);    this.month=getInt(match,FitsDate.NEW_FORMAT_MONTH_GROUP);    this.mday=getInt(match,FitsDate.NEW_FORMAT_DAY_OF_MONTH_GROUP);    this.hour=getInt(match,FitsDate.NEW_FORMAT_HOUR_GROUP);    this.minute=getInt(match,FitsDate.NEW_FORMAT_MINUTE_GROUP);    this.second=getInt(match,FitsDate.NEW_FORMAT_SECOND_GROUP);    this.millisecond=getMilliseconds(match,FitsDate.NEW_FORMAT_MILLISECOND_GROUP);  } else {    match=FitsDate.OLD_REGEX.matcher(dStr);    if (match.matches()) {      this.year=getInt(match,FitsDate.OLD_FORMAT_YEAR_GROUP) + FitsDate.YEAR_OFFSET;      this.month=getInt(match,FitsDate.OLD_FORMAT_MONTH_GROUP);      this.mday=getInt(match,FitsDate.OLD_FORMAT_DAY_OF_MONTH_GROUP);    } else {      if (dStr.trim().isEmpty()) {        return;      }      throw new FitsException("Bad FITS date string \"" + dStr + '"');    }  }}  }
class C{  public static <T>T fromBytes(byte[] value,Class<T> clazz){  try {    Input input=new Input(new ByteArrayInputStream(value));    return clazz.cast(kryo.get().readClassAndObject(input));  } catch (  Throwable t) {    LOG.error("Unable to deserialize  because " + t.getMessage(),t);    throw t;  }}  }
class C{  public SequencesWriter(SequenceDataSource source,File outputDir,long sizeLimit,PrereadType type,boolean compressed){  this(source,outputDir,sizeLimit,null,type,compressed,null);}  }
class C{  public HtmlPolicyBuilder allowStyling(){  allowStyling(CssSchema.DEFAULT);  return this;}  }
class C{  private PhoneUtil(){  throw new Error("Do not need instantiate!");}  }
class C{  @Override public void unregisterTap(Tap tap){  mTaps.remove(tap);}  }
class C{  public boolean isNavBarTintEnabled(){  return mNavBarTintEnabled;}  }
class C{  @Override public boolean equals(Object other){  if (_map.equals(other)) {    return true;  } else   if (other instanceof Map) {    Map that=(Map)other;    if (that.size() != _map.size()) {      return false;    } else {      Iterator it=that.entrySet().iterator();      for (int i=that.size(); i-- > 0; ) {        Map.Entry e=(Map.Entry)it.next();        Object key=e.getKey();        Object val=e.getValue();        if (key instanceof Float) {          float k=unwrapKey(key);          Object v=unwrapValue((V)val);          if (_map.containsKey(k) && v == _map.get(k)) {          } else {            return false;          }        } else {          return false;        }      }      return true;    }  } else {    return false;  }}  }
class C{  public boolean becomePrimary(boolean isRebalance){  initializationGate();  long startTime=getPartitionedRegionStats().startPrimaryTransfer(isRebalance);  try {    long waitTime=2000;    while (!isPrimary()) {      this.getAdvisee().getCancelCriterion().checkCancelInProgress(null);      boolean attemptToBecomePrimary=false;      boolean attemptToDeposePrimary=false;      if (Thread.currentThread().isInterrupted()) {        if (logger.isDebugEnabled()) {          logger.debug("Breaking from becomePrimary loop due to thread interrupt flag being set");        }        break;      }      if (isClosed() || !isHosting()) {        if (logger.isDebugEnabled()) {          logger.debug("Breaking from becomePrimary loop because {} is closed or not hosting",this);        }        break;      }      VolunteeringDelegate vDelegate=null;synchronized (this) {        if (isVolunteering()) {          if (logger.isDebugEnabled()) {            logger.debug("Waiting for volunteering thread {}. Time left: {} ms",this,waitTime);          }          this.wait(waitTime);          continue;        } else         if (isBecomingPrimary()) {          attemptToDeposePrimary=true;        } else {          vDelegate=this.volunteeringDelegate;          if (vDelegate == null) {            vDelegate=new VolunteeringDelegate();            this.volunteeringDelegate=vDelegate;          }        }      }      if (vDelegate != null) {        attemptToBecomePrimary=vDelegate.reserveForBecomePrimary();      }      if (attemptToBecomePrimary) {synchronized (this) {          if (this.volunteeringDelegate == null) {            this.volunteeringDelegate=new VolunteeringDelegate();          }          this.volunteeringDelegate.volunteerForPrimary();          attemptToDeposePrimary=true;        }        Thread.sleep(10);      }      if (attemptToDeposePrimary) {        InternalDistributedMember otherPrimary=getPrimary();        if (otherPrimary != null && !getDistributionManager().getId().equals(otherPrimary)) {          if (logger.isDebugEnabled()) {            logger.debug("Attempting to depose primary on {} for {}",otherPrimary,this);          }          DeposePrimaryBucketResponse response=DeposePrimaryBucketMessage.send(otherPrimary,this.pRegion,getBucket().getId());          if (response != null) {            response.waitForRepliesUninterruptibly();            if (logger.isDebugEnabled()) {              logger.debug("Deposed primary on {}",otherPrimary);            }          }        }        Thread.sleep(10);      }    }  } catch (  InterruptedException e) {    Thread.currentThread().interrupt();  } finally {    getPartitionedRegionStats().endPrimaryTransfer(startTime,isPrimary(),isRebalance);  }  return isPrimary();}  }
class C{  private void declareExtensions(){  new BlogCommentFeed().declareExtensions(extProfile);  new BlogFeed().declareExtensions(extProfile);  new BlogPostFeed().declareExtensions(extProfile);  new PostCommentFeed().declareExtensions(extProfile);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_GEN_EXPR_2__INDEX_1:    return INDEX_1_EDEFAULT == null ? index_1 != null : !INDEX_1_EDEFAULT.equals(index_1);}return super.eIsSet(featureID);}  }
class C{  public ReferenceSequence sequence(final String name){  return mReferences.get(name);}  }
class C{  private ChainBuilder(JFrame frame){  super(new BorderLayout());  this.frame=frame;  THIS=this;  JPanel customPanel=createCustomizationPanel();  JPanel presetPanel=createPresetPanel();  label=new JLabel("Click the \"Begin Generating\" button" + " to begin generating phrases",JLabel.CENTER);  Border padding=BorderFactory.createEmptyBorder(20,20,5,20);  customPanel.setBorder(padding);  presetPanel.setBorder(padding);  JTabbedPane tabbedPane=new JTabbedPane();  tabbedPane.addTab("Build your own",null,customPanel,customizationPanelDescription);  tabbedPane.addTab("Presets",null,presetPanel,presetPanelDescription);  add(tabbedPane,BorderLayout.CENTER);  add(label,BorderLayout.PAGE_END);  label.setBorder(BorderFactory.createEmptyBorder(10,10,10,10));}  }
class C{  public String toString(){  return this.materialPackageBO.toString();}  }
class C{  protected VirtualBaseTypeImpl(){  super();}  }
class C{  private void removeParserNotices(Parser parser){  if (noticesToHighlights != null) {    RSyntaxTextAreaHighlighter h=(RSyntaxTextAreaHighlighter)textArea.getHighlighter();    for (Iterator i=noticesToHighlights.entrySet().iterator(); i.hasNext(); ) {      Map.Entry entry=(Map.Entry)i.next();      ParserNotice notice=(ParserNotice)entry.getKey();      if (notice.getParser() == parser && entry.getValue() != null) {        h.removeParserHighlight(entry.getValue());        i.remove();      }    }  }}  }
class C{  public TextLineDecoder(Charset charset,String delimiter){  this(charset,new LineDelimiter(delimiter));}  }
class C{  @Override public void resetViewableArea(){  throw new RuntimeException("resetViewableArea called in PdfDecoderFx");}  }
class C{  private void postResults(){  this.reportTestCase.host.updateSystemInfo(false);  this.trState.systemInfo=this.reportTestCase.host.getSystemInfo();  Operation factoryPost=Operation.createPost(this.remoteTestResultService).setReferer(this.reportTestCase.host.getReferer()).setBody(this.trState).setCompletion(null);  this.reportTestCase.host.testStart(1);  this.reportTestCase.host.sendRequest(factoryPost);  try {    this.reportTestCase.host.testWait();  } catch (  Throwable throwable) {    throwable.printStackTrace();  }}  }
class C{  static void clear(Iterator<?> iterator){  checkNotNull(iterator);  while (iterator.hasNext()) {    iterator.next();    iterator.remove();  }}  }
class C{  @Override public boolean isTop(BitSet fact){  return fact.get(topBit);}  }
class C{  public void eraseMap(){  if (MAP_STORE.getMap(MAP_STORE.getSelectedMapName()) == null) {    return;  }  for (  Route r : MAP_STORE.getMap(MAP_STORE.getSelectedMapName()).getRoutes()) {    eraseRoute(r);  }}  }
class C{  public void doTestTransfer(int size){  Thread.setDefaultUncaughtExceptionHandler(this);  long start, elapsed;  int received;  sendData=createDummyData(size);  sendStreamSize=size;  recvStream=new ByteArrayOutputStream(size);  start=PseudoTCPBase.now();  startClocks();  try {    connect();  } catch (  IOException ex) {    fail(ex.getMessage());  }  assert_Connected_wait(kConnectTimeoutMs);  long transferTout=maxTransferTime(sendData.length,kMinTransferRate);  boolean transfferInTime=assert_Disconnected_wait(transferTout);  elapsed=PseudoTCPBase.now() - start;  stopClocks();  received=recvStream.size();  assertEquals("Transfer timeout, transferred: " + received + " required: "+ sendData.length+ " elapsed: "+ elapsed+ " limit: "+ transferTout,true,transfferInTime);  assertEquals(size,received);  byte[] recvdArray=recvStream.toByteArray();  assertArrayEquals(sendData,recvdArray);  logger.log(Level.INFO,"Transferred " + received + " bytes in "+ elapsed+ " ms ("+ (size * 8 / elapsed)+ " Kbps");}  }
class C{  protected void sequence_SkillFakeDefinition(ISerializationContext context,SkillFakeDefinition semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,GamlPackage.Literals.GAML_DEFINITION__NAME) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,GamlPackage.Literals.GAML_DEFINITION__NAME));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getSkillFakeDefinitionAccess().getNameIDTerminalRuleCall_1_0(),semanticObject.getName());  feeder.finish();}  }
class C{  public void closeDriver(){  if (camera != null) {    FlashlightManager.disableFlashlight();    camera.release();    camera=null;  }}  }
class C{  public void removeSecurityManager(Password password,String id) throws PageException {  checkWriteAccess();  ((ConfigServerImpl)ConfigImpl.getConfigServer(config,password)).removeSecurityManager(id);  Element security=_getRootElement("security");  Element[] children=XMLConfigWebFactory.getChildren(security,"accessor");  for (int i=0; i < children.length; i++) {    if (id.equals(children[i].getAttribute("id"))) {      security.removeChild(children[i]);    }  }}  }
class C{  public static void circle(double x,double y,double r){  if (r < 0)   throw new IllegalArgumentException("circle radius must be nonnegative");  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(2 * r);  double hs=factorY(2 * r);  if (ws <= 1 && hs <= 1)   pixel(x,y); else   offscreen.draw(new Ellipse2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));  draw();}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile=args[0];  if (inputFile.toLowerCase().contains(".dep")) {    calculateRaster();  } else   if (inputFile.toLowerCase().contains(".shp")) {    calculateVector();  } else {    showFeedback("There was a problem reading the input file.");  }}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) private static <T>T create(Class<T> cls,QName qname){  return (T)Configuration.getBuilderFactory().getBuilder(qname).buildObject(qname);}  }
class C{  public HttpConnection createHttpConnection(){  return new AndroidHttpConnection();}  }
class C{  @SuppressWarnings("unchecked") private Map<Integer,float[]> parseWaveformsFromJsonFile(File waveformsFile){  Map<Integer,float[]> waveformsMap;  try {    waveformsMap=(Map<Integer,float[]>)parseJsonFile(waveformsFile);    LOG.info("Loaded waveform images from {}",waveformsFile);  } catch (  IOException exception) {    waveformsMap=new HashMap<>();    LOG.error("Error loading waveform thumbnails: {}",exception.getMessage(),exception);  }  return waveformsMap;}  }
class C{  public static final void drawShape(GL2 gl,Shape s,boolean points){  if (s instanceof Circle) {    RenderUtilities.drawCircle(gl,(Circle)s,points,true);  } else   if (s instanceof Rectangle) {    RenderUtilities.drawRectangle(gl,(Rectangle)s,points);  } else   if (s instanceof Polygon) {    RenderUtilities.drawPolygon(gl,(Polygon)s,points);  } else   if (s instanceof Segment) {    RenderUtilities.drawLineSegment(gl,(Segment)s,points);  } else {  }}  }
class C{  public void write(Writer writer) throws IOException {  Map<String,Object> map=new HashMap<String,Object>();  map.put("vcards",vcards);  map.put("utils",new TemplateUtils());  map.put("translucentBg",readImage("translucent-bg.png",ImageType.PNG));  map.put("noProfile",readImage("no-profile.png",ImageType.PNG));  map.put("ezVCardVersion",Ezvcard.VERSION);  map.put("ezVCardUrl",Ezvcard.URL);  map.put("scribeIndex",new ScribeIndex());  try {    template.process(map,writer);  } catch (  TemplateException e) {    throw new RuntimeException(e);  }  writer.flush();}  }
class C{  @Override public String toString(String field){  StringBuilder buffer=new StringBuilder();  if (!getField().equals(field)) {    buffer.append(getField());    buffer.append(":");  }  buffer.append(includeLower ? '[' : '{');  buffer.append(lowerTerm != null ? ("*".equals(Term.toString(lowerTerm)) ? "\\*" : Term.toString(lowerTerm)) : "*");  buffer.append(" TO ");  buffer.append(upperTerm != null ? ("*".equals(Term.toString(upperTerm)) ? "\\*" : Term.toString(upperTerm)) : "*");  buffer.append(includeUpper ? ']' : '}');  return buffer.toString();}  }
class C{  public void prepare(PluginContext context) throws ReplicatorException, InterruptedException {  logger.info("Import tables from " + this.uri.getPath() + " to the "+ this.getDefaultSchema()+ " schema");  tableNames=new ArrayList<String>();  columnDefinitions=new HashMap<String,ArrayList<ColumnSpec>>();  parser=new CSVParser(',','"');  File importDirectory=new File(this.uri.getPath());  if (!importDirectory.exists()) {    throw new ReplicatorException("The " + this.uri.getPath() + " directory does not exist");  }  for (  File f : importDirectory.listFiles()) {    if (f.getName().endsWith(".def")) {      this.prepareTableDefinition(f);    }  }  if (this.tableNames.size() == 0) {    throw new ReplicatorException("There are no tables to load");  }}  }
class C{  public void plot(AbstractDrawer draw){  if (!visible)   return;  draw.setColor(color);  draw.setFont(font);  draw.setBaseOffset(base_offset);  draw.setTextOffset(cornerE,cornerN);  draw.setTextAngle(angle);  draw.drawText(label,coord);  draw.setBaseOffset(null);}  }
class C{  public void testShiftRight4(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=45;  byte rBytes[]={12,1,-61,39,-11,-94,-55};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.shiftRight(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public void fixStatsError(int sendCommand){  for (; this.affectedRows.length < sendCommand; ) {    this.affectedRows[currentStat++]=Statement.EXECUTE_FAILED;  }}  }
class C{  public byte[] readRawBytes(final int size) throws IOException {  if (size < 0) {    throw InvalidProtocolBufferNanoException.negativeSize();  }  if (bufferPos + size > currentLimit) {    skipRawBytes(currentLimit - bufferPos);    throw InvalidProtocolBufferNanoException.truncatedMessage();  }  if (size <= bufferSize - bufferPos) {    final byte[] bytes=new byte[size];    System.arraycopy(buffer,bufferPos,bytes,0,size);    bufferPos+=size;    return bytes;  } else {    throw InvalidProtocolBufferNanoException.truncatedMessage();  }}  }
class C{  private void resetToXMLSAXHandler(){  this.m_escapeSetting=true;}  }
class C{  public static cuComplex cuCmplx(float r,float i){  cuComplex res=new cuComplex();  res.x=r;  res.y=i;  return res;}  }
class C{  public static MethodRepository make(String rawSig,GenericsFactory f){  return new MethodRepository(rawSig,f);}  }
class C{  public void add(final T object){  mObjects.add(object);  notifyItemInserted(getItemCount() - 1);}  }
class C{  public static String compareHardware(Map<String,String> hwMap,boolean checkDisk){  String localMemSizeStr=ServerProbe.getInstance().getMemorySize();  String localCpuCoreStr=ServerProbe.getInstance().getCpuCoreNum();  hwMap.get(PropertyConstants.PROPERTY_KEY_DISK_CAPACITY);  if (!localMemSizeStr.equals(hwMap.get(PropertyConstants.PROPERTY_KEY_MEMORY_SIZE))) {    log.warn("Local memory {} is not the same as selected cluster {}",localMemSizeStr,hwMap.get(PropertyConstants.PROPERTY_KEY_MEMORY_SIZE));    return String.format("Local memory {%s} is not the same as selected cluster {%s}",localMemSizeStr,hwMap.get(PropertyConstants.PROPERTY_KEY_MEMORY_SIZE));  }  if (!localCpuCoreStr.equals(hwMap.get(PropertyConstants.PROPERTY_KEY_CPU_CORE))) {    log.warn("Local CPU core number {} is not the same as selected cluster {}",localCpuCoreStr,hwMap.get(PropertyConstants.PROPERTY_KEY_CPU_CORE));    return String.format("Local CPU core number {%s} is not the same as selected cluster {%s}",localCpuCoreStr,hwMap.get(PropertyConstants.PROPERTY_KEY_CPU_CORE));  }  if (checkDisk && !hasSameDiskInfo(hwMap.get(PropertyConstants.PROPERTY_KEY_DISK),hwMap.get(PropertyConstants.PROPERTY_KEY_DISK_CAPACITY))) {    log.warn("Local disk(s) are not the same as selected cluster capacity {}",hwMap.get(PropertyConstants.PROPERTY_KEY_DISK_CAPACITY));    return String.format("Local disk(s) are not the same as selected cluster capacity {%s}",hwMap.get(PropertyConstants.PROPERTY_KEY_DISK_CAPACITY));  }  return null;}  }
class C{  public static void tearDown(SWTWorkbenchBot bot){  SwtBotUtils.print("Tear Down");  bot.resetWorkbench();  SwtBotUtils.print("Tear Down Done");}  }
class C{  private void handleMessage(byte[] data){  Buffer buffer=new Buffer();  buffer.write(data);  int type=(buffer.readShort() & 0xffff) & ~(APP_MSG_RESPONSE_BIT);  if (type == BeanMessageID.SERIAL_DATA.getRawValue()) {    beanListener.onSerialMessageReceived(buffer.readByteArray());  } else   if (type == BeanMessageID.BT_GET_CONFIG.getRawValue()) {    returnConfig(buffer);  } else   if (type == BeanMessageID.CC_TEMP_READ.getRawValue()) {    returnTemperature(buffer);  } else   if (type == BeanMessageID.BL_GET_META.getRawValue()) {    returnMetadata(buffer);  } else   if (type == BeanMessageID.BT_GET_SCRATCH.getRawValue()) {    returnScratchData(buffer);  } else   if (type == BeanMessageID.CC_LED_READ_ALL.getRawValue()) {    returnLed(buffer);  } else   if (type == BeanMessageID.CC_ACCEL_READ.getRawValue()) {    returnAcceleration(buffer);  } else   if (type == BeanMessageID.CC_ACCEL_GET_RANGE.getRawValue()) {    returnAccelerometerRange(buffer);  } else   if (type == BeanMessageID.CC_GET_AR_POWER.getRawValue()) {    returnArduinoPowerState(buffer);  } else   if (type == BeanMessageID.BL_STATUS.getRawValue()) {    try {      Status status=Status.fromPayload(buffer);      handleStatus(status);    } catch (    NoEnumFoundException e) {      Log.e(TAG,"Unable to parse status from buffer: " + buffer.toString());      e.printStackTrace();    }  } else {    String fourDigitHex=Integer.toHexString(type);    while (fourDigitHex.length() < 4) {      fourDigitHex="0" + fourDigitHex;    }    Log.e(TAG,"Received message of unknown type 0x" + fourDigitHex);    returnError(BeanError.UNKNOWN_MESSAGE_ID);  }}  }
class C{  public static <K,V>HashMap<K,V> newEmptyHashMap(Iterable<?> iterable){  if (iterable instanceof Collection<?>)   return Maps.newHashMapWithExpectedSize(((Collection<?>)iterable).size());  return Maps.newHashMap();}  }
class C{  public int calculateScrollY(int firstVisiblePosition,int visibleItemCount){  mFirstVisiblePosition=firstVisiblePosition;  if (mReferencePosition < 0) {    mReferencePosition=mFirstVisiblePosition;  }  if (visibleItemCount > 0) {    View c=mListView.getListChildAt(0);    int scrollY=-c.getTop();    mListViewItemHeights.put(firstVisiblePosition,c.getMeasuredHeight());    if (mFirstVisiblePosition >= mReferencePosition) {      for (int i=mReferencePosition; i < firstVisiblePosition; ++i) {        if (mListViewItemHeights.get(i) == null) {          mListViewItemHeights.put(i,c.getMeasuredHeight());        }        scrollY+=mListViewItemHeights.get(i);      }      return scrollY;    } else {      for (int i=mReferencePosition - 1; i >= firstVisiblePosition; --i) {        if (mListViewItemHeights.get(i) == null) {          mListViewItemHeights.put(i,c.getMeasuredHeight());        }        scrollY-=mListViewItemHeights.get(i);      }      return scrollY;    }  }  return 0;}  }
class C{  public DynamicRegionFactoryImpl(){}  }
class C{  public DViewAsymmetricKeyFields(JDialog parent,String title,DSAPublicKey dsaPublicKey){  super(parent,title,Dialog.ModalityType.DOCUMENT_MODAL);  key=dsaPublicKey;  initFields();}  }
class C{  public void removeAllActions(CCNode target){  if (target == null)   return;  HashElement element=targets.get(target);  if (element != null) {    deleteHashElement(element);  } else {  }}  }
class C{  private static String normalizeName(String name){  name=(name == null) ? "" : name.trim();  return name.isEmpty() ? MISSING_NAME : name;}  }
class C{  @Override public Object build(QueryNode queryNode) throws QueryNodeException {  process(queryNode);  return queryNode.getTag(QUERY_TREE_BUILDER_TAGID);}  }
class C{  public boolean isEnableLighting(){  return false;}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     log.log(Level.SEVERE,"prepare - Unknown Parameter: " + name);  }}  }
class C{  public void fling(int velocityX,int velocityY){  if (getChildCount() > 0) {    int height=getHeight() - getPaddingBottom() - getPaddingTop();    int bottom=getChildAt(0).getHeight();    int width=getWidth() - getPaddingRight() - getPaddingLeft();    int right=getChildAt(0).getWidth();    mScroller.fling(getScrollX(),getScrollY(),velocityX,velocityY,0,right - width,0,bottom - height);    final boolean movingDown=velocityY > 0;    final boolean movingRight=velocityX > 0;    View newFocused=findFocusableViewInMyBounds(movingRight,mScroller.getFinalX(),movingDown,mScroller.getFinalY(),findFocus());    if (newFocused == null) {      newFocused=this;    }    if (newFocused != findFocus() && newFocused.requestFocus(movingDown ? View.FOCUS_DOWN : View.FOCUS_UP)) {      mTwoDScrollViewMovedFocus=true;      mTwoDScrollViewMovedFocus=false;    }    awakenScrollBars(mScroller.getDuration());    invalidate();  }}  }
class C{  protected Socket createSocket(){  return new Socket();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:21.616 -0500",hash_original_method="F5BF0DDF083843E14FDE0C117BAE250E",hash_generated_method="E1C3BB6772CE07721D8608A1E4D81EE1") public static int netmaskIntToPrefixLength(int netmask){  return Integer.bitCount(netmask);}  }
class C{  public WritableRaster createWritableChild(int x,int y,int width,int height,int x0,int y0,int[] bandList){  if (x < this.minX) {    throw new RasterFormatException("x lies outside the raster");  }  if (y < this.minY) {    throw new RasterFormatException("y lies outside the raster");  }  if ((x + width < x) || (x + width > this.minX + this.width)) {    throw new RasterFormatException("(x + width) is outside of Raster");  }  if ((y + height < y) || (y + height > this.minY + this.height)) {    throw new RasterFormatException("(y + height) is outside of Raster");  }  SampleModel sm;  if (bandList != null)   sm=sampleModel.createSubsetSampleModel(bandList); else   sm=sampleModel;  int deltaX=x0 - x;  int deltaY=y0 - y;  return new ShortInterleavedRaster(sm,dataBuffer,new Rectangle(x0,y0,width,height),new Point(sampleModelTranslateX + deltaX,sampleModelTranslateY + deltaY),this);}  }
class C{  private boolean isBlockCommented(int startLine,int endLine,String[] prefixes,IDocument document){  try {    for (int i=startLine; i <= endLine; i++) {      IRegion line=document.getLineInformation(i);      String text=document.get(line.getOffset(),line.getLength());      int[] found=TextUtilities.indexOf(prefixes,text,0);      if (found[0] == -1)       return false;      String s=document.get(line.getOffset(),found[0]);      s=s.trim();      if (s.length() != 0)       return false;    }    return true;  } catch (  BadLocationException x) {  }  return false;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case GamlPackage.PARAMETERS__PARAMS:    setParams((ExpressionList)null);  return;}super.eUnset(featureID);}  }
class C{  public static void main(String[] args){  String matrixFilename=null;  String coordinateFilename=null;  String externalZonesFilename=null;  String networkFilename=null;  String plansFilename=null;  Double populationFraction=null;  if (args.length != 6) {    throw new IllegalArgumentException("Wrong number of arguments");  } else {    matrixFilename=args[0];    coordinateFilename=args[1];    externalZonesFilename=args[2];    networkFilename=args[3];    plansFilename=args[4];    populationFraction=Double.parseDouble(args[5]);  }  List<String> list=new ArrayList<>();  try {    BufferedReader br=IOUtils.getBufferedReader(externalZonesFilename);    try {      String line=null;      while ((line=br.readLine()) != null) {        list.add(line);      }    }  finally {      br.close();    }  } catch (  FileNotFoundException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  }  MyDemandMatrix mdm=new MyDemandMatrix();  mdm.readLocationCoordinates(coordinateFilename,2,0,1);  mdm.parseMatrix(matrixFilename,"Saturn","Saturn model received for Sanral project");  Scenario sc=mdm.generateDemand(list,new Random(5463),populationFraction,"car");  NetworkReaderMatsimV1 nr=new NetworkReaderMatsimV1(sc.getNetwork());  nr.readFile(networkFilename);  XY2Links xy=new XY2Links(sc.getNetwork(),null);  xy.run(sc.getPopulation());  PopulationWriter pw=new PopulationWriter(sc.getPopulation(),sc.getNetwork());  pw.write(plansFilename);}  }
class C{  private int partition(int[] a,int left,int right){  int pivot=a[left + (right - left) / 2];  while (left <= right) {    while (a[left] > pivot)     left++;    while (a[right] < pivot)     right--;    if (left <= right) {      int temp=a[left];      a[left]=a[right];      a[right]=temp;      left++;      right--;    }  }  return left;}  }
class C{  public boolean isDone(){  return one.getHand().empty() || two.getHand().empty();}  }
class C{  public ClassNotFoundException(@Nullable String s,@Nullable Throwable ex){  super(s,null);  this.ex=ex;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case BasePackage.DOCUMENTED_ELEMENT__DOCUMENTATION:    return DOCUMENTATION_EDEFAULT == null ? documentation != null : !DOCUMENTATION_EDEFAULT.equals(documentation);}return super.eIsSet(featureID);}  }
class C{  @Override public void drawRangeLine(Graphics2D g2,CategoryPlot plot,ValueAxis axis,Rectangle2D dataArea,double value,Paint paint,Stroke stroke){  Range range=axis.getRange();  if (!range.contains(value)) {    return;  }  Rectangle2D adjusted=new Rectangle2D.Double(dataArea.getX(),dataArea.getY() + getYOffset(),dataArea.getWidth() - getXOffset(),dataArea.getHeight() - getYOffset());  Line2D line1=null;  Line2D line2=null;  PlotOrientation orientation=plot.getOrientation();  if (orientation == PlotOrientation.HORIZONTAL) {    double x0=axis.valueToJava2D(value,adjusted,plot.getRangeAxisEdge());    double x1=x0 + getXOffset();    double y0=dataArea.getMaxY();    double y1=y0 - getYOffset();    double y2=dataArea.getMinY();    line1=new Line2D.Double(x0,y0,x1,y1);    line2=new Line2D.Double(x1,y1,x1,y2);  } else   if (orientation == PlotOrientation.VERTICAL) {    double y0=axis.valueToJava2D(value,adjusted,plot.getRangeAxisEdge());    double y1=y0 - getYOffset();    double x0=dataArea.getMinX();    double x1=x0 + getXOffset();    double x2=dataArea.getMaxX();    line1=new Line2D.Double(x0,y0,x1,y1);    line2=new Line2D.Double(x1,y1,x2,y1);  }  g2.setPaint(paint);  g2.setStroke(stroke);  g2.draw(line1);  g2.draw(line2);}  }
class C{  void startFading(){  mHandler.removeMessages(MSG_FADE);  scheduleFade();}  }
class C{  protected Connection createConnection() throws Exception {  ActiveMQConnectionFactory factory=new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false");  return factory.createConnection();}  }
class C{  protected void drawView(Graphics2D g,Rectangle r,View view,int fontHeight,int y){  float x=r.x;  LayeredHighlighter h=(LayeredHighlighter)host.getHighlighter();  RSyntaxDocument document=(RSyntaxDocument)getDocument();  Element map=getElement();  int p0=view.getStartOffset();  int lineNumber=map.getElementIndex(p0);  int p1=view.getEndOffset();  setSegment(p0,p1 - 1,document,drawSeg);  int start=p0 - drawSeg.offset;  Token token=document.getTokenListForLine(lineNumber);  if (token != null && token.type == Token.NULL) {    h.paintLayeredHighlights(g,p0,p1,r,host,this);    return;  }  while (token != null && token.isPaintable()) {    int p=calculateBreakPosition(p0,token,x);    x=r.x;    h.paintLayeredHighlights(g,p0,p,r,host,this);    while (token != null && token.isPaintable() && token.offset + token.textCount - 1 < p) {      x=token.paint(g,x,y,host,this);      token=token.getNextToken();    }    if (token != null && token.isPaintable() && token.offset < p) {      int tokenOffset=token.offset;      Token temp=new DefaultToken(drawSeg,tokenOffset - start,p - 1 - start,tokenOffset,token.type);      temp.paint(g,x,y,host,this);      temp=null;      token.makeStartAt(p);    }    p0=(p == p0) ? p1 : p;    y+=fontHeight;  }  if (host.getEOLMarkersVisible()) {    g.setColor(host.getForegroundForTokenType(Token.WHITESPACE));    g.setFont(host.getFontForTokenType(Token.WHITESPACE));    g.drawString("\u00B6",x,y - fontHeight);  }}  }
class C{  @Override public boolean containsKey(Object key){  if (key == null) {    key=NULL_OBJECT;  }  int index=findIndex(key,elementData);  return elementData[index] == key;}  }
class C{  public boolean autoCorrectText(){  return preferences.getBoolean(resources.getString(R.string.key_autocorrect_text),Boolean.parseBoolean(resources.getString(R.string.default_autocorrect_text)));}  }
class C{  protected void removeNode(int id) throws Exception {  int idx;  FolderTokenDocTreeNode node=null;  idx=findIndexById(id);  if (idx == -1) {    throw new IeciTdException(FolderBaseError.EC_NOT_FOUND,FolderBaseError.EM_NOT_FOUND);  }  node=(FolderTokenDocTreeNode)m_nodes.get(idx);  if (node.isNew())   m_nodes.remove(idx); else   node.setEditFlag(FolderEditFlag.REMOVE);}  }
class C{  public void deleteAttributes(int[] columnIndices){  ((ArffTableModel)getModel()).deleteAttributes(columnIndices);}  }
class C{  public void onSuccess(int statusCode,Header[] headers,JSONObject response){  Log.w(LOG_TAG,"onSuccess(int, Header[], JSONObject) was not overriden, but callback was received");}  }
class C{  public int lastIndexOfFromTo(byte element,int from,int to){  if (size == 0)   return -1;  checkRangeFromTo(from,to,size);  byte[] theElements=elements;  for (int i=to; i >= from; i--) {    if (element == theElements[i]) {      return i;    }  }  return -1;}  }
class C{  public void put(final long key){  if (key == FREE_KEY) {    m_hasFreeKey=true;    return;  }  int ptr=(int)((Tools.phiMix(key) & m_mask));  long e=m_data[ptr];  if (e == FREE_KEY) {    m_data[ptr]=key;    if (m_size >= m_threshold) {      rehash(m_data.length * 2);    } else {      ++m_size;    }    return;  } else   if (e == key) {    return;  }  while (true) {    ptr=(int)((ptr + 1) & m_mask);    e=m_data[ptr];    if (e == FREE_KEY) {      m_data[ptr]=key;      if (m_size >= m_threshold) {        rehash(m_data.length * 2);      } else {        ++m_size;      }      return;    } else     if (e == key) {      return;    }  }}  }
class C{  public PredictiveInfoCalculatorKraskov(String calculatorName) throws InstantiationException, IllegalAccessException, ClassNotFoundException {  super(calculatorName);  if (!calculatorName.equalsIgnoreCase(MI_CALCULATOR_KRASKOV1) && !calculatorName.equalsIgnoreCase(MI_CALCULATOR_KRASKOV2)) {    throw new ClassNotFoundException("Must be an underlying Kraskov-Grassberger calculator");  }}  }
class C{  public DefaultDirectAdjacentSelector(short type,Selector parent,SimpleSelector simple){  super(type,parent,simple);}  }
class C{  @Inline public void postCopy(ObjectReference object,boolean majorGC){  initializeHeader(object,false);  if (!HEADER_MARK_BITS) {    testAndSetLiveBit(object);  }}  }
class C{  public static LinkedHashMap<Pattern,String> parseRulesFile(InputStream is){  LinkedHashMap<Pattern,String> rules=new LinkedHashMap<>();  BufferedReader br=new BufferedReader(IOUtils.getDecodingReader(is,StandardCharsets.UTF_8));  String line;  try {    int linenum=0;    while ((line=br.readLine()) != null) {      linenum++;      String[] arr=line.split("#");      if (arr.length > 0)       line=arr[0].trim();      if (line.length() == 0)       continue;      int sep=line.indexOf("=");      if (sep <= 0) {        log.warn("Wrong format of password line " + linenum);        continue;      }      String pass=line.substring(sep + 1).trim();      String regex=line.substring(0,sep).trim();      try {        Pattern pattern=Pattern.compile(regex);        rules.put(pattern,pass);      } catch (      PatternSyntaxException pse) {        log.warn("Key of line " + linenum + " was not a valid regex pattern",pse);        continue;      }    }    is.close();  } catch (  IOException e) {    throw new RuntimeException(e);  }  return rules;}  }
class C{  public boolean isItemForce(){  return true;}  }
class C{  public Builder document(InputStream document,String mediaType){  documentInputStream=document;  this.mediaType=mediaType;  return this;}  }
class C{  public final String toString(){  StringBuffer text=new StringBuffer();  text.append("Print statistic values of instances (" + first + "-"+ last+ "\n");  text.append("    Number of instances:\t" + numInstances + "\n");  text.append("    NUmber of instances with unknowns:\t" + missingInstances + "\n");  text.append("    Attribute:\t\t\t:" + attr + "\n");  text.append("    Sum:\t\t\t" + sum + "\n");  text.append("    Squared sum:\t\t" + sqrSum + "\n");  text.append("    Stanard Deviation:\t\t" + sd + "\n");  return text.toString();}  }
class C{  private void scanAndLock(Object key,int hash){  HashEntry<K,V> first=entryForHash(this,hash);  HashEntry<K,V> e=first;  int retries=-1;  while (!tryLock()) {    HashEntry<K,V> f;    if (retries < 0) {      if (e == null || key.equals(e.key))       retries=0; else       e=e.next;    } else     if (++retries > MAX_SCAN_RETRIES) {      lock();      break;    } else     if ((retries & 1) == 0 && (f=entryForHash(this,hash)) != first) {      e=first=f;      retries=-1;    }  }}  }
class C{  public IntentBuilder oldColor(int oldColor){  mOldColor=oldColor;  return this;}  }
class C{  public void __setDaoSession(DaoSession daoSession){  this.daoSession=daoSession;  myDao=daoSession != null ? daoSession.getUserDBDao() : null;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof TimeTableXYDataset)) {    return false;  }  TimeTableXYDataset that=(TimeTableXYDataset)obj;  if (this.domainIsPointsInTime != that.domainIsPointsInTime) {    return false;  }  if (this.xPosition != that.xPosition) {    return false;  }  if (!this.workingCalendar.getTimeZone().equals(that.workingCalendar.getTimeZone())) {    return false;  }  if (!this.values.equals(that.values)) {    return false;  }  return true;}  }
class C{  private void startContext(CrawlJob crawlJob){  LOGGER.debug("Starting context");  PathSharingContext ac=crawlJob.getJobContext();  ac.addApplicationListener(this);  try {    ac.start();  } catch (  BeansException be) {    LOGGER.warn(be.getMessage());    ac.close();  }catch (  Exception e) {    LOGGER.warn(e.getMessage());    try {      ac.close();    } catch (    Exception e2) {      e2.printStackTrace(System.err);    } finally {    }  }  LOGGER.debug("Context started");}  }
class C{  @Override public boolean performCancel(){  CnAElementFactory.getInstance().reloadModelFromDatabase();  return true;}  }
class C{  public boolean isOpaque(){  checkOpacityMethodClient();  return explicitlyOpaque;}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();}  }
class C{  @Override public void resetDistribution(Instances data) throws Exception {  Instances insts=new Instances(data,data.numInstances());  for (int i=0; i < data.numInstances(); i++) {    if (whichSubset(data.instance(i)) > -1) {      insts.add(data.instance(i));    }  }  Distribution newD=new Distribution(insts,this);  newD.addInstWithUnknown(data,m_attIndex);  m_distribution=newD;}  }
class C{  public static <T,R>R readStaticField(Class<T> klass,String fieldName) throws NoSuchFieldException {  return readAvailableField(klass,null,fieldName);}  }
class C{  public static String extractFactor_Display(String laggedFactor){  int colonIndex=laggedFactor.indexOf(":L");  String factor=laggedFactor.substring(0,colonIndex);  return factor;}  }
class C{  protected void deployCargoPing(WebLogicLocalContainer container) throws IOException {  String deployDir=getFileHandler().createDirectory(getDomainHome(),container.getAutoDeployDirectory());  getResourceUtils().copyResource(RESOURCE_PATH + "cargocpc.war",getFileHandler().append(deployDir,"cargocpc.war"),getFileHandler());}  }
class C{  public int size(){  return this.count;}  }
class C{  protected void parse(DataInputStream stream) throws Exception {  int size=stream.readInt();  int ret, read=0;  data=new byte[size];  while (size > 0) {    ret=stream.read(data,read,size);    size-=ret;    read+=ret;  }}  }
class C{  @Ignore("NaN behavior TBD") @Test public void testLinearAzimuth_WithNaN() throws Exception {  Location begin=new Location(Double.NaN,Double.NaN);  Location end=new Location(34.2,-119.2);  double azimuth=begin.linearAzimuth(end);  assertTrue("expecting NaN",Double.isNaN(azimuth));}  }
class C{  public MutableValueBuffer(final int capacity,final IRaba src){  if (src == null)   throw new IllegalArgumentException();  checkCapacity(capacity);  if (capacity < src.capacity())   throw new IllegalArgumentException();  nvalues=src.size();  values=new byte[capacity][];  int i=0;  for (  byte[] a : src) {    values[i++]=a;  }}  }
class C{  private void checkCircuits(){  _portalIconMap.clear();  _darkTrack.clear();  _unconvertedTrack.clear();  PortalManager portalMgr=InstanceManager.getDefault(jmri.jmrit.logix.PortalManager.class);  Iterator<Positionable> it=_editor.getContents().iterator();  while (it.hasNext()) {    Positionable pos=it.next();    if (pos instanceof IndicatorTrack) {      OBlock block=((IndicatorTrack)pos).getOccBlock();      ((IndicatorTrack)pos).removePath(EditCircuitPaths.TEST_PATH);      if (block != null) {        addIcon(block,pos);      } else {        _darkTrack.add(pos);      }    } else     if (pos instanceof PortalIcon) {      PortalIcon pIcon=(PortalIcon)pos;      String name=pIcon.getName();      Portal portal=portalMgr.getByUserName(name);      if (portal == null) {        log.error("No Portal for PortalIcon called \"" + name + "\". Discarding icon.");        pIcon.remove();      } else {        PortalIcon pi=_portalIconMap.get(name);        if (pi != null) {          log.error("Removing duplicate PortalIcon for Portal \"" + name + "\".");          pi.remove();        }        _portalIconMap.put(name,pIcon);      }    }  }  Iterator<Entry<OBlock,ArrayList<Positionable>>> iters=_circuitMap.entrySet().iterator();  while (iters.hasNext()) {    Entry<OBlock,ArrayList<Positionable>> entry=iters.next();    Iterator<Positionable> iter=entry.getValue().iterator();    while (iter.hasNext()) {      Positionable pos=iter.next();      if (isUnconvertedTrack(pos)) {        if (!_unconvertedTrack.contains(pos)) {          _unconvertedTrack.add(pos);        }      }    }  }  _bareBlock.clear();  _convertBlock.clear();  _badPortalIcon.clear();  OBlockManager manager=InstanceManager.getDefault(jmri.jmrit.logix.OBlockManager.class);  String[] sysNames=manager.getSystemNameArray();  hasOBlocks=(sysNames.length > 0);  for (int i=0; i < sysNames.length; i++) {    OBlock block=manager.getBySystemName(sysNames[i]);    java.util.List<Portal> list=block.getPortals();    if (list != null) {      Iterator<Portal> iter=list.iterator();      while (iter.hasNext()) {        Portal portal=iter.next();        PortalIcon pi=_portalIconMap.get(portal.getName());        if (pi != null) {          addIcon(block,pi);        }      }    }    java.util.List<Positionable> icons=_circuitMap.get(block);    if (log.isDebugEnabled()) {      log.debug("checkCircuits: block " + block.getDisplayName() + " has "+ icons.size()+ " icons.");    }    if (icons == null || icons.size() == 0) {      _bareBlock.add(block);    } else {      _bareBlock.remove(block);      for (int k=0; k < icons.size(); k++) {        Positionable pos=icons.get(k);        if (!(pos instanceof IndicatorTrack) && !(pos instanceof PortalIcon)) {          if (!_convertBlock.contains(block)) {            _convertBlock.add(block);            break;          }        }      }    }  }  List<NamedBean> list=portalMgr.getNamedBeanList();  Iterator<NamedBean> iter=list.iterator();  while (iter.hasNext()) {    Portal portal=(Portal)iter.next();    String name=portal.getName();    PortalIcon pi=_portalIconMap.get(name);    if (pi != null) {      if (!checkPortalIcon(portal,pi)) {        _badPortalIcon.put(name,portal);      }    } else {      _badPortalIcon.put(name,portal);    }  }  makeToDoMenu();}  }
class C{  public OutOfLineContent(){  super(KEY);}  }
class C{  private static List<String> rewriteTermBruteForce(String term){  List<String> termsList=rewriteBrute(term);  if (term == "" || !term.equals(termsList.get(termsList.size() - 1)))   termsList.add(term);  return termsList;}  }
class C{  public void test_sssp_linkType_constraint() throws Exception {  final SmallWeightedGraphProblem p=setupSmallWeightedGraphProblem();  final IGASEngine gasEngine=getGraphFixture().newGASEngine(1);  try {    final IGraphAccessor graphAccessor=getGraphFixture().newGraphAccessor(null);    final IGASContext<SSSP.VS,SSSP.ES,Integer> gasContext=gasEngine.newGASContext(graphAccessor,new SSSP());    gasContext.setLinkType((URI)p.getFoafKnows());    final IGASState<SSSP.VS,SSSP.ES,Integer> gasState=gasContext.getGASState();    gasState.setFrontier(gasContext,p.getV1());    gasContext.call();    assertEquals(0.0,gasState.getState(p.getV1()).dist());    assertEquals(1.0,gasState.getState(p.getV2()).dist());    assertEquals(1.0,gasState.getState(p.getV3()).dist());    assertEquals(2.0,gasState.getState(p.getV4()).dist());    assertEquals(2.0,gasState.getState(p.getV5()).dist());  }  finally {    gasEngine.shutdownNow();  }}  }
class C{  public Id<DgCrossingNode> convertNodeId2NotExpandedCrossingNodeId(Id<Node> nodeId){  String idString=nodeId.toString();  return idPool.createId(idString,DgCrossingNode.class);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String k=getString(stack);  String r=getString(stack);  if (!Sage.WINDOWS_OS)   return Pooler.EMPTY_STRING_ARRAY;  return Sage.getRegistryNames(Sage.getHKEYForName(r),k);}  }
class C{  public APIPermissionSet(){}  }
class C{  @RequestMapping(value="/upload/single/initiation",method=RequestMethod.POST,consumes={"application/xml","application/json"}) @Secured(SecurityFunctions.FN_UPLOAD_POST) public UploadSingleInitiationResponse initiateUploadSingle(@RequestBody UploadSingleInitiationRequest uploadSingleInitiationRequest){  UploadSingleInitiationResponse uploadSingleInitiationResponse=uploadDownloadService.initiateUploadSingle(uploadSingleInitiationRequest);  for (  BusinessObjectData businessObjectData : Arrays.asList(uploadSingleInitiationResponse.getSourceBusinessObjectData(),uploadSingleInitiationResponse.getTargetBusinessObjectData())) {    BusinessObjectDataKey businessObjectDataKey=businessObjectDataHelper.getBusinessObjectDataKey(businessObjectData);    for (    NotificationEventTypeEntity.EventTypesBdata eventType : Arrays.asList(NotificationEventTypeEntity.EventTypesBdata.BUS_OBJCT_DATA_RGSTN,NotificationEventTypeEntity.EventTypesBdata.BUS_OBJCT_DATA_STTS_CHG)) {      notificationEventService.processBusinessObjectDataNotificationEventAsync(eventType,businessObjectDataKey,businessObjectData.getStatus(),null);    }    for (    StorageUnit storageUnit : businessObjectData.getStorageUnits()) {      notificationEventService.processStorageUnitNotificationEventAsync(NotificationEventTypeEntity.EventTypesStorageUnit.STRGE_UNIT_STTS_CHG,businessObjectDataKey,storageUnit.getStorage().getName(),storageUnit.getStorageUnitStatus(),null);    }  }  return uploadSingleInitiationResponse;}  }
class C{  public ArrayIntCompressed(int size,int leadingClearBits,int trailingClearBits){  init(size,BIT_LENGTH - leadingClearBits - trailingClearBits,trailingClearBits);}  }
class C{  public String compXmlStringAt(byte[] arr,int strOff){  int strLen=arr[strOff + 1] << 8 & 0xff00 | arr[strOff] & 0xff;  char[] chars=new char[strLen];  for (int ii=0; ii < strLen; ii++) {    int p0=strOff + 2 + ii * 2;    if (p0 >= arr.length - 1)     break;    chars[ii]=(char)(((arr[p0 + 1] & 0x00FF) << 8) + (arr[p0] & 0x00FF));  }  return new String(chars);}  }
class C{  public AbstractExportOperation(File archiveFile,IFile mainFile,IN4JSEclipseProject project){  this.targetFile=archiveFile;  this.mainFile=mainFile;  this.project=project;  this.workspace=project.getProject().getWorkspace();  rootLocation=project.getLocation().appendSegment("");}  }
class C{  @Override public boolean supportsMixedCaseQuotedIdentifiers() throws SQLException {  debugCodeCall("supportsMixedCaseQuotedIdentifiers");  String m=conn.getMode();  if (m.equals("MySQL")) {    return false;  }  return true;}  }
class C{  private static Shape leftEdge(BufferedImage image){  GeneralPath path=new GeneralPath();  Point2D p1=null;  Point2D p2=null;  Line2D line=new Line2D.Float();  Point2D p=new Point2D.Float();  int foundPointY=-1;  for (int i=0; i < image.getHeight(); i++) {    for (int j=0; j < image.getWidth(); j++) {      if ((image.getRGB(j,i) & 0xff000000) != 0) {        p=new Point2D.Float(j,i);        foundPointY=i;        break;      }    }    if (foundPointY >= 0) {      if (p2 == null) {        p1=new Point2D.Float(image.getWidth() - 1,foundPointY);        path.moveTo(p1.getX(),p1.getY());        p2=new Point2D.Float();        p2.setLocation(p);      } else {        p2=detectLine(p1,p2,p,line,path);      }    }  }  path.lineTo(p.getX(),p.getY());  if (foundPointY >= 0) {    path.lineTo(image.getWidth() - 1,foundPointY);  }  path.closePath();  return path;}  }
class C{  public void testSetMaxRows() throws Exception {  Statement maxRowsStmt=null;  try {    maxRowsStmt=this.conn.createStatement();    maxRowsStmt.setMaxRows(1);    this.rs=maxRowsStmt.executeQuery("SELECT 1");  }  finally {    if (maxRowsStmt != null) {      maxRowsStmt.close();    }  }}  }
class C{  public static void unregisterMbeans(){  unregisterMbeans(ManagementFactory.getPlatformMBeanServer());}  }
class C{  public boolean free(T value){  return _ringQueue.offer(value);}  }
class C{  public NotificationChain basicSet_lok(LocalArgumentsVariable new_lok,NotificationChain msgs){  LocalArgumentsVariable old_lok=_lok;  _lok=new_lok;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.FUNCTION_DECLARATION__LOK,old_lok,new_lok);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public void query(boolean onlyCurrentRows,int onlyCurrentDays,int maxRows){  m_mTab.query(onlyCurrentRows,onlyCurrentDays,maxRows);  if (!isSingleRow())   vTable.autoSize(true);  activateChilds();}  }
class C{  @Override public EmpiricalDistribution queryProb(Query.ProbQuery query){  LikelihoodWeighting isquery=new LikelihoodWeighting(query,nbSamples,maxSamplingTime);  List<Sample> samples=isquery.getSamples();  return new EmpiricalDistribution(samples);}  }
class C{  public char loadChar(Offset offset){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return (char)0;}  }
class C{  public FloatBuffer put(float[] src,int off,int len){  int length=src.length;  if (off < 0 || len < 0 || (long)off + (long)len > length) {    throw new IndexOutOfBoundsException();  }  if (len > remaining()) {    throw new BufferOverflowException();  }  for (int i=off; i < off + len; i++) {    put(src[i]);  }  return this;}  }
class C{  public static void deleteCollectionLevelSnapshot(SolrZkClient zkClient,String collectionName,String commitName) throws InterruptedException, KeeperException {  String zkPath=getSnapshotMetaDataZkPath(collectionName,Optional.of(commitName));  zkClient.delete(zkPath,-1,true);}  }
class C{  private void sortAndPrintSQL() throws SQLException {  final Vector<String> statements=new Vector<String>(1000,500);  final Vector<String> sortedStatements=new Vector<String>(1000,500);  for (int i=0; i < m_newTables.size(); i++) {    statements.add(m_newTables.get(i).getCreateStatement());  }  for (int i=0; i < m_changedTables.size(); i++) {    if (m_changedTables.get(i).isAlterAdd()) {      statements.add(m_changedTables.get(i).getAlterAddStatement());    } else     if (m_changedTables.get(i).isAlterDrop()) {      statements.add(m_changedTables.get(i).getAlterDropStatement());    } else     if (m_changedTables.get(i).isAlterModify()) {      statements.add(m_changedTables.get(i).getAlterModifyStatement());    }  }  for (int i=0; i < m_constraintsToDrop.size(); i++) {    statements.add(m_constraintsToDrop.get(i).getDropString());  }  for (int i=0; i < m_newConstraints.size(); i++) {    statements.add(m_newConstraints.get(i).getAlterTableString());  }  Vector<String> tempVector=sortStatements(statements);  for (int i=0; i < tempVector.size(); i++) {    sortedStatements.add(tempVector.get(i));  }  sortedStatements.add("COMMIT;");  sortedStatements.add("SET DEFINE OFF;");  statements.clear();  for (int i=0; i < m_newTableEntry.size(); i++) {    statements.add(m_newTableEntry.get(i).replaceAll("\n"," "));  }  tempVector=sortStatements(statements);  for (int i=0; i < tempVector.size(); i++) {    sortedStatements.add(tempVector.get(i));  }  sortedStatements.add("COMMIT;");  sortedStatements.add("SET DEFINE OFF;");  statements.clear();  for (int i=0; i < m_alterADEntry.size(); i++) {    statements.add(m_alterADEntry.get(i).replaceAll("\n"," "));  }  tempVector=sortStatements(statements);  for (int i=0; i < tempVector.size(); i++) {    sortedStatements.add(tempVector.get(i));  }  sortedStatements.add("COMMIT;");  sortedStatements.add("SET DEFINE OFF;");  statements.clear();  for (int i=0; i < m_deleteADEntry.size(); i++) {    statements.add(m_deleteADEntry.get(i).replaceAll("\n"," "));  }  tempVector=sortStatements(statements);  for (int i=0; i < tempVector.size(); i++) {    sortedStatements.add(tempVector.get(i));  }  System.out.println();  System.out.println("---------------------------");  System.out.println("--   SCRIPT STARTS HERE!");  System.out.println("---------------------------");  System.out.println("-- UNABLE TO APPLY THESE STATEMENTS - START");  for (int i=0; i < m_unappliableStatements.size(); i++) {    System.out.println(m_unappliableStatements.get(i));  }  System.out.println("-- UNABLE TO APPLY THESE STATEMENTS - END");  System.out.println();  System.out.println("-- NEW/CHANGED TABLES - NEW/CHANGED AD_ENTRIES");  for (int i=0; i < sortedStatements.size(); i++) {    System.out.println(sortedStatements.get(i));  }  System.out.println();  System.out.println("-- NEW VIEWS");  for (int i=0; i < m_newViews.size(); i++) {    System.out.println(m_newViews.get(i).getCreateStatement());  }  System.out.println();  System.out.println("-- CHANGED VIEWS - but check them first - don't overwrite your customizations...");  for (int i=0; i < m_changedViews.size(); i++) {    System.out.println(m_changedViews.get(i).getCreateStatement());  }  System.out.println();  System.out.println("-- NEW OR CHANGED FUNCTIONS/PROCEDURES");  for (int i=0; i < m_newFunctionStatements.size(); i++) {    System.out.println(m_newFunctionStatements.get(i));  }  System.out.println();  System.out.println("-- DROP FUNCTIONS/PROCEDURES");  for (int i=0; i < m_dropFunctionStatements.size(); i++) {    System.out.println(m_dropFunctionStatements.get(i));  }  System.out.println();  System.out.println("-- DROP TRIGGERS");  for (int i=0; i < m_dropTriggerStatements.size(); i++) {    System.out.println(m_dropTriggerStatements.get(i));  }  System.out.println();  System.out.println("-- DROP INDEXES");  for (int i=0; i < m_dropIndexStatements.size(); i++) {    System.out.println(m_dropIndexStatements.get(i));  }  System.out.println();  System.out.println("-- NEW OR CHANGED INDEXES");  for (int i=0; i < m_newIndexStatements.size(); i++) {    System.out.println(m_newIndexStatements.get(i));  }  System.out.println();  System.out.println("-- PLEASE CHECK THE SEQUENCES BY HAND - USE:");  System.out.println("-- select * from user_sequences;");  System.out.println();  System.out.println(getUpdateVersionStatement());  System.out.println("COMMIT;");}  }
class C{  final private void turn22(IntGrid2D grid,int x,int y){  int p1, p2, p3, p4;  p1=grid.get(grid.stx(x),grid.sty(y));  p2=grid.get(grid.stx(x + 1),grid.sty(y));  p3=grid.get(grid.stx(x + 1),grid.sty(y + 1));  p4=grid.get(grid.stx(x),grid.sty(y + 1));  if (p.r.nextBoolean()) {    grid.set(grid.stx(x),grid.sty(y),p4);    grid.set(grid.stx(x + 1),grid.sty(y),p1);    grid.set(grid.stx(x + 1),grid.sty(y + 1),p2);    grid.set(grid.stx(x),grid.sty(y + 1),p3);  } else {    grid.set(grid.stx(x),grid.sty(y),p2);    grid.set(grid.stx(x + 1),grid.sty(y),p3);    grid.set(grid.stx(x + 1),grid.sty(y + 1),p4);    grid.set(grid.stx(x),grid.sty(y + 1),p1);  }}  }
class C{  public static double magnitude(double[] u){  return Math.sqrt(dot(u,u));}  }
class C{  public String toString(){  return statusString;}  }
class C{  public void chopFrame(int offsetDelta,int k){  numOfEntries++;  output.write(251 - k);  write16(offsetDelta);}  }
class C{  public AsyncHttpClient(boolean fixNoHttpResponseException,int httpPort,int httpsPort){  this(getDefaultSchemeRegistry(fixNoHttpResponseException,httpPort,httpsPort));}  }
class C{  public boolean verify(byte[] signature){  return verify(signature,false);}  }
class C{  public synchronized void reqHistoricalData(int tickerId,Contract contract,String endDateTime,String durationStr,String barSizeSetting,String whatToShow,int useRTH,int formatDate,List<TagValue> chartOptions){  if (!m_connected) {    notConnected();    return;  }  final int VERSION=6;  try {    if (m_serverVersion < 16) {      error(EClientErrors.NO_VALID_ID,EClientErrors.UPDATE_TWS,"  It does not support historical data backfill.");      return;    }    if (m_serverVersion < MIN_SERVER_VER_TRADING_CLASS) {      if (!IsEmpty(contract.m_tradingClass) || (contract.m_conId > 0)) {        error(tickerId,EClientErrors.UPDATE_TWS,"  It does not support conId and tradingClass parameters in reqHistroricalData.");        return;      }    }    send(REQ_HISTORICAL_DATA);    send(VERSION);    send(tickerId);    if (m_serverVersion >= MIN_SERVER_VER_TRADING_CLASS) {      send(contract.m_conId);    }    send(contract.m_symbol);    send(contract.m_secType);    send(contract.m_expiry);    send(contract.m_strike);    send(contract.m_right);    send(contract.m_multiplier);    send(contract.m_exchange);    send(contract.m_primaryExch);    send(contract.m_currency);    send(contract.m_localSymbol);    if (m_serverVersion >= MIN_SERVER_VER_TRADING_CLASS) {      send(contract.m_tradingClass);    }    if (m_serverVersion >= 31) {      send(contract.m_includeExpired ? 1 : 0);    }    if (m_serverVersion >= 20) {      send(endDateTime);      send(barSizeSetting);    }    send(durationStr);    send(useRTH);    send(whatToShow);    if (m_serverVersion > 16) {      send(formatDate);    }    if (BAG_SEC_TYPE.equalsIgnoreCase(contract.m_secType)) {      if (contract.m_comboLegs == null) {        send(0);      } else {        send(contract.m_comboLegs.size());        ComboLeg comboLeg;        for (int i=0; i < contract.m_comboLegs.size(); i++) {          comboLeg=contract.m_comboLegs.get(i);          send(comboLeg.m_conId);          send(comboLeg.m_ratio);          send(comboLeg.m_action);          send(comboLeg.m_exchange);        }      }    }    if (m_serverVersion >= MIN_SERVER_VER_LINKING) {      StringBuilder chartOptionsStr=new StringBuilder();      int chartOptionsCount=chartOptions == null ? 0 : chartOptions.size();      if (chartOptionsCount > 0) {        for (int i=0; i < chartOptionsCount; ++i) {          TagValue tagValue=(TagValue)chartOptions.get(i);          chartOptionsStr.append(tagValue.m_tag);          chartOptionsStr.append("=");          chartOptionsStr.append(tagValue.m_value);          chartOptionsStr.append(";");        }      }      send(chartOptionsStr.toString());    }  } catch (  Exception e) {    error(tickerId,EClientErrors.FAIL_SEND_REQHISTDATA,"" + e);    close();  }}  }
class C{  @Override public String toString(){  return name().toLowerCase();}  }
class C{  public StringBand(int initialCapacity){  if (initialCapacity <= 0) {    throw new IllegalArgumentException("Invalid initial capacity");  }  array=new String[initialCapacity];}  }
class C{  public boolean removeConstraint(ParticleConstraint2D c){  return constraints.remove(c);}  }
class C{  private DoneCallback(GridClientFutureCallback<R,T> cb,GridClientFutureListener<R> lsnr,GridClientFutureAdapter<T> chainedFut){  this.cb=cb;  this.lsnr=lsnr;  this.chainedFut=chainedFut;}  }
class C{  private void addSignatureProfile(SignatureWrapper signature,XmlSignature xmlSignature){  SignatureType signatureType=SignatureType.NA;  String certificateId=signature.getSigningCertificateId();  if (certificateId != null) {    signatureType=getSignatureType(certificateId);  }  xmlSignature.setSignatureLevel(signatureType.name());}  }
class C{  public boolean isArray(){  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:03.708 -0400",hash_original_method="AD50C4AE43C84CAFDA529E78BF7FE7D8",hash_generated_method="C8CCC8804046A2687F8D3D90AEE56A06") public Collection<? extends Certificate> engineGenerateCertificates(InputStream inStream) throws CertificateException {  if (inStream == null) {    throw new CertificateException("inStream == null");  }  ArrayList<Certificate> result=new ArrayList<Certificate>();  try {    if (!inStream.markSupported()) {      inStream=new RestoringInputStream(inStream);    }    byte[] encoding=null;    int second_asn1_tag=-1;    inStream.mark(1);    int ch;    while ((ch=inStream.read()) != -1) {      if (ch == '-') {        encoding=decodePEM(inStream,FREE_BOUND_SUFFIX);      } else       if (ch == 0x30) {        encoding=null;        inStream.reset();        inStream.mark(CERT_CACHE_SEED_LENGTH);      } else {        if (result.size() == 0) {          throw new CertificateException("Unsupported encoding");        } else {          inStream.reset();          return result;        }      }      BerInputStream in=(encoding == null) ? new BerInputStream(inStream) : new BerInputStream(encoding);      second_asn1_tag=in.next();      if (encoding == null) {        inStream.reset();      }      if (second_asn1_tag != ASN1Constants.TAG_C_SEQUENCE) {        if (result.size() == 0) {          break;        } else {          return result;        }      } else {        if (encoding == null) {          result.add(getCertificate(inStream));        } else {          result.add(getCertificate(encoding));        }      }      inStream.mark(1);    }    if (result.size() != 0) {      return result;    } else     if (ch == -1) {      return result;    }    if (second_asn1_tag == ASN1Constants.TAG_OID) {      ContentInfo info=(ContentInfo)((encoding != null) ? ContentInfo.ASN1.decode(encoding) : ContentInfo.ASN1.decode(inStream));      SignedData data=info.getSignedData();      if (data == null) {        throw new CertificateException("Invalid PKCS7 data provided");      }      List<org.apache.harmony.security.x509.Certificate> certs=data.getCertificates();      if (certs != null) {        for (        org.apache.harmony.security.x509.Certificate cert : certs) {          result.add(new X509CertImpl(cert));        }      }      return result;    }    throw new CertificateException("Unsupported encoding");  } catch (  IOException e) {    throw new CertificateException(e);  }}  }
class C{  public NewSessionAction(){  super("New Session");}  }
class C{  private StringBuilder appendIfNotNull(StringBuilder source,String addStr,String delimiter){  if (addStr != null) {    if (addStr.length() == 0) {      delimiter="";    }    return source.append(addStr).append(delimiter);  }  return source;}  }
class C{  public void write(OutStream out) throws IOException {  out.flushBits();  out.writeUBits(5,getBitSize());  out.writeSBits(bitSize,minX);  out.writeSBits(bitSize,maxX);  out.writeSBits(bitSize,minY);  out.writeSBits(bitSize,maxY);  out.flushBits();}  }
class C{  @SuppressWarnings("unused") private void checkCenter(LatLon center){  System.out.println("Testing fromLatLngToPoint using: " + center);  Point2D p=googleMap.fromLatLngToPoint(center.toLatLong());  System.out.println("Testing fromLatLngToPoint result: " + p);  System.out.println("Testing fromLatLngToPoint expected: " + mapComponent.getWidth() / 2 + ", " + mapComponent.getHeight() / 2);  System.out.println("type = " + MarkerType.BROWN.iconPath());}  }
class C{  public BusinessObjectDataAttributeEntity createBusinessObjectDataAttributeEntity(String namespaceCode,String businessObjectDefinitionName,String businessObjectFormatUsage,String businessObjectFormatFileType,Integer businessObjectFormatVersion,String businessObjectDataPartitionValue,List<String> businessObjectDataSubPartitionValues,Integer businessObjectDataVersion,String businessObjectDataAttributeName,String businessObjectDataAttributeValue){  BusinessObjectDataKey businessObjectDataKey=new BusinessObjectDataKey(namespaceCode,businessObjectDefinitionName,businessObjectFormatUsage,businessObjectFormatFileType,businessObjectFormatVersion,businessObjectDataPartitionValue,businessObjectDataSubPartitionValues,businessObjectDataVersion);  return createBusinessObjectDataAttributeEntity(businessObjectDataKey,businessObjectDataAttributeName,businessObjectDataAttributeValue);}  }
class C{  private synchronized boolean containsMapping(Object key,Object value){  int hash=Collections.secondaryHash(key);  HashtableEntry<K,V>[] tab=table;  int index=hash & (tab.length - 1);  for (HashtableEntry<K,V> e=tab[index]; e != null; e=e.next) {    if (e.hash == hash && e.key.equals(key)) {      return e.value.equals(value);    }  }  return false;}  }
class C{  public Setting(Object value,int type,boolean save,String file){  this.value=value;  if (type == MAP) {    this.defaultValue=new HashMap<>((Map)value);  } else   if (type == LIST) {    this.defaultValue=copyCollection((Collection)value);  } else {    this.defaultValue=value;  }  this.save=save;  this.type=type;  this.file=file;}  }
class C{  protected void layoutGraphicModifiers(DrawContext dc,AVList modifiers,OrderedSymbol osym){}  }
class C{  @HLEFunction(nid=0xE1D621D7,version=150,checkInsideInterrupt=true) public int sceNetAdhocInit(){  log.info(String.format("sceNetAdhocInit: using MAC address=%s, nick name='%s'",sceNet.convertMacAddressToString(Wlan.getMacAddress()),sceUtility.getSystemParamNickname()));  if (isInitialized) {    return SceKernelErrors.ERROR_NET_ADHOC_ALREADY_INITIALIZED;  }  isInitialized=true;  return 0;}  }
class C{  public Assignment(List<String> booleanAssigns){  this();  booleanAssigns.stream().forEach(null);}  }
class C{  public void testMergeSameFilterInTwoDocuments() throws Exception {  String srcXml="<web-app>" + "  <filter>" + "    <filter-name>f1</filter-name>"+ "    <filter-class>fclass1</filter-class>"+ "  </filter>"+ "  <filter-mapping>"+ "    <filter-name>f1</filter-name>"+ "    <url-pattern>/f1mapping1</url-pattern>"+ "  </filter-mapping>"+ "</web-app>";  WebXml srcWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(srcXml.getBytes("UTF-8")),null);  String mergeXml="<web-app>" + "  <filter>" + "    <filter-name>f1</filter-name>"+ "    <filter-class>fclass1</filter-class>"+ "  </filter>"+ "  <filter-mapping>"+ "    <filter-name>f1</filter-name>"+ "    <url-pattern>/f1mapping1</url-pattern>"+ "  </filter-mapping>"+ "</web-app>";  WebXml mergeWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(mergeXml.getBytes("UTF-8")),null);  WebXmlMerger merger=new WebXmlMerger(srcWebXml);  merger.mergeFilters(mergeWebXml);  assertTrue(WebXmlUtils.hasFilter(srcWebXml,"f1"));  List<String> filterMappings=WebXmlUtils.getFilterMappings(srcWebXml,"f1");  assertEquals(1,filterMappings.size());  assertEquals("/f1mapping1",filterMappings.get(0));}  }
class C{  public static int countPeriods(String haystack){  return StringUtils.countOccurrencesOf(haystack,".");}  }
class C{  public TwoColumnOutput(Writer out,int leftWidth,int rightWidth,String spacer){  if (out == null) {    throw new NullPointerException("out == null");  }  if (leftWidth < 1) {    throw new IllegalArgumentException("leftWidth < 1");  }  if (rightWidth < 1) {    throw new IllegalArgumentException("rightWidth < 1");  }  if (spacer == null) {    throw new NullPointerException("spacer == null");  }  StringWriter leftWriter=new StringWriter(1000);  StringWriter rightWriter=new StringWriter(1000);  this.out=out;  this.leftWidth=leftWidth;  this.leftBuf=leftWriter.getBuffer();  this.rightBuf=rightWriter.getBuffer();  this.leftColumn=new IndentingWriter(leftWriter,leftWidth);  this.rightColumn=new IndentingWriter(rightWriter,rightWidth,spacer);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodegetfirstchildnull.class,args);}  }
class C{  public void actionPerformed(ActionEvent e){  JTextComponent target=getTextComponent(e);  if ((target != null) && (e != null)) {    if ((!target.isEditable()) || (!target.isEnabled())) {      UIManager.getLookAndFeel().provideErrorFeedback(target);      return;    }    String content=target.getText();    if (content != null && target.getSelectionStart() > 0) {      content=content.substring(0,target.getSelectionStart());    }    if (content != null) {      target.setText(getNextMatch(content));      adaptor.markText(content.length());    }  }}  }
class C{  public void clear(){  super.clear();  LEFT_PARENTHESES="";  RIGHT_PARENTHESES="";}  }
class C{  public void deleteChannel(CumulusChannel jsonChannel){  String jsonString=jsonChannel.toString();  Intent i=new Intent("com.felkertech.cumulustv.RECEIVER");  i.putExtra(INTENT_EXTRA_JSON,jsonString);  i.putExtra(INTENT_EXTRA_ACTION,INTENT_EXTRA_ACTION_DELETE);  sendBroadcast(i);  finish();}  }
class C{  public static String toStringExclude(Object object,Collection excludeFieldNames){  return toStringExclude(object,toNoNullStringArray(excludeFieldNames));}  }
class C{  public StringDict(BufferedReader reader){  String[] lines=PApplet.loadStrings(reader);  keys=new String[lines.length];  values=new String[lines.length];  for (int i=0; i < lines.length; i++) {    String[] pieces=PApplet.split(lines[i],'\t');    if (pieces.length == 2) {      keys[count]=pieces[0];      values[count]=pieces[1];      count++;    }  }}  }
class C{  static <K,V>void writeMap(Map<K,V> map,ObjectOutputStream stream) throws IOException {  stream.writeInt(map.size());  for (  Map.Entry<K,V> entry : map.entrySet()) {    stream.writeObject(entry.getKey());    stream.writeObject(entry.getValue());  }}  }
class C{  public NioDatagramAcceptor(){  this(new DefaultDatagramSessionConfig(),null);}  }
class C{  public final <V>V callWithRetry(Callable<V> callable,Predicate<Throwable> isRetryable){  int failures=0;  while (true) {    try {      return callable.call();    } catch (    Throwable e) {      if (++failures == attempts || !isRetryable.apply(e)) {        throwIfUnchecked(e);        throw new RuntimeException(e);      }      logger.info(e,"Retrying transient error, attempt " + failures);      try {        sleeper.sleep(Duration.millis(pow(2,failures) * 100));      } catch (      InterruptedException e2) {        Thread.currentThread().interrupt();        throwIfUnchecked(e);        throw new RuntimeException(e);      }    }  }}  }
class C{  public int size(){  return n;}  }
class C{  public String toXML(Network network){  StringWriter writer=new StringWriter();  writeXML(network,writer);  writer.flush();  return writer.toString();}  }
class C{  private String parseEntityAttribute(String fieldName){  Matcher m=_fnPattern.matcher(fieldName);  if (m.find()) {    return m.group(1);  }  return null;}  }
class C{  void addScrapView(View scrap,int position,int viewType){  if (viewTypeCount == 1) {    currentScrapViews.put(position,scrap);  } else {    scrapViews[viewType].put(position,scrap);  }  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {    scrap.setAccessibilityDelegate(null);  }}  }
class C{  public AStart(){}  }
class C{  public static void dispose(){  disposeColors();  disposeImages();  disposeFonts();  disposeCursors();}  }
class C{  protected int bends(Geo g1,Geo g2,Geo g3){  double bend=g1.crossNormalize(g2).distance(g3) - (Math.PI / 2.0);  if (Math.abs(bend) < .0001) {    return STRAIGHT;  } else {    if (bend < 0) {      return BENDS_LEFT;    }  }  return BENDS_RIGHT;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.PRIMITIVE_TYPE__DECLARED_ELEMENT_TYPE:    return declaredElementType != null;case TypesPackage.PRIMITIVE_TYPE__ASSIGNMENT_COMPATIBLE:  return assignmentCompatible != null;case TypesPackage.PRIMITIVE_TYPE__AUTOBOXED_TYPE:return autoboxedType != null;}return super.eIsSet(featureID);}  }
class C{  @Description(summary="Create h2client.jar with only the remote JDBC implementation.") public void jarClient(){  compile(true,true,false);  FileList files=files("temp").exclude("temp/org/h2/build/*").exclude("temp/org/h2/dev/*").exclude("temp/org/h2/jaqu/*").exclude("temp/org/h2/java/*").exclude("temp/org/h2/jcr/*").exclude("temp/org/h2/mode/*").exclude("temp/org/h2/samples/*").exclude("temp/org/h2/test/*").exclude("*.bat").exclude("*.sh").exclude("*.txt").exclude("*.DS_Store");  files=excludeTestMetaInfFiles(files);  long kb=jar("bin/h2-client" + getJarSuffix(),files,"temp");  if (kb < 350 || kb > 450) {    throw new RuntimeException("Expected file size 350 - 450 KB, got: " + kb);  }}  }
class C{  public Messages(String name){  this((Messages)null,name);}  }
class C{  public void providesSingletonInScope(){  Binding.this.singletonInScope();  isProvidingSingletonInScope=true;}  }
class C{  public void dispose(){  m_table.getColumn(m_field).removeColumnListener(this);}  }
class C{  public void updateUI(){  super.updateUI();  if (myTree != null) {    myTree.updateUI();  }  LookAndFeel.installColorsAndFont(this,"Tree.background","Tree.foreground","Tree.font");}  }
class C{  public ResourceNotificationException(String message){  super(message);}  }
class C{  public static double variance(double[] vector){  double sum=0, sumSquared=0;  if (vector.length <= 1) {    return 0;  }  for (int i=0; i < vector.length; i++) {    sum+=vector[i];    sumSquared+=(vector[i] * vector[i]);  }  double result=(sumSquared - (sum * sum / (double)vector.length)) / (double)(vector.length - 1);  if (result < 0) {    return 0;  } else {    return result;  }}  }
class C{  @Override public Class<? extends Task> taskClass(){  return IgniteSinkTask.class;}  }
class C{  public String createNode(final String path,final boolean watch,final boolean ephimeral){  String createdNodePath=null;  try {    final Stat nodeStat=zooKeeper.exists(path,watch);    if (nodeStat == null) {      createdNodePath=zooKeeper.create(path,new byte[0],Ids.OPEN_ACL_UNSAFE,(ephimeral ? CreateMode.EPHEMERAL_SEQUENTIAL : CreateMode.PERSISTENT));    } else {      createdNodePath=path;    }  } catch (  KeeperException|InterruptedException e) {    throw new IllegalStateException(e);  }  return createdNodePath;}  }
class C{  static ClassLoader findClassLoader() throws ConfigurationError {  SecuritySupport ss=SecuritySupport.getInstance();  ClassLoader context=ss.getContextClassLoader();  ClassLoader system=ss.getSystemClassLoader();  ClassLoader chain=system;  while (true) {    if (context == chain) {      ClassLoader current=ObjectFactory.class.getClassLoader();      chain=system;      while (true) {        if (current == chain) {          return system;        }        if (chain == null) {          break;        }        chain=ss.getParentClassLoader(chain);      }      return current;    }    if (chain == null) {      break;    }    chain=ss.getParentClassLoader(chain);  }  ;  return context;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean isCellEditable(EventObject anEvent){  if (!m_mField.isEditable(false))   return false;  log.fine(m_mField.getHeader());  if (anEvent instanceof MouseEvent && ((MouseEvent)anEvent).getClickCount() < CLICK_TO_START)   return false;  if (m_editor == null)   createEditor();  return true;}  }
class C{  public void applyAll(Collection<? extends IChange> changes) throws BadLocationException {  final Map<URI,List<IAtomicChange>> changesPerFile=organize(changes);  for (  URI currURI : changesPerFile.keySet()) {    final IXtextDocument document=getDocument(currURI);    applyAllInSameDocument(changesPerFile.get(currURI),document);  }}  }
class C{  public void beginApplyInterval(){  intervalStartMillis=System.currentTimeMillis();  endMillis=intervalStartMillis;  state=TaskState.apply;}  }
class C{  public void updateDataset(CandleDataset source,int seriesIndex,boolean newBar){  if (source == null) {    throw new IllegalArgumentException("Null source (CandleDataset).");  }  for (int i=0; i < this.getSeriesCount(); i++) {    CandleSeries series=this.getSeries(i);    series.updateSeries(source.getSeries(seriesIndex),source.getSeries(seriesIndex).getItemCount() - 1,newBar);  }}  }
class C{  public int optInt(String key){  return this.optInt(key,0);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:28.318 -0500",hash_original_method="FEDEC1668E99CC7AC8B63903F046C2E4",hash_generated_method="270B33800028B49BD2EC75D7757AD67D") @Override protected void onStartLoading(){  if (mCursor != null) {    deliverResult(mCursor);  }  if (takeContentChanged() || mCursor == null) {    forceLoad();  }}  }
class C{  public boolean sameAs(DiskStore other){  if (this.autoCompact != other.getAutoCompact()) {    throw new RuntimeException(LocalizedStrings.DiskStoreAttributesCreation_AUTOCOMPACT_OF_0_IS_NOT_THE_SAME_THIS_1_OTHER_2.toLocalizedString(new Object[]{name,this.autoCompact,other.getAutoCompact()}));  }  if (this.compactionThreshold != other.getCompactionThreshold()) {    throw new RuntimeException(LocalizedStrings.DiskStoreAttributesCreation_COMPACTIONTHRESHOLD_OF_0_IS_NOT_THE_SAME_THIS_1_OTHER_2.toLocalizedString(new Object[]{name,this.compactionThreshold,other.getCompactionThreshold()}));  }  if (this.allowForceCompaction != other.getAllowForceCompaction()) {    throw new RuntimeException(LocalizedStrings.DiskStoreAttributesCreation_ALLOWFORCECOMPACTION_OF_0_IS_NOT_THE_SAME_THIS_1_OTHER_2.toLocalizedString(new Object[]{name,this.allowForceCompaction,other.getAllowForceCompaction()}));  }  if (this.maxOplogSizeInBytes != other.getMaxOplogSize() * 1024 * 1024) {    throw new RuntimeException(LocalizedStrings.DiskStoreAttributesCreation_MAXOPLOGSIZE_OF_0_IS_NOT_THE_SAME_THIS_1_OTHER_2.toLocalizedString(new Object[]{name,this.maxOplogSizeInBytes / 1024 / 1024,other.getMaxOplogSize()}));  }  if (this.timeInterval != other.getTimeInterval()) {    throw new RuntimeException(LocalizedStrings.DiskStoreAttributesCreation_TIMEINTERVAL_OF_0_IS_NOT_THE_SAME_THIS_1_OTHER_2.toLocalizedString(new Object[]{name,this.timeInterval,other.getTimeInterval()}));  }  if (this.writeBufferSize != other.getWriteBufferSize()) {    throw new RuntimeException(LocalizedStrings.DiskStoreAttributesCreation_WRITEBUFFERSIZE_OF_0_IS_NOT_THE_SAME_THIS_1_OTHER_2.toLocalizedString(new Object[]{name,this.writeBufferSize,other.getWriteBufferSize()}));  }  if (this.queueSize != other.getQueueSize()) {    throw new RuntimeException(LocalizedStrings.DiskStoreAttributesCreation_QUEUESIZE_OF_0_IS_NOT_THE_SAME_THIS_1_OTHER_2.toLocalizedString(new Object[]{name,this.queueSize,other.getQueueSize()}));  }  if (!equal(this.diskDirs,other.getDiskDirs())) {    throw new RuntimeException(LocalizedStrings.DiskStoreAttributesCreation_DISK_DIRS_OF_0_ARE_NOT_THE_SAME.toLocalizedString(name));  }  if (!equal(this.diskDirSizes,other.getDiskDirSizes())) {    throw new RuntimeException(LocalizedStrings.DiskStoreAttributesCreation_DISK_DIR_SIZES_OF_0_ARE_NOT_THE_SAME.toLocalizedString(name));  }  if (!equal(getDiskUsageWarningPercentage(),other.getDiskUsageWarningPercentage())) {    throw new RuntimeException(LocalizedStrings.DiskStoreAttributesCreation_DISK_USAGE_WARN_ARE_NOT_THE_SAME.toLocalizedString(name));  }  if (!equal(getDiskUsageCriticalPercentage(),other.getDiskUsageCriticalPercentage())) {    throw new RuntimeException(LocalizedStrings.DiskStoreAttributesCreation_DISK_USAGE_CRITICAL_ARE_NOT_THE_SAME.toLocalizedString(name));  }  return true;}  }
class C{  public JsonWriter name(String name) throws IOException {  if (name == null) {    throw new NullPointerException("name == null");  }  beforeName();  string(name);  return this;}  }
class C{  protected void changeTimeBy(long amount){  changeTimeBy(amount,timeWrap,(amount >= 0 ? TimerStatus.FORWARD : TimerStatus.BACKWARD));}  }
class C{  public void testCreateRenameNoClose() throws Exception {  if (dual)   return;  create(igfs,paths(DIR,SUBDIR),null);  IgfsOutputStream os=null;  try {    os=igfs.create(FILE,true);    igfs.rename(FILE,FILE2);    os.close();  }  finally {    U.closeQuiet(os);  }}  }
class C{  public boolean equals(Object other){  if (other == null)   return false;  if (getClass() != other.getClass()) {    return false;  }  HostPort that=(HostPort)other;  return port == that.port && host.equals(that.host);}  }
class C{  public static void ensureParentFolderHierarchyExists(IFolder folder){  IContainer parent=folder.getParent();  if (parent instanceof IFolder) {    ensureFolderHierarchyExists((IFolder)parent);  }}  }
class C{  private Trees(){  throw new UnsupportedOperationException();}  }
class C{  private Element drawLine(DBIDRef iter){  SVGPath path=new SVGPath();  final SpatialComparable obj=relation.get(iter);  final int dims=proj.getVisibleDimensions();  boolean drawn=false;  int valid=0;  double prevpos=Double.NaN;  for (int i=0; i < dims; i++) {    final int d=proj.getDimForAxis(i);    double minPos=proj.fastProjectDataToRenderSpace(obj.getMin(d),i);    if (minPos != minPos) {      valid=0;      continue;    }    ++valid;    if (valid > 1) {      if (valid == 2) {        path.moveTo(getVisibleAxisX(d - 1),prevpos);      }      path.lineTo(getVisibleAxisX(d),minPos);      drawn=true;    }    prevpos=minPos;  }  valid=0;  for (int i=dims - 1; i >= 0; i--) {    final int d=proj.getDimForAxis(i);    double maxPos=proj.fastProjectDataToRenderSpace(obj.getMax(d),i);    if (maxPos != maxPos) {      valid=0;      continue;    }    ++valid;    if (valid > 1) {      if (valid == 2) {        path.moveTo(getVisibleAxisX(d + 1),prevpos);      }      path.lineTo(getVisibleAxisX(d),maxPos);      drawn=true;    }    prevpos=maxPos;  }  if (!drawn) {    return null;  }  return path.makeElement(svgp);}  }
class C{  public void testExceptionWithEmpty() throws Exception {  ObjectMapper mapper=new ObjectMapper();  try {    Object result=mapper.readValue("    ",Object.class);    fail("Expected an exception, but got result value: " + result);  } catch (  Exception e) {    verifyException(e,EOFException.class,"No content");  }}  }
class C{  @Override public void dropUser(User user,boolean ignore) throws SQLException {  String sql=String.format("drop user %s",user.getLogin());  try {    execute(sql);  } catch (  SQLException e) {    if (!ignore) {      throw e;    } else     if (logger.isDebugEnabled()) {      logger.debug("Drop user failed: " + sql,e);    }  }}  }
class C{  public boolean loadSoundEffects(){  int attempts=3;  LoadSoundEffectReply reply=new LoadSoundEffectReply();synchronized (reply) {    sendMsg(mAudioHandler,MSG_LOAD_SOUND_EFFECTS,SENDMSG_QUEUE,0,0,reply,0);    while ((reply.mStatus == 1) && (attempts-- > 0)) {      try {        reply.wait(SOUND_EFECTS_LOAD_TIMEOUT_MS);      } catch (      InterruptedException e) {        Log.w(TAG,"loadSoundEffects Interrupted while waiting sound pool loaded.");      }    }  }  return (reply.mStatus == 0);}  }
class C{  public static final int gcd(int p,int q){  if (q == 0) {    return p;  }  return gcd(q,p % q);}  }
class C{  public static void sort(int[] keys,int[] values,int offset,int length){  hybridsort(keys,values,offset,offset + length - 1);}  }
class C{  public boolean isRegistered(ObjectName name){  return mbsInterceptor.isRegistered(name);}  }
class C{  private void startItemListItem(StringBuilder result,String rootId,String itemId){  result.append("<div class=\"subtree\">");  result.append("<div class=\"alone " + itemId + "\" id=\"alone_"+ rootId+ ":"+ itemId+ "\">");}  }
class C{  void write(ImageOutputStream ios) throws IOException {}  }
class C{  public PatternEveryExpr(){}  }
class C{  private boolean tryQueueCurrentBuffer(long elapsedWaiting){  if (currentBuffer.isEmpty())   return true;  if (isOpen && neverPubQueue.size() < neverPubCapacity) {    neverPubQueue.add(currentBuffer);    totalQueuedRecords.addAndGet(currentBuffer.sizeRecords());    totalQueuedBuffers.incrementAndGet();    onQueueBufferSuccess(currentBuffer,elapsedWaiting);    currentBuffer=new RecordBuffer<>(flow);    return true;  } else   if (elapsedWaiting > 0) {    onQueueBufferTimeout(currentBuffer,elapsedWaiting);    return false;  } else   return false;}  }
class C{  private void writeKeysWithPrefix(String prefix,String exclude){  for (  String key : keys) {    if (key.startsWith(prefix) && !key.startsWith(exclude)) {      ps.println(key + "=" + prop.getProperty(key));    }  }  ps.println();}  }
class C{  public ProtocolInfo(String name,Collection<Form> connectionForms,Collection<Form> sharingProfileForms){  this.name=name;  this.connectionForms=connectionForms;  this.sharingProfileForms=sharingProfileForms;}  }
class C{  public Prepared prepare(String sql){  Prepared p=parse(sql);  p.prepare();  if (currentTokenType != END) {    throw getSyntaxError();  }  return p;}  }
class C{  void analyze(boolean verbose){  if (verbose) {    if (traces.length > 1)     System.out.println("Combining " + traces.length + " traces.");  }  final Tree tree0=getTree(0);  double[][] changed=new double[tree0.getNodeCount()][tree0.getNodeCount()];  double[] rateConditionalOnChange=new double[tree0.getNodeCount()];  boolean changesFound=false;  cladeSet=new CladeSet(tree0);  treeSet=new FrequencySet<String>();  treeSet.add(Tree.Utils.uniqueNewick(tree0,tree0.getRoot()));  final int reportRate=60;  for (  TreeTrace trace : traces) {    final int treeCount=trace.getTreeCount(burnin * trace.getStepSize());    final double stepSize=treeCount / (double)reportRate;    int counter=1;    if (verbose) {      System.out.println("Analyzing " + treeCount + " trees...");      System.out.println("0              25             50             75            100");      System.out.println("|--------------|--------------|--------------|--------------|");      System.out.print("*");    }    for (int i=1; i < treeCount; i++) {      Tree tree=trace.getTree(i,burnin * trace.getStepSize());      for (int j=0; j < tree.getNodeCount(); j++) {        if (tree.getNode(j) != tree.getRoot() && tree.getNodeAttribute(tree.getNode(j),"changed") != null) {          changesFound=true;          final Object o=tree.getNodeAttribute(tree.getNode(j),"changed");          if (o != null) {            boolean ch=getChanged(tree,j);            if (ch) {              rateConditionalOnChange[j]+=(Double)tree.getNodeAttribute(tree.getNode(j),"rate");            }            for (int k=0; k < tree.getNodeCount(); k++) {              if (tree.getNode(k) != tree.getRoot()) {                changed[j][k]+=(ch && getChanged(tree,k)) ? 1 : 0;              }            }          }        }      }      cladeSet.add(tree);      treeSet.add(Tree.Utils.uniqueNewick(tree,tree.getRoot()));      if (verbose && i >= (int)Math.round(counter * stepSize) && counter <= reportRate) {        System.out.print("*");        System.out.flush();        counter+=1;      }    }    if (verbose) {      System.out.println("*");    }  }  if (changesFound) {    for (int j=0; j < tree0.getNodeCount(); j++) {      System.out.println(j + "\t" + rateConditionalOnChange[j]);    }    System.out.println();    for (int j=0; j < tree0.getNodeCount(); j++) {      for (int k=0; k < tree0.getNodeCount(); k++) {        System.out.print(changed[j][k] + "\t");      }      System.out.println();    }  }}  }
class C{  public void logging(String msg1,String msg2,String msg3){  System.out.print(msg1);  System.out.print(" ");  System.out.print(msg2);  System.out.print(" ");  System.out.println(msg3);}  }
class C{  public void initQueryStringHandlers(){  this.transport=new SimpleTargetedChain();  this.transport.setOption("qs.list","org.apache.axis.transport.http.QSListHandler");  this.transport.setOption("qs.method","org.apache.axis.transport.http.QSMethodHandler");  this.transport.setOption("qs.wsdl","org.apache.axis.transport.http.QSWSDLHandler");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:42.071 -0500",hash_original_method="236CE70381CAE691CF8D03F3D0A7E2E8",hash_generated_method="34048EFAD324F63AAF648818713681BB") public static String toUpperCase(String string){  boolean changed=false;  char[] chars=string.toCharArray();  for (int i=0; i != chars.length; i++) {    char ch=chars[i];    if ('a' <= ch && 'z' >= ch) {      changed=true;      chars[i]=(char)(ch - 'a' + 'A');    }  }  if (changed) {    return new String(chars);  }  return string;}  }
class C{  HTMLForm(HTMLComponent htmlC,String action,String method,String encType){  this.htmlC=htmlC;  this.action=htmlC.convertURL(action);  this.encType=encType;  if (htmlC.getHTMLCallback() != null) {    int linkProps=htmlC.getHTMLCallback().getLinkProperties(htmlC,this.action);    if ((linkProps & HTMLCallback.LINK_FORBIDDEN) != 0) {      this.action=null;    }  }  this.isPostMethod=((method != null) && (method.equalsIgnoreCase("post")));}  }
class C{  public CurlInterceptor(Loggable logger,long limit){  this.logger=logger;  this.limit=limit;}  }
class C{  @Override public String toString(){  return String.valueOf(value);}  }
class C{  public void unRegisterImpulseConstraint(ImpulseConstraint con){  collisionResponseRows-=((ImpulseConstraint)con).GetCollisionResponseRows();  collisions.remove(con);}  }
class C{  Index(Node<K,V> node,Index<K,V> down,Index<K,V> right){  this.node=node;  this.down=down;  this.right=right;}  }
class C{  @Override public void run(){  amIActive=true;  String rasterHeader=null;  String distributionType=null;  int numberOfClasses=-1;  String statsFileName=null;  int numCols, numRows;  int col, row;  double value;  List<Double> values=new ArrayList<>();  String str;  float progress=0;  int index;  int h;  FileWriter streamWriter=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      rasterHeader=args[i];    } else     if (i == 1) {      distributionType=args[i].toLowerCase();    } else     if (i == 2) {      if (!args[i].toLowerCase().equals("not specified")) {        numberOfClasses=Integer.parseInt(args[i]);      }    } else     if (i == 3) {      statsFileName=args[i];    }  }  if ((rasterHeader == null) || (statsFileName == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  if ((!distributionType.equals("complete")) & (numberOfClasses <= 0)) {    showFeedback("Specify the number of classes (should be a value larger then 0).");    return;  }  try {    raster=new WhiteboxRaster(rasterHeader,"r");    numRows=raster.getNumberRows();    numCols=raster.getNumberColumns();    streamWriter=new FileWriter(statsFileName);    str="Distribution type: " + distributionType + System.lineSeparator();    streamWriter.write(str);switch (distributionType) {case "complete":      values=SortGridValues(raster);    updateProgress("Writing output:",0);  str="Value" + "\t" + "Cum. Rel. Freq."+ System.lineSeparator();streamWriter.write(str);for (int i=0; i < values.size(); i++) {str=values.get(i) + "\t" + (((float)i + 1) / values.size())+ System.lineSeparator();streamWriter.write(str);if (cancelOp) {  cancelOperation();  return;}progress=(float)(100f * i / (values.size() - 1));updateProgress("Writing output:",(int)progress);}break;case "n classes with equal class width":List<Integer> distri=new ArrayList<>();List<Double> upper=new ArrayList<>();for (int i=1; i <= numberOfClasses; i++) {distri.add(0);upper.add(raster.getMinimumValue() + i * (raster.getMaximumValue() - raster.getMinimumValue()) / numberOfClasses);}updateProgress("Computing distribution:",0);for (row=0; row < numRows; row++) {for (col=0; col < numCols; col++) {value=raster.getValue(row,col);if (value != raster.getNoDataValue()) {h=0;while (value > upper.get(h)) {h=h + 1;}if (h <= numberOfClasses) {distri.set(h,distri.get(h) + 1);}}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (numRows - 1));updateProgress("Computing distribution:",(int)progress);}int sum=0;float cumu;for (int i=0; i < numberOfClasses; i++) {sum=sum + distri.get(i);}updateProgress("Writing output:",0);str="Value" + "\t" + "Rel. Freq."+ "\t"+ "Cum. Rel. Freq."+ System.lineSeparator();streamWriter.write(str);if (sum > 0) {cumu=0;for (int i=0; i < numberOfClasses; i++) {cumu=cumu + (float)distri.get(i) / sum;str=upper.get(i) + "\t" + (float)distri.get(i) / sum + "\t" + cumu + System.lineSeparator();streamWriter.write(str);if (cancelOp) {cancelOperation();return;}progress=(float)(100f * i / numberOfClasses);updateProgress("Writing output:",(int)progress);}}break;case "n classes with equal class size":values=SortGridValues(raster);updateProgress("Writing output:",0);str="Cum. Rel. Freq." + "\t" + "Value"+ System.lineSeparator();streamWriter.write(str);for (int i=1; i <= numberOfClasses; i++) {index=(int)((float)i / numberOfClasses * values.size()) - 1;if (index < 0) {index=0;}str=((float)index + 1) / values.size() + "\t" + values.get(index) + System.lineSeparator();streamWriter.write(str);progress=(float)(100f * i / numberOfClasses);updateProgress("Writing output:",(int)progress);}break;}raster.close();streamWriter.close();} catch (Exception e) {showFeedback(e.getMessage());} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public boolean isInBoundsX(float x){  if (isInBoundsLeft(x) && isInBoundsRight(x))   return true; else   return false;}  }
class C{  public T caseAnonymous_constraint_1_(Anonymous_constraint_1_ object){  return null;}  }
class C{  public CProjectLoaderReporter(final ListenerProvider<IProjectListener> listeners){  m_listeners=listeners;}  }
class C{  public String[] queryUniqueIdentifiersForLuns(String arrayUniqueId) throws InvalidArgument, NotFound, InvalidSession, StorageFault, NotImplemented {  final String methodName="queryUniqueIdentifiersForLuns(): ";  log.info(methodName + "Entry with arrayUniqueId[" + arrayUniqueId+ "]");  sslUtil.checkHttpRequest(true,true);  SOSManager sosManager=contextManager.getSOSManager();  String[] ids=sosManager.queryUniqueIdentifiersForLuns(arrayUniqueId);  log.info(methodName + "Exit returning ids of size[" + ids.length+ "]");  return ids;}  }
class C{  @Override public boolean onCreateOptionsMenu(Menu menu){  mOpsOptionsMenu=menu;  MenuInflater inflater=getMenuInflater();  inflater.inflate(R.menu.ops_options_menu,menu);  return true;}  }
class C{  protected PackageImpl(){  super();}  }
class C{  public void fillAttributeSet(Set attrSet){  attrSet.add("lang");}  }
class C{  public void addColumn(final String columnFamily,final String columnQualifier){  Set<String> columns=this.columnFamilies.get(columnFamily);  if (columns == null) {    columns=new HashSet<String>();  }  columns.add(columnQualifier);  this.columnFamilies.put(columnFamily,columns);}  }
class C{  public static Field<String> ofString(String name,String description){  return new Field<>(name,String.class,description);}  }
class C{  public OMPoint(double lat,double lon,int radius){  setRenderType(RENDERTYPE_LATLON);  set(lat,lon);  this.radius=radius;}  }
class C{  private void saveMicroAgents(final IScope scope,final IMacroAgent agent) throws GamaRuntimeException {  innerPopulations=new THashMap<String,List<SavedAgent>>();  for (  final IPopulation<? extends IAgent> microPop : agent.getMicroPopulations()) {    final List<SavedAgent> savedAgents=new ArrayList<SavedAgent>();    final Iterator<? extends IAgent> it=microPop.iterator();    while (it.hasNext()) {      savedAgents.add(new SavedAgent(scope,it.next()));    }    innerPopulations.put(microPop.getSpecies().getName(),savedAgents);  }}  }
class C{  public GenerationResult(Shell parent,int style,IPath location,final IResource target){  super(parent,style);  this.location=location;  this.targetResource=target;  setText("EvoSuite Result");}  }
class C{  public void run(){  ActivationLibrary.deactivate(this,getID());}  }
class C{  private static a createImageLink(String AD_Language,String name,String js_command,boolean enabled,boolean pressed){  a img=new a("#",createImage(AD_Language,name));  if (!pressed || !enabled)   img.setID("imgButtonLink"); else   img.setID("imgButtonPressedLink");  if (js_command == null)   js_command="'Submit'";  if (js_command.length() > 0 && enabled) {    if (js_command.startsWith("startPopup"))     img.setOnClick(js_command); else     img.setOnClick("SubmitForm('" + name + "', "+ js_command+ ",'toolbar');return false;");  }  img.setClass("ToolbarButton");  img.setOnMouseOver("window.status='" + name + "';return true;");  img.setOnMouseOut("window.status='';return true;");  img.setOnBlur("this.hideFocus=false");  return img;}  }
class C{  public CassandraStatus(CassandraMode mode,boolean joined,boolean rpcRunning,boolean nativeTransportRunning,boolean gossipInitialized,boolean gossipRunning,String hostId,String endpoint,int tokenCount,String dataCenter,String rack,String version){  this.mode=mode;  this.joined=joined;  this.rpcRunning=rpcRunning;  this.nativeTransportRunning=nativeTransportRunning;  this.gossipInitialized=gossipInitialized;  this.gossipRunning=gossipRunning;  this.hostId=hostId;  this.endpoint=endpoint;  this.tokenCount=tokenCount;  this.dataCenter=dataCenter;  this.rack=rack;  this.version=version;}  }
class C{  public void checkDataSource(Map<String,ModelEntity> modelEntities,List<String> messages,boolean addMissing) throws GenericEntityException {  genericDAO.checkDb(modelEntities,messages,addMissing);}  }
class C{  public static HashMap<String,String> string2HashMap(String paramString){  HashMap<String,String> params=new HashMap<>();  for (  String keyValue : paramString.split(" *& *")) {    String[] pairs=keyValue.split(" *= *",2);    params.put(pairs[0],pairs.length == 1 ? "" : pairs[1]);  }  return params;}  }
class C{  @LargeTest public void testMediaVideoItemRenderingModes() throws Exception {  final String videoItemFileName=INPUT_FILE_PATH + "H263_profile0_176x144_15fps_256kbps_AACLC_32kHz_128kbps_s_0_26.3gp";  final int videoItemRenderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  boolean flagForException=false;  final MediaVideoItem mediaVideoItem1=mVideoEditorHelper.createMediaItem(mVideoEditor,"mediaVideoItem1",videoItemFileName,videoItemRenderingMode);  mVideoEditor.addMediaItem(mediaVideoItem1);  mediaVideoItem1.setRenderingMode(MediaItem.RENDERING_MODE_CROPPING);  assertEquals("MediaVideo Item rendering Mode",MediaItem.RENDERING_MODE_CROPPING,mediaVideoItem1.getRenderingMode());  try {    mediaVideoItem1.setRenderingMode(MediaItem.RENDERING_MODE_CROPPING + 911);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Media Item Invalid rendering Mode",flagForException);  flagForException=false;  try {    mediaVideoItem1.setRenderingMode(MediaItem.RENDERING_MODE_BLACK_BORDER - 11);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Media Item Invalid rendering Mode",flagForException);  assertEquals("MediaVideo Item rendering Mode",MediaItem.RENDERING_MODE_CROPPING,mediaVideoItem1.getRenderingMode());  mediaVideoItem1.setRenderingMode(MediaItem.RENDERING_MODE_STRETCH);  assertEquals("MediaVideo Item rendering Mode",MediaItem.RENDERING_MODE_STRETCH,mediaVideoItem1.getRenderingMode());}  }
class C{  public void visitTree(JCTree tree){}  }
class C{  private EventLogControlPanel createControls(){  EventLogControlPanel c=new EventLogControlPanel();  c.addHeading("connections");  conUpCheck=c.addControl("up");  conDownCheck=c.addControl("down");  c.addHeading("messages");  msgCreateCheck=c.addControl("created");  msgTransferStartCheck=c.addControl("started relay");  msgRelayCheck=c.addControl("relayed");  msgDeliveredCheck=c.addControl("delivered");  msgRemoveCheck=c.addControl("removed");  msgDropCheck=c.addControl("dropped");  msgAbortCheck=c.addControl("aborted");  return c;}  }
class C{  @Override public String type(){  return type;}  }
class C{  public void test_getIterator$Ljava_text_AttributedCharacterIterator$AttributeII(){  String test="Test string";  try {    Map<AttributedCharacterIterator.Attribute,String> hm=new HashMap<AttributedCharacterIterator.Attribute,String>();    AttributedCharacterIterator.Attribute[] aci=new AttributedCharacterIterator.Attribute[3];    aci[0]=new TestAttributedCharacterIteratorAttribute("att1");    aci[1]=new TestAttributedCharacterIteratorAttribute("att2");    aci[2]=new TestAttributedCharacterIteratorAttribute("att3");    hm.put(aci[0],"value1");    hm.put(aci[1],"value2");    AttributedString attrString=new AttributedString(test);    attrString.addAttributes(hm,2,4);    AttributedCharacterIterator it=attrString.getIterator(aci,1,5);    assertTrue("Incorrect iteration on AttributedString",it.getAttribute(aci[0]) == null);    assertTrue("Incorrect iteration on AttributedString",it.getAttribute(aci[1]) == null);    assertTrue("Incorrect iteration on AttributedString",it.getAttribute(aci[2]) == null);    it.next();    assertTrue("Incorrect iteration on AttributedString",it.getAttribute(aci[0]).equals("value1"));    assertTrue("Incorrect iteration on AttributedString",it.getAttribute(aci[1]).equals("value2"));    assertTrue("Incorrect iteration on AttributedString",it.getAttribute(aci[2]) == null);    try {      attrString.getIterator(aci,-1,5);      fail("IllegalArgumentException is not thrown.");    } catch (    IllegalArgumentException iae) {    }    try {      attrString.getIterator(aci,6,5);      fail("IllegalArgumentException is not thrown.");    } catch (    IllegalArgumentException iae) {    }    try {      attrString.getIterator(aci,3,2);      fail("IllegalArgumentException is not thrown.");    } catch (    IllegalArgumentException iae) {    }  } catch (  Exception e) {    fail("Unexpected exceptiption " + e.toString());  }}  }
class C{  private void newplan(TransformationPlan plan){  if (plan.replaces(this.plan)) {    this.plan=plan;  }}  }
class C{  private SmallContingencyTables buildSmallContingencyTables(){  Set<String> allLabelSet=new TreeSet<String>();  for (  SingleOutcome outcome : id2Outcome.getOutcomes()) {    allLabelSet.addAll(outcome.getLabels());  }  List<String> labelList=new ArrayList<String>(allLabelSet);  int numberOfLabels=labelList.size();  double counterIncreaseValue=1.0;  SmallContingencyTables smallContingencyTables=new SmallContingencyTables(labelList);  for (int allLabelsClassId=0; allLabelsClassId < numberOfLabels; allLabelsClassId++) {    for (    SingleOutcome outcome : id2Outcome.getOutcomes()) {      int localClassId=outcome.getReverseLabelMapping(labelList).get(allLabelsClassId);      double threshold=outcome.getBipartitionThreshold();      double goldValue;      double predictionValue;      if (localClassId == -1) {        goldValue=0.;        predictionValue=0.;      } else {        goldValue=outcome.getGoldstandard()[localClassId];        predictionValue=outcome.getPrediction()[localClassId];      }      if (goldValue >= threshold) {        if (predictionValue >= threshold) {          smallContingencyTables.addTruePositives(allLabelsClassId,counterIncreaseValue);        } else {          smallContingencyTables.addFalseNegatives(allLabelsClassId,counterIncreaseValue);        }      } else {        if (predictionValue >= threshold) {          smallContingencyTables.addFalsePositives(allLabelsClassId,counterIncreaseValue);        } else {          smallContingencyTables.addTrueNegatives(allLabelsClassId,counterIncreaseValue);        }      }    }  }  return smallContingencyTables;}  }
class C{  protected String doIt() throws Exception {  MRfQ rfq=new MRfQ(getCtx(),p_C_RfQ_ID,get_TrxName());  if (rfq.get_ID() == 0)   throw new IllegalArgumentException("No RfQ found");  log.info(rfq.toString());  MRfQResponse[] responses=rfq.getResponses(true,true);  log.config("#Responses=" + responses.length);  if (responses.length == 0)   throw new IllegalArgumentException("No completed RfQ Responses found");  for (int i=0; i < responses.length; i++) {    MRfQResponse response=responses[i];    if (!response.isSelectedWinner())     continue;    MBPartner bp=new MBPartner(getCtx(),response.getC_BPartner_ID(),get_TrxName());    log.config("Winner=" + bp);    MOrder order=new MOrder(getCtx(),0,get_TrxName());    order.setIsSOTrx(false);    if (p_C_DocType_ID != 0)     order.setC_DocTypeTarget_ID(p_C_DocType_ID); else     order.setC_DocTypeTarget_ID();    order.setBPartner(bp);    order.setC_BPartner_Location_ID(response.getC_BPartner_Location_ID());    order.setSalesRep_ID(rfq.getSalesRep_ID());    if (response.getDateWorkComplete() != null)     order.setDatePromised(response.getDateWorkComplete()); else     if (rfq.getDateWorkComplete() != null)     order.setDatePromised(rfq.getDateWorkComplete());    order.saveEx();    MRfQResponseLine[] lines=response.getLines(false);    for (int j=0; j < lines.length; j++) {      MRfQResponseLine line=lines[j];      if (!line.isActive())       continue;      MRfQResponseLineQty[] qtys=line.getQtys(false);      for (int k=0; k < qtys.length; k++) {        MRfQResponseLineQty qty=qtys[k];        if (qty.getRfQLineQty().isActive() && qty.getRfQLineQty().isPurchaseQty()) {          MOrderLine ol=new MOrderLine(order);          ol.setM_Product_ID(line.getRfQLine().getM_Product_ID(),qty.getRfQLineQty().getC_UOM_ID());          ol.setDescription(line.getDescription());          ol.setQty(qty.getRfQLineQty().getQty());          BigDecimal price=qty.getNetAmt();          ol.setPrice();          ol.setPrice(price);          ol.saveEx();        }      }    }    response.setC_Order_ID(order.getC_Order_ID());    response.saveEx();    return order.getDocumentNo();  }  int noOrders=0;  for (int i=0; i < responses.length; i++) {    MRfQResponse response=responses[i];    MBPartner bp=null;    MOrder order=null;    MRfQResponseLine[] lines=response.getLines(false);    for (int j=0; j < lines.length; j++) {      MRfQResponseLine line=lines[j];      if (!line.isActive() || !line.isSelectedWinner())       continue;      if (bp == null || bp.getC_BPartner_ID() != response.getC_BPartner_ID()) {        bp=new MBPartner(getCtx(),response.getC_BPartner_ID(),get_TrxName());        order=null;      }      log.config("Line=" + line + ", Winner="+ bp);      if (order == null) {        order=new MOrder(getCtx(),0,get_TrxName());        order.setIsSOTrx(false);        order.setC_DocTypeTarget_ID();        order.setBPartner(bp);        order.setC_BPartner_Location_ID(response.getC_BPartner_Location_ID());        order.setSalesRep_ID(rfq.getSalesRep_ID());        order.saveEx();        noOrders++;        addLog(0,null,null,order.getDocumentNo());      }      MRfQResponseLineQty[] qtys=line.getQtys(false);      for (int k=0; k < qtys.length; k++) {        MRfQResponseLineQty qty=qtys[k];        if (qty.getRfQLineQty().isActive() && qty.getRfQLineQty().isPurchaseQty()) {          MOrderLine ol=new MOrderLine(order);          ol.setM_Product_ID(line.getRfQLine().getM_Product_ID(),qty.getRfQLineQty().getC_UOM_ID());          ol.setDescription(line.getDescription());          ol.setQty(qty.getRfQLineQty().getQty());          BigDecimal price=qty.getNetAmt();          ol.setPrice();          ol.setPrice(price);          ol.saveEx();        }      }    }    if (order != null) {      response.setC_Order_ID(order.getC_Order_ID());      response.saveEx();    }  }  return "#" + noOrders;}  }
class C{  public String commandTopic(String command){  if (command == null) {    command="+";  }  return cmdTopic.replace("{COMMAND}",command);}  }
class C{  public static boolean hasExtension(String extension){  if (TextUtils.isEmpty(extension)) {    return false;  }  return extensionToMimeTypeMap.containsKey(extension);}  }
class C{  @Before public void onBefore(){  tut=new TransportUnitType("TUT");  loc1=new Location(new LocationPK("AREA","ASL","X","Y","Z"));  loc2=new Location(new LocationPK("ARE2","ASL2","X2","Y2","Z2"));  product=new Product("tttt");  entityManager.persist(product);  entityManager.persist(tut);  entityManager.persist(loc1);  entityManager.persist(loc2);  tu=new TransportUnit("TEST");  tu.setTransportUnitType(tut);  tu.setActualLocation(loc1);  entityManager.persist(tu);  entityManager.flush();}  }
class C{  public void beforeRerunningIndexCreationQuery(){}  }
class C{  public float buffered(){  return totalSize > 0 ? Futures.getUnchecked(response).cache.cacheSize() / (float)totalSize : -1;}  }
class C{  @Override public boolean accept(File dir,String name){  return accept(new File(dir,name));}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public boolean isFieldPresent(String field){  return fields.containsKey(field);}  }
class C{  public static String mapToStr(Map<? extends Object,? extends Object> map){  if (map == null)   return null;  StringBuilder buf=new StringBuilder();  boolean first=true;  for (  Map.Entry<? extends Object,? extends Object> entry : map.entrySet()) {    Object key=entry.getKey();    Object value=entry.getValue();    if (!(key instanceof String) || !(value instanceof String))     continue;    String encodedName=null;    try {      encodedName=URLEncoder.encode((String)key,"UTF-8");    } catch (    UnsupportedEncodingException e) {      Debug.logError(e,module);    }    String encodedValue=null;    try {      encodedValue=URLEncoder.encode((String)value,"UTF-8");    } catch (    UnsupportedEncodingException e) {      Debug.logError(e,module);    }    if (first)     first=false; else     buf.append("|");    buf.append(encodedName);    buf.append("=");    buf.append(encodedValue);  }  return buf.toString();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:42.074 -0500",hash_original_method="002C3CFFC816A38E005543BB54E228FD",hash_generated_method="24D6A751F50FC61EC42FBA4D0FC608F4") public static String toLowerCase(String string){  boolean changed=false;  char[] chars=string.toCharArray();  for (int i=0; i != chars.length; i++) {    char ch=chars[i];    if ('A' <= ch && 'Z' >= ch) {      changed=true;      chars[i]=(char)(ch - 'A' + 'a');    }  }  if (changed) {    return new String(chars);  }  return string;}  }
class C{  public String numberToWords(int num){  if (num == 0) {    return LESS_THAN_TWENTY[0];  }  int i=0;  StringBuilder res=new StringBuilder();  while (num > 0) {    if (num % 1000 != 0) {      res.insert(0," ");      res.insert(0,THOUSANDS[i]);      res.insert(0,helper(num % 1000));    }    num/=1000;    i++;  }  return res.toString().trim();}  }
class C{  public boolean hasLat(){  return super.hasAttribute(LAT);}  }
class C{  public void test_ConstructorIF(){  HashSet hs2=new HashSet(5,(float)0.5);  assertEquals("Created incorrect HashSet",0,hs2.size());  try {    new HashSet(0,0);  } catch (  IllegalArgumentException e) {    return;  }  fail("Failed to throw IllegalArgumentException for initial load factor <= 0");}  }
class C{  private int emitCharMapArray(){  CharClasses cl=parser.getCharClasses();  if (cl.getMaxCharCode() < 256) {    emitCharMapArrayUnPacked();    return 0;  }  intervals=cl.getIntervals();  println("");  println("  /** ");  println("   * Translates characters to character classes");  println("   */");  println("  private static final String ZZ_CMAP_PACKED = ");  int n=0;  print("    \"");  int i=0, numPairs=0;  int count, value;  while (i < intervals.length) {    count=intervals[i].end - intervals[i].start + 1;    value=colMap[intervals[i].charClass];    while (count > 0xFFFF) {      printUC(0xFFFF);      printUC(value);      count-=0xFFFF;      numPairs++;      n++;    }    numPairs++;    printUC(count);    printUC(value);    if (i < intervals.length - 1) {      if (++n >= 10) {        println("\"+");        print("    \"");        n=0;      }    }    i++;  }  println("\";");  println();  println("  /** ");  println("   * Translates characters to character classes");  println("   */");  println("  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);");  println();  return numPairs;}  }
class C{  public int size(){  return mSize;}  }
class C{  public void depends(int parent,int child){  dag.addNode(child);  dag.addNode(parent);  dag.addEdge(parent,child);}  }
class C{  public DiscreteTransfer(int[] tableValues){  this.tableValues=tableValues;  this.n=tableValues.length;}  }
class C{  public static final float roundTo(float val,float prec){  return floor(val / prec + 0.5f) * prec;}  }
class C{  public static <K,V>List<KeyValue<K,V>> readKeyValues(String topic,Properties consumerConfig,int maxMessages){  KafkaConsumer<K,V> consumer=new KafkaConsumer<>(consumerConfig);  consumer.subscribe(Collections.singletonList(topic));  int pollIntervalMs=100;  int maxTotalPollTimeMs=2000;  int totalPollTimeMs=0;  List<KeyValue<K,V>> consumedValues=new ArrayList<>();  while (totalPollTimeMs < maxTotalPollTimeMs && continueConsuming(consumedValues.size(),maxMessages)) {    totalPollTimeMs+=pollIntervalMs;    ConsumerRecords<K,V> records=consumer.poll(pollIntervalMs);    for (    ConsumerRecord<K,V> record : records) {      consumedValues.add(new KeyValue<>(record.key(),record.value()));    }  }  consumer.close();  return consumedValues;}  }
class C{  private int segment(Object key){  return Math.abs(key.hashCode() % size);}  }
class C{  private void handleStateLeaving(InetAddress endpoint){  Collection<Token> tokens=getTokensFor(endpoint);  if (logger.isDebugEnabled())   logger.debug("Node {} state leaving, tokens {}",endpoint,tokens);  if (!tokenMetadata.isMember(endpoint)) {    logger.info("Node {} state jump to leaving",endpoint);    tokenMetadata.updateNormalTokens(tokens,endpoint);  } else   if (!tokenMetadata.getTokens(endpoint).containsAll(tokens)) {    logger.warn("Node {} 'leaving' token mismatch. Long network partition?",endpoint);    tokenMetadata.updateNormalTokens(tokens,endpoint);  }  tokenMetadata.addLeavingEndpoint(endpoint);  PendingRangeCalculatorService.instance.update();}  }
class C{  public MAttributeInstance(Properties ctx,int M_Attribute_ID,int M_AttributeSetInstance_ID,BigDecimal BDValue,String trxName){  super(ctx,0,trxName);  setM_Attribute_ID(M_Attribute_ID);  setM_AttributeSetInstance_ID(M_AttributeSetInstance_ID);  setValueNumber(BDValue);}  }
class C{  @Override public boolean supportsPositionedUpdate(){  debugCodeCall("supportsPositionedUpdate");  return true;}  }
class C{  @SuppressWarnings("unchecked") private boolean prepareMapping(String index,Map<String,Object> defaultMappings){  boolean success=true;  for (  Map.Entry<String,Object> stringObjectEntry : defaultMappings.entrySet()) {    Map<String,Object> mapping=(Map<String,Object>)stringObjectEntry.getValue();    if (mapping == null) {      throw new RuntimeException("type mapping not defined");    }    PutMappingRequestBuilder putMappingRequestBuilder=client.admin().indices().preparePutMapping().setIndices(index);    putMappingRequestBuilder.setType(stringObjectEntry.getKey());    putMappingRequestBuilder.setSource(mapping);    if (log.isLoggable(Level.FINE)) {      log.fine("Elasticsearch create mapping for index '" + index + " and type '"+ stringObjectEntry.getKey()+ "': "+ mapping);    }    PutMappingResponse resp=putMappingRequestBuilder.execute().actionGet();    if (resp.isAcknowledged()) {      if (log.isLoggable(Level.FINE)) {        log.fine("Elasticsearch mapping for index '" + index + " and type '"+ stringObjectEntry.getKey()+ "' was acknowledged");      }    } else {      success=false;      log.warning("Elasticsearch mapping creation was not acknowledged for index '" + index + " and type '"+ stringObjectEntry.getKey()+ "'");    }  }  return success;}  }
class C{  public void disableOcr(){  if (!ocrDisabled) {    excludeParser(TesseractOCRParser.class);    ocrDisabled=true;    pdfConfig.setExtractInlineImages(false);  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case DatatypePackage.DICTIONARY_PROPERTY_TYPE__KEY_TYPE:    return basicSetKeyType(null,msgs);case DatatypePackage.DICTIONARY_PROPERTY_TYPE__VALUE_TYPE:  return basicSetValueType(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static void main(String[] args){  (new Am()).run(args);}  }
class C{  public void removeAllHighlights(){  TextUI mapper=component.getUI();  if (getDrawsLayeredHighlights()) {    int len=highlights.size();    if (len != 0) {      int minX=0;      int minY=0;      int maxX=0;      int maxY=0;      int p0=-1;      int p1=-1;      for (int i=0; i < len; i++) {        HighlightInfo hi=highlights.elementAt(i);        if (hi instanceof LayeredHighlightInfo) {          LayeredHighlightInfo info=(LayeredHighlightInfo)hi;          minX=Math.min(minX,info.x);          minY=Math.min(minY,info.y);          maxX=Math.max(maxX,info.x + info.width);          maxY=Math.max(maxY,info.y + info.height);        } else {          if (p0 == -1) {            p0=hi.p0.getOffset();            p1=hi.p1.getOffset();          } else {            p0=Math.min(p0,hi.p0.getOffset());            p1=Math.max(p1,hi.p1.getOffset());          }        }      }      if (minX != maxX && minY != maxY) {        component.repaint(minX,minY,maxX - minX,maxY - minY);      }      if (p0 != -1) {        try {          safeDamageRange(p0,p1);        } catch (        BadLocationException e) {        }      }      highlights.removeAllElements();    }  } else   if (mapper != null) {    int len=highlights.size();    if (len != 0) {      int p0=Integer.MAX_VALUE;      int p1=0;      for (int i=0; i < len; i++) {        HighlightInfo info=highlights.elementAt(i);        p0=Math.min(p0,info.p0.getOffset());        p1=Math.max(p1,info.p1.getOffset());      }      try {        safeDamageRange(p0,p1);      } catch (      BadLocationException e) {      }      highlights.removeAllElements();    }  }}  }
class C{  public static void init(){  Properties p;  try {    p=System.getProperties();  } catch (  java.security.AccessControlException ace) {    p=new Properties();  }  init(p);}  }
class C{  public Builder bySecond(Integer... seconds){  return bySecond(Arrays.asList(seconds));}  }
class C{  public CakePHP3CustomizerPanel(){  initComponents();  init();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public char first(){  pos=0;  return current();}  }
class C{  @Benchmark public long test4_UsingKeySetAndForEach() throws IOException {  long i=0;  for (  Integer key : map.keySet()) {    i+=key + map.get(key);  }  return i;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.N4_FIELD_DECLARATION__DECLARED_TYPE_REF:    setDeclaredTypeRef((TypeRef)null);  return;case N4JSPackage.N4_FIELD_DECLARATION__BOGUS_TYPE_REF:setBogusTypeRef((TypeRef)null);return;case N4JSPackage.N4_FIELD_DECLARATION__DECLARED_NAME:setDeclaredName((LiteralOrComputedPropertyName)null);return;case N4JSPackage.N4_FIELD_DECLARATION__DEFINED_FIELD:setDefinedField((TField)null);return;case N4JSPackage.N4_FIELD_DECLARATION__EXPRESSION:setExpression((Expression)null);return;}super.eUnset(featureID);}  }
class C{  private StringTextStore(String text){  super();  fText=text != null ? text : "";  fCopyLimit=fText.length() > SMALL_TEXT_LIMIT ? fText.length() / 2 : 0;}  }
class C{  public static double incompleteGammaP(double a,double x){  return incompleteGamma(x,a,lnGamma(a));}  }
class C{  @Scheduled(fixedDelay=60000) public void controlHerdJmsMessageListener(){  try {    Boolean jmsMessageListenerEnabled=Boolean.valueOf(configurationHelper.getProperty(ConfigurationValue.JMS_LISTENER_ENABLED));    JmsListenerEndpointRegistry registry=ApplicationContextHolder.getApplicationContext().getBean("org.springframework.jms.config.internalJmsListenerEndpointRegistry",JmsListenerEndpointRegistry.class);    MessageListenerContainer jmsMessageListenerContainer=registry.getListenerContainer(HerdJmsDestinationResolver.SQS_DESTINATION_HERD_INCOMING);    LOGGER.debug("controlHerdJmsMessageListener(): {}={} jmsMessageListenerContainer.isRunning()={}",ConfigurationValue.JMS_LISTENER_ENABLED.getKey(),jmsMessageListenerEnabled,jmsMessageListenerContainer.isRunning());    if (!jmsMessageListenerEnabled && jmsMessageListenerContainer.isRunning()) {      LOGGER.info("controlHerdJmsMessageListener(): Stopping the herd JMS message listener ...");      jmsMessageListenerContainer.stop();      LOGGER.info("controlHerdJmsMessageListener(): Done");    } else     if (jmsMessageListenerEnabled && !jmsMessageListenerContainer.isRunning()) {      LOGGER.info("controlHerdJmsMessageListener(): Starting the herd JMS message listener ...");      jmsMessageListenerContainer.start();      LOGGER.info("controlHerdJmsMessageListener(): Done");    }  } catch (  Exception e) {    LOGGER.error("controlHerdJmsMessageListener(): Failed to control the herd Jms message listener service.",e);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:13.408 -0400",hash_original_method="FC36FCA077BB9356BFDFCA10D99D0311",hash_generated_method="2430FCC224E47ADC0C94FB89530AAC4A") public AnnotationTypeMismatchException(Method element,String foundType){  super("The annotation element " + element + " doesn't match the type "+ foundType);  this.element=element;  this.foundType=foundType;}  }
class C{  public void startDrag(DragGestureEvent trigger,Cursor dragCursor,Transferable transferable,DragSourceListener dsl) throws InvalidDnDOperationException {  startDrag(trigger,dragCursor,null,null,transferable,dsl,null);}  }
class C{  @SuppressWarnings("IfMayBeConditional") public IgniteInternalFuture<?> dynamicStartCache(@Nullable CacheConfiguration ccfg,String cacheName,@Nullable NearCacheConfiguration nearCfg,CacheType cacheType,boolean failIfExists,boolean failIfNotStarted,boolean checkThreadTx){  if (checkThreadTx)   checkEmptyTransactions();  DynamicCacheDescriptor desc=registeredCaches.get(maskNull(cacheName));  DynamicCacheChangeRequest req=new DynamicCacheChangeRequest(cacheName,ctx.localNodeId());  req.failIfExists(failIfExists);  if (ccfg != null) {    try {      cloneCheckSerializable(ccfg);    } catch (    IgniteCheckedException e) {      return new GridFinishedFuture<>(e);    }    if (desc != null) {      if (failIfExists) {        return new GridFinishedFuture<>(new CacheExistsException("Failed to start cache " + "(a cache with the same name is already started): " + cacheName));      } else {        CacheConfiguration descCfg=desc.cacheConfiguration();        if (nearCfg != null) {          if (CU.affinityNode(ctx.discovery().localNode(),descCfg.getNodeFilter())) {            if (descCfg.getNearConfiguration() != null)             return new GridFinishedFuture<>(); else             return new GridFinishedFuture<>(new IgniteCheckedException("Failed to start near " + "cache (local node is an affinity node for cache): " + cacheName));          } else           req.clientStartOnly(true);        } else         req.clientStartOnly(true);        req.deploymentId(desc.deploymentId());        req.startCacheConfiguration(descCfg);      }    } else {      req.deploymentId(IgniteUuid.randomUuid());      try {        CacheConfiguration cfg=new CacheConfiguration(ccfg);        CacheObjectContext cacheObjCtx=ctx.cacheObjects().contextForCache(cfg);        initialize(false,cfg,cacheObjCtx);        req.startCacheConfiguration(cfg);      } catch (      IgniteCheckedException e) {        return new GridFinishedFuture(e);      }    }  } else {    req.clientStartOnly(true);    if (desc != null)     ccfg=desc.cacheConfiguration();    if (ccfg == null) {      if (failIfNotStarted)       return new GridFinishedFuture<>(new CacheExistsException("Failed to start client cache " + "(a cache with the given name is not started): " + cacheName)); else       return new GridFinishedFuture<>();    }    req.deploymentId(desc.deploymentId());    req.startCacheConfiguration(ccfg);  }  if (ccfg.isSwapEnabled())   for (  ClusterNode n : ctx.discovery().allNodes())   if (!GridCacheUtils.clientNode(n) && !GridCacheUtils.isSwapEnabled(n))   return new GridFinishedFuture<>(new IgniteCheckedException("Failed to start cache " + cacheName + " with swap enabled: Remote Node with ID "+ n.id().toString().toUpperCase()+ " has not swap SPI configured"));  if (nearCfg != null)   req.nearCacheConfiguration(nearCfg);  req.cacheType(cacheType);  return F.first(initiateCacheChanges(F.asList(req),failIfExists));}  }
class C{  private HtmlSelectOneMenu createFieldMenu(){  HtmlSelectOneMenu field=new HtmlSelectOneMenu();  List children=field.getChildren();  children.add(createSelectItem("Subject"));  children.add(createSelectItem("Sender"));  children.add(createSelectItem("Date"));  children.add(createSelectItem("Priority"));  children.add(createSelectItem("Status"));  children.add(createSelectItem("To"));  children.add(createSelectItem("Cc"));  children.add(createSelectItem("To or Cc"));  return field;}  }
class C{  public void close(){synchronized (mDiskCacheLock) {    if (mDiskLruCache != null) {      try {        if (!mDiskLruCache.isClosed()) {          mDiskLruCache.close();        }      } catch (      Throwable e) {        LogUtils.e(e.getMessage(),e);      }      mDiskLruCache=null;    }  }}  }
class C{  private void init(){  customElements=new CustomElementCollection();  this.setExtension(customElements);}  }
class C{  public _ScheduleDays(){  super();}  }
class C{  public int allocLow(int size,int addrAlignment){  for (MemoryChunk memoryChunk=low; memoryChunk != null; memoryChunk=memoryChunk.next) {    if (memoryChunk.isAvailable(size,addrAlignment)) {      return allocLow(memoryChunk,size,addrAlignment);    }  }  return 0;}  }
class C{  public double heapInit(){  return memory.getHeapMemoryUsage().getInit();}  }
class C{  public final long size(){  int sum=0;  for (int i=0; i < this.sets.length; i++) {    sum+=this.sets[i].size();  }  return sum;}  }
class C{  private static Location initLocation(GlowSession session,PlayerReader reader){  if (reader.hasPlayedBefore()) {    Location loc=reader.getLocation();    if (loc != null) {      return loc;    }  }  return session.getServer().getWorlds().get(0).getSpawnLocation();}  }
