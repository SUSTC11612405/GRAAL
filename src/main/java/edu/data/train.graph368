class C{  public boolean isSerializable(){  return serializable;}  }
class C{  public static ArrayList<String> find(String matchText){  return m_ClassCache.find(matchText);}  }
class C{  protected Position computeNext(){  Angle distToNext=LatLon.greatCircleDistance(this.thisPosition,this.nextControlPosition);  double diff=distToNext.degrees - this.thisStep;  while (diff < 0) {    if (this.positions.hasNext()) {      this.thisPosition=this.nextControlPosition;      this.nextControlPosition=this.positions.next();      if (this.state == STATE_LINE) {        this.thisStep-=distToNext.degrees;        return this.thisPosition;      }    } else     if (this.firstPosition != null && !this.firstPosition.equals(this.nextControlPosition)) {      this.thisPosition=this.nextControlPosition;      this.nextControlPosition=this.firstPosition;      this.firstPosition=null;      if (this.state == STATE_LINE) {        this.thisStep-=distToNext.degrees;        return this.thisPosition;      }    } else {      Position next=this.nextControlPosition;      this.nextControlPosition=null;      return next;    }    this.thisStep-=distToNext.degrees;    distToNext=LatLon.greatCircleDistance(this.thisPosition,this.nextControlPosition);    diff=distToNext.degrees - thisStep;  }  Angle azimuth=LatLon.greatCircleAzimuth(this.thisPosition,this.nextControlPosition);  LatLon ll=LatLon.greatCircleEndPosition(this.thisPosition,azimuth,Angle.fromDegrees(this.thisStep));switch (this.state) {case STATE_LINE:    this.state=STATE_WAVE_START;  break;case STATE_WAVE_START:this.state=STATE_TOOTH_PEAK;break;default :throw new IllegalStateException();}this.thisStep=this.halfWaveLength.degrees;this.thisPosition=new Position(ll,0);return this.thisPosition;}  }
class C{  public String namespace(){  return theNamespace;}  }
class C{  public int findFieldOffsetForPath(final String fieldPath){  for (  final JBBPNamedFieldInfo f : this.namedFieldData) {    if (f.getFieldPath().equals(fieldPath)) {      return f.getFieldOffsetInCompiledBlock();    }  }  throw new JBBPIllegalArgumentException("Unknown field path [" + fieldPath + ']');}  }
class C{  public void move(String url,String newDirPath,OnMoveDownloadFileListener onMoveDownloadFileListener){  getDownloadMoveManager().move(url,newDirPath,onMoveDownloadFileListener);}  }
class C{  public synchronized void reset() throws IOException {  in.reset();}  }
class C{  public Y eq(String value){  if (value == null || value.trim().length() == 0) {    return super.eq((Integer)null);  } else {    return super.eq(Integer.parseInt(value.trim()));  }}  }
class C{  public HeikinAshiDataset(){  this.data=new ArrayList<IndicatorSeries>();}  }
class C{  public void disableFiltering(){  mFilterData=false;}  }
class C{  @DSComment("OS Bundle data structure") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:36.442 -0500",hash_original_method="F5C0B952F7E6EDB282A82D73FA397DBD",hash_generated_method="B78738A491B15050745DD41B2D9BECE8") public boolean containsKey(String key){  unparcel();  return mMap.containsKey(key);}  }
class C{  public static final boolean isStringCompoundConcatenation(CompoundAssignmentTree tree){  return (tree.getKind() == Tree.Kind.PLUS_ASSIGNMENT && TypesUtils.isString(InternalUtils.typeOf(tree)));}  }
class C{  @RequestMapping(value="/contents",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Content> createContent(@Valid @RequestBody Content content) throws URISyntaxException {  log.debug("REST request to save Content : {}",content);  if (content.getId() != null) {    return ResponseEntity.badRequest().header("Failure","A new content cannot already have an ID").body(null);  }  content.setUser(userService.getCurrentUser());  Content result=contentRepository.save(content);  return ResponseEntity.created(new URI("/api/contents/" + result.getId())).headers(HeaderUtil.createEntityCreationAlert("content",result.getId().toString())).body(result);}  }
class C{  public String[] names(){  return metadata.keySet().toArray(new String[metadata.keySet().size()]);}  }
class C{  protected String createStringFromKeyObject(Object keyObj){  String key=null;  if (keyObj instanceof String) {    key=((String)keyObj).toUpperCase().intern();  } else   if (keyObj instanceof Number) {    Number keyNum=(Number)keyObj;    if (keyNum.doubleValue() == (double)keyNum.intValue()) {      key=Integer.toString(keyNum.intValue()).intern();    } else {      key=Double.toString(keyNum.doubleValue()).intern();    }  } else {    try {      key=keyObj.toString().toUpperCase().intern();    } catch (    Exception e) {      Debug.error("AreaHandler.createStringFromKeyObject: bad key object:" + keyObj);    }  }  return key;}  }
class C{  public void close() throws java.io.IOException {  return;}  }
class C{  public String toString(){  StringBuffer st=new StringBuffer();  st.append(super.toString()).append("imports : ").append(imports);  return st.toString();}  }
class C{  public void reset(){  len=4;  pos=4;  Arrays.fill(buf,(byte)0);}  }
class C{  public void expandPath(Object... path){  expandPath(isInitialized(),path);}  }
class C{  private void resize(int c){  int[] newItems=new int[c];  for (int i=0; i < items.length; i+=1) {    newItems[i]=items[i];  }  items=newItems;}  }
class C{  public void addItem(KeyNamePair pp){  appendItem(pp.getName(),pp.getKey());}  }
class C{  public static NbtOutputStream writeDeflated(NbtTag tag,OutputStream outputStream) throws IOException {  NbtOutputStream out=new NbtOutputStream(new DeflaterOutputStream(outputStream));  out.write(tag);  return out;}  }
class C{  private void addWeblogicDescriptor() throws IOException, JDOMException {  InputStream in=null;  try {    in=getResource("META-INF/weblogic-ejb-jar.xml");    if (in != null) {      WeblogicEjbJarXml descr=WeblogicEjbJarXmlIo.parseWeblogicEjbJarXml(in);      if (descr != null) {        this.ejbJarXml.addVendorDescriptor(descr);      }    }  }  finally {    if (in != null) {      in.close();    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:14.224 -0500",hash_original_method="6C9E8EADE7BF0CF7C06CF8A72D599D54",hash_generated_method="6C9E8EADE7BF0CF7C06CF8A72D599D54") V readValueUnderLock(HashEntry<K,V> e){  lock();  try {    return e.value;  }  finally {    unlock();  }}  }
class C{  public SessionEditor(String name){  this(name,null);}  }
class C{  public int value(int trueClassindex,int predictedClassindex){  return confusion[predictedClassindex][trueClassindex];}  }
class C{  private int encryptedColumnLength(int colLength){  String str="";  for (int i=0; i < colLength; i++) {    str+="1";  }  str=SecureEngine.encrypt(str);  return str.length();}  }
class C{  public void hideControl(){  if (controlShown) {    mainComposite.dispose();    subComposite.layout();    controlShown=false;    setSwitchSteppingControlButtonChecked(false);  }}  }
class C{  public void stopStatListening(){synchronized (this.statListenersLock) {    this.statListeners=new ListenerIdMap();    unreachable=true;  }  dispatcher.stopDispatching();}  }
class C{  public static int forceZerosForNans(String sourcePath,String dsName) throws IOException {  RrdDb rrd=new RrdDb(sourcePath);  try {    Datasource[] datasources;    if (dsName == null) {      datasources=rrd.getDatasources();    } else {      if (rrd.containsDs(dsName)) {        datasources=new Datasource[]{rrd.getDatasource(dsName)};      } else {        throw new IllegalArgumentException("Could not find datasource [" + dsName + "] in file "+ sourcePath);      }    }    int count=0;    for (    Datasource datasource : datasources) {      String currentDsName=datasource.getName();      if (!currentDsName.endsWith(DsDef.FORCE_ZEROS_FOR_NANS_SUFFIX)) {        datasource.setDsName(currentDsName + DsDef.FORCE_ZEROS_FOR_NANS_SUFFIX);        count++;      }    }    return count;  }  finally {    rrd.close();  }}  }
class C{  public static void clearBox(ExtensionPoint ext){  Box b=getBoxExtension(ext);  if (b != null) {    if (b instanceof GeoRssWhere) {      GeoRssWhere where=(GeoRssWhere)b;      if (where.hasPoint()) {        where.clearBox();        return;      }    }    ext.removeExtension(b);  }}  }
class C{  private static boolean process(CommandLine line) throws ParseException, IOException {  List args=line.getArgList();  if (line.hasOption('D')) {    String[] values=line.getOptionValues('D');    for (int i=0; i < values.length; i++) {      setSystemPropertyFrom(values[i]);    }  }  GroovyMain main=new GroovyMain();  main.conf.setSourceEncoding(line.getOptionValue('c',main.conf.getSourceEncoding()));  main.isScriptFile=!line.hasOption('e');  main.debug=line.hasOption('d');  main.conf.setDebug(main.debug);  main.conf.setParameters(line.hasOption("pa"));  main.processFiles=line.hasOption('p') || line.hasOption('n');  main.autoOutput=line.hasOption('p');  main.editFiles=line.hasOption('i');  if (main.editFiles) {    main.backupExtension=line.getOptionValue('i');  }  main.autoSplit=line.hasOption('a');  String sp=line.getOptionValue('a');  if (sp != null)   main.splitPattern=sp;  if (main.isScriptFile) {    if (args.isEmpty())     throw new ParseException("neither -e or filename provided");    main.script=(String)args.remove(0);    if (main.script.endsWith(".java"))     throw new ParseException("error: cannot compile file with .java extension: " + main.script);  } else {    main.script=line.getOptionValue('e');  }  main.processSockets=line.hasOption('l');  if (main.processSockets) {    String p=line.getOptionValue('l',"1960");    main.port=Integer.parseInt(p);  }  String disabled=line.getOptionValue("disableopt",",");  String[] deopts=disabled.split(",");  for (  String deopt_i : deopts) {    main.conf.getOptimizationOptions().put(deopt_i,false);  }  if (line.hasOption("indy")) {    CompilerConfiguration.DEFAULT.getOptimizationOptions().put("indy",true);    main.conf.getOptimizationOptions().put("indy",true);  }  if (line.hasOption("basescript")) {    main.conf.setScriptBaseClass(line.getOptionValue("basescript"));  }  if (line.hasOption("configscript")) {    String path=line.getOptionValue("configscript");    File groovyConfigurator=new File(path);    Binding binding=new Binding();    binding.setVariable("configuration",main.conf);    CompilerConfiguration configuratorConfig=new CompilerConfiguration();    ImportCustomizer customizer=new ImportCustomizer();    customizer.addStaticStars("org.codehaus.groovy.control.customizers.builder.CompilerCustomizationBuilder");    configuratorConfig.addCompilationCustomizers(customizer);    GroovyShell shell=new GroovyShell(binding,configuratorConfig);    shell.evaluate(groovyConfigurator);  }  main.args=args;  return main.run();}  }
class C{  public void test() throws Exception {  assertEquals(LMDirichletSimilarity.class,getSimilarity("text").getClass());}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:06.666 -0500",hash_original_method="B7B625088F029DD3EB2D5292E983F6DF",hash_generated_method="0A54A29A95BB9391FFC250FC66E26A42") public static Typeface createFromAsset(AssetManager mgr,String path){  return new Typeface(nativeCreateFromAsset(mgr,path));}  }
class C{  public Code39Reader(boolean usingCheckDigit){  this(usingCheckDigit,false);}  }
class C{  public void addSynapseGroup(SynapseGroup group){  numMembers+=group.size();  synapseGroupList.add(group);  group.setParentGroup(this);}  }
class C{  private void ensureEnoughData(int cnt){  if (remaining() < cnt)   throw new IgniteException("Not enough data to read the value [position=" + pos + ", requiredBytes="+ cnt+ ", remainingBytes="+ remaining()+ ']');}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case SexecPackage.CALL__STEP:    setStep((Step)null);  return;}super.eUnset(featureID);}  }
class C{  private String addRollbackStepToForgetVolumes(Workflow workflow,URI vplexSystemURI,List<URI> volumeURIs,String waitFor){  String stepId=workflow.createStep(VOLUME_FORGET_STEP,String.format("Null provisioning step; forget Volumes on rollback:%n%s",BlockDeviceController.getVolumesMsg(_dbClient,volumeURIs)),waitFor,vplexSystemURI,DiscoveredDataObject.Type.vplex.name(),this.getClass(),rollbackMethodNullMethod(),createRollbackForgetVolumesMethod(vplexSystemURI,volumeURIs),null);  return stepId;}  }
class C{  private void remapKey(InputMapUIResource map,int key,int defaultModifier,int nativeModifier){  KeyStroke defaultKey=KeyStroke.getKeyStroke(key,defaultModifier);  Object action=map.get(defaultKey);  KeyStroke nativeKey=KeyStroke.getKeyStroke(key,nativeModifier);  if (!nativeKey.equals(defaultKey)) {    map.remove(defaultKey);    map.put(nativeKey,action);  }}  }
class C{  public legend addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  public static void main(String[] args){  runCLIApplication(CacheDoubleDistanceInOnDiskMatrix.class,args);}  }
class C{  public boolean isLast(int PP_Order_Node_ID,int AD_Client_ID){  MPPOrderNode[] nodes=getNodesInOrder(AD_Client_ID);  return PP_Order_Node_ID == nodes[nodes.length - 1].getPP_Order_Node_ID();}  }
class C{  @Provides @PerActivity Activity provideActivity(){  return this.activity;}  }
class C{  public double optimize(double x,UnivariateFunction f,double tol,double lowerBound,double upperBound){  double[] range=bracketize(lowerBound,x,upperBound,f);  return minin(range[0],range[1],range[2],range[3],f,tol);}  }
class C{  public Property basicGetProperty(){  return property;}  }
class C{  public IllegalThreadStateException(){  super();}  }
class C{  public static Attributes parseAttributes(ParserController pc,JspReader reader) throws JasperException {  Parser tmpParser=new Parser(pc,reader,false,false,null,false);  return tmpParser.parseAttributes();}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  @Timed @ExceptionMetered @GET public Response findGroups(@Auth User user,@DefaultValue("") @QueryParam("name") String name){  if (name.isEmpty()) {    return Response.ok().entity(listGroups(user)).build();  }  return Response.ok().entity(getGroupByName(user,name)).build();}  }
class C{  public pre(String value,int width){  setWidth(width);  addElement(value);}  }
class C{  @Override public void sub(int size,Register dst,Register src,int immediate){  if (immediate < 0) {    add(size,dst,src,-immediate);  } else   if (!dst.equals(src) || immediate != 0) {    super.sub(size,dst,src,immediate);  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:57.909 -0500",hash_original_method="C9503F691DAF48A1F140F42890F719F7",hash_generated_method="75295CDB136ABB1BD43FCC77F4FB771E") protected boolean pageUp(TextView widget,Spannable buffer){  return false;}  }
class C{  public boolean isTraceEnabled(){  return (getLogger().isLoggable(Level.FINEST));}  }
class C{  void undeployAll(){  taskMap.clear();  clsDescs.set(null);}  }
class C{  public static void registerExperimentalFlags(CFlags flags){  resetAccessedStatus();  final String[] cat=flags.getCategories();  if (cat != null) {    final String[] copy=Arrays.copyOf(cat,cat.length + 1);    copy[copy.length - 1]=CATEGORY;    flags.setCategories(flags.getHelpCategory(),copy);  }  for (  final Flag flag : FLAGS) {    flags.register(flag);  }  sFlags=flags;}  }
class C{  private int parsePaginatedResult(BatchMaker batchMaker,String sourceOffset,Record record) throws StageException {  int numSubRecords=0;  if (!record.has(conf.pagination.resultFieldPath)) {    throw new StageException(Errors.HTTP_12,conf.pagination.resultFieldPath);  }  Field resultField=record.get(conf.pagination.resultFieldPath);  if (resultField.getType() != Field.Type.LIST) {    throw new StageException(Errors.HTTP_08,resultField.getType());  }  List<Field> results=resultField.getValueAsList();  int subRecordIdx=0;  for (  Field result : results) {    Record r=getContext().createRecord(sourceOffset + "::" + subRecordIdx++);    r.set(result);    addResponseHeaders(r.getHeader());    batchMaker.addRecord(r);    ++numSubRecords;  }  haveMorePages=numSubRecords > 0;  return numSubRecords;}  }
class C{  private List<LocalizedResource> searchForOneDomainObject(List<String> locales,KeysForOneObject keysForOneObject,List<LocalizedResource> queryResult){  List<LocalizedResource> result=new ArrayList<>();  for (  String locale : locales) {    for (    Long key : keysForOneObject.getAllObjKeys()) {      result.addAll(search(key,locale,queryResult));    }  }  return result;}  }
class C{  private void zInternalSetLastValidDateAndNotifyListeners(LocalDate newDate){  LocalDate oldDate=lastValidDate;  lastValidDate=newDate;  if (!PickerUtilities.isSameLocalDate(oldDate,newDate)) {    for (    DateChangeListener dateChangeListener : dateChangeListeners) {      DateChangeEvent dateChangeEvent=new DateChangeEvent(this,oldDate,newDate);      dateChangeListener.dateChanged(dateChangeEvent);    }    firePropertyChange("date",oldDate,newDate);  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.TSTRUCTURAL_TYPE__AST_ELEMENT:    setAstElement((EObject)null);  return;}super.eUnset(featureID);}  }
class C{  public boolean isMultiStatus(){  return false;}  }
class C{  @Override public Envelope computeEnvelope(final IScope scope){  return null;}  }
class C{  public static Result combinePredictions(Result folds[]){  Result r=new Result();  r.info=folds[0].info;  for (int f=0; f < folds.length; f++) {    r.predictions.addAll(folds[f].predictions);    r.actuals.addAll(folds[f].actuals);  }  r.vals=folds[0].vals;  for (  String metric : folds[0].vals.keySet()) {    if (folds[0].vals.get(metric) instanceof Double) {      double values[]=new double[folds.length];      for (int i=0; i < folds.length; i++) {        values[i]=(Double)folds[i].vals.get(metric);      }      r.vals.put(metric,Utils.mean(values));    }  }  return r;}  }
class C{  static private void processLinkedDefinitions(){  for (  WbXmlDefinition def : getDefinitions()) {    if (!def.getLinkedDefinitions().isEmpty()) {      for (      String name : def.getLinkedDefinitions().keySet()) {        WbXmlDefinition linkedDef=getDefinitionByName(name);        if (linkedDef != null) {          def.getLinkedDefinitions().put(name,linkedDef);        } else {          def.getLinkedDefinitions().remove(name);          log.log(Level.WARNING,"The linked definition {0} defined in {1} does not exists",new Object[]{name,def.getName()});        }      }    }  }}  }
class C{  public static MaxForwardsHeader buildMaxForwardsHeader() throws InvalidArgumentException {  return HEADER_FACTORY.createMaxForwardsHeader(70);}  }
class C{  public S_Definition createS_Definition(){  S_DefinitionImpl s_Definition=new S_DefinitionImpl();  return s_Definition;}  }
class C{  private boolean executeConnect() throws IOException, HttpException {  connectMethod=new ConnectMethod(hostConfiguration);  connectMethod.getParams().setDefaults(hostConfiguration.getParams());  int code;  for (; ; ) {    if (!conn.isOpen()) {      conn.open();    }    try {      authenticateProxy(connectMethod);    } catch (    final AuthenticationException e) {      LOG.error(e.getMessage(),e);    }    applyConnectionParams(connectMethod);    connectMethod.execute(state,conn);    code=connectMethod.getStatusCode();    boolean retry=false;    final AuthState authstate=connectMethod.getProxyAuthState();    authstate.setAuthRequested(code == HttpStatus.SC_PROXY_AUTHENTICATION_REQUIRED);    if (authstate.isAuthRequested()) {      if (processAuthenticationResponse(connectMethod)) {        retry=true;      }    }    if (!retry) {      break;    }    if (connectMethod.getResponseBodyAsStream() != null) {      connectMethod.getResponseBodyAsStream().close();    }  }  if ((code >= 200) && (code < 300)) {    conn.tunnelCreated();    connectMethod=null;    return true;  } else {    conn.close();    return false;  }}  }
class C{  private String validateCookie(ValidationData original,ValidationData item,Variables variables,BaseResponse reqResponse,String uniqueName){  String actualValue=reqResponse.getCookie(item.getKey());  LOG.debug("Cookie compare actual value: " + actualValue);  boolean result=evaluateResult(actualValue,item.getValue(),item.getCondition(),variables);  if (result) {    return TankConstants.HTTP_CASE_PASS;  }  String msg="Failed cookie validation: cookie value = " + actualValue;  LOG.error(LogUtil.getLogMessage(item.toString() + " " + msg,LogEventType.Validation));  tsc.addError(new ErrorContainer("COOKIE",original,item,msg));  return TankConstants.HTTP_CASE_FAIL;}  }
class C{  public static SolrDocumentList docListToSolrDocumentList(DocList docs,SolrIndexSearcher searcher,Set<String> fields,Map<SolrDocument,Integer> ids) throws IOException {  IndexSchema schema=searcher.getSchema();  SolrDocumentList list=new SolrDocumentList();  list.setNumFound(docs.matches());  list.setMaxScore(docs.maxScore());  list.setStart(docs.offset());  DocIterator dit=docs.iterator();  while (dit.hasNext()) {    int docid=dit.nextDoc();    Document luceneDoc=searcher.doc(docid,fields);    SolrDocument doc=new SolrDocument();    for (    IndexableField field : luceneDoc) {      if (null == fields || fields.contains(field.name())) {        SchemaField sf=schema.getField(field.name());        doc.addField(field.name(),sf.getType().toObject(field));      }    }    if (docs.hasScores() && (null == fields || fields.contains("score"))) {      doc.addField("score",dit.score());    }    list.add(doc);    if (ids != null) {      ids.put(doc,new Integer(docid));    }  }  return list;}  }
class C{  public MemoryStore(File dataDir){  this();  setDataDir(dataDir);  setPersist(true);}  }
class C{  public AgentImpl(AgentConfigImpl agentConfig) throws AdminException, IllegalArgumentException {  addShutdownHook();  if (agentConfig == null) {    throw new IllegalArgumentException(LocalizedStrings.AgentImpl_AGENTCONFIG_MUST_NOT_BE_NULL.toLocalizedString());  }  this.agentConfig=(AgentConfigImpl)agentConfig;  this.mbeanName=MBEAN_NAME_PREFIX + MBeanUtil.makeCompliantMBeanNameProperty("Agent");  try {    this.objectName=new ObjectName(this.mbeanName);  } catch (  MalformedObjectNameException ex) {    String s=LocalizedStrings.AgentImpl_WHILE_CREATING_OBJECTNAME_0.toLocalizedString(new Object[]{this.mbeanName});    throw new AdminException(s,ex);  }  this.propertyFile=this.agentConfig.getPropertyFile().getAbsolutePath();  this.agentConfig.setBindAddress(getBindAddress());  initLogWriter();  mBeanServer=MBeanUtil.start();  MBeanUtil.createMBean(this);  initializeHelperMbean();}  }
class C{  public PipelineStateJson stopPipeline(String pipelineName,String rev) throws ApiException {  Object postBody=null;  byte[] postBinaryBody=null;  if (pipelineName == null) {    throw new ApiException(400,"Missing the required parameter 'pipelineName' when calling stopPipeline");  }  String path="/v1/pipeline/{pipelineName}/stop".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pipelineName" + "\\}",apiClient.escapeString(pipelineName.toString()));  List<Pair> queryParams=new ArrayList<Pair>();  Map<String,String> headerParams=new HashMap<String,String>();  Map<String,Object> formParams=new HashMap<String,Object>();  queryParams.addAll(apiClient.parameterToPairs("","rev",rev));  final String[] accepts={"application/json"};  final String accept=apiClient.selectHeaderAccept(accepts);  final String[] contentTypes={};  final String contentType=apiClient.selectHeaderContentType(contentTypes);  String[] authNames=new String[]{"basic"};  TypeRef returnType=new TypeRef<PipelineStateJson>(){  };  return apiClient.invokeAPI(path,"POST",queryParams,postBody,postBinaryBody,headerParams,formParams,accept,contentType,authNames,returnType);}  }
class C{  public WarpFilter(){}  }
class C{  public GardnerSymbolTiming(){}  }
class C{  public static String extractYouTubeVideoId(String youtubeUrl){  String pattern="(?<=youtu.be/|watch\\?v=|/videos/|embed\\/)[^#\\&\\?]*";  Pattern compiledPattern=Pattern.compile(pattern);  Matcher matcher=compiledPattern.matcher(youtubeUrl);  if (matcher.find()) {    return matcher.group();  } else {    return "H7B1NhceHEg";  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.244 -0500",hash_original_method="09F3146190FEA35181D8E9A65B708145",hash_generated_method="44507CA9D773D18530A1BEC585BFD420") public void drawPoint(float x,float y,Paint paint){  addTaint(x);  addTaint(y);  addTaint(paint.getTaint());}  }
class C{  @Override protected void register(ConfigurationCapabilityFactory configurationCapabilityFactory){  configurationCapabilityFactory.registerConfigurationCapability("jonas4x",ContainerType.REMOTE,ConfigurationType.RUNTIME,Jonas4xRuntimeConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("jonas4x",ContainerType.INSTALLED,ConfigurationType.EXISTING,JonasExistingLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("jonas4x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,JonasStandaloneLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("jonas5x",ContainerType.REMOTE,ConfigurationType.RUNTIME,Jonas5xRuntimeConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("jonas5x",ContainerType.INSTALLED,ConfigurationType.EXISTING,JonasExistingLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("jonas5x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,JonasStandaloneLocalConfigurationCapability.class);}  }
class C{  protected void assertMessagesReceivedAreValid(List<Message> receivedMessages) throws JMSException {  List<Object> copyOfMessages=Arrays.asList(receivedMessages.toArray());  int counter=0;  if (data.length != copyOfMessages.size()) {    for (Iterator<Object> iter=copyOfMessages.iterator(); iter.hasNext(); ) {      TextMessage message=(TextMessage)iter.next();      System.out.println("<== " + counter++ + " = "+ message.getText());    }  }  assertEquals("Not enough messages received",data.length,receivedMessages.size());  for (int i=0; i < data.length; i++) {    TextMessage received=(TextMessage)receivedMessages.get(i);    String text=received.getText();    String stringProperty=received.getStringProperty("stringProperty");    int intProperty=received.getIntProperty("intProperty");    if (verbose) {      System.out.println("Received Text: " + text);    }    assertEquals("Message: " + i,data[i],text);    assertEquals(data[i],stringProperty);    assertEquals(i,intProperty);  }}  }
class C{  private List<ItemDTO> mockBaseItemHas3Key(){  ItemDTO item1=new ItemDTO("a","b","",1);  ItemDTO item2=new ItemDTO("b","c","",2);  ItemDTO item3=new ItemDTO("c","d","",3);  return Arrays.asList(item1,item2,item3);}  }
class C{  public RawProperty addExperimentalProperty(String name,String value){  return addExperimentalProperty(name,null,value);}  }
class C{  public Glyph(String unicode,List names,String orientation,String arabicForm,String lang,Point2D horizOrigin,Point2D vertOrigin,float horizAdvX,float vertAdvY,int glyphCode,TextPaintInfo tpi,Shape dShape,GraphicsNode glyphChildrenNode){  if (unicode == null) {    throw new IllegalArgumentException();  }  if (horizOrigin == null) {    throw new IllegalArgumentException();  }  if (vertOrigin == null) {    throw new IllegalArgumentException();  }  this.unicode=unicode;  this.names=new Vector(names);  this.orientation=orientation;  this.arabicForm=arabicForm;  this.lang=lang;  this.horizOrigin=horizOrigin;  this.vertOrigin=vertOrigin;  this.horizAdvX=horizAdvX;  this.vertAdvY=vertAdvY;  this.glyphCode=glyphCode;  this.position=new Point2D.Float(0,0);  this.outline=null;  this.bounds=null;  this.tpi=tpi;  this.dShape=dShape;  this.glyphChildrenNode=glyphChildrenNode;}  }
class C{  public void close(){  thriftWriter.close();}  }
class C{  public static int murmurhash3_x86_32(CharSequence data,int offset,int len,int seed){  final int c1=0xcc9e2d51;  final int c2=0x1b873593;  int h1=seed;  int pos=offset;  int end=offset + len;  int k1=0;  int k2=0;  int shift=0;  int bits=0;  int nBytes=0;  while (pos < end) {    int code=data.charAt(pos++);    if (code < 0x80) {      k2=code;      bits=8;    } else     if (code < 0x800) {      k2=(0xC0 | (code >> 6)) | ((0x80 | (code & 0x3F)) << 8);      bits=16;    } else     if (code < 0xD800 || code > 0xDFFF || pos >= end) {      k2=(0xE0 | (code >> 12)) | ((0x80 | ((code >> 6) & 0x3F)) << 8) | ((0x80 | (code & 0x3F)) << 16);      bits=24;    } else {      int utf32=(int)data.charAt(pos++);      utf32=((code - 0xD7C0) << 10) + (utf32 & 0x3FF);      k2=(0xff & (0xF0 | (utf32 >> 18))) | ((0x80 | ((utf32 >> 12) & 0x3F))) << 8 | ((0x80 | ((utf32 >> 6) & 0x3F))) << 16 | (0x80 | (utf32 & 0x3F)) << 24;      bits=32;    }    k1|=k2 << shift;    shift+=bits;    if (shift >= 32) {      k1*=c1;      k1=(k1 << 15) | (k1 >>> 17);      k1*=c2;      h1^=k1;      h1=(h1 << 13) | (h1 >>> 19);      h1=h1 * 5 + 0xe6546b64;      shift-=32;      if (shift != 0) {        k1=k2 >>> (bits - shift);      } else {        k1=0;      }      nBytes+=4;    }  }  if (shift > 0) {    nBytes+=shift >> 3;    k1*=c1;    k1=(k1 << 15) | (k1 >>> 17);    k1*=c2;    h1^=k1;  }  h1^=nBytes;  h1^=h1 >>> 16;  h1*=0x85ebca6b;  h1^=h1 >>> 13;  h1*=0xc2b2ae35;  h1^=h1 >>> 16;  return h1;}  }
class C{  public IGameMove bestMove(IGameState state,IPlayer player,IPlayer opponent){  this.state=state;  NegMaxNode myHome=null;  if (debug != null) {    IGameState debugCopy=state.copy();    debug.visitNode(new Legend("NegMax (ply:" + ply + ", player:"+ player+ ")"));    debug.visitNode(debugCopy);    debug.markStart(debugCopy);    myHome=new NegMaxNode();    debug.visitNode(myHome);    debug.visitEdge(debugCopy,myHome);  }  IGameMove response=null;  int best=Integer.MIN_VALUE;  for (Iterator<IGameMove> it=player.validMoves(state).iterator(); it.hasNext(); ) {    IGameMove move=it.next();    if (debug != null) {      debugHome.push(myHome);    }    move.execute(state);    state.incrementCounter();    if (debug != null) {      IGameState nextCopy=state.copy();      debug.visitNode(nextCopy);      debug.visitEdge(debugHome.peek(),nextCopy);    }    int score=negmax(ply - 1,opponent,player);    move.undo(state);    if (IComparator.MAX.compare(best,-score) < 0) {      response=move;      best=-score;    }  }  if (debug != null) {    NegMaxNode mmn=debugHome.pop();    mmn.value(best);  }  return response;}  }
class C{  public void keyReleased(KeyEvent e){  if (e.getKeyCode() == KeyEvent.VK_ESCAPE)   setText(m_initialText);}  }
class C{  public void updateUI(){  setUI((TreeUI)UIManager.getUI(this));  SwingUtilities.updateRendererOrEditorUI(getCellRenderer());  SwingUtilities.updateRendererOrEditorUI(getCellEditor());}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  public FixedStack(final int size){  int stackSize=1;  while (stackSize < size)   stackSize<<=1;  this.size=stackSize;  this.mask=this.size - 1;  stack=(N[])new Object[stackSize];  stackTop=0;}  }
class C{  public void readData(DataInput din) throws IOException {}  }
class C{  public static TungstenProperties loadShardProperties(File shardMap) throws ReplicatorException {  if (shardMap == null) {    shardMap=new File(System.getProperty("replicator.home.dir") + File.separatorChar + "conf"+ File.separatorChar+ "shard.list");  }  if (!shardMap.isFile() || !shardMap.canRead()) {    throw new ReplicatorException("Shard map file missing or unreadable: " + shardMap.getAbsolutePath());  }  logger.info("Loading shard map file: " + shardMap.getAbsolutePath());  FileInputStream fis=null;  TungstenProperties shardMapProperties=null;  try {    fis=new FileInputStream(shardMap);    shardMapProperties=new TungstenProperties();    shardMapProperties.load(fis);  } catch (  IOException e) {    throw new ReplicatorException("Unable to load shard map file: " + shardMap.getAbsolutePath(),e);  } finally {    if (fis != null) {      try {        fis.close();      } catch (      IOException e) {      }    }  }  return shardMapProperties;}  }
class C{  public void test_ConstructorLjava_lang_ObjectLjava_lang_ref_ReferenceQueue(){  ReferenceQueue rq=new ReferenceQueue();  bool=new Boolean(true);  try {    WeakReference wr=new WeakReference(bool,rq);    assertTrue("Initialization failed.",((Boolean)wr.get()).booleanValue());  } catch (  Exception e) {    fail("Exception during test : " + e.getMessage());  }  assertTrue("should always pass",bool.booleanValue());  boolean exception=false;  try {    new WeakReference(bool,null);  } catch (  NullPointerException e) {    exception=true;  }  assertTrue("Should not throw NullPointerException",!exception);}  }
class C{  public DailyTimeIntervalScheduleBuilder endingDailyAfterCount(int count){  if (count <= 0)   throw new IllegalArgumentException("Ending daily after count must be a positive number!");  if (startTimeOfDay == null)   throw new IllegalArgumentException("You must set the startDailyAt() before calling this endingDailyAfterCount()!");  Date today=new Date();  Date startTimeOfDayDate=startTimeOfDay.getTimeOfDayForDate(today);  Date maxEndTimeOfDayDate=TimeOfDay.hourMinuteAndSecondOfDay(23,59,59).getTimeOfDayForDate(today);  long remainingMillisInDay=maxEndTimeOfDayDate.getTime() - startTimeOfDayDate.getTime();  long intervalInMillis;  if (intervalUnit == IntervalUnit.SECOND)   intervalInMillis=interval * 1000L; else   if (intervalUnit == IntervalUnit.MINUTE)   intervalInMillis=interval * 1000L * 60; else   if (intervalUnit == IntervalUnit.HOUR)   intervalInMillis=interval * 1000L * 60* 24; else   throw new IllegalArgumentException("The IntervalUnit: " + intervalUnit + " is invalid for this trigger.");  if (remainingMillisInDay - intervalInMillis <= 0)   throw new IllegalArgumentException("The startTimeOfDay is too late with given Interval and IntervalUnit values.");  long maxNumOfCount=(remainingMillisInDay / intervalInMillis);  if (count > maxNumOfCount)   throw new IllegalArgumentException("The given count " + count + " is too large! The max you can set is "+ maxNumOfCount);  long incrementInMillis=(count - 1) * intervalInMillis;  Date endTimeOfDayDate=new Date(startTimeOfDayDate.getTime() + incrementInMillis);  if (endTimeOfDayDate.getTime() > maxEndTimeOfDayDate.getTime())   throw new IllegalArgumentException("The given count " + count + " is too large! The max you can set is "+ maxNumOfCount);  Calendar cal=Calendar.getInstance();  cal.setTime(endTimeOfDayDate);  int hour=cal.get(Calendar.HOUR_OF_DAY);  int minute=cal.get(Calendar.MINUTE);  int second=cal.get(Calendar.SECOND);  endTimeOfDay=TimeOfDay.hourMinuteAndSecondOfDay(hour,minute,second);  return this;}  }
class C{  @Override protected Object convertToType(final Class type,final Object value) throws Exception {  return new Character(value.toString().charAt(0));}  }
class C{  public void readUTCTime() throws IOException {  if (tag == ASN1Constants.TAG_UTCTIME) {switch (length) {case ASN1UTCTime.UTC_HM:case ASN1UTCTime.UTC_HMS:      break;case ASN1UTCTime.UTC_LOCAL_HM:case ASN1UTCTime.UTC_LOCAL_HMS:    throw new ASN1Exception("ASN.1 UTCTime: local time format is not supported");default :  throw new ASN1Exception("ASN.1 UTCTime: wrong length, identifier at " + tagOffset);}readContent();if (buffer[offset - 1] != 'Z') {throw new ASN1Exception("ASN.1 UTCTime wrongly encoded at [" + contentOffset + ']');}if (times == null) {times=new int[7];}times[0]=strToInt(contentOffset,2);if (times[0] > 49) {times[0]+=1900;} else {times[0]+=2000;}times[1]=strToInt(contentOffset + 2,2);times[2]=strToInt(contentOffset + 4,2);times[3]=strToInt(contentOffset + 6,2);times[4]=strToInt(contentOffset + 8,2);if (length == ASN1UTCTime.UTC_HMS) {times[5]=strToInt(contentOffset + 10,2);}} else if (tag == ASN1Constants.TAG_C_UTCTIME) {throw new ASN1Exception("Decoding constructed ASN.1 UTCTime type is not supported");} else {throw expected("UTCTime");}}  }
class C{  protected void closeAnimate(int position){  if (swipeListView != null) {    int firstVisibleChildPosition=mLayoutManager.findFirstVisibleItemPosition();    final View childContainer=swipeListView.getChildAt(position - firstVisibleChildPosition);    if (childContainer != null) {      final View child=childContainer.findViewById(swipeFrontView);      if (child != null) {        closeAnimate(child,position);      }    }  }}  }
class C{  public FloatDict copy(){  FloatDict outgoing=new FloatDict(count);  System.arraycopy(keys,0,outgoing.keys,0,count);  System.arraycopy(values,0,outgoing.values,0,count);  for (int i=0; i < count; i++) {    outgoing.indices.put(keys[i],i);  }  outgoing.count=count;  return outgoing;}  }
class C{  public GitHubRepository createRepository(GHRepository ghRepository) throws ApiException, IOException {  GitHubRepository dtoRepository=DtoFactory.getInstance().createDto(GitHubRepository.class);  dtoRepository.setName(ghRepository.getName());  dtoRepository.setUrl(String.valueOf(ghRepository.getUrl()));  dtoRepository.setHomepage(ghRepository.getHomepage());  dtoRepository.setForks(ghRepository.getForks());  dtoRepository.setLanguage(ghRepository.getLanguage());  dtoRepository.setFork(ghRepository.isFork());  dtoRepository.setWatchers(ghRepository.getWatchers());  dtoRepository.setPrivateRepo(ghRepository.isPrivate());  dtoRepository.setSize(ghRepository.getSize());  dtoRepository.setDescription(ghRepository.getDescription());  dtoRepository.setSshUrl(ghRepository.getSshUrl());  dtoRepository.setHtmlUrl(ghRepository.gitHttpTransportUrl());  dtoRepository.setUpdatedAt(String.valueOf(ghRepository.getUpdatedAt()));  dtoRepository.setGitUrl(ghRepository.getGitTransportUrl());  dtoRepository.setHasWiki(ghRepository.hasWiki());  dtoRepository.setCloneUrl(String.valueOf(ghRepository.getUrl()));  dtoRepository.setSvnUrl(ghRepository.getSvnUrl());  dtoRepository.setOpenedIssues(ghRepository.getOpenIssueCount());  dtoRepository.setCreatedAt(String.valueOf(ghRepository.getCreatedAt()));  dtoRepository.setPushedAt(String.valueOf(ghRepository.getPushedAt()));  dtoRepository.setHasDownloads(ghRepository.hasDownloads());  dtoRepository.setHasIssues(ghRepository.hasIssues());  if (ghRepository.isFork() && ghRepository.getParent() != null) {    dtoRepository.setParent(createRepository(ghRepository.getParent()));  }  if (ghRepository.isFork() && ghRepository.getParent() == null) {    dtoRepository.setParent(createRepository(gitHub.connect().getUser(ghRepository.getOwner().getLogin()).getRepository(ghRepository.getName()).getParent()));  }  return dtoRepository;}  }
class C{  public void onPoppedOutToFront(){}  }
class C{  public VideoStreamingSession createLiveVideoSharingSession(ContactId contact,IVideoPlayer player,long timestamp) throws CoreException {  if (sLogger.isActivated()) {    sLogger.info("Initiate a live video sharing session");  }  if (!isCallConnectedWith(contact)) {    if (sLogger.isActivated()) {      sLogger.debug("Rich call not established: cancel the initiation");    }    throw new CoreException("Call not established");  }  boolean rejectInvitation=false;  if (isCurrentlyVideoSharingBiDirectional()) {    if (sLogger.isActivated()) {      sLogger.debug("Max sessions reached");    }    rejectInvitation=true;  } else   if (isCurrentlyVideoSharingUniDirectional()) {    VideoStreamingSession currentSession=getUnidirectionalVideoSharingSession();    if (isSessionOriginating(currentSession)) {      if (sLogger.isActivated()) {        sLogger.debug("Max originating sessions reached");      }      rejectInvitation=true;    } else     if (contact == null || !contact.equals(currentSession.getRemoteContact())) {      if (sLogger.isActivated()) {        sLogger.debug("Only bidirectional session with same contact authorized");      }      rejectInvitation=true;    }  }  if (rejectInvitation) {    if (sLogger.isActivated()) {      sLogger.debug("The max number of sharing sessions is achieved: cancel the initiation");    }    throw new CoreException("Max content sharing sessions achieved");  }  return new OriginatingVideoStreamingSession(this,player,ContentManager.createGenericLiveVideoContent(),contact,mRcsSettings,timestamp,mContactManager,mCapabilityService);}  }
class C{  public static PatternGuardExpr whileGuard(PatternExpr guarded,Expression expression){  return new PatternGuardExpr(GuardEnum.WHILE_GUARD.getNamespace(),GuardEnum.WHILE_GUARD.getName(),new Expression[]{expression},guarded);}  }
class C{  public void addDirtyListener(Listener listener){  levelCombo.addListener(SWT.Selection,listener);}  }
class C{  public static BigInteger calculateKey(Digest digest,BigInteger N,BigInteger S){  int padLength=(N.bitLength() + 7) / 8;  byte[] _S=getPadded(S,padLength);  digest.update(_S,0,_S.length);  byte[] output=new byte[digest.getDigestSize()];  digest.doFinal(output,0);  return new BigInteger(1,output);}  }
class C{  private void createRequiredComponents(){  distNameTextField=createTextField("textfield.name",UIComponentIdProvider.DIST_ADD_NAME);  distVersionTextField=createTextField("textfield.version",UIComponentIdProvider.DIST_ADD_VERSION);  distsetTypeNameComboBox=SPUIComponentProvider.getComboBox(i18n.get("label.combobox.type"),"",null,"",false,"",i18n.get("label.combobox.type"));  distsetTypeNameComboBox.setImmediate(true);  distsetTypeNameComboBox.setNullSelectionAllowed(false);  distsetTypeNameComboBox.setId(UIComponentIdProvider.DIST_ADD_DISTSETTYPE);  populateDistSetTypeNameCombo();  descTextArea=new TextAreaBuilder().caption(i18n.get("textfield.description")).style("text-area-style").prompt(i18n.get("textfield.description")).immediate(true).id(UIComponentIdProvider.DIST_ADD_DESC).buildTextComponent();  descTextArea.setNullRepresentation("");  reqMigStepCheckbox=SPUIComponentProvider.getCheckBox(i18n.get("checkbox.dist.required.migration.step"),"dist-checkbox-style",null,false,"");  reqMigStepCheckbox.addStyleName(ValoTheme.CHECKBOX_SMALL);  reqMigStepCheckbox.setId(UIComponentIdProvider.DIST_ADD_MIGRATION_CHECK);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(setNamedItemNS01.class,args);}  }
class C{  protected void startTimer(){  restartTimer(TIMEOUT);}  }
class C{  protected AnimatableValue parseValue(String s,short type,AnimationTarget target){  float val1, val2=0, val3=0;  int i=0;  char c=',';  int len=s.length();  while (i < len) {    c=s.charAt(i);    if (c == ' ' || c == ',') {      break;    }    i++;  }  val1=Float.parseFloat(s.substring(0,i));  if (i < len) {    i++;  }  int count=1;  if (i < len && c == ' ') {    while (i < len) {      c=s.charAt(i);      if (c != ' ') {        break;      }      i++;    }    if (c == ',') {      i++;    }  }  while (i < len && s.charAt(i) == ' ') {    i++;  }  int j=i;  if (i < len && type != SVGTransform.SVG_TRANSFORM_SKEWX && type != SVGTransform.SVG_TRANSFORM_SKEWY) {    while (i < len) {      c=s.charAt(i);      if (c == ' ' || c == ',') {        break;      }      i++;    }    val2=Float.parseFloat(s.substring(j,i));    if (i < len) {      i++;    }    count++;    if (i < len && c == ' ') {      while (i < len) {        c=s.charAt(i);        if (c != ' ') {          break;        }        i++;      }      if (c == ',') {        i++;      }    }    while (i < len && s.charAt(i) == ' ') {      i++;    }    j=i;    if (i < len && type == SVGTransform.SVG_TRANSFORM_ROTATE) {      while (i < len) {        c=s.charAt(i);        if (c == ',' || c == ' ') {          break;        }        i++;      }      val3=Float.parseFloat(s.substring(j,i));      if (i < len) {        i++;      }      count++;      while (i < len && s.charAt(i) == ' ') {        i++;      }    }  }  if (i != len) {    return null;  }  SVGOMTransform t=new SVGOMTransform();switch (type) {case SVGTransform.SVG_TRANSFORM_TRANSLATE:    if (count == 2) {      t.setTranslate(val1,val2);    } else {      t.setTranslate(val1,0f);    }  break;case SVGTransform.SVG_TRANSFORM_SCALE:if (count == 2) {  t.setScale(val1,val2);} else {  t.setScale(val1,val1);}break;case SVGTransform.SVG_TRANSFORM_ROTATE:if (count == 3) {t.setRotate(val1,val2,val3);} else {t.setRotate(val1,0f,0f);}break;case SVGTransform.SVG_TRANSFORM_SKEWX:t.setSkewX(val1);break;case SVGTransform.SVG_TRANSFORM_SKEWY:t.setSkewY(val1);break;}return new AnimatableTransformListValue(target,t);}  }
class C{  static double footprint(int averageEntries,int refSize,int upFrontScale){  int cap=cap(averageEntries,refSize);  return footprint(averageEntries,refSize,upFrontScale,cap);}  }
class C{  public static String generateMD5(String data) throws NoSuchAlgorithmException, UnsupportedEncodingException {  byte[] bytes=data.getBytes("UTF-8");  MessageDigest md=MessageDigest.getInstance("MD5");  byte[] digest=md.digest(bytes);  BigInteger bigInt=new BigInteger(1,digest);  return bigInt.toString(16);}  }
class C{  public void removeRow(int row){  data.remove(row);}  }
class C{  public OutputStatement(String fname,FunctionCallIdentifier fci,String filename,int blp,int bcp,int elp,int ecp) throws LanguageException {  setAllPositions(filename,blp,bcp,elp,ecp);  DataOp op=Expression.DataOp.WRITE;  ArrayList<ParameterExpression> passedExprs=fci.getParamExprs();  _paramsExpr=new DataExpression(op,new HashMap<String,Expression>(),filename,blp,bcp,elp,ecp);  if (passedExprs.size() < 2)   raiseValidateError("write method must specify both variable to write to file, and filename to write variable to"); else {    ParameterExpression firstParam=passedExprs.get(0);    if (firstParam.getName() != null || (!(firstParam.getExpr() instanceof DataIdentifier)))     raiseValidateError("first argument to write method must be name of variable to be written out"); else     _id=(DataIdentifier)firstParam.getExpr();    ParameterExpression secondParam=passedExprs.get(1);    if (secondParam.getName() != null || (secondParam.getName() != null && secondParam.getName().equals(DataExpression.IO_FILENAME)))     raiseValidateError("second argument to write method must be filename of file variable written to"); else     addExprParam(DataExpression.IO_FILENAME,secondParam.getExpr(),false);    for (int i=2; i < passedExprs.size(); i++) {      ParameterExpression currParam=passedExprs.get(i);      addExprParam(currParam.getName(),currParam.getExpr(),false);    }    if (fname.equals("writeMM")) {      StringIdentifier writeMMExpr=new StringIdentifier(DataExpression.FORMAT_TYPE_VALUE_MATRIXMARKET,this.getFilename(),this.getBeginLine(),this.getBeginColumn(),this.getEndLine(),this.getEndColumn());      addExprParam(DataExpression.FORMAT_TYPE,writeMMExpr,false);    } else     if (fname.equals("write.csv")) {      StringIdentifier delimitedExpr=new StringIdentifier(DataExpression.FORMAT_TYPE_VALUE_CSV,this.getFilename(),this.getBeginLine(),this.getBeginColumn(),this.getEndLine(),this.getEndColumn());      addExprParam(DataExpression.FORMAT_TYPE,delimitedExpr,false);    }  }}  }
class C{  @Transactional public <VO>VO updateByPO(Class<VO> voType,T inputPO,User currentUser) throws Exception {  return transformer.po2VO(voType,updateByPO(inputPO,currentUser));}  }
class C{  public OperationAbortedException(String msg){  super(msg);}  }
class C{  @Override public void onMarkerDragStart(Marker marker){  handleMarkerEvent("didBeginDraggingMarker",marker);}  }
class C{  public int length(){  if (parent == null) {    return 0;  } else {    return 1 + parent.length();  }}  }
class C{  public Object clone(){  Style clone=null;  try {    clone=(Style)super.clone();  } catch (  CloneNotSupportedException cnse) {    cnse.printStackTrace();    return null;  }  clone.foreground=foreground;  clone.background=background;  clone.font=font;  clone.underline=underline;  clone.fontMetrics=fontMetrics;  return clone;}  }
class C{  public String toString(){  String hex;  StringBuffer ret;  ret=new StringBuffer(6 + 8 + 2);  hex=Integer.toHexString(getCharacter());  ret.append("\\u");  for (int i=hex.length(); i < 4; i++)   ret.append("0");  ret.append(hex);  ret.append("[");  ret.append(getKernel());  ret.append("]");  return (ret.toString());}  }
class C{  public long simpleQueryForLong(){  acquireReference();  try {    return getSession().executeForLong(getSql(),getBindArgs(),getConnectionFlags());  } catch (  SQLiteDatabaseCorruptException ex) {    onCorruption();    throw ex;  } finally {    releaseReference();  }}  }
class C{  private void populateParametersUI(String interpolatorName,LinearLayout parent){  parent.removeAllViews();  try {switch (interpolatorName) {case "Quadratic Path":      createQuadraticPathInterpolator(parent);    break;case "Cubic Path":  createCubicPathInterpolator(parent);break;case "AccelerateDecelerate":mVisualizer.setInterpolator(new AccelerateDecelerateInterpolator());break;case "Linear":mVisualizer.setInterpolator(new LinearInterpolator());break;case "Bounce":mVisualizer.setInterpolator(new BounceInterpolator());break;case "Accelerate":Constructor<AccelerateInterpolator> decelConstructor=AccelerateInterpolator.class.getConstructor(float.class);createParamaterizedInterpolator(parent,decelConstructor,"Factor",1,5,1);break;case "Decelerate":Constructor<DecelerateInterpolator> accelConstructor=DecelerateInterpolator.class.getConstructor(float.class);createParamaterizedInterpolator(parent,accelConstructor,"Factor",1,5,1);break;case "Overshoot":Constructor<OvershootInterpolator> overshootConstructor=OvershootInterpolator.class.getConstructor(float.class);createParamaterizedInterpolator(parent,overshootConstructor,"Tension",1,5,1);break;case "Anticipate":Constructor<AnticipateInterpolator> anticipateConstructor=AnticipateInterpolator.class.getConstructor(float.class);createParamaterizedInterpolator(parent,anticipateConstructor,"Tension",1,5,1);break;}} catch (NoSuchMethodException e) {Log.e("InterpolatorPlayground","Error constructing interpolator: " + e);}}  }
class C{  @Override protected Iterator<Map.Entry<K,V>> createEntrySetIterator(){  return new ReferenceEntrySetIterator<K,V>(this);}  }
class C{  public void selectOperators(List<Operator> ops){  if (substModel.isActivateBSSVS()) {    ops.add(getOperator(OperatorType.BITFIP_IN_SUBST.toString()));  }}  }
class C{  public static AvgProjectionExpression avg(String propertyName){  return new AvgProjectionExpression(getPropExpr(propertyName),false);}  }
class C{  public static Text valueOf(long l){  TextBuilder tb=new TextBuilder();  return tb.append(l).toText();}  }
class C{  String readDayOfWeek(String source,int ofs){  int i=findEndText(source,ofs);  if (i == -1) {    i=source.length();  }  String fragment=source.substring(ofs,i);  for (  String weekday : getDateFormatSymbols().getWeekdays()) {    if (fragment.equalsIgnoreCase(weekday)) {      return source.substring(ofs,ofs + weekday.length());    }  }  for (  String weekday : getDateFormatSymbols().getShortWeekdays()) {    if (fragment.equalsIgnoreCase(weekday)) {      return source.substring(ofs,ofs + weekday.length());    }  }  return null;}  }
class C{  public void doClose(final Tradestrategy tradestrategy){  for (int index=0; index < m_jTabbedPaneContract.getTabCount(); index++) {    ChartPanel chart=(ChartPanel)m_jTabbedPaneContract.getComponentAt(index);    if ((null != chart) && chart.getTradestrategy().getIdTradeStrategy().equals(tradestrategy.getIdTradeStrategy())) {      doClose(index);      break;    }  }}  }
class C{  public <DatabaseType extends PropertyDatabase<KeyType,Property>,KeyType extends FieldOrMethodDescriptor,Property>DatabaseType loadPropertyDatabaseFromResource(DatabaseType database,String resourceName,String description){  try {    if (DEBUG) {      System.out.println("Loading default " + description + " from "+ resourceName+ " @ "+ database.getClass().getResource(resourceName)+ " ... ");    }    try (InputStream in=database.getClass().getResourceAsStream(resourceName)){      if (in == null) {        AnalysisContext.logError("Unable to load " + description + " from resource "+ resourceName);      } else {        database.read(in);      }    }     return database;  } catch (  IOException e) {    getLookupFailureCallback().logError("Error loading " + description,e);  }catch (  PropertyDatabaseFormatException e) {    getLookupFailureCallback().logError("Invalid " + description,e);  }  return null;}  }
class C{  static String completeXform(SimpleObject post) throws SAXException, IOException {  String xml=(String)post.get("xml");  Integer patientId=(Integer)post.get("patient_id");  int entererId=(Integer)post.get("enterer_id");  String dateEntered=(String)post.get("date_entered");  dateEntered=workAroundClientIssue(dateEntered);  Document doc=XmlUtil.parse(xml);  Element root=doc.getDocumentElement();  Element patient=getFirstElementOrCreate(doc,root,"patient");  Element patientIdElement=getFirstElementOrCreate(doc,patient,"patient.patient_id");  if (patientId != null) {    patientIdElement.setTextContent(String.valueOf(patientId));  }  Element header=getElementOrThrow(root,"header");  getElementOrThrow(header,"enterer").setTextContent(entererId + "^");  getElementOrThrow(header,"date_entered").setTextContent(dateEntered);  Date datetime=Utils.fixEncounterDateTime(getEncounterDatetime(doc));  setEncounterDatetime(doc,datetime);  Element obs=getFirstElementOrCreate(doc,root,"obs");  obs.setAttribute("openmrs_concept","1238^MEDICAL RECORD OBSERVATIONS^99DCT");  obs.setAttribute("openmrs_datatype","ZZ");  for (  Element element : getElements(root)) {    if (!KNOWN_CHILD_ELEMENTS.contains(element.getLocalName())) {      for (      Element observation : getElements(element)) {        obs.appendChild(observation);      }      removeNode(element);    }  }  return XformsUtil.doc2String(doc);}  }
class C{  public Boolean isIpv4EnableSettable(){  return ipv4EnableSettable;}  }
class C{  public Weeks toStandardWeeks(){  checkYearsAndMonths("Weeks");  long millis=getMillis();  millis+=((long)getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;  millis+=((long)getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE;  millis+=((long)getHours()) * DateTimeConstants.MILLIS_PER_HOUR;  millis+=((long)getDays()) * DateTimeConstants.MILLIS_PER_DAY;  long weeks=((long)getWeeks()) + millis / DateTimeConstants.MILLIS_PER_WEEK;  return Weeks.weeks(FieldUtils.safeToInt(weeks));}  }
class C{  public void copy(Automaton other){  int offset=getNumStates();  int otherNumStates=other.getNumStates();  copyStates(other);  Transition t=new Transition();  for (int s=0; s < otherNumStates; s++) {    int count=other.initTransition(s,t);    for (int i=0; i < count; i++) {      other.getNextTransition(t);      addTransition(offset + s,offset + t.dest,t.min,t.max);    }  }}  }
class C{  public void test_getX() throws Exception {  KeyPairGenerator keyGen=KeyPairGenerator.getInstance("DSA");  keyGen.initialize(new DSAParameterSpec(Util.P,Util.Q,Util.G),new SecureRandom(new MySecureRandomSpi(),null){  });  KeyPair keyPair=keyGen.generateKeyPair();  DSAPrivateKey key=(DSAPrivateKey)keyPair.getPrivate();  assertNotNull("Invalid X value",key.getX());}  }
class C{  public void printStackTrace(){  Throwable t;  StringWriter writer;  writer=new StringWriter();  t=new Throwable();  t.fillInStackTrace();  t.printStackTrace(new PrintWriter(writer));  println(writer.toString());}  }
class C{  public void testOpenMissing() throws Exception {  create(igfsSecondary,paths(DIR,SUBDIR),null);  create(igfs,null,null);  createFile(igfsSecondary,FILE,chunk);  checkFileContent(igfs,FILE,chunk);}  }
class C{  public static <T1,T2,T3,T4,T5,T6,T7,R>Supplier<R> partial7(final T1 t1,final T2 t2,final T3 t3,final T4 t4,final T5 t5,final T6 t6,final T7 t7,final HeptFunction<T1,T2,T3,T4,T5,T6,T7,R> heptFunc){  return null;}  }
class C{  public PainterChain(Painter painter){  this.chain=new Painter[]{painter};}  }
class C{  public static double sampleStandardDeviation(int size,double sampleVariance){  double s, Cn;  int n=size;  s=Math.sqrt(sampleVariance);  if (n > 30) {    Cn=1 + 1.0 / (4 * (n - 1));  } else {    Cn=Math.sqrt((n - 1) * 0.5) * Gamma.gamma((n - 1) * 0.5) / Gamma.gamma(n * 0.5);  }  return Cn * s;}  }
class C{  public static boolean isEquals(Object actual,Object expected){  return actual == expected || (actual == null ? expected == null : actual.equals(expected));}  }
class C{  public static void append(Path self,byte[] bytes) throws IOException {  OutputStream stream=null;  try {    stream=Files.newOutputStream(self,CREATE,APPEND);    stream.write(bytes,0,bytes.length);    stream.flush();    OutputStream temp=stream;    stream=null;    temp.close();  }  finally {    closeWithWarning(stream);  }}  }
class C{  public ServiceEndpoint(String name,String endpoint,String responseEndpoint,String binding){  ValidateUtil.validateNotEmpty(endpoint,"endpoint");  ValidateUtil.validateNotEmpty(binding,"binding");  if (name == null || name.isEmpty()) {    name=endpoint;  }  this.name=name;  this.endpoint=endpoint;  this.responseEndpoint=responseEndpoint;  this.binding=binding;}  }
class C{  public SecureChannel createSecureChannel(String endpointUrl) throws ServiceResultException {  return createSecureChannel(endpointUrl,endpointUrl);}  }
class C{  private void addSystemPermissions(Set<SystemPermission.Type> permissions,SystemPermissionSet permSet) throws GuacamoleException {  for (  SystemPermission permission : permSet.getPermissions())   permissions.add(permission.getType());}  }
class C{  private String replaceWithLocaleDecimalSeparator(PlatformUser user,String numberString){  Locale locale=LocaleHandler.getLocaleFromString(user.getLocale());  DecimalFormatSymbols dfs=new DecimalFormatSymbols(locale);  char dfsChar=dfs.getDecimalSeparator();  numberString=numberString.replace('.',dfsChar);  return numberString;}  }
class C{  public static boolean doesFileExist(String filePath,String filename){  if ((filePath == null) || filePath.isEmpty() || (filename == null)|| filename.isEmpty()) {    return false;  }  return doesFileExist(filePath + File.separator + filename);}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY);  builder.addAttribute(VERSION);  builder.addAttribute(URI);}  }
class C{  final public boolean equalsIgnoreCase(final MutableString s){  if (this == s)   return true;  if (s == null)   return false;  final int n=length();  if (n == s.length()) {    final char[] a1=array;    final char[] a2=s.array;    for (int i=0; i < n; i++) {      if (a1[i] != a2[i] && Character.toLowerCase(a1[i]) != Character.toLowerCase(a2[i]) && Character.toUpperCase(a1[i]) != Character.toUpperCase(a2[i]))       return false;    }    return true;  }  return false;}  }
class C{  public OMLine(int x1,int y1,int x2,int y2){  super(RENDERTYPE_XY,LINETYPE_STRAIGHT,DECLUTTERTYPE_NONE);  pts=new int[4];  pts[0]=x1;  pts[1]=y1;  pts[2]=x2;  pts[3]=y2;}  }
class C{  public static void failNotEquals(String message,Object expected,Object actual){  fail(format(message,expected,actual,false));}  }
class C{  @Override public Builder<K,V> putAll(K key,V... values){  super.putAll(key,values);  return this;}  }
class C{  private Builder(com.linkedin.camus.example.records.DummyLog.Builder other){  super(other);}  }
class C{  public LeftBarItemsListAdapter(Context context){  mContext=context;  if (mItems == null) {    mItems=new ArrayList<FragmentListItem>();    mItems.add(new FragmentListItem(mContext.getResources().getString(R.string.leftbar_allapps),AppActivity.class.getName()));    mItems.add(new FragmentListItem(mContext.getResources().getString(R.string.leftbar_infos),InfosPrefActivity.class.getName()));    mItems.add(new FragmentListItem(mContext.getResources().getString(R.string.leftbar_updates),UpdaterActivity.class.getName()));    mItems.add(new FragmentListItem(mContext.getResources().getString(R.string.leftbar_settings),PreferenceActivity.class.getName()));  }}  }
class C{  public boolean primary(){  return this.primary;}  }
class C{  public ExpressionCache(DebugCLI cli){  m_builder=new ASTBuilder(true);  m_expressions=new Vector<Object>();  m_props=new IntProperties();  m_cli=cli;}  }
class C{  public static boolean isMnemonicHidden(){  if (UIManager.getBoolean("Button.showMnemonics")) {    isMnemonicHidden=false;  }  return isMnemonicHidden;}  }
class C{  private void addElements(int numberOfElements){  int newlen=m_firstFree + numberOfElements;  if (newlen > m_blocksize) {    int index=m_firstFree >>> m_SHIFT;    int newindex=(m_firstFree + numberOfElements) >>> m_SHIFT;    for (int i=index + 1; i <= newindex; ++i)     m_map[i]=new int[m_blocksize];  }  m_firstFree=newlen;}  }
class C{  public AsteroidsWithUI(SimState state){  super(state);}  }
class C{  public void stop(){  if (folder == null && store == null && pollingSchedule == null) {    return;  }  isStopping=true;  try {    folder.close(true);    store.close();    if (pollingSchedule != null && !pollingSchedule.isCancelled()) {      pollingSchedule.cancel();    }  } catch (  MessagingException e) {    play.Logger.error("Error occurred while stop the email receiver",e);  }}  }
class C{  private void dumpBuffer(){  output.append(buffer);  buffer=new StringBuilder();}  }
class C{  public AsynchOutputStream(OutputStream stream){  this(stream,DEFAULT_PIPE_SIZE);}  }
class C{  private void buildAgencyWiseDemand(final Set<AgencyWiseCollectionDetail> agencyWiseCollectionDetails,final BigDecimal totalAmount,final AgencyWiseCollection agencyWiseCollection,final Installment installment){  final EgDemand agencyWiseDemand=new EgDemand();  final HashMap<EgDemandReason,BigDecimal> demandReasonWiseList=getAmountGroupingDemandReason(agencyWiseCollectionDetails);  if (demandReasonWiseList.size() > 0)   demandReasonWiseList.forEach(null);  agencyWiseDemand.setEgInstallmentMaster(installment);  agencyWiseDemand.setIsHistory("Y");  agencyWiseDemand.setCreateDate(new Date());  agencyWiseDemand.setBaseDemand(totalAmount);  agencyWiseDemand.setModifiedDate(new Date());  agencyWiseCollection.setAgencyWiseDemand(agencyWiseDemand);}  }
class C{  @RequestMapping(method=RequestMethod.GET,produces={MediaType.APPLICATION_JSON_UTF8_VALUE}) @ApiOperation(value="list all resources (Regions)",notes="List all available resources (Regions) in the Geode cluster",response=void.class) @ApiResponses({@ApiResponse(code=200,message="OK."),@ApiResponse(code=401,message="Invalid Username or Password."),@ApiResponse(code=403,message="Insufficient privileges for operation."),@ApiResponse(code=500,message="GemFire throws an error or exception.")}) @PreAuthorize("@securityService.authorize('DATA', 'READ')") public ResponseEntity<?> regions(){  logger.debug("Listing all resources (Regions) in Geode...");  final HttpHeaders headers=new HttpHeaders();  headers.setLocation(toUri());  final Set<Region<?,?>> regions=getCache().rootRegions();  String listRegionsAsJson=JSONUtils.formulateJsonForListRegions(regions,"regions");  return new ResponseEntity<>(listRegionsAsJson,headers,HttpStatus.OK);}  }
class C{  @PUT @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public TaskResourceRep updateProtectionSystem(@PathParam("id") URI id,ProtectionSystemUpdateRequestParam param) throws InternalException {  ProtectionSystem system=_dbClient.queryObject(ProtectionSystem.class,id);  ArgValidator.checkEntityNotNull(system,id,isIdEmbeddedInURL(id));  if (!system.getIpAddress().equals(param.getIpAddress())) {    system.setMajorVersion("");    system.setCompatibilityStatus(DiscoveredDataObject.CompatibilityStatus.UNKNOWN.toString());  }  system.setIpAddress(param.getIpAddress());  system.setPortNumber(param.getPortNumber());  system.setUsername(param.getUserName());  system.setPassword(param.getPassword());  system.setLastDiscoveryRunTime(new Long(0));  modifyClusterVarrayAssignments(system,param.getVarrayChanges());  _dbClient.persistObject(system);  auditOp(OperationTypeEnum.UPDATE_PROTECTION_SYSTEM,true,null,system.getId().toString(),param.getIpAddress(),param.getPortNumber(),param.getUserName());  startProtectionSystem(system);  ProtectionController controller=getController(RPController.class,system.getSystemType());  ArrayList<AsyncTask> tasks=new ArrayList<AsyncTask>(1);  String taskId=UUID.randomUUID().toString();  tasks.add(new AsyncTask(ProtectionSystem.class,system.getId(),taskId));  TaskList taskList=discoverProtectionSystems(tasks,controller);  return taskList.getTaskList().iterator().next();}  }
class C{  public void commit(int taskId) throws InterruptedException, ReplicatorException {  ConcurrentLinkedQueue<ReplDBMSEvent> queue=taskQueues.get(taskId);  if (queue.size() == 0) {    if (logger.isDebugEnabled()) {      logger.debug("Empty commit on serial queue: taskId=" + taskId);    }    return;  }  if (commitAction != null)   commitAction.execute(taskId);synchronized (serialQueue) {    while (queue.peek() != null) {      ReplDBMSEvent event=queue.poll();      boolean ok=serialQueue.offer(event,commitTimeout,TimeUnit.SECONDS);      if (!ok) {        throw new ReplicatorException("Commit timed out: taskId=" + taskId + " timeout="+ commitTimeout);      }      if (logger.isDebugEnabled()) {        logger.debug("Committing on serial queue: taskId=" + taskId + " seqno="+ event.getSeqno()+ " shardId="+ event.getShardId());      }    }    queue.clear();    commitCount++;  }}  }
class C{  private void updateNullableProperty(final String key,final String value){  if (value == null || value.isEmpty()) {    this.syncConf.removeConfig(key);  } else {    this.syncConf.setConfig(key,value);  }}  }
class C{  public void addNotifyTask(Runnable whenDone){  if (queue != null) {    queue.addNotifyTask(whenDone);  }}  }
class C{  public UpdateRequest doc(Map source,XContentType contentType){  safeDoc().source(source,contentType);  return this;}  }
class C{  static void addFilePermissions(Permissions policy,Environment environment) throws IOException {  addPath(policy,"path.home",environment.binFile(),"read,readlink");  addPath(policy,"path.home",environment.libFile(),"read,readlink");  addPath(policy,"path.plugins",environment.pluginsFile(),"read,readlink");  addPath(policy,"path.conf",environment.configFile(),"read,readlink");  addPath(policy,"path.scripts",environment.scriptsFile(),"read,readlink");  addPath(policy,"java.io.tmpdir",environment.tmpFile(),"read,readlink,write,delete");  addPath(policy,"path.logs",environment.logsFile(),"read,readlink,write,delete");  if (environment.sharedDataFile() != null) {    addPath(policy,"path.shared_data",environment.sharedDataFile(),"read,readlink,write,delete");  }  for (  Path path : environment.dataFiles()) {    addPath(policy,"path.data",path,"read,readlink,write,delete");  }  for (  Path path : environment.dataWithClusterFiles()) {    addPath(policy,"path.data",path,"read,readlink,write,delete");  }  for (  Path path : environment.repoFiles()) {    addPath(policy,"path.repo",path,"read,readlink,write,delete");  }  if (environment.pidFile() != null) {    policy.add(new FilePermission(environment.pidFile().toString(),"delete"));  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case MappingPackage.REFERENCE_TARGET__MAPPING_MODEL:    setMappingModel((MappingModel)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  KeyToGroupMap result=(KeyToGroupMap)super.clone();  result.defaultGroup=(Comparable)KeyToGroupMap.clone(this.defaultGroup);  result.groups=(List)KeyToGroupMap.clone(this.groups);  result.keyToGroupMap=(Map)KeyToGroupMap.clone(this.keyToGroupMap);  return result;}  }
class C{  private static void arcToBezier(Path p,double cx,double cy,double a,double b,double e1x,double e1y,double theta,double start,double sweep){  int numSegments=Math.abs((int)Math.ceil(sweep * 4 / Math.PI));  double eta1=start;  double cosTheta=Math.cos(theta);  double sinTheta=Math.sin(theta);  double cosEta1=Math.cos(eta1);  double sinEta1=Math.sin(eta1);  double ep1x=(-a * cosTheta * sinEta1) - (b * sinTheta * cosEta1);  double ep1y=(-a * sinTheta * sinEta1) + (b * cosTheta * cosEta1);  double anglePerSegment=sweep / numSegments;  for (int i=0; i < numSegments; i++) {    double eta2=eta1 + anglePerSegment;    double sinEta2=Math.sin(eta2);    double cosEta2=Math.cos(eta2);    double e2x=cx + (a * cosTheta * cosEta2) - (b * sinTheta * sinEta2);    double e2y=cy + (a * sinTheta * cosEta2) + (b * cosTheta * sinEta2);    double ep2x=-a * cosTheta * sinEta2 - b * sinTheta * cosEta2;    double ep2y=-a * sinTheta * sinEta2 + b * cosTheta * cosEta2;    double tanDiff2=Math.tan((eta2 - eta1) / 2);    double alpha=Math.sin(eta2 - eta1) * (Math.sqrt(4 + (3 * tanDiff2 * tanDiff2)) - 1) / 3;    double q1x=e1x + alpha * ep1x;    double q1y=e1y + alpha * ep1y;    double q2x=e2x - alpha * ep2x;    double q2y=e2y - alpha * ep2y;    p.cubicTo((float)q1x,(float)q1y,(float)q2x,(float)q2y,(float)e2x,(float)e2y);    eta1=eta2;    e1x=e2x;    e1y=e2y;    ep1x=ep2x;    ep1y=ep2y;  }}  }
class C{  public boolean hasAttribute(String attribute){  return (containsKey(attribute));}  }
class C{  public int longestSubstring(String s,int k){  return helper(s,0,s.length(),k);}  }
class C{  public static void cancelWork(ImageView imageView){  final BitmapWorkerTask bitmapWorkerTask=getBitmapWorkerTask(imageView);  if (bitmapWorkerTask != null) {    bitmapWorkerTask.cancel(true);  }}  }
class C{  public void updateCachedKeys() throws Exception {  TokenKeysBundle bundle=readBundle();  if (bundle != null) {    updateCachedTokenKeys(bundle);  } else {    _log.debug("Did not update cache.  Keys bundle was null.  Bundle may not be available yet");  }}  }
class C{  public void testReplaceVariableResolver() throws Exception {  HtmlPage page=webClient.getPage(webUrl + "faces/test.jsp");  assertTrue(-1 != page.asText().indexOf("Invoking the resolver chain: success."));  assertTrue(-1 != page.asText().indexOf("Invoking the resolver directly: success."));}  }
class C{  private static void initScanner(final WebAppContext web,final Configs config){  int scanIntervalSeconds=config.getScanIntervalSeconds();  final ArrayList<File> scanList=new ArrayList<File>();  System.err.println("init scanning folders...");  if (config.getScanlist() != null) {    String[] items=config.getScanlist().split(File.pathSeparator);    for (    String item : items) {      File f=new File(item);      scanList.add(f);      System.err.println("add to scan list:" + item);    }  }  Scanner scanner=new Scanner();  scanner.setScanInterval(scanIntervalSeconds);  scanner.setScanDirs(scanList);  scanner.setRecursive(true);  scanner.setReportExistingFilesOnStartup(false);  scanner.addListener(new RJRFileChangeListener(web,config));  System.err.println("Starting scanner at interval of " + scanIntervalSeconds + " seconds.");  try {    scanner.start();  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public void stopScan(){  if (networkScanner != null && !networkScanner.isCancelled()) {    networkScanner.cancel(true);  }}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  public static int boolToInt(boolean bool){  return bool ? 1 : 0;}  }
class C{  public ApkLegacy(File odexFile){  this.origOdex=odexFile;  this.origApk=new File(origOdex.getAbsolutePath().subSequence(0,origOdex.getAbsolutePath().lastIndexOf(".")) + S.APK_EXT);}  }
class C{  public void encoding(String charset){  setEncoding(charset);}  }
class C{  public TileEntityElectricBlock(String name,double baseMaxEnergy){  super(name);  BASE_MAX_ENERGY=baseMaxEnergy;  maxEnergy=BASE_MAX_ENERGY;}  }
class C{  private void loadPostDetails(){  int delay=Sdk.isAtLeastLollipop() ? 500 : 100;  feedService.loadPostDetails(feedItem.id()).delay(delay,TimeUnit.MILLISECONDS,AndroidSchedulers.mainThread()).compose(bindUntilEventAsync(FragmentEvent.DESTROY_VIEW)).subscribe(null,defaultOnError());}  }
class C{  public static long computeSizeInBytes(BufferedImage image){  if (image == null) {    String message=Logging.getMessage("nullValue.ImageIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  long size=0L;  java.awt.image.Raster raster=image.getRaster();  if (raster != null) {    java.awt.image.DataBuffer db=raster.getDataBuffer();    if (db != null) {      size=computeSizeOfDataBuffer(db);    }  }  return size;}  }
class C{  public static InetAddress increment(InetAddress address){  byte[] addr=address.getAddress();  int i=addr.length - 1;  while (i >= 0 && addr[i] == (byte)0xff) {    addr[i]=0;    i--;  }  Preconditions.checkArgument(i >= 0,"Incrementing %s would wrap.",address);  addr[i]++;  return bytesToInetAddress(addr);}  }
class C{  @Override public double[] logDensityPerClusterForInstance(Instance inst) throws Exception {  int i, j;  double logprob;  double[] wghts=new double[m_num_clusters];  if (!m_training) {    m_replaceMissing.input(inst);    inst=m_replaceMissing.output();  }  for (i=0; i < m_num_clusters; i++) {    logprob=0.0;    for (j=0; j < m_num_attribs; j++) {      if (!inst.isMissing(j)) {        if (inst.attribute(j).isNominal()) {          logprob+=Math.log(m_model[i][j].getProbability(inst.value(j)));        } else {          logprob+=logNormalDens(inst.value(j),m_modelNormal[i][j][0],m_modelNormal[i][j][1]);        }      }    }    wghts[i]=logprob;  }  return wghts;}  }
class C{  private Product validateForProductActivation(VOService product) throws ObjectNotFoundException, ServiceOperationException, TechnicalServiceNotAliveException, ServiceNotPublishedException {  Product prod=dm.getReference(Product.class,product.getKey());  PriceModel priceModel;  if (prod.getVendor().getGrantedRoleTypes().contains(OrganizationRoleType.SUPPLIER)) {    priceModel=prod.getPriceModel();  } else {    priceModel=prod.getTemplate().getPriceModel();  }  if (priceModel == null) {    ServiceOperationException sof=new ServiceOperationException(ServiceOperationException.Reason.MISSING_PRICE_MODEL);    logger.logWarn(Log4jLogger.SYSTEM_LOG | Log4jLogger.AUDIT_LOG,sof,LogMessageIdentifier.WARN_PRODUCT_AVTIVATION_FAILED_MISSING_PRICE_MODEL,Long.toString(prod.getKey()));    throw sof;  }  if (prod.getCatalogEntries() != null) {    for (    CatalogEntry ce : prod.getCatalogEntries()) {      if (ce.getMarketplace() == null) {        Object[] params=new Object[]{prod.getProductId()};        ServiceNotPublishedException snp=new ServiceNotPublishedException(params);        logger.logWarn(Log4jLogger.SYSTEM_LOG | Log4jLogger.AUDIT_LOG,snp,LogMessageIdentifier.WARN_PRODUCT_AVTIVATION_FAILED_NOT_PUBLISHED_MARKETPLACE,Long.toString(prod.getKey()));        throw snp;      }    }  }  try {    appManager.validateCommunication(prod.getTechnicalProduct());  } catch (  TechnicalServiceNotAliveException e) {    TechnicalServiceNotAliveException ex=new TechnicalServiceNotAliveException(TechnicalServiceNotAliveException.Reason.SUPPLIER,new Object[]{prod.getTechnicalProduct().getTechnicalProductId()},e);    logger.logWarn(Log4jLogger.SYSTEM_LOG,ex,LogMessageIdentifier.WARN_TECH_SERVICE_NOT_AVAILABLE,prod.getTechnicalProduct().getTechnicalProductId());    throw ex;  }  return prod;}  }
class C{  public String name(){  return name;}  }
class C{  public static void print(String s,PrintStream logger){  if (logger != null) {    StackTraceElement[] stack=Thread.currentThread().getStackTrace();    StackTraceElement parentMethod=stack[2];    String className=parentMethod.getClassName();    int lastPeriod=className.lastIndexOf(".");    String truncatedClassName=className.substring(lastPeriod + 1,className.length());    logger.println(truncatedClassName + " : " + parentMethod.getMethodName()+ "("+ parentMethod.getLineNumber()+ ") : "+ s);  }}  }
class C{  public static Object parse(String s){  StringReader in=new StringReader(s);  return parse(in);}  }
class C{  Product prepareProductWithPriceModel(VOServiceDetails voProductDetails,VOPriceModel voPriceModel,Organization targetCustomer,ServiceType productType,Subscription subscription) throws ObjectNotFoundException, OperationNotPermittedException, CurrencyException, ValidationException, ServiceStateException, ConcurrentModificationException {  PlatformUser currentUser=dm.getCurrentUser();  Organization org=currentUser.getOrganization();  validateExternalServiceMustBeFree(voPriceModel,voProductDetails);  Product product=dm.getReference(Product.class,voProductDetails.getKey());  boolean isCreatePriceModel=product.getPriceModel() == null;  boolean priceModelCreatedInTransaction=false;  boolean isTemplateExistsForCustomer=false;  if (productType == ServiceType.CUSTOMER_TEMPLATE) {    if (product.getTemplate() == null) {      priceModelCreatedInTransaction=true;      product=copyCustomerProduct(targetCustomer,currentUser,product);      if (!isCreatePriceModel) {        isTemplateExistsForCustomer=true;      }    }  }  PermissionCheck.ownsPriceModel(product,org,logger,sessionCtx);  if (product.getOwningSubscription() == null) {    ProductValidator.validateInactiveOrSuspended(ProductAssembler.getProductId(product),product.getStatus());  }  boolean newPriceModelCreated=false;  PriceModel priceModel=product.getPriceModel();  if (priceModel != null) {    newPriceModelCreated=priceModelCreatedInTransaction;    if (!priceModelCreatedInTransaction) {      BaseAssembler.verifyVersionAndKey(priceModel,voPriceModel);    }  } else {    priceModel=new PriceModel();    newPriceModelCreated=true;  }  if (product.getTechnicalProduct().getAccessType() == ServiceAccessType.DIRECT) {    PriceModelAssembler.validateForDirectAccess(voPriceModel);  }  PriceModelAssembler.validatePriceModelSettings(voPriceModel);  priceModel.setProduct(product);  if (voPriceModel.isChargeable()) {    setPriceModelToChargeable(voPriceModel,priceModel,priceModelCreatedInTransaction,isCreatePriceModel,productType,targetCustomer,subscription,isTemplateExistsForCustomer);  } else {    if (voPriceModel.isExternal()) {      setPriceModelToExternal(voPriceModel,priceModel);      priceModel.setExternal(true);      priceModel.setUuid(voPriceModel.getUuid());    } else {      setPriceModelToFree(voPriceModel,priceModel);    }  }  product.setPriceModel(priceModel);  persistProduct(currentUser,product);  dm.flush();  boolean descriptionChanged=localizePriceModel(voPriceModel,currentUser,priceModel);  boolean licenseChanged=false;  if (!ServiceType.isSubscription(productType)) {    licenseChanged=saveLicenseInformationForPriceModel(voProductDetails.getTechnicalService().getKey(),priceModel.getKey(),voPriceModel,currentUser,newPriceModelCreated);  }  if (licenseChanged || descriptionChanged) {    if (ServiceType.isTemplate(productType)) {      priceModelAudit.addLogEntryForAuditLogData(dm,product,product.getTargetCustomer(),currentUser.getLocale(),descriptionChanged,licenseChanged);    } else     if (ServiceType.isSubscription(productType)) {      subscriptionAudit.addLogEntryForAuditLogData(dm,product.getOwningSubscription(),currentUser.getLocale(),descriptionChanged,licenseChanged);    }  }  consolidateSteppedPrices(priceModel);  return product;}  }
class C{  public static long timeTasks(int nThreads,Runnable task,String baseThreadName) throws InterruptedException {  return timeTasks(nThreads,Executors.callable(task),baseThreadName).getExecutionTime();}  }
class C{  @Override public void propertyChange(PropertyChangeEvent evt){  String prop=evt.getPropertyName();  if ("AccessibleValue".equals(prop) || "AccessibleText".equals(prop) || ("AccessibleVisibleData".equals(prop) && evt.getSource().getClass().getName().contains("JList"))) {    _modified=true;  }}  }
class C{  public StatementBuilder append(char c){  builder.append(c);  return this;}  }
class C{  public static byte[] encodeBase64URLSafe(final byte[] binaryData){  return encodeBase64(binaryData,false,true);}  }
class C{  public void eachFile(BiConsumer<ConfigurationLocation,ConfigurationFile> consumer){  files.forEach(null);}  }
class C{  public void clearRangeMarkers(int index){  Integer key=new Integer(index);  if (this.backgroundRangeMarkers != null) {    Collection markers=(Collection)this.backgroundRangeMarkers.get(key);    if (markers != null) {      Iterator iterator=markers.iterator();      while (iterator.hasNext()) {        Marker m=(Marker)iterator.next();        m.removeChangeListener(this);      }      markers.clear();    }  }  if (this.foregroundRangeMarkers != null) {    Collection markers=(Collection)this.foregroundRangeMarkers.get(key);    if (markers != null) {      Iterator iterator=markers.iterator();      while (iterator.hasNext()) {        Marker m=(Marker)iterator.next();        m.removeChangeListener(this);      }      markers.clear();    }  }  fireChangeEvent();}  }
class C{  public Chronology withZone(DateTimeZone zone){  if (zone == null) {    zone=DateTimeZone.getDefault();  }  if (zone == getZone()) {    return this;  }  return getInstance(zone);}  }
class C{  protected BooleanPropertyAttributeImpl(){  super();}  }
class C{  public double[] computeLocalFromPreviousObservations(int source[],int dest[]){  int timeSteps=dest.length;  double[] localTE=new double[timeSteps];  average=0;  max=0;  min=0;  if (timeSteps - startObservationTime <= 0) {    return localTE;  }  int[] pastVal=new int[destEmbeddingDelay];  for (int d=0; d < destEmbeddingDelay; d++) {    pastVal[d]=0;    for (int p=0; p < k - 1; p++) {      pastVal[d]+=dest[startObservationTime + d - 1 - (k - 1) * destEmbeddingDelay + p * destEmbeddingDelay];      pastVal[d]*=base;    }  }  int[] sourcePastVal=new int[sourceEmbeddingDelay];  for (int d=0; d < sourceEmbeddingDelay; d++) {    sourcePastVal[d]=0;    for (int p=0; p < sourceHistoryEmbedLength - 1; p++) {      sourcePastVal[d]+=source[startObservationTime + d - delay - (sourceHistoryEmbedLength - 1) * sourceEmbeddingDelay + p * sourceEmbeddingDelay];      sourcePastVal[d]*=base;    }  }  int destVal, destEmbeddingPhase=0, sourceEmbeddingPhase=0;  double logTerm;  for (int t=startObservationTime; t < timeSteps; t++) {    if (k > 0) {      pastVal[destEmbeddingPhase]+=dest[t - 1];    }    sourcePastVal[sourceEmbeddingPhase]+=source[t - delay];    destVal=dest[t];    int thisPastVal=pastVal[destEmbeddingPhase];    int thisSourceVal=sourcePastVal[sourceEmbeddingPhase];    logTerm=((double)sourceNextPastCount[thisSourceVal][destVal][thisPastVal] / (double)sourcePastCount[thisSourceVal][thisPastVal]) / ((double)nextPastCount[destVal][thisPastVal] / (double)pastCount[thisPastVal]);    localTE[t]=Math.log(logTerm) / log_2;    if (localTE[t] > max) {      max=localTE[t];    } else     if (localTE[t] < min) {      min=localTE[t];    }    if (k > 0) {      pastVal[destEmbeddingPhase]-=maxShiftedValue[dest[t - 1 - (k - 1) * destEmbeddingDelay]];      pastVal[destEmbeddingPhase]*=base;    }    sourcePastVal[sourceEmbeddingPhase]-=maxShiftedSourceValue[source[t - delay - (sourceHistoryEmbedLength - 1) * sourceEmbeddingDelay]];    sourcePastVal[sourceEmbeddingPhase]*=base;    destEmbeddingPhase=(destEmbeddingPhase + 1) % destEmbeddingDelay;    sourceEmbeddingPhase=(sourceEmbeddingPhase + 1) % sourceEmbeddingDelay;  }  average=average / (double)(timeSteps - startObservationTime);  return localTE;}  }
class C{  protected static boolean iterationCount(double i,boolean cond){  return GraalDirectives.injectIterationCount(i,cond);}  }
class C{  @PostConstruct private void init(){  createComponents();  buildLayout();  eventBus.subscribe(this);  if (artifactUploadState.getSelectedBaseSoftwareModule().isPresent()) {    final SoftwareModule selectedSoftwareModule=artifactUploadState.getSelectedBaseSoftwareModule().get();    populateArtifactDetails(selectedSoftwareModule.getId(),HawkbitCommonUtil.getFormattedNameVersion(selectedSoftwareModule.getName(),selectedSoftwareModule.getVersion()));  }  if (isMaximized()) {    maximizedArtifactDetailsView();  }}  }
class C{  private void addImageLink(Book book,Element entry,ImageManager iManager,boolean useResizeImage,boolean isCover){  File bookFolder=book.getBookFolder();  CachedFile coverFile=CachedFileManager.addCachedFile(bookFolder,Constants.CALIBRE_COVER_FILENAME);  String imageFilename;  CachedFile imageFile;  String resizedImageFilename=iManager.getResizedFilename();  CachedFile resizedImageFile=CachedFileManager.addCachedFile(bookFolder,resizedImageFilename);  String imageUri=null;  String catalogImageFilename;  if (!coverFile.exists()) {    if (book.isDone() == false) {      if (isCover)       logger.warn("addImageFile:  No cover file found forbook " + book);      if (resizedImageFile.exists()) {        if (logger.isTraceEnabled())         logger.trace("addImageFile: Cover missing, so removing " + resizedImageFile);        resizedImageFile.delete();        CachedFileManager.removeCachedFile(resizedImageFile);        ;      }    }    coverFile=defaultCoverFile;    imageFile=coverFile;    imageUri=defaultCoverUri;    catalogImageFilename=Constants.PARENT_PATH_PREFIX + Constants.DEFAULT_IMAGE_FILENAME;  } else {    FeedHelper.checkFileNameIsNewStandard(resizedImageFile,new File(bookFolder,iManager.getResizedFilenameOld(book)));    if (useResizeImage) {      imageUri=(Helper.isNullOrEmpty(booksURI) ? FeedHelper.urlEncode(Constants.LIBRARY_PATH_PREFIX,true) : booksURI) + FeedHelper.urlEncode(book.getPath() + Constants.FOLDER_SEPARATOR + iManager.getResizedFilename(),true);      imageFile=resizedImageFile;      catalogImageFilename=getBookFolderFilename(book) + Constants.TYPE_SEPARATOR + iManager.getResizedFilename();      if (book.isDone()) {        if (logger.isTraceEnabled())         logger.trace("addImageLink: skipping creating image - book already done previously");      } else {        if (!iManager.hasImageSizeChanged() && resizedImageFile.exists() && (resizedImageFile.lastModified() > coverFile.lastModified())) {          if (logger.isTraceEnabled())           logger.trace("addImageLink: resizedCover exissts - not to be regenerated");        } else {          if (logger.isTraceEnabled()) {            if (!resizedImageFile.exists()) {              logger.trace("addImageLink: resizedImage set to be generated (not already existing)");            } else             if (CatalogManager.coverManager.hasImageSizeChanged()) {              logger.trace("addImageLink: resizedImage set to be generated (image size changed)");            } else             if (resizedImageFile.lastModified() < coverFile.lastModified()) {              logger.trace("addImageLink: resizedImage set to be generated (new cover)");            }          }          iManager.generateImage(resizedImageFile,coverFile.exists() ? coverFile : defaultCoverFile);        }      }    } else {      if (resizedImageFile.exists()) {        if (logger.isTraceEnabled())         logger.trace("addImageLink:  deleted unwanted resized image " + resizedImageFile);        resizedImageFile.delete();      }      imageUri=(Helper.isNullOrEmpty(booksURI) ? FeedHelper.urlEncode(Constants.LIBRARY_PATH_PREFIX,true) : booksURI) + FeedHelper.urlEncode(book.getPath() + Constants.FOLDER_SEPARATOR + Constants.CALIBRE_COVER_FILENAME,true);      imageFile=coverFile;      catalogImageFilename=getBookFolderFilename(book) + Constants.TYPE_SEPARATOR + Constants.CALIBRE_COVER_FILENAME;    }  }  if (iManager.equals(CatalogManager.thumbnailManager) && currentProfile.getGenerateIndex()) {    CatalogManager.thumbnailManager.addBook(book,imageUri);  }  if (!useExternalImages) {    imageUri=iManager.getFileToBase64Uri(imageFile);  } else {    if (!currentProfile.getDeviceMode().equals(DeviceMode.Default)) {      CatalogManager.addFileToTheMapOfFilesToCopy(imageFile);    }  }  if (includeCoversInCatalog) {    if (coverFile.exists()) {      if (!useExternalImages && !catalogImageFilename.equals(Constants.PARENT_PATH_PREFIX + iManager.getDefaultResizedFilename())) {        imageUri=iManager.getFileToBase64Uri(imageFile);      } else {        CatalogManager.addImageFileToTheMapOfCatalogImages(catalogImageFilename,imageFile);        if (isCover) {          imageUri=catalogImageFilename.substring(catalogImageFilename.indexOf(Constants.FOLDER_SEPARATOR) + 1);        } else {          imageUri=Constants.PARENT_PATH_PREFIX + catalogImageFilename;        }      }    }  }  entry.addContent(FeedHelper.getImageLink(imageUri,isCover));}  }
class C{  public static String valueToString(Object value) throws JSONException {  if (value == null || value.equals(null)) {    return "null";  }  if (value instanceof JSONString) {    Object object;    try {      object=((JSONString)value).toJSONString();    } catch (    Exception e) {      throw new JSONException(e);    }    if (object instanceof String) {      return (String)object;    }    throw new JSONException("Bad value from toJSONString: " + object);  }  if (value instanceof Number) {    return numberToString((Number)value);  }  if (value instanceof Boolean || value instanceof JSONObject || value instanceof org.json.JSONArray) {    return value.toString();  }  if (value instanceof Map) {    return new JSONObject((Map<String,Object>)value).toString();  }  if (value instanceof Collection) {    return new org.json.JSONArray((Collection<Object>)value).toString();  }  if (value.getClass().isArray()) {    return new org.json.JSONArray(value).toString();  }  return quote(value.toString());}  }
class C{  private void showErrorToast(String message){  Toast.makeText(LoginActivity.this,message,Toast.LENGTH_LONG).show();}  }
class C{  public void propertyChange(PropertyChangeEvent e){  if (e.getSource() == splitPane) {    if (e.getPropertyName() == JSplitPane.ORIENTATION_PROPERTY) {      orientation=splitPane.getOrientation();      setCursor((orientation == JSplitPane.HORIZONTAL_SPLIT) ? Cursor.getPredefinedCursor(Cursor.E_RESIZE_CURSOR) : Cursor.getPredefinedCursor(Cursor.S_RESIZE_CURSOR));      revalidateSplitPane();    } else     if (e.getPropertyName() == JSplitPane.ONE_TOUCH_EXPANDABLE_PROPERTY) {      oneTouchExpandableChanged();    }  }}  }
class C{  public void register(String name,Model model){  ModelList list=get(name);  if (list == null) {    list=new ModelList();    put(name,list);  }  list.register(model);}  }
class C{  private void checkSize(final int i){  final int old_size=max_size;  max_size+=increment_size;  if (max_size <= i) {    max_size=i + increment_size + 2;  }  final float[] temp=items;  items=new float[max_size];  System.arraycopy(temp,0,items,0,old_size);  increment_size=incrementSize(increment_size);}  }
class C{  @Override public void write(int b) throws IOException {  for (  OutputStream stream : streams) {    stream.write(b);  }}  }
class C{  private void finalizeDestinationFile(State state) throws StopRequest {  syncDestination(state);  String tempFilename=state.mFilename;  String finalFilename=Helpers.generateSaveFileName(mService,mInfo.mFileName);  if (!state.mFilename.equals(finalFilename)) {    File startFile=new File(tempFilename);    File destFile=new File(finalFilename);    if (mInfo.mTotalBytes != -1 && mInfo.mCurrentBytes == mInfo.mTotalBytes) {      if (!startFile.renameTo(destFile)) {        throw new StopRequest(DownloaderService.STATUS_FILE_ERROR,"unable to finalize destination file");      }    } else {      throw new StopRequest(DownloaderService.STATUS_FILE_DELIVERED_INCORRECTLY,"file delivered with incorrect size. probably due to network not browser configured");    }  }}  }
class C{  public KernelRidgeRegression(){  this(1e-6,new RBFKernel());}  }
class C{  private JCustomerFinder(java.awt.Frame parent,boolean modal){  super(parent,modal);}  }
class C{  public Executor withProperty(String key,String value){  properties.setString(key,value);  return this;}  }
class C{  public UM(double probability){  super();  this.probability=probability;}  }
class C{  public static String bytesToString(long value){  if (value < 0) {    throw new IllegalArgumentException("Invalid memory size: " + value);  }  for (int i=0; i < UNITS.length; i++) {    long bytes=UNITS[i].getBytes();    if (value >= bytes) {      double numResult=bytes > 1 ? (double)value / (double)bytes : (double)value;      return FORMATTER.format(numResult) + " " + UNITS[i].getName();    }  }  return value + " " + UNITS[UNITS.length - 1].getName();}  }
class C{  public X509Certificate engineResolveX509Certificate(Element element,String baseURI,StorageResolver storage) throws KeyResolverException {  throw new UnsupportedOperationException();}  }
class C{  public static void createNativeCallgraphNodes(final CConnection connection,final int viewId,final int moduleId) throws SQLException {  Preconditions.checkNotNull(connection,"IE00455: connection argument can not be null");  final String query=" { call create_native_callgraph_nodes(?,?) } ";  final CallableStatement call=connection.getConnection().prepareCall(query);  call.setInt(1,viewId);  call.setInt(2,moduleId);  call.execute();}  }
class C{  public KKLayout(Graph<V,E> g,Distance<V> distance){  super(g);  this.distance=distance;}  }
class C{  @CalledByNative private static void showSnackbar(Tab tab,String username){  SnackbarManager snackbarManager=tab.getSnackbarManager();  if (snackbarManager == null)   return;  AutoSigninSnackbarController snackbar=new AutoSigninSnackbarController(snackbarManager,tab);  Context context=tab.getWindowAndroid().getApplicationContext();  String text=context.getString(R.string.passwords_auto_signin_message);  snackbarManager.showSnackbar(Snackbar.make(username,snackbar).setTemplateText(text));}  }
class C{  public void cycleAttributeMissingSorting(){  SortingDirection direction=model.getSortingDirection(SortingType.MISSING);switch (direction) {case UNDEFINED:    setSorting(SortingType.MISSING,SortingDirection.DESCENDING);  break;case DESCENDING:setSorting(SortingType.MISSING,SortingDirection.ASCENDING);break;case ASCENDING:setSorting(SortingType.MISSING,SortingDirection.UNDEFINED);break;default :setSorting(SortingType.MISSING,SortingDirection.UNDEFINED);}}  }
class C{  public void resetSession(){  builder.resetSession();}  }
class C{  public static void verify(TimeStampToken tsToken,byte[] stampedData,List<X509Certificate> tspCerts) throws Exception {  String thatHash=encodeBase64(calculateDigest(tsToken.getTimeStampInfo().getHashAlgorithm(),stampedData));  String thisHash=encodeBase64(tsToken.getTimeStampInfo().getMessageImprintDigest());  if (!thisHash.equals(thatHash)) {    throw new CodedException(X_MALFORMED_SIGNATURE,"Timestamp hashes do not match");  }  verify(tsToken,tspCerts);}  }
class C{  public Categories addCategories(List<String> categories){  Categories prop=new Categories(categories);  addCategories(prop);  return prop;}  }
class C{  public static void updateBarsColor(Window window,@ColorRes int colorID,boolean applyDarken,boolean navbar,boolean statusbar){  updateBarsColor(ContextCompat.getColor(window.getContext(),colorID),window,applyDarken,navbar,statusbar);}  }
class C{  @Override public void firePropertyChange(String propertyName,int oldValue,int newValue){}  }
class C{  public boolean isSelected(int position){  return getSelectedItems().contains(position);}  }
class C{  public void test_graphContexts_constants_legal() throws MalformedQueryException {  final String queryStr="" + "PREFIX : <http://example.org/>\n" + "SELECT ?s\n"+ "WHERE {\n"+ "  GRAPH :foo {\n"+ "    ?s :p :o .\n"+ "    GRAPH :foo { ?o :p2 ?s }\n"+ "  }\n"+ "}";  final ASTContainer astContainer=new Bigdata2ASTSPARQLParser().parseQuery2(queryStr,baseURI);  final AST2BOpContext context=new AST2BOpContext(astContainer,store);  new ASTGraphGroupOptimizer().optimize(context,new QueryNodeWithBindingSet(astContainer.getOriginalAST(),null));}  }
class C{  @Override public boolean isFilledBy(Assignment input){  return true;}  }
class C{  public HostMonitorConfig removeAll(){  if (mHostsMap != null) {    mHostsMap.clear();  }  return this;}  }
class C{  void editMessage(){  String mess=null;  String type=null;  String content=null;  try {    JOptionPane dialog=new JOptionPane();    mess=dialog.showInputDialog(this,"Message");    if (mess == null || mess.length() == 0)     return;    mess=mess.trim();    int delimiter=mess.indexOf(',');    if (delimiter != -1) {      type=mess.substring(0,delimiter);      content=mess.substring(delimiter + 1);    } else {      type=mess;    }    Address to=null;    if (selectedAgent == null) {      to=getLivingAddress();      if (to == null)       return;    } else     to=new Address(selectedAgent);    IRequest req=node.fireMessage(new Message(new Address(node.getName()),to,type,content));    if (req instanceof Thread)     try {      ((Thread)req).join(10000);    } catch (    Exception e) {    }    if (req.getThrowable() != null) {      req.getThrowable().printStackTrace();      throw req.getThrowable();    }    (new JOptionPane()).showMessageDialog(this,"" + req.getInfo("reply"),null,JOptionPane.INFORMATION_MESSAGE);  } catch (  IndexOutOfBoundsException e) {    showError("Use format messagetype[,messagecontent]");  }catch (  Throwable e) {    showError("" + e);  }}  }
class C{  public void clear(){  fullyLock();  try {    for (Node<E> p, h=head; (p=h.next) != null; h=p) {      h.next=h;      p.item=null;    }    head=last;    if (count.getAndSet(0) >= capacity)     notFull.signal();  }  finally {    fullyUnlock();  }}  }
class C{  private void insertUsedContextPrefixes(){  int unknownPrefixesCount=unknownPrefixesInXMLLiteral.size();  if (unknownPrefixesCount > 0) {    StringBuilder contextPrefixes=new StringBuilder(1024);    ElementInfo topElement=peekStack();    for (int i=0; i < unknownPrefixesCount; i++) {      String prefix=unknownPrefixesInXMLLiteral.get(i);      String namespace=topElement.getNamespace(prefix);      if (namespace != null) {        appendNamespaceDecl(contextPrefixes,prefix,namespace);      }    }    int endOfFirstStartTag=charBuf.indexOf(">");    charBuf.insert(endOfFirstStartTag,contextPrefixes.toString());  }  unknownPrefixesInXMLLiteral.clear();}  }
class C{  public static String chop(String str){  if ("".equals(str)) {    return "";  }  if (str.length() == 1) {    return "";  }  int lastIdx=str.length() - 1;  String ret=str.substring(0,lastIdx);  char last=str.charAt(lastIdx);  if (last == '\n') {    if (ret.charAt(lastIdx - 1) == '\r') {      return ret.substring(0,lastIdx - 1);    }  }  return ret;}  }
class C{  public ST(String template){  this(STGroup.defaultGroup,template);}  }
class C{  public void onStorageStateChanged(String path,String oldState,String newState){}  }
class C{  public void selectSubset(int i){  this.mask[i]=true;  recalculateTableIndices();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public BusinessObjectFormatUpdateRequest createBusinessObjectFormatUpdateRequest(String description,List<Attribute> attributes,Schema schema){  BusinessObjectFormatUpdateRequest businessObjectFormatCreateRequest=new BusinessObjectFormatUpdateRequest();  businessObjectFormatCreateRequest.setDescription(description);  businessObjectFormatCreateRequest.setAttributes(attributes);  businessObjectFormatCreateRequest.setSchema(schema);  return businessObjectFormatCreateRequest;}  }
class C{  public static String toString(final Type type){  Validate.notNull(type);  if (type instanceof Class<?>) {    return classToString((Class<?>)type);  }  if (type instanceof ParameterizedType) {    return parameterizedTypeToString((ParameterizedType)type);  }  if (type instanceof WildcardType) {    return wildcardTypeToString((WildcardType)type);  }  if (type instanceof TypeVariable<?>) {    return typeVariableToString((TypeVariable<?>)type);  }  if (type instanceof GenericArrayType) {    return genericArrayTypeToString((GenericArrayType)type);  }  throw new IllegalArgumentException(ObjectUtils.identityToString(type));}  }
class C{  public static boolean diff(Hashtable a,Hashtable b){  if (a == null) {    return (b == null ? false : true);  }  if (b == null) {    return true;  }  if (a.size() != b.size()) {    Debug.log("  diff: size");    return true;  }  for (Enumeration e=a.keys(); e.hasMoreElements(); ) {    Object keya=e.nextElement();    Object keyb=null;    if (!b.containsKey(keya)) {      for (Enumeration eb=b.keys(); keyb == null && eb.hasMoreElements(); ) {        Object key=eb.nextElement();        if (key.equals(keya)) {          keyb=key;        }      }    } else {      keyb=keya;    }    if (keyb == null) {      Debug.log("  diff: key " + keya);      return true;    }    Object oa=a.get(keya);    Object ob=b.get(keyb);    if (!oa.equals(ob)) {      Debug.log("  diff: " + oa + " with "+ ob);      return true;    }  }  return false;}  }
class C{  public void disconnect(final String uri,final String cookie,final String session) throws VNXFilePluginException {  _logger.debug("Invoking disconnect method to send request.");  PostMethod postMethod=null;  try {    postMethod=new PostMethod(uri);    _logger.debug("Querying the url {} to disconnect session.",uri);    postMethod.setRequestHeader(VNXFileConstants.COOKIE,cookie);    if (null != session) {      postMethod.setRequestHeader(VNXFileConstants.CELERRA_SESSION,session);      postMethod.setRequestHeader("CelerraConnector-Ctl","DISCONNECT");    }    setTimeoutValues();    final int response=_client.executeMethod(postMethod);    if (response != HttpStatus.SC_OK) {      _logger.error("Invalid response received from XML API Server while disconnecting session." + "HTTP Error code: {}",response);      throw new VNXFilePluginException("Invalid response received from XML API Server while disconnecting session",VNXFilePluginException.ERRORCODE_INVALID_RESPONSE);    }    _logger.debug("Session disconnected with XML API Server.");  } catch (  final IOException ioEx) {    _logger.error("IOException occurred while sending the disconnect request due to {}",ioEx.getMessage());    throw new VNXFilePluginException("IOException occurred while sending the disconnect request.",ioEx.getCause());  }catch (  final Exception ex) {    _logger.error("Exception occurred while sending the disconnect request due to {}",ex.getMessage());    throw new VNXFilePluginException("Exception occurred while sending the disconnect request.",ex);  }}  }
class C{  private static boolean isJava6(){  return isVersionBelow("java.class.version",51.0);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SGraphPackage.SCOPED_ELEMENT__SCOPES:    return getScopes();case SGraphPackage.SCOPED_ELEMENT__NAMESPACE:  return getNamespace();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public final void check(final Predicate5<P,P2,P3,P4,T> property){  final TheoryRunner<Tuple5<P,P2,P3,P4,T>,Tuple5<P,P2,P3,P4,T>> qc=new TheoryRunner<>(this.state.get(),ps,null,Function.identity(),this.ps);  qc.check(null);}  }
class C{  @action(name=ISpecies.stepActionName) public Object _step_(final IScope scope){  return super.doStep(scope);}  }
class C{  @Override public void onPageStarted(WebView view,String url,Bitmap favicon){  super.onPageStarted(view,url,favicon);  isCurrentlyLoading=true;  LOG.d(TAG,"onPageStarted(" + url + ")");  this.appView.bridge.reset(url);  this.appView.postMessage("onPageStarted",url);  if (this.appView.pluginManager != null) {    this.appView.pluginManager.onReset();  }}  }
class C{  public void incrCoordCount(){  m_CoordCount++;}  }
class C{  public void attemptLogin(){  if (mAuthTask != null) {    return;  }  mEmailView.setError(null);  mPasswordView.setError(null);  mEmail=mEmailView.getText().toString();  mPassword=mPasswordView.getText().toString();  boolean cancel=false;  View focusView=null;  if (TextUtils.isEmpty(mPassword)) {    mPasswordView.setError(getString(R.string.error_field_required));    focusView=mPasswordView;    cancel=true;  } else   if (mPassword.length() < 4) {    mPasswordView.setError(getString(R.string.error_invalid_password));    focusView=mPasswordView;    cancel=true;  }  if (TextUtils.isEmpty(mEmail)) {    mEmailView.setError(getString(R.string.error_field_required));    focusView=mEmailView;    cancel=true;  } else   if (!mEmail.contains("@")) {    mEmailView.setError(getString(R.string.error_invalid_email));    focusView=mEmailView;    cancel=true;  }  if (cancel) {    focusView.requestFocus();  } else {    mLoginStatusMessageView.setText(R.string.login_progress_signing_in);    showProgress(true);    mAuthTask=new UserLoginTask();    mAuthTask.execute((Void)null);  }}  }
class C{  public RatPoly mul(RatPoly p){  if (p.isNaN() || this.isNaN()) {    return NAN;  }  RatPoly result=new RatPoly();  for (int i=0, size=this.terms.size(); i < size; i++) {    for (int j=0, psize=p.terms.size(); j < psize; j++) {      if (this.terms.get(i).coeff.equals(ZERO) || p.terms.get(j).coeff.equals(ZERO)) {        throw new RuntimeException("REP BROKEN");      }      sortedAdd(result.terms,new RatTerm(this.terms.get(i).coeff.mul(p.terms.get(j).coeff),this.terms.get(i).expt + p.terms.get(j).expt));    }  }  return result;}  }
class C{  protected void initializeOutputType(SimpleTypeInformation<O> type){  factory=FilterUtil.guessFactory(type);}  }
class C{  public boolean GE(Address addr2){  return value.GE(addr2.value);}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  public void addOption(String name,String value){  if (options == null)   options=new LinkedList<ReplOption>();  options.add(new ReplOption(name,value));}  }
class C{  public static <T>T splitEachLine(InputStream stream,Pattern pattern,@ClosureParams(value=FromString.class,options={"List<String>","String[]"},conflictResolutionStrategy=PickFirstResolver.class) Closure<T> closure) throws IOException {  return splitEachLine(new BufferedReader(new InputStreamReader(stream)),pattern,closure);}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  @Override public void put(String name,boolean value){  emulatedFields.put(name,value);}  }
class C{  public void add(S2Point p){  S2CellId id=S2CellId.fromPoint(p).parent(level);  Collection<MarkedS2Point> pointSet=get(id);  for (  MarkedS2Point point : pointSet) {    if (point.getPoint().equals(p)) {      return;    }  }  put(id,new MarkedS2Point(p));}  }
class C{  public static String[] sort(String[] asciis){  return null;}  }
class C{  public static Fragment createFromString(String aElement){  Fragment e=new Fragment();  String[] splits=aElement.split("\\(");  e.setWord(splits.length != 0 ? splits[0] : aElement);  if ((splits.length == 2) && splits[1].endsWith(")")) {    e.setMorpheme(splits[1].substring(0,splits[1].length() - 1));  }  return e;}  }
class C{  void initFontMetrics(){  FontMetrics fm=getFontMetrics(getFont());  fontHeight=fm.getHeight();  fontAscent=fm.getAscent();  fontLeading=fm.getLeading();}  }
class C{  public boolean containsDEREncodedKeyValue(){  return this.lengthDEREncodedKeyValue() > 0;}  }
class C{  private static void drawCircleEndpoint(Point from,Point to,Graphics g){  final int diameter=13;  double a=to.x - from.x;  double b=from.y - to.y;  double theta=Math.atan2(b,a);  int xminus=(int)(Math.cos(theta) * diameter / 2);  int yplus=(int)(Math.sin(theta) * diameter / 2);  g.fillOval(to.x - xminus - diameter / 2,to.y + yplus - diameter / 2,diameter,diameter);  Color c=g.getColor();  g.setColor(Color.white);  g.fillOval(to.x - xminus - diameter / 4 - 1,to.y + yplus - diameter / 4 - 1,(int)(diameter / 1.4),(int)(diameter / 1.4));  g.setColor(c);}  }
class C{  protected void notifyQueryExecuteListeners(ResultSet rs,Exception ex){  Iterator<QueryExecuteListener> iter;  QueryExecuteListener l;  iter=m_QueryExecuteListeners.iterator();  while (iter.hasNext()) {    l=iter.next();    l.queryExecuted(new QueryExecuteEvent(this,m_DbUtils,getQuery(),getMaxRows(),rs,ex));  }}  }
class C{  public static void collectFiles(File start,final List<String> file){  if (start.isDirectory()) {    File[] files=start.listFiles();    for (int i=0; i < files.length; i++) {      File f=files[i];      if (f.isDirectory()) {        collectFiles(f,file);      } else       if (f.getName().endsWith(".java")) {        file.add(f.getAbsolutePath());      }    }  }}  }
class C{  public void cache(Object key,T value){  map(key).cache(key,value);}  }
class C{  @After public void clearStored(){  if (housePortal != null) {    StendhalRPZone zone=housePortal.getZone();    if (zone != null) {      zone.remove(housePortal);      housePortal=null;    }  }  if (chest != null) {    StendhalRPZone zone=chest.getZone();    if (zone != null) {      zone.remove(chest);      chest=null;    }  }  PlayerTestHelper.removeNPC("Mr Taxman");}  }
class C{  public boolean forEachCoordinateInState(boolean state,final cern.colt.function.IntIntProcedure procedure){  if (size() == 0)   return true;  BitVector vector=new BitVector(bits,size());  long[] theBits=bits;  int column=columns - 1;  int row=rows - 1;  long val=theBits[bits.length - 1];  for (int j=vector.numberOfBitsInPartialUnit(); --j >= 0; ) {    long mask=val & (1L << j);    if ((state && (mask != 0L)) || ((!state) && (mask == 0L))) {      if (!procedure.apply(column,row))       return false;    }    if (--column < 0) {      column=columns - 1;      --row;    }  }  final int bitsPerUnit=QuickBitVector.BITS_PER_UNIT;  long comparator;  if (state)   comparator=0L; else   comparator=~0L;  for (int i=vector.numberOfFullUnits(); --i >= 0; ) {    val=theBits[i];    if (val != comparator) {      if (state) {        for (int j=bitsPerUnit; --j >= 0; ) {          if (((val & (1L << j))) != 0L) {            if (!procedure.apply(column,row))             return false;          }          if (--column < 0) {            column=columns - 1;            --row;          }        }      } else {        for (int j=bitsPerUnit; --j >= 0; ) {          if (((val & (1L << j))) == 0L) {            if (!procedure.apply(column,row))             return false;          }          if (--column < 0) {            column=columns - 1;            --row;          }        }      }    } else {      column-=bitsPerUnit;      if (column < 0) {        column+=bitsPerUnit;        for (int j=bitsPerUnit; --j >= 0; ) {          if (--column < 0) {            column=columns - 1;            --row;          }        }      }    }  }  return true;}  }
class C{  public static Months monthsBetween(ReadableInstant start,ReadableInstant end){  int amount=BaseSingleFieldPeriod.between(start,end,DurationFieldType.months());  return Months.months(amount);}  }
class C{  public void print(StringBuffer sb){  if (root != null) {    root.print(sb,getRootQuantity(),0);  }}  }
class C{  @Override public Closure<V> trampoline(){  return this;}  }
class C{  @Deprecated public CronTriggerImpl(String name,String group){  super(name,group);  setStartTime(new Date());  setTimeZone(TimeZone.getDefault());}  }
class C{  public static IPackageFragmentRoot addSourceContainer(IJavaProject jproject,String containerName,IPath[] exclusionFilters) throws CoreException {  return addSourceContainer(jproject,containerName,new Path[0],exclusionFilters);}  }
class C{  public LoadLinksDown(CnATreeElement parent){  super();  this.parent=parent;}  }
class C{  public String toString(){  try {    return new String(buffer.toByteArray(),charset);  } catch (  UnsupportedEncodingException e) {    throw new RuntimeException(e);  }}  }
class C{  @Override public void respond(String response){  getChannel().send().message(getUser(),response);}  }
class C{  FIRTypeIII(int numBands,int nHalf){  super(numBands,nHalf,2 * nHalf + 1);}  }
class C{  public StextItemProviderAdapterFactory(){  supportedTypes.add(IEditingDomainItemProvider.class);  supportedTypes.add(IStructuredItemContentProvider.class);  supportedTypes.add(ITreeItemContentProvider.class);  supportedTypes.add(IItemLabelProvider.class);  supportedTypes.add(IItemPropertySource.class);}  }
class C{  public void show(){  if (mListener == null) {    throw new NullPointerException("Attempting to bind null listener to SlideDayTimePicker");  }  SlideDayTimeDialogFragment dialogFragment=SlideDayTimeDialogFragment.newInstance(mListener,mIsCustomDaysArraySpecified,mCustomDaysArray,mInitialDay,mInitialHour,mInitialMinute,mIsClientSpecified24HourTime,mIs24HourTime,mTheme,mIndicatorColor);  dialogFragment.show(mFragmentManager,SlideDayTimeDialogFragment.TAG_SLIDE_DAY_TIME_DIALOG_FRAGMENT);}  }
class C{  protected void sequence_Wildcard(ISerializationContext context,Wildcard semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public int addPadding(byte[] in,int inOff){  int count=in.length - inOff;  byte code;  if (inOff > 0) {    code=(byte)((in[inOff - 1] & 0x01) == 0 ? 0xff : 0x00);  } else {    code=(byte)((in[in.length - 1] & 0x01) == 0 ? 0xff : 0x00);  }  while (inOff < in.length) {    in[inOff]=code;    inOff++;  }  return count;}  }
class C{  public Builder convertRatesTo(TimeUnit rateUnit){  this.rateUnit=rateUnit;  return this;}  }
class C{  public String encodeBody(){  return date.encode();}  }
class C{  public static GraphRequest newPostOpenGraphObjectRequest(AccessToken accessToken,String type,String title,String imageUrl,String url,String description,JSONObject objectProperties,Callback callback){  JSONObject openGraphObject=GraphUtil.createOpenGraphObjectForPost(type,title,imageUrl,url,description,objectProperties,null);  return newPostOpenGraphObjectRequest(accessToken,openGraphObject,callback);}  }
class C{  @Override public String toString(){  return "Gauss-Regression-GP";}  }
class C{  public DeleteIndexRequest(String index){  this.indices=new String[]{index};}  }
class C{  public LazyQueueX<T> with(int i,T element){  return stream(Fluxes.insertAt(Fluxes.deleteBetween(flux(),i,i + 1),i,element));}  }
class C{  private void readGraphicPropertiesElement(IXMLElement elem,HashMap<AttributeKey,Object> a) throws IOException {  if (elem.hasAttribute("stroke",DRAWING_NAMESPACE)) {    STROKE_STYLE.put(a,(StrokeStyle)elem.getAttribute("stroke",DRAWING_NAMESPACE,STROKE_STYLES,null));  }  if (elem.hasAttribute("stroke-width",SVG_NAMESPACE)) {    STROKE_WIDTH.put(a,toLength(elem.getAttribute("stroke-width",SVG_NAMESPACE,null)));  }  if (elem.hasAttribute("stroke-color",SVG_NAMESPACE)) {    STROKE_COLOR.put(a,toColor(elem.getAttribute("stroke-color",SVG_NAMESPACE,null)));  }  if (elem.hasAttribute("fill",DRAWING_NAMESPACE)) {    FILL_STYLE.put(a,(FillStyle)elem.getAttribute("fill",DRAWING_NAMESPACE,FILL_STYLES,null));  }  if (elem.hasAttribute("fill-color",DRAWING_NAMESPACE)) {    FILL_COLOR.put(a,toColor(elem.getAttribute("fill-color",DRAWING_NAMESPACE,null)));  }  for (  IXMLElement child : elem.getChildren()) {    String ns=child.getNamespace();    String name=child.getName();  }}  }
class C{  public static String[] split(String input,String regularExpression){  return input.split(regularExpression);}  }
class C{  public boolean isLessThenOrEqualTo(Percent Percent){  assertDefined();  BigDecimal thisValue=notNull(this);  BigDecimal parameter=notNull(Percent);  return (thisValue.compareTo(parameter) <= 0);}  }
class C{  public FrameAndRootPainter(Which state){  super();  this.state=state;  this.ctx=new PaintContext(PaintContext.CacheMode.FIXED_SIZES);}  }
class C{  public String local(){  if (chars[0] != 0) {    return new String(chars,chars[0] + 1,chars.length - chars[0] - 1);  }  return new String(chars,1,chars.length - 1);}  }
class C{  public KMLLabelStyle(String namespaceURI){  super(namespaceURI);}  }
class C{  public String makeAutoAlternator(String name,String alt1,String alt2){  String[] alternates={alt1,alt2};  context.put(name,new VelocityAutoAlternator(alternates));  return "";}  }
class C{  protected OrderPositionSplitKey(){  super();}  }
class C{  private static int to_six_bit(int num){  return (((num << 26) & 0xfc000000) | ((num << 12) & 0xfc0000) | ((num >> 2) & 0xfc00)| ((num >> 16) & 0xfc));}  }
class C{  public FindReplaceDocumentAdapter(Document document){  Assert.isNotNull(document);  fDocument=document;}  }
class C{  public void release(){  if (maybeDirty() && _parent != null) {    _parent.mergeChild(this);    markAsShared();  }}  }
class C{  public static String quote(String s){  final StringBuilder buf=new StringBuilder("\"");  final int len=s.length();  for (int i=0; i < len; i++) {    char c=s.charAt(i);switch (c) {case '\n':      c='n';    buf.append('\\');  break;case '\\':case '\"':case '*':case '?':buf.append('\\');break;}buf.append(c);}buf.append('"');return buf.toString();}  }
class C{  public TitleEntity(Shape area,Title title,String toolTipText,String urlText){  super(area,toolTipText,urlText);  ParamChecks.nullNotPermitted(title,"title");  this.title=title;}  }
class C{  public String[] commandStationOptions(){  String[] retval={LnCommandStationType.COMMAND_STATION_IBX_TYPE_1.getName()};  return retval;}  }
class C{  public static List<String> relations(List<EvaluationStatistics> stats,boolean sort){  List<String> result;  result=new ArrayList<>();  for (  EvaluationStatistics stat : stats) {    if (!result.contains(stat.getRelation()))     result.add(stat.getRelation());  }  if (sort)   Collections.sort(result);  return result;}  }
class C{  private void refreshDirectory(HdfsDirectory dir) throws IOException {  Map<FileStatus,BlockLocation[]> directoryCache=cache.get(dir);  Set<FileStatus> cachedStatuses=directoryCache.keySet();  FileSystem fs=dir.getFileSystem();  FileStatus[] statuses=fs.listStatus(dir.getHdfsDirPath());  List<FileStatus> statusList=Arrays.asList(statuses);  logger.debug("Updating locality information for: {}",statusList);  cachedStatuses.retainAll(statusList);  for (  FileStatus status : statusList) {    if (!status.isDirectory() && !directoryCache.containsKey(status)) {      BlockLocation[] locations=fs.getFileBlockLocations(status,0,status.getLen());      directoryCache.put(status,locations);    }  }}  }
class C{  public void remove(){  if (src == null)   throw new IllegalStateException();  src.remove();}  }
class C{  @Override public void parse(XmlPullParser parser) throws XmlPullParserException, IOException {  if (!parser.getName().equals(TAG)) {    throw new XmlPullParserException(String.format("invalid XML: Expected %s tag but received %s",TAG,parser.getName()));  }  setAppPackageName(getAttribute(parser,APP_PACKAGE_NAME_ATTR));  setName(getAttribute(parser,NAME_ATTR));  setDigest(getAttribute(parser,DIGEST_ATTR));  int eventType=parser.getEventType();  while (eventType != XmlPullParser.END_DOCUMENT) {    if (eventType == XmlPullParser.START_TAG && parser.getName().equals(TestSuite.TAG)) {      TestSuite suite=new TestSuite();      suite.parse(parser);      mSuiteRoot.insertSuite(suite);    }    if (eventType == XmlPullParser.END_TAG && parser.getName().equals(TAG)) {      return;    }    eventType=parser.next();  }}  }
class C{  public static void post(String relativeUrl,RequestParams params,AsyncHttpResponseHandler handler){  client.post(getAbsoluteApiUrl(relativeUrl),params,handler);  TLog.log(TAG,"POST " + relativeUrl + " & "+ params.toString());}  }
class C{  @Override public int freeContiguousChunks(Address start){  lock.acquire();  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(start.EQ(Conversions.chunkAlign(start,true)));  int rtn=freeContiguousChunks(getChunkIndex(start));  lock.release();  return rtn;}  }
class C{  public Pair createPair(){  PairImpl pair=new PairImpl();  return pair;}  }
class C{  protected static boolean followsNodeOfType(ASTNode node,PyElementType eltType){  if (node != null) {    PsiElement checker=node.getPsi();    checker=checker.getPrevSibling();    while (checker != null) {      ASTNode ch_node=checker.getNode();      if (ch_node == null)       return false; else {        if (ch_node.getElementType() == eltType) {          return true;        } else         if (!(checker instanceof PsiWhiteSpace)) {          return false;        }      }      checker=checker.getPrevSibling();    }  }  return false;}  }
class C{  @Override public void respond(String response){  getChannel().send().message(getUser(),response);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  void populateRegionSubRegions(RegionSubRegionSnapshot parentSnapShot,Set regions,GemFireCacheImpl cache){  if (cancelled)   return;  Region subRegion=null;  RegionSubRegionSnapshot subRegionSnapShot=null;  for (Iterator iter=regions.iterator(); iter.hasNext(); ) {    subRegion=(Region)iter.next();    try {      subRegionSnapShot=new RegionSubRegionSnapshot(subRegion);      parentSnapShot.addSubRegion(subRegionSnapShot);      Set subRegions=subRegion.subregions(false);      populateRegionSubRegions(subRegionSnapShot,subRegions,cache);    } catch (    Exception e) {      logger.debug("Failed to create snapshot for region: {}. Continuing with next region.",subRegion.getFullPath(),e);    }  }}  }
class C{  public void add(int theOpCode,int theOperand1,int theOperand2){  if (DEBUGCODE) {    System.out.println("Add " + bytecodeStr(theOpCode) + ", "+ Integer.toHexString(theOperand1)+ ", "+ Integer.toHexString(theOperand2));  }  int newStack=itsStackTop + stackChange(theOpCode);  if (newStack < 0 || Short.MAX_VALUE < newStack)   badStack(newStack);  if (theOpCode == ByteCode.IINC) {    if (!(0 <= theOperand1 && theOperand1 < 65536))     throw new ClassFileFormatException("out of range variable");    if (!(0 <= theOperand2 && theOperand2 < 65536))     throw new ClassFileFormatException("out of range increment");    if (theOperand1 > 255 || theOperand2 < -128 || theOperand2 > 127) {      addToCodeBuffer(ByteCode.WIDE);      addToCodeBuffer(ByteCode.IINC);      addToCodeInt16(theOperand1);      addToCodeInt16(theOperand2);    } else {      addToCodeBuffer(ByteCode.IINC);      addToCodeBuffer(theOperand1);      addToCodeBuffer(theOperand2);    }  } else   if (theOpCode == ByteCode.MULTIANEWARRAY) {    if (!(0 <= theOperand1 && theOperand1 < 65536))     throw new IllegalArgumentException("out of range index");    if (!(0 <= theOperand2 && theOperand2 < 256))     throw new IllegalArgumentException("out of range dimensions");    addToCodeBuffer(ByteCode.MULTIANEWARRAY);    addToCodeInt16(theOperand1);    addToCodeBuffer(theOperand2);  } else {    throw new IllegalArgumentException("Unexpected opcode for 2 operands");  }  itsStackTop=(short)newStack;  if (newStack > itsMaxStack)   itsMaxStack=(short)newStack;  if (DEBUGSTACK) {    System.out.println("After " + bytecodeStr(theOpCode) + " stack = "+ itsStackTop);  }}  }
class C{  public void close(){}  }
class C{  @Override public boolean onUsed(RPEntity user){  String result=null;  init((Player)user);  if (!checkOnline()) {    return false;  }  String effect=this.checkEquippedAndInRange();  if (effect == null) {    return false;  }  if (effect.equals("not-equipped")) {    user.sendPrivateText("You cannot tag unless equipped with bow and special ammunition");    return false;  }  if (effect.equals("not-in-range")) {    user.sendPrivateText("You must be in range to tag a player");    return false;  }  if (effect.equals("fumble") || effect.equals("drop") || effect.equals("")) {    result=target.maybeDropDroppables(sender);  } else   if (effect.equals("slow") || effect.equals("slowdown")) {    result="maybe would have slowed down target";  } else   if (effect.equals("speedup")) {    result="should have sped up - 0.1";  } else {    return false;  }  if (result != null) {    String message=target.getName() + " " + result;    target.sendPrivateText(message);    if (!senderName.equals(targetName)) {      user.sendPrivateText(message);    }  }  new GameEvent(user.getName(),"tag",targetName,effect,result).raise();  return true;}  }
class C{  public static void main(String argv[]){  if (argv.length == 0) {    System.out.println("Usage : java LexScan <inputfile>");  } else {    for (int i=0; i < argv.length; i++) {      LexScan scanner=null;      try {        scanner=new LexScan(new java.io.FileReader(argv[i]));        while (!scanner.zzAtEOF)         scanner.debug_next_token();      } catch (      java.io.FileNotFoundException e) {        System.out.println("File not found : \"" + argv[i] + "\"");      }catch (      java.io.IOException e) {        System.out.println("IO error scanning file \"" + argv[i] + "\"");        System.out.println(e);      }catch (      Exception e) {        System.out.println("Unexpected exception:");        e.printStackTrace();      }    }  }}  }
class C{  public boolean lowerCaseTableNames(){  return this.lowerCaseTableNames;}  }
class C{  public static FXGVersion newInstance(double version){  return new FXGVersion(version);}  }
class C{  public static boolean containsPoint(final CGRect aRect,final CGPoint aPoint){  return ((aPoint.x >= minX(aRect)) && (aPoint.y >= minY(aRect)) && (aPoint.x < maxX(aRect))&& (aPoint.y < maxY(aRect)));}  }
class C{  public static boolean contains(Object[] arr,Object target){  for (  Object a : arr)   if (a.equals(target))   return true;  return false;}  }
class C{  private boolean equalPermissions(String[] foo,String[] bar){  if (foo == null || bar == null) {    return (foo == null) && (bar == null);  } else   if (foo.length != bar.length) {    return false;  }  Arrays.sort(foo);  Arrays.sort(bar);  for (int i=0; i < foo.length; i++) {    if (!foo[i].equals(bar[i]))     return false;  }  return true;}  }
class C{  public void wasUnified(Intersection F,Intersection E){  if (src == F) {    prevSeg.wasUnified(F,E);    return;  }  if (dst == F)   dst=nextSeg.src=E;  if (F.segA == this || F.segA == nextSeg) {    for (Intersection X=src; X != dst && X != null; X=X.nextA)     if (X.nextA == F) {      X.nextA=E;      break;    }  } else   if (F.segB == this || F.segB == nextSeg) {    for (Intersection X=src; X != dst && X != null; X=X.nextB)     if (X.nextB == F) {      X.nextB=E;      break;    }  } else   assert false;}  }
class C{  private ORCLUSCluster union(Relation<V> relation,ORCLUSCluster c1,ORCLUSCluster c2,int dim){  ORCLUSCluster c=new ORCLUSCluster();  c.objectIDs=DBIDUtil.newHashSet(c1.objectIDs);  c.objectIDs.addDBIDs(c2.objectIDs);  c.objectIDs=DBIDUtil.newArray(c.objectIDs);  if (c.objectIDs.size() > 0) {    c.centroid=Centroid.make(relation,c.objectIDs).getArrayRef();    c.basis=findBasis(relation,c,dim);  } else {    c.centroid=timesEquals(plusEquals(c1.centroid,c2.centroid),.5);    c.basis=identity(c1.basis.length,dim);  }  return c;}  }
class C{  @SuppressWarnings("unchecked") public static <T>Iterator<T> emptyIterator(){  return (Iterator<T>)EMPTY_ITERATOR;}  }
class C{  public static Builder createBuilder(Header header,WritableFontData data){  return new Builder(header,data);}  }
class C{  public static final Parameter base(){  return new Parameter(P_BREED);}  }
class C{  public static NbtTag readTagInflated(File in,NbtLimiter limiter) throws IOException {  return readTagInflated(new FileInputStream(in),limiter);}  }
class C{  public static Date parseDate(String dateString) throws ParseException {  return getSimplDateFormat(DF_LONG).parse(dateString);}  }
class C{  public void onReleased(boolean inside){  pressed=!pressed;  if (getClick().sticky)   on=!on;}  }
class C{  public boolean forEach(TDoubleProcedure procedure){  for (int i=0; i < _pos; i++) {    if (!procedure.execute(_data[i])) {      return false;    }  }  return true;}  }
class C{  @Override public void data(TempBuffer tBuf){  _is.data(tBuf);}  }
class C{  @Override public int read(long pos,byte[] buf,int offset,int length){  if (_fullLength <= pos) {    return -1;  }  if (pos < 0) {    throw new IllegalArgumentException();  }  PageBlob[] pages=_pages;  int i=0;  for (; i < pages.length && pages[i].getLength() <= pos; i++) {    pos-=pages[i].getLength();  }  if (pages.length <= i) {    return -1;  }  PageBlob page=_pages[i];  if (page.getType() != Type.BLOB) {    page=_pageService.getBlobPage(page.getId());    pages[i]=page;  }  int pageLen=page.getLength();  int pagePos=(int)pos;  int sublen=Math.min(length,pageLen - pagePos);  int readLen=page.read(pagePos,buf,offset,sublen);  if (readLen <= 0) {    log.warning("BLOB-READ UNEXPECTED EOF: " + pos + " "+ _fullLength+ " "+ page);  }  return readLen;}  }
class C{  public final int index(){  return m_Index;}  }
class C{  public AttributeInfo copy(ConstPool newCp,Map classnames){  Copier copier=new Copier(info,constPool,newCp,classnames);  try {    copier.annotationArray();    return new TypeAnnotationsAttribute(newCp,getName(),copier.close());  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public LinkedList<Patch> patch_make(LinkedList<Diff> diffs){  if (diffs == null) {    throw new IllegalArgumentException("Null inputs. (patch_make)");  }  String text1=diff_text1(diffs);  return patch_make(text1,diffs);}  }
class C{  public Outline(){}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.TYPE_VARIABLE;}  }
class C{  public synchronized void removeZoomListener(ZoomListener listener){  mZoomListeners.remove(listener);}  }
class C{  public AntProblem(InputStream inputStream,int maxMoves) throws IOException {  this(new InputStreamReader(inputStream),maxMoves);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:44.839 -0500",hash_original_method="F53F10172FA8BD8FD32B526A24946E78",hash_generated_method="282ADED346198690760F95FCEC2D8702") public ReplacesParser(String callID){  super(callID);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:47:23.904 -0400",hash_original_method="4092EC8E340C70347418ABF573D4B0FE",hash_generated_method="1BDE95FC60192E649C7C7C15075C5612") public ListMenuPresenter(Context context,int itemLayoutRes){  this(itemLayoutRes,0);  mContext=context;  mInflater=LayoutInflater.from(mContext);}  }
class C{  public static void i(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_INFO) {    return;  }  Log.i(tag,msg,throwable);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case DomPackage.DOCLET_ELEMENT__BEGIN:    setBegin((Integer)newValue);  return;case DomPackage.DOCLET_ELEMENT__END:setEnd((Integer)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  static double biLinearValueInterpolation(SpatialGrid sg,double xCoord,double yCoord){  double xDif=(xCoord - sg.getXmin()) % sg.getResolution();  double yDif=(yCoord - sg.getYmin()) % sg.getResolution();  double x1=xCoord - xDif;  double x2=x1 + sg.getResolution();  double y1=yCoord - yDif;  double y2=y1 + sg.getResolution();  double xWeight=xDif / sg.getResolution();  double yWeight=yDif / sg.getResolution();  if (xDif == 0) {    if (yDif == 0) {      return sg.getValue(xCoord,yCoord);    }    return sg.getValue(x1,y1) * (1 - yWeight) + sg.getValue(x1,y2) * yWeight;  }  if (yDif == 0) {    return sg.getValue(x1,y1) * (1 - xWeight) + sg.getValue(x2,y1) * xWeight;  }  return (sg.getValue(x1,y1) * (1 - yWeight) + sg.getValue(x1,y2) * yWeight) * (1 - xWeight) + (sg.getValue(x2,y1) * (1 - yWeight) + sg.getValue(x2,y2) * yWeight) * xWeight;}  }
class C{  public static void evolve(Permutation permutation){  int i=PRNG.nextInt(permutation.size());  int j=PRNG.nextInt(permutation.size() - 1);  if (i == j) {    j=permutation.size() - 1;  }  permutation.swap(i,j);}  }
class C{  public int size(){  return bits.length << ADDRESS_BITS_PER_UNIT;}  }
class C{  public CollectionId collectionId(){  return collectionId;}  }
class C{  public T caseLiteral(Literal object){  return null;}  }
class C{  public ServiceRefItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  private void pruneIfNeeded(int neededSpace){  if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes) {    return;  }  if (VolleyLog.DEBUG) {    VolleyLog.v("Pruning old cache entries.");  }  long before=mTotalSize;  int prunedFiles=0;  long startTime=SystemClock.elapsedRealtime();  Iterator<Map.Entry<String,CacheHeader>> iterator=mEntries.entrySet().iterator();  while (iterator.hasNext()) {    Map.Entry<String,CacheHeader> entry=iterator.next();    CacheHeader e=entry.getValue();    boolean deleted=getFileForKey(e.key).delete();    if (deleted) {      mTotalSize-=e.size;    } else {      VolleyLog.d("Could not delete cache entry for key=%s, filename=%s",e.key,getFilenameForKey(e.key));    }    iterator.remove();    prunedFiles++;    if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes * HYSTERESIS_FACTOR) {      break;    }  }  if (VolleyLog.DEBUG) {    VolleyLog.v("pruned %d files, %d bytes, %d ms",prunedFiles,(mTotalSize - before),SystemClock.elapsedRealtime() - startTime);  }}  }
class C{  public static void main(String[] args){  if (args.length != 1) {    System.err.println("Usage: CoverTree <ARFF file>");    System.exit(-1);  }  try {    Instances insts=null;    if (args[0].endsWith(".csv")) {      CSVLoader csv=new CSVLoader();      csv.setFile(new File(args[0]));      insts=csv.getDataSet();    } else {      insts=new Instances(new BufferedReader(new FileReader(args[0])));    }    CoverTree tree=new CoverTree();    tree.setInstances(insts);    print("Created data tree:\n");    print(0,tree.m_Root);    println("");  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public DoubleMemberValue(ConstPool cp){  super('D',cp);  setValue(0.0);}  }
class C{  public void callWithSeed(final String methodName,final String randomSeed,final Object[] params,final ResultListener listener){  final String callId=uniqueID();  if (listener != null) {    mListeners.put(callId,listener);  }  final Map<String,Object> data=new HashMap<String,Object>();  data.put(Protocol.Field.MESSAGE,Protocol.Message.METHOD);  data.put(Protocol.Field.METHOD,methodName);  data.put(Protocol.Field.ID,callId);  if (params != null) {    data.put(Protocol.Field.PARAMS,params);  }  if (randomSeed != null) {    data.put(Protocol.Field.RANDOM_SEED,randomSeed);  }  send(callId,data);}  }
class C{  public static String SetOfVertexToString(Set<Vertex<String,SwcExternalScriptInfo>> vertexSet){  StringBuilder dependencyMessage=new StringBuilder();  String lineSeparator=System.getProperty("line.separator");  LocalizationManager i10n=ThreadLocalToolkit.getLocalizationManager();  for (  Vertex<String,SwcExternalScriptInfo> vertexEntry : vertexSet) {    String message=i10n.getLocalizedTextString(new DependsOn(vertexEntry.getWeight()));    dependencyMessage.append(message + lineSeparator);    Set<Vertex<String,SwcExternalScriptInfo>> predSet=vertexEntry.getPredecessors();    for (    Vertex<String,SwcExternalScriptInfo> predEntry : predSet) {      dependencyMessage.append("\t" + predEntry.getWeight() + lineSeparator);    }  }  return dependencyMessage.toString();}  }
class C{  public static void initLoggingWithOutputDirectory(final String outputDirectory) throws IOException {  if (collectLogMessagesAppender != null) {    Logger.getRootLogger().removeAppender(collectLogMessagesAppender);  }  String logfilename=outputDirectory + System.getProperty("file.separator") + LOGFILE;  String warnlogfilename=outputDirectory + System.getProperty("file.separator") + WARNLOGFILE;  initLogging(logfilename,warnlogfilename);}  }
class C{  public static String extractUsernameFromSevletRequest(ServletRequest req){  Validate.notNull(req);  SecurityHeaderType secHdr=(SecurityHeaderType)req.getAttribute(WsConstants.SECURITY_HEADER_KEY);  assert secHdr != null;  return extractUsernameFromSecurityHeader(secHdr);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_ptr_webview2);  PullToRefreshWebView2 pullRefreshWebView=(PullToRefreshWebView2)findViewById(R.id.pull_refresh_webview2);  pullRefreshWebView.setOnRefreshListener(this);  WebView webView=pullRefreshWebView.getRefreshableView();  webView.getSettings().setJavaScriptEnabled(true);  webView.setWebViewClient(new SampleWebViewClient());  webView.loadUrl("file:///android_asset/ptr_webview2_sample.html");}  }
class C{  public MLTResult like(List<Integer> docNums) throws IOException {  Map<String,Map<String,Flt>> fieldTermFreq=new HashMap<String,Map<String,Flt>>();  Map<String,Map<String,Flt>> mustMatchTerms=new HashMap<String,Map<String,Flt>>();  Map<String,Map<String,Flt>> mustNOTMatchTerms=new HashMap<String,Map<String,Flt>>();  for (  Integer docNum : new HashSet<Integer>(docNums)) {    retrieveTerms(docNum,getFieldNames(),fieldTermFreq);    retrieveTerms(docNum,getMatchFieldNames(),mustMatchTerms);    retrieveTerms(docNum,getDifferentFieldNames(),mustNOTMatchTerms);  }  MLTResult mltResult=buildQueryFromFieldTermFrequencies(fieldTermFreq,false);  if (mustMatchTerms.size() > 0) {    mltResult.setMustMatchQuery(buildMustMatchQuery(mustMatchTerms,true));  }  if (mustNOTMatchTerms.size() > 0) {    mltResult.setMustNOTMatchQuery(buildMustMatchQuery(mustNOTMatchTerms,false));  }  return mltResult;}  }
class C{  public final void reset(byte[] encoded) throws IOException {  buffer=encoded;  next();}  }
class C{  private void updateButtonsState(){  StructuredSelection structuredSelection=(StructuredSelection)tableViewer.getSelection();  if (structuredSelection.isEmpty()) {    removeButton.setEnabled(false);    manageLabelsButton.setEnabled(false);  } else {    removeButton.setEnabled(true);    if ((structuredSelection.size() == 1) && (((CmrRepositoryDefinition)structuredSelection.getFirstElement()).getOnlineStatus() == OnlineStatus.ONLINE)) {      manageLabelsButton.setEnabled(true);    } else {      manageLabelsButton.setEnabled(false);    }  }}  }
class C{  protected String doIt() throws Exception {  generateCostDetail();  return "@Ok@";}  }
class C{  public void parse(InputSource input) throws IOException, SAXException {  setupXMLReader();  xmlReader.parse(input);}  }
class C{  public void advanced(CoapHandler handler,Request request){  assignClientUriIfEmpty(request);  asynchronous(request,handler);}  }
class C{  @Override public String[] apply(String[] words){  if (!isApplicable())   return words;  String[] nwords=new String[(int)_dummycodedLength];  int rcdVal=0;  for (int colID=1, idx=0, ncolID=1; colID <= words.length; colID++) {    if (idx < _colList.length && colID == _colList[idx]) {      try {        rcdVal=UtilFunctions.parseToInt(UtilFunctions.unquote(words[colID - 1]));        nwords[ncolID - 1 + rcdVal - 1]="1";        ncolID+=_domainSizes[idx];        idx++;      } catch (      Exception e) {        throw new RuntimeException("Error in dummycoding: colID=" + colID + ", rcdVal="+ rcdVal+ ", word="+ words[colID - 1]+ ", domainSize="+ _domainSizes[idx]+ ", dummyCodedLength="+ _dummycodedLength);      }    } else {      nwords[ncolID - 1]=words[colID - 1];      ncolID++;    }  }  return nwords;}  }
class C{  public ShortBuffer put(int index,short c){  shortArray.set(index,c);  return this;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public ListenerIdMap(){  this(11,0.75f);}  }
class C{  public static void dataReductionProxyUIAction(int action){  assert action >= 0 && action < ACTION_INDEX_BOUNDARY;  RecordHistogram.recordEnumeratedHistogram("DataReductionProxy.UIAction",action,DataReductionProxyUma.ACTION_INDEX_BOUNDARY);}  }
class C{  @LargeTest public void testPropertiesofDirtyFile() throws Exception {  final String videoItemFilename=INPUT_FILE_PATH + "Text_FileRenamedTo3gp.3gp";  boolean flagForException=false;  try {    new MediaVideoItem(mVideoEditor,"m1",videoItemFilename,MediaItem.RENDERING_MODE_BLACK_BORDER);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Media Properties for a Dirty  File ",flagForException);}  }
class C{  public CompiledST defineTemplate(String templateName,String template){  if (templateName.charAt(0) != '/')   templateName="/" + templateName;  try {    CompiledST impl=defineTemplate(templateName,new CommonToken(GroupParser.ID,templateName),null,template,null);    return impl;  } catch (  STException se) {  }  return null;}  }
class C{  @Override public boolean isActive(){  return this.state.ordinal() >= MentalState.ACTIVE.ordinal();}  }
class C{  private List<Mapping> createMappings(List<Parameter> parameters){  List<Mapping> mappings=new ArrayList<>();  SemGraph graph=getSemPm().getGraph();  for (  Parameter parameter : parameters) {    Node nodeA=graph.getVarNode(parameter.getNodeA());    Node nodeB=graph.getVarNode(parameter.getNodeB());    if (nodeA == null || nodeB == null) {      throw new IllegalArgumentException("Missing variable--either " + nodeA + " or "+ nodeB+ " parameter = "+ parameter+ ".");    }    int i=getVariableNodes().indexOf(nodeA);    int j=getVariableNodes().indexOf(nodeB);    if (parameter.getType() == ParamType.COEF) {      Mapping mapping=new Mapping(this,parameter,edgeCoef(),i,j);      mappings.add(mapping);    } else     if (parameter.getType() == ParamType.VAR) {      Mapping mapping=new Mapping(this,parameter,errCovar(),i,i);      mappings.add(mapping);    } else     if (parameter.getType() == ParamType.COVAR) {      Mapping mapping=new Mapping(this,parameter,errCovar(),i,j);      mappings.add(mapping);    }  }  return Collections.unmodifiableList(mappings);}  }
class C{  public HttpPath(String host,int port){  super(null,"/","/");  _root=this;  _host=host;  _port=port == 0 ? 80 : port;}  }
class C{  public Intent execute(Context context){  double[] minValues=new double[]{-24,-19,-10,-1,7,12,15,14,9,1,-11,-16};  double[] maxValues=new double[]{7,12,24,28,33,35,37,36,28,19,11,4};  XYMultipleSeriesDataset dataset=new XYMultipleSeriesDataset();  RangeCategorySeries series=new RangeCategorySeries("Temperature");  int length=minValues.length;  for (int k=0; k < length; k++) {    series.add(minValues[k],maxValues[k]);  }  dataset.addSeries(series.toXYSeries());  int[] colors=new int[]{Color.CYAN};  XYMultipleSeriesRenderer renderer=buildBarRenderer(colors);  setChartSettings(renderer,"Monthly temperature range","Month","Celsius degrees",0.5,12.5,-30,45,Color.GRAY,Color.LTGRAY);  renderer.setBarSpacing(0.5);  renderer.setXLabels(0);  renderer.setYLabels(10);  renderer.addXTextLabel(1,"Jan");  renderer.addXTextLabel(3,"Mar");  renderer.addXTextLabel(5,"May");  renderer.addXTextLabel(7,"Jul");  renderer.addXTextLabel(10,"Oct");  renderer.addXTextLabel(12,"Dec");  renderer.addYTextLabel(-25,"Very cold");  renderer.addYTextLabel(-10,"Cold");  renderer.addYTextLabel(5,"OK");  renderer.addYTextLabel(20,"Nice");  renderer.setMargins(new int[]{30,70,10,0});  renderer.setYLabelsAlign(Align.RIGHT);  XYSeriesRenderer r=(XYSeriesRenderer)renderer.getSeriesRendererAt(0);  r.setDisplayChartValues(true);  r.setChartValuesTextSize(12);  r.setChartValuesSpacing(3);  r.setGradientEnabled(true);  r.setGradientStart(-20,Color.BLUE);  r.setGradientStop(20,Color.GREEN);  return ChartFactory.getRangeBarChartIntent(context,dataset,renderer,Type.DEFAULT,"Temperature range");}  }
class C{  public static ValueTime convertTime(Time x,Calendar calendar){  if (calendar == null) {    throw DbException.getInvalidValueException("calendar",null);  }  Calendar cal=(Calendar)calendar.clone();  cal.setTimeInMillis(x.getTime());  long nanos=nanosFromCalendar(cal);  return ValueTime.fromNanos(nanos);}  }
class C{  public void skip(int count){  this.offset+=count;  this.length-=count;}  }
class C{  public Node appendChild(Node node){  return this.constructionElement.appendChild(node);}  }
class C{  public static int minimum(int a,int b,int c){  if (b < a) {    a=b;  }  if (c < a) {    a=c;  }  return a;}  }
class C{  public <U extends T,A>OngoingMatchingR1<T,U,A,R> when(DecomposableMatchBuilder1<U,A> decomposableMatchBuilder){  return new OngoingMatchingR1<>(this,decomposableMatchBuilder.build());}  }
class C{  public static boolean compareCellValue(Double v1,Double v2,double t,boolean ignoreNaN){  if (v1 == null)   v1=0.0;  if (v2 == null)   v2=0.0;  if (ignoreNaN && (v1.isNaN() || v1.isInfinite() || v2.isNaN()|| v2.isInfinite()))   return true;  if (v1.equals(v2))   return true;  return Math.abs(v1 - v2) <= t;}  }
class C{  public void append(byte[] src){  if (buffer != null) {    throw new AlertException(AlertProtocol.INTERNAL_ERROR,new SSLException("Attempt to override the data"));  }  buffer=src;}  }
class C{  public boolean contains(Object o){  if (o == null)   return false;  int mask=elements.length - 1;  int i=head;  Object x;  while ((x=elements[i]) != null) {    if (o.equals(x))     return true;    i=(i + 1) & mask;  }  return false;}  }
class C{  public boolean okToSend(){  return true;}  }
class C{  protected DenseObjectMatrix1D(int size,Object[] elements,int zero,int stride){  setUp(size,zero,stride);  this.elements=elements;  this.isNoView=false;}  }
class C{  private static PipelineOp convertQueryBase(PipelineOp left,final QueryBase query,final Set<IVariable<?>> doneSet,final AST2BOpContext ctx){  final ProjectionNode projection=query.getProjection();  final IVariable<?>[] projectedVars=projection == null || projection.isEmpty() ? null : projection.getProjectionVars();  final List<IVariable<?>> projectedVarList=projectedVars == null ? new LinkedList<IVariable<?>>() : Arrays.asList(projectedVars);  final Set<IVariable<?>> tmp=new LinkedHashSet<IVariable<?>>();  tmp.addAll(doneSet);  tmp.retainAll(projectedVarList);  left=convertQueryBaseWithScopedVars(left,query,tmp,false,ctx);  tmp.retainAll(projectedVarList);  doneSet.addAll(tmp);  if (left != null) {    left=(PipelineOp)left.setProperty(BOp.Annotations.NAMESPACE,ctx.getNamespace());  }  return left;}  }
class C{  InterfaceAddress(Inet6Address address,short prefixLength){  this.address=address;  this.broadcastAddress=null;  this.prefixLength=prefixLength;}  }
class C{  private void clearPendingChanges(){  final int oldSize=changes.size();  changes.clear();synchronized (operationDepthAndModificationLock) {    if (oldSize > 0) {      changesModifiedInOperation=true;    }  }  final PendingChangeCacheEvent event=new PendingChangeCacheEvent(this);  getListener().onPendingChangesCleared(event);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:24.298 -0500",hash_original_method="999E8B45D34E439F1CA5445DE0CC91D3",hash_generated_method="99F4659982D515EA4EFA650C5FA4A9BA") private static int gallopLeft(Comparable<Object> key,Object[] a,int base,int len,int hint){  if (DEBUG)   assert len > 0 && hint >= 0 && hint < len;  int lastOfs=0;  int ofs=1;  if (key.compareTo(a[base + hint]) > 0) {    int maxOfs=len - hint;    while (ofs < maxOfs && key.compareTo(a[base + hint + ofs]) > 0) {      lastOfs=ofs;      ofs=(ofs << 1) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    lastOfs+=hint;    ofs+=hint;  } else {    final int maxOfs=hint + 1;    while (ofs < maxOfs && key.compareTo(a[base + hint - ofs]) <= 0) {      lastOfs=ofs;      ofs=(ofs << 1) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    int tmp=lastOfs;    lastOfs=hint - ofs;    ofs=hint - tmp;  }  if (DEBUG)   assert -1 <= lastOfs && lastOfs < ofs && ofs <= len;  lastOfs++;  while (lastOfs < ofs) {    int m=lastOfs + ((ofs - lastOfs) >>> 1);    if (key.compareTo(a[base + m]) > 0)     lastOfs=m + 1; else     ofs=m;  }  if (DEBUG)   assert lastOfs == ofs;  return ofs;}  }
class C{  private void addConfig(final String line){  int defaultDelay;  StringTokenizer st=new StringTokenizer(line," \t");  if (!st.hasMoreTokens()) {    LOGGER.warn("Invalid map entry: " + line);    return;  }  final String name=st.nextToken();  if (!st.hasMoreTokens()) {    LOGGER.error("Invalid map entry: " + line);    return;  }  String index=st.nextToken();  int pos=index.indexOf('@');  if (pos != -1) {    final String val=index.substring(pos + 1);    index=index.substring(0,pos);    try {      defaultDelay=Integer.parseInt(val);    } catch (    final NumberFormatException ex) {      LOGGER.error("Invalid default delay: " + val);      return;    }  } else {    defaultDelay=TilesetAnimationMap.DEFAULT_DELAY;  }  if (!st.hasMoreTokens()) {    LOGGER.error("Invalid map entry: " + line);    return;  }  final String frames=st.nextToken();  st=new StringTokenizer(frames,":");  final int[] frameIndexes=new int[st.countTokens()];  final int[] frameDelays=new int[frameIndexes.length];  for (int i=0; i < frameIndexes.length; i++) {    String frameIndex=st.nextToken();    pos=frameIndex.indexOf('@');    if (pos != -1) {      final String val=frameIndex.substring(pos + 1);      frameIndex=frameIndex.substring(0,pos);      try {        frameDelays[i]=Integer.parseInt(val);      } catch (      final NumberFormatException ex) {        LOGGER.error("Invalid delay #" + (i + 1) + " <"+ val+ ">: "+ line);        return;      }    } else {      frameDelays[i]=defaultDelay;    }    try {      frameIndexes[i]=Integer.parseInt(frameIndex);    } catch (    final NumberFormatException ex) {      LOGGER.error("Invalid frame #" + (i + 1) + " <"+ frameIndex+ ">: "+ line);      return;    }  }  if (index.equals("*")) {    add(name,frameIndexes,frameDelays);  } else {    try {      add(name,Integer.parseInt(index),frameIndexes,frameDelays);    } catch (    final NumberFormatException ex) {      LOGGER.error("Invalid tile index: " + line);      return;    }  }}  }
class C{  public static void startActivity(Context context,String fileTransferId){  Intent intent=new Intent(context,FileTransferLogView.class);  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);  intent.putExtra(EXTRA_FT_ID,fileTransferId);  context.startActivity(intent);}  }
class C{  public PdfRendererBuilder useUnicodeCharacterBreaker(FSTextBreaker breaker){  this._charBreaker=breaker;  return this;}  }
class C{  public static void assumeConnectivity(String host,int port){  try (Socket socket=new Socket(host,port)){  } catch (  IOException ex) {    assumeNoException(ex);  }}  }
class C{  public TDoubleIntHashMap(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);}  }
class C{  public OracleException(String message){  this(message,UNKNOWN_ERROR_CODE);}  }
class C{  @FlashException public static void addNetworks(String virtualArrayId,@As(",") String[] ids){  if ((ids == null) || (ids.length == 0)) {    networks(virtualArrayId);  }  VirtualArrayRestRep virtualArray=getVirtualArray(virtualArrayId);  updateNetworks(uris(ids),addVirtualArray(virtualArray));  networks(virtualArrayId);}  }
class C{  public boolean isSetValue(){  return this.value != null;}  }
class C{  public void close() throws IOException {  if (in != null) {    try {      in.close();    }  finally {      in=null;    }  }}  }
class C{  public boolean isKeyword(Name name){  return keywords.contains(name);}  }
class C{  public final void addVariable(int index,Node variable){  if (variables.contains(variable)) {    throw new IllegalArgumentException("Expecting a new variable.");  }  if (index < 0 || index > variables.size()) {    throw new IndexOutOfBoundsException("Index must in (0, #vars).");  }  variables.add(index,variable);  resize(data.length,variables.size());  Number[][] _data=new Number[data.length][data[0].length + 1];  for (int j=0; j < data[0].length + 1; j++) {    if (j < index) {      for (int i=0; i < data.length; i++) {        _data[i][j]=data[i][j];      }    } else     if (j == index) {      for (int i=0; i < data.length; i++) {        _data[i][j]=null;      }    } else {      for (int i=0; i < data.length; i++) {        _data[i][j]=data[i][j - 1];      }    }  }}  }
class C{  protected boolean[] declaresSerialVersionUID(){  boolean[] result=new boolean[2];  print("serialVersionUID...");  result[0]=!SerializationHelper.needsUID(m_Kernel.getClass());  if (result[0]) {    println("yes");  } else {    println("no");  }  return result;}  }
class C{  public boolean hasLowLevelInfoFlowInfo(){  return receiverSourceInfoUnits != null || methodArgumentSourceInfoUnits != null;}  }
class C{  public final boolean isSecure(Socket sock) throws IllegalArgumentException {  if (sock == null) {    throw new IllegalArgumentException("Socket may not be null.");  }  if (sock.getClass() != Socket.class) {    throw new IllegalArgumentException("Socket not created by this factory.");  }  if (sock.isClosed()) {    throw new IllegalArgumentException("Socket is closed.");  }  return false;}  }
class C{  public char[] toCharArray(){  char[] b=new char[size()];  toCharArray(b);  return b;}  }
class C{  public void readFromObject(Object object){  try {    Method method=BeanUtils.getReadMethod(object.getClass(),getName());    if (method != null) {      Object value=method.invoke(object,null);      initializeValue(value);      if (value != null) {        for (Iterator iter=subProperties.iterator(); iter.hasNext(); ) {          Property subProperty=(Property)iter.next();          subProperty.readFromObject(value);        }      }    }  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public static void main(String[] args){  int bitsPerLine=16;  if (args.length == 1) {    bitsPerLine=Integer.parseInt(args[0]);  }  int count;  for (count=0; !BinaryStdIn.isEmpty(); count++) {    if (bitsPerLine == 0) {      BinaryStdIn.readBoolean();      continue;    } else     if (count != 0 && count % bitsPerLine == 0)     StdOut.println();    if (BinaryStdIn.readBoolean())     StdOut.print(1); else     StdOut.print(0);  }  if (bitsPerLine != 0)   StdOut.println();  StdOut.println(count + " bits");}  }
class C{  public void throwExcAfterChar(int charUpto){  excAtChar=charUpto;  assert readSoFar == 0;}  }
class C{  protected boolean activateAccelerometer(){  if (mSensorManager != null && mSensorManager.registerListener(this,mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER),(int)(mAccelerometerInterval * 1000.0f)))   return true;  PLLog.debug("PLView::activateAccelerometer","Accelerometer sensor is not available on the device!");  return false;}  }
class C{  public DynamicTimeSeriesCollection(int nSeries,int nMoments,RegularTimePeriod timeSample){  this(nSeries,nMoments,timeSample,TimeZone.getDefault());}  }
class C{  public void dispose(){  final Control control=getControl();  if (control != null && !control.isDisposed()) {    control.dispose();  }}  }
class C{  public String toString(){  return "TAG_Double(\"" + name + "\"): val="+ value;}  }
class C{  protected void fillVBO(DrawContext dc){  GL gl=dc.getGL();  ShapeData shapeData=this.getCurrent();  int[] vboIds=(int[])dc.getGpuResourceCache().get(shapeData.getVboCacheKey());  if (vboIds == null) {    int size=shapeData.coordBuffer.limit() * 4;    size+=shapeData.interiorIndicesBuffer.limit() * 4;    vboIds=new int[2];    gl.glGenBuffers(vboIds.length,vboIds,0);    dc.getGpuResourceCache().put(shapeData.getVboCacheKey(),vboIds,GpuResourceCache.VBO_BUFFERS,size);    shapeData.refillIndexVBO=true;  }  if (shapeData.refillIndexVBO) {    try {      IntBuffer ib=shapeData.interiorIndicesBuffer;      gl.glBindBuffer(GL.GL_ELEMENT_ARRAY_BUFFER,vboIds[1]);      gl.glBufferData(GL.GL_ELEMENT_ARRAY_BUFFER,ib.limit() * 4,ib.rewind(),GL.GL_DYNAMIC_DRAW);      shapeData.refillIndexVBO=false;    }  finally {      gl.glBindBuffer(GL.GL_ELEMENT_ARRAY_BUFFER,0);    }  }  try {    FloatBuffer vb=this.getCurrent().coordBuffer;    gl.glBindBuffer(GL.GL_ARRAY_BUFFER,vboIds[0]);    gl.glBufferData(GL.GL_ARRAY_BUFFER,vb.limit() * 4,vb.rewind(),GL.GL_STATIC_DRAW);  }  finally {    gl.glBindBuffer(GL.GL_ARRAY_BUFFER,0);  }}  }
class C{  public MalformedStreamException(String message){  super(message);}  }
class C{  public static String makeSystemName(String type,int nAddress,int bitNum){  String nName="";  if ((!type.equals("S")) && (!type.equals("L")) && (!type.equals("T"))) {    log.error("illegal type character proposed for system name");    return (nName);  }  if ((nAddress < 0) || (nAddress > 127)) {    log.error("illegal node adddress proposed for system name");    return (nName);  }  if ((bitNum < 1) || (bitNum > 2048)) {    log.error("illegal bit number proposed for system name");    return (nName);  }  if (bitNum < 1000) {    nName="C" + type + Integer.toString((nAddress * 1000) + bitNum);  } else {    nName="C" + type + Integer.toString(nAddress)+ "B"+ Integer.toString(bitNum);  }  return (nName);}  }
class C{  private static byte[] readZoneInfoFile(final String fileName){  if (fileName.indexOf("..") >= 0) {    return null;  }  byte[] buffer=null;  File file=new File(ziDir,fileName);  try {    int filesize=(int)file.length();    if (filesize > 0) {      FileInputStream fis=new FileInputStream(file);      buffer=new byte[filesize];      try {        if (fis.read(buffer) != filesize) {          throw new IOException("read error on " + fileName);        }      }  finally {        fis.close();      }    }  } catch (  Exception ex) {    if (!(ex instanceof FileNotFoundException) || JAVAZM_FILE_NAME.equals(fileName)) {      System.err.println("ZoneInfoOld: " + ex.getMessage());    }  }  return buffer;}  }
class C{  protected Entry(int hash,int key,Object value,Entry next){  this.hash=hash;  this.key=key;  this.value=value;  this.next=next;}  }
class C{  public void removeYTextLabel(double y){  removeYTextLabel(y,0);}  }
class C{  private boolean resourceIsHostPage(IResource resource){  IProject project=resource.getProject();  if (WebAppUtilities.isWebApp(project)) {    IFolder war=WebAppUtilities.getWarSrc(project);    if (war != null) {      if (war.getFullPath().isPrefixOf(resource.getFullPath())) {        return ResourceUtils.hasJspOrHtmlExtension(resource);      }    }  } else {    return "html".equalsIgnoreCase(resource.getFileExtension());  }  return false;}  }
class C{  public static String stemToken(final String token,final String postag){  if (whitespace.matcher(token).find()) {    throw new IllegalArgumentException("Token may not contain a space: " + token);  }  return morpha(cleanText(token) + "_" + postag,true);}  }
class C{  Item newFieldItem(final String owner,final String name,final String desc){  key3.set(FIELD,owner,name,desc);  Item result=get(key3);  if (result == null) {    put122(FIELD,newClass(owner),newNameType(name,desc));    result=new Item(index++,key3);    put(result);  }  return result;}  }
class C{  private void runGnuplotScript(String pathToInput,String relativePathToGnuplotScript){  log.info("execute command: cd " + pathToInput);  log.info("and afterwards: gnuplot " + relativePathToGnuplotScript);  try {    ProcessBuilder builder=new ProcessBuilder("cmd","/c","cd",pathToInput,"&","gnuplot",relativePathToGnuplotScript);    Process p=builder.start();    BufferedReader read=new BufferedReader(new InputStreamReader(p.getInputStream()));    String zeile;    while ((zeile=read.readLine()) != null) {      log.error("input stream: " + zeile);    }    read=new BufferedReader(new InputStreamReader(p.getErrorStream()));    while ((zeile=read.readLine()) != null) {      log.error("error: " + zeile);    }  } catch (  IOException e) {    log.error("ERROR while executing gnuplot command.");    e.printStackTrace();  }}  }
class C{  @Override public void postProcess() throws Exception {  m_ResultProducer.postProcess();}  }
class C{  @Override public String globalInfo(){  return "Filters instances according to a user-specified expression.\n\n" + "Grammar:\n\n" + "boolexpr_list ::= boolexpr_list boolexpr_part | boolexpr_part;\n"+ "\n"+ "boolexpr_part ::= boolexpr:e {: parser.setResult(e); :} ;\n"+ "\n"+ "boolexpr ::=    BOOLEAN \n"+ "              | true\n"+ "              | false\n"+ "              | expr < expr\n"+ "              | expr <= expr\n"+ "              | expr > expr\n"+ "              | expr >= expr\n"+ "              | expr = expr\n"+ "              | ( boolexpr )\n"+ "              | not boolexpr\n"+ "              | boolexpr and boolexpr\n"+ "              | boolexpr or boolexpr\n"+ "              | ATTRIBUTE is STRING\n"+ "              | ATTRIBUTE regexp STRING\n"+ "              ;\n"+ "\n"+ "expr      ::=   NUMBER\n"+ "              | ATTRIBUTE\n"+ "              | ( expr )\n"+ "              | opexpr\n"+ "              | funcexpr\n"+ "              ;\n"+ "\n"+ "opexpr    ::=   expr + expr\n"+ "              | expr - expr\n"+ "              | expr * expr\n"+ "              | expr / expr\n"+ "              ;\n"+ "\n"+ "funcexpr ::=    abs ( expr )\n"+ "              | sqrt ( expr )\n"+ "              | log ( expr )\n"+ "              | exp ( expr )\n"+ "              | sin ( expr )\n"+ "              | cos ( expr )\n"+ "              | tan ( expr )\n"+ "              | rint ( expr )\n"+ "              | floor ( expr )\n"+ "              | pow ( expr for base , expr for exponent )\n"+ "              | ceil ( expr )\n"+ "              ;\n"+ "\n"+ "Notes:\n"+ "- NUMBER\n"+ "  any integer or floating point number \n"+ "  (but not in scientific notation!)\n"+ "- STRING\n"+ "  any string surrounded by single quotes; \n"+ "  the string may not contain a single quote though.\n"+ "- ATTRIBUTE\n"+ "  the following placeholders are recognized for \n"+ "  attribute values:\n"+ "  - CLASS for the class value in case a class attribute is set.\n"+ "  - ATTxyz with xyz a number from 1 to # of attributes in the\n"+ "    dataset, representing the value of indexed attribute.\n"+ "- regexp\n"+ "  A regular expression for pattern matching, e.g., '^id.*$'\n"+ "\n"+ "Examples:\n"+ "- extracting only mammals and birds from the 'zoo' UCI dataset:\n"+ "  (CLASS is 'mammal') or (CLASS is 'bird')\n"+ "- extracting only animals with at least 2 legs from the 'zoo' UCI dataset:\n"+ "  (ATT14 >= 2)\n"+ "- extracting only instances with non-missing 'wage-increase-second-year'\n"+ "  from the 'labor' UCI dataset:\n"+ "  not ismissing(ATT3)\n";}  }
class C{  public static String serializeObjectCollectionToString(Collection<? extends Object> collection){  StringBuilder stringBuilder=new StringBuilder();  Iterator iterator=collection.iterator();  stringBuilder.append(String.format("%n"));  while (iterator.hasNext()) {    stringBuilder.append(iterator.next().toString());    stringBuilder.append(String.format("%n"));  }  return stringBuilder.toString();}  }
class C{  public static WorkspaceImpl createWorkspace(WorkspaceStatus status,Integer... machineRams){  final List<MachineImpl> machines=new ArrayList<>(machineRams.length - 1);  for (  Integer machineRam : machineRams) {    machines.add(createMachine(machineRam));  }  return WorkspaceImpl.builder().setRuntime(new WorkspaceRuntimeImpl(null,null,machines,null)).setStatus(status).build();}  }
class C{  @Override public synchronized void updateTime(String columnName,java.sql.Time x) throws SQLException {  updateTime(findColumn(columnName),x);}  }
class C{  private void handle407Authentication(SipTransactionContext ctx) throws PayloadException, NetworkException, ContactManagerException {  try {    if (sLogger.isActivated()) {      sLogger.info("407 response received");    }    SipResponse resp=ctx.getSipResponse();    mAuthenticationAgent.readProxyAuthenticateHeader(resp);    mDialogPath.incrementCseq();    if (sLogger.isActivated()) {      sLogger.info("Send second SUBSCRIBE");    }    SipRequest subscribe=createSubscribe();    mAuthenticationAgent.setProxyAuthorizationHeader(subscribe);    sendSubscribe(subscribe);  } catch (  InvalidArgumentException e) {    throw new PayloadException("Failed to handle 407 authentication response!",e);  }catch (  ParseException e) {    throw new PayloadException("Failed to handle 407 authentication response!",e);  }}  }
class C{  public void reportTaskShutdown(Thread taskThread,SingleThreadStageTask task){  if (logger.isDebugEnabled()) {    logger.debug("Recording task shutdown: thread=" + taskThread + " task="+ task);  }  if (threadMap.remove(task.getName()) != null) {    if (logger.isDebugEnabled())     logger.debug("Task shutdown: " + task.getName());  }  if (threadMap.size() == 0) {    this.shutdown=true;    if (logger.isDebugEnabled())     logger.debug("Task group has shut down following last task end");  }}  }
class C{  private String applyPattern(Pattern pattern,String urlString){  Matcher matcher=pattern.matcher(urlString);  if (matcher.find()) {    return matcher.group(1);  }  return null;}  }
class C{  public SimpleFileFilter(String ext,String desc,Object data){  addExtension(ext);  this.desc=desc;  this.data=data;}  }
class C{  @Setup public void init(){  array=new Model[1000];  for (int i=0; i < array.length; ++i) {    array[i]=new Model(i);  }}  }
class C{  public Builder putProperties(String prefix,Properties properties,String[] ignorePrefixes){  for (  Object key1 : properties.keySet()) {    String key=(String)key1;    String value=properties.getProperty(key);    if (key.startsWith(prefix)) {      boolean ignore=false;      for (      String ignorePrefix : ignorePrefixes) {        if (key.startsWith(ignorePrefix)) {          ignore=true;          break;        }      }      if (!ignore) {        map.put(key.substring(prefix.length()),value);      }    }  }  return this;}  }
class C{  public SemanticArgument convert(JCas view,TopTreebankNode topNode){  SemanticArgument argument=new SemanticArgument(view);  argument.setPropTxt(this.propTxt);  argument.setLabel(this.label);  argument.setFeature(this.feature);  argument.setPreposition(this.preposition);  argument.setHyphenTag(this.hyphenTag);  if (this.relation instanceof PropbankCorefRelation) {    List<Annotation> annotations=new ArrayList<Annotation>();    List<Annotation> substantiveAnnotations=new ArrayList<Annotation>();    for (    PropbankRelation rel : ((PropbankCorefRelation)this.relation).getCorefRelations()) {      Annotation a=rel.convert(view,topNode);      annotations.add(a);      if (a.getBegin() != a.getEnd()) {        substantiveAnnotations.add(a);      }    }    argument.setCoreferenceAnnotations(new FSArray(view,annotations.size()));    FSCollectionFactory.fillArrayFS(argument.getCoreferenceAnnotations(),annotations);    if (substantiveAnnotations.isEmpty()) {      Annotation lastAnnotation=annotations.get(annotations.size() - 1);      argument.setBegin(lastAnnotation.getBegin());      argument.setEnd(lastAnnotation.getEnd());    } else {      int[] extent=AnnotationUtil.getAnnotationsExtent(substantiveAnnotations);      argument.setBegin(extent[0]);      argument.setEnd(extent[1]);    }    if (substantiveAnnotations.size() == 1) {      argument.setAnnotation(substantiveAnnotations.get(0));    }  } else {    argument.setAnnotation(this.relation.convert(view,topNode));    argument.setBegin(argument.getAnnotation().getBegin());    argument.setEnd(argument.getAnnotation().getEnd());  }  argument.addToIndexes();  return argument;}  }
class C{  @CallSuper protected void collapseView(int position){  mAdapter.collapse(position);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  int x=getInt(stack);  Playlist p=getPlaylist(stack);  if (p == null)   return "";  x=p.getSegmentType(x);  if (x == Playlist.AIRING_SEGMENT)   return "Airing"; else   if (x == Playlist.ALBUM_SEGMENT)   return "Album"; else   if (x == Playlist.PLAYLIST_SEGMENT)   return "Playlist"; else   if (x == Playlist.TEMPMEDIAFILE_SEGMENT)   return "MediaFile"; else   return "";}  }
class C{  @Override public void updateStatus(JobContext jobContext) throws Exception {  DbClient dbClient=jobContext.getDbClient();  try {    if (_status == JobStatus.IN_PROGRESS) {      return;    }    String opId=getTaskCompleter().getOpId();    StringBuilder logMsgBuilder=new StringBuilder(String.format("Updating status of job %s to %s",opId,_status.name()));    VNXeApiClient vnxeApiClient=getVNXeClient(jobContext);    URI quotaId=getTaskCompleter().getId();    QuotaDirectory quotaObj=dbClient.queryObject(QuotaDirectory.class,quotaId);    URI fsUri=quotaObj.getParent().getURI();    FileShare fsObj=dbClient.queryObject(FileShare.class,fsUri);    String event=null;    if (_status == JobStatus.SUCCESS && quotaObj != null) {      updateQuota(quotaObj,dbClient,logMsgBuilder,vnxeApiClient);      event=String.format("Create file system quota directory successfully for URI: %s",getTaskCompleter().getId());    } else     if (_status == JobStatus.FAILED && quotaObj != null) {      if (!quotaObj.getInactive()) {        quotaObj.setInactive(true);        dbClient.updateObject(quotaObj);      }      event=String.format("Task %s failed to create file system quota directory: %s",opId,quotaObj.getName());      logMsgBuilder.append("\n");      logMsgBuilder.append(event);    } else {      logMsgBuilder.append(String.format("Could not find the quota directory:%s",quotaId.toString()));    }    _logger.info(logMsgBuilder.toString());    FileDeviceController.recordFileDeviceOperation(dbClient,OperationTypeEnum.CREATE_FILE_SYSTEM_QUOTA_DIR,_isSuccess,event,"",quotaObj,fsObj);  } catch (  Exception e) {    _logger.error("Caught an exception while trying to updateStatus for VNXUnityCreateFileSystemQuotaDirectoryJob",e);    setErrorStatus("Encountered an internal error during file system quota create job status processing : " + e.getMessage());  } finally {    super.updateStatus(jobContext);  }}  }
class C{  public void putSubnet(MockSubnet subnet){  subnet.setAvailabilityZone(zoneName);  this.subnets.put(subnet.getSubnetId(),subnet);}  }
class C{  public HBaseWordCountFetch(){}  }
class C{  public static void log(String message,Object... args){  if (loggingEnabled) {    Log.d(TAG,args.length == 0 ? message : String.format(message,args));  }}  }
class C{  void abortWithError(String msg,Element e){  reportError(msg,e);  throw new AbortProcessingException();}  }
class C{  @Override public boolean waitUntilGone(Selector obj,long timeout){  if (obj.getChildOrSibling().length == 0 && obj.checkBySelectorNull(obj) == false)   return device.wait(Until.gone(obj.toBySelector()),timeout);  return device.findObject(obj.toUiSelector()).waitUntilGone(timeout);}  }
class C{  public boolean execute(final IORunnable run){synchronized (mJobs) {    if (mProcessJobs) {      if (!ProgramState.isAbort()) {        mJobs.add(new RunProxy(run));        mJobs.notifyAll();        return true;      }    }  }  return false;}  }
class C{  @Override public void doExplosionA(){  if (isSmoking && restrictExplosion > 0) {    populateAffectedBlocksList();  }  if (inflictsDamage) {    affectEntitiesWithin();  }}  }
class C{  public EmptyPlot(DiagnosticTool frame){  super(frame,null);  setBackground(Color.WHITE);}  }
class C{  void dismiss(){  if (isShowing()) {    mPopup.dismiss();  }}  }
class C{  public final void lazySet(int newValue){  unsafe.putOrderedInt(this,valueOffset,newValue);}  }
class C{  private boolean shouldResumeTrack(){  Track track=myTracksProviderUtils.getTrack(recordingTrackId);  if (track == null) {    Log.d(TAG,"Not resuming. Track is null.");    return false;  }  int retries=PreferencesUtils.getInt(this,R.string.auto_resume_track_current_retry_key,PreferencesUtils.AUTO_RESUME_TRACK_CURRENT_RETRY_DEFAULT);  if (retries >= MAX_AUTO_RESUME_TRACK_RETRY_ATTEMPTS) {    Log.d(TAG,"Not resuming. Exceeded maximum retry attempts.");    return false;  }  PreferencesUtils.setInt(this,R.string.auto_resume_track_current_retry_key,retries + 1);  if (autoResumeTrackTimeout == PreferencesUtils.AUTO_RESUME_TRACK_TIMEOUT_NEVER) {    Log.d(TAG,"Not resuming. Auto-resume track timeout set to never.");    return false;  } else   if (autoResumeTrackTimeout == PreferencesUtils.AUTO_RESUME_TRACK_TIMEOUT_ALWAYS) {    Log.d(TAG,"Resuming. Auto-resume track timeout set to always.");    return true;  }  if (track.getTripStatistics() == null) {    Log.d(TAG,"Not resuming. No trip statistics.");    return false;  }  long stopTime=track.getTripStatistics().getStopTime();  return stopTime > 0 && (System.currentTimeMillis() - stopTime) <= autoResumeTrackTimeout * ONE_MINUTE;}  }
class C{  public void writeShort(int s) throws IOException {  out.write(s & 0xFF);  out.write((s >>> 8) & 0xFF);  written+=2;}  }
class C{  public Ed25519FieldElement invert(){  Ed25519FieldElement f0, f1;  f0=this.square();  f1=this.pow2to9();  f0=f0.multiply(f1);  f1=this.pow2to252sub4();  for (int i=1; i < 4; ++i) {    f1=f1.square();  }  return f1.multiply(f0);}  }
class C{  public static double nextPowLaw(double alpha,double cut,RandomEngine randomGenerator){  return cut * Math.pow(randomGenerator.raw(),1.0 / (alpha + 1.0));}  }
class C{  private void mergeCollapse(){  while (stackSize > 1) {    int n=stackSize - 2;    if (n > 0 && runLen[n - 1] <= runLen[n] + runLen[n + 1]) {      if (runLen[n - 1] < runLen[n + 1])       n--;      mergeAt(n);    } else     if (runLen[n] <= runLen[n + 1]) {      mergeAt(n);    } else {      break;    }  }}  }
class C{  public boolean isSetParagraphText(){  return this.paragraphText != null;}  }
class C{  @Inject public ImportWizard(@Assisted ImportProject dataObject,ProjectServiceClient projectServiceClient,VfsServiceClient vfsServiceClient,DtoUnmarshallerFactory dtoUnmarshallerFactory,DtoFactory dtoFactory,EventBus eventBus,CoreLocalizationConstant localizationConstant,ImportProjectNotificationSubscriber importProjectNotificationSubscriber){  super(dataObject);  this.projectServiceClient=projectServiceClient;  this.vfsServiceClient=vfsServiceClient;  this.dtoUnmarshallerFactory=dtoUnmarshallerFactory;  this.dtoFactory=dtoFactory;  this.eventBus=eventBus;  this.localizationConstant=localizationConstant;  this.importProjectNotificationSubscriber=importProjectNotificationSubscriber;}  }
class C{  public static void dump(ServletConfig config){  log.config("ServletConfig " + config.getServletName());  log.config("- Context=" + config.getServletContext());  if (!CLogMgt.isLevelFiner())   return;  boolean first=true;  Enumeration e=config.getInitParameterNames();  while (e.hasMoreElements()) {    if (first)     log.finer("InitParameter:");    first=false;    String key=(String)e.nextElement();    Object value=config.getInitParameter(key);    log.finer("- " + key + " = "+ value);  }}  }
class C{  public Dag(Graph graph) throws IllegalArgumentException {  if (graph.existsDirectedCycle()) {    throw new IllegalArgumentException("That graph was not acyclic.");  }  this.graph=new EdgeListGraph();  transferNodesAndEdges(graph);  resetDPath();  reconstituteDpath();  for (  Edge edge : graph.getEdges()) {    if (graph.isHighlighted(edge)) {      setHighlighted(edge,true);    }  }}  }
class C{  public Money(){  super(KEY);}  }
class C{  private void createNetworkStateOperations(AWSNetworkServiceCreationContext context,AWSNetworkCreationStage next){  if (context.vpcs == null || context.vpcs.size() == 0) {    logInfo("No new VPCs have been discovered.Nothing to do.");    context.networkCreationStage=next;    handleNetworkStateChanges(context);  } else {    List<Operation> networkOperations=new ArrayList<>();    for (    String remoteVPCId : context.vpcs.keySet()) {      NetworkState networkState=context.vpcs.get(remoteVPCId);      Operation networkStateOperation=null;      if (context.localNetworkStateMap.containsKey(remoteVPCId)) {        networkState.documentSelfLink=context.localNetworkStateMap.get(remoteVPCId).documentSelfLink;        networkStateOperation=createPatchOperation(this,networkState,networkState.documentSelfLink);        networkOperations.add(networkStateOperation);        continue;      }      networkStateOperation=createPostOperation(this,networkState,NetworkService.FACTORY_LINK);      networkOperations.add(networkStateOperation);    }    if (networkOperations.isEmpty()) {      logInfo("No networks(VPC) have found.");      context.networkCreationStage=next;      handleNetworkStateChanges(context);      return;    }    OperationJoin.JoinedCompletionHandler joinCompletion=null;    OperationJoin joinOp=OperationJoin.create(networkOperations);    joinOp.setCompletion(joinCompletion);    joinOp.sendWith(this);  }}  }
class C{  public CascadedTable(Table parent){  this(parent,null,null);}  }
class C{  TimeoutThread(int seconds){  this.timeout=seconds * MILLIS_PER_SECOND;  new Thread(this).start();synchronized (this) {    while (!started) {      try {        wait();      } catch (      InterruptedException e) {      }    }  }}  }
class C{  public static File createTempDir(File dir) throws IOException {  return createTempDir(dir,true);}  }
class C{  public static <T>PropertyNotNullPredicate<T> isNotNull(Property<T> property){  return new PropertyNotNullPredicate<>(property(property));}  }
class C{  public Matrix3f mulComponentWise(Matrix3fc other){  return mulComponentWise(other,this);}  }
class C{  public static void error(ErrorMessages message){  errors++;  err(NL + "Error: " + ErrorMessages.get(message));}  }
class C{  public void buildReport(PlatformUser user,VOReportResult result) throws XPathExpressionException, ParserConfigurationException {  result.setServerTimeZone(DateConverter.getCurrentTimeZoneAsUTCString());  List<ReportResultData> subscriptionReportData=new ArrayList<ReportResultData>();  if (user.isUnitAdmin() && !user.isOrganizationAdmin()) {    List<Long> unitAdminKeys=unitDao.retrieveUnitKeysForUnitAdmin(user.getKey());    subscriptionReportData=subscriptionDao.retrieveSubscriptionReportData(user.getOrganization().getOrganizationId(),unitAdminKeys);  } else {    subscriptionReportData=subscriptionDao.retrieveSubscriptionReportData(user.getOrganization().getOrganizationId());  }  ReportDataConverter converter=new ReportDataConverter(subscriptionDao);  converter.convertToXml(subscriptionReportData,result.getData(),Collections.<String,String>emptyMap());}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder(16);  if (major >= 0) {    sb.append(major).append('.').append(minor);  }  if (patch >= 0) {    sb.append('.').append(patch);  }  if (milestone >= 0) {    sb.append('M').append(milestone);  }  if (modifier != null) {    if (sb.length() > 0) {      sb.append('-');    }    sb.append(modifier);  }  return sb.toString();}  }
class C{  void transform(float v[],int tv[],int nvert){  float lxx=xx, lxy=xy, lxz=xz, lxo=xo;  float lyx=yx, lyy=yy, lyz=yz, lyo=yo;  float lzx=zx, lzy=zy, lzz=zz, lzo=zo;  for (int i=nvert * 3; (i-=3) >= 0; ) {    float x=v[i];    float y=v[i + 1];    float z=v[i + 2];    tv[i]=(int)(x * lxx + y * lxy + z * lxz + lxo);    tv[i + 1]=(int)(x * lyx + y * lyy + z * lyz + lyo);    tv[i + 2]=(int)(x * lzx + y * lzy + z * lzz + lzo);  }}  }
class C{  public void sortInstances(){  if (m_CurrentCol == -1) {    return;  }  ((ArffSortedTableModel)m_TableArff.getModel()).sortInstances(m_CurrentCol);}  }
class C{  @Bean @ConditionalOnMissingBean public ErrorHandler errorHandler(){  return new ConditionalRejectingErrorHandler();}  }
class C{  public int hashCode(){  return "GJ".hashCode() * 11 + iJulianChronology.hashCode() + iGregorianChronology.hashCode() + iCutoverInstant.hashCode();}  }
class C{  protected TemplateVariable createVariable(String type,String name,int[] offsets){  return createVariable(fCurrentType,name,offsets);}  }
class C{  @Override public void close() throws IOException {  this.output.close();  this.output=null;}  }
class C{  public AdaptiveGridArchive(int capacity,Problem problem,int numberOfDivisions){  super(new ParetoDominanceComparator(),DuplicateMode.ALLOW_DUPLICATES);  this.capacity=capacity;  this.problem=problem;  this.numberOfDivisions=numberOfDivisions;  minimum=new double[problem.getNumberOfObjectives()];  maximum=new double[problem.getNumberOfObjectives()];  try {    density=new int[ArithmeticUtils.pow(numberOfDivisions,problem.getNumberOfObjectives())];  } catch (  MathArithmeticException e) {    throw new FrameworkException("number of divisions (bisections) " + "too large for adaptive grid archive",e);  }  adaptGrid();}  }
class C{  public void putInt(String key,int value){  checkForNullKey(key);  preferences.edit().putInt(key,value).apply();}  }
class C{  public IndexFileDeleter(String[] files,Directory directoryOrig,Directory directory,IndexDeletionPolicy policy,SegmentInfos segmentInfos,InfoStream infoStream,IndexWriter writer,boolean initialIndexExists,boolean isReaderInit) throws IOException {  Objects.requireNonNull(writer);  this.infoStream=infoStream;  this.writer=writer;  final String currentSegmentsFile=segmentInfos.getSegmentsFileName();  if (infoStream.isEnabled("IFD")) {    infoStream.message("IFD","init: current segments file is \"" + currentSegmentsFile + "\"; deletionPolicy="+ policy);  }  this.policy=policy;  this.directoryOrig=directoryOrig;  this.directory=directory;  CommitPoint currentCommitPoint=null;  if (currentSegmentsFile != null) {    Matcher m=IndexFileNames.CODEC_FILE_PATTERN.matcher("");    for (    String fileName : files) {      m.reset(fileName);      if (!fileName.endsWith("write.lock") && (m.matches() || fileName.startsWith(IndexFileNames.SEGMENTS) || fileName.startsWith(IndexFileNames.PENDING_SEGMENTS))) {        getRefCount(fileName);        if (fileName.startsWith(IndexFileNames.SEGMENTS) && !fileName.equals(IndexFileNames.OLD_SEGMENTS_GEN)) {          if (infoStream.isEnabled("IFD")) {            infoStream.message("IFD","init: load commit \"" + fileName + "\"");          }          SegmentInfos sis=SegmentInfos.readCommit(directoryOrig,fileName);          final CommitPoint commitPoint=new CommitPoint(commitsToDelete,directoryOrig,sis);          if (sis.getGeneration() == segmentInfos.getGeneration()) {            currentCommitPoint=commitPoint;          }          commits.add(commitPoint);          incRef(sis,true);          if (lastSegmentInfos == null || sis.getGeneration() > lastSegmentInfos.getGeneration()) {            lastSegmentInfos=sis;          }        }      }    }  }  if (currentCommitPoint == null && currentSegmentsFile != null && initialIndexExists) {    SegmentInfos sis=null;    try {      sis=SegmentInfos.readCommit(directoryOrig,currentSegmentsFile);    } catch (    IOException e) {      throw new CorruptIndexException("unable to read current segments_N file",currentSegmentsFile,e);    }    if (infoStream.isEnabled("IFD")) {      infoStream.message("IFD","forced open of current segments file " + segmentInfos.getSegmentsFileName());    }    currentCommitPoint=new CommitPoint(commitsToDelete,directoryOrig,sis);    commits.add(currentCommitPoint);    incRef(sis,true);  }  if (isReaderInit) {    checkpoint(segmentInfos,false);  }  CollectionUtil.timSort(commits);  inflateGens(segmentInfos,refCounts.keySet(),infoStream);  Set<String> toDelete=new HashSet<>();  for (  Map.Entry<String,RefCount> entry : refCounts.entrySet()) {    RefCount rc=entry.getValue();    final String fileName=entry.getKey();    if (0 == rc.count) {      if (fileName.startsWith(IndexFileNames.SEGMENTS)) {        throw new IllegalStateException("file \"" + fileName + "\" has refCount=0, which should never happen on init");      }      if (infoStream.isEnabled("IFD")) {        infoStream.message("IFD","init: removing unreferenced file \"" + fileName + "\"");      }      toDelete.add(fileName);    }  }  deleteFiles(toDelete);  policy.onInit(commits);  checkpoint(segmentInfos,false);  if (currentCommitPoint == null) {    startingCommitDeleted=false;  } else {    startingCommitDeleted=currentCommitPoint.isDeleted();  }  deleteCommits();}  }
class C{  private static void initScanner(final WebAppContext web,final Configs config){  int scanIntervalSeconds=config.getScanIntervalSeconds();  final ArrayList<File> scanList=new ArrayList<File>();  System.err.println("init scanning folders...");  if (config.getScanlist() != null) {    String[] items=config.getScanlist().split(File.pathSeparator);    for (    String item : items) {      File f=new File(item);      scanList.add(f);      System.err.println("add to scan list:" + item);    }  }  Scanner scanner=new Scanner();  scanner.setScanInterval(scanIntervalSeconds);  scanner.setScanDirs(scanList);  scanner.setRecursive(true);  scanner.setReportExistingFilesOnStartup(false);  scanner.addListener(new RJRFileChangeListener(web,config));  System.err.println("Starting scanner at interval of " + scanIntervalSeconds + " seconds.");  try {    scanner.start();  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public static boolean intersects(Coordinate p1,Coordinate p2,Coordinate q1,Coordinate q2){  double minq=Math.min(q1.x,q2.x);  double maxq=Math.max(q1.x,q2.x);  double minp=Math.min(p1.x,p2.x);  double maxp=Math.max(p1.x,p2.x);  if (minp > maxq)   return false;  if (maxp < minq)   return false;  minq=Math.min(q1.y,q2.y);  maxq=Math.max(q1.y,q2.y);  minp=Math.min(p1.y,p2.y);  maxp=Math.max(p1.y,p2.y);  if (minp > maxq)   return false;  if (maxp < minq)   return false;  return true;}  }
class C{  public String jplot(double x[],double y[],Paint color,Shape marker,float[] style,String legend){  if (x.length != y.length) {    throw new IllegalArgumentException("Arrays x and y must have the same size!" + " x.len = " + x.length + ",  y.len = "+ y.length);  }  String seriesKey=null;  if (m_chart == null) {    m_dataset=new DefaultXYDataset();    seriesKey=getUniqueSeriesKey(m_dataset,legend);    m_dataset.addSeries(seriesKey,new double[][]{x,y});    m_chart=ChartFactory.createXYLineChart(m_title,m_xAxisLabel,m_yAxisLabel,m_dataset,PlotOrientation.VERTICAL,true,true,false);    initChart();  } else {    if (m_isHoldOn) {      seriesKey=getUniqueSeriesKey(m_dataset,legend);      m_dataset.addSeries(seriesKey,new double[][]{x,y});    } else {      for (int i=0; i < m_dataset.getSeriesCount(); i++) {        Comparable key=m_dataset.getSeriesKey(i);        m_dataset.removeSeries(key);      }      seriesKey=getUniqueSeriesKey(m_dataset,legend);      m_dataset.addSeries(seriesKey,new double[][]{x,y});    }  }  if (color == null) {    color=Color.yellow;  }  setLineColor(LAST_IDX,color);  if (marker != null || style != null) {    setLineStyle(LAST_IDX,marker,1,style);  }  return seriesKey;}  }
class C{  private boolean showAppMenu(boolean startDragging){  if (!mMenuHandler.isAppMenuShowing() && mMenuHandler.showAppMenu(mMenuButton,false,startDragging)) {    if (mOnAppMenuShownListener != null) {      mOnAppMenuShownListener.run();    }    return true;  }  return false;}  }
class C{  public static void main(String[] args){  test(1000);}  }
class C{  public void removeComponent(T component){  components.remove(component);}  }
class C{  public boolean isOnlySourceMappedBreakpoints(){  return true;}  }
class C{  public LoginToClosedMarketplaceException(){  super();}  }
class C{  public boolean isIn(long value){  if (lowValue == Long.MAX_VALUE) {    return highValue >= value;  }  return lowValue <= value && highValue >= value;}  }
class C{  public TimeOfDay(int hour,int minute){  this.hour=hour;  this.minute=minute;  this.second=0;  validate();}  }
class C{  @Override protected void withBindHolder(itemGridCellBinder holder,String data,int position){}  }
class C{  public AggRecord(){  this.aggregatedRecordBuilder=AggregatedRecord.newBuilder();  this.aggregatedMessageSizeBytes=0;  this.explicitHashKeys=new KeySet();  this.partitionKeys=new KeySet();  this.aggExplicitHashKey="";  this.aggPartitionKey="";  try {    this.md5=MessageDigest.getInstance(MESSAGE_DIGEST_NAME);  } catch (  NoSuchAlgorithmException e) {    throw new IllegalStateException("Could not create an MD5 message digest.",e);  }}  }
class C{  public EMail createEMail(Properties ctx,int AD_Client_ID,int AD_User_ID,String to,String subject,String message){  MClient client=MClient.get(ctx,AD_Client_ID);  MUser from=new MUser(ctx,AD_User_ID,null);  boolean html=false;  if (message != null && message.startsWith(EMail.HTML_MAIL_MARKER)) {    html=true;    message=message.substring(EMail.HTML_MAIL_MARKER.length());  }  return client.createEMail(from,to,subject,message,html);}  }
class C{  public AttributeKey<?> findAttribute(QName id){  if (!renamedAttributes.isEmpty()) {    AttributeKey<?> attKey=renamedAttributes.get(id);    if (attKey != null) {      return attKey;    }  }  if (!attributes.isEmpty()) {    AttributeKey<?> attKey=attributes.get(id);    if (attKey != null) {      return attKey;    }    if (id.matchesAnyNamespace()) {      for (      Map.Entry<QName,AttributeKey<?>> attrEntry : attributes.entrySet()) {        if (id.matches(attrEntry.getKey())) {          return attrEntry.getValue();        }      }    } else     if (!id.matchesAnyLocalName()) {      attKey=attributes.get(toWildcardLocalName(id));      if (attKey != null) {        return AttributeKey.of(id,attKey.getDatatype());      }    }  }  if (adaptations != null) {    AttributeKey<?> attKey=adaptations.findAttribute(id);    if (attKey != null) {      return attKey;    }  }  return null;}  }
class C{  public boolean test(Attribute att,boolean isClass){  if (doNotCheckCapabilities()) {    return true;  }  boolean result;  Capability cap;  Capability capBinary;  Capability capUnary;  Capability capEmpty;  String errorStr;  result=true;  if (!m_AttributeTest) {    return result;  }  if (isClass) {    errorStr="class";  } else {    errorStr="attributes";  }switch (att.type()) {case Attribute.NOMINAL:    if (isClass) {      cap=Capability.NOMINAL_CLASS;      capBinary=Capability.BINARY_CLASS;      capUnary=Capability.UNARY_CLASS;      capEmpty=Capability.EMPTY_NOMINAL_CLASS;    } else {      cap=Capability.NOMINAL_ATTRIBUTES;      capBinary=Capability.BINARY_ATTRIBUTES;      capUnary=Capability.UNARY_ATTRIBUTES;      capEmpty=Capability.EMPTY_NOMINAL_ATTRIBUTES;    }  if (handles(cap) && (att.numValues() > 2)) {    break;  } else   if (handles(capBinary) && (att.numValues() == 2)) {    break;  } else   if (handles(capUnary) && (att.numValues() == 1)) {    break;  } else   if (handles(capEmpty) && (att.numValues() == 0)) {    break;  }if (att.numValues() == 0) {  m_FailReason=new UnsupportedAttributeTypeException(createMessage("Cannot handle empty nominal " + errorStr + "!"));  result=false;}if (att.numValues() == 1) {m_FailReason=new UnsupportedAttributeTypeException(createMessage("Cannot handle unary " + errorStr + "!"));result=false;} else if (att.numValues() == 2) {m_FailReason=new UnsupportedAttributeTypeException(createMessage("Cannot handle binary " + errorStr + "!"));result=false;} else {m_FailReason=new UnsupportedAttributeTypeException(createMessage("Cannot handle multi-valued nominal " + errorStr + "!"));result=false;}break;case Attribute.NUMERIC:if (isClass) {cap=Capability.NUMERIC_CLASS;} else {cap=Capability.NUMERIC_ATTRIBUTES;}if (!handles(cap)) {m_FailReason=new UnsupportedAttributeTypeException(createMessage("Cannot handle numeric " + errorStr + "!"));result=false;}break;case Attribute.DATE:if (isClass) {cap=Capability.DATE_CLASS;} else {cap=Capability.DATE_ATTRIBUTES;}if (!handles(cap)) {m_FailReason=new UnsupportedAttributeTypeException(createMessage("Cannot handle date " + errorStr + "!"));result=false;}break;case Attribute.STRING:if (isClass) {cap=Capability.STRING_CLASS;} else {cap=Capability.STRING_ATTRIBUTES;}if (!handles(cap)) {m_FailReason=new UnsupportedAttributeTypeException(createMessage("Cannot handle string " + errorStr + "!"));result=false;}break;case Attribute.RELATIONAL:if (isClass) {cap=Capability.RELATIONAL_CLASS;} else {cap=Capability.RELATIONAL_ATTRIBUTES;}if (!handles(cap)) {m_FailReason=new UnsupportedAttributeTypeException(createMessage("Cannot handle relational " + errorStr + "!"));result=false;}break;default :m_FailReason=new UnsupportedAttributeTypeException(createMessage("Cannot handle unknown attribute type '" + att.type() + "'!"));result=false;}return result;}  }
class C{  private void cmd_window(MQuery query){  if (query == null)   return;  AEnv.zoom(query);}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  private void validateDictionaryMetadata(CarbonDictionaryColumnMetaChunk actual,CarbonDictionaryColumnMetaChunk expected){  assertTrue(expected.getMin_surrogate_key() == actual.getMin_surrogate_key());  assertTrue(expected.getMax_surrogate_key() == actual.getMax_surrogate_key());  assertTrue(expected.getStart_offset() == actual.getStart_offset());  assertTrue(expected.getEnd_offset() == actual.getEnd_offset());  assertTrue(expected.getChunk_count() == actual.getChunk_count());}  }
class C{  private void handleReplicationSynchronization(ReplicationSyncFileMessage msg) throws Exception {  Long id=Long.valueOf(msg.getId());  byte[] data=msg.getData();  SequentialFile channel1;switch (msg.getFileType()) {case LARGE_MESSAGE:{      ReplicatedLargeMessage largeMessage=lookupLargeMessage(id,false,false);      if (!(largeMessage instanceof LargeServerMessageInSync)) {        ActiveMQServerLogger.LOGGER.largeMessageIncompatible();        return;      }      LargeServerMessageInSync largeMessageInSync=(LargeServerMessageInSync)largeMessage;      channel1=largeMessageInSync.getSyncFile();      break;    }case PAGE:{    Page page=getPage(msg.getPageStore(),(int)msg.getId());    channel1=page.getFile();    break;  }case JOURNAL:{  JournalSyncFile journalSyncFile=filesReservedForSync.get(msg.getJournalContent()).get(id);  FileChannel channel2=journalSyncFile.getChannel();  if (data == null) {    channel2.close();    return;  }  channel2.write(ByteBuffer.wrap(data));  return;}default :throw ActiveMQMessageBundle.BUNDLE.replicationUnhandledFileType(msg.getFileType());}if (data == null) {return;}if (!channel1.isOpen()) {channel1.open();}channel1.writeDirect(ByteBuffer.wrap(data),true);}  }
class C{  public static void logSleep(final Logger logger){  logger.logMessage(Level.FINER,"Consumer is sleeping");}  }
class C{  public ConnectException(String detailMessage){  super(detailMessage);}  }
class C{  private Entry updateEntry(CacheDataPage cacheDataPage,int entryIdx,Entry newEntry,UpdateType upType) throws IOException {  DataPageMain dpMain=cacheDataPage._main;  DataPageExtra dpExtra=cacheDataPage._extra;  if (newEntry != null) {    validateEntryForPage(dpMain,newEntry);  }  CacheDataPage parentDataPage=(!dpMain.isRoot() ? new CacheDataPage(dpMain.getParentPage()) : null);  Entry oldLastEntry=dpExtra._entryView.getLast();  Entry oldEntry=null;  int entrySizeDiff=0;switch (upType) {case ADD:    dpExtra._entryView.add(entryIdx,newEntry);  entrySizeDiff+=newEntry.size();break;case REPLACE:oldEntry=dpExtra._entryView.set(entryIdx,newEntry);entrySizeDiff+=newEntry.size() - oldEntry.size();break;case REMOVE:{oldEntry=dpExtra._entryView.remove(entryIdx);entrySizeDiff-=oldEntry.size();break;}default :throw new RuntimeException(withErrorContext("unknown update type " + upType));}boolean updateLast=(oldLastEntry != dpExtra._entryView.getLast());if (!updateLast || !dpMain.hasChildTail()) {dpExtra._totalEntrySize+=entrySizeDiff;setModified(cacheDataPage);dpExtra._entryPrefix=EMPTY_PREFIX;}if (dpExtra._entryView.isEmpty()) {removeDataPage(parentDataPage,cacheDataPage,oldLastEntry);return oldEntry;}if (!updateLast || dpMain.isRoot()) {return oldEntry;}replaceParentEntry(parentDataPage,cacheDataPage,oldLastEntry);return oldEntry;}  }
class C{  private void sortAndCollapse(){  Collections.sort(mSpans);  mAddsSinceSort=0;  Iterator iter=mSpans.iterator();  Span span=null;  if (iter.hasNext()) {    span=(Span)iter.next();  }  while (iter.hasNext()) {    Span nextSpan=(Span)iter.next();    if (span.subsume(nextSpan)) {      iter.remove();    } else {      span=nextSpan;    }  }}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.GENERIC_DECLARATION__TYPE_VARS:    getTypeVars().clear();  getTypeVars().addAll((Collection<? extends TypeVariable>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static IJavaElement create(IFolder folder,IJavaProject project){  if (folder == null) {    return null;  }  IJavaElement element;  if (project == null) {    project=JavaCore.create(folder.getProject());    element=determineIfOnClasspath(folder,project);    if (element == null) {      IJavaProject[] projects;      try {        projects=org.eclipse.jdt.internal.core.JavaModelManager.getJavaModelManager().getJavaModel().getJavaProjects();      } catch (      JavaModelException e) {        return null;      }      for (int i=0, length=projects.length; i < length; i++) {        project=projects[i];        element=determineIfOnClasspath(folder,project);        if (element != null)         break;      }    }  } else {    element=determineIfOnClasspath(folder,project);  }  return element;}  }
class C{  @Override public boolean add(Double value){  return _set.add(unwrap(value));}  }
class C{  public void test_rotateLjava_util_ListI(){  try {    Collections.rotate(null,0);    fail("Expected NullPointerException for null list parameter");  } catch (  NullPointerException e) {  }  LinkedList list1=new LinkedList();  for (int i=0; i < 10; i++) {    list1.add(objArray[i]);  }  testRotate(list1,"Sequential Access");  ArrayList list2=new ArrayList();  for (int i=0; i < 10; i++) {    list2.add(objArray[i]);  }  testRotate(list2,"Random Access");}  }
class C{  public static File searchForGroovyScriptFile(String input){  String scriptFileName=input.trim();  File scriptFile=new File(scriptFileName);  String[] standardExtensions={".groovy",".gvy",".gy",".gsh"};  int i=0;  while (i < standardExtensions.length && !scriptFile.exists()) {    scriptFile=new File(scriptFileName + standardExtensions[i]);    i++;  }  if (!scriptFile.exists()) {    scriptFile=new File(scriptFileName);  }  return scriptFile;}  }
class C{  public SQLNonTransientConnectionException(Throwable cause){  super(cause);}  }
class C{  public static int width(int ucs){  if (ucs == 0 || ucs == 0x034F || (0x200B <= ucs && ucs <= 0x200F) || ucs == 0x2028 || ucs == 0x2029 || (0x202A <= ucs && ucs <= 0x202E) || (0x2060 <= ucs && ucs <= 0x2063)) {    return 0;  }  if (ucs < 32 || (0x07F <= ucs && ucs < 0x0A0))   return 0;  if (intable(ZERO_WIDTH,ucs))   return 0;  return intable(WIDE_EASTASIAN,ucs) ? 2 : 1;}  }
class C{  public Packet(Header header){  this.header=header;  data=IoBuffer.allocate(header.getSize(),false);  data.setAutoExpand(true);}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public DefAttrListener(Element imp){  importElement=imp;}  }
class C{  public int levels(URL url){  String path=getPathWithoutSuffix(url).replaceAll("/+$","");  int levels=0;  for (int i=0; i < path.length(); i++) {    if (path.charAt(i) == '/') {      levels++;    }  }  return levels;}  }
class C{  public static void startEventStreamService(Context context){  if (EventStreamService.getInstance() == null) {    ArrayList<String> matrixIds=new ArrayList<>();    Collection<MXSession> sessions=Matrix.getInstance(context.getApplicationContext()).getSessions();    if ((null != sessions) && (sessions.size() > 0)) {      Log.d(LOG_TAG,"restart EventStreamService");      for (      MXSession session : sessions) {        boolean isSessionReady=session.getDataHandler().getStore().isReady();        if (!isSessionReady) {          session.getDataHandler().getStore().open();        }        matrixIds.add(session.getCredentials().userId);      }      Intent intent=new Intent(context,EventStreamService.class);      intent.putExtra(EventStreamService.EXTRA_MATRIX_IDS,matrixIds.toArray(new String[matrixIds.size()]));      intent.putExtra(EventStreamService.EXTRA_STREAM_ACTION,EventStreamService.StreamAction.START.ordinal());      context.startService(intent);    }  }}  }
class C{  private static void seedUserDefined(Collection<Source> sources,Context ascContext,ContextStatics perCompileData){  for (  Source s : sources) {    CompilationUnit u=s.getCompilationUnit();    if ((u != null) && u.hasTypeInfo) {      ObjectValue frame=u.typeInfo;      for (      QName topLevelDefinition : u.topLevelDefinitions) {        String name=topLevelDefinition.getLocalPart().intern();        ObjectValue namespace=ascContext.getNamespace(topLevelDefinition.getNamespace().intern());        if (frame.hasName(ascContext,Tokens.GET_TOKEN,name,namespace)) {          int slotId=frame.getSlotIndex(ascContext,Tokens.GET_TOKEN,name,namespace);          Slot slot=frame.getSlot(ascContext,slotId);          if (slot != null) {            int implicitId=frame.getImplicitIndex(ascContext,slotId,Tokens.EMPTY_TOKEN);            if ((slotId != implicitId) && (slot instanceof VariableSlot)) {              Slot implicitSlot=frame.getSlot(ascContext,implicitId);              TypeValue typeValue=implicitSlot.getType().getTypeValue();              assert topLevelDefinition.toString().equals(typeValue.name.toString()) : "topLevelDefinition = " + topLevelDefinition + ", typeValue = "+ typeValue.name.toString();              perCompileData.userDefined.put(typeValue.name.toString(),typeValue);            }          }        }      }    }  }}  }
class C{  public int run(String[] args) throws Exception {  Options options=new Options();  Option helpOpts=OptionBuilder.withArgName("help").withDescription("show this help message").create("help");  Option webGraphDbOpts=OptionBuilder.withArgName("webgraphdb").hasArg().withDescription("the web graph database to use").create("webgraphdb");  options.addOption(helpOpts);  options.addOption(webGraphDbOpts);  CommandLineParser parser=new GnuParser();  try {    CommandLine line=parser.parse(options,args);    if (line.hasOption("help") || !line.hasOption("webgraphdb")) {      HelpFormatter formatter=new HelpFormatter();      formatter.printHelp("Loops",options);      return -1;    }    String webGraphDb=line.getOptionValue("webgraphdb");    findLoops(new Path(webGraphDb));    return 0;  } catch (  Exception e) {    LOG.error("Loops: " + StringUtils.stringifyException(e));    return -2;  }}  }
class C{  public static BigdataGraph create(final String file) throws Exception {  final BigdataSail sail=(BigdataSail)BigdataSailFactory.openSail(file,true);  sail.initialize();  return new BigdataGraphEmbedded(sail);}  }
class C{  private List<Volume> prepareClonesForEachRecommendation(String name,String cloneSetName,BlockObject blockObject,VirtualPoolCapabilityValuesWrapper capabilities,Boolean createInactive,List<VolumeRecommendation> placementRecommendations){  List<Volume> volumesList=new ArrayList<Volume>();  List<Volume> toUpdate=new ArrayList<Volume>();  boolean inApplication=false;  if (blockObject instanceof Volume && ((Volume)blockObject).getApplication(_dbClient) != null) {    inApplication=true;  }  int volumeCounter=(capabilities.getResourceCount() > 1) ? 1 : 0;  for (  VolumeRecommendation recommendation : placementRecommendations) {    Volume volume=StorageScheduler.prepareFullCopyVolume(_dbClient,name,blockObject,recommendation,volumeCounter,capabilities,createInactive);    if (inApplication) {      volume.setFullCopySetName(cloneSetName);      toUpdate.add(volume);    }    volumesList.add(volume);    recommendation.setId(volume.getId());    volumeCounter++;  }  if (!toUpdate.isEmpty()) {    _dbClient.updateObject(toUpdate);  }  return volumesList;}  }
class C{  public static boolean[] resize(boolean buffer[],int newSize){  boolean temp[]=new boolean[newSize];  System.arraycopy(buffer,0,temp,0,buffer.length >= newSize ? newSize : buffer.length);  return temp;}  }
class C{  public void drawLegendShape(Canvas canvas,SimpleSeriesRenderer renderer,float x,float y,int seriesIndex,Paint paint){  canvas.drawLine(x,y,x + SHAPE_WIDTH,y,paint);  if (isRenderPoints(renderer)) {    pointsChart.drawLegendShape(canvas,renderer,x + 5,y,seriesIndex,paint);  }}  }
class C{  public img removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public void increment(Response response){  all.incrementAndGet();  if (response.isEndSession()) {    disconnect.incrementAndGet();  }}  }
class C{  public double[] distribution(){  return m_Distribution;}  }
class C{  public T caseStringLiteral(StringLiteral object){  return null;}  }
class C{  public static Long toLong(char c){  return Long.valueOf(toLongValue(c));}  }
class C{  public synchronized void notifyZoomResetListeners(){  for (  ZoomListener listener : mZoomListeners) {    listener.zoomReset();  }}  }
class C{  public BurstTakerImpl(CameraCommandExecutor cameraCommandExecutor,FrameServer frameServer,RequestBuilder.Factory builder,ManagedImageReader imageFactory,Surface burstInputSurface,Runnable restorePreviewCommand,int maxImageCount){  mCameraCommandExecutor=cameraCommandExecutor;  mFrameServer=frameServer;  mRequestBuilder=builder;  mImageFactory=imageFactory;  mBurstInputSurface=burstInputSurface;  mRestorePreviewCommand=restorePreviewCommand;  mMaxImageCount=maxImageCount;}  }
class C{  public static int maximum(int a,int b,int c){  if (b > a) {    a=b;  }  if (c > a) {    a=c;  }  return a;}  }
class C{  public char num2char(double value,double[] cuts){  int count=0;  while ((count < cuts.length) && (cuts[count] <= value)) {    count++;  }  return ALPHABET[count];}  }
class C{  public void append(StringBuffer buffer,String fieldName,long value){  appendFieldStart(buffer,fieldName);  appendDetail(buffer,fieldName,value);  appendFieldEnd(buffer,fieldName);}  }
class C{  protected void sendFunctionGroup1(){  writeData();}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset){  super.addToken(array,start,end,tokenType,startOffset);  zzStartRead=zzMarkedPos;}  }
class C{  public T caseTrigger(Trigger object){  return null;}  }
class C{  public ReadMEIRequest(){  super();  setFunctionCode(Modbus.READ_MEI);  subCode=0x0E;  setDataLength(3);}  }
class C{  public LinkedIdentityHashMap(){  super();  accessOrder=false;}  }
class C{  private void initContext(){  if (Context.getCurrentContext() == null) {    Context.enter();  }}  }
class C{  public List<String> listFiles(String parentFolderId) throws IOException {  return listFiles(parentFolderId,null);}  }
class C{  protected void sendTestMessage(SerialMessage m,SerialListener l){  if (log.isDebugEnabled()) {    log.debug("sendTestMessage    [" + m + "]");  }  notifyMessage(m,l);  return;}  }
class C{  public static void logOrderState(com.ib.client.OrderState orderState){  _log.debug("Status: " + orderState.m_status + " Comms Amt: "+ orderState.m_commission+ " Comms Currency: "+ orderState.m_commissionCurrency+ " Warning txt: "+ orderState.m_warningText+ " Init Margin: "+ orderState.m_initMargin+ " Maint Margin: "+ orderState.m_maintMargin+ " Min Comms: "+ orderState.m_minCommission+ " Max Comms: "+ orderState.m_maxCommission);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case ImPackage.SNIPPET__CODE:    setCode(CODE_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public boolean checkCrc() throws IOException {  if (computedCrc == -1)   computeCrc();  return computedCrc == crc;}  }
class C{  public void attachWebView(WebView webView){  this.webView=webView;}  }
class C{  public DefaultRetryPolicy(){  this(DEFAULT_TIMEOUT_MS,DEFAULT_MAX_RETRIES,DEFAULT_BACKOFF_MULT);}  }
class C{  public Object match(String s){  return matchAfter(s,BIG);}  }
class C{  public NotificationChain basicSetHistoryVector(StateVector newHistoryVector,NotificationChain msgs){  StateVector oldHistoryVector=historyVector;  historyVector=newHistoryVector;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,SexecPackage.EXECUTION_FLOW__HISTORY_VECTOR,oldHistoryVector,newHistoryVector);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public WebSessionEntity marshalAttributes() throws IOException {  final WebSessionEntity marshaled=new WebSessionEntity(getId(),entity.createTime(),accessTime,maxInactiveInterval);  for (  final Map.Entry<String,Object> entry : attributes().entrySet())   marshaled.putAttribute(entry.getKey(),marshal(entry.getValue()));  return marshaled;}  }
class C{  private byte[] createFileHash(File file){  MessageDigest md=null;  try (InputStream is=Files.newInputStream(Paths.get(file.getAbsolutePath()))){    md=MessageDigest.getInstance("SHA-256");    DigestInputStream dis=new DigestInputStream(is,md);    while (dis.available() > 0) {      dis.read();    }  } catch (  NoSuchAlgorithmException e) {    fail();  }catch (  IOException e1) {    fail();  }  byte[] digest=md.digest();  return digest;}  }
class C{  public SelectSameAction(DrawingEditor editor){  super(editor);  ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.draw.Labels");  labels.configureAction(this,ID);  updateEnabledState();}  }
class C{  public TransactionEmulationDataSourceOnStandaloneConfigurationTest(String testName,EnvironmentTestData testData) throws Exception {  super(testName,testData);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static <T>Supplier<T> memoizeWithLongExpiration(Supplier<T> original){  return memoizeForDuration(original,ENVIRONMENT.config().getSingletonCachePersistDuration());}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.MORE_CODE___ANONYMOUS_MORE_CODE_11:    return anonymous_moreCode_1_1 != null && !anonymous_moreCode_1_1.isEmpty();case UmplePackage.MORE_CODE___CODE_1:  return CODE_1_EDEFAULT == null ? code_1 != null : !CODE_1_EDEFAULT.equals(code_1);}return super.eIsSet(featureID);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.AWAIT_EXPRESSION__EXPRESSION:    return basicSetExpression(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static String millisToString(long millis){  return (ComponentTime.dateToString(new Date(millis)));}  }
class C{  public void removeRelationship(Relationship relationship){  if (relationship.getId() == null) {    return;  }  Relationship managed=this.entityManager.find(relationship.getClass(),relationship.getId());  if (managed != null) {    this.entityManager.remove(managed);  }}  }
class C{  public Mod(){  super("mod",2);}  }
class C{  public static int objectStartOffset(RVMClass t){  return JavaHeader.objectStartOffset(t);}  }
class C{  private PolynomialApproximation approximateKnnDistances(double[] knnDistances){  StringBuilder msg=new StringBuilder();  int k_0=0;  if (settings.log) {    for (int i=0; i < settings.kmax; i++) {      double dist=knnDistances[i];      if (dist == 0) {        k_0++;      } else {        break;      }    }  }  double[] x=new double[settings.kmax - k_0];  double[] y=new double[settings.kmax - k_0];  for (int k=0; k < settings.kmax - k_0; k++) {    if (settings.log) {      x[k]=Math.log(k + k_0);      y[k]=Math.log(knnDistances[k + k_0]);    } else {      x[k]=k + k_0;      y[k]=knnDistances[k + k_0];    }  }  PolynomialRegression regression=new PolynomialRegression(y,x,settings.p);  PolynomialApproximation approximation=new PolynomialApproximation(regression.getEstimatedCoefficients());  if (LOG.isDebugging()) {    msg.append("approximation ").append(approximation);    LOG.debugFine(msg.toString());  }  return approximation;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static void main(String[] args) throws Throwable {  NotSignedByAliasTest test=new NotSignedByAliasTest();  test.start();}  }
class C{  protected String buildRegex2(Map<String,List<String>> tags){  SortedMap<Integer,List<Integer>> tagHash=new TreeMap<Integer,List<Integer>>();  for (  Map.Entry<String,List<String>> entry : tags.entrySet()) {    String tagName=entry.getKey();    List<String> stringValues=entry.getValue();    List<Integer> hashValues=new ArrayList<Integer>(1);    for (    String value : stringValues) {      hashValues.add(value.hashCode());    }    tagHash.put(tagName.hashCode(),hashValues);  }  StringBuilder sb=new StringBuilder();  sb.append("(?s)");  sb.append("^(?:.{12})");  sb.append("(?:.{").append(8).append("})*");  for (  Map.Entry<Integer,List<Integer>> entry : tagHash.entrySet()) {    try {      sb.append("\\Q");      sb.append(new String(ByteUtil.intToBytes(entry.getKey()),"ISO-8859-1")).append("\\E");      List<Integer> hashValues=entry.getValue();      sb.append("(?:");      boolean first=true;      for (      Integer value : hashValues) {        if (!first) {          sb.append('|');        }        sb.append("\\Q");        sb.append(new String(ByteUtil.intToBytes(value),"ISO-8859-1"));        sb.append("\\E");        first=false;      }      sb.append(")");      sb.append("(?:.{").append(8).append("})*");    } catch (    Exception ex) {      LOG.error("Constructing regex error",ex);    }  }  sb.append("$");  if (LOG.isDebugEnabled()) {    LOG.debug("Pattern is " + sb.toString());  }  return sb.toString();}  }
class C{  private void drawHorizontalAxis(Graphics2D g2d){  int h=this.getSize().height;  int w=this.getSize().width - this.paddingRight;  Font font=g2d.getFont();  FontMetrics fm=getFontMetrics(this.font);  g2d.setFont(this.font);  Stroke stroke=g2d.getStroke();  Stroke dashed=new BasicStroke(1,BasicStroke.CAP_BUTT,BasicStroke.JOIN_MITER,1,new float[]{1.0f},0.0f);  int yi=(h - this.paddingBottom - this.paddingTop) / this.verticalTicks;  int y=h - this.paddingBottom - 1;  for (int i=0; i <= this.verticalTicks; i++) {    double value=this.maxY / this.verticalTicks * i;    g2d.setColor(this.axisColor);    g2d.setStroke(stroke);    g2d.drawLine(this.paddingLeft - 3,y,this.paddingLeft,y);    String text=MessageFormat.format(this.format,value);    int fw=fm.stringWidth(text);    int fh=fm.getAscent() / 2 - 1;    g2d.drawString(text,this.paddingLeft - fw - 5,y + fh);    if (i != 0) {      g2d.setColor(this.guideColor);      g2d.setStroke(dashed);      g2d.drawLine(this.paddingLeft,y,w,y);    }    y-=yi;  }  g2d.setFont(font);  g2d.setStroke(stroke);}  }
class C{  public static PrivateKeyInfo createPrivateKeyInfo(AsymmetricKeyParameter privateKey) throws IOException {  if (privateKey instanceof RSAKeyParameters) {    RSAPrivateCrtKeyParameters priv=(RSAPrivateCrtKeyParameters)privateKey;    return new PrivateKeyInfo(new AlgorithmIdentifier(PKCSObjectIdentifiers.rsaEncryption,DERNull.INSTANCE),new RSAPrivateKey(priv.getModulus(),priv.getPublicExponent(),priv.getExponent(),priv.getP(),priv.getQ(),priv.getDP(),priv.getDQ(),priv.getQInv()));  } else   if (privateKey instanceof DSAPrivateKeyParameters) {    DSAPrivateKeyParameters priv=(DSAPrivateKeyParameters)privateKey;    DSAParameters params=priv.getParameters();    return new PrivateKeyInfo(new AlgorithmIdentifier(X9ObjectIdentifiers.id_dsa,new DSAParameter(params.getP(),params.getQ(),params.getG())),new ASN1Integer(priv.getX()));  } else   if (privateKey instanceof ECPrivateKeyParameters) {    ECPrivateKeyParameters priv=(ECPrivateKeyParameters)privateKey;    ECDomainParameters domainParams=priv.getParameters();    ASN1Encodable params;    int orderBitLength;    if (domainParams == null) {      params=new X962Parameters(DERNull.INSTANCE);      orderBitLength=priv.getD().bitLength();    } else     if (domainParams instanceof ECNamedDomainParameters) {      params=new X962Parameters(((ECNamedDomainParameters)domainParams).getName());      orderBitLength=domainParams.getCurve().getOrder().bitLength();    } else {      X9ECParameters ecP=new X9ECParameters(domainParams.getCurve(),domainParams.getG(),domainParams.getN(),domainParams.getH(),domainParams.getSeed());      params=new X962Parameters(ecP);      orderBitLength=domainParams.getCurve().getOrder().bitLength();    }    return new PrivateKeyInfo(new AlgorithmIdentifier(X9ObjectIdentifiers.id_ecPublicKey,params),new ECPrivateKey(orderBitLength,priv.getD(),params));  } else {    throw new IOException("key parameters not recognised.");  }}  }
class C{  public static boolean clipLine(Line2D line,Rectangle2D rect){  double x1=line.getX1();  double y1=line.getY1();  double x2=line.getX2();  double y2=line.getY2();  double minX=rect.getMinX();  double maxX=rect.getMaxX();  double minY=rect.getMinY();  double maxY=rect.getMaxY();  int f1=rect.outcode(x1,y1);  int f2=rect.outcode(x2,y2);  while ((f1 | f2) != 0) {    if ((f1 & f2) != 0) {      return false;    }    double dx=(x2 - x1);    double dy=(y2 - y1);    if (f1 != 0) {      if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT && dx != 0.0) {        y1=y1 + (minX - x1) * dy / dx;        x1=minX;      } else       if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT && dx != 0.0) {        y1=y1 + (maxX - x1) * dy / dx;        x1=maxX;      } else       if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM && dy != 0.0) {        x1=x1 + (maxY - y1) * dx / dy;        y1=maxY;      } else       if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP && dy != 0.0) {        x1=x1 + (minY - y1) * dx / dy;        y1=minY;      }      f1=rect.outcode(x1,y1);    } else     if (f2 != 0) {      if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT && dx != 0.0) {        y2=y2 + (minX - x2) * dy / dx;        x2=minX;      } else       if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT && dx != 0.0) {        y2=y2 + (maxX - x2) * dy / dx;        x2=maxX;      } else       if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM && dy != 0.0) {        x2=x2 + (maxY - y2) * dx / dy;        y2=maxY;      } else       if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP && dy != 0.0) {        x2=x2 + (minY - y2) * dx / dy;        y2=minY;      }      f2=rect.outcode(x2,y2);    }  }  line.setLine(x1,y1,x2,y2);  return true;}  }
class C{  public LocalXSessionFactoryBuilder addAnnotatedClasses(Class<?>... annotatedClasses){  for (  Class<?> annotatedClass : annotatedClasses) {    addAnnotatedClass(annotatedClass);  }  return this;}  }
class C{  public boolean isXPathResolvePropertiesAbsolute(){  return isXPathResolvePropertiesAbsolute;}  }
class C{  @Override public boolean equals(Object object){  if (this == object) {    return true;  }  if (!(object instanceof DateFormatSymbols)) {    return false;  }  DateFormatSymbols rhs=(DateFormatSymbols)object;  return localPatternChars.equals(rhs.localPatternChars) && Arrays.equals(ampms,rhs.ampms) && Arrays.equals(eras,rhs.eras)&& Arrays.equals(months,rhs.months)&& Arrays.equals(shortMonths,rhs.shortMonths)&& Arrays.equals(shortWeekdays,rhs.shortWeekdays)&& Arrays.equals(weekdays,rhs.weekdays)&& timeZoneStringsEqual(this,rhs);}  }
class C{  public EquirippleHighpass(int N,double OmegaS,double Ws,double OmegaP,double Wp){  super(2,N);  if (OmegaS >= OmegaP)   throw new IllegalArgumentException("OmegaS >= OmegaP ");  if (OmegaS <= 0.0 || OmegaS >= 1.0)   throw new IllegalArgumentException("OmegaS: " + OmegaS + " out of bounds (0.0 < OmegaS < 1.0)");  if (OmegaP <= 0.0 || OmegaP >= 1.0)   throw new IllegalArgumentException("OmegaP: " + OmegaP + " out of bounds (0.0 < OmegaP < 1.0)");  bands[0][0]=0.0;  bands[0][1]=OmegaS;  bands[1][0]=OmegaP;  bands[1][1]=1.0;  this.Ws=Ws;  this.Wp=Wp;  generateCoefficients();}  }
class C{  public static ByteString digestBytes(byte[] bytes) throws NoSuchAlgorithmException {  MessageDigest md=MessageDigest.getInstance(HASH_ALGORITHM);  return ByteString.of(md.digest(bytes));}  }
class C{  public TIntByteHashMap(int[] keys,byte[] values){  super(Math.max(keys.length,values.length));  int size=Math.min(keys.length,values.length);  for (int i=0; i < size; i++) {    this.put(keys[i],values[i]);  }}  }
class C{  public boolean needViewAttributeUpdates(){  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 14:38:21.735 -0400",hash_original_method="25FB9095A58ECF23DA22A6408C7A6931",hash_generated_method="FAEAED8AB6D7F191F63A387BA265B7D4") public int putAudio(byte[] buf,int offset,int length,boolean isLast){  return SR_RecognizerPutAudio(mRecognizer,buf,offset,length,isLast);}  }
class C{  public String bootstrapServers(){  return broker.brokerList();}  }
class C{  public void println(Object x){  m_Owner.append(x + m_LineFeed);}  }
class C{  public Years plus(Years years){  if (years == null) {    return this;  }  return plus(years.getValue());}  }
class C{  public XZOutputStream(OutputStream out,FilterOptions[] filterOptions,int checkType) throws IOException {  this.out=out;  updateFilters(filterOptions);  streamFlags.checkType=checkType;  check=Check.getInstance(checkType);  encodeStreamHeader();}  }
class C{  private void checkOrganizationName(Element entityEle,String id) throws IDMException {  NodeList nodes=entityEle.getElementsByTagNameNS(SAMLNames.NS_NAME_SAML_METADATA,SAMLNames.ORGANIZATION);  if (nodes.getLength() > 0) {    Element orgEle=(Element)nodes.item(0);    String orgName=orgEle.getElementsByTagNameNS(SAMLNames.NS_NAME_SAML_METADATA,"OrganizationName").item(0).getTextContent();    if (!orgName.equals(id)) {      throw new IDMException("Oranganization name is inconsistant with tenant name");    }  }}  }
class C{  public CharacterConverter(){  super();}  }
class C{  protected String createPadding(int len){  StringBuffer sb=new StringBuffer(len);  for (int i=0; i < len; ++i) {    sb.append(' ');  }  return sb.toString();}  }
class C{  private int fillBuffer() throws IOException {  int n=super.read(buffer,0,BUF_SIZE);  if (n >= 0) {    real_pos+=n;    buf_end=n;    buf_pos=0;  }  return n;}  }
class C{  @Override public void onAction(final ActionType at){  if (isReleased()) {    return;  }  if (at == null) {    super.onAction(null);    return;  }switch (at) {case ADD_BUDDY:case IGNORE:case INVITE:case UNIGNORE:case TRADE:    at.send(at.fillTargetInfo(entity));  break;default :super.onAction(at);break;}}  }
class C{  public static <K,V>Map<K,V> singletonMap(K key,V value){  return new SingletonMap<K,V>(key,value);}  }
class C{  public static PeriodType millis(){  PeriodType type=cMillis;  if (type == null) {    type=new PeriodType("Millis",new DurationFieldType[]{DurationFieldType.millis()},new int[]{-1,-1,-1,-1,-1,-1,-1,0});    cMillis=type;  }  return type;}  }
class C{  public Seconds multipliedBy(int scalar){  return Seconds.seconds(FieldUtils.safeMultiply(getValue(),scalar));}  }
class C{  public boolean isPowerOnAttempted(){  return powerOnAttempted;}  }
class C{  public static void pointerDrag(float x,float y,int[] path){  if (verbose) {    log("pointerDrag(" + x + ", "+ y+ ", "+ toString(path)+ ")");  }  Component c=getComponentByPath(path);  int actualX=c.getAbsoluteX() + (int)(x * c.getWidth());  int actualY=c.getAbsoluteY() + (int)(y * c.getHeight());  Display.getInstance().getCurrent().pointerDragged(actualX,actualY);}  }
class C{  private DebuggerSupport(){}  }
class C{  private static void bidirectionalOverlap(ByteKeyRange left,ByteKeyRange right){  bidirectionalOverlapHelper(left,right,true);}  }
class C{  static public Bitmap resizeBitmap(Bitmap bmSrc,Rect rectDest,ScaleMode scaleMode,boolean fitBitmapResult,boolean scaleConditionally,boolean recycleBmpSource){  Matrix mat=new Matrix();  Bitmap bmResult;  int wOrig=bmSrc.getWidth();  int hOrig=bmSrc.getHeight();  int wScaleTo=rectDest.width();  int hScaleTo=rectDest.height();  if (wScaleTo == 0 && hScaleTo == 0)   throw new Error("resizeBitmap: need at least $scaleTo.width or $scaleTo.height");  float arW=(wScaleTo != 0) ? (float)wScaleTo / (float)wOrig : Float.NaN;  float arH=(hScaleTo != 0) ? (float)hScaleTo / (float)hOrig : Float.NaN;  arW=Float.isNaN(arW) ? arH : arW;  arH=Float.isNaN(arH) ? arW : arH;  float arMin=Math.min(arW,arH);  float arMax=Math.max(arW,arH);  wScaleTo=(wScaleTo != 0) ? wScaleTo : (int)(((float)wOrig) * arW);  hScaleTo=(hScaleTo != 0) ? hScaleTo : (int)(((float)hOrig) * arH);  if (scaleConditionally) {    boolean isScaleConditionally=(wScaleTo >= bmSrc.getWidth()) && (hScaleTo >= bmSrc.getHeight());    if (isScaleConditionally)     return Bitmap.createBitmap(bmSrc);  }  bmResult=Bitmap.createBitmap(wScaleTo,hScaleTo,Config.ARGB_8888);  Canvas canvas=new Canvas(bmResult);switch (scaleMode) {case STRETCH:{      mat.reset();      mat.postScale(arW,arH);      canvas.drawBitmap(bmSrc,mat,null);      break;    }case LETTERBOX:{    if (fitBitmapResult) {      if (bmResult != null)       bmResult.recycle();      wScaleTo=(int)((float)wOrig * arMin);      hScaleTo=(int)((float)hOrig * arMin);      bmResult=Bitmap.createBitmap(wScaleTo,hScaleTo,Config.ARGB_8888);      canvas.setBitmap(bmResult);    }    mat.reset();    mat.postScale(arMin,arMin);    canvas.drawBitmap(bmSrc,mat,null);    break;  }case ZOOM:{  mat.reset();  mat.postScale(arMax,arMax);  canvas.drawBitmap(bmSrc,mat,null);  break;}case NONE:{mat.reset();canvas.drawBitmap(bmSrc,mat,null);break;}}if (recycleBmpSource) bmSrc.recycle();return bmResult;}  }
class C{  public String name(){  return this.name;}  }
class C{  public ListIterator<E> listIterator(int index){  return new ListItr(index);}  }
class C{  public void commit() throws Exception {  if (!txContext.isInTransaction()) {    throw new javax.jms.IllegalStateException("Commit called on Session that does not have an active transaction");  }  txContext.commit();}  }
class C{  public static Font rebuildFont(String fontString){  if (fontString.length() == 0)   return DEFAULT_FONT;  int fontStyle=Font.PLAIN;  int fontSize=12;  int start=fontString.indexOf("-",1) + 1;  int end=fontString.indexOf("-",start + 1);  String name=fontString.substring(start,end);  if (fontString.indexOf("-bold-") >= 0)   fontStyle=Font.BOLD;  if (fontString.indexOf("-i-") >= 0)   fontStyle+=Font.ITALIC;  start=fontString.indexOf("--") + 2;  end=fontString.indexOf("-",start + 1);  String tmpFontSize=fontString.substring(start,end);  if (tmpFontSize.indexOf("*") < 0)   fontSize=Integer.parseInt(tmpFontSize);  return new Font(name,fontStyle,fontSize);}  }
class C{  public void testAlgorithmParameterGenerator07() throws NoSuchAlgorithmException {  if (!DSASupported) {    fail(validAlgName + " algorithm is not supported");    return;  }  Provider provider=null;  for (int i=0; i < algs.length; i++) {    try {      AlgorithmParameterGenerator.getInstance(algs[i],provider);      fail("IllegalArgumentException must be thrown when provider is null");    } catch (    IllegalArgumentException e) {    }  }}  }
class C{  public TomcatTLSTest(String testName,EnvironmentTestData testData) throws Exception {  super(testName,testData);}  }
class C{  public void ifICmp(final int mode,final Label label){  ifCmp(Type.INT_TYPE,mode,label);}  }
class C{  public static final int roundTo(int val,int prec){  return floor((float)val / prec + 0.5f) * prec;}  }
class C{  protected void appendDetail(StringBuffer buffer,String fieldName,boolean[] array){  buffer.append(arrayStart);  for (int i=0; i < array.length; i++) {    if (i > 0) {      buffer.append(arraySeparator);    }    appendDetail(buffer,fieldName,array[i]);  }  buffer.append(arrayEnd);}  }
class C{  public void alarm(long time){}  }
class C{  public BarChart(XYMultipleSeriesDataset dataset,XYMultipleSeriesRenderer renderer,Type type){  super(dataset,renderer);  mType=type;}  }
class C{  public static String execute(String[] commandArray,String[] searchFor){  return execute(commandArray,searchFor,true);}  }
class C{  private void initArchiveStoreDetails(Properties ctx,String trxName){  final MClient client=new MClient(ctx,this.getAD_Client_ID(),trxName);  isStoreArchiveOnFileSystem=client.isStoreArchiveOnFileSystem();  if (isStoreArchiveOnFileSystem) {    if (File.separatorChar == '\\') {      m_archivePathRoot=client.getWindowsArchivePath();    } else {      m_archivePathRoot=client.getUnixArchivePath();    }    if ("".equals(m_archivePathRoot)) {      log.severe("no archivePath defined");    } else     if (!m_archivePathRoot.endsWith(File.separator)) {      log.warning("archive path doesn't end with " + File.separator);      m_archivePathRoot=m_archivePathRoot + File.separator;      log.fine(m_archivePathRoot);    }  }}  }
class C{  @Override public Instances transformedData(Instances data) throws Exception {  if (m_eigenvalues == null) {    throw new Exception("Principal components hasn't been built yet");  }  Instances output=null;  if (m_transBackToOriginal) {    output=new Instances(m_originalSpaceFormat);  } else {    output=new Instances(m_transformedFormat);  }  for (int i=0; i < data.numInstances(); i++) {    Instance converted=convertInstance(data.instance(i));    output.add(converted);  }  return output;}  }
class C{  private void addFormRange(String fieldName,int start,int end){  FormRange range=new FormRange(fieldName,start,end,getForeground());  formRanges.add(range);  Collections.sort(formRanges);  StyleConstants.setUnderline(attrs,true);  getStyledDocument().setCharacterAttributes(start,end - start,attrs,true);  color(start,end,getForeground());}  }
class C{  private void addInitiatorToNetwork(Initiator initiator,Volume vol){  URI varrayid=vol.getVirtualArray();  String initiatorPort=initiator.getInitiatorPort();  List<String> initiatorPorts=new ArrayList<String>();  initiatorPorts.add(initiatorPort);  List<URI> networkIds=_dbClient.queryByType(Network.class,true);  if (null != networkIds && !networkIds.isEmpty()) {    int validNetworkCount=0;    for (    URI ntid : networkIds) {      if (!NetworkAssociationHelper.getNetworkConnectedStoragePorts(ntid.toString(),_dbClient).isEmpty()) {        validNetworkCount++;        StringSet varrSet=NetworkAssociationHelper.getNetworkConnectedVirtualArrays(ntid,null,null,_dbClient);        if (varrSet.contains(varrayid.toString())) {          Network network=(Network)_dbClient.queryObject(ntid);          network.addEndpoints(initiatorPorts,false);          _dbClient.updateObject(network);        }      }    }    if (validNetworkCount < 1) {      throw APIException.internalServerErrors.genericApisvcError("Export failed",new Exception("No network is available having storage ports"));    }  } else {    throw APIException.internalServerErrors.genericApisvcError("Export failed",new Exception("No network is available"));  }}  }
class C{  public Set<String> keyNames(){  return properties.keySet();}  }
class C{  static boolean isWhiteSpace(char ch[],int start,int length){  int end=start + length;  for (int s=start; s < end; s++) {    if (!isWhiteSpace(ch[s]))     return false;  }  return true;}  }
class C{  public WaveWriter(AudioFormat format,Path file,long maxSize) throws IOException {  assert (format != null);  assert (file != null);  mAudioFormat=format;  mFile=file;  if (0 < maxSize && maxSize <= MAX_WAVE_SIZE) {    mMaxSize=maxSize;  } else {    mMaxSize=MAX_WAVE_SIZE;  }  open();}  }
class C{  public boolean hasDraft(){  return super.hasElement(Draft.KEY);}  }
class C{  public double cleanPrice(){  return dirtyPrice() - accruedAmount(settlementDate());}  }
class C{  public static Job loadJob(final Bigquery bigquery,final String cloudStoragePath,final TableReference table,final TableSchema schema) throws IOException {  JobConfigurationLoad load=new JobConfigurationLoad().setDestinationTable(table).setSchema(schema).setSourceUris(Collections.singletonList(cloudStoragePath));  return bigquery.jobs().insert(table.getProjectId(),new Job().setConfiguration(new JobConfiguration().setLoad(load))).execute();}  }
class C{  public Tile tile(){  return tile;}  }
class C{  static void testNTLM() throws Exception {  String reply=authReplyFor("NTLM");  System.out.println("====================================");  System.out.println("Expect client to fail with 401 Unauthorized");  System.out.println(reply);  try (ServerSocket ss=new ServerSocket(0)){    Client client=new Client(ss.getLocalPort());    Thread thr=new Thread(client);    thr.start();    try (Socket s=ss.accept()){      new MessageHeader().parseHeader(s.getInputStream());      s.getOutputStream().write(reply.getBytes("US-ASCII"));    }     System.out.println("Waiting for client to terminate");    thr.join();    IOException ioe=client.ioException();    if (ioe != null)     System.out.println("Client failed: " + ioe);    int respCode=client.respCode();    if (respCode != 0 && respCode != -1)     System.out.println("Client received HTTP response code: " + respCode);    if (respCode != HttpURLConnection.HTTP_UNAUTHORIZED)     throw new RuntimeException("Unexpected response code");  } }  }
class C{  public void replaceBytes(int offset,int len,byte[] bytes){  byte[] removed=null;  if (len > 0) {    removed=new byte[len];    doc.remove(offset,len,removed);  }  byte[] added=null;  if (bytes != null && bytes.length > 0) {    doc.insertBytes(offset,bytes);    added=(byte[])bytes.clone();  }  if (removed != null || added != null) {    undoManager.addEdit(new BytesReplacedUndoableEdit(offset,removed,added));    fireTableDataChanged();    int addCount=added == null ? 0 : added.length;    int remCount=removed == null ? 0 : removed.length;    editor.fireHexEditorEvent(offset,addCount,remCount);  }}  }
class C{  public boolean verbose(){  return verbose;}  }
class C{  protected String doIt() throws Exception {  setup();  for (  MWarehouse warehouse : warehouses)   for (  MCostType costType : costTypes)   for (  MCostElement costElement : costElements)   for (  int productId : products)   generateInventoryValue(productId,costType.getM_CostType_ID(),costElement.getM_CostElement_ID(),warehouse.getM_Warehouse_ID());  pstmt.executeBatch();  commitEx();  DB.close(pstmt);  DB.executeUpdate("UPDATE T_InventoryValue SET Cost = CASE WHEN QtyOnHand <> 0 THEN (CostAmt + CostAmtLL) / QtyOnHand ELSE  0 END  ,  CumulatedAmt = CASE WHEN QtyOnHand <> 0  THEN  CostAmt + CostAmtLL ELSE 0 END ,  DateValue = " + DB.TO_DATE(p_DateValue) + " WHERE AD_PInstance_ID=?",getAD_PInstance_ID(),get_TrxName());  return "@Ok@ " + count;}  }
class C{  public boolean isResolvable(){  return type != Type.DIVERGE;}  }
class C{  public String randomPositiveFloat(Object owhole,Object odecimal){  int whole=FunctionHandler.getInt(owhole);  int decimal=FunctionHandler.getInt(odecimal);  StringBuilder output=new StringBuilder();  output.append(rnd.nextInt(8) + 1);  for (int i=0; i < whole - 1; i++) {    output.append(rnd.nextInt(9));  }  output.append(".");  for (int i=0; i < decimal; i++) {    output.append(rnd.nextInt(9));  }  return output.toString();}  }
class C{  public static <T extends Object & Comparable<? super T>>T min(Collection<? extends T> collection){  Iterator<? extends T> it=collection.iterator();  T min=it.next();  while (it.hasNext()) {    T next=it.next();    if (min.compareTo(next) > 0) {      min=next;    }  }  return min;}  }
class C{  public static Associator makeCopy(Associator model) throws Exception {  return (Associator)new SerializedObject(model).getObject();}  }
class C{  @Override public String toString(){  StringBuffer result=new StringBuffer();  result.append("Dictionary size: " + m_numAttributes).append("\n\n");  result.append("The independent frequency of a class\n");  result.append("--------------------------------------\n");  for (int c=0; c < m_numClasses; c++) {    result.append(m_headerInfo.classAttribute().value(c)).append("\t").append(Double.toString(m_probOfClass[c])).append("\n");  }  result.append("\nThe frequency of a word given the class\n");  result.append("-----------------------------------------\n");  for (int c=0; c < m_numClasses; c++) {    result.append(Utils.padLeft(m_headerInfo.classAttribute().value(c),11)).append("\t");  }  result.append("\n");  for (int w=0; w < m_numAttributes; w++) {    if (w == m_headerInfo.classIndex()) {      continue;    }    for (int c=0; c < m_numClasses; c++) {      result.append(Utils.padLeft(Double.toString(m_probOfWordGivenClass[c][w]),11)).append("\t");    }    result.append(m_headerInfo.attribute(w).name());    result.append("\n");  }  return result.toString();}  }
class C{  public void read(@WillClose InputStream inputStream) throws IOException {  BufferedReader reader=new BufferedReader(Util.getReader(inputStream));  int lineNumber=0;  try {    String line;    int lparen;    String version;    while ((line=reader.readLine()) != null) {      ++lineNumber;      if (lineNumber == 1) {        if (DEBUG) {          System.out.println("First line: " + line);        }        version=parseVersionNumber(line);        if (version != null) {          if (!"1.0".equals(version)) {            throw new IOException("Unsupported sourceInfo version " + version);          }          continue;        }      }      StringTokenizer tokenizer=new StringTokenizer(line,",");      String className=tokenizer.nextToken();      String next=tokenizer.nextToken();      if (DIGITS.matcher(next).matches()) {        SourceLineRange range=createRange(next,tokenizer.nextToken());        classLineMap.put(className,range);        if (DEBUG) {          System.out.println("class:" + className + ","+ range);        }      } else       if ((lparen=next.indexOf('(')) >= 0) {        String methodName=next.substring(0,lparen);        String methodSignature=next.substring(lparen);        if ("init^".equals(methodName)) {          methodName="<init>";        } else         if ("clinit^".equals(methodName)) {          methodName="<clinit>";        }        SourceLineRange range=createRange(tokenizer.nextToken(),tokenizer.nextToken());        methodLineMap.put(new MethodDescriptor(className,methodName,methodSignature),range);        if (DEBUG) {          System.out.println("method:" + methodName + methodSignature+ ","+ range);        }      } else {        String fieldName=next;        SourceLineRange range=createRange(tokenizer.nextToken(),tokenizer.nextToken());        fieldLineMap.put(new FieldDescriptor(className,fieldName),range);        if (DEBUG) {          System.out.println("field:" + className + ","+ fieldName+ ","+ range);        }      }    }  } catch (  NoSuchElementException e) {    IOException ioe=new IOException("Invalid syntax in source info file at line " + lineNumber);    ioe.initCause(e);    throw ioe;  } finally {    try {      reader.close();    } catch (    IOException e) {    }  }}  }
class C{  @SuppressLint("NewApi") @SuppressWarnings({"static-access"}) public static void sendLocalNotification(Context mContext,String title,String message,@SuppressWarnings("SameParameterValue") Intent mIntent){  System.out.println("called: " + title + " : "+ message);  int appIconResId=0;  PendingIntent pIntent=null;  if (mIntent != null)   pIntent=PendingIntent.getActivity(mContext,0,mIntent,PendingIntent.FLAG_UPDATE_CURRENT);  final PackageManager pm=mContext.getPackageManager();  String packageName=mContext.getPackageName();  ApplicationInfo applicationInfo;  try {    applicationInfo=pm.getApplicationInfo(packageName,PackageManager.GET_META_DATA);    appIconResId=applicationInfo.icon;  } catch (  NameNotFoundException e1) {    e1.printStackTrace();  }  Notification notification;  if (mIntent == null) {    notification=new Notification.Builder(mContext).setSmallIcon(appIconResId).setWhen(System.currentTimeMillis()).setContentTitle(message).setStyle(new Notification.BigTextStyle().bigText(message)).setAutoCancel(true).setContentText(message).setContentIntent(PendingIntent.getActivity(mContext,0,new Intent(),0)).getNotification();  } else {    notification=new Notification.Builder(mContext).setSmallIcon(appIconResId).setWhen(System.currentTimeMillis()).setContentTitle(message).setContentText(message).setAutoCancel(true).setStyle(new Notification.BigTextStyle().bigText(message)).setContentIntent(pIntent).getNotification();  }  notification.flags|=Notification.FLAG_AUTO_CANCEL;  notification.defaults|=Notification.DEFAULT_SOUND;  notification.defaults|=Notification.DEFAULT_VIBRATE;  NotificationManager manager=(NotificationManager)mContext.getSystemService(mContext.NOTIFICATION_SERVICE);  manager.notify(R.string.app_name,notification);}  }
class C{  public void update(Graphics g){  g.clearRect(0,0,width,height);  paint(g);}  }
class C{  void addPackageDeclaration(String packageName) throws IOException {  writePackageDeclaration(packageName);  writeEmptyLine();}  }
class C{  public synchronized void addProcessedFile(long size){  processedFiles++;  processedSize+=size;}  }
class C{  @Override public double[] projectRelativeDataToRenderSpace(double[] data){  return projectRelativeScaledToRender(projectRelativeDataToScaledSpace(data));}  }
class C{  private void notifyProgress(){  SendPacket packet=mPacket;  SendDelivery delivery=mDelivery;  if (!mDisposed.get() && packet != null && delivery != null) {    float progress=(float)mCursor / mTotal;    if (isNotifyProgress(progress)) {      delivery.postSendProgress(packet,mProgress);    }  }}  }
class C{  public int size(){synchronized (children) {    return children.size();  }}  }
class C{  public static SparseBitmap batchOr(final SparseBitmap... bitmaps){  if (bitmaps.length < 1) {    return SparseBitmap.createFromUnsortedData();  }  if (bitmaps.length < 2) {    return bitmaps[0];  }  EWAHCompressedBitmap firstMap=bitmaps[0].bitmap;  for (int index=1; index < bitmaps.length; ++index) {    firstMap=firstMap.or(bitmaps[index].bitmap);  }  return new SparseBitmap(firstMap);}  }
class C{  private void error(String msg){  exitStatus=EXIT_CMDERR;  output(getText(msg));}  }
class C{  public static void appendSizeExternalSortableArrayArray(InputStream in,OutputStream out,ExternalSortable ex) throws IOException {  int i;  ExternalSortable a;  try {    i=ByteUtils.readInt(in);  } catch (  IOException e) {    throw new IOException("Can't append in to out; in is empty.");  }  try {    for (int j=0; j < i; j++) {      a=ex.read(in);      a.write(out);    }  } catch (  IOException e) {    throw new IOException("Can't append in to out; not enough bytes, but not empty.");  }}  }
class C{  public static void main(String[] args){  if (args.length != 2) {    System.out.println("POSTrainGenerating [template File] [File/Folder]");    System.out.println("Generating training data for word segmentation with FlexCRFs++ or jvnmaxent (in JVnTextPro)");    System.out.println("Template File: featuretemplate to generate context predicates");    System.out.println("Input File/Folder: file/folder name containing data manually tagged for training");    return;  }  POSTrainGenerating trainGen=new POSTrainGenerating(args[0]);  trainGen.generateTrainData(args[1],args[1]);}  }
class C{  private void addGeneratedResource(FacesContext context,String resourceName,String rendererType,String value,UIViewRoot view){  final UIOutput resource=new UIOutput();  resource.getAttributes().put("name",resourceName);  resource.setRendererType(rendererType);  resource.getAttributes().put("library",value);  view.addComponentResource(context,resource,HEAD);}  }
class C{  public double[][] predictIntervals(Instance instance,double confidenceLevel) throws Exception {  UnivariateIntervalEstimator e=(UnivariateIntervalEstimator)getDensityEstimator(instance,false);  return e.predictIntervals(confidenceLevel);}  }
class C{  private String createString(String f){  StringBuffer sb=new StringBuffer();  int keys[]=getKeys();  for (int i=0; i < keys.length; i++) {    int key=keys[i];    sb.append(CUjit_option.stringFor(key) + "=");    Object value=map.get(key);    if (value instanceof byte[]) {      byte data[]=(byte[])value;      sb.append(createString(data));    } else {      sb.append(String.valueOf(value));    }    if (i < keys.length - 1) {      sb.append(f);    }  }  return sb.toString();}  }
class C{  protected void addImpl(Component comp,Object constraints,int index){  super.addImpl(comp,constraints,index);  if (glassPane != null && glassPane.getParent() == this && getComponent(0) != glassPane) {    add(glassPane,0);  }}  }
class C{  public void elementDecl(String name,String model) throws SAXException {  if (null != m_resultDeclHandler)   m_resultDeclHandler.elementDecl(name,model);}  }
class C{  protected MemorySection(com.boydti.fawe.configuration.ConfigurationSection parent,String path){  if (parent == null) {    throw new NullPointerException("Parent may not be null");  }  if (path == null) {    throw new NullPointerException("Path may not be null");  }  this.path=path;  this.parent=parent;  this.root=parent.getRoot();  if (this.root == null) {    throw new NullPointerException("Path may not be orphaned");  }  this.fullPath=createPath(parent,path);}  }
class C{  private void read(StringBuilder buf,String lineStart,boolean collectMatchLine,boolean collectAll) throws IOException, NoMoreDataException {  String sep="";  while (true) {    String line=reader.readLine();    if (line == null) {      openNextFile();      continue;    }    if (lineStart != null && line.startsWith(lineStart)) {      if (collectMatchLine) {        buf.append(sep).append(line);        sep=NEW_LINE;      }      return;    }    if (collectAll) {      buf.append(sep).append(line);      sep=NEW_LINE;    }  }}  }
class C{  @Deprecated public void addEditMenuItem(JMenuItem menuItem){  getEdit().add(menuItem);}  }
class C{  public void deleteRow(int selectedRow){  String name=(String)this.getValueAt(selectedRow,0);  for (  final Aspect element : getData().getAspect()) {    if (CoreUtils.nullSafeComparator(((Strategy)element).getName(),name) == 0) {      getData().remove(element);      getData().setDirty(true);      final Vector<Object> currRow=rows.get(selectedRow);      rows.remove(currRow);      this.fireTableRowsDeleted(selectedRow,selectedRow);      break;    }  }}  }
class C{  public Period plusMonths(int months){  if (months == 0) {    return this;  }  int[] values=getValues();  getPeriodType().addIndexedField(this,PeriodType.MONTH_INDEX,values,months);  return new Period(values,getPeriodType());}  }
class C{  public void evictAll(){  AlbumArtHelper.clearAlbumArtRequests();  if (USE_MEMORY_CACHE) {synchronized (mMemoryCache) {      mMemoryCache.evictAll();    }  }  mReusableBitmaps.clear();}  }
class C{  private void parseAttributes(Context context,AttributeSet attrs){  Log.d(TAG,"parseAttributes()");  if (attrs == null) {    return;  }  TypedArray a=context.getTheme().obtainStyledAttributes(attrs,R.styleable.IconEditText,0,0);  try {    _iconResource=a.getResourceId(R.styleable.IconEditText_iconSrc,0);    _hint=a.getString(R.styleable.IconEditText_hint);    _isPassword=a.getBoolean(R.styleable.IconEditText_isPassword,false);    Log.d(TAG,"{ _iconResource: " + _iconResource + ", _hint: "+ _hint+ ", _isPassword: "+ _isPassword+ "}");  } catch (  Exception ex) {    Log.e(TAG,"Unable to parse attributes due to: " + ex.getMessage());    ex.printStackTrace();  } finally {    a.recycle();  }}  }
class C{  public IssuesQuery(URL feedUrl){  super(feedUrl);}  }
class C{  private void extractDispositionInfo(String line) throws IOException {  String origline=line;  line=origline.toLowerCase();  int start=line.indexOf("content-disposition: ");  int end=line.indexOf(";");  if (start == -1 || end == -1) {    throw new IOException("Content disposition corrupt: " + origline);  }  String disposition=line.substring(start + 21,end).trim();  if (!disposition.equals("form-data")) {    throw new IOException("Invalid content disposition: " + disposition);  }  start=line.indexOf("name=\"",end);  end=line.indexOf("\"",start + 7);  int startOffset=6;  if (start == -1 || end == -1) {    start=line.indexOf("name=",end);    end=line.indexOf(";",start + 6);    if (start == -1) {      throw new IOException("Content disposition corrupt: " + origline);    } else     if (end == -1) {      end=line.length();    }    startOffset=5;  }  name=origline.substring(start + startOffset,end);  String filename=null;  String origname=null;  start=line.indexOf("filename=\"",end + 2);  end=line.indexOf("\"",start + 10);  if (start != -1 && end != -1) {    filename=origline.substring(start + 10,end);    origname=filename;    int slash=Math.max(filename.lastIndexOf('/'),filename.lastIndexOf('\\'));    if (slash > -1) {      filename=filename.substring(slash + 1);    }  }  fileName=filename;}  }
class C{  public synchronized MasonGeometry findGeometry(MasonGeometry g){  List<?> gList=spatialIndex.query(g.getGeometry().getEnvelopeInternal());  for (int i=0; i < gList.size(); i++) {    MasonGeometry g1=((MasonGeometry)gList.get(i));    if (g1.equals(g)) {      return g1;    }  }  return g;}  }
class C{  public boolean isNot(){  return isNot;}  }
class C{  public BinaryInvalidTypeException(String msg){  super(msg);}  }
class C{  public int costInline(int thresh,Environment env,Context ctx){  int cost=1 + cond.costInline(thresh,env,ctx);  if (ifTrue != null) {    cost+=ifTrue.costInline(thresh,env,ctx);  }  if (ifFalse != null) {    cost+=ifFalse.costInline(thresh,env,ctx);  }  return cost;}  }
class C{  public boolean isTableAccess(int AD_Table_ID,boolean ro){  if (!isTableAccessLevel(AD_Table_ID,ro))   return false;  loadTableAccess(false);  boolean hasAccess=true;  for (int i=0; i < m_tableAccess.length; i++) {    if (m_tableAccess[i].getAD_Table_ID() != AD_Table_ID)     continue;    if (!X_AD_Table_Access.ACCESSTYPERULE_Accessing.equals(m_tableAccess[i].getAccessTypeRule()))     continue;    if (m_tableAccess[i].isExclude()) {      if (ro)       hasAccess=m_tableAccess[i].isReadOnly(); else       hasAccess=false;      log.fine("Exclude AD_Table_ID=" + AD_Table_ID + " (ro="+ ro+ ",TableAccessRO="+ m_tableAccess[i].isReadOnly()+ ") = "+ hasAccess);      return hasAccess;    } else {      if (!ro)       hasAccess=!m_tableAccess[i].isReadOnly(); else       hasAccess=true;      log.fine("Include AD_Table_ID=" + AD_Table_ID + " (ro="+ ro+ ",TableAccessRO="+ m_tableAccess[i].isReadOnly()+ ") = "+ hasAccess);      return hasAccess;    }  }  if (!hasAccess)   log.fine("AD_Table_ID=" + AD_Table_ID + "(ro="+ ro+ ") = "+ hasAccess);  return hasAccess;}  }
class C{  public static boolean isPrefixChar(int codePoint){  return isPN_CHARS_BASE(codePoint) || isPN_CHARS(codePoint) || codePoint == '.';}  }
class C{  public DeviceAutomator typeText(String text){  KeyEvent[] events=KeyCharacterMap.load(KeyCharacterMap.VIRTUAL_KEYBOARD).getEvents(text.toCharArray());  for (  KeyEvent event : events) {    if (event.getAction() == KeyEvent.ACTION_DOWN) {      mDevice.pressKeyCode(event.getKeyCode());    }  }  return this;}  }
class C{  public DockerRuleBuilder waitForPort(String portToWaitOn,int timeoutInMillis){  params.portToWaitOn=portToWaitOn;  params.waitTimeout=timeoutInMillis;  return this;}  }
class C{  private GuacamoleInstruction handleBlob(GuacamoleInstruction instruction){  List<String> args=instruction.getArgs();  if (args.size() < 2)   return instruction;  String index=args.get(0);  InterceptedStream<OutputStream> stream=getInterceptedStream(index);  if (stream == null)   return instruction;  byte[] blob;  try {    String data=args.get(1);    blob=DatatypeConverter.parseBase64Binary(data);  } catch (  IllegalArgumentException e) {    logger.warn("Received base64 data for intercepted stream was invalid.");    logger.debug("Decoding base64 data for intercepted stream failed.",e);    return null;  }  try {    stream.getStream().write(blob);    sendAck(index,"OK",GuacamoleStatus.SUCCESS);  } catch (  IOException e) {    sendAck(index,"FAIL",GuacamoleStatus.SERVER_ERROR);    logger.debug("Write failed for intercepted stream.",e);  }  return null;}  }
class C{  public ResultSet executeQuery(final String query,final boolean retry) throws SQLException {  if (!isConnectionValid()) {    connect(getURL(),m_properties);  }  m_debugQueryCount++;  long militime=0;  if (m_performanceOutput) {    militime=new GregorianCalendar().getTimeInMillis();  }  ResultSet retSet=null;  final PreparedStatement prep=m_connection.prepareStatement(query,ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);  try {    retSet=prep.executeQuery();  } catch (  final SQLException error) {    if (m_performanceOutput) {      NaviLogger.severe(String.format("<%d>    <%d ms>    %s",m_debugQueryCount,Math.abs(militime),query));      NaviLogger.severe("Error: Query failed on %s try: %s",retry ? "first" : "second",query);    }    if (((error.getSQLState() == PostgreSQLErrorCodes.CONNECTION_DOES_NOT_EXIST) || (error.getSQLState() == PostgreSQLErrorCodes.CONNECTION_FAILURE)) && retry) {      connect(getDatabaseUrl(m_databaseConfiguration.getUrl(),m_databaseConfiguration.getName()),m_properties);      executeQuery(query,false);    } else {      throw error;    }  }  if (m_performanceOutput) {    militime-=new GregorianCalendar().getTimeInMillis();    NaviLogger.info("<%d>    <%d ms>    %s",m_debugQueryCount,Math.abs(militime),query.substring(0,Math.min(MAXIMUM_OUTPUT_SIZE,query.length())));  }  return retSet;}  }
class C{  public Matrix rightMultiply(Matrix mat){  if (!(mat instanceof GF2Matrix)) {    throw new ArithmeticException("matrix is not defined over GF(2)");  }  if (mat.numRows != numColumns) {    throw new ArithmeticException("length mismatch");  }  GF2Matrix a=(GF2Matrix)mat;  GF2Matrix result=new GF2Matrix(numRows,mat.numColumns);  int d;  int rest=numColumns & 0x1f;  if (rest == 0) {    d=length;  } else {    d=length - 1;  }  for (int i=0; i < numRows; i++) {    int count=0;    for (int j=0; j < d; j++) {      int e=matrix[i][j];      for (int h=0; h < 32; h++) {        int b=e & (1 << h);        if (b != 0) {          for (int g=0; g < a.length; g++) {            result.matrix[i][g]^=a.matrix[count][g];          }        }        count++;      }    }    int e=matrix[i][length - 1];    for (int h=0; h < rest; h++) {      int b=e & (1 << h);      if (b != 0) {        for (int g=0; g < a.length; g++) {          result.matrix[i][g]^=a.matrix[count][g];        }      }      count++;    }  }  return result;}  }
class C{  public void addUtilizationHistoryValue(final double utilization){  getUtilizationHistory().add(0,utilization);  if (getUtilizationHistory().size() > HISTORY_LENGTH) {    getUtilizationHistory().remove(HISTORY_LENGTH);  }}  }
class C{  public SortOrder(){}  }
class C{  private void revokePasswordPolicy(){  devicePolicyManager.setPasswordQuality(deviceAdmin,DevicePolicyManager.PASSWORD_QUALITY_UNSPECIFIED);  devicePolicyManager.setMaximumFailedPasswordsForWipe(deviceAdmin,0);  devicePolicyManager.setPasswordExpirationTimeout(deviceAdmin,0);  devicePolicyManager.setPasswordMinimumLength(deviceAdmin,0);}  }
class C{  protected void reloadChoiceStateInView(View frontView,int position){  if (isChecked(position)) {    if (swipeDrawableChecked > 0)     frontView.setBackgroundResource(swipeDrawableChecked);  } else {    if (swipeDrawableUnchecked > 0)     frontView.setBackgroundResource(swipeDrawableUnchecked);  }}  }
class C{  public boolean TerminateNow(){  isShuttingDown=true;  isShutDownNow=true;  try {    return executorService.awaitTermination(1,TimeUnit.SECONDS);  } catch (  InterruptedException e) {    executorService.shutdownNow();    Thread.currentThread().interrupt();  }  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:55.021 -0500",hash_original_method="0ABA14D3C219E3137A12A8B54201A585",hash_generated_method="1BEEE3D600CCD50D9170B9CA2284E416") public static void waitToFinish(){  Runnable toFinish;  while ((toFinish=sPendingWorkFinishers.poll()) != null) {    toFinish.run();  }}  }
class C{  public void requestUpdateFromLayout(){  return;}  }
class C{  @Override public void close() throws java.io.IOException {  flushBase64();  super.close();  buffer=null;  out=null;}  }
class C{  public ColumnInfo(String colHeader,String colSQL,Class<?> colClass,int displayType,boolean readOnly,boolean colorColumn,String keyPairColSQL,boolean visible){  setColHeader(colHeader);  setColSQL(colSQL);  setColClass(colClass);  setReadOnly(readOnly);  setColorColumn(colorColumn);  setKeyPairColSQL(keyPairColSQL);  setDisplayType(displayType);  setVisibility(visible);}  }
class C{  public void newInternalMinute(){  if (DEBUG_SHOW_SYNC_CALLS) {    if (log.isDebugEnabled()) {      log.debug("newInternalMinute clockMode: " + clockMode + " nceInit: "+ nceSyncInitStateCounter+ " nceRun: "+ nceSyncRunStateCounter);    }  }}  }
class C{  protected byte[] processAsReq(byte[] in) throws Exception {  ASReq asReq=new ASReq(in);  int[] eTypes=null;  List<PAData> outPAs=new ArrayList<>();  PrincipalName service=asReq.reqBody.sname;  if (options.containsKey(KDC.Option.RESP_NT)) {    service=new PrincipalName((int)options.get(KDC.Option.RESP_NT),service.getNameStrings(),Realm.getDefault());  }  try {    System.out.println(realm + "> " + asReq.reqBody.cname+ " sends AS-REQ for "+ service+ ", "+ asReq.reqBody.kdcOptions);    KDCReqBody body=asReq.reqBody;    eTypes=KDCReqBodyDotEType(body);    int eType=eTypes[0];    EncryptionKey ckey=keyForUser(body.cname,eType,false);    EncryptionKey skey=keyForUser(service,eType,true);    if (options.containsKey(KDC.Option.ONLY_RC4_TGT)) {      int tgtEType=EncryptedData.ETYPE_ARCFOUR_HMAC;      boolean found=false;      for (int i=0; i < eTypes.length; i++) {        if (eTypes[i] == tgtEType) {          found=true;          break;        }      }      if (!found) {        throw new KrbException(Krb5.KDC_ERR_ETYPE_NOSUPP);      }      skey=keyForUser(service,tgtEType,true);    }    if (ckey == null) {      throw new KrbException(Krb5.KDC_ERR_ETYPE_NOSUPP);    }    if (skey == null) {      throw new KrbException(Krb5.KDC_ERR_SUMTYPE_NOSUPP);    }    EncryptionKey key=generateRandomKey(eType);    KerberosTime till=body.till;    if (till == null) {      throw new KrbException(Krb5.KDC_ERR_NEVER_VALID);    } else     if (till.isZero()) {      till=new KerberosTime(new Date().getTime() + 1000 * 3600 * 11);    }    boolean[] bFlags=new boolean[Krb5.TKT_OPTS_MAX + 1];    if (body.kdcOptions.get(KDCOptions.FORWARDABLE)) {      List<String> sensitives=(List<String>)options.get(Option.SENSITIVE_ACCOUNTS);      if (sensitives != null && sensitives.contains(body.cname.toString())) {      } else {        bFlags[Krb5.TKT_OPTS_FORWARDABLE]=true;      }    }    if (body.kdcOptions.get(KDCOptions.RENEWABLE)) {      bFlags[Krb5.TKT_OPTS_RENEWABLE]=true;    }    if (body.kdcOptions.get(KDCOptions.PROXIABLE)) {      bFlags[Krb5.TKT_OPTS_PROXIABLE]=true;    }    if (body.kdcOptions.get(KDCOptions.POSTDATED)) {      bFlags[Krb5.TKT_OPTS_POSTDATED]=true;    }    if (body.kdcOptions.get(KDCOptions.ALLOW_POSTDATE)) {      bFlags[Krb5.TKT_OPTS_MAY_POSTDATE]=true;    }    bFlags[Krb5.TKT_OPTS_INITIAL]=true;    DerValue[] pas2=null, pas=null;    if (options.containsKey(KDC.Option.DUP_ETYPE)) {      int n=(Integer)options.get(KDC.Option.DUP_ETYPE);switch (n) {case 1:        pas2=new DerValue[]{new DerValue(new ETypeInfo2(1,null,null).asn1Encode()),new DerValue(new ETypeInfo2(1,"",null).asn1Encode()),new DerValue(new ETypeInfo2(1,realm,new byte[]{1}).asn1Encode())};      pas=new DerValue[]{new DerValue(new ETypeInfo(1,null).asn1Encode()),new DerValue(new ETypeInfo(1,"").asn1Encode()),new DerValue(new ETypeInfo(1,realm).asn1Encode())};    break;case 2:  pas2=new DerValue[]{new DerValue(new ETypeInfo2(1,realm,new byte[]{1}).asn1Encode()),new DerValue(new ETypeInfo2(1,null,null).asn1Encode()),new DerValue(new ETypeInfo2(1,"",null).asn1Encode())};pas=new DerValue[]{new DerValue(new ETypeInfo(1,realm).asn1Encode()),new DerValue(new ETypeInfo(1,null).asn1Encode()),new DerValue(new ETypeInfo(1,"").asn1Encode())};break;case 3:pas=new DerValue[]{new DerValue(new ETypeInfo(1,realm).asn1Encode()),new DerValue(new ETypeInfo(1,null).asn1Encode()),new DerValue(new ETypeInfo(1,"").asn1Encode())};break;case 4:pas=new DerValue[]{new DerValue(new ETypeInfo(23,"ANYTHING").asn1Encode()),new DerValue(new ETypeInfo(1,null).asn1Encode()),new DerValue(new ETypeInfo(1,"").asn1Encode())};break;case 5:pas=new DerValue[]{new DerValue(new ETypeInfo(1,"").asn1Encode()),new DerValue(new ETypeInfo(1,null).asn1Encode())};break;}} else {int[] epas=eTypes;if (options.containsKey(KDC.Option.RC4_FIRST_PREAUTH)) {for (int i=1; i < epas.length; i++) {if (epas[i] == EncryptedData.ETYPE_ARCFOUR_HMAC) {epas[i]=epas[0];epas[0]=EncryptedData.ETYPE_ARCFOUR_HMAC;break;}};} else if (options.containsKey(KDC.Option.ONLY_ONE_PREAUTH)) {epas=new int[]{eTypes[0]};}pas2=new DerValue[epas.length];for (int i=0; i < epas.length; i++) {pas2[i]=new DerValue(new ETypeInfo2(epas[i],epas[i] == EncryptedData.ETYPE_ARCFOUR_HMAC ? null : getSalt(body.cname),null).asn1Encode());}boolean allOld=true;for (int i : eTypes) {if (i == EncryptedData.ETYPE_AES128_CTS_HMAC_SHA1_96 || i == EncryptedData.ETYPE_AES256_CTS_HMAC_SHA1_96) {allOld=false;break;}}if (allOld) {pas=new DerValue[epas.length];for (int i=0; i < epas.length; i++) {pas[i]=new DerValue(new ETypeInfo(epas[i],epas[i] == EncryptedData.ETYPE_ARCFOUR_HMAC ? null : getSalt(body.cname)).asn1Encode());}}}DerOutputStream eid;if (pas2 != null) {eid=new DerOutputStream();eid.putSequence(pas2);outPAs.add(new PAData(Krb5.PA_ETYPE_INFO2,eid.toByteArray()));}if (pas != null) {eid=new DerOutputStream();eid.putSequence(pas);outPAs.add(new PAData(Krb5.PA_ETYPE_INFO,eid.toByteArray()));}PAData[] inPAs=KDCReqDotPAData(asReq);if (inPAs == null || inPAs.length == 0) {Object preauth=options.get(Option.PREAUTH_REQUIRED);if (preauth == null || preauth.equals(Boolean.TRUE)) {throw new KrbException(Krb5.KDC_ERR_PREAUTH_REQUIRED);}} else {try {EncryptedData data=newEncryptedData(new DerValue(inPAs[0].getValue()));EncryptionKey pakey=keyForUser(body.cname,data.getEType(),false);data.decrypt(pakey,KeyUsage.KU_PA_ENC_TS);} catch (Exception e) {throw new KrbException(Krb5.KDC_ERR_PREAUTH_FAILED);}bFlags[Krb5.TKT_OPTS_PRE_AUTHENT]=true;}TicketFlags tFlags=new TicketFlags(bFlags);EncTicketPart enc=new EncTicketPart(tFlags,key,body.cname,new TransitedEncoding(1,new byte[0]),new KerberosTime(new Date()),body.from,till,body.rtime,body.addresses,null);Ticket t=new Ticket(service,new EncryptedData(skey,enc.asn1Encode(),KeyUsage.KU_TICKET));EncASRepPart enc_part=new EncASRepPart(key,new LastReq(new LastReqEntry[]{new LastReqEntry(0,new KerberosTime(new Date().getTime() - 10000))}),body.getNonce(),new KerberosTime(new Date().getTime() + 1000 * 3600 * 24),tFlags,new KerberosTime(new Date()),body.from,till,body.rtime,service,body.addresses);EncryptedData edata=new EncryptedData(ckey,enc_part.asn1Encode(),KeyUsage.KU_ENC_AS_REP_PART);ASRep asRep=new ASRep(outPAs.toArray(new PAData[outPAs.size()]),body.cname,t,edata);System.out.println("     Return " + asRep.cname + " ticket for "+ asRep.ticket.sname+ ", flags "+ tFlags);DerOutputStream out=new DerOutputStream();out.write(DerValue.createTag(DerValue.TAG_APPLICATION,true,(byte)Krb5.KRB_AS_REP),asRep.asn1Encode());byte[] result=out.toByteArray();String ccache=System.getProperty("test.kdc.save.ccache");if (ccache != null) {asRep.encKDCRepPart=enc_part;sun.security.krb5.internal.ccache.Credentials credentials=new sun.security.krb5.internal.ccache.Credentials(asRep);CredentialsCache cache=CredentialsCache.create(asReq.reqBody.cname,ccache);if (cache == null) {throw new IOException("Unable to create the cache file " + ccache);}cache.update(credentials);cache.save();}return result;} catch (KrbException ke) {ke.printStackTrace(System.out);KRBError kerr=ke.getError();KDCReqBody body=asReq.reqBody;System.out.println("     Error " + ke.returnCode() + " "+ ke.returnCodeMessage());byte[] eData=null;if (kerr == null) {if (ke.returnCode() == Krb5.KDC_ERR_PREAUTH_REQUIRED || ke.returnCode() == Krb5.KDC_ERR_PREAUTH_FAILED) {DerOutputStream bytes=new DerOutputStream();bytes.write(new PAData(Krb5.PA_ENC_TIMESTAMP,new byte[0]).asn1Encode());for (PAData p : outPAs) {bytes.write(p.asn1Encode());}DerOutputStream temp=new DerOutputStream();temp.write(DerValue.tag_Sequence,bytes);eData=temp.toByteArray();}kerr=new KRBError(null,null,null,new KerberosTime(new Date()),0,ke.returnCode(),body.cname,service,KrbException.errorMessage(ke.returnCode()),eData);}return kerr.asn1Encode();}}  }
class C{  @Override public boolean provides(Class<?> type){  if (getDisabled()) {    return false;  }  if (manager == null) {    return false;  }  if (type.equals(jmri.GlobalProgrammerManager.class) && provides(jmri.ProgrammerManager.class)) {    return ((jmri.ProgrammerManager)get(jmri.ProgrammerManager.class)).isGlobalProgrammerAvailable();  }  if (type.equals(jmri.AddressedProgrammerManager.class) && provides(jmri.ProgrammerManager.class)) {    return ((jmri.ProgrammerManager)get(jmri.ProgrammerManager.class)).isAddressedModePossible();  }  return manager.provides(type);}  }
class C{  public EaseOut(){}  }
class C{  public ProxyRequireParser(String require){  super(require);}  }
class C{  public void testSessionStateChange(){  ClientSessionState state=new ClientSessionState(UUID.randomUUID());  AtomicBoolean changed=new AtomicBoolean();  AtomicReference<Session.State> change=new AtomicReference<>();  Listener<Session.State> listener=state.onStateChange(null);  assertEquals(state.getState(),Session.State.CLOSED);  state.setState(Session.State.CLOSED);  assertFalse(changed.get());  state.setState(Session.State.OPEN);  assertTrue(changed.get());  assertEquals(change.get(),Session.State.OPEN);  changed.set(false);  listener.close();  state.setState(Session.State.EXPIRED);  assertFalse(changed.get());}  }
class C{  public int viewToModel(Point pt){  return getUI().viewToModel(this,pt);}  }
class C{  public void closeStream(){  CarbonUtil.closeStreams(stream);  executorService.shutdown();}  }
class C{  public JodaTimePermission(String name){  super(name);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void checkCreatedUser(VOUserDetails createdUser,Organization userOrg,String password,boolean isSamlSpMode) throws Exception {  assertNotNull(createdUser);  if (isSamlSpMode) {    assertEquals(password,createdUser.getUserId());  }  assertFalse(supplierAdminUser.getKey() == createdUser.getKey());  assertEquals(userOrg.getOrganizationId(),createdUser.getOrganizationId());  assertEquals(UserAccountStatus.ACTIVE,createdUser.getStatus());  assertEquals(supplierAdminUser.getEmail(),createdUser.getEMail());  assertEquals(supplierAdminUser.getLocale(),createdUser.getLocale());  assertEquals(supplierAdminUser.getSalutation(),createdUser.getSalutation());  assertTrue(createdUser.hasAdminRole());  if (!isSamlSpMode) {    container.login(createdUser.getKey());    idService.changePassword(password,password);  }}  }
class C{  private void findSalesRep(){  int changed=0;  int notFound=0;  Properties ctx=new Properties();  String sql="SELECT * FROM R_Request " + "WHERE AD_Client_ID=?" + " AND SalesRep_ID=0 AND Processed='N'";  if (m_model.getR_RequestType_ID() != 0)   sql+=" AND R_RequestType_ID=?";  PreparedStatement pstmt=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,m_model.getAD_Client_ID());    if (m_model.getR_RequestType_ID() != 0)     pstmt.setInt(2,m_model.getR_RequestType_ID());    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      MRequest request=new MRequest(ctx,rs,null);      if (request.getSalesRep_ID() != 0)       continue;      int SalesRep_ID=findSalesRep(request);      if (SalesRep_ID != 0) {        request.setSalesRep_ID(SalesRep_ID);        request.saveEx();        changed++;      } else       notFound++;    }    rs.close();  } catch (  SQLException ex) {    log.log(Level.SEVERE,sql,ex);  } finally {    DB.close(pstmt);  }  pstmt=null;  if (changed == 0 && notFound == 0)   m_summary.append("No unallocated Requests"); else   m_summary.append("Allocated SalesRep=").append(changed);  if (notFound > 0)   m_summary.append(",Not=").append(notFound);  m_summary.append(" - ");}  }
class C{  void start(){  this.thread.start();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodegetprevioussibling.class,args);}  }
class C{  public void addToPathOption(String key,String toAppend){  if (toAppend == null) {    throw new IllegalArgumentException("Null string appended to sourcePath.");  }  String path=options.get(key);  if (toAppend.startsWith(File.pathSeparator)) {    if (path == null || path.isEmpty()) {      path=toAppend.substring(1,toAppend.length());    } else {      path+=toAppend;    }  } else {    if (path == null || path.isEmpty()) {      path=toAppend;    } else {      path+=File.pathSeparator + toAppend;    }  }  addOption(key,path);}  }
class C{  @DSComment("IO movement methodName") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:38.359 -0500",hash_original_method="929DBC7A90DC227FF2B26E4E72D12B70",hash_generated_method="8CC78C93660BD02E2DF389D10B4F12B7") public static long queryNumEntries(SQLiteDatabase db,String table){  return queryNumEntries(db,table,null,null);}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public int tileGIDAt(CGPoint pos){  assert (pos.x < layerSize.width && pos.y < layerSize.height && pos.x >= 0 && pos.y >= 0) : "TMXLayer: invalid position";  assert (tiles != null && atlasIndexArray_ != null) : "TMXLayer: the tiles map has been released";  int idx=(int)(pos.x + pos.y * layerSize.width);  return tiles.get(idx);}  }
class C{  public ITurnOrdered nextSpaceStationElement(){  return this.getTurnSSEnum().nextElement();}  }
class C{  protected FunctionNode nary(final SimpleNode node,final URI functionURI) throws VisitorException {  final int nargs=node.jjtGetNumChildren();  final ValueExpressionNode[] args=new ValueExpressionNode[nargs];  for (int i=0; i < nargs; i++) {    final Node argNode=node.jjtGetChild(i);    args[i]=(ValueExpressionNode)argNode.jjtAccept(this,null);  }  if (functionURI.equals(FunctionRegistry.COALESCE)) {    return new FunctionNode(FunctionRegistry.COALESCE,null,args);  } else   if (functionURI.equals(FN.SUBSTRING)) {    return new FunctionNode(FunctionRegistry.SUBSTR,null,args);  } else   if (functionURI.equals(FN.CONCAT)) {    return new FunctionNode(FunctionRegistry.CONCAT,null,args);  } else {    throw new IllegalArgumentException();  }}  }
class C{  public static byte[] acquireImage(Delegator delegator,String dataResourceId) throws GenericEntityException {  byte[] b=null;  GenericValue dataResource=EntityQuery.use(delegator).from("DataResource").where("dataResourceId",dataResourceId).cache().queryOne();  if (dataResource == null)   return b;  b=acquireImage(delegator,dataResource);  return b;}  }
class C{  private void updateZoningMap(UnManagedExportMask mask,List<com.emc.storageos.db.client.model.Initiator> initiators,List<com.emc.storageos.db.client.model.StoragePort> storagePorts){  ZoneInfoMap zoningMap=networkDeviceController.getInitiatorsZoneInfoMap(initiators,storagePorts);  for (  ZoneInfo zoneInfo : zoningMap.values()) {    log.info("Found zone: {} for initiator {} and port {}",zoneInfo.getZoneName(),zoneInfo.getInitiatorWwn(),zoneInfo.getPortWwn());  }  mask.setZoningMap(zoningMap);}  }
class C{  public Sheep(final RPObject object,final Player owner){  super(object,owner);  setRPClass("sheep");  put("type","sheep");  hunger=0;  timingAdjust=Rand.rand(10);  if (owner != null) {    owner.getZone().add(this);    owner.setSheep(this);  }  update();  updateSoundList();  logger.debug("Created Sheep: " + this);}  }
class C{  public DiagramErrors doValidate(){  DiagramErrors errors=new DiagramErrors();  for (  AbstractDBEntityModel entity : model.getChildren()) {    if (entity instanceof TableModel) {      TableModel table=(TableModel)entity;      table.setError("");      validateTable(errors,model,table);    }  }  String dialectName=model.getDialectName();  IDialect dialect=DialectProvider.getDialect(dialectName);  dialect.validate(errors,model);  return errors;}  }
class C{  private static boolean arrayMemberEquals(final Class<?> componentType,final Object o1,final Object o2){  if (componentType.isAnnotation()) {    return annotationArrayMemberEquals((Annotation[])o1,(Annotation[])o2);  }  if (componentType.equals(Byte.TYPE)) {    return Arrays.equals((byte[])o1,(byte[])o2);  }  if (componentType.equals(Short.TYPE)) {    return Arrays.equals((short[])o1,(short[])o2);  }  if (componentType.equals(Integer.TYPE)) {    return Arrays.equals((int[])o1,(int[])o2);  }  if (componentType.equals(Character.TYPE)) {    return Arrays.equals((char[])o1,(char[])o2);  }  if (componentType.equals(Long.TYPE)) {    return Arrays.equals((long[])o1,(long[])o2);  }  if (componentType.equals(Float.TYPE)) {    return Arrays.equals((float[])o1,(float[])o2);  }  if (componentType.equals(Double.TYPE)) {    return Arrays.equals((double[])o1,(double[])o2);  }  if (componentType.equals(Boolean.TYPE)) {    return Arrays.equals((boolean[])o1,(boolean[])o2);  }  return Arrays.equals((Object[])o1,(Object[])o2);}  }
class C{  public VisorQueryResult(List<Object[]> rows,boolean hasMore,long duration){  this.rows=rows;  this.hasMore=hasMore;  this.duration=duration;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  synchronized boolean release(){  d("release()");  if (state == BUSY) {    state=IDLE;    idleSince=System.currentTimeMillis();    return true;  } else {    return false;  }}  }
class C{  public static Number tanh(Number a){  return Math.tanh(a.doubleValue());}  }
class C{  public static double stddevp(double[] a,int lo,int hi){  return Math.sqrt(varp(a,lo,hi));}  }
class C{  public void registerSensor(Sensor s,int i){  if (log.isDebugEnabled()) {    log.debug("Register sensor " + s.getSystemName() + " index "+ i);  }  if ((i < 0) || (i > (inputBits[nodeType])) || (i > MAXSENSORS)) {    log.error("Unexpected sensor ordinal in registerSensor: " + Integer.toString(i));    return;  }  hasActiveSensors=true;  if (sensorArray[i] == null) {    sensorArray[i]=s;    if (lastUsedSensor < i) {      lastUsedSensor=i;    }  } else {    new Exception("mult reg " + i + " S:"+ s.getSystemName()).printStackTrace();    log.warn("multiple registration of same sensor: GS" + Integer.toString((getNodeAddress() * SerialSensorManager.SENSORSPERNODE) + i));  }}  }
class C{  public String optString(int index){  return this.optString(index,"");}  }
class C{  public static String forgotPassword(HttpServletRequest request,HttpServletResponse response){  if ((UtilValidate.isNotEmpty(request.getParameter("GET_PASSWORD_HINT"))) || (UtilValidate.isNotEmpty(request.getParameter("GET_PASSWORD_HINT.x")))) {    return showPasswordHint(request,response);  } else   if ((UtilValidate.isNotEmpty(request.getParameter("EMAIL_PASSWORD"))) || (UtilValidate.isNotEmpty(request.getParameter("EMAIL_PASSWORD.x")))) {    return emailPassword(request,response);  } else {    return "success";  }}  }
class C{  public Annotation[] annotations(){  return _anns;}  }
class C{  @Override public String toString(){  return Base64Variants.getDefaultVariant().encode(_data,true);}  }
class C{  public static byte[] decode(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,DECODABET);}  }
class C{  public void copyTo(@Name("destination") boolean[] destination,@Name("sourcePosition") @Defaulted int sourcePosition,@Name("destinationPosition") @Defaulted int destinationPosition,@Name("length") @Defaulted int length){  throw Util.makeJavaArrayWrapperException();}  }
class C{  public static String humanReadableUnits(long bytes){  return humanReadableUnits(bytes,new DecimalFormat("0.#",DecimalFormatSymbols.getInstance(Locale.ROOT)));}  }
class C{  public ActiveInstances add(Advice advice,int key){  Advice[] newInstances=new Advice[instances.length + 1];  int[] newKeys=new int[keys.length + 1];  int i=0;  while (i < keys.length && keys[i] < key) {    newInstances[i]=instances[i];    newKeys[i]=keys[i];    i++;  }  newInstances[i]=advice;  newKeys[i]=key;  while (i < keys.length) {    newInstances[i + 1]=instances[i];    newKeys[i + 1]=keys[i];    i++;  }  return new ActiveInstances(newInstances,newKeys);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case RegularExpressionPackage.UNICODE_ESCAPE_SEQUENCE__CHARACTER:    return CHARACTER_EDEFAULT == null ? character != null : !CHARACTER_EDEFAULT.equals(character);case RegularExpressionPackage.UNICODE_ESCAPE_SEQUENCE__SEQUENCE:  return SEQUENCE_EDEFAULT == null ? sequence != null : !SEQUENCE_EDEFAULT.equals(sequence);}return super.eIsSet(featureID);}  }
class C{  public static <T extends DataObject>DataObject createInstance(Class<T> clazz,URI id) throws InstantiationException, IllegalAccessException {  T created=clazz.newInstance();  created.setId(id);  created._changed=null;  return created;}  }
class C{  public Object peek(){  try {    return m_map[m_firstFree - 1];  } catch (  ArrayIndexOutOfBoundsException e) {    throw new EmptyStackException();  }}  }
class C{  public static final String concat(String[] strs){  return concat(strs," ");}  }
class C{  public ECPoint multiply(ECPoint p,BigInteger k,PreCompInfo preCompInfo){  WNafPreCompInfo wnafPreCompInfo;  if ((preCompInfo != null) && (preCompInfo instanceof WNafPreCompInfo)) {    wnafPreCompInfo=(WNafPreCompInfo)preCompInfo;  } else {    wnafPreCompInfo=new WNafPreCompInfo();  }  int m=k.bitLength();  byte width;  int reqPreCompLen;  if (m < 13) {    width=2;    reqPreCompLen=1;  } else {    if (m < 41) {      width=3;      reqPreCompLen=2;    } else {      if (m < 121) {        width=4;        reqPreCompLen=4;      } else {        if (m < 337) {          width=5;          reqPreCompLen=8;        } else {          if (m < 897) {            width=6;            reqPreCompLen=16;          } else {            if (m < 2305) {              width=7;              reqPreCompLen=32;            } else {              width=8;              reqPreCompLen=127;            }          }        }      }    }  }  int preCompLen=1;  ECPoint[] preComp=wnafPreCompInfo.getPreComp();  ECPoint twiceP=wnafPreCompInfo.getTwiceP();  if (preComp == null) {    preComp=new ECPoint[]{p};  } else {    preCompLen=preComp.length;  }  if (twiceP == null) {    twiceP=p.twice();  }  if (preCompLen < reqPreCompLen) {    ECPoint[] oldPreComp=preComp;    preComp=new ECPoint[reqPreCompLen];    System.arraycopy(oldPreComp,0,preComp,0,preCompLen);    for (int i=preCompLen; i < reqPreCompLen; i++) {      preComp[i]=twiceP.add(preComp[i - 1]);    }  }  byte[] wnaf=windowNaf(width,k);  int l=wnaf.length;  ECPoint q=p.getCurve().getInfinity();  for (int i=l - 1; i >= 0; i--) {    q=q.twice();    if (wnaf[i] != 0) {      if (wnaf[i] > 0) {        q=q.add(preComp[(wnaf[i] - 1) / 2]);      } else {        q=q.subtract(preComp[(-wnaf[i] - 1) / 2]);      }    }  }  wnafPreCompInfo.setPreComp(preComp);  wnafPreCompInfo.setTwiceP(twiceP);  p.setPreCompInfo(wnafPreCompInfo);  return q;}  }
class C{  public void addArgument(boolean data){  arguments.add(new byte[]{(byte)(data ? 1 : 0)});}  }
class C{  public final double sampleSigma(int n){synchronized (_lock) {    long count=_count.get();    long lastCount=_lastStdCount;    _lastStdCount=count;    double sum=_sum.get();    double lastSum=_lastStdSum;    _lastStdSum=sum;    double sumSquare=_sumSquare;    _sumSquare=0;    if (count == lastCount)     return 0;    double avg=(sum - lastSum) / (count - lastCount);    double part=(count - lastCount) * sumSquare - sum * sum;    if (part < 0)     part=0;    double std=Math.sqrt(part) / (count - lastCount);    return _scale * (avg + n * std);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected void naiveLayout(){  if (nodeLevels == null) {    makeProperHierarchy();  }  for (int i=0, temp=0; i < nodeLevels.length; i++) {    for (int j=0; j < nodeLevels[i].length; j++) {      temp=nodeLevels[i][j];      GraphNode n=m_nodes.get(temp);      n.x=j * m_nodeWidth;      n.y=i * 3 * m_nodeHeight;    }  }}  }
class C{  public String toFormattedString(){  return "CUDA resource view descriptor:\n    " + createString("\n    ");}  }
class C{  private double unstandardized(double[][] samples,int N){  final int k=samples.length;  final double[] combined=new double[N];{    int p=0;    for (    double[] samp : samples) {      Arrays.sort(samp);      System.arraycopy(samp,0,combined,p,samp.length);      p+=samp.length;    }    assert (p == N);  }  Arrays.sort(combined);  int[] m=new int[k];  double[] Ak=new double[k];  for (int j=0; j < N; ) {    final double x=combined[j++];    int lj=1;    while (j < N && combined[j] == x) {      ++j;      ++lj;    }    for (int i=0; i < k; i++) {      final double[] sam=samples[i];      int mi=m[i];      assert (mi >= sam.length || sam[mi] >= x);      int fi=0;      while (mi < sam.length && sam[mi] == x) {        ++mi;        ++fi;      }      if (fi > 0) {        assert (m[i] + fi == mi);        m[i]=mi;      }      double bi=j - .5 * lj;      double v=N * (mi - .5 * fi) - sam.length * bi;      Ak[i]+=lj * v * v / (bi * (N - bi) - .25 * N * lj);    }  }  double A2=0.;  for (int j=0; j < k; j++) {    A2+=Ak[j] / samples[j].length;  }  A2*=(N - 1.) / (N * N);  return A2;}  }
class C{  public HtmlRegularNode simpleNode(String tag,String content){  HtmlTextNode t=new HtmlTextNode(content);  HtmlRegularNode r=new HtmlRegularNode(tag,"");  r.addSubnode(t);  return r;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:44.805 -0500",hash_original_method="B1EC3E2E623AD0C28D4FB442F2195ED7",hash_generated_method="F36128AF3450EEB3C5ECD679FC6680CB") public void anonymize(){  for (int i=theAtts.getLength() - 1; i >= 0; i--) {    if (theAtts.getType(i).equals("ID") || theAtts.getQName(i).equals("name")) {      theAtts.removeAttribute(i);    }  }}  }
class C{  public void keyReleased(KeyEvent e){synchronized (keyLock) {    keysDown.remove(e.getKeyCode());  }}  }
class C{  protected EventSourceImpl(){  super();}  }
class C{  public void executionDetailsEnd(ConcurrentHashMap<Integer,TradeOrder> execDetails){}  }
class C{  public static void merge(Directory srcIndexDir,Directory srcTaxoDir,OrdinalMap map,IndexWriter destIndexWriter,DirectoryTaxonomyWriter destTaxoWriter,FacetsConfig srcConfig) throws IOException {  destTaxoWriter.addTaxonomy(srcTaxoDir,map);  int ordinalMap[]=map.getMap();  DirectoryReader reader=DirectoryReader.open(srcIndexDir);  try {    List<LeafReaderContext> leaves=reader.leaves();    int numReaders=leaves.size();    CodecReader wrappedLeaves[]=new CodecReader[numReaders];    for (int i=0; i < numReaders; i++) {      wrappedLeaves[i]=SlowCodecReaderWrapper.wrap(new OrdinalMappingLeafReader(leaves.get(i).reader(),ordinalMap,srcConfig));    }    destIndexWriter.addIndexes(wrappedLeaves);    destTaxoWriter.commit();    destIndexWriter.commit();  }  finally {    reader.close();  }}  }
class C{  public Version(final String version){  final StringTokenizer tokens=new StringTokenizer(version,".",false);  if (tokens.countTokens() < 1) {    throw new IllegalArgumentException("invalid version string:" + version);  }  try {    m_major=Integer.parseInt(tokens.nextToken());    if (tokens.hasMoreTokens()) {      m_minor=Integer.parseInt(tokens.nextToken());    } else {      m_minor=0;    }    if (tokens.hasMoreTokens()) {      m_point=Integer.parseInt(tokens.nextToken());    } else {      m_point=0;    }    if (tokens.hasMoreTokens()) {      m_micro=Integer.parseInt(tokens.nextToken());    } else {      m_micro=0;    }  } catch (  final NumberFormatException e) {    throw new IllegalArgumentException("invalid version string:" + version);  }}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"popaw");  if (instruction.getOperands().size() != 0) {    throw new InternalTranslationException("Error: Argument instruction is not a popaw instruction (invalid number of operands)");  }  final long baseOffset=instruction.getAddress().toLong() * 0x100;  long offset=baseOffset;  Helpers.generateLoadFromStack(environment,offset,OperandSize.WORD,"edi",instructions);  offset=baseOffset + instructions.size();  Helpers.generateLoadFromStack(environment,offset,OperandSize.WORD,"esi",instructions);  offset=baseOffset + instructions.size();  Helpers.generateLoadFromStack(environment,offset,OperandSize.WORD,"ebp",instructions);  offset=baseOffset + instructions.size();  final String newEsp=environment.getNextVariableString();  Helpers.generateLoadFromStack(environment,offset,OperandSize.WORD,newEsp,instructions);  offset=baseOffset + instructions.size();  Helpers.generateLoadFromStack(environment,offset,OperandSize.WORD,"ebx",instructions);  offset=baseOffset + instructions.size();  Helpers.generateLoadFromStack(environment,offset,OperandSize.WORD,"edx",instructions);  offset=baseOffset + instructions.size();  Helpers.generateLoadFromStack(environment,offset,OperandSize.WORD,"ecx",instructions);  offset=baseOffset + instructions.size();  Helpers.generateLoadFromStack(environment,offset,OperandSize.WORD,"eax",instructions);  offset=baseOffset + instructions.size();  final String maskedEsp=environment.getNextVariableString();  instructions.add(ReilHelpers.createAnd(offset,OperandSize.DWORD,"esp",OperandSize.DWORD,"4294901760",OperandSize.DWORD,maskedEsp));  instructions.add(ReilHelpers.createOr(offset + 1,OperandSize.WORD,newEsp,OperandSize.DWORD,maskedEsp,OperandSize.DWORD,"esp"));}  }
class C{  public void prepareDatabase(){  s_logger.log(Level.FINE,"prepareDatabase",getDirection());  String vendor=getVendor();  String catalog=getCatalog();  String schema=getSchema();  int step=0;  int errors=0;  String sql="";  Statement stmt=setStatement();  sql=s_dbEngine.sqlAdmin_prepareDatabaseForTransfer(step,vendor,catalog,schema);  while (sql != null) {    step++;    if (executeUpdate(stmt,sql,false,false) == null)     errors++;    sql=s_dbEngine.sqlAdmin_prepareDatabaseForTransfer(step,vendor,catalog,schema);  }  releaseStatement(stmt);  s_logger.log(Level.FINE,"databasePrepared",new Object[]{Integer.toString(step - errors),Integer.toString(step)});  s_logger.flush();}  }
class C{  protected void startDocumentInternal() throws SAXException {  if (m_needToCallStartDocument) {    super.startDocumentInternal();    m_saxHandler.startDocument();    m_needToCallStartDocument=false;  }}  }
class C{  @SuppressWarnings("unchecked") public static TagSet parseGetBucketTagging(InputStream responseBody) throws ResponseParseException {  try {    Element root=getXmlRootElement(responseBody);    TagSet tagSet=new TagSet();    List<Element> tagElems=root.getChild("TagSet").getChildren("Tag");    for (    Element tagElem : tagElems) {      String key=null;      String value=null;      if (tagElem.getChild("Key") != null) {        key=tagElem.getChildText("Key");      }      if (tagElem.getChild("Value") != null) {        value=tagElem.getChildText("Value");      }      tagSet.setTag(key,value);    }    return tagSet;  } catch (  Exception e) {    throw new ResponseParseException(e.getMessage(),e);  }}  }
class C{  public static Insanity[] checkSanity(FieldCache cache){  return checkSanity(cache.getCacheEntries());}  }
class C{  private void checkRemoved() throws IllegalStateException {  if (rmvd)   throw removedError();  if (rmvCheck) {    try {      rmvd=atomicView.get(key) == null;    } catch (    IgniteCheckedException e) {      throw U.convertException(e);    }    rmvCheck=false;    if (rmvd) {      ctx.kernalContext().dataStructures().onRemoved(key,this);      throw removedError();    }  }}  }
class C{  public boolean isDynamic(){  return true;}  }
class C{  protected void changeParentId(int newParentId){  m_parentId=newParentId;}  }
class C{  ASTNode findDeclaringNode(IAnnotationBinding instance){  return null;}  }
class C{  @Override protected void prepare(){  if (mDataNotSet)   return;  calcMinMax();  prepareXLegend();  prepareYLegend();  calcFormats();  prepareMatrix();}  }
class C{  @Override protected Instances determineOutputFormat(Instances inputFormat){  m_SelectCols.setUpper(inputFormat.numAttributes() - 1);  m_SelectedAttributes=m_SelectCols.getSelection();  int[][] freqs=new int[inputFormat.numAttributes()][];  for (  int m_SelectedAttribute : m_SelectedAttributes) {    int current=m_SelectedAttribute;    Attribute att=inputFormat.attribute(current);    if ((current != inputFormat.classIndex()) && (att.isNominal())) {      freqs[current]=new int[att.numValues()];    }  }  for (  Instance inst : inputFormat) {    for (    int m_SelectedAttribute : m_SelectedAttributes) {      int current=m_SelectedAttribute;      if ((current != inputFormat.classIndex()) && (inputFormat.attribute(current).isNominal())) {        if (!inst.isMissing(current)) {          freqs[current][(int)inst.value(current)]++;        }      }    }  }  int[] numInfrequentValues=new int[inputFormat.numAttributes()];  for (  int m_SelectedAttribute : m_SelectedAttributes) {    int current=m_SelectedAttribute;    Attribute att=inputFormat.attribute(current);    if ((current != inputFormat.classIndex()) && (att.isNominal())) {      for (int k=0; k < att.numValues(); k++) {        if (m_Debug) {          System.err.println("Attribute: " + att.name() + " Value: "+ att.value(k)+ " Freq.: "+ freqs[current][k]);        }        if (freqs[current][k] < m_MinimumFrequency) {          numInfrequentValues[current]++;        }      }    }  }  m_AttToBeModified=new boolean[inputFormat.numAttributes()];  m_NewValues=new int[inputFormat.numAttributes()][];  for (  int m_SelectedAttribute : m_SelectedAttributes) {    int current=m_SelectedAttribute;    Attribute att=inputFormat.attribute(current);    if ((numInfrequentValues[current] > 1)) {      m_AttToBeModified[current]=true;      int j=1;      m_NewValues[current]=new int[att.numValues()];      for (int k=0; k < att.numValues(); k++) {        if (freqs[current][k] < m_MinimumFrequency) {          m_NewValues[current][k]=0;        } else {          m_NewValues[current][k]=j++;        }      }    }  }  ArrayList<Attribute> atts=new ArrayList<Attribute>();  for (int i=0; i < inputFormat.numAttributes(); i++) {    int current=i;    Attribute att=inputFormat.attribute(current);    if (m_AttToBeModified[i]) {      ArrayList<String> vals=new ArrayList<String>();      StringBuilder sb=new StringBuilder();      vals.add("");      for (int j=0; j < att.numValues(); j++) {        if (m_NewValues[current][j] == 0) {          if (sb.length() != 0) {            sb.append("_or_");          }          sb.append(att.value(j));        } else {          vals.add(att.value(j));        }      }      vals.set(0,sb.toString());      atts.add(new Attribute(att.name() + "_merged_infrequent_values",vals));    } else {      atts.add((Attribute)att.copy());    }  }  Instances data=new Instances(inputFormat.relationName(),atts,0);  data.setClassIndex(inputFormat.classIndex());  return data;}  }
class C{  public yacyVersion(String release,final String host){  this.name=release;  if (release == null || !(release.endsWith(".tar.gz") || release.endsWith(".tar"))) {    throw new RuntimeException("release file name '" + release + "' is not valid, no tar.gz");  }  release=release.substring(0,release.length() - ((release.endsWith(".gz")) ? 7 : 4));  if (release.startsWith("yacy_v")) {    release=release.substring(6);  } else {    throw new RuntimeException("release file name '" + release + "' is not valid, wrong prefix");  }  final String[] comp=release.split("_");  if (comp.length < 2 || comp.length > 3) {    throw new RuntimeException("release file name '" + release + "' is not valid, 3 information parts expected");  }  try {    this.releaseNr=Double.parseDouble(comp[0]);  } catch (  final NumberFormatException e) {    throw new RuntimeException("release file name '" + release + "' is not valid, '"+ comp[0]+ "' should be a double number");  }  this.mainRelease=((int)(getReleaseNr() * 100)) % 10 == 0 || (host != null && host.endsWith("yacy.net"));  this.dateStamp=comp[1];  if (getDateStamp().length() != 8) {    throw new RuntimeException("release file name '" + release + "' is not valid, '"+ comp[1]+ "' should be a 8-digit date string");  }  if (comp.length > 2) {    try {      this.svn=Integer.parseInt(comp[2]);    } catch (    final NumberFormatException e) {      throw new RuntimeException("release file name '" + release + "' is not valid, '"+ comp[2]+ "' should be a integer number");    }  } else {    this.svn=0;  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return DShowTVPlayer.DSCALER_MODE_NAMES;}  }
class C{  public static <T>Class<T> heapClassFor(Class<T> valueType){  return ValueModel.acquire(valueType).heapClass();}  }
class C{  public final void incomingStreamFromFile(File file) throws AdeException {  final InputStream is=AdeFileUtils.openLogFileAsInputStream(file);  final Properties props=new Properties();  final String filename=FilenameUtils.getPath(file.getAbsolutePath()) + file.getName();  final String parseReportFilename=getParseReportFilename(filename);  a_adeInputStream=new AdeInputStreamExt(is,props,m_adeExtProperties,parseReportFilename);  incomingSeparator(new FileSeperator(file.getName()));  incomingObject(a_adeInputStream);}  }
class C{  public String[] fields(){  return this.fields;}  }
class C{  public CoolMaterialDialog(Context context){  super(context);  mContext=context;  this.requestWindowFeature(Window.FEATURE_NO_TITLE);  super.setContentView(R.layout.dialog);  vh=new ViewHolder(this);  primaryCircle=context.getResources().getDrawable(R.drawable.primary_circle);  primaryCircleDark=context.getResources().getDrawable(R.drawable.primary_circle_dark);  primaryCircleLight=context.getResources().getDrawable(R.drawable.primary_circle_light);  secondaryCircle=context.getResources().getDrawable(R.drawable.secondary_circle);  secondaryCircleDark=context.getResources().getDrawable(R.drawable.secondary_circle_dark);  secondaryCircleLight=context.getResources().getDrawable(R.drawable.secondary_circle_light);  ViewUtils.setBackgroundDrawable(vh.primaryButton,primaryCircle);  ViewUtils.setBackgroundDrawable(vh.secondaryButton,secondaryCircle);  prepareClickListener();  prepareTouchListener();}  }
class C{  public void refreshCurrent(){  baseMoveTo(m_iIndex);}  }
class C{  public static Integer toInteger(boolean b){  return b ? Constants.INTEGER_1 : Constants.INTEGER_0;}  }
class C{  public ImageElement(int record_ID,boolean isAttachment){  if (isAttachment)   loadAttachment(record_ID); else   loadFromDB(record_ID);}  }
class C{  public void clearIndex() throws IOException {synchronized (modifyCurrentIndexLock) {    ensureOpen();    final Directory dir=this.spellIndex;    final IndexWriter writer=new IndexWriter(dir,new IndexWriterConfig(null).setOpenMode(OpenMode.CREATE));    writer.close();    swapSearcher(dir);  }}  }
class C{  public Phaser(){  this(null,0);}  }
class C{  public WsdlLoaderGUI_NB(){  initComponents();}  }
class C{  public static org.oscm.internal.vo.VOCategory convertToUp(org.oscm.vo.VOCategory oldVO){  if (oldVO == null) {    return null;  }  org.oscm.internal.vo.VOCategory newVO=new org.oscm.internal.vo.VOCategory();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setCategoryId(oldVO.getCategoryId());  newVO.setMarketplaceId(oldVO.getMarketplaceId());  newVO.setName(oldVO.getName());  return newVO;}  }
class C{  public void mouseWheelMoved(MouseWheelEvent e){  int rot=e.getWheelRotation();  timelineLayer.adjustZoomFromMouseWheel(rot);}  }
class C{  public void test_blank_nodes_are_distinct(){  final boolean storeBlankNodes=false;  final IRawStore store=new SimpleMemoryRawStore();  try {    final String namespace=getName();    final IndexMetadata metadata=getTermsIndexMetadata(namespace);    final BTree ndx=BTree.create(store,metadata);    final BigdataValueFactory vf=BigdataValueFactoryImpl.getInstance(namespace);    final BlobsIndexHelper h=new BlobsIndexHelper();    final IV[] ivs1;{      final BigdataValue[] values;{        final BigdataBNode bnode1=vf.createBNode();        final BigdataBNode bnode2=vf.createBNode("abc");        values=new BigdataValue[]{bnode1,bnode2};      }      final KVO<BigdataValue>[] a=h.generateKVOs(vf.getValueSerializer(),values,values.length);      final byte[][] keys=new byte[a.length][];      final byte[][] vals=new byte[a.length][];      for (int i=0; i < a.length; i++) {        keys[i]=a[i].key;        vals[i]=a[i].val;      }      final boolean readOnly=false;      final WriteTaskStats stats=new WriteTaskStats();      final BlobsWriteProc.BlobsWriteProcConstructor ctor=new BlobsWriteProc.BlobsWriteProcConstructor(readOnly,storeBlankNodes);      ndx.submit(0,values.length,keys,vals,ctor,new BlobsWriteProcResultHandler(a,readOnly,stats));      ivs1=new IV[a.length];      for (int i=0; i < a.length; i++) {        final IV<?,?> iv=a[i].obj.getIV();        assertNotNull(iv);        ivs1[i]=iv;      }    }    final IV[] ivs2;{      final BigdataValue[] values;{        final BigdataBNode bnode1=vf.createBNode();        final BigdataBNode bnode2=vf.createBNode("abc");        values=new BigdataValue[]{bnode1,bnode2};      }      final KVO<BigdataValue>[] a=h.generateKVOs(vf.getValueSerializer(),values,values.length);      final byte[][] keys=new byte[a.length][];      final byte[][] vals=new byte[a.length][];      for (int i=0; i < a.length; i++) {        keys[i]=a[i].key;        vals[i]=a[i].val;      }      final boolean readOnly=false;      final WriteTaskStats stats=new WriteTaskStats();      final BlobsWriteProc.BlobsWriteProcConstructor ctor=new BlobsWriteProc.BlobsWriteProcConstructor(readOnly,storeBlankNodes);      ndx.submit(0,values.length,keys,vals,ctor,new BlobsWriteProcResultHandler(a,readOnly,stats));      ivs2=new IV[a.length];      for (int i=0; i < a.length; i++) {        final IV<?,?> iv=a[i].obj.getIV();        assertNotNull(iv);        ivs2[i]=iv;      }    }{      final IKeyBuilder keyBuilder=h.newKeyBuilder();      assertEquals(ivs1.length,ivs2.length);      for (int i=0; i < ivs1.length; i++) {        assertNotNull(ivs1[i]);        assertNotNull(ivs2[i]);        assertNotSame(ivs1[i],ivs2[i]);        assertNotNull(h.lookup(ndx,(BlobIV<?>)ivs1[i],keyBuilder));        assertNotNull(h.lookup(ndx,(BlobIV<?>)ivs2[i],keyBuilder));      }    }  }  finally {    store.destroy();  }}  }
class C{  public List<Qtree> listQtrees(String volume){  if (log.isDebugEnabled()) {    log.debug("Retrieving qtrees");  }  ClusterQtreeCommands qtreeCommands=new ClusterQtreeCommands(this.server.getNaServer());  return qtreeCommands.listQtree(volume);}  }
class C{  public short[][] inverse(short[][] coef){  try {    short factor;    short[][] inverse;    A=new short[coef.length][2 * coef.length];    if (coef.length != coef[0].length) {      throw new RuntimeException("The matrix is not invertible. Please choose another one!");    }    for (int i=0; i < coef.length; i++) {      for (int j=0; j < coef.length; j++) {        A[i][j]=coef[i][j];      }      for (int j=coef.length; j < 2 * coef.length; j++) {        A[i][j]=0;      }      A[i][i + A.length]=1;    }    computeZerosUnder(true);    for (int i=0; i < A.length; i++) {      factor=GF2Field.invElem(A[i][i]);      for (int j=i; j < 2 * A.length; j++) {        A[i][j]=GF2Field.multElem(A[i][j],factor);      }    }    computeZerosAbove();    inverse=new short[A.length][A.length];    for (int i=0; i < A.length; i++) {      for (int j=A.length; j < 2 * A.length; j++) {        inverse[i][j - A.length]=A[i][j];      }    }    return inverse;  } catch (  RuntimeException rte) {    return null;  }}  }
class C{  public JSONArray put(int index,long value) throws JSONException {  this.put(index,new Long(value));  return this;}  }
class C{  public PDUStringException(String message,StringParameter parameter){  super(message);  this.parameter=parameter;}  }
class C{  protected void initPanel(final SimbrainJTable table){  table.setShowCSVInPopupMenu(true);  table.setShowDeleteColumnPopupMenu(false);  table.setShowInsertColumnPopupMenu(false);  table.setShowEditInPopupMenu(false);  table.setColumnHeadings(Arrays.asList("Token","Vector"));  SimbrainJTableScrollPanel vectorScroller=new SimbrainJTableScrollPanel(table);  table.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);  table.getColumnModel().getColumn(0).setMaxWidth(50);  table.getColumnModel().getColumn(1).setMaxWidth(70);  JPanel toolbarPanel=new JPanel();  toolbarPanel.setLayout(new FlowLayout(FlowLayout.LEFT));  toolbarPanel.add(table.getToolbarCSV(true,false));  toolbarPanel.add(table.getToolbarEditRows());  JPanel mainPanel=new JPanel(new GridBagLayout());  GridBagConstraints gbc=new GridBagConstraints();  gbc.weightx=1.0;  gbc.weighty=1.0;  gbc.fill=GridBagConstraints.BOTH;  mainPanel.add(vectorScroller,gbc);  JLabel vectorInfo=new JLabel(infoText);  vectorInfo.setPreferredSize(new Dimension(150,200));  vectorInfo.setMinimumSize(new Dimension(150,200));  gbc.fill=GridBagConstraints.BOTH;  gbc.weightx=0;  gbc.insets=new Insets(5,10,5,5);  gbc.anchor=GridBagConstraints.CENTER;  mainPanel.add(vectorInfo,gbc);  this.setLayout(new BorderLayout());  add(toolbarPanel,BorderLayout.NORTH);  add(mainPanel,BorderLayout.CENTER);}  }
class C{  public static TokenQueue<HtmlTokenType> makeTokenQueue(FilePosition pos,Reader in,boolean asXml,boolean wantsComments) throws IOException {  CharProducer cp=CharProducer.Factory.create(in,pos);  HtmlLexer lexer=new HtmlLexer(cp);  lexer.setTreatedAsXml(asXml);  return new TokenQueue<HtmlTokenType>(lexer,pos.source(),wantsComments ? Criterion.Factory.<Token<HtmlTokenType>>optimist() : SKIP_COMMENTS);}  }
class C{  protected void bflash_ws() throws SAXException {  if (mBuffIdx >= 0) {    mHandCont.characters(mBuff,0,(mBuffIdx + 1));    mBuffIdx=-1;  }}  }
class C{  private static String[] generateTestCaseReport(String curGroupName,Object key,J2DAnalyzer.SingleResultSetHolder baseSRSH,J2DAnalyzer.SingleResultSetHolder targetSRSH,Map testCaseResultCount,Map testCaseBaseResult,Map testCaseTargetResult){  int numBetterTestCases=0;  int numWorseTestCases=0;  int numSameTestCases=0;  StringBuffer tcStartTags=new StringBuffer();  tcStartTags.append("<tr>");  tcStartTags.append("<td bgcolor=\"#CCCCFF\" align=\"center\">" + "<b>Num Units</b></td>");  tcStartTags.append("<td bgcolor=\"#CCCCFF\" align=\"center\">" + "<b>Options</b></td>");  tcStartTags.append("<td bgcolor=\"#CCCCFF\" align=\"center\"><b>" + baseBuild + " Score</b></td>");  tcStartTags.append("<td bgcolor=\"#CCCCFF\" align=\"center\"><b>" + targetBuild + " Score</b></td>");  tcStartTags.append("<td bgcolor=\"#CCCCFF\" align=\"center\">" + "<b>% Speedup</b></td>");  tcStartTags.append("</tr>");  StringBuffer worseTestcaseResultTags=new StringBuffer(tcStartTags.toString());  StringBuffer sameTestcaseResultTags=new StringBuffer(tcStartTags.toString());  StringBuffer betterTestcaseResultTags=new StringBuffer(tcStartTags.toString());  Object curTestCountObj=testCaseResultCount.get(key.toString());  int curTestCount=0;  if (curTestCountObj != null) {    curTestCount=((Integer)curTestCountObj).intValue();  }  String fileName=key.toString().replace('.','_');  fileName=fileName.toLowerCase() + ".html";  File testcaseReportFile=new File(resultsDir + File.separator + "testcases",fileName);  PrintWriter writer=openFile(testcaseReportFile.getAbsolutePath(),HTMLGEN_FILE_NEW);  String header=getHeader(baseSRSH,targetSRSH,"J2DBench - " + key.toString(),"../System_Properties.html");  writer.println(header);  writer.flush();  double totalBaseScore=0;  double totalTargetScore=0;  for (int i=0; i < curTestCount; i++) {    J2DAnalyzer.ResultHolder baseTCR=(J2DAnalyzer.ResultHolder)testCaseBaseResult.get(key.toString() + "_" + i);    J2DAnalyzer.ResultHolder targetTCR=(J2DAnalyzer.ResultHolder)testCaseTargetResult.get(key.toString() + "_" + i);    double baseScore=baseTCR.getScore();    double targetScore=targetTCR.getScore();    StringBuffer tcTagBuffer=new StringBuffer();    int selColorIndex=selectColor(baseScore,targetScore);    tcTagBuffer.append("<tr bgcolor=\"" + color[selColorIndex] + "\">");    tcTagBuffer.append("<td align=\"center\">" + baseTCR.getUnits() + "</td>");    tcTagBuffer.append("<td valign=\"center\">");    Map map=baseTCR.getOptions();    Iterator iter=map.keySet().iterator();    Object subKey=null, subValue=null;    tcTagBuffer.append("<ul>");    while (iter.hasNext()) {      subKey=iter.next().toString();      subValue=map.get(subKey).toString();      tcTagBuffer.append("<li>" + subKey + " = "+ subValue+ "</li>");    }    tcTagBuffer.append("</ul></td>");    tcTagBuffer.append("<td valign=\"center\" align=\"center\">" + decimalFormat.format(baseTCR.getScore()) + "</td>");    tcTagBuffer.append("<td valign=\"center\" align=\"center\">" + decimalFormat.format(targetTCR.getScore()) + "</td>");    tcTagBuffer.append("<td valign=\"center\" align=\"center\">" + decimalFormat.format(calculateSpeedupPercentage(baseTCR.getScore(),targetTCR.getScore())) + "</td>");    tcTagBuffer.append("</tr>");    totalBaseScore=totalBaseScore + baseTCR.getScore();    totalTargetScore=totalTargetScore + targetTCR.getScore();switch (selColorIndex) {case 0:      betterTestcaseResultTags.append(tcTagBuffer.toString());    numBetterTestCases++;  break;case 1:sameTestcaseResultTags.append(tcTagBuffer.toString());numSameTestCases++;break;case 2:worseTestcaseResultTags.append(tcTagBuffer.toString());numWorseTestCases++;break;}}String performanceTable=getPerformanceTableForTestcase(key.toString(),numBetterTestCases,numSameTestCases,numWorseTestCases);writer.println(performanceTable);writer.flush();writer.println("<hr size=\"1\">");writer.println("<A NAME=\"details\"></A><H3>Details:</H3>");writer.println("<table cellspacing=\"0\" " + "cellpadding=\"3\" border=\"1\" width=\"80%\">");writer.println("<tr><td colspan=\"5\" " + "valign=\"center\" bgcolor=\"#f0f0f0\">" + "<a name=\"better\"></a><font size=\"+1\">" + key.toString() + " Tests which run BETTER on target</font></td></tr>");writer.println(betterTestcaseResultTags.toString());writer.flush();writer.println("<tr><td colspan=\"5\">&nbsp;<br>&nbsp;</td></tr>");writer.println("<tr><td colspan=\"5\" " + "valign=\"center\" bgcolor=\"#f0f0f0\">" + "<a name=\"same\"></a><font size=\"+1\">" + key.toString() + " Tests which run SAME on target</font></td></tr>");writer.println(sameTestcaseResultTags.toString());writer.flush();writer.println("<tr><td colspan=\"5\">&nbsp;<br>&nbsp;</td></tr>");writer.println("<tr><td colspan=\"5\" " + "valign=\"center\" bgcolor=\"#f0f0f0\">" + "<a name=\"worse\"></a><font size=\"+1\">" + key.toString() + " Tests which run WORSE on target</font></td></tr>");writer.println(worseTestcaseResultTags.toString());writer.flush();writer.println("</table>");writer.println(getFooter());writer.flush();writer.close();String statusTable=getStatusTableForSummary(curGroupName,key.toString(),numBetterTestCases,numSameTestCases,numWorseTestCases);String testResultsTable=getTestResultsTableForSummary(key.toString(),totalBaseScore,totalTargetScore);return new String[]{statusTable,testResultsTable};}  }
class C{  protected File ensureDirectoryExists(final Logger defaultLog,final Logger shopLog,final File shopDir,final Shop shop,final String dirname) throws IOException {  final File dir=new File(shopDir,dirname);  if (!dir.exists()) {    defaultLog.info("Proactively creating '{}' sub directory for shop {}",dir.getAbsolutePath(),shop.getCode());    shopLog.info("Proactively creating '{}' sub directory for shop {}",dir.getAbsolutePath(),shop.getCode());    if (!dir.mkdirs()) {      throw new IOException("Failed to create '" + dir.getAbsolutePath() + "' sub directory for shop "+ shop.getCode());    }  }  return dir;}  }
class C{  public NodeIterator nodeset() throws javax.xml.transform.TransformerException {  error(XPATHErrorResources.ER_CANT_CONVERT_TO_NODELIST,new Object[]{getTypeString()});  return null;}  }
class C{  public static double v3Dot(double[] a,double[] b){  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];}  }
class C{  public AffiliationsExtension(String nodeId,List<Affiliation> affiliationList){  super(PubSubElementType.AFFILIATIONS,nodeId);  if (affiliationList != null)   items=affiliationList;}  }
class C{  @SuppressWarnings("unchecked") public boolean removeEdge(G graph,E edge){  Tuple<SparseVertex,SparseVertex> vertices=(Tuple<SparseVertex,SparseVertex>)edge.getVertices();  if (vertices == null) {    return false;  } else {    SparseVertex v1=vertices.getFirst();    SparseVertex v2=vertices.getSecond();    boolean removedv1=v1.removeEdge(edge);    boolean removedv2=v2.removeEdge(edge);    edge.setVertices(null);    boolean removed=graph.removeEdge(edge);    if (removedv1 && removedv2 && removed)     return true; else     throw new RuntimeException("Failed to remove edge from graph. Consitency no more assured!");  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.CODE_LANGS___ANONYMOUS_CODE_LANGS_11:    getAnonymous_codeLangs_1_1().clear();  return;}super.eUnset(featureID);}  }
class C{  protected void sequence_TypeInfo(ISerializationContext context,TypeInfo semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static String truncate(String text,int maxWidth){  final int maxWidthSubtrahend=3;  String truncatedText=text;  if (text != null && text.length() > maxWidth) {    truncatedText=new StringBuilder(text.substring(0,(maxWidth - maxWidthSubtrahend))).append("...").toString();  }  return truncatedText;}  }
class C{  public void start(){  Intent intent=new Intent(context,ModelSelectionActivity.class);  context.startActivity(intent);}  }
class C{  protected boolean saveChanges(boolean showCancel){  int button;  boolean result;  if (!isPanelSelected()) {    return true;  }  result=!getCurrentPanel().isChanged();  if (getCurrentPanel().isChanged()) {    try {      if (showCancel) {        button=JOptionPane.showConfirmDialog(this,"The file is not saved - Do you want to save it?","Changed",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE);      } else {        button=JOptionPane.showConfirmDialog(this,"The file is not saved - Do you want to save it?","Changed",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);      }    } catch (    Exception e) {      button=JOptionPane.CANCEL_OPTION;    }switch (button) {case JOptionPane.YES_OPTION:      saveFile();    result=!getCurrentPanel().isChanged();  break;case JOptionPane.NO_OPTION:result=true;break;case JOptionPane.CANCEL_OPTION:result=false;break;}}return result;}  }
class C{  private void manipulateDynamicClientResponse(Map<String,String> result){  String responseStatus;  if (result != null) {    responseStatus=result.get(Constants.STATUS);    if (Constants.Status.CREATED.equals(responseStatus)) {      String dynamicClientResponse=result.get(Constants.RESPONSE);      if (dynamicClientResponse != null) {        Preference.putString(context,getResources().getString(R.string.shared_pref_client_credentials),dynamicClientResponse);        startAuthentication();      }    } else {      CommonDialogUtils.stopProgressDialog(progressDialog);      showEnrollementFailedErrorMessage();    }  } else {    CommonDialogUtils.stopProgressDialog(progressDialog);    showEnrollementFailedErrorMessage();  }}  }
class C{  public Writer(){  output=new ByteArrayOutputStream();}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public void testDrainToNull(){  LinkedBlockingQueue q=populatedQueue(SIZE);  try {    q.drainTo(null);    shouldThrow();  } catch (  NullPointerException success) {  }}  }
class C{  public Object visit(ASTGTNode node,Object data){  return showNode(node,data);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected void installKeyboardActions(){  InputMap keyMap=(InputMap)DefaultLookup.get(header,this,"TableHeader.ancestorInputMap");  SwingUtilities.replaceUIInputMap(header,JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT,keyMap);  LazyActionMap.installLazyActionMap(header,BasicTableHeaderUI.class,"TableHeader.actionMap");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:24.316 -0500",hash_original_method="176D77E232A76459A0F514B7F2AA65DB",hash_generated_method="50F85749A649DF96EF9573CA722BDC1F") @Override public boolean isReadOnly(){  return (mSetter == null && mField == null);}  }
class C{  @Override public void onCreate(){  mAlarmManager=(AlarmManager)getSystemService(Context.ALARM_SERVICE);  mSharedPreferences=PreferenceManager.getDefaultSharedPreferences(this);  mCaptureIntent=PendingIntent.getService(this,0,new Intent(this,CaptureService.class).setAction(ACTION_CAPTURE),0);}  }
class C{  public OracleRDBMSClient(Properties props){  this();  if (props != null) {    String sharedMetadataCacheProp=props.getProperty("oracle.soda.sharedMetadataCache");    String localMetadataCacheProp=props.getProperty("oracle.soda.localMetadataCache");    if (sharedMetadataCacheProp != null && sharedMetadataCacheProp.equalsIgnoreCase("true")) {      cacheOfDescriptorCaches=new CacheOfDescriptorCaches(100,100);    }    if (localMetadataCacheProp != null && localMetadataCacheProp.equalsIgnoreCase("true")) {      localMetadataCache=true;    }  }}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public ArrowPainter(@NotNull ColorProvider colorHolder,@NotNull Computable<Integer> widthProvider,@NotNull Computable<Integer> heightProvider){  myColorHolder=colorHolder;  myWidthProvider=widthProvider;  myHeightProvider=heightProvider;}  }
class C{  String computeWKT(XmlDocument document){  if ((document == null) || (document.getChildrenCount() <= 0)) {    logger.warn("Null or empty document");    return null;  }  DrbSequence places_sequence=new Query("(*/place[xs:int(@place_rank) < 20]" + "[@geotext]" + "[fn:not(fn:matches(@geotext, 'POINT.*'))])[1]").evaluate(document);  if ((places_sequence == null) || (places_sequence.getLength() <= 0)) {    return null;  }  DrbNode place_node=(DrbNode)places_sequence.getItem(0);  if (boundingBoxFlag) {    DrbAttribute boundingbox_value=place_node.getAttribute("boundingbox");    if (boundingbox_value == null) {      logger.warn("Returned place \"" + place_node.getAttribute("display_name") + "\" has no \""+ "boundingbox\" attribute");      return null;    }    StringTokenizer boundingbox_tokenizer=new StringTokenizer("" + boundingbox_value.getValue(),",");    double min_lat, max_lat, min_lon, max_lon;    try {      min_lat=Double.parseDouble(boundingbox_tokenizer.nextToken());      max_lat=Double.parseDouble(boundingbox_tokenizer.nextToken());      min_lon=Double.parseDouble(boundingbox_tokenizer.nextToken());      max_lon=Double.parseDouble(boundingbox_tokenizer.nextToken());    } catch (    Exception exception) {      logger.warn("Error while parsing bouding box");      return null;    }    return "POLYGON ((" + min_lon + " "+ max_lat+ ", "+ max_lon+ " "+ (max_lat + EPSILON_DEG)+ ", "+ (max_lon + EPSILON_DEG)+ " "+ min_lat+ ", "+ (min_lon - EPSILON_DEG)+ " "+ (min_lat - EPSILON_DEG)+ ", "+ min_lon+ " "+ max_lat+ "))";  } else {    DrbAttribute geotext_attribute=place_node.getAttribute("geotext");    if (geotext_attribute == null) {      logger.warn("Returned place \"" + place_node.getAttribute("display_name") + "\" has no \""+ "geotext\" attribute");      return null;    }    String geotext=geotext_attribute.getValue().toString();    if (logger.isDebugEnabled()) {      logger.debug("Retrieved footprint:" + geotext);    }    if (geotext != null) {      try {        Geometry boundaries=new WKTReader().read(geotext);        boundaries=simplifyGeometry(boundaries,this.maxPointNumber);        geotext=new WKTWriter().write(boundaries);      } catch (      ParseException exception) {        logger.error("Error while parsing WKT: \"" + geotext + "\"",exception);        return null;      }      return geotext;    }    if (logger.isDebugEnabled()) {      logger.warn("No boundaries found");    }    return null;  }}  }
class C{  public Mark selectLast(TextNode node){  AttributedCharacterIterator aci;  aci=node.getAttributedCharacterIterator();  if (aci == null)   return null;  TextHit textHit=new TextHit(aci.getEndIndex() - 1,false);  return new BasicTextPainter.BasicMark(node,textHit);}  }
class C{  private static void addXForwardedForHeader(final HashMap<String,Object> conProp,final RequestHeader requestHeader){  if (sb.getConfigBool("proxy.sendXForwardedForHeader",true)) {    requestHeader.put(HeaderFramework.X_FORWARDED_FOR,(String)conProp.get(HeaderFramework.CONNECTION_PROP_CLIENTIP));  }}  }
class C{  public String[] types(){  return types;}  }
class C{  public synchronized Future<V> submit(Callable<V> task) throws RejectedExecutionException {  return pool.submit(task);}  }
class C{  public void sendMessage(byte[] data,int len) throws IOException {  out.write(U.intToBytes(len));  out.write(data,0,len);}  }
class C{  public void show(String pMessage,boolean pPause){  mMessage=pMessage;  mPause=pPause;  mShow=true;  javax.swing.SwingUtilities.invokeLater(this);  if (mPause) {synchronized (self) {      new jmri.util.WaitHandler(this);    }  }}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  public static boolean canShow(){  return true;}  }
class C{  public static void print(String s){  System.out.print(s);}  }
class C{  protected void updateGroupSources(List<Group> groups,ResultSet sourcesResult,List<String> batchList) throws SQLException, AdeException {  if (!sourcesResult.isBeforeFirst())   return;  Collections.sort(groups,new GroupComparator());  final List<Pattern> patternList=getPatternList(groups);  List<Short> unassignedSourcesId=new ArrayList<Short>();  while (sourcesResult.next()) {    boolean foundMatch=false;    final String sourceName=sourcesResult.getString("SOURCE_ID");    final String sourceNameUpper=sourceName.toUpperCase();    final short sourceInternalId=sourcesResult.getShort("SOURCE_INTERNAL_ID");    for (int i=0; i < patternList.size(); i++) {      if (patternList.get(i).matcher(sourceNameUpper).matches()) {        foundMatch=true;        batchList.add("UPDATE " + SOURCES_TABLE + " SET "+ "ANALYSIS_GROUP="+ groups.get(i).getUid()+ " WHERE SOURCE_INTERNAL_ID="+ sourceInternalId);        setSourcesGroup(sourceName,groups.get(i).getName());        break;      }    }    if (!foundMatch) {      unassignedSourcesId.add(sourceInternalId);      setSourcesGroup(sourceName,UNASSIGNED_GROUP);    }  }  if (!unassignedSourcesId.isEmpty()) {    unassignedGroupId=insertUnassignedGroup();    for (    short sourceId : unassignedSourcesId) {      batchList.add("UPDATE " + SOURCES_TABLE + " SET "+ "ANALYSIS_GROUP="+ unassignedGroupId+ " WHERE SOURCE_INTERNAL_ID="+ sourceId);    }  }}  }
class C{  private boolean parseInline(){  boolean res;  char c=peek();  if (c == '\0') {    return false;  }switch (c) {case '\n':    res=parseNewline();  break;case '\\':res=parseBackslash();break;case '`':res=parseBackticks();break;case '[':res=parseOpenBracket();break;case '!':res=parseBang();break;case ']':res=parseCloseBracket();break;case '<':res=parseAutolink() || parseHtmlInline();break;case '&':res=parseEntity();break;default :boolean isDelimiter=delimiterCharacters.get(c);if (isDelimiter) {DelimiterProcessor delimiterProcessor=delimiterProcessors.get(c);res=parseDelimiters(delimiterProcessor,c);} else {res=parseString();}break;}if (!res) {index++;String literal=String.valueOf(c);appendText(literal);}return true;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:45.983 -0500",hash_original_method="CFEE2F1AF91E2D86FFF14B5518822AC3",hash_generated_method="D5E254F3A93CF7A3613CF09D7CC6B653") private Pair<Boolean,Integer> parseNonNegativeInt(String name,String stringValue){  int value;  Pair<Boolean,Integer> retVal;  try {    value=Integer.parseInt(stringValue);    retVal=new Pair<Boolean,Integer>(validateNonNegativeInt(name,value),value);  } catch (  NumberFormatException e) {    Log.e(LOG_TAG,name + " bad value: " + stringValue,e);    retVal=new Pair<Boolean,Integer>(false,0);  }  if (DBG)   log("parseNonNetativeInt: " + name + ", "+ stringValue+ ", "+ retVal.first+ ", "+ retVal.second);  return retVal;}  }
class C{  private BasicTextImage(TerminalSize size,TextCharacter[][] toCopy,TextCharacter initialContent){  if (size == null || toCopy == null || initialContent == null) {    throw new IllegalArgumentException("Cannot create BasicTextImage with null " + (size == null ? "size" : (toCopy == null ? "toCopy" : "filler")));  }  this.size=size;  int rows=size.getRows();  int columns=size.getColumns();  buffer=new TextCharacter[rows][];  for (int y=0; y < rows; y++) {    buffer[y]=new TextCharacter[columns];    for (int x=0; x < columns; x++) {      if (y < toCopy.length && x < toCopy[y].length) {        buffer[y][x]=toCopy[y][x];      } else {        buffer[y][x]=initialContent;      }    }  }}  }
class C{  public IllegalArgumentException(@Nullable String s){  super(s);}  }
class C{  public static void show(final Window parent){  final CFirstStartDialog dialog=new CFirstStartDialog(parent);  dialog.setVisible(true);}  }
class C{  public boolean endsWith(Name n){  if (n == null) {    return false;  }  int len1=rdns.size();  int len2=n.size();  return (len1 >= len2 && matches(len1 - len2,len1,n));}  }
class C{  public KeyInfoElement(Element keyInfo){  this.m_KeyInfoEl=keyInfo;  List<Element> encKeys=DomUtilities.findChildren(keyInfo,"EncryptedKey",URI_NS_ENC,true);  if (0 < encKeys.size()) {    this.m_EncryptedKeyElement=new EncryptedKeyElement(encKeys.get(0));    LOG.debug("EncryptedKey in KeyInfo-Element detected.");  }}  }
class C{  public Href with(final Object key,final Object value){  final SortedMap<String,List<String>> map=new TreeMap<>(this.params);  if (!map.containsKey(key.toString())) {    map.put(key.toString(),new LinkedList<String>());  }  map.get(key.toString()).add(value.toString());  return new Href(this.uri,map);}  }
class C{  protected LiteralImpl(){  super();}  }
class C{  public NewVariableResolver(VariableResolver original){  this.original=original;  FacesContext.getCurrentInstance().getExternalContext().getApplicationMap().put("newVR",this);}  }
class C{  public int size(){  return size;}  }
class C{  public void back(){  if (--pos == -1) {    pos=0;  }}  }
class C{  public static boolean isOdd(int value){  return value % 2 != 0;}  }
class C{  public boolean isConsideredSuccessful(){  return consideredSuccessful;}  }
class C{  public WumpusCave(int caveXDimension,int caveYDimension){  this(caveXDimension,caveYDimension,defaultAllowedPositions(caveXDimension,caveYDimension));}  }
class C{  public static DateTimeFormatter weekyear(){  return Constants.we;}  }
class C{  public IThumbnailSetRequest buildRequest(final List<Option> options){  return new ThumbnailSetRequest(getRequestUrl(),getClient(),options);}  }
class C{  public void swing(float speed,float degree,boolean invert,float offset,float weight,float swing,float swingAmount){  this.rotateAngleY+=this.calculateRotation(speed,degree,invert,offset,weight,swing,swingAmount);}  }
class C{  public void addWarning(Warning w){  warnings.add(w);}  }
class C{  public void addDebugger(final IDebugger debugger){  debuggers.add(Preconditions.checkNotNull(debugger,"IE00195: Debugger argument can not be null"));  for (  final DebuggerProviderListener listener : m_listeners) {    try {      listener.debuggerAdded(this,debugger);    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }}  }
class C{  public MirroredRegionParser(@NonNull Match match,Element element) throws RegionException {  RegionModule module=Cardinal.getModule(RegionModule.class);  for (  Element subRegionElement : element.getChildren()) {    region=module.getRegion(match,subRegionElement);    if (region != null) {      break;    }  }  if (region == null && element.getAttribute("region") != null) {    region=module.getRegionById(match,element.getAttributeValue("region"));  }  if (region == null) {    throw new MissingRegionPropertyException("No sub-region specified for mirrored region",element);  }  String originValue=element.getAttributeValue("origin");  if (originValue == null) {    origin=new Vector(0,0,0);  } else {    origin=Numbers.getVector(originValue);    if (origin == null) {      throw new InvalidRegionAttributeException("origin",element);    }  }  String normalValue=element.getAttributeValue("normal");  if (normalValue == null) {    throw new MissingRegionAttributeException("normal",element);  }  normal=Numbers.getVector(normalValue);  if (normal == null) {    throw new InvalidRegionAttributeException("normal",element);  }}  }
class C{  public AsyncResult(Object uo,Object r,Throwable ex){  userObj=uo;  result=r;  exception=ex;}  }
class C{  public void onLibraryTestResult(OneSheeldDevice device,boolean isPassed){}  }
class C{  public void indexAll(JavaProject project){  try {    IClasspathEntry[] entries=project.getResolvedClasspath();    for (int i=0; i < entries.length; i++) {      IClasspathEntry entry=entries[i];      if (entry.getEntryKind() == IClasspathEntry.CPE_LIBRARY)       indexLibrary(entry.getPath(),((ClasspathEntry)entry).getLibraryIndexLocation());    }  } catch (  JavaModelException e) {  }  IndexRequest request=new IndexAllProject(project,this);  if (!isJobWaiting(request))   request(request);}  }
class C{  @Deprecated public BitmapDrawable(String filepath){  this(new BitmapState(BitmapFactory.decodeFile(filepath)),null);  if (mBitmap == null) {    android.util.Log.w("BitmapDrawable","BitmapDrawable cannot decode " + filepath);  }}  }
class C{  public static double tan(double a){  return StrictMath.tan(a);}  }
class C{  private void invalidByte(int position,int count,int c) throws UTFDataFormatException {  throw new UTFDataFormatException(Localizer.getMessage("jsp.error.xml.invalidByte",Integer.toString(position),Integer.toString(count)));}  }
class C{  public static void appendPaddedInteger(StringBuffer buf,long value,int size){  int intValue=(int)value;  if (intValue == value) {    appendPaddedInteger(buf,intValue,size);  } else   if (size <= 19) {    buf.append(Long.toString(value));  } else {    if (value < 0) {      buf.append('-');      if (value != Long.MIN_VALUE) {        value=-value;      } else {        for (; size > 19; size--) {          buf.append('0');        }        buf.append("9223372036854775808");        return;      }    }    int digits=(int)(Math.log(value) / LOG_10) + 1;    for (; size > digits; size--) {      buf.append('0');    }    buf.append(Long.toString(value));  }}  }
class C{  private String removeTrailingPeriod(String val){  if (val.charAt(val.length() - 1) == '.') {    val=val.substring(0,val.length() - 1);  }  return val;}  }
class C{  private StatementPatternNode verifyGraphPattern(final AbstractTripleStore database,final GroupNodeBase<IGroupMemberNode> group,final ServiceParams params){  final Iterator<Map.Entry<URI,List<TermNode>>> it=params.iterator();  while (it.hasNext()) {    final URI param=it.next().getKey();    if (SliceParams.OFFSET.equals(param)) {      if (params.getAsLong(param,null) == null) {        throw new RuntimeException("must provide a value for: " + param);      }    } else     if (SliceParams.LIMIT.equals(param)) {      if (params.getAsInt(param,null) == null) {        throw new RuntimeException("must provide a value for: " + param);      }    } else     if (SliceParams.RANGE.equals(param)) {      if (params.getAsVar(param,null) == null) {        throw new RuntimeException("must provide a variable for: " + param);      }    } else {      throw new RuntimeException("unrecognized param: " + param);    }  }  StatementPatternNode sp=null;  for (  IGroupMemberNode node : group) {    if (node instanceof FilterNode) {      continue;    }    if (!(node instanceof StatementPatternNode)) {      throw new RuntimeException("only statement patterns allowed");    }    final StatementPatternNode tmp=(StatementPatternNode)node;    if (tmp.s().isConstant() && BD.SERVICE_PARAM.equals(tmp.s().getValue())) {      continue;    }    if (sp != null) {      throw new RuntimeException("group must contain a single statement pattern");    }    sp=tmp;  }  return sp;}  }
class C{  protected void fireClicked(){}  }
class C{  public final String join(@Nullable Object first,@Nullable Object second,Object... rest){  return join(iterable(first,second,rest));}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.493 -0400",hash_original_method="E5F31B8C7E0E55836854007EF229F8F0",hash_generated_method="103BFA0B31BCD8439A0361135A33060F") public boolean accept(File file){  return true;}  }
class C{  private void generateAndSignSignature(String httpsURL,String requestMethod,OAuthParameters oparams){  OAuthParameters sbsParams=new OAuthParameters();  sbsParams.putAll(oparams.getBaseParameters());  sbsParams.removeBaseParameter(REALM);  String baseString;  baseString=generateSignatureBaseString(httpsURL,requestMethod,sbsParams.getBaseParameters());  this.setSignatureBaseString(baseString);  String signature;  signature=sign(baseString,privateKey);  oparams.addParameter(OAUTH_SIGNATURE,signature);}  }
class C{  private JsonScope peek(){  return stack.get(stack.size() - 1);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:41.554 -0500",hash_original_method="1CEB56F49B83563E5DD5C049B4907F1C",hash_generated_method="EA016316EFA6DA7F4832ED4A08DBEDBE") public static int encode(byte[] data,OutputStream out) throws IOException {  return encoder.encode(data,0,data.length,out);}  }
class C{  protected void sparseToDense(){  if (!isSparse) {    return;  }  coordinates=new float[dimension];  for (int i=0; i < dimension; ++i) {    coordinates[i]=0;  }  for (int i=0; i < sparseOffsets.length; ++i) {    coordinates[Math.abs(sparseOffsets[i]) - 1]=Math.signum(sparseOffsets[i]);  }  isSparse=false;}  }
class C{  protected static void println(String msg){  System.out.println(msg);}  }
class C{  protected Document doParse(LagartoParser lagartoParser){  lagartoParser.setConfig(config);  LagartoDOMBuilderTagVisitor domBuilderTagVisitor=new LagartoDOMBuilderTagVisitor(this);  lagartoParser.parse(domBuilderTagVisitor);  return domBuilderTagVisitor.getDocument();}  }
class C{  protected void clearEvents(){}  }
class C{  public Token authorize() throws CodenvyAuthenticationException {  return authorize(credentials);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name: ");  result.append(name);  result.append(", expression: ");  result.append(expression);  result.append(')');  return result.toString();}  }
class C{  void save(){  stateSave0=state0;  stateSave1=state1;}  }
class C{  private void createBrushedMetalBackground(){  final Rectangle rect=getClientArea();  final int width=Math.max(1,rect.width);  final int height=Math.max(1,rect.width);  final int[] inPixels=new int[width];  this.imageData=new ImageData(width,height,0x20,this.palette);  this.randomNumbers=new Random(0);  final int a=this.color & 0xff000000;  final int r=this.color >> 16 & 0xff;  final int g=this.color >> 8 & 0xff;  final int b=this.color & 0xff;  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++) {      int tr=r;      int tg=g;      int tb=b;      if (this.shine != 0) {        final int f=(int)(255 * this.shine * Math.sin((double)x / width * Math.PI));        tr+=f;        tg+=f;        tb+=f;      }      if (this.monochrome) {        final int n=(int)(255 * (2 * this.randomNumbers.nextFloat() - 1) * this.amount);        inPixels[x]=a | this.clamp(tr + n) << 16 | this.clamp(tg + n) << 8 | this.clamp(tb + n);      } else {        inPixels[x]=a | this.random(tr) << 16 | this.random(tg) << 8 | this.random(tb);      }    }    if (this.radius != 0) {      setDataElements(0,y,width,1,this.blur(inPixels,width,this.radius));    } else {      setDataElements(0,y,width,1,inPixels);    }  }}  }
class C{  static double svd_pythag(double a,double b){  double p, r, s, t, u, temp;  p=svd_dmax(Math.abs(a),Math.abs(b));  if (p != 0.0) {    temp=svd_dmin(Math.abs(a),Math.abs(b)) / p;    r=temp * temp;    t=4.0 + r;    while (t != 4.0) {      s=r / t;      u=1.0 + 2.0 * s;      p*=u;      temp=s / u;      r*=temp * temp;      t=4.0 + r;    }  }  return p;}  }
class C{  public DefaultAttributeCondition(String localName,String namespaceURI,boolean specified,String value){  super(value);  this.localName=localName;  this.namespaceURI=namespaceURI;  this.specified=specified;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void adjustByteCounts(){  if (byteCount1 > 0x1fffffffffffffffL) {    byteCount2+=(byteCount1 >>> 61);    byteCount1&=0x1fffffffffffffffL;  }}  }
class C{  public void treeDidChange(){  revalidate();  repaint();}  }
class C{  public boolean isMandatory(){  return getProcessPara().isMandatory();}  }
class C{  private void print(Enumeration<GraphNode> e){  while (e.hasMoreElements()) {    SpaceEffGraphNode bb=(SpaceEffGraphNode)e.nextElement();    bb.printExtended();  }}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'WIFILOCK_MANAGER' ("+ "'_id' INTEGER PRIMARY KEY ,"+ "'SSID_NAME' TEXT,"+ "'LOCK_NAME' TEXT,"+ "'IS_ON' INTEGER);");}  }
class C{  public boolean addGpsTags(double latitude,double longitude){  ExifTag latTag=buildTag(TAG_GPS_LATITUDE,toExifLatLong(latitude));  ExifTag longTag=buildTag(TAG_GPS_LONGITUDE,toExifLatLong(longitude));  ExifTag latRefTag=buildTag(TAG_GPS_LATITUDE_REF,latitude >= 0 ? ExifInterface.GpsLatitudeRef.NORTH : ExifInterface.GpsLatitudeRef.SOUTH);  ExifTag longRefTag=buildTag(TAG_GPS_LONGITUDE_REF,longitude >= 0 ? ExifInterface.GpsLongitudeRef.EAST : ExifInterface.GpsLongitudeRef.WEST);  if (latTag == null || longTag == null || latRefTag == null || longRefTag == null) {    return false;  }  setTag(latTag);  setTag(longTag);  setTag(latRefTag);  setTag(longRefTag);  return true;}  }
class C{  public static long parseXsDuration(String value){  Matcher matcher=XS_DURATION_PATTERN.matcher(value);  if (matcher.matches()) {    boolean negated=!TextUtils.isEmpty(matcher.group(1));    String years=matcher.group(3);    double durationSeconds=(years != null) ? Double.parseDouble(years) * 31556908 : 0;    String months=matcher.group(5);    durationSeconds+=(months != null) ? Double.parseDouble(months) * 2629739 : 0;    String days=matcher.group(7);    durationSeconds+=(days != null) ? Double.parseDouble(days) * 86400 : 0;    String hours=matcher.group(10);    durationSeconds+=(hours != null) ? Double.parseDouble(hours) * 3600 : 0;    String minutes=matcher.group(12);    durationSeconds+=(minutes != null) ? Double.parseDouble(minutes) * 60 : 0;    String seconds=matcher.group(14);    durationSeconds+=(seconds != null) ? Double.parseDouble(seconds) : 0;    long durationMillis=(long)(durationSeconds * 1000);    return negated ? -durationMillis : durationMillis;  } else {    return (long)(Double.parseDouble(value) * 3600 * 1000);  }}  }
class C{  private void appendMultiLineStringText(MultiLineString multiLineString,int level,boolean indentFirst,Writer writer) throws IOException {  int level2=level;  boolean doIndent=indentFirst;  for (int i=0; i < multiLineString.getNumGeometries(); i++) {    if (i > 0) {      level2=level + 1;      doIndent=true;    }    appendLineString((LineString)multiLineString.getGeometryN(i),level2,doIndent,writer);  }}  }
class C{  private Connection(MembershipManager mgr,ConnectionTable t,boolean preserveOrder,DistributedMember remoteID,boolean sharedResource) throws IOException, DistributedSystemDisconnectedException {  InternalDistributedMember remoteAddr=(InternalDistributedMember)remoteID;  if (t == null) {    throw new IllegalArgumentException(LocalizedStrings.Connection_CONNECTIONTABLE_IS_NULL.toLocalizedString());  }  this.isReceiver=false;  this.owner=t;  this.sharedResource=sharedResource;  this.preserveOrder=preserveOrder;  setRemoteAddr(remoteAddr);  this.conduitIdStr=this.owner.getConduit().getId().toString();  this.handshakeRead=false;  this.handshakeCancelled=false;  this.connected=true;  this.uniqueId=idCounter.getAndIncrement();  InetSocketAddress addr=new InetSocketAddress(remoteAddr.getInetAddress(),remoteAddr.getDirectChannelPort());  if (useNIO()) {    SocketChannel channel=SocketChannel.open();    this.owner.addConnectingSocket(channel.socket(),addr.getAddress());    try {      channel.socket().setTcpNoDelay(true);      channel.socket().setKeepAlive(SocketCreator.ENABLE_TCP_KEEP_ALIVE);      if (!sharedResource) {        setReceiveBufferSize(channel.socket(),this.owner.getConduit().tcpBufferSize);      } else {        setReceiveBufferSize(channel.socket(),SMALL_BUFFER_SIZE);      }      setSendBufferSize(channel.socket());      channel.configureBlocking(true);      int connectTime=getP2PConnectTimeout();      ;      try {        channel.socket().connect(addr,connectTime);      } catch (      NullPointerException e) {        ConnectException c=new ConnectException("Encountered bug #45044 - retrying");        c.initCause(e);        try {          Thread.sleep(1000);        } catch (        InterruptedException ie) {          Thread.currentThread().interrupt();        }        throw c;      }catch (      CancelledKeyException e) {        ConnectException c=new ConnectException(LocalizedStrings.Connection_ATTEMPT_TO_CONNECT_TIMED_OUT_AFTER_0_MILLISECONDS.toLocalizedString(new Object[]{connectTime}));        c.initCause(e);        throw c;      }catch (      ClosedSelectorException e) {        ConnectException c=new ConnectException(LocalizedStrings.Connection_ATTEMPT_TO_CONNECT_TIMED_OUT_AFTER_0_MILLISECONDS.toLocalizedString(new Object[]{connectTime}));        c.initCause(e);        throw c;      }    }  finally {      this.owner.removeConnectingSocket(channel.socket());    }    this.socket=channel.socket();  } else {    if (TCPConduit.useSSL) {      int socketBufferSize=sharedResource ? SMALL_BUFFER_SIZE : this.owner.getConduit().tcpBufferSize;      this.socket=owner.getConduit().getSocketCreator().connectForServer(remoteAddr.getInetAddress(),remoteAddr.getDirectChannelPort(),socketBufferSize);      setSocketBufferSize(this.socket,false,socketBufferSize,true);      setSendBufferSize(this.socket);    } else {      Socket s=new Socket();      this.socket=s;      s.setTcpNoDelay(true);      s.setKeepAlive(SocketCreator.ENABLE_TCP_KEEP_ALIVE);      setReceiveBufferSize(s,SMALL_BUFFER_SIZE);      setSendBufferSize(s);      s.connect(addr,0);    }  }  if (logger.isDebugEnabled()) {    logger.debug("Connection: connected to {} with stub {}",remoteAddr,addr);  }  try {    getSocket().setTcpNoDelay(true);  } catch (  SocketException e) {  }}  }
class C{  @Override boolean isMasterConnection(){  return true;}  }
class C{  public static CommChannelHandler currentThread(){  return ((CommChannelHandler)Thread.currentThread());}  }
class C{  public ConnectionConfig(jmri.jmrix.NetworkPortAdapter p){  super(p);  String h=adapter.getHostName();  if (h != null && !h.equals(JmrixConfigPane.NONE)) {    hostNameField=new JTextField(h);  }  String t="" + adapter.getPort();  if (!t.equals("0")) {    portField=new JTextField(t);  }}  }
class C{  public void close(){  mIsClosed=true;  CloseableUtils.tryToClose(mRtcpTransmitter);  CloseableUtils.tryToClose(mRtpReceiver);  CloseableUtils.tryToClose(mRtcpReceiver);  mRtpStreamListener=null;}  }
class C{  private int calculateLayoutWidth(int widthSize,int mode){  initResourcesIfNecessary();  itemsLayout.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT));  itemsLayout.measure(MeasureSpec.makeMeasureSpec(widthSize,MeasureSpec.UNSPECIFIED),MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED));  int width=itemsLayout.getMeasuredWidth();  if (mode == MeasureSpec.EXACTLY) {    width=widthSize;  } else {    width+=2 * PADDING;    width=Math.max(width,getSuggestedMinimumWidth());    if (mode == MeasureSpec.AT_MOST && widthSize < width) {      width=widthSize;    }  }  itemsLayout.measure(MeasureSpec.makeMeasureSpec(width - 2 * PADDING,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED));  return width;}  }
class C{  private static void hsvToHsl(float[] inHsv,float[] outHsl){  outHsl[0]=inHsv[0];  float l=(2 - inHsv[1]) * inHsv[2];  float s=inHsv[1] * inHsv[2];  if (l == 0) {    s=0;  } else   if (l <= 1) {    s/=l;  } else {    s/=2 - l;  }  outHsl[1]=s;  outHsl[2]=l / 2;}  }
class C{  @Timed @ExceptionMetered @Path("{name}/setversion") @POST public Response resetSecretVersion(@Auth AutomationClient automationClient,@Valid SetSecretVersionRequestV2 request){  secretDAO.setCurrentSecretVersionByName(request.name(),request.version());  Map<String,String> extraInfo=new HashMap<>();  extraInfo.put("new version",Long.toString(request.version()));  auditLog.recordEvent(new Event(Instant.now(),EventTag.SECRET_CHANGEVERSION,automationClient.getName(),request.name(),extraInfo));  return Response.status(Response.Status.CREATED).build();}  }
class C{  public static RaDec calculateRADecOfZenith(Date utc,LatLong location){  float my_ra=TimeUtil.meanSiderealTime(utc,location.getLongitude());  float my_dec=location.getLatitude();  return new RaDec(my_ra,my_dec);}  }
class C{  private void processJournal() throws IOException {  deleteIfExists(journalFileTmp);  for (Iterator<Entry> i=lruEntries.values().iterator(); i.hasNext(); ) {    Entry entry=i.next();    if (entry.currentEditor == null) {      for (int t=0; t < valueCount; t++) {        size+=entry.lengths[t];      }    } else {      entry.currentEditor=null;      for (int t=0; t < valueCount; t++) {        deleteIfExists(entry.getCleanFile(t));        deleteIfExists(entry.getDirtyFile(t));      }      i.remove();    }  }}  }
class C{  public final ActorSystem system(){  return context.getSystem();}  }
class C{  public AbstractMemberCollector(ContainerType<?> type,boolean includeImplicitSuperTypes,boolean includePolyfills){  super(type);  this.includeImplicitSuperTypes=includeImplicitSuperTypes;  this.includePolyfills=includePolyfills;}  }
class C{  public boolean isAutoAdjustTabModeEnabled(){  return mAutoAdjustTabMode;}  }
class C{  public int level(){  if (isLeaf()) {    return MAX_LEVEL;  }  int x=((int)id);  int level=-1;  if (x != 0) {    level+=16;  } else {    x=(int)(id >>> 32);  }  x&=-x;  if ((x & 0x00005555) != 0) {    level+=8;  }  if ((x & 0x00550055) != 0) {    level+=4;  }  if ((x & 0x05050505) != 0) {    level+=2;  }  if ((x & 0x11111111) != 0) {    level+=1;  }  return level;}  }
class C{  public static boolean createFile(String filePath){  if (!TextUtils.isEmpty(filePath)) {    File file=new File(filePath);    return createFile(file);  }  return false;}  }
class C{  public boolean hasHourChanged(WatchFaceTime otherTime){  return hour != otherTime.hour;}  }
class C{  @Override public String generateLabel(final CategoryDataset dataset,final int series,final int category){  return dataset.getRowKey(series).toString();}  }
class C{  public KMLViewVolume(String namespaceURI){  super(namespaceURI);}  }
class C{  public final CC pad(String pad){  setPadding(pad != null ? ConstraintParser.parseInsets(pad,false) : null);  return this;}  }
class C{  public JsonNode putAll(Map<String,JsonNode> properties){  if (_children == null) {    _children=new LinkedHashMap<String,JsonNode>(properties);  } else {    for (    Map.Entry<String,JsonNode> en : properties.entrySet()) {      JsonNode n=en.getValue();      if (n == null) {        n=nullNode();      }      _children.put(en.getKey(),n);    }  }  return this;}  }
class C{  public AsyncResult HistoryUpdateAsync(HistoryUpdateRequest req){  return channel.serviceRequestAsync(req);}  }
class C{  public void createColourBackup(){  this.backupColours=Arrays.copyOf(this.colorCode,32);}  }
class C{  public static void writeBytes(final OutputStream output,final byte[] data) throws IOException {  writeBytes(output,data,0,data.length);}  }
class C{  private String updateExistingReview(TaskData taskData,AppraisePluginReviewClient client) throws CoreException {  String reviewCommitHash=getReviewCommitHash(taskData);  Review review=buildReviewFromTaskData(taskData);  String newComment=null;  TaskAttribute newComments=taskData.getRoot().getAttribute(TaskAttribute.COMMENT_NEW);  if (newComments != null) {    newComment=newComments.getValue();  }  if (!client.updateReview(reviewCommitHash,review,newComment)) {    throw new CoreException(Status.CANCEL_STATUS);  }  return reviewCommitHash;}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  public static String unexpand(CharSequence self,int tabStop){  if (self.length() == 0)   return self.toString();  StringBuilder builder=new StringBuilder();  for (  String line : new LineIterable(self)) {    builder.append(unexpandLine((CharSequence)line,tabStop));    builder.append("\n");  }  if (self.charAt(self.length() - 1) != '\n') {    builder.deleteCharAt(builder.length() - 1);  }  return builder.toString();}  }
class C{  public FileConnection(CsvSpecification csvSpecification){  this.csvSpecification=csvSpecification;}  }
class C{  private final ExprNode generateOpAppl(TreeNode syntaxTreeNode,ModuleNode cm) throws AbortException {  TreeNode primaryArgs=null;  boolean isOpApp=syntaxTreeNode.isKind(N_OpApplication);  int primaryArgCount=0;  int len;  TreeNode[] children=syntaxTreeNode.heirs();  TreeNode[] prefix;  TreeNode[] allArgs=null;  TreeNode[] prefixElt;  UniqueString symbol;  SymbolNode fullOperator;  int iarg=0;  TreeNode[] argsList=null;  ExprOrOpArgNode[] args=null;  GenID genID=generateGenID(children[0],cm);  primaryArgs=children[1];  primaryArgCount=primaryArgs.heirs().length / 2;  if (genID == null || genID.getFullyQualifiedOp() == null) {    return nullOAN;  }  args=new ExprOrOpArgNode[primaryArgCount];  argsList=primaryArgs.heirs();  for (int ia=1; ia < argsList.length; ia+=2) {    args[iarg]=generateExprOrOpArg(genID.getFullyQualifiedOp(),syntaxTreeNode,iarg,argsList[ia],cm);    iarg++;  }  Vector genIDArgList=genID.getArgsVector();  ExprOrOpArgNode[] finalArgList=new ExprOrOpArgNode[genIDArgList.size() + iarg];  for (int i=0; i < genIDArgList.size(); i++) {    finalArgList[i]=(ExprOrOpArgNode)(genIDArgList.elementAt(i));  }  for (int i=0, j=genIDArgList.size(); i < iarg; i++, j++) {    finalArgList[j]=args[i];  }  return new OpApplNode(genID.getFullyQualifiedOp(),finalArgList,syntaxTreeNode,cm);}  }
class C{  public CqQuery newCq(String queryString,CqAttributes cqAttributes,boolean isDurable) throws QueryInvalidException, CqException {  ClientCQ cq=null;  try {    cq=(ClientCQ)getCqService().newCq(null,queryString,cqAttributes,this.pool,isDurable);  } catch (  CqExistsException cqe) {    if (logger.isDebugEnabled()) {      logger.debug("Unable to createCq. Error :{}",cqe.getMessage(),cqe);    }  }  return cq;}  }
class C{  public int update(Connection conn,String sql) throws SQLException {  return this.update(conn,sql,(Object[])null);}  }
class C{  public void doLayout(){  for (int i=getComponentCount() - 1; i >= 0; i--) {    final Component component=getComponent(i);    component.setBounds(0,0,getWidth(),getHeight());  }}  }
class C{  public Image[] listImages() throws IOException {  try (DockerConnection connection=openConnection(dockerDaemonUri).method("GET").path("/images/json")){    final DockerResponse response=connection.request();    final int status=response.getStatus();    if (OK.getStatusCode() != status) {      throw new DockerException(getDockerExceptionMessage(response),status);    }    return parseResponseStreamAndClose(response.getInputStream(),Image[].class);  } catch (  JsonParseException e) {    throw new IOException(e.getLocalizedMessage(),e);  }}  }
class C{  public void run() throws Exception {  System.out.println("Running " + file + " against "+ host+ ":"+ port+ "...");  final ExternalHostSystem host=new ExternalHostSystem(SUPPORTED_FEATURES,this.host,port,monitor,shabang,null);  final ProtocolSessionBuilder builder=new ProtocolSessionBuilder();  final Runner runner=new Runner();  builder.addProtocolLines(file.getName(),new FileInputStream(file),runner.getTestElements());  runner.runSessions(host);}  }
class C{  private void updateReleaseLocks() throws CacheException {  if (numLocks.addAndGet(-1) < 0) {    throw new CacheException("Redundant release of GPU object");  }  if (evictionPolicy == EvictionPolicy.LRU) {    timestamp.set(System.nanoTime());  } else   if (evictionPolicy == EvictionPolicy.LFU) {    timestamp.addAndGet(1);  } else   if (evictionPolicy == EvictionPolicy.MIN_EVICT) {  } else {    throw new CacheException("The eviction policy is not supported:" + evictionPolicy.name());  }}  }
class C{  private void updateMode(){  outlinesView.setVisibility(mode == Mode.OUTLINES ? VISIBLE : GONE);  cardView.setVisibility(mode == Mode.CARD ? VISIBLE : GONE);}  }
class C{  protected boolean validateNodeName(String nodeName){  if (null == nodeName)   return false;  if (nodeName.equals("xmlns"))   return false;  return XML11Char.isXML11ValidQName(nodeName);}  }
class C{  public void validateOutputFieldMappings(){  KeyValueListParser kvParser=new KeyValueListParser("\\s*,\\s*",":");  if (!Strings.isNullOrEmpty(outputFieldMappings)) {    for (    KeyValue<String,String> keyVal : kvParser.parse(outputFieldMappings)) {      String key=keyVal.getKey();      String val=keyVal.getValue();      if (Strings.isNullOrEmpty(key) || Strings.isNullOrEmpty(val)) {        throw new IllegalArgumentException(String.format("Expected field and its rename field has to be separated by ':'. For example, " + "oldFieldName:newFieldName, but received '%s'. Please make sure that both key and value " + "are present for 'Fields to rename'.",outputFieldMappings));      }    }  }}  }
class C{  public RangeCondition upper(Object upper){  this.upper=upper;  return this;}  }
class C{  @Override protected void onResume(){  super.onResume();  Log.d(TAG,"onResume() - the activity has become visible (it is now \"resumed\")");}  }
class C{  private Object executeGT(PageContext pc,SQL sql,Query qr,ZExpression expression,int row) throws PageException {  return (executeCompare(pc,sql,qr,expression,row) > 0) ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  public ImplApplication(ImplDiscordAPI api,JSONObject data){  this.api=api;  id=data.getString("id");  description=data.getString("description");  JSONArray jsonRedirectUris=data.getJSONArray("redirect_uris");  redirectUris=new String[jsonRedirectUris.length()];  for (int i=0; i < redirectUris.length; i++) {    redirectUris[i]=jsonRedirectUris.getString(i);  }  name=data.getString("name");  secret=data.getString("secret");  if (data.has("bot")) {    botToken=data.getJSONObject("bot").getString("token");    bot=api.getOrCreateUser(data.getJSONObject("bot"));  } else {    botToken=null;    bot=null;  }}  }
class C{  private void unregisterHook(String request){  delete(request).then().assertThat().statusCode(200);}  }
class C{  private void calcInnerBounds(){  final Insets INSETS=getInsets();  final int SIZE=(getWidth() - INSETS.left - INSETS.right) <= (getHeight() - INSETS.top - INSETS.bottom) ? (getWidth() - INSETS.left - INSETS.right) : (getHeight() - INSETS.top - INSETS.bottom);  INNER_BOUNDS.setBounds(INSETS.left,INSETS.top,SIZE,SIZE);}  }
class C{  private boolean isElementHasParentWithLang(Element el){  for (  Element pel : el.parents()) {    if (!pel.nodeName().equals(HTML_ELEMENT) && (pel.hasAttr(LANG_ATTR) || pel.hasAttr(XML_LANG_ATTR))) {      return true;    }  }  return false;}  }
class C{  public static boolean truthy(Object obj){  if (obj == null) {    return false;  } else   if (obj instanceof Collection) {    return (!((Collection<?>)obj).isEmpty());  } else   if (obj instanceof Iterable) {    return !((Iterable<?>)obj).iterator().hasNext();  } else   if (obj instanceof Object[]) {    return (((Object[])obj).length > 0);  } else   if (obj instanceof Number) {    return (((Number)obj).longValue() != 0);  } else   if (obj instanceof CharSequence) {    return (((CharSequence)obj).length() > 0);  } else   if (obj instanceof JSONArray) {    return (((JSONArray)obj).length() > 0);  } else   if (obj instanceof Boolean) {    return ((Boolean)obj);  } else   if (obj instanceof long[]) {    return (((long[])obj).length > 0);  } else   if (obj instanceof int[]) {    return (((int[])obj).length > 0);  } else   if (obj instanceof short[]) {    return (((short[])obj).length > 0);  } else   if (obj instanceof byte[]) {    return (((byte[])obj).length > 0);  } else   if (obj instanceof char[]) {    return (((char[])obj).length > 0);  } else   if (obj instanceof boolean[]) {    return (((boolean[])obj).length > 0);  } else   if (obj instanceof float[]) {    return (((float[])obj).length > 0);  } else   if (obj instanceof double[]) {    return (((double[])obj).length > 0);  }  return true;}  }
class C{  public static final boolean isSmeDeliveryAcknowledgment(byte esmClass){  return isMessageType(esmClass,SMPPConstant.ESMCLS_SME_DELIV_ACK);}  }
class C{  public BoundingBox ext(float x,float y,float z){  crn_dirty=true;  return this.set(min.set(min(min.x,x),min(min.y,y),min(min.z,z)),max.set(max(max.x,x),max(max.y,y),max(max.z,z)));}  }
class C{  public static Element appendElementNS(Element parent,String namespaceURI,String localName){  Element ret=parent.getOwnerDocument().createElementNS(namespaceURI,localName);  parent.appendChild(ret);  return ret;}  }
class C{  public static LatLon interpolate(double amount,LatLon value1,LatLon value2){  if (value1 == null || value2 == null) {    throw new IllegalArgumentException("Lat Lon Is Null");  }  if (LatLon.equals(value1,value2))   return value1;  Line line;  try {    line=Line.fromSegment(new Vec4(value1.getLongitude().radians,value1.getLatitude().radians,0),new Vec4(value2.getLongitude().radians,value2.getLatitude().radians,0));  } catch (  IllegalArgumentException e) {    return value1;  }  Vec4 p=line.getPointAt(amount);  return LatLon.fromRadians(p.y(),p.x);}  }
class C{  public void removeVersionHistory(BigDecimal version){  if (version != null) {    Iterator<VersionHistory> iter=getVersionHistory().iterator();    while (iter.hasNext()) {      BigDecimal historyVersion=new BigDecimal(iter.next().getVersion());      if (version.compareTo(historyVersion) == 0) {        iter.remove();      }    }  }}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public void chargeItem(ItemStack aStack){  decreaseStoredEU(GT_ModHandler.chargeElectricItem(aStack,(int)Math.min(Integer.MAX_VALUE,getStoredEU()),(int)Math.min(Integer.MAX_VALUE,mMetaTileEntity.getOutputTier()),false,false),true);}  }
class C{  public SQLTransientConnectionException(String reason,String sqlState,int vendorCode,Throwable cause){  super(reason,sqlState,vendorCode,cause);}  }
class C{  public int compare(Production production,Terminal terminal){  Terminal prodTerm=production.getPrecedenceTerminal();  if (prodTerm == null) {    for (    Associativity ass : list) {      if (ass.contains(terminal))       return -1;    }    return 0;  } else {    return compare(prodTerm,terminal);  }}  }
class C{  protected Size2DSyntax(int x,int y,int units){  if (x < 0) {    throw new IllegalArgumentException("x < 0");  }  if (y < 0) {    throw new IllegalArgumentException("y < 0");  }  if (units < 1) {    throw new IllegalArgumentException("units < 1");  }  this.x=x * units;  this.y=y * units;}  }
class C{  public JSONObject serialize() throws Exception {  setFields();  Map<String,Object> values=new HashMap<>();  for (  JsonFieldItem field : jsonFields) {    if (field.type.equals(JsonField.Type.JSON_MODEL)) {      values.put(field.fieldName,((JsonModel)field.field.get(this)).serialize());    } else {      values.put(field.fieldName,field.field.get(this));    }  }  return new JSONObject(values);}  }
class C{  public boolean isValid(){  boolean result=true;  return result;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override protected void reset(){  inputToRoots.clear();}  }
class C{  public Token(int kind){  this(kind,null);}  }
class C{  public int receiveBufferSize(){  return reader.getInteger(RECEIVE_BUFFER_SIZE,DEFAULT_RECEIVE_BUFFER_SIZE);}  }
class C{  public static void writeString(SharedPreferences preferences,String key,String value){  SharedPreferences.Editor editor=preferences.edit();  editor.putString(key,value);  editor.commit();}  }
class C{  public void insertRadians(double[] latlons,int coordPairIndex,boolean replaceEndsOfInsertedAtJoin){  int minPntsNeededForInsertion=2;  boolean atEnd=false;  boolean isClosed=isGeometryClosed();  int insertionPoint=coordPairIndex * 2;  if (insertionPoint >= rawllpts.length) {    if (isClosed) {      insertionPoint=rawllpts.length - 2;    } else {      insertionPoint=rawllpts.length;      atEnd=true;    }  } else   if (insertionPoint <= 0) {    if (isClosed) {      insertionPoint=2;    } else {      insertionPoint=0;      atEnd=true;    }  }  int newCoordStart=0;  int newCoordLength=latlons.length;  if (replaceEndsOfInsertedAtJoin) {    newCoordStart=2;    minPntsNeededForInsertion=6;    if (atEnd) {      minPntsNeededForInsertion-=2;      newCoordLength-=2;      if (insertionPoint == 0) {        newCoordStart=0;      }    } else {      newCoordLength-=4;    }  }  if (renderType == OMGraphic.RENDERTYPE_LATLON && latlons.length >= minPntsNeededForInsertion && latlons.length % 2 == 0) {    double[] oldrawllpnts=rawllpts;    int oldCoordsRemaining=oldrawllpnts.length - insertionPoint;    rawllpts=new double[oldrawllpnts.length + newCoordLength];    System.arraycopy(oldrawllpnts,0,rawllpts,0,insertionPoint);    System.arraycopy(latlons,newCoordStart,rawllpts,insertionPoint,newCoordLength);    System.arraycopy(oldrawllpnts,insertionPoint,rawllpts,insertionPoint + newCoordLength,oldCoordsRemaining);    setNeedToRegenerate(true);  }}  }
class C{  public int decode(String data,OutputStream out) throws IOException {  byte b1, b2;  int length=0;  int end=data.length();  while (end > 0) {    if (!ignore(data.charAt(end - 1))) {      break;    }    end--;  }  int i=0;  while (i < end) {    while (i < end && ignore(data.charAt(i))) {      i++;    }    b1=decodingTable[data.charAt(i++)];    while (i < end && ignore(data.charAt(i))) {      i++;    }    b2=decodingTable[data.charAt(i++)];    if ((b1 | b2) < 0) {      throw new IOException("invalid characters encountered in Hex string");    }    out.write((b1 << 4) | b2);    length++;  }  return length;}  }
class C{  public static TextEdit format(IDocument document,IJavaProject project,String[] originalJsniMethods){  @SuppressWarnings("unchecked") Map<String,String> jsOptions=JavaScriptCore.create(project.getProject()).getOptions(true);  @SuppressWarnings("unchecked") Map<String,String> jOptions=project.getOptions(true);  return format(document,jOptions,jsOptions,originalJsniMethods);}  }
class C{  protected EntitySetupDescriptor read(final Element element,final int x,final int y){  return new EntitySetupDescriptor(x,y);}  }
class C{  public void testGetReaderPort(){  CoreIdRfidProtocol instance=new CoreIdRfidProtocol();  char expResult=0x00;  assertEquals(expResult,instance.getReaderPort(msgStandalone));  instance=new CoreIdRfidProtocol('A','H',1);  expResult='A';  assertEquals(expResult,instance.getReaderPort(msgConcentrator));}  }
class C{  public synchronized boolean isRootReached(){  return (m_Current.parent == null);}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  public static boolean shouldShowRationale(@NonNull String permission){  return ActivityCompat.shouldShowRequestPermissionRationale(safeActivity(),permission);}  }
class C{  public void testCopyDirectory() throws Exception {  String fileName1="file1";  String fileName2="file2";  String fileContents1="contents1";  String fileContents2="contents2";  createFile(configFileDirectory,fileName1,fileContents1);  createFile(configFileDirectory,fileName2,fileContents2);  FileConfig configFile=new FileConfig();  configFile.setFile(getAbsolutePath(configFileDirectory));  configuration.setFileProperty(configFile);  configuration.doConfigure(null);  File copiedFile1=new File(configuration.getHome() + "/file1");  assertTrue("Cannot find the expected copied file",copiedFile1.exists());  assertEquals(fileContents1,readFile(copiedFile1));  File copiedFile2=new File(configuration.getHome() + "/file2");  assertTrue("Cannot find the expected copied file",copiedFile2.exists());  assertEquals(fileContents2,readFile(copiedFile2));  configFile.setToDir("dir1");  configuration.setFileProperty(configFile);  configuration.doConfigure(null);  copiedFile1=new File(configuration.getHome() + "/dir1/file1");  assertTrue("Cannot find the expected copied file",copiedFile1.exists());  assertEquals(fileContents1,readFile(copiedFile1));  copiedFile2=new File(configuration.getHome() + "/dir1/file2");  assertTrue("Cannot find the expected copied file",copiedFile2.exists());  assertEquals(fileContents2,readFile(copiedFile2));}  }
class C{  public Level lastLevel(){  return this.levels.length > 0 ? this.levels[this.levels.length - 1] : null;}  }
class C{  private void revisionCompare() throws jplag.ExitException {  int size=submissions.size();  SortedVector<AllMatches> avgmatches, maxmatches, minmatches;  int[] dist=new int[10];  avgmatches=new SortedVector<AllMatches>(new AllMatches.AvgReversedComparator());  maxmatches=new SortedVector<AllMatches>(new AllMatches.MaxReversedComparator());  minmatches=new SortedVector<AllMatches>(new AllMatches.MinReversedComparator());  long msec;  AllBasecodeMatches bcmatch;  Submission s1, s2;  options.setState(Options.COMPARING);  options.setProgress(0);  if (options.useBasecode) {    msec=System.currentTimeMillis();    for (int i=0; i < size; i++) {      s1=submissions.elementAt(i);      bcmatch=gSTiling.compareWithBasecode(s1,basecodeSubmission);      htBasecodeMatches.put(s1.name,bcmatch);      gSTiling.resetBaseSubmission(basecodeSubmission);      options.setProgress((i + 1) * 100 / size);    }    long timebc=System.currentTimeMillis() - msec;    print("\n\n","\nTime for comparing with Basecode: " + ((timebc / 3600000 > 0) ? (timebc / 3600000) + " h " : "") + ((timebc / 60000 > 0) ? ((timebc / 60000) % 60000) + " min " : "")+ (timebc / 1000 % 60)+ " sec\n"+ "Time per basecode comparison: "+ (timebc / size)+ " msec\n\n");  }  int totalcomps=size - 1;  int anz=0, count=0;  AllMatches match;  options.setProgress(0);  msec=System.currentTimeMillis();  s1loop:   for (int i=0; i < size - 1; ) {    s1=submissions.elementAt(i);    if (s1.struct == null) {      count++;      continue;    }    int j=i;    do {      j++;      if (j >= size)       break s1loop;      s2=submissions.elementAt(j);    } while (s2.struct == null);    match=this.gSTiling.compare(s1,s2);    anz++;    if (options.useBasecode) {      match.bcmatchesA=htBasecodeMatches.get(match.subA.name);      match.bcmatchesB=htBasecodeMatches.get(match.subB.name);    }    registerMatch(match,dist,avgmatches,maxmatches,minmatches,i,j);    count++;    options.setProgress(count * 100 / totalcomps);    i=j;  }  options.setProgress(100);  long time=System.currentTimeMillis() - msec;  print("\n","Total time for comparing submissions: " + ((time / 3600000 > 0) ? (time / 3600000) + " h " : "") + ((time / 60000 > 0) ? ((time / 60000) % 60000) + " min " : "")+ (time / 1000 % 60)+ " sec\n"+ "Time per comparison: "+ (time / anz)+ " msec\n");  Cluster cluster=null;  if (options.clustering)   cluster=this.clusters.calculateClustering(submissions);  writeResults(dist,avgmatches,maxmatches,minmatches,cluster);}  }
class C{  public void pauseTransfer(RecoverPointVolumeProtectionInfo volumeInfo) throws RecoverPointException {  try {    ConsistencyGroupUID cgUID=new ConsistencyGroupUID();    cgUID.setId(volumeInfo.getRpVolumeGroupID());    if (volumeInfo.getRpVolumeCurrentProtectionStatus() == RecoverPointVolumeProtectionInfo.volumeProtectionStatus.PROTECTED_SOURCE) {      functionalAPI.pauseGroupTransfer(cgUID);      String cgName=functionalAPI.getGroupName(cgUID);      logger.info("Protection paused on CG " + cgName);    } else {      ConsistencyGroupCopyUID cgCopyUID=RecoverPointUtils.mapRPVolumeProtectionInfoToCGCopyUID(volumeInfo);      functionalAPI.pauseGroupCopyTransfer(cgCopyUID);      String cgCopyName=functionalAPI.getGroupCopyName(cgCopyUID);      String cgName=functionalAPI.getGroupName(cgCopyUID.getGroupUID());      logger.info("Protection paused on CG copy " + cgCopyName + " on CG "+ cgName);    }  } catch (  FunctionalAPIActionFailedException_Exception e) {    throw RecoverPointException.exceptions.failedToPauseProtection(volumeInfo.getRpVolumeGroupID(),e);  }catch (  FunctionalAPIInternalError_Exception e) {    throw RecoverPointException.exceptions.failedToPauseProtection(volumeInfo.getRpVolumeGroupID(),e);  }}  }
class C{  @Override public void write(int b) throws IOException {  Streams.writeSingleByte(this,b);}  }
class C{  protected void onDataError(@NonNull Throwable e){}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  protected void assertContains(int expected,int[] array){  for (  int anInt : array) {    if (anInt == expected) {      return;    }  }  StringBuilder message=new StringBuilder();  message.append(expected).append(" not in {");  for (int i=0; i < array.length; ++i) {    message.append("'").append(array[i]).append("'");    if (i < (array.length - 1)) {      message.append(", ");    }  }  message.append(" }");  fail(message.toString());}  }
class C{  public int integerBreak(int n){  if (n == 2) {    return 1;  }  if (n == 3) {    return 2;  }  int product=1;  while (n > 4) {    product*=3;    n-=3;  }  return product * n;}  }
class C{  public static NamedScopedCache named(String name){  return new NamedScopedCache(name);}  }
class C{  void addToUseChain(HeapOperand<Object> op){  HeapVariable<Object> hv=op.getHeapVariable();  HashSet<HeapOperand<Object>> u=UseChain.get(hv);  u.add(op);}  }
class C{  @Deprecated public double right(){  return max;}  }
class C{  public void drawString(String str,int x,int y){  drawString(str,(float)x,(float)y);}  }
class C{  @Override @SuppressWarnings("unchecked") public <T>T unwrap(Class<T> iface) throws SQLException {  if (isWrapperFor(iface)) {    return (T)this;  }  throw DbException.getInvalidValueException("iface",iface);}  }
class C{  public double unweightedMicroFmeasure(){  double tp=0;  double fn=0;  double fp=0;  for (int c=0; c < m_NumClasses; c++) {    tp+=numTruePositives(c);    fn+=numFalseNegatives(c);    fp+=numFalsePositives(c);  }  return 2 * tp / (2 * tp + fn + fp);}  }
class C{  public static void showMessage(String messageKey,Switch ignore){  _callback.showMessage(messageKey,ignore);}  }
class C{  public void write(OutputStream out,Drawing drawing,java.util.List<Figure> figures) throws IOException {  write(out,drawing,figures,null,null);}  }
class C{  public long modificationCount(){  return this.modificationCount;}  }
class C{  protected boolean reopen(){  try {    binFile=new BinaryBufferedFile(path);    return true;  } catch (  FileNotFoundException e) {    Debug.error("DTEDFrame reopen(): file " + path + " not found");    return false;  }catch (  IOException e) {    Debug.error("DTEDFrame close(): File IO Error!\n" + e.toString());    return false;  }}  }
class C{  @Override public int hashCode(){  return this.getName().hashCode();}  }
class C{  public boolean isValidInet6Address(String inet6Address){  boolean containsCompressedZeroes=inet6Address.indexOf("::") > -1;  if (containsCompressedZeroes && (inet6Address.indexOf("::") != inet6Address.lastIndexOf("::"))) {    return false;  }  if ((inet6Address.startsWith(":") && !inet6Address.startsWith("::")) || (inet6Address.endsWith(":") && !inet6Address.endsWith("::"))) {    return false;  }  Object[] octets=inet6Address.split(":");  if (containsCompressedZeroes) {    List octetList=new ArrayList(Arrays.asList(octets));    if (inet6Address.endsWith("::")) {      octetList.add("");    } else     if (inet6Address.startsWith("::") && !octetList.isEmpty()) {      octetList.remove(0);    }    octets=octetList.toArray();  }  if (octets.length > 8) {    return false;  }  int validOctets=0;  int emptyOctets=0;  for (int index=0; index < octets.length; index++) {    String octet=(String)octets[index];    if (octet.length() == 0) {      emptyOctets++;      if (emptyOctets > 1) {        return false;      }    } else {      emptyOctets=0;      if (octet.indexOf(".") > -1) {        if (!inet6Address.endsWith(octet)) {          return false;        }        if (index > octets.length - 1 || index > 6) {          return false;        }        if (!isValidInet4Address(octet)) {          return false;        }        validOctets+=2;        continue;      }      if (octet.length() > 4) {        return false;      }      int octetInt=0;      try {        octetInt=Integer.valueOf(octet,16).intValue();      } catch (      NumberFormatException e) {        return false;      }      if (octetInt < 0 || octetInt > 0xffff) {        return false;      }    }    validOctets++;  }  if (validOctets < 8 && !containsCompressedZeroes) {    return false;  }  return true;}  }
class C{  private byte[] calculuateOValue(byte[] ownerPassword,byte[] userPassword,int keyBitLength,int revision) throws GeneralSecurityException {  final byte[] rc4KeyBytes=getInitialOwnerPasswordKeyBytes(ownerPassword,keyBitLength,revision);  final Cipher rc4=createRC4Cipher();  initEncryption(rc4,createRC4Key(rc4KeyBytes));  byte[] pwvalue=crypt(rc4,padPassword(userPassword));  if (revision >= 3) {    rc4shuffle(pwvalue,rc4KeyBytes,rc4);  }  assert pwvalue.length == 32;  return pwvalue;}  }
class C{  public ElementType(String name,int model,int memberOf,int flags,Schema schema){  theName=name;  theModel=model;  theMemberOf=memberOf;  theFlags=flags;  theAtts=new AttributesImpl();  theSchema=schema;  theNamespace=namespace(name,false);  theLocalName=localName(name);}  }
class C{  public static boolean isLetterOrNumber(int c){  return isLetter(c) || NTriplesUtil.isNumber(c);}  }
class C{  public static DeleteUsersE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  DeleteUsersE object=new DeleteUsersE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org/xsd","deleteUsers").equals(reader.getName())) {          object.setDeleteUsers(org.oscm.xsd.DeleteUsers.Factory.parse(reader));        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public void stop(){  mesosCluster.destroy(factory);}  }
class C{  public static void checkNotEmpty(Collection collection){  if (collection.isEmpty()) {    throw new NullPointerException();  }}  }
class C{  public InvalidKeySpecException(){  super();}  }
class C{  public static UnescapedCharSequence discardEscapeChar(CharSequence input) throws ParseException {  char[] output=new char[input.length()];  boolean[] wasEscaped=new boolean[input.length()];  int length=0;  boolean lastCharWasEscapeChar=false;  int codePointMultiplier=0;  int codePoint=0;  for (int i=0; i < input.length(); i++) {    char curChar=input.charAt(i);    if (codePointMultiplier > 0) {      codePoint+=hexToInt(curChar) * codePointMultiplier;      codePointMultiplier>>>=4;      if (codePointMultiplier == 0) {        output[length++]=(char)codePoint;        codePoint=0;      }    } else     if (lastCharWasEscapeChar) {      if (curChar == 'u') {        codePointMultiplier=16 * 16 * 16;      } else {        output[length]=curChar;        wasEscaped[length]=true;        length++;      }      lastCharWasEscapeChar=false;    } else {      if (curChar == '\\') {        lastCharWasEscapeChar=true;      } else {        output[length]=curChar;        length++;      }    }  }  if (codePointMultiplier > 0) {    throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_ESCAPE_UNICODE_TRUNCATION));  }  if (lastCharWasEscapeChar) {    throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_ESCAPE_CHARACTER));  }  return new UnescapedCharSequence(output,wasEscaped,0,length);}  }
class C{  private static boolean canResponseHaveBody(final HttpRequest request,final int status){  if ("HEAD".equalsIgnoreCase(request.getRequestLine().getMethod())) {    return false;  }  return status >= HttpStatus.SC_OK && status != HttpStatus.SC_NO_CONTENT && status != HttpStatus.SC_NOT_MODIFIED;}  }
class C{  static ClassLoader findClassLoader() throws ConfigurationError {  SecuritySupport ss=SecuritySupport.getInstance();  ClassLoader context=ss.getContextClassLoader();  ClassLoader system=ss.getSystemClassLoader();  ClassLoader chain=system;  while (true) {    if (context == chain) {      ClassLoader current=ObjectFactory.class.getClassLoader();      chain=system;      while (true) {        if (current == chain) {          return system;        }        if (chain == null) {          break;        }        chain=ss.getParentClassLoader(chain);      }      return current;    }    if (chain == null) {      break;    }    chain=ss.getParentClassLoader(chain);  }  ;  return context;}  }
class C{  public void handshakeCompleted(HandshakeCompletedEvent event){  session=event.getSession();}  }
class C{  public boolean isVisible(){  return myView != null && myView.isVisible();}  }
class C{  public static boolean arabicChar(char c){  if (c >= arabicStart && c <= arabicEnd) {    return true;  }  return false;}  }
class C{  @Override public void execute(){  try {    List<CnATreeElement> copyElements;    newElements=new ArrayList<String>(0);    number=0;    copyElements=createInsertList(uuidList);    selectedGroup=getDao().findByUuid(uuidGroup,RetrieveInfo.getChildrenInstance().setParent(true).setProperties(true));    final Map<String,String> sourceDestMap=new Hashtable<String,String>();    for (    final CnATreeElement element : copyElements) {      final CnATreeElement newElement=copy(selectedGroup,element,sourceDestMap);      if (newElement != null && newElement.getUuid() != null) {        newElements.add(newElement.getUuid());      }    }    if (getPostProcessorList() != null && !getPostProcessorList().isEmpty()) {      getDao().flush();      getDao().clear();      final List<String> copyElementUuidList=new ArrayList<String>(copyElements.size());      for (      final CnATreeElement element : copyElements) {        copyElementUuidList.add(element.getUuid());      }      for (      final IPostProcessor postProcessor : getPostProcessorList()) {        postProcessor.process(copyElementUuidList,sourceDestMap);      }    }  } catch (  final Exception e) {    getLog().error("Error while copying element",e);    throw new RuntimeException("Error while copying element",e);  }}  }
class C{  @Override public Measure saveMeasure(Measure measure){  return null;}  }
class C{  public static long reverseBits(final int value){  final int b0=JBBPUtils.reverseBitsInByte((byte)value) & 0xFF;  final int b1=JBBPUtils.reverseBitsInByte((byte)(value >> 8)) & 0xFF;  final int b2=JBBPUtils.reverseBitsInByte((byte)(value >> 16)) & 0xFF;  final int b3=JBBPUtils.reverseBitsInByte((byte)(value >> 24)) & 0xFF;  return (long)((b0 << 24) | (b1 << 16) | (b2 << 8)| b3);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public void clear(){  modCount++;  Entry[] tab=table;  for (int i=0; i < tab.length; i++)   tab[i]=null;  size=0;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:10.758 -0500",hash_original_method="A204D392D258EF41A56793600F1CE50A",hash_generated_method="6879D47F66BD84CD6DB9E290DBCB8772") static public MotionEvent obtain(long downTime,long eventTime,int action,int pointerCount,PointerProperties[] pointerProperties,PointerCoords[] pointerCoords,int metaState,int buttonState,float xPrecision,float yPrecision,int deviceId,int edgeFlags,int source,int flags){  MotionEvent ev=obtain();  ev.mNativePtr=nativeInitialize(ev.mNativePtr,deviceId,source,action,flags,edgeFlags,metaState,buttonState,0,0,xPrecision,yPrecision,downTime * NS_PER_MS,eventTime * NS_PER_MS,pointerCount,pointerProperties,pointerCoords);  return ev;}  }
class C{  static String readFile(String path,Charset encoding) throws IOException {  byte[] encoded=Files.readAllBytes(Paths.get(path));  return new String(encoded,encoding);}  }
class C{  public static int bitLength(int i){  if (i < 0)   i=-++i;  return (i < 1 << 16) ? (i < 1 << 8) ? BIT_LENGTH[i] : BIT_LENGTH[i >>> 8] + 8 : (i < 1 << 24) ? BIT_LENGTH[i >>> 16] + 16 : BIT_LENGTH[i >>> 24] + 24;}  }
class C{  public TooManyValuesException(final String msg){  super(msg);  LOGGER.error(msg);}  }
class C{  public LruEvictionPolicy(){}  }
class C{  void put(long objectKey,LocalizedObjectTypes objectType,String localizedValue){  String cacheKey=createInternalKey(objectKey,objectType);  storage.put(cacheKey,localizedValue);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case GamlPackage.SIF__ELSE:    return else_ != null;}return super.eIsSet(featureID);}  }
class C{  public static double deriv(double pred,double y){  if (pred * y > 1)   return 0; else   return -y;}  }
class C{  @Override public Collection<V> values(){  Collection<V> vs=our_values;  return (vs != null ? vs : (our_values=new Values()));}  }
class C{  private HashSet<HeapOperand<Object>> findOrCreateOriginalDefs(Object type){  HashSet<HeapOperand<Object>> result=originalDefs.get(type);  if (result != null) {    return result;  }  result=new HashSet<HeapOperand<Object>>(2);  for (Iterator<HeapVariable<Object>> e=getHeapVariables(); e.hasNext(); ) {    HeapVariable<Object> B=e.next();    if (B.getHeapType().equals(type)) {      HeapOperand<Object> def=getUniqueDef(B);      if (def != null) {        result.add(def);      }    }  }  originalDefs.put(type,result);  return result;}  }
class C{  private boolean isSwapAvailable(){  if (swapAvailable < 0) {    swapAvailable=new File("/proc/swaps").exists() ? 1 : 0;  }  return swapAvailable > 0;}  }
class C{  @Override protected void rehash(int newCapacity){  int oldCapacity=_set.length;  double[] oldKeys=_set;  long[] oldVals=_values;  byte[] oldStates=_states;  _set=new double[newCapacity];  _values=new long[newCapacity];  _states=new byte[newCapacity];  for (int i=oldCapacity; i-- > 0; ) {    if (oldStates[i] == FULL) {      double o=oldKeys[i];      int index=insertionIndex(o);      _set[index]=o;      _values[index]=oldVals[i];      _states[index]=FULL;    }  }}  }
class C{  public JCMethodDecl MethodDef(MethodSymbol m,Type mtype,JCBlock body){  return (JCMethodDecl)new JCMethodDecl(Modifiers(m.flags(),Annotations(m.getRawAttributes())),m.name,Type(mtype.getReturnType()),TypeParams(mtype.getTypeArguments()),null,Params(mtype.getParameterTypes(),m),Types(mtype.getThrownTypes()),body,null,m).setPos(pos).setType(mtype);}  }
class C{  public void poweroff(){  localRepository.poweroff();}  }
class C{  private void askPermissions(){  mPermissionsToAsk=getNotGrantedPermissions();  if (mPermissionsToAsk.size() > 0 && Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {    requestPermissions(mPermissionsToAsk.toArray(new String[mPermissionsToAsk.size()]),MY_PERMISSION_REQUEST_ALL);  } else {    onClickAfterCheckPermissions();  }}  }
class C{  public Marker createMarker(){  MarkerImpl marker=new MarkerImpl();  return marker;}  }
class C{  public void visitInnerClass(String name,String outerName,String innerName,int access){  if (cv != null) {    cv.visitInnerClass(name,outerName,innerName,access);  }}  }
class C{  public long numBits(){  if (n == 0)   return 0;  return (data != null ? data.size64() : 0) * width + offsetAndSeed.length * (long)Long.SIZE;}  }
class C{  private void handleRemoteWorkerLost(final IStateQueue stateQueue){  keepAliveTimer.cancel();  if (cleanupGlobals.compareAndSet(true,false)) {    tlcServer.removeTLCServerThread(this);    if (stateQueue != null) {      stateQueue.sEnqueue(states != null ? states : new TLCState[0]);    }    states=new TLCState[0];    if (stateQueue != null) {synchronized (stateQueue) {        stateQueue.notifyAll();      }    }    TLCGlobals.decNumWorkers();  }}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.FACET;}  }
class C{  public String buildFromCsv(final String optionsAsCsv){  return build(splitOptions(optionsAsCsv));}  }
class C{  protected Expression lt(int opPos) throws TransformerException {  return compileOperation(new Lt(),opPos);}  }
class C{  public void incTempQueueSize(){  this.stats.incInt(eventTmpQueueSizeId,1);}  }
class C{  public Collection<RunningQuery> showQueries() throws Exception {  return this.our_mgr.showQueries();}  }
class C{  public void test_agg09() throws MalformedQueryException {  final String query="PREFIX : <http://www.example.org/>\n" + "SELECT ?P (COUNT(?O) AS ?C)\n" + "WHERE { ?S ?P ?O } GROUP BY ?S";  negativeTest(query);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public String sprintf(long x) throws IllegalArgumentException {  Enumeration e=vFmt.elements();  ConversionSpecification cs=null;  char c=0;  StringBuffer sb=new StringBuffer();  while (e.hasMoreElements()) {    cs=(ConversionSpecification)e.nextElement();    c=cs.getConversionCharacter();    if (c == '\0')     sb.append(cs.getLiteral()); else     if (c == '%')     sb.append("%"); else     sb.append(cs.internalsprintf(x));  }  return sb.toString();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:19.939 -0500",hash_original_method="E0536EE704C9789715788F9D659749FC",hash_generated_method="673D0E77C6829E7F611F2082214D9A94") public X509Name(boolean reverse,Hashtable lookUp,String dirName,X509NameEntryConverter converter){  this.converter=converter;  X509NameTokenizer nTok=new X509NameTokenizer(dirName);  while (nTok.hasMoreTokens()) {    String token=nTok.nextToken();    int index=token.indexOf('=');    if (index == -1) {      throw new IllegalArgumentException("badly formatted directory string");    }    String name=token.substring(0,index);    String value=token.substring(index + 1);    DERObjectIdentifier oid=decodeOID(name,lookUp);    if (value.indexOf('+') > 0) {      X509NameTokenizer vTok=new X509NameTokenizer(value,'+');      String v=vTok.nextToken();      this.ordering.addElement(oid);      this.values.addElement(v);      this.added.addElement(FALSE);      while (vTok.hasMoreTokens()) {        String sv=vTok.nextToken();        int ndx=sv.indexOf('=');        String nm=sv.substring(0,ndx);        String vl=sv.substring(ndx + 1);        this.ordering.addElement(decodeOID(nm,lookUp));        this.values.addElement(vl);        this.added.addElement(TRUE);      }    } else {      this.ordering.addElement(oid);      this.values.addElement(value);      this.added.addElement(FALSE);    }  }  if (reverse) {    Vector o=new Vector();    Vector v=new Vector();    Vector a=new Vector();    int count=1;    for (int i=0; i < this.ordering.size(); i++) {      if (((Boolean)this.added.elementAt(i)).booleanValue()) {        o.insertElementAt(this.ordering.elementAt(i),count);        v.insertElementAt(this.values.elementAt(i),count);        a.insertElementAt(this.added.elementAt(i),count);        count++;      } else {        o.insertElementAt(this.ordering.elementAt(i),0);        v.insertElementAt(this.values.elementAt(i),0);        a.insertElementAt(this.added.elementAt(i),0);        count=1;      }    }    this.ordering=o;    this.values=v;    this.added=a;  }}  }
class C{  public static String readFileToString(File file) throws IOException {  return readFileToString(file,Charset.defaultCharset());}  }
class C{  public void readSample(SampleHolder holder){  infoQueue.peekSample(holder,dataOffsetHolder);  if (holder.data == null || holder.data.capacity() < holder.size) {    holder.replaceBuffer(holder.size);  }  if (holder.data != null) {    readData(dataOffsetHolder[0],holder.data,holder.size);  }  long nextOffset=infoQueue.moveToNextSample();  dropFragmentsTo(nextOffset);}  }
class C{  public RemoteRepositoryManager(String serverURL){  super();  this.serverURL=serverURL;}  }
class C{  public boolean isHappy(int n){  int slow, fast;  slow=fast=n;  do {    slow=digitSquareSum(slow);    fast=digitSquareSum(digitSquareSum(fast));  } while (slow != fast);  return slow == 1;}  }
class C{  public static void log(String tag,String message){  Log.d(tag,message);}  }
class C{  public void traverse(JavacASTVisitor visitor){  top().traverse(visitor);}  }
class C{  public void addPort(StoragePort port,StorageHADomain haDomain,StorageSystem.Type arrayType,String switchName,Long usage){  _systemType=arrayType;  _idToStoragePort.put(port.getId(),port);  _addressToStoragePort.put(port.getPortNetworkId(),port);  String engine=getEngine(port,haDomain,arrayType);  if (engine != null) {    if (_engineToStoragePortSet.get(engine) == null) {      _engineToStoragePortSet.put(engine,new HashSet<StoragePort>());    }    _engineToStoragePortSet.get(engine).add(port);    _storagePortToEngine.put(port,engine);  }  String directorType=getDirectorType(arrayType,haDomain);  if (directorType != null) {    if (_directorTypeToStoragePortSet.get(directorType) == null) {      _directorTypeToStoragePortSet.put(directorType,new HashSet<StoragePort>());    }    _directorTypeToStoragePortSet.get(directorType).add(port);    _storagePortToDirectorType.put(port,directorType);  }  String director=getDirector(port,haDomain);  if (director != null) {    if (_directorToStoragePortSet.get(director) == null) {      _directorToStoragePortSet.put(director,new HashSet<StoragePort>());    }    _directorToStoragePortSet.get(director).add(port);    _storagePortToDirector.put(port,director);  }  String cpu=getCpu(port,haDomain,arrayType);  if (cpu != null) {    if (_cpuToStoragePortSet.get(cpu) == null) {      _cpuToStoragePortSet.put(cpu,new HashSet<StoragePort>());    }    _cpuToStoragePortSet.get(cpu).add(port);    _storagePortToCpu.put(port,cpu);  }  if (switchName != null) {    if (_switchNameToStoragePortSet.get(switchName) == null) {      _switchNameToStoragePortSet.put(switchName,new HashSet<StoragePort>());    }    _switchNameToStoragePortSet.get(switchName).add(port);    _storagePortToSwitchName.put(port,switchName);  }  _storagePortToUsage.put(port,usage);}  }
class C{  public static void assertFalse(boolean condition){  assertTrue(!condition);}  }
class C{  public OutgoingFileTransfer createOutgoingFileTransfer(String userID){  if (userID == null) {    throw new IllegalArgumentException("userID was null");  } else   if (!StringUtils.isFullJID(userID)) {    throw new IllegalArgumentException("The provided user id was not a full JID (i.e. with resource part)");  }  return new OutgoingFileTransfer(connection.getUser(),userID,fileTransferNegotiator.getNextStreamID(),fileTransferNegotiator);}  }
class C{  public void addOldIndicationListener(TransportAddress localAddr,MessageEventHandler indicationListener){  addMessageListener(localAddr,new OldIndicationEventHandler(indicationListener));}  }
class C{  public void pullViewPositionFromModel(){  Point2D p=new Point2D.Double(getNeuron().getX(),getNeuron().getY());  this.setGlobalTranslation(p);}  }
class C{  private StorageSystem fetchSystemFromCache(Map<URI,StorageSystem> systemCache,URI storageController){  if (systemCache.containsKey(storageController)) {    return systemCache.get(storageController);  }  StorageSystem system=this.getDbClient().queryObject(StorageSystem.class,storageController);  if (null != system && !system.getInactive()) {    systemCache.put(storageController,system);  }  return system;}  }
class C{  private void scanCategories(){  presetCategories.clear();  for (  AddressbookEntry entry : entries.values()) {    addPresetCategories(entry.getCategories());  }}  }
class C{  private void initRowMap(){  m_rowmap=new int[m_table.getRowCount()];  IntIterator rows=m_table.rows();  for (int i=0; rows.hasNext(); ++i) {    m_rowmap[i]=rows.nextInt();  }}  }
class C{  @DSSource({DSSourceKind.NETWORK}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:40.046 -0500",hash_original_method="9890A8A6F25E4747FAE9BE4A49E40888",hash_generated_method="967A2AA9C5B7A76C59928E83829106FB") public static Bitmap parseToBnW(byte[] data,int length){  int valueIndex=0;  int width=data[valueIndex++] & 0xFF;  int height=data[valueIndex++] & 0xFF;  int numOfPixels=width * height;  int[] pixels=new int[numOfPixels];  int pixelIndex=0;  int bitIndex=7;  byte currentByte=0x00;  while (pixelIndex < numOfPixels) {    if (pixelIndex % 8 == 0) {      currentByte=data[valueIndex++];      bitIndex=7;    }    pixels[pixelIndex++]=bitToRGB((currentByte >> bitIndex--) & 0x01);  }  ;  if (pixelIndex != numOfPixels) {    Log.e(LOG_TAG,"parse end and size error");  }  return Bitmap.createBitmap(pixels,width,height,Bitmap.Config.ARGB_8888);}  }
class C{  public static String parseLocationInUserAgent(final String userAgent){  final String location;  final int firstOpenParenthesis=userAgent.indexOf('(');  final int lastSemicolon=userAgent.lastIndexOf(';');  final int firstClosedParenthesis=userAgent.indexOf(')');  if (lastSemicolon < firstClosedParenthesis) {    location=(firstClosedParenthesis > 0) ? userAgent.substring(lastSemicolon + 1,firstClosedParenthesis).trim() : userAgent.substring(lastSemicolon + 1).trim();  } else {    if (firstOpenParenthesis < userAgent.length()) {      if (firstClosedParenthesis > firstOpenParenthesis) {        location=userAgent.substring(firstOpenParenthesis + 1,firstClosedParenthesis).trim();      } else {        location=userAgent.substring(firstOpenParenthesis + 1).trim();      }    } else {      location="";    }  }  return location;}  }
class C{  public Task<VolumeRestRep> deactivate(URI id){  return deactivate(id,VolumeDeleteTypeEnum.FULL);}  }
class C{  @Override public boolean isConnected(){  if (clientCache == null) {    return false;  }  return !clientCache.isClosed();}  }
class C{  public void addRunConfiguration(Project project,String name,Properties properties){  try {    J2SEProjectConfigurations.createConfigurationFiles(project,name,properties,null);  } catch (  IOException ex) {    Exceptions.printStackTrace(ex);  }catch (  IllegalArgumentException ex) {    Exceptions.printStackTrace(ex);  }}  }
class C{  private void cacheRelatedFiles(LessSource source){  Set<File> files=Sets.newHashSet();  addRelatedFiles(source,files);  setCached("LESS:" + source.getAbsolutePath(),files);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.NAMESPACE___NAMESPACE_1:    setNamespace_1(NAMESPACE_1_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  private String testConfiguration(File file,int port) throws BindException {  final String path;  try {    path=(file == null) ? null : file.getCanonicalPath();  } catch (  IOException x) {    final String err="Failed to test configuration " + file + ": "+ x;    log.trace("testConfiguration",err);    log.debug("testConfiguration",x);    return err;  }  final String config=(path == null) ? "Default config file" : path;  System.out.println("***");  System.out.println("*** Testing configuration (port=" + port + "): "+ path);  System.out.println("***");  System.setProperty("com.sun.management.jmxremote.port",Integer.toString(port));  if (path != null)   System.setProperty("com.sun.management.config.file",path); else   System.getProperties().remove("com.sun.management.config.file");  log.trace("testConfiguration","com.sun.management.jmxremote.port=" + port);  if (path != null && log.isDebugOn())   log.trace("testConfiguration","com.sun.management.config.file=" + path);  checkSslConfiguration();  final JMXConnectorServer cs;  try {    cs=ConnectorBootstrap.initialize();  } catch (  AgentConfigurationError x) {    if (x.getCause() instanceof ExportException) {      if (x.getCause().getCause() instanceof BindException) {        throw (BindException)x.getCause().getCause();      }    }    final String err="Failed to initialize connector:" + "\n\tcom.sun.management.jmxremote.port=" + port + ((path != null) ? "\n\tcom.sun.management.config.file=" + path : "\n\t" + config)+ "\n\tError is: "+ x;    log.trace("testConfiguration",err);    log.debug("testConfiguration",x);    return err;  }catch (  Exception x) {    log.debug("testConfiguration",x);    return x.toString();  }  try {    JMXServiceURL url=new JMXServiceURL("rmi",null,0,"/jndi/rmi://localhost:" + port + "/jmxrmi");    try {      testCommunication(url);    } catch (    Exception x) {      final String err="Failed to connect to agent {url=" + url + "}: "+ x;      log.trace("testConfiguration",err);      log.debug("testConfiguration",x);      return err;    }  } catch (  Exception x) {    final String err="Failed to test configuration " + config + ": "+ x;    log.trace("testConfiguration",err);    log.debug("testConfiguration",x);    return err;  } finally {    try {      cs.stop();    } catch (    Exception x) {      final String err="Failed to terminate: " + x;      log.trace("testConfiguration",err);      log.debug("testConfiguration",x);    }  }  System.out.println("Configuration " + config + " successfully tested");  return null;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  sage.plugin.PluginWrapper pluggy=getPlugin(stack);  if (pluggy != null) {    if (pluggy.isServerPluginInfo()) {      stack.push(pluggy);      return makeNetworkedCall(stack);    }    SageTVPlugin realPlug=sage.plugin.CorePluginManager.getInstance().getRealPlugin(pluggy.getId());    if (realPlug != null) {      if (stack.getUIMgr() != null) {        Catbert.uiContextThreadNames.set(stack.getUIMgr().getLocalUIClientName());      }      return realPlug.getConfigSettings();    }  }  return Pooler.EMPTY_STRING_ARRAY;}  }
