class C{  private static void dualPivotQuicksort(int[] a,int left,int right){  int sixth=(right - left + 1) / 6;  int e1=left + sixth;  int e5=right - sixth;  int e3=(left + right) >>> 1;  int e4=e3 + sixth;  int e2=e3 - sixth;  int ae1=a[e1], ae2=a[e2], ae3=a[e3], ae4=a[e4], ae5=a[e5];  if (ae1 > ae2) {    int t=ae1;    ae1=ae2;    ae2=t;  }  if (ae4 > ae5) {    int t=ae4;    ae4=ae5;    ae5=t;  }  if (ae1 > ae3) {    int t=ae1;    ae1=ae3;    ae3=t;  }  if (ae2 > ae3) {    int t=ae2;    ae2=ae3;    ae3=t;  }  if (ae1 > ae4) {    int t=ae1;    ae1=ae4;    ae4=t;  }  if (ae3 > ae4) {    int t=ae3;    ae3=ae4;    ae4=t;  }  if (ae2 > ae5) {    int t=ae2;    ae2=ae5;    ae5=t;  }  if (ae2 > ae3) {    int t=ae2;    ae2=ae3;    ae3=t;  }  if (ae4 > ae5) {    int t=ae4;    ae4=ae5;    ae5=t;  }  a[e1]=ae1;  a[e3]=ae3;  a[e5]=ae5;  int pivot1=ae2;  a[e2]=a[left];  int pivot2=ae4;  a[e4]=a[right];  int less=left + 1;  int great=right - 1;  boolean pivotsDiffer=(pivot1 != pivot2);  if (pivotsDiffer) {    outer:     for (int k=less; k <= great; k++) {      int ak=a[k];      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else       if (ak > pivot2) {        while (a[great] > pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=a[great];          a[great--]=ak;        }      }    }  } else {    for (int k=less; k <= great; k++) {      int ak=a[k];      if (ak == pivot1) {        continue;      }      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else {        while (a[great] > pivot1) {          great--;        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=pivot1;          a[great--]=ak;        }      }    }  }  a[left]=a[less - 1];  a[less - 1]=pivot1;  a[right]=a[great + 1];  a[great + 1]=pivot2;  doSort(a,left,less - 2);  doSort(a,great + 2,right);  if (!pivotsDiffer) {    return;  }  if (less < e1 && great > e5) {    while (a[less] == pivot1) {      less++;    }    while (a[great] == pivot2) {      great--;    }    outer:     for (int k=less; k <= great; k++) {      int ak=a[k];      if (ak == pivot2) {        while (a[great] == pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] == pivot1) {          a[k]=a[less];          a[less++]=pivot1;        } else {          a[k]=a[great];        }        a[great--]=pivot2;      } else       if (ak == pivot1) {        a[k]=a[less];        a[less++]=pivot1;      }    }  }  doSort(a,less,great);}  }
class C{  public boolean isHostSimultaneitySupported(){  return mHostSimultaneitySupported;}  }
class C{  private static <T>PriorityQueue<T> difference(PriorityQueue<T> set1,PriorityQueue<T> set2){  PriorityQueue<T> difference=new PriorityQueue<>(set1);  difference.removeAll(set2);  return difference;}  }
class C{  public HessianProtocolException(String message){  super(message);}  }
class C{  @Override public void assertEquals(String message,Object expectedObj,Object actualObj){  ANOVAMatrix expected=(ANOVAMatrix)expectedObj;  ANOVAMatrix actual=(ANOVAMatrix)actualObj;  message=message + " - ANOVA-Matrix \"" + actual.getSource()+ "\" does not match the expected Matrix";  double[][] expectedProbabilities=expected.getProbabilities();  double[][] actualProbabilities=actual.getProbabilities();  for (int i=0; i < expectedProbabilities.length; i++) {    for (int j=0; j < expectedProbabilities[i].length; j++) {      Assert.assertEquals(message + " : probabilities are not equal",expectedProbabilities[i][j],actualProbabilities[i][j],1E-15);    }  }  Assert.assertEquals(message + " : significance levels are not equal",expected.getSignificanceLevel(),actual.getSignificanceLevel(),1E-15);}  }
class C{  public Loader load(String imageUrl){  ImageUrl=imageUrl;  return this;}  }
class C{  public CGraphSettingsDialog(final JFrame parent,final String topic,final ZyGraphViewSettings settings,final boolean isDefaultSettingsDialog,final boolean isCallgraph){  super(parent,topic,true);  Preconditions.checkNotNull(parent,"IE01586: Parent argument can not be null");  Preconditions.checkNotNull(topic,"IE01587: Topic argument can not be null");  Preconditions.checkNotNull(settings,"IE01588: Settings argument can not be null");  m_settings=settings;  new CDialogEscaper(this);  setLayout(new BorderLayout());  add(createTabbedPane(isDefaultSettingsDialog,isCallgraph),BorderLayout.CENTER);  add(new CPanelTwoButtons(new InternalListener(),"OK","Cancel"),BorderLayout.SOUTH);  pack();  GuiHelper.centerChildToParent(parent,this,true);}  }
class C{  private void addGlobalHotkeys(){  if (!globalHotkeysRegister) {    return;  }  for (  Hotkey hotkey : hotkeys) {    if (doesHotkeyHaveAction(hotkey) && hotkey.type == Type.GLOBAL) {      addGlobalHotkey(hotkey);    }  }}  }
class C{  public PennTreebankReader(String treebankHome,String[] sections,String parseViewName) throws Exception {  super(CorpusReaderConfigurator.buildResourceManager(PENN_TREEBANK_WSJ,treebankHome));  this.parseViewName=parseViewName;  combinedWSJHome=treebankHome;  if (sections == null)   this.sections=IOUtils.lsDirectories(combinedWSJHome); else {    this.sections=new String[sections.length];    System.arraycopy(sections,0,this.sections,0,sections.length);  }  updateCurrentFiles();}  }
class C{  private void installSubcomponents(){  int decorationStyle=getWindowDecorationStyle();  if (decorationStyle == JRootPane.FRAME) {    createActions();    menuBar=createMenuBar();    add(menuBar);    createButtons();    add(iconifyButton);    add(toggleButton);    add(closeButton);  } else   if (decorationStyle == JRootPane.PLAIN_DIALOG || decorationStyle == JRootPane.INFORMATION_DIALOG || decorationStyle == JRootPane.ERROR_DIALOG || decorationStyle == JRootPane.COLOR_CHOOSER_DIALOG || decorationStyle == JRootPane.FILE_CHOOSER_DIALOG || decorationStyle == JRootPane.QUESTION_DIALOG || decorationStyle == JRootPane.WARNING_DIALOG) {    createActions();    createButtons();    add(closeButton);  }}  }
class C{  public static <E extends Comparable<E>>MinMaxPriorityQueue<E> create(Iterable<? extends E> initialContents){  return new Builder<E>(Ordering.<E>natural()).create(initialContents);}  }
class C{  public static void writeFully(FileChannel channel,ByteBuffer src) throws IOException {  do {    channel.write(src);  } while (src.remaining() > 0);}  }
class C{  private void checkAndLoadDependentExtensions(){  boolean changed=false;  for (  Entry<String,AddOnClassLoader> entry : new HashMap<>(addOnLoaders).entrySet()) {    AddOn runningAddOn=aoc.getAddOn(entry.getKey());    for (    String extClassName : runningAddOn.getExtensionsWithDeps()) {      if (!runningAddOn.isExtensionLoaded(extClassName)) {        AddOn.AddOnRunRequirements reqs=runningAddOn.calculateExtensionRunRequirements(extClassName,aoc.getInstalledAddOns());        ExtensionRunRequirements extReqs=reqs.getExtensionRequirements().get(0);        if (extReqs.isRunnable()) {          List<AddOnClassLoader> dependencies=new ArrayList<>(extReqs.getDependencies().size());          for (          AddOn addOnDep : extReqs.getDependencies()) {            dependencies.add(addOnLoaders.get(addOnDep.getId()));          }          AddOnClassLoader extAddOnClassLoader=new AddOnClassLoader(entry.getValue(),dependencies,runningAddOn.getExtensionAddOnClassnames(extClassName));          Extension ext=loadAddOnExtension(runningAddOn,extReqs.getClassname(),extAddOnClassLoader);          AddOnInstaller.installAddOnExtension(runningAddOn,ext);          runnableAddOns.get(runningAddOn).add(extReqs.getClassname());          changed=true;        }      }    }  }  if (changed) {    saveAddOnsRunState(runnableAddOns);  }}  }
class C{  private void removeEldestViewMap(FacesContext facesContext,Map<String,Object> eldestViewMap){  if (LOGGER.isLoggable(Level.FINEST)) {    LOGGER.log(Level.FINEST,"Removing eldest view map: {0}",eldestViewMap);  }  if (contextManager != null) {    contextManager.clear(facesContext,eldestViewMap);  }  destroyBeans(facesContext,eldestViewMap);}  }
class C{  private void createEntityCollisionMap(){  Point targetPoint=new Point(goalNode.getX(),goalNode.getY());  resistanceMap=new ResistanceMap(zone.getWidth(),zone.getHeight());  for (  final RPObject obj : zone) {    final Entity otherEntity=(Entity)obj;    if (!entity.getID().equals(otherEntity.getID()) && (otherEntity.stopped() || (otherEntity.squaredDistance(startNode.getX(),startNode.getY()) < COLLISION_DISTANCE_SQUARED))) {      final Rectangle2D area=otherEntity.getArea();      if ((entity instanceof Player) && (otherEntity instanceof Portal) && area.contains(targetPoint)) {        continue;      }      int resistance=otherEntity.getResistance(entity);      resistanceMap.addResistance(area,resistance);    }  }}  }
class C{  public void endDrag() throws IOException {  writeCode(END_DRAG);}  }
class C{  public void removeChangeListener(ChangeListener l){  changeSupport.removeChangeListener(l);}  }
class C{  protected Raster loadRasterFile(String path) throws IOException {  Raster raster=new Raster(rasterWidth,rasterLength,bytesPerPixel,dataType,path);switch (layerType) {case none:case footprint:case viewshed:case derivative:    break;case elevation:  rasterFile.loadHeightMap(raster);this.dataType=DataType.Float;return (raster);case colorimage:rasterFile.loadRGBA(raster);this.dataType=DataType.Integer;return (raster);case field:rasterFile.load(raster);this.dataType=DataType.Float;return (raster);case grayimage:rasterFile.loadGray(raster);this.dataType=DataType.UnsignedByte;return (raster);}raster.flush();return (null);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:42.277 -0500",hash_original_method="0631173DC9A08156235F49544FA05E79",hash_generated_method="8777EF77154143908F742F2AE2D340C4") private static ArrayList<File> splitDexPath(String path){  return splitPaths(path,null,false);}  }
class C{  @Override public void addBounds(Bounds<Double> bounds){  throw new RuntimeException("Not implemented for wrapper.");}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader1=null;  String inputHeader2=null;  String outputHeader=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader1=args[0];  inputHeader2=args[1];  outputHeader=args[2];  if (inputHeader1.isEmpty() || outputHeader.isEmpty() || inputHeader2.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    float progress=0;    int numCells1=0;    int numCells2=0;    int i=0;    WhiteboxRasterInfo inputFile1=new WhiteboxRasterInfo(inputHeader1);    int rows1=inputFile1.getNumberRows();    int cols1=inputFile1.getNumberColumns();    double noData1=inputFile1.getNoDataValue();    WhiteboxRasterInfo inputFile2=new WhiteboxRasterInfo(inputHeader2);    int rows2=inputFile2.getNumberRows();    int cols2=inputFile2.getNumberColumns();    double noData2=inputFile2.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData1);    outputFile.setPreferredPalette(inputFile1.getPreferredPalette());    double minValue1=inputFile1.getMinimumValue();    double maxValue1=inputFile1.getMaximumValue();    int numBins1=Math.max(2 * (int)Math.ceil(maxValue1 - minValue1 + 1),(int)Math.ceil(Math.pow(rows1 * cols1,1.0 / 3)));    double binSize=(maxValue1 - minValue1) / numBins1;    long[] histogram=new long[numBins1];    int binNum;    int numBinsLessOne1=numBins1 - 1;    double[] data;    updateProgress("Loop 1 of 3: ",0);    for (row=0; row < rows1; row++) {      data=inputFile1.getRowValues(row);      for (col=0; col < cols1; col++) {        z=data[col];        if (z != noData1) {          numCells1++;          binNum=(int)((z - minValue1) / binSize);          if (binNum > numBinsLessOne1) {            binNum=numBinsLessOne1;          }          histogram[binNum]++;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows1 - 1));      updateProgress("Loop 1 of 3: ",(int)progress);    }    updateProgress("Loop 2 of 3: ",0);    double[] cdf=new double[numBins1];    cdf[0]=histogram[0];    for (i=1; i < numBins1; i++) {      cdf[i]=cdf[i - 1] + histogram[i];    }    for (i=0; i < numBins1; i++) {      cdf[i]=cdf[i] / numCells1;    }    double minValue2=inputFile2.getMinimumValue();    double maxValue2=inputFile2.getMaximumValue();    int numBins2=Math.max(2 * (int)Math.ceil(maxValue2 - minValue2 + 1),(int)Math.ceil(Math.pow(rows2 * cols2,1.0 / 3)));    int numBinsLessOne2=numBins2 - 1;    long[] histogram2=new long[numBins2];    double[][] referenceCDF=new double[numBins2][2];    for (row=0; row < rows2; row++) {      data=inputFile2.getRowValues(row);      for (col=0; col < cols2; col++) {        z=data[col];        if (z != noData2) {          numCells2++;          binNum=(int)((z - minValue2) / binSize);          if (binNum > numBinsLessOne2) {            binNum=numBinsLessOne2;          }          histogram2[binNum]++;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows1 - 1));      updateProgress("Loop 2 of 3: ",(int)progress);    }    referenceCDF[0][1]=histogram2[0];    for (i=1; i < numBins2; i++) {      referenceCDF[i][1]=referenceCDF[i - 1][1] + histogram2[i];    }    for (i=0; i < numBins2; i++) {      referenceCDF[i][0]=minValue2 + (i / (float)numBins2) * (maxValue2 - minValue2);      referenceCDF[i][1]=referenceCDF[i][1] / numCells2;    }    int[] startingVals=new int[11];    double pVal=0;    for (i=0; i < numBins2; i++) {      pVal=referenceCDF[i][1];      if (pVal < 0.1) {        startingVals[1]=i;      }      if (pVal < 0.2) {        startingVals[2]=i;      }      if (pVal < 0.3) {        startingVals[3]=i;      }      if (pVal < 0.4) {        startingVals[4]=i;      }      if (pVal < 0.5) {        startingVals[5]=i;      }      if (pVal < 0.6) {        startingVals[6]=i;      }      if (pVal < 0.7) {        startingVals[7]=i;      }      if (pVal < 0.8) {        startingVals[8]=i;      }      if (pVal < 0.9) {        startingVals[9]=i;      }      if (pVal <= 1) {        startingVals[10]=i;      }    }    updateProgress("Loop 3 of 3: ",0);    int j=0;    double xVal=0;    double x1, x2, p1, p2;    for (row=0; row < rows1; row++) {      data=inputFile1.getRowValues(row);      for (col=0; col < cols1; col++) {        z=data[col];        if (z != noData1) {          binNum=(int)((z - minValue1) / binSize);          if (binNum > numBinsLessOne1) {            binNum=numBinsLessOne1;          }          pVal=cdf[binNum];          j=(int)(Math.floor(pVal * 10));          for (i=startingVals[j]; i < numBins2; i++) {            if (referenceCDF[i][1] > pVal) {              if (i > 0) {                x1=referenceCDF[i - 1][0];                x2=referenceCDF[i][0];                p1=referenceCDF[i - 1][1];                p2=referenceCDF[i][1];                if (p1 != p2) {                  xVal=x1 + ((x2 - x1) * ((pVal - p1) / (p2 - p1)));                } else {                  xVal=x1;                }              } else {                xVal=referenceCDF[i][0];              }              break;            }          }          outputFile.setValue(row,col,xVal);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows1 - 1));      updateProgress("Loop 3 of 3: ",(int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile1.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static short toShort(byte[] bytes){  return toShort(bytes[0],bytes[1]);}  }
class C{  private void touchLastSeekingTime(){  lastSeekingTime=new Date();}  }
class C{  private boolean updateIndices(Device device,Long deviceKey){  if (!primaryIndex.updateIndex(device,deviceKey)) {    return false;  }  IEntityClass entityClass=device.getEntityClass();  ClassState classState=getClassState(entityClass);  if (classState.classIndex != null) {    if (!classState.classIndex.updateIndex(device,deviceKey))     return false;  }  return true;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION__TYPE_ARGS:    return typeArgs != null && !typeArgs.isEmpty();case N4JSPackage.PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION__TARGET:  return target != null;case N4JSPackage.PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION__PROPERTY:return property != null;case N4JSPackage.PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION__PROPERTY_AS_TEXT:return PROPERTY_AS_TEXT_EDEFAULT == null ? propertyAsText != null : !PROPERTY_AS_TEXT_EDEFAULT.equals(propertyAsText);}return super.eIsSet(featureID);}  }
class C{  public NotificationChain basicSetDeclaredName(LiteralOrComputedPropertyName newDeclaredName,NotificationChain msgs){  LiteralOrComputedPropertyName oldDeclaredName=declaredName;  declaredName=newDeclaredName;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.PROPERTY_ASSIGNMENT_ANNOTATION_LIST__DECLARED_NAME,oldDeclaredName,newDeclaredName);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public AbstractCacheServer(InternalCache cache){  this(cache,true);}  }
class C{  public final int readInt() throws IOException {  readFully(scratch,0,SizeOf.INT);  return Memory.peekInt(scratch,0,ByteOrder.BIG_ENDIAN);}  }
class C{  public long version(){  return version;}  }
class C{  public static char[] encode(byte[] in,int iOff,int iLen){  int oDataLen=(iLen * 4 + 2) / 3;  int oLen=((iLen + 2) / 3) * 4;  char[] out=new char[oLen];  int ip=iOff;  int iEnd=iOff + iLen;  int op=0;  while (ip < iEnd) {    int i0=in[ip++] & 0xff;    int i1=ip < iEnd ? in[ip++] & 0xff : 0;    int i2=ip < iEnd ? in[ip++] & 0xff : 0;    int o0=i0 >>> 2;    int o1=((i0 & 3) << 4) | (i1 >>> 4);    int o2=((i1 & 0xf) << 2) | (i2 >>> 6);    int o3=i2 & 0x3F;    out[op++]=map1[o0];    out[op++]=map1[o1];    out[op]=op < oDataLen ? map1[o2] : '=';    op++;    out[op]=op < oDataLen ? map1[o3] : '=';    op++;  }  return out;}  }
class C{  public Object clone(){  if (MODELMBEAN_LOGGER.isLoggable(Level.FINER)) {    MODELMBEAN_LOGGER.logp(Level.FINER,ModelMBeanNotificationInfo.class.getName(),"clone()","Entry");  }  return (new ModelMBeanNotificationInfo(this));}  }
class C{  public ObjectNotFoundException(ClassEnum classEnum,String businessKey){  super(generateMessage(classEnum,businessKey),classEnum,businessKey);}  }
class C{  public static List<UpdateRequestProcessor> procToList(UpdateRequestProcessor proc){  List<UpdateRequestProcessor> result=new ArrayList<UpdateRequestProcessor>(7);  while (null != proc) {    result.add(proc);    proc=proc.next;  }  return result;}  }
class C{  public void throwException() throws BufferUnderflowException, BufferOverflowException, UnmappableCharacterException, MalformedInputException, CharacterCodingException {switch (this.type) {case TYPE_UNDERFLOW:    throw new BufferUnderflowException();case TYPE_OVERFLOW:  throw new BufferOverflowException();case TYPE_UNMAPPABLE_CHAR:throw new UnmappableCharacterException(this.length);case TYPE_MALFORMED_INPUT:throw new MalformedInputException(this.length);default :throw new CharacterCodingException();}}  }
class C{  public SQLException(String theReason,String theSQLState,Throwable theCause){  super(theReason,theCause);  SQLState=theSQLState;}  }
class C{  public static boolean isNotInRealVNXRG(Volume volume,DbClient dbClient){  if (volume != null && volume.isInCG() && ControllerUtils.isVnxVolume(volume,dbClient)) {    BlockConsistencyGroup consistencyGroup=dbClient.queryObject(BlockConsistencyGroup.class,volume.getConsistencyGroup());    if (consistencyGroup != null && !consistencyGroup.getInactive()) {      return !consistencyGroup.getArrayConsistency();    }  }  return false;}  }
class C{  private JSONObject copyFile(File srcFile,File destFile) throws IOException, InvalidModificationException, JSONException {  if (destFile.exists() && destFile.isDirectory()) {    throw new InvalidModificationException("Can't rename a file to a directory");  }  copyAction(srcFile,destFile);  return makeEntryForFile(destFile);}  }
class C{  public void drawResultBitmap(Bitmap barcode){  resultBitmap=barcode;  invalidate();}  }
class C{  public String layoutText(SynthContext ss,FontMetrics fm,String text,Icon icon,int hAlign,int vAlign,int hTextPosition,int vTextPosition,Rectangle viewR,Rectangle iconR,Rectangle textR,int iconTextGap){  if (icon instanceof SynthIcon) {    SynthIconWrapper wrapper=SynthIconWrapper.get((SynthIcon)icon,ss);    String formattedText=SwingUtilities.layoutCompoundLabel(ss.getComponent(),fm,text,wrapper,vAlign,hAlign,vTextPosition,hTextPosition,viewR,iconR,textR,iconTextGap);    SynthIconWrapper.release(wrapper);    return formattedText;  }  return SwingUtilities.layoutCompoundLabel(ss.getComponent(),fm,text,icon,vAlign,hAlign,vTextPosition,hTextPosition,viewR,iconR,textR,iconTextGap);}  }
class C{  public void check(){  DateTime now=DateTime.now();  DateTime last=lastPomodoroStorage.get();  if (!Utils.isTheSamePomodoroDay(last,now)) {    pomodorosDoneStorage.set(0);  }}  }
class C{  public NetworkTest(long seed){  super(seed);}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  public void addTag(DescriptorElement element){  Identifier id=element.getTag().getIdentifier();  if (id != null) {    if (getTagByIdentifier(element.getTag(),id.getIdentifier(element)) != null) {      throw new IllegalStateException();    }  }  addElement(element.getTag(),element,getRootElement());}  }
class C{  @Override public String toString(){  if (string != null) {    return string;  }  StringBuilder result=new StringBuilder();  if (scheme != null) {    result.append(scheme);    result.append(':');  }  if (opaque) {    result.append(schemeSpecificPart);  } else {    if (authority != null) {      result.append("//");      result.append(authority);    }    if (path != null) {      result.append(path);    }    if (query != null) {      result.append('?');      result.append(query);    }  }  if (fragment != null) {    result.append('#');    result.append(fragment);  }  string=result.toString();  return string;}  }
class C{  public static GdbInfoArgs parse(GdbOutput gdbOutput) throws GdbParseException {  String output=gdbOutput.getOutput();  Map<String,String> variables=new HashMap<>();  for (  String line : output.split("\n")) {    Matcher matcher=GDB_ARGS.matcher(line);    if (matcher.find()) {      String variable=matcher.group(1);      String value=matcher.group(2);      variables.put(variable,value);    }  }  return new GdbInfoArgs(variables);}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public void release(){  this.basenameExpression=null;  this.var=null;}  }
class C{  public String sprintf(String x) throws IllegalArgumentException {  Enumeration e=vFmt.elements();  ConversionSpecification cs=null;  char c=0;  StringBuffer sb=new StringBuffer();  while (e.hasMoreElements()) {    cs=(ConversionSpecification)e.nextElement();    c=cs.getConversionCharacter();    if (c == '\0')     sb.append(cs.getLiteral()); else     if (c == '%')     sb.append("%"); else     sb.append(cs.internalsprintf(x));  }  return sb.toString();}  }
class C{  void handleCipher(ParsedDirective pd) throws SaslException {  String token;  TokenParser parser;  if (0 != m_cipherOptions)   throw new SaslException("Too many cipher directives.");  parser=new TokenParser(pd.getValue());  token=parser.parseToken();  for (token=parser.parseToken(); token != null; token=parser.parseToken()) {    if ("3des".equals(token))     m_cipherOptions|=CIPHER_3DES; else     if ("des".equals(token))     m_cipherOptions|=CIPHER_DES; else     if ("rc4-40".equals(token))     m_cipherOptions|=CIPHER_RC4_40; else     if ("rc4".equals(token))     m_cipherOptions|=CIPHER_RC4; else     if ("rc4-56".equals(token))     m_cipherOptions|=CIPHER_RC4_56; else     m_cipherOptions|=CIPHER_UNRECOGNIZED;  }  if (m_cipherOptions == 0)   m_cipherOptions=CIPHER_UNRECOGNIZED;}  }
class C{  public InvalidCipherTextException(String message,Throwable cause){  super(message,cause);}  }
class C{  private double cutoffGaussian(){  double upperTail=1.0 - getAlpha() / 2.0;  double epsilon=1e-14;  double lowerBound=-1.0;  double upperBound=0.0;  while (RandomUtil.getInstance().normalCdf(0,1,upperBound) < upperTail) {    lowerBound+=1.0;    upperBound+=1.0;  }  while (upperBound >= lowerBound + epsilon) {    double midPoint=lowerBound + (upperBound - lowerBound) / 2.0;    if (RandomUtil.getInstance().normalCdf(0,1,midPoint) <= upperTail) {      lowerBound=midPoint;    } else {      upperBound=midPoint;    }  }  return lowerBound;}  }
class C{  public void cancelEditing(JTree tree){  if (editingComponent != null) {    completeEditing(false,true,false);  }}  }
class C{  private void obtainStyledAttributes(@Nullable final AttributeSet attributeSet){  TypedArray typedArray=getContext().obtainStyledAttributes(attributeSet,R.styleable.PasswordEditText);  try {    obtainPasswordVerificationPrefix(typedArray);  }  finally {    typedArray.recycle();  }}  }
class C{  public String write(GregorianCalendar date) throws Exception {  return transform.write(date.getTime());}  }
class C{  @CheckReturnValue @Nonnull static public String escapeString(@Nonnull String s){  return s.replaceAll(" ","%20").replaceAll("#","%23").replaceAll("&","%26").replaceAll("'","%27").replaceAll("\"","%22").replaceAll("<","%3C").replaceAll(">","%3E");}  }
class C{  public void die(){  alive=false;}  }
class C{  public void closeAll(){  List<Map.Entry<Window,WindowOpenInfo>> entries=new ArrayList<>(windowOpenMode.entrySet());  for (int i=entries.size() - 1; i >= 0; i--) {    WebWindow window=(WebWindow)entries.get(i).getKey();    if (window instanceof WebWindow.Editor) {      ((WebWindow.Editor)window).releaseLock();    }    closeWindow(window,entries.get(i).getValue());  }  disableSavingScreenHistory=false;  windowOpenMode.clear();  windows.clear();}  }
class C{  protected void computeSubdivisions(DrawContext dc,ShapeData shapeData){  int minDivisions=0;  int maxDivisions=6;  if (shapeData.getExtent() != null) {    for (int divisions=minDivisions; divisions <= maxDivisions; divisions++) {      this.subdivisions=divisions;      if (this.sufficientDetail(dc,divisions,shapeData))       break;    }  }}  }
class C{  public BaleenPipeline(String name,CollectionProcessingEngine engine){  super(name,engine);}  }
class C{  private boolean checkCurrentAnimationPart(AnimationPart part){switch (part) {case FIRST:{      return mLoadingAnimationTime < getAnimationTimePart(AnimationPart.FOURTH);    }case SECOND:case THIRD:{    return mLoadingAnimationTime < getAnimationTimePart(part);  }case FOURTH:{  return mLoadingAnimationTime > getAnimationTimePart(AnimationPart.THIRD);}default :return false;}}  }
class C{  public ColorRGBA(String hexCode){  super(parseHexCode(hexCode));}  }
class C{  public void release(){  CUR_WRITER.remove();}  }
class C{  public void decode(int[] received,int twoS) throws ReedSolomonException {  GenericGFPoly poly=new GenericGFPoly(field,received);  int[] syndromeCoefficients=new int[twoS];  boolean dataMatrix=field.equals(GenericGF.DATA_MATRIX_FIELD_256);  boolean noError=true;  for (int i=0; i < twoS; i++) {    int eval=poly.evaluateAt(field.exp(dataMatrix ? i + 1 : i));    syndromeCoefficients[syndromeCoefficients.length - 1 - i]=eval;    if (eval != 0) {      noError=false;    }  }  if (noError) {    return;  }  GenericGFPoly syndrome=new GenericGFPoly(field,syndromeCoefficients);  GenericGFPoly[] sigmaOmega=runEuclideanAlgorithm(field.buildMonomial(twoS,1),syndrome,twoS);  GenericGFPoly sigma=sigmaOmega[0];  GenericGFPoly omega=sigmaOmega[1];  int[] errorLocations=findErrorLocations(sigma);  int[] errorMagnitudes=findErrorMagnitudes(omega,errorLocations,dataMatrix);  for (int i=0; i < errorLocations.length; i++) {    int position=received.length - 1 - field.log(errorLocations[i]);    if (position < 0) {      throw new ReedSolomonException("Bad error location");    }    received[position]=GenericGF.addOrSubtract(received[position],errorMagnitudes[i]);  }}  }
class C{  public void add(Geometry geom){  if (geom instanceof Point) {    add(geom.getCoordinate());  } else   if (geom instanceof GeometryCollection) {    GeometryCollection gc=(GeometryCollection)geom;    for (int i=0; i < gc.getNumGeometries(); i++) {      add(gc.getGeometryN(i));    }  }}  }
class C{  private boolean createDifferenceDoc(MMovement move,MMovementLineConfirm confirm){  MMovementLine mLine=confirm.getLine();  if (Env.ZERO.compareTo(confirm.getDifferenceQty()) != 0) {    MLocator loc=MLocator.get(getCtx(),mLine.getM_Locator_ID());    if (m_inventoryFrom != null && m_inventoryFrom.getM_Warehouse_ID() != loc.getM_Warehouse_ID())     m_inventoryFrom=null;    if (m_inventoryFrom == null) {      MWarehouse wh=MWarehouse.get(getCtx(),loc.getM_Warehouse_ID());      m_inventoryFrom=new MInventory(wh);      m_inventoryFrom.setDescription(Msg.translate(getCtx(),"M_MovementConfirm_ID") + " " + getDocumentNo());      if (!m_inventoryFrom.save(get_TrxName())) {        m_processMsg+="Inventory not created";        return false;      }      if (getM_Inventory_ID() == 0) {        setM_Inventory_ID(m_inventoryFrom.getM_Inventory_ID());        m_inventoryInfo=m_inventoryFrom.getDocumentNo();      } else       m_inventoryInfo+="," + m_inventoryFrom.getDocumentNo();    }    log.info("createDifferenceDoc - Difference=" + confirm.getDifferenceQty());    MInventoryLine line=new MInventoryLine(m_inventoryFrom,mLine.getM_Locator_ID(),mLine.getM_Product_ID(),mLine.getM_AttributeSetInstance_ID(),confirm.getDifferenceQty(),Env.ZERO);    line.setDescription(Msg.translate(getCtx(),"DifferenceQty"));    if (!line.save(get_TrxName())) {      m_processMsg+="Inventory Line not created";      return false;    }    confirm.setM_InventoryLine_ID(line.getM_InventoryLine_ID());  }  if (Env.ZERO.compareTo(confirm.getScrappedQty()) != 0) {    MLocator loc=MLocator.get(getCtx(),mLine.getM_LocatorTo_ID());    if (m_inventoryTo != null && m_inventoryTo.getM_Warehouse_ID() != loc.getM_Warehouse_ID())     m_inventoryTo=null;    if (m_inventoryTo == null) {      MWarehouse wh=MWarehouse.get(getCtx(),loc.getM_Warehouse_ID());      m_inventoryTo=new MInventory(wh);      m_inventoryTo.setDescription(Msg.translate(getCtx(),"M_MovementConfirm_ID") + " " + getDocumentNo());      if (!m_inventoryTo.save(get_TrxName())) {        m_processMsg+="Inventory not created";        return false;      }      if (getM_Inventory_ID() == 0) {        setM_Inventory_ID(m_inventoryTo.getM_Inventory_ID());        m_inventoryInfo=m_inventoryTo.getDocumentNo();      } else       m_inventoryInfo+="," + m_inventoryTo.getDocumentNo();    }    log.info("createDifferenceDoc - Scrapped=" + confirm.getScrappedQty());    MInventoryLine line=new MInventoryLine(m_inventoryTo,mLine.getM_LocatorTo_ID(),mLine.getM_Product_ID(),mLine.getM_AttributeSetInstance_ID(),confirm.getScrappedQty(),Env.ZERO);    line.setDescription(Msg.translate(getCtx(),"ScrappedQty"));    if (!line.save(get_TrxName())) {      m_processMsg+="Inventory Line not created";      return false;    }    confirm.setM_InventoryLine_ID(line.getM_InventoryLine_ID());  }  return true;}  }
class C{  public static Intent createCancelBatchIntent(long batchId,Context context){  Intent cancelIntent=new Intent(Constants.ACTION_CANCEL,null,context,DownloadReceiver.class);  cancelIntent.putExtra(DownloadReceiver.EXTRA_BATCH_ID,batchId);  return cancelIntent;}  }
class C{  @Override public void end(){  super.end();}  }
class C{  public PolynomialFunction derivative(){  int n=degree();  if (n == 0) {    double coef[]={0};    return new PolynomialFunction(coef);  }  double coef[]=new double[n];  for (int i=1; i <= n; i++)   coef[i - 1]=coefficients[i] * i;  return new PolynomialFunction(coef);}  }
class C{  protected boolean stringContainsSpecialCharacters(String line){  return line.indexOf(quotechar) != -1 || line.indexOf(escapechar) != -1 || line.indexOf(separator) != -1 || line.contains(DEFAULT_LINE_END) || line.contains("\r");}  }
class C{  public static char combine2bytesToU16(byte high,byte low){  char highU8=convertByte2Uint8(high);  char lowU8=convertByte2Uint8(low);  return (char)(highU8 << 8 | lowU8);}  }
class C{  @FXML private void reset(){  lineChart.getXAxis().setAutoRanging(true);  lineChart.getYAxis().setAutoRanging(true);  final ObservableList<XYChart.Series<Number,Number>> data=lineChart.getData();  lineChart.setData(FXCollections.<XYChart.Series<Number,Number>>emptyObservableList());  lineChart.setData(data);  lineChart.setData(FXCollections.<XYChart.Series<Number,Number>>emptyObservableList());  lineChart.setData(data);  lineChart.setAnimated(true);}  }
class C{  public static <T>void addArrayToCollection(T[] array,Collection<T> collection){  if (collection == null) {    collection=new ArrayList<T>();  }  for (  T o : array) {    collection.add(o);  }}  }
class C{  public void sendLoadGame(File f){  try (InputStream is=new GZIPInputStream(new FileInputStream(f))){    XStream xstream=new XStream();    game.reset();    IGame newGame=(IGame)xstream.fromXML(is);    send(new Packet(Packet.COMMAND_LOAD_GAME,new Object[]{newGame}));  } catch (  Exception e) {    e.printStackTrace();    System.out.println("Can't find local savegame " + f);  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] imageHeaders=null;  String outputHeader=null;  String outputSuffix=null;  int row, col;  double z;  double noData;  int progress;  int i, bin;  int numImages=0;  double minVal, maxVal;  int numBins=1024;  double clipPercentage=1.0;  String whichTailsToClip="both";  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  outputSuffix=" " + args[1].trim().replace(".dep","") + ".dep";  clipPercentage=Double.parseDouble(args[2]);  whichTailsToClip=args[3].toLowerCase();  numBins=Integer.parseInt(args[4]);  if ((inputFilesString == null) || (outputSuffix == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    imageHeaders=inputFilesString.split(";");    numImages=imageHeaders.length;    for (i=0; i < numImages; i++) {      WhiteboxRaster image=new WhiteboxRaster(imageHeaders[i],"r");      int nRows=image.getNumberRows();      int nCols=image.getNumberColumns();      noData=image.getNoDataValue();      double[] data=null;      double inputImageMin=image.getMinimumValue();      double inputImageMax=image.getMaximumValue();      int inputImageBins=(int)(inputImageMax - inputImageMin + 1);      double inputImageRange=inputImageMax - inputImageMin;      double[] histo=new double[inputImageBins];      for (row=0; row < nRows; row++) {        data=image.getRowValues(row);        for (col=0; col < nCols; col++) {          if (data[col] != noData) {            bin=(int)(data[col] - inputImageMin);            if (bin < 0) {              bin=0;            }            if (bin > (inputImageBins - 1)) {              bin=(inputImageBins - 1);            }            histo[bin]++;          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (nRows - 1));        updateProgress("Calculating clip values:",progress);      }      for (int a=1; a < inputImageBins; a++) {        histo[a]=histo[a] + histo[a - 1];      }      for (int a=0; a < inputImageBins; a++) {        histo[a]=histo[a] / histo[inputImageBins - 1] * 100;      }      boolean lowerTailFound=false;      boolean upperTailFound=false;      minVal=-1;      maxVal=-1;      if (whichTailsToClip.contains("both")) {        for (int a=1; a < inputImageBins; a++) {          if (histo[a] >= clipPercentage && !lowerTailFound) {            minVal=(a - 1 + inputImageMin) + (clipPercentage - histo[a - 1]) / (histo[a] - histo[a - 1]);            lowerTailFound=true;          }          if (histo[a] >= (100 - clipPercentage) && !upperTailFound) {            maxVal=(a - 1 + inputImageMin) + ((100 - clipPercentage) - histo[a - 1]) / (histo[a] - histo[a - 1]);            upperTailFound=true;            break;          }        }      } else       if (whichTailsToClip.contains("lower")) {        for (int a=1; a < inputImageBins; a++) {          if (histo[a] >= clipPercentage && !lowerTailFound) {            minVal=(a - 1 + inputImageMin) + (clipPercentage - histo[a - 1]) / (histo[a] - histo[a - 1]);            lowerTailFound=true;            break;          }        }        maxVal=inputImageMax;      } else {        for (int a=1; a < inputImageBins; a++) {          if (histo[a] >= (100 - clipPercentage) && !upperTailFound) {            maxVal=(a - 1 + inputImageMin) + ((100 - clipPercentage) - histo[a - 1]) / (histo[a] - histo[a - 1]);            upperTailFound=true;            break;          }        }        minVal=inputImageMin;      }      double scaleFactor=numBins / (maxVal - minVal);      outputHeader=imageHeaders[i].replace(".dep",outputSuffix);      WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",imageHeaders[i],WhiteboxRaster.DataType.INTEGER,noData);      output.setPreferredPalette(image.getPreferredPalette());      for (row=0; row < nRows; row++) {        data=image.getRowValues(row);        for (col=0; col < nCols; col++) {          if (data[col] != noData) {            z=(int)(data[col] - minVal) * scaleFactor;            if (z < 0) {              z=0;            }            if (z > (numBins - 1)) {              z=(numBins - 1);            }            output.setValue(row,col,z);          } else {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (nRows - 1));        updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      }      image.close();      output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      output.addMetadataEntry("Created on " + new Date());      output.close();    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @JsonCreator public static CassandraStatus create(@JsonProperty("mode") final CassandraMode mode,@JsonProperty("joined") final boolean joined,@JsonProperty("rpc_running") final boolean rpcRunning,@JsonProperty("native_transport_running") final boolean nativeTransportRunning,@JsonProperty("gossip_initialized") final boolean gossipInitialized,@JsonProperty("gossip_running") final boolean gossipRunning,@JsonProperty("host_id") final String hostId,@JsonProperty("endpoint") final String endpoint,@JsonProperty("token_count") final int tokenCount,@JsonProperty("data_center") final String dataCenter,@JsonProperty("rack") final String rack,@JsonProperty("version") final String version){  return new CassandraStatus(mode,joined,rpcRunning,nativeTransportRunning,gossipInitialized,gossipRunning,hostId,endpoint,tokenCount,dataCenter,rack,version);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element rootNode;  Node newChild;  NodeList elementList;  Node oldChild;  Node replacedChild;  doc=(Document)load("staff",true);  rootNode=doc.getDocumentElement();  newChild=doc.createAttribute("newAttribute");  elementList=doc.getElementsByTagName("employee");  oldChild=elementList.item(1);{    boolean success=false;    try {      replacedChild=rootNode.replaceChild(newChild,oldChild);    } catch (    DOMException ex) {      success=(ex.code == DOMException.HIERARCHY_REQUEST_ERR);    }    assertTrue("throw_HIERARCHY_REQUEST_ERR",success);  }}  }
class C{  public JSONObject(JSONObject jo,String[] names){  this();  for (int i=0; i < names.length; i+=1) {    try {      putOnce(names[i],jo.opt(names[i]));    } catch (    Exception ignore) {    }  }}  }
class C{  public void flush(){  flush(false);}  }
class C{  protected void reInit(){  if (isLoggingEnabled())   stackLogger.logDebug("Re-initializing !");  messageProcessors=new ArrayList<MessageProcessor>();  this.ioHandler=new IOHandler(this);  pendingTransactions=new ConcurrentHashMap<String,SIPServerTransaction>();  clientTransactionTable=new ConcurrentHashMap<String,SIPClientTransaction>();  serverTransactionTable=new ConcurrentHashMap<String,SIPServerTransaction>();  retransmissionAlertTransactions=new ConcurrentHashMap<String,SIPServerTransaction>();  mergeTable=new ConcurrentHashMap<String,SIPServerTransaction>();  this.dialogTable=new ConcurrentHashMap<String,SIPDialog>();  this.earlyDialogTable=new ConcurrentHashMap<String,SIPDialog>();  this.terminatedServerTransactionsPendingAck=new ConcurrentHashMap<String,SIPServerTransaction>();  this.forkedClientTransactionTable=new ConcurrentHashMap<String,SIPClientTransaction>();  this.timer=new Timer();  this.activeClientTransactionCount=new AtomicInteger(0);}  }
class C{  public boolean isPercentage(){  return isPercentage;}  }
class C{  public static <T extends Key<?>>NameMatcher<T> nameEquals(String compareTo){  return new NameMatcher<T>(compareTo,StringOperatorName.EQUALS);}  }
class C{  public static final String makeJavaIdentifier(String identifier){  StringBuilder modifiedIdentifier=new StringBuilder(identifier.length());  if (!Character.isJavaIdentifierStart(identifier.charAt(0))) {    modifiedIdentifier.append('_');  }  for (int i=0; i < identifier.length(); i++) {    char ch=identifier.charAt(i);    if (Character.isJavaIdentifierPart(ch) && ch != '_') {      modifiedIdentifier.append(ch);    } else     if (ch == '.') {      modifiedIdentifier.append('_');    } else {      modifiedIdentifier.append(mangleChar(ch));    }  }  if (isJavaKeyword(modifiedIdentifier.toString())) {    modifiedIdentifier.append('_');  }  return modifiedIdentifier.toString();}  }
class C{  public static String serialize(Writable writable){  return serialize(asString(writable));}  }
class C{  private PhraseChunk addPhraseWordsAndHead(PhraseChunk chunk,JCas jCas){  List<WordToken> constituentWords=new ArrayList<WordToken>();  for (  WordToken word : JCasUtil.selectCovered(jCas,WordToken.class,chunk)) {    constituentWords.add(word);  }  chunk.setConstituentWords(FSCollectionFactory.createFSArray(jCas,constituentWords));  int headWordId=constituentWords.size() - 1;  for (int a=constituentWords.size() - 2; a > 1; a--) {    WordToken wtA=constituentWords.get(a);    if ("IN".equals(wtA.getPartOfSpeech()) || ",".equals(wtA.getPartOfSpeech()) || prepositions.contains(wtA.getCoveredText())) {      headWordId=a - 1;    } else {      headWordId=a;      break;    }  }  chunk.setHeadWord(constituentWords.get(headWordId));  return chunk;}  }
class C{  public boolean checkDataFits(long dataLength){  if (data == null) {    return true;  } else {    return (dataLength <= data.length);  }}  }
class C{  int size(){  return Integer.bitCount(set);}  }
class C{  public void advance(){  moveToNextIndex();}  }
class C{  private void mergeLo(int base1,int len1,int base2,int len2){  if (DEBUG)   assert len1 > 0 && len2 > 0 && base1 + len1 == base2;  T[] a=this.a;  T[] tmp=ensureCapacity(len1);  System.arraycopy(a,base1,tmp,0,len1);  int cursor1=0;  int cursor2=base2;  int dest=base1;  a[dest++]=a[cursor2++];  if (--len2 == 0) {    System.arraycopy(tmp,cursor1,a,dest,len1);    return;  }  if (len1 == 1) {    System.arraycopy(a,cursor2,a,dest,len2);    a[dest + len2]=tmp[cursor1];    return;  }  Comparator<? super T> c=this.c;  int minGallop=this.minGallop;  outer:   while (true) {    int count1=0;    int count2=0;    do {      if (DEBUG)       assert len1 > 1 && len2 > 0;      if (c.compare(a[cursor2],tmp[cursor1]) < 0) {        a[dest++]=a[cursor2++];        count2++;        count1=0;        if (--len2 == 0)         break outer;      } else {        a[dest++]=tmp[cursor1++];        count1++;        count2=0;        if (--len1 == 1)         break outer;      }    } while ((count1 | count2) < minGallop);    do {      if (DEBUG)       assert len1 > 1 && len2 > 0;      count1=gallopRight(a[cursor2],tmp,cursor1,len1,0,c);      if (count1 != 0) {        System.arraycopy(tmp,cursor1,a,dest,count1);        dest+=count1;        cursor1+=count1;        len1-=count1;        if (len1 <= 1)         break outer;      }      a[dest++]=a[cursor2++];      if (--len2 == 0)       break outer;      count2=gallopLeft(tmp[cursor1],a,cursor2,len2,0,c);      if (count2 != 0) {        System.arraycopy(a,cursor2,a,dest,count2);        dest+=count2;        cursor2+=count2;        len2-=count2;        if (len2 == 0)         break outer;      }      a[dest++]=tmp[cursor1++];      if (--len1 == 1)       break outer;      minGallop--;    } while (count1 >= MIN_GALLOP | count2 >= MIN_GALLOP);    if (minGallop < 0)     minGallop=0;    minGallop+=2;  }  this.minGallop=minGallop < 1 ? 1 : minGallop;  if (len1 == 1) {    if (DEBUG)     assert len2 > 0;    System.arraycopy(a,cursor2,a,dest,len2);    a[dest + len2]=tmp[cursor1];  } else   if (len1 == 0) {    throw new IllegalArgumentException("Comparison method violates its general contract!");  } else {    if (DEBUG)     assert len2 == 0;    if (DEBUG)     assert len1 > 1;    System.arraycopy(tmp,cursor1,a,dest,len1);  }}  }
class C{  public boolean isReport(){  return m_AD_Process_ID != 0 || m_C_BPartner_ID == 0;}  }
class C{  public static ImageIcon createColorIcon(BasicStroke stroke,int width,int height,boolean horizontalOrientation,Color color,Color background,Color matting){  BufferedImage bigImage=new BufferedImage(width,height,BufferedImage.TYPE_INT_ARGB);  Graphics2D g=(Graphics2D)bigImage.getGraphics();  g.setBackground(OMColor.clear);  g.setPaint(OMColor.clear);  g.fillRect(0,0,width,height);  g.setPaint(background);  g.fillRect(0,0,width,height);  if (matting != null) {    BasicStroke mattedStroke=new BasicStroke(((BasicStroke)stroke).getLineWidth() + 2f);    g.setStroke(mattedStroke);    g.setPaint(matting);    g.drawLine(0,height / 2,width,height / 2);  }  g.setPaint(color);  g.setStroke(stroke);  if (horizontalOrientation) {    g.drawLine(0,height / 2,width,height / 2);  } else {    g.drawLine(width / 2,0,width / 2,height);  }  return new ImageIcon(bigImage);}  }
class C{  public void appendEncodedStringValue(EncodedStringValue value,int field){  if (null == value) {    throw new NullPointerException();  }switch (field) {case BCC:case CC:case TO:    break;default :  throw new RuntimeException("Invalid header field!");}ArrayList<EncodedStringValue> list=(ArrayList<EncodedStringValue>)mHeaderMap.get(field);if (null == list) {list=new ArrayList<EncodedStringValue>();}list.add(value);mHeaderMap.put(field,list);}  }
class C{  public void processTriple(Statement triple){  Resource s=triple.getSubject();  URI p=triple.getPredicate();  Value o=triple.getObject();  if (isSchemaTriple(triple)) {    if (p.equals(RDF.TYPE)) {      if (schemaTypes.contains(o)) {        addPropertyType((URI)s,(Resource)o);      }    } else     if (p.equals(RDFS.DOMAIN)) {      if (!o.equals(OWL.THING)) {        getProperty(s).addDomain(getClass(o));      }    } else     if (p.equals(RDFS.RANGE)) {      if (!o.equals(OWL.THING)) {        getProperty(s).addRange(getClass(o));      }    } else     if (p.equals(RDFS.SUBCLASSOF)) {      if (!o.equals(OWL.THING)) {        getClass(s).addSuperClass(getClass(o));      }    } else     if (p.equals(RDFS.SUBPROPERTYOF)) {      getProperty(s).addSuperProperty(getProperty(o));    } else     if (p.equals(OWL.EQUIVALENTCLASS)) {      getClass(s).addEquivalentClass(getClass(o));    } else     if (p.equals(OWL.EQUIVALENTPROPERTY)) {      getProperty(s).addEquivalentProperty(getProperty(o));    } else     if (p.equals(OWL.INVERSEOF)) {      getProperty(s).addInverse(getProperty(o));      getProperty(o).addInverse(getProperty(s));    } else     if (p.equals(OWL.COMPLEMENTOF)) {      getClass(s).addComplement(getClass(o));      getClass(o).addComplement(getClass(s));    } else     if (p.equals(OWL.DISJOINTWITH)) {      getClass(s).addDisjoint(getClass(o));      getClass(o).addDisjoint(getClass(s));    } else     if (p.equals(OWL2.PROPERTYDISJOINTWITH)) {      getProperty(s).addDisjoint(getProperty(o));      getProperty(o).addDisjoint(getProperty(s));    } else     if (p.equals(OWL.ONPROPERTY)) {      getClass(s).addProperty(getProperty(o));    } else     if (p.equals(OWL.SOMEVALUESFROM)) {      getClass(s).addSvf(getClass(o));    } else     if (p.equals(OWL.ALLVALUESFROM)) {      getClass(s).addAvf(getClass(o));    } else     if (p.equals(OWL2.ONCLASS)) {      getClass(s).addClass(getClass(o));    } else     if (p.equals(OWL.HASVALUE)) {      getClass(s).addValue(o);    } else     if (p.equals(OWL.MAXCARDINALITY)) {      getClass(s).setMaxCardinality(o);    } else     if (p.equals(OWL2.MAXQUALIFIEDCARDINALITY)) {      getClass(s).setMaxQualifiedCardinality(o);    }  }}  }
class C{  @Override public void process(final DM dm,final ReplyProcessor21 rp){  final long startTime=getTimestamp();  if (rp == null) {    if (logger.isTraceEnabled(LogMarker.DM)) {      logger.trace(LogMarker.DM,"PutAllReplyMessage processor not found");    }    return;  }  if (rp instanceof PutAllResponse) {    PutAllResponse processor=(PutAllResponse)rp;    processor.setResponse(this);  }  rp.process(this);  if (logger.isTraceEnabled(LogMarker.DM)) {    logger.trace(LogMarker.DM,"{} processed {}",rp,this);  }  dm.getStats().incReplyMessageTime(NanoTimer.getTime() - startTime);}  }
class C{  public void resetFragments(){  resetFragments(mCurrentPosition);}  }
class C{  public void forEachSrcOut(Allocation ain,Allocation aout){  blend(7,ain,aout);}  }
class C{  public boolean drawImage(Image img,int x,int y,Color bgcolor,ImageObserver observer){  DebugGraphicsInfo info=info();  if (debugLog()) {    info.log(toShortString() + " Drawing image: " + img+ " at: "+ new Point(x,y)+ ", bgcolor: "+ bgcolor);  }  if (isDrawingBuffer()) {    if (debugBuffered()) {      Graphics debugGraphics=debugGraphics();      debugGraphics.drawImage(img,x,y,bgcolor,observer);      debugGraphics.dispose();    }  } else   if (debugFlash()) {    int i, count=(info.flashCount * 2) - 1;    ImageProducer oldProducer=img.getSource();    ImageProducer newProducer=new FilteredImageSource(oldProducer,new DebugGraphicsFilter(info.flashColor));    Image newImage=Toolkit.getDefaultToolkit().createImage(newProducer);    DebugGraphicsObserver imageObserver=new DebugGraphicsObserver();    Image imageToDraw;    for (i=0; i < count; i++) {      imageToDraw=(i % 2) == 0 ? newImage : img;      loadImage(imageToDraw);      graphics.drawImage(imageToDraw,x,y,bgcolor,imageObserver);      Toolkit.getDefaultToolkit().sync();      sleep(info.flashTime);    }  }  return graphics.drawImage(img,x,y,bgcolor,observer);}  }
class C{  void repaintNewCaret(){  if (component != null) {    TextUI mapper=component.getUI();    Document doc=component.getDocument();    if ((mapper != null) && (doc != null)) {      Rectangle newLoc;      try {        newLoc=mapper.modelToView(component,this.dot,this.dotBias);      } catch (      BadLocationException e) {        newLoc=null;      }      if (newLoc != null) {        adjustVisibility(newLoc);        if (getMagicCaretPosition() == null) {          setMagicCaretPosition(new Point(newLoc.x,newLoc.y));        }      }      damage(newLoc);    }  }}  }
class C{  private int recursiveNodeCalculator(TSTNode currentNode,boolean checkData,int numNodes2){  if (currentNode == null) {    return numNodes2;  }  int numNodes=recursiveNodeCalculator(currentNode.relatives[TSTNode.LOKID],checkData,numNodes2);  numNodes=recursiveNodeCalculator(currentNode.relatives[TSTNode.EQKID],checkData,numNodes);  numNodes=recursiveNodeCalculator(currentNode.relatives[TSTNode.HIKID],checkData,numNodes);  if (checkData) {    if (currentNode.data != null) {      numNodes++;    }  } else {    numNodes++;  }  return numNodes;}  }
class C{  @Override public String toString(){  return data.toString();}  }
class C{  @Override protected boolean analyzeTraces(AbstractTestSuiteChromosome<? extends ExecutableChromosome> suite,List<ExecutionResult> results,Set<String> calledMethods){  boolean hasTimeoutOrTestException=false;  for (  ExecutionResult result : results) {    if (result.hasTimeout() || result.hasTestException()) {      hasTimeoutOrTestException=true;    }    for (    Entry<String,Integer> entry : result.getTrace().getMethodExecutionCount().entrySet()) {      String canonicalName=entry.getKey().replace('$','.');      if (!methods.contains(canonicalName) || removedMethods.contains(canonicalName))       continue;      if (methodCoverageMap.containsKey(canonicalName)) {        calledMethods.add(canonicalName);        result.test.addCoveredGoal(methodCoverageMap.get(canonicalName));        if (Properties.TEST_ARCHIVE) {          TestsArchive.instance.putTest(this,methodCoverageMap.get(canonicalName),result);          toRemoveMethods.add(canonicalName);          suite.isToBeUpdated(true);        }      }    }  }  return hasTimeoutOrTestException;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static void assertArrayEqual(byte[] expected,byte[] actual){  if (verbose) {    log("assertArrayEqual(" + arrayToString(expected) + ", "+ arrayToString(actual)+ ")");  }  if (expected.length != actual.length) {    TestUtils.assertBool(false);  }  for (int index=0; index < expected.length; ++index) {    assertEqual(expected[index],actual[index]);  }}  }
class C{  public void start(){  if (running) {    throw new IllegalStateException("server already running!");  }  running=true;  try {    this.threadPool=Executors.newFixedThreadPool(100);    this.serverSocket=new ServerSocket();    this.serverSocket.setReuseAddress(true);    this.serverSocket.bind(new InetSocketAddress(proxyBridgePort));  } catch (  final IOException e) {    throw new SocksException("error preparing socks5bridge server for authenticated proxy session",e);  }  new Thread(this).start();}  }
class C{  public static org.oscm.internal.vo.VOTriggerProcess convertToUp(org.oscm.vo.VOTriggerProcess oldVO){  if (oldVO == null) {    return null;  }  org.oscm.internal.vo.VOTriggerProcess newVO=new org.oscm.internal.vo.VOTriggerProcess();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setActivationDate(oldVO.getActivationDate());  newVO.setReason(oldVO.getReason());  newVO.setStatus(EnumConverter.convert(oldVO.getStatus(),org.oscm.internal.types.enumtypes.TriggerProcessStatus.class));  newVO.setTriggerDefinition(convertToUp(oldVO.getTriggerDefinition()));  newVO.setUser(convertToUp(oldVO.getUser()));  newVO.setTargetNames(oldVO.getTargetNames());  newVO.setParameter(oldVO.getParameter());  return newVO;}  }
class C{  public static boolean isAvailable(){  return proxy != null;}  }
class C{  public boolean mouseDragged(MouseEvent e){  return false;}  }
class C{  public static double norm(float[] a){  double squaredSum=0;  for (int i=0; i < a.length; i++) {    squaredSum+=a[i] * a[i];  }  return Math.sqrt(squaredSum);}  }
class C{  public DoubleVector dividedBy(DoubleVector v){  return copy().dividedByEquals(v);}  }
class C{  public void edit(MethodCall m) throws CannotCompileException {}  }
class C{  public boolean isOptionSelected(String key){  for (int i=0; i < selectionPanel.getComponents().length; i++) {    JRadioButton radioButton=(JRadioButton)selectionPanel.getComponent(i);    if (radioButton.getText().equals(getI18n(key))) {      if (radioButton.isSelected()) {        return true;      } else {        return false;      }    }  }  return false;}  }
class C{  final public boolean equals(final Object o){  if (o instanceof TextPattern) {    TextPattern p=(TextPattern)o;    return caseSensitive == p.caseSensitive && asciiCase == p.asciiCase && java.util.Arrays.equals(p.pattern,pattern);  }  return false;}  }
class C{  public final void removeCallbacksAndMessages(Object token){  mExec.removeCallbacksAndMessages(token);}  }
class C{  public boolean decodeXWapInitiatorURI(int startIndex){  return decodeTextString(startIndex);}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  System.out.print("Enter an integer: ");  long n=input.nextLong();  System.out.println("The sum of " + n + " = "+ sumDigits(n));}  }
class C{  public JsonArrayRequest(int method,String url,Listener<JSONArray> listener,ErrorListener errorListener){  super(method,url,null,listener,errorListener);}  }
class C{  public Double GetMedian(List<Double> values){  int count=values.size();  double median;  double m1;  double m2;  if ((count % 2) == 1) {    median=values.get((int)(count / 2));  } else   if (count > 0) {    m1=values.get(count / 2);    m2=values.get((count / 2) - 1);    median=(m1 + m2) / 2;  } else {    median=0;  }  return median;}  }
class C{  public Property(){}  }
class C{  final void executorTimeout(ExecutorThrottle executor,long timeout){  _executor=executor;  _activeSlowExpireTime=CurrentTime.getCurrentTimeActual() + timeout;}  }
class C{  private void prepareTestCase1(){  when(page1.canSkip()).thenReturn(false);  when(page1.isCompleted()).thenReturn(true);  when(page2.canSkip()).thenReturn(false);  when(page2.isCompleted()).thenReturn(true);  when(page3.canSkip()).thenReturn(true);  when(page3.isCompleted()).thenReturn(true);  when(page4.canSkip()).thenReturn(false);  when(page4.isCompleted()).thenReturn(true);  wizard.addPage(page1);  wizard.addPage(page2);  wizard.addPage(page3);  wizard.addPage(page4);}  }
class C{  public static XmlBuilder loadXml(String path){  return new XmlBuilder(path);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:46.954 -0500",hash_original_method="686A3AF8289E33425B30BEC25704B03B",hash_generated_method="686A3AF8289E33425B30BEC25704B03B") void clear(){  final ArrayList<Node> nodes=mNodes;  final int count=nodes.size();  for (int i=0; i < count; i++) {    nodes.get(i).release();  }  nodes.clear();  mKeyNodes.clear();  mRoots.clear();}  }
class C{  public final void fireEvent(Event event){  eventHandlers.fireEvent(event);}  }
class C{  @Override public void retry(VolleyError error) throws VolleyError {  mCurrentRetryCount++;  mCurrentTimeoutMs+=(mCurrentTimeoutMs * mBackoffMultiplier);  if (!hasAttemptRemaining()) {    throw error;  }}  }
class C{  protected Node newNode(){  return new SVGOMScriptElement();}  }
class C{  public NumericConstraint(boolean dec){  this(dec,Double.NaN,Double.NaN,null);}  }
class C{  public static void trace(byte level,String s){  trace(level,s,null);}  }
class C{  public SendableVideoMessage.SendableVideoMessageBuilder width(int width){  this.width=width;  return this;}  }
class C{  protected void updateDisplay(){  chartPanel.setChart(createChart());  invalidate();}  }
class C{  public void addWizardObserver(WizardObserver observer){  listeners.add(observer);  if (!listeningToImpl) {    l=new ImplL();    impl.addWizardObserver(l);    listeningToImpl=true;  }}  }
class C{  private void createAttachMenuBar(){  JMenuBar bar=new JMenuBar();  JMenu fileMenu=new JMenu("File");  for (  Action action : actionManager.getOpenSavePlotActions()) {    fileMenu.add(action);  }  fileMenu.addSeparator();  fileMenu.add(new CloseAction(this.getWorkspaceComponent()));  JMenu editMenu=new JMenu("Edit");  editMenu.add(new JMenuItem(RasterPlotActions.getPropertiesDialogAction(rasterPanel)));  JMenu helpMenu=new JMenu("Help");  ShowHelpAction helpAction=new ShowHelpAction("Pages/Plot/raster.html");  JMenuItem helpItem=new JMenuItem(helpAction);  helpMenu.add(helpItem);  bar.add(fileMenu);  bar.add(editMenu);  bar.add(helpMenu);  getParentFrame().setJMenuBar(bar);}  }
class C{  public static void writeLines(File file,String encoding,Collection<?> lines,boolean append) throws IOException {  writeLines(file,encoding,lines,null,append);}  }
class C{  public static void unescapeJava(Writer out,String str) throws IOException {  if (out == null) {    throw new IllegalArgumentException("The Writer must not be null");  }  if (str == null) {    return;  }  int sz=str.length();  StringBuffer unicode=new StringBuffer(4);  boolean hadSlash=false;  boolean inUnicode=false;  for (int i=0; i < sz; i++) {    char ch=str.charAt(i);    if (inUnicode) {      unicode.append(ch);      if (unicode.length() == 4) {        try {          int value=Integer.parseInt(unicode.toString(),16);          out.write((char)value);          unicode.setLength(0);          inUnicode=false;          hadSlash=false;        } catch (        NumberFormatException nfe) {          throw new NestableRuntimeException("Unable to parse unicode value: " + unicode,nfe);        }      }      continue;    }    if (hadSlash) {      hadSlash=false;switch (ch) {case '\\':        out.write('\\');      break;case '\'':    out.write('\'');  break;case '\"':out.write('"');break;case 'r':out.write('\r');break;case 'f':out.write('\f');break;case 't':out.write('\t');break;case 'n':out.write('\n');break;case 'b':out.write('\b');break;case 'u':{inUnicode=true;break;}default :out.write(ch);break;}continue;} else if (ch == '\\') {hadSlash=true;continue;}out.write(ch);}if (hadSlash) {out.write('\\');}}  }
class C{  public static void displayRows(List<List<String>> rows){  for (  List<String> row : rows) {    for (    String column : row) {      System.out.printf("%25s",column);    }    System.out.println();  }}  }
class C{  public static long hash64(final String text,int from,int length){  return hash64(text.substring(from,from + length));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:15.191 -0400",hash_original_method="D8D55646997B45206CD2F0528B603753",hash_generated_method="CD41910D170D208E7EF5E3E2D52AF223") private void doReleaseShared(){  for (; ; ) {    Node h=head;    if (h != null && h != tail) {      int ws=h.waitStatus;      if (ws == Node.SIGNAL) {        if (!compareAndSetWaitStatus(h,Node.SIGNAL,0))         continue;        unparkSuccessor(h);      } else       if (ws == 0 && !compareAndSetWaitStatus(h,0,Node.PROPAGATE))       continue;    }    if (h == head)     break;  }}  }
class C{  public void add(Aspect aspect){  this.aspect.add(aspect);}  }
class C{  public void addSelectionChangedListener(SelectionChangedListener l){  listenerList.add(SelectionChangedListener.class,l);}  }
class C{  public AttemptAndTimeBoundedExponentialBackOff(int maximumNumberOfAttempts,long initialIntervalMillis,long maximumTotalWaitTimeMillis){  this(maximumNumberOfAttempts,initialIntervalMillis,maximumTotalWaitTimeMillis,ResetPolicy.ALL,NanoClock.SYSTEM);}  }
class C{  public LZ9(){  super(30,2,22,22,1);}  }
class C{  @Override public void onDestroy(){  LOG.d(TAG,"CordovaActivity.onDestroy()");  super.onDestroy();  if (this.appView != null) {    appView.handleDestroy();  } else {    this.activityState=ACTIVITY_EXITING;  }}  }
class C{  public Compiler(){  configuration=null;}  }
class C{  private void playSong(int songId){  PlaylistType.Item item=new PlaylistType.Item();  item.songid=songId;  Player.Open action=new Player.Open(item);  action.execute(hostManager.getConnection(),defaultStringActionCallback,callbackHandler);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void unswap(IgniteCache<Integer,CacheValue> cache,int lowerBound,int upperBound) throws Exception {  resetCounters();  assertEquals(0,swapCnt.get());  assertEquals(0,unswapCnt.get());  for (int i=lowerBound; i < upperBound; i++) {    assert cache.localPeek(i,CachePeekMode.ONHEAP) == null;    cache.localPromote(Collections.singleton(i));    CacheValue val=cache.localPeek(i);    assertNotNull(val);    assertEquals(i,val.value());    assertEquals(i - lowerBound + 1,unswapCnt.get());  }  assertEquals(0,swapCnt.get());  assertEquals(unswapCnt.get(),upperBound - lowerBound);  checkEntries(cache,lowerBound,upperBound);  assertEquals(0,swapCnt.get());  assertEquals(unswapCnt.get(),upperBound - lowerBound);}  }
class C{  public void removeEventListener(SIPDialogEventListener oldListener){  eventListeners.remove(oldListener);}  }
class C{  public Transform(double scaleX,double scaleY,double skew0,double skew1,double translateX,double translateY){  super(scaleX,scaleY,skew0,skew1,translateX,translateY);}  }
class C{  public JDirectoryChooser(File currentDirectory){  super(currentDirectory);  setShowingCreateDirectory(true);}  }
class C{  public static vec3 r_cross(vec3 a,vec3 b){  float ax=a.m[0];  float ay=a.m[1];  float az=a.m[2];  float bx=b.m[0];  float by=b.m[1];  float bz=b.m[2];  float x=ay * bz - az * by;  float y=az * bx - ax * bz;  float z=ax * by - ay * bx;  vec3 result=new vec3(x,y,z);  return result;}  }
class C{  public static FilterStream create(String eventTypeName){  return new FilterStream(Filter.create(eventTypeName));}  }
class C{  public static ConfigDef baseConfigDef(){  return new ConfigDef().define(MqttSourceConstant.KAFKA_TOPIC,Type.STRING,"mqtt",Importance.LOW,"Kafka topic to put received data \n Depends on message processor").define(MqttSourceConstant.MQTT_CLIENT_ID,Type.STRING,null,Importance.MEDIUM,"mqtt client id to use don't set to use random").define(MqttSourceConstant.MQTT_CLEAN_SESSION,Type.BOOLEAN,true,Importance.HIGH,"use clean session in connection?").define(MqttSourceConstant.MQTT_CONNECTION_TIMEOUT,Type.INT,30,Importance.LOW,"connection timeout to use").define(MqttSourceConstant.MQTT_KEEP_ALIVE_INTERVAL,Type.INT,60,Importance.LOW,"keepalive interval to use").define(MqttSourceConstant.MQTT_SERVER_URIS,Type.STRING,"tcp://localhost:1883",Importance.HIGH,"mqtt server to connect to").define(MqttSourceConstant.MQTT_TOPIC,Type.STRING,"#",Importance.HIGH,"mqtt server to connect to").define(MqttSourceConstant.MQTT_QUALITY_OF_SERVICE,Type.INT,1,Importance.LOW,"mqtt qos to use").define(MqttSourceConstant.MQTT_SSL_CA_CERT,Type.STRING,null,Importance.LOW,"CA cert file to use if using ssl","SSL",1,ConfigDef.Width.LONG,"CA cert",MODE_SSL_RECOMMENDER).define(MqttSourceConstant.MQTT_SSL_CERT,Type.STRING,null,Importance.LOW,"cert file to use if using ssl","SSL",2,ConfigDef.Width.LONG,"Cert",MODE_SSL_RECOMMENDER).define(MqttSourceConstant.MQTT_SSL_PRIV_KEY,Type.STRING,null,Importance.LOW,"cert priv key to use if using ssl","SSL",3,ConfigDef.Width.LONG,"Key",MODE_SSL_RECOMMENDER).define(MqttSourceConstant.MQTT_USERNAME,Type.STRING,null,Importance.MEDIUM,"username to authenticate to mqtt broker").define(MqttSourceConstant.MQTT_PASSWORD,Type.STRING,null,Importance.MEDIUM,"password to authenticate to mqtt broker").define(MqttSourceConstant.MESSAGE_PROCESSOR,Type.CLASS,DumbProcessor.class,Importance.HIGH,"message processor to use");}  }
class C{  public boolean isOptOut(){  return getOptOutDate() != null;}  }
class C{  private void init(DerValue encoding) throws Asn1Exception, RealmException, KrbApErrException, IOException {  DerValue der, subDer;  if (((encoding.getTag() & (byte)0x1F) != (byte)0x1E) || (encoding.isApplication() != true) || (encoding.isConstructed() != true)) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  der=encoding.getData().getDerValue();  if (der.getTag() != DerValue.tag_Sequence) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  subDer=der.getData().getDerValue();  if ((subDer.getTag() & (byte)0x1F) == (byte)0x00) {    pvno=subDer.getData().getBigInteger().intValue();    if (pvno != Krb5.PVNO)     throw new KrbApErrException(Krb5.KRB_AP_ERR_BADVERSION);  } else {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  subDer=der.getData().getDerValue();  if ((subDer.getTag() & (byte)0x1F) == (byte)0x01) {    msgType=subDer.getData().getBigInteger().intValue();    if (msgType != Krb5.KRB_ERROR) {      throw new KrbApErrException(Krb5.KRB_AP_ERR_MSG_TYPE);    }  } else {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  cTime=KerberosTime.parse(der.getData(),(byte)0x02,true);  if ((der.getData().peekByte() & 0x1F) == 0x03) {    subDer=der.getData().getDerValue();    cuSec=new Integer(subDer.getData().getBigInteger().intValue());  } else   cuSec=null;  sTime=KerberosTime.parse(der.getData(),(byte)0x04,false);  subDer=der.getData().getDerValue();  if ((subDer.getTag() & (byte)0x1F) == (byte)0x05) {    suSec=new Integer(subDer.getData().getBigInteger().intValue());  } else   throw new Asn1Exception(Krb5.ASN1_BAD_ID);  subDer=der.getData().getDerValue();  if ((subDer.getTag() & (byte)0x1F) == (byte)0x06) {    errorCode=subDer.getData().getBigInteger().intValue();  } else   throw new Asn1Exception(Krb5.ASN1_BAD_ID);  Realm crealm=Realm.parse(der.getData(),(byte)0x07,true);  cname=PrincipalName.parse(der.getData(),(byte)0x08,true,crealm);  Realm realm=Realm.parse(der.getData(),(byte)0x09,false);  sname=PrincipalName.parse(der.getData(),(byte)0x0A,false,realm);  eText=null;  eData=null;  eCksum=null;  if (der.getData().available() > 0) {    if ((der.getData().peekByte() & 0x1F) == 0x0B) {      subDer=der.getData().getDerValue();      eText=new KerberosString(subDer.getData().getDerValue()).toString();    }  }  if (der.getData().available() > 0) {    if ((der.getData().peekByte() & 0x1F) == 0x0C) {      subDer=der.getData().getDerValue();      eData=subDer.getData().getOctetString();    }  }  if (der.getData().available() > 0) {    eCksum=Checksum.parse(der.getData(),(byte)0x0D,true);  }  if (der.getData().available() > 0)   throw new Asn1Exception(Krb5.ASN1_BAD_ID);}  }
class C{  public static StringRangeExtractor stringRange(String query){  return new StringRangeExtractor(query);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodegetnextsibling.class,args);}  }
class C{  protected void processWindowEvent(WindowEvent e){  super.processWindowEvent(e);  if (e.getID() == WindowEvent.WINDOW_OPENED)   confirmPanel.getOKButton().requestFocusInWindow();}  }
class C{  public Image loadImage(InputStream inputStream){  if (sourceImage != null && !sourceImage.isDisposed()) {    sourceImage.dispose();    sourceImage=null;    imageData=null;  }  this.error=null;  if (inputStream != null) {    try {      imageData=new ImageData(inputStream);      sourceImage=new Image(getDisplay(),imageData);    } catch (    SWTException e) {      this.error=e;    }  }  showOriginal();  return sourceImage;}  }
class C{  public static int parseFormattedDuration(@Nonnull String formattedTime) throws NumberFormatException {  String[] times=formattedTime.split(":");  int time=0;  if (times.length > 0) {    time+=Integer.parseInt(times[0]) * TIME_3600;  }  if (times.length > 1) {    time+=Integer.parseInt(times[1]) * TIME_60;  }  if (times.length > 2) {    time+=Integer.parseInt(times[2]);  }  return time;}  }
class C{  private void openServer(URL url){  String key=url.getAddress();  boolean isServer=url.getParameter(Constants.IS_SERVER_KEY,true);  if (isServer) {    ExchangeServer server=serverMap.get(key);    if (server == null) {      serverMap.put(key,getServer(url));    } else {      throw new RpcException("Fail to open server(url: " + url + "), thrift2 protocol only supported one service binded to one port!");    }  }}  }
class C{  public br addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  private int indexToModel(int index){  if (index == -1) {    return -1;  }  return convertRowIndexToModel(index);}  }
class C{  public static double dchisqLog(double x,double ncp){  if (ncp == 0.0)   return dchisqLog(x);  double xh=Math.sqrt(x);  double mean=Math.sqrt(ncp);  return Math.log(dnorm(xh - mean) + dnorm(-xh - mean)) - Math.log(2 * xh);}  }
class C{  public LuaThread(Globals globals,LuaValue func){  LuaValue.assert_(func != null,"function cannot be null");  state=new State(globals,this,func);  this.globals=globals;}  }
class C{  public void changeConnectionStatus(ConnectionStatus connectionStatus){  status=connectionStatus;  notifyListeners((new PropertyChangeEvent(this,ActivityConstants.ConnectionStatusProperty,null,null)));}  }
class C{  public SymbolTableEntry basicGetRewiredTarget(){  return rewiredTarget;}  }
class C{  public void deleteTempGallery(){  Intent intent=new Intent().setAction("com.android.facelock.DELETE_GALLERY");  intent.putExtra("deleteTempGallery",true);  mContext.sendBroadcast(intent);}  }
class C{  public final long fingerPrint(){  int sz=this.values.length;  Value[] minVals=this.values;  if (perms != null) {    Value[] vals=new Value[sz];    for (int i=0; i < perms.length; i++) {      int cmp=0;      for (int j=0; j < sz; j++) {        vals[j]=this.values[j].permute(perms[i]);        if (cmp == 0) {          cmp=vals[j].compareTo(minVals[j]);        }      }      if (cmp < 0) {        if (minVals == this.values) {          minVals=vals;          vals=new Value[sz];        } else {          Value[] temp=minVals;          minVals=vals;          vals=temp;        }      }    }  }  long fp=FP64.New();  if (viewMap == null) {    for (int i=0; i < sz; i++) {      fp=minVals[i].fingerPrint(fp);    }    if (this.values != minVals) {      for (int i=0; i < sz; i++) {        this.values[i].deepNormalize();      }    }  } else {    for (int i=0; i < sz; i++) {      this.values[i].deepNormalize();    }    TLCStateMutSource state=this;    if (minVals != this.values) {      state=new TLCStateMutSource(minVals,this.asts);    }    Value val=mytool.eval(viewMap,Context.Empty,state);    fp=val.fingerPrint(fp);  }  return fp;}  }
class C{  protected CCDirector(){  ccMacros.CCLOG(LOG_TAG,"cocos2d: " + ccConfig.cocos2dVersion);  ccMacros.CCLOG(LOG_TAG,"cocos2d: Using Director Type:" + this.getClass());  pixelFormat_=kCCPixelFormatDefault;  depthBufferFormat_=0;  runningCCScene_=null;  nextCCScene_=null;  oldAnimationInterval_=animationInterval_=1.0 / kDefaultFPS;  CCScenesStack_=new ArrayList<CCScene>(10);  deviceOrientation_=kCCDeviceOrientationPortrait;  displayFPS=false;  frames_=0;  isPaused=false;  contentScaleFactor_=1;  screenSize_=CGSize.zero();  surfaceSize_=CGSize.zero();  isContentScaleSupported_=false;}  }
class C{  public void p(Object o) throws IOException {  write(o.toString());}  }
class C{  public static boolean isInputType(String typeString){  return INPUT_TYPES.contains(typeString);}  }
class C{  public static int[] toIntArray(Character[] array){  int[] result=new int[array.length];  for (int i=0; i < array.length; i++) {    result[i]=((int)array[i].charValue());  }  return result;}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,byte[] alphabet){  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=alphabet[(inBuff >>> 18)];  destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=alphabet[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  @Override public void writeStringData(String value,int offset,int length){  char[] cBuf=_charBuffer;  int cBufLength=cBuf.length;  for (int i=0; i < length; i+=cBufLength) {    int sublen=Math.min(length - i,cBufLength);    value.getChars(offset + i,offset + i + sublen,cBuf,0);    writeStringChunk(cBuf,0,sublen);  }}  }
class C{  public void decreaseRefcount(){  refcount--;}  }
class C{  public void propertyChange(PropertyChangeEvent evt){  String prop=evt.getPropertyName();  if ("AccessibleValue".equals(prop) || "AccessibleText".equals(prop) || "AccessibleVisibleData".equals(prop)) {    _modified=true;  }}  }
class C{  public DefaultAttributeAction(DrawingEditor editor,AttributeKey key){  this(editor,key,null,null);}  }
class C{  public NodeList selectNodeList(Node contextNode,String str) throws TransformerException {  return selectNodeList(contextNode,str,contextNode);}  }
class C{  private void init(){  samples.add(new Sample(getString(R.string.label_network),SampleNetworkActivity.class));  samples.add(new Sample(getString(R.string.label_retrofit),SampleRetrofitActivity.class));  samples.add(new Sample(getString(R.string.label_string),SampleStringActivity.class));  samples.add(new Sample(getString(R.string.label_object),SampleConfigActivity.class));  sampleArrayAdapter=new SampleArrayAdapter(samples);  samplesListView.setAdapter(sampleArrayAdapter);}  }
class C{  @SuppressWarnings({"unchecked"}) @Nullable public <V>V putMetaIfAbsent(int key,V val){  assert val != null;synchronized (this) {    V v=(V)meta(key);    if (v == null)     return addMeta(key,val);    return v;  }}  }
class C{  public InterfaceDefinition_ createInterfaceDefinition_(){  InterfaceDefinition_Impl interfaceDefinition_=new InterfaceDefinition_Impl();  return interfaceDefinition_;}  }
class C{  public Builder(PhoneNumber phoneNumber){  super(phoneNumber);  type=phoneNumber.type;}  }
class C{  public Vector3f fma(Vector3fc a,Vector3fc b){  x+=a.x() * b.x();  y+=a.y() * b.y();  z+=a.z() * b.z();  return this;}  }
class C{  public void addDatasource(String name,String defName,Variable var){  VDef sDef=new VDef(name,defName,var);  sources.put(name,sDef);}  }
class C{  protected static Tuple<String,String> createTimeTuple(String one,double sec){  return MatsimXmlWriter.createTuple(one,Time.writeTime(sec));}  }
class C{  protected void updateScriptingListeners(Element elt,String attr){  String domEvt=(String)attrToDOMEvent.get(attr);  if (domEvt == null) {    return;  }  EventListener listener=(EventListener)attrToListener.get(attr);  NodeEventTarget target=(NodeEventTarget)elt;  if (elt.hasAttributeNS(null,attr)) {    target.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,domEvt,listener,false,null);  } else {    target.removeEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,domEvt,listener,false);  }}  }
class C{  public void printHelp(PrintWriter pw,int width,String cmdLineSyntax,String header,Options options,int leftPad,int descPad,String footer,boolean autoUsage){  if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0)) {    throw new IllegalArgumentException("cmdLineSyntax not provided");  }  if (autoUsage) {    printUsage(pw,width,cmdLineSyntax,options);  } else {    printUsage(pw,width,cmdLineSyntax);  }  if ((header != null) && (header.trim().length() > 0)) {    printWrapped(pw,width,header);  }  printOptions(pw,width,options,leftPad,descPad);  if ((footer != null) && (footer.trim().length() > 0)) {    printWrapped(pw,width,footer);  }}  }
class C{  public void addBottomResourceBundle(ResourceBundle topResourceBundle){  this.rbmwStack.addToBottom(new InternalRbmWrapper(topResourceBundle));}  }
class C{  @Override public void process(HashMap<K,HighLow<V>> tuple){  for (  Map.Entry<K,HighLow<V>> e : tuple.entrySet()) {    HighLow<V> val=mergedTuple.get(e.getKey());    if (val == null) {      val=new HighLow(e.getValue().getHigh(),e.getValue().getLow());      mergedTuple.put(e.getKey(),val);    } else {      if (val.getHigh().doubleValue() < e.getValue().getHigh().doubleValue()) {        val.setHigh(e.getValue().getHigh());      }      if (val.getLow().doubleValue() > e.getValue().getLow().doubleValue()) {        val.setLow(e.getValue().getLow());      }    }  }}  }
class C{  public static boolean orthogonalizeVectors(List<Vector> list){  int dimension=list.get(0).getDimension();  for (int k=0; k < list.size(); ++k) {    Vector kthVector=list.get(k);    kthVector.normalize();    if (kthVector.getDimension() != dimension) {      logger.warning("In orthogonalizeVector: not all vectors have required dimension.");      return false;    }    for (int j=0; j < k; ++j) {      Vector jthVector=list.get(j);      renderOrthogonal((ComplexVector)kthVector,(ComplexVector)jthVector);    }    kthVector.normalize();  }  return true;}  }
class C{  void disposeLocked(boolean removeReceiver){  ArrayList<UpdateRecord> globalRecords=mRecordsByProvider.get(this.mProvider);  if (globalRecords != null) {    globalRecords.remove(this);  }  if (!removeReceiver)   return;  HashMap<String,UpdateRecord> receiverRecords=mReceiver.mUpdateRecords;  if (receiverRecords != null) {    receiverRecords.remove(this.mProvider);    if (removeReceiver && receiverRecords.size() == 0) {      removeUpdatesLocked(mReceiver);    }  }}  }
class C{  public static StringBuilder appendMap(StringBuilder buff,HashMap<String,?> map){  ArrayList<String> list=New.arrayList(map.keySet());  Collections.sort(list);  for (  String k : list) {    appendMap(buff,k,map.get(k));  }  return buff;}  }
class C{  public String omegaTipText(){  return "The Omega value.";}  }
class C{  public boolean isVerboseMode(){  return m_verboseMode;}  }
class C{  public void frameAvailable(SurfaceTexture st){synchronized (mReadyFence) {    if (!mReady) {      return;    }  }  float[] transform=new float[16];  st.getTransformMatrix(transform);  long timestamp=st.getTimestamp();  if (timestamp == 0) {    Log.w(TAG,"HEY: got SurfaceTexture with timestamp of zero");    return;  }  mHandler.sendMessage(mHandler.obtainMessage(MSG_FRAME_AVAILABLE,(int)(timestamp >> 32),(int)timestamp,transform));}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (getAD_Org_ID() != 0)   setAD_Org_ID(0);  if (super.getTaxCorrectionType() == null)   setTaxCorrectionType(isDiscountCorrectsTax() ? TAXCORRECTIONTYPE_Write_OffAndDiscount : TAXCORRECTIONTYPE_None);  checkCosting();  if (getAD_OrgOnly_ID() != 0) {    MClientInfo info=MClientInfo.get(getCtx(),getAD_Client_ID());    if (info.getC_AcctSchema1_ID() == getC_AcctSchema_ID())     setAD_OrgOnly_ID(0);  }  if (!getCostingMethod().equals(getM_CostType().getCostingMethod()))   throw new org.adempiere.exceptions.AdempiereException("@M_CostType_ID@ @Not Valid@ @ActionNotAllowedHere@ @CostingMethod@ : " + MRefList.get(getCtx(),COSTINGMETHOD_AD_Reference_ID,getCostingMethod(),get_TrxName()));  return true;}  }
class C{  static public void convert(Exception e) throws GraphIOException {  if (e instanceof GraphIOException) {    throw (GraphIOException)e;  }  if (e instanceof RuntimeException) {    if (e.getCause() instanceof XMLStreamException) {      throw new GraphIOException(e.getCause());    }    throw (RuntimeException)e;  }  throw new GraphIOException(e);}  }
class C{  @SuppressWarnings("unchecked") @Test public void testNodeSchemaProcessing(){  Range<Double> oper=new Range<Double>();  TestSink rangeSink=new TestSink();  oper.range.setSink(rangeSink);  oper.beginWindow(0);  int numTuples=1000;  for (int i=0; i < numTuples; i++) {    Double a=new Double(20.0);    Double b=new Double(2.0);    Double c=new Double(1000.0);    oper.data.process(a);    oper.data.process(b);    oper.data.process(c);    a=1.0;    oper.data.process(a);    a=10.0;    oper.data.process(a);    b=5.0;    oper.data.process(b);    b=12.0;    oper.data.process(b);    c=22.0;    oper.data.process(c);    c=14.0;    oper.data.process(c);    a=46.0;    oper.data.process(a);    b=2.0;    oper.data.process(b);    a=23.0;    oper.data.process(a);  }  oper.endWindow();  Assert.assertEquals("number emitted tuples",1,rangeSink.collectedTuples.size());  for (  Object o : rangeSink.collectedTuples) {    HighLow<V> hl=(HighLow<V>)o;    Assert.assertEquals("emitted high value was ",1000.0,hl.getHigh());    Assert.assertEquals("emitted low value was ",1.0,hl.getLow());  }}  }
class C{  @SuppressWarnings("unchecked") public static <T>T[] insertInListNoDup(T[] array,T element){  final int len=array.length;  for (int ix=0; ix < len; ++ix) {    if (array[ix] == element) {      if (ix == 0) {        return array;      }      T[] result=(T[])Array.newInstance(array.getClass().getComponentType(),len);      System.arraycopy(array,0,result,1,ix);      array[0]=element;      return result;    }  }  T[] result=(T[])Array.newInstance(array.getClass().getComponentType(),len + 1);  if (len > 0) {    System.arraycopy(array,0,result,1,len);  }  result[0]=element;  return result;}  }
class C{  public BasqueAnalyzer(CharArraySet stopwords){  this(stopwords,CharArraySet.EMPTY_SET);}  }
class C{  @Override public String toString(){  try {    StringWriter out=new StringWriter();    XjcXmlTransformer.marshalLenient((getClass().isAnnotationPresent(XmlRootElement.class)) ? this : new JAXBElement<>(new QName(getClass().getSimpleName()),Object.class,this),out);    return out.toString();  } catch (  XmlException e) {    return String.format("<!-- Invalid XML: %s -->",e.toString());  }}  }
class C{  public UserConfig update(UserConfig config){  config.addCredentials(this);  String xml=POST(this.url + "/update-user",config.toXML());  Element root=parse(xml);  if (root == null) {    return null;  }  try {    UserConfig user=new UserConfig();    user.parseXML(root);    this.user=user;    return user;  } catch (  Exception exception) {    this.exception=SDKException.parseFailure(exception);    throw this.exception;  }}  }
class C{  ManagedIndexSchema(SolrConfig solrConfig,String name,InputSource is,boolean isMutable,String managedSchemaResourceName,int schemaZkVersion,Object schemaUpdateLock) throws KeeperException, InterruptedException {  super(solrConfig,name,is);  this.isMutable=isMutable;  this.managedSchemaResourceName=managedSchemaResourceName;  this.schemaZkVersion=schemaZkVersion;  this.schemaUpdateLock=schemaUpdateLock;}  }
class C{  public static String toUpperEnglish(String s){  return s.toUpperCase(Locale.ENGLISH);}  }
class C{  public static final String encode(byte[] binaryData,int length){  if (length < 4) {    length=Integer.MAX_VALUE;  }  if (binaryData == null) {    return null;  }  int lengthDataBits=binaryData.length * EIGHTBIT;  if (lengthDataBits == 0) {    return "";  }  int fewerThan24bits=lengthDataBits % TWENTYFOURBITGROUP;  int numberTriplets=lengthDataBits / TWENTYFOURBITGROUP;  int numberQuartet=fewerThan24bits != 0 ? numberTriplets + 1 : numberTriplets;  int quartesPerLine=length / 4;  int numberLines=(numberQuartet - 1) / quartesPerLine;  char encodedData[]=null;  encodedData=new char[numberQuartet * 4 + numberLines];  byte k=0, l=0, b1=0, b2=0, b3=0;  int encodedIndex=0;  int dataIndex=0;  int i=0;  for (int line=0; line < numberLines; line++) {    for (int quartet=0; quartet < 19; quartet++) {      b1=binaryData[dataIndex++];      b2=binaryData[dataIndex++];      b3=binaryData[dataIndex++];      l=(byte)(b2 & 0x0f);      k=(byte)(b1 & 0x03);      byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);      byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);      byte val3=((b3 & SIGN) == 0) ? (byte)(b3 >> 6) : (byte)((b3) >> 6 ^ 0xfc);      encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];      encodedData[encodedIndex++]=lookUpBase64Alphabet[val2 | (k << 4)];      encodedData[encodedIndex++]=lookUpBase64Alphabet[(l << 2) | val3];      encodedData[encodedIndex++]=lookUpBase64Alphabet[b3 & 0x3f];      i++;    }    encodedData[encodedIndex++]=0xa;  }  for (; i < numberTriplets; i++) {    b1=binaryData[dataIndex++];    b2=binaryData[dataIndex++];    b3=binaryData[dataIndex++];    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    byte val3=((b3 & SIGN) == 0) ? (byte)(b3 >> 6) : (byte)((b3) >> 6 ^ 0xfc);    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex++]=lookUpBase64Alphabet[(l << 2) | val3];    encodedData[encodedIndex++]=lookUpBase64Alphabet[b3 & 0x3f];  }  if (fewerThan24bits == EIGHTBIT) {    b1=binaryData[dataIndex];    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[k << 4];    encodedData[encodedIndex++]=PAD;    encodedData[encodedIndex++]=PAD;  } else   if (fewerThan24bits == SIXTEENBIT) {    b1=binaryData[dataIndex];    b2=binaryData[dataIndex + 1];    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex++]=lookUpBase64Alphabet[l << 2];    encodedData[encodedIndex++]=PAD;  }  return new String(encodedData);}  }
class C{  public void export(String fileName,Class<? extends AExporter> aExporter) throws ExporterException {  export(fileName,aExporter,false);}  }
class C{  public void submitOrder(View view){  EditText nameField=(EditText)findViewById(R.id.name_field);  Editable nameEditable=nameField.getText();  String name=nameEditable.toString();  CheckBox whippedCreamCheckBox=(CheckBox)findViewById(R.id.whipped_cream_checkbox);  boolean hasWhippedCream=whippedCreamCheckBox.isChecked();  CheckBox chocolateCheckBox=(CheckBox)findViewById(R.id.chocolate_checkbox);  boolean hasChocolate=chocolateCheckBox.isChecked();  int price=calculatePrice(hasWhippedCream,hasChocolate);  String message=createOrderSummary(name,price,hasWhippedCream,hasChocolate);  Intent intent=new Intent(Intent.ACTION_SENDTO);  intent.setData(Uri.parse("mailto:"));  intent.putExtra(Intent.EXTRA_SUBJECT,getString(R.string.order_summary_email_subject,name));  intent.putExtra(Intent.EXTRA_TEXT,message);  if (intent.resolveActivity(getPackageManager()) != null) {    startActivity(intent);  }}  }
class C{  public void trace(Marker marker,String format,Object arg1,Object arg2){}  }
class C{  protected synchronized void engineNextBytes(byte[] bytes){  int i, n;  long bits;  int nextByteToReturn;  int lastWord;  final int extrabytes=7;  if (bytes == null) {    throw new NullPointerException("bytes == null");  }  lastWord=seed[BYTES_OFFSET] == 0 ? 0 : (seed[BYTES_OFFSET] + extrabytes) >> 3 - 1;  if (state == UNDEFINED) {    updateSeed(getRandomBytes(DIGEST_LENGTH));    nextBIndex=HASHBYTES_TO_USE;    lastWord=seed[BYTES_OFFSET] == 0 ? 0 : (seed[BYTES_OFFSET] + extrabytes) >> 3 - 1;  } else   if (state == SET_SEED) {    System.arraycopy(seed,HASH_OFFSET,copies,HASHCOPY_OFFSET,EXTRAFRAME_OFFSET);    for (i=lastWord + 3; i < FRAME_LENGTH + 2; i++) {      seed[i]=0;    }    bits=(seedLength << 3) + 64;    if (seed[BYTES_OFFSET] < MAX_BYTES) {      seed[14]=(int)(bits >>> 32);      seed[15]=(int)(bits & 0xFFFFFFFF);    } else {      copies[EXTRAFRAME_OFFSET + 14]=(int)(bits >>> 32);      copies[EXTRAFRAME_OFFSET + 15]=(int)(bits & 0xFFFFFFFF);    }    nextBIndex=HASHBYTES_TO_USE;  }  state=NEXT_BYTES;  if (bytes.length == 0) {    return;  }  nextByteToReturn=0;  n=(HASHBYTES_TO_USE - nextBIndex) < (bytes.length - nextByteToReturn) ? HASHBYTES_TO_USE - nextBIndex : bytes.length - nextByteToReturn;  if (n > 0) {    System.arraycopy(nextBytes,nextBIndex,bytes,nextByteToReturn,n);    nextBIndex+=n;    nextByteToReturn+=n;  }  if (nextByteToReturn >= bytes.length) {    return;  }  n=seed[BYTES_OFFSET] & 0x03;  for (; ; ) {    if (n == 0) {      seed[lastWord]=(int)(counter >>> 32);      seed[lastWord + 1]=(int)(counter & 0xFFFFFFFF);      seed[lastWord + 2]=END_FLAGS[0];    } else {      seed[lastWord]|=(int)((counter >>> RIGHT1[n]) & MASK[n]);      seed[lastWord + 1]=(int)((counter >>> RIGHT2[n]) & 0xFFFFFFFF);      seed[lastWord + 2]=(int)((counter << LEFT[n]) | END_FLAGS[n]);    }    if (seed[BYTES_OFFSET] > MAX_BYTES) {      copies[EXTRAFRAME_OFFSET]=seed[FRAME_LENGTH];      copies[EXTRAFRAME_OFFSET + 1]=seed[FRAME_LENGTH + 1];    }    SHA1Impl.computeHash(seed);    if (seed[BYTES_OFFSET] > MAX_BYTES) {      System.arraycopy(seed,0,copies,FRAME_OFFSET,FRAME_LENGTH);      System.arraycopy(copies,EXTRAFRAME_OFFSET,seed,0,FRAME_LENGTH);      SHA1Impl.computeHash(seed);      System.arraycopy(copies,FRAME_OFFSET,seed,0,FRAME_LENGTH);    }    counter++;    int j=0;    for (i=0; i < EXTRAFRAME_OFFSET; i++) {      int k=seed[HASH_OFFSET + i];      nextBytes[j]=(byte)(k >>> 24);      nextBytes[j + 1]=(byte)(k >>> 16);      nextBytes[j + 2]=(byte)(k >>> 8);      nextBytes[j + 3]=(byte)(k);      j+=4;    }    nextBIndex=0;    j=HASHBYTES_TO_USE < (bytes.length - nextByteToReturn) ? HASHBYTES_TO_USE : bytes.length - nextByteToReturn;    if (j > 0) {      System.arraycopy(nextBytes,0,bytes,nextByteToReturn,j);      nextByteToReturn+=j;      nextBIndex+=j;    }    if (nextByteToReturn >= bytes.length) {      break;    }  }}  }
class C{  public Map<Integer,MovieRating> loadMovieRatings(){  Type type=new TypeToken<Map<Integer,MovieRating>>(){  }.getType();  String json=mPrefs.getString(KEY_MOVIE_RATINGS,null);  if (json != null) {    return new Gson().fromJson(json,type);  } else   return new HashMap<>();}  }
class C{  public boolean hasPassed(){  return isPassing;}  }
class C{  public Observable<Integer> exerciseConcatMap(Observable<Movies> movies){  return Observable.error(new RuntimeException("Not Implemented"));}  }
class C{  @LargeTest public void testCameraPairwiseScenario14() throws Exception {  genericPairwiseTestCase(Flash.AUTO,Exposure.NONE,WhiteBalance.AUTO,SceneMode.NIGHT,PictureSize.SMALL,Geotagging.OFF);}  }
class C{  public void endEntity(String name,Augmentations augs) throws XNIException {  super.endEntity(name,augs);  if (fDocumentHandler != null && name.equals("[xml]")) {    fDocumentHandler.endDocument(null);  }}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public StatusObject(){}  }
class C{  public Long addRoomType(String name,boolean deleted){  try {    RoomTypes rtype=new RoomTypes();    rtype.setName(name);    rtype.setStarttime(new Date());    rtype.setDeleted(deleted ? "true" : "false");    rtype=em.merge(rtype);    long returnId=rtype.getRoomtypes_id();    return returnId;  } catch (  Exception ex2) {    log.error("[addRoomType] ",ex2);  }  return null;}  }
class C{  @SuppressWarnings("unchecked") public MetaDbfTableModel(DbfTableModel source){  super(4);  init();  setWritable(true);  this.source=source;  int numColumnCount=source.getColumnCount();  originalColumnNumber=numColumnCount;  for (int i=0; i < numColumnCount; i++) {    List<Object> record=new ArrayList<Object>();    record.add(source.getColumnName(i));    record.add(new Byte(source.getType(i)));    record.add(new Integer(source.getLength(i)));    record.add(new Integer(source.getDecimalCount(i)));    addRecord(record);    if (DEBUG)     Debug.output("Adding record: " + record);  }}  }
class C{  public static void moveDisks(int n,char fromTower,char toTower,char auxTower){  numberOfMoves++;  if (n == 1)   System.out.println("Move disk " + n + " from "+ fromTower+ " to "+ toTower); else {    moveDisks(n - 1,fromTower,auxTower,toTower);    System.out.println("Move disk " + n + " from "+ fromTower+ " to "+ toTower);    moveDisks(n - 1,auxTower,toTower,fromTower);  }}  }
class C{  public static SearchShareesFragment newInstance(OCFile fileToShare,Account account){  SearchShareesFragment fragment=new SearchShareesFragment();  Bundle args=new Bundle();  args.putParcelable(ARG_FILE,fileToShare);  args.putParcelable(ARG_ACCOUNT,account);  fragment.setArguments(args);  return fragment;}  }
class C{  public AdminDistributedSystemJmxImpl(AgentConfigImpl config) throws org.apache.geode.admin.AdminException {  super(config);  this.mbeanName="GemFire:type=AdminDistributedSystem,id=" + MBeanUtil.makeCompliantMBeanNameProperty(getId());  this.objectName=MBeanUtil.createMBean(this);  isEmailNotificationEnabled=config.isEmailNotificationEnabled();  if (isEmailNotificationEnabled) {    initMailProps(config);  }  initStateSaveFile(config);  Assert.assertTrue(this.objectName != null);  cacheRegionListener=new CacheAndRegionListenerImpl(this);}  }
class C{  public TraitInformation(boolean isAnimatable,int type,short percentageInterpretation){  this.isAnimatable=isAnimatable;  this.type=type;  this.percentageInterpretation=percentageInterpretation;}  }
class C{  public boolean isZoomXEnabled(){  return mZoomXEnabled;}  }
class C{  public static void checkEntityNotNull(final DataObject object,final URI id,boolean idEmbeddedInURL){  if (object == null) {    if (idEmbeddedInURL) {      throw APIException.notFound.unableToFindEntityInURL(id);    } else {      throw APIException.badRequests.unableToFindEntity(id);    }  }}  }
class C{  public void updateUI(){  setUI((DesktopPaneUI)UIManager.getUI(this));}  }
class C{  public Doclet basicGetDoclet(){  if (eContainerFeatureID() != DomPackage.LINE_TAG__DOCLET)   return null;  return (Doclet)eInternalContainer();}  }
class C{  public URI normalize(){  return null;}  }
class C{  public Terrain(int terrainSize,float scale,float minY,float maxY,String heightMapFile,String textureFile,int textInc) throws Exception {  this.terrainSize=terrainSize;  gameItems=new GameItem[terrainSize * terrainSize];  BufferedImage heightMapImage=ImageIO.read(getClass().getResourceAsStream(heightMapFile));  verticesPerCol=heightMapImage.getWidth() - 1;  verticesPerRow=heightMapImage.getHeight() - 1;  heightMapMesh=new HeightMapMesh(minY,maxY,heightMapImage,textureFile,textInc);  boundingBoxes=new Rectangle2D.Float[terrainSize][terrainSize];  for (int row=0; row < terrainSize; row++) {    for (int col=0; col < terrainSize; col++) {      float xDisplacement=(col - ((float)terrainSize - 1) / (float)2) * scale * HeightMapMesh.getXLength();      float zDisplacement=(row - ((float)terrainSize - 1) / (float)2) * scale * HeightMapMesh.getZLength();      GameItem terrainBlock=new GameItem(heightMapMesh.getMesh());      terrainBlock.setScale(scale);      terrainBlock.setPosition(xDisplacement,0,zDisplacement);      gameItems[row * terrainSize + col]=terrainBlock;      boundingBoxes[row][col]=getBoundingBox(terrainBlock);    }  }}  }
class C{  public boolean hasMethod(){  return super.hasAttribute(METHOD);}  }
class C{  public NotificationChain basicSetExpression(Expression newExpression,NotificationChain msgs){  Expression oldExpression=expression;  expression=newExpression;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.AWAIT_EXPRESSION__EXPRESSION,oldExpression,newExpression);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public static <T>TransactionFlow<T,T> of(TransactionTemplate transactionManager){  return new TransactionFlow<>(transactionManager,Function.identity());}  }
class C{  synchronized public void addDTM(DTM dtm,int id,int offset){  if (id >= IDENT_MAX_DTMS) {    throw new DTMException(XMLMessages.createXMLMessage(XMLErrorResources.ER_NO_DTMIDS_AVAIL,null));  }  int oldlen=m_dtms.length;  if (oldlen <= id) {    int newlen=Math.min((id + 256),IDENT_MAX_DTMS);    DTM new_m_dtms[]=new DTM[newlen];    System.arraycopy(m_dtms,0,new_m_dtms,0,oldlen);    m_dtms=new_m_dtms;    int new_m_dtm_offsets[]=new int[newlen];    System.arraycopy(m_dtm_offsets,0,new_m_dtm_offsets,0,oldlen);    m_dtm_offsets=new_m_dtm_offsets;  }  m_dtms[id]=dtm;  m_dtm_offsets[id]=offset;  dtm.documentRegistration();}  }
class C{  private static Drawing createDrawing(){  DefaultDrawing drawing=new DefaultDrawing();  drawing.addInputFormat(new SerializationInputOutputFormat());  drawing.addOutputFormat(new SerializationInputOutputFormat());  drawing.addOutputFormat(new ImageOutputFormat());  return drawing;}  }
class C{  public T scrolledBottom(Object handler,String method){  if (view instanceof AbsListView) {    setScrollListener().forward(handler,method,true,ON_SCROLLED_STATE_SIG);  }  return self();}  }
class C{  void convertLocalToActivationObject(DVariable v){  m_activationObject=v;  m_locals.remove(v.getName());}  }
class C{  public boolean isBadgingSupported(){  return impl.isBadgingSupported();}  }
class C{  @Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){  int count=getChildCount();  mLeftWidth=0;  mRightWidth=0;  int maxHeight=0;  int maxWidth=0;  int childState=0;  for (int i=0; i < count; i++) {    final View child=getChildAt(i);    if (child.getVisibility() != GONE) {      measureChildWithMargins(child,widthMeasureSpec,0,heightMeasureSpec,0);      final LayoutParams lp=(LayoutParams)child.getLayoutParams();      if (lp.position == LayoutParams.POSITION_LEFT) {        mLeftWidth+=Math.max(maxWidth,child.getMeasuredWidth() + lp.leftMargin + lp.rightMargin);      } else       if (lp.position == LayoutParams.POSITION_RIGHT) {        mRightWidth+=Math.max(maxWidth,child.getMeasuredWidth() + lp.leftMargin + lp.rightMargin);      } else {        maxWidth=Math.max(maxWidth,child.getMeasuredWidth() + lp.leftMargin + lp.rightMargin);      }      maxHeight=Math.max(maxHeight,child.getMeasuredHeight() + lp.topMargin + lp.bottomMargin);      childState=combineMeasuredStates(childState,child.getMeasuredState());    }  }  maxWidth+=mLeftWidth + mRightWidth;  maxHeight=Math.max(maxHeight,getSuggestedMinimumHeight());  maxWidth=Math.max(maxWidth,getSuggestedMinimumWidth());  setMeasuredDimension(resolveSizeAndState(maxWidth,widthMeasureSpec,childState),resolveSizeAndState(maxHeight,heightMeasureSpec,childState << MEASURED_HEIGHT_STATE_SHIFT));}  }
class C{  protected final boolean handlePossibleCenter(int[] stateCount,int i,int j){  int stateCountTotal=stateCount[0] + stateCount[1] + stateCount[2]+ stateCount[3]+ stateCount[4];  float centerJ=centerFromEnd(stateCount,j);  float centerI=crossCheckVertical(i,(int)centerJ,stateCount[2],stateCountTotal);  if (!Float.isNaN(centerI)) {    centerJ=crossCheckHorizontal((int)centerJ,(int)centerI,stateCount[2],stateCountTotal);    if (!Float.isNaN(centerJ)) {      float estimatedModuleSize=(float)stateCountTotal / 7.0f;      boolean found=false;      for (int index=0; index < possibleCenters.size(); index++) {        FinderPattern center=possibleCenters.get(index);        if (center.aboutEquals(estimatedModuleSize,centerI,centerJ)) {          possibleCenters.set(index,center.combineEstimate(centerI,centerJ,estimatedModuleSize));          found=true;          break;        }      }      if (!found) {        FinderPattern point=new FinderPattern(centerJ,centerI,estimatedModuleSize);        possibleCenters.add(point);        if (resultPointCallback != null) {          resultPointCallback.foundPossibleResultPoint(point);        }      }      return true;    }  }  return false;}  }
class C{  public void captureSnapshot(String pipelineName,String snapshotName,String snapshotLabel,String rev,Integer batches,Integer batchSize) throws ApiException {  Object postBody=null;  byte[] postBinaryBody=null;  if (pipelineName == null) {    throw new ApiException(400,"Missing the required parameter 'pipelineName' when calling captureSnapshot");  }  if (snapshotName == null) {    throw new ApiException(400,"Missing the required parameter 'snapshotName' when calling captureSnapshot");  }  String path="/v1/pipeline/{pipelineName}/snapshot/{snapshotName}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pipelineName" + "\\}",apiClient.escapeString(pipelineName.toString())).replaceAll("\\{" + "snapshotName" + "\\}",apiClient.escapeString(snapshotName.toString()));  List<Pair> queryParams=new ArrayList<Pair>();  Map<String,String> headerParams=new HashMap<String,String>();  Map<String,Object> formParams=new HashMap<String,Object>();  queryParams.addAll(apiClient.parameterToPairs("","snapshotLabel",snapshotLabel));  queryParams.addAll(apiClient.parameterToPairs("","rev",rev));  queryParams.addAll(apiClient.parameterToPairs("","batches",batches));  queryParams.addAll(apiClient.parameterToPairs("","batchSize",batchSize));  final String[] accepts={};  final String accept=apiClient.selectHeaderAccept(accepts);  final String[] contentTypes={};  final String contentType=apiClient.selectHeaderContentType(contentTypes);  String[] authNames=new String[]{"basic"};  apiClient.invokeAPI(path,"PUT",queryParams,postBody,postBinaryBody,headerParams,formParams,accept,contentType,authNames,null);}  }
class C{  @Override public boolean supportsColumnAliasing(){  debugCodeCall("supportsColumnAliasing");  return true;}  }
class C{  public static Sequence create(AkibanInformationSchema ais,Sequence seq){  return create(ais,seq.sequenceName.getSchemaName(),seq.sequenceName.getTableName(),seq.startsWith,seq.increment,seq.minValue,seq.maxValue,seq.cycle);}  }
class C{  public void addPropertyChangeListener(PropertyChangeListener pcl){  m_pcSupport.addPropertyChangeListener(pcl);}  }
class C{  public Socket beforeHandshake() throws SocketException, IOException {  resetLoginTimeCountdown();  this.socketTimeoutBackup=this.rawSocket.getSoTimeout();  this.rawSocket.setSoTimeout(getRealTimeout(this.socketTimeoutBackup));  return this.rawSocket;}  }
class C{  public SystemInformationAction(KseFrame kseFrame){  super(kseFrame);  putValue(LONG_DESCRIPTION,res.getString("SystemInformationAction.statusbar"));  putValue(NAME,res.getString("SystemInformationAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("SystemInformationAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("SystemInformationAction.image")))));}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static IChange insertLineAbove(IXtextDocument doc,int offset,String txt,boolean sameIndentation) throws BadLocationException {  final String NL=lineDelimiter(doc,offset);  final IRegion currLineReg=doc.getLineInformationOfOffset(offset);  String indent="";  if (sameIndentation) {    final String currLine=doc.get(currLineReg.getOffset(),currLineReg.getLength());    int idx=0;    while (idx < currLine.length() && Character.isWhitespace(currLine.charAt(idx))) {      idx++;    }    indent=currLine.substring(0,idx);  }  return new Replacement(getURI(doc),currLineReg.getOffset(),0,indent + txt + NL);}  }
class C{  private void applyKitKatTranslucency(){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {    setTranslucentStatus(true);    SystemBarTintManager mTintManager=new SystemBarTintManager(this);    mTintManager.setStatusBarTintEnabled(true);    mTintManager.setNavigationBarTintEnabled(true);    mTintManager.setTintDrawable(UIElementsHelper.getGeneralActionBarBackground(this));    getActionBar().setBackgroundDrawable(UIElementsHelper.getGeneralActionBarBackground(this));  }}  }
class C{  public BusinessObjectDefinitionEntity createBusinessObjectDefinitionEntity(String namespaceCode,String businessObjectDefinitionName,String dataProviderName,String businessObjectDefinitionDescription,String displayName,List<Attribute> attributes){  BusinessObjectDefinitionEntity businessObjectDefinitionEntity=createBusinessObjectDefinitionEntity(namespaceCode,businessObjectDefinitionName,dataProviderName,businessObjectDefinitionDescription,attributes);  businessObjectDefinitionEntity.setDisplayName(displayName);  return businessObjectDefinitionDao.saveAndRefresh(businessObjectDefinitionEntity);}  }
class C{  public nobr addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  public Jerry root(){  Jerry jerry=this.parent;  if (jerry == null) {    return this;  }  while (jerry.parent != null) {    jerry=jerry.parent;  }  return jerry;}  }
class C{  private void swim(int k){  while (k > 1 && less(k / 2,k)) {    exch(k,k / 2);    k=k / 2;  }}  }
class C{  final public SyntaxTreeNode Assumption() throws ParseException {  SyntaxTreeNode tn;  SyntaxTreeNode zn=null;  Token t;  bpa("Assumption");  expecting="ASSUM...";switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case ASSUMPTION:    t=jj_consume_token(ASSUMPTION);  break;case ASSUME:t=jj_consume_token(ASSUME);break;default :jj_la1[38]=jj_gen;jj_consume_token(-1);throw new ParseException();}addHeir(new SyntaxTreeNode(mn,t));if (jj_2_15(2)) {switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case DEFBREAK:t=jj_consume_token(DEFBREAK);break;default :jj_la1[39]=jj_gen;;}tn=Identifier();addHeir(tn);expecting="==";t=jj_consume_token(DEF);addHeir(new SyntaxTreeNode(mn,t));} else {;}belchDEF();expecting="Expression";tn=Expression();addHeir(tn);SyntaxTreeNode sn[]=getLastHeirs();epa();{if (true) return new SyntaxTreeNode(mn,N_Assumption,zn,sn);}throw new Error("Missing return statement in function");}  }
class C{  public static List<UnManagedVolume> findUnManagedVolumesForCluster(URI clusterUri,DbClient dbClient){  _logger.info("finding unmanaged volumes for cluster " + clusterUri);  Set<URI> consistentVolumeUris=new HashSet<URI>();  List<URI> hostUris=ComputeSystemHelper.getChildrenUris(dbClient,clusterUri,Host.class,"cluster");  int hostIndex=0;  for (  URI hostUri : hostUris) {    _logger.info("   looking at host " + hostUri);    List<Initiator> initiators=ComputeSystemHelper.queryInitiators(dbClient,hostUri);    URIQueryResultList results=new URIQueryResultList();    Set<URI> unManagedVolumeUris=new HashSet<URI>();    for (    Initiator initiator : initiators) {      _logger.info("      looking at initiator " + initiator.getInitiatorPort());      dbClient.queryByConstraint(AlternateIdConstraint.Factory.getUnManagedVolumeInitiatorNetworkIdConstraint(initiator.getInitiatorPort()),results);      if (results.iterator() != null) {        for (        URI uri : results) {          _logger.info("      found UnManagedVolume " + uri);          unManagedVolumeUris.add(uri);        }      }    }    Set<URI> thisHostsUris=new HashSet<URI>();    for (    URI unmanagedVolumeUri : unManagedVolumeUris) {      if (hostIndex == 0) {        consistentVolumeUris.add(unmanagedVolumeUri);      } else {        thisHostsUris.add(unmanagedVolumeUri);      }    }    if (hostIndex > 0) {      consistentVolumeUris.retainAll(thisHostsUris);    }    hostIndex++;  }  _logger.info("   found {} UnManagedVolumes to be consistent across all hosts",consistentVolumeUris.size());  List<UnManagedVolume> unmanagedVolumes=new ArrayList<UnManagedVolume>();  for (  URI unmanagedVolumeUri : consistentVolumeUris) {    UnManagedVolume unmanagedVolume=dbClient.queryObject(UnManagedVolume.class,unmanagedVolumeUri);    if (unmanagedVolume == null || unmanagedVolume.getInactive() == true) {      continue;    }    unmanagedVolumes.add(unmanagedVolume);    _logger.info("      volume: " + unmanagedVolume.getLabel() + " nativeGuid: "+ unmanagedVolume.getNativeGuid());  }  return unmanagedVolumes;}  }
class C{  public boolean checkPattern(List<LockPatternView.Cell> pattern){  final int userId=getCurrentOrCallingUserId();  try {    final boolean matched=getLockSettings().checkPattern(patternToHash(pattern),userId);    if (matched && (userId == UserHandle.USER_OWNER)) {      KeyStore.getInstance().password(patternToString(pattern));    }    return matched;  } catch (  RemoteException re) {    return true;  }}  }
class C{  public static boolean isAbsoluteURI(String systemId){  if (isWindowsAbsolutePath(systemId)) {    return false;  }  final int fragmentIndex=systemId.indexOf('#');  final int queryIndex=systemId.indexOf('?');  final int slashIndex=systemId.indexOf('/');  final int colonIndex=systemId.indexOf(':');  int index=systemId.length() - 1;  if (fragmentIndex > 0)   index=fragmentIndex;  if ((queryIndex > 0) && (queryIndex < index))   index=queryIndex;  if ((slashIndex > 0) && (slashIndex < index))   index=slashIndex;  return ((colonIndex > 0) && (colonIndex < index));}  }
class C{  public SignerId(X500Name issuer,BigInteger serialNumber,byte[] subjectKeyId){  this(new X509CertificateHolderSelector(issuer,serialNumber,subjectKeyId));}  }
class C{  public void crossover(List<AggregationIndividual> population){  List<AggregationIndividual> children=new ArrayList<AggregationIndividual>();  for (int i=0; i < population.size(); i++) {    if (random.nextDouble() < crossoverProb) {      int[] parent1=population.get(random.nextInt(population.size())).getIndividual();      int[] parent2=population.get(random.nextInt(population.size())).getIndividual();      int[] child1=new int[parent1.length];      for (int j=0; j < child1.length; j++) {        child1[j]=parent1[j];      }      int[] child2=new int[parent2.length];      for (int j=0; j < child2.length; j++) {        child2[j]=parent2[j];      }      crossover(child1,child2);      if (isValid(child1)) {        children.add(new AggregationIndividual(child1));      }      if (isValid(child2)) {        children.add(new AggregationIndividual(child2));      }    }  }  population.addAll(children);}  }
class C{  public JSONArray put(double value) throws JSONException {  Double d=new Double(value);  JSONObject.testValidity(d);  this.put(d);  return this;}  }
class C{  public DefaultRequest userTimingLabel(String value){  setString(USER_TIMING_LABEL,value);  return this;}  }
class C{  @ReactMethod public void rClearAll(Callback errorCallback,Callback successCallback){  try {    mNotificationManager.clearAll();    successCallback.invoke();  } catch (  Exception e) {    errorCallback.invoke(e.getMessage());    Log.e("ReactSystemNotification","NotificationModule: rClearAll Error: " + Log.getStackTraceString(e));  }}  }
class C{  public void dispose(){  if (document == null)   return;  removeEventListeners(document);  lastFocusEventTarget=null;  document=null;}  }
class C{  public static final boolean isPersistent(Object o){  return o != null && o instanceof PO;}  }
class C{  public void layoutContainer(){  if (shouldLayout) {    shouldLayout=false;    doLayout();  }}  }
class C{  public static <T,C extends Collection<T>>C requireNonNullElements(C collection){  requireNonNull(collection,"The provided collection is null.");  collection.forEach(null);  return collection;}  }
class C{  public ConnectorHandle(Connector connector,ConnectionFigure prototype){  super(connector.getOwner());  this.connector=connector;  this.prototype=prototype;}  }
class C{  private static double norm(final double[] v){  double agg=0;  for (int i=0; i < v.length; i++) {    agg+=(v[i] * v[i]);  }  return Math.sqrt(agg);}  }
class C{  public static void enableTraceCoverage(){  traceCoverage=true;}  }
class C{  @Override public boolean equals(Object obj){  if (obj instanceof RatTerm) {    RatTerm rt=(RatTerm)obj;    return this.expt == rt.expt && this.coeff.equals(rt.coeff);  } else {    return false;  }}  }
class C{  public static byte[] decodeFromFile(String filename) throws java.io.IOException {  byte[] decodedData=null;  InputStream bis=null;  try {    java.io.File file=new java.io.File(filename);    byte[] buffer=null;    int length=0;    int numBytes=0;    if (file.length() > Integer.MAX_VALUE) {      throw new java.io.IOException("File is too big for this convenience method (" + file.length() + " bytes).");    }    buffer=new byte[(int)file.length()];    bis=new InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.DECODE);    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {      length+=numBytes;    }    decodedData=new byte[length];    System.arraycopy(buffer,0,decodedData,0,length);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bis.close();    } catch (    Exception e) {    }  }  return decodedData;}  }
class C{  @Override public void draw(Graphics2D g,Figure f,Point2D.Double p1,Point2D.Double p2){  for (  LineDecoration decoration : decorations) {    decoration.draw(g,f,p1,p2);  }}  }
class C{  public SourceText(AssertStatement stat,SourceUnit sourceUnit,Janitor janitor){  if (!hasPlausibleSourcePosition(stat))   throw new SourceTextNotAvailableException(stat,sourceUnit,"Invalid source position");  firstLine=stat.getLineNumber();  textOffsets.add(0);  normalizedText="";  for (int line=stat.getLineNumber(); line <= stat.getLastLineNumber(); line++) {    String lineText=sourceUnit.getSample(line,0,janitor);    if (lineText == null)     throw new SourceTextNotAvailableException(stat,sourceUnit,"SourceUnit.getSample() returned null");    if (line == stat.getLastLineNumber())     lineText=lineText.substring(0,stat.getLastColumnNumber() - 1);    if (line == stat.getLineNumber()) {      lineText=lineText.substring(stat.getColumnNumber() - 1);      lineOffsets.add(stat.getColumnNumber() - 1);    } else     lineOffsets.add(countLeadingWhitespace(lineText));    lineText=lineText.trim();    if (line != stat.getLastLineNumber() && lineText.length() > 0)     lineText+=' ';    normalizedText+=lineText;    textOffsets.add(normalizedText.length());  }}  }
class C{  public ReflectiveProperty(Class<T> propertyHolder,Class<V> valueType,String name){  super(valueType,name);  char firstLetter=Character.toUpperCase(name.charAt(0));  String theRest=name.substring(1);  String capitalizedName=firstLetter + theRest;  String getterName=PREFIX_GET + capitalizedName;  try {    mGetter=propertyHolder.getMethod(getterName,(Class<?>[])null);  } catch (  NoSuchMethodException e) {    getterName=PREFIX_IS + capitalizedName;    try {      mGetter=propertyHolder.getMethod(getterName,(Class<?>[])null);    } catch (    NoSuchMethodException e1) {      try {        mField=propertyHolder.getField(name);        Class fieldType=mField.getType();        if (!typesMatch(valueType,fieldType)) {          throw new NoSuchPropertyException("Underlying type (" + fieldType + ") "+ "does not match Property type ("+ valueType+ ")");        }        return;      } catch (      NoSuchFieldException e2) {        throw new NoSuchPropertyException("No accessor method or field found for" + " property with name " + name);      }    }  }  Class getterType=mGetter.getReturnType();  if (!typesMatch(valueType,getterType)) {    throw new NoSuchPropertyException("Underlying type (" + getterType + ") "+ "does not match Property type ("+ valueType+ ")");  }  String setterName=PREFIX_SET + capitalizedName;  try {    mSetter=propertyHolder.getMethod(setterName,getterType);  } catch (  NoSuchMethodException ignored) {  }}  }
class C{  private OrRule(final Rule firstParam,final Rule secondParam){  super();  this.rule1=firstParam;  this.rule2=secondParam;}  }
class C{  public Analyzer includeInvertedGenerationalDistance(){  includeInvertedGenerationalDistance=true;  return this;}  }
class C{  private int measureShort(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public SquareRoot(){  super(Number.class,Number.class);}  }
class C{  public static EnvironmentClassLoader create(String id){  ClassLoader parent=null;  return create(parent,id);}  }
class C{  protected void start(String filename,String key,String message){  getLogger(filename).start(key,message);}  }
class C{  private void launchAnim3(){  animatedVector3.start();}  }
class C{  @Override public String secureProtocol(){  SSLSocket sslSocket=_sslSocket;  if (sslSocket == null) {    return super.secureProtocol();  }  SSLSession sslSession=sslSocket.getSession();  if (sslSession != null) {    return sslSession.getProtocol();  } else {    return null;  }}  }
class C{  public Locale locale(){  return this.locale;}  }
class C{  public static void updateTaskDescription(Activity activity,String title,Bitmap icon,int color,boolean useDefaultStatusBarColor){  ApiCompatibilityUtils.setTaskDescription(activity,title,icon,color);  int statusBarColor=useDefaultStatusBarColor ? Color.BLACK : ColorUtils.getDarkenedColorForStatusBar(color);  ApiCompatibilityUtils.setStatusBarColor(activity.getWindow(),statusBarColor);}  }
class C{  public String toString(){  CharArrayBuffer buffer=new CharArrayBuffer(16);  buffer.append(this.protocol);  buffer.append('/');  buffer.append(Integer.toString(this.major));  buffer.append('.');  buffer.append(Integer.toString(this.minor));  return buffer.toString();}  }
class C{  public static int currentTime(){  return ((int)(System.currentTimeMillis() / 1000));}  }
class C{  public static String format(Context context,long bytes){  String result=Formatter.formatFileSize(context,bytes);  if (result.contains(",")) {    result=result.replace(',','.');  }  return result;}  }
class C{  public SymMatrix(String mname,int nrows){  super(mname,nrows);}  }
class C{  void cancel(final Object tag){  for (final Iterator<QueryTask> it=mTaskQueue.iterator(); it.hasNext(); ) {    final QueryTask task=it.next();    if (task.mTag.equals(tag)) {      task.mCancelled=true;      task.mCallback=null;      it.remove();    }  }}  }
class C{  public void resetTextBoxIndexesExcept(Set<Integer> excludedList){  Set<Integer> unusedTextBoxIndexes=new HashSet<Integer>(points.getTextBoxIndexes());  unusedTextBoxIndexes.removeAll(excludedList);  for (  Integer index : unusedTextBoxIndexes) {    points.removeTextBox(index);  }}  }
class C{  public DoughnutChart(MultipleCategorySeries dataset,DefaultRenderer renderer){  super(null,renderer);  mDataset=dataset;}  }
class C{  public SolutionUser(PrincipalId id,PrincipalId alias,String objectSid,SolutionDetail detail,boolean disabled,boolean external){  super(id,alias,objectSid);  Validate.notNull(detail,"Null SolutionDetail");  Validate.notNull(id,"Null PrincipalId");  this.detail=detail;  this.disabled=disabled;  this.external=external;}  }
class C{  protected boolean hasUncompressedStrip(){  return mStripBytes.size() != 0;}  }
class C{  public CNodeChooser(final ZyGraph graph,final CGraphSearchField searchField){  super(new BorderLayout());  Preconditions.checkNotNull(graph,"IE01764: Graph argument can not be null");  setBorder(new TitledBorder(new LineBorder(Color.LIGHT_GRAY,1,true),"Graph Nodes"));  setDoubleBuffered(true);  setMinimumSize(new Dimension(0,0));  m_table=new CNodeChooserTable(graph,searchField);  final JScrollPane scrollPane=new JScrollPane(m_table);  add(scrollPane,BorderLayout.CENTER);}  }
class C{  protected void updateDamage(DocumentEvent changes,Shape a,ViewFactory f){  Component host=getContainer();  updateMetrics();  Element elem=getElement();  DocumentEvent.ElementChange ec=changes.getChange(elem);  Element[] added=(ec != null) ? ec.getChildrenAdded() : null;  Element[] removed=(ec != null) ? ec.getChildrenRemoved() : null;  if (((added != null) && (added.length > 0)) || ((removed != null) && (removed.length > 0))) {    if (added != null) {      int addedAt=ec.getIndex();      for (int i=0; i < added.length; i++)       possiblyUpdateLongLine(added[i],addedAt + i);    }    if (removed != null) {      for (int i=0; i < removed.length; i++) {        if (removed[i] == longLine) {          longLineWidth=-1;          calculateLongestLine();          break;        }      }    }    preferenceChanged(null,true,true);    host.repaint();  } else   if (changes.getType() == DocumentEvent.EventType.CHANGE) {    int startLine=changes.getOffset();    int endLine=changes.getLength();    damageLineRange(startLine,endLine,a,host);  } else {    Element map=getElement();    int line=map.getElementIndex(changes.getOffset());    damageLineRange(line,line,a,host);    if (changes.getType() == DocumentEvent.EventType.INSERT) {      Element e=map.getElement(line);      if (e == longLine) {        longLineWidth=getLineWidth(line);        preferenceChanged(null,true,false);      } else {        if (possiblyUpdateLongLine(e,line))         preferenceChanged(null,true,false);      }    } else     if (changes.getType() == DocumentEvent.EventType.REMOVE) {      if (map.getElement(line) == longLine) {        longLineWidth=-1;        calculateLongestLine();        preferenceChanged(null,true,false);      }    }  }}  }
class C{  @Override protected boolean shouldComposeCreationImage(){  return true;}  }
class C{  public static Map<String,CompiledClass> parseClassFilesInDir(File buildDir){  Map<String,CompiledClass> result=new HashMap<String,CompiledClass>();  for (  File entry : buildDir.listFiles()) {    if (entry.isDirectory()) {      result.putAll(parseClassFilesInDir(entry));    } else     if (entry.getName().endsWith(".class")) {      try {        CompiledClass parsed=CompiledClass.getInstance(new FileInputStream(entry));        if (!parsed.isInterface()) {          result.put(parsed.fullyQualifiedName(),parsed);        }      } catch (      IOException e) {        System.err.println("Exception while parsing " + entry.getName() + ": "+ e.getMessage());      }    }  }  return result;}  }
class C{  public void propertyChange(PropertyChangeEvent e){  getHandler().propertyChange(e);}  }
class C{  public Vec3(Vec3 vector){  if (vector == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Vec3","constructor","missingVector"));  }  this.x=vector.x;  this.y=vector.y;  this.z=vector.z;}  }
class C{  private String toString(InputStream inputStream) throws IOException {  String string;  StringBuilder outputBuilder=new StringBuilder();  if (inputStream != null) {    BufferedReader reader=new BufferedReader(new InputStreamReader(inputStream));    while (null != (string=reader.readLine())) {      outputBuilder.append(string).append('\n');    }  }  return outputBuilder.toString();}  }
class C{  public static int executeUpdateEx(String sql,String trxName) throws DBException {  return executeUpdateEx(sql,trxName,0);}  }
class C{  public synchronized void processResponse(StunResponseEvent response){  collectedResponse=(Response)response.getMessage();  logger.finest("Received response.");  notifyAll();}  }
class C{  public static Dcsd cs_dalloc(int m,int n){  Dcsd D;  D=new Dcsd();  D.p=new int[m];  D.r=new int[m + 6];  D.q=new int[n];  D.s=new int[n + 6];  D.cc=new int[5];  D.rr=new int[5];  return D;}  }
class C{  public static Graph createDefaultGraph(){  return getHelper().createDefaultGraph();}  }
class C{  public TraceScope newNullScope(){  ThreadContext context=threadContext.get();  context.pushScope();  return nullScope;}  }
class C{  public AttributeChangeNotification(Object source,long sequenceNumber,long timeStamp,String msg,String attributeName,String attributeType,Object oldValue,Object newValue){  super(AttributeChangeNotification.ATTRIBUTE_CHANGE,source,sequenceNumber,timeStamp,msg);  this.attributeName=attributeName;  this.attributeType=attributeType;  this.oldValue=oldValue;  this.newValue=newValue;}  }
class C{  boolean isLeapYear(int year){  int key=1 << (year % 30);  return ((pattern & key) > 0);}  }
class C{  private long acquireWrite(boolean interruptible,long deadline){  WNode node=null, p;  for (int spins=-1; ; ) {    long m, s, ns;    if ((m=(s=state) & ABITS) == 0L) {      if (U.compareAndSwapLong(this,STATE,s,ns=s + WBIT))       return ns;    } else     if (spins < 0)     spins=(m == WBIT && wtail == whead) ? SPINS : 0; else     if (spins > 0) {      if (LockSupport.nextSecondarySeed() >= 0)       --spins;    } else     if ((p=wtail) == null) {      WNode hd=new WNode(WMODE,null);      if (U.compareAndSwapObject(this,WHEAD,null,hd))       wtail=hd;    } else     if (node == null)     node=new WNode(WMODE,p); else     if (node.prev != p)     node.prev=p; else     if (U.compareAndSwapObject(this,WTAIL,p,node)) {      p.next=node;      break;    }  }  for (int spins=-1; ; ) {    WNode h, np, pp;    int ps;    if ((h=whead) == p) {      if (spins < 0)       spins=HEAD_SPINS; else       if (spins < MAX_HEAD_SPINS)       spins<<=1;      for (int k=spins; ; ) {        long s, ns;        if (((s=state) & ABITS) == 0L) {          if (U.compareAndSwapLong(this,STATE,s,ns=s + WBIT)) {            whead=node;            node.prev=null;            return ns;          }        } else         if (LockSupport.nextSecondarySeed() >= 0 && --k <= 0)         break;      }    } else     if (h != null) {      WNode c;      Thread w;      while ((c=h.cowait) != null) {        if (U.compareAndSwapObject(h,WCOWAIT,c,c.cowait) && (w=c.thread) != null)         U.unpark(w);      }    }    if (whead == h) {      if ((np=node.prev) != p) {        if (np != null)         (p=np).next=node;      } else       if ((ps=p.status) == 0)       U.compareAndSwapInt(p,WSTATUS,0,WAITING); else       if (ps == CANCELLED) {        if ((pp=p.prev) != null) {          node.prev=pp;          pp.next=node;        }      } else {        long time;        if (deadline == 0L)         time=0L; else         if ((time=deadline - System.nanoTime()) <= 0L)         return cancelWaiter(node,node,false);        Thread wt=Thread.currentThread();        U.putObject(wt,PARKBLOCKER,this);        node.thread=wt;        if (p.status < 0 && (p != h || (state & ABITS) != 0L) && whead == h && node.prev == p)         U.park(false,time);        node.thread=null;        U.putObject(wt,PARKBLOCKER,null);        if (interruptible && Thread.interrupted())         return cancelWaiter(node,node,true);      }    }  }}  }
class C{  public boolean canBeLongAddress(int address){  return ((address >= 0) && (address <= 10239));}  }
class C{  public static GT_Tool_Item constructElectricWrenchItem(String aUnlocalized,String aEnglish,int aMaxDamage,int aEntityDamage,int aDisChargedGTID){  try {    return (GT_Tool_Item)Class.forName("gregtechmod.api.items.GT_WrenchIC_Item").getConstructors()[0].newInstance(aUnlocalized,aEnglish,aMaxDamage,aEntityDamage,aDisChargedGTID);  } catch (  Throwable e) {  }  return new gregtech.api.items.GT_Tool_Item(aUnlocalized,aEnglish,"Doesn't work as intended, this is a Bug",aMaxDamage,aEntityDamage,false);}  }
class C{  public String toString(final JIPEngine engine){  return m_obj.toString(engine);}  }
class C{  public static void serializeBoolean(boolean val,byte[] buffer,MutableInt offset){  buffer[offset.intValue()]=(byte)(val ? 1 : 0);  offset.add(Type.BOOLEAN.getByteSize());}  }
class C{  public TouchlessScrollView(Context context,AttributeSet attrs){  this(context,attrs,0);}  }
class C{  private void createConsumerForSubscriptionQueue(Queue queue,String topic,int qos) throws Exception {  long cid=session.getServer().getStorageManager().generateID();  ServerConsumer consumer=session.getServerSession().createConsumer(cid,queue.getName(),null,false,true,-1);  consumer.setStarted(true);  consumers.put(topic,consumer);  consumerQoSLevels.put(cid,qos);}  }
class C{  public String toString(){  return "MSystem[" + getName() + ",User="+ getUserName()+ ",ReleaseNo="+ getReleaseNo()+ "]";}  }
class C{  public FairDistributionAssertion(){  super(grid(0),CACHE_NAME);}  }
class C{  public void addMember(AbstractResourceDescription member){  if (members == null) {    members=new AbstractResourceDescription[]{member};  } else {    AbstractResourceDescription[] expandedMembers=new AbstractResourceDescription[members.length + 1];    System.arraycopy(members,0,expandedMembers,0,members.length);    expandedMembers[members.length]=member;    members=expandedMembers;  }}  }
class C{  public static GenericListeningConnector create(TransportService ts){  return new GenericListeningConnector(ts,true);}  }
class C{  private void populateData(Region region,Object[] data){  logger.info("PRInvalidQueryJUnitTest#populateData: Populating Data to the region");  for (int j=0; j < data.length; j++) {    region.put(new Integer(j),data[j]);  }}  }
class C{  public boolean equals(Object obj){  if (obj instanceof ActivationID) {    ActivationID id=(ActivationID)obj;    return (uid.equals(id.uid) && activator.equals(id.activator));  } else {    return false;  }}  }
class C{  public static float intBitsToFloat(int bits){  return 0.0f;}  }
class C{  public AndroidOaepKeystoreSecretKeyWrapper(Context context,String alias) throws GeneralSecurityException {  super(context,alias);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private static Set<String> fileToLines(String filename){  Set<String> lines=new HashSet<>();  String line;  try {    BufferedReader in=new BufferedReader(new FileReader(filename));    while ((line=in.readLine()) != null) {      lines.add(line);    }    in.close();  } catch (  IOException e) {    e.printStackTrace();  }  return lines;}  }
class C{  public boolean isStateActive(State state){switch (state) {case main_region_A:    return stateVector[0] == State.main_region_A;case main_region_B:  return stateVector[0] == State.main_region_B;case main_region_C:return stateVector[0] == State.main_region_C;default :return false;}}  }
class C{  SearchResultMediator(long token,List<String> searchTokens,SearchInformation info){  super(SEARCH_TABLE);  SEARCH_INFO=info;  this.token=token;  this.searchTokens=searchTokens;  setupRealTable();  resetFilters();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case GamlPackage.ARRAY__EXPRS:    return exprs != null;}return super.eIsSet(featureID);}  }
class C{  public synchronized int search(Object o){  int i=lastIndexOf(o);  if (i >= 0) {    return size() - i;  }  return -1;}  }
class C{  public Tasks<BlockConsistencyGroupRestRep> activateFullCopy(URI consistencyGroupId,URI fullCopyId){  final String url=getIdUrl() + "/protection/full-copies/{fcid}/activate";  return postTasks(url,consistencyGroupId,fullCopyId);}  }
class C{  public boolean isAcquired(){  return acquireCount.get() > 0;}  }
class C{  public CTracesNodeComponent(final JTree projectTree,final IViewContainer container){  super(new BorderLayout());  Preconditions.checkNotNull(projectTree,"IE02007: Project tree argument can not be null");  m_container=Preconditions.checkNotNull(container,"IE02008: Container argument can not be null");  setBorder(new TitledBorder("Debug Traces"));  m_tracesPanel=new CDebugEventListPanel(m_container.getTraceProvider());  final CArbitraryViewsTable table=new CArbitraryViewsTable(projectTree,m_model,container,new CTracesViewsTableHelp());  final JPanel lowerPanel=new CTablePanel<INaviView>(table,new CViewFilterCreator(container),new CViewFilterHelp());  lowerPanel.setBorder(new TitledBorder("Views"));  lowerPanel.add(new JScrollPane(table));  final JSplitPane splitPane=new JSplitPane(JSplitPane.VERTICAL_SPLIT,true,m_tracesPanel,lowerPanel);  add(splitPane,BorderLayout.CENTER);  splitPane.setResizeWeight(0.5);  m_tracesPanel.getTracesTable().getSelectionModel().addListSelectionListener(m_listener);  m_tracesPanel.getTracesTable().addMouseListener(new InternalTraceTableListener());  m_tracesPanel.getEventsTable().addMouseListener(new InternalEventsTableListener());}  }
class C{  private String codeText(Caption newC){  String toReturn="";  String[] lines=newC.content.split("<br />");  int i=0;  int tab=0;  if (lines[i].length() > 32)   lines[i]=lines[i].substring(0,32);  tab=(32 - lines[i].length()) / 2;  toReturn+="1340 1340 ";  if (tab % 4 != 0)   ;  toReturn+=codeChar(lines[i].toCharArray());  if (lines.length > 1) {    i++;    if (lines[i].length() > 32)     lines[i]=lines[i].substring(0,32);    tab=(32 - lines[i].length()) / 2;    toReturn+="13e0 13e0 ";    if (tab % 4 != 0)     ;    toReturn+=codeChar(lines[i].toCharArray());    if (lines.length > 2) {      i++;      if (lines[i].length() > 32)       lines[i]=lines[i].substring(0,32);      tab=(32 - lines[i].length()) / 2;      toReturn+="9440 9440 ";      if (tab % 4 != 0)       ;      toReturn+=codeChar(lines[i].toCharArray());      if (lines.length > 3) {        i++;        if (lines[i].length() > 32)         lines[i]=lines[i].substring(0,32);        tab=(32 - lines[i].length()) / 2;        toReturn+="94e0 94e0 ";        if (tab % 4 != 0)         ;        toReturn+=codeChar(lines[i].toCharArray());      }    }  }  return toReturn;}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.EXPORTED_VARIABLE_BINDING;}  }
class C{  public boolean containsValue(Object value){  Object[] tab=table;  for (int i=1; i < tab.length; i+=2)   if (tab[i] == value && tab[i - 1] != null)   return true;  return false;}  }
class C{  public PriorityQueue(int initialCapacity){  this(initialCapacity,null);}  }
class C{  private void createBinaryFile(String infile,String toDir) throws IOException {  backupFile(toDir,infile);  String infileResource=infile.replace('\\','/');  InputStream in=getClass().getClassLoader().getResourceAsStream(infileResource);  OutputStream out=null;  try {    out=new FileOutputStream(toDir + File.separator + infile);    while (true) {synchronized (BUFFER) {        int amountRead=in.read(BUFFER);        if (amountRead == -1) {          break;        }        out.write(BUFFER,0,amountRead);      }    }  }  finally {    if (in != null) {      in.close();    }    if (out != null) {      out.close();    }  }}  }
class C{  public static void throwBadExitCode(final int exitCode){  if (exitCode != 0) {    throw new ToolBadExitCodeException(exitCode);  }}  }
class C{  public UnchangeableAllowingOnBehalfActingException(){}  }
class C{  private void showErrorIconHax(Drawable icon){  if (icon == null)   return;  if (Build.VERSION.SDK_INT != Build.VERSION_CODES.JELLY_BEAN && Build.VERSION.SDK_INT != Build.VERSION_CODES.JELLY_BEAN_MR1)   return;  try {    Class<?> textview=Class.forName("android.widget.TextView");    Field tEditor=textview.getDeclaredField("mEditor");    tEditor.setAccessible(true);    Class<?> editor=Class.forName("android.widget.Editor");    Method privateShowError=editor.getDeclaredMethod("setErrorIcon",Drawable.class);    privateShowError.setAccessible(true);    privateShowError.invoke(tEditor.get(this),icon);  } catch (  Exception e) {  }}  }
class C{  @SuppressWarnings("unused") public boolean isInRestoreState(View view){  if (mViewState != null) {    return mViewState.isInRestoreState(view);  }  return false;}  }
class C{  static public boolean isNetworkAvailable(Context c){  ConnectivityManager cm=(ConnectivityManager)c.getSystemService(Context.CONNECTIVITY_SERVICE);  NetworkInfo activeNetwork=cm.getActiveNetworkInfo();  return activeNetwork != null && activeNetwork.isConnectedOrConnecting();}  }
class C{  public int readQuality(int seq,byte[] dest,int start,int length) throws IOException {  seq(seq);  if (mPointers[mStartFileNo][mStartIndex] == mPointers[mStartFileNo][mStartIndex + 1]) {    return 0;  }  initQuality();  int arrOffset=mPointers[mStartFileNo][mStartIndex] + start;  int fileNo=mStartFileNo;  int index=mStartIndex + 1;  while (arrOffset >= mPointers[fileNo][index]) {    arrOffset-=mPointers[fileNo][index];    fileNo++;    index=0;  }  int lengthToGet=Math.min(mPointers[fileNo][index] - arrOffset,length);  int destOffset=0;  mQualityData[fileNo].get(dest,arrOffset,0,lengthToGet);  destOffset+=lengthToGet;  if (destOffset < length && index == mPointers[fileNo].length - 1) {    fileNo++;    while (destOffset < length && fileNo < mPointers.length && mPointers[fileNo].length == 1) {      lengthToGet=Math.min(mPointers[fileNo][0],length - destOffset);      mQualityData[fileNo].get(dest,0,destOffset,lengthToGet);      destOffset+=lengthToGet;      fileNo++;    }    if (destOffset < length && fileNo < mPointers.length) {      lengthToGet=Math.min(mPointers[fileNo][0],length - destOffset);      mQualityData[fileNo].get(dest,0,destOffset,lengthToGet);      destOffset+=lengthToGet;    }  }  return destOffset;}  }
class C{  public Table createDestTable(Cluster srcCluster,Cluster destCluster,Table srcTable,Table existingDestTable){  Table destTable=new Table(srcTable);  Optional<Path> srcLocation=ReplicationUtils.getLocation(srcTable);  if (srcLocation.isPresent() && !srcLocation.get().toString().startsWith("s3")) {    String destLocation=modifyLocation(srcCluster,destCluster,srcLocation.get().toString());    destTable.getSd().setLocation(destLocation);  }  destTable.putToParameters(HiveParameterKeys.SRC_CLUSTER,srcCluster.getName());  if (existingDestTable != null) {    Map<String,String> newParameters=new HashMap<>();    newParameters.putAll(existingDestTable.getParameters());    newParameters.putAll(destTable.getParameters());    destTable.setParameters(newParameters);  }  return destTable;}  }
class C{  public BigInteger(int signum,byte[] magnitude){  this.mag=stripLeadingZeroBytes(magnitude);  if (signum < -1 || signum > 1)   throw (new NumberFormatException("Invalid signum value"));  if (this.mag.length == 0) {    this.signum=0;  } else {    if (signum == 0)     throw (new NumberFormatException("signum-magnitude mismatch"));    this.signum=signum;  }  if (mag.length >= MAX_MAG_LENGTH) {    checkRange();  }}  }
class C{  public void drawPolygon(int xPoints[],int yPoints[],int nPoints){  mGraphics.drawPolygon(xPoints,yPoints,nPoints);}  }
class C{  private TrustAnchor findTrustAnchorBySubjectAndPublicKey(X509Certificate cert){  TrustAnchor trustAnchor=trustedCertificateIndex.findBySubjectAndPublicKey(cert);  if (trustAnchor != null) {    return trustAnchor;  }  if (trustedCertificateStore == null) {    return null;  }  if (trustedCertificateStore.isTrustAnchor(cert)) {    return trustedCertificateIndex.index(cert);  }  return null;}  }
class C{  synchronized void insertStyle(Style style,int specificity){  AttributeSet[] attrs=getAttributes();  int maxCounter=attrs.length;  int counter=0;  for (; counter < extendedIndex; counter++) {    if (specificity > getSpecificity(((Style)attrs[counter]).getName())) {      break;    }  }  insertAttributeSetAt(style,counter);  extendedIndex++;}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  System.out.print("Enter an index for a Fibonacci number: ");  int index=input.nextInt();  System.out.println("The Fibonacci number at index " + index + " is "+ fib(index));  System.out.println("The fib method was called " + count + (count == 1 ? " time." : " times."));}  }
class C{  protected InlineAssociation_Impl(){  super();}  }
class C{  public static void copyStream(InputStream is,OutputStream os) throws IOException {  byte[] buf=new byte[BUFFER_SIZE];  while (true) {    int count=is.read(buf);    if (count <= 0) {      break;    }    os.write(buf,0,count);  }}  }
class C{  public static Cylinder computeBoundingCylinderOrig(Globe globe,double verticalExaggeration,Sector sector,double minElevation,double maxElevation){  return Cylinder.computeVerticalBoundingCylinder(globe,verticalExaggeration,sector,minElevation,maxElevation);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:38.386 -0500",hash_original_method="360B190BBB89421C9CB5EC1082F87452",hash_generated_method="5175FC265C12B410D802C28516887E7F") public static void cursorLongToContentValuesIfPresent(Cursor cursor,ContentValues values,String column){  final int index=cursor.getColumnIndex(column);  if (index != -1 && !cursor.isNull(index)) {    values.put(column,cursor.getLong(index));  }}  }
class C{  public ClusterContainers(){  containers=new ArrayList<>();}  }
class C{  public void endCompose(StylesheetRoot sroot) throws TransformerException {  int length=getSortElemCount();  for (int i=0; i < length; i++) {    getSortElem(i).endCompose(sroot);  }  super.endCompose(sroot);}  }
class C{  public synchronized <T extends Type>T fetch(ID id,Class<T> clazz,Supplier<T> creator){  Type in_register=registered.get(id);  if (in_register == null) {    for (    ID key : registered.keySet()) {      if (key.equals(id)) {        in_register=registered.get(key);      }    }  }  if (in_register == null) {    T instance=creator.get();    registered.put(id,instance);    return instance;  } else {    if (clazz.isAssignableFrom(in_register.getClass()))     return (T)in_register; else     throw new IllegalStateException("An object already exists in the Registrar with the given ID, " + "but is of a different type! Expected: " + clazz.getName() + ", but got: "+ in_register.getClass().getName());  }}  }
class C{  public void endString(String string){}  }
class C{  public void addItem(T item){  model.addItem(item);}  }
class C{  private static String mergeImport(String importName,String className){  if (importName.isEmpty() || importName.equals(className)) {    return className;  }  String[] importSplit=importName.split("\\.");  String[] classSplit=className.split("\\.");  String importEnd=importSplit[importSplit.length - 1];  if ("*".equals(importEnd)) {    return importName.substring(0,importName.length() - 1) + className;  } else {    int i=importSplit.length;    int n=i - classSplit.length;    while (--i >= n) {      if (!classSplit[i - n].equals(importSplit[i])) {        return null;      }    }    return importName;  }}  }
class C{  public Gate(){  this(VERTICAL,null,null);}  }
class C{  public void reset(){  getTreeModel().reset();}  }
class C{  public void loadPatterns(InputSource source) throws IOException {  PatternParser pp=new PatternParser(this);  ivalues=new TernaryTree();  pp.parse(source);  trimToSize();  vspace.trimToSize();  classmap.trimToSize();  ivalues=null;}  }
class C{  public Boolean includeRaw(){  return includeRaw;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case SGraphPackage.REACTION__TRIGGER:    setTrigger((Trigger)null);  return;case SGraphPackage.REACTION__EFFECT:setEffect((Effect)null);return;case SGraphPackage.REACTION__PROPERTIES:getProperties().clear();return;}super.eUnset(featureID);}  }
class C{  public void writeTo(Writer out) throws IOException {  out.write(buf,0,count);}  }
class C{  public void zoomIn(){  if (zoomIndex == (ZOOM_FACTORS.length - 1)) {    return;  }  zoomIndex++;  zoom();}  }
class C{  public final void testIsStatePreserved1(){  byte[] encodedKey=new byte[]{(byte)1,(byte)2,(byte)3,(byte)4};  byte[] encodedKeyCopy=encodedKey.clone();  PKCS8EncodedKeySpec meks=new PKCS8EncodedKeySpec(encodedKeyCopy);  encodedKeyCopy[3]=(byte)5;  byte[] ek=meks.getEncoded();  assertTrue(Arrays.equals(encodedKey,ek));}  }
class C{  public BufferedDataInputStream(){  super(null);  this.initFields();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  void createPresenter(){  P presenter=delegateCallback.getPresenter();  if (presenter == null) {    presenter=delegateCallback.createPresenter();  }  if (presenter == null) {    throw new NullPointerException("Presenter is null! Do you return null in createPresenter()?");  }  delegateCallback.setPresenter(presenter);}  }
class C{  public int lastIndexOf(final char ch){  return lastIndexOf(ch,size - 1);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.ANNOTABLE_N4_MEMBER_DECLARATION__ANNOTATION_LIST:    setAnnotationList((N4MemberAnnotationList)null);  return;}super.eUnset(featureID);}  }
class C{  protected OMGraphicList loadListFromHandler(OMGraphicList graphics){  if (graphics == null) {    graphics=new OMGraphicList();  }  OMGraphic image=getNextImage();  while (image != null) {    graphics.add(image);    image=getNextImage();  }  return graphics;}  }
class C{  public boolean deletePersistentObject(String key){  try {    if (checkService()) {      return sService.writePersistentBytes(key,null);    }  } catch (  RemoteException e) {  }  return false;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name: ");  result.append(name);  result.append(", value: ");  result.append(value);  result.append(')');  return result.toString();}  }
class C{  public static int hashSearchOrInsert(final Memory mem,final int lgArrLongs,final long hash,final int memOffsetBytes){  final int arrayMask=(1 << lgArrLongs) - 1;  final int stride=getStride(hash,lgArrLongs);  int curProbe=(int)(hash & arrayMask);  int curProbeOffsetBytes=(curProbe << 3) + memOffsetBytes;  long curArrayHash=mem.getLong(curProbeOffsetBytes);  while (curArrayHash != 0) {    if (curArrayHash == hash)     return curProbe;    curProbe=(curProbe + stride) & arrayMask;    curProbeOffsetBytes=(curProbe << 3) + memOffsetBytes;    curArrayHash=mem.getLong(curProbeOffsetBytes);  }  mem.putLong(curProbeOffsetBytes,hash);  return ~curProbe;}  }
class C{  public void addChild(Description description){  fChildren.add(description);}  }
class C{  public MissingHeaderResponse(){  requestFileName="getstate.query";  responseFile="no-header.query";}  }
class C{  public Iterable<Object> loadAll(InputStream yaml){  return loadAll(new UnicodeReader(yaml));}  }
class C{  protected void onPrepareRequest(HttpUriRequest request) throws IOException {}  }
class C{  public T caseConstraintRule(ConstraintRule object){  return null;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected List<double[]> means(List<? extends ModifiableDBIDs> clusters,List<double[]> means,Relation<DiscreteUncertainObject> database){  List<double[]> newMeans=new ArrayList<>(k);  for (int i=0; i < k; i++) {    ModifiableDBIDs list=clusters.get(i);    double[] mean=null;    if (list.size() > 0) {      DBIDIter iter=list.iter();      mean=ArrayLikeUtil.toPrimitiveDoubleArray(database.get(iter).getCenterOfMass());      iter.advance();      for (; iter.valid(); iter.advance()) {        NumberVector vec=database.get(iter).getCenterOfMass();        for (int j=0; j < mean.length; j++) {          mean[j]+=vec.doubleValue(j);        }      }      VMath.timesEquals(mean,1.0 / list.size());    } else {      mean=means.get(i);    }    newMeans.add(mean);  }  return newMeans;}  }
class C{  public DeviceIndexInterator(DeviceManagerImpl deviceManager,Iterator<Long> subIterator){  super();  this.deviceManager=deviceManager;  this.subIterator=subIterator;}  }
class C{  @Override public String toString(){  return "L" + System.identityHashCode(this);}  }
class C{  public TraceScope newScope(String description){  TraceScope parentScope=threadLocalScope.get();  ThreadContext context=threadContext.get();  if (parentScope != null) {    return newScopeImpl(context,description,parentScope);  }  if (!context.isTopLevel()) {    context.pushScope();    return nullScope;  }  if (!sample()) {    context.pushScope();    return nullScope;  }  return newScopeImpl(context,description);}  }
class C{  @Override public Object clone(){  return new AttributeRole(this);}  }
class C{  public static void debug(Object message){  RuntimeSingleton.debug(message);}  }
class C{  public static <V>MultipleObjectsBundle makeSimple(SimpleTypeInformation<? super V> type,List<? extends V> data){  MultipleObjectsBundle bundle=new MultipleObjectsBundle();  bundle.appendColumn(type,data);  return bundle;}  }
class C{  public CollectionAnalyzer(XML aXml){  xml=aXml;}  }
class C{  private static double invokeNativeProcess(String command) throws IOException {  Process process=new ProcessBuilder(Settings.parseCommand(command)).start();  RedirectStream.redirect(process.getErrorStream(),System.err);  BufferedReader reader=null;  String lastLine=null;  try {    reader=new BufferedReader(new InputStreamReader(process.getInputStream()));    String line=null;    while ((line=reader.readLine()) != null) {      lastLine=line;    }  }  finally {    if (reader != null) {      reader.close();    }  }  String[] tokens=lastLine.split("\\s+");  return Double.parseDouble(tokens[tokens.length - 1]);}  }
class C{  private void configureMessageChannel(MessageChannel channel,String channelName,boolean input){  Assert.isAssignable(AbstractMessageChannel.class,channel.getClass());  AbstractMessageChannel messageChannel=(AbstractMessageChannel)channel;  final BindingProperties bindingProperties=this.channelBindingServiceProperties.getBindingProperties(channelName);  final String contentType=bindingProperties.getContentType();  if (!input && bindingProperties.getProducer() != null && bindingProperties.getProducer().isPartitioned()) {    messageChannel.addInterceptor(new PartitioningInterceptor(bindingProperties));  }  if (StringUtils.hasText(contentType)) {    messageChannel.addInterceptor(new ContentTypeConvertingInterceptor(contentType,input));  }}  }
class C{  public static boolean isFinal(int mod){  return (mod & FINAL) != 0;}  }
class C{  protected void encodeRecursive(FacesContext context,UIComponent component) throws IOException {  if (!component.isRendered()) {    return;  }  component.encodeBegin(context);  if (component.getRendersChildren()) {    component.encodeChildren(context);  } else {    Iterator<UIComponent> kids=getChildren(component);    while (kids.hasNext()) {      UIComponent kid=kids.next();      encodeRecursive(context,kid);    }  }  component.encodeEnd(context);}  }
class C{  public static TechnicalServiceOperationException convertToApi(org.oscm.internal.types.exception.TechnicalServiceOperationException oldEx){  return convertExceptionToApi(oldEx,TechnicalServiceOperationException.class);}  }
class C{  public void parseAtom(ExtensionProfile extProfile,XmlEventSource source) throws IOException, ParseException {  FeedHandler handler=new FeedHandler(extProfile);  new EventSourceParser(handler,Namespaces.atom,"feed").parse(source);}  }
class C{  public MaterialEditText error(String error){  mError.setText(error);  return this;}  }
class C{  public static String stripTags(String html){  if (html == null) {    return "";  }  if ((html.indexOf('<') == -1) || (html.indexOf('>') == -1)) {    return html;  }  StringWriter writer=new StringWriter();  TextStream stream=new TextStream(html);  while (!stream.atEnd()) {    String text=stream.upTo('<');    writer.write(text);    int position=stream.getPosition();    stream.skip();    String word=stream.nextWord();    if (word != null) {      if (word.equals("p")) {        writer.write("\n\n");      } else       if (word.equals("br")) {        writer.write("\n");      } else       if (word.equals("div")) {        writer.write("\n");      }      stream.skipTo('>');      if (stream.atEnd()) {        stream.setPosition(position);        writer.write(stream.upToEnd());      } else {        stream.skip();      }    }  }  return writer.toString();}  }
class C{  public void addSegment(byte segmentMarker,byte[] segmentBytes){  addSegment(segmentMarker,segmentBytes,-1);}  }
class C{  public void postStop(){  cluster.unsubscribe(getSelf());}  }
class C{  public void deleteArc(int nParent,int nChild) throws Exception {  if (m_bNeedsUndoAction) {    addUndoAction(new DeleteArcAction(nParent,nChild));  }  int nParentCard=m_ParentSets[nChild].getCardinalityOfParents();  int nTargetCard=m_Instances.attribute(nChild).numValues();  nParentCard=nParentCard / nTargetCard;  Estimator[] distribution2=new Estimator[nParentCard];  for (int iParent=0; iParent < nParentCard; iParent++) {    distribution2[iParent]=m_Distributions[nChild][iParent];  }  m_Distributions[nChild]=distribution2;  m_ParentSets[nChild].deleteParent(nParent,m_Instances);}  }
class C{  public void blacklist(){  blacklist=true;}  }
class C{  public IOObject store(IOObject ioobject,RepositoryLocation location,Operator callingOperator,ProgressListener progressListener) throws RepositoryException {  Entry entry=location.locateEntry();  if (entry == null) {    RepositoryLocation parentLocation=location.parent();    if (parentLocation != null) {      String childName=location.getName();      Entry parentEntry=parentLocation.locateEntry();      Folder parentFolder;      if (parentEntry != null) {        if (parentEntry instanceof Folder) {          parentFolder=(Folder)parentEntry;        } else {          throw new RepositoryException("Parent '" + parentLocation + "' of '"+ location+ "' is not a folder.");        }      } else {        parentFolder=parentLocation.createFoldersRecursively();      }      parentFolder.createIOObjectEntry(childName,ioobject,callingOperator,progressListener);      return ioobject;    } else {      throw new RepositoryException("Entry '" + location + "' does not exist.");    }  } else   if (entry instanceof IOObjectEntry) {    ((IOObjectEntry)entry).storeData(ioobject,callingOperator,null);    return ioobject;  } else {    throw new RepositoryException("Entry '" + location + "' is not a data entry, but "+ entry.getType());  }}  }
class C{  private Object readResolve() throws java.io.ObjectStreamException {switch (mode) {case MODE_ZERO_PAD:    return ZERO_PAD;case MODE_REPLICATE:  return REPLICATE;case MODE_WRAP:return WRAP;default :throw new Error("Unknown Pad Mode type");}}  }
class C{  public X509CRLHolder(byte[] crlEncoding) throws IOException {  this(parseStream(new ByteArrayInputStream(crlEncoding)));}  }
class C{  @Override protected void register(ConfigurationCapabilityFactory configurationCapabilityFactory){  configurationCapabilityFactory.registerConfigurationCapability("jetty4x",ContainerType.EMBEDDED,ConfigurationType.STANDALONE,Jetty4xEmbeddedStandaloneLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("jetty5x",ContainerType.EMBEDDED,ConfigurationType.STANDALONE,Jetty4xEmbeddedStandaloneLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("jetty6x",ContainerType.EMBEDDED,ConfigurationType.STANDALONE,Jetty6xEmbeddedStandaloneLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("jetty6x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,JettyStandaloneLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("jetty6x",ContainerType.INSTALLED,ConfigurationType.EXISTING,JettyExistingLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("jetty6x",ContainerType.REMOTE,ConfigurationType.RUNTIME,JettyRuntimeConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("jetty7x",ContainerType.EMBEDDED,ConfigurationType.STANDALONE,Jetty6xEmbeddedStandaloneLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("jetty7x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,Jetty7xStandaloneLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("jetty7x",ContainerType.INSTALLED,ConfigurationType.EXISTING,JettyExistingLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("jetty7x",ContainerType.REMOTE,ConfigurationType.RUNTIME,JettyRuntimeConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("jetty8x",ContainerType.EMBEDDED,ConfigurationType.STANDALONE,Jetty6xEmbeddedStandaloneLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("jetty8x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,Jetty7xStandaloneLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("jetty8x",ContainerType.INSTALLED,ConfigurationType.EXISTING,JettyExistingLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("jetty8x",ContainerType.REMOTE,ConfigurationType.RUNTIME,JettyRuntimeConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("jetty9x",ContainerType.EMBEDDED,ConfigurationType.STANDALONE,Jetty6xEmbeddedStandaloneLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("jetty9x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,Jetty7xStandaloneLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("jetty9x",ContainerType.INSTALLED,ConfigurationType.EXISTING,JettyExistingLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("jetty9x",ContainerType.REMOTE,ConfigurationType.RUNTIME,JettyRuntimeConfigurationCapability.class);}  }
class C{  private void initBPRMADetails(int C_BPartner_ID){  rmaField.removeActionListener(this);  rmaField.removeAllItems();  KeyNamePair pp=new KeyNamePair(0,"");  rmaField.addItem(pp);  ArrayList<KeyNamePair> list=loadRMAData(C_BPartner_ID);  for (  KeyNamePair knp : list)   rmaField.addItem(knp);  rmaField.setSelectedIndex(0);  rmaField.addActionListener(this);}  }
class C{  private final void add(ThreadGroup g){synchronized (this) {    if (destroyed) {      throw new IllegalThreadStateException();    }    if (groups == null) {      groups=new ThreadGroup[4];    } else     if (ngroups == groups.length) {      groups=Arrays.copyOf(groups,ngroups * 2);    }    groups[ngroups]=g;    ngroups++;  }}  }
class C{  static NamedList<Integer> finalize(NamedList<Integer> res,SolrIndexSearcher searcher,SchemaField schemaField,DocSet docs,int missingCount,boolean missing) throws IOException {  if (missing) {    if (missingCount < 0) {      missingCount=SimpleFacets.getFieldMissingCount(searcher,docs,schemaField.getName());    }    res.add(null,missingCount);  }  return res;}  }
class C{  public void testSendBothUseWindowScale(){  PseudoTcpTestTransfer test=new PseudoTcpTestTransfer();  test.setLocalMtu(1500);  test.setRemoteMtu(1500);  test.setRemoteOptRcvBuf(100000);  test.setLocalOptRcvBuf(100000);  test.doTestTransfer(1000000);}  }
class C{  @Override public String toString(){  return buf.toString();}  }
class C{  CacheHealthEvaluator(GemFireHealthConfig config,DM dm){  super(config,dm);  this.config=config;  InternalDistributedSystem system=dm.getSystem();  GemFireCacheImpl cache;  try {    cache=(GemFireCacheImpl)CacheFactory.getInstance(system);  } catch (  CancelException ex) {    cache=null;  }  initialize(cache,dm);  GemFireCacheImpl.addCacheLifecycleListener(this);}  }
class C{  public static boolean isLion(){  return isMac() && getOsVersion().startsWith("10.7");}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  String aggregationType="mean";  int aggregationFactor=2;  int progress, oldProgress;  int rIn, cIn, rOut, cOut, r, c;  double value;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  aggregationFactor=Integer.parseInt(args[2]);  aggregationType=args[3].toLowerCase();  if (inputHeader.isEmpty() || outputHeader.isEmpty() || aggregationType.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  if (aggregationFactor < 2) {    aggregationFactor=2;  }  try {    WhiteboxRaster input=new WhiteboxRaster(inputHeader,"r");    double nodata=input.getNoDataValue();    int nColsIn=input.getNumberColumns();    int nRowsIn=input.getNumberRows();    int nColsOut=(int)((double)nColsIn / aggregationFactor);    int nRowsOut=(int)((double)nRowsIn / aggregationFactor);    double north=input.getNorth();    double south=north - (input.getCellSizeY() * aggregationFactor * nRowsOut);    double west=input.getWest();    double east=west + (input.getCellSizeX() * aggregationFactor * nColsOut);    WhiteboxRaster output=new WhiteboxRaster(outputHeader,north,south,east,west,nRowsOut,nColsOut,input.getDataScale(),input.getDataType(),0,nodata);    output.setPreferredPalette(input.getPreferredPalette());    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    if (aggregationType.equals("mean")) {      oldProgress=-1;      for (rOut=0; rOut < nRowsOut; rOut++) {        for (cOut=0; cOut < nColsOut; cOut++) {          rIn=rOut * aggregationFactor;          cIn=cOut * aggregationFactor;          double stat=0;          double count=0;          for (r=rIn; r < rIn + aggregationFactor; r++) {            for (c=cIn; c < cIn + aggregationFactor; c++) {              value=input.getValue(r,c);              if (value != nodata) {                stat+=value;                count++;              }            }          }          if (count > 0) {            stat=stat / count;            output.setValue(rOut,cOut,stat);          } else {            output.setValue(rOut,cOut,nodata);          }        }        progress=(int)(100f * rOut / (nRowsOut - 1));        if (progress > oldProgress) {          oldProgress=progress;          updateProgress(progress);        }      }    } else     if (aggregationType.equals("sum")) {      oldProgress=-1;      for (rOut=0; rOut < nRowsOut; rOut++) {        for (cOut=0; cOut < nColsOut; cOut++) {          rIn=rOut * aggregationFactor;          cIn=cOut * aggregationFactor;          double stat=0;          double count=0;          for (r=rIn; r < rIn + aggregationFactor; r++) {            for (c=cIn; c < cIn + aggregationFactor; c++) {              value=input.getValue(r,c);              if (value != nodata) {                stat+=value;                count++;              }            }          }          if (count > 0) {            output.setValue(rOut,cOut,stat);          } else {            output.setValue(rOut,cOut,nodata);          }        }        progress=(int)(100f * rOut / (nRowsOut - 1));        if (progress > oldProgress) {          oldProgress=progress;          updateProgress(progress);        }      }    } else     if (aggregationType.contains("max")) {      oldProgress=-1;      for (rOut=0; rOut < nRowsOut; rOut++) {        for (cOut=0; cOut < nColsOut; cOut++) {          rIn=rOut * aggregationFactor;          cIn=cOut * aggregationFactor;          double stat=Double.NEGATIVE_INFINITY;          double count=0;          for (r=rIn; r < rIn + aggregationFactor; r++) {            for (c=cIn; c < cIn + aggregationFactor; c++) {              value=input.getValue(r,c);              if (value != nodata) {                if (value > stat) {                  stat=value;                }                count++;              }            }          }          if (count > 0) {            output.setValue(rOut,cOut,stat);          } else {            output.setValue(rOut,cOut,nodata);          }        }        progress=(int)(100f * rOut / (nRowsOut - 1));        if (progress > oldProgress) {          oldProgress=progress;          updateProgress(progress);        }      }    } else     if (aggregationType.contains("min")) {      oldProgress=-1;      for (rOut=0; rOut < nRowsOut; rOut++) {        for (cOut=0; cOut < nColsOut; cOut++) {          rIn=rOut * aggregationFactor;          cIn=cOut * aggregationFactor;          double stat=Double.POSITIVE_INFINITY;          double count=0;          for (r=rIn; r < rIn + aggregationFactor; r++) {            for (c=cIn; c < cIn + aggregationFactor; c++) {              value=input.getValue(r,c);              if (value != nodata) {                if (value < stat) {                  stat=value;                }                count++;              }            }          }          if (count > 0) {            output.setValue(rOut,cOut,stat);          } else {            output.setValue(rOut,cOut,nodata);          }        }        progress=(int)(100f * rOut / (nRowsOut - 1));        if (progress > oldProgress) {          oldProgress=progress;          updateProgress(progress);        }      }    } else     if (aggregationType.contains("range")) {      oldProgress=-1;      for (rOut=0; rOut < nRowsOut; rOut++) {        for (cOut=0; cOut < nColsOut; cOut++) {          rIn=rOut * aggregationFactor;          cIn=cOut * aggregationFactor;          double min=Double.POSITIVE_INFINITY;          double max=Double.NEGATIVE_INFINITY;          double count=0;          for (r=rIn; r < rIn + aggregationFactor; r++) {            for (c=cIn; c < cIn + aggregationFactor; c++) {              value=input.getValue(r,c);              if (value != nodata) {                if (value < min) {                  min=value;                }                if (value > max) {                  max=value;                }                count++;              }            }          }          if (count > 0) {            output.setValue(rOut,cOut,(max - min));          } else {            output.setValue(rOut,cOut,nodata);          }        }        progress=(int)(100f * rOut / (nRowsOut - 1));        if (progress > oldProgress) {          oldProgress=progress;          updateProgress(progress);        }      }    }    output.addMetadataEntry("Created on " + new Date());    input.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static boolean isPEM(InputStream is){  try {    String startPEM="-----BEGIN";    int headerLength=100;    byte[] preamble=new byte[headerLength];    if (is.read(preamble,0,headerLength) > 0) {      String startArray=new String(preamble);      return startArray.startsWith(startPEM);    }    return false;  } catch (  Exception e) {    throw new DSSException("Unable to read InputStream");  }}  }
class C{  protected final void restoreState(){  likelihoodKnown=storedLikelihoodKnown;  logLikelihood=storedLogLikelihood;}  }
class C{  protected void validateState(State currentState){  ValidationUtils.validateState(currentState);}  }
class C{  private boolean checkForCarry(char[] ca1,int icarry){  boolean carry=false;  if (icarry < ca1.length) {    if (ca1[icarry] == '6' || ca1[icarry] == '7' || ca1[icarry] == '8' || ca1[icarry] == '9')     carry=true; else     if (ca1[icarry] == '5') {      int ii=icarry + 1;      for (; ii < ca1.length; ii++)       if (ca1[ii] != '0')       break;      carry=ii < ca1.length;      if (!carry && icarry > 0) {        carry=(ca1[icarry - 1] == '1' || ca1[icarry - 1] == '3' || ca1[icarry - 1] == '5' || ca1[icarry - 1] == '7' || ca1[icarry - 1] == '9');      }    }  }  return carry;}  }
class C{  public And(){  super(Boolean.class,Boolean.class,Boolean.class);}  }
class C{  public boolean isAndroid(){  return operatingSystem == OperatingSystem.ANDROID;}  }
class C{  public void advance(){  moveToNextIndex();}  }
class C{  public final void testEqualsObject03(){  CertPath cp1=new MyCertPath(testEncoding);  assertFalse(cp1.equals(null));}  }
class C{  public static DateTime toDate(String str,TimeZone tz) throws PageException {  return DateCaster.toDateAdvanced(str,tz);}  }
class C{  @Override public boolean equals(Object o){  if (!(o instanceof ExpandedRow)) {    return false;  }  ExpandedRow that=(ExpandedRow)o;  return this.pairs.equals(that.getPairs()) && wasReversed == that.wasReversed;}  }
class C{  @Override public void onDestroyView(){  mHandler.removeCallbacks(mRequestFocus);  mList=null;  mListShown=false;  mEmptyView=mProgressContainer=mListContainer=null;  mStandardEmptyView=null;  super.onDestroyView();}  }
class C{  public LinearInterpolator(Date[] dates,double[] values){  this.values=values;  timestamps=new long[dates.length];  for (int i=0; i < dates.length; i++) {    timestamps[i]=Util.getTimestamp(dates[i]);  }  validate();}  }
class C{  private Shape createRoundRectangleInternal(final int x,final int y,final int w,final int h,final double radius,final CornerStyle topLeft,final CornerStyle bottomLeft,final CornerStyle bottomRight,final CornerStyle topRight){  final int left=x;  final int top=y;  final int right=x + w;  final int bottom=y + h;  path.reset();switch (topLeft) {case SQUARE:    path.moveTo(left,top);  break;case ROUNDED:path.moveTo(left + radius,top);path.quadTo(left,top,left,top + radius);break;}switch (bottomLeft) {case SQUARE:path.lineTo(left,bottom);break;case ROUNDED:path.lineTo(left,bottom - radius);path.quadTo(left,bottom,left + radius,bottom);break;}switch (bottomRight) {case SQUARE:path.lineTo(right,bottom);break;case ROUNDED:path.lineTo(right - radius,bottom);path.quadTo(right,bottom,right,bottom - radius);}switch (topRight) {case SQUARE:path.lineTo(right,top);break;case ROUNDED:path.lineTo(right,top + radius);path.quadTo(right,top,right - radius,top);break;}path.closePath();return path;}  }
class C{  public static void parseReport(File xmlFile,FileSystem fileSystem,Project project,SensorContext context){  new CoberturaReportParser(fileSystem,project,context).parse(xmlFile);}  }
class C{  private void loadFromJar(File file){  if (file.getName().toLowerCase().endsWith(".jar") && file.isFile()) {    try {      int counter=0;      JarInputStream jis;      JarEntry je;      counter=0;      jis=new JarInputStream(new BufferedInputStream(new FileInputStream(file)));      je=jis.getNextJarEntry();      while (je != null) {        String mnemo=trimEntryName(je);        if (je.getName().toLowerCase().matches(helproot + "/" + language+ "/.*.htm") && !exists(mnemo)) {          addToCache(jis,mnemo);          counter++;        }        je=jis.getNextJarEntry();      }      jis.close();      System.out.println("+ " + String.valueOf(counter) + "\thelp text(s) from:\t"+ file.getCanonicalPath());    } catch (    IOException ignored) {    }  }}  }
class C{  public static OverallCosts newInstance(){  return new OverallCosts();}  }
class C{  public Pair<Connection,Connection> findBestConnection(Block block,int radiusConnectionWS){  Connection potentialBlockConnection=null;  Connection potentialCompatibleConnection=null;  List<Connection> blockConnections=block.getAllConnections();  Connection curBlockConnection;  Connection curCompatibleConnection;  double maxSearchRadius=radiusConnectionWS;  for (int i=0; i < blockConnections.size(); i++) {    curBlockConnection=blockConnections.get(i);    curCompatibleConnection=closestConnection(curBlockConnection,maxSearchRadius);    if (curCompatibleConnection != null) {      potentialBlockConnection=curBlockConnection;      potentialCompatibleConnection=curCompatibleConnection;      maxSearchRadius=potentialBlockConnection.distanceFrom(potentialCompatibleConnection);    }  }  if (potentialBlockConnection == null) {    return null;  }  return new Pair<>(potentialBlockConnection,potentialCompatibleConnection);}  }
class C{  public LocalTime(int hourOfDay,int minuteOfHour){  this(hourOfDay,minuteOfHour,0,0,ISOChronology.getInstanceUTC());}  }
class C{  public boolean isSystemCatalog(String vendorName,String catalogName){  boolean result=false;  List<String> definedNames=m_interfaces.get(getDBVendorID(vendorName)).getSystemCatalogs();  if (definedNames == null || definedNames.size() == 0)   return false;  ArrayList<String> reservedNames=new ArrayList<String>();  for (  String name : definedNames) {    reservedNames.add(name.toUpperCase());  }  if (reservedNames.contains(catalogName.toUpperCase()))   result=true;  return result;}  }
class C{  private void test(String name,Problem problem){  Algorithm algorithm=AlgorithmFactory.getInstance().getAlgorithm(name,properties,problem);  Assert.assertTrue(algorithm instanceof JMetalAlgorithmAdapter);  Assert.assertEquals(0,algorithm.getNumberOfEvaluations());  Assert.assertEquals(0,algorithm.getResult().size());  Assert.assertFalse(algorithm.isTerminated());  algorithm.step();  Assert.assertEquals(1000,algorithm.getNumberOfEvaluations());  Assert.assertTrue(algorithm.getResult().size() > 0);  Assert.assertTrue(algorithm.isTerminated());}  }
class C{  public void updateRectangle(float lt1,float ln1,float lt2,float ln2,int lType,int nsegs,LinkProperties properties,int graphicUpdateMask) throws IOException {  writeGraphicGestureHeader(graphicUpdateMask);  LinkRectangle.write(lt1,ln1,lt2,ln2,lType,nsegs,properties,link.dos);}  }
class C{  public boolean isSelected(final Object element){  return selection.contains(element);}  }
class C{  public String runComplete(final EvolutionState state){  return null;}  }
class C{  @Override public double value(int attIndex){  int index=locateIndex(attIndex);  if ((index >= 0) && (m_Indices[index] == attIndex)) {    return 1.0;  } else {    return 0.0;  }}  }
class C{  public GMSSPrivateKeyParameters(byte[][] currentSeed,byte[][] nextNextSeed,byte[][][] currentAuthPath,byte[][][] nextAuthPath,Treehash[][] currentTreehash,Treehash[][] nextTreehash,Vector[] currentStack,Vector[] nextStack,Vector[][] currentRetain,Vector[][] nextRetain,byte[][] nextRoot,byte[][] currentRootSig,GMSSParameters gmssParameterset,GMSSDigestProvider digestProvider){  this(null,currentSeed,nextNextSeed,currentAuthPath,nextAuthPath,null,currentTreehash,nextTreehash,currentStack,nextStack,currentRetain,nextRetain,null,null,null,null,nextRoot,null,currentRootSig,null,gmssParameterset,digestProvider);}  }
class C{  public ClusterHealthRequest waitForNodes(String waitForNodes){  this.waitForNodes=waitForNodes;  return this;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public OrganizationRemovedException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public static boolean contains(String key) throws IllegalArgumentException {  return (contextContaining(key) != null);}  }
class C{  public void dispose(){  removeNodeModifier(m_realizerListener);}  }
class C{  @Override public void onBusEvent(Event event){  if (event instanceof AppVisibleChanged) {    AppVisibleChanged visibleChanged=(AppVisibleChanged)event;    if (visibleChanged.isVisible()) {      onAppVisible();    } else {      onAppHidden();    }  } else   if (event instanceof PeerChatOpened) {    onConversationVisible(((PeerChatOpened)event).getPeer());  } else   if (event instanceof PeerChatClosed) {    onConversationHidden(((PeerChatClosed)event).getPeer());  }}  }
class C{  public void forEach(Procedure<? super Integer> procedure,Executor executor){  CountDownLatch latch=new CountDownLatch(this.size());  if (this.goForward()) {    for (int i=this.from; i <= this.to; i+=this.step) {      this.executeAndCountdown(procedure,executor,latch,i);    }  } else {    for (int i=this.from; i >= this.to; i+=this.step) {      this.executeAndCountdown(procedure,executor,latch,i);    }  }  try {    latch.await();  } catch (  InterruptedException e) {  }}  }
class C{  public Builder enabledPlugins(final Set<String> enabledPlugins){  this.enabledPlugins=enabledPlugins;  return this;}  }
class C{  public void addFrequency(Frequency frequency){  frequencies.add(frequency);}  }
class C{  private void createValue(){  ListItem listitem=lstWarehouse.getSelectedItem();  KeyNamePair pp=(KeyNamePair)listitem.getValue();  if (pp == null)   return;  getWarehouseInfo(pp.getKey());  StringBuffer buf=new StringBuffer(m_M_WarehouseValue);  buf.append(m_Separator).append(txtAisleX.getText());  buf.append(m_Separator).append(txtBinY.getText());  buf.append(m_Separator).append(txtLevelZ.getText());  txtKey.setText(buf.toString());}  }
class C{  public JobExecutionException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  public String randomizeDataTipText(){  return "Do not randomize dataset and do not perform probabilistic rounding " + "if true";}  }
class C{  public byte[] toByteArray(){  ByteBuffer buff=ByteBuffer.allocate(BYTES).order(ByteOrder.LITTLE_ENDIAN);  writeTo(buff);  return buff.array();}  }
class C{  @NoInline @NoOptCompile public void unlock(){  if (--recCount == 0) {    holderSlot=-1;    sysCall.sysMonitorExit(monitor);  }}  }
class C{  public ClientKeyExchange(HandshakeIODataStream in,int length,boolean isTLS,boolean isRSA) throws IOException {  this.isTLS=isTLS;  this.isRSA=isRSA;  if (length == 0) {    this.length=0;    exchange_keys=EmptyArray.BYTE;  } else {    int size;    if (isRSA && !isTLS) {      size=length;      this.length=size;    } else {      size=in.readUint16();      this.length=2 + size;    }    exchange_keys=new byte[size];    Streams.readFully(in,exchange_keys);    if (this.length != length) {      fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect ClientKeyExchange");    }  }}  }
class C{  protected byte[] makeCorrelIdAsBytes(WorkerThread worker) throws UnknownHostException {  String proc_id=Config.parms.getString("id");  byte[] bytes=new byte[24];  if (proc_id != null && proc_id.length() > 0) {    byte[] b=proc_id.getBytes();    System.arraycopy(b,0,bytes,0,b.length > 24 ? 24 : b.length);  } else {    byte[] addr=InetAddress.getLocalHost().getAddress();    String uid=new UID().toString();    if (uid.length() > (22 - addr.length)) {      uid=uid.substring(0,22 - addr.length);    }    System.arraycopy(addr,0,bytes,0,addr.length);    System.arraycopy(uid.toString().getBytes(),0,bytes,addr.length,uid.length());  }  int threadInt=worker.getThreadNum();  byte[] threadBytes=String.valueOf(threadInt).getBytes();  System.arraycopy(threadBytes,0,bytes,(24 - threadBytes.length),threadBytes.length);  return bytes;}  }
class C{  protected void addClassifier(){  GenericObjectEditorDialog dialog;  dialog=getGOEDialog(MultiLabelClassifier.class,new BR());  dialog.setTitle("Add classifier");  dialog.setLocationRelativeTo(this);  dialog.setVisible(true);  if (dialog.getResult() != GenericObjectEditorDialog.APPROVE_OPTION)   return;  if (m_ListClassifiers.getList().getSelectedIndex() > -1)   m_ModelClassifiers.insertElementAt(OptionUtils.toCommandLine(dialog.getCurrent()),m_ListClassifiers.getList().getSelectedIndex()); else   m_ModelClassifiers.addElement(OptionUtils.toCommandLine(dialog.getCurrent()));  m_Modified=true;  updateButtons();}  }
class C{  public void testMd5DirectoryCheck() throws Exception {  undeployCntr.set(0);  DeploymentResource task=getSpi().findResource("GridUriDeploymentTestWithNameTask6");  assert task == null;  U.copy(getGarDir(),new File(getDeployDir(),"uri1.gar"),true);  Thread.sleep(500);  task=getSpi().findResource("GridUriDeploymentTestWithNameTask6");  assert task != null;  assert undeployCntr.get() == 0;  U.copy(getGarDir(),new File(getDeployDir(),"uri2.gar"),true);  Thread.sleep(500);  task=getSpi().findResource("GridUriDeploymentTestWithNameTask6");  assert task != null;  assert undeployCntr.get() == 0;  U.delete(getGarDir());  U.delete(new File(getDeployDir(),"uri1.gar"));  U.delete(new File(getDeployDir(),"uri2.gar"));}  }
class C{  public void addListener(final ITutorialListener listener){  m_listeners.addListener(listener);}  }
class C{  public boolean isLastFrag(){  return lastFrag;}  }
class C{  public boolean isParentValue(){  if (m_parentValue != null)   return m_parentValue.booleanValue();  if (!DisplayType.isID(m_vo.displayType) || m_vo.TabNo == 0)   m_parentValue=Boolean.FALSE; else {    String LinkColumnName=Env.getContext(m_vo.ctx,m_vo.WindowNo,m_vo.TabNo,GridTab.CTX_LinkColumnName);    if (LinkColumnName == null || LinkColumnName.length() == 0)     m_parentValue=Boolean.FALSE; else     m_parentValue=Boolean.valueOf(m_vo.ColumnName.equals(LinkColumnName));    if (m_parentValue)     log.config(m_parentValue + " - Link(" + LinkColumnName+ ", W="+ m_vo.WindowNo+ ",T="+ m_vo.TabNo+ ") = "+ m_vo.ColumnName); else     m_parentValue=Boolean.valueOf(isIndirectParentValue());  }  return m_parentValue.booleanValue();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.411 -0400",hash_original_method="0FA8319FDCFD8207BDB70BAA26E790B7",hash_generated_method="2CBCE6CB58AC78636EEDF9153F9EFD5A") @Override public void reset() throws IOException {  throw exception;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void rebuildNode(){  m_realizer.regenerate();  m_graph.updateViews();}  }
class C{  public static <T>T parseJsonFile(Context ctx,String filename,TypeToken<T> token){  return new Gson().fromJson(parseJsonFile(ctx,filename),token.getType());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:59.123 -0500",hash_original_method="0F8F7B76F67AF9BED3D8B41DF390E843",hash_generated_method="13D1AF26CD5898615D95C6012E9A6513") public static void addWord(Context context,String word,int frequency,int localeType){  final ContentResolver resolver=context.getContentResolver();  if (TextUtils.isEmpty(word) || localeType < 0 || localeType > 1) {    return;  }  if (frequency < 0)   frequency=0;  if (frequency > 255)   frequency=255;  String locale=null;  if (localeType == LOCALE_TYPE_CURRENT) {    locale=Locale.getDefault().toString();  }  ContentValues values=new ContentValues(4);  values.put(WORD,word);  values.put(FREQUENCY,frequency);  values.put(LOCALE,locale);  values.put(APP_ID,0);  Uri result=resolver.insert(CONTENT_URI,values);}  }
class C{  private void destroyAllOplogs(){  persistentOplogs.destroyAllOplogs();{    FilenameFilter overflowFileFilter=new DiskStoreFilter(OplogType.OVERFLOW,true,getName());    deleteFiles(overflowFileFilter);  }{    FilenameFilter backupFileFilter=new DiskStoreFilter(OplogType.BACKUP,true,getName());    deleteFiles(backupFileFilter);  }}  }
class C{  public boolean supportsPositionedUpdate() throws SQLException {  return true;}  }
class C{  @Nullable public static <R>R wrapThreadLoader(ClassLoader ldr,Callable<R> c) throws IgniteCheckedException {  Thread curThread=Thread.currentThread();  ClassLoader ctxLdr=curThread.getContextClassLoader();  try {    curThread.setContextClassLoader(ldr);    return c.call();  } catch (  IgniteCheckedException|RuntimeException e) {    throw e;  }catch (  Exception e) {    throw new IgniteCheckedException(e);  } finally {    curThread.setContextClassLoader(ctxLdr);  }}  }
class C{  public void unsetMessageType(){  this.messageType=null;}  }
class C{  public void removeTarget(IStreamTarget<T> target) throws AdeFlowException {  if (!m_targets.contains(target)) {    throw new AdeFlowException(target + " is not a target!");  }  m_targets.remove(target);}  }
class C{  public boolean hasItemTypeDescription(){  return itemType.getName() != null;}  }
class C{  private void parseAPN(Node node){  String enableRcseSwitch=null;  Node childnode=node.getFirstChild();  if (childnode != null) {    do {      if (enableRcseSwitch == null) {        if ((enableRcseSwitch=getValueByParamName("enableRcseSwitch",childnode,TYPE_INT)) != null) {          mRcsSettings.setEnableRcseSwitch(EnableRcseSwitch.valueOf(Integer.valueOf(enableRcseSwitch)));        }      }    } while ((childnode=childnode.getNextSibling()) != null);  }}  }
class C{  public CertificatePoliciesExtension(Boolean critical,List<PolicyInformation> certPolicies) throws IOException {  this.certPolicies=certPolicies;  this.extensionId=PKIXExtensions.CertificatePolicies_Id;  this.critical=critical.booleanValue();  encodeThis();}  }
class C{  public static synchronized void userLog(final String message){  userLog(message,"");}  }
class C{  @Override public void onDetailLoadFailure(){  Snackbar.make(mRootView,R.string.unknown_error,Snackbar.LENGTH_SHORT).show();}  }
class C{  private boolean isReadyForNextStatus(IpReconfigConstants.NodeStatus currNodeStatus,IpReconfigConstants.NodeStatus targetNodeStatus){  boolean bReadyForNextStatus=true;  for (int i=1; i <= nodeCount; i++) {    String node_status_key=String.format(IpReconfigConstants.CONFIG_NODESTATUS_KEY,i);    IpReconfigConstants.NodeStatus node_status=IpReconfigConstants.NodeStatus.valueOf(config.getConfig(node_status_key));    if (node_status.ordinal() < currNodeStatus.ordinal()) {      bReadyForNextStatus=false;      log.info("local node is not ready to step into next status: {}",targetNodeStatus);      break;    }  }  if (bReadyForNextStatus) {    log.info("local node is ready to step into next status: {}",targetNodeStatus);  }  return bReadyForNextStatus;}  }
class C{  public CallNormalOp(AST source,CompiledMethod method,List<Register> params){  super(source,params);  this.method=method;}  }
class C{  public void show(){  LinearLayout.LayoutParams lp=(LinearLayout.LayoutParams)mContentView.getLayoutParams();  lp.height=android.view.ViewGroup.LayoutParams.WRAP_CONTENT;  mContentView.setLayoutParams(lp);}  }
class C{  public static Amount readFromOptional(final Deserializer deserializer,final String label){  final Long value=deserializer.readOptionalLong(label);  return null == value ? null : new Amount(value);}  }
class C{  private final int tpPos(PhrasePositions pp){  return pp.position + pp.offset;}  }
class C{  public EmailIntentBuilder to(@NonNull Collection<String> to){  checkNotNull(to);  for (  String email : to) {    checkEmail(email);  }  this.to.addAll(to);  return this;}  }
class C{  private void rangeCheck(int index){  if (index >= size)   throw new IndexOutOfBoundsException(outOfBoundsMsg(index));}  }
class C{  public WishListView(final String id){  this(id,new Model<String>(ApplicationDirector.getShoppingCart().getCustomerEmail()),new Model<String>(null),new Model<String>(null));}  }
class C{  protected void notifyChangingListeners(int oldValue,int newValue){  for (  OnWheelChangedListener listener : changingListeners) {    listener.onChanged(this,oldValue,newValue);  }}  }
class C{  public boolean isRegExp(){  return m_RegExp;}  }
class C{  private static <T>int countRunAndMakeAscending(T[] a,int lo,int hi,Comparator<? super T> c){  if (DEBUG)   assert lo < hi;  int runHi=lo + 1;  if (runHi == hi)   return 1;  if (c.compare(a[runHi++],a[lo]) < 0) {    while (runHi < hi && c.compare(a[runHi],a[runHi - 1]) < 0)     runHi++;    reverseRange(a,lo,runHi);  } else {    while (runHi < hi && c.compare(a[runHi],a[runHi - 1]) >= 0)     runHi++;  }  return runHi - lo;}  }
class C{  public InsertionScanner(LRParsingTable parsingTable,Scanner input){  this(parsingTable,input,5,8,8);}  }
class C{  public void actionPerformed(ActionEvent evt){  try {    root.panel.loadPage(url);    lastDemoOpened=pageName;  } catch (  Exception ex) {    Uu.p(ex);  }}  }
class C{  public boolean isLoop(){  return loop;}  }
class C{  public final int countDataSchemeSpecificParts(){  return mDataSchemeSpecificParts != null ? mDataSchemeSpecificParts.size() : 0;}  }
class C{  public ShortSparseArrayDataRow(int size){  super(size);  values=new short[size];}  }
class C{  public byte accumulate(byte other){  byte oldv=value;  value|=other;  return oldv;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:26.103 -0400",hash_original_method="184F5FDEB4E6BF636299908927F9FFA3",hash_generated_method="48F1C8008A2713C69B0D88CA7D0FB4BB") public boolean enable(){  return enable(true);}  }
class C{  public CActionInlineAll(final CGraphWindow parent,final IViewContainer container,final ZyGraph graph){  super("Inline all function calls");  Preconditions.checkNotNull(parent,"IE01644: Parent argument can not be null");  Preconditions.checkNotNull(container,"IE02276: Container argument can not be null");  Preconditions.checkNotNull(graph,"IE01645: Graph argument can not be null");  m_parent=parent;  m_container=container;  m_graph=graph;}  }
class C{  public void loadTableLocal(byte[] tableKey,Result<TableKraken> result){  if (tableKey == null) {    result.ok(null);    return;  }  TableKraken table=getTableByKeyImpl(tableKey);  if (table != null) {    result.ok(table);    return;  }  RowCursor cursor=_metaTable.getTableKelp().cursor();  cursor.setBytes(1,tableKey,0);  _metaTable.getTableKelp().get(cursor,result.then(null));}  }
class C{  public void mouseDragged(MouseEvent e){  if (down == null)   return;  VisualizationViewer<?,?> vv=(VisualizationViewer<?,?>)e.getSource();  boolean accepted=checkModifiers(e);  if (accepted) {    MutableTransformer modelTransformer=vv.getRenderContext().getMultiLayerTransformer().getTransformer(Layer.LAYOUT);    vv.setCursor(cursor);    Point2D center=vv.getCenter();    Point2D q=down;    Point2D p=e.getPoint();    Point2D v1=new Point2D.Double(center.getX() - p.getX(),center.getY() - p.getY());    Point2D v2=new Point2D.Double(center.getX() - q.getX(),center.getY() - q.getY());    double theta=angleBetween(v1,v2);    modelTransformer.rotate(theta,vv.getRenderContext().getMultiLayerTransformer().inverseTransform(Layer.VIEW,center));    down.x=e.getX();    down.y=e.getY();    e.consume();  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Object elem=stack.pop();  Object obj=stack.pop();  Object rv=null;  try {    if (obj instanceof java.util.Collection)     rv=((java.util.Collection)obj).add(elem) ? Boolean.TRUE : Boolean.FALSE;  } catch (  Exception e) {  }  return (rv);}  }
class C{  private void assertLogFilePeriodAtLeastOneDay(){  final long dayBegin=DateConverter.getBeginningOfDayInCurrentTimeZone(period.start.getTime());  assertEquals(dayBegin,capturedFromDate());  final long dayEnd=DateConverter.getEndOfDayInCurrentTimeZone(period.end.getTime());  assertEquals(dayEnd,capturedToDate());  final long ONE_DAY=60 * 60 * 24* 1000 - 1;  assertTrue("period must be at least one day",capturedToDate() - capturedFromDate() >= ONE_DAY);}  }
class C{  private void ekskey(byte data[],byte key[]){  int i;  int koffp[]={0}, doffp[]={0};  int lr[]={0,0};  int plen=P.length, slen=S.length;  for (i=0; i < plen; i++)   P[i]=P[i] ^ streamtoword(key,koffp);  for (i=0; i < plen; i+=2) {    lr[0]^=streamtoword(data,doffp);    lr[1]^=streamtoword(data,doffp);    encipher(lr,0);    P[i]=lr[0];    P[i + 1]=lr[1];  }  for (i=0; i < slen; i+=2) {    lr[0]^=streamtoword(data,doffp);    lr[1]^=streamtoword(data,doffp);    encipher(lr,0);    S[i]=lr[0];    S[i + 1]=lr[1];  }}  }
class C{  public void testMembersPy3() throws Exception {  setLanguageLevel(LanguageLevel.PYTHON30);  ensureCorrectMembersForHugeChild(true);}  }
class C{  protected void parseField() throws SyntaxError, IOException {  if (token == SEMICOLON) {    scan();    return;  }  String doc=scanner.docComment;  long p=pos;  int mod=parseModifiers(MM_FIELD | MM_METHOD);  if ((mod == (mod & M_STATIC)) && (token == LBRACE)) {    actions.defineField(p,curClass,doc,mod,Type.tMethod(Type.tVoid),new IdentifierToken(idClassInit),null,null,parseStatement());    return;  }  if (token == CLASS || token == INTERFACE) {    parseNamedClass(mod,CLASS,doc);    return;  }  p=pos;  Type t=parseType();  IdentifierToken id=null;switch (token) {case IDENT:    id=scanner.getIdToken();  p=scan();break;case LPAREN:id=new IdentifierToken(idInit);if ((mod & M_STRICTFP) != 0) env.error(pos,"bad.constructor.modifier");break;default :expect(IDENT);}if (token == LPAREN) {scan();aCount=0;if (token != RPAREN) {int am=parseModifiers(M_FINAL);Type at=parseType();IdentifierToken an=scanner.getIdToken();expect(IDENT);at=parseArrayBrackets(at);addArgument(am,at,an);while (token == COMMA) {scan();am=parseModifiers(M_FINAL);at=parseType();an=scanner.getIdToken();expect(IDENT);at=parseArrayBrackets(at);addArgument(am,at,an);}}expect(RPAREN);t=parseArrayBrackets(t);Type atypes[]=new Type[aCount];System.arraycopy(aTypes,0,atypes,0,aCount);IdentifierToken anames[]=new IdentifierToken[aCount];System.arraycopy(aNames,0,anames,0,aCount);t=Type.tMethod(t,atypes);IdentifierToken exp[]=null;if (token == THROWS) {Vector v=new Vector();scan();v.addElement(parseName(false));while (token == COMMA) {scan();v.addElement(parseName(false));}exp=new IdentifierToken[v.size()];v.copyInto(exp);}switch (token) {case LBRACE:int oldFPstate=FPstate;if ((mod & M_STRICTFP) != 0) {FPstate=M_STRICTFP;} else {mod|=FPstate & M_STRICTFP;}actions.defineField(p,curClass,doc,mod,t,id,anames,exp,parseStatement());FPstate=oldFPstate;break;case SEMICOLON:scan();actions.defineField(p,curClass,doc,mod,t,id,anames,exp,null);break;default :if ((mod & (M_NATIVE | M_ABSTRACT)) == 0) {expect(LBRACE);} else {expect(SEMICOLON);}}return;}while (true) {p=pos;Type vt=parseArrayBrackets(t);Node init=null;if (token == ASSIGN) {scan();init=parseExpression();}actions.defineField(p,curClass,doc,mod,vt,id,null,null,init);if (token != COMMA) {expect(SEMICOLON);return;}scan();id=scanner.getIdToken();expect(IDENT);}}  }
class C{  static void compileArrayStoreBarrierChar(Assembler asm,BaselineCompilerImpl compiler){  arrayStoreBarrierHelper(asm,compiler,Entrypoints.charArrayWriteBarrierMethod);}  }
class C{  public static void addTag(Element parent,String name,String textValue){  Element child=parent.getOwnerDocument().createElement(name);  child.setTextContent(textValue);  parent.appendChild(child);}  }
class C{  protected Object createSurfaceTileDrawContext(SurfaceObjectTile tile){  return new SurfaceTileDrawContext(tile,this.currentInfo.pickCandidates);}  }
class C{  public Cookie2(final String domain,final String name,final String value,final String path,final Date expires,final boolean secure){  super(domain,name,value,path,expires,secure);}  }
class C{  public final void testGetPrimeExponentQ(){  RSAMultiPrimePrivateCrtKeySpec ks=new RSAMultiPrimePrivateCrtKeySpec(BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,opi);  assertTrue(BigInteger.ONE.equals(ks.getPrimeExponentQ()));}  }
class C{  public static void generateRPClass(){  final RPClass rpclass=new RPClass(RPCLASS_NAME);  rpclass.add(DefinitionClass.ATTRIBUTE,NAME,Type.STRING);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:29.032 -0500",hash_original_method="B250DD181A3373E2CC04255377753F31",hash_generated_method="66E28C27DA9C4D6709862FD4742C6441") public void clearState(){}  }
class C{  protected void handleFixedNode(MethodScope methodScope,LoopScope loopScope,int nodeOrderId,FixedNode node){}  }
class C{  @Override public int countMissing(){  int count=0;  for (int i=0; i < size(); i++) {    if (getInt(i) == MISSING_VALUE) {      count++;    }  }  return count;}  }
class C{  public boolean isHorizontalLayout(){  return secondRow.getParent().getLayout() instanceof FlowLayout;}  }
class C{  protected Scanner createScanner(InputSource source){  documentURI=source.getURI();  if (documentURI == null) {    documentURI="";  }  Reader r=source.getCharacterStream();  if (r != null) {    return new Scanner(r);  }  InputStream is=source.getByteStream();  if (is != null) {    return new Scanner(is,source.getEncoding());  }  String uri=source.getURI();  if (uri == null) {    throw new CSSException(formatMessage("empty.source",null));  }  try {    ParsedURL purl=new ParsedURL(uri);    is=purl.openStreamRaw(CSSConstants.CSS_MIME_TYPE);    return new Scanner(is,source.getEncoding());  } catch (  IOException e) {    throw new CSSException(e);  }}  }
class C{  void copyParentSets(BayesNet dest,BayesNet source){  int nNodes=source.getNrOfNodes();  for (int iNode=0; iNode < nNodes; iNode++) {    dest.getParentSet(iNode).copy(source.getParentSet(iNode));  }}  }
class C{  public ServiceManager(Iterable<? extends Service> services){  ImmutableList<Service> copy=ImmutableList.copyOf(services);  if (copy.isEmpty()) {    logger.log(Level.WARNING,"ServiceManager configured with no services.  Is your application configured properly?",new EmptyServiceManagerWarning());    copy=ImmutableList.<Service>of(new NoOpService());  }  this.state=new ServiceManagerState(copy);  this.services=copy;  WeakReference<ServiceManagerState> stateReference=new WeakReference<ServiceManagerState>(state);  for (  Service service : copy) {    service.addListener(new ServiceListener(service,stateReference),directExecutor());    checkArgument(service.state() == NEW,"Can only manage NEW services, %s",service);  }  this.state.markReady();}  }
class C{  public noframes addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  protected static byte[] buildInfo(String type,byte[] context){  ByteBuffer buffer=ByteBuffer.allocate(19 + type.length() + context.length);  buffer.put("Content-Encoding: ".getBytes(),0,18);  buffer.put(type.getBytes(),0,type.length());  buffer.put(new byte[1],0,1);  buffer.put(context,0,context.length);  return buffer.array();}  }
class C{  private void initializeRandomPanels(){  for (  ProbDistribution pd : ProbDistribution.values()) {    ProbDistPanel rp=new ProbDistPanel(pd);    cardMap.put(pd,rp);  }}  }
class C{  public void mouseEntered(MouseEvent e){  if (!active) {    return;  }  setCurrentMouseEvent(e);}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {synchronized (this) {    ListPeer peer=(ListPeer)this.peer;    if (peer != null) {      selected=peer.getSelectedIndexes();    }  }  s.defaultWriteObject();  AWTEventMulticaster.save(s,itemListenerK,itemListener);  AWTEventMulticaster.save(s,actionListenerK,actionListener);  s.writeObject(null);}  }
class C{  public boolean __ge__(final Object rhs){  return getBigInteger(this).compareTo(getBigInteger(rhs)) >= 0;}  }
class C{  private void linkInstructions(BasicBlock block){  Instruction src=null;  for (  Instruction dst : block.orderedInstructions()) {    if (src != null) {      linkInstructions(src,dst);    }    src=dst;  }}  }
class C{  public void testBug41532() throws Exception {  createTable("testBug41532","(ID INTEGER, S1 VARCHAR(100), S2 VARCHAR(100), S3 VARCHAR(100), D1 DATETIME, D2 DATETIME, D3 DATETIME, " + "N1 DECIMAL(28,6), N2 DECIMAL(28,6), N3 DECIMAL(28,6), UNIQUE KEY UNIQUE_KEY_TEST_DUPLICATE (ID) )");  int numTests=5000;  Connection rewriteConn=getConnectionWithProps("useSSL=false,rewriteBatchedStatements=true,dumpQueriesOnException=true");  assertEquals("0",getSingleIndexedValueWithQuery(rewriteConn,2,"SHOW SESSION STATUS LIKE 'Com_insert'").toString());  long batchedTime=timeBatch(rewriteConn,numTests);  assertEquals("1",getSingleIndexedValueWithQuery(rewriteConn,2,"SHOW SESSION STATUS LIKE 'Com_insert'").toString());  this.stmt.executeUpdate("TRUNCATE TABLE testBug41532");  assertEquals("0",getSingleIndexedValueWithQuery(this.conn,2,"SHOW SESSION STATUS LIKE 'Com_insert'").toString());  long unbatchedTime=timeBatch(this.conn,numTests);  assertEquals(String.valueOf(numTests),getSingleIndexedValueWithQuery(this.conn,2,"SHOW SESSION STATUS LIKE 'Com_insert'").toString());  assertTrue(batchedTime < unbatchedTime);  rewriteConn=getConnectionWithProps("useSSL=false,rewriteBatchedStatements=true,useCursorFetch=true,defaultFetchSize=10000");  timeBatch(rewriteConn,numTests);}  }
class C{  public CharacterCreator(final String username,final String character,final RPObject template){  this.username=username;  this.character=character;  this.template=template;  setupValidatorsForCharacter();}  }
class C{  public BoundsOutlineHandle(Figure owner){  this(owner,false,false);}  }
class C{  public Instantiation findOwner(final int i){  if (!subroutine.get(i)) {    return null;  }  if (!dualCitizens.get(i)) {    return this;  }  Instantiation own=this;  for (Instantiation p=previous; p != null; p=p.previous) {    if (p.subroutine.get(i)) {      own=p;    }  }  return own;}  }
class C{  static final void localInit(){  int p=probeGenerator.addAndGet(PROBE_INCREMENT);  int probe=(p == 0) ? 1 : p;  long seed=mix64(seeder.getAndAdd(SEEDER_INCREMENT));  Thread t=Thread.currentThread();  UNSAFE.putLong(t,SEED,seed);  UNSAFE.putInt(t,PROBE,probe);}  }
class C{  @Override protected Boolean doInBackground(Void... params){  while (!mLocalPaths.isEmpty()) {    String currentPath=mLocalPaths.get(0);    File currentFile=new File(currentPath);    String expectedPath=FileStorageUtils.getSavePath(mAccount.name) + mRemotePaths.get(0);    File expectedFile=new File(expectedPath);    if (expectedFile.equals(currentFile) || currentFile.renameTo(expectedFile)) {      OCFile file=mStorageManager.getFileByPath(mRemotePaths.get(0));      file.setStoragePath(expectedPath);      mStorageManager.saveFile(file);      mRemotePaths.remove(0);      mLocalPaths.remove(0);    } else {      return false;    }  }  return true;}  }
class C{  private synchronized void rebuildJournal() throws IOException {  if (journalWriter != null) {    journalWriter.close();  }  Writer writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFileTmp),Util.US_ASCII));  try {    writer.write(MAGIC);    writer.write("\n");    writer.write(VERSION_1);    writer.write("\n");    writer.write(Integer.toString(appVersion));    writer.write("\n");    writer.write(Integer.toString(valueCount));    writer.write("\n");    writer.write("\n");    for (    Entry entry : lruEntries.values()) {      if (entry.currentEditor != null) {        writer.write(DIRTY + ' ' + entry.key+ '\n');      } else {        writer.write(CLEAN + ' ' + entry.key+ entry.getLengths()+ '\n');      }    }  }  finally {    writer.close();  }  if (journalFile.exists()) {    renameTo(journalFile,journalFileBackup,true);  }  renameTo(journalFileTmp,journalFile,false);  journalFileBackup.delete();  journalWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFile,true),Util.US_ASCII));}  }
class C{  public void testGetF17Momentary(){  AbstractThrottle instance=new AbstractThrottleImpl();  boolean expResult=false;  boolean result=instance.getF17Momentary();  assertEquals(expResult,result);}  }
class C{  private void showToast(@StringRes int resId){  hideToast();  mToast=Toast.makeText(this,resId,Toast.LENGTH_SHORT);  mToast.show();}  }
class C{  public boolean isDomainCrosshairVisible(){  return this.domainCrosshairVisible;}  }
class C{  public CharSequence loadDescription(PackageManager pm) throws NotFoundException {  String packageName=mService.resolvePackageName;  ApplicationInfo applicationInfo=null;  if (packageName == null) {    packageName=mService.serviceInfo.packageName;    applicationInfo=mService.serviceInfo.applicationInfo;  }  if (mService.serviceInfo.descriptionRes != 0) {    return pm.getText(packageName,mService.serviceInfo.descriptionRes,applicationInfo);  }  if (mDescriptionResource <= 0)   throw new NotFoundException();  return pm.getText(packageName,mDescriptionResource,mService.serviceInfo.applicationInfo);}  }
class C{  final void addRequestedPosixAttributes(PosixFileAttributes attrs,AttributesBuilder builder){  addRequestedBasicAttributes(attrs,builder);  if (builder.match(PERMISSIONS_NAME))   builder.add(PERMISSIONS_NAME,attrs.permissions());  if (builder.match(OWNER_NAME))   builder.add(OWNER_NAME,attrs.owner());  if (builder.match(GROUP_NAME))   builder.add(GROUP_NAME,attrs.group());}  }
class C{  @Field(2) public org.bridj.jawt.JAWT_Rectangle bounds(){  return this.io.getNativeObjectField(this,2);}  }
class C{  private void addView(Class<? extends View> viewClass){  ViewConfig viewConfig=viewClass.getAnnotation(ViewConfig.class);switch (viewConfig.createMode()) {case ALWAYS_NEW:    navigator.addView(viewConfig.uri(),viewClass);  break;case LAZY_INIT:navigator.addProvider(new LazyProvider(viewConfig.uri(),viewClass));break;case EAGER_INIT:try {navigator.addView(viewConfig.uri(),viewClass.newInstance());} catch (Exception e) {e.printStackTrace();}}navBar.addView(viewConfig.uri(),viewConfig.displayName());}  }
class C{  private void init(final Task<Revision> task){  this.partCounter++;  this.result=new Task<Diff>(task.getHeader(),partCounter);}  }
class C{  protected DateTimeConverter makeConverter(){  return new DateConverter();}  }
class C{  public static File openFile(File parentPath,String fileName){  try {    return new File(parentPath,fileName);  } catch (  Error e) {    return null;  }}  }
class C{  @NotNull @Contract(pure=true) public static <T>T[] append(@NotNull final T[] src,@Nullable final T element){  return append(src,element,(Class<T>)src.getClass().getComponentType());}  }
class C{  public SizedWholeNumberField(){  super(STANDARD_COLUMNS);  setPreferredSize(STANDARD_DIMENSION);  setMaximumSize(STANDARD_DIMENSION);}  }
class C{  @Override public boolean onCreateOptionsMenu(Menu menu){  getMenuInflater().inflate(R.menu.menu_main,menu);  return true;}  }
class C{  public EaseIn(){}  }
class C{  public synchronized Relationship addRelationship(Primitive type,Vertex target){  Vertex primitive=this.network.createVertex(type);  return addRelationship(primitive,target,-1,false);}  }
class C{  public void removeDirectorySet(Context context,String path){  TinyDB tinydb=new TinyDB(context);  ArrayList<String> file=tinydb.getListString("directories");  file.remove(path);  tinydb.putListString("directories",file);}  }
class C{  public void showKeyboard(){  mEditText.requestFocus();  ((InputMethodManager)getContext().getSystemService(Context.INPUT_METHOD_SERVICE)).showSoftInput(mEditText,InputMethodManager.SHOW_FORCED);}  }
class C{  public Strait(){  super();}  }
class C{  public static void actionCreate(PageContext pc,Resource directory,String serverPassword,boolean createPath,int mode,Object acl,String storage,int nameConflict) throws PageException {  SecurityManager securityManager=pc.getConfig().getSecurityManager();  securityManager.checkFileLocation(pc.getConfig(),directory,serverPassword);  if (directory.exists()) {    if (directory.isDirectory()) {      if (nameConflict == NAMECONFLICT_SKIP)       return;      throw new ApplicationException("directory [" + directory.toString() + "] already exist");    } else     if (directory.isFile())     throw new ApplicationException("can't create directory [" + directory.toString() + "], it exist a file with same name");  }  try {    directory.createDirectory(createPath);  } catch (  IOException ioe) {    throw Caster.toPageException(ioe);  }  setS3Attrs(pc,directory,acl,storage);  if (mode != -1) {    try {      directory.setMode(mode);    } catch (    IOException e) {      throw Caster.toPageException(e);    }  }}  }
class C{  public static Point parsePoint(String str,SpatialContext ctx) throws InvalidShapeException {  try {    double x, y;    str=str.trim();    int commaIdx=str.indexOf(',');    if (commaIdx == -1) {      int spaceIdx=str.indexOf(' ');      if (spaceIdx == -1)       throw new InvalidShapeException("Point must be in 'lat, lon' or 'x y' format: " + str);      int middleEndIdx=findIndexNotSpace(str,spaceIdx + 1,+1);      x=Double.parseDouble(str.substring(0,spaceIdx));      y=Double.parseDouble(str.substring(middleEndIdx));    } else {      int middleStartIdx=findIndexNotSpace(str,commaIdx - 1,-1);      int middleEndIdx=findIndexNotSpace(str,commaIdx + 1,+1);      y=Double.parseDouble(str.substring(0,middleStartIdx + 1));      x=Double.parseDouble(str.substring(middleEndIdx));    }    x=ctx.normX(x);    y=ctx.normY(y);    return ctx.makePoint(x,y);  } catch (  InvalidShapeException e) {    throw e;  }catch (  Exception e) {    throw new InvalidShapeException(e.toString(),e);  }}  }
class C{  public static boolean hasStartingSlash(String path){  return path.charAt(0) == '/';}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean isMatchingTalkgroup(LTRNetMessage message){  String talkgroup=message.getTalkgroupID();  if (talkgroup != null && getToID() != null && talkgroup.contentEquals(getToID())) {    return true;  }  return isMatchingTalkgroup(message.getTalkgroupID());}  }
class C{  private boolean checkDocumentStart(){  if (reader.getColumn() == 0) {    if ("---".equals(reader.prefix(3)) && Constant.NULL_BL_T_LINEBR.has(reader.peek(3))) {      return true;    }  }  return false;}  }
class C{  @Override public void declareOutputFields(OutputFieldsDeclarer declarer){  declarer.declare(new Fields("measurement","profile"));}  }
class C{  public void insertAfterSuper(String body,CtClass targetClass,String targetMethodName,CtClass... targetMethodParams) throws CannotCompileException, AfterBurnerImpossibleException, NotFoundException {  InsertableMethod insertableMethod=new InsertableMethodBuilder(mSignatureExtractor).insertIntoClass(targetClass).afterSuper(targetMethodName,targetMethodParams).withBody(body).createInsertableMethod();  addOrInsertMethod(insertableMethod);}  }
class C{  public void remove(){  throw new UnsupportedOperationException("ValueExtractor Iterator can't be modified");}  }
class C{  public int scan(String table,String startkey,int recordcount,Set<String> fields,Vector<HashMap<String,ByteIterator>> result){  delay();  if (verbose) {    System.out.print("SCAN " + table + " "+ startkey+ " "+ recordcount+ " [ ");    if (fields != null) {      for (      String f : fields) {        System.out.print(f + " ");      }    } else {      System.out.print("<all fields>");    }    System.out.println("]");  }  return 0;}  }
class C{  public final int type(){  return m_Type;}  }
class C{  private void createPolygon(){  if (this.network != null && this.stepSize > 0) {    List<Node> outerNodes=new ArrayList<Node>();    double[] corners=createInitialBoundingBox();    this.coordinates=createInitialCoordinates(corners);    List<Coordinate> coords=new ArrayList<Coordinate>();    for (    Coordinate coord : coordinates) {      Node node=NetworkUtils.getNearestNode(((Network)this.network),MGC.coordinate2Coord(coord));      if (!outerNodes.contains(node)) {        outerNodes.add(node);        coords.add(new Coordinate(MGC.coord2Coordinate(node.getCoord())));      }    }    this.coordinates=coords;    this.coordinates.add(this.coordinates.get(0));  }}  }
class C{  @Override public void generatePartition(Instances data) throws Exception {  buildClassifier(data);}  }
class C{  public Hotel(String id,String name,String city,String description){  this.id=id;  this.name=name;  this.description=description;  this.city=city;}  }
class C{  public static ToHitData toHit(IGame game,int attackerId,Targetable target){  final Entity ae=game.getEntity(attackerId);  if (ae == null) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"You can't attack from a null entity!");  }  if (!game.getOptions().booleanOption("tacops_trip_attack")) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"no Trip attack");  }  String impossible=PhysicalAttackAction.toHitIsImpossible(game,ae,target);  if (impossible != null) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"impossible");  }  if (ae.getGrappled() != Entity.NONE) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"impossible");  }  if (!game.getOptions().booleanOption("friendly_fire")) {    if (target.getTargetType() == Targetable.TYPE_ENTITY && (((Entity)target).getOwnerId() == ae.getOwnerId() || (((Entity)target).getOwner().getTeam() != IPlayer.TEAM_NONE && ae.getOwner().getTeam() != IPlayer.TEAM_NONE && ae.getOwner().getTeam() == ((Entity)target).getOwner().getTeam()))) {      return new ToHitData(TargetRoll.IMPOSSIBLE,"A friendly unit can never be the target of a direct attack.");    }  }  ToHitData toHit;  if (!(ae instanceof Mech) || !(target instanceof Mech)) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Only mechs can trip other mechs");  }  if (ae.isLocationBad(Mech.LOC_LLEG) || ae.isLocationBad(Mech.LOC_RLEG)) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Leg missing");  }  final int range=ae.getPosition().distance(target.getPosition());  if (range > 1) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Target out of range");  }  int limb1=Entity.LOC_NONE;  if (!Compute.isInArc(ae.getPosition(),ae.getFacing(),target,Compute.ARC_FORWARD)) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Target not in arc");  }  if (ae.isProne()) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Attacker is prone");  }  if (((Entity)target).isProne()) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Target is prone");  }  IHex attHex=game.getBoard().getHex(ae.getPosition());  IHex targHex=game.getBoard().getHex(target.getPosition());  final int attackerElevation=ae.getElevation() + attHex.getLevel();  final int targetElevation=target.getElevation() + targHex.getLevel();  if (attackerElevation != targetElevation) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Attacker and Target must be at the same elevation");  }  boolean usedWeapons[]=new boolean[ae.locations()];  for (int i=0; i < ae.locations(); i++) {    usedWeapons[i]=false;  }  for (  Mounted mounted : ae.getWeaponList()) {    if (mounted.isUsedThisRound()) {      int loc=mounted.getLocation();      if (loc != Entity.LOC_NONE) {        usedWeapons[loc]=true;      }    }  }  if (!ae.hasWorkingSystem(Mech.ACTUATOR_HIP,Mech.LOC_RLEG)) {    usedWeapons[Mech.LOC_RLEG]=true;  }  if (!ae.hasWorkingSystem(Mech.ACTUATOR_HIP,Mech.LOC_LLEG)) {    usedWeapons[Mech.LOC_LLEG]=true;  }  if (!ae.hasWorkingSystem(Mech.ACTUATOR_HIP,Mech.LOC_RARM)) {    usedWeapons[Mech.LOC_RARM]=true;  }  if (!ae.hasWorkingSystem(Mech.ACTUATOR_HIP,Mech.LOC_LARM)) {    usedWeapons[Mech.LOC_LARM]=true;  }  if (ae instanceof QuadMech) {    if (usedWeapons[Mech.LOC_RARM]) {      if (usedWeapons[Mech.LOC_LARM]) {        return new ToHitData(TargetRoll.IMPOSSIBLE,"both legs unusable");      }      limb1=Mech.LOC_LARM;    }  } else   if (usedWeapons[Mech.LOC_RLEG]) {    if (usedWeapons[Mech.LOC_LLEG]) {      return new ToHitData(TargetRoll.IMPOSSIBLE,"both legs unusable");    }    limb1=Mech.LOC_LLEG;  }  int base=ae.getCrew().getPiloting() - 1;  toHit=new ToHitData(base,"base");  PhysicalAttackAction.setCommonModifiers(toHit,game,ae,target);  if (ae instanceof QuadMech) {    if (limb1 == Entity.LOC_NONE) {      ToHitData left=TripAttackAction.getLimbModifier(Mech.LOC_LARM,ae);      ToHitData right=TripAttackAction.getLimbModifier(Mech.LOC_RARM,ae);      if (left.getValue() < right.getValue()) {        toHit.append(left);      } else {        toHit.append(right);      }    } else {      toHit.append(TripAttackAction.getLimbModifier(limb1,ae));    }  } else   if (limb1 == Entity.LOC_NONE) {    ToHitData left=TripAttackAction.getLimbModifier(Mech.LOC_LLEG,ae);    ToHitData right=TripAttackAction.getLimbModifier(Mech.LOC_RLEG,ae);    if (left.getValue() < right.getValue()) {      toHit.append(left);    } else {      toHit.append(right);    }  } else {    toHit.append(TripAttackAction.getLimbModifier(limb1,ae));  }  if (ae.hasFunctionalLegAES()) {    toHit.addModifier(-1,"AES modifer");  }  return toHit;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:45.220 -0500",hash_original_method="49549DEACC297430F7E9805D3678A016",hash_generated_method="AA06E82B2FBF8034810ACC4CD2880391") private void nativeFinished(){}  }
class C{  private void parseActions(){  int mask;  if (actions == null)   throw new IllegalArgumentException("MBeanPermission: " + "actions can't be null");  if (actions.equals(""))   throw new IllegalArgumentException("MBeanPermission: " + "actions can't be empty");  mask=getMask(actions);  if ((mask & ALL) != mask)   throw new IllegalArgumentException("Invalid actions mask");  if (mask == NONE)   throw new IllegalArgumentException("Invalid actions mask");  this.mask=mask;}  }
class C{  private static byte[] encodeBase64(byte[] binaryData,boolean isChunked){  int lengthDataBits=binaryData.length * EIGHTBIT;  int fewerThan24bits=lengthDataBits % TWENTYFOURBITGROUP;  int numberTriplets=lengthDataBits / TWENTYFOURBITGROUP;  byte encodedData[]=null;  int encodedDataLength=0;  int nbrChunks=0;  if (fewerThan24bits != 0) {    encodedDataLength=(numberTriplets + 1) * 4;  } else {    encodedDataLength=numberTriplets * 4;  }  if (isChunked) {    nbrChunks=(CHUNK_SEPARATOR.length == 0 ? 0 : (int)Math.ceil((float)encodedDataLength / CHUNK_SIZE));    encodedDataLength+=nbrChunks * CHUNK_SEPARATOR.length;  }  encodedData=new byte[encodedDataLength];  byte k=0, l=0, b1=0, b2=0, b3=0;  int encodedIndex=0;  int dataIndex=0;  int i=0;  int nextSeparatorIndex=CHUNK_SIZE;  int chunksSoFar=0;  for (i=0; i < numberTriplets; i++) {    dataIndex=i * 3;    b1=binaryData[dataIndex];    b2=binaryData[dataIndex + 1];    b3=binaryData[dataIndex + 2];    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    byte val3=((b3 & SIGN) == 0) ? (byte)(b3 >> 6) : (byte)((b3) >> 6 ^ 0xfc);    encodedData[encodedIndex]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex + 1]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex + 2]=lookUpBase64Alphabet[(l << 2) | val3];    encodedData[encodedIndex + 3]=lookUpBase64Alphabet[b3 & 0x3f];    encodedIndex+=4;    if (isChunked) {      if (encodedIndex == nextSeparatorIndex) {        System.arraycopy(CHUNK_SEPARATOR,0,encodedData,encodedIndex,CHUNK_SEPARATOR.length);        chunksSoFar++;        nextSeparatorIndex=(CHUNK_SIZE * (chunksSoFar + 1)) + (chunksSoFar * CHUNK_SEPARATOR.length);        encodedIndex+=CHUNK_SEPARATOR.length;      }    }  }  dataIndex=i * 3;  if (fewerThan24bits == EIGHTBIT) {    b1=binaryData[dataIndex];    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    encodedData[encodedIndex]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex + 1]=lookUpBase64Alphabet[k << 4];    encodedData[encodedIndex + 2]=PAD;    encodedData[encodedIndex + 3]=PAD;  } else   if (fewerThan24bits == SIXTEENBIT) {    b1=binaryData[dataIndex];    b2=binaryData[dataIndex + 1];    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    encodedData[encodedIndex]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex + 1]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex + 2]=lookUpBase64Alphabet[l << 2];    encodedData[encodedIndex + 3]=PAD;  }  if (isChunked) {    if (chunksSoFar < nbrChunks) {      System.arraycopy(CHUNK_SEPARATOR,0,encodedData,encodedDataLength - CHUNK_SEPARATOR.length,CHUNK_SEPARATOR.length);    }  }  return encodedData;}  }
class C{  public static double clamp(double value,double low,double high){  return Math.min(Math.max(value,low),high);}  }
class C{  protected JavaMethodConverter(final SingleValueConverter javaClassConverter){  if (!javaClassConverter.canConvert(Class.class)) {    throw new InitializationException("Java Class Converter cannot handle Class types");  }  this.javaClassConverter=javaClassConverter;}  }
class C{  private void verifyContainingType(FieldDescriptor field){  if (field.getContainingType() != type) {    throw new IllegalArgumentException("FieldDescriptor does not match message type.");  }}  }
class C{  public ModuleDeclaration withAssembler(Assembler assembler){  assemblers.add(assembler);  return this;}  }
class C{  void dispatch(Iterable<TCacheEntryEvent<K,V>> events,EventType eventType,boolean forceAsync){  if (eventManager == null)   return;  @SuppressWarnings("unchecked") CacheEntryListener<K,V> listenerRef=(CacheEntryListener<K,V>)this.listener;  int batchSize=256;  int i=0;  boolean needsSend=false;  List<CacheEntryEvent<? extends K,? extends V>> interestingEvents=new ArrayList<>(batchSize);  for (  TCacheEntryEvent<? extends K,? extends V> event : events) {    if (!interested(event))     continue;    interestingEvents.add(event);    needsSend=true;    if (i++ == batchSize) {      scheduleEvents(interestingEvents,listenerRef,eventType,forceAsync);      needsSend=false;      i=0;    }  }  if (needsSend) {    scheduleEvents(interestingEvents,listenerRef,eventType,forceAsync);  }}  }
class C{  public DiscoveryNode resolveNode(String node){  String[] resolvedNodeIds=resolveNodesIds(node);  if (resolvedNodeIds.length > 1) {    throw new IllegalArgumentException("resolved [" + node + "] into ["+ resolvedNodeIds.length+ "] nodes, where expected to be resolved to a single node");  }  if (resolvedNodeIds.length == 0) {    throw new IllegalArgumentException("failed to resolve [" + node + " ], no matching nodes");  }  return nodes.get(resolvedNodeIds[0]);}  }
class C{  public Word plus(Word w2){  return new Word(value.plus(w2.toLong()));}  }
class C{  public boolean isXPathEListEnabled(){  return _elistEnabled;}  }
class C{  public static void checkAndSetLongParam(Element context,AVList params,String paramKey,String paramName,XPath xpath){  if (context == null) {    String message=Logging.getMessage("nullValue.ElementIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (params == null) {    String message=Logging.getMessage("nullValue.ParametersIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (paramKey == null) {    String message=Logging.getMessage("nullValue.ParameterKeyIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (paramName == null) {    String message=Logging.getMessage("nullValue.ParameterNameIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Object o=params.getValue(paramKey);  if (o == null) {    Long d=getLong(context,paramName,xpath);    if (d != null)     params.setValue(paramKey,d);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:40.287 -0500",hash_original_method="BAA90C1A527ED6ADE64DE9CF5831D500",hash_generated_method="132AEEF0AEA6CA5B546CA4A7DAD99066") public void finish(){  ThreadSpanState state=mContainerState;synchronized (state) {    if (mName == null) {      return;    }    if (mPrev != null) {      mPrev.mNext=mNext;    }    if (mNext != null) {      mNext.mPrev=mPrev;    }    if (state.mActiveHead == this) {      state.mActiveHead=mNext;    }    state.mActiveSize--;    if (LOG_V)     Log.d(TAG,"Span finished=" + mName + "; size="+ state.mActiveSize);    this.mCreateMillis=-1;    this.mName=null;    this.mPrev=null;    this.mNext=null;    if (state.mFreeListSize < 5) {      this.mNext=state.mFreeListHead;      state.mFreeListHead=this;      state.mFreeListSize++;    }  }}  }
class C{  @Override public int compareTo(ComplexInnerClass o){  return 0;}  }
class C{  public static boolean isFileOfSupportedSchema(ResourceByteRangeProvider resourceByteRangeProvider) throws IOException {  try (InputStream inputStream=resourceByteRangeProvider.getByteRangeAsStream(0,resourceByteRangeProvider.getResourceSize() - 1)){    DocumentBuilderFactory documentBuilderFactory=DocumentBuilderFactory.newInstance();    documentBuilderFactory.setNamespaceAware(true);    DocumentBuilder documentBuilder=documentBuilderFactory.newDocumentBuilder();    Document document=documentBuilder.parse(inputStream);    NodeList nodeList=null;    for (    String supportedSchemaURI : supportedAssetMapSchemaURIs) {      nodeList=document.getElementsByTagNameNS(supportedSchemaURI,"AssetMap");      if (nodeList != null && nodeList.getLength() == 1) {        return true;      }    }  } catch (  ParserConfigurationException|SAXException e) {    return false;  }  return false;}  }
class C{  private void shareWebPage(WXShareContent content,WXMediaMessage msg,SendMessageToWX.Req req){  WXWebpageObject wxWebpageObject=new WXWebpageObject();  wxWebpageObject.webpageUrl=content.getWeb_url();  msg.mediaObject=wxWebpageObject;  msg.title=content.getTitle();  msg.description=content.getDescription();  req.transaction=buildTransaction("webpage");  req.message=msg;  req.scene=content.getScene();  shareAsync(content.getImage_url(),req,true);}  }
class C{  public String stopwordsHandlerTipText(){  return "The stopwords handler to use (Null means no stopwords are used).";}  }
class C{  private void processFiles(SensorContext sensorContext){  DelphiUtils.LOG.info("Processing metrics...");  ProgressReporter progressReporter=new ProgressReporter(resourceList.size(),10,new ProgressReporterLogger(DelphiUtils.LOG));  for (  InputFile resource : resourceList) {    DelphiUtils.LOG.debug(">> PROCESSING " + resource.file().getPath());    processMetric(basicMetrics,sensorContext,resource);    processMetric(complexityMetrics,sensorContext,resource);    processMetric(deadCodeMetrics,sensorContext,resource);    if (basicMetrics.hasMetric("PUBLIC_DOC_API") && complexityMetrics.hasMetric("PUBLIC_API")) {      double undocumentedApi=DelphiUtils.checkRange(complexityMetrics.getMetric("PUBLIC_API") - basicMetrics.getMetric("PUBLIC_DOC_API"),0.0,Double.MAX_VALUE);      sensorContext.saveMeasure(resource,CoreMetrics.PUBLIC_UNDOCUMENTED_API,undocumentedApi);    }    progressReporter.progress();  }  DelphiUtils.LOG.info("Done");}  }
class C{  public void testBlockingStop_MiddleLink() throws SecurityException, NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {  Fixture f=new Fixture(2,true,0,false);  f.simEngine.doSimStep(100);  assertEquals(0,f.qlink2.getAllVehicles().size());  f.qsim.getSimTimer().setTime(101);  f.simEngine.doSimStep(101);  assertEquals(1,f.qlink2.getAllVehicles().size());  MobsimVehicle[] vehicles=f.qlink2.getAllVehicles().toArray(new MobsimVehicle[2]);  assertEquals(f.transitVehicle,vehicles[0]);  f.qsim.getSimTimer().setTime(102);  f.simEngine.doSimStep(102);  assertEquals(2,f.qlink2.getAllVehicles().size());  vehicles=f.qlink2.getAllVehicles().toArray(vehicles);  assertEquals(f.transitVehicle,vehicles[0]);  assertEquals(f.normalVehicle,vehicles[1]);  f.qsim.getSimTimer().setTime(200);  f.simEngine.doSimStep(200);  assertEquals(2,f.qlink2.getAllVehicles().size());  f.qsim.getSimTimer().setTime(201);  f.simEngine.doSimStep(201);  assertEquals(2,f.qlink2.getAllVehicles().size());  f.qsim.getSimTimer().setTime(202);  f.simEngine.doSimStep(202);  assertEquals(2,f.qlink2.getAllVehicles().size());  f.qsim.getSimTimer().setTime(203);  f.simEngine.doSimStep(203);  assertEquals(2,f.qlink2.getAllVehicles().size());  f.qsim.getSimTimer().setTime(219);  f.simEngine.doSimStep(219);  assertEquals(2,f.qlink2.getAllVehicles().size());  f.qsim.getSimTimer().setTime(220);  f.simEngine.doSimStep(220);  assertEquals(2,f.qlink2.getAllVehicles().size());  f.qsim.getSimTimer().setTime(221);  f.simEngine.doSimStep(221);  assertEquals(1,f.qlink2.getAllVehicles().size());  vehicles=f.qlink2.getAllVehicles().toArray(vehicles);  assertEquals(f.normalVehicle,vehicles[0]);  assertEquals(1,f.qlink3.getAllVehicles().size());  vehicles=f.qlink3.getAllVehicles().toArray(vehicles);  assertEquals(f.transitVehicle,vehicles[0]);  f.qsim.getSimTimer().setTime(222);  f.simEngine.doSimStep(222);  assertEquals(2,f.qlink3.getAllVehicles().size());  vehicles=f.qlink3.getAllVehicles().toArray(vehicles);  assertEquals(f.transitVehicle,vehicles[0]);  assertEquals(f.normalVehicle,vehicles[1]);}  }
class C{  public StrBuilder insert(int index,double value){  return insert(index,String.valueOf(value));}  }
class C{  private PostgreSQLProjectCreator(){}  }
class C{  @SuppressWarnings("unused") public void debugRender(GL2 gl){  if (!DEBUG || (startcamera == null)) {    return;  }  gl.glLineWidth(3f);  gl.glColor4f(1.f,0.f,0.f,.66f);  gl.glBegin(GL.GL_LINES);  gl.glVertex3f(0.f,0.f,0.f);  double rot=startangle - startcamera.getRotationZ();  gl.glVertex3f((float)Math.cos(rot) * 4.f,(float)-Math.sin(rot) * 4.f,0.f);  gl.glVertex3f((float)Math.cos(rot) * 1.f,(float)-Math.sin(rot) * 1.f,0.f);  gl.glVertex3f((float)Math.cos(rot) * 1.f,(float)-Math.sin(rot) * 1.f,1.f);  gl.glEnd();}  }
class C{  @Override public String basePath(){  return "/wm/linkdiscovery";}  }
class C{  protected String stripQuotes(String value){  return value.replaceAll("^\"|\"$","");}  }
class C{  public void updateSelectedLinkList(){  for (  Link l : selectedLinkList) {    if (!net.getLinks().containsKey(l.getId())) {      selectedLinkList.remove(l);      return;    }  }}  }
class C{  public AttributeInfo copy(ConstPool newCp,Map classnames){  Copier copier=new Copier(info,constPool,newCp,classnames);  try {    copier.annotationArray();    return new AnnotationsAttribute(newCp,getName(),copier.close());  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public HtmlPolicyBuilder allowElements(ElementPolicy policy,String... elementNames){  invalidateCompiledState();  for (  String elementName : elementNames) {    elementName=HtmlLexer.canonicalName(elementName);    ElementPolicy newPolicy=ElementPolicy.Util.join(elPolicies.get(elementName),policy);    elPolicies.put(elementName,newPolicy);    if (!textContainers.containsKey(elementName) && TagBalancingHtmlStreamEventReceiver.allowsPlainTextualContent(elementName)) {      textContainers.put(elementName,true);    }  }  return this;}  }
class C{  public long written(){  return written;}  }
class C{  protected void refresh(){  notifyDataSetChanged();}  }
class C{  public boolean hasExtensions(){  return extensions != null;}  }
class C{  public Log(){  super("log",1);}  }
class C{  public List<Protos.Resource> consumeMem(Double value){  return consumeScalarResource(RESOURCE_MEM,value);}  }
class C{  @Pure public static Atom findOrCreateUnicodeAtom(String str){  return findOrCreate(null,true,str);}  }
class C{  private Map<String,RefererLookup> loadReferers(InputStream referersYaml) throws RefererParserException {  Yaml yaml=new Yaml(new SafeConstructor());  Map<String,Map<String,Map>> rawReferers=(Map<String,Map<String,Map>>)yaml.load(referersYaml);  Map<String,RefererLookup> referers=new HashMap<String,RefererLookup>();  for (  Map.Entry<String,Map<String,Map>> mediumReferers : rawReferers.entrySet()) {    Medium medium=Medium.fromString(mediumReferers.getKey());    for (    Map.Entry<String,Map> referer : mediumReferers.getValue().entrySet()) {      String sourceName=referer.getKey();      Map<String,List<String>> refererMap=referer.getValue();      List<String> parameters=refererMap.get("parameters");      if (medium == Medium.SEARCH) {        if (parameters == null) {          throw new RefererParserException("No parameters found for search referer '" + sourceName + "'");        }      } else {        if (parameters != null) {          throw new RefererParserException("Parameters not supported for non-search referer '" + sourceName + "'");        }      }      List<String> domains=refererMap.get("domains");      if (domains == null) {        throw new RefererParserException("No domains found for referer '" + sourceName + "'");      }      for (      String domain : domains) {        if (referers.containsValue(domain)) {          throw new RefererParserException("Duplicate of domain '" + domain + "' found");        }        referers.put(domain,new RefererLookup(medium,sourceName,parameters));      }    }  }  return referers;}  }
class C{  public void toEPL(StringWriter writer){  writer.append("expression ");  if (optionalReturnType != null) {    writer.append(optionalReturnType);    writer.append(" ");  }  if (optionalDialect != null && optionalDialect.trim().length() != 0) {    writer.append(optionalDialect);    writer.append(":");  }  writer.append(name);  writer.append("(");  if (parameterNames != null && !parameterNames.isEmpty()) {    String delimiter="";    for (    String name : parameterNames) {      writer.append(delimiter);      writer.append(name);      delimiter=",";    }  }  writer.append(")");  writer.append(" [");  writer.append(expressionText);  writer.append("]");}  }
class C{  protected void initDataBindings(){  JListBinding<ExportTemplate,List<ExportTemplate>,JList> jListBinding=SwingBindings.createJListBinding(UpdateStrategy.READ,templatesFound,list);  BeanProperty<ExportTemplate,String> exportTemplateBeanProperty=BeanProperty.create("name");  jListBinding.setDetailBinding(exportTemplateBeanProperty);  jListBinding.bind();  BeanProperty<JList,String> jListBeanProperty=BeanProperty.create("selectedElement.name");  BeanProperty<JLabel,String> jLabelBeanProperty=BeanProperty.create("text");  AutoBinding<JList,String,JLabel,String> autoBinding=Bindings.createAutoBinding(UpdateStrategy.READ,list,jListBeanProperty,lblTemplateName,jLabelBeanProperty);  autoBinding.bind();  BeanProperty<JList,String> jListBeanProperty_1=BeanProperty.create("selectedElement.url");  AutoBinding<JList,String,JLabel,String> autoBinding_1=Bindings.createAutoBinding(UpdateStrategy.READ,list,jListBeanProperty_1,lblUrl,jLabelBeanProperty);  autoBinding_1.bind();  BeanProperty<JList,String> jListBeanProperty_2=BeanProperty.create("selectedElement.description");  BeanProperty<JTextPane,String> jTextPaneBeanProperty=BeanProperty.create("text");  AutoBinding<JList,String,JTextPane,String> autoBinding_2=Bindings.createAutoBinding(UpdateStrategy.READ,list,jListBeanProperty_2,tpDescription,jTextPaneBeanProperty);  autoBinding_2.bind();  BeanProperty<JList,Boolean> jListBeanProperty_3=BeanProperty.create("selectedElement.detail");  BeanProperty<JCheckBox,Boolean> jCheckBoxBeanProperty=BeanProperty.create("selected");  AutoBinding<JList,Boolean,JCheckBox,Boolean> autoBinding_3=Bindings.createAutoBinding(UpdateStrategy.READ,list,jListBeanProperty_3,chckbxTemplateWithDetail,jCheckBoxBeanProperty);  autoBinding_3.bind();}  }
class C{  public String map(String typeName){  return typeName;}  }
class C{  public void hideLoadingView(){  if (mRootView.getVisibility() == View.GONE) {    return;  }  resetViewStatus();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean isStateActive(State state){switch (state) {case main_region_A:    return stateVector[0] == State.main_region_A;default :  return false;}}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public static byte[] generateSalt() throws GeneralSecurityException {  return randomBytes(PBE_SALT_LENGTH_BITS);}  }
class C{  public boolean handlesService(Class<? extends IEncodeable> requestClass){  return serviceHandlers.supportsService(requestClass);}  }
class C{  public void incrementCount(){  this.count++;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.203 -0400",hash_original_method="E704B5FFDAB5E24BC26C51A387B1C1CD",hash_generated_method="9A63E15D88FB73F50F30CF4384255BFC") public static boolean isFileNewer(File file,File reference){  if (reference == null) {    throw new IllegalArgumentException("No specified reference file");  }  if (!reference.exists()) {    throw new IllegalArgumentException("The reference file '" + reference + "' doesn't exist");  }  return isFileNewer(file,reference.lastModified());}  }
class C{  public Vector4f mul(Matrix4fc mat){  return mul(mat,this);}  }
class C{  @Override public void modifyVariableId(String oldId,String newId){  if (variable.equals(oldId)) {    variable=newId;  }  if (discreteCache != null) {    discreteCache.modifyVariableId(oldId,newId);  }}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder(this.getClass().getName());  sb.append(System.getProperty("line.separator"));  sb.append("name: ");  sb.append(name);  sb.append(System.getProperty("line.separator"));  sb.append("publicId: ");  sb.append(publicId);  sb.append(System.getProperty("line.separator"));  sb.append("xmlPublicId: ");  sb.append(xmlPublicId);  sb.append(System.getProperty("line.separator"));  sb.append("xmlUriRef: ");  sb.append(xmlUriRef);  sb.append(System.getProperty("line.separator"));  sb.append("clazz: ");  sb.append(clazz);  sb.append(System.getProperty("line.separator"));  sb.append("root: ");  sb.append(root);  sb.append("namespaces: ");  sb.append(System.getProperty("line.separator"));  for (  WbXmlNamespaceDef ns : nsByPrefix.values()) {    sb.append(ns.getPrefix());    sb.append(" -> ");    sb.append(ns);  }  sb.append("tags:");  sb.append(System.getProperty("line.separator"));  for (  WbXmlTagDef tag : tagsByName.values()) {    sb.append(tag);  }  sb.append("attributes: ");  sb.append(System.getProperty("line.separator"));  for (  TreeSet<WbXmlAttributeDef> attrs : attrsByName.values()) {    for (    WbXmlAttributeDef attr : attrs) {      sb.append(attr);    }  }  sb.append("values:");  sb.append(System.getProperty("line.separator"));  for (  WbXmlAttributeValueDef attrVal : attrValuesByValue) {    sb.append(attrVal);  }  sb.append("extensions: ");  sb.append(System.getProperty("line.separator"));  for (  WbXmlExtensionDef ext : extsByValue) {    sb.append(ext);  }  sb.append("opaque attr plugins: ");  sb.append(System.getProperty("line.separator"));  for (  WbXmlToken token : opaqueAttrByToken.keySet()) {    sb.append(token);    sb.append("->");    sb.append(opaqueAttrByToken.get(token).getClass().getName());    sb.append(System.getProperty("line.separator"));  }  sb.append("opaque tag plugins: ");  sb.append(System.getProperty("line.separator"));  for (  WbXmlToken token : opaqueTagByToken.keySet()) {    sb.append(token);    sb.append("->");    sb.append(opaqueTagByToken.get(token).getClass().getName());    sb.append(System.getProperty("line.separator"));  }  sb.append("Linked definitions: ");  sb.append(System.getProperty("line.separator"));  for (  WbXmlDefinition def : linkedDefinitions.values()) {    sb.append(def.getName());    sb.append(System.getProperty("line.separator"));  }  return sb.toString();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean isInstallMode(){  return scenario.equals(PropertyConstants.INSTALL_MODE) ? true : false;}  }
class C{  protected <V>RunnableScheduledFuture<V> decorateTask(Runnable runnable,RunnableScheduledFuture<V> task){  return task;}  }
class C{  public WebAddress(String address) throws ParseException {  if (address == null) {    throw new NullPointerException();  }  mScheme="";  mHost="";  mPort=-1;  mPath="/";  mAuthInfo="";  Matcher m=sAddressPattern.matcher(address);  String t;  if (m.matches()) {    t=m.group(MATCH_GROUP_SCHEME);    if (t != null)     mScheme=t.toLowerCase();    t=m.group(MATCH_GROUP_AUTHORITY);    if (t != null)     mAuthInfo=t;    t=m.group(MATCH_GROUP_HOST);    if (t != null)     mHost=t;    t=m.group(MATCH_GROUP_PORT);    if (t != null && t.length() > 0) {      try {        mPort=Integer.parseInt(t);      } catch (      NumberFormatException ex) {        throw new ParseException("Bad port");      }    }    t=m.group(MATCH_GROUP_PATH);    if (t != null && t.length() > 0) {      if (t.charAt(0) == '/') {        mPath=t;      } else {        mPath="/" + t;      }    }  } else {    throw new ParseException("Bad address");  }  if (mPort == 443 && mScheme.equals("")) {    mScheme="https";  } else   if (mPort == -1) {    if (mScheme.equals("https"))     mPort=443; else     mPort=80;  }  if (mScheme.equals(""))   mScheme="http";}  }
class C{  private void writeInt4(OutputStream s,int i) throws java.io.IOException {  byte i1=(byte)(i & 0xFF);  byte i2=(byte)((i >> 8) & 0xFF);  byte i3=(byte)((i >> 16) & 0xFF);  byte i4=(byte)((i >> 24) & 0xFF);  s.write(i1);  s.write(i2);  s.write(i3);  s.write(i4);}  }
class C{  @Override public double valueToJava2D(double value,Rectangle2D area,RectangleEdge edge){  double result=Double.NaN;  double axisMin=this.first.getFirstMillisecond();  double axisMax=this.last.getLastMillisecond();  if (RectangleEdge.isTopOrBottom(edge)) {    double minX=area.getX();    double maxX=area.getMaxX();    if (isInverted()) {      result=maxX + ((value - axisMin) / (axisMax - axisMin)) * (minX - maxX);    } else {      result=minX + ((value - axisMin) / (axisMax - axisMin)) * (maxX - minX);    }  } else   if (RectangleEdge.isLeftOrRight(edge)) {    double minY=area.getMinY();    double maxY=area.getMaxY();    if (isInverted()) {      result=minY + (((value - axisMin) / (axisMax - axisMin)) * (maxY - minY));    } else {      result=maxY - (((value - axisMin) / (axisMax - axisMin)) * (maxY - minY));    }  }  return result;}  }
class C{  public Long sort(final byte[] key,final byte[] dstkey){  checkIsInMulti();  client.sort(key,dstkey);  return client.getIntegerReply();}  }
class C{  public SipRequest createInvite() throws PayloadException {  return SipMessageFactory.createInvite(getDialogPath(),RichcallService.FEATURE_TAGS_VIDEO_SHARE,getDialogPath().getLocalContent());}  }
class C{  public void addToWhitelist(String line){  addToList(whitelist,line);}  }
class C{  protected void addParseTree(Tree<Pair<String,IntPair>> spanLabeledTree,Constituent root,int sentenceStartPosition){  for (int childId=0; childId < spanLabeledTree.getNumberOfChildren(); childId++) {    Tree<Pair<String,IntPair>> child=spanLabeledTree.getChild(childId);    String edgeLabel;    edgeLabel=PARENT_OF_STRING;    Pair<String,IntPair> childLabel=child.getLabel();    IntPair childSpan=childLabel.getSecond();    int start=childSpan.getFirst() + sentenceStartPosition;    int end=childSpan.getSecond() + sentenceStartPosition;    String constituentLabel=childLabel.getFirst();    Constituent childConstituent;    if (start == end) {      childConstituent=new Constituent(constituentLabel,1.0,this.getViewName(),this.getTextAnnotation(),-1,0);    } else {      childConstituent=createNewConstituent(start,end,constituentLabel,1.0);      if (end == start + 1 && child.getNumberOfChildren() == 0) {        String token=this.getTextAnnotation().getToken(start);        String s=constituentLabel;        token=treebankTokenHacks(token);        s=treebankTokenHacks(s);        if (!token.equals(s)) {          assert false : "Expecting token: " + token + ", found "+ s+ " instead.";        }      }    }    this.addConstituent(childConstituent);    this.addRelation(new Relation(edgeLabel,root,childConstituent,1.0));    this.addParseTree(child,childConstituent,sentenceStartPosition);  }}  }
class C{  public void playTogether(Collection<Animator> items){  if (items != null && items.size() > 0) {    mNeedsSort=true;    Builder builder=null;    for (    Animator anim : items) {      if (builder == null) {        builder=play(anim);      } else {        builder.with(anim);      }    }  }}  }
class C{  public void play(){  if (streaming) {    Runnable streamSound=new StreamingSound(this.url);    Thread tStream=new Thread(streamSound);    tStream.start();  } else {    this.clip.start();  }}  }
class C{  public Object nextEntity(char ampersand) throws JSONException {  StringBuffer sb=new StringBuffer();  for (; ; ) {    char c=next();    if (Character.isLetterOrDigit(c) || c == '#') {      sb.append(Character.toLowerCase(c));    } else     if (c == ';') {      break;    } else {      throw syntaxError("Missing ';' in XML entity: &" + sb);    }  }  String string=sb.toString();  Object object=entity.get(string);  return object != null ? object : ampersand + string + ";";}  }
class C{  public TypeListModel(final List<BaseType> types,final Predicate<BaseType> filter){  final Builder<BaseType> builder=ImmutableList.builder();  for (  BaseType baseType : types) {    if (filter.apply(baseType)) {      builder.add(baseType);    }  }  filteredTypes=builder.build();}  }
class C{  @SuppressWarnings("rawtypes") public static void createProjectGuideline(ZipFile zip,Project aProject,RepositoryService aRepository) throws IOException {  for (Enumeration zipEnumerate=zip.entries(); zipEnumerate.hasMoreElements(); ) {    ZipEntry entry=(ZipEntry)zipEnumerate.nextElement();    String entryName=normalizeEntryName(entry);    if (entryName.startsWith(GUIDELINE)) {      String filename=FilenameUtils.getName(entry.getName());      File guidelineDir=aRepository.getGuidelinesFile(aProject);      FileUtils.forceMkdir(guidelineDir);      FileUtils.copyInputStreamToFile(zip.getInputStream(entry),new File(guidelineDir,filename));      LOG.info("Imported guideline [" + filename + "] for project ["+ aProject.getName()+ "] with id ["+ aProject.getId()+ "]");    }  }}  }
class C{  public void log(LogDataBuilder data){  String logUrl=getLogUrl(data);  if (logInterceptor == null || !logInterceptor.onLog(logUrl)) {    logDebug(logUrl);  }}  }
class C{  public int nextInt(int max){  return org.evosuite.runtime.Random.nextInt(max);}  }
class C{  public Document nextDoc() throws IOException {  String line;synchronized (this) {    line=reader.readLine();    if (line == null) {      if (LuceneTestCase.VERBOSE) {        System.out.println("TEST: LineFileDocs: now rewind file...");      }      reader.close();      reader=null;      open(null);      line=reader.readLine();    }  }  DocState docState=threadDocs.get();  if (docState == null) {    docState=new DocState();    threadDocs.set(docState);  }  int spot=line.indexOf(SEP);  if (spot == -1) {    throw new RuntimeException("line: [" + line + "] is in an invalid format !");  }  int spot2=line.indexOf(SEP,1 + spot);  if (spot2 == -1) {    throw new RuntimeException("line: [" + line + "] is in an invalid format !");  }  docState.body.setStringValue(line.substring(1 + spot2,line.length()));  final String title=line.substring(0,spot);  docState.title.setStringValue(title);  if (docState.titleDV != null) {    docState.titleDV.setBytesValue(new BytesRef(title));  }  docState.titleTokenized.setStringValue(title);  docState.date.setStringValue(line.substring(1 + spot,spot2));  final int i=id.getAndIncrement();  docState.id.setStringValue(Integer.toString(i));  docState.idNum.setIntValue(i);  if (docState.idNumDV != null) {    docState.idNumDV.setLongValue(i);  }  if (random.nextInt(5) == 4) {    Document doc=new Document();    for (    IndexableField field : docState.doc) {      doc.add(field);    }    if (random.nextInt(3) == 1) {      int x=random.nextInt(4);      doc.add(new IntPoint("docLength" + x,line.length()));    }    if (random.nextInt(3) == 1) {      int x=random.nextInt(4);      doc.add(new IntPoint("docTitleLength" + x,title.length()));    }    if (random.nextInt(3) == 1) {      int x=random.nextInt(4);      doc.add(new NumericDocValuesField("docLength" + x,line.length()));    }  }  return docState.doc;}  }
class C{  @Override public PersistentDependency createDepend(){  ArrayList<PathImpl> pathList=((MergePath)_root)._pathList;  if (pathList.size() == 1)   return (PersistentDependency)pathList.get(0).createDepend();  DependencyList dependList=new DependencyList();  for (int i=0; i < pathList.size(); i++) {    PathImpl path=pathList.get(i);    PathImpl realPath=path.lookup(_pathname);    dependList.add((PersistentDependency)realPath.createDepend());  }  return dependList;}  }
class C{  @Override public void updateObject(String columnLabel,Object x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateObject(" + quote(columnLabel) + ", x);");    }    update(columnLabel,convertToUnknownValue(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private static void append(StringBuffer sbuf,int ch){  if ('A' <= ch && ch <= 'Z') {    sbuf.append((char)ch);  } else   if ('a' <= ch && ch <= 'z') {    sbuf.append((char)ch);  } else   if ('0' <= ch && ch <= '9') {    sbuf.append((char)ch);  } else   if (ch == ' ') {    sbuf.append('+');  } else   if (ch == '-' || ch == '_' || ch == '.' || ch == '!' || ch == '~' || ch == '*' || ch == '\'' || ch == '(' || ch == ')') {    sbuf.append((char)ch);  } else   if (ch <= 0x007f) {    sbuf.append(hex[ch]);  } else   if (ch <= 0x07FF) {    sbuf.append(hex[0xc0 | (ch >> 6)]);    sbuf.append(hex[0x80 | (ch & 0x3F)]);  } else {    sbuf.append(hex[0xe0 | (ch >> 12)]);    sbuf.append(hex[0x80 | ((ch >> 6) & 0x3F)]);    sbuf.append(hex[0x80 | (ch & 0x3F)]);  }}  }
class C{  public LowerCaseTokenizerFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public synchronized void pressPlay(){  if (getPlayState() == PS_STOPPED) {    stopButton.setIcon(I_STOP_OFF);    stopButton.setPressedIcon(I_STOP_ON);    playButton.setIcon(I_PLAY_ON);    playButton.setPressedIcon(I_PLAY_OFF);    pauseButton.setIcon(I_PAUSE_OFF);    pauseButton.setPressedIcon(I_PAUSE_ON);    repaint();    startSimulation();    spawnPlayThread();    setPlayState(PS_PLAYING);  } else   if (getPlayState() == PS_PAUSED) {    for (int x=0; x < numStepsPerStepButtonPress; x++) {      if (!simulation.step() || simulation.state.schedule.getTime() >= getWhenShouldEndTime() || simulation.state.schedule.getSteps() >= getWhenShouldEnd()) {        pressStop();        updateTime(simulation.state.schedule.getSteps(),simulation.state.schedule.getTime(),-1.0);        break;      } else {        updateTime(simulation.state.schedule.getSteps(),simulation.state.schedule.getTime(),-1.0);      }    }    refresh();  }  repaint();}  }
class C{  public boolean outlineContains(Point2D.Double p,double tolerance){  return Shapes.outlineContains(this,p,tolerance);}  }
class C{  @Override public boolean commitTransactionStage2(ReadWriteThreadManager rwtm) throws IOException {  if (!hardWriteMode) {    rollBackOut.close();    finishTransaction();  }synchronized (this) {    if (committedNextRowId != (int)((rwRaf.length() - HEADER_SIZE) / recordSize)) {      committedNextRowId=(int)((rwRaf.length() - HEADER_SIZE) / recordSize);      rwRaf.seek(NEXT_ROW_ID_POS);      rwRaf.writeInt(committedNextRowId);    }  }  rwRaf.getFD().sync();  return true;}  }
class C{  public boolean containsUncommitted(){  return firstUncommittedLog != Session.LOG_WRITTEN;}  }
class C{  public final static int findFirstDiff(char[] source,int index,char[] match){  for (int i=index; i < source.length; i++) {    if (equalsOne(source[i],match) == false) {      return i;    }  }  return -1;}  }
class C{  public static boolean startsWithIgnoreCase(String str,String prefix){  if (str == null || prefix == null) {    return false;  }  if (str.startsWith(prefix)) {    return true;  }  if (str.length() < prefix.length()) {    return false;  }  String lcStr=str.substring(0,prefix.length()).toLowerCase();  String lcPrefix=prefix.toLowerCase();  return lcStr.equals(lcPrefix);}  }
class C{  @Override protected EClass eStaticClass(){  return ImPackage.Literals.SYMBOL_TABLE;}  }
class C{  private int reverseAlignForBidi(Component c,int align){  if (c.isRTL()) {switch (align) {case Component.RIGHT:      return Component.LEFT;case Component.LEFT:    return Component.RIGHT;}}return align;}  }
class C{  public static BaseComponent[] appendTeamPrefix(@NonNull Team team,BaseComponent... components){  BaseComponent[] newComponents=new BaseComponent[components.length + 1];  newComponents[0]=new UnlocalizedComponentBuilder("[{0}] ",new TeamComponent(team)).color(team.getColor()).build();  System.arraycopy(components,0,newComponents,1,components.length);  return newComponents;}  }
class C{  @Before public void insertData(){  schema=new Schema();  schema.processTriple(TestUtils.statement(TestUtils.uri("Dean"),RDFS.SUBCLASSOF,TestUtils.uri("Professor")));  schema.processTriple(TestUtils.statement(TestUtils.uri("Professor"),RDFS.SUBCLASSOF,TestUtils.uri("Faculty")));  schema.processTriple(TestUtils.statement(TestUtils.uri("Faculty"),RDFS.SUBCLASSOF,TestUtils.uri("Employee")));  schema.processTriple(TestUtils.statement(TestUtils.uri("University"),RDFS.SUBCLASSOF,TestUtils.uri("Organization")));  schema.processTriple(TestUtils.statement(TestUtils.uri("ResearchGroup"),RDFS.SUBCLASSOF,TestUtils.uri("Organization")));  schema.processTriple(TestUtils.statement(TestUtils.uri("headOf"),RDFS.SUBPROPERTYOF,TestUtils.uri("worksFor")));  schema.processTriple(TestUtils.statement(TestUtils.uri("worksFor"),RDFS.SUBPROPERTYOF,TestUtils.uri("memberOf")));  schema.processTriple(TestUtils.statement(TestUtils.uri("advisor"),RDFS.RANGE,TestUtils.uri("Professor")));  schema.processTriple(TestUtils.statement(TestUtils.uri("hasAlumnus"),RDFS.DOMAIN,TestUtils.uri("University")));  schema.processTriple(TestUtils.statement(TestUtils.uri("memberOf"),RDFS.DOMAIN,TestUtils.uri("Person")));  schema.processTriple(TestUtils.statement(TestUtils.uri("memberOf"),RDFS.RANGE,TestUtils.uri("Organization")));  schema.processTriple(TestUtils.statement(TestUtils.uri("researchSpecialty"),RDFS.SUBPROPERTYOF,TestUtils.uri("researchInterest")));  schema.closure();}  }
class C{  public static void addRowTimes(DenseDoubleMatrix2D matrix,long diag,long fromCol,long row,double factor){  long cols=matrix.getColumnCount();  for (long col=fromCol; col < cols; col++) {    matrix.setDouble(matrix.getDouble(row,col) - factor * matrix.getDouble(diag,col),row,col);  }}  }
class C{  void incrementFilesOpenedForWrite(){  filesOpenedForWrite.increment();}  }
class C{  @Override public StreamImpl stream() throws IOException {  if (_streamImpl == null) {    _streamImpl=new SocketStream();  }  _streamImpl.init(_s);  return _streamImpl;}  }
class C{  public void testLoadClass() throws MalformedURLException {  Deployable war=new DefaultDeployableFactory().createDeployable(getContainer().getId(),getTestData().getTestDataFileFor("classpath-war"),DeployableType.WAR);  getLocalContainer().getConfiguration().addDeployable(war);  URL warPingURL=new URL("http://localhost:" + getTestData().port + "/"+ "classpath-war/test");  getLocalContainer().start();  PingUtils.assertPingTrue("simple war should have been started at this point",warPingURL,getLogger());  getLocalContainer().stop();  PingUtils.assertPingFalse("simple war should have been stopped at this point",warPingURL,getLogger());}  }
class C{  public TypeRef[] collectUpperBounds(InferenceVariable infVar,boolean onlyProper,boolean resolveRawTypes){  return collectBounds(infVar,onlyProper,resolveRawTypes,null);}  }
class C{  public static <T,V>ObjectAnimator ofObject(T target,Property<T,V> property,TypeEvaluator<V> evaluator,V... values){  ObjectAnimator anim=new ObjectAnimator(target,property);  anim.setObjectValues(values);  anim.setEvaluator(evaluator);  return anim;}  }
class C{  public static double staticNextDouble(double mean,double gamma,double cut){synchronized (shared) {    return shared.nextDouble(mean,gamma,cut);  }}  }
class C{  public UserProperty(String key,String value){  this.key=key;  this.value=value;}  }
class C{  public SQLTransientException(){}  }
class C{  @SuppressWarnings("PMD.DoNotCallSystemExit") public static void main(String[] args) throws FileNotFoundException {  ReturnValue returnValue;  try {    LoggerContext loggerContext=Configurator.initialize(null,ToolsCommonConstants.LOG4J_CONFIG_LOCATION);    if (loggerContext == null) {      throw new IllegalArgumentException("Invalid configuration found at resource location: \"" + ToolsCommonConstants.LOG4J_CONFIG_LOCATION + "\".");    }    UploaderApp uploaderApp=new UploaderApp();    returnValue=uploaderApp.go(args);  } catch (  Exception e) {    LOGGER.error("Error running herd uploader. {}",e.toString(),e);    returnValue=ReturnValue.FAILURE;  }  System.exit(returnValue.getReturnCode());}  }
class C{  public void mouseClicked(MouseEvent e){  if (SwingUtilities.isRightMouseButton(e))   adaptee.popupMenu.show((Component)e.getSource(),e.getX(),e.getY());}  }
class C{  public static Bitmap scaleImage(Bitmap src,float scaleWidth,float scaleHeight){  if (src == null) {    return null;  }  Matrix matrix=new Matrix();  matrix.postScale(scaleWidth,scaleHeight);  return Bitmap.createBitmap(src,0,0,src.getWidth(),src.getHeight(),matrix,true);}  }
class C{  public void add(String data,boolean obscure){  if (obscure) {    obscuredIndexes.put(new Integer(tagData.size()),new Boolean(true));  }  tagData.addElement(data);}  }
class C{  private void initialize(){  this.setName(Constant.messages.getString("httpsessions.options.title"));  this.setLayout(new GridBagLayout());  GridBagConstraints gbc=new GridBagConstraints();  gbc.gridx=0;  gbc.weightx=1.0;  gbc.anchor=GridBagConstraints.LINE_START;  gbc.fill=GridBagConstraints.BOTH;  JLabel tokenNamesLabel=new JLabel();  tokenNamesLabel.setText(Constant.messages.getString("httpsessions.options.label.tokens"));  this.add(tokenNamesLabel,gbc);  tokensOptionsPanel=new HttpSessionTokensMultipleOptionsPanel(getDefaultTokensModel());  gbc.weighty=1.0;  this.add(tokensOptionsPanel,gbc);  gbc.weighty=0.0;  gbc.insets=new Insets(10,2,2,2);  this.add(getChkProxyOnly(),gbc);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void executeChildTemplates(ElemTemplateElement elem,boolean shouldAddAttrs) throws TransformerException {  ElemTemplateElement t=elem.getFirstChildElem();  if (null == t)   return;  if (elem.hasTextLitOnly() && m_optimizer) {    char[] chars=((ElemTextLiteral)t).getChars();    try {      this.pushElemTemplateElement(t);      m_serializationHandler.characters(chars,0,chars.length);    } catch (    SAXException se) {      throw new TransformerException(se);    } finally {      this.popElemTemplateElement();    }    return;  }  XPathContext xctxt=m_xcontext;  xctxt.pushSAXLocatorNull();  int currentTemplateElementsTop=m_currentTemplateElements.size();  m_currentTemplateElements.push(null);  try {    for (; t != null; t=t.getNextSiblingElem()) {      if (!shouldAddAttrs && t.getXSLToken() == Constants.ELEMNAME_ATTRIBUTE)       continue;      xctxt.setSAXLocator(t);      m_currentTemplateElements.setElementAt(t,currentTemplateElementsTop);      t.execute(this);    }  } catch (  RuntimeException re) {    TransformerException te=new TransformerException(re);    te.setLocator(t);    throw te;  } finally {    m_currentTemplateElements.pop();    xctxt.popSAXLocator();  }}  }
class C{  public void printOptions(){  VM.sysWriteln("Current value of GC options");  Option o=getFirst();  while (o != null) {    if (o.getType() == Option.BOOLEAN_OPTION) {      String key=o.getKey();      VM.sysWrite("\t");      VM.sysWrite(key);      for (int c=key.length(); c < 31; c++) {        VM.sysWrite(" ");      }      VM.sysWrite(" = ");      logValue(o,false);      VM.sysWriteln();    }    o=o.getNext();  }  o=getFirst();  while (o != null) {    if (o.getType() != Option.BOOLEAN_OPTION && o.getType() != Option.ENUM_OPTION) {      String key=o.getKey();      VM.sysWrite("\t");      VM.sysWrite(key);      for (int c=key.length(); c < 31; c++) {        VM.sysWrite(" ");      }      VM.sysWrite(" = ");      logValue(o,false);      VM.sysWriteln();    }    o=o.getNext();  }  o=getFirst();  while (o != null) {    if (o.getType() == Option.ENUM_OPTION) {      String key=o.getKey();      VM.sysWrite("\t");      VM.sysWrite(key);      for (int c=key.length(); c < 31; c++) {        VM.sysWrite(" ");      }      VM.sysWrite(" = ");      logValue(o,false);      VM.sysWriteln();    }    o=o.getNext();  }}  }
class C{  private void updateFileSystem(VNXeApiClient apiClient,DbClient dbClient,FileShare fsObj){  SMBShareMap shareMap=fsObj.getSMBFileShares();  if (shareMap == null) {    return;  }  shareMap.remove(smbShare.getName());  deleteShareACLsFromDB(dbClient,fsObj);  dbClient.persistObject(fsObj);}  }
class C{  private void prepareProperyDetailsInfo(BasicProperty basicProperty,ViewPropertyDetails viewPropertyDetails){  String ownerAddress=StringUtils.EMPTY;  Property property=basicProperty.getProperty();  viewPropertyDetails.setOldAssessmentNumber(basicProperty.getOldMuncipalNum());  viewPropertyDetails.setAssessmentNumber(basicProperty.getUpicNo());  viewPropertyDetails.setPropertyTypeMaster(basicProperty.getProperty().getPropertyDetail().getPropertyTypeMaster().getType());  PropertyID propertyID=basicProperty.getPropertyID();  if (property != null) {    PropertyDetail propertyDetail=property.getPropertyDetail();    viewPropertyDetails.setExemption(property.getTaxExemptedReason() == null ? NOT_AVAILABLE : property.getTaxExemptedReason().getName());    Ptdemand ptDemand=ptDemandDAO.getNonHistoryCurrDmdForProperty(property);    if (ptDemand != null) {      if (ptDemand.getDmdCalculations() != null && ptDemand.getDmdCalculations().getAlv() != null)       viewPropertyDetails.setArv(ptDemand.getDmdCalculations().getAlv()); else       viewPropertyDetails.setArv(BigDecimal.ZERO);    }    populatePropertyDetails(basicProperty,viewPropertyDetails,propertyID,propertyDetail);  }  populateOwnerAndAddressDetails(basicProperty,viewPropertyDetails,ownerAddress,propertyID);}  }
class C{  public void removeAddressListener(AddressListener l){  if (listeners == null) {    return;  }  if (listeners.contains(l)) {    listeners.remove(l);  }}  }
class C{  private void validateBusinessObjectDefinitionColumnKey(BusinessObjectDefinitionColumnKey key) throws IllegalArgumentException {  Assert.notNull(key,"A business object data attribute key must be specified.");  key.setNamespace(alternateKeyHelper.validateStringParameter("namespace",key.getNamespace()));  key.setBusinessObjectDefinitionName(alternateKeyHelper.validateStringParameter("business object definition name",key.getBusinessObjectDefinitionName()));  key.setBusinessObjectDefinitionColumnName(alternateKeyHelper.validateStringParameter("business object definition column name",key.getBusinessObjectDefinitionColumnName()));}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (newRecord || is_ValueChanged(COLUMNNAME_AD_Org_ID) || is_ValueChanged(COLUMNNAME_M_Warehouse_ID)) {    MWarehouse wh=MWarehouse.get(getCtx(),getM_Warehouse_ID());    if (wh.getAD_Org_ID() != getAD_Org_ID()) {      throw new WarehouseInvalidForOrgException(wh.getName(),MOrg.get(getCtx(),getAD_Org_ID()).getName());    }  }  if (newRecord || is_ValueChanged(COLUMNNAME_DatePromised)) {    if (!isValid(getDatePromised()))     throw new AdempiereException("@DatePromised@ @Invalid@");  }  return true;}  }
class C{  public double surfaceDistanceBetween(Vec2D p,Vec2D q){  double t1=Math.sin(p.y) * Math.sin(q.y);  double t2=Math.cos(p.y) * Math.cos(q.y);  double t3=Math.cos(p.x - q.x);  double t4=t2 * t3;  double t5=t1 + t4;  double dist=Math.atan(-t5 / Math.sqrt(-t5 * t5 + 1)) + 2 * Math.atan(1);  if (Double.isNaN(dist)) {    dist=0;  } else {    dist*=radius;  }  return dist;}  }
class C{  private Geometry computeResultPrecision(Geometry result){  if (returnToOriginalPrecision)   cbr.addCommonBits(result);  return result;}  }
class C{  public void reset(){  remove(OAUTH_NONCE_KEY,baseParameters);  remove(OAUTH_TIMESTAMP_KEY,baseParameters);  remove(OAUTH_VERIFIER_KEY,baseParameters);  remove(OAUTH_SIGNATURE_KEY,extraParameters);}  }
class C{  public boolean checkPendingDeletions() throws IOException {  deletePendingFiles();  return pendingDeletes.isEmpty() == false;}  }
class C{  public Long addNewUserWithExternalType(String SID,String username,String userpass,String lastname,String firstname,String email,String additionalname,String street,String zip,String fax,long states_id,String town,long language_id,String jNameTimeZone,String externalUserId,String externalUserType) throws AxisFault {  return getUserServiceProxy().addNewUserWithExternalType(SID,username,userpass,lastname,firstname,email,additionalname,street,zip,fax,states_id,town,language_id,jNameTimeZone,externalUserId,externalUserType);}  }
class C{  public GitHubPullRequest createPullRequest(GHPullRequest ghPullRequest) throws IOException {  GitHubPullRequest dtoPullRequest=DtoFactory.getInstance().createDto(GitHubPullRequest.class);  dtoPullRequest.setId(String.valueOf(ghPullRequest.getId()));  dtoPullRequest.setUrl(String.valueOf(ghPullRequest.getUrl()));  dtoPullRequest.setHtmlUrl(String.valueOf(ghPullRequest.getHtmlUrl()));  dtoPullRequest.setNumber(String.valueOf(ghPullRequest.getNumber()));  dtoPullRequest.setState(ghPullRequest.getState().toString());  dtoPullRequest.setHead(createPullRequestHead(ghPullRequest.getHead()));  dtoPullRequest.setMerged(ghPullRequest.isMerged());  dtoPullRequest.setBody(ghPullRequest.getBody());  dtoPullRequest.setTitle(ghPullRequest.getTitle());  if (ghPullRequest.getMergedBy() != null) {    dtoPullRequest.setMergedBy(createUser(ghPullRequest.getMergedBy()));  }  if (ghPullRequest.getMergeable() != null) {    dtoPullRequest.setMergeable(ghPullRequest.getMergeable());  }  return dtoPullRequest;}  }
class C{  public static void TODO() throws OptimizingCompilerException {  throw new OptimizingCompilerException("Unsupported function in IA32 port");}  }
class C{  public void testEditTrack(){  EndToEndTestUtils.deleteAllTracks();  EndToEndTestUtils.createSimpleTrack(1,false);  EndToEndTestUtils.findMenuItem(trackListActivity.getString(R.string.menu_edit),true);  EndToEndTestUtils.rotateCurrentActivity();  EndToEndTestUtils.SOLO.waitForText(trackListActivity.getString(R.string.generic_save));  String newName=EndToEndTestUtils.TRACK_NAME_PREFIX + "_new" + System.currentTimeMillis();  String newActivityType=EndToEndTestUtils.activityType;  String newDescription="new_description_" + newName;  sendKeys(KeyEvent.KEYCODE_DEL);  EndToEndTestUtils.enterTextAvoidSoftKeyBoard(0,newName);  EndToEndTestUtils.SOLO.clearEditText(1);  EndToEndTestUtils.enterTextAvoidSoftKeyBoard(1,newActivityType);  EndToEndTestUtils.SOLO.clearEditText(2);  EndToEndTestUtils.enterTextAvoidSoftKeyBoard(2,newDescription);  assertTrue(EndToEndTestUtils.SOLO.searchText(newActivityType));  EndToEndTestUtils.SOLO.clickOnView(EndToEndTestUtils.SOLO.getCurrentActivity().findViewById(R.id.track_edit_activity_type_icon));  EndToEndTestUtils.SOLO.waitForText(trackListActivity.getString(R.string.track_edit_activity_type_hint));  int walkingActivityTypeIndex=1;  EndToEndTestUtils.SOLO.clickOnView(EndToEndTestUtils.SOLO.getImage(walkingActivityTypeIndex));  EndToEndTestUtils.SOLO.clickOnButton(trackListActivity.getString(R.string.generic_ok));  assertFalse(EndToEndTestUtils.SOLO.searchText(newActivityType));  assertTrue(EndToEndTestUtils.SOLO.searchText(trackListActivity.getString(R.string.activity_type_walking)));  EndToEndTestUtils.SOLO.clickOnButton(trackListActivity.getString(R.string.generic_save));  instrumentation.waitForIdleSync();  EndToEndTestUtils.SOLO.goBack();  instrumentation.waitForIdleSync();  assertTrue(EndToEndTestUtils.SOLO.searchText(newName));  assertTrue(EndToEndTestUtils.SOLO.searchText(newDescription));}  }
class C{  public static String baseUriOf(final HttpServletRequest request){  final StringBuffer requestUrl=request.getRequestURL();  return requestUrl != null ? requestUrl.substring(0,requestUrl.indexOf(request.getServletPath())) : "";}  }
class C{  @Override public void animateConfirmationView(){  Drawable drawable=mConfirmationView.getDrawable();  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {    if (drawable instanceof Animatable)     ((Animatable)drawable).start();  } else {    mConfirmationView.startAnimation(AnimationUtils.loadAnimation(this,R.anim.appear_rotate));  }}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  if (getName() != null) {    buffer.append(getName());  }  buffer.append("\n");  if (getEnclosingTypeName() != null) {    buffer.append(getEnclosingTypeName());  }  buffer.append("\n");  if (getSourceName() != null) {    buffer.append(getSourceName());  }  return buffer.toString();}  }
class C{  public UserAggregate findAggregate(String name){  return aggregates.get(name);}  }
class C{  public Cat(){  this(null);}  }
class C{  public void processAttributes(java.io.Writer writer,int nAttrs) throws IOException, SAXException {  String encoding=getEncoding();  for (int i=0; i < nAttrs; i++) {    final String name=m_attributes.getQName(i);    final String value=m_attributes.getValue(i);    writer.write(' ');    writer.write(name);    writer.write("=\"");    writeAttrString(writer,value,encoding);    writer.write('\"');  }}  }
class C{  private void combos(){  ObservableList<String> tipo=FXCollections.observableArrayList("Visitante","Estrangeiro","Personalidade","Pesquisador");  Combo.popular(cbTipo,tipo);}  }
class C{  public void prepareCommit(String transactionName){  throw DbException.getUnsupportedException("Does not support two-phase commit.");}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public XmlFriendlyNameCoder(){  this("_-","__");}  }
class C{  public void nextToken(){  previousLine=line;  previousColumn=column;  while (pos < matcher.regionStart()) {    if (text.charAt(pos) == '\n') {      ++line;      column=0;    } else {      ++column;    }    ++pos;  }  if (matcher.regionStart() == matcher.regionEnd()) {    currentToken="";  } else {    matcher.usePattern(TOKEN);    if (matcher.lookingAt()) {      currentToken=matcher.group();      matcher.region(matcher.end(),matcher.regionEnd());    } else {      currentToken=String.valueOf(text.charAt(pos));      matcher.region(pos + 1,matcher.regionEnd());    }    skipWhitespace();  }}  }
class C{  private static void drawTopTab(int x,int y,int w,int h,Graphics2D g2,ColorUIResource color){  double rTop=RapidLookAndFeel.CORNER_TAB_RADIUS * 0.67;  g2.setColor(color);  g2.fill(createTopTabShape(x + 1,y + 1,w - 1,h,rTop,true));  g2.setColor(Colors.TAB_BORDER);  g2.draw(createTopTabShape(x,y,w - 1,h,rTop,false));}  }
class C{  public static TransactionID createNewRFC3489TransactionID(){  TransactionID tid=new TransactionID(true);  generateTransactionID(tid,16);  return tid;}  }
class C{  private void loadHintClicked(){  HintRequest hintRequest=new HintRequest.Builder().setHintPickerConfig(new CredentialPickerConfig.Builder().setShowCancelButton(true).build()).setEmailAddressIdentifierSupported(true).setAccountTypes(IdentityProviders.GOOGLE).build();  PendingIntent intent=Auth.CredentialsApi.getHintPickerIntent(mCredentialsApiClient,hintRequest);  try {    startIntentSenderForResult(intent.getIntentSender(),RC_HINT,null,0,0,0);    mIsResolving=true;  } catch (  IntentSender.SendIntentException e) {    Log.e(TAG,"Could not start hint picker Intent",e);    mIsResolving=false;  }}  }
class C{  @Override public String toString(){  if (this.gemfireVersion == null) {    return this.productName + " " + this.name;  } else {    return this.productName + " " + this.name+ '['+ this.gemfireVersion.toString()+ ']';  }}  }
class C{  public UF10(int numberOfVariables){  super(numberOfVariables,3);}  }
class C{  public T caseEndpoint(Endpoint object){  return null;}  }
class C{  public IgniteReflectionFactory(Class<? extends T> cls){  this(cls,false);}  }
class C{  SegmentServiceImpl(SegmentKelpBuilder builder){  _path=builder.path();  _ampManager=builder.ampManager();  Objects.requireNonNull(_path);  ArrayList<Integer> segmentSizes=builder.getSegmentSizes();  if (segmentSizes.size() == 0) {    segmentSizes=new ArrayList<>();    segmentSizes.add(1024 * 1024);  }  Collections.sort(segmentSizes);  SegmentMeta[] segmentMeta=new SegmentMeta[segmentSizes.size()];  for (int i=0; i < segmentMeta.length; i++) {    segmentMeta[i]=new SegmentMeta(segmentSizes.get(i));  }  _compressor=builder.compressor();  Objects.requireNonNull(_compressor);  try {    if (Files.exists(_path) && initImpl()) {    } else     if (builder.isCreate()) {      Files.deleteIfExists(_path);      create(segmentMeta,builder.ampManager());    } else {      throw new IllegalStateException(L.l("load failed but create forbidden"));    }  } catch (  RuntimeException e) {    throw e;  }catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public YIntervalSeries(Comparable key,boolean autoSort,boolean allowDuplicateXValues){  super(key,autoSort,allowDuplicateXValues);}  }
class C{  @Override public void run(){  amIActive=true;  String outputHeader=null;  String inputFilesString=null;  String outputFileSuffix="_HistoEqual";  WhiteboxRaster image=null;  WhiteboxRaster output=null;  int row, col;  int rows=0;  int cols=0;  double z;  float progress=0;  long numCells=0;  int i=0;  String[] imageFiles;  int numImages=0;  double noData=-32768;  int numBins=1024;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  outputFileSuffix=args[1];  numBins=Integer.parseInt(args[2]);  if ((inputFilesString == null) || (outputFileSuffix == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  try {    for (i=0; i < numImages; i++) {      image=new WhiteboxRaster(imageFiles[i],"r");      noData=image.getNoDataValue();      rows=image.getNumberRows();      cols=image.getNumberColumns();      outputHeader=imageFiles[i].replace(".dep",outputFileSuffix + ".dep");      output=new WhiteboxRaster(outputHeader,"rw",imageFiles[i],WhiteboxRaster.DataType.INTEGER,noData);      output.setPreferredPalette(image.getPreferredPalette());      double minValue=image.getMinimumValue();      double maxValue=image.getMaximumValue();      double binSize=(maxValue - minValue) / numBins;      long[] histogram=new long[numBins];      int binNum;      int numBinsLessOne=numBins - 1;      double[] data;      if (image.getDataScale() != WhiteboxRaster.DataScale.RGB) {        updateProgress("Loop 1 of 2:",0);        for (row=0; row < rows; row++) {          data=image.getRowValues(row);          for (col=0; col < cols; col++) {            if (data[col] != noData) {              numCells++;              binNum=(int)((data[col] - minValue) / binSize);              if (binNum > numBinsLessOne) {                binNum=numBinsLessOne;              }              histogram[binNum]++;            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress("Loop 1 of 2:",(int)progress);        }        double[] cdf=new double[numBins];        cdf[0]=histogram[0];        for (int j=1; j < numBins; j++) {          cdf[j]=cdf[j - 1] + histogram[j];        }        histogram=null;        updateProgress("Loop 2 of 2:",0);        for (row=0; row < rows; row++) {          data=image.getRowValues(row);          for (col=0; col < cols; col++) {            if (data[col] != noData) {              binNum=(int)((data[col] - minValue) / binSize);              if (binNum > numBinsLessOne) {                binNum=numBinsLessOne;              }              z=Math.round((cdf[binNum] - cdf[0]) / (numCells - cdf[0]) * numBinsLessOne);              output.setValue(row,col,z);            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress("Loop 2 of 2:",(int)progress);        }      } else {        output=new WhiteboxRaster(outputHeader,"rw",imageFiles[i],WhiteboxRaster.DataType.FLOAT,noData);        output.setPreferredPalette(image.getPreferredPalette());        output.setDataScale(WhiteboxRaster.DataScale.RGB);        double h, s, v;        int a, r, g, b;        minValue=99999999;        maxValue=-99999999;        float[] hsbvals=new float[3];        float[] rgbvals=new float[3];        updateProgress("Loop 1 of 3:",0);        for (row=0; row < rows; row++) {          data=image.getRowValues(row);          for (col=0; col < cols; col++) {            if (data[col] != noData) {              r=(int)data[col] & 0xFF;              g=((int)data[col] >> 8) & 0xFF;              b=((int)data[col] >> 16) & 0xFF;              Color.RGBtoHSB(r,g,b,hsbvals);              v=hsbvals[2];              if (v < minValue) {                minValue=v;              }              if (v > maxValue) {                maxValue=v;              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress("Loop 1 of 3:",(int)progress);        }        binSize=(maxValue - minValue) / numBins;        histogram=new long[numBins];        numBinsLessOne=numBins - 1;        updateProgress("Loop 2 of 3:",0);        for (row=0; row < rows; row++) {          data=image.getRowValues(row);          for (col=0; col < cols; col++) {            if (data[col] != noData) {              r=(int)data[col] & 0xFF;              g=((int)data[col] >> 8) & 0xFF;              b=((int)data[col] >> 16) & 0xFF;              Color.RGBtoHSB(r,g,b,hsbvals);              v=hsbvals[2];              numCells++;              binNum=(int)((v - minValue) / binSize);              if (binNum > numBinsLessOne) {                binNum=numBinsLessOne;              }              histogram[binNum]++;            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress("Loop 2 of 3:",(int)progress);        }        double[] cdf=new double[numBins];        cdf[0]=histogram[0];        for (int j=1; j < numBins; j++) {          cdf[j]=cdf[j - 1] + histogram[j];        }        histogram=null;        updateProgress("Loop 3 of 3:",0);        float val=0;        int rgb=0;        for (row=0; row < rows; row++) {          data=image.getRowValues(row);          for (col=0; col < cols; col++) {            if (data[col] != noData) {              z=data[col];              r=(int)data[col] & 0xFF;              g=((int)data[col] >> 8) & 0xFF;              b=((int)data[col] >> 16) & 0xFF;              a=((int)data[col] >> 24) & 0xFF;              hsbvals=Color.RGBtoHSB(r,g,b,null);              v=hsbvals[2];              binNum=(int)((v - minValue) / binSize);              if (binNum > numBinsLessOne) {                binNum=numBinsLessOne;              }              val=(float)((cdf[binNum] - cdf[0]) / (numCells - cdf[0]));              rgb=Color.HSBtoRGB(hsbvals[0],hsbvals[1],val);              r=(rgb >> 16) & 0xFF;              g=(rgb >> 8) & 0xFF;              b=rgb & 0xFF;              z=(double)((a << 24) | (b << 16) | (g << 8)| r);              output.setValue(row,col,z);            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress("Loop 3 of 3:",(int)progress);        }      }      output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      output.addMetadataEntry("Created on " + new Date());      image.close();      output.close();      returnData(outputHeader);    }  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  private void addBOMLine(MPPProductBOMLine line,BigDecimal qty){  log.fine("In addBOMLine");  log.fine(line.toString());  String bomType=line.getComponentType();  if (bomType == null)   bomType=MProductBOM.BOMTYPE_StandardPart;  BigDecimal lineQty=new BigDecimal(0);  MProduct product=getProductFromMPPProductBOMLine(line);  if (product == null)   return;  addDisplay(line.getM_Product_ID(),product.getM_Product_ID(),bomType,product.getName(),lineQty,line.getPP_Product_BOM_ID(),line.getFeature(),line.get_ID());}  }
class C{  @Override public boolean autoCommitFailureClosesAllResultSets(){  debugCodeCall("autoCommitFailureClosesAllResultSets");  return false;}  }
class C{  public static boolean readModPoll(int register,int type,String expectedOutput){  return readModPoll(register,type,1,expectedOutput);}  }
class C{  public ResultSet executeQuery(PreparedStatement stmt){  ResultSet rs=null;  if (s_dbEngine.isDBError())   return null;  if (stmt == null)   return null;  String sqlCommand=stmt.toString();  try {    s_logger.log(Level.FINEST,sqlCommand);    rs=stmt.executeQuery();  } catch (  SQLException e) {    s_dbEngine.setTransactionErrors(1);    s_logger.log(Level.SEVERE,this.getClass().getSimpleName(),Thread.currentThread().getStackTrace()[2].getMethodName(),"executeQueryPreparedStatementError",new Object[]{sqlCommand,e.getMessage()});    rs=null;  }  return rs;}  }
class C{  private Method findGetter(Method[] methods,String setterName,Class arg){  String getterName="get" + setterName.substring(3);  for (int i=0; i < methods.length; i++) {    Method method=methods[i];    if (!method.getName().equals(getterName))     continue;    if (!method.getReturnType().equals(arg))     continue;    Class[] params=method.getParameterTypes();    if (params.length == 0)     return method;  }  return null;}  }
class C{  public void addPrimaryKeyField(String fieldName,Class type,int fieldSize){  FieldDefinition fieldDef=new FieldDefinition(fieldName,type,fieldSize);  fieldDef.setIsPrimaryKey(true);  addField(fieldDef);}  }
class C{  public CCloseDatabaseAction(final JComponent parent,final IDatabase database){  super("Disconnect from database");  m_parent=Preconditions.checkNotNull(parent,"IE01855: Parent argument can't be null");  m_database=Preconditions.checkNotNull(database,"IE01856: Database argument can't be null");  putValue(ACCELERATOR_KEY,HotKeys.CLOSE_DATABASE_HK.getKeyStroke());  putValue(MNEMONIC_KEY,(int)"HK_MENU_CLOSE_DATABASE".charAt(0));}  }
class C{  public void addChoice(S source,List<ChoiceData<S,E>> choices){  this.choices.put(source,choices);}  }
class C{  public String toString(){  try {    return this.toString(0);  } catch (  Exception e) {    return null;  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static boolean isMainThread(){  return sIsMainThread.get();}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.UNIT_NAME;}  }
class C{  private static List<BlockNode> cleanSuccessors(BlockNode block){  List<BlockNode> sucList=block.getSuccessors();  if (sucList.isEmpty()) {    return sucList;  }  List<BlockNode> toRemove=new LinkedList<BlockNode>();  for (  BlockNode b : sucList) {    if (BlockUtils.isBlockMustBeCleared(b)) {      toRemove.add(b);    }  }  if (block.contains(AFlag.LOOP_END)) {    List<LoopInfo> loops=block.getAll(AType.LOOP);    for (    LoopInfo loop : loops) {      toRemove.add(loop.getStart());    }  }  IgnoreEdgeAttr ignoreEdgeAttr=block.get(AType.IGNORE_EDGE);  if (ignoreEdgeAttr != null) {    toRemove.addAll(ignoreEdgeAttr.getBlocks());  }  if (toRemove.isEmpty()) {    return sucList;  }  List<BlockNode> result=new ArrayList<BlockNode>(sucList);  result.removeAll(toRemove);  return result;}  }
class C{  public static Intent createEmailAttendeesIntent(Resources resources,String eventTitle,String body,List<String> toEmails,List<String> ccEmails,String ownerAccount){  List<String> toList=toEmails;  List<String> ccList=ccEmails;  if (toEmails.size() <= 0) {    if (ccEmails.size() <= 0) {      throw new IllegalArgumentException("Both toEmails and ccEmails are empty.");    }    toList=ccEmails;    ccList=null;  }  String subject=null;  if (eventTitle != null) {    subject=resources.getString(R.string.email_subject_prefix) + eventTitle;  }  Uri.Builder uriBuilder=new Uri.Builder();  uriBuilder.scheme("mailto");  if (toList.size() > 1) {    for (int i=1; i < toList.size(); i++) {      uriBuilder.appendQueryParameter("to",toList.get(i));    }  }  if (subject != null) {    uriBuilder.appendQueryParameter("subject",subject);  }  if (body != null) {    uriBuilder.appendQueryParameter("body",body);  }  if (ccList != null && ccList.size() > 0) {    for (    String email : ccList) {      uriBuilder.appendQueryParameter("cc",email);    }  }  String uri=uriBuilder.toString();  if (uri.startsWith("mailto:")) {    StringBuilder builder=new StringBuilder(uri);    builder.insert(7,Uri.encode(toList.get(0)));    uri=builder.toString();  }  Intent emailIntent=new Intent(android.content.Intent.ACTION_SENDTO,Uri.parse(uri));  emailIntent.putExtra("fromAccountString",ownerAccount);  if (body != null) {    emailIntent.putExtra(Intent.EXTRA_TEXT,body);  }  return Intent.createChooser(emailIntent,resources.getString(R.string.email_picker_label));}  }
class C{  public void registerTraveller(BusTravellerMovement traveller){  travellers.put(traveller.getID(),traveller);}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  if (zoneStrings == null) {    zoneStrings=TimeZoneNameUtility.getZoneStrings(locale);  }  stream.defaultWriteObject();}  }
class C{  private CompiledScript compileScriptIfRequired(final Script script){  CompiledScript compiledScript=script.getCompiledScript();  if (compiledScript != null)   return compiledScript;  final ScriptEngine engine=scriptEngineProvider.getScriptEngine(script.getType());  if (engine instanceof Compilable)   try {    compiledScript=((Compilable)engine).compile(script.getScript());    script.setCompiledScript(compiledScript);  } catch (  final ScriptException e) {    final String errMsg="Could not compile script " + script.getType() + ":"+ script.getName()+ ":"+ script.getScript();    LOG.error(errMsg,e);    throw new ApplicationRuntimeException(errMsg,e);  }  return compiledScript;}  }
class C{  public String readConfigName(SolrZkClient zkClient,String collection) throws KeeperException, InterruptedException {  if (collection == null) {    throw new IllegalArgumentException("collection must not be null");  }  String configName=null;  byte[] aliasData=zkClient.getData(ZkStateReader.ALIASES,null,null,true);  Aliases aliases=ClusterState.load(aliasData);  String alias=aliases.getCollectionAlias(collection);  if (alias != null) {    List<String> aliasList=StrUtils.splitSmart(alias,",",true);    if (aliasList.size() > 1) {      throw new IllegalArgumentException("collection cannot be an alias that maps to multiple collections");    }    collection=aliasList.get(0);  }  String path=ZkStateReader.COLLECTIONS_ZKNODE + "/" + collection;  if (LOG.isInfoEnabled()) {    LOG.info("Load collection config from:" + path);  }  byte[] data=zkClient.getData(path,null,null,true);  if (data != null) {    ZkNodeProps props=ZkNodeProps.load(data);    configName=props.getStr(ZkController.CONFIGNAME_PROP);  }  if (configName != null && !zkClient.exists(ZkController.CONFIGS_ZKNODE + "/" + configName,true)) {    LOG.error("Specified config does not exist in ZooKeeper:" + configName);    throw new IllegalArgumentException("Specified config does not exist in ZooKeeper:" + configName);  }  return configName;}  }
class C{  public <T>MappingIterator<T> readValues(InputStream src) throws IOException, JsonProcessingException {  JsonParser jp=_jsonFactory.createJsonParser(src);  if (_schema != null) {    jp.setSchema(_schema);  }  DeserializationContext ctxt=_createDeserializationContext(jp,_config);  return new MappingIterator<T>(_valueType,jp,ctxt,_findRootDeserializer(_config,_valueType),true,_valueToUpdate);}  }
class C{  public void connect(N nodeA,N nodeB) throws NullPointerException {  nodeLinks.get(nodeA).add(nodeB);  nodeLinks.get(nodeB).add(nodeA);}  }
class C{  public void invalidate(){  valid=false;}  }
class C{  public boolean isInWater(){  Material mat=getLocation().getBlock().getType();  return mat == Material.WATER || mat == Material.STATIONARY_WATER;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:47.528 -0500",hash_original_method="9FA101C66AEE3272C97FB43923C2AC9F",hash_generated_method="E639B18E2655E8BD83F1660C454D28ED") public final Message obtainMessage(int what,int arg1,int arg2,Object obj){  if (mSmHandler == null)   return null;  return Message.obtain(mSmHandler,what,arg1,arg2,obj);}  }
class C{  public Period minusSeconds(int seconds){  return plusSeconds(-seconds);}  }
class C{  public Tree importNextTree() throws IOException, ImportException {  if (!hasTree()) {    isReadingTreesBlock=false;    return null;  }  Tree tree=nextTree;  nextTree=null;  return tree;}  }
class C{  protected JobState(int value){  super(value);}  }
class C{  @SuppressWarnings("unchecked") private void askForUserConfirmation(){  Platform.runLater(null);  ItunesParserLogger itunesLogger=new ItunesParserLogger();  ItunesLibrary itunesLibrary=ItunesLibraryParser.parseLibrary(itunesLibraryXmlPath,itunesLogger);  itunesTracks=itunesLibrary.getTracks();  totalItunesTracks=itunesTracks.size();  playlistsAlertText="";  if (importPlaylists) {    itunesPlaylists=(List<ItunesPlaylist>)itunesLibrary.getPlaylists();    itunesPlaylists=itunesPlaylists.stream().filter(null).collect(Collectors.toList());    totalTracks=itunesPlaylists.size();    playlistsAlertText+="and " + Integer.toString(totalTracks) + " playlists ";  }  Platform.runLater(null);}  }
class C{  public Matrix(int n,int m) throws NegativeArraySizeException {  if (n <= 0 || m <= 0)   throw new NegativeArraySizeException("Requested matrix size: " + n + " by "+ m);  components=new double[n][m];  clear();}  }
class C{  private void showSearchView(){  if (mSearchView != null && !oldQuery.isEmpty()) {    mSearchView.setIconified(false);    mSearchView.setQuery(oldQuery,false);    showSearchView=false;  }}  }
class C{  public ParsableBitArray(){}  }
class C{  AbstractMBSearchRunner(DataModel source,Parameters params){  super(castData(source));  if (source == null) {    throw new NullPointerException("The source data was null.");  }  if (params == null) {    throw new NullPointerException("Search params were null.");  }  this.params=params;  this.source=(DataSet)source;}  }
class C{  public boolean isCanceled(){  return cancelled;}  }
class C{  public void removeFormato(DefFormatoFecha formato){  formatos.remove(formato);}  }
class C{  private VisorCachesSwapBackupsJob(Set<String> names,boolean debug){  super(names,debug);}  }
class C{  static boolean chunkMap(InternalDistributedMember receiver,BucketRegion map,int CHUNK_SIZE_IN_BYTES,boolean includeValues,ObjectIntProcedure proc) throws IOException {  Iterator it=map.entrySet().iterator();  boolean keepGoing=true;  boolean sentLastChunk=false;  final HeapDataOutputStream mos=new HeapDataOutputStream(InitialImageOperation.CHUNK_SIZE_IN_BYTES + 2048,receiver.getVersionObject());  do {    mos.reset();    int avgItemSize=0;    int itemCount=0;    while ((mos.size() + avgItemSize) < InitialImageOperation.CHUNK_SIZE_IN_BYTES && it.hasNext()) {      LocalRegion.NonTXEntry entry=(LocalRegion.NonTXEntry)it.next();      RegionEntry re=entry.getRegionEntry();synchronized (re) {        Object value=re._getValueRetain(map,true);        try {          if (value == null) {            value=re.getSerializedValueOnDisk((LocalRegion)entry.getRegion());          }          if (!Token.isRemoved(value)) {            DataSerializer.writeObject(re.getKey(),mos);            if (Token.isInvalid(value)) {              value=null;            }            VersionStamp stamp=re.getVersionStamp();            VersionTag versionTag=stamp != null ? stamp.asVersionTag() : null;            if (versionTag != null) {              versionTag.replaceNullIDs(map.getVersionMember());            }            DataSerializer.writeObject(value,mos);            DataSerializer.writeObject(versionTag,mos);            itemCount++;            avgItemSize=mos.size() / itemCount;          }        }  finally {          OffHeapHelper.release(value);        }      }    }    DataSerializer.writeObject((Object)null,mos);    int lastMsg=it.hasNext() ? 0 : 1;    keepGoing=proc.executeWith(mos,lastMsg);    sentLastChunk=lastMsg == 1 && keepGoing;  } while (keepGoing && it.hasNext());  return sentLastChunk;}  }
class C{  static public void assertEquals(String expected,String actual){  assertEquals(null,expected,actual);}  }
class C{  public RegexFileFilter(Pattern pattern){  if (pattern == null) {    throw new IllegalArgumentException("Pattern is missing");  }  this.pattern=pattern;}  }
class C{  public void shuffleFromTo(int from,int to){  if (size == 0) {    return;  }  checkRangeFromTo(from,to,size);  cern.jet.random.Uniform gen=new cern.jet.random.Uniform(new cern.jet.random.engine.DRand(new java.util.Date()));  byte tmpElement;  byte[] theElements=elements;  int random;  for (int i=from; i < to; i++) {    random=gen.nextIntFromTo(i,to);    tmpElement=theElements[random];    theElements[random]=theElements[i];    theElements[i]=tmpElement;  }}  }
class C{  public FileImportError[] importFileByInternalUserId(String SID,Long internalUserId,Long externalFileId,String externalType,Long room_id,boolean isOwner,String path,Long parentFolderId,String fileSystemName) throws AxisFault {  try {    Long users_id=sessionManagement.checkSession(SID);    Long User_level=userManagement.getUserLevelByID(users_id);    if (authLevelManagement.checkWebServiceLevel(User_level)) {      String current_dir=getServletContext().getRealPath("/");      URL url=new URL(path);      URLConnection uc=url.openConnection();      InputStream inputstream=new BufferedInputStream(uc.getInputStream());      Users internalUser=userManagement.getUserById(internalUserId);      LinkedHashMap<String,Object> hs=new LinkedHashMap<String,Object>();      hs.put("user",internalUser);      HashMap<String,HashMap<String,String>> returnError=fileProcessor.processFile(internalUser.getUser_id(),room_id,isOwner,inputstream,parentFolderId,fileSystemName,current_dir,hs,externalFileId,externalType);      HashMap<String,String> returnAttributes=returnError.get("returnAttributes");      hs.put("message","library");      hs.put("action","newFile");      hs.put("fileExplorerItem",fileExplorerItemDao.getFileExplorerItemsById(Long.parseLong(returnAttributes.get("fileExplorerItemId").toString())));      hs.put("error",returnError);      hs.put("fileName",returnAttributes.get("completeName"));      FileImportError[] fileImportErrors=new FileImportError[returnError.size()];      int i=0;      for (Iterator<String> iter=returnError.keySet().iterator(); iter.hasNext(); ) {        HashMap<String,String> returnAttribute=returnError.get(iter.next());        fileImportErrors[i]=new FileImportError();        fileImportErrors[i].setCommand((returnAttribute.get("command") != null) ? returnAttribute.get("command").toString() : "");        fileImportErrors[i].setError((returnAttribute.get("error") != null) ? returnAttribute.get("error").toString() : "");        fileImportErrors[i].setExitValue((returnAttribute.get("exitValue") != null) ? Integer.valueOf(returnAttribute.get("exitValue").toString()).intValue() : 0);        fileImportErrors[i].setProcess((returnAttribute.get("process") != null) ? returnAttribute.get("process").toString() : "");        i++;      }      return fileImportErrors;    }  } catch (  Exception err) {    log.error("[importFile]",err);  }  return null;}  }
class C{  private static void writeTablePageHeader(ByteBuffer buffer){  buffer.put(PageTypes.TABLE_DEF);  buffer.put((byte)0x01);  buffer.put((byte)0);  buffer.put((byte)0);  buffer.putInt(0);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:22.267 -0500",hash_original_method="9E113DACC3DCFC949CC90EBD557A2ACA",hash_generated_method="834E7F118B11507315081F9FC7A5FE41") public AudioGroup(){  mStreams=new HashMap<AudioStream,Integer>();}  }
class C{  public void flushBase64() throws java.io.IOException {  if (position > 0) {    if (encode) {      out.write(encode3to4(b4,buffer,position,options));      position=0;    } else {      throw new java.io.IOException("Base64 input not properly padded.");    }  }}  }
class C{  public void invokeDynamic(String name,String desc,Handle bsm,Object... bsmArgs){  mv.visitInvokeDynamicInsn(name,desc,bsm,bsmArgs);}  }
class C{  private int handleX(String value,DoubleMetaphoneResult result,int index){  if (index == 0) {    result.append('S');    index++;  } else {    if (!((index == value.length() - 1) && (contains(value,index - 3,3,"IAU","EAU") || contains(value,index - 2,2,"AU","OU")))) {      result.append("KS");    }    index=contains(value,index + 1,1,"C","X") ? index + 2 : index + 1;  }  return index;}  }
class C{  public synchronized void unlisten(final Set<NotificationChannel> channelNames){  m_channels.removeAll(channelNames);}  }
class C{  public String labelsTipText(){  return "Comma-separated list of lables to add.";}  }
class C{  private static int gallopLeft(Comparable<Object> key,Object[] a,int base,int len,int hint){  assert len > 0 && hint >= 0 && hint < len;  int lastOfs=0;  int ofs=1;  if (key.compareTo(a[base + hint]) > 0) {    int maxOfs=len - hint;    while (ofs < maxOfs && key.compareTo(a[base + hint + ofs]) > 0) {      lastOfs=ofs;      ofs=(ofs << 1) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    lastOfs+=hint;    ofs+=hint;  } else {    final int maxOfs=hint + 1;    while (ofs < maxOfs && key.compareTo(a[base + hint - ofs]) <= 0) {      lastOfs=ofs;      ofs=(ofs << 1) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    int tmp=lastOfs;    lastOfs=hint - ofs;    ofs=hint - tmp;  }  assert -1 <= lastOfs && lastOfs < ofs && ofs <= len;  lastOfs++;  while (lastOfs < ofs) {    int m=lastOfs + ((ofs - lastOfs) >>> 1);    if (key.compareTo(a[base + m]) > 0)     lastOfs=m + 1; else     ofs=m;  }  assert lastOfs == ofs;  return ofs;}  }
class C{  void enforceCallingPermission(String permission,String func){  if (checkCallingPermission(permission) == PackageManager.PERMISSION_GRANTED) {    return;  }  String msg="Permission Denial: " + func + " from pid="+ Binder.getCallingPid()+ ", uid="+ Binder.getCallingUid()+ " requires "+ permission;  Slog.w(TAG,msg);  throw new SecurityException(msg);}  }
class C{  public static boolean createMovement(MAcctSchema as,int AD_Org_ID,int M_Product_ID,int M_AttributeSetInstance_ID,int M_MovementLine_ID,int M_CostElement_ID,BigDecimal Amt,BigDecimal Qty,boolean from,String Description,String trxName){  String sql="DELETE M_CostDetail " + "WHERE Processed='N' AND COALESCE(DeltaAmt,0)=0 AND COALESCE(DeltaQty,0)=0" + " AND M_MovementLine_ID=" + M_MovementLine_ID + " AND IsSOTrx="+ (from ? "'Y'" : "'N'")+ " AND C_AcctSchema_ID ="+ as.getC_AcctSchema_ID()+ " AND M_AttributeSetInstance_ID="+ M_AttributeSetInstance_ID;  int no=DB.executeUpdate(sql,trxName);  if (no != 0)   s_log.config("Deleted #" + no);  MCostDetail cd=get(as.getCtx(),"M_MovementLine_ID=? AND IsSOTrx=" + (from ? "'Y'" : "'N'"),M_MovementLine_ID,M_AttributeSetInstance_ID,as.getC_AcctSchema_ID(),trxName);  if (cd == null) {    cd=new MCostDetail(as,AD_Org_ID,M_Product_ID,M_AttributeSetInstance_ID,M_CostElement_ID,Amt,Qty,Description,trxName);    cd.setM_MovementLine_ID(M_MovementLine_ID);    cd.setIsSOTrx(from);  } else {    cd.setDeltaAmt(Amt.subtract(cd.getAmt()));    cd.setDeltaQty(Qty.subtract(cd.getQty()));    if (cd.isDelta()) {      cd.setProcessed(false);      cd.setAmt(Amt);      cd.setQty(Qty);    } else     return true;  }  boolean ok=cd.save();  if (ok && !cd.isProcessed()) {    MClient client=MClient.get(as.getCtx(),as.getAD_Client_ID());    if (client.isCostImmediate())     cd.process();  }  s_log.config("(" + ok + ") "+ cd);  return ok;}  }
class C{  boolean isMissingRequiredRoles(){  return this.isMissingRequiredRoles;}  }
class C{  @Override protected int makePressColor(){  return Color.parseColor("#88DDDDDD");}  }
class C{  private void adjustBCIndex(Instruction barrier){  NormalMethod source=barrier.position().method;  if (source.isForOsrSpecialization()) {    barrier.adjustBytecodeIndex(-source.getOsrPrologueLength());  }}  }
class C{  public AccessibleRelation[] toArray(){  if (relations == null) {    return new AccessibleRelation[0];  } else {    AccessibleRelation[] relationArray=new AccessibleRelation[relations.size()];    for (int i=0; i < relationArray.length; i++) {      relationArray[i]=(AccessibleRelation)relations.elementAt(i);    }    return relationArray;  }}  }
class C{  public void changeMips(double mips){  this.mips=mips;}  }
class C{  public RenderedImage createRendering(RenderContext rc){  AffineTransform usr2dev=rc.getTransform();  if (usr2dev == null) {    usr2dev=new AffineTransform();  }  Rectangle2D imageRect=getBounds2D();  Rectangle2D userAOI;  Shape aoi=rc.getAreaOfInterest();  if (aoi == null) {    aoi=imageRect;    userAOI=imageRect;  } else {    userAOI=aoi.getBounds2D();    if (!imageRect.intersects(userAOI))     return null;    Rectangle2D.intersect(imageRect,userAOI,userAOI);  }  final Rectangle renderedArea=usr2dev.createTransformedShape(userAOI).getBounds();  if ((renderedArea.width <= 0) || (renderedArea.height <= 0)) {    return null;  }  CachableRed cr;  cr=new FloodRed(renderedArea,getFloodPaint());  cr=new PadRed(cr,renderedArea,PadMode.ZERO_PAD,null);  return cr;}  }
class C{  public boolean schedule(Runnable task){  ClassLoader loader=Thread.currentThread().getContextClassLoader();  boolean isPriority=false;  boolean isQueue=true;  boolean isWake=true;  return scheduleImpl(task,loader,MAX_EXPIRE,isPriority,isQueue,isWake);}  }
class C{  public void addMeal(){}  }
class C{  public AccountHeaderBuilder withResetDrawerOnProfileListClick(boolean resetDrawerOnProfileListClick){  this.mResetDrawerOnProfileListClick=resetDrawerOnProfileListClick;  return this;}  }
class C{  protected void onKick(String channel,String kickerNick,String kickerLogin,String kickerHostname,String recipientNick,String reason){}  }
class C{  public ZipFile(String name) throws IOException {  this(new File(name),null);}  }
class C{  private void isLegal(List<? extends DataSet<?>> dataSets){  if (dataSets == null)   return;  for (int i=0; i < dataSets.size(); i++) {    if (dataSets.get(i).getYVals().size() > mXVals.size()) {      throw new IllegalArgumentException("One or more of the DataSet Entry arrays are longer than the x-values array of this ChartData object.");    }  }}  }
class C{  @Override public void registerTap(Tap tap){  if (mSymbolFilter != null) {    mSymbolFilter.registerTap(tap);  }switch (tap.getName()) {case INSTRUMENT_FILTER_OUTPUT:    FloatBufferTap filterOutput=(FloatBufferTap)tap;  mC4FMPreFilter.setListener(filterOutput);filterOutput.setListener(mSymbolFilter);break;case INSTRUMENT_C4FM_SYMBOL_FILTER_OUTPUT:FloatTap symbolTap=(FloatTap)tap;mSymbolFilter.setListener(symbolTap);symbolTap.setListener(mC4FMSlicer);break;case INSTRUMENT_C4FM_SLICER_OUTPUT:DibitTap slicerTap=(DibitTap)tap;if (mC4FMSlicer != null) {mC4FMSlicer.addListener(slicerTap);}break;default :break;}}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (equalsOp_1: ");  result.append(equalsOp_1);  result.append(')');  return result.toString();}  }
class C{  private Operand _prepareLongConstant(Operand op){  RegisterOperand t=gc.getTemps().makeTemp(op.getType());  appendInstruction(Move.create(LONG_MOVE,t,op));  return t.copyD2U();}  }
class C{  public int findEdgeIndex(Edge e){  for (int i=0; i < edges.size(); i++) {    if (((Edge)edges.get(i)).equals(e))     return i;  }  return -1;}  }
class C{  public List<Entity> extractCashtagsWithIndices(final String text){  if (text == null || text.length() == 0)   return Collections.emptyList();  if (text.indexOf('$') == -1)   return Collections.emptyList();  final ArrayList<Entity> extracted=new ArrayList<Entity>();  final Matcher matcher=Regex.VALID_CASHTAG.matcher(text);  while (matcher.find()) {    extracted.add(new Entity(matcher,Entity.Type.CASHTAG,Regex.VALID_CASHTAG_GROUP_CASHTAG_FULL));  }  return extracted;}  }
class C{  public void addPlugInView(String namespace,String name,String viewFactoryClass){  ConfigurationPlugInView configurationPlugInView=new ConfigurationPlugInView();  configurationPlugInView.setNamespace(namespace);  configurationPlugInView.setName(name);  configurationPlugInView.setFactoryClassName(viewFactoryClass);  plugInViews.add(configurationPlugInView);}  }
class C{  public static boolean putString(Context context,String key,String value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putString(key,value);  return editor.commit();}  }
class C{  public boolean isMultipleMarker(){  return multipleMarker;}  }
class C{  private CSettingsPanelBuilder(){}  }
class C{  protected List<SparseItemset> buildFrequentTwoItemsets(List<OneItemset> oneitems,final Relation<BitVector> relation,final int dim,final int needed,DBIDs ids,ArrayModifiableDBIDs survivors){  int f1=0;  long[] mask=BitsUtil.zero(dim);  for (  OneItemset supported : oneitems) {    BitsUtil.setI(mask,supported.item);    f1++;  }  if (LOG.isStatistics()) {    LOG.statistics(new LongStatistic(STAT + "2-items.candidates",f1 * (long)(f1 - 1)));  }  TLongIntHashMap map=new TLongIntHashMap((f1 * (f1 - 1)) >>> 1);  final long[] scratch=BitsUtil.zero(dim);  for (DBIDIter iditer=ids.iter(); iditer.valid(); iditer.advance()) {    BitsUtil.setI(scratch,mask);    relation.get(iditer).andOnto(scratch);    int lives=0;    for (int i=BitsUtil.nextSetBit(scratch,0); i >= 0; i=BitsUtil.nextSetBit(scratch,i + 1)) {      for (int j=BitsUtil.nextSetBit(scratch,i + 1); j >= 0; j=BitsUtil.nextSetBit(scratch,j + 1)) {        long key=(((long)i) << 32) | j;        map.put(key,1 + map.get(key));        ++lives;      }    }    if (lives > 2) {      survivors.add(iditer);    }  }  List<SparseItemset> frequent=new ArrayList<>(f1 * (int)Math.sqrt(f1));  for (TLongIntIterator iter=map.iterator(); iter.hasNext(); ) {    iter.advance();    if (iter.value() >= needed) {      int ii=(int)(iter.key() >>> 32);      int ij=(int)(iter.key() & -1L);      frequent.add(new SparseItemset(new int[]{ii,ij},iter.value()));    }  }  Collections.sort(frequent);  if (LOG.isStatistics()) {    LOG.statistics(new LongStatistic(STAT + "2-items.frequent",frequent.size()));  }  return frequent;}  }
class C{  public String toString(){  try {    return '[' + join(",") + ']';  } catch (  Exception e) {    return null;  }}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public OutputStream openOutputStream(){  return null;}  }
class C{  private void processNIOBuffer() throws ConnectionException, IOException {  if (nioInputBuffer != null) {    nioInputBuffer.flip();  }  boolean done=false;  while (!done && connected) {    this.owner.getConduit().getCancelCriterion().checkCancelInProgress(null);    int remaining=nioInputBuffer.remaining();    if (nioLengthSet || remaining >= MSG_HEADER_BYTES) {      if (!nioLengthSet) {        int headerStartPos=nioInputBuffer.position();        nioMessageLength=nioInputBuffer.getInt();        calcHdrVersion(nioMessageLength);        nioMessageLength=calcMsgByteSize(nioMessageLength);        nioMessageType=nioInputBuffer.get();        nioMsgId=nioInputBuffer.getShort();        directAck=(nioMessageType & DIRECT_ACK_BIT) != 0;        if (directAck) {          nioMessageType&=~DIRECT_ACK_BIT;        }        if (!validMsgType(nioMessageType)) {          Integer nioMessageTypeInteger=Integer.valueOf(nioMessageType);          logger.fatal(LocalizedMessage.create(LocalizedStrings.Connection_UNKNOWN_P2P_MESSAGE_TYPE_0,nioMessageTypeInteger));          this.readerShuttingDown=true;          requestClose(LocalizedStrings.Connection_UNKNOWN_P2P_MESSAGE_TYPE_0.toLocalizedString(nioMessageTypeInteger));          break;        }        nioLengthSet=true;        nioInputBuffer.position(headerStartPos);      }      if (remaining >= nioMessageLength + MSG_HEADER_BYTES) {        nioLengthSet=false;        nioInputBuffer.position(nioInputBuffer.position() + MSG_HEADER_BYTES);        int startPos=nioInputBuffer.position();        int oldLimit=nioInputBuffer.limit();        nioInputBuffer.limit(startPos + nioMessageLength);        if (this.handshakeRead) {          if (nioMessageType == NORMAL_MSG_TYPE) {            this.owner.getConduit().stats.incMessagesBeingReceived(true,nioMessageLength);            ByteBufferInputStream bbis=remoteVersion == null ? new ByteBufferInputStream(nioInputBuffer) : new VersionedByteBufferInputStream(nioInputBuffer,remoteVersion);            DistributionMessage msg=null;            try {              ReplyProcessor21.initMessageRPId();              long startSer=this.owner.getConduit().stats.startMsgDeserialization();              msg=(DistributionMessage)InternalDataSerializer.readDSFID(bbis);              this.owner.getConduit().stats.endMsgDeserialization(startSer);              if (bbis.available() != 0) {                logger.warn(LocalizedMessage.create(LocalizedStrings.Connection_MESSAGE_DESERIALIZATION_OF_0_DID_NOT_READ_1_BYTES,new Object[]{msg,Integer.valueOf(bbis.available())}));              }              try {                if (!dispatchMessage(msg,nioMessageLength,directAck)) {                  directAck=false;                }              } catch (              MemberShunnedException e) {                directAck=false;              }catch (              Exception de) {                this.owner.getConduit().getCancelCriterion().checkCancelInProgress(de);                logger.fatal(LocalizedMessage.create(LocalizedStrings.Connection_ERROR_DISPATCHING_MESSAGE),de);              }catch (              ThreadDeath td) {                throw td;              }catch (              VirtualMachineError err) {                SystemFailure.initiateFailure(err);                throw err;              }catch (              Throwable t) {                SystemFailure.checkFailure();                logger.fatal(LocalizedMessage.create(LocalizedStrings.Connection_THROWABLE_DISPATCHING_MESSAGE),t);              }            } catch (            VirtualMachineError err) {              SystemFailure.initiateFailure(err);              throw err;            }catch (            Throwable t) {              SystemFailure.checkFailure();              sendFailureReply(ReplyProcessor21.getMessageRPId(),LocalizedStrings.Connection_ERROR_DESERIALIZING_MESSAGE.toLocalizedString(),t,directAck);              if (t instanceof ThreadDeath) {                throw (ThreadDeath)t;              }              if (t instanceof CancelException) {                if (!(t instanceof CacheClosedException)) {                  throw (CancelException)t;                }              }              logger.fatal(LocalizedMessage.create(LocalizedStrings.Connection_ERROR_DESERIALIZING_MESSAGE),t);            } finally {              ReplyProcessor21.clearMessageRPId();            }          } else           if (nioMessageType == CHUNKED_MSG_TYPE) {            MsgDestreamer md=obtainMsgDestreamer(nioMsgId,remoteVersion);            this.owner.getConduit().stats.incMessagesBeingReceived(md.size() == 0,nioMessageLength);            try {              md.addChunk(nioInputBuffer,nioMessageLength);            } catch (            IOException ex) {              logger.fatal(LocalizedMessage.create(LocalizedStrings.Connection_FAILED_HANDLING_CHUNK_MESSAGE),ex);            }          } else {            MsgDestreamer md=obtainMsgDestreamer(nioMsgId,remoteVersion);            this.owner.getConduit().stats.incMessagesBeingReceived(md.size() == 0,nioMessageLength);            try {              md.addChunk(nioInputBuffer,nioMessageLength);            } catch (            IOException ex) {              logger.fatal(LocalizedMessage.create(LocalizedStrings.Connection_FAILED_HANDLING_END_CHUNK_MESSAGE),ex);            }            DistributionMessage msg=null;            int msgLength=0;            String failureMsg=null;            Throwable failureEx=null;            int rpId=0;            boolean interrupted=false;            try {              msg=md.getMessage();            } catch (            ClassNotFoundException ex) {              this.owner.getConduit().stats.decMessagesBeingReceived(md.size());              failureMsg=LocalizedStrings.Connection_CLASSNOTFOUND_DESERIALIZING_MESSAGE.toLocalizedString();              failureEx=ex;              rpId=md.getRPid();              logger.fatal(LocalizedMessage.create(LocalizedStrings.Connection_CLASSNOTFOUND_DESERIALIZING_MESSAGE_0,ex));            }catch (            IOException ex) {              this.owner.getConduit().stats.decMessagesBeingReceived(md.size());              failureMsg=LocalizedStrings.Connection_IOEXCEPTION_DESERIALIZING_MESSAGE.toLocalizedString();              failureEx=ex;              rpId=md.getRPid();              logger.fatal(LocalizedMessage.create(LocalizedStrings.Connection_IOEXCEPTION_DESERIALIZING_MESSAGE),failureEx);            }catch (            InterruptedException ex) {              interrupted=true;              this.owner.getConduit().getCancelCriterion().checkCancelInProgress(ex);            }catch (            VirtualMachineError err) {              SystemFailure.initiateFailure(err);              throw err;            }catch (            Throwable ex) {              SystemFailure.checkFailure();              this.owner.getConduit().getCancelCriterion().checkCancelInProgress(ex);              this.owner.getConduit().stats.decMessagesBeingReceived(md.size());              failureMsg=LocalizedStrings.Connection_UNEXPECTED_FAILURE_DESERIALIZING_MESSAGE.toLocalizedString();              failureEx=ex;              rpId=md.getRPid();              logger.fatal(LocalizedMessage.create(LocalizedStrings.Connection_UNEXPECTED_FAILURE_DESERIALIZING_MESSAGE),failureEx);            } finally {              msgLength=md.size();              releaseMsgDestreamer(nioMsgId,md);              if (interrupted) {                Thread.currentThread().interrupt();              }            }            if (msg != null) {              try {                if (!dispatchMessage(msg,msgLength,directAck)) {                  directAck=false;                }              } catch (              MemberShunnedException e) {                directAck=false;              }catch (              Exception de) {                this.owner.getConduit().getCancelCriterion().checkCancelInProgress(de);                logger.fatal(LocalizedMessage.create(LocalizedStrings.Connection_ERROR_DISPATCHING_MESSAGE),de);              }catch (              ThreadDeath td) {                throw td;              }catch (              VirtualMachineError err) {                SystemFailure.initiateFailure(err);                throw err;              }catch (              Throwable t) {                SystemFailure.checkFailure();                logger.fatal(LocalizedMessage.create(LocalizedStrings.Connection_THROWABLE_DISPATCHING_MESSAGE),t);              }            } else             if (failureEx != null) {              sendFailureReply(rpId,failureMsg,failureEx,directAck);            }          }        } else {          ByteBufferInputStream bbis=new ByteBufferInputStream(nioInputBuffer);          DataInputStream dis=new DataInputStream(bbis);          if (!this.isReceiver) {            try {              this.replyCode=dis.readUnsignedByte();              if (this.replyCode == REPLY_CODE_OK_WITH_ASYNC_INFO) {                this.asyncDistributionTimeout=dis.readInt();                this.asyncQueueTimeout=dis.readInt();                this.asyncMaxQueueSize=(long)dis.readInt() * (1024 * 1024);                if (this.asyncDistributionTimeout != 0) {                  logger.info(LocalizedMessage.create(LocalizedStrings.Connection_0_ASYNC_CONFIGURATION_RECEIVED_1,new Object[]{p2pReaderName()," asyncDistributionTimeout=" + this.asyncDistributionTimeout + " asyncQueueTimeout="+ this.asyncQueueTimeout+ " asyncMaxQueueSize="+ (this.asyncMaxQueueSize / (1024 * 1024))}));                }                this.remoteVersion=Version.readVersion(dis,true);              }            } catch (            Exception e) {              this.owner.getConduit().getCancelCriterion().checkCancelInProgress(e);              logger.fatal(LocalizedMessage.create(LocalizedStrings.Connection_ERROR_DESERIALIZING_P2P_HANDSHAKE_REPLY),e);              this.readerShuttingDown=true;              requestClose(LocalizedStrings.Connection_ERROR_DESERIALIZING_P2P_HANDSHAKE_REPLY.toLocalizedString());              return;            }catch (            ThreadDeath td) {              throw td;            }catch (            VirtualMachineError err) {              SystemFailure.initiateFailure(err);              throw err;            }catch (            Throwable t) {              SystemFailure.checkFailure();              logger.fatal(LocalizedMessage.create(LocalizedStrings.Connection_THROWABLE_DESERIALIZING_P2P_HANDSHAKE_REPLY),t);              this.readerShuttingDown=true;              requestClose(LocalizedStrings.Connection_THROWABLE_DESERIALIZING_P2P_HANDSHAKE_REPLY.toLocalizedString());              return;            }            if (this.replyCode != REPLY_CODE_OK && this.replyCode != REPLY_CODE_OK_WITH_ASYNC_INFO) {              StringId err=LocalizedStrings.Connection_UNKNOWN_HANDSHAKE_REPLY_CODE_0_NIOMESSAGELENGTH_1_PROCESSORTYPE_2;              Object[] errArgs=new Object[]{Integer.valueOf(this.replyCode),Integer.valueOf(nioMessageLength)};              if (replyCode == 0 && logger.isDebugEnabled()) {                logger.debug(err.toLocalizedString(errArgs) + " (peer probably departed ungracefully)");              } else {                logger.fatal(LocalizedMessage.create(err,errArgs));              }              this.readerShuttingDown=true;              requestClose(err.toLocalizedString(errArgs));              return;            }            notifyHandshakeWaiter(true);          } else {            try {              byte b=dis.readByte();              if (b != 0) {                throw new IllegalStateException(LocalizedStrings.Connection_DETECTED_OLD_VERSION_PRE_501_OF_GEMFIRE_OR_NONGEMFIRE_DURING_HANDSHAKE_DUE_TO_INITIAL_BYTE_BEING_0.toLocalizedString(new Byte(b)));              }              byte handShakeByte=dis.readByte();              if (handShakeByte != HANDSHAKE_VERSION) {                throw new IllegalStateException(LocalizedStrings.Connection_DETECTED_WRONG_VERSION_OF_GEMFIRE_PRODUCT_DURING_HANDSHAKE_EXPECTED_0_BUT_FOUND_1.toLocalizedString(new Object[]{new Byte(HANDSHAKE_VERSION),new Byte(handShakeByte)}));              }              InternalDistributedMember remote=DSFIDFactory.readInternalDistributedMember(dis);              setRemoteAddr(remote);              this.sharedResource=dis.readBoolean();              this.preserveOrder=dis.readBoolean();              this.uniqueId=dis.readLong();              this.remoteVersion=Version.readVersion(dis,true);              int dominoNumber=0;              if (this.remoteVersion == null || (this.remoteVersion.compareTo(Version.GFE_80) >= 0)) {                dominoNumber=dis.readInt();                if (this.sharedResource) {                  dominoNumber=0;                }                dominoCount.set(dominoNumber);              }              if (!this.sharedResource) {                if (tipDomino()) {                  logger.info(LocalizedMessage.create(LocalizedStrings.Connection_THREAD_OWNED_RECEIVER_FORCING_ITSELF_TO_SEND_ON_THREAD_OWNED_SOCKETS));                } else {                  ConnectionTable.threadWantsOwnResources();                  if (logger.isDebugEnabled()) {                    logger.debug("thread-owned receiver with domino count of {} will prefer sending on thread-owned sockets",dominoNumber);                  }                }                this.owner.owner.stats.incThreadOwnedReceivers(1L,dominoNumber);                setSendBufferSize(this.socket);              }              Thread.currentThread().setName("P2P message reader for " + this.remoteAddr + " "+ (this.sharedResource ? "" : "un")+ "shared"+ " "+ (this.preserveOrder ? "" : "un")+ "ordered"+ " uid="+ this.uniqueId+ (dominoNumber > 0 ? (" dom #" + dominoNumber) : "")+ " port="+ this.socket.getPort());            } catch (            Exception e) {              this.owner.getConduit().getCancelCriterion().checkCancelInProgress(e);              logger.fatal(LocalizedMessage.create(LocalizedStrings.Connection_ERROR_DESERIALIZING_P2P_HANDSHAKE_MESSAGE),e);              this.readerShuttingDown=true;              requestClose(LocalizedStrings.Connection_ERROR_DESERIALIZING_P2P_HANDSHAKE_MESSAGE.toLocalizedString());              return;            }            if (logger.isDebugEnabled()) {              logger.debug("P2P handshake remoteAddr is {}{}",this.remoteAddr,(this.remoteVersion != null ? " (" + this.remoteVersion + ')' : ""));            }            try {              String authInit=System.getProperty(DistributionConfigImpl.SECURITY_SYSTEM_PREFIX + SECURITY_PEER_AUTH_INIT);              boolean isSecure=authInit != null && authInit.length() != 0;              if (isSecure) {                if (owner.getConduit().waitForMembershipCheck(this.remoteAddr)) {                  sendOKHandshakeReply();                  notifyHandshakeWaiter(true);                } else {                  notifyHandshakeWaiter(false);                  logger.warn(LocalizedMessage.create(LocalizedStrings.Connection_0_TIMED_OUT_DURING_A_MEMBERSHIP_CHECK,p2pReaderName()));                  return;                }              } else {                sendOKHandshakeReply();                try {                  notifyHandshakeWaiter(true);                } catch (                Exception e) {                  logger.fatal(LocalizedMessage.create(LocalizedStrings.Connection_UNCAUGHT_EXCEPTION_FROM_LISTENER),e);                }              }            } catch (            IOException ex) {              final String err=LocalizedStrings.Connection_FAILED_SENDING_HANDSHAKE_REPLY.toLocalizedString();              if (logger.isDebugEnabled()) {                logger.debug(err,ex);              }              this.readerShuttingDown=true;              requestClose(err + ": " + ex);              return;            }          }        }        if (!connected) {          continue;        }        accessed();        nioInputBuffer.limit(oldLimit);        nioInputBuffer.position(startPos + nioMessageLength);      } else {        done=true;        compactOrResizeBuffer(nioMessageLength);      }    } else {      done=true;      if (nioInputBuffer.position() != 0) {        nioInputBuffer.compact();      } else {        nioInputBuffer.position(nioInputBuffer.limit());        nioInputBuffer.limit(nioInputBuffer.capacity());      }    }  }}  }
class C{  public boolean discover(Vertex input,Network network,Vertex currentTime){  Vertex sentence=input.getRelationship(Primitive.INPUT);  if (sentence != null) {    if (sentence.instanceOf(Primitive.PARAGRAPH)) {      Collection<Relationship> sentences=sentence.getRelationships(Primitive.SENTENCE);      if (sentences != null) {        for (        Relationship relationship : sentences) {          return checkSentence(relationship.getTarget(),network,currentTime);        }      }    } else     if (sentence.instanceOf(Primitive.SENTENCE)) {      return checkSentence(sentence,network,currentTime);    }  }  return false;}  }
class C{  @Override public byte[] substr(final byte[] key,final int start,final int end){  checkIsInMultiOrPipeline();  client.substr(key,start,end);  return client.getBinaryBulkReply();}  }
class C{  String readLine(boolean ignoreLF) throws IOException {  StringBuffer s=null;  int startChar;synchronized (lock) {    ensureOpen();    boolean omitLF=ignoreLF || skipLF;    bufferLoop:     for (; ; ) {      if (nextChar >= nChars)       fill();      if (nextChar >= nChars) {        if (s != null && s.length() > 0)         return s.toString(); else         return null;      }      boolean eol=false;      char c=0;      int i;      if (omitLF && (cb[nextChar] == '\n'))       nextChar++;      skipLF=false;      omitLF=false;      charLoop:       for (i=nextChar; i < nChars; i++) {        c=cb[i];        if ((c == '\n') || (c == '\r')) {          eol=true;          break charLoop;        }      }      startChar=nextChar;      nextChar=i;      if (eol) {        String str;        if (s == null) {          str=new String(cb,startChar,i - startChar);        } else {          s.append(cb,startChar,i - startChar);          str=s.toString();        }        nextChar++;        if (c == '\r') {          skipLF=true;        }        return str;      }      if (s == null)       s=new StringBuffer(defaultExpectedLineLength);      s.append(cb,startChar,i - startChar);    }  }}  }
class C{  public static Hashtable obtenerFicherosHitos(HitosExpediente hitos,String entidad) throws ConsultaExcepcion {  Hashtable ficherosHashtable=new Hashtable();  try {    for (int a=0; a < hitos.count(); a++) {      HitoExpediente hito=(HitoExpediente)hitos.get(a);      String guid=hito.getGuid();      FicherosHito ficheros=GestorConsulta.obtenerFicherosHito(guid,entidad);      ficherosHashtable.put(guid,ficheros);    }  } catch (  ConsultaExcepcion ce) {    logger.error("Error al obtener ficheros de los hitos de un expedinte [obtenerFicherosHito][ConsultaExcepcion]",ce.fillInStackTrace());    throw ce;  }catch (  Exception e) {    logger.error("Error al obtener ficheros de los hitos de un expediente [obtenerFicherosHito][Excepcion]",e.fillInStackTrace());    throw new ConsultaExcepcion(ConsultaCodigosError.EC_CARGAR_FICHEROS_HITO,e.getCause());  }  return ficherosHashtable;}  }
class C{  public TDoubleObjectHashMap(int initialCapacity,TDoubleHashingStrategy strategy){  super(initialCapacity);  _hashingStrategy=strategy;}  }
class C{  public boolean rowInserted() throws SQLException {  checkState();  return rs.rowInserted();}  }
class C{  private boolean isVowel(char ch){  return VOWELS.indexOf(ch) != -1;}  }
class C{  public NavigationCommand(String command,Image icon,int id){  super(command,icon,id);}  }
class C{  public String toString(){  java.text.MessageFormat form=new java.text.MessageFormat(sun.security.util.ResourcesMgr.getString("NTSidDomainPrincipal.name","sun.security.util.AuthResources"));  Object[] source={getName()};  return form.format(source);}  }
class C{  public static String hashKeyForDisk(String key){  String cacheKey;  try {    final MessageDigest mDigest=MessageDigest.getInstance("SHA-1");    mDigest.update(key.getBytes());    cacheKey=bytesToHexString(mDigest.digest());  } catch (  NoSuchAlgorithmException e) {    cacheKey=String.valueOf(key.hashCode());  }  return cacheKey;}  }
class C{  private String removeStringDelimiters(String key){  String k=key.trim();  if (k.charAt(0) == this.textDelimiter) {    k=k.substring(1);  }  if (k.charAt(k.length() - 1) == this.textDelimiter) {    k=k.substring(0,k.length() - 1);  }  return k;}  }
class C{  @Override public void doneDownload(){  String downloadStatusText=controller.getLocaliser().getString("multiBitDownloadListener.doneDownloadText");  singleWalletPanel.setSyncMessage(downloadStatusText,100);  WalletData perWalletModelData=singleWalletPanel.getPerWalletModelData();  if (perWalletModelData != null) {    UUID replayTaskUUID=perWalletModelData.getReplayTaskUUID();    if (replayTaskUUID != null) {      ReplayManager.INSTANCE.taskHasCompleted(replayTaskUUID);    }  }}  }
class C{  public static Map<String,Object> updatePaymentApplication(DispatchContext dctx,Map<String,Object> context){  if (!context.containsKey("useHighestAmount")) {    context.put("useHighestAmount","N");  }  BigDecimal amountApplied=(BigDecimal)context.get("amountApplied");  if (amountApplied != null) {    context.put("amountApplied",amountApplied);  } else {    context.put("amountApplied",ZERO);  }  return updatePaymentApplicationDefBd(dctx,context);}  }
class C{  protected static int triangleSize(int x){  return (x * (x - 1)) >>> 1;}  }
class C{  private static <T>int countRunAndMakeAscending(T[] a,int lo,int hi,Comparator<? super T> c){  assert lo < hi;  int runHi=lo + 1;  if (runHi == hi)   return 1;  if (c.compare(a[runHi++],a[lo]) < 0) {    while (runHi < hi && c.compare(a[runHi],a[runHi - 1]) < 0)     runHi++;    reverseRange(a,lo,runHi);  } else {    while (runHi < hi && c.compare(a[runHi],a[runHi - 1]) >= 0)     runHi++;  }  return runHi - lo;}  }
class C{  public static int lastVertex(int L,int K,int i){  int base=1;  int range=K;  int increment=0;  for (int j=0; j < L / 2; j++) {    if (j == i) {      return base + range - 1;    }    base+=K + increment;    increment+=4;    range+=4;  }  range-=4;  increment-=4;  for (int j=L / 2; j < L; j++) {    if (j == i) {      return base + range - 1;    }    base+=K + increment;    increment-=4;    range-=4;  }  return base + range - 1;}  }
class C{  protected MouseListener createListMouseListener(){  return getHandler();}  }
class C{  public Timer minus(Timer other){  Timer copy=new Timer();  copy.elapsedTime=millis() - other.millis();  return copy;}  }
class C{  RouterPriorityQueue<? extends Node> createRouterPriorityQueue(){  return new WrappedBinaryMinHeap<>(this.network.getNodes().size());}  }
class C{  @Override public void write(int oneByte) throws IOException {  mSingleByteArray[0]=(byte)(0xff & oneByte);  write(mSingleByteArray);}  }
class C{  public synchronized void storeDataSourceConfig(String clusterName,Map<String,TungstenProperties> dataSourceMap) throws ConfigurationException {  if (logger.isDebugEnabled()) {    logger.debug(String.format("Storing the data source configuration for service='%s'",clusterName));  }  for (  TungstenProperties ds : dataSourceMap.values()) {    if (logger.isDebugEnabled()) {      logger.debug(String.format("Storing the data source '%s@%s'",ds.getString("name"),clusterName));    }    storeDataSourceConfig(clusterName,ds);  }}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tOutput word counts rather than boolean word presence.\n","C",0,"-C"));  result.addElement(new Option("\tSpecify list of string attributes to convert to words (as weka Range).\n" + "\t(default: select all string attributes)","R",1,"-R <index1,index2-index4,...>"));  result.addElement(new Option("\tInvert matching sense of column indexes.","V",0,"-V"));  result.addElement(new Option("\tSpecify a prefix for the created attribute names.\n" + "\t(default: \"\")","P",1,"-P <attribute name prefix>"));  result.addElement(new Option("\tSpecify approximate number of word fields to create.\n" + "\tSurplus words will be discarded..\n" + "\t(default: 1000)","W",1,"-W <number of words to keep>"));  result.addElement(new Option("\tSpecify the rate (e.g., every 10% of the input dataset) at which to periodically prune the dictionary.\n" + "\t-W prunes after creating a full dictionary. You may not have enough memory for this approach.\n" + "\t(default: no periodic pruning)","prune-rate",1,"-prune-rate <rate as a percentage of dataset>"));  result.addElement(new Option("\tTransform the word frequencies into log(1+fij)\n" + "\twhere fij is the frequency of word i in jth document(instance).\n","T",0,"-T"));  result.addElement(new Option("\tTransform each word frequency into:\n" + "\tfij*log(num of Documents/num of documents containing word i)\n" + "\t  where fij if frequency of word i in jth document(instance)","I",0,"-I"));  result.addElement(new Option("\tWhether to 0=not normalize/1=normalize all data/2=normalize test data only\n" + "\tto average length of training documents " + "(default 0=don\'t normalize).","N",1,"-N"));  result.addElement(new Option("\tConvert all tokens to lowercase before " + "adding to the dictionary.","L",0,"-L"));  result.addElement(new Option("\tThe stopwords handler to use (default Null).","-stopwords-handler",1,"-stopwords-handler"));  result.addElement(new Option("\tThe stemming algorithm (classname plus parameters) to use.","stemmer",1,"-stemmer <spec>"));  result.addElement(new Option("\tThe minimum term frequency (default = 1).","M",1,"-M <int>"));  result.addElement(new Option("\tIf this is set, the maximum number of words and the \n" + "\tminimum term frequency is not enforced on a per-class \n" + "\tbasis but based on the documents in all the classes \n"+ "\t(even if a class attribute is set).","O",0,"-O"));  result.addElement(new Option("\tThe tokenizing algorihtm (classname plus parameters) to use.\n" + "\t(default: " + WordTokenizer.class.getName() + ")","tokenizer",1,"-tokenizer <spec>"));  return result.elements();}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public synchronized void clear(){  super.clear();  this.currentTreeHeight=1;  this.sampler.setWeight(1);}  }
class C{  public MySQLSchema(Configuration conf){  super(conf);  this.conf.set(Schema.JDBC_DRIVER_CLASS,JDBC_DRIVER_NAME);}  }
class C{  public void deleteNatRule(String id,String ruleId,FutureCallback<Void> responseCallback) throws IOException {  deleteAsync(LOGICAL_ROUTERS_BASE_PATH + "/" + id+ "/nat/rules/"+ ruleId,HttpStatus.SC_OK,responseCallback);}  }
class C{  public void testSystemProperty() throws Exception {  URL url=new URL("http://localhost:" + System.getProperty("http.port") + "/systemproperty-war"+ "/test?systemPropertyName=cargo.system.property");  final String expected="CargoSystemProp";  PingUtils.assertPingTrue("System property cargo.system.property not found",expected,url,logger);}  }
class C{  public String toString(){  StringBuffer s=new StringBuffer();  boolean colon=false;  s.append("ClassHierarchy:{");  for (  TypeNode typeNode : typeNodeList) {    if (colon) {      s.append(",");    } else {      colon=true;    }    s.append(typeNode);  }  s.append("}");  return s.toString();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:02.444 -0500",hash_original_method="7ABD1F4BB750369FFBE0EAAD80629925",hash_generated_method="C2B023356DF2D8423B86547092C71691") private Images(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:05.339 -0500",hash_original_method="F73D127A0D43FAD1AD9DBA6A689AC70A",hash_generated_method="D1D8F5B7AC287DAF0E66B8DB9E17BBCD") public boolean isDualBandSupported(){  try {    return mService.isDualBandSupported();  } catch (  RemoteException e) {    return false;  }}  }
class C{  public void countFitnessEvaluation(){  fitnessEvaluations++;}  }
class C{  public NotificationChain basicSetReturnTypeRef(TypeRef newReturnTypeRef,NotificationChain msgs){  TypeRef oldReturnTypeRef=returnTypeRef;  returnTypeRef=newReturnTypeRef;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,TypeRefsPackage.FUNCTION_TYPE_EXPRESSION__RETURN_TYPE_REF,oldReturnTypeRef,newReturnTypeRef);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  protected int next(){  try {    for (; ; ) {      scanner.clearBuffer();      current=scanner.next();      if (current == LexicalUnits.COMMENT) {        documentHandler.comment(scanner.getStringValue());      } else {        break;      }    }    return current;  } catch (  ParseException e) {    reportError(e.getMessage(),e.getParams());    return current;  }}  }
class C{  public StrTokenizer(String input,StrMatcher delim,StrMatcher quote){  this(input,delim);  setQuoteMatcher(quote);}  }
class C{  public static void main(String[] args){  MyStringBuilder1 str1=new MyStringBuilder1("TEST");  System.out.println("\nAppend the string \" MyStringBuilder1\" to string: " + str1.append(new MyStringBuilder1(" MyStringBuilder1")));  System.out.println("\nAppend integer 101 to the string: " + str1.append(101));  System.out.println("\nLength of string: " + str1.length());  System.out.println("\nCharacter at index 2: " + str1.charAt(2));  System.out.println("\nString to lower case: " + str1.toLowerCase());  System.out.println("\nSubstring of string from index 1 to 3: " + str1.substring(1,3));  System.out.println("\nDisplay string: " + str1.toString());}  }
class C{  public boolean isPaired(){  return isPaired;}  }
class C{  public boolean visit(SingleVariableDeclaration node){  return true;}  }
class C{  public CacheClosedException(){  super();}  }
class C{  public final void yyreset(java.io.Reader reader){  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtEOF=false;}  }
class C{  public void tableSwitch(final int[] keys,final TableSwitchGenerator generator){  float density;  if (keys.length == 0) {    density=0;  } else {    density=(float)keys.length / (keys[keys.length - 1] - keys[0] + 1);  }  tableSwitch(keys,generator,density >= 0.5f);}  }
class C{  protected void addExplosionInfo(int rank,int file,int fromSquare,List<AtomicExplosionInfo> explosionInfo){  if (GameUtils.isInBounds(rank,file)) {    int square=GameUtils.getSquare(rank,file);    if (square != fromSquare && board[square] != EMPTY && board[square] != PAWN) {      AtomicExplosionInfo info=new AtomicExplosionInfo();      info.color=(getColorBB(WHITE) & getBitboard(square)) != 0 ? WHITE : BLACK;      info.piece=board[square];      info.square=square;      explosionInfo.add(info);    }  }}  }
class C{  @Override public void handleStart(Operation start){  ServiceUtils.logInfo(this,"Handling start for service %s",getSelfLink());  State startState=start.getBody(State.class);  InitializationUtils.initialize(startState);  if (null == startState.taskPollDelay) {    startState.taskPollDelay=HostUtils.getDeployerContext(this).getTaskPollDelay();  }  validateState(startState);  if (TaskState.TaskStage.CREATED == startState.taskState.stage) {    startState.taskState.stage=TaskState.TaskStage.STARTED;    startState.taskState.subStage=TaskState.SubStage.REMOVE_FROM_API_FE;  }  if (startState.documentExpirationTimeMicros <= 0) {    startState.documentExpirationTimeMicros=ServiceUtils.computeExpirationTime(ServiceUtils.DEFAULT_DOC_EXPIRATION_TIME_MICROS);  }  start.setBody(startState).complete();  try {    if (ControlFlags.isOperationProcessingDisabled(startState.controlFlags)) {      ServiceUtils.logInfo(this,"Skipping start operation processing (disabled)");    } else     if (TaskState.TaskStage.STARTED == startState.taskState.stage) {      sendStageProgressPatch(startState.taskState.stage,startState.taskState.subStage);    }  } catch (  Throwable t) {    failTask(t);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodesetprefix03.class,args);}  }
class C{  public static void sortDesc(long[] keys,int[] values){  hybridsortDesc(keys,values,null,null,0,keys.length - 1);}  }
class C{  public Timeline push(Tween tween){  if (isBuilt)   throw new RuntimeException("You can't push anything to a timeline once it is started");  current.children.add(tween);  return this;}  }
class C{  public void addListener(final SelectionListener listener1){  this.listener=listener1;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public ComponentName componentName(){  return mComponentName;}  }
class C{  @Override public boolean isCancelled(){  return cancelled;}  }
class C{  protected void doDropFlow(IOFSwitch sw,OFPacketIn pi,FloodlightContext cntx){  if (log.isTraceEnabled()) {    log.trace("doDropFlow pi={} srcSwitch={}",new Object[]{pi,sw});  }  if (sw == null) {    log.warn("Switch is null, not installing drop flowmod for PacketIn {}",pi);    return;  }  OFFlowMod.Builder fmb=sw.getOFFactory().buildFlowModify();  List<OFAction> actions=new ArrayList<OFAction>();  U64 cookie=AppCookie.makeCookie(APP_ID,0);  fmb.setCookie(cookie).setIdleTimeout(ForwardingBase.FLOWMOD_DEFAULT_IDLE_TIMEOUT).setHardTimeout(ForwardingBase.FLOWMOD_DEFAULT_HARD_TIMEOUT).setBufferId(OFBufferId.NO_BUFFER).setMatch(pi.getMatch()).setActions(actions);  if (log.isTraceEnabled()) {    log.trace("write drop flow-mod srcSwitch={} match={} " + "pi={} flow-mod={}",new Object[]{sw,pi.getMatch(),pi,fmb.build()});  }  sw.write(fmb.build());  return;}  }
class C{  public List<Site> listSites(){  return listSites(getLocalVdcShortId());}  }
class C{  public static BufferedImage loadCompatibleImage(URL resource) throws IOException {  BufferedImage image=ImageIO.read(resource);  return toCompatibleImage(image);}  }
class C{  private static void eliminarOficinasByIdMatter(int idMatter,DbConnection db) throws Exception {  SicresOficinaTipoAsuntoDatos tipoAsuntoOficinaDatos=new SicresOficinaTipoAsuntoDatos();  tipoAsuntoOficinaDatos.setIdMatter(idMatter);  tipoAsuntoOficinaDatos.deleteByIdMatter(db);}  }
class C{  public void testFollowerAcceptsPollForMultipleCandidatesPerTerm() throws Throwable {  runOnServer(null);}  }
class C{  public double[][] popY(double X_[][]){  Matrix Z[]=forwardPass(X_);  int n=Z.length - 1;  return Z[n].getArray();}  }
class C{  public static Collection<InetSocketAddress> resolveAddresses(AddressResolver addrRslvr,Iterable<String> addrs,int port) throws IgniteSpiException {  assert addrRslvr != null;  Collection<InetSocketAddress> extAddrs=new HashSet<>();  for (  String addr : addrs) {    InetSocketAddress sockAddr=new InetSocketAddress(addr,port);    if (!sockAddr.isUnresolved()) {      Collection<InetSocketAddress> extAddrs0=resolveAddress(addrRslvr,sockAddr);      if (extAddrs0 != null)       extAddrs.addAll(extAddrs0);    }  }  return extAddrs;}  }
class C{  public T caseNumericalUnaryExpression(NumericalUnaryExpression object){  return null;}  }
class C{  IntSetting(Properties defaultProps,Properties props,String key,int defaultInt){  super(defaultProps,props,key,String.valueOf(defaultInt),false,null,null);}  }
class C{  private Constructor(){  this.vmConstructor=null;  invoker=null;}  }
class C{  public void constValueIndex(int value) throws IOException {  constValueIndex('I',pool.addIntegerInfo(value));}  }
class C{  private static String translateSQL(String sql){  return translateSQL(sql,true);}  }
class C{  public void update(byte b){  if (hashAlg == null) {    throw new IllegalStateException("Call initSign or initVerify first!");  }  hashAlg.update(b);}  }
class C{  public TreePath(CompilationUnitTree t){  this(null,t);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof LegendTitle)) {    return false;  }  if (!super.equals(obj)) {    return false;  }  LegendTitle that=(LegendTitle)obj;  if (!PaintUtilities.equal(this.backgroundPaint,that.backgroundPaint)) {    return false;  }  if (this.legendItemGraphicEdge != that.legendItemGraphicEdge) {    return false;  }  if (this.legendItemGraphicAnchor != that.legendItemGraphicAnchor) {    return false;  }  if (this.legendItemGraphicLocation != that.legendItemGraphicLocation) {    return false;  }  if (!this.itemFont.equals(that.itemFont)) {    return false;  }  if (!this.itemPaint.equals(that.itemPaint)) {    return false;  }  if (!this.hLayout.equals(that.hLayout)) {    return false;  }  if (!this.vLayout.equals(that.vLayout)) {    return false;  }  if (!this.sortOrder.equals(that.sortOrder)) {    return false;  }  return true;}  }
class C{  private void processShiftOrDelete(String id,String op) throws Exception {  Vector sp=(Vector)sessionContext.getAttribute(SimpleItypeConfig.CONFIGS_ATTR_NAME);  if (sp == null || sp.size() == 0)   throw new Exception("Could not retrieve user defined configs");  Vector indx=new Vector();  SimpleItypeConfig result=search(id,indx,false);  if (result == null)   throw new Exception("Could not retrieve config element: " + id);  int index=Integer.parseInt(indx.elementAt(0).toString());  if (op.equalsIgnoreCase("shiftUp")) {    SimpleItypeConfig parent=result.getParent();    if (parent == null) {      int indx1=index;      int indx2=indx1 - 1;      Object tmp=sp.elementAt(indx1);      sp.insertElementAt(tmp,indx2);      sp.removeElementAt(indx1 + 1);    } else {      Vector v=parent.getSubparts();      for (int i=0; i < v.size(); i++) {        SimpleItypeConfig subp=(SimpleItypeConfig)v.elementAt(i);        if (subp.getId() == Long.parseLong(id)) {          Object tmp=v.elementAt(i);          v.insertElementAt(tmp,i - 1);          v.removeElementAt(i + 1);          break;        }      }    }  }  if (op.equalsIgnoreCase("shiftDown")) {    SimpleItypeConfig parent=result.getParent();    if (parent == null) {      int indx1=index + 1;      int indx2=index;      Object tmp=sp.elementAt(indx1);      sp.insertElementAt(tmp,indx2);      sp.removeElementAt(indx1 + 1);    } else {      Vector v=parent.getSubparts();      for (int i=0; i < v.size(); i++) {        SimpleItypeConfig subp=(SimpleItypeConfig)v.elementAt(i);        if (subp.getId() == Long.parseLong(id)) {          Object tmp=v.elementAt(i + 1);          v.insertElementAt(tmp,i);          v.removeElementAt(i + 2);          break;        }      }    }  }  if (op.equalsIgnoreCase("shiftLeft")) {    SimpleItypeConfig parent=result.getParent();    Vector v=parent.getSubparts();    for (int i=0; i < v.size(); i++) {      SimpleItypeConfig subp=(SimpleItypeConfig)v.elementAt(i);      if (subp.getId() == Long.parseLong(id)) {        v.removeElementAt(i);        break;      }    }    SimpleItypeConfig grandParent=parent.getParent();    result.setParent(grandParent);    if (grandParent == null) {      sp.insertElementAt(result,index + 1);    } else {      Vector v1=grandParent.getSubparts();      for (int i=0; i < v1.size(); i++) {        SimpleItypeConfig subp=(SimpleItypeConfig)v1.elementAt(i);        if (subp.getId() == parent.getId()) {          v1.insertElementAt(result,i + 1);          break;        }      }    }  }  if (op.equalsIgnoreCase("shiftRight")) {    SimpleItypeConfig parent=result.getParent();    if (parent == null) {      SimpleItypeConfig curr=(SimpleItypeConfig)sp.elementAt(index);      SimpleItypeConfig prev=(SimpleItypeConfig)sp.elementAt(index - 1);      prev.addSubpart(curr);      sp.removeElementAt(index);    } else {      Vector v=parent.getSubparts();      for (int i=0; i < v.size(); i++) {        SimpleItypeConfig subp=(SimpleItypeConfig)v.elementAt(i);        if (subp.getId() == Long.parseLong(id)) {          SimpleItypeConfig curr=(SimpleItypeConfig)v.elementAt(i);          SimpleItypeConfig prev=(SimpleItypeConfig)v.elementAt(i - 1);          prev.addSubpart(curr);          v.removeElementAt(i);          break;        }      }    }  }  if (op.equalsIgnoreCase("delete")) {    SimpleItypeConfig parent=result.getParent();    if (parent == null) {      sp.removeElementAt(index);    } else {      Vector v=parent.getSubparts();      for (int i=0; i < v.size(); i++) {        SimpleItypeConfig subp=(SimpleItypeConfig)v.elementAt(i);        if (subp.getId() == Long.parseLong(id)) {          v.removeElementAt(i);          break;        }      }    }  }  sessionContext.setAttribute(SimpleItypeConfig.CONFIGS_ATTR_NAME,sp);}  }
class C{  public SortingParams asc(){  params.add(ASC.raw);  return this;}  }
class C{  static Token[] lexx(final String format){  final ArrayList<Token> list=new ArrayList<Token>(format.length());  boolean inLiteral=false;  StringBuilder buffer=null;  Token previous=null;  for (int i=0; i < format.length(); i++) {    final char ch=format.charAt(i);    if (inLiteral && ch != '\'') {      buffer.append(ch);      continue;    }    Object value=null;switch (ch) {case '\'':      if (inLiteral) {        buffer=null;        inLiteral=false;      } else {        buffer=new StringBuilder();        list.add(new Token(buffer));        inLiteral=true;      }    break;case 'y':  value=y;break;case 'M':value=M;break;case 'd':value=d;break;case 'H':value=H;break;case 'm':value=m;break;case 's':value=s;break;case 'S':value=S;break;default :if (buffer == null) {buffer=new StringBuilder();list.add(new Token(buffer));}buffer.append(ch);}if (value != null) {if (previous != null && previous.getValue() == value) {previous.increment();} else {final Token token=new Token(value);list.add(token);previous=token;}buffer=null;}}if (inLiteral) {throw new IllegalArgumentException("Unmatched quote in format: " + format);}return list.toArray(new Token[list.size()]);}  }
class C{  static ManagedBean lookupManagedBean(ManagedResource resource){  ManagedBean managed=null;  if (registry != null) {    managed=registry.findManagedBean(resource.getManagedResourceType().getClassTypeName());  } else {    throw new IllegalArgumentException(LocalizedStrings.MBeanUtil_MANAGEDBEAN_IS_NULL.toLocalizedString());  }  if (managed == null) {    throw new IllegalArgumentException(LocalizedStrings.MBeanUtil_MANAGEDBEAN_IS_NULL.toLocalizedString());  }  managed.setClassName("org.apache.geode.admin.jmx.internal.MX4JModelMBean");  return managed;}  }
class C{  public void addAfterBuildScript(String pathname){  _afterBuildScripts.add(pathname);  setDirtyAndFirePropertyChange("addAfterBuildScript",pathname,null);}  }
class C{  private void transferData(State state,InnerState innerState,byte[] data,InputStream entityStream) throws StopRequest {  for (; ; ) {    int bytesRead=readFromResponse(state,innerState,data,entityStream);    if (bytesRead == -1) {      handleEndOfStream(state,innerState);      return;    }    state.mGotData=true;    writeDataToDestination(state,data,bytesRead);    innerState.mBytesSoFar+=bytesRead;    innerState.mBytesThisSession+=bytesRead;    reportProgress(state,innerState);    checkPausedOrCanceled(state);  }}  }
class C{  private boolean isShuffling(){synchronized (lock) {    return shuffling;  }}  }
class C{  public void awardAchievementIfNotYetReached(Player player,String achievementIdentifier){  if (!player.hasReachedAchievement(achievementIdentifier)) {    boolean found=false;    for (    List<Achievement> achievementList : this.achievements.values()) {      if (!found) {        for (        Achievement achievement : achievementList) {          if (achievement.getIdentifier().equals(achievementIdentifier)) {            logReachingOfAnAchievement(player,achievement);            notifyPlayerAboutReachedAchievement(player,achievement);            found=true;          }        }      }    }    if (!found) {      logger.warn("Tried to award non existing achievement identifier " + achievementIdentifier + " to "+ player.getName());    }  }}  }
class C{  public final CC growPrioY(int p){  ver.setGrowPriority(p);  return this;}  }
class C{  private void handleHtmlOnlineBackupForm(RequestAndResponse requestAndResponse) throws IOException, ServletException {  final String title=servletText.pageTitleOnlineBackupDb();  if (addTitle(requestAndResponse,title)) {    return;  }  final PageWrapper pageWrapper=new PageWrapper(requestAndResponse,title,true).setPaneId("onlineBackup");  pageWrapper.addHeader();  if (!isUserAnAdmin(requestAndResponse)) {    requestAndResponse.print(servletText.errorPageNotAllowed());  } else {    requestAndResponse.print("<table class=\"nopadding\"><tr><td>");    requestAndResponse.print(servletText.pageTitleOnlineBackupDbTooltip());    requestAndResponse.print("<br><br>");    requestAndResponse.print(servletText.onlineBackupDbAreYouSure());    requestAndResponse.print("</td></tr><tr><td>");    requestAndResponse.print("<form action=\"/doOnlineBackup/" + "\" method=\"POST\">" + "<input type=\"hidden\" name=\"csrft\" value=\"" + getCsrft(requestAndResponse) + "\">"+ "<button onclick=\"replacePaneForForm(event, '"+ servletText.pageTitleOnlineBackupDb()+ "', refreshBackupsPane); return false;\" class=\"specialbutton withTopMargin\">"+ servletText.pageTitleOnlineBackupDb()+ "</button></form>");    requestAndResponse.print("</td></tr></table>");  }  pageWrapper.addFooter();}  }
class C{  protected void sendTestMessage(NceMessage m){  if (log.isDebugEnabled()) {    log.debug("sendTestMessage    [" + m + "]");  }  notifyMessage(m,null);  return;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:18.144 -0500",hash_original_method="E5AB6833BD9B82E228B17845C6EA8653",hash_generated_method="AB0FFB3AEC8ABA85D7943D4EBCB83DC4") public static boolean is24HourFormat(Context context){  String value=Settings.System.getString(context.getContentResolver(),Settings.System.TIME_12_24);  if (value == null) {    Locale locale=context.getResources().getConfiguration().locale;synchronized (sLocaleLock) {      if (sIs24HourLocale != null && sIs24HourLocale.equals(locale)) {        return sIs24Hour;      }    }    java.text.DateFormat natural=java.text.DateFormat.getTimeInstance(java.text.DateFormat.LONG,locale);    if (natural instanceof SimpleDateFormat) {      SimpleDateFormat sdf=(SimpleDateFormat)natural;      String pattern=sdf.toPattern();      if (pattern.indexOf('H') >= 0) {        value="24";      } else {        value="12";      }    } else {      value="12";    }synchronized (sLocaleLock) {      sIs24HourLocale=locale;      sIs24Hour=!value.equals("12");    }  }  boolean b24=!(value == null || value.equals("12"));  return b24;}  }
class C{  public MGRSCoordPanel(CenterSupport support){  super(support);}  }
class C{  public static void assertNotEqual(Object expected,Object actual,String errorMessage){  if (verbose) {    log("assertNotEqual(" + expected + ", "+ actual+ ", "+ errorMessage+ ")");  }  TestUtils.assertBool(!expected.equals(actual),errorMessage);}  }
class C{  private JPanel createChartPanel(){  try {    setBackground(ColorAndFontConstants.BACKGROUND_COLOR);    setForeground(ColorAndFontConstants.TEXT_COLOR);    int chartWidth=Math.max(getWidth() - WIDTH_DELTA,MINIMUM_WIDTH);    int chartHeight=Math.max(getHeight() - HEIGHT_DELTA,MINIMUM_HEIGHT);    Chart chart=new Chart(chartWidth,chartHeight);    Locale locale=controller.getLocaliser().getLocale();    chart.getStyleManager().setLocale(locale);    Collection<Date> xData=new ArrayList<Date>();    Collection<Number> yData=new ArrayList<Number>();    Collection<ChartData> chartDataCollection=getChartData();    if (generateRandomChart) {      DateFormat sdf=new SimpleDateFormat("dd.MM.yyyy");      Date date;      for (int i=1; i <= 10; i++) {        try {          date=sdf.parse(i + ".10.2008");          xData.add(date);        } catch (        ParseException e) {          e.printStackTrace();        }        yData.add(Math.random() * i);      }    } else {      if (chartDataCollection == null || chartDataCollection.size() == 0) {        log.debug("chartDataCollection is null or empty");        JPanel chartPanel=new JPanel();        chartPanel.setBackground(ColorAndFontConstants.BACKGROUND_COLOR);        chartPanel.setForeground(ColorAndFontConstants.TEXT_COLOR);        chartPanel.setOpaque(true);        return chartPanel;      } else {        for (        ChartData chartData : chartDataCollection) {          if (chartData != null && chartData.getDate() != null && chartData.getValue() != null) {            xData.add(chartData.getDate());            yData.add(chartData.getValue().doubleValue() / NUMBER_OF_SATOSHI_IN_ONE_BTC);          }        }      }    }    String xAxisLabel=controller.getLocaliser().getString("walletData.dateText");    String currencyUnitSuffix=" (" + controller.getLocaliser().getString("sendBitcoinPanel.amountUnitLabel") + ")";    String balanceLabel=controller.getLocaliser().getString("multiBitFrame.balanceLabel") + currencyUnitSuffix;    String unitOfTime=controller.getLocaliser().getString("chartsPanelTitle.days");    String chartTitle=controller.getLocaliser().getString("chartsPanelTitle.text",new Object[]{NUMBER_OF_DAYS_TO_LOOK_BACK,unitOfTime}) + currencyUnitSuffix;    chart.getStyleManager().setPlotGridLinesVisible(false);    chart.getStyleManager().setXAxisTicksVisible(true);    chart.getStyleManager().setLegendVisible(false);    chart.getStyleManager().setChartBackgroundColor(ColorAndFontConstants.BACKGROUND_COLOR);    chart.getStyleManager().setChartFontColor(ColorAndFontConstants.TEXT_COLOR);    chart.getStyleManager().setAxisTickLabelsColor(ColorAndFontConstants.TEXT_COLOR);    chart.getStyleManager().setAxisTickMarksColor(ColorAndFontConstants.TEXT_COLOR);    chart.getStyleManager().setChartTitleFont(FontSizer.INSTANCE.getAdjustedDefaultFontWithDelta(2));    chart.getStyleManager().setAxisTitleFont(FontSizer.INSTANCE.getAdjustedDefaultFont());    chart.getStyleManager().setAxisTickLabelsFont(FontSizer.INSTANCE.getAdjustedDefaultFontWithDelta(-2));    chart.getStyleManager().setDatePattern(DATE_PATTERN);    chart.setChartTitle(chartTitle);    chart.setXAxisTitle(xAxisLabel);    com.xeiam.xchart.Series series=chart.addDateSeries(balanceLabel,xData,yData);    series.setLineColor(SeriesColor.BLUE);    series.setMarkerColor(SeriesColor.BLUE);    series.setMarker(SeriesMarker.CIRCLE);    series.setLineStyle(SeriesLineStyle.SOLID);    XChartPanel chartPanelToReturn=new XChartPanel(chart);    chartPanelToReturn.setSaveAsString(controller.getLocaliser().getString("chartsPanelSaveAs"));    chartPanelToReturn.setLocale(locale);    chartPanelToReturn.setMinimumSize(new Dimension(chartWidth,chartHeight));    return chartPanelToReturn;  } catch (  Exception e) {    e.printStackTrace();    JPanel chartPanel=new JPanel();    chartPanel.setBackground(ColorAndFontConstants.BACKGROUND_COLOR);    chartPanel.setForeground(ColorAndFontConstants.TEXT_COLOR);    chartPanel.setOpaque(true);    return chartPanel;  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override protected void pushToSystem(HashMap<String,Object> cacheData,int supportedActions){  MouseInput.getInstance().notifyDragStart();  ((MonocleApplication)Application.GetApplication()).enterDnDEventLoop();  actionPerformed(Clipboard.ACTION_COPY_OR_MOVE);}  }
class C{  public boolean isPubKeyHashMine(byte[] pubkeyHash){  return findKeyFromPubHash(pubkeyHash) != null;}  }
class C{  private static float crossProductZ(ResultPoint pointA,ResultPoint pointB,ResultPoint pointC){  float bX=pointB.x;  float bY=pointB.y;  return ((pointC.x - bX) * (pointA.y - bY)) - ((pointC.y - bY) * (pointA.x - bX));}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof StandardCategoryToolTipGenerator)) {    return false;  }  return super.equals(obj);}  }
class C{  public Type createType(){  TypeImpl type=new TypeImpl();  return type;}  }
class C{  public void testComplexUrlInvalidWithAnchor2(){  setParameterToInitMockMethod("http://myurl.com/a/b/c/index.html?first#Param=myParam",TestSolution.FAILED);  SeoRule01071 test=new SeoRule01071();  test.setProcessResultDataService(mockProcessResultDataService);  test.setTest(mockTest);  ProcessResult processResult=test.processImpl(mockSspHandler);  assertEquals(mockDefiniteResult,processResult);}  }
class C{  public double cdf(double x){  return Probability.studentT(freedom,x);}  }
class C{  public void updateUI(){  setUI((ButtonUI)UIManager.getUI(this));}  }
class C{  @Override public CloseableReference<Bitmap> decodeFromEncodedImage(EncodedImage encodedImage,Bitmap.Config bitmapConfig){  final BitmapFactory.Options options=getDecodeOptionsForStream(encodedImage,bitmapConfig);  boolean retryOnFail=options.inPreferredConfig != Bitmap.Config.ARGB_8888;  try {    return decodeStaticImageFromStream(encodedImage.getInputStream(),options);  } catch (  RuntimeException re) {    if (retryOnFail) {      return decodeFromEncodedImage(encodedImage,Bitmap.Config.ARGB_8888);    }    throw re;  }}  }
class C{  public ObjIdConcurrentMap(int initialCapacity){  this(initialCapacity,DEFAULT_LOAD_FACTOR,DEFAULT_CONCURRENCY_LEVEL);}  }
class C{  public static <K,V>Map<K,V> collectEntries(Iterator<?> self,Map<K,V> collector){  return collectEntries(self,collector,Closure.IDENTITY);}  }
class C{  @Override public synchronized void destroy() throws SQLException {  try {    connection.setAutoCommit(false);    try (Statement statement=connection.createStatement()){      statement.executeUpdate(sqlProvider.getDropFileTableSQL());    }     connection.commit();  } catch (  SQLException e) {    connection.rollback();    throw e;  }}  }
class C{  public static final String insertImage(ContentResolver cr,Bitmap source,String title,String description){  ContentValues values=new ContentValues();  values.put(Images.Media.TITLE,title);  values.put(Images.Media.DESCRIPTION,description);  values.put(Images.Media.MIME_TYPE,"image/jpeg");  Uri url=null;  String stringUrl=null;  try {    url=cr.insert(EXTERNAL_CONTENT_URI,values);    if (source != null) {      OutputStream imageOut=cr.openOutputStream(url);      try {        source.compress(Bitmap.CompressFormat.JPEG,50,imageOut);      }  finally {        imageOut.close();      }      long id=ContentUris.parseId(url);      Bitmap miniThumb=Images.Thumbnails.getThumbnail(cr,id,Images.Thumbnails.MINI_KIND,null);      Bitmap microThumb=StoreThumbnail(cr,miniThumb,id,50F,50F,Images.Thumbnails.MICRO_KIND);    } else {      Log.e(TAG,"Failed to create thumbnail, removing original");      cr.delete(url,null,null);      url=null;    }  } catch (  Exception e) {    Log.e(TAG,"Failed to insert image",e);    if (url != null) {      cr.delete(url,null,null);      url=null;    }  }  if (url != null) {    stringUrl=url.toString();  }  return stringUrl;}  }
class C{  public static void main(final String[] args){  handleCommandLineArgs(args);  System.out.println("Select the map");  final FileOpen mapSelection=new FileOpen("Select The Map",s_mapFolderLocation,".gif",".png");  final String mapName=mapSelection.getPathString();  if (s_mapFolderLocation == null && mapSelection.getFile() != null) {    s_mapFolderLocation=mapSelection.getFile().getParentFile();  }  if (mapName != null) {    System.out.println("Map : " + mapName);    final PolygonGrabber grabber=new PolygonGrabber(mapName);    grabber.setSize(800,600);    grabber.setLocationRelativeTo(null);    grabber.setVisible(true);    JOptionPane.showMessageDialog(grabber,new JLabel("<html>" + "This is the PolygonGrabber, it will create a polygons.txt file for you. " + "<br>In order to run this, you must already have created a center.txt file. "+ "<br>Please click near the center of every single territory and sea zone on your map. "+ "<br>The grabber will then fill in the territory based on the borders it finds."+ "<br>If the territory shape or borders do not match what you intend, then your borders "+ "<br>might have a gap or differently colored pixel in the border."+ "<br>These borders will define the shape of the territory in TripleA."+ "<br><br>When a territory is inside of another territory, you can turn on 'island mode' to be able to see it."+ "<br><br>You can also load an existing polygons.txt file, then make modifications to it, then save it again."+ "<br><br>LEFT CLICK = fill in a territory's borders."+ "<br><br>Holding CTRL/SHIFT while LEFT CLICKING = add multiple territories together (eg: islands)."+ "<br><br>RIGHT CLICK = save or replace those borders for that territory."+ "<br><br>When finished, save the polygons and exit."+ "</html>"));  } else {    System.out.println("No Image Map Selected. Shutting down.");    System.exit(0);  }}  }
class C{  public SeaGlassIcon(String prefix,String key,int w,int h){  this.width=w;  this.height=h;  this.prefix=prefix;  this.key=key;}  }
class C{  public ccQuad3 tile(ccGridSize pos){  CCTiledGrid3D g=(CCTiledGrid3D)target.getGrid();  return g.tile(pos);}  }
class C{  public Vertex parseElementName(Primitive type,TextStream stream,Map<String,Map<String,Vertex>> elements,boolean debug,Network network){  stream.skipWhitespace();  int position=stream.getPosition();  String name=stream.nextWord();  if (name.indexOf('.') != -1) {    stream.setPosition(position);    name=stream.upTo('.');  }  if (name == null || !Character.isAlphabetic(name.charAt(0))) {    throw new SelfParseException("Invalid element: " + name,stream);  }  if (name.equalsIgnoreCase(NULL)) {    return network.createVertex(Primitive.NULL);  } else   if (name.equalsIgnoreCase(TRUE)) {    return network.createVertex(Primitive.TRUE);  } else   if (name.equalsIgnoreCase(FALSE)) {    return network.createVertex(Primitive.FALSE);  } else   if (name.equalsIgnoreCase(UNKNOWN)) {    return network.createVertex(Primitive.UNKNOWN);  }  Long id=null;  if (stream.peek() == ':') {    if (Character.isDigit(stream.peek())) {      String idText=stream.nextWord();      try {        id=Long.valueOf(idText);      } catch (      NumberFormatException exception) {        throw new SelfParseException("Invalid id: " + idText,stream);      }    }  }  if (type == null) {    if (stream.peek() == '(') {      type=Primitive.FUNCTION;    } else {      if (Character.isUpperCase(name.charAt(0))) {        Map<String,Vertex> elementsForType=elements.get(Primitive.VARIABLE.getIdentity());        Vertex variable=elementsForType.get(name);        if (variable != null) {          return variable;        }        return network.createVertex(new Primitive(name.toLowerCase()));      }      type=Primitive.VARIABLE;    }  }  String typeName=type.getIdentity();  Vertex vertex=null;  Map<String,Vertex> elementsForType=elements.get(typeName);  if (name != null) {    if (elementsForType != null) {      vertex=elementsForType.get(name);    }  }  if (vertex == null && id != null) {    vertex=network.findById(id);    if (vertex == null) {      throw new SelfParseException("Id element reference not found: " + id,stream);    }    if ((elementsForType != null) && (name != null)) {      elementsForType.put(name,vertex);    }    return vertex;  }  if (vertex == null) {    vertex=network.createInstance(type);    vertex.setName(name);    if (name != null) {      elementsForType=elements.get(typeName);      if (elementsForType != null) {        elementsForType.put(name,vertex);      }    }  }  if (type == Primitive.FUNCTION) {    if (stream.peek() == '(') {      position=stream.getPosition();      stream.skip();      stream.skipWhitespace();      if (stream.peek() != ')') {        stream.setPosition(position);        parseArguments(vertex,Primitive.ARGUMENT,1,stream,elements,false,debug,network);      } else {        stream.skip();      }    }  }  return vertex;}  }
class C{  public final LC alignY(String align){  setAlignY(ConstraintParser.parseUnitValueOrAlign(align,false,null));  return this;}  }
class C{  public void execute(Object parent){  mxGraphHierarchyModel model=layout.getModel();  currentXDelta=0.0;  initialCoords(layout.getGraph(),model);  if (fineTuning) {    minNode(model);  }  double bestXDelta=100000000.0;  if (fineTuning) {    for (int i=0; i < maxIterations; i++) {      if (i != 0) {        medianPos(i,model);        minNode(model);      }      if (currentXDelta < bestXDelta) {        for (int j=0; j < model.ranks.size(); j++) {          mxGraphHierarchyRank rank=model.ranks.get(new Integer(j));          Iterator<mxGraphAbstractHierarchyCell> iter=rank.iterator();          while (iter.hasNext()) {            mxGraphAbstractHierarchyCell cell=(mxGraphAbstractHierarchyCell)iter.next();            cell.setX(j,cell.getGeneralPurposeVariable(j));          }        }        bestXDelta=currentXDelta;      } else {        for (int j=0; j < model.ranks.size(); j++) {          mxGraphHierarchyRank rank=model.ranks.get(new Integer(j));          Iterator<mxGraphAbstractHierarchyCell> iter=rank.iterator();          while (iter.hasNext()) {            mxGraphAbstractHierarchyCell cell=(mxGraphAbstractHierarchyCell)iter.next();            cell.setGeneralPurposeVariable(j,(int)cell.getX(j));          }        }      }      currentXDelta=0;    }  }  setCellLocations(layout.getGraph(),model);}  }
class C{  private void attemptShowAnnouncements(HashSet<UpdateMessage> announcements){  for (  UpdateMessage msg : announcements) {    if (msg.isShownOnce() && haveShownMessageBefore(msg)) {      continue;    }    if (msg.getUrl() != null && !msg.getUrl().trim().equals("")) {      showUpdateMessage(msg);    }  }}  }
class C{  public void test_setII(){  Calendar cal=Calendar.getInstance(TimeZone.getTimeZone("EST"));  cal.clear();  cal.set(Calendar.YEAR,2002);  assertTrue("Incorrect result 0: " + cal.getTime().getTime(),cal.getTime().getTime() == 1009861200000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.MONTH,Calendar.MARCH);  assertTrue("Incorrect result 0a: " + cal.getTime(),cal.getTime().getTime() == 1014958800000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.DATE,24);  assertTrue("Incorrect result 0b: " + cal.getTime(),cal.getTime().getTime() == 1011848400000L);  cal.set(Calendar.MONTH,Calendar.OCTOBER);  cal.set(Calendar.DATE,31);  cal.set(Calendar.MONTH,Calendar.NOVEMBER);  cal.set(Calendar.DATE,26);  assertTrue("Incorrect month: " + cal.get(Calendar.MONTH),cal.get(Calendar.MONTH) == Calendar.NOVEMBER);  int dow=cal.get(Calendar.DAY_OF_WEEK);  cal.set(Calendar.DATE,27);  assertTrue("Incorrect DAY_OF_WEEK: " + cal.get(Calendar.DAY_OF_WEEK) + " expected: "+ dow,cal.get(Calendar.DAY_OF_WEEK) != dow);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.DAY_OF_WEEK,Calendar.MONDAY);  assertTrue("Incorrect result 0c1: " + cal.getTime().getTime(),cal.getTime().getTime() == 1010379600000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.DAY_OF_WEEK,Calendar.TUESDAY);  assertTrue("Incorrect result 0c2: " + cal.getTime().getTime(),cal.getTime().getTime() == 1009861200000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.DAY_OF_WEEK,Calendar.THURSDAY);  assertTrue("Incorrect result 0c3: " + cal.getTime(),cal.getTime().getTime() == 1010034000000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.WEEK_OF_MONTH,2);  assertTrue("Incorrect result 0d: " + cal.getTime(),cal.getTime().getTime() == 1010293200000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.DAY_OF_WEEK_IN_MONTH,2);  assertTrue("Incorrect result 0e: " + cal.getTime(),cal.getTime().getTime() == 1010898000000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.WEEK_OF_YEAR,11);  assertTrue("Incorrect result 0f: " + cal.getTime(),cal.getTime().getTime() == 1015736400000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.DATE,24);  cal.set(Calendar.WEEK_OF_YEAR,11);  assertTrue("Incorrect result 0g: " + cal.getTime(),cal.getTime().getTime() == 1011848400000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.get(Calendar.WEEK_OF_YEAR);  cal.set(Calendar.WEEK_OF_YEAR,11);  assertTrue("Incorrect result 0h: " + cal.getTime(),cal.getTime().getTime() == 1015909200000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.DAY_OF_YEAR,170);  cal.set(Calendar.WEEK_OF_YEAR,11);  cal.set(Calendar.MONTH,Calendar.JANUARY);  cal.set(Calendar.DATE,5);  cal.set(Calendar.DAY_OF_WEEK,Calendar.MONDAY);  assertTrue("Incorrect result 1: " + cal.getTime(),cal.getTime().getTime() == 1015822800000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.WEEK_OF_YEAR,11);  cal.set(Calendar.MONTH,Calendar.JANUARY);  cal.set(Calendar.DATE,5);  cal.set(Calendar.DAY_OF_YEAR,170);  cal.set(Calendar.DAY_OF_WEEK,Calendar.MONDAY);  assertTrue("Incorrect result 1a: " + cal.getTime(),cal.getTime().getTime() == 1015822800000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.MONTH,Calendar.MARCH);  cal.set(Calendar.DATE,11);  cal.set(Calendar.DAY_OF_WEEK,Calendar.TUESDAY);  assertTrue("Incorrect result 1b: " + cal.getTime(),cal.getTime().getTime() == 1015822800000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.MONTH,Calendar.MARCH);  cal.set(Calendar.DAY_OF_WEEK,Calendar.TUESDAY);  assertEquals("Incorrect result 1b: " + cal.getTime(),1015304400000L,cal.getTime().getTime());  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.WEEK_OF_YEAR,12);  cal.set(Calendar.DAY_OF_WEEK_IN_MONTH,1);  cal.set(Calendar.WEEK_OF_MONTH,3);  cal.set(Calendar.MONTH,Calendar.MARCH);  cal.set(Calendar.DATE,5);  cal.set(Calendar.DAY_OF_WEEK,Calendar.MONDAY);  assertTrue("Incorrect result 2: " + cal.getTime(),cal.getTime().getTime() == 1015822800000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.WEEK_OF_YEAR,12);  cal.set(Calendar.DAY_OF_WEEK_IN_MONTH,2);  cal.set(Calendar.MONTH,Calendar.MARCH);  cal.set(Calendar.DATE,5);  cal.set(Calendar.DAY_OF_WEEK,Calendar.MONDAY);  assertTrue("Incorrect result 3: " + cal.getTime(),cal.getTime().getTime() == 1015822800000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.WEEK_OF_YEAR,12);  cal.set(Calendar.DAY_OF_WEEK_IN_MONTH,1);  cal.set(Calendar.WEEK_OF_MONTH,3);  cal.set(Calendar.DATE,25);  cal.set(Calendar.DAY_OF_WEEK,Calendar.MONDAY);  assertTrue("Incorrect result 4: " + cal.getTime(),cal.getTime().getTime() == 1010984400000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.WEEK_OF_YEAR,11);  cal.set(Calendar.DATE,25);  cal.set(Calendar.DAY_OF_WEEK,Calendar.MONDAY);  cal.set(Calendar.MONTH,Calendar.JANUARY);  assertTrue("Incorrect result 5: " + cal.getTime(),cal.getTime().getTime() == 1015822800000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.WEEK_OF_YEAR,12);  cal.set(Calendar.DATE,11);  cal.set(Calendar.MONTH,Calendar.MARCH);  assertTrue("Incorrect result 5a: " + cal.getTime(),cal.getTime().getTime() == 1015822800000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.WEEK_OF_YEAR,12);  cal.set(Calendar.DATE,11);  cal.set(Calendar.WEEK_OF_MONTH,1);  cal.set(Calendar.MONTH,Calendar.MARCH);  assertTrue("Incorrect result 5b: " + cal.getTime(),cal.getTime().getTime() == 1015822800000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.WEEK_OF_YEAR,12);  cal.set(Calendar.DATE,5);  cal.set(Calendar.WEEK_OF_MONTH,3);  cal.set(Calendar.DAY_OF_WEEK,Calendar.MONDAY);  cal.set(Calendar.MONTH,Calendar.MARCH);  assertTrue("Incorrect result 5c: " + cal.getTime(),cal.getTime().getTime() == 1015822800000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.WEEK_OF_YEAR,12);  cal.set(Calendar.DAY_OF_WEEK,Calendar.MONDAY);  cal.set(Calendar.MONTH,Calendar.MARCH);  cal.set(Calendar.DATE,11);  assertTrue("Incorrect result 6: " + cal.getTime(),cal.getTime().getTime() == 1015822800000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.WEEK_OF_YEAR,12);  cal.set(Calendar.DAY_OF_WEEK,Calendar.MONDAY);  cal.set(Calendar.DATE,14);  assertTrue("Incorrect result 7: " + cal.getTime(),cal.getTime().getTime() == 1010984400000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.DAY_OF_YEAR,70);  cal.set(Calendar.MONTH,Calendar.JANUARY);  assertTrue("Incorrect result 8: " + cal.getTime(),cal.getTime().getTime() == 1015822800000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.DAY_OF_YEAR,170);  cal.set(Calendar.DATE,11);  cal.set(Calendar.MONTH,Calendar.MARCH);  assertTrue("Incorrect result 8a: " + cal.getTime(),cal.getTime().getTime() == 1015822800000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.DATE,15);  cal.set(Calendar.DAY_OF_YEAR,70);  cal.set(Calendar.MONTH,Calendar.JANUARY);  assertTrue("Incorrect result 8b: " + cal.getTime(),cal.getTime().getTime() == 1015822800000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.DAY_OF_YEAR,70);  cal.set(Calendar.DATE,14);  assertTrue("Incorrect result 9: " + cal.getTime(),cal.getTime().getTime() == 1010984400000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.WEEK_OF_YEAR,15);  cal.set(Calendar.DAY_OF_WEEK,Calendar.THURSDAY);  cal.set(Calendar.DATE,14);  assertTrue("Incorrect result 9a: " + cal.getTime(),cal.getTime().getTime() == 1010984400000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.DAY_OF_WEEK,Calendar.MONDAY);  cal.set(Calendar.DATE,14);  cal.set(Calendar.WEEK_OF_YEAR,11);  assertTrue("Incorrect result 9b: " + cal.getTime(),cal.getTime().getTime() == 1015822800000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.DATE,14);  cal.set(Calendar.WEEK_OF_YEAR,11);  assertTrue("Incorrect result 9c: " + cal.getTime(),cal.getTime().getTime() == 1010984400000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.WEEK_OF_MONTH,1);  cal.set(Calendar.DAY_OF_WEEK,Calendar.THURSDAY);  cal.set(Calendar.MONTH,Calendar.MARCH);  cal.set(Calendar.DATE,11);  assertTrue("Incorrect result 9d: " + cal.getTime(),cal.getTime().getTime() == 1015822800000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.DAY_OF_YEAR,70);  cal.set(Calendar.DAY_OF_WEEK,Calendar.TUESDAY);  assertTrue("Incorrect result 10: " + cal.getTime(),cal.getTime().getTime() == 1015822800000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.DATE,11);  cal.set(Calendar.MONTH,Calendar.MARCH);  cal.set(Calendar.DAY_OF_WEEK_IN_MONTH,1);  assertTrue("Incorrect result 11: " + cal.getTime(),cal.getTime().getTime() == 1015822800000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.DATE,11);  cal.set(Calendar.MONTH,Calendar.MARCH);  cal.set(Calendar.WEEK_OF_YEAR,15);  assertTrue("Incorrect result 12: " + cal.getTime(),cal.getTime().getTime() == 1015822800000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.DATE,11);  cal.set(Calendar.MONTH,Calendar.MARCH);  cal.set(Calendar.WEEK_OF_MONTH,1);  assertTrue("Incorrect result 13: " + cal.getTime(),cal.getTime().getTime() == 1015822800000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.DAY_OF_YEAR,111);  cal.get(Calendar.YEAR);  cal.set(Calendar.MONTH,Calendar.MARCH);  cal.set(Calendar.AM_PM,Calendar.AM);  assertTrue("Incorrect result 14: " + cal.getTime(),cal.getTime().getTime() == 1016686800000L);  int hour=cal.get(Calendar.HOUR);  cal.set(Calendar.HOUR,hour);  cal.set(Calendar.AM_PM,Calendar.PM);  assertEquals("AM_PM not changed",Calendar.PM,cal.get(Calendar.AM_PM));  cal.set(Calendar.AM_PM,Calendar.AM);  assertEquals("AM_PM was changed 1",Calendar.AM,cal.get(Calendar.AM_PM));  int hourOfDay=cal.get(Calendar.HOUR_OF_DAY);  hour=cal.get(Calendar.HOUR);  cal.set(Calendar.AM_PM,Calendar.PM);  assertEquals("AM_PM was changed 2",Calendar.PM,cal.get(Calendar.AM_PM));  assertEquals(hour,cal.get(Calendar.HOUR));  assertEquals(hourOfDay + 12,cal.get(Calendar.HOUR_OF_DAY));  cal=Calendar.getInstance();  int oldValue=cal.get(Calendar.AM_PM);  int newValue=(oldValue == Calendar.AM) ? Calendar.PM : Calendar.AM;  cal.set(Calendar.AM_PM,newValue);  newValue=cal.get(Calendar.AM_PM);  assertTrue(newValue != oldValue);}  }
class C{  public InlineQueryResultDocument.InlineQueryResultDocumentBuilder inputMessageContent(InputMessageContent inputMessageContent){  this.input_message_content=inputMessageContent;  return this;}  }
class C{  public static double distanceTo(double x1,double y1,double z1,double x2,double y2,double z2){  final double a=x1 - x2;  final double b=y1 - y2;  final double c=z1 - z2;  return Math.sqrt(a * a + b * b + c * c);}  }
class C{  private synchronized boolean removeMapping(Object key,Object value){  int hash=Collections.secondaryHash(key);  HashtableEntry<K,V>[] tab=table;  int index=hash & (tab.length - 1);  for (HashtableEntry<K,V> e=tab[index], prev=null; e != null; prev=e, e=e.next) {    if (e.hash == hash && e.key.equals(key)) {      if (!e.value.equals(value)) {        return false;      }      if (prev == null) {        tab[index]=e.next;      } else {        prev.next=e.next;      }      modCount++;      size--;      return true;    }  }  return false;}  }
class C{  public ImageWriter(String mimeType){  super(mimeType);  setDefault("factor",1.0);  setDefault("offset",0.0);}  }
class C{  private static String stripKey(String keyedString){  return keyedString.contains(KEY_SEP) ? KEY_SEP_PATTERN.split(keyedString)[1] : keyedString;}  }
class C{  public static boolean canMean(int actual,int preferred){  if (actual == preferred) {    return true;  }switch (preferred) {case SYNTH_PARAMETER_DECLARATION:case IDENTIFIER:switch (actual) {case IDENTIFIER:case KEYWORD_DEF:case KEYWORD_DEFMACRO:case KEYWORD_CLASS:case KEYWORD_INTERFACE:case KEYWORD_MIXIN:      return true;  }break;case SYNTH_CLASS:case SYNTH_INTERFACE:case SYNTH_MIXIN:case SYNTH_METHOD:case SYNTH_PROPERTY:return actual == IDENTIFIER;case SYNTH_LIST:case SYNTH_MAP:return actual == LEFT_SQUARE_BRACKET;case SYNTH_CAST:return actual == LEFT_PARENTHESIS;case SYNTH_BLOCK:case SYNTH_CLOSURE:return actual == LEFT_CURLY_BRACE;case SYNTH_LABEL:return actual == COLON;case SYNTH_VARIABLE_DECLARATION:return actual == IDENTIFIER;}return false;}  }
class C{  static void compileArrayStoreBarrierLong(Assembler asm,BaselineCompilerImpl compiler){  arrayStoreBarrierHelper(asm,compiler,Entrypoints.longArrayWriteBarrierMethod);}  }
class C{  public void addValue(double value,Comparable rowKey,Comparable columnKey){  addValue(new Double(value),rowKey,columnKey);}  }
class C{  public static double ratio(Vessel<? extends Number> x,Vessel<? extends Number> y){  Number xVal=x.peek();  Number yVal=y.peek();  return xVal.doubleValue() / yVal.doubleValue();}  }
class C{  public static void convolveHV(Kernel kernel,int[] inPixels,int[] outPixels,int width,int height,boolean alpha,int edgeAction){  int index=0;  float[] matrix=kernel.getKernelData(null);  int rows=kernel.getHeight();  int cols=kernel.getWidth();  int rows2=rows / 2;  int cols2=cols / 2;  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++) {      float r=0, g=0, b=0, a=0;      for (int row=-rows2; row <= rows2; row++) {        int iy=y + row;        int ioffset;        if (0 <= iy && iy < height)         ioffset=iy * width; else         if (edgeAction == CLAMP_EDGES)         ioffset=y * width; else         if (edgeAction == WRAP_EDGES)         ioffset=((iy + height) % height) * width; else         continue;        int moffset=cols * (row + rows2) + cols2;        for (int col=-cols2; col <= cols2; col++) {          float f=matrix[moffset + col];          if (f != 0) {            int ix=x + col;            if (!(0 <= ix && ix < width)) {              if (edgeAction == CLAMP_EDGES)               ix=x; else               if (edgeAction == WRAP_EDGES)               ix=(x + width) % width; else               continue;            }            int rgb=inPixels[ioffset + ix];            a+=f * ((rgb >> 24) & 0xff);            r+=f * ((rgb >> 16) & 0xff);            g+=f * ((rgb >> 8) & 0xff);            b+=f * (rgb & 0xff);          }        }      }      int ia=alpha ? PixelUtils.clamp((int)(a + 0.5)) : 0xff;      int ir=PixelUtils.clamp((int)(r + 0.5));      int ig=PixelUtils.clamp((int)(g + 0.5));      int ib=PixelUtils.clamp((int)(b + 0.5));      outPixels[index++]=(ia << 24) | (ir << 16) | (ig << 8)| ib;    }  }}  }
class C{  public static Response serverError(){  Response.ResponseBuilder builder=Response.serverError().entity("");  addResponseHeaders(builder);  return builder.build();}  }
class C{  public CallNormalOp(AST source,Register resultTemp,CompiledMethod method,List<Register> params){  super(source,resultTemp,params);  this.method=method;}  }
class C{  private void init(JsonObject newRule) throws InterruptedException {  delete();  with().body("{ \"foo\": \"bar\" }").put("tests/gateleen/cors/TestResource");  JsonObject rules=new JsonObject();  rules=TestUtils.addRoutingRuleMainStorage(rules);  String TEST_RULE_NAME=SERVER_ROOT + "/tests/gateleen/cors/(.*)";  rules=TestUtils.addRoutingRule(rules,TEST_RULE_NAME,newRule);  TestUtils.putRoutingRules(rules);  get("admin/v1/routing/rules").then().assertThat().body(containsString(TEST_RULE_NAME)).statusCode(200);}  }
class C{  public static byte asLogicalObject(Object objArg){  Object obj=asAbstractVector(objArg);  if (obj instanceof RAbstractIntVector) {    return int2logical(((RAbstractIntVector)obj).getDataAt(0));  } else   if (obj instanceof RAbstractDoubleVector) {    return double2logical(((RAbstractDoubleVector)obj).getDataAt(0));  } else   if (obj instanceof RAbstractLogicalVector) {    return ((RAbstractLogicalVector)obj).getDataAt(0);  } else   if (obj instanceof RAbstractComplexVector) {    return complex2logical(((RAbstractComplexVector)obj).getDataAt(0));  } else   if (obj instanceof RAbstractStringVector) {    return string2logical(((RAbstractStringVector)obj).getDataAt(0));  } else {    return LOGICAL_NA;  }}  }
class C{  private void addContentTimestamps(final CAdESSignatureParameters parameters,final ASN1EncodableVector signedAttributes){  if ((parameters.getContentTimestamps() != null) && !parameters.getContentTimestamps().isEmpty()) {    final List<TimestampToken> contentTimestamps=parameters.getContentTimestamps();    for (    final TimestampToken contentTimestamp : contentTimestamps) {      final ASN1Object asn1Object=DSSASN1Utils.toASN1Primitive(contentTimestamp.getEncoded());      final DERSet attrValues=new DERSet(asn1Object);      final Attribute attribute=new Attribute(id_aa_ets_contentTimestamp,attrValues);      signedAttributes.add(attribute);    }  }}  }
class C{  public boolean isExpired(){  Date expirationDate=getExpirationDate();  return !expirationDate.after(Calendar.getInstance().getTime());}  }
class C{  private void createTriggerIds(TriggerProcess tp){  List<TriggerProcessParameter> params=Collections.emptyList();  TriggerType triggerType=tp.getTriggerDefinition().getType();  TriggerMessage tm=new TriggerMessage(triggerType,params,Collections.singletonList(supplier));  TriggerProcessIdentifier tpi1=new TriggerProcessIdentifier(TriggerProcessIdentifierName.ORGANIZATION_KEY,String.valueOf(tp.getUser().getOrganization().getKey()));  tpi1.setTriggerProcess(tp);  tp.setTriggerProcessIdentifiers(Arrays.asList(tpi1));  if (triggerType == TriggerType.REGISTER_CUSTOMER_FOR_SUPPLIER) {    TriggerProcessIdentifier tpi2=new TriggerProcessIdentifier(TriggerProcessIdentifierName.USER_ID,user.getUserId());    tpi2.setTriggerProcess(tp);    TriggerProcessIdentifier tpi3=new TriggerProcessIdentifier(TriggerProcessIdentifierName.USER_EMAIL,user.getEMail());    tpi3.setTriggerProcess(tp);    tp.setTriggerProcessIdentifiers(Arrays.asList(tpi1,tpi2,tpi3));  }  triggerProcessData=new TriggerProcessMessageData(tp,tm);}  }
class C{  private void selectConsecutiveChangesets(){  if (table.getSelectionCount() > 0) {    final int[] selectedRows=table.getSelectionIndices();    int startPos=Integer.MAX_VALUE;    int endPos=-1;    for (int i=0; i < selectedRows.length; i++) {      if (selectedRows[i] < startPos) {        startPos=selectedRows[i];      }      if (selectedRows[i] > endPos) {        endPos=selectedRows[i];      }    }    table.select(startPos,endPos);    fromVersion=new ChangesetVersionSpec(Integer.parseInt(table.getItem(startPos).getText(COLUMN_CHANGESET)));    toVersion=new ChangesetVersionSpec(Integer.parseInt(table.getItem(endPos).getText(COLUMN_CHANGESET)));  } else {    fromVersion=null;    toVersion=null;  }  updatePageComplete();}  }
class C{  public ParseRole(String name){  this();  setName(name);}  }
class C{  protected void close(){  if (mode != null && log != null) {    log.writeLine(channel,text.toString());    mode=null;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:44.776 -0500",hash_original_method="BFA15C1190E0B500E7A321E762D22239",hash_generated_method="2875FF332AF6CE4B8C63A2367206488B") public ElementType type(){  return theType;}  }
class C{  public static final int foldToASCII(char input[],int inputPos,char output[],int outputPos,int length){  final int end=inputPos + length;  for (int pos=inputPos; pos < end; ++pos) {    final char c=input[pos];    if (c < '\u0080') {      output[outputPos++]=c;    } else {switch (c) {case '\u00C0':case '\u00C1':case '\u00C2':case '\u00C3':case '\u00C4':case '\u00C5':case '\u0100':case '\u0102':case '\u0104':case '\u018F':case '\u01CD':case '\u01DE':case '\u01E0':case '\u01FA':case '\u0200':case '\u0202':case '\u0226':case '\u023A':case '\u1D00':case '\u1E00':case '\u1EA0':case '\u1EA2':case '\u1EA4':case '\u1EA6':case '\u1EA8':case '\u1EAA':case '\u1EAC':case '\u1EAE':case '\u1EB0':case '\u1EB2':case '\u1EB4':case '\u1EB6':case '\u24B6':case '\uFF21':        output[outputPos++]='A';      break;case '\u00E0':case '\u00E1':case '\u00E2':case '\u00E3':case '\u00E4':case '\u00E5':case '\u0101':case '\u0103':case '\u0105':case '\u01CE':case '\u01DF':case '\u01E1':case '\u01FB':case '\u0201':case '\u0203':case '\u0227':case '\u0250':case '\u0259':case '\u025A':case '\u1D8F':case '\u1D95':case '\u1E01':case '\u1E9A':case '\u1EA1':case '\u1EA3':case '\u1EA5':case '\u1EA7':case '\u1EA9':case '\u1EAB':case '\u1EAD':case '\u1EAF':case '\u1EB1':case '\u1EB3':case '\u1EB5':case '\u1EB7':case '\u2090':case '\u2094':case '\u24D0':case '\u2C65':case '\u2C6F':case '\uFF41':    output[outputPos++]='a';  break;case '\uA732':output[outputPos++]='A';output[outputPos++]='A';break;case '\u00C6':case '\u01E2':case '\u01FC':case '\u1D01':output[outputPos++]='A';output[outputPos++]='E';break;case '\uA734':output[outputPos++]='A';output[outputPos++]='O';break;case '\uA736':output[outputPos++]='A';output[outputPos++]='U';break;case '\uA738':case '\uA73A':output[outputPos++]='A';output[outputPos++]='V';break;case '\uA73C':output[outputPos++]='A';output[outputPos++]='Y';break;case '\u249C':output[outputPos++]='(';output[outputPos++]='a';output[outputPos++]=')';break;case '\uA733':output[outputPos++]='a';output[outputPos++]='a';break;case '\u00E6':case '\u01E3':case '\u01FD':case '\u1D02':output[outputPos++]='a';output[outputPos++]='e';break;case '\uA735':output[outputPos++]='a';output[outputPos++]='o';break;case '\uA737':output[outputPos++]='a';output[outputPos++]='u';break;case '\uA739':case '\uA73B':output[outputPos++]='a';output[outputPos++]='v';break;case '\uA73D':output[outputPos++]='a';output[outputPos++]='y';break;case '\u0181':case '\u0182':case '\u0243':case '\u0299':case '\u1D03':case '\u1E02':case '\u1E04':case '\u1E06':case '\u24B7':case '\uFF22':output[outputPos++]='B';break;case '\u0180':case '\u0183':case '\u0253':case '\u1D6C':case '\u1D80':case '\u1E03':case '\u1E05':case '\u1E07':case '\u24D1':case '\uFF42':output[outputPos++]='b';break;case '\u249D':output[outputPos++]='(';output[outputPos++]='b';output[outputPos++]=')';break;case '\u00C7':case '\u0106':case '\u0108':case '\u010A':case '\u010C':case '\u0187':case '\u023B':case '\u0297':case '\u1D04':case '\u1E08':case '\u24B8':case '\uFF23':output[outputPos++]='C';break;case '\u00E7':case '\u0107':case '\u0109':case '\u010B':case '\u010D':case '\u0188':case '\u023C':case '\u0255':case '\u1E09':case '\u2184':case '\u24D2':case '\uA73E':case '\uA73F':case '\uFF43':output[outputPos++]='c';break;case '\u249E':output[outputPos++]='(';output[outputPos++]='c';output[outputPos++]=')';break;case '\u00D0':case '\u010E':case '\u0110':case '\u0189':case '\u018A':case '\u018B':case '\u1D05':case '\u1D06':case '\u1E0A':case '\u1E0C':case '\u1E0E':case '\u1E10':case '\u1E12':case '\u24B9':case '\uA779':case '\uFF24':output[outputPos++]='D';break;case '\u00F0':case '\u010F':case '\u0111':case '\u018C':case '\u0221':case '\u0256':case '\u0257':case '\u1D6D':case '\u1D81':case '\u1D91':case '\u1E0B':case '\u1E0D':case '\u1E0F':case '\u1E11':case '\u1E13':case '\u24D3':case '\uA77A':case '\uFF44':output[outputPos++]='d';break;case '\u01C4':case '\u01F1':output[outputPos++]='D';output[outputPos++]='Z';break;case '\u01C5':case '\u01F2':output[outputPos++]='D';output[outputPos++]='z';break;case '\u249F':output[outputPos++]='(';output[outputPos++]='d';output[outputPos++]=')';break;case '\u0238':output[outputPos++]='d';output[outputPos++]='b';break;case '\u01C6':case '\u01F3':case '\u02A3':case '\u02A5':output[outputPos++]='d';output[outputPos++]='z';break;case '\u00C8':case '\u00C9':case '\u00CA':case '\u00CB':case '\u0112':case '\u0114':case '\u0116':case '\u0118':case '\u011A':case '\u018E':case '\u0190':case '\u0204':case '\u0206':case '\u0228':case '\u0246':case '\u1D07':case '\u1E14':case '\u1E16':case '\u1E18':case '\u1E1A':case '\u1E1C':case '\u1EB8':case '\u1EBA':case '\u1EBC':case '\u1EBE':case '\u1EC0':case '\u1EC2':case '\u1EC4':case '\u1EC6':case '\u24BA':case '\u2C7B':case '\uFF25':output[outputPos++]='E';break;case '\u00E8':case '\u00E9':case '\u00EA':case '\u00EB':case '\u0113':case '\u0115':case '\u0117':case '\u0119':case '\u011B':case '\u01DD':case '\u0205':case '\u0207':case '\u0229':case '\u0247':case '\u0258':case '\u025B':case '\u025C':case '\u025D':case '\u025E':case '\u029A':case '\u1D08':case '\u1D92':case '\u1D93':case '\u1D94':case '\u1E15':case '\u1E17':case '\u1E19':case '\u1E1B':case '\u1E1D':case '\u1EB9':case '\u1EBB':case '\u1EBD':case '\u1EBF':case '\u1EC1':case '\u1EC3':case '\u1EC5':case '\u1EC7':case '\u2091':case '\u24D4':case '\u2C78':case '\uFF45':output[outputPos++]='e';break;case '\u24A0':output[outputPos++]='(';output[outputPos++]='e';output[outputPos++]=')';break;case '\u0191':case '\u1E1E':case '\u24BB':case '\uA730':case '\uA77B':case '\uA7FB':case '\uFF26':output[outputPos++]='F';break;case '\u0192':case '\u1D6E':case '\u1D82':case '\u1E1F':case '\u1E9B':case '\u24D5':case '\uA77C':case '\uFF46':output[outputPos++]='f';break;case '\u24A1':output[outputPos++]='(';output[outputPos++]='f';output[outputPos++]=')';break;case '\uFB00':output[outputPos++]='f';output[outputPos++]='f';break;case '\uFB03':output[outputPos++]='f';output[outputPos++]='f';output[outputPos++]='i';break;case '\uFB04':output[outputPos++]='f';output[outputPos++]='f';output[outputPos++]='l';break;case '\uFB01':output[outputPos++]='f';output[outputPos++]='i';break;case '\uFB02':output[outputPos++]='f';output[outputPos++]='l';break;case '\u011C':case '\u011E':case '\u0120':case '\u0122':case '\u0193':case '\u01E4':case '\u01E5':case '\u01E6':case '\u01E7':case '\u01F4':case '\u0262':case '\u029B':case '\u1E20':case '\u24BC':case '\uA77D':case '\uA77E':case '\uFF27':output[outputPos++]='G';break;case '\u011D':case '\u011F':case '\u0121':case '\u0123':case '\u01F5':case '\u0260':case '\u0261':case '\u1D77':case '\u1D79':case '\u1D83':case '\u1E21':case '\u24D6':case '\uA77F':case '\uFF47':output[outputPos++]='g';break;case '\u24A2':output[outputPos++]='(';output[outputPos++]='g';output[outputPos++]=')';break;case '\u0124':case '\u0126':case '\u021E':case '\u029C':case '\u1E22':case '\u1E24':case '\u1E26':case '\u1E28':case '\u1E2A':case '\u24BD':case '\u2C67':case '\u2C75':case '\uFF28':output[outputPos++]='H';break;case '\u0125':case '\u0127':case '\u021F':case '\u0265':case '\u0266':case '\u02AE':case '\u02AF':case '\u1E23':case '\u1E25':case '\u1E27':case '\u1E29':case '\u1E2B':case '\u1E96':case '\u24D7':case '\u2C68':case '\u2C76':case '\uFF48':output[outputPos++]='h';break;case '\u01F6':output[outputPos++]='H';output[outputPos++]='V';break;case '\u24A3':output[outputPos++]='(';output[outputPos++]='h';output[outputPos++]=')';break;case '\u0195':output[outputPos++]='h';output[outputPos++]='v';break;case '\u00CC':case '\u00CD':case '\u00CE':case '\u00CF':case '\u0128':case '\u012A':case '\u012C':case '\u012E':case '\u0130':case '\u0196':case '\u0197':case '\u01CF':case '\u0208':case '\u020A':case '\u026A':case '\u1D7B':case '\u1E2C':case '\u1E2E':case '\u1EC8':case '\u1ECA':case '\u24BE':case '\uA7FE':case '\uFF29':output[outputPos++]='I';break;case '\u00EC':case '\u00ED':case '\u00EE':case '\u00EF':case '\u0129':case '\u012B':case '\u012D':case '\u012F':case '\u0131':case '\u01D0':case '\u0209':case '\u020B':case '\u0268':case '\u1D09':case '\u1D62':case '\u1D7C':case '\u1D96':case '\u1E2D':case '\u1E2F':case '\u1EC9':case '\u1ECB':case '\u2071':case '\u24D8':case '\uFF49':output[outputPos++]='i';break;case '\u0132':output[outputPos++]='I';output[outputPos++]='J';break;case '\u24A4':output[outputPos++]='(';output[outputPos++]='i';output[outputPos++]=')';break;case '\u0133':output[outputPos++]='i';output[outputPos++]='j';break;case '\u0134':case '\u0248':case '\u1D0A':case '\u24BF':case '\uFF2A':output[outputPos++]='J';break;case '\u0135':case '\u01F0':case '\u0237':case '\u0249':case '\u025F':case '\u0284':case '\u029D':case '\u24D9':case '\u2C7C':case '\uFF4A':output[outputPos++]='j';break;case '\u24A5':output[outputPos++]='(';output[outputPos++]='j';output[outputPos++]=')';break;case '\u0136':case '\u0198':case '\u01E8':case '\u1D0B':case '\u1E30':case '\u1E32':case '\u1E34':case '\u24C0':case '\u2C69':case '\uA740':case '\uA742':case '\uA744':case '\uFF2B':output[outputPos++]='K';break;case '\u0137':case '\u0199':case '\u01E9':case '\u029E':case '\u1D84':case '\u1E31':case '\u1E33':case '\u1E35':case '\u24DA':case '\u2C6A':case '\uA741':case '\uA743':case '\uA745':case '\uFF4B':output[outputPos++]='k';break;case '\u24A6':output[outputPos++]='(';output[outputPos++]='k';output[outputPos++]=')';break;case '\u0139':case '\u013B':case '\u013D':case '\u013F':case '\u0141':case '\u023D':case '\u029F':case '\u1D0C':case '\u1E36':case '\u1E38':case '\u1E3A':case '\u1E3C':case '\u24C1':case '\u2C60':case '\u2C62':case '\uA746':case '\uA748':case '\uA780':case '\uFF2C':output[outputPos++]='L';break;case '\u013A':case '\u013C':case '\u013E':case '\u0140':case '\u0142':case '\u019A':case '\u0234':case '\u026B':case '\u026C':case '\u026D':case '\u1D85':case '\u1E37':case '\u1E39':case '\u1E3B':case '\u1E3D':case '\u24DB':case '\u2C61':case '\uA747':case '\uA749':case '\uA781':case '\uFF4C':output[outputPos++]='l';break;case '\u01C7':output[outputPos++]='L';output[outputPos++]='J';break;case '\u1EFA':output[outputPos++]='L';output[outputPos++]='L';break;case '\u01C8':output[outputPos++]='L';output[outputPos++]='j';break;case '\u24A7':output[outputPos++]='(';output[outputPos++]='l';output[outputPos++]=')';break;case '\u01C9':output[outputPos++]='l';output[outputPos++]='j';break;case '\u1EFB':output[outputPos++]='l';output[outputPos++]='l';break;case '\u02AA':output[outputPos++]='l';output[outputPos++]='s';break;case '\u02AB':output[outputPos++]='l';output[outputPos++]='z';break;case '\u019C':case '\u1D0D':case '\u1E3E':case '\u1E40':case '\u1E42':case '\u24C2':case '\u2C6E':case '\uA7FD':case '\uA7FF':case '\uFF2D':output[outputPos++]='M';break;case '\u026F':case '\u0270':case '\u0271':case '\u1D6F':case '\u1D86':case '\u1E3F':case '\u1E41':case '\u1E43':case '\u24DC':case '\uFF4D':output[outputPos++]='m';break;case '\u24A8':output[outputPos++]='(';output[outputPos++]='m';output[outputPos++]=')';break;case '\u00D1':case '\u0143':case '\u0145':case '\u0147':case '\u014A':case '\u019D':case '\u01F8':case '\u0220':case '\u0274':case '\u1D0E':case '\u1E44':case '\u1E46':case '\u1E48':case '\u1E4A':case '\u24C3':case '\uFF2E':output[outputPos++]='N';break;case '\u00F1':case '\u0144':case '\u0146':case '\u0148':case '\u0149':case '\u014B':case '\u019E':case '\u01F9':case '\u0235':case '\u0272':case '\u0273':case '\u1D70':case '\u1D87':case '\u1E45':case '\u1E47':case '\u1E49':case '\u1E4B':case '\u207F':case '\u24DD':case '\uFF4E':output[outputPos++]='n';break;case '\u01CA':output[outputPos++]='N';output[outputPos++]='J';break;case '\u01CB':output[outputPos++]='N';output[outputPos++]='j';break;case '\u24A9':output[outputPos++]='(';output[outputPos++]='n';output[outputPos++]=')';break;case '\u01CC':output[outputPos++]='n';output[outputPos++]='j';break;case '\u00D2':case '\u00D3':case '\u00D4':case '\u00D5':case '\u00D6':case '\u00D8':case '\u014C':case '\u014E':case '\u0150':case '\u0186':case '\u019F':case '\u01A0':case '\u01D1':case '\u01EA':case '\u01EC':case '\u01FE':case '\u020C':case '\u020E':case '\u022A':case '\u022C':case '\u022E':case '\u0230':case '\u1D0F':case '\u1D10':case '\u1E4C':case '\u1E4E':case '\u1E50':case '\u1E52':case '\u1ECC':case '\u1ECE':case '\u1ED0':case '\u1ED2':case '\u1ED4':case '\u1ED6':case '\u1ED8':case '\u1EDA':case '\u1EDC':case '\u1EDE':case '\u1EE0':case '\u1EE2':case '\u24C4':case '\uA74A':case '\uA74C':case '\uFF2F':output[outputPos++]='O';break;case '\u00F2':case '\u00F3':case '\u00F4':case '\u00F5':case '\u00F6':case '\u00F8':case '\u014D':case '\u014F':case '\u0151':case '\u01A1':case '\u01D2':case '\u01EB':case '\u01ED':case '\u01FF':case '\u020D':case '\u020F':case '\u022B':case '\u022D':case '\u022F':case '\u0231':case '\u0254':case '\u0275':case '\u1D16':case '\u1D17':case '\u1D97':case '\u1E4D':case '\u1E4F':case '\u1E51':case '\u1E53':case '\u1ECD':case '\u1ECF':case '\u1ED1':case '\u1ED3':case '\u1ED5':case '\u1ED7':case '\u1ED9':case '\u1EDB':case '\u1EDD':case '\u1EDF':case '\u1EE1':case '\u1EE3':case '\u2092':case '\u24DE':case '\u2C7A':case '\uA74B':case '\uA74D':case '\uFF4F':output[outputPos++]='o';break;case '\u0152':case '\u0276':output[outputPos++]='O';output[outputPos++]='E';break;case '\uA74E':output[outputPos++]='O';output[outputPos++]='O';break;case '\u0222':case '\u1D15':output[outputPos++]='O';output[outputPos++]='U';break;case '\u24AA':output[outputPos++]='(';output[outputPos++]='o';output[outputPos++]=')';break;case '\u0153':case '\u1D14':output[outputPos++]='o';output[outputPos++]='e';break;case '\uA74F':output[outputPos++]='o';output[outputPos++]='o';break;case '\u0223':output[outputPos++]='o';output[outputPos++]='u';break;case '\u01A4':case '\u1D18':case '\u1E54':case '\u1E56':case '\u24C5':case '\u2C63':case '\uA750':case '\uA752':case '\uA754':case '\uFF30':output[outputPos++]='P';break;case '\u01A5':case '\u1D71':case '\u1D7D':case '\u1D88':case '\u1E55':case '\u1E57':case '\u24DF':case '\uA751':case '\uA753':case '\uA755':case '\uA7FC':case '\uFF50':output[outputPos++]='p';break;case '\u24AB':output[outputPos++]='(';output[outputPos++]='p';output[outputPos++]=')';break;case '\u024A':case '\u24C6':case '\uA756':case '\uA758':case '\uFF31':output[outputPos++]='Q';break;case '\u0138':case '\u024B':case '\u02A0':case '\u24E0':case '\uA757':case '\uA759':case '\uFF51':output[outputPos++]='q';break;case '\u24AC':output[outputPos++]='(';output[outputPos++]='q';output[outputPos++]=')';break;case '\u0239':output[outputPos++]='q';output[outputPos++]='p';break;case '\u0154':case '\u0156':case '\u0158':case '\u0210':case '\u0212':case '\u024C':case '\u0280':case '\u0281':case '\u1D19':case '\u1D1A':case '\u1E58':case '\u1E5A':case '\u1E5C':case '\u1E5E':case '\u24C7':case '\u2C64':case '\uA75A':case '\uA782':case '\uFF32':output[outputPos++]='R';break;case '\u0155':case '\u0157':case '\u0159':case '\u0211':case '\u0213':case '\u024D':case '\u027C':case '\u027D':case '\u027E':case '\u027F':case '\u1D63':case '\u1D72':case '\u1D73':case '\u1D89':case '\u1E59':case '\u1E5B':case '\u1E5D':case '\u1E5F':case '\u24E1':case '\uA75B':case '\uA783':case '\uFF52':output[outputPos++]='r';break;case '\u24AD':output[outputPos++]='(';output[outputPos++]='r';output[outputPos++]=')';break;case '\u015A':case '\u015C':case '\u015E':case '\u0160':case '\u0218':case '\u1E60':case '\u1E62':case '\u1E64':case '\u1E66':case '\u1E68':case '\u24C8':case '\uA731':case '\uA785':case '\uFF33':output[outputPos++]='S';break;case '\u015B':case '\u015D':case '\u015F':case '\u0161':case '\u017F':case '\u0219':case '\u023F':case '\u0282':case '\u1D74':case '\u1D8A':case '\u1E61':case '\u1E63':case '\u1E65':case '\u1E67':case '\u1E69':case '\u1E9C':case '\u1E9D':case '\u24E2':case '\uA784':case '\uFF53':output[outputPos++]='s';break;case '\u1E9E':output[outputPos++]='S';output[outputPos++]='S';break;case '\u24AE':output[outputPos++]='(';output[outputPos++]='s';output[outputPos++]=')';break;case '\u00DF':output[outputPos++]='s';output[outputPos++]='s';break;case '\uFB06':output[outputPos++]='s';output[outputPos++]='t';break;case '\u0162':case '\u0164':case '\u0166':case '\u01AC':case '\u01AE':case '\u021A':case '\u023E':case '\u1D1B':case '\u1E6A':case '\u1E6C':case '\u1E6E':case '\u1E70':case '\u24C9':case '\uA786':case '\uFF34':output[outputPos++]='T';break;case '\u0163':case '\u0165':case '\u0167':case '\u01AB':case '\u01AD':case '\u021B':case '\u0236':case '\u0287':case '\u0288':case '\u1D75':case '\u1E6B':case '\u1E6D':case '\u1E6F':case '\u1E71':case '\u1E97':case '\u24E3':case '\u2C66':case '\uFF54':output[outputPos++]='t';break;case '\u00DE':case '\uA766':output[outputPos++]='T';output[outputPos++]='H';break;case '\uA728':output[outputPos++]='T';output[outputPos++]='Z';break;case '\u24AF':output[outputPos++]='(';output[outputPos++]='t';output[outputPos++]=')';break;case '\u02A8':output[outputPos++]='t';output[outputPos++]='c';break;case '\u00FE':case '\u1D7A':case '\uA767':output[outputPos++]='t';output[outputPos++]='h';break;case '\u02A6':output[outputPos++]='t';output[outputPos++]='s';break;case '\uA729':output[outputPos++]='t';output[outputPos++]='z';break;case '\u00D9':case '\u00DA':case '\u00DB':case '\u00DC':case '\u0168':case '\u016A':case '\u016C':case '\u016E':case '\u0170':case '\u0172':case '\u01AF':case '\u01D3':case '\u01D5':case '\u01D7':case '\u01D9':case '\u01DB':case '\u0214':case '\u0216':case '\u0244':case '\u1D1C':case '\u1D7E':case '\u1E72':case '\u1E74':case '\u1E76':case '\u1E78':case '\u1E7A':case '\u1EE4':case '\u1EE6':case '\u1EE8':case '\u1EEA':case '\u1EEC':case '\u1EEE':case '\u1EF0':case '\u24CA':case '\uFF35':output[outputPos++]='U';break;case '\u00F9':case '\u00FA':case '\u00FB':case '\u00FC':case '\u0169':case '\u016B':case '\u016D':case '\u016F':case '\u0171':case '\u0173':case '\u01B0':case '\u01D4':case '\u01D6':case '\u01D8':case '\u01DA':case '\u01DC':case '\u0215':case '\u0217':case '\u0289':case '\u1D64':case '\u1D99':case '\u1E73':case '\u1E75':case '\u1E77':case '\u1E79':case '\u1E7B':case '\u1EE5':case '\u1EE7':case '\u1EE9':case '\u1EEB':case '\u1EED':case '\u1EEF':case '\u1EF1':case '\u24E4':case '\uFF55':output[outputPos++]='u';break;case '\u24B0':output[outputPos++]='(';output[outputPos++]='u';output[outputPos++]=')';break;case '\u1D6B':output[outputPos++]='u';output[outputPos++]='e';break;case '\u01B2':case '\u0245':case '\u1D20':case '\u1E7C':case '\u1E7E':case '\u1EFC':case '\u24CB':case '\uA75E':case '\uA768':case '\uFF36':output[outputPos++]='V';break;case '\u028B':case '\u028C':case '\u1D65':case '\u1D8C':case '\u1E7D':case '\u1E7F':case '\u24E5':case '\u2C71':case '\u2C74':case '\uA75F':case '\uFF56':output[outputPos++]='v';break;case '\uA760':output[outputPos++]='V';output[outputPos++]='Y';break;case '\u24B1':output[outputPos++]='(';output[outputPos++]='v';output[outputPos++]=')';break;case '\uA761':output[outputPos++]='v';output[outputPos++]='y';break;case '\u0174':case '\u01F7':case '\u1D21':case '\u1E80':case '\u1E82':case '\u1E84':case '\u1E86':case '\u1E88':case '\u24CC':case '\u2C72':case '\uFF37':output[outputPos++]='W';break;case '\u0175':case '\u01BF':case '\u028D':case '\u1E81':case '\u1E83':case '\u1E85':case '\u1E87':case '\u1E89':case '\u1E98':case '\u24E6':case '\u2C73':case '\uFF57':output[outputPos++]='w';break;case '\u24B2':output[outputPos++]='(';output[outputPos++]='w';output[outputPos++]=')';break;case '\u1E8A':case '\u1E8C':case '\u24CD':case '\uFF38':output[outputPos++]='X';break;case '\u1D8D':case '\u1E8B':case '\u1E8D':case '\u2093':case '\u24E7':case '\uFF58':output[outputPos++]='x';break;case '\u24B3':output[outputPos++]='(';output[outputPos++]='x';output[outputPos++]=')';break;case '\u00DD':case '\u0176':case '\u0178':case '\u01B3':case '\u0232':case '\u024E':case '\u028F':case '\u1E8E':case '\u1EF2':case '\u1EF4':case '\u1EF6':case '\u1EF8':case '\u1EFE':case '\u24CE':case '\uFF39':output[outputPos++]='Y';break;case '\u00FD':case '\u00FF':case '\u0177':case '\u01B4':case '\u0233':case '\u024F':case '\u028E':case '\u1E8F':case '\u1E99':case '\u1EF3':case '\u1EF5':case '\u1EF7':case '\u1EF9':case '\u1EFF':case '\u24E8':case '\uFF59':output[outputPos++]='y';break;case '\u24B4':output[outputPos++]='(';output[outputPos++]='y';output[outputPos++]=')';break;case '\u0179':case '\u017B':case '\u017D':case '\u01B5':case '\u021C':case '\u0224':case '\u1D22':case '\u1E90':case '\u1E92':case '\u1E94':case '\u24CF':case '\u2C6B':case '\uA762':case '\uFF3A':output[outputPos++]='Z';break;case '\u017A':case '\u017C':case '\u017E':case '\u01B6':case '\u021D':case '\u0225':case '\u0240':case '\u0290':case '\u0291':case '\u1D76':case '\u1D8E':case '\u1E91':case '\u1E93':case '\u1E95':case '\u24E9':case '\u2C6C':case '\uA763':case '\uFF5A':output[outputPos++]='z';break;case '\u24B5':output[outputPos++]='(';output[outputPos++]='z';output[outputPos++]=')';break;case '\u2070':case '\u2080':case '\u24EA':case '\u24FF':case '\uFF10':output[outputPos++]='0';break;case '\u00B9':case '\u2081':case '\u2460':case '\u24F5':case '\u2776':case '\u2780':case '\u278A':case '\uFF11':output[outputPos++]='1';break;case '\u2488':output[outputPos++]='1';output[outputPos++]='.';break;case '\u2474':output[outputPos++]='(';output[outputPos++]='1';output[outputPos++]=')';break;case '\u00B2':case '\u2082':case '\u2461':case '\u24F6':case '\u2777':case '\u2781':case '\u278B':case '\uFF12':output[outputPos++]='2';break;case '\u2489':output[outputPos++]='2';output[outputPos++]='.';break;case '\u2475':output[outputPos++]='(';output[outputPos++]='2';output[outputPos++]=')';break;case '\u00B3':case '\u2083':case '\u2462':case '\u24F7':case '\u2778':case '\u2782':case '\u278C':case '\uFF13':output[outputPos++]='3';break;case '\u248A':output[outputPos++]='3';output[outputPos++]='.';break;case '\u2476':output[outputPos++]='(';output[outputPos++]='3';output[outputPos++]=')';break;case '\u2074':case '\u2084':case '\u2463':case '\u24F8':case '\u2779':case '\u2783':case '\u278D':case '\uFF14':output[outputPos++]='4';break;case '\u248B':output[outputPos++]='4';output[outputPos++]='.';break;case '\u2477':output[outputPos++]='(';output[outputPos++]='4';output[outputPos++]=')';break;case '\u2075':case '\u2085':case '\u2464':case '\u24F9':case '\u277A':case '\u2784':case '\u278E':case '\uFF15':output[outputPos++]='5';break;case '\u248C':output[outputPos++]='5';output[outputPos++]='.';break;case '\u2478':output[outputPos++]='(';output[outputPos++]='5';output[outputPos++]=')';break;case '\u2076':case '\u2086':case '\u2465':case '\u24FA':case '\u277B':case '\u2785':case '\u278F':case '\uFF16':output[outputPos++]='6';break;case '\u248D':output[outputPos++]='6';output[outputPos++]='.';break;case '\u2479':output[outputPos++]='(';output[outputPos++]='6';output[outputPos++]=')';break;case '\u2077':case '\u2087':case '\u2466':case '\u24FB':case '\u277C':case '\u2786':case '\u2790':case '\uFF17':output[outputPos++]='7';break;case '\u248E':output[outputPos++]='7';output[outputPos++]='.';break;case '\u247A':output[outputPos++]='(';output[outputPos++]='7';output[outputPos++]=')';break;case '\u2078':case '\u2088':case '\u2467':case '\u24FC':case '\u277D':case '\u2787':case '\u2791':case '\uFF18':output[outputPos++]='8';break;case '\u248F':output[outputPos++]='8';output[outputPos++]='.';break;case '\u247B':output[outputPos++]='(';output[outputPos++]='8';output[outputPos++]=')';break;case '\u2079':case '\u2089':case '\u2468':case '\u24FD':case '\u277E':case '\u2788':case '\u2792':case '\uFF19':output[outputPos++]='9';break;case '\u2490':output[outputPos++]='9';output[outputPos++]='.';break;case '\u247C':output[outputPos++]='(';output[outputPos++]='9';output[outputPos++]=')';break;case '\u2469':case '\u24FE':case '\u277F':case '\u2789':case '\u2793':output[outputPos++]='1';output[outputPos++]='0';break;case '\u2491':output[outputPos++]='1';output[outputPos++]='0';output[outputPos++]='.';break;case '\u247D':output[outputPos++]='(';output[outputPos++]='1';output[outputPos++]='0';output[outputPos++]=')';break;case '\u246A':case '\u24EB':output[outputPos++]='1';output[outputPos++]='1';break;case '\u2492':output[outputPos++]='1';output[outputPos++]='1';output[outputPos++]='.';break;case '\u247E':output[outputPos++]='(';output[outputPos++]='1';output[outputPos++]='1';output[outputPos++]=')';break;case '\u246B':case '\u24EC':output[outputPos++]='1';output[outputPos++]='2';break;case '\u2493':output[outputPos++]='1';output[outputPos++]='2';output[outputPos++]='.';break;case '\u247F':output[outputPos++]='(';output[outputPos++]='1';output[outputPos++]='2';output[outputPos++]=')';break;case '\u246C':case '\u24ED':output[outputPos++]='1';output[outputPos++]='3';break;case '\u2494':output[outputPos++]='1';output[outputPos++]='3';output[outputPos++]='.';break;case '\u2480':output[outputPos++]='(';output[outputPos++]='1';output[outputPos++]='3';output[outputPos++]=')';break;case '\u246D':case '\u24EE':output[outputPos++]='1';output[outputPos++]='4';break;case '\u2495':output[outputPos++]='1';output[outputPos++]='4';output[outputPos++]='.';break;case '\u2481':output[outputPos++]='(';output[outputPos++]='1';output[outputPos++]='4';output[outputPos++]=')';break;case '\u246E':case '\u24EF':output[outputPos++]='1';output[outputPos++]='5';break;case '\u2496':output[outputPos++]='1';output[outputPos++]='5';output[outputPos++]='.';break;case '\u2482':output[outputPos++]='(';output[outputPos++]='1';output[outputPos++]='5';output[outputPos++]=')';break;case '\u246F':case '\u24F0':output[outputPos++]='1';output[outputPos++]='6';break;case '\u2497':output[outputPos++]='1';output[outputPos++]='6';output[outputPos++]='.';break;case '\u2483':output[outputPos++]='(';output[outputPos++]='1';output[outputPos++]='6';output[outputPos++]=')';break;case '\u2470':case '\u24F1':output[outputPos++]='1';output[outputPos++]='7';break;case '\u2498':output[outputPos++]='1';output[outputPos++]='7';output[outputPos++]='.';break;case '\u2484':output[outputPos++]='(';output[outputPos++]='1';output[outputPos++]='7';output[outputPos++]=')';break;case '\u2471':case '\u24F2':output[outputPos++]='1';output[outputPos++]='8';break;case '\u2499':output[outputPos++]='1';output[outputPos++]='8';output[outputPos++]='.';break;case '\u2485':output[outputPos++]='(';output[outputPos++]='1';output[outputPos++]='8';output[outputPos++]=')';break;case '\u2472':case '\u24F3':output[outputPos++]='1';output[outputPos++]='9';break;case '\u249A':output[outputPos++]='1';output[outputPos++]='9';output[outputPos++]='.';break;case '\u2486':output[outputPos++]='(';output[outputPos++]='1';output[outputPos++]='9';output[outputPos++]=')';break;case '\u2473':case '\u24F4':output[outputPos++]='2';output[outputPos++]='0';break;case '\u249B':output[outputPos++]='2';output[outputPos++]='0';output[outputPos++]='.';break;case '\u2487':output[outputPos++]='(';output[outputPos++]='2';output[outputPos++]='0';output[outputPos++]=')';break;case '\u00AB':case '\u00BB':case '\u201C':case '\u201D':case '\u201E':case '\u2033':case '\u2036':case '\u275D':case '\u275E':case '\u276E':case '\u276F':case '\uFF02':output[outputPos++]='"';break;case '\u2018':case '\u2019':case '\u201A':case '\u201B':case '\u2032':case '\u2035':case '\u2039':case '\u203A':case '\u275B':case '\u275C':case '\uFF07':output[outputPos++]='\'';break;case '\u2010':case '\u2011':case '\u2012':case '\u2013':case '\u2014':case '\u207B':case '\u208B':case '\uFF0D':output[outputPos++]='-';break;case '\u2045':case '\u2772':case '\uFF3B':output[outputPos++]='[';break;case '\u2046':case '\u2773':case '\uFF3D':output[outputPos++]=']';break;case '\u207D':case '\u208D':case '\u2768':case '\u276A':case '\uFF08':output[outputPos++]='(';break;case '\u2E28':output[outputPos++]='(';output[outputPos++]='(';break;case '\u207E':case '\u208E':case '\u2769':case '\u276B':case '\uFF09':output[outputPos++]=')';break;case '\u2E29':output[outputPos++]=')';output[outputPos++]=')';break;case '\u276C':case '\u2770':case '\uFF1C':output[outputPos++]='<';break;case '\u276D':case '\u2771':case '\uFF1E':output[outputPos++]='>';break;case '\u2774':case '\uFF5B':output[outputPos++]='{';break;case '\u2775':case '\uFF5D':output[outputPos++]='}';break;case '\u207A':case '\u208A':case '\uFF0B':output[outputPos++]='+';break;case '\u207C':case '\u208C':case '\uFF1D':output[outputPos++]='=';break;case '\uFF01':output[outputPos++]='!';break;case '\u203C':output[outputPos++]='!';output[outputPos++]='!';break;case '\u2049':output[outputPos++]='!';output[outputPos++]='?';break;case '\uFF03':output[outputPos++]='#';break;case '\uFF04':output[outputPos++]='$';break;case '\u2052':case '\uFF05':output[outputPos++]='%';break;case '\uFF06':output[outputPos++]='&';break;case '\u204E':case '\uFF0A':output[outputPos++]='*';break;case '\uFF0C':output[outputPos++]=',';break;case '\uFF0E':output[outputPos++]='.';break;case '\u2044':case '\uFF0F':output[outputPos++]='/';break;case '\uFF1A':output[outputPos++]=':';break;case '\u204F':case '\uFF1B':output[outputPos++]=';';break;case '\uFF1F':output[outputPos++]='?';break;case '\u2047':output[outputPos++]='?';output[outputPos++]='?';break;case '\u2048':output[outputPos++]='?';output[outputPos++]='!';break;case '\uFF20':output[outputPos++]='@';break;case '\uFF3C':output[outputPos++]='\\';break;case '\u2038':case '\uFF3E':output[outputPos++]='^';break;case '\uFF3F':output[outputPos++]='_';break;case '\u2053':case '\uFF5E':output[outputPos++]='~';break;default :output[outputPos++]=c;break;}}}return outputPos;}  }
class C{  protected void closingCancel(){}  }
class C{  public static ProgressIndicator progressIndicator(int sz){  ProgressIndicator pi=new ProgressIndicator();  pi.setMaxWidth(sz);  pi.setMaxHeight(sz);  return pi;}  }
class C{  @Override public void updateAsciiStream(int columnIndex,InputStream x) throws SQLException {  updateAsciiStream(columnIndex,x,-1);}  }
class C{  @Transactional public Bankreconciliation addToBankReconcilation(final CVoucherHeader vouherHeader,final InstrumentHeader instrumentHeader) throws ApplicationRuntimeException {  final EgwStatus instrumentReconciledStatus=(EgwStatus)persistenceService.find("from EgwStatus where upper(moduletype)=upper('Instrument') and upper(description)=upper(?)",FinancialConstants.INSTRUMENT_RECONCILED_STATUS);  return addToBankReconcilationWithLoop(vouherHeader,instrumentHeader,instrumentReconciledStatus);}  }
class C{  public <T>T fromXML(final HierarchicalStreamDriver driver,final Reader xml,final TypePermission... permissions) throws IOException, ClassNotFoundException {  final XStream outer=new XStream(driver);  for (  final TypePermission permission : permissions) {    outer.addPermission(permission);  }  final HierarchicalStreamReader reader=driver.createReader(xml);  final ObjectInputStream configIn=outer.createObjectInputStream(reader);  try {    final XStream configured=(XStream)configIn.readObject();    final ObjectInputStream in=configured.createObjectInputStream(reader);    try {      @SuppressWarnings("unchecked") final T t=(T)in.readObject();      return t;    }  finally {      in.close();    }  }  finally {    configIn.close();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:34.004 -0500",hash_original_method="3978D6C321E5167908096EFEB475874E",hash_generated_method="E97DA93FBE369BF9AEF002CD7047468D") public synchronized void update(){  final boolean isSyncInProgress=!mActiveSyncContexts.isEmpty();  if (isSyncInProgress == mLastWasSyncing)   return;  final long now=SystemClock.elapsedRealtime();  if (isSyncInProgress) {    mWhenSyncStarted=now;  } else {    mTimeSpentSyncing+=now - mWhenSyncStarted;  }  mLastWasSyncing=isSyncInProgress;}  }
class C{  public static ObjectAnimator ofFloat(Object target,String propertyName,float... values){  ObjectAnimator anim=new ObjectAnimator(target,propertyName);  anim.setFloatValues(values);  return anim;}  }
class C{  public ChartEntity(Shape area){  this(area,null);}  }
class C{  public FlipTransition(){}  }
class C{  private static void changeTopology(Ignite parent,int add,int rmv,String type){  Collection<ComputeTaskFuture<?>> tasks=new ArrayList<>();  IgniteCompute comp=parent.compute().withAsync();  while (add-- > 0) {    comp.execute(ClientStartNodeTask.class,type);    tasks.add(comp.future());  }  for (  ComputeTaskFuture<?> task : tasks)   task.get();  while (rmv-- > 0)   parent.compute().execute(ClientStopNodeTask.class,type);  Collection<String> gridNames=new ArrayList<>();  for (  Ignite g : G.allGrids())   gridNames.add(g.name());  parent.log().info(">>> Available grids: " + gridNames);}  }
class C{  public boolean start(float translateX,float translateY){  if (mRunning) {    return false;  }  mStartRunTime=NEVER;  mTranslateX=translateX;  mTranslateY=translateY;  mStop=false;  mRunning=true;  mHeader.postDelayed(this,SNAP_DELAY);  return true;}  }
class C{  public static void close(@Nullable Closeable closeable){  if (null == closeable) {    return;  }  try {    Closeables.close(closeable,true);  } catch (  IOException e) {  }}  }
class C{  protected void sequence_ArrayBindingPattern_ObjectBindingPattern(ISerializationContext context,BindingPattern semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static double max(final double a,final double b,final double c){  return Math.max(Math.max(a,b),c);}  }
class C{  public boolean shouldExtendIncludes(){  String str=settings.getString(DelphiPlugin.INCLUDE_EXTEND_KEY);  return "true".equals(str);}  }
class C{  private String encodeUri(String uri){  String newUri="";  StringTokenizer st=new StringTokenizer(uri,"/ ",true);  while (st.hasMoreTokens()) {    String tok=st.nextToken();    if (tok.equals("/"))     newUri+="/"; else     if (tok.equals(" "))     newUri+="%20"; else {      newUri+=URLEncoder.encode(tok);    }  }  return newUri;}  }
class C{  private void giveUpAudioFocus(){  LogUtils.d(TAG,"giveUpAudioFocus");  if (mAudioFocus == AUDIO_FOCUSED) {    if (mAudioManager.abandonAudioFocus(this) == AudioManager.AUDIOFOCUS_REQUEST_GRANTED) {      mAudioFocus=AUDIO_NO_FOCUS_NO_DUCK;    }  }}  }
class C{  Logger(LogConfiguration logConfiguration,Printer printer){  this.logConfiguration=logConfiguration;  this.printer=printer;}  }
class C{  UnknownScopeConstantException(ParserRuleContext ctx,String i18n,Object... arguments){  super(ctx,i18n,arguments);}  }
class C{  public static boolean vPoolSpecifiesHighAvailabilityLocal(final VirtualPool virtualPool){  String highAvailability=virtualPool.getHighAvailability();  return NullColumnValueGetter.isNotNullValue(highAvailability) && (VirtualPool.HighAvailabilityType.vplex_local.name().equals(highAvailability));}  }
class C{  private boolean loadUnpackedUMD(String filename) throws IOException, GeneralJpcspException {  if (doUmdBuffering) {    return false;  }  File file=new File(filename);  if (file.exists()) {    RandomAccessFile raf=new RandomAccessFile(file,"r");    FileChannel roChannel=raf.getChannel();    ByteBuffer readbuffer=roChannel.map(FileChannel.MapMode.READ_ONLY,0,(int)roChannel.size());    emulator.load("disc0:/PSP_GAME/SYSDIR/EBOOT.BIN",readbuffer);    raf.close();    log.info("Using unpacked UMD EBOOT.BIN image");    return true;  }  return false;}  }
class C{  public boolean isRecurse(){  return fieldRecurse;}  }
class C{  public void testDetectLanguagePl(){  LOGGER.debug("detectLanguage pl");  LanguageDetector instance=LanguageDetector.getInstance();  Document doc;  try {    doc=Jsoup.parse(new File(PATH + "pl.wikipedia.org-wiki_20140701.html"),UTF_8);    LOGGER.debug("start detection");    assertEquals("pl",instance.detectLanguage(doc.text()).getDetectedLanguage());    assertEquals("pl",instance.detectLanguage(doc.text().toLowerCase()).getDetectedLanguage());    assertEquals("pl",instance.detectLanguage(doc.text().toUpperCase()).getDetectedLanguage());    LOGGER.debug("detection ended");  } catch (  IOException ex) {    LOGGER.error(ex);  }catch (  NullPointerException npe) {    LOGGER.error("error while fetching page " + npe);  }}  }
class C{  public void waitUntilEnd() throws TimeoutException {  waitUntilEnd(Long.MAX_VALUE);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public int eval1(INode state){  JumpingSolitaireState node=(JumpingSolitaireState)state;  int nf=0;  for (int i=0; i < node.filled.length; i++) {    if (node.filled[i])     nf++;  }  int ni=numIsolated(node);  int hn=nf - ni;  int gn=0;  DepthTransition t=(DepthTransition)state.storedData();  if (t != null) {    gn=t.depth;  }  return gn + hn;}  }
class C{  public static int[][] loadGIFFile(InputStream str,boolean flipY) throws IOException {  return loadPNGFile(str,flipY);}  }
class C{  private void refreshConditions(){  Pair<ArrangementMatchCondition,ArrangementSettingsToken> pair=buildCondition();  ArrangementMatchCondition condition=pair == null ? null : pair.first;  for (  ArrangementUiComponent component : myComponents.values()) {    ArrangementSettingsToken token=component.getToken();    if (token == null) {      continue;    }    boolean enabled=isEnabled(condition,token);    component.setEnabled(enabled);    if (!enabled) {      component.setSelected(false);    }  }}  }
class C{  public void decodeJBIG2(DataInput dataInput) throws IOException, JBIG2Exception {}  }
class C{  protected void registerConversationHandler(StateType fromState,Object conversationState,String functionName,StateType toState){  if (!activityQueues.containsKey(fromState)) {    LinkedBlockingQueue<AbstractActivity<?>> queue=new LinkedBlockingQueue<AbstractActivity<?>>();    activityQueues.put(fromState,queue);  }  try {    Method method=this.getClass().getMethod(functionName,AbstractActivity.class);    transitions.put(new Pair<StateType,Object>(fromState,conversationState),new Pair<StateType,Method>(toState,method));  } catch (  SecurityException e) {    e.printStackTrace();  }catch (  NoSuchMethodException e) {    e.printStackTrace();  }  conversationQueueMaping.put(conversationState,fromState);  conversationStates.add(conversationState);}  }
class C{  public void appendToBuffer(StringBuilder buf){  Iterator<Polygon> iter=polygons.iterator();  while (iter.hasNext()) {    Polygon poly=iter.next();    poly.appendToBuffer(buf);    if (iter.hasNext()) {      buf.append(" -- ");    }  }}  }
class C{  private void addAdditionalFeatureWeights(String additionalFeatureWeightsFile){  try {    Counter<String> weights=IOTools.readWeightsPlain(additionalFeatureWeightsFile);    System.err.println("read weights: ");    for (    Entry<String,Double> entry : weights.entrySet()) {      if (!wtsAccumulator.containsKey(entry.getKey())) {        wtsAccumulator.setCount(entry.getKey(),entry.getValue());        System.err.println("setting feature: " + entry.getKey() + " = "+ entry.getValue());      } else       System.err.println("skipping feature: " + entry.getKey());    }  } catch (  IOException e) {    e.printStackTrace();    logger.fatal("Could not load additional weights from : {}",additionalFeatureWeightsFile);  }}  }
class C{  @Override public T read(Kryo kryo,Input input,Class<T> aClass){  byte[] data=new byte[input.readInt()];  input.readBytes(data);  try {    try (ByteArrayInputStream stream=new ByteArrayInputStream(data)){      HTMObjectInput reader=serializer.getObjectInput(stream);      T t=(T)reader.readObject(aClass);      postDeSerialize(t);      return t;    }   } catch (  Exception e) {    throw new KryoException(e);  }}  }
class C{  public DataReadOnlyException(String message,Throwable cause){  super(message,cause);}  }
class C{  protected void removeCurrentRow(){  ((Row)getCurrentRow()).setDeleted();  rvh.remove(cursorPos - 1);  --numRows;}  }
class C{  public void update(double x_[],double s){  Matrix X=new Matrix(MatrixUtils.addBias(new double[][]{x_}));  update(X,s);}  }
class C{  public Warmer warm(){  return new Warmer(context).warm();}  }
class C{  public Query asQuery(String... types) throws IOException {  BytesReference br=this.bytes();  assert br != null : "innerBytes must be set with .bytes(bytes) or .freeze() before parsing";  XContentParser innerParser=XContentHelper.createParser(br);  String[] origTypes=QueryParseContext.setTypesWithPrevious(types);  XContentParser old=parseContext.parser();  parseContext.parser(innerParser);  try {    return parseContext.parseInnerQuery();  }  finally {    parseContext.parser(old);    QueryParseContext.setTypes(origTypes);  }}  }
class C{  public void clearCommands(){synchronized (commands) {    commands.clear();  }  updateImages();}  }
class C{  private void processFragments(List fragments,StringBuilder stringBuilder){  for (  Object fragment : fragments) {    String fragmentString=String.valueOf(fragment).trim();    if (stringBuilder.length() > 0) {      stringBuilder.append(' ');    }    stringBuilder.append(fragmentString);  }}  }
class C{  @Override public com.lynden.gmapsfx.javascript.object.Marker convert(){  return null;}  }
class C{  private static double punchThroughMod(Entity target,int hitTable,int hitSide,double damage,double group){  int[] armor_values=new int[8];  int max_index=1;  armor_values[0]=0;  double final_multiplier=1.0;  double base_multiplier=0.5;  if ((damage <= 0.0) || (group <= 0.0)) {    return final_multiplier;  }  if (target instanceof Mech) {    if (hitTable == ToHitData.HIT_NORMAL) {      max_index=7;      armor_values[0]=target.getArmor(Mech.LOC_HEAD,false);      if (hitSide != ToHitData.SIDE_FRONT) {        armor_values[1]=target.getArmor(Mech.LOC_CT,true);      } else {        armor_values[1]=target.getArmor(Mech.LOC_CT,false);      }      if (hitSide != ToHitData.SIDE_FRONT) {        armor_values[2]=target.getArmor(Mech.LOC_RT,true);      } else {        armor_values[2]=target.getArmor(Mech.LOC_RT,false);      }      if (hitSide != ToHitData.SIDE_FRONT) {        armor_values[3]=target.getArmor(Mech.LOC_LT,true);      } else {        armor_values[3]=target.getArmor(Mech.LOC_LT,false);      }      armor_values[4]=target.getArmor(Mech.LOC_RARM,false);      armor_values[5]=target.getArmor(Mech.LOC_LARM,false);      armor_values[6]=target.getArmor(Mech.LOC_RLEG,false);      armor_values[7]=target.getArmor(Mech.LOC_RLEG,false);    }    if (hitTable == ToHitData.HIT_PUNCH) {      armor_values[0]=target.getArmor(Mech.LOC_HEAD,false);      if (hitSide == ToHitData.SIDE_RIGHT) {        max_index=3;        armor_values[1]=target.getArmor(Mech.LOC_CT,false);        armor_values[2]=target.getArmor(Mech.LOC_RT,false);        armor_values[3]=target.getArmor(Mech.LOC_RARM,false);      }      if (hitSide == ToHitData.SIDE_LEFT) {        max_index=3;        armor_values[1]=target.getArmor(Mech.LOC_CT,false);        armor_values[2]=target.getArmor(Mech.LOC_LT,false);        armor_values[3]=target.getArmor(Mech.LOC_LARM,false);      }      if (hitSide == ToHitData.SIDE_FRONT) {        max_index=5;        armor_values[1]=target.getArmor(Mech.LOC_CT,false);        armor_values[2]=target.getArmor(Mech.LOC_RT,false);        armor_values[3]=target.getArmor(Mech.LOC_LT,false);        armor_values[4]=target.getArmor(Mech.LOC_RARM,false);        armor_values[5]=target.getArmor(Mech.LOC_LARM,false);      }      if (hitSide == ToHitData.SIDE_REAR) {        max_index=5;        armor_values[1]=target.getArmor(Mech.LOC_CT,true);        armor_values[2]=target.getArmor(Mech.LOC_RT,true);        armor_values[3]=target.getArmor(Mech.LOC_LT,true);        armor_values[4]=target.getArmor(Mech.LOC_RARM,false);        armor_values[5]=target.getArmor(Mech.LOC_LARM,false);      }    }    if (hitTable == ToHitData.HIT_KICK) {      max_index=-1;      if ((hitSide == ToHitData.SIDE_FRONT) || (hitSide == ToHitData.SIDE_REAR) || (hitSide == ToHitData.SIDE_RIGHT)) {        max_index++;        armor_values[max_index]=target.getArmor(Mech.LOC_RLEG,false);      }      if ((hitSide == ToHitData.SIDE_FRONT) || (hitSide == ToHitData.SIDE_REAR) || (hitSide == ToHitData.SIDE_LEFT)) {        max_index++;        armor_values[max_index]=target.getArmor(Mech.LOC_LLEG,false);      }    }  }  if (target instanceof Protomech) {    max_index=6;    armor_values[0]=target.getArmor(Protomech.LOC_TORSO,false);    armor_values[1]=target.getArmor(Protomech.LOC_LEG,false);    armor_values[2]=target.getArmor(Protomech.LOC_RARM,false);    armor_values[3]=target.getArmor(Protomech.LOC_LARM,false);    armor_values[4]=target.getArmor(Protomech.LOC_HEAD,false);    armor_values[5]=100;    armor_values[6]=100;    if (((Protomech)target).hasMainGun()) {      max_index++;      armor_values[max_index]=target.getArmor(Protomech.LOC_MAINGUN,false);    }  }  if (target instanceof Tank) {    max_index=0;switch (hitSide) {case ToHitData.SIDE_FRONT:      armor_values[0]=target.getArmor(Tank.LOC_FRONT);    break;case ToHitData.SIDE_RIGHT:  armor_values[0]=target.getArmor(Tank.LOC_RIGHT);break;case ToHitData.SIDE_LEFT:armor_values[0]=target.getArmor(Tank.LOC_LEFT);break;case ToHitData.SIDE_REAR:armor_values[0]=target.getArmor(Tank.LOC_REAR);break;}if (!((Tank)target).hasNoTurret()) {max_index++;armor_values[max_index]=target.getArmor(((Tank)target).getLocTurret());}if (!((Tank)target).hasNoDualTurret()) {max_index++;armor_values[max_index]=target.getArmor(((Tank)target).getLocTurret2());}}if (target instanceof BattleArmor) {max_index=-1;for (int i=1; i < ((BattleArmor)target).getShootingStrength(); i++) {if (target.getArmor(i) >= 0) {max_index++;armor_values[max_index]=target.getArmor(i);}}}if ((target instanceof Infantry) && !(target instanceof BattleArmor)) {max_index=0;armor_values[0]=((Infantry)target).getShootingStrength();}double hit_total=0;while (hit_total <= damage) {hit_total+=group;for (int i=0; i <= max_index; i++) {if (hit_total > armor_values[i]) {final_multiplier+=base_multiplier;}}base_multiplier/=2.0;}return final_multiplier;}  }
class C{  public void addEntry(RefactoringStatusEntry entry){  Assert.isNotNull(entry);  fEntries.add(entry);  fSeverity=Math.max(fSeverity,entry.getSeverity());}  }
class C{  public void testDbLevelJavaObjectSerializer() throws Exception {  DbLevelJavaObjectSerializer.testBaseRef=this;  try {    Connection conn=getConnection();    conn.createStatement().execute("SET JAVA_OBJECT_SERIALIZER '" + DbLevelJavaObjectSerializer.class.getName() + "'");    Statement stat=conn.createStatement();    stat.execute("create table t1(id identity, val other)");    PreparedStatement ins=conn.prepareStatement("insert into t1(val) values(?)");    ins.setObject(1,100500,Types.JAVA_OBJECT);    assertEquals(1,ins.executeUpdate());    Statement s=conn.createStatement();    ResultSet rs=s.executeQuery("select val from t1");    assertTrue(rs.next());    assertEquals(100500,((Integer)rs.getObject(1)).intValue());    assertEquals(new byte[]{1,2,3},rs.getBytes(1));    conn.close();  }  finally {    DbLevelJavaObjectSerializer.testBaseRef=null;  }}  }
class C{  public boolean offerFirst(E e){  addFirst(e);  return true;}  }
class C{  public Version(String spec){  if (spec == null) {    throw new NullPointerException();  }  Pattern pattern2=Pattern.compile("(\\d*)\\.(\\d*)\\.(\\d*)");  Matcher matcher2=pattern2.matcher(spec);  Pattern pattern3=Pattern.compile("(\\d*)\\.(\\d*)\\.(\\d*)-(\\d*)");  Matcher matcher3=pattern3.matcher(spec);  Pattern pattern4=Pattern.compile("(\\d*)\\.(\\d*)\\.(\\d*)-SNAPSHOT");  Matcher matcher4=pattern4.matcher(spec);  Pattern pattern5=Pattern.compile("(\\d*)\\.(\\d*)\\.(\\d*)-(\\d*)\\.(\\d*)");  Matcher matcher5=pattern5.matcher(spec);  if (matcher2.matches()) {    this.majorVersion=Integer.parseInt(matcher2.group(1));    this.minorVersion=Integer.parseInt(matcher2.group(2));    this.minorSubversion=Integer.parseInt(matcher2.group(3));    this.incrementalRelease=0;  } else   if (matcher3.matches()) {    this.majorVersion=Integer.parseInt(matcher3.group(1));    this.minorVersion=Integer.parseInt(matcher3.group(2));    this.minorSubversion=Integer.parseInt(matcher3.group(3));    this.incrementalRelease=Integer.parseInt(matcher3.group(4));  } else   if (matcher4.matches()) {    this.majorVersion=Integer.parseInt(matcher4.group(1));    this.minorVersion=Integer.parseInt(matcher4.group(2));    this.minorSubversion=Integer.parseInt(matcher4.group(3));    this.incrementalRelease=0;  } else   if (matcher5.matches()) {    this.majorVersion=Integer.parseInt(matcher5.group(1));    this.minorVersion=Integer.parseInt(matcher5.group(2));    this.minorSubversion=Integer.parseInt(matcher5.group(3));    this.incrementalRelease=Integer.parseInt(matcher5.group(4));  } else {    throw new IllegalArgumentException("Version should be either of the " + "form a.b.c or a.b.c-d or a.b.c-SNAPSHOT or a.b.c-d.e " + spec);  }}  }
class C{  protected StendhalRPRuleProcessor(){  onlinePlayers=new PlayerList();  playersRmText=new LinkedList<Player>();  entityToKill=new LinkedList<Pair<RPEntity,Entity>>();}  }
class C{  private void saveModel(String fileName,Instances trainHeader,Object model){  m_fileFormat=validateFileFormat(m_fileFormat);  if (m_fileFormat == null) {    m_fileFormat=s_fileFormatsAvailable.get(0);  }  if (model instanceof UpdateableBatchProcessor) {    try {      ((UpdateableBatchProcessor)model).batchFinished();    } catch (    Exception ex) {      System.err.println("[SerializedModelSaver] Problem saving model");      if (m_logger != null) {        m_logger.logMessage("[SerializedModelSaver] " + statusMessagePrefix() + " Problem saving model. Reason: "+ ex.getMessage());        m_logger.statusMessage(statusMessagePrefix() + "ERROR (See log for details)");      }    }  }  m_logger.logMessage("[SerializedModelSaver] " + statusMessagePrefix() + " Saving model "+ model.getClass().getName());  try {switch (m_fileFormat.getID()) {case KOMLV:      fileName=fileName + KOML.FILE_EXTENSION + FILE_EXTENSION;    saveKOML(new File(fileName),model,trainHeader);  break;case XSTREAM:fileName=fileName + XStream.FILE_EXTENSION + FILE_EXTENSION;saveXStream(new File(fileName),model,trainHeader);break;default :fileName=fileName + "." + FILE_EXTENSION;saveBinary(new File(fileName),model,trainHeader);break;}} catch (Exception ex) {System.err.println("[SerializedModelSaver] Problem saving model");if (m_logger != null) {m_logger.logMessage("[SerializedModelSaver] " + statusMessagePrefix() + " Problem saving model. Reason: "+ ex.getMessage());m_logger.statusMessage(statusMessagePrefix() + "ERROR (See log for details)");}}}  }
class C{  @Override public boolean supportsNonNullableColumns(){  debugCodeCall("supportsNonNullableColumns");  return true;}  }
class C{  public void onAnimationEnd(Animator animation){  if (mRule == Dependency.AFTER) {    startIfReady(animation);  }}  }
class C{  private boolean check(EdgeWeightedGraph G){  double value=Double.POSITIVE_INFINITY;  for (int s=0, t=1; t < G.V(); t++) {    FlowNetwork F=new FlowNetwork(G.V());    for (    Edge e : G.edges()) {      int v=e.either(), w=e.other(v);      F.addEdge(new FlowEdge(v,w,e.weight()));      F.addEdge(new FlowEdge(w,v,e.weight()));    }    FordFulkerson maxflow=new FordFulkerson(F,s,t);    value=Math.min(value,maxflow.value());  }  if (Math.abs(weight - value) > FLOATING_POINT_EPSILON) {    System.err.println("Min cut weight = " + weight + " , max flow value = "+ value);    return false;  }  return true;}  }
class C{  public void printTree(){  System.out.println("Root is: " + vertices.get(root));  System.out.print("Edges: ");  for (int i=0; i < parent.length; i++) {    if (parent[i] != -1) {      System.out.print("(" + vertices.get(parent[i]) + ", "+ vertices.get(i)+ ") ");    }  }  System.out.println();}  }
class C{  public static ValueTimestamp normalizeTimestamp(long absoluteDay,long nanos){  if (nanos > NANOS_PER_DAY || nanos < 0) {    long d;    if (nanos > NANOS_PER_DAY) {      d=nanos / NANOS_PER_DAY;    } else {      d=(nanos - NANOS_PER_DAY + 1) / NANOS_PER_DAY;    }    nanos-=d * NANOS_PER_DAY;    absoluteDay+=d;  }  return ValueTimestamp.fromDateValueAndNanos(dateValueFromAbsoluteDay(absoluteDay),nanos);}  }
class C{  void skipBlock(IndexInput in) throws IOException {  final int numBits=in.readByte();  if (numBits == ALL_VALUES_EQUAL) {    in.readVInt();    return;  }  assert numBits > 0 && numBits <= 32 : numBits;  final int encodedSize=encodedSizes[numBits];  in.seek(in.getFilePointer() + encodedSize);}  }
class C{  public void testArriveAndDeregister2(){  final Phaser phaser=new Phaser(1);  assertEquals(0,phaser.register());  assertEquals(0,phaser.arrive());  assertState(phaser,0,2,1);  assertEquals(0,phaser.arriveAndDeregister());  assertState(phaser,1,1,1);}  }
class C{  public void testSingleLineStringManyPointRoundTrip() throws SAXException, IOException, ParserConfigurationException {  LineStringGenerator pg=new LineStringGenerator();  pg.setGeometryFactory(geometryFactory);  pg.setBoundingBox(new Envelope(0,10,0,10));  pg.setGenerationAlgorithm(LineStringGenerator.HORZ);  pg.setNumberPoints(1000);  LineString pt=(LineString)pg.create();  checkRoundTrip(pt);}  }
class C{  public static InspectContainerParams create(@NotNull String container){  return new InspectContainerParams().withContainer(container);}  }
class C{  @ObjectiveCName("isGroupNotificationsOnlyMentionsEnabled") public boolean isGroupNotificationsOnlyMentionsEnabled(){  return modules.getSettingsModule().isGroupNotificationsOnlyMentionsEnabled();}  }
class C{  @Override default <C extends Comparable<? super C>>Optional<T> minBy(final Function<? super T,? extends C> f){  return reactiveSeq().minBy(f);}  }
class C{  public void addAttachment(URI url){  if (url == null)   return;  if (m_attachments == null)   m_attachments=new ArrayList<Object>();  m_attachments.add(url);}  }
class C{  public boolean markSupported(){  return false;}  }
class C{  public boolean containsKey(int key){  Entry[] table=this.table;  int bucket=Math.abs(key) % table.length;  for (Entry e=table[bucket]; e != null; e=e.next) {    if (e.key == key) {      return true;    }  }  return false;}  }
class C{  public void run(String[] args){  if (args.length == 0 || !parseArguments(args)) {    printUsage();    return;  }  if (!initJPlagStub()) {    System.out.println("Unable to initialize JPlag stub!");    return;  }  ServerInfo info;  try {    info=stub.getServerInfo();  } catch (  Exception e) {    checkException(e);    return;  }  Submission[] subs=info.getSubmissions();  if (subs.length > 0) {    System.out.println("\nSubmissions on server with states:\n");    for (int i=0; i < subs.length; i++) {      System.out.println(" " + (i + 1) + ". \""+ subs[i].getTitle()+ "\" on "+ subs[i].getDate());      String stateString="";switch (subs[i].getLastState()) {case JPLAG_UPLOADING:        stateString="uploading";      break;case JPLAG_INQUEUE:    stateString="in queue";  break;case JPLAG_PARSING:stateString="parsing";break;case JPLAG_COMPARING:stateString="comparing";break;case JPLAG_GENRESULT:stateString="generating result files";break;case JPLAG_PACKRESULT:stateString="packing result files";break;case JPLAG_DONE:stateString="done";break;default :{Status status=getStatus(subs[i].getSubmissionID());if (status == null) stateString="unable to retrieve status"; else stateString=status.getReport();}}System.out.println("    (" + stateString + ")");}if (listSubmissions) return;if (downloadResultNumber != 0) {if (downloadResultNumber > subs.length) {System.out.println("Illegal download number!\n" + "There are only " + subs.length + " submissions!");return;}Submission sub=subs[downloadResultNumber - 1];if (sub.getLastState() != 300) {System.out.println("Illegal download number!\n" + "You can only download results for successfully" + " finished submissions!");return;}System.out.print("Downloading \"" + sub.getTitle() + "\"...");if (!receiveResult(sub.getSubmissionID())) return;System.out.println(" completed.\nThe result files are available" + " in \"" + resultDirName + "\"");return;}if (cancelSubmissionNumber != 0) {if (cancelSubmissionNumber > subs.length) {System.out.println("Illegal cancel number!\n" + "There are only " + subs.length + " submissions!");return;}Submission sub=subs[cancelSubmissionNumber - 1];System.out.print("Cancelling \"" + sub.getTitle() + "\"...");if (!cancelSubmission(sub.getSubmissionID())) return;System.out.println(" completed.\n");return;}} else if (downloadResultNumber != 0 || cancelSubmissionNumber != 0 || listSubmissions) {System.out.println("\nCurrently there are no submissions on the " + "server for this user!");return;}if (!checkOptions(info)) return;System.out.println("\nSending files...");String submissionID=sendSubmission();if (submissionID == null) return;System.out.print("\n\nWaiting for result...");if (!waitForResult(submissionID)) return;System.out.println(" result available.\n\nDownloading...");if (!receiveResult(submissionID)) return;System.out.println("\n\nThe result files are available in \"" + resultDirName + "\"");}  }
class C{  public void paintProgressBarBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public void flush(){  try {synchronized (lock) {      ensureOpen();      out.flush();    }  } catch (  IOException x) {    trouble=true;  }}  }
class C{  public RSAESOAEPparams(){  hashAlgorithm=DEFAULT_HASH_ALGORITHM;  maskGenAlgorithm=DEFAULT_MASK_GEN_FUNCTION;  pSourceAlgorithm=DEFAULT_P_SOURCE_ALGORITHM;}  }
class C{  public PlayerLootedItemsHandler(Player player){  this.player=player;  looted=new HashMap<String,Integer>();  produced=new HashMap<String,Integer>();  obtained=new HashMap<String,Integer>();  mined=new HashMap<String,Integer>();  harvested=new HashMap<String,Integer>();  bought=new HashMap<String,Integer>();  sold=new HashMap<String,Integer>();  if (player.hasMap(LOOTED_ITEMS)) {    for (    String item : player.getMap(LOOTED_ITEMS).keySet()) {      if (item.contains("produced.")) {        produced.put(item.replace("produced.",""),player.getInt(LOOTED_ITEMS,item));      }      if (item.contains("obtained.")) {        obtained.put(item.replace("obtained.",""),player.getInt(LOOTED_ITEMS,item));      }      if (item.contains("mined.")) {        mined.put(item.replace("mined.",""),player.getInt(LOOTED_ITEMS,item));      }      if (item.contains("harvested.")) {        harvested.put(item.replace("harvested.",""),player.getInt(LOOTED_ITEMS,item));      }      if (item.contains("bought.")) {        bought.put(item.replace("bought.",""),player.getInt(LOOTED_ITEMS,item));      }      if (item.contains("sold.")) {        bought.put(item.replace("sold.",""),player.getInt(LOOTED_ITEMS,item));      }      if (!item.contains("produced.") && !item.contains("obtained.") && !item.contains("mined.")&& !item.contains("harvested.")&& !item.contains("bought.")&& !item.contains("sold.")) {        looted.put(item,player.getInt(LOOTED_ITEMS,item));      }    }  }}  }
class C{  public BezierPathIterator(BezierPath path,@Nullable AffineTransform at){  this.path=path;  this.affine=at;}  }
class C{  protected void createFieldEditors(){  addField(new BooleanFieldEditor(IPreferenceConstants.I_TRANSLATE_POPUP_ERRORS,"&Popup problem window on translator errors",getFieldEditorParent()));  addField(new BooleanFieldEditor(IPreferenceConstants.I_TRANSLATE_MODULE_ON_MODIFY,"&Re-translate on module save",getFieldEditorParent()));}  }
class C{  public static boolean containsOnlyDigits(CharSequence string){  int size=string.length();  for (int i=0; i < size; i++) {    char c=string.charAt(i);    if (CharUtil.isDigit(c) == false) {      return false;    }  }  return true;}  }
class C{  public void removeAllLayers(){  layers.clear();  layersMap.clear();}  }
class C{  public void unlock(){  c.unlock();}  }
class C{  public static IResource resolveTargetResource(IResource resource){  if (!resource.isLinked()) {    return resource;  }  IResource resolvedResource=getResource(resource.getLocation());  return resolvedResource != null ? resolvedResource : resource;}  }
class C{  public static void main(String argv[]){  int exitCode=0;  try {    String configFile=null;    String command=null;    Long seqno=null;    Long epoch=null;    String eventId=null;    String sourceId=null;    ArgvIterator argvIterator=new ArgvIterator(argv);    if (!argvIterator.hasNext()) {      printHelp();      succeed();    }    String curArg=null;    while (argvIterator.hasNext()) {      curArg=argvIterator.next();      if ("-conf".equals(curArg)) {        configFile=argvIterator.next();      } else       if ("-service".equals(curArg)) {        service=argvIterator.next();      } else       if ("-ds".equals(curArg)) {        datasource=argvIterator.next();      } else       if ("-seqno".equals(curArg)) {        seqno=Long.parseLong(argvIterator.next());      } else       if ("-epoch".equals(curArg)) {        epoch=Long.parseLong(argvIterator.next());      } else       if ("-event-id".equals(curArg)) {        eventId=argvIterator.next();      } else       if ("-source-id".equals(curArg)) {        sourceId=argvIterator.next();      } else       if ("-help".equals(curArg) || "--help".equals(curArg) || "-h".equals(curArg)) {        command=Commands.HELP;        break;      } else       if (curArg.startsWith("-")) {        fatal("Unrecognized option: " + curArg,null,1);      } else {        command=curArg;      }    }    if (command == null)     fatal("No command entered: try 'help' to get a list",null,1); else     if (command.equals(Commands.HELP)) {      printHelp();      succeed();    }    if (configFile == null)     configFile=getConfigFile();    TungstenProperties properties=DDLScanCtrl.readConfig(configFile);    if (properties == null) {      fatal("Unable to read configuration file " + configFile,null,2);    } else {      try {        admin=new DataSourceAdministrator(properties);        admin.prepare();        if (command.equals(Commands.RESET))         exitCode=doReset(); else         if (command.equals(Commands.GET))         exitCode=doGet(); else         if (command.equals(Commands.SET)) {          if (seqno == null || epoch == null || eventId == null || sourceId == null) {            fatal("Command 'set' requires options -seqno, -epoch, -event-id and -source-id",null,1);          }          exitCode=doSet(seqno,epoch,eventId,sourceId);        } else         fatal("Unrecognized command, try 'help' to get a list: " + command,null,1);      } catch (      ReplicatorException e) {        printlnerr(e.getMessage());        exitCode=3;      } finally {        if (admin != null) {          admin.release();        }      }    }  } catch (  Exception e) {    printlnerr(e.getMessage());    e.printStackTrace();    exitCode=4;  }  System.exit(exitCode);}  }
class C{  public static CharArrayWriter readAllCharsFromReader(Reader reader) throws IOException {  try {    final int BUFFER_SIZE=1024;    char[] buffer=new char[BUFFER_SIZE];    CharArrayWriter chars=new CharArrayWriter();    int read;    while ((read=reader.read(buffer)) != EOF) {      chars.write(buffer,0,read);    }    return chars;  }  finally {    reader.close();  }}  }
class C{  private void adjustNameAndPosition(Node node,int deltaX,int deltaY){  String originalName=node.getName();  String uniqueName=nextUniqueName(originalName);  if (!uniqueName.equals(originalName)) {    node.setName(uniqueName);    node.setCenterX(node.getCenterX() + deltaX);    node.setCenterY(node.getCenterY() + deltaY);  }}  }
class C{  public BasicSplitPaneDivider createDefaultDivider(){  return new WindowsSplitPaneDivider(this);}  }
class C{  public boolean isPrtlVoteAllwd(){  return prtlVoteAllwd;}  }
class C{  public boolean isMotorEnabled(){  return joint.isMotorEnabled();}  }
class C{  public IdentityArrayList(final ObjectList<? extends K> l){  this(l.size());  l.getElements(0,a,0,size=l.size());}  }
class C{  protected Long seedBucketsWithHighestVersion(SolrIndexSearcher newSearcher,VersionInfo versions){  Long highestVersion=null;  final RTimer timer=new RTimer();  try (RecentUpdates recentUpdates=getRecentUpdates()){    long maxVersionFromRecent=recentUpdates.getMaxRecentVersion();    long maxVersionFromIndex=versions.getMaxVersionFromIndex(newSearcher);    long maxVersion=Math.max(maxVersionFromIndex,maxVersionFromRecent);    if (maxVersion == 0L) {      maxVersion=versions.getNewClock();      log.info("Could not find max version in index or recent updates, using new clock {}",maxVersion);    }    versions.seedBucketsWithHighestVersion(maxVersion);    highestVersion=maxVersion;  } catch (  IOException ioExc) {    log.warn("Failed to determine the max value of the version field due to: " + ioExc,ioExc);  }  log.debug("Took {}ms to seed version buckets with highest version {}",timer.getTime(),String.valueOf(highestVersion));  return highestVersion;}  }
class C{  public String html(){  if (nodes.length == 0) {    return null;  }  return nodes[0].getInnerHtml();}  }
class C{  Collection<Unit> fireAA(final Route route,final Collection<Unit> units,final Comparator<Unit> decreasingMovement,final UndoableMove currentMove){  if (m_executionStack.isEmpty()) {    populateExecutionStack(route,units,decreasingMovement,currentMove);  }  m_executionStack.execute(m_bridge);  return m_casualties;}  }
class C{  public AdvContactGUI(Contact contact){  this.contact=contact;  setVisible(true);  setLocationRelativeTo(null);  setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);  setBounds(100,100,500,502);  contentPane=new JPanel();  contentPane.setBorder(new EmptyBorder(5,5,5,5));  setContentPane(contentPane);  JPanel panel_1=new JPanel();  panel_1.setBorder(new EtchedBorder(EtchedBorder.LOWERED,null,null));  JLabel lblName=new JLabel("Name :");  lblValname=new JLabel("val_name");  JLabel lblPhoneNumber=new JLabel("Phone number :");  JLabel lblAdress=new JLabel("Adress :");  lblValid=new JLabel("val_id");  JLabel lblId=new JLabel("Id :");  JLabel lblEmails=new JLabel("Email :");  JLabel lblMessaging=new JLabel("Messaging :");  JLabel lblOrganisation=new JLabel("Organisation :");  lblValorga=new JLabel("val_orga");  JLabel lblOrganisationStatus=new JLabel("Organisation status :");  lblValstatus=new JLabel("val_status");  JLabel lblTimesContacted=new JLabel("Times contacted :");  lblValtimes=new JLabel("val_times");  JLabel lblLastTimeContacted=new JLabel("Last time contacted :");  lblVallasttime=new JLabel("val_last_time");  JLabel lblNotes=new JLabel("Notes :");  JScrollPane scrollPane=new JScrollPane();  JScrollPane scrollPane_1=new JScrollPane();  JScrollPane scrollPane_2=new JScrollPane();  JScrollPane scrollPane_3=new JScrollPane();  JScrollPane scrollPane_4=new JScrollPane();  GroupLayout gl_contentPane=new GroupLayout(contentPane);  gl_contentPane.setHorizontalGroup(gl_contentPane.createParallelGroup(Alignment.TRAILING).addGroup(gl_contentPane.createSequentialGroup().addContainerGap().addGroup(gl_contentPane.createParallelGroup(Alignment.TRAILING).addComponent(scrollPane_4,Alignment.LEADING,GroupLayout.DEFAULT_SIZE,454,Short.MAX_VALUE).addComponent(scrollPane_3,Alignment.LEADING,GroupLayout.DEFAULT_SIZE,454,Short.MAX_VALUE).addComponent(scrollPane_2,Alignment.LEADING,GroupLayout.DEFAULT_SIZE,454,Short.MAX_VALUE).addGroup(Alignment.LEADING,gl_contentPane.createSequentialGroup().addComponent(panel_1,GroupLayout.PREFERRED_SIZE,150,GroupLayout.PREFERRED_SIZE).addPreferredGap(ComponentPlacement.UNRELATED).addGroup(gl_contentPane.createParallelGroup(Alignment.LEADING).addComponent(scrollPane_1,GroupLayout.DEFAULT_SIZE,294,Short.MAX_VALUE).addComponent(lblAdress).addComponent(lblPhoneNumber).addGroup(Alignment.TRAILING,gl_contentPane.createSequentialGroup().addComponent(lblName).addPreferredGap(ComponentPlacement.UNRELATED).addComponent(lblValname).addPreferredGap(ComponentPlacement.RELATED,162,Short.MAX_VALUE).addComponent(lblId).addPreferredGap(ComponentPlacement.UNRELATED).addComponent(lblValid)).addComponent(scrollPane,GroupLayout.DEFAULT_SIZE,294,Short.MAX_VALUE))).addComponent(lblEmails,Alignment.LEADING).addComponent(lblMessaging,Alignment.LEADING).addGroup(Alignment.LEADING,gl_contentPane.createSequentialGroup().addComponent(lblOrganisation).addPreferredGap(ComponentPlacement.UNRELATED).addComponent(lblValorga)).addGroup(Alignment.LEADING,gl_contentPane.createSequentialGroup().addComponent(lblOrganisationStatus).addPreferredGap(ComponentPlacement.UNRELATED).addComponent(lblValstatus)).addGroup(Alignment.LEADING,gl_contentPane.createSequentialGroup().addComponent(lblTimesContacted).addPreferredGap(ComponentPlacement.UNRELATED).addComponent(lblValtimes)).addGroup(Alignment.LEADING,gl_contentPane.createSequentialGroup().addComponent(lblLastTimeContacted).addPreferredGap(ComponentPlacement.UNRELATED).addComponent(lblVallasttime)).addComponent(lblNotes,Alignment.LEADING)).addContainerGap()));  gl_contentPane.setVerticalGroup(gl_contentPane.createParallelGroup(Alignment.LEADING).addGroup(gl_contentPane.createSequentialGroup().addContainerGap().addGroup(gl_contentPane.createParallelGroup(Alignment.LEADING,false).addComponent(panel_1,GroupLayout.PREFERRED_SIZE,150,GroupLayout.PREFERRED_SIZE).addGroup(gl_contentPane.createSequentialGroup().addGroup(gl_contentPane.createParallelGroup(Alignment.BASELINE).addComponent(lblName).addComponent(lblValname).addComponent(lblValid).addComponent(lblId)).addPreferredGap(ComponentPlacement.UNRELATED).addComponent(lblPhoneNumber).addPreferredGap(ComponentPlacement.RELATED).addComponent(scrollPane,GroupLayout.PREFERRED_SIZE,35,GroupLayout.PREFERRED_SIZE).addPreferredGap(ComponentPlacement.RELATED).addComponent(lblAdress).addPreferredGap(ComponentPlacement.UNRELATED).addComponent(scrollPane_1))).addPreferredGap(ComponentPlacement.UNRELATED).addComponent(lblEmails).addPreferredGap(ComponentPlacement.RELATED).addComponent(scrollPane_2,GroupLayout.PREFERRED_SIZE,41,GroupLayout.PREFERRED_SIZE).addPreferredGap(ComponentPlacement.RELATED).addComponent(lblMessaging).addPreferredGap(ComponentPlacement.RELATED).addComponent(scrollPane_3,GroupLayout.PREFERRED_SIZE,41,GroupLayout.PREFERRED_SIZE).addPreferredGap(ComponentPlacement.RELATED).addGroup(gl_contentPane.createParallelGroup(Alignment.BASELINE).addComponent(lblOrganisation).addComponent(lblValorga)).addPreferredGap(ComponentPlacement.RELATED).addGroup(gl_contentPane.createParallelGroup(Alignment.BASELINE).addComponent(lblOrganisationStatus).addComponent(lblValstatus)).addPreferredGap(ComponentPlacement.RELATED).addGroup(gl_contentPane.createParallelGroup(Alignment.BASELINE).addComponent(lblTimesContacted).addComponent(lblValtimes)).addPreferredGap(ComponentPlacement.RELATED).addGroup(gl_contentPane.createParallelGroup(Alignment.BASELINE).addComponent(lblLastTimeContacted).addComponent(lblVallasttime)).addPreferredGap(ComponentPlacement.RELATED).addComponent(lblNotes).addPreferredGap(ComponentPlacement.RELATED).addComponent(scrollPane_4,GroupLayout.DEFAULT_SIZE,37,Short.MAX_VALUE).addContainerGap()));  areaNotes=new JTextArea();  scrollPane_4.setViewportView(areaNotes);  areaMessaging=new JTextArea();  scrollPane_3.setViewportView(areaMessaging);  areaEmails=new JTextArea();  scrollPane_2.setViewportView(areaEmails);  areaAdress=new JTextArea();  scrollPane_1.setViewportView(areaAdress);  areaPhones=new JTextArea();  scrollPane.setViewportView(areaPhones);  lblPicture=new JLabel("picture");  GroupLayout gl_panel_1=new GroupLayout(panel_1);  gl_panel_1.setHorizontalGroup(gl_panel_1.createParallelGroup(Alignment.LEADING).addGroup(gl_panel_1.createSequentialGroup().addComponent(lblPicture).addContainerGap(113,Short.MAX_VALUE)));  gl_panel_1.setVerticalGroup(gl_panel_1.createParallelGroup(Alignment.LEADING).addGroup(gl_panel_1.createSequentialGroup().addComponent(lblPicture).addContainerGap(132,Short.MAX_VALUE)));  panel_1.setLayout(gl_panel_1);  contentPane.setLayout(gl_contentPane);  this.initContactInfo();}  }
class C{  public void cut(){  invokeAction(TransferHandler.getCutAction());}  }
class C{  protected void updateBoundaries(int i2,double F2){  int iSet=m_iSet[i2];  double FLow=m_bLow;  if ((iSet & (I2 | I0b)) > 0) {    FLow=F2 + m_epsilon;  } else   if ((iSet & (I1 | I0a)) > 0) {    FLow=F2 - m_epsilon;  }  if (m_bLow < FLow) {    m_bLow=FLow;    m_iLow=i2;  }  double FUp=m_bUp;  if ((iSet & (I3 | I0a)) > 0) {    FUp=F2 - m_epsilon;  } else   if ((iSet & (I1 | I0b)) > 0) {    FUp=F2 + m_epsilon;  }  if (m_bUp > FUp) {    m_bUp=FUp;    m_iUp=i2;  }}  }
class C{  public Ribbon next(){  if (!hasNext()) {    return Ribbon.getEmpty();  }  if (point != v2 && v1.distance(point) < distance) {    Ribbon result=new Ribbon(point,gc,radius);    point=rotator.rotate(point);    return result;  } else {    point=v2;    return new Ribbon(point,gc,radius);  }}  }
class C{  public Server(int tcpPort,int udpPort){  this.tcpPort=tcpPort;  this.udpPort=udpPort;  tcpThread.setDaemon(true);  udpThread.setDaemon(true);}  }
class C{  @Override public Adapter createAdapter(Notifier target){  return modelSwitch.doSwitch((EObject)target);}  }
class C{  @SafeVarargs public final void injectElements(TimestampedValue<InputT>... values) throws Exception {  injectElements(Arrays.asList(values));}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:12.118 -0500",hash_original_method="D2CB1A360A21716BE59AD0C99E7F7543",hash_generated_method="660ED0C5C1BBCBE5B2E23EA2648192A0") void certificate(SslCertificate certificate){  if (mIsMainFrame) {    mCallbackProxy.onReceivedCertificate(certificate);  }}  }
class C{  public String toString(){  return TimedElement.toString(begin) + ".." + TimedElement.toString(end);}  }
class C{  public synchronized CalculatedStyle deriveStyle(CascadedStyle matched){  String fingerprint=matched.getFingerprint();  CalculatedStyle cs=(CalculatedStyle)_childCache.get(fingerprint);  if (cs == null) {    cs=new CalculatedStyle(this,matched);    _childCache.put(fingerprint,cs);  }  return cs;}  }
class C{  public RoundedColorDrawable(int color){  setColor(color);}  }
class C{  public MonthDay withDayOfMonth(int dayOfMonth){  int[] newValues=getValues();  newValues=getChronology().dayOfMonth().set(this,DAY_OF_MONTH,newValues,dayOfMonth);  return new MonthDay(this,newValues);}  }
class C{  public static void d(String tag,String s,Throwable e){  if (LOG.DEBUG >= LOGLEVEL)   Log.d(tag,s,e);}  }
class C{  private int readOneLine(InputStream is){  int read=0;  clearBuffer();  try {    log("Reading one line: started =" + readStarted + " avail="+ is.available());    while ((!readStarted) || (is.available() > 0)) {      int data=is.read();      if (data == -1) {        log("EOF returned");        return -1;      }      buf[read]=(byte)data;      System.out.print((char)data);      readStarted=true;      if (buf[read++] == (byte)'\n') {        System.out.println();        return read;      }    }  } catch (  IOException e) {    log("IOException from readOneLine");    e.printStackTrace();  }  return read;}  }
class C{  @Override public void countExample(Example example){  double label=example.getValue(labelAttribute);  double plabel=example.getValue(predictedLabelAttribute);  if (labelAttribute.isNominal()) {    String predLabelString=predictedLabelAttribute.getMapping().mapIndex((int)plabel);    plabel=labelAttribute.getMapping().getIndex(predLabelString);  }  double weight=1.0d;  if (weightAttribute != null) {    weight=example.getValue(weightAttribute);  }  double prod=label * plabel * weight;  if (!Double.isNaN(prod)) {    sumLabelPredict+=prod;    sumLabel+=label * weight;    sumLabelSqr+=label * label * weight;    sumPredict+=plabel * weight;    sumPredictSqr+=plabel * plabel * weight;    exampleCount+=weight;  }}  }
class C{  public DataOutputStream prepareMetaBlock(String name,String compressName) throws IOException, MetaBlockAlreadyExists {  if (state != State.READY) {    throw new IllegalStateException("Incorrect state to start a Meta Block: " + state.name());  }  finishDataBlock(true);  DataOutputStream outputStream=writerBCF.prepareMetaBlock(name,compressName);  return outputStream;}  }
class C{  public void testMatchEnum(){  final VertexProperty<String> any=graph.addVertex(T.id,"any").property(Cardinality.set,"key","foo");  final VertexProperty<String> all=graph.addVertex(T.id,"all").property(Cardinality.set,"key","foo bar");  final VertexProperty<String> exact=graph.addVertex(T.id,"exact").property(Cardinality.set,"key","bar foo");  graph.commit();  log.debug(null);{    final List<Property<String>> results=graph.<String>search("bar foo",Match.ANY).collect();    log.debug(null);    assertEquals(3,results.size());    assertTrue(results.contains(any));    assertTrue(results.contains(all));    assertTrue(results.contains(exact));  }{    final List<Property<String>> results=graph.<String>search("bar foo",Match.ALL).collect();    log.debug(null);    assertEquals(2,results.size());    assertTrue(results.contains(all));    assertTrue(results.contains(exact));  }{    final List<Property<String>> results=graph.<String>search("bar foo",Match.EXACT).collect();    log.debug(null);    assertEquals(1,results.size());    assertTrue(results.contains(exact));  }}  }
class C{  protected static String LexicalError(boolean EOFSeen,int lexState,int errorLine,int errorColumn,String errorAfter,char curChar){  return ("Lexical error at line " + errorLine + ", column "+ errorColumn+ ".  Encountered: "+ (EOFSeen ? "<EOF> " : ("\"" + addEscapes(String.valueOf(curChar)) + "\"") + " (" + (int)curChar+ "), ")+ "after : \""+ addEscapes(errorAfter)+ "\"");}  }
class C{  public void stopEditor(boolean saveValue){  ChangeEvent ce=new ChangeEvent(this);  if (saveValue)   editingStopped(ce); else   editingCanceled(ce);  if (getInputContext() != null)   getInputContext().endComposition();  transferFocus();}  }
class C{  public boolean rewriteExif(ByteBuffer buf,Collection<ExifTag> tags) throws IOException {  ExifModifier mod=null;  try {    mod=new ExifModifier(buf,this);    for (    ExifTag t : tags) {      mod.modifyTag(t);    }    return mod.commit();  } catch (  ExifInvalidFormatException e) {    throw new IOException("Invalid exif format : " + e);  }}  }
class C{  public static CharSet rangeOf(char first,char last){  if (first > last)   throw new IllegalArgumentException("first should be less or equal to last");  CharSet charSet=new CharSet(new long[(last >> 6) + 1]);  for (char c=first; c <= last; c++) {    charSet._mapping[c >> 6]|=1L << (c & 63);  }  return charSet;}  }
class C{  public static void openMapSearch(Context context,String addressOrPlaceName){  Intent intent=createOpenMapSearchIntent(addressOrPlaceName);  checkContext(context,intent);  context.startActivity(intent);}  }
class C{  @SuppressWarnings("unchecked") private <T>T serializeBackAndForth(Object original) throws SerializationException {  ByteBufferOutputStream byteBufferOutputStream=new ByteBufferOutputStream(byteBuffer);  Output output=new Output(byteBufferOutputStream);  serializer.serialize(original,output);  byteBuffer.flip();  ByteBufferInputStream byteBufferInputStream=new ByteBufferInputStream(byteBuffer);  Input input=new Input(byteBufferInputStream);  return (T)serializer.deserialize(input);}  }
class C{  public void onItemPinned(int position){}  }
class C{  public List<String> extraArguments(){  return this.extraArguments;}  }
class C{  @Provides @Config("eppResourceIndexBucketCount") public static int provideEppResourceIndexBucketCount(RegistryConfig config){  return config.getEppResourceIndexBucketCount();}  }
class C{  public static boolean putFloat(ContentResolver cr,String name,float value){  return putFloatForUser(cr,name,value,UserHandle.myUserId());}  }
