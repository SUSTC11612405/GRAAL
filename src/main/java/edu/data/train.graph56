class C{  private Check checkContract(ObjectContract contract,Object[] values){  ExecutionOutcome outcome=ObjectContractUtils.execute(contract,values);  if (outcome instanceof NormalExecution) {    if (((NormalExecution)outcome).getRuntimeValue().equals(true)) {      return null;    }  } else   if (outcome instanceof ExceptionalExecution) {    Throwable e=((ExceptionalExecution)outcome).getException();    if (Log.isLoggingOn()) {      Log.logLine("Contract threw exception: " + e.getMessage());    }    if (e instanceof BugInRandoopException) {      throw (BugInRandoopException)e;    }    if (!contract.evalExceptionMeansFailure()) {      return null;    }  } else {    throw new BugInRandoopException("Contract failed to execute during evaluation");  }  Variable[] varArray=new Variable[values.length];  for (int i=0; i < varArray.length; i++) {    List<Variable> variables=s.getVariables(values[i]);    varArray[i]=Randomness.randomMember(variables);  }  return new ObjectCheck(contract,varArray);}  }
class C{  @Override public void debugPrint(PrintStream out) throws AdeException {  super.debugPrint(out);  for (  Entry<String,PerodicityBounder> last : m_lastSeen.entrySet()) {    last.getValue().debugPrint(last.getKey(),out);  }}  }
class C{  public boolean canInternalFrame(){  List constraints=dockPanel.getConstraints(getChildren());  return DockConstraint.canInternalFrame(constraints);}  }
class C{  static boolean isExist(String libName,int version){  String file=_targetSoFile(libName,version);  File a=new File(file);  return a.exists();}  }
class C{  private void assertReadVarintFailure(InvalidProtocolBufferException expected,byte[] data) throws Exception {  CodedInputStream input=CodedInputStream.newInstance(data);  try {    input.readRawVarint32();    fail("Should have thrown an exception.");  } catch (  InvalidProtocolBufferException e) {    assertEquals(expected.getMessage(),e.getMessage());  }  input=CodedInputStream.newInstance(data);  try {    input.readRawVarint64();    fail("Should have thrown an exception.");  } catch (  InvalidProtocolBufferException e) {    assertEquals(expected.getMessage(),e.getMessage());  }  try {    CodedInputStream.readRawVarint32(new ByteArrayInputStream(data));    fail("Should have thrown an exception.");  } catch (  InvalidProtocolBufferException e) {    assertEquals(expected.getMessage(),e.getMessage());  }}  }
class C{  public static boolean isStatusSuccess(int status){  return (status >= 200 && status < 300);}  }
class C{  private static void debugPrintln(String msg){  if (DEBUG) {    System.err.println("JAXP: " + msg);  }}  }
class C{  public static void verifyCopyIsForSource(Volume fullCopyVolume,URI fcSourceURI){  if (!fullCopyVolume.getAssociatedSourceVolume().toString().equals(fcSourceURI.toString())) {    throw APIException.badRequests.protectionVolumeNotFullCopyOfVolume(fullCopyVolume.getId(),fcSourceURI);  }}  }
class C{  @RequestMapping(value="/namespaceIamRoleAuthorizations/namespaces/{namespace}",method=RequestMethod.PUT,consumes={"application/xml","application/json"}) @Secured(SecurityFunctions.FN_NAMESPACE_IAM_ROLE_AUTHORIZATIONS_PUT) public NamespaceIamRoleAuthorization updateNamespaceIamRoleAuthorization(@PathVariable("namespace") String namespace,@RequestBody NamespaceIamRoleAuthorizationUpdateRequest request){  return namespaceIamRoleAuthorizationService.updateNamespaceIamRoleAuthorization(namespace,request);}  }
class C{  @Override protected void startDownload(int blocks){  if (blocks == 0) {    doneDownload();  } else {synchronized (lockObject) {      blocksToDownloadAtStart=blocks;      String startDownloadText;      if (blocks <= CRITERIA_LARGE_NUMBER_OF_BLOCKS) {        startDownloadText=controller.getLocaliser().getString("multiBitDownloadListener.startDownloadTextShort",new Object[]{blocks});      } else {        startDownloadText=controller.getLocaliser().getString("multiBitDownloadListener.startDownloadTextLong",new Object[]{blocks});      }      String startDownloadTextForLabel=controller.getLocaliser().getString("multiBitDownloadListener.downloadingText");      if (!(startDownloadText.indexOf("multiBitDownloadListener") > -1)) {        Message message=new Message(startDownloadTextForLabel,Message.NOT_RELEVANT_PERCENTAGE_COMPLETE);        MessageManager.INSTANCE.addMessage(message);        message=new Message(startDownloadTextForLabel,0);        MessageManager.INSTANCE.addMessage(message);      }      for (      SingleWalletPanelDownloadListener singleWalletPanelDownloadListener : singleWalletPanelDownloadListeners) {        singleWalletPanelDownloadListener.startDownload(blocks);      }    }    this.bitcoinController.fireBlockDownloaded();  }}  }
class C{  protected AbstractDOMImplementation(){}  }
class C{  public void append(double key,int val){  if (size == keys.length) {    keys=Arrays.copyOf(keys,size << 1);    vals=Arrays.copyOf(vals,size << 1);  }  keys[size]=key;  vals[size]=val;  ++size;}  }
class C{  public boolean isBefore(ReadableInterval interval){  if (interval == null) {    return isBeforeNow();  }  return isBefore(interval.getStartMillis());}  }
class C{  public void store(int value,Offset offset){}  }
class C{  public static XMPMeta createXMPMeta(){  return XMPMetaFactory.create();}  }
class C{  public boolean isGcm(){  return getEndpoint().indexOf("https://android.googleapis.com/gcm/send") == 0;}  }
class C{  private ScheduleTaskImpl[] readInAllTasks() throws PageException {  Element root=doc.getDocumentElement();  NodeList children=root.getChildNodes();  ArrayList<ScheduleTaskImpl> list=new ArrayList<ScheduleTaskImpl>();  int len=children.getLength();  for (int i=0; i < len; i++) {    Node n=children.item(i);    if (n instanceof Element && n.getNodeName().equals("task")) {      list.add(readInTask((Element)n));    }  }  return list.toArray(new ScheduleTaskImpl[list.size()]);}  }
class C{  public String sqlObject_createOperator(String sourceVendorName,String targetVendorName,String catalogName,String schemaName,String operatorName,String leftArg,String rightArg,String returnType,String functionName,String commutator,String negator,String restrictor,String joiner,boolean isHashable,boolean isMergeable){  if (operatorName != null)   operatorName=translateOperator(sourceVendorName,targetVendorName,operatorName);  if (leftArg != null) {    leftArg=translateDataType(sourceVendorName,targetVendorName,leftArg,0,0);    leftArg=leftArg.replaceAll("\\s*\\(.*\\)","");  }  if (rightArg != null) {    rightArg=translateDataType(sourceVendorName,targetVendorName,rightArg,0,0);    rightArg=rightArg.replaceAll("\\s*\\(.*\\)","");  }  if (returnType != null) {    returnType=translateDataType(sourceVendorName,targetVendorName,returnType,0,0);    returnType=returnType.replaceAll("\\s*\\(.*\\)","");  }  return m_interfaces.get(getDBVendorID(targetVendorName)).sqlObject_createOperator(catalogName,schemaName,operatorName,leftArg,rightArg,returnType,functionName,commutator,negator,restrictor,joiner,isHashable,isMergeable);}  }
class C{  public static Solenoid doubleSolenoid(int extendChannel,int retractChannel,Solenoid.Direction initialDirection){  DoubleSolenoid solenoid=new DoubleSolenoid(extendChannel,retractChannel);  return new HardwareDoubleSolenoid(solenoid,initialDirection);}  }
class C{  public FbStatement allocateStatement() throws SQLException {  return database.createStatement(getCurrentTransaction());}  }
class C{  public boolean hasNext(){  return hasNextTlsMode() || hasNextInetSocketAddress() || hasNextProxy()|| hasNextPostponed();}  }
class C{  private static Properties mergeProperties(String jdbcUrl,Properties connectionProperties){  Properties mergedProperties=new Properties();  if (connectionProperties != null) {    for (    String propertyName : connectionProperties.stringPropertyNames()) {      mergedProperties.setProperty(propertyName,connectionProperties.getProperty(propertyName));    }  }  convertUrlParams(jdbcUrl,mergedProperties);  return mergedProperties;}  }
class C{  public FluentFunction<T,R> retry(final int times,final int backoffStartTime){  return FluentFunctions.of(null);}  }
class C{  public static boolean isPossibleRegex(String str){  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case '*':      return true;case '{':    if (i < str.length() - 1 && str.charAt(i + 1) != '}')     return true;  break;case '|':return true;case '?':if (i > 1 && str.charAt(i - 1) == ')') return true;break;default :break;}}return false;}  }
class C{  public void buildGraphicsNode(BridgeContext ctx,Element e,GraphicsNode node){  e.normalize();  computeLaidoutText(ctx,e,node);  node.setComposite(CSSUtilities.convertOpacity(e));  node.setFilter(CSSUtilities.convertFilter(e,node,ctx));  node.setMask(CSSUtilities.convertMask(e,node,ctx));  node.setClip(CSSUtilities.convertClipPath(e,node,ctx));  node.setPointerEventType(CSSUtilities.convertPointerEvents(e));  initializeDynamicSupport(ctx,e,node);  if (!ctx.isDynamic()) {    elemTPI.clear();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:23.824 -0400",hash_original_method="5D8D5E301F385A8103A96491A29BD204",hash_generated_method="B192992FF9B2F7949786FAF7105E018F") private void onInputDeviceConnectionResult(String path,int result){  if (result != BluetoothInputDevice.INPUT_OPERATION_SUCCESS) {    String address=mBluetoothService.getAddressFromObjectPath(path);    if (address == null)     return;    boolean connected=false;    BluetoothDevice device=mAdapter.getRemoteDevice(address);    int state=mBluetoothService.getInputDeviceConnectionState(device);    if (state == BluetoothInputDevice.STATE_CONNECTING) {      if (result == BluetoothInputDevice.INPUT_CONNECT_FAILED_ALREADY_CONNECTED) {        connected=true;      } else {        connected=false;      }    } else     if (state == BluetoothInputDevice.STATE_DISCONNECTING) {      if (result == BluetoothInputDevice.INPUT_DISCONNECT_FAILED_NOT_CONNECTED) {        connected=false;      } else {        connected=true;      }    } else {      Log.e(TAG,"Error onInputDeviceConnectionResult. State is:" + state);    }    mBluetoothService.handleInputDevicePropertyChange(address,connected);  }}  }
class C{  public void keyTyped(KeyEvent e){}  }
class C{  public void endMethod(){  if ((access & Opcodes.ACC_ABSTRACT) == 0) {    mv.visitMaxs(0,0);  }  mv.visitEnd();}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == CharacterClassElement.class) {switch (baseFeatureID) {default :      return -1;  }}if (baseClass == CharacterClassAtom.class) {switch (baseFeatureID) {case RegularExpressionPackage.CHARACTER_CLASS_ATOM__CHARACTER:    return RegularExpressionPackage.DECIMAL_ESCAPE_SEQUENCE__CHARACTER;default :  return -1;}}if (baseClass == EscapedCharacterClassAtom.class) {switch (baseFeatureID) {default :return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  public static void openView(IMarker inputElement,String taint){  IWorkbenchPage activePage=Activator.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage();  TaintSourcesViewPart view=(TaintSourcesViewPart)activePage.findView(VIEW_ID);  if (view == null) {    try {      view=(TaintSourcesViewPart)activePage.showView(VIEW_ID);    } catch (    PartInitException e) {      e.printStackTrace();    }  }  view.setInput(inputElement,taint);  activePage.activate(view);}  }
class C{  public int stepKernel(double[] observation,double[] candidate){  for (int d=0; d < dimensions; d++) {    if (Math.abs(observation[d] - candidate[d]) > kernelWidthsInUse[d]) {      return 0;    }  }  return 1;}  }
class C{  public void checkClusterVms(URI clusterId,URI datacenterId,String stepId){  log.info("checkClusterVms {} {}",clusterId,datacenterId);  Cluster cluster=null;  try {    WorkflowStepCompleter.stepExecuting(stepId);    cluster=_dbClient.queryObject(Cluster.class,clusterId);    List<String> vmList=vcenterController.getVirtualMachines(datacenterId,clusterId);    if (!vmList.isEmpty()) {      log.error("there are {} VMs in the cluster",vmList.size());      throw ComputeSystemControllerException.exceptions.clusterHasVms(cluster != null ? cluster.getLabel() : clusterId.toString());    } else {      log.info("there are no VMs in the cluster, step successful");    }    WorkflowStepCompleter.stepSucceded(stepId);  } catch (  VcenterControllerException e) {    log.warn("VcenterControllerException when trying to checkClusterVms: " + e.getMessage(),e);    if (e.getCause() instanceof VcenterObjectNotFoundException) {      log.info("did not find the datacenter or cluster, considering success");      WorkflowStepCompleter.stepSucceded(stepId);    } else {      log.error("failure " + e);      WorkflowStepCompleter.stepFailed(stepId,e);    }  }catch (  InternalException e) {    log.error("InternalException when trying to checkClusterVms: " + e.getMessage(),e);    WorkflowStepCompleter.stepFailed(stepId,e);  }catch (  Exception e) {    log.error("unexpected exception " + e);    ServiceCoded serviceCoded=ComputeSystemControllerException.exceptions.unableToCheckClusterVms(cluster != null ? cluster.getLabel() : clusterId.toString(),e);    WorkflowStepCompleter.stepFailed(stepId,serviceCoded);  }}  }
class C{  public void stateChanged(){  iframe.setContent(null);  boolean visible=m_data.documentQuery && tabResult.isSelected();  bRePost.setVisible(visible);  if (Ini.isPropertyBool(Ini.P_SHOW_ADVANCED))   forcePost.setVisible(visible);}  }
class C{  public Vector(int initialCapacity,int capacityIncrement){  super();  if (initialCapacity < 0) {    throw new IllegalArgumentException("Illegal Capacity: " + initialCapacity);  }  this.elementData=new Object[initialCapacity];  this.capacityIncrement=capacityIncrement;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public MutableTrigger build(){  CronTriggerImpl ct=new CronTriggerImpl();  ct.setCronExpression(cronExpression);  ct.setTimeZone(cronExpression.getTimeZone());  ct.setMisfireInstruction(misfireInstruction);  return ct;}  }
class C{  public Builder monolingualCorpus(File monolingualCorpus){  this.monolingualCorpus=monolingualCorpus;  return this;}  }
class C{  public static SpreadMethod parseSpreadMethod(FXGNode node,String value,String name,SpreadMethod defaultValue){  if (FXG_SPREADMETHOD_PAD_VALUE.equals(value)) {    return SpreadMethod.PAD;  } else   if (FXG_SPREADMETHOD_REFLECT_VALUE.equals(value)) {    return SpreadMethod.REFLECT;  } else   if (FXG_SPREADMETHOD_REPEAT_VALUE.equals(value)) {    return SpreadMethod.REPEAT;  } else {    if (((AbstractFXGNode)node).isVersionGreaterThanCompiler()) {      FXGLog.getLogger().log(FXGLogger.WARN,"DefaultAttributeValue",null,((AbstractFXGNode)node).getDocumentName(),node.getStartLine(),node.getStartColumn(),defaultValue,name);      return defaultValue;    } else {      throw new FXGException(node.getStartLine(),node.getStartColumn(),"UnknownSpreadMethod",value);    }  }}  }
class C{  public boolean hasRotationExt(){  return hasExtension(GphotoRotation.class);}  }
class C{  private void createNavbar(){  if (debugFX) {    System.out.println("createNavbar");  }  navButtons.getChildren().add(multiboxfx);  final Region multiboxSpacer=new Region();  HBox.setHgrow(multiboxSpacer,Priority.ALWAYS);  navButtons.getChildren().add(multiboxSpacer);  fxButtons.addButton(NAVBAR,Messages.getMessage("PdfViewerNavBar.RewindToStart"),"start.gif",Commands.FIRSTPAGE,menuItems,this,currentCommandListener,pagesToolBar,navToolBar);  fxButtons.addButton(NAVBAR,Messages.getMessage("PdfViewerNavBar.Rewind10"),"fback.gif",Commands.FBACKPAGE,menuItems,this,currentCommandListener,pagesToolBar,navToolBar);  fxButtons.addButton(NAVBAR,Messages.getMessage("PdfViewerNavBar.Rewind1"),"back.gif",Commands.BACKPAGE,menuItems,this,currentCommandListener,pagesToolBar,navToolBar);  pageCounter1=new Label(Messages.getMessage("PdfViewerPageLabel.text"));  navToolBar.getItems().add(pageCounter1);  navToolBar.getItems().add(pageCounter2);  navToolBar.getItems().add(pageCounter3);  fxButtons.addButton(NAVBAR,Messages.getMessage("PdfViewerNavBar.Forward1"),"forward.gif",Commands.FORWARDPAGE,menuItems,this,currentCommandListener,pagesToolBar,navToolBar);  fxButtons.addButton(NAVBAR,Messages.getMessage("PdfViewerNavBar.Forward10"),"fforward.gif",Commands.FFORWARDPAGE,menuItems,this,currentCommandListener,pagesToolBar,navToolBar);  fxButtons.addButton(NAVBAR,Messages.getMessage("PdfViewerNavBar.ForwardLast"),"end.gif",Commands.LASTPAGE,menuItems,this,currentCommandListener,pagesToolBar,navToolBar);  if (isSingle) {    fxButtons.addButton(PAGES,Messages.getMessage("PageLayoutButton.SinglePage"),"single.gif",Commands.SINGLE,menuItems,this,currentCommandListener,pagesToolBar,navToolBar);    fxButtons.addButton(PAGES,Messages.getMessage("PageLayoutButton.PageFlow"),"pageflow.gif",Commands.PAGEFLOW,menuItems,this,currentCommandListener,pagesToolBar,navToolBar);  }  if (commonValues.getModeOfOperation() == Values.RUNNING_PLUGIN) {    fxButtons.getTopButtons().getItems().add(pagesToolBar);  } else {    navButtons.getChildren().add(navToolBar);  }  final Region navToolBarSpacer=new Region();  HBox.setHgrow(navToolBarSpacer,Priority.ALWAYS);  navButtons.getChildren().add(navToolBarSpacer);  if (commonValues.getModeOfOperation() == Values.RUNNING_PLUGIN) {    fxButtons.getTopButtons().getItems().add(pagesToolBar);  } else {    navButtons.getChildren().add(pagesToolBar);  }  multiboxfx.prefWidthProperty().bind(pagesToolBar.widthProperty());}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ANONYMOUS_GEN_EXPR_2__INDEX_1:    return getIndex_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public boolean isLocal(){  return this.isLocal;}  }
class C{  public Node(Coordinate pt){  this(pt,new DirectedEdgeStar());}  }
class C{  public static void extract(int format,Resource source,Resource target) throws IOException {  if (format == FORMAT_ZIP)   extractZip(source,target); else   if (format == FORMAT_TAR)   extractTar(source,target); else   if (format == FORMAT_GZIP)   extractGZip(source,target); else   if (format == FORMAT_TGZ)   extractTGZ(source,target); else   throw new IOException("can't extract in given format");}  }
class C{  public FreeFormPointSet(int capacity){  this.capacity=capacity;  ids=new String[capacity];  lats=new double[capacity];  lons=new double[capacity];  polygons=new Polygon[capacity];}  }
class C{  private void enqueueContainersToBuffer(final byte[] wordhash,final ReferenceContainer<WordReference>[] containers){  assert (containers.length == this.seeds.scheme.verticalPartitions());  if (this.transmissionBuffer == null)   return;  List<Seed>[] targets=DHTSelection.selectDHTDistributionTargets(this.seeds,wordhash,3,this.seeds.redundancy());  assert (targets.length == this.seeds.scheme.verticalPartitions());  assert (targets.length == containers.length);  for (int vertical=0; vertical < containers.length; vertical++) {    ReferenceContainer<WordReference> verticalContainer=containers[vertical];    if (verticalContainer.isEmpty())     continue;    for (    Seed target : targets[vertical]) {      Transmission.Chunk entry=this.transmissionBuffer.get(target.hash);      if (entry == null)       entry=transmission.newChunk(target); else {        log.info("extending chunk for peer " + entry.dhtTarget().hash + " containing "+ entry.containersSize()+ " references with "+ verticalContainer.size()+ " more entries");      }      try {        entry.add(verticalContainer);      } catch (      SpaceExceededException e) {        ConcurrentLog.logException(e);      }      this.transmissionBuffer.put(target.hash,entry);    }  }}  }
class C{  private Technology(){}  }
class C{  AnnotationDefinitionBuilder args(final EClass... argTypes){  this.argtypes=argTypes;  return this;}  }
class C{  public Editor edit() throws IOException {  return DiskLruCache.this.edit(key,sequenceNumber);}  }
class C{  public int findOpeningPeer(int start,int openingPeer,int closingPeer){  assert (start < _document.getLength());  int depth=1;  start+=1;  int token;  int offset=start;  while (true) {    token=previousToken(offset,UNBOUND);    offset=getPosition();    if (token == SQLIndentSymbols.TokenEOF) {      return NOT_FOUND;    }    if (isSameToken(token,closingPeer)) {      depth++;    } else     if (isSameToken(token,openingPeer)) {      depth--;    }    if (depth == 0) {      if (offset == -1) {        return 0;      }      return offset;    }  }}  }
class C{  MruEntry(){  makeHead();  key=value=null;}  }
class C{  public LogFormat(double base,String baseLabel,boolean showBase){  this(base,baseLabel,"^",showBase);}  }
class C{  protected Path wrap(Path other){  return new FilterPath(other,fileSystem);}  }
class C{  public CircularRedirectException(){  super();}  }
class C{  private void createAdjacencyLists(List<Edge> edges,int numberOfVertices){  for (  Edge edge : edges) {    addEdge(edge.u,edge.v);  }}  }
class C{  public void addTrace(String info){  if (info == null) {    throw new IllegalArgumentException("info cannot be null.");  }  if (trace == null) {    trace=new StringBuilder(256);  }  trace.append('\n');  trace.append(info);}  }
class C{  public DOM2Helper(){}  }
class C{  @SuppressWarnings("rawtypes") public Collection toCollection(String column) throws SQLException {  throw new UnsupportedOperationException();}  }
class C{  public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj instanceof Group == false) {    return false;  }  Group another=(Group)obj;  return group.equals(another.toString());}  }
class C{  private Document readDocument(File f,String characterSet) throws IOException {  ProgressMonitorInputStream pin=new ProgressMonitorInputStream(this,"Reading " + f.getName(),new FileInputStream(f));  BufferedReader in=new BufferedReader(new InputStreamReader(pin,characterSet));  try {    StyledDocument doc=createDocument();    MutableAttributeSet attrs=((StyledEditorKit)editor.getEditorKit()).getInputAttributes();    String line;    boolean isFirst=true;    while ((line=in.readLine()) != null) {      if (isFirst) {        isFirst=false;      } else {        doc.insertString(doc.getLength(),"\n",attrs);      }      doc.insertString(doc.getLength(),line,attrs);    }    return doc;  } catch (  BadLocationException e) {    throw new IOException(e.getMessage());  }catch (  OutOfMemoryError e) {    System.err.println("out of memory!");    throw new IOException("Out of memory.");  } finally {    in.close();  }}  }
class C{  public static Object executeScript(String filePath,String functionName,Map<String,Object> context){  return executeScript(filePath,functionName,context,new Object[]{context});}  }
class C{  public boolean visit(MethodRefParameter node){  return true;}  }
class C{  public boolean isConst(){  return const_;}  }
class C{  private static <T extends Component>T buildRow(final JPanel panel,final String labelText,final String hint,final T component,final boolean isLast){  component.setPreferredSize(new Dimension(COLORPANEL_WIDTH,COLORPANEL_HEIGHT));  final JPanel rowPanel=new JPanel(new BorderLayout());  rowPanel.setBorder(new EmptyBorder(0,2,isLast ? 2 : 0,2));  rowPanel.add(new JLabel(labelText),BorderLayout.CENTER);  rowPanel.add(CHintCreator.createHintPanel(component,hint),BorderLayout.EAST);  panel.add(rowPanel);  return component;}  }
class C{  @Override public int hashCode(){  return this.value.hashCode();}  }
class C{  public SimpleThresholdSetter(double factor){  m_factor=factor;}  }
class C{  public boolean equals(Object o){  if (!(o instanceof NodeCommand))   return false;  NodeCommand nc=(NodeCommand)o;  if (nc.com != com || nc.quiteUniqueID != quiteUniqueID)   return false;  if (nc.pars == null && pars == null)   return true;  if (nc.pars == null || pars == null || pars.length != nc.pars.length)   return false;  for (int i=0; i < pars.length; ++i)   if (!nc.pars[i].equals(pars[i]))   return false;  return true;}  }
class C{  public void alignRight(ArrayList<Integer> nodes){  if (m_bNeedsUndoAction) {    addUndoAction(new alignRightAction(nodes));  }  int nMaxX=-1;  for (int iNode=0; iNode < nodes.size(); iNode++) {    int nX=getPositionX(nodes.get(iNode));    if (nX > nMaxX || iNode == 0) {      nMaxX=nX;    }  }  for (int iNode=0; iNode < nodes.size(); iNode++) {    int nNode=nodes.get(iNode);    m_nPositionX.set(nNode,nMaxX);  }}  }
class C{  public boolean isStartVisible(int row){  return getBoolean(row,VisualItem.STARTVISIBLE);}  }
class C{  public void clearTracks(){  agentTracks.clear();}  }
class C{  public WriteSingleRegisterRequest(){  super();  setFunctionCode(Modbus.WRITE_SINGLE_REGISTER);  setDataLength(4);}  }
class C{  protected AssociationRequest(AssociationSessionType type){  this(type,null);}  }
class C{  public static boolean mergeTemplate(String templateName,Context context,Writer writer) throws ResourceNotFoundException, ParseErrorException, MethodInvocationException, Exception {  return mergeTemplate(templateName,RuntimeSingleton.getString(INPUT_ENCODING,ENCODING_DEFAULT),context,writer);}  }
class C{  private void logProximitySensorInfo(){  if (proximitySensor == null) {    return;  }  StringBuilder info=new StringBuilder("Proximity sensor: ");  info.append("name=").append(proximitySensor.getName());  info.append(", vendor: ").append(proximitySensor.getVendor());  info.append(", power: ").append(proximitySensor.getPower());  info.append(", resolution: ").append(proximitySensor.getResolution());  info.append(", max range: ").append(proximitySensor.getMaximumRange());  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD) {    info.append(", min delay: ").append(proximitySensor.getMinDelay());  }  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT_WATCH) {    info.append(", type: ").append(proximitySensor.getStringType());  }  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {    info.append(", max delay: ").append(proximitySensor.getMaxDelay());    info.append(", reporting mode: ").append(proximitySensor.getReportingMode());    info.append(", isWakeUpSensor: ").append(proximitySensor.isWakeUpSensor());  }  Log.d(TAG,info.toString());}  }
class C{  public String bPartner(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value,Object oldValue){  Integer C_BPartner_ID=(Integer)value;  if (C_BPartner_ID == null || C_BPartner_ID.intValue() == 0)   return "";  String sql="SELECT p.AD_Language,p.C_PaymentTerm_ID," + " COALESCE(p.M_PriceList_ID,g.M_PriceList_ID) AS M_PriceList_ID, p.PaymentRule,p.POReference," + " p.SO_Description,p.IsDiscountPrinted,"+ " p.SO_CreditLimit, p.SO_CreditLimit-p.SO_CreditUsed AS CreditAvailable,"+ " l.C_BPartner_Location_ID,c.AD_User_ID,"+ " COALESCE(p.PO_PriceList_ID,g.PO_PriceList_ID) AS PO_PriceList_ID, p.PaymentRulePO,p.PO_PaymentTerm_ID "+ "FROM C_BPartner p"+ " INNER JOIN C_BP_Group g ON (p.C_BP_Group_ID=g.C_BP_Group_ID)"+ " LEFT OUTER JOIN C_BPartner_Location l ON (p.C_BPartner_ID=l.C_BPartner_ID AND l.IsBillTo='Y' AND l.IsActive='Y')"+ " LEFT OUTER JOIN AD_User c ON (p.C_BPartner_ID=c.C_BPartner_ID) "+ "WHERE p.C_BPartner_ID=? AND p.IsActive='Y'";  try {    PreparedStatement pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,C_BPartner_ID.intValue());    ResultSet rs=pstmt.executeQuery();    if (rs.next()) {      int locID=rs.getInt("C_BPartner_Location_ID");      if (C_BPartner_ID.toString().equals(Env.getContext(ctx,WindowNo,Env.TAB_INFO,"C_BPartner_ID"))) {        String loc=Env.getContext(ctx,WindowNo,Env.TAB_INFO,"C_BPartner_Location_ID");        if (loc.length() > 0)         locID=Integer.parseInt(loc);      }      if (locID == 0)       mTab.setValue("C_BPartner_Location_ID",null); else       mTab.setValue("C_BPartner_Location_ID",new Integer(locID));      int contID=rs.getInt("AD_User_ID");      if (C_BPartner_ID.toString().equals(Env.getContext(ctx,WindowNo,Env.TAB_INFO,"C_BPartner_ID"))) {        String cont=Env.getContext(ctx,WindowNo,Env.TAB_INFO,"AD_User_ID");        if (cont.length() > 0)         contID=Integer.parseInt(cont);      }      if (contID == 0)       mTab.setValue("AD_User_ID",null); else       mTab.setValue("AD_User_ID",new Integer(contID));    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);    return e.getLocalizedMessage();  }  return "";}  }
class C{  private boolean markProcessed(){  boolean oldValue=processed;  processed=true;  return !oldValue;}  }
class C{  public RSyntaxDocument(String syntaxStyle){  this(null,syntaxStyle);}  }
class C{  public static <T,C extends Collection<T>>C requireNonNullElements(C collection){  requireNonNull(collection,"The provided collection is null.");  collection.forEach(null);  return collection;}  }
class C{  @Deprecated public boolean isConnectionStaleCheckingEnabled(){  return params.isStaleCheckingEnabled();}  }
class C{  @Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){  super.onMeasure(widthMeasureSpec,heightMeasureSpec);  int measureWidth=MeasureSpec.makeMeasureSpec(getMeasuredWidth() - getPaddingLeft() - getPaddingRight(),MeasureSpec.EXACTLY);  int measureHeight=MeasureSpec.makeMeasureSpec(getMeasuredHeight() - getPaddingTop() - getPaddingBottom(),MeasureSpec.EXACTLY);  if (mContainer != null) {    mContainer.measure(measureWidth,measureHeight);  }}  }
class C{  ActionHistory(BinaryContent aContent){  if (aContent == null)   throw new NullPointerException("null content");  content=aContent;  actionList=new ArrayList<>();}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/deregister") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public StoragePoolRestRep deregisterStoragePool(@PathParam("id") URI id){  ArgValidator.checkFieldUriType(id,StoragePool.class,"id");  StoragePool pool=queryResource(id);  StringBuffer errorMessage=new StringBuffer();  if (RegistrationStatus.REGISTERED.toString().equalsIgnoreCase(pool.getRegistrationStatus())) {    pool.setRegistrationStatus(RegistrationStatus.UNREGISTERED.toString());    if (null == pool.getConnectedVirtualArrays() || pool.getConnectedVirtualArrays().isEmpty()) {      ImplicitPoolMatcher.matchModifiedStoragePoolsWithAllVirtualPool(Arrays.asList(pool),_dbClient,_coordinator,errorMessage);    }    _dbClient.persistObject(pool);    recordStoragePoolEvent(OperationTypeEnum.STORAGE_POOL_DEREGISTER,STORAGEPOOL_DEREGISTERED_DESCRIPTION,pool.getId());    auditOp(OperationTypeEnum.DEREGISTER_STORAGE_POOL,true,null,id.toString());  }  return toStoragePoolRep(pool,_dbClient,_coordinator);}  }
class C{  @Override public void write(byte[] buffer) throws IOException {  write(buffer,0,buffer.length);}  }
class C{  private static RangeMap<Integer,String> buildReplacements(String contents,JCCompilationUnit unit,Set<String> usedNames,Multimap<String,Range<Integer>> usedInJavadoc,JavadocOnlyImports javadocOnlyImports){  RangeMap<Integer,String> replacements=TreeRangeMap.create();  for (  JCImport importTree : unit.getImports()) {    String simpleName=getSimpleName(importTree);    if (!isUnused(unit,usedNames,usedInJavadoc,javadocOnlyImports,importTree,simpleName)) {      continue;    }    int endPosition=importTree.getEndPosition(unit.endPositions);    endPosition=Math.max(CharMatcher.isNot(' ').indexIn(contents,endPosition),endPosition);    String sep=Newlines.guessLineSeparator(contents);    if (endPosition + sep.length() < contents.length() && contents.subSequence(endPosition,endPosition + sep.length()).equals(sep)) {      endPosition+=sep.length();    }    replacements.put(Range.closedOpen(importTree.getStartPosition(),endPosition),"");    if (!importTree.isStatic()) {      for (      Range<Integer> docRange : usedInJavadoc.get(simpleName)) {        if (docRange == null) {          continue;        }        String replaceWith=importTree.getQualifiedIdentifier().toString();        replacements.put(docRange,replaceWith);      }    }  }  return replacements;}  }
class C{  public void testSetupSysProps(){  JvmLauncherStub java=new JvmLauncherStub();  container.setupSysProps(java);  Properties props=java.getSystemProperties();  assertEquals(12,props.size());  assertTrue(props.getProperty("install.root").endsWith("ram:/jonasroot"));  assertTrue(props.getProperty("jonas.base").endsWith("ram:/jonasbase"));  assertTrue(props.getProperty("java.endorsed.dirs").endsWith(fileHandler.append("ram:/jonasroot","lib/endorsed")));  assertTrue(props.getProperty("java.security.policy").endsWith(fileHandler.append("ram:/jonasbase","conf/java.policy")));  assertTrue(props.getProperty("java.security.auth.login.config").endsWith(fileHandler.append("ram:/jonasbase","conf/jaas.config")));}  }
class C{  @Override public String globalInfo(){  return "Partitions labels into subsets based on the dataset defined hierarchy (assuming that a '.' in the attribute names defines hierarchical branches, e.g., \"Europe.Spain\").";}  }
class C{  public Heap(Comparator<? super E> comparator){  this.comparator=comparator;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.MULTIPLICITY___BOUND_1:    setBound_1(BOUND_1_EDEFAULT);  return;case UmplePackage.MULTIPLICITY___LOWER_BOUND_1:setLowerBound_1(LOWER_BOUND_1_EDEFAULT);return;case UmplePackage.MULTIPLICITY___UPPER_BOUND_1:setUpperBound_1(UPPER_BOUND_1_EDEFAULT);return;case UmplePackage.MULTIPLICITY___BOUND_INT:setBound_int(BOUND_INT_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  private void initClusteredHttpSessionFilter(ServletContext servletContext,EnumSet<DispatcherType> disps){  log.debug("Registering Clustered Http Session Filter");  servletContext.addListener(new SessionListener());  FilterRegistration.Dynamic hazelcastWebFilter=servletContext.addFilter("hazelcastWebFilter",new SpringAwareWebFilter());  Map<String,String> parameters=new HashMap<>();  parameters.put("instance-name","<%=baseName%>");  parameters.put("map-name","clustered-http-sessions");  parameters.put("sticky-session","true");  parameters.put("cookie-name","hazelcast.sessionId");  if (env.acceptsProfiles(Constants.SPRING_PROFILE_PRODUCTION)) {    parameters.put("debug","false");  } else {    parameters.put("debug","true");  }  parameters.put("shutdown-on-destroy","true");  hazelcastWebFilter.setInitParameters(parameters);  hazelcastWebFilter.addMappingForUrlPatterns(disps,true,"/*");  hazelcastWebFilter.setAsyncSupported(true);}  }
class C{  @SuppressWarnings("unchecked") public X509CertPath(List<? extends Certificate> certs) throws CertificateException {  super("X.509");  for (  Object obj : certs) {    if (obj instanceof X509Certificate == false) {      throw new CertificateException("List is not all X509Certificates: " + obj.getClass().getName());    }  }  this.certs=Collections.unmodifiableList(new ArrayList<X509Certificate>((List<X509Certificate>)certs));}  }
class C{  public static Date parseLocalDate(String text,String fieldName){  try {    return YYYYMMDD_UTC_FORMAT.parse(text);  } catch (  ParseException e) {    throw new InvalidObjectDataException(String.format("The %s field should be in yyyy-MM-dd format",fieldName));  }}  }
class C{  public Address __rand__(final Object rhs){  return new Address(m_value.and(getBigInteger(rhs)));}  }
class C{  @Inline public static boolean isForwarded(ObjectReference object){  return (VM.objectModel.readAvailableByte(object) & FORWARDING_MASK) == FORWARDED;}  }
class C{  public synchronized void waitForFlag(){  while (!isSet) {    try {      wait();    } catch (    InterruptedException ie) {    }  }}  }
class C{  public void sendNotification(String notificationName,Object body,String type){  notifyObservers(new BaseNotification(notificationName,body,type));}  }
class C{  private void add(LongPolynomial2 b){  if (b.coeffs.length > coeffs.length) {    coeffs=Arrays.copyOf(coeffs,b.coeffs.length);  }  for (int i=0; i < b.coeffs.length; i++) {    coeffs[i]=(coeffs[i] + b.coeffs[i]) & 0x7FF0007FFL;  }}  }
class C{  public boolean isModifiedNow(){  boolean isModified=_classLoader.isModifiedNow();  if (isModified)   log.fine("server is modified");  return isModified;}  }
class C{  public BlockGroupingCollector(Sort groupSort,int topNGroups,boolean needsScores,Weight lastDocPerGroup) throws IOException {  if (topNGroups < 1) {    throw new IllegalArgumentException("topNGroups must be >= 1 (got " + topNGroups + ")");  }  groupQueue=new GroupQueue(topNGroups);  pendingSubDocs=new int[10];  if (needsScores) {    pendingSubScores=new float[10];  }  this.needsScores=needsScores;  this.lastDocPerGroup=lastDocPerGroup;  this.groupSort=groupSort;  this.topNGroups=topNGroups;  final SortField[] sortFields=groupSort.getSort();  comparators=new FieldComparator<?>[sortFields.length];  leafComparators=new LeafFieldComparator[sortFields.length];  compIDXEnd=comparators.length - 1;  reversed=new int[sortFields.length];  for (int i=0; i < sortFields.length; i++) {    final SortField sortField=sortFields[i];    comparators[i]=sortField.getComparator(topNGroups,i);    reversed[i]=sortField.getReverse() ? -1 : 1;  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:09.046 -0500",hash_original_method="1A6DA6E79B72785E2BC38681BFBED33C",hash_generated_method="40C9F7359A121A96A8F5C41EE4F64F86") public CornerPathEffect(float radius){  native_instance=nativeCreate(radius);}  }
class C{  public synchronized int[] sizes(){  if (this.blobs == null)   return new int[0];  final int[] s=new int[this.blobs.size()];  int c=0;  for (  final blobItem bi : this.blobs)   s[c++]=bi.blob.size();  return s;}  }
class C{  public static Sentence parse(final String text,final ConversationContext ctx){  String txt;  if (text == null) {    txt="";  } else {    if ((ctx != null) && ctx.isForMatching()) {      final ExpressionMatcher matcher=new ExpressionMatcher();      txt=matcher.readMatchingFlags(text);      if (matcher.isAnyFlagSet()) {        return matcher.parseSentence(txt,ctx);      }    } else {      txt=text;    }  }  txt=txt.trim();  final SentenceImplementation sentence=new SentenceImplementation(ctx,txt);  try {    final ConversationParser parser=new ConversationParser(sentence);    sentence.parse(parser);    sentence.classifyWords(parser);    if ((ctx != null) && ctx.getMergeExpressions()) {      sentence.evaluateSentenceType();      sentence.mergeWords();      if (!ctx.isForMatching()) {        sentence.standardizeSentenceType();        sentence.performaAliasing();      }    }    sentence.setError(parser.getErrorString());  } catch (  final Exception e) {    LOGGER.error("ConversationParser.parse(): caught Exception while parsing '" + text + '\'');    sentence.setError(e.getMessage());    e.printStackTrace();  }  return sentence;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:47.531 -0500",hash_original_method="4C17D9C303E0C63CA9FC8056DA52EF3D",hash_generated_method="464B50AF5EE3FC5711804488EE9646B7") public final void sendMessage(int what){  if (mSmHandler == null)   return;  mSmHandler.sendMessage(obtainMessage(what));}  }
class C{  public boolean isLenient(){  return lenient;}  }
class C{  public static Account createPublicOnlyKeyAccount(final Account account){  return new Account(new KeyPair(account.getAddress().getPublicKey()));}  }
class C{  List<SubscriptionHistory> filterIrrelevantSubscriptionHistories(List<SubscriptionHistory> subHistories){  List<SubscriptionHistory> entriesToRemove=new ArrayList<SubscriptionHistory>();  SubscriptionHistory formerHistory=null;  SubscriptionHistory currentHistory=null;  for (int i=subHistories.size() - 1; i >= 0; i--) {    currentHistory=subHistories.get(i);    if (subHistoryIsIrrelevant(currentHistory,formerHistory)) {      entriesToRemove.add(currentHistory);    } else {      formerHistory=currentHistory;    }  }  List<SubscriptionHistory> filteredEntries=new ArrayList<SubscriptionHistory>();  for (  SubscriptionHistory subHistory : subHistories) {    if (!entriesToRemove.contains(subHistory)) {      filteredEntries.add(subHistory);    }  }  return filteredEntries;}  }
class C{  private void manuallyRunCrawlJob(){  if (crawlJob.isRunning() && crawlJob.isUnpausable()) {    crawlJob.getCrawlController().getFrontier().run();  }}  }
class C{  @Inline public void addEvent(EventType et){  if (!enabled)   return;  addEventInternal(et);}  }
class C{  public CylinderPortrayal3D(Appearance appearance,boolean generateNormals,boolean generateTextureCoordinates,double scale){  this.appearance=appearance;  setScale(null,scale);  Cylinder cylinder=new Cylinder(0.5f,1f,(generateNormals ? Primitive.GENERATE_NORMALS : 0) | (generateTextureCoordinates ? Primitive.GENERATE_TEXTURE_COORDS : 0),appearance);  setShape3DFlags(cylinder.getShape(Cylinder.BODY));  setShape3DFlags(cylinder.getShape(Cylinder.TOP));  setShape3DFlags(cylinder.getShape(Cylinder.BOTTOM));  group=cylinder;}  }
class C{  public static Expression createTriggerExpression(final String text,final ExpressionMatcher matcher){  final ConversationContext ctx=new ConvCtxForMatcher();  ctx.setIgnoreIgnorable(false);  Expression expr;  if (matcher == null) {    expr=parse(text,ctx).getTriggerExpression();    if ((expr.getMatcher() == null) && !expr.getNormalized().equals(expr.getOriginal())) {      final WordEntry norm=WordList.getInstance().find(expr.getNormalized());      if ((norm != null) && !expr.getTypeString().equals(norm.getTypeString())) {        expr.setMatcher(new TypeExprMatcher());      }    }  } else {    expr=matcher.parseSentence(text,ctx).getTriggerExpression();  }  return expr;}  }
class C{  public static void removeBlocksInIteration(EntityPlayer player,ItemStack stack,World world,BlockPos pos,BlockPos posStart,BlockPos posEnd,Block block,Material[] materialsListing,boolean silk,int fortune,boolean dispose){  float blockHardness=block == null ? 1F : block.getBlockHardness(world.getBlockState(pos),world,pos);  for (  BlockPos iterPos : BlockPos.getAllInBox(pos.add(posStart),pos.add(posEnd))) {    if (iterPos.equals(pos))     continue;    removeBlockWithDrops(player,stack,world,iterPos,pos,block,materialsListing,silk,fortune,blockHardness,dispose);  }}  }
class C{  void update(){  MutableInt icon=new MutableInt(0);  CharSequence status=concat(getChargeInfo(icon),getOwnerInfo(),getCurrentMessage());  setCompoundDrawablesWithIntrinsicBounds(icon.value,0,0,0);  setText(status);}  }
class C{  public void addHandler(DeserializationProblemHandler h){  if (!LinkedNode.contains(_problemHandlers,h)) {    _problemHandlers=new LinkedNode<DeserializationProblemHandler>(h,_problemHandlers);  }}  }
class C{  private int nextFreeId(){  int id=0;  Set<Integer> ids=solutions.keySet();  while (ids.contains(id)) {    id++;  }  return id;}  }
class C{  private int diff_cleanupSemanticScore(String one,String two){  if (one.length() == 0 || two.length() == 0) {    return 6;  }  char char1=one.charAt(one.length() - 1);  char char2=two.charAt(0);  boolean nonAlphaNumeric1=!Character.isLetterOrDigit(char1);  boolean nonAlphaNumeric2=!Character.isLetterOrDigit(char2);  boolean whitespace1=nonAlphaNumeric1 && Character.isWhitespace(char1);  boolean whitespace2=nonAlphaNumeric2 && Character.isWhitespace(char2);  boolean lineBreak1=whitespace1 && Character.getType(char1) == Character.CONTROL;  boolean lineBreak2=whitespace2 && Character.getType(char2) == Character.CONTROL;  boolean blankLine1=lineBreak1 && BLANKLINEEND.matcher(one).find();  boolean blankLine2=lineBreak2 && BLANKLINESTART.matcher(two).find();  if (blankLine1 || blankLine2) {    return 5;  } else   if (lineBreak1 || lineBreak2) {    return 4;  } else   if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {    return 3;  } else   if (whitespace1 || whitespace2) {    return 2;  } else   if (nonAlphaNumeric1 || nonAlphaNumeric2) {    return 1;  }  return 0;}  }
class C{  public void showContent(){  mSlidingMenu.showContent();}  }
class C{  static public final void print(ParseTree pt,java.io.PrintWriter output){  output.println("%% Output of parse tree for module " + pt.moduleName());  String[] dependencies=pt.dependencies();  if (dependencies.length == 0) {    output.println("%% no dependencies");  } else {    output.print("%% dependends on:");    for (int lvi=0; lvi < dependencies.length; lvi++) {      output.print(" " + dependencies[lvi]);    }    output.println(".");  }  printSubTree(output,"",pt.rootNode());}  }
class C{  public void copy(ReviewDb db,ChangeControl ctl,PatchSet ps,Iterable<PatchSetApproval> dontCopy) throws OrmException {  db.patchSetApprovals().insert(getForPatchSet(db,ctl,ps,dontCopy));}  }
class C{  public NeuronGroup(final Network net,final List<Neuron> neurons){  super(net);  neuronList=new ArrayList<Neuron>(neurons.size());  for (  Neuron neuron : neurons) {    addNeuron(neuron);  }  neuronList=new CopyOnWriteArrayList<Neuron>(neuronList);  updateRule=getNeuronType();  resetSubsamplingIndices();}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  for (Node<E> n=findFirst(); n != null; n=n.next) {    E v=n.getValidValue();    if (v != null)     s.writeObject(n.key);  }  s.writeObject(null);}  }
class C{  public boolean isSameCurrency(){  Object oo=get_Value(COLUMNNAME_IsSameCurrency);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void output(Vertex output){  if (!isEnabled()) {    return;  }  Vertex sense=output.mostConscious(Primitive.SENSE);  if ((sense == null) || (!getPrimitive().equals(sense.getData()))) {    return;  }  try {    if (getChannel() != null) {      log("Output:",Bot.FINE,output);      getChannel().sendMessage(printInput(output) + "\n");      for (      ChannelListener listener : getChannelListeners()) {        ChannelEvent event=new ChannelEvent(getChannel(),getNick(),getUserName(),printInput(output));        listener.onMessage(event);      }      this.lastUsers.remove(0);      this.lastUsers.add(getNick());    }  } catch (  Exception exception) {    log(exception);  }}  }
class C{  public ToStringBuilder append(Object[] array){  style.append(buffer,null,array,null);  return this;}  }
class C{  public boolean isPosted(){  Object oo=get_Value(COLUMNNAME_Posted);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public TreeRTGCupressusSempervirens(){  super();}  }
class C{  public static void errors(Element e,Set<String> messages){  for (  String msg : messages) {    messager.printMessage(Diagnostic.Kind.ERROR,msg,e);  }}  }
class C{  public void addArchive(final ArchiveDescription description){  this.archives.add(description);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:24.614 -0500",hash_original_method="1E91804F8A3049A9C15BCD340F87DF5D",hash_generated_method="2D7EC2CD6623089BA35F75339EF4DD6A") protected void startTimer(SIPServerTransaction transaction){  if (this.timerTask != null && timerTask.transaction == transaction) {    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logDebug("Timer already running for " + getDialogId());    return;  }  if (sipStack.isLoggingEnabled())   sipStack.getStackLogger().logDebug("Starting dialog timer for " + getDialogId());  this.ackSeen=false;  acquireTimerTaskSem();  try {    if (this.timerTask != null) {      this.timerTask.transaction=transaction;    } else {      this.timerTask=new DialogTimerTask(transaction);      sipStack.getTimer().schedule(timerTask,SIPTransactionStack.BASE_TIMER_INTERVAL,SIPTransactionStack.BASE_TIMER_INTERVAL);    }  }  finally {    releaseTimerTaskSem();  }  this.setRetransmissionTicks();}  }
class C{  public String toString(){  return Boolean.toString(get());}  }
class C{  public boolean hasForward(){  if (index + 1 < history.size() && index >= 0) {    return true;  } else {    return false;  }}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  log.fine("doGet");  log.info(response.toString());  WebSessionCtx wsc=WebSessionCtx.get(request);  WWindowStatus ws=WWindowStatus.get(request);  m_curTab=ws.curTab;  WebDoc doc=null;  File file=null;  if (ws == null) {    doc=WebDoc.createPopup("No Context");    doc.addPopupClose(wsc.ctx);  } else {    log.info("");    if (!MRole.getDefault().isCanReport(ws.curTab.getAD_Table_ID())) {      doc=WebDoc.createPopup("Access Cannot Report");      doc.addPopupClose(wsc.ctx);    }    MQuery query=new MQuery(m_curTab.getTableName());    String queryColumn=m_curTab.getLinkColumnName();    if (queryColumn.length() == 0)     queryColumn=m_curTab.getKeyColumnName();    String infoName=null;    String infoDisplay=null;    for (int i=0; i < m_curTab.getFieldCount(); i++) {      GridField field=m_curTab.getField(i);      if (field.isKey())       infoName=field.getHeader();      if ((field.getColumnName().equals("Name") || field.getColumnName().equals("DocumentNo")) && field.getValue() != null)       infoDisplay=field.getValue().toString();      if (infoName != null && infoDisplay != null)       break;    }    if (queryColumn.length() != 0) {      if (queryColumn.endsWith("_ID"))       query.addRestriction(queryColumn,MQuery.EQUAL,new Integer(Env.getContextAsInt(wsc.ctx,m_curTab.getWindowNo(),queryColumn)),infoName,infoDisplay); else       query.addRestriction(queryColumn,MQuery.EQUAL,Env.getContext(wsc.ctx,m_curTab.getWindowNo(),queryColumn),infoName,infoDisplay);    }    file=getPrintFormats(m_curTab.getAD_Table_ID(),request,m_curTab,query);    String error=WebUtil.streamFile(response,file);    if (error == null)     return;    doc=WebDoc.createWindow(error);  }  WebUtil.createResponse(request,response,this,null,doc,false);}  }
class C{  public ECDSASignature(BigInteger r,BigInteger s){  this.r=r;  this.s=s;}  }
class C{  public PlainDocument(){  this(new GapContent());}  }
class C{  public boolean isFullyZoomedOut(){  return mViewPortHandler.isFullyZoomedOut();}  }
class C{  public void screenToVirtualViewCoordinates(@Size(2) int[] screenPositionIn,ViewPoint viewPositionOut){  mWorkspaceView.getLocationOnScreen(mTempIntArray2);  viewPositionOut.x=(int)((screenPositionIn[0] - mTempIntArray2[0]) / mWorkspaceView.getScaleX());  viewPositionOut.y=(int)((screenPositionIn[1] - mTempIntArray2[1]) / mWorkspaceView.getScaleY());}  }
class C{  public Support_StringWriter(int initialSize){  if (initialSize >= 0) {    buf=new StringBuffer(initialSize);    lock=buf;  } else {    throw new IllegalArgumentException();  }}  }
class C{  protected void postShowContainer(Container c){}  }
class C{  public void write(byte b[]) throws IOException {  write(b,0,b.length);}  }
class C{  public boolean isSetCheck_true(){  return EncodingUtils.testBit(__isset_bitfield,__CHECK_TRUE_ISSET_ID);}  }
class C{  public static String createReport(){  StringBuilder sb=new StringBuilder();  sb.append("############################################## \n");  sb.append("## ParFOR Runtime Statistics Report         ## \n");  sb.append("############################################## \n");  for (  Long pfid : _pfstats.keySet()) {    sb.append("\n");    sb.append("##############################################\n");    sb.append("## ParFOR (ID=" + pfid + ") Execution Statistics:\n");    HashMap<Stat,LinkedList<Double>> stats=_pfstats.get(pfid);    for (int i=0; i < stats.get(Stat.PARFOR_NUMTHREADS).size(); i++) {      sb.append(" Run #" + i + "\n");      sb.append("  Num Threads      = " + (int)(double)stats.get(Stat.PARFOR_NUMTHREADS).get(i) + "\n");      sb.append("  TaskSize         = " + (int)(double)stats.get(Stat.PARFOR_TASKSIZE).get(i) + "\n");      sb.append("  Task Partitioner = " + PTaskPartitioner.values()[(int)(double)stats.get(Stat.PARFOR_TASKPARTITIONER).get(i)] + "\n");      sb.append("  Data Partitioner = " + PDataPartitioner.values()[(int)(double)stats.get(Stat.PARFOR_DATAPARTITIONER).get(i)] + "\n");      sb.append("  Exec Mode        = " + PExecMode.values()[(int)(double)stats.get(Stat.PARFOR_EXECMODE).get(i)] + "\n");      sb.append("  Num Tasks        = " + (int)(double)stats.get(Stat.PARFOR_NUMTASKS).get(i) + "\n");      sb.append("  Num Iterations   = " + (int)(double)stats.get(Stat.PARFOR_NUMITERS).get(i) + "\n");      if (stats.containsKey(Stat.OPT_OPTIMIZER)) {        sb.append("  Optimizer               = " + POptMode.values()[(int)(double)stats.get(Stat.OPT_OPTIMIZER).get(i)] + "\n");        sb.append("  Opt Num Total Plans     = " + (int)(double)stats.get(Stat.OPT_NUMTPLANS).get(i) + "\n");        sb.append("  Opt Num Evaluated Plans = " + (int)(double)stats.get(Stat.OPT_NUMEPLANS).get(i) + "\n");        sb.append("  Time INIT OPTIM   = " + stats.get(Stat.OPT_T).get(i) + "ms\n");      }      sb.append("  Time INIT DATA    = " + stats.get(Stat.PARFOR_INIT_DATA_T).get(i) + "ms\n");      sb.append("  Time INIT PARWRK  = " + stats.get(Stat.PARFOR_INIT_PARWRK_T).get(i) + "ms\n");      sb.append("  Time INIT TASKS   = " + stats.get(Stat.PARFOR_INIT_TASKS_T).get(i) + "ms\n");      sb.append("  Time WAIT EXEC    = " + stats.get(Stat.PARFOR_WAIT_EXEC_T).get(i) + "ms\n");      sb.append("  Time WAIT RESULT  = " + stats.get(Stat.PARFOR_WAIT_RESULTS_T).get(i) + "ms\n");      int count2=1;      for (      Entry<Long,Long> e : _mapPwPf.entrySet()) {        if (e.getValue().equals(pfid)) {          long pid=e.getKey();          HashMap<Stat,LinkedList<Double>> stats2=_pwstats.get(pid);          if (stats2 == null)           continue;          int ntasks=(int)(double)stats2.get(Stat.PARWRK_NUMTASKS).get(0);          int niters=(int)(double)stats2.get(Stat.PARWRK_NUMITERS).get(0);          sb.append("   ------------------------\n");          sb.append("   --- ParWorker #" + count2 + " (ID="+ pid+ ") Execution Statistics:\n");          sb.append("       Num Tasks = " + ntasks + "\n");          sb.append("       Num Iters = " + niters + "\n");          sb.append("       Time EXEC = " + stats2.get(Stat.PARWRK_EXEC_T).get(0) + "ms\n");          LinkedList<Double> taskexec=stats2.get(Stat.PARWRK_TASK_T);          LinkedList<Double> tasksize=stats2.get(Stat.PARWRK_TASKSIZE);          LinkedList<Double> iterexec=stats2.get(Stat.PARWRK_ITER_T);          int count3=0;          for (int k1=0; k1 < ntasks; k1++) {            int ltasksize=(int)(double)tasksize.get(k1);            sb.append("        Task #" + (k1 + 1) + ": \n");            sb.append("         Task Size = " + ltasksize + "\n");            sb.append("         Time EXEC = " + taskexec.get(k1) + "ms\n");            for (int k2=0; k2 < ltasksize; k2++) {              sb.append("          Iteration #" + (k2 + 1) + ": Time EXEC = "+ iterexec.get(count3)+ "ms\n");              count3++;            }          }          count2++;        }      }    }  }  sb.append("############################################## \n");  sb.append("############################################## \n");  return sb.toString();}  }
class C{  final void invertGeneral(Matrix4f m1){  double temp[]=new double[16];  double result[]=new double[16];  int row_perm[]=new int[4];  int i, r, c;  temp[0]=m1.m00;  temp[1]=m1.m01;  temp[2]=m1.m02;  temp[3]=m1.m03;  temp[4]=m1.m10;  temp[5]=m1.m11;  temp[6]=m1.m12;  temp[7]=m1.m13;  temp[8]=m1.m20;  temp[9]=m1.m21;  temp[10]=m1.m22;  temp[11]=m1.m23;  temp[12]=m1.m30;  temp[13]=m1.m31;  temp[14]=m1.m32;  temp[15]=m1.m33;  if (!Matrix4x4.LUDecomposition(temp,row_perm,4)) {    throw new SingularMatrixException();  }  for (i=0; i < 16; i++) {    result[i]=0.0;  }  result[0]=1.0;  result[5]=1.0;  result[10]=1.0;  result[15]=1.0;  luBacksubstitution(temp,row_perm,result);  this.m00=(float)result[0];  this.m01=(float)result[1];  this.m02=(float)result[2];  this.m03=(float)result[3];  this.m10=(float)result[4];  this.m11=(float)result[5];  this.m12=(float)result[6];  this.m13=(float)result[7];  this.m20=(float)result[8];  this.m21=(float)result[9];  this.m22=(float)result[10];  this.m23=(float)result[11];  this.m30=(float)result[12];  this.m31=(float)result[13];  this.m32=(float)result[14];  this.m33=(float)result[15];}  }
class C{  public void actionPerformed(ActionEvent evt){}  }
class C{  public Builder encryptionKey(char[] password){  return set("encryptionKey",password);}  }
class C{  public CompositeFilter(Composite composite,AffineTransform transform){  this.composite=composite;  this.transform=transform;}  }
class C{  public static boolean containsInstance(Collection collection,Object element){  if (collection != null) {    for (    Object candidate : collection) {      if (candidate == element) {        return true;      }    }  }  return false;}  }
class C{  public static double computeOutput(HashMap<String,Double> variables,HashMap<String,Double> params,String equation){  MathEval math=new MathEval();  if (params != null) {    for (    String param_name : params.keySet()) {      math.setVariable(param_name,params.get(param_name));    }  }  for (  String variable_name : variables.keySet()) {    math.setVariable(variable_name,variables.get(variable_name));  }  double outputRPU=math.evaluate(equation);  return outputRPU;}  }
class C{  @IsAllowed(Operation.READ) public static Result labels(String ownerName,String projectName){  if (HttpUtil.isPJAXRequest(request())) {    return labelsAsPjax(ownerName,projectName);  }  return labelsAsJSON(ownerName,projectName);}  }
class C{  public TdfApiResponse build(){  return new TdfApiResponse(this);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:27.928 -0500",hash_original_method="51201694E0EE76265BF39848EF10BE9C",hash_generated_method="49E6B3D175AEB85C0CC035D6E473FA9A") public boolean isSecure(){  return false;}  }
class C{  public void readExternal(ObjectInput is) throws IOException {  readFields(is);}  }
class C{  public double[] drawTransitionTimes(double timeDuration,int totalNumberOfChanges){  double[] times=new double[totalNumberOfChanges];  for (int i=0; i < totalNumberOfChanges; i++) {    times[i]=timeDuration * MathUtils.nextDouble();  }  if (times.length > 1) {    Arrays.sort(times);  }  return times;}  }
class C{  public CopyTargetEdit(int offset,CopySourceEdit source){  this(offset);  setSourceEdit(source);}  }
class C{  private void runPrefetch(int frameNumber){synchronized (this) {    if (!mBitmapsToKeepCached.get(frameNumber)) {      return;    }    if (hasCachedOrPredecodedFrame(frameNumber)) {      return;    }  }  CloseableReference<Bitmap> preDecodedFrame=mAnimatedDrawableBackend.getPreDecodedFrame(frameNumber);  try {    if (preDecodedFrame != null) {      maybeCacheRenderedBitmap(frameNumber,preDecodedFrame);    } else {      CloseableReference<Bitmap> bitmapReference=obtainBitmapInternal();      try {        mAnimatedImageCompositor.renderFrame(frameNumber,bitmapReference.get());        maybeCacheRenderedBitmap(frameNumber,bitmapReference);        FLog.v(TAG,"Prefetch rendered frame %d",frameNumber);      }  finally {        bitmapReference.close();      }    }  }  finally {    CloseableReference.closeSafely(preDecodedFrame);  }}  }
class C{  protected static void println(String message){  System.out.println(message);}  }
class C{  public String toString(){  String s="";  s+=String.format("%.2f N + %.2f",slope(),intercept());  return s + "  (R^2 = " + String.format("%.3f",R2())+ ")";}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 14:38:21.922 -0400",hash_original_method="F030DEB01ADC64D40D54BAE8E454A29C",hash_generated_method="1F7CB548621A095D6F27F0E779C5AF70") public static String eventToString(int event){switch (event) {case EVENT_INVALID:    return "EVENT_INVALID";case EVENT_NO_MATCH:  return "EVENT_NO_MATCH";case EVENT_INCOMPLETE:return "EVENT_INCOMPLETE";case EVENT_STARTED:return "EVENT_STARTED";case EVENT_STOPPED:return "EVENT_STOPPED";case EVENT_START_OF_VOICING:return "EVENT_START_OF_VOICING";case EVENT_END_OF_VOICING:return "EVENT_END_OF_VOICING";case EVENT_SPOKE_TOO_SOON:return "EVENT_SPOKE_TOO_SOON";case EVENT_RECOGNITION_RESULT:return "EVENT_RECOGNITION_RESULT";case EVENT_START_OF_UTTERANCE_TIMEOUT:return "EVENT_START_OF_UTTERANCE_TIMEOUT";case EVENT_RECOGNITION_TIMEOUT:return "EVENT_RECOGNITION_TIMEOUT";case EVENT_NEED_MORE_AUDIO:return "EVENT_NEED_MORE_AUDIO";case EVENT_MAX_SPEECH:return "EVENT_MAX_SPEECH";}return "EVENT_" + event;}  }
class C{  public boolean isStopped(){  return getState().isStopped();}  }
class C{  public Intent(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:54.778 -0500",hash_original_method="373684D9576771B4880AF9E0BF951044",hash_generated_method="523653B449FB51034EEBFF1147E5BD55") public TimeStamp(String s) throws NumberFormatException {  ntpTime=decodeNtpHexString(s);}  }
class C{  public final CC growX(){  hor.setGrow(ResizeConstraint.WEIGHT_100);  return this;}  }
class C{  public WriteRequest(final ContentFormat contentFormat,final int objectId,final int objectInstanceId,final int resourceId,ObjectLink value){  this(Mode.REPLACE,contentFormat,new LwM2mPath(objectId,objectInstanceId,resourceId),LwM2mSingleResource.newObjectLinkResource(resourceId,value));}  }
class C{  @Override public void deleteTrait(String guid,String traitNameToBeDeleted) throws AtlasException {  guid=ParamChecker.notEmpty(guid,"entity id");  traitNameToBeDeleted=ParamChecker.notEmpty(traitNameToBeDeleted,"trait name");  if (!typeSystem.isRegistered(traitNameToBeDeleted)) {    final String msg=String.format("trait=%s should be defined in type system before it can be deleted",traitNameToBeDeleted);    LOG.error(msg);    throw new TypeNotFoundException(msg);  }  repository.deleteTrait(guid,traitNameToBeDeleted);  onTraitDeletedFromEntity(repository.getEntityDefinition(guid),traitNameToBeDeleted);}  }
class C{  public CustomDdlEntity createCustomDdlEntity(BusinessObjectFormatEntity businessObjectFormatEntity,String customDdlName,String ddl){  CustomDdlEntity customDdlEntity=new CustomDdlEntity();  customDdlEntity.setBusinessObjectFormat(businessObjectFormatEntity);  customDdlEntity.setCustomDdlName(customDdlName);  customDdlEntity.setDdl(ddl);  return customDdlDao.saveAndRefresh(customDdlEntity);}  }
class C{  private boolean startDBProcess(String ProcedureName){  log.fine(ProcedureName + "(" + m_pi.getAD_PInstance_ID()+ ")");  String sql="{call " + ProcedureName + "(?)}";  try {    CallableStatement cstmt=DB.prepareCall(sql,ResultSet.CONCUR_UPDATABLE,null);    cstmt.setInt(1,m_pi.getAD_PInstance_ID());    cstmt.executeUpdate();    cstmt.close();  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);    m_pi.setSummary(Msg.getMsg(m_wscctx,"ProcessRunError") + " " + e.getLocalizedMessage());    m_pi.setError(true);    return false;  }  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:51.446 -0500",hash_original_method="370BD6969A31137A90CC0B60704C81A4",hash_generated_method="B76F40EA234CA6A63A1A5C4741829C5E") public static String calledPartyBCDToString(byte[] bytes,int offset,int length){  boolean prependPlus=false;  StringBuilder ret=new StringBuilder(1 + length * 2);  if (length < 2) {    return "";  }  if ((bytes[offset] & 0xf0) == (TOA_International & 0xf0)) {    prependPlus=true;  }  internalCalledPartyBCDFragmentToString(ret,bytes,offset + 1,length - 1);  if (prependPlus && ret.length() == 0) {    return "";  }  if (prependPlus) {    String retString=ret.toString();    Pattern p=Pattern.compile("(^[#*])(.*)([#*])(.*)(#)$");    Matcher m=p.matcher(retString);    if (m.matches()) {      if ("".equals(m.group(2))) {        ret=new StringBuilder();        ret.append(m.group(1));        ret.append(m.group(3));        ret.append(m.group(4));        ret.append(m.group(5));        ret.append("+");      } else {        ret=new StringBuilder();        ret.append(m.group(1));        ret.append(m.group(2));        ret.append(m.group(3));        ret.append("+");        ret.append(m.group(4));        ret.append(m.group(5));      }    } else {      p=Pattern.compile("(^[#*])(.*)([#*])(.*)");      m=p.matcher(retString);      if (m.matches()) {        ret=new StringBuilder();        ret.append(m.group(1));        ret.append(m.group(2));        ret.append(m.group(3));        ret.append("+");        ret.append(m.group(4));      } else {        ret=new StringBuilder();        ret.append('+');        ret.append(retString);      }    }  }  return ret.toString();}  }
class C{  public boolean show(Bundle savedInstanceState){  return show(savedInstanceState,DEFAULT_WELCOME_SCREEN_REQUEST);}  }
class C{  @Override public String resourceMonitorBarBackground(){  return "rgb(76, 76, 76)";}  }
class C{  public static void install(final Window parent,final File directory){  try {    install(directory);    CMessageBox.showInformation(parent,"Installation successful");  } catch (  final FileNotFoundException e) {    CUtilityFunctions.logException(e);    handleException(parent,e);  }catch (  final IOException e) {    CUtilityFunctions.logException(e);    handleException(parent,e);  }}  }
class C{  public void testIsRelCanonicalPageWithBaseElement(){  System.out.println("isRelCanonicalPageWithBaseElement");  SSP ssp=new MockSSP();  ssp.setURI(URL);  StringBuilder strb=new StringBuilder();  strb.append("<html>");  strb.append("<head>");  strb.append("<base href=\"http://test.asqatasun.org/images\" />");  strb.append("<link rel=\"canonical\" href=\"/lol.html\" />");  strb.append("</head>");  strb.append("</html>");  ssp.setSource(strb.toString());  CrawlerImpl instance=new CrawlerImpl();  assertTrue(instance.isRelCanonicalPage(ssp));}  }
class C{  public static void stopListener(){  if (pfc != null && pfc.isAlive() && !pfc.isInterrupted()) {    Debug.info("Stopping Property File Change Listener Thread ...");    pfc.interrupt();  }}  }
class C{  public T caseCharacterClassEscapeSequence(CharacterClassEscapeSequence object){  return null;}  }
class C{  private void retainClosestStopsOnPatterns(TIntIntMap timesToReachedStops){  TIntIntMap bestStopOnPattern=new TIntIntHashMap(50,0.5f,-1,-1);  timesToReachedStops.forEachEntry(null);  timesToReachedStops.retainEntries(null);}  }
class C{  public void onDestroy(Activity activity){synchronized (activities) {    for (int i=activities.size() - 1; i >= 0; i--) {      if (activities.get(i).getActivity().equals(activity)) {        activities.remove(i).removed();        break;      }    }  }}  }
class C{  public Problem(String message,int messageNo){  this();  this.message=message;  this.messageNo=messageNo;}  }
class C{  public static <T>Set<T> toSet(T obj1,T obj2,T obj3,T obj4,T obj5,T obj6){  Set<T> theSet=new LinkedHashSet<T>();  theSet.add(obj1);  theSet.add(obj2);  theSet.add(obj3);  theSet.add(obj4);  theSet.add(obj5);  theSet.add(obj6);  return theSet;}  }
class C{  private void longClick(int keyCode){  longClick=true;  keyReleaseOrLongClick(keyCode,true);  moveCursor(Display.getInstance().getGameAction(keyCode));}  }
class C{  public String globalInfo(){  return "Class for a Naive Bayes classifier using estimator classes. This is the " + "updateable version of NaiveBayes.\n" + "This classifier will use a default precision of 0.1 for numeric attributes "+ "when buildClassifier is called with zero training instances.\n\n"+ "For more information on Naive Bayes classifiers, see\n\n"+ getTechnicalInformation().toString();}  }
class C{  public void test_SPARQL_UPDATE_Tx_Properly_Closed() throws Exception {  RWStore rwstore=null;  if (getIndexManager() instanceof AbstractJournal && ((AbstractJournal)getIndexManager()).getBufferStrategy() instanceof RWStrategy) {    rwstore=((RWStrategy)((AbstractJournal)getIndexManager()).getBufferStrategy()).getStore();  } else {    fail("RWStore is not in use");  }  final int activeTxBefore=rwstore.getActiveTxCount();  if (log.isInfoEnabled())   log.info("activeTxBefore=" + activeTxBefore);  final IPreparedSparqlUpdate preparedUpdate=m_repo.prepareUpdate("PREFIX dc: <http://purl.org/dc/elements/1.1/>\n" + "INSERT DATA\n" + "{\n"+ "  <http://example/book1> dc:title \"A new book\" ; \n"+ "                          dc:creator \"A.N.Other\" .\n"+ "}\n");  preparedUpdate.evaluate();  final int activeTxAfter=rwstore.getActiveTxCount();  if (log.isInfoEnabled())   log.info("activeTxAfter=" + activeTxAfter);  assertEquals(activeTxBefore,activeTxAfter);}  }
class C{  private void drawHandles(@NonNull Canvas canvas){  canvas.drawCircle(mCenterPointX - mRadius,mCenterPointY,mHandleRadius,mHandlePaint);  canvas.drawCircle(mCenterPointX,mCenterPointY + mRadius,mHandleRadius,mHandlePaint);  canvas.drawCircle(mCenterPointX,mCenterPointY - mRadius,mHandleRadius,mHandlePaint);  canvas.drawCircle(mCenterPointX + mRadius,mCenterPointY,mHandleRadius,mHandlePaint);}  }
class C{  public boolean isTimeSlot(){  Object oo=get_Value(COLUMNNAME_IsTimeSlot);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private boolean pushHandleGps2Device(){  InputStream io=AbstractDevice.class.getResourceAsStream("handlePopBox.jar");  File dest=new File(FileUtils.getTempDirectory(),"handlePopBox.jar");  try {    FileUtils.copyInputStreamToFile(io,dest);  } catch (  IOException e) {    e.printStackTrace();  }  CommandLine pushcommand=adbCommand("push ",dest.getAbsolutePath(),"/data/local/tmp/");  String outputPush=executeCommandQuietly(pushcommand);  log.debug("Push automator.jar to device {}",outputPush);  try {    Thread.sleep(1000);  } catch (  InterruptedException ie) {    throw new RuntimeException(ie);  }  return outputPush.contains("KB/s");}  }
class C{  @Override public boolean next() throws SQLException {  try {    debugCodeCall("next");    checkClosed();    return nextRow();  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public KMZFile(File file) throws IOException {  if (file == null) {    String message=Logging.getMessage("nullValue.FileIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.zipFile=new ZipFile(file);}  }
class C{  public static TypeCode toTypeCode(char c){  for (int j=0; j < basicTypes.length; j++) {    if (basicTypes[j].value == c) {      return (basicTypes[j]);    }  }  throw new IllegalArgumentException();}  }
class C{  public static boolean isUUId(Object obj){  String str=Caster.toString(obj,null);  if (str == null)   return false;  if (str.length() == 35) {    return Decision.isHex(str.substring(0,8)) && str.charAt(8) == '-' && Decision.isHex(str.substring(9,13)) && str.charAt(13) == '-' && Decision.isHex(str.substring(14,18)) && str.charAt(18) == '-' && Decision.isHex(str.substring(19));  } else   if (str.length() == 32)   return Decision.isHex(str);  return false;}  }
class C{  public int readAll(char[] buf,int offset,int length) throws IOException {  int readLength=0;  while (length > 0) {    int sublen=read(buf,offset,length);    if (sublen <= 0) {      return readLength > 0 ? readLength : -1;    }    offset+=sublen;    readLength+=sublen;    length-=sublen;  }  return readLength;}  }
class C{  public boolean refreshDatabase(AppContext ctx,String projectId){  try {    ProjectPK projectPK=new ProjectPK(ctx.getCustomerId(),projectId);    Project project=ProjectManager.INSTANCE.getProject(ctx,projectPK);    AccessRightsUtils.getInstance().checkRole(ctx,project,Role.WRITE);    try {      ProjectManager.INSTANCE.invalidate(project);    } catch (    InterruptedException e) {      logger.error("error while invalidating the DomainHierarchy for Project " + projectId,e);    }    DatabaseServiceImpl.INSTANCE.invalidate(project,true);    return true;  } catch (  ScopeException e) {    throw new ObjectNotFoundAPIException(e.getMessage(),e,false);  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (code_1: ");  result.append(code_1);  result.append(')');  return result.toString();}  }
class C{  public void testParseEnumLargestElement() throws Exception {  String largest="12345678901234567890123456789012345678901234567890";  String enumDefinition="ENUM('1','12','123','1234567890','" + largest + "','12345')";  String[] enumValues=EnumToStringFilter.parseEnumeration(enumDefinition);  int parsedLargestPos=EnumToStringFilter.largestElement(enumValues);  Assert.assertEquals("Largest element's position determined incorrectly",4,parsedLargestPos);  int parsedLargestLen=EnumToStringFilter.largestElementLen(enumDefinition);  Assert.assertEquals("Largest element's length incorrect (" + enumValues[parsedLargestPos] + ")",largest.length(),parsedLargestLen);}  }
class C{  private JDiffField loadFieldInfo(String className,XmlPullParser parser){  String fieldName=parser.getAttributeValue(null,ATTRIBUTE_NAME);  String fieldType=parser.getAttributeValue(null,ATTRIBUTE_TYPE);  int modifier=jdiffModifierToReflectionFormat(className,parser);  return new JDiffField(fieldName,fieldType,modifier);}  }
class C{  public NurseryZeroing(){  super(Options.set,"Nursery Zeroing","The default approach used for zero initializing nursery objects",new String[]{"temporal","nontemporal","concurrent","adaptive"},"temporal");}  }
class C{  public static void saveConfigurationProperties(Properties props,File file,boolean includeDefaults) throws IOException {  if (file.getParentFile().mkdirs() || file.getParentFile().canWrite()) {    IOUtil.writeProperties(props,file,includeDefaults);  }}  }
class C{  public NameSuffix(){  super(KEY);}  }
class C{  public FileLinesCollection(final CharSequence filename,final String encoding){  this(filename,encoding,false);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static <K,V>Map<K,V> createMap(List<K> keys,List<V> values){  if (keys == null || values == null || keys.size() != values.size()) {    throw new IllegalArgumentException("Keys and Values cannot be null and must be the same size");  }  Map<K,V> newMap=new HashMap<K,V>();  for (int i=0; i < keys.size(); i++) {    newMap.put(keys.get(i),values.get(i));  }  return newMap;}  }
class C{  @Override public void run(){  amIActive=true;  int numDecimalPlaces=0;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  numDecimalPlaces=Integer.parseInt(args[1]);  if (numDecimalPlaces < 0) {    numDecimalPlaces=0;  }  String outputHeader=args[2];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    int progress, oldProgress=-1;    double[] data;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          BigDecimal bd=new BigDecimal(z);          bd=bd.setScale(numDecimalPlaces,BigDecimal.ROUND_FLOOR);          outputFile.setValue(row,col,bd.doubleValue());        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void onChanged(){  if (builder != null) {    message=null;  }  if (isClean && parent != null) {    parent.markDirty();    isClean=false;  }}  }
class C{  public Uri addImageSharing(String sharingId,ContactId contact,Direction direction,MmContent content,ImageSharing.State state,ImageSharing.ReasonCode reasonCode,long timestamp){  if (logger.isActivated()) {    logger.debug("Add new image sharing for contact " + contact + ": sharing ="+ sharingId+ ", state="+ state);  }  ContentValues values=new ContentValues();  values.put(ImageSharingData.KEY_SHARING_ID,sharingId);  values.put(ImageSharingData.KEY_CONTACT,contact.toString());  values.put(ImageSharingData.KEY_DIRECTION,direction.toInt());  values.put(ImageSharingData.KEY_FILE,content.getUri().toString());  values.put(ImageSharingData.KEY_FILENAME,content.getName());  values.put(ImageSharingData.KEY_MIME_TYPE,content.getEncoding());  values.put(ImageSharingData.KEY_TRANSFERRED,0);  values.put(ImageSharingData.KEY_FILESIZE,content.getSize());  values.put(ImageSharingData.KEY_STATE,state.toInt());  values.put(ImageSharingData.KEY_REASON_CODE,reasonCode.toInt());  values.put(ImageSharingData.KEY_TIMESTAMP,timestamp);  return mLocalContentResolver.insert(ImageSharingData.CONTENT_URI,values);}  }
class C{  public Rational(long nominator,long denominator){  mNumerator=nominator;  mDenominator=denominator;}  }
class C{  public InfoDisplayEvent(Object source){  this(source,null);}  }
class C{  boolean takeIndexWrapped(){  if (isDetached())   return true;  if (itrs.cycles - prevCycles > 1) {    shutdown();    return true;  }  return false;}  }
class C{  protected BinaryBitwiseExpressionImpl(){  super();}  }
class C{  public void addConnectionOptions(MqttConnectOptions connectOptions){  conOpt=connectOptions;}  }
class C{  @Override public void flush() throws IOException {  out.flush();}  }
class C{  public boolean shouldEvaluateSubpop(EvolutionState state,int subpop,int threadnum){  return (state.breeder instanceof SimpleBreeder && ((SimpleBreeder)(state.breeder)).shouldBreedSubpop(state,subpop,threadnum));}  }
class C{  public byte[] unwrap(byte[] in,int inOff,int inLen) throws InvalidCipherTextException {  if (forWrapping) {    throw new IllegalStateException("Not set for unwrapping");  }  if (in == null) {    throw new InvalidCipherTextException("Null pointer as ciphertext");  }  final int blockSize=engine.getBlockSize();  if (inLen % blockSize != 0) {    throw new InvalidCipherTextException("Ciphertext not multiple of " + blockSize);  }  ParametersWithIV param2=new ParametersWithIV(this.param,IV2);  this.engine.init(false,param2);  byte TEMP3[]=new byte[inLen];  for (int currentBytePos=0; currentBytePos != inLen; currentBytePos+=blockSize) {    engine.processBlock(in,inOff + currentBytePos,TEMP3,currentBytePos);  }  byte[] TEMP2=reverse(TEMP3);  this.iv=new byte[8];  byte[] TEMP1=new byte[TEMP2.length - 8];  System.arraycopy(TEMP2,0,this.iv,0,8);  System.arraycopy(TEMP2,8,TEMP1,0,TEMP2.length - 8);  this.paramPlusIV=new ParametersWithIV(this.param,this.iv);  this.engine.init(false,this.paramPlusIV);  byte[] WKCKS=new byte[TEMP1.length];  for (int currentBytePos=0; currentBytePos != WKCKS.length; currentBytePos+=blockSize) {    engine.processBlock(TEMP1,currentBytePos,WKCKS,currentBytePos);  }  byte[] result=new byte[WKCKS.length - 8];  byte[] CKStoBeVerified=new byte[8];  System.arraycopy(WKCKS,0,result,0,WKCKS.length - 8);  System.arraycopy(WKCKS,WKCKS.length - 8,CKStoBeVerified,0,8);  if (!checkCMSKeyChecksum(result,CKStoBeVerified)) {    throw new InvalidCipherTextException("Checksum inside ciphertext is corrupted");  }  return result;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public StoragePolicyStatusEntity createStoragePolicyStatusEntity(String statusCode,String description){  StoragePolicyStatusEntity storagePolicyStatusEntity=new StoragePolicyStatusEntity();  storagePolicyStatusEntity.setCode(statusCode);  storagePolicyStatusEntity.setDescription(description);  return storagePolicyStatusDao.saveAndRefresh(storagePolicyStatusEntity);}  }
class C{  private boolean removeWaitingThread(SceKernelThreadInfo thread){  SceKernelSemaInfo sema=semaMap.get(thread.wait.Semaphore_id);  if (sema == null) {    return false;  }  sema.threadWaitingList.removeWaitingThread(thread);  return true;}  }
class C{  public PartitionResponse send(DistributedMember recipient,PartitionedRegion r) throws ForceReattemptException {  Set recipients=Collections.singleton(recipient);  RemoveAllResponse p=new RemoveAllResponse(r.getSystem(),recipients);  initMessage(r,recipients,false,p);  setTransactionDistributed(r.getCache().getTxManager().isDistributed());  if (logger.isDebugEnabled()) {    logger.debug("RemoveAllPRMessage.send: recipient is {}, msg is {}",recipient,this);  }  Set failures=r.getDistributionManager().putOutgoing(this);  if (failures != null && failures.size() > 0) {    throw new ForceReattemptException("Failed sending <" + this + ">");  }  return p;}  }
class C{  public List<ErrorLogger.ErrorObject> conformVirtualTracksInComposition(List<Composition.HeaderPartitionTuple> headerPartitionTuples,boolean conformAllVirtualTracksInCpl) throws IOException {  IMFErrorLogger imfErrorLogger=new IMFErrorLoggerImpl();  Set<UUID> resourceEssenceDescriptorIDsSet=getResourceEssenceDescriptorIdsSet();  Set<UUID> cplEssenceDescriptorIDsSet=getEssenceDescriptorIdsSet();  Iterator cplEssenceDescriptorIDs=cplEssenceDescriptorIDsSet.iterator();  if (conformAllVirtualTracksInCpl) {    while (cplEssenceDescriptorIDs.hasNext()) {      UUID cplEssenceDescriptorUUID=(UUID)cplEssenceDescriptorIDs.next();      if (!resourceEssenceDescriptorIDsSet.contains(cplEssenceDescriptorUUID)) {        imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_CPL_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,String.format("EssenceDescriptorID %s in the CPL " + "EssenceDescriptorList is not referenced by any resource in any of the Virtual tracks in the CPL, this is invalid.",cplEssenceDescriptorUUID.toString()));      }    }  }  if (imfErrorLogger.hasFatalErrors()) {    return imfErrorLogger.getErrors();  }  Map essenceDescriptorMap=null;  Map resourceEssenceDescriptorMap=null;  try {    essenceDescriptorMap=this.getEssenceDescriptorListMap();  } catch (  IMFException e) {    this.imfErrorLogger.addAllErrors(e.getErrors());  }  try {    resourceEssenceDescriptorMap=this.getResourcesEssenceDescriptorsMap(headerPartitionTuples);  } catch (  IMFException e) {    this.imfErrorLogger.addAllErrors(e.getErrors());  }  if (essenceDescriptorMap == null || resourceEssenceDescriptorMap == null || imfErrorLogger.hasFatalErrors()) {    return imfErrorLogger.getErrors();  }  imfErrorLogger.addAllErrors(conformEssenceDescriptors(resourceEssenceDescriptorMap,essenceDescriptorMap));  return imfErrorLogger.getErrors();}  }
class C{  public static void v(String tag,String s,Object... args){  if (LDJSLOG.VERBOSE >= LOGLEVEL)   Log.v(tag,String.format(s,args));}  }
class C{  public boolean isSerializable(){  return serializable;}  }
class C{  public StreamResourceBundle(InputStream stream) throws IOException {  props=new Properties();  props.load(stream);}  }
class C{  public static void showInformation(final Component parent,final String msg){  JOptionPane.showMessageDialog(isIconified(parent) ? null : parent,msg,System.getProperty(DEFAULT_WINDOW_TITLE_PROPERTY),JOptionPane.INFORMATION_MESSAGE);}  }
class C{  void deletePressed(ActionEvent e){  if (checkEditConditional()) {    return;  }  _showReminder=true;  Logix x=_curLogix;  _logixManager.deleteLogix(x);  _curLogix=null;  finishDone();}  }
class C{  public boolean hasDetails(String sku){  return mSkuMap.containsKey(sku);}  }
class C{  public int indexOf(int c,int start){  if (start < count) {    if (start < 0) {      start=0;    }    for (int i=offset + start; i < offset + count; i++) {      if (value[i] == c) {        return i - offset;      }    }  }  return -1;}  }
class C{  public static <S extends Styleable,V>DefaultPropertyBasedCssMetaData<S,V> createMetaData(String property,StyleConverter<?,V> converter,String propertyName,V defaultValue){  return new DefaultPropertyBasedCssMetaData<S,V>(property,converter,propertyName,defaultValue);}  }
class C{  public IconPartCollection(String name,String description){  setName(name);  setDescription(description);}  }
class C{  public static void testPrint(int a){  SelectionGenerator cg=new SelectionGenerator(a);  int[] selection;  System.out.println();  System.out.println("Printing selections for " + a + " items:");  System.out.println();  while ((selection=cg.next()) != null) {    if (selection.length == 0) {      System.out.println("zero-length array");    } else {      for (      int aSelection : selection) {        System.out.print(aSelection + "\t");      }      System.out.println();    }  }  System.out.println();}  }
class C{  public void resetForGlyph(){  zp0=TTVM.GLYPH_ZONE;  zp1=TTVM.GLYPH_ZONE;  zp2=TTVM.GLYPH_ZONE;  projectionVector=x_axis;  dualProjectionVector=x_axis;  freedomVector=x_axis;  roundState=g;  loop=1;  controlValueTableCutIn=68;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:56.851 -0500",hash_original_method="A4385799D730B1B0CC0428D2283AD11F",hash_generated_method="AFC908DA3E27C0F23D900546811A98A8") private static SubmitPdu privateGetSubmitPdu(String destAddrStr,boolean statusReportRequested,UserData userData){  CdmaSmsAddress destAddr=CdmaSmsAddress.parse(PhoneNumberUtils.cdmaCheckAndProcessPlusCode(destAddrStr));  if (destAddr == null)   return null;  BearerData bearerData=new BearerData();  bearerData.messageType=BearerData.MESSAGE_TYPE_SUBMIT;  bearerData.messageId=getNextMessageId();  bearerData.deliveryAckReq=statusReportRequested;  bearerData.userAckReq=false;  bearerData.readAckReq=false;  bearerData.reportReq=false;  bearerData.userData=userData;  byte[] encodedBearerData=BearerData.encode(bearerData);  if (Log.isLoggable(LOGGABLE_TAG,Log.VERBOSE)) {    Log.d(LOG_TAG,"MO (encoded) BearerData = " + bearerData);    Log.d(LOG_TAG,"MO raw BearerData = '" + HexDump.toHexString(encodedBearerData) + "'");  }  if (encodedBearerData == null)   return null;  int teleservice=bearerData.hasUserDataHeader ? SmsEnvelope.TELESERVICE_WEMT : SmsEnvelope.TELESERVICE_WMT;  SmsEnvelope envelope=new SmsEnvelope();  envelope.messageType=SmsEnvelope.MESSAGE_TYPE_POINT_TO_POINT;  envelope.teleService=teleservice;  envelope.destAddress=destAddr;  envelope.bearerReply=RETURN_ACK;  envelope.bearerData=encodedBearerData;  try {    ByteArrayOutputStream baos=new ByteArrayOutputStream(100);    DataOutputStream dos=new DataOutputStream(baos);    dos.writeInt(envelope.teleService);    dos.writeInt(0);    dos.writeInt(0);    dos.write(destAddr.digitMode);    dos.write(destAddr.numberMode);    dos.write(destAddr.ton);    dos.write(destAddr.numberPlan);    dos.write(destAddr.numberOfDigits);    dos.write(destAddr.origBytes,0,destAddr.origBytes.length);    dos.write(0);    dos.write(0);    dos.write(0);    dos.write(encodedBearerData.length);    dos.write(encodedBearerData,0,encodedBearerData.length);    dos.close();    SubmitPdu pdu=new SubmitPdu();    pdu.encodedMessage=baos.toByteArray();    pdu.encodedScAddress=null;    return pdu;  } catch (  IOException ex) {    Log.e(LOG_TAG,"creating SubmitPdu failed: " + ex);  }  return null;}  }
class C{  public void chain(NavigationChain chain){  chain(chain,null);}  }
class C{  private Response<BitmapDrawable> doFileParse(){  final String requestUrl=getUrl();  File bitmapFile=new File(requestUrl.substring(7,requestUrl.length()));  if (!bitmapFile.exists() || !bitmapFile.isFile()) {    return Response.error(new ParseError(new FileNotFoundException(String.format("File not found: %s",bitmapFile.getAbsolutePath()))));  }  BitmapFactory.Options decodeOptions=new BitmapFactory.Options();  decodeOptions.inInputShareable=true;  decodeOptions.inPurgeable=true;  decodeOptions.inPreferredConfig=mDecodeConfig;  Bitmap bitmap;  if (mMaxWidth == 0 && mMaxHeight == 0) {    bitmap=BitmapFactory.decodeFile(bitmapFile.getAbsolutePath(),decodeOptions);    addMarker("read-full-size-image-from-file");  } else {    decodeOptions.inJustDecodeBounds=true;    BitmapFactory.decodeFile(bitmapFile.getAbsolutePath(),decodeOptions);    int actualWidth=decodeOptions.outWidth;    int actualHeight=decodeOptions.outHeight;    int desiredWidth=getResizedDimension(mMaxWidth,mMaxHeight,actualWidth,actualHeight);    int desiredHeight=getResizedDimension(mMaxHeight,mMaxWidth,actualHeight,actualWidth);    decodeOptions.inJustDecodeBounds=false;    decodeOptions.inSampleSize=ImageUtils.findBestSampleSize(actualWidth,actualHeight,desiredWidth,desiredHeight);    Bitmap tempBitmap=BitmapFactory.decodeFile(bitmapFile.getAbsolutePath(),decodeOptions);    addMarker(String.format("read-from-file-scaled-times-%d",decodeOptions.inSampleSize));    if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) {      bitmap=Bitmap.createScaledBitmap(tempBitmap,desiredWidth,desiredHeight,true);      tempBitmap.recycle();      addMarker("scaling-read-from-file-bitmap");    } else {      bitmap=tempBitmap;    }  }  if (bitmap == null) {    return Response.error(new ParseError());  } else {    BitmapDrawable drawable;    if (Utils.hasHoneycomb()) {      drawable=new BitmapDrawable(mResources,bitmap);    } else {      drawable=new RecyclingBitmapDrawable(mResources,bitmap);    }    return Response.success(drawable,HttpHeaderParser.parseBitmapCacheHeaders(bitmap));  }}  }
class C{  private void clearAtpTab(){  m_modelAtp=new DefaultTableModel();  m_tableAtp.setRowCount(0);  m_tableAtp.setModel(m_modelAtp);}  }
class C{  public static String computeHashSHA1(final String text) throws NoSuchAlgorithmException {  MessageDigest md=MessageDigest.getInstance("SHA-1");  md.update(text.getBytes(),0,text.length());  byte hashData[]=md.digest();  StringBuilder sb=new StringBuilder(hashData.length * 2);  for (int i=0; i < hashData.length; i++) {    int b=(0xFF & hashData[i]);    if (b <= 0xF)     sb.append('0');    sb.append(Integer.toHexString(b));  }  return sb.toString().toUpperCase();}  }
class C{  static public String handle(String request){  StringBuilder response=new StringBuilder();  JSONTokener tokener=new JSONTokener(request);  try {    Object token=tokener.nextValue();    response.append("{");    if (token instanceof JSONArray) {      JSONArray array=(JSONArray)token;      for (int i=0; i < array.length(); i++) {        JSONObject object=(JSONObject)array.get(i);        response.append("\"" + object.getString("action") + "\":");        exec(object,response);        if (i != array.length() - 1)         response.append(",");      }    } else     if (token instanceof JSONObject) {      JSONObject object=(JSONObject)token;      response.append("\"" + object.getString("action") + "\":");      exec(object,response);    }    response.append("}");  } catch (  Exception e) {    Log.e(TAG,"Invalid request: " + request);    e.printStackTrace();    return "INVALID REQUEST";  }  Log.d(TAG,"Request: " + request);  Log.d(TAG,"Answer: " + response.toString());  return response.toString();}  }
class C{  public static LinkedHashSet<ClassNode> collectAllInterfacesReverseOrder(ClassNode cNode,LinkedHashSet<ClassNode> interfaces){  if (cNode.isInterface())   interfaces.add(cNode);  ClassNode[] directInterfaces=cNode.getInterfaces();  for (int i=directInterfaces.length - 1; i >= 0; i--) {    final ClassNode anInterface=directInterfaces[i];    interfaces.add(GenericsUtils.parameterizeType(cNode,anInterface));    collectAllInterfacesReverseOrder(anInterface,interfaces);  }  return interfaces;}  }
class C{  public String equationsToString(String prefix,NumberFormat nf){  if ((coeff == null) || (rhs == null) || (row == null)|| (col == null)) {    throw new NullPointerException();  }  int[] coeffDigits=maxIntegerDigits(coeff);  int rhsDigits=maxIntegerDigits(rhs);  StringBuilder buffer=new StringBuilder();  buffer.append(prefix).append('\n').append(prefix);  for (int i=0; i < coeff.length; i++) {    for (int j=0; j < coeff[row[0]].length; j++) {      format(nf,buffer,coeff[row[i]][col[j]],coeffDigits[col[j]]);      buffer.append(" * x_").append(col[j]);    }    buffer.append(" =");    format(nf,buffer,rhs[row[i]],rhsDigits);    if (i < coeff.length - 1) {      buffer.append('\n').append(prefix);    } else {      buffer.append('\n').append(prefix);    }  }  return buffer.toString();}  }
class C{  public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){  Rect rect=activity.getCropRect();  if (rect == null) {    return null;  }  return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height(),false);}  }
class C{  public static MBPartnerInfo[] find(Properties ctx,String Value,String Name,String Contact,String EMail,String Phone,String City){  StringBuffer sql=new StringBuffer("SELECT * FROM RV_BPartner WHERE IsActive='Y'");  StringBuffer sb=new StringBuffer();  Value=getFindParameter(Value);  if (Value != null)   sb.append("UPPER(Value) LIKE ?");  Name=getFindParameter(Name);  if (Name != null) {    if (sb.length() > 0)     sb.append(" OR ");    sb.append("UPPER(Name) LIKE ?");  }  Contact=getFindParameter(Contact);  if (Contact != null) {    if (sb.length() > 0)     sb.append(" OR ");    sb.append("UPPER(ContactName) LIKE ?");  }  EMail=getFindParameter(EMail);  if (EMail != null) {    if (sb.length() > 0)     sb.append(" OR ");    sb.append("UPPER(EMail) LIKE ?");  }  Phone=getFindParameter(Phone);  if (Phone != null) {    if (sb.length() > 0)     sb.append(" OR ");    sb.append("UPPER(Phone) LIKE ?");  }  City=getFindParameter(City);  if (City != null) {    if (sb.length() > 0)     sb.append(" OR ");    sb.append("UPPER(City) LIKE ?");  }  if (sb.length() > 0)   sql.append(" AND (").append(sb).append(")");  sql.append(" ORDER BY Value");  String finalSQL=MRole.getDefault().addAccessSQL(sql.toString(),"RV_BPartner",MRole.SQL_NOTQUALIFIED,MRole.SQL_RO);  ArrayList<MBPartnerInfo> list=new ArrayList<MBPartnerInfo>();  PreparedStatement pstmt=null;  try {    pstmt=DB.prepareStatement(finalSQL,null);    int index=1;    if (Value != null)     pstmt.setString(index++,Value);    if (Name != null)     pstmt.setString(index++,Name);    if (Contact != null)     pstmt.setString(index++,Contact);    if (EMail != null)     pstmt.setString(index++,EMail);    if (Phone != null)     pstmt.setString(index++,Phone);    if (City != null)     pstmt.setString(index++,City);    ResultSet rs=pstmt.executeQuery();    while (rs.next())     list.add(new MBPartnerInfo(ctx,rs,null));    rs.close();    pstmt.close();    pstmt=null;  } catch (  Exception e) {    s_log.log(Level.SEVERE,"find - " + finalSQL,e);  }  try {    if (pstmt != null)     pstmt.close();    pstmt=null;  } catch (  Exception e) {    pstmt=null;  }  MBPartnerInfo[] retValue=new MBPartnerInfo[list.size()];  list.toArray(retValue);  return retValue;}  }
class C{  public ProxyAuthorizationHeader createProxyAuthorizationHeader(String scheme) throws ParseException {  if (scheme == null)   throw new NullPointerException("bad scheme arg");  ProxyAuthorization p=new ProxyAuthorization();  p.setScheme(scheme);  return p;}  }
class C{  public boolean addNode(ServiceNode node){  try {    return nodes.add(node);  } catch (  Exception e) {    return false;  }}  }
class C{  public double[] toArray(){  double[] result=new double[size];  System.arraycopy(vector,0,result,0,size);  return result;}  }
class C{  public boolean equals(Object o2){  return o2 != null && (o2 instanceof ColorBackgroundPainterStrategy) && this.color.equals(((ColorBackgroundPainterStrategy)o2).getColor());}  }
class C{  public void addCompareKey(Object value){  compareKeys.add(value);}  }
class C{  public static <T1,T2,T3,T4,T5,T6,R>BiFunction<T5,T6,R> partial6(final T1 t1,final T2 t2,final T3 t3,final T4 t4,final HexFunction<T1,T2,T3,T4,T5,T6,R> hexFunc){  return null;}  }
class C{  public UCrop withMaxResultSize(@IntRange(from=100) int width,@IntRange(from=100) int height){  mCropIntent.putExtra(EXTRA_MAX_SIZE_SET,true);  mCropIntent.putExtra(EXTRA_MAX_SIZE_X,width);  mCropIntent.putExtra(EXTRA_MAX_SIZE_Y,height);  return this;}  }
class C{  public String ordinalize(int number){  String numberStr=Integer.toString(number);  if (11 <= number && number <= 13)   return numberStr + "th";  int remainder=number % 10;  if (remainder == 1)   return numberStr + "st";  if (remainder == 2)   return numberStr + "nd";  if (remainder == 3)   return numberStr + "rd";  return numberStr + "th";}  }
class C{  public ResourceFilter name(String value){  return setMatcher(value,Matcher.name);}  }
class C{  public Builder withDescription(String description){  role.setDescription(description);  return this;}  }
class C{  protected HeadFilter(){  super("HeadFilter");}  }
class C{  public void writeLog(String logdata){  if (historyComp != null) {    try {      historyComp.write(logdata);    } catch (    Exception e) {      setTitleText("Log write failed!");    }  }}  }
class C{  public static PeriodType months(){  PeriodType type=cMonths;  if (type == null) {    type=new PeriodType("Months",new DurationFieldType[]{DurationFieldType.months()},new int[]{-1,0,-1,-1,-1,-1,-1,-1});    cMonths=type;  }  return type;}  }
class C{  @SuppressWarnings("unchecked") public void gotoCRS(final CoordinateReferenceSystem crs){  if (crs != null) {    final List list=codesList.getList();    final Set<Identifier> identifiers=new HashSet<Identifier>(crs.getIdentifiers());    final Set<Integer> candidates=new HashSet<Integer>();    for (int i=0; i < list.getItemCount(); i++) {      for (      final Identifier identifier : identifiers) {        final String item=list.getItem(i);        if (sameEPSG(crs,identifier,item) || exactMatch(crs,identifier,item)) {          codesList.setSelection(new StructuredSelection(item),false);          list.setTopIndex(i);          return;        }        if (isMatch(crs,identifier,item)) {          candidates.add(i);        }      }    }    if (candidates.isEmpty()) {      final java.util.List<String> input=(java.util.List<String>)codesList.getInput();      final String sourceCRSName=crs.getName().toString();      sourceCRS=crs;      input.add(0,sourceCRSName);      codesList.setInput(input);      codesList.setSelection(new StructuredSelection(sourceCRSName),false);      list.setTopIndex(0);      try {        final String toWKT=crs.toWKT();        wktText.setText(toWKT);      } catch (      final RuntimeException e) {        ExceptionMonitor.show(wktText.getShell(),e,crs.toString() + " cannot be formatted as WKT");        wktText.setText("Unknown/Illegal WKT");      }    } else {      final Integer next=candidates.iterator().next();      codesList.setSelection(new StructuredSelection(list.getItem(next)),false);      list.setTopIndex(next);    }  }}  }
class C{  private static short CallStaticShortMethodV(JNIEnvironment env,int classJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: CallStaticShortMethodV  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object returnObj=JNIHelpers.invokeWithVarArg(methodID,argAddress,TypeReference.Short);    return Reflection.unwrapShort(returnObj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  public static ClassPath createClassPath(String classPathString){  ClassPath[] paths=classPaths(null,classPathString,null,null);  return paths[1];}  }
class C{  @Override public void clear(){  this._map.clear();}  }
class C{  private static long expansionNeeded(BoundingBox one,BoundingBox two){  long total=0;  int twoL=two.getLeft();  int oneL=one.getLeft();  if (twoL < oneL)   total+=(long)oneL - (long)twoL;  int twoR=two.getRight();  int oneR=one.getRight();  if (twoR > oneR)   total+=(long)twoR - (long)oneR;  int twoT=two.getTop();  int oneT=one.getTop();  if (twoT < oneT)   total+=(long)oneT - (long)twoT;  int twoB=two.getBottom();  int oneB=one.getBottom();  if (twoB > oneB)   total+=(long)twoB - (long)oneB;  return total;}  }
class C{  public static boolean isAttachable(MonitoredVm vm) throws MonitorException {  StringMonitor jvmCapabilities=(StringMonitor)vm.findByName("sun.rt.jvmCapabilities");  if (jvmCapabilities == null) {    return false;  } else {    return jvmCapabilities.stringValue().charAt(IS_ATTACHABLE) == '1';  }}  }
class C{  public void visitTypeArgument(){}  }
class C{  public static ImageException convertToApi(org.oscm.internal.types.exception.ImageException oldEx){  org.oscm.internal.types.exception.beans.ImageExceptionBean bean=(org.oscm.internal.types.exception.beans.ImageExceptionBean)getFaultInfo(oldEx);  ImageExceptionBean v13Bean=convertBeanToApi(bean,ImageExceptionBean.class);  if (bean != null) {    ImageException.Reason v13Reason=EnumConverter.convert(bean.getReason(),ImageException.Reason.class);    v13Bean.setReason(v13Reason);  }  return newApiException(ImageException.class,getExceptionMessage(oldEx),v13Bean,oldEx.getStackTrace());}  }
class C{  public T caseN4ClassifierDeclaration(N4ClassifierDeclaration object){  return null;}  }
class C{  public CActionOrthogonalLayout(final JFrame parent,final ZyGraph graph){  super("Orthogonal Layout");  m_parent=Preconditions.checkNotNull(parent,"IE02824: parent argument can not be null");  m_graph=Preconditions.checkNotNull(graph,"IE02825: graph argument can not be null");  putValue(Action.SMALL_ICON,new ImageIcon(CMain.class.getResource("data/layorth_up.jpg")));  putValue(Action.SHORT_DESCRIPTION,"Orthogonal Layout");}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (moduleSpecifierWithWildcard: ");  result.append(moduleSpecifierWithWildcard);  result.append(", sourcePath: ");  result.append(sourcePath);  result.append(')');  return result.toString();}  }
class C{  public TypeInstance lookupTypeInstance(final Integer typeInstanceId){  return instancesById.get(typeInstanceId);}  }
class C{  public static int[] nullToEmpty(final int[] array){  if (array == null || array.length == 0) {    return ArrayUtils.EMPTY_INT_ARRAY;  }  return array;}  }
class C{  protected Map<Cell,Long> detectWriteAlreadyCommittedInternal(TableReference tableRef,Map<Cell,Long> keysToLoad,@Output Set<CellConflict> spanningWrites,@Output Set<CellConflict> dominatingWrites,TransactionService transactionService){  Map<Cell,Long> rawResults=keyValueService.getLatestTimestamps(tableRef,keysToLoad);  Map<Long,Long> commitTimestamps=getCommitTimestamps(tableRef,rawResults.values(),false);  Map<Cell,Long> keysToDelete=Maps.newHashMapWithExpectedSize(0);  for (  Map.Entry<Cell,Long> e : rawResults.entrySet()) {    Cell key=e.getKey();    long theirStartTimestamp=e.getValue();    AssertUtils.assertAndLog(theirStartTimestamp != getStartTimestamp(),"Timestamp reuse is bad:%d",getStartTimestamp());    Long theirCommitTimestamp=commitTimestamps.get(theirStartTimestamp);    if (theirCommitTimestamp == null || theirCommitTimestamp == TransactionConstants.FAILED_COMMIT_TS) {      keysToDelete.put(key,theirStartTimestamp);      continue;    }    AssertUtils.assertAndLog(theirCommitTimestamp != getStartTimestamp(),"Timestamp reuse is bad:%d",getStartTimestamp());    if (theirStartTimestamp > getStartTimestamp()) {      dominatingWrites.add(Cells.createConflictWithMetadata(keyValueService,tableRef,key,theirStartTimestamp,theirCommitTimestamp));    } else     if (theirCommitTimestamp > getStartTimestamp()) {      spanningWrites.add(Cells.createConflictWithMetadata(keyValueService,tableRef,key,theirStartTimestamp,theirCommitTimestamp));    }  }  if (!keysToDelete.isEmpty()) {    if (!rollbackFailedTransactions(tableRef,keysToDelete,commitTimestamps,transactionService)) {      return keysToLoad;    }  }  return keysToDelete;}  }
class C{  public static void disjoin(final @AligningRecyclerView.AlignOrientation int orientation,final @NonNull AligningRecyclerView... toDisjoin){  for (  final AligningRecyclerView currentSrc : toDisjoin) {    for (    final AligningRecyclerView currentTarget : toDisjoin) {      if (!currentSrc.equals(currentTarget)) {        currentSrc.unbindFrom(currentTarget,orientation);      }    }  }}  }
class C{  public static String parseExpressionContent(String expression){  Matcher matcher=EXP_PATTERN.matcher(expression);  if (matcher.find()) {    expression=matcher.group(1);  }  return expression;}  }
class C{  private Mapping(final int[] indices,final int[] delays){  this.indices=indices;  this.delays=delays;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case StextPackage.EVENT_RAISING_EXPRESSION__EVENT:    return basicSetEvent(null,msgs);case StextPackage.EVENT_RAISING_EXPRESSION__VALUE:  return basicSetValue(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static void showInfoNotification(Project project,String text){  showNotification(project,MessageType.INFO,text);}  }
class C{  public static boolean toBoolean(Value v){  v=safeValue(v,Isolate.DEFAULT_ID);switch (v.getType()) {case VariableType.UNDEFINED:case VariableType.NULL:    return false;case VariableType.BOOLEAN:  return ((Boolean)v.getValueAsObject()).booleanValue();case VariableType.NUMBER:{  double d=((Double)v.getValueAsObject()).doubleValue();  if (d == 0 || Double.isNaN(d)) {    return false;  } else {    return true;  }}case VariableType.STRING:return ((String)v.getValueAsObject()).length() != 0;default :return true;}}  }
class C{  public static String toByteArray(byte[] buf,int ofs,int len){  StringBuffer sb=new StringBuffer();  for (int i=ofs; (i < len) && (i < buf.length); i++) {    sb.append('0');    sb.append('x');    sb.append(hexchars[(buf[i] & 0xF0) >> 4]);    sb.append(hexchars[buf[i] & 0x0F]);    if (((i + 1) < len) && ((i + 1) < buf.length)) {      sb.append(',');    }  }  return sb.toString();}  }
class C{  public boolean isGuiEventThread(){  return SwingUtilities.isEventDispatchThread();}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public void addDataLine(String[] values){  assert (headers != null && !headers.isEmpty() && headers.size() == values.length);  if (data == null) {    data=new ArrayList<>(totalLines);    timeToDataIndex=new HashMap<>();  }  Map<String,String> dataMap=new HashMap<>();  int numHeaders=headers.size();  int currentDataIndex=data.size();  for (int index=0; index < numHeaders; index++) {    String header=headers.get(index);    String value=values[index];    if (value.equals(ZERO)) {      value=ZERO;    } else     if (value.equals(NO_DATA)) {      value=NO_DATA;    }    dataMap.put(header,value);    if (header.equals(TIME_UTC)) {      timeToDataIndex.put(value,currentDataIndex);    }  }  data.add(dataMap);}  }
class C{  InstanceofExpression(AST ast){  super(ast);}  }
class C{  protected void updateObjectNames(){  if (m_ObjectNames == null) {    m_ObjectNames=getClassesFromProperties();  }  if (m_Object != null) {    String className=m_Object.getClass().getName();    String root=getRootFromClass(className,new HierarchyPropertyParser().getSeperator());    HierarchyPropertyParser hpp=m_ObjectNames.get(root);    if (hpp != null) {      if (!hpp.contains(className)) {        hpp.add(className);      }    }  }}  }
class C{  @Override protected void drawGuiContainerForegroundLayer(int mouseX,int mouseY){  this.fontRendererObj.drawString("\u00a77" + LangUtils.localize("gui.tracker.freq"),62,6,4210752);  this.fontRendererObj.drawString(LangUtils.localize("gui.tracker.freq") + ":",15,52,4210752);  this.textFieldFrequency.drawTextBox();}  }
class C{  public void doMouseReleased(MouseEvent event){  List<Positionable> selections=_editor.getSelectedItems(event);  if (selections == null) {    return;  }  for (int i=0; i < selections.size(); i++) {    if (selections.get(i) instanceof IndicatorTrack) {      IndicatorTrack t=(IndicatorTrack)selections.get(i);      jmri.jmrit.logix.OBlock block=t.getOccBlock();      if (block != null) {        block.setMarkerForeground(getForeground());        block.setMarkerBackground(_locoColor);        PositionablePopupUtil util=getPopupUtility();        block.setMarkerFont(util.getFont());        String name=getText();        if (name == null || name.length() == 0) {          name=getUnRotatedText();        }        if (TrackerTableAction.markNewTracker(block,name) != null) {          dock();        }      }      break;    }  }}  }
class C{  public JSONTokener(Reader reader){  this.reader=reader.markSupported() ? reader : new BufferedReader(reader);  this.eof=false;  this.usePrevious=false;  this.previous=0;  this.index=0;  this.character=1;  this.line=1;}  }
class C{  public boolean isOldNull(){  Object oo=get_Value(COLUMNNAME_IsOldNull);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static boolean sendPushMessage(String token,String body,String deviceKey,boolean production,String googleAuthKey,String iosCertificateURL,String iosCertificatePassword){  PushConnection cr=createPushMessage(token,body,production,googleAuthKey,iosCertificateURL,iosCertificatePassword,"","","","",1,deviceKey);  NetworkManager.getInstance().addToQueueAndWait(cr);  return cr.successful;}  }
class C{  public boolean isInRange(){  FloatVectorSpecies _species=(FloatVectorSpecies)species;  for (int i=0; i < genomeLength(); i++)   if (genome[i] < _species.minGene(i) || genome[i] > _species.maxGene(i))   return false;  return true;}  }
class C{  public OrderPositionSplitKey(String ordId,Integer posNo,Integer sNo){  super();  this.orderId=ordId;  this.positionNo=posNo;  this.splitNo=sNo;}  }
class C{  public void bindToProduct(Product product){  setProduct(product);}  }
class C{  public void restoreContext(){  for (  GridField f : m_mFields) {    if (f != null)     f.restoreValue();  }  for (  GridField f : m_mFields2) {    if (f != null)     f.restoreValue();  }}  }
class C{  public TagHandlerPool(int capacity){  this.handlers=new JspTag[capacity];  this.current=-1;}  }
class C{  public static void multiplyMV(double[] resultVec,int resultVecOffset,double[] lhsMat,int lhsMatOffset,double[] rhsVec,int rhsVecOffset){  String message=null;  if (resultVec == null) {    message="Result vector can not be null.";  } else   if (lhsMat == null) {    message="Left hand side matrix can not be null.";  } else   if (rhsVec == null) {    message="Right hand side vector can not be null.";  } else   if ((resultVecOffset + 4) > resultVec.length) {    message="Specified result offset would overflow the passed result vector.";  } else   if ((lhsMatOffset + 16) > lhsMat.length) {    message="Specified left hand side offset would overflow the passed lhs matrix.";  } else   if ((rhsVecOffset + 4) > rhsVec.length) {    message="Specified right hand side offset would overflow the passed rhs vector.";  }  if (message != null) {    throw new IllegalArgumentException(message);  }  double sum=0;  for (int i=0; i < 4; ++i) {    sum=0;    for (int k=0; k < 4; ++k) {      sum+=lhsMat[i + 4 * k + lhsMatOffset] * rhsVec[k + rhsVecOffset];    }    resultVec[i + resultVecOffset]=sum;  }}  }
class C{  public void addStartMarker(LatLong startPoint){  addMarkers(startPoint,null);}  }
class C{  public void applyTo(Context ctx,GradientDrawable drawable){  if (mColorInt != 0) {    drawable.setColor(mColorInt);  } else   if (mColorRes != -1) {    drawable.setColor(ContextCompat.getColor(ctx,mColorRes));  }}  }
class C{  public String toString(){  return toString(16);}  }
class C{  public SpreadsheetQuery(URL feedUrl){  super(feedUrl);}  }
class C{  public <T extends JCTree>void printExprs(List<T> trees) throws IOException {  printExprs(trees,", ");}  }
class C{  public AuthenticationProviderFacade(Class<? extends AuthenticationProvider> authProviderClass){  AuthenticationProvider instance=null;  try {    instance=authProviderClass.getConstructor().newInstance();  } catch (  NoSuchMethodException e) {    logger.error("The authentication extension in use is not properly defined. " + "Please contact the developers of the extension or, if you " + "are the developer, turn on debug-level logging.");    logger.debug("AuthenticationProvider is missing a default constructor.",e);  }catch (  SecurityException e) {    logger.error("The Java security mananager is preventing authentication extensions " + "from being loaded. Please check the configuration of Java or your " + "servlet container.");    logger.debug("Creation of AuthenticationProvider disallowed by security manager.",e);  }catch (  InstantiationException e) {    logger.error("The authentication extension in use is not properly defined. " + "Please contact the developers of the extension or, if you " + "are the developer, turn on debug-level logging.");    logger.debug("AuthenticationProvider cannot be instantiated.",e);  }catch (  IllegalAccessException e) {    logger.error("The authentication extension in use is not properly defined. " + "Please contact the developers of the extension or, if you " + "are the developer, turn on debug-level logging.");    logger.debug("Default constructor of AuthenticationProvider is not public.",e);  }catch (  IllegalArgumentException e) {    logger.error("The authentication extension in use is not properly defined. " + "Please contact the developers of the extension or, if you " + "are the developer, turn on debug-level logging.");    logger.debug("Default constructor of AuthenticationProvider cannot accept zero arguments.",e);  }catch (  InvocationTargetException e) {    Throwable cause=e.getCause();    if (cause == null)     cause=new GuacamoleException("Error encountered during initialization.");    logger.error("Authentication extension failed to start: {}",cause.getMessage());    logger.debug("AuthenticationProvider instantiation failed.",e);  }  authProvider=instance;}  }
class C{  public Object exec(List arguments) throws TemplateModelException {  if (arguments.size() != 1) {    throw new TemplateModelException("Expecting exactly one argument - an XPath expression");  }  return deriveModel(navigator.applyXPath(nodes,(String)arguments.get(0),namespaces));}  }
class C{  public LineAndShapeRenderer(){  this(true,true);}  }
class C{  protected void release(long ptr){  GridUnsafe.freeMemory(ptr);}  }
class C{  public SQLSyntaxErrorException(){}  }
class C{  private void auditOp(OperationTypeEnum opType,boolean operationalStatus,String operationStage,Object... descparams){  URI tenantId;  URI username;  if (!BlockServiceUtils.hasValidUserInContext(_securityContext) && InterNodeHMACAuthFilter.isInternalRequest(_request)) {    tenantId=_permissionsHelper.getRootTenant().getId();    username=ResourceService.INTERNAL_DATASVC_USER;  } else {    StorageOSUser user=BlockServiceUtils.getUserFromContext(_securityContext);    tenantId=URI.create(user.getTenantId());    username=URI.create(user.getName());  }  _auditLogManager.recordAuditLog(tenantId,username,BlockService.EVENT_SERVICE_TYPE,opType,System.currentTimeMillis(),operationalStatus ? AuditLogManager.AUDITLOG_SUCCESS : AuditLogManager.AUDITLOG_FAILURE,operationStage,descparams);}  }
class C{  public static Reflect on(String name,ClassLoader classLoader) throws ReflectException {  return on(forName(name,classLoader));}  }
class C{  public void moveTo(Location location){  GPSConfig config=parent.getConfig().getGpsConfig();  if (!config.isMapCalibrated()) {    Log.w("MapObject","Can't move object to location because map has not been calibrated.");    throw new IllegalStateException("Map is not calibrated. Please, add calibration info into map's configuration file.");  }  invalidateSelf();  if (config.isMapCalibrated()) {    MapCalibrationData calibration=config.getCalibration();    calibration.translate(location,pos);    recalculateBounds();    invalidateSelf();  }}  }
class C{  public static boolean isOutsideRange(int startFrame,int endFrame,int frameNumber){  if (startFrame == -1 || endFrame == -1) {    return true;  }  boolean outsideRange;  if (startFrame <= endFrame) {    outsideRange=frameNumber < startFrame || frameNumber > endFrame;  } else {    outsideRange=frameNumber < startFrame && frameNumber > endFrame;  }  return outsideRange;}  }
class C{  private void testSavedEvent(final long occurrenceTime,final long multiplier,final String uniqueId,GatheredEvent pEvent,EventType eventType){  Assert.assertNotNull("Object was stored, so its reference must be found",pEvent);  Assert.assertEquals("Stored information is wrong!","anyUser",pEvent.getActor());  Assert.assertEquals("Stored information is wrong!","USER_LOGIN_TO_SERVICE",pEvent.getEventId());  Assert.assertEquals("Stored information is wrong!",occurrenceTime,pEvent.getOccurrenceTime());  Assert.assertEquals("Stored information is wrong!",SUBSCRIPTION_KEY,pEvent.getSubscriptionTKey());  Assert.assertEquals("Stored information is wrong!",eventType,pEvent.getType());  Assert.assertEquals("Stored information is wrong!",PlatformEventIdentifier.USER_LOGIN_TO_SERVICE,pEvent.getEventId());  Assert.assertEquals("Stored information is wrong!",multiplier,pEvent.getMultiplier());  Assert.assertEquals("UniqueId is wrong.",uniqueId,pEvent.getUniqueId());}  }
class C{  public Quaternion(){  super();  matrix=new Matrixf4x4();  loadIdentityQuat();}  }
class C{  public AddMarketingPermissionException(String message){  super(message);}  }
class C{  @ObjectiveCName("sendVideoWithPeer:withName:withW:withH:withDuration:withThumb:withDescriptor:") public void sendVideo(Peer peer,String fileName,int w,int h,int duration,FastThumb fastThumb,String descriptor){  modules.getMessagesModule().sendVideo(peer,fileName,w,h,duration,fastThumb,descriptor);}  }
class C{  @TargetApi(Build.VERSION_CODES.JELLY_BEAN) @Override int calculateEndTopBound(float yAxisDelta){  return (int)(getView().getY() + yAxisDelta);}  }
class C{  public void reset(){  this.isEquals=true;}  }
class C{  public Bitmap decodeBestRegion(int requiredWidth,int requiredHeight,int gravity){  boolean upscaling=false;  int realWidth=getWidth();  int realHeight=getHeight();  BitmapFactory.Options options=new BitmapFactory.Options();  if (!(requiredWidth <= realWidth && requiredHeight <= realHeight)) {    float widthRatio=(float)requiredWidth / realWidth;    float heightRatio=(float)requiredHeight / realHeight;    float destinationRatio=Math.max(widthRatio,heightRatio);    requiredWidth=Math.round(((float)requiredWidth / destinationRatio));    requiredHeight=Math.round(((float)requiredHeight / destinationRatio));    upscaling=true;  }  boolean limitReached=false;  int basePow=0;  int actualScale;  while (!limitReached) {    actualScale=(int)Math.pow(2,basePow + 1);    if (requiredWidth <= realWidth / actualScale && requiredHeight <= realHeight / actualScale) {      basePow++;    } else {      limitReached=true;    }  }  options.inSampleSize=(int)Math.pow(2,basePow);  int fromTop=0;  int fromLeft=0;  if (gravity == Gravity.CENTER) {    fromTop=(realHeight - requiredHeight * options.inSampleSize) / 2;    fromLeft=(realWidth - requiredWidth * options.inSampleSize) / 2;  } else {    int horizontalGravity=gravity & Gravity.HORIZONTAL_GRAVITY_MASK;    int verticalGravity=gravity & Gravity.VERTICAL_GRAVITY_MASK;    if (horizontalGravity == Gravity.LEFT)     fromLeft=0; else     if (horizontalGravity == Gravity.RIGHT)     fromLeft=realWidth - requiredWidth * options.inSampleSize; else     if (horizontalGravity == Gravity.CENTER_HORIZONTAL)     fromLeft=(realWidth - requiredWidth * options.inSampleSize) / 2;    if (verticalGravity == Gravity.TOP)     fromTop=0; else     if (verticalGravity == Gravity.BOTTOM)     fromTop=realHeight - requiredHeight * options.inSampleSize; else     if (verticalGravity == Gravity.CENTER_VERTICAL)     fromTop=(realHeight - requiredHeight * options.inSampleSize) / 2;  }  Rect area=new Rect(fromLeft,fromTop,fromLeft + requiredWidth * options.inSampleSize,fromTop + requiredHeight * options.inSampleSize);  return impl.decodeRegion(area,options);}  }
class C{  public boolean isValid(){  if (!isValid) {    return false;  }  if (getMaxInactiveInterval() >= 0) {    long now=System.currentTimeMillis();    if (now - attributes.getLastAccessedTime() >= getMaxInactiveInterval() * 1000) {      return false;    }  }  return true;}  }
class C{  public ST(String template){  this(STGroup.defaultGroup,template);}  }
class C{  private List<StorageFile> discoverStorageFiles(StorageEntity storageEntity,String s3KeyPrefix){  Assert.isTrue(storageEntity.getStoragePlatform().getName().equals(StoragePlatformEntity.S3),String.format("Cannot discover storage files at \"%s\" storage platform.",storageEntity.getStoragePlatform().getName()));  S3FileTransferRequestParamsDto params=storageHelper.getS3BucketAccessParams(storageEntity);  params.setS3KeyPrefix(StringUtils.appendIfMissing(s3KeyPrefix,"/"));  List<S3ObjectSummary> s3ObjectSummaries=s3Service.listDirectory(params,true);  if (org.apache.commons.collections4.CollectionUtils.isEmpty(s3ObjectSummaries)) {    throw new ObjectNotFoundException(String.format("Found no files at \"s3://%s/%s\" location.",params.getS3BucketName(),params.getS3KeyPrefix()));  }  return storageFileHelper.createStorageFilesFromS3ObjectSummaries(s3ObjectSummaries);}  }
class C{  public static double incompleteBeta(double aa,double bb,double xx) throws ArithmeticException {  double a, b, t, x, xc, w, y;  boolean flag;  if (aa <= 0.0 || bb <= 0.0)   throw new ArithmeticException("ibeta: Domain error!");  if ((xx <= 0.0) || (xx >= 1.0)) {    if (xx == 0.0)     return 0.0;    if (xx == 1.0)     return 1.0;    throw new ArithmeticException("ibeta: Domain error!");  }  flag=false;  if ((bb * xx) <= 1.0 && xx <= 0.95) {    t=powerSeries(aa,bb,xx);    return t;  }  w=1.0 - xx;  if (xx > (aa / (aa + bb))) {    flag=true;    a=bb;    b=aa;    xc=xx;    x=w;  } else {    a=aa;    b=bb;    xc=w;    x=xx;  }  if (flag && (b * x) <= 1.0 && x <= 0.95) {    t=powerSeries(a,b,x);    if (t <= MACHEP)     t=1.0 - MACHEP; else     t=1.0 - t;    return t;  }  y=x * (a + b - 2.0) - (a - 1.0);  if (y < 0.0)   w=incompleteBetaFraction1(a,b,x); else   w=incompleteBetaFraction2(a,b,x) / xc;  y=a * Math.log(x);  t=b * Math.log(xc);  if ((a + b) < MAXGAM && Math.abs(y) < MAXLOG && Math.abs(t) < MAXLOG) {    t=Math.pow(xc,b);    t*=Math.pow(x,a);    t/=a;    t*=w;    t*=gamma(a + b) / (gamma(a) * gamma(b));    if (flag) {      if (t <= MACHEP)       t=1.0 - MACHEP; else       t=1.0 - t;    }    return t;  }  y+=t + logGamma(a + b) - logGamma(a) - logGamma(b);  y+=Math.log(w / a);  if (y < MINLOG)   t=0.0; else   t=Math.exp(y);  if (flag) {    if (t <= MACHEP)     t=1.0 - MACHEP; else     t=1.0 - t;  }  return t;}  }
class C{  void addSignalHead(){  String tName=nextSignalHead.getText().trim();  SignalHead mHead=null;  if (!tName.equals("")) {    mHead=InstanceManager.getDefault(jmri.SignalHeadManager.class).getSignalHead(tName);    nextSignalHead.setText(tName);  }  if (mHead == null) {    JOptionPane.showMessageDialog(thisPanel,java.text.MessageFormat.format(rb.getString("Error9"),new Object[]{tName}),Bundle.getMessage("ErrorTitle"),JOptionPane.ERROR_MESSAGE);    return;  }  SignalHeadIcon l=new SignalHeadIcon(this);  l.setSignalHead(tName);  l.setIcon(rbean.getString("SignalHeadStateRed"),signalIconEditor.getIcon(0));  l.setIcon(rbean.getString("SignalHeadStateFlashingRed"),signalIconEditor.getIcon(1));  l.setIcon(rbean.getString("SignalHeadStateYellow"),signalIconEditor.getIcon(2));  l.setIcon(rbean.getString("SignalHeadStateFlashingYellow"),signalIconEditor.getIcon(3));  l.setIcon(rbean.getString("SignalHeadStateGreen"),signalIconEditor.getIcon(4));  l.setIcon(rbean.getString("SignalHeadStateFlashingGreen"),signalIconEditor.getIcon(5));  l.setIcon(rbean.getString("SignalHeadStateDark"),signalIconEditor.getIcon(6));  l.setIcon(rbean.getString("SignalHeadStateHeld"),signalIconEditor.getIcon(7));  l.setIcon(rbean.getString("SignalHeadStateLunar"),signalIconEditor.getIcon(8));  l.setIcon(rbean.getString("SignalHeadStateFlashingLunar"),signalIconEditor.getIcon(9));  setNextLocation(l);  setDirty(true);  putSignal(l);}  }
class C{  protected boolean isExpanded(Component node){  Object e=node.getClientProperty(KEY_EXPANDED);  return e != null && e.equals("true");}  }
class C{  private void scanPIData(String target,XMLString data) throws IOException, JasperException {  if (target.length() == 3) {    char c0=Character.toLowerCase(target.charAt(0));    char c1=Character.toLowerCase(target.charAt(1));    char c2=Character.toLowerCase(target.charAt(2));    if (c0 == 'x' && c1 == 'm' && c2 == 'l') {      err.jspError("jsp.error.xml.reservedPITarget");    }  }  if (!skipSpaces()) {    if (skipString("?>")) {      data.clear();      return;    } else {      err.jspError("jsp.error.xml.spaceRequiredInPI");    }  }  fStringBuffer.clear();  if (scanData("?>",fStringBuffer)) {    do {      int c=peekChar();      if (c != -1) {        if (XMLChar.isHighSurrogate(c)) {          scanSurrogates(fStringBuffer);        } else         if (XMLChar.isInvalid(c)) {          err.jspError("jsp.error.xml.invalidCharInPI",Integer.toHexString(c));          scanChar();        }      }    } while (scanData("?>",fStringBuffer));  }  data.setValues(fStringBuffer);}  }
class C{  public AudioWife addOnPauseClickListener(View.OnClickListener listener){  mPauseListeners.add(listener);  return this;}  }
class C{  public void paintToolBarContentBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBorder(context,g,x,y,w,h,orientation);}  }
class C{  private final InternalDistributedMember waitForNewPrimary(){  DM dm=this.regionAdvisor.getDistributionManager();  DistributionConfig config=dm.getConfig();  long timeout=config.getMemberTimeout() * 3;  timeout+=Long.getLong(DistributionConfig.GEMFIRE_PREFIX + "BucketAdvisor.getPrimaryTimeout",15 * 1000);  InternalDistributedMember newPrimary=waitForPrimaryMember(timeout);  return newPrimary;}  }
class C{  public Boolean isTurnDiskLocatorLedSupported(){  return turnDiskLocatorLedSupported;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:04.566 -0500",hash_original_method="F442F079E2DD19439C88D9FB5E3A709B",hash_generated_method="F442F079E2DD19439C88D9FB5E3A709B") boolean isPrivateBrowsingEnabled(){  return mPrivateBrowsingEnabled;}  }
class C{  public boolean needRetry(){  return this.allMembersSkippedChecks;}  }
class C{  private String validateLogScope(String scope){  if (scope == null) {    return null;  }  String scopeLevel=LogScopeEnum.getName(scope);  if (scopeLevel == null) {    throw APIException.badRequests.parameterIsNotValid("log scope value:" + scope);  }  return scopeLevel;}  }
class C{  public static boolean equals(final Event personEvent,final EventLog deqSimEvent){  if (personEvent.getTime() != deqSimEvent.getTime()) {    CppEventFileParser.printNotEqualEvents(personEvent,deqSimEvent);    return false;  }  if (personEvent instanceof PersonDepartureEvent) {    if (Integer.parseInt(((PersonDepartureEvent)personEvent).getLinkId().toString()) != deqSimEvent.getLinkId()) {      CppEventFileParser.printNotEqualEvents(personEvent,deqSimEvent);      return false;    }    if (Integer.parseInt(((PersonDepartureEvent)personEvent).getPersonId().toString()) != deqSimEvent.getVehicleId()) {      CppEventFileParser.printNotEqualEvents(personEvent,deqSimEvent);      return false;    }    if (!deqSimEvent.getType().equalsIgnoreCase(JDEQSimConfigGroup.START_LEG)) {      CppEventFileParser.printNotEqualEvents(personEvent,deqSimEvent);      return false;    }  }  if (personEvent instanceof LinkEnterEvent) {    if (Integer.parseInt(((LinkEnterEvent)personEvent).getLinkId().toString()) != deqSimEvent.getLinkId()) {      CppEventFileParser.printNotEqualEvents(personEvent,deqSimEvent);      return false;    }    if (Integer.parseInt(((LinkEnterEvent)personEvent).getVehicleId().toString()) != deqSimEvent.getVehicleId()) {      CppEventFileParser.printNotEqualEvents(personEvent,deqSimEvent);      return false;    }    if (!deqSimEvent.getType().equalsIgnoreCase(JDEQSimConfigGroup.ENTER_LINK)) {      CppEventFileParser.printNotEqualEvents(personEvent,deqSimEvent);      return false;    }  }  if (personEvent instanceof LinkLeaveEvent) {    if (Integer.parseInt(((LinkLeaveEvent)personEvent).getLinkId().toString()) != deqSimEvent.getLinkId()) {      CppEventFileParser.printNotEqualEvents(personEvent,deqSimEvent);      return false;    }    if (Integer.parseInt(((LinkLeaveEvent)personEvent).getVehicleId().toString()) != deqSimEvent.getVehicleId()) {      CppEventFileParser.printNotEqualEvents(personEvent,deqSimEvent);      return false;    }    if (!deqSimEvent.getType().equalsIgnoreCase(JDEQSimConfigGroup.LEAVE_LINK)) {      CppEventFileParser.printNotEqualEvents(personEvent,deqSimEvent);      return false;    }  }  if (personEvent instanceof PersonArrivalEvent) {    if (Integer.parseInt(((PersonArrivalEvent)personEvent).getLinkId().toString()) != deqSimEvent.getLinkId()) {      CppEventFileParser.printNotEqualEvents(personEvent,deqSimEvent);      return false;    }    if (Integer.parseInt(((PersonArrivalEvent)personEvent).getPersonId().toString()) != deqSimEvent.getVehicleId()) {      CppEventFileParser.printNotEqualEvents(personEvent,deqSimEvent);      return false;    }    if (!deqSimEvent.getType().equalsIgnoreCase(JDEQSimConfigGroup.END_LEG)) {      CppEventFileParser.printNotEqualEvents(personEvent,deqSimEvent);      return false;    }  }  return true;}  }
class C{  public void addIntersectingLineSegment(ILineSegment ints){  intersectingSegments.append(ints);}  }
class C{  private static double round(double value,int decimalPlaces){  return Math.round(value * Math.pow(10,decimalPlaces)) / Math.pow(10,decimalPlaces);}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length != 1) {    System.out.println("Usage java Exercise_12_18 srcRootDirectory");    System.exit(1);  }  File rootDir=new File(args[0]);  if (!rootDir.isDirectory()) {    System.out.println("Directory " + args[0] + " does not exist");    System.exit(2);  }  ArrayList<File> chapters=getDirectories(rootDir);  while (!chapters.isEmpty()) {    ArrayList<File> files=getFiles(chapters);    insertStatement(files,chapters.get(0));    chapters.remove(0);  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z, min, max;  float progress=0;  int a;  int filterSizeX=3;  int filterSizeY=3;  double n;  double sum;  int dX[];  int dY[];  int midPointX;  int midPointY;  int numPixelsInFilter;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      filterSizeX=Integer.parseInt(args[i]);    } else     if (i == 3) {      filterSizeY=Integer.parseInt(args[i]);    } else     if (i == 4) {      filterRounded=Boolean.parseBoolean(args[i]);    } else     if (i == 5) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          n=0;          sum=0;          min=z;          max=z;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z != noData) {              n+=1 * filterShape[a];              sum+=z * filterShape[a];              if (z < min) {                min=z;              }              if (z > max) {                max=z;              }            }          }          if ((n - 2) > 0) {            outputFile.setValue(row,col,(sum - min - max) / (n - 2));          } else {            outputFile.setValue(row,col,noData);          }        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public JSONArray put(int index,Object value) throws JSONException {  JSONObject.testValidity(value);  if (index < 0) {    throw new JSONException("JSONArray[" + index + "] not found.");  }  if (index < this.length()) {    this.myArrayList.set(index,value);  } else {    while (index != this.length()) {      this.put(JSONObject.NULL);    }    this.put(value);  }  return this;}  }
class C{  public boolean matches(){  if (mSoftMode) {    long difference=mBits ^ mSync;    return difference == 0 || Long.bitCount(difference) <= mSoftModeErrorThreshold;  } else {    return (mBits == mSync);  }}  }
class C{  public void disablePrecalc(){  this.useMatchLookupService=false;}  }
class C{  public BannerMetaBuilder start(final BannerMeta meta){  return new BannerMetaBuilder(meta);}  }
class C{  public boolean equals(Object a){  if (!(a instanceof SnmpEngineId))   return false;  return hexString.equals(((SnmpEngineId)a).toString());}  }
class C{  public List<String> command(){  return command;}  }
class C{  public CacheHeader(String key,Entry entry){  this.key=key;  this.size=entry.data.length;  this.etag=entry.etag;  this.serverDate=entry.serverDate;  this.lastModified=entry.lastModified;  this.ttl=entry.ttl;  this.softTtl=entry.softTtl;  this.responseHeaders=entry.responseHeaders;}  }
class C{  public static Player createPlayer(final String name){  generatePlayerRPClasses();  final RPObject object=new RPObject();  object.put("name",name);  final Player pl=(Player)new PlayerTransformer().transform(object);  final Iterator<RPEvent> eventsIterator=pl.eventsIterator();  while (eventsIterator.hasNext()) {    eventsIterator.next();    eventsIterator.remove();  }  pl.setName(name);  return pl;}  }
class C{  private static boolean isNonLeft(int i0,int i1,int i2,int i3,double[] pts){  double l1, l2, l4, l5, l6, angle1, angle2, angle;  l1=Math.sqrt(Math.pow(pts[i2 + 1] - pts[i1 + 1],2) + Math.pow(pts[i2] - pts[i1],2));  l2=Math.sqrt(Math.pow(pts[i3 + 1] - pts[i2 + 1],2) + Math.pow(pts[i3] - pts[i2],2));  l4=Math.sqrt(Math.pow(pts[i3 + 1] - pts[i0 + 1],2) + Math.pow(pts[i3] - pts[i0],2));  l5=Math.sqrt(Math.pow(pts[i1 + 1] - pts[i0 + 1],2) + Math.pow(pts[i1] - pts[i0],2));  l6=Math.sqrt(Math.pow(pts[i2 + 1] - pts[i0 + 1],2) + Math.pow(pts[i2] - pts[i0],2));  angle1=Math.acos(((l2 * l2) + (l6 * l6) - (l4 * l4)) / (2 * l2 * l6));  angle2=Math.acos(((l6 * l6) + (l1 * l1) - (l5 * l5)) / (2 * l6 * l1));  angle=(Math.PI - angle1) - angle2;  if (angle <= 0.0) {    return (true);  } else {    return (false);  }}  }
class C{  public RecurrenceId(ICalDate originalStartDate){  super(originalStartDate);}  }
class C{  @Override public void drawSeries(Canvas canvas,Paint paint,List<Float> points,List<Double> values,XYSeriesRenderer seriesRenderer,SupportSeriesRender supportSeriesRender,float yAxisValue,int seriesIndex,int startIndex){  mCharts[seriesIndex].setScreenR(getScreenR());  mCharts[seriesIndex].setCalcRange(getCalcRange(mDataset.getSeriesAt(seriesIndex).getScaleNumber()),0);  mCharts[seriesIndex].drawSeries(canvas,paint,points,values,seriesRenderer,supportSeriesRender,yAxisValue,0,startIndex);}  }
class C{  @Override public void onFailure(TaskCallback callback,Throwable t){  try {    state.doneProcess();    abort(t);    TaskCallbackImpl callbackImpl=(TaskCallbackImpl)callback;    callbackManager.updateCallback(callbackImpl,false);    log.error("Got callback failure for task {}",callbackImpl.taskName);  } catch (  Throwable e) {    log.error(e.getMessage(),e);  } finally {    resume();  }}  }
class C{  public void phrasingTags(TagInfo tagInfo){  tagInfo=new TagInfo("em",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.inline);  this.put("em",tagInfo);  tagInfo=new TagInfo(STRONG,ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.inline);  this.put(STRONG,tagInfo);  tagInfo=new TagInfo("small",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.inline);  tagInfo.defineCloseInsideCopyAfterTags("b,u,i,sub,sup,blink,s");  this.put("small",tagInfo);  tagInfo=new TagInfo("s",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.inline);  tagInfo.defineCloseInsideCopyAfterTags("b,u,i,sub,sup,small,blink");  this.put("s",tagInfo);  tagInfo=new TagInfo("a",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.inline);  tagInfo.defineCloseBeforeTags("a");  this.put("a",tagInfo);  tagInfo=new TagInfo("wbr",ContentType.none,BelongsTo.BODY,false,false,false,CloseTag.forbidden,Display.none);  this.put("wbr",tagInfo);  tagInfo=new TagInfo("mark",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.inline);  tagInfo.defineAllowedChildrenTags(PHRASING_TAGS);  this.put("mark",tagInfo);  tagInfo=new TagInfo("bdi",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.inline);  tagInfo.defineAllowedChildrenTags(PHRASING_TAGS);  this.put("bdi",tagInfo);  tagInfo=new TagInfo("time",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.inline);  tagInfo.defineAllowedChildrenTags(PHRASING_TAGS);  this.put("time",tagInfo);  tagInfo=new TagInfo("data",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.inline);  tagInfo.defineCloseBeforeTags(CLOSE_BEFORE_TAGS);  this.put("data",tagInfo);  tagInfo=new TagInfo("cite",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.inline);  this.put("cite",tagInfo);  tagInfo=new TagInfo("q",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.inline);  this.put("q",tagInfo);  tagInfo=new TagInfo("code",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.inline);  this.put("code",tagInfo);  tagInfo=new TagInfo("span",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.inline);  this.put("span",tagInfo);  tagInfo=new TagInfo("bdo",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.inline);  this.put("bdo",tagInfo);  tagInfo=new TagInfo("dfn",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.inline);  this.put("dfn",tagInfo);  tagInfo=new TagInfo("kbd",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.inline);  this.put("kbd",tagInfo);  tagInfo=new TagInfo("abbr",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.inline);  this.put("abbr",tagInfo);  tagInfo=new TagInfo("var",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.inline);  this.put("var",tagInfo);  tagInfo=new TagInfo("samp",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.inline);  this.put("samp",tagInfo);  tagInfo=new TagInfo("br",ContentType.none,BelongsTo.BODY,false,false,false,CloseTag.forbidden,Display.none);  this.put("br",tagInfo);  tagInfo=new TagInfo("sub",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.inline);  tagInfo.defineCloseInsideCopyAfterTags("b,u,i,sup,small,blink,s");  this.put("sub",tagInfo);  tagInfo=new TagInfo("sup",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.inline);  tagInfo.defineCloseInsideCopyAfterTags("b,u,i,sub,small,blink,s");  this.put("sup",tagInfo);  tagInfo=new TagInfo("b",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.inline);  tagInfo.defineCloseInsideCopyAfterTags("u,i,sub,sup,small,blink,s");  this.put("b",tagInfo);  tagInfo=new TagInfo("i",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.inline);  tagInfo.defineCloseInsideCopyAfterTags("b,u,sub,sup,small,blink,s");  this.put("i",tagInfo);  tagInfo=new TagInfo("u",ContentType.all,BelongsTo.BODY,true,false,false,CloseTag.required,Display.inline);  tagInfo.defineCloseInsideCopyAfterTags("b,i,sub,sup,small,blink,s");  this.put("u",tagInfo);  tagInfo=new TagInfo("ruby",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.inline);  tagInfo.defineAllowedChildrenTags("rt,rp,rb,rtc");  this.put("ruby",tagInfo);  tagInfo=new TagInfo("rtc",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.optional,Display.inline);  tagInfo.defineRequiredEnclosingTags("ruby");  tagInfo.defineAllowedChildrenTags("rt," + PHRASING_TAGS);  this.put("rtc",tagInfo);  tagInfo=new TagInfo("rb",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.optional,Display.inline);  tagInfo.defineRequiredEnclosingTags("ruby");  this.put("rb",tagInfo);  tagInfo=new TagInfo("rt",ContentType.text,BelongsTo.BODY,false,false,false,CloseTag.optional,Display.inline);  tagInfo.defineRequiredEnclosingTags("ruby");  tagInfo.defineAllowedChildrenTags(PHRASING_TAGS);  this.put("rt",tagInfo);  tagInfo=new TagInfo("rp",ContentType.text,BelongsTo.BODY,false,false,false,CloseTag.optional,Display.inline);  tagInfo.defineRequiredEnclosingTags("ruby");  tagInfo.defineAllowedChildrenTags(PHRASING_TAGS);  this.put("rp",tagInfo);}  }
class C{  public String toString(ObjectMatrix2D matrix){  return super.toString(matrix);}  }
class C{  public ServerProxyFaultyAttachment(){  requestFileName="getstate.query";  responseFile="attachm-error.query";  responseContentType="multipart/mixed; " + "charset=UTF-8; boundary=jetty771207119h3h10dty";}  }
class C{  @Override public void onChangedAdded(final RPObject object,final RPObject changes){  super.onChangedAdded(object,changes);  if (changes.has("ripeness")) {    ripeness=changes.getInt("ripeness");    fireChange(PROP_RIPENESS);  }  if (object.has("max_ripeness")) {    maxRipeness=object.getInt("max_ripeness");  }}  }
class C{  ByteVector put11(final int b1,final int b2){  int length=this.length;  if (length + 2 > data.length) {    enlarge(2);  }  byte[] data=this.data;  data[length++]=(byte)b1;  data[length++]=(byte)b2;  this.length=length;  return this;}  }
class C{  public KdTree(int[] dimensions,double[][][] data){  this.originalDataSets=data;  int numObservations=data[0].length;  totalDimensions=0;  for (int i=0; i < dimensions.length; i++) {    totalDimensions+=dimensions[i];  }  dimensionToArray=new double[totalDimensions][][];  dimensionToArrayIndex=new int[totalDimensions];  dimensionToVariableNumber=new int[totalDimensions];  int cumulativeDimension=0;  int cumulativeDimsionsForPreviousArray=0;  for (int i=0; i < dimensions.length; i++) {    int dimensionsForThisVariable=dimensions[i];    for (int j=0; j < dimensionsForThisVariable; j++) {      dimensionToArray[cumulativeDimension]=data[i];      dimensionToVariableNumber[cumulativeDimension]=i;      dimensionToArrayIndex[cumulativeDimension]=cumulativeDimension - cumulativeDimsionsForPreviousArray;      cumulativeDimension++;    }    cumulativeDimsionsForPreviousArray=cumulativeDimension;  }  double[][] thisDimensionsData=new double[numObservations][2];  masterSortedArrayIndices=new int[totalDimensions + 1][numObservations];  for (int i=0; i < totalDimensions; i++) {    double[][] fullData=dimensionToArray[i];    MatrixUtils.arrayCopy(fullData,0,dimensionToArrayIndex[i],thisDimensionsData,0,0,numObservations,1);    for (int t=0; t < numObservations; t++) {      thisDimensionsData[t][1]=t;    }    java.util.Arrays.sort(thisDimensionsData,FirstIndexComparatorDouble.getInstance());    for (int t=0; t < numObservations; t++) {      masterSortedArrayIndices[i][t]=(int)thisDimensionsData[t][1];    }  }  rootNode=constructKdTree(0,0,numObservations,masterSortedArrayIndices);  masterSortedArrayIndices=null;}  }
class C{  public void save(){  if (headers.isEmpty() && mainHeader.isEmpty()) {    try {      super.save(file);    } catch (    IOException e) {      Bukkit.getLogger().log(Level.WARNING,"Failed to save file",e);    }    return;  }  final int indentLength=options().indent();  final String pathSeparator=Character.toString(options().pathSeparator());  String content=saveToString();  StringBuilder fileData=new StringBuilder(buildHeader());  int currentIndents=0;  String key="";  for (  String h : mainHeader) {    fileData.append("#> ").append(h).append('\n');  }  for (  String line : content.split("\n")) {    if (line.isEmpty())     continue;    int indent=getSuccessiveCharCount(line,' ');    int indents=indent / indentLength;    String indentText=indent > 0 ? line.substring(0,indent) : "";    if (indents <= currentIndents) {      String[] array=key.split(Pattern.quote(pathSeparator));      int backspace=currentIndents - indents + 1;      key=join(array,options().pathSeparator(),0,array.length - backspace);    }    String separator=key.length() > 0 ? pathSeparator : "";    String lineKey=line.contains(":") ? line.split(Pattern.quote(":"))[0] : line;    key+=separator + lineKey.substring(indent);    currentIndents=indents;    List<String> header=headers.get(key);    String headerText=header != null ? addHeaderTags(header,indentText) : "";    fileData.append(headerText).append(line).append('\n');  }  FileWriter writer=null;  try {    writer=new FileWriter(file);    writer.write(fileData.toString());    writer.flush();  } catch (  IOException e) {    Bukkit.getLogger().log(Level.WARNING,"Failed to save file",e);  } finally {    if (writer != null) {      try {        writer.close();      } catch (      IOException ignored) {      }    }  }}  }
class C{  public SearchRequestBuilder addHighlightedField(String name,int fragmentSize,int numberOfFragments){  highlightBuilder().field(name,fragmentSize,numberOfFragments);  return this;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void deleteAnnotation(final WorkflowAnnotation toDelete){  if (toDelete == null) {    throw new IllegalArgumentException("toDelete must not be null!");  }  if (toDelete instanceof OperatorAnnotation) {    OperatorAnnotation anno=(OperatorAnnotation)toDelete;    model.removeOperatorAnnotation(anno);  } else   if (toDelete instanceof ProcessAnnotation) {    ProcessAnnotation anno=(ProcessAnnotation)toDelete;    model.removeProcessAnnotation(anno);  }  setSelected(null);  fireProcessUpdate(toDelete);  model.fireAnnotationMiscChanged(null);}  }
class C{  public boolean terminate(){  if (super.terminate()) {    if (m_server != null && m_server.isAlive()) {      try {        m_server.interrupt();      } catch (      Exception e) {      }    }    log.info("terminate - done");    return true;  }  return false;}  }
class C{  public void uninstallDefaults(){  SeaGlassContext context=getContext(this,ENABLED);  style.uninstallDefaults(context);  context.dispose();  style=null;  JInternalFrame.JDesktopIcon di=frame.getDesktopIcon();  if (di != null && di.getComponentPopupMenu() == systemPopupMenu) {    di.setComponentPopupMenu(null);  }}  }
class C{  public void verifyFileDownloadSucceeded() throws Exception {  String filename=DOWNLOAD_5MB_FILENAME;  long filesize=DOWNLOAD_5MB_FILESIZE;  long dlRequest=-1;  boolean rebootMarkerValid=false;  DataInputStream dataInputFile=null;  setWiFiStateOn(true);  setAirplaneModeOn(false);  try {    FileInputStream inFile=mContext.openFileInput(DOWNLOAD_STARTED_FLAG);    dataInputFile=new DataInputStream(inFile);    dlRequest=dataInputFile.readLong();  } catch (  Exception e) {    Log.i(LOG_TAG,"Unable to determine initial download id.");    throw e;  } finally {    if (dataInputFile != null) {      dataInputFile.close();    }    mContext.deleteFile(DOWNLOAD_STARTED_FLAG);  }  assertTrue(dlRequest != -1);  Cursor cursor=getCursor(dlRequest);  ParcelFileDescriptor pfd=null;  try {    assertTrue("Unable to query last initiated download!",cursor.moveToFirst());    int columnIndex=cursor.getColumnIndex(DownloadManager.COLUMN_STATUS);    int status=cursor.getInt(columnIndex);    int currentWaitTime=0;    waitForDownloadOrTimeout_skipNotification(dlRequest);    Log.i(LOG_TAG,"Verifying download information...");    pfd=mDownloadManager.openDownloadedFile(dlRequest);    verifyFileSize(pfd,filesize);  } catch (  Exception e) {    Log.i(LOG_TAG,"error: " + e.toString());    throw e;  } finally {    cursor.close();    mDownloadManager.remove(dlRequest);    if (pfd != null) {      pfd.close();    }  }}  }
class C{  public void reset(){  mActiveCalls.clear();  mTalkgroupsFirstHeard.clear();  mTalkgroups.clear();  mLCNTracker.reset();  resetState();}  }
class C{  private void run(){  try {    Thread current=Thread.currentThread();    char[] buf=new char[1024];    for (int len=in.read(buf); len != -1; len=in.read(buf)) {      append(buf,0,len);      if (current != thread) {        break;      }    }  } catch (  IOException e) {    logger.error(e.getMessage(),e);  }  trace("Finished");}  }
class C{  public int[] toArray(int[] array){  if (array == null || array.length < this.size)   array=new int[this.size];  int offset=0;  for (int i=0; i < this.numBuckets; i++) {    Bucket bucket=this.buckets[i];    if (bucket != null) {      System.arraycopy(bucket.values,0,array,offset,bucket.length);      offset+=bucket.length;    }  }  return array;}  }
class C{  public int size(){  return (impl.size());}  }
class C{  protected String makeSuffix(String path,String contentType){  String suffix=contentType != null ? WWIO.makeSuffixForMimeType(contentType) : null;  String existingSuffix=WWIO.getSuffix(path);  if (existingSuffix != null && existingSuffix.equalsIgnoreCase("jpeg"))   existingSuffix="jpg";  if (suffix != null && (existingSuffix == null || !existingSuffix.equalsIgnoreCase(suffix.substring(1))))   return suffix; else   return null;}  }
class C{  public KeyboardExpandCollapseAction(final boolean expand,final boolean recursive){  this.expand=expand;  this.recursive=recursive;}  }
class C{  protected Object readResolve() throws ObjectStreamException {  try {    return IgnitionEx.localIgnite().context();  } catch (  IllegalStateException e) {    throw U.withCause(new InvalidObjectException(e.getMessage()),e);  } finally {    stash.remove();  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public BurlapRuntimeException(String message){  super(message);}  }
class C{  private Response<Bitmap> doParse(NetworkResponse response){  byte[] data=response.data;  BitmapFactory.Options decodeOptions=new BitmapFactory.Options();  Bitmap bitmap=null;  if (mMaxWidth == 0 && mMaxHeight == 0) {    decodeOptions.inPreferredConfig=mDecodeConfig;    bitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);  } else {    decodeOptions.inJustDecodeBounds=true;    BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    int actualWidth=decodeOptions.outWidth;    int actualHeight=decodeOptions.outHeight;    int desiredWidth=getResizedDimension(mMaxWidth,mMaxHeight,actualWidth,actualHeight);    int desiredHeight=getResizedDimension(mMaxHeight,mMaxWidth,actualHeight,actualWidth);    decodeOptions.inJustDecodeBounds=false;    decodeOptions.inSampleSize=findBestSampleSize(actualWidth,actualHeight,desiredWidth,desiredHeight);    Bitmap tempBitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) {      bitmap=Bitmap.createScaledBitmap(tempBitmap,desiredWidth,desiredHeight,true);      tempBitmap.recycle();    } else {      bitmap=tempBitmap;    }  }  if (bitmap == null) {    return Response.error(new ParseError(response));  } else {    return Response.success(bitmap,HttpHeaderParser.parseCacheHeaders(response));  }}  }
class C{  public static Set<URI> fetchRPTargetVirtualPools(DbClient dbClient){  Set<URI> rpProtectedTargetVPools=new HashSet<URI>();  try {    List<URI> vpoolProtectionSettingsURIs=dbClient.queryByType(VpoolProtectionVarraySettings.class,true);    Iterator<VpoolProtectionVarraySettings> vPoolProtectionSettingsItr=dbClient.queryIterativeObjects(VpoolProtectionVarraySettings.class,vpoolProtectionSettingsURIs,true);    while (vPoolProtectionSettingsItr.hasNext()) {      VpoolProtectionVarraySettings rSetting=vPoolProtectionSettingsItr.next();      if (null != rSetting && !NullColumnValueGetter.isNullURI(rSetting.getVirtualPool())) {        rpProtectedTargetVPools.add(rSetting.getVirtualPool());      }    }  } catch (  Exception ex) {    _log.error("Exception occurred while fetching RP enabled virtualpools",ex);  }  return rpProtectedTargetVPools;}  }
class C{  @Override public void rangeChanged(ColorMap cMap){  palette.build(cMap);  palette.repaint();  palette.invalidate();  revalidate();}  }
class C{  public void deregisterAnimated(Animation cmp){  if (animatableComponents != null) {    animatableComponents.remove(cmp);  }}  }
class C{  SSLSocketFactoryImpl(SSLContextImpl context){  this.context=context;}  }
class C{  public static boolean occupy(){  return occupy(DEFAULT_WAIT_MS);}  }
class C{  private void updateInfoText(){  if (tabs.getSelectedIndex() == 0) {    if (editorAccess) {      infoText.setText(EDITOR_TEXT);    } else {      infoText.setText(EDITOR_TEXT_NO_ACCESS);    }  } else {    if (commercialAccess) {      infoText.setText(COMMERCIALS_TEXT);    } else {      infoText.setText(COMMERCIALS_TEXT_NO_ACCESS);    }  }}  }
class C{  public boolean isEmpty(){  return size() == 0;}  }
class C{  @Nullable public static Object invoke(AnnotatedMethod<?> annotatedMethod,Object object,Object... args){  Method method=annotatedMethod.getMethod();  boolean accessible=method.isAccessible();  try {    if (accessible) {      return method.invoke(object,args);    } else {      method.setAccessible(true);      Object result=method.invoke(object,args);      method.setAccessible(false);      return result;    }  } catch (  IllegalAccessException e) {    throw new BindException(annotatedMethod.getAnnotation().getClass(),object.getClass(),method,"method not accessible",e);  }catch (  InvocationTargetException e) {    throw new BindException(annotatedMethod.getAnnotation().getClass(),object.getClass(),method,"method calling failed because of an invocation issue",e);  } finally {    if (!accessible && method.isAccessible()) {      method.setAccessible(false);    }  }}  }
class C{  public static Classification private_(){  return create(PRIVATE);}  }
class C{  public void testSingleSentences() throws Exception {  BreakIterator expected=BreakIterator.getSentenceInstance(Locale.ROOT);  BreakIterator actual=new WholeBreakIterator();  assertSameBreaks("a",expected,actual);  assertSameBreaks("ab",expected,actual);  assertSameBreaks("abc",expected,actual);  assertSameBreaks("",expected,actual);}  }
class C{  public ServerHandshakeImpl(Object owner){  super(owner);  status=NEED_UNWRAP;}  }
class C{  public final CC push(Float weightX,Float weightY){  return pushX(weightX).pushY(weightY);}  }
class C{  @GwtIncompatible public RETokenizer tokenizer(Reader in,int length) throws IOException {  return new RETokenizer(this,in,length);}  }
class C{  public DataSource(Loader loader){  super();  m_BatchBuffer=null;  m_Loader=loader;  m_File=null;  m_URL=null;  m_Incremental=(m_Loader instanceof IncrementalConverter);  initBatchBuffer();}  }
class C{  public void detach(){  if (m_allowDetach) {    m_traverser=null;    super.detach();  }}  }
class C{  PBECipherCore(String cipherAlg) throws NoSuchAlgorithmException, NoSuchPaddingException {  algo=cipherAlg;  if (algo.equals("DES")) {    cipher=new CipherCore(new DESCrypt(),DESConstants.DES_BLOCK_SIZE);  } else   if (algo.equals("DESede")) {    cipher=new CipherCore(new DESedeCrypt(),DESConstants.DES_BLOCK_SIZE);  } else {    throw new NoSuchAlgorithmException("No Cipher implementation " + "for PBEWithMD5And" + algo);  }  cipher.setMode("CBC");  cipher.setPadding("PKCS5Padding");  md=MessageDigest.getInstance("MD5");}  }
class C{  private boolean hasNextProxy(){  return nextProxyIndex < proxies.size();}  }
class C{  private void backupWidgets(BackupDataOutput data) throws IOException {  final ContentResolver cr=mContext.getContentResolver();  final int dpi=mContext.getResources().getDisplayMetrics().densityDpi;  int backupWidgetCount=0;  String where=Favorites.ITEM_TYPE + "=" + Favorites.ITEM_TYPE_APPWIDGET+ " AND "+ getUserSelectionArg();  Cursor cursor=cr.query(Favorites.CONTENT_URI,FAVORITE_PROJECTION,where,null,null);  try {    cursor.moveToPosition(-1);    while (cursor.moveToNext()) {      final long id=cursor.getLong(ID_INDEX);      final String providerName=cursor.getString(APPWIDGET_PROVIDER_INDEX);      final ComponentName provider=ComponentName.unflattenFromString(providerName);      Key key=null;      String backupKey=null;      if (provider != null) {        key=getKey(Key.WIDGET,providerName);        backupKey=keyToBackupKey(key);      } else {        Log.w(TAG,"empty intent on appwidget: " + id);      }      if (mExistingKeys.contains(backupKey) && restoredBackupVersion >= 3) {        if (DEBUG)         Log.d(TAG,"already saved widget " + backupKey);        mKeys.add(key);      } else       if (backupKey != null) {        if (DEBUG)         Log.d(TAG,"I can count this high: " + backupWidgetCount);        if (backupWidgetCount < MAX_WIDGETS_PER_PASS) {          LauncherAppWidgetProviderInfo widgetInfo=null;          if (widgetInfo != null) {            if (DEBUG)             Log.d(TAG,"saving widget " + backupKey);            writeRowToBackup(key,packWidget(dpi,widgetInfo),data);            mKeys.add(key);            backupWidgetCount++;          }        } else {          if (VERBOSE)           Log.v(TAG,"deferring widget backup " + backupKey);          dataChanged();        }      }    }  }  finally {    cursor.close();  }}  }
class C{  private void shotDownActivatedPlugins() throws PluginRuntimeException {  for (  Plugin plugin : fActivatedPlugins.values()) {    plugin.shutDown();  }}  }
class C{  public int readInt(int r){  if (r < 1 || r > 32)   throw new RuntimeException("Illegal value of r = " + r);  if (r == 32)   return readInt();  int x=0;  for (int i=0; i < r; i++) {    x<<=1;    boolean bit=readBoolean();    if (bit)     x|=1;  }  return x;}  }
class C{  public void mouseReleased(MouseEvent event){  if (event == null || event.isConsumed())   return;  if (this.parent != null)   this.parent.mouseReleased(event);}  }
class C{  @Override public int proceduralInterval(){  return 1;}  }
class C{  public TCompactProtocol(TTransport transport){  this(transport,NO_LENGTH_LIMIT,NO_LENGTH_LIMIT);}  }
class C{  private byte[] writeCheckedBytes(MessageNano proto){  CheckedMessage wrapper=new CheckedMessage();  wrapper.payload=MessageNano.toByteArray(proto);  CRC32 checksum=new CRC32();  checksum.update(wrapper.payload);  wrapper.checksum=checksum.getValue();  return MessageNano.toByteArray(wrapper);}  }
class C{  public void save(View view){  UserConfig config=new UserConfig();  config.user=MainActivity.connection.getUser().user;  EditText text=(EditText)findViewById(R.id.passwordText);  config.password=text.getText().toString().trim();  text=(EditText)findViewById(R.id.newPasswordText);  config.newPassword=text.getText().toString().trim();  text=(EditText)findViewById(R.id.hintText);  config.hint=text.getText().toString().trim();  text=(EditText)findViewById(R.id.nameText);  config.name=text.getText().toString().trim();  text=(EditText)findViewById(R.id.emailText);  config.email=text.getText().toString().trim();  text=(EditText)findViewById(R.id.websiteText);  config.website=text.getText().toString().trim();  text=(EditText)findViewById(R.id.bioText);  config.bio=text.getText().toString().trim();  CheckBox checkbox=(CheckBox)findViewById(R.id.showNameCheckBox);  config.showName=checkbox.isChecked();  HttpUpdateUserAction action=new HttpUpdateUserAction(this,config);  action.execute();}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public void addDescription(String description){  String desc=getDescription();  if (desc == null)   setDescription(description); else   setDescription(desc + " | " + description);}  }
class C{  protected TypeImpl(){  super();}  }
class C{  public Exp(){  super("exp",1);}  }
class C{  private void applyPhaseOptions(JimpleBody b,Map opts){  JBOptions options=new JBOptions(opts);  if (options.use_original_names())   PhaseOptions.v().setPhaseOptionIfUnset("jb.lns","only-stack-locals");  if (Options.v().time())   Timers.v().splitTimer.start();  PackManager.v().getTransform("jb.tt").apply(b);  PackManager.v().getTransform("jb.ls").apply(b);  if (Options.v().time())   Timers.v().splitTimer.end();  PackManager.v().getTransform("jb.a").apply(b);  PackManager.v().getTransform("jb.ule").apply(b);  if (Options.v().time())   Timers.v().assignTimer.start();  PackManager.v().getTransform("jb.tr").apply(b);  if (Options.v().time())   Timers.v().assignTimer.end();  if (options.use_original_names()) {    PackManager.v().getTransform("jb.ulp").apply(b);  }  PackManager.v().getTransform("jb.lns").apply(b);  PackManager.v().getTransform("jb.cp").apply(b);  PackManager.v().getTransform("jb.dae").apply(b);  PackManager.v().getTransform("jb.cp-ule").apply(b);  PackManager.v().getTransform("jb.lp").apply(b);  PackManager.v().getTransform("jb.ne").apply(b);  PackManager.v().getTransform("jb.uce").apply(b);  if (Options.v().time())   Timers.v().stmtCount+=b.getUnits().size();}  }
class C{  public static boolean isSymlink(File file) throws IOException {  if (file == null) {    throw new NullPointerException("File must not be null");  }  if (File.separatorChar == '\\') {    return false;  }  File fileInCanonicalDir=null;  if (file.getParent() == null) {    fileInCanonicalDir=file;  } else {    File canonicalDir=file.getParentFile().getCanonicalFile();    fileInCanonicalDir=new File(canonicalDir,file.getName());  }  if (fileInCanonicalDir.getCanonicalFile().equals(fileInCanonicalDir.getAbsoluteFile())) {    return false;  } else {    return true;  }}  }
class C{  public int height(){  return height(root);}  }
class C{  protected void preprocessArgument(Object arg){  if (arg instanceof Type) {    preprocessType((Type)arg);  } else   if (arg instanceof Symbol) {    preprocessSymbol((Symbol)arg);  } else   if (arg instanceof JCDiagnostic) {    preprocessDiagnostic((JCDiagnostic)arg);  } else   if (arg instanceof Iterable<?>) {    for (    Object o : (Iterable<?>)arg) {      preprocessArgument(o);    }  }}  }
class C{  public static TypeReference findOrCreate(Class<?> klass){  if (VM.runningVM) {    return java.lang.JikesRVMSupport.getTypeForClass(klass).getTypeRef();  } else {    String className=klass.getName();    if (className.startsWith("[")) {      Atom classAtom=Atom.findOrCreateAsciiAtom(className.replace('.','/'));      return findOrCreate(BootstrapClassLoader.getBootstrapClassLoader(),classAtom);    } else {      Atom classAtom;      if (className.equals("int")) {        return TypeReference.Int;      } else       if (className.equals("boolean")) {        return TypeReference.Boolean;      } else       if (className.equals("byte")) {        return TypeReference.Byte;      } else       if (className.equals("char")) {        return TypeReference.Char;      } else       if (className.equals("double")) {        return TypeReference.Double;      } else       if (className.equals("float")) {        return TypeReference.Float;      } else       if (className.equals("long")) {        return TypeReference.Long;      } else       if (className.equals("short")) {        return TypeReference.Short;      } else       if (className.equals("void")) {        return TypeReference.Void;      } else {        classAtom=Atom.findOrCreateAsciiAtom(className.replace('.','/'));      }      Atom classDescriptor=classAtom.descriptorFromClassName();      return findOrCreate(BootstrapClassLoader.getBootstrapClassLoader(),classDescriptor);    }  }}  }
class C{  protected double norm(double score,Stats stats){  if (norm) {    return (score - stats.getMean()) / stats.getStandardDeviation();  } else {    return score;  }}  }
class C{  public CloneNotSupportedException(){  super();}  }
class C{  public static boolean isGitVcs(final Project project){  ArgumentHelper.checkNotNull(project,"project");  final ProjectLevelVcsManager projectLevelVcsManager=ProjectLevelVcsManager.getInstance(project);  return projectLevelVcsManager.checkVcsIsActive(GitVcs.NAME);}  }
class C{  private ByteArrayOutputStream zip(HttpServletRequest request,File dir,List<String> elementList) throws IOException {  ByteArrayOutputStream baos=new ByteArrayOutputStream();  ZipOutputStream zos=new ZipOutputStream(baos);  for (Iterator<String> it=elementList.iterator(); it.hasNext(); ) {    String element=it.next();    if (element.length() == 0) {      continue;    }    File file=new File(dir,element);    if (isAccessible(request,file)) {      if (file.isDirectory()) {        zipDir(zos,element,file);      } else {        zipFile(zos,element,file);      }    }  }  zos.close();  return baos;}  }
class C{  public void propertyChange(PropertyChangeEvent evt){  String name=evt.getPropertyName();  if (name == "width" || name == "preferredWidth") {    invalidateWidthCache();    fireColumnMarginChanged();  }}  }
class C{  public final AssertSubscriber<T> await(){  if (cdl.getCount() == 0) {    return this;  }  try {    cdl.await();  } catch (  InterruptedException ex) {    throw new AssertionError("Wait interrupted",ex);  }  return this;}  }
class C{  void emitCLDCStackMap(int pc,int localsSize){  if (lastStackMapPC == pc) {    stackMapBuffer[--stackMapBufferSize]=null;  }  lastStackMapPC=pc;  if (stackMapBuffer == null) {    stackMapBuffer=new StackMapFrame[20];  } else {    stackMapBuffer=ArrayUtils.ensureCapacity(stackMapBuffer,stackMapBufferSize);  }  StackMapFrame frame=stackMapBuffer[stackMapBufferSize++]=new StackMapFrame();  frame.pc=pc;  frame.locals=new Type[localsSize];  for (int i=0; i < localsSize; i++) {    if (state.defined.isMember(i) && lvar[i] != null) {      Type vtype=lvar[i].sym.type;      if (!(vtype instanceof UninitializedType))       vtype=types.erasure(vtype);      frame.locals[i]=vtype;    }  }  frame.stack=new Type[state.stacksize];  for (int i=0; i < state.stacksize; i++)   frame.stack[i]=state.stack[i];}  }
class C{  public void show(){  LinearLayout.LayoutParams lp=(LinearLayout.LayoutParams)mContentView.getLayoutParams();  lp.height=LayoutParams.WRAP_CONTENT;  mContentView.setLayoutParams(lp);}  }
class C{  public static void rollback(boolean beganTransaction,String causeMessage,Throwable causeThrowable) throws GenericTransactionException {  if (beganTransaction) {    TransactionUtil.rollback(causeThrowable);  } else {    TransactionUtil.setRollbackOnly(causeMessage,causeThrowable);  }}  }
class C{  public MockSerializableEntity(){  this(1,"a",2);}  }
class C{  protected void createPages(){  createUsecasePage();}  }
class C{  public boolean enableImageAccessStep(URI rpSystemId,Map<URI,Integer> snapshots,String token) throws ControllerException {  try {    WorkflowStepCompleter.stepExecuting(token);    URI device=null;    for (    URI snapshotID : snapshots.keySet()) {      BlockSnapshot snapshot=_dbClient.queryObject(BlockSnapshot.class,snapshotID);      if (device == null) {        device=snapshot.getStorageController();      }    }    enableImageForSnapshots(rpSystemId,device,new ArrayList<URI>(snapshots.keySet()),token);    WorkflowStepCompleter.stepSucceded(token);  } catch (  Exception e) {    stepFailed(token,e,"enableImageAccessStep");    return false;  }  return true;}  }
class C{  private Transition parseTransition(XmlPullParser parser,List<String> ignoredMediaItems){  final String transitionId=parser.getAttributeValue("",ATTR_ID);  final String type=parser.getAttributeValue("",ATTR_TYPE);  final long durationMs=Long.parseLong(parser.getAttributeValue("",ATTR_DURATION));  final int behavior=Integer.parseInt(parser.getAttributeValue("",ATTR_BEHAVIOR));  final String beforeMediaItemId=parser.getAttributeValue("",ATTR_BEFORE_MEDIA_ITEM_ID);  final MediaItem beforeMediaItem;  if (beforeMediaItemId != null) {    if (ignoredMediaItems.contains(beforeMediaItemId)) {      return null;    }    beforeMediaItem=getMediaItem(beforeMediaItemId);  } else {    beforeMediaItem=null;  }  final String afterMediaItemId=parser.getAttributeValue("",ATTR_AFTER_MEDIA_ITEM_ID);  final MediaItem afterMediaItem;  if (afterMediaItemId != null) {    if (ignoredMediaItems.contains(afterMediaItemId)) {      return null;    }    afterMediaItem=getMediaItem(afterMediaItemId);  } else {    afterMediaItem=null;  }  final Transition transition;  if (TransitionAlpha.class.getSimpleName().equals(type)) {    final int blending=Integer.parseInt(parser.getAttributeValue("",ATTR_BLENDING));    final String maskFilename=parser.getAttributeValue("",ATTR_MASK);    final boolean invert=Boolean.getBoolean(parser.getAttributeValue("",ATTR_INVERT));    transition=new TransitionAlpha(transitionId,afterMediaItem,beforeMediaItem,durationMs,behavior,maskFilename,blending,invert);  } else   if (TransitionCrossfade.class.getSimpleName().equals(type)) {    transition=new TransitionCrossfade(transitionId,afterMediaItem,beforeMediaItem,durationMs,behavior);  } else   if (TransitionSliding.class.getSimpleName().equals(type)) {    final int direction=Integer.parseInt(parser.getAttributeValue("",ATTR_DIRECTION));    transition=new TransitionSliding(transitionId,afterMediaItem,beforeMediaItem,durationMs,behavior,direction);  } else   if (TransitionFadeBlack.class.getSimpleName().equals(type)) {    transition=new TransitionFadeBlack(transitionId,afterMediaItem,beforeMediaItem,durationMs,behavior);  } else {    throw new IllegalArgumentException("Invalid transition type: " + type);  }  final boolean isTransitionGenerated=Boolean.parseBoolean(parser.getAttributeValue("",ATTR_IS_TRANSITION_GENERATED));  if (isTransitionGenerated == true) {    final String transitionFile=parser.getAttributeValue("",ATTR_GENERATED_TRANSITION_CLIP);    if (new File(transitionFile).exists()) {      transition.setFilename(transitionFile);    } else {      transition.setFilename(null);    }  }  if (beforeMediaItem != null) {    beforeMediaItem.setBeginTransition(transition);  }  if (afterMediaItem != null) {    afterMediaItem.setEndTransition(transition);  }  return transition;}  }
class C{  public long remainingLife(long now,long timeoutNanos){  return (getBirthDate() - now) + timeoutNanos;}  }
class C{  public boolean retainEntries(TDoubleObjectProcedure<V> procedure){  boolean modified=false;  double[] keys=_set;  V[] values=_values;  stopCompactingOnRemove();  try {    for (int i=keys.length; i-- > 0; ) {      if (isFull(values,i) && !procedure.execute(keys[i],unwrapNull(values[i]))) {        removeAt(i);        modified=true;      }    }  }  finally {    startCompactingOnRemove(modified);  }  return modified;}  }
class C{  private RegUtils(){  throw new Error("Do not need instantiate!");}  }
class C{  public static TypedRegion[] computePartitioning(Document document,String partitioning,int offset,int length,boolean includeZeroLengthPartitions) throws BadLocationException {  try {    return document.computePartitioning(partitioning,offset,length,includeZeroLengthPartitions);  } catch (  BadPartitioningException x) {    return new TypedRegion[0];  }}  }
class C{  public Object sendAsync(final Message query,final ResolverListener listener){  Resolution res=new Resolution(this,query);  res.startAsync(listener);  return res;}  }
class C{  public String toFinalString(){  final StringBuilder sb=new StringBuilder();  int t=0;  for (  AlignedSourceTokens pt : trgPoints) {    for (    int s : pt) {      sb.append(String.format(" %d-%d",s - 1,t - 1));    }    t++;  }  final String result=sb.toString();  if (!result.isEmpty()) {    return result.substring(1);  }  return result;}  }
class C{  public static WaitStrategy defaultWaitStrategy(){  return forListeningPort();}  }
class C{  public OutlierResult run(Database database,Relation<O> relation){  DistanceQuery<O> distFunc=database.getDistanceQuery(relation,getDistanceFunction());  KNNQuery<O> knnQuery=database.getKNNQuery(distFunc,k + 1,DatabaseQuery.HINT_HEAVY_USE);  ModifiableDBIDs pruned=DBIDUtil.newHashSet();  WritableDataStore<ModifiableDBIDs> knns=DataStoreUtil.makeStorage(relation.getDBIDs(),DataStoreFactory.HINT_TEMP | DataStoreFactory.HINT_HOT,ModifiableDBIDs.class);  WritableDataStore<ModifiableDBIDs> rnns=DataStoreUtil.makeStorage(relation.getDBIDs(),DataStoreFactory.HINT_TEMP | DataStoreFactory.HINT_HOT,ModifiableDBIDs.class);  WritableDoubleDataStore density=DataStoreUtil.makeDoubleStorage(relation.getDBIDs(),DataStoreFactory.HINT_TEMP | DataStoreFactory.HINT_HOT);  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {    knns.put(iditer,DBIDUtil.newArray());    rnns.put(iditer,DBIDUtil.newArray());  }  computeNeighborhoods(relation,knnQuery,pruned,knns,rnns,density);  DoubleMinMax inflominmax=new DoubleMinMax();  WritableDoubleDataStore inflos=DataStoreUtil.makeDoubleStorage(relation.getDBIDs(),DataStoreFactory.HINT_STATIC);  computeINFLO(relation,pruned,knns,rnns,density,inflos,inflominmax);  DoubleRelation scoreResult=new MaterializedDoubleRelation("Influence Outlier Score","inflo-outlier",inflos,relation.getDBIDs());  OutlierScoreMeta scoreMeta=new QuotientOutlierScoreMeta(inflominmax.getMin(),inflominmax.getMax(),0.,Double.POSITIVE_INFINITY,1.);  return new OutlierResult(scoreMeta,scoreResult);}  }
class C{  public void remove(boolean priority,Marker m){  lock.lock();  sendEmptyMessage(BLANK);  if (priority) {    mOnScreenRemoveMarkerTasks.add(m);  } else {    mRemoveMarkerTasks.add(m);  }  lock.unlock();}  }
class C{  public void renameAttributeValue(Attribute att,String val,String name){  int v=att.indexOfValue(val);  if (v == -1) {    throw new IllegalArgumentException(val + " not found");  }  renameAttributeValue(att.index(),v,name);}  }
class C{  @Override public void addAttribute(String name,double value){  String str=Double.toString(value);  if (str.endsWith(".0"))   str=str.substring(0,str.length() - 2);  ((Element)current).setAttribute(name,str);}  }
class C{  public static IMethodBinding findMethodInType(ITypeBinding type,String methodName,String[] parameters){  if (type.isPrimitive())   return null;  IMethodBinding[] methods=type.getDeclaredMethods();  for (int i=0; i < methods.length; i++) {    if (parameters == null) {      if (methodName.equals(methods[i].getName()))       return methods[i];    } else {      if (isEqualMethod(methods[i],methodName,parameters))       return methods[i];    }  }  return null;}  }
class C{  public FirstDifferencesWrapper(DataWrapper wrapper,Parameters params){  LogDataUtils.logDataModelList("Parent data in which rows have been randomly permuted.",getDataModelList());  DataModelList inList=wrapper.getDataModelList();  DataModelList outList=new DataModelList();  for (  DataModel model : inList) {    if (!(model instanceof DataSet)) {      throw new IllegalArgumentException("Not a data set: " + model.getName());    }    DataSet data=(DataSet)model;    if (!(data.isContinuous())) {      throw new IllegalArgumentException("Not a continuous data set: " + data.getName());    }    DataSet firstDiff=new ColtDataSet(data.getNumRows() - 1,data.getVariables());    for (int j=0; j < data.getNumColumns(); j++) {      for (int i=0; i < data.getNumRows() - 1; i++) {        double d2=data.getDouble(i + 1,j);        double d1=data.getDouble(i,j);        firstDiff.setDouble(i,j,d2 - d1);      }    }    outList.add(firstDiff);  }  setDataModel(outList);  setSourceGraph(wrapper.getSourceGraph());}  }
class C{  private void appendLineString(LineString lineString,int level,boolean doIndent,Writer writer) throws IOException {  if (doIndent)   indent(level,writer);  writer.write("<polyline fill='none' points='");  appendSequencePoints(lineString.getCoordinateSequence(),level,doIndent,writer);  writer.write("'/>\n");}  }
class C{  public void appendQuotedExtension(StringBuffer toAddTo){  appendQuoted(extension,toAddTo);}  }
class C{  protected void beforeInitialization(){}  }
class C{  private boolean satisfiedInTree(TreeElement<JsonElement,?> element,FilterPred pred){  JsonElement jsonElt=element.getData();  boolean satisfied=pred.apply(jsonElt);  if (satisfied)   return true;  for (  TreeElement<?,?> child : element.getChildren()) {    if (satisfiedInTree((TreeElement<JsonElement,?>)child,pred))     return true;  }  return false;}  }
class C{  public static void main(String[] args){  System.out.println(approxLog(0.0));}  }
class C{  public SharedJAMonBufferListener(String name){  super(name);}  }
class C{  public boolean isSetUserMap(){  return this.userMap != null;}  }
class C{  public static Period millis(int millis){  return new Period(new int[]{0,0,0,0,0,0,0,millis},PeriodType.standard());}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:41.961 -0500",hash_original_method="188F67866E8CBA269C0CFF587B29CD3B",hash_generated_method="EF54C84655590718FBD4C6A141707AC5") private int findIndex(Object key,Object[] array){  int length=array.length;  int index=getModuloHash(key,length);  int last=(index + length - 1) % length;  while (index != last) {    if (array[index] == key || array[index] == null) {      break;    }    index=(index + 1) % length;  }  return index;}  }
class C{  @Override protected void appendFields(StringBuffer buff){  super.appendFields(buff);  buff.append("; bucketId=").append(this.bucketId).append("; bucketSize=").append(this.bucketSize);}  }
class C{  public static void fsync(Path fileToSync,boolean isDir) throws IOException {  try (final FileChannel file=FileChannel.open(fileToSync,isDir ? StandardOpenOption.READ : StandardOpenOption.WRITE)){    file.force(true);  } catch (  IOException ioe) {    if (isDir) {      assert (Constants.LINUX || Constants.MAC_OS_X) == false : "On Linux and MacOSX fsyncing a directory should not throw IOException, " + "we just don't want to rely on that in production (undocumented). Got: " + ioe;      return;    }    throw ioe;  }}  }
class C{  public void warning(String msg,Throwable thrown){  log(Level.WARNING,thrown,msg,thrown);}  }
class C{  public static String writeActionsToString(OFInstructionWriteActions inst,Logger log) throws Exception {  return ActionUtils.actionsToString(inst.getActions(),log);}  }
class C{  public SequoiaBackendNotification(String clusterName,String memberName,String resourceName,String state,String source,TungstenProperties resourceProps){  super(NotificationStreamID.MONITORING,null,memberName,null,ResourceType.ANY,null,null,null);}  }
class C{  public Object clone(){  Coordinate[] cloneCoordinates=new Coordinate[size()];  for (int i=0; i < coordinates.length; i++) {    cloneCoordinates[i]=(Coordinate)coordinates[i].clone();  }  return new CoordinateArraySequence(cloneCoordinates,dimension);}  }
class C{  @Override public boolean isAddressAllowed(DccLocoAddress address){  if (address.getNumber() != 0) {    return (true);  } else {    return (false);  }}  }
class C{  void updateVisibilityModel(){  Component c=getContainer();  if (c instanceof JTextField) {    JTextField field=(JTextField)c;    BoundedRangeModel vis=field.getHorizontalVisibility();    int hspan=(int)getPreferredSpan(X_AXIS);    int extent=vis.getExtent();    int maximum=Math.max(hspan,extent);    extent=(extent == 0) ? maximum : extent;    int value=maximum - extent;    int oldValue=vis.getValue();    if ((oldValue + extent) > maximum) {      oldValue=maximum - extent;    }    value=Math.max(0,Math.min(value,oldValue));    vis.setRangeProperties(value,extent,0,maximum,false);  }}  }
class C{  public byte[] build(String className){  ClassWriter cw=new ClassWriter(ClassWriter.COMPUTE_MAXS);  String internalClass=getInternalClassName(className);  String implName=getInternalClassName(_implementedType.getName());  String superName;  if (_implementedType.isInterface()) {    superName="java/lang/Object";    cw.visit(V1_5,ACC_PUBLIC + ACC_SUPER,internalClass,null,superName,new String[]{implName});  } else {    superName=implName;    cw.visit(V1_5,ACC_PUBLIC + ACC_SUPER,internalClass,null,implName,null);  }  cw.visitSource(className + ".java",null);  BeanBuilder.generateDefaultConstructor(cw,superName);  for (  Property prop : _beanProperties.values()) {    TypeDescription type=prop.selectType(_typeFactory);    createField(cw,prop,type);    if (!prop.hasConcreteGetter()) {      createGetter(cw,internalClass,prop,type);    }    if (!prop.hasConcreteSetter()) {      createSetter(cw,internalClass,prop,type);    }  }  for (  Method m : _unsupportedMethods.values()) {    createUnimplementedMethod(cw,internalClass,m);  }  cw.visitEnd();  return cw.toByteArray();}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  @SuppressWarnings({"ResultOfMethodCallIgnored","ConstantConditions"}) public void testBlockMetrics() throws Exception {  IgfsEx igfs=(IgfsEx)igfsPrimary[0];  IgfsPath fileRemote=new IgfsPath("/fileRemote");  IgfsPath file1=new IgfsPath("/primary/file1");  IgfsPath file2=new IgfsPath("/primary/file2");  IgfsOutputStream out=igfsSecondary.create(fileRemote,256,true,null,1,256,null);  int rmtBlockSize=igfsSecondary.info(fileRemote).blockSize();  out.write(new byte[rmtBlockSize]);  out.close();  IgfsMetrics initMetrics=igfs.metrics();  igfs.create(file1,256,true,null,1,256,null).close();  int blockSize=igfs.info(file1).blockSize();  checkBlockMetrics(initMetrics,igfs.metrics(),0,0,0,0,0,0);  IgfsOutputStream os=igfs.append(file1,false);  os.write(new byte[blockSize * 2]);  os.close();  checkBlockMetrics(initMetrics,igfs.metrics(),0,0,0,2,0,blockSize * 2);  os=igfs.create(file2,256,true,null,1,256,null);  os.write(new byte[blockSize]);  os.close();  checkBlockMetrics(initMetrics,igfs.metrics(),0,0,0,3,0,blockSize * 3);  IgfsInputStream is=igfs.open(file1);  is.readFully(0,new byte[blockSize * 2]);  is.close();  checkBlockMetrics(initMetrics,igfs.metrics(),2,0,blockSize * 2,3,0,blockSize * 3);  is=igfs.open(file2);  is.read(new byte[blockSize]);  is.close();  checkBlockMetrics(initMetrics,igfs.metrics(),3,0,blockSize * 3,3,0,blockSize * 3);  igfs.create(file1,true).close();  checkBlockMetrics(initMetrics,igfs.metrics(),3,0,blockSize * 3,3,0,blockSize * 3);  igfs.delete(file2,false);  checkBlockMetrics(initMetrics,igfs.metrics(),3,0,blockSize * 3,3,0,blockSize * 3);  is=igfs.open(fileRemote);  is.read(new byte[rmtBlockSize]);  is.close();  checkBlockMetrics(initMetrics,igfs.metrics(),4,1,blockSize * 3 + rmtBlockSize,3,0,blockSize * 3);  U.sleep(300);  is=igfs.open(fileRemote);  is.read(new byte[rmtBlockSize]);  is.close();  checkBlockMetrics(initMetrics,igfs.metrics(),5,1,blockSize * 3 + rmtBlockSize * 2,3,0,blockSize * 3);  IgfsMetrics metrics=igfs.metrics();  assert metrics.secondarySpaceSize() == rmtBlockSize;  os=igfs.append(fileRemote,false);  os.write(new byte[rmtBlockSize]);  os.close();  checkBlockMetrics(initMetrics,igfs.metrics(),5,1,blockSize * 3 + rmtBlockSize * 2,4,1,blockSize * 3 + rmtBlockSize);  metrics=igfs.metrics();  assert metrics.secondarySpaceSize() == rmtBlockSize * 2;  igfs.delete(fileRemote,false);  U.sleep(300);  assert igfs.metrics().secondarySpaceSize() == 0;  os=igfs.append(file1,false);  os.write(new byte[blockSize / 2]);  os.close();  checkBlockMetrics(initMetrics,igfs.metrics(),5,1,blockSize * 3 + rmtBlockSize * 2,5,1,blockSize * 7 / 2 + rmtBlockSize);  igfs.resetMetrics();  metrics=igfs.metrics();  assert metrics.blocksReadTotal() == 0;  assert metrics.blocksReadRemote() == 0;  assert metrics.blocksWrittenTotal() == 0;  assert metrics.blocksWrittenRemote() == 0;  assert metrics.bytesRead() == 0;  assert metrics.bytesReadTime() == 0;  assert metrics.bytesWritten() == 0;  assert metrics.bytesWriteTime() == 0;}  }
class C{  public void testPollSubmission(){  final CountDownLatch done=new CountDownLatch(1);  SubFJP p=new SubFJP();  PoolCleaner cleaner=null;  try {    cleaner=cleaner(p);    ForkJoinTask<?> a=p.submit(awaiter(done));    ForkJoinTask<?> b=p.submit(awaiter(done));    ForkJoinTask<?> c=p.submit(awaiter(done));    ForkJoinTask<?> r=p.pollSubmission();    assertTrue(r == a || r == b || r == c);    assertFalse(r.isDone());    done.countDown();  }  finally {    if (cleaner != null) {      cleaner.close();    }  }}  }
class C{  protected Object convertResult(Object obj){  return toBinary(obj);}  }
class C{  @Override public int hashCode(){  return nodes.keySet().hashCode();}  }
class C{  public CMemoryRefreshButtonPanel(final JFrame parent,final CDebugPerspectiveModel debugPerspectiveModel,final IRefreshRangeProvider rangeProvider,final IRefreshRangeProvider stackRangeProvider){  super(new BorderLayout());  Preconditions.checkNotNull(parent,"IE01439: Parent can not be null");  Preconditions.checkNotNull(debugPerspectiveModel,"IE01440: Debug perspective model can not be null");  Preconditions.checkNotNull(rangeProvider,"IE01441: Range provider argument can not be null");  add(m_refreshButton);  final Action defaultAction=new CRefreshAction(parent,debugPerspectiveModel,rangeProvider,stackRangeProvider);  final Action askAction=new CAskRefreshAction(parent,debugPerspectiveModel);  m_buttonSynchronizer=new CMemoryRefreshButtonSynchronizer(m_refreshButton,debugPerspectiveModel,defaultAction,askAction);}  }
class C{  public void closeLedger(LedgerDescriptor ledgerDesc) throws BKException {  FutureUtils.bkResult(asyncCloseLedger(ledgerDesc));}  }
class C{  private static void createGroupNodes(final INaviView target,final Collection<INaviViewNode> sourceNodes,final Map<INaviViewNode,INaviViewNode> nodeMap){  for (  final INaviViewNode blockNode : sourceNodes) {    if (blockNode instanceof INaviGroupNode) {      final INaviGroupNode gnode=(INaviGroupNode)blockNode;      final CGroupNode newGroupNode=target.getContent().createGroupNode(getNodes(gnode.getElements(),nodeMap));      newGroupNode.initializeComment(gnode.getComments());    }  }}  }
class C{  public static ServerBase current(){  return _serverLocal.get();}  }
class C{  @Override public int size(){  return values.size();}  }
class C{  @SuppressWarnings("unchecked") public PartitionAttributes<K,V> create(){  this.partitionAttributes.validateAttributes();  return (PartitionAttributes<K,V>)this.partitionAttributes.clone();}  }
class C{  public void deleteValueSubkeyed(Connection connection,Object keys[]){  StringBuilder builder=new StringBuilder();  builder.append("delete from ");  builder.append(tableName);  builder.append(" where ");  String delimiter="";  for (int i=0; i < keys.length; i++) {    builder.append(delimiter);    builder.append(keyFieldNames[i]);    builder.append("=?");    delimiter=" and ";  }  String query=builder.toString();  PreparedStatement statement=null;  try {    if ((ExecutionPathDebugLog.isDebugEnabled) && (log.isDebugEnabled())) {      log.debug("Executing query '" + query + "' keys '"+ print(keys)+ "'");    }    statement=connection.prepareStatement(query);    for (int i=0; i < keys.length; i++) {      statement.setObject(i + 1,keys[i]);    }    int rows=statement.executeUpdate();    if ((ExecutionPathDebugLog.isDebugEnabled) && (log.isDebugEnabled())) {      log.debug("Deleted yielded " + rows + " rows");    }  } catch (  SQLException ex) {    String message="Failed to invoke : " + query + " :"+ ex.getMessage();    log.error(message,ex);    storeExceptionHandler.handle(message,ex);    throw new StoreExceptionDBRel(message,ex);  } finally {    try {      if (statement != null)       statement.close();    } catch (    SQLException e) {    }  }}  }
class C{  static public boolean gt(double v1,double v2){  return (v1 - v2) > VERY_SMALL_VALUE;}  }
class C{  private static void uaRIMinGt(MatrixBlock in,MatrixBlock out,double[] bv,int[] bvi,BinaryOperator bOp) throws DMLRuntimeException {  int ind0=uariminGt(0.0,bv,bvi,bOp);  int m=in.rlen;  for (int i=0; i < m; i++) {    double ai=in.quickGetValue(i,0);    int ind=(ai == 0) ? ind0 : uariminGt(ai,bv,bvi,bOp);    out.quickSetValue(i,0,ind);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  protected void prepareBarHighlight(float x,float y,float barspaceHalf,float from,Transformer trans){  float barWidth=0.5f;  float left=x - barWidth + barspaceHalf;  float right=x + barWidth - barspaceHalf;  float top=y >= from ? y : from;  float bottom=y <= from ? y : from;  mBarRect.set(left,top,right,bottom);  trans.rectValueToPixel(mBarRect,mAnimator.getPhaseY());}  }
class C{  @Override public MemChunkHolder<NonVolatileMemAllocator> retrieveChunk(long phandler,boolean autoreclaim){  MemChunkHolder<NonVolatileMemAllocator> ret=null;  long eaddr=getEffectiveAddress(phandler);  long sz=m_nvmasvc.retrieveSize(m_nid,eaddr);  if (sz > 0L) {    ret=new MemChunkHolder<NonVolatileMemAllocator>(this,eaddr,sz);    if (autoreclaim) {      m_chunkcollector.register(ret);    }  }  return ret;}  }
class C{  public DefaultRetryPolicy(){  this(DEFAULT_TIMEOUT_MS,DEFAULT_MAX_RETRIES,DEFAULT_BACKOFF_MULT);}  }
class C{  private void _serializeMap(PageContext pc,Set test,Map map,StringBuilder sb,boolean serializeQueryByColumns,Set<Object> done) throws ConverterException {  sb.append(goIn());  sb.append("{");  Iterator it=map.keySet().iterator();  boolean doIt=false;  while (it.hasNext()) {    Object key=it.next();    if (doIt)     sb.append(',');    doIt=true;    sb.append(StringUtil.escapeJS(key.toString(),'"',charsetEncoder));    sb.append(':');    _serialize(pc,test,map.get(key),sb,serializeQueryByColumns,done);  }  sb.append('}');}  }
class C{  public Set<String> keySet(){  return mValues.keySet();}  }
class C{  public RefactoringStatus initializeReferences(IProgressMonitor monitor) throws JavaModelException, OperationCanceledException {  Assert.isNotNull(fType);  Assert.isNotNull(getNewElementName());  if (fReferences != null && (getNewElementName().equals(fCachedNewName)) && (fCachedRenameSimilarElements == getUpdateSimilarDeclarations()) && (fCachedRenamingStrategy == fRenamingStrategy))   return fCachedRefactoringStatus;  fCachedNewName=getNewElementName();  fCachedRenameSimilarElements=fUpdateSimilarElements;  fCachedRenamingStrategy=fRenamingStrategy;  fCachedRefactoringStatus=new RefactoringStatus();  try {    SearchPattern pattern=SearchPattern.createPattern(fType,IJavaSearchConstants.REFERENCES,SearchUtils.GENERICS_AGNOSTIC_MATCH_RULE);    String binaryRefsDescription=Messages.format(RefactoringCoreMessages.ReferencesInBinaryContext_ref_in_binaries_description,BasicElementLabels.getJavaElementName(fType.getElementName()));    ReferencesInBinaryContext binaryRefs=new ReferencesInBinaryContext(binaryRefsDescription);    fReferences=RefactoringSearchEngine.search(pattern,RefactoringScopeFactory.create(fType,true,false),new TypeOccurrenceCollector(fType,binaryRefs),monitor,fCachedRefactoringStatus);    binaryRefs.addErrorIfNecessary(fCachedRefactoringStatus);    fReferences=Checks.excludeCompilationUnits(fReferences,fCachedRefactoringStatus);    fPreloadedElementToName=new LinkedHashMap<IJavaElement,String>();    fPreloadedElementToSelection=new HashMap<IJavaElement,Boolean>();    final String unQualifiedTypeName=fType.getElementName();    monitor.beginTask("",fReferences.length);    if (getUpdateSimilarDeclarations()) {      RenamingNameSuggestor sugg=new RenamingNameSuggestor(fRenamingStrategy);      for (int i=0; i < fReferences.length; i++) {        final ICompilationUnit cu=fReferences[i].getCompilationUnit();        if (cu == null)         continue;        final SearchMatch[] results=fReferences[i].getSearchResults();        for (int j=0; j < results.length; j++) {          if (!(results[j] instanceof TypeReferenceMatch))           continue;          final TypeReferenceMatch match=(TypeReferenceMatch)results[j];          final List<IJavaElement> matches=new ArrayList<IJavaElement>();          if (match.getLocalElement() != null) {            if (match.getLocalElement() instanceof ILocalVariable) {              matches.add(match.getLocalElement());            }          } else {            matches.add((IJavaElement)match.getElement());          }          final IJavaElement[] others=match.getOtherElements();          if (others != null)           matches.addAll(Arrays.asList(others));          for (Iterator<IJavaElement> iter=matches.iterator(); iter.hasNext(); ) {            final IJavaElement element=iter.next();            if (!(element instanceof IMethod) && !(element instanceof IField) && !(element instanceof ILocalVariable))             continue;            if (!isInDeclaredType(match.getOffset(),element))             continue;            if (element instanceof IField) {              final IField currentField=(IField)element;              final String newFieldName=sugg.suggestNewFieldName(currentField.getJavaProject(),currentField.getElementName(),Flags.isStatic(currentField.getFlags()),unQualifiedTypeName,getNewElementName());              if (newFieldName != null)               fPreloadedElementToName.put(currentField,newFieldName);            } else             if (element instanceof IMethod) {              final IMethod currentMethod=(IMethod)element;              addMethodRename(unQualifiedTypeName,sugg,currentMethod);            } else             if (element instanceof ILocalVariable) {              final ILocalVariable currentLocal=(ILocalVariable)element;              final boolean isParameter;              if (currentLocal.isParameter()) {                addMethodRename(unQualifiedTypeName,sugg,(IMethod)currentLocal.getParent());                isParameter=true;              } else               isParameter=false;              final String newLocalName=sugg.suggestNewLocalName(currentLocal.getJavaProject(),currentLocal.getElementName(),isParameter,unQualifiedTypeName,getNewElementName());              if (newLocalName != null)               fPreloadedElementToName.put(currentLocal,newLocalName);            }          }        }        if (monitor.isCanceled())         throw new OperationCanceledException();      }    }    for (Iterator<IJavaElement> iter=fPreloadedElementToName.keySet().iterator(); iter.hasNext(); ) {      IJavaElement element=iter.next();      fPreloadedElementToSelection.put(element,Boolean.TRUE);    }    fPreloadedElementToNameDefault=new LinkedHashMap<IJavaElement,String>(fPreloadedElementToName);  } catch (  OperationCanceledException e) {    fReferences=null;    fPreloadedElementToName=null;    throw new OperationCanceledException();  }  return fCachedRefactoringStatus;}  }
class C{  public PromoteTempToFieldRefactoring(Document document,CompilationUnit cu,int selectionStart,int selectionLength){  this.document=document;  fCompilationUnitNode=cu;  Assert.isTrue(selectionStart >= 0);  Assert.isTrue(selectionLength >= 0);  fSelectionStart=selectionStart;  fSelectionLength=selectionLength;  fFieldName="";  fVisibility=Modifier.PRIVATE;  fDeclareStatic=false;  fDeclareFinal=false;  fInitializeIn=INITIALIZE_IN_METHOD;}  }
class C{  public PickAdapter(Context context,List<Item> items){  mInflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);  mItems=items;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  void resetRequiredChildren(){  ArrayList<Element> requiredChildren=this.requiredChilden;  if (requiredChildren != null) {    for (int i=requiredChildren.size() - 1; i >= 0; i--) {      requiredChildren.get(i).visited=false;    }  }}  }
class C{  private void reclassifyContextSensitive(List<Paragraph> paragraphs,int maxHeadingDistance){  for (  Paragraph p : paragraphs) {    p.setClassType(p.getContextFreeClass());  }  for (int i=0; i < paragraphs.size(); i++) {    Paragraph paragraph=paragraphs.get(i);    if (!(paragraph.isHeading() && paragraph.getClassType().equalsIgnoreCase("short"))) {      continue;    }    int j=i + 1;    int distance=0;    while (j < paragraphs.size() && distance <= maxHeadingDistance) {      if (paragraphs.get(j).getClassType().equalsIgnoreCase("good")) {        paragraph.setClassType("neargood");        break;      }      distance+=paragraphs.get(j).getRawText().length();      j+=1;    }  }  Map<Integer,String> newClasses=new LinkedHashMap<>();  for (int i=0; i < paragraphs.size(); i++) {    if (!paragraphs.get(i).getClassType().equalsIgnoreCase("short")) {      continue;    }    String prevNeighbour=getPrevNeighbourOptimized(i,paragraphs,true);    String nextNeighbour=getNextNeighbourOptimized(i,paragraphs,true);    Set<String> neighbours=new LinkedHashSet<>();    neighbours.add(prevNeighbour);    neighbours.add(nextNeighbour);    if (neighbours.size() == 1 && neighbours.contains("good")) {      newClasses.put(i,"good");    } else     if (neighbours.size() == 1 && neighbours.contains("bad")) {      newClasses.put(i,"bad");    } else     if ((prevNeighbour.equalsIgnoreCase("bad") && getPrevNeighbourOptimized(i,paragraphs,false).equalsIgnoreCase("neargood")) || (nextNeighbour.equalsIgnoreCase("bad") && getNextNeighbourOptimized(i,paragraphs,false).equalsIgnoreCase("neargood"))) {      newClasses.put(i,"good");    } else {      newClasses.put(i,"bad");    }  }  for (  Integer i : newClasses.keySet()) {    paragraphs.get(i).setClassType(newClasses.get(i));  }  for (int i=0; i < paragraphs.size(); i++) {    Paragraph paragraph=paragraphs.get(i);    if (!paragraph.getClassType().equalsIgnoreCase("neargood")) {      continue;    }    String prevNeighbour=getPrevNeighbourOptimized(i,paragraphs,true);    String nextNeighbour=getNextNeighbourOptimized(i,paragraphs,true);    if (prevNeighbour.equalsIgnoreCase("bad") && nextNeighbour.equalsIgnoreCase("bad")) {      paragraph.setClassType("bad");    } else {      paragraph.setClassType("good");    }  }  for (int i=0; i < paragraphs.size(); i++) {    Paragraph paragraph=paragraphs.get(i);    if (!(paragraph.isHeading() && paragraph.getClassType().equalsIgnoreCase("bad") && !paragraph.getContextFreeClass().equalsIgnoreCase("bad"))) {      continue;    }    int j=i + 1;    int distance=0;    while (j < paragraphs.size() && distance <= maxHeadingDistance) {      if (paragraphs.get(j).getClassType().equalsIgnoreCase("good")) {        paragraph.setClassType("good");        break;      }      distance+=paragraphs.get(j).getRawText().length();      j+=1;    }  }}  }
class C{  public int multipleLongVectorCrossover(final int min,final int max,final int start,final int subpopulation,final Individual[] inds,final EvolutionState state,final int thread){  if (!(inds[0] instanceof LongVectorIndividual))   state.output.fatal("Trying to produce long vector individuals when you can't!");  if (sources.length <= 2)   state.output.error("Only two parents specified!");  int n=typicalIndsProduced();  if (n < min)   n=min;  if (n > max)   n=max;  for (int i=0; i < parents.length; i++) {    sources[i].produce(1,1,i,subpopulation,parents,state,thread);    if (!(sources[i] instanceof BreedingPipeline))     parents[i]=(LongVectorIndividual)(parents[i].clone());  }  VectorSpecies species=(VectorSpecies)inds[0].species;  for (int i=0; i < parents[0].genomeLength(); i++) {    if (state.random[thread].nextBoolean(species.crossoverProbability)) {      for (int j=parents.length - 1; j > 0; j--) {        int swapIndex=state.random[thread].nextInt(j);        long temp=((LongVectorIndividual)parents[j]).genome[i];        ((LongVectorIndividual)parents[j]).genome[i]=((LongVectorIndividual)parents[swapIndex]).genome[i];        ((LongVectorIndividual)parents[swapIndex]).genome[i]=temp;      }    }  }  for (int i=0, q=start; i < parents.length; i++, q++) {    parents[i].evaluated=false;    if (q < inds.length) {      inds[q]=(LongVectorIndividual)parents[i];    }  }  return n;}  }
class C{  public ChiSquareTest(DataSet dataSet,double alpha){  if (alpha < 0.0 || alpha > 1.0) {    throw new IllegalArgumentException("Significance level must be in " + "[0, 1]: " + alpha);  }  this.dims=new int[dataSet.getNumColumns()];  for (int i=0; i < getDims().length; i++) {    DiscreteVariable variable=(DiscreteVariable)dataSet.getVariable(i);    this.getDims()[i]=variable.getNumCategories();  }  this.dataSet=dataSet;  this.alpha=alpha;  this.cellTable=new CellTable(null);  this.getCellTable().setMissingValue(DiscreteVariable.MISSING_VALUE);}  }
class C{  public static boolean containsElement(Object[] array,Object element){  if (array == null) {    return false;  }  for (  Object arrayEle : array) {    if (nullSafeEquals(arrayEle,element)) {      return true;    }  }  return false;}  }
class C{  public String apply(String s){  if (s == null || s.isEmpty()) {    return s;  }switch (this) {case UPPERCASE:    return s.toUpperCase();case LOWERCASE:  return s.toLowerCase();case CAPITALIZE:return Character.toUpperCase(s.charAt(0)) + (s.length() > 1 ? s.toLowerCase().substring(1) : "");default :throw new IllegalArgumentException("Unknown capitalization strategy: " + this);}}  }
class C{  public SignatureFileVerifier(ArrayList<CodeSigner[]> signerCache,ManifestDigester md,String name,byte rawBytes[]) throws IOException, CertificateException {  Object obj=null;  try {    obj=Providers.startJarVerification();    block=new PKCS7(rawBytes);    sfBytes=block.getContentInfo().getData();    certificateFactory=CertificateFactory.getInstance("X509");  }  finally {    Providers.stopJarVerification(obj);  }  this.name=name.substring(0,name.lastIndexOf(".")).toUpperCase(Locale.ENGLISH);  this.md=md;  this.signerCache=signerCache;}  }
class C{  private static SearchFilter compose(Vector<? extends SearchFilter> filters){  if (filters.size() == 0) {    return new AllowFilter();  } else   if (filters.size() == 1) {    return filters.get(0);  } else {    SearchFilter[] delegates=new SearchFilter[filters.size()];    filters.copyInto(delegates);    return new CompositeFilter(delegates);  }}  }
class C{  protected byte[] assertEncodeDecode(final IGangliaMetadataMessage decl,final IGangliaMessage expected){  if (expected == null)   throw new IllegalArgumentException();  final XDROutputBuffer xdr=new XDROutputBuffer(IGangliaDefaults.BUFFER_SIZE);  final GangliaMessageEncoder31 messageEncoder=new GangliaMessageEncoder31();  final GangliaMessageDecoder31 messageDecoder=new GangliaMessageDecoder31();  if (expected.isMetricRequest()) {    messageEncoder.writeRequest(xdr,(IGangliaRequestMessage)expected);  } else   if (expected.isMetricMetadata()) {    messageEncoder.writeMetadata(xdr,(IGangliaMetadataMessage)expected);  } else   if (expected.isMetricValue()) {    if (decl == null)     throw new IllegalArgumentException("Declaration required for metric value record");    messageEncoder.writeMetric(xdr,decl,(IGangliaMetricMessage)expected);  } else {    throw new AssertionError();  }  final IGangliaMessage actual=messageDecoder.decode(xdr.getBuffer(),0,xdr.getLength());  assertEquals("messages not equal()",expected,actual);  final byte[] actualData=new byte[xdr.getLength()];  System.arraycopy(xdr.getBuffer(),0,actualData,0,actualData.length);  return actualData;}  }
class C{  private Location createCoarseLocked(Location fine){  Location coarse=new Location(fine);  coarse.removeBearing();  coarse.removeSpeed();  coarse.removeAltitude();  coarse.setExtras(null);  double lat=coarse.getLatitude();  double lon=coarse.getLongitude();  lat=wrapLatitude(lat);  lon=wrapLongitude(lon);  updateRandomOffsetLocked();  lon+=metersToDegreesLongitude(mOffsetLongitudeMeters,lat);  lat+=metersToDegreesLatitude(mOffsetLatitudeMeters);  if (D)   Log.d(TAG,String.format("applied offset of %.0f, %.0f (meters)",mOffsetLongitudeMeters,mOffsetLatitudeMeters));  lat=wrapLatitude(lat);  lon=wrapLongitude(lon);  double latGranularity=metersToDegreesLatitude(mGridSizeInMeters);  lat=Math.round(lat / latGranularity) * latGranularity;  double lonGranularity=metersToDegreesLongitude(mGridSizeInMeters,lat);  lon=Math.round(lon / lonGranularity) * lonGranularity;  lat=wrapLatitude(lat);  lon=wrapLongitude(lon);  coarse.setLatitude(lat);  coarse.setLongitude(lon);  coarse.setAccuracy(Math.max(mAccuracyInMeters,coarse.getAccuracy()));  if (D)   Log.d(TAG,"fudged " + fine + " to "+ coarse);  return coarse;}  }
class C{  public static String toMonitorString(jmri.jmrix.Message m){  String val="???";  int len=m.getNumDataElements();  boolean goodSync=true;  boolean goodCheckSum=true;  int sum=0;  String cmd;  String stat;  String hCode;  String bCode;  String dev;switch (len) {case 7:    for (int i=0; i < 6; i++) {      if ((m.getElement(i) & 0xFF) != 0xFF) {        goodSync=false;      }    }  val=statusToText(m.getElement(6));break;case 12:for (int i=0; i < 6; i++) {if ((m.getElement(i) & 0xFF) != 0xFF) {  goodSync=false;}}for (int i=7; i < 11; i++) {sum=(sum + (m.getElement(i) & 0xFF)) & 0xFF;}stat=statusToText(m.getElement(6));cmd=commandToText(m.getElement(7) & 0x0F,-1);hCode=houseCodeToText((m.getElement(7) >> 4) & 0x0F);dev=deviceToText(m.getElement(8),m.getElement(9));bCode=houseCodeToText((m.getElement(10) >> 4) & 0x0F);if (sum != (m.getElement(11) & 0xFF)) {goodCheckSum=false;}val="Cmd Echo: " + cmd + " stat: "+ stat+ " House: "+ hCode+ " Device:"+ dev+ " base: "+ bCode;if (!goodSync) {val=val + " BAD SYNC";}if (!goodCheckSum) {val=val + " BAD CHECKSUM: " + (m.getElement(11) & 0xFF)+ " vs "+ sum;}break;case 22:for (int i=0; i < 16; i++) {if ((m.getElement(i) & 0xFF) != 0xFF) {goodSync=false;}}for (int i=17; i < 21; i++) {sum=(sum + (m.getElement(i) & 0xFF)) & 0xFF;}cmd=commandToText((m.getElement(17) & 0x0F),((m.getElement(17) & 0xF0) >> 4));hCode=houseCodeToText((m.getElement(18) >> 4) & 0x0F);dev=deviceToText(m.getElement(19),m.getElement(20));if (sum != (m.getElement(21) & 0xFF)) {goodCheckSum=false;}val=cmd + " House: " + hCode+ " Device:"+ dev;if (!goodSync) {val=val + " BAD SYNC";}if (!goodCheckSum) {val=val + " BAD CHECKSUM: " + (m.getElement(21) & 0xFF)+ " vs "+ sum;}break;default :val="UNK " + m.toString();break;}return val;}  }
class C{  public BytesReference doc(){  return doc;}  }
class C{  private void createAttributeMaps(Element adStore,IIdentityStoreData store){  Map<String,String> attrPairs=store.getExtendedIdentityStoreData().getAttributeMap();  for (  Map.Entry<String,String> attrPair : attrPairs.entrySet()) {    Element attrMapEle=doc.createElement(SAMLNames.ATTRIBUTEMAP);    attrMapEle.setAttribute(SAMLNames.IDNAME,attrPair.getKey());    attrMapEle.setAttribute(SAMLNames.IDVALUE,attrPair.getValue());    adStore.appendChild(attrMapEle);  }}  }
class C{  @Override public Request<String> logs(ProjectReference projectReference,long taskId){  List<DummyBuilderStatus> statuses=availableBuilderStatuses.get(projectReference.name());  if (statuses != null && !statuses.isEmpty()) {    for (    DummyBuilderStatus builderStatus : statuses) {      if (taskId == builderStatus.taskId()) {        return new DummyRequest<>(builderStatus.getLog());      }    }  }  return new DummyRequest<>(null);}  }
class C{  protected void delegateFocus(MouseEvent e){  if (comboBox.isEditable()) {    Component comp=comboBox.getEditor().getEditorComponent();    if ((!(comp instanceof JComponent)) || ((JComponent)comp).isRequestFocusEnabled()) {      comp.requestFocus();    }  } else   if (comboBox.isRequestFocusEnabled()) {    comboBox.requestFocus();  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void testDoTag() throws Exception {  System.out.println("doTag");  ForXmlAttributeTag instance=new ForXmlAttributeTag();  String value="<div>";  String expected="&lt;div>";  instance.setJspContext(_pageContext);  instance.setValue(value);  instance.doTag();  String results=_response.getContentAsString();  assertEquals(expected,results);}  }
class C{  private void addDatasetsToPlotStates(){  if (datasetList.isEmpty()) {    throw new ParserException("You must specify at least one dataset.");  }  int actualAutoDatasetNr=0;  for (  PlotState plotState : parserResult.getPlotStateList()) {    actualAutoDatasetNr=addDataset(plotState,actualAutoDatasetNr);    for (    PlotState subPlotState : plotState.getSubplots()) {      log.info("Add dataset for subplot");      actualAutoDatasetNr=addDataset(subPlotState,actualAutoDatasetNr);    }  }}  }
class C{  public BugExample(BugObject sample){  oredCriteria=new ArrayList<Criteria>();  Criteria criteria=this.or();  if (sample.getCompanyId() != null) {    criteria.andCompanyIdEqualTo(sample.getCompanyId());  }  if (sample.getProjectId() != null) {    criteria.andProjectIdEqualTo(sample.getProjectId());  }  if (sample.getCreatorId() != null) {    criteria.andCreatorIdEqualTo(sample.getCreatorId());  }  if (sample.getCreatorName() != null) {    criteria.andCreatorNameEqualTo(sample.getCreatorName());  }  if (sample.getTitle() != null) {    criteria.andTitleEqualTo(sample.getTitle());  }  if (sample.getDescription() != null) {    criteria.andDescriptionEqualTo(sample.getDescription());  }  if (sample.getCreatedTime() != null) {    criteria.andCreatedTimeEqualTo(sample.getCreatedTime());  }  if (sample.getCompletedTime() != null) {    criteria.andCompletedTimeEqualTo(sample.getCompletedTime());  }  if (sample.getStatus() != null) {    criteria.andStatusEqualTo(sample.getStatus());  }  if (sample.getPriority() != null) {    criteria.andPriorityEqualTo(sample.getPriority());  }  if (sample.getAssigneeId() != null) {    criteria.andAssigneeIdEqualTo(sample.getAssigneeId());  }  if (sample.getDeleted() != null) {    criteria.andDeletedEqualTo(sample.getDeleted());  }  if (sample.getDueTime() != null) {    criteria.andDueTimeEqualTo(sample.getDueTime());  }  if (sample.getIdInProject() != null) {    criteria.andIdInProjectEqualTo(sample.getIdInProject());  }  if (sample.getCreatorAvatar() != null) {    criteria.andCreatorAvatarEqualTo(sample.getCreatorAvatar());  }}  }
class C{  private void addExposedTypes(TypeVariable type,Class<?> cause){  if (done(type)) {    return;  }  visit(type);  for (  Type bound : type.getBounds()) {    logger.debug("Adding exposed types from {}, which is a type bound on {}",bound,type);    addExposedTypes(bound,cause);  }}  }
class C{  public final Iterator<PatternMatcher> pathsIterator(){  return mDataPaths != null ? mDataPaths.iterator() : null;}  }
class C{  public Uniform(){  super();}  }
class C{  public void translate(float x,float y){  checkMatrix(2);  matrix.translate(x,y);}  }
class C{  protected Collection<String> formatEndpoints(Collection<String> endpoints){  List<String> eps=new ArrayList<String>();  for (  String endpoint : endpoints) {    String ep=formatWWN(endpoint);    eps.add(ep);  }  return eps;}  }
class C{  void recordAccess(HashMap m){}  }
class C{  public boolean isComplexInstruction(){  return false;}  }
class C{  public TungstenProperties subset(String prefix,boolean removePrefix,boolean removeProps){  TungstenProperties tp=new TungstenProperties();  Set<String> prefixKeys=keyNames(prefix);  int nameIndex=0;  if (removePrefix)   nameIndex=prefix.length();  for (  String key : prefixKeys) {    String newKey=key.substring(nameIndex);    if (newKey.length() > 0)     tp.setObject(newKey,getObject(key));    if (removeProps)     remove(key);  }  return tp;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.INLINE_ASSOCIATION_END___MULTIPLICITY_1:    getMultiplicity_1().clear();  getMultiplicity_1().addAll((Collection<? extends Multiplicity_>)newValue);return;case UmplePackage.INLINE_ASSOCIATION_END___IS_SORTED_1:getIsSorted_1().clear();getIsSorted_1().addAll((Collection<? extends IsSorted_>)newValue);return;case UmplePackage.INLINE_ASSOCIATION_END___ROLE_NAME_1:setRoleName_1((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  @After public void tearDown(){  webClient.closeAllWindows();}  }
class C{  public void logMessage(SIPMessage message,String from,String to,String status,boolean sender){  logMessage(message,from,to,status,sender,System.currentTimeMillis());}  }
class C{  public PlatformCacheIterator localIterator(int peekModes){  CachePeekMode[] peekModes0=PlatformUtils.decodeCachePeekModes(peekModes);  Iterator<Cache.Entry> iter=cache.localEntries(peekModes0).iterator();  return new PlatformCacheIterator(platformCtx,iter);}  }
class C{  public double nextDouble(double mean,double standardDeviation){  if (cacheFilled && this.mean == mean && this.standardDeviation == standardDeviation) {    cacheFilled=false;    return cache;  }  ;  double x, y, r, z;  do {    x=2.0 * randomGenerator.raw() - 1.0;    y=2.0 * randomGenerator.raw() - 1.0;    r=x * x + y * y;  } while (r >= 1.0);  z=Math.sqrt(-2.0 * Math.log(r) / r);  cache=mean + standardDeviation * x * z;  cacheFilled=true;  return mean + standardDeviation * y * z;}  }
class C{  public String updateAccessRecords(){  if (isManual())   return "-";  String roleClientOrgUser=getAD_Role_ID() + "," + getAD_Client_ID()+ ","+ getAD_Org_ID()+ ",'Y', SysDate,"+ getUpdatedBy()+ ", SysDate,"+ getUpdatedBy()+ ",'Y' ";  String sqlWindow="INSERT INTO AD_Window_Access " + "(AD_Window_ID, AD_Role_ID," + " AD_Client_ID,AD_Org_ID,IsActive,Created,CreatedBy,Updated,UpdatedBy,IsReadWrite) "+ "SELECT DISTINCT w.AD_Window_ID, " + roleClientOrgUser + "FROM AD_Window w"+ " INNER JOIN AD_Tab t ON (w.AD_Window_ID=t.AD_Window_ID)"+ " INNER JOIN AD_Table tt ON (t.AD_Table_ID=tt.AD_Table_ID) "+ "WHERE t.SeqNo=(SELECT MIN(SeqNo) FROM AD_Tab xt "+ "WHERE xt.AD_Window_ID=w.AD_Window_ID)"+ "AND tt.AccessLevel IN ";  String sqlProcess="INSERT INTO AD_Process_Access " + "(AD_Process_ID, AD_Role_ID," + " AD_Client_ID,AD_Org_ID,IsActive,Created,CreatedBy,Updated,UpdatedBy,IsReadWrite) "+ "SELECT DISTINCT p.AD_Process_ID, " + roleClientOrgUser + "FROM AD_Process p "+ "WHERE AccessLevel IN ";  String sqlForm="INSERT INTO AD_Form_Access " + "(AD_Form_ID, AD_Role_ID," + " AD_Client_ID,AD_Org_ID,IsActive,Created,CreatedBy,Updated,UpdatedBy,IsReadWrite) "+ "SELECT f.AD_Form_ID, " + roleClientOrgUser + "FROM AD_Form f "+ "WHERE AccessLevel IN ";  String sqlBrowse="INSERT INTO AD_Browse_Access " + "(AD_Browse_ID, AD_Role_ID," + " AD_Client_ID,AD_Org_ID,IsActive,Created,CreatedBy,Updated,UpdatedBy,IsReadWrite) "+ "SELECT b.AD_Browse_ID, " + roleClientOrgUser + "FROM AD_Browse b "+ "WHERE AccessLevel IN ";  String sqlWorkflow="INSERT INTO AD_WorkFlow_Access " + "(AD_WorkFlow_ID, AD_Role_ID," + " AD_Client_ID,AD_Org_ID,IsActive,Created,CreatedBy,Updated,UpdatedBy,IsReadWrite) "+ "SELECT w.AD_WorkFlow_ID, " + roleClientOrgUser + "FROM AD_WorkFlow w "+ "WHERE AccessLevel IN ";  String sqlDocAction="INSERT INTO AD_Document_Action_Access " + "(AD_Client_ID,AD_Org_ID,IsActive,Created,CreatedBy,Updated,UpdatedBy," + "C_DocType_ID , AD_Ref_List_ID, AD_Role_ID) "+ "(SELECT " + getAD_Client_ID() + ",0,'Y', SysDate,"+ getUpdatedBy()+ ", SysDate,"+ getUpdatedBy()+ ", doctype.C_DocType_ID, action.AD_Ref_List_ID, rol.AD_Role_ID "+ "FROM AD_Client client "+ "INNER JOIN C_DocType doctype ON (doctype.AD_Client_ID=client.AD_Client_ID) "+ "INNER JOIN AD_Ref_List action ON (action.AD_Reference_ID=135) "+ "INNER JOIN AD_Role rol ON (rol.AD_Client_ID=client.AD_Client_ID "+ "AND rol.AD_Role_ID="+ getAD_Role_ID()+ ") )";  String roleAccessLevel=null;  String roleAccessLevelWin=null;  if (USERLEVEL_System.equals(getUserLevel()))   roleAccessLevel="('4','7','6')"; else   if (USERLEVEL_Client.equals(getUserLevel()))   roleAccessLevel="('7','6','3','2')"; else   if (USERLEVEL_ClientPlusOrganization.equals(getUserLevel()))   roleAccessLevel="('7','6','3','2','1')"; else {    roleAccessLevel="('3','1','7')";    roleAccessLevelWin=roleAccessLevel + " AND w.Name NOT LIKE '%(all)%'";  }  if (roleAccessLevelWin == null)   roleAccessLevelWin=roleAccessLevel;  String whereDel=" WHERE AD_Role_ID=" + getAD_Role_ID();  int winDel=DB.executeUpdate("DELETE FROM AD_Window_Access" + whereDel,get_TrxName());  int win=DB.executeUpdate(sqlWindow + roleAccessLevelWin,get_TrxName());  int procDel=DB.executeUpdate("DELETE FROM AD_Process_Access" + whereDel,get_TrxName());  int proc=DB.executeUpdate(sqlProcess + roleAccessLevel,get_TrxName());  int formDel=DB.executeUpdate("DELETE FROM AD_Form_Access" + whereDel,get_TrxName());  int form=DB.executeUpdate(sqlForm + roleAccessLevel,get_TrxName());  int browseDel=DB.executeUpdate("DELETE FROM AD_Browse_Access" + whereDel,get_TrxName());  int browse=DB.executeUpdate(sqlBrowse + roleAccessLevel,get_TrxName());  int wfDel=DB.executeUpdate("DELETE FROM AD_WorkFlow_Access" + whereDel,get_TrxName());  int wf=DB.executeUpdate(sqlWorkflow + roleAccessLevel,get_TrxName());  int docactDel=DB.executeUpdate("DELETE FROM AD_Document_Action_Access" + whereDel,get_TrxName());  int docact=DB.executeUpdate(sqlDocAction,get_TrxName());  log.fine("AD_Window_ID=" + winDel + "+"+ win+ ", AD_Process_ID="+ procDel+ "+"+ proc+ ", AD_Form_ID="+ formDel+ "+"+ form+ ", AD_Browse_ID="+ browseDel+ "+"+ browse+ ", AD_Workflow_ID="+ wfDel+ "+"+ wf+ ", AD_Document_Action_Access="+ docactDel+ "+"+ docact);  loadAccess(true);  return "@AD_Window_ID@ #" + win + " -  @AD_Process_ID@ #"+ proc+ " -  @AD_Form_ID@ #"+ form+ " -  @AD_Browse_ID@ #"+ browse+ " -  @AD_Workflow_ID@ #"+ wf+ " -  @DocAction@ #"+ docact;}  }
class C{  List<VPlexMigrationInfo> commitMigrations(String virtualVolumeName,List<String> migrationNames,boolean cleanup,boolean remove,boolean rename) throws VPlexApiException {  s_logger.info("Committing migrations {}",migrationNames);  VPlexApiDiscoveryManager discoveryMgr=_vplexApiClient.getDiscoveryManager();  List<VPlexMigrationInfo> migrationInfoList=discoveryMgr.findMigrations(migrationNames);  StringBuilder migrationArgBuilder=new StringBuilder();  for (  VPlexMigrationInfo migrationInfo : migrationInfoList) {    if (!VPlexApiConstants.MIGRATION_COMPLETE.equals(migrationInfo.getStatus())) {      throw VPlexApiException.exceptions.cantCommitedMigrationNotCompletedSuccessfully(migrationInfo.getName());    }    if (migrationArgBuilder.length() != 0) {      migrationArgBuilder.append(",");    }    migrationArgBuilder.append(migrationInfo.getPath());  }  URI requestURI=_vplexApiClient.getBaseURI().resolve(VPlexApiConstants.URI_COMMIT_MIGRATIONS);  s_logger.info("Commit migrations URI is {}",requestURI.toString());  ClientResponse response=null;  try {    s_logger.info("Committing migrations");    Map<String,String> argsMap=new HashMap<String,String>();    argsMap.put(VPlexApiConstants.ARG_DASH_M,migrationArgBuilder.toString());    JSONObject postDataObject=VPlexApiUtils.createPostData(argsMap,true);    s_logger.info("Commit migrations POST data is {}",postDataObject.toString());    response=_vplexApiClient.post(requestURI,postDataObject.toString());    String responseStr=response.getEntity(String.class);    s_logger.info("Commit migrations response is {}",responseStr);    if (response.getStatus() != VPlexApiConstants.SUCCESS_STATUS) {      if (response.getStatus() == VPlexApiConstants.ASYNC_STATUS) {        s_logger.info("Commit migrations is completing asynchronously");        _vplexApiClient.waitForCompletion(response,VPlexApiClient.getMaxMigrationAsyncPollingRetries());      } else {        String cause=VPlexApiUtils.getCauseOfFailureFromResponse(responseStr);        throw VPlexApiException.exceptions.commitMigrationsFailureStatus(migrationNames,String.valueOf(response.getStatus()),cause);      }    }    s_logger.info("Successfully committed migrations {}",migrationNames);    if (cleanup) {      try {        cleanCommittedMigrations(migrationArgBuilder.toString());      } catch (      Exception e) {        s_logger.error("Error cleaning migrations after successful commit: {}",e.getMessage(),e);      }    }    if (remove) {      try {        removeCommittedOrCanceledMigrations(migrationArgBuilder.toString());      } catch (      Exception e) {        s_logger.error("Error removing migration records after successful commit: {}",e.getMessage(),e);      }    }    try {      updateVirtualVolumeInfoAfterCommit(virtualVolumeName,migrationInfoList,rename);    } catch (    Exception e) {      s_logger.error("Error updating virtual volume after successful commit: {}",e.getMessage(),e);    }    return migrationInfoList;  } catch (  VPlexApiException vae) {    throw vae;  }catch (  Exception e) {    throw VPlexApiException.exceptions.failedCommitMigrations(migrationNames,e);  } finally {    if (response != null) {      response.close();    }  }}  }
class C{  @Override public Model learn(ExampleSet exampleSet) throws OperatorException {  Kernel kernel=Kernel.createKernel(this);  RandomGenerator random=RandomGenerator.getRandomGenerator(this);  Attribute label=exampleSet.getAttributes().getLabel();  if (label.isNominal()) {    if (label.getMapping().size() == 2) {      ExampleSet holdOutSet=null;      ExampleSet trainingSet=exampleSet;      double holdOutSetRatio=getParameterAsDouble(PARAMETER_HOLD_OUT_SET_RATIO);      if (!Tools.isZero(holdOutSetRatio)) {        SplittedExampleSet splittedExampleSet=new SplittedExampleSet(exampleSet,new double[]{1.0d - holdOutSetRatio,holdOutSetRatio},SplittedExampleSet.SHUFFLED_SAMPLING,getParameterAsBoolean(RandomGenerator.PARAMETER_USE_LOCAL_RANDOM_SEED),getParameterAsInt(RandomGenerator.PARAMETER_LOCAL_RANDOM_SEED));        splittedExampleSet.selectSingleSubset(0);        trainingSet=splittedExampleSet.clone();        splittedExampleSet.selectAllSubsetsBut(0);        holdOutSet=splittedExampleSet.clone();      }      optimization=new ClassificationEvoOptimization(trainingSet,kernel,getParameterAsDouble(PARAMETER_C),getParameterAsInt(PARAMETER_START_POPULATION_TYPE),getParameterAsInt(PARAMETER_MAX_GENERATIONS),getParameterAsInt(PARAMETER_GENERATIONS_WITHOUT_IMPROVAL),getParameterAsInt(PARAMETER_POPULATION_SIZE),getParameterAsInt(PARAMETER_SELECTION_TYPE),getParameterAsDouble(PARAMETER_TOURNAMENT_FRACTION),getParameterAsBoolean(PARAMETER_KEEP_BEST),getParameterAsInt(PARAMETER_MUTATION_TYPE),getParameterAsDouble(PARAMETER_CROSSOVER_PROB),getParameterAsBoolean(PARAMETER_SHOW_CONVERGENCE_PLOT),getParameterAsBoolean(PARAMETER_SHOW_POPULATION_PLOT),holdOutSet,random,this,this);    } else {      throw new UserError(this,114,getName(),label.getName());    }  } else {    optimization=new RegressionEvoOptimization(exampleSet,kernel,getParameterAsDouble(PARAMETER_C),getParameterAsDouble(PARAMETER_EPSILON),getParameterAsInt(PARAMETER_START_POPULATION_TYPE),getParameterAsInt(PARAMETER_MAX_GENERATIONS),getParameterAsInt(PARAMETER_GENERATIONS_WITHOUT_IMPROVAL),getParameterAsInt(PARAMETER_POPULATION_SIZE),getParameterAsInt(PARAMETER_SELECTION_TYPE),getParameterAsDouble(PARAMETER_TOURNAMENT_FRACTION),getParameterAsBoolean(PARAMETER_KEEP_BEST),getParameterAsInt(PARAMETER_MUTATION_TYPE),getParameterAsDouble(PARAMETER_CROSSOVER_PROB),getParameterAsBoolean(PARAMETER_SHOW_CONVERGENCE_PLOT),getParameterAsBoolean(PARAMETER_SHOW_POPULATION_PLOT),random,this,this);  }  return optimization.train();}  }
class C{  public SimpleProperties(Object o,boolean allowProxy){  this(o,true,false,true,allowProxy);}  }
class C{  private Map<String,Set<TestCase>> determineDuplicateNames(){  Map<String,Set<TestCase>> testMap=new LinkedHashMap<>();  for (  Map.Entry<TestCase,String> entry : testToName.entrySet()) {    String methodName=entry.getValue();    if (!testMap.containsKey(methodName)) {      Set<TestCase> tests=new LinkedHashSet<>();      tests.add(entry.getKey());      testMap.put(methodName,tests);    } else {      testMap.get(methodName).add(entry.getKey());    }  }  testMap.entrySet().removeIf(null);  return testMap;}  }
class C{  protected Path createPath(){  Path path=new Path();  path.setFollowTerrain(true);  path.setPathType(AVKey.GREAT_CIRCLE);  path.setAltitudeMode(WorldWind.CLAMP_TO_GROUND);  path.setDelegateOwner(this);  path.setAttributes(this.getActiveShapeAttributes());  return path;}  }
class C{  public static void completeBackgroundTasks(long timeoutMillis){  boolean fifoEmpty=false;  boolean asyncThreadsCompleted=false;  long absTimeout=System.currentTimeMillis() + timeoutMillis;  while (System.currentTimeMillis() < absTimeout) {synchronized (fifo) {      fifoEmpty=fifo.size() == 0;    }synchronized (JGoogleAnalyticsTracker.class) {      asyncThreadsCompleted=asyncThreadsRunning == 0;    }    if (fifoEmpty && asyncThreadsCompleted)     break;    try {      Thread.sleep(100);    } catch (    InterruptedException e) {      break;    }  }}  }
class C{  protected List refreshAngleTicks(){  List ticks=new ArrayList();  for (double currentTickVal=0.0; currentTickVal < 360.0; currentTickVal+=this.angleTickUnit.getSize()) {    TextAnchor ta=calculateTextAnchor(currentTickVal);    NumberTick tick=new NumberTick(new Double(currentTickVal),this.angleTickUnit.valueToString(currentTickVal),ta,TextAnchor.CENTER,0.0);    ticks.add(tick);  }  return ticks;}  }
class C{  @Deprecated public SimpleTriggerImpl(String name,String group,Date startTime){  this(name,group,startTime,null,0,0);}  }
class C{  public void endVisit(ConstructorInvocation node){}  }
class C{  public TextQuery(String type,String txt){  setType(type);  setText(txt);}  }
class C{  private void Calculate3DPosition(CarouselItemView child,int diameter,float angleOffset){  angleOffset=angleOffset * (float)(Math.PI / 180.0f);  float x=-(float)(diameter / 2 * android.util.FloatMath.sin(angleOffset)) + diameter / 2 - child.getWidth() / 2;  float z=diameter / 2 * (1.0f - (float)android.util.FloatMath.cos(angleOffset));  float y=-getHeight() / 2 + (float)(z * android.util.FloatMath.sin(mTheta));  child.setItemX(x);  child.setItemZ(z);  child.setItemY(y);}  }
class C{  public TypedRegionImpl(int offset,int length,String type){  super(offset,length);  fType=type;}  }
class C{  public static int generate(int crc,int value){  return next(crc,value);}  }
class C{  @Override protected void selectScenarioAndDest(int scenarioIdx,int destIdx){  ExtendableMap map=new ExtendableMap();  MapEnvironment env=new MapEnvironment(map);  String agentLoc=null;switch (scenarioIdx) {case 0:    SimplifiedRoadMapOfPartOfRomania.initMap(map);  agentLoc=SimplifiedRoadMapOfPartOfRomania.ARAD;break;case 1:SimplifiedRoadMapOfPartOfRomania.initMap(map);agentLoc=SimplifiedRoadMapOfPartOfRomania.LUGOJ;break;case 2:SimplifiedRoadMapOfPartOfRomania.initMap(map);agentLoc=SimplifiedRoadMapOfPartOfRomania.FAGARAS;break;case 3:SimplifiedRoadMapOfAustralia.initMap(map);agentLoc=SimplifiedRoadMapOfAustralia.SYDNEY;break;case 4:SimplifiedRoadMapOfAustralia.initMap(map);agentLoc=map.randomlyGenerateDestination();break;}scenario=new Scenario(env,map,agentLoc);destinations=new ArrayList<String>();if (scenarioIdx < 3) {switch (destIdx) {case 0:destinations.add(SimplifiedRoadMapOfPartOfRomania.BUCHAREST);break;case 1:destinations.add(SimplifiedRoadMapOfPartOfRomania.EFORIE);break;case 2:destinations.add(SimplifiedRoadMapOfPartOfRomania.NEAMT);break;case 3:destinations.add(map.randomlyGenerateDestination());break;}} else {switch (destIdx) {case 0:destinations.add(SimplifiedRoadMapOfAustralia.PORT_HEDLAND);break;case 1:destinations.add(SimplifiedRoadMapOfAustralia.ALBANY);break;case 2:destinations.add(SimplifiedRoadMapOfAustralia.MELBOURNE);break;case 3:destinations.add(map.randomlyGenerateDestination());break;}}}  }
class C{  public boolean removeCategory(Category category){  return super.removeElement(category);}  }
class C{  @Override public boolean isScreenOn() throws RemoteException {  return device.isScreenOn();}  }
class C{  @Override protected DeLiCluNode createNewDirectoryNode(){  return new DeLiCluNode(dirCapacity,false);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.GREATER_OP___GREATER_OP_1:    setGreaterOp_1((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public KeyManagementException(){  super();}  }
class C{  public Builder from(final TextPosition from){  this.from=from;  return this;}  }
class C{  public HalfFloatPoint(String name,float... point){  super(name,pack(point),getType(point.length));}  }
class C{  @Override public void propertyChange(PropertyChangeEvent event){  landscapePath=null;  String[] list=new String[]{};  configList.setListData(list);  contentArea.revalidate();  if (event.getPropertyName().equals(JFileChooser.DIRECTORY_CHANGED_PROPERTY)) {    File f=(File)event.getNewValue();    if (f == null) {      return;    }    landscapePath=f.getAbsolutePath();    lastLandscape=landscapePath;    File idFile=new File(f,".landscape");    if (idFile.exists()) {      configFilePath=new String[]{landscapePath};      lastPath=fileChooser.getCurrentDirectory().getAbsolutePath();      close();    }    return;  }  if (!event.getPropertyName().equals(JFileChooser.SELECTED_FILE_CHANGED_PROPERTY)) {    return;  }  File f=(File)event.getNewValue();  if (f == null) {    return;  }  File idFile=new File(f,".landscape");  if (!idFile.exists()) {    return;  }  if (newButton != null) {    newButton.setEnabled(true);  }  landscapePath=f.getAbsolutePath();  lastLandscape=landscapePath;  File dertFile=new File(f,"dert");  if (!dertFile.exists()) {    configList.setListData(list);    return;  }  dertFile=new File(dertFile,"config");  if (dertFile.exists()) {    list=dertFile.list();    if (list == null) {      list=new String[0];    }    fileList=new String[list.length];    for (int i=0; i < list.length; ++i) {      fileList[i]=new File(dertFile,list[i]).getAbsolutePath();      list[i]=StringUtil.getLabelFromFilePath(list[i]);    }    configList.setListData(list);  }  okButton.setEnabled(false);  contentArea.revalidate();}  }
class C{  private SipRequest createInviteRequest(String content) throws PayloadException {  try {    SipRequest invite=SipMessageFactory.createInvite(getDialogPath(),getFeatureTags(),getAcceptContactTags(),content);    final String subject=getSubject();    if (subject != null) {      invite.addHeader(SubjectHeader.NAME,subject);    }    invite.addHeader(ChatUtils.HEADER_CONTRIBUTION_ID,getContributionID());    return invite;  } catch (  ParseException e) {    throw new PayloadException("Failed to create invite request!",e);  }}  }
class C{  ServiceConfig(PathMapping pathMapping,Service<?,?> service,@Nullable String loggerName){  this.pathMapping=requireNonNull(pathMapping,"pathMapping");  this.service=requireNonNull(service,"service");  this.loggerName=loggerName != null ? validateLoggerName(loggerName,"loggerName") : null;}  }
class C{  public void enableCurlLogging(String name,int level){  if (name == null) {    throw new NullPointerException("name");  }  if (level < Log.VERBOSE || level > Log.ASSERT) {    throw new IllegalArgumentException("Level is out of range [" + Log.VERBOSE + ".."+ Log.ASSERT+ "]");  }  curlConfiguration=new LoggingConfiguration(name,level);}  }
class C{  public boolean isBase64(String value){  return (BASE64_PATTERN.matcher(value).matches() && ((value.length() % 4) == 0));}  }
class C{  public ServiceChangedException(){  super();}  }
class C{  public static byte[] decode(byte[] data){  int len=data.length / 4 * 3;  ByteArrayOutputStream bOut=new ByteArrayOutputStream(len);  try {    encoder.decode(data,0,data.length,bOut);  } catch (  Exception e) {    throw new DecoderException("unable to decode base64 data: " + e.getMessage(),e);  }  return bOut.toByteArray();}  }
class C{  public boolean hasNext(){  return internal.hasNext();}  }
class C{  public TransferAnimation(View view){  this.view=view;  destinationView=null;  interpolator=new AccelerateDecelerateInterpolator();  duration=DURATION_LONG;  listener=null;}  }
class C{  protected void updateChart(double[] dataPoint){  if (m_previousY[0] == -1) {    int iw=m_plotPanel.getWidth();    int ih=m_plotPanel.getHeight();    m_osi=m_plotPanel.createImage(iw,ih);    Graphics m=m_osi.getGraphics();    m.setColor(m_BackgroundColor);    m.fillRect(0,0,iw,ih);    m_previousY[0]=convertToPanelY(0);    m_iheight=ih;    m_iwidth=iw;  }  if (dataPoint.length - 1 != m_previousY.length) {    m_previousY=new double[dataPoint.length - 1];    for (int i=0; i < dataPoint.length - 1; i++) {      m_previousY[i]=convertToPanelY(0);    }  }  Graphics osg=m_osi.getGraphics();  Graphics g=m_plotPanel.getGraphics();  osg.copyArea(m_refreshWidth,0,m_iwidth - m_refreshWidth,m_iheight,-m_refreshWidth,0);  osg.setColor(m_BackgroundColor);  osg.fillRect(m_iwidth - m_refreshWidth,0,m_iwidth,m_iheight);  if (m_yScaleUpdate) {    String maxVal=numToString(m_oldMax);    String minVal=numToString(m_oldMin);    String midVal=numToString((m_oldMax - m_oldMin) / 2.0);    if (m_labelMetrics == null) {      m_labelMetrics=g.getFontMetrics(m_labelFont);    }    osg.setFont(m_labelFont);    int wmx=m_labelMetrics.stringWidth(maxVal);    int wmn=m_labelMetrics.stringWidth(minVal);    int wmd=m_labelMetrics.stringWidth(midVal);    int hf=m_labelMetrics.getAscent();    osg.setColor(m_colorList[m_colorList.length - 1]);    osg.drawString(maxVal,m_iwidth - wmx,hf - 2);    osg.drawString(midVal,m_iwidth - wmd,(m_iheight / 2) + (hf / 2));    osg.drawString(minVal,m_iwidth - wmn,m_iheight - 1);    m_yScaleUpdate=false;  }  double pos;  for (int i=0; i < dataPoint.length - 1; i++) {    osg.setColor(m_colorList[(i % m_colorList.length)]);    pos=convertToPanelY(dataPoint[i]);    osg.drawLine(m_iwidth - m_refreshWidth,(int)m_previousY[i],m_iwidth - 1,(int)pos);    m_previousY[i]=pos;    if (dataPoint[dataPoint.length - 1] % m_xValFreq == 0) {      String val=numToString(dataPoint[i]);      if (m_labelMetrics == null) {        m_labelMetrics=g.getFontMetrics(m_labelFont);      }      int hf=m_labelMetrics.getAscent();      if (pos - hf < 0) {        pos+=hf;      }      int w=m_labelMetrics.stringWidth(val);      osg.setFont(m_labelFont);      osg.drawString(val,m_iwidth - w,(int)pos);    }  }  if (dataPoint[dataPoint.length - 1] % m_xValFreq == 0) {    String xVal="" + (int)dataPoint[dataPoint.length - 1];    osg.setColor(m_colorList[m_colorList.length - 1]);    int w=m_labelMetrics.stringWidth(xVal);    osg.setFont(m_labelFont);    osg.drawString(xVal,m_iwidth - w,m_iheight - 1);  }  g.drawImage(m_osi,0,0,m_plotPanel);}  }
class C{  @Deprecated public EmailListRecipientEntry addRecipientToEmailList(String recipientAddress,String emailList) throws AppsForYourDomainException, ServiceException, IOException {  LOGGER.log(Level.INFO,"Adding '" + recipientAddress + "' to emailList '"+ emailList+ "'.");  EmailListRecipientEntry emailListRecipientEntry=new EmailListRecipientEntry();  Who who=new Who();  who.setEmail(recipientAddress);  emailListRecipientEntry.addExtension(who);  URL insertUrl=new URL(domainUrlBase + "emailList/" + SERVICE_VERSION+ "/"+ emailList+ "/recipient");  return emailListRecipientService.insert(insertUrl,emailListRecipientEntry);}  }
class C{  public static final double roundTo(double val,double prec){  return floor(val / prec + 0.5) * prec;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public Executor clearProperties(){  properties.clear();  return this;}  }
class C{  public int next(){  return this.icuIterator.next();}  }
class C{  public static X509CRL downloadCrl(String uriName) throws CrlDownloadException {  X509CRL crl=null;  if (uriName.startsWith("ldap://") || uriName.startsWith("ldaps://")) {    logger.warn("LDAP CRL stores is not supported. Ignore this URI: " + uriName);  } else {    URLConnection conn;    try {      conn=new URL(uriName).openConnection();      conn.setConnectTimeout(CRL_CONNECTION_TIMEOUT);    } catch (    MalformedURLException e) {      logger.error(String.format("MalformedURLException for CRL URI %s",uriName));      throw new CrlDownloadException("Error reading CRL: " + uriName,e);    }catch (    IOException e) {      logger.error(String.format("IOException in connecting to %s",uriName));      throw new CrlDownloadException("Error reading CRL: " + uriName,e);    }    InputStream crlInputStream;    try {      crlInputStream=conn.getInputStream();    } catch (    IOException e) {      logger.error(String.format("IOException from URLConnection.getInputStream() URI: %s",uriName));      throw new CrlDownloadException("Error reading CRL: " + uriName,e);    }    try {      try {        crl=(X509CRLImpl)_certFactory.generateCRL(crlInputStream);        if (logger.isDebugEnabled()) {          logger.debug("Successful downloaded CRL from " + uriName);        }      } catch (      CRLException e) {        logger.error(String.format("CRLException from CertificateFactory.generateCRL() URI: %s",uriName));        throw new CrlDownloadException("Error reading CRL: " + uriName,e);      }    }  finally {      try {        crlInputStream.close();      } catch (      IOException e) {        logger.error(String.format("IOException from crlInputStream.close() URI: %s",uriName));        throw new CrlDownloadException("Error reading CRL: " + uriName,e);      }    }  }  return crl;}  }
class C{  public ClassDefItem(CstType thisClass,int accessFlags,CstType superclass,TypeList interfaces,CstString sourceFile){  if (thisClass == null) {    throw new NullPointerException("thisClass == null");  }  if (interfaces == null) {    throw new NullPointerException("interfaces == null");  }  this.thisClass=thisClass;  this.accessFlags=accessFlags;  this.superclass=superclass;  this.interfaces=(interfaces.size() == 0) ? null : new TypeListItem(interfaces);  this.sourceFile=sourceFile;  this.classData=new ClassDataItem(thisClass);  this.staticValuesItem=null;  this.annotationsDirectory=new AnnotationsDirectoryItem();}  }
class C{  public boolean isErasureBoundTo(TypeBinding type){  if (this.superclass.erasure() == type)   return true;  for (int i=0, length=this.superInterfaces.length; i < length; i++) {    if (this.superInterfaces[i].erasure() == type)     return true;  }  return false;}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    int progress, oldProgress=-1;    double[] data;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    double multiplier=Math.PI / 180;    if (inputFile.getZUnits().toLowerCase().contains("rad")) {      multiplier=1;    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          outputFile.setValue(row,col,Math.cos(z * multiplier));        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static ReilInstruction createStr(final Address address,final ReilOperand storeValue,final ReilOperand storeTarget){  return new ReilInstruction(address,ReilMnemonics.STR,storeValue,ReilOperand.EMPTY_OPERAND,storeTarget);}  }
class C{  public synchronized OMGraphicList prepare(){  if (spatialIndexes == null || spatialIndexes.isEmpty()) {    logger.fine(getName() + ": spatialIndexes is empty!");    return new OMGraphicList();  }  Projection projection=getProjection();  if (projection == null) {    logger.fine(getName() + ": prepare called with null projection");    return new OMGraphicList();  }  Point2D ul=projection.getUpperLeft();  Point2D lr=projection.getLowerRight();  double ulLat=ul.getY();  double ulLon=ul.getX();  double lrLat=lr.getY();  double lrLon=lr.getX();  OMGraphicList masterList=new OMGraphicList();  OMGraphicList list=null;  if (ProjMath.isCrossingDateline(ulLon,lrLon,projection.getScale())) {    if (logger.isLoggable(Level.FINE)) {      logger.fine(getName() + ": Dateline is on screen");    }    double ymin=Math.min(ulLat,lrLat);    double ymax=Math.max(ulLat,lrLat);    Iterator<SpatialIndexHandler> sii=spatialIndexes.iterator();    while (sii.hasNext()) {      SpatialIndexHandler sih=(SpatialIndexHandler)sii.next();      if (!sih.enabled)       continue;      try {        list=sih.getGraphics(ulLon,ymin,180.0d,ymax,list,projection);        list=sih.getGraphics(-180.0d,ymin,lrLon,ymax,list,projection);      } catch (      java.io.IOException ex) {        ex.printStackTrace();      }catch (      FormatException fe) {        fe.printStackTrace();      }      masterList.add(list);    }  } else {    double xmin=(double)Math.min(ulLon,lrLon);    double xmax=(double)Math.max(ulLon,lrLon);    double ymin=(double)Math.min(ulLat,lrLat);    double ymax=(double)Math.max(ulLat,lrLat);    Iterator<SpatialIndexHandler> sii=spatialIndexes.iterator();    while (sii.hasNext()) {      SpatialIndexHandler sih=(SpatialIndexHandler)sii.next();      if (!sih.enabled)       continue;      if (logger.isLoggable(Level.FINE)) {        logger.fine(getName() + ": Getting graphics from " + sih.prettyName+ " spatial index");      }      try {        list=sih.getGraphics(xmin,ymin,xmax,ymax,list,projection);      } catch (      java.io.IOException ex) {        ex.printStackTrace();      }catch (      FormatException fe) {        fe.printStackTrace();      }      masterList.add(list);    }  }  return masterList;}  }
class C{  public boolean tenantHasUsageACL(List<URI> tenantUris,VirtualArray virtualArray){  for (  URI tenantUri : tenantUris) {    if (tenantHasUsageACL(tenantUri,virtualArray)) {      return true;    }  }  return false;}  }
class C{  public void test_dropSolutionSet_02() throws UpdateExecutionException, RepositoryException, MalformedQueryException {  if (!isSolutionSetUpdateEnabled()) {    return;  }  con.prepareUpdate(QueryLanguage.SPARQL,"drop silent solutions %namedSet1").execute();}  }
class C{  private MemoryExampleTable performOuterJoin(ExampleSet leftExampleSet,ExampleSet rightExampleSet,List<AttributeSource> originalAttributeSources,List<Attribute> unionAttributeList,Pair<Attribute[],Attribute[]> keyAttributes) throws ProcessStoppedException {  MemoryExampleTable unionTable=new MemoryExampleTable(unionAttributeList);  Attribute[] leftKeyAttributes=keyAttributes.getFirst();  Attribute[] rightKeyAttributes=keyAttributes.getSecond();  Set<DoubleArrayWrapper> mappedRightExamples=new HashSet<>();  unionTable=performLeftJoin(leftExampleSet,rightExampleSet,originalAttributeSources,unionAttributeList,keyAttributes,mappedRightExamples);  boolean keepBoth=getParameterAsBoolean(PARAMETER_KEEP_BOTH_JOIN_ATTRIBUTES);  boolean removeDoubleAttributes=getParameterAsBoolean(PARAMETER_REMOVE_DOUBLE_ATTRIBUTES);  int progressCounter=0;  for (  Example rightExample : rightExampleSet) {    if (!mappedRightExamples.contains(new DoubleArrayWrapper(getKeyValues(rightExample,rightKeyAttributes)))) {      addRightOnlyOccurence(originalAttributeSources,unionAttributeList,unionTable,rightExample,leftKeyAttributes,rightKeyAttributes,keepBoth,removeDoubleAttributes);    }    ++progressCounter;    if (progressCounter % 100 == 0) {      getProgress().step(100);      progressCounter=0;    }  }  return unionTable;}  }
class C{  @Override protected void onNfcStateEnabled(){  toast(getString(R.string.nfcAvailableEnabled));}  }
class C{  @Override public int hashCode(){  return parent.hashEntry(getKey(),getValue());}  }
class C{  private boolean isSimilarSignature(Method possiblyMatchingMethod,String desiredMethodName,Class<?>[] desiredParamTypes){  return possiblyMatchingMethod.getName().equals(desiredMethodName) && match(possiblyMatchingMethod.getParameterTypes(),desiredParamTypes);}  }
class C{  @Override protected int select() throws Exception {  return selector.select();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void initStreamAudioToServer() throws Exception {  Log.d(TAG,"Connecting...");  this.encoder.initEncoderWithUploader(this);  if (this.sConfig.isSSL)   this.trustServer();  boolean rc;  rc=this.connectBlocking();  if (rc) {    Log.d(TAG,"Connected");    this.sendSpeechHeader();  } else {    Log.e(TAG,"Connection failed!");    this.uploadPrepared=false;    throw new Exception("Connection failed!");  }}  }
class C{  void showErrorBox(Throwable error,Runnable callback){  Text text=createMessage(error.toString());  FXGLButton btnOK=new FXGLButton("OK");  btnOK.setOnAction(null);  FXGLButton btnLog=new FXGLButton("LOG");  btnLog.setOnAction(null);  HBox hbox=new HBox(btnOK,btnLog);  hbox.setAlignment(Pos.CENTER);  VBox vbox=new VBox(50,text,hbox);  vbox.setAlignment(Pos.CENTER);  vbox.setUserData(new Point2D(Math.max(text.getLayoutBounds().getWidth(),400),text.getLayoutBounds().getHeight() * 2 + 50));  setContent("Error",vbox);  show();}  }
class C{  private String readStringV2(DataInputStream dataIn) throws IOException {  int stringLength=dataIn.readInt();  byte[] encodedString=IOUtil.readBytes(dataIn,stringLength);  if (encodedString.length != stringLength) {    throw new EOFException("Attempted to read " + stringLength + " bytes but no more than "+ encodedString.length+ " were available");  }  ByteBuffer byteBuf=ByteBuffer.wrap(encodedString);  CharBuffer charBuf=charsetDecoder.decode(byteBuf);  return charBuf.toString();}  }
class C{  private static void listActivities() throws IOException {  View.header1("Listing My Activities");  Plus.Activities.List listActivities=plus.activities().list("me","public");  listActivities.setMaxResults(5L);  listActivities.setFields("nextPageToken,items(id,url,object/content)");  ActivityFeed feed=listActivities.execute();  int currentPageNumber=0;  while (feed.getItems() != null && !feed.getItems().isEmpty() && ++currentPageNumber <= 5) {    for (    Activity activity : feed.getItems()) {      View.show(activity);      View.separator();    }    String nextPageToken=feed.getNextPageToken();    if (nextPageToken == null) {      break;    }    listActivities.setPageToken(nextPageToken);    View.header2("New page of activities");    feed=listActivities.execute();  }}  }
class C{  public static boolean isSubstringAt(String string,String substring,int offset){  int len=substring.length();  int max=offset + len;  if (max > string.length()) {    return false;  }  int ndx=0;  for (int i=offset; i < max; i++, ndx++) {    if (string.charAt(i) != substring.charAt(ndx)) {      return false;    }  }  return true;}  }
class C{  public void sort(ArrayList<Value[]> rows,int offset,int limit){  int rowsSize=rows.size();  if (rows.isEmpty() || offset >= rowsSize || limit == 0) {    return;  }  if (offset < 0) {    offset=0;  }  if (offset + limit > rowsSize) {    limit=rowsSize - offset;  }  if (limit == 1 && offset == 0) {    rows.set(0,Collections.min(rows,this));    return;  }  Value[][] arr=rows.toArray(new Value[rowsSize][]);  Utils.sortTopN(arr,offset,limit,this);  for (int i=0, end=Math.min(offset + limit,rowsSize); i < end; i++) {    rows.set(i,arr[i]);  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof DialPointer)) {    return false;  }  DialPointer that=(DialPointer)obj;  if (this.datasetIndex != that.datasetIndex) {    return false;  }  if (this.radius != that.radius) {    return false;  }  return super.equals(obj);}  }
class C{  public static <E>Map<String,E> parseMap(String jsonString,Class<E> jsonObjectClass) throws IOException {  return mapperFor(jsonObjectClass).parseMap(jsonString);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodereplacechildnodeancestor.class,args);}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  public boolean zip(String zipLocation,String toBeZippedName){  boolean ret=false;  if (verbose)   Debug.put("zip");  File toBeZipped=new File(toBeZippedName);  if (toBeZipped.exists()) {    try {      FileUtils.saveZipFile(zipLocation,toBeZipped);      ret=true;    } catch (    FileNotFoundException e) {      e.printStackTrace();    }catch (    IOException e) {      e.printStackTrace();    }  }  return ret;}  }
class C{  public static void square(double x,double y,double r){  if (r < 0)   throw new IllegalArgumentException("square side length must be nonnegative");  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(2 * r);  double hs=factorY(2 * r);  if (ws <= 1 && hs <= 1)   pixel(x,y); else   offscreen.draw(new Rectangle2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));  draw();}  }
class C{  public void testDoTag() throws Exception {  System.out.println("doTag");  ForCssStringTag instance=new ForCssStringTag();  String value="<div>";  String expected="\\3c div\\3e";  instance.setJspContext(_pageContext);  instance.setValue(value);  instance.doTag();  String results=_response.getContentAsString();  assertEquals(expected,results);}  }
class C{  public void queryContacts(){  mCommands[ContactsCommandType.QUERY_COMMAND.ordinal()].execute(mContacts.iterator());}  }
class C{  public void load(String url,Request request){  ExecutorService service=Executors.newCachedThreadPool();  service.execute(new downloadRequest(url,this,mContext,request));  try {    service.shutdown();    service.awaitTermination(Long.MAX_VALUE,TimeUnit.SECONDS);  } catch (  InterruptedException e) {    Log.e(e.getClass().getSimpleName(),e.getMessage());  }}  }
class C{  protected final void checkStateOfPartitioner(DocumentPartitioner partitioner,String partitioning){}  }
class C{  public static boolean isLowSurrogate(int c){  return (0xDC00 <= c && c <= 0xDFFF);}  }
class C{  public boolean provides(Class<?> type){  if (adapterMemo.getDisabled()) {    return false;  }  return false;}  }
class C{  private int convertSurrogate(int secondPart) throws IOException {  int firstPart=mSurrogate;  mSurrogate=0;  if (secondPart < SURR2_FIRST || secondPart > SURR2_LAST) {    throw new IOException("Broken surrogate pair: first char 0x" + Integer.toHexString(firstPart) + ", second 0x"+ Integer.toHexString(secondPart)+ "; illegal combination");  }  return 0x10000 + ((firstPart - SURR1_FIRST) << 10) + (secondPart - SURR2_FIRST);}  }
class C{  public static org.oscm.vo.VOUdaDefinition convertToApi(org.oscm.internal.vo.VOUdaDefinition oldVO){  if (oldVO == null) {    return null;  }  org.oscm.vo.VOUdaDefinition newVO=new org.oscm.vo.VOUdaDefinition();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setUdaId(oldVO.getUdaId());  newVO.setTargetType(oldVO.getTargetType());  newVO.setDefaultValue(oldVO.getDefaultValue());  newVO.setConfigurationType(EnumConverter.convert(oldVO.getConfigurationType(),org.oscm.types.enumtypes.UdaConfigurationType.class));  return newVO;}  }
class C{  public FacetResult runDrillDown() throws IOException {  index();  return drillDown();}  }
class C{  public void traverse(ASTVisitor visitor,BlockScope blockScope){  try {    if (visitor.visit(this,blockScope)) {      if (this.javadoc != null) {        this.javadoc.traverse(visitor,this.scope);      }      if (this.annotations != null) {        int annotationsLength=this.annotations.length;        for (int i=0; i < annotationsLength; i++)         this.annotations[i].traverse(visitor,this.staticInitializerScope);      }      if (this.superclass != null)       this.superclass.traverse(visitor,this.scope);      if (this.superInterfaces != null) {        int length=this.superInterfaces.length;        for (int i=0; i < length; i++)         this.superInterfaces[i].traverse(visitor,this.scope);      }      if (this.typeParameters != null) {        int length=this.typeParameters.length;        for (int i=0; i < length; i++) {          this.typeParameters[i].traverse(visitor,this.scope);        }      }      if (this.memberTypes != null) {        int length=this.memberTypes.length;        for (int i=0; i < length; i++)         this.memberTypes[i].traverse(visitor,this.scope);      }      if (this.fields != null) {        int length=this.fields.length;        for (int i=0; i < length; i++) {          FieldDeclaration field;          if ((field=this.fields[i]).isStatic()) {          } else {            field.traverse(visitor,this.initializerScope);          }        }      }      if (this.methods != null) {        int length=this.methods.length;        for (int i=0; i < length; i++)         this.methods[i].traverse(visitor,this.scope);      }    }    visitor.endVisit(this,blockScope);  } catch (  AbortType e) {  }}  }
class C{  private static ModulesBean createFakeModulesBean(){  final List<ModuleBean> modList=detectInstalledModules(LEnv.PATH_MODS);  if (modList == null)   return null;  ModuleBean launcherMb=null;  ModuleBean appMb=null;  for (  final ModuleBean mb : modList) switch (mb.getFolder()) {case "launcher":    launcherMb=mb;  break;case "app":appMb=mb;break;}if (launcherMb == null) {LEnv.LOGGER.error("Could not find installed launcher module in modules folder: " + LEnv.PATH_MODS);return null;}modList.remove(launcherMb);if (appMb == null || appMb.getFileList() == null || appMb.getFileList().isEmpty()) {LEnv.LOGGER.error(LConsts.APP_NAME + " is not downloaded, cannot proceed to start!");return null;}final ModulesBean msb=new ModulesBean();msb.setLauncherMod(launcherMb);msb.setModList(modList);return msb;}  }
class C{  public Iflt2(){  super("iflt2",2);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:45.528 -0500",hash_original_method="9F609FC4DF465EEA0A9F2C3A79A2C6B4",hash_generated_method="B9D65B71D31F113C9D169E78F4EAE96E") public void replyToMessage(Message srcMsg,Message dstMsg){  try {    dstMsg.replyTo=mSrcMessenger;    srcMsg.replyTo.send(dstMsg);  } catch (  RemoteException e) {    log("TODO: handle replyToMessage RemoteException" + e);    e.printStackTrace();  }}  }
class C{  protected final boolean isElementSpacePreserved(Element element){  final Attribute attr=(Attribute)element.attribute("space");  boolean preserveFound=preserve;  if (attr != null) {    preserveFound="xml".equals(attr.getNamespacePrefix()) && "preserve".equals(attr.getText());  }  return preserveFound;}  }
class C{  public void applyFromResolveInfo(PackageManager pm,ResolveInfo info,WidgetPreviewLoader loader){  mInfo=info;  CharSequence label=info.loadLabel(pm);  mWidgetName.setText(label);  mWidgetDims.setText(String.format(mDimensionsFormatString,1,1));  mWidgetPreviewLoader=loader;}  }
class C{  public void clear(){  solrDoc=null;  indexedId=null;  updateTerm=null;  isLastDocInBatch=false;  version=0;}  }
class C{  public JBBPOut Bit(final byte[] value) throws IOException {  assertNotEnded();  assertArrayNotNull(value);  if (this.processCommands) {    for (    final byte b : value) {      this._writeBits(JBBPBitNumber.BITS_1,b);    }  }  return this;}  }
class C{  public static String formatUTC(final Date date,final String pattern,final Locale locale){  return format(date,pattern,UTC_TIME_ZONE,locale);}  }
class C{  protected ComplexPhase(String name,int[] scheduledSubPhases){  super(name);  this.scheduledSubPhases=scheduledSubPhases;  checkPhases();}  }
class C{  private void clearListenerInViewGroup(ViewGroup viewGroup){  if (null == viewGroup) {    return;  }  int count=viewGroup.getChildCount();  for (int n=0; n < count; ++n) {    View childView=viewGroup.getChildAt(n);    if (childView instanceof Switch) {      final Switch switchView=(Switch)childView;      switchView.setOnCheckedChangeListener(null);      return;    } else     if (childView instanceof ViewGroup) {      ViewGroup childGroup=(ViewGroup)childView;      clearListenerInViewGroup(childGroup);    }  }}  }
class C{  public int remaining(){  return current.remaining();}  }
class C{  private void checkServicesByCriteria_Categories_Cat2(String locale) throws Exception {  container.login(platformOperatorAdminKey,ROLE_ORGANIZATION_ADMIN);  VOCategory category=getCategory(CAT2_DE);  Assert.assertNotNull(category);  ListCriteria listCriteria=createCategoryCriteria(0,SEARCHLIMIT_UNLIMITED,category.getCategoryId(),Sorting.NAME_DESCENDING);  VOServiceListResult result=search.getServicesByCriteria(FUJITSU,locale,listCriteria);  Assert.assertEquals(1,result.getResultSize());  Assert.assertEquals(servicesForPublicCatalog.get(0).getServiceId(),result.getServices().get(0).getServiceId());}  }
class C{  public DateTimeFormatterBuilder append(DateTimePrinter printer,DateTimeParser[] parsers){  if (printer != null) {    checkPrinter(printer);  }  if (parsers == null) {    throw new IllegalArgumentException("No parsers supplied");  }  int length=parsers.length;  if (length == 1) {    if (parsers[0] == null) {      throw new IllegalArgumentException("No parser supplied");    }    return append0(printer,parsers[0]);  }  DateTimeParser[] copyOfParsers=new DateTimeParser[length];  int i;  for (i=0; i < length - 1; i++) {    if ((copyOfParsers[i]=parsers[i]) == null) {      throw new IllegalArgumentException("Incomplete parser array");    }  }  copyOfParsers[i]=parsers[i];  return append0(printer,new MatchingParser(copyOfParsers));}  }
class C{  public void printAllModels(){  if (m_isLeaf) {    System.out.println(m_nodeModel.toString());  } else {    System.out.println(m_nodeModel.toString());    m_left.printAllModels();    m_right.printAllModels();  }}  }
class C{  public boolean login() throws LoginException {  try {    loadPasswordFile();  } catch (  IOException ioe) {    LoginException le=new LoginException("Error: unable to load the password file: " + passwordFileDisplayName);    throw EnvHelp.initCause(le,ioe);  }  if (userCredentials == null) {    throw new LoginException("Error: unable to locate the users' credentials.");  }  if (logger.debugOn()) {    logger.debug("login","Using password file: " + passwordFileDisplayName);  }  if (tryFirstPass) {    try {      attemptAuthentication(true);      succeeded=true;      if (logger.debugOn()) {        logger.debug("login","Authentication using cached password has succeeded");      }      return true;    } catch (    LoginException le) {      cleanState();      logger.debug("login","Authentication using cached password has failed");    }  } else   if (useFirstPass) {    try {      attemptAuthentication(true);      succeeded=true;      if (logger.debugOn()) {        logger.debug("login","Authentication using cached password has succeeded");      }      return true;    } catch (    LoginException le) {      cleanState();      logger.debug("login","Authentication using cached password has failed");      throw le;    }  }  if (logger.debugOn()) {    logger.debug("login","Acquiring password");  }  try {    attemptAuthentication(false);    succeeded=true;    if (logger.debugOn()) {      logger.debug("login","Authentication has succeeded");    }    return true;  } catch (  LoginException le) {    cleanState();    logger.debug("login","Authentication has failed");    throw le;  }}  }
class C{  public void paintScrollPaneBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public static double calculateContrastRatio(double lum1,double lum2){  if ((lum1 < 0.0d) || (lum2 < 0.0d)) {    throw new IllegalArgumentException("Luminance values may not be negative.");  }  return (Math.max(lum1,lum2) + 0.05d) / (Math.min(lum1,lum2) + 0.05d);}  }
class C{  public long maxSize(){  return maxSize;}  }
class C{  public void test_checkServerTrusted_02() throws Exception {  X509TrustManagerImpl xtm=new X509TrustManagerImpl();  X509Certificate[] xcert=setInvalid();  try {    xtm.checkServerTrusted(xcert,"SSL");    fail("CertificateException wasn't thrown");  } catch (  CertificateException expected) {  }}  }
class C{  private void mov64(Register dst,long imm){  boolean firstMove=true;  for (int offset=0; offset < 64; offset+=16) {    int chunk=(int)(imm >> offset) & NumUtil.getNbitNumberInt(16);    if (chunk == 0) {      continue;    }    if (firstMove) {      movz(64,dst,chunk,offset);      firstMove=false;    } else {      movk(64,dst,chunk,offset);    }  }  assert !firstMove;}  }
class C{  public HashMap<Integer,RemoveAllPRMessage> createPRMessages(){  HashMap<Integer,RemoveAllPRMessage> prMsgMap=new HashMap<Integer,RemoveAllPRMessage>();  final EntryEventImpl event=getBaseEvent();  for (int i=0; i < removeAllDataSize; i++) {    Integer bucketId=removeAllData[i].getBucketId();    RemoveAllPRMessage prMsg=prMsgMap.get(bucketId);    if (prMsg == null) {      prMsg=new RemoveAllPRMessage(bucketId.intValue(),removeAllDataSize,false,event.isPossibleDuplicate(),!event.isGenerateCallbacks(),event.getCallbackArgument());      prMsg.setTransactionDistributed(event.getRegion().getCache().getTxManager().isDistributed());      if (event.getContext() != null) {        prMsg.setBridgeContext(event.getContext());      }    }    removeAllData[i].setFakeEventID();    prMsg.addEntry(removeAllData[i]);    prMsgMap.put(bucketId,prMsg);  }  return prMsgMap;}  }
class C{  @Override public int hashCode(){  int result=193;  long temp=Double.doubleToLongBits(this.lowerBound);  result=37 * result + (int)(temp ^ (temp >>> 32));  temp=Double.doubleToLongBits(this.upperBound);  result=37 * result + (int)(temp ^ (temp >>> 32));  temp=Double.doubleToLongBits(this.startAngle);  result=37 * result + (int)(temp ^ (temp >>> 32));  temp=Double.doubleToLongBits(this.extent);  result=37 * result + (int)(temp ^ (temp >>> 32));  temp=Double.doubleToLongBits(this.tickRadius);  result=37 * result + (int)(temp ^ (temp >>> 32));  return result;}  }
class C{  public PrivateKey engineLookupAndResolvePrivateKey(Element element,String baseURI,StorageResolver storage) throws KeyResolverException {  return null;}  }
class C{  @Override protected AdminResponse createResponse(DistributionManager dm){  return ResetHealthStatusResponse.create(dm,this.getSender(),this.id);}  }
class C{  @Override public void cleanLog(String id,Integer begin,Integer end){  logRepository.deleteRangeOfLoggingEventDateInt(id,begin,end);}  }
class C{  public void putInteger(Integer i) throws IOException {  putInteger(i.intValue());}  }
class C{  private String fetchLogicalUnitTieringPolicy(StorageSystem system,LogicalUnit logicalUnit,DbClient dbClient){  String tieringPolicyName=null;  if (logicalUnit.getDpType().equals(HDSConstants.DPTYPE_THIN)) {    if (null != logicalUnit.getLdevList()) {      Iterator<LDEV> ldevItr=logicalUnit.getLdevList().iterator();      if (ldevItr.hasNext()) {        LDEV ldev=ldevItr.next();        URIQueryResultList tieringPolicyList=new URIQueryResultList();        if (-1 != ldev.getTierLevel()) {          tieringPolicyName=HitachiTieringPolicy.getType(String.valueOf(ldev.getTierLevel())).replaceAll(HDSConstants.UNDERSCORE_OPERATOR,HDSConstants.SLASH_OPERATOR);        }      }    }  }  return tieringPolicyName;}  }
class C{  public void iBfunctionMessage(LocoNetMessage m){  int token=m.getElement(3);  int funcs=m.getElement(4);  if (token == LnConstants.RE_IB1_SPECIAL_F5_F11_TOKEN) {    localF9=(funcs & LnConstants.RE_IB1_F9_MASK) != 0;    localF10=(funcs & LnConstants.RE_IB1_F10_MASK) != 0;    localF11=(funcs & LnConstants.RE_IB1_F11_MASK) != 0;    notifySlotListeners();  } else   if (token == LnConstants.RE_IB2_SPECIAL_F13_F19_TOKEN) {    localF13=(funcs & LnConstants.RE_IB2_F13_MASK) != 0;    localF14=(funcs & LnConstants.RE_IB2_F14_MASK) != 0;    localF15=(funcs & LnConstants.RE_IB2_F15_MASK) != 0;    localF16=(funcs & LnConstants.RE_IB2_F16_MASK) != 0;    localF17=(funcs & LnConstants.RE_IB2_F17_MASK) != 0;    localF18=(funcs & LnConstants.RE_IB2_F18_MASK) != 0;    localF19=(funcs & LnConstants.RE_IB2_F19_MASK) != 0;    notifySlotListeners();  } else   if (token == LnConstants.RE_IB2_SPECIAL_F21_F27_TOKEN) {    localF21=(funcs & LnConstants.RE_IB2_F21_MASK) != 0;    localF22=(funcs & LnConstants.RE_IB2_F22_MASK) != 0;    localF23=(funcs & LnConstants.RE_IB2_F23_MASK) != 0;    localF24=(funcs & LnConstants.RE_IB2_F24_MASK) != 0;    localF25=(funcs & LnConstants.RE_IB2_F25_MASK) != 0;    localF26=(funcs & LnConstants.RE_IB2_F26_MASK) != 0;    localF27=(funcs & LnConstants.RE_IB2_F27_MASK) != 0;    notifySlotListeners();  } else   if (token == LnConstants.RE_IB2_SPECIAL_F20_F28_TOKEN) {    localF12=(funcs & LnConstants.RE_IB2_SPECIAL_F12_MASK) != 0;    localF20=(funcs & LnConstants.RE_IB2_SPECIAL_F20_MASK) != 0;    localF28=(funcs & LnConstants.RE_IB2_SPECIAL_F28_MASK) != 0;    notifySlotListeners();  }}  }
class C{  private String soapMessage2String(SOAPMessage msg){  if (msg == null)   return "";  try {    return XMLConverter.convertToString(msg.getSOAPBody().getOwnerDocument(),false);  } catch (  TransformerException|SOAPException e) {    throw new RuntimeException(e);  }}  }
class C{  public ImmutableArray2<K> insert(int index,K obj){  int len=length + 1;  int newLen=len;  boolean extendable;  if (index == len - 1) {    AtomicBoolean x=canExtend;    if (x != null) {      canExtend=null;      if (array.length > index && x.getAndSet(false)) {        array[index]=obj;        return new ImmutableArray2<K>(array,len,true);      }    }    extendable=true;    newLen=len + 4;  } else {    extendable=false;  }  @SuppressWarnings("unchecked") K[] a2=(K[])new Object[newLen];  DataUtils.copyWithGap(array,a2,length,index);  a2[index]=obj;  return new ImmutableArray2<K>(a2,len,extendable);}  }
class C{  public static void addVarbindsForLimitQuery(int maxRows,long offset,List<Object> varbinds,DBType dbType){  internalLimitQuery("",maxRows,offset,varbinds,dbType);}  }
class C{  public float[] toNativeArray(){  return toNativeArray(0,_pos);}  }
class C{  public Pos3D translateExcludingSide(ForgeDirection direction,double amount){  if (direction.offsetX == 0)   xPos+=amount;  if (direction.offsetY == 0)   yPos+=amount;  if (direction.offsetZ == 0)   zPos+=amount;  return this;}  }
class C{  public boolean contains(JComponent a,int b,int c){  boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);  }  return returnValue;}  }
class C{  private boolean parseDelimiters(DelimiterProcessor delimiterProcessor,char delimiterChar){  DelimiterData res=scanDelimiters(delimiterProcessor,delimiterChar);  if (res == null) {    return false;  }  int numDelims=res.count;  int startIndex=index;  index+=numDelims;  Text node=appendText(input,startIndex,index);  lastDelimiter=new Delimiter(node,delimiterChar,res.canOpen,res.canClose,lastDelimiter);  lastDelimiter.numDelims=numDelims;  if (lastDelimiter.previous != null) {    lastDelimiter.previous.next=lastDelimiter;  }  return true;}  }
class C{  public static Number count(char[] self,Object value){  return count(InvokerHelper.asIterator(self),value);}  }
class C{  protected void addValuePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_DoubleLiteral_value_feature"),getString("_UI_PropertyDescriptor_description","_UI_DoubleLiteral_value_feature","_UI_DoubleLiteral_type"),ExpressionsPackage.Literals.DOUBLE_LITERAL__VALUE,true,false,false,ItemPropertyDescriptor.REAL_VALUE_IMAGE,null,null));}  }
class C{  public void check(SnmpValue x,long var,Object data) throws SnmpStatusException {switch ((int)var) {case 2:    throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 1:  throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);default :throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);}}  }
class C{  public synchronized Map<String,Object> waitForResult(){  return this.waitForResult(10);}  }
class C{  public void success(int message){  sendPluginResult(new PluginResult(PluginResult.Status.OK,message));}  }
class C{  private void expect(char expectedSymbol) throws ParseException {  if (!accept(expectedSymbol))   throw new ParseException("Expected '" + expectedSymbol + "' but found '"+ (char)data[index]+ "'",index);}  }
class C{  public static RectF trapToRect(float[] array){  RectF r=new RectF(Float.POSITIVE_INFINITY,Float.POSITIVE_INFINITY,Float.NEGATIVE_INFINITY,Float.NEGATIVE_INFINITY);  for (int i=1; i < array.length; i+=2) {    float x=array[i - 1];    float y=array[i];    r.left=(x < r.left) ? x : r.left;    r.top=(y < r.top) ? y : r.top;    r.right=(x > r.right) ? x : r.right;    r.bottom=(y > r.bottom) ? y : r.bottom;  }  r.sort();  return r;}  }
class C{  private LDAPConnection createLDAPConnection() throws GuacamoleException {  EncryptionMethod encryptionMethod=confService.getEncryptionMethod();switch (encryptionMethod) {case NONE:    logger.debug("Connection to LDAP server without encryption.");  return new LDAPConnection();case SSL:logger.debug("Connecting to LDAP server using SSL/TLS.");return new LDAPConnection(new LDAPJSSESecureSocketFactory());case STARTTLS:logger.debug("Connecting to LDAP server using STARTTLS.");return new LDAPConnection(new LDAPJSSEStartTLSFactory());default :throw new GuacamoleUnsupportedException("Unimplemented encryption method: " + encryptionMethod);}}  }
class C{  public V remove(Object key){  throw new java.lang.UnsupportedOperationException("Method remove() not implemented.");}  }
class C{  private void inorder(){  inorder(root);}  }
class C{  public synchronized void transition(State newState) throws IllegalStateException {  if (transitions.containsEntry(currentState,newState)) {    currentState=newState;  } else {    throw new IllegalStateException(String.format(Locale.US,"Attempted invalid transition from %s to %s",currentState,newState));  }}  }
class C{  public void addActivity(Activity activity){  if (activityStack == null) {    activityStack=new Stack<Activity>();  }  activityStack.add(activity);}  }
class C{  public TopDocs drillDown(LongRange range) throws IOException {  DrillDownQuery q=new DrillDownQuery(getConfig());  q.add("timestamp",LongPoint.newRangeQuery("timestamp",range.min,range.max));  return searcher.search(q,10);}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getTraceOption_();}  }
class C{  public final AC gap(){  curIx++;  return this;}  }
class C{  private boolean distributionOrders(){  if (p_BasedInDamnd) {    int M_Warehouse_ID=0;    if (p_M_Warehouse_ID <= 0) {      MOrgInfo oi_source=MOrgInfo.get(getCtx(),m_run.getAD_Org_ID(),get_TrxName());      MWarehouse m_source=MWarehouse.get(getCtx(),oi_source.getM_Warehouse_ID());      if (m_source == null)       throw new AdempiereException("Do not exist Defautl Warehouse Source");      M_Warehouse_ID=m_source.getM_Warehouse_ID();    } else     M_Warehouse_ID=p_M_Warehouse_ID;    for (int i=0; i < m_details.length; i++) {      MDistributionRunDetail detail=m_details[i];      StringBuffer sql=new StringBuffer("SELECT * FROM DD_OrderLine ol INNER JOIN DD_Order o ON (o.DD_Order_ID=ol.DD_Order_ID)  INNER JOIN M_Locator l ON (l.M_Locator_ID=ol.M_Locator_ID) ");      sql.append(" WHERE o.DocStatus IN ('DR','IN') AND o.C_BPartner_ID = ? AND M_Product_ID=? AND  l.M_Warehouse_ID=?  AND ol.DatePromised <=?");      PreparedStatement pstmt=null;      ResultSet rs=null;      try {        pstmt=DB.prepareStatement(sql.toString(),get_TrxName());        pstmt.setInt(1,detail.getC_BPartner_ID());        pstmt.setInt(2,detail.getM_Product_ID());        pstmt.setInt(3,M_Warehouse_ID);        pstmt.setTimestamp(4,p_DatePromised);        rs=pstmt.executeQuery();        while (rs.next()) {          MDDOrderLine line=new MDDOrderLine(getCtx(),rs,get_TrxName());          line.setM_Product_ID(detail.getM_Product_ID());          line.setConfirmedQty(line.getTargetQty().add(detail.getActualAllocation()));          if (p_M_Warehouse_ID > 0)           line.setDescription(Msg.translate(getCtx(),"PlannedQty")); else           line.setDescription(m_run.getName());          line.saveEx();          break;        }      } catch (      Exception e) {        log.log(Level.SEVERE,"doIt - " + sql,e);        return false;      } finally {        DB.close(rs,pstmt);        rs=null;        pstmt=null;      }    }    return true;  }  int runAD_Org_ID=m_run.getAD_Org_ID();  if (runAD_Org_ID == 0)   runAD_Org_ID=Env.getAD_Org_ID(getCtx());  MOrg runOrg=MOrg.get(getCtx(),runAD_Org_ID);  int runC_BPartner_ID=runOrg.getLinkedC_BPartner_ID(get_TrxName());  boolean counter=!m_run.isCreateSingleOrder() && runC_BPartner_ID > 0 && !m_docType.isSOTrx();  MBPartner runBPartner=counter ? new MBPartner(getCtx(),runC_BPartner_ID,get_TrxName()) : null;  if (!counter || runBPartner == null || runBPartner.get_ID() != runC_BPartner_ID)   counter=false;  if (counter)   log.info("RunBP=" + runBPartner + " - "+ m_docType);  log.info("Single=" + m_run.isCreateSingleOrder() + " - "+ m_docType+ ",SO="+ m_docType.isSOTrx());  log.fine("Counter=" + counter + ",C_BPartner_ID="+ runC_BPartner_ID+ ","+ runBPartner);  MBPartner bp=null;  MDDOrder singleOrder=null;  MProduct product=null;  MWarehouse m_source=null;  MLocator m_locator=null;  MWarehouse m_target=null;  MLocator m_locator_to=null;  MWarehouse[] ws=null;  MOrgInfo oi_source=MOrgInfo.get(getCtx(),m_run.getAD_Org_ID(),get_TrxName());  m_source=MWarehouse.get(getCtx(),oi_source.getM_Warehouse_ID());  if (m_source == null)   throw new AdempiereException("Do not exist Defautl Warehouse Source");  m_locator=MLocator.getDefault(m_source);  ws=MWarehouse.getInTransitForOrg(getCtx(),m_source.getAD_Org_ID());  if (ws == null)   throw new AdempiereException("Warehouse Intransit do not found");  if (m_run.isCreateSingleOrder()) {    bp=new MBPartner(getCtx(),m_run.getC_BPartner_ID(),get_TrxName());    if (bp.get_ID() == 0)     throw new IllegalArgumentException("Business Partner not found - C_BPartner_ID=" + m_run.getC_BPartner_ID());    if (!p_IsTest) {      singleOrder=new MDDOrder(getCtx(),0,get_TrxName());      singleOrder.setC_DocType_ID(m_docType.getC_DocType_ID());      singleOrder.setIsSOTrx(m_docType.isSOTrx());      singleOrder.setBPartner(bp);      if (m_run.getC_BPartner_Location_ID() != 0)       singleOrder.setC_BPartner_Location_ID(m_run.getC_BPartner_Location_ID());      singleOrder.setDateOrdered(m_DateOrdered);      singleOrder.setDatePromised(p_DatePromised);      singleOrder.setM_Warehouse_ID(ws[0].getM_Warehouse_ID());      if (!singleOrder.save()) {        log.log(Level.SEVERE,"Order not saved");        return false;      }      m_counter++;    }  }  int lastC_BPartner_ID=0;  int lastC_BPartner_Location_ID=0;  MDDOrder order=null;  for (int i=0; i < m_details.length; i++) {    MDistributionRunDetail detail=m_details[i];    if (m_run.isCreateSingleOrder())     order=singleOrder; else     if (lastC_BPartner_ID != detail.getC_BPartner_ID() || lastC_BPartner_Location_ID != detail.getC_BPartner_Location_ID()) {      order=null;    }    lastC_BPartner_ID=detail.getC_BPartner_ID();    lastC_BPartner_Location_ID=detail.getC_BPartner_Location_ID();    bp=new MBPartner(getCtx(),detail.getC_BPartner_ID(),get_TrxName());    MOrgInfo oi_target=MOrgInfo.get(getCtx(),bp.getAD_OrgBP_ID_Int(),get_TrxName());    m_target=MWarehouse.get(getCtx(),oi_target.getM_Warehouse_ID());    if (m_target == null)     throw new AdempiereException("Do not exist Default Warehouse Target");    m_locator_to=MLocator.getDefault(m_target);    if (m_locator == null || m_locator_to == null) {      throw new AdempiereException("Do not exist default Locator for Warehouses");    }    if (p_ConsolidateDocument) {      String whereClause="DocStatus IN ('DR','IN') AND AD_Org_ID=" + bp.getAD_OrgBP_ID_Int() + " AND "+ MDDOrder.COLUMNNAME_C_BPartner_ID+ "=? AND "+ MDDOrder.COLUMNNAME_M_Warehouse_ID+ "=?  AND "+ MDDOrder.COLUMNNAME_DatePromised+ "<=? ";      order=new Query(getCtx(),MDDOrder.Table_Name,whereClause,get_TrxName()).setParameters(new Object[]{lastC_BPartner_ID,ws[0].getM_Warehouse_ID(),p_DatePromised}).setOrderBy(MDDOrder.COLUMNNAME_DatePromised + " DESC").first();    }    if (order == null) {      if (!p_IsTest) {        order=new MDDOrder(getCtx(),0,get_TrxName());        order.setAD_Org_ID(bp.getAD_OrgBP_ID_Int());        order.setC_DocType_ID(m_docType.getC_DocType_ID());        order.setIsSOTrx(m_docType.isSOTrx());        if (counter && bp.getAD_OrgBP_ID_Int() > 0) {          log.fine("Counter - From_BPOrg=" + bp.getAD_OrgBP_ID_Int() + "-"+ bp+ ", To_BP="+ runBPartner);          order.setAD_Org_ID(bp.getAD_OrgBP_ID_Int());          if (ws[0].getM_Warehouse_ID() > 0)           order.setM_Warehouse_ID(ws[0].getM_Warehouse_ID());          order.setBPartner(runBPartner);        } else {          log.fine("From_Org=" + runAD_Org_ID + ", To_BP="+ bp);          order.setAD_Org_ID(bp.getAD_OrgBP_ID_Int());          order.setBPartner(bp);          if (detail.getC_BPartner_Location_ID() != 0)           order.setC_BPartner_Location_ID(detail.getC_BPartner_Location_ID());        }        order.setM_Warehouse_ID(ws[0].getM_Warehouse_ID());        order.setDateOrdered(m_DateOrdered);        order.setDatePromised(p_DatePromised);        order.setIsInDispute(false);        order.setIsInTransit(false);        if (!order.save()) {          log.log(Level.SEVERE,"Order not saved");          return false;        }      }    }    if (product == null || product.getM_Product_ID() != detail.getM_Product_ID())     product=MProduct.get(getCtx(),detail.getM_Product_ID());    if (p_IsTest) {      addLog(0,null,detail.getActualAllocation(),bp.getName() + " - " + product.getName());      continue;    }    if (p_ConsolidateDocument) {      String sql="SELECT DD_OrderLine_ID FROM DD_OrderLine ol INNER JOIN DD_Order o ON (o.DD_Order_ID=ol.DD_Order_ID) WHERE o.DocStatus IN ('DR','IN') AND o.C_BPartner_ID = ? AND M_Product_ID=? AND  ol.M_Locator_ID=?  AND ol.DatePromised <= ?";      int DD_OrderLine_ID=DB.getSQLValueEx(get_TrxName(),sql,new Object[]{detail.getC_BPartner_ID(),product.getM_Product_ID(),m_locator.getM_Locator_ID(),p_DatePromised});      if (DD_OrderLine_ID <= 0) {        MDDOrderLine line=new MDDOrderLine(order);        line.setAD_Org_ID(bp.getAD_OrgBP_ID_Int());        line.setM_Locator_ID(m_locator.getM_Locator_ID());        line.setM_LocatorTo_ID(m_locator_to.getM_Locator_ID());        line.setIsInvoiced(false);        line.setProduct(product);        BigDecimal QtyAllocation=detail.getActualAllocation();        if (QtyAllocation == null)         QtyAllocation=Env.ZERO;        line.setQty(QtyAllocation);        line.setQtyEntered(QtyAllocation);        line.setTargetQty(Env.ZERO);        String Description="";        if (m_run.getName() != null)         Description=Description.concat(m_run.getName());        line.setDescription(Description + " " + Msg.translate(getCtx(),"Qty")+ " = "+ QtyAllocation+ " ");        line.saveEx();      } else {        MDDOrderLine line=new MDDOrderLine(getCtx(),DD_OrderLine_ID,get_TrxName());        BigDecimal QtyAllocation=detail.getActualAllocation();        if (QtyAllocation == null)         QtyAllocation=Env.ZERO;        String Description=line.getDescription();        if (Description == null)         Description="";        if (m_run.getName() != null)         Description=Description.concat(m_run.getName());        line.setDescription(Description + " " + Msg.translate(getCtx(),"Qty")+ " = "+ QtyAllocation+ " ");        line.setQty(line.getQtyEntered().add(QtyAllocation));        line.saveEx();      }    } else {      MDDOrderLine line=new MDDOrderLine(order);      if (counter && bp.getAD_OrgBP_ID_Int() > 0)       ;      line.setAD_Org_ID(bp.getAD_OrgBP_ID_Int());      line.setM_Locator_ID(m_locator.getM_Locator_ID());      line.setM_LocatorTo_ID(m_locator_to.getM_Locator_ID());      line.setIsInvoiced(false);      line.setProduct(product);      line.setQty(detail.getActualAllocation());      line.setQtyEntered(detail.getActualAllocation());      line.setTargetQty(Env.ZERO);      String Description="";      if (m_run.getName() != null)       Description=Description.concat(m_run.getName());      line.setDescription(Description + " " + Msg.translate(getCtx(),"Qty")+ " = "+ detail.getActualAllocation()+ " ");      line.saveEx();    }    addLog(0,null,detail.getActualAllocation(),order.getDocumentNo() + ": " + bp.getName()+ " - "+ product.getName());  }  order=null;  return true;}  }
class C{  public static void warning(ErrorMessages message){  warning(message,0);}  }
class C{  public void disconnected(DisconnectedEvent e){}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public KeyUsageExtension(boolean[] bitString) throws IOException {  this.bitString=bitString;  this.extensionId=PKIXExtensions.KeyUsage_Id;  this.critical=true;  encodeThis();}  }
class C{  public static <E>ImmutableList<E> of(E e1,E e2){  return construct(e1,e2);}  }
class C{  public Iterator<Drawable> iterator(){  return new Iter();}  }
class C{  public Vertex add(Vertex source,Vertex value){  if (source.instanceOf(Primitive.SET)) {    source.addRelationship(source.getNetwork().createVertex(Primitive.ELEMENT),value);  } else {    source.addRelationship(source.getNetwork().createVertex(Primitive.ELEMENT),value,Integer.MAX_VALUE);  }  return source;}  }
class C{  void postReplaceChildEvent(ASTNode node,ASTNode child,ASTNode newChild,StructuralPropertyDescriptor property){}  }
class C{  public boolean isGeneric(){  EList<TypeVariable> _typeVars=this.getTypeVars();  boolean _isEmpty=_typeVars.isEmpty();  return (!_isEmpty);}  }
class C{  public boolean rejectIt(){  log.info("rejectIt - " + toString());  setIsApproved(false);  return true;}  }
class C{  public static String escapeHTML(String s){  if (s == null) {    return "";  }  StringBuffer sb=new StringBuffer();  int n=s.length();  for (int i=0; i < n; i++) {    char c=s.charAt(i);switch (c) {case '<':      sb.append("&lt;");    break;case '>':  sb.append("&gt;");break;case '&':sb.append("&amp;");break;case '"':sb.append("&quot;");break;case ' ':sb.append("&nbsp;");break;default :sb.append(c);break;}}return sb.toString();}  }
class C{  @Override public void startElement(String uri,String name,String qName,Attributes attributes){  inside=qName;  this.attributes=attributes;  if (qName.equals("tag"))   startTag(); else   if (qName.equals("attribute"))   startAtt(); else   if (qName.equals("script"))   startScript();}  }
class C{  public static MatchAllQueryBuilder matchAllQuery(){  return new MatchAllQueryBuilder();}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  java.io.ObjectInputStream.GetField fields=s.readFields();  content=((byte[])fields.get("content",null)).clone();  signature=((byte[])fields.get("signature",null)).clone();  thealgorithm=(String)fields.get("thealgorithm",null);}  }
class C{  private boolean isBlockGone(PartiallyMinedBlock block){  return serverInstance.worldServerForDimension(block.getDimension()).isAirBlock(block.getPos());}  }
class C{  public double mean(int[] series){  double res=0D;  int count=0;  for (  int tp : series) {    res+=(double)tp;    count+=1;  }  if (count > 0) {    return res / ((Integer)count).doubleValue();  }  return Double.NaN;}  }
class C{  public void cancelButtonActionPerformed(){  editMode=false;  curNode=null;  addButton.setVisible(true);  editButton.setVisible(true);  deleteButton.setVisible(true);  doneButton.setVisible(true);  updateButton.setVisible(false);  cancelButton.setVisible(false);  nodeAddrField.setVisible(true);  nodeAddrStatic.setVisible(false);  statusText1.setText(stdStatus1);  statusText2.setText(stdStatus2);  statusText3.setText(stdStatus3);}  }
class C{  public static String makeLogTag(Class<?> cls){  return makeLogTag(cls.getSimpleName());}  }
class C{  public boolean isEnabled(String key){  Assert.isLegal(key != null);  Object value=fOptions.get(key);  return CleanUpOptions.TRUE == value || CleanUpOptions.TRUE.equals(value);}  }
class C{  public static int assignVehicleToRequest(Trip requestToHandle,List<AutonomousVehicle> availableAVs){  return getClosestWithinLevelOfServiceSearchRadius_RadiusReducing(requestToHandle,availableAVs);}  }
class C{  public static void testValidity(Object o) throws JSONException {  if (o != null) {    if (o instanceof Double) {      if (((Double)o).isInfinite() || ((Double)o).isNaN()) {        throw new JSONException("JSON does not allow non-finite numbers.");      }    } else     if (o instanceof Float) {      if (((Float)o).isInfinite() || ((Float)o).isNaN()) {        throw new JSONException("JSON does not allow non-finite numbers.");      }    }  }}  }
class C{  public static String bin2str(final byte[] values){  return bin2str(values,JBBPBitOrder.LSB0,false);}  }
class C{  public DrawingColorChooserAction(DrawingEditor editor,AttributeKey<Color> key){  this(editor,key,null,null);}  }
class C{  private void addSubComponents(){  menuButton.setName("InternalFrameTitlePane.menuButton");  iconButton.setName("InternalFrameTitlePane.iconifyButton");  maxButton.setName("InternalFrameTitlePane.maximizeButton");  closeButton.setName("InternalFrameTitlePane.closeButton");  add(menuButton);  add(iconButton);  add(maxButton);  add(closeButton);}  }
class C{  private int readNextToken(final char[] srcChars,int start,final int len,final StrBuilder workArea,final List<String> tokenList){  while (start < len) {    final int removeLen=Math.max(getIgnoredMatcher().isMatch(srcChars,start,start,len),getTrimmerMatcher().isMatch(srcChars,start,start,len));    if (removeLen == 0 || getDelimiterMatcher().isMatch(srcChars,start,start,len) > 0 || getQuoteMatcher().isMatch(srcChars,start,start,len) > 0) {      break;    }    start+=removeLen;  }  if (start >= len) {    addToken(tokenList,"");    return -1;  }  final int delimLen=getDelimiterMatcher().isMatch(srcChars,start,start,len);  if (delimLen > 0) {    addToken(tokenList,"");    return start + delimLen;  }  final int quoteLen=getQuoteMatcher().isMatch(srcChars,start,start,len);  if (quoteLen > 0) {    return readWithQuotes(srcChars,start + quoteLen,len,workArea,tokenList,start,quoteLen);  }  return readWithQuotes(srcChars,start,len,workArea,tokenList,0,0);}  }
class C{  public void addLatLine(double lat,double minLon,double maxLon){  String name="latline" + nextShape;  nextShape++;  b.append("        var " + name + " = WE.polygon([\n");  double lon;  int steps=getStepCount(lat,minLon,lat,maxLon);  for (lon=minLon; lon <= maxLon; lon+=(maxLon - minLon) / steps) {    b.append("          [" + lat + ", "+ lon+ "],\n");  }  b.append("          [" + lat + ", "+ maxLon+ "],\n");  lon-=(maxLon - minLon) / steps;  for (; lon >= minLon; lon-=(maxLon - minLon) / steps) {    b.append("          [" + lat + ", "+ lon+ "],\n");  }  b.append("        ], {color: \"#ff0000\", fillColor: \"#ffffff\", opacity: 1, fillOpacity: 0.0001});\n");  b.append("        " + name + ".addTo(earth);\n");}  }
class C{  public synchronized void flush(){  snapshotCount++;  clear();}  }
class C{  public DTMIterator sortNodes(XPathContext xctxt,Vector keys,DTMIterator sourceNodes) throws TransformerException {  NodeSorter sorter=new NodeSorter(xctxt);  sourceNodes.setShouldCacheNodes(true);  sourceNodes.runTo(-1);  xctxt.pushContextNodeList(sourceNodes);  try {    sorter.sort(sourceNodes,keys,xctxt);    sourceNodes.setCurrentPos(0);  }  finally {    xctxt.popContextNodeList();  }  return sourceNodes;}  }
class C{  private void writeRemainingFileData(DataOutputStream outputStream,Uri file,int offset) throws IOException {  FileInputStream fileInputStream=null;  try {    fileInputStream=(FileInputStream)AndroidFactory.getApplicationContext().getContentResolver().openInputStream(file);    int bytesRead=(int)fileInputStream.skip(offset + 1);    int bytesAvailable=fileInputStream.available();    int bufferSize=Math.min(bytesAvailable,CHUNK_MAX_SIZE);    byte[] buffer=new byte[bufferSize];    int progress=bytesRead;    bytesRead=fileInputStream.read(buffer,0,bufferSize);    if (sLogger.isActivated()) {      sLogger.debug("Send " + bytesAvailable + " remaining bytes starting from "+ progress);    }    while (bytesRead > 0 && !isCancelled() && !isPaused()) {      progress+=bytesRead;      outputStream.write(buffer,0,bytesRead);      bytesAvailable=fileInputStream.available();      getListener().onHttpTransferProgress(progress,mContent.getSize());      bufferSize=Math.min(bytesAvailable,CHUNK_MAX_SIZE);      buffer=new byte[bufferSize];      bytesRead=fileInputStream.read(buffer,0,bufferSize);    }  }  finally {    CloseableUtils.tryToClose(fileInputStream);  }}  }
class C{  @SideOnly(Side.CLIENT) public void addInformation(List<String> list,C crop,boolean debug){  for (  Season season : crop.getSeasons()) {    list.add(season.getDisplayName());  }}  }
class C{  public void test_destroy(){  myDestroyable md=new myDestroyable();  try {    assertFalse(md.isDestroyed());    md.destroy();    assertTrue(md.isDestroyed());  } catch (  Exception e) {    fail("Unexpected exception " + e);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:25.178 -0500",hash_original_method="E58BA8CAEF8D98DCBC5CC423229EB1CE",hash_generated_method="C4DEA4890144CDDF0582D0EE99D802DA") public void applyToCanvas(Canvas canvas){  nativeApplyToCanvas(canvas.mNativeCanvas);}  }
class C{  private static Class<? extends Activity> guessRestartActivityClass(Context context){  Class<? extends Activity> resolvedActivityClass;  resolvedActivityClass=CustomActivityOnCrash.getRestartActivityClassWithIntentFilter(context);  if (resolvedActivityClass == null) {    resolvedActivityClass=getLauncherActivity(context);  }  return resolvedActivityClass;}  }
class C{  public static Rectangle realignToGrid(Rectangle rectangle,boolean realignHeightAndWidth){  int x=realignToGrid(false,rectangle.getX(),false);  int y=realignToGrid(false,rectangle.getY(),false);  if (realignHeightAndWidth) {    int width=realignToGrid(false,rectangle.getX() - x + rectangle.getWidth(),true);    int height=realignToGrid(false,rectangle.getY() - y + rectangle.getHeight(),true);    return new Rectangle(x,y,width,height);  } else {    return new Rectangle(x,y,rectangle.getWidth(),rectangle.getHeight());  }}  }
class C{  public static boolean isUriParamResource(String resource){  if (resource == null) {    return false;  }  resource=NamingHelper.cleanLeadingAndTrailingNewLineAndChars(resource.toLowerCase());  if (resource.startsWith("{") && resource.endsWith("}")) {    return true;  } else {    return false;  }}  }
class C{  protected ArrayList<float[]> _forwardPoly(double[] rawllpts,int ltype,int nsegs,boolean isFilled){  int n, k, flag=0, min=0, max=0;  float xp, xadj=0;  int len=rawllpts.length >> 1;  if (len < 2)   return new ArrayList<float[]>(0);  if (isComplicatedLineType(ltype)) {    return doPolyDispatch(rawllpts,ltype,nsegs,isFilled);  }  Point2D temp=new Point2D.Float(0,0);  float[] xs=new float[len];  float[] ys=new float[len];  forward(rawllpts[0],rawllpts[1],temp,true);  xp=(float)temp.getX();  xs[0]=(float)temp.getX();  ys[0]=(float)temp.getY();  for (n=1, k=2; n < len; n++, k+=2) {    forward(rawllpts[k],rawllpts[k + 1],temp,true);    xs[n]=(float)temp.getX();    ys[n]=(float)temp.getY();    if (Math.abs(xp - xs[n]) >= half_world) {      flag+=(xp < xs[n]) ? -1 : 1;      min=(flag < min) ? flag : min;      max=(flag > max) ? flag : max;      xadj=flag * world.x;    }    xp=(float)temp.getX();    if (flag != 0) {      xs[n]+=xadj;    }  }  min*=-1;  ArrayList<float[]> ret_val=null;  ret_val=new ArrayList<float[]>(2 + 2 * (max + min));  ret_val.add(xs);  ret_val.add(ys);  float[] altx=null;  for (int i=1; i <= min; i++) {    altx=new float[xs.length];    xadj=i * world.x;    for (int j=0; j < altx.length; j++) {      altx[j]=xs[j] + xadj;    }    ret_val.add(altx);    ret_val.add(ys);  }  for (int i=1; i <= max; i++) {    altx=new float[xs.length];    xadj=-i * world.x;    for (int j=0; j < altx.length; j++) {      altx[j]=xs[j] + xadj;    }    ret_val.add(altx);    ret_val.add(ys);  }  return ret_val;}  }
class C{  public static double toDegrees(final double radians){  return radians * TO_DEGREES;}  }
class C{  public static EipFactory init(){  try {    EipFactory theEipFactory=(EipFactory)EPackage.Registry.INSTANCE.getEFactory(EipPackage.eNS_URI);    if (theEipFactory != null) {      return theEipFactory;    }  } catch (  Exception exception) {    EcorePlugin.INSTANCE.log(exception);  }  return new EipFactoryImpl();}  }
class C{  public boolean isRemoved(){  return parentEdge == null;}  }
class C{  public boolean remove(int index){  if (index >= 0 && index < this.ordered.size()) {    return internalRemove(index,this.ordered.get(index));  }  return false;}  }
class C{  protected void appendSummary(StringBuffer buffer,String fieldName,char[] array){  appendSummarySize(buffer,fieldName,array.length);}  }
class C{  private void rosterSaveButtonAction(ActionEvent e){  log.debug("rosterSaveButton pressed");  if (rosterSelector.getSelectedRosterEntries().length != 0) {    RosterEntry r=rosterSelector.getSelectedRosterEntries()[0];    String profile=profileComboBox.getSelectedItem().toString();    String path=VSDecoderManager.instance().getProfilePath(profile);    if ((path == null) || (profile == null)) {      log.debug("Path and/or Profile not selected.  Ignore Save button press.");      return;    } else {      r.setOpen(true);      r.putAttribute("VSDecoder_Path",path);      r.putAttribute("VSDecoder_Profile",profile);      int value=JOptionPane.showConfirmDialog(null,MessageFormat.format(Bundle.getMessage("UpdateRoster"),new Object[]{r.titleString()}),Bundle.getMessage("SaveRoster?"),JOptionPane.YES_NO_OPTION);      if (value == JOptionPane.YES_OPTION) {        storeFile(r);      }      r.setOpen(false);    }  }}  }
class C{  public JCalValue(List<JsonValue> values){  this.values=Collections.unmodifiableList(values);}  }
class C{  public void print(final String data,final String charset) throws IOException, IllegalStateException {  LOG.trace("enter HttpConnection.print(String)");  write(EncodingUtil.getBytes(data,charset));}  }
class C{  public StateHash(){  table=new Hashtable<INode,INode>(initialCapacity);}  }
class C{  private Screen packScreen(Cursor c){  Screen screen=new Screen();  screen.id=c.getLong(ID_INDEX);  screen.rank=c.getInt(SCREEN_RANK_INDEX);  return screen;}  }
class C{  public Trigger(){  setName("inspectit-timer-strategy-trigger-thread");  setDaemon(true);}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/create-vcenter-cluster") @CheckPermission(roles={Role.TENANT_ADMIN}) public TaskResourceRep createVcenterCluster(@PathParam("id") URI id,VcenterClusterParam vcenterClusterParam){  return createOrUpdateVcenterCluster(true,id,vcenterClusterParam.getId(),null,null);}  }
class C{  public boolean equals(production other){  if (other == null)   return false;  return other._index == _index;}  }
class C{  public E addEdge(G graph,V v_i,V v_j){  E edge=factory.createEdge();  if (insertEdge(graph,v_i,v_j,edge))   return edge; else   return null;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case MappingPackage.ENUM_SOURCE__MODEL:    setModel((org.eclipse.vorto.core.api.model.datatype.Enum)null);  return;}super.eUnset(featureID);}  }
class C{  private Optional<Instant> calcLastMod(){  Instant globalLastMod=null;  for (  final ChannelInformation ci : this.channelService.list()) {    final Optional<Instant> lastMod=ofNullable(ci.getState().getModificationTimestamp());    if (globalLastMod == null || lastMod.get().isAfter(globalLastMod)) {      globalLastMod=lastMod.get();    }  }  return Optional.ofNullable(globalLastMod);}  }
class C{  public Response updateRosterEntry(String username,RosterItemEntity rosterItemEntity){  return restClient.put("users/" + username + "/roster/"+ rosterItemEntity.getJid(),rosterItemEntity,new HashMap<String,String>());}  }
class C{  private void unlockEntries(Collection<GridDhtCacheEntry> locked,AffinityTopologyVersion topVer){  assert ctx.deferredDelete() : this;  Collection<KeyCacheObject> skip=null;  try {    for (    GridCacheMapEntry entry : locked) {      if (entry != null && entry.deleted()) {        if (skip == null)         skip=new HashSet<>(locked.size(),1.0f);        skip.add(entry.key());      }    }  }  finally {    for (    GridCacheMapEntry entry : locked) {      if (entry != null)       GridUnsafe.monitorExit(entry);    }  }  for (  GridDhtCacheEntry entry : locked) {    if (entry != null)     entry.onUnlock();  }  if (skip != null && skip.size() == locked.size())   return;  for (  GridCacheMapEntry entry : locked) {    if (entry != null && (skip == null || !skip.contains(entry.key())))     ctx.evicts().touch(entry,topVer);  }}  }
class C{  public void add(S item){  if (item instanceof Ordered) {    if (!ordered.contains(item)) {      ordered.add(item);    }  } else   if (AnnotationUtils.isAnnotationDeclaredLocally(Order.class,item.getClass())) {    if (!ordered.contains(item)) {      ordered.add(item);    }  } else   if (!unordered.contains(item)) {    unordered.add(item);  }  Collections.sort(ordered,comparator);  list.clear();  list.addAll(ordered);  list.addAll(unordered);}  }
class C{  BluetoothDun(Context context,ServiceListener l){  mContext=context;  mServiceListener=l;  mAdapter=BluetoothAdapter.getDefaultAdapter();  try {    mAdapter.getBluetoothManager().registerStateChangeCallback(mStateChangeCallback);  } catch (  RemoteException re) {    Log.w(TAG,"Unable to register BluetoothStateChangeCallback",re);  }  Log.d(TAG,"BluetoothDun() call bindService");  if (!context.bindService(new Intent(IBluetoothDun.class.getName()),mConnection,0)) {    Log.e(TAG,"Could not bind to Bluetooth DUN Service");  }  Log.d(TAG,"BluetoothDun(), bindService called");}  }
class C{  public static ValueTimestamp fromMillis(long ms){  long dateValue=DateTimeUtils.dateValueFromDate(ms);  long nanos=DateTimeUtils.nanosFromDate(ms);  return fromDateValueAndNanos(dateValue,nanos);}  }
class C{  public static PushParams create(@NotNull String repository){  return new PushParams().withRepository(repository);}  }
class C{  public Socket connectForClient(String host,int port,int timeout,int socketBufferSize) throws IOException {  return connect(InetAddress.getByName(host),port,timeout,null,true,socketBufferSize);}  }
class C{  public MReplicationRun(Properties ctx,int AD_Replication_ID,Timestamp dateRun,String trxName){  super(ctx,0,trxName);  setAD_Replication_ID(AD_Replication_ID);  setName(dateRun.toString());  super.setIsReplicated(false);}  }
class C{  protected boolean joinsWith(final BS bs,final IKeyBuilder keyBuilder,final HTree rightSolutions,final HTree rightSolutionsWithoutSubqueryResult){  return joinsWith(bs,keyBuilder,rightSolutions) || joinsWith(bs,keyBuilder,rightSolutionsWithoutSubqueryResult);}  }
class C{  public void clear(){  setText("");  lastNewlinePos=0;}  }
class C{  private boolean isNum(String str){  return !str.equals("") && str.matches("^[-+]?(([0-9]+)([.]([0-9]+))?|([.]([0-9]+))?)$");}  }
class C{  private View fillSpecific(int position,int top){  boolean tempIsSelected=position == mSelectedPosition;  View temp=makeAndAddView(position,top,true,mListPadding.left,tempIsSelected);  mFirstPosition=position;  View above;  View below;  final int dividerHeight=mDividerHeight;  if (!mStackFromBottom) {    above=fillUp(position - 1,temp.getTop() - dividerHeight);    adjustViewsUpOrDown();    below=fillDown(position + 1,temp.getBottom() + dividerHeight);    int childCount=getChildCount();    if (childCount > 0) {      correctTooHigh(childCount);    }  } else {    below=fillDown(position + 1,temp.getBottom() + dividerHeight);    adjustViewsUpOrDown();    above=fillUp(position - 1,temp.getTop() - dividerHeight);    int childCount=getChildCount();    if (childCount > 0) {      correctTooLow(childCount);    }  }  if (tempIsSelected) {    return temp;  } else   if (above != null) {    return above;  } else {    return below;  }}  }
class C{  public boolean isClosed(){  return closed;}  }
class C{  private synchronized void process(){  updateDisplayString();}  }
class C{  private static void skipNames(ByteBuffer tableBuffer,int count){  for (int i=0; i < count; ++i) {    ByteUtil.forward(tableBuffer,tableBuffer.getShort());  }}  }
class C{  public static Rectangle2D convertFilterPrimitiveRegion(Element filterPrimitiveElement,Element filterElement,Element filteredElement,GraphicsNode filteredNode,Rectangle2D defaultRegion,Rectangle2D filterRegion,BridgeContext ctx){  String units="";  if (filterElement != null) {    units=getChainableAttributeNS(filterElement,null,SVG_PRIMITIVE_UNITS_ATTRIBUTE,ctx);  }  short unitsType;  if (units.length() == 0) {    unitsType=USER_SPACE_ON_USE;  } else {    unitsType=parseCoordinateSystem(filterElement,SVG_FILTER_UNITS_ATTRIBUTE,units,ctx);  }  String xStr="", yStr="", wStr="", hStr="";  if (filterPrimitiveElement != null) {    xStr=filterPrimitiveElement.getAttributeNS(null,SVG_X_ATTRIBUTE);    yStr=filterPrimitiveElement.getAttributeNS(null,SVG_Y_ATTRIBUTE);    wStr=filterPrimitiveElement.getAttributeNS(null,SVG_WIDTH_ATTRIBUTE);    hStr=filterPrimitiveElement.getAttributeNS(null,SVG_HEIGHT_ATTRIBUTE);  }  double x=defaultRegion.getX();  double y=defaultRegion.getY();  double w=defaultRegion.getWidth();  double h=defaultRegion.getHeight();  UnitProcessor.Context uctx=UnitProcessor.createContext(ctx,filteredElement);switch (unitsType) {case OBJECT_BOUNDING_BOX:    Rectangle2D bounds=filteredNode.getGeometryBounds();  if (bounds != null) {    if (xStr.length() != 0) {      x=UnitProcessor.svgHorizontalCoordinateToObjectBoundingBox(xStr,SVG_X_ATTRIBUTE,uctx);      x=bounds.getX() + x * bounds.getWidth();    }    if (yStr.length() != 0) {      y=UnitProcessor.svgVerticalCoordinateToObjectBoundingBox(yStr,SVG_Y_ATTRIBUTE,uctx);      y=bounds.getY() + y * bounds.getHeight();    }    if (wStr.length() != 0) {      w=UnitProcessor.svgHorizontalLengthToObjectBoundingBox(wStr,SVG_WIDTH_ATTRIBUTE,uctx);      w*=bounds.getWidth();    }    if (hStr.length() != 0) {      h=UnitProcessor.svgVerticalLengthToObjectBoundingBox(hStr,SVG_HEIGHT_ATTRIBUTE,uctx);      h*=bounds.getHeight();    }  }break;case USER_SPACE_ON_USE:if (xStr.length() != 0) {x=UnitProcessor.svgHorizontalCoordinateToUserSpace(xStr,SVG_X_ATTRIBUTE,uctx);}if (yStr.length() != 0) {y=UnitProcessor.svgVerticalCoordinateToUserSpace(yStr,SVG_Y_ATTRIBUTE,uctx);}if (wStr.length() != 0) {w=UnitProcessor.svgHorizontalLengthToUserSpace(wStr,SVG_WIDTH_ATTRIBUTE,uctx);}if (hStr.length() != 0) {h=UnitProcessor.svgVerticalLengthToUserSpace(hStr,SVG_HEIGHT_ATTRIBUTE,uctx);}break;default :throw new Error("invalid unitsType:" + unitsType);}Rectangle2D region=new Rectangle2D.Double(x,y,w,h);units="";if (filterElement != null) {units=getChainableAttributeNS(filterElement,null,SVG12Constants.SVG_FILTER_PRIMITIVE_MARGINS_UNITS_ATTRIBUTE,ctx);}if (units.length() == 0) {unitsType=USER_SPACE_ON_USE;} else {unitsType=parseCoordinateSystem(filterElement,SVG12Constants.SVG_FILTER_PRIMITIVE_MARGINS_UNITS_ATTRIBUTE,units,ctx);}String dxStr="", dyStr="", dwStr="", dhStr="";if (filterPrimitiveElement != null) {dxStr=filterPrimitiveElement.getAttributeNS(null,SVG12Constants.SVG_MX_ATRIBUTE);dyStr=filterPrimitiveElement.getAttributeNS(null,SVG12Constants.SVG_MY_ATRIBUTE);dwStr=filterPrimitiveElement.getAttributeNS(null,SVG12Constants.SVG_MW_ATRIBUTE);dhStr=filterPrimitiveElement.getAttributeNS(null,SVG12Constants.SVG_MH_ATRIBUTE);}if (dxStr.length() == 0) {dxStr=SVG12Constants.SVG_FILTER_MX_DEFAULT_VALUE;}if (dyStr.length() == 0) {dyStr=SVG12Constants.SVG_FILTER_MY_DEFAULT_VALUE;}if (dwStr.length() == 0) {dwStr=SVG12Constants.SVG_FILTER_MW_DEFAULT_VALUE;}if (dhStr.length() == 0) {dhStr=SVG12Constants.SVG_FILTER_MH_DEFAULT_VALUE;}region=extendRegion(dxStr,dyStr,dwStr,dhStr,unitsType,filteredNode,region,uctx);Rectangle2D.intersect(region,filterRegion,region);return region;}  }
class C{  private int findUpper(T x,int from,int to){  int len=to - from + 1, half;  while (len > 0) {    half=len / 2;    int m=from + half;    if (comp.compare(data[m],x) <= 0) {      from=m + 1;      len=len - half - 1;    } else {      len=half;    }  }  return from;}  }
class C{  @Deprecated @Override public final void add(E e){  throw new UnsupportedOperationException();}  }
class C{  private void addUnitToExternalQualMap(final Class<? extends Annotation> annoClass){  AnnotationMirror mirror=UnitsRelationsTools.buildAnnoMirrorWithNoPrefix(processingEnv,annoClass);  if (!isAliasedAnnotation(mirror)) {    String unitClassName=annoClass.getCanonicalName();    if (!externalQualsMap.containsKey(unitClassName)) {      externalQualsMap.put(unitClassName,annoClass);    }  } else {    Class<? extends Annotation> baseUnitClass=getBaseUnitAnnoClass(mirror);    if (baseUnitClass != null) {      String baseUnitClassName=baseUnitClass.getCanonicalName();      if (!externalQualsMap.containsKey(baseUnitClassName)) {        loadExternalUnit(baseUnitClassName);      }      aliasedAnnotation(mirror);    } else {    }  }  addUnitsRelations(annoClass);}  }
class C{  public void filter(final Network subNetwork,final Set<String> extractModes){  NetworkFactory factory=subNetwork.getFactory();  for (  Link link : this.fullNetwork.getLinks().values()) {    Set<String> intersection=new HashSet<>(extractModes);    intersection.retainAll(link.getAllowedModes());    if (intersection.size() > 0) {      Id<Node> fromId=link.getFromNode().getId();      Id<Node> toId=link.getToNode().getId();      Node fromNode2=subNetwork.getNodes().get(fromId);      Node toNode2=subNetwork.getNodes().get(toId);      if (fromNode2 == null) {        fromNode2=factory.createNode(fromId,link.getFromNode().getCoord());        subNetwork.addNode(fromNode2);        if (fromId == toId) {          toNode2=fromNode2;        }      }      if (toNode2 == null) {        toNode2=factory.createNode(toId,link.getToNode().getCoord());        subNetwork.addNode(toNode2);      }      Link link2=factory.createLink(link.getId(),fromNode2,toNode2);      link2.setAllowedModes(intersection);      link2.setCapacity(link.getCapacity());      link2.setFreespeed(link.getFreespeed());      link2.setLength(link.getLength());      link2.setNumberOfLanes(link.getNumberOfLanes());      NetworkUtils.setType(((Link)link2),NetworkUtils.getType(((Link)link)));      subNetwork.addLink(link2);    }  }}  }
class C{  void clear(){  for (int i=1; i <= size; i++)   queue[i]=null;  size=0;}  }
class C{  public void testLoggingEnabledSamplingEnabled() throws Exception {  logging=true;  sampling=true;  startUp();  assert logEnabled();}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  protected String engineGetURI(){  return XMLSignature.ALGO_ID_SIGNATURE_DSA;}  }
class C{  public static String stripOffExtension(final String fileName){  if (fileName.contains(extSeparator)) {    return fileName.substring(0,fileName.lastIndexOf(extSeparator));  }  return fileName;}  }
class C{  protected Node collectXblChildNodes(Node n,Node prev){  boolean isChild=false;  if (n.getNodeType() == Node.ELEMENT_NODE) {    if (!XBL_NAMESPACE_URI.equals(n.getNamespaceURI())) {      isChild=true;    } else     if (n instanceof XBLOMContentElement) {      ContentManager cm=getContentManager(n);      if (cm != null) {        NodeList selected=cm.getSelectedContent((XBLOMContentElement)n);        for (int i=0; i < selected.getLength(); i++) {          prev=collectXblChildNodes(selected.item(i),prev);        }      }    }  } else {    isChild=true;  }  if (isChild) {    nodes.add(n);    size++;    if (prev != null) {      XBLRecord rec=getRecord(prev);      rec.nextSibling=n;      rec.linksValid=true;    }    XBLRecord rec=getRecord(n);    rec.previousSibling=prev;    rec.linksValid=true;    prev=n;  }  return prev;}  }
class C{  public static void disableAllChildrenWidgets(final Control control){  if (control instanceof Composite) {    for (    final Control c : ((Composite)control).getChildren()) {      disableAllChildrenWidgets(c);    }  }  control.setData(SWTGraphicUtil.class.toString() + "_enableState",control.isEnabled());  control.setEnabled(false);}  }
class C{  public static void checkAndAppendBooleanElement(AVList params,String paramKey,Element context,String path){  if (params == null) {    String message=Logging.getMessage("nullValue.ParametersIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (paramKey == null) {    String message=Logging.getMessage("nullValue.ParameterKeyIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (context == null) {    String message=Logging.getMessage("nullValue.ElementIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Object o=params.getValue(paramKey);  if (o != null && o instanceof Boolean) {    appendBoolean(context,path,(Boolean)o);  }}  }
class C{  private Dimension layoutSize(Container target,boolean preferred){synchronized (target.getTreeLock()) {    int targetWidth=target.getSize().width;    if (targetWidth == 0) {      targetWidth=Integer.MAX_VALUE;    }    int hgap=getHgap();    int vgap=getVgap();    Insets insets=target.getInsets();    int horizontalInsetsAndGap=insets.left + insets.right + hgap * 2;    int maxWidth=targetWidth - horizontalInsetsAndGap;    Dimension dim=new Dimension(0,0);    int rowWidth=0;    int rowHeight=0;    int nmembers=target.getComponentCount();    for (int i=0; i < nmembers; i++) {      Component m=target.getComponent(i);      if (m.isVisible()) {        Dimension d=preferred ? m.getPreferredSize() : m.getMinimumSize();        if (rowWidth + d.width > maxWidth) {          addRow(dim,rowWidth,rowHeight);          rowWidth=0;          rowHeight=0;        }        if (rowWidth != 0) {          rowWidth+=hgap;        }        rowWidth+=d.width;        rowHeight=Math.max(rowHeight,d.height);      }    }    addRow(dim,rowWidth,rowHeight);    dim.width+=horizontalInsetsAndGap;    dim.height+=insets.top + insets.bottom + vgap * 2;    Container scrollPane=SwingUtilities.getAncestorOfClass(JScrollPane.class,target);    if (scrollPane != null && target.isValid()) {      int extra=1;      if (scrollPane instanceof JScrollPane) {        JScrollPane jsp=(JScrollPane)scrollPane;        JScrollBar vsb=jsp.getVerticalScrollBar();        if (vsb != null) {          extra+=Math.max(0,vsb.getWidth());        }      }      dim.width-=hgap + extra;    }    return dim;  }}  }
class C{  public WriteMultipleRegistersResponse(){  super();  setFunctionCode(Modbus.WRITE_MULTIPLE_REGISTERS);  setDataLength(4);}  }
class C{  public Reserve(){  super();}  }
class C{  public void exportGroupChangePathParams(URI storageURI,URI exportGroupURI,URI volumeURI,String token) throws ControllerException {  try {    WorkflowStepCompleter.stepExecuting(token);    final String workflowKey="exportChangeParams";    if (!WorkflowService.getInstance().hasWorkflowBeenCreated(token,workflowKey)) {      DiscoveredSystemObject storage=ExportWorkflowUtils.getStorageSystem(_dbClient,storageURI);      MaskingOrchestrator orchestrator=getOrchestrator(storage.getSystemType());      orchestrator.exportGroupChangePathParams(storageURI,exportGroupURI,volumeURI,token);      WorkflowService.getInstance().markWorkflowBeenCreated(token,workflowKey);    }  } catch (  Exception e) {    DeviceControllerException exception=DeviceControllerException.exceptions.exportGroupChangePathParams(e);    WorkflowStepCompleter.stepFailed(token,exception);  }}  }
class C{  public boolean asBoolean(){  return (boolean)value;}  }
class C{  public TFloatHash(TFloatHashingStrategy strategy){  _hashingStrategy=strategy;}  }
class C{  public ViolationSuppressor(Printer printer,List<Token> singleLineComments,List<Token> multilineComments){  super(printer,singleLineComments,multilineComments);}  }
class C{  private void hilite(Graphics graphics,JComponent button){  graphics.setColor(style.getHighLightColor());  Insets insets=button.getInsets();  int width=button.getWidth() - insets.right - insets.left- 1;  int height=button.getHeight() - insets.top - insets.bottom- 1;  graphics.drawRect(insets.left,insets.top,width,height);}  }
class C{  public void test_delete001(){  final Journal journal=getStore();  try {    final String name="abc";{      IndexMetadata md=new IndexMetadata(name,UUID.randomUUID());      md.setIsolatable(true);      journal.registerIndex(md);      journal.commit();    }    final long tx0=journal.newTx(ITx.UNISOLATED);    final long tx1=journal.newTx(ITx.UNISOLATED);    assertNotSame(tx0,tx1);    assertTrue(Math.abs(tx0) >= journal.getRootBlockView().getLastCommitTime());    assertTrue(Math.abs(tx1) > Math.abs(tx0));    final byte[] id0=new byte[]{0};    final byte[] v0=getRandomData().array();    journal.getIndex(name,tx0).insert(id0,v0);    assertEquals(v0,journal.getIndex(name,tx0).lookup(id0));    assertFalse(journal.getIndex(name,tx1).contains(id0));    assertEquals(v0,journal.getIndex(name,tx0).remove(id0));    assertFalse(journal.getIndex(name,tx0).contains(id0));    assertNull(journal.getIndex(name,tx0).remove(id0));    final byte[] v1=getRandomData().array();    assertNull(journal.getIndex(name,tx0).insert(id0,v1));    assertFalse(journal.getIndex(name,tx1).contains(id0));    assertFalse(journal.getIndex(name).contains(id0));    assertNotSame(0L,journal.commit(tx0));    assertFalse(journal.getIndex(name,tx1).contains(id0));    assertTrue(journal.getIndex(name).contains(id0));    assertEquals(0L,journal.commit(tx1));    assertTrue(journal.getIndex(name).contains(id0));  }  finally {    journal.destroy();  }}  }
class C{  public void generate(BatchEnvironment env,ClassDoc inputClass,File destDir){  RemoteClass remoteClass=RemoteClass.forClass(env,inputClass);  if (remoteClass == null) {    return;  }  StubSkeletonWriter writer=new StubSkeletonWriter(env,remoteClass,version);  File stubFile=sourceFileForClass(writer.stubClassName(),destDir);  try {    IndentingWriter out=new IndentingWriter(new OutputStreamWriter(new FileOutputStream(stubFile)));    writer.writeStub(out);    out.close();    if (env.verbose()) {      env.output(Resources.getText("rmic.wrote",stubFile.getPath()));    }    env.addGeneratedFile(stubFile);  } catch (  IOException e) {    env.error("rmic.cant.write",stubFile.toString());    return;  }  File skeletonFile=sourceFileForClass(writer.skeletonClassName(),destDir);  if (version == StubVersion.V1_1 || version == StubVersion.VCOMPAT) {    try {      IndentingWriter out=new IndentingWriter(new OutputStreamWriter(new FileOutputStream(skeletonFile)));      writer.writeSkeleton(out);      out.close();      if (env.verbose()) {        env.output(Resources.getText("rmic.wrote",skeletonFile.getPath()));      }      env.addGeneratedFile(skeletonFile);    } catch (    IOException e) {      env.error("rmic.cant.write",skeletonFile.toString());      return;    }  } else {    File skeletonClassFile=classFileForClass(writer.skeletonClassName(),destDir);    skeletonFile.delete();    skeletonClassFile.delete();  }}  }
class C{  public void configureTable(JTable slotTable){  slotTable.getTableHeader().setReorderingAllowed(true);  slotTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);  for (int i=0; i < slotTable.getColumnCount(); i++) {    int width=getPreferredWidth(i);    slotTable.getColumnModel().getColumn(i).setPreferredWidth(width);  }  slotTable.sizeColumnsToFit(-1);  setColumnToHoldButton(slotTable,LocoDataModel.DELCOLUMN);}  }
class C{  public final void quickPop(int n){  m_firstFree-=n;}  }
class C{  public static void restart(){  if (System.getProperty(KSE_EXE) != null) {    restartAsKseExe();  } else   if (System.getProperty(KSE_APP) != null) {    restartAsKseApp();  } else   if (System.getProperty(JAVA_CLASS_PATH).equals(KSE_JAR)) {    restartAsKseJar();  } else {    restartAsKseClass();  }}  }
class C{  public Builder addDefaultLocation(String geohash){  this.defaultLocations.add(geohash);  return this;}  }
class C{  public Class<?> serviceType(){  return serviceType;}  }
class C{  public static boolean isEmpty(final short[] array){  return array == null || array.length == 0;}  }
class C{  private double PStar(double x,double scale){  return scale * Math.exp(-2.0 * x * scale);}  }
class C{  public static byte[] decode(byte[] source) throws Base64DecoderException {  return decode(source,0,source.length);}  }
class C{  public TimestampedSigner(){}  }
class C{  @org.junit.Test public void testCompoundAdjectives(){  Bot bot=Bot.createInstance();  Language language=bot.mind().getThought(Language.class);  language.setLearningMode(LearningMode.Disabled);  TextEntry text=bot.awareness().getSense(TextEntry.class);  List<String> output=registerForOutput(text);  text.input("the grass is green");  String response=waitForOutput(output);  assertKnown(response);  text.input("is the grass very very green?");  response=waitForOutput(output);  assertUncertain(response);  assertKeyword(response,"very very green");  text.input("the grass is very very green");  response=waitForOutput(output);  assertKnown(response);  assertKeyword(response,"very very green");  text.input("is the grass very very green?");  response=waitForOutput(output);  assertTrue(response);  assertKeyword(response,"the grass is very very green");  text.input("what is very very green?");  response=waitForOutput(output);  assertKeyword(response,"grass is very very green");  text.input("grass is not very very green");  response=waitForOutput(output);  assertKnown(response);  assertKeyword(response,"grass is not very very green");  text.input("what is very very green?");  response=waitForOutput(output);  assertUnknown(response);  text.input("I am a very nice human");  response=waitForOutput(output);  assertKnown(response);  assertKeyword(response,"a very nice human");  text.input("am I a very nice human?");  response=waitForOutput(output);  assertTrue(response);  assertKeyword(response,"a very nice human");  text.input("am I a human?");  response=waitForOutput(output);  assertTrue(response);  assertKeyword(response,"a human");  text.input("am I dog human?");  response=waitForOutput(output);  assertKeyword(response,"am I dog human?");  text.input("am I a dog human?");  response=waitForOutput(output);  assertKeyword(response,"am I a dog human?");  text.input("I am dog human?");  response=waitForOutput(output);  assertKeyword(response,"I am dog human?");  text.input("I am a dog human?");  response=waitForOutput(output);  assertKeyword(response,"I am a dog human?");  bot.shutdown();}  }
class C{  public ByteOrder byteOrder(){  return ByteOrder.BIG_ENDIAN;}  }
class C{  public void awaitTimeout(long awaitTimeout,long awaitJoin) throws InterruptedException {  long end=System.nanoTime() + awaitTimeout * 1000 * 1000000L;  for (  Thread t : threads) {    long time=System.nanoTime();    if (time < end) {      t.join(((end - time) / 1000000),(int)((end - time) % 1000000));    }  }  check(numthreads,0,0);  for (  Thread t : threads) {    t.interrupt();  }  end=System.nanoTime() + awaitJoin * 1000 * 1000000L;  for (  Thread t : threads) {    long time=System.nanoTime();    if (time < end) {      t.join(((end - time) / 1000000),(int)((end - time) % 1000000));    }  }  check(numthreads,0,numthreads);}  }
class C{  public UserAgentViewport(UserAgent userAgent){  this.userAgent=userAgent;}  }
class C{  public java.sql.PreparedStatement prepareStatement(String sql,int resultSetType,int resultSetConcurrency) throws SQLException {synchronized (getConnectionMutex()) {    checkClosed();    PreparedStatement pStmt=null;    boolean canServerPrepare=true;    String nativeSql=getProcessEscapeCodesForPrepStmts() ? nativeSQL(sql) : sql;    if (this.useServerPreparedStmts && getEmulateUnsupportedPstmts()) {      canServerPrepare=canHandleAsServerPreparedStatement(nativeSql);    }    if (this.useServerPreparedStmts && canServerPrepare) {      if (this.getCachePreparedStatements()) {synchronized (this.serverSideStatementCache) {          pStmt=(com.mysql.jdbc.ServerPreparedStatement)this.serverSideStatementCache.remove(sql);          if (pStmt != null) {            ((com.mysql.jdbc.ServerPreparedStatement)pStmt).setClosed(false);            pStmt.clearParameters();          }          if (pStmt == null) {            try {              pStmt=ServerPreparedStatement.getInstance(getMultiHostSafeProxy(),nativeSql,this.database,resultSetType,resultSetConcurrency);              if (sql.length() < getPreparedStatementCacheSqlLimit()) {                ((com.mysql.jdbc.ServerPreparedStatement)pStmt).isCached=true;              }              pStmt.setResultSetType(resultSetType);              pStmt.setResultSetConcurrency(resultSetConcurrency);            } catch (            SQLException sqlEx) {              if (getEmulateUnsupportedPstmts()) {                pStmt=(PreparedStatement)clientPrepareStatement(nativeSql,resultSetType,resultSetConcurrency,false);                if (sql.length() < getPreparedStatementCacheSqlLimit()) {                  this.serverSideStatementCheckCache.put(sql,Boolean.FALSE);                }              } else {                throw sqlEx;              }            }          }        }      } else {        try {          pStmt=ServerPreparedStatement.getInstance(getMultiHostSafeProxy(),nativeSql,this.database,resultSetType,resultSetConcurrency);          pStmt.setResultSetType(resultSetType);          pStmt.setResultSetConcurrency(resultSetConcurrency);        } catch (        SQLException sqlEx) {          if (getEmulateUnsupportedPstmts()) {            pStmt=(PreparedStatement)clientPrepareStatement(nativeSql,resultSetType,resultSetConcurrency,false);          } else {            throw sqlEx;          }        }      }    } else {      pStmt=(PreparedStatement)clientPrepareStatement(nativeSql,resultSetType,resultSetConcurrency,false);    }    return pStmt;  }}  }
class C{  public static void configItem(String name,boolean value){  openMinorTag("conf");  attribute("name",name);  attribute("value",value);  closeMinorTag();}  }
class C{  private static void removeLoopSafepoint(StructuredGraph graph){  LoopBeginNode loopBegin=findFirstLoop(graph);  loopBegin.disableSafepoint();}  }
class C{  @Override public void createIndexKeyspace(final String ksname,final int replicationFactor) throws IOException {  try {    Keyspace ks=Keyspace.open(ksname);    if (ks != null && !(ks.getReplicationStrategy() instanceof NetworkTopologyStrategy)) {      throw new IOException("Cannot create index, underlying keyspace requires the NetworkTopologyStrategy.");    }  } catch (  AssertionError e) {  }  try {    QueryProcessor.process(String.format("CREATE KEYSPACE IF NOT EXISTS \"%s\" WITH replication = {'class':'NetworkTopologyStrategy', '%s':'%d' };",ksname,DatabaseDescriptor.getLocalDataCenter(),replicationFactor),ConsistencyLevel.LOCAL_ONE);  } catch (  Throwable e) {    throw new IOException(e.getMessage(),e);  }}  }
class C{  public AfterEveryEvent_ createAfterEveryEvent_(){  AfterEveryEvent_Impl afterEveryEvent_=new AfterEveryEvent_Impl();  return afterEveryEvent_;}  }
class C{  public Metadata createMetadata(){  MetadataImpl metadata=new MetadataImpl();  return metadata;}  }
class C{  public int createParticle(ParticleDef def){  assert (isLocked() == false);  if (isLocked()) {    return 0;  }  int p=m_particleSystem.createParticle(def);  return p;}  }
class C{  public void printVolume(){  volume.printTotal();}  }
class C{  public AttributeInfo copy(ConstPool newCp,Map classnames){  return new DeprecatedAttribute(newCp);}  }
class C{  public static boolean isActionDown(KeyEvent event){  return event.getAction() == KeyEvent.ACTION_DOWN;}  }
class C{  public void pick(MotionEvent event){  this.pickedObject=null;  PickedObjectList pickList=getWorldWindow().pick(event.getX(),event.getY());  PickedObject topPickedObject=pickList.topPickedObject();  if (topPickedObject != null) {    if (topPickedObject.getUserObject() instanceof Renderable) {      this.pickedObject=(Renderable)topPickedObject.getUserObject();    }  }  this.isDraggingArmed=(this.pickedObject != null) && (this.selectedObject == this.pickedObject) && (this.selectedObject.hasUserProperty(MOVABLE));}  }
class C{  public String dimensonsToString(String sep){  StringBuilder result=new StringBuilder();  result.append("[");  for (int dim=BitsUtil.nextSetBit(dimensions,0); dim >= 0; dim=BitsUtil.nextSetBit(dimensions,dim + 1)) {    if (result.length() == 1) {      result.append(dim + 1);    } else {      result.append(sep).append(dim + 1);    }  }  result.append("]");  return result.toString();}  }
class C{  public boolean strongNeighbors(NumberVector v1,NumberVector v2,PCAFilteredResult pca1,PCAFilteredResult pca2){  if (pca1.getCorrelationDimension() != pca2.getCorrelationDimension()) {    return false;  }  if (!approximatelyLinearDependent(pca1,pca2) || !approximatelyLinearDependent(pca2,pca1)) {    return false;  }  return mahalanobisDistance(pca1.similarityMatrix(),v1.toArray(),v2.toArray()) <= settings.tau && mahalanobisDistance(pca2.similarityMatrix(),v1.toArray(),v2.toArray()) <= settings.tau;}  }
class C{  public SyncResult syncAll() throws LdapException, SyncException {  LOG.info("Preparing synchronization environment");  final SyncResult syncResult=new SyncResult();  final Set<String> existingIds=getAllUserIds();  LOG.debug("Using selector {} for synchronization",selector);  LOG.info("Starting synchronization of users/profiles");  try (Connection connection=connFactory.getConnection()){    connection.open();    long iteration=0;    for (    LdapEntry entry : selector.select(connection)) {      iteration++;      idNormalizer.normalize(entry);      final UserImpl user=userMapper.apply(entry);      if (!isValid(user)) {        continue;      }      final ProfileImpl profile=profileMapper.apply(entry);      try {        if (existingIds.remove(user.getId())) {          refreshUserAndProfile(user,profile);          syncResult.refreshed++;          LOG.debug("Refreshed user & profile '{}'",user.getId());        } else {          createUserAndProfile(user,profile);          syncResult.created++;          LOG.debug("Created user & profile '{}'",user.getId());        }      } catch (      RuntimeException|ConflictException|NotFoundException|ServerException x) {        LOG.info(format("Couldn't synchronize(update/create) user or his profile '%s' " + "due to occurred error, original ldap entry '%s'",user.getId(),entry),x);        syncResult.failed++;      }      if (iteration % EACH_ENTRIES_COUNT_CHECK_INTERRUPTION == 0) {        if (Thread.currentThread().isInterrupted()) {          LOG.warn("User/Profile synchronization was interrupted");          LOG.info("Synchronization result: {}",syncResult);          return syncResult;        }      }    }  }   for (  String existingId : existingIds) {    try {      userDao.remove(existingId);      syncResult.removed++;      LOG.debug("Removed user '{}'",existingId);    } catch (    ServerException|ConflictException x) {      LOG.info(format("Couldn't remove user '%s' due to occurred error",existingId),x);      syncResult.failed++;    }  }  LOG.info("Synchronization result: {}",syncResult);  return syncResult;}  }
class C{  @Override public Long lpush(final String key,final String... strings){  checkIsInMultiOrPipeline();  client.lpush(key,strings);  return client.getIntegerReply();}  }
class C{  public JSONObject optJSONObject(String key){  Object o=opt(key);  return o instanceof JSONObject ? (JSONObject)o : null;}  }
class C{  @SuppressWarnings("unchecked") private static HeapOperand<Object>[] extendHArray(HeapOperand<Object>[] H){  HeapOperand<Object>[] res;  if (H == null) {    res=new HeapOperand[1];  } else {    res=new HeapOperand[H.length + 1];    for (int i=0; i < H.length; ++i) {      res[i + 1]=H[i];    }  }  return res;}  }
class C{  public synchronized void addExecutionStageListener(ExecutionStageListener l){  if (m_ExecutionStageListeners == null)   m_ExecutionStageListeners=new HashSet<>();  m_ExecutionStageListeners.add(l);}  }
class C{  private static void validateChannelName(final String name,final ValidationContext ctx){  if (name == null || name.isEmpty()) {    return;  }  final Matcher m=ChannelService.NAME_PATTERN.matcher(name);  if (!m.matches()) {    ctx.error("names",String.format("The channel name '%s' must match the pattern '%s'",name,ChannelService.NAME_PATTERN.pattern()));  }}  }
class C{  ClassIntrospector build(){  if ((methodAppearanceFineTuner == null || methodAppearanceFineTuner instanceof SingletonCustomizer) && (methodSorter == null || methodSorter instanceof SingletonCustomizer)) {    ClassIntrospector instance;synchronized (INSTANCE_CACHE) {      Reference instanceRef=(Reference)INSTANCE_CACHE.get(this);      instance=instanceRef != null ? (ClassIntrospector)instanceRef.get() : null;      if (instance == null) {        ClassIntrospectorBuilder thisClone=(ClassIntrospectorBuilder)clone();        instance=new ClassIntrospector(thisClone,new Object(),true,true);        INSTANCE_CACHE.put(thisClone,new WeakReference(instance,INSTANCE_CACHE_REF_QUEUE));      }    }    removeClearedReferencesFromInstanceCache();    return instance;  } else {    return new ClassIntrospector(this,new Object(),true,false);  }}  }
class C{  public ContinueToSendToBatchSenderAsstManager(int processedWorkerCount){  super();  this.processedWorkerCount=processedWorkerCount;}  }
class C{  Command createResetCommand(String value){  if ((value == null) || (value.equals(""))) {    value=htmlC.getUIManager().localize("html.reset",HTMLForm.DEFAULT_RESET_TEXT);  }  return new NamedCommand(null,value,this,false);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (bound_1: ");  result.append(bound_1);  result.append(", lowerBound_1: ");  result.append(lowerBound_1);  result.append(", upperBound_1: ");  result.append(upperBound_1);  result.append(", bound_int: ");  result.append(bound_int);  result.append(')');  return result.toString();}  }
class C{  private List<GridCacheEntryEx> lockEntries(Collection<? extends K> keys){  List<GridCacheEntryEx> locked=new ArrayList<>(keys.size());  boolean nullKeys=false;  while (true) {    for (    K key : keys) {      if (key == null) {        nullKeys=true;        break;      }      GridCacheEntryEx entry=entryEx(ctx.toCacheKeyObject(key));      locked.add(entry);    }    if (nullKeys)     break;    for (int i=0; i < locked.size(); i++) {      GridCacheEntryEx entry=locked.get(i);      GridUnsafe.monitorEnter(entry);      if (entry.obsolete()) {        for (int j=0; j <= i; j++)         GridUnsafe.monitorExit(locked.get(j));        locked.clear();        break;      }    }    if (!locked.isEmpty())     return locked;  }  assert nullKeys;  AffinityTopologyVersion topVer=ctx.affinity().affinityTopologyVersion();  for (  GridCacheEntryEx entry : locked)   ctx.evicts().touch(entry,topVer);  throw new NullPointerException("Null key.");}  }
class C{  public static EventBean[] toArray(Collection<EventBean> eventList){  if ((eventList == null) || (eventList.isEmpty())) {    return null;  }  return eventList.toArray(new EventBean[eventList.size()]);}  }
class C{  @Override protected float[] calculateAnchorPoint(ValueTick tick,double cursor,Rectangle2D dataArea,RectangleEdge edge){  if (tick instanceof CycleBoundTick) {    boolean mapsav=this.boundMappedToLastCycle;    this.boundMappedToLastCycle=((CycleBoundTick)tick).mapToLastCycle;    float[] ret=super.calculateAnchorPoint(tick,cursor,dataArea,edge);    this.boundMappedToLastCycle=mapsav;    return ret;  }  return super.calculateAnchorPoint(tick,cursor,dataArea,edge);}  }
class C{  public static URL resolveURL(URL base,String target) throws MalformedURLException {  target=target.trim();  if (target.startsWith("?")) {    return fixPureQueryTargets(base,target);  }  return new URL(base,target);}  }
class C{  private boolean handleRequestLoadingAndLinkingState(Operation request){  if (hasOption(Service.ServiceOption.INSTRUMENTATION)) {    request.setHandlerInvokeTime(System.nanoTime() / 1000);    adjustStat(request.getAction() + Service.STAT_NAME_REQUEST_COUNT,1.0);  }  if (checkServiceStopped(request,false)) {    return true;  }  if (request.isFromReplication()) {    ServiceDocument state=request.getBody(this.context.stateType);    request.linkState(state);    return false;  }  loadAndLinkState(request);  return true;}  }
class C{  private final String createMsg(ListResourceBundle fResourceBundle,String msgKey,Object args[]){  String fmsg=null;  boolean throwex=false;  String msg=null;  if (msgKey != null)   msg=fResourceBundle.getString(msgKey); else   msgKey="";  if (msg == null) {    throwex=true;    try {      msg=java.text.MessageFormat.format(MsgKey.BAD_MSGKEY,new Object[]{msgKey,m_resourceBundleName});    } catch (    Exception e) {      msg="The message key '" + msgKey + "' is not in the message class '"+ m_resourceBundleName+ "'";    }  } else   if (args != null) {    try {      int n=args.length;      for (int i=0; i < n; i++) {        if (null == args[i])         args[i]="";      }      fmsg=java.text.MessageFormat.format(msg,args);    } catch (    Exception e) {      throwex=true;      try {        fmsg=java.text.MessageFormat.format(MsgKey.BAD_MSGFORMAT,new Object[]{msgKey,m_resourceBundleName});        fmsg+=" " + msg;      } catch (      Exception formatfailed) {        fmsg="The format of message '" + msgKey + "' in message class '"+ m_resourceBundleName+ "' failed.";      }    }  } else   fmsg=msg;  if (throwex) {    throw new RuntimeException(fmsg);  }  return fmsg;}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public boolean isSnapshot(){  return snapshot;}  }
class C{  public boolean containsListener(Listener listener){  return this.listeners.contains(listener);}  }
class C{  private void addBitmap(byte[] bitmapData){  addMultipart(NokiaItemType.OTA_BITMAP,bitmapData);}  }
class C{  @GwtIncompatible public static <T>T[] concat(T[] first,T[] second,Class<T> type){  T[] result=newArray(type,first.length + second.length);  System.arraycopy(first,0,result,0,first.length);  System.arraycopy(second,0,result,first.length,second.length);  return result;}  }
class C{  public final void yyreset(java.io.Reader reader){  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtEOF=false;}  }
class C{  private boolean validateBOM(MBOM bom){  MBOMProduct[] BOMproducts=MBOMProduct.getOfBOM(bom);  for (int i=0; i < BOMproducts.length; i++) {    MBOMProduct BOMproduct=BOMproducts[i];    MProduct pp=new MProduct(getCtx(),BOMproduct.getM_BOMProduct_ID(),get_TrxName());    if (pp.isBOM())     return validateProduct(pp,bom.getBOMType(),bom.getBOMUse());  }  return true;}  }
class C{  public Intent execute(Context context){  XYMultipleSeriesDataset series=new XYMultipleSeriesDataset();  XYValueSeries newTicketSeries=new XYValueSeries("New Tickets");  newTicketSeries.add(1f,2,14);  newTicketSeries.add(2f,2,12);  newTicketSeries.add(3f,2,18);  newTicketSeries.add(4f,2,5);  newTicketSeries.add(5f,2,1);  series.addSeries(newTicketSeries);  XYValueSeries fixedTicketSeries=new XYValueSeries("Fixed Tickets");  fixedTicketSeries.add(1f,1,7);  fixedTicketSeries.add(2f,1,4);  fixedTicketSeries.add(3f,1,18);  fixedTicketSeries.add(4f,1,3);  fixedTicketSeries.add(5f,1,1);  series.addSeries(fixedTicketSeries);  XYMultipleSeriesRenderer renderer=new XYMultipleSeriesRenderer();  renderer.setAxisTitleTextSize(16);  renderer.setChartTitleTextSize(20);  renderer.setLabelsTextSize(15);  renderer.setLegendTextSize(15);  renderer.setMargins(new int[]{20,30,15,0});  XYSeriesRenderer newTicketRenderer=new XYSeriesRenderer();  newTicketRenderer.setColor(Color.BLUE);  renderer.addSeriesRenderer(newTicketRenderer);  XYSeriesRenderer fixedTicketRenderer=new XYSeriesRenderer();  fixedTicketRenderer.setColor(Color.GREEN);  renderer.addSeriesRenderer(fixedTicketRenderer);  setChartSettings(renderer,"Project work status","Priority","",0.5,5.5,0,5,Color.GRAY,Color.LTGRAY);  renderer.setXLabels(7);  renderer.setYLabels(0);  renderer.setShowGrid(false);  return ChartFactory.getBubbleChartIntent(context,series,renderer,"Project tickets");}  }
class C{  public boolean accept(T obj){  if (args.contains(obj)) {    return judgment;  } else {    return !judgment;  }}  }
class C{  @Override public void unregisterTap(Tap tap){  if (mLSMDemodulator != null) {    mLSMDemodulator.unregisterTap(tap);  }switch (tap.getName()) {case INSTRUMENT_BASEBAND_FILTER_OUTPUT:    mStreamConverter.setListener(mAGC);  break;case INSTRUMENT_AGC_OUTPUT:mAGC.setListener(mLSMDemodulator);break;case INSTRUMENT_LSM_DEMODULATOR_OUTPUT:mLSMDemodulator.setSymbolListener(mQPSKSlicer);break;case INSTRUMENT_QPSK_SLICER_OUTPUT:mQPSKSlicer.removeListener((DibitTap)tap);break;default :throw new IllegalArgumentException("Unrecognized tap: " + tap.getName());}}  }
class C{  boolean parseNextValidCue(ParsableByteArray webvttData,WebvttCue.Builder builder){  Matcher cueHeaderMatcher;  while ((cueHeaderMatcher=findNextCueHeader(webvttData)) != null) {    if (parseCue(cueHeaderMatcher,webvttData,builder,textBuilder)) {      return true;    }  }  return false;}  }
class C{  public static byte[] decode(String input) throws ParseException {  if (input.length() == 0) {    return new byte[0];  }  byte[] input58=new byte[input.length()];  for (int i=0; i < input.length(); ++i) {    char c=input.charAt(i);    int digit=c < 128 ? INDEXES[c] : -1;    if (digit < 0) {      throw new ParseException("Illegal character " + c + " at position "+ i,i);    }    input58[i]=(byte)digit;  }  int zeros=0;  while (zeros < input58.length && input58[zeros] == 0) {    ++zeros;  }  byte[] decoded=new byte[input.length()];  int outputStart=decoded.length;  for (int inputStart=zeros; inputStart < input58.length; ) {    decoded[--outputStart]=divmod(input58,inputStart,58,256);    if (input58[inputStart] == 0) {      ++inputStart;    }  }  while (outputStart < decoded.length && decoded[outputStart] == 0) {    ++outputStart;  }  return Arrays.copyOfRange(decoded,outputStart - zeros,decoded.length);}  }
class C{  public static double[] multiply(double[] d1,double[] d2){  assert d1.length == d2.length;  double[] out=new double[d1.length];  for (int i=0; i < d1.length; i++) {    out[i]=d1[i] * d2[i];  }  return out;}  }
class C{  public long lowerBound(){  return lowerBound;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.ACCESSIBLE_TYPE_ELEMENT__DECLARED_TYPE_ACCESS_MODIFIER:    return declaredTypeAccessModifier != DECLARED_TYPE_ACCESS_MODIFIER_EDEFAULT;case TypesPackage.ACCESSIBLE_TYPE_ELEMENT__DECLARED_PROVIDED_BY_RUNTIME:  return declaredProvidedByRuntime != DECLARED_PROVIDED_BY_RUNTIME_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:44.439 -0500",hash_original_method="133C96EC98AEE8D59630F091A182C267",hash_generated_method="6F57CB283102230538221213F534B8CF") public File(String dirPath,String name){  this.path=dirPath;  this.name=name;}  }
class C{  public static byte[] createJarBytes(final Manifest manifest) throws IOException {  try (final ByteArrayOutputStream stream=new ByteArrayOutputStream()){    try (final JarOutputStream outputStream=null == manifest ? new JarOutputStream(stream) : new JarOutputStream(stream,manifest)){      outputStream.flush();    }     return stream.toByteArray();  } }  }
class C{  public File createPDF(){  return null;}  }
class C{  public static void fill(float[] array,float value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  public colgroup addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  @Override public void updateBlob(int columnIndex,Blob x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateBlob(" + columnIndex + ", x);");    }    checkClosed();    Value v;    if (x == null) {      v=ValueNull.INSTANCE;    } else {      v=conn.createBlob(x.getBinaryStream(),-1);    }    update(columnIndex,v);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void onClientReconnected(boolean clusterRestarted){  enter();  try {    PlatformCallbackUtils.onClientReconnected(envPtr,clusterRestarted);  }  finally {    leave();  }}  }
class C{  @Override public Long decr(final byte[] key){  checkIsInMultiOrPipeline();  client.decr(key);  return client.getIntegerReply();}  }
class C{  @EventHandler(ignoreCancelled=true) public void onBlockPlace(BlockPlaceEvent event){  if (!canInteract(event.getPlayer())) {    event.setCancelled(true);  }}  }
class C{  public void handle(StateContext state,SubCollectionReadCollectionContext ctx){  throw new UnsupportedOperationException(this.getClass().toString());}  }
class C{  protected void appendFieldEnd(final StringBuffer buffer,final String fieldName){  appendFieldSeparator(buffer);}  }
class C{  public Builder tcpHostNames(Collection<String> tcpHostNames){  impl.tcpHostNames=U.sealList(tcpHostNames);  return this;}  }
class C{  public static void putAuthorizationRequestIntoScope(final AuthorizationRequest authorizationRequest,final MutableAttributeMap context){  context.put("authorizationRequest",authorizationRequest);}  }
class C{  public void testInflatingFilesRequiringZipRefill() throws IOException {  int originalSize=1024 * 1024;  byte[] readBuffer=new byte[8192];  ZipFile zipFile=new ZipFile(createZipFile(1,originalSize));  for (Enumeration<? extends ZipEntry> e=zipFile.entries(); e.hasMoreElements(); ) {    ZipEntry zipEntry=e.nextElement();    assertTrue("This test needs >64 KiB of compressed data to exercise Inflater",zipEntry.getCompressedSize() > (64 * 1024));    InputStream is=zipFile.getInputStream(zipEntry);    while (is.read(readBuffer,0,readBuffer.length) != -1) {    }    is.close();  }  zipFile.close();}  }
class C{  public CompilingLoader(ClassLoader loader,PathImpl classDir,PathImpl sourceDir,String args,String encoding){  this(loader);  if (classDir.getScheme().equals("http") || classDir.getScheme().equals("https")) {    throw new ConfigException(L.l("compiling class loader can't be '{0}'.  Use compile=false.",classDir));  }  _sourceDir=sourceDir;  _classDir=classDir;  _encoding=encoding;}  }
class C{  public boolean relative(int rows) throws SQLException {  checkState();  boolean b=rs.relative(rows);  notifyCursorMoved();  return b;}  }
class C{  public void write(OutStream out) throws IOException {  out.flushBits();  if (scaleX != 1.0 || scaleY != 1.0) {    int intScaleX=(int)(scaleX * 65536.0);    int intScaleY=(int)(scaleY * 65536.0);    int scaleBits=OutStream.determineSignedBitSize(intScaleX);    int scaleBits2=OutStream.determineSignedBitSize(intScaleY);    if (scaleBits < scaleBits2) {      scaleBits=scaleBits2;    }    out.writeUBits(1,1);    out.writeUBits(5,scaleBits);    out.writeSBits(scaleBits,intScaleX);    out.writeSBits(scaleBits,intScaleY);  } else {    out.writeUBits(1,0);  }  if (skew0 != 0.0 || skew1 != 0.0) {    int intSkew0=(int)(skew0 * 65536.0);    int intSkew1=(int)(skew1 * 65536.0);    int skewBits=OutStream.determineSignedBitSize(intSkew0);    int skewBits2=OutStream.determineSignedBitSize(intSkew1);    if (skewBits < skewBits2) {      skewBits=skewBits2;    }    out.writeUBits(1,1);    out.writeUBits(5,skewBits);    out.writeSBits(skewBits,intSkew0);    out.writeSBits(skewBits,intSkew1);  } else {    out.writeUBits(1,0);  }  if (translateX == 0 && translateY == 0) {    out.writeUBits(5,0);  } else {    int translateBits=OutStream.determineSignedBitSize((int)translateX);    int translateBits2=OutStream.determineSignedBitSize((int)translateY);    if (translateBits < translateBits2) {      translateBits=translateBits2;    }    out.writeUBits(5,translateBits);    out.writeSBits(translateBits,(int)translateX);    out.writeSBits(translateBits,(int)translateY);  }  out.flushBits();}  }
class C{  private void nextOperation(){  Pair<Target,RemoteOperation> next=null;synchronized (mPendingOperations) {    next=mPendingOperations.peek();  }  if (next != null) {    mCurrentOperation=next.second;    RemoteOperationResult result=null;    try {      if (mLastTarget == null || !mLastTarget.equals(next.first)) {        mLastTarget=next.first;        if (mLastTarget.mAccount != null) {          OwnCloudAccount ocAccount=new OwnCloudAccount(mLastTarget.mAccount,mService);          mOwnCloudClient=OwnCloudClientManagerFactory.getDefaultSingleton().getClientFor(ocAccount,mService);          OwnCloudVersion version=com.synox.android.authentication.AccountUtils.getServerVersion(mLastTarget.mAccount);          mOwnCloudClient.setOwnCloudVersion(version);          mStorageManager=new FileDataStorageManager(mLastTarget.mAccount,mService.getContentResolver());        } else {          OwnCloudCredentials credentials=null;          if (mLastTarget.mCookie != null && mLastTarget.mCookie.length() > 0) {            credentials=OwnCloudCredentialsFactory.newSamlSsoCredentials(null,mLastTarget.mCookie);          }          OwnCloudAccount ocAccount=new OwnCloudAccount(mLastTarget.mServerUrl,credentials);          mOwnCloudClient=OwnCloudClientManagerFactory.getDefaultSingleton().getClientFor(ocAccount,mService);          mStorageManager=null;        }      }      if (mCurrentOperation instanceof SyncOperation) {        result=((SyncOperation)mCurrentOperation).execute(mOwnCloudClient,mStorageManager);      } else {        result=mCurrentOperation.execute(mOwnCloudClient);      }    } catch (    AccountsException e) {      if (mLastTarget.mAccount == null) {        Log_OC.e(TAG,"Error while trying to get authorization for a NULL account",e);      } else {        Log_OC.e(TAG,"Error while trying to get authorization for " + mLastTarget.mAccount.name,e);      }      result=new RemoteOperationResult(e);    }catch (    IOException e) {      if (mLastTarget.mAccount == null) {        Log_OC.e(TAG,"Error while trying to get authorization for a NULL account",e);      } else {        Log_OC.e(TAG,"Error while trying to get authorization for " + mLastTarget.mAccount.name,e);      }      result=new RemoteOperationResult(e);    }catch (    Exception e) {      if (mLastTarget.mAccount == null) {        Log_OC.e(TAG,"Unexpected error for a NULL account",e);      } else {        Log_OC.e(TAG,"Unexpected error for " + mLastTarget.mAccount.name,e);      }      result=new RemoteOperationResult(e);    } finally {synchronized (mPendingOperations) {        mPendingOperations.poll();      }    }    mService.dispatchResultToOperationListeners(mCurrentOperation,result);  }}  }
class C{  @Deprecated public static void deleteFilesInDir(final File directory,final FilenameFilter filter,final Logger logger,final boolean recurse,final boolean deleteEmptyDirectories){  if (null != directory && directory.isDirectory()) {    final File ingestFiles[]=directory.listFiles();    if (ingestFiles == null) {      logger.error("Unable to list directory content in: " + directory.getAbsolutePath());    }    for (    File ingestFile : ingestFiles) {      boolean process=(filter == null) ? true : filter.accept(directory,ingestFile.getName());      if (ingestFile.isFile() && process) {        FileUtils.deleteFile(ingestFile,logger,3);      }      if (ingestFile.isDirectory() && recurse) {        FileUtils.deleteFilesInDir(ingestFile,filter,logger,recurse,deleteEmptyDirectories);        if (deleteEmptyDirectories && ingestFile.list().length == 0) {          FileUtils.deleteFile(ingestFile,logger,3);        }      }    }  }}  }
class C{  public BaseContextScannerThread(int contextId){  super();  this.contextId=contextId;  this.listeners=new LinkedHashSet<Listener>();}  }
class C{  public void text(String str,float x,float y,float z){  g.text(str,x,y,z);}  }
class C{  @SuppressWarnings("unused") @Test public void testLeafStateEnterSequence(){  Statechart sc=_createStatechart("cs");  Scope scope=_createInterfaceScope("interface",sc);  VariableDefinition v1=_createVariableDefinition("v1",TYPE_INTEGER,scope);  Region r=_createRegion("r",sc);  State s1=_createState("s1",r);  LocalReaction entryAction=_createEntryAction(s1);  _createVariableAssignment(v1,AssignmentOperator.ASSIGN,_createValue(42),(ReactionEffect)entryAction.getEffect());  Entry e=_createEntry(EntryKind.INITIAL,null,r);  Transition t=_createTransition(e,s1);  ExecutionFlow flow=sequencer.transform(sc);  ExecutionState _s1=flow.getStates().get(0);  assertEquals(s1.getName(),_s1.getSimpleName());  assertNotNull(_s1.getEntryAction());  assertNotNull(_s1.getEnterSequences().get(0));  assertEquals(2,_s1.getEnterSequences().get(0).getSteps().size());  assertCall(_s1.getEnterSequences().get(0),0,_s1.getEntryAction());  assertClass(EnterState.class,_s1.getEnterSequences().get(0).getSteps().get(1));}  }
class C{  public void onHideSheet(){}  }
class C{  protected String knownGtidSet(){  AtomicReference<String> gtidSetStr=new AtomicReference<String>();  try {    taskContext.jdbc().query("SHOW MASTER STATUS",null);  } catch (  SQLException e) {    throw new ConnectException("Unexpected error while connecting to MySQL and looking at GTID mode: ",e);  }  return gtidSetStr.get();}  }
class C{  private GraphComparisonParams(){  newExecution();}  }
class C{  public ServerProxyAttachmentError(){  requestFileName="getstate.query";  responseFile="attachm-error.query";  responseContentType="multipart/related; charset=UTF-8; " + "boundary=jetty771207119h3h10dty";}  }
class C{  public Matrix4x3d transpose3x3(){  return transpose3x3(this);}  }
class C{  @Override public void execute(Iterator<String> unused){  Cursor cursor=queryAllContacts(mContentResolver);  if (cursor != null && cursor.getCount() != 0)   mOps.displayCursor(cursor);}  }
class C{  public void add(Object v){  expandFor(size,null);  vector[size - 1]=v;}  }
class C{  public void doPing() throws SQLException {  boolean isMasterConn=isMasterConnection();  SQLException mastersPingException=null;  SQLException slavesPingException=null;  if (this.masterConnection != null) {    try {      this.masterConnection.ping();    } catch (    SQLException e) {      mastersPingException=e;    }  } else {    initializeMasterConnection();  }  if (this.slavesConnection != null) {    try {      this.slavesConnection.ping();    } catch (    SQLException e) {      slavesPingException=e;    }  } else {    try {      initializeSlavesConnection();      if (switchToSlavesConnectionIfNecessary()) {        isMasterConn=false;      }    } catch (    SQLException e) {      if (this.masterConnection == null || !this.readFromMasterWhenNoSlaves) {        throw e;      }    }  }  if (isMasterConn && mastersPingException != null) {    if (this.slavesConnection != null && slavesPingException == null) {      this.masterConnection=null;      this.currentConnection=this.slavesConnection;      this.readOnly=true;    }    throw mastersPingException;  } else   if (!isMasterConn && (slavesPingException != null || this.slavesConnection == null)) {    if (this.masterConnection != null && this.readFromMasterWhenNoSlaves && mastersPingException == null) {      this.slavesConnection=null;      this.currentConnection=this.masterConnection;      this.readOnly=true;      this.currentConnection.setReadOnly(true);    }    if (slavesPingException != null) {      throw slavesPingException;    }  }}  }
class C{  public boolean hasChanged(){  if (getValue() != null)   if (m_oldValue != null)   return !m_oldValue.equals(getValue()); else   return true; else   if (m_oldValue != null)   return true; else   return false;}  }
class C{  public void performCut(){  text.cut();  checkSelection();  checkDeleteable();  checkSelectable();}  }
class C{  protected int numberUnit(boolean integer) throws IOException {switch (current) {case '%':    nextChar();  return LexicalUnits.PERCENTAGE;case 'c':case 'C':switch (nextChar()) {case 'm':case 'M':  nextChar();if (current != -1 && ScannerUtilities.isCSSNameCharacter((char)current)) {  do {    nextChar();  } while (current != -1 && ScannerUtilities.isCSSNameCharacter((char)current));  return LexicalUnits.DIMENSION;}return LexicalUnits.CM;default :while (current != -1 && ScannerUtilities.isCSSNameCharacter((char)current)) {nextChar();}return LexicalUnits.DIMENSION;}case 'd':case 'D':switch (nextChar()) {case 'e':case 'E':switch (nextChar()) {case 'g':case 'G':nextChar();if (current != -1 && ScannerUtilities.isCSSNameCharacter((char)current)) {do {nextChar();} while (current != -1 && ScannerUtilities.isCSSNameCharacter((char)current));return LexicalUnits.DIMENSION;}return LexicalUnits.DEG;}case 'p':case 'P':switch (nextChar()) {case 'i':case 'I':nextChar();if (current != -1 && ScannerUtilities.isCSSNameCharacter((char)current)) {do {nextChar();} while (current != -1 && ScannerUtilities.isCSSNameCharacter((char)current));return LexicalUnits.DIMENSION;}return LexicalUnits.DPI;case 'c':case 'C':switch (nextChar()) {case 'm':case 'M':nextChar();if (current != -1 && ScannerUtilities.isCSSNameCharacter((char)current)) {do {nextChar();} while (current != -1 && ScannerUtilities.isCSSNameCharacter((char)current));return LexicalUnits.DIMENSION;}return LexicalUnits.DPCM;default :if (current != -1 && ScannerUtilities.isCSSNameCharacter((char)current)) {do {nextChar();} while (current != -1 && ScannerUtilities.isCSSNameCharacter((char)current));return LexicalUnits.DIMENSION;}}}default :while (current != -1 && ScannerUtilities.isCSSNameCharacter((char)current)) {nextChar();}return LexicalUnits.DIMENSION;}case 'e':case 'E':switch (nextChar()) {case 'm':case 'M':nextChar();if (current != -1 && ScannerUtilities.isCSSNameCharacter((char)current)) {do {nextChar();} while (current != -1 && ScannerUtilities.isCSSNameCharacter((char)current));return LexicalUnits.DIMENSION;}return LexicalUnits.EM;case 'x':case 'X':nextChar();if (current != -1 && ScannerUtilities.isCSSNameCharacter((char)current)) {do {nextChar();} while (current != -1 && ScannerUtilities.isCSSNameCharacter((char)current));return LexicalUnits.DIMENSION;}return LexicalUnits.EX;default :while (current != -1 && ScannerUtilities.isCSSNameCharacter((char)current)) {nextChar();}return LexicalUnits.DIMENSION;}case 'g':case 'G':switch (nextChar()) {case 'r':case 'R':switch (nextChar()) {case 'a':case 'A':switch (nextChar()) {case 'd':case 'D':nextChar();if (current != -1 && ScannerUtilities.isCSSNameCharacter((char)current)) {do {nextChar();} while (current != -1 && ScannerUtilities.isCSSNameCharacter((char)current));return LexicalUnits.DIMENSION;}return LexicalUnits.GRAD;}}default :while (current != -1 && ScannerUtilities.isCSSNameCharacter((char)current)) {nextChar();}return LexicalUnits.DIMENSION;}case 'h':case 'H':nextChar();switch (current) {case 'z':case 'Z':nextChar();if (current != -1 && ScannerUtilities.isCSSNameCharacter((char)current)) {do {nextChar();} while (current != -1 && ScannerUtilities.isCSSNameCharacter((char)current));return LexicalUnits.DIMENSION;}return LexicalUnits.HZ;default :while (current != -1 && ScannerUtilities.isCSSNameCharacter((char)current)) {nextChar();}return LexicalUnits.DIMENSION;}case 'i':case 'I':switch (nextChar()) {case 'n':case 'N':nextChar();if (current != -1 && ScannerUtilities.isCSSNameCharacter((char)current)) {do {nextChar();} while (current != -1 && ScannerUtilities.isCSSNameCharacter((char)current));return LexicalUnits.DIMENSION;}return LexicalUnits.IN;default :while (current != -1 && ScannerUtilities.isCSSNameCharacter((char)current)) {nextChar();}return LexicalUnits.DIMENSION;}case 'k':case 'K':switch (nextChar()) {case 'h':case 'H':switch (nextChar()) {case 'z':case 'Z':nextChar();if (current != -1 && ScannerUtilities.isCSSNameCharacter((char)current)) {do {nextChar();} while (current != -1 && ScannerUtilities.isCSSNameCharacter((char)current));return LexicalUnits.DIMENSION;}return LexicalUnits.KHZ;}default :while (current != -1 && ScannerUtilities.isCSSNameCharacter((char)current)) {nextChar();}return LexicalUnits.DIMENSION;}case 'm':case 'M':switch (nextChar()) {case 'm':case 'M':nextChar();if (current != -1 && ScannerUtilities.isCSSNameCharacter((char)current)) {do {nextChar();} while (current != -1 && ScannerUtilities.isCSSNameCharacter((char)current));return LexicalUnits.DIMENSION;}return LexicalUnits.MM;case 's':case 'S':nextChar();if (current != -1 && ScannerUtilities.isCSSNameCharacter((char)current)) {do {nextChar();} while (current != -1 && ScannerUtilities.isCSSNameCharacter((char)current));return LexicalUnits.DIMENSION;}return LexicalUnits.MS;default :while (current != -1 && ScannerUtilities.isCSSNameCharacter((char)current)) {nextChar();}return LexicalUnits.DIMENSION;}case 'p':case 'P':switch (nextChar()) {case 'c':case 'C':nextChar();if (current != -1 && ScannerUtilities.isCSSNameCharacter((char)current)) {do {nextChar();} while (current != -1 && ScannerUtilities.isCSSNameCharacter((char)current));return LexicalUnits.DIMENSION;}return LexicalUnits.PC;case 't':case 'T':nextChar();if (current != -1 && ScannerUtilities.isCSSNameCharacter((char)current)) {do {nextChar();} while (current != -1 && ScannerUtilities.isCSSNameCharacter((char)current));return LexicalUnits.DIMENSION;}return LexicalUnits.PT;case 'x':case 'X':nextChar();if (current != -1 && ScannerUtilities.isCSSNameCharacter((char)current)) {do {nextChar();} while (current != -1 && ScannerUtilities.isCSSNameCharacter((char)current));return LexicalUnits.DIMENSION;}return LexicalUnits.PX;default :while (current != -1 && ScannerUtilities.isCSSNameCharacter((char)current)) {nextChar();}return LexicalUnits.DIMENSION;}case 'r':case 'R':switch (nextChar()) {case 'a':case 'A':switch (nextChar()) {case 'd':case 'D':nextChar();if (current != -1 && ScannerUtilities.isCSSNameCharacter((char)current)) {do {nextChar();} while (current != -1 && ScannerUtilities.isCSSNameCharacter((char)current));return LexicalUnits.DIMENSION;}return LexicalUnits.RAD;}default :while (current != -1 && ScannerUtilities.isCSSNameCharacter((char)current)) {nextChar();}return LexicalUnits.DIMENSION;}case 's':case 'S':nextChar();return LexicalUnits.S;default :if (current != -1 && ScannerUtilities.isCSSIdentifierStartCharacter((char)current)) {do {nextChar();} while (current != -1 && ScannerUtilities.isCSSNameCharacter((char)current));return LexicalUnits.DIMENSION;}return (integer) ? LexicalUnits.INTEGER : LexicalUnits.REAL;}}  }
class C{  @Override public UpdateResponse deleteById(List<String> ids,int commitWithinMs) throws SolrServerException, IOException {  UpdateResponse ur=null;  if (this.solr0 != null)   ur=this.solr0.deleteById(ids,commitWithinMs);  if (this.solr1 != null)   ur=this.solr1.deleteById(ids,commitWithinMs);  return ur;}  }
class C{  public EntityQuery cache(){  this.useCache=true;  return this;}  }
class C{  public static EWMA oneMinuteEWMA(){  return new EWMA(M1_ALPHA,5,TimeUnit.SECONDS);}  }
class C{  private int internalAwaitAdvance(int phase,QNode node){  releaseWaiters(phase - 1);  boolean queued=false;  int lastUnarrived=0;  int spins=SPINS_PER_ARRIVAL;  long s;  int p;  while ((p=(int)((s=state) >>> PHASE_SHIFT)) == phase) {    if (node == null) {      int unarrived=(int)s & UNARRIVED_MASK;      if (unarrived != lastUnarrived && (lastUnarrived=unarrived) < NCPU)       spins+=SPINS_PER_ARRIVAL;      boolean interrupted=Thread.interrupted();      if (interrupted || --spins < 0) {        node=new QNode(this,phase,false,false,0L);        node.wasInterrupted=interrupted;      }    } else     if (node.isReleasable())     break; else     if (!queued) {      AtomicReference<QNode> head=(phase & 1) == 0 ? evenQ : oddQ;      QNode q=node.next=head.get();      if ((q == null || q.phase == phase) && (int)(state >>> PHASE_SHIFT) == phase)       queued=head.compareAndSet(q,node);    } else {      try {        ForkJoinPool.managedBlock(node);      } catch (      InterruptedException ie) {        node.wasInterrupted=true;      }    }  }  if (node != null) {    if (node.thread != null)     node.thread=null;    if (node.wasInterrupted && !node.interruptible)     Thread.currentThread().interrupt();    if (p == phase && (p=(int)(state >>> PHASE_SHIFT)) == phase)     return abortWait(phase);  }  releaseWaiters(phase);  return p;}  }
class C{  public static boolean postTalkback(final Throwable t){  return postTalkback(t,true);}  }
class C{  static public void assertEquals(short expected,short actual){  assertEquals(null,expected,actual);}  }
class C{  @Benchmark public void fizzBuzzPatternMatching(){  IntStream.range(0,101).forEach(null);}  }
class C{  final void copyIntoLocalState(Operand[] _localState){  localState=new Operand[_localState.length];  System.arraycopy(_localState,0,localState,0,_localState.length);  setLocalKnown();}  }
class C{  public void keyValue(List<IntermediateInfo> intermediateInfos){  try {    for (    IntermediateInfo intermediateInfo : intermediateInfos) {      com.wipro.ats.bdre.md.dao.jpa.Intermediate intermediate=new com.wipro.ats.bdre.md.dao.jpa.Intermediate();      IntermediateId intermediateId=new IntermediateId();      intermediateId.setInterKey(intermediateInfo.getKey());      intermediateId.setUuid(intermediateInfo.getUuid());      intermediate.setId(intermediateId);      intermediate.setInterValue(intermediateInfo.getValue());      intermediateDAO.insert(intermediate);    }  } catch (  Exception e) {    LOGGER.error("Error occurred",e);    throw new MetadataException(e);  }}  }
class C{  public FeedItemEvent(FeedItem source){  super(source);}  }
class C{  private void logStatus(int times){  int minutes=(int)(TEST_DURATION_IN_MILLISECONDS - (System.currentTimeMillis() - startTime)) / 60 / 1000;  Log.d(TAG,String.format("This test has run %d times and will be finished in %d minutes!",times,minutes));  Log.d(TAG,String.format("There are %d tracks!",numberOfTracks));}  }
class C{  public boolean isCursorScrollSensitive(){  boolean result;  result=false;  try {    if (isConnected()) {      result=m_Connection.getMetaData().supportsResultSetConcurrency(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);    }  } catch (  Exception e) {  }  return result;}  }
class C{  public static void checkEquals(String expected,String actual,int scale){  checkEqualsWithGivenScale("",new BigDecimal(expected),new BigDecimal(actual),scale);}  }
class C{  public String toString(){  return image;}  }
class C{  public static Timestamp convertTimestamp(Value value,Calendar calendar){  if (value == ValueNull.INSTANCE) {    return null;  }  ValueTimestamp ts=(ValueTimestamp)value.convertTo(Value.TIMESTAMP);  Calendar cal=(Calendar)calendar.clone();  cal.clear();  cal.setLenient(true);  long dateValue=ts.getDateValue();  long nanos=ts.getTimeNanos();  long millis=nanos / 1000000;  nanos-=millis * 1000000;  long s=millis / 1000;  millis-=s * 1000;  long m=s / 60;  s-=m * 60;  long h=m / 60;  m-=h * 60;  setCalendarFields(cal,yearFromDateValue(dateValue),monthFromDateValue(dateValue),dayFromDateValue(dateValue),(int)h,(int)m,(int)s,(int)millis);  long ms=cal.getTimeInMillis();  Timestamp x=new Timestamp(ms);  x.setNanos((int)(nanos + millis * 1000000));  return x;}  }
class C{  public void addFormatField(String id,MetaType type,VcfNumber number,String description){  addFormatField(new FormatField(id,type,number,description));}  }
class C{  public static String keyString(SecretKeys keys){  return keys.toString();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public void clear(){  if (server != null) {    QueryExp exp=Query.eq(Query.attr("coreHashCode"),Query.value(coreHashCode));    Set<ObjectName> objectNames=server.queryNames(null,exp);    if (objectNames != null) {      for (      ObjectName name : objectNames) {        try {          server.unregisterMBean(name);        } catch (        Exception e) {          LOG.error("Exception un-registering mbean {}",name,e);        }      }    }  }  super.clear();}  }
class C{  public void testGetFieldsImmutable(){  Document doc=makeDocumentWithFields();  assertEquals(10,doc.getFields().size());  List<IndexableField> fields=doc.getFields();  expectThrows(UnsupportedOperationException.class,null);  expectThrows(UnsupportedOperationException.class,null);}  }
class C{  public static String filterAllowedCharacters(String input){  StringBuilder var1=new StringBuilder();  char[] var2=input.toCharArray();  int var3=var2.length;  for (int var4=0; var4 < var3; ++var4) {    char var5=var2[var4];    if (isAllowedCharacter(var5))     var1.append(var5);  }  return var1.toString();}  }
class C{  int sizeCountingOnlyAliveElements(){  int size=0;  for (  QNCacheBean<T> cacheValue : cache.values()) {    if (cacheValue.isAlive(now())) {      size++;    }  }  return size;}  }
class C{  public <T>boolean delete(T object){  @SuppressWarnings("unchecked") Class<T> tClass=(Class<T>)object.getClass();  BaseAdapter<T> adapter=getBaseAdapter(tClass);  return adapter.delete(object);}  }
class C{  @Override public String toString(){  return "cudaMemcpy3DParms[" + createString(",") + "]";}  }
class C{  @Override public boolean isIgnorableWhiteSpace(){  return whitespace;}  }
class C{  private Object readElement(InputNode node) throws Exception {  Instance value=factory.getInstance(node);  if (!value.isReference()) {    return readElement(node,value);  }  return value.getInstance();}  }
class C{  public void testWriteTrack_emptyTrack() throws Exception {  trackWriter.prepare(outputStream);  trackWriter.writeHeader(tracks);  trackWriter.writeBeginTracks();  trackWriter.writeBeginTrack(tracks[0],null);  trackWriter.writeEndTrack(tracks[0],null);  trackWriter.writeEndTracks();  trackWriter.writeFooter();  trackWriter.close();  mocksControl.replay();  assertTrue(fileTrackExporter.writeTrack(outputStream));  mocksControl.verify();}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  int context=getArg0AsNode(xctxt);  String s;  if (context != DTM.NULL) {    DTM dtm=xctxt.getDTM(context);    int t=dtm.getNodeType(context);    if (t == DTM.ELEMENT_NODE) {      s=dtm.getNamespaceURI(context);    } else     if (t == DTM.ATTRIBUTE_NODE) {      s=dtm.getNodeName(context);      if (s.startsWith("xmlns:") || s.equals("xmlns"))       return XString.EMPTYSTRING;      s=dtm.getNamespaceURI(context);    } else     return XString.EMPTYSTRING;  } else   return XString.EMPTYSTRING;  return ((null == s) ? XString.EMPTYSTRING : new XString(s));}  }
class C{  public static long[][] floydWarshallNumberShortestPathsMatrix(final Network network,final EdgeMetric computer,final double precision){  final int N=getNumberNodes(network);  double[][] result=new double[N][N];  long[][] number=new long[N][N];  for (int i=0; i < N; i++)   for (int j=0; j < N; j++) {    result[i][j]=Double.POSITIVE_INFINITY;    number[i][j]=0;  }  for (int i=0; i < N; i++) {    Bag bag=network.getEdgesOut(network.allNodes.objs[i]);    for (int j=0; j < bag.numObjs; j++) {      Edge edge=(Edge)(bag.objs[j]);      final int k=network.getNodeIndex(edge.getOtherNode(network.allNodes.objs[i]));      result[i][k]=computer.getWeight(edge);      number[i][k]++;    }  }  for (int i=0; i < N; i++)   result[i][i]=0;  for (int k=0; k < N; k++)   for (int i=0; i < N; i++)   for (int j=0; j < N; j++)   if (result[i][j] > (result[i][k] + result[k][j] + precision)) {    result[i][j]=result[i][k] + result[k][j];    number[i][j]=number[i][k] * number[k][j];  } else   if (abs(result[i][j] - (result[i][k] + result[k][j])) <= precision) {    number[i][j]+=number[i][k] * number[k][j];  }  return number;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.TYPED_ELEMENT__DECLARED_TYPE_REF:    return declaredTypeRef != null;case N4JSPackage.TYPED_ELEMENT__BOGUS_TYPE_REF:  return bogusTypeRef != null;}return super.eIsSet(featureID);}  }
class C{  public String toString(){  return getStringValue();}  }
class C{  public static boolean isEmpty(Collection collection){  return (collection == null || collection.isEmpty());}  }
class C{  public boolean isAdhocConversion(){  Object oo=get_Value(COLUMNNAME_IsAdhocConversion);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private static GridClient client(String addr) throws IOException {  try {    IgniteInternalFuture<GridClient> fut=cliMap.get(addr);    if (fut == null) {      GridFutureAdapter<GridClient> fut0=new GridFutureAdapter<>();      IgniteInternalFuture<GridClient> oldFut=cliMap.putIfAbsent(addr,fut0);      if (oldFut != null)       return oldFut.get(); else {        GridClientConfiguration cliCfg=new GridClientConfiguration();        cliCfg.setProtocol(TCP);        cliCfg.setServers(Collections.singletonList(addr));        cliCfg.setMarshaller(new GridClientJdkMarshaller());        cliCfg.setMaxConnectionIdleTime(24 * 60 * 60* 1000L);        cliCfg.setDaemon(true);        try {          GridClient cli=GridClientFactory.start(cliCfg);          fut0.onDone(cli);          return cli;        } catch (        GridClientException e) {          fut0.onDone(e);          throw new IOException("Failed to establish connection with Ignite node: " + addr,e);        }      }    } else     return fut.get();  } catch (  IgniteCheckedException e) {    throw new IOException("Failed to establish connection with Ignite node: " + addr,e);  }}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY);  builder.addElement(FeedLink.KEY).setRequired(true);}  }
class C{  @SafeVarargs public <E extends Enum & StatusType>ProblemModule(final Class<? extends E>... types) throws IllegalArgumentException {  this(false,buildIndex(types));}  }
class C{  @Override public String append(List<EvaluationStatistics> stats){  BufferedWriter bwriter;  FileWriter fwriter;  log("Writing " + stats.size() + " statistics to: "+ m_File);  bwriter=null;  fwriter=null;  try {    fwriter=new FileWriter(m_File,true);    bwriter=new BufferedWriter(fwriter);    for (    EvaluationStatistics stat : stats) {      bwriter.write(KEY_CLASSIFIER + "=" + stat.getCommandLine());      bwriter.write("\t");      bwriter.write(KEY_RELATION + "=" + stat.getRelation());      bwriter.write("\t");      for (      String key : stat.keySet()) {        bwriter.write("\t");        bwriter.write(key + "=" + stat.get(key));      }      bwriter.newLine();    }    return null;  } catch (  Exception e) {    return handleException("Failed to write statistics to: " + m_File,e);  } finally {    FileUtils.closeQuietly(bwriter);    FileUtils.closeQuietly(fwriter);  }}  }
class C{  @Override public void ignorableWhitespace(char[] chars,int offset,int length) throws SAXException {  characters(chars,offset,length);}  }
class C{  public void testTypical(){  Instances icopy=new Instances(m_Instances);  Instances result=null;  try {    m_Filter.setInputFormat(icopy);  } catch (  Exception ex) {    ex.printStackTrace();    fail("Exception thrown on setInputFormat(): \n" + ex.getMessage());  }  try {    result=Filter.useFilter(icopy,m_Filter);    assertNotNull(result);  } catch (  Exception ex) {    ex.printStackTrace();    fail("Exception thrown on useFilter(): \n" + ex.getMessage());  }  assertEquals(icopy.numAttributes(),result.numAttributes());  assertEquals(icopy.numInstances(),result.numInstances());}  }
class C{  private ReplDBMSEvent filter(FilterVerificationHelper filterHelper,ReplDBMSEvent e) throws ReplicatorException, InterruptedException {  ReplDBMSEvent e2=filterHelper.filter(e);  return e2;}  }
class C{  private void start(int interval){  previousDelay=interval;  lastCall=0;  if (timer == null) {    timer=new Timer(interval,this);  } else {    timer.setDelay(interval);  }  if (ADJUSTTIMER) {    timer.setRepeats(false);    timer.setCoalesce(false);  }  timer.start();}  }
class C{  public String encodeBody(){  return optionTag != null ? optionTag : "";}  }
class C{  public void writeExif(InputStream jpegStream,String exifOutFileName) throws FileNotFoundException, IOException {  if (jpegStream == null || exifOutFileName == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  OutputStream s=null;  s=getExifWriterStream(exifOutFileName);  doExifStreamIO(jpegStream,s);  s.flush();  s.close();}  }
class C{  protected void refreshRemoveNode(int id) throws Exception {  int idx;  FolderTokenDocTreeNode node=null;  idx=findIndexById(id);  if (idx == -1) {    throw new IeciTdException(FolderBaseError.EC_NOT_FOUND,FolderBaseError.EM_NOT_FOUND);  }  node=(FolderTokenDocTreeNode)m_nodes.get(idx);  if (!node.isRemove()) {    throw new IeciTdException(FolderBaseError.EC_NO_REMOVE_NODE,FolderBaseError.EM_NO_REMOVE_NODE);  }  m_nodes.remove(idx);}  }
class C{  protected ToHitData guessToHitModifierHelperForAnyAttack(Entity shooter,@Nullable EntityState shooterState,Targetable target,@Nullable EntityState targetState,int distance,IGame game){  if (shooterState == null) {    shooterState=new EntityState(shooter);  }  if (targetState == null) {    targetState=new EntityState(target);  }  if ((shooterState.getPosition() == null) || (targetState.getPosition() == null)) {    return new ToHitData(TH_NULL_POSITION);  }  int maxRange=shooter.getMaxWeaponRange();  if (distance > maxRange) {    return new ToHitData(TH_RNG_TOO_FAR);  }  ToHitData toHitData=new ToHitData();  toHitData.append(getAttackerMovementModifier(game,shooter.getId(),shooterState.getMovementType()));  if (!shooterState.isAero() && targetState.isAirborneAero()) {    Aero targetAero=(Aero)target;    if (targetAero.isNOE()) {      Coords closestInFlightPath=getNearestPointInFlightPath(shooterState.getPosition(),targetAero);      int aeroDistance=closestInFlightPath.distance(shooterState.getPosition());      if (aeroDistance <= 1) {        toHitData.addModifier(TH_TAR_AERO_NOE_ADJ);      } else {        toHitData.addModifier(TH_TAR_AERO_NOE);      }    }  } else {    toHitData.append(getTargetMovementModifier(targetState.getHexesMoved(),targetState.isJumping(),target instanceof VTOL,game));  }  if (shooterState.isProne()) {    toHitData.addModifier(TH_ATT_PRONE);  }  if (targetState.isImmobile()) {    toHitData.addModifier(TH_TAR_IMMOBILE);  }  if (game.getOptions().booleanOption(OptionsConstants.AGM_TAC_OPS_STANDING_STILL) && (targetState.getMovementType() == EntityMovementType.MOVE_NONE) && !targetState.isImmobile()&& !((target instanceof Infantry) || (target instanceof VTOL) || (target instanceof GunEmplacement))) {    toHitData.addModifier(TH_TAR_NO_MOVE);  }  if (targetState.getMovementType() == EntityMovementType.MOVE_SPRINT) {    toHitData.addModifier(TH_TAR_SPRINT);  }  IHex targetHex=game.getBoard().getHex(targetState.getPosition());  int woodsLevel=targetHex.terrainLevel(Terrains.WOODS);  if (targetHex.terrainLevel(Terrains.JUNGLE) > woodsLevel) {    woodsLevel=targetHex.terrainLevel(Terrains.JUNGLE);  }  if (woodsLevel >= 1) {    toHitData.addModifier(woodsLevel,TH_WOODS);  }  int smokeLevel=targetHex.terrainLevel(Terrains.SMOKE);  if (smokeLevel >= 1) {    toHitData.addModifier((smokeLevel % 2) + 1,TH_SMOKE);  }  if (targetState.isProne() && (distance > 1)) {    toHitData.addModifier(TH_TAR_PRONE_RANGE);  } else   if (targetState.isProne() && (distance == 1)) {    toHitData.addModifier(TH_TAR_PRONE_ADJ);  }  if (targetState.getMovementType() == EntityMovementType.MOVE_SKID) {    toHitData.addModifier(TH_TAR_SKID);  }  boolean isShooterInfantry=(shooter instanceof Infantry);  if (!isShooterInfantry) {    if (target instanceof BattleArmor) {      toHitData.addModifier(TH_TAR_BA);    } else     if (target instanceof MechWarrior) {      toHitData.addModifier(TH_TAR_MW);    } else     if (target instanceof Infantry) {      toHitData.addModifier(TH_TAR_INF);    }  }  if (shooter.hasQuirk(OptionsConstants.QUIRK_POS_ANTI_AIR) && (target.isAirborne() || target.isAirborneVTOLorWIGE())) {    toHitData.addModifier(TH_ANTI_AIR);  }  if (shooter instanceof Mech) {    Mech shooterMech=(Mech)shooter;    if (shooterMech.getCockpitType() == Mech.COCKPIT_INDUSTRIAL) {      toHitData.addModifier(TH_INDUSTRIAL);    } else     if (shooterMech.getCockpitType() == Mech.COCKPIT_PRIMITIVE_INDUSTRIAL) {      toHitData.addModifier(TH_PRIMATIVE_INDUSTRIAL);    }  }  if (target instanceof Mech) {    Mech targetMech=(Mech)target;    if (targetMech.getCockpitType() == Mech.COCKPIT_SUPERHEAVY || targetMech.getCockpitType() == Mech.COCKPIT_SUPERHEAVY_TRIPOD) {      toHitData.addModifier(TH_TAR_SUPER);    }  }  if ((target instanceof Dropship) && !target.isAirborne()) {    toHitData.addModifier(TH_TAR_GROUND_DS);  }  return toHitData;}  }
class C{  public static boolean shuffle(Object[] objArray,int shuffleCount){  int length;  if (objArray == null || shuffleCount < 0 || (length=objArray.length) < shuffleCount) {    return false;  }  for (int i=1; i <= shuffleCount; i++) {    int random=getRandom(length - i);    Object temp=objArray[length - i];    objArray[length - i]=objArray[random];    objArray[random]=temp;  }  return true;}  }
class C{  boolean isRetMerged(){  return retMerged;}  }
class C{  public TcpClient tcpClient(){  return _myOscNetManager.tcpClient();}  }
class C{  @Override public void afterCommit(Transaction tx){}  }
class C{  protected void backfitData(Instances data,double[] classProbs,double totalWeight) throws Exception {  if (data.numInstances() == 0) {    m_Attribute=-1;    m_ClassDistribution=null;    if (data.classAttribute().isNumeric()) {      m_Distribution=new double[2];    }    m_Prop=null;    return;  }  double priorVar=0;  if (data.classAttribute().isNumeric()) {    double totalSum=0, totalSumSquared=0, totalSumOfWeights=0;    for (int i=0; i < data.numInstances(); i++) {      Instance inst=data.instance(i);      totalSum+=inst.classValue() * inst.weight();      totalSumSquared+=inst.classValue() * inst.classValue() * inst.weight();      totalSumOfWeights+=inst.weight();    }    priorVar=RandomTree.singleVariance(totalSum,totalSumSquared,totalSumOfWeights);  }  m_ClassDistribution=classProbs.clone();  if (m_Attribute > -1) {    m_Prop=new double[m_Successors.length];    for (int i=0; i < data.numInstances(); i++) {      Instance inst=data.instance(i);      if (!inst.isMissing(m_Attribute)) {        if (data.attribute(m_Attribute).isNominal()) {          m_Prop[(int)inst.value(m_Attribute)]+=inst.weight();        } else {          m_Prop[(inst.value(m_Attribute) < m_SplitPoint) ? 0 : 1]+=inst.weight();        }      }    }    if (Utils.sum(m_Prop) <= 0) {      m_Attribute=-1;      m_Prop=null;      if (data.classAttribute().isNumeric()) {        m_Distribution=new double[2];        m_Distribution[0]=priorVar;        m_Distribution[1]=totalWeight;      }      return;    }    Utils.normalize(m_Prop);    Instances[] subsets=splitData(data);    for (int i=0; i < subsets.length; i++) {      double[] dist=new double[data.numClasses()];      double sumOfWeights=0;      for (int j=0; j < subsets[i].numInstances(); j++) {        if (data.classAttribute().isNominal()) {          dist[(int)subsets[i].instance(j).classValue()]+=subsets[i].instance(j).weight();        } else {          dist[0]+=subsets[i].instance(j).classValue() * subsets[i].instance(j).weight();          sumOfWeights+=subsets[i].instance(j).weight();        }      }      if (sumOfWeights > 0) {        dist[0]/=sumOfWeights;      }      m_Successors[i].backfitData(subsets[i],dist,totalWeight);    }    if (getAllowUnclassifiedInstances()) {      m_ClassDistribution=null;      return;    }    for (int i=0; i < subsets.length; i++) {      if (m_Successors[i].m_ClassDistribution == null) {        return;      }    }    m_ClassDistribution=null;  }}  }
class C{  private synchronized Schema buildSchema(){  Schema instance=cachedSchema;  if (instance == null) {    whitelistAttributes();    whitelistElements();    cachedSchema=instance=new Schema(this);  }  return instance;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.549 -0400",hash_original_method="9AA6A50D6F693D552F5EA103BA14E042",hash_generated_method="3B8D83A7B8EDE60FE1BC8087E0DD852D") public Tailer(File file,TailerListener listener,long delayMillis,boolean end){  this(file,listener,delayMillis,end,DEFAULT_BUFSIZE);}  }
class C{  public Map<String,ReviewComment> listCommentsForReview(String requestCommitHash) throws GitClientException {  try (Git git=new Git(repo)){    return listCommentsForReview(git,requestCommitHash);  } }  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case GamlPackage.TYPE_INFO__FIRST:    return basicSetFirst(null,msgs);case GamlPackage.TYPE_INFO__SECOND:  return basicSetSecond(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  @Override public final void shutdownOutput() throws IOException {  throw new UnsupportedOperationException("The method shutdownOutput()" + " is not supported in SSLSocket");}  }
class C{  public boolean isUpdateCompleted(){  return updateCompleted.get();}  }
class C{  public static Border createBevelBorder(int type,Color highlight,Color shadow){  return new BevelBorder(type,highlight,shadow);}  }
class C{  public XTIFFDirectory createDirectory(SeekableStream stream,int directory) throws IOException {  return new XTIFFDirectory(stream,directory);}  }
class C{  public String alias(){  return alias;}  }
class C{  public static <A>MaybeTValue<A> fromAnyM(final AnyMValue<A> anyM){  return of(anyM.map(null));}  }
class C{  public FunctionDeclaration createDeclaration(ImportStack importStack,Context context,Object object,Method method){  StringBuilder signature=new StringBuilder();  Parameter[] parameters=method.getParameters();  List<ArgumentConverter> argumentConverters=new ArrayList<>(method.getParameterCount());  signature.append(method.getName()).append("(");  int parameterCount=0;  for (  Parameter parameter : parameters) {    ArgumentConverter argumentConverter=createArgumentConverter(object,method,parameter);    argumentConverters.add(argumentConverter);    List<FunctionArgumentSignature> list=argumentConverter.argumentSignatures(object,method,parameter,functionArgumentSignatureFactory);    for (    FunctionArgumentSignature functionArgumentSignature : list) {      String name=functionArgumentSignature.getName();      Object defaultValue=functionArgumentSignature.getDefaultValue();      if (parameterCount > 0) {        signature.append(", ");      }      signature.append("$").append(name);      if (null != defaultValue) {        signature.append(": ").append(formatDefaultValue(defaultValue));      }      parameterCount++;    }  }  signature.append(")");  if (method.isAnnotationPresent(WarnFunction.class)) {    signature.setLength(0);    signature.append("@warn");  } else   if (method.isAnnotationPresent(ErrorFunction.class)) {    signature.setLength(0);    signature.append("@error");  } else   if (method.isAnnotationPresent(DebugFunction.class)) {    signature.setLength(0);    signature.append("@debug");  }  return new FunctionDeclaration(importStack,context,signature.toString(),object,method,argumentConverters);}  }
class C{  private static IMTDict buildIMTDict(RVMClass klass,RVMClass[] interfaces){  IMTDict d=new IMTDict(klass);  for (  RVMClass i : interfaces) {    RVMMethod[] interfaceMethods=i.getDeclaredMethods();    for (    RVMMethod im : interfaceMethods) {      if (im.isClassInitializer())       continue;      if (VM.VerifyAssertions)       VM._assert(im.isPublic() && im.isAbstract());      InterfaceMethodSignature sig=InterfaceMethodSignature.findOrCreate(im.getMemberRef());      RVMMethod vm=klass.findVirtualMethod(im.getName(),im.getDescriptor());      if (vm == null || vm.isAbstract()) {        vm=Entrypoints.raiseAbstractMethodError;      } else       if (!vm.isPublic()) {        vm=Entrypoints.raiseIllegalAccessError;      }      d.addElement(sig,vm);    }  }  return d;}  }
class C{  @Override public void onUIRefreshPrepare(PtrFrameLayout frame){}  }
class C{  public List<T> find() throws SabresException {  List<T> objects=new ArrayList<>();  Sabres sabres=Sabres.self();  sabres.open();  Cursor c=null;  try {    if (SqliteMaster.tableExists(sabres,name)) {      createIndices(sabres);      SelectCommand command=new SelectCommand(name,selectKeys.isEmpty() ? Schema.getKeys(name) : selectKeys);      for (      String include : includes) {        SabresDescriptor descriptor=Schema.getDescriptor(name,include);        if (descriptor != null && descriptor.getType().equals(SabresDescriptor.Type.Pointer)) {          command.join(descriptor.getName(),include,Schema.getKeys(descriptor.getName()));        }      }      for (      OrderBy orderBy : orderByList) {        command.orderBy(orderBy);      }      if (limit != null) {        command.withLimit(limit);      }      if (skip != null) {        command.withSkip(skip);      }      if (innerQueries != null) {        for (        SabresQuery q : innerQueries) {          if (where == null) {            where=q.where;          } else {            where.or(q.where);          }        }      }      if (innerSelect != null) {        command.inInnerSelect(innerSelect,SabresObject.getObjectIdKey());      }      c=sabres.select(command.where(where).toSql());      for (c.moveToFirst(); !c.isAfterLast(); c.moveToNext()) {        T object=createObjectInstance();        object.populate(sabres,c);        for (        String include : includes) {          object.populateChild(sabres,c,include);        }        objects.add(object);      }    }    return objects;  }  finally {    if (c != null) {      c.close();    }    sabres.close();  }}  }
class C{  @Override public UpdateResponse deleteByQuery(String query,int commitWithinMs) throws SolrServerException, IOException {  if (!this.writeEnabled)   return _dummyOKResponse;  UpdateResponse ur=null;  for (  SolrClient s : this.shards.server4read())   ur=s.deleteByQuery(query,commitWithinMs);  return ur;}  }
class C{  void chooseSplitAxis(int minEntries){  double minSurface=Double.MAX_VALUE;  int splitAxis=-1;  for (int d=0; d < dimensionality; d++) {    double sumOfAllMargins=0;    fillAndSort(d);    ModifiableHyperBoundingBox mbr_min_left=new ModifiableHyperBoundingBox(get(minSorting[0]));    ModifiableHyperBoundingBox mbr_min_right=new ModifiableHyperBoundingBox(get(minSorting[size - 1]));    ModifiableHyperBoundingBox mbr_max_left=new ModifiableHyperBoundingBox(get(maxSorting[0]));    ModifiableHyperBoundingBox mbr_max_right=new ModifiableHyperBoundingBox(get(maxSorting[size - 1]));    for (int k=1; k < size - minEntries; k++) {      mbr_min_left.extend(get(minSorting[k]));      mbr_min_right.extend(get(minSorting[size - 1 - k]));      mbr_max_left.extend(get(maxSorting[k]));      mbr_max_right.extend(get(maxSorting[size - 1 - k]));      if (k >= minEntries - 1) {        sumOfAllMargins+=SpatialUtil.perimeter(mbr_min_left) + SpatialUtil.perimeter(mbr_min_right) + SpatialUtil.perimeter(mbr_max_left)+ SpatialUtil.perimeter(mbr_max_right);      }    }    if (sumOfAllMargins < minSurface) {      splitAxis=d;      minSurface=sumOfAllMargins;    }  }  if (splitAxis != dimensionality) {    fillAndSort(splitAxis);  }}  }
class C{  public LMDirichletSimilarity(CollectionModel collectionModel){  this(collectionModel,2000);}  }
class C{  public static boolean equals(double a,double b,double epsilon){  return Math.abs(a - b) < epsilon;}  }
class C{  public RangeBarChart(XYMultipleSeriesDataset dataset,XYMultipleSeriesRenderer renderer,Type type){  super(dataset,renderer,type);}  }
class C{  public void writeInt(int v) throws IOException {  dataOutput.writeInt(v);  offset+=4;}  }
class C{  public static synchronized boolean startup(boolean isClient){  if (log != null)   return true;  if (isClient && !Login.isJavaOK(isClient))   System.exit(1);  Ini.setClient(isClient);  log=CLogger.getCLogger(Adempiere.class);  log.info(getSummaryAscii());  Ini.loadProperties(false);  CLogMgt.setLevel(Ini.getProperty(Ini.P_TRACELEVEL));  if (isClient && Ini.isPropertyBool(Ini.P_TRACEFILE) && CLogFile.get(false,null,isClient) == null)   CLogMgt.addHandler(CLogFile.get(true,Ini.findAdempiereHome(),isClient));  if (isClient) {    if (CLogMgt.isLevelAll())     log.log(Level.FINEST,System.getProperties().toString());  }  DB.setDBTarget(CConnection.get(getCodeBaseHost()));  if (isClient)   return false;  return startupEnvironment(isClient);}  }
class C{  Renamer(byte[] info,ConstPool cp,Map map){  super(info);  cpool=cp;  classnames=map;}  }
class C{  synchronized public void addDTM(DTM dtm,int id,int offset){  if (id >= IDENT_MAX_DTMS) {    throw new DTMException(XMLMessages.createXMLMessage(XMLErrorResources.ER_NO_DTMIDS_AVAIL,null));  }  int oldlen=m_dtms.length;  if (oldlen <= id) {    int newlen=Math.min((id + 256),IDENT_MAX_DTMS);    DTM new_m_dtms[]=new DTM[newlen];    System.arraycopy(m_dtms,0,new_m_dtms,0,oldlen);    m_dtms=new_m_dtms;    int new_m_dtm_offsets[]=new int[newlen];    System.arraycopy(m_dtm_offsets,0,new_m_dtm_offsets,0,oldlen);    m_dtm_offsets=new_m_dtm_offsets;  }  m_dtms[id]=dtm;  m_dtm_offsets[id]=offset;  dtm.documentRegistration();}  }
class C{  public static Bitmap fromFileScaled(String path,int width,int height,boolean exactDimensions){  if (width == 0 || height == 0) {    return null;  }  BitmapFactory.Options orig=new BitmapFactory.Options();  orig.inJustDecodeBounds=true;  BitmapFactory.decodeFile(path,orig);  int scale=1;  while (orig.outWidth / (scale * 2) >= width && orig.outHeight / (scale * 2) >= height) {    scale*=2;  }  BitmapFactory.Options scaled=new BitmapFactory.Options();  scaled.inSampleSize=scale;  Bitmap scaledBitmap=BitmapFactory.decodeFile(path,scaled);  if (exactDimensions) {    return ThumbnailUtils.extractThumbnail(scaledBitmap,width,height,ThumbnailUtils.OPTIONS_RECYCLE_INPUT);  } else {    return scaledBitmap;  }}  }
class C{  public QueryResultsPrinter(String... queriesToPrint){  for (  String s : queriesToPrint) {    outputIds.add(ByteString.copyFromUtf8(s));  }}  }
class C{  static <T1,T2>Seq<Tuple2<T1,T2>> combineLatest(final SimpleReactStream<T1> left,final SimpleReactStream<T2> right){  return combineLatest(left,right,null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:59.036 -0500",hash_original_method="C02000F90B17D3CB29391F2C5B8E021A",hash_generated_method="C02000F90B17D3CB29391F2C5B8E021A") void _spyWrite(int ch){  if (!(_stateIsDo(TelnetOption.ECHO) && _requestedDo(TelnetOption.ECHO))) {    if (spyStream != null) {      try {        spyStream.write(ch);        spyStream.flush();      } catch (      Exception e) {        spyStream=null;      }    }  }}  }
class C{  public static TreeTrace loadTreeTrace(Reader r) throws IOException, Importer.ImportException {  BufferedReader reader=new BufferedReader(r);  TreeTrace trace=new TreeTrace();  dr.evolution.util.TaxonList taxonList=null;  int minState=-1;  int stepSize=0;  String line=reader.readLine();  if (line.toUpperCase().startsWith("#NEXUS")) {    NexusImporter importer=new NexusImporter(reader);    Tree[] trees=importer.importTrees(null);    if (trees.length < 2) {      throw new Importer.ImportException("Less than two trees in the trace file");    }    String id1=trees[0].getId();    String id2=trees[1].getId();    minState=getStateNumber(id1);    stepSize=getStateNumber(id2) - minState;    for (    Tree tree : trees) {      trace.add(tree);    }  } else {    NewickImporter importer=new NewickImporter(reader);    while (true) {      int state=0;      Tree tree;      try {        state=importer.readInteger();        tree=importer.importTree(taxonList);        if (taxonList == null) {          taxonList=tree;        }      } catch (      Importer.ImportException ie) {        System.out.println("Error reading tree for state " + state);        throw ie;      }catch (      EOFException e) {        break;      }      if (minState == -1) {        minState=state;      } else       if (stepSize == 0) {        stepSize=state - minState;      }      trace.add(tree);    }  }  trace.setMinimumState(minState);  trace.setStepSize(stepSize);  return trace;}  }
class C{  public Boolean isOrphaned(){  return orphaned;}  }
class C{  public TFloatDoubleIterator(TFloatDoubleHashMap map){  super(map);  _map=map;}  }
class C{  public UColor(int red,int green,int blue,int alpha){  if (!isInRange(red) || !isInRange(green) || !isInRange(blue)|| !isInRange(alpha)) {    throw new IllegalArgumentException("Check parameters (0 to 255)");  }  this.red=red;  this.green=green;  this.blue=blue;  this.alpha=alpha;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:12.513 -0500",hash_original_method="E930BE940ED709A9E92F64EC28520C28",hash_generated_method="1DACE3572478DC85AF10A7AB44445DA6") public String toString(){  return host + ":" + port+ "/"+ transport;}  }
class C{  public boolean isActive(){synchronized (this.scanners) {    for (    Scanner scanner : this.scanners) {      if (!scanner.isStop()) {        return true;      }    }  }  return false;}  }
class C{  public void reset(){  count=0;  violations=0;  curTickTotal=0;  totalTime=0;  start=0;  timingDepth=0;}  }
class C{  static @NonNull String parse(@NonNull Object... args){  boolean[] argsUsed=new boolean[args.length];  String format=(String)args[0];  argsUsed[0]=true;  int nextArgIndex=1;  final char[] chars=format.toCharArray();  StringBuilder buffer=new StringBuilder();  ArrayCharSequence sequence=new ArrayCharSequence(chars,0,chars.length);  for (int i=0; i < chars.length; ++i) {    char c=chars[i];    if (c != '%') {      buffer.append(c);      continue;    }    Matcher matcher=FORMAT_SPECIFIER_PATTERN.matcher(sequence.substring(i));    if (!matcher.find()) {      if (i + 1 < chars.length) {        char peek=chars[i + 1];        if (peek == '%') {          ++i;        }      }      buffer.append('%');      continue;    }    int groupCount=matcher.groupCount();    int index=-1;    int width=-1;    int precision=-1;    char conversion=0;    for (int groupIdx=1; groupIdx <= groupCount; ++groupIdx) {      String value=matcher.group(groupIdx);      if (value == null || value.equals("")) {        continue;      }      if (value.endsWith("$")) {        value=value.substring(0,value.length() - 1);        index=Integer.parseInt(value);        continue;      }      char first=value.charAt(0);      if (first == '.') {        value=value.substring(1);        precision=Integer.parseInt(value);      } else       if (first >= '0' && first <= '9') {        width=Integer.parseInt(value);      } else {        conversion=first;      }    }    String currentFormat=matcher.group();    final Object value;    final boolean found;    if (index > argsUsed.length || (width > -1 && index == -1)) {      value=null;      found=false;    } else     if (index <= argsUsed.length && index > 0) {      value=args[index];      argsUsed[index]=true;      nextArgIndex=index + 1;      found=true;    } else {      if (nextArgIndex < argsUsed.length) {        value=args[nextArgIndex];        argsUsed[nextArgIndex]=true;        ++nextArgIndex;        found=true;      } else {        value=null;        found=false;      }    }    if (!found) {      buffer.append(currentFormat);      i+=currentFormat.length() - 1;      continue;    }switch (conversion) {case 'd':case 'i':      Object l;    if (value instanceof String) {      try {        l=Long.parseLong((String)value);      } catch (      NumberFormatException e) {        l="NaN";      }    } else     if (value instanceof Number) {      l=((Number)value).intValue();    } else {      l=0;    }  buffer.append(l);break;case 'f':Object d;if (value instanceof String) {try {d=Double.parseDouble((String)value);} catch (NumberFormatException e) {d="NaN";}} else if (value instanceof Number) {d=((Number)value).doubleValue();} else {d=0;}if (precision > -1 && d instanceof Number) {d=String.format(Locale.US,"%." + precision + "f",d);}buffer.append(d);break;case 's':default :buffer.append(value);break;}i+=currentFormat.length() - 1;}for (int j=0; j < argsUsed.length; j++) {boolean argUsed=argsUsed[j];if (!argUsed) {buffer.append(" ");buffer.append(args[j]);}}return buffer.toString();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(setNamedItemNS03.class,args);}  }
class C{  public Separator(SeparatorType type){  m_type=type;}  }
class C{  private MediaType parseMediaType(final File document,final String mediaType){  final String type=mediaType != null ? mediaType : ConversionUtils.getMediaTypeFromFile(document);  if (type == null) {    throw new RuntimeException("mediaType cannot be null or empty");  } else   if (!ConversionUtils.isValidMediaType(type)) {    throw new IllegalArgumentException("file with the given media type is not supported");  }  return MediaType.parse(type);}  }
class C{  public Shape modelToView(int pos,Shape a,Position.Bias b) throws BadLocationException {  return super.modelToView(pos,adjustAllocation(a),b);}  }
class C{  public boolean waitUntilClean(Runnable listener){  if (!mScreenReady || !mElectronBeamReady) {    mCleanListener=listener;    return false;  } else {    mCleanListener=null;    return true;  }}  }
class C{  public String toString(CSSEngine eng){  StringBuffer sb=new StringBuffer();  sb.append("@font-face { ");  sb.append(sm.toString(eng));  sb.append(" }\n");  return sb.toString();}  }
class C{  @Override public void run(){  amIActive=true;  String[] shapefiles=new String[2];  String outputFile;  int progress;  int i, n, FID;  int oneHundredthTotal;  int numRecs;  ShapeType shapeType;  ShapeType outputShapeType=ShapeType.POLYGON;  GeometryFactory factory=new GeometryFactory();  com.vividsolutions.jts.geom.Geometry g1=null;  com.vividsolutions.jts.geom.Geometry g2=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  shapefiles[0]=args[0];  shapefiles[1]=args[1];  outputFile=args[2];  if ((shapefiles[0].length() <= 0) || (shapefiles[1].length() <= 0) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    com.vividsolutions.jts.geom.Geometry[] recJTSGeometries=null;    ArrayList<com.vividsolutions.jts.geom.Geometry> inputGeometryList=new ArrayList<>();    com.vividsolutions.jts.geom.Geometry outputGeometry=null;    ShapeFile input1=new ShapeFile(shapefiles[0]);    shapeType=input1.getShapeType();    numRecs=input1.getNumberOfRecords();    if (shapeType.getBaseType() == ShapeType.POINT || shapeType.getBaseType() == ShapeType.MULTIPOINT) {      outputShapeType=ShapeType.POINT;    } else     if (shapeType.getBaseType() == ShapeType.POLYLINE && outputShapeType == ShapeType.POLYGON) {      outputShapeType=ShapeType.POLYLINE;    }    oneHundredthTotal=numRecs / 100;    progress=0;    n=0;    for (    ShapeFileRecord record : input1.records) {      if (record.getShapeType() != ShapeType.NULLSHAPE) {        recJTSGeometries=record.getGeometry().getJTSGeometries();        for (int a=0; a < recJTSGeometries.length; a++) {          recJTSGeometries[a].setUserData(record.getRecordNumber());          if (recJTSGeometries[a].isValid()) {            inputGeometryList.add(recJTSGeometries[a]);          } else {            System.out.println(record.getRecordNumber() + " is invalid.");          }        }      }      n++;      if (n >= oneHundredthTotal) {        n=0;        if (cancelOp) {          cancelOperation();          return;        }        progress++;        updateProgress("Loop 1 of " + 2 + ": Reading data:",progress);      }    }    g1=factory.buildGeometry(inputGeometryList);    inputGeometryList.clear();    ShapeFile input2=new ShapeFile(shapefiles[1]);    shapeType=input2.getShapeType();    if (input2.getShapeType() != shapeType) {      showFeedback("Both input images must be of the same shape type.");      return;    }    numRecs=input2.getNumberOfRecords();    if (shapeType.getBaseType() == ShapeType.POINT || shapeType.getBaseType() == ShapeType.MULTIPOINT) {      outputShapeType=ShapeType.POINT;    } else     if (shapeType.getBaseType() == ShapeType.POLYLINE && outputShapeType == ShapeType.POLYGON) {      outputShapeType=ShapeType.POLYLINE;    }    oneHundredthTotal=numRecs / 100;    progress=0;    n=0;    for (    ShapeFileRecord record : input2.records) {      if (record.getShapeType() != ShapeType.NULLSHAPE) {        recJTSGeometries=record.getGeometry().getJTSGeometries();        for (int a=0; a < recJTSGeometries.length; a++) {          recJTSGeometries[a].setUserData(record.getRecordNumber());          if (recJTSGeometries[a].isValid()) {            inputGeometryList.add(recJTSGeometries[a]);          } else {            System.out.println(record.getRecordNumber() + " is invalid.");          }        }      }      n++;      if (n >= oneHundredthTotal) {        n=0;        if (cancelOp) {          cancelOperation();          return;        }        progress++;        updateProgress("Loop 2 of " + 2 + ": Reading data:",progress);      }    }    g2=factory.buildGeometry(inputGeometryList);    inputGeometryList.clear();    updateProgress("Performing operation (progress will not be updated):",-1);    try {      outputGeometry=g1.difference(g2);    } catch (    Exception ex) {      outputGeometry=com.vividsolutions.jts.operation.overlay.snap.SnapOverlayOp.difference(g1,g2);    }    ShapeFile output=null;    DBFWriter writer=null;    output=new ShapeFile(outputFile,outputShapeType);    output.setProjectionStringFromOtherShapefile(input1);    DBFField fields[]=new DBFField[3];    fields[0]=new DBFField();    fields[0].setName("FID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    fields[1]=new DBFField();    fields[1].setName("PARENT1_ID");    fields[1].setDataType(DBFField.DBFDataType.NUMERIC);    fields[1].setFieldLength(10);    fields[1].setDecimalCount(0);    fields[2]=new DBFField();    fields[2].setName("PARENT2_ID");    fields[2].setDataType(DBFField.DBFDataType.NUMERIC);    fields[2].setFieldLength(10);    fields[2].setDecimalCount(0);    String DBFName=output.getDatabaseFile();    writer=new DBFWriter(new File(DBFName));    writer.setFields(fields);    PreparedGeometry[] tests1=new PreparedGeometry[g1.getNumGeometries()];    com.vividsolutions.jts.geom.Geometry[] testGs1=new com.vividsolutions.jts.geom.Geometry[g1.getNumGeometries()];    int[] userData1=new int[g1.getNumGeometries()];    for (int a=0; a < g1.getNumGeometries(); a++) {      tests1[a]=PreparedGeometryFactory.prepare(g1.getGeometryN(a));      userData1[a]=Integer.parseInt(g1.getGeometryN(a).getUserData().toString());      testGs1[a]=g1.getGeometryN(a);    }    PreparedGeometry[] tests2=new PreparedGeometry[g2.getNumGeometries()];    com.vividsolutions.jts.geom.Geometry[] testGs2=new com.vividsolutions.jts.geom.Geometry[g2.getNumGeometries()];    int[] userData2=new int[g2.getNumGeometries()];    for (int a=0; a < g2.getNumGeometries(); a++) {      tests2[a]=PreparedGeometryFactory.prepare(g2.getGeometryN(a));      userData2[a]=Integer.parseInt(g2.getGeometryN(a).getUserData().toString());      testGs2[a]=g2.getGeometryN(a);    }    if (outputGeometry instanceof GeometryCollection) {      int numGeometries=outputGeometry.getNumGeometries();      oneHundredthTotal=(int)(numGeometries / 100.0);      progress=0;      n=0;      FID=0;      int parentRecNum=0;      for (int a=0; a < numGeometries; a++) {        parentRecNum=-99;        com.vividsolutions.jts.geom.Geometry gN=outputGeometry.getGeometryN(a);        for (int m=0; m < tests1.length; m++) {          if (tests1[m].overlaps(gN) || tests1[m].covers(gN) || gN.distance(testGs1[m]) < 0.0001) {            parentRecNum=userData1[m];            break;          }        }        if (gN instanceof com.vividsolutions.jts.geom.Point && outputShapeType == ShapeType.POINT) {          Coordinate p=gN.getCoordinate();          whitebox.geospatialfiles.shapefile.Point wbGeometry=new whitebox.geospatialfiles.shapefile.Point(p.x,p.y);          output.addRecord(wbGeometry);          FID++;          Object[] rowData=new Object[1];          rowData[0]=new Double(FID);          writer.addRecord(rowData);        } else         if (gN instanceof LineString && outputShapeType == ShapeType.POLYLINE) {          LineString ls=(LineString)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<>();          int[] parts={0};          Coordinate[] coords=ls.getCoordinates();          for (i=0; i < coords.length; i++) {            pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());          output.addRecord(wbGeometry);          FID++;          Object[] rowData=new Object[3];          rowData[0]=new Double(FID);          rowData[1]=new Double(parentRecNum);          rowData[2]=null;          writer.addRecord(rowData);        } else         if (gN instanceof com.vividsolutions.jts.geom.Polygon && outputShapeType == ShapeType.POLYLINE) {          com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<>();          int[] parts=new int[p.getNumInteriorRing() + 1];          Coordinate[] coords=p.getExteriorRing().getCoordinates();          if (Topology.isClockwisePolygon(coords)) {            for (i=coords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          } else {            for (i=0; i < coords.length; i++) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          }          for (int b=0; b < p.getNumInteriorRing(); b++) {            parts[b + 1]=pnts.size();            coords=p.getInteriorRingN(b).getCoordinates();            if (Topology.isClockwisePolygon(coords)) {              for (i=coords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            } else {              for (i=0; i < coords.length; i++) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            }          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());          output.addRecord(wbGeometry);          FID++;          Object[] rowData=new Object[3];          rowData[0]=new Double(FID);          rowData[1]=new Double(parentRecNum);          rowData[2]=null;          writer.addRecord(rowData);        } else         if (gN instanceof com.vividsolutions.jts.geom.Polygon && outputShapeType == ShapeType.POLYGON) {          com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<>();          int[] parts=new int[p.getNumInteriorRing() + 1];          Coordinate[] coords=p.getExteriorRing().getCoordinates();          if (Topology.isClockwisePolygon(coords)) {            for (i=coords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          } else {            for (i=0; i < coords.length; i++) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          }          for (int b=0; b < p.getNumInteriorRing(); b++) {            parts[b + 1]=pnts.size();            coords=p.getInteriorRingN(b).getCoordinates();            if (Topology.isClockwisePolygon(coords)) {              for (i=coords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            } else {              for (i=0; i < coords.length; i++) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            }          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.Polygon wbGeometry=new whitebox.geospatialfiles.shapefile.Polygon(parts,pl.getPointsArray());          output.addRecord(wbGeometry);          FID++;          Object[] rowData=new Object[3];          rowData[0]=new Double(FID);          rowData[1]=new Double(parentRecNum);          rowData[2]=null;          writer.addRecord(rowData);        } else {        }        n++;        if (n >= oneHundredthTotal) {          n=0;          if (cancelOp) {            cancelOperation();            return;          }          progress++;          updateProgress("Saving output file",progress);        }      }    } else {      showFeedback("An error was encountered when saving the output file.");      return;    }    updateProgress("Performing operation (progress will not be updated):",-1);    try {      outputGeometry=g2.difference(g1);    } catch (    Exception ex) {      outputGeometry=com.vividsolutions.jts.operation.overlay.snap.SnapOverlayOp.difference(g2,g1);    }    if (outputGeometry instanceof GeometryCollection) {      int numGeometries=outputGeometry.getNumGeometries();      oneHundredthTotal=(int)(numGeometries / 100.0);      progress=0;      n=0;      int parentRecNum=0;      for (int a=0; a < numGeometries; a++) {        parentRecNum=-99;        com.vividsolutions.jts.geom.Geometry gN=outputGeometry.getGeometryN(a);        for (int m=0; m < tests2.length; m++) {          if (tests2[m].overlaps(gN) || tests2[m].covers(gN) || gN.distance(testGs2[m]) < 0.0001) {            parentRecNum=userData2[m];            break;          }        }        if (gN instanceof com.vividsolutions.jts.geom.Point && outputShapeType == ShapeType.POINT) {          Coordinate p=gN.getCoordinate();          whitebox.geospatialfiles.shapefile.Point wbGeometry=new whitebox.geospatialfiles.shapefile.Point(p.x,p.y);          output.addRecord(wbGeometry);          FID++;          Object[] rowData=new Object[3];          rowData[0]=new Double(FID);          rowData[1]=null;          rowData[2]=new Double(parentRecNum);          writer.addRecord(rowData);        } else         if (gN instanceof LineString && outputShapeType == ShapeType.POLYLINE) {          LineString ls=(LineString)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<ShapefilePoint>();          int[] parts={0};          Coordinate[] coords=ls.getCoordinates();          for (i=0; i < coords.length; i++) {            pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());          output.addRecord(wbGeometry);          FID++;          Object[] rowData=new Object[3];          rowData[0]=new Double(FID);          rowData[1]=null;          rowData[2]=new Double(parentRecNum);          writer.addRecord(rowData);        } else         if (gN instanceof com.vividsolutions.jts.geom.Polygon && outputShapeType == ShapeType.POLYLINE) {          com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<ShapefilePoint>();          int[] parts=new int[p.getNumInteriorRing() + 1];          Coordinate[] coords=p.getExteriorRing().getCoordinates();          if (Topology.isClockwisePolygon(coords)) {            for (i=coords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          } else {            for (i=0; i < coords.length; i++) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          }          for (int b=0; b < p.getNumInteriorRing(); b++) {            parts[b + 1]=pnts.size();            coords=p.getInteriorRingN(b).getCoordinates();            if (Topology.isClockwisePolygon(coords)) {              for (i=coords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            } else {              for (i=0; i < coords.length; i++) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            }          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());          output.addRecord(wbGeometry);          FID++;          Object[] rowData=new Object[3];          rowData[0]=new Double(FID);          rowData[1]=null;          rowData[2]=new Double(parentRecNum);          writer.addRecord(rowData);        } else         if (gN instanceof com.vividsolutions.jts.geom.Polygon && outputShapeType == ShapeType.POLYGON) {          com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<ShapefilePoint>();          int[] parts=new int[p.getNumInteriorRing() + 1];          Coordinate[] coords=p.getExteriorRing().getCoordinates();          if (Topology.isClockwisePolygon(coords)) {            for (i=coords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          } else {            for (i=0; i < coords.length; i++) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          }          for (int b=0; b < p.getNumInteriorRing(); b++) {            parts[b + 1]=pnts.size();            coords=p.getInteriorRingN(b).getCoordinates();            if (Topology.isClockwisePolygon(coords)) {              for (i=coords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            } else {              for (i=0; i < coords.length; i++) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            }          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.Polygon wbGeometry=new whitebox.geospatialfiles.shapefile.Polygon(parts,pl.getPointsArray());          output.addRecord(wbGeometry);          FID++;          Object[] rowData=new Object[3];          rowData[0]=new Double(FID);          rowData[1]=null;          rowData[2]=new Double(parentRecNum);          writer.addRecord(rowData);        } else {        }        n++;        if (n >= oneHundredthTotal) {          n=0;          if (cancelOp) {            cancelOperation();            return;          }          progress++;          updateProgress("Saving output file",progress);        }      }    } else {      showFeedback("An error was encountered when saving the output file.");      return;    }    if (outputShapeType == ShapeType.POLYGON) {      updateProgress("Performing operation (progress will not be updated):",-1);      try {        outputGeometry=g1.intersection(g2);      } catch (      Exception ex) {        outputGeometry=com.vividsolutions.jts.operation.overlay.snap.SnapOverlayOp.intersection(g1,g2);      }      if (outputGeometry instanceof GeometryCollection) {        int numGeometries=outputGeometry.getNumGeometries();        oneHundredthTotal=(int)(numGeometries / 100.0);        progress=0;        n=0;        int parentRecNum1=0;        int parentRecNum2=0;        for (int a=0; a < numGeometries; a++) {          parentRecNum1=-99;          parentRecNum2=-99;          com.vividsolutions.jts.geom.Geometry gN=outputGeometry.getGeometryN(a);          for (int m=0; m < tests1.length; m++) {            if (tests1[m].overlaps(gN) || tests1[m].covers(gN) || gN.distance(testGs1[m]) < 0.0001) {              parentRecNum1=userData1[m];              break;            }          }          for (int m=0; m < tests2.length; m++) {            if (tests2[m].overlaps(gN) || tests2[m].covers(gN) || gN.distance(testGs2[m]) < 0.0001) {              parentRecNum2=userData2[m];              break;            }          }          if (gN instanceof com.vividsolutions.jts.geom.Point && outputShapeType == ShapeType.POINT) {            Coordinate p=gN.getCoordinate();            whitebox.geospatialfiles.shapefile.Point wbGeometry=new whitebox.geospatialfiles.shapefile.Point(p.x,p.y);            output.addRecord(wbGeometry);            FID++;            Object[] rowData=new Object[3];            rowData[0]=new Double(FID);            rowData[1]=new Double(parentRecNum1);            rowData[2]=new Double(parentRecNum2);            writer.addRecord(rowData);          } else           if (gN instanceof LineString && outputShapeType == ShapeType.POLYLINE) {            LineString ls=(LineString)gN;            ArrayList<ShapefilePoint> pnts=new ArrayList<ShapefilePoint>();            int[] parts={0};            Coordinate[] coords=ls.getCoordinates();            for (i=0; i < coords.length; i++) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }            PointsList pl=new PointsList(pnts);            whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());            output.addRecord(wbGeometry);            FID++;            Object[] rowData=new Object[3];            rowData[0]=new Double(FID);            rowData[1]=new Double(parentRecNum1);            rowData[2]=new Double(parentRecNum2);            writer.addRecord(rowData);          } else           if (gN instanceof com.vividsolutions.jts.geom.Polygon && outputShapeType == ShapeType.POLYLINE) {            com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)gN;            ArrayList<ShapefilePoint> pnts=new ArrayList<ShapefilePoint>();            int[] parts=new int[p.getNumInteriorRing() + 1];            Coordinate[] coords=p.getExteriorRing().getCoordinates();            if (Topology.isClockwisePolygon(coords)) {              for (i=coords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            } else {              for (i=0; i < coords.length; i++) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            }            for (int b=0; b < p.getNumInteriorRing(); b++) {              parts[b + 1]=pnts.size();              coords=p.getInteriorRingN(b).getCoordinates();              if (Topology.isClockwisePolygon(coords)) {                for (i=coords.length - 1; i >= 0; i--) {                  pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));                }              } else {                for (i=0; i < coords.length; i++) {                  pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));                }              }            }            PointsList pl=new PointsList(pnts);            whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());            output.addRecord(wbGeometry);            FID++;            Object[] rowData=new Object[3];            rowData[0]=new Double(FID);            rowData[1]=new Double(parentRecNum1);            rowData[2]=new Double(parentRecNum2);            writer.addRecord(rowData);          } else           if (gN instanceof com.vividsolutions.jts.geom.Polygon && outputShapeType == ShapeType.POLYGON) {            com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)gN;            ArrayList<ShapefilePoint> pnts=new ArrayList<ShapefilePoint>();            int[] parts=new int[p.getNumInteriorRing() + 1];            Coordinate[] coords=p.getExteriorRing().getCoordinates();            if (Topology.isClockwisePolygon(coords)) {              for (i=coords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            } else {              for (i=0; i < coords.length; i++) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            }            for (int b=0; b < p.getNumInteriorRing(); b++) {              parts[b + 1]=pnts.size();              coords=p.getInteriorRingN(b).getCoordinates();              if (Topology.isClockwisePolygon(coords)) {                for (i=coords.length - 1; i >= 0; i--) {                  pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));                }              } else {                for (i=0; i < coords.length; i++) {                  pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));                }              }            }            PointsList pl=new PointsList(pnts);            whitebox.geospatialfiles.shapefile.Polygon wbGeometry=new whitebox.geospatialfiles.shapefile.Polygon(parts,pl.getPointsArray());            output.addRecord(wbGeometry);            FID++;            Object[] rowData=new Object[3];            rowData[0]=new Double(FID);            rowData[1]=new Double(parentRecNum1);            rowData[2]=new Double(parentRecNum2);            writer.addRecord(rowData);          } else {          }          n++;          if (n >= oneHundredthTotal) {            n=0;            if (cancelOp) {              cancelOperation();              return;            }            progress++;            updateProgress("Saving output file",progress);          }        }      } else {        showFeedback("An error was encountered when saving the output file.");        return;      }    }    output.write();    writer.write();    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public byte[] decode(byte[] pArray){  return decodeBase64(pArray);}  }
class C{  public static String expandLine(CharSequence self,int tabStop){  String s=self.toString();  int index;  while ((index=s.indexOf('\t')) != -1) {    StringBuilder builder=new StringBuilder(s);    int count=tabStop - index % tabStop;    builder.deleteCharAt(index);    for (int i=0; i < count; i++)     builder.insert(index," ");    s=builder.toString();  }  return s;}  }
class C{  @Override public void add(int size,Register dst,Register src1,Register src2,ShiftType shiftType,int shiftAmt){  int shift=clampShiftAmt(size,shiftAmt);  super.add(size,dst,src1,src2,shiftType,shift);}  }
class C{  private void removeIncorrectlySkippedTests(final ITestContext tc,final IResultMap map){  List<ITestNGMethod> failsToRemove=new ArrayList<ITestNGMethod>();  IResultMap returnValue=tc.getSkippedTests();  for (  ITestResult result : returnValue.getAllResults()) {    for (    ITestResult resultToCheck : map.getAllResults()) {      if (resultToCheck.getMethod().equals(result.getMethod())) {        failsToRemove.add(resultToCheck.getMethod());        break;      }    }    for (    ITestResult resultToCheck : tc.getPassedTests().getAllResults()) {      if (resultToCheck.getMethod().equals(result.getMethod())) {        failsToRemove.add(resultToCheck.getMethod());        break;      }    }  }  for (  ITestNGMethod method : failsToRemove) {    returnValue.removeResult(method);  }  skippedTests.put(tc.getName(),tc.getSkippedTests());}  }
class C{  public static Map<String,String> parseNamedParameters(String tagValue){  Map<String,String> paramMap=new LinkedHashMap<String,String>();  StreamTokenizer tokenizer=makeTokenizer(tagValue);  try {    while (tokenizer.nextToken() == StreamTokenizer.TT_WORD) {      String key=tokenizer.sval;      if (tokenizer.nextToken() != '=') {        break;      }switch (tokenizer.nextToken()) {case StreamTokenizer.TT_WORD:case '"':case '\'':        paramMap.put(key,tokenizer.sval);default :      break;  }}} catch (IOException e) {}return paramMap;}  }
class C{  public boolean isUsePercentValuesEnabled(){  return mUsePercentValues;}  }
class C{  public static void generateEventsByDestroyRegionOperation() throws Exception {  Connection connection=pool.acquireConnection();  String regionName=Region.SEPARATOR + REGION_NAME;  for (int i=0; i < 1; i++) {    ServerRegionProxy srp=new ServerRegionProxy(regionName + i,pool);    srp.destroyRegionOnForTestsOnly(connection,eventIds[i],null);  }{    ServerRegionProxy srp=new ServerRegionProxy(regionName,pool);    srp.destroyRegionOnForTestsOnly(connection,eventIdForLastKey,null);  }}  }
class C{  public boolean supportsSAX(){  return true;}  }
class C{  public void check(SnmpValue x,long var,Object data) throws SnmpStatusException {switch ((int)var) {case 6:    if (x instanceof SnmpInt) {      try {        node.checkJvmThreadCpuTimeMonitoring(new EnumJvmThreadCpuTimeMonitoring(((SnmpInt)x).toInteger()));      } catch (      IllegalArgumentException e) {        throw new SnmpStatusException(SnmpStatusException.snmpRspWrongValue);      }    } else {      throw new SnmpStatusException(SnmpStatusException.snmpRspWrongType);    }  break;case 5:if (x instanceof SnmpInt) {  try {    node.checkJvmThreadContentionMonitoring(new EnumJvmThreadContentionMonitoring(((SnmpInt)x).toInteger()));  } catch (  IllegalArgumentException e) {    throw new SnmpStatusException(SnmpStatusException.snmpRspWrongValue);  }} else {  throw new SnmpStatusException(SnmpStatusException.snmpRspWrongType);}break;case 4:throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 3:throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 2:throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 1:throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 10:{throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);}case 7:if (x instanceof SnmpCounter64) {node.checkJvmThreadPeakCountReset(((SnmpCounter64)x).toLong());} else {throw new SnmpStatusException(SnmpStatusException.snmpRspWrongType);}break;default :throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);}}  }
class C{  public LRUStatistics stats(){  return this.stats;}  }
class C{  public void removeHighlight(Object tag){  if (tag instanceof LayeredHighlightInfo) {    LayeredHighlightInfo lhi=(LayeredHighlightInfo)tag;    if (lhi.width > 0 && lhi.height > 0) {      component.repaint(lhi.x,lhi.y,lhi.width,lhi.height);    }  } else {    HighlightInfo info=(HighlightInfo)tag;    safeDamageRange(info.p0,info.p1);  }  highlights.removeElement(tag);}  }
class C{  public double normF(){  double f=0;  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      f=Maths.hypot(f,A[i][j]);    }  }  return f;}  }
class C{  private void computeBackwardDependences(Instruction start,Instruction end){  clearRegisters(start,end);  DepGraphNode lastStoreNode=null;  DepGraphNode lastExceptionNode=null;  for (DepGraphNode pnode=(DepGraphNode)lastNode(); pnode != null; pnode=(DepGraphNode)pnode.getPrev()) {    Instruction p=pnode.instruction();    int useMask=p.operator().implicitUses;    int defMask=p.operator().implicitDefs;    if (p.isTSPoint()) {      useMask|=GenericPhysicalDefUse.getMaskTSPUses();      defMask|=GenericPhysicalDefUse.getMaskTSPDefs();    }    for (Enumeration<Operand> uses=p.getUses(); uses.hasMoreElements(); ) {      computeBackwardDependencesUse(uses.nextElement(),pnode,lastExceptionNode);    }    for (Enumeration<Register> uses=GenericPhysicalDefUse.enumerate(useMask,ir); uses.hasMoreElements(); ) {      Register r=uses.nextElement();      computeImplicitBackwardDependencesUse(r,pnode);    }    for (Enumeration<Operand> defs=p.getDefs(); defs.hasMoreElements(); ) {      computeBackwardDependencesDef(defs.nextElement(),pnode,lastExceptionNode);    }    for (Enumeration<Register> defs=GenericPhysicalDefUse.enumerate(defMask,ir); defs.hasMoreElements(); ) {      Register r=defs.nextElement();      computeImplicitBackwardDependencesDef(r,pnode);    }    boolean isStore=p.isImplicitStore();    boolean isLoad=p.isImplicitLoad();    if (isStore) {      if (lastExceptionNode != null) {        pnode.insertOutEdge(lastExceptionNode,EXCEPTION_MS);      }      lastStoreNode=pnode;    } else     if (isLoad) {      for (DepGraphNode snode=lastStoreNode; snode != null; snode=(DepGraphNode)snode.getNext()) {        if (snode.instruction().isImplicitStore() && LocationOperand.mayBeAliased(getLocation(p),getLocation(snode.instruction()))) {          pnode.insertOutEdge(snode,MEM_ANTI);        }      }    }    if (p.isPEI()) {      lastExceptionNode=pnode;    }  }}  }
class C{  public PowerVmAllocationPolicyMigrationLocalRegressionRobust(List<? extends Host> hostList,PowerVmSelectionPolicy vmSelectionPolicy,double safetyParameter,double schedulingInterval,PowerVmAllocationPolicyMigrationAbstract fallbackVmAllocationPolicy){  super(hostList,vmSelectionPolicy,safetyParameter,schedulingInterval,fallbackVmAllocationPolicy);}  }
class C{  public K minimumKey(){  return root.minimum()._1();}  }
class C{  private void applyAppendedAndPrependedText(){  for (int i=0; i < links.size(); i++) {    Link link=links.get(i);    if (link.getPrependedText() != null) {      String totalText=link.getPrependedText() + " " + link.getText();      text=TextUtils.replace(text,new String[]{link.getText()},new CharSequence[]{totalText});      links.get(i).setText(totalText);    }    if (link.getAppendedText() != null) {      String totalText=link.getText() + " " + link.getAppendedText();      text=TextUtils.replace(text,new String[]{link.getText()},new CharSequence[]{totalText});      links.get(i).setText(totalText);    }  }}  }
class C{  public long copy(String filename,OutputStream out,long offset,long size) throws IOException, InterruptedException {  if (size < 0) {    return 0;  }  BufferedInputStream is=new BufferedInputStream(getFileInputStream(filename));  byte[] buf=new byte[64 * 1024];  int bytesRead;  long pos=0;  long remaining=size;  try {    if (offset != 0) {      is.skip(offset);      pos+=offset;    }    while (remaining != 0) {      int max=buf.length;      if (max > remaining) {        max=(int)remaining;      }      bytesRead=is.read(buf,0,max);      if (bytesRead == -1) {        break;      }      out.write(buf,0,bytesRead);      pos+=bytesRead;      remaining-=bytesRead;    }    out.flush();  } catch (  Exception e) {    out.flush();  } finally {    try {      is.close();    } catch (    Exception e) {    }  }  return pos;}  }
class C{  public ParseException(int theCode,String theMessage){  super(theMessage);  code=theCode;}  }
class C{  protected RTextAreaUI createRTextAreaUI(){  return new RTextAreaUI(this);}  }
class C{  static <T>ListIterator<T> cast(Iterator<T> iterator){  return (ListIterator<T>)iterator;}  }
class C{  private URL buildUrl(String domain,String path,String[] parameters) throws MalformedURLException, DocumentListException {  if (path == null) {    throw new DocumentListException("null path");  }  StringBuffer url=new StringBuffer();  url.append("https://" + domain + URL_FEED+ path);  if (parameters != null && parameters.length > 0) {    url.append("?");    for (int i=0; i < parameters.length; i++) {      url.append(parameters[i]);      if (i != (parameters.length - 1)) {        url.append("&");      }    }  }  return new URL(url.toString());}  }
class C{  public void testLoadsOfOutboundRules(){  Log.setLevel("ERROR");  float testAmount=10000;  float timePerRule=3;  Conf conf=new Conf();  for (int i=0; i < 1000; i++) {    OutboundRule rule=new OutboundRule();    rule.setFrom("^/([a-z]+)/([0-9]+)/" + i + "/$");    rule.setTo("/blah/a/$2/");    conf.addOutboundRule(rule);  }  conf.initialise();  UrlRewriter urlRewriter=new UrlRewriter(conf);  MockRequest request=new MockRequest("/dir/999/45/");  UrlRewriteWrappedResponse urlRewriteWrappedResponse=new UrlRewriteWrappedResponse(response,request,urlRewriter);  urlRewriteWrappedResponse.encodeURL("/aaa");  long timeStart=System.currentTimeMillis();  for (float i=0; i < testAmount; i++) {    urlRewriteWrappedResponse.encodeURL("/sdasd/asdasd/asdasd");    if (i % 500 == 0 && i > 0) {      System.out.println("avg so far " + ((System.currentTimeMillis() - timeStart) / i) + "ms per rule");    }  }  long took=System.currentTimeMillis() - timeStart;  System.out.println("took " + took + "ms "+ (took / testAmount)+ "ms per rule");  assertTrue("should take less than " + timePerRule + "ms per rule",(took / testAmount) < timePerRule);}  }
class C{  @Override public V put(K key,V value){  return put(key,value,sizeOf(key,value));}  }
class C{  public <E extends Enum<E>>E optEnum(Class<E> clazz,String key){  return this.optEnum(clazz,key,null);}  }
class C{  @Override public void updateView(@NonNull final View view){  RCLog.d(this,"updateView");}  }
class C{  @DSComment("Dalvik class method") @DSBan(DSCat.DALVIK) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:39.716 -0500",hash_original_method="1EDCA09AD4C3913C3E18CC3064C22C6C",hash_generated_method="BEC005FC12BA681CE5CAC96FCB71CC2A") static public DexFile loadDex(String sourcePathName,String outputPathName,int flags) throws IOException {  return new DexFile(sourcePathName,outputPathName,flags);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public SyncHttpClient(SchemeRegistry schemeRegistry){  super(schemeRegistry);}  }
class C{  public static long copy(InputStream in,OutputStream out) throws IOException {  return copy(in,out,Long.MAX_VALUE);}  }
class C{  private Account createNewAccount(String username,String password){  Account account=new Account();  account.setUsername(username);  account.setPassword(password);  return accountService.createNewAccount(account);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:22.748 -0500",hash_original_method="73F32BBDAFE1515404B45EC2F1869A3A",hash_generated_method="FCD28EBA9B9CE91E3996D097D38A8FA2") final void updateHead(Node<E> h,Node<E> p){  if (h != p && casHead(h,p))   h.lazySetNext(h);}  }
class C{  public T caseMultipleIsA_(MultipleIsA_ object){  return null;}  }
class C{  @Override public boolean isWrapperFor(Class<?> iface) throws SQLException {  return iface != null && iface.isAssignableFrom(getClass());}  }
class C{  public static long addMarker(Context context,TrackRecordingServiceConnection trackRecordingServiceConnection,WaypointCreationRequest waypointCreationRequest){  ITrackRecordingService trackRecordingService=trackRecordingServiceConnection.getServiceIfBound();  if (trackRecordingService == null) {    Log.d(TAG,"Unable to add marker, no track recording service");  } else {    try {      long markerId=trackRecordingService.insertWaypoint(waypointCreationRequest);      if (markerId != -1L) {        Toast.makeText(context,R.string.marker_add_success,Toast.LENGTH_SHORT).show();        return markerId;      }    } catch (    RemoteException e) {      Log.e(TAG,"Unable to add marker",e);    }catch (    IllegalStateException e) {      Log.e(TAG,"Unable to add marker.",e);    }  }  Toast.makeText(context,R.string.marker_add_error,Toast.LENGTH_LONG).show();  return -1L;}  }
class C{  public boolean isWinNT351(){  return this.winNT351;}  }
class C{  InfixExpression(AST ast){  super(ast);}  }
class C{  @Override public void fill(GL2 gl){  super.draw(gl);}  }
class C{  public void push(int value){  end++;  if (end > begin) {    begin++;    if (begin == buffer.length)     begin=0;  }  if (end == buffer.length)   end=0;  buffer[end]=value;}  }
class C{  public static Subject createSubject(GSSName principals,GSSCredential credentials){  return sun.security.jgss.GSSUtil.getSubject(principals,credentials);}  }
class C{  public Observable<Nothing> send(long receiverId,String message){  return api.sendMessage(null,message,receiverId);}  }
class C{  public void addAndUpdate(Rule lastRule){  if (m_Ruleset == null) {    m_Ruleset=new ArrayList<Rule>();  }  m_Ruleset.add(lastRule);  Instances data=(m_Filtered == null) ? m_Data : (m_Filtered.get(m_Filtered.size() - 1))[1];  double[] stats=new double[6];  double[] classCounts=new double[m_Data.classAttribute().numValues()];  Instances[] filtered=computeSimpleStats(m_Ruleset.size() - 1,data,stats,classCounts);  if (m_Filtered == null) {    m_Filtered=new ArrayList<Instances[]>();  }  m_Filtered.add(filtered);  if (m_SimpleStats == null) {    m_SimpleStats=new ArrayList<double[]>();  }  m_SimpleStats.add(stats);  if (m_Distributions == null) {    m_Distributions=new ArrayList<double[]>();  }  m_Distributions.add(classCounts);}  }
class C{  public boolean isNamespaceProcessingEnabled(){  return processNamespaces;}  }
class C{  public void addDataChangeListener(DataChangedListener l){  dataChangeListeners.addListener(l);}  }
class C{  private boolean isAlphabet(int code){  if (Character.isLetter(code)) {    return true;  } else {    return false;  }}  }
class C{  String[] parseSigners(String signedBy){  String signers[]=null;  int numSigners=1;  int signedByIndex=0;  int commaIndex=0;  int signerNum=0;  while (commaIndex >= 0) {    commaIndex=signedBy.indexOf(',',signedByIndex);    if (commaIndex >= 0) {      numSigners++;      signedByIndex=commaIndex + 1;    }  }  signers=new String[numSigners];  commaIndex=0;  signedByIndex=0;  while (commaIndex >= 0) {    if ((commaIndex=signedBy.indexOf(',',signedByIndex)) >= 0) {      signers[signerNum]=signedBy.substring(signedByIndex,commaIndex).trim();      signerNum++;      signedByIndex=commaIndex + 1;    } else {      signers[signerNum]=signedBy.substring(signedByIndex).trim();    }  }  return signers;}  }
class C{  public static Map<String,Tag> convertTagsListToMap(List<Tag> tags){  if (tags == null) {    tags=new ArrayList<>();  }  Map<String,Tag> tagsMap=new HashMap<>();  for (  Tag tag : tags)   tagsMap.put(tag.getName(),tag);  return tagsMap;}  }
class C{  public void reload(){  clearCache();  getInstance(config);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:47.392 -0500",hash_original_method="9EE51BDDDFEA067740CEE5DDE13516BE",hash_generated_method="77266D89E2E51D3BE587A966F559436A") public final static NameValuePair parseNameValuePair(final String value,HeaderValueParser parser) throws ParseException {  if (value == null) {    throw new IllegalArgumentException("Value to parse may not be null");  }  if (parser == null)   parser=BasicHeaderValueParser.DEFAULT;  CharArrayBuffer buffer=new CharArrayBuffer(value.length());  buffer.append(value);  ParserCursor cursor=new ParserCursor(0,value.length());  return parser.parseNameValuePair(buffer,cursor);}  }
class C{  @Override public int decrementAir(ItemStack stack,int amt){  NBTTagCompound nbt;  if (stack.hasTagCompound()) {    nbt=stack.getTagCompound();  } else {    nbt=new NBTTagCompound();  }  int prevAmt=nbt.getInteger("air");  int newAmt=Math.max(prevAmt - amt,0);  nbt.setInteger("air",newAmt);  stack.setTagCompound(nbt);  return prevAmt - newAmt;}  }
class C{  public boolean removeMessage(String message){  SQLiteDatabase db=getWritableDatabase();  if (db != null && message != null) {    db.execSQL("UPDATE " + TABLE + " SET "+ COL_DELETED+ "="+ TRUE+ " WHERE "+ COL_MESSAGE+ "='"+ message+ "';");    return true;  }  log.debug("Message not added to store, either message or database is null. [" + message + "]");  return false;}  }
class C{  static void deleteModelMetaData(SQL table,int modelInternalId) throws AdeException {  ConnectionWrapper.executeDmlDefaultCon("delete from " + table + " where MODEL_INTERNAL_ID="+ modelInternalId);}  }
class C{  private void cleanUpOrphanedVolumes(URI vplexUri,Set<URI> allUnmanagedVolumes){  URIQueryResultList results=new URIQueryResultList();  _dbClient.queryByConstraint(ContainmentConstraint.Factory.getStorageSystemUnManagedVolumeConstraint(vplexUri),results);  Set<URI> unManagedVolumesInDBSet=new HashSet<URI>();  while (results.iterator().hasNext()) {    unManagedVolumesInDBSet.add(results.iterator().next());  }  SetView<URI> onlyAvailableinDB=Sets.difference(unManagedVolumesInDBSet,allUnmanagedVolumes);  if (onlyAvailableinDB != null && !onlyAvailableinDB.isEmpty()) {    s_logger.info("UnManagedVolumes to be Removed : " + Joiner.on("\t").join(onlyAvailableinDB));    List<UnManagedVolume> volumesToBeDeleted=new ArrayList<UnManagedVolume>();    Iterator<UnManagedVolume> unManagedVolumes=_dbClient.queryIterativeObjects(UnManagedVolume.class,new ArrayList<URI>(onlyAvailableinDB));    while (unManagedVolumes.hasNext()) {      UnManagedVolume volume=unManagedVolumes.next();      if (null == volume || volume.getInactive()) {        continue;      }      s_logger.info("Setting UnManagedVolume {} inactive",volume.getId());      volume.setStorageSystemUri(NullColumnValueGetter.getNullURI());      volume.setInactive(true);      volumesToBeDeleted.add(volume);    }    if (!volumesToBeDeleted.isEmpty()) {      _partitionManager.updateAndReIndexInBatches(volumesToBeDeleted,BATCH_SIZE,_dbClient,UNMANAGED_VOLUME);    }  }}  }
class C{  public static void modifyRequestToAcceptGzipResponse(HttpRequest request){  request.addHeader("Accept-Encoding","gzip");}  }
class C{  public ClosedWatchServiceException(){}  }
class C{  private Value read(Type type,NodeMap<InputNode> node,Value value) throws Exception {  Converter converter=lookup(type,value);  InputNode source=node.getNode();  if (converter != null) {    Object data=converter.read(source);    Class actual=type.getType();    if (value != null) {      value.setValue(data);    }    return new Reference(value,data,actual);  }  return value;}  }
class C{  public static RecombinationFilter<Derivation<IString,String>> factory(String recombinationMode,List<Featurizer<IString,String>> featurizers){  boolean msdRecombination=false;  for (  Featurizer<IString,String> featurizer : featurizers) {    if (featurizer instanceof HierarchicalReorderingFeaturizer || featurizer instanceof LexicalReorderingFeaturizer)     msdRecombination=true;  }  List<RecombinationFilter<Derivation<IString,String>>> filters=new ArrayList<>();  filters.add(new SoftConstrainedDecodingRecombinationFilter<>());switch (recombinationMode) {case PHAROAH_RECOMBINATION:{      filters.add(new LinearDistortionRecombinationFilter<>(featurizers));      filters.add(new NGramLMRecombinationFilter(featurizers));      filters.add(new SourceCoverageRecombinationFilter<>());      if (msdRecombination) {        filters.add(new MSDRecombinationFilter(featurizers));      }      return new CombinedRecombinationFilter<Derivation<IString,String>>(filters);    }case DTU_RECOMBINATION:{    filters.add(new LinearDistortionRecombinationFilter<>(featurizers));    filters.add(new NGramLMRecombinationFilter(featurizers));    filters.add(new SourceCoverageRecombinationFilter<>());    filters.add(new DTURecombinationFilter<>());    if (msdRecombination) {      filters.add(new MSDRecombinationFilter(featurizers));    }    return new CombinedRecombinationFilter<Derivation<IString,String>>(filters);  }case EXACT_RECOMBINATION:{  if (filters.isEmpty())   return new ExactRecombinationFilter<Derivation<IString,String>>(featurizers); else {    filters.add(new ExactRecombinationFilter<Derivation<IString,String>>(featurizers));    return new CombinedRecombinationFilter<Derivation<IString,String>>(filters);  }}}throw new RuntimeException("Unrecognized recombination filter: " + recombinationMode);}  }
class C{  public static void w(String tag,String msg){  if (sLevel > LEVEL_WARNING) {    return;  }  Log.w(tag,msg);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static String toASCII(String input,int flags){  return NativeIDN.toASCII(input,flags);}  }
class C{  public Vertex evaluateDEBUG(Vertex expression,List<Relationship> arguments,Map<Vertex,Vertex> variables,Network network,long startTime,long maxTime,int stack){  if (network.getBot().isDebugFine()) {    StringWriter writer=new StringWriter();    boolean first=true;    for (    Relationship argument : arguments) {      if (!first) {        writer.write(" : ");      }      first=false;      Vertex value=evaluateExpression(argument.getTarget(),variables,network,startTime,maxTime,stack);      writer.write(value.printString());    }    network.getBot().log("DEBUG",writer.toString(),Level.FINE);  }  return network.createVertex(Primitive.NULL);}  }
class C{  public ImageReuseInfoManger(String[] size){  mSizeList=size;}  }
class C{  public void addNode(String sName,int nCardinality) throws Exception {  addNode(sName,nCardinality,100 + getNrOfNodes() * 10,100 + getNrOfNodes() * 10);}  }
class C{  public Headers responseHeaders(){  return mResponseHeaders;}  }
class C{  public boolean isInJavadocText(){  return (this.javadoc & CompletionOnJavadoc.TEXT) != 0;}  }
class C{  public DoubleMatrix1D like1D(int size){  return new SparseDoubleMatrix1D(size);}  }
class C{  public int size(){  return sizeOfVector;}  }
class C{  @Override public boolean isChanged(IGASState<VS,ES,Void> state,Value u){  return true;}  }
class C{  public ListIterator<OMGeometry> listIteratorCopy(int size){  return new OMGeometryList(graphics).listIterator(size);}  }
class C{  public static void untagNode(final SQLProvider provider,final INaviViewNode node,final int tagId) throws CouldntSaveDataException {  Preconditions.checkNotNull(provider,"IE01990: Provider argument can not be null");  Preconditions.checkNotNull(node,"IE01991: Node argument can not be null");  final CConnection connection=provider.getConnection();  try {    connection.executeUpdate(String.format("DELETE FROM %s " + " WHERE node_id = %d AND tag_id = %d",CTableNames.TAGGED_NODES_TABLE,node.getId(),tagId),true);  } catch (  final SQLException exception) {    throw new CouldntSaveDataException(exception);  }}  }
class C{  public Instances stringFreeStructure(){  FastVector atts=(FastVector)m_Attributes.copy();  for (int i=0; i < atts.size(); i++) {    Attribute att=(Attribute)atts.elementAt(i);    if (att.type() == Attribute.STRING) {      atts.setElementAt(new Attribute(att.name(),null),i);    }  }  Instances result=new Instances(relationName(),atts,0);  result.m_ClassIndex=m_ClassIndex;  return result;}  }
class C{  public void animateY(int durationMillis,Easing.EasingOption easing){  if (android.os.Build.VERSION.SDK_INT < 11)   return;  ObjectAnimator animatorY=ObjectAnimator.ofFloat(this,"phaseY",0f,1f);  animatorY.setInterpolator(Easing.getEasingFunctionFromOption(easing));  animatorY.setDuration(durationMillis);  animatorY.addUpdateListener(mListener);  animatorY.start();}  }
class C{  @Override public void showDiff(String content){  final String colorizedContent=colorizeDiff(content);  diffViewer.setHTML(colorizedContent);}  }
class C{  @Override public void run(){  amIActive=true;  try {    String inputFilesString=null;    String idrisiHeaderFile=null;    String idrisiDataFile=null;    String whiteboxHeaderFile=null;    String whiteboxDataFile=null;    WhiteboxRaster output=null;    int i=0;    int row, col, rows, cols;    String[] imageFiles;    int numImages=0;    double noData=-32768;    int progress=0;    if (args.length <= 0) {      showFeedback("Plugin parameters have not been set.");      return;    }    inputFilesString=args[0];    if ((inputFilesString == null)) {      showFeedback("One or more of the input parameters have not been set properly.");      return;    }    imageFiles=inputFilesString.split(";");    numImages=imageFiles.length;    for (i=0; i < numImages; i++) {      if (numImages > 1) {        progress=(int)(100f * i / (numImages - 1));        updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      }      whiteboxHeaderFile=imageFiles[i];      if (!((new File(whiteboxHeaderFile)).exists())) {        showFeedback("Whitebox raster file does not exist.");        break;      }      WhiteboxRaster wbr=new WhiteboxRaster(whiteboxHeaderFile,"r");      rows=wbr.getNumberRows();      cols=wbr.getNumberColumns();      noData=wbr.getNoDataValue();      idrisiHeaderFile=whiteboxHeaderFile.replace(".dep",".rdc");      idrisiDataFile=whiteboxHeaderFile.replace(".dep",".rst");      (new File(idrisiHeaderFile)).delete();      (new File(idrisiDataFile)).delete();      WhiteboxRaster.DataType dataType;      if (wbr.getDataType() == WhiteboxRaster.DataType.FLOAT || wbr.getDataType() == WhiteboxRaster.DataType.DOUBLE) {        dataType=WhiteboxRaster.DataType.FLOAT;      } else {        dataType=WhiteboxRaster.DataType.INTEGER;      }      output=new WhiteboxRaster(whiteboxHeaderFile.replace(".dep","_temp.dep"),"rw",whiteboxHeaderFile,dataType,-9999);      output.setNoDataValue(-9999);      whiteboxDataFile=whiteboxHeaderFile.replace(".dep","_temp.tas");      double[] data=null;      for (row=0; row < rows; row++) {        data=wbr.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != noData) {            output.setValue(row,col,data[col]);          } else {            output.setValue(row,col,-9999);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }      output.close();      File dataFile=new File(whiteboxDataFile);      File idrisiFile=new File(idrisiDataFile);      dataFile.renameTo(idrisiFile);      boolean success=createHeaderFile(wbr,idrisiHeaderFile);      if (!success) {        showFeedback("IDRISI header file was not written properly. " + "Tool failed to export");        return;      }      wbr.close();      (new File(whiteboxHeaderFile.replace(".dep","_temp.dep"))).delete();    }    showFeedback("Operation complete!");  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static void verify(final String match) throws IllegalArgumentException {  if (match == null) {    throw ActiveMQMessageBundle.BUNDLE.nullMatch();  }  if (match.contains("#") && match.indexOf("#") < match.length() - 1) {    throw ActiveMQMessageBundle.BUNDLE.invalidMatch();  }}  }
class C{  public boolean isForce(){  return force;}  }
class C{  private Integer keyForNode(ClusterNode node,int type){  IgniteCache<Integer,Integer> cache=grid(0).cache(null);  if (cache.getConfiguration(CacheConfiguration.class).getCacheMode() == LOCAL)   return ++lastKey;  if (cache.getConfiguration(CacheConfiguration.class).getCacheMode() == REPLICATED && type == NOT_PRIMARY_AND_BACKUP)   return ++lastKey;  for (int key=lastKey + 1; key < (lastKey + 10_000); key++) {switch (type) {case NOT_PRIMARY_AND_BACKUP:{        if (!affinity(cache).isPrimaryOrBackup(node,key)) {          lastKey=key;          return key;        }        break;      }case PRIMARY:{      if (affinity(cache).isPrimary(node,key)) {        lastKey=key;        return key;      }      break;    }case BACKUP:{    if (affinity(cache).isBackup(node,key)) {      lastKey=key;      return key;    }    break;  }default :fail();}}throw new IllegalStateException("Failed to find key.");}  }
class C{  public boolean invoke(){  if (mClickListener != null && mClickListener.onMenuItemClick(this)) {    return true;  }  if (mMenu.dispatchMenuItemSelected(mMenu.getRootMenu(),this)) {    return true;  }  if (mItemCallback != null) {    mItemCallback.run();    return true;  }  if (mIntent != null) {    try {      mMenu.getContext().startActivity(mIntent);      return true;    } catch (    ActivityNotFoundException e) {      Log.e(TAG,"Can't find activity to handle intent; ignoring",e);    }  }  if (mActionProvider != null && mActionProvider.onPerformDefaultAction()) {    return true;  }  return false;}  }
class C{  private ImageView createBlankSpace(){  ImageView view=new ImageView(getContext());  TableRow.LayoutParams params=new TableRow.LayoutParams(mSwatchLength,mSwatchLength);  params.setMargins(mMarginSize,mMarginSize,mMarginSize,mMarginSize);  view.setLayoutParams(params);  return view;}  }
class C{  public ScalingOptions(){  this(DownscaleQuality.FAST,RenderingHints.VALUE_INTERPOLATION_NEAREST_NEIGHBOR);}  }
class C{  public static boolean all(Object... objects){  if (!truthy(objects)) {    return false;  }  for (  Object obj : objects) {    if (!truthy(obj)) {      return false;    }  }  return true;}  }
class C{  @Override public synchronized void trigger(DialogueState state,Collection<String> updatedVars){  String systemSpeech=system.getSettings().systemSpeech;  if (updatedVars.contains(systemSpeech) && state.hasChanceNode(systemSpeech)) {    Value v=state.queryProb(systemSpeech).getBest();    if (v instanceof SpeechData) {      system.addContent(new Assignment(system.getSettings().floor,"system"));      playSpeech((SpeechData)v);    }  }}  }
class C{  public static boolean putMapNotEmptyKeyAndValue(Map<String,String> map,String key,String value){  if (map == null || StringUtils.isEmpty(key) || StringUtils.isEmpty(value)) {    return false;  }  map.put(key,value);  return true;}  }
class C{  void updatePopulation(Solution child){  double eps=0;  double eps_con=constraintApproach(population);  boolean success=false;  if (corner != null && !child.violatesConstraints()) {    corner.add(child);    corner=corner_sort(corner);  }  double[] f2=normalizedObjectives(child);  int[] order=randomPermutation(population.size());  if (TESTING_MODE) {    for (int i=0; i < order.length; i++) {      order[i]=i;    }  }  for (int i=0; i < population.size(); i++) {    int j=order[i];    double[] weight=weights.get(j);    double[] f1=normalizedObjectives(population.get(j));    double d1_parent=distanceD1(f1,weight);    double d1_child=distanceD1(f2,weight);    double d2_parent=distanceD2(f1,d1_parent);    double d2_child=distanceD2(f2,d1_child);    double cv_parent=sumOfConstraintViolations(population.get(j));    double cv_child=sumOfConstraintViolations(child);    if (cv_child < eps_con && cv_parent < eps_con || (cv_child == cv_parent)) {      if (compareSolution(d1_child,d2_child,d1_parent,d2_parent,eps)) {        population.replace(j,child);        success=true;      }    }    if (cv_child < cv_parent) {      population.replace(j,child);      success=true;    }    if (success) {      break;    }  }}  }
class C{  public final boolean equals(Object obj){  return super.equals(obj);}  }
class C{  public void test_open_methods() throws Exception {  assertNotNull(SelectorProvider.provider());  SelectorProvider.provider().inheritedChannel();  assertNotNull(SelectorProvider.provider().openDatagramChannel());  assertNotNull(SelectorProvider.provider().openPipe());  assertNotNull(SelectorProvider.provider().openServerSocketChannel());  assertNotNull(SelectorProvider.provider().openSocketChannel());  assertNotNull(SelectorProvider.provider().openSelector());}  }
class C{  public void init(MyPerfContext ctx){  logger.info("Read configuration ...");  configured=false;  File cfgFile=null;  myperfConfigPath=System.getProperty(MYPERF_CONFIG_PATH_PROP_NAME);  if (myperfConfigPath == null || myperfConfigPath.isEmpty()) {    File cfgDir=new File(new File(ROOTPATH),STORAGE_DIR);    if (!cfgDir.exists())     cfgDir.mkdirs();    cfgFile=new File(cfgDir,MYPERF_CONFIG_FILE_NAME);    myperfConfigPath=cfgFile.getAbsolutePath();  } else   cfgFile=new File(myperfConfigPath);  if (!cfgFile.exists()) {    logger.info("Cannot find configuration file " + cfgFile.getAbsolutePath() + ". The system might not havde been configured yet.");    return;  }  logger.info("Read configuration from file " + cfgFile.getAbsolutePath());  if (readConfig(cfgFile,ctx)) {    configured=true;  }  logger.info("Done read configuration from file " + cfgFile.getAbsolutePath() + ", configured="+ configured);}  }
class C{  private void advanceRunState(int targetState){  for (; ; ) {    int c=ctl.get();    if (runStateAtLeast(c,targetState) || ctl.compareAndSet(c,ctlOf(targetState,workerCountOf(c))))     break;  }}  }
class C{  public Object readDimension(Element node) throws Exception {  Object result;  Vector<Element> children;  Element child;  int i;  double width;  double height;  String name;  if (DEBUG) {    trace(new Throwable(),node.getAttribute(ATT_NAME));  }  m_CurrentNode=node;  result=null;  children=XMLDocument.getChildTags(node);  width=0;  height=0;  for (i=0; i < children.size(); i++) {    child=children.get(i);    name=child.getAttribute(ATT_NAME);    if (name.equals(VAL_WIDTH)) {      width=readDoubleFromXML(child);    } else     if (name.equals(VAL_HEIGHT)) {      height=readDoubleFromXML(child);    } else {      System.out.println("WARNING: '" + name + "' is not a recognized name for "+ node.getAttribute(ATT_NAME)+ "!");    }  }  result=new Dimension();  ((Dimension)result).setSize(width,height);  return result;}  }
class C{  public void edge(boolean edge){  this.edge=edge;}  }
class C{  private void internalSend(String uuid,String message,ReplyHandler callback) throws WebSocketException {  checkWebSocketConnectionState();  if (callback != null) {    replyCallbackMap.put(uuid,callback);  }  send(message);}  }
class C{  public static String constructTSDBMetricName(Metric metric){  StringBuilder sb=new StringBuilder();  sb.append(metric.getMetric()).append(DELIMITER).append(metric.getScope());  if (metric.getNamespace() != null && !metric.getNamespace().isEmpty()) {    sb.append(DELIMITER).append(metric.getNamespace());  }  return sb.toString();}  }
class C{  public boolean isCloseLink(){  return closeLink;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:15.458 -0400",hash_original_method="701121F800C200039146171FD9858B49",hash_generated_method="773A0187530C4A2A8CBE79187C5CDFD7") public String toString(){  StringBuilder sb=new StringBuilder("CollectionCertStoreParameters: [\ncollection: ");  sb.append(getCollection().toString());  sb.append("\n]");  return sb.toString();}  }
class C{  private HttpURLConnection doHTTPGetRequest(String location,String clientSessionId,Map<String,String> metadata) throws CommunicationException {  try {    URL url=new URL(location);    HttpURLConnection connection=(HttpURLConnection)url.openConnection();    if (clientSessionId != null) {      connection.addRequestProperty(HTTP_HEADER_SESSION_ID,"GCS v1Client:" + clientSessionId);    }    if (metadata != null) {      connection.addRequestProperty(HTTP_HEADER_METADATA,GcUtil.getBase64EncodedMetadata(metadata));    }    if (Constants.ENABLE_REQUEST_LOGGING) {      logRequest(connection,null);    }    if (connection.getResponseCode() != 200) {      throw new CommunicationException("No status 200 received, status is :" + connection.getResponseCode());    }    return connection;  } catch (  MalformedURLException e) {    Log.e(TAG,"doHTTPGetRequest, Unable to parse url " + location);    throw new CommunicationException("Unable to parse url " + location);  }catch (  IOException e) {    Log.e(TAG,"doHTTPGetRequest, IOException while opening connection " + e.getMessage());    throw new CommunicationException("IOException while opening connection " + e.getMessage(),e);  }}  }
class C{  public static void fill(double[] a,int fromIndex,int toIndex,double val){  rangeCheck(a.length,fromIndex,toIndex);  for (int i=fromIndex; i < toIndex; i++)   a[i]=val;}  }
class C{  public Stack<Point2D> hull(){  Stack<Point2D> s=new Stack<Point2D>();  for (  Point2D p : hull)   s.push(p);  return s;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"UQADD16");  translateAll(environment,instruction,"UQADD16",instructions);}  }
class C{  public Object init(InternalContextAdapter context,Object data) throws Exception {  super.init(context,data);  blather=rsvc.getBoolean(RuntimeConstants.RUNTIME_LOG_REFERENCE_LOG_INVALID,true);  return data;}  }
class C{  private void sendStageProgressPatch(State state){  if (state.isSelfProgressionDisabled) {    ServiceUtils.logInfo(this,"Skipping patch handling (disabled)");    return;  }  Operation patch=Operation.createPatch(UriUtils.buildUri(getHost(),getSelfLink())).setBody(state);  this.sendRequest(patch);}  }
class C{  public HodgkinHuxleyRulePanel(){  super();  this.add(tabbedPane);  perNaChannels=createTextField(Float.class,null,null);  perKChannels=createTextField(Float.class,null,null);  getEna=createTextField(Float.class,null,null);  getEk=createTextField(Float.class,null,null);  mainTab.addItem("Sodium Channels",perNaChannels);  mainTab.addItem("Potassium Channels",perKChannels);  mainTab.addItem("Sodium Equilibrium",getEna);  mainTab.addItem("Potassium Equilibrium",getEk);  mainTab.addItem("Add noise",getAddNoise());  tabbedPane.add(mainTab,"Main");  tabbedPane.add(getNoisePanel(),"Noise");}  }
class C{  public boolean onKeyUp(int keyCode,KeyEvent event){  if (keyCode == KeyEvent.KEYCODE_BACK && mSlidingMenu.isMenuShowing()) {    showContent();    return true;  }  return false;}  }
class C{  private void addToken(int tokenType){  addToken(zzStartRead,zzMarkedPos - 1,tokenType);}  }
class C{  public boolean longrunTest(byte[] bitstring) throws RandomDataGenerationException {  if (bitstring.length != ranges.getBitstreamLength())   throw new RandomDataGenerationException("Invalid bitstring length");  int nBits=ranges.getBitstreamLength() * 8;  int counter0=0;  int counter1=0;  for (int i=0; i < nBits; i++) {    int curBit=1 << (7 - (i % 8));    byte curByte=bitstring[(i / 8)];    if ((curBit & curByte) > 0) {      counter0=0;      counter1++;      if (counter1 > ranges.getLongrunsBorder())       return false;    } else {      counter1=0;      counter0++;      if (counter0 > ranges.getLongrunsBorder())       return false;    }  }  return true;}  }
class C{  @Override public String retrieveURL(){  return m_URL;}  }
class C{  protected byte[] hexStringToByteArray(String hexString){  int len=hexString.length();  byte[] data=new byte[len / 2];  for (int i=0; i < len; i+=2) {    data[i / 2]=(byte)((Character.digit(hexString.charAt(i),16) << 4) + Character.digit(hexString.charAt(i + 1),16));  }  return data;}  }
class C{  private void redirect(AsyncContext ctx,String redirectLocation){  try {    ((HttpServletResponse)ctx.getResponse()).sendRedirect(redirectLocation);  } catch (  IOException ex) {    throw new UncheckedIOException(ex);  }}  }
class C{  protected void initialize(){  m_Filename="";  m_Title="";  m_CurrentCol=-1;  m_LastSearch="";  m_LastReplace="";  m_ShowAttributeIndex=true;  m_Changed=false;  m_ChangeListeners=new HashSet<ChangeListener>();}  }
class C{  public void incrementConsciousnessLevel(){  incrementConsciousnessLevel(1);}  }
class C{  public SubscriptionNotEnabledException(String message,Throwable cause){  super(message,cause);}  }
class C{  public static boolean isOfElementType(@Nullable PsiElement pe,@NotNull IElementType et){  return pe != null && isOfElementType(pe.getNode(),et);}  }
class C{  public char[] genericSignature(){  if ((this.modifiers & ExtraCompilerModifiers.AccGenericSignature) == 0)   return null;  return this.type.genericTypeSignature();}  }
class C{  public static TemplateType[] prepareTemplateTypes(String templatesPath,String category) throws IOException {  return prepareTemplateTypes(templatesPath,category,null);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
