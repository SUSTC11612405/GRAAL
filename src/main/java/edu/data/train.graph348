class C{  public EPStatementObjectModel groupByClause(GroupByClause groupByClause){  this.groupByClause=groupByClause;  return this;}  }
class C{  public static int findNextCharacterInclusive(String text,int column){  MatchResult result=RegExpUtils.findMatchAfterIndex(UnicodeUtils.regexpNotMarkOrOtherExcludingTabAndNewline,text,column - 1);  return result == null ? column : result.getIndex();}  }
class C{  @RequestMapping(value="/{type}/{uuid}",method={RequestMethod.DELETE}) public List<AccessEntryResponse> revoke(@PathVariable String type,@PathVariable String uuid,AccessRequest accessRequest){  AclEntity ae=accessService.getAclEntity(type,uuid);  Acl acl=accessService.revoke(ae,accessRequest.getAccessEntryId());  return accessService.generateAceResponses(acl);}  }
class C{  private void analyze(File outInputFile,File fastasInputFile,File treesInputfileName,int skip,int thin) throws TraceException {  try {    BufferedReader outFileReader=new BufferedReader(new FileReader(outInputFile));    BufferedReader fastasFileReader=new BufferedReader(new FileReader(fastasInputFile));    BufferedReader treesFileReader=new BufferedReader(new FileReader(treesInputfileName));    String line;    int count=0;    int printedCount=0;    String substModel=null;    ArrayList<String> trees=new ArrayList<String>();    Hashtable<String,Boolean> translateHash=new Hashtable<String,Boolean>();    Hashtable<String,Boolean> taxaHash=new Hashtable<String,Boolean>();    line=outFileReader.readLine();    while (line != null) {      if (line.matches("subst model\\d* = .*?")) {        substModel=line.replaceFirst("subst model\\d* = ","").replaceFirst("\\(.*\\/(.*)\\.dat\\)/\\(","").replaceFirst("\\.dat\\)","").replaceAll(" \\+ ","+");        line=outFileReader.readLine();      } else       if (line.matches("iterations = \\d+")) {        int iterations=Integer.parseInt(line.replaceFirst("iterations = ",""));        if (iterations % 10 == 0) {          double likelihood=0;          String model=null;          search:           while ((line=outFileReader.readLine()) != null) {            if (line.matches("iterations = \\d+")) {              break search;            } else             if (line.matches(".*?likelihood = -\\d+.*?")) {              likelihood=Double.parseDouble(line.replaceFirst(".+likelihood = ","").replaceFirst("\\s.+",""));            } else             if (line.matches("\\s+Heat:beta = .+")) {              model=line.replaceAll(" = ","=").replaceAll("::","_").replaceAll("\\*","").replaceAll("^ ","").replaceAll("\\s+",",");            }          }          String tree=treesFileReader.readLine();          String line2;          int previousLineLength=1;          search:           while ((line2=fastasFileReader.readLine()) != null) {            if (line2.matches("iterations = \\d+")) {              int fastaIterations=Integer.parseInt(line2.replaceFirst("iterations = ",""));              if (fastaIterations != iterations) {                throw new RuntimeException("Iterations is not the same: " + fastaIterations + ", "+ iterations);              }            } else             if (line2.length() == 0 && previousLineLength == 0) {              break search;            } else             if (line2.matches(">.+")) {              String sequence=fastasFileReader.readLine();              String sequenceName=line2.replaceFirst(">","").replaceFirst("\\s+.+","");              if (tree.matches(".*\\(\\s*" + sequenceName + ":.+")) {                taxaHash.put(sequenceName,false);                tree=tree.replaceFirst("\\(\\s*" + sequenceName + ":","(" + sequenceName + "[&states="+ sequence+ "]:");              } else               if (tree.matches(".*,\\s*" + sequenceName + ":.+")) {                taxaHash.put(sequenceName,false);                tree=tree.replaceFirst(",\\s*" + sequenceName + ":","," + sequenceName + "[&states="+ sequence+ "]:");              } else               if (tree.matches(".*\\)\\s*" + sequenceName + ":.+")) {                tree=tree.replaceFirst("\\)\\s*" + sequenceName + ":",")" + sequenceName + "[&states="+ sequence+ "]:");              } else               if (tree.matches(".*\\)\\s*" + sequenceName + ";.*")) {                tree=tree.replaceFirst("\\)\\s*" + sequenceName + ";",")" + sequenceName + "[&states="+ sequence+ "];");              } else {                throw new RuntimeException("Sequence name " + sequenceName + " does not exist in tree "+ tree);              }              translateHash.put(sequenceName,false);            }            previousLineLength=line2.length();          }          if ((count % thin) == 0 && count >= skip) {            trees.add("tree STATE_" + iterations + " [&lnL="+ likelihood+ ",subst="+ substModel+ ","+ model+ "] = [&U] "+ tree);            printedCount++;          }          count++;        } else {          line=outFileReader.readLine();        }      } else {        line=outFileReader.readLine();      }    }    outFileReader.close();    report(trees,translateHash.keySet().toArray(new String[translateHash.size()]),taxaHash.keySet().toArray(new String[taxaHash.size()]));  } catch (  IOException e) {    System.err.println("Error Parsing Input log: " + e.getMessage());  }}  }
class C{  public double[] distributionForInstance(Instance inst) throws Exception {  if (m_ZeroR != null) {    return m_ZeroR.distributionForInstance(inst);  }  double[] Fs=new double[m_NumClasses];  double[] pred=new double[m_NumClasses];  Instance instance=(Instance)inst.copy();  instance.setDataset(m_NumericClassData);  for (int i=0; i < m_NumGenerated; i++) {    double predSum=0;    for (int j=0; j < m_NumClasses; j++) {      double tempPred=m_Shrinkage * m_Classifiers.get(i)[j].classifyInstance(instance);      if (Utils.isMissingValue(tempPred)) {        throw new UnassignedClassException("LogitBoost: base learner predicted missing value.");      }      pred[j]=tempPred;      if (m_NumClasses == 2) {        pred[1]=-tempPred;        break;      }      predSum+=pred[j];    }    predSum/=m_NumClasses;    for (int j=0; j < m_NumClasses; j++) {      Fs[j]+=(pred[j] - predSum) * (m_NumClasses - 1) / m_NumClasses;    }  }  return probs(Fs);}  }
class C{  protected int nextInStartTag() throws IOException, XMLException {switch (current) {case 0x9:case 0xA:case 0xD:case 0x20:    do {      nextChar();    } while (current != -1 && XMLUtilities.isXMLSpace((char)current));  return LexicalUnits.S;case '/':if (nextChar() != '>') {  throw createXMLException("malformed.tag.end");}nextChar();context=(--depth == 0) ? TOP_LEVEL_CONTEXT : CONTENT_CONTEXT;return LexicalUnits.EMPTY_ELEMENT_END;case '>':nextChar();context=CONTENT_CONTEXT;return LexicalUnits.END_CHAR;case '=':nextChar();return LexicalUnits.EQ;case '"':attrDelimiter='"';nextChar();for (; ; ) {switch (current) {case '"':nextChar();return LexicalUnits.STRING;case '&':context=ATTRIBUTE_VALUE_CONTEXT;return LexicalUnits.FIRST_ATTRIBUTE_FRAGMENT;case '<':throw createXMLException("invalid.character");case -1:throw createXMLException("unexpected.eof");}nextChar();}case '\'':attrDelimiter='\'';nextChar();for (; ; ) {switch (current) {case '\'':nextChar();return LexicalUnits.STRING;case '&':context=ATTRIBUTE_VALUE_CONTEXT;return LexicalUnits.FIRST_ATTRIBUTE_FRAGMENT;case '<':throw createXMLException("invalid.character");case -1:throw createXMLException("unexpected.eof");}nextChar();}default :return readName(LexicalUnits.NAME);}}  }
class C{  private void placeChild(View child,int gravity){  LayoutParams lp=(LayoutParams)child.getLayoutParams();  int availableWidth=Math.max(0,mEnd - mStart - lp.startMargin- lp.endMargin);  if (child.getMeasuredWidth() > availableWidth || gravity == Gravity.FILL_HORIZONTAL) {    measureChildWithFixedWidth(child,availableWidth);  }  if (gravity == Gravity.START || gravity == Gravity.FILL_HORIZONTAL) {    lp.start=mStart + lp.startMargin;    mStart=lp.start + child.getMeasuredWidth() + lp.endMargin;  } else {    lp.start=mEnd - lp.endMargin - child.getMeasuredWidth();    mEnd=lp.start - lp.startMargin;  }  lp.top=mTop + lp.topMargin;  mBottom=Math.max(mBottom,lp.top + child.getMeasuredHeight() + lp.bottomMargin);}  }
class C{  public boolean probe(final CacheKey key){  try {synchronized (mLock) {      return mStorageSupplier.get().touch(getResourceId(key),key);    }  } catch (  IOException e) {    mCacheEventListener.onReadException();    return false;  }}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  public boolean isTiledData(){  return (containedTiles != null);}  }
class C{  public static double uniform(double a,double b){  if (!(a < b))   throw new IllegalArgumentException("Invalid range");  return a + uniform() * (b - a);}  }
class C{  @Override protected void onKick(String target,String kickerNick,String kickerLogin,String kickerHostname,String recipientNick,String reason){  if (recipientNick.equals(getNick())) {    service.ackNewMentions(server.getId(),target);    server.removeConversation(target);    Intent intent=Broadcast.createConversationIntent(Broadcast.CONVERSATION_REMOVE,server.getId(),target);    service.sendBroadcast(intent);  } else {    Message message=new Message(service.getString(R.string.message_kick,kickerNick,recipientNick));    message.setColor(Message.COLOR_GREEN);    server.getConversation(target).addMessage(message);    Intent intent=Broadcast.createConversationIntent(Broadcast.CONVERSATION_MESSAGE,server.getId(),target);    service.sendBroadcast(intent);  }}  }
class C{  public void clearWrite(){}  }
class C{  public IndexedPropertyDescriptor(String propertyName,Method getter,Method setter,Method indexedGetter,Method indexedSetter) throws IntrospectionException {  super(propertyName,getter,setter);  if (indexedGetter != null) {    internalSetIndexedReadMethod(indexedGetter);    internalSetIndexedWriteMethod(indexedSetter,true);  } else {    internalSetIndexedWriteMethod(indexedSetter,true);    internalSetIndexedReadMethod(indexedGetter);  }  if (!isCompatible()) {    throw new IntrospectionException(Messages.getString("beans.57"));  }}  }
class C{  public static boolean isVolumeCGFullCopySource(Volume volume,DbClient dbClient){  boolean isFullCopySource=false;  StringSet fullCopyIds=volume.getFullCopies();  if ((fullCopyIds != null) && (!fullCopyIds.isEmpty())) {    Iterator<String> fullCopyIdsIter=fullCopyIds.iterator();    while (fullCopyIdsIter.hasNext()) {      URI fullCopyURI=URI.create(fullCopyIdsIter.next());      Volume fullCopyVolume=dbClient.queryObject(Volume.class,fullCopyURI);      if ((fullCopyVolume != null) && (!fullCopyVolume.getInactive())) {        String groupName=fullCopyVolume.getReplicationGroupInstance();        if (NullColumnValueGetter.isNotNullValue(groupName) || VPlexUtil.isBackendFullCopyInReplicationGroup(fullCopyVolume,dbClient)) {          isFullCopySource=true;          break;        }      }    }  }  return isFullCopySource;}  }
class C{  public static byte[] decodeWebSafe(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,WEBSAFE_DECODABET);}  }
class C{  @Field(28) public Pointer<Pointer<IDispatch>> ppdispVal(){  return this.io.getPointerField(this,28);}  }
class C{  public static void initiateClientItemEvent(ItemStack itemStack,int event){  try {    if (NetworkManager_initiateClientItemEvent == null)     NetworkManager_initiateClientItemEvent=Class.forName(getPackage() + ".core.network.NetworkManager").getMethod("initiateClientItemEvent",ItemStack.class,Integer.TYPE);    if (instance == null)     instance=getInstance();    NetworkManager_initiateClientItemEvent.invoke(instance,itemStack,event);  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  @SuppressWarnings("unchecked") public static Class<? extends Enum<?>> findEnumType(Class<?> cls){  if (cls.getSuperclass() != Enum.class) {    cls=cls.getSuperclass();  }  return (Class<? extends Enum<?>>)cls;}  }
class C{  public UdpClient(){  connector=new NioDatagramConnector();  connector.setHandler(this);  ConnectFuture connFuture=connector.connect(new InetSocketAddress("localhost",UdpServer.PORT));  connFuture.awaitUninterruptibly();  session=connFuture.getSession();}  }
class C{  @Override public final int remainingCapacity(){  return size - stackTop.get();}  }
class C{  public Address toImagebase(final Module module,final Address address){  Preconditions.checkNotNull(module,"Error: Module argument can not be null");  Preconditions.checkNotNull(address,"Error: Address argument can not be null");  return new Address(m_debugger.fileToMemory(module.getNative(),new UnrelocatedAddress(new CAddress(address.toLong()))).getAddress().toBigInteger());}  }
class C{  public OverTheTopLayer with(Activity weakReferenceActivity){  mWeakActivity=new WeakReference<Activity>(weakReferenceActivity);  return this;}  }
class C{  public OidcClientResource oidcClient(){  return oidcClient;}  }
class C{  public static void main(final String[] args){  System.out.println(FileUtil.getPrefix("test3.txt.out"));}  }
class C{  JavaWriter(final PrintStream out){  this.out=out;}  }
class C{  protected void appendDetail(StringBuffer buffer,String fieldName,long value){  buffer.append(value);}  }
class C{  private int populate(Tree tree,NodeRef node,int[] current,double mutationRate){  int nodeNumber=node.getNumber();  if (tree.isExternal(node)) {    iTau[nodeNumber]=(tree.getNodeHeight(tree.getParent(node)) - tree.getNodeHeight(node)) * mutationRate;    return nodeNumber;  }  int[] childNumbers=new int[tree.getChildCount(node)];  for (int i=0; i < tree.getChildCount(node); i++) {    childNumbers[i]=populate(tree,tree.getChild(node,i),current,mutationRate);  }  nodeNumber=current[0];  if (!tree.isRoot(node)) {    iTau[nodeNumber]=(tree.getNodeHeight(tree.getParent(node)) - tree.getNodeHeight(node)) * mutationRate;  }  current[0]+=1;  for (int i=0; i < tree.getChildCount(node); i++) {    iParent[childNumbers[i]]=nodeNumber;  }  return nodeNumber;}  }
class C{  public void testIsolatedMode() throws Exception {  depMode=DeploymentMode.ISOLATED;  processTest(false,true);}  }
class C{  public boolean supportsCustomEditor(){  return true;}  }
class C{  public boolean isRequireVV(){  Object oo=get_Value(COLUMNNAME_RequireVV);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public int canDisplayUpTo(char[] text,int start,int limit){  return awtFont.canDisplayUpTo(text,start,limit);}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 22) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  static private List<AudioByteBuffer> splitInputStream(InputStream stream,int max_time,int min_time){  List<AudioByteBuffer> rlist=new ArrayList<>();  int[] format=new int[1];  ByteBuffer[] data=new ByteBuffer[1];  int[] size=new int[1];  int[] freq=new int[1];  int[] loop=new int[1];  try {    ALut.alutLoadWAVFile(stream,format,data,size,freq,loop);  } catch (  ALException e) {    log.warn("Error loading JoalAudioBuffer: " + e.getMessage());    return null;  }  if ((format[0] != AL.AL_FORMAT_MONO8) && (format[0] != AL.AL_FORMAT_MONO16)) {    log.warn("Invalid Format for splitting! Failing out." + parseFormat(format[0]));    return null;  }  while (data[0].remaining() > 0) {    log.debug("while loop. Source: " + data[0]);    AudioByteBuffer ab=new AudioByteBuffer(getSubBuffer(data[0],max_time,min_time,format[0],freq[0]),format[0],freq[0],loop[0]);    if (ab.data != null) {      ab.data.rewind();      rlist.add(ab);    }  }  return rlist;}  }
class C{  @Override protected void initGUI(){  super.initGUI();  setDefaultCloseOperation(GenericObjectEditorDialog.HIDE_ON_CLOSE);  getContentPane().setLayout(new BorderLayout());  getContentPane().add(m_Editor.getCustomEditor(),BorderLayout.CENTER);  ((GOEPanel)m_Editor.getCustomEditor()).addOkListener(this);  pack();}  }
class C{  public static <T1,T2,T3,T4,R>QuadFunction<T1,T2,T3,T4,R> memoizeQuadFunction(final QuadFunction<T1,T2,T3,T4,R> fn,final Cacheable<R> cache){  val memoise2=memoizeFunction(null,cache);  return null;}  }
class C{  private SecretKey readKey() throws BuildException {  if (this.keyFile == null) {    throw new BuildException("No 'keyFile' specified, cannot continue.");  }  try {    this.logInfo(" key: " + keyFile + " "+ keyFile.length());    this.logInfo(" salt: " + salt);    MessageDigest digest=MessageDigest.getInstance("SHA-1");    for (int i=0; i < 128; i++) {      digest.update(salt.getBytes());      digest.update(keyFile.getBytes());      digest.update(digest.digest());    }    byte[] sha1=digest.digest();    byte[] aes_key=new byte[16];    System.arraycopy(sha1,0,aes_key,0,aes_key.length);    SecretKey secret=new SecretKeySpec(aes_key,"AES");    return secret;  } catch (  Exception e) {    this.logInfo("readKey error: " + e);    return null;  }}  }
class C{  public void onDestroy(){  PresenterStore presenterStore=MvpFacade.getInstance().getPresenterStore();  for (  MvpPresenter<?> presenter : mPresenters) {    if (presenter.getPresenterType() == PresenterType.LOCAL) {      presenter.onDestroy();      presenterStore.remove(PresenterType.LOCAL,presenter.getTag(),presenter.getPresenterClass());    }  }  for (  MvpDelegate<?> childDelegate : mChildDelegates) {    childDelegate.onDestroy();  }}  }
class C{  public RepositoryConfig(String id,String title,RepositoryImplConfig implConfig){  this(id,title);  setRepositoryImplConfig(implConfig);}  }
class C{  public String field(){  return field;}  }
class C{  public void on(boolean on){  isOn=on;}  }
class C{  @Override public void commence(HttpServletRequest request,HttpServletResponse response,AuthenticationException arg2) throws IOException, ServletException {  log.debug("Pre-authenticated entry point called. Rejecting access");  response.sendError(HttpServletResponse.SC_UNAUTHORIZED,"Access Denied");}  }
class C{  public static HistoricalEventViewable createDBStatementView(int statementId,int streamNumber,DBStatementStreamSpec databaseStreamSpec,DatabaseConfigService databaseConfigService,EventAdapterService eventAdapterService,EPStatementAgentInstanceHandle epStatementAgentInstanceHandle,SQLColumnTypeConversion columnTypeConversionHook,SQLOutputRowConversion outputRowConversionHook,boolean enableJDBCLogging,DataCacheFactory dataCacheFactory,StatementContext statementContext) throws ExprValidationException {  List<PlaceholderParser.Fragment> sqlFragments;  try {    sqlFragments=PlaceholderParser.parsePlaceholder(databaseStreamSpec.getSqlWithSubsParams());  } catch (  PlaceholderParseException ex) {    String text="Error parsing SQL";    throw new ExprValidationException(text + ", reason: " + ex.getMessage());  }  String preparedStatementText=createPreparedStatement(sqlFragments);  SQLParameterDesc parameterDesc=getParameters(sqlFragments);  if (log.isDebugEnabled()) {    log.debug(".createDBEventStream preparedStatementText=" + preparedStatementText + " parameterDesc="+ parameterDesc);  }  String databaseName=databaseStreamSpec.getDatabaseName();  DatabaseConnectionFactory databaseConnectionFactory;  ColumnSettings metadataSetting;  try {    databaseConnectionFactory=databaseConfigService.getConnectionFactory(databaseName);    metadataSetting=databaseConfigService.getQuerySetting(databaseName);  } catch (  Exception ex) {    String text="Error connecting to database '" + databaseName + '\'';    log.error(text,ex);    throw new ExprValidationException(text + ", reason: " + ex.getMessage(),ex);  }  Connection connection;  try {    connection=databaseConnectionFactory.getConnection();  } catch (  DatabaseConfigException ex) {    String text="Error connecting to database '" + databaseName + '\'';    log.error(text,ex);    throw new ExprValidationException(text + ", reason: " + ex.getMessage(),ex);  }  ConfigurationDBRef.MetadataOriginEnum metaOriginPolicy=metadataSetting.getMetadataRetrievalEnum();  if (metaOriginPolicy == ConfigurationDBRef.MetadataOriginEnum.DEFAULT) {    String connectionClass=connection.getClass().getName();    if ((connectionClass.toLowerCase().contains("oracle") || (connectionClass.toLowerCase().contains("timesten")))) {      metaOriginPolicy=ConfigurationDBRef.MetadataOriginEnum.SAMPLE;    }  }  QueryMetaData queryMetaData;  try {    if ((metaOriginPolicy == ConfigurationDBRef.MetadataOriginEnum.METADATA) || (metaOriginPolicy == ConfigurationDBRef.MetadataOriginEnum.DEFAULT)) {      queryMetaData=getPreparedStmtMetadata(connection,parameterDesc.getParameters(),preparedStatementText,metadataSetting);    } else {      String sampleSQL;      boolean isGivenMetadataSQL=true;      if (databaseStreamSpec.getMetadataSQL() != null) {        sampleSQL=databaseStreamSpec.getMetadataSQL();        isGivenMetadataSQL=true;        if (log.isInfoEnabled()) {          log.info(".createDBStatementView Using provided sample SQL '" + sampleSQL + "'");        }      } else {        sampleSQL=createSamplePlaceholderStatement(sqlFragments);        if (log.isInfoEnabled()) {          log.info(".createDBStatementView Using un-lexed sample SQL '" + sampleSQL + "'");        }        if (parameterDesc.getBuiltinIdentifiers().length != 1) {          sampleSQL=lexSampleSQL(sampleSQL);          if (log.isInfoEnabled()) {            log.info(".createDBStatementView Using lexed sample SQL '" + sampleSQL + "'");          }        }      }      queryMetaData=getExampleQueryMetaData(connection,parameterDesc.getParameters(),sampleSQL,metadataSetting,isGivenMetadataSQL);    }  } catch (  ExprValidationException ex) {    try {      connection.close();    } catch (    SQLException e) {    }    throw ex;  }  try {    connection.close();  } catch (  SQLException e) {    String text="Error closing connection";    log.error(text,e);    throw new ExprValidationException(text + ", reason: " + e.getMessage(),e);  }  Map<String,Object> eventTypeFields=new HashMap<String,Object>();  int columnNum=1;  for (  Map.Entry<String,DBOutputTypeDesc> entry : queryMetaData.getOutputParameters().entrySet()) {    String name=entry.getKey();    DBOutputTypeDesc dbOutputDesc=entry.getValue();    Class clazz;    if (dbOutputDesc.getOptionalBinding() != null) {      clazz=dbOutputDesc.getOptionalBinding().getType();    } else {      clazz=SQLTypeMapUtil.sqlTypeToClass(dbOutputDesc.getSqlType(),dbOutputDesc.getClassName());    }    if (columnTypeConversionHook != null) {      Class newValue=columnTypeConversionHook.getColumnType(new SQLColumnTypeContext(databaseStreamSpec.getDatabaseName(),databaseStreamSpec.getSqlWithSubsParams(),name,clazz,dbOutputDesc.getSqlType(),columnNum));      if (newValue != null) {        clazz=newValue;      }    }    eventTypeFields.put(name,clazz);    columnNum++;  }  EventType eventType;  if (outputRowConversionHook == null) {    String outputEventType=statementId + "_dbpoll_" + streamNumber;    eventType=eventAdapterService.createAnonymousMapType(outputEventType,eventTypeFields,true);  } else {    Class carrierClass=outputRowConversionHook.getOutputRowType(new SQLOutputRowTypeContext(databaseStreamSpec.getDatabaseName(),databaseStreamSpec.getSqlWithSubsParams(),eventTypeFields));    if (carrierClass == null) {      throw new ExprValidationException("Output row conversion hook returned no type");    }    eventType=eventAdapterService.addBeanType(carrierClass.getName(),carrierClass,false,false,false);  }  ConnectionCache connectionCache;  DataCache dataCache;  try {    connectionCache=databaseConfigService.getConnectionCache(databaseName,preparedStatementText);    dataCache=databaseConfigService.getDataCache(databaseName,statementContext,epStatementAgentInstanceHandle,dataCacheFactory,streamNumber);  } catch (  DatabaseConfigException e) {    String text="Error obtaining cache configuration";    log.error(text,e);    throw new ExprValidationException(text + ", reason: " + e.getMessage(),e);  }  PollExecStrategyDBQuery dbPollStrategy=new PollExecStrategyDBQuery(eventAdapterService,eventType,connectionCache,preparedStatementText,queryMetaData.getOutputParameters(),columnTypeConversionHook,outputRowConversionHook,enableJDBCLogging);  return new DatabasePollingViewable(streamNumber,queryMetaData.getInputParameters(),dbPollStrategy,dataCache,eventType);}  }
class C{  public Message(){}  }
class C{  private void completePendingFlush(){  int size=_pendingFlushEntries.size();  if (size == 0) {    return;  }  for (int i=0; i < size; i++) {    PendingEntry entry=_pendingFlushEntries.get(i);    entry.afterFlush();    _pendingFsyncEntries.add(entry);  }  _pendingFlushEntries.clear();}  }
class C{  private void createAirportSymbols(){  publishProgress("Creating airport symbols...");  SparseArray<String> milStdAttributes=new SparseArray<>();  SparseArray<String> civilianColorAttributes=new SparseArray<>();  civilianColorAttributes.put(MilStdAttributes.FillColor,SymbolUtilities.colorToHexString(Color.magenta,false));  Placemark placemark;  for (  Airport airport : this.airports) {    SparseArray<String> unitModifiers=new SparseArray<>();    unitModifiers.put(ModifiersUnits.T_UNIQUE_DESIGNATION_1,airport.name);    if (friends.contains(airport.country)) {switch (airport.use) {case Airport.MILITARY:case Airport.JOINT:        placemark=new MilStd2525Placemark(airport.position,"SFGPIBA---H****",unitModifiers,milStdAttributes);      break;case Airport.CIVILIAN:case Airport.OTHER:    placemark=new MilStd2525Placemark(airport.position,"SFGPIBA---H****",unitModifiers,civilianColorAttributes);  break;default :placemark=new MilStd2525Placemark(airport.position,"SUGPIBA---H****",unitModifiers,milStdAttributes);}} else if (neutrals.contains(airport.country)) {placemark=new MilStd2525Placemark(airport.position,"SNGPIBA---H****",unitModifiers,milStdAttributes);} else if (hostiles.contains(airport.country)) {placemark=new MilStd2525Placemark(airport.position,"SHGPIBA---H****",unitModifiers,milStdAttributes);} else {placemark=new MilStd2525Placemark(airport.position,"SUGPIBA---H****",unitModifiers,milStdAttributes);}placemark.setEyeDistanceScalingThreshold(400000);placemark.setEyeDistanceScaling(true);this.airportLayer.addRenderable(placemark);}}  }
class C{  public Optional<Response> simplePost(String resourcePath,Object resource){  Optional<Response> returnValue=Optional.empty();  try {    returnValue=Optional.of(getServiceRoot().path(resourcePath).request().post(Entity.entity(resource,APPLICATION_JSON)));  } catch (  SnoopServiceUnavailableException e) {    LOGGER.warning(null);  }  return returnValue;}  }
class C{  public boolean omitsNorms(){  return omitNorms;}  }
class C{  public boolean isDue(){  Object oo=get_Value(COLUMNNAME_IsDue);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected AbstractReader(){  this(new NoNameCoder());}  }
class C{  public void registerMemoryTrimmable(MemoryTrimmable trimmable){}  }
class C{  private void removeDebuggerListeners(final IDebugger debugger){  final BreakpointManager manager=debugger.getBreakpointManager();  manager.removeListener(m_breakpointManagerListener);}  }
class C{  protected void createMainWindows(String pathStr,String[] args){  Configuration currentConfig=ConfigurationManager.getInstance().getCurrentConfiguration();  mainWindow=new MainWindow(MAIN_TITLE,path,args,dertProperties);  consoleView=(ConsoleView)currentConfig.consoleState.open();  consoleWindow=(JDialog)currentConfig.consoleState.getViewData().getViewWindow();  try {    Thread.sleep(1000);  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public void sort(){  Arrays.sort(vector,0,size);}  }
class C{  public static void assignScheduleModesToLinks(TransitSchedule schedule,Network network){  log.info("... Assigning schedule transport mode to network");  Map<Id<Link>,Set<String>> transitLinkNetworkModes=new HashMap<>();  for (  TransitLine line : schedule.getTransitLines().values()) {    for (    TransitRoute route : line.getRoutes().values()) {      if (route.getRoute() != null) {        for (        Id<Link> linkId : getTransitRouteLinkIds(route)) {          MapUtils.getSet(linkId,transitLinkNetworkModes).add(route.getTransportMode());        }      }    }  }  for (  Link link : network.getLinks().values()) {    if (transitLinkNetworkModes.containsKey(link.getId())) {      Set<String> modes=new HashSet<>();      Set<String> linkModes=transitLinkNetworkModes.get(link.getId());      linkModes.addAll(link.getAllowedModes());      for (      String m : linkModes) {        modes.add(m);      }      link.setAllowedModes(modes);    }  }}  }
class C{  public void clear(){  int n=mSize;  Object[] values=mValues;  for (int i=0; i < n; i++) {    values[i]=null;  }  mSize=0;  mGarbage=false;}  }
class C{  public boolean wipe(){  final boolean cleared=clear();  if (!cleared) {    return false;  }  final Uri uri=mTrayUri.builder().setInternal(true).setType(getType()).setModule(getModuleName()).build();  return mProviderHelper.remove(uri);}  }
class C{  public boolean isNonsingular(){  for (int j=0; j < n; j++) {    if (LU[j][j] == 0)     return false;  }  return true;}  }
class C{  private void analize(){  StringTokenizer tokenizer=new StringTokenizer(sourceData,",");  String nextToken=null;  w=Integer.parseInt(tokenizer.nextToken());  hdrText="";  boolean include=false;  do {    nextToken=tokenizer.nextToken();    if (nextToken.startsWith("\"") && nextToken.endsWith("\"")) {      hdrText=hdrText + nextToken.substring(1,nextToken.length() - 1);    } else     if (nextToken.startsWith("\"")) {      hdrText=hdrText + nextToken.substring(1,nextToken.length());      include=true;    } else     if (nextToken.endsWith("\"")) {      hdrText=hdrText + nextToken.substring(0,nextToken.length() - 1);    } else {      hdrText=hdrText + nextToken;      include=true;    }    if (include) {      hdrText=hdrText + ",";      include=false;    }  } while (!nextToken.endsWith("\""));  just=Integer.parseInt(tokenizer.nextToken());  fldId=Integer.parseInt(tokenizer.nextToken());  role=Integer.parseInt(tokenizer.nextToken());}  }
class C{  protected Map<String,String> computeEntry2DpidMap(Map<String,Map<String,OFFlowMod>> map){  Map<String,String> ret=new ConcurrentHashMap<String,String>();  for (  String dpid : map.keySet()) {    for (    String entry : map.get(dpid).keySet())     ret.put(entry,dpid);  }  return ret;}  }
class C{  @Override protected int calcnCluster(){  return 1;}  }
class C{  private void checkAndPurgeObsoleteSnapshots(URI applicationId){  if (!isRetentionRequired()) {    return;  }  List<RetainedReplica> replicas=findObsoleteReplica(applicationId.toString());  for (  RetainedReplica replica : replicas) {    for (    String applicationCopySet : replica.getAssociatedReplicaIds()) {      info("Delete application snapshots %s since it exceeds max number of clones allowed",applicationCopySet);      List<URI> snapshotIds=BlockStorageUtils.getSingleSnapshotPerSubGroupAndStorageSystem(applicationId,applicationCopySet,subGroups);      execute(new DeleteSnapshotForApplication(applicationId,snapshotIds));    }    getModelClient().delete(replica);  }}  }
class C{  void initFromNode(final Node fromNode,final double startTime,final PseudoRemovePriorityQueue<Node> pendingNodes){  DijkstraNodeData data=getData(fromNode);  visitNode(fromNode,data,pendingNodes,startTime,0,null);}  }
class C{  @Override public void respond(String response){  getUser().send().ctcpResponse(response);}  }
class C{  public void append(char ch){  text.append(ch);}  }
class C{  public void prepareNonBlocking(){  valuePool.prepareNonBlocking();  rootLocationPool.prepareNonBlocking();}  }
class C{  public static DoubleMatrix1D div(DoubleMatrix1D A,double s){  return A.assign(F.div(s));}  }
class C{  protected void init() throws IOException {  if (internalIn2 != null)   return;  String encoding;  byte bom[]=new byte[BOM_SIZE];  int n, unread;  n=internalIn.read(bom,0,bom.length);  if ((bom[0] == (byte)0x00) && (bom[1] == (byte)0x00) && (bom[2] == (byte)0xFE)&& (bom[3] == (byte)0xFF)) {    encoding="UTF-32BE";    unread=n - 4;  } else   if ((bom[0] == (byte)0xFF) && (bom[1] == (byte)0xFE) && (bom[2] == (byte)0x00)&& (bom[3] == (byte)0x00)) {    encoding="UTF-32LE";    unread=n - 4;  } else   if ((bom[0] == (byte)0xEF) && (bom[1] == (byte)0xBB) && (bom[2] == (byte)0xBF)) {    encoding="UTF-8";    unread=n - 3;  } else   if ((bom[0] == (byte)0xFE) && (bom[1] == (byte)0xFF)) {    encoding="UTF-16BE";    unread=n - 2;  } else   if ((bom[0] == (byte)0xFF) && (bom[1] == (byte)0xFE)) {    encoding="UTF-16LE";    unread=n - 2;  } else {    encoding=defaultEnc;    unread=n;  }  if (unread > 0)   internalIn.unread(bom,(n - unread),unread);  if (encoding == null) {    internalIn2=new InputStreamReader(internalIn);  } else {    internalIn2=new InputStreamReader(internalIn,encoding);  }}  }
class C{  public String(char[] value,int offset,int count){}  }
class C{  public static void main(String[] args) throws IOException {  boolean enableOutput=true;  boolean outputToFile=false;  String inputFolder="";  String outputFolder="";  String workload="random";  String vmAllocationPolicy="thr";  String vmSelectionPolicy="rs";  String parameter="0.8";  new RandomRunner(enableOutput,outputToFile,inputFolder,outputFolder,workload,vmAllocationPolicy,vmSelectionPolicy,parameter);}  }
class C{  protected void decodeChild(mxCodec dec,Node child,Object obj){  String fieldname=getFieldName(((Element)child).getAttribute("as"));  if (fieldname == null || !isExcluded(obj,fieldname,child,false)) {    Object value=null;    Object template=getFieldValue(obj,fieldname);    if (child.getNodeName().equals("add")) {      value=((Element)child).getAttribute("value");      if (value == null) {        value=child.getTextContent();      }    } else {      if (template != null && template.getClass().isArray()) {        template=null;      } else       if (template instanceof Collection) {        ((Collection)template).clear();      }      value=dec.decode(child,template);    }    if (value != null && !value.equals(template)) {      if (fieldname != null && obj instanceof Map) {        ((Map)obj).put(fieldname,value);      } else       if (fieldname != null && fieldname.length() > 0) {        setFieldValue(obj,fieldname,value);      } else       if (obj instanceof Collection) {        ((Collection)obj).add(value);      }    }  }}  }
class C{  public static <T>LazyDequeX<T> fromStreamS(Stream<T> stream){  return new LazyDequeX<T>(Flux.from(ReactiveSeq.fromStream(stream)));}  }
class C{  protected AbstractHashedMap(int initialCapacity){  this(initialCapacity,DEFAULT_LOAD_FACTOR);}  }
class C{  @SuppressWarnings("unchecked") public <T extends WebMediumConfig>T create(T config){  config.addCredentials(this);  String xml=POST(this.url + "/create-" + config.getType(),config.toXML());  Element root=parse(xml);  if (root == null) {    return null;  }  try {    config=(T)config.getClass().newInstance();    config.parseXML(root);    return config;  } catch (  Exception exception) {    this.exception=SDKException.parseFailure(exception);    throw this.exception;  }}  }
class C{  public boolean isPersonalLock(){  Object oo=get_Value(COLUMNNAME_IsPersonalLock);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void invokeDynamic(String name,String desc,Handle bsm,Object... bsmArgs){  mv.visitInvokeDynamicInsn(name,desc,bsm,bsmArgs);}  }
class C{  public RecentlyViewedProducts(final String id){  super(id,true);}  }
class C{  public static Paint newGuidelinePaint(){  final Paint paint=new Paint();  paint.setColor(Color.parseColor(SEMI_TRANSPARENT));  paint.setStrokeWidth(DEFAULT_GUIDELINE_THICKNESS_PX);  return paint;}  }
class C{  @LargeTest public void testMediaVideoItemTransitions() throws Exception {  final String videoItemFileName=INPUT_FILE_PATH + "H263_profile0_176x144_15fps_256kbps_AACLC_32kHz_128kbps_s_0_26.3gp";  final int videoItemRenderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final MediaVideoItem mediaVideoItem1=mVideoEditorHelper.createMediaItem(mVideoEditor,"mediaVideoItem1",videoItemFileName,videoItemRenderingMode);  mVideoEditor.addMediaItem(mediaVideoItem1);  assertNull("Begin Transition",mediaVideoItem1.getBeginTransition());  assertNull("End Transition",mediaVideoItem1.getEndTransition());  TransitionFadeBlack transition1=mVideoEditorHelper.createTFadeBlack("transition1",mediaVideoItem1,null,0,Transition.BEHAVIOR_SPEED_UP);  mVideoEditor.addTransition(transition1);  assertEquals("Begin transition",transition1,mediaVideoItem1.getEndTransition());  assertNotNull("End Transition",mediaVideoItem1.getEndTransition());  assertTrue(mediaVideoItem1.getEndTransition().getId().equals(transition1.getId()));  assertTrue(mediaVideoItem1.getEndTransition().getDuration() == transition1.getDuration() ? true : false);  assertTrue(mediaVideoItem1.getEndTransition().getBehavior() == transition1.getBehavior() ? true : false);  TransitionFadeBlack transition2=mVideoEditorHelper.createTFadeBlack("transition2",null,mediaVideoItem1,0,Transition.BEHAVIOR_LINEAR);  mVideoEditor.addTransition(transition2);  assertNotNull("Begin transition",mediaVideoItem1.getBeginTransition());  assertEquals("End Transition",transition2,mediaVideoItem1.getBeginTransition());  assertTrue(mediaVideoItem1.getBeginTransition().getId().equals(transition2.getId()));  assertTrue(mediaVideoItem1.getBeginTransition().getDuration() == transition2.getDuration() ? true : false);  assertTrue(mediaVideoItem1.getBeginTransition().getBehavior() == transition2.getBehavior() ? true : false);}  }
class C{  private void ensureOpen() throws IOException {  if (buf == null)   throw new IOException("Stream closed");}  }
class C{  private void readTillEOL(StreamTokenizer tokenizer) throws IOException {  while (tokenizer.nextToken() != StreamTokenizer.TT_EOL) {  }  ;  tokenizer.pushBack();}  }
class C{  public static String urlEncode(@Nullable String s){  if (s == null) {    return "";  }  try {    return URLEncoder.encode(s,"UTF-8");  } catch (  UnsupportedEncodingException e) {    throw new AssertionError("UTF-8 should be supported in every JVM");  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SexecPackage.IF__CHECK:    return check != null;case SexecPackage.IF__THEN_STEP:  return thenStep != null;case SexecPackage.IF__ELSE_STEP:return elseStep != null;}return super.eIsSet(featureID);}  }
class C{  public void addGetfield(String c,String name,String type){  add(GETFIELD);  int ci=constPool.addClassInfo(c);  addIndex(constPool.addFieldrefInfo(ci,name,type));  growStack(Descriptor.dataSize(type) - 1);}  }
class C{  private BigInteger procedure_C(BigInteger p,BigInteger q){  BigInteger pSub1=p.subtract(ONE);  BigInteger pSub1DivQ=pSub1.divide(q);  int length=p.bitLength();  for (; ; ) {    BigInteger d=new BigInteger(length,init_random);    if (d.compareTo(ONE) > 0 && d.compareTo(pSub1) < 0) {      BigInteger a=d.modPow(pSub1DivQ,p);      if (a.compareTo(ONE) != 0) {        return a;      }    }  }}  }
class C{  public void resetWithShared(char[] buf,int start,int len){  _resultString=null;  _resultArray=null;  _inputBuffer=buf;  _inputStart=start;  _inputLen=len;  if (_hasSegments) {    clearSegments();  }}  }
class C{  public int read(byte[] b,int off,int len) throws IOException {  ensureOpen();  if (off < 0 || len < 0 || off > b.length - len) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return 0;  }  if (entry == null) {    return -1;  }switch (entry.method) {case DEFLATED:    len=super.read(b,off,len);  if (len == -1) {    readEnd(entry);    entryEOF=true;    entry=null;  } else {    crc.update(b,off,len);  }return len;case STORED:if (remaining <= 0) {entryEOF=true;entry=null;return -1;}if (len > remaining) {len=(int)remaining;}len=in.read(b,off,len);if (len == -1) {throw new ZipException("unexpected EOF");}crc.update(b,off,len);remaining-=len;if (remaining == 0 && entry.crc != crc.getValue()) {throw new ZipException("invalid entry CRC (expected 0x" + Long.toHexString(entry.crc) + " but got 0x"+ Long.toHexString(crc.getValue())+ ")");}return len;default :throw new ZipException("invalid compression method");}}  }
class C{  private static boolean isEmergencyNumberInternal(String number,boolean useExactMatch){  return isEmergencyNumberInternal(number,null,useExactMatch);}  }
class C{  public void addCircle(float latPoint,float lonPoint,float radius,int units,int nverts,LinkProperties properties) throws IOException {  LinkCircle.write(latPoint,lonPoint,radius,units,nverts,properties,link.dos);}  }
class C{  public boolean offerLast(E e){  addLast(e);  return true;}  }
class C{  protected String doIt() throws Exception {  log.info("doIt = From=" + from_AD_ImpFormat_ID + " To="+ to_AD_ImpFormat_ID);  MImpFormat from=new MImpFormat(getCtx(),from_AD_ImpFormat_ID,get_TrxName());  if (from.getAD_ImpFormat_ID() != from_AD_ImpFormat_ID)   throw new Exception("From Format not found - " + from_AD_ImpFormat_ID);  MImpFormat to=new MImpFormat(getCtx(),to_AD_ImpFormat_ID,get_TrxName());  if (to.getAD_ImpFormat_ID() != to_AD_ImpFormat_ID)   throw new Exception("To Format not found - " + from_AD_ImpFormat_ID);  if (from.getAD_Table_ID() != to.getAD_Table_ID())   throw new Exception("From-To do Not have same Format Table");  MImpFormatRow[] rows=from.getRows();  for (int i=0; i < rows.length; i++) {    MImpFormatRow row=rows[i];    MImpFormatRow copy=new MImpFormatRow(to,row);    if (!copy.save())     throw new Exception("Copy error");  }  String msg="#" + rows.length;  if (!from.getFormatType().equals(to.getFormatType()))   return msg + " - Note: Format Type different!";  return msg;}  }
class C{  public void append(BytesRef ref){  append(ref.bytes,ref.offset,ref.length);}  }
class C{  private void doAcquireSharedInterruptibly(int arg) throws InterruptedException {  final Node node=addWaiter(Node.SHARED);  boolean failed=true;  try {    for (; ; ) {      final Node p=node.predecessor();      if (p == head) {        int r=tryAcquireShared(arg);        if (r >= 0) {          setHeadAndPropagate(node,r);          p.next=null;          failed=false;          return;        }      }      if (shouldParkAfterFailedAcquire(p,node) && parkAndCheckInterrupt())       throw new InterruptedException();    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  public void testIsConnected() throws Exception {  IMqttAsyncClient mqttClient=null;  try {    mqttClient=new MqttAndroidClient(mContext,mqttServerURI,"testConnect");    IMqttToken connectToken=null;    IMqttToken disconnectToken=null;    assertFalse(mqttClient.isConnected());    connectToken=mqttClient.connect(null,null);    connectToken.waitForCompletion(waitForCompletionTime);    assertTrue(mqttClient.isConnected());    disconnectToken=mqttClient.disconnect(null,null);    disconnectToken.waitForCompletion(waitForCompletionTime);    assertFalse(mqttClient.isConnected());  }  finally {    if (mqttClient != null) {      mqttClient.close();    }  }}  }
class C{  protected void reopen() throws IOException {  if (inputStream != null) {    Debug.message("binaryfile","StreamInputReader: Closing inputStream");    inputStream.close();  }  inputStreamCount=0;}  }
class C{  public RegionReinitializedException(String s,String regionFullPath,Throwable ex){  super(s,regionFullPath,ex);}  }
class C{  public SetSessionManagementPropertyScriptCommand(Configuration configuration,String resourcePath,String propertyName,String propertyValue){  super(configuration,resourcePath);  this.propertyName=propertyName;  this.propertyValue=propertyValue;}  }
class C{  public static WritableRaster copyRaster(Raster ras,int minX,int minY){  WritableRaster ret=Raster.createWritableRaster(ras.getSampleModel(),new Point(0,0));  ret=ret.createWritableChild(ras.getMinX() - ras.getSampleModelTranslateX(),ras.getMinY() - ras.getSampleModelTranslateY(),ras.getWidth(),ras.getHeight(),minX,minY,null);  DataBuffer srcDB=ras.getDataBuffer();  DataBuffer retDB=ret.getDataBuffer();  if (srcDB.getDataType() != retDB.getDataType()) {    throw new IllegalArgumentException("New DataBuffer doesn't match original");  }  int len=srcDB.getSize();  int banks=srcDB.getNumBanks();  int[] offsets=srcDB.getOffsets();  for (int b=0; b < banks; b++) {switch (srcDB.getDataType()) {case DataBuffer.TYPE_BYTE:{        DataBufferByte srcDBT=(DataBufferByte)srcDB;        DataBufferByte retDBT=(DataBufferByte)retDB;        System.arraycopy(srcDBT.getData(b),offsets[b],retDBT.getData(b),offsets[b],len);        break;      }case DataBuffer.TYPE_INT:{      DataBufferInt srcDBT=(DataBufferInt)srcDB;      DataBufferInt retDBT=(DataBufferInt)retDB;      System.arraycopy(srcDBT.getData(b),offsets[b],retDBT.getData(b),offsets[b],len);      break;    }case DataBuffer.TYPE_SHORT:{    DataBufferShort srcDBT=(DataBufferShort)srcDB;    DataBufferShort retDBT=(DataBufferShort)retDB;    System.arraycopy(srcDBT.getData(b),offsets[b],retDBT.getData(b),offsets[b],len);    break;  }case DataBuffer.TYPE_USHORT:{  DataBufferUShort srcDBT=(DataBufferUShort)srcDB;  DataBufferUShort retDBT=(DataBufferUShort)retDB;  System.arraycopy(srcDBT.getData(b),offsets[b],retDBT.getData(b),offsets[b],len);  break;}}}return ret;}  }
class C{  public VCardReader(String str){  this(str,VCardVersion.V2_1);}  }
class C{  public NetworkEvent(ConnectionRequest request,int progressType){  super(request,ActionEvent.Type.Progress);  this.progressType=progressType;}  }
class C{  public static String[] append(final String[] a,final String... b){  final int alen=a.length;  final int blen=b.length;  final String[] res=Arrays.copyOf(a,alen + blen);  System.arraycopy(b,0,res,alen,blen);  return res;}  }
class C{  void renderShadowMap(){  glUseProgram(shadowProgram);  glUniformMatrix4fv(shadowProgramVPUniform,false,light.get(matrixBuffer));  glBindFramebufferEXT(GL_FRAMEBUFFER_EXT,fbo);  glViewport(0,0,shadowMapSize,shadowMapSize);  glClear(GL_DEPTH_BUFFER_BIT);  glDrawArrays(GL_TRIANGLES,0,6 * 6 * boxes.length);  glBindFramebufferEXT(GL_FRAMEBUFFER_EXT,0);  glUseProgram(0);}  }
class C{  @OnClick(R.id.nested_back_button) public void backButtonOnClick(){  getActivity().startActivity(new Intent(getActivity(),BackNavigationActivity.class));}  }
class C{  public boolean isTrackingActiveSession(){  return session == null;}  }
class C{  private int remoteUpdatePois(List<Poi> pois,String changeSetId){  int count=0;  for (  Poi poi : pois) {    if (remoteUpdatePoi(poi,changeSetId)) {      count++;    }  }  return count;}  }
class C{  public static final int startingSubMultiple(int lgTarget,ResizeFactor rf,int lgMin){  int lgRF=rf.lg();  return (lgTarget <= lgMin) ? lgMin : (lgRF == 0) ? lgTarget : (lgTarget - lgMin) % lgRF + lgMin;}  }
class C{  private boolean satisfyRedundancy(){  Move bestMove=null;  BucketRollup first=null;  while (bestMove == null) {    if (model.getLowRedundancyBuckets().isEmpty()) {      return false;    }    first=model.getLowRedundancyBuckets().first();    bestMove=model.findBestTarget(first,true);    if (bestMove == null && !model.enforceUniqueZones()) {      bestMove=model.findBestTarget(first,false);    }    if (bestMove == null) {      if (logger.isDebugEnabled()) {        logger.debug("Skipping low redundancy bucket {} because no member will accept it",first);      }      model.ignoreLowRedundancyBucket(first);    }  }  model.createRedundantBucket(first,bestMove.getTarget());  return true;}  }
class C{  public DateStart(Date startDate,boolean hasTime){  super(startDate,hasTime);}  }
class C{  public boolean remove(AccessibleState state){  if (states == null) {    return false;  } else {    return states.removeElement(state);  }}  }
class C{  private JsonScope peek(){  return stack.get(stack.size() - 1);}  }
class C{  public static MultiErrorException check(String fieldName,boolean valid,String messageKey,Object... args){  return new MultiErrorException().check(fieldName,valid,messageKey,args);}  }
class C{  public StatementBuilder(String string){  builder.append(string);}  }
class C{  @Override public void agg(double newVal){  valueSetForObj.add(newVal);}  }
class C{  public void shutDown(){  setTab(null);  if (mLayerTitleCache != null)   mLayerTitleCache.shutDown();  mCompositorView.shutDown();}  }
class C{  private static void s_uarimxx(SparseBlock a,double[] c,int m,int n,double init,Builtin builtin,int rl,int ru){  for (int i=rl, cix=rl * 2; i < ru; i++, cix+=2) {    if (!a.isEmpty(i)) {      int apos=a.pos(i);      int alen=a.size(i);      int[] aix=a.indexes(i);      double[] avals=a.values(i);      int maxindex=indexmax(a.values(i),apos,init,alen,builtin);      c[cix + 0]=(double)aix[apos + maxindex] + 1;      c[cix + 1]=avals[apos + maxindex];      if (alen < n && (builtin.execute2(0,c[cix + 1]) == 1)) {        int ix=n - 1;        for (int j=alen - 1; j >= 0; j--, ix--)         if (aix[j] != ix)         break;        c[cix + 0]=ix + 1;        c[cix + 1]=0;      }    } else {      c[cix + 0]=n;      c[cix + 1]=0;    }  }}  }
class C{  private ContentIdentifier(ASN1OctetString value){  this.value=value;}  }
class C{  public void testCase21(){  byte rBytes[]={0};  BigInteger aNumber=BigInteger.ZERO;  BigInteger bNumber=BigInteger.ZERO;  BigInteger result=aNumber.add(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",0,result.signum());}  }
class C{  public void putSet(String key,Set<String> values){  editor.putStringSet(key,values);  editor.apply();}  }
class C{  public static OnSelectClause create(String windowName,String optionalAsName){  return new OnSelectClause(windowName,optionalAsName);}  }
class C{  public static synchronized void writeImage(final String path,final byte[] byteArray){  if (byteArray.length == 0) {    return;  }  System.gc();  InputStream in=null;  FileOutputStream fos=null;  try {    File parentDir=new File(path).getParentFile();    if (!parentDir.exists()) {      parentDir.mkdirs();    }    byte[] decodeBuffer=Base64.decodeBase64(byteArray);    in=new ByteArrayInputStream(decodeBuffer);    BufferedImage img=ImageIO.read(in);    fos=new FileOutputStream(path);    ImageIO.write(img,"png",fos);    img=null;  } catch (  Exception e) {    logger.warn(e.getMessage());  } finally {    if (in != null) {      try {        in.close();      } catch (      Exception e) {        e.printStackTrace();      }    }    if (fos != null) {      try {        fos.close();      } catch (      Exception e) {        e.printStackTrace();      }    }  }}  }
class C{  public void testBug2606() throws Exception {  try {    this.stmt.executeUpdate("DROP TABLE IF EXISTS testBug2606");    this.stmt.executeUpdate("CREATE TABLE testBug2606(year_field YEAR)");    this.stmt.executeUpdate("INSERT INTO testBug2606 VALUES (2004)");    PreparedStatement yrPstmt=this.conn.prepareStatement("SELECT year_field FROM testBug2606");    this.rs=yrPstmt.executeQuery();    assertTrue(this.rs.next());    assertEquals(2004,this.rs.getInt(1));  }  finally {    this.stmt.executeUpdate("DROP TABLE IF EXISTS testBug2606");  }}  }
class C{  public static boolean isDomain(String target,String[] strings) throws MalformedURLException {  URL domain=new URL(target);  for (  String s : strings) {    if (!s.contains("/")) {      if (ContentType.hostContains(domain.getHost(),s)) {        return true;      } else {        continue;      }    }    if (!s.contains("://")) {      s="http://" + s;    }    try {      URL comparison=new URL(s.toLowerCase());      if (ContentType.hostContains(domain.getHost(),comparison.getHost()) && domain.getPath().startsWith(comparison.getPath())) {        return true;      }    } catch (    MalformedURLException ignored) {    }  }  return false;}  }
class C{  private synchronized void notifyPanListeners(){  for (  PanListener listener : mPanListeners) {    listener.panApplied();  }}  }
class C{  public Xpp3DomDriver(final NameCoder nameCoder){  super(nameCoder);}  }
class C{  public DefaultStateMachineEventPublisher(ApplicationEventPublisher applicationEventPublisher){  this.applicationEventPublisher=applicationEventPublisher;}  }
class C{  public boolean isXIncludeAware(){  try {    return xmlReader.getFeature(XINCLUDE_FEATURE);  } catch (  SAXException exc) {    return false;  }}  }
class C{  public static final int randomUnsetBit(Random r,BitSet bits,final int max){  if (bits.cardinality() == max + 1) {    return -1;  }  final int candidate=TestUtil.nextInt(r,0,max);  if (bits.get(candidate)) {    final int lo=bits.previousClearBit(candidate);    final int hi=bits.nextClearBit(candidate);    if (lo < 0 && max < hi) {      fail("how the hell did we not short circut out? card=" + bits.cardinality() + "/size="+ bits.size());    } else     if (lo < 0) {      return hi;    } else     if (max < hi) {      return lo;    }    return ((candidate - lo) < (hi - candidate)) ? lo : hi;  }  return candidate;}  }
class C{  public static int hashCharArray(int seed,char... charArray){  return hash(seed,charArray);}  }
class C{  private void createDataSocket() throws IOException {  if (isPassive()) {    try {      createPassiveDataPort();    } catch (    final IOException e) {      createActiveDataPort();    }  } else {    try {      createActiveDataPort();    } catch (    final IOException e) {      createPassiveDataPort();    }  }}  }
class C{  public boolean isScaled(){  return useScaling;}  }
class C{  public double frameDuration(){switch (layerDescription) {case 3:    return 384 / (getSampleRate() * 0.001);case 2:case 1:  if (audioVersionId == 3) {    return 1152 / (getSampleRate() * 0.001);  } else {    return 576 / (getSampleRate() * 0.001);  }default :return -1;}}  }
class C{  public void javacError(String errorReport,Exception exception) throws JasperException {  throw new JasperException(Localizer.getMessage("jsp.error.unable.compile"),exception);}  }
class C{  public static boolean resumeSimulation(){  paused=false;  if (pauseAt <= clock) {    pauseAt=-1;  }  return !paused;}  }
class C{  public boolean isPreferredFlag(){  return preferredFlag;}  }
class C{  public Iterator iterator(IntIterator rows){  return new TupleManagerIterator(this,rows);}  }
class C{  private Object js_escape(Object[] args){  final int URL_XALPHAS=1, URL_XPALPHAS=2, URL_PATH=4;  String s=ScriptRuntime.toString(args,0);  int mask=URL_XALPHAS | URL_XPALPHAS | URL_PATH;  if (args.length > 1) {    double d=ScriptRuntime.toNumber(args[1]);    if (d != d || ((mask=(int)d) != d) || 0 != (mask & ~(URL_XALPHAS | URL_XPALPHAS | URL_PATH))) {      throw Context.reportRuntimeError0("msg.bad.esc.mask");    }  }  StringBuffer sb=null;  for (int k=0, L=s.length(); k != L; ++k) {    int c=s.charAt(k);    if (mask != 0 && ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')|| c == '@' || c == '*' || c == '_' || c == '-' || c == '.' || (0 != (mask & URL_PATH) && (c == '/' || c == '+')))) {      if (sb != null) {        sb.append((char)c);      }    } else {      if (sb == null) {        sb=new StringBuffer(L + 3);        sb.append(s);        sb.setLength(k);      }      int hexSize;      if (c < 256) {        if (c == ' ' && mask == URL_XPALPHAS) {          sb.append('+');          continue;        }        sb.append('%');        hexSize=2;      } else {        sb.append('%');        sb.append('u');        hexSize=4;      }      for (int shift=(hexSize - 1) * 4; shift >= 0; shift-=4) {        int digit=0xf & (c >> shift);        int hc=(digit < 10) ? '0' + digit : 'A' - 10 + digit;        sb.append((char)hc);      }    }  }  return (sb == null) ? s : sb.toString();}  }
class C{  protected HttpBasicAuthentication(String challenge,Configuration conf) throws HttpAuthenticationException {  setConf(conf);  this.challenge=challenge;  credentials=new ArrayList();  String username=this.conf.get("http.auth.basic." + challenge + ".user");  String password=this.conf.get("http.auth.basic." + challenge + ".password");  if (LOG.isTraceEnabled()) {    LOG.trace("BasicAuthentication challenge is " + challenge);    LOG.trace("BasicAuthentication username=" + username);    LOG.trace("BasicAuthentication password=" + password);  }  if (username == null) {    throw new HttpAuthenticationException("Username for " + challenge + " is null");  }  if (password == null) {    throw new HttpAuthenticationException("Password for " + challenge + " is null");  }  byte[] credBytes=(username + ":" + password).getBytes();  credentials.add("Authorization: Basic " + new String(Base64.encodeBase64(credBytes)));  if (LOG.isTraceEnabled()) {    LOG.trace("Basic credentials: " + credentials);  }}  }
class C{  public JSONArray put(Map<?,?> value){  this.put(new JSONObject(value));  return this;}  }
class C{  public static void writeDec(Word w){  if (BYTES_IN_ADDRESS == 4) {    write(w.toInt());  } else {    write(w.toLong());  }}  }
class C{  public Node afterEncode(mxCodec enc,Object obj,Node node){  if (obj instanceof mxCell) {    mxCell cell=(mxCell)obj;    if (cell.getValue() instanceof Node) {      Element tmp=(Element)node;      node=enc.getDocument().importNode((Node)cell.getValue(),true);      node.appendChild(tmp);      String id=tmp.getAttribute("id");      ((Element)node).setAttribute("id",id);      tmp.removeAttribute("id");    }  }  return node;}  }
class C{  private QueryBuilderKraken parseReplace(){  Token token;  TableKraken table=parseTable();  Objects.requireNonNull(table);  TableKelp tableKelp=table.getTableKelp();  ArrayList<Column> columns=new ArrayList<>();  if ((token=scanToken()) == Token.LPAREN) {    do {      String columnName=parseIdentifier();      Column column=tableKelp.getColumn(columnName);      if (column == null) {        throw error("'{0}' is not a valid column in {1}",columnName,table.getName());      }      columns.add(column);    } while ((token=scanToken()) == Token.COMMA);    if (token != Token.RPAREN) {      throw error("expected ')' at '{0}'",token);    }    token=scanToken();  } else {    for (    Column column : tableKelp.getColumns()) {      if (column.name().startsWith(":")) {        continue;      }      columns.add(column);    }  }  if (token != Token.VALUES)   throw error("expected VALUES at '{0}'",token);  if ((token=scanToken()) != Token.LPAREN) {    throw error("expected '(' at '{0}'",token);  }  ArrayList<ExprKraken> values=new ArrayList<>();  ReplaceQueryBuilder query;  query=new ReplaceQueryBuilder(_tableManager,_sql,table,columns);  _query=query;  do {    ExprKraken expr=parseExpr();    values.add(expr);  } while ((token=scanToken()) == Token.COMMA);  if (token != Token.RPAREN) {    throw error("expected ')' at '{0}'",token);  }  if (columns.size() != values.size()) {    throw error("number of columns does not match number of values");  }  ParamExpr[] params=_params.toArray(new ParamExpr[_params.size()]);  query.setParams(params);  query.setValues(values);  return query;}  }
class C{  public int sizeNoExpire(){  return super.size();}  }
class C{  protected void processResourceCharacteristics(SimEvent ev){  DatacenterCharacteristics characteristics=(DatacenterCharacteristics)ev.getData();  getDatacenterCharacteristicsList().put(characteristics.getId(),characteristics);  if (getDatacenterCharacteristicsList().size() == getDatacenterIdsList().size()) {    setDatacenterRequestedIdsList(new ArrayList<Integer>());    createVmsInDatacenterBase(getDatacenterIdsList().get(0));  }}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  public static <T,CopyType>CopyType copyLeavesIn(TreeDef<T> def,T root,BiFunction<T,List<CopyType>,CopyType> nodeMapper){  List<CopyType> childrenMapped=def.childrenOf(root).stream().map(null).collect(Collectors.toList());  return nodeMapper.apply(root,childrenMapped);}  }
class C{  public static byte[] copy(final byte[] payload,final int offset,final int length){  final byte[] buffer=new byte[length];  System.arraycopy(payload,offset,buffer,0,length);  return buffer;}  }
class C{  public void addWith(String text){  this.addWith(new TextComponent(text));}  }
class C{  private void emitSubroutine(final Instantiation instant,final List<Instantiation> worklist,final InsnList newInstructions,final List<TryCatchBlockNode> newTryCatchBlocks,final List<LocalVariableNode> newLocalVariables){  LabelNode duplbl=null;  if (LOGGING) {    log("--------------------------------------------------------");    log("Emitting instantiation of subroutine " + instant.subroutine);  }  for (int i=0, c=instructions.size(); i < c; i++) {    AbstractInsnNode insn=instructions.get(i);    Instantiation owner=instant.findOwner(i);    if (insn.getType() == AbstractInsnNode.LABEL) {      LabelNode ilbl=(LabelNode)insn;      LabelNode remap=instant.rangeLabel(ilbl);      if (LOGGING) {        log("Translating lbl #" + i + ':'+ ilbl+ " to "+ remap);      }      if (remap != duplbl) {        newInstructions.add(remap);        duplbl=remap;      }      continue;    }    if (owner != instant) {      continue;    }    if (LOGGING) {      log("Emitting inst #" + i);    }    if (insn.getOpcode() == RET) {      LabelNode retlabel=null;      for (Instantiation p=instant; p != null; p=p.previous) {        if (p.subroutine.get(i)) {          retlabel=p.returnLabel;        }      }      if (retlabel == null) {        throw new RuntimeException("Instruction #" + i + " is a RET not owned by any subroutine");      }      newInstructions.add(new JumpInsnNode(GOTO,retlabel));    } else     if (insn.getOpcode() == JSR) {      LabelNode lbl=((JumpInsnNode)insn).label;      BitSet sub=subroutineHeads.get(lbl);      Instantiation newinst=new Instantiation(instant,sub);      LabelNode startlbl=newinst.gotoLabel(lbl);      if (LOGGING) {        log(" Creating instantiation of subr " + sub);      }      newInstructions.add(new InsnNode(ACONST_NULL));      newInstructions.add(new JumpInsnNode(GOTO,startlbl));      newInstructions.add(newinst.returnLabel);      worklist.add(newinst);    } else {      newInstructions.add(insn.clone(instant));    }  }  for (Iterator<TryCatchBlockNode> it=tryCatchBlocks.iterator(); it.hasNext(); ) {    TryCatchBlockNode trycatch=it.next();    if (LOGGING) {      log("try catch block original labels=" + trycatch.start + '-'+ trycatch.end+ "->"+ trycatch.handler);    }    final LabelNode start=instant.rangeLabel(trycatch.start);    final LabelNode end=instant.rangeLabel(trycatch.end);    if (start == end) {      if (LOGGING) {        log(" try catch block empty in this subroutine");      }      continue;    }    final LabelNode handler=instant.gotoLabel(trycatch.handler);    if (LOGGING) {      log(" try catch block new labels=" + start + '-'+ end+ "->"+ handler);    }    if (start == null || end == null || handler == null) {      throw new RuntimeException("Internal error!");    }    newTryCatchBlocks.add(new TryCatchBlockNode(start,end,handler,trycatch.type));  }  for (Iterator<LocalVariableNode> it=localVariables.iterator(); it.hasNext(); ) {    LocalVariableNode lvnode=it.next();    if (LOGGING) {      log("local var " + lvnode.name);    }    final LabelNode start=instant.rangeLabel(lvnode.start);    final LabelNode end=instant.rangeLabel(lvnode.end);    if (start == end) {      if (LOGGING) {        log("  local variable empty in this sub");      }      continue;    }    newLocalVariables.add(new LocalVariableNode(lvnode.name,lvnode.desc,lvnode.signature,start,end,lvnode.index));  }}  }
class C{  private String parseString(final String s,final char separator,final AtomicReference<String> value){  final StringBuilder sb=new StringBuilder(s.length());  int separatorIndex=-1;  for (int i=0; i < s.length(); i++) {    if (s.charAt(i) == separator && i + 1 < s.length() && s.charAt(i + 1) == separator) {      sb.append(separator);      i++;      continue;    }    if (s.charAt(i) == separator) {      separatorIndex=i;      break;    }    sb.append(s.charAt(i));  }  value.set(sb.toString());  if (separatorIndex != -1 && separatorIndex != s.length() - 1) {    return s.substring(separatorIndex + 1);  } else {    return "";  }}  }
class C{  public void loadPerspective(float fovy,float aspect,float near,float far){  float top=near * (float)Math.tan((float)(fovy * Math.PI / 360.0f));  float bottom=-top;  float left=bottom * aspect;  float right=top * aspect;  loadFrustum(left,right,bottom,top,near,far);}  }
class C{  private boolean isHexChar(final char c){  return ((c >= 'a') && (c <= 'f')) || ((c >= 'A') && (c <= 'F')) || ((c >= '0') && (c <= '9'));}  }
class C{  public void addValidator(com.andreabaccega.formedittextvalidator.Validator theValidator) throws IllegalArgumentException {  editTextValidator.addValidator(theValidator);}  }
class C{  public boolean isRepeatUpload() throws IllegalAccessException {  return mRepeatUpload.getBoolean(mRepeatWrapper);}  }
class C{  public SingleNodeFilter(@Nullable NodeSelectionFilter delegate){  mDelegate=delegate;}  }
class C{  public TypesFactoryImpl(){  super();}  }
class C{  private void uninstallDefaults(){}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == Type.class) {switch (baseOperationID) {case TypesPackage.TYPE___IS_PROVIDED_BY_RUNTIME:      return TypesPackage.MODULE_NAMESPACE_VIRTUAL_TYPE___IS_PROVIDED_BY_RUNTIME;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == SyntaxRelatedTElement.class) {switch (baseOperationID) {default :  return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public boolean isDuckingEnabled(){  return mIsDuckingEnabled;}  }
class C{  private void parseIMS(Node node){  String timert1=null;  String timert2=null;  String timert4=null;  String privateUserIdentity=null;  String homeDomain=null;  String keepAliveEnabled=null;  String regRetryBasetime=null;  String regRetryMaxtime=null;  Node childnode=node.getFirstChild();  if (childnode != null) {    do {      if (childnode.getNodeName().equals("characteristic")) {        if (childnode.getAttributes().getLength() > 0) {          Node typenode=childnode.getAttributes().getNamedItem("type");          if (typenode != null) {            if (typenode.getNodeValue().equalsIgnoreCase("ConRefs")) {              parseConRefs(childnode);            } else             if (typenode.getNodeValue().equalsIgnoreCase("Public_user_identity_List")) {              parsePublicUserIdentity(childnode);            } else             if (typenode.getNodeValue().equalsIgnoreCase("Ext")) {              parseExt(childnode);            } else             if (typenode.getNodeValue().equalsIgnoreCase("ICSI_List")) {              parseICSI(childnode);            } else             if (typenode.getNodeValue().equalsIgnoreCase("LBO_P-CSCF_Address")) {              parsePcscfAddress(childnode);            } else             if (typenode.getNodeValue().equalsIgnoreCase("PhoneContext_List")) {              parsePhoneContextList(childnode);            } else             if (typenode.getNodeValue().equalsIgnoreCase("APPAUTH")) {              parseAppAuthent(childnode);            }          }        }      }      if (timert1 == null) {        if ((timert1=getValueByParamName("Timer_T1",childnode,TYPE_INT)) != null) {          mRcsSettings.writeLong(RcsSettingsData.SIP_TIMER_T1,Long.parseLong(timert1));          continue;        }      }      if (timert2 == null) {        if ((timert2=getValueByParamName("Timer_T2",childnode,TYPE_INT)) != null) {          mRcsSettings.writeLong(RcsSettingsData.SIP_TIMER_T2,Long.parseLong(timert2));          continue;        }      }      if (timert4 == null) {        if ((timert4=getValueByParamName("Timer_T4",childnode,TYPE_INT)) != null) {          mRcsSettings.writeLong(RcsSettingsData.SIP_TIMER_T4,Long.parseLong(timert4));          continue;        }      }      if (privateUserIdentity == null) {        if ((privateUserIdentity=getValueByParamName("Private_User_Identity",childnode,TYPE_TXT)) != null) {          mRcsSettings.setUserProfileImsPrivateId("".equals(privateUserIdentity) ? null : privateUserIdentity);          continue;        }      }      if (homeDomain == null) {        if ((homeDomain=getValueByParamName("Home_network_domain_name",childnode,TYPE_TXT)) != null) {          mRcsSettings.setUserProfileImsDomain("".equals(homeDomain) ? null : homeDomain);          continue;        }      }      if (keepAliveEnabled == null) {        if ((keepAliveEnabled=getValueByParamName("Keep_Alive_Enabled",childnode,TYPE_INT)) != null) {          mRcsSettings.writeBoolean(RcsSettingsData.SIP_KEEP_ALIVE,keepAliveEnabled.equals("1"));          continue;        }      }      if (regRetryBasetime == null) {        if ((regRetryBasetime=getValueByParamName("RegRetryBaseTime",childnode,TYPE_INT)) != null) {          mRcsSettings.writeLong(RcsSettingsData.REGISTER_RETRY_BASE_TIME,Long.parseLong(regRetryBasetime) * SECONDS_TO_MILLISECONDS_CONVERSION_RATE);          continue;        }      }      if (regRetryMaxtime == null) {        if ((regRetryMaxtime=getValueByParamName("RegRetryMaxTime",childnode,TYPE_INT)) != null) {          mRcsSettings.writeLong(RcsSettingsData.REGISTER_RETRY_MAX_TIME,Long.parseLong(regRetryMaxtime) * SECONDS_TO_MILLISECONDS_CONVERSION_RATE);        }      }    } while ((childnode=childnode.getNextSibling()) != null);  }}  }
class C{  @Override public Boolean next(){  byte b=iterator.next();  if (b == (byte)0) {    return false;  }  if (b == (byte)1) {    return true;  }  return null;}  }
class C{  public void clearPayments(){  this.expireSingleUsePayments();  paymentInfo.clear();}  }
class C{  public SRI(FlagConfig flagConfig) throws IOException, RuntimeException {  this.flagConfig=flagConfig;  termVectors=new VectorStoreRAM(flagConfig);  this.lUtils=new LuceneUtils(flagConfig);  initializeVectorStores();  int numdocs=lUtils.getNumDocs();  for (int dc=0; dc < numdocs; ++dc) {    if ((dc % 10000 == 0) || (dc < 10000 && dc % 1000 == 0)) {      System.err.print(dc + " ... ");    }    for (    String field : flagConfig.contentsfields()) {      Terms terms=lUtils.getTermVector(dc,field);      if (terms == null) {        VerbatimLogger.severe("No term vector for document " + dc);        continue;      }      ArrayList<String> localTerms=new ArrayList<String>();      ArrayList<Integer> freqs=new ArrayList<Integer>();      Hashtable<Integer,Integer> localTermPositions=new Hashtable<Integer,Integer>();      TermsEnum termsEnum=terms.iterator(null);      BytesRef text;      int termcount=0;      while ((text=termsEnum.next()) != null) {        String theTerm=text.utf8ToString();        if (!termVectors.containsVector(theTerm))         continue;        DocsAndPositionsEnum docsAndPositions=termsEnum.docsAndPositions(null,null);        if (docsAndPositions == null)         return;        docsAndPositions.nextDoc();        freqs.add(docsAndPositions.freq());        localTerms.add(theTerm);        for (int x=0; x < docsAndPositions.freq(); x++) {          localTermPositions.put(new Integer(docsAndPositions.nextPosition()),termcount);        }        termcount++;      }      int numwords=freqs.size();      float norm=0;      float[] freaks=new float[freqs.size()];      for (int x=0; x < freaks.length; x++) {        int freq=freqs.get(x);        String aTerm=localTerms.get(x);        float globalweight=lUtils.getGlobalTermWeight(new Term(field,aTerm));        float localweight=lUtils.getLocalTermWeight(freq);        freaks[x]=localweight * globalweight;        norm+=Math.pow(freaks[x],2);      }      norm=(float)Math.sqrt(norm);      for (int x=0; x < freaks.length; x++)       freaks[x]=freaks[x] / norm;      Vector[] localindexvectors=new Vector[numwords];      Vector[] localtermvectors=new Vector[numwords];      for (short tcn=0; tcn < numwords; ++tcn) {        if (this.termVectors.containsVector(localTerms.get(tcn))) {          localindexvectors[tcn]=indexVectors.getVector(localTerms.get(tcn));          localtermvectors[tcn]=termVectors.getVector(localTerms.get(tcn));        }      }      for (int x=0; x < localTerms.size() - 1; x++)       for (int y=x + 1; y < localTerms.size(); y++) {        if ((localtermvectors[x] != null) && (localtermvectors[y] != null)) {          float freq=freaks[x];          float freq2=freaks[y];          float mult=freq * freq2;          localtermvectors[x].superpose(localindexvectors[y],mult,null);          localtermvectors[y].superpose(localindexvectors[x],mult,null);        }      }    }  }  logger.info("\nCreated " + termVectors.getNumVectors() + " term vectors ...");  logger.info("\nNormalizing term vectors");  Enumeration<ObjectVector> e=termVectors.getAllVectors();  while (e.hasMoreElements()) {    ObjectVector temp=(ObjectVector)e.nextElement();    temp.getVector().normalize();  }  VectorStoreWriter.writeVectorsInLuceneFormat("sritermvectors.bin",flagConfig,termVectors);  if (flagConfig.docindexing() != DocIndexingStrategy.NONE) {    IncrementalDocVectors.createIncrementalDocVectors(termVectors,flagConfig,new LuceneUtils(flagConfig));  }}  }
class C{  public PrintWriter openTrainLogFile(){  String filename=modelDir + File.separator + trainLogFile;  PrintWriter fout=null;  try {    fout=new PrintWriter(new OutputStreamWriter((new FileOutputStream(filename)),"UTF-8"));  } catch (  IOException e) {    System.out.println(e.toString());    return null;  }  return fout;}  }
class C{  public CharSeq concat(CharSeq another){  return new CharSeq(str + another.str);}  }
class C{  public static void wait(Object o,int t){synchronized (o) {    try {      o.wait(t);    } catch (    InterruptedException e) {    }  }}  }
class C{  public boolean isDoc(){  return doc;}  }
class C{  public boolean isDrawBarOutline(){  return this.drawBarOutline;}  }
class C{  public static Document createXMLAsocRegsFdr(Map idocs,Map axsfs,Locale locale){  longFormatter=new SimpleDateFormat(RBUtil.getInstance(locale).getProperty(I18N_DATE_LONGFORMAT));  Document document=DocumentHelper.createDocument();  Element root=document.addElement(XML_ASOCREGS_TEXT);  AxPK axpk=null;  AxSf axsf=null;  Idocarchhdr idoc=null;  for (Iterator it=axsfs.keySet().iterator(); it.hasNext(); ) {    axpk=(AxPK)it.next();    idoc=(Idocarchhdr)idocs.get(new Integer(axpk.getType()));    axsf=(AxSf)axsfs.get(axpk);    addRegister(idoc,axsf,locale,root);  }  return document;}  }
class C{  private void deleteSourceS3ObjectAfterError(String s3BucketName,String storageFilePath,BusinessObjectDataKey businessObjectDataKey){  if (!StringUtils.isEmpty(storageFilePath)) {    try {      AwsParamsDto awsParams=awsHelper.getAwsParamsDto();      S3FileTransferRequestParamsDto s3FileTransferRequestParamsDto=S3FileTransferRequestParamsDto.builder().s3BucketName(s3BucketName).s3KeyPrefix(storageFilePath).httpProxyHost(awsParams.getHttpProxyHost()).httpProxyPort(awsParams.getHttpProxyPort()).build();      s3Dao.deleteDirectory(s3FileTransferRequestParamsDto);    } catch (    Exception e) {      LOGGER.error("Failed to delete source business object data file. s3Key=\"{}\" sourceS3BucketName=\"{}\" sourceBusinessObjectDataKey={}",storageFilePath,s3BucketName,jsonHelper.objectToJson(businessObjectDataKey),e);    }  }}  }
class C{  public void fireProjectionChanged(Projection proj){  if (proj == null || isEmpty())   return;  if (useNotifier && pcNotifier == null) {    pcNotifier=new ProjectionChangeNotifier();    pcNotifier.start();  }  ProjectionEvent event=new ProjectionEvent(getSource(),proj);  if (pcNotifier != null) {    pcNotifier.fireProjectionEvent(event);  } else {    for (    ProjectionListener listener : this) {      listener.projectionChanged(event);    }  }}  }
class C{  public boolean containsKey(final Object eKey){  return _elementOrder.contains(eKey);}  }
class C{  public SQLNonTransientConnectionException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  static boolean isUserNameValid(String value){  return value != null && value.length() >= 3 && value.length() <= 20 && Pattern.compile("^[a-z0-9]+$").matcher(value).find();}  }
class C{  public NukkitPlayerBlockBag(Player player){  this.player=player;}  }
class C{  public long toMillis(){  long totalSeconds=0;  if (weeks != null) {    totalSeconds+=60L * 60 * 24* 7* weeks;  }  if (days != null) {    totalSeconds+=60L * 60 * 24* days;  }  if (hours != null) {    totalSeconds+=60L * 60 * hours;  }  if (minutes != null) {    totalSeconds+=60L * minutes;  }  if (seconds != null) {    totalSeconds+=seconds;  }  if (prior) {    totalSeconds*=-1;  }  return totalSeconds * 1000;}  }
class C{  public DynamoDBBootstrapWorker(AmazonDynamoDBClient client,double rateLimit,String tableName,ExecutorService exec,int section,int totalSections,int numSegments,boolean consistentScan) throws SectionOutOfRangeException {  if (section > totalSections - 1 || section < 0) {    throw new SectionOutOfRangeException("Section of scan must be within [0...totalSections-1]");  }  this.client=client;  this.rateLimit=rateLimit;  this.tableName=tableName;  this.numSegments=numSegments;  this.section=section;  this.totalSections=totalSections;  this.consistentScan=consistentScan;  super.threadPool=exec;}  }
class C{  public Handle putIfAbsent(String handleId,Handle handle){  return handles.putIfAbsent(handleId,handle);}  }
class C{  protected void loge(String s,Throwable e){  Log.e(mName,s,e);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public Notification find(Integer notificationID){  Notification notification=new Notification(context,notificationID,null);  if (notification.getAttributes() == null)   notification.loadAttributesFromPreferences();  return notification;}  }
class C{  public void releaseIPAddress(String vcenter,String datacenter,String cluster,String vlan,String ipaddress) throws Exception {  logger.debug("vcenter: " + vcenter + "  datacenter: "+ datacenter+ "  cluster: "+ cluster+ "  vlan: "+ vlan+ "  ipaddress: "+ ipaddress);  if (vcenter == null) {    throw new Exception("vCenter not defined");  }  if (datacenter == null) {    throw new Exception("datacenter not defined");  }  if (cluster == null) {    throw new Exception("cluster not defined");  }  if (vlan == null) {    throw new Exception("vlan not defined");  }  if (ipaddress == null) {    throw new Exception("ipaddress not defined");  }  String query="UPDATE IPPOOL SET IN_USE = FALSE WHERE IP_ADDRESS = ? AND VLAN_TKEY = (SELECT TKEY FROM VLAN WHERE CLUSTER_TKEY = ? AND NAME = ?)";  try (Connection con=getDatasource().getConnection()){    int cluster_tkey=getClusterTKey(con,vcenter,datacenter,cluster);    if (cluster_tkey == -1) {      throw new SQLException("Failed to release IP address. Unknown cluster " + cluster);    }    try (PreparedStatement stmt=con.prepareStatement(query)){      stmt.setString(1,ipaddress);      stmt.setInt(2,cluster_tkey);      stmt.setString(3,vlan);      stmt.execute();    }   } }  }
class C{  public static CacheHeader readHeader(InputStream is) throws IOException {  CacheHeader entry=new CacheHeader();  int magic=readInt(is);  if (magic != CACHE_MAGIC) {    throw new IOException();  }  entry.key=readString(is);  entry.etag=readString(is);  if (entry.etag.equals("")) {    entry.etag=null;  }  entry.serverDate=readLong(is);  entry.lastModified=readLong(is);  entry.ttl=readLong(is);  entry.softTtl=readLong(is);  entry.responseHeaders=readStringStringMap(is);  return entry;}  }
class C{  public void addStats(long affectedRows,long insertId,boolean moreResultAvailable){  this.insertId=insertId;  this.affectedRows=affectedRows;  setMoreResultAvailable(moreResultAvailable);}  }
class C{  public void sessionDestroyed(HttpSessionEvent se){  HttpSession session=se.getSession();  sessions.remove(session.getId());  if (activeSessions > 0) {    activeSessions--;  }  Debug.info("TT Session ended ... " + session.getId() + " "+ new Date());  Debug.info("    - TT Session time ... " + ((new Date().getTime() - session.getCreationTime()) / (1000 * 60)) + " minutes");  session.invalidate();}  }
class C{  private void drawCenterRect(Canvas canvas){  int center=getHeight() / 2;  int offset=(int)(getItemHeight() / 2 * 1.2);  centerDrawable.setBounds(0,center - offset,getWidth(),center + offset);  centerDrawable.draw(canvas);}  }
class C{  @Override public void onStart(){  super.onStart();  LaunchApp();  finish(Activity.RESULT_OK,mResults);}  }
class C{  private static String slashify(String path){  return File.separatorChar != '/' ? Objects.requireNonNull(path).replace(File.separatorChar,'/') : path;}  }
class C{  private SnmpMessage makeResponseMessage(SnmpMessage reqMsg){  SnmpMessage respMsg=null;  SnmpPduPacket reqPdu;  Object userData=null;  try {    reqPdu=(SnmpPduPacket)pduFactory.decodeSnmpPdu(reqMsg);    if (reqPdu != null && userDataFactory != null)     userData=userDataFactory.allocateUserData(reqPdu);  } catch (  SnmpStatusException x) {    reqPdu=null;    SnmpAdaptorServer snmpServer=(SnmpAdaptorServer)adaptorServer;    snmpServer.incSnmpInASNParseErrs(1);    if (x.getStatus() == SnmpDefinitions.snmpWrongSnmpVersion)     snmpServer.incSnmpInBadVersions(1);    if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINEST)) {      SNMP_ADAPTOR_LOGGER.logp(Level.FINEST,dbgTag,"makeResponseMessage","message decoding failed",x);    }  }  SnmpPduPacket respPdu=null;  if (reqPdu != null) {    respPdu=makeResponsePdu(reqPdu,userData);    try {      if (userDataFactory != null)       userDataFactory.releaseUserData(userData,respPdu);    } catch (    SnmpStatusException x) {      respPdu=null;    }  }  if (respPdu != null) {    try {      respMsg=(SnmpMessage)pduFactory.encodeSnmpPdu(respPdu,packet.getData().length);    } catch (    SnmpStatusException x) {      respMsg=null;      if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINEST)) {        SNMP_ADAPTOR_LOGGER.logp(Level.FINEST,dbgTag,"makeResponseMessage","failure when encoding the response message",x);      }    }catch (    SnmpTooBigException x) {      if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINEST)) {        SNMP_ADAPTOR_LOGGER.logp(Level.FINEST,dbgTag,"makeResponseMessage","response message is too big");      }      try {        if (packet.getData().length <= 32)         throw x;        int pos=x.getVarBindCount();        if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINEST)) {          SNMP_ADAPTOR_LOGGER.logp(Level.FINEST,dbgTag,"makeResponseMessage","fail on element" + pos);        }        int old;        while (true) {          try {            respPdu=reduceResponsePdu(reqPdu,respPdu,pos);            respMsg=(SnmpMessage)pduFactory.encodeSnmpPdu(respPdu,packet.getData().length - 32);            break;          } catch (          SnmpTooBigException xx) {            if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINEST)) {              SNMP_ADAPTOR_LOGGER.logp(Level.FINEST,dbgTag,"makeResponseMessage","response message is still too big");            }            old=pos;            pos=xx.getVarBindCount();            if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINEST)) {              SNMP_ADAPTOR_LOGGER.logp(Level.FINEST,dbgTag,"makeResponseMessage","fail on element" + pos);            }            if (pos == old) {              throw xx;            }          }        }      } catch (      SnmpStatusException xx) {        respMsg=null;        if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINEST)) {          SNMP_ADAPTOR_LOGGER.logp(Level.FINEST,dbgTag,"makeResponseMessage","failure when encoding the response message",xx);        }      }catch (      SnmpTooBigException xx) {        try {          respPdu=newTooBigPdu(reqPdu);          respMsg=(SnmpMessage)pduFactory.encodeSnmpPdu(respPdu,packet.getData().length);        } catch (        SnmpTooBigException xxx) {          respMsg=null;          if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINEST)) {            SNMP_ADAPTOR_LOGGER.logp(Level.FINEST,dbgTag,"makeResponseMessage","'too big' is 'too big' !!!");          }          adaptor.incSnmpSilentDrops(1);        }catch (        Exception xxx) {          if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINEST)) {            SNMP_ADAPTOR_LOGGER.logp(Level.FINEST,dbgTag,"makeResponseMessage","Got unexpected exception",xxx);          }          respMsg=null;        }      }catch (      Exception xx) {        if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINEST)) {          SNMP_ADAPTOR_LOGGER.logp(Level.FINEST,dbgTag,"makeResponseMessage","Got unexpected exception",xx);        }        respMsg=null;      }    }  }  return respMsg;}  }
class C{  public N node(Object key,GridClientPredicate<N>... p){  if (p == null || p.length == 0)   return node(key);  int hash=hash(key);  rw.readLock().lock();  try {    final int size=nodes.size();    if (size == 0)     return null;    Set<N> failed=null;    for (    SortedSet<N> set : circle.tailMap(hash,true).values()) {      for (      N n : set) {        if (failed != null && failed.contains(n))         continue;        if (apply(p,n))         return n;        if (failed == null)         failed=new HashSet<>();        failed.add(n);        if (failed.size() == size)         return null;      }    }    for (    SortedSet<N> set : circle.headMap(hash,false).values()) {      for (      N n : set) {        if (failed != null && failed.contains(n))         continue;        if (apply(p,n))         return n;        if (failed == null)         failed=U.newHashSet(size);        failed.add(n);        if (failed.size() == size)         return null;      }    }    return null;  }  finally {    rw.readLock().unlock();  }}  }
class C{  public MpoIfdData(int ifdId){  mIfdId=ifdId;}  }
class C{  public synchronized BusinessContextDefinition updateBusinessContextDefinition(BusinessContextDefinition businessContextDefinition) throws BusinessException, JAXBException, IOException {  businessContextDefinition.setRevision(businessContextDefinition.getRevision() + 1);  BusinessContextDefinition currentBusinessContextDefinition=businessContextDefinitionReference.get();  if ((currentBusinessContextDefinition != businessContextDefinition) && ((currentBusinessContextDefinition.getRevision() + 1) != businessContextDefinition.getRevision())) {    throw new BusinessException("Update of the business context.",ConfigurationInterfaceErrorCodeEnum.REVISION_CHECK_FAILED);  }  saveBusinessContext(businessContextDefinition);  eventPublisher.publishEvent(new BusinessContextDefinitionUpdateEvent(this,businessContextDefinition));  return businessContextDefinition;}  }
class C{  public static String ensureStartingSlash(String path){  return path.charAt(0) != '/' ? ("/" + path) : path;}  }
class C{  public RemoteAtRequest(int frameId,XBeeAddress64 remoteAddress64,XBeeAddress16 remoteAddress16,boolean applyChanges,String command,int[] value){  super(command,value);  this.setFrameId(frameId);  this.remoteAddr64=remoteAddress64;  this.remoteAddr16=remoteAddress16;  this.applyChanges=applyChanges;}  }
class C{  public void testX509CRLEntry(){  TBTCRLEntry tbt_crlentry=new TBTCRLEntry();  assertNull(tbt_crlentry.getCertificateIssuer());  assertNull(tbt_crlentry.getCriticalExtensionOIDs());  try {    assertNull(tbt_crlentry.getEncoded());  } catch (  CRLException e) {    fail("Unexpected exception " + e.getMessage());  }  assertNull(tbt_crlentry.getNonCriticalExtensionOIDs());  assertNull(tbt_crlentry.getRevocationDate());}  }
class C{  public void dismiss(@StringRes int id){  dismiss(getKey(id));}  }
class C{  private boolean hasNextInetSocketAddress(){  return socketAddresses != null;}  }
class C{  public static String buildHREF(HttpServletResponse response,String url,String tag){  return buildHREF(response.encodeURL(url),tag);}  }
class C{  protected void addIcon(Container top){  Icon sideIcon=getIcon();  if (sideIcon != null) {    JLabel iconLabel=new JLabel(sideIcon);    iconLabel.setVerticalAlignment(SwingConstants.CENTER);    top.add(iconLabel,"West");  }}  }
class C{  public void createPartControl(Composite parent){  this.parent=parent;  display=parent.getDisplay();  FillLayout masterLayout=new FillLayout();  parent.setLayout(masterLayout);  SashForm sashform=new SashForm(parent,SWT.VERTICAL);  final TabFolder tabFolder=new TabFolder(sashform,SWT.V_SCROLL | SWT.H_SCROLL);  TabItem one=new TabItem(tabFolder,SWT.NONE);  one.setText(Messages.MqttClientView_6);  one.setToolTipText(Messages.MqttClientView_7);  one.setControl(getConnectionControl(tabFolder));  TabItem two=new TabItem(tabFolder,SWT.NONE);  two.setText(Messages.MqttClientView_8);  two.setToolTipText(Messages.MqttClientView_9);  two.setControl(getPublishControl(tabFolder));  TabItem three=new TabItem(tabFolder,SWT.NONE);  three.setText(Messages.MqttClientView_10);  three.setToolTipText(Messages.MqttClientView_11);  three.setControl(getSubscribeControl(tabFolder));  messageLog=new Text(sashform,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL);  messageLog.setFont(new Font(display,new FontData("Courier New",10,SWT.NORMAL)));  sashform.setWeights(new int[]{2,1});}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  private void applyAnnosFromBound(final AnnotatedTypeMirror wildcardBound,final AnnotatedTypeMirror typeParamBound,final Set<? extends AnnotationMirror> tops){  if (wildcardBound.getKind() == TypeKind.TYPEVAR || typeParamBound.getKind() == TypeKind.TYPEVAR) {    return;  }  for (  final AnnotationMirror top : tops) {    if (wildcardBound.getAnnotationInHierarchy(top) == null) {      final AnnotationMirror typeParamAnno=typeParamBound.getAnnotationInHierarchy(top);      if (typeParamAnno == null) {        ErrorReporter.errorAbort("Missing annotation on type parameter\n" + "top=" + top + "\n"+ "wildcardBound="+ wildcardBound+ "\n"+ "typeParamBound="+ typeParamBound+ "\n");      }      wildcardBound.addAnnotation(typeParamAnno);    }  }}  }
class C{  public Cloudlet(final int cloudletId,final long cloudletLength,final int pesNumber,final long cloudletFileSize,final long cloudletOutputSize,final UtilizationModel utilizationModelCpu,final UtilizationModel utilizationModelRam,final UtilizationModel utilizationModelBw,final boolean record,final List<String> fileList){  this(cloudletId,cloudletLength,pesNumber,cloudletFileSize,cloudletOutputSize,utilizationModelCpu,utilizationModelRam,utilizationModelBw,record);  vmId=-1;  accumulatedBwCost=0.0;  costPerBw=0.0;  requiredFiles=fileList;}  }
class C{  @Override public String toString(){  String str="Equivalence(" + baseVar + ", "+ baseVar+ "^p)";  return str;}  }
class C{  public AnyCraftingRecipeItem(final ItemStack item,final BiFunction<Player,CraftingGrid,ItemStack> replacementFunc,final ItemStack replacement,final Collection<BiPredicate<Player,ItemStack>> validators){  this.item=(item == null) ? new BaseItemStack(Material.BEDROCK) : item.clone();  this.validators=(validators == null) ? null : new ArrayList<>(validators);  this.replacement=replacement;  this.replacementFunc=replacementFunc;}  }
class C{  public Builder installOnlyFromPlayStore(Boolean installOnlyFromPlayStore){  this.playStoreOnly=installOnlyFromPlayStore;  return this;}  }
class C{  private void checkOffsetOrImageTag(ExifTag tag){  if (tag.getComponentCount() == 0) {    return;  }  short tid=tag.getTagId();  int ifd=tag.getIfd();  if (tid == TAG_EXIF_IFD && checkAllowed(ifd,ExifInterface.TAG_EXIF_IFD)) {    if (isIfdRequested(IfdId.TYPE_IFD_EXIF) || isIfdRequested(IfdId.TYPE_IFD_INTEROPERABILITY)) {      registerIfd(IfdId.TYPE_IFD_EXIF,tag.getValueAt(0));    }  } else   if (tid == TAG_GPS_IFD && checkAllowed(ifd,ExifInterface.TAG_GPS_IFD)) {    if (isIfdRequested(IfdId.TYPE_IFD_GPS)) {      registerIfd(IfdId.TYPE_IFD_GPS,tag.getValueAt(0));    }  } else   if (tid == TAG_INTEROPERABILITY_IFD && checkAllowed(ifd,ExifInterface.TAG_INTEROPERABILITY_IFD)) {    if (isIfdRequested(IfdId.TYPE_IFD_INTEROPERABILITY)) {      registerIfd(IfdId.TYPE_IFD_INTEROPERABILITY,tag.getValueAt(0));    }  } else   if (tid == TAG_JPEG_INTERCHANGE_FORMAT && checkAllowed(ifd,ExifInterface.TAG_JPEG_INTERCHANGE_FORMAT)) {    if (isThumbnailRequested()) {      registerCompressedImage(tag.getValueAt(0));    }  } else   if (tid == TAG_JPEG_INTERCHANGE_FORMAT_LENGTH && checkAllowed(ifd,ExifInterface.TAG_JPEG_INTERCHANGE_FORMAT_LENGTH)) {    if (isThumbnailRequested()) {      mJpegSizeTag=tag;    }  } else   if (tid == TAG_STRIP_OFFSETS && checkAllowed(ifd,ExifInterface.TAG_STRIP_OFFSETS)) {    if (isThumbnailRequested()) {      if (tag.hasValue()) {        for (int i=0; i < tag.getComponentCount(); i++) {          if (tag.getDataType() == ExifTag.TYPE_UNSIGNED_SHORT) {            registerUncompressedStrip(i,tag.getValueAt(i));          } else {            registerUncompressedStrip(i,tag.getValueAt(i));          }        }      } else {        mCorrespondingEvent.put(tag.getOffset(),new ExifTagEvent(tag,false));      }    }  } else   if (tid == TAG_STRIP_BYTE_COUNTS && checkAllowed(ifd,ExifInterface.TAG_STRIP_BYTE_COUNTS) && isThumbnailRequested() && tag.hasValue()) {    mStripSizeTag=tag;  }}  }
class C{  final static String parseLanguage(String lang){  if (lang == null) {    return null;  }  String code=null;  String language=null;  String langs[]=lang.split(",| |;|\\.|\\(|\\)|=",-1);  int i=0;  while ((language == null) && (i < langs.length)) {    code=langs[i].split("-")[0];    code=code.split("_")[0];    language=(String)LANGUAGES_MAP.get(code.toLowerCase());    i++;  }  return language;}  }
class C{  public String toStringKey(){  return new ResultMatrixPlainText(this).toStringKey();}  }
class C{  private int readFromDataSource(byte[] target,int offset,int length,int bytesAlreadyRead,boolean allowEndOfInput) throws InterruptedException, IOException {  if (Thread.interrupted()) {    throw new InterruptedException();  }  int bytesRead=dataSource.read(target,offset + bytesAlreadyRead,length - bytesAlreadyRead);  if (bytesRead == C.RESULT_END_OF_INPUT) {    if (bytesAlreadyRead == 0 && allowEndOfInput) {      return C.RESULT_END_OF_INPUT;    }    throw new EOFException();  }  return bytesAlreadyRead + bytesRead;}  }
class C{  @Override public boolean isSupervised(final IResource resource) throws TeamException {  blockForConnection();  if (TeamUtils.isConfiguredWith(resource.getProject(),TFSRepositoryProvider.PROVIDER_ID) == false) {    return false;  }  return true;}  }
class C{  public static ECPublicKey decodeNISTP256PublicKeyFromBytes(byte[] pubKey) throws NoSuchAlgorithmException, InvalidKeySpecException {  ECNamedCurveParameterSpec spec=ECNamedCurveTable.getParameterSpec("P-256");  KeyFactory kf=KeyFactory.getInstance("ECDSA",new BouncyCastleProvider());  ECNamedCurveSpec params=new ECNamedCurveSpec("P-256",spec.getCurve(),spec.getG(),spec.getN());  ECPoint point=ECPointUtil.decodePoint(params.getCurve(),pubKey);  ECPublicKeySpec pubKeySpec=new ECPublicKeySpec(point,params);  ECPublicKey pk=(ECPublicKey)kf.generatePublic(pubKeySpec);  return pk;}  }
class C{  private ExceptionSet computeThrownExceptionTypes(BasicBlock basicBlock) throws DataflowAnalysisException {  ExceptionSet exceptionTypeSet=exceptionSetFactory.createExceptionSet();  InstructionHandle pei=basicBlock.getExceptionThrower();  Instruction ins=pei.getInstruction();  ExceptionThrower exceptionThrower=(ExceptionThrower)ins;  Class<?>[] exceptionList=exceptionThrower.getExceptions();  for (  Class<?> aExceptionList : exceptionList) {    exceptionTypeSet.addImplicit(ObjectTypeFactory.getInstance(aExceptionList.getName()));  }  exceptionTypeSet.addImplicit(Hierarchy.ERROR_TYPE);  if (ins instanceof ATHROW) {    if (basicBlock.containsInstruction(pei)) {      exceptionTypeSet.clear();      TypeFrame frame=getStartFact(basicBlock);      if (!frame.isValid()) {        exceptionTypeSet.addExplicit(Type.THROWABLE);      } else       if (frame.getStackDepth() == 0) {        throw new IllegalStateException("empty stack " + " thrown by " + pei + " in "+ SignatureConverter.convertMethodSignature(methodGen));      } else {        Type throwType=frame.getTopValue();        if (throwType instanceof ObjectType) {          exceptionTypeSet.addExplicit((ObjectType)throwType);        } else         if (throwType instanceof ExceptionObjectType) {          exceptionTypeSet.addAll(((ExceptionObjectType)throwType).getExceptionSet());        } else {          if (DEBUG) {            System.out.println("Non object type " + throwType + " thrown by "+ pei+ " in "+ SignatureConverter.convertMethodSignature(methodGen));          }          exceptionTypeSet.addExplicit(Type.THROWABLE);        }      }    }  }  if (ins instanceof InvokeInstruction) {    ConstantPoolGen cpg=methodGen.getConstantPool();    InvokeInstruction inv=(InvokeInstruction)ins;    ObjectType[] declaredExceptionList=Hierarchy2.findDeclaredExceptions(inv,cpg);    if (declaredExceptionList == null) {      if (DEBUG) {        System.out.println("Couldn't find declared exceptions for " + SignatureConverter.convertMethodSignature(inv,cpg));      }      exceptionTypeSet.addExplicit(Hierarchy.EXCEPTION_TYPE);    } else {      for (      ObjectType aDeclaredExceptionList : declaredExceptionList) {        exceptionTypeSet.addExplicit(aDeclaredExceptionList);      }    }    exceptionTypeSet.addImplicit(Hierarchy.RUNTIME_EXCEPTION_TYPE);  }  if (DEBUG) {    System.out.println(pei + " can throw " + exceptionTypeSet);  }  return exceptionTypeSet;}  }
class C{  public static double[] toDoubleArray(Long[] array){  double[] result=new double[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i].doubleValue();  }  return result;}  }
class C{  private synchronized ResultsSubscriber subscriber(){  if (resultsSubscriber == null) {    resultsSubscriber=new ResultsSubscriber();  }  return resultsSubscriber;}  }
class C{  public static <T extends Enum<T>>T valueOf(Class<T> enumType,String name){  if (enumType == null) {    throw new NullPointerException("enumType == null");  } else   if (name == null) {    throw new NullPointerException("name == null");  }  T[] values=getSharedConstants(enumType);  if (values == null) {    throw new IllegalArgumentException(enumType + " is not an enum type");  }  for (  T value : values) {    if (name.equals(value.name())) {      return value;    }  }  throw new IllegalArgumentException(name + " is not a constant in " + enumType.getName());}  }
class C{  public DataFile(ModelDataFile modelDataFile){  this.modelDataFile=modelDataFile;}  }
class C{  public void executeCallback(SceKernelThreadInfo thread,int address,IAction afterAction,boolean returnVoid,int[] registers){  if (log.isDebugEnabled()) {    log.debug(String.format("Execute callback 0x%08X, afterAction=%s, returnVoid=%b",address,afterAction,returnVoid));  }  callAddress(thread,address,afterAction,returnVoid,false,registers);}  }
class C{  public void addPolyline(Collection<Point2D.Double> points){  for (  Point2D.Double c0 : points) {    add(new Node(0,c0,c0,c0));  }}  }
class C{  public Deck(String label){  super(label);  for (int suit=0; suit <= 3; suit++) {    for (int rank=1; rank <= 13; rank++) {      addCard(new Card(rank,suit));    }  }}  }
class C{  @Nullable @ObjectiveCName("loadDraftWithPeer:") public String loadDraft(Peer peer){  return modules.getMessagesModule().loadDraft(peer);}  }
class C{  FileArraySetting(Properties defaultProps,Properties props,String key,File[] defaultValue){  super(defaultProps,props,key,decode(defaultValue));  setPrivate(true);}  }
class C{  public HUX(double probability){  super();  this.probability=probability;}  }
class C{  public void dcbst(){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  public void loginForAuthorizationCode(@NonNull Activity activity){  Intent intent=LoginActivity.newIntent(activity,sessionConfiguration,ResponseType.CODE);  activity.startActivityForResult(intent,requestCode);}  }
class C{  public static void main(String[] argv){  try {    if (argv.length == 0) {      System.out.println("Please specify a set of instances.");      return;    }    int currentA=Integer.parseInt(argv[0]);    int maxA=currentA;    int currentB=Integer.parseInt(argv[1]);    int maxB=currentB;    for (int i=2; i < argv.length - 1; i+=2) {      currentA=Integer.parseInt(argv[i]);      currentB=Integer.parseInt(argv[i + 1]);      if (currentA > maxA) {        maxA=currentA;      }      if (currentB > maxB) {        maxB=currentB;      }    }    DDConditionalEstimator newEst=new DDConditionalEstimator(maxA + 1,maxB + 1,true);    for (int i=0; i < argv.length - 1; i+=2) {      currentA=Integer.parseInt(argv[i]);      currentB=Integer.parseInt(argv[i + 1]);      System.out.println(newEst);      System.out.println("Prediction for " + currentA + '|'+ currentB+ " = "+ newEst.getProbability(currentA,currentB));      newEst.addValue(currentA,currentB,1);    }  } catch (  Exception e) {    System.out.println(e.getMessage());  }}  }
class C{  public Container(Resource capacity,int paddingPercentage){  this.capacity=capacity;  this.instances=new HashSet<PackingPlan.InstancePlan>();  this.paddingPercentage=paddingPercentage;}  }
class C{  public void removeMessageListener(MessageListener listener){  m_notifier.remove(listener);}  }
class C{  public List<String> elements(){  return elements;}  }
class C{  static Handler init(int port,String keystore) throws IOException {  HttpServer httpServer=HttpServer.create(new InetSocketAddress(port),0);  Handler tsa=new Handler(httpServer,keystore);  httpServer.createContext("/",tsa);  return tsa;}  }
class C{  public void connect(){  connect(environment.connectTimeout(),TimeUnit.SECONDS);}  }
class C{  public MLContext(JavaSparkContext sc,boolean monitorPerformance,boolean setForcedSparkExecType) throws DMLRuntimeException {  initializeSpark(sc.sc(),monitorPerformance,setForcedSparkExecType);}  }
class C{  @HLEFunction(nid=0x616403BA,version=150) public int sceKernelTerminateThread(@CheckArgument("checkThreadID") int uid){  if (IntrManager.getInstance().isInsideInterrupt() && Modules.SysMemUserForUserModule.hleKernelGetCompiledSdkVersion() > 0x0307FFFF) {    return SceKernelErrors.ERROR_KERNEL_CANNOT_BE_CALLED_FROM_INTERRUPT;  }  if (!isDispatchThreadEnabled() && Modules.SysMemUserForUserModule.hleKernelGetCompiledSdkVersion() > 0x0307FFFF) {    return SceKernelErrors.ERROR_KERNEL_WAIT_CAN_NOT_WAIT;  }  SceKernelThreadInfo thread=getThreadCurrentIsInvalid(uid);  triggerThreadEvent(thread,currentThread,THREAD_EVENT_EXIT);  thread.setExitStatus(ERROR_KERNEL_THREAD_IS_TERMINATED);  terminateThread(thread);  thread.setExitStatus(ERROR_KERNEL_THREAD_ALREADY_DORMANT);  return 0;}  }
class C{  @Override protected String doTask() throws Exception {  ran.compareAndSet(false,true);  return getOnlyResource();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override public void close() throws IOException {  SocketChannel channel=_channel;  _channel=null;  if (channel != null)   channel.close();}  }
class C{  private double calculateTreeProbabilityLog(Tree tree){  double prob=0.0;  final double splits=Math.pow(2,tree.getExternalNodeCount() - 1) - 1;  List<Clade> clades=new ArrayList<Clade>();  List<Clade> parentClades=new ArrayList<Clade>();  getClades(tree,tree.getRoot(),parentClades,clades);  for (  Clade c : clades) {    double occurrences=EPSILON;    if (cladeProbabilities.containsKey(c.getBits())) {      occurrences+=cladeProbabilities.get(c.getBits()).getSampleCount();    }    prob+=Math.log(occurrences / (samples + (splits * EPSILON)));  }  return prob;}  }
class C{  private OptionalInt(int value){  this.isPresent=true;  this.value=value;}  }
class C{  public static <NodeType extends IGraphNode<NodeType>>boolean isRootNode(final NodeType node){  return node.getParents().size() == 0;}  }
class C{  public LinkRef addLinkRef(final String key,final String link,final String title){  final String lowerCase=key.toLowerCase();  final LinkRef linkRef;  if (this.linkRefs.containsKey(lowerCase)) {    linkRef=new LinkRef(this.linkRefs.get(lowerCase).seqNumber,link,title);  } else {    linkRef=new LinkRef(this.linkRefs.size() + 1,link,title);  }  this.linkRefs.put(lowerCase,linkRef);  return linkRef;}  }
class C{  @DSSink({DSSinkKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.769 -0400",hash_original_method="94E64203D23ECC11F0966710C23548F3",hash_generated_method="A06CCE7300A2A2536C74343D00CD989D") @Override public Writer append(char c) throws IOException {  try {    beforeWrite(1);    out.append(c);    afterWrite(1);  } catch (  IOException e) {    handleIOException(e);  }  return this;}  }
class C{  public boolean isBloomFilteringEnabled(){  return vBloomFilteringEnabled;}  }
class C{  public ByteBuffer putShort(short value){  int newPosition=position + 2;  putShort(position,value);  position=newPosition;  return this;}  }
class C{  public boolean geographicToScreenPoint(double latitude,double longitude,double altitude,PointF result){  if (result == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"WorldWindow","geographicToScreenPoint","missingResult"));  }  this.globe.geographicToCartesian(latitude,longitude,altitude,this.scratchPoint);  return this.cartesianToScreenPoint(this.scratchPoint.x,this.scratchPoint.y,this.scratchPoint.z,result);}  }
class C{  public static StoreRequest createStoreRequest(){  return new StoreRequest();}  }
class C{  public void startPreview(){  if (camera != null && !previewing) {    camera.startPreview();    previewing=true;  }}  }
class C{  public static ResetHealthStatusRequest create(int id){  ResetHealthStatusRequest m=new ResetHealthStatusRequest();  m.id=id;  return m;}  }
class C{  public AutoFocusRing(Invalidator invalidator,Paint ringPaint,float enterDurationMillis,float exitDurationMillis){  super(invalidator,ringPaint,enterDurationMillis,exitDurationMillis);}  }
class C{  public MultiReader(IndexReader[] subReaders,boolean closeSubReaders) throws IOException {  super(subReaders.clone());  this.closeSubReaders=closeSubReaders;  if (!closeSubReaders) {    for (int i=0; i < subReaders.length; i++) {      subReaders[i].incRef();    }  }}  }
class C{  private static State nextQuoted(final InputStream stream,final State state,final ByteArrayOutputStream line,final int next) throws IOException {  final State result;switch (next) {case '\\':    result=state;  line.write(stream.read());break;case '\"':result=State.NORMAL;break;default :result=state;line.write(next);break;}return result;}  }
class C{  public Blob createBlob() throws SQLException {  return new MariaDbBlob();}  }
class C{  public List statements(){  return this.statements;}  }
class C{  public boolean forEach(cern.colt.function.DoubleProcedure procedure){  double[] theElements=buffer.elements();  int theSize=(int)size();  for (int i=0; i < theSize; )   if (!procedure.apply(theElements[i++]))   return false;  return true;}  }
class C{  public static double[][] convertToDoubleMatrix(MatrixBlock mb){  int rows=mb.getNumRows();  int cols=mb.getNumColumns();  double[][] ret=new double[rows][cols];  if (mb.getNonZeros() > 0) {    if (mb.isInSparseFormat()) {      Iterator<IJV> iter=mb.getSparseBlockIterator();      while (iter.hasNext()) {        IJV cell=iter.next();        ret[cell.getI()][cell.getJ()]=cell.getV();      }    } else {      for (int i=0; i < rows; i++)       for (int j=0; j < cols; j++)       ret[i][j]=mb.getValueDenseUnsafe(i,j);    }  }  return ret;}  }
class C{  static double fd(double x){  return x * Math.cos(x) + 2 * Math.sin(x) - 5;}  }
class C{  boolean mergerInit(List<Long> changeRanges,List<Integer> highlightRanges){  if ((changeRanges == null || changeRanges.size() < 2) && (highlightRanges == null || highlightRanges.size() < 2)) {    return false;  }  this.mergeChangeRanges=changeRanges;  this.mergeHighlightRanges=highlightRanges;  mergeRangesIsBlue=false;  mergeRangesIsHighlight=false;  mergeRangesPosition=-1;  mergeIndexChange=0;  mergeIndexHighlight=0;  return true;}  }
class C{  public Implementation(){  super();  plugin=this;}  }
class C{  public XorExpr newXorExpr(Value op1,Value op2){  return new JXorExpr(op1,op2);}  }
class C{  public String globalInfo(){  return "An instance filter that converts all incoming instances" + " into sparse format.";}  }
class C{  public static boolean startsWithIgnoreCase(String s,String start){  if (s.length() < start.length()) {    return false;  }  return s.substring(0,start.length()).equalsIgnoreCase(start);}  }
class C{  public ResultVO infoResp(Logger logger,ErrorType errorType,String errorMsg){  LogUtils.trackInfo(logger,errorMsg);  return new ResultVO(errorType.name(),OperationStatus.FAILURE,errorMsg);}  }
class C{  private static String KD(String secret,String data){  return H(secret + ":" + data);}  }
class C{  static public void closeTx(long tx,long revisionTime,boolean aborted){  if (log.isInfoEnabled())   log.info("tx=" + tx + ", revisionTime="+ revisionTime+ ", aborted="+ aborted+ ", elapsed="+ (revisionTime - tx));}  }
class C{  public MultipleActions(final List<ChatAction> actions){  this.actions=new LinkedList<ChatAction>(actions);}  }
class C{  public void addContext(String str){  if (str == null) {    throw new NullPointerException("str == null");  }  context.append(str);  if (!str.endsWith("\n")) {    context.append('\n');  }}  }
class C{  public Object nextObject(Random rnd,int type,boolean allowNull){  Object obj=null;switch (type) {case BOOLEAN:{      obj=(rnd.nextBoolean() ? Boolean.TRUE : Boolean.FALSE);      break;    }case BYTE:{    obj=Byte.valueOf((byte)(rnd.nextInt(255) - 127));    break;  }case CHAR:{  obj=Character.valueOf(alphabet.charAt(rnd.nextInt(alphabet.length())));  break;}case SHORT:{obj=Short.valueOf((short)rnd.nextInt());break;}case INT:{obj=Integer.valueOf(rnd.nextInt());break;}case LONG:{obj=Long.valueOf(rnd.nextLong());break;}case FLOAT:{obj=Float.valueOf(rnd.nextFloat());break;}case DOUBLE:{obj=Double.valueOf(rnd.nextDouble());break;}case STRING:{obj=getRandomString(40,rnd.nextInt());break;}case OBJECT:{obj=getRandomString(40,rnd.nextInt());break;}default :{throw new AssertionError("unknown type=" + type);}}return obj;}  }
class C{  public static Object toAxisType(TypeMapping tm,TimeZone tz,TypeEntry typeEntry,QName type,Object value) throws PageException {  return _toAxisType(tm,tz,typeEntry,type,null,value,new HashSet<Object>());}  }
class C{  public double distanceTo(Vec3 vector){  if (vector == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Vec3","distanceTo","missingVector"));  }  return Math.sqrt(this.distanceToSquared(vector));}  }
class C{  public boolean isHeader(){  return isHeader(this.myHeader);}  }
class C{  @Override public int hashCode(){  if (mBluetoothDevice == null) {    return 0;  }  return mBluetoothDevice.hashCode();}  }
class C{  public void removeWay(final Way way){  dirty=true;  undo.save(way);  try {    currentStorage.removeWay(way);    if (apiStorage.contains(way)) {      if (way.getState() == OsmElement.STATE_CREATED) {        apiStorage.removeElement(way);      }    } else {      apiStorage.insertElementSafe(way);    }    removeElementFromRelations(way);    way.updateState(OsmElement.STATE_DELETED);    recordImagery();  } catch (  StorageException e) {    e.printStackTrace();  }}  }
class C{  public String[][] format(DoubleMatrix2D matrix){  String[][] strings=new String[matrix.rows()][matrix.columns()];  for (int row=matrix.rows(); --row >= 0; )   strings[row]=formatRow(matrix.viewRow(row));  return strings;}  }
class C{  private void updateChangeValueButtonEnableState(){  view.setEnableChangeValueButtonEnable(selectedVariable != null);}  }
class C{  protected GPNode fullNode(final EvolutionState state,final int current,final int max,final GPType type,final int thread,final GPNodeParent parent,final int argposition,final GPFunctionSet set){  boolean triedTerminals=false;  int t=type.type;  GPNode[] terminals=set.terminals[t];  GPNode[] nonterminals=set.nonterminals[t];  GPNode[] nodes=set.nodes[t];  if (nodes.length == 0)   errorAboutNoNodeWithType(type,state);  if ((current + 1 >= max || warnAboutNonterminal(nonterminals.length == 0,type,false,state)) && (triedTerminals=true) && terminals.length != 0) {    GPNode n=(GPNode)(terminals[state.random[thread].nextInt(terminals.length)].lightClone());    n.resetNode(state,thread);    n.argposition=(byte)argposition;    n.parent=parent;    return n;  } else {    if (triedTerminals)     warnAboutNoTerminalWithType(type,false,state);    GPNode[] nodesToPick=set.nonterminals[type.type];    if (nodesToPick == null || nodesToPick.length == 0)     nodesToPick=set.terminals[type.type];    GPNode n=(GPNode)(nodesToPick[state.random[thread].nextInt(nodesToPick.length)].lightClone());    n.resetNode(state,thread);    n.argposition=(byte)argposition;    n.parent=parent;    GPType[] childtypes=n.constraints(((GPInitializer)state.initializer)).childtypes;    for (int x=0; x < childtypes.length; x++)     n.children[x]=fullNode(state,current + 1,max,childtypes[x],thread,n,x,set);    return n;  }}  }
class C{  public static String readLine(Reader self) throws IOException {  if (self instanceof BufferedReader) {    BufferedReader br=(BufferedReader)self;    return br.readLine();  }  if (self.markSupported()) {    return readLineFromReaderWithMark(self);  }  return readLineFromReaderWithoutMark(self);}  }
class C{  public static Manager v(){  return G.v().soot_toolkits_exceptions_ThrowableSet_Manager();}  }
class C{  private <T>Set<T> findNewEntries(Set<T> base,Set<T> given){  Set<T> result=new HashSet<>();  for (  T found : given) {    if (!base.contains(found)) {      result.add(found);    }  }  return result;}  }
class C{  public static void writeNewline(final OutputStream out) throws IOException {  out.write(NEWLINE_BYTES);}  }
class C{  public void updateString(String columnName,String x) throws SQLException {  updateString(findColumn(columnName),x);}  }
class C{  public void stopScroll(){  _timer.stop();}  }
class C{  public TreeVisualizer(TreeDisplayListener tdl,Node n,NodePlace p){  super();  initialize();  if (m_ShowBorder) {    setBorder(BorderFactory.createTitledBorder("Tree View"));  }  m_listener=tdl;  m_topNode=n;  m_placer=p;  m_placer.place(m_topNode);  m_viewPos=new Dimension(0,0);  m_viewSize=new Dimension(800,600);  m_nViewPos=new Dimension(0,0);  m_nViewSize=new Dimension(800,600);  m_scaling=0;  m_numNodes=Node.getCount(m_topNode,0);  m_numLevels=Node.getHeight(m_topNode,0);  m_nodes=new NodeInfo[m_numNodes];  m_edges=new EdgeInfo[m_numNodes - 1];  arrayFill(m_topNode,m_nodes,m_edges);  changeFontSize(12);  m_mouseState=0;  m_oldMousePos=new Dimension(0,0);  m_newMousePos=new Dimension(0,0);  m_frameLimiter=new Timer(120,this);  m_winMenu=new JPopupMenu();  m_topN=new JMenuItem("Center on Top Node");  m_topN.setActionCommand("Center on Top Node");  m_fitToScreen=new JMenuItem("Fit to Screen");  m_fitToScreen.setActionCommand("Fit to Screen");  m_selectFont=new JMenu("Select Font");  m_selectFont.setActionCommand("Select Font");  m_autoScale=new JMenuItem("Auto Scale");  m_autoScale.setActionCommand("Auto Scale");  m_selectFontGroup=new ButtonGroup();  m_accept=new JMenuItem("Accept The Tree");  m_accept.setActionCommand("Accept The Tree");  m_winMenu.add(m_topN);  m_winMenu.addSeparator();  m_winMenu.add(m_fitToScreen);  m_winMenu.add(m_autoScale);  m_winMenu.addSeparator();  m_winMenu.addSeparator();  m_winMenu.add(m_selectFont);  m_winMenu.addSeparator();  if (m_listener != null) {    m_winMenu.add(m_accept);  }  m_topN.addActionListener(this);  m_fitToScreen.addActionListener(this);  m_autoScale.addActionListener(this);  m_accept.addActionListener(this);  m_size24=new JRadioButtonMenuItem("Size 24",false);  m_size22=new JRadioButtonMenuItem("Size 22",false);  m_size20=new JRadioButtonMenuItem("Size 20",false);  m_size18=new JRadioButtonMenuItem("Size 18",false);  m_size16=new JRadioButtonMenuItem("Size 16",false);  m_size14=new JRadioButtonMenuItem("Size 14",false);  m_size12=new JRadioButtonMenuItem("Size 12",true);  m_size10=new JRadioButtonMenuItem("Size 10",false);  m_size8=new JRadioButtonMenuItem("Size 8",false);  m_size6=new JRadioButtonMenuItem("Size 6",false);  m_size4=new JRadioButtonMenuItem("Size 4",false);  m_size2=new JRadioButtonMenuItem("Size 2",false);  m_size1=new JRadioButtonMenuItem("Size 1",false);  m_size24.setActionCommand("Size 24");  m_size22.setActionCommand("Size 22");  m_size20.setActionCommand("Size 20");  m_size18.setActionCommand("Size 18");  m_size16.setActionCommand("Size 16");  m_size14.setActionCommand("Size 14");  m_size12.setActionCommand("Size 12");  m_size10.setActionCommand("Size 10");  m_size8.setActionCommand("Size 8");  m_size6.setActionCommand("Size 6");  m_size4.setActionCommand("Size 4");  m_size2.setActionCommand("Size 2");  m_size1.setActionCommand("Size 1");  m_selectFontGroup.add(m_size24);  m_selectFontGroup.add(m_size22);  m_selectFontGroup.add(m_size20);  m_selectFontGroup.add(m_size18);  m_selectFontGroup.add(m_size16);  m_selectFontGroup.add(m_size14);  m_selectFontGroup.add(m_size12);  m_selectFontGroup.add(m_size10);  m_selectFontGroup.add(m_size8);  m_selectFontGroup.add(m_size6);  m_selectFontGroup.add(m_size4);  m_selectFontGroup.add(m_size2);  m_selectFontGroup.add(m_size1);  m_selectFont.add(m_size24);  m_selectFont.add(m_size22);  m_selectFont.add(m_size20);  m_selectFont.add(m_size18);  m_selectFont.add(m_size16);  m_selectFont.add(m_size14);  m_selectFont.add(m_size12);  m_selectFont.add(m_size10);  m_selectFont.add(m_size8);  m_selectFont.add(m_size6);  m_selectFont.add(m_size4);  m_selectFont.add(m_size2);  m_selectFont.add(m_size1);  m_size24.addItemListener(this);  m_size22.addItemListener(this);  m_size20.addItemListener(this);  m_size18.addItemListener(this);  m_size16.addItemListener(this);  m_size14.addItemListener(this);  m_size12.addItemListener(this);  m_size10.addItemListener(this);  m_size8.addItemListener(this);  m_size6.addItemListener(this);  m_size4.addItemListener(this);  m_size2.addItemListener(this);  m_size1.addItemListener(this);  m_nodeMenu=new JPopupMenu();  m_visualise=new JMenuItem("Visualize The Node");  m_visualise.setActionCommand("Visualize The Node");  m_visualise.addActionListener(this);  m_nodeMenu.add(m_visualise);  if (m_listener != null) {    m_remChildren=new JMenuItem("Remove Child Nodes");    m_remChildren.setActionCommand("Remove Child Nodes");    m_remChildren.addActionListener(this);    m_nodeMenu.add(m_remChildren);    m_classifyChild=new JMenuItem("Use Classifier...");    m_classifyChild.setActionCommand("classify_child");    m_classifyChild.addActionListener(this);    m_nodeMenu.add(m_classifyChild);    m_sendInstances=new JMenuItem("Add Instances To Viewer");    m_sendInstances.setActionCommand("send_instances");    m_sendInstances.addActionListener(this);    m_nodeMenu.add(m_sendInstances);  }  m_focusNode=-1;  m_highlightNode=-1;  addMouseMotionListener(this);  addMouseListener(this);  m_frameLimiter.setRepeats(false);  m_frameLimiter.start();}  }
class C{  private void serializable(final IsolationLevels level) throws Exception {  clear(store);  final ValueFactory vf=store.getValueFactory();  final IRI subj=vf.createIRI("http://test#s");  final IRI pred=vf.createIRI("http://test#p");  RepositoryConnection prep=store.getConnection();  try {    prep.begin(level);    prep.add(subj,pred,vf.createLiteral(1));    prep.commit();  }  finally {    prep.close();  }  final CountDownLatch start=new CountDownLatch(2);  final CountDownLatch observed=new CountDownLatch(2);  Thread t1=incrementBy(start,observed,level,vf,subj,pred,3);  Thread t2=incrementBy(start,observed,level,vf,subj,pred,5);  t2.start();  t1.start();  t2.join();  t1.join();  assertNotFailed();  RepositoryConnection check=store.getConnection();  try {    check.begin(level);    Literal lit=readLiteral(check,subj,pred);    int val=lit.intValue();    if (val != 4 && val != 6) {      assertEquals(9,val);    }    check.commit();  }  finally {    check.close();  }}  }
class C{  public SitemapsNewsEntry(){  super();  this.getCategories().add(CATEGORY);}  }
class C{  public static void uiImpl(){  UIManager.put("Spinner.background",new ColorUIResource(BeautyEyeLNFHelper.commonBackgroundColor));  UIManager.put("Spinner.foreground",new ColorUIResource(BeautyEyeLNFHelper.commonForegroundColor));  UIManager.put("SpinnerUI",org.jb2011.lnf.beautyeye.ch18_spinner.BESpinnerUI.class.getName());  UIManager.put("Spinner.border",new BorderUIResource(new EmptyBorder(5,5,10,5)));  UIManager.put("Spinner.arrowButtonInsets",new InsetsUIResource(1,0,2,2));  UIManager.put("Spinner.arrowButtonSize",new Dimension(17,9));}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public String payment(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  Integer C_Payment_ID=(Integer)value;  if (C_Payment_ID == null || C_Payment_ID.intValue() == 0)   return "";  BigDecimal stmt=(BigDecimal)mTab.getValue("StmtAmt");  if (stmt == null)   stmt=Env.ZERO;  String sql="SELECT PayAmt FROM C_Payment_v WHERE C_Payment_ID=?";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,C_Payment_ID.intValue());    rs=pstmt.executeQuery();    if (rs.next()) {      BigDecimal bd=rs.getBigDecimal(1);      mTab.setValue("TrxAmt",bd);      if (stmt.compareTo(Env.ZERO) == 0)       mTab.setValue("StmtAmt",bd);    }  } catch (  SQLException e) {    log.log(Level.SEVERE,"BankStmt_Payment",e);    return e.getLocalizedMessage();  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  amount(ctx,WindowNo,mTab,mField,value);  return "";}  }
class C{  @SuppressWarnings("unchecked") public void listRecords(String cfName) throws Exception {  final Class clazz=getClassFromCFName(cfName);  if (clazz == null) {    return;  }  List<URI> uris=null;  uris=getColumnUris(clazz,activeOnly);  if (uris == null || !uris.iterator().hasNext()) {    System.out.println("No records found");    return;  }  int count=queryAndPrintRecords(uris,clazz);  System.out.println("Number of All Records is: " + count);}  }
class C{  public static Boolean toBoolean(String self){  final String trimmed=self.trim();  if ("true".equalsIgnoreCase(trimmed) || "y".equalsIgnoreCase(trimmed) || "1".equals(trimmed)) {    return Boolean.TRUE;  } else {    return Boolean.FALSE;  }}  }
class C{  public boolean isAdvancedSupported(){  return mManufacturerIdCharacteristic != null || mAdvIntervalCharacteristic != null || mLedSettingsCharacteristic != null;}  }
class C{  void visitSubroutine(final Label JSR,final long id,final int nbSubroutines){  Label stack=this;  while (stack != null) {    Label l=stack;    stack=l.next;    l.next=null;    if (JSR != null) {      if ((l.status & VISITED2) != 0) {        continue;      }      l.status|=VISITED2;      if ((l.status & RET) != 0) {        if (!l.inSameSubroutine(JSR)) {          Edge e=new Edge();          e.info=l.inputStackTop;          e.successor=JSR.successors.successor;          e.next=l.successors;          l.successors=e;        }      }    } else {      if (l.inSubroutine(id)) {        continue;      }      l.addToSubroutine(id,nbSubroutines);    }    Edge e=l.successors;    while (e != null) {      if ((l.status & Label.JSR) == 0 || e != l.successors.next) {        if (e.successor.next == null) {          e.successor.next=stack;          stack=e.successor;        }      }      e=e.next;    }  }}  }
class C{  private List<Initiator> nonNullInitiatorList(List<Initiator> initiatorList){  if (initiatorList != null) {    return initiatorList;  }  return new ArrayList<Initiator>();}  }
class C{  public static JSONArray toJSONArray(XMLTokener x) throws JSONException {  return (JSONArray)parse(x,true,null);}  }
class C{  public static int computeMessageSetExtensionSize(final int fieldNumber,final MessageLite value){  return computeTagSize(WireFormat.MESSAGE_SET_ITEM) * 2 + computeUInt32Size(WireFormat.MESSAGE_SET_TYPE_ID,fieldNumber) + computeMessageSize(WireFormat.MESSAGE_SET_MESSAGE,value);}  }
class C{  @DSComment("Contact manipulation UI") @DSSpec(DSCat.CONTACT) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:29.395 -0500",hash_original_method="615886346605DCC8A37347200BE80EDB",hash_generated_method="1929BA143A9C517068A4599A02DEEDF6") public void assignContactFromPhone(String phoneNumber,boolean lazyLookup){  mContactPhone=phoneNumber;  if (!lazyLookup) {    mQueryHandler.startQuery(TOKEN_PHONE_LOOKUP,null,Uri.withAppendedPath(PhoneLookup.CONTENT_FILTER_URI,mContactPhone),PHONE_LOOKUP_PROJECTION,null,null,null);  } else {    mContactUri=null;    onContactUriChanged();  }}  }
class C{  public void writeFile(CvTableModel cvModel,IndexedCvTableModel iCvModel,VariableTableModel variableModel){  LocoFile df=new LocoFile();  FileUtil.createDirectory(LocoFile.getFileLocation());  try {    String fullFilename=LocoFile.getFileLocation() + getFileName();    File f=new File(fullFilename);    df.makeBackupFile(LocoFile.getFileLocation() + getFileName());    changeDateUpdated();    df.writeFile(f,cvModel,iCvModel,variableModel,this);  } catch (  Exception e) {    log.error("error during locomotive file output",e);    try {      JOptionPane.showMessageDialog(null,ResourceBundle.getBundle("jmri.jmrit.roster.JmritRosterBundle").getString("ErrorSavingText") + "\n" + e.getMessage(),ResourceBundle.getBundle("jmri.jmrit.roster.JmritRosterBundle").getString("ErrorSavingTitle"),JOptionPane.ERROR_MESSAGE);    } catch (    HeadlessException he) {    }  }}  }
class C{  public final void test_write$BII_1() throws IOException {  for (int k=0; k < algorithmName.length; k++) {    try {      ByteArrayOutputStream bos=new ByteArrayOutputStream(MY_MESSAGE_LEN);      MessageDigest md=MessageDigest.getInstance(algorithmName[k]);      DigestOutputStream dos=new DigestOutputStream(bos,md);      dos.write(myMessage,0,MY_MESSAGE_LEN);      assertTrue("write",Arrays.equals(myMessage,bos.toByteArray()));      assertTrue("update",Arrays.equals(dos.getMessageDigest().digest(),MDGoldenData.getDigest(algorithmName[k])));      return;    } catch (    NoSuchAlgorithmException e) {    }  }  fail(getName() + ": no MessageDigest algorithms available - test not performed");}  }
class C{  public static Uri downloadImage(Context context,Uri url){  if (!isExternalStorageWritable()) {    Log.d(TAG,"external storage is not writable");    return null;  }  try (InputStream inputStream=(InputStream)new URL(url.toString()).getContent()){    return DownloadUtils.createDirectoryAndSaveFile(context,inputStream,url.toString());  } catch (  Exception e) {    Log.e(TAG,"Exception while downloading. Returning null." + e.toString());    return null;  }}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  void flush() throws IOException {  if (VDBG)   Log.d(TAG,"flush: " + mSocketOS);  mSocketOS.flush();}  }
class C{  public ProjectPrivilegeObject(){  super();}  }
class C{  @Override public void write(int b) throws IOException {  try {    signature.update((byte)b);  } catch (  final SignatureException e) {    throw new IOException("Signature update failed: " + e.getMessage());  }  out.write(b);}  }
class C{  public final boolean isCryptoAllowed(Key key) throws ExemptionMechanismException {  boolean ret=false;  if (done && (key != null)) {    ret=keyStored.equals(key);  }  return ret;}  }
class C{  static void accumMulti(int counts[],int startTermIndex,SortedSetDocValues si,DocIdSetIterator disi,int subIndex,OrdinalMap map) throws IOException {  if (startTermIndex == -1 && (map == null || si.getValueCount() < disi.cost() * 10)) {    accumMultiSeg(counts,si,disi,subIndex,map);  } else {    accumMultiGeneric(counts,startTermIndex,si,disi,subIndex,map);  }}  }
class C{  public static void writeAttribute(final XMLStreamWriter writer,final String attributeName,final short value) throws XMLStreamException {  writer.writeAttribute(attributeName,XMLConvert.toString(value));}  }
class C{  public static void checkConvergence(ServiceHost host,NodeGroupState ngs,Operation parentOp){  NodeState self=ngs.nodes.get(host.getId());  if (self == null) {    parentOp.fail(new IllegalStateException("Self node is required"));    return;  }  if (self.membershipQuorum == 1 && ngs.nodes.size() == 1) {    parentOp.complete();    return;  }  checkConvergenceAcrossPeers(host,ngs,parentOp);}  }
class C{  private Journal readJournal(ParcelFileDescriptor oldState){  Journal journal=new Journal();  if (oldState == null) {    return journal;  }  FileInputStream inStream=new FileInputStream(oldState.getFileDescriptor());  try {    int availableBytes=inStream.available();    if (DEBUG)     Log.d(TAG,"available " + availableBytes);    if (availableBytes < MAX_JOURNAL_SIZE) {      byte[] buffer=new byte[availableBytes];      int bytesRead=0;      boolean valid=false;      InvalidProtocolBufferNanoException lastProtoException=null;      while (availableBytes > 0) {        try {          int result=inStream.read(buffer,bytesRead,1);          if (result > 0) {            availableBytes-=result;            bytesRead+=result;          } else {            Log.w(TAG,"unexpected end of file while reading journal.");            availableBytes=0;          }        } catch (        IOException e) {          buffer=null;          availableBytes=0;        }        try {          MessageNano.mergeFrom(journal,readCheckedBytes(buffer,bytesRead));          valid=true;          availableBytes=0;          if (VERBOSE)           Log.v(TAG,"read " + bytesRead + " bytes of journal");        } catch (        InvalidProtocolBufferNanoException e) {          lastProtoException=e;          journal.clear();        }      }      if (DEBUG)       Log.d(TAG,"journal bytes read: " + bytesRead);      if (!valid) {        Log.w(TAG,"could not find a valid journal",lastProtoException);      }    }  } catch (  IOException e) {    Log.w(TAG,"failed to close the journal",e);  }  return journal;}  }
class C{  public static Cigar convertToLegacyCigar(Cigar cigar){  final Cigar cg=new Cigar();  int count=0;  for (int i=0; i < cigar.numCigarElements(); i++) {    final CigarElement ce=cigar.getCigarElement(i);    if (ce.getOperator().equals(CigarOperator.EQ) || ce.getOperator().equals(CigarOperator.X)) {      count+=ce.getLength();    } else {      if (count > 0) {        cg.add(new CigarElement(count,CigarOperator.M));      }      cg.add(ce);      count=0;    }  }  if (count > 0) {    cg.add(new CigarElement(count,CigarOperator.M));  }  return cg;}  }
class C{  public XObject eval(Node contextNode,String str,Node namespaceNode) throws TransformerException {  PrefixResolverDefault prefixResolver=new PrefixResolverDefault((namespaceNode.getNodeType() == Node.DOCUMENT_NODE) ? ((Document)namespaceNode).getDocumentElement() : namespaceNode);  XPath xpath=new XPath(str,null,prefixResolver,XPath.SELECT,null);  int ctxtNode=xpathSupport.getDTMHandleFromNode(contextNode);  return xpath.execute(xpathSupport,ctxtNode,prefixResolver);}  }
class C{  private void writeCurrentBitSet() throws IOException {  int pixel=0;  int offset=0;  int mask=0;  int maskPerByte=0;  int bitOffset=0;  if (this.y == this.imgHeight) {    throw new IOException(labelUtil.getString("err.image.insufficientSize"));  }  maskPerByte=(int)(Math.pow(2,this.channelBitsUsed) - 1);  mask=(maskPerByte << 16) + (maskPerByte << 8) + maskPerByte;  pixel=this.image.getRGB(this.x,this.y) & (0xFFFFFFFF - mask);  for (int bit=0; bit < 3; bit++) {    bitOffset=0;    for (int i=0; i < this.channelBitsUsed; i++) {      bitOffset=(bitOffset << 1) + this.bitSet[(bit * this.channelBitsUsed) + i];    }    offset=(offset << 8) + bitOffset;  }  this.image.setRGB(this.x,this.y,pixel + offset);}  }
class C{  private static boolean placePet(final StendhalRPZone zone,final Player player,final Entity pet){  if (placeat(zone,pet,player.getX() + 1,player.getY() + 1)) {    if (!Path.searchPath(pet,player,20).isEmpty()) {      return true;    }  }  Point p=findLocation(zone,pet,null,player.getX(),player.getY(),true);  if (p != null) {    return placeat(zone,pet,p.x,p.y);  }  return false;}  }
class C{  public JSONObject put(String key,long value) throws JSONException {  this.put(key,new Long(value));  return this;}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  private void escapeUtf8(){  int charsLength=stringValue.length();  charsOffset=0;  position=0;  if (charsLength == 0) {    position=2;    escapedArray=new byte[]{(byte)'\'',(byte)'\''};    return;  }  escapedArray=new byte[(charsLength * 3) + 2];  escapedArray[position++]=(byte)'\'';  char charValue;  if (noBackslashEscapes) {    do {      charValue=stringValue.charAt(charsOffset);      if (charValue < 0x80) {        if (charValue == '\'')         escapedArray[position++]=(byte)'\'';        escapedArray[position++]=(byte)charValue;        charsOffset++;      } else {        break;      }    } while (charsOffset < charsLength);  } else {    do {      charValue=stringValue.charAt(charsOffset);      if (charValue < 0x80) {        if (charValue == '\'' || charValue == '\\' || charValue == '"' || charValue == 0)         escapedArray[position++]=(byte)'\\';        escapedArray[position++]=(byte)charValue;        charsOffset++;      } else {        break;      }    } while (charsOffset < charsLength);  }  while (charsOffset < charsLength) {    char currChar=stringValue.charAt(charsOffset++);    if (currChar < 0x80) {      if (currChar == '\'') {        escapedArray[position++]=noBackslashEscapes ? (byte)'\'' : (byte)'\\';      } else       if (!noBackslashEscapes && (currChar == '\\' || currChar == '"' || currChar == 0)) {        escapedArray[position++]=(byte)'\\';      }      escapedArray[position++]=(byte)currChar;    } else     getNonAsciiByte(currChar,stringValue,charsLength);  }  escapedArray[position++]=(byte)'\'';  stringValue=null;  binary=false;}  }
class C{  @Override public boolean onOptionsItemSelected(MenuItem item){  int id=item.getItemId();switch (id) {case R.id.action_settings:    Intent settingsIntent=new Intent(this,SettingsActivity.class);  startActivityForResult(settingsIntent,server_settings);return true;case R.id.action_about:Intent aboutIntent=new Intent(this,AboutActivity.class);startActivityForResult(aboutIntent,about);return true;default :return super.onOptionsItemSelected(item);}}  }
class C{  public SimpleMultisigContext(final Transaction innerTransaction){  this.innerTransaction=innerTransaction;  this.innerTransactionHash=HashUtils.calculateHash(this.innerTransaction);  this.multisig=innerTransaction.getSigner();}  }
class C{  static int checkPagesCount(int pagesCount){  if (pagesCount < 0) {    throw new IllegalArgumentException("Pages count can't be less than 0.");  }  return pagesCount;}  }
class C{  public boolean hasUriHost(){  return uri_host != null;}  }
class C{  public static TagLib loadFromFile(Resource res,Identification id) throws TagLibException {  TagLib lib=TagLibFactory.getHashLib(FunctionLibFactory.id(res));  if (lib == null) {    lib=new TagLibFactory(DEFAULT_SAX_PARSER,null,res,id).getLib();    TagLibFactory.hashLib.put(FunctionLibFactory.id(res),lib);  }  lib.setSource(res.toString());  return lib;}  }
class C{  public DiskBasedCache(File rootDirectory,int maxCacheSizeInBytes){  mRootDirectory=rootDirectory;  mMaxCacheSizeInBytes=maxCacheSizeInBytes;}  }
class C{  public void readOID() throws IOException {  if (tag != ASN1Constants.TAG_OID) {    throw expected("OID");  }  if (length < 1) {    throw new ASN1Exception("Wrong length for ASN.1 object identifier at [" + tagOffset + "]");  }  readContent();  if ((buffer[offset - 1] & 0x80) != 0) {    throw new ASN1Exception("Wrong encoding at [" + (offset - 1) + "]");  }  oidElement=1;  for (int i=0; i < length; i++, ++oidElement) {    while ((buffer[contentOffset + i] & 0x80) == 0x80) {      i++;    }  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:49.787 -0500",hash_original_method="93FB269A6EC54BFB27C79F36D7092575",hash_generated_method="527BA607A8BF91EBA1712AE8BE5BC746") private static String filterWhitespace(String address){  StringBuilder builder=new StringBuilder();  int len=address.length();  for (int i=0; i < len; i++) {    char c=address.charAt(i);    if ((c == ' ') || (c == '\r') || (c == '\n')|| (c == '\t'))     continue;    builder.append(c);  }  return builder.toString();}  }
class C{  public boolean isSystemLogging(){  return systemLogging;}  }
class C{  public CronType(String second,String minute,String hour,String dayOfWeek,String dayOfMonth,String month,String year,Date start,Date end){  _text=String.format("%s %s %s %s %s %s %s",second,minute,hour,dayOfWeek,dayOfMonth,month,year);  _minutes=parseRange(minute,0,59);  _hours=parseRange(hour,0,23);  _daysOfWeek=parseRange(dayOfWeek,0,7);  if (_daysOfWeek[7]) {    _daysOfWeek[0]=_daysOfWeek[7];  }  _days=parseRange(dayOfMonth,1,31);  _months=parseRange(month,1,12);}  }
class C{  public void dispose(){  removeAll();}  }
class C{  public T caseIdentifiableElement(IdentifiableElement object){  return null;}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response){  PrintWriter out=null;  try {    String returnString=processPostRequest(request);    response.setContentType("application/json");    out=response.getWriter();    out.println(returnString);  } catch (  Exception e) {    logger.error(e.toString() + System.lineSeparator() + StackTrace.getStringFromStackTrace(e));  } finally {    if (out != null) {      out.close();    }  }}  }
class C{  public String readToken() throws IOException {  return readToken("");}  }
class C{  private void writeFrequencyDistributionsToNGramFiles(ConditionalFrequencyDistribution<Integer,String> cfd) throws IOException {  for (  int level : cfd.getConditions()) {    if (!ngramWriters.containsKey(level)) {      throw new IOException("No writer for ngram level " + level + " initialized.");    }    writeNGramFile(cfd,level);  }}  }
class C{  public void collect(Environment env,MemberDefinition field,ConstantPool tab){  if ((field != null) && env.debug_vars()) {    @SuppressWarnings("unchecked") Vector<MemberDefinition> v=(Vector<MemberDefinition>)field.getArguments();    if (v != null) {      for (Enumeration<MemberDefinition> e=v.elements(); e.hasMoreElements(); ) {        MemberDefinition f=e.nextElement();        tab.put(f.getName().toString());        tab.put(f.getType().getTypeSignature());      }    }  }  for (Instruction inst=first; inst != null; inst=inst.next) {    inst.collect(tab);  }}  }
class C{  private final void computeLight(int l){  boolean isDirectionalLight=this.isDirectionalLight[l];  if (!hasNormal && isDirectionalLight) {    Al=addBGR(Al,lightAmbientColor[l]);    return;  }  float att=1.f;  L[0]=ecLightPosition[l][0];  L[1]=ecLightPosition[l][1];  L[2]=ecLightPosition[l][2];  if (!isDirectionalLight) {    L[0]-=Ve[0];    L[1]-=Ve[1];    L[2]-=Ve[2];    float d=length3(L);    att=clamp(1.f / (constantAttenuation[l] + (linearAttenuation[l] + quadraticAttenuation[l] * d) * d),0.f,1.f);    if (isSpotLight[l]) {      normalize3(nSD,ecSpotDirection[l]);      float spot=dot3(nSD,-L[0],-L[1],-L[2]);      att*=spot < spotCosCutoff[l] ? 0.f : pow(spot,spotExponent[l]);    }  }  if (hasNormal) {    H[0]=L[0];    H[1]=L[1];    H[2]=L[2] + 1.f;    normalize3(nL,L);    float NdotL=max(dot3(nL,Ne),0.f);    normalize3(nH,H);    float NdotH=max(dot3(nH,Ne),0.f);    float k=shininess;    float Dk=lightKind[l] == LIGHT_POWER_DIFFUSE_SPECULAR ? max(pow(NdotL,k),0.f) : NdotL;    float Sk=lightKind[l] != LIGHT_AMBIENT_DIFFUSE ? max(pow(NdotH,k),0.f) : 0.f;    Dl=addBGR(Dl,multiplyBGR(lightDiffuseColor[l],att * Dk));    Sl=addBGR(Sl,multiplyBGR(lightSpecularColor[l],att * Sk));  }  Al=addBGR(Al,multiplyBGR(lightAmbientColor[l],att));}  }
class C{  public SolrClusters(final List<SolrCluster> solrClusterResponses){  solrClusters=solrClusterResponses;}  }
class C{  public CLEvent fillBuffer(CLQueue queue,Pointer<T> pattern,CLEvent... eventsToWaitFor){  return fillBuffer(queue,pattern,pattern.getValidElements(),0,getElementCount(),eventsToWaitFor);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public void runTasks(){  LOGGER.debug("starting runTasks");  Collection<AWTEvent> events=new ArrayList<AWTEvent>();  for (AWTEvent event; (event=queue.poll()) != null; ) {    events.add(event);  }  LatchCompletionSignal signal=new LatchCompletionSignal(events.size());  this.signal=signal;  for (  AWTEvent event : events) {    LOGGER.debug("event unqueued: " + event);    super.postEvent(event);  }  signal.await();  this.signal=null;  LOGGER.debug("finished runTasks");}  }
class C{  public T caseIf(If object){  return null;}  }
class C{  public void addSignatureProperty(SignatureProperty sp){  this.constructionElement.appendChild(sp.getElement());  XMLUtils.addReturnToElement(this.constructionElement);}  }
class C{  public static Pair<IDebugger,Integer> findBreakpoint(final BackEndDebuggerProvider debuggerProvider,final int row){  Preconditions.checkNotNull(debuggerProvider,"IE01336: Debugger provider argument can't be null");  Preconditions.checkArgument(row >= 0,"IE01337: Row arguments can not be negative");  int breakpoints=0;  for (  final IDebugger debugger : debuggerProvider.getDebuggers()) {    if ((row >= breakpoints) && (row < breakpoints + debugger.getBreakpointManager().getNumberOfBreakpoints(BreakpointType.REGULAR))) {      return new Pair<IDebugger,Integer>(debugger,row - breakpoints);    } else {      breakpoints+=debugger.getBreakpointManager().getNumberOfBreakpoints(BreakpointType.REGULAR);    }  }  throw new IllegalArgumentException("IE01338: Invalid row number");}  }
class C{  private static void handleCommandLineArgs(final String[] args){  GameRunner.handleCommandLineArgs(args,getProperties(),GameRunner.GameMode.HEADLESS_BOT);}  }
class C{  public AnimatableTransformListValue(AnimationTarget target,AbstractSVGTransform t){  super(target);  this.transforms=new Vector();  this.transforms.add(t);}  }
class C{  public Vector2i zero(){  this.x=0;  this.y=0;  return this;}  }
class C{  @Override public final synchronized boolean delete(final byte[] a){  boolean exists=false;  int index;  assert a.length == this.rowdef.primaryKeyLength;  while (true) {    index=find(a,0);    if (index < 0) {      return exists;    }    exists=true;    super.removeRow(index,true);  }}  }
class C{  protected final V unwrapKey(Object key){  return (V)key;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private static boolean isAlphanum(char p_char){  return (isAlpha(p_char) || isDigit(p_char));}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.TSTRUCT_GETTER__DEFINED_MEMBER:    return definedMember != null;}return super.eIsSet(featureID);}  }
class C{  public void close() throws IOException {  writer.close();}  }
class C{  private String generateSubscriptionPmFileName(String subscriptionId){  return subscriptionId + "_" + DEFAULT_LOCALE.getLanguage();}  }
class C{  protected void openDomain(){  final JFileChooser fc=new JFileChooser(System.getProperty("user.dir"));  fc.setFileFilter(new FileNameExtensionFilter("XML file","xml"));  int returnVal=fc.showOpenDialog(frame);  if (returnVal == JFileChooser.APPROVE_OPTION) {    String domainFile=fc.getSelectedFile().getAbsolutePath();    try {      Domain domain=XMLDomainReader.extractDomain(domainFile);      system.changeDomain(domain);      refresh();    } catch (    RuntimeException j) {      addComment("Cannot use domain: " + j);      Domain dummy=XMLDomainReader.extractEmptyDomain(domainFile);      system.changeDomain(dummy);      refresh();    }  }}  }
class C{  private void normalizeToMinimum(Coordinate n1,Coordinate n2,Coordinate n3,Coordinate n4,Coordinate normPt){  normPt.x=smallestInAbsValue(n1.x,n2.x,n3.x,n4.x);  normPt.y=smallestInAbsValue(n1.y,n2.y,n3.y,n4.y);  n1.x-=normPt.x;  n1.y-=normPt.y;  n2.x-=normPt.x;  n2.y-=normPt.y;  n3.x-=normPt.x;  n3.y-=normPt.y;  n4.x-=normPt.x;  n4.y-=normPt.y;}  }
class C{  public void close(){  buildStatusManager.stop();}  }
class C{  public void valueChanged(ListSelectionEvent e){  if (_table == null) {    return;  }  int row=_table.getSelectedRow();  if (log.isDebugEnabled()) {    log.debug("Table valueChanged: row= " + row);  }  if (row >= 0) {    if (_updateButton != null) {      _updateButton.setEnabled(true);      _updateButton.setToolTipText(null);    }    NamedBean bean=getDeviceNamedBean();    _readMem.setMemory(bean.getDisplayName());    _writeMem.setMemory(bean.getDisplayName());    _spinMem.setMemory(bean.getDisplayName());    _comboMem.setMemory(bean.getDisplayName());  } else {    if (_updateButton != null) {      _updateButton.setEnabled(false);      _updateButton.setToolTipText(Bundle.getMessage("ToolTipPickFromTable"));    }  }  validate();}  }
class C{  private void emitEmitCall(String opcode,ArgumentType[] args,int count,int level,ArgumentType size){  if (DEBUG) {    System.err.print("Emitting call for " + opcode + " with args: ");    for (    ArgumentType arg : args) {      System.err.print(arg + " ");    }    System.err.println(" count=" + count + " level="+ level+ " size="+ size);  }  emitTab(level);  emit("emit" + opcode);  for (int i=0; i < count; i++)   emit("_" + args[i].getAssemblerName());  if (size != null)   emit("_" + size.getAssemblerName());  if (count == 0)   emit("();\n"); else {    emit("(");    for (int i=0; i < count; i++) {      emit("\n");      emitTab(level + 1);      emitArgs(i,args[i]);      if (i == count - 1)       emit(");\n"); else       emit(",");    }  }}  }
class C{  public void abort() throws IOException {  completeEdit(this,false);}  }
class C{  public static boolean Enabled(String loggingClass){  if (!On()) {    return false;  }  if (instance().classesDisabled.contains(loggingClass)) {    return false;  }  if (instance().defaultEnabled) {    return true;  }  if (instance().classesEnabled.contains(loggingClass)) {    return true;  }  return false;}  }
class C{  public static String formatMins(long mins){  assert mins >= 0;  if (mins == 0)   return "< 1 min";  SB sb=new SB();  long dd=mins / 1440;  if (dd > 0)   sb.a(dd).a(dd == 1 ? " day " : " days ");  mins%=1440;  long hh=mins / 60;  if (hh > 0)   sb.a(hh).a(hh == 1 ? " hour " : " hours ");  mins%=60;  if (mins > 0)   sb.a(mins).a(mins == 1 ? " min " : " mins ");  return sb.toString().trim();}  }
class C{  public EvalError toEvalError(String msg,SimpleNode node,CallStack callstack){  if (msg == null)   msg=getMessage(); else   msg=msg + ": " + getMessage();  return new TargetError(msg,t,node,callstack,false);}  }
class C{  public ImpurityScore(int classCount,ImpurityMeasure impurityMeasure){  sumOfWeights=0.0;  counts=new double[classCount];  this.impurityMeasure=impurityMeasure;}  }
class C{  @Override public void perform(IR ir){  try {    ir.HIRInfo.postDominatorsAreComputed=false;    LTDominators.perform(ir,false,unfactor);    DominatorTree.perform(ir,false);    ir.HIRInfo.postDominatorsAreComputed=true;  } catch (  OperationNotImplementedException e) {    OptOptions options=ir.options;    if (options.PRINT_POST_DOMINATORS) {      OptimizingCompiler.report(e.getMessage());    }  }}  }
class C{  private static void writeBit(boolean bit){  buffer<<=1;  if (bit)   buffer|=1;  n++;  if (n == 8)   clearBuffer();}  }
class C{  public static String removeFirstAndLastChars(String str){  return str.substring(1,str.length() - 1);}  }
class C{  public static String join(Object[] array,String separator){  if (separator == null) {    separator="";  }  int arraySize=array.length;  int bufSize=(arraySize == 0 ? 0 : (array[0].toString().length() + separator.length()) * arraySize);  StringBuilder buf=new StringBuilder(bufSize);  for (int i=0; i < arraySize; i++) {    if (i > 0) {      buf.append(separator);    }    buf.append(array[i]);  }  return buf.toString();}  }
class C{  public static Vector<String> find(Class<?> cls,String[] pkgnames){  Vector<String> result;  int i;  HashSet<String> names;  result=new Vector<String>();  names=new HashSet<String>();  for (i=0; i < pkgnames.length; i++) {    names.addAll(find(cls,pkgnames[i]));  }  result.addAll(names);  Collections.sort(result,new StringCompare());  return result;}  }
class C{  public void resetTransform(){  globalModelTransformGroup.setTransform(new Transform3D());}  }
class C{  public boolean hasExtraFields(PdxType other){  for (  PdxField ft : this.fields) {    if (!ft.isDeleted() && other.getPdxField(ft.getFieldName()) == null) {      return true;    }  }  return false;}  }
class C{  public static boolean isLG(){  return sBuildModel.startsWith("lg-");}  }
class C{  public static String hexDigest(String hashAlg,byte[] data) throws Exception {  return encodeHex(calculateDigest(hashAlg,data));}  }
class C{  public UnitValueBoxPair(Unit unit,ValueBox valueBox){  this.unit=unit;  this.valueBox=valueBox;}  }
class C{  @Override protected void initToolbar(Bundle savedInstanceState){  this.initToolbarHelper();}  }
class C{  List<PlatformUser> loadReceiversForAbortAsyncSubscription(Subscription subscription){  return manageBean.getCustomerAndTechnicalProductAdminForSubscription(subscription);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.TRACE_WHEN___CONDITION_TYPE_1:    return CONDITION_TYPE_1_EDEFAULT == null ? conditionType_1 != null : !CONDITION_TYPE_1_EDEFAULT.equals(conditionType_1);case UmplePackage.TRACE_WHEN___CONSTRAINT_TOKEN_1:  return constraintToken_1 != null && !constraintToken_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public ReferenceQueueThread(){  setDaemon(true);  setName("MultiThreadedHttpConnectionManager cleanup");}  }
class C{  public void delete(int startIndex,int endIndex){  AccessibleEditableText at=getEditorAccessibleEditableText();  if (at != null) {    at.delete(startIndex,endIndex);  }}  }
class C{  public boolean isUnlink(){  return unlink;}  }
class C{  public AnimationBuilder scaleX(float... scaleX){  return property("scaleX",scaleX);}  }
class C{  private String base_phone_number() throws ParseException {  StringBuffer s=new StringBuffer();  if (debug)   dbg_enter("base_phone_number");  try {    int lc=0;    while (lexer.hasMoreChars()) {      char w=lexer.lookAhead(0);      if (Lexer.isDigit(w) || w == '-' || w == '.' || w == '(' || w == ')') {        lexer.consume(1);        s.append(w);        lc++;      } else       if (lc > 0)       break; else       throw createParseException("unexpected " + w);    }    return s.toString();  }  finally {    if (debug)     dbg_leave("base_phone_number");  }}  }
class C{  @Override public boolean supportsDb(String type){  return true;}  }
class C{  public ByteVector putUTF8(final String s){  int charLength=s.length();  int len=length;  if (len + 2 + charLength > data.length) {    enlarge(2 + charLength);  }  byte[] data=this.data;  data[len++]=(byte)(charLength >>> 8);  data[len++]=(byte)charLength;  for (int i=0; i < charLength; ++i) {    char c=s.charAt(i);    if (c >= '\001' && c <= '\177') {      data[len++]=(byte)c;    } else {      int byteLength=i;      for (int j=i; j < charLength; ++j) {        c=s.charAt(j);        if (c >= '\001' && c <= '\177') {          byteLength++;        } else         if (c > '\u07FF') {          byteLength+=3;        } else {          byteLength+=2;        }      }      data[length]=(byte)(byteLength >>> 8);      data[length + 1]=(byte)byteLength;      if (length + 2 + byteLength > data.length) {        length=len;        enlarge(2 + byteLength);        data=this.data;      }      for (int j=i; j < charLength; ++j) {        c=s.charAt(j);        if (c >= '\001' && c <= '\177') {          data[len++]=(byte)c;        } else         if (c > '\u07FF') {          data[len++]=(byte)(0xE0 | c >> 12 & 0xF);          data[len++]=(byte)(0x80 | c >> 6 & 0x3F);          data[len++]=(byte)(0x80 | c & 0x3F);        } else {          data[len++]=(byte)(0xC0 | c >> 6 & 0x1F);          data[len++]=(byte)(0x80 | c & 0x3F);        }      }      break;    }  }  length=len;  return this;}  }
class C{  public ImportVisualPanel1(){  initComponents();}  }
class C{  public Element signSamlElement(Element element,Element parent){  try {    DOMSignContext context=new DOMSignContext(privateKey,element);    if (parent != null) {      context.setParent(parent);    } else {      Node nextSibling=getNextSibling(element);      if (nextSibling != null) {        context.setNextSibling(nextSibling);      }    }    context.setDefaultNamespacePrefix("ds");    XMLSignature signature=getSignatureFactory().newXMLSignature(getSignedInfo(element),getKeyInfoAsX509Data());    signature.sign(context);    if (parent != null) {      NodeList children=parent.getChildNodes();      Node nextSibling=getNextSibling(parent);      if (nextSibling != null) {        for (int j=0; j < children.getLength(); j++) {          Node child=children.item(j);          if ("Signature".equals(child.getLocalName())) {            parent.insertBefore(child,nextSibling);            break;          }        }      }    }    return element;  } catch (  AccessControlException e) {    throw createSaaSSystemException(e);  }catch (  XMLSignatureException e) {    throw createSaaSSystemException(e);  }catch (  MarshalException e) {    throw createSaaSSystemException(e);  }}  }
class C{  public void dismissDialog(Dialog dialog){  if (dialog != null && dialog.isShowing()) {    dialog.dismiss();  }}  }
class C{  private int modifyAllContacts(Iterator<String> contactsIter){  int totalContactsModified=0;  while (contactsIter.hasNext())   totalContactsModified+=modifyContact(contactsIter.next(),contactsIter.next());  return totalContactsModified;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(4);  newVector.addElement(new Option("\tSets if binary attributes are to be coded as nominal ones.","N",0,"-N"));  newVector.addElement(new Option("\tFor each nominal value a new attribute is created, \n" + "\tnot only if there are more than 2 values.","A",0,"-A"));  newVector.addElement(new Option("\tSpecifies list of columns to act on. First and last are \n" + "\tvalid indexes.\n" + "\t(default: first-last)","R",1,"-R <col1,col2-col4,...>"));  newVector.addElement(new Option("\tInvert matching sense of column indexes.","V",0,"-V"));  return newVector.elements();}  }
class C{  public void deleteResolver(Resolver r){  resolvers.remove(r);}  }
class C{  private static Pair<Long,String> parseMdhd(ParsableByteArray mdhd){  mdhd.setPosition(Atom.HEADER_SIZE);  int fullAtom=mdhd.readInt();  int version=Atom.parseFullAtomVersion(fullAtom);  mdhd.skipBytes(version == 0 ? 8 : 16);  long timescale=mdhd.readUnsignedInt();  mdhd.skipBytes(version == 0 ? 4 : 8);  int languageCode=mdhd.readUnsignedShort();  String language="" + (char)(((languageCode >> 10) & 0x1F) + 0x60) + (char)(((languageCode >> 5) & 0x1F) + 0x60)+ (char)(((languageCode) & 0x1F) + 0x60);  return Pair.create(timescale,language);}  }
class C{  static public void fail(){  fail(null);}  }
class C{  public boolean letsItemsIn(byte aSide,int aCoverID,int aCoverVariable,int aSlot,ICoverable aTileEntity){  return false;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public boolean isTransactionRelevant(Transaction tx) throws ScriptException {  lock.lock();  try {    return tx.isMine(this) || tx.getValueSentFromMe(this).compareTo(BigInteger.ZERO) > 0 || tx.getValueSentToMe(this).compareTo(BigInteger.ZERO) > 0 || checkForDoubleSpendAgainstPending(tx,false);  }  finally {    lock.unlock();  }}  }
class C{  public ScatterPlotAction(DataEditor editor){  super("Scatter Plots...");  this.dataEditor=editor;}  }
class C{  public MethodDeclaration createGetter(){  if (getVariables().size() != 1)   throw new IllegalStateException("You can use this only when the field declares only 1 variable name");  ClassOrInterfaceDeclaration parentClass=getParentNodeOfType(ClassOrInterfaceDeclaration.class);  EnumDeclaration parentEnum=getParentNodeOfType(EnumDeclaration.class);  if ((parentClass == null && parentEnum == null) || (parentClass != null && parentClass.isInterface()))   throw new IllegalStateException("You can use this only when the field is attached to a class or an enum");  VariableDeclarator variable=getVariables().get(0);  String fieldName=variable.getId().getName();  String fieldNameUpper=fieldName.toUpperCase().substring(0,1) + fieldName.substring(1,fieldName.length());  final MethodDeclaration getter;  if (parentClass != null)   getter=parentClass.addMethod("get" + fieldNameUpper,PUBLIC); else   getter=parentEnum.addMethod("get" + fieldNameUpper,PUBLIC);  getter.setType(variable.getType());  BlockStmt blockStmt=new BlockStmt();  getter.setBody(blockStmt);  blockStmt.addStatement(new ReturnStmt(name(fieldName)));  return getter;}  }
class C{  public void insertUpdate(DocumentEvent changes,Shape a,ViewFactory f){  updateChildren(changes,a);  Rectangle alloc=((a != null) && isAllocationValid()) ? getInsideAllocation(a) : null;  int pos=changes.getOffset();  View v=getViewAtPosition(pos,alloc);  if (v != null)   v.insertUpdate(changes,alloc,f);}  }
class C{  public synchronized boolean is1A0001Today(final String userId){  final Date now=new Date();  final List<JSONObject> records=pointtransferQueryService.getLatestPointtransfers(userId,Pointtransfer.TRANSFER_TYPE_C_ACTIVITY_1A0001,1);  if (records.isEmpty()) {    return false;  }  final JSONObject maybeToday=records.get(0);  final long time=maybeToday.optLong(Pointtransfer.TIME);  return DateUtils.isSameDay(now,new Date(time));}  }
class C{  protected void specifyColumn(final PreparedStatement statement,final int index,final LogEvent event) throws SQLException {  final ColumnInfo info=getColumn(index);  int id=0;  String tableName=null;switch (info.getType()) {case ColumnType.CATEGORY:    tableName=getTable() + "_" + ColumnType.CATEGORY_STR+ "_SET";  id=getID(tableName,m_categoryIDs,event.getCategory());statement.setInt(index + 1,id);break;case ColumnType.PRIORITY:tableName=getTable() + "_" + ColumnType.PRIORITY_STR+ "_SET";id=getID(tableName,m_priorityIDs,event.getPriority().getName());statement.setInt(index + 1,id);break;default :super.specifyColumn(statement,index,event);}}  }
class C{  public int optInt(int index){  return this.optInt(index,0);}  }
class C{  public String toString(){  return "{" + super.toString() + " a="+ getAlpha()+ "}";}  }
class C{  private RdapSearchResults makeSearchResults(List<HostResource> hosts,DateTime now){  OutputDataType outputDataType=(hosts.size() > 1) ? OutputDataType.SUMMARY : OutputDataType.FULL;  ImmutableList.Builder<ImmutableMap<String,Object>> jsonListBuilder=new ImmutableList.Builder<>();  for (  HostResource host : Iterables.limit(hosts,rdapResultSetMaxSize)) {    jsonListBuilder.add(RdapJsonFormatter.makeRdapJsonForHost(host,false,rdapLinkBase,rdapWhoisServer,now,outputDataType));  }  ImmutableList<ImmutableMap<String,Object>> jsonList=jsonListBuilder.build();  return RdapSearchResults.create(jsonList,jsonList.size() < hosts.size());}  }
class C{  public void addFirst(E e){  if (e == null)   throw new NullPointerException();  elements[head=(head - 1) & (elements.length - 1)]=e;  if (head == tail)   doubleCapacity();}  }
class C{  private static int checkEigenSystem(int N,double[][] C,double[] diag,double[][] Q){  int i;  int j;  int k;  int res=0;  double cc;  double dd;  for (i=0; i < N; ++i) {    for (j=0; j < N; ++j) {      for (cc=0., dd=0., k=0; k < N; ++k) {        cc+=diag[k] * Q[i][k] * Q[j][k];        dd+=Q[i][k] * Q[j][k];      }      if (Math.abs(cc - C[i > j ? i : j][i > j ? j : i]) / Math.sqrt(C[i][i] * C[j][j]) > 1e-10 && Math.abs(cc - C[i > j ? i : j][i > j ? j : i]) > 1e-9) {        System.err.println("imprecise result detected " + i + " "+ j+ " "+ cc+ " "+ C[i > j ? i : j][i > j ? j : i]+ " "+ (cc - C[i > j ? i : j][i > j ? j : i]));        ++res;      }      if (Math.abs(dd - (i == j ? 1 : 0)) > 1e-10) {        System.err.println("imprecise result detected (Q not orthog.) " + i + " "+ j+ " "+ dd);        ++res;      }    }  }  return res;}  }
class C{  private List findStabbedSegments(Coordinate stabbingRayLeftPt){  List stabbedSegments=new ArrayList();  for (Iterator i=subgraphs.iterator(); i.hasNext(); ) {    BufferSubgraph bsg=(BufferSubgraph)i.next();    Envelope env=bsg.getEnvelope();    if (stabbingRayLeftPt.y < env.getMinY() || stabbingRayLeftPt.y > env.getMaxY())     continue;    findStabbedSegments(stabbingRayLeftPt,bsg.getDirectedEdges(),stabbedSegments);  }  return stabbedSegments;}  }
class C{  public static int EBADE(){  return 52;}  }
class C{  public static SelectorExtractor selectorh(String query,int eq){  return new SelectorExtractor(query,eq).htmlParser();}  }
class C{  public void stopped(){}  }
class C{  public PrivateKeyPbeNotSupportedException(String unsupportedPbe,Throwable causeThrowable){  super(causeThrowable);  this.unsupportedPbe=unsupportedPbe;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-01-27 09:54:12.403 -0500",hash_original_method="AD3650995583655A8D059B5C8CE85FAD",hash_generated_method="366CF084EB99511539C960AAB90DA5DB") public int keyAt(int index){  if (mGarbage) {    gc();  }  return mKeys[index];}  }
class C{  public NonEditablePropertyEditor(){}  }
class C{  public void startDTD(String name,String publicId,String systemId) throws org.xml.sax.SAXException {}  }
class C{  public static Class<?> wrapperType(Class<?> primitiveType){  if (primitiveType == Integer.TYPE) {    return Integer.class;  }  if (primitiveType == Long.TYPE) {    return Long.class;  }  if (primitiveType == Boolean.TYPE) {    return Boolean.class;  }  if (primitiveType == Double.TYPE) {    return Double.class;  }  if (primitiveType == Float.TYPE) {    return Float.class;  }  if (primitiveType == Byte.TYPE) {    return Byte.class;  }  if (primitiveType == Short.TYPE) {    return Short.class;  }  if (primitiveType == Character.TYPE) {    return Character.class;  }  throw new IllegalArgumentException("Class " + primitiveType.getName() + " is not a primitive type");}  }
class C{  @Override public boolean accept(String category){  return "opentab".equals(category);}  }
class C{  public final void walkGraph(Hashtable h){}  }
class C{  public boolean equals(Object other){  if (!(other instanceof TFloatFloatHashMap)) {    return false;  }  TFloatFloatHashMap that=(TFloatFloatHashMap)other;  if (that.size() != this.size()) {    return false;  }  return forEachEntry(new EqProcedure(that));}  }
class C{  public int next(){  if (_startNode == _currentNode)   return NULL;  final int node=_startNode;  int expType=_exptype2(makeNodeIdentity(node));  _currentNode=node;  if (_nodeType >= DTM.NTYPES) {    if (_nodeType == expType) {      return returnNode(node);    }  } else {    if (expType < DTM.NTYPES) {      if (expType == _nodeType) {        return returnNode(node);      }    } else {      if (m_extendedTypes[expType].getNodeType() == _nodeType) {        return returnNode(node);      }    }  }  return NULL;}  }
class C{  public static byte[] uncompressGZipArray(byte[] source) throws IOException {  if (source == null) {    return null;  }  if ((source.length > 1) && (((source[1] << 8) | (source[0] & 0xff)) == GZIPInputStream.GZIP_MAGIC)) {    System.out.println("DEBUG: uncompressGZipArray - uncompressing source");    try {      final ByteArrayInputStream byteInput=new ByteArrayInputStream(source);      final ByteArrayOutputStream byteOutput=new ByteArrayOutputStream(source.length / 5);      final GZIPInputStream zippedContent=new GZIPInputStream(byteInput);      final byte[] data=new byte[1024];      int read=0;      while ((read=zippedContent.read(data,0,1024)) != -1) {        byteOutput.write(data,0,read);      }      zippedContent.close();      byteOutput.close();      source=byteOutput.toByteArray();    } catch (    final Exception e) {      if (!e.getMessage().equals("Not in GZIP format")) {        throw new IOException(e.getMessage());      }    }  }  return source;}  }
class C{  public Navigator(EdmEntitySet collection,KeyPredicate kp,List<NavigationSegment> ns,Class<? extends E> return_type) throws IllegalArgumentException, IllegalStateException {  if (collection == null || ns == null || return_type == null) {    throw new IllegalArgumentException("Null Parameter not allowed");  }  this.collection=collection;  this.collecKp=kp;  this.navigationSegments=ns;  this.returnType=return_type;}  }
class C{  public DumpStore(){}  }
class C{  public void beginPlayerCodeExecution(int isolateId){  DManagerIsolateState state=getIsolateState(isolateId);  state.m_executingPlayerCode=true;  state.m_faultEventDuringPlayerCodeExecution=null;}  }
class C{  public static Tracker tracker(){  return tracker;}  }
class C{  public static void convertFromSphericalToCartesian(float radius,float pitch,float yaw,PLPosition result){  convertFromSphericalToCartesian(radius,pitch,yaw,90.0f,180.0f,result);}  }
class C{  public void requestFocus(){  m_text.requestFocus();}  }
class C{  public void readToToken(int tok) throws CoreException {  int curr=0;  do {    curr=readNext(false);  } while (curr != tok);}  }
class C{  public HypergraphSorter(final int numEdges,final boolean computeEdges){  this.numEdges=numEdges;  this.computeEdges=computeEdges;  final int m=numEdges == 0 ? 0 : (int)Math.ceil(GAMMA * numEdges) + 1;  numVertices=m + (3 - m % 3) % 3;  partSize=numVertices / 3;  vertex1=new int[numVertices];  vertex2=new int[numVertices];  edge=computeEdges ? new int[numVertices] : null;  stack=new int[numEdges];  d=new int[numVertices];  visitStack=new IntArrayList(INITIAL_QUEUE_SIZE);  neverUsed=true;}  }
class C{  public FadeDrawable(Drawable[] layers){  super(layers);  Preconditions.checkState(layers.length >= 1,"At least one layer required!");  mLayers=layers;  mStartAlphas=new int[layers.length];  mAlphas=new int[layers.length];  mAlpha=255;  mIsLayerOn=new boolean[layers.length];  mPreventInvalidateCount=0;  resetInternal();}  }
class C{  public BoxPanel(int orientation){  if (orientation != X_AXIS && orientation != Y_AXIS)   throw new IllegalArgumentException("Illegal BoxPanel orientation");  setLayout(new BoxLayout(this,orientation));}  }
class C{  @Override public void flush() throws IOException {}  }
class C{  @Override public BatchResult next(){  return queryResultPreparator.prepareQueryResult(queryResultIterator.next());}  }
class C{  public int lastIndexOfAny(CharSet charSet,int start){  return lastIndexOfAny(charSet,start,length() - start);}  }
class C{  @Override public boolean csConsistNeedsSeperateAddress(){  return false;}  }
class C{  private static String[] doTileRefStuff(File path) throws FormatException {  File pathname=new File(path.getParentFile(),"tileref");  String faceIDColumnName=null;  File fcsFile=new File(pathname,"fcs");  if (!fcsFile.canRead()) {    fcsFile=new File(pathname,"fcs.");  }  DcwRecordFile fcs=new DcwRecordFile(fcsFile.toString());  Vector fcsv=new Vector(fcs.getColumnCount());  while (fcs.parseRow(fcsv)) {    String fclass=((String)fcsv.elementAt(1)).toLowerCase();    String table1=((String)fcsv.elementAt(2)).toLowerCase();    if ((fclass.equals("tileref")) && (table1.equals("tileref.aft"))) {      faceIDColumnName=(String)fcsv.elementAt(3);      break;    }  }  fcs.close();  if (faceIDColumnName == null) {    throw new FormatException("no faceIDColumn");  }  DcwRecordFile aft=new DcwRecordFile(pathname + File.separator + "tileref.aft");  int faceIDColumn=aft.whatColumn(faceIDColumnName.toLowerCase());  int tileNameColumn=aft.whatColumn("tile_name");  if ((faceIDColumn == -1) || (tileNameColumn == -1)) {    aft.close();    throw new FormatException("no faceIDColumn");  }  Vector aftv=new Vector(aft.getColumnCount());  String containedTiles[]=new String[aft.getRecordCount() + 1];  int tileid=1;  while (aft.parseRow(aftv)) {    String tilename=(String)aftv.elementAt(tileNameColumn);    char chs[]=tilename.toCharArray();    boolean goodTile=false;    for (int i=0; i < chs.length; i++) {      if ((chs[i] != '\\') && (chs[i] != ' ')) {        goodTile=true;        chs[i]=Character.toLowerCase(chs[i]);      }      if (chs[i] == '\\') {        chs[i]=File.separatorChar;      }    }    containedTiles[tileid++]=(goodTile) ? new String(chs) : null;  }  aft.close();  return containedTiles;}  }
class C{  public static int toInt32(Session session,Value v){  v=safeValue(v,Isolate.DEFAULT_ID);  double d=toNumber(session,v);  if (d == Double.POSITIVE_INFINITY || d == Double.NEGATIVE_INFINITY) {    return 0;  } else {    double sign=Math.signum(d);    d=Math.floor(Math.abs(d));    d%=_2pow32;    while (d >= _2pow31)     d-=_2pow32;    return (int)(sign * d);  }}  }
class C{  public void testLineCommentWithSemicolon() throws IOException {  final InputStream stream=this.getStream(R.raw.line_comment_with_semicolon);  List<String> commands=SqlParser.parse(stream);  assertEquals(1,commands.size());  assertEquals(sql1,commands.get(0));}  }
class C{  private void updateLaneDefinitions(String networkToRead,String networkToWrite){  this.log.info("Updating lane definitions...");  sc=(MutableScenario)ScenarioUtils.createScenario(ConfigUtils.createConfig());  NetworkReaderMatsimV1 nwr=new NetworkReaderMatsimV1(sc.getNetwork());  nwr.readFile(networkToRead);  File folder=new File(this.laneDefinitionFolder);  if (folder.isDirectory()) {    for (int i=1; i <= 6; i++) {      File f=new File(this.laneDefinitionFolder + "/Lanes" + i+ ".txt");      if (f.exists() && f.canRead()) {        String line=null;        try {          BufferedReader br=IOUtils.getBufferedReader(f.getAbsolutePath());          try {            while ((line=br.readLine()) != null) {              if (!line.startsWith("%")) {                Integer id=Integer.parseInt(line);                Link l=this.sc.getNetwork().getLinks().get(Id.create(id,Link.class));                if (l != null) {                  double oldLanes=l.getNumberOfLanes();                  double oldCap=l.getCapacity();                  l.setNumberOfLanes(i);                  l.setCapacity(i * (oldCap / oldLanes));                } else {                  this.log.warn("Could not find link " + line);                }              } else {              }            }          }  finally {            br.close();          }        } catch (        FileNotFoundException e) {          e.printStackTrace();        }catch (        IOException e) {          e.printStackTrace();        }catch (        NumberFormatException e) {          this.log.error("The line " + line + " is not a parsable integer.");          e.printStackTrace();        }      }    }  } else {    this.log.warn(this.laneDefinitionFolder + " is not a folder!");  }  this.log.info("Done.");  NetworkWriter nww=new NetworkWriter(sc.getNetwork());  nww.write(networkToWrite);}  }
class C{  void createEntry(int hash,int key,VALUE value,int bucketIndex){  table[bucketIndex]=new IntEntry<>(hash,key,value,table[bucketIndex]);  size++;}  }
class C{  public static DateTimeFormatter dateHourMinuteSecondFraction(){  return Constants.dhmsf;}  }
class C{  static IdnTable createFrom(String language,Iterable<String> data,Optional<LanguageValidator> languageValidator){  ImmutableRangeSet.Builder<Integer> rangeSet=new ImmutableRangeSet.Builder<>();  URI url=null;  URI policy=null;  for (  String line : data) {    line=line.trim();    if (line.startsWith(URL_LINE_PREFIX)) {      url=URI.create(line.substring(URL_LINE_PREFIX.length()));    } else     if (line.startsWith(POLICY_LINE_PREFIX)) {      policy=URI.create(line.substring(POLICY_LINE_PREFIX.length()));    }    if (line.isEmpty() || line.startsWith("#")) {      continue;    }    int codepoint=readCodepoint(line);    rangeSet.add(Range.<Integer>singleton(codepoint));  }  return new IdnTable(language,url,policy,rangeSet.build(),languageValidator);}  }
class C{  private static boolean matchInf(byte[] str,byte firstchar,int start,int end){}  }
class C{  public VmfsDatastoreExtendSpec pickBestExtendSpec(List<VmfsDatastoreOption> extendOptions){  if ((extendOptions == null) || extendOptions.isEmpty()) {    return null;  }  VmfsDatastoreExtendSpec bestSpec=(VmfsDatastoreExtendSpec)extendOptions.get(0).getSpec();  return bestSpec;}  }
class C{  private DemoDetailsList(){}  }
class C{  public static Mapper<Boolean> singleBoolean(){  return singleBoolean;}  }
class C{  public void vetoableChange(PropertyChangeEvent evt) throws PropertyVetoException {  if (m_archives.length > 0)   updateArchive.setEnabled(true);}  }
class C{  public ScoreCachingWrappingScorer(Scorer scorer){  super(scorer);}  }
class C{  public static int[] indexOf(String s,String arr[],int start){  int arrLen=arr.length;  int index=Integer.MAX_VALUE;  int last=-1;  for (int j=0; j < arrLen; j++) {    int i=s.indexOf(arr[j],start);    if (i != -1) {      if (i < index) {        index=i;        last=j;      }    }  }  return last == -1 ? null : new int[]{last,index};}  }
class C{  public void store(byte value){}  }
class C{  @SuppressLint("DefaultLocale") public static String stringForTime(long time){  int totalSeconds=(int)time / 1000;  int seconds=totalSeconds % 60;  int minutes=(totalSeconds / 60) % 60;  int hours=totalSeconds / 3600;  return hours > 0 ? String.format("%d:%02d:%02d",hours,minutes,seconds) : String.format("%02d:%02d",minutes,seconds);}  }
class C{  private static void generatePcThunkInstructions(){  Assembler asm=new Assembler(0);  asm.emitMOV_Reg_RegInd(EAX,SP);  asm.emitRET();  pcThunkEAXInstructions=asm.getMachineCodes();  pcThunkInstructionsField[EAX.value()]=EntrypointHelper.getField(OutOfLineMachineCode.class,"pcThunkEAXInstructions",CodeArray.class);  asm=new Assembler(0);  asm.emitMOV_Reg_RegInd(EBX,SP);  asm.emitRET();  pcThunkEBXInstructions=asm.getMachineCodes();  pcThunkInstructionsField[EBX.value()]=EntrypointHelper.getField(OutOfLineMachineCode.class,"pcThunkEBXInstructions",CodeArray.class);  asm=new Assembler(0);  asm.emitMOV_Reg_RegInd(ECX,SP);  asm.emitRET();  pcThunkECXInstructions=asm.getMachineCodes();  pcThunkInstructionsField[ECX.value()]=EntrypointHelper.getField(OutOfLineMachineCode.class,"pcThunkECXInstructions",CodeArray.class);  asm=new Assembler(0);  asm.emitMOV_Reg_RegInd(EDX,SP);  asm.emitRET();  pcThunkEDXInstructions=asm.getMachineCodes();  pcThunkInstructionsField[EDX.value()]=EntrypointHelper.getField(OutOfLineMachineCode.class,"pcThunkEDXInstructions",CodeArray.class);  asm=new Assembler(0);  asm.emitMOV_Reg_RegInd(EBP,SP);  asm.emitRET();  pcThunkEBPInstructions=asm.getMachineCodes();  pcThunkInstructionsField[EBP.value()]=EntrypointHelper.getField(OutOfLineMachineCode.class,"pcThunkEBPInstructions",CodeArray.class);  asm=new Assembler(0);  asm.emitMOV_Reg_RegInd(ESI,SP);  asm.emitRET();  pcThunkESIInstructions=asm.getMachineCodes();  pcThunkInstructionsField[ESI.value()]=EntrypointHelper.getField(OutOfLineMachineCode.class,"pcThunkESIInstructions",CodeArray.class);  asm=new Assembler(0);  asm.emitMOV_Reg_RegInd(EDI,SP);  asm.emitRET();  pcThunkEDIInstructions=asm.getMachineCodes();  pcThunkInstructionsField[EDI.value()]=EntrypointHelper.getField(OutOfLineMachineCode.class,"pcThunkEDIInstructions",CodeArray.class);}  }
class C{  public boolean isCalculationTypeRange(){  return CALCULATIONTYPE_AddRangeOp1ToOp2.equals(getCalculationType());}  }
class C{  @Override public String toString(){  return String.format("Function Block ['%s']",m_function.toString());}  }
class C{  @DSComment("IO movement methodName") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:02.900 -0500",hash_original_method="7E1B14522C484E4F1B470AEA16F877D6",hash_generated_method="30526FA7EE5BA7ADC855EA97F46AE7D4") public final InputStream open(String fileName) throws IOException {  return open(fileName,ACCESS_STREAMING);}  }
class C{  public static int chars2utf(char[] src,int sindex,byte[] dst,int dindex,int len){  int j=dindex;  int limit=sindex + len;  for (int i=sindex; i < limit; i++) {    char ch=src[i];    if (1 <= ch && ch <= 0x7F) {      dst[j++]=(byte)ch;    } else     if (ch <= 0x7FF) {      dst[j++]=(byte)(0xC0 | (ch >> 6));      dst[j++]=(byte)(0x80 | (ch & 0x3F));    } else {      dst[j++]=(byte)(0xE0 | (ch >> 12));      dst[j++]=(byte)(0x80 | ((ch >> 6) & 0x3F));      dst[j++]=(byte)(0x80 | (ch & 0x3F));    }  }  return j;}  }
class C{  @HLEFunction(nid=0x57726BC1,version=150) public int sceRtcGetDayOfWeek(int year,int month,int day){  Calendar cal=Calendar.getInstance();  cal.set(year,month - 1,day);  int dayOfWeekNumber=cal.get(Calendar.DAY_OF_WEEK);  dayOfWeekNumber=(dayOfWeekNumber - 1 + 7) % 7;  if (log.isDebugEnabled()) {    log.debug(String.format("sceRtcGetDayOfWeek returning %d",dayOfWeekNumber));  }  return dayOfWeekNumber;}  }
class C{  private UpdateAction(String text){  super(text);  setImageDescriptor(InspectIT.getDefault().getImageDescriptor(InspectITImages.IMG_REFRESH));}  }
class C{  protected String makeTickLabel(double val,boolean forceFmtFlag){  if (this.expTickLabelsFlag || forceFmtFlag) {    return this.numberFormatterObj.format(val).toLowerCase();  }  return getTickUnit().valueToString(val);}  }
class C{  public boolean isSetSrcDb(){  return this.srcDb != null;}  }
class C{  public void unsubscribe(String sku){  throw new RuntimeException("Unsupported");}  }
class C{  public YarnClusterResourceManager(Config config,JobModelManager jobModelManager,ClusterResourceManager.Callback callback,SamzaApplicationState samzaAppState){  super(callback);  hConfig=new YarnConfiguration();  hConfig.set("fs.http.impl",HttpFileSystem.class.getName());  MetricsRegistryMap registry=new MetricsRegistryMap();  metrics=new SamzaAppMasterMetrics(config,samzaAppState,registry);  String containerIdStr=System.getenv(ApplicationConstants.Environment.CONTAINER_ID.toString());  ContainerId containerId=ConverterUtils.toContainerId(containerIdStr);  String nodeHostString=System.getenv(ApplicationConstants.Environment.NM_HOST.toString());  String nodePortString=System.getenv(ApplicationConstants.Environment.NM_PORT.toString());  String nodeHttpPortString=System.getenv(ApplicationConstants.Environment.NM_HTTP_PORT.toString());  int nodePort=Integer.parseInt(nodePortString);  int nodeHttpPort=Integer.parseInt(nodeHttpPortString);  YarnConfig yarnConfig=new YarnConfig(config);  this.yarnConfig=yarnConfig;  int interval=yarnConfig.getAMPollIntervalMs();  this.amClient=AMRMClientAsync.createAMRMClientAsync(interval,this);  this.state=new YarnAppState(-1,containerId,nodeHostString,nodePort,nodeHttpPort);  log.info("Initialized YarnAppState: {}",state.toString());  this.service=new SamzaYarnAppMasterService(config,samzaAppState,this.state,registry,hConfig);  log.info("ContainerID str {}, Nodehost  {} , Nodeport  {} , NodeHttpport {}",new Object[]{containerIdStr,nodeHostString,nodePort,nodeHttpPort});  this.lifecycle=new SamzaYarnAppMasterLifecycle(yarnConfig.getContainerMaxMemoryMb(),yarnConfig.getContainerMaxCpuCores(),samzaAppState,state,amClient);  yarnContainerRunner=new YarnContainerRunner(config,hConfig);}  }
class C{  public static boolean isTreasureChestBlock(Block block){  return treasureBlocks.contains(block);}  }
class C{  public boolean matches(){  return regexMatcher.matches();}  }
class C{  public Iterator<String> iterator(){  return list.iterator();}  }
class C{  public void preInit(){  registerNOVAItemsToMinecraft();  registerMinecraftItemsToNOVA();  registerSubtypeResolution();}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  @Override public int hashCode(){  if (myhash == -1) {    myhash=hashAlgId.hashCode();    for (int i=0; i < issuerNameHash.length; i++) {      myhash+=issuerNameHash[i] * i;    }    for (int i=0; i < issuerKeyHash.length; i++) {      myhash+=issuerKeyHash[i] * i;    }    myhash+=certSerialNumber.getNumber().hashCode();  }  return myhash;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override protected void register(ContainerFactory containerFactory){  containerFactory.registerContainer("oc4j9x",ContainerType.INSTALLED,Oc4j9xInstalledLocalContainer.class);  containerFactory.registerContainer("oc4j10x",ContainerType.INSTALLED,Oc4j10xInstalledLocalContainer.class);}  }
class C{  @Override public int write(String str) throws IOException {  int n=0;  int nll=newline.length();  int sl=str.length();  for (int i=0; i < sl; i++) {    char c=str.charAt(i);    if (c == '\r')     continue;    if (c == '\n') {      atStartOfLine=true;      charPosition=-nll;      out.write(newline);      n+=nll;      charIndex+=nll;      charPosition+=n;      continue;    }    if (atStartOfLine) {      n+=indent();      atStartOfLine=false;    }    n++;    out.write(c);    charPosition++;    charIndex++;  }  return n;}  }
class C{  public static final void sort(float[] a,int[] b){  mergesort(a,b,0,a.length - 1);}  }
class C{  public ProxyGraphics2D(Graphics2D graphics,PrinterJob printerJob){  mGraphics=graphics;  mPrinterJob=printerJob;}  }
class C{  @DSSource({DSSourceKind.NETWORK}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:41.494 -0500",hash_original_method="9F01E3A806C3F2E1984EAD9F3EE0C531",hash_generated_method="74D44612EBB0C935680D45AD73197323") public static byte[] stringToGsm8BitPacked(String s){  byte[] ret;  int septets=countGsmSeptetsUsingTables(s,true,0,0);  ret=new byte[septets];  stringToGsm8BitUnpackedField(s,ret,0,ret.length);  return ret;}  }
class C{  public static void error(ErrorMessages message,File file){  errors++;  err(NL + "Error: " + ErrorMessages.get(message)+ " ("+ file+ ")");}  }
class C{  @Override public void initUnitTurn(Entity unit,IGame game){  final String METHOD_NAME="initUnitTurn(Entity, IGame)";  getOwner().methodBegin(getClass(),METHOD_NAME);  try {    bestDamageByEnemies.clear();    List<Entity> enemies=getOwner().getEnemyEntities();    List<Entity> friends=getOwner().getFriendEntities();    for (    Entity e : enemies) {      double max_damage=0;      for (      Entity f : friends) {        double damage=fireControl.guessBestFiringPlanUnderHeatWithTwists(e,null,f,null,(e.getHeatCapacity() - e.heat) + 5,game).getExpectedDamage();        if (damage > max_damage) {          max_damage=damage;        }      }      bestDamageByEnemies.put(e.getId(),max_damage);    }  }  finally {    getOwner().methodEnd(getClass(),METHOD_NAME);  }}  }
class C{  public boolean isAbstract(){  return false;}  }
class C{  @Override public boolean select(Viewer viewer,Object parentElement,Object element){  return !(element instanceof RisikoMassnahmenUmsetzung);}  }
class C{  private static ReflectUtils on(Method method,Object object,Object... args) throws ReflectException {  try {    accessible(method);    if (method.getReturnType() == void.class) {      method.invoke(object,args);      return on(object);    } else {      return on(method.invoke(object,args));    }  } catch (  Exception e) {    throw new ReflectException(e);  }}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  @Override public int parse(char[] buf,int start,int end,U data){  int hit=subject.parse(buf,start,end,data);  if (hit != NO_MATCH) {    callback.handle(buf,start,start + hit,data);  }  return hit;}  }
class C{  public boolean isDeadEnd(){  return (this == DEAD_END);}  }
class C{  public com.ebay.jetstream.event.processor.hdfs.TestRecord.Builder clearKey1(){  key1=null;  fieldSetFlags()[0]=false;  return this;}  }
class C{  private void sendData(){  final ByteBuf data=Unpooled.buffer();  for (  final short value : input) {    data.writeShort(value);  }  for (  final short value : output) {    data.writeShort(value);  }  data.writeShort(channel);  getCasing().sendData(getFace(),data,DATA_TYPE_UPDATE);}  }
class C{  private void buildToolPanel(Composite parent,Tool tool){  Button toolBtn=new Button(parent,SWT.PUSH);  toolBtn.setToolTipText(tool.getName());  toolBtn.addSelectionListener(new ToolSelection(tool));  toolBtn.setImage(tool.getIcon());  Composite toolPanel=new Composite(panel,SWT.NONE);  Label image=new Label(toolPanel,SWT.NONE);  image.setImage(tool.getIcon());  Label title=new Label(toolPanel,SWT.NONE);  title.setText(tool.getName());  toolPanel.setLayout(new GridLayout(2,false));  Control control=createToolControl(toolPanel,tool);  if (null == control) {    guis.put(tool,null);    return;  }  guis.put(tool,toolPanel);  control.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));}  }
class C{  private static BloomFilter createZeroBloomFilter(BloomFilter filter){  double bitsPerElement=filter.getExpectedBitsPerElement();  int expectedNumberOfFilterElements=filter.getExpectedNumberOfElements();  int k=filter.getK();  int metric=filter.getMetric();  BloomFilter zeroFilter=new BloomFilter(filter.h,bitsPerElement,expectedNumberOfFilterElements,k,metric);  assert filter.size() == zeroFilter.size();  if (filter.size() != zeroFilter.size())   throw new RuntimeException("size mismatch?");  if (zeroFilter.h != filter.h)   throw new RuntimeException("different hasher?");  return zeroFilter;}  }
class C{  private static String toKey(char variant,String url){  int index=url.indexOf('/');  return variant + url.substring(index);}  }
class C{  public void randomizeIncompleteRows(int nodeIndex){  for (int rowIndex=0; rowIndex < getNumRows(nodeIndex); rowIndex++) {    if (isIncomplete(nodeIndex,rowIndex)) {      randomizeRow(nodeIndex,rowIndex);    }  }}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  public void testTimedInvokeAny4() throws Throwable {  ExecutorService e=new ForkJoinPool(1);  PoolCleaner cleaner=null;  try {    cleaner=cleaner(e);    long startTime=System.nanoTime();    List<Callable<String>> l=new ArrayList<Callable<String>>();    l.add(new NPETask());    try {      e.invokeAny(l,LONG_DELAY_MS,MILLISECONDS);      shouldThrow();    } catch (    ExecutionException success) {      assertTrue(success.getCause() instanceof NullPointerException);    }    assertTrue(millisElapsedSince(startTime) < LONG_DELAY_MS);  }  finally {    if (cleaner != null) {      cleaner.close();    }  }}  }
class C{  boolean parseArithmeticForLoop(BashPsiBuilder builder){  if (log.isDebugEnabled()) {    log.assertTrue(builder.getTokenType() == FOR_KEYWORD);  }  PsiBuilder.Marker marker=builder.mark();  builder.advanceLexer();  if (builder.getTokenType() != EXPR_ARITH) {    ParserUtil.error(marker,"parser.unexpected.token");    return false;  }  builder.advanceLexer();  if (!parseArithmeticExpression(builder,SEMI)) {    ParserUtil.error(marker,"parser.unexpected.token");    return false;  }  if (!parseArithmeticExpression(builder,SEMI)) {    ParserUtil.error(marker,"parser.unexpected.token");    return false;  }  if (!parseArithmeticExpression(builder,_EXPR_ARITH)) {    ParserUtil.error(marker,"parser.unexpected.token");    return false;  }  if (Parsing.list.isListTerminator(builder.getTokenType())) {    builder.advanceLexer();    builder.eatOptionalNewlines();  }  if (!LoopParserUtil.parseLoopBody(builder,true,false)) {    marker.drop();    return false;  }  marker.done(ShellCommandParsing.FOR_COMMAND);  return true;}  }
class C{  public Status(int severity,String pluginId,int code,String message,Throwable exception){  setSeverity(severity);  setPlugin(pluginId);  setCode(code);  setMessage(message);  setException(exception);}  }
class C{  public void defaultMutate(EvolutionState state,int thread){  IntegerVectorSpecies s=(IntegerVectorSpecies)species;  if (s.mutationProbability > 0.0)   for (int x=0; x < genome.length; x++)   if (state.random[thread].nextBoolean(s.mutationProbability)) {    genome[x]=randomValueFromClosedInterval(0,s.computeMaxGene(x,genome),state.random[thread]);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.197 -0500",hash_original_method="C38CB4735B94E96E0C6FB81DC8E60CBF",hash_generated_method="5C1F890CCF751902F2531EF1594E7667") public javax.sip.header.ExtensionHeader createExtensionHeader(String name,String value) throws ParseException {  if (name == null)   throw new NullPointerException("bad name");  gov.nist.javax.sip.header.ExtensionHeaderImpl ext=new gov.nist.javax.sip.header.ExtensionHeaderImpl();  ext.setName(name);  ext.setValue(value);  return ext;}  }
class C{  public static ConditionOperand EQUAL(){  return new ConditionOperand(EQUAL);}  }
class C{  @Override public int distributedProcess(ResponseBuilder rb){  SolrParams params=rb.req.getParams();  LOG.info("SuggestComponent distributedProcess with : " + params);  if (rb.stage < ResponseBuilder.STAGE_EXECUTE_QUERY)   return ResponseBuilder.STAGE_EXECUTE_QUERY;  if (rb.stage == ResponseBuilder.STAGE_EXECUTE_QUERY) {    ShardRequest sreq=new ShardRequest();    sreq.purpose=ShardRequest.PURPOSE_GET_TOP_IDS;    sreq.params=new ModifiableSolrParams(rb.req.getParams());    sreq.params.remove(ShardParams.SHARDS);    rb.addRequest(this,sreq);    return ResponseBuilder.STAGE_GET_FIELDS;  }  return ResponseBuilder.STAGE_DONE;}  }
class C{  public CacheClosedException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  private void loadImageData() throws CoreException {  final IEditorInput input=getEditorInput();  final Object o=input.getAdapter(ImageData.class);  if (o instanceof ImageData) {    imageData=(ImageData)o;  } else   if (input instanceof IStorageEditorInput) {    final IFile file=getFileFor(input);    imageData=ImageDataLoader.getImageData(file);  }  this.maxZoomFactor=determineMaxZoomFactor();}  }
class C{  private void calculateAndSetSignedMutualInformation(int i,int j,double[][] jointProbabilities){  jointProbabilities[1][1]=(double)Math.round(mCoOccurrencesAndMiMatrix.get(i,j)) / m_totalNumIntervals;  jointProbabilities[1][0]=(double)Math.round(mCoOccurrencesAndMiMatrix.get(i,i) - mCoOccurrencesAndMiMatrix.get(i,j)) / m_totalNumIntervals;  jointProbabilities[0][1]=(double)Math.round(mCoOccurrencesAndMiMatrix.get(j,j) - mCoOccurrencesAndMiMatrix.get(i,j)) / m_totalNumIntervals;  jointProbabilities[0][0]=(double)Math.round(m_totalNumIntervals - mCoOccurrencesAndMiMatrix.get(i,i) - mCoOccurrencesAndMiMatrix.get(j,j) + mCoOccurrencesAndMiMatrix.get(i,j)) / m_totalNumIntervals;  final double mi=calculateSign(jointProbabilities) * calculateMutualInformation(jointProbabilities);  mCoOccurrencesAndMiMatrix.set(i,j,mi);}  }
class C{  protected Instance makeOutputInstance(Instance inputI,boolean batch) throws Exception {  if (m_outputStructure == null) {    throw new Exception("OutputStructure has not been determined!");  }  int newAttIndex=m_outputStructure.numAttributes() - 1;  Instance result=inputI;  if (m_matchRules.size() > 0) {    String label=null;    for (    SubstringLabelerMatchRule m : m_matchRules) {      label=m.apply(inputI);      if (label != null) {        break;      }    }    double[] vals=new double[m_outputStructure.numAttributes()];    for (int i=0; i < inputI.numAttributes(); i++) {      if (!inputI.attribute(i).isString()) {        vals[i]=inputI.value(i);      } else {        if (!batch) {          vals[i]=0;          String v=inputI.stringValue(i);          m_outputStructure.attribute(i).setStringValue(v);        } else {          String v=inputI.stringValue(i);          vals[i]=m_outputStructure.attribute(i).addStringValue(v);        }      }    }    if (label != null) {      if (m_hasLabels) {        vals[newAttIndex]=m_outputStructure.attribute(m_attName).indexOfValue(label);      } else {        vals[newAttIndex]=1;      }    } else {      if (m_hasLabels) {        if (!getConsumeNonMatching()) {          vals[newAttIndex]=Utils.missingValue();        } else {          return null;        }      } else {        vals[newAttIndex]=0;      }    }    result=new DenseInstance(1.0,vals);    result.setDataset(m_outputStructure);  }  return result;}  }
class C{  public List<JobDefinition> createNewSchedule(){  if (!canExecuteMore()) {    logger.info("Cannot schedule more jobs");    return null;  }  logger.info("Creating new schedule with " + currentSchedule.getClass().getSimpleName());  List<JobDefinition> jobs=currentSchedule.createNewSchedule();  for (  JobDefinition job : jobs) {    ClassInfo classInfo=this.projectData.getClassInfo(job.cut);    classInfo.setTimeBudgetInSeconds(job.seconds);    classInfo.setMemoryInMB(job.memoryInMB);  }  return jobs;}  }
class C{  public void unsilence(){  if (myVcs == null) {    return;  }  myVcs.showCommandLine(printableCommandLine());  if (myStderr.length() != 0) {    myVcs.showErrorMessages(myStderr.toString());  }  if (myStdout.length() != 0) {    myVcs.showMessages(myStdout.toString());  }}  }
class C{  public String toString(){  StringBuilder builder=new StringBuilder();  for (  String param : usedParameters) {    builder.append("\n").append(param).append(" = ").append(parameters.get(param)[0]);  }  return builder.toString();}  }
class C{  public boolean isShowing(){  return getTextComponent().isShowing();}  }
class C{  @Override public boolean isCellEditable(int rowIndex,int columnIndex){  return editable[rowIndex][columnIndex];}  }
class C{  public EnumSource createEnumSource(){  EnumSourceImpl enumSource=new EnumSourceImpl();  return enumSource;}  }
class C{  static NodeTextRep prependToNodeText(NodeTextRep nodeRep,String str){  NodeTextRep result=nodeRep.clone();  for (int i=0; i < nodeRep.nodeText.length; i++) {    if (i == 0) {      result.nodeText[0]=str + result.nodeText[0];    } else {      result.nodeText[i]=StringHelper.copyString(" ",str.length()) + result.nodeText[i];    }    adjustMappingPairVector(1,str.length(),result.mapping[i]);  }  return result;}  }
class C{  Object processQNAME(StylesheetHandler handler,String uri,String name,String rawName,String value,ElemTemplateElement owner) throws org.xml.sax.SAXException {  try {    QName qname=new QName(value,handler,true);    return qname;  } catch (  IllegalArgumentException ie) {    handleError(handler,XSLTErrorResources.INVALID_QNAME,new Object[]{name,value},ie);    return null;  }catch (  RuntimeException re) {    handleError(handler,XSLTErrorResources.INVALID_QNAME,new Object[]{name,value},re);    return null;  }}  }
class C{  @Deprecated public ContentItem created(Date created){  this.created=created;  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:20.802 -0500",hash_original_method="8DA1240BCB0B1358D88E8B5A3BC94CC9",hash_generated_method="3393F4228B7567012C52A4075D51057C") protected void launchQuerySearch(int actionKey,String actionMsg){  String query=mSearchAutoComplete.getText().toString();  String action=Intent.ACTION_SEARCH;  Intent intent=createIntent(action,null,null,query,actionKey,actionMsg);  launchIntent(intent);}  }
class C{  private DigestURL extractRedirectURL(final Request request,CrawlProfile profile,DigestURL url,final StatusLine statusline,final ResponseHeader responseHeader,String requestURLString) throws IOException {  String redirectionUrlString=responseHeader.get(HeaderFramework.LOCATION);  redirectionUrlString=redirectionUrlString == null ? "" : redirectionUrlString.trim();  if (redirectionUrlString.isEmpty()) {    this.sb.crawlQueues.errorURL.push(request.url(),request.depth(),profile,FailCategory.TEMPORARY_NETWORK_FAILURE,"no redirection url provided, field '" + HeaderFramework.LOCATION + "' is empty",statusline.getStatusCode());    throw new IOException("REJECTED EMTPY REDIRECTION '" + statusline + "' for URL '"+ requestURLString+ "'$");  }  final DigestURL redirectionUrl=DigestURL.newURL(request.url(),redirectionUrlString);  this.log.info("CRAWLER Redirection detected ('" + statusline + "') for URL "+ requestURLString);  this.log.info("CRAWLER ..Redirecting request to: " + redirectionUrl.toNormalform(false));  this.sb.webStructure.generateCitationReference(url,redirectionUrl);  if (this.sb.getConfigBool(SwitchboardConstants.CRAWLER_RECORD_REDIRECTS,true)) {    this.sb.crawlQueues.errorURL.push(request.url(),request.depth(),profile,FailCategory.FINAL_REDIRECT_RULE,"redirect to " + redirectionUrlString,statusline.getStatusCode());  }  return redirectionUrl;}  }
class C{  public void environmentStop(EnvironmentClassLoader loader){  Object obj=_objRef.get();  if (obj == null)   return;  try {    _preDestroy.invoke(obj,(Object[])null);  } catch (  Throwable e) {    log.log(Level.WARNING,e.toString(),e);  }}  }
class C{  public void beforeFirst() throws SQLException {  notSupported();}  }
class C{  public static int generarMarcas(int[] bitsActivos){  int result=0;  for (int i=0; i < bitsActivos.length; i++) {    result+=(int)Math.pow(2,bitsActivos[i]);  }  return result;}  }
class C{  public void addProperty(PropertyMetadata property){  if (property.shouldOverride(m_properties.get(property.getName()))) {    m_properties.put(property.getName(),property);    m_descriptor.addUnconvertedProperty(property.getName(),property.getValue(),property.getJavaClassName(property.getValueType()));  }}  }
class C{  public NetworkDatacenter(String name,DatacenterCharacteristics characteristics,VmAllocationPolicy vmAllocationPolicy,List<Storage> storageList,double schedulingInterval) throws Exception {  super(name,characteristics,vmAllocationPolicy,storageList,schedulingInterval);  VmToSwitchid=new HashMap<Integer,Integer>();  HostToSwitchid=new HashMap<Integer,Integer>();  VmtoHostlist=new HashMap<Integer,Integer>();  Switchlist=new HashMap<Integer,Switch>();}  }
class C{  boolean fieldsAreAnnotated(){  return !getAnnotatedFieldsByParameter().isEmpty();}  }
class C{  public boolean isDefault(){  Object oo=get_Value(COLUMNNAME_IsDefault);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:13.974 -0400",hash_original_method="0395870E478DFE4BE47D7DC0433D30D9",hash_generated_method="12DCF741D2D6B7403F48F75825292230") public static List<HttpCookie> parse(String header){  return new CookieParser(header).parse();}  }
class C{  public static double[] readDoubles(String filename){  return new In(filename).readAllDoubles();}  }
class C{  private void addToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so);}  }
class C{  private void writeDataTofile(Object[] row) throws CarbonSortKeyAndGroupByException {  if (mergerParameters.isCompressionEnabled() || mergerParameters.isPrefetch()) {    if (entryCount == 0) {      records=new Object[totalSize][];      records[entryCount++]=row;      return;    }    records[entryCount++]=row;    if (entryCount == totalSize) {      this.writer.writeSortTempFile(records);      entryCount=0;      records=new Object[totalSize][];    }    return;  }  try {    int fieldIndex=0;    char[] aggType=mergerParameters.getAggType();    for (int counter=0; counter < mergerParameters.getDimColCount(); counter++) {      stream.writeInt((Integer)RemoveDictionaryUtil.getDimension(fieldIndex++,row));    }    if ((mergerParameters.getNoDictionaryCount() + mergerParameters.getComplexDimColCount()) > 0) {      stream.write(RemoveDictionaryUtil.getByteArrayForNoDictionaryCols(row));    }    fieldIndex=0;    for (int counter=0; counter < mergerParameters.getMeasureColCount(); counter++) {      if (null != RemoveDictionaryUtil.getMeasure(fieldIndex,row)) {        stream.write((byte)1);        if (aggType[counter] == CarbonCommonConstants.BYTE_VALUE_MEASURE) {          Double val=(Double)RemoveDictionaryUtil.getMeasure(fieldIndex,row);          stream.writeDouble(val);        } else         if (aggType[counter] == CarbonCommonConstants.SUM_COUNT_VALUE_MEASURE) {          Double val=(Double)RemoveDictionaryUtil.getMeasure(fieldIndex,row);          stream.writeDouble(val);        } else         if (aggType[counter] == CarbonCommonConstants.BIG_INT_MEASURE) {          Long val=(Long)RemoveDictionaryUtil.getMeasure(fieldIndex,row);          stream.writeLong(val);        } else         if (aggType[counter] == CarbonCommonConstants.BIG_DECIMAL_MEASURE) {          byte[] bigDecimalInBytes=(byte[])RemoveDictionaryUtil.getMeasure(fieldIndex,row);          stream.writeInt(bigDecimalInBytes.length);          stream.write(bigDecimalInBytes);        }      } else {        stream.write((byte)0);      }      fieldIndex++;    }  } catch (  IOException e) {    throw new CarbonSortKeyAndGroupByException("Problem while writing the file",e);  }}  }
class C{  public static boolean verify(PublicKey publicKey,String signedData,String signature){  byte[] signatureBytes;  try {    signatureBytes=Base64.decode(signature,Base64.DEFAULT);  } catch (  IllegalArgumentException e) {    Log.e(TAG,"Base64 decoding failed.");    return false;  }  try {    Signature sig=Signature.getInstance(SIGNATURE_ALGORITHM);    sig.initVerify(publicKey);    sig.update(signedData.getBytes());    if (!sig.verify(signatureBytes)) {      Log.e(TAG,"Signature verification failed.");      return false;    }    return true;  } catch (  NoSuchAlgorithmException e) {    Log.e(TAG,"NoSuchAlgorithmException.");  }catch (  InvalidKeyException e) {    Log.e(TAG,"Invalid key specification.");  }catch (  SignatureException e) {    Log.e(TAG,"Signature exception.");  }  return false;}  }
class C{  public static Element svgRect(Document document,double x,double y,double w,double h){  Element rect=SVGUtil.svgElement(document,SVGConstants.SVG_RECT_TAG);  SVGUtil.setAtt(rect,SVGConstants.SVG_X_ATTRIBUTE,x);  SVGUtil.setAtt(rect,SVGConstants.SVG_Y_ATTRIBUTE,y);  SVGUtil.setAtt(rect,SVGConstants.SVG_WIDTH_ATTRIBUTE,w);  SVGUtil.setAtt(rect,SVGConstants.SVG_HEIGHT_ATTRIBUTE,h);  return rect;}  }
class C{  public Map<HadoopInputSplit,Integer> pendingSplits(){  return pendingSplits;}  }
class C{  @Override protected int eofCheck(EOFException e,int start,int index,int length) throws EOFException {  if (start == index) {    throw e;  } else {    return (index - start) * length;  }}  }
class C{  private static CharSequence nodeDebugDescription(AccessibilityNodeInfoCompat node){  StringBuilder sb=new StringBuilder();  sb.append(node.getWindowId());  if (node.getClassName() != null) {    appendSimpleName(sb,node.getClassName());  } else {    sb.append("??");  }  if (!node.isVisibleToUser()) {    sb.append(":invisible");  }  Rect rect=new Rect();  node.getBoundsInScreen(rect);  sb.append(":");  sb.append("(").append(rect.left).append(", ").append(rect.top).append(" - ").append(rect.right).append(", ").append(rect.bottom).append(")");  if (node.getText() != null) {    sb.append(":");    sb.append(node.getText().toString().trim());  }  if (node.getContentDescription() != null) {    sb.append(":");    sb.append(node.getContentDescription().toString().trim());  }  int actions=node.getActions();  if (actions != 0) {    sb.append(":");    if ((actions & AccessibilityNodeInfoCompat.ACTION_FOCUS) != 0) {      sb.append("F");    }    if ((actions & AccessibilityNodeInfoCompat.ACTION_ACCESSIBILITY_FOCUS) != 0) {      sb.append("A");    }    if ((actions & AccessibilityNodeInfoCompat.ACTION_CLEAR_ACCESSIBILITY_FOCUS) != 0) {      sb.append("a");    }    if ((actions & AccessibilityNodeInfoCompat.ACTION_SCROLL_BACKWARD) != 0) {      sb.append("-");    }    if ((actions & AccessibilityNodeInfoCompat.ACTION_CLICK) != 0) {      sb.append("C");    }    if ((actions & AccessibilityNodeInfoCompat.ACTION_LONG_CLICK) != 0) {      sb.append("L");    }    if ((actions & AccessibilityNodeInfoCompat.ACTION_SCROLL_FORWARD) != 0) {      sb.append("+");    }  }  if (node.isCheckable()) {    sb.append(":");    if (node.isChecked()) {      sb.append("(X)");    } else {      sb.append("( )");    }  }  if (node.isFocusable()) {    sb.append(":focusable");  }  if (node.isFocused()) {    sb.append(":focused");  }  if (node.isSelected()) {    sb.append(":selected");  }  if (node.isClickable()) {    sb.append(":clickable");  }  if (node.isLongClickable()) {    sb.append(":longClickable");  }  if (node.isAccessibilityFocused()) {    sb.append(":accessibilityFocused");  }  if (!node.isEnabled()) {    sb.append(":disabled");  }  return sb.toString();}  }
class C{  public BayesUpdaterEditorObs(IdentifiabilityWrapper wrapper){  this((UpdaterWrapper)wrapper);}  }
class C{  public static Configuration parse(byte[] content){  try {    Properties p=new Properties();    p.load(new ByteArrayInputStream(content));    ConfigurationImpl config=new ConfigurationImpl();    config._map=p;    return config;  } catch (  IOException e) {    throw CoordinatorException.fatals.invalidProperties(e);  }}  }
class C{  private boolean isMethodContained(Method m,List<Method> wrapperMethods){  String name=m.getName();  Class<?>[] paramTypes=m.getParameterTypes();  Class<?> returnType=m.getReturnType();  for (  Method wm : wrapperMethods) {    if (name.equals(wm.getName()) && Arrays.equals(paramTypes,wm.getParameterTypes()) && returnType == wm.getReturnType()) {      return true;    }  }  return false;}  }
class C{  public ExportSpecifier createExportSpecifier(){  ExportSpecifierImpl exportSpecifier=new ExportSpecifierImpl();  return exportSpecifier;}  }
class C{  public synchronized void add(Rsrc rsrc){  int rsrcLen=rsrc.getTotalTimedBuffersSize();  makeRoom(rsrcLen);  if (tail == null) {    head=rsrc;    tail=rsrc;    rsrc.setPrev(null);    rsrc.setNext(null);  } else {    rsrc.setPrev(tail);    tail.setNext(rsrc);    rsrc.setNext(null);    tail=rsrc;  }  ++count;  _totalSize+=rsrcLen;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testAddr;  Attr addrAttr;  String attrName;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("address");  testAddr=(Element)elementList.item(0);  addrAttr=testAddr.getAttributeNode("domestic");  attrName=addrAttr.getNodeName();  assertEquals("nodeAttributeNodeNameAssert1","domestic",attrName);}  }
class C{  public SVD svd(){  return new SVD(this);}  }
class C{  @Override public void startUpload(final String hostname,final int port,final String uri,final int fileSizeOctet){  mTask.writeUpload(hostname,port,uri,fileSizeOctet);}  }
class C{  public static void showReal_3D(String format,int n1,int n2,int n3,double[] x,String title){  int sliceStride=n2 * n3;  int rowStride=n3;  System.out.println(title);  System.out.println("-------------------");  for (int k=0; k < n3; k++) {    System.out.println();    System.out.println("(:,:," + k + ")=\n");    for (int i=0; i < n1; i++) {      for (int j=0; j < n2; j++) {        if (Math.abs(x[i * sliceStride + j * rowStride + k]) <= 5e-5) {          System.out.print("0\t");        } else {          System.out.print(String.format(format,x[i * sliceStride + j * rowStride + k]) + "\t");        }      }      System.out.println();    }  }  System.out.println();}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  protected Body(World world,org.jbox2d.dynamics.Body body){  this.world=world;  this.body=body;}  }
class C{  public void addTestFileLocation(String testFileDescriptor){  testFilesLocations.add(testFileDescriptor);}  }
class C{  public boolean isUninterestingStreamEscape(Stream stream){  return uninterestingStreamEscapeSet.contains(stream);}  }
class C{  public JsonArray(){  values=new Vector<JsonValue>();}  }
class C{  public ValidationException(String message,ValidationExceptionBean bean,Throwable cause){  super(message,bean,cause);  this.bean=bean;}  }
class C{  private Long determineServiceKeyFromRequestParam(){  Map<String,String> params=ui.getExternalContext().getRequestParameterMap();  String keyFromUrlParam=params.get(Constants.REQ_PARAM_SELECTED_SERVICE_KEY);  if (!ADMStringUtils.isBlank(keyFromUrlParam)) {    try {      return Long.valueOf(keyFromUrlParam);    } catch (    NumberFormatException e) {      setErrorAttribute(BaseBean.ERROR_SERVICE_INVALID_KEY);      return null;    }  } else   return null;}  }
class C{  @NoInline @Entrypoint public static void raiseNullPointerException(){  throw new java.lang.NullPointerException();}  }
class C{  public Name toName(Names names){  return names.fromUtf(elems,0,length);}  }
class C{  public static ResolveUserToken parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  ResolveUserToken object=new ResolveUserToken();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"resolveUserToken".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (ResolveUserToken)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","subscriptionKey").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setSubscriptionKey(org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));      reader.next();    } else {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","sessionId").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setSessionId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","userToken").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setUserToken(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public void test3b(){  final JPanel panel=new JPanel(new GridLayoutManager(2,3,new Insets(0,0,0,0),1000,0));  final JButton btn1=new JButton();  btn1.setPreferredSize(new Dimension(100,20));  final JButton btn2=new JButton();  btn2.setPreferredSize(new Dimension(100,20));  final JButton btn3=new JButton();  btn3.setPreferredSize(new Dimension(100,20));  panel.add(btn1,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  panel.add(btn2,new GridConstraints(0,1,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  panel.add(btn3,new GridConstraints(1,0,1,2,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  final Dimension preferredSize=panel.getPreferredSize();  assertEquals(1200,preferredSize.width);  panel.setSize(panel.getPreferredSize());  panel.doLayout();}  }
class C{  public RoundBorder shadowSpread(int shadowSpread){  this.shadowSpread=shadowSpread;  return this;}  }
class C{  public void verCompresion(){  String[] formatos=ImageCodec.getDecoderNames(is);  System.out.println("Numero de compresores posibles: " + formatos.length);  for (int i=0; i < formatos.length; i++) {    System.out.println("    Formato " + i + " : "+ formatos[i]);  }  System.out.println("\n");}  }
class C{  private void insertNewDriveFiles() throws IOException {  Cursor cursor=null;  try {    cursor=myTracksProviderUtils.getTrackCursor(SyncUtils.NO_DRIVE_ID_TRACKS_QUERY,null,null);    long recordingTrackId=PreferencesUtils.getLong(context,R.string.recording_track_id_key);    if (cursor != null && cursor.moveToFirst()) {      do {        Track track=myTracksProviderUtils.createTrack(cursor);        if (track.getId() == recordingTrackId) {          continue;        }        SyncUtils.insertDriveFile(drive,folderId,context,myTracksProviderUtils,track,true,true);      } while (cursor.moveToNext());    }  }  finally {    if (cursor != null) {      cursor.close();    }  }}  }
class C{  public void newArray(final Type type){  int typ;switch (type.getSort()) {case Type.BOOLEAN:    typ=Opcodes.T_BOOLEAN;  break;case Type.CHAR:typ=Opcodes.T_CHAR;break;case Type.BYTE:typ=Opcodes.T_BYTE;break;case Type.SHORT:typ=Opcodes.T_SHORT;break;case Type.INT:typ=Opcodes.T_INT;break;case Type.FLOAT:typ=Opcodes.T_FLOAT;break;case Type.LONG:typ=Opcodes.T_LONG;break;case Type.DOUBLE:typ=Opcodes.T_DOUBLE;break;default :typeInsn(Opcodes.ANEWARRAY,type);return;}mv.visitIntInsn(Opcodes.NEWARRAY,typ);}  }
class C{  public static State valueOf(int value){  State entry=mValueToEnum.get(value);  if (entry != null) {    return entry;  }  throw new IllegalArgumentException("No enum const class " + State.class.getName() + ""+ value+ "!");}  }
class C{  public static Pair<MigrationVersion,String> extractVersionAndDescription(String migrationName,String prefix,String separator,String suffix){  String cleanMigrationName=migrationName.substring(prefix.length(),migrationName.length() - suffix.length());  int descriptionPos=cleanMigrationName.indexOf(separator);  if (descriptionPos < 0) {    throw new CassandraMigrationException("Wrong migration name format: " + migrationName + "(It should look like this: "+ prefix+ "1_2"+ separator+ "Description"+ suffix+ ")");  }  String version=cleanMigrationName.substring(0,descriptionPos);  String description=cleanMigrationName.substring(descriptionPos + separator.length()).replaceAll("_"," ");  return Pair.of(MigrationVersion.fromVersion(version),description);}  }
class C{  public Map<String,Integer> loadIdentifierIdPairs() throws SQLException {  DBTransaction transaction=TransactionPool.get().beginWork();  Map<String,Integer> map=loadIdentifierIdPairs(transaction);  TransactionPool.get().commit(transaction);  return map;}  }
class C{  public CSelectGroupingAction(final JHexView hexView,final String name,final int grouping){  super(name);  this.hexView=Preconditions.checkNotNull(hexView,"IE01427: Hex view argument can't be null");  m_grouping=grouping;}  }
class C{  private EncryptionKey keyForUser(PrincipalName p,int etype,boolean server) throws KrbException {  try {    Integer kvno=null;    if (p.toString().indexOf('/') > 0) {      char[] pass=getPassword(p,server);      if (Character.isDigit(pass[pass.length - 1])) {        kvno=pass[pass.length - 1] - '0';      }    }    return new EncryptionKey(EncryptionKeyDotStringToKey(getPassword(p,server),getSalt(p),null,etype),etype,kvno);  } catch (  KrbException ke) {    throw ke;  }catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public Boolean profanityFilter(){  return profanityFilter;}  }
class C{  @Override public List<ReilInstruction> translate(final ITranslationEnvironment environment,final InstructionType instruction,final List<ITranslationExtension<InstructionType>> extensions) throws InternalTranslationException {  Preconditions.checkNotNull(environment,"Error: Argument environment can't be null");  Preconditions.checkNotNull(instruction,"Error: Argument instruction can't be null");  final String mnemonic=instruction.getMnemonic();  final long instLength=instruction.getLength();  final String normalizedMnemonic=instLength >= 4 ? mnemonic : "THUMB" + mnemonic;  final IInstructionTranslator translator=translators.get(normalizedMnemonic);  if (translators.containsKey(normalizedMnemonic)) {    final ArrayList<ReilInstruction> instructions=new ArrayList<ReilInstruction>();    translator.translate(environment,instruction,instructions);    return instructions;  } else   if (mnemonic == null) {    return new ArrayList<ReilInstruction>();  } else {    return Lists.newArrayList(ReilHelpers.createUnknown(ReilHelpers.toReilAddress(instruction.getAddress()).toLong()));  }}  }
class C{  @Override public double addEstimateBytesAndMaybeBreak(long bytes,String label) throws CircuitBreakingException {  if (memoryBytesLimit == 0) {    circuitBreak(label,bytes);  }  long newUsed;  if (this.memoryBytesLimit == -1) {    newUsed=this.used.addAndGet(bytes);    if (logger.isTraceEnabled()) {      logger.trace("[{}] Adding [{}][{}] to used bytes [new used: [{}], limit: [-1b]]",this.name,new ByteSizeValue(bytes),label,new ByteSizeValue(newUsed));    }  } else {    long currentUsed;    do {      currentUsed=this.used.get();      newUsed=currentUsed + bytes;      long newUsedWithOverhead=(long)(newUsed * overheadConstant);      if (logger.isTraceEnabled()) {        logger.trace("[{}] Adding [{}][{}] to used bytes [new used: [{}], limit: {} [{}], estimate: {} [{}]]",this.name,new ByteSizeValue(bytes),label,new ByteSizeValue(newUsed),memoryBytesLimit,new ByteSizeValue(memoryBytesLimit),newUsedWithOverhead,new ByteSizeValue(newUsedWithOverhead));      }      if (memoryBytesLimit > 0 && newUsedWithOverhead > memoryBytesLimit) {        logger.warn("[{}] New used memory {} [{}] for data of [{}] would be larger than configured breaker: {} [{}], breaking",this.name,newUsedWithOverhead,new ByteSizeValue(newUsedWithOverhead),label,memoryBytesLimit,new ByteSizeValue(memoryBytesLimit));        circuitBreak(label,newUsedWithOverhead);      }    } while (!this.used.compareAndSet(currentUsed,newUsed));  }  try {    parent.checkParentLimit(label);  } catch (  CircuitBreakingException e) {    this.addWithoutBreaking(-bytes);    throw e;  }  return newUsed;}  }
class C{  @Override public int hashCode(){  return rawString.hashCode();}  }
class C{  public WETriangleMesh flipVertexOrder(){  super.flipVertexOrder();  return this;}  }
class C{  public <K,V>void saveToGeode(String regionPath,PairFunction<T,K,V> func,GeodeConnectionConf connConf){  rddf.saveToGeode(regionPath,func,connConf,emptyStrStrMap());}  }
class C{  static void testAccess3(ClassLoader loader){  Class altClass;  try {    altClass=loader.loadClass("Inaccessible3");    System.err.println("ERROR: Inaccessible3 was accessible");  } catch (  ClassNotFoundException cnfe) {    Throwable cause=cnfe.getCause();    if (cause instanceof IllegalAccessError) {      System.out.println("Got expected CNFE/IAE #3");    } else {      System.err.println("Got unexpected CNFE/IAE #3");      cnfe.printStackTrace();    }  }}  }
class C{  public RMIException(VM vm,String className,String methodName,Throwable cause,String stackTrace){  super("While invoking " + className + "."+ methodName+ " in "+ vm,new HokeyException(cause,stackTrace));  this.vm=vm;  this.cause=cause;  this.className=className;  this.methodName=methodName;  this.stackTrace=stackTrace;}  }
class C{  public void putAll(Map<? extends K,? extends V> m){  int numKeysToBeAdded=m.size();  if (numKeysToBeAdded == 0)   return;  if (numKeysToBeAdded > threshold) {    int targetCapacity=(int)(numKeysToBeAdded / loadFactor + 1);    if (targetCapacity > MAXIMUM_CAPACITY)     targetCapacity=MAXIMUM_CAPACITY;    int newCapacity=table.length;    while (newCapacity < targetCapacity)     newCapacity<<=1;    if (newCapacity > table.length)     resize(newCapacity);  }  for (  Map.Entry<? extends K,? extends V> e : m.entrySet())   put(e.getKey(),e.getValue());}  }
class C{  public void update(byte bB){  int nMask=(m_nBlockIndex & 3) << 3;  m_lCount+=8;  m_block[m_nBlockIndex >> 2]&=~(0xff << nMask);  m_block[m_nBlockIndex >> 2]|=(bB & 0xff) << nMask;  m_nBlockIndex++;  if (m_nBlockIndex == 64) {    transform();    m_nBlockIndex=0;  }  ;}  }
class C{  protected boolean isShowingCoordinates(){  return Raptor.getInstance().getPreferences().getBoolean(BOARD_IS_SHOW_COORDINATES);}  }
class C{  public static int parseFullAtomVersion(int fullAtomInt){  return 0x000000FF & (fullAtomInt >> 24);}  }
class C{  public ChartTransferable(JFreeChart chart,int width,int height,boolean cloneData){  this(chart,width,height,0,0,Integer.MAX_VALUE,Integer.MAX_VALUE,true);}  }
class C{  public SyntheticAttribute(ConstPool cp){  super(cp,tag,new byte[0]);}  }
class C{  public synchronized void clear(){  super.clear();  mValue.clear();  initRange();}  }
class C{  public TinyPuzzle(int[] pre){  s=new int[2];  s[0]=pre[0];  s[1]=pre[1];}  }
class C{  public Object clone(){  OpenIntObjectHashMap copy=(OpenIntObjectHashMap)super.clone();  copy.table=(int[])copy.table.clone();  copy.values=(Object[])copy.values.clone();  copy.state=(byte[])copy.state.clone();  return copy;}  }
class C{  public SQLException(String theReason,Throwable theCause){  super(theReason,theCause);}  }
class C{  private void sendFriends(){  List<String> friends=new ArrayList<String>();  friends.addAll(friendStore.getAllFriends());  CleartextFriends friendsMessage=new CleartextFriends((ArrayList<String>)friends);  JSONObject friendsMessageJson=friendsMessage.toJson();  lengthValueWrite(out,friendsMessageJson);}  }
class C{  public Duration plus(Duration duration){  return plus(duration.getSeconds(),duration.getNano());}  }
class C{  public CSearchAction(final Window parent,final IViewContainer container,final IAddress address){  super("Search View");  checkArguments(parent);  Preconditions.checkNotNull(container,"IE01918: Container argument can not be null");  m_parent=parent;  m_parentComponent=null;  m_container=container;  m_address=address;  putValue(MNEMONIC_KEY,(int)"HK_MENU_SEARCH_VIEW".charAt(0));}  }
class C{  @Override public void beginSlice(){  Query<EppResourceIndex> query=query();  if (cursor != null) {    query=query.startAt(cursor);  }  queryIterator=query.iterator();}  }
class C{  public static byte[] decrypt(final SecretKeySpec key,final byte[] iv,final byte[] decodedCipherText) throws GeneralSecurityException {  final Cipher cipher=Cipher.getInstance(AES_MODE);  IvParameterSpec ivSpec=new IvParameterSpec(iv);  cipher.init(Cipher.DECRYPT_MODE,key,ivSpec);  byte[] decryptedBytes=cipher.doFinal(decodedCipherText);  return decryptedBytes;}  }
class C{  public int compareToIgnoreCase(String string){  int o1=offset, o2=string.offset, result;  int end=offset + (count < string.count ? count : string.count);  char c1, c2;  char[] target=string.value;  while (o1 < end) {    if ((c1=value[o1++]) == (c2=target[o2++])) {      continue;    }    c1=Character.toLowerCase(Character.toUpperCase(c1));    c2=Character.toLowerCase(Character.toUpperCase(c2));    if ((result=c1 - c2) != 0) {      return result;    }  }  return count - string.count;}  }
class C{  public static HistoryDTO transformToDto(History history){  if (history == null) {    throw new WebApplicationException("Null entity object cannot be converted to Dto object.",Status.INTERNAL_SERVER_ERROR);  }  HistoryDTO historyDto=new HistoryDTO();  try {    BeanUtils.copyProperties(historyDto,history);    historyDto.setEntityId(history.getEntity());  } catch (  Exception ex) {    throw new WebApplicationException("DTO transformation failed.",Status.INTERNAL_SERVER_ERROR);  }  return historyDto;}  }
class C{  void decomposeFullName(String name,QualifiedNameInfo fullName,String namespace){  if (name == null || name.equals("")) {    return;  }  int classIndex=fullName.getClassNames().size();  int indexColon=name.indexOf(":");  int indexSlash=name.indexOf("/");  if (indexColon == -1 && indexSlash == -1) {    fullName.getClassNames().add(name);    fullName.getClassNameSpaces().add(namespace);  } else {    if (indexColon != -1 && indexSlash != -1) {      if (indexColon < indexSlash) {        fullName.getClassNameSpaces().add(name.substring(0,indexColon));        if (!namespace.equals("public")) {          System.err.println("ERROR: in DecomposeName2, namespace: " + namespace + " was passed in, but namespace: "+ fullName.getClassNameSpaces().get(classIndex)+ " was specified");        }        int iNext=name.indexOf("/");        boolean proceed=true;        if (iNext == -1) {          iNext=name.length();          proceed=false;        }        fullName.getClassNames().add(name.substring(indexColon + 1,iNext));        if (proceed) {          decomposeFullName(name.substring(iNext + 1),fullName);        }      } else       if (indexSlash < indexColon) {        fullName.getClassNames().add(name.substring(0,indexSlash));        fullName.getClassNameSpaces().add(namespace);        decomposeFullName(name.substring(indexSlash + 1),fullName);      }    } else {      if (indexColon != -1) {        fullName.getClassNameSpaces().add(name.substring(0,indexColon));        if (!namespace.equals("public")) {          System.err.println("ERROR: in DecomposeName2, namespace: " + namespace + " was passed in, but namespace: "+ fullName.getClassNameSpaces().get(classIndex)+ " was specified");        }        int iNext=name.indexOf("/");        boolean proceed=true;        if (iNext == -1) {          iNext=name.length();          proceed=false;        }        fullName.getClassNames().add(name.substring(indexColon + 1,iNext));        if (proceed) {          decomposeFullName(name.substring(iNext + 1),fullName);        }      } else       if (indexSlash != -1) {        fullName.getClassNames().add(name.substring(0,indexSlash));        fullName.getClassNameSpaces().add(namespace);        decomposeFullName(name.substring(indexSlash + 1),fullName);      }    }  }}  }
class C{  private void prepareRPConsistencyGroupDataWithStaleVolumes() throws Exception {  String cg2Name="rpCg2";  BlockConsistencyGroup rpCg=createBlockConsistencyGroup(cg2Name,null,Types.RP.name(),true);  rpConsistencyGroupURI2=rpCg.getId();  ProtectionSet cg2ps=createProtectionSet("rpCg2ProtectionSet",projectURI);  List<Volume> rpCg2Volumes=createRpVolumes("rpCg2VolumeA",2,cg2ps,false);  rpCg2Volumes.addAll(createRpVolumes("rpCg2VolumeB",2,cg2ps,false));  addVolumesToBlockConsistencyGroup(rpCg.getId(),rpCg2Volumes);  addVolumesToProtectionSet(cg2ps.getId(),rpCg2Volumes);  URI staleVolumeURI1=URIUtil.createId(Volume.class);  URI staleVolumeURI2=URIUtil.createId(Volume.class);  ProtectionSet ps=_dbClient.queryObject(ProtectionSet.class,cg2ps.getId());  StringSet vols=ps.getVolumes();  vols.add(staleVolumeURI1.toString());  vols.add(staleVolumeURI2.toString());  staleProtectionSetURI2=cg2ps.getId();  staleProtectionSetVolumeURIs.add(staleVolumeURI1.toString());  staleProtectionSetVolumeURIs.add(staleVolumeURI2.toString());  _dbClient.persistObject(ps);}  }
class C{  public int correlationDistance(PCAFilteredResult pca1,PCAFilteredResult pca2,int dimensionality){  double[][] v1=copy(pca1.getEigenvectors());  double[][] v1_strong=copy(pca1.adapatedStrongEigenvectors());  double[][] e1_czech=copy(pca1.selectionMatrixOfStrongEigenvectors());  int lambda1=pca1.getCorrelationDimension();  double[][] v2=copy(pca2.getEigenvectors());  double[][] v2_strong=copy(pca2.adapatedStrongEigenvectors());  double[][] e2_czech=copy(pca2.selectionMatrixOfStrongEigenvectors());  int lambda2=pca2.getCorrelationDimension();  double[][] m1_czech=pca1.dissimilarityMatrix();  for (int i=0; i < v2_strong[0].length; i++) {    double[] v2_i=getCol(v2_strong,i);    double dist=Math.sqrt(squareSum(v2_i) - transposeTimesTimes(v2_i,m1_czech,v2_i));    if (lambda1 < dimensionality && dist > delta) {      adjust(v1,e1_czech,v2_i,lambda1++);      m1_czech=timesTranspose(times(v1,e1_czech),v1);    }  }  double[][] m2_czech=pca2.dissimilarityMatrix();  for (int i=0; i < v1_strong[0].length; i++) {    double[] v1_i=getCol(v1_strong,i);    double dist=Math.sqrt(squareSum(v1_i) - transposeTimesTimes(v1_i,m2_czech,v1_i));    if (lambda2 < dimensionality && dist > delta) {      adjust(v2,e2_czech,v1_i,lambda2++);      m2_czech=timesTranspose(times(v2,e2_czech),v2);    }  }  int correlationDistance=Math.max(lambda1,lambda2);  return correlationDistance;}  }
class C{  public static ContactsFragment newInstance(String param1,String param2){  ContactsFragment fragment=new ContactsFragment();  Bundle args=new Bundle();  args.putString(ARG_PARAM1,param1);  args.putString(ARG_PARAM2,param2);  fragment.setArguments(args);  return fragment;}  }
class C{  public synchronized Iterator rrs(boolean cycle){  return iterator(true,cycle);}  }
class C{  public Boolean isEnabled(){  return enabled;}  }
class C{  public BezierLabelLocator(double relativePosition,double angle,double distance){  this.relativePosition=relativePosition;  this.angle=angle;  this.distance=distance;}  }
class C{  protected double[][] splitCentroid(Cluster<? extends MeanModel> parentCluster,Relation<V> relation){  double[] parentCentroid=parentCluster.getModel().getMean();  double radius=0.;  for (DBIDIter it=parentCluster.getIDs().iter(); it.valid(); it.advance()) {    double d=getDistanceFunction().distance(relation.get(it),DoubleVector.wrap(parentCentroid));    radius=(d > radius) ? d : radius;  }  Random random=rnd.getSingleThreadedRandom();  final int dim=RelationUtil.dimensionality(relation);  double[] randomVector=normalize(MathUtil.randomDoubleArray(dim,random));  timesEquals(randomVector,(.4 + random.nextDouble() * .5) * radius);  double[][] vecs=new double[2][];  vecs[0]=minus(parentCentroid,randomVector);  vecs[1]=plusEquals(randomVector,parentCentroid);  return vecs;}  }
class C{  public void write(final PrintStream stream){  stream.print("time\ttime\tdepartures_all\tarrivals_all\tstuck_all\ten-route_all");  stream.print("\n");  int allEnRoute=0;  for (int i=0; i < this.allModesData.countsDep.length; i++) {    allEnRoute=allEnRoute + this.allModesData.countsDep[i] - this.allModesData.countsArr[i] - this.allModesData.countsStuck[i];    stream.print(Time.writeTime(i * this.binSizeSeconds) + "\t" + i * this.binSizeSeconds);    stream.print("\t" + this.allModesData.countsDep[i] + "\t"+ this.allModesData.countsArr[i]+ "\t"+ this.allModesData.countsStuck[i]+ "\t"+ allEnRoute);    stream.print("\n");  }}  }
class C{  @Override public void onRequestPermissionsResult(int requestCode,@NonNull String[] permissions,@NonNull int[] grantResults){  if (requestCode == REQUEST_READ_CONTACTS) {    if (grantResults.length == 1 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {      populateAutoComplete();    }  }}  }
class C{  private void failTask(Throwable e){  ServiceUtils.logSevere(this,e);  TaskUtils.sendSelfPatch(this,buildPatch(com.vmware.xenon.common.TaskState.TaskStage.FAILED,e));}  }
class C{  public void resetColors(){  canvas.setBackground(backgroundColor);  for (  Object obj : canvas.getLayer().getChildrenReference()) {    if (obj instanceof ScreenElement) {      ((ScreenElement)obj).resetColors();    }  }  repaint();}  }
class C{  public HostAddress(String hostname,String url){  super(url);  this.hostname=hostname;}  }
class C{  protected static BitSet hashToBits(String hash){  try {    BitSet bits=new BitStore();    char[] chars=hash.toLowerCase().toCharArray();    int offset=(chars.length - 1) * 5;    for (int i=0; i < chars.length; i++) {      int value=HASH_CHARS_MAP.get(chars[i]).intValue();      for (int x=0; x < 5; x++) {        bits.set(offset + x,(value & 0x1) == 0x1);        value>>=1;      }      offset-=5;    }    return bits;  } catch (  NullPointerException e) {    throw new IllegalArgumentException("Geohash string contains invalid characters.");  }}  }
class C{  public void initializePackageContents(){  if (isInitialized)   return;  isInitialized=true;  setName(eNAME);  setNsPrefix(eNS_PREFIX);  setNsURI(eNS_URI);  assertionEClass.getESuperTypes().add(this.getPattern());  lineStartEClass.getESuperTypes().add(this.getAssertion());  lineEndEClass.getESuperTypes().add(this.getAssertion());  wordBoundaryEClass.getESuperTypes().add(this.getAssertion());  lookAheadEClass.getESuperTypes().add(this.getAssertion());  patternCharacterEClass.getESuperTypes().add(this.getPattern());  wildcardEClass.getESuperTypes().add(this.getPattern());  atomEscapeEClass.getESuperTypes().add(this.getPattern());  characterClassEscapeSequenceEClass.getESuperTypes().add(this.getAtomEscape());  characterClassEscapeSequenceEClass.getESuperTypes().add(this.getEscapedCharacterClassAtom());  characterEscapeSequenceEClass.getESuperTypes().add(this.getAtomEscape());  characterEscapeSequenceEClass.getESuperTypes().add(this.getEscapedCharacterClassAtom());  controlLetterEscapeSequenceEClass.getESuperTypes().add(this.getAtomEscape());  controlLetterEscapeSequenceEClass.getESuperTypes().add(this.getEscapedCharacterClassAtom());  hexEscapeSequenceEClass.getESuperTypes().add(this.getAtomEscape());  hexEscapeSequenceEClass.getESuperTypes().add(this.getEscapedCharacterClassAtom());  unicodeEscapeSequenceEClass.getESuperTypes().add(this.getAtomEscape());  unicodeEscapeSequenceEClass.getESuperTypes().add(this.getEscapedCharacterClassAtom());  identityEscapeSequenceEClass.getESuperTypes().add(this.getAtomEscape());  identityEscapeSequenceEClass.getESuperTypes().add(this.getEscapedCharacterClassAtom());  decimalEscapeSequenceEClass.getESuperTypes().add(this.getAtomEscape());  decimalEscapeSequenceEClass.getESuperTypes().add(this.getEscapedCharacterClassAtom());  characterClassEClass.getESuperTypes().add(this.getPattern());  characterClassAtomEClass.getESuperTypes().add(this.getCharacterClassElement());  escapedCharacterClassAtomEClass.getESuperTypes().add(this.getCharacterClassAtom());  backspaceEClass.getESuperTypes().add(this.getEscapedCharacterClassAtom());  groupEClass.getESuperTypes().add(this.getPattern());  simpleQuantifierEClass.getESuperTypes().add(this.getQuantifier());  exactQuantifierEClass.getESuperTypes().add(this.getQuantifier());  disjunctionEClass.getESuperTypes().add(this.getPattern());  sequenceEClass.getESuperTypes().add(this.getPattern());  characterClassRangeEClass.getESuperTypes().add(this.getCharacterClassElement());  initEClass(regularExpressionLiteralEClass,RegularExpressionLiteral.class,"RegularExpressionLiteral",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getRegularExpressionLiteral_Body(),this.getRegularExpressionBody(),null,"body",null,0,1,RegularExpressionLiteral.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getRegularExpressionLiteral_Flags(),this.getRegularExpressionFlags(),null,"flags",null,0,1,RegularExpressionLiteral.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(regularExpressionBodyEClass,RegularExpressionBody.class,"RegularExpressionBody",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getRegularExpressionBody_Pattern(),this.getPattern(),null,"pattern",null,0,1,RegularExpressionBody.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(patternEClass,Pattern.class,"Pattern",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getPattern_Quantifier(),this.getQuantifier(),null,"quantifier",null,0,1,Pattern.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(assertionEClass,Assertion.class,"Assertion",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(lineStartEClass,LineStart.class,"LineStart",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(lineEndEClass,LineEnd.class,"LineEnd",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(wordBoundaryEClass,WordBoundary.class,"WordBoundary",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getWordBoundary_Not(),ecorePackage.getEBoolean(),"not",null,0,1,WordBoundary.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(lookAheadEClass,LookAhead.class,"LookAhead",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getLookAhead_Not(),ecorePackage.getEBoolean(),"not",null,0,1,LookAhead.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getLookAhead_Pattern(),this.getPattern(),null,"pattern",null,0,1,LookAhead.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(patternCharacterEClass,PatternCharacter.class,"PatternCharacter",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getPatternCharacter_Value(),ecorePackage.getEString(),"value",null,0,1,PatternCharacter.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(wildcardEClass,Wildcard.class,"Wildcard",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(atomEscapeEClass,AtomEscape.class,"AtomEscape",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(characterClassEscapeSequenceEClass,CharacterClassEscapeSequence.class,"CharacterClassEscapeSequence",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getCharacterClassEscapeSequence_Sequence(),ecorePackage.getEString(),"sequence",null,0,1,CharacterClassEscapeSequence.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(characterEscapeSequenceEClass,CharacterEscapeSequence.class,"CharacterEscapeSequence",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getCharacterEscapeSequence_Sequence(),ecorePackage.getEString(),"sequence",null,0,1,CharacterEscapeSequence.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(controlLetterEscapeSequenceEClass,ControlLetterEscapeSequence.class,"ControlLetterEscapeSequence",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getControlLetterEscapeSequence_Sequence(),ecorePackage.getEString(),"sequence",null,0,1,ControlLetterEscapeSequence.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(hexEscapeSequenceEClass,HexEscapeSequence.class,"HexEscapeSequence",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getHexEscapeSequence_Sequence(),ecorePackage.getEString(),"sequence",null,0,1,HexEscapeSequence.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(unicodeEscapeSequenceEClass,UnicodeEscapeSequence.class,"UnicodeEscapeSequence",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getUnicodeEscapeSequence_Sequence(),ecorePackage.getEString(),"sequence",null,0,1,UnicodeEscapeSequence.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(identityEscapeSequenceEClass,IdentityEscapeSequence.class,"IdentityEscapeSequence",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getIdentityEscapeSequence_Sequence(),ecorePackage.getEString(),"sequence",null,0,1,IdentityEscapeSequence.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(decimalEscapeSequenceEClass,DecimalEscapeSequence.class,"DecimalEscapeSequence",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getDecimalEscapeSequence_Sequence(),ecorePackage.getEString(),"sequence",null,0,1,DecimalEscapeSequence.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(characterClassEClass,CharacterClass.class,"CharacterClass",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getCharacterClass_Negated(),ecorePackage.getEBoolean(),"negated",null,0,1,CharacterClass.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getCharacterClass_Elements(),this.getCharacterClassElement(),null,"elements",null,0,-1,CharacterClass.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(characterClassElementEClass,CharacterClassElement.class,"CharacterClassElement",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(characterClassAtomEClass,CharacterClassAtom.class,"CharacterClassAtom",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getCharacterClassAtom_Character(),ecorePackage.getEString(),"character",null,0,1,CharacterClassAtom.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(escapedCharacterClassAtomEClass,EscapedCharacterClassAtom.class,"EscapedCharacterClassAtom",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(backspaceEClass,Backspace.class,"Backspace",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(groupEClass,Group.class,"Group",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getGroup_NonCapturing(),ecorePackage.getEBoolean(),"nonCapturing",null,0,1,Group.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getGroup_Pattern(),this.getPattern(),null,"pattern",null,0,1,Group.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(quantifierEClass,Quantifier.class,"Quantifier",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getQuantifier_NonGreedy(),ecorePackage.getEBoolean(),"nonGreedy",null,0,1,Quantifier.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(simpleQuantifierEClass,SimpleQuantifier.class,"SimpleQuantifier",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getSimpleQuantifier_Quantifier(),ecorePackage.getEString(),"quantifier",null,0,1,SimpleQuantifier.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(exactQuantifierEClass,ExactQuantifier.class,"ExactQuantifier",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getExactQuantifier_Min(),ecorePackage.getEInt(),"min",null,0,1,ExactQuantifier.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getExactQuantifier_Max(),ecorePackage.getEInt(),"max",null,0,1,ExactQuantifier.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getExactQuantifier_UnboundedMax(),ecorePackage.getEBoolean(),"unboundedMax",null,0,1,ExactQuantifier.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(regularExpressionFlagsEClass,RegularExpressionFlags.class,"RegularExpressionFlags",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getRegularExpressionFlags_Flags(),ecorePackage.getEString(),"flags",null,0,-1,RegularExpressionFlags.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(disjunctionEClass,Disjunction.class,"Disjunction",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getDisjunction_Elements(),this.getPattern(),null,"elements",null,0,-1,Disjunction.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(sequenceEClass,Sequence.class,"Sequence",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getSequence_Elements(),this.getPattern(),null,"elements",null,0,-1,Sequence.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(characterClassRangeEClass,CharacterClassRange.class,"CharacterClassRange",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getCharacterClassRange_Left(),this.getCharacterClassAtom(),null,"left",null,0,1,CharacterClassRange.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getCharacterClassRange_Right(),this.getCharacterClassAtom(),null,"right",null,0,1,CharacterClassRange.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  createResource(eNS_URI);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:15.439 -0500",hash_original_method="2D23A147968127857F47AE9C2F0B0301",hash_generated_method="6B719ED1CA7C5621A0C4F218A60E7CA7") private void processIncomingDataPacket(DatagramPacket packet) throws Exception {  this.peerAddress=packet.getAddress();  int packetLength=packet.getLength();  byte[] bytes=packet.getData();  byte[] msgBytes=new byte[packetLength];  System.arraycopy(bytes,0,msgBytes,0,packetLength);  if (sipStack.isLoggingEnabled()) {    this.sipStack.getStackLogger().logDebug("UDPMessageChannel: processIncomingDataPacket : peerAddress = " + peerAddress.getHostAddress() + "/"+ packet.getPort()+ " Length = "+ packetLength);  }  SIPMessage sipMessage=null;  try {    this.receptionTime=System.currentTimeMillis();    sipMessage=myParser.parseSIPMessage(msgBytes);    myParser=null;  } catch (  ParseException ex) {    myParser=null;    if (sipStack.isLoggingEnabled()) {      this.sipStack.getStackLogger().logDebug("Rejecting message !  " + new String(msgBytes));      this.sipStack.getStackLogger().logDebug("error message " + ex.getMessage());      this.sipStack.getStackLogger().logException(ex);    }    String msgString=new String(msgBytes,0,packetLength);    if (!msgString.startsWith("SIP/") && !msgString.startsWith("ACK ")) {      String badReqRes=createBadReqRes(msgString,ex);      if (badReqRes != null) {        if (sipStack.isLoggingEnabled()) {          sipStack.getStackLogger().logDebug("Sending automatic 400 Bad Request:");          sipStack.getStackLogger().logDebug(badReqRes);        }        try {          this.sendMessage(badReqRes.getBytes(),peerAddress,packet.getPort(),"UDP",false);        } catch (        IOException e) {          this.sipStack.getStackLogger().logException(e);        }      } else {        if (sipStack.isLoggingEnabled()) {          sipStack.getStackLogger().logDebug("Could not formulate automatic 400 Bad Request");        }      }    }    return;  }  if (sipMessage == null) {    if (sipStack.isLoggingEnabled()) {      this.sipStack.getStackLogger().logDebug("Rejecting message !  + Null message parsed.");    }    if (pingBackRecord.get(packet.getAddress().getHostAddress() + ":" + packet.getPort()) == null) {      byte[] retval="\r\n\r\n".getBytes();      DatagramPacket keepalive=new DatagramPacket(retval,0,retval.length,packet.getAddress(),packet.getPort());      ((UDPMessageProcessor)this.messageProcessor).sock.send(keepalive);      this.sipStack.getTimer().schedule(new PingBackTimerTask(packet.getAddress().getHostAddress(),packet.getPort()),1000);    }    return;  }  ViaList viaList=sipMessage.getViaHeaders();  if (sipMessage.getFrom() == null || sipMessage.getTo() == null || sipMessage.getCallId() == null || sipMessage.getCSeq() == null || sipMessage.getViaHeaders() == null) {    String badmsg=new String(msgBytes);    if (sipStack.isLoggingEnabled()) {      this.sipStack.getStackLogger().logError("bad message " + badmsg);      this.sipStack.getStackLogger().logError(">>> Dropped Bad Msg " + "From = " + sipMessage.getFrom() + "To = "+ sipMessage.getTo()+ "CallId = "+ sipMessage.getCallId()+ "CSeq = "+ sipMessage.getCSeq()+ "Via = "+ sipMessage.getViaHeaders());    }    return;  }  if (sipMessage instanceof SIPRequest) {    Via v=(Via)viaList.getFirst();    Hop hop=sipStack.addressResolver.resolveAddress(v.getHop());    this.peerPort=hop.getPort();    this.peerProtocol=v.getTransport();    this.peerPacketSourceAddress=packet.getAddress();    this.peerPacketSourcePort=packet.getPort();    try {      this.peerAddress=packet.getAddress();      boolean hasRPort=v.hasParameter(Via.RPORT);      if (hasRPort || !hop.getHost().equals(this.peerAddress.getHostAddress())) {        v.setParameter(Via.RECEIVED,this.peerAddress.getHostAddress());      }      if (hasRPort) {        v.setParameter(Via.RPORT,Integer.toString(this.peerPacketSourcePort));      }    } catch (    java.text.ParseException ex1) {      InternalErrorHandler.handleException(ex1);    }  } else {    this.peerPacketSourceAddress=packet.getAddress();    this.peerPacketSourcePort=packet.getPort();    this.peerAddress=packet.getAddress();    this.peerPort=packet.getPort();    this.peerProtocol=((Via)viaList.getFirst()).getTransport();  }  this.processMessage(sipMessage);}  }
class C{  private void loadInstanceField(XField instanceField,Instruction obj){  if (RLE_DEBUG) {    System.out.println("[loadInstanceField for field " + instanceField + " in instruction "+ handle);  }  ValueNumberFrame frame=getFrame();  try {    ValueNumber reference=frame.popValue();    AvailableLoad availableLoad=new AvailableLoad(reference,instanceField);    if (RLE_DEBUG) {      System.out.println("[getfield of " + availableLoad + "]");    }    ValueNumber[] loadedValue=frame.getAvailableLoad(availableLoad);    if (loadedValue == null) {      ValueNumber[] inputValueList=new ValueNumber[]{reference};      loadedValue=getOutputValues(inputValueList,getNumWordsProduced(obj));      frame.addAvailableLoad(availableLoad,loadedValue);      if (RLE_DEBUG) {        System.out.println("[Making load available " + availableLoad + " <- "+ vlts(loadedValue)+ "]");      }    } else {      if (RLE_DEBUG) {        System.out.println("[Found available load " + availableLoad + " <- "+ vlts(loadedValue)+ "]");      }    }    pushOutputValues(loadedValue);    if (VERIFY_INTEGRITY) {      checkConsumedAndProducedValues(obj,new ValueNumber[]{reference},loadedValue);    }  } catch (  DataflowAnalysisException e) {    throw new InvalidBytecodeException("Error loading from instance field",e);  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ENTRY_OR_EXIT_ACTION___TYPE_1:    return TYPE_1_EDEFAULT == null ? type_1 != null : !TYPE_1_EDEFAULT.equals(type_1);case UmplePackage.ENTRY_OR_EXIT_ACTION___ANONYMOUS_ENTRY_OR_EXIT_ACTION_11:  return anonymous_entryOrExitAction_1_1 != null && !anonymous_entryOrExitAction_1_1.isEmpty();case UmplePackage.ENTRY_OR_EXIT_ACTION___CODE_1:return CODE_1_EDEFAULT == null ? code_1 != null : !CODE_1_EDEFAULT.equals(code_1);case UmplePackage.ENTRY_OR_EXIT_ACTION___ANONYMOUS_ENTRY_OR_EXIT_ACTION_21:return anonymous_entryOrExitAction_2_1 != null && !anonymous_entryOrExitAction_2_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  @Override public void onClick(View v){  if (v.getId() == R.id.ok) {    Log_OC.d(TAG,"Clicked MOVE, start movement");    new MoveFilesTask().execute();  } else   if (v.getId() == R.id.cancel) {    Log_OC.d(TAG,"Clicked CANCEL, bye");    finish();  } else {    Log_OC.e(TAG,"Clicked phantom button, id: " + v.getId());  }}  }
class C{  public boolean isKwArgsTransit(){  return kwArgsTransit;}  }
class C{  public Element create(String prefix,Document doc){  return new XBLOMDefinitionElement(prefix,(AbstractDocument)doc);}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  @Override public void postSetUp(){  log.info("####POSTSETUP " + getTestName());}  }
class C{  protected void scrollSelf(){  if (mImageList.isEmpty()) {    return;  }  setInAnimation(loadAnimation(R.anim.slide_right_in,1000));  setOutAnimation(loadAnimation(R.anim.slide_left_out,1000));  if (mCurrentPosition < mImageList.size() - 1) {    mCurrentPosition++;    setImageUrl(mImageList.get(mCurrentPosition % mImageList.size()));  } else {    mCurrentPosition=0;    setImageUrl(mImageList.get(mCurrentPosition % mImageList.size()));  }}  }
class C{  public void processFinishedOperator(Operator op){  for (  ProcessListener listener : getListenerListCopy()) {    listener.processFinishedOperator(this.process,op);  }}  }
class C{  private void onWifiP2pPeersChanged(Context context,Intent intent){  Parcelable temp=intent.getParcelableExtra(WifiP2pManager.EXTRA_P2P_DEVICE_LIST);  WifiP2pDeviceList peerDevices=(WifiP2pDeviceList)temp;  boolean foundAnyRangzenPeers=false;  for (  WifiP2pDevice device : peerDevices.getDeviceList()) {    if (device.deviceName != null && device.deviceName.startsWith(RangzenService.RSVP_PREFIX)) {      String bluetoothAddress=device.deviceName.replace(RangzenService.RSVP_PREFIX,"");      Log.i(TAG,"Found Rangzen peer " + device.deviceName + " with address "+ bluetoothAddress);      if (BluetoothSpeaker.looksLikeBluetoothAddress(bluetoothAddress) && !BluetoothSpeaker.isReservedMACAddress(bluetoothAddress)) {        BluetoothDevice bluetoothDevice=mBluetoothSpeaker.getDevice(bluetoothAddress);        if (stopwatch.isStarted()) {          stopwatch.stop();        }        float seconds=stopwatch.getNanoTime() / (float)(1000 * 1000 * 1000);        float ms=stopwatch.getNanoTime() / (float)(1000 * 1000);        Log.i(TAG,"Discovered a peer " + seconds + " seconds after discoverPeers call.");        foundAnyRangzenPeers=true;        if (bluetoothDevice != null) {          Peer peer=getCanonicalPeerByDevice(bluetoothDevice);          Log.d(TAG,"Adding peer " + peer);          mPeerManager.addPeer(peer);        } else {          Log.e(TAG,"Address " + bluetoothAddress + " got a null bluetooth device, not adding as peer.");        }      } else {        Log.w(TAG,"Address from peer doesn't look like BT address or is reserved: " + bluetoothAddress);      }    }  }  if (foundAnyRangzenPeers) {    stopSeekingPeers();    touchLastSeekingTime();  }  Log.v(TAG,"P2P peers changed");}  }
class C{  public List<Map<String,String>> list(Database conn) throws SQLException {  ResultSet rs=null;  Statement statement=conn.createStatement();  List<Map<String,String>> shards=new ArrayList<Map<String,String>>();  try {    rs=statement.executeQuery(ShardTable.SELECT);    while (rs.next()) {      Map<String,String> shard=new HashMap<String,String>();      shard.put(ShardTable.SHARD_ID_COL,rs.getString(ShardTable.SHARD_ID_COL));      shard.put(ShardTable.SHARD_CRIT_COL,Boolean.toString(rs.getBoolean(ShardTable.SHARD_CRIT_COL)));      shard.put(ShardTable.SHARD_MASTER_COL,rs.getString(ShardTable.SHARD_MASTER_COL));      shards.add(shard);    }  }  finally {    statement.close();  }  return shards;}  }
class C{  public DecoratorRule(Token decoratorToken,String version,String currentVersion){  this.decoratorToken=decoratorToken;  fVersion=version;  setSourceVersion(currentVersion);}  }
class C{  public void removed(java.awt.Container cont){  if (killCache) {    Debug.output("DTEDLayer: emptying cache!");    cache=null;  }}  }
class C{  void selectServiceOwnerAndSynchState(Service s,Operation op,boolean isFactorySync){  this.serviceSynchTracker.selectServiceOwnerAndSynchState(s,op,isFactorySync);}  }
class C{  void takeIndexWrapped(){  cycles++;  for (Node o=null, p=head; p != null; ) {    final Itr it=p.get();    final Node next=p.next;    if (it == null || it.takeIndexWrapped()) {      p.clear();      p.next=null;      if (o == null)       head=next; else       o.next=next;    } else {      o=p;    }    p=next;  }  if (head == null)   itrs=null;}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public SIRepidemicModel(String name,Parameter N0Parameter,Parameter growthRateParameter,Parameter tpeakParameter,Parameter gammaParameter,Type units,boolean usingGrowthRate,double minPrevalence){  super(name);  sirepi=new SIRepidemic(units);  this.N0Parameter=N0Parameter;  addVariable(N0Parameter);  N0Parameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,0.0,1));  this.growthRateParameter=growthRateParameter;  addVariable(growthRateParameter);  growthRateParameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,0.0,1));  this.tpeakParameter=tpeakParameter;  addVariable(tpeakParameter);  tpeakParameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,Double.NEGATIVE_INFINITY,1));  this.gammaParameter=gammaParameter;  addVariable(gammaParameter);  gammaParameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,0.0,1));  this.usingGrowthRate=usingGrowthRate;  this.minPrevalence=minPrevalence;  setUnits(units);}  }
class C{  protected String findRemoteFileName(Deployable deployable,String deployableIdentifier,boolean askFromServer){  getLogger().debug("Finding remote file name for deployable " + deployable + " with deployable identifier "+ deployableIdentifier+ " and ask from server "+ askFromServer,this.getClass().getName());  String deployableId=deployableIdentifier;  if (deployableId != null && !deployableId.trim().isEmpty()) {    int identifierExtIndex=deployableId.lastIndexOf(".");    if (identifierExtIndex != -1) {      deployableId=deployableId.substring(0,identifierExtIndex);    }    if (deployable.getType() == DeployableType.WAR) {      deployableId+=".war";    } else     if (deployable.getType() == DeployableType.EAR) {      deployableId+=".ear";    } else     if (deployable.getType() == DeployableType.EJB) {      deployableId+=".jar";    } else     if (deployable.getType() == DeployableType.RAR) {      deployableId+=".rar";    } else {      throw new IllegalArgumentException("Unsupported Deployable type: " + deployable.getType());    }    return deployableId;  }  File localFile=new File(deployable.getFile());  String localFileName=localFile.getName();  if (deployable.getType() == DeployableType.WAR) {    WAR war=(WAR)deployable;    if (war.getContext().isEmpty()) {      localFileName="rootContext.war";    } else {      localFileName=war.getContext() + ".war";    }  } else   if (deployable.getType() == DeployableType.FILE) {    if (localFileName.endsWith(".pom")) {      localFileName=localFileName.substring(0,localFileName.length() - 3) + "xml";    }  }  String result=null;  if (askFromServer) {    MBeanServerConnectionFactory factory=null;    try {      String lookForFile="/deploy/" + localFileName;      factory=getMBeanServerConnectionFactory();      MBeanServerConnection mbsc=factory.getServerConnection(configuration);      RemoteDeployerConfig config=getConfig();      ObjectName serverMBeanName=getServerMBeanName(config.getDomainName(),config.getServerName());      List<String> remoteFiles=(List<String>)mbsc.getAttribute(serverMBeanName,"deployedFiles");      remoteFiles.addAll((List<String>)mbsc.getAttribute(serverMBeanName,"deployableFiles"));      ObjectName deploymentPlanMBean=new ObjectName(config.getDomainName() + ":type=deployment,name=deploymentPlan");      if (!mbsc.queryMBeans(deploymentPlanMBean,null).isEmpty()) {        String[] deploymentPlans=(String[])mbsc.getAttribute(deploymentPlanMBean,"DeploymentPlans");        if (deploymentPlans != null) {          for (          String deploymentPlan : deploymentPlans) {            deploymentPlan=URLDecoder.decode(deploymentPlan,"UTF-8");            remoteFiles.add(deploymentPlan);          }        }      }      for (      String remoteFile : remoteFiles) {        if (remoteFile.replace('\\','/').endsWith(lookForFile)) {          result=remoteFile;          break;        }      }      if (result == null && Boolean.parseBoolean(configuration.getPropertyValue(JonasPropertySet.JONAS_UNDEPLOY_IGNORE_VERSION))) {        StringBuilder localFileNameBuilder=new StringBuilder();        String extension=lookForFile.substring(lookForFile.length() - 4);        String[] elements=localFileName.split("-");        for (        String element : elements) {          localFileNameBuilder.append(element);          if (localFileNameBuilder.length() > 0) {            for (            String remoteFile : remoteFiles) {              if (remoteFile.contains("/deploy/" + localFileNameBuilder) && remoteFile.endsWith(extension)) {                result=remoteFile;              }            }          }        }        if (result != null) {          getLogger().info("Could not find the deployable with the exact name [" + localFileName + "] and "+ JonasPropertySet.JONAS_UNDEPLOY_IGNORE_VERSION+ " is set to true. Action will be done on the deployable: "+ result,this.getClass().getName());        }      }    } catch (    Exception ex) {      throw new ContainerException("Failed looking for deployable" + deployable,ex);    } finally {      if (factory != null) {        factory.destroy();      }    }  } else {    result=localFileName;  }  return result;}  }
class C{  public static HasParentQueryBuilder hasParentQuery(String type,QueryBuilder query){  return new HasParentQueryBuilder(type,query);}  }
class C{  public void testDoTag() throws Exception {  System.out.println("doTag");  ForXmlCommentTag instance=new ForXmlCommentTag();  String value="--><script>alert(0)</script><!--";  String expected="-~><script>alert(0)</script><!-~";  instance.setJspContext(_pageContext);  instance.setValue(value);  instance.doTag();  String results=_response.getContentAsString();  assertEquals(expected,results);}  }
class C{  public static java.awt.Image createClosedFolderImage(){  byte data[]={(byte)71,(byte)73,(byte)70,(byte)56,(byte)57,(byte)97,(byte)18,(byte)0,(byte)15,(byte)0,(byte)247,(byte)0,(byte)0,(byte)99,(byte)99,(byte)99,(byte)156,(byte)156,(byte)99,(byte)206,(byte)206,(byte)99,(byte)239,(byte)231,(byte)115,(byte)247,(byte)239,(byte)132,(byte)247,(byte)247,(byte)247,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)33,(byte)249,(byte)4,(byte)1,(byte)0,(byte)0,(byte)6,(byte)0,(byte)44,(byte)0,(byte)0,(byte)0,(byte)0,(byte)18,(byte)0,(byte)15,(byte)0,(byte)64,(byte)8,(byte)91,(byte)0,(byte)13,(byte)8,(byte)28,(byte)72,(byte)176,(byte)32,(byte)65,(byte)1,(byte)5,(byte)8,(byte)40,(byte)92,(byte)200,(byte)80,(byte)97,(byte)0,(byte)0,(byte)2,(byte)17,(byte)22,(byte)152,(byte)72,(byte)177,(byte)226,(byte)196,(byte)135,(byte)17,(byte)5,(byte)104,(byte)220,(byte)200,(byte)113,(byte)35,(byte)198,(byte)136,(byte)3,(byte)66,(byte)14,(byte)16,(byte)16,(byte)192,(byte)224,(byte)193,(byte)132,(byte)13,(byte)83,(byte)126,(byte)68,(byte)152,(byte)82,(byte)37,(byte)68,(byte)147,(byte)48,(byte)13,(byte)114,(byte)44,(byte)25,(byte)211,(byte)64,(byte)199,(byte)155,(byte)30,(byte)7,(byte)178,(byte)108,(byte)201,(byte)112,(byte)37,(byte)74,(byte)158,(byte)14,(byte)95,(byte)238,(byte)4,(byte)74,(byte)192,(byte)39,(byte)209,(byte)160,(byte)2,(byte)1,(byte)40,(byte)93,(byte)202,(byte)180,(byte)41,(byte)196,(byte)128,(byte)0,(byte)0,(byte)59};  return java.awt.Toolkit.getDefaultToolkit().createImage(data);}  }
class C{  protected boolean updateAssignment(DBIDIter id,V fv,List<? extends ModifiableDBIDs> clusters,WritableIntegerDataStore assignment,double[][] meanshift,int[] changesize,int minIndex){  int cur=assignment.intValue(id);  if (cur == minIndex) {    return false;  }{    clusters.get(minIndex).add(id);    changesize[minIndex]++;    double[] raw=meanshift[minIndex];    for (int j=0; j < fv.getDimensionality(); j++) {      raw[j]+=fv.doubleValue(j);    }  }  if (cur >= 0) {    clusters.get(cur).remove(id);    changesize[cur]--;    double[] raw=meanshift[cur];    for (int j=0; j < fv.getDimensionality(); j++) {      raw[j]-=fv.doubleValue(j);    }  }  assignment.putInt(id,minIndex);  return true;}  }
class C{  private Corpus(String path,TreeBankType treebank,boolean onlyTest,int skipSection,boolean skipBilingual,boolean keepFunctionLabel){  myTreebank=treebank;  boolean dummy=path == null;  keepFunctionLabels=keepFunctionLabel;  if (dummy) {    System.out.println("Loading one dummy sentence into training set only.");    Trees.PennTreeReader reader;    Tree<String> tree;    int exampleNumber=8;    List<String> sentences=new ArrayList<String>();switch (exampleNumber) {case 0:      sentences.add("((S (A x) (C x)))");    sentences.add("((S (E x) (B x)))");  break;case 1:sentences.add("((S (NP (NP (DT The) (JJ complicated) (NN language)) (PP (IN in) (NP (DT the) (JJ huge) (JJ new) (NN law)))) (VP (VBZ has) (VP (VBD muddied) (NP (DT the) (NN fight)))) (. .)))");break;case 2:sentences.add("((S (Z1 (Z2 x) (NNPS x)) (U3 (Uu (A1 (NNP x1) (NNPS x2))))))");sentences.add("((S (K (U2 (Z1 (Z2 x) (NNP x)))) (U7 (NNS x))))");sentences.add("((S (Z1 (NNPS x) (NN x)) (F (CC y) (ZZ z))))");break;case 3:sentences.add("((X (C (B b) (B b)) (F (E (D d)))))");sentences.add("((Y (C (B a) (B a)) (E (D d))))");sentences.add("((X (C (B b) (B b)) (E (D d))))");break;case 4:sentences.add("( (S (SBAR (IN In) (NN order) (S (VP (TO to) (VP (VB strengthen) (NP (NP (JJ cultural) (NN exchange) (CC and) (NN contact)) (PP (IN between) (NP (NP (NP (DT the) (NNS descendents)) (PP (IN of) (NP (DT the) (NNPS Emperors)))) (UCP (PP (IN at) (NP (NN home))) (CC and) (ADVP (RB abroad)))))))))) (, ,) (NP (NNP China)) (VP (MD will) (VP (VB hold) (NP (DT the) (JJ \") (NNP China) (NNP Art) (NNP Festival) (NN \")) (PP (IN in) (NP (NP (NNP Beijing)) (CC and) (NNP Shenzhen))) (ADVP (RB simultaneously)) (PP (IN from) (NP (DT the) (NN 8th))) (PP (TO to) (NP (NP (DT the) (JJ 18th)) (PP (IN of) (NP (NNP December))))) (NP (DT this) (NN year)))) (. .)) )");sentences.add("( (S (PP (IN In) (NP (NP (NN order) (S (VP (TO to) (VP (VB strengthen) (NP (NP (JJ cultural) (NN exchange) (CC and) (NN contact)) (PP (IN between) (NP (NP (DT the) (NNS descendents)) (PP (IN of) (NP (DT the) (NNPS Emperors))) (PP (IN at) (NP (NN home)))))))))) (CC and) (ADVP (RB abroad)))) (, ,) (NP (NNP China)) (VP (MD will) (VP (VB hold) (NP (DT the) (JJ \") (NNP China) (NNP Art) (NNP Festival) (NN \")) (PP (IN in) (NP (NP (NNP Beijing)) (CC and) (NNP Shenzhen))) (ADVP (RB simultaneously)) (PP (IN from) (NP (DT the) (NN 8th))) (PP (TO to) (NP (NP (DT the) (JJ 18th)) (PP (IN of) (NP (NNP December))))) (NP (DT this) (NN year)))) (. .)) )");sentences.add("( (S (PP (IN In) (NP (NN order) (S (VP (TO to) (VP (VB strengthen) (NP (NP (JJ cultural) (NN exchange) (CC and) (NN contact)) (PP (IN between) (NP (NP (DT the) (NNS descendents)) (PP (IN of) (NP (DT the) (NNPS Emperors)))))) (UCP (PP (IN at) (ADVP (RB home))) (CC and) (ADVP (RB abroad)))))))) (, ,) (NP (NNP China)) (VP (MD will) (VP (VB hold) (NP (DT the) (`` \") (NNP China) (NNP Art) (NNP Festival) (NN \")) (PP (IN in) (NP (NNP Beijing) (CC and) (NNP Shenzhen))) (ADVP (RB simultaneously)) (PP (PP (IN from) (NP (DT the) (NN 8th))) (PP (IN to) (NP (DT the) (NN 18th))) (PP (IN of) (NP (NNP December)))) (NP (DT this) (NN year)))) (. .)) )");break;case 5:sentences.add("((X (C (B a) (B a)) (D d)))");sentences.add("((Y (C (B b) (B b)) (E (D d) (D d))))");sentences.add("((Y (C (B b) (B b)) (D d)))");sentences.add("((Y (E (B b) (B b)) (D d)))");sentences.add("((Y (C (B b) (B b)) (D d)))");sentences.add("((Y (C (B b) (B b)) (D d)))");sentences.add("((Y (C (B b) (B b)) (D d)))");sentences.add("((Y (C (B b) (B b)) (D d)))");break;case 6:sentences.add("((Y (C (B @) (B b)) (E (D d) (D e))))");sentences.add("((Y (C (B b) (D b)) (D d)))");sentences.add("((Y (C (B b) (B b)) (D d)))");sentences.add("((Y (U (C (B b) (B b))) (D d)))");sentences.add("((Y (C (B b) (B b)) (D d)))");sentences.add("((Y (C (B b) (B b)) (D d)))");sentences.add("((Y (C (B b) (B b)) (D d)))");sentences.add("((Y (C (B b) (B b)) (D d)))");break;case 7:sentences.add("((X (S (NP (X (PRP I))) (VP like))))");sentences.add("((X (C (U (V (W (B a) (B a))))) (D d)))");sentences.add("((X (Y (Z (V (C (B a) (B a))) (D d)))))");sentences.add("((X (C (B a) (B a)) (D d)))");sentences.add("((Y (C (B b) (B b)) (E (D d) (D d))))");sentences.add("((Y (C (B b) (B b)) (D d)))");sentences.add("((Y (U (C (B b) (B b))) (D d)))");sentences.add("((Y (E (B b) (B b)) (D d)))");sentences.add("((Y (C (B b) (B b)) (D d)))");sentences.add("((Y (C (B b) (B b)) (D d)))");sentences.add("((Y (C (B b) (B b)) (D d)))");sentences.add("((Y (C (B b) (B b)) (D d)))");case 8:sentences.add("((S-SBJ (NP (PRP We)) (VP (VBP 're) (RB about) (VP (TO to) (VP (VB see) (SBAR (IN if) (S (NP (NN advertising)) (VP (VBZ works))))))) (. .)))");break;default :}for (String sentence : sentences) {reader=new Trees.PennTreeReader(new StringReader(sentence));tree=reader.next();Trees.TreeTransformer<String> treeTransformer=(keepFunctionLabels) ? new Trees.FunctionLabelRetainingTreeNormalizer() : new Trees.StandardTreeNormalizer();Tree<String> normalizedTree=treeTransformer.transformTree(tree);tree=normalizedTree;trainTrees.add(tree);devTestTrees.add(tree);validationTrees.add(tree);}} else {try {if (myTreebank == TreeBankType.CHINESE) {System.out.println("Loading CHINESE data!");loadChinese(path,skipBilingual);} else if (myTreebank == TreeBankType.WSJ) {System.out.println("Loading ENGLISH WSJ data!");loadWSJ(path,onlyTest,skipSection);} else if (myTreebank == TreeBankType.GERMAN) {System.out.println("Loading GERMAN data!");loadGerman(path);} else if (myTreebank == TreeBankType.BROWN) {System.out.println("Loading BROWN data!");loadBrown(path);} else if (myTreebank == TreeBankType.SPANISH) {System.out.println("Loading SPANISH data!");loadSpanish(path);} else if (myTreebank == TreeBankType.FRENCH) {System.out.println("Loading FRENCH data!");loadCONLL(path,true);} else if (myTreebank == TreeBankType.CONLL) {System.out.println("Loading CoNLL converted data!");loadCONLL(path,false);} else if (myTreebank == TreeBankType.SINGLEFILE) {System.out.println("Loading data from single file!");loadSingleFile(path);}} catch (Exception e) {System.out.println("Error loading trees!");System.out.println(e.getStackTrace().toString());throw new Error(e.getMessage(),e);}}}  }
class C{  public final synchronized void pause(){  boolean joined=false;  if (paused || !running)   return;  halt(true);  while (!joined) {    try {      thread.join();      joined=true;    } catch (    InterruptedException e) {    }  }  paused=true;}  }
class C{  public boolean hasCostBasis(){  return hasExtension(CostBasis.class);}  }
class C{  @Override public int hashCode(){  if (scanResult == null) {    return 0;  }  return scanResult.hashCode();}  }
class C{  public static String addDateTimeStamp(String filename){  SimpleDateFormat formatter=new SimpleDateFormat(PreferenceManager.getClientPreferences().getStampFormat());  Date current=new Date();  if (filename.lastIndexOf(".") == -1) {    return filename + formatter.format(current);  }  return filename.substring(0,filename.lastIndexOf(".")) + formatter.format(current) + filename.substring(filename.lastIndexOf("."));}  }
class C{  public NemAnnounceResult(final Deserializer deserializer){  super(deserializer);  this.innerTransactionHash=deserializer.readOptionalObject("innerTransactionHash",null);  this.transactionHash=deserializer.readOptionalObject("transactionHash",null);}  }
class C{  public String delete(String request) throws IOException {  HttpDelete httpDelete=new HttpDelete(getBaseURL() + request);  return getResponse(httpDelete);}  }
class C{  public ValueNode localAt(int i){  assert i >= 0 && i < localsSize : "local variable index out of range: " + i;  return values.get(i);}  }
class C{  public ParserTableEntry(String[] mimeTypes,XMLEventParserContext prototypeContext){  for (  String mimeType : mimeTypes) {    this.mimeTypes.add(mimeType);  }  this.prototypeParser=prototypeContext;  try {    prototypeContext.getClass().getConstructor(prototypeContext.getClass());  } catch (  NoSuchMethodException e) {    String message=Logging.getMessage("XML.NoCopyConstructor");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }}  }
class C{  public static void print(boolean[][] a){  int m=a.length;  int n=a[0].length;  StdOut.println(m + " " + n);  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      if (a[i][j])       StdOut.print("1 "); else       StdOut.print("0 ");    }    StdOut.println();  }}  }
class C{  public NotificationChain basicSetTarget(Expression newTarget,NotificationChain msgs){  Expression oldTarget=target;  target=newTarget;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.TAGGED_TEMPLATE_STRING__TARGET,oldTarget,newTarget);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  ApacheHTTPSender(){  HttpClient.class.getName();}  }
class C{  public static final java.lang.String readUTF(java.io.DataInput in) throws java.io.IOException {  return null;}  }
class C{  public SolrQuery addHighlightField(String f){  this.add(HighlightParams.FIELDS,f);  this.set(HighlightParams.HIGHLIGHT,true);  return this;}  }
class C{  public JSONStringer key(String name) throws JSONException {  if (name == null) {    throw new JSONException("Names must be non-null");  }  beforeKey();  string(name);  return this;}  }
class C{  public static ZoneInfo createTourist(String zoneValue,String aliasName,Instant now){  checkAliasName(aliasName);  boolean hideFromTopRanking=true;  Authority voteAuth=Authority.TOURIST;  Authority debateAuth=Authority.TOURIST;  Authority writeAuth=Authority.TOURIST;  return new ZoneInfo(Zone.valueOf(zoneValue),aliasName,THEME_DEFAULT,voteAuth,debateAuth,writeAuth,Collections.emptyList(),hideFromTopRanking,now);}  }
class C{  public Session(String login,Object identifier){  this.login=login;  this.identifier=identifier;}  }
class C{  protected final int transitiveAnyFusion(int mode){  QueueSubscription<R> qs=this.qs;  if (qs != null) {    int m=qs.requestFusion(mode);    if (m != Fuseable.NONE) {      fusionMode=m;    }    return m;  }  return Fuseable.NONE;}  }
class C{  public void updateUserInfo(Bundle userInfo){  mUserInfo=userInfo;  loadChatMessages();}  }
class C{  private WeakReference<Object> newRef(){  return new WeakReference<Object>(new Object());}  }
class C{  public static String dumbQuote(String s){  return "\"" + s.replaceAll("\\\\","\\\\\\\\").replaceAll("\"","\\\\\"") + "\"";}  }
class C{  public boolean isViewshed(){  return (viewshedEnabled);}  }
class C{  public void addTargetEquality(final TypeVariable target,final TypeVariable equivalent,Set<AnnotationMirror> hierarchies){  final Equalities equalities=targetToRecords.get(target).equalities;  final Set<AnnotationMirror> equivalentTops=equalities.targets.get(equivalent);  if (equivalentTops == null) {    equalities.targets.put(equivalent,new HashSet<>(hierarchies));  } else {    equivalentTops.addAll(hierarchies);  }}  }
class C{  public char next(char c) throws JSONException {  char n=this.next();  if (n != c) {    throw this.syntaxError("Expected '" + c + "' and instead saw '"+ n+ "'");  }  return n;}  }
class C{  public static <T>T checkNotNull(T reference,String errorMessageTemplate,Object... errorMessageArgs){  if (reference == null) {    throw new NullPointerException(format(errorMessageTemplate,errorMessageArgs));  }  return reference;}  }
class C{  public ExtensionNamespaceSupport defineJavaNamespace(String ns){  return defineJavaNamespace(ns,ns);}  }
class C{  public boolean isAutoStart(){  return mAutoStart;}  }
class C{  public RestoreSnapshotRequest includeAliases(boolean includeAliases){  this.includeAliases=includeAliases;  return this;}  }
class C{  private String normalizeKML(String kml){  String condenseSpace=kml.replaceAll("\\s+"," ").trim();  String removeRedundantSpace=condenseSpace.replaceAll("> <","><");  return removeRedundantSpace;}  }
class C{  public void test_addAllILjava_util_Collection(){  Collection l=new LinkedList();  for (int i=0; i < 100; i++)   l.add("Test " + i);  Vector v=new Vector();  tVector.addAll(50,l);  for (int i=50; i < 100; i++)   assertTrue("Failed to add all elements",tVector.get(i) == ((List)l).get(i - 50));  v=new Vector();  v.add("one");  int r=0;  try {    v.addAll(3,Arrays.asList(new String[]{"two","three"}));  } catch (  ArrayIndexOutOfBoundsException e) {    r=1;  }catch (  IndexOutOfBoundsException e) {    r=2;  }  assertTrue("Invalid add: " + r,r == 1);  l=new LinkedList();  l.add(null);  l.add("gah");  l.add(null);  tVector.addAll(50,l);  assertNull("Wrong element at position 50--wanted null",tVector.get(50));  assertEquals("Wrong element at position 51--wanted 'gah'","gah",tVector.get(51));  assertNull("Wrong element at position 52--wanted null",tVector.get(52));  try {    tVector.addAll(-5,Arrays.asList(new String[]{"two","three"}));    fail("ArrayIndexOutOfBoundsException expected");  } catch (  ArrayIndexOutOfBoundsException e) {  }  try {    tVector.addAll(tVector.size() + 1,Arrays.asList(new String[]{"two","three"}));    fail("ArrayIndexOutOfBoundsException expected");  } catch (  ArrayIndexOutOfBoundsException e) {  }  try {    tVector.addAll(tVector.size() / 2,null);    fail("NullPointerException expected");  } catch (  NullPointerException e) {  }}  }
class C{  public KeyToGroupMap(){  this("Default Group");}  }
class C{  private void addVNXFailedSubscription(String storageSystemURI){  if (StringUtils.isNotEmpty(storageSystemURI)) {    FAILED_VNXFILE_SUBSCRIPTION.add(storageSystemURI);  }}  }
class C{  public Proposer(ServerCommunicationSystem communication,MessageFactory factory,ServerViewController controller){  this.communication=communication;  this.factory=factory;  this.controller=controller;}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  public int skipPadding(int length) throws IOException {  return skipFully((4 - length) & 3);}  }
class C{  public void stop() throws InterruptedException {  stopped=true;  if (thd != null) {    try {      logger.info("Stopping server thread");      socketService.close();      thd.interrupt();      thd.join();      thd=null;    } catch (    InterruptedException e) {      logger.info("THL stop operation interrupted: " + e);      throw e;    }  }}  }
class C{  @Override public void updateBinaryStream(String columnLabel,InputStream x,int length) throws SQLException {  updateBinaryStream(columnLabel,x,(long)length);}  }
class C{  public void sendTo(final ModPacket packet,final EntityPlayerMP player){  ec.sendTo(getProxyPacket(packet),player);}  }
class C{  @Override protected void writeMetadata(final ObjectOutput out) throws IOException {  super.writeMetadata(out);  out.writeBoolean(readOnly);}  }
class C{  protected void onInsertComplete(int token,Object cookie,Uri uri){}  }
class C{  public static <S,T>TableColumn<S,T> customColumn(String colName,String propName,String tip,Callback<TableColumn<S,T>,TableCell<S,T>> cellFactory){  TableColumn<S,T> col=tableColumn(colName,propName,tip,100,0,true);  col.setCellFactory(cellFactory);  return col;}  }
class C{  public static int ENOTUNIQ(){  return 76;}  }
class C{  public PolarPoint(Angle latitude,Angle longitude,double radius){  if (latitude == null || longitude == null) {    String message=Logging.getMessage("nullValue.LatitudeOrLongitudeIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.latitude=latitude;  this.longitude=longitude;  this.radius=radius;}  }
class C{  private void restoreInitialStatModelOrder(){  model.setOrderedModelList(backupInitialOrderList);}  }
class C{  public List<GroupLocalDeviceDB> loadAllDeepFromCursor(Cursor cursor){  int count=cursor.getCount();  List<GroupLocalDeviceDB> list=new ArrayList<GroupLocalDeviceDB>(count);  if (cursor.moveToFirst()) {    if (identityScope != null) {      identityScope.lock();      identityScope.reserveRoom(count);    }    try {      do {        list.add(loadCurrentDeep(cursor,false));      } while (cursor.moveToNext());    }  finally {      if (identityScope != null) {        identityScope.unlock();      }    }  }  return list;}  }
class C{  protected boolean hasReturnUpdate(){  return isAnnotationPresent(ReturnUpdate.class);}  }
class C{  public void putClient(LaunchConfiguration lc,DevModeServiceClient client){  assert (lc != null);  assert (client != null);synchronized (mapLock) {    assert (!launchConfigurationToDevModeClient.containsKey(lc));    launchConfigurationToDevModeClient.put(lc,client);  }}  }
class C{  public static double staticNextDouble(double p){synchronized (shared) {    return shared.nextDouble(p);  }}  }
class C{  public boolean equals(terminal_set other){  if (other == null)   return false; else   return _elements.equals(other._elements);}  }
class C{  public boolean isCheckBox(){  return emblem instanceof CheckBox;}  }
class C{  protected void saveListFile(ArrayList<Entity> unitList){  saveListFile(unitList,client.getLocalPlayer().getName());}  }
class C{  protected OutputStream writeTempOutputFile(T stitchedFileMetaData) throws IOException, BlockNotFoundException {  OutputStream outputStream=getOutputStream(tempOutFilePath);  try {    for (    StitchBlock outputBlock : stitchedFileMetaData.getStitchBlocksList()) {      outputBlock.writeTo(appFS,blocksDirectoryPath,outputStream);    }  }  finally {    outputStream.close();  }  return outputStream;}  }
class C{  public PcpMmvWriter(File file,IdentifierSourceSet identifierSources){  this(new FileByteBufferFactory(file),identifierSources);  this.file=file;}  }
class C{  public static int dp2px(Context context,float dpValue){  final float scale=context.getResources().getDisplayMetrics().density;  return (int)(dpValue * scale + 0.5f);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:43.697 -0500",hash_original_method="1231AB171DBB37761A49B7E20056B86A",hash_generated_method="A09497D8BB6CEB4CDD6BC9CD1E65DB77") private void readPendingOperationsLocked(){  if (DEBUG_FILE)   Log.v(TAG,"Reading " + mPendingFile.getBaseFile());  try {    byte[] data=mPendingFile.readFully();    Parcel in=Parcel.obtain();    in.unmarshall(data,0,data.length);    in.setDataPosition(0);    final int SIZE=in.dataSize();    while (in.dataPosition() < SIZE) {      int version=in.readInt();      if (version != PENDING_OPERATION_VERSION && version != 1) {        Log.w(TAG,"Unknown pending operation version " + version + "; dropping all ops");        break;      }      int authorityId=in.readInt();      int syncSource=in.readInt();      byte[] flatExtras=in.createByteArray();      boolean expedited;      if (version == PENDING_OPERATION_VERSION) {        expedited=in.readInt() != 0;      } else {        expedited=false;      }      AuthorityInfo authority=mAuthorities.get(authorityId);      if (authority != null) {        Bundle extras;        if (flatExtras != null) {          extras=unflattenBundle(flatExtras);        } else {          extras=new Bundle();        }        PendingOperation op=new PendingOperation(authority.account,syncSource,authority.authority,extras,expedited);        op.authorityId=authorityId;        op.flatExtras=flatExtras;        if (DEBUG_FILE)         Log.v(TAG,"Adding pending op: account=" + op.account + " auth="+ op.authority+ " src="+ op.syncSource+ " expedited="+ op.expedited+ " extras="+ op.extras);        mPendingOperations.add(op);      }    }  } catch (  java.io.IOException e) {    Log.i(TAG,"No initial pending operations");  }}  }
class C{  public void rotateImageView(){  editableImage.rotateOriginalImage(90);  editableImage.getBox().setX1(0);  editableImage.getBox().setY1(0);  editableImage.getBox().setX2(editableImage.getActualSize()[0]);  editableImage.getBox().setY2(editableImage.getActualSize()[1]);  selectionView.setBoxSize(editableImage,editableImage.getBox(),editableImage.getViewWidth(),editableImage.getViewHeight());  imageView.setImageBitmap(editableImage.getOriginalImage());}  }
class C{  public void trapFieldWrite(String name,Object value){  Class jc=getJavaClass();  try {    jc.getField(name).set(null,value);  } catch (  NoSuchFieldException e) {    throw new RuntimeException(e.toString());  }catch (  IllegalAccessException e) {    throw new RuntimeException(e.toString());  }}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public CharStreamConsumer(InputStream stream) throws UnsupportedEncodingException {  this(stream,DEFAULT_CHARSET);}  }
class C{  private void loadChallenge(){  Bundle fragmentArguments=new Bundle();  fragmentArguments.putLong(KEY_CHALLENGE_ID,mCurrentChallenge.getId());  FragmentTransaction transaction=getSupportFragmentManager().beginTransaction();  transaction.disallowAddToBackStack();  mQuestionText.setText(mCurrentChallenge.getQuestion());  AnswerFragment fragment=mAnswerFragmentFactory.createFragmentForType(mCurrentChallenge.getChallengeType());  fragment.setArguments(fragmentArguments);  transaction.replace(R.id.challenge_fragment,fragment,"" + mCurrentChallenge.getChallengeType());  transaction.commit();  getSupportFragmentManager().executePendingTransactions();  initializeMetaData();}  }
class C{  public String toString(){  long sysTime=this.exitingTime - this.enteringTime;  StringBuilder b=new StringBuilder();  b.append("\n[\tARTICLEID:       \t");  b.append(articleId);  b.append("\r\n\tARTICLENAME:       \t");  b.append(articleName);  b.append("\r\n\r\n\tNUMBER REVISIONS:\t[");  b.append(this.revisionCounter);  b.append(" + ");  b.append(this.ignoredRevisionsCounter);  b.append(" = ");  b.append(this.readRevisionCounter);  b.append("]\r\n\tNUMBER DIFFPARTS:\t");  b.append(this.diffPartCounter);  b.append("\r\n\r\n\tSYSTEM TIME:     \t[ 100% ]\t");  b.append(Time.toClock(sysTime));  b.append("\r\n\tREADING TIME:    \t[");  b.append(MathUtilities.percentFrom(this.processingTimeRead,sysTime));  b.append("]\t");  b.append(Time.toClock(this.processingTimeRead));  b.append("\r\n\tDIFFING TIME:    \t[");  b.append(MathUtilities.percentFrom(this.processingTimeDiff,sysTime));  b.append("]\t");  b.append(Time.toClock(this.processingTimeDiff));  b.append("\r\n\tENCODING TIME:   \t[");  b.append(MathUtilities.percentFrom(this.processingTimeSQL,sysTime));  b.append("]\t");  b.append(Time.toClock(this.processingTimeSQL));  b.append("\r\n\r\n\tORIGINAL SIZE:   \t[ 100% ]\t");  b.append(this.originalSize);  b.append("\r\n\tDIFFED SIZE:     \t[");  b.append(MathUtilities.percentFrom(this.diffedSize,this.originalSize));  b.append("]\t");  b.append(this.diffedSize);  b.append("\r\n\tENCODED SIZE:    \t[");  b.append(MathUtilities.percentFrom(this.encodedSize,this.originalSize));  b.append("]\t");  b.append(this.encodedSize);  b.append("\r\n\tENCODED UNCOMPRESSED SIZE:    \t[");  b.append(MathUtilities.percentFrom(this.encodedSQLSize,this.originalSize));  b.append("]\t");  b.append(this.encodedSQLSize);  b.append("\r\n]\r\n");  return b.toString();}  }
class C{  private MethodCoverageMap(){  this.classMap=new MultiMap<>();  this.counterMap=new HashMap<>();}  }
class C{  public void loadSound(int resourceId){  int soundId=mSoundPool.load(mAppContext,resourceId,1);  mResourceToSoundId.put(resourceId,soundId);}  }
class C{  public String retrieveRequestTokenUrl() throws Exception {  return provider.retrieveRequestToken(consumer,callbackUrl);}  }
class C{  private static String encode(final String s){  if (s == null)   return encode("null");  return s;}  }
class C{  public static String toString(Object object,ToStringStyle style,boolean outputTransients,boolean outputStatics){  return toString(object,style,outputTransients,outputStatics,null);}  }
class C{  public void testMergeAll(){  ((MergeInfrequentNominalValues)m_Filter).setMinimumFrequency(100);  ((MergeInfrequentNominalValues)m_Filter).setInvertSelection(true);  Instances result=useFilter();  assertEquals(m_Instances.numAttributes(),result.numAttributes());  assertEquals(m_Instances.numInstances(),result.numInstances());  assertEquals(1,result.attribute(1).numValues());  assertEquals(1,result.attribute(4).numValues());}  }
class C{  protected ReactActivityDelegate createReactActivityDelegate(){  return new ReactActivityDelegate(this,getMainComponentName());}  }
class C{  public void refreshTrustStore() throws Exception {  try {    MBeanServer mBeanServer=ManagementFactory.getPlatformMBeanServer();    Set names=mBeanServer.queryNames(new ObjectName("*:*"),null);    Iterator it=names.iterator();    while (it.hasNext()) {      ObjectName oname=(ObjectName)it.next();      MBeanInfo minfo=mBeanServer.getMBeanInfo(oname);      String mBeanInfoClass=minfo.getClassName();      boolean condition="org.apache.catalina.mbeans.ConnectorMBean".equals(mBeanInfoClass) || "org.mortbay.jetty.security.SslSocketConnector".equals(mBeanInfoClass) || "org.eclipse.jetty.server.ssl.SslSocketConnector".equals(mBeanInfoClass);      if (condition) {        String protocol=(String)mBeanServer.getAttribute(oname,"protocol");        if (protocol.toLowerCase().startsWith("http")) {          boolean isSecure=((mBeanServer.getAttribute(oname,"secure") != null) && (mBeanServer.getAttribute(oname,"secure").toString().equalsIgnoreCase("true")));          boolean isSchemeHTTPS=((mBeanServer.getAttribute(oname,"scheme") != null) && (mBeanServer.getAttribute(oname,"scheme").toString().equalsIgnoreCase("https")));          if (isSecure && isSchemeHTTPS) {            log.debug("Restarting SSL Connector on port " + (Object)mBeanServer.getAttribute(oname,"port"));            Object params[]={};            String signature[]={};            mBeanServer.invoke(oname,"stop",params,signature);            mBeanServer.invoke(oname,"start",params,signature);          }        }      }    }  } catch (  Exception e) {    log.debug("Did not restart SSL Connector: " + e);    throw e;  }}  }
class C{  public RangeQueryBuilder to(long to){  this.to=to;  return this;}  }
class C{  private List<Usage> createUsages(Context context){  if (usages != null) {    return usages;  }  TypeToken<List<Usage>> token=new TypeToken<List<Usage>>(){  };  List<Usage> initialUsages=JsonUtils.parseJsonFile(context,"app_usages.json",token);  for (  Usage usage : initialUsages) {    int resId=context.getResources().getIdentifier(usage.getImageName(),"drawable",context.getPackageName());    usage.setUsageImage(resId);    usage.setSeekBarProgress((int)((usage.getUsed() * 100) / usage.getLimit()));  }  usages=initialUsages;  return usages;}  }
class C{  public String toString(boolean omitFinalDot){  int labels=labels();  if (labels == 0)   return "@"; else   if (labels == 1 && name[offset(0)] == 0)   return ".";  StringBuffer sb=new StringBuffer();  for (int i=0, pos=offset(0); i < labels; i++) {    int len=name[pos];    if (len > MAXLABEL)     throw new IllegalStateException("invalid label");    if (len == 0) {      if (!omitFinalDot)       sb.append('.');      break;    }    if (i > 0)     sb.append('.');    sb.append(byteString(name,pos));    pos+=(1 + len);  }  return sb.toString();}  }
class C{  private boolean matchesMobile3gLower(NetworkIdentity ident){  ensureSubtypeAvailable();  if (ident.mType == TYPE_WIMAX) {    return false;  } else   if (matchesMobile(ident)) {switch (getNetworkClass(ident.mSubType)) {case NETWORK_CLASS_UNKNOWN:case NETWORK_CLASS_2_G:case NETWORK_CLASS_3_G:      return true;  }}return false;}  }
class C{  public void remove(){  throw new UnsupportedOperationException();}  }
class C{  private List<MetadataIndex> extractIndexes(DrbNode productNode,DrbCortexItemClass productClass){  java.util.Collection<String> properties=null;  properties=productClass.listPropertyStrings(METADATA_NAMESPACE + PROPERTY_METADATA_EXTRACTOR,false);  if (properties == null) {    LOGGER.warn("Item \"" + productClass.getLabel() + "\" has no metadata defined.");    return null;  }  List<MetadataIndex> indexes=new ArrayList<MetadataIndex>();  for (  String property : properties) {    property=property.replaceAll("&lt;","<");    property=property.replaceAll("&gt;",">");    Query metadataQuery=null;    try {      metadataQuery=new Query(property);    } catch (    Exception e) {      LOGGER.error("Cannot compile metadata extractor " + "(set debug mode to see details)",e);      if (LOGGER.isDebugEnabled()) {        LOGGER.debug(property);      }      throw new RuntimeException("Cannot compile metadata extractor",e);    }    DrbSequence metadataSequence=metadataQuery.evaluate(productNode);    if ((metadataSequence == null) || (metadataSequence.getLength() < 1)) {      continue;    }    for (int iitem=0; iitem < metadataSequence.getLength(); iitem++) {      DrbNode n=(DrbNode)metadataSequence.getItem(iitem);      DrbAttribute name_att=n.getAttribute("name");      Value name_v=null;      if (name_att != null)       name_v=name_att.getValue();      String name=null;      if (name_v != null)       name=name_v.convertTo(Value.STRING_ID).toString();      DrbAttribute type_att=n.getAttribute("type");      Value type_v=null;      if (type_att != null)       type_v=type_att.getValue(); else       type_v=new fr.gael.drb.value.String(MIME_PLAIN_TEXT);      String type=type_v.convertTo(Value.STRING_ID).toString();      DrbAttribute cat_att=n.getAttribute("category");      Value cat_v=null;      if (cat_att != null)       cat_v=cat_att.getValue(); else       cat_v=new fr.gael.drb.value.String("product");      String category=cat_v.convertTo(Value.STRING_ID).toString();      DrbAttribute qry_att=n.getAttribute("queryable");      String queryable=null;      if (qry_att != null) {        Value qry_v=qry_att.getValue();        if (qry_v != null)         queryable=qry_v.convertTo(Value.STRING_ID).toString();      }      String value=null;      if (MIME_APPLICATION_GML.equals(type) && n.hasChild()) {        ByteArrayOutputStream out=new ByteArrayOutputStream();        XmlWriter.writeXML(n.getFirstChild(),out);        value=out.toString();        try {          out.close();        } catch (        IOException e) {          LOGGER.warn("Cannot close stream !",e);        }      } else {        Value value_v=n.getValue();        if (value_v != null) {          value=value_v.convertTo(Value.STRING_ID).toString();          value=value.trim();        }      }      if ((name != null) && (value != null)) {        MetadataIndex index=new MetadataIndex();        index.setName(name);        try {          index.setType(new MimeType(type).toString());        } catch (        MimeTypeParseException e) {          LOGGER.warn("Wrong metatdata extractor mime type in class \"" + productClass.getLabel() + "\" for metadata called \""+ name+ "\".",e);        }        index.setCategory(category);        index.setValue(value);        index.setQueryable(queryable);        indexes.add(index);      } else {        String field_name="";        if (name != null)         field_name=name; else         if (queryable != null)         field_name=queryable; else         if (category != null)         field_name="of category " + category;        LOGGER.warn("Nothing extracted for field " + field_name);      }    }  }  return indexes;}  }
class C{  @Override protected Vec4 geodeticToCartesian(Angle latitude,Angle longitude,double metersElevation){  if (latitude == null || longitude == null) {    String message=Logging.getMessage("nullValue.LatitudeOrLongitudeIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  return this.projection.geographicToCartesian(this,latitude,longitude,metersElevation,this.offsetVector);}  }
class C{  public void reload(boolean loadHeaders){  this.loadHeaders=loadHeaders;  try {    load(file);  } catch (  Exception e) {    Bukkit.getLogger().log(Level.WARNING,"failed to reload file",e);  }}  }
class C{  public CryptoException(String message){  super(message);}  }
class C{  public Node removeChild(Node node){  if (leftChild == node) {    leftChild=null;  } else   if (rightChild == node) {    rightChild=null;  } else {    throw new IllegalArgumentException("Unknown child node");  }  node.parent=null;  return node;}  }
class C{  private final void evaluate(Individual individual) throws OperatorException {  if (individual.getPerformance() == null) {    double[] weights=individual.getWeights();    ExampleSet clone=FeatureOperator.createCleanClone(originalSet,weights);    PerformanceVector performanceVector=operator.executeEvaluationProcess(clone);    individual.setPerformance(performanceVector);  }}  }
class C{  public ModelConverter scale(double x,double y,double z){  for (  Box box : this.modelBoxList) {    for (    Quad quad : box.quads) {      for (int i=0; i < 4; i++) {        Vec3UV vec=quad.vertices[i];        vec.x*=x;        vec.y*=y;        vec.z*=z;      }    }  }  return this;}  }
class C{  private XMLAttribute findAttribute(String fullName){  Iterator enm=this.attributes.iterator();  while (enm.hasNext()) {    XMLAttribute attr=(XMLAttribute)enm.next();    if (attr.getFullName().equals(fullName)) {      return attr;    }  }  return null;}  }
class C{  public DatatypeConfigurationException(String message,Throwable cause){  super(message);  initCauseByReflection(cause);}  }
class C{  public void run(){  final FetcherInfo info=FetcherInfo.getFetcherInfo();  try {    fetchloop();  } catch (  Exception e) {    e.printStackTrace();  } finally {synchronized (info.waitList) {      Thread me=Thread.currentThread();      for (int i=0; i < info.fetchers.length; i++) {        if (info.fetchers[i] == me) {          info.fetchers[i]=null;          info.numFetchers--;        }      }    }  }}  }
class C{  private void refresh(final IResource resource){  refresh(new LabelProviderChangedEvent(this,resource));}  }
class C{  public SnapshotException(String message,Throwable cause){  super(message,cause);}  }
class C{  public ChunkSeqReader(){  this(true);}  }
class C{  public void addCoalescingObject(CoalesceConfig object){  mCoalesceObjects.add(object);  mThetaRanges.add(object.spiral.calculateThetaForRadius(object.endProximity));}  }
class C{  @SuppressWarnings("unchecked") public synchronized E lastElement(){  try {    return (E)elementData[elementCount - 1];  } catch (  IndexOutOfBoundsException e) {    throw new NoSuchElementException();  }}  }
class C{  public Position(long commitPosition,long preparePosition){  checkArgument(commitPosition >= preparePosition,"The commit position cannot be less than the prepare position");  this.commitPosition=commitPosition;  this.preparePosition=preparePosition;}  }
class C{  @Singleton public static synchronized void loadDirectories(String firstOption) throws InvalidConfigException {  if (userIdDirectories == null) {    userIdDirectories=new TreeMap<String,String>();    userIdDirectories.put("",(firstOption == null) ? "-" : firstOption);    Properties properties=directoriesProperties();    for (    Map.Entry<Object,Object> entry : properties.entrySet()) {      String key=StringUtils.trim((String)entry.getKey());      String value=StringUtils.trim((String)entry.getValue());      if (key != null && value != null) {        userIdDirectories.put(key,value);      } else {        String error=DIRECTORIES_PROPFILE_PATH + " has been been configured wrong.";        LOG.error(error);        throw new InvalidConfigException(InvalidConfigException.TYPE.INVALID_PROPERTIES_FILE,error);      }    }    if ((userIdDirectories.size() - 1) == 0) {      String error="No licenses could be loaded from " + DIRECTORIES_PROPFILE_PATH + ". Please check configuration.";      LOG.error(error);      throw new InvalidConfigException(InvalidConfigException.TYPE.INVALID_PROPERTIES_FILE,error);    }  }}  }
class C{  public final BytesRef term(){  return term;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:23.329 -0500",hash_original_method="F0897994A34B93CFFEB1B8CB7B346E77",hash_generated_method="A166C0ED27BA383B63976FA2F0D9F0DC") public static boolean isUnicodeIdentifierPart(int codePoint){  return isUnicodeIdentifierPartImpl(codePoint);}  }
class C{  private boolean isSmartMode(){  ITextEditor editor=getTextEditor();  if (editor instanceof ITextEditorExtension3)   return ((ITextEditorExtension3)editor).getInsertMode() == ITextEditorExtension3.SMART_INSERT;  return false;}  }
class C{  public final void addDataScheme(String scheme){  if (mDataSchemes == null)   mDataSchemes=new ArrayList<String>();  if (!mDataSchemes.contains(scheme)) {    mDataSchemes.add(scheme.intern());  }}  }
class C{  public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  MessageResources rsc=getResources(request);  InstructionalOfferingConfigEditForm frm=(InstructionalOfferingConfigEditForm)form;  if (frm.getConfigId() == null || frm.getConfigId() == 0)   sessionContext.checkPermission(frm.getInstrOfferingId(),"InstructionalOffering",Right.InstrOfferingConfigAdd);  if (frm.getConfigId() != null && frm.getConfigId() != 0)   sessionContext.checkPermission(frm.getConfigId(),"InstrOfferingConfig",Right.InstrOfferingConfigEdit);  String html="";  String op=(request.getParameter("op") == null) ? (frm.getOp() == null || frm.getOp().length() == 0) ? (request.getAttribute("op") == null) ? null : request.getAttribute("op").toString() : frm.getOp() : request.getParameter("op");  if (op == null)   op=request.getParameter("hdnOp");  if (op == null || op.trim().length() == 0)   throw new Exception(MSG.errorOperationNotInterpreted() + op);  frm.setOp(op);  LookupTables.setupItypes(request,true);  LookupTables.setupExternalDepts(request,sessionContext.getUser().getCurrentAcademicSessionId());  TreeSet ts=new TreeSet();  for (Iterator it=((TreeSet)request.getAttribute(Department.EXTERNAL_DEPT_ATTR_NAME)).iterator(); it.hasNext(); ) {    Department d=(Department)it.next();    if (sessionContext.hasPermission(d,Right.InstrOfferingConfigEditDepartment))     ts.add(d);  }  request.setAttribute((Department.EXTERNAL_DEPT_ATTR_NAME),ts);  request.setAttribute(SimpleItypeConfig.CONFIGS_ATTR_NAME,html);  search("-1111",new Vector(),true);  if (op.equalsIgnoreCase(rsc.getMessage("op.edit")) || op.equalsIgnoreCase(MSG.actionEditConfiguration())) {    Long configId=null;    try {      configId=new Long(request.getParameter("configId"));    } catch (    Exception e) {      throw new Exception(MSG.errorConfigIDNotValid() + request.getParameter("configId"));    }    sessionContext.checkPermission(configId,"InstrOfferingConfig",Right.InstrOfferingConfigEdit);    loadDetailFromConfig(frm,configId,false);    Vector sp=loadOriginalConfig(frm.getConfigId(),frm);    boolean createAsNew=false;    if (sp != null && sp.size() > 0) {      sessionContext.setAttribute(SimpleItypeConfig.CONFIGS_ATTR_NAME,sp);      html=SchedulingSubpartTableBuilder.buildSubpartsTable(request,sessionContext,frm.getLimit(),configId.toString(),createAsNew,frm.getUnlimited().booleanValue(),frm.getDurationTypeText());      request.setAttribute(SimpleItypeConfig.CONFIGS_ATTR_NAME,html);    } else {      sessionContext.setAttribute(SimpleItypeConfig.CONFIGS_ATTR_NAME,null);      request.setAttribute(SimpleItypeConfig.CONFIGS_ATTR_NAME,null);    }  }  if (op.equals(MSG.actionAddConfiguration())) {    String courseOfferingId=(request.getParameter("uid") == null) ? (request.getAttribute("uid") == null) ? null : request.getAttribute("uid").toString() : request.getParameter("uid");    if (courseOfferingId == null || courseOfferingId.trim().length() == 0)     throw new Exception(MSG.exceptionCourseOfferingIdNeeded());    sessionContext.checkPermission(frm.getInstrOfferingId(),"InstructionalOffering",Right.InstrOfferingConfigAdd);    loadDetailFromCourseOffering(frm,new Long(courseOfferingId),true,false);    sessionContext.setAttribute(SimpleItypeConfig.CONFIGS_ATTR_NAME,null);    request.setAttribute(SimpleItypeConfig.CONFIGS_ATTR_NAME,"");  }  if (op.equalsIgnoreCase(MSG.actionMakeOffered())) {    String courseOfferingId=(request.getParameter("uid") == null) ? (request.getAttribute("uid") == null) ? null : request.getAttribute("uid").toString() : request.getParameter("uid");    if (courseOfferingId == null || courseOfferingId.trim().length() == 0)     throw new Exception(MSG.exceptionCourseOfferingIdNeeded());    loadDetailFromCourseOffering(frm,new Long(courseOfferingId),true,true);    sessionContext.setAttribute(SimpleItypeConfig.CONFIGS_ATTR_NAME,null);    request.setAttribute(SimpleItypeConfig.CONFIGS_ATTR_NAME,"");    if (frm.getConfigId() != null && frm.getConfigId().intValue() > 0) {      Vector sp=loadOriginalConfig(frm.getConfigId(),frm);      if (sp != null && sp.size() > 0) {        sessionContext.setAttribute(SimpleItypeConfig.CONFIGS_ATTR_NAME,sp);        html=SchedulingSubpartTableBuilder.buildSubpartsTable(request,sessionContext,frm.getLimit(),courseOfferingId,false,frm.getUnlimited().booleanValue(),frm.getDurationTypeText());        request.setAttribute(SimpleItypeConfig.CONFIGS_ATTR_NAME,html);      } else {        sessionContext.setAttribute(SimpleItypeConfig.CONFIGS_ATTR_NAME,null);        request.setAttribute(SimpleItypeConfig.CONFIGS_ATTR_NAME,null);      }    }  }  if (op.equals(MSG.actionAddInstructionalTypeToConfig())) {    ActionMessages errors=frm.validate(mapping,request);    if (!errors.isEmpty()) {      html=SchedulingSubpartTableBuilder.buildSubpartsTable(request,sessionContext,frm.getLimit(),frm.getCourseOfferingId(),false,frm.getUnlimited().booleanValue(),frm.getDurationTypeText());      request.setAttribute(SimpleItypeConfig.CONFIGS_ATTR_NAME,html);      saveErrors(request,errors);      return mapping.findForward("displayForm");    }    addInstructionalType(frm);    frm.setItype(Constants.BLANK_OPTION_VALUE);    html=SchedulingSubpartTableBuilder.buildSubpartsTable(request,sessionContext,frm.getLimit(),frm.getCourseOfferingId(),false,frm.getUnlimited().booleanValue(),frm.getDurationTypeText());    request.setAttribute(SimpleItypeConfig.CONFIGS_ATTR_NAME,html);  }  if (op.indexOf(rsc.getMessage("op.shift")) >= 0 || op.equals(rsc.getMessage("op.delete"))) {    int limit=0;    try {      limit=Integer.parseInt(request.getParameter("limit"));    } catch (    Exception e) {      limit=0;    }    frm.setLimit(limit);    processShiftOrDelete(request.getParameter("id"),op);    html=SchedulingSubpartTableBuilder.buildSubpartsTable(request,sessionContext,frm.getLimit(),frm.getCourseOfferingId(),false,frm.getUnlimited().booleanValue(),frm.getDurationTypeText());    request.setAttribute(SimpleItypeConfig.CONFIGS_ATTR_NAME,html);  }  if (op.equalsIgnoreCase("multipleLimits")) {    html=SchedulingSubpartTableBuilder.buildSubpartsTable(request,sessionContext,frm.getLimit(),frm.getCourseOfferingId(),false,frm.getUnlimited().booleanValue(),frm.getDurationTypeText());    request.setAttribute(SimpleItypeConfig.CONFIGS_ATTR_NAME,html);  }  if (op.equals(MSG.actionSaveConfiguration()) || op.equals(MSG.actionUpdateConfiguration())) {    html=SchedulingSubpartTableBuilder.buildSubpartsTable(request,sessionContext,frm.getLimit(),frm.getCourseOfferingId(),false,frm.getUnlimited().booleanValue(),frm.getDurationTypeText());    ActionMessages errors=frm.validate(mapping,request);    if (!errors.isEmpty()) {      html=SchedulingSubpartTableBuilder.buildSubpartsTable(request,sessionContext,frm.getLimit(),frm.getCourseOfferingId(),false,frm.getUnlimited().booleanValue(),frm.getDurationTypeText());      request.setAttribute(SimpleItypeConfig.CONFIGS_ATTR_NAME,html);      saveErrors(request,errors);      return mapping.findForward("displayForm");    }    try {      updateConfig(request,frm);      html=SchedulingSubpartTableBuilder.buildSubpartsTable(request,sessionContext,frm.getLimit(),frm.getCourseOfferingId(),false,frm.getUnlimited().booleanValue(),frm.getDurationTypeText());      request.setAttribute(SimpleItypeConfig.CONFIGS_ATTR_NAME,html);      ActionRedirect redirect=new ActionRedirect(mapping.findForward("instructionalOfferingDetail"));      redirect.addParameter("io",frm.getInstrOfferingId());      redirect.addParameter("op","view");      return redirect;    } catch (    Exception e) {      html=SchedulingSubpartTableBuilder.buildSubpartsTable(request,sessionContext,frm.getLimit(),frm.getCourseOfferingId(),false,frm.getUnlimited().booleanValue(),frm.getDurationTypeText());      request.setAttribute(SimpleItypeConfig.CONFIGS_ATTR_NAME,html);      errors.add("subparts",new ActionMessage("errors.generic","Configuration could not be updated. If possible, split your configuration change into 2 or more separate operations. " + (e.getClass().getName().startsWith("org.hibernate.") ? "" : "Exception: " + e.getMessage())));      saveErrors(request,errors);      return mapping.findForward("displayForm");    }  }  if (op.equals(MSG.actionDeleteConfiguration())) {    sessionContext.checkPermission(frm.getConfigId(),"InstrOfferingConfig",Right.InstrOfferingConfigDelete);    deleteConfig(request,frm);    ActionRedirect redirect=new ActionRedirect(mapping.findForward("instructionalOfferingDetail"));    redirect.addParameter("io",frm.getInstrOfferingId());    redirect.addParameter("op","view");    redirect.addParameter("cfgDelete","1");    return redirect;  }  if (op.equalsIgnoreCase("unlimitedEnrollment")) {    html=SchedulingSubpartTableBuilder.buildSubpartsTable(request,sessionContext,frm.getLimit(),frm.getCourseOfferingId(),false,frm.getUnlimited().booleanValue(),frm.getDurationTypeText());    request.setAttribute(SimpleItypeConfig.CONFIGS_ATTR_NAME,html);    return mapping.findForward("displayForm");  }  return mapping.findForward("displayForm");}  }
class C{  public static String format(final Long date,final String format){  if (date != null) {    return format(new Date(date),format);  } else {    return getCurrent(format);  }}  }
class C{  public boolean isAllFields(){  Object oo=get_Value(COLUMNNAME_AllFields);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override protected void copyStatement(final RyaStatement rstmt,final Context context) throws IOException {  try {    childDao.add(rstmt);  } catch (  final RyaDAOException e) {    throw new IOException("Error inserting statement into child Rya DAO",e);  }}  }
class C{  public OMScalingRaster(double ullat,double ullon,double lrlat,double lrlon,Image ii){  super();  setRenderType(OMGraphic.RENDERTYPE_LATLON);  setColorModel(COLORMODEL_IMAGEICON);  lat=ullat;  lon=ullon;  lat2=lrlat;  lon2=lrlon;  setImage(ii);}  }
class C{  @Override public void before(DerivationState state,int level,int tailNodeIndex){  features.add(computeTransitionFeatures(featureFunctions,state.edge,state.parentNode.i,state.parentNode.j,sourceSentence));}  }
class C{  public void openContextMenu(View view){  mActivity.openContextMenu(view);}  }
class C{  void addAnnotation(@NonNull Annotation annotation){  annotations.put(annotation.annotationType(),annotation);}  }
class C{  private boolean validate(D3DWindowSurfaceData sd){  if (sd.isSurfaceLost()) {    try {      sd.restoreSurface();      Color bg=sd.getPeer().getBackgroundNoSync();      SunGraphics2D sg2d=new SunGraphics2D(sd,bg,bg,null);      sg2d.fillRect(0,0,sd.getBounds().width,sd.getBounds().height);      sg2d.dispose();      sd.markClean();      repaintPeerTarget(sd.getPeer());    } catch (    InvalidPipeException ipe) {      return false;    }  }  return true;}  }
class C{  public static String stripSeparators(String phoneNumber){  if (phoneNumber == null) {    return null;  }  int len=phoneNumber.length();  StringBuilder ret=new StringBuilder(len);  for (int i=0; i < len; i++) {    char c=phoneNumber.charAt(i);    int digit=Character.digit(c,10);    if (digit != -1) {      ret.append(digit);    } else     if (isNonSeparator(c)) {      ret.append(c);    }  }  return ret.toString();}  }
class C{  public void put(String key,T val){  root=put(root,key,val,0);}  }
class C{  public boolean isModified(int rowIndex){  if (changedRows.containsKey(rowIndex)) {    return true;  }  return false;}  }
class C{  public void send(XTraceReport report){  outgoing.offer(report);}  }
class C{  public void populateContextForRequest(HttpServletRequest request,HttpServletResponse response,ServletContext servletContext){  populateContextForRequest(context,this,request,response,servletContext);}  }
class C{  private void createEditorOptions(Composite parent){  Group group=new Group(parent,SWT.NONE);  group.setText(TypeScriptUIMessages.FormatterConfigurationBlock_editorOptions_group_label);  GridLayout layout=new GridLayout();  layout.numColumns=3;  group.setLayout(layout);  group.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));  addCheckBox(group,TypeScriptUIMessages.FormatterPreferencePage_editorOptions_convertTabsToSpaces,PREF_EDITOR_OPTIONS_CONVERT_TABS_TO_SPACES,new String[]{"true","false"},0);  addTextField(group,TypeScriptUIMessages.FormatterPreferencePage_editorOptions_indentSize,PREF_EDITOR_OPTIONS_INDENT_SIZE,0,0);  addTextField(group,TypeScriptUIMessages.FormatterPreferencePage_editorOptions_tabSize,PREF_EDITOR_OPTIONS_TAB_SIZE,0,0);}  }
class C{  public synchronized void addHeader(String name,String value){  String nameLower=name.toLowerCase(Locale.ENGLISH);  List<String> headerValueList=headerNameToValueListMap.get(nameLower);  if (null == headerValueList) {    headerValueList=new ArrayList<>();    headerNameToValueListMap.put(nameLower,headerValueList);  }  headerValueList.add(value);}  }
class C{  public boolean hasMoreTokens(){  return currentCharPointer < length;}  }
class C{  public static Date rollMockClockMillis(long millis){  if (mockTime == null)   throw new IllegalStateException("You need to use setMockClock() first.");  mockTime=new Date(mockTime.getTime() + millis);  return mockTime;}  }
class C{  public PasswordPortal(final String password){  this.requiredPassword=password;}  }
class C{  public DocumentReference_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());}  }
class C{  public long add(T serviceObject){  long index=-1;  int modIdx=-1;  long localSequenceCount=sequenceCounter;  long hardStop=localSequenceCount + data.size;  long minCount=Long.MAX_VALUE;  long minCountIndex=-1;  do {    if (-1 != index) {      long lookupCounts=data.serviceObjectLookupCounts[modIdx];      if (lookupCounts < minCount) {        minCount=lookupCounts;        minCountIndex=index;      }    }    index=++localSequenceCount;    modIdx=data.mask & (int)index;    if (index == hardStop) {      if (shouldGrow) {        data=new ServiceObjectData<T>(data,2);      } else {        index=minCountIndex;        modIdx=data.mask & (int)minCountIndex;        validator.dispose(data.serviceObjectValues[modIdx]);        break;      }    }  } while (null != data.serviceObjectValues[modIdx] && validator.isValid(data.serviceObjectValues[modIdx]));  sequenceCounter=localSequenceCount;  data.serviceObjectKeys[modIdx]=index;  data.serviceObjectValues[modIdx]=serviceObject;  return index;}  }
class C{  public T caseNamedElement(NamedElement object){  return null;}  }
class C{  private void saveVolatiles(Instruction inst){  GenericPhysicalRegisterSet phys=ir.regpool.getPhysicalRegisterSet();  int i=0;  for (Enumeration<Register> e=phys.enumerateVolatileGPRs(); e.hasMoreElements(); i++) {    Register r=e.nextElement();    int location=saveVolatileGPRLocation[i];    Operand M=new StackLocationOperand(true,-location,WORDSIZE);    inst.insertBefore(MIR_Move.create(IA32_MOV,M,new RegisterOperand(r,PRIMITIVE_TYPE_FOR_WORD)));  }}  }
class C{  protected AxisLabelAnimator(){  super();}  }
class C{  private static Iterable<String> append(final Response res,final int length) throws IOException {  final String header="Content-Length";  return new RsWithHeader(new RsWithoutHeader(res,header),header,Integer.toString(length)).head();}  }
class C{  @Override public String toString(){  return getClass().getName() + "[index=" + currentPosition+ ", errorIndex="+ errorIndex+ "]";}  }
class C{  public void addColorsForDataSets(int[] colors,Context c){  for (int i=0; i < colors.length; i++) {    addDataSetColors(new int[]{colors[i]},c);  }}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  GroupFileDao.dropTable(db,ifExists);}  }
class C{  public DerInputStream subStream(int len,boolean do_skip) throws IOException {  DerInputBuffer newbuf=buffer.dup();  newbuf.truncate(len);  if (do_skip) {    buffer.skip(len);  }  return new DerInputStream(newbuf);}  }
class C{  @Override public void writeExternal(ObjectOutput out) throws IOException {  super.writeExternal(out);  out.writeDouble(knnDistance);}  }
class C{  @Deprecated public static int occurrencesOf(String string,char value){  return StringIterate.occurrencesOfChar(string,value);}  }
class C{  protected void createExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws ActionNotAllowedException {  FichasForm fichasForm=(FichasForm)form;  ActionErrors errors=fichasForm.validate(request);  if (errors == null || errors.isEmpty()) {    try {      ServiceRepository services=getServiceRepository(request);      GestionDescripcionBI descripcionService=services.lookupGestionDescripcionBI();      FichaVO fichaVO=fichasForm.populate(new FichaVO());      errors=comprobarDuplicados(descripcionService,request,null,fichaVO,fichasForm.getGuid());      if (errors == null || errors.isEmpty()) {        FmtFichaVO fmtFichaVO=new FmtFichaVO();        fmtFichaVO.setDefinicion(createFmtFicha(request,fichaVO));        List listaUsoObjeto=(List)request.getAttribute(Constants.LISTA_USO_OBJETO);        if (StringUtils.isNotEmpty(fichasForm.getIdFichaOrigen())) {          fichaVO=descripcionService.duplicarFicha(fichasForm.getIdFichaOrigen(),fichaVO);          fichasForm.setIdFichaOrigen(null);        } else {          fichaVO=descripcionService.createFicha(fichaVO,fmtFichaVO,listaUsoObjeto);        }        goReturnPointExecuteLogic(mapping,form,request,response);      } else {        ErrorsTag.saveErrors(request,errors);        setReturnActionFordward(request,mapping.findForward("create-failed"));      }    } catch (    ActionNotAllowedException anae) {      guardarError(request,anae);      setReturnActionFordward(request,mapping.findForward("create-failed"));    }catch (    CampoNotFoundException e) {      errors=getErrors(request,true);      errors.add(Constants.ERROR_GENERAL_MESSAGE,new ActionError("archigest.archivo.campo.descripcion.inexistente",e.getId()));      ErrorsTag.saveErrors(request,errors);      setReturnActionFordward(request,mapping.findForward("create-failed"));    }  } else {    ErrorsTag.saveErrors(request,errors);    setReturnActionFordward(request,mapping.findForward("create-failed"));  }}  }
class C{  public boolean validate(Node nodeSignature,PublicKey publicKey) throws DigitalSignatureValidationException {  DOMValidateContext validationContext=new DOMValidateContext(publicKey,nodeSignature);  return validate(validationContext);}  }
class C{  public void rollback() throws SQLException {  checkClosed();  if (isInGlobalTx()) {    throw SQLError.createSQLException("Can't call rollback() on an XAConnection associated with a global transaction",SQLError.SQL_STATE_INVALID_TRANSACTION_TERMINATION,MysqlErrorNumbers.ER_XA_RMERR,this.exceptionInterceptor);  }  try {    this.mc.rollback();  } catch (  SQLException sqlException) {    checkAndFireConnectionError(sqlException);  }}  }
class C{  ConfigurationError(String msg,Exception x){  super(msg);  this.exception=x;}  }
class C{  public static String load(String configData,Object holder){  com.typesafe.config.Config parsed=ConfigFactory.parseString(configData);  com.typesafe.config.Config config=handle(parsed,holder,"");  if (!parsed.equals(config)) {    return config.root().render(renderOpts);  }  return configData;}  }
class C{  public boolean isHoleTransparent(){  return ((PieChartRenderer)mRenderer).getPaintHole().getXfermode() != null;}  }
class C{  public void reset(){  iExternalUid=null;  super.reset();}  }
class C{  @Deprecated public static <T>Collection<T> dedup(Collection<? extends T> c){  A.notNull(c,"c");  Collection<T> set=new GridLeanSet<>();  set.addAll(c);  return set;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(noderemovechildnode.class,args);}  }
class C{  public Observable<Location> requestLocation(final @NonNull String provider,final @Nullable LocationTime timeOut){  return requestLocation(provider,timeOut,true);}  }
class C{  final void putShort(int offset,short value){  unsafe.putShort(offset + address,value);}  }
class C{  private static Object castResult(Object result){  if (result == null) {    return null;  }  JsonNode node=JSONHelper.readJsonNode(result.toString());  return JSONHelper.transformPreserveNull(node.get("result"));}  }
class C{  @Override public void onDetachedFromRecyclerView(RecyclerView recyclerView){  mFastAdapter.onDetachedFromRecyclerView(recyclerView);}  }
class C{  @Override public IMqttToken subscribe(String topic,int qos,Object userContext,IMqttActionListener callback) throws MqttException {  IMqttToken token=new MqttTokenAndroid(this,userContext,callback,new String[]{topic});  String activityToken=storeToken(token);  mqttService.subscribe(clientHandle,topic,qos,null,activityToken);  return token;}  }
class C{  private ArrayList<Individuum> initialPopulation(int popsize){  ArrayList<Individuum> population=new ArrayList<>(popsize);  for (int i=0; i < popsize; i++) {    short[] gene=new short[dim];    Arrays.fill(gene,DONT_CARE);    int countDim=k;    while (countDim > 0) {      int z=random.nextInt(dim);      if (gene[z] != DONT_CARE) {        continue;      }      gene[z]=(short)(random.nextInt(phi) + GENE_OFFSET);      countDim--;    }    population.add(makeIndividuum(gene));  }  return population;}  }
class C{  private void doTest(){  final PsiFile file=myFixture.configureByFile(getTestName(true) + '.' + CommandLineFileType.EXTENSION);  Assert.assertSame("Bad file type!",CommandLineFile.class,file.getClass());  final CommandLineFile commandLineFile=(CommandLineFile)file;  commandLineFile.setCommands(CommandTestTools.createCommands());  myFixture.enableInspections(CommandLineInspection.class);  myFixture.checkHighlighting();}  }
class C{  public void init(CipherParameters param){  if (param instanceof ParametersWithRandom) {    ParametersWithRandom rParam=(ParametersWithRandom)param;    key=(RSAKeyParameters)rParam.getParameters();    random=rParam.getRandom();  } else {    key=(RSAKeyParameters)param;    random=new SecureRandom();  }  if (key instanceof RSAPrivateCrtKeyParameters) {    throw new IllegalArgumentException("generator requires RSA public key");  }}  }
class C{  public Dimension preferredLayoutSize(Container parent){  Component view=((JViewport)parent).getView();  if (view == null) {    return new Dimension(0,0);  } else   if (view instanceof Scrollable) {    return ((Scrollable)view).getPreferredScrollableViewportSize();  } else {    return view.getPreferredSize();  }}  }
class C{  public void addClassPath(String classPath) throws IOException {  if (classPath == null)   return;  if (!"".equals(_path) && !_path.endsWith(":"))   _path+=":";  _path+=classPath;  Log.debug("Path = " + _path);}  }
class C{  protected void drawBackground(DrawingContext context){  Paint background=getBackground();  if (background != null) {    GraphicsUtils.fillPaintedShape(context.getGraphics(),getBounds(),background,null);  }}  }
class C{  static private MPrintFormatItem[] copyItems(MPrintFormat fromFormat,MPrintFormat toFormat){  s_log.info("From=" + fromFormat);  ArrayList<MPrintFormatItem> list=new ArrayList<MPrintFormatItem>();  MPrintFormatItem[] items=fromFormat.getItems();  for (int i=0; i < items.length; i++) {    MPrintFormatItem pfi=items[i].copyToClient(toFormat.getAD_Client_ID(),toFormat.get_ID());    if (pfi != null)     list.add(pfi);  }  MPrintFormatItem[] retValue=new MPrintFormatItem[list.size()];  list.toArray(retValue);  copyTranslationItems(items,retValue);  return retValue;}  }
class C{  public void ensureColumns(int columns,List<String> excludedVariableNames){  for (int col=getNumColumns(); col < columns; col++) {    int i=0;    String _name;    while (true) {      _name="X" + (++i);      if (getVariable(_name) == null && !excludedVariableNames.contains(_name))       break;    }    ContinuousVariable variable=new ContinuousVariable(_name);    addVariable(variable);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:36.462 -0500",hash_original_method="66D645225B00D19BD8F91A153166EE50",hash_generated_method="FF33893603C1E5E241951E9F37ACAF7E") public static String formatDate(Date date){  return formatDate(date,PATTERN_RFC1123);}  }
class C{  private void clearInterruptsForTaskRun(){  if (runStateOf(ctl.get()) < STOP && Thread.interrupted() && runStateOf(ctl.get()) >= STOP)   Thread.currentThread().interrupt();}  }
class C{  public static <T>T checkNonNull(T t,String msg){  if (t == null)   error(msg);  return t;}  }
class C{  public final Int3D discretize(final Double3D location){  final double discretization=this.discretization;  return new Int3D((int)(location.x / discretization),(int)(location.y / discretization),(int)(location.z / discretization));}  }
class C{  protected boolean isEqualKey(final Object key1,final Object key2){  return key1 == key2 || key1.equals(key2);}  }
class C{  @Nullable public final E first(){  Iterator<E> iterator=myIterable.iterator();  return iterator.hasNext() ? iterator.next() : null;}  }
class C{  @Override public boolean hasSkip(){  return canRead();}  }
class C{  private boolean nodeReached(GuidedEntity entity){  Node previous=path.getNodeList().get(pathPosition);  return ((previous.getX() == entity.getX()) && (previous.getY() == entity.getY()));}  }
class C{  public static void reset(){  map=Misc.createCaseInsensitiveMap();  put(getFIFO());  put(getNLargest());  put(getNSmallest());  put(getNLargest7Days());  put(getNLargest24Hrs());  put(getNSmallest7Days());  put(getNSmallest24Hrs());  put(getSharedFIFO());  put(getSharedNLargest());  put(getSharedNSmallest());  put(getSharedNLargest7Days());  put(getSharedNLargest24Hrs());  put(getSharedNSmallest7Days());  put(getSharedNSmallest24Hrs());}  }
class C{  public GuildRoleCreateHandler(ImplDiscordAPI api){  super(api,true,"GUILD_ROLE_CREATE");}  }
class C{  public static int parse(String[] options,String option,int defValue) throws Exception {  String value=Utils.getOption(option,options);  if (value.isEmpty())   return defValue; else   return Integer.parseInt(value);}  }
class C{  public int capacity(){  return storage.length;}  }
class C{  private void checkDuplicates(String[] source,String[] searchTarget){  for (  String id : source) {    if (search(searchTarget,id)) {      String msg=MessageFormat.format("Document {0} is specified to come before and after {1}.",documentInfo.getDocument().getDocumentURI(),id);      throw new ConfigurationException(msg);    }  }}  }
class C{  protected RModel query(){  StringBuffer whereClause=new StringBuffer();  if (C_AcctSchema_ID != 0)   whereClause.append(RModel.TABLE_ALIAS).append(".C_AcctSchema_ID=").append(C_AcctSchema_ID);  if (PostingType != null && PostingType.length() > 0) {    if (whereClause.length() > 0)     whereClause.append(" AND ");    whereClause.append(RModel.TABLE_ALIAS).append(".PostingType='").append(PostingType).append("'");  }  if (documentQuery) {    if (whereClause.length() > 0)     whereClause.append(" AND ");    whereClause.append(RModel.TABLE_ALIAS).append(".AD_Table_ID=").append(AD_Table_ID).append(" AND ").append(RModel.TABLE_ALIAS).append(".Record_ID=").append(Record_ID);  } else {    Iterator<String> it=whereInfo.values().iterator();    while (it.hasNext()) {      String where=(String)it.next();      if (where != null && where.length() > 0) {        if (whereClause.length() > 0)         whereClause.append(" AND ");        whereClause.append(RModel.TABLE_ALIAS).append(".").append(where);      }    }    if (DateFrom != null || DateTo != null) {      if (whereClause.length() > 0)       whereClause.append(" AND ");      if (DateFrom != null && DateTo != null)       whereClause.append("TRUNC(").append(RModel.TABLE_ALIAS).append(".DateAcct, 'DD') BETWEEN ").append(DB.TO_DATE(DateFrom)).append(" AND ").append(DB.TO_DATE(DateTo)); else       if (DateFrom != null)       whereClause.append("TRUNC(").append(RModel.TABLE_ALIAS).append(".DateAcct, 'DD') >= ").append(DB.TO_DATE(DateFrom)); else       whereClause.append("TRUNC(").append(RModel.TABLE_ALIAS).append(".DateAcct, 'DD') <= ").append(DB.TO_DATE(DateTo));    }    if (AD_Org_ID != 0) {      if (whereClause.length() > 0)       whereClause.append(" AND ");      whereClause.append(RModel.TABLE_ALIAS).append(".AD_Org_ID=").append(AD_Org_ID);    }  }  RModel rm=getRModel();  StringBuffer orderClause=new StringBuffer();  if (sortBy1.length() > 0) {    RColumn col=rm.getRColumn(sortBy1);    if (col != null)     orderClause.append(col.getDisplaySQL()); else     orderClause.append(RModel.TABLE_ALIAS).append(".").append(sortBy1);  }  if (sortBy2.length() > 0) {    if (orderClause.length() > 0)     orderClause.append(",");    RColumn col=rm.getRColumn(sortBy2);    if (col != null)     orderClause.append(col.getDisplaySQL()); else     orderClause.append(RModel.TABLE_ALIAS).append(".").append(sortBy2);  }  if (sortBy3.length() > 0) {    if (orderClause.length() > 0)     orderClause.append(",");    RColumn col=rm.getRColumn(sortBy3);    if (col != null)     orderClause.append(col.getDisplaySQL()); else     orderClause.append(RModel.TABLE_ALIAS).append(".").append(sortBy3);  }  if (sortBy4.length() > 0) {    if (orderClause.length() > 0)     orderClause.append(",");    RColumn col=rm.getRColumn(sortBy4);    if (col != null)     orderClause.append(col.getDisplaySQL()); else     orderClause.append(RModel.TABLE_ALIAS).append(".").append(sortBy4);  }  if (orderClause.length() == 0)   orderClause.append(RModel.TABLE_ALIAS).append(".Fact_Acct_ID");  if (group1 && sortBy1.length() > 0)   rm.setGroup(sortBy1);  if (group2 && sortBy2.length() > 0)   rm.setGroup(sortBy2);  if (group3 && sortBy3.length() > 0)   rm.setGroup(sortBy3);  if (group4 && sortBy4.length() > 0)   rm.setGroup(sortBy4);  rm.setFunction("AmtAcctDr",RModel.FUNCTION_SUM);  rm.setFunction("AmtAcctCr",RModel.FUNCTION_SUM);  rm.query(Env.getCtx(),whereClause.toString(),orderClause.toString());  return rm;}  }
class C{  public boolean start(){  if (log == null)   log=CLogger.getCLogger(getClass());  if (isNotStarted()) {    m_state=STATE_Running;    log.info("starting ...");    return true;  }  String msg="start failed: Not Not Started (" + getState() + ")";  if (m_throwException)   throw new IllegalStateException(msg);  log.warning(msg);  return false;}  }
class C{  public EntityQuery distinct(){  this.distinct=true;  return this;}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  public Validator createValidator(PropertyMap properties){  return new ValidatorImpl(startMode,triggers,properties);}  }
class C{  public Builder(String userName,User user){  super(user);  addSchema(SCHEMA);  if (user != null) {    this.userName=user.userName;    this.name=user.name;    this.displayName=user.displayName;    this.nickName=user.nickName;    this.profileUrl=user.profileUrl;    this.title=user.title;    this.userType=user.userType;    this.preferredLanguage=user.preferredLanguage;    this.locale=user.locale;    this.timezone=user.timezone;    this.active=user.active;    this.password=user.password;    this.emails=MoreObjects.firstNonNull(user.emails,this.emails);    this.phoneNumbers=MoreObjects.firstNonNull(user.phoneNumbers,this.phoneNumbers);    this.ims=MoreObjects.firstNonNull(user.ims,this.ims);    this.photos=MoreObjects.firstNonNull(user.photos,this.photos);    this.addresses=MoreObjects.firstNonNull(user.addresses,this.addresses);    this.groups=MoreObjects.firstNonNull(user.groups,this.groups);    this.entitlements=MoreObjects.firstNonNull(user.entitlements,this.entitlements);    this.roles=MoreObjects.firstNonNull(user.roles,this.roles);    this.x509Certificates=MoreObjects.firstNonNull(user.x509Certificates,this.x509Certificates);    this.extensions=MoreObjects.firstNonNull(user.extensions,this.extensions);  }  if (!Strings.isNullOrEmpty(userName)) {    this.userName=userName;  }}  }
class C{  public void add(Tree tree,boolean includeTips){  if (taxonList == null) {    taxonList=tree;  }  addClades(tree,tree.getRoot(),includeTips);}  }
class C{  private static String generateTestKey(String deviceSerial,String classMethodName){  return String.format("%s#%s",deviceSerial,classMethodName);}  }
class C{  public void subtract(double value,double n){  sum-=value * n;  sumSq-=value * value * n;  count-=n;}  }
class C{  @Override public void clear(){  this.tuple=null;  super.clear();}  }
class C{  public VmPipeConnector(Executor executor){  super(new DefaultVmPipeSessionConfig(),executor);  idleChecker=new IdleStatusChecker();  executeWorker(idleChecker.getNotifyingTask(),"idleStatusChecker");}  }
class C{  @Override public boolean handle(IGame.Phase phase,Vector<Report> vPhaseReport){  if (!this.cares(phase)) {    return true;  }  Report r=new Report(3115);  r.indent();  r.newlines=0;  r.subject=subjectId;  r.add(wtype.getName());  r.messageId=3120;  r.add(target.getDisplayName(),true);  vPhaseReport.addElement(r);  if (toHit.getValue() == TargetRoll.IMPOSSIBLE) {    r=new Report(3135);    r.subject=subjectId;    r.add(toHit.getDesc());    vPhaseReport.addElement(r);    return false;  } else   if (toHit.getValue() == TargetRoll.AUTOMATIC_FAIL) {    r=new Report(3140);    r.newlines=0;    r.subject=subjectId;    r.add(toHit.getDesc());    vPhaseReport.addElement(r);  } else   if (toHit.getValue() == TargetRoll.AUTOMATIC_SUCCESS) {    r=new Report(3145);    r.newlines=0;    r.subject=subjectId;    r.add(toHit.getDesc());    vPhaseReport.addElement(r);  }  addHeat();  Coords coords=target.getPosition();  server.deliverScreen(coords,vPhaseReport);  for (  Entity entity : game.getEntitiesVector(coords)) {    if (entity instanceof FighterSquadron) {      entity.getSubEntities().ifPresent(null);    } else {      ToHitData hexToHit=new ToHitData();      hexToHit.setHitTable(ToHitData.HIT_NORMAL);      HitData hit=entity.rollHitLocation(hexToHit.getHitTable(),ToHitData.SIDE_FRONT);      hit.setCapital(false);      vPhaseReport.addAll(server.damageEntity(entity,hit,attackValue));      server.creditKill(entity,ae);    }  }  return false;}  }
class C{  public Utf8Reader(File file) throws FileNotFoundException {  this(new FileInputStream(file));}  }
class C{  protected void postInstantiate(Object name,Map attributes,Object node){  for (  Closure postInstantiateDelegate : getProxyBuilder().getPostInstantiateDelegates()) {    (postInstantiateDelegate).call(new Object[]{this,attributes,node});  }}  }
class C{  public boolean isCollection(){  return label.isCollection();}  }
class C{  public SetOperation build(Family family){  SetOperation setOp=null;switch (family) {case UNION:{      if (bDstMem == null) {        setOp=UnionImpl.initNewHeapInstance(bLgNomLongs,bSeed,bP,bRF);      } else {        setOp=UnionImpl.initNewDirectInstance(bLgNomLongs,bSeed,bP,bRF,bDstMem);      }      break;    }case INTERSECTION:{    if (bDstMem == null) {      setOp=IntersectionImpl.initNewHeapInstance(bSeed);    } else {      setOp=IntersectionImpl.initNewDirectInstance(bSeed,bDstMem);    }    break;  }case A_NOT_B:{  if (bDstMem == null) {    setOp=new HeapAnotB(bSeed);  } else {    throw new SketchesArgumentException("AnotB is a stateless operation and cannot be persisted.");  }  break;}default :throw new SketchesArgumentException("Given Family cannot be built as a SetOperation: " + family.toString());}return setOp;}  }
class C{  public Dependency removeExclusion(Exclusion exclusion){  requireNonNull(exclusion,"Required not null exclusion");  exclusions().remove(exclusion);  if (!isNew() && exclusions.isEmpty()) {    dependencyElement.removeChild("exclusions");    exclusion.exclusionElement=null;  } else {    exclusion.remove();  }  return this;}  }
class C{  @Override public String toSummaryString(){  return toSummaryString("",false);}  }
class C{  public double theta(){  return Math.atan2(y,x);}  }
class C{  static public void assertEquals(byte expected,byte actual){  assertEquals(null,expected,actual);}  }
class C{  public void add(Video video){  videoList.add(video);  notifyDataSetChanged();}  }
class C{  public final void testGetSaltLength(){  PSSParameterSpec pssps=new PSSParameterSpec(20);  assertEquals(20,pssps.getSaltLength());}  }
class C{  protected void appendClauses(Object... clauses){  for (int i=0; i < clauses.length; i++) {    if (i > 0)     statement.append(", ");    statement.append(clauses[i]);  }}  }
class C{  public boolean isBalanced(){  return isBalanced;}  }
class C{  public boolean hasRel(){  return getRel() != null;}  }
class C{  protected void doNext(){  for (int i=0; i < helpers.length; i++) {    if (!helpers[i].complete) {      helpers[i].create();      return;    }  }  System.exit(0);}  }
class C{  private boolean validate(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  ActionErrors errors=new ActionErrors();  FormatoFichasForm fichasForm=(FormatoFichasForm)form;  if (fichasForm.getNombre() == null || fichasForm.getNombre().trim().equals("")) {    errors.add(Constants.ERROR_REQUIRED,new ActionError(Constants.ERROR_REQUIRED,"Nombre"));    ErrorsTag.saveErrors(request,errors);    setReturnActionFordward(request,mapping.findForward("create-failed"));    return false;  }  if (fichasForm.getDefinicion() == null || fichasForm.getDefinicion().trim().equals("")) {    errors.add(Constants.ERROR_REQUIRED,new ActionError(Constants.ERROR_REQUIRED,"Definicion"));    ErrorsTag.saveErrors(request,errors);    setReturnActionFordward(request,mapping.findForward("create-failed"));    return false;  }  try {    new XmlFacade(fichasForm.getDefinicion(),ConfiguracionArchivoManager.getInstance().getPathXSD(ConfiguracionArchivoManager.XSD_FORMATOS_FICHAS));    DefFmtFichaFactory fmtFichaFactory=DefFmtFichaFactory.getInstance(getServiceClient(request));    DefFmtFicha defFtmFicha=fmtFichaFactory.createDefFmtFicha(fichasForm.getId(),0,fichasForm.getDefinicion());    DefFmtElementoSeccion[] defFmtElementosSeccion=defFtmFicha.getElementos();    HashMap camposDato=new HashMap();    HashMap camposTabla=new HashMap();    if (!ArrayUtils.isEmpty(defFmtElementosSeccion)) {      for (int pos=0; pos < defFmtElementosSeccion.length; pos++) {        DefFmtElementoSeccion defFmtElementoSeccion=defFtmFicha.getElemento(pos);        camposDato.putAll(defFmtElementoSeccion.getIdsElementosCampoDato());        camposTabla.putAll(defFmtElementoSeccion.getIdsElementosTabla());      }    }    ServiceRepository services=getServiceRepository(request);    GestionDescripcionBI descripcionService=services.lookupGestionDescripcionBI();    verificarCodigosCamposDato(descripcionService,camposDato,fichasForm.getIdFicha());    verificarCodigosCamposTabla(descripcionService,camposTabla);    if (!camposDato.isEmpty()) {      Iterator it=camposDato.keySet().iterator();      String idsCamposDato="";      while (it.hasNext()) {        if (!StringUtils.isEmpty(idsCamposDato)) {          idsCamposDato+=", ";        }        String id=(String)it.next();        idsCamposDato+=id;      }      errors.add(ErrorKeys.ERROR_NO_EXISTEN_CAMPOS_TIPO_DATO,new ActionError(ErrorKeys.ERROR_NO_EXISTEN_CAMPOS_TIPO_DATO,idsCamposDato));    }    if (!camposTabla.isEmpty()) {      Iterator it=camposTabla.keySet().iterator();      String idsCamposTabla="";      while (it.hasNext()) {        if (!StringUtils.isEmpty(idsCamposTabla)) {          idsCamposTabla+=", ";        }        String id=(String)it.next();        idsCamposTabla+=id;      }      errors.add(ErrorKeys.ERROR_NO_EXISTEN_CAMPOS_TIPO_TABLA,new ActionError(ErrorKeys.ERROR_NO_EXISTEN_CAMPOS_TIPO_TABLA,idsCamposTabla));    }    if (errors.size() > 0) {      ErrorsTag.saveErrors(request,errors);      setReturnActionFordward(request,mapping.findForward("create-failed"));      return false;    }  } catch (  IllegalArgumentException ex) {    logger.error(ex.getMessage());    errors.add(ErrorKeys.ERROR_XML_DEFINICION_FORMATO_FICHA_NO_BIEN_FORMADO,new ActionError(ErrorKeys.ERROR_XML_DEFINICION_FORMATO_FICHA_NO_BIEN_FORMADO,ex.getMessage()));    ErrorsTag.saveErrors(request,errors);    setReturnActionFordward(request,mapping.findForward("create-failed"));    return false;  }  return true;}  }
class C{  public long skip(long n) throws IOException {  if (_is != null)   return _is.skip(n); else   return -1;}  }
class C{  public ToStringBuilder append(String fieldName,double[] array){  style.append(buffer,fieldName,array,null);  return this;}  }
class C{  public void registerSpaceObject(ISpaceObject object,int dimId){  registerSpaceObject(object,dimId,getNextStationId());  PacketHandler.sendToAll(new PacketSpaceStationInfo(object.getId(),object));}  }
class C{  private void generateXmlProlog(Node.Nodes page){  String omitXmlDecl=pageInfo.getOmitXmlDecl();  if ((omitXmlDecl != null && !JspUtil.booleanValue(omitXmlDecl)) || (omitXmlDecl == null && page.getRoot().isXmlSyntax() && !pageInfo.hasJspRoot() && !ctxt.isTagFile())) {    String cType=pageInfo.getContentType();    String charSet=cType.substring(cType.indexOf("charset=") + 8);    out.printil("out.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"" + charSet + "\\\"?>\\n\");");  }  String doctypeName=pageInfo.getDoctypeName();  if (doctypeName != null) {    String doctypePublic=pageInfo.getDoctypePublic();    String doctypeSystem=pageInfo.getDoctypeSystem();    out.printin("out.write(\"<!DOCTYPE ");    out.print(doctypeName);    if (doctypePublic == null) {      out.print(" SYSTEM \\\"");    } else {      out.print(" PUBLIC \\\"");      out.print(doctypePublic);      out.print("\\\" \\\"");    }    out.print(doctypeSystem);    out.println("\\\">\\n\");");  }}  }
class C{  public float removeScaling(final float scaling){  return scaling / (dpi / 72f);}  }
class C{  public ActiveMQRAMapMessage(final MapMessage message,final ActiveMQRASession session){  super(message,session);  if (ActiveMQRAMapMessage.trace) {    ActiveMQRALogger.LOGGER.trace("constructor(" + message + ", "+ session+ ")");  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  java.io.File dFile=getFile(stack);  FileDownloader downer=FileDownloader.getFileDownloader(dFile);  if (downer != null)   return new Long(downer.getRemoteSize()); else   return new Long(0);}  }
class C{  public void onItemClicked(int position){  final Fragment fragment=getSupportFragmentManager().findFragmentByTag(FRAGMENT_LIST_VIEW);  AbstractDataProvider.Data data=getDataProvider().getItem(position);  if (data.isPinned()) {    data.setPinned(false);    ((SwipeableExampleFragment)fragment).notifyItemChanged(position);  }}  }
class C{  public static Collection<TelephoneType> all(){  return enums.all();}  }
class C{  @SuppressWarnings("unchecked") public final void testRemoveAllValidatorsFromArray(){  Validator<CharSequence> validator1=Validators.notEmpty("foo");  Validator<CharSequence> validator2=Validators.noWhitespace("bar");  Validator<CharSequence> validator3=Validators.number("foo2");  Validator<CharSequence>[] validators1=new Validator[2];  validators1[0]=validator1;  validators1[1]=validator2;  AbstractValidateableViewImplementation abstractValidateableView=new AbstractValidateableViewImplementation(getContext());  abstractValidateableView.addAllValidators(validators1);  abstractValidateableView.addValidator(validator3);  abstractValidateableView.removeAllValidators(validators1);  abstractValidateableView.removeAllValidators(validators1);  Collection<Validator<CharSequence>> validators2=abstractValidateableView.getValidators();  assertEquals(1,validators2.size());  assertEquals(validator3,validators2.iterator().next());}  }
class C{  public DateTickUnit(int unit,int count){  this(unit,count,null);}  }
class C{  static void blur(int[] srcPixels,int[] dstPixels,int width,int height,int radius){  final int windowSize=radius * 2 + 1;  final int radiusPlusOne=radius + 1;  int sumAlpha;  int sumRed;  int sumGreen;  int sumBlue;  int srcIndex=0;  int dstIndex;  int pixel;  int[] sumLookupTable=new int[256 * windowSize];  for (int i=0; i < sumLookupTable.length; i++) {    sumLookupTable[i]=i / windowSize;  }  int[] indexLookupTable=new int[radiusPlusOne];  if (radius < width) {    for (int i=0; i < indexLookupTable.length; i++) {      indexLookupTable[i]=i;    }  } else {    for (int i=0; i < width; i++) {      indexLookupTable[i]=i;    }    for (int i=width; i < indexLookupTable.length; i++) {      indexLookupTable[i]=width - 1;    }  }  for (int y=0; y < height; y++) {    sumAlpha=sumRed=sumGreen=sumBlue=0;    dstIndex=y;    pixel=srcPixels[srcIndex];    sumAlpha+=radiusPlusOne * ((pixel >> 24) & 0xFF);    sumRed+=radiusPlusOne * ((pixel >> 16) & 0xFF);    sumGreen+=radiusPlusOne * ((pixel >> 8) & 0xFF);    sumBlue+=radiusPlusOne * (pixel & 0xFF);    for (int i=1; i <= radius; i++) {      pixel=srcPixels[srcIndex + indexLookupTable[i]];      sumAlpha+=(pixel >> 24) & 0xFF;      sumRed+=(pixel >> 16) & 0xFF;      sumGreen+=(pixel >> 8) & 0xFF;      sumBlue+=pixel & 0xFF;    }    for (int x=0; x < width; x++) {      dstPixels[dstIndex]=sumLookupTable[sumAlpha] << 24 | sumLookupTable[sumRed] << 16 | sumLookupTable[sumGreen] << 8 | sumLookupTable[sumBlue];      dstIndex+=height;      int nextPixelIndex=x + radiusPlusOne;      if (nextPixelIndex >= width) {        nextPixelIndex=width - 1;      }      int previousPixelIndex=x - radius;      if (previousPixelIndex < 0) {        previousPixelIndex=0;      }      int nextPixel=srcPixels[srcIndex + nextPixelIndex];      int previousPixel=srcPixels[srcIndex + previousPixelIndex];      sumAlpha+=(nextPixel >> 24) & 0xFF;      sumAlpha-=(previousPixel >> 24) & 0xFF;      sumRed+=(nextPixel >> 16) & 0xFF;      sumRed-=(previousPixel >> 16) & 0xFF;      sumGreen+=(nextPixel >> 8) & 0xFF;      sumGreen-=(previousPixel >> 8) & 0xFF;      sumBlue+=nextPixel & 0xFF;      sumBlue-=previousPixel & 0xFF;    }    srcIndex+=width;  }}  }
class C{  public static ResultSet pointTable(double x,double y){  GeometryFactory factory=new GeometryFactory();  SimpleResultSet rs=new SimpleResultSet();  rs.addColumn("THE_GEOM",Types.JAVA_OBJECT,"GEOMETRY",0,0);  rs.addRow(factory.createPoint(new Coordinate(x,y)));  return rs;}  }
class C{  public void requestAutoFocus(Handler handler,int message){  if (camera != null && previewing) {    autoFocusCallback.setHandler(handler,message);    camera.autoFocus(autoFocusCallback);  }}  }
class C{  public synchronized void modify(Long startValue,Long minValue,Long maxValue,Long increment){  if (startValue == null) {    startValue=this.value;  }  if (minValue == null) {    minValue=this.minValue;  }  if (maxValue == null) {    maxValue=this.maxValue;  }  if (increment == null) {    increment=this.increment;  }  if (!isValid(startValue,minValue,maxValue,increment)) {    throw DbException.get(ErrorCode.SEQUENCE_ATTRIBUTES_INVALID,getName(),String.valueOf(startValue),String.valueOf(minValue),String.valueOf(maxValue),String.valueOf(increment));  }  this.value=startValue;  this.valueWithMargin=startValue;  this.minValue=minValue;  this.maxValue=maxValue;  this.increment=increment;}  }
class C{  private void initIndeterminateDefaults(){  initRepaintInterval();  initCycleTime();  if (repaintInterval <= 0) {    repaintInterval=100;  }  if (repaintInterval > cycleTime) {    cycleTime=repaintInterval * 20;  } else {    int factor=(int)Math.ceil(((double)cycleTime) / ((double)repaintInterval * 2));    cycleTime=repaintInterval * factor * 2;  }}  }
class C{  public boolean equals(String password){  if (password == null) {    return false;  }  if (!isEncrypted(password)) {    password=encrypt(algorithm,password);  }  if (!password.startsWith(algorithm + SEPERATOR)) {    throw new IllegalArgumentException("Algorithm mismatch");  }  return value.equalsIgnoreCase(password);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return BEGIN_IN_BOTH;case 2:  return NEWINT;case 3:return NEWBYTE;case 4:return NEWSHORT;case 5:return NEWLONG;case 6:return NEWDOUBLE;case 7:return NEWSTRUCT;case 8:return NEWLIST;case 9:return NEWSET;case 10:return NEWMAP;case 11:return NEWSTRING;case 12:return END_IN_BOTH;default :return null;}}  }
class C{  @SuppressWarnings("unchecked") public AlignmentGrid(int eSize,int fSize){  alGridCells=new AlGridCell[MAX_SENT_LEN][MAX_SENT_LEN];  this.sent=null;  init(eSize,fSize);}  }
class C{  public int queryAsCount(){  QuantumFluxCursor<T> cursor=queryAsCursor();  List<String> includedColumnsTemp=new ArrayList<>();  List<String> excludedColumnsTemp=new ArrayList<>();  Collections.copy(includedColumnsTemp,mIncludedColumns);  Collections.copy(excludedColumnsTemp,mExcludedColumns);  mIncludedColumns.clear();  mExcludedColumns.clear();  String columnName=QuantumFlux.findTableDetails(mDataObjectClass).findPrimaryKeyColumn().getColumnName();  mIncludedColumns.add(columnName);  try {    return cursor.getCount();  }  finally {    if (cursor != null)     cursor.close();    mIncludedColumns.clear();    Collections.copy(mIncludedColumns,mIncludedColumns);    Collections.copy(excludedColumnsTemp,mExcludedColumns);  }}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMFEFuncRElement(prefix,(AbstractDocument)doc);}  }
class C{  @Override protected boolean useTeleportScroll(final Player player){  String targetZoneName=null;  int targetX=0;  int targetY=0;  int timeInTurns=0;  final String infoString=getInfoString();  if (infoString != null) {    final StringTokenizer st=new StringTokenizer(infoString);    if (st.countTokens() == 7) {      targetZoneName=st.nextToken();      targetX=Integer.parseInt(st.nextToken());      targetY=Integer.parseInt(st.nextToken());      timeInTurns=Integer.parseInt(st.nextToken());    } else {      throw new IllegalArgumentException("the infostring attribute is malformed");    }  }  return useTeleportScroll(player,targetZoneName,targetX,targetY,timeInTurns);}  }
class C{  @Override public Token generatePersonalAccessToken(final URI targetUri,final Token accessToken,final VsoTokenScope tokenScope,final boolean requireCompactToken){  Debug.Assert(targetUri != null,"The targetUri parameter is null");  Debug.Assert(accessToken != null && !StringHelper.isNullOrWhiteSpace(accessToken.Value) && (accessToken.Type == TokenType.Access || accessToken.Type == TokenType.Federated),"The accessToken parameter is null or invalid");  Debug.Assert(tokenScope != null,"The tokenScope parameter is invalid");  Trace.writeLine("VsoAzureAuthority::generatePersonalAccessToken");  try {    final HttpClient client=new HttpClient(Global.getUserAgent());    Trace.writeLine("   using token to acquire personal access token");    accessToken.contributeHeader(client.Headers);    if (populateTokenTargetId(targetUri,accessToken)) {      final URI requestUrl=createPersonalAccessTokenRequestUri(client,targetUri,requireCompactToken);      final StringContent content=getAccessTokenRequestBody(targetUri,accessToken,tokenScope);      final HttpURLConnection response=client.post(requestUrl,content);      if (response.getResponseCode() == HttpURLConnection.HTTP_OK) {        final String responseText=HttpClient.readToString(response);        final Token token=parsePersonalAccessTokenFromJson(responseText);        if (token != null) {          Trace.writeLine("   personal access token acquisition succeeded.");        }        return token;      }    }  } catch (  final IOException e) {    throw new Error(e);  }  return null;}  }
class C{  public void notifyRegistration(){synchronized (mLock) {    mRcsServiceRegistrationEventBroadcaster.broadcastServiceRegistered();  }}  }
class C{  public static final void removeNullValues(ArrayList types){  ArrayList filter=new ArrayList(1);  filter.add(null);  types.removeAll(filter);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodereplacechildnewchilddiffdocument.class,args);}  }
class C{  public Differences compare(){  log("IN comparator compare method");  return compare(getControlNode(),getTestNode());}  }
class C{  public void tick(){  Iterator<SatelliteBase> iterator=tickingSatallites.iterator();  while (iterator.hasNext()) {    SatelliteBase satallite=iterator.next();    satallite.tickEntity();  }}  }
class C{  private boolean acquired(ValueStatus status){  return status == ValueStatus.PENDING || status == ValueStatus.FLUSHED;}  }
class C{  public byte[] compress(byte[] in,String algorithm){  int len=in.length;  if (in.length < 5) {    algorithm="NO";  }  Compressor compress=getCompressor(algorithm);  byte[] buff=getBuffer((len < 100 ? len + 100 : len) * 2);  int newLen=compress(in,in.length,compress,buff);  byte[] out=DataUtils.newBytes(newLen);  System.arraycopy(buff,0,out,0,newLen);  return out;}  }
class C{  public void copyOnWrite(){  if (trace.getProxyCount() > 1) {    trace.removeProxy();    trace=trace.clone();  }}  }
class C{  public final DrawableRequestBuilder<Uri> loadFull(Uri uri,Key key,Size original){  Size size=clampSize(original,MAXIMUM_FULL_RES_PIXELS,getMaxImageDisplaySize());  return mLargeImageBuilder.clone().load(uri).signature(key).override(size.width(),size.height());}  }
class C{  final void put(final ByteVector out){  final int FACTOR=ClassWriter.TO_ACC_SYNTHETIC;  int mask=ACC_CONSTRUCTOR | Opcodes.ACC_DEPRECATED | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE| ((access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) / FACTOR);  out.putShort(access & ~mask).putShort(name).putShort(desc);  if (classReaderOffset != 0) {    out.putByteArray(cw.cr.b,classReaderOffset,classReaderLength);    return;  }  int attributeCount=0;  if (code.length > 0) {    ++attributeCount;  }  if (exceptionCount > 0) {    ++attributeCount;  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((cw.version & 0xFFFF) < Opcodes.V1_5 || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {      ++attributeCount;    }  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    ++attributeCount;  }  if (ClassReader.SIGNATURES && signature != null) {    ++attributeCount;  }  if (methodParameters != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && annd != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && anns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && ianns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && tanns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && itanns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && panns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && ipanns != null) {    ++attributeCount;  }  if (attrs != null) {    attributeCount+=attrs.getCount();  }  out.putShort(attributeCount);  if (code.length > 0) {    int size=12 + code.length + 8 * handlerCount;    if (localVar != null) {      size+=8 + localVar.length;    }    if (localVarType != null) {      size+=8 + localVarType.length;    }    if (lineNumber != null) {      size+=8 + lineNumber.length;    }    if (stackMap != null) {      size+=8 + stackMap.length;    }    if (ClassReader.ANNOTATIONS && ctanns != null) {      size+=8 + ctanns.getSize();    }    if (ClassReader.ANNOTATIONS && ictanns != null) {      size+=8 + ictanns.getSize();    }    if (cattrs != null) {      size+=cattrs.getSize(cw,code.data,code.length,maxStack,maxLocals);    }    out.putShort(cw.newUTF8("Code")).putInt(size);    out.putShort(maxStack).putShort(maxLocals);    out.putInt(code.length).putByteArray(code.data,0,code.length);    out.putShort(handlerCount);    if (handlerCount > 0) {      Handler h=firstHandler;      while (h != null) {        out.putShort(h.start.position).putShort(h.end.position).putShort(h.handler.position).putShort(h.type);        h=h.next;      }    }    attributeCount=0;    if (localVar != null) {      ++attributeCount;    }    if (localVarType != null) {      ++attributeCount;    }    if (lineNumber != null) {      ++attributeCount;    }    if (stackMap != null) {      ++attributeCount;    }    if (ClassReader.ANNOTATIONS && ctanns != null) {      ++attributeCount;    }    if (ClassReader.ANNOTATIONS && ictanns != null) {      ++attributeCount;    }    if (cattrs != null) {      attributeCount+=cattrs.getCount();    }    out.putShort(attributeCount);    if (localVar != null) {      out.putShort(cw.newUTF8("LocalVariableTable"));      out.putInt(localVar.length + 2).putShort(localVarCount);      out.putByteArray(localVar.data,0,localVar.length);    }    if (localVarType != null) {      out.putShort(cw.newUTF8("LocalVariableTypeTable"));      out.putInt(localVarType.length + 2).putShort(localVarTypeCount);      out.putByteArray(localVarType.data,0,localVarType.length);    }    if (lineNumber != null) {      out.putShort(cw.newUTF8("LineNumberTable"));      out.putInt(lineNumber.length + 2).putShort(lineNumberCount);      out.putByteArray(lineNumber.data,0,lineNumber.length);    }    if (stackMap != null) {      boolean zip=(cw.version & 0xFFFF) >= Opcodes.V1_6;      out.putShort(cw.newUTF8(zip ? "StackMapTable" : "StackMap"));      out.putInt(stackMap.length + 2).putShort(frameCount);      out.putByteArray(stackMap.data,0,stackMap.length);    }    if (ClassReader.ANNOTATIONS && ctanns != null) {      out.putShort(cw.newUTF8("RuntimeVisibleTypeAnnotations"));      ctanns.put(out);    }    if (ClassReader.ANNOTATIONS && ictanns != null) {      out.putShort(cw.newUTF8("RuntimeInvisibleTypeAnnotations"));      ictanns.put(out);    }    if (cattrs != null) {      cattrs.put(cw,code.data,code.length,maxLocals,maxStack,out);    }  }  if (exceptionCount > 0) {    out.putShort(cw.newUTF8("Exceptions")).putInt(2 * exceptionCount + 2);    out.putShort(exceptionCount);    for (int i=0; i < exceptionCount; ++i) {      out.putShort(exceptions[i]);    }  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((cw.version & 0xFFFF) < Opcodes.V1_5 || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {      out.putShort(cw.newUTF8("Synthetic")).putInt(0);    }  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    out.putShort(cw.newUTF8("Deprecated")).putInt(0);  }  if (ClassReader.SIGNATURES && signature != null) {    out.putShort(cw.newUTF8("Signature")).putInt(2).putShort(cw.newUTF8(signature));  }  if (methodParameters != null) {    out.putShort(cw.newUTF8("MethodParameters"));    out.putInt(methodParameters.length + 1).putByte(methodParametersCount);    out.putByteArray(methodParameters.data,0,methodParameters.length);  }  if (ClassReader.ANNOTATIONS && annd != null) {    out.putShort(cw.newUTF8("AnnotationDefault"));    out.putInt(annd.length);    out.putByteArray(annd.data,0,annd.length);  }  if (ClassReader.ANNOTATIONS && anns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleAnnotations"));    anns.put(out);  }  if (ClassReader.ANNOTATIONS && ianns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleAnnotations"));    ianns.put(out);  }  if (ClassReader.ANNOTATIONS && tanns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleTypeAnnotations"));    tanns.put(out);  }  if (ClassReader.ANNOTATIONS && itanns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleTypeAnnotations"));    itanns.put(out);  }  if (ClassReader.ANNOTATIONS && panns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleParameterAnnotations"));    AnnotationWriter.put(panns,synthetics,out);  }  if (ClassReader.ANNOTATIONS && ipanns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleParameterAnnotations"));    AnnotationWriter.put(ipanns,synthetics,out);  }  if (attrs != null) {    attrs.put(cw,null,0,-1,-1,out);  }}  }
class C{  protected String formatDate(Date date,String formatKey,int defaultFormat){  Locale locale=getLocale();  DateFormat dateFormatter;  String formatString=getString(formatKey);  if (StringUtils.isEmpty(formatString)) {    dateFormatter=DateFormat.getDateInstance(defaultFormat,locale);  } else {    dateFormatter=new SimpleDateFormat(formatString,locale);  }  return dateFormatter.format(date);}  }
class C{  @Override public void generate(XmlWriter w,ExtensionProfile extProfile) throws IOException {  List<XmlWriter.Attribute> attrs=new ArrayList<XmlWriter.Attribute>(6);  if (reason != null) {    attrs.add(new XmlWriter.Attribute("reason",reason));  }  attrs.add(new XmlWriter.Attribute("parsed",Integer.toString(totalCount)));  attrs.add(new XmlWriter.Attribute("success",Integer.toString(successCount)));  attrs.add(new XmlWriter.Attribute("error",Integer.toString(errorCount)));  int skippedCount=totalCount - (successCount + errorCount);  attrs.add(new XmlWriter.Attribute("unprocessed",Integer.toString(skippedCount)));  if (contentType != null) {    contentType.getAttributes().remove(ContentType.ATTR_CHARSET);    attrs.add(new XmlWriter.Attribute("content-type",contentType.toString()));  }  generateStartElement(w,Namespaces.batchNs,"interrupted",attrs,null);  generateExtensions(w,extProfile);  if (content != null) {    w.characters(content);  }  w.endElement(Namespaces.batchNs,"interrupted");}  }
class C{  public HashCodeBuilder append(final byte[] array){  if (array == null) {    iTotal=iTotal * iConstant;  } else {    for (    final byte element : array) {      append(element);    }  }  return this;}  }
class C{  public void addNewNumberToStringEntry(String strId){  if (mNumberToIDMap == null)   return;  int baseId=0x10000000;  java.util.Random random=new java.util.Random();  int id=baseId | random.nextInt(0x1000);  Integer intId=Integer.valueOf(id);  while (mNumberToIDMap.containsKey(intId)) {    id=baseId | random.nextInt(0x1000);    intId=Integer.valueOf(id);  }  mNumberToIDMap.put(intId,strId);}  }
class C{  @SmallTest public void testGenerateAlerts_sharedPreferences(){  MockSharedPreferences prefs=new MockSharedPreferences(true);  AlertsTable at=new AlertsTable();  NotificationTestManager ntm=new NotificationTestManager(at.mAlerts,AlertService.MAX_NOTIFICATIONS);  long currentTime=createTimeInMillis(5,0);  at.addAlertRow(3,SCHEDULED,ACCEPTED,0,createTimeInMillis(9,0),createTimeInMillis(10,0),0);  at.addAlertRow(2,SCHEDULED,ACCEPTED,0,createTimeInMillis(8,0),createTimeInMillis(9,0),0);  at.addAlertRow(1,SCHEDULED,ACCEPTED,0,createTimeInMillis(7,0),createTimeInMillis(8,0),0);  AlertService.generateAlerts(mContext,ntm,new MockAlarmManager(mContext),prefs,at.getAlertCursor(),currentTime,AlertService.MAX_NOTIFICATIONS);}  }
class C{  private int parseKeyProviderInfoLen(final byte[] b,final int off) throws ParseException {  keyProviderInfoLen_=PrimitivesParser.parseShort(b,off);  return Short.SIZE / Byte.SIZE;}  }
class C{  public Atts(int size){  attributes=new ArrayList<Att>(size);}  }
class C{  public static MockProxyMetaClass make(Class theClass,boolean interceptConstruction){  MetaClassRegistry metaRegistry=GroovySystem.getMetaClassRegistry();  MetaClass meta=metaRegistry.getMetaClass(theClass);  return new MockProxyMetaClass(metaRegistry,theClass,meta,interceptConstruction);}  }
class C{  public static void localiseButton(AbstractButton button,String key,String defaultString,boolean setMnemonic){  AnnotatedString as=new AnnotatedString(L10N.getLocalString(key,defaultString));  button.setText(as.toString());  int mnemonic;  if (setMnemonic && (mnemonic=as.getMnemonic()) != KeyEvent.VK_UNDEFINED) {    button.setMnemonic(mnemonic);    button.setDisplayedMnemonicIndex(as.getMnemonicIndex());  }}  }
class C{  @DSSource({DSSourceKind.LOCATION}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:09.167 -0500",hash_original_method="5F0329920CE6539503E8DACE82C515C1",hash_generated_method="1545BCD278795E649171171C17A88878") static public Allocation createSized(RenderScript rs,Element e,int count,int usage){  rs.validate();  Type.Builder b=new Type.Builder(rs,e);  b.setX(count);  Type t=b.create();  int id=rs.nAllocationCreateTyped(t.getID(),MipmapControl.MIPMAP_NONE.mID,usage);  if (id == 0) {    throw new RSRuntimeException("Allocation creation failed.");  }  return new Allocation(id,rs,t,usage);}  }
class C{  private void parse(){  try {    FileInputStream xmlStream=new FileInputStream(usersDataFile);    DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();    factory.setIgnoringComments(true);    DocumentBuilder builder=factory.newDocumentBuilder();    doc=builder.parse(xmlStream);    xmlStream.close();    rootElement=doc.getDocumentElement();    lastSubmissionID=Integer.parseInt(rootElement.getAttribute("lastSubID"));    System.out.println("lastSubmissionID=" + lastSubmissionID);    NodeList entriesList=doc.getElementsByTagName("EntriesQueue");    entryRoot=(Element)entriesList.item(0);    entriesList=doc.getElementsByTagName("ResultData");    resultRoot=(Element)entriesList.item(0);  } catch (  javax.xml.parsers.ParserConfigurationException e) {    System.out.println("Failed to create DocumentBuilder!");    e.printStackTrace();  }catch (  org.xml.sax.SAXException e) {    System.out.println("Error parsing users.xml!");    e.printStackTrace();  }catch (  Exception e) {    System.out.println("File error!");    e.printStackTrace();  }}  }
class C{  public void onFocusedBuildingInfo(View view){  IndoorBuilding building=mMap.getFocusedBuilding();  if (building != null) {    StringBuilder s=new StringBuilder();    for (    IndoorLevel level : building.getLevels()) {      s.append(level.getName()).append(" ");    }    if (building.isUnderground()) {      s.append("is underground");    }    setText(s.toString());  } else {    setText("No visible building");  }}  }
class C{  public static void main(String[] args){  final int SLOW=1;  final int MEDIUM=2;  final int FAST=3;  Fan fan1=new Fan();  Fan fan2=new Fan();  fan1.setSpeed(FAST);  fan1.setRadius(10);  fan1.setColor("yellow");  fan1.turnOn();  fan2.setSpeed(MEDIUM);  fan2.setRadius(5);  fan2.setColor("blue");  fan2.turnOff();  System.out.println(fan1.toString());  System.out.println(fan2.toString());}  }
class C{  protected Map<String,Object> runService(MapMessage message){  Map<String,? extends Object> context=null;  String serviceName=null;  String xmlContext=null;  try {    serviceName=message.getString("serviceName");    xmlContext=message.getString("serviceContext");    if (serviceName == null || xmlContext == null) {      Debug.logError("Message received is not an OFB service message. Ignored!",module);      return null;    }    Object o=XmlSerializer.deserialize(xmlContext,dispatcher.getDelegator());    if (Debug.verboseOn())     Debug.logVerbose("De-Serialized Context --> " + o,module);    if (ObjectType.instanceOf(o,"java.util.Map"))     context=UtilGenerics.checkMap(o);  } catch (  JMSException je) {    Debug.logError(je,"Problems reading message.",module);  }catch (  Exception e) {    Debug.logError(e,"Problems deserializing the service context.",module);  }  try {    ModelService model=dispatcher.getDispatchContext().getModelService(serviceName);    if (!model.export) {      Debug.logWarning("Attempt to invoke a non-exported service: " + serviceName,module);      return null;    }  } catch (  GenericServiceException e) {    Debug.logError(e,"Unable to get ModelService for service : " + serviceName,module);  }  if (Debug.verboseOn())   Debug.logVerbose("Running service: " + serviceName,module);  Map<String,Object> result=null;  if (context != null) {    try {      result=dispatcher.runSync(serviceName,context);    } catch (    GenericServiceException gse) {      Debug.logError(gse,"Problems with service invocation.",module);    }  }  return result;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:40.541 -0500",hash_original_method="F9942D2466FE07715480ED4C9CFB455E",hash_generated_method="3A42119FB9C691DFF3EDB01412BDBFAC") public void add(final URI uri){  this.uris.add(uri);}  }
class C{  protected final Integer readVarInteger() throws IOException {  int retvalue=0;  boolean is_negative=false;  int b;  done:   for (; ; ) {    if ((b=read()) < 0)     throwUnexpectedEOFException();    if ((b & 0x40) != 0) {      is_negative=true;    }    retvalue=(b & 0x3F);    if ((b & 0x80) != 0)     break done;    if ((b=read()) < 0)     throwUnexpectedEOFException();    retvalue=(retvalue << 7) | (b & 0x7F);    if ((b & 0x80) != 0)     break done;    if ((b=read()) < 0)     throwUnexpectedEOFException();    retvalue=(retvalue << 7) | (b & 0x7F);    if ((b & 0x80) != 0)     break done;    if ((b=read()) < 0)     throwUnexpectedEOFException();    retvalue=(retvalue << 7) | (b & 0x7F);    if ((b & 0x80) != 0)     break done;    if ((b=read()) < 0)     throwUnexpectedEOFException();    retvalue=(retvalue << 7) | (b & 0x7F);    if ((b & 0x80) != 0)     break done;    throwIntOverflowExeption();  }  Integer retInteger=null;  if (is_negative) {    if (retvalue != 0) {      retInteger=new Integer(-retvalue);    }  } else {    retInteger=new Integer(retvalue);  }  return retInteger;}  }
class C{  public IntBuffer usedBuffer(){  byteBuffer.position(PERFDATA_PROLOG_USED_OFFSET);  IntBuffer ib=byteBuffer.asIntBuffer();  ib.limit(1);  return ib;}  }
class C{  private StringBuffer createIndent(int start,final int indent,final boolean convertSpaceRunsToTabs){  final boolean convertTabs=fPrefs.prefUseTabs && convertSpaceRunsToTabs;  final int tabLen=fPrefs.prefTabSize;  final StringBuffer ret=new StringBuffer();  try {    int spaces=0;    while (start < indent) {      char ch=fDocument.getChar(start);      if (ch == '\t') {        ret.append(StringUtils.repeatString(" ",tabLen));        spaces=0;      } else       if (convertTabs) {        spaces++;      } else {        ret.append(' ');      }      start++;    }    while (spaces-- > 0)     ret.append(' ');  } catch (  BadLocationException e) {  }  return ret;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private boolean Test1(String before){  StringBuffer bashed=new StringBuffer(before);  String slice;  for (int i=0; i < 100; i++) {    int startIndex=getRandomIndex(0,before.length());    int endIndex=getRandomIndex(startIndex,before.length());    if (endIndex < bashed.length()) {      slice=bashed.substring(startIndex,endIndex);    } else {      slice=bashed.substring(startIndex);    }    bashed.replace(startIndex,endIndex,slice);  }  String after=bashed.toString();  if (!before.equals(after))   return false; else   return true;}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  public void pushCurrentFuncResult(Object val){  m_currentFuncResult.push(val);}  }
class C{  private void unifyWith(TypeInstance other) throws HaskellTypeError {  if (this == other) {    return;  }  if (this.isRigid && other.isRigid) {    throw new HaskellTypeError("Can not unify a rigid type variable " + this.name + " with another rigid type variable "+ other.name);  }  if ((this.isRigid || other.isRigid) && !this.constraints.equals(other.constraints)) {    throw new HaskellTypeError("Can not add extra constraints to a rigid type variable " + this.name);  }  other.constraints.mergeConstraintsWith(this.constraints);  other.associatedTypeApps.addAll(this.associatedTypeApps);  other.unifiedVars.addAll(this.unifiedVars);  for (ListIterator<WeakReference<TypeVar>> iter=this.unifiedVars.listIterator(); iter.hasNext(); ) {    TypeVar referer=iter.next().get();    if (referer == null) {      iter.remove();    } else {      referer.instance=other;    }  }}  }
class C{  public static IllegalArgumentException newIllegalArgumentException(String message,Object... arguments){  return initCause(new IllegalArgumentException(formatMessage(0,message,arguments)),arguments);}  }
class C{  static <T>void blockyTandemMergeSort(final T[] keyArr,final long[] valArr,final int arrLen,final int blkSize,final Comparator<? super T> comparator){  assert blkSize >= 1;  if (arrLen <= blkSize)   return;  int numblks=arrLen / blkSize;  if (numblks * blkSize < arrLen)   numblks+=1;  assert (numblks * blkSize >= arrLen);  final T[] keyTmp=Arrays.copyOf(keyArr,arrLen);  final long[] valTmp=Arrays.copyOf(valArr,arrLen);  blockyTandemMergeSortRecursion(keyTmp,valTmp,keyArr,valArr,0,numblks,blkSize,arrLen,comparator);}  }
class C{  private void populateIndicatorCandleSeries(Tradestrategy tradestrategy,ZonedDateTime startDate,ZonedDateTime endDate) throws PersistentModelException {  CandleDataset candleDataset=(CandleDataset)tradestrategy.getStrategyData().getIndicatorByType(IndicatorSeries.CandleSeries);  if (null != candleDataset) {    for (int seriesIndex=0; seriesIndex < candleDataset.getSeriesCount(); seriesIndex++) {      CandleSeries series=candleDataset.getSeries(seriesIndex);      Contract contract=m_tradePersistentModel.findContractByUniqueKey(series.getSecType(),series.getSymbol(),series.getExchange(),series.getCurrency(),null);      if (null != contract) {        Tradestrategy childTradestrategy=new Tradestrategy(contract,tradestrategy.getTradingday(),new Strategy(),tradestrategy.getPortfolio(),new BigDecimal(0),null,null,false,tradestrategy.getChartDays(),tradestrategy.getBarSize());        childTradestrategy.setDirty(false);        List<Candle> indicatorCandles=m_tradePersistentModel.findCandlesByContractDateRangeBarSize(childTradestrategy.getContract().getIdContract(),startDate,endDate,childTradestrategy.getBarSize());        if (indicatorCandles.isEmpty()) {          this.setStatusBarMessage("No chart data available for " + childTradestrategy.getContract().getSymbol(),BasePanel.INFORMATION);        } else {          StrategyData strategyData=StrategyData.create(childTradestrategy);          CandleDataset.populateSeries(strategyData,indicatorCandles);          indicatorCandles.clear();          CandleSeries childSeries=strategyData.getBaseCandleSeries();          childSeries.setDisplaySeries(series.getDisplaySeries());          childSeries.setSeriesRGBColor(series.getSeriesRGBColor());          childSeries.setSubChart(series.getSubChart());          childSeries.setSymbol(series.getSymbol());          childSeries.setSecType(series.getSecType());          childSeries.setCurrency(series.getCurrency());          childSeries.setExchange(series.getExchange());          candleDataset.setSeries(seriesIndex,childSeries);        }      }    }  }}  }
class C{  public Version(String version,String delimiters) throws VersionException {  StringTokenizer strTok=new StringTokenizer(version,delimiters);  Vector<Integer> versionSections=new Vector<Integer>();  while (strTok.hasMoreTokens()) {    try {      Integer i=new Integer(strTok.nextToken());      if (i.intValue() < 0) {        throw new VersionException(MessageFormat.format(res.getString("NoParseVersion.exception.message"),version,delimiters));      }      versionSections.add(i);    } catch (    NumberFormatException ex) {      throw new VersionException(MessageFormat.format(res.getString("NoParseVersion.exception.message"),version,delimiters));    }  }  if (versionSections.size() == 0) {    iSections=new int[]{0};  } else {    iSections=new int[versionSections.size()];    for (int i=0; i < versionSections.size(); i++) {      iSections[i]=Math.abs(versionSections.get(i).intValue());    }  }}  }
class C{  public void addPutTimeNanos(long duration){  putTimeNanos.addAndGet(duration);  if (delegate != null)   delegate.addPutTimeNanos(duration);}  }
class C{  public TimePeriodValue(TimePeriod period,Number value){  ParamChecks.nullNotPermitted(period,"period");  this.period=period;  this.value=value;}  }
class C{  protected boolean isUsableAddress(NetworkInterface networkInterface,InetAddress address){  if (!(address instanceof Inet4Address)) {    log.finer("Skipping unsupported non-IPv4 address: " + address);    return false;  }  if (address.isLoopbackAddress()) {    log.finer("Skipping loopback address: " + address);    return false;  }  if (useAddresses.size() > 0 && !useAddresses.contains(address.getHostAddress())) {    log.finer("Skipping unwanted address: " + address);    return false;  }  return true;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public AtomicRowDelete(){}  }
class C{  public CommitRecordIndex(IRawStore store,Checkpoint checkpoint,IndexMetadata metadata,boolean readOnly){  super(store,checkpoint,metadata,readOnly);  this.ser=new Entry.EntrySerializer();}  }
class C{  static public void removeGUIInitializedListener(GUIInitializedListener l){  guiInitializedListener=GUIInitializedMulticaster.remove(guiInitializedListener,l);}  }
class C{  public void mousePressed(java.awt.event.MouseEvent e){  if ((getTree() != null) && getTree().isEnabled()) {    getTree().requestFocus();    javax.swing.tree.TreePath path=getClosestPathForLocation(getTree(),e.getX(),e.getY());    if (path != null) {      java.awt.Rectangle bounds=getPathBounds(getTree(),path);      if (bounds == null || e.getY() > (bounds.y + bounds.height)) {        return;      }      if (javax.swing.SwingUtilities.isLeftMouseButton(e)) {        checkForClick(path,e.getX(),e.getY());      }      int x=e.getX();      if (x > bounds.x) {        if ((x <= (bounds.x + bounds.width)) && (getTree().isEditing() || !startEdit(path,e))) {          if (getTree().isPathSelected(path)) {            alreadySelectedPath=path;          } else {            alreadySelectedPath=null;            selectPath(path,e);          }        }      }    }  }}  }
class C{  private static void addModeChoice(final Controler controler){  StrategySettings carAvail=new StrategySettings();  carAvail.setStrategyName("SubtourModeChoice_".concat(Global.GP_CAR));  carAvail.setSubpopulation(Global.GP_CAR);  carAvail.setWeight(0.1);  controler.getConfig().strategy().addStrategySettings(carAvail);  StrategySettings license=new StrategySettings();  license.setStrategyName("SubtourModeChoice_".concat(Global.LICENSE_OWNER));  license.setSubpopulation(Global.LICENSE_OWNER);  license.setWeight(0.1);  controler.getConfig().strategy().addStrategySettings(license);  StrategySettings nonCarAvail=new StrategySettings();  nonCarAvail.setStrategyName("SubtourModeChoice_".concat("NO_CAR"));  nonCarAvail.setSubpopulation(null);  nonCarAvail.setWeight(0.1);  controler.getConfig().strategy().addStrategySettings(nonCarAvail);  StrategySettings commuter=new StrategySettings();  commuter.setStrategyName("SubtourModeChoice_".concat(Global.COMMUTER));  commuter.setSubpopulation(Global.COMMUTER);  commuter.setWeight(0.1);  controler.getConfig().strategy().addStrategySettings(commuter);  setModeChoiceModules(controler,carsharing);}  }
class C{  public void killWarningBubble(){  if (operatorWarningBubble != null) {    operatorWarningBubble.killBubble(true);  }}  }
class C{  public boolean isCompatibleVDCVersion(String expectedVersion){  Properties queryParams=new Properties();  queryParams.put(EXPECTED_VERSION_QUERY_PARAM,expectedVersion);  ClientResponse resp=client.get(ClientResponse.class,PathConstants.CHECK_COMPATIBLE_VDC_URL,queryParams);  return Boolean.parseBoolean(resp.getEntity(String.class));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:51.529 -0500",hash_original_method="9EE080B9329CC6FAACC493ECC7141CFB",hash_generated_method="9831B42DF1CE5AD51AC68D738DCBFA72") protected void clearError(){synchronized (lock) {    ioError=false;  }}  }
class C{  private static boolean shouldUseRemoteUI(ILaunchConfiguration configuration) throws CoreException {  return !isUseRemoteUiEnvVarFalse(configuration) && !GwtLaunchConfigurationProcessorUtilities.isSuperDevModeCodeServer(configuration);}  }
class C{  public static void v(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_VERBOSE) {    return;  }  Log.v(tag,msg,throwable);}  }
class C{  public ClearCacheRequest(Cache cache,Runnable callback){  super(Method.GET,null,null);  mCache=cache;  mCallback=callback;}  }
class C{  public void showMenu(){  mSlidingMenu.showMenu();}  }
class C{  public X509CRLHolder(byte[] crlEncoding) throws IOException {  this(parseStream(new ByteArrayInputStream(crlEncoding)));}  }
class C{  private int gapSize(){  return fGapEnd - fGapStart;}  }
class C{  public void die(){  Account.I.pacifist=false;  if (dyingAnim == null) {    this.setVisible(false);  } else {    dyingAnim.setVisible(true);    dyingAnim.reset();    currState=State.DYING;  }}  }
class C{  public static String numberToString(Number number) throws JSONException {  if (number == null) {    throw new JSONException("Number must be non-null");  }  double doubleValue=number.doubleValue();  JSON.checkDouble(doubleValue);  if (number.equals(NEGATIVE_ZERO)) {    return "-0";  }  long longValue=number.longValue();  if (doubleValue == (double)longValue) {    return Long.toString(longValue);  }  return number.toString();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String remoteName=getString(stack);  int portNum=getInt(stack);  SFIRTuner tun=ExternalTuningManager.getIRTunerPlugin(getString(stack),portNum);  if (tun != null)   return new Integer(tun.getRemoteInfo(remoteName).channelDigits); else   return new Integer(-1);}  }
class C{  private void deleteMarkedImages(){  Collections.sort(deletedImageIndexes);  ContentResolver cr=getContentResolver();  for (int i=deletedImageIndexes.size() - 1; i >= 0; i--) {    int index=deletedImageIndexes.get(i).intValue();    if (index <= mCurrentPosition)     mCurrentPosition--;    MediaLocTime media=mAllImages.remove(index);    String filename=media.getFilename(cr);    if (media.isVideo())     cr.delete(MediaStore.Video.Media.EXTERNAL_CONTENT_URI,MediaStore.Video.Media._ID + "=?",new String[]{Long.toString(media.getFk())}); else     cr.delete(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,MediaStore.Images.Media._ID + "=?",new String[]{Long.toString(media.getFk())});    if (filename != null)     new File(filename).delete();    GTG.mediaLocTimeMap.notifyMltNotClean(media);  }  deletedImageIndexes.clear();}  }
class C{  private int calculateNumber(@NonNull String text,int nested){  if (text.length() < 3) {    return -1;  }  int number;  String s=text.substring(nested * KEY_HEADER.length(),text.length());  if (TextUtils.isDigitsOnly(s.substring(0,1))) {    number=Integer.parseInt(s.substring(0,1));    for (int i=1; i < s.length(); i++) {      if (TextUtils.isDigitsOnly(s.substring(i,i + 1))) {        number=number * 10 + Integer.parseInt(s.substring(i,i + 1));        continue;      } else {        return number;      }    }  } else {    return -1;  }  return number;}  }
class C{  private void updateMinMax(Instance instance){  for (int j=0; j < m_instances.numAttributes(); j++) {    if (!instance.isMissing(j)) {      if (Double.isNaN(m_Min[j])) {        m_Min[j]=instance.value(j);        m_Max[j]=instance.value(j);      } else       if (instance.value(j) < m_Min[j]) {        m_Min[j]=instance.value(j);      } else       if (instance.value(j) > m_Max[j]) {        m_Max[j]=instance.value(j);      }    }  }}  }
class C{  public boolean isVolatile(){  return Modifier.isVolatile(flags);}  }
class C{  private void makeEdge(Way way,int beginIdx,int endIdx,Long osmID){  long beginOsmNodeId=way.nodes[beginIdx];  long endOsmNodeId=way.nodes[endIdx];  int beginVertexIndex=getVertexIndexForOsmNode(beginOsmNodeId);  int endVertexIndex=getVertexIndexForOsmNode(endOsmNodeId);  int nNodes=endIdx - beginIdx + 1;  List<Node> nodes=new ArrayList<>(nNodes);  for (int n=beginIdx; n <= endIdx; n++) {    long nodeId=way.nodes[n];    Node node=osm.nodes.get(nodeId);    envelope.expandToInclude(node.getLon(),node.getLat());    nodes.add(node);  }  int edgeLengthMillimeters=getEdgeLengthMillimeters(nodes);  if (edgeLengthMillimeters < 0) {    LOG.warn("Street segment was too long to be represented, skipping.");    return;  }  short forwardSpeed=speedToShort(speedConfigurator.getSpeedMS(way,false));  short backwardSpeed=speedToShort(speedConfigurator.getSpeedMS(way,true));  RoadPermission roadPermission=permissions.getPermissions(way);  EnumSet<EdgeStore.EdgeFlag> forwardFlags=roadPermission.forward;  EnumSet<EdgeStore.EdgeFlag> backFlags=roadPermission.backward;  if (Collections.disjoint(forwardFlags,ALL_PERMISSIONS) && Collections.disjoint(backFlags,ALL_PERMISSIONS)) {    LOG.debug("Way has no permissions skipping!");    return;  }  stressLabeler.label(way,forwardFlags,backFlags);  typeOfEdgeLabeler.label(way,forwardFlags,backFlags);  Edge newEdge=edgeStore.addStreetPair(beginVertexIndex,endVertexIndex,edgeLengthMillimeters,osmID);  newEdge.setGeometry(nodes);  newEdge.setFlags(forwardFlags);  newEdge.setSpeed(forwardSpeed);  newEdge.advance();  newEdge.setFlags(backFlags);  newEdge.setSpeed(backwardSpeed);}  }
class C{  @SuppressWarnings("unused") public StreamingViewAsMultimap(FlinkRunner runner,View.AsMultimap<K,V> transform){  this.runner=runner;}  }
class C{  public boolean visitNumberLiteral(ExpressionOwner owner,XNumber num){  return true;}  }
class C{  public StrBuilder ensureCapacity(int capacity){  if (capacity > buffer.length) {    char[] old=buffer;    buffer=new char[capacity * 2];    System.arraycopy(old,0,buffer,0,size);  }  return this;}  }
class C{  public boolean isProcessNextOr(){  return processNextOr;}  }
class C{  public static String[] split(String s,char delimiter){  return split(s,Character.toString(delimiter));}  }
class C{  final static byte decodeByte(final int v){  int i=v;  if (i < 0) {    i=i + 0x80;  } else {    i=i - 0x80;  }  return (byte)(i & 0xff);}  }
class C{  protected boolean updateAttachmentPoint(){  boolean moved=false;  this.oldAPs=attachmentPoints;  if (attachmentPoints == null || attachmentPoints.isEmpty()) {    return false;  }  List<AttachmentPoint> apList=new ArrayList<AttachmentPoint>();  if (attachmentPoints != null) {    apList.addAll(attachmentPoints);  }  Map<DatapathId,AttachmentPoint> newMap=getAPMap(apList);  if (newMap == null || newMap.size() != apList.size()) {    moved=true;  }  if (moved) {    log.info("updateAttachmentPoint: ap {}  newmap {} ",attachmentPoints,newMap);    List<AttachmentPoint> newAPList=new ArrayList<AttachmentPoint>();    if (newMap != null) {      newAPList.addAll(newMap.values());    }    this.attachmentPoints=newAPList;  }  return moved;}  }
class C{  @Override public boolean conditionOk(Example e) throws ExpressionEvaluationException {  try {    resolver.bind(e);    if (type == ExpressionType.BOOLEAN) {      Boolean resultValue=result.evaluateBoolean();      if (resultValue == null) {        return false;      }      return resultValue;    } else     if (type == ExpressionType.DOUBLE) {      double resultValue=result.evaluateNumerical();      if (resultValue == 1d || resultValue == 0d) {        return resultValue == 1d;      }    }    throw new ExpressionEvaluationException(I18N.getMessageOrNull(I18N.getErrorBundle(),"expression_filter.expression_not_boolean",expression));  } catch (  ExpressionException e1) {    throw new ExpressionEvaluationException(I18N.getMessageOrNull(I18N.getErrorBundle(),"expression_filter.parser_parsing_failed",expression));  } finally {    resolver.unbind();  }}  }
class C{  private static <K>int objectUnwrap(final Iterator<? extends K> i,final K array[]){  int j=array.length, offset=0;  while (j-- != 0 && i.hasNext())   array[offset++]=i.next();  return array.length - j - 1;}  }
class C{  public static void dumpCurrentRow(Cursor cursor){  dumpCurrentRow(cursor,System.out);}  }
class C{  @SuppressWarnings({"unchecked"}) public static <T>T enhance(T obj){  ProxyFactory proxyFac=new ProxyFactory(obj);  proxyFac.addAdvice(dfltAsp);  proxyFac.addAdvice(setToValAsp);  proxyFac.addAdvice(setToSetAsp);  while (proxyFac.getAdvisors().length > 0)   proxyFac.removeAdvisor(0);  proxyFac.addAdvisor(new DefaultPointcutAdvisor(new GridifySpringPointcut(GridifySpringPointcut.GridifySpringPointcutType.DFLT),dfltAsp));  proxyFac.addAdvisor(new DefaultPointcutAdvisor(new GridifySpringPointcut(GridifySpringPointcut.GridifySpringPointcutType.SET_TO_VALUE),setToValAsp));  proxyFac.addAdvisor(new DefaultPointcutAdvisor(new GridifySpringPointcut(GridifySpringPointcut.GridifySpringPointcutType.SET_TO_SET),setToSetAsp));  return (T)proxyFac.getProxy();}  }
class C{  protected void sequence_ThisTypeRefNominal_TypeRefWithoutModifiers(ISerializationContext context,ThisTypeRefNominal semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public SnapshotSchema(int schemaID,String schemaJSON){  this(schemaJSON);  this.schemaID=schemaID;}  }
class C{  public boolean isConstructor(){  return false;}  }
class C{  @Override protected int sizeOf(String key,BitmapDrawable value){  final int bitmapSize=getBitmapSize(value) / 1024;  return bitmapSize == 0 ? 1 : bitmapSize;}  }
class C{  @RequestMapping(value="/render",method=RequestMethod.GET) public ModelAndView protein(final @RequestParam UrlResource url){  Protein protein=deserialise(url);  if (protein != null) {    ProteinXref xref;    if (protein.getCrossReferences().size() == 0) {      xref=new ProteinXref("Unknown");    } else     if (protein.getCrossReferences().size() > 1) {      StringBuilder combinedAcs=new StringBuilder();      for (      ProteinXref x : protein.getCrossReferences()) {        if (combinedAcs.length() > 0)         combinedAcs.append(", ");        combinedAcs.append(x.getIdentifier());      }      xref=new ProteinXref(combinedAcs.toString());    } else {      xref=protein.getCrossReferences().iterator().next();    }    return new ModelAndView("protein",buildModelMap(SimpleProtein.valueOf(protein,xref,entryHierarchy),true));  }  return new ModelAndView("render-warning");}  }
class C{  protected void print(List<? extends DocTree> list,String sep) throws IOException {  if (list.isEmpty())   return;  boolean first=true;  for (  DocTree t : list) {    if (!first)     print(sep);    print(t);    first=false;  }}  }
class C{  public int compareTo(QuotaLineItemEntity val){  double normalizedResult;  double normalizedVal;  double normalizedThis;  int rv;  normalizedVal=normalize(val);  normalizedThis=normalize(this);  normalizedResult=normalizedThis - normalizedVal;  if (normalizedResult < 0) {    rv=-1;  } else   if (normalizedResult == 0) {    rv=0;  } else {    rv=1;  }  return rv;}  }
class C{  public void pop(){  mv.visitInsn(Opcodes.POP);}  }
class C{  private static boolean isSuperOperatorDisabled(Operator operator){  return !operator.isEnabled() || operator.getParent() != null && isSuperOperatorDisabled(operator.getParent());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:22.352 -0500",hash_original_method="182191B1D77BB818CFC68B7BA957F59F",hash_generated_method="C865569B66E6B9D5F98A25B9338B8613") public Holder(ObjectDigestInfo objectDigestInfo){  this.objectDigestInfo=objectDigestInfo;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public synchronized void dump(){  Iterator<Map.Entry<Thread,ThreadStatus>> i=mThreadStatus.entrySet().iterator();  while (i.hasNext()) {    Map.Entry<Thread,ThreadStatus> entry=i.next();    Log.v(TAG,"[Dump] Thread " + entry.getKey() + " ("+ entry.getKey().getId()+ ")'s status is "+ entry.getValue());  }}  }
class C{  public boolean isEqual(ReadableDuration duration){  if (duration == null) {    duration=Duration.ZERO;  }  return compareTo(duration) == 0;}  }
class C{  public static Map<String,Float> parseFieldBoosts(String in){  return parseFieldBoosts(new String[]{in});}  }
class C{  private float spacing(WrapMotionEvent event){  float x=event.getX(0) - event.getX(1);  float y=event.getY(0) - event.getY(1);  return FloatMath.sqrt(x * x + y * y);}  }
class C{  public void isSaved(){  m_nSavedPointer=m_nCurrentEditAction;}  }
class C{  @Override protected void onStop(){  super.onStop();  if (mAlertDialog != null && mAlertDialog.isShowing()) {    mAlertDialog.dismiss();  }}  }
class C{  public static long copyAndClose(InputStream in,OutputStream out) throws IOException {  try {    long len=copyAndCloseInput(in,out);    out.close();    return len;  } catch (  Exception e) {    throw DbException.convertToIOException(e);  } finally {    closeSilently(out);  }}  }
class C{  public boolean isTenantIDPSelectionEnabled(String tenantName) throws Exception {  return getService().isTenantIDPSelectionEnabled(tenantName,this.getServiceContext());}  }
class C{  public final void writeDouble(double v) throws IOException {  this.size+=8;}  }
class C{  private void validatePlatform(){  if (isVMwareVapp()) {    log.warn("Platform(vApp) is unsupported for node recovery");    throw new UnsupportedOperationException("Platform(vApp) is unsupported for node recovery");  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public String toString(){  return contact.toString();}  }
class C{  public static boolean hasCombBar(){  return (!AndroidDevices.isPhone() && ((VERSION.SDK_INT >= VERSION_CODES.HONEYCOMB) && (VERSION.SDK_INT <= VERSION_CODES.JELLY_BEAN)));}  }
class C{  public static byte[] encode(byte[] bytes){  return encodeToString(bytes).getBytes();}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  public static Character[] toObject(char[] array){  if (array == null) {    return null;  } else   if (array.length == 0) {    return EMPTY_CHARACTER_OBJECT_ARRAY;  }  final Character[] result=new Character[array.length];  for (int i=0; i < array.length; i++) {    result[i]=new Character(array[i]);  }  return result;}  }
class C{  private void writeAttr(String name,String val) throws IOException {  writeAttr(name,val,true);}  }
class C{  public static int swap(int value){  int b1=value & 0xff;  int b2=(value >> 8) & 0xff;  int b3=(value >> 16) & 0xff;  int b4=(value >> 24) & 0xff;  return b1 << 24 | b2 << 16 | b3 << 8 | b4;}  }
class C{  public static boolean isInstallableEditing(int value){  return value == 0;}  }
class C{  public static final CacheValue valueOf(final String rawContent,final String hash){  return new CacheValue(rawContent,hash);}  }
class C{  public boolean isTraceEnabled(){  return this.traceEnabled;}  }
class C{  public boolean isSetI32_thing(){  return EncodingUtils.testBit(__isset_bitfield,__I32_THING_ISSET_ID);}  }
class C{  public String invertSelectionTipText(){  return "Whether to invert the selection.";}  }
class C{  public VisorFileBlock(String path,long off,long size,long lastModified,boolean zipped,byte[] data){  this.path=path;  this.off=off;  this.size=size;  this.lastModified=lastModified;  this.zipped=zipped;  this.data=data;}  }
class C{  public ActionMap(){}  }
class C{  public WeakAlarm(String name,AlarmListener listener){  super(name,listener);}  }
class C{  public static BitmapRegionDecoderCompat newInstance(byte[] data,int offset,int length,boolean isShareable) throws IOException {  return new BitmapRegionDecoderCompat(isAPI10() ? BitmapRegionDecoderNative.newInstance(data,offset,length,isShareable) : BitmapRegionDecoderGinger.newInstance(data,offset,length,isShareable));}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private static int capacity(int expectedSize){  if (expectedSize < 3) {    checkNonnegative(expectedSize,"expectedSize");    return expectedSize + 1;  }  if (expectedSize < MAX_POWER_OF_TWO) {    return (int)((float)expectedSize / 0.75F + 1.0F);  }  return Integer.MAX_VALUE;}  }
class C{  boolean displayNonContextAssump(NodeRepresentation rep,int i){  return rep.isCreated || (rep.nodeType == NodeRepresentation.OR_DECOMP) || (rep.nodeType == NodeRepresentation.EXISTS_TYPE)|| ((rep.nodeType == NodeRepresentation.AND_TYPE) && (rep.nodeSubtype != NodeRepresentation.OTHER_TYPE));}  }
class C{  public FastStringBuffer fsb(){  throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_FSB_NOT_SUPPORTED_XSTRINGFORCHARS,null));}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public int kind(){  return REDUCE;}  }
class C{  private void buildZoneRules() throws Exception {  for (  String zoneId : zones.keySet()) {    printVerbose("Building zone " + zoneId);    List<TZDBZone> tzdbZones=zones.get(zoneId);    ZoneRulesBuilder bld=new ZoneRulesBuilder();    for (    TZDBZone tzdbZone : tzdbZones) {      bld=tzdbZone.addToBuilder(bld,rules);    }    builtZones.put(zoneId,bld.toRules(zoneId));  }  for (  String aliasId : links.keySet()) {    String realId=links.get(aliasId);    printVerbose("Linking alias " + aliasId + " to "+ realId);    ZoneRules realRules=builtZones.get(realId);    if (realRules == null) {      realId=links.get(realId);      printVerbose("Relinking alias " + aliasId + " to "+ realId);      realRules=builtZones.get(realId);      if (realRules == null) {        throw new IllegalArgumentException("Alias '" + aliasId + "' links to invalid zone '"+ realId);      }      links.put(aliasId,realId);    }    builtZones.put(aliasId,realRules);  }  builtZones.remove("GMT+0");  builtZones.remove("GMT-0");  links.remove("GMT+0");  links.remove("GMT-0");  builtZones.remove("ROC");  links.remove("ROC");  builtZones.remove("EST");  builtZones.remove("HST");  builtZones.remove("MST");}  }
class C{  public void createAuthenticationChallenge(String realm,boolean userID,boolean access) throws IOException {  nonce=new byte[16];  for (int i=0; i < 16; i++) {    nonce[i]=(byte)mRandom.nextInt();  }  mAuthChall=ObexHelper.computeAuthenticationChallenge(nonce,realm,access,userID);}  }
class C{  public static boolean isEmptyString(String text){  return (text == null || text.trim().length() == 0);}  }
class C{  private boolean isTaskRequired(Volume rpVolume,VirtualPoolCapabilityValuesWrapper capabilities,boolean vplex,TaskList taskList){  boolean rpNonVplexSourceVolume=(Volume.PersonalityTypes.SOURCE.name().equals(rpVolume.getPersonality()) && !vplex);  boolean addJournalVolume=capabilities.getAddJournalCapacity();  boolean notAlreadyInTaskList=(StorageScheduler.getPrecreatedVolume(_dbClient,taskList,rpVolume.getLabel()) == null);  boolean createTask=addJournalVolume || (rpNonVplexSourceVolume && notAlreadyInTaskList);  return createTask;}  }
class C{  default B addCustomEffects(final PotionMeta src){  final List<StatusEffect> effects=src.getCustomEffects();  if ((effects == null) || effects.isEmpty()) {    return this.getBuilder();  }  final M meta=this.meta();  effects.forEach(null);  return this.getBuilder();}  }
class C{  public boolean willCreateCycle(final BaseType containingType,final BaseType memberType){  Preconditions.checkNotNull(containingType,"Error: Containing type can not be null.");  Preconditions.checkNotNull(memberType,"Error: Member type can not be null.");  if (containingType == memberType) {    return true;  }  final Set<BaseType> containedTypes=Sets.newHashSet(determineDependentTypes(containingType));  containedTypes.remove(containingType);  final Node startNode=containedRelationMap.get(memberType);  final Queue<Edge> edgesToVisit=new LinkedList<Edge>();  for (final EdgeCursor ec=startNode.inEdges(); ec.ok(); ec.next()) {    edgesToVisit.add((Edge)ec.current());  }  final Set<Node> visitednodes=new HashSet<Node>();  while (!edgesToVisit.isEmpty()) {    final Edge currentEdge=edgesToVisit.poll();    final Node nextNode=currentEdge.source();    final BaseType baseType=containedRelationMap.inverse().get(nextNode);    if (containedTypes.contains(baseType)) {      return true;    }    if (!visitednodes.contains(nextNode)) {      for (final EdgeCursor ec=nextNode.inEdges(); ec.ok(); ec.next()) {        edgesToVisit.add((Edge)ec.current());      }    }    visitednodes.add(nextNode);  }  return false;}  }
class C{  protected Node newNode(){  return new SVGOMFEFuncRElement();}  }
class C{  public GenericResponseWrapper(final HttpServletResponse response,final OutputStream outstr){  super(response);  this.outstr=new FilterServletOutputStream(outstr);}  }
class C{  public KeyUsageExtension(){  extensionId=PKIXExtensions.KeyUsage_Id;  critical=true;  bitString=new boolean[0];}  }
class C{  public String deriveUserDN(String username) throws GuacamoleException {  List<String> usernameAttributes=confService.getUsernameAttributes();  if (usernameAttributes.size() != 1) {    logger.warn(String.format("Cannot directly derive user DN when " + "multiple username attributes are specified. Please " + "define an LDAP search DN using the \"%s\" property "+ "in your \"guacamole.properties\".",LDAPGuacamoleProperties.LDAP_SEARCH_BIND_DN.getName()));    return null;  }  return escapingService.escapeDN(usernameAttributes.get(0)) + "=" + escapingService.escapeDN(username)+ ","+ confService.getUserBaseDN();}  }
class C{  final public void print(Object v){  try {    _out.print(v);  } catch (  IOException e) {    log.log(Level.FINE,e.toString(),e);  }}  }
class C{  public static void main(String[] args){  try {    final Document xmlDoc=DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new ByteArrayInputStream(rawXML.getBytes("UTF-8")));    final Element identityElement=(Element)xmlDoc.getElementsByTagName("Identity").item(0);    final Element trustListElement=(Element)identityElement.getElementsByTagName("TrustList").item(0);    final NodeList trustList=trustListElement.getElementsByTagName("Trust");    final Pattern keyPattern=Pattern.compile("USK@[%,~" + "*-_./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz" + "]+");    for (int i=0; i < trustList.getLength(); ++i) {      Element trustElement=(Element)trustList.item(i);      final String identity=trustElement.getAttribute("Identity");      if (!keyPattern.matcher(identity).matches()) {        throw new RuntimeException("Parsing failure: Instead of USK URI I got: " + identity);      }    }  } catch (  Exception ex) {    throw new RuntimeException(ex.getMessage());  }}  }
class C{  @Nullable public UUID subjectId(){  return subjId;}  }
class C{  protected void processOwningMappingKeys(OneToOneMapping mapping){  if (derivesId()) {    processForeignKeyRelationship(mapping);    if (hasMapsId()) {      processMapsId(mapping);    } else {      processId(mapping);    }  } else   if (isOneToOnePrimaryKeyRelationship()) {    processOneToOnePrimaryKeyRelationship(mapping);  } else   if (hasJoinTable()) {    mapping.setRelationTableMechanism(new RelationTableMechanism());    processJoinTable(mapping,mapping.getRelationTableMechanism(),getJoinTableMetadata());  } else {    processForeignKeyRelationship(mapping);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  Attr attribute1;  Attr attribute2;  Attr newAttribute1;  Attr newAttribute2;  Attr attribute;  String attrValue;  String attrName;  String attNodeName;  String attrLocalName;  String attrNS;  doc=(Document)load("staffNS",false);  element=doc.createElementNS("namespaceURI","root");  attribute1=doc.createAttributeNS("http://www.w3.org/DOM/Level2","l2:att");  newAttribute1=element.setAttributeNodeNS(attribute1);  attribute2=doc.createAttributeNS("http://www.w3.org/DOM/Level1","att");  newAttribute2=element.setAttributeNodeNS(attribute2);  attribute=element.getAttributeNodeNS("http://www.w3.org/DOM/Level2","att");  attrValue=attribute.getNodeValue();  attrName=attribute.getName();  attNodeName=attribute.getNodeName();  attrLocalName=attribute.getLocalName();  attrNS=attribute.getNamespaceURI();  assertEquals("elementgetattributenodens01_attrValue","",attrValue);  assertEquals("elementgetattributenodens01_attrName","l2:att",attrName);  assertEquals("elementgetattributenodens01_attrNodeName","l2:att",attNodeName);  assertEquals("elementgetattributenodens01_attrLocalName","att",attrLocalName);  assertEquals("elementgetattributenodens01_attrNs","http://www.w3.org/DOM/Level2",attrNS);}  }
class C{  @Provides @Config("sheetRegistrarId") public static Optional<String> provideSheetRegistrarId(RegistryEnvironment environment){switch (environment) {case PRODUCTION:    return Optional.of("1n2Gflqsgo9iDXcdt9VEskOVySZ8qIhQHJgjqsleCKdE");case ALPHA:case CRASH:  return Optional.of("16BwRt6v11Iw-HujCbAkmMxqw3sUG13B8lmXLo-uJTsE");case SANDBOX:return Optional.of("1TlR_UMCtfpkxT9oUEoF5JEbIvdWNkLRuURltFkJ_7_8");case QA:return Optional.of("1RoY1XZhLLwqBkrz0WbEtaT9CU6c8nUAXfId5BtM837o");default :return Optional.absent();}}  }
class C{  @Override public Object clone(){  TIntArrayList clone=null;  try {    clone=(TIntArrayList)super.clone();    clone._data=_data.clone();  } catch (  CloneNotSupportedException e) {  }  return clone;}  }
class C{  private void calcTypes(){  mDiffTypes=new ArrayList<Integer>();  for (int i=0; i < mDataSets.size(); i++) {    int type=mDataSets.get(i).getType();    if (!alreadyCounted(mDiffTypes,type)) {      mDiffTypes.add(type);    }  }}  }
class C{  public TopCategories(final String id){  super(id);}  }
class C{  private int readInt(int len){  int n=0;  for (int i=0; i < len; i++) {    n=(n << 8) | (((int)data[pos++]) & 0xff);  }  return n;}  }
class C{  public Header(String name,String value){  this.name=name;  this.value=value;}  }
class C{  public void showSecondaryMenu(){  mSlidingMenu.showSecondaryMenu();}  }
class C{  public void printStackTrace(PrintStream printstream){  super.printStackTrace(printstream);}  }
class C{  public boolean fullScroll(int direction){  boolean moved=false;  if (direction == FOCUS_UP) {    int position=lookForSelectablePosition(0,true);    if (position >= 0) {      mLayoutMode=LAYOUT_FORCE_TOP;      invokeOnItemScrollListener();      moved=true;    }  } else   if (direction == FOCUS_DOWN) {    int position=lookForSelectablePosition(mItemCount - 1,true);    if (position >= 0) {      mLayoutMode=LAYOUT_FORCE_BOTTOM;      invokeOnItemScrollListener();    }    moved=true;  }  if (moved && !awakenScrollBars()) {    awakenScrollBars();    invalidate();  }  return moved;}  }
class C{  public Builder nt(){  this.withThread=false;  this.threadSet=true;  return this;}  }
class C{  public static String decodeAsString(String b64string) throws IOException, MessagingException {  if (b64string == null) {    return b64string;  }  String returnString=decode(b64string).readLine();  if (returnString == null) {    return returnString;  }  return returnString.trim();}  }
class C{  public static Bitmap createThumbnailBitmap(Bitmap bitmap,Context context){  int sIconWidth=-1;  int sIconHeight=-1;  final Resources resources=context.getResources();  sIconWidth=sIconHeight=(int)resources.getDimension(android.R.dimen.app_icon_size);  final Paint sPaint=new Paint();  final Rect sBounds=new Rect();  final Rect sOldBounds=new Rect();  Canvas sCanvas=new Canvas();  int width=sIconWidth;  int height=sIconHeight;  sCanvas.setDrawFilter(new PaintFlagsDrawFilter(Paint.DITHER_FLAG,Paint.FILTER_BITMAP_FLAG));  final int bitmapWidth=bitmap.getWidth();  final int bitmapHeight=bitmap.getHeight();  if (width > 0 && height > 0) {    if (width < bitmapWidth || height < bitmapHeight) {      final float ratio=(float)bitmapWidth / bitmapHeight;      if (bitmapWidth > bitmapHeight) {        height=(int)(width / ratio);      } else       if (bitmapHeight > bitmapWidth) {        width=(int)(height * ratio);      }      final Config c=(width == sIconWidth && height == sIconHeight) ? bitmap.getConfig() : Config.ARGB_8888;      final Bitmap thumb=Bitmap.createBitmap(sIconWidth,sIconHeight,c);      final Canvas canvas=sCanvas;      final Paint paint=sPaint;      canvas.setBitmap(thumb);      paint.setDither(false);      paint.setFilterBitmap(true);      sBounds.set((sIconWidth - width) / 2,(sIconHeight - height) / 2,width,height);      sOldBounds.set(0,0,bitmapWidth,bitmapHeight);      canvas.drawBitmap(bitmap,sOldBounds,sBounds,paint);      return thumb;    } else     if (bitmapWidth < width || bitmapHeight < height) {      final Config c=Config.ARGB_8888;      final Bitmap thumb=Bitmap.createBitmap(sIconWidth,sIconHeight,c);      final Canvas canvas=sCanvas;      final Paint paint=sPaint;      canvas.setBitmap(thumb);      paint.setDither(false);      paint.setFilterBitmap(true);      canvas.drawBitmap(bitmap,(sIconWidth - bitmapWidth) / 2,(sIconHeight - bitmapHeight) / 2,paint);      return thumb;    }  }  return bitmap;}  }
class C{  public static int mapCIDToValidUnicode(final String fontName,final int cid){  HashMap<Integer,Integer> cidMap=mappedCharacters.get(fontName);  ArrayList<Integer> taken=takenChars.get(fontName);  if (cidMap == null) {    cidMap=new HashMap<Integer,Integer>();    mappedCharacters.put(fontName,cidMap);    taken=new ArrayList<Integer>();    takenChars.put(fontName,taken);    blockForbiddenRanges(taken);  }  final Integer result=cidMap.get(cid);  if (result != null) {    return result;  }  int newCid=cid;  if (cid < 0x20) {    newCid+=0x20;  }  while (taken.contains(newCid) && taken.size() < MAX_CHAR_CODE) {    newCid=(newCid + 1) % MAX_CHAR_CODE;  }  cidMap.put(cid,newCid);  taken.add(newCid);  return newCid;}  }
class C{  public boolean hasOrgName(){  return hasExtension(OrgName.class);}  }
class C{  public void openChat(View view){  Intent intent=new Intent(this,ChatActivity.class);  startActivity(intent);}  }
class C{  public static double parse(String[] options,String option,double defValue) throws Exception {  String value=Utils.getOption(option,options);  if (value.isEmpty())   return defValue; else   return Double.parseDouble(value);}  }
class C{  @Override public int compareTo(DistanceEntry<E> o){  int comp=Double.compare(distance,o.distance);  if (comp != 0) {    return comp;  }  return 0;}  }
class C{  private boolean fillInElements(Map<String,Object> parents,String key,Object value){  if (parents == null) {    return false;  }  if (value instanceof String[]) {    Object pvalue=parents.get(key);    if (pvalue != null && pvalue instanceof String[]) {      String[] strings=(String[])value;      String[] pstrings=(String[])pvalue;      for (int i=0; i < strings.length; i++) {        if (strings[i] == null || strings[i].length() == 0) {          strings[i]=pstrings[i];        }      }      return Arrays.equals(strings,pstrings);    }  }  return false;}  }
class C{  public static void clearConfigurationCache(Class configurationClass){  Set<Map.Entry<File,ConfigurationCacheEntry>> entries=configurationCache.asMap().entrySet();  List<File> keysToInvalidate=new ArrayList<File>();  for (  Map.Entry<File,ConfigurationCacheEntry> entry : entries) {    if (entry.getValue().configurationClass == configurationClass) {      keysToInvalidate.add(entry.getKey());    }  }  configurationCache.invalidateAll(keysToInvalidate);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:22.968 -0400",hash_original_method="C601702085B3E2EF52323098724D8EF9",hash_generated_method="AC3753C6E1AE3DF2C47CC63F86E999F8") private void releaseWaiters(int phase){  QNode q;  Thread t;  AtomicReference<QNode> head=(phase & 1) == 0 ? evenQ : oddQ;  while ((q=head.get()) != null && q.phase != (int)(root.state >>> PHASE_SHIFT)) {    if (head.compareAndSet(q,q.next) && (t=q.thread) != null) {      q.thread=null;      LockSupport.unpark(t);    }  }}  }
class C{  @Override @SuppressWarnings("unchecked") public <T>T unwrap(Class<T> iface) throws SQLException {  if (isWrapperFor(iface)) {    return (T)this;  }  throw DbException.getInvalidValueException("iface",iface);}  }
class C{  protected AbstractKeyValue(K key,V value){  super();  this.key=key;  this.value=value;}  }
class C{  public MetalinkFileBuilder addOs(String os){  if (os != null && !os.isEmpty())   this.os.add(os);  return this;}  }
class C{  public void visitPairProduction(Nonterminal a,PairProduction p){  try {    Nonterminal left=p.getNonterminal1();    Nonterminal right=p.getNonterminal2();    boolean rleft=isRecursive(left);    boolean rright=isRecursive(right);    RE leftRE, rightRE;    if (rleft) {      rightRE=getRE(right);      addCoeff(left,rightRE);    } else     if (rright) {      leftRE=getRE(left);      addCoeff(right,leftRE);    } else {      leftRE=getRE(left);      rightRE=getRE(right);      addTerm(leftRE.concat(rightRE));    }  } catch (  InterruptedException e) {    throw new RuntimeException();  }}  }
class C{  private void sequenceLinearizableQuery(QueryEntry entry,CompletableFuture<QueryResponse> future){  ServerSessionContext session=context.getStateMachine().executor().context().sessions().getSession(entry.getSession());  if (session == null) {    future.complete(logResponse(QueryResponse.builder().withStatus(Response.Status.ERROR).withError(CopycatError.Type.UNKNOWN_SESSION_ERROR).build()));  } else {    if (entry.getSequence() > session.getCommandSequence()) {      session.registerSequenceQuery(entry.getSequence(),null);    } else {      applyQuery(entry,future);    }  }}  }
class C{  @Override public void run(){  amIActive=true;  int row, col, x, y, x1, x2, y1, y2;  int progress;  double z;  int[] dX={1,1,1,0,-1,-1,-1,0};  int[] dY={-1,0,1,1,1,0,-1,-1};  int maxFlowpathLength;  double[][] flowpath1;  double[][] flowpath2;  double dist;  double gridResX, gridResY, diagGridRes;  double[] gridRes;  final double lnOf2=Math.log(2);  byte baseTestByte;  byte testByte;  int curPosFlowpath1, curPosFlowpath2;  boolean flag1, flag2;  int flowDir;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String pntrHeaderFile=args[0];  String outputHeader=args[1];  baseTestByte=30;  if ((pntrHeaderFile == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster pntr1=new WhiteboxRaster(pntrHeaderFile,"r");    int rows=pntr1.getNumberRows();    int rowsLessOne=rows - 1;    int cols=pntr1.getNumberColumns();    int colsLessOne=cols - 1;    double noData=pntr1.getNoDataValue();    gridResX=pntr1.getCellSizeX();    gridResY=pntr1.getCellSizeY();    diagGridRes=Math.sqrt(gridResX * gridResX + gridResY * gridResY);    gridRes=new double[]{diagGridRes,gridResX,diagGridRes,gridResY,diagGridRes,gridResX,diagGridRes,gridResY};    maxFlowpathLength=(int)(2 * Math.sqrt(cols * cols + rows * rows));    WhiteboxRaster pntr2=new WhiteboxRaster(pntrHeaderFile,"r");    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",pntrHeaderFile,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("grey.pal");    output.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    updateProgress("Loop 1 of 2:",-1);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=pntr1.getValue(row,col);        if (z != noData) {          testByte=baseTestByte;          if (row == rowsLessOne) {            testByte=2;          }          if (col == 0) {            testByte=BitOps.clearBit(testByte,(byte)4);          }          if (col == colsLessOne) {            testByte=BitOps.clearBit(testByte,(byte)1);            testByte=BitOps.clearBit(testByte,(byte)2);          }          for (int c=1; c < 5; c++) {            if (BitOps.checkBit(testByte,(byte)c)) {              x=col + dX[c];              y=row + dY[c];              flowpath1=new double[3][maxFlowpathLength];              flowpath2=new double[3][maxFlowpathLength];              x1=col;              y1=row;              x2=col + dX[c];              y2=row + dY[c];              curPosFlowpath1=0;              curPosFlowpath2=0;              flowpath1[0][curPosFlowpath1]=x1;              flowpath1[1][curPosFlowpath1]=y1;              flowpath1[2][curPosFlowpath1]=0;              flowpath2[0][curPosFlowpath1]=x2;              flowpath2[1][curPosFlowpath1]=y2;              flowpath2[2][curPosFlowpath1]=0;              flag1=true;              flag2=true;              do {                if (flag1) {                  flowDir=(int)pntr1.getValue(y1,x1);                  if (flowDir > 0) {                    curPosFlowpath1++;                    flowDir=(int)(Math.log(flowDir) / lnOf2);                    dist=gridRes[flowDir];                    x1+=dX[flowDir];                    y1+=dY[flowDir];                    flowpath1[0][curPosFlowpath1]=x1;                    flowpath1[1][curPosFlowpath1]=y1;                    flowpath1[2][curPosFlowpath1]=flowpath1[2][curPosFlowpath1 - 1] + dist;                    for (int d=curPosFlowpath2; d >= 0; d--) {                      if (flowpath2[0][d] == x1 && flowpath2[1][d] == y1) {                        dist=flowpath1[2][curPosFlowpath1];                        if (output.getValue(row,col) < dist) {                          output.setValue(row,col,dist);                        }                        dist=flowpath2[2][d];                        if (output.getValue(y,x) < dist) {                          output.setValue(y,x,dist);                        }                        flag1=false;                        flag2=false;                        break;                      }                    }                  } else {                    flag1=false;                    if (!flag2) {                      dist=flowpath1[2][curPosFlowpath1];                      if (output.getValue(row,col) < dist) {                        output.setValue(row,col,dist);                      }                      dist=flowpath2[2][curPosFlowpath2];                      if (output.getValue(y,x) < dist) {                        output.setValue(y,x,dist);                      }                      break;                    }                  }                }                if (flag2) {                  flowDir=(int)pntr2.getValue(y2,x2);                  if (flowDir > 0) {                    curPosFlowpath2+=1;                    flowDir=(int)(Math.log(flowDir) / lnOf2);                    dist=gridRes[flowDir];                    x2+=dX[flowDir];                    y2+=dY[flowDir];                    flowpath2[0][curPosFlowpath2]=x2;                    flowpath2[1][curPosFlowpath2]=y2;                    flowpath2[2][curPosFlowpath2]=flowpath2[2][curPosFlowpath2 - 1] + dist;                    for (int d=curPosFlowpath1; d >= 0; d--) {                      if (flowpath1[0][d] == x2 && flowpath1[1][d] == y2) {                        dist=flowpath2[2][curPosFlowpath2];                        if (output.getValue(y,x) < dist) {                          output.setValue(y,x,dist);                        }                        dist=flowpath1[2][d];                        if (output.getValue(row,col) < dist) {                          output.setValue(row,col,dist);                        }                        flag1=false;                        flag2=false;                        break;                      }                    }                  } else {                    flag2=false;                    if (!flag1) {                      dist=flowpath1[2][curPosFlowpath1];                      if (output.getValue(row,col) < dist) {                        output.setValue(row,col,dist);                      }                      dist=flowpath2[2][curPosFlowpath2];                      if (output.getValue(y,x) < dist) {                        output.setValue(y,x,dist);                      }                      break;                    }                  }                }              } while (flag1 || flag2);            }          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 1 of 2:",progress);    }    updateProgress("Loop 2 of 2:",-1);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (output.getValue(row,col) != noData) {          output.setValue(row,col,output.getValue(row,col) / 1000);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 2 of 2:",progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr1.close();    pntr2.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static void uncheckedClose(InputStream inStream,boolean rethrowAsUnchecked){  try {    inStream.close();  } catch (  IOException e) {    if (rethrowAsUnchecked)     throw melnorme.utilbox.core.ExceptionAdapter.unchecked(e);  }}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  private void validateState(State current){  ValidationUtils.validateState(current);  if (current.host != null) {    checkState(StringUtils.isNotBlank(current.host),"host cannot be blank");  }  ValidationUtils.validateTaskStage(current.taskState);switch (current.taskState.stage) {case STARTED:    checkState(current.taskState.subStage != null,"Invalid subStage " + Utils.toJson(false,false,current.taskState));switch (current.taskState.subStage) {case TRIGGER_SCAN:    checkNotNull(current.host,"host cannot be null");}break;default :checkState(current.taskState.subStage == null,"Invalid subStage " + Utils.toJson(false,false,current.taskState));}}  }
class C{  public int read() throws IOException {  if (this.closed) {    throw new IOException("Attempted read from closed stream.");  }  if (this.eof) {    return -1;  }  if (this.pos >= this.chunkSize) {    nextChunk();    if (this.eof) {      return -1;    }  }  pos++;  return in.read();}  }
class C{  public V remove(long key){  V prev=null;  int index=index(key);  if (index >= 0) {    prev=unwrapNull(_values[index]);    removeAt(index);  }  return prev;}  }
class C{  public Integer addMapping(@Nullable ExtensionMapping mapping) throws IllegalArgumentException {  if (mapping != null && mapping.getExtension() != null) {    if (!mapping.isCore() && !hasCore()) {      throw new IllegalArgumentException("Cannot add extension mapping before a core mapping exists");    }    Integer index=getMappings(mapping.getExtension().getRowType()).size();    this.mappings.add(mapping);    return index;  }  return null;}  }
class C{  public InsufficientResourcesException(){  super();}  }
class C{  public boolean matches(Object o){  if (this == o)   return true;  if (o == null)   return false;  if (o instanceof QName) {    final QName qName=(QName)o;    if (!namespaceURI.equals(qName.namespaceURI) && !namespaceURI.equals("*") && !qName.namespaceURI.equals("*"))     return false;    return localPart.equals(qName.localPart) || localPart.equals("*") || qName.localPart.equals("*");  } else   if (o instanceof String) {    final String string=(String)o;    if (string.length() == 0)     return false;    int lastColonIndex=string.lastIndexOf(":");    if (lastColonIndex < 0 && prefix.length() == 0)     return string.equals(localPart);    if (lastColonIndex < 0 || lastColonIndex == string.length() - 1)     return false;    final String stringPrefix=string.substring(0,lastColonIndex);    final String stringLocalPart=string.substring(lastColonIndex + 1);    if (stringPrefix.equals(prefix) || stringPrefix.equals(namespaceURI) || stringPrefix.equals("*")) {      return localPart.equals(stringLocalPart) || stringLocalPart.equals("*");    }  }  return false;}  }
class C{  public Path append(Object... states){  Path appendedPath=new Path();  appendedPath.addAll(this);  for (int i=0; i < states.length; i++) {    appendedPath.add(states[i]);  }  return appendedPath;}  }
class C{  private CDataFunctions(){}  }
class C{  public DtoAssociationServiceImpl(final DtoFactory dtoFactory,final GenericService<Association> associationGenericService,final AdaptersRepository adaptersRepository){  super(dtoFactory,associationGenericService,adaptersRepository);}  }
class C{  private void migrateVdcConfigToZk(){  List<URI> vdcIds=dbClient.queryByType(VirtualDataCenter.class,true);  for (  URI vdcId : vdcIds) {    VirtualDataCenter vdc=dbClient.queryObject(VirtualDataCenter.class,vdcId);    if (vdc.getLocal()) {      continue;    }    ConfigurationImpl vdcConfig=new ConfigurationImpl();    vdcConfig.setKind(Site.CONFIG_KIND);    vdcConfig.setId(vdc.getShortId());    coordinatorClient.persistServiceConfiguration(vdcConfig);    Site site=new Site();    site.setUuid(UUID.randomUUID().toString());    site.setName("Default Active Site");    site.setVdcShortId(vdc.getShortId());    site.setSiteShortId(Constants.CONFIG_DR_FIRST_SITE_SHORT_ID);    site.setHostIPv4AddressMap(vdc.getHostIPv4AddressesMap());    site.setHostIPv6AddressMap(vdc.getHostIPv6AddressesMap());    site.setState(SiteState.ACTIVE);    site.setCreationTime(System.currentTimeMillis());    site.setVip(vdc.getApiEndpoint());    site.setNodeCount(vdc.getHostCount());    coordinatorClient.persistServiceConfiguration(site.toConfiguration());    SiteInfo siteInfo=new SiteInfo(System.currentTimeMillis(),SiteInfo.NONE);    coordinatorClient.setTargetInfo(siteInfo);  }  log.info("Migrated vdc config from db to zk");}  }
class C{  public void close(){}  }
class C{  public boolean isEditable(ServiceClient sc){  boolean editable=false;  if (this.getEstado() == PrestamosConstants.ESTADO_PRESTAMO_ABIERTO && this.getIdusrgestor().equalsIgnoreCase(sc.getId()))   editable=true;  return editable;}  }
class C{  protected TableCellRenderer createDefaultRenderer(){  return new DefaultTableCellHeaderRenderer();}  }
class C{  public static byte[] encodeVarLong(long value){  int size=sizeOfVarLong(value);  byte[] ret=new byte[size];  encodeVarLongForSize(value,ret,size);  return ret;}  }
class C{  public AttributeMetaInfo(ProtectedProperties metadata,Attribute att){  setMetadata(metadata,att);}  }
class C{  public static Map<String,Float> parseFieldBoosts(String in){  return parseFieldBoosts(new String[]{in});}  }
class C{  public static short[] toPrimitive(Short[] array,short valueForNull){  if (array == null) {    return null;  } else   if (array.length == 0) {    return EMPTY_SHORT_ARRAY;  }  final short[] result=new short[array.length];  for (int i=0; i < array.length; i++) {    Short b=array[i];    result[i]=(b == null ? valueForNull : b.shortValue());  }  return result;}  }
class C{  public boolean supportsSchemasInDataManipulation() throws SQLException {  return false;}  }
