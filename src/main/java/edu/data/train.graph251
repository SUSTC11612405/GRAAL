class C{  private Map<ContextKey,ContextValue<?>> createSubscriptionPmContext(String subscriptionId,String tenantId){  if (!emptyString(subscriptionId) && !emptyString(tenantId)) {    Map<ContextKey,ContextValue<?>> context=new HashMap<ContextKey,ContextValue<?>>();    context.put(ContextKey.SUBSCRIPTION_ID,new ContextValueString(subscriptionId));    context.put(ContextKey.TENANT_ID,new ContextValueString(tenantId));    return context;  }  return null;}  }
class C{  private static float centerFromEnd(int[] stateCount,int end){  return (float)(end - stateCount[2]) - stateCount[1] / 2.0f;}  }
class C{  protected SparseEdge(){}  }
class C{  private StringPart createStringPart(final String name,final String value){  final StringPart stringPart=new StringPart(name,value);  stringPart.setTransferEncoding(null);  stringPart.setContentType(null);  return stringPart;}  }
class C{  private void installTitlePane(){  installDefaults();  installListeners();  createActions();  enableActions();  createActionMap();  setLayout(createLayout());  assembleSystemMenu();  createButtons();  addSubComponents();}  }
class C{  public void testGetPool(){  testGetPool(mainPool());}  }
class C{  public static int dip2px(Context context,float dp){  if (context == null) {    return -1;  }  return (int)(dipToPx(context,dp) + 0.5f);}  }
class C{  public EnterState createEnterState(){  EnterStateImpl enterState=new EnterStateImpl();  return enterState;}  }
class C{  public CompareResult<RouteInfo> compareRoutes(LinkProperties target){  CompareResult<RouteInfo> result=new CompareResult<>();  result.removed=new ArrayList<>(mRoutes);  result.added.clear();  if (target != null) {    for (    RouteInfo r : target.getRoutes()) {      if (!result.removed.remove(r)) {        result.added.add(r);      }    }  }  return result;}  }
class C{  private static Pattern importStringToPattern(String s,Processor p,Log log){  if (isValidImportString(s)) {    return validImportStringToPattern(s);  } else {    log.warning("proc.malformed.supported.string",s,p.getClass().getName());    return noMatches;  }}  }
class C{  final boolean isMatched(){  Object x=item;  return (x == this) || ((x == null) == isData);}  }
class C{  private RevocationEndpoint(){}  }
class C{  private void exportText(){  JFileChooser jc=new JFileChooser();  jc.setDialogTitle(Msg.getMsg(Env.getCtx(),"ExportText"));  jc.setDialogType(JFileChooser.SAVE_DIALOG);  jc.setFileSelectionMode(JFileChooser.FILES_ONLY);  if (jc.showSaveDialog(this) != JFileChooser.APPROVE_OPTION)   return;  try {    BufferedWriter bout=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(jc.getSelectedFile())));    bout.write(textArea.getText());    bout.flush();    bout.close();  } catch (  Exception e) {    log.log(Level.WARNING,e.getMessage());  }}  }
class C{  public Identifier findNextMethodName(String originalSignature,Identifier originalName){  String signature=originalSignature;  Identifier name=originalName;  int n=1;  while (!methodsSignatures.add(signature)) {    String suffix="$" + (++n);    name=ident(originalName + suffix);    int i=originalSignature.indexOf("(");    signature=originalSignature.substring(0,i) + suffix + originalSignature.substring(i);  }  return name;}  }
class C{  private static int findToken(Token token,String str,int startIndex,boolean doLowerCase){  final int tokMax=token.chunk.length - 1;  final int strLength=str.length();  int left=startIndex;  outer:   while (left < strLength) {    int tail=left + tokMax;    if (tail >= strLength) {      return -1;    }    char ch=str.charAt(tail);    if (doLowerCase) {      ch=Character.toLowerCase(ch);    }    int right=tokMax;    if ((ch == token.chunk[right]) || token.wildIndex.get(right)) {      int nextStart=tail + 1;      while ((--tail >= left) && (--right >= 0)) {        ch=str.charAt(tail);        if (doLowerCase) {          ch=Character.toLowerCase(ch);        }        if ((ch != token.chunk[right]) && !token.wildIndex.get(right)) {          Integer d=token.getRightIndex(ch);          if ((d != null) && (d < right)) {            left+=right - d;          } else {            left+=1;          }          continue outer;        }      }      return nextStart;    } else {      Integer d=token.getRightIndex(ch);      left+=(d == null) ? token.chunk.length : right - d;    }  }  return -1;}  }
class C{  public boolean isHasHours(){  return hasHours;}  }
class C{  public S_Experiment createS_Experiment(){  S_ExperimentImpl s_Experiment=new S_ExperimentImpl();  return s_Experiment;}  }
class C{  public Vector(){  this(DEFAULT_SIZE,0);}  }
class C{  public boolean hasUsages(int usages){  return (bitString.intValue() & usages) == usages;}  }
class C{  public boolean isElementVirtualized(ElKey el){  return !isElementAllowed(el) && !SCRIPT.equals(el) && !STYLE.equals(el);}  }
class C{  public void test_copyLjava_util_ListLjava_util_List(){  try {    Collections.copy(null,ll);    fail("Expected NullPointerException for null list first parameter");  } catch (  NullPointerException e) {  }  try {    Collections.copy(ll,null);    fail("Expected NullPointerException for null list second parameter");  } catch (  NullPointerException e) {  }  final int llSize=ll.size();  ll.set(25,null);  ArrayList al=new ArrayList();  Integer extraElement=new Integer(1);  Integer extraElement2=new Integer(2);  al.addAll(myReversedLinkedList);  al.add(extraElement);  al.add(extraElement2);  Collections.copy(al,ll);  for (int counter=0; counter < llSize; counter++) {    assertTrue("Elements do not match after copying collection",al.get(counter) == ll.get(counter));  }  assertTrue("Elements after copied elements affected by copy",extraElement == al.get(llSize) && extraElement2 == al.get(llSize + 1));  ArrayList ar1=new ArrayList();  ArrayList ar2=new ArrayList();  int i;  for (i=0; i < 5; i++) {    ar2.add(new Integer(i));  }  for (i=0; i < 10; i++) {    ar1.add(new Integer(i));  }  try {    Collections.copy(ar2,ar1);    fail("IndexOutOfBoundsException expected");  } catch (  IndexOutOfBoundsException e) {  }  Mock_ArrayList mal1=new Mock_ArrayList();  Mock_ArrayList mal2=new Mock_ArrayList();  for (i=0; i < 10; i++) {    mal1.add(new Integer(i));    mal2.add(new Integer(10 - i));  }  try {    Collections.copy(mal1,mal2);    fail("UnsupportedOperationException expected");  } catch (  UnsupportedOperationException e) {  }}  }
class C{  public boolean hasNext(){  return m_last > m_index;}  }
class C{  public void testMinWordLength() throws Exception {  Reader reader=new StringReader("helo testing");  TokenStream stream=whitespaceMockTokenizer(reader);  stream=tokenFilterFactory("Capitalization","onlyFirstWord","true","minWordLength","5").create(stream);  assertTokenStreamContents(stream,new String[]{"helo","Testing"});}  }
class C{  private void checkTransactionalWriter(){  if (rowSetWriter != null) {    Class<?> c=rowSetWriter.getClass();    if (c != null) {      Class<?>[] theInterfaces=c.getInterfaces();      for (int i=0; i < theInterfaces.length; i++) {        if ((theInterfaces[i].getName()).indexOf("TransactionalWriter") > 0) {          tXWriter=true;          establishTransactionalWriter();        }      }    }  }}  }
class C{  protected Object toType(Calendar value){  return value.getTime();}  }
class C{  public void showPopup(){  requestFocus();  int m=minimumLength;  minimumLength=0;  setText(getText());  minimumLength=m;}  }
class C{  private void initServer(){  String ior=null;  org.omg.CORBA.Object object=null;  com.bbn.openmap.util.corba.CORBASupport cs=new com.bbn.openmap.util.corba.CORBASupport();  try {    object=cs.readIOR(iorURL);    server=ServerHelper.narrow(object);  } catch (  IOException ioe) {    if (Debug.debugging("crfp")) {      Debug.output("CRFPClient.initServer() IO Exception with ior: " + iorURL);    }    server=null;    return;  }  if (server == null) {    object=cs.resolveName(naming);    if (object != null) {      server=ServerHelper.narrow(object);      if (Debug.debugging("crfp")) {        Debug.output("Have a RPF server:");        Debug.output("*** Server: is a " + server.getClass().getName() + "\n"+ server);      }    }  }  if (Debug.debugging("crfp")) {    if (server == null) {      Debug.error("CRFPClient.initServer: null server!\n  IOR=" + ior + "\n  Name = "+ naming);    } else {      Debug.output("CRFPClient: server is golden.");    }  }}  }
class C{  public static double pdf(double val,double loc,double scale,double shape){  if (val == Double.POSITIVE_INFINITY || val == Double.NEGATIVE_INFINITY) {    return 0.;  }  val=(val - loc) / scale;  double e=Math.exp(-val);  double f=1. + e;  return e < Double.POSITIVE_INFINITY ? shape * e / (scale * Math.pow(f,shape + 1.)) : 0.;}  }
class C{  Name(int index,BasicType type){  this(index,type,null,null);}  }
class C{  public AttributeConverter<?> putAttributeConverter(final Class<?> clazz,final AttributeConverter<?> converter){  return this.converters.put(clazz.getCanonicalName(),converter);}  }
class C{  public static void main(String[] args){  SimplePlatformer simulation=new SimplePlatformer();  simulation.run();}  }
class C{  public void testDoc2_Query1_Slop_6_or_more_Should_match() throws Exception {  for (int slop=0; slop < 30; slop++) {    int numResultsExpected=slop < 6 ? 0 : 1;    float freq1=checkPhraseQuery(DOC_2,QUERY_1,slop,numResultsExpected);    if (numResultsExpected > 0) {      float freq2=checkPhraseQuery(DOC_2_B,QUERY_1,slop,1);      assertTrue("slop=" + slop + " freq2="+ freq2+ " should be greater than freq1 "+ freq1,freq2 > freq1);    }  }}  }
class C{  public static Time convertNanoToTime(long nanosSinceMidnight){  long millis=nanosSinceMidnight / 1000000;  long s=millis / 1000;  millis-=s * 1000;  long m=s / 60;  s-=m * 60;  long h=m / 60;  m-=h * 60;  long ms=getMillis(null,1970,1,1,(int)(h % 24),(int)m,(int)s,(int)millis);  return new Time(ms);}  }
class C{  public static void ellipse(double x,double y,double semiMajorAxis,double semiMinorAxis){  if (semiMajorAxis < 0)   throw new IllegalArgumentException("ellipse semimajor axis must be nonnegative");  if (semiMinorAxis < 0)   throw new IllegalArgumentException("ellipse semiminor axis must be nonnegative");  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(2 * semiMajorAxis);  double hs=factorY(2 * semiMinorAxis);  if (ws <= 1 && hs <= 1)   pixel(x,y); else   offscreen.draw(new Ellipse2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));  draw();}  }
class C{  public List findByNameSurname(String name,String surname){  return usuarioDBEntity.findByNameSurname(name,surname);}  }
class C{  public AccountHeaderBuilder withCompactStyle(boolean compactStyle){  this.mCompactStyle=compactStyle;  return this;}  }
class C{  public void resetSQLDetail(){  params.sqlBuffer.reset();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:25.156 -0500",hash_original_method="C7A05AF6A5D2D21D6919D5ED21917266",hash_generated_method="547CB286ADA112686071CC71595FDC63") public void translate(float x,float y,float z){  addTaint(x);  addTaint(y);  addTaint(z);}  }
class C{  public static double logOfBase(double base,double num){  return Math.log(num) / Math.log(base);}  }
class C{  public void show(){  visible=true;  if (lifecycleCallbacks.lastForegroundActivity != null) {    addGridView(lifecycleCallbacks.lastForegroundActivity);  }}  }
class C{  public void keyTyped(final KeyEvent k){}  }
class C{  private void putProviderInfo(){  super.put("Provider.id name",(name != null) ? name : "null");  super.put("Provider.id version",versionString);  super.put("Provider.id info",(info != null) ? info : "null");  super.put("Provider.id className",this.getClass().getName());}  }
class C{  public FitZoom(AbstractChart chart){  super(chart);}  }
class C{  public char[] GetSuffix(int len){  char[] ret=new char[len];  if ((bufpos + 1) >= len)   System.arraycopy(buffer,bufpos - len + 1,ret,0,len); else {    System.arraycopy(buffer,bufsize - (len - bufpos - 1),ret,0,len - bufpos - 1);    System.arraycopy(buffer,0,ret,len - bufpos - 1,bufpos + 1);  }  return ret;}  }
class C{  @Override public boolean supportsResultSetHoldability(int holdability){  debugCodeCall("supportsResultSetHoldability",holdability);  return holdability == ResultSet.CLOSE_CURSORS_AT_COMMIT;}  }
class C{  @Override public void onChangedRemoved(final RPObject object,final RPObject changes){  super.onChangedRemoved(object,changes);  if (changes.has("hidden")) {    hidden=false;  }}  }
class C{  public Builder useAndroidLog(boolean useAndroidLog){  this.useAndroidLog=useAndroidLog;  return this;}  }
class C{  public String toString(){  return getVersion();}  }
class C{  private void endRemoteCommand(){  String remoteCommand=popString();  Object top=stack.peek();  Assert.assertTrue(top != null);  if (top instanceof DistributedSystemConfig) {    ((DistributedSystemConfig)top).setRemoteCommand(remoteCommand);  } else   if (top instanceof ManagedEntityConfig) {    ((ManagedEntityConfig)top).setRemoteCommand(remoteCommand);  } else {    String s="Did not expect a " + top.getClass().getName() + " on top of the stack";    Assert.assertTrue(false,s);  }}  }
class C{  public Set<String> origins(){  ensureEnabled();  return origins;}  }
class C{  public SafeCalendar endDate(){  return endDate;}  }
class C{  protected void check(){  checkmark.removeAttribute(SVGConstants.SVG_STYLE_ATTRIBUTE);  checked=true;  fireSwitchEvent(new ChangeEvent(SVGCheckbox.this));}  }
class C{  public static String toBigqueryTimestamp(long timestamp,TimeUnit unit){  long seconds=unit.toSeconds(timestamp);  long fractionalSeconds=unit.toMicros(timestamp) % 1000000;  return String.format("%d.%06d",seconds,fractionalSeconds);}  }
class C{  public RegionAttributesImpl(){}  }
class C{  public String validateCostingMethod(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  if (isCalloutActive() || value == null)   return "";  I_C_AcctSchema as=GridTabWrapper.create(mTab,I_C_AcctSchema.class);  if (!as.getCostingMethod().equals(as.getM_CostType().getCostingMethod()))   mTab.fireDataStatusEEvent("","The Costing method defined in Cost Type not match with the Costing Method defined in Account Schema",false);  return "";}  }
class C{  private View findFocusableViewInBounds(boolean topFocus,int top,int bottom){  List<View> focusables=getFocusables(View.FOCUS_FORWARD);  View focusCandidate=null;  boolean foundFullyContainedFocusable=false;  int count=focusables.size();  for (int i=0; i < count; i++) {    View view=focusables.get(i);    int viewTop=view.getTop();    int viewBottom=view.getBottom();    if (top < viewBottom && viewTop < bottom) {      final boolean viewIsFullyContained=(top < viewTop) && (viewBottom < bottom);      if (focusCandidate == null) {        focusCandidate=view;        foundFullyContainedFocusable=viewIsFullyContained;      } else {        final boolean viewIsCloserToBoundary=(topFocus && viewTop < focusCandidate.getTop()) || (!topFocus && viewBottom > focusCandidate.getBottom());        if (foundFullyContainedFocusable) {          if (viewIsFullyContained && viewIsCloserToBoundary) {            focusCandidate=view;          }        } else {          if (viewIsFullyContained) {            focusCandidate=view;            foundFullyContainedFocusable=true;          } else           if (viewIsCloserToBoundary) {            focusCandidate=view;          }        }      }    }  }  return focusCandidate;}  }
class C{  public void releaseBufferIfNotLogging(){  if (!logQuery && buffer != null && ((buffer.capacity() > 4194304 && buffer.limit() * BIG_SIZE_INCREASE < buffer.capacity()) || (buffer.capacity() <= 4194304 && buffer.limit() * NORMAL_INCREASE < buffer.capacity()))) {    buffer=firstBuffer;  }}  }
class C{  public Builder(){  localeBuilder=new InternalLocaleBuilder();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:15.927 -0500",hash_original_method="0BE753B103EB5E27F0AD9CE4B67E8D14",hash_generated_method="DA3C9DFD280268761F4161BB76907E1D") public DERObject toASN1Object(){  return seq;}  }
class C{  public int size(Key lo,Key hi){  if (lo == null)   throw new NullPointerException("first argument to size() is null");  if (hi == null)   throw new NullPointerException("second argument to size() is null");  if (lo.compareTo(hi) > 0)   return 0;  if (contains(hi))   return rank(hi) - rank(lo) + 1; else   return rank(hi) - rank(lo);}  }
class C{  public LessThan(){  super(Boolean.class,Number.class,Number.class);}  }
class C{  public void draw(Canvas c,Rect bounds){  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mPaint.setColor(mCurrentColor);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);  if (mAlpha < 255) {    mCirclePaint.setColor(mBackgroundColor);    mCirclePaint.setAlpha(255 - mAlpha);    c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  }}  }
class C{  public SystemPropertyCapabilityTest(String testName,EnvironmentTestData testData) throws Exception {  super(testName,testData);}  }
class C{  private void save(){  String fname=getSaveFileName();  Writer fo;  try {    fo=new OutputStreamWriter(new FileOutputStream(fname),"UTF-8");    try {      textPane.write(fo);    }  finally {      fo.close();    }    addLine("","Chat log has been saved to " + fname,NotificationType.CLIENT);  } catch (  final IOException ex) {    logger.error(ex,ex);  }}  }
class C{  @SuppressWarnings("unchecked") public String parseLine(String line,int lineNo) throws Exception {  log.config(lineNo + " : " + line);  if (line.trim().length() == 0) {    log.log(Level.WARNING,"Line " + lineNo + " is empty, ignored. ");    return "";  }  StringBuffer newLine=new StringBuffer();  StringTokenizer st=new StringTokenizer(line,"\"",false);  if ((st == null) || (st.countTokens() == 0)) {    log.log(Level.SEVERE,"Parse error: No \\\" found in line: " + lineNo);    return "";  }  newLine.append(st.nextToken());  while (st.hasMoreElements()) {    String s=st.nextToken();    newLine.append(s.replace(',',' '));    if (st.hasMoreTokens())     newLine.append(st.nextToken());  }  newLine.append(" ");  String pLine=Util.replace(newLine.toString(),",,",", ,");  pLine=Util.replace(pLine,",,",", ,");  st=new StringTokenizer(pLine,",",false);  if (st.countTokens() == 1) {    log.log(Level.SEVERE,"Ignored: Require ',' as separator - " + pLine);    return "";  }  if (st.countTokens() < 9) {    log.log(Level.SEVERE,"Ignored: FieldNumber wrong: " + st.countTokens() + " - "+ pLine);    return "";  }  String Value=null, Name=null, Description=null, AccountType=null, AccountSign=null, IsDocControlled=null, IsSummary=null, Default_Account=null;  for (int i=0; i < 8 && st.hasMoreTokens(); i++) {    String s=st.nextToken().trim();    if (s.startsWith("[") && s.endsWith("]"))     return "";    if (s == null)     s="";    if (i == 0)     Value=s; else     if (i == 1)     Name=s; else     if (i == 2)     Description=s; else     if (i == 3)     AccountType=s.length() > 0 ? String.valueOf(s.charAt(0)) : "E"; else     if (i == 4)     AccountSign=s.length() > 0 ? String.valueOf(s.charAt(0)) : "N"; else     if (i == 5)     IsDocControlled=s.length() > 0 ? String.valueOf(s.charAt(0)) : "N"; else     if (i == 6)     IsSummary=s.length() > 0 ? String.valueOf(s.charAt(0)) : "N"; else     if (i == 7)     Default_Account=s;  }  if ((Value == null || Value.length() == 0) && (Name == null || Name.length() == 0))   return "";  if (Default_Account == null || Default_Account.length() == 0)   return "";  if (IsSummary == null || IsSummary.length() == 0)   IsSummary="N";  if (!IsSummary.equals("N"))   return "";  if (AccountType == null || AccountType.length() == 0)   AccountType="E";  if (AccountSign == null || AccountSign.length() == 0)   AccountSign="N";  if (IsDocControlled == null || IsDocControlled.length() == 0)   IsDocControlled="N";  try {    MElementValue na=(MElementValue)m_valueMap.get(Value);    if (na == null) {      na=new MElementValue(m_ctx,Value,Name,Description,AccountType,AccountSign,IsDocControlled.toUpperCase().startsWith("Y"),IsSummary.toUpperCase().startsWith("Y"),m_trxName);      m_valueMap.put(Value,na);    }    put((K)Default_Account.toUpperCase(),(V)na);  } catch (  Exception e) {    return (e.getMessage());  }  return "";}  }
class C{  public void visitEnd(){  if (fv != null) {    fv.visitEnd();  }}  }
class C{  public DSETestGenerator(){  this(null);}  }
class C{  public static void submitTopology(SamzaTopology topo){  engine._setupSystemsUtils();  engine._submitTopology(topo);}  }
class C{  private void checkPeerCertificatesPresent() throws SSLPeerUnverifiedException {  if (peerCertificates == null || peerCertificates.length == 0) {    throw new SSLPeerUnverifiedException("No peer certificates");  }}  }
class C{  private GalgoOptions(Builder builder){  numberOfLines=builder.numberOfLines;  backgroundColor=builder.backgroundColor;  textColor=builder.textColor;  textSize=builder.textSize;}  }
class C{  public static void picture(double x,double y,String s){  Image image=getImage(s);  double xs=scaleX(x);  double ys=scaleY(y);  int ws=image.getWidth(null);  int hs=image.getHeight(null);  if (ws < 0 || hs < 0)   throw new IllegalArgumentException("image " + s + " is corrupt");  offscreen.drawImage(image,(int)Math.round(xs - ws / 2.0),(int)Math.round(ys - hs / 2.0),null);  draw();}  }
class C{  @Override protected void append(E eventObject){  if (!isStarted()) {    return;  }  if (evWarnError != null) {    ILoggingEvent ev=((ILoggingEvent)eventObject);    if (ev.getLevel().equals(Level.ERROR) || ev.getLevel().equals(Level.WARN)) {      evWarnError.newEventWithFlush(new WarnErrorEvent(ev.getFormattedMessage(),ev.getLevel(),ev.getThreadName(),ev.getLoggerName()));    }  }}  }
class C{  public GarbageCollectorMetricSet(){  this(ManagementFactory.getGarbageCollectorMXBeans());}  }
class C{  public static int size(JMenuBar self){  return self.getMenuCount();}  }
class C{  final boolean needsConversionToLambda(){  return interfaceParameterIsIntersectionType() || isSuper || needsVarArgsConversion()|| isArrayOp()|| isPrivateInOtherClass()|| !receiverAccessible()|| (tree.getMode() == ReferenceMode.NEW && tree.kind != ReferenceKind.ARRAY_CTOR && (tree.sym.owner.isLocal() || tree.sym.owner.isInner()));}  }
class C{  public static void anonymousLogin(String appid,String clientSecret){  ConnectionRequest req=new ConnectionRequest();  req.setPost(false);  req.setUrl("https://graph.facebook.com/oauth/access_token");  req.addArgument("client_id",appid);  req.addArgument("client_secret",clientSecret);  req.addArgument("grant_type","client_credentials");  NetworkManager.getInstance().addToQueueAndWait(req);  if (req.getResponseData() != null) {    token=new String(req.getResponseData());    token=token.substring(token.indexOf('=') + 1);  }}  }
class C{  private void copySourceInformation(Bee dest,Bee src){  dest.sourceQuality=src.sourceQuality;  dest.sourceDirection=new J3dPolar(src.sourceDirection);  dest.setColor(src.getVisualizationObject().getColor());  dest.sourceConcentration=src.sourceConcentration;  dest.setFoodSource(src.foodSource);}  }
class C{  public static double threshold(double val,double min,double max){  return Math.min(max,Math.max(min,val));}  }
class C{  @Override public void flush(){  this.delegate.flush();}  }
class C{  public static String formatDateTime(Date date){  return getSimplDateFormat(DF_TIME).format(date);}  }
class C{  public static boolean awaitFlush(long timeout) throws InterruptedException {  return client().waitUntilEmpty(timeout);}  }
class C{  private Bitmap processBitmap(int resId){  if (BuildConfig.DEBUG) {    Log.d(TAG,"processBitmap - " + resId);  }  return decodeSampledBitmapFromResource(mResources,resId,mImageWidth,mImageHeight,getImageCache());}  }
class C{  public void testSignerStringIdentityScope() throws Exception {  Signer s=new SignerStub("sss4",IdentityScope.getSystemScope());  assertNotNull(s);  assertEquals("sss4",s.getName());  assertSame(IdentityScope.getSystemScope(),s.getScope());  assertNull(s.getPrivateKey());  try {    Signer s2=new SignerStub("sss4",IdentityScope.getSystemScope());    fail("expected KeyManagementException not thrown");  } catch (  KeyManagementException e) {  }  Signer s2=new SignerStub(null);  assertNull(s2.getName());}  }
class C{  protected void initFromDir(File dir){  if (VERBOSE) {    System.out.println("Analyzing directory: " + dir);  }  initFromDir(null,dir);}  }
class C{  protected String computeFullUrl(URL baseUrl,String link){  if (link == null || link.length() == 0) {    return null;  }  if (!link.startsWith("http")) {    if (link.startsWith("/")) {      link=baseUrl.getProtocol() + "://" + baseUrl.getAuthority()+ link;    } else {      if (link.contains(":")) {        return null;      }      String path=baseUrl.getPath();      if (!path.endsWith("/")) {        int sep=path.lastIndexOf("/");        String file=path.substring(sep + 1);        if (file.contains(".") || file.contains("?"))         path=path.substring(0,sep);      }      link=baseUrl.getProtocol() + "://" + baseUrl.getAuthority()+ path+ "/"+ link;    }  }  link=normalizeUrlEnding(link);  String l=link.toLowerCase(Locale.ROOT);  if (l.endsWith(".jpg") || l.endsWith(".jpeg") || l.endsWith(".png")|| l.endsWith(".gif")) {    return null;  }  return link;}  }
class C{  public CSSPseudoClassCondition(String namespaceURI,String value){  super(value);  this.namespaceURI=namespaceURI;}  }
class C{  public void close(){  state=State.DELETE;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:28.184 -0500",hash_original_method="B035E9969048B9A33AAF34D9AA865F8C",hash_generated_method="8EFF349340EF5493E8744793A91FA890") public static boolean isSipWifiOnly(Context context){  return context.getResources().getBoolean(com.android.internal.R.bool.config_sip_wifi_only);}  }
class C{  public void flushPending() throws SAXException {  if (m_needToCallStartDocument) {    startDocumentInternal();    m_needToCallStartDocument=false;  }  if (m_elemContext.m_startTagOpen) {    closeStartTag();    m_elemContext.m_startTagOpen=false;  }  if (m_cdataTagOpen) {    closeCDATA();    m_cdataTagOpen=false;  }  if (m_writer != null) {    try {      m_writer.flush();    } catch (    IOException e) {    }  }}  }
class C{  private Separation findSeparation(Relation<NumberVector> relation,DBIDs currentids,int dimension,Random r){  Separation separation=new Separation();  int samples=(int)Math.min(Math.log(NOT_FROM_ONE_CLUSTER_PROBABILITY) / (Math.log(1 - Math.pow((1.0d / samplingLevel),dimension))),(double)currentids.size());  int remaining_retries=100;  for (int i=1; i <= samples; i++) {    DBIDs sample=DBIDUtil.randomSample(currentids,dimension + 1,r);    final DBIDIter iter=sample.iter();    double[] originV=relation.get(iter).toArray();    iter.advance();    double[][] basis;{      List<double[]> vectors=new ArrayList<>(sample.size() - 1);      for (; iter.valid(); iter.advance()) {        double[] vec=relation.get(iter).toArray();        vectors.add(minusEquals(vec,originV));      }      basis=generateOrthonormalBasis(vectors);      if (basis == null) {        i--;        if (--remaining_retries < 0) {          throw new TooManyRetriesException("Too many retries in sampling, and always a linear dependant data set.");        }        continue;      }    }    DoubleDynamicHistogram histogram=new DoubleDynamicHistogram(BINS);    double w=1.0 / currentids.size();    for (DBIDIter iter2=currentids.iter(); iter2.valid(); iter2.advance()) {      if (sample.contains(iter2)) {        continue;      }      double[] vec=minusEquals(relation.get(iter2).toArray(),originV);      final double distance=deviation(vec,basis);      histogram.increment(distance,w);    }    double[] th=findAndEvaluateThreshold(histogram);    if (th[1] > separation.goodness) {      separation.goodness=th[1];      separation.threshold=th[0];      separation.originV=originV;      separation.basis=basis;    }  }  return separation;}  }
class C{  public void write(CharSequence csq) throws IOException {  if (_byteBuffer == null)   throw new IOException("Writer closed");  final int length=csq.length();  for (int i=0; i < length; ) {    char c=csq.charAt(i++);    if (c < 0x80) {      _byteBuffer.put((byte)c);    } else {      write(c);    }  }}  }
class C{  @Override public boolean hasNoDefenseShield(int location){  if ((location != Mech.LOC_RARM) && (location != Mech.LOC_LARM)) {    return false;  }  for (int slot=0; slot < this.getNumberOfCriticals(location); slot++) {    CriticalSlot cs=getCritical(location,slot);    if (cs == null) {      continue;    }    if (cs.getType() != CriticalSlot.TYPE_EQUIPMENT) {      continue;    }    if (cs.isDamaged()) {      continue;    }    Mounted m=cs.getMount();    EquipmentType type=m.getType();    if ((type instanceof MiscType) && ((MiscType)type).isShield() && (m.curMode().equals(MiscType.S_NO_SHIELD) || isShutDown() || getCrew().isKoThisRound()|| getCrew().isUnconscious())) {      return m.getCurrentDamageCapacity(this,m.getLocation()) > 0;    }  }  return false;}  }
class C{  public T remove(String name){  return map.remove(name);}  }
class C{  public final LC rightToLeft(){  setLeftToRight(Boolean.FALSE);  return this;}  }
class C{  protected double calculateLogLikelihood(){  if (patternLogLikelihoods == null) {    patternLogLikelihoods=new double[patternCount];  }  if (precisionPatternLogLikelihoods == null) {    precisionPatternLogLikelihoods=new double[patternCount];  }  final NodeRef root=treeModel.getRoot();  traverse(treeModel,root);  double logL=0.0;  for (int i=0; i < patternCount; i++) {    logL+=patternLogLikelihoods[i] * patternWeights[i];  }  double precisionLogL=0.0;  for (int i=0; i < patternCount; i++) {    precisionLogL+=precisionPatternLogLikelihoods[i] * patternWeights[i];  }  if (Math.abs(logL - precisionLogL) > 1.0E-5) {    System.out.println("logL = " + logL + " precision logL = "+ precisionLogL);  }  if (logL == Double.NEGATIVE_INFINITY) {    likelihoodCore.setUseScaling(true);    updateAllNodes();    updateAllPatterns();    traverse(treeModel,root);    logL=0.0;    for (int i=0; i < patternCount; i++) {      logL+=patternLogLikelihoods[i] * patternWeights[i];    }    if (Math.abs(logL - precisionLogL) > 1.0E-5) {      System.out.println("scaled logL = " + logL + " precision logL = "+ precisionLogL);    }  }  for (int i=0; i < nodeCount; i++) {    updateNode[i]=false;  }  return logL;}  }
class C{  public void testZeroPosIncr() throws IOException {  Directory dir=newDirectory();  final Token[] tokens=new Token[3];  tokens[0]=new Token();  tokens[0].append("a");  tokens[0].setPositionIncrement(1);  tokens[1]=new Token();  tokens[1].append("aa");  tokens[1].setPositionIncrement(0);  tokens[2]=new Token();  tokens[2].append("b");  tokens[2].setPositionIncrement(1);  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  doc.add(new TextField("field",new CannedTokenStream(tokens)));  writer.addDocument(doc);  IndexReader r=writer.getReader();  writer.close();  IndexSearcher searcher=newSearcher(r);  PhraseQuery.Builder pqBuilder=new PhraseQuery.Builder();  pqBuilder.add(new Term("field","a"),0);  pqBuilder.add(new Term("field","b"),1);  assertEquals(1,searcher.search(pqBuilder.build(),1).totalHits);  pqBuilder=new PhraseQuery.Builder();  pqBuilder.add(new Term("field","a"),0);  pqBuilder.add(new Term("field","aa"),0);  pqBuilder.add(new Term("field","b"),1);  assertEquals(1,searcher.search(pqBuilder.build(),1).totalHits);  pqBuilder=new PhraseQuery.Builder();  pqBuilder.add(new Term("field","a"),0);  pqBuilder.add(new Term("field","z"),0);  pqBuilder.add(new Term("field","b"),1);  assertEquals(0,searcher.search(pqBuilder.build(),1).totalHits);  r.close();  dir.close();}  }
class C{  public void testFollowerRejectsVoteWhenLogNotUpToDate() throws Throwable {  runOnServer(null);}  }
class C{  public static DeterministicKey deserialize(NetworkParameters params,byte[] serializedKey,@Nullable DeterministicKey parent){  ByteBuffer buffer=ByteBuffer.wrap(serializedKey);  int header=buffer.getInt();  if (header != params.getBip32HeaderPriv() && header != params.getBip32HeaderPub())   throw new IllegalArgumentException("Unknown header bytes: " + toBase58(serializedKey).substring(0,4));  boolean pub=header == params.getBip32HeaderPub();  int depth=buffer.get() & 0xFF;  final int parentFingerprint=buffer.getInt();  final int i=buffer.getInt();  final ChildNumber childNumber=new ChildNumber(i);  ImmutableList<ChildNumber> path;  if (parent != null) {    if (parentFingerprint == 0)     throw new IllegalArgumentException("Parent was provided but this key doesn't have one");    if (parent.getFingerprint() != parentFingerprint)     throw new IllegalArgumentException("Parent fingerprints don't match");    path=HDUtils.append(parent.getPath(),childNumber);    if (path.size() != depth)     throw new IllegalArgumentException("Depth does not match");  } else {    if (depth >= 1)     path=ImmutableList.of(childNumber); else     path=ImmutableList.of();  }  byte[] chainCode=new byte[32];  buffer.get(chainCode);  byte[] data=new byte[33];  buffer.get(data);  checkArgument(!buffer.hasRemaining(),"Found unexpected data in key");  if (pub) {    return new DeterministicKey(path,chainCode,new LazyECPoint(ECKey.CURVE.getCurve(),data),parent,depth,parentFingerprint);  } else {    return new DeterministicKey(path,chainCode,new BigInteger(1,data),parent,depth,parentFingerprint);  }}  }
class C{  public void addRestriction(String ColumnName,String Operator,Object Code,String InfoName,String InfoDisplay){  Restriction r=new Restriction(ColumnName,Operator,Code,InfoName,InfoDisplay,true,0);  m_list.add(r);}  }
class C{  private boolean prepareAndUploadPoints(Fusiontables fusiontables,String tableId,Track track,List<Location> locations,boolean lastBatch) throws IOException {  ArrayList<Track> splitTracks=SendToGoogleUtils.prepareLocations(track,locations);  boolean onlyOneSegment=lastBatch && currentSegment == 1 && splitTracks.size() == 1;  for (  Track splitTrack : splitTracks) {    if (!onlyOneSegment) {      splitTrack.setName(context.getString(R.string.send_google_track_part_label,splitTrack.getName(),currentSegment));    }    createNewLineString(fusiontables,tableId,splitTrack);    currentSegment++;  }  return true;}  }
class C{  @Override protected void onNfcFeatureNotFound(){  toast(getString(R.string.noNfcMessage));}  }
class C{  protected FilterReader(Reader in){  super(in);  this.in=in;}  }
class C{  protected RuntimeException convertException(IgniteCheckedException e){  return U.convertException(e);}  }
class C{  public ExamplesGUI(Vector<Example> examples){  super("MOEA Framework Demos");  this.examples=examples;  layoutComponents();  setupActions();  setVisible(true);  list.setSelectedIndex(0);}  }
class C{  private void toCharString(){  String hexText=receivedData.getText();  if (hexText.length() % 2 != 0) {    System.out.println("Hex length" + hexText.length());    mqttMgr.setTitleText("Odd number of hex characters!");  } else {    try {      byte[] charArray=new byte[hexText.length() / 2];      for (int i=0; i < charArray.length; i++) {        charArray[i]=(byte)Integer.parseInt(hexText.substring(i * 2,(i * 2) + 2),16);      }      hexDisplay=false;      subLabel.setText(PANEL_TITLE + " - text display");      mqttMgr.setTitleText("");      hexButton.setText("Hex");      receivedData.setText(new String(charArray));    } catch (    NumberFormatException nfe) {      mqttMgr.setTitleText("Invalid hexadecimal data!");    }  }}  }
class C{  public void addHeader(String key,String... value){  this.headers.put(key,Arrays.asList(value));}  }
class C{  public JSONObject put(String key,Object value) throws JSONException {  if (key == null) {    throw new NullPointerException("Null key.");  }  if (value != null) {    testValidity(value);    this.map.put(key,value);  } else {    this.remove(key);  }  return this;}  }
class C{  public final void testGetM(){  assertEquals(2000,new ECFieldF2m(2000).getM());}  }
class C{  private int measureShort(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  private void createTitle(){  File file;  if (m_Filename.equals("")) {    m_Title="-none-";  } else   if (m_Filename.equals(TAB_INSTANCES)) {    m_Title=TAB_INSTANCES;  } else {    try {      file=new File(m_Filename);      m_Title=file.getName();    } catch (    Exception e) {      m_Title="-none-";    }  }  if (isChanged()) {    m_Title+=" *";  }}  }
class C{  @Override public void clear(){  super.clear();  Object[] keys=_set;  float[] values=_values;  for (int i=keys.length; i-- > 0; ) {    keys[i]=null;    values[i]=0;  }}  }
class C{  public static Object codeArrayAsObject(CodeArray code){  if (VM.VerifyAssertions && VM.runningVM) {    VM._assert(VM.NOT_REACHED);  }  return code;}  }
class C{  private boolean betaReduce(LambdaNode aNode){  if (aNode.parent == null) {    return false;  }  if (infinite) {    return false;  }  LambdaNode temp=null;  if (aNode.toString().equals("P")) {    betaReduceCounter++;    if (betaReduceCounter == betaReduceCounterMax) {      infinite=true;      theClone.infinite=true;    }    if (betaReduceCounter == 501) {      @SuppressWarnings("unused") boolean somethingbad=false;    }    if (aNode.children[0].toString().equals("P")) {      if (betaReduce((LambdaNode)aNode.children[0])) {        betaReduce(aNode);      } else {        betaReduce((LambdaNode)aNode.children[1]);      }    } else     if (aNode.children[0] instanceof LNode) {      boolean hasOverdue=((LambdaNode)aNode.children[1]).checkOverdueIndex(0);      boolean leftHasOverdue=((LambdaNode)aNode.children[0]).checkOverdueIndex(0);      ((LNode)(aNode.children[0])).replaceLwith((GPNode)aNode.children[1],1,0,hasOverdue);      temp=(LambdaNode)aNode.children[0].children[0].clone();      temp.parent=aNode.parent;      int oldArgPosition=aNode.argposition;      if (aNode.parent instanceof GPNode) {        ((GPNode)aNode.parent).children[oldArgPosition]=temp;      } else {        ((GPTree)aNode.parent).child=temp;      }      aNode.parent=null;      aNode=temp;      if (leftHasOverdue) {        aNode.fixOverdue(0);      }      betaReduce(aNode);    } else     if (aNode.children[0] instanceof IndexNode) {      betaReduce((LambdaNode)aNode.children[1]);    }    if (aNode.toString().equals("L")) {      return true;    } else {      return false;    }  } else   if (aNode.toString().equals("L")) {    betaReduce((LambdaNode)(aNode.children[0]));    return true;  } else {    return false;  }}  }
class C{  public static String encodeFromFile(String filename) throws java.io.IOException {  String encodedData=null;  Base64.InputStream bis=null;  try {    java.io.File file=new java.io.File(filename);    byte[] buffer=new byte[Math.max((int)(file.length() * 1.4 + 1),40)];    int length=0;    int numBytes=0;    bis=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.ENCODE);    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {      length+=numBytes;    }    encodedData=new String(buffer,0,length,Base64.PREFERRED_ENCODING);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bis.close();    } catch (    Exception e) {    }  }  return encodedData;}  }
class C{  public boolean hasUtilityNode(String nodeId){  return utilityNodes.containsKey(nodeId);}  }
class C{  public void write(DataOutput os) throws FitsException {  ArrayDataOutput obs;  boolean newOS=false;  if (os instanceof ArrayDataOutput) {    obs=(ArrayDataOutput)os;  } else   if (os instanceof DataOutputStream) {    newOS=true;    obs=new BufferedDataOutputStream((DataOutputStream)os);  } else {    throw new FitsException("Cannot create ArrayDataOutput from class " + os.getClass().getName());  }  for (  BasicHDU<?> basicHDU : hduList) {    basicHDU.write(obs);  }  if (newOS) {    try {      obs.flush();      obs.close();    } catch (    IOException e) {      throw new FitsException("Error flushing/closing the FITS output stream: " + e,e);    }  }  if (obs instanceof BufferedFile) {    try {      ((BufferedFile)obs).setLength(((BufferedFile)obs).getFilePointer());    } catch (    IOException e) {      throw new FitsException("Error resizing the FITS output stream: " + e,e);    }  }}  }
class C{  public boolean isLeaveRecipientNotFound(){  return fieldLeaveRecipientNotFound;}  }
class C{  private String computeHash(String z){  try {    MessageDigest md=MessageDigest.getInstance("SHA-256");    md.update(z.getBytes("UTF-8"));    byte[] raw=md.digest();    char[] result=new char[raw.length * 2];    for (int ix=0; ix < raw.length; ix++) {      int val=raw[ix] & 0xFF;      result[ix * 2]=HEX[val >>> 4];      result[ix * 2 + 1]=HEX[val & 0x0F];    }    return new String(result);  } catch (  NoSuchAlgorithmException|UnsupportedEncodingException ex) {    throw new AcmeProtocolException("Could not compute hash",ex);  }}  }
class C{  public SourceArgumentsResolver expandSingleSources(boolean expandSingleSources){  this.expandSingleSources=expandSingleSources;  return this;}  }
class C{  public double toDouble(){  XMLString s=trim();  double result=Double.NaN;  for (int i=0; i < s.length(); i++) {    char c=s.charAt(i);    if (c != '-' && c != '.' && (c < 0X30 || c > 0x39)) {      return result;    }  }  try {    result=Double.parseDouble(s.toString());  } catch (  NumberFormatException e) {  }  return result;}  }
class C{  public GetPostmanMessagesCommand(Player player){  this.player=player;}  }
class C{  static public JComponent buttonSpace(){  return _buttonSpace;}  }
class C{  public String globalInfo(){  return "Standardizes all numeric attributes in the given dataset " + "to have zero mean and unit variance (apart from the class attribute, if set).";}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:51.512 -0500",hash_original_method="86C54BFDD185E9407C74F8F297BEF1D3",hash_generated_method="D42344E68A0C28B13AFC8777935ED35F") public boolean equals(Object other){  if (other == null)   return false;  if (getClass() != other.getClass()) {    return false;  }  HostPort that=(HostPort)other;  return port == that.port && host.equals(that.host);}  }
class C{  private void restartDebugger(){  stack=new Stack();  try {    dGS=(TTGraphicsState)graphicsState.clone();  } catch (  final CloneNotSupportedException e) {    LogWriter.writeLog("Exception: " + e.getMessage());  }  final int twilightCount=maxp.getMaxTwilightPoints();  System.arraycopy(x[ORIGINAL + GLYPH_ZONE],0,x[GLYPH_ZONE],0,x[GLYPH_ZONE].length);  x[TWILIGHT_ZONE]=new int[twilightCount];  x[ORIGINAL + TWILIGHT_ZONE]=new int[twilightCount];  System.arraycopy(y[ORIGINAL + GLYPH_ZONE],0,y[GLYPH_ZONE],0,y[GLYPH_ZONE].length);  y[TWILIGHT_ZONE]=new int[twilightCount];  y[ORIGINAL + TWILIGHT_ZONE]=new int[twilightCount];  System.arraycopy(touched[ORIGINAL + GLYPH_ZONE],0,touched[GLYPH_ZONE],0,touched[GLYPH_ZONE].length);  touched[TWILIGHT_ZONE]=new boolean[twilightCount][2];  touched[ORIGINAL + TWILIGHT_ZONE]=new boolean[twilightCount][2];  if (!codeStack.isEmpty()) {    programToDebug=codeStack.get(0);    programToDebugIsData=getInstructionStreamIsData(programToDebug);  }  codeStack.clear();  numberStack.clear();  functionsLineCount=0;  debugPointer=0;  instructionsExecuted=0;  currentCode.setText("Glyph Program");}  }
class C{  private LocalEventTimer(){  super(true);}  }
class C{  public ASN1Explicit(int tagClass,int tagNumber,ASN1Type type){  super(tagClass,tagNumber);  this.type=type;}  }
class C{  public static void clearListeners(){  LISTENERS.clear();}  }
class C{  public static void assertContentsInAnyOrder(Iterable<?> actual,Object... expected){  assertContentsInAnyOrder((String)null,actual,expected);}  }
class C{  public void startPrefixMapping(String prefix,String uri){}  }
class C{  public Main(){}  }
class C{  public void error(String key,String... args){  rootDoc.printError(Resources.getText(key,args));}  }
class C{  public static void w(String tag,String s,Throwable e){  if (LOG.WARN >= LOGLEVEL)   Log.w(tag,s,e);}  }
class C{  public void deleteMessage(String messageID,String channelID) throws IOException {  if (this.isReady()) {    try {      Requests.DELETE.makeRequest(DiscordEndpoints.CHANNELS + channelID + "/messages/"+ messageID,new BasicNameValuePair("authorization",token));    } catch (    HTTP403Exception e) {      Discord4J.logger.error("Received 403 error attempting to delete message; is your login correct?");    }  } else {    Discord4J.logger.error("Bot has not signed in yet!");  }}  }
class C{  private void onItemClicked(View view,Node node){  notifyItemClicked(view,node);}  }
class C{  public void addPrimary(int part,int heap,long offheap,long swap){  primary.add(new VisorCachePartition(part,heap,offheap,swap));}  }
class C{  static void initHelpMessage(String progname){  outBuf=outBuf.append(getLocalizedMessage("java.launcher.opt.header",(progname == null) ? "java" : progname));  outBuf=outBuf.append(getLocalizedMessage("java.launcher.opt.datamodel",32));  outBuf=outBuf.append(getLocalizedMessage("java.launcher.opt.datamodel",64));}  }
class C{  static int findBestSampleSize(int actualWidth,int actualHeight,int desiredWidth,int desiredHeight){  double wr=(double)actualWidth / desiredWidth;  double hr=(double)actualHeight / desiredHeight;  double ratio=Math.min(wr,hr);  float n=1.0f;  while ((n * 2) <= ratio) {    n*=2;  }  return (int)n;}  }
class C{  public void write(final int data) throws IOException {  checkValid();  m_output.append((char)data);  if ('\n' == data) {    flush();  }}  }
class C{  private JsonToken readLiteral() throws IOException {  value=nextLiteral(true);  if (valueLength == 0) {    throw syntaxError("Expected literal value");  }  token=decodeLiteral();  if (token == JsonToken.STRING) {    checkLenient();  }  return token;}  }
class C{  @Override protected void completeCommandline(Commandline cmd){  super.completeCommandline(cmd);  for (  JavacOption opt : javacOptions) {    String arg=(opt.key != null) ? opt.key + ":" + opt.value : opt.value;    appendOptionArgument(cmd,"--javac",arg);  }  for (  File res : getResource()) {    appendOptionArgument(cmd,"--resource",res.getAbsolutePath());  }  if (noOsgi != null && noOsgi.booleanValue())   appendOption(cmd,"--no-osgi");  if (jigsaw != null && jigsaw.booleanValue())   appendOption(cmd,"--generate-module-info");  if (osgiProvidedBundles != null && !osgiProvidedBundles.isEmpty())   appendOptionArgument(cmd,"--osgi-provided-bundles",osgiProvidedBundles);  if (noPom != null && noPom.booleanValue())   appendOption(cmd,"--no-pom");  if (pack200 != null && pack200.booleanValue())   appendOption(cmd,"--pack200");  if (target != null && !target.isEmpty()) {    appendOptionArgument(cmd,"--target",target);  }  if (suppressWarnings != null) {    if (suppressAllWarnings) {      appendOption(cmd,"--suppress-warning");    } else {      for (      SuppressWarning sw : suppressWarnings) {        appendOption(cmd,"--suppress-warning=" + sw.value);      }    }  }  if (classpath != null) {    throw new RuntimeException("-classpath not longer supported");  }  for (  File file : compileList) {    log("Adding source file: " + file.getAbsolutePath(),Project.MSG_VERBOSE);    cmd.createArgument().setValue(file.getAbsolutePath());  }  for (  Module module : modules) {    log("Adding module: " + module,Project.MSG_VERBOSE);    cmd.createArgument().setValue(module.toVersionlessSpec());  }}  }
class C{  public String addProductPromoCode(String productPromoCodeId,LocalDispatcher dispatcher){  if (this.productPromoCodes.contains(productPromoCodeId)) {    return UtilProperties.getMessage(resource_error,"productpromoworker.promotion_code_already_been_entered",UtilMisc.toMap("productPromoCodeId",productPromoCodeId),locale);  }  if (!this.getDoPromotions()) {    this.productPromoCodes.add(productPromoCodeId);    return null;  }  String checkResult=ProductPromoWorker.checkCanUsePromoCode(productPromoCodeId,this.getPartyId(),this.getDelegator(),this,locale);  if (checkResult == null) {    this.productPromoCodes.add(productPromoCodeId);    ProductPromoWorker.doPromotions(this,dispatcher);    return null;  } else {    return checkResult;  }}  }
class C{  public CharArrayList(final CharArrayList l){  this(l.size());  l.getElements(0,a,0,size=l.size());}  }
class C{  public void testFailureWithFailureRatio(){  CircuitBreaker breaker=new CircuitBreaker().withFailureThreshold(2,3);  breaker.close();  ClosedState state=new ClosedState(breaker);  state.recordFailure();  state.recordSuccess();  assertTrue(breaker.isClosed());  state.recordFailure();  assertTrue(breaker.isOpen());}  }
class C{  public void createUnderlying(){  if (Platform.isFxApplicationThread()) {    options.createUnderlying();    this.marker=new com.lynden.gmapsfx.javascript.object.Marker(options.convert());  }}  }
class C{  @Interruptible public static void postBoot(){  Selected.Plan.get().processOptions();  if (Options.noReferenceTypes.getValue()) {    RVMType.JavaLangRefReferenceReferenceField.makeTraced();  }  if (VM.BuildWithGCSpy) {    MemoryManager.startGCspyServer();  }}  }
class C{  public JSLibSingleTestConfig createConfig(ZipEntry entry,String resourceName){  final String entryName=entry.getName();  final String modifier=(blacklist.contains(entryName)) ? JSLibSingleTestConfig.BLACKLIST : null;  return new JSLibSingleTestConfig(entry,resourceName,modifier);}  }
class C{  public void input(Collection<URL> input){  Queue<URL> urls=new ConcurrentLinkedQueue<URL>();  urls.addAll(input);  WorkerThread worker=new WorkerThread();  worker.urls=urls;  Thread threads[]=new Thread[WORKER_THREADS];  Network memory=getBot().memory().newMemory();  URL url=urls.poll();  batchProcessURL(url,memory);  url=urls.poll();  batchProcessURL(url,memory);  for (int index=0; index < WORKER_THREADS; index++) {    threads[index]=new Thread(worker);    threads[index].start();  }  boolean alive=true;  while (alive) {    for (int index=0; index < WORKER_THREADS; index++) {      if (threads[index].isAlive()) {        try {          Thread.sleep(10);        } catch (        InterruptedException exception) {          log(exception);        }        break;      } else       if (index == (WORKER_THREADS - 1)) {        alive=false;      }    }  }}  }
class C{  private String xml(final ServiceErrorRestRep error) throws JAXBException, PropertyException {  final JAXBContext context=JAXBContext.newInstance(ServiceErrorRestRep.class);  final StringWriter out=new StringWriter();  final Marshaller marshaller=context.createMarshaller();  marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,Boolean.TRUE);  marshaller.marshal(error,out);  String xml=out.toString();  return xml;}  }
class C{  @Override public Codebase edit(Codebase input,Map<String,String> options){  File tempDir=filesystem.getTemporaryDirectory("patcher_run_");  String patchFilePath=options.get("file");  if (isNullOrEmpty(patchFilePath)) {    return input;  } else {    File patchFile=new File(patchFilePath);    if (!filesystem.isReadable(patchFile)) {      throw new MoeProblem("cannot read file %s",patchFilePath);    }    try {      filesystem.copyDirectory(input.path(),tempDir);    } catch (    IOException e) {      throw new MoeProblem(e.getMessage());    }    try {      cmd.runCommand("patch",ImmutableList.of("-p0","--input=" + patchFilePath),tempDir.getAbsolutePath());    } catch (    CommandRunner.CommandException e) {      throw new MoeProblem(e.getMessage());    }    return Codebase.create(tempDir,input.projectSpace(),input.expression());  }}  }
class C{  public AggregateTable(Visualization vis,String group){  this(vis,group,VisualItem.SCHEMA);}  }
class C{  public void addDeploymentContext(GridDeploymentInfo info){  IgniteUuid ldrId=info.classLoaderId();  while (true) {    CachedDeploymentInfo<K,V> depInfo=deps.get(ldrId);    if (depInfo == null) {      depInfo=new CachedDeploymentInfo<>(ldrId.globalId(),ldrId,info.userVersion(),info.deployMode(),info.participants());      CachedDeploymentInfo<K,V> old=deps.putIfAbsent(ldrId,depInfo);      if (old != null)       depInfo=old; else       break;    }    Map<UUID,IgniteUuid> participants=info.participants();    if (participants != null) {      if (!depInfo.addParticipants(participants,cctx)) {        deps.remove(ldrId,depInfo);        continue;      }    }    break;  }}  }
class C{  @Path("proplist") @POST @Consumes(MediaType.APPLICATION_JSON) @Produces({MediaType.APPLICATION_JSON,MediaType.TEXT_PLAIN}) public CLIOutputResponse proplist(final PropertyListRequest request) throws ApiException, IOException {  request.setProjectPath(getAbsoluteProjectPath(request.getProjectPath()));  return this.subversionApi.proplist(request);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static boolean hasBody(Response response){  if (response.request().method().equals("HEAD")) {    return false;  }  int responseCode=response.code();  if ((responseCode < HTTP_CONTINUE || responseCode >= 200) && responseCode != HTTP_NO_CONTENT && responseCode != HTTP_NOT_MODIFIED) {    return true;  }  if (OkHeaders.contentLength(response) != -1 || "chunked".equalsIgnoreCase(response.header("Transfer-Encoding"))) {    return true;  }  return false;}  }
class C{  public void addSequence(T key,Sequence seq){  if (seq == null)   throw new IllegalArgumentException("seq is null");  if (key == null)   throw new IllegalArgumentException("key is null");  SequenceCollection c=map.get(key);  if (c == null) {    c=new SequenceCollection();    map.put(key,c);  }  c.add(seq);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public void toXML(StringBuilder builder,final ConfigVerification errors){  int minLCS=-1, fullRevCounter=-1;  String text=this.minimumCommonSequenceField.getText();  if (text.length() == 0) {    errors.add(new ConfigItem(ConfigItemTypes.ERROR,ConfigErrorKeys.MISSING_VALUE,"The value for minimum " + "LongestCommonSubsequence is missing."));  } else {    try {      minLCS=Integer.parseInt(text);      if (minLCS < 7) {        errors.add(new ConfigItem(ConfigItemTypes.ERROR,ConfigErrorKeys.VALUE_OUT_OF_RANGE,"The value of the minimum " + " LongestCommonSubsequence has to be" + " at least 7."));      } else       if (minLCS < 12) {        errors.add(new ConfigItem(ConfigItemTypes.WARNING,ConfigErrorKeys.VALUE_OUT_OF_RANGE,"A value smaller than 12 for the " + "minimum LongestCommonSubsequence" + " is not recommended."));      }    } catch (    NumberFormatException nfe) {      errors.add(new ConfigItem(ConfigItemTypes.ERROR,ConfigErrorKeys.ILLEGAL_INPUT,"NumberFormatException for " + "ArticleProducer TaskLimit"));    }  }  text=this.fullRevisionField.getText();  if (text.length() == 0) {    errors.add(new ConfigItem(ConfigItemTypes.ERROR,ConfigErrorKeys.MISSING_VALUE,"The value for FullRevision Counter" + " is missing."));  } else {    try {      fullRevCounter=Integer.parseInt(text);      if (fullRevCounter < 1) {        errors.add(new ConfigItem(ConfigItemTypes.ERROR,ConfigErrorKeys.VALUE_OUT_OF_RANGE,"The FullRevision Counter has to " + "be at least 1."));      } else       if (fullRevCounter < 100) {        errors.add(new ConfigItem(ConfigItemTypes.WARNING,ConfigErrorKeys.VALUE_OUT_OF_RANGE,"A FullRevision Counter with a" + " value smaller than 100 is not" + " recommended."));      }    } catch (    NumberFormatException nfe) {      errors.add(new ConfigItem(ConfigItemTypes.ERROR,ConfigErrorKeys.ILLEGAL_INPUT,"NumberFormatException for " + "ArticleProducer TaskLimit"));    }  }  builder.append("\t<values>\r\n");  builder.append("\t\t<VALUE_MINIMUM_LONGEST_COMMON_SUBSTRING>" + minLCS + "</VALUE_MINIMUM_LONGEST_COMMON_SUBSTRING>\r\n");  builder.append("\t\t<COUNTER_FULL_REVISION>" + fullRevCounter + "</COUNTER_FULL_REVISION>\r\n");  builder.append("\t</values>\r\n");}  }
class C{  public void characters(char[] ch,int start,int length){  String currStr=String.copyValueOf(ch,start,length).trim();  if (currStr.length() > 0) {    log.debug("Chars:'" + currStr + "'");    currValue=currStr;  }}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  mContext=this;  getFragmentManager().beginTransaction().replace(android.R.id.content,new SettingsFragment()).commit();}  }
class C{  private boolean isElementHasParentWithLang(Element el){  return CollectionUtils.containsAny(el.parents(),elementWithLang.get());}  }
class C{  @Override protected void attachBaseContext(Context newBase){  super.attachBaseContext(CalligraphyContextWrapper.wrap(newBase));}  }
class C{  public final Texture superTexture(Texture other,HorizontalDirection direction){  Image leftImage;  Image rightImage;  if (direction == HorizontalDirection.LEFT) {    leftImage=other.getImage();    rightImage=this.getImage();  } else {    leftImage=this.getImage();    rightImage=other.getImage();  }  int width=(int)(leftImage.getWidth() + rightImage.getWidth());  int height=(int)Math.max(leftImage.getHeight(),rightImage.getHeight());  PixelReader leftReader=leftImage.getPixelReader();  PixelReader rightReader=rightImage.getPixelReader();  WritableImage image=new WritableImage(width,height);  PixelWriter pixelWriter=image.getPixelWriter();  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++) {      Color color;      if (x < leftImage.getWidth()) {        if (y < leftImage.getHeight()) {          color=leftReader.getColor(x,y);        } else {          color=Color.TRANSPARENT;        }      } else {        if (y < rightImage.getHeight()) {          color=rightReader.getColor(x - (int)leftImage.getWidth(),y);        } else {          color=Color.TRANSPARENT;        }      }      pixelWriter.setColor(x,y,color);    }  }  return new Texture(image);}  }
class C{  @Override protected void reset() throws AdeException {  super.reset();  m_trained=false;  m_msgData=null;}  }
class C{  @Inline @Entrypoint public static char charFieldRead(Object ref,Offset offset,int locationMetadata){  if (NEEDS_CHAR_GC_READ_BARRIER) {    ObjectReference src=ObjectReference.fromObject(ref);    return Selected.Mutator.get().charRead(src,src.toAddress().plus(offset),offset.toWord(),Word.fromIntZeroExtend(locationMetadata),INSTANCE_FIELD);  } else   if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return 0;}  }
class C{  public AccountHeaderBuilder withPaddingBelowHeader(boolean paddingBelowHeader){  this.mPaddingBelowHeader=paddingBelowHeader;  return this;}  }
class C{  public void exchange(int i1,int i2){  if (i1 == i2) {    return;  }  if (i1 > -1 && i2 > -1 && listOfColors.size() > i1 && listOfColors.size() > i2) {    ColorRGB c1=listOfColors.get(i1);    ColorRGB c2=listOfColors.get(i2);    listOfColors.set(i1,c2);    listOfColors.set(i2,c1);  }  fireUpdate(this);}  }
class C{  public NodesInfoRequest threadPool(boolean threadPool){  this.threadPool=threadPool;  return this;}  }
class C{  public int headerOffset(){  return this.header().offset();}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (operator: ");  result.append(operator);  result.append(')');  return result.toString();}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MAlertRule[");  sb.append(get_ID()).append("-").append(getName()).append(",Valid=").append(isValid()).append(",").append(getSql(false));  sb.append("]");  return sb.toString();}  }
class C{  public static MPayment createPayment(Properties ctx,MInvoice invoice,String docBaseType,String trxName) throws OperationException {  String tenderType=getTenderType(invoice.getPaymentRule());  return createPayment(ctx,invoice,docBaseType,tenderType,invoice.getOpenAmt(),invoice.get_TrxName());}  }
class C{  protected static Node deserialize(Object node){  if (node instanceof Node) {    return (Node)node;  } else   if (node instanceof byte[]) {    return deserializeString(new String((byte[])node));  } else   if (node instanceof String) {    return deserializeString((String)node);  } else {    log.severe("Unable to serialize '" + node + "'");  }  return null;}  }
class C{  private void onPlay(int playPauseStop){  if (playPauseStop == 0) {    startPlaying();  } else   if (playPauseStop == 1) {    pausePlaying();  } else {    stopPlaying();  }}  }
class C{  public static void copyMatrix(double[][] original,double[][] copy){  for (int i=0; i < original.length; i++) {    for (int j=0; j < original[i].length; j++) {      copy[i][j]=original[i][j];    }  }}  }
class C{  private void applyTranslations(PropertyMapping[] inCols,String[] in,String[] record,boolean doiUsedForDatasetId,DOI doi){  for (int i=1; i < inCols.length; i++) {    PropertyMapping pm=inCols[i];    String val=null;    if (pm != null) {      if (pm.getIndex() != null) {        val=in[pm.getIndex()];        if (pm.getTranslation() != null && pm.getTranslation().containsKey(val)) {          val=pm.getTranslation().get(val);          in[pm.getIndex()]=val;        }      }      if (val == null) {        val=pm.getDefaultValue();      }      if (pm.getTerm().qualifiedName().equalsIgnoreCase(Constants.DWC_DATASET_ID) && doiUsedForDatasetId && doi != null) {        val=doi.toString();      }    }    record[i]=val;  }}  }
class C{  public void rollback(){  if (isCommitted) {    throw new IllegalStateException("Transaction is already committed");  } else {    isRolledBack=true;  }}  }
class C{  private double[] resample(){  int length=mSpecification.getFilterLength();  if (length % 2 == 0) {    length--;  }  double half=(double)length / 2.0;  double[] resampled=new double[(int)Math.ceil(half)];  for (int x=0; x < resampled.length; x++) {    resampled[x]=getFrequencyResponse(Math.cos(Math.PI * (double)x / half));  }  return resampled;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public void update(){  this.dataset.populateAnnotatedStrings();  this.dataset.updateStats();  this.updateSubDataset();}  }
class C{  public void error(String message){  sendPluginResult(new PluginResult(PluginResult.Status.ERROR,message));}  }
class C{  private void sendAsync(int offset,int count){  if (mDisposed.get())   return;  if (count <= 0)   sendNext();  setBuffer(offset,count);  mStatus=mSender.sendAsync(this);  if (!mStatus) {    onCompleted(this);  }}  }
class C{  public Matrix4d reflection(Vector3dc normal,Vector3dc point){  return reflection(normal.x(),normal.y(),normal.z(),point.x(),point.y(),point.z());}  }
class C{  public boolean isCheckFullyPopulated(){  return this.checkFullyPopulated;}  }
class C{  public void testCommentWithComma() throws IOException, ReplicatorException {  PrintWriter out=new PrintWriter(new FileWriter(definitionsFile));  out.println("schemaz,tableq,cola,-,-,colaa # Finally, comment with a comma should work.");  out.close();  try {    RenameDefinitions renameDefinitions=new RenameDefinitions(definitionsFile);    renameDefinitions.parseFile();  } catch (  ReplicatorException e) {    logger.error(e);  }}  }
class C{  private static int computeYDimension(ResultPoint topLeft,ResultPoint topRight,ResultPoint bottomLeft,ResultPoint bottomRight,float moduleWidth){  int leftColumnDimension=MathUtils.round(ResultPoint.distance(topLeft,bottomLeft) / moduleWidth);  int rightColumnDimension=MathUtils.round(ResultPoint.distance(topRight,bottomRight) / moduleWidth);  return (leftColumnDimension + rightColumnDimension) >> 1;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SexecPackage.EXECUTION_NODE__NAME:    return getName();case SexecPackage.EXECUTION_NODE__REACTIONS:  return getReactions();case SexecPackage.EXECUTION_NODE__SIMPLE_NAME:return getSimpleName();case SexecPackage.EXECUTION_NODE__REACT_SEQUENCE:return getReactSequence();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override protected void onClose(){}  }
class C{  public static IgnoredException addIgnoredException(final String suspectString){  return addIgnoredException(suspectString,null);}  }
class C{  public void downloadImageToStorage(String storageFile,SuccessCallback<Image> onSuccess,FailureCallback<Image> onFail){  downloadImageToStorage(storageFile,onSuccess,onFail,true);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.EQUALITY_OP___EQUALS_OP_1:    getEqualsOp_1().clear();  getEqualsOp_1().addAll((Collection<? extends EqualsOp_>)newValue);return;case UmplePackage.EQUALITY_OP___NOTEQUALS_OP_1:getNotequalsOp_1().clear();getNotequalsOp_1().addAll((Collection<? extends NotequalsOp_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void addOwnedValue(IgniteTxKey key,GridCacheVersion ver,CacheObject val){  if (val == null)   return;  if (ownedVals == null)   ownedVals=new HashMap<>();  CacheVersionedValue oVal=new CacheVersionedValue(val,ver);  ownedVals.put(key,oVal);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public byte[] extractData(byte[] stegoData,String stegoFileName,byte[] origSigData) throws OpenStegoException {  return null;}  }
class C{  public final static float[] arrayDegToRad(float[] degs){  for (int i=0; i < degs.length; i++) {    degs[i]=degToRad(degs[i]);  }  return degs;}  }
class C{  public final void displayMessage(String message){  try {    SpriteTranscoder.this.handler.warning(new TranscoderException(message));  } catch (  TranscoderException ex) {    throw new RuntimeException();  }}  }
class C{  public static <U1,U2,R>BiFunction<MonoTValue<U1>,MonoTValue<U2>,MonoTValue<R>> lift2(final BiFunction<? super U1,? super U2,? extends R> fn){  return null;}  }
class C{  public ListQueryAPIResponseEntity listQuery(@QueryParam("query") String query,@QueryParam("startTime") String startTime,@QueryParam("endTime") String endTime,@QueryParam("pageSize") int pageSize,@QueryParam("startRowkey") String startRowkey,@QueryParam("treeAgg") boolean treeAgg,@QueryParam("timeSeries") boolean timeSeries,@QueryParam("intervalmin") long intervalmin,@QueryParam("top") int top,@QueryParam("filterIfMissing") boolean filterIfMissing,@QueryParam("parallel") int parallel,@QueryParam("metricName") String metricName){  return listQuery(query,startTime,endTime,pageSize,startRowkey,treeAgg,timeSeries,intervalmin,top,filterIfMissing,parallel,metricName,true);}  }
class C{  public boolean isSiteUp(String siteId){  try {    String syssvcName=((CoordinatorClientImpl)coordinator).getSysSvcName();    String syssvcVersion=((CoordinatorClientImpl)coordinator).getSysSvcVersion();    List<Service> svcs=coordinator.locateAllServices(siteId,syssvcName,syssvcVersion,null,null);    List<String> nodeList=new ArrayList<>();    for (    Service svc : svcs) {      nodeList.add(svc.getNodeId());    }    log.info("Site {} is up. active nodes {}",siteId,StringUtils.join(nodeList,","));    return true;  } catch (  CoordinatorException ex) {    if (ex.getServiceCode() == ServiceCode.COORDINATOR_SVC_NOT_FOUND) {      return false;    }    log.error("Unexpected error when checking site service becons",ex);    return true;  }}  }
class C{  protected byte[] engineUpdate(byte[] in,int inOffset,int inLen){  throw new IllegalStateException("Cipher has not been initialized");}  }
class C{  private void initResourcesIfNecessary(){  if (centerDrawable == null) {    centerDrawable=getContext().getResources().getDrawable(R.drawable.wheel_hight_bg);  }  if (topShadow == null) {    topShadow=new GradientDrawable(Orientation.TOP_BOTTOM,SHADOWS_COLORS);  }  if (bottomShadow == null) {    bottomShadow=new GradientDrawable(Orientation.BOTTOM_TOP,SHADOWS_COLORS);  }}  }
class C{  public boolean isMasterNode(){  return masterNode();}  }
class C{  public int writeOffset(byte[] data,int count,int nOffset) throws BufferOverflowException {  if (count > getWriteRemaining()) {    throw new BufferOverflowException();  }  if (count < 0) {    throw new IllegalArgumentException();  }  int offWritePos=(this.write_pos + nOffset) % array.length;  count=writeLimit(count);  assertWriteLimit(offWritePos + count);  writeOp(data,0,count,array,offWritePos,array.length);  return count;}  }
class C{  public InvocationDecoder(){  _encoding="UTF-8";  if (_encoding == null) {    _encoding="UTF-8";  }}  }
class C{  @Deprecated public static void longClickView(ActivityInstrumentationTestCase test,View v){  longClickView((InstrumentationTestCase)test,v);}  }
class C{  public ProjectComparisonEntry compareModules(IN4JSProject apiProject,TModule api,IN4JSProject implProject,TModule impl,final boolean includePolyfills){  ProjectComparison projectComparison=new ProjectComparison(new String[]{implProject.getImplementationId().orNull()});  ProjectComparisonEntry dummyParent=new ProjectComparisonEntry(projectComparison,apiProject,implProject);  ProjectComparisonEntry ret=createEntries(dummyParent,-1,api,new EObject[]{impl},includePolyfills);  return ret;}  }
class C{  @Override public boolean tryReleaseShared(int ignored){  setState(0);  return true;}  }
class C{  public static EventTypeMetadata createWrapper(String eventTypeName,boolean namedWindow,boolean insertInto,boolean isPropertyAgnostic){  TypeClass typeClass;  if (namedWindow) {    typeClass=TypeClass.NAMED_WINDOW;  } else   if (insertInto) {    typeClass=TypeClass.STREAM;  } else {    throw new IllegalStateException("Unknown Wrapper type, cannot create metadata");  }  return new EventTypeMetadata(eventTypeName,null,typeClass,false,false,false,null,isPropertyAgnostic);}  }
class C{  public void reconnect() throws MqttException {  final String methodName="reconnect";  log.fine(CLASS_NAME,methodName,"500",new Object[]{this.clientId});  if (comms.isConnected()) {    throw ExceptionHelper.createMqttException(MqttException.REASON_CODE_CLIENT_CONNECTED);  }  if (comms.isConnecting()) {    throw new MqttException(MqttException.REASON_CODE_CONNECT_IN_PROGRESS);  }  if (comms.isDisconnecting()) {    throw new MqttException(MqttException.REASON_CODE_CLIENT_DISCONNECTING);  }  if (comms.isClosed()) {    throw new MqttException(MqttException.REASON_CODE_CLIENT_CLOSED);  }  stopReconnectCycle();  attemptReconnect();}  }
class C{  public void sendPlayerInfo(){  IPlayer player=game.getPlayer(localPlayerNumber);  PreferenceManager.getClientPreferences().setLastPlayerColor(player.getColorIndex());  PreferenceManager.getClientPreferences().setLastPlayerCategory(player.getCamoCategory());  PreferenceManager.getClientPreferences().setLastPlayerCamoName(player.getCamoFileName());  send(new Packet(Packet.COMMAND_PLAYER_UPDATE,player));}  }
class C{  public static int resolvePort(@NotNull SVNURL url){  return !hasDefaultPort(url) ? url.getPort() : DEFAULT_PORT_INDICATOR;}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == TypeDefiningElement.class) {switch (baseFeatureID) {case N4JSPackage.TYPE_DEFINING_ELEMENT__DEFINED_TYPE:      return N4JSPackage.FUNCTION_DEFINITION__DEFINED_TYPE;default :    return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  public <T>T readConfig(String configKind,String configId,String ConfigKey) throws IOException, ClassNotFoundException {  return readConfig(null,configKind,configId,ConfigKey);}  }
class C{  public Iterator<Object> iterator(){  return mAttributes.values().iterator();}  }
class C{  public boolean clear(){  boolean value=(this.stackTraceSet.size() > 0);  this.stackTraceSet.clear();  return value;}  }
class C{  public static boolean isValidEpOrAmbigPCaptureStrict(String san){  if (san.length() == 3) {    return FILES.indexOf(san.charAt(0)) != -1 && FILES.indexOf(san.charAt(1)) != -1 && RANKS.indexOf(san.charAt(2)) != -1;  } else {    return false;  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static void writeStringToFile(File file,String data) throws IOException {  writeStringToFile(file,data,Charset.defaultCharset(),false);}  }
class C{  @Override public String toString(){  return getClass().getSimpleName() + "[" + _pathLog+ "]";}  }
class C{  private boolean isSubrange(LocalCache snapshot,int start,int length){  if (start < snapshot.framesStart) {    return false;  }  if (length == -1) {    return (snapshot.framesLength == -1);  }  if (snapshot.framesLength == -1) {    if ((start + length) > (snapshot.framesStart + snapshot.frames.size())) {      throw new IndexOutOfBoundsException();    }    return true;  }  return ((start + length) <= (snapshot.framesStart + snapshot.framesLength));}  }
class C{  public static short queryId(ByteString bagId){  return bagId.asReadOnlyByteBuffer().getShort();}  }
class C{  public static int resolve(String host) throws IOException {  Socket localSocket=new Socket(ADB_HOST,ADB_PORT);  DataInputStream dis=new DataInputStream(localSocket.getInputStream());  OutputStream os=localSocket.getOutputStream();  int count_read=0;  if (localSocket == null || dis == null || os == null)   return -1;  String cmd="dns:" + host;  if (!sendAdbCmd(dis,os,cmd))   return -1;  count_read=dis.readInt();  localSocket.close();  return count_read;}  }
class C{  public double[] individualPredictions(Instance inst) throws Exception {  double[] result=null;  if (m_Classifiers.length == 1) {    result=new double[1];    result[0]=m_Classifiers[0].distributionForInstance(inst)[1];  } else {    result=new double[m_ClassFilters.length];    for (int i=0; i < m_ClassFilters.length; i++) {      if (m_Classifiers[i] != null) {        if (m_Method == METHOD_1_AGAINST_1) {          Instance tempInst=(Instance)inst.copy();          tempInst.setDataset(m_TwoClassDataset);          result[i]=m_Classifiers[i].distributionForInstance(tempInst)[1];        } else {          m_ClassFilters[i].input(inst);          m_ClassFilters[i].batchFinished();          result[i]=m_Classifiers[i].distributionForInstance(m_ClassFilters[i].output())[1];        }      }    }  }  return result;}  }
class C{  public void shutdown() throws Exception {  (new Thread(this,"NonExistentActivatable")).start();}  }
class C{  public final void writeShort(int v) throws IOException {  w[0]=(byte)v;  w[1]=(byte)(v >> 8);  r.write(w,0,2);}  }
class C{  @Override public boolean equals(Object theObject){  if (theObject instanceof Timestamp) {    return equals((Timestamp)theObject);  }  return false;}  }
class C{  public static AccessToken createFromExistingAccessToken(String accessToken,Date expirationTime,Date lastRefreshTime,AccessTokenSource accessTokenSource,List<String> permissions){  if (expirationTime == null) {    expirationTime=DEFAULT_EXPIRATION_TIME;  }  if (lastRefreshTime == null) {    lastRefreshTime=DEFAULT_LAST_REFRESH_TIME;  }  if (accessTokenSource == null) {    accessTokenSource=DEFAULT_ACCESS_TOKEN_SOURCE;  }  return new AccessToken(accessToken,expirationTime,permissions,accessTokenSource,lastRefreshTime);}  }
class C{  public static boolean usesThirdOperand(final String mnemonic){  return !mnemonic.equals(ReilHelpers.OPCODE_NOP);}  }
class C{  public RoutingNodes routingNodes(){  return routingNodes;}  }
class C{  public static WrappedByteBuffer wrap(java.nio.ByteBuffer in){  return new WrappedByteBuffer(in);}  }
class C{  protected void verconsultaExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  String idConsulta=((ConsultaForm)form).getId();  if (StringUtils.isEmpty(idConsulta)) {    idConsulta=request.getParameter("idconsulta");  }  verconsultaCodeLogic(idConsulta,mapping,form,request,response);  saveCurrentInvocation(KeysClientsInvocations.SOLICITUDES_VERCONSULTA,request);}  }
class C{  public ComplicatedStruct(ComplicatedStruct other){  __isset_bitfield=other.__isset_bitfield;  this.a=other.a;  this.b=other.b;  this.c=other.c;  if (other.isSetShortSet()) {    Set<Short> __this__shortSet=new HashSet<Short>(other.shortSet);    this.shortSet=__this__shortSet;  }  if (other.isSetIntSet()) {    Set<Integer> __this__intSet=new HashSet<Integer>(other.intSet);    this.intSet=__this__intSet;  }  if (other.isSetMixStructlist()) {    List<MixStruct> __this__mixStructlist=new ArrayList<MixStruct>(other.mixStructlist.size());    for (    MixStruct other_element : other.mixStructlist) {      __this__mixStructlist.add(new MixStruct(other_element));    }    this.mixStructlist=__this__mixStructlist;  }  if (other.isSetShortList()) {    List<Short> __this__shortList=new ArrayList<Short>(other.shortList);    this.shortList=__this__shortList;  }  if (other.isSetOrderedStructMap()) {    Map<Short,OrderedStruct> __this__orderedStructMap=new HashMap<Short,OrderedStruct>(other.orderedStructMap.size());    for (    Map.Entry<Short,OrderedStruct> other_element : other.orderedStructMap.entrySet()) {      Short other_element_key=other_element.getKey();      OrderedStruct other_element_value=other_element.getValue();      Short __this__orderedStructMap_copy_key=other_element_key;      OrderedStruct __this__orderedStructMap_copy_value=new OrderedStruct(other_element_value);      __this__orderedStructMap.put(__this__orderedStructMap_copy_key,__this__orderedStructMap_copy_value);    }    this.orderedStructMap=__this__orderedStructMap;  }  if (other.isSetMixStructMap()) {    Map<Short,MixStruct> __this__mixStructMap=new HashMap<Short,MixStruct>(other.mixStructMap.size());    for (    Map.Entry<Short,MixStruct> other_element : other.mixStructMap.entrySet()) {      Short other_element_key=other_element.getKey();      MixStruct other_element_value=other_element.getValue();      Short __this__mixStructMap_copy_key=other_element_key;      MixStruct __this__mixStructMap_copy_value=new MixStruct(other_element_value);      __this__mixStructMap.put(__this__mixStructMap_copy_key,__this__mixStructMap_copy_value);    }    this.mixStructMap=__this__mixStructMap;  }  if (other.isSetOrderEnum()) {    this.orderEnum=other.orderEnum;  }  if (other.isSetBin()) {    this.bin=org.apache.thrift.TBaseHelper.copyBinary(other.bin);  }}  }
class C{  public boolean isCanContainAnalytics(){  return canContainAnalytics;}  }
class C{  private Set<IDIYComponent<?>> findAllGroupedComponents(IDIYComponent<?> component){  Set<IDIYComponent<?>> components=new HashSet<IDIYComponent<?>>();  components.add(component);  for (  Set<IDIYComponent<?>> group : currentProject.getGroups()) {    if (group.contains(component)) {      components.addAll(group);      break;    }  }  return components;}  }
class C{  @Override public boolean onUnbind(Intent intent){  Log.i(TAG,"Clients unbound");  return true;}  }
class C{  private void addEntryHtmlToExport(Entry entry,StringBuilder result,SourcesHashList sources,boolean asNestedLists,boolean includeQuotations,boolean includeReferencesSection,boolean skipThisLevel) throws IOException {  if (!skipThisLevel) {    if (asNestedLists) {      result.append("<div class=\"noteAndQuotation\">\n");    }    final Entry source=dbLogic.getEntryById(entry.getSourceId());    int sourceId=0;    if (source != null) {      sourceId=sources.add(source);    }    if (includeQuotations && entry.hasQuotation()) {      result.append("<p class=\"quotation\">");      result.append(textToPreishHtml(entry.getQuotation(),false));      if (includeReferencesSection) {        if (sourceId != 0) {          result.append(" <a href=\"#reference" + sourceId + "\">["+ sourceId+ "]</a>");        }      }      result.append("</p>\n");    }    if (entry.hasNote()) {      String noteHtml=textToPreishHtml(entry.getNote(),false);      if (!noteHtml.isEmpty()) {        result.append("<p class=\"note\">");        result.append(noteHtml);        result.append("</p>\n");      }    }  }  List<?> childrenFromDb=dbLogic.getEntriesByParentId(entry.getId());  if (!childrenFromDb.isEmpty()) {    if (asNestedLists) {      result.append("<ol class=\"subnotes\">\n");    }    final Hashtable<String,Entry> children=new Hashtable<String,Entry>();    Entry first=null;    for (    final Object childObject : childrenFromDb) {      final Entry child=(Entry)childObject;      children.put(child.getId(),child);      if (!child.hasPreviousSiblingId()) {        first=child;      }    }    if (first != null) {      Entry child=first;      for (int i=0; i < children.size(); ++i) {        if (child == null) {          break;        }        if (asNestedLists) {          result.append("<li>\n");        }        addEntryHtmlToExport(child,result,sources,asNestedLists,includeQuotations,includeReferencesSection,false);        if (asNestedLists) {          result.append("</li>\n");        }        if (!child.hasNextSiblingId()) {          break;        }        final String nextId=child.getNextSiblingId();        child=children.get(nextId);      }    } else {      final Iterator<Map.Entry<String,Entry>> iterator=children.entrySet().iterator();      while (iterator.hasNext()) {        final Map.Entry<String,Entry> mapEntry=iterator.next();        final Entry child=mapEntry.getValue();        if (asNestedLists) {          result.append("<li>\n");        }        addEntryHtmlToExport(child,result,sources,asNestedLists,includeQuotations,includeReferencesSection,false);        if (asNestedLists) {          result.append("</li>\n");        }      }    }    if (asNestedLists) {      result.append("</ol>\n");    }  }  if (!skipThisLevel && asNestedLists) {    result.append("</div>\n");  }}  }
class C{  public void deleteAlert(BigInteger alertId) throws IOException {  String requestUrl=RESOURCE + "/" + alertId.toString();  ArgusResponse response=getClient().executeHttpRequest(ArgusHttpClient.RequestType.DELETE,requestUrl,null);  assertValidResponse(response,requestUrl);}  }
class C{  private void addDependenciesAndStore(Map<Step,List<StepInstance>> stepToStepInstances){  for (  Step step : stepToStepInstances.keySet()) {    for (    StepInstance stepInstance : stepToStepInstances.get(step)) {      final List<Step> dependsUpon=stepInstance.getStep(jobs).getDependsUpon();      if (dependsUpon != null) {        for (        Step stepRequired : dependsUpon) {          List<StepInstance> candidateStepInstances=stepToStepInstances.get(stepRequired);          if (candidateStepInstances != null) {            for (            StepInstance candidate : candidateStepInstances) {              if (stepInstance.proteinBoundsOverlap(candidate) || (candidate.getBottomProtein() == null && candidate.getTopProtein() == null)) {                stepInstance.addDependentStepInstance(candidate);              }            }          }        }      }    }    if (LOGGER.isDebugEnabled()) {      LOGGER.debug("Persisting " + stepToStepInstances.get(step).size() + " StepInstances for Step "+ step.getId());      for (      StepInstance stepInstance : stepToStepInstances.get(step)) {        LOGGER.debug("About to attempt to persist stepInstance: " + stepInstance.getId() + " with "+ stepInstance.stepInstanceDependsUpon().size()+ " dependent steps.");      }    }  }  try {    stepInstanceDAO.insert(stepToStepInstances);  } catch (  Throwable t) {    if (LOGGER.isDebugEnabled()) {      LOGGER.debug("Error thrown by stepInstance DAO");      LOGGER.debug(t.getMessage());    }  }}  }
class C{  public static int compute2(int x){  int loops=(x >>> 4) & 7;  while (loops-- > 0) {    x=(x * 2147483647) % 16807;  }  return x;}  }
class C{  public static PlaceholderFragment newInstance(int sectionNumber){  PlaceholderFragment fragment=new PlaceholderFragment();  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  @Override public void run(){  amIActive=true;  boolean image1Bool=false;  boolean image2Bool=false;  double constant1=0;  double constant2=0;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader1=args[0];  File file=new File(inputHeader1);  image1Bool=file.exists();  if (image1Bool) {    constant1=-1;  } else {    constant1=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String inputHeader2=args[1];  file=new File(inputHeader2);  image2Bool=file.exists();  if (image2Bool) {    constant2=-1;  } else {    constant2=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    if (image1Bool && image2Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData1=inputFile1.getNoDataValue();      double noData2=inputFile2.getNoDataValue();      if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {        showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");        return;      }      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData1);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          z2=data2[col];          if ((z1 != noData1) && (z2 != noData2)) {            outputFile.setValue(row,col,z1 - z2);          } else {            outputFile.setValue(row,col,noData1);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      inputFile2.close();      outputFile.close();    } else     if (image1Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData=inputFile1.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          if (z1 != noData) {            outputFile.setValue(row,col,z1 - constant2);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      outputFile.close();    } else     if (image2Bool) {      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile2.getNumberRows();      int cols=inputFile2.getNumberColumns();      double noData=inputFile2.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader2,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile2.getPreferredPalette());      for (row=0; row < rows; row++) {        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z2=data2[col];          if (z2 != noData) {            outputFile.setValue(row,col,constant1 - z2);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile2.close();      outputFile.close();    } else {      showFeedback("At least one of the inputs must be a raster image.");    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  protected final void openOutputStream(OutputStream outputStream){  assertNotAlreadyOpen();  try {    if (this.useCompression == null || this.useCompression.booleanValue()) {      this.writer=new BufferedWriter(new OutputStreamWriter(outputStream));    } else {      this.writer=new BufferedWriter(new OutputStreamWriter(new GZIPOutputStream(outputStream)));    }  } catch (  IOException e) {    throw new UncheckedIOException(e);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_documentgetimplementation.class,args);}  }
class C{  public void removeDirectory(String path,String tail,Result<Object> result){  result.ok(null);}  }
class C{  @Override public void zoomRangeAxes(double factor,PlotRenderingInfo state,Point2D source){  zoom(factor);}  }
class C{  public String rescan(Context context,MuninFoo muninFoo){  if (isEmpty())   return null;  String report="";  int nbAddedNodes=0;  int nbUpdatedNodes=0;  int nbDeletedNodes=0;  int nbAddedPlugins=0;  int nbUpdatedPlugins=0;  int nbDeletedPlugins=0;  if (!this.defaultMaster) {    MuninMaster onlineMaster=new MuninMaster();    onlineMaster.setUrl(this.url);    onlineMaster.setSSL(this.ssl);    onlineMaster.setAuthIds(this.authLogin,this.authPassword,this.authType);    String res=onlineMaster.detectPageType(muninFoo.getUserAgent());    if (res.equals("munin/x/") || res.equals("munin/")) {      if (onlineMaster.getSSL() != this.getSSL()) {        MuninFoo.logV("rescan","master.SSL: " + this.getSSL() + " -> "+ onlineMaster.getSSL());        this.setSSL(onlineMaster.getSSL());      }      if (!onlineMaster.getUrl().equals(this.getUrl()) && !onlineMaster.getUrl().equals("")) {        MuninFoo.logV("rescan","master.url: " + this.getUrl() + " -> "+ onlineMaster.getUrl());        this.setUrl(onlineMaster.getUrl());      }    }    onlineMaster.setDynazoomAvailable(DynazoomAvailability.AUTO_DETECT);    onlineMaster.fetchChildren(muninFoo.getUserAgent());    if (!onlineMaster.isEmpty()) {      ArrayList<MuninNode> toBeAdded=new ArrayList<>();      ArrayList<MuninNode> toBeUpdated=new ArrayList<>();      for (      MuninNode onlineNode : onlineMaster.getChildren()) {        boolean alreadyThere=false;        for (        MuninNode node : this.children) {          if (node.equalsApprox(onlineNode)) {            alreadyThere=true;            if (node.getParent().isDynazoomAvailable() != onlineNode.getParent().isDynazoomAvailable()) {              node.getParent().setDynazoomAvailable(onlineNode.getParent().isDynazoomAvailable());              if (onlineNode.getParent().isDynazoomAvailable() != DynazoomAvailability.AUTO_DETECT) {                MuninFoo.logV("rescan","Dynazoom availability has changed");                if (!toBeUpdated.contains(node))                 toBeUpdated.add(node);              }            }            if (!node.getHdGraphURL().equals(onlineNode.getHdGraphURL()) && !onlineNode.getHdGraphURL().equals("")) {              MuninFoo.logV("rescan","HDGraphUrl has changed");              node.setHdGraphURL(onlineNode.getHdGraphURL());              if (!toBeUpdated.contains(node))               toBeUpdated.add(node);            }            if (!node.getUrl().equals(onlineNode.getUrl()) && !onlineNode.getUrl().equals("")) {              MuninFoo.logV("rescan","node url has changed");              node.setUrl(onlineNode.getUrl());              if (!toBeUpdated.contains(node))               toBeUpdated.add(node);            }            if (node.getPosition() != onlineNode.getPosition() && onlineNode.getPosition() != -1) {              MuninFoo.logV("rescan","node position has changed");              node.setPosition(onlineNode.getPosition());              if (!toBeUpdated.contains(node))               toBeUpdated.add(node);            }            break;          }        }        if (!alreadyThere)         toBeAdded.add(onlineNode);      }      muninFoo.sqlite.dbHlpr.updateMuninMaster(this);      for (      MuninNode node : toBeAdded) {        addChild(node);        muninFoo.addNode(node);        muninFoo.sqlite.dbHlpr.insertMuninNode(node);        nbAddedNodes++;      }      toBeAdded.clear();      for (      MuninNode node : toBeUpdated) {        muninFoo.sqlite.dbHlpr.updateMuninNode(node);        nbUpdatedNodes++;      }      toBeUpdated.clear();      ArrayList<MuninNode> toBeRemoved=new ArrayList<>();      for (      MuninNode oldNode : this.children) {        boolean stillThere=false;        for (        MuninNode node : onlineMaster.getChildren()) {          if (node.equalsApprox(oldNode)) {            stillThere=true;            break;          }        }        if (!stillThere)         toBeRemoved.add(oldNode);      }      for (      MuninNode node : toBeRemoved) {        this.children.remove(node);        muninFoo.getNodes().remove(node);        muninFoo.sqlite.dbHlpr.deleteNode(node);        nbDeletedNodes++;      }      toBeRemoved.clear();      for (      MuninNode node : this.children) {        node.setHdGraphURL(null);        boolean graphUrlChanged=false;        String oldGraphUrl=node.getGraphURL();        List<MuninPlugin> onlinePlugins=node.getPluginsList(muninFoo.getUserAgent());        String newGraphUrl=node.getGraphURL();        if (!oldGraphUrl.equals(newGraphUrl))         graphUrlChanged=true;        if (onlinePlugins != null && !onlinePlugins.isEmpty()) {          ArrayList<MuninPlugin> pluginsToBeAdded=new ArrayList<>();          ArrayList<MuninPlugin> pluginsToBeUpdated=new ArrayList<>();          for (          MuninPlugin onlinePlugin : onlinePlugins) {            boolean alreadyThere=false;            for (            MuninPlugin oldPlugin : node.getPlugins()) {              if (oldPlugin.equalsApprox(onlinePlugin)) {                alreadyThere=true;                if (!oldPlugin.getCategory().equals(onlinePlugin.getCategory()) && !onlinePlugin.getCategory().equals("")) {                  oldPlugin.setCategory(onlinePlugin.getCategory());                  pluginsToBeUpdated.add(oldPlugin);                }                break;              }            }            if (!alreadyThere)             pluginsToBeAdded.add(onlinePlugin);          }          for (          MuninPlugin plugin : pluginsToBeAdded) {            node.addPlugin(plugin);            muninFoo.sqlite.dbHlpr.insertMuninPlugin(plugin);            nbAddedPlugins++;          }          for (          MuninPlugin plugin : pluginsToBeUpdated) {            muninFoo.sqlite.dbHlpr.updateMuninPlugin(plugin);            nbUpdatedPlugins++;          }          ArrayList<MuninPlugin> pluginsToBeRemoved=new ArrayList<>();          for (          MuninPlugin oldPlugin : node.getPlugins()) {            boolean stillThere=false;            for (            MuninPlugin onlinePlugin : onlinePlugins) {              if (oldPlugin.equalsApprox(onlinePlugin)) {                stillThere=true;                break;              }            }            if (!stillThere) {              pluginsToBeRemoved.add(oldPlugin);              muninFoo.sqlite.dbHlpr.deleteMuninPlugin(oldPlugin,true);            }          }          for (          MuninPlugin plugin : pluginsToBeRemoved) {            node.getPlugins().remove(plugin);            muninFoo.sqlite.dbHlpr.deletePlugin(plugin);            nbDeletedPlugins++;          }          if (graphUrlChanged)           muninFoo.sqlite.dbHlpr.updateMuninNode(node);        }      }    }  }  if (nbAddedNodes + nbUpdatedNodes + nbDeletedNodes+ nbAddedPlugins+ nbUpdatedPlugins+ nbDeletedPlugins == 0)   report=context.getString(R.string.sync_nochange); else {    if (nbAddedNodes > 0)     report+=context.getString(R.string.sync_serversadded).replace("XXX",String.valueOf(nbAddedNodes));    if (nbUpdatedNodes > 0)     report+=context.getString(R.string.sync_serversupdated).replace("XXX",String.valueOf(nbUpdatedNodes));    if (nbDeletedNodes > 0)     report+=context.getString(R.string.sync_serversdeleted).replace("XXX",String.valueOf(nbDeletedNodes));    if (nbAddedPlugins > 0)     report+=context.getString(R.string.sync_pluginsadded).replace("XXX",String.valueOf(nbAddedPlugins));    if (nbUpdatedPlugins > 0)     report+=context.getString(R.string.sync_pluginsupdated).replace("XXX",String.valueOf(nbUpdatedPlugins));    if (nbDeletedPlugins > 0)     report+=context.getString(R.string.sync_pluginsdeleted).replace("XXX",String.valueOf(nbDeletedPlugins));  }  return report;}  }
class C{  public void configure(){  from("ftp://rider@localhost:21000/order?password=secret").to("jms:incomingOrders");  from("cxf:bean:orderEndpoint").to("jms:incomingOrders");  from("jms:incomingOrders").to("log:camelinaction.order");}  }
class C{  public String processSensorDataMessage(byte[] readData){  Date d=new Date();  long difference=0;  if (isCalibrating && lastGlucometerDate > 0) {    difference=d.getTime() - lastGlucometerDate;  }  int added=8;  int firstMeasureByte=firstByteAfterDeviceId(readData);  int currentMeasure=-1;  float isig=0;  StringBuffer sResult=new StringBuffer("");  if (firstMeasureByte < 0)   return "Error, I can not identify the initial byte of the sensor measure";  int numBytes=HexDump.unsignedByte(readData[1]);  if (firstMeasureByte > readData.length || numBytes > readData.length || numBytes <= 0)   return "Error, I have detected an error in sensor message size";  int previousCalibrationStatus=calibrationStatus;  float previousCalibrationFactor=calibrationFactor;  short adjustement=(short)readData[firstMeasureByte + 2];  long firstTimeOut=d.getTime() - lastSensorValueDate;  if (HexDump.unsignedByte(expectedSensorSortNumber) == HexDump.unsignedByte((byte)0xff) || firstTimeOut == d.getTime() || (firstTimeOut > MedtronicConstants.TIME_10_MIN_IN_MS + MedtronicConstants.TIME_30_MIN_IN_MS)) {    Log.i("Medtronic","First");    log.debug("SENSOR MEASURE, First Time, retrieving all previous measures");    lastElementsAdded=0;synchronized (expectedSensorSortNumberLock) {      expectedSensorSortNumber=readData[firstMeasureByte + 3];    }    for (int i=20; i >= 0; i-=2) {      if (i >= 4 && i < 8) {        continue;      }      lastElementsAdded++;      byte[] arr=Arrays.copyOfRange(readData,firstMeasureByte + 4 + i,firstMeasureByte + 6 + i);      byte[] res=new byte[4];      if (arr.length < 4) {        for (int j=0; j < 4; j++) {          res[j]=(byte)0x00;          if (j >= 4 - arr.length)           res[j]=arr[Math.abs(4 - j - arr.length)];        }      } else       res=arr;      ByteBuffer wrapped=ByteBuffer.wrap(res);      int num=wrapped.getInt();      MedtronicSensorRecord record=new MedtronicSensorRecord();      record.isCalibrating=isCalibrating;      isig=calculateISIG(num,adjustement);      record.setIsig(isig);      if (i == 0) {        currentMeasure=num;        calibratingCurrentElement(difference,isig,readData,firstMeasureByte + 3,record,num,d);      } else {        calibratingBackwards(previousCalibrationFactor,previousCalibrationStatus,isig,record,added,d);      }      added--;      lastRecordsInMemory.add(record);      calculateTrendAndArrow(record,lastRecordsInMemory);      sResult.append("Measure(").append(((i + 2) / 2)).append("): ").append(num);    }  } else {    log.debug("Estoy Esperando " + HexDump.toHexString(expectedSensorSortNumber) + " He recibido "+ HexDump.toHexString(readData[firstMeasureByte + 3]));    if (HexDump.unsignedByte(expectedSensorSortNumber) == HexDump.unsignedByte(readData[firstMeasureByte + 3]) || HexDump.unsignedByte(calculateNextSensorSortNameFrom(1,expectedSensorSortNumber)) == HexDump.unsignedByte(readData[firstMeasureByte + 3])) {      Log.i("Medtronic","Expected sensor number received!!");      log.debug("SENSOR MEASURE, Expected sensor measure received!!");      lastElementsAdded=0;      if (!isSensorRepeatedMessage(readData[firstMeasureByte + 3]) || HexDump.unsignedByte((byte)((byte)expectedSensorSortNumber & (byte)0x01)) < 1 && HexDump.unsignedByte((byte)((byte)readData[firstMeasureByte + 3] & (byte)0x01)) == 1) {        byte[] arr=Arrays.copyOfRange(readData,firstMeasureByte + 4,firstMeasureByte + 6);        byte[] res=new byte[4];        if (arr.length < 4) {          for (int j=0; j < 4; j++) {            res[j]=(byte)0x00;            if (j >= 4 - arr.length)             res[j]=arr[Math.abs(4 - j - arr.length)];          }        } else         res=arr;        ByteBuffer wrapped=ByteBuffer.wrap(res);        int num=wrapped.getInt();        MedtronicSensorRecord record=new MedtronicSensorRecord();        isig=calculateISIG(num,adjustement);        record.setIsig(isig);        record.isCalibrating=isCalibrating;        currentMeasure=num;        calibratingCurrentElement(difference,isig,readData,firstMeasureByte + 3,record,num,d);        lastRecordsInMemory.add(record);        calculateTrendAndArrow(record,lastRecordsInMemory);        sResult.append("last measure: ").append(num);        lastElementsAdded++;      } else {synchronized (expectedSensorSortNumberLock) {          expectedSensorSortNumber=calculateNextSensorSortNameFrom(1,expectedSensorSortNumber);        }        return sResult.toString();      }    } else {      Log.i("Medtronic","NOT Expected sensor number received!!");      log.debug("SENSOR MEASURE, NOT Expected sensor measure received!!");      int dataLost=-1;      if (previousRecord != null || lastSensorValueDate > 0) {        long timeDiff=0;        if (previousRecord != null)         timeDiff=d.getTime() - previousRecord.displayDateTime; else         timeDiff=d.getTime() - lastSensorValueDate;        if (timeDiff > (MedtronicConstants.TIME_30_MIN_IN_MS + MedtronicConstants.TIME_10_MIN_IN_MS)) {          dataLost=10;          added=8;        } else {          int valPrev=transformSequenceToIndex(expectedSensorSortNumber);          int currentVal=transformSequenceToIndex(readData[firstMeasureByte + 3]);          if (valPrev > currentVal)           currentVal=8 + currentVal;          dataLost=(currentVal - (valPrev)) % 9;          if (dataLost < 0)           dataLost*=-1;          dataLost--;          added=dataLost;          Log.i("medtronic"," valPrev " + valPrev + " currentVal "+ currentVal+ " dataLost "+ dataLost+ " added "+ added);        }      } else {        dataLost=10;        added=8;      }      Log.i("Medtronic","Data Lost " + dataLost);      if (dataLost >= 0) {        if (dataLost >= 2)         dataLost+=2;        if (dataLost > 10) {          dataLost=10;          added=8;        }        log.debug("SENSOR MEASURE, I am going to retrieve " + (dataLost) + " previous values");        dataLost*=2;        lastElementsAdded=0;        if (dataLost == 20 || dataLost == 0) {synchronized (expectedSensorSortNumberLock) {            expectedSensorSortNumber=readData[firstMeasureByte + 3];          }        }        for (int i=dataLost; i >= 0; i-=2) {          if (i >= 4 && i < 8) {            continue;          }          lastElementsAdded++;          byte[] arr=Arrays.copyOfRange(readData,firstMeasureByte + 4 + i,firstMeasureByte + 6 + i);          byte[] res=new byte[4];          if (arr.length < 4) {            for (int j=0; j < 4; j++) {              res[j]=(byte)0x00;              if (j >= 4 - arr.length)               res[j]=arr[Math.abs(4 - j - arr.length)];            }          } else           res=arr;          ByteBuffer wrapped=ByteBuffer.wrap(res);          int num=wrapped.getInt();          MedtronicSensorRecord record=new MedtronicSensorRecord();          record.isCalibrating=isCalibrating;          isig=calculateISIG(num,adjustement);          record.setIsig(isig);          if (i == 0) {            currentMeasure=num;            calibratingCurrentElement(difference,isig,readData,firstMeasureByte + 3,record,num,d);          } else {            calibratingBackwards(previousCalibrationFactor,previousCalibrationStatus,isig,record,added,d);          }          added--;          lastRecordsInMemory.add(record);          calculateTrendAndArrow(record,lastRecordsInMemory);          sResult.append("Measure(").append(((i + 2) / 2)).append("): ").append(num);        }      } else {        byte[] arr=Arrays.copyOfRange(readData,firstMeasureByte + 4,firstMeasureByte + 6);        byte[] res=new byte[4];        if (arr.length < 4) {          for (int j=0; j < 4; j++) {            res[j]=(byte)0x00;            if (j >= 4 - arr.length)             res[j]=arr[Math.abs(4 - j - arr.length)];          }        } else         res=arr;        ByteBuffer wrapped=ByteBuffer.wrap(res);        int num=wrapped.getInt();        MedtronicSensorRecord record=new MedtronicSensorRecord();        isig=calculateISIG(num,adjustement);        record.setIsig(isig);        record.isCalibrating=isCalibrating;        currentMeasure=num;        calibratingCurrentElement(difference,isig,readData,firstMeasureByte + 3,record,num,d);        lastRecordsInMemory.add(record);        calculateTrendAndArrow(record,lastRecordsInMemory);        sResult.append("last measure: ").append(num);        lastElementsAdded++;      }    }    Log.i("Medtronic","Fill next expected");    expectedSensorSortNumber=readData[firstMeasureByte + 3];  }  previousValue=currentMeasure;synchronized (expectedSensorSortNumberLock) {    expectedSensorSortNumber=calculateNextSensorSortNameFrom(1,expectedSensorSortNumber);  }  SharedPreferences.Editor editor=settings.edit();  editor.putFloat("previousValue",(float)previousValue);  editor.putString("expectedSensorSortNumber",HexDump.toHexString(expectedSensorSortNumber));  editor.putInt("calibrationStatus",calibrationStatus);  lastSensorValueDate=d.getTime();  editor.putLong("lastSensorValueDate",lastSensorValueDate);  editor.commit();  log.debug("12");  writeLocalCSV(previousRecord,context);  Log.i("Medtronic","BYE!!!!");  log.debug("sensorprocessed end expected " + HexDump.toHexString(expectedSensorSortNumber));  return sResult.toString();}  }
class C{  @Override protected void runService(){  try {    while (true) {      Thread.sleep(HEART_BEAT);      checkEngineStates();    }  } catch (  InterruptedException e) {    Thread.currentThread().interrupt();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:44.745 -0500",hash_original_method="63C6946FC58566498A0CAB48839D6A9B",hash_generated_method="214151EB5D4D89012A234996889CF1B8") public static final Intent addDrmFile(ContentResolver cr,File file,String title){  FileInputStream fis=null;  Intent result=null;  try {    fis=new FileInputStream(file);    if (title == null) {      title=file.getName();      int lastDot=title.lastIndexOf('.');      if (lastDot > 0) {        title=title.substring(0,lastDot);      }    }    result=addDrmFile(cr,fis,title);  } catch (  Exception e) {    Log.e(TAG,"pushing file failed",e);  } finally {    try {      if (fis != null)       fis.close();    } catch (    IOException e) {      Log.e(TAG,"IOException in DrmStore.addDrmFile()",e);    }  }  return result;}  }
class C{  public BoundingBox extend(BoundingBox other){  double north=Math.max(getNorthEast().getLatitude(),other.getNorthEast().getLatitude());  double east=Math.max(getNorthEast().getLongitude(),other.getNorthEast().getLongitude());  double south=Math.min(getSouthWest().getLatitude(),other.getSouthWest().getLatitude());  double west=Math.min(getSouthWest().getLongitude(),other.getSouthWest().getLongitude());  return new BoundingBox(new Coord(south,west,projected()),new Coord(north,east,projected()));}  }
class C{  private boolean _isRunning(JComponent c){  return (c == component && timer != null && timer.isRunning());}  }
class C{  public static long parseTimeNanos(String s,int start,int end,boolean timeOfDay){  int hour=0, minute=0, second=0;  long nanos=0;  int s1=s.indexOf(':',start);  int s2=s.indexOf(':',s1 + 1);  int s3=s.indexOf('.',s2 + 1);  if (s1 <= 0 || s2 <= s1) {    s1=s.indexOf('.',start);    s2=s.indexOf('.',s1 + 1);    s3=s.indexOf('.',s2 + 1);    if (s1 <= 0 || s2 <= s1) {      throw new IllegalArgumentException(s);    }  }  boolean negative;  hour=Integer.parseInt(s.substring(start,s1));  if (hour < 0) {    if (timeOfDay) {      throw new IllegalArgumentException(s);    }    negative=true;    hour=-hour;  } else {    negative=false;  }  minute=Integer.parseInt(s.substring(s1 + 1,s2));  if (s3 < 0) {    second=Integer.parseInt(s.substring(s2 + 1,end));  } else {    second=Integer.parseInt(s.substring(s2 + 1,s3));    String n=(s.substring(s3 + 1,end) + "000000000").substring(0,9);    nanos=Integer.parseInt(n);  }  if (hour >= 2000000 || minute < 0 || minute >= 60 || second < 0 || second >= 60) {    throw new IllegalArgumentException(s);  }  if (timeOfDay && hour >= 24) {    throw new IllegalArgumentException(s);  }  nanos+=((((hour * 60L) + minute) * 60) + second) * 1000000000;  return negative ? -nanos : nanos;}  }
class C{  static int newVecInsertPos(int oldPos,Vector<Insertion> vec){  return innerNewVecInsertPos(oldPos,0,vec);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(1);  newVector.addElement(new Option("\tMaximum variance percentage allowed (default 99)","M",1,"-M <max variance %>"));  return newVector.elements();}  }
class C{  private void persistWorkflowStep(Workflow workflow,Step step) throws WorkflowException {  Workflow.Method executeMethod=step.executeMethod;  Workflow.Method rollbackMethod=step.rollbackMethod;  try {    logStep(workflow,step);    step.executeMethod=null;    step.rollbackMethod=null;    String workflowPath=getZKWorkflowPath(workflow);    Stat stat=_dataManager.checkExists(workflowPath);    if (stat == null) {      _dataManager.createNode(workflowPath,false);    }    String path=getZKStepPath(workflow,step);    _dataManager.putData(path,step);    stat=_dataManager.checkExists(path);    _log.debug("Created path " + path + " bytes "+ stat.getDataLength());    path=getZKStep2WorkflowPath(step.stepId);    _dataManager.putData(path,workflowPath);    _log.debug("Created step path: " + path);  } catch (  Exception ex) {    throw new WorkflowException("Cannot persist step in ZK",ex);  } finally {    step.executeMethod=executeMethod;    step.rollbackMethod=rollbackMethod;  }}  }
class C{  public boolean registerUserClass(Class<? extends ID> clazz,Class<? extends NSClass> clazzClazz){  return subclassing.registerUserClass(clazz,clazzClazz);}  }
class C{  public JmsQueueResourceOnStandaloneConfigurationTest(String testName,EnvironmentTestData testData) throws Exception {  super(testName,testData);}  }
class C{  public static Object read(File file) throws Exception {  return read(new BufferedInputStream(new FileInputStream(file)));}  }
class C{  public Instrumenter attachInvertedGenerationalDistanceCollector(){  includeInvertedGenerationalDistance=true;  return this;}  }
class C{  protected void writeToRowFromAggregateForUpdateAfterShallowInsert(AbstractRecord record,Object object,Object attributeValue,AbstractSession session,DatabaseTable table) throws DescriptorException {  if (attributeValue == null) {    if (!this.isNullAllowed) {      throw DescriptorException.nullForNonNullAggregate(object,this);    }  } else   if (!session.isClassReadOnly(attributeValue.getClass()) && !isPrimaryKeyMapping()) {    getObjectBuilder(attributeValue,session).buildRowForUpdateAfterShallowInsert(record,attributeValue,session,table);  }}  }
class C{  protected void executeStoragePolicyTransitionAfterStepImpl(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto){  S3FileTransferRequestParamsDto s3FileTransferRequestParamsDto=storageHelper.getS3FileTransferRequestParamsDto();  s3FileTransferRequestParamsDto.setS3BucketName(storagePolicyTransitionParamsDto.getSourceBucketName());  s3FileTransferRequestParamsDto.setS3Endpoint(configurationHelper.getProperty(ConfigurationValue.S3_ENDPOINT));  s3FileTransferRequestParamsDto.setS3KeyPrefix(StringUtils.appendIfMissing(storagePolicyTransitionParamsDto.getSourceS3KeyPrefix(),"/"));  s3Service.deleteDirectoryIgnoreException(s3FileTransferRequestParamsDto);}  }
class C{  private void updateRefreshActionEnabled(){  refreshAction.setEnabled(!table.isEditable() && Env.APP_SETTINGS.get(Settings.SHOW_REPLAYS_COUNT));}  }
class C{  protected void loadTiles(String csvFileName){  int imageCount=0;  if (csvFileName != null) {    try {      tilefile=new CSVFile(csvFileName);      tilefile.setHeadersExist(fileHasHeader);      tilefile.loadData(false);      Iterator records=tilefile.iterator();      while (records.hasNext()) {        Vector record=(Vector)records.next();        if (DEBUG) {          Debug.output("CSVTIPI: record: " + record);        }        String imageURLString=null;        try {          float ullat=((Double)record.get(ullatIndex)).floatValue();          float ullon=((Double)record.get(ullonIndex)).floatValue();          float lrlat=((Double)record.get(lrlatIndex)).floatValue();          float lrlon=((Double)record.get(lrlonIndex)).floatValue();          imageURLString=(String)record.get(urlIndex);          URL imageURL=PropUtils.getResourceOrFileOrURL(imageURLString);          FileCacheImageInputStream fciis=new FileCacheImageInputStream(imageURL.openStream(),null);          BufferedImage fileImage=ImageIO.read(fciis);          OMScalingRaster omsr=new OMScalingRaster(ullat,ullon,lrlat,lrlon,fileImage);          tiles.add(omsr);          imageCount++;        } catch (        MalformedURLException innerMurle) {          Debug.error("CSVTiledImagePlugIn: image tile path not valid: " + imageURLString + ", skipping...");        }catch (        ArrayIndexOutOfBoundsException aioobe) {          Debug.error("CSVTiledImagePlugIn: having trouble reading line (" + imageCount + "), skipping...\n"+ aioobe.getMessage());        }catch (        IOException ioe) {          Debug.error("CSVTiledImagePlugIn: having trouble reading line (" + imageCount + "), skipping...\n"+ ioe.getMessage());        }      }    } catch (    MalformedURLException murle) {      Debug.error("CSVTiledImagePlugIn: CSV tile file not valid: " + csvFileName);    }  }}  }
class C{  public void forgetExternalProjects(@NotNull Set<String> linkedProjectPathsToForget){  Map<ExternalProjectPojo,Collection<ExternalProjectPojo>> projects=myAvailableProjects.get();  for (Iterator<Map.Entry<ExternalProjectPojo,Collection<ExternalProjectPojo>>> it=projects.entrySet().iterator(); it.hasNext(); ) {    Map.Entry<ExternalProjectPojo,Collection<ExternalProjectPojo>> entry=it.next();    if (linkedProjectPathsToForget.contains(entry.getKey().getPath())) {      it.remove();    }  }  for (Iterator<Map.Entry<String,Collection<ExternalTaskPojo>>> it=myAvailableTasks.get().entrySet().iterator(); it.hasNext(); ) {    Map.Entry<String,Collection<ExternalTaskPojo>> entry=it.next();    if (linkedProjectPathsToForget.contains(entry.getKey()) || linkedProjectPathsToForget.contains(ExternalSystemApiUtil.getRootProjectPath(entry.getKey(),myExternalSystemId,myProject))) {      it.remove();    }  }  for (Iterator<ExternalTaskExecutionInfo> it=myRecentTasks.get().iterator(); it.hasNext(); ) {    ExternalTaskExecutionInfo taskInfo=it.next();    String path=taskInfo.getSettings().getExternalProjectPath();    if (linkedProjectPathsToForget.contains(path) || linkedProjectPathsToForget.contains(ExternalSystemApiUtil.getRootProjectPath(path,myExternalSystemId,myProject))) {      it.remove();    }  }  for (Iterator<Map.Entry<String,ExternalProjectBuildClasspathPojo>> it=myProjectBuildClasspath.get().entrySet().iterator(); it.hasNext(); ) {    Map.Entry<String,ExternalProjectBuildClasspathPojo> entry=it.next();    if (linkedProjectPathsToForget.contains(entry.getKey()) || linkedProjectPathsToForget.contains(ExternalSystemApiUtil.getRootProjectPath(entry.getKey(),myExternalSystemId,myProject))) {      it.remove();    }  }  Map<String,Long> modificationStamps=myExternalConfigModificationStamps.get();  for (  String path : linkedProjectPathsToForget) {    modificationStamps.remove(path);  }}  }
class C{  public JavaWordIterator(){  fIterator=new JavaBreakIterator();  first();}  }
class C{  private void mergeDepartures(TransitScheduleFactoryImpl factory,Map<Id<TransitRoute>,TransitRoute> transitRoutes,TransitRoute mergedTransitRoute,String[] listOfTransitRoutes){  TransitRouteStop startTransitRouteStop=mergedTransitRoute.getStops().get(0);  for (int i=0; i < listOfTransitRoutes.length; i++) {    TransitRoute transitRoute=transitRoutes.get(Id.create(listOfTransitRoutes[i],TransitRoute.class));    if (mergedTransitRouteContainsTransitRouteStops(mergedTransitRoute,transitRoute,startTransitRouteStop)) {      for (      Departure departure : transitRoute.getDepartures().values()) {        String departureId=mergedTransitRoute.getDepartures().size() < 10 ? "0" + Integer.toString(mergedTransitRoute.getDepartures().size()) : Integer.toString(mergedTransitRoute.getDepartures().size());        Departure dep=factory.createDeparture(Id.create(departureId,Departure.class),departure.getDepartureTime() + transitRoute.getStop(startTransitRouteStop.getStopFacility()).getDepartureOffset());        dep.setVehicleId(departure.getVehicleId());        mergedTransitRoute.addDeparture(dep);      }    }  }}  }
class C{  public String suffixCountTipText(){  return "The suffix for the 'count' statistic.";}  }
class C{  public DefaultTableModel(Object[][] data,Object[] columnNames){  setDataVector(data,columnNames);}  }
class C{  public FloatArrayList bottom(int n){  FloatArrayList bottom=new FloatArrayList();  float[] values=data.toFloatArray();  FloatArrays.parallelQuickSort(values);  for (int i=0; i < n && i < values.length; i++) {    bottom.add(values[i]);  }  return bottom;}  }
class C{  protected Rectangle findNodeBounds(TreeNode needle,TreeNode haystack,DrawContext dc,Dimension frameSize,Point location,int level){  TreeAttributes attributes=this.getActiveAttributes();  int oldX=location.x;  if (level > 1 || attributes.isRootVisible()) {    Dimension size=this.getNodeSize(dc,frameSize,location.x,haystack,attributes);    location.y-=(size.height + this.getActiveAttributes().getRowSpacing());    Rectangle nodeBounds=new Rectangle(location.x,location.y,size.width,size.height);    if (haystack.getPath().equals(needle.getPath()))     return nodeBounds;    location.x+=level * this.indent;  }  if (this.tree.isNodeExpanded(haystack)) {    for (    TreeNode child : haystack.getChildren()) {      Rectangle bounds=this.findNodeBounds(needle,child,dc,frameSize,location,level + 1);      if (bounds != null)       return bounds;    }  }  location.x=oldX;  return null;}  }
class C{  public BarcodeView(BarcodeEncoding encoding,String value){  super();  barcodeFX=new BarcodeFX(encoding,value);  data=new SimpleStringProperty(value);  data.addListener(null);  if (value.length() > 0) {    this.setImage(barcodeFX.getImage());  }  setSmooth(true);  setPreserveRatio(true);  VBox.setVgrow(this,Priority.ALWAYS);  HBox.setHgrow(this,Priority.ALWAYS);  setOnDragDetected(null);  setOnDragDone(null);}  }
class C{  private synchronized void rebuildJournal() throws IOException {  if (journalWriter != null) {    journalWriter.close();  }  Writer writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFileTmp),Util.US_ASCII));  try {    writer.write(MAGIC);    writer.write("\n");    writer.write(VERSION_1);    writer.write("\n");    writer.write(Integer.toString(appVersion));    writer.write("\n");    writer.write(Integer.toString(valueCount));    writer.write("\n");    writer.write("\n");    for (    Entry entry : lruEntries.values()) {      if (entry.currentEditor != null) {        writer.write(DIRTY + ' ' + entry.key+ '\n');      } else {        writer.write(CLEAN + ' ' + entry.key+ entry.getLengths()+ '\n');      }    }  }  finally {    writer.close();  }  if (journalFile.exists()) {    renameTo(journalFile,journalFileBackup,true);  }  renameTo(journalFileTmp,journalFile,false);  journalFileBackup.delete();  journalWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFile,true),Util.US_ASCII));}  }
class C{  public TracePeriod_ createTracePeriod_(){  TracePeriod_Impl tracePeriod_=new TracePeriod_Impl();  return tracePeriod_;}  }
class C{  public SurfacePolyline(Iterable<? extends LatLon> iterable){  if (iterable == null) {    String message=Logging.getMessage("nullValue.IterableIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.locations=iterable;}  }
class C{  public List<T> restore(List<T> target){  List<T> result=new LinkedList<T>(target);  ListIterator<Delta<T>> it=getDeltas().listIterator(deltas.size());  while (it.hasPrevious()) {    Delta<T> delta=(Delta<T>)it.previous();    delta.restore(result);  }  return result;}  }
class C{  static public XObject create(Object val,XPathContext xctxt){  XObject result;  if (val instanceof XObject) {    result=(XObject)val;  } else   if (val instanceof String) {    result=new XString((String)val);  } else   if (val instanceof Boolean) {    result=new XBoolean((Boolean)val);  } else   if (val instanceof Number) {    result=new XNumber(((Number)val));  } else   if (val instanceof DTM) {    DTM dtm=(DTM)val;    try {      int dtmRoot=dtm.getDocument();      DTMAxisIterator iter=dtm.getAxisIterator(Axis.SELF);      iter.setStartNode(dtmRoot);      DTMIterator iterator=new OneStepIterator(iter,Axis.SELF);      iterator.setRoot(dtmRoot,xctxt);      result=new XNodeSet(iterator);    } catch (    Exception ex) {      throw new org.apache.xml.utils.WrappedRuntimeException(ex);    }  } else   if (val instanceof DTMAxisIterator) {    DTMAxisIterator iter=(DTMAxisIterator)val;    try {      DTMIterator iterator=new OneStepIterator(iter,Axis.SELF);      iterator.setRoot(iter.getStartNode(),xctxt);      result=new XNodeSet(iterator);    } catch (    Exception ex) {      throw new org.apache.xml.utils.WrappedRuntimeException(ex);    }  } else   if (val instanceof DTMIterator) {    result=new XNodeSet((DTMIterator)val);  } else   if (val instanceof org.w3c.dom.Node) {    result=new XNodeSetForDOM((org.w3c.dom.Node)val,xctxt);  } else   if (val instanceof org.w3c.dom.NodeList) {    result=new XNodeSetForDOM((org.w3c.dom.NodeList)val,xctxt);  } else   if (val instanceof org.w3c.dom.traversal.NodeIterator) {    result=new XNodeSetForDOM((org.w3c.dom.traversal.NodeIterator)val,xctxt);  } else {    result=new XObject(val);  }  return result;}  }
class C{  public void drawPolygon(Polygon p){  g.drawPolygon(p);}  }
class C{  private void updateTreeModel(final DocumentEvent e){  try {    final String s=e.getDocument().getText(0,e.getDocument().getLength());    final FilteredTreeModel treeModel=(FilteredTreeModel)m_tree.getModel();    treeModel.setFilter(new TextPatternFilter(s));  } catch (  final BadLocationException e1) {    Logger.logException(e1);  }}  }
class C{  @Override public void associateConnection(final Object obj) throws ResourceException {  if (ActiveMQRAManagedConnection.trace) {    ActiveMQRALogger.LOGGER.trace("associateConnection(" + obj + ")");  }  if (!isDestroyed.get() && obj instanceof ActiveMQRASession) {    ActiveMQRASession h=(ActiveMQRASession)obj;    h.setManagedConnection(this);    handles.add(h);  } else {    throw new IllegalStateException("ManagedConnection in an illegal state");  }}  }
class C{  public static Map<String,Object> cancelRemainingPurchaseOrderItems(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  GenericValue userLogin=(GenericValue)context.get("userLogin");  Locale locale=(Locale)context.get("locale");  String orderId=(String)context.get("orderId");  try {    GenericValue orderHeader=EntityQuery.use(delegator).from("OrderHeader").where("orderId",orderId).queryOne();    if (UtilValidate.isEmpty(orderHeader)) {      String errorMessage=UtilProperties.getMessage(resource_error,"OrderErrorOrderIdNotFound",UtilMisc.toMap("orderId",orderId),locale);      Debug.logError(errorMessage,module);      return ServiceUtil.returnError(errorMessage);    }    if (!"PURCHASE_ORDER".equals(orderHeader.getString("orderTypeId"))) {      String errorMessage=UtilProperties.getMessage(resource_error,"OrderErrorOrderNotPurchaseOrder",UtilMisc.toMap("orderId",orderId),locale);      Debug.logError(errorMessage,module);      return ServiceUtil.returnError(errorMessage);    }    List<GenericValue> orderItems=orderHeader.getRelated("OrderItem",null,null,false);    for (    GenericValue orderItem : orderItems) {      if (!"PRODUCT_ORDER_ITEM".equals(orderItem.getString("orderItemTypeId")))       continue;      BigDecimal orderItemQuantity=BigDecimal.ZERO;      if (!UtilValidate.isEmpty(orderItem.get("quantity"))) {        orderItemQuantity=orderItem.getBigDecimal("quantity");      }      BigDecimal orderItemCancelQuantity=BigDecimal.ZERO;      if (!UtilValidate.isEmpty(orderItem.get("cancelQuantity"))) {        orderItemCancelQuantity=orderItem.getBigDecimal("cancelQuantity");      }      List<GenericValue> shipmentReceipts=orderItem.getRelated("ShipmentReceipt",null,null,false);      BigDecimal receivedQuantity=BigDecimal.ZERO;      for (      GenericValue shipmentReceipt : shipmentReceipts) {        if (!UtilValidate.isEmpty(shipmentReceipt.get("quantityAccepted"))) {          receivedQuantity=receivedQuantity.add(shipmentReceipt.getBigDecimal("quantityAccepted"));        }      }      BigDecimal quantityToCancel=orderItemQuantity.subtract(orderItemCancelQuantity).subtract(receivedQuantity);      if (quantityToCancel.compareTo(BigDecimal.ZERO) > 0) {        Map<String,Object> cancelOrderItemResult=dispatcher.runSync("cancelOrderItem",UtilMisc.toMap("orderId",orderId,"orderItemSeqId",orderItem.get("orderItemSeqId"),"cancelQuantity",quantityToCancel,"userLogin",userLogin));        if (ServiceUtil.isError(cancelOrderItemResult))         return cancelOrderItemResult;      }      orderItem.refresh();      if ("ITEM_APPROVED".equals(orderItem.getString("statusId"))) {        Map<String,Object> changeOrderItemStatusResult=dispatcher.runSync("changeOrderItemStatus",UtilMisc.toMap("orderId",orderId,"orderItemSeqId",orderItem.get("orderItemSeqId"),"statusId","ITEM_COMPLETED","userLogin",userLogin));        if (ServiceUtil.isError(changeOrderItemStatusResult))         return changeOrderItemStatusResult;      }    }  } catch (  GenericEntityException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(e.getMessage());  }catch (  GenericServiceException se) {    Debug.logError(se,module);    return ServiceUtil.returnError(se.getMessage());  }  return ServiceUtil.returnSuccess();}  }
class C{  public void readEnumerated() throws IOException {  if (tag != ASN1Constants.TAG_ENUM) {    throw expected("enumerated");  }  if (length == 0) {    throw new ASN1Exception("ASN.1 enumerated: wrong length for identifier at [" + tagOffset + "]");  }  readContent();  if (length > 1) {    int bits=buffer[contentOffset] & 0xFF;    if (buffer[contentOffset + 1] < 0) {      bits+=0x100;    }    if (bits == 0 || bits == 0x1FF) {      throw new ASN1Exception("ASN.1 enumerated: wrong content at [" + contentOffset + "]. An integer MUST be encoded in minimum number of octets");    }  }}  }
class C{  public final void joinChannel(String channel,String key){  this.joinChannel(channel + " " + key);}  }
class C{  public boolean hasName(){  return getName() != null;}  }
class C{  @SuppressWarnings("unchecked") public void scatterPort(JobRecord job,String portId,Object value,Integer position,Integer numberOfScatteredFromEvent,boolean isLookAhead,boolean isFromEvent) throws EventHandlerException {  DAGNode node=dagNodeDB.get(InternalSchemaHelper.normalizeId(job.getId()),job.getRootId());  if (job.getScatterStrategy() == null) {    try {      job.setScatterStrategy(scatterStrategyFactory.create(node));    } catch (    BindingException e) {      throw new EventHandlerException(e);    }  }  if (isLookAhead) {    int numberOfScattered=getNumberOfScattered(job,numberOfScatteredFromEvent);    createScatteredJobs(job,portId,value,node,numberOfScattered,position);    return;  }  if (value == null) {    createScatteredJobs(job,portId,value,node,1,position);    return;  }  List<Object> values=null;  boolean usePositionFromEvent=true;  if (isFromEvent || !(value instanceof List<?>)) {    if (job.getInputPortIncoming(portId) == 1) {      usePositionFromEvent=false;      if (!(value instanceof List<?>)) {        throw new EventHandlerException("Port " + portId + " for "+ job.getId()+ " and rootId "+ job.getRootId()+ " is not a list and therefore cannot be scattered.");      }      values=(List<Object>)value;    } else {      values=new ArrayList<>();      values.add(value);    }  } else {    usePositionFromEvent=false;    values=(List<Object>)value;  }  for (int i=0; i < values.size(); i++) {    createScatteredJobs(job,portId,values.get(i),node,values.size(),usePositionFromEvent ? position : i + 1);  }}  }
class C{  protected byte[] engineGetIV(){  return null;}  }
class C{  private int findIndex(Object key,Object[] array){  int length=array.length;  int index=getModuloHash(key,length);  int last=(index + length - 1) % length;  while (index != last) {    if (array[index] == key || array[index] == null) {      break;    }    index=(index + 1) % length;  }  return index;}  }
class C{  public void addComittedHeapMemorySize(long comittedHeapMemorySize){  this.totalComittedHeapMemorySize+=comittedHeapMemorySize;}  }
class C{  public void addMethodThrowingException(MethodType type){  addMethodThrowingExceptionNoBidirectionalUpdate(type);  type.addExceptionNoBidirectionalUpdate(this);}  }
class C{  public JSONTokener(InputStream inputStream) throws JSONException {  this(new InputStreamReader(inputStream));}  }
class C{  public void initPersistent(int N,DynamicBayesianNetwork dbn){  this.N=N;  this.dbn=dbn;  S=new AssignmentProposition[N][this.dbn.getX_0().size()];  S_tp1=new AssignmentProposition[N][this.dbn.getX_0().size()];  Integer[] indexes=new Integer[N];  for (int i=0; i < N; i++) {    indexes[i]=i;    Map<RandomVariable,Object> sample=priorSampler.priorSample(this.dbn.getPriorNetwork());    int idx=0;    for (    Map.Entry<RandomVariable,Object> sa : sample.entrySet()) {      S[i][idx]=new AssignmentProposition(this.dbn.getX_0_to_X_1().get(sa.getKey()),sa.getValue());      S_tp1[i][idx]=new AssignmentProposition(this.dbn.getX_0_to_X_1().get(sa.getKey()),sa.getValue());      idx++;    }  }  sensorModel=new FiniteBayesModel(dbn,new EliminationAsk());  sampleIndexes=new RandVar("SAMPLE_INDEXES",new FiniteIntegerDomain(indexes));}  }
class C{  public void addShape3D(float x,float y,float z,Coord2D[] coordinates,float depth,int shapeTextureWidth,int shapeTextureHeight,int sideTextureWidth,int sideTextureHeight,int direction,float[] faceLengths){  addShape3D(x,y,z,new Shape2D(coordinates),depth,shapeTextureWidth,shapeTextureHeight,sideTextureWidth,sideTextureHeight,direction,faceLengths);}  }
class C{  public static byte[] toByteArray(Bitmap bitmap){  ByteArrayOutputStream outputStream=new ByteArrayOutputStream();  bitmap.compress(Bitmap.CompressFormat.PNG,0,outputStream);  return outputStream.toByteArray();}  }
class C{  private static Vector ExplodeReturn(AST.Return ast,String next) throws PcalTranslateException {  Vector result=new Vector();  if (ast.from == null) {    ast.from=currentProcedure;  }  if (ast.from == null) {    throw new PcalTranslateException("`return' statement not in procedure",ast);  }  ;  int from=st.FindProc(ast.from);  if (!(from < st.procs.size())) {    throw new PcalTranslateException("Error in procedure (perhaps name used elsewhere)",ast);  }  PcalSymTab.ProcedureEntry pe=(PcalSymTab.ProcedureEntry)st.procs.elementAt(from);  AST.Assign ass=new AST.Assign();  ass.line=ast.line;  ass.col=ast.col;  AST.SingleAssign sass=new AST.SingleAssign();  sass.line=ast.line;  sass.col=ast.col;  TLAExpr expr=new TLAExpr();  sass.lhs.var="pc";  sass.lhs.sub=new TLAExpr();  expr.addLine();  expr.addToken(IdentToken("Head"));  expr.addToken(BuiltInToken("("));  expr.addToken(AddedToken("stack"));  expr.addToken(BuiltInToken(")"));  expr.addToken(BuiltInToken("."));  expr.addToken(IdentToken("pc"));  expr.normalize();  sass.rhs=expr;  ass.ass=Singleton(sass);  result.addElement(ass);  for (int i=0; i < pe.decls.size(); i++) {    AST.PVarDecl decl=(AST.PVarDecl)pe.decls.elementAt(i);    ass=new AST.Assign();    ass.line=ast.line;    ass.col=ast.col;    sass=new AST.SingleAssign();    sass.line=ast.line;    sass.col=ast.col;    expr=new TLAExpr();    sass.lhs.var=decl.var;    sass.lhs.sub=new TLAExpr();    expr.addLine();    expr.addToken(IdentToken("Head"));    expr.addToken(BuiltInToken("("));    expr.addToken(AddedToken("stack"));    expr.addToken(BuiltInToken(")"));    expr.addToken(BuiltInToken("."));    expr.addToken(IdentToken(decl.var));    expr.normalize();    sass.rhs=expr;    sass.setOrigin(ast.getOrigin());    ass.setOrigin(ast.getOrigin());    ass.ass=Singleton(sass);    result.addElement(ass);  }  for (int i=0; i < pe.params.size(); i++) {    AST.PVarDecl decl=(AST.PVarDecl)pe.params.elementAt(i);    ass=new AST.Assign();    ass.line=ast.line;    ass.col=ast.col;    sass=new AST.SingleAssign();    sass.line=ast.line;    sass.col=ast.col;    sass.setOrigin(ast.getOrigin());    ass.setOrigin(ast.getOrigin());    expr=new TLAExpr();    sass.lhs.var=decl.var;    sass.lhs.sub=new TLAExpr();    expr.addLine();    expr.addToken(IdentToken("Head"));    expr.addToken(BuiltInToken("("));    expr.addToken(AddedToken("stack"));    expr.addToken(BuiltInToken(")"));    expr.addToken(BuiltInToken("."));    expr.addToken(IdentToken(decl.var));    expr.normalize();    sass.rhs=expr;    ass.ass=Singleton(sass);    result.addElement(ass);  }  ass=new AST.Assign();  ass.line=ast.line;  ass.col=ast.col;  sass=new AST.SingleAssign();  sass.setOrigin(ast.getOrigin());  ass.setOrigin(ast.getOrigin());  sass.line=ast.line;  sass.col=ast.col;  expr=new TLAExpr();  sass.lhs.var="stack";  sass.lhs.sub=new TLAExpr();  expr.addLine();  expr.addToken(IdentToken("Tail"));  expr.addToken(BuiltInToken("("));  expr.addToken(AddedToken("stack"));  expr.addToken(BuiltInToken(")"));  expr.normalize();  sass.rhs=expr;  ass.ass=Singleton(sass);  result.addElement(ass);  return result;}  }
class C{  private int generateForecastRunMaster(MPPForecastRun run,MPPForecastDefinition fd,MPPPeriod start,MPPPeriod end){  int count=0;  for (  MPPForecastDefinitionLine fdl : fd.getLines(true)) {    final StringBuffer select=new StringBuffer("SELECT DISTINCT sh.M_Product_ID , sh.M_Warehouse_ID FROM C_SalesHistory sh LEFT JOIN  PP_ForecastRunMaster m ON (m.M_Product_ID=sh.M_Product_ID AND ");    select.append(MPPForecastRunMaster.COLUMNNAME_PP_ForecastRun_ID);    select.append("=").append(run.get_ID()).append(" ) WHERE  ");    select.append(fdl.getSQlWhere(run.getM_WarehouseSource_ID(),"sh"));    select.append(MSalesHistory.COLUMNNAME_DateInvoiced);    select.append(" BETWEEN ");    select.append(DB.TO_DATE(start.getStartDate()));    select.append(" AND ");    select.append(DB.TO_DATE(end.getEndDate()));    PreparedStatement pstmt=null;    ResultSet rs=null;    try {      pstmt=DB.prepareStatement(select.toString(),get_TrxName());      rs=pstmt.executeQuery();      while (rs.next()) {        count++;        int M_Product_ID=rs.getInt("M_Product_ID");        MPPForecastRunMaster master=MPPForecastRunMaster.getByProduct(getCtx(),run.getPP_ForecastRun_ID(),M_Product_ID,get_TrxName());        if (master != null)         continue;        master=new MPPForecastRunMaster(getCtx(),0,get_TrxName());        master.setAD_Org_ID(run.getAD_Org_ID());        master.setPP_ForecastRun_ID(run.get_ID());        master.setPP_ForecastDefinitionLine_ID(fdl.getPP_ForecastDefinitionLine_ID());        master.setM_Product_ID(M_Product_ID);        master.setM_Warehouse_ID(run.getM_Warehouse_ID());        master.setFactorAlpha(fdl.getFactorAlpha());        master.setFactorGamma(fdl.getFactorGamma());        master.setFactorBeta(fdl.getFactorBeta());        master.setFactorMultiplier(fdl.getFactorMultiplier());        master.setFactorScale(fdl.getFactorScale());        master.setFactorUser(fdl.getFactorUser());        master.saveEx();      }    } catch (    Exception e) {      log.log(Level.SEVERE,select.toString(),e);      getProcessInfo().addLog(getProcessInfo().getAD_PInstance_ID(),null,null,e.getLocalizedMessage());    } finally {      DB.close(rs,pstmt);      rs=null;      pstmt=null;    }  }  return count;}  }
class C{  public static boolean onBackPressed(Activity activity){  if (activity != null) {    FragmentManager fragmentManager=activity.getFragmentManager();    YoutubeOverlayFragment yt=(YoutubeOverlayFragment)fragmentManager.findFragmentByTag(YoutubeOverlayFragment.class.getName());    if (yt != null) {      yt.onBackPressed();    }  }  return false;}  }
class C{  public void printStatisticsToConsole(){  System.out.println("energy consumption stats");  energyConsumptionTracker.getLog().printToConsole();  System.out.println("===");  System.out.println("stationary charging at activity locations (charging scheme: charging upon arrival)");  chargingUponArrival.getLog().printToConsole();  System.out.println("===");  System.out.println("inductive charging along roads");  inductiveCharger.getLog().printToConsole();  System.out.println("===");  System.out.println("electric vehicles drivers, who's vehicle ran out of battery");  VehicleUtils.printToConsoleVehiclesWhichRanOutOfBattery(vehicles);  System.out.println("===");}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.CONSTRAINT_EXPR___NEGATIVE_CONSTRAINT_1:    getNegativeConstraint_1().clear();  getNegativeConstraint_1().addAll((Collection<? extends NegativeConstraint_>)newValue);return;case UmplePackage.CONSTRAINT_EXPR___STRING_EXPR_1:getStringExpr_1().clear();getStringExpr_1().addAll((Collection<? extends StringExpr_>)newValue);return;case UmplePackage.CONSTRAINT_EXPR___BOOL_EXPR_1:getBoolExpr_1().clear();getBoolExpr_1().addAll((Collection<? extends BoolExpr_>)newValue);return;case UmplePackage.CONSTRAINT_EXPR___GEN_EXPR_1:getGenExpr_1().clear();getGenExpr_1().addAll((Collection<? extends GenExpr_>)newValue);return;case UmplePackage.CONSTRAINT_EXPR___NUM_EXPR_1:getNumExpr_1().clear();getNumExpr_1().addAll((Collection<? extends NumExpr_>)newValue);return;case UmplePackage.CONSTRAINT_EXPR___LONE_BOOLEAN_1:setLoneBoolean_1((String)newValue);return;case UmplePackage.CONSTRAINT_EXPR___ANONYMOUS_CONSTRAINT_EXPR_11:getAnonymous_constraintExpr_1_1().clear();getAnonymous_constraintExpr_1_1().addAll((Collection<? extends Anonymous_constraintExpr_1_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  private void transfer(Entry<K,V>[] src,Entry<K,V>[] dest){  for (int j=0; j < src.length; ++j) {    Entry<K,V> e=src[j];    src[j]=null;    while (e != null) {      Entry<K,V> next=e.next;      Object key=e.get();      if (key == null) {        e.next=null;        e.value=null;        size--;      } else {        int i=indexFor(e.hash,dest.length);        e.next=dest[i];        dest[i]=e;      }      e=next;    }  }}  }
class C{  public static boolean isIA5String(String str){  for (int i=str.length() - 1; i >= 0; i--) {    char ch=str.charAt(i);    if (ch > 0x007f) {      return false;    }  }  return true;}  }
class C{  public static boolean runClockTick(){  SimEntity ent;  boolean queue_empty;  int entities_size=entities.size();  for (int i=0; i < entities_size; i++) {    ent=entities.get(i);    if (ent.getState() == SimEntity.RUNNABLE) {      ent.run();    }  }  if (future.size() > 0) {    List<SimEvent> toRemove=new ArrayList<SimEvent>();    Iterator<SimEvent> fit=future.iterator();    queue_empty=false;    SimEvent first=fit.next();    processEvent(first);    future.remove(first);    fit=future.iterator();    boolean trymore=fit.hasNext();    while (trymore) {      SimEvent next=fit.next();      if (next.eventTime() == first.eventTime()) {        processEvent(next);        toRemove.add(next);        trymore=fit.hasNext();      } else {        trymore=false;      }    }    future.removeAll(toRemove);  } else {    queue_empty=true;    running=false;    printMessage("Simulation: No more future events");  }  return queue_empty;}  }
class C{  protected void saveMultipleRecords(Properties ctx,String tableName,String columnName,int recordId,Integer[] values,String trxName) throws Exception {  if (values == null) {    return;  }  int oldRow=gridTab.getCurrentRow();  GridField lineField=gridTab.getField("Line");  for (int i=0; i < values.length; i++) {    if (!gridTab.dataNew(true)) {      throw new IllegalStateException("Could not clone tab");    }    gridTab.setValue(columnName,values[i]);    if (lineField != null) {      gridTab.setValue(lineField,0);    }    if (!gridTab.dataSave(false)) {      throw new IllegalStateException("Could not update tab");    }    gridTab.setCurrentRow(oldRow);  }}  }
class C{  static boolean debugEnabled(){  return (DEBUG_METHOD_HANDLE_NAMES | DUMP_CLASS_FILES | TRACE_INTERPRETER| TRACE_METHOD_LINKAGE);}  }
class C{  public void proceedTestUsingIntBuffer(CipherOutputStream ciOutput) throws IOException {  int buffer=getCiInput().read();  while (buffer != -1) {    ciOutput.write(buffer);    buffer=getCiInput().read();  }}  }
class C{  protected FocusListener createFocusListener(){  return getHandler();}  }
class C{  public synchronized void finer(String msg,Object[] params){  LogRecord record=new LogRecord(Level.FINER,msg);  record.setParameters(params);  log(record);}  }
class C{  private AddressingModeFiveGenerator(){}  }
class C{  public ExponentialLogistic(Type units){  super(units);}  }
class C{  protected void handleSwapAction(SolrQueryRequest req,SolrQueryResponse rsp){  final SolrParams params=req.getParams();  final SolrParams required=params.required();  final String cname=params.get(CoreAdminParams.CORE);  String other=required.get(CoreAdminParams.OTHER);  coreContainer.swap(cname,other);}  }
class C{  public static void init(Context context){  getInstance().init(context,DISK_CACHE_FOLDER,DISK_CACHE_SIZE,CompressFormat.PNG,100,CacheType.DISK);}  }
class C{  public void save(File file,AbstractFileSaver saver){  if (saver == null)   saver=ConverterUtils.getSaverForFile(file);  try {    log(null,"Saving: " + file);    saver.setInstances(m_Data);    if ((saver.retrieveFile() == null) || !saver.retrieveFile().equals(file))     saver.setFile(file);    saver.writeBatch();    m_CurrentFile=file;    log(null,"Saved successfully: " + file);  } catch (  Exception e) {    handleException(null,"Failed to save data to '" + file + "':",e);    JOptionPane.showMessageDialog(this,"Failed to save dataset to '" + file + "':\n"+ e,"Error saving",JOptionPane.ERROR_MESSAGE);  }  updateMenu();}  }
class C{  protected void waitAndStop(){  waitForScripts();  stopMqtt();  displayGoodbyeMessage();}  }
class C{  protected Expression parseTerm() throws SyntaxError, IOException {switch (token) {case CHARVAL:{      char v=scanner.charValue;      return new CharExpression(scan(),v);    }case INTVAL:{    int v=scanner.intValue;    long q=scan();    if (v < 0 && radix == 10)     env.error(q,"overflow.int.dec");    return new IntExpression(q,v);  }case LONGVAL:{  long v=scanner.longValue;  long q=scan();  if (v < 0 && radix == 10)   env.error(q,"overflow.long.dec");  return new LongExpression(q,v);}case FLOATVAL:{float v=scanner.floatValue;return new FloatExpression(scan(),v);}case DOUBLEVAL:{double v=scanner.doubleValue;return new DoubleExpression(scan(),v);}case STRINGVAL:{String v=scanner.stringValue;return new StringExpression(scan(),v);}case IDENT:{Identifier v=scanner.idValue;long p=scan();return (token == LPAREN) ? parseMethodExpression(null,v) : new IdentifierExpression(p,v);}case TRUE:return new BooleanExpression(scan(),true);case FALSE:return new BooleanExpression(scan(),false);case NULL:return new NullExpression(scan());case THIS:{Expression e=new ThisExpression(scan());return (token == LPAREN) ? parseMethodExpression(e,idInit) : e;}case SUPER:{Expression e=new SuperExpression(scan());return (token == LPAREN) ? parseMethodExpression(e,idInit) : e;}case VOID:case BOOLEAN:case BYTE:case CHAR:case SHORT:case INT:case LONG:case FLOAT:case DOUBLE:return parseTypeExpression();case ADD:{long p=scan();switch (token) {case INTVAL:{int v=scanner.intValue;long q=scan();if (v < 0 && radix == 10) env.error(q,"overflow.int.dec");return new IntExpression(q,v);}case LONGVAL:{long v=scanner.longValue;long q=scan();if (v < 0 && radix == 10) env.error(q,"overflow.long.dec");return new LongExpression(q,v);}case FLOATVAL:{float v=scanner.floatValue;return new FloatExpression(scan(),v);}case DOUBLEVAL:{double v=scanner.doubleValue;return new DoubleExpression(scan(),v);}}return new PositiveExpression(p,parseTerm());}case SUB:{long p=scan();switch (token) {case INTVAL:{int v=-scanner.intValue;return new IntExpression(scan(),v);}case LONGVAL:{long v=-scanner.longValue;return new LongExpression(scan(),v);}case FLOATVAL:{float v=-scanner.floatValue;return new FloatExpression(scan(),v);}case DOUBLEVAL:{double v=-scanner.doubleValue;return new DoubleExpression(scan(),v);}}return new NegativeExpression(p,parseTerm());}case NOT:return new NotExpression(scan(),parseTerm());case BITNOT:return new BitNotExpression(scan(),parseTerm());case INC:return new PreIncExpression(scan(),parseTerm());case DEC:return new PreDecExpression(scan(),parseTerm());case LPAREN:{long p=scan();Expression e=parseExpression();expect(RPAREN);if (e.getOp() == TYPE) {return new CastExpression(p,e,parseTerm());}switch (token) {case INC:return new PostIncExpression(scan(),e);case DEC:return new PostDecExpression(scan(),e);case LPAREN:case CHARVAL:case INTVAL:case LONGVAL:case FLOATVAL:case DOUBLEVAL:case STRINGVAL:case IDENT:case TRUE:case FALSE:case NOT:case BITNOT:case THIS:case SUPER:case NULL:case NEW:return new CastExpression(p,e,parseTerm());}return new ExprExpression(p,e);}case LBRACE:{long p=scan();int i=argIndex;if (token != RBRACE) {addArgument(parseExpression());while (token == COMMA) {scan();if (token == RBRACE) {break;}addArgument(parseExpression());}}expect(RBRACE);return new ArrayExpression(p,exprArgs(i));}case NEW:{long p=scan();int i=argIndex;if (token == LPAREN) {scan();Expression e=parseExpression();expect(RPAREN);env.error(p,"not.supported","new(...)");return new NullExpression(p);}Expression e=parseTypeExpression();if (token == LSQBRACKET) {while (token == LSQBRACKET) {scan();addArgument((token != RSQBRACKET) ? parseExpression() : null);expect(RSQBRACKET);}Expression[] dims=exprArgs(i);if (token == LBRACE) {return new NewArrayExpression(p,e,dims,parseTerm());}return new NewArrayExpression(p,e,dims);} else {return parseNewInstanceExpression(p,null,e);}}}env.error(scanner.prevPos,"missing.term");return new IntExpression(pos,0);}  }
class C{  protected String toStringOriginal(){  if (m_priors == null) {    return "No clusterer built yet!";  }  StringBuffer temp=new StringBuffer();  temp.append("\nEM\n==\n");  if (m_initialNumClusters == -1) {    temp.append("\nNumber of clusters selected by cross validation: " + m_num_clusters + "\n");  } else {    temp.append("\nNumber of clusters: " + m_num_clusters + "\n");  }  for (int j=0; j < m_num_clusters; j++) {    temp.append("\nCluster: " + j + " Prior probability: "+ Utils.doubleToString(m_priors[j],4)+ "\n\n");    for (int i=0; i < m_num_attribs; i++) {      temp.append("Attribute: " + m_theInstances.attribute(i).name() + "\n");      if (m_theInstances.attribute(i).isNominal()) {        if (m_model[j][i] != null) {          temp.append(m_model[j][i].toString());        }      } else {        temp.append("Normal Distribution. Mean = " + Utils.doubleToString(m_modelNormal[j][i][0],4) + " StdDev = "+ Utils.doubleToString(m_modelNormal[j][i][1],4)+ "\n");      }    }  }  return temp.toString();}  }
class C{  public static int intersectRayAar(double originX,double originY,double dirX,double dirY,double minX,double minY,double maxX,double maxY,Vector2d result){  double invDirX=1.0 / dirX, invDirY=1.0 / dirY;  double tNear, tFar, tymin, tymax;  if (invDirX >= 0.0) {    tNear=(minX - originX) * invDirX;    tFar=(maxX - originX) * invDirX;  } else {    tNear=(maxX - originX) * invDirX;    tFar=(minX - originX) * invDirX;  }  if (invDirY >= 0.0) {    tymin=(minY - originY) * invDirY;    tymax=(maxY - originY) * invDirY;  } else {    tymin=(maxY - originY) * invDirY;    tymax=(minY - originY) * invDirY;  }  if (tNear > tymax || tymin > tFar)   return OUTSIDE;  tNear=tymin > tNear || Double.isNaN(tNear) ? tymin : tNear;  tFar=tymax < tFar || Double.isNaN(tFar) ? tymax : tFar;  int side=-1;  if (tNear < tFar && tFar >= 0.0) {    double px=originX + tNear * dirX;    double py=originY + tNear * dirY;    result.x=tNear;    result.y=tFar;    double daX=Math.abs(px - minX);    double daY=Math.abs(py - minY);    double dbX=Math.abs(px - maxX);    double dbY=Math.abs(py - maxY);    side=0;    double min=daX;    if (daY < min) {      min=daY;      side=1;    }    if (dbX < min) {      min=dbX;      side=2;    }    if (dbY < min)     side=3;  }  return side;}  }
class C{  public PartitionedRegionStorageException(){}  }
class C{  public ScorerIndexSearcher(IndexReader r){  super(r);}  }
class C{  @Override public RunnerClient runner(){  return runnerClient;}  }
class C{  private int maxCollisions(){  int max=0;  for (  int i : intHashTable) {    if (i > max) {      max=i;    }  }  return max;}  }
class C{  public void finish() throws Exception {}  }
class C{  public static void main(String... a) throws Exception {  TestBase test=TestBase.createCaller().init();  test.config.big=true;  test.test();  test.test();  test.test();}  }
class C{  public void close(){  for (Iterator<Connection> iterator=openConnections.values().iterator(); iterator.hasNext(); ) {    Connection connection=iterator.next();    DBUtils.commit(connection);    DBUtils.closeQuietly(connection);    iterator.remove();  }}  }
class C{  @Override public int export(ConstantPool target){  return -1;}  }
class C{  public void updateLine(IFitsHeader key,HeaderCard card) throws HeaderCardException {  deleteKey(key);  this.iter.add(card);}  }
class C{  private void generateWebXml() throws IOException, JDOMException {  bufferedStream.reset();  WebXmlType descriptorType=WebXml25Type.getInstance();  if (WebXmlVersion.V2_2.equals(getVersion())) {    descriptorType=WebXml22Type.getInstance();  } else   if (WebXmlVersion.V2_3.equals(getVersion())) {    descriptorType=WebXml23Type.getInstance();  } else   if (WebXmlVersion.V2_4.equals(getVersion())) {    descriptorType=WebXml24Type.getInstance();  } else   if (WebXmlVersion.V2_5.equals(getVersion())) {    descriptorType=WebXml25Type.getInstance();  } else   if (WebXmlVersion.V3_0.equals(getVersion())) {    descriptorType=WebXml30Type.getInstance();  }  webXml=(WebXml)descriptorType.getDescriptorIo().parseXml(bufferedStream,theEntityResolver);}  }
class C{  public static boolean checkUnManagedResourceAlreadyExported(UnManagedVolume unManagedVolume){  StringMap unManagedVolumeCharacteristics=unManagedVolume.getVolumeCharacterstics();  String isVolumeExported=unManagedVolumeCharacteristics.get(SupportedVolumeCharacterstics.IS_VOLUME_EXPORTED.toString());  if (checkUnManagedResourceIsRecoverPointEnabled(unManagedVolume)) {    isVolumeExported=unManagedVolumeCharacteristics.get(SupportedVolumeCharacterstics.IS_NONRP_EXPORTED.toString());  }  if (null != isVolumeExported && Boolean.parseBoolean(isVolumeExported)) {    return true;  }  return false;}  }
class C{  static void cleanupUnit(ClassLoader clsLdr,IgniteLogger log){  assert clsLdr != null;  assert log != null;  if (clsLdr instanceof URLClassLoader) {    URLClassLoader clsLdr0=(URLClassLoader)clsLdr;    U.close(clsLdr0,log);    try {      URL url=clsLdr0.getURLs()[0];      File dir=new File(url.toURI());      U.delete(dir);      if (dir.getName().startsWith("dirzip_")) {        File jarFile=new File(dir.getParentFile(),dir.getName().substring(7));        U.delete(jarFile);      }    } catch (    Exception e) {      U.error(log,"Failed to cleanup unit [clsLdr=" + clsLdr + ']',e);    }  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean hasBatchStatus(){  return hasExtension(BatchStatus.class);}  }
class C{  public static boolean equalsIgnoreXid(OFMessage a,OFMessage b){  OFMessage.Builder mb=b.createBuilder().setXid(a.getXid());  return a.equals(mb.build());}  }
class C{  public void dismiss(){  mWindow.dismiss();}  }
class C{  public JsonObjectRequest(int method,String url,Listener<JSONObject> listener,ErrorListener errorListener){  super(method,url,null,listener,errorListener);}  }
class C{  public void goToNextColor(){  setColorIndex(getNextColorIndex());}  }
class C{  @Override final public boolean isOptional(){  return false;}  }
class C{  @Override public void load(Entity unit) throws IllegalArgumentException {  if (!canLoad(unit)) {    throw new IllegalArgumentException("Can not load " + unit.getShortName() + " into this bay. "+ currentSpace);  }  currentSpace-=1;  troops.addElement(unit.getId());}  }
class C{  public boolean isRunning(){  return running;}  }
class C{  @SuppressWarnings("unchecked") public <T>T clone(T origin){  final Class<?> implClass=origin.getClass();  DtoProvider provider=dtoImpl2Providers.get(implClass);  if (provider == null) {    Class<?> dtoInterface=null;    Class<?>[] interfaces=implClass.getInterfaces();    if (interfaces.length == 0) {      return null;    }    for (    Class<?> i : interfaces) {      if (i.isAnnotationPresent(DTO.class)) {        if (dtoInterface != null) {          throw new IllegalArgumentException("Unable determine DTO interface. Type " + implClass.getName() + " implements or extends more than one interface annotated with @DTO annotation.");        }        dtoInterface=i;      }    }    if (dtoInterface != null) {      provider=getDtoProvider(dtoInterface);    }  }  if (provider == null) {    throw new IllegalArgumentException("Unknown DTO type " + implClass);  }  return (T)provider.clone(origin);}  }
class C{  protected URIPropertyMatcher(String propertyName,Mode mode,URI expectedPattern,Function<Issue,URI> getActualValue){  super(propertyName);  this.mode=mode;  this.expectedPattern=Objects.requireNonNull(expectedPattern);  this.getActualValue=Objects.requireNonNull(getActualValue);}  }
class C{  static private List<Initiator> addHostInitiators(int numberInitiators,URI hostId,String hostName){  List<Initiator> initiators=new ArrayList<Initiator>();  for (int i=0; i < numberInitiators; i++) {    Initiator initiator=new Initiator();    initiator.setHost(hostId);    initiator.setHostName(hostName);    String byte1=String.format("%02x",initIndex / 256);    String byte0=String.format("%02x",initIndex % 256);    initiator.setInitiatorPort("10:00:00:00:00:00:" + byte1 + ":"+ byte0);    initiator.setId(URI.create("init" + initIndex++));    initiators.add(initiator);  }  return initiators;}  }
class C{  private void initializeLiveAttributes(){  in=createLiveAnimatedString(null,SVG_IN_ATTRIBUTE);  dx=createLiveAnimatedNumber(null,SVG_DX_ATTRIBUTE,0f);  dy=createLiveAnimatedNumber(null,SVG_DY_ATTRIBUTE,0f);}  }
class C{  private void removeHotkeysFromActions(){  for (  HotkeyAction action : actions.values()) {    action.action.putValue(Action.ACCELERATOR_KEY,null);  }}  }
class C{  public static int bitLength(long l){  int i=(int)(l >> 32);  if (i > 0)   return (i < 1 << 16) ? (i < 1 << 8) ? BIT_LENGTH[i] + 32 : BIT_LENGTH[i >>> 8] + 40 : (i < 1 << 24) ? BIT_LENGTH[i >>> 16] + 48 : BIT_LENGTH[i >>> 24] + 56;  if (i < 0)   return bitLength(-++l);  i=(int)l;  return (i < 0) ? 32 : (i < 1 << 16) ? (i < 1 << 8) ? BIT_LENGTH[i] : BIT_LENGTH[i >>> 8] + 8 : (i < 1 << 24) ? BIT_LENGTH[i >>> 16] + 16 : BIT_LENGTH[i >>> 24] + 24;}  }
class C{  public void run(){  if (ExecutionThread.currentThread().isKilled()) {    return;  }  varPath.getValue().divide(expression.evaluate());}  }
class C{  @Override protected void processRememberedSets(){  logMessage(2,"processing modBuffer");  while (!modBuffer.isEmpty()) {    ObjectReference src=modBuffer.pop();    HeaderByte.markAsUnlogged(src);    processNode(src);  }}  }
class C{  public void visitCode(){  if (mv != null) {    mv.visitCode();  }}  }
class C{  public void head(int position){  if (mIgnoreIfCompletelyVisible && isCompletelyVisible(position)) {    return;  }  if (mIgnoreIfVisible && isVisible(position)) {    return;  }  LayoutManager lm=getLayoutManager();  if (lm instanceof LinearLayoutManager) {    LinearLayoutManager llm=(LinearLayoutManager)lm;    llm.scrollToPositionWithOffset(position,0);  } else   if (lm instanceof StaggeredGridLayoutManager) {    final StaggeredGridLayoutManager sglm=(StaggeredGridLayoutManager)lm;    sglm.scrollToPositionWithOffset(position,0);  } else {    throw new UnsupportedOperationException("unsupported layout manager");  }}  }
class C{  public void removeEmptyTags(Document document){  NodeList nl=null;  try {    if (Thread.currentThread().getContextClassLoader() == null) {      Thread.currentThread().setContextClassLoader(getClass().getClassLoader());    }    XPath xPath=XPathFactory.newInstance().newXPath();    nl=(NodeList)xPath.evaluate("//text()[normalize-space(.)='']",document,XPathConstants.NODESET);    for (int i=0; i < nl.getLength(); ++i) {      Node node=nl.item(i);      node.getParentNode().removeChild(node);    }  } catch (  XPathExpressionException e) {    e.printStackTrace();  }}  }
class C{  private Instruction do_dload(int index){  Operand r=getLocalDual(index);  if (VM.VerifyAssertions)   opt_assert(r.isDouble());  if (LOCALS_ON_STACK) {    pushDual(r);    return null;  } else {    return _moveDualHelper(DOUBLE_MOVE,r,TypeReference.Double);  }}  }
class C{  protected final void requestDeferred(){  long r=REQUESTED.getAndSet(this,0L);  if (r != 0L) {    s.request(r);  }}  }
class C{  public static LatLonPoint UTMtoLL(UTMPoint utm_point,Ellipsoid ellip,LatLonPoint llpoint){  return UTMtoLL(ellip,utm_point.northing,utm_point.easting,utm_point.zone_number,utm_point.zone_letter,llpoint);}  }
class C{  @Override public int offset(){  return _writeLength;}  }
class C{  public void accept(final AnnotationVisitor av){  if (av != null) {    if (values != null) {      for (int i=0; i < values.size(); i+=2) {        String name=(String)values.get(i);        Object value=values.get(i + 1);        accept(av,name,value);      }    }    av.visitEnd();  }}  }
class C{  protected static String serializeDOMSource(DOMSource domSource){  try {    StringWriter writer=new StringWriter();    StreamResult result=new StreamResult(writer);    TransformerFactory tf=TransformerFactory.newInstance();    Transformer transformer=tf.newTransformer();    transformer.setOutputProperty(OutputKeys.ENCODING,DEFAULT_ENCODING);    transformer.setOutputProperty(OutputKeys.INDENT,DEFAULT_INDENT);    transformer.transform(domSource,result);    writer.flush();    return writer.toString();  } catch (  Throwable e) {    log.log(Level.SEVERE,"Failed to serialize node",e);  }  return null;}  }
class C{  @Override public void onActivityCreated(Bundle savedInstanceState){  super.onActivityCreated(savedInstanceState);  Activity activity=getActivity();  Intent intent=activity.getIntent();  if (DevicePolicyManager.ACTION_START_ENCRYPTION.equals(intent.getAction())) {    DevicePolicyManager dpm=(DevicePolicyManager)activity.getSystemService(Context.DEVICE_POLICY_SERVICE);    if (dpm != null) {      int status=dpm.getStorageEncryptionStatus();      if (status != DevicePolicyManager.ENCRYPTION_STATUS_INACTIVE) {        activity.finish();      }    }  }}  }
class C{  public void testEncode(){  byte[] expectedReturn=binMessagesFixture.unknownAttsEncodeExpectedResult;  unknownAttributesAttribute.addAttributeID(MsgFixture.UNKNOWN_ATTRIBUTES_1ST_ATT);  unknownAttributesAttribute.addAttributeID(MsgFixture.UNKNOWN_ATTRIBUTES_2ND_ATT);  byte[] actualReturn=unknownAttributesAttribute.encode();  assertTrue("UnknownAttributesAttribute did not encode properly.",Arrays.equals(actualReturn,expectedReturn));}  }
class C{  public synchronized void resetCountdown(int val){  if (val <= n && val > 0)   current=val;}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public FileVirtualPoolRestRep createFileVirtualPool(FileVirtualPoolParam param){  ArgValidator.checkFieldNotEmpty(param.getName(),VPOOL_NAME);  checkForDuplicateName(param.getName(),VirtualPool.class);  ArgValidator.checkFieldNotEmpty(param.getDescription(),VPOOL_DESCRIPTION);  VirtualPoolUtil.validateFileVirtualPoolCreateParams(param,_dbClient);  Map<URI,VpoolRemoteCopyProtectionSettings> remoteSettingsMap=new HashMap<URI,VpoolRemoteCopyProtectionSettings>();  VirtualPool cos=prepareVirtualPool(param,remoteSettingsMap,true);  if (null != param.getLongTermRetention()) {    cos.setLongTermRetention(param.getLongTermRetention());  }  if (!remoteSettingsMap.isEmpty()) {    _log.info("Adding file remote replicaition copies to DB ");    _dbClient.createObject(new ArrayList(remoteSettingsMap.values()));  }  StringBuffer errorMessage=new StringBuffer();  ImplicitPoolMatcher.matchVirtualPoolWithAllStoragePools(cos,_dbClient,_coordinator,errorMessage);  if (null != cos.getMatchedStoragePools() || null != cos.getInvalidMatchedPools()) {    ImplicitUnManagedObjectsMatcher.matchVirtualPoolsWithUnManagedFileSystems(cos,_dbClient);  }  _dbClient.createObject(cos);  recordOperation(OperationTypeEnum.CREATE_VPOOL,VPOOL_CREATED_DESCRIPTION,cos);  return toFileVirtualPool(cos,VirtualPool.getFileRemoteProtectionSettings(cos,_dbClient));}  }
class C{  public boolean isBroker(){  return isRoleAvailable(getSelectedOrganization(),OrganizationRoleType.BROKER);}  }
class C{  public void onEvent(Event event) throws Exception {  if (event.getTarget().getId().equals(ConfirmPanel.A_CANCEL))   onClose();  if (getTo() == null || getTo().length() == 0) {    return;  }  if (event.getTarget().getId().equals(ConfirmPanel.A_OK)) {    StringTokenizer st=new StringTokenizer(getTo()," ,;",false);    String to=st.nextToken();    EMail email=m_client.createEMail(getFrom(),to,getSubject(),getMessage());    String status="Check Setup";    if (email != null) {      while (st.hasMoreTokens())       email.addTo(st.nextToken());      StringTokenizer stcc=new StringTokenizer(getCc()," ,;",false);      while (stcc.hasMoreTokens()) {        String cc=stcc.nextToken();        if (cc != null && cc.length() > 0)         email.addCc(cc);      }      if (m_attachFile != null && m_attachFile.exists())       email.addAttachment(m_attachFile);      status=email.send();      if (m_user != null)       new MUserMail(m_user,m_user.getAD_User_ID(),email).saveEx();      if (email.isSentOK()) {        FDialog.info(0,this,"MessageSent");        onClose();      } else       FDialog.error(0,this,"MessageNotSent",status);    } else     FDialog.error(0,this,"MessageNotSent",status);  } else   if (event.getTarget().getId().equals(ConfirmPanel.A_CANCEL))   onClose();}  }
class C{  protected void complete(int bytesRead){  this.importItem.updateProgress(bytesRead,true);  complete();}  }
class C{  private boolean isSubtypeOf(String supertype){  String implementorName=SignatureUtil.stripSignatureToFQN(signature);  if (implementorName.length() == 0)   return false;  int implementorDims=Signature.getArrayCount(signature);  int superDimsIndex=supertype.indexOf("[]");  int superDims;  if (superDimsIndex != -1) {    superDims=(supertype.length() - superDimsIndex) / 2;    supertype=supertype.substring(0,superDimsIndex);  } else {    superDims=0;  }  if (implementorDims > superDims) {    return "java.lang.Object".equals(supertype);  } else   if (superDims != implementorDims) {    return false;  }  boolean qualified=supertype.indexOf('.') != -1;  if (implementorName.equals(supertype) || !qualified && Signature.getSimpleName(implementorName).equals(supertype))   return true;  if (fUnit == null)   return false;  IJavaProject project=fUnit.getJavaProject();  try {    IType sub=project.findType(implementorName);    if (sub == null)     return false;    if (qualified) {      IType sup=project.findType(supertype);      if (sup == null)       return false;      ITypeHierarchy hierarchy=sub.newSupertypeHierarchy(null);      return hierarchy.contains(sup);    } else {      ITypeHierarchy hierarchy=sub.newSupertypeHierarchy(null);      IType[] allTypes=hierarchy.getAllTypes();      for (int i=0; i < allTypes.length; i++) {        IType type=allTypes[i];        if (type.getElementName().equals(supertype))         return true;      }    }  } catch (  JavaModelException e) {  }  return false;}  }
class C{  public long asLongConst(Value value){  assert isJavaConstant(value) && asJavaConstant(value).getJavaKind() == JavaKind.Long;  JavaConstant constant=asJavaConstant(value);  return constant.asLong();}  }
class C{  public synchronized boolean generate(Projection proj){  setNeedToRegenerate(true);  if (proj == null) {    Debug.message("omgraphic","OMText: null projection in generate!");    return false;  }  polyBounds=null;  renderRotationAngle=null;switch (renderType) {case RENDERTYPE_XY:    pt=point;  break;case RENDERTYPE_OFFSET:if (!proj.isPlotable(lat,lon)) {  if (Debug.debugging("omgraphic"))   System.err.println("OMText.generate(): offset point is not plotable!");  setNeedToRegenerate(true);  return false;}pt=proj.forward(lat,lon,new Point2D.Double());pt.setLocation(pt.getX() + point.x,pt.getY() + point.y);break;case RENDERTYPE_LATLON:if (!proj.isPlotable(lat,lon)) {if (Debug.debugging("omgraphic")) System.err.println("OMText.generate(): llpoint is not plotable!");setNeedToRegenerate(true);return false;}pt=proj.forward(lat,lon,new Point2D.Double());break;case RENDERTYPE_UNKNOWN:System.err.println("OMText.render.generate(): invalid RenderType");return false;}setFont(proj.getScale());evaluateRotationAngle(proj);polyBounds=computeBounds(null);setLabelLocation(getShape(),proj);setNeedToRegenerate(false);return true;}  }
class C{  @Override public Object runSafely(Catbert.FastStack stack) throws Exception {  boolean b=evalBool(stack.pop());  Agent a=(Agent)stack.pop();  if (Permissions.hasPermission(Permissions.PERMISSION_RECORDINGSCHEDULE,stack.getUIMgr())) {    Carny.getInstance().enableFavorite(a,b);    Carny.getInstance().kick();  }  return null;}  }
class C{  public VersionHistory findVersionHistory(BigDecimal version){  if (version != null) {    for (    VersionHistory vh : getVersionHistory()) {      if (version.toPlainString().equals(new BigDecimal(vh.getVersion()).toPlainString())) {        return vh;      }    }  }  return null;}  }
class C{  @Override public void readSettings(){  SharedPreferences sharedPreferences=this.getSharedPreferences(getString(R.string.sp_widget_day_week_setting),Context.MODE_PRIVATE);  setLocation(new Location(sharedPreferences.getString(getString(R.string.key_location),getString(R.string.local)),null));  Location location=DatabaseHelper.getInstance(this).searchLocation(getLocation());  if (location != null) {    setLocation(location);  }}  }
class C{  private static Pair<String,String> preIndexedReg(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String registerNodeValue1,final String registerNodeValue2){  final String address=environment.getNextVariableString();  final String tmpVar1=environment.getNextVariableString();  long baseOffset=offset;  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,registerNodeValue1,dw,registerNodeValue2,dw,tmpVar1));  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpVar1,dw,dWordBitMask,dw,address));  instructions.add(ReilHelpers.createStr(baseOffset++,dw,address,dw,registerNodeValue1));  return new Pair<String,String>(address,registerNodeValue1);}  }
class C{  @Override public double[] distributionForInstance(Instance inst) throws Exception {  Attribute classAtt=inst.classAttribute();  double[] pred=new double[classAtt.numValues()];  if (m_root != null) {    LeafNode l=m_root.leafForInstance(inst,null,null);    HNode actualNode=l.m_theNode;    if (actualNode == null) {      actualNode=l.m_parentNode;    }    pred=actualNode.getDistribution(inst,classAtt);  } else {    for (int i=0; i < classAtt.numValues(); i++) {      pred[i]=1;    }    Utils.normalize(pred);  }  return pred;}  }
class C{  public boolean exportFormatPkcs7(){  return formatPkcs7;}  }
class C{  @SuppressWarnings({"static-access"}) public static void disableSleepMode(Context mContext){  System.out.println("disable");  ((Activity)mContext).getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);  KeyguardManager keyguardManager=(KeyguardManager)mContext.getSystemService(Activity.KEYGUARD_SERVICE);  lock=keyguardManager.newKeyguardLock(mContext.KEYGUARD_SERVICE);  lock.disableKeyguard();}  }
class C{  public InvertibleComparator(Comparator<T> comparator){  Assert.notNull(comparator,"Comparator must not be null");  this.comparator=comparator;}  }
class C{  private String detectEpisode(String name){  StringBuilder sb=new StringBuilder();  EpisodeMatchingResult result=TvShowEpisodeAndSeasonParser.detectEpisodeFromFilenameAlternative(name,"asdf[.*asdf");  sb.append("S:");  sb.append(result.season);  for (  int ep : result.episodes) {    sb.append(" E:");    sb.append(ep);  }  if (result.stackingMarkerFound) {    sb.append(" Split");  }  System.out.println(padRight(sb.toString().trim(),40) + name);  return sb.toString().trim();}  }
class C{  public InheritancePanel(ModelerFile modelerFile,EntityWidget entityWidget){  this.modelerFile=modelerFile;  this.entityWidget=entityWidget;}  }
class C{  int decryptFinal(byte[] cipher,int cipherOffset,int cipherLen,byte[] plain,int plainOffset){  int oddBytes=cipherLen % numBytes;  int len=decrypt(cipher,cipherOffset,(cipherLen - oddBytes),plain,plainOffset);  cipherOffset+=len;  plainOffset+=len;  if (oddBytes != 0) {    embeddedCipher.encryptBlock(register,0,k,0);    for (int i=0; i < oddBytes; i++) {      plain[i + plainOffset]=(byte)(cipher[i + cipherOffset] ^ k[i]);    }  }  return cipherLen;}  }
class C{  public boolean logModified(Logger log){  return true;}  }
class C{  public Conference(String uri){  this.uri=uri;}  }
class C{  public static byte[] copyToByteArray(InputStream in) throws IOException {  ByteArrayOutputStream out=new ByteArrayOutputStream(BUFFER_SIZE);  copy(in,out);  return out.toByteArray();}  }
class C{  static public <E>void assertSameIteratorAnyOrder(final ITuple<E>[] expected,final ITupleIterator<E> actual){  assertSameIteratorAnyOrder("",expected,actual);}  }
class C{  public AttributeTableModel(Instances instances){  setInstances(instances);}  }
class C{  public SyncError(SyncError other){  __isset_bitfield=other.__isset_bitfield;  this.errorCode=other.errorCode;  if (other.isSetMessage()) {    this.message=other.message;  }}  }
class C{  public static LinkedList<String> string2List(String in,String delimiter,boolean doStrip){  if (in == null) {    return null;  }  LinkedList<String> out=new LinkedList<String>();  string2Collection(in,delimiter,doStrip,out);  return out;}  }
class C{  public VaryNode(int iNode){  m_iNode=iNode;}  }
class C{  public ServerConnectionWriterStage(GraphManager graphManager,Pipe<ServerResponseSchema>[] dataToSend,ServerCoordinator coordinator,int pipeIdx){  super(graphManager,dataToSend,NONE);  this.coordinator=coordinator;  this.pipeIdx=pipeIdx;  this.dataToSend=dataToSend;}  }
class C{  private FormalTypeParameter[] parseFormalTypeParameters(){  List<FormalTypeParameter> ftps=new ArrayList<>(3);  assert (current() == '<');  if (current() != '<') {    throw error("expected '<'");  }  advance();  ftps.add(parseFormalTypeParameter());  while (current() != '>') {    int startingPosition=index;    ftps.add(parseFormalTypeParameter());    progress(startingPosition);  }  advance();  return ftps.toArray(new FormalTypeParameter[ftps.size()]);}  }
class C{  private static void addMultipleSelectXformValueNode(Element node){  Element xformsValueNode=node.createElement(null,null);  xformsValueNode.setName(NODE_XFORMS_VALUE);  xformsValueNode.setAttribute(null,ATTRIBUTE_XSI_NILL,VALUE_TRUE);  node.addChild(Element.ELEMENT,xformsValueNode);}  }
class C{  public static int updateExternalStorageState(){  String state=Environment.getExternalStorageState();  if (Environment.MEDIA_MOUNTED.equals(state)) {    return Constants.MEDIA_MOUNTED;  } else   if (Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)) {    return Constants.MEDIA_MOUNTED_READ_ONLY;  } else {    return Constants.NO_MEDIA;  }}  }
class C{  public String toString(Tag[] tags){  if (tags.length == 0) {    return null;  }  return createHTML(readFile(tags[0].text()));}  }
class C{  private BayBoostModel trainBoostingModel(ExampleSet trainingSet,final double[] classPriors) throws OperatorException {  Vector<BayBoostBaseModelInfo> modelInfo=new Vector<BayBoostBaseModelInfo>();  this.applyPriorModel(trainingSet,modelInfo);  final double splitRatio=this.getParameterAsDouble(PARAMETER_USE_SUBSET_FOR_TRAINING);  final boolean bootstrap=((splitRatio > 0) && (splitRatio < 1.0));  log(bootstrap ? "Bootstrapping enabled." : "Bootstrapping disabled.");  final boolean allowSkew=this.getParameterAsBoolean(PARAMETER_ALLOW_MARGINAL_SKEWS);  SplittedExampleSet splittedSet=null;  if (bootstrap == true) {    splittedSet=new SplittedExampleSet(trainingSet,splitRatio,SplittedExampleSet.SHUFFLED_SAMPLING,getParameterAsBoolean(RandomGenerator.PARAMETER_USE_LOCAL_RANDOM_SEED),getParameterAsInt(RandomGenerator.PARAMETER_LOCAL_RANDOM_SEED));  }  final int iterations=this.getParameterAsInt(PARAMETER_ITERATIONS);  L:   for (int i=0; i < iterations; i++) {    this.currentIteration=i;    Model model;    WeightedPerformanceMeasures wp;    ExampleSet iterationSet=(ExampleSet)trainingSet.clone();    if (bootstrap == true) {      splittedSet.selectSingleSubset(0);      model=this.trainBaseModel(splittedSet);      iterationSet=model.apply(iterationSet);      wp=new WeightedPerformanceMeasures(splittedSet);      WeightedPerformanceMeasures.reweightExamples(splittedSet,wp.getContingencyMatrix(),allowSkew);      splittedSet.selectSingleSubset(1);      wp=new WeightedPerformanceMeasures(splittedSet);      this.performance=WeightedPerformanceMeasures.reweightExamples(splittedSet,wp.getContingencyMatrix(),allowSkew);    } else {      model=this.trainBaseModel(iterationSet);      iterationSet=model.apply(iterationSet);      wp=new WeightedPerformanceMeasures(iterationSet);      this.performance=this.reweightExamples(wp,iterationSet);    }    PredictionModel.removePredictedLabel(iterationSet);    if (classPriors.length == 2) {    }    if (wp.getNumberOfNonEmptyClasses() < 2) {      modelInfo.add(new BayBoostBaseModelInfo(model,wp.getContingencyMatrix()));      break L;    }    final ContingencyMatrix cm=wp.getContingencyMatrix();    modelInfo.add(new BayBoostBaseModelInfo(model,cm));    if (this.isModelUseful(cm) == false) {      log("Discard model because of low advantage on training data.");      modelInfo.remove(modelInfo.size() - 1);      break L;    }    if (this.performance == 0) {      break L;    }    inApplyLoop();  }  return new BayBoostModel(trainingSet,modelInfo,classPriors);}  }
class C{  private Beans(){  instanceNotAllowed(getClass());}  }
class C{  private void addStaticDeployables(String containerId,LocalConfiguration configuration,Deployable[] deployables,CargoProject project) throws MojoExecutionException {  for (  Deployable deployable : deployables) {    project.getLog().debug("Scheduling deployable for deployment: [groupId [" + deployable.getGroupId() + "], artifactId ["+ deployable.getArtifactId()+ "], type ["+ deployable.getType()+ "], location ["+ deployable.getLocation()+ "], pingURL ["+ deployable.getPingURL()+ "]]");    configuration.addDeployable(deployable.createDeployable(containerId,project));  }}  }
class C{  private static String extractTopItem(String searchString,String schema,int startIdx){  String extracted=null;  int propIdx=schema.indexOf("\"properties\"",startIdx);  if (propIdx == -1) {    propIdx=Integer.MAX_VALUE;  }  int idIdx=schema.indexOf("\"" + searchString + "\"",startIdx);  int secondIdIdx=schema.indexOf("\"" + searchString + "\"",idIdx + 1);  if (secondIdIdx != -1 && propIdx > secondIdIdx) {    idIdx=secondIdIdx;  }  if (idIdx != -1 && propIdx > idIdx) {    int valueStartIdx=schema.indexOf("\"",idIdx + (searchString.length() + 2));    int valueEndIdx=schema.indexOf("\"",valueStartIdx + 1);    extracted=schema.substring(valueStartIdx + 1,valueEndIdx);  }  return extracted;}  }
class C{  public SpecificX10Light(String systemName,SerialTrafficController tc){  super(systemName,tc);  this.tc=tc;  maxDimStep=22;}  }
class C{  public PLLoaderBase(){  super();}  }
class C{  @Override public final boolean isManagingFocus(){  return true;}  }
class C{  public boolean lessEquals(final HttpVersion version){  return compareTo(version) <= 0;}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);}  }
class C{  public WWUnrecognizedException(String msg,Throwable t){  super(msg,t);}  }
class C{  public static boolean executeRegScript(String keyPath,String function,String name){  return executeRegScript(keyPath,function,name,null);}  }
class C{  protected boolean shouldStartDeserialization(int currentState){  return isNativeInitialized() && currentState == STATE_LOAD_TAB_STATE_BG_END;}  }
class C{  public FlushRequest(String... indices){  super(indices);}  }
class C{  public JvmLauncherRequest(boolean server,Loggable loggable){  this(server,loggable,false);}  }
class C{  public static int decodeZigZag32(final int n){  return (n >>> 1) ^ -(n & 1);}  }
class C{  public void addSchema(int schemaId,BinarySchema schema){synchronized (this) {    if (inline) {      if (schemaId == schemaId1 || schemaId == schemaId2 || schemaId == schemaId3 || schemaId == schemaId4)       return;      if (schemaId1 == EMPTY) {        schemaId1=schemaId;        schema1=schema;        inline=true;        return;      }      if (schemaId2 == EMPTY) {        schemaId2=schemaId;        schema2=schema;        inline=true;        return;      }      if (schemaId3 == EMPTY) {        schemaId3=schemaId;        schema3=schema;        inline=true;        return;      }      if (schemaId4 == EMPTY) {        schemaId4=schemaId;        schema4=schema;        inline=true;        return;      }      HashMap<Integer,BinarySchema> newSchemas=new HashMap<>();      newSchemas.put(schemaId1,schema1);      newSchemas.put(schemaId2,schema2);      newSchemas.put(schemaId3,schema3);      newSchemas.put(schemaId4,schema4);      newSchemas.put(schemaId,schema);      schemas=newSchemas;      inline=false;    } else {      HashMap<Integer,BinarySchema> newSchemas=new HashMap<>(schemas);      newSchemas.put(schemaId,schema);      schemas=newSchemas;    }  }}  }
class C{  boolean maybeOverrideCodeGen(Node n){switch (n.getToken()) {case UNDEFINED_TYPE:    add("undefined");  return true;case CAST:add("(");add(n.getFirstChild());add(" as ");add(n.getDeclaredTypeExpression());add(")");return true;case NAME:if (n.getParent().isParamList()) {Visibility visibility=(Visibility)n.getProp(Node.ACCESS_MODIFIER);if (visibility != null) {switch (visibility) {case PRIVATE:add("private ");break;case PROTECTED:add("protected ");break;case PUBLIC:add("public ");break;default :break;}}if (n.getBooleanProp(Node.IS_CONSTANT_NAME)) {add("readonly ");}}return false;case ANY_TYPE:String anyTypeName=externsMap.get("any");if (anyTypeName != null) {add(anyTypeName);return true;}return false;case MEMBER_FUNCTION_DEF:if ("constructor".equals(n.getString()) && nodeComments.getComment(n) == null) {add("\n");}return false;default :return false;}}  }
class C{  public static void print(PrintStream out,TreebankNode node){  out.println(print(node,0));}  }
class C{  public final double magnitude(){  double sq=0.0;  for (int i=0; i < length; i++) {    sq+=values[i] * values[i];  }  return Math.sqrt(sq);}  }
class C{  public int top() throws java.lang.Exception {  if (vstack.empty())   throw new Exception("Internal parser error: top() called on empty virtual stack");  return ((Integer)vstack.peek()).intValue();}  }
class C{  public IndependentDistribution queryProb(String variable,boolean includeEvidence){  if (hasChanceNode(variable)) {    ChanceNode cn=getChanceNode(variable);    if (cn.getDistrib() instanceof IndependentDistribution && Collections.disjoint(cn.getClique(),evidence.getVariables())) {      return (IndependentDistribution)cn.getDistrib();    } else {      try {        Assignment queryEvidence=(includeEvidence) ? evidence : new Assignment();        return new SwitchingAlgorithm().queryProb(this,variable,queryEvidence);      } catch (      RuntimeException e) {        log.warning("Error querying variable " + variable + " : "+ e);        return new SingleValueDistribution(variable,ValueFactory.none());      }    }  } else {    log.warning("Variable " + variable + " not included in the dialogue state");    return new SingleValueDistribution(variable,ValueFactory.none());  }}  }
class C{  public <T>void subscribe(EventSubscriber<? extends T> subscriber,Class<T> eventType){  doSubscribe(subscriber,eventType);}  }
class C{  public final void flush(){  if (debugAdobe) {    System.out.println("Flush files on close");  }  Iterator filesTodelete=imagesOnDiskAsBytes.keySet().iterator();  while (filesTodelete.hasNext()) {    final Object file=filesTodelete.next();    if (file != null) {      final File delete_file=new File(imagesOnDiskAsBytes.get(file));      if (delete_file.exists()) {        delete_file.delete();        if (SwingDisplay.testSampling) {          System.out.println("deleted file as " + delete_file.getAbsolutePath());        }      }    }  }  imagesOnDiskAsBytes.clear();  imagesOnDiskAsBytesW.clear();  imagesOnDiskAsBytesH.clear();  imagesOnDiskAsBytesD.clear();  imagesOnDiskAsBytespX.clear();  imagesOnDiskAsBytespY.clear();  imagesOnDiskMask.clear();  imagesOnDiskColSpaceID.clear();  filesTodelete=tempFileNames.keySet().iterator();  while (filesTodelete.hasNext()) {    final String file=((String)filesTodelete.next());    if (file.contains(key)) {      final File delete_file=new File(file);      if (debugAdobe) {        System.out.println("Delete " + file);      }      if (delete_file.delete()) {        filesTodelete.remove();      } else {        undeletedFiles.put(key,"x");        if (debugAdobe) {          System.out.println("Filed to Delete " + file);        }      }    }  }  try {    if (!checkedThisSession && temp_dir.length() > 2) {      checkedThisSession=true;      final File temp_files=new File(temp_dir);      final String[] file_list=temp_files.list();      final File[] to_be_del=temp_files.listFiles();      if (file_list != null) {        for (int ii=0; ii < file_list.length; ii++) {          if (file_list[ii].contains(key) || file_list[ii].endsWith(".bin")) {            final File delete_file=new File(temp_dir + file_list[ii]);            delete_file.delete();          }          if ((!file_list[ii].endsWith(".pdf") && (System.currentTimeMillis() - to_be_del[ii].lastModified() >= time))) {            to_be_del[ii].delete();          }        }      }    }    final File cmyk_d=new File(cmyk_dir);    if (cmyk_d.exists()) {      cmyk_d.delete();    }  } catch (  final Exception e) {    LogWriter.writeLog("Exception " + e + " flushing files");  }}  }
class C{  public static void main(String[] args){  JFrame frame=new JFrame("CConnectionEditor");  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  frame.getRootPane().getContentPane().add(new CConnectionEditor());  AdempierePLAF.showCenterScreen(frame);}  }
class C{  public boolean isRoot(){  return false;}  }
class C{  public TDoubleHashSetDecorator(TDoubleHashSet set){  super();  this._set=set;}  }
class C{  public static boolean isNativesAvailable(){  return CLibrary.jnaAvailable();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.740 -0400",hash_original_method="B4FA3AE06204AB7289DB84225F541AF1",hash_generated_method="ADC309CA8828389521AD207F87DEF6F3") public synchronized long resetByteCount(){  long tmp=this.count;  this.count=0;  return tmp;}  }
class C{  public boolean isCoalesce(){  return coalesce;}  }
class C{  public OperationPendingException(String message){  super(message);}  }
class C{  private MultipleInputStream(final InputStream[] inputStream,final int offset,final int length){  ObjectArrays.ensureOffsetLength(inputStream,offset,length);  this.inputStream=inputStream;  this.from=offset;  this.to=offset + length;  curr=offset;  currStream=inputStream[curr];}  }
class C{  @Override public int size(){  int count=0;  for (Node node=top; node != null; node=node.next) {    count++;  }  return count;}  }
class C{  public void drawDomainLine(Graphics2D g2,XYPlot plot,ValueAxis axis,Rectangle2D dataArea,double value,Paint paint,Stroke stroke){  Range range=axis.getRange();  if (!range.contains(value)) {    return;  }  PlotOrientation orientation=plot.getOrientation();  Line2D line=null;  double v=axis.valueToJava2D(value,dataArea,plot.getDomainAxisEdge());  if (orientation.isHorizontal()) {    line=new Line2D.Double(dataArea.getMinX(),v,dataArea.getMaxX(),v);  } else   if (orientation.isVertical()) {    line=new Line2D.Double(v,dataArea.getMinY(),v,dataArea.getMaxY());  }  g2.setPaint(paint);  g2.setStroke(stroke);  Object saved=g2.getRenderingHint(RenderingHints.KEY_STROKE_CONTROL);  g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL,RenderingHints.VALUE_STROKE_NORMALIZE);  g2.draw(line);  g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL,saved);}  }
class C{  private void addOrUpdateNode(AStarNode newNode){  boolean found=false;  for (  AStarNode toUpdate : closedNodes) {    if (newNode.equals(toUpdate)) {      toUpdate.updateDistance(newNode.getG(),newNode.parent);      found=true;      break;    }  }  if (!found) {    openQueue.offer(newNode);  }}  }
class C{  private int measureWidth(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=getPaddingLeft() + getPaddingRight() + (count * mLineWidth)+ ((count - 1) * mGapWidth);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)Math.ceil(result);}  }
class C{  public synchronized boolean goToChild(String value){  if (m_Current.children == null) {    return false;  }  int pos=search(m_Current.children,value);  if (pos == -1) {    return false;  }  m_Current=m_Current.children.elementAt(pos);  return true;}  }
class C{  public void buildReport(String organizationId,VOReportResult result,boolean allSupplierReports) throws XPathExpressionException, ParserConfigurationException {  result.setServerTimeZone(DateConverter.getCurrentTimeZoneAsUTCString());  List<ReportResultData> reportData;  if (allSupplierReports) {    reportData=subscriptionDao.retrieveSupplierCustomerReportOfASupplierData(organizationId);  } else {    reportData=subscriptionDao.retrieveSupplierCustomerReportData(organizationId);  }  ReportDataConverter converter=new ReportDataConverter(subscriptionDao);  converter.convertToXml(reportData,result.getData(),Collections.<String,String>emptyMap());}  }
class C{  @Override public void startCounting(ExampleSet exampleSet,boolean useExampleWeights) throws OperatorException {  super.startCounting(exampleSet,useExampleWeights);  Iterator<Example> reader=exampleSet.iterator();  this.value=0.0d;  Attribute labelAttr=exampleSet.getAttributes().getLabel();  Attribute weightAttribute=null;  if (useExampleWeights) {    weightAttribute=exampleSet.getAttributes().getWeight();  }  while (reader.hasNext()) {    Example example=reader.next();    String trueLabel=example.getNominalValue(labelAttr);    double confidence=example.getConfidence(trueLabel);    double weight=1.0d;    if (weightAttribute != null) {      weight=example.getValue(weightAttribute);    }    this.value-=weight * MathFunctions.ld(confidence);    this.counter+=weight;  }}  }
class C{  public static byte[] encodeBase64(final byte[] binaryData,final boolean isChunked){  return encodeBase64(binaryData,isChunked,false);}  }
class C{  public int concurrencyLevel(){  return locks.length;}  }
class C{  public List<GenericValue> makeAllOrderPaymentInfos(LocalDispatcher dispatcher){  Delegator delegator=this.getDelegator();  List<GenericValue> allOpPrefs=new LinkedList<GenericValue>();  BigDecimal remainingAmount=this.getGrandTotal().subtract(this.getPaymentTotal());  remainingAmount=remainingAmount.setScale(2,BigDecimal.ROUND_HALF_UP);  if (getBillingAccountId() != null && this.billingAccountAmt.compareTo(BigDecimal.ZERO) <= 0) {    BigDecimal billingAccountAvailableAmount=CheckOutHelper.availableAccountBalance(getBillingAccountId(),dispatcher);    if (this.billingAccountAmt.compareTo(BigDecimal.ZERO) == 0 && billingAccountAvailableAmount.compareTo(BigDecimal.ZERO) > 0) {      this.billingAccountAmt=billingAccountAvailableAmount;    }    if (remainingAmount.compareTo(getBillingAccountAmount()) < 0) {      this.billingAccountAmt=remainingAmount;    }    if (billingAccountAvailableAmount.compareTo(getBillingAccountAmount()) < 0) {      this.billingAccountAmt=billingAccountAvailableAmount;    }    BigDecimal billingAccountAmountSelected=getBillingAccountAmount();    GenericValue opp=delegator.makeValue("OrderPaymentPreference",new HashMap<String,Object>());    opp.set("paymentMethodTypeId","EXT_BILLACT");    opp.set("presentFlag","N");    opp.set("overflowFlag","N");    opp.set("maxAmount",billingAccountAmountSelected);    opp.set("statusId","PAYMENT_NOT_RECEIVED");    allOpPrefs.add(opp);    remainingAmount=remainingAmount.subtract(billingAccountAmountSelected);    if (remainingAmount.compareTo(BigDecimal.ZERO) < 0) {      remainingAmount=BigDecimal.ZERO;    }  }  for (  CartPaymentInfo inf : paymentInfo) {    if (inf.amount == null) {      inf.amount=remainingAmount;      remainingAmount=BigDecimal.ZERO;    }    allOpPrefs.addAll(inf.makeOrderPaymentInfos(delegator,this));  }  return allOpPrefs;}  }
class C{  static boolean isTailMethodCall(GrCallExpression call){  GrStatement stmt=call;  PsiElement parent=call.getParent();  if (parent instanceof GrReturnStatement) {    stmt=((GrReturnStatement)parent);    parent=parent.getParent();  }  if (parent instanceof GrOpenBlock) {    if (parent.getParent() instanceof GrMethod) {      GrStatement[] statements=((GrOpenBlock)parent).getStatements();      return statements.length > 0 && stmt == statements[statements.length - 1];    }  }  if (parent instanceof GrClosableBlock) {    GrStatement[] statements=((GrClosableBlock)parent).getStatements();    return statements.length > 0 && stmt == statements[statements.length - 1];  }  if (stmt instanceof GrReturnStatement) {    GrMethod method=PsiTreeUtil.getParentOfType(stmt,GrMethod.class);    if (method != null) {      Collection<GrStatement> returnStatements=ControlFlowUtils.collectReturns(method.getBlock());      return returnStatements.contains(stmt) && !hasBadReturns(method);    }  }  return false;}  }
class C{  public void testExpandToPath() throws Exception {  FileObject testJar=this.fsManager.resolveFile("ram:///test.jar");  ZipOutputStream zos=new ZipOutputStream(testJar.getContent().getOutputStream());  ZipEntry zipEntry=new ZipEntry("rootResource.txt");  zos.putNextEntry(zipEntry);  zos.write("Some content".getBytes("UTF-8"));  zos.closeEntry();  zos.close();  DefaultJarArchive jarArchive=new DefaultJarArchive("ram:///test.jar");  jarArchive.setFileHandler(new VFSFileHandler(this.fsManager));  jarArchive.expandToPath("ram:///test");  assertTrue(this.fsManager.resolveFile("ram:///test/rootResource.txt").exists());}  }
class C{  public CModuleWrapper(final INaviModule module){  m_module=module;}  }
class C{  protected void validateState(State currentState){  ValidationUtils.validateState(currentState);  if (currentState.totalDatastore != null && currentState.replicatedDatastore != null) {    checkState(currentState.replicatedDatastore <= currentState.totalDatastore,"Replicated datastore count exceeds total datastore count.");  }  if (currentState.totalDatastore != null && currentState.replicatedImageDatastore != null) {    checkState(currentState.replicatedImageDatastore <= currentState.totalDatastore,"Replicated image datastore count exceeds total datastore count.");    checkState(currentState.replicatedImageDatastore <= currentState.totalImageDatastore,"Replicated image datastore count exceeds total image datastore count.");  }  if (currentState.replicatedDatastore != null) {    checkState(currentState.replicatedDatastore >= 0,"Replicated datastore count cannot be less than '0'.");  }  if (currentState.replicatedImageDatastore != null) {    checkState(currentState.replicatedImageDatastore >= 0,"Replicated image datastore count cannot be less than '0'.");  }}  }
class C{  public static DefaultTrigger of(){  return new DefaultTrigger();}  }
class C{  public XmlHandler(ValidationContext vc,Element parent,Element element,ElementMetadata<?,?> metadata){  this.vc=vc;  this.parentElement=parent;  this.element=element;  this.metadata=metadata;}  }
class C{  @SuppressWarnings("unchecked") static public void assertSameIteratorAnyOrder(final String msg,final Object[] expected,final Iterator actual){  final int nrange=expected.length;  java.util.Map range=new java.util.HashMap();  for (int j=0; j < nrange; j++) {    range.put(expected[j],expected[j]);  }  for (int j=0; j < nrange; j++) {    if (!actual.hasNext()) {      fail(msg + ": Index exhausted while expecting more object(s)" + ": index="+ j);    }    Object actualObject=actual.next();    if (range.remove(actualObject) == null) {      fail("Object not expected" + ": index=" + j + ", object="+ actualObject);    }  }  if (actual.hasNext()) {    fail("Iterator will deliver too many objects.");  }}  }
class C{  public KMLDocumentBuilder(OutputStream stream) throws XMLStreamException {  this.writer=XMLOutputFactory.newInstance().createXMLStreamWriter(stream);  this.startDocument();}  }
class C{  public final void testValidateCaseInsensitiveNotAllowingSpacesSucceeds(){  char[] allowedCharacters=new char[]{'-'};  LetterValidator characterValidator=new LetterValidator("foo",Case.CASE_INSENSITIVE,false,allowedCharacters);  assertTrue(characterValidator.validate("AbC-"));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:21.654 -0500",hash_original_method="4D79B8C2A51115F6F438822C99644146",hash_generated_method="86F79CBB124E16917B7A1AE7C11CD87B") public boolean isCphsVoiceMessageSet(){  return isCphsVoiceMessageIndicatorAddress() && (origBytes[OFFSET_ADDRESS_VALUE] & 0xff) == 0x11;}  }
class C{  public void updateLifetime(){  if (lifetime-- < 1) {    setDead();  }}  }
class C{  public void testGetVersion(){  if (this.cert == null) {    return;  }  assertEquals("The version is not correct.",tbt_cert.getVersion(),2);}  }
class C{  public final String sourceExpression(int index,Instances data){  return "true";}  }
class C{  public static boolean isConnectionFast(int type,int subType){  if (type == ConnectivityManager.TYPE_WIFI) {    return true;  } else   if (type == ConnectivityManager.TYPE_MOBILE) {switch (subType) {case TelephonyManager.NETWORK_TYPE_1xRTT:      return false;case TelephonyManager.NETWORK_TYPE_CDMA:    return false;case TelephonyManager.NETWORK_TYPE_EDGE:  return false;case TelephonyManager.NETWORK_TYPE_EVDO_0:return true;case TelephonyManager.NETWORK_TYPE_EVDO_A:return true;case TelephonyManager.NETWORK_TYPE_GPRS:return false;case TelephonyManager.NETWORK_TYPE_HSDPA:return true;case TelephonyManager.NETWORK_TYPE_HSPA:return true;case TelephonyManager.NETWORK_TYPE_HSUPA:return true;case TelephonyManager.NETWORK_TYPE_UMTS:return true;case TelephonyManager.NETWORK_TYPE_EHRPD:return true;case TelephonyManager.NETWORK_TYPE_EVDO_B:return true;case TelephonyManager.NETWORK_TYPE_HSPAP:return true;case TelephonyManager.NETWORK_TYPE_IDEN:return false;case TelephonyManager.NETWORK_TYPE_LTE:return true;case TelephonyManager.NETWORK_TYPE_UNKNOWN:default :return false;}} else {return false;}}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:10.704 -0500",hash_original_method="04461905D5906FA3DCAABB508245B209",hash_generated_method="C59D3BA0BCD3A6EE5C635817F5FB067D") private static boolean canResponseHaveBody(final HttpRequest request,final int status){  if ("HEAD".equalsIgnoreCase(request.getRequestLine().getMethod())) {    return false;  }  return status >= HttpStatus.SC_OK && status != HttpStatus.SC_NO_CONTENT && status != HttpStatus.SC_NOT_MODIFIED;}  }
class C{  public boolean globalHotkeysAvailable(){  return globalHotkeys != null;}  }
class C{  private SchemaFactory loadFromServicesFile(String schemaLanguage,String resourceName,InputStream in){  if (debug)   debugPrintln("Reading " + resourceName);  BufferedReader rd;  try {    rd=new BufferedReader(new InputStreamReader(in,"UTF-8"),DEFAULT_LINE_LENGTH);  } catch (  java.io.UnsupportedEncodingException e) {    rd=new BufferedReader(new InputStreamReader(in),DEFAULT_LINE_LENGTH);  }  String factoryClassName=null;  SchemaFactory resultFactory=null;  while (true) {    try {      factoryClassName=rd.readLine();    } catch (    IOException x) {      break;    }    if (factoryClassName != null) {      int hashIndex=factoryClassName.indexOf('#');      if (hashIndex != -1) {        factoryClassName=factoryClassName.substring(0,hashIndex);      }      factoryClassName=factoryClassName.trim();      if (factoryClassName.length() == 0) {        continue;      }      try {        SchemaFactory foundFactory=(SchemaFactory)createInstance(factoryClassName);        if (foundFactory.isSchemaLanguageSupported(schemaLanguage)) {          resultFactory=foundFactory;          break;        }      } catch (      Exception ignored) {      }    } else {      break;    }  }  IoUtils.closeQuietly(rd);  return resultFactory;}  }
class C{  public void commit(){  long offset=(pendingMessagesToBeAcked.isEmpty()) ? this.lastEmittedBeginTxPosition.getSCN() : pendingMessagesToBeAcked.firstKey();  if (currentCommittedOffsetInZk != offset) {    LOGGER.trace("Updating ZK with offset {} for topology: {} with Id: {}",offset,this.topologyName,this.topologyInstanceId);    OffsetInfo offsetInfo=null;    if (pendingMessagesToBeAcked.isEmpty()) {      offsetInfo=new OffsetInfo(offset,this.topologyName,this.topologyInstanceId,this.databaseName,this.lastEmittedBeginTxPosition.getBinLogPosition(),this.lastEmittedBeginTxPosition.getBinLogFileName());    } else {      TransactionEvent txEvent=pendingMessagesToBeAcked.get(offset).getTxEvent();      offsetInfo=new OffsetInfo(offset,this.topologyName,this.topologyInstanceId,txEvent.getDatabaseName(),txEvent.getBinLogPosition(),txEvent.getBinLogFileName());    }    zkClient.write(this.spoutConfig.getZkBinLogStateConfig().getZkScnCommitPath(),offsetInfo);    zkLastUpdateMs=System.currentTimeMillis();    currentCommittedOffsetInZk=offset;    LOGGER.debug("Update Complete in ZK at node {} with offset {} for topology: {} with Id: {}",this.spoutConfig.getZkBinLogStateConfig().getZkScnCommitPath(),offset,topologyName,topologyInstanceId);  } else {    LOGGER.trace("No update in ZK for offset {}",offset);  }}  }
class C{  public static String clearProperty(String key){  if (key == null) {    throw new NullPointerException();  }  if (key.length() == 0) {    throw new IllegalArgumentException();  }  SecurityManager secMgr=System.getSecurityManager();  if (secMgr != null) {    secMgr.checkPermission(new PropertyPermission(key,"write"));  }  return (String)systemProperties.remove(key);}  }
class C{  public void addPutstatic(CtClass c,String name,String desc){  addPutstatic0(c,null,name,desc);}  }
class C{  @Override public R visitVariable(VariableElement e,P p){  return scan(e.getEnclosedElements(),p);}  }
class C{  public void zoomToShapeInChartCoords(Shape s,int duration){  zoomTransition(s.getBounds(),duration);}  }
class C{  public static AsymmetricKeyParameter createKey(byte[] keyInfoData) throws IOException {  return createKey(SubjectPublicKeyInfo.getInstance(ASN1Primitive.fromByteArray(keyInfoData)));}  }
class C{  private void emitUnboxing(Wrapper wrapper){  String owner="java/lang/" + wrapper.wrapperType().getSimpleName();  String name=wrapper.primitiveSimpleName() + "Value";  String desc="()" + wrapper.basicTypeChar();  emitReferenceCast(wrapper.wrapperType(),null);  mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL,owner,name,desc,false);}  }
class C{  @Override protected void mouseClicked(int par1,int par2,int par3) throws IOException {  super.mouseClicked(par1,par2,par3);  ipBox.mouseClicked(par1,par2,par3);  maxThreadsBox.mouseClicked(par1,par2,par3);}  }
class C{  public int value(){  int index=0;  index=skipWhiteSpace(index);  index=skipEqual(index);  index=skipWhiteSpace(index);  String s1="" + (char)getElement(index);  String s2="" + (char)getElement(index + 1);  int val=-1;  try {    int sum=Integer.valueOf(s2,16).intValue();    sum+=16 * Integer.valueOf(s1,16).intValue();    val=sum;  } catch (  Exception e) {    log.error("Unable to get number from reply: \"" + s1 + s2+ "\" index: "+ index+ " message: \""+ toString()+ "\"");  }  return val;}  }
class C{  public double pdf(double x){  double diff=x - mean;  return SQRT_INV * Math.exp(-(diff * diff) / (2.0 * variance));}  }
class C{  public TradelogSummaryTableModel(){  super(columnHeaderToolTip);  columnNames=new String[13];  columnNames[0]=PERIOD;  columnNames[1]=BATTING_AVERAGE;  columnNames[2]=SHARPE_RATIO;  columnNames[3]=GROSS_PL;  columnNames[4]=QUANTITY;  columnNames[5]=COMMISSION;  columnNames[6]=NET_PL;  columnNames[7]=WIN_COUNT;  columnNames[8]=WIN_AMOUNT;  columnNames[9]=LOSS_COUNT;  columnNames[10]=LOSS_AMOUNT;  columnNames[11]=POSITION_COUNT;  columnNames[12]=CONTRACT_COUNT;}  }
class C{  public ColorMatrix(){  reset();}  }
class C{  public T casePseudostate(Pseudostate object){  return null;}  }
class C{  public static Movie link(List<CompilationUnit> units,PostLink postLink,Configuration configuration) throws LinkerException {  FlexMovie movie=new FlexMovie(configuration);  movie.topLevelClass=FlexMovie.formatSymbolClassName(configuration.getRootClassName());  movie.generate(units);  if (ThreadLocalToolkit.getBenchmark() != null) {    LocalizationManager l10n=ThreadLocalToolkit.getLocalizationManager();    ThreadLocalToolkit.getBenchmark().benchmark(l10n.getLocalizedTextString(new Linking()));  }  generateReports(configuration,movie);  if (postLink != null) {    postLink.run(movie);    if (ThreadLocalToolkit.getBenchmark() != null) {      LocalizationManager l10n=ThreadLocalToolkit.getLocalizationManager();      ThreadLocalToolkit.getBenchmark().benchmark(l10n.getLocalizedTextString(new Optimizing()));    }  }  return movie;}  }
class C{  public static boolean initWeb(ServletContext context){  if (s_initOK) {    log.info(context.getServletContextName());    return true;  }  Enumeration en=context.getInitParameterNames();  StringBuffer info=new StringBuffer("Servlet Context Init Parameters: ").append(context.getServletContextName());  while (en.hasMoreElements()) {    String name=en.nextElement().toString();    String value=context.getInitParameter(name);    System.setProperty(name,value);    info.append("\n").append(name).append("=").append(value);  }  try {    s_initOK=Adempiere.startup(false);  } catch (  Exception ex) {    log.log(Level.SEVERE,"startup",ex);  }  if (!s_initOK)   return false;  log.info(info.toString());  Properties ctx=new Properties();  MClient client=MClient.get(ctx,0);  MSystem system=MSystem.get(ctx);  client.sendEMail(client.getRequestEMail(),"Server started: " + system.getName(),"ServerInfo: " + context.getServerInfo(),null);  return s_initOK;}  }
class C{  private void updatePlayerQuest(final CircumstancesOfDeath circ){  final RPEntity killer=circ.getKiller();  final String victim=circ.getVictim().getName();  Logger.getLogger(SpidersCreatures.class).debug("in " + circ.getZone().getName() + ": "+ circ.getVictim().getName()+ " killed by "+ circ.getKiller().getName());  if (!circ.getKiller().getClass().getName().equals(Player.class.getName())) {    return;  }  final Player player=(Player)killer;  if (!player.hasQuest(QUEST_SLOT) || !player.getQuest(QUEST_SLOT,0).equals("started")) {    return;  }  int slot=creatures.indexOf(victim);  if (slot != -1) {    player.setQuest(QUEST_SLOT,1 + slot,victim);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private Constraints(){}  }
class C{  public DispatchContext(String name,ClassLoader loader,LocalDispatcher dispatcher){  this.name=name;  this.loader=loader;  this.dispatcher=dispatcher;  String modelName=null;  if (this.dispatcher != null) {    Delegator delegator=dispatcher.getDelegator();    if (delegator != null) {      DelegatorElement delegatorInfo=null;      try {        delegatorInfo=EntityConfig.getInstance().getDelegator(delegator.getDelegatorBaseName());      } catch (      GenericEntityConfException e) {        Debug.logWarning(e,"Exception thrown while getting delegator config: ",module);      }      if (delegatorInfo != null) {        modelName=delegatorInfo.getEntityModelReader();      }    }  }  if (modelName == null) {    modelName=name;  }  this.model=modelName;  getGlobalServiceMap();}  }
class C{  private void chooseFile(){  if (firstFile && (PrefManager.get().getPreferredSizeFileChooser().height > 0)) {    fc.setPreferredSize(PrefManager.get().getPreferredSizeFileChooser());  }  fc.setPreferredSize(fc.getSize());  fc.setVisible(true);  PrefManager.get().setPreferredSizeFileChooser(fc.getSize());  File[] files=fc.getFiles();  if (files.length > 0) {    openFiles(files,false);  }}  }
class C{  public boolean containsValue(Object value){  Set values=totalValueSet();  return values.contains(value);}  }
class C{  private StorageProvider createNewStorageProviderInstance(StorageSystem xioSystem){  log.info("Creating a new storage provider for storage system {}",xioSystem.getLabel());  StorageProvider storageProvider=new StorageProvider();  storageProvider.setId(URIUtil.createId(StorageProvider.class));  storageProvider.setCompatibilityStatus(xioSystem.getCompatibilityStatus());  storageProvider.setConnectionStatus(StorageProvider.ConnectionStatus.CONNECTED.name());  storageProvider.setCreationTime(xioSystem.getCreationTime());  storageProvider.setInterfaceType(StorageProvider.InterfaceType.xtremio.name());  storageProvider.setIPAddress(xioSystem.getIpAddress());  storageProvider.setLabel(xioSystem.getLabel());  storageProvider.setLastScanStatusMessage(xioSystem.getLastDiscoveryStatusMessage());  storageProvider.setLastScanTime(xioSystem.getLastDiscoveryRunTime());  storageProvider.setPassword(xioSystem.getPassword());  storageProvider.setPortNumber(xioSystem.getPortNumber());  storageProvider.setRegistrationStatus(xioSystem.getRegistrationStatus());  storageProvider.setScanStatus(xioSystem.getDiscoveryStatus());  storageProvider.setOpStatus(xioSystem.getOpStatus());  storageProvider.setSuccessScanTime(xioSystem.getSuccessDiscoveryTime());  storageProvider.setTag(xioSystem.getTag());  storageProvider.setUserName(xioSystem.getUsername());  storageProvider.setVersionString(xioSystem.getFirmwareVersion());  log.info("Adding the storage system to the storage provider");  storageProvider.addStorageSystem(dbClient,xioSystem,true);  return storageProvider;}  }
class C{  public String docType(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  Integer C_DocType_ID=(Integer)value;  if (C_DocType_ID == null || C_DocType_ID.intValue() == 0)   return "";  String oldDocNo=(String)mTab.getValue("DocumentNo");  boolean newDocNo=(oldDocNo == null);  if (!newDocNo && oldDocNo.startsWith("<") && oldDocNo.endsWith(">"))   newDocNo=true;  Integer oldC_DocType_ID=(Integer)mTab.getValue("C_DocType_ID");  String sql="SELECT d.DocSubTypeSO,d.HasCharges,'N'," + "d.IsDocNoControlled,s.CurrentNext,s.CurrentNextSys," + "s.AD_Sequence_ID,d.IsSOTrx, "+ "s.StartNewYear, s.DateColumn "+ "FROM C_DocType d, AD_Sequence s "+ "WHERE C_DocType_ID=?"+ " AND d.DocNoSequence_ID=s.AD_Sequence_ID(+)";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    int AD_Sequence_ID=0;    if (!newDocNo && oldC_DocType_ID.intValue() != 0) {      pstmt=DB.prepareStatement(sql,null);      pstmt.setInt(1,oldC_DocType_ID.intValue());      rs=pstmt.executeQuery();      if (rs.next())       AD_Sequence_ID=rs.getInt(7);      DB.close(rs,pstmt);      rs=null;      pstmt=null;    }    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,C_DocType_ID.intValue());    rs=pstmt.executeQuery();    String DocSubTypeSO="";    boolean IsSOTrx=true;    if (rs.next()) {      DocSubTypeSO=rs.getString(1);      if (DocSubTypeSO == null)       DocSubTypeSO="--";      Env.setContext(ctx,WindowNo,"OrderType",DocSubTypeSO);      if (!DocSubTypeSO.equals(MOrder.DocSubTypeSO_Standard))       mTab.setValue("IsDropShip","N");      if (DocSubTypeSO.equals(MOrder.DocSubTypeSO_POS))       mTab.setValue("DeliveryRule",X_C_Order.DELIVERYRULE_Force); else       if (DocSubTypeSO.equals(MOrder.DocSubTypeSO_Prepay))       mTab.setValue("DeliveryRule",X_C_Order.DELIVERYRULE_AfterReceipt); else       mTab.setValue("DeliveryRule",X_C_Order.DELIVERYRULE_Availability);      if (DocSubTypeSO.equals(MOrder.DocSubTypeSO_POS) || DocSubTypeSO.equals(MOrder.DocSubTypeSO_Prepay) || DocSubTypeSO.equals(MOrder.DocSubTypeSO_OnCredit))       mTab.setValue("InvoiceRule",X_C_Order.INVOICERULE_Immediate); else       mTab.setValue("InvoiceRule",X_C_Order.INVOICERULE_AfterDelivery);      if (DocSubTypeSO.equals(MOrder.DocSubTypeSO_POS))       mTab.setValue("PaymentRule",X_C_Order.PAYMENTRULE_Cash); else       mTab.setValue("PaymentRule",X_C_Order.PAYMENTRULE_OnCredit);      if ("N".equals(rs.getString(8)))       IsSOTrx=false;      Env.setContext(ctx,WindowNo,"HasCharges",rs.getString(2));      if (rs.getString(4).equals("Y")) {        if (!newDocNo && AD_Sequence_ID != rs.getInt(7))         newDocNo=true;        if (newDocNo)         if (Ini.isPropertyBool(Ini.P_ADEMPIERESYS) && Env.getAD_Client_ID(Env.getCtx()) < 1000000)         mTab.setValue("DocumentNo","<" + rs.getString(6) + ">"); else {          if ("Y".equals(rs.getString(9))) {            String dateColumn=rs.getString(10);            mTab.setValue("DocumentNo","<" + MSequence.getPreliminaryNoByYear(mTab,rs.getInt(7),dateColumn,null) + ">");          } else {            mTab.setValue("DocumentNo","<" + rs.getString(5) + ">");          }        }      }    }    DB.close(rs,pstmt);    rs=null;    pstmt=null;    if (DocSubTypeSO.equals(MOrder.DocSubTypeSO_POS) || DocSubTypeSO.equals(MOrder.DocSubTypeSO_Prepay))     ; else {      sql="SELECT PaymentRule,C_PaymentTerm_ID," + "InvoiceRule,DeliveryRule," + "FreightCostRule,DeliveryViaRule, "+ "PaymentRulePO,PO_PaymentTerm_ID "+ "FROM C_BPartner "+ "WHERE C_BPartner_ID=?";      pstmt=DB.prepareStatement(sql,null);      int C_BPartner_ID=Env.getContextAsInt(ctx,WindowNo,"C_BPartner_ID");      pstmt.setInt(1,C_BPartner_ID);      rs=pstmt.executeQuery();      if (rs.next()) {        String s=rs.getString(IsSOTrx ? "PaymentRule" : "PaymentRulePO");        if (s != null && s.length() != 0) {          if (IsSOTrx && (s.equals("B") || s.equals("S") || s.equals("U")))           s="P";          if (!IsSOTrx && (s.equals("B")))           s="P";          mTab.setValue("PaymentRule",s);        }        Integer ii=new Integer(rs.getInt(IsSOTrx ? "C_PaymentTerm_ID" : "PO_PaymentTerm_ID"));        if (!rs.wasNull())         mTab.setValue("C_PaymentTerm_ID",ii);        s=rs.getString(3);        if (s != null && s.length() != 0)         mTab.setValue("InvoiceRule",s);        s=rs.getString(4);        if (s != null && s.length() != 0)         mTab.setValue("DeliveryRule",s);        s=rs.getString(5);        if (s != null && s.length() != 0)         mTab.setValue("FreightCostRule",s);        s=rs.getString(6);        if (s != null && s.length() != 0)         mTab.setValue("DeliveryViaRule",s);      }    }  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);    return e.getLocalizedMessage();  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  return "";}  }
class C{  public final int readUnsignedByte() throws java.io.IOException {  return 0;}  }
class C{  public boolean isImportantForAccessibility(){  return getBooleanProperty(PROPERTY_IMPORTANT_FOR_ACCESSIBILITY);}  }
class C{  private static LiteralByteString concatenateBytes(ByteString left,ByteString right){  int leftSize=left.size();  int rightSize=right.size();  byte[] bytes=new byte[leftSize + rightSize];  left.copyTo(bytes,0,0,leftSize);  right.copyTo(bytes,0,leftSize,rightSize);  return new LiteralByteString(bytes);}  }
class C{  public PopupMenuItemContextDataDriven(){  super("DataDrivenNodeX",true);}  }
class C{  public static Color mixColor(Color baseColor,Color mixinColor,int ratio){  return new Color(baseColor.getDevice(),baseColor.getRed() + (mixinColor.getRed() - baseColor.getRed()) * ratio / 255,baseColor.getGreen() + (mixinColor.getGreen() - baseColor.getGreen()) * ratio / 255,baseColor.getBlue() + (mixinColor.getBlue() - baseColor.getBlue()) * ratio / 255);}  }
class C{  protected void printFormatterOptions(RichTextAreaContext context){  String formatter=ViewFactoryCreator.createVariableName("formatter");  printlnPostProcessing(Formatter.class.getCanonicalName() + " " + formatter+ " = "+ context.getWidget()+ ".getFormatter();");  printlnPostProcessing("if (" + formatter + " != null){");  if (context.declaredProperties.containsKey("backColor")) {    printlnPostProcessing(formatter + ".setBackColor(" + EscapeUtils.quote(context.declaredProperties.get("backColor"))+ ");");  }  if (context.declaredProperties.containsKey("fontName")) {    printlnPostProcessing(formatter + ".setFontName(" + EscapeUtils.quote(context.declaredProperties.get("fontName"))+ ");");  }  if (context.declaredProperties.containsKey("fontSize")) {switch (Integer.parseInt(context.declaredProperties.get("fontSize"))) {case 1:      printlnPostProcessing(formatter + ".setFontSize(" + FontSize.class.getCanonicalName()+ ".XX_SMALL);");    break;case 2:  printlnPostProcessing(formatter + ".setFontSize(" + FontSize.class.getCanonicalName()+ ".X_SMALL);");break;case 3:printlnPostProcessing(formatter + ".setFontSize(" + FontSize.class.getCanonicalName()+ ".SMALL);");break;case 4:printlnPostProcessing(formatter + ".setFontSize(" + FontSize.class.getCanonicalName()+ ".MEDIUM);");break;case 5:printlnPostProcessing(formatter + ".setFontSize(" + FontSize.class.getCanonicalName()+ ".LARGE);");break;case 6:printlnPostProcessing(formatter + ".setFontSize(" + FontSize.class.getCanonicalName()+ ".X_LARGE);");break;case 7:printlnPostProcessing(formatter + ".setFontSize(" + FontSize.class.getCanonicalName()+ ".XX_LARGE);");break;default :printlnPostProcessing(formatter + ".setFontSize(" + FontSize.class.getCanonicalName()+ ".MEDIUM);");}}printlnPostProcessing("}");if (context.declaredProperties.containsKey("foreColor")) {printlnPostProcessing(formatter + ".setForeColor(" + EscapeUtils.quote(context.declaredProperties.get("foreColor"))+ ");");}if (context.declaredProperties.containsKey("justification")) {String justification=context.declaredProperties.get("justification");if (justification.equalsIgnoreCase("center")) {printlnPostProcessing(formatter + ".setJustification(" + Justification.class.getCanonicalName()+ ".CENTER);");} else if (justification.equalsIgnoreCase("left")) {printlnPostProcessing(formatter + ".setJustification(" + Justification.class.getCanonicalName()+ ".LEFT);");} else if (justification.equalsIgnoreCase("right")) {printlnPostProcessing(formatter + ".setJustification(" + Justification.class.getCanonicalName()+ ".RIGHT);");}}if (context.declaredProperties.containsKey("bold") && Boolean.parseBoolean(context.declaredProperties.get("bold"))) {printlnPostProcessing(formatter + ".toggleBold();");}if (context.declaredProperties.containsKey("italic") && Boolean.parseBoolean(context.declaredProperties.get("italic"))) {printlnPostProcessing(formatter + ".toggleItalic();");}if (context.declaredProperties.containsKey("subscript") && Boolean.parseBoolean(context.declaredProperties.get("subscript"))) {printlnPostProcessing(formatter + ".toggleSubscript();");}if (context.declaredProperties.containsKey("superscript") && Boolean.parseBoolean(context.declaredProperties.get("superscript"))) {printlnPostProcessing(formatter + ".toggleSuperscript();");}if (context.declaredProperties.containsKey("underline") && Boolean.parseBoolean(context.declaredProperties.get("underline"))) {printlnPostProcessing(formatter + ".toggleUnderline();");}if (context.declaredProperties.containsKey("strikethrough") && Boolean.parseBoolean(context.declaredProperties.get("strikethrough"))) {printlnPostProcessing(formatter + ".toggleStrikethrough();");}}  }
class C{  public float[] keys(){  float[] keys=new float[size()];  float[] k=_set;  byte[] states=_states;  for (int i=k.length, j=0; i-- > 0; ) {    if (states[i] == FULL) {      keys[j++]=k[i];    }  }  return keys;}  }
class C{  public static Cylinder computeVerticalBoundingCylinder(Globe globe,double verticalExaggeration,Sector sector,double minElevation,double maxElevation){  if (sector == null) {    String msg=Logging.getMessage("nullValue.SectorIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  double minHeight=minElevation * verticalExaggeration;  double maxHeight=maxElevation * verticalExaggeration;  if (minHeight == maxHeight)   maxHeight=minHeight + 1;  if (sector.getDeltaLatDegrees() >= 180d || sector.getDeltaLonDegrees() >= 180d) {    return computeVerticalBoundsFromSectorLatitudeRange(globe,sector,minHeight,maxHeight);  } else {    return computeVerticalBoundsFromSectorQuadrilateral(globe,sector,minHeight,maxHeight);  }}  }
class C{  public void saveAsBMP(String file) throws IOException {  save(file,"bmp");}  }
class C{  public MutableValueBuffer(final int capacity){  checkCapacity(capacity);  nvalues=0;  values=new byte[capacity][];}  }
class C{  public static Network filterNetworkByLinkMode(Network network,Set<String> transportModes){  NetworkFilterManager filterManager=new NetworkFilterManager(network);  filterManager.addLinkFilter(new LinkFilter(transportModes));  return filterManager.applyFilters();}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/certs") public Response syncCert(VdcCertListParam vdcCertListParam){  log.info("Syncing vdc certs: {}",vdcCertListParam);  helper.syncVdcCerts(vdcCertListParam);  return Response.ok().build();}  }
class C{  public READER(String mimeType){  super(mimeType,"java.io.Reader");}  }
class C{  public Sound(InputStream in,SoundType type) throws IOException {  super(in,type);}  }
class C{  public static void assertEquals(String expected,String actual){  Assert.assertEquals(expected,actual);}  }
class C{  public void dispose(){  if ((throttleFrames != null) && (!throttleFrames.isEmpty())) {    for (Iterator<ThrottleFrame> tfi=throttleFrames.values().iterator(); tfi.hasNext(); ) {      tfi.next().dispose();    }  }  throttleFrames=null;  throttlesPanel.removeAll();  removeAll();  super.dispose();}  }
class C{  public IGangliaMetadataMessage newDecl(final String hostName,final String metricName,final Object value){  final int lastIndexOf=metricName.lastIndexOf('.');  final String groupName;  if (lastIndexOf == -1) {    groupName=null;  } else {    groupName=metricName.substring(0,lastIndexOf);  }  final String units=defaultUnits;  final GangliaSlopeEnum slope=defaultSlope;  final int tmax=defaultTMax;  final int dmax=defaultDMax;  @SuppressWarnings("unchecked") final Map<String,String[]> extraValues=(Map<String,String[]>)(groupName == null ? Collections.emptyMap() : Collections.singletonMap(IGangliaAttributes.ATTR_GROUP,new String[]{groupName}));  final GangliaMessageTypeEnum metricType=GangliaMessageTypeEnum.forJavaValue(value);  return new GangliaMetadataMessage(hostName,metricName,false,metricType,metricName,units,slope,tmax,dmax,extraValues);}  }
class C{  protected Workflow.Method createRemoveVolumesFromCGMethod(URI vplexURI,URI cgURI,List<URI> vplexVolumeURIs){  return new Workflow.Method(REMOVE_VOLUMES_FROM_CG_STEP,vplexURI,cgURI,vplexVolumeURIs);}  }
class C{  private void dynInit(int AD_Table_ID,int AD_ColumnSortOrder_ID,int AD_ColumnSortYesNo_ID){  m_AD_Table_ID=AD_Table_ID;  int identifiersCount=0;  StringBuffer identifierSql=new StringBuffer();  String sql="SELECT t.TableName, c.AD_Column_ID, c.ColumnName, e.Name," + "c.IsParent, c.IsKey, c.IsIdentifier, c.IsTranslated " + "FROM AD_Table t, AD_Column c, AD_Element e "+ "WHERE t.AD_Table_ID=?"+ " AND t.AD_Table_ID=c.AD_Table_ID"+ " AND (c.AD_Column_ID=? OR AD_Column_ID=?"+ " OR c.IsParent='Y' OR c.IsKey='Y' OR c.IsIdentifier='Y')"+ " AND c.AD_Element_ID=e.AD_Element_ID";  boolean trl=!Env.isBaseLanguage(Env.getCtx(),"AD_Element");  if (trl)   sql="SELECT t.TableName, c.AD_Column_ID, c.ColumnName, et.Name," + "c.IsParent, c.IsKey, c.IsIdentifier, c.IsTranslated " + "FROM AD_Table t, AD_Column c, AD_Element_Trl et "+ "WHERE t.AD_Table_ID=?"+ " AND t.AD_Table_ID=c.AD_Table_ID"+ " AND (c.AD_Column_ID=? OR AD_Column_ID=?"+ "	OR c.IsParent='Y' OR c.IsKey='Y' OR c.IsIdentifier='Y')"+ " AND c.AD_Element_ID=et.AD_Element_ID"+ " AND et.AD_Language=?";  sql+=" ORDER BY c.SeqNo";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,AD_Table_ID);    pstmt.setInt(2,AD_ColumnSortOrder_ID);    pstmt.setInt(3,AD_ColumnSortYesNo_ID);    if (trl)     pstmt.setString(4,Env.getAD_Language(Env.getCtx()));    rs=pstmt.executeQuery();    while (rs.next()) {      m_TableName=rs.getString(1);      if (AD_ColumnSortOrder_ID == rs.getInt(2)) {        log.fine("Sort=" + rs.getString(1) + "."+ rs.getString(3));        m_ColumnSortName=rs.getString(3);        yesLabel.setText(rs.getString(4));      } else       if (AD_ColumnSortYesNo_ID == rs.getInt(2)) {        log.fine("YesNo=" + rs.getString(1) + "."+ rs.getString(3));        m_ColumnYesNoName=rs.getString(3);      } else       if (rs.getString(5).equals("Y")) {        log.fine("Parent=" + rs.getString(1) + "."+ rs.getString(3));        m_ParentColumnName=rs.getString(3);      } else       if (rs.getString(6).equals("Y")) {        log.fine("Key=" + rs.getString(1) + "."+ rs.getString(3));        m_KeyColumnName=rs.getString(3);      } else       if (rs.getString(7).equals("Y")) {        log.fine("Identifier=" + rs.getString(1) + "."+ rs.getString(3));        boolean isTranslated=trl && "Y".equals(rs.getString(8));        if (identifierSql.length() > 0)         identifierSql.append(",");        identifierSql.append(getIdentifier(rs.getString(1),rs.getString(3),rs.getInt(2),isTranslated));        identifiersCount++;        if (isTranslated)         m_IdentifierTranslated=true;      } else       log.fine("??NotUsed??=" + rs.getString(1) + "."+ rs.getString(3));    }  } catch (  SQLException e) {    log.log(Level.SEVERE,sql.toString(),e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  if (identifiersCount == 0)   m_IdentifierSql="NULL"; else   if (identifiersCount == 1)   m_IdentifierSql=identifierSql.toString(); else   m_IdentifierSql=identifierSql.insert(0,"COALESCE(").append(")").toString();  noLabel.setText(Msg.getMsg(Env.getCtx(),"Available"));  log.fine(m_ColumnSortName);}  }
class C{  public h4(String value){  addElement(value);}  }
class C{  private static void printBasicEntryDetails(BaseEntry entry){  System.out.println("\tTitle: " + entry.getTitle().getPlainText());  System.out.println("\tAtom ID: " + entry.getId());  System.out.println("\tLast updated: " + entry.getUpdated());  System.out.println("\tEntry Categories:");  Iterator it=entry.getCategories().iterator();  while (it.hasNext()) {    System.out.println("\t\t" + it.next().toString());  }  System.out.println("\tLinks:");  if (entry.getLinks().size() == 0) {    System.out.println("\t\t<No links, sorry!>");  }  for (int i=0; i < entry.getLinks().size(); i++) {    System.out.println("\t\t" + ((Link)(entry.getLinks().get(i))).getHref());  }}  }
class C{  public DateTickUnit(DateTickUnitType unitType,int multiple,DateFormat formatter){  this(unitType,multiple,unitType,multiple,formatter);}  }
class C{  public void threadAssertEquals(long x,long y){  if (x != y) {    threadFailed=true;    assertEquals(x,y);  }}  }
class C{  private static String formatNullString(final String string){  if (TextUtils.isEmpty(string)) {    return "";  }  return string;}  }
class C{  public TypesUiModule(AbstractUIPlugin plugin){  super(plugin);}  }
class C{  public void updateCharacterStream(String columnLabel,java.io.Reader reader,long length) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("cachedrowsetimpl.featnotsupp").toString());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:55.952 -0500",hash_original_method="E49393A26F46BBA9E4FCE8FB3A7A7CEB",hash_generated_method="04D1A691FF8ACA188D2A7A1E7FF1BAE2") public void send(byte[] data,int length,InetAddress host) throws IOException {  send(data,length,host,DEFAULT_PORT);}  }
class C{  private static long parseMvhd(ParsableByteArray mvhd){  mvhd.setPosition(Mp4Util.ATOM_HEADER_SIZE);  int fullAtom=mvhd.readInt();  int version=Mp4Util.parseFullAtomVersion(fullAtom);  mvhd.skip(version == 0 ? 8 : 16);  return mvhd.readUnsignedInt();}  }
class C{  public void init(){  m_projectTree.setSelectionPath(new TreePath(m_projectTree.getRootNode()));}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  SerializationHandler rhandler=transformer.getSerializationHandler();  XPathContext xctxt=transformer.getXPathContext();  int sourceNode=xctxt.getCurrentNode();  String nodeName=m_name_avt == null ? null : m_name_avt.evaluate(xctxt,sourceNode,this);  String prefix=null;  String nodeNamespace="";  if ((nodeName != null) && (!m_name_avt.isSimple()) && (!XML11Char.isXML11ValidQName(nodeName))) {    transformer.getMsgMgr().warn(this,XSLTErrorResources.WG_ILLEGAL_ATTRIBUTE_VALUE,new Object[]{Constants.ATTRNAME_NAME,nodeName});    nodeName=null;  } else   if (nodeName != null) {    prefix=QName.getPrefixPart(nodeName);    if (null != m_namespace_avt) {      nodeNamespace=m_namespace_avt.evaluate(xctxt,sourceNode,this);      if (null == nodeNamespace || (prefix != null && prefix.length() > 0 && nodeNamespace.length() == 0))       transformer.getMsgMgr().error(this,XSLTErrorResources.ER_NULL_URI_NAMESPACE); else {        prefix=resolvePrefix(rhandler,prefix,nodeNamespace);        if (null == prefix)         prefix="";        if (prefix.length() > 0)         nodeName=(prefix + ":" + QName.getLocalPart(nodeName)); else         nodeName=QName.getLocalPart(nodeName);      }    } else {      try {        nodeNamespace=getNamespaceForPrefix(prefix);        if ((null == nodeNamespace) && (prefix.length() == 0))         nodeNamespace=""; else         if (null == nodeNamespace) {          transformer.getMsgMgr().warn(this,XSLTErrorResources.WG_COULD_NOT_RESOLVE_PREFIX,new Object[]{prefix});          nodeName=null;        }      } catch (      Exception ex) {        transformer.getMsgMgr().warn(this,XSLTErrorResources.WG_COULD_NOT_RESOLVE_PREFIX,new Object[]{prefix});        nodeName=null;      }    }  }  constructNode(nodeName,prefix,nodeNamespace,transformer);}  }
class C{  public void remove(int index){  mCategories.remove(index);  mTitles.remove(index);  mValues.remove(index);}  }
class C{  public static boolean deleteDirectorySafely(Path folder,String datasource){  folder=folder.toAbsolutePath();  String fn=folder.toAbsolutePath().toString();  if (!Files.isDirectory(folder)) {    LOGGER.warn("Will not delete folder '" + folder + "': folder is a file, NOT a directory!");    return false;  }  if (!folder.toString().startsWith(datasource)) {    LOGGER.warn("Will not delete folder '" + folder + "': datasource '"+ datasource+ "' does not match");    return false;  }  fn=fn.replace(datasource,datasource + FileSystems.getDefault().getSeparator() + Constants.BACKUP_FOLDER);  try {    Path backup=Paths.get(fn);    if (!Files.exists(backup.getParent())) {      Files.createDirectories(backup.getParent());    }    deleteDirectoryRecursive(backup);    return moveDirectorySafe(folder,backup);  } catch (  IOException e) {    LOGGER.warn("could not delete directory: " + e.getMessage());    return false;  }}  }
class C{  public static void yield(){  return;}  }
class C{  public Road createRoad(Intersection from){  return createRoad(-1,null,from,null,null);}  }
class C{  public JSONException(final Throwable cause){  super(cause.getMessage(),cause);}  }
class C{  public static void appendLast(JList list,Object element){  getDefaultListModel(list).addElement(element);}  }
class C{  private void writeObject(ObjectOutputStream oos) throws IOException {  oos.writeObject(iInstant);  oos.writeObject(iField.getType());}  }
class C{  public boolean isRegisteredType(Class<?> clazz){  return typeAnnotations.containsKey(clazz);}  }
class C{  @Override public boolean isWritable(int column) throws SQLException {  try {    debugCodeCall("isWritable",column);    checkColumnIndex(column);    return true;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public final void removeColumn(Node variable){  int index=variables.indexOf(variable);  if (index != -1) {    removeColumn(index);  }}  }
class C{  public void testIntValueNegative3(){  byte aBytes[]={12,56,100,-2,-76,127,45,91,3};  int sign=-1;  int resInt=-2133678851;  int aNumber=new BigInteger(sign,aBytes).intValue();  assertTrue(aNumber == resInt);}  }
class C{  public void ensureCapacity(int minimumCapacity){  return;}  }
class C{  public void printTo(Writer out,ReadablePartial partial) throws IOException {  DateTimePrinter printer=requirePrinter();  if (partial == null) {    throw new IllegalArgumentException("The partial must not be null");  }  printer.printTo(out,partial,iLocale);}  }
class C{  public boolean parse(BashPsiBuilder builder,IElementType startToken,IElementType endToken){  if (builder.getTokenType() != startToken) {    return false;  }  final PsiBuilder.Marker arithmetic=builder.mark();  builder.advanceLexer();  if (!arithmeticExprParser.parse(builder)) {    builder.getTokenType();    arithmetic.drop();    ParserUtil.error(builder,"parser.unexpected.token");    return false;  }  final IElementType lastToken=ParserUtil.getTokenAndAdvance(builder);  if (lastToken != endToken) {    arithmetic.drop();    ParserUtil.error(builder,"parser.unexpected.token");    return false;  }  arithmetic.done(BashElementTypes.ARITHMETIC_COMMAND);  return true;}  }
class C{  public void suicide(){  base.destroyAgent(getName());}  }
class C{  @SuppressWarnings("null") public byte[] toByteArray(final ArrayOfItemsSerDe<T> serDe,final Class<?> clazz){  final int preLongs, outBytes;  final boolean empty=itemsSeen_ == 0;  byte[] bytes=null;  if (empty) {    preLongs=1;    outBytes=8;  } else {    preLongs=Family.RESERVOIR.getMaxPreLongs();    bytes=serDe.serializeToByteArray(getSamples(clazz));    outBytes=(preLongs << 3) + bytes.length;  }  final byte[] outArr=new byte[outBytes];  final Memory mem=new NativeMemory(outArr);  long pre0=0L;  pre0=PreambleUtil.insertPreLongs(preLongs,pre0);  pre0=PreambleUtil.insertResizeFactor(rf_.lg(),pre0);  pre0=PreambleUtil.insertSerVer(SER_VER,pre0);  pre0=PreambleUtil.insertFamilyID(Family.RESERVOIR.getID(),pre0);  pre0=(empty) ? PreambleUtil.insertFlags(EMPTY_FLAG_MASK,pre0) : PreambleUtil.insertFlags(0,pre0);  pre0=PreambleUtil.insertReservoirSize(encodedResSize_,pre0);  pre0=PreambleUtil.insertSerDeId(serDe.getId(),pre0);  if (empty) {    mem.putLong(0,pre0);  } else {    long pre1=0L;    pre1=PreambleUtil.insertItemsSeenCount(itemsSeen_,pre1);    final long[] preArr=new long[preLongs];    preArr[0]=pre0;    preArr[1]=pre1;    mem.putLongArray(0,preArr,0,preLongs);    final int preBytes=preLongs << 3;    mem.putByteArray(preBytes,bytes,0,bytes.length);  }  return outArr;}  }
class C{  @Override public synchronized void removeInstanceListener(InstanceListener tsl){  m_instanceListeners.remove(tsl);}  }
class C{  public static GroupByClause create(Expression... expressions){  return new GroupByClause(expressions);}  }
class C{  public final static long horizontalDHTDistance(final long fromPos,final long toPos){  return (toPos >= fromPos) ? toPos - fromPos : (Long.MAX_VALUE - fromPos) + toPos + 1;}  }
class C{  private StringTextStore(){  this("");}  }
class C{  public UPNPCandidate(TransportAddress transportAddress,LocalCandidate base,Component parentComponent,GatewayDevice device){  super(transportAddress,parentComponent,CandidateType.SERVER_REFLEXIVE_CANDIDATE,CandidateExtendedType.UPNP_CANDIDATE,base);  this.setBase(base);  this.device=device;  setStunServerAddress(transportAddress);}  }
class C{  public void scan(){  fieldsTypesValues=new KeepFirstTreeMap<String,Pair<String,String>>();  if (object == null) {    return;  }  Class<?> clazz=object.getClass();  do {    list(clazz);    clazz=clazz.getSuperclass();  } while (clazz != null);}  }
class C{  private static void unpackBits(long tstamp,int[] ymd_hms_f){  int year=(int)(tstamp >> YPOS) & YMASK;  int month=(int)(tstamp >> MPOS) & MMASK;  int day=(int)(tstamp >> DPOS) & DMASK;  int hour=(int)(tstamp >> HPOS) & HMASK;  int minute=(int)(tstamp >> IPOS) & IMASK;  int second=(int)(tstamp >> SPOS) & SMASK;  int microsec=(int)(tstamp) & UMASK;  ymd_hms_f[YIDX]=year;  ymd_hms_f[MIDX]=month;  ymd_hms_f[DIDX]=day;  ymd_hms_f[HIDX]=hour;  ymd_hms_f[IIDX]=minute;  ymd_hms_f[SIDX]=second;  ymd_hms_f[UIDX]=microsec;}  }
class C{  @Override @Test public void testIsAttachAPIFound() throws Exception {  final ProcessControllerFactory factory=new ProcessControllerFactory();  assertFalse(factory.isAttachAPIFound());}  }
class C{  public void removePriorityUnit(String id){  if (!StringUtil.isPositiveInteger(id)) {    return;  }  removePriorityUnit(Integer.parseInt(id));}  }
class C{  public synchronized V put(K key,V value){  if (value == null) {    throw new NullPointerException();  }  Entry<?,?> tab[]=table;  int hash=key.hashCode();  int index=(hash & 0x7FFFFFFF) % tab.length;  @SuppressWarnings("unchecked") Entry<K,V> entry=(Entry<K,V>)tab[index];  for (; entry != null; entry=entry.next) {    if ((entry.hash == hash) && entry.key.equals(key)) {      V old=entry.value;      entry.value=value;      return old;    }  }  addEntry(hash,key,value,index);  return null;}  }
class C{  @Override public UtilityTable queryUtil(Query.UtilQuery query){  try {    LikelihoodWeighting isquery=new LikelihoodWeighting(query,nbSamples,maxSamplingTime);    List<Sample> samples=isquery.getSamples();    UtilityTable utilityTable=new UtilityTable();    samples.stream().forEach(null);    return utilityTable;  } catch (  Exception e) {    e.printStackTrace();    return new UtilityTable();  }}  }
class C{  public FWTest(String name){  super(name);}  }
class C{  public SparseBooleanArray(int initialCapacity){  initialCapacity=ArrayUtils.idealIntArraySize(initialCapacity);  mKeys=new int[initialCapacity];  mValues=new boolean[initialCapacity];  mSize=0;}  }
class C{  private void correctPrimaryJuxtapos(int primaryCode,int[] codes){  if (codes.length < 2)   return;  if (codes[0] > 0 && codes[1] > 0 && codes[0] != primaryCode && codes[1] == primaryCode) {    codes[1]=codes[0];    codes[0]=primaryCode;  }}  }
class C{  public static void addInfo(String format,Resource res,Struct info){  if ("jpg".equalsIgnoreCase(format))   jpg(res,info); else   if ("tiff".equalsIgnoreCase(format))   tiff(res,info);}  }
class C{  public static boolean resetAndTest(RegExp regexp,String input){  regexp.setLastIndex(0);  return regexp.test(input);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public long magicNumber(){  return this.data.readULong(Offset.magicNumber.offset);}  }
class C{  public static void passedLine(String className,String methodName,int line){  ExecutionTracer tracer=getExecutionTracer();  if (tracer.disabled)   return;  if (isThreadNeqCurrentThread())   return;  checkTimeout();  tracer.trace.linePassed(className,methodName,line);}  }
class C{  @Override public void close() throws java.io.IOException {  flushBase64();  super.close();  buffer=null;  out=null;}  }
class C{  public ComponentTime(long tstamp){  timestamp=tstamp;}  }
class C{  public static UUID parseUuid(byte[] atom){  Pair<UUID,byte[]> parsedAtom=parsePsshAtom(atom);  if (parsedAtom == null) {    return null;  }  return parsedAtom.first;}  }
class C{  protected void initLoadBalancer(boolean isHttps){  String baseServiceURLTemplate=new String();  if (isHttps) {    baseServiceURLTemplate="https://%1$s:4443";  } else {    baseServiceURLTemplate="http://%1$s:8080";  }  String hostName=System.getenv("APP_HOST_NAMES");  String hostNames[]=hostName.split(",");  baseUrls=new LinkedList<String>();  for (  String h : hostNames) {    String disp=String.format(baseServiceURLTemplate,h);    baseUrls.add(disp);  }}  }
class C{  public WmsLayerConfig(String serviceAddress,String layerNames){  this.serviceAddress=serviceAddress;  this.layerNames=layerNames;}  }
class C{  @Override public final void write(int b){  if (this.ignoreWrites)   return;  checkIfWritable();  ensureCapacity(1);  buffer.put((byte)b);}  }
class C{  public boolean hasRevision(){  return hasExtension(Revision.class);}  }
class C{  protected SAXBuilder createBuilder(){  final SAXBuilder builder=new SAXBuilder();  builder.setFeature("http://apache.org/xml/features/disallow-doctype-decl",true);  return builder;}  }
class C{  public static boolean checkHighAvailabilityChanged(VirtualPool vPool,VirtualPoolHighAvailabilityParam haParam){  if (haParam == null) {    _log.info("No HA changes");    return false;  }  if (VirtualPool.vPoolSpecifiesHighAvailability(vPool)) {    _log.info("Virtual pool specifies HA");    if ((haParam.getType() == null) && (haParam.getHaVirtualArrayVirtualPool() == null)) {      _log.info("Removing HA");      return true;    }    _log.info("HA type is {}",haParam.getType());    if ((haParam.getType() != null) && (!haParam.getType().equals(vPool.getHighAvailability()))) {      _log.info("HA type changed");      return true;    }    if (haParam.getHaVirtualArrayVirtualPool() != null) {      _log.info("Update specifies HA virtual array/pool changes.");      String haVarray=null;      String haVpool=null;      String haVarrayConnectedToRp=vPool.getHaVarrayConnectedToRp();      StringMap haVarrayVpoolMap=vPool.getHaVarrayVpoolMap();      if (haVarrayVpoolMap != null && !haVarrayVpoolMap.isEmpty()) {        haVarray=haVarrayVpoolMap.keySet().iterator().next();        haVpool=haVarrayVpoolMap.get(haVarray);        if (haVpool.equals(NullColumnValueGetter.getNullURI().toString())) {          haVpool=null;        }      }      _log.info("Current vArray is {}",haVarray);      _log.info("Current vPool is {}",haVpool);      _log.info("HA vArray set as {}",haVarrayConnectedToRp);      if ((haParam.getHaVirtualArrayVirtualPool().getVirtualArray() == null) && (haParam.getHaVirtualArrayVirtualPool().getVirtualPool() == null) && ((haVarray != null || haVpool != null))) {        _log.info("Removing HA vArray/vPool params");        return true;      }      _log.info("Update vArray is {}",haParam.getHaVirtualArrayVirtualPool().getVirtualArray());      if ((haParam.getHaVirtualArrayVirtualPool().getVirtualArray() != null) && (!String.valueOf(haParam.getHaVirtualArrayVirtualPool().getVirtualArray()).equals(haVarray))) {        _log.info("Changing vArray");        return true;      }      _log.info("Update vPool is {}",haParam.getHaVirtualArrayVirtualPool().getVirtualPool());      if ((haParam.getHaVirtualArrayVirtualPool().getVirtualPool() != null) && (!(String.valueOf(haParam.getHaVirtualArrayVirtualPool().getVirtualPool()).isEmpty() && haVpool == null) && !String.valueOf(haParam.getHaVirtualArrayVirtualPool().getVirtualPool()).equals(haVpool))) {        _log.info("Changing vPool");        return true;      }      if ((haVarrayConnectedToRp != null && !haVarrayConnectedToRp.isEmpty() && !haParam.getHaVirtualArrayVirtualPool().getActiveProtectionAtHASite()) || ((haVarrayConnectedToRp == null || haVarrayConnectedToRp.isEmpty()) && haParam.getHaVirtualArrayVirtualPool().getActiveProtectionAtHASite())) {        return true;      }    }  } else   if (haParam.getType() != null) {    _log.info("Adding HA type {}",haParam.getType());    return true;  }  return false;}  }
class C{  public JSONObject(Map<String,Object> map){  this.map=new HashMap<String,Object>();  if (map != null) {    Iterator<Entry<String,Object>> i=map.entrySet().iterator();    while (i.hasNext()) {      Entry<String,Object> entry=i.next();      Object value=entry.getValue();      if (value != null) {        this.map.put(entry.getKey(),wrap(value));      }    }  }}  }
class C{  private void checkForInterruption() throws InterruptedException {  if (Thread.interrupted()) {    StatusReport report=report();    String msg="Interrupting dwca generator. Last status: " + report.getState();    log.info(msg);    throw new InterruptedException(msg);  }}  }
class C{  @Override public void addEventListener3(IGroupFileTransferListener listener) throws RemoteException {  if (listener == null) {    throw new ServerApiIllegalArgumentException("listener must not be null!");  }  try {synchronized (mLock) {      mGroupFileTransferBroadcaster.addGroupFileTransferListener(listener);    }  } catch (  ServerApiBaseException e) {    if (!e.shouldNotBeLogged()) {      sLogger.error(ExceptionUtil.getFullStackTrace(e));    }    throw e;  }catch (  Exception e) {    sLogger.error(ExceptionUtil.getFullStackTrace(e));    throw new ServerApiGenericException(e);  }}  }
class C{  @Override public void finish(){  try {    log.info("Closing UrbanSimZoneCSVWriterV2 ...");    assert (zoneWriter != null);    zoneWriter.flush();    zoneWriter.close();    log.info("Copying " + matsim4opusTempDirectory + FILE_NAME+ " to "+ matsimOutputDirectory+ FILE_NAME);    IOUtils.copyFile(new File(matsim4opusTempDirectory + FILE_NAME),new File(matsimOutputDirectory + FILE_NAME));    log.info("... done!");  } catch (  IOException e) {    e.printStackTrace();    throw new RuntimeException("io did not work");  }}  }
class C{  public static int validateCompilationUnits(FileSpec fileSpec,SourceList sourceList,SourcePath sourcePath,ResourceBundlePath bundlePath,ResourceContainer resources,CompilerSwcContext swcContext,Map<String,Source> includedClasses,ContextStatics perCompileData,Configuration configuration){  final LocalizationManager l10n=ThreadLocalToolkit.getLocalizationManager();  final boolean strict=configuration.getCompilerConfiguration().strict();  final Map<String,Source> updated=new HashMap<String,Source>(), updatedWithStableSignature=new HashMap<String,Source>(), affected=new HashMap<String,Source>();  final Map<QName,Source> deleted=new HashMap<QName,Source>();  final Map<String,String> reasons=new HashMap<String,String>();  final Map<QName,Source> qNames=new HashMap<QName,Source>();  final Set<String> includeUpdated=new HashSet<String>(), resourceDelegates=new HashSet<String>(), namespaces=new HashSet<String>();  final Map<QName,Map<String,Source>> dependents=new HashMap<QName,Map<String,Source>>();  Set<Source> swcSources=swcContext.cachedSources();  Context ascContext=null;  if (perCompileData != null) {    ascContext=new Context(perCompileData);  }  final Set<Source> sources=new HashSet<Source>();{    sources.addAll(swcSources);    if (fileSpec != null)     sources.addAll(fileSpec.sources());    if (sourceList != null)     sources.addAll(sourceList.sources().values());    if (sourcePath != null)     sources.addAll(sourcePath.sources().values());    if (bundlePath != null)     sources.addAll(bundlePath.sources().values());    if (includedClasses != null)     sources.addAll(includedClasses.values());  }  for (  Source source : sources) {    if (source.getName() == null) {      continue;    }    CompilationUnit u=source.getCompilationUnit();    if (u == null) {      continue;    }    for (Iterator j=source.getUpdatedFileIncludes(); j != null && j.hasNext(); ) {      VirtualFile f=(VirtualFile)j.next();      includeUpdated.add(f.getNameForReporting());    }    for (    QName qName : u.topLevelDefinitions) {      qNames.put(qName,source);      dependents.put(qName,new HashMap<String,Source>());    }  }  for (  Source source : resources.sources().values()) {    if (source.getName() == null) {      continue;    }    CompilationUnit u=source.getCompilationUnit();    if (u == null) {      continue;    }    for (    QName qName : u.topLevelDefinitions) {      qNames.put(qName,source);    }  }  for (  Source source : sources) {    if (source == null)     continue;    CompilationUnit u=source.getCompilationUnit();    if (u == null)     continue;    addDependents(source,u.inheritance,dependents);    addDependents(source,u.namespaces,dependents);    addDependents(source,u.types,dependents);    addDependents(source,u.expressions,dependents);  }  Logger logger=ThreadLocalToolkit.getLogger();  for (  Source source : resources.sources().values()) {    CompilationUnit u=source.getCompilationUnit();    if (source.hasError() || (u != null && !u.isDone() && !u.hasTypeInfo) || source.isUpdated()|| (u != null && u.hasAssets() && u.getAssets().isUpdated())) {      resourceDelegates.add(source.getNameForReporting());      source.removeCompilationUnit();    }  }  reportObsoletedSwcSources(swcContext,l10n,logger);  reportShadowedSwcSources(swcSources,sourceList,sourcePath,resources,l10n,logger,sources);  for (Iterator<Source> iterator=sources.iterator(); iterator.hasNext(); ) {    Source s=iterator.next();    CompilationUnit u=s.getCompilationUnit();    if (s.hasError() || (!s.isInternal() && (u != null && !u.isDone() && !u.hasTypeInfo)) || resourceDelegates.contains(s.getName())) {      affected.put(s.getName(),s);      reasons.put(s.getName(),l10n.getLocalizedTextString(new NotFullyCompiled()));      iterator.remove();    } else     if (!s.exists()) {      updated.put(s.getName(),s);      reasons.put(s.getName(),l10n.getLocalizedTextString(new SourceNoLongerExists()));      if (u != null) {        for (        QName qName : u.topLevelDefinitions) {          namespaces.add(qName.toString());          deleted.put(qName,s);        }      }      iterator.remove();    } else     if (s.isUpdated()) {      boolean signatureIsStable=false;      if ((u != null) && (!configuration.getCompilerConfiguration().getDisableIncrementalOptimizations()) && (!s.getMimeType().equals(MimeMappings.MXML))) {        final Long persistedCRC=u.getSignatureChecksum();        if (persistedCRC != null) {          assert (s.getMimeType().equals(MimeMappings.ABC) || s.getMimeType().equals(MimeMappings.AS));          final Long currentCRC=computeSignatureChecksum(configuration,s);          signatureIsStable=(currentCRC != null) && (persistedCRC.compareTo(currentCRC) == 0);        }      }      if (signatureIsStable) {        updatedWithStableSignature.put(s.getName(),s);      } else {        updated.put(s.getName(),s);      }      reasons.put(s.getName(),l10n.getLocalizedTextString(new SourceFileUpdated()));      iterator.remove();    } else     if (u != null && u.hasAssets() && u.getAssets().isUpdated()) {      updated.put(s.getName(),s);      reasons.put(s.getName(),l10n.getLocalizedTextString(new AssetUpdated()));      iterator.remove();    }  }  for (  Source source : deleted.values()) {    if (source.isSourcePathOwner()) {      SourcePath sp=(SourcePath)source.getOwner();      sp.removeSource(source);      if (ascContext != null) {        CompilationUnit u=source.getCompilationUnit();        if (u != null) {          for (          QName defName : u.topLevelDefinitions) {            ascContext.removeUserDefined(defName.toString());          }        }      }    }  }  for (Iterator<Source> iterator=sources.iterator(); iterator.hasNext(); ) {    Source s=iterator.next();    if (s.isSourcePathOwner() || s.isResourceBundlePathOwner()) {      SourcePathBase sp=(SourcePathBase)s.getOwner();      if (!sp.checkPreference(s)) {        affected.put(s.getName(),s);        reasons.put(s.getName(),l10n.getLocalizedTextString(new NotSourcePathFirstPreference()));        iterator.remove();      }    }  }  for (Iterator<Source> iterator=sources.iterator(); iterator.hasNext(); ) {    Source s=iterator.next();    CompilationUnit u=s.getCompilationUnit();    if (u == null)     continue;    Set<Name> dependencies=new HashSet<Name>();    dependencies.addAll(u.inheritance);    dependencies.addAll(u.namespaces);    dependencies.addAll(u.expressions);    dependencies.addAll(u.types);    dependencies.add(new QName("","Namespace"));    boolean valid=true;    for (    Name dependentName : dependencies) {      QName qName=toQName(dependentName);      if (qName != null) {        Source dependentSource=qNames.get(qName);        if (dependentSource != null) {          CompilationUnit dependentCompilationUnit=dependentSource.getCompilationUnit();          if (u.hasTypeInfo && !dependentCompilationUnit.hasTypeInfo && !dependentSource.isInternal()) {            reasons.put(s.getName(),l10n.getLocalizedTextString(new DependencyNotCached(dependentName.toString())));            valid=false;          } else {            if (!updatedWithStableSignature.containsKey(dependentSource.getName()) && (ascContext != null) && u.hasTypeInfo&& dependentCompilationUnit.hasTypeInfo&& referencesDifferentSlots(ascContext,u.typeInfo,qName,dependentCompilationUnit.typeInfo)) {              reasons.put(s.getName(),l10n.getLocalizedTextString(new DependencyUpdated(dependentName.toString())));              valid=false;            }          }        } else         if (u.hasTypeInfo) {          reasons.put(s.getName(),l10n.getLocalizedTextString(new DependencyNotCached(dependentName.toString())));          valid=false;        }      }      if (!valid) {        affected.put(s.getName(),s);        iterator.remove();        break;      }    }    if (!swcSources.contains(s)) {      valid=valid && strict;      for (Iterator k=u.importPackageStatements.iterator(); valid && k.hasNext(); ) {        String packageName=(String)k.next();        if (!hasPackage(sourcePath,swcContext,packageName)) {          affected.put(s.getName(),s);          reasons.put(s.getName(),l10n.getLocalizedTextString(new InvalidImportStatement(packageName)));          iterator.remove();          namespaces.add(packageName);          valid=false;          break;        }      }      for (Iterator k=u.importDefinitionStatements.iterator(); valid && k.hasNext(); ) {        QName defName=(QName)k.next();        if (!hasDefinition(sourcePath,swcContext,defName)) {          affected.put(s.getName(),s);          reasons.put(s.getName(),l10n.getLocalizedTextString(new InvalidImportStatement(defName.toString())));          iterator.remove();          namespaces.add(defName.toString());          valid=false;          break;        }      }    }  }  if (strict) {    Map<String,Source> updatedAndAffected=new HashMap<String,Source>(updated);    updatedAndAffected.putAll(affected);    for (    Source source : updatedAndAffected.values()) {      dependentFileModified(source,dependents,updated,affected,reasons,sources);    }  }  for (Iterator<String> i=includeUpdated.iterator(); i.hasNext(); ) {    ThreadLocalToolkit.getLogger().includedFileUpdated(i.next());  }  int affectedCount=affected.size();  logReasonAndRemoveCompilationUnit(affected,reasons,includeUpdated,swcContext);  logReasonAndRemoveCompilationUnit(updated,reasons,includeUpdated,swcContext);  seedUserDefined(updatedWithStableSignature.values(),ascContext,perCompileData);  logReasonAndRemoveCompilationUnit(updatedWithStableSignature,reasons,includeUpdated,swcContext);  for (  Source s : resources.sources().values()) {    if (s != null) {      String name=s.getNameForReporting();      if (affected.containsKey(name) || updated.containsKey(name)) {        s.removeCompilationUnit();      }    }  }  affected.clear();  for (Iterator<Source> iterator=sources.iterator(); iterator.hasNext(); ) {    Source s=iterator.next();    CompilationUnit u=s.getCompilationUnit();    if (u == null)     continue;    for (    Entry<MultiName,QName> entry : u.inheritanceHistory.entrySet()) {      MultiName multiName=entry.getKey();      QName qName=entry.getValue();      try {        if (!validateMultiName(multiName,qName,sourcePath)) {          affected.put(s.getName(),s);          reasons.put(s.getName(),l10n.getLocalizedTextString(new MultiNameMeaningChanged(multiName,qName)));          iterator.remove();        }      } catch (      CompilerException ex) {        affected.put(s.getName(),s);        reasons.put(s.getName(),ex.getMessage());        iterator.remove();      }    }  }  affectedCount+=affected.size();  logReasonAndRemoveCompilationUnit(affected,reasons,includeUpdated,swcContext);  for (  Source s : resources.sources().values()) {    if (s != null) {      String name=s.getNameForReporting();      if (affected.containsKey(name)) {        s.removeCompilationUnit();      }    }  }  resources.refresh();  if (perCompileData != null) {    for (    String ns : namespaces) {      perCompileData.removeNamespace(ns);    }  }  final int updateCount=updated.size() + updatedWithStableSignature.size();  if (updateCount + affectedCount > 0) {    ThreadLocalToolkit.log(new FilesChangedAffected(updateCount,affectedCount));  }  seedUserDefined(sources,ascContext,perCompileData);  if (configuration.getBenchmarkCompilerDetails() > 0 && ThreadLocalToolkit.getBenchmark() != null) {    ThreadLocalToolkit.getBenchmark().benchmark2("validateCompilationUnits");  }  int count=updateCount + affectedCount;  return count;}  }
class C{  public static byte[] generatePrivateID(AsymmetricCipherKeyPair id){  return encodeDHPrivateKey((DHPrivateKeyParameters)id.getPrivate());}  }
class C{  public FloatConstantOperand(float v,Offset i){  value=v;  offset=i;}  }
class C{  public List<JCTree> transformModuleDescriptor(Tree.ModuleDescriptor module){  at(null);  ClassDefinitionBuilder builder=ClassDefinitionBuilder.klass(this,Naming.MODULE_DESCRIPTOR_CLASS_NAME,null,false);  builder.modifiers(Flags.FINAL).annotations(makeAtModule(module));  builder.getInitBuilder().modifiers(Flags.PRIVATE);  builder.annotations(expressionGen().transformAnnotations(OutputElement.TYPE,module));  for (  Tree.ImportModule imported : module.getImportModuleList().getImportModules()) {    if (!isForBackend(imported.getAnnotationList(),Backend.Java,imported.getUnit())) {      continue;    }    String quotedName;    if (imported.getImportPath() != null) {      StringBuilder sb=new StringBuilder();      for (      Tree.Identifier part : imported.getImportPath().getIdentifiers()) {        sb.append(part.getText()).append('$');      }      quotedName=sb.substring(0,sb.length() - 1);    } else     if (imported.getQuotedLiteral() != null) {      quotedName=imported.getQuotedLiteral().getText();      quotedName=quotedName.substring(1,quotedName.length() - 1);      quotedName=quotedName.replace('.','$');    } else {      throw new BugException(imported,"unhandled module import");    }    List<JCAnnotation> importAnnotations=expressionGen().transformAnnotations(OutputElement.FIELD,imported);    JCModifiers mods=make().Modifiers(Flags.PUBLIC | Flags.STATIC | Flags.FINAL,importAnnotations);    Name fieldName=names().fromString(quotedName);    builder.defs(List.<JCTree>of(make().VarDef(mods,fieldName,make().Type(syms().stringType),makeNull())));  }  return builder.build();}  }
class C{  public static void registerConfig(){  Config.registerSelf(Log.class);  if (loggerHandler != null) {    loggerHandler.setFormatter(logFormatter=new LogThreadFormatter());    logFormatter.setSquashExceptions(!Config.parms.getBoolean("st"));    try {      loggerLevel=Level.parse(Config.parms.getString("vo"));      logger.setLevel(loggerLevel);      loggerHandler.setLevel(loggerLevel);    } catch (    IllegalArgumentException e) {      Config.logger.log(Level.WARNING,"-vo is out of valid range",e);    }  }}  }
class C{  public void insertColor(String accountName,String accountType,int displayColor,int colorKey){  mColorKeyMap.put(createKey(accountName,accountType,displayColor),colorKey);  String key=createKey(accountName,accountType);  ArrayList<Integer> colorPalette;  if ((colorPalette=mColorPaletteMap.get(key)) == null) {    colorPalette=new ArrayList<Integer>();  }  colorPalette.add(displayColor);  mColorPaletteMap.put(key,colorPalette);}  }
class C{  @LargeTest public void testDownloadNoWifi() throws Exception {  long timeout=60 * 1000;  int fileSize=1024;  byte[] blobData=generateData(fileSize,DataType.TEXT);  setWiFiStateOn(false);  enqueueResponse(buildResponse(HTTP_OK,blobData));  try {    Uri uri=getServerUri(DEFAULT_FILENAME);    Request request=new Request(uri);    request.setAllowedNetworkTypes(Request.NETWORK_WIFI);    long dlRequest=mDownloadManager.enqueue(request);    boolean success=waitForDownloadOrTimeoutNoThrow(dlRequest,WAIT_FOR_DOWNLOAD_POLL_TIME,timeout);    assertFalse("Download proceeded without Wifi connection!",success);    setWiFiStateOn(true);    waitForDownloadOrTimeout(dlRequest);    assertEquals(1,mReceiver.numDownloadsCompleted());  }  finally {    setWiFiStateOn(true);  }}  }
class C{  public void updateObject(int columnIndex,Object x,int scale) throws SQLException {  throw new NotUpdatable();}  }
class C{  private void updateParameterMapSafe(ServiceInstance si,HashMap<String,String> changedParameters){  try {    si.setInstanceParameters(changedParameters);    em.persist(si);  } catch (  BadResultException bre) {    logger.warn("Failure during storing of instance parameters for service instance '{}' with message '{}'",Long.valueOf(si.getTkey()),bre.getMessage());  }}  }
class C{  public void testConstructor1(){  assertEquals(SIZE,new LinkedBlockingDeque(SIZE).remainingCapacity());  assertEquals(Integer.MAX_VALUE,new LinkedBlockingDeque().remainingCapacity());}  }
class C{  protected N4ClassExpressionImpl(){  super();}  }
class C{  @Override public IMessage onMessage(MessageLockSetLockCode message,MessageContext ctx){  final EntityPlayerMP player=ctx.getServerHandler().playerEntity;  final World world=player.worldObj;  final IThreadListener mainThread=(WorldServer)world;  mainThread.addScheduledTask(null);  return null;}  }
class C{  public static UnionFind make(StaticDBIDs ids){  if (ids instanceof DBIDRange) {    return new WeightedQuickUnionRangeDBIDs((DBIDRange)ids);  }  return new WeightedQuickUnionStaticDBIDs(ids);}  }
class C{  public Buscar(){}  }
class C{  public Zone(Name zone,Record[] records) throws IOException {  data=new TreeMap();  if (zone == null)   throw new IllegalArgumentException("no zone name specified");  origin=zone;  for (int i=0; i < records.length; i++)   maybeAddRecord(records[i]);  validate();}  }
class C{  public void addSigner(PrivateKey key,X509Certificate cert,String digestOID,AttributeTable signedAttr,AttributeTable unsignedAttr) throws IllegalArgumentException {  addSigner(key,cert,getEncOID(key,digestOID),digestOID,signedAttr,unsignedAttr);}  }
class C{  public static void assumePOSIX(){  if (!SystemUtils.IS_OS_UNIX) {    System.err.println("system is not POSIX-compliant, skipping test");    Assume.assumeTrue(false);  }}  }
class C{  public void paintTabbedPaneContentBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public TransactionInput addSignedInput(TransactionOutPoint prevOut,Script scriptPubKey,ECKey sigKey,SigHash sigHash,boolean anyoneCanPay) throws ScriptException {  TransactionInput input=new TransactionInput(params,this,new byte[]{},prevOut);  addInput(input);  Sha256Hash hash=hashForSignature(inputs.size() - 1,scriptPubKey,sigHash,anyoneCanPay);  ECKey.ECDSASignature ecSig=sigKey.sign(hash);  TransactionSignature txSig=new TransactionSignature(ecSig,sigHash,anyoneCanPay);  if (scriptPubKey.isSentToRawPubKey())   input.setScriptSig(ScriptBuilder.createInputScript(txSig)); else   if (scriptPubKey.isSentToAddress())   input.setScriptSig(ScriptBuilder.createInputScript(txSig,sigKey)); else   throw new ScriptException("Don't know how to sign for this kind of scriptPubKey: " + scriptPubKey);  return input;}  }
class C{  public boolean currentValueIsApproximately(double value){  return Math.abs(getCurrentValue() - value) <= getRestDisplacementThreshold();}  }
class C{  public static String checkNotEmpty(String string,Object errorMessage){  if (ExoPlayerLibraryInfo.ASSERTIONS_ENABLED && TextUtils.isEmpty(string)) {    throw new IllegalArgumentException(String.valueOf(errorMessage));  }  return string;}  }
class C{  protected String decorate(String aName){  return aName;}  }
class C{  public void generate(BatchEnvironment env,ClassDefinition cdef,File destDir){  RemoteClass remoteClass=RemoteClass.forClass(env,cdef);  if (remoteClass == null)   return;  RMIGenerator gen;  try {    gen=new RMIGenerator(env,cdef,destDir,remoteClass,version);  } catch (  ClassNotFound e) {    env.error(0,"rmic.class.not.found",e.name);    return;  }  gen.generate();}  }
class C{  public void testAuditPageUploadWithOneFile(){  System.out.println("auditPageUploadWithOneFile");  Set<Parameter> paramSet=null;  String file1Name="file://test1";  Map<String,String> fileMap=new HashMap<>();  fileMap.put(file1Name,"");  AuditServiceImpl instance=initialiseAuditService();  Audit auditCreateByAuditCommand=EasyMock.createMock(Audit.class);  AuditCommand mockAuditCommand=EasyMock.createMock(AuditCommand.class);  EasyMock.expect(mockAuditCommand.getAudit()).andReturn(auditCreateByAuditCommand).anyTimes();  EasyMock.replay(mockAuditCommand);  AuditCommandFactory mockAuditCommandFactory=EasyMock.createMock(AuditCommandFactory.class);  EasyMock.expect(mockAuditCommandFactory.create(fileMap,paramSet)).andReturn(mockAuditCommand).anyTimes();  EasyMock.replay(mockAuditCommandFactory);  instance.setAuditCommandFactory(mockAuditCommandFactory);  AuditServiceThreadQueue mockAuditServiceThreadQueue=EasyMock.createMock(AuditServiceThreadQueue.class);  mockAuditServiceThreadQueue.add(instance);  EasyMock.expectLastCall().anyTimes();  mockAuditServiceThreadQueue.addPageUploadAudit(mockAuditCommand);  EasyMock.replay(mockAuditServiceThreadQueue);  instance.setAuditServiceThreadQueue(mockAuditServiceThreadQueue);  Audit result=instance.auditPageUpload(fileMap,paramSet);  assertEquals(auditCreateByAuditCommand,result);  EasyMock.verify(mockAuditServiceThreadQueue);  EasyMock.verify(mockAuditCommand);  EasyMock.verify(mockAuditCommandFactory);}  }
class C{  public NbtTagCompound(String name){  super(name);  this.tags=new HashMap<>(8);}  }
class C{  public static SipResponse create200OkInviteResponse(SipDialogPath dialog,String[] featureTags,String sdp) throws PayloadException {  return create200OkInviteResponse(dialog,featureTags,featureTags,sdp);}  }
class C{  private void sessionRefreshForUAC() throws PayloadException, NetworkException {  try {    if (mLogger.isActivated()) {      mLogger.debug("Session timer refresh (UAC role)");    }    mSession.getDialogPath().incrementCseq();    SipRequest reInvite=SipMessageFactory.createReInvite(mSession.getDialogPath());    mSession.getAuthenticationAgent().setAuthorizationHeader(reInvite);    sendReInvite(reInvite);  } catch (  InvalidArgumentException e) {    throw new PayloadException("Unable to process Session timer refresh (UAC role)!",e);  }catch (  ParseException e) {    throw new PayloadException("Unable to process Session timer refresh (UAC role)!",e);  }}  }
class C{  public ExitItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public void put(String key,InputStream stream,String name,String contentType,boolean autoClose){  if (key != null && stream != null) {    streamParams.put(key,StreamWrapper.newInstance(stream,name,contentType,autoClose));  }}  }
class C{  public ISchedulingRule deleteRule(IResource resource){  if (resource.getType() == IResource.ROOT)   return root;  return factoryFor(resource).deleteRule(resource);}  }
class C{  public Terrain(int width,int depth,float scale){  this(width,depth,new Vec2D(scale,scale));}  }
class C{  public boolean containsKey(String k){  return settings.containsKey(k);}  }
class C{  @Override public boolean isCancelled(){  return cancelled;}  }
class C{  @Override public void onMoved(final ActiveEntity entity,final StendhalRPZone zone,final int oldX,final int oldY,final int newX,final int newY){  if (!(entity instanceof RPEntity)) {    return;  }  final RPEntity rpentity=(RPEntity)entity;  if (targets.contains(rpentity.getID())) {    handleMovement(rpentity);  }}  }
class C{  protected void childJustRemovedHook(Object child,BCSChild bcsc){  BCSSChild bcssc=(BCSSChild)bcsc;  bcssc.cleanupReferences();}  }
class C{  protected boolean isRenderNullValues(){  return true;}  }
class C{  public void connect(String clientHandle,MqttConnectOptions connectOptions,String invocationContext,String activityToken) throws MqttSecurityException, MqttException {  MqttConnection client=getConnection(clientHandle);  client.connect(connectOptions,invocationContext,activityToken);}  }
class C{  public DetectorResult detect() throws NotFoundException, FormatException {  return detect(null);}  }
class C{  private String format(final LogEvent event){  if (null != m_formatter) {    return m_formatter.format(event);  } else {    return event.toString();  }}  }
class C{  public void cancel(){  if (!cancelled) {    cancelled=true;    connection.removePacketCollector(this);  }}  }
class C{  public AppendObjectResult appendObject(AppendObjectRequest appendObjectRequest) throws OSSException, ClientException {  assertParameterNotNull(appendObjectRequest,"appendObjectRequest");  AppendObjectResult result=writeObjectInternal(WriteMode.APPEND,appendObjectRequest,appendObjectResponseParser);  if (appendObjectRequest.getPreviousCRC64() != null && result.getClientCRC64() != null) {    result.setClientCRC64(CRC64.combine(appendObjectRequest.getPreviousCRC64(),result.getClientCRC64(),(result.getNextPosition() - appendObjectRequest.getPosition())));  }  return result;}  }
class C{  public int compareTo(EventId eventId){  MySQLEventId other=(MySQLEventId)eventId;  return compareTo(other);}  }
class C{  public SimpleParserException(int line,int column,String message){  super(formatMessage(line,column,message));}  }
class C{  protected Transferable createTransferable(JComponent c){  if (c instanceof JTable) {    JTable table=(JTable)c;    int[] rows;    int[] cols;    if (!table.getRowSelectionAllowed() && !table.getColumnSelectionAllowed()) {      return null;    }    if (!table.getRowSelectionAllowed()) {      int rowCount=table.getRowCount();      rows=new int[rowCount];      for (int counter=0; counter < rowCount; counter++) {        rows[counter]=counter;      }    } else {      rows=table.getSelectedRows();    }    if (!table.getColumnSelectionAllowed()) {      int colCount=table.getColumnCount();      cols=new int[colCount];      for (int counter=0; counter < colCount; counter++) {        cols[counter]=counter;      }    } else {      cols=table.getSelectedColumns();    }    if (rows == null || cols == null || rows.length == 0 || cols.length == 0) {      return null;    }    StringBuffer plainBuf=new StringBuffer();    StringBuffer htmlBuf=new StringBuffer();    htmlBuf.append("<html>\n<body>\n<table>\n");    for (int row=0; row < rows.length; row++) {      htmlBuf.append("<tr>\n");      for (int col=0; col < cols.length; col++) {        Object obj=table.getValueAt(rows[row],cols[col]);        String val=((obj == null) ? "" : obj.toString());        plainBuf.append(val + "\t");        htmlBuf.append("  <td>" + val + "</td>\n");      }      plainBuf.deleteCharAt(plainBuf.length() - 1).append("\n");      htmlBuf.append("</tr>\n");    }    plainBuf.deleteCharAt(plainBuf.length() - 1);    htmlBuf.append("</table>\n</body>\n</html>");    return new BasicTransferable(plainBuf.toString(),htmlBuf.toString());  }  return null;}  }
class C{  public BERSet(ASN1Encodable[] a){  super(a,false);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (tail_1: ");  result.append(tail_1);  result.append(')');  return result.toString();}  }
class C{  @Override public void input(Object input,Network network) throws Exception {  if (!isEnabled()) {    return;  }  log("Input",Level.INFO,input);  URL url=(URL)input;  String domain=url.getPath();  if (domain.length() > 5 && domain.substring(0,5).equals("/view")) {    domain=domain.substring(5,domain.length());  }  processId(domain,this.depth,false,"",network,new HashMap<String,Vertex>());}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean isSecureProcessing(){  return m_isSecureProcessing;}  }
class C{  private boolean verifyColorInput(JComponent input){  JTextField textField=(JTextField)input;  String inputString=textField.getText();  try {    double color;    if (inputString.startsWith("-")) {      color=Double.parseDouble(inputString.substring(1));      color=-color;    } else {      color=Double.parseDouble(inputString);    }  } catch (  NumberFormatException e) {    textField.setForeground(Color.RED);    return false;  }  textField.setForeground(Color.BLACK);  return true;}  }
class C{  public MyTestAttributeDecl(String elementName,String attributeName,String type,String valueDefault,String value,String text){  elName=elementName;  attName=attributeName;  declType=type;  defaultValue=valueDefault;  declValue=value;  txt=text;}  }
class C{  public static double logregularizedGammaP(final double a,final double x){  if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0)|| (x < 0.0)) {    return Double.NaN;  }  if (x == 0.0) {    return Double.NEGATIVE_INFINITY;  }  if (x >= a + 1) {    return Math.log(1.0 - regularizedGammaQ(a,x));  }  double del=1.0 / a;  double sum=del;  for (int n=1; n < Integer.MAX_VALUE; n++) {    del*=x / (a + n);    sum=sum + del;    if (Math.abs(del / sum) < NUM_PRECISION || sum >= Double.POSITIVE_INFINITY) {      break;    }  }  if (Double.isInfinite(sum)) {    return 0;  }  return -x + (a * Math.log(x)) - logGamma(a) + Math.log(sum);}  }
class C{  public void reset(ActionMapping mapping,HttpServletRequest request){  super.reset(mapping,request);}  }
class C{  public boolean hasProtocolName(String url){  int index=url.indexOf(':');  if (index <= 0) {    return false;  }  for (int i=0; i < index; i++) {    char c=url.charAt(i);    if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || (c == '-')) {      continue;    }    return false;  }  return true;}  }
class C{  private static String encrypt(String s,String method){  try {    MessageDigest digest=MessageDigest.getInstance(method);    digest.update(s.getBytes());    return new String(digest.digest());  } catch (  NoSuchAlgorithmException e) {    e.printStackTrace();  }  return "";}  }
class C{  protected int[] parseInts(String intArrayString){  String[] arrayOfNumbers=intArrayString.split("\\s");  int[] ints=new int[arrayOfNumbers.length];  int i=0;  for (  String s : arrayOfNumbers) {    if (!WWUtil.isEmpty(s))     ints[i++]=Integer.parseInt(s);  }  return ints;}  }
class C{  @Override public boolean hasWindowFocus(){  return this.isEnabled();}  }
class C{  public Quaterniond fromAxisAngleDeg(double axisX,double axisY,double axisZ,double angle){  return fromAxisAngleRad(axisX,axisY,axisZ,Math.toRadians(angle));}  }
class C{  @Override protected void onFocusChanged(boolean focused,int direction,Rect previouslyFocusedRect){  super.onFocusChanged(focused,direction,previouslyFocusedRect);  showErrorIconHax(lastErrorIcon);}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case NODE_ID:    return isSetNodeId();case DOMAIN_ID:  return isSetDomainId();case HOSTNAME:return isSetHostname();case PORT:return isSetPort();}throw new IllegalStateException();}  }
class C{  public void animatePeek(int duration){  peekView.setAlpha(1);  ObjectAnimator animatorLayoutAlpha=ObjectAnimator.ofFloat(peekLayout,"alpha",1);  animatorLayoutAlpha.setInterpolator(new OvershootInterpolator(1.2f));  animatorLayoutAlpha.setDuration(duration);  ObjectAnimator animatorScaleX=ObjectAnimator.ofFloat(peekView,"scaleX",1);  animatorScaleX.setDuration(duration);  ObjectAnimator animatorScaleY=ObjectAnimator.ofFloat(peekView,"scaleY",1);  animatorScaleY.setDuration(duration);  AnimatorSet animatorSet=new AnimatorSet();  animatorSet.setInterpolator(new OvershootInterpolator(1.2f));  animatorSet.play(animatorScaleX).with(animatorScaleY);  animatorSet.start();  animatorLayoutAlpha.start();}  }
class C{  public static ResultCollector<?,?> executeFunction(final Function function,Object args,final Set<DistributedMember> targetMembers){  Execution execution=null;  if (args != null) {    execution=FunctionService.onMembers(targetMembers).withArgs(args);  } else {    execution=FunctionService.onMembers(targetMembers);  }  ((AbstractExecution)execution).setIgnoreDepartedMembers(true);  return execution.execute(function);}  }
class C{  public String toFriendlyString(){  return FRIENDLY_FORMAT.format(this).toString();}  }
class C{  public Object putProperty(String comment,String property,String value){  Object old=super.put(property,value);  if (old == null) {    keys.addElement(property);  }  return old;}  }
class C{  public Entry<V> next(){  if (!hasNext)   throw new NoSuchElementException();  if (!valid)   throw new IllegalStateException("#iterator() cannot be used nested.");  long[] keyTable=map.keyTable;  if (nextIndex == INDEX_ZERO) {    entry.key=0;    entry.value=map.zeroValue;  } else {    entry.key=keyTable[nextIndex];    entry.value=map.valueTable[nextIndex];  }  currentIndex=nextIndex;  findNextIndex();  return entry;}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  MobileUtil.createLoginPage(request,response,this,null,null);}  }
class C{  public BuilderForDnsDiscoverer externalGossipPort(int externalGossipPort){  super.externalGossipPort=externalGossipPort;  return this;}  }
class C{  public void fill(Graphics2D g){  checkDrawingMode(g);}  }
class C{  @DSSink({DSSinkKind.PHONE_CONNECTION}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:26.752 -0500",hash_original_method="408D11B7A3DFC98C0728A70ED62F0EEA",hash_generated_method="B88DF5F3CAE8626407681D6E71BCC297") public void reqSetReconnectIntent(PendingIntent intent){  Message response=sendMessageSynchronously(REQ_SET_RECONNECT_INTENT,intent);  if (DBG)   log("reqSetReconnectIntent");}  }
class C{  public void start(Object... arguments){  this.args=arguments;  this.start();}  }
class C{  public boolean wasDisposedDueToRotation(){  return disposedDueToRotation;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:56.649 -0500",hash_original_method="DD9AA0788424353442B0CFE218D97412",hash_generated_method="D16B9D80B8A3FF76F7E29D31CF350BD3") public String encodeBody(){  StringBuffer retval=new StringBuffer();  if (address.getAddressType() == AddressImpl.ADDRESS_SPEC) {    retval.append(LESS_THAN);  }  retval.append(address.encode());  if (address.getAddressType() == AddressImpl.ADDRESS_SPEC) {    retval.append(GREATER_THAN);  }  if (!parameters.isEmpty())   retval.append(SEMICOLON + this.parameters.encode());  return retval.toString();}  }
class C{  public static void reload(){  LOG.trace("reload()");  initInstance();}  }
class C{  @Override public void sessionDestroyed(HttpSessionEvent hse){  if (LOGGER.isLoggable(Level.FINEST)) {    LOGGER.log(Level.FINEST,"Cleaning up session for @ViewScoped beans");  }  if (contextManager != null) {    contextManager.sessionDestroyed(hse);  }  HttpSession session=hse.getSession();  Map<String,Object> activeViewMaps=(Map<String,Object>)session.getAttribute(ACTIVE_VIEW_MAPS);  if (activeViewMaps != null) {    Iterator<Object> activeViewMapsIterator=activeViewMaps.values().iterator();    ApplicationAssociate applicationAssociate=ApplicationAssociate.getInstance(hse.getSession().getServletContext());    while (activeViewMapsIterator.hasNext()) {      Map<String,Object> viewMap=(Map<String,Object>)activeViewMapsIterator.next();      destroyBeans(applicationAssociate,viewMap);    }    activeViewMaps.clear();    session.removeAttribute(ACTIVE_VIEW_MAPS);    session.removeAttribute(ACTIVE_VIEW_MAPS_SIZE);  }}  }
class C{  public void incrementCounts(double[][][] counts,List<TransitionState> fullViterbiStateSeq){  for (int i=0; i < fullViterbiStateSeq.size(); ++i) {    TransitionState currTs=fullViterbiStateSeq.get(i);    TransitionStateType currType=currTs.getType();    if (currType == TransitionStateType.TMPL) {      int language=currTs.getLanguageIndex();      if (language >= 0) {        int lmChar=currTs.getLmCharIndex();        int glyph=glyphIndex(currTs.getGlyphChar());        counts[language][lmChar][glyph]+=1;      }    } else     if (currType == TransitionStateType.RMRGN_HPHN_INIT) {      int language=currTs.getLanguageIndex();      if (language >= 0) {        GlyphChar currGlyphChar=currTs.getGlyphChar();        if (currGlyphChar.templateCharIndex == spaceCharIndex) {          int glyph=glyphIndex(currGlyphChar);          counts[language][hyphenCharIndex][glyph]+=1;        }      }    }  }}  }
class C{  public static PrivateKey parseWIF(String serialized) throws HyperLedgerException {  byte[] store=ByteUtils.fromBase58(serialized);  return parseBytesWIF(store);}  }
class C{  public void close(){  this.sourceRanges=null;  this.parameterNames=null;  this.parametersRanges=null;  this.finalParameters=null;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case STORE_NAME:  return isSetStoreName();case KEY:return isSetKey();case VERSIONED_VALUE:return isSetVersionedValue();case VALUE:return isSetValue();}throw new IllegalStateException();}  }
class C{  private boolean isNewTransactionHolder(){  return newTransactionHolder;}  }
class C{  public boolean equals(Area other){  if (other == this) {    return true;  }  if (other == null) {    return false;  }  Vector c=new AreaOp.XorOp().calculate(this.curves,other.curves);  return c.isEmpty();}  }
class C{  public static FieldAnnotation fromReferencedField(DismantleBytecode visitor){  String className=visitor.getDottedClassConstantOperand();  return new FieldAnnotation(className,visitor.getNameConstantOperand(),visitor.getSigConstantOperand(),visitor.getRefFieldIsStatic());}  }
class C{  public MemStore(final DirectBufferPool pool){  this(pool,Integer.MAX_VALUE);}  }
class C{  public void execute(){  IKnowledge knowledge=(IKnowledge)getParams().get("knowledge",new Knowledge2());  String targetName=getParams().getString("targetName",null);  Object model=getDataModel();  if (model == null && getSourceGraph() != null) {    model=getSourceGraph();  }  if (model == null) {    throw new RuntimeException("Data source is unspecified. You may need to double click all your data boxes, \n" + "then click Save, and then right click on them and select Propagate Downstream. \n" + "The issue is that we use a seed to simulate from IM's, so your data is not saved to \n"+ "file when you save the session. It can, however, be recreated from the saved seed.");  }  Parameters params=getParams();  Node target=null;  if (model instanceof Graph) {    GraphScore gesScore=new GraphScore((Graph)model);    target=gesScore.getVariable(targetName);    fgs=new FgsMb2(gesScore);    fgs.setKnowledge((IKnowledge)getParams().get("knowledge",new Knowledge2()));    fgs.setNumPatternsToStore(params.getInt("numPatternsToSave",1));    fgs.setVerbose(true);  } else   if (model instanceof DataSet) {    DataSet dataSet=(DataSet)model;    if (dataSet.isContinuous()) {      SemBicScore score=new SemBicScore(new CovarianceMatrixOnTheFly((DataSet)model));      target=score.getVariable(targetName);      score.setPenaltyDiscount(params.getDouble("penaltyDiscount",4));      fgs=new FgsMb2(score);    } else     if (dataSet.isDiscrete()) {      double samplePrior=1;      double structurePrior=1;      BDeuScore score=new BDeuScore(dataSet);      score.setSamplePrior(samplePrior);      score.setStructurePrior(structurePrior);      target=score.getVariable(targetName);      fgs=new FgsMb2(score);    } else {      throw new IllegalStateException("Data set must either be continuous or discrete.");    }  } else   if (model instanceof ICovarianceMatrix) {    SemBicScore gesScore=new SemBicScore((ICovarianceMatrix)model);    gesScore.setPenaltyDiscount(params.getDouble("alpha",0.001));    gesScore.setPenaltyDiscount(params.getDouble("penaltyDiscount",4));    target=gesScore.getVariable(targetName);    fgs=new FgsMb2(gesScore);  } else   if (model instanceof DataModelList) {    DataModelList list=(DataModelList)model;    for (    DataModel dataModel : list) {      if (!(dataModel instanceof DataSet || dataModel instanceof ICovarianceMatrix)) {        throw new IllegalArgumentException("Need a combination of all continuous data sets or " + "covariance matrices, or else all discrete data sets, or else a single initialGraph.");      }    }    if (allContinuous(list)) {      double penalty=getParams().getDouble("penaltyDiscount",4);      if (params.getBoolean("firstNontriangular",false)) {        SemBicScoreImages fgsScore=new SemBicScoreImages(list);        fgsScore.setPenaltyDiscount(penalty);        target=fgsScore.getVariable(targetName);        fgs=new FgsMb2(fgsScore);      } else {        SemBicScoreImages fgsScore=new SemBicScoreImages(list);        fgsScore.setPenaltyDiscount(penalty);        target=fgsScore.getVariable(targetName);        fgs=new FgsMb2(fgsScore);      }    } else     if (allDiscrete(list)) {      double structurePrior=getParams().getDouble("structurePrior",1);      double samplePrior=getParams().getDouble("samplePrior",1);      BdeuScoreImages fgsScore=new BdeuScoreImages(list);      fgsScore.setSamplePrior(samplePrior);      fgsScore.setStructurePrior(structurePrior);      target=fgsScore.getVariable(targetName);      if (params.getBoolean("firstNontriangular",false)) {        fgs=new FgsMb2(fgsScore);      } else {        fgs=new FgsMb2(fgsScore);      }    } else {      throw new IllegalArgumentException("Data must be either all discrete or all continuous.");    }  } else {    System.out.println("No viable input.");  }  fgs.setKnowledge((IKnowledge)getParams().get("knowledge",new Knowledge2()));  fgs.setNumPatternsToStore(params.getInt("numPatternsToSave",1));  fgs.setVerbose(true);  fgs.setMaxIndegree(params.getInt("depth",-1));  Graph graph=fgs.search(target);  if (getSourceGraph() != null) {    GraphUtils.arrangeBySourceGraph(graph,getSourceGraph());  } else   if (((IKnowledge)getParams().get("knowledge",new Knowledge2())).isDefaultToKnowledgeLayout()) {    SearchGraphUtils.arrangeByKnowledgeTiers(graph,(IKnowledge)getParams().get("knowledge",new Knowledge2()));  } else {    GraphUtils.circleLayout(graph,200,200,150);  }  this.topGraphs=new ArrayList<>(fgs.getTopGraphs());  if (topGraphs.isEmpty()) {    topGraphs.add(new ScoredGraph(getResultGraph(),Double.NaN));  }  setIndex(topGraphs.size() - 1);  setResultGraph(graph);}  }
class C{  public void testFailureWithDefaultConfig(){  CircuitBreaker breaker=new CircuitBreaker();  breaker.close();  ClosedState state=new ClosedState(breaker);  assertFalse(breaker.isOpen());  state.recordFailure();  assertTrue(breaker.isOpen());}  }
class C{  JCNewClass makeNewClass(Type ctype,List<JCExpression> args){  return makeNewClass(ctype,args,rs.resolveConstructor(null,attrEnv,ctype,TreeInfo.types(args),List.<Type>nil()));}  }
class C{  public final void testWriteReplace(){  try {    MyCertPath cp1=new MyCertPath(testEncoding);    Object obj=cp1.writeReplace();    assertTrue(obj.toString().contains("java.security.cert.CertPath$CertPathRep"));  } catch (  ObjectStreamException e) {    fail("Unexpected ObjectStreamException " + e.getMessage());  }}  }
class C{  void addBulk(BulkTest bulk,Method m){  String verboseName=prefix + "." + m.getName();  if (ignored.contains(verboseName))   return;  BulkTest bulk2;  try {    bulk2=(BulkTest)m.invoke(bulk,(Object[])null);    if (bulk2 == null)     return;  } catch (  InvocationTargetException ex) {    ex.getTargetException().printStackTrace();    throw new Error();  }catch (  IllegalAccessException ex) {    ex.printStackTrace();    throw new Error();  }  String oldPrefix=prefix;  TestSuite oldResult=result;  prefix=prefix + "." + m.getName();  result=new TestSuite();  result.setName(m.getName());  make(bulk2);  oldResult.addTest(result);  prefix=oldPrefix;  result=oldResult;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:33.877 -0500",hash_original_method="CC013A9497DA672D61638E0368F0173C",hash_generated_method="8815B0416208F1B491A58BB0505028B6") public void cancelActiveSync(Account account,String authority){  sendCancelSyncsMessage(account,authority);}  }
class C{  public boolean changePasssword(String user,String newPwd){  if (user == null)   return false;  String sql2="update " + APPUSER_TABLENAME + " set MD5HASH=? where USERNAME=?";  Connection conn=null;  PreparedStatement pstmt=null;  try {    conn=getConnection();    AppUser appUser=this.retrieveUserInfo(conn,user);    if (appUser == null)     return false;    appUser.setPassword(newPwd);    appUser.setMd5Hash(appUser.calMd5(newPwd));    pstmt=conn.prepareStatement(sql2);    pstmt.setString(1,appUser.getMd5Hash());    pstmt.setString(2,appUser.getName().toLowerCase());    pstmt.execute();    conn.commit();    return true;  } catch (  Exception ex) {    logger.log(Level.SEVERE,"Exception",ex);    if (conn != null)     try {      conn.rollback();    } catch (    Exception iex) {    }    throw new RuntimeException(ex);  } finally {    DBUtils.close(pstmt);    DBUtils.close(conn);  }}  }
class C{  public void testCompare13To13() throws Exception {  assertTrue(ApplicationXmlVersion.V1_3.compareTo(ApplicationXmlVersion.V1_3) == 0);}  }
class C{  @Override public void onClick(View v){switch (v.getId()) {case R.id.id_rl_innerchange01:    SkinManager.getInstance().changeSkin("red");  break;case R.id.id_rl_innerchange02:SkinManager.getInstance().changeSkin("green");break;}}  }
class C{  public boolean applyOptions() throws IOException {  ButtonModel bm=BGROUP.getSelection();  if (bm.equals(DISCARD_BOX.getModel()))   BugSettings.IGNORE_ALL_BUGS.setValue(true); else   if (bm.equals(SEND_BOX.getModel())) {    BugSettings.IGNORE_ALL_BUGS.setValue(false);    BugSettings.USE_AUTOMATIC_BUG.setValue(true);  } else {    BugSettings.IGNORE_ALL_BUGS.setValue(false);    BugSettings.USE_AUTOMATIC_BUG.setValue(false);  }  BugSettings.SEND_DEADLOCK_BUGS.setValue(DEADLOCK_OPTION.isSelected());  return false;}  }
class C{  public static int round(double value){  int roundedValue=value > 0 ? (int)(value + 0.5) : -(int)(Math.abs(value) + 0.5);  return roundedValue;}  }
class C{  public final List<Tuple<String,String>> values(){  return values;}  }
class C{  public DellSCDriverException(String message,Throwable cause){  super(message,cause);}  }
class C{  public static <T>String toString(Collection<T> collection){  if (collection == null) {    return "null";  }  if (collection.isEmpty()) {    return "";  }  StringBuilder buf=new StringBuilder();  String delimiter="";  for (  T t : collection) {    if (t == null) {      continue;    }    buf.append(delimiter);    buf.append(t);    delimiter=", ";  }  return buf.toString();}  }
class C{  private void ingestBlockExportMasks(IngestionRequestContext requestContext,Map<String,TaskResourceRep> taskMap){  for (  String unManagedVolumeGUID : requestContext.getProcessedUnManagedVolumeMap().keySet()) {    BlockObject processedBlockObject=requestContext.getProcessedBlockObject(unManagedVolumeGUID);    VolumeIngestionContext volumeContext=requestContext.getVolumeContext(unManagedVolumeGUID);    UnManagedVolume processedUnManagedVolume=volumeContext.getUnmanagedVolume();    URI unManagedVolumeUri=processedUnManagedVolume.getId();    TaskResourceRep resourceRep=taskMap.get(processedUnManagedVolume.getId().toString());    String taskId=resourceRep != null ? resourceRep.getOpId() : null;    try {      if (processedBlockObject == null) {        _logger.warn("The ingested block object is null. Skipping ingestion of export masks for unmanaged volume {}",unManagedVolumeGUID);        throw IngestionException.exceptions.generalVolumeException(processedUnManagedVolume.getLabel(),"check the logs for more details");      }      IngestExportStrategy ingestStrategy=_ingestStrategyFactory.buildIngestExportStrategy(processedUnManagedVolume);      BlockObject blockObject=ingestStrategy.ingestExportMasks(processedUnManagedVolume,processedBlockObject,requestContext);      if (null == blockObject) {        throw IngestionException.exceptions.generalVolumeException(processedUnManagedVolume.getLabel(),"check the logs for more details");      }      if (null == blockObject.getCreationTime()) {        requestContext.getObjectsIngestedByExportProcessing().add(blockObject);      }      if (blockObject.checkInternalFlags(Flag.PARTIALLY_INGESTED) && !(blockObject instanceof Volume && ((Volume)blockObject).getRpCopyName() != null)) {        StringBuffer taskStatus=requestContext.getTaskStatusMap().get(processedUnManagedVolume.getNativeGuid());        String taskMessage="";        if (taskStatus == null) {          taskMessage=String.format("Not all the parent/replicas of unmanaged volume %s have been ingested",processedUnManagedVolume.getLabel());        } else {          taskMessage=taskStatus.toString();        }        _dbClient.error(UnManagedVolume.class,processedUnManagedVolume.getId(),taskId,IngestionException.exceptions.unmanagedVolumeIsNotVisible(processedUnManagedVolume.getLabel(),taskMessage));      } else {        _dbClient.ready(UnManagedVolume.class,processedUnManagedVolume.getId(),taskId,INGESTION_SUCCESSFUL_MSG);      }    } catch (    APIException ex) {      _logger.warn(ex.getLocalizedMessage(),ex);      _dbClient.error(UnManagedVolume.class,unManagedVolumeUri,taskId,ex);      volumeContext.rollback();    }catch (    Exception ex) {      _logger.warn(ex.getLocalizedMessage(),ex);      _dbClient.error(UnManagedVolume.class,unManagedVolumeUri,taskId,IngestionException.exceptions.generalVolumeException(processedUnManagedVolume.getLabel(),ex.getLocalizedMessage()));      volumeContext.rollback();    }  }}  }
class C{  public void addSigner(PrivateKey key,byte[] subjectKeyID,String digestOID,AttributeTable signedAttr,AttributeTable unsignedAttr) throws IllegalArgumentException {  addSigner(key,subjectKeyID,getEncOID(key,digestOID),digestOID,signedAttr,unsignedAttr);}  }
class C{  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  base=(Parameter)(in.readObject());  serverAddress=(String)(in.readObject());  ownId=(String)(in.readObject());  compressedCommunication=in.readBoolean();  immigrantsSelectionMethod=(SelectionMethod)(in.readObject());  indsToDieSelectionMethod=(SelectionMethod)(in.readObject());  serverPort=in.readInt();  clientPort=in.readInt();  iAmServer=in.readBoolean();}  }
class C{  public Set<String> vars(){  return Collections.unmodifiableSet(vals.keySet());}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == TypeArgument.class) {switch (baseOperationID) {case TypeRefsPackage.TYPE_ARGUMENT___GET_TYPE_REF_AS_STRING:      return TypeRefsPackage.BOUND_THIS_TYPE_REF___GET_TYPE_REF_AS_STRING;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == TypeRef.class) {switch (baseOperationID) {case TypeRefsPackage.TYPE_REF___GET_DECLARED_UPPER_BOUND:  return TypeRefsPackage.BOUND_THIS_TYPE_REF___GET_DECLARED_UPPER_BOUND;case TypeRefsPackage.TYPE_REF___GET_TYPE_REF_AS_STRING:return TypeRefsPackage.BOUND_THIS_TYPE_REF___GET_TYPE_REF_AS_STRING;case TypeRefsPackage.TYPE_REF___GET_TYPING_STRATEGY:return TypeRefsPackage.BOUND_THIS_TYPE_REF___GET_TYPING_STRATEGY;case TypeRefsPackage.TYPE_REF___GET_STRUCTURAL_MEMBERS:return TypeRefsPackage.BOUND_THIS_TYPE_REF___GET_STRUCTURAL_MEMBERS;case TypeRefsPackage.TYPE_REF___IS_USE_SITE_STRUCTURAL_TYPING:return TypeRefsPackage.BOUND_THIS_TYPE_REF___IS_USE_SITE_STRUCTURAL_TYPING;case TypeRefsPackage.TYPE_REF___IS_DEF_SITE_STRUCTURAL_TYPING:return TypeRefsPackage.BOUND_THIS_TYPE_REF___IS_DEF_SITE_STRUCTURAL_TYPING;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == ThisTypeRef.class) {switch (baseOperationID) {case TypeRefsPackage.THIS_TYPE_REF___GET_TYPE_REF_AS_STRING:return TypeRefsPackage.BOUND_THIS_TYPE_REF___GET_TYPE_REF_AS_STRING;case TypeRefsPackage.THIS_TYPE_REF___GET_TYPING_STRATEGY:return TypeRefsPackage.BOUND_THIS_TYPE_REF___GET_TYPING_STRATEGY;case TypeRefsPackage.THIS_TYPE_REF___GET_STRUCTURAL_MEMBERS:return TypeRefsPackage.BOUND_THIS_TYPE_REF___GET_STRUCTURAL_MEMBERS;case TypeRefsPackage.THIS_TYPE_REF___IS_USE_SITE_STRUCTURAL_TYPING:return TypeRefsPackage.BOUND_THIS_TYPE_REF___IS_USE_SITE_STRUCTURAL_TYPING;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == StructuralTypeRef.class) {switch (baseOperationID) {case TypeRefsPackage.STRUCTURAL_TYPE_REF___GET_TYPING_STRATEGY:return TypeRefsPackage.BOUND_THIS_TYPE_REF___GET_TYPING_STRATEGY;case TypeRefsPackage.STRUCTURAL_TYPE_REF___SET_TYPING_STRATEGY__TYPINGSTRATEGY:return TypeRefsPackage.BOUND_THIS_TYPE_REF___SET_TYPING_STRATEGY__TYPINGSTRATEGY;case TypeRefsPackage.STRUCTURAL_TYPE_REF___GET_STRUCTURAL_MEMBERS:return TypeRefsPackage.BOUND_THIS_TYPE_REF___GET_STRUCTURAL_MEMBERS;case TypeRefsPackage.STRUCTURAL_TYPE_REF___HAS_POSTPONED_SUBSTITUTION_FOR__TYPEVARIABLE:return TypeRefsPackage.BOUND_THIS_TYPE_REF___HAS_POSTPONED_SUBSTITUTION_FOR__TYPEVARIABLE;default :return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  private static Opt<String> newHeader(final Opt<Integer> data,final ByteArrayOutputStream baos){  Opt<String> header=new Opt.Empty<>();  if (data.get() != ' ' && data.get() != '\t') {    header=new Opt.Single<>(new Utf8String(baos.toByteArray()).string());    baos.reset();  }  return header;}  }
class C{  private double psfunc2(double x,double t1,int dim,int css){  dim=dim + 1;  double xy=2 * (x - 0.5);  if (lType == 21) {    return xy - Math.pow(t1,0.5 * (numberOfVariables + 3 * dim - 8) / (numberOfVariables - 2));  } else   if (lType == 22) {    double theta=6 * Math.PI * t1 + dim * Math.PI / numberOfVariables;    return xy - Math.sin(theta);  } else   if (lType == 23) {    double theta=6 * Math.PI * t1 + dim * Math.PI / numberOfVariables;    double ra=0.8 * t1;    if (css == 1) {      return xy - ra * Math.cos(theta);    } else {      return xy - ra * Math.sin(theta);    }  } else   if (lType == 24) {    double theta=6 * Math.PI * t1 + dim * Math.PI / numberOfVariables;    double ra=0.8 * t1;    if (css == 1) {      return xy - ra * Math.cos(theta / 3);    } else {      return xy - ra * Math.sin(theta);    }  } else   if (lType == 25) {    double rho=0.8;    double phi=Math.PI * t1;    double theta=6 * Math.PI * t1 + dim * Math.PI / numberOfVariables;    if (css == 1) {      return xy - rho * Math.sin(phi) * Math.sin(theta);    } else     if (css == 2) {      return xy - rho * Math.sin(phi) * Math.cos(theta);    } else {      return xy - rho * Math.cos(phi);    }  } else   if (lType == 26) {    double theta=6 * Math.PI * t1 + dim * Math.PI / numberOfVariables;    double ra=0.3 * t1 * (t1 * Math.cos(4 * theta) + 2);    if (css == 1) {      return xy - ra * Math.cos(theta);    } else {      return xy - ra * Math.sin(theta);    }  } else {    throw new IllegalStateException();  }}  }
class C{  public static void main(String[] args) throws Exception {  try (Ignite ignite=Ignition.start("examples/config/example-ignite.xml")){    if (!ExamplesUtils.checkMinTopologySize(ignite.cluster(),2))     return;    System.out.println();    System.out.println(">>> Messaging example started.");    ClusterGroup rmtGrp=ignite.cluster().forRemotes();    int msgCnt=rmtGrp.nodes().size() * MESSAGES_NUM;    CountDownLatch orderedLatch=new CountDownLatch(msgCnt);    CountDownLatch unorderedLatch=new CountDownLatch(msgCnt);    localListen(ignite.message(ignite.cluster().forLocal()),orderedLatch,unorderedLatch);    startListening(ignite,ignite.message(rmtGrp));    for (int i=0; i < MESSAGES_NUM; i++)     ignite.message(rmtGrp).send(TOPIC.UNORDERED,Integer.toString(i));    System.out.println(">>> Finished sending unordered messages.");    for (int i=0; i < MESSAGES_NUM; i++)     ignite.message(rmtGrp).sendOrdered(TOPIC.ORDERED,Integer.toString(i),0);    System.out.println(">>> Finished sending ordered messages.");    System.out.println(">>> Check output on all nodes for message printouts.");    System.out.println(">>> Will wait for messages acknowledgements from all remote nodes.");    orderedLatch.await();    unorderedLatch.await();    System.out.println(">>> Messaging example finished.");  } }  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodelistreturnlastitem.class,args);}  }
class C{  public void addEntityName(String name){  if (name != null) {    this.entityNameSet.add(name);  }}  }
class C{  @Override public void parse(Reader reader,String baseURI) throws IOException, RDFParseException, RDFHandlerException {  if (reader == null) {    throw new IllegalArgumentException("Reader cannot be 'null'");  }  if (baseURI == null) {    throw new IllegalArgumentException("Base URI cannot be 'null'");  }  InputSource inputSource=new InputSource(reader);  inputSource.setSystemId(baseURI);  parse(inputSource);}  }
class C{  protected void waitForLastTone(){  if (!isPlaying) {    int minSamples=msToSamples(2000,sampleRate,channels);    if (writtenTotal < minSamples) {      Log.d(LOG,"Filling dummy data to audio buffer");      short[] dummy=new short[minSamples - writtenTotal];      audioTrack.write(dummy,0,dummy.length);      audioTrack.setNotificationMarkerPosition(writtenTotal / channels);      markerReachedAction=MARKER_REACHED_ACTION_PAUSE;    }    Log.d(LOG,"start of AudioTrack");    audioTrack.play();    isPlaying=true;  }  Log.i(LOG,"Waiting for the end of the music");  int lastBuffered=writtenTotal;  int lastDiff=writtenTotal;  int count=5;  do {    try {      Thread.sleep(100);    } catch (    InterruptedException e) {    }    int buffered=0;    try {      buffered=writtenTotal - audioTrack.getPlaybackHeadPosition() * channels;    } catch (    IllegalStateException e) {      Log.e(LOG,"waitForLastTone(): illegal state=" + audioTrack.getPlayState());      break;    }    lastDiff=lastBuffered - buffered;    lastBuffered=buffered;    if (lastDiff == 0)     count--; else     count=5;  } while (count > 0 && (lastBuffered > 0 || lastDiff > 0));}  }
class C{  public T args(Collection<String> args){  bootique.args(args);  return (T)this;}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  public void refresh(){  if (needsRefresh) {    panel.repaint();  }}  }
class C{  public int deleteById(DatabaseConnection databaseConnection,ID id,ObjectCache objectCache) throws SQLException {  if (mappedDelete == null) {    mappedDelete=MappedDelete.build(databaseType,tableInfo);  }  return mappedDelete.deleteById(databaseConnection,id,objectCache);}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == N4ClassifierDefinition.class) {switch (baseOperationID) {case N4JSPackage.N4_CLASSIFIER_DEFINITION___GET_OWNED_MEMBERS:      return N4JSPackage.N4_CLASSIFIER_DECLARATION___GET_OWNED_MEMBERS;case N4JSPackage.N4_CLASSIFIER_DEFINITION___GET_OWNED_CTOR:    return N4JSPackage.N4_CLASSIFIER_DECLARATION___GET_OWNED_CTOR;case N4JSPackage.N4_CLASSIFIER_DEFINITION___GET_OWNED_CALLABLE_CTOR:  return N4JSPackage.N4_CLASSIFIER_DECLARATION___GET_OWNED_CALLABLE_CTOR;case N4JSPackage.N4_CLASSIFIER_DEFINITION___GET_OWNED_METHODS:return N4JSPackage.N4_CLASSIFIER_DECLARATION___GET_OWNED_METHODS;case N4JSPackage.N4_CLASSIFIER_DEFINITION___GET_OWNED_FIELDS:return N4JSPackage.N4_CLASSIFIER_DECLARATION___GET_OWNED_FIELDS;case N4JSPackage.N4_CLASSIFIER_DEFINITION___GET_OWNED_GETTERS:return N4JSPackage.N4_CLASSIFIER_DECLARATION___GET_OWNED_GETTERS;case N4JSPackage.N4_CLASSIFIER_DEFINITION___GET_OWNED_SETTERS:return N4JSPackage.N4_CLASSIFIER_DECLARATION___GET_OWNED_SETTERS;case N4JSPackage.N4_CLASSIFIER_DEFINITION___GET_SUPER_CLASSIFIER_REFS:return N4JSPackage.N4_CLASSIFIER_DECLARATION___GET_SUPER_CLASSIFIER_REFS;case N4JSPackage.N4_CLASSIFIER_DEFINITION___GET_IMPLEMENTED_OR_EXTENDED_INTERFACE_REFS:return N4JSPackage.N4_CLASSIFIER_DECLARATION___GET_IMPLEMENTED_OR_EXTENDED_INTERFACE_REFS;default :return -1;}}if (baseClass == GenericDeclaration.class) {switch (baseOperationID) {default :return -1;}}if (baseClass == ThisTarget.class) {switch (baseOperationID) {default :return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public void init(final FilterConfig filterConfig) throws ServletException {  log.debug("filter init called");  if (filterConfig == null) {    log.error("unable to init filter as filter config is null");    return;  }  log.debug("init: calling destroy just in case we are being re-inited uncleanly");  destroyActual();  context=filterConfig.getServletContext();  if (context == null) {    log.error("unable to init as servlet context is null");    return;  }  Log.setConfiguration(filterConfig);  String confReloadCheckIntervalStr=filterConfig.getInitParameter("confReloadCheckInterval");  String confPathStr=filterConfig.getInitParameter("confPath");  String statusPathConf=filterConfig.getInitParameter("statusPath");  String statusEnabledConf=filterConfig.getInitParameter("statusEnabled");  String statusEnabledOnHosts=filterConfig.getInitParameter("statusEnabledOnHosts");  String allowConfSwapViaHttpStr=filterConfig.getInitParameter("allowConfSwapViaHttp");  if (!StringUtils.isBlank(allowConfSwapViaHttpStr)) {    allowConfSwapViaHttp="true".equalsIgnoreCase(allowConfSwapViaHttpStr);  }  if (!StringUtils.isBlank(confReloadCheckIntervalStr)) {    confReloadCheckInterval=1000 * NumberUtils.stringToInt(confReloadCheckIntervalStr);    if (confReloadCheckInterval < 0) {      confReloadCheckEnabled=false;      log.info("conf reload check disabled");    } else     if (confReloadCheckInterval == 0) {      confReloadCheckEnabled=true;      log.info("conf reload check performed each request");    } else {      confReloadCheckEnabled=true;      log.info("conf reload check set to " + confReloadCheckInterval / 1000 + "s");    }  } else {    confReloadCheckEnabled=false;  }  String modRewriteConf=filterConfig.getInitParameter("modRewriteConf");  if (!StringUtils.isBlank(modRewriteConf)) {    modRewriteStyleConf="true".equals(StringUtils.trim(modRewriteConf).toLowerCase());  }  if (!StringUtils.isBlank(confPathStr)) {    confPath=StringUtils.trim(confPathStr);  } else {    confPath=modRewriteStyleConf ? DEFAULT_MOD_REWRITE_STYLE_CONF_PATH : DEFAULT_WEB_CONF_PATH;  }  log.debug("confPath set to " + confPath);  if (statusEnabledConf != null && !"".equals(statusEnabledConf)) {    log.debug("statusEnabledConf set to " + statusEnabledConf);    statusEnabled="true".equals(statusEnabledConf.toLowerCase());  }  if (statusEnabled) {    if (statusPathConf != null && !"".equals(statusPathConf)) {      statusPath=statusPathConf.trim();      log.info("status display enabled, path set to " + statusPath);    }  } else {    log.info("status display disabled");  }  if (StringUtils.isBlank(statusEnabledOnHosts)) {    statusEnabledOnHosts=DEFAULT_STATUS_ENABLED_ON_HOSTS;  } else {    log.debug("statusEnabledOnHosts set to " + statusEnabledOnHosts);  }  statusServerNameMatcher=new ServerNameMatcher(statusEnabledOnHosts);  String modRewriteConfText=filterConfig.getInitParameter("modRewriteConfText");  if (!StringUtils.isBlank(modRewriteConfText)) {    ModRewriteConfLoader loader=new ModRewriteConfLoader();    Conf conf=new Conf();    loader.process(modRewriteConfText,conf);    conf.initialise();    checkConf(conf);    confLoadedFromFile=false;  } else {    loadUrlRewriter(filterConfig);  }}  }
class C{  public void trackPageViewFromSearch(String argPageURL,String argPageTitle,String argHostName,String argSearchSource,String argSearchKeywords){  if (argPageURL == null)   throw new IllegalArgumentException("Page URL cannot be null, Google will not track the data.");  AnalyticsRequestData data=new AnalyticsRequestData();  data.setHostName(argHostName);  data.setPageTitle(argPageTitle);  data.setPageURL(argPageURL);  data.setSearchReferrer(argSearchSource,argSearchKeywords);  makeCustomRequest(data);}  }
class C{  public RequestHandle post(String url,ResponseHandlerInterface responseHandler){  return post(null,url,null,responseHandler);}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY);  builder.addAttribute(YOMI);}  }
class C{  public static <T>Rule<T> fromUri(final String uri,final String methods,final T target){  return new Rule<>(uri,singletonList(methods),target);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void executeWithRetry(final HttpMethod method) throws IOException, HttpException {  int execCount=0;  try {    while (true) {      execCount++;      try {        if (LOG.isTraceEnabled()) {          LOG.trace("Attempt number " + execCount + " to process request with HTTPConnection "+ conn.getID());        }        if (conn.getParams().isStaleCheckingEnabled()) {          conn.closeIfStale();        }        if (!conn.isOpen()) {          conn.open();          if (conn.isProxied() && conn.isSecure() && !(method instanceof ConnectMethod)) {            if (!executeConnect()) {              LOG.debug("Connection openinig filed",new Exception("Fake exception created just to print out the call stack. Ignore."));              return;            }          }        }        applyConnectionParams(method);        method.execute(state,conn);        break;      } catch (      final HttpException e) {        LOG.error("Protocol exception: ",e);        throw e;      }catch (      final IOException e) {        LOG.debug("Closing the connection.");        conn.close();        if (method instanceof HttpMethodBase) {          final MethodRetryHandler handler=((HttpMethodBase)method).getMethodRetryHandler();          if (handler != null) {            if (!handler.retryMethod(method,conn,new HttpRecoverableException(e.getMessage()),execCount,method.isRequestSent())) {              LOG.debug("Method retry handler returned false. " + "Automatic recovery will not be attempted");              throw e;            }          }        }        HttpMethodRetryHandler handler=(HttpMethodRetryHandler)method.getParams().getParameter(HttpMethodParams.RETRY_HANDLER);        if (handler == null) {          handler=new DefaultHttpMethodRetryHandler();        }        if (!handler.retryMethod(method,e,execCount)) {          LOG.debug("Method retry handler returned false. " + "Automatic recovery will not be attempted");          throw e;        }        if (LOG.isInfoEnabled()) {          LOG.info("I/O exception (" + e.getClass().getName() + ") caught when processing request: "+ e.getMessage());        }        if (LOG.isDebugEnabled()) {          LOG.debug(e.getMessage(),e);        }        final long delayTime=(10000 * (long)Math.pow(2,execCount - 1));        LOG.info("Retrying request in " + delayTime + " ms");        try {          Thread.sleep(delayTime);        } catch (        final InterruptedException ex) {          throw e;        }      }    }  } catch (  final IOException e) {    if (conn.isOpen()) {      LOG.debug("Closing the connection.");      conn.close();    }    releaseConnection=true;    throw e;  }catch (  final RuntimeException e) {    if (conn.isOpen()) {      LOG.debug("Closing the connection.");      conn.close();    }    releaseConnection=true;    throw e;  }}  }
class C{  public static void main(String[] args) throws IOException {  boolean enableOutput=true;  boolean outputToFile=false;  String inputFolder=IqrMmt.class.getClassLoader().getResource("workload/planetlab").getPath();  String outputFolder="output";  String workload="20110303";  String vmAllocationPolicy="iqr";  String vmSelectionPolicy="mmt";  String parameter="1.5";  new PlanetLabRunner(enableOutput,outputToFile,inputFolder,outputFolder,workload,vmAllocationPolicy,vmSelectionPolicy,parameter);}  }
class C{  public static IdsQueryBuilder idsQuery(@Nullable String... types){  return new IdsQueryBuilder(types);}  }
class C{  public void release(){  if (VERBOSE)   Log.d(TAG,"releasing encoder objects");  if (mEncoder != null) {    mEncoder.stop();    mEncoder.release();    mEncoder=null;  }  if (mMuxer != null) {    mMuxer.stop();    mMuxer.release();    mMuxer=null;  }}  }
class C{  public static Button button(String text,String tip,EventHandler<ActionEvent> onAct){  Button btn=new Button(text);  btn.setOnAction(onAct);  tooltip(btn,tip);  return btn;}  }
class C{  @Override public boolean shouldPerform(OptOptions options){  return true;}  }
class C{  public DrawerBuilder withHasStableIds(boolean hasStableIds){  this.mHasStableIds=hasStableIds;  return this;}  }
class C{  public ByteBuffer putDouble(int index,double value){  return putLong(index,Numbers.doubleToRawLongBits(value));}  }
class C{  private int[] dumpMonitors(DefaultMutableTreeNode catMonitors,DefaultMutableTreeNode catMonitorsLocks,MonitorMap mmap){  Iterator iter=mmap.iterOfKeys();  int monitorsWithoutLocksCount=0;  int overallThreadsWaiting=0;  while (iter.hasNext()) {    String monitor=(String)iter.next();    Map[] threads=mmap.getFromMonitorMap(monitor);    ThreadInfo mi=new ThreadInfo(monitor,null,"",0,null);    DefaultMutableTreeNode monitorNode=new DefaultMutableTreeNode(mi);    Iterator iterLocks=threads[MonitorMap.LOCK_THREAD_POS].keySet().iterator();    int locks=0;    int sleeps=0;    int waits=0;    while (iterLocks.hasNext()) {      String thread=(String)iterLocks.next();      String stackTrace=(String)threads[MonitorMap.LOCK_THREAD_POS].get(thread);      if (threads[MonitorMap.SLEEP_THREAD_POS].containsKey(thread)) {        createNode(monitorNode,"locks and sleeps on monitor: " + thread,null,stackTrace,0);        sleeps++;      } else       if (threads[MonitorMap.WAIT_THREAD_POS].containsKey(thread)) {        createNode(monitorNode,"locks and waits on monitor: " + thread,null,stackTrace,0);        sleeps++;      } else {        createNode(monitorNode,"locked by " + thread,null,stackTrace,0);      }      locks++;    }    Iterator iterWaits=threads[MonitorMap.WAIT_THREAD_POS].keySet().iterator();    while (iterWaits.hasNext()) {      String thread=(String)iterWaits.next();      if (!threads[MonitorMap.LOCK_THREAD_POS].containsKey(thread)) {        createNode(monitorNode,"waits on monitor: " + thread,null,(String)threads[MonitorMap.WAIT_THREAD_POS].get(thread),0);        waits++;      }    }    mi.setContent(ThreadDumpInfo.getMonitorInfo(locks,waits,sleeps));    mi.setName(mi.getName() + ":    " + (sleeps)+ " Thread(s) sleeping, "+ (waits)+ " Thread(s) waiting, "+ (locks)+ " Thread(s) locking");    if (ThreadDumpInfo.areALotOfWaiting(waits)) {      mi.setALotOfWaiting(true);    }    mi.setChildCount(monitorNode.getChildCount());    ((Category)catMonitors.getUserObject()).addToCatNodes(monitorNode);    if (locks == 0) {      monitorsWithoutLocksCount++;      overallThreadsWaiting+=waits;      ((Category)catMonitorsLocks.getUserObject()).addToCatNodes(monitorNode);    }  }  return new int[]{monitorsWithoutLocksCount,overallThreadsWaiting};}  }
class C{  public ToHitData guessToHitModifierPhysical(Entity shooter,@Nullable EntityState shooterState,Targetable target,@Nullable EntityState targetState,PhysicalAttackType attackType,IGame game){  if (!(shooter instanceof Mech)) {    return new ToHitData(TH_PHY_NOT_MECH);  }  if (shooterState == null) {    shooterState=new EntityState(shooter);  }  if (targetState == null) {    targetState=new EntityState(target);  }  int distance=shooterState.getPosition().distance(targetState.getPosition());  if (distance > 1) {    return new ToHitData(TH_PHY_TOO_FAR);  }  ToHitData toHitData=new ToHitData();  toHitData.append(guessToHitModifierHelperForAnyAttack(shooter,shooterState,target,targetState,distance,game));  if (toHitData.getValue() == TargetRoll.IMPOSSIBLE || toHitData.getValue() == TargetRoll.AUTOMATIC_FAIL) {    return toHitData;  }  int arc;  if (PhysicalAttackType.LEFT_PUNCH == attackType) {    arc=Compute.ARC_LEFTARM;  } else   if (PhysicalAttackType.RIGHT_PUNCH == attackType) {    arc=Compute.ARC_RIGHTARM;  } else {    arc=Compute.ARC_FORWARD;  }  if (!isInArc(shooterState.getPosition(),shooterState.getSecondaryFacing(),targetState.getPosition(),arc)) {    return new ToHitData(TH_PHY_NOT_IN_ARC);  }  IHex attackerHex=game.getBoard().getHex(shooterState.getPosition());  IHex targetHex=game.getBoard().getHex(targetState.getPosition());  final int attackerElevation=shooter.getElevation() + attackerHex.getLevel();  final int attackerHeight=shooter.relHeight() + attackerHex.getLevel();  final int targetElevation=target.getElevation() + targetHex.getLevel();  final int targetHeight=targetElevation + target.getHeight();  if (attackType.isPunch()) {    if (shooter.hasQuirk(OptionsConstants.QUIRK_NEG_NO_ARMS)) {      return new ToHitData(TH_PHY_P_NO_ARMS_QUIRK);    }    if ((attackerHeight < targetElevation) || (attackerHeight > targetHeight)) {      return new ToHitData(TH_PHY_TOO_MUCH_ELEVATION);    }    if (shooterState.isProne()) {      return new ToHitData(TH_PHY_P_TAR_PRONE);    }    if (target instanceof Infantry) {      return new ToHitData(TH_PHY_P_TAR_INF);    }    int armLocation=attackType == PhysicalAttackType.RIGHT_PUNCH ? Mech.LOC_RARM : Mech.LOC_LARM;    if (shooter.isLocationBad(armLocation)) {      return new ToHitData(TH_PHY_P_NO_ARM);    }    if (!shooter.hasWorkingSystem(Mech.ACTUATOR_SHOULDER,armLocation)) {      return new ToHitData(TH_PHY_P_NO_SHOULDER);    }    toHitData.addModifier(shooter.getCrew().getPiloting(),TH_PHY_BASE);    if (!shooter.hasWorkingSystem(Mech.ACTUATOR_UPPER_ARM,armLocation)) {      toHitData.addModifier(TH_PHY_P_UPPER_ARM);    }    if (!shooter.hasWorkingSystem(Mech.ACTUATOR_LOWER_ARM,armLocation)) {      toHitData.addModifier(TH_PHY_P_LOWER_ARM);    }    if (!shooter.hasWorkingSystem(Mech.ACTUATOR_HAND,armLocation)) {      toHitData.addModifier(TH_PHY_P_HAND);    }  } else {    if (shooterState.isProne()) {      return new ToHitData(TH_PHY_K_PRONE);    }    if ((attackerElevation < targetElevation) || (attackerElevation > targetHeight)) {      return new ToHitData(TH_PHY_TOO_MUCH_ELEVATION);    }    if ((shooter).hasHipCrit()) {      return new ToHitData(TH_PHY_K_HIP);    }    int legLocation=attackType == PhysicalAttackType.RIGHT_KICK ? Mech.LOC_RLEG : Mech.LOC_LLEG;    toHitData.addModifier(shooter.getCrew().getPiloting() - 2,TH_PHY_BASE);    if (!shooter.hasWorkingSystem(Mech.ACTUATOR_UPPER_LEG,legLocation)) {      toHitData.addModifier(TH_PHY_K_UPPER_LEG);    }    if (!shooter.hasWorkingSystem(Mech.ACTUATOR_LOWER_LEG,legLocation)) {      toHitData.addModifier(TH_PHY_K_LOWER_LEG);    }    if (!shooter.hasWorkingSystem(Mech.ACTUATOR_FOOT,legLocation)) {      toHitData.addModifier(TH_PHY_K_FOOT);    }    if (target instanceof Infantry) {      if (distance == 0) {        toHitData.addModifier(TH_PHY_K_INF);      } else {        return new ToHitData(TH_PHY_K_INF_RNG);      }    }  }  if (game.getOptions().booleanOption(OptionsConstants.AGM_TAC_OPS_PHYSICAL_ATTACK_PSR)) {    if (shooter.getWeightClass() == EntityWeightClass.WEIGHT_LIGHT) {      toHitData.addModifier(TH_PHY_LIGHT);    } else     if (shooter.getWeightClass() == EntityWeightClass.WEIGHT_MEDIUM) {      toHitData.addModifier(TH_PHY_MEDIUM);    }  }  if ((target instanceof LargeSupportTank) || (target instanceof FixedWingSupport) || (target instanceof Dropship && target.isAirborne())) {    toHitData.addModifier(TH_PHY_LARGE);  }  Mech shooterMech=(Mech)shooter;  if (shooterMech.getCockpitType() == Mech.COCKPIT_SUPERHEAVY || shooterMech.getCockpitType() == Mech.COCKPIT_SUPERHEAVY_TRIPOD) {    toHitData.addModifier(TH_PHY_SUPER);  }  if (shooter.hasQuirk(OptionsConstants.QUIRK_POS_EASY_PILOT) && (shooter.getCrew().getPiloting() > 3)) {    toHitData.addModifier(TH_PHY_EASY_PILOT);  }  return toHitData;}  }
class C{  protected BackupBase(String rootName){  if (rootName == null) {    throw new IllegalArgumentException("Backup root name can't be null");  }  _operationsRoot=new File(OperationsXml.getFileLocation(),OperationsXml.getOperationsDirectoryName());  _backupRoot=new File(getOperationsRoot(),rootName);  if (!getBackupRoot().exists()) {    Boolean ok=getBackupRoot().mkdirs();    if (!ok) {      throw new RuntimeException("Unable to make directory: " + getBackupRoot().getAbsolutePath());    }  }}  }
class C{  public boolean isPacked(){  return packed;}  }
class C{  public static PDFImage createImage(PDFObject obj,Map resources) throws IOException {  PDFImage image=new PDFImage(obj);  PDFObject widthObj=obj.getDictRef("Width");  if (widthObj == null) {    throw new PDFParseException("Unable to read image width: " + obj);  }  image.setWidth(widthObj.getIntValue());  PDFObject heightObj=obj.getDictRef("Height");  if (heightObj == null) {    throw new PDFParseException("Unable to get image height: " + obj);  }  image.setHeight(heightObj.getIntValue());  PDFObject imageMaskObj=obj.getDictRef("ImageMask");  if (imageMaskObj != null) {    image.setImageMask(imageMaskObj.getBooleanValue());  }  if (image.isImageMask()) {    image.setBitsPerComponent(1);    int[] colors={Color.BLACK,Color.WHITE};    PDFObject imageMaskDecode=obj.getDictRef("Decode");    if (imageMaskDecode != null) {      PDFObject[] array=imageMaskDecode.getArray();      float decode0=array[0].getFloatValue();      if (decode0 == 1.0f) {        colors=new int[]{Color.WHITE,Color.BLACK};      }    }    image.setColorSpace(PDFColorSpace.getColorSpace(PDFColorSpace.COLORSPACE_GRAY));  } else {    PDFObject bpcObj=obj.getDictRef("BitsPerComponent");    if (bpcObj == null) {      throw new PDFParseException("Unable to get bits per component: " + obj);    }    image.setBitsPerComponent(bpcObj.getIntValue());    PDFObject csObj=obj.getDictRef("ColorSpace");    if (csObj == null) {      throw new PDFParseException("No ColorSpace for image: " + obj);    }    PDFColorSpace cs=PDFColorSpace.getColorSpace(csObj,resources);    image.setColorSpace(cs);  }  PDFObject decodeObj=obj.getDictRef("Decode");  if (decodeObj != null) {    PDFObject[] decodeArray=decodeObj.getArray();    float[] decode=new float[decodeArray.length];    for (int i=0; i < decodeArray.length; i++) {      decode[i]=decodeArray[i].getFloatValue();    }    image.setDecode(decode);  }  if (imageMaskObj == null) {    PDFObject sMaskObj=obj.getDictRef("SMask");    if (sMaskObj == null) {      sMaskObj=obj.getDictRef("Mask");    }    if (sMaskObj != null) {      if (sMaskObj.getType() == PDFObject.STREAM) {        try {          PDFImage sMaskImage=PDFImage.createImage(sMaskObj,resources);          image.setSMask(sMaskImage);        } catch (        IOException ex) {          p("ERROR: there was a problem parsing the mask for this object");          dump(obj);          ex.printStackTrace(System.out);        }      } else       if (sMaskObj.getType() == PDFObject.ARRAY) {        try {          image.setColorKeyMask(sMaskObj);        } catch (        IOException ex) {          p("ERROR: there was a problem parsing the color mask for this object");          dump(obj);          ex.printStackTrace(System.out);        }      }    }  }  return image;}  }
class C{  private void updateSwModule(){  final String newDesc=HawkbitCommonUtil.trimAndNullIfEmpty(descTextArea.getValue());  final String newVendor=HawkbitCommonUtil.trimAndNullIfEmpty(vendorTextField.getValue());  SoftwareModule newSWModule=softwareManagement.findSoftwareModuleById(baseSwModuleId);  newSWModule.setVendor(newVendor);  newSWModule.setDescription(newDesc);  newSWModule=softwareManagement.updateSoftwareModule(newSWModule);  if (newSWModule != null) {    uiNotifcation.displaySuccess(i18n.get("message.save.success",new Object[]{newSWModule.getName() + ":" + newSWModule.getVersion()}));    eventBus.publish(this,new SoftwareModuleEvent(BaseEntityEventType.UPDATED_ENTITY,newSWModule));  }}  }
class C{  public static void validateStringMaxLength(String fieldValue,String fieldName,int maxLength){  if (fieldValue == null || fieldValue.length() <= maxLength) {    return;  }  logAndThrow(fieldName + " value should not exceed " + maxLength+ " chars");}  }
class C{  private void groupBundles(){  List<Derivation<TK,FV>> derivationList=recombinationHash.derivations();  assert derivationList.size() <= capacity : String.format("Beam contents exceeds capacity: %d %d",derivationList.size(),capacity);  if (!isTargetCardinalityBeam) {    final Map<CoverageSet,List<Derivation<TK,FV>>> coverageGroups=new HashMap<>(derivationList.size() / 2);    for (    Derivation<TK,FV> derivation : derivationList) {      List<Derivation<TK,FV>> hypList=coverageGroups.get(derivation.sourceCoverage);      if (hypList == null) {        hypList=new ArrayList<>(32);        coverageGroups.put(derivation.sourceCoverage,hypList);      }      hypList.add(derivation);    }    bundles=new HashMap<>(optionGrid.maxSourceLength());    for (    CoverageSet coverage : coverageGroups.keySet()) {      final List<Derivation<TK,FV>> itemList=coverageGroups.get(coverage);      Collections.sort(itemList);      for (      Range range : ranges(coverage)) {        assert range.start <= range.end : "Invalid range";        final List<ConcreteRule<TK,FV>> ruleList=optionGrid.get(range.start,range.end);        if (ruleList.size() > 0) {          final HyperedgeBundle<TK,FV> bundle=new HyperedgeBundle<>(itemList,ruleList);          List<HyperedgeBundle<TK,FV>> bundleList=bundles.get(range.size());          if (bundleList == null) {            bundleList=new ArrayList<>();            bundles.put(range.size(),bundleList);          }          bundleList.add(bundle);        }      }    }  } else {    bundles=new HashMap<>(optionGrid.maxTargetLength());    if (derivationList.isEmpty()) {      return;    }    final List<Derivation<TK,FV>> itemList=new ArrayList<>(derivationList);    Collections.sort(itemList);    int endPosMax=Math.min(sequenceLength,coverageCardinality + optionGrid.maxTargetLength);    for (int endPos=coverageCardinality; endPos < endPosMax; ++endPos) {      Range range=new Range(coverageCardinality,endPos);      final List<ConcreteRule<TK,FV>> ruleList=optionGrid.get(range.start,range.end);      if (ruleList.size() > 0) {        final HyperedgeBundle<TK,FV> bundle=new HyperedgeBundle<>(itemList,ruleList);        List<HyperedgeBundle<TK,FV>> bundleList=bundles.get(range.size());        if (bundleList == null) {          bundleList=new ArrayList<>();          bundles.put(range.size(),bundleList);        }        bundleList.add(bundle);      }    }  }}  }
class C{  public UF7(){  this(30);}  }
class C{  public HoltWintersDeviation(TSDBService tsdbService){  _tsdbService=tsdbService;}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.main);  Button btn_open=(Button)findViewById(R.id.open);  btn_open.setOnClickListener(open);  Button btn_close=(Button)findViewById(R.id.close);  btn_close.setOnClickListener(close);  Button btn_debug=(Button)findViewById(R.id.debug_log);  btn_debug.setOnClickListener(debug);  Button btn_debugclose=(Button)findViewById(R.id.debug_close);  btn_debugclose.setOnClickListener(debugClose);}  }
class C{  public void testCase24(){  byte aBytes[]={-127,100,56,7,98,-1,39,-128,127,75};  byte bBytes[]={27,-15,65,39,100};  int aSign=-1;  int bSign=1;  byte rBytes[]={15,5,-9,-17,73};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.mod(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public Rect(int left,int top,int right,int bottom){  this.left=left;  this.top=top;  this.right=right;  this.bottom=bottom;}  }
class C{  public ConverterPropertyEditorFactory(Class<? extends ConverterPropertyEditorBase> templateClass){  templateInfo=new ClassTemplateInfo(templateClass);}  }
class C{  private void populateHDSAccessProfile(AccessProfile accessProfile,StorageProvider providerInfo){  accessProfile.setSystemId(providerInfo.getId());  accessProfile.setSystemClazz(providerInfo.getClass());  accessProfile.setIpAddress(providerInfo.getIPAddress());  accessProfile.setUserName(providerInfo.getUserName());  accessProfile.setPassword(providerInfo.getPassword());  accessProfile.setSystemType(DiscoveredDataObject.Type.hds.name());  accessProfile.setPortNumber(providerInfo.getPortNumber());  accessProfile.setSslEnable(String.valueOf(providerInfo.getUseSSL()));}  }
class C{  public PvDetailPanel(ProcessVar data,boolean allowEdit){  this();  setEditable(allowEdit);  setProcessVar(data);}  }
class C{  public static void evolve(Grammar g1,Grammar g2){  int pos1=PRNG.nextInt(g1.size() - 1) + 1;  int pos2=PRNG.nextInt(g2.size() - 1) + 1;  int[] removed1=g1.cut(pos1,g1.size() - 1);  int[] removed2=g2.cut(pos2,g2.size() - 1);  g1.insert(pos1,removed2);  g2.insert(pos2,removed1);}  }
class C{  public byte[] toByteArray(){  ByteBuffer buff=ByteBuffer.allocate(BYTES).order(ByteOrder.LITTLE_ENDIAN);  writeTo(buff);  return buff.array();}  }
class C{  public int compare(final T o1,final T o2){  int r=((T)o1).getTestClass().getName().compareTo(o2.getTestClass().getName());  if (r == 0) {    r=((T)o1).getMethodName().compareTo(o2.getMethodName());  }  return r;}  }
class C{  public static ObjectAnimator ofArgb(Object target,String propertyName,int... values){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {    return ObjectAnimatorCompatLollipop.ofArgb(target,propertyName,values);  }  return ObjectAnimatorCompatBase.ofArgb(target,propertyName,values);}  }
class C{  public CUlinkState(){}  }
class C{  public boolean contains(Object key){  return parameters.containsKey(key);}  }
class C{  public boolean isSubcontracting(){  Object oo=get_Value(COLUMNNAME_IsSubcontracting);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean addShipLoadName(String load){  if (_shipLoadList.contains(load)) {    return false;  }  _shipLoadList.add(load);  log.debug("track ({}) add car load ({})",getName(),load);  setDirtyAndFirePropertyChange(LOADS_CHANGED_PROPERTY,_shipLoadList.size() - 1,_shipLoadList.size());  return true;}  }
class C{  @Override protected void drawYLabels(Canvas c,float fixedPosition,float[] positions,float offset){  mAxisLabelPaint.setTypeface(mYAxis.getTypeface());  mAxisLabelPaint.setTextSize(mYAxis.getTextSize());  mAxisLabelPaint.setColor(mYAxis.getTextColor());  for (int i=0; i < mYAxis.mEntryCount; i++) {    String text=mYAxis.getFormattedLabel(i);    if (!mYAxis.isDrawTopYLabelEntryEnabled() && i >= mYAxis.mEntryCount - 1)     return;    c.drawText(text,positions[i * 2],fixedPosition - offset,mAxisLabelPaint);  }}  }
class C{  public void sendSipResponse(SipResponse response) throws NetworkException {  try {    ServerTransaction transaction=(ServerTransaction)response.getStackTransaction();    if (transaction == null) {      throw new NetworkException("No transaction available for sending response!");    }    if (sLogger.isActivated()) {      sLogger.debug(">>> Send SIP " + response.getStatusCode() + " response");    }    if (mSipTraceEnabled) {      System.out.println(">>> " + response.getStackMessage().toString());      System.out.println(TRACE_SEPARATOR);    }    transaction.sendResponse(response.getStackMessage());  } catch (  SipException e) {    throw new NetworkException("Can't send SIP message!",e);  }}  }
class C{  public void add(T object){  int pos;synchronized (mLock) {    pos=getItemCount();    mObjects.add(object);  }  if (mNotifyOnChange)   notifyItemInserted(pos);}  }
class C{  public static Object parseWithException(Reader in) throws IOException, ParseException {  JSONParser parser=new JSONParser();  return parser.parse(in);}  }
class C{  public void addFile(String filename){  addFile(filename,filename);}  }
class C{  private void detachCoreEvents(){  final VersionControlEventEngine eventEngine=workspace.getClient().getEventEngine();  eventEngine.removeNewPendingChangeListener(coreEventListener);  eventEngine.removeUndonePendingChangeListener(coreEventListener);  eventEngine.removeMergingListener(coreEventListener);  eventEngine.removeCheckinListener(coreEventListener);  eventEngine.removeOperationStartedListener(coreEventListener);  eventEngine.removeOperationCompletedListener(coreEventListener);  eventEngine.removePendingChangesChangedListener(coreEventListener);  eventEngine.removeFolderContentChangedListener(coreEventListener);  eventEngine.removeGetCompletedListener(coreEventListener);  eventEngine.removeLocalWorkspaceScanListener(coreEventListener);}  }
class C{  void firePropertyChange(PropertyChangeEvent evt){  for (  PropertyChangeListener l : listenerList.getListeners(PropertyChangeListener.class)) {    l.propertyChange(evt);  }}  }
class C{  @Override protected boolean accept(){  return !stopWords.contains(termAtt.buffer(),0,termAtt.length());}  }
class C{  public static void w(String tag,Throwable tr){  w(tag,null,tr);}  }
class C{  public void testLatin1Encoding() throws Exception {  char[] latin1Charset={0x0000,0x0001,0x0002,0x0003,0x0004,0x0005,0x0006,0x0007,0x0008,0x0009,0x000A,0x000B,0x000C,0x000D,0x000E,0x000F,0x0010,0x0011,0x0012,0x0013,0x0014,0x0015,0x0016,0x0017,0x0018,0x0019,0x001A,0x001B,0x001C,0x001D,0x001E,0x001F,0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F,0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F,0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F,0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F,0x0080,0x0081,0x0082,0x0083,0x0084,0x0085,0x0086,0x0087,0x0088,0x0089,0x008A,0x008B,0x008C,0x008D,0x008E,0x008F,0x0090,0x0091,0x0092,0x0093,0x0094,0x0095,0x0096,0x0097,0x0098,0x0099,0x009A,0x009B,0x009C,0x009D,0x009E,0x009F,0x00A0,0x00A1,0x00A2,0x00A3,0x00A4,0x00A5,0x00A6,0x00A7,0x00A8,0x00A9,0x00AA,0x00AB,0x00AC,0x00AD,0x00AE,0x00AF,0x00B0,0x00B1,0x00B2,0x00B3,0x00B4,0x00B5,0x00B6,0x00B7,0x00B8,0x00B9,0x00BA,0x00BB,0x00BC,0x00BD,0x00BE,0x00BF,0x00C0,0x00C1,0x00C2,0x00C3,0x00C4,0x00C5,0x00C6,0x00C7,0x00C8,0x00C9,0x00CA,0x00CB,0x00CC,0x00CD,0x00CE,0x00CF,0x00D0,0x00D1,0x00D2,0x00D3,0x00D4,0x00D5,0x00D6,0x00D7,0x00D8,0x00D9,0x00DA,0x00DB,0x00DC,0x00DD,0x00DE,0x00DF,0x00E0,0x00E1,0x00E2,0x00E3,0x00E4,0x00E5,0x00E6,0x00E7,0x00E8,0x00E9,0x00EA,0x00EB,0x00EC,0x00ED,0x00EE,0x00EF,0x00F0,0x00F1,0x00F2,0x00F3,0x00F4,0x00F5,0x00F6,0x00F7,0x00F8,0x00F9,0x00FA,0x00FB,0x00FC,0x00FD,0x00FE,0x00FF};  String latin1String=new String(latin1Charset);  Connection latin1Conn=null;  PreparedStatement pStmt=null;  try {    Properties props=new Properties();    props.put("characterEncoding","cp1252");    latin1Conn=getConnectionWithProps(props);    createTable("latin1RegressTest","(stringField TEXT)");    pStmt=latin1Conn.prepareStatement("INSERT INTO latin1RegressTest VALUES (?)");    pStmt.setString(1,latin1String);    pStmt.executeUpdate();    ((com.mysql.jdbc.Connection)latin1Conn).setTraceProtocol(true);    this.rs=this.stmt.executeQuery("SELECT * FROM latin1RegressTest");    ((com.mysql.jdbc.Connection)latin1Conn).setTraceProtocol(false);    this.rs.next();    String retrievedString=this.rs.getString(1);    System.out.println(latin1String);    System.out.println(retrievedString);    if (!retrievedString.equals(latin1String)) {      int stringLength=Math.min(retrievedString.length(),latin1String.length());      for (int i=0; i < stringLength; i++) {        char rChar=retrievedString.charAt(i);        char origChar=latin1String.charAt(i);        if ((rChar != '?') && (rChar != origChar)) {          fail("characters differ at position " + i + "'"+ rChar+ "' retrieved from database, original char was '"+ origChar+ "'");        }      }    }  }  finally {    if (latin1Conn != null) {      latin1Conn.close();    }  }}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.BINARY;}  }
class C{  public OMCircle(LatLonPoint center,double radius,Length units,int nverts){  super(center,radius,units,nverts,0f,360f);}  }
class C{  void doAdd(SolrContentHandler handler,AddUpdateCommand template) throws IOException {  template.solrDoc=handler.newDocument();  processor.processAdd(template);}  }
class C{  private void pruneIfNeeded(int neededSpace){  if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes) {    return;  }  if (VolleyLog.DEBUG) {    VolleyLog.v("Pruning old cache entries.");  }  long before=mTotalSize;  int prunedFiles=0;  long startTime=SystemClock.elapsedRealtime();  Iterator<Map.Entry<String,CacheHeader>> iterator=mEntries.entrySet().iterator();  while (iterator.hasNext()) {    Map.Entry<String,CacheHeader> entry=iterator.next();    CacheHeader e=entry.getValue();    boolean deleted=getFileForKey(e.key).delete();    if (deleted) {      mTotalSize-=e.size;    } else {      VolleyLog.d("Could not delete cache entry for key=%s, filename=%s",e.key,getFilenameForKey(e.key));    }    iterator.remove();    prunedFiles++;    if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes * HYSTERESIS_FACTOR) {      break;    }  }  if (VolleyLog.DEBUG) {    VolleyLog.v("pruned %d files, %d bytes, %d ms",prunedFiles,(mTotalSize - before),SystemClock.elapsedRealtime() - startTime);  }}  }
class C{  private static String rebuildMsg(StackTraceElement stackTraceElement,String msg){  StringBuffer sb=new StringBuffer();  sb.append(stackTraceElement.getFileName());  sb.append(" (");  sb.append(stackTraceElement.getLineNumber());  sb.append(") ");  sb.append(stackTraceElement.getMethodName());  sb.append(": ");  sb.append(msg);  return sb.toString();}  }
class C{  @Override public Result evaluate(TaskRequest taskRequest,VirtualMachineCurrentState targetVM,TaskTrackerState taskTrackerState){  Collection<TaskRequest> runningTasks=targetVM.getRunningTasks();  if (runningTasks != null && !runningTasks.isEmpty())   return new Result(false,"Already has " + runningTasks.size() + " tasks running on it");  Collection<TaskAssignmentResult> tasksCurrentlyAssigned=targetVM.getTasksCurrentlyAssigned();  if (tasksCurrentlyAssigned != null && !tasksCurrentlyAssigned.isEmpty())   return new Result(false,"Already has " + tasksCurrentlyAssigned.size() + " assigned on it");  return new Result(true,"");}  }
class C{  public void handlePotentialCommitFailure(HashMap<DistributedMember,DistTXCoordinatorInterface> msgMap){  if (fatalExceptions.size() > 0) {    StringBuffer errorMessage=new StringBuffer("Incomplete commit of transaction ").append(id).append(".  Caused by the following exceptions: ");    for (Iterator i=fatalExceptions.entrySet().iterator(); i.hasNext(); ) {      Map.Entry me=(Map.Entry)i.next();      DistributedMember mem=(DistributedMember)me.getKey();      errorMessage.append(" From member: ").append(mem).append(" ");      List exceptions=(List)me.getValue();      for (Iterator ei=exceptions.iterator(); ei.hasNext(); ) {        Exception e=(Exception)ei.next();        errorMessage.append(e);        for (        StackTraceElement ste : e.getStackTrace()) {          errorMessage.append("\n\tat ").append(ste);        }        if (ei.hasNext()) {          errorMessage.append("\nAND\n");        }      }      errorMessage.append(".");    }    throw new CommitIncompleteException(errorMessage.toString());  }}  }
class C{  @Deprecated public void onFailure(Throwable error,String content){  onFailure(error);}  }
class C{  @Override public void execute() throws MojoFailureException {  if (skip) {    getLog().info("Skipping Sortpom");  } else {    setup();    sortPom();  }}  }
class C{  private static Label createActiveStatusLabel(final String activeValue,final boolean endedWithError){  final Label label=new LabelBuilder().name("").buildLabel();  label.setContentMode(ContentMode.HTML);  if (SPUIDefinitions.SCHEDULED.equals(activeValue)) {    label.setDescription("Scheduled");    label.setValue(FontAwesome.HOURGLASS_1.getHtml());  } else   if (SPUIDefinitions.ACTIVE.equals(activeValue)) {    label.setDescription("Active");    label.setStyleName("statusIconActive");  } else   if (SPUIDefinitions.IN_ACTIVE.equals(activeValue)) {    if (endedWithError) {      label.setStyleName("statusIconRed");    } else {      label.setStyleName("statusIconNeutral");    }    label.setDescription("In-active");    label.setValue(FontAwesome.CHECK_CIRCLE.getHtml());  } else {    label.setValue("");  }  return label;}  }
class C{  public void fillAttributeSet(Set attrSet){}  }
class C{  public synchronized void wakeUp(){  final String METHOD_NAME="wake_up()";  getOwner().methodBegin(getClass(),METHOD_NAME);  try {    notifyAll();  }  finally {    getOwner().methodEnd(getClass(),METHOD_NAME);  }}  }
class C{  public T caseSimpleTypeReference(SimpleTypeReference object){  return null;}  }
class C{  public JSONObject(String baseName,Locale locale) throws JSONException {  this();  ResourceBundle bundle=ResourceBundle.getBundle(baseName,locale,Thread.currentThread().getContextClassLoader());  Enumeration<String> keys=bundle.getKeys();  while (keys.hasMoreElements()) {    Object key=keys.nextElement();    if (key != null) {      String[] path=((String)key).split("\\.");      int last=path.length - 1;      JSONObject target=this;      for (int i=0; i < last; i+=1) {        String segment=path[i];        JSONObject nextTarget=target.optJSONObject(segment);        if (nextTarget == null) {          nextTarget=new JSONObject();          target.put(segment,nextTarget);        }        target=nextTarget;      }      target.put(path[last],bundle.getString((String)key));    }  }}  }
class C{  public BayesImParamsEditor(){}  }
class C{  public DateTimeFormatterBuilder append(DateTimePrinter printer,DateTimeParser parser){  checkPrinter(printer);  checkParser(parser);  return append0(printer,parser);}  }
class C{  public URI delete(String entityId){  URIBuilder builder=apiBuilder();  builder.addParameter("action","delete");  builder.addParameter("title",entityId);  return build(builder);}  }
class C{  public static boolean isNonDecreasingArray(int[] arr,int len){  assert arr != null;  assert 0 <= len && len <= arr.length;  if (arr.length == 0)   return true;  for (int i=1; i < len; i++) {    if (arr[i - 1] > arr[i])     return false;  }  return true;}  }
class C{  private static boolean drawTextAntialiased(JComponent c){  return (Boolean)invokeSwingUtilities2StaticMethod("drawTextAntialiased",new Class[]{JComponent.class},new Object[]{c});}  }
class C{  public GraphicsNode nodeHitAt(Point2D p){  Rectangle2D bounds=getSensitiveBounds();  if (count > 0 && bounds != null && bounds.contains(p)) {    Point2D pt=null;    Point2D cp=null;    for (int i=count - 1; i >= 0; --i) {      AffineTransform t=children[i].getInverseTransform();      if (t != null) {        pt=t.transform(p,pt);        cp=pt;      } else {        cp=p;      }      GraphicsNode node=children[i].nodeHitAt(cp);      if (node != null) {        return node;      }    }  }  return null;}  }
class C{  public static CharacterClass of(char ch){  if (ch < MIN_ACCEPTED || ch > MAX_ACCEPTED)   return INVALID;  if (ch >= '0' && ch <= '9')   return DIGIT;  if (ch >= 'A' && ch <= 'Z')   return UPPERCASE;  if (ch >= 'a' && ch <= 'z')   return LOWERCASE;  return SPECIAL;}  }
class C{  public BeanContextServicesSupport(){  this(null,null,false,true);}  }
class C{  public String finished(){  if (m_avInstsPerSec == 0) {    computeUpdate(System.currentTimeMillis());  }  int nS=m_numSamples > 0 ? m_numSamples : 1;  String msg="Finished - " + m_instanceCount + " insts @ "+ m_avInstsPerSec / nS + " insts/sec";  return msg;}  }
class C{  private void checkStorage(StorageResolver storage) throws KeyResolverException {  if (storage == null) {    Object exArgs[]={Constants._TAG_X509DIGEST};    KeyResolverException ex=new KeyResolverException("KeyResolver.needStorageResolver",exArgs);    if (log.isLoggable(java.util.logging.Level.FINE)) {      log.log(java.util.logging.Level.FINE,"",ex);    }    throw ex;  }}  }
class C{  public synchronized void addZoomListener(ZoomListener listener){  mZoomListeners.add(listener);}  }
class C{  public Matrix4x4 rotateY(double theta){  TEMP.identity();  TEMP.matrix[0][0]=TEMP.matrix[2][2]=Math.cos(theta);  TEMP.matrix[0][2]=Math.sin(theta);  TEMP.matrix[2][0]=-TEMP.matrix[0][2];  return this.multiplySelf(TEMP);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length != 3) {    System.out.println("Usage: java Calculator operand1 operator operand2");    System.exit(0);  }  testDigit(args[0]);  testDigit(args[2]);  int result=0;switch (args[1].charAt(0)) {case '+':    result=Integer.parseInt(args[0]) + Integer.parseInt(args[2]);  break;case '-':result=Integer.parseInt(args[0]) - Integer.parseInt(args[2]);break;case '.':result=Integer.parseInt(args[0]) * Integer.parseInt(args[2]);break;case '/':result=Integer.parseInt(args[0]) / Integer.parseInt(args[2]);break;}System.out.println(args[0] + ' ' + args[1]+ ' '+ args[2]+ " = "+ result);}  }
class C{  public sun.net.ftp.FtpClient appendFile(String name,InputStream local) throws sun.net.ftp.FtpProtocolException, IOException {  int mtu=1500;  Socket s=openDataConnection("APPE " + name);  OutputStream remote=createOutputStream(s.getOutputStream());  byte[] buf=new byte[mtu * 10];  int l;  while ((l=local.read(buf)) >= 0) {    if (l > 0) {      remote.write(buf,0,l);    }  }  remote.close();  return completePending();}  }
class C{  public PendingIntent detailsIntent(){  return mDetailsIntent;}  }
class C{  public synchronized void update(String sqlStatement,long executionTimeNanos,int rowCount){  QueryEntry entry=map.get(sqlStatement);  if (entry == null) {    entry=new QueryEntry();    entry.sqlStatement=sqlStatement;    map.put(sqlStatement,entry);  }  entry.update(executionTimeNanos,rowCount);  if (map.size() > maxQueryEntries * 1.5f) {    ArrayList<QueryEntry> list=new ArrayList<QueryEntry>();    list.addAll(map.values());    Collections.sort(list,QUERY_ENTRY_COMPARATOR);    HashSet<QueryEntry> oldestSet=new HashSet<QueryEntry>(list.subList(0,list.size() / 3));    for (Iterator<Entry<String,QueryEntry>> it=map.entrySet().iterator(); it.hasNext(); ) {      Entry<String,QueryEntry> mapEntry=it.next();      if (oldestSet.contains(mapEntry.getValue())) {        it.remove();      }    }  }}  }
class C{  public Element addAttribute(String attribute_name,String attribute_value){  if (attribute_name != null && attribute_value != null)   getElementHashEntry().put(attribute_name,attribute_value);  return (this);}  }
class C{  public boolean isPayFrom(){  Object oo=get_Value(COLUMNNAME_IsPayFrom);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public Attachment2(){  requestFileName="attachm2.query";  requestContentType="multipart/related; " + "boundary=jetty771207119h3h10dty";  responseFile="attachm2.answer";  responseContentType="multipart/related; charset=UTF-8; " + "boundary=jetty771207119h3h10dty";}  }
class C{  public static boolean doesExchangeUseReverseRates(String shortExchangeName){  if (shortExchangeName == null) {    throw new IllegalArgumentException("Exchange name cannot be null");  }  return BITCOIN_CHARTS_EXCHANGE_NAME.equals(shortExchangeName);}  }
class C{  public void writeHeaders(OutputStream os,MimeBodyPart msg) throws IOException {  for (  MimeHeader header : msg.getHeaders()) {    writeHeader(os,header);  }  os.write("\r\n".getBytes());}  }
class C{  public void addSingular(String match,String rule,boolean insensitive){  singulars.add(0,new Replacer(match,rule,insensitive));}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MDDOrderLine[").append(get_ID()).append(",Line=").append(getLine()).append(",Ordered=").append(getQtyOrdered()).append(",Delivered=").append(getQtyDelivered()).append(",Reserved=").append(getQtyReserved()).append("]");  return sb.toString();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void process(Contact field,Annotation label) throws Exception {  if (label instanceof Attribute) {    process(field,label,attributes);  }  if (label instanceof ElementUnion) {    union(field,label,elements);  }  if (label instanceof ElementListUnion) {    union(field,label,elements);  }  if (label instanceof ElementMapUnion) {    union(field,label,elements);  }  if (label instanceof ElementList) {    process(field,label,elements);  }  if (label instanceof ElementArray) {    process(field,label,elements);  }  if (label instanceof ElementMap) {    process(field,label,elements);  }  if (label instanceof Element) {    process(field,label,elements);  }  if (label instanceof Version) {    version(field,label);  }  if (label instanceof Text) {    text(field,label);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  int mediaMask=DBObject.MEDIA_MASK_ALL;  if (curNumberOfParameters == 1) {    mediaMask=getMediaMask(stack);  }  return Wizard.getInstance().getAllCategories(mediaMask);}  }
class C{  public String findWithinHorizon(String pattern,int horizon){  return findWithinHorizon(patternCache.forName(pattern),horizon);}  }
class C{  private boolean findNextToken(){  boolean foundToken=matcher.find();  if (foundToken) {    int begin=matcher.start();    int end=matcher.end();    String text=matcher.group();    currentTextItem=new TextItem(begin,end,text);  } else {    currentTextItem=null;  }  return foundToken;}  }
class C{  private static InputStream cap(final Request req) throws IOException {  final Iterator<String> hdr=new RqHeaders.Base(req).header("Content-Length").iterator();  InputStream body=req.body();  long length=(long)body.available();  if (hdr.hasNext()) {    length=Long.parseLong(hdr.next());  }  body=new CapInputStream(body,length);  return body;}  }
class C{  public static <K,V>SmallLRUCache<K,V> newInstance(int size){  return new SmallLRUCache<K,V>(size);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  sage.plugin.PluginWrapper pluggy=getPlugin(stack);  if (pluggy != null)   return pluggy.getScreenshotURLs();  return null;}  }
class C{  public FileTransferManager(Connection connection){  this.connection=connection;  this.fileTransferNegotiator=FileTransferNegotiator.getInstanceFor(connection);}  }
class C{  public synchronized void write(byte b[],int off,int len){  if (closed) {    return;  }  super.write(b,off,len);}  }
class C{  private Statement tuneStatementExecutionOptions(Statement statement){  String qry="";  if (statement instanceof BoundStatement)   qry=((BoundStatement)statement).preparedStatement().getQueryString().trim().toLowerCase(); else   if (statement instanceof PreparedStatement)   qry=((PreparedStatement)statement).getQueryString().trim().toLowerCase();  boolean readStatement=qry.startsWith("select");  boolean writeStatement=statement instanceof Batch || statement instanceof BatchStatement || qry.startsWith("insert")|| qry.startsWith("delete")|| qry.startsWith("update");  if (readStatement && readConsistency != null)   statement.setConsistencyLevel(readConsistency);  if (writeStatement && writeConsistency != null)   statement.setConsistencyLevel(writeConsistency);  if (fetchSize != null)   statement.setFetchSize(fetchSize);  return statement;}  }
class C{  public static U64 computeEntryCookie(int userCookie,String name){  int prime=211;  int flowHash=2311;  for (int i=0; i < name.length(); i++) {    flowHash=flowHash * prime + (int)name.charAt(i);  }  return AppCookie.makeCookie(StaticFlowEntryPusher.STATIC_FLOW_APP_ID,flowHash);}  }
class C{  public static void loadExternalModules(List<File> files){  List<File> independents=new ArrayList<>();  List<File> dependents=new ArrayList<>();  files.forEach(null);  independents.forEach(null);  List<File> noLongerDependents=dependents.stream().filter(null).collect(Collectors.toList());  dependents.removeAll(noLongerDependents);  noLongerDependents.forEach(null);  final int retryAttempts=dependents.size();  for (int i=0; i < retryAttempts; i++) {    dependents.removeIf((null));    if (dependents.size() == 0)     break;  }  if (dependents.size() > 0)   Discord4J.LOGGER.warn("Unable to load {} modules!",dependents.size());}  }
class C{  private String generateTileName(String name,int i,int j){  if (i == 0 && j == 0) {    return name;  }  return String.format("%s_%s_%s",name,String.valueOf(i),String.valueOf(j));}  }
class C{  @Override public void execute(StepInstance stepInstance,String temporaryFileDirectory){  List<RawMatch> rawMatches=rawMatchDAO.retrieveAll();  System.out.println("\n****** START: RAW MATCHES ******");  if (rawMatches.size() < 1) {    System.out.println("None");  } else {    for (    RawMatch rawMatch : rawMatches) {      System.out.println(rawMatch);    }  }  System.out.println(rawMatches.size() + " raw matches");  System.out.println("****** END: RAW MATCHES ******\n");}  }
class C{  public CipherOutputStream(OutputStream os,BufferedBlockCipher cipher){  super(os);  this.bufferedBlockCipher=cipher;  this.buf=new byte[cipher.getBlockSize()];}  }
class C{  private void recalculate(){  total=0;  for (  TargetRollModifier modifier : modifiers) {    if ((modifier.getValue() == IMPOSSIBLE) || (modifier.getValue() == AUTOMATIC_FAIL) || (modifier.getValue() == AUTOMATIC_SUCCESS)|| (modifier.getValue() == CHECK_FALSE)) {      total=modifier.getValue();      break;    }    total+=modifier.getValue();  }}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public void resetReporting(boolean enabled){  if (mRedBoxHandler == null || !mRedBoxHandler.isReportEnabled()) {    return;  }  isReporting=false;  Assertions.assertNotNull(mReportTextView).setVisibility(View.GONE);  Assertions.assertNotNull(mLoadingIndicator).setVisibility(View.GONE);  Assertions.assertNotNull(mLineSeparator).setVisibility(View.GONE);  Assertions.assertNotNull(mReportButton).setVisibility(enabled ? View.VISIBLE : View.GONE);  Assertions.assertNotNull(mReportButton).setEnabled(true);}  }
class C{  public void writeToSubdirectoryWithName(String subdirectory){  this.outputSubdirectory=subdirectory;}  }
class C{  public Aggregate(IoBuffer data){  super(Type.STREAM_DATA);  setData(data);}  }
class C{  public char charAt(int offset){  return buf.charAt(offset);}  }
class C{  private void updateStatusOnEDT(int pageIndex){  assert SwingUtilities.isEventDispatchThread();  Object[] pageNumber=new Object[]{new Integer(pageIndex + 1)};  statusLabel.setText(statusFormat.format(pageNumber));}  }
class C{  public Variable findVariable(String name){  if (this.containsKey(name)) {    return this.get(name);  }  return null;}  }
class C{  public SerialMessage(byte[] a){  super(String.valueOf(a));  setTimeout(100);}  }
class C{  public Map<String,String[]> crop(final Map<String,String[]> original){  Map<String,String[]> result=new HashMap<String,String[]>(original.size());  for (  Map.Entry<String,String[]> entry : original.entrySet()) {    String key=entry.getKey();    if (null == key) {      continue;    }    String[] value=entry.getValue();    String[] convertedValue;    if (null == value) {      convertedValue=new String[1];      convertedValue[0]="<notset>";    } else {      boolean croppingWasNeeded=false;      convertedValue=value;      for (int i=0, l=value.length; i < l; i++) {        String curValue=value[i];        String croppingResult=crop(curValue);        if ((curValue != croppingResult) & !croppingWasNeeded) {          croppingWasNeeded=true;          convertedValue=new String[value.length];          System.arraycopy(value,0,convertedValue,0,i);          convertedValue[i]=croppingResult;        }        if (croppingWasNeeded) {          convertedValue[i]=croppingResult;        }      }    }    result.put(key,convertedValue);  }  return result;}  }
class C{  private boolean isExternalLinkEmpty(PhysicalData data){  if (data != null) {    String charset=data.getCharset();    String format=data.getFormat();    String formatVersion=data.getFormatVersion();    String distributionUrl=data.getDistributionUrl();    String name=data.getName();    return (Strings.isNullOrEmpty(charset) && Strings.isNullOrEmpty(format) && Strings.isNullOrEmpty(formatVersion)&& Strings.isNullOrEmpty(distributionUrl)&& Strings.isNullOrEmpty(name));  }  return true;}  }
class C{  @Transactional public void loadNewSequences(){  String highWaterMark=proteinXrefDao.getMaxUniparcId();  LOGGER.debug("The high water mark UPI is " + highWaterMark);  final String sql="select * from ( " + "select  upi, seq_short, seq_long " + "from uniparc.protein "+ "where upi > ? "+ "order by upi ASC ) "+ "where rownum <= ? ";  jdbcTemplate.query(sql,new Object[]{highWaterMark,maximumProteins},rowCallbackHandlerTemplate);  rowCallbackHandlerTemplate.persist();}  }
class C{  private List<Integer> partitions(Ignite node,int partType){  List<Integer> res=new LinkedList<>();  Affinity<Object> aff=node.affinity(null);  for (int partCnt=aff.partitions(), i=0; i < partCnt; i++) {    ClusterNode locNode=node.cluster().localNode();switch (partType) {case PARTITION_READER:{        if (!aff.isPrimaryOrBackup(locNode,i))         res.add(i);        break;      }case PARTITION_PRIMARY:{      if (aff.isPrimary(locNode,i))       res.add(i);      break;    }case PARTITION_BACKUP:{    if (aff.isPrimaryOrBackup(locNode,i) && !aff.isPrimary(locNode,i))     res.add(i);    break;  }default :{  assert false;}}}return res;}  }
class C{  public SessionStateLite(SessionState sessionState){  this.cmd=sessionState.getCmd();  this.commandType=sessionState.getCommandType();  this.queryId=sessionState.getQueryId();  this.conf=new HiveConf(sessionState.getConf());  this.mapRedStats=new HashMap<>(sessionState.getMapRedStats());}  }
class C{  public void translateLayoutParamsInAppWindowToScreen(LayoutParams params){  params.scale(applicationScale);}  }
class C{  public boolean isIgnoreInactive(){  return this.ignoreInactive;}  }
class C{  public ZkReportViewer(ReportEngine re,String title){  super();  log.info("");  m_WindowNo=SessionManager.getAppDesktop().registerWindow(this);  Env.setContext(re.getCtx(),m_WindowNo,"_WinInfo_IsReportViewer","Y");  m_reportEngine=re;  m_AD_Table_ID=re.getPrintFormat().getAD_Table_ID();  if (!MRole.getDefault().isCanReport(m_AD_Table_ID)) {    FDialog.error(m_WindowNo,this,"AccessCannotReport",m_reportEngine.getName());    this.onClose();  }  m_isCanExport=MRole.getDefault().isCanExport(m_AD_Table_ID);  try {    m_ctx=m_reportEngine.getCtx();    init();    dynInit();    if (!ArchiveEngine.isValid(m_reportEngine.getLayout()))     log.warning("Cannot archive Document");  } catch (  Exception e) {    log.log(Level.SEVERE,"",e);    FDialog.error(m_WindowNo,this,"LoadError",e.getLocalizedMessage());    this.onClose();  }}  }
class C{  @Override public DeleteRequest routing(String routing){  if (routing != null && routing.length() == 0) {    this.routing=null;  } else {    this.routing=routing;  }  return this;}  }
class C{  public static Date parseMath(Date now,String val){  String math;  final DateMathParser p=new DateMathParser();  if (null != now)   p.setNow(now);  if (val.startsWith("NOW")) {    math=val.substring("NOW".length());  } else {    final int zz=val.indexOf('Z');    if (zz == -1) {      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"Invalid Date String:'" + val + '\'');    }    math=val.substring(zz + 1);    try {      p.setNow(parseNoMath(val.substring(0,zz + 1)));    } catch (    DateTimeParseException e) {      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"Invalid Date in Date Math String:'" + val + '\'',e);    }  }  if (null == math || math.equals("")) {    return p.getNow();  }  try {    return p.parseMath(math);  } catch (  ParseException e) {    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"Invalid Date Math String:'" + val + '\'',e);  }}  }
class C{  protected static void doSize(JComponent comp,int max,int min){  Dimension dim=comp.getPreferredSize();  dim.width=max;  comp.setMaximumSize(dim);  dim.width=min;  comp.setMinimumSize(dim);}  }
class C{  public void ignoreProperty(String key){  this.ignoreKey=key;}  }
class C{  public final boolean inRange(final long i){  return valid(i) || (hasInvalid() && i == mInvalid);}  }
class C{  public static void saveBamIndexNoHeader(final File bamFile,final File bamIndex,boolean expectHeader,int numReferences) throws IOException, UnindexableDataException {  final SequenceIndexContainer indexs=createBamIndexNoHeader(bamFile,expectHeader,numReferences);  saveBamIndex(indexs,bamIndex);}  }
class C{  public static void main(String... a) throws Exception {  TestBase test=TestBase.createCaller().init();  test.config.big=true;  test.test();}  }
class C{  public void onException(JMSException je){  this.setConnected(false);  Debug.logError(je,"JMS connection exception",module);  while (!isConnected()) {    try {      this.refresh();    } catch (    GenericServiceException e) {      try {        Thread.sleep(10000);      } catch (      InterruptedException ie) {      }      continue;    }  }}  }
class C{  public void attachAndMount(URI exportGroupId,URI hostId,URI vCenterId,URI vcenterDatacenter,String stepId){  WorkflowStepCompleter.stepExecuting(stepId);  try {    Host esxHost=_dbClient.queryObject(Host.class,hostId);    Vcenter vCenter=_dbClient.queryObject(Vcenter.class,vCenterId);    VcenterDataCenter vCenterDataCenter=_dbClient.queryObject(VcenterDataCenter.class,vcenterDatacenter);    ExportGroup exportGroup=_dbClient.queryObject(ExportGroup.class,exportGroupId);    VCenterAPI api=VcenterDiscoveryAdapter.createVCenterAPI(vCenter);    HostSystem hostSystem=api.findHostSystem(vCenterDataCenter.getLabel(),esxHost.getLabel());    HostStorageAPI storageAPI=new HostStorageAPI(hostSystem);    if (exportGroup != null && exportGroup.getVolumes() != null) {      _log.info("Refreshing storage");      storageAPI.refreshStorage();      for (      String volume : exportGroup.getVolumes().keySet()) {        BlockObject blockObject=BlockObject.fetch(_dbClient,URI.create(volume));        try {          for (          HostScsiDisk entry : storageAPI.listScsiDisks()) {            if (VolumeWWNUtils.wwnMatches(VMwareUtils.getDiskWwn(entry),blockObject.getWWN())) {              _log.info("Attach SCSI Lun " + entry.getCanonicalName() + " on host "+ esxHost.getLabel());              storageAPI.attachScsiLun(entry);            }          }        } catch (        VMWareException ex) {          _log.warn(ex.getMessage(),ex);        }        storageAPI.getStorageSystem().rescanVmfs();        if (blockObject != null && blockObject.getTag() != null) {          for (          ScopedLabel tag : blockObject.getTag()) {            String tagValue=tag.getLabel();            if (tagValue != null && tagValue.startsWith(VMFS_DATASTORE_PREFIX)) {              String datastoreName=getDatastoreName(tagValue);              try {                Datastore datastore=api.findDatastore(vCenterDataCenter.getLabel(),datastoreName);                if (datastore != null) {                  _log.info("Mounting datastore " + datastore.getName() + " on host "+ esxHost.getLabel());                  storageAPI.mountDatastore(datastore);                }              } catch (              VMWareException ex) {                _log.warn(ex.getMessage(),ex);              }            }          }        }      }    }    WorkflowStepCompleter.stepSucceded(stepId);  } catch (  Exception ex) {    _log.error(ex.getMessage(),ex);    WorkflowStepCompleter.stepFailed(stepId,DeviceControllerException.errors.jobFailed(ex));  }}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:54.957 -0500",hash_original_method="55AE5096776E3EC3786EB41522B2BAD8",hash_generated_method="3552E8AF178ADE40DA7CD04443E650CD") public PBEKeySpec(char[] password,byte[] salt,int iterationCount){  if (salt == null) {    throw new NullPointerException("salt == null");  }  if (salt.length == 0) {    throw new IllegalArgumentException("salt.length == 0");  }  if (iterationCount <= 0) {    throw new IllegalArgumentException("iterationCount <= 0");  }  if (password == null) {    this.password=EmptyArray.CHAR;  } else {    this.password=new char[password.length];    System.arraycopy(password,0,this.password,0,password.length);  }  this.salt=new byte[salt.length];  System.arraycopy(salt,0,this.salt,0,salt.length);  this.iterationCount=iterationCount;  this.keyLength=0;}  }
class C{  private void _handle_intent(Intent i){  if (Intent.ACTION_SEARCH.equals(i.getAction())) {    Log.v(TAG,"User search: " + i.getStringExtra(SearchManager.QUERY));    SharedPreferences pref=PreferenceManager.getDefaultSharedPreferences(this);    boolean show_system=pref.getBoolean(SettingsFragment.KEY_PREF_SHOW_SYSTEM,false);    String query="%" + i.getStringExtra(SearchManager.QUERY) + "%";    String where_clause="(_displayname LIKE ? OR _packagename LIKE ?)";    if (!show_system) {      where_clause+=" AND _systemapp = 0";    }    List<InstalledApp> results=InstalledApp.find(InstalledApp.class,where_clause,query,query);    Log.v(TAG,results.size() + " application(s) match.");    if (results.size() == 0) {      Toast.makeText(getApplicationContext(),R.string.search_no_result,Toast.LENGTH_SHORT).show();      return;    }    _app_display.filter_apps(results);  } else   if (Intent.ACTION_MANAGE_NETWORK_USAGE.equals(i.getAction())) {    getSupportFragmentManager().beginTransaction().replace(R.id.container,new SettingsFragment()).commit();  }}  }
class C{  public static AST.Macro GetMacro(Vector macros) throws ParseAlgorithmException {  AST.Macro result=new AST.Macro();  inGetMacro=true;  MustGobbleThis("macro");  PCalLocation beginLoc=GetLastLocationStart();  result.col=lastTokCol;  result.line=lastTokLine;  result.name=GetAlgToken();  GobbleThis("(");  result.params=new Vector();  boolean lookForComma=false;  while (!PeekAtAlgToken(1).equals(")")) {    if (lookForComma) {      GobbleThis(",");    }    ;    result.params.addElement(GetAlgToken());    lookForComma=true;  }  MustGobbleThis(")");  GobbleBeginOrLeftBrace();  ;  result.body=GetStmtSeq();  GobbleEndOrRightBrace("macro");  result.setOrigin(new Region(beginLoc,GetLastLocationEnd()));  if (PeekAtAlgToken(1).equals(";")) {    String tok=GetAlgToken();  }  ;  ExpandMacrosInStmtSeq(result.body,macros);  inGetMacro=false;  return result;}  }
class C{  public VcfRecord removeSamples(){  mNumSamples=0;  mFormatAndSample.clear();  return this;}  }
class C{  void readStream(InputStream is) throws Exception {  String line;  Date start=new Date();  BufferedReader reader=new BufferedReader(new InputStreamReader(is));  while ((line=reader.readLine()) != null && !mStop) {    mResults.append(line);    mResults.append(Tools.LineSep);    Date end=new Date();    if ((end.getTime() - start.getTime()) / 1000 > 10 || mResults.length() > 5000) {      start=end;      int last=mResults.lastIndexOf("\n");      if (last != -1) {        XmppMsg msg=new XmppMsg(_font);        msg.append(mResults.substring(0,last + 1));        mCmdBase.send(mShellId,msg);        mResults.setLength(0);      }    }  }}  }
class C{  public static <T>Selector.Builder<T> builder(List<T> options){  return new Builder(options);}  }
class C{  public final int addMessageToDictionaries(IMessageInstance messageInstance) throws AdeException {  final int res=getMessageIdDictionary().addWord(messageInstance.getMessageId());  final String compId=messageInstance.getComponentId();  if (compId != null && compId.length() > 0) {    getComponentIdDictionary().addWord(compId);  }  return res;}  }
class C{  public SymbolCode(){}  }
class C{  private void init(DerValue encoding) throws Asn1Exception, IOException, KrbApErrException, RealmException {  DerValue der, subDer;  if (((encoding.getTag() & (byte)0x1F) != Krb5.KRB_AP_REQ) || (encoding.isApplication() != true) || (encoding.isConstructed() != true)) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  der=encoding.getData().getDerValue();  if (der.getTag() != DerValue.tag_Sequence) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  subDer=der.getData().getDerValue();  if ((subDer.getTag() & (byte)0x1F) != (byte)0x00) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  pvno=subDer.getData().getBigInteger().intValue();  if (pvno != Krb5.PVNO) {    throw new KrbApErrException(Krb5.KRB_AP_ERR_BADVERSION);  }  subDer=der.getData().getDerValue();  if ((subDer.getTag() & (byte)0x1F) != (byte)0x01) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  msgType=subDer.getData().getBigInteger().intValue();  if (msgType != Krb5.KRB_AP_REQ) {    throw new KrbApErrException(Krb5.KRB_AP_ERR_MSG_TYPE);  }  apOptions=APOptions.parse(der.getData(),(byte)0x02,false);  ticket=Ticket.parse(der.getData(),(byte)0x03,false);  authenticator=EncryptedData.parse(der.getData(),(byte)0x04,false);  if (der.getData().available() > 0) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }}  }
class C{  public java.util.List<HDR> subList(int index1,int index2){  return this.hlist.subList(index1,index2);}  }
class C{  public void log(String message){  log(new Date(),message);}  }
class C{  public AnnotationVisitor visitAnnotationDefault(){  if (mv != null) {    return mv.visitAnnotationDefault();  }  return null;}  }
class C{  final public boolean startsWithIgnoreCase(final MutableString prefix){  final int l=prefix.length();  if (l > length())   return false;  int i=l;  final char[] a1=prefix.array;  final char[] a2=array;  char c, d;  while (i-- != 0) {    c=Character.toLowerCase(Character.toUpperCase(a1[i]));    d=Character.toLowerCase(Character.toUpperCase(a2[i]));    if (c != d)     return false;  }  return true;}  }
class C{  private JobDefinition createJobDefinition() throws Exception {  namespaceDaoTestHelper.createNamespaceEntity(TEST_ACTIVITI_NAMESPACE_CD);  JobDefinitionCreateRequest request=jobDefinitionServiceTestHelper.createJobDefinitionCreateRequest();  JobDefinition jobDefinition=jobDefinitionService.createJobDefinition(request,false);  validateJobDefinition(jobDefinition);  return jobDefinition;}  }
class C{  public String globalInfo(){  return "Class for selecting a classifier from among several using cross " + "validation on the training data or the performance on the " + "training data. Performance is measured based on percent correct "+ "(classification) or mean-squared error (regression).";}  }
class C{  public JdbmPartition addPartition(String partitionId,String partitionDn) throws Exception {  JdbmPartition partition=new JdbmPartition();  partition.setId(partitionId);  partition.setPartitionDir(new File(service.getWorkingDirectory(),partitionId));  partition.setSuffix(partitionDn);  service.addPartition(partition);  return partition;}  }
class C{  private int returnNextNode(int n){  return n;}  }
class C{  public ISelectPiece select(ExpressionAST expression) throws SQLScopeException, ScopeException {  return select(getScope(),expression);}  }
class C{  public ServiceCall<Void> deleteClassifier(String classifierId){  Validator.isTrue((classifierId != null) && !classifierId.isEmpty(),"classifierId cannot be null or empty");  final Request request=RequestBuilder.delete(String.format(PATH_CLASSIFIER,classifierId)).build();  return createServiceCall(request,ResponseConverterUtils.getVoid());}  }
class C{  public boolean connect(final String address){  if (isScanning)   scanLeDevice(false);  if (getConnectDevices().size() > MAX_CONNECT_NUM)   return false;  if (mConnectedAddressList == null) {    mConnectedAddressList=new ArrayList<>();  }  if (mConnectedAddressList.contains(address)) {    Log.d(TAG,"This is device already connected.");    return true;  }  if (mBluetoothAdapter == null || address == null) {    Log.w(TAG,"BluetoothAdapter not initialized or unspecified address.");    return false;  }  if (mBluetoothGattMap == null) {    mBluetoothGattMap=new HashMap<>();  }  if (mBluetoothGattMap.get(address) != null && mConnectedAddressList.contains(address)) {    Log.d(TAG,"Trying to use an existing mBluetoothGatt for connection.");    if (mBluetoothGattMap.get(address).connect()) {      return true;    } else {      return false;    }  }  final BluetoothDevice device=mBluetoothAdapter.getRemoteDevice(address);  if (device == null) {    Log.w(TAG,"Device not found. Unable to connect.");    return false;  }  BluetoothGatt bluetoothGatt=device.connectGatt(this,false,mGattCallback);  if (bluetoothGatt != null) {    mBluetoothGattMap.put(address,bluetoothGatt);    Log.d(TAG,"Trying to create a new connection.");    mConnectedAddressList.add(address);    return true;  }  return false;}  }
class C{  protected BNode parseNodeID() throws IOException, RDFParseException {  verifyCharacterOrFail(readCodePoint(),"_");  verifyCharacterOrFail(readCodePoint(),":");  int c=readCodePoint();  if (c == -1) {    throwEOFException();  } else   if (!TurtleUtil.isBLANK_NODE_LABEL_StartChar(c)) {    reportError("Expected a letter, found '" + (char)c + "'",BasicParserSettings.PRESERVE_BNODE_IDS);  }  StringBuilder name=getBuilder();  appendCodepoint(name,c);  c=readCodePoint();  if (!TurtleUtil.isBLANK_NODE_LABEL_Char(c)) {    unread(c);  }  while (TurtleUtil.isBLANK_NODE_LABEL_Char(c)) {    int previous=c;    c=readCodePoint();    if (previous == '.' && (c == -1 || TurtleUtil.isWhitespace(c) || c == '<' || c == '_')) {      unread(c);      unread(previous);      break;    }    appendCodepoint(name,previous);    if (!TurtleUtil.isBLANK_NODE_LABEL_Char(c)) {      unread(c);    }  }  return createBNode(name.toString());}  }
class C{  protected int parseModifiers(int mask) throws IOException {  int mod=0;  while (true) {    if (token == CONST) {      env.error(pos,"not.supported","const");      scan();    }    int nextmod=0;switch (token) {case PRIVATE:      nextmod=M_PRIVATE;    break;case PUBLIC:  nextmod=M_PUBLIC;break;case PROTECTED:nextmod=M_PROTECTED;break;case STATIC:nextmod=M_STATIC;break;case TRANSIENT:nextmod=M_TRANSIENT;break;case FINAL:nextmod=M_FINAL;break;case ABSTRACT:nextmod=M_ABSTRACT;break;case NATIVE:nextmod=M_NATIVE;break;case VOLATILE:nextmod=M_VOLATILE;break;case SYNCHRONIZED:nextmod=M_SYNCHRONIZED;break;case STRICTFP:nextmod=M_STRICTFP;break;}if ((nextmod & mask) == 0) {break;}if ((nextmod & mod) != 0) {env.error(pos,"repeated.modifier");}mod|=nextmod;scan();}return mod;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static int uniform(int a,int b){  return a + uniform(b - a);}  }
class C{  public String formatDate(Date date){  return dateFormat.format(date);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList acronymList;  Node testNode;  NamedNodeMap attributes;  Attr titleAttr;  String value;  Text terNode;  Node dayNode;  DocumentFragment docFrag;  Node retval;  Node firstChild;  Node lastChild;  Node refChild=null;  doc=(Document)load("hc_staff",true);  acronymList=doc.getElementsByTagName("acronym");  testNode=acronymList.item(3);  attributes=testNode.getAttributes();  titleAttr=(Attr)attributes.getNamedItem("title");  terNode=doc.createTextNode("ter");  if (("text/html".equals(getContentType()))) {{      boolean success=false;      try {        dayNode=doc.createCDATASection("day");      } catch (      DOMException ex) {        success=(ex.code == DOMException.NOT_SUPPORTED_ERR);      }      assertTrue("throw_NOT_SUPPORTED_ERR",success);    }  } else {    dayNode=doc.createCDATASection("day");    docFrag=doc.createDocumentFragment();    retval=docFrag.appendChild(terNode);    retval=docFrag.appendChild(dayNode);{      boolean success=false;      try {        retval=titleAttr.insertBefore(docFrag,refChild);      } catch (      DOMException ex) {        success=(ex.code == DOMException.HIERARCHY_REQUEST_ERR);      }      assertTrue("throw_HIERARCHY_REQUEST_ERR",success);    }  }}  }
class C{  public void parseTemplate(){  final String template=templateInput.getText();  parser.getData().addActionContainer(getViewId(),this);  try {    final Array<Actor> actors=parser.parseTemplate(template);    resultTable.clear();    for (    final Actor actor : actors) {      resultTable.add(actor).row();    }  } catch (  final Exception exception) {    onParsingError(exception);  }}  }
class C{  public boolean isAmazonDevice(){  if (android.os.Build.MANUFACTURER.equals(AMAZON_DEVICE)) {    return true;  }  return false;}  }
class C{  public Object newProxyInstance(Class<?> interfaceClass,String implClassName) throws Exception {  MyInvocationHandler handler=new MyInvocationHandler(implClassName);  return Proxy.newProxyInstance(interfaceClass.getClassLoader(),new Class[]{interfaceClass},handler);}  }
class C{  public <T>T unwrap(final Class<T> iface) throws SQLException {  return iface.cast(this);}  }
class C{  @Override protected void onActivityResult(int requestCode,int resultCode,Intent data){  super.onActivityResult(requestCode,resultCode,data);switch (requestCode) {case REQ_CODE_SPEECH_INPUT:{      if (resultCode == RESULT_OK && null != data) {        ArrayList<String> result=data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS);        voiceRecognitionText.setText(result.get(0));        voiceRecognitionText.setVisibility(View.VISIBLE);        last_speech_time=JoH.ts();        naturalLanguageRecognition(result.get(0));      }      recognitionRunning=false;      break;    }case REQ_CODE_SPEECH_NOTE_INPUT:{    if (resultCode == RESULT_OK && null != data) {      ArrayList<String> result=data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS);      String treatment_text=result.get(0).trim();      Log.d(TAG,"Got treatment note: " + treatment_text);      voiceRecognitionText.setText(result.get(0));      voiceRecognitionText.setVisibility(View.VISIBLE);      Treatments.create_note(treatment_text,0);      if (dialog != null) {        dialog.cancel();        dialog=null;      }      Home.staticRefreshBGCharts();    }    recognitionRunning=false;    break;  }case NFCReaderX.REQ_CODE_NFC_TAG_FOUND:{  if (NFCReaderX.useNFC()) {    NFCReaderX nfcReader=new NFCReaderX();    nfcReader.tagFound(this,data);  }}}}  }
class C{  public void addContentSelectionChangedListener(XBLOMContentElement e,ContentSelectionChangedListener l){  EventListenerList ll=(EventListenerList)listeners.get(e);  if (ll == null) {    ll=new EventListenerList();    listeners.put(e,ll);  }  ll.add(ContentSelectionChangedListener.class,l);}  }
class C{  public void putAll(ContentValues other){  mValues.putAll(other.mValues);}  }
class C{  protected void parses() throws ParseException, IOException {  current=reader.read();  skipSpaces();  boolean expectNumber=true;  for (; ; ) {switch (current) {default :      if (expectNumber)       reportUnexpected(current);    return;case '+':case '-':case '.':case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':  break;}float x2=parseFloat();skipCommaSpaces();float y2=parseFloat();skipCommaSpaces();float x=parseFloat();skipCommaSpaces();float y=parseFloat();pathHandler.curvetoCubicSmoothRel(x2,y2,x,y);expectNumber=skipCommaSpaces2();}}  }
class C{  public boolean isUniqueVN(String vcNum,final String vcDate,final DataCollection datacol) throws TaskFailedException, Exception {  boolean isUnique=false;  vcNum=vcNum.toUpperCase();  Query pst=null;  List<Object[]> rs=null;  String fyEndDate="";  try {    final String query1="SELECT to_char(startingDate, 'DD-Mon-YYYY') AS \"startingDate\", to_char(endingDate, 'DD-Mon-YYYY') AS \"endingDate\" FROM financialYear WHERE startingDate <= '" + vcDate + "' AND endingDate >= '"+ vcDate+ "'";    pst=persistenceService.getSession().createSQLQuery(query1);    rs=pst.list();    for (    final Object[] element : rs) {      element[0].toString();      fyEndDate=element[1].toString();    }    final String query2="SELECT id FROM voucherHeader WHERE voucherNumber = '" + vcNum + "' AND voucherDate>='"+ vcDate+ "' AND voucherDate<='"+ fyEndDate+ "' and status!=4";    pst=persistenceService.getSession().createSQLQuery(query2);    rs=pst.list();    for (    final Object[] element : rs)     datacol.addMessage(EXILRPERROR,"duplicate voucher number");    if (rs == null || rs.size() == 0)     isUnique=true;  } catch (  final Exception ex) {    datacol.addMessage(EXILRPERROR,"DataBase Error(isUniqueVN) : " + ex.toString());    throw new TaskFailedException();  }  return isUnique;}  }
class C{  public <U extends T>InitialMatching0<T,U> when(DecomposableMatchBuilder0<U> decomposableMatchBuilder){  return new InitialMatching0<>(decomposableMatchBuilder.build(),value);}  }
class C{  public SprogMessage(byte[] packet){  this(1 + (packet.length * 3));  int i=0;  int j=0;  this.setElement(i++,'O');  for (j=0; j < packet.length; j++) {    this.setElement(i++,' ');    String s=Integer.toHexString(packet[j] & 0xFF).toUpperCase();    if (s.length() == 1) {      this.setElement(i++,'0');      this.setElement(i++,s.charAt(0));    } else {      this.setElement(i++,s.charAt(0));      this.setElement(i++,s.charAt(1));    }  }}  }
class C{  public static boolean isBetween(double val,double theshold1,double theshold2){  return theshold2 > theshold1 ? val > theshold1 && val < theshold2 : val > theshold2 && val < theshold1;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case SGraphPackage.SCOPE__DECLARATIONS:    return ((InternalEList<?>)getDeclarations()).basicRemove(otherEnd,msgs);case SGraphPackage.SCOPE__REACTIONS:  return ((InternalEList<?>)getReactions()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  protected static final String addEscapes(String str){  StringBuffer retval=new StringBuffer();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  public void deletePrivacyList(String listName) throws XMPPException {  Privacy request=new Privacy();  request.setPrivacyList(listName,new ArrayList<PrivacyItem>());  setRequest(request);}  }
class C{  private Intent makeMapsIntent(String address){  Log.d(TAG,"makeMapsIntent: address = " + address);  return new Intent(Intent.ACTION_VIEW,Uri.parse("geo:0,0?q=" + Uri.encode(address)));}  }
class C{  private void parseHeader(){  adtsScratch.setPosition(0);  if (!hasMediaFormat()) {    int audioObjectType=adtsScratch.readBits(2) + 1;    int sampleRateIndex=adtsScratch.readBits(4);    adtsScratch.skipBits(1);    int channelConfig=adtsScratch.readBits(3);    byte[] audioSpecificConfig=CodecSpecificDataUtil.buildAudioSpecificConfig(audioObjectType,sampleRateIndex,channelConfig);    Pair<Integer,Integer> audioParams=CodecSpecificDataUtil.parseAudioSpecificConfig(audioSpecificConfig);    MediaFormat mediaFormat=MediaFormat.createAudioFormat(MimeTypes.AUDIO_AAC,MediaFormat.NO_VALUE,audioParams.second,audioParams.first,Collections.singletonList(audioSpecificConfig));    frameDurationUs=(C.MICROS_PER_SECOND * 1024L) / mediaFormat.sampleRate;    setMediaFormat(mediaFormat);  } else {    adtsScratch.skipBits(10);  }  adtsScratch.skipBits(4);  sampleSize=adtsScratch.readBits(13) - 2 - HEADER_SIZE;  if (hasCrc) {    sampleSize-=CRC_SIZE;  }}  }
class C{  public static double incompleteGammaComplement(double a,double x){  double ans, ax, c, yc, r, t, y, z;  double pk, pkm1, pkm2, qk, qkm1, qkm2;  if (x <= 0 || a <= 0) {    return 1.0;  }  if (x < 1.0 || x < a) {    return 1.0 - incompleteGamma(a,x);  }  ax=a * Math.log(x) - x - lnGamma(a);  if (ax < -MAXLOG) {    return 0.0;  }  ax=Math.exp(ax);  y=1.0 - a;  z=x + y + 1.0;  c=0.0;  pkm2=1.0;  qkm2=x;  pkm1=x + 1.0;  qkm1=z * x;  ans=pkm1 / qkm1;  do {    c+=1.0;    y+=1.0;    z+=2.0;    yc=y * c;    pk=pkm1 * z - pkm2 * yc;    qk=qkm1 * z - qkm2 * yc;    if (qk != 0) {      r=pk / qk;      t=Math.abs((ans - r) / r);      ans=r;    } else {      t=1.0;    }    pkm2=pkm1;    pkm1=pk;    qkm2=qkm1;    qkm1=qk;    if (Math.abs(pk) > big) {      pkm2*=biginv;      pkm1*=biginv;      qkm2*=biginv;      qkm1*=biginv;    }  } while (t > MACHEP);  return ans * ax;}  }
class C{  @Override protected void uninstallDefaults(){  if (spinner.getLayout() instanceof UIResource) {    spinner.setLayout(null);  }  SeaGlassContext context=getContext(spinner,ENABLED);  style.uninstallDefaults(context);  context.dispose();  style=null;}  }
class C{  public static void swap(QuadEdge e){  QuadEdge a=e.oPrev();  QuadEdge b=e.sym().oPrev();  splice(e,a);  splice(e.sym(),b);  splice(e,a.lNext());  splice(e.sym(),b.lNext());  e.setOrig(a.dest());  e.setDest(b.dest());}  }
class C{  public void emitUnpack(){  println("\";");  nl();  println("  private static int [] zzUnpack" + name + "() {");  println("    int [] result = new int[" + numEntries + "];");  println("    int offset = 0;");  for (int i=0; i < chunks; i++) {    println("    offset = zzUnpack" + name + "("+ constName()+ "_PACKED_"+ i+ ", offset, result);");  }  println("    return result;");  println("  }");  nl();  println("  private static int zzUnpack" + name + "(String packed, int offset, int [] result) {");  println("    int i = 0;       /* index in packed string  */");  println("    int j = offset;  /* index in unpacked array */");  println("    int l = packed.length();");  println("    while (i < l) {");  println("      int count = packed.charAt(i++);");  println("      int value = packed.charAt(i++);");  if (translate == 1) {    println("      value--;");  } else   if (translate != 0) {    println("      value-= " + translate);  }  println("      do result[j++] = value; while (--count > 0);");  println("    }");  println("    return j;");  println("  }");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:10.381 -0500",hash_original_method="B1073C897629A80ACF121B885B215CE1",hash_generated_method="860CAEA16F17D025A9FE6B9E6EA8EF38") public static void loadTexture(int target,int level,int border,int fallbackFormat,int fallbackType,ETC1Texture texture){  if (fallbackFormat != GLES10.GL_RGB) {    throw new IllegalArgumentException("fallbackFormat must be GL_RGB");  }  if (!(fallbackType == GLES10.GL_UNSIGNED_SHORT_5_6_5 || fallbackType == GLES10.GL_UNSIGNED_BYTE)) {    throw new IllegalArgumentException("Unsupported fallbackType");  }  int width=texture.getWidth();  int height=texture.getHeight();  Buffer data=texture.getData();  if (isETC1Supported()) {    int imageSize=data.remaining();    GLES10.glCompressedTexImage2D(target,level,ETC1.ETC1_RGB8_OES,width,height,border,imageSize,data);  } else {    boolean useShorts=fallbackType != GLES10.GL_UNSIGNED_BYTE;    int pixelSize=useShorts ? 2 : 3;    int stride=pixelSize * width;    ByteBuffer decodedData=ByteBuffer.allocateDirect(stride * height).order(ByteOrder.nativeOrder());    ETC1.decodeImage(data,decodedData,width,height,pixelSize,stride);    GLES10.glTexImage2D(target,level,fallbackFormat,width,height,border,fallbackFormat,fallbackType,decodedData);  }}  }
class C{  public static Builder builder(PollResponse response){  return new Builder(response);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean isWinNT31(){  return this.winNT31;}  }
class C{  private void handleDeactivateProduct(TriggerProcess process,LocalizerFacade facade) throws IOException, WSDLException, ParserConfigurationException {  INotificationServiceAdapter serviceClient=getServiceClient(process.getTriggerDefinition());  VOTriggerProcess vo=TriggerProcessAssembler.toVOTriggerProcess(process,facade);  VOService product=getParamValue(process.getParamValueForName(TriggerProcessParameterName.PRODUCT),VOService.class);  serviceClient.onDeactivateProduct(VOConverter.convertToApi(vo),VOConverter.convertToApi(product));  updateProcessState(process);}  }
class C{  public static boolean isValidBlurRadius(int value){  return value >= MIN_BLUR_RADIUS && value <= MAX_BLUR_RADIUS;}  }
class C{  public int compress(ByteBuffer in,int inPos,byte[] out,int outPos){  int inLen=in.capacity() - inPos;  if (cachedHashTable == null) {    cachedHashTable=new int[HASH_SIZE];  }  int[] hashTab=cachedHashTable;  int literals=0;  outPos++;  int future=first(in,0);  while (inPos < inLen - 4) {    byte p2=in.get(inPos + 2);    future=(future << 8) + (p2 & 255);    int off=hash(future);    int ref=hashTab[off];    hashTab[off]=inPos;    if (ref < inPos && ref > 0 && (off=inPos - ref - 1) < MAX_OFF && in.get(ref + 2) == p2 && in.get(ref + 1) == (byte)(future >> 8) && in.get(ref) == (byte)(future >> 16)) {      int maxLen=inLen - inPos - 2;      if (maxLen > MAX_REF) {        maxLen=MAX_REF;      }      if (literals == 0) {        outPos--;      } else {        out[outPos - literals - 1]=(byte)(literals - 1);        literals=0;      }      int len=3;      while (len < maxLen && in.get(ref + len) == in.get(inPos + len)) {        len++;      }      len-=2;      if (len < 7) {        out[outPos++]=(byte)((off >> 8) + (len << 5));      } else {        out[outPos++]=(byte)((off >> 8) + (7 << 5));        out[outPos++]=(byte)(len - 7);      }      out[outPos++]=(byte)off;      outPos++;      inPos+=len;      future=first(in,inPos);      future=next(future,in,inPos);      hashTab[hash(future)]=inPos++;      future=next(future,in,inPos);      hashTab[hash(future)]=inPos++;    } else {      out[outPos++]=in.get(inPos++);      literals++;      if (literals == MAX_LITERAL) {        out[outPos - literals - 1]=(byte)(literals - 1);        literals=0;        outPos++;      }    }  }  while (inPos < inLen) {    out[outPos++]=in.get(inPos++);    literals++;    if (literals == MAX_LITERAL) {      out[outPos - literals - 1]=(byte)(literals - 1);      literals=0;      outPos++;    }  }  out[outPos - literals - 1]=(byte)(literals - 1);  if (literals == 0) {    outPos--;  }  return outPos;}  }
class C{  public static Database create(Database.FileFormat fileFormat,File mdbFile) throws IOException {  return new DatabaseBuilder(mdbFile).setFileFormat(fileFormat).create();}  }
class C{  private void copyFormat(int AD_PrintFormat_ID,int To_Client_ID){  MPrintFormat pf=MPrintFormat.copyToClient(Env.getCtx(),AD_PrintFormat_ID,To_Client_ID);  launchReport(pf);}  }
class C{  public void layout(Graphics2D g2,Dimension dim){  this.dim=dim;  if (dim != null) {    panel.setSize(dim);  }  panel.doDocumentLayout(g2);}  }
class C{  public MSF4JClient.Builder<T> fallbackFactory(FallbackFactory<? extends T> fallbackFactory){  this.fallbackFactory=fallbackFactory;  return this;}  }
class C{  private void addAllInRange(Population pop,double[] weights,int startIndex,int minNumberOfFeatures,int maxNumberOfFeatures){  if (startIndex >= weights.length) {    return;  }  Individual individual=new Individual(weights);  int numberOfFeatures=individual.getNumberOfUsedAttributes();  if (maxNumberOfFeatures > 0) {    if (numberOfFeatures > maxNumberOfFeatures) {      return;    }  }  double[] clone=individual.getWeightsClone();  clone[startIndex]=0;  addAllInRange(pop,clone,startIndex + 1,minNumberOfFeatures,maxNumberOfFeatures);  double[] clone2=individual.getWeightsClone();  clone2[startIndex]=1.0d;  Individual newIndividual=new Individual(clone2);  numberOfFeatures=newIndividual.getNumberOfUsedAttributes();  if (numberOfFeatures > 0) {    if ((maxNumberOfFeatures < 1 || numberOfFeatures <= maxNumberOfFeatures) && numberOfFeatures >= minNumberOfFeatures) {      pop.add(newIndividual);    }  }  addAllInRange(pop,clone2,startIndex + 1,minNumberOfFeatures,maxNumberOfFeatures);}  }
class C{  @Override public boolean eventGeneratable(String eventName){  if (eventName.compareTo("dataSet") != 0) {    return false;  }  if (eventName.compareTo("dataSet") == 0) {    if (m_dataProvider == null) {      m_connectedFormat=null;      notifyDataFormatListeners();      return false;    } else {      if (m_dataProvider instanceof EventConstraints) {        if (!((EventConstraints)m_dataProvider).eventGeneratable("dataSet")) {          m_connectedFormat=null;          notifyDataFormatListeners();          return false;        }      }    }  }  return true;}  }
class C{  public static int crossQuad(double x1,double y1,double cx,double cy,double x2,double y2,double x,double y){  if ((x < x1 && x < cx && x < x2) || (x > x1 && x > cx && x > x2) || (y > y1 && y > cy && y > y2)|| (x1 == cx && cx == x2)) {    return 0;  }  if (y < y1 && y < cy && y < y2 && x != x1 && x != x2) {    if (x1 < x2) {      return x1 < x && x < x2 ? 1 : 0;    }    return x2 < x && x < x1 ? -1 : 0;  }  QuadCurve c=new QuadCurve(x1,y1,cx,cy,x2,y2);  double px=x - x1;  double py=y - y1;  double res[]=new double[3];  int rc=c.solvePoint(res,px);  return c.cross(res,rc,py,py);}  }
class C{  public boolean validUtf8(int[] data){  int count=0;  for (  int c : data) {    if (count == 0) {      if ((c >> 5) == 0b110) {        count=1;      } else       if ((c >> 4) == 0b1110) {        count=2;      } else       if ((c >> 3) == 0b11110) {        count=3;      } else       if ((c >> 7) > 0) {        return false;      }    } else {      if ((c >> 6) != 0b10) {        return false;      }      count--;    }  }  return count == 0;}  }
class C{  public int hashCode(){  long bits=1L;  bits=31L * bits + VecMathUtil.floatToIntBits(x);  bits=31L * bits + VecMathUtil.floatToIntBits(y);  return (int)(bits ^ (bits >> 32));}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public IgniteThreadPoolExecutor(int corePoolSize,int maxPoolSize,long keepAliveTime,BlockingQueue<Runnable> workQueue){  this(corePoolSize,maxPoolSize,keepAliveTime,workQueue,new IgniteThreadFactory(null),null);}  }
class C{  public static BufferedImage toBufferedImage(Image img,Color bgColor){  if (img instanceof BufferedImage && bgColor == TRANSPARENT) {    return (BufferedImage)img;  }  BufferedImage bi=new BufferedImage(img.getWidth(null),img.getHeight(null),BufferedImage.TYPE_INT_ARGB);  Graphics2D bGr=bi.createGraphics();  bGr.drawImage(img,0,0,bgColor,null);  bGr.dispose();  return bi;}  }
class C{  public void deOwner(UserHostmask user){  if (user == null)   throw new IllegalArgumentException("Can't remove owner on null user");  setMode("-q " + user.getNick());}  }
class C{  public final Vec2 mul(float a){  return new Vec2(x * a,y * a);}  }
class C{  @SuppressWarnings("resource") @Test public void testSynthesize() throws IOException, InterruptedException {  final File audio=new File("src/test/resources/speech_to_text/sample1.wav");  final Buffer buffer=new Buffer().write(Files.toByteArray(audio));  server.enqueue(new MockResponse().addHeader(CONTENT_TYPE,HttpMediaType.AUDIO_WAV).setBody(buffer));  final InputStream in=service.synthesize(text,Voice.EN_LISA,new AudioFormat(HttpMediaType.AUDIO_PCM + "; rate=16000")).execute();  final RecordedRequest request=server.takeRequest();  final HttpUrl requestUrl=HttpUrl.parse("http://www.example.com" + request.getPath());  assertEquals(SYNTHESIZE_PATH,requestUrl.encodedPath());  assertEquals(text,requestUrl.queryParameter("text"));  assertEquals(Voice.EN_LISA.getName(),requestUrl.queryParameter("voice"));  assertEquals(HttpMediaType.AUDIO_PCM + "; rate=16000",requestUrl.queryParameter("accept"));  assertNotNull(in);  writeInputStreamToOutputStream(in,new FileOutputStream("target/output.wav"));}  }
class C{  public static void readFully(FileChannel file,long pos,ByteBuffer dst){  try {    do {      int len=file.read(dst,pos);      if (len < 0) {        throw new EOFException();      }      pos+=len;    } while (dst.remaining() > 0);    dst.rewind();  } catch (  IOException e) {    long size;    try {      size=file.size();    } catch (    IOException e2) {      size=-1;    }    throw newIllegalStateException(ERROR_READING_FAILED,"Reading from {0} failed; file length {1} " + "read length {2} at {3}",file,size,dst.remaining(),pos,e);  }}  }
class C{  public void addRelation(Relation relation){  getRelations().add(relation);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:07.750 -0500",hash_original_method="7730219D57FA624E42FCB8EA28B30401",hash_generated_method="304A07393478892767F1C29F32540023") public static boolean isNegativePermanent(int reply){  return (reply >= 500 && reply < 600);}  }
class C{  public static Collection<JsonElement> findCallTargets(JsonElement projectCalleeHierarchy,IMethod jdtMethod,String jdtClassName,String srcClassName,int srcLine){  if (projectCalleeHierarchy == null)   return null;  String jdtMethodName=jdtMethod.getElementName();  String[] paramTypes=jdtMethod.getParameterTypes();  Map<String,JsonElement> callTargetsMap=new HashMap<String,JsonElement>();  findCallTargets(projectCalleeHierarchy,jdtMethodName,paramTypes,jdtClassName,srcClassName,srcLine,callTargetsMap);  return callTargetsMap.values();}  }
class C{  public String format(final Object... values){  final StringWriter out=new StringWriter();  try {    new CSVPrinter(out,this).printRecord(values);    return out.toString().trim();  } catch (  final IOException e) {    throw new IllegalStateException(e);  }}  }
class C{  @Override public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {  Map<String,String> attributesMap=getAttributesMap(attributes);  if (qName.equals(TAG_ROOT)) {    if (!itemStack.isEmpty()) {      throw new SAXException("Invalid use of element " + TAG_ROOT);    }  } else   if (qName.equals(TAG_GROUP) && itemStack.isEmpty()) {    String propertyKey=getAttribute(attributesMap,ATTRIBUTE_KEY,true);    itemStack.add(new SettingsItem(propertyKey,getLastStackItem(),Type.GROUP));  } else   if (qName.equals(TAG_GROUP) && !itemStack.isEmpty() && itemStack.size() < MAX_GROUP_LEVEL) {    if (!getLastStackItem().getType().equals(SettingsItem.Type.GROUP)) {      throw new SAXException("Invalid use of element " + TAG_GROUP + ". Parent element is not "+ TAG_GROUP);    }    String propertyKey=getAttribute(attributesMap,ATTRIBUTE_KEY,true);    if (!propertyKey.startsWith(SUBGROUP_PREFIX)) {      throw new SAXException("Invalid value for attribute '" + ATTRIBUTE_KEY + "' in element '"+ TAG_GROUP+ "': "+ propertyKey);    }    itemStack.add(new SettingsItem(propertyKey,getLastStackItem(),Type.SUB_GROUP));  } else   if (qName.equals(TAG_GROUP)) {    String propertyKey=getAttribute(attributesMap,ATTRIBUTE_KEY,true);    throw new SAXException("Invalid use of element '" + TAG_GROUP + "' (key: "+ propertyKey+ "')");  } else   if (qName.equals(TAG_PROPERTY)) {    if (itemStack.isEmpty()) {      throw new SAXException("Invalid use of element " + TAG_PROPERTY);    } else     if (!getLastStackItem().getType().equals(SettingsItem.Type.GROUP) && !getLastStackItem().getType().equals(SettingsItem.Type.SUB_GROUP)) {      throw new SAXException("Invalid use of element " + TAG_PROPERTY + ". Parent element is not "+ TAG_GROUP);    }    String propertyKey=getAttribute(attributesMap,ATTRIBUTE_KEY,true);    itemStack.add(new SettingsItem(propertyKey,getLastStackItem(),Type.PARAMETER));  } else {    throw new SAXException("Unknown tag or usage: " + qName);  }}  }
class C{  public void testSimpleBuilderArrayNotRegistered() throws Exception {  checkSimpleBuilderArray(false);}  }
class C{  @Override protected void writeColumnAutoIncrementStmt(Table table,Column column,StringBuilder ddl){  ddl.append("AUTOINCREMENT");}  }
class C{  public void reset(){  if (!Double.isNaN(m_unitValue) || !Double.isNaN(m_unitError)) {    m_unitValue=Double.NaN;    m_unitError=Double.NaN;    m_weightsUpdated=false;    for (int noa=0; noa < m_numInputs; noa++) {      m_inputList[noa].reset();    }  }}  }
class C{  private void removeAllDocumentsFromIndex(){  Index index=PlacesHelper.getIndex();  final int numberOfDocuments=1000;  while (true) {    GetRequest request=GetRequest.newBuilder().setReturningIdsOnly(true).build();    ArrayList<String> documentIds=new ArrayList<>(numberOfDocuments);    GetResponse<Document> response=index.getRange(request);    for (    Document document : response.getResults()) {      documentIds.add(document.getId());    }    if (documentIds.size() == 0) {      break;    }    index.delete(documentIds);  }}  }
class C{  @Override public boolean execute(final String[] params,final String remainder){  final RPAction action=new RPAction();  action.put("type","grumpy");  if (remainder.length() != 0) {    action.put("reason",remainder);  }  ClientSingletonRepository.getClientFramework().send(action);  return true;}  }
class C{  public void testCustomStopwords() throws Exception {  PersianAnalyzer a=new PersianAnalyzer(new CharArraySet(asSet("the","and","a"),false));  assertAnalyzesTo(a,"The quick brown fox.",new String[]{"quick","brown","fox"});  a.close();}  }
class C{  private static Charset toCharset(String csn) throws UnsupportedEncodingException {  Objects.requireNonNull(csn,"charsetName");  try {    return Charset.forName(csn);  } catch (  IllegalCharsetNameException|UnsupportedCharsetException unused) {    throw new UnsupportedEncodingException(csn);  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.VARIABLE_STATEMENT__VAR_DECLS_OR_BINDINGS:    return varDeclsOrBindings != null && !varDeclsOrBindings.isEmpty();case N4JSPackage.VARIABLE_STATEMENT__VAR_STMT_KEYWORD:  return varStmtKeyword != VAR_STMT_KEYWORD_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  public void testCapabilitiesLogQuery() throws RemoteException {  Cursor cursor=null;  try {    String where=CapabilitiesLog.CONTACT.concat("=?");    String[] whereArgs=new String[]{"+339000000"};    cursor=mProvider.query(CapabilitiesLog.CONTENT_URI,CAPABILITIES_LOG_PROJECTION,where,whereArgs,null);    assertNotNull(cursor);  }  finally {    if (cursor != null) {      cursor.close();    }  }}  }
class C{  public static int charAt(char source[],int start,int limit,int offset16){  offset16+=start;  if (offset16 < start || offset16 >= limit) {    throw new ArrayIndexOutOfBoundsException(offset16);  }  char single=source[offset16];  if (!isSurrogate(single)) {    return single;  }  if (single <= LEAD_SURROGATE_MAX_VALUE) {    offset16++;    if (offset16 >= limit) {      return single;    }    char trail=source[offset16];    if (isTrailSurrogate(trail)) {      return UCharacterProperty.getRawSupplementary(single,trail);    }  } else {    if (offset16 == start) {      return single;    }    offset16--;    char lead=source[offset16];    if (isLeadSurrogate(lead))     return UCharacterProperty.getRawSupplementary(lead,single);  }  return single;}  }
class C{  public synchronized void removeSeries(XYSeries series){  mSeries.remove(series);}  }
class C{  private Ref eqvOp() throws PageException {  Ref ref=xorOp();  while (cfml.forwardIfCurrent("eqv")) {    cfml.removeSpace();    ref=new EQV(ref,xorOp());  }  return ref;}  }
class C{  @Ignore @Test(timeout=10000) public void testEntityExpansionNoSecureProcessing() throws Exception {  final Model aGraph=new LinkedHashModel();  ParseErrorCollector errorCollector=new ParseErrorCollector();  RDFParser aParser=Rio.createParser(RDFFormat.RDFXML).setRDFHandler(new StatementCollector(aGraph)).set(XMLParserSettings.SECURE_PROCESSING,false).setParseErrorListener(errorCollector);  try {    aParser.parse(this.getClass().getResourceAsStream("/testcases/rdfxml/openrdf/bad-entity-expansion-limit.rdf"),"http://example.org");    fail("Parser did not throw an exception");  } catch (  RDFParseException e) {  }  assertEquals(0,errorCollector.getWarnings().size());  assertEquals(0,errorCollector.getErrors().size());  assertEquals(1,errorCollector.getFatalErrors().size());}  }
class C{  private static <T>void batchFastListCollect(T[] array,int start,int end,FastListCollectProcedure<T,?> castProcedure){  for (int i=start; i < end; i++) {    castProcedure.value(array[i]);  }}  }
class C{  @FlashException() public static void ipReconfigStatusJson(){  ViPRSystemClient client=BourneUtil.getSysClient();  ClusterNetworkReconfigStatus ipReconfigStatus=client.control().getClusterIpReconfigStatus();  Gson gson=new Gson();  String ipReconfigStatusJSON=gson.toJson(ipReconfigStatus);  renderJSON(ipReconfigStatusJSON);}  }
class C{  public static boolean updateFields(HttpServletRequest request,WebUser wu,boolean updateEMailPwd){  if (updateEMailPwd) {    String s=MobileUtil.getParameter(request,"PasswordNew");    wu.setPasswordMessage(null);    wu.setPassword(s);    if (wu.getPasswordMessage() != null) {      return false;    }    s=MobileUtil.getParameter(request,"EMail");    if (!MobileUtil.isEmailValid(s)) {      wu.setPasswordMessage("EMail Invalid");      return false;    }    wu.setEmail(s.trim());  }  StringBuffer mandatory=new StringBuffer();  String s=MobileUtil.getParameter(request,"Name");  if (s != null && s.length() != 0)   wu.setName(s.trim()); else   mandatory.append(" - Name");  s=MobileUtil.getParameter(request,"Company");  if (s != null && s.length() != 0)   wu.setCompany(s);  s=MobileUtil.getParameter(request,"Title");  if (s != null && s.length() != 0)   wu.setTitle(s);  s=MobileUtil.getParameter(request,"Address");  if (s != null && s.length() != 0)   wu.setAddress(s); else   mandatory.append(" - Address");  s=MobileUtil.getParameter(request,"Address2");  if (s != null && s.length() != 0)   wu.setAddress2(s);  s=MobileUtil.getParameter(request,"City");  if (s != null && s.length() != 0)   wu.setCity(s); else   mandatory.append(" - City");  s=MobileUtil.getParameter(request,"Postal");  if (s != null && s.length() != 0)   wu.setPostal(s); else   mandatory.append(" - Postal");  s=MobileUtil.getParameter(request,"C_Country_ID");  if (s != null && s.length() != 0)   wu.setC_Country_ID(s);  s=MobileUtil.getParameter(request,"C_Region_ID");  if (s != null && s.length() != 0)   wu.setC_Region_ID(s);  s=MobileUtil.getParameter(request,"RegionName");  if (s != null && s.length() != 0)   wu.setRegionName(s);  s=MobileUtil.getParameter(request,"Phone");  if (s != null && s.length() != 0)   wu.setPhone(s);  s=MobileUtil.getParameter(request,"Phone2");  if (s != null && s.length() != 0)   wu.setPhone2(s);  s=MobileUtil.getParameter(request,"C_BP_Group_ID");  if (s != null && s.length() != 0)   wu.setC_BP_Group_ID(s);  s=MobileUtil.getParameter(request,"Fax");  if (s != null && s.length() != 0)   wu.setFax(s);  if (mandatory.length() > 0) {    mandatory.insert(0,"Enter Mandatory");    wu.setSaveErrorMessage(mandatory.toString());    return false;  }  return wu.save();}  }
class C{  public boolean isNotificationEnabled(){  return ((ArffTableModel)getModel()).isNotificationEnabled();}  }
class C{  private void appendToEnd(Map<String,PsiMethod> sortedMethods){  for (  PsiMethod method : sortedMethods.values()) {    mPsiClass.add(method);  }}  }
class C{  private void handleNullTypeArguments(AnnotatedTypeFactory typeFactory,ExecutableElement methodElem,AnnotatedExecutableType methodType,List<AnnotatedTypeMirror> argTypes,AnnotatedTypeMirror assignedTo,Set<TypeVariable> targets,Map<TypeVariable,AnnotatedTypeMirror> inferredArgs){  if (!hasNullType(inferredArgs)) {    return;  }  final Map<TypeVariable,AnnotatedTypeMirror> inferredArgsWithOutNull=infer(typeFactory,argTypes,assignedTo,methodElem,methodType,targets,false);  for (  AnnotatedTypeVariable atv : methodType.getTypeVariables()) {    TypeVariable typeVar=atv.getUnderlyingType();    AnnotatedTypeMirror result=inferredArgs.get(typeVar);    if (result == null) {      AnnotatedTypeMirror withoutNullResult=inferredArgsWithOutNull.get(typeVar);      if (withoutNullResult != null) {        inferredArgs.put(typeVar,withoutNullResult);      }    } else     if (result.getKind() == TypeKind.NULL) {      AnnotatedTypeMirror withoutNullResult=inferredArgsWithOutNull.get(typeVar);      if (withoutNullResult == null) {        withoutNullResult=atv.getUpperBound().deepCopy();      }      AnnotatedTypeMirror lub=AnnotatedTypes.leastUpperBound(typeFactory,withoutNullResult,result);      inferredArgs.put(typeVar,lub);    }  }}  }
class C{  public static String jvmSpec(){  return jvmSpecName;}  }
class C{  public void teardown(){  holdingBuffer.clear();}  }
class C{  public static org.oscm.internal.vo.Setting convertToUp(org.oscm.vo.Setting oldVO){  if (oldVO == null) {    return null;  }  org.oscm.internal.vo.Setting newVO=new org.oscm.internal.vo.Setting();  newVO.setKey(oldVO.getKey());  newVO.setValue(oldVO.getValue());  return newVO;}  }
class C{  protected void deactivateNode(ActiveHNode toDeactivate,SplitNode parent,String parentBranch){  HNode leaf=new InactiveHNode(toDeactivate.m_classDistribution);  if (parent == null) {    m_root=leaf;  } else {    parent.setChild(parentBranch,leaf);  }  m_activeLeafCount--;  m_inactiveLeafCount++;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  int filterSizeX=3;  int filterSizeY=3;  int dX[];  int dY[];  int midPointX;  int midPointY;  int numPixelsInFilter;  int dataSize;  int count;  int modeCount;  double mode;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  ArrayList<Double> data=new ArrayList<Double>();  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      filterSizeX=Integer.parseInt(args[i]);    } else     if (i == 3) {      filterSizeY=Integer.parseInt(args[i]);    } else     if (i == 4) {      filterRounded=Boolean.parseBoolean(args[i]);    } else     if (i == 5) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          data.clear();          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z != noData && filterShape[a] == 1) {              data.add(z);            }          }          Collections.sort(data);          dataSize=data.size();          z=data.get(0);          mode=z;          modeCount=1;          count=1;          for (a=1; a < dataSize; a++) {            if (data.get(a) == z) {              count++;            } else {              if (count > modeCount) {                mode=z;                modeCount=count;              }              count=1;              z=data.get(a);            }          }          if (count > modeCount) {            mode=z;          }          outputFile.setValue(row,col,mode);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public GitlabNote updateNote(GitlabMergeRequest mergeRequest,Integer noteId,String body) throws IOException {  Query query=new Query().appendIf("body",body);  String tailUrl=GitlabProject.URL + "/" + mergeRequest.getProjectId()+ GitlabMergeRequest.URL+ "/"+ mergeRequest.getId()+ GitlabNote.URL+ "/"+ noteId+ query.toString();  return retrieve().method("PUT").to(tailUrl,GitlabNote.class);}  }
class C{  public void onBlueButtonClick(View v){  if (isSubscribed()) {    final SharedPreferences settings=getSharedPreferencesForCurrentUser();    boolean entitled=settings.getBoolean(BLUE_BUTTON,false);    if (!entitled) {      String requestId=PurchasingManager.initiatePurchaseRequest(getResources().getString(R.string.entitlement_sku_blue));      storeRequestId(requestId,BLUE_BUTTON);    } else {      centerButton.setBackgroundDrawable(getResources().getDrawable(R.drawable.bluebutton));    }  } else {    generateSubscribeDialog();  }}  }
class C{  private Annotation generateAnnotation(){  return AnnotationParser.annotationForMap(annoType,getAllReflectedValues());}  }
class C{  public boolean onGesture(){  if (mNodeSearch.isActive()) {    cancelSearch();    return true;  }  return false;}  }
class C{  public void addSubplotInfo(PlotRenderingInfo info){  this.subplotInfo.add(info);}  }
class C{  public FileParsingIdentifierSourceSet(InputStream instanceData,InputStream metricData,IdentifierSourceSet fallbacks){  super(StringIterable.fromStream(instanceData),StringIterable.fromStream(metricData),fallbacks);}  }
class C{  protected final void finalize(){}  }
class C{  public com.lynden.gmapsfx.javascript.object.MapOptions convert(){  if (Platform.isFxApplicationThread()) {    com.lynden.gmapsfx.javascript.object.MapOptions ops=new com.lynden.gmapsfx.javascript.object.MapOptions().mapMarker(mapMarker).overviewMapControl(overviewMapControl).panControl(panControl).rotateControl(rotateControl).scaleControl(scaleControl).streetViewControl(streetViewControl).zoom(zoom == 0 ? 15 : zoom).zoomControl(zoomControl).mapTypeControl(mapTypeControl);    if (center != null) {      ops.center(center.toLatLong());    }    if (mapType != null) {      ops.mapType(mapType.convert());    }    return ops;  }  return null;}  }
class C{  public static boolean isWindows(){  return (OS_NAME.contains("win"));}  }
class C{  public JSONObject(JSONTokener x) throws JSONException {  this();  char c;  String key;  if (x.nextClean() != '{') {    throw x.syntaxError("A JSONObject text must begin with '{'");  }  for (; ; ) {    c=x.nextClean();switch (c) {case 0:      throw x.syntaxError("A JSONObject text must end with '}'");case '}':    return;default :  x.back();key=x.nextValue().toString();}c=x.nextClean();if (c == '=') {if (x.next() != '>') {x.back();}} else if (c != ':') {throw x.syntaxError("Expected a ':' after a key");}this.myHashMap.put(key,x.nextValue());switch (x.nextClean()) {case ';':case ',':if (x.nextClean() == '}') {return;}x.back();break;case '}':return;default :throw x.syntaxError("Expected a ',' or '}'");}}}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ANONYMOUS_METHOD_BODY_1__PRECONDITION_1:    getPrecondition_1().clear();  getPrecondition_1().addAll((Collection<? extends Precondition_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static void init(Process process){  long seed=2001;  if (process != null) {    try {      seed=process.getRootOperator().getParameterAsInt(ProcessRootOperator.PARAMETER_RANDOM_SEED);    } catch (    UndefinedParameterError e) {      seed=2001;    }  }  if (seed == -1) {    globalRandomGenerator=new RandomGenerator();  } else {    globalRandomGenerator=new RandomGenerator(seed);  }}  }
class C{  private OverlayKey[] createOverlayStoreKeys(){  List overlayKeys=new ArrayList();  Iterator i=getStylePreferenceKeysWithHTML().iterator();  while (i.hasNext()) {    overlayKeys.add(new OverlayPreferenceStore.OverlayKey(OverlayPreferenceStore.STRING,(String)i.next()));  }  OverlayPreferenceStore.OverlayKey[] keys=new OverlayPreferenceStore.OverlayKey[overlayKeys.size()];  overlayKeys.toArray(keys);  return keys;}  }
class C{  public TreeSet(Collection c){  this();  addAll(c);}  }
class C{  @Override public boolean isValidEntity(Entity entity,IGame game,boolean useValidNonInfantryCheck){  return super.isValidEntity(entity,game,useValidNonInfantryCheck) && (entity.getId() == entityId);}  }
class C{  public void startAppsSearch(){  if (mSearchBarController != null) {    mSearchBarController.focusSearchField();  }}  }
class C{  private XLog(){}  }
class C{  public static Track parseTrak(Atom.ContainerAtom trak,Atom.LeafAtom mvhd){  Atom.ContainerAtom mdia=trak.getContainerAtomOfType(Atom.TYPE_mdia);  int trackType=parseHdlr(mdia.getLeafAtomOfType(Atom.TYPE_hdlr).data);  Assertions.checkState(trackType == Track.TYPE_AUDIO || trackType == Track.TYPE_VIDEO || trackType == Track.TYPE_TEXT || trackType == Track.TYPE_TIME_CODE);  Pair<Integer,Long> header=parseTkhd(trak.getLeafAtomOfType(Atom.TYPE_tkhd).data);  int id=header.first;  long duration=header.second;  long movieTimescale=parseMvhd(mvhd.data);  long durationUs;  if (duration == -1) {    durationUs=C.UNKNOWN_TIME_US;  } else {    durationUs=Util.scaleLargeTimestamp(duration,C.MICROS_PER_SECOND,movieTimescale);  }  Atom.ContainerAtom stbl=mdia.getContainerAtomOfType(Atom.TYPE_minf).getContainerAtomOfType(Atom.TYPE_stbl);  long mediaTimescale=parseMdhd(mdia.getLeafAtomOfType(Atom.TYPE_mdhd).data);  Pair<MediaFormat,TrackEncryptionBox[]> sampleDescriptions=parseStsd(stbl.getLeafAtomOfType(Atom.TYPE_stsd).data);  return new Track(id,trackType,mediaTimescale,durationUs,sampleDescriptions.first,sampleDescriptions.second);}  }
class C{  public static int EKEYREJECTED(){  return 129;}  }
class C{  public IntIterator rangeSortedBy(String field,long lo,long hi,int indexType){  Index index=getIndex(field,long.class,true);  return index.rows(lo,hi,indexType);}  }
class C{  Record(Level level,String msg,String sourceClassName,String sourceMethodName){  super(level,msg);  setSourceClassName(sourceClassName);  setSourceMethodName(sourceMethodName);  formatterFormat=null;  formatterArgs=null;}  }
class C{  protected boolean isJdk13LumberjackAvailable(){  return isLogLibraryAvailable("Jdk13Lumberjack","org.apache.commons.logging.impl.Jdk13LumberjackLogger");}  }
class C{  public int cardinality(){  int sum=0;  for (int i=0; i < unitsInUse; i++)   sum+=bitCount(bits[i]);  return sum;}  }
class C{  public void translate(double transX,double transY){  if (isNull()) {    return;  }  init(getMinX() + transX,getMaxX() + transX,getMinY() + transY,getMaxY() + transY);}  }
class C{  static String whichInitiates(String a,String b) throws NoSuchAlgorithmException, UnsupportedEncodingException {  if (a == null || b == null) {    return null;  }  if (a.compareTo(b) < 0) {    if (startsWithAOneBit(concatAndHash(a,b))) {      return a;    } else {      return b;    }  } else {    if (startsWithAOneBit(concatAndHash(b,a))) {      return b;    } else {      return a;    }  }}  }
class C{  private static boolean isExpectedCommandOutput(String[] command,String expectedOutput,boolean toLowerCase){  boolean found=false;  try {    Process proc=Runtime.getRuntime().exec(command);    BufferedReader in=new BufferedReader(new InputStreamReader(proc.getInputStream()));    String line=null;    while ((line=in.readLine()) != null && !found) {      if (expectedOutput.indexOf("*") != -1) {        if (line.isEmpty()) {          found=false;          break;        } else {          found=true;        }      } else {        if (toLowerCase)         line=line.toLowerCase();        if (line.indexOf(expectedOutput) != -1) {          found=true;        }      }    }    BufferedReader err=new BufferedReader(new InputStreamReader(proc.getErrorStream()));    line=null;    while ((line=err.readLine()) != null) {    }    int result=proc.waitFor();    if (result != 0) {    }  } catch (  Exception e) {    e.printStackTrace();  }  return found;}  }
class C{  void showSaveReminder(){  if (_showReminder) {    if (InstanceManager.getNullableDefault(jmri.UserPreferencesManager.class) != null) {      InstanceManager.getDefault(jmri.UserPreferencesManager.class).showInfoMessage(Bundle.getMessage("ReminderTitle"),Bundle.getMessage("ReminderSaveString",Bundle.getMessage("MenuItemLogixTable")),getClassName(),"remindSaveLogix");    }  }}  }
class C{  public int hashCode(){  int retval=0;  for (int i=0; i < address.length; i++)   retval+=address[i] * i;  return retval;}  }
class C{  public ByteRequest(int method,String url,Listener<byte[]> listener,Response.ErrorListener errorListener){  super(method,url,errorListener);  mListener=listener;}  }
class C{  public DependencyContainer remove(Dependency dependency){  if (dependency == this)   throw new IllegalArgumentException("Can't remove self as a dependency.");  _dependencyList.remove(dependency);  return this;}  }
class C{  void selectType(Environment env,Context ctx,int tm){  if ((tm & TM_BOOLEAN) != 0) {    type=Type.tBoolean;  } else   if ((tm & TM_LONG) != 0) {    type=Type.tLong;  } else {    type=Type.tInt;  }  left=convert(env,ctx,type,left);  right=convert(env,ctx,type,right);}  }
class C{  public PasswordField(String name){  super(name,Field.Type.PASSWORD);}  }
class C{  private void removeComponent(){  ComponentHolder.getInstance().remove(mFragmentId);}  }
class C{  @Nullable public static PsiFile findInjectedPsiNoCommit(@NotNull PsiFile host,int offset){  PsiElement injected=findInjectedElementNoCommit(host,offset);  return injected == null ? null : injected.getContainingFile();}  }
class C{  public CharSequenceReader(final CharSequence charSequence){  this.charSequence=charSequence != null ? charSequence : "";}  }
class C{  static public void assertBottomAligned(View first,View second,int margin){  int[] xy=new int[2];  first.getLocationOnScreen(xy);  int firstBottom=xy[1] + first.getMeasuredHeight();  second.getLocationOnScreen(xy);  int secondBottom=xy[1] + second.getMeasuredHeight();  assertEquals("views are not bottom aligned",Math.abs(firstBottom - secondBottom),margin);}  }
class C{  public synchronized boolean remove(File file){  if (value.remove(file)) {    setValue(value);    return true;  } else {    return false;  }}  }
class C{  private void defaultSort(IColumnStore columnStore){  for (  IColumn column : columnStore.getAllColumns()) {    if (!(column instanceof IconColumn)) {      searchTableComparator.setColumn(column);      refresh();      return;    }  }}  }
class C{  static AxesWalker loadOneWalker(WalkingIterator lpi,Compiler compiler,int stepOpCodePos) throws javax.xml.transform.TransformerException {  AxesWalker firstWalker=null;  int stepType=compiler.getOp(stepOpCodePos);  if (stepType != OpCodes.ENDOP) {    firstWalker=createDefaultWalker(compiler,stepType,lpi,0);    firstWalker.init(compiler,stepOpCodePos,stepType);  }  return firstWalker;}  }
class C{  public static <T,X extends Throwable>Tuple3<CompletableFuture<Subscription>,Runnable,CompletableFuture<Boolean>> forEachXWithError(final LazyFutureStream<T> stream,final long x,final Consumer<? super T> consumerElement,final Consumer<? super Throwable> consumerError){  final CompletableFuture<Subscription> subscription=new CompletableFuture<>();  final CompletableFuture<Boolean> streamCompleted=new CompletableFuture<>();  return tuple(subscription,null,streamCompleted);}  }
class C{  public static @ColorInt int scrimify(@ColorInt int color,boolean isDark,@FloatRange(from=0f,to=1f) float lightnessMultiplier){  float[] hsl=new float[3];  android.support.v4.graphics.ColorUtils.colorToHSL(color,hsl);  if (!isDark) {    lightnessMultiplier+=1f;  } else {    lightnessMultiplier=1f - lightnessMultiplier;  }  hsl[2]=constrain(0f,1f,hsl[2] * lightnessMultiplier);  return android.support.v4.graphics.ColorUtils.HSLToColor(hsl);}  }
class C{  public Vec4 project(Vec4 point,Matrix modelview,Matrix projection,java.awt.Rectangle viewport){  if (point == null) {    String message=Logging.getMessage("nullValue.PointIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (modelview == null || projection == null) {    String message=Logging.getMessage("nullValue.MatrixIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (viewport == null) {    String message=Logging.getMessage("nullValue.RectangleIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  double[] modelviewArray=new double[16];  double[] projectionArray=new double[16];  modelview.toArray(modelviewArray,0,false);  projection.toArray(projectionArray,0,false);  int[] viewportArray=new int[]{viewport.x,viewport.y,viewport.width,viewport.height};  double[] result=new double[3];  if (!this.dc.getGLU().gluProject(point.x,point.y,point.z,modelviewArray,0,projectionArray,0,viewportArray,0,result,0)) {    return null;  }  return Vec4.fromArray3(result,0);}  }
class C{  public DESKeySpec(byte[] key,int offset) throws InvalidKeyException {  if (key == null) {    throw new NullPointerException("key == null");  }  if (key.length - offset < DES_KEY_LEN) {    throw new InvalidKeyException("key too short");  }  this.key=new byte[DES_KEY_LEN];  System.arraycopy(key,offset,this.key,0,DES_KEY_LEN);}  }
class C{  public Object invoke(Message<?> message,Object... providedArgs) throws Exception {  Class<? extends Object> payloadClass=message.getPayload().getClass();  InvocableHandlerMethod handler=getHandlerForPayload(payloadClass);  return handler.invoke(message,providedArgs);}  }
class C{  public void removeListener(final ICodeBookmarkManagerListener listener){  m_listeners.removeListener(listener);}  }
class C{  public int search(final CharList list){  return search(list,0,list.size());}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.STRING_EVALUATOR;}  }
class C{  public UtilityEstimate(double firstValue){  update(firstValue);}  }
class C{  public SetupWizard(String title){  this.title=title;  this.components=new ArrayList<>();}  }
class C{  @Inject protected FqnResolverFactory(){  this.resolvers=new HashMap<>();  this.listeners=new LinkedList<>();}  }
class C{  public void apply(){  if (mChart instanceof XYChart) {    if (((XYChart)mChart).getDataset() == null) {      return;    }    int scales=mRenderer.getScalesCount();    if (mRenderer.isInitialRangeSet()) {      for (int i=0; i < scales; i++) {        if (mRenderer.isInitialRangeSet(i)) {          mRenderer.setRange(mRenderer.getInitialRange(i),i);        }      }    } else {      XYSeries[] series=((XYChart)mChart).getDataset().getSeries();      double[] range=null;      int length=series.length;      if (length > 0) {        for (int i=0; i < scales; i++) {          range=new double[]{MathHelper.NULL_VALUE,-MathHelper.NULL_VALUE,MathHelper.NULL_VALUE,-MathHelper.NULL_VALUE};          for (int j=0; j < length; j++) {            if (i == series[j].getScaleNumber()) {              range[0]=Math.min(range[0],series[j].getMinX());              range[1]=Math.max(range[1],series[j].getMaxX());              range[2]=Math.min(range[2],series[j].getMinY());              range[3]=Math.max(range[3],series[j].getMaxY());            }          }          double marginX=Math.abs(range[1] - range[0]) / 40;          double marginY=Math.abs(range[3] - range[2]) / 40;          mRenderer.setRange(new double[]{range[0] - marginX,range[1] + marginX,range[2] - marginY,range[3] + marginY},i);        }      }    }  } else {    DefaultRenderer renderer=((RoundChart)mChart).getRenderer();    renderer.setScale(renderer.getOriginalScale());  }}  }
class C{  protected static final int selectColorFormat(final MediaCodecInfo codecInfo,final String mimeType){  if (DEBUG)   Log.i(TAG,"selectColorFormat: ");  int result=0;  final MediaCodecInfo.CodecCapabilities caps;  try {    Thread.currentThread().setPriority(Thread.MAX_PRIORITY);    caps=codecInfo.getCapabilitiesForType(mimeType);  }  finally {    Thread.currentThread().setPriority(Thread.NORM_PRIORITY);  }  int colorFormat;  for (int i=0; i < caps.colorFormats.length; i++) {    colorFormat=caps.colorFormats[i];    if (isRecognizedViewoFormat(colorFormat)) {      if (result == 0)       result=colorFormat;      break;    }  }  if (result == 0)   Log.e(TAG,"couldn't find a good color format for " + codecInfo.getName() + " / "+ mimeType);  return result;}  }
class C{  public Boolean isIpV6Enabled(){  return ipV6Enabled;}  }
class C{  public void drawOutlineText(Graphics2D g2D,String text,Point pos,float fontSize,Color color,boolean translucent,Color cOutline){  g2D.setFont(g2D.getFont().deriveFont(fontSize));  FontMetrics fm=g2D.getFontMetrics(g2D.getFont());  int cx=pos.x - (fm.stringWidth(text) / 2);  int cy=pos.y + (fm.getAscent() - fm.getDescent()) / 2;  GlyphVector gv=g2D.getFont().createGlyphVector(g2D.getFontRenderContext(),text);  Shape shape=gv.getOutline();  shape=AffineTransform.getTranslateInstance(cx,cy).createTransformedShape(shape);  if (translucent)   color=new Color(color.getRGB() & 0x00FFFFFF | 0xA0000000,true);  g2D.setColor(color);  g2D.fill(shape);  g2D.setStroke(new BasicStroke(0.5f));  Color lineColor=cOutline;  if (translucent)   lineColor=new Color(lineColor.getRGB() & 0x00FFFFFF | 0xA0000000,true);  g2D.setColor(lineColor);  g2D.draw(shape);}  }
class C{  protected AbstractRpcRequest(Class<?> serviceType,String method,Object... args){  this(serviceType,method,ImmutableList.copyOf(args));}  }
class C{  public SpectrumColormap(){}  }
class C{  void decodeAttributeBody(byte[] attributeValue,char offset,char length) throws StunException {  if ((length % 2) != 0)   throw new StunException("Attribute IDs are 2 bytes long and the " + "passed binary array has an odd length " + "value.");  char originalOffset=offset;  for (int i=offset; i < originalOffset + length; i+=2) {    char attributeID=(char)(((attributeValue[offset++] & 0xFF) << 8) | (attributeValue[offset++] & 0xFF));    addAttributeID(attributeID);  }}  }
class C{  @CanIgnoreReturnValue public static <T>T checkNotNull(T reference,@Nullable Object errorMessage){  if (reference == null) {    throw new NullPointerException(String.valueOf(errorMessage));  }  return reference;}  }
class C{  public boolean isValidEmail(String email){  if (email == null) {    return false;  }  if (email.endsWith(".")) {    return false;  }  Matcher emailMatcher=EMAIL_PATTERN.matcher(email);  if (!emailMatcher.matches()) {    return false;  }  return true;}  }
class C{  public boolean handlesInput(){  return handlesInput;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hasAttributeNS05.class,args);}  }
class C{  public int throttleNotch(){  return ((Integer)throttle_spinner.getModel().getValue());}  }
class C{  private void rCubicTo(float dx1,float dy1,float dx2,float dy2,float dx3,float dy3){  if (isEmpty()) {    mPath.moveTo(mLastX=0,mLastY=0);  }  dx1+=mLastX;  dy1+=mLastY;  dx2+=mLastX;  dy2+=mLastY;  dx3+=mLastX;  dy3+=mLastY;  mPath.curveTo(dx1,dy1,dx2,dy2,mLastX=dx3,mLastY=dy3);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:00.853 -0500",hash_original_method="F396A87D2BE9368C37D12C0E764C04A1",hash_generated_method="4A47E56558FC986E42C18A2593CCA129") public int countTokens(){  int count=0;  boolean inToken=false;  for (int i=position, length=string.length(); i < length; i++) {    if (delimiters.indexOf(string.charAt(i),0) >= 0) {      if (returnDelimiters)       count++;      if (inToken) {        count++;        inToken=false;      }    } else {      inToken=true;    }  }  if (inToken)   count++;  return count;}  }
class C{  public static int colorARGB(int color,double alpha){  int rgb=color & 0x00FFFFFF;  int a=(int)StrictMath.rint(alpha * 255);  int argb=rgb | (a << 24);  return argb;}  }
class C{  public WordTrainGenerating(String modelDir){  this.modelDir=modelDir;  init();}  }
class C{  public FieldVisitor visitField(int access,String name,String desc,String signature,Object value){  if (cv != null) {    return cv.visitField(access,name,desc,signature,value);  }  return null;}  }
class C{  public CLQueue createDefaultProfilingQueue(){  return new CLDevice(platform,deviceIds.getSizeT()).createProfilingQueue(this);}  }
class C{  public static int ELNRNG(){  return 48;}  }
class C{  @Override public String toString(){  String str="";  if (!(condition instanceof VoidCondition)) {    str+="if (" + condition.toString() + ") then ";  } else {    str+=" ";  }  str+=output.toString();  return str;}  }
class C{  public Approximator(ApproximatorType type,double tolerance){  setup(type,tolerance);}  }
class C{  public void stopDetection(String containerId){  instances.remove(containerId);}  }
class C{  public static RowSummingExactUpdater serializableInstance(){  return new RowSummingExactUpdater(MlBayesIm.serializableInstance());}  }
class C{  public MyVehicleIdentifier(double threshold){  this.lowerThreshold=Double.MIN_VALUE;  this.upperThreshold=Double.MIN_VALUE;  this.threshold=threshold;}  }
class C{  @Deprecated public static void disableLogging(){  writeLogs(false);}  }
class C{  public static int[] HSLtoRGB(float h,float s,float l,int[] rgb){  if (rgb == null) {    rgb=new int[3];  } else   if (rgb.length < 3) {    throw new IllegalArgumentException("rgb array must have a length of" + " at least 3");  }  if (h < 0)   h=0.0f; else   if (h > 1.0f)   h=1.0f;  if (s < 0)   s=0.0f; else   if (s > 1.0f)   s=1.0f;  if (l < 0)   l=0.0f; else   if (l > 1.0f)   l=1.0f;  int R, G, B;  if (s - 0.01f <= 0.0f) {    R=(int)(l * 255.0f);    G=(int)(l * 255.0f);    B=(int)(l * 255.0f);  } else {    float var_1, var_2;    if (l < 0.5f) {      var_2=l * (1 + s);    } else {      var_2=(l + s) - (s * l);    }    var_1=2 * l - var_2;    R=(int)(255.0f * hue2RGB(var_1,var_2,h + (1.0f / 3.0f)));    G=(int)(255.0f * hue2RGB(var_1,var_2,h));    B=(int)(255.0f * hue2RGB(var_1,var_2,h - (1.0f / 3.0f)));  }  rgb[0]=R;  rgb[1]=G;  rgb[2]=B;  return rgb;}  }
class C{  @Override public String write(Experiment exp,File file){  String result;  result=null;  try {    SerializationHelper.write(file.getAbsolutePath(),exp);  } catch (  Exception e) {    result=handleException("Failed to write experiment to: " + file,e);  }  return result;}  }
class C{  public Builder detectCustomSlowCalls(){  return enable(DETECT_CUSTOM);}  }
class C{  @Deprecated public static FilteredQueryBuilder filteredQuery(@Nullable QueryBuilder queryBuilder,@Nullable QueryBuilder filterBuilder){  return new FilteredQueryBuilder(queryBuilder,filterBuilder);}  }
class C{  public void checkCareerRecords(LeagueRecords records){  for (  Player p : playersLeaving) {    if (p instanceof PlayerQB) {      PlayerQB qb=(PlayerQB)p;      records.checkRecord("Career Pass Yards",qb.statsPassYards + qb.careerPassYards,abbr + " " + qb.getInitialName(),league.getYear() - 1);      records.checkRecord("Career Pass TDs",qb.statsTD + qb.careerTDs,abbr + " " + qb.getInitialName(),league.getYear() - 1);      records.checkRecord("Career Interceptions",qb.statsInt + qb.careerInt,abbr + " " + qb.getInitialName(),league.getYear() - 1);    } else     if (p instanceof PlayerRB) {      PlayerRB rb=(PlayerRB)p;      records.checkRecord("Career Rush Yards",rb.statsRushYards + rb.careerRushYards,abbr + " " + rb.getInitialName(),league.getYear() - 1);      records.checkRecord("Career Rush TDs",rb.statsTD + rb.careerTDs,abbr + " " + rb.getInitialName(),league.getYear() - 1);      records.checkRecord("Career Rush Fumbles",rb.statsFumbles + rb.careerFumbles,abbr + " " + rb.getInitialName(),league.getYear() - 1);    } else     if (p instanceof PlayerWR) {      PlayerWR wr=(PlayerWR)p;      records.checkRecord("Career Rec Yards",wr.statsRecYards + wr.careerRecYards,abbr + " " + wr.getInitialName(),league.getYear() - 1);      records.checkRecord("Career Rec TDs",wr.statsTD + wr.careerTD,abbr + " " + wr.getInitialName(),league.getYear() - 1);    }  }}  }
class C{  public String next(){  return nextLine();}  }
class C{  @Override public void collectMetaInformation(final GamlProperties meta){}  }
class C{  private void checkCompat(){  checkHeaderAdditionIfNeeded();  checkScrollModeCompat();}  }
class C{  private void bubbleUncaughtException(Thread t,Throwable e){  if (mDefaultUEH != null) {    if (mDefaultUEH instanceof PostMortemReportExceptionHandler)     ((PostMortemReportExceptionHandler)mDefaultUEH).bubbleUncaughtException(t,e); else     mDefaultUEH.uncaughtException(t,e);  }}  }
class C{  public void skippedEntity(String name) throws org.xml.sax.SAXException {}  }
class C{  public int glyphLength(int glyphId){  this.checkGlyphRange(glyphId);  return this.getLocaList().get(glyphId + 1) - this.getLocaList().get(glyphId);}  }
class C{  public boolean startsWith(String prefix,int toffset){  return str().startsWith(prefix,toffset);}  }
class C{  public static boolean isParityAdjusted(byte[] key,int offset) throws InvalidKeyException {  if (key.length - offset < DES_EDE_KEY_LEN) {    throw new InvalidKeyException();  }  for (int i=offset; i < DES_EDE_KEY_LEN + offset; i++) {    int b=key[i];    if ((((b & 1) + ((b & 2) >> 1) + ((b & 4) >> 2)+ ((b & 8) >> 3)+ ((b & 16) >> 4)+ ((b & 32) >> 5)+ ((b & 64) >> 6)) & 1) == ((b & 128) >> 7)) {      return false;    }  }  return true;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(importNode04.class,args);}  }
class C{  private static double dot(double vector1[],double vector2[]){  double product=0;  assert vector1.length == vector2.length;  for (int i=0; i < vector1.length; i++) {    product+=vector1[i] * vector2[i];  }  return product;}  }
class C{  public static void analyze(Graph graph,AnalyzerTask task,String output) throws IOException {  task.setOutputDirectoy(output);  Map<String,DescriptiveStatistics> statsMap=analyze(graph,task);  writeStatistics(statsMap,String.format("%1$s/statistics.txt",output));}  }
class C{  private boolean enableImageForSnapshots(URI protectionDevice,URI storageDevice,List<URI> snapshotList,String opId) throws ControllerException, URISyntaxException {  TaskCompleter completer=null;  try {    _log.info("Activating a bookmark on the RP CG(s)");    completer=new BlockSnapshotActivateCompleter(snapshotList,opId);    ProtectionSystem system=null;    try {      system=_dbClient.queryObject(ProtectionSystem.class,protectionDevice);    } catch (    DatabaseException e) {      throw DeviceControllerExceptions.recoverpoint.databaseExceptionActivateSnapshot(protectionDevice);    }    if (system == null) {      throw DeviceControllerExceptions.recoverpoint.databaseExceptionActivateSnapshot(protectionDevice);    }    if (snapshotList != null && !snapshotList.isEmpty()) {      BlockSnapshot snapshot=_dbClient.queryObject(BlockSnapshot.class,snapshotList.get(0));      Volume parent=_dbClient.queryObject(Volume.class,snapshot.getParent().getURI());      final List<Volume> vplexVolumes=CustomQueryUtility.queryActiveResourcesByConstraint(_dbClient,Volume.class,getVolumesByAssociatedId(parent.getId().toString()));      if (vplexVolumes != null && !vplexVolumes.isEmpty()) {        parent=vplexVolumes.get(0);      }      String lockName=ControllerLockingUtil.getConsistencyGroupStorageKey(_dbClient,parent.getConsistencyGroup(),system.getId());      if (null != lockName) {        List<String> locks=new ArrayList<String>();        locks.add(lockName);        acquireWorkflowLockOrThrow(_workflowService.getWorkflowFromStepId(opId),locks);      }    }    Set<String> volumeWWNs=new HashSet<String>();    String emName=null;    for (    URI snapshotID : snapshotList) {      BlockSnapshot snapshot=_dbClient.queryObject(BlockSnapshot.class,snapshotID);      if (snapshot.getEmName() != null) {        emName=snapshot.getEmName();      }      Volume volume=_dbClient.queryObject(Volume.class,snapshot.getParent().getURI());      if (Volume.checkForVplexBackEndVolume(_dbClient,volume)) {        volume=Volume.fetchVplexVolume(_dbClient,volume);      }      if (volume.checkPersonality(Volume.PersonalityTypes.TARGET.toString())) {        volumeWWNs.add(RPHelper.getRPWWn(volume.getId(),_dbClient));      } else {        ProtectionSet protectionSet=_dbClient.queryObject(ProtectionSet.class,volume.getProtectionSet());        Volume targetVolume=ProtectionSet.getTargetVolumeFromSourceAndInternalSiteName(_dbClient,protectionSet,volume,snapshot.getEmInternalSiteName());        volumeWWNs.add(RPHelper.getRPWWn(targetVolume.getId(),_dbClient));      }    }    RecoverPointClient rp=RPHelper.getRecoverPointClient(system);    MultiCopyEnableImageRequestParams request=new MultiCopyEnableImageRequestParams();    request.setVolumeWWNSet(volumeWWNs);    request.setBookmark(emName);    MultiCopyEnableImageResponse response=rp.enableImageCopies(request);    if (response == null) {      throw DeviceControllerExceptions.recoverpoint.failedEnableAccessOnRP();    }    StringSet snapshots=new StringSet();    for (    URI snapshotID : snapshotList) {      BlockSnapshot snapshot=_dbClient.queryObject(BlockSnapshot.class,snapshotID);      snapshot.setInactive(false);      snapshot.setIsSyncActive(true);      snapshots.add(snapshot.getNativeId());      _dbClient.updateObject(snapshot);    }    completer.ready(_dbClient);    return true;  } catch (  InternalException e) {    _log.error("Operation failed with Exception: ",e);    if (completer != null) {      completer.error(_dbClient,e);    }    throw e;  }catch (  URISyntaxException e) {    _log.error("Operation failed with Exception: ",e);    if (completer != null) {      completer.error(_dbClient,DeviceControllerException.errors.invalidURI(e));    }    throw e;  }catch (  Exception e) {    _log.error("Operation failed with Exception: ",e);    if (completer != null) {      completer.error(_dbClient,DeviceControllerException.errors.jobFailed(e));    }    throw e;  }}  }
class C{  @Override public MethodAmp methodByName(String methodName){  MethodAmp method=_stubMain.methodByName(methodName);  System.out.println("MJ0: " + methodName);  return new MethodJournal(method);}  }
class C{  public static BufferedImage createColorModelCompatibleImage(BufferedImage image){  ColorModel cm=image.getColorModel();  return new BufferedImage(cm,cm.createCompatibleWritableRaster(image.getWidth(),image.getHeight()),cm.isAlphaPremultiplied(),null);}  }
class C{  public boolean isHeaderRow(){  for (  TableField tablefield : tableFields) {    if (tablefield.isHeaderField()) {      return true;    }  }  return false;}  }
class C{  public boolean isInitSync(){  return parameters.getBoolean("initSync",initSync);}  }
class C{  private Type typeForPool(Object o){  if (o instanceof Integer)   return syms.intType;  if (o instanceof Float)   return syms.floatType;  if (o instanceof String)   return syms.stringType;  if (o instanceof Long)   return syms.longType;  if (o instanceof Double)   return syms.doubleType;  if (o instanceof ClassSymbol)   return syms.classType;  if (o instanceof Pool.MethodHandle)   return syms.methodHandleType;  if (o instanceof UniqueType)   return typeForPool(((UniqueType)o).type);  if (o instanceof Type) {    Type ty=((Type)o).unannotatedType();    if (ty instanceof Type.ArrayType)     return syms.classType;    if (ty instanceof Type.MethodType)     return syms.methodTypeType;  }  throw new AssertionError("Invalid type of constant pool entry: " + o.getClass());}  }
class C{  public Enumeration keys() throws MqttPersistenceException {  checkIsOpen();  Enumeration files=getFiles();  Vector result=new Vector();  while (files.hasMoreElements()) {    String filename=(String)files.nextElement();    String key=filename.substring(0,filename.length() - MESSAGE_FILE_EXTENSION.length());    result.addElement(key);  }  return result.elements();}  }
class C{  public void propertyChange(final PropertyChangeEvent e){  if (e.getSource() == splitPane) {    final String propName=e.getPropertyName();    if ("enabled".equals(propName)) {      final boolean enabled=splitPane.isEnabled();      if (leftButton != null)       leftButton.setEnabled(enabled);      if (rightButton != null)       rightButton.setEnabled(enabled);    } else     if (JSplitPane.ORIENTATION_PROPERTY.equals(propName)) {      if (rightButton != null) {        remove(rightButton);        rightButton=null;      }      if (leftButton != null) {        remove(leftButton);        leftButton=null;      }      oneTouchExpandableChanged();    }  }  super.propertyChange(e);}  }
class C{  public SolutionUserSampleHandler(){  log=Logger.getLogger(getClass().getName());  try {    sample=new SolutionUserSample();  } catch (  KeyManagementException|NoSuchAlgorithmException|KeyStoreException|ClientException|IOException e) {    log.fatal("Error occured when initializing SolutionUserSample",e);  }}  }
class C{  @Benchmark public long test6_UsingForAndIterator() throws IOException {  long i=0;  for (Iterator<Map.Entry<Integer,Integer>> entries=map.entrySet().iterator(); entries.hasNext(); ) {    Map.Entry<Integer,Integer> entry=entries.next();    i+=entry.getKey() + entry.getValue();  }  return i;}  }
class C{  public Editor edit() throws IOException {  return DiskLruCache.this.edit(key,sequenceNumber);}  }
class C{  public boolean isMaxDepth(){  return (this.maxDepth >= 0) && (this.depth >= this.maxDepth);}  }
class C{  public static int[] convertMatrix(double[] input,int valueOffset){  int[] outputArray=new int[input.length];  for (int i=0; i < input.length; i++) {    outputArray[i]=(int)(input[i]) - valueOffset;  }  return outputArray;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.PROPERTY_NAME_VALUE_PAIR__DECLARED_TYPE_REF:    return getDeclaredTypeRef();case N4JSPackage.PROPERTY_NAME_VALUE_PAIR__BOGUS_TYPE_REF:  return getBogusTypeRef();case N4JSPackage.PROPERTY_NAME_VALUE_PAIR__DEFINED_FIELD:if (resolve) return getDefinedField();return basicGetDefinedField();case N4JSPackage.PROPERTY_NAME_VALUE_PAIR__EXPRESSION:return getExpression();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public Matrix4x3f scale(float x,float y,float z){  return scale(x,y,z,this);}  }
class C{  private GridNioSslHandler sslHandler(GridNioSession ses){  GridNioSslHandler hnd=ses.meta(SSL_HANDLER.ordinal());  if (hnd == null)   throw new IgniteException("Failed to process incoming message (received message before SSL handler " + "was created): " + ses);  return hnd;}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  public void stop(){  mVibrator=null;  mContext.getContentResolver().unregisterContentObserver(mContentObserver);}  }
class C{  public boolean isDeviceListReadonly(){  return deviceListReadonly;}  }
class C{  public boolean isSourceCoreHealthy(SolrCore bestsrcCore){  if (bestsrcCore == null) {    ReplicationDiagnostics replicatedCoreDiagnostic=new ReplicationDiagnostics();    replicatedCoreDiagnostic.setEntity("NULL");    replicatedCoreDiagnostic.setFailedReplication(true);    replicatedCoreDiagnostic.setReason("Replication Failed since source Core is NULL..");    allDiagnostics.add(replicatedCoreDiagnostic);    if (!replicatorConfig.shouldSkipReplicationFailures()) {      return false;    }  } else   if (!bestsrcCore.available) {    ReplicationDiagnostics replicatedCoreDiagnostic=new ReplicationDiagnostics();    replicatedCoreDiagnostic.setEntity(bestsrcCore.name);    replicatedCoreDiagnostic.setFailedReplication(true);    replicatedCoreDiagnostic.setReason("Replication Failed since source Core is not available..");    allDiagnostics.add(replicatedCoreDiagnostic);    if (!replicatorConfig.shouldSkipReplicationFailures()) {      return false;    }  }  return true;}  }
