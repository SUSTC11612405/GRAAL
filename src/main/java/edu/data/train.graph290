class C{  public void add(RxAction action,Subscription subscription){  Pair<Integer,Subscription> old=mMap.put(action.getType(),getPair(action,subscription));  if (old != null && !old.second.isUnsubscribed())   old.second.unsubscribe();}  }
class C{  public char current(){  return iter.current();}  }
class C{  public void resetMatrix(){  showMethodWarning("resetMatrix");}  }
class C{  public void read(ByteCodeParser in) throws IOException {  int length=in.readInt();  int exnCount=in.readShort();  for (int i=0; i < exnCount; i++) {    int index=in.readShort();    if (index == 0)     _exceptions.add(null);    _exceptions.add(in.getConstantPool().getClass(index).getName());  }}  }
class C{  protected void closeResult(@Nullable T result){}  }
class C{  private long readLong(byte[] b){  return (((long)(b[0] & 0xff)) << 56) | (((long)(b[1] & 0xff)) << 48) | (((long)(b[2] & 0xff)) << 40)| (((long)(b[3] & 0xff)) << 32)| (((long)(b[4] & 0xff)) << 24)| ((b[5] & 0xff) << 16)| ((b[6] & 0xff) << 8)| ((b[7] & 0xff));}  }
class C{  public PartitionKeyGroupEntity createPartitionKeyGroupEntity(String partitionKeyGroupName){  PartitionKeyGroupEntity partitionKeyGroupEntity=new PartitionKeyGroupEntity();  partitionKeyGroupEntity.setPartitionKeyGroupName(partitionKeyGroupName);  return partitionKeyGroupDao.saveAndRefresh(partitionKeyGroupEntity);}  }
class C{  public CopyException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  public boolean isValidIndex(double index){  return (index >= getStartIndex() && index <= getEndIndex());}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case FunctionblockPackage.CONFIGURATION__PROPERTIES:    return properties != null && !properties.isEmpty();}return super.eIsSet(featureID);}  }
class C{  Region(Region r){  this(r.start(),r.end());}  }
class C{  public String saveInstancesTipText(){  return "Whether to save instance data at each node in the tree for " + "visualization purposes.";}  }
class C{  public static ForecastRule createForecastRule(String name){  ForecastRule rule=null;  if ("DoubleExponentialSmoothing".equals(name)) {    rule=new DoubleExponentialSmoothing();  }  return rule;}  }
class C{  public PriceModelContent(String contentType,byte[] content,String tag){  this.contentType=contentType;  this.content=content;  this.tag=tag;}  }
class C{  public static SimpleScheduleBuilder repeatSecondlyForever(int seconds){  return simpleSchedule().withIntervalInSeconds(seconds).repeatForever();}  }
class C{  public void init() throws ServletException {}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof NumberOfInterveningJobs);}  }
class C{  public void configureManagersMS100(){  mode=MS100MODE;  tm=new LocoNetThrottledTransmitter(getLnTrafficController(),mTurnoutExtraSpace);  log.debug("ThrottleTransmitted configured with :" + mTurnoutExtraSpace);  InstanceManager.store(super.getPowerManager(),jmri.PowerManager.class);  InstanceManager.setTurnoutManager(getTurnoutManager());  InstanceManager.setLightManager(getLightManager());  InstanceManager.setSensorManager(getSensorManager());  InstanceManager.setThrottleManager(super.getThrottleManager());  jmri.InstanceManager.setProgrammerManager(getProgrammerManager());  InstanceManager.setReporterManager(getReporterManager());  InstanceManager.addClockControl(getClockControl());}  }
class C{  @Path("{secretId}") @Timed @ExceptionMetered @GET public SecretDetailResponse retrieveSecret(@Auth User user,@PathParam("secretId") LongParam secretId){  logger.info("User '{}' retrieving secret id={}.",user,secretId);  return secretDetailResponseFromId(secretId.get());}  }
class C{  @Override public void populateDAG(DAG dag,Configuration conf){  TwitterSampleInput input=new TwitterSampleInput();  WindowOption windowOption=new WindowOption.GlobalWindow();  ApexStream<String> tags=StreamFactory.fromInput(input,input.text,name("tweetSampler")).filter(new ASCIIFilter(),name("ACSII Filter")).flatMap(new ExtractHashtags(),name("Extract Hashtags"));  ApexStream<Tuple.WindowedTuple<KeyValPair<String,List<CompletionCandidate>>>> s=tags.window(windowOption,new TriggerOption().accumulatingFiredPanes().withEarlyFiringsAtEvery(Duration.standardSeconds(10))).addCompositeStreams(ComputeTopCompletions.top(10,true)).print();  s.populateDag(dag);}  }
class C{  public Configuration(String file) throws IOException {  this(file,null);}  }
class C{  private void pivotOperation(int k){  double pivot=coeff[row[k]][col[k]];  coeff[row[k]][col[k]]=1;  for (int i=k + 1; i < coeff[k].length; i++) {    coeff[row[k]][col[i]]/=pivot;  }  rhs[row[k]]/=pivot;  if (LOG.isDebugging()) {    StringBuilder msg=new StringBuilder();    msg.append("set pivot element to 1 ").append(equationsToString(4));    LOG.debugFine(msg.toString());  }  for (int i=0; i < coeff.length; i++) {    if (i == k) {      continue;    }    double q=coeff[row[i]][col[k]];    coeff[row[i]][col[k]]=0;    for (int j=k + 1; j < coeff[0].length; j++) {      coeff[row[i]][col[j]]=coeff[row[i]][col[j]] - coeff[row[k]][col[j]] * q;    }    rhs[row[i]]=rhs[row[i]] - rhs[row[k]] * q;  }  if (LOG.isDebugging()) {    StringBuilder msg=new StringBuilder();    msg.append("after pivot operation ").append(equationsToString(4));    LOG.debugFine(msg.toString());  }}  }
class C{  public void findAndInit(Iterator<?> it){  while (it.hasNext()) {    findAndInit(it.next());  }}  }
class C{  boolean inHalfOpenRange(K key,K least,K fence){  if (key == null)   throw new NullPointerException();  return ((least == null || compare(key,least) >= 0) && (fence == null || compare(key,fence) < 0));}  }
class C{  public static int indexOf(boolean[] array,boolean value,int startIndex,int endIndex){  for (int i=startIndex; i < endIndex; i++) {    if (array[i] == value) {      return i;    }  }  return -1;}  }
class C{  public boolean isInterface(){  checkLevel(HIERARCHY);  return Modifier.isInterface(this.getModifiers());}  }
class C{  public EnumMap(Class<K> keyType){  this.keyType=keyType;  keyUniverse=getKeyUniverse(keyType);  vals=new Object[keyUniverse.length];}  }
class C{  private MPermission(Object object){  this.object=object;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"RSB");  translateAll(environment,instruction,"RSB",instructions);}  }
class C{  protected void initSchemaObjectBase(Schema newSchema,int id,String name,String traceModule){  initDbObjectBase(newSchema.getDatabase(),id,name,traceModule);  this.schema=newSchema;}  }
class C{  @Override public void initializeStatusResistancesList(final Map<StatusType,Double> list){  if (this.resistances == null) {    this.resistances=new StatusResistancesList();  }  this.resistances.setStatusResistances(list);  final RPSlot slotObject=this.getContainerSlot();  final String slot;  if (slotObject != null) {    slot=slotObject.getName();    if (logger.isDebugEnabled() || Testing.DEBUG) {      logger.info(this.getName() + " initialized in \"" + slot+ "\"");    }  }  if (logger.isDebugEnabled() || Testing.DEBUG) {    logger.info("StatusResistantItem: Initializing status resistances list");    if (this.resistances == null) {      logger.error("Could not initialize status resistances list");    }  }}  }
class C{  public void add(final String text){  final String[] lines=text.split("\n");  if (lines.length > 0) {    addToBuffer(lines);  } else {    addToBuffer(new String[]{text});  }}  }
class C{  private void assertEqualRandomNumberGenerators(final Random rng1,final Random rng2){  for (int i=0; i < 10; i++) {    assertEquals("different element at position " + i,rng1.nextDouble(),rng2.nextDouble(),EPSILON);  }}  }
class C{  @Override protected void sendDispositionHeader(OutputStream out) throws IOException {  LOG.trace("enter sendDispositionHeader(OutputStream out)");  super.sendDispositionHeader(out);  String filename=this.source.getFileName();  if (filename != null) {    out.write(FILE_NAME_BYTES);    out.write(QUOTE_BYTES);    out.write(EncodingUtils.getAsciiBytes(filename));    out.write(QUOTE_BYTES);  }}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public Packet(Packet other){  if (other.isSetMessageType()) {    this.messageType=other.messageType;  }  if (other.isSetSwPortTuple()) {    this.swPortTuple=new SwitchPortTuple(other.swPortTuple);  }  if (other.isSetData()) {    this.data=org.apache.thrift.TBaseHelper.copyBinary(other.data);    ;  }}  }
class C{  public void init(boolean forEncryption,CipherParameters params){  if (params instanceof KeyParameter) {    workingKey=((KeyParameter)params).getKey();    setKey(workingKey);    return;  }  throw new IllegalArgumentException("invalid parameter passed to RC4 init - " + params.getClass().getName());}  }
class C{  @Since(CommonParams.VERSION_1) @PUT @Path(CommonParams.PATH_ID + TriggerCommonParams.PATH_TRIGGER_APPROVE) public Response putApprove(@Context Request request,@InjectParam TriggerParameters params) throws WebApplicationException {  ProcessRepresentation process=new ProcessRepresentation();  process.setComment("");  return put(request,processBackend.putApprove(),process,params);}  }
class C{  public static String loggerNameToTag(String loggerName){  if (loggerName == null) {    return "null";  }  int length=loggerName.length();  if (length <= 23) {    return loggerName;  }  int lastPeriod=loggerName.lastIndexOf(".");  return length - (lastPeriod + 1) <= 23 ? loggerName.substring(lastPeriod + 1) : loggerName.substring(loggerName.length() - 23);}  }
class C{  public PseudoEuclideanDistance(){  super();}  }
class C{  private void ItoOSP(int i,byte[] sp){  sp[0]=(byte)(i >>> 24);  sp[1]=(byte)(i >>> 16);  sp[2]=(byte)(i >>> 8);  sp[3]=(byte)(i >>> 0);}  }
class C{  private boolean isFlipCandidate(Instruction cb,Instruction target){  Instruction next=cb.nextInstructionInCodeOrder();  if (!Goto.conforms(next)) {    return false;  }  next=firstRealInstructionFollowing(next);  if (next != target) {    return false;  }  return true;}  }
class C{  public Bundler putIntegerArrayList(String key,ArrayList<Integer> value){  bundle.putIntegerArrayList(key,value);  return this;}  }
class C{  public static Bitmap orientBitmap(Bitmap bitmap,int ori){  Matrix matrix=new Matrix();  int w=bitmap.getWidth();  int h=bitmap.getHeight();  if (ori == ORI_ROTATE_90 || ori == ORI_ROTATE_270 || ori == ORI_TRANSPOSE || ori == ORI_TRANSVERSE) {    int tmp=w;    w=h;    h=tmp;  }switch (ori) {case ORI_ROTATE_90:    matrix.setRotate(90,w / 2f,h / 2f);  break;case ORI_ROTATE_180:matrix.setRotate(180,w / 2f,h / 2f);break;case ORI_ROTATE_270:matrix.setRotate(270,w / 2f,h / 2f);break;case ORI_FLIP_HOR:matrix.preScale(-1,1);break;case ORI_FLIP_VERT:matrix.preScale(1,-1);break;case ORI_TRANSPOSE:matrix.setRotate(90,w / 2f,h / 2f);matrix.preScale(1,-1);break;case ORI_TRANSVERSE:matrix.setRotate(270,w / 2f,h / 2f);matrix.preScale(1,-1);break;case ORI_NORMAL:default :return bitmap;}return Bitmap.createBitmap(bitmap,0,0,bitmap.getWidth(),bitmap.getHeight(),matrix,true);}  }
class C{  @SuppressWarnings("static-access") private void resetSystemUser(boolean isSource,String newSystemUser){  String systemUser=null;  if (isSource) {    if (newSystemUser == null) {      systemUser=s_parameters.getSourceSystemUser();    } else     if (newSystemUser.length() == 0) {      systemUser=m_sourceSystemUser.getText();      ;    } else {      systemUser=newSystemUser;    }    m_sourceSystemUser.setText(systemUser);    m_sourceSystemUserOld=systemUser;  } else {    if (newSystemUser == null) {      systemUser=s_parameters.getTargetSystemUser();    } else     if (newSystemUser.length() == 0) {      systemUser=m_targetSystemUser.getText();    } else {      systemUser=newSystemUser;    }    m_targetSystemUser.setText(systemUser);    m_targetSystemUserOld=systemUser;  }}  }
class C{  public long removeStartTime(Object key){  Long startTime=(Long)this.startTimeMap.remove(key);  return startTime == null ? 0 : startTime.longValue();}  }
class C{  public static boolean isSRDFProtectedVolume(Volume volume){  return (!NullColumnValueGetter.isNullNamedURI(volume.getSrdfParent()) || null != volume.getSrdfTargets());}  }
class C{  public boolean write(IOFSwitch sw,OFMessage msg,FloodlightContext cntx) throws IOException {  return write(sw,msg,cntx,false);}  }
class C{  private MemoryRangeCalculator(){}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAnonymous_traceEntity_1_();}  }
class C{  @Deprecated @Override public final void add(E e){  throw new UnsupportedOperationException();}  }
class C{  public void reset(InputStream newStream,boolean isBigEndian){  stream=newStream;  bigEndian=isBigEndian;  bytesRead=0;}  }
class C{  public Luffa256(){  super();}  }
class C{  public static <V,E>Graph<V,E> generateMixedRandomGraph(Supplier<Graph<V,E>> graphFactory,Supplier<V> vertexFactory,Supplier<E> edgeFactory,Map<E,Number> edge_weights,int num_vertices,Set<V> seedVertices){  int seed=(int)(Math.random() * 10000);  BarabasiAlbertGenerator<V,E> bag=new BarabasiAlbertGenerator<V,E>(graphFactory,vertexFactory,edgeFactory,4,3,seed,seedVertices);  bag.evolveGraph(num_vertices - 4);  Graph<V,E> ug=bag.get();  Graph<V,E> g=graphFactory.get();  for (  V v : ug.getVertices()) {    g.addVertex(v);  }  for (  E e : ug.getEdges()) {    V v1=ug.getEndpoints(e).getFirst();    V v2=ug.getEndpoints(e).getSecond();    E me=edgeFactory.get();    g.addEdge(me,v1,v2,Math.random() < .5 ? EdgeType.DIRECTED : EdgeType.UNDIRECTED);    edge_weights.put(me,Math.random());  }  return g;}  }
class C{  private void waitUntilReadable() throws IOException {  readTimeout.enter();  try {    while (readBuffer.size() == 0 && !finished && !closed && errorCode == null) {      waitForIo();    }  }  finally {    readTimeout.exitAndThrowIfTimedOut();  }}  }
class C{  public static long toLong(int[] ints,int start){  return toLong(ints[start],ints[start + 1]);}  }
class C{  public synchronized SynchronizingStorageEngine register(String storeName,Scope scope,boolean persistent) throws PersistException {  SynchronizingStorageEngine store=localStores.get(storeName);  if (store != null) {    return store;  }  IStorageEngine<ByteArray,byte[]> dstore;  if (persistent) {    if (persistentDataSource == null)     persistentDataSource=JavaDBStorageEngine.getDataSource(dbPath,false);    dstore=new JavaDBStorageEngine(storeName,persistentDataSource);  } else {    dstore=new InMemoryStorageEngine<ByteArray,byte[]>(storeName);  }  store=new SynchronizingStorageEngine(dstore,syncManager,syncManager.debugCounter,scope);  localStores.put(storeName,store);  return store;}  }
class C{  @Override protected SerializationPolicy doGetSerializationPolicy(HttpServletRequest request,String moduleBaseURL,String strongName){  SerializationPolicy policy=super.doGetSerializationPolicy(request,moduleBaseURL,strongName);  if (policy == null) {    return SerializationPolicyUtil.loadSerializationPolicy(this,request,moduleBaseURL,strongName);  } else {    return policy;  }}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) @Test public void testNodeSchemaProcessing(){  SquareCalculus oper=new SquareCalculus();  SumTestSink lmultSink=new SumTestSink();  SumTestSink imultSink=new SumTestSink();  SumTestSink dmultSink=new SumTestSink();  SumTestSink fmultSink=new SumTestSink();  oper.longResult.setSink(lmultSink);  oper.integerResult.setSink(imultSink);  oper.doubleResult.setSink(dmultSink);  oper.floatResult.setSink(fmultSink);  oper.beginWindow(0);  int sum=0;  for (int i=0; i < 50; i++) {    Integer t=i;    oper.input.process(t);    sum+=i * i;  }  oper.endWindow();  Assert.assertEquals("sum was",sum,lmultSink.val.intValue());  Assert.assertEquals("sum was",sum,imultSink.val.intValue());  Assert.assertEquals("sum was",sum,dmultSink.val.intValue());  Assert.assertEquals("sum",sum,fmultSink.val.intValue());}  }
class C{  public SpannableBuilder append(String text,Object resource,int flag){  int start=sb.length();  lastAddedOffset=start;  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {    sb.append(text,resource,flag);  } else {    sb.append(text);    sb.setSpan(resource,start,sb.length(),flag);  }  return this;}  }
class C{  public static Value parseValue(String nTriplesValue,ValueFactory valueFactory) throws IllegalArgumentException {  if (nTriplesValue.startsWith("<")) {    return parseURI(nTriplesValue,valueFactory);  } else   if (nTriplesValue.startsWith("_:")) {    return parseBNode(nTriplesValue,valueFactory);  } else   if (nTriplesValue.startsWith("\"")) {    return parseLiteral(nTriplesValue,valueFactory);  } else {    throw new IllegalArgumentException("Not a legal N-Triples value: " + nTriplesValue);  }}  }
class C{  public ConnectionPoolTimeoutException(final String message,final Throwable cause){  super(message,cause);}  }
class C{  public int update(Connection conn,String sql,Object[] params) throws SQLException {  return update(conn,sql,params,null);}  }
class C{  @Override public int[] sqlTypes(){  return new int[]{Types.JAVA_OBJECT};}  }
class C{  public int[][] writePointGeometry(EsriGraphicList list) throws IOException {  _leos.writeInt(9994);  _leos.writeInt(0);  _leos.writeInt(0);  _leos.writeInt(0);  _leos.writeInt(0);  _leos.writeInt(0);  int[][] indexData=createPointIndex(list);  int contentLength=50;  if (!list.isEmpty()) {    contentLength=indexData[0][indexData[0].length - 1] + indexData[1][indexData[0].length - 1] + ESRI_RECORD_HEADER_LENGTH;  }  _leos.writeInt(contentLength);  _leos.writeLEInt(1000);  _leos.writeLEInt(list.getType());  double[] extents=list.getExtents();  writeExtents(extents);  _leos.writeDouble(0.0);  _leos.writeDouble(0.0);  _leos.writeDouble(0.0);  _leos.writeDouble(0.0);  Point2D pnt=new Point2D.Double();  OMPoint point=null;  for (int i=0; i < list.size(); i++) {    OMGraphic graphic=list.get(i);    _leos.writeInt(i + 1);    _leos.writeInt(indexData[1][i]);    _leos.writeLEInt(list.getType());    if (graphic instanceof OMGraphicList) {      EsriGraphicList sublist=(EsriGraphicList)graphic;      extents=sublist.getExtents();      writeExtents(extents);      _leos.writeLEInt(sublist.size());      for (int j=0; j < sublist.size(); j++) {        point=(OMPoint)sublist.getOMGraphicAt(j);        LatLonPoint pt=new LatLonPoint.Double(point.getLat(),point.getLon());        double lat=pt.getY();        double lon=pt.getX();        if (transform == null) {          _leos.writeLEDouble(lon);          _leos.writeLEDouble(lat);        } else {          transform.forward(lat,lon,pnt);          _leos.writeLEDouble(pnt.getX());          _leos.writeLEDouble(pnt.getY());        }      }    } else {      point=(OMPoint)graphic;      LatLonPoint pt=new LatLonPoint.Double(point.getLat(),point.getLon());      double lat=pt.getY();      double lon=pt.getX();      if (transform == null) {        _leos.writeLEDouble(lon);        _leos.writeLEDouble(lat);      } else {        transform.forward(lat,lon,pnt);        _leos.writeLEDouble(pnt.getX());        _leos.writeLEDouble(pnt.getY());      }    }  }  _leos.flush();  _leos.close();  return indexData;}  }
class C{  public void addPickableObjectRange(int colorCode,int count,PickedObjectFactory factory){  Range range=new Range(colorCode,count);  this.pickableObjectRanges.put(range,factory);  this.adjustExtremeColorCodes(colorCode);  this.adjustExtremeColorCodes(colorCode + count - 1);}  }
class C{  public void destroy(){  fallbackStorage.clear();  FileUtils.deleteQuietly(fallbackStorageFile);}  }
class C{  public Integer findTradeOrderByMaxKey(){  try {    EntityManager entityManager=EntityManagerHelper.getEntityManager();    entityManager.getTransaction().begin();    CriteriaBuilder builder=entityManager.getCriteriaBuilder();    CriteriaQuery<Object> query=builder.createQuery();    Root<TradeOrder> from=query.from(TradeOrder.class);    Expression<Integer> id=from.get("orderKey");    Expression<Integer> minExpression=builder.max(id);    CriteriaQuery<Object> select=query.select(minExpression);    TypedQuery<Object> typedQuery=entityManager.createQuery(select);    Object item=typedQuery.getSingleResult();    entityManager.getTransaction().commit();    if (null == item)     item=new Integer(0);    return (Integer)item;  } catch (  Exception re) {    EntityManagerHelper.rollback();    throw re;  } finally {    EntityManagerHelper.close();  }}  }
class C{  public void deletePipeline(String pipelineName) throws ApiException {  Object postBody=null;  byte[] postBinaryBody=null;  if (pipelineName == null) {    throw new ApiException(400,"Missing the required parameter 'pipelineName' when calling deletePipeline");  }  String path="/v1/pipeline/{pipelineName}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pipelineName" + "\\}",apiClient.escapeString(pipelineName.toString()));  List<Pair> queryParams=new ArrayList<Pair>();  Map<String,String> headerParams=new HashMap<String,String>();  Map<String,Object> formParams=new HashMap<String,Object>();  final String[] accepts={"application/json"};  final String accept=apiClient.selectHeaderAccept(accepts);  final String[] contentTypes={};  final String contentType=apiClient.selectHeaderContentType(contentTypes);  String[] authNames=new String[]{"basic"};  apiClient.invokeAPI(path,"DELETE",queryParams,postBody,postBinaryBody,headerParams,formParams,accept,contentType,authNames,null);}  }
class C{  public JSONTokener(Reader reader){  this.reader=reader.markSupported() ? reader : new BufferedReader(reader);  this.eof=false;  this.usePrevious=false;  this.previous=0;  this.index=0;  this.character=1;  this.line=1;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.BOOL_EXPR___LITERAL_1:    return getLiteral_1();case UmplePackage.BOOL_EXPR___NAME_1:  return getName_1();case UmplePackage.BOOL_EXPR___EQUALITY_OP_1:return getEqualityOp_1();case UmplePackage.BOOL_EXPR___INDEX_1:return getIndex_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public BitmapToggleButton(JComponent component,String imgDir,String imgPrefix,int requiredWidth,int requiredHeight,String[][] imageSuffixes,boolean isLeftClickTemp,int initialStateNumber){  super();  this.imgDir=imgDir;  this.imgPrefix=imgPrefix;  this.imageSuffixes=imageSuffixes;  this.isLeftClickTemp=isLeftClickTemp;  dimension=new Dimension(requiredWidth,requiredHeight);  setOpaque(false);  numberStates=imageSuffixes[0].length;  imageCache=new BufferedImage[2][numberStates];  mask=getImage(1,0);  if (mask == null) {    throw new RuntimeException("Could not initialize create BitmapToggleButton: hover image for state #0 must be specified as it serves as mask");  }  component.addMouseMotionListener(this);  component.addMouseListener(this);  stateNumber=initialStateNumber;  updateCurrentImage(false);}  }
class C{  public int processByte(byte in,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  int resultLen=0;  if (bufOff == buf.length) {    resultLen=cipher.processBlock(buf,0,out,outOff);    bufOff=0;  }  buf[bufOff++]=in;  return resultLen;}  }
class C{  public XPEmptyBorder(Insets m){  super(m.top + 2,m.left + 2,m.bottom + 2,m.right + 2);}  }
class C{  public void propertyChange(PropertyChangeEvent e){  if (e.getSource() == noteLabel && e.getPropertyName() == "text") {    firePropertyChange(ACCESSIBLE_TEXT_PROPERTY,null,0);  }}  }
class C{  public String put(String request,String content) throws IOException {  HttpPut httpPut=new HttpPut(getBaseURL() + request);  httpPut.setEntity(new StringEntity(content,ContentType.create("application/json",StandardCharsets.UTF_8)));  return getResponse(httpPut);}  }
class C{  private final void throwException3(int fromIndex,int toIndex) throws IndexOutOfBoundsException {  throw new IndexOutOfBoundsException("Index range [" + fromIndex + ", "+ toIndex+ "] not in valid range [0-"+ (size - 1)+ "]");}  }
class C{  public String dump(){  return "DD<" + hi + ", "+ lo+ ">";}  }
class C{  SpeciesDescription lookupSpecies(final String name,final Map<String,SpeciesDescription> cache){  SpeciesDescription result=cache.get(name);  if (result == null) {    for (    final TypeDescription td : Types.getBuiltInSpecies()) {      if (td.getName().equals(name)) {        result=(SpeciesDescription)td;        break;      }    }  }  return result;}  }
class C{  @Override public boolean isCellEditable(int row,int col){  return false;}  }
class C{  public static boolean isValid(ByteBuffer header){  if ((ETC2Magic[0] != header.get(0)) && (ETC2Magic[1] != header.get(1)) && (ETC2Magic[2] != header.get(2))&& (ETC2Magic[3] != header.get(3))&& (ETC2Magic[4] != header.get(4))&& (ETC2Magic[5] != header.get(5))) {    RajLog.e("ETC2 header failed magic sequence check.");    if ((ETC1Magic[0] != header.get(0)) && (ETC1Magic[1] != header.get(1)) && (ETC1Magic[2] != header.get(2))&& (ETC1Magic[3] != header.get(3))&& (ETC1Magic[4] != header.get(4))&& (ETC1Magic[5] != header.get(5))) {      RajLog.e("ETC1 header failed magic sequence check.");      return false;    }  }  final short ETC2_FORMAT=header.getShort(ETC2_PKM_FORMAT_OFFSET);switch (ETC2_FORMAT) {case ETC1_RGB8_OES:case RGB8_ETC2:case RGBA8_ETC2_EAC:case RGB8_PUNCHTHROUGH_ALPHA1_ETC2:case R11_EAC:case RG11_EAC:case SIGNED_R11_EAC:case SIGNED_RG11_EAC:    break;default :  RajLog.e("ETC2 header failed format check.");return false;}final int encodedWidth=getEncodedWidth(header);final int encodedHeight=getEncodedHeight(header);final int width=getWidth(header);final int height=getHeight(header);if (encodedWidth < width || (encodedWidth - width) > 4) {RajLog.e("ETC2 header failed width check. Encoded: " + encodedWidth + " Actual: "+ width);return false;}if (encodedHeight < height || (encodedHeight - height) > 4) {RajLog.e("ETC2 header failed height check. Encoded: " + encodedHeight + " Actual: "+ height);return false;}return true;}  }
class C{  public List<KinesisReaderCheckpoint> splitInto(int desiredNumSplits){  int partitionSize=divideAndRoundUp(shardCheckpoints.size(),desiredNumSplits);  List<KinesisReaderCheckpoint> checkpoints=newArrayList();  for (  List<ShardCheckpoint> shardPartition : partition(shardCheckpoints,partitionSize)) {    checkpoints.add(new KinesisReaderCheckpoint(shardPartition));  }  return checkpoints;}  }
class C{  public static org.oscm.internal.vo.VOOrganizationPaymentConfiguration convertToUp(org.oscm.vo.VOOrganizationPaymentConfiguration oldVO){  if (oldVO == null) {    return null;  }  org.oscm.internal.vo.VOOrganizationPaymentConfiguration newVO=new org.oscm.internal.vo.VOOrganizationPaymentConfiguration();  newVO.setOrganization(convertToUp(oldVO.getOrganization()));  newVO.setEnabledPaymentTypes(convertToUpVOPaymentType(oldVO.getEnabledPaymentTypes()));  return newVO;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public double upperBound(){  return upperBound;}  }
class C{  public void debug(WriteStream out,Path path,byte[] tableKey) throws IOException {  SegmentKelpBuilder builder=new SegmentKelpBuilder();  builder.path(path);  builder.create(false);  builder.services(ServicesAmp.newManager().get());  SegmentServiceImpl segmentService=builder.build();  for (  SegmentExtent extent : segmentService.getSegmentExtents()) {    debugSegment(out,segmentService,extent,tableKey);  }}  }
class C{  public table addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  private void notifyListeners(String str){  WriterListener[] writerListeners=null;synchronized (listeners) {    writerListeners=new WriterListener[listeners.size()];    listeners.toArray(writerListeners);  }  for (int i=0; i < writerListeners.length; i++) {    writerListeners[i].write(str);  }}  }
class C{  private void processLine(MTimeExpense te,MTimeExpenseLine tel,MBPartner bp){  if (m_order == null) {    log.info("New Order for " + bp + ", Project="+ tel.getC_Project_ID());    m_order=new MOrder(getCtx(),0,get_TrxName());    m_order.setAD_Org_ID(tel.getAD_Org_ID());    m_order.setC_DocTypeTarget_ID(MOrder.DocSubTypeSO_OnCredit);    m_order.setBPartner(bp);    if (m_order.getC_BPartner_Location_ID() == 0) {      log.log(Level.SEVERE,"No BP Location: " + bp);      addLog(0,te.getDateReport(),null,"No Location: " + te.getDocumentNo() + " "+ bp.getName());      m_order=null;      return;    }    m_order.setM_Warehouse_ID(te.getM_Warehouse_ID());    if (tel.getC_Activity_ID() != 0)     m_order.setC_Activity_ID(tel.getC_Activity_ID());    if (tel.getC_Campaign_ID() != 0)     m_order.setC_Campaign_ID(tel.getC_Campaign_ID());    if (tel.getC_Project_ID() != 0) {      m_order.setC_Project_ID(tel.getC_Project_ID());      MProject project=new MProject(getCtx(),tel.getC_Project_ID(),get_TrxName());      if (project.getM_PriceList_ID() != 0)       m_order.setM_PriceList_ID(project.getM_PriceList_ID());    }    m_order.setSalesRep_ID(te.getDoc_User_ID());    if (!m_order.save()) {      throw new IllegalStateException("Cannot save Order");    }  } else {    if (tel.getC_Activity_ID() != 0 && tel.getC_Activity_ID() != m_order.getC_Activity_ID())     m_order.setC_Activity_ID(tel.getC_Activity_ID());    if (tel.getC_Campaign_ID() != 0 && tel.getC_Campaign_ID() != m_order.getC_Campaign_ID())     m_order.setC_Campaign_ID(tel.getC_Campaign_ID());    if (!m_order.save())     new IllegalStateException("Cannot save Order");  }  MOrderLine ol=new MOrderLine(m_order);  if (tel.getM_Product_ID() != 0)   ol.setM_Product_ID(tel.getM_Product_ID(),tel.getC_UOM_ID());  if (tel.getS_ResourceAssignment_ID() != 0)   ol.setS_ResourceAssignment_ID(tel.getS_ResourceAssignment_ID());  ol.setQty(tel.getQtyInvoiced());  ol.setDescription(tel.getDescription());  ol.setC_Project_ID(tel.getC_Project_ID());  ol.setC_ProjectPhase_ID(tel.getC_ProjectPhase_ID());  ol.setC_ProjectTask_ID(tel.getC_ProjectTask_ID());  ol.setC_Activity_ID(tel.getC_Activity_ID());  ol.setC_Campaign_ID(tel.getC_Campaign_ID());  BigDecimal price=tel.getPriceInvoiced();  if (price != null && price.compareTo(Env.ZERO) != 0) {    if (tel.getC_Currency_ID() != m_order.getC_Currency_ID())     price=MConversionRate.convert(getCtx(),price,tel.getC_Currency_ID(),m_order.getC_Currency_ID(),m_order.getAD_Client_ID(),m_order.getAD_Org_ID());    ol.setPrice(price);  } else   ol.setPrice();  if (tel.getC_UOM_ID() != 0 && ol.getC_UOM_ID() == 0)   ol.setC_UOM_ID(tel.getC_UOM_ID());  ol.setTax();  if (!ol.save()) {    throw new IllegalStateException("Cannot save Order Line");  }  tel.setC_OrderLine_ID(ol.getC_OrderLine_ID());  if (tel.save())   log.fine("Updated " + tel + " with C_OrderLine_ID"); else   log.log(Level.SEVERE,"Not Updated " + tel + " with C_OrderLine_ID");}  }
class C{  public static int numDecodings(String s){  if (s == null || s.length() == 0) {    return 0;  }  int len=s.length();  int[] ways=new int[len + 1];  ways[0]=1;  ways[1]=s.charAt(0) == '0' ? 0 : 1;  for (int i=2; i <= len; i++) {    int code1=Integer.valueOf(s.substring(i - 1,i));    int code2=Integer.valueOf(s.substring(i - 2,i));    ways[i]=(code1 != 0 ? ways[i - 1] : 0) + (code2 <= 26 && code2 > 9 ? ways[i - 2] : 0);  }  return ways[len];}  }
class C{  public InlineQueryResultMpeg4Gif build(){  return new InlineQueryResultMpeg4Gif(id,mpeg4_url,mpeg4_width,mpeg4_height,thumb_url,title,caption,reply_markup,input_message_content);}  }
class C{  public ConnectContainerToNetworkParams withConnectContainer(@NotNull ConnectContainer connectContainer){  requireNonNull(connectContainer);  this.connectContainer=connectContainer;  return this;}  }
class C{  @Override public void onEnterLeaveResult(String giveawayId,String what,Boolean success,boolean propagate){  Log.v(TAG,"Enter Leave Result -> " + what + ", "+ success);  if (success == Boolean.TRUE) {    GiveawayExtras extras=giveawayCard.getExtras();    extras.setEntered(ENTRY_INSERT.equals(what));    ((Giveaway)giveaway).setEntered(extras.isEntered());    giveawayCard.setExtras(extras);    adapter.setStickyItem(giveawayCard);  } else {    Log.e(TAG,"Probably an error catching the result...");  }  if (propagate)   GiveawayListFragmentStack.onEnterLeaveResult(giveawayId,what,success);}  }
class C{  final void incrementInvalidNext(){  invalidIndex++;}  }
class C{  public void updateExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  ServiceRepository services=getServiceRepository(request);  GestionDescripcionBI descripcionService=services.lookupGestionDescripcionBI();  AreasForm areasForm=(AreasForm)form;  AreaVO areaVO=areasForm.populate(new AreaVO());  ActionErrors errors=comprobarDuplicados(descripcionService,request,null,areaVO,null);  if (errors != null && !errors.isEmpty()) {    ErrorsTag.saveErrors(request,errors);    setReturnActionFordward(request,mapping.findForward("create-failed"));    return;  } else {    areaVO=descripcionService.updateArea(areaVO);  }  goReturnPointExecuteLogic(mapping,form,request,response);}  }
class C{  private boolean convert(View convertView){  if (cards.size() != 1) {    Log.d("CardsUI","Can't convert view: amount of cards is " + cards.size());    return false;  }  RelativeLayout container=(RelativeLayout)convertView.findViewById(R.id.stackContainer);  if (container == null) {    Log.d("CardsUI","Can't convert view: can't find stackContainer");    return false;  }  if (container.getChildCount() != 1) {    Log.d("CardsUI","Can't convert view: child count is " + container.getChildCount());    return false;  }  Card card=cards.get(0);  View convertCardView=container.getChildAt(0);  if (convertCardView == null || convertCardView.getId() != card.getId()) {    Log.d("CardsUI",String.format("Can't convert view: child Id is 0x%x, card Id is 0x%x",convertCardView.getId(),card.getId()));    return false;  }  if (card.convert(convertCardView))   return true;  return false;}  }
class C{  public ConditionalTable build(){  Map<Assignment,IndependentDistribution> table2=new HashMap<Assignment,IndependentDistribution>();  for (  Assignment cond : table.keySet()) {    table2.put(cond,table.get(cond).build());  }  return new ConditionalTable(headVar,table2);}  }
class C{  protected SelectedDenseDoubleMatrix1D(int size,double[] elements,int zero,int stride,int[] offsets,int offset){  setUp(size,zero,stride);  this.elements=elements;  this.offsets=offsets;  this.offset=offset;  this.isNoView=false;}  }
class C{  public StringGeneratorBuilder allPossible(){  return new StringGeneratorBuilder(Character.MIN_CODE_POINT,Character.MAX_CODE_POINT);}  }
class C{  static void register(Set<Pair<IDKey,IDKey>> REGISTRY,final Object lhs,final Object rhs){  final Pair<IDKey,IDKey> pair=getRegisterPair(lhs,rhs);  REGISTRY.add(pair);}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  public ByteBuffer buildPacket(int encap,short destUdp,short srcUdp){  ByteBuffer result=ByteBuffer.allocate(MAX_LENGTH);  fillInPacket(encap,mClientIp,mYourIp,destUdp,srcUdp,result,DHCP_BOOTREQUEST,false);  result.flip();  return result;}  }
class C{  public void addAll(Parameters parameters){  keyToValueMap.putAll(parameters.keyToValueMap);  fireUpdate();}  }
class C{  private List<PojoField> detectFields(NodeList fieldNodes){  List<PojoField> list=new LinkedList<>();  if (fieldNodes == null || fieldNodes.getLength() == 0) {    List<PropertyDescriptor> primitivePropDescriptors=PropertyMappingHelper.getPojoPropertyDescriptors(getJavaClass(),true);    for (    PropertyDescriptor desc : primitivePropDescriptors) {      boolean valid=desc.getWriteMethod() != null || desc.getReadMethod().getAnnotation(QuerySqlField.class) != null;      if (valid)       list.add(new PojoValueField(desc));    }    return list;  }  List<PropertyDescriptor> allPropDescriptors=PropertyMappingHelper.getPojoPropertyDescriptors(getJavaClass(),false);  int cnt=fieldNodes.getLength();  for (int i=0; i < cnt; i++) {    PojoValueField field=new PojoValueField((Element)fieldNodes.item(i),getJavaClass());    PropertyDescriptor desc=findPropertyDescriptor(allPropDescriptors,field.getName());    if (desc == null) {      throw new IllegalArgumentException("Specified POJO field '" + field.getName() + "' doesn't exist in '"+ getJavaClass().getName()+ "' class");    }    list.add(field);  }  return list;}  }
class C{  protected static void initialize(){  Log.printLine("Initialising...");  entities=new ArrayList<SimEntity>();  entitiesByName=new LinkedHashMap<String,SimEntity>();  future=new FutureQueue();  deferred=new DeferredQueue();  waitPredicates=new HashMap<Integer,Predicate>();  clock=0;  running=false;}  }
class C{  public StringBuffer insert(int index,boolean b){  return insert(index,b ? "true" : "false");}  }
class C{  public EqualsBuilder append(byte lhs,byte rhs){  if (isEquals == false) {    return this;  }  isEquals=(lhs == rhs);  return this;}  }
class C{  @DSSink({DSSinkKind.IO}) @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:54.197 -0400",hash_original_method="01F55DE86873F7A8E331D7C2CFA100DA",hash_generated_method="7D4C125741012AFAF97B05D2896C73D2") public static void write(byte[] data,OutputStream output) throws IOException {  if (data != null) {    output.write(data);  }}  }
class C{  protected void createVertices(Terrain terrain,ShapeData shapeData,boolean skipOuterBoundary){  for (  BoundaryInfo boundary : shapeData) {    if (boundary != shapeData.getOuterBoundaryInfo() || !skipOuterBoundary)     this.computeBoundaryVertices(terrain,boundary,shapeData.getReferencePoint(),shapeData.getRotationMatrix());  }}  }
class C{  public static ComponentUI createUI(JComponent x){  return new BEMenuBarUI();}  }
class C{  public boolean validateSignature(Document document) throws Exception {  setIDAttribute(document);  XMLSignatureFactory fac=XMLSignatureFactory.getInstance("DOM");  NodeList nl=document.getElementsByTagNameNS(javax.xml.crypto.dsig.XMLSignature.XMLNS,"Signature");  if (nl.getLength() == 0) {    throw new Exception("Cannot find Signature element");  }  DOMValidateContext valContext=new DOMValidateContext(new X509KeySelector(),nl.item(0));  javax.xml.crypto.dsig.XMLSignature signature=fac.unmarshalXMLSignature(valContext);  boolean coreValidity=signature.validate(valContext);  if (coreValidity == false) {    boolean sv=signature.getSignatureValue().validate(valContext);    if (sv == false) {      if (Flags.DEBUG) {        @SuppressWarnings("rawtypes") Iterator i=signature.getSignedInfo().getReferences().iterator();        for (int j=0; i.hasNext(); j++) {          boolean refValid=((Reference)i.next()).validate(valContext);          System.out.println("ref[" + j + "] validity status: "+ refValid);        }      }    }  }  return coreValidity;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public int hashCode(){  int hc=13 * sort;  if (sort >= ARRAY) {    for (int i=off, end=i + len; i < end; i++) {      hc=17 * (hc + buf[i]);    }  }  return hc;}  }
class C{  public UsbSerialDriver probeDevice(final UsbDevice usbDevice){  final int vendorId=usbDevice.getVendorId();  final int productId=usbDevice.getProductId();  final Class<? extends UsbSerialDriver> driverClass=mProbeTable.findDriver(vendorId,productId);  if (driverClass != null) {    final UsbSerialDriver driver;    try {      final Constructor<? extends UsbSerialDriver> ctor=driverClass.getConstructor(UsbDevice.class);      driver=ctor.newInstance(usbDevice);    } catch (    NoSuchMethodException e) {      throw new RuntimeException(e);    }catch (    IllegalArgumentException e) {      throw new RuntimeException(e);    }catch (    InstantiationException e) {      throw new RuntimeException(e);    }catch (    IllegalAccessException e) {      throw new RuntimeException(e);    }catch (    InvocationTargetException e) {      throw new RuntimeException(e);    }    return driver;  }  return null;}  }
class C{  public static OMText createOMText(String text,double latitude,double longitude){  OMText txt=new OMText(latitude,longitude,text,OMText.JUSTIFY_LEFT);  return txt;}  }
class C{  public void dismissLoadingDialog(){  Fragment frag=getSupportFragmentManager().findFragmentByTag(DIALOG_WAIT_TAG);  if (frag != null) {    LoadingDialog loading=(LoadingDialog)frag;    loading.dismiss();  }}  }
class C{  public boolean isFilled(){  return filled;}  }
class C{  public static StringBuffer encodePath(StringBuffer buf,String path){  if (buf == null) {    loop:     for (int i=0; i < path.length(); i++) {      char c=path.charAt(i);switch (c) {case '%':case '?':case ';':case '#':case ' ':        buf=new StringBuffer(path.length() << 1);      break loop;  }}if (buf == null) return null;}synchronized (buf) {for (int i=0; i < path.length(); i++) {  char c=path.charAt(i);switch (c) {case '%':    buf.append("%25");  continue;case '?':buf.append("%3F");continue;case ';':buf.append("%3B");continue;case '#':buf.append("%23");continue;case ' ':buf.append("%20");continue;default :buf.append(c);continue;}}}return buf;}  }
class C{  @Override public Long append(final String key,final String value){  checkIsInMultiOrPipeline();  client.append(key,value);  return client.getIntegerReply();}  }
class C{  private void renameTables() throws SQLException {  try (Statement st=sqlConnection.createStatement()){    st.addBatch("ALTER TABLE achievements RENAME TO " + tablePrefix + "achievements");    st.addBatch("ALTER TABLE breaks RENAME TO " + tablePrefix + "breaks");    st.addBatch("ALTER TABLE places RENAME TO " + tablePrefix + "places");    st.addBatch("ALTER TABLE kills RENAME TO " + tablePrefix + "kills");    st.addBatch("ALTER TABLE crafts RENAME TO " + tablePrefix + "crafts");    st.addBatch("ALTER TABLE deaths RENAME TO " + tablePrefix + "deaths");    st.addBatch("ALTER TABLE arrows RENAME TO " + tablePrefix + "arrows");    st.addBatch("ALTER TABLE snowballs RENAME TO " + tablePrefix + "snowballs");    st.addBatch("ALTER TABLE eggs RENAME TO " + tablePrefix + "eggs");    st.addBatch("ALTER TABLE fish RENAME TO " + tablePrefix + "fish");    st.addBatch("ALTER TABLE itembreaks RENAME TO " + tablePrefix + "itembreaks");    st.addBatch("ALTER TABLE eatenitems RENAME TO " + tablePrefix + "eatenitems");    st.addBatch("ALTER TABLE shears RENAME TO " + tablePrefix + "shears");    st.addBatch("ALTER TABLE milks RENAME TO " + tablePrefix + "milks");    st.addBatch("ALTER TABLE connections RENAME TO " + tablePrefix + "connections");    st.addBatch("ALTER TABLE trades RENAME TO " + tablePrefix + "trades");    st.addBatch("ALTER TABLE anvils RENAME TO " + tablePrefix + "anvils");    st.addBatch("ALTER TABLE enchantments RENAME TO " + tablePrefix + "enchantments");    st.addBatch("ALTER TABLE levels RENAME TO " + tablePrefix + "levels");    st.addBatch("ALTER TABLE beds RENAME TO " + tablePrefix + "beds");    st.addBatch("ALTER TABLE consumedpotions RENAME TO " + tablePrefix + "consumedpotions");    st.addBatch("ALTER TABLE playedtime RENAME TO " + tablePrefix + "playedtime");    st.addBatch("ALTER TABLE distancefoot RENAME TO " + tablePrefix + "distancefoot");    st.addBatch("ALTER TABLE distancepig RENAME TO " + tablePrefix + "distancepig");    st.addBatch("ALTER TABLE distancehorse RENAME TO " + tablePrefix + "distancehorse");    st.addBatch("ALTER TABLE distanceminecart RENAME TO " + tablePrefix + "distanceminecart");    st.addBatch("ALTER TABLE distanceboat RENAME TO " + tablePrefix + "distanceboat");    st.addBatch("ALTER TABLE distancegliding RENAME TO " + tablePrefix + "distancegliding");    st.addBatch("ALTER TABLE drops RENAME TO " + tablePrefix + "drops");    st.addBatch("ALTER TABLE hoeplowing RENAME TO " + tablePrefix + "hoeplowing");    st.addBatch("ALTER TABLE fertilising RENAME TO " + tablePrefix + "fertilising");    st.addBatch("ALTER TABLE tames RENAME TO " + tablePrefix + "tames");    st.addBatch("ALTER TABLE brewing RENAME TO " + tablePrefix + "brewing");    st.addBatch("ALTER TABLE fireworks RENAME TO " + tablePrefix + "fireworks");    st.addBatch("ALTER TABLE musicdiscs RENAME TO " + tablePrefix + "musicdiscs");    st.addBatch("ALTER TABLE enderpearls RENAME TO " + tablePrefix + "enderpearls");    st.executeBatch();  } }  }
class C{  public void open() throws IOException {  if (cache == null) {    isCloseCache=true;    cache=new SolrClientCache();  } else {    isCloseCache=false;  }  this.cloudSolrClient=this.cache.getCloudSolrClient(zkHost);  this.executorService=ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory("TextLogitSolrStream"));}  }
class C{  private void initGenerator(){  if (generatorName.equals(IKeyword.CELLULAR)) {    generator=new CellularAutomatonRNG(this);  } else   if (generatorName.equals(IKeyword.JAVA)) {    generator=new JavaRNG(this);  } else {    generator=new MersenneTwisterRNG(this);  }}  }
class C{  @Override public String toString(){  return new String(_array,_offset,_length);}  }
class C{  public PutRepositoryRequestBuilder(ElasticsearchClient client,PutRepositoryAction action,String name){  super(client,action,new PutRepositoryRequest(name));}  }
class C{  public void Gen_populate(android.database.Cursor cursor,int[] columnIndices){  if (columnIndices[GEN_ID__ID] >= 0 && !cursor.isNull(columnIndices[GEN_ID__ID])) {    gen__Id=cursor.getLong(columnIndices[GEN_ID__ID]);  }  if (columnIndices[GEN_ID_METALISTID] >= 0 && !cursor.isNull(columnIndices[GEN_ID_METALISTID])) {    gen_metaListId=cursor.getLong(columnIndices[GEN_ID_METALISTID]);  }  if (columnIndices[GEN_ID_KEYDESC] >= 0 && !cursor.isNull(columnIndices[GEN_ID_KEYDESC])) {    gen_keyDesc=cursor.getString(columnIndices[GEN_ID_KEYDESC]);  }  if (columnIndices[GEN_ID_METAFLAGS] >= 0 && !cursor.isNull(columnIndices[GEN_ID_METAFLAGS])) {    gen_metaFlags=(int)cursor.getInt(columnIndices[GEN_ID_METAFLAGS]);  }  if (columnIndices[GEN_ID_MOUSECLICK] >= 0 && !cursor.isNull(columnIndices[GEN_ID_MOUSECLICK])) {    gen_mouseClick=(cursor.getInt(columnIndices[GEN_ID_MOUSECLICK]) != 0);  }  if (columnIndices[GEN_ID_MOUSEBUTTONS] >= 0 && !cursor.isNull(columnIndices[GEN_ID_MOUSEBUTTONS])) {    gen_mouseButtons=(int)cursor.getInt(columnIndices[GEN_ID_MOUSEBUTTONS]);  }  if (columnIndices[GEN_ID_KEYSYM] >= 0 && !cursor.isNull(columnIndices[GEN_ID_KEYSYM])) {    gen_keySym=(int)cursor.getInt(columnIndices[GEN_ID_KEYSYM]);  }  if (columnIndices[GEN_ID_SHORTCUT] >= 0 && !cursor.isNull(columnIndices[GEN_ID_SHORTCUT])) {    gen_shortcut=cursor.getString(columnIndices[GEN_ID_SHORTCUT]);  }}  }
class C{  void write(ImageOutputStream ios) throws IOException {}  }
class C{  void populateFrame(int depth,ArrayList<DVariable> frameVars,int isolateId){  DStackContext context=null;  boolean inArgs=false;  int nArgs=-1;  boolean inScopeChain=false;  DValue root=getOrCreateValue(Value.BASE_ID - depth,isolateId);  if (depth < getFrameCount(isolateId))   context=getFrame(depth,isolateId);  if (context != null)   context.removeAllVariables();  Iterator<DVariable> e=frameVars.iterator();  while (e.hasNext()) {    DVariable v=e.next();    String name=v.getName();    v.clearAttribute(VariableAttribute.IS_LOCAL);    v.clearAttribute(VariableAttribute.IS_ARGUMENT);    if (name.equals("this")) {      if (context != null)       context.setThis(v);      v.setAttribute(VariableAttribute.IS_ARGUMENT);      addVariableMember(root,v,isolateId);      if (depth == 0)       putValue(Value.THIS_ID,(DValue)v.getValue(),isolateId);    } else     if (name.equals("super")) {      inArgs=false;    } else     if (name.equals(ARGUMENTS_MARKER)) {      inArgs=true;      try {        nArgs=((Number)(v.getValue().getValueAsObject())).intValue();      } catch (      NumberFormatException nfe) {      }    } else     if (name.equals(SCOPE_CHAIN_MARKER)) {      inArgs=false;      inScopeChain=true;    } else {      if (inArgs) {        v.setAttribute(VariableAttribute.IS_ARGUMENT);        if (context != null)         context.addArgument(v);        if (nArgs > -1) {          if (--nArgs <= 0)           inArgs=false;        }      } else       if (inScopeChain) {        if (context != null)         context.addScopeChainEntry(v);      } else {        v.setAttribute(VariableAttribute.IS_LOCAL);        if (context != null)         context.addLocal(v);      }      if (!inScopeChain)       addVariableMember(root,v,isolateId);    }  }}  }
class C{  public Builder memoryCacheExtraOptions(int maxImageWidthForMemoryCache,int maxImageHeightForMemoryCache){  this.maxImageWidthForMemoryCache=maxImageWidthForMemoryCache;  this.maxImageHeightForMemoryCache=maxImageHeightForMemoryCache;  return this;}  }
class C{  protected void fireActionPerformed(){  if (popup != null) {    String selection=(String)entryList.getSelectedValue();    if (selection != null) {      hidePopup();      setText(selection);      return;    }  }  super.fireActionPerformed();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Burner.getGlobalBurner().cancel();  return null;}  }
class C{  public ClientResponse delete(URI uri){  return client.resource(uri).header(GlanceConstants.AUTH_TOKEN_HEADER,authTokenHeader).delete(ClientResponse.class);}  }
class C{  public int[][] generateRandomPerturbations(int n,int numberOfPerturbations){  int[][] sets=new int[numberOfPerturbations][n];  ArrayList<Integer> list=new ArrayList<Integer>();  for (int i=0; i < n; i++) {    list.add(i);  }  for (int s=0; s < numberOfPerturbations; s++) {    Collections.shuffle(list,random);    for (int j=0; j < n; j++) {      sets[s][j]=list.get(j);    }  }  return sets;}  }
class C{  public static boolean contains(char[] array,char valueToFind){  return indexOf(array,valueToFind) != INDEX_NOT_FOUND;}  }
class C{  public int damageDropped(IBlockState state){  return 0;}  }
class C{  public InvalidPhraseException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public static double stddev(double[] a,int lo,int hi){  return Math.sqrt(var(a,lo,hi));}  }
class C{  public long adjustTimestamp(long pts){  if (lastPts != Long.MIN_VALUE) {    long closestWrapCount=(lastPts + (MAX_PTS_PLUS_ONE / 2)) / MAX_PTS_PLUS_ONE;    long ptsWrapBelow=pts + (MAX_PTS_PLUS_ONE * (closestWrapCount - 1));    long ptsWrapAbove=pts + (MAX_PTS_PLUS_ONE * closestWrapCount);    pts=Math.abs(ptsWrapBelow - lastPts) < Math.abs(ptsWrapAbove - lastPts) ? ptsWrapBelow : ptsWrapAbove;  }  long timeUs=(pts * C.MICROS_PER_SECOND) / 90000;  if (lastPts == Long.MIN_VALUE) {    timestampOffsetUs=firstSampleTimestampUs - timeUs;  }  lastPts=pts;  return timeUs + timestampOffsetUs;}  }
class C{  public TestParams(final Class<?> params,final Class<?> builder){  mParams=params;  mBuilder=builder;  mErr.append(StringUtils.LS);  mErr.append("Params  class ").append(params.getCanonicalName()).append(StringUtils.LS);  mErr.append("Builder class ").append(builder.getCanonicalName()).append(StringUtils.LS);  mExcludeBuilder=new HashSet<>(EXCLUDE_METHODS_BUILDER);  mExcludeParams=new HashSet<>(EXCLUDE_METHODS_PARAMS);  mExcludeTypeCheck=new HashSet<>();}  }
class C{  public static ReilInstruction createNop(final Address address){  return new ReilInstruction(address,ReilMnemonics.NOP,ReilOperand.EMPTY_OPERAND,ReilOperand.EMPTY_OPERAND,ReilOperand.EMPTY_OPERAND);}  }
class C{  public <T extends Number>FeatureVectorBuffer(List<Integer> fIdxList,List<T> fValueList){  idxList=new ArrayList<Integer>();  valList=new ArrayList<Float>();  addFeature(fIdxList,fValueList);}  }
class C{  public static ServiceUser toServiceUser(User fromUser){  if (fromUser == null) {    return null;  }  ServiceUser toUser=new ServiceUser();  toUser.setApplicationUserId(fromUser.getApplicationUserId());  toUser.setEmail(fromUser.getEmail());  toUser.setLocale(fromUser.getLocale());  toUser.setRoleIdentifier(fromUser.getRoleIdentifier());  toUser.setUserId(fromUser.getUserId());  toUser.setLastName(fromUser.getUserLastName());  toUser.setFirstName(fromUser.getUserFirstName());  return toUser;}  }
class C{  public String nextToken(){  if (hasNext()) {    return tokens[tokenPos++];  }  return null;}  }
class C{  private void handleConnectRequest() throws IOException {  int packetLength;  @SuppressWarnings("unused") int version;  @SuppressWarnings("unused") int flags;  int totalLength=7;  byte[] head=null;  int code=-1;  HeaderSet request=new HeaderSet();  HeaderSet reply=new HeaderSet();  int bytesReceived;  packetLength=mInput.read();  packetLength=(packetLength << 8) + mInput.read();  version=mInput.read();  flags=mInput.read();  mMaxPacketLength=mInput.read();  mMaxPacketLength=(mMaxPacketLength << 8) + mInput.read();  if (mMaxPacketLength > ObexHelper.MAX_PACKET_SIZE_INT) {    mMaxPacketLength=ObexHelper.MAX_PACKET_SIZE_INT;  }  if (packetLength > ObexHelper.MAX_PACKET_SIZE_INT) {    code=ResponseCodes.OBEX_HTTP_REQ_TOO_LARGE;    totalLength=7;  } else {    if (packetLength > 7) {      byte[] headers=new byte[packetLength - 7];      bytesReceived=mInput.read(headers);      while (bytesReceived != headers.length) {        bytesReceived+=mInput.read(headers,bytesReceived,headers.length - bytesReceived);      }      ObexHelper.updateHeaderSet(request,headers);    }    if (mListener.getConnectionId() != -1 && request.mConnectionID != null) {      mListener.setConnectionId(ObexHelper.convertToLong(request.mConnectionID));    } else {      mListener.setConnectionId(1);    }    if (request.mAuthResp != null) {      if (!handleAuthResp(request.mAuthResp)) {        code=ResponseCodes.OBEX_HTTP_UNAUTHORIZED;        mListener.onAuthenticationFailure(ObexHelper.getTagValue((byte)0x01,request.mAuthResp));      }      request.mAuthResp=null;    }    if (code != ResponseCodes.OBEX_HTTP_UNAUTHORIZED) {      if (request.mAuthChall != null) {        handleAuthChall(request);        reply.mAuthResp=new byte[request.mAuthResp.length];        System.arraycopy(request.mAuthResp,0,reply.mAuthResp,0,reply.mAuthResp.length);        request.mAuthChall=null;        request.mAuthResp=null;      }      try {        code=mListener.onConnect(request,reply);        code=validateResponseCode(code);        if (reply.nonce != null) {          mChallengeDigest=new byte[16];          System.arraycopy(reply.nonce,0,mChallengeDigest,0,16);        } else {          mChallengeDigest=null;        }        long id=mListener.getConnectionId();        if (id == -1) {          reply.mConnectionID=null;        } else {          reply.mConnectionID=ObexHelper.convertToByteArray(id);        }        head=ObexHelper.createHeader(reply,false);        totalLength+=head.length;        if (totalLength > mMaxPacketLength) {          totalLength=7;          head=null;          code=ResponseCodes.OBEX_HTTP_INTERNAL_ERROR;        }      } catch (      Exception e) {        e.printStackTrace();        totalLength=7;        head=null;        code=ResponseCodes.OBEX_HTTP_INTERNAL_ERROR;      }    }  }  byte[] length=ObexHelper.convertToByteArray(totalLength);  byte[] sendData=new byte[totalLength];  sendData[0]=(byte)code;  sendData[1]=length[2];  sendData[2]=length[3];  sendData[3]=(byte)0x10;  sendData[4]=(byte)0x00;  sendData[5]=(byte)(ObexHelper.MAX_PACKET_SIZE_INT >> 8);  sendData[6]=(byte)(ObexHelper.MAX_PACKET_SIZE_INT & 0xFF);  if (head != null) {    System.arraycopy(head,0,sendData,7,head.length);  }  mOutput.write(sendData);  mOutput.flush();}  }
class C{  private void internTableName(){  int strlen=filename.length();  int firstchar=filename.lastIndexOf('/');  int lastchar=filename.endsWith(".") ? strlen - 1 : strlen;  tablename=filename.substring(firstchar + 1,lastchar).toLowerCase().intern();}  }
class C{  public static String decrypt(String password){  if (password.startsWith("encrypted(") && password.endsWith(")")) {    byte[] decrypted=null;    try {      String toDecrypt=password.substring(10,password.length() - 1);      SecretKeySpec key=new SecretKeySpec(init,"Blowfish");      Cipher cipher=Cipher.getInstance("Blowfish");      cipher.init(Cipher.DECRYPT_MODE,key);      decrypted=cipher.doFinal(hexStringToByteArray(toDecrypt));      return new String(decrypted);    } catch (    Exception e) {      e.printStackTrace();    }  }  return password;}  }
class C{  public final void pushExpressionState(int cn,int en,PrefixResolver nc){  m_currentNodes.push(cn);  m_currentExpressionNodes.push(cn);  m_prefixResolvers.push(nc);}  }
class C{  @Override public synchronized void clear(){  File[] files=mRootDirectory.listFiles();  if (files != null) {    for (    File file : files) {      file.delete();    }  }  mEntries.clear();  mTotalSize=0;  VolleyLog.d("Cache cleared.");}  }
class C{  public String toString(){  return "DurationField[millis]";}  }
class C{  public JSONObject request(String control,String action,PostParameters params) throws FaceppParseException {  URL url;  HttpURLConnection urlConn=null;  try {    url=new URL(webSite + control + "/"+ action);    urlConn=(HttpURLConnection)url.openConnection();    urlConn.setRequestMethod("POST");    urlConn.setConnectTimeout(httpTimeOut);    urlConn.setReadTimeout(httpTimeOut);    urlConn.setDoOutput(true);    urlConn.setRequestProperty("connection","keep-alive");    urlConn.setRequestProperty("Content-Type","multipart/form-data; boundary=" + params.boundaryString());    MultipartEntity reqEntity=params.getMultiPart();    reqEntity.addPart("api_key",new StringBody(apiKey));    reqEntity.addPart("api_secret",new StringBody(apiSecret));    reqEntity.writeTo(urlConn.getOutputStream());    String resultString=null;    if (urlConn.getResponseCode() == 200)     resultString=readString(urlConn.getInputStream()); else     resultString=readString(urlConn.getErrorStream());    JSONObject result=new JSONObject(resultString);    if (result.has("error")) {      if (result.getString("error").equals("API not found"))       throw new FaceppParseException("API not found");      throw new FaceppParseException("API error.",result.getInt("error_code"),result.getString("error"),urlConn.getResponseCode());    }    result.put("response_code",urlConn.getResponseCode());    urlConn.getInputStream().close();    return result;  } catch (  Exception e) {    throw new FaceppParseException("error :" + e.toString());  } finally {    if (urlConn != null)     urlConn.disconnect();  }}  }
class C{  public TreeMaker at(int pos){  this.pos=pos;  return this;}  }
class C{  @SuppressWarnings("unchecked") TypeToken(Type type){  this.type=$Gson$Types.canonicalize($Gson$Preconditions.checkNotNull(type));  this.rawType=(Class<? super T>)$Gson$Types.getRawType(this.type);  this.hashCode=this.type.hashCode();}  }
class C{  private boolean replyProxyTask(String targetBssid,byte[] responseBytes){  MeshLog.d(DEBUG,USE_LOG4J,CLASS,"replyProxyTask() entrance");  EspProxyTask finishedProxyTask=null;synchronized (mSentProxyTaskList) {    for (int i=0; i < mSentProxyTaskList.size(); ++i) {      EspProxyTask proxyTask=mSentProxyTaskList.get(i);      if (proxyTask.getTargetBssid().equals(targetBssid)) {        finishedProxyTask=proxyTask;        mSentProxyTaskList.remove(i--);        MeshLog.i(DEBUG,USE_LOG4J,CLASS,"replyProxyTask() remove " + targetBssid + " from mSentProxyTaskList");        break;      }    }  }  if (finishedProxyTask != null) {    MeshLog.i(DEBUG,USE_LOG4J,CLASS,"replyProxyTask() proxyTask: " + finishedProxyTask);    if (responseBytes == null) {      responseBytes=mMeshResponse.getPureResponseBytes();    }    finishedProxyTask.setResponseBuffer(responseBytes);    try {      finishedProxyTask.replyResponse();    } catch (    IOException e) {      String message=EspSocketUtil.getStrackTrace(e);      MeshLog.e(DEBUG,USE_LOG4J,CLASS,"replyProxyTask() IOException e:" + message);    }    if (finishedProxyTask.getTaskTimeout() != 0) {      decreaseTiemout(finishedProxyTask);    }    return true;  } else {    List<String> bssidList=new ArrayList<String>();synchronized (mSentProxyTaskList) {      for (      EspProxyTask proxyTask : mSentProxyTaskList) {        bssidList.add(proxyTask.getTargetBssid());      }    }    MeshLog.e(DEBUG,USE_LOG4J,CLASS,"replyProxyTask() can't find " + targetBssid + ", mSentProxyTaskList bssidList: "+ bssidList);    return false;  }}  }
class C{  @Override public int print(Graphics graphics,PageFormat pageFormat,int pageIndex){  System.err.println("[GanttPrintable] print(): reduceFactor=" + reduceFactor);  System.err.println("[GanttPrintable] print(): image: w=" + image.getWidth() + " h="+ image.getHeight());  System.err.println("[GanttPrintable] print(): page=" + pageIndex);  int pagesPerRow=(int)(image.getWidth() / reduceFactor / pageFormat.getImageableWidth() + 1);  int numRows=(int)(image.getHeight() / reduceFactor / pageFormat.getImageableHeight() + 1);  System.err.println("[GanttPrintable] print(): numrows=" + numRows + " pagesPerRow="+ pagesPerRow);  int totalPages=pagesPerRow * numRows;  if (pageIndex >= totalPages) {    return Printable.NO_SUCH_PAGE;  }  int currentRow=pageIndex / pagesPerRow;  int currentColumn=pageIndex - currentRow * pagesPerRow;  System.err.println("[GanttPrintable] print(): curentpage=" + currentColumn + " current row="+ currentRow);  int leftx=(int)(currentColumn * (pageFormat.getImageableWidth() * reduceFactor - 2 / 3 * pageFormat.getImageableX()));  int topy=(int)(currentRow * pageFormat.getImageableHeight() * reduceFactor);  System.err.println("[GanttPrintable] print(): leftx=" + leftx + " topy="+ topy);  Graphics2D g2d=(Graphics2D)graphics;  g2d.setClip((int)pageFormat.getImageableX(),(int)pageFormat.getImageableY(),(int)pageFormat.getImageableWidth(),(int)pageFormat.getImageableHeight());  AffineTransform transform=AffineTransform.getScaleInstance(1 / reduceFactor,1 / reduceFactor);  transform.translate(pageFormat.getImageableX() - leftx,pageFormat.getImageableY() - topy);  g2d.drawRenderedImage(image,transform);  return Printable.PAGE_EXISTS;}  }
class C{  public void tryToDequeueGroupChatMessagesAndGroupFileTransfers(String chatId){  mImOperationHandler.post(new GroupChatDequeueTask(mCtx,mCore,mMessagingLog,mChatService,mFileTransferService,mRcsSettings,mContactManager,mHistoryLog,chatId));}  }
class C{  public ImageIcon loadImage(String imageName){  try {    ClassLoader classloader=getClass().getClassLoader();    java.net.URL url=classloader.getResource(imageName);    if (url != null) {      ImageIcon icon=new ImageIcon(url);      return icon;    }  } catch (  Exception e) {    e.printStackTrace();  }  throw new IllegalArgumentException("Unable to load image: " + imageName);}  }
class C{  public void reload(){  String json_config="";  try {    BufferedReader reader=new BufferedReader(new FileReader(parent_file));    String ln;    while ((ln=reader.readLine()) != null)     json_config+=ln;    reader.close();  } catch (  Exception e) {  }  if (json_config.trim().length() == 0)   json_config="{}";  try {    JsonObject obj=JsonParser.object().from(json_config);    full_config=deepMerge(defaults,obj);    PrintStream stream=new PrintStream(parent_file);    String json=toJSON();    stream.println(json);    stream.close();  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public Path makeRelativeTo(Path base){  if (device != base.getDevice() && (device == null || !device.equalsIgnoreCase(base.getDevice())))   return this;  int commonLength=matchingFirstSegments(base);  final int differenceLength=base.segmentCount() - commonLength;  final int newSegmentLength=differenceLength + segmentCount() - commonLength;  if (newSegmentLength == 0)   return Path.EMPTY;  String[] newSegments=new String[newSegmentLength];  Arrays.fill(newSegments,0,differenceLength,"..");  System.arraycopy(segments,commonLength,newSegments,differenceLength,newSegmentLength - differenceLength);  return new Path(null,newSegments,separators & HAS_TRAILING);}  }
class C{  public StreamSource(String systemId){  this.systemId=systemId;}  }
class C{  void stripNonCompiledNodes(Node n,Set<String> filesToCompile){  for (  Node child : n.children()) {    if (!filesToCompile.contains(child.getSourceFileName())) {      child.detachFromParent();    }  }}  }
class C{  private final boolean abortSearch(){  ponderMove=null;  searchId++;  if (computerPlayer == null)   return false;  if (computerPlayer.stopSearch()) {    listener.clearSearchInfo(searchId);    return true;  }  return false;}  }
class C{  public <T extends Node>T add(T ctrl){  return add(ctrl,1);}  }
class C{  public static XpectRunConfiguration createToRunXtFile(String configName,String xtFileToRun){  return new XpectRunConfiguration(configName,xtFileToRun);}  }
class C{  public DataBufferInt(int size){  super(STABLE,TYPE_INT,size);  data=new int[size];  bankdata=new int[1][];  bankdata[0]=data;}  }
class C{  public static void verifyViewLocale(){  FacesContext fc=FacesContext.getCurrentInstance();  if (fc != null)   verifyViewLocale(fc);}  }
class C{  public static DateTime toDate(boolean b,TimeZone tz){  return DateCaster.toDateSimple(b,tz);}  }
class C{  private boolean shouldAppendArguments(IDocument document,int offset,char trigger){  if (trigger != '\0' && trigger != '<' && trigger != '(')   return false;  char[] completion=fProposal.getCompletion();  if (completion.length == 0)   return false;  try {    IRegion region=document.getLineInformationOfOffset(offset);    String line=document.get(region.getOffset(),region.getLength());    int index=offset - region.getOffset();    while (index != line.length() && Character.isUnicodeIdentifierPart(line.charAt(index)))     ++index;    if (index == line.length())     return true;    char ch=line.charAt(index);    return ch != '<';  } catch (  BadLocationException e) {    return true;  }}  }
class C{  public LZ9(){  super(30,2,22,22,1);}  }
class C{  public boolean isRightToLeft(){  return bidiBase.isRightToLeft();}  }
class C{  protected BuiltInTypeImpl(){  super();}  }
class C{  public void cancelJobs(){  for (  final Job job : getJobList())   job.requestCancel();}  }
class C{  public final void testValidateSucceeds(){  RegexValidator regexValidator=new RegexValidator("foo",REGEX);  assertTrue(regexValidator.validate("0123456789"));}  }
class C{  public ContextedRuntimeException(final String message,final Throwable cause){  super(message,cause);  exceptionContext=new DefaultExceptionContext();}  }
class C{  public void removeListener(com.nineoldandroids.animation.Animator.AnimatorListener listener){  mSupportAnimator.removeListener(listener);}  }
class C{  @Nullable private Collection<Method> methodsFromCache(Class<?> cls,Class<? extends Annotation> annCls){  assert cls != null;  assert annCls != null;  Map<Class<? extends Annotation>,Collection<Method>> annCache=mtdCache.get(cls);  return annCache != null ? annCache.get(annCls) : null;}  }
class C{  public boolean isHardwareVersion(){  return hardwareVersion;}  }
class C{  protected void createXAdESTimeStampType(final TimestampType timestampType,final String timestampC14nMethod,final byte[] digestValue) throws DSSException {  try {    Element timeStampDom=null;    final TimestampParameters signatureTimestampParameters=params.getSignatureTimestampParameters();    DigestAlgorithm timestampDigestAlgorithm=signatureTimestampParameters.getDigestAlgorithm();switch (timestampType) {case SIGNATURE_TIMESTAMP:      timeStampDom=DSSXMLUtils.addElement(documentDom,unsignedSignaturePropertiesDom,XAdES,XADES_SIGNATURE_TIME_STAMP);    break;case VALIDATION_DATA_REFSONLY_TIMESTAMP:  break;case VALIDATION_DATA_TIMESTAMP:if (params.isEn319132()) {  timeStampDom=DSSXMLUtils.addElement(documentDom,unsignedSignaturePropertiesDom,XAdES,XADES_SIG_AND_REFS_TIME_STAMP_V2);} else {  timeStampDom=DSSXMLUtils.addElement(documentDom,unsignedSignaturePropertiesDom,XAdES,XADES_SIG_AND_REFS_TIME_STAMP);}break;case ARCHIVE_TIMESTAMP:timeStampDom=DSSXMLUtils.addElement(documentDom,unsignedSignaturePropertiesDom,XAdES141,XADES141_ARCHIVE_TIME_STAMP);timestampDigestAlgorithm=params.getArchiveTimestampParameters().getDigestAlgorithm();break;case ALL_DATA_OBJECTS_TIMESTAMP:timeStampDom=DSSXMLUtils.addElement(documentDom,signedDataObjectPropertiesDom,XAdES,XADES_ALL_DATA_OBJECTS_TIME_STAMP);break;case INDIVIDUAL_DATA_OBJECTS_TIMESTAMP:timeStampDom=DSSXMLUtils.addElement(documentDom,signedDataObjectPropertiesDom,XAdES,XADES_INDIVIDUAL_DATA_OBJECTS_TIME_STAMP);break;default :LOG.error("Unsupported timestamp type : " + timestampType);break;}if (LOG.isDebugEnabled()) {final String encodedDigestValue=Base64.encodeBase64String(digestValue);LOG.debug("Timestamp generation: " + timestampDigestAlgorithm.getName() + " / "+ timestampC14nMethod+ " / "+ encodedDigestValue);}final TimeStampToken timeStampToken=tspSource.getTimeStampResponse(timestampDigestAlgorithm,digestValue);final byte[] timeStampTokenBytes=timeStampToken.getEncoded();final String base64EncodedTimeStampToken=Base64.encodeBase64String(timeStampTokenBytes);final String timestampId=UUID.randomUUID().toString();timeStampDom.setAttribute(ID,"TS-" + timestampId);incorporateC14nMethod(timeStampDom,timestampC14nMethod);final Element encapsulatedTimeStampDom=DSSXMLUtils.addElement(documentDom,timeStampDom,XAdES,XADES_ENCAPSULATED_TIME_STAMP);encapsulatedTimeStampDom.setAttribute(ID,"ETS-" + timestampId);DSSXMLUtils.setTextNode(documentDom,encapsulatedTimeStampDom,base64EncodedTimeStampToken);} catch (IOException e) {throw new DSSException("Error during the creation of the XAdES timestamp!",e);}}  }
class C{  public ScopeItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public boolean isNavBarTintEnabled(){  return mNavBarTintEnabled;}  }
class C{  public void testMergeMultipleFiltersIntoEmptyDocument() throws Exception {  String srcXml="<web-app></web-app>";  WebXml srcWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(srcXml.getBytes("UTF-8")),null);  String mergeXml="<web-app>" + "  <filter>" + "    <filter-name>f1</filter-name>"+ "    <filter-class>fclass1</filter-class>"+ "  </filter>"+ "  <filter>"+ "    <filter-name>f2</filter-name>"+ "    <filter-class>fclass2</filter-class>"+ "  </filter>"+ "  <filter>"+ "    <filter-name>f3</filter-name>"+ "    <filter-class>fclass3</filter-class>"+ "  </filter>"+ "</web-app>";  WebXml mergeWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(mergeXml.getBytes("UTF-8")),null);  WebXmlMerger merger=new WebXmlMerger(srcWebXml);  merger.mergeFilters(mergeWebXml);  List<String> filterNames=WebXmlUtils.getFilterNames(srcWebXml);  assertEquals(3,filterNames.size());  assertEquals("f1",filterNames.get(0));  assertEquals("f2",filterNames.get(1));  assertEquals("f3",filterNames.get(2));}  }
class C{  protected void init(){  setBackground(Color.lightGray);  initTitle();  initPanel();  addWindowListener();}  }
class C{  @Nullable public V removeFirst(){  return vals.isEmpty() ? null : vals.removeFirst();}  }
class C{  protected LocoNetMessage progTaskStart(int pcmd,int val,int cvnum,boolean write){  int addr=cvnum - 1;  LocoNetMessage m=new LocoNetMessage(14);  m.setOpCode(LnConstants.OPC_WR_SL_DATA);  m.setElement(1,0x0E);  m.setElement(2,LnConstants.PRG_SLOT);  m.setElement(3,pcmd);  m.setElement(4,0);  m.setElement(5,hopsa);  m.setElement(6,lopsa);  m.setElement(7,0);  m.setElement(8,(addr & 0x300) / 16 + (addr & 0x80) / 128 + (val & 0x80) / 128 * 2);  m.setElement(9,addr & 0x7F);  m.setElement(10,val & 0x7F);  m.setElement(11,0x7F);  m.setElement(12,0x7F);  return m;}  }
class C{  public SimpleStringProperty topicProperty(){  return this.topic;}  }
class C{  public String sqlAdmin_dropSchema(int step,String vendorName,String catalogName,String schemaName){  return m_interfaces.get(getDBVendorID(vendorName)).sqlAdmin_dropSchema(step,catalogName,schemaName);}  }
class C{  @Override public String toString(){  return toExternalForm();}  }
class C{  public static void printThrowable(Throwable theThro,boolean withStack){  try {    if (withStack) {      theThro.printStackTrace(System.out);    }    if (theThro instanceof Exception) {      Exception t=(Exception)theThro;      Method target=null;      String blank=" ";      try {        target=t.getClass().getMethod("getTargetException",(java.lang.Class<?>[])null);      } catch (      Exception ee) {      }      System.out.println(blank + t.getClass() + "==>"+ t.getMessage());      while (target != null) {        try {          t=(Exception)target.invoke(t,(java.lang.Object[])null);        } catch (        Exception ee) {          t=null;        }        try {          if (t != null) {            blank=blank + "  ";            System.out.println(blank + t.getClass() + "==>"+ t.getMessage());            try {              target=t.getClass().getMethod("getTargetException",(java.lang.Class<?>[])null);            } catch (            Exception ee) {            }          } else {            target=null;          }        } catch (        Exception ee) {          target=null;        }      }      try {        target=((Exception)theThro).getClass().getMethod("getTargetError",(java.lang.Class<?>[])null);      } catch (      Exception ee) {      }      Throwable err=theThro;      while (target != null) {        try {          err=(Error)target.invoke(err,(java.lang.Object[])null);        } catch (        Exception ee) {          err=null;        }        try {          if (err != null) {            blank=blank + "  ";            System.out.println(blank + err.getClass() + "==>"+ err.getMessage());            if (withStack) {              err.printStackTrace(System.out);            }            try {              target=err.getClass().getMethod("getTargetError",(java.lang.Class<?>[])null);            } catch (            Exception ee) {            }          } else {            target=null;          }        } catch (        Exception ee) {          target=null;        }      }    } else {      System.out.println("Throwable is : " + theThro);    }  } catch (  Throwable x) {    System.out.println("Exception : raised in printException : " + x);  }}  }
class C{  public Boolean isHttpSystemLogging(){  return httpSystemLogging;}  }
class C{  public ItemsSketch<T> downSample(final int newK){  final ItemsSketch<T> newSketch=ItemsSketch.getInstance(newK,comparator_);  ItemsUtil.downSamplingMergeInto(this,newSketch);  return newSketch;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:32.780 -0500",hash_original_method="9D05E73016D00F2A428351060541CD33",hash_generated_method="3B519C73BEB86A86B89C9FAC5054EC7A") public SmsBroadcastConfigInfo(int fromId,int toId,int fromScheme,int toScheme,boolean selected){  fromServiceId=fromId;  toServiceId=toId;  fromCodeScheme=fromScheme;  toCodeScheme=toScheme;  this.selected=selected;}  }
class C{  boolean isSessionProtected(){  if (!m_allocationWriteLock.isHeldByCurrentThread()) {    throw new IllegalMonitorStateException();  }  return m_minReleaseAge == 0 && (m_activeTxCount > 0 || !m_contexts.isEmpty());}  }
class C{  public boolean isVisited(int from,int upTo){  if (checkBounds(from) && checkBounds(upTo - 1)) {    for (int i=from; i < upTo; i++) {      if (ONE == this.registry[i]) {        return true;      }    }    return false;  } else {    throw new RuntimeException("The location " + from + ","+ upTo+ " out of bounds [0,"+ (this.registry.length - 1)+ "]");  }}  }
class C{  public static UnManagedVolume checkUnManagedVolumeExistsInDBByWwn(DbClient dbClient,String wwn){  URIQueryResultList unManagedVolumeList=new URIQueryResultList();  dbClient.queryByConstraint(AlternateIdConstraint.Factory.getUnManagedVolumeWwnConstraint(wwn),unManagedVolumeList);  if (unManagedVolumeList.iterator().hasNext()) {    URI unManagedVolumeURI=unManagedVolumeList.iterator().next();    UnManagedVolume volumeInfo=dbClient.queryObject(UnManagedVolume.class,unManagedVolumeURI);    if (!volumeInfo.getInactive()) {      return volumeInfo;    }  }  return null;}  }
class C{  public static String decodeText(String text) throws UnsupportedEncodingException {  if (text.indexOf(ENCODED_TOKEN_MARKER) < 0) {    return text;  }  int offset=0;  int endOffset=text.length();  int startWhiteSpace=-1;  int endWhiteSpace=-1;  StringBuilder decodedText=new StringBuilder(text.length());  boolean previousTokenEncoded=false;  while (offset < endOffset) {    char ch=text.charAt(offset);    if (LINEAR_WHITESPACE.indexOf(ch) != -1) {      startWhiteSpace=offset;      while (offset < endOffset) {        ch=text.charAt(offset);        if (LINEAR_WHITESPACE.indexOf(ch) != -1) {          offset++;        } else {          endWhiteSpace=offset;          break;        }      }    } else {      int wordStart=offset;      while (offset < endOffset) {        ch=text.charAt(offset);        if (LINEAR_WHITESPACE.indexOf(ch) == -1) {          offset++;        } else {          break;        }      }      String word=text.substring(wordStart,offset);      if (word.startsWith(ENCODED_TOKEN_MARKER)) {        try {          String decodedWord=decodeWord(word);          if (!previousTokenEncoded && startWhiteSpace != -1) {            decodedText.append(text.substring(startWhiteSpace,endWhiteSpace));            startWhiteSpace=-1;          }          previousTokenEncoded=true;          decodedText.append(decodedWord);          continue;        } catch (        FormatException e) {        }      }      if (startWhiteSpace != -1) {        decodedText.append(text.substring(startWhiteSpace,endWhiteSpace));        startWhiteSpace=-1;      }      previousTokenEncoded=false;      decodedText.append(word);    }  }  return decodedText.toString();}  }
class C{  public boolean hasSubDomain(){  return fieldSetFlags()[4];}  }
class C{  protected void parseAndAddMapTileSet(URL tileSetProperties) throws IOException, MalformedURLException {  Properties descProps=new Properties();  Logger logger=getLogger();  logger.info("going to read props");  InputStream descURLStream=tileSetProperties.openStream();  descProps.load(descURLStream);  logger.info("loaded " + tileSetProperties.toString() + " "+ descProps.toString());  MapTileSet mts=createMapTileSetFromProperties(descProps);  if (mts != null && mts.allGood()) {    String mtsName=mts.getName();    mapTileSets.put(mts.getName(),mts);    logger.info("Adding " + mtsName + " dataset");  }  descURLStream.close();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.598 -0400",hash_original_method="22C4074A2C3937C6AB79C8A7BBF86F43",hash_generated_method="2C4E56E5F39512C22C2A813013459B98") public PathFileComparator(){  this.caseSensitivity=IOCase.SENSITIVE;}  }
class C{  public boolean hasRole(UserRoleType roleToCheckFor){  return getAssignedRole(roleToCheckFor) != null;}  }
class C{  private static boolean containsUnsupportedUse(IR ir,Register reg,int size,RVMArray vmArray,Set<Register> visited){  final int MAX_SIZE_FOR_VARIABLE_LOAD_STORE=VM.BuildForIA32 ? 2 : 1;  for (RegisterOperand use=reg.useList; use != null; use=use.getNext()) {switch (use.instruction.getOpcode()) {case REF_IFCMP_opcode:case NEWOBJMULTIARRAY_opcode:case OBJARRAY_STORE_CHECK_opcode:case OBJARRAY_STORE_CHECK_NOTNULL_opcode:      return true;case CHECKCAST_opcode:case CHECKCAST_NOTNULL_opcode:case CHECKCAST_UNRESOLVED_opcode:{      TypeReference lhsType=TypeCheck.getType(use.instruction).getTypeRef();      byte ans=ClassLoaderProxy.includesType(lhsType,vmArray.getTypeRef());      if (ans == MAYBE) {        return true;      } else       if (ans == YES) {        if (visited == null) {          visited=new HashSet<Register>();        }        Register copy=TypeCheck.getResult(use.instruction).getRegister();        if (!visited.contains(copy)) {          visited.add(copy);          if (containsUnsupportedUse(ir,copy,size,vmArray,visited)) {            return true;          }        }      }    }  break;case INSTANCEOF_opcode:case INSTANCEOF_NOTNULL_opcode:case INSTANCEOF_UNRESOLVED_opcode:{  TypeReference lhsType=InstanceOf.getType(use.instruction).getTypeRef();  if (ClassLoaderProxy.includesType(lhsType,vmArray.getTypeRef()) == MAYBE) {    return true;  }}break;case INT_ASTORE_opcode:case LONG_ASTORE_opcode:case FLOAT_ASTORE_opcode:case DOUBLE_ASTORE_opcode:case BYTE_ASTORE_opcode:case SHORT_ASTORE_opcode:case REF_ASTORE_opcode:if (!AStore.getIndex(use.instruction).isIntConstant() && size > MAX_SIZE_FOR_VARIABLE_LOAD_STORE) {return true;}break;case INT_ALOAD_opcode:case LONG_ALOAD_opcode:case FLOAT_ALOAD_opcode:case DOUBLE_ALOAD_opcode:case BYTE_ALOAD_opcode:case UBYTE_ALOAD_opcode:case USHORT_ALOAD_opcode:case SHORT_ALOAD_opcode:case REF_ALOAD_opcode:if (!ALoad.getIndex(use.instruction).isIntConstant() && size > MAX_SIZE_FOR_VARIABLE_LOAD_STORE) {return true;}break;case REF_MOVE_opcode:if (visited == null) {visited=new HashSet<Register>();}Register copy=Move.getResult(use.instruction).getRegister();if (!visited.contains(copy)) {visited.add(copy);if (containsUnsupportedUse(ir,copy,size,vmArray,visited)) {return true;}}break;}}return false;}  }
class C{  public static void createTld(String tld){  createTld(tld,TldState.GENERAL_AVAILABILITY);}  }
class C{  public void updatePreviousRunDateTime(final DateTime previousRunDateTime){  if (previousRunDateTime != null) {    this.previousRunDateTime=previousRunDateTime.toDate();  }}  }
class C{  public static String millisToString(long millis){  return Strings.millisToString(millis,false);}  }
class C{  public StreamListener(Reader in,Writer out){  super("DJAPI StreamListener");  setDaemon(true);  fIn=in;  fOut=out;}  }
class C{  public static NotImplementedE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  NotImplementedE object=new NotImplementedE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");    if ("true".equals(nillableValue) || "1".equals(nillableValue)) {      while (!reader.isEndElement()) {        reader.next();      }      return null;    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"NotImplemented".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (NotImplementedE)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","NotImplemented").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        object.setNotImplemented(null);        reader.next();        reader.next();      } else {        object.setNotImplemented(NotImplemented.Factory.parse(reader));        reader.next();      }    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public static int extractLowUnsignedNibble(int value){  return value & 0x0F;}  }
class C{  public int compare(byte[] b1,int s1,int l1,byte[] b2,int s2,int l2){  return super.compare(b2,s2,l2,b1,s1,l1);}  }
class C{  public TechnicalServiceNotAliveException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public void addBounds(Bounds<Double> bounds){}  }
class C{  public ToStringBuilder append(String fieldName,int[] array){  style.append(buffer,fieldName,array,null);  return this;}  }
class C{  protected void rehash(){  int gargagecells=objects.length - (elements + freecells);  if (gargagecells / (double)objects.length > 0.05)   rehash(objects.length); else   rehash(objects.length * 2 + 1);}  }
class C{  protected void printIssue(IssuesEntry entry){  System.out.println(DIVIDER);  if (entry.getId() != null) {    String issueId=getIssueId(entry.getId());    System.out.printf("Issue #%s:\t%s\n",issueId,entry.getId());  } else {    System.out.println("Issue");  }  if (entry.getTitle() != null) {    System.out.println("\tSummary\n\t\t" + entry.getTitle().getPlainText());  }  Person author=entry.getAuthors().get(0);  printPerson("Reporter",author.getName(),author.getUri());  TextContent textContent=(TextContent)entry.getContent();  if ((textContent != null) && (textContent.getContent() != null)) {    HtmlTextConstruct textConstruct=(HtmlTextConstruct)textContent.getContent();    System.out.println("\tDescription\n\t\t" + textConstruct.getHtml());  }  if (entry.hasStatus()) {    System.out.println("\tStatus\n\t\t" + entry.getStatus().getValue());  }  if (entry.hasOwner()) {    Owner owner=entry.getOwner();    printPerson("Owner",owner.getUsername().getValue(),(owner.getUri() == null) ? null : owner.getUri().getValue());  }  if (entry.getLabels().size() > 0) {    System.out.println("\tLabel");    for (    Label label : entry.getLabels()) {      System.out.println("\t\t" + label.getValue());    }  }  if (entry.getCcs().size() > 0) {    System.out.println("\tCC");    for (    Cc cc : entry.getCcs()) {      printPerson(null,cc.getUsername().getValue(),(cc.getUri() == null) ? null : cc.getUri().getValue());    }  }  if (entry.getBlockedOns().size() > 0) {    System.out.println("\tBlockedOn");    for (    BlockedOn blockedOn : entry.getBlockedOns()) {      System.out.print("\t\t");      if (blockedOn.hasProject()) {        System.out.print(blockedOn.getProject().getValue() + ":");      }      System.out.println(blockedOn.getId().getValue());    }  }  if (entry.getBlockings().size() > 0) {    System.out.println("\tBlocking");    for (    Blocking blocking : entry.getBlockings()) {      System.out.print("\t\t");      if (blocking.hasProject()) {        System.out.print(blocking.getProject().getValue() + ":");      }      System.out.println(blocking.getId().getValue());    }  }  if (entry.hasMergedInto()) {    System.out.print("\tMergedInto\n\t\t");    if (entry.getMergedInto().hasProject()) {      System.out.print(entry.getMergedInto().getProject().getValue() + ":");    }    System.out.println(entry.getMergedInto().getId().getValue());  }}  }
class C{  public Object clone() throws CloneNotSupportedException {  FilterExprWalker clone=(FilterExprWalker)super.clone();  if (null != m_exprObj)   clone.m_exprObj=(XNodeSet)m_exprObj.clone();  return clone;}  }
class C{  public InlineQueryResultGif build(){  return new InlineQueryResultGif(id,gif_url,gif_width,gif_height,thumb_url,title,caption,reply_markup,input_message_content);}  }
class C{  public static RegisterSpec make(int reg,TypeBearer type){  return intern(reg,type,null);}  }
class C{  private void updateCurrentCriteriumPath(){  if (m_jtree.getSelectionPath() == null) {    m_jtree.setCurrentCriteriumPath(m_jtree.getPathForRow(0));  } else {    m_jtree.setCurrentCriteriumPath(m_jtree.getSelectionPath());  }  updateDefineConditionPanel((JCriteriumTreeNode)m_jtree.getCurrentCriteriumPath().getLastPathComponent());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:04.336 -0500",hash_original_method="60B916CF0A3D5B965BF0342DD7963DCA",hash_generated_method="FE2C555887A498F2F13E19B35C08CDC4") public static Sampler WRAP_NEAREST(RenderScript rs){  if (rs.mSampler_WRAP_NEAREST == null) {    Builder b=new Builder(rs);    b.setMinification(Value.NEAREST);    b.setMagnification(Value.NEAREST);    b.setWrapS(Value.WRAP);    b.setWrapT(Value.WRAP);    rs.mSampler_WRAP_NEAREST=b.create();  }  return rs.mSampler_WRAP_NEAREST;}  }
class C{  public boolean requiresIntegerRate(){  return false;}  }
class C{  public boolean nextBoolean(){  boolean result=super.nextBoolean();  println("nextBoolean=" + result);  return result;}  }
class C{  public static void close(@Nullable AutoCloseable rsrc,@Nullable IgniteLogger log){  if (rsrc != null)   try {    rsrc.close();  } catch (  Exception e) {    warn(log,"Failed to close resource: " + e.getMessage());  }}  }
class C{  @Override public boolean willNotMoveInCurrentCollection(ObjectReference object){  if (Space.isInSpace(SSGCspy.GCSPY,object))   return true;  return super.willNotMoveInCurrentCollection(object);}  }
class C{  private void validateNodeServices(List<String> logNames){  if (logNames == null || logNames.isEmpty()) {    return;  }  List<String> logNamesClone=new ArrayList<String>(logNames);  logNamesClone.removeAll(ServicesMetadata.getControlNodeServiceNames());  logNamesClone.removeAll(ServicesMetadata.getExtraNodeServiceNames());  if (!logNamesClone.isEmpty()) {    throw APIException.badRequests.parameterIsNotValid("log name");  }}  }
class C{  public void endVisit(ArrayType node){}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static HashSetModifiableDBIDs newHashSet(){  return DBIDFactory.FACTORY.newHashSet();}  }
class C{  public void storeType(final Expression exp,final ClassNode cn){  typeCheckingVisitor.storeType(exp,cn);}  }
class C{  @Override public boolean contains(Object o){  return nodes.containsKey(o);}  }
class C{  public void paintTextAreaBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public NioClientManager(){  try {    selector=SelectorProvider.provider().openSelector();  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public void processCollection(Collection<E> collection){  for (  E element : collection) {    processElement(element);  }}  }
class C{  public tuple3<Integer,Integer,Integer> find_longest_match(int alo,int ahi,int blo,int bhi){  int besti=alo;  int bestj=blo;  int bestsize=0;  Map<Integer,Integer> j2len=new HashMap<Integer,Integer>();  list<Integer> nothing=x.list();  for (  int i : x.range(alo,ahi)) {    Map<Integer,Integer> newj2len=new HashMap<Integer,Integer>();    for (    int j : b2j.get(x.String(a).get(i),nothing)) {      if (j < blo) {        continue;      }      if (j >= bhi) {        break;      }      if (j2len.containsKey(j - 1)) {        newj2len.put(j,j2len.get(j - 1) + 1);      } else {        newj2len.put(j,1);      }      int k=newj2len.get(j);      if (k > bestsize) {        besti=i - k + 1;        bestj=j - k + 1;        bestsize=k;      }    }    j2len=newj2len;  }  while (besti > alo && bestj > blo && x.String(a).get(besti - 1).equals(x.String(b).get(bestj - 1))) {    besti=besti - 1;    bestj=bestj - 1;    bestsize=bestsize + 1;  }  while (besti + bestsize < ahi && bestj + bestsize < bhi && x.String(a).get(besti + bestsize).equals(x.String(b).get(bestj + bestsize))) {    bestsize+=1;  }  while (besti > alo && bestj > blo && x.String(a).get(besti - 1).equals(x.String(b).get(bestj - 1))) {    besti=besti - 1;    bestj=bestj - 1;    bestsize=bestsize + 1;  }  while (besti + bestsize < ahi && bestj + bestsize < bhi && x.String(a).get(besti + bestsize).equals(x.String(b).get(bestj + bestsize))) {    bestsize=bestsize + 1;  }  return tuple3.valueOf(besti,bestj,bestsize);}  }
class C{  private static void executeTask(Task task){  System.out.println("Payload for the task:");  System.out.println(task.getPayloadBase64());}  }
class C{  public static boolean containsIgnoreCase(String[] array,String value){  for (  String str : array) {    if (value == null && str == null) {      return true;    }    if (value != null && value.equalsIgnoreCase(str)) {      return true;    }  }  return false;}  }
class C{  public List<Log> logs(){  return Collections.unmodifiableList(new ArrayList<>(this.logs));}  }
class C{  public static Date ceiling(final Date date,final int field){  if (date == null) {    throw new IllegalArgumentException("The date must not be null");  }  final Calendar gval=Calendar.getInstance();  gval.setTime(date);  modify(gval,field,ModifyType.CEILING);  return gval.getTime();}  }
class C{  protected static PduBody parseParts(ByteArrayInputStream pduDataStream){  if (pduDataStream == null) {    return null;  }  int count=parseUnsignedInt(pduDataStream);  PduBody body=new PduBody();  for (int i=0; i < count; i++) {    int headerLength=parseUnsignedInt(pduDataStream);    int dataLength=parseUnsignedInt(pduDataStream);    PduPart part=new PduPart();    int startPos=pduDataStream.available();    if (startPos <= 0) {      return null;    }    HashMap<Integer,Object> map=new HashMap<Integer,Object>();    byte[] contentType=parseContentType(pduDataStream,map);    if (null != contentType) {      part.setContentType(contentType);    } else {      part.setContentType((PduContentTypes.contentTypes[0]).getBytes());    }    byte[] name=(byte[])map.get(PduPart.P_NAME);    if (null != name) {      part.setName(name);    }    Integer charset=(Integer)map.get(PduPart.P_CHARSET);    if (null != charset) {      part.setCharset(charset);    }    int endPos=pduDataStream.available();    int partHeaderLen=headerLength - (startPos - endPos);    if (partHeaderLen > 0) {      if (false == parsePartHeaders(pduDataStream,part,partHeaderLen)) {        return null;      }    } else     if (partHeaderLen < 0) {      return null;    }    if ((null == part.getContentLocation()) && (null == part.getName()) && (null == part.getFilename())&& (null == part.getContentId())) {      part.setContentLocation(Long.toOctalString(System.currentTimeMillis()).getBytes());    }    if (dataLength > 0) {      byte[] partData=new byte[dataLength];      String partContentType=new String(part.getContentType());      pduDataStream.read(partData,0,dataLength);      if (partContentType.equalsIgnoreCase(ContentType.MULTIPART_ALTERNATIVE)) {        PduBody childBody=parseParts(new ByteArrayInputStream(partData));        part=childBody.getPart(0);      } else {        byte[] partDataEncoding=part.getContentTransferEncoding();        if (null != partDataEncoding) {          String encoding=new String(partDataEncoding);          if (encoding.equalsIgnoreCase(PduPart.P_BASE64)) {            partData=Base64.decodeBase64(partData);          } else           if (encoding.equalsIgnoreCase(PduPart.P_QUOTED_PRINTABLE)) {            partData=QuotedPrintable.decodeQuotedPrintable(partData);          } else {          }        }        if (null == partData) {          log("Decode part data error!");          return null;        }        part.setData(partData);      }    }    if (THE_FIRST_PART == checkPartPosition(part)) {      body.addPart(0,part);    } else {      body.addPart(part);    }  }  return body;}  }
class C{  public int read(byte b[]) throws IOException {  return inputReader.read(b);}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  public GuacamoleTunnel connect(ModeledAuthenticatedUser user,ModeledConnectionGroup connectionGroup,GuacamoleClientInformation info) throws GuacamoleException {  if (hasObjectPermission(user,connectionGroup.getIdentifier(),ObjectPermission.Type.READ))   return tunnelService.getGuacamoleTunnel(user,connectionGroup,info);  throw new GuacamoleSecurityException("Permission denied.");}  }
class C{  @SuppressWarnings("unchecked") public static void parseSDP(Agent localAgent,String sdp) throws Exception {  SdpFactory factory=new NistSdpFactory();  SessionDescription sdess=factory.createSessionDescription(sdp);  for (  IceMediaStream stream : localAgent.getStreams()) {    stream.setRemotePassword(sdess.getAttribute("ice-pwd"));    stream.setRemoteUfrag(sdess.getAttribute("ice-ufrag"));  }  Connection globalConn=sdess.getConnection();  String globalConnAddr=null;  if (globalConn != null)   globalConnAddr=globalConn.getAddress();  Vector<MediaDescription> mdescs=sdess.getMediaDescriptions(true);  for (  MediaDescription desc : mdescs) {    String streamName=desc.getMedia().getMediaType();    IceMediaStream stream=localAgent.getStream(streamName);    if (stream == null)     continue;    Vector<Attribute> attributes=desc.getAttributes(true);    for (    Attribute attribute : attributes) {      if (attribute.getName().equals(CandidateAttribute.NAME))       parseCandidate(attribute,stream);    }    Connection streamConn=desc.getConnection();    String streamConnAddr=null;    if (streamConn != null)     streamConnAddr=streamConn.getAddress(); else     streamConnAddr=globalConnAddr;    int port=desc.getMedia().getMediaPort();    TransportAddress defaultRtpAddress=new TransportAddress(streamConnAddr,port,Transport.UDP);    int rtcpPort=port + 1;    String rtcpAttributeValue=desc.getAttribute("rtcp");    if (rtcpAttributeValue != null)     rtcpPort=Integer.parseInt(rtcpAttributeValue);    TransportAddress defaultRtcpAddress=new TransportAddress(streamConnAddr,rtcpPort,Transport.UDP);    Component rtpComponent=stream.getComponent(Component.RTP);    Component rtcpComponent=stream.getComponent(Component.RTCP);    Candidate<?> defaultRtpCandidate=rtpComponent.findRemoteCandidate(defaultRtpAddress);    rtpComponent.setDefaultRemoteCandidate(defaultRtpCandidate);    if (rtcpComponent != null) {      Candidate<?> defaultRtcpCandidate=rtcpComponent.findRemoteCandidate(defaultRtcpAddress);      rtcpComponent.setDefaultRemoteCandidate(defaultRtcpCandidate);    }  }}  }
class C{  @Override public int showFeedback(String message){  host.showFeedback(message);  return -1;}  }
class C{  public static OnScreenHint makeText(Activity activity,CharSequence text){  OnScreenHint result=new OnScreenHint(activity);  LayoutInflater inflate=(LayoutInflater)activity.getSystemService(Context.LAYOUT_INFLATER_SERVICE);  View v=inflate.inflate(R.layout.on_screen_hint,null);  TextView tv=(TextView)v.findViewById(R.id.message);  tv.setText(text);  result.mNextView=v;  return result;}  }
class C{  @Override public void respond(String response){  getUser().send().ctcpResponse(response);}  }
class C{  public HelloMessage(HelloMessage other){  __isset_bitfield=other.__isset_bitfield;  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  this.nodeId=other.nodeId;  if (other.isSetAuthScheme()) {    this.authScheme=other.authScheme;  }  if (other.isSetAuthChallengeResponse()) {    this.authChallengeResponse=new AuthChallengeResponse(other.authChallengeResponse);  }}  }
class C{  static public double percDiff(double value,double base){  return perc(value - base,base);}  }
class C{  void clear(){  textPane.setText("");}  }
class C{  public boolean isTableID(){  Object oo=get_Value(COLUMNNAME_IsTableID);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void loadContact(){  getLoaderManager().restartLoader(0,null,this);}  }
class C{  public int totalSize(){  return subindexes.get(subindexes.size() - 1);}  }
class C{  public void test_indexOfSubList2(){  ArrayList sub=new ArrayList();  sub.add(new Integer(1));  sub.add(new Integer(2));  sub.add(new Integer(3));  ArrayList sub2=new ArrayList();  sub2.add(new Integer(7));  sub2.add(new Integer(8));  ArrayList src=new ArrayList();  src.addAll(sub);  src.addAll(sub);  src.addAll(sub);  src.add(new Integer(5));  src.add(new Integer(6));  sub=new ArrayList(src.subList(3,11));  assertEquals("TestA : Returned wrong indexOfSubList, ",3,Collections.indexOfSubList(src,sub));  sub=new ArrayList(src.subList(6,11));  assertEquals("TestB : Returned wrong indexOfSubList, ",6,Collections.indexOfSubList(src,sub));  sub=new ArrayList(src.subList(0,3));  assertEquals("TestCC : Returned wrong indexOfSubList, ",0,Collections.indexOfSubList(src,sub));  sub=new ArrayList(src.subList(9,11));  assertEquals("TestD : Returned wrong indexOfSubList, ",9,Collections.indexOfSubList(src,sub));  sub=new ArrayList(src.subList(10,11));  assertEquals("TestE : Returned wrong indexOfSubList, ",10,Collections.indexOfSubList(src,sub));  sub=new ArrayList(src.subList(0,11));  assertEquals("TestH : Returned wrong indexIndexOfSubList, ",0,Collections.indexOfSubList(src,sub));  assertEquals("TestI : Returned wrong indexOfSubList, ",-1,Collections.indexOfSubList(src,sub2));}  }
class C{  private void remove(ThreadGroup g){synchronized (this) {    if (destroyed) {      return;    }    for (int i=0; i < ngroups; i++) {      if (groups[i] == g) {        ngroups-=1;        System.arraycopy(groups,i + 1,groups,i,ngroups - i);        groups[ngroups]=null;        break;      }    }    if (nthreads == 0) {      notifyAll();    }    if (daemon && (nthreads == 0) && (nUnstartedThreads == 0)&& (ngroups == 0)) {      destroy();    }  }}  }
class C{  public static boolean areIdentical(String playerIdent,OfflinePlayer compareTo){  return playerIdent.equals(getIdentificationForAsString(compareTo));}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tFull class name of filter to use, followed\n" + "\tby filter options.\n" + "\teg: \"weka.filters.unsupervised.attribute.Remove -V -R 1,2\"\n"+ "\t(default: weka.filters.MultiFilter with\n"+ "\tweka.filters.unsupervised.attribute.ReplaceMissingValues)","F",1,"-F <filter specification>"));  result.addElement(new Option("\tThe class index.\n" + "\t(default: -1, i.e. unset)","c",1,"-c <the class index>"));  result.addAll(Collections.list(super.listOptions()));  return result.elements();}  }
class C{  public NamespaceImportSpecifier createNamespaceImportSpecifier(){  NamespaceImportSpecifierImpl namespaceImportSpecifier=new NamespaceImportSpecifierImpl();  return namespaceImportSpecifier;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.IMPORT_SPECIFIER__FLAGGED_USED_IN_CODE:    return flaggedUsedInCode != FLAGGED_USED_IN_CODE_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  public Token(int start,int end,Object type,String content){  this.content=new StringBuilder();  this.start=start;  this.end=end;  this.type=type;  this.content.append(content);}  }
class C{  public boolean hasDetails(String sku){  return mSkuMap.containsKey(sku);}  }
class C{  private void insertDummyContact(){  ArrayList<ContentProviderOperation> operations=new ArrayList<ContentProviderOperation>(2);  ContentProviderOperation.Builder op=ContentProviderOperation.newInsert(ContactsContract.RawContacts.CONTENT_URI).withValue(ContactsContract.RawContacts.ACCOUNT_TYPE,null).withValue(ContactsContract.RawContacts.ACCOUNT_NAME,null);  operations.add(op.build());  op=ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI).withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID,0).withValue(ContactsContract.Data.MIMETYPE,ContactsContract.CommonDataKinds.StructuredName.CONTENT_ITEM_TYPE).withValue(ContactsContract.CommonDataKinds.StructuredName.DISPLAY_NAME,DUMMY_CONTACT_NAME);  operations.add(op.build());  ContentResolver resolver=getActivity().getContentResolver();  try {    resolver.applyBatch(ContactsContract.AUTHORITY,operations);  } catch (  RemoteException e) {    Log.d(TAG,"Could not add a new contact: " + e.getMessage());  }catch (  OperationApplicationException e) {    Log.d(TAG,"Could not add a new contact: " + e.getMessage());  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void close(InputStream in){  try {    if (in != null) {      in.close();    }  } catch (  IOException ioE) {  }}  }
class C{  public void addPosition(int offset,int length,String... ids){  TextAttribute highlighting=ids.length == 1 ? attributeProvider.getAttribute(ids[0]) : attributeProvider.getMergedAttributes(ids);  boolean isExisting=false;  for (int i=0, n=removedPositions.size(); i < n; i++) {    AttributedPosition position=removedPositions.get(i);    if (position == null)     continue;    if (position.isEqual(offset,length,highlighting)) {      isExisting=true;      removedPositions.set(i,null);      removedPositionCount--;      break;    }  }  if (!isExisting) {    AttributedPosition position=presenter.createHighlightedPosition(offset,length,highlighting);    addedPositions.add(position);  }}  }
class C{  private void checkSubject(String op){  AccessControlContext acc=AccessController.getContext();  Subject subject=Subject.getSubject(acc);  Set principals=subject.getPrincipals();  Principal principal=(Principal)principals.iterator().next();  if (!(principal instanceof JMXPrincipal))   throw new SecurityException(op + ": Authenticated subject contains " + "invalid principal type = "+ principal.getClass().getName());  String identity=principal.getName();  if (!identity.equals(principalName))   throw new SecurityException(op + ": Authenticated subject contains " + "invalid principal name = "+ identity);}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  public Element store(Object o){  SlipTurnoutIcon p=(SlipTurnoutIcon)o;  if (!p.isActive()) {    return null;  }  Element element=new Element("slipturnouticon");  element.addContent(new Element("turnoutEast").addContent(p.getNamedTurnout(SlipTurnoutIcon.EAST).getName()));  element.addContent(new Element("turnoutWest").addContent(p.getNamedTurnout(SlipTurnoutIcon.WEST).getName()));switch (p.getTurnoutType()) {case SlipTurnoutIcon.DOUBLESLIP:    element.addContent(storeIcon("lowerWestToLowerEast",p.getLowerWestToLowerEastIcon(),p.getLWLEText()));  element.addContent(storeIcon("upperWestToUpperEast",p.getUpperWestToUpperEastIcon(),p.getUWUEText()));element.setAttribute("turnoutType","doubleSlip");break;case SlipTurnoutIcon.SINGLESLIP:element.addContent(storeIcon("lowerWestToLowerEast",p.getLowerWestToLowerEastIcon(),p.getLWLEText()));element.setAttribute("turnoutType","singleSlip");element.setAttribute("singleSlipRoute",p.getSingleSlipRoute() ? "upperWestToUpperEast" : "lowerWestToLowerEast");break;case SlipTurnoutIcon.THREEWAY:element.addContent(storeIcon("lowerWestToLowerEast",p.getLowerWestToLowerEastIcon(),p.getLWLEText()));element.setAttribute("turnoutType","threeWay");element.setAttribute("firstTurnoutExit",p.getSingleSlipRoute() ? "upper" : "lower");break;case SlipTurnoutIcon.SCISSOR:if (!p.getSingleSlipRoute()) {element.addContent(new Element("turnoutLowerEast").addContent(p.getNamedTurnout(SlipTurnoutIcon.LOWEREAST).getName()));element.addContent(new Element("turnoutLowerWest").addContent(p.getNamedTurnout(SlipTurnoutIcon.LOWERWEST).getName()));}element.addContent(storeIcon("lowerWestToLowerEast",p.getLowerWestToLowerEastIcon(),p.getLWLEText()));element.setAttribute("turnoutType","scissor");}storeCommonAttributes(p,element);element.setAttribute("tristate",p.getTristate() ? "true" : "false");element.addContent(storeIcon("lowerWestToUpperEast",p.getLowerWestToUpperEastIcon(),p.getLWUEText()));element.addContent(storeIcon("upperWestToLowerEast",p.getUpperWestToLowerEastIcon(),p.getUWLEText()));element.addContent(super.storeIcon("unknown",p.getUnknownIcon()));element.addContent(super.storeIcon("inconsistent",p.getInconsistentIcon()));element.setAttribute("class","jmri.jmrit.display.configurexml.SlipTurnoutIconXml");return element;}  }
class C{  private boolean isPrettyPrintingEnabled(){  return flags.contains(WriterFlags.PRETTY_PRINT) && !currentElement().unformattedChildren;}  }
class C{  public static boolean isValidPNG(InputStream is){  try {    byte[] b=new byte[8];    is.read(b,0,8);    if (Arrays.equals(b,new BigInteger("89504e470d0a1a0a",16).toByteArray())) {      return false;    }  } catch (  Exception e) {    return false;  }  return true;}  }
class C{  public synchronized void openDriver(SurfaceHolder holder) throws IOException {  Camera theCamera=camera;  if (theCamera == null) {    theCamera=OpenCameraInterface.open();    if (theCamera == null) {      throw new IOException();    }    camera=theCamera;  }  theCamera.setPreviewDisplay(holder);  if (!initialized) {    initialized=true;    configManager.initFromCameraParameters(theCamera);    if (requestedFramingRectWidth > 0 && requestedFramingRectHeight > 0) {      setManualFramingRect(requestedFramingRectWidth,requestedFramingRectHeight);      requestedFramingRectWidth=0;      requestedFramingRectHeight=0;    }  }  Camera.Parameters parameters=theCamera.getParameters();  String parametersFlattened=parameters == null ? null : parameters.flatten();  try {    configManager.setDesiredCameraParameters(theCamera,false);  } catch (  RuntimeException re) {    Log.w(TAG,"Camera rejected parameters. Setting only minimal safe-mode parameters");    Log.i(TAG,"Resetting to saved camera params: " + parametersFlattened);    if (parametersFlattened != null) {      parameters=theCamera.getParameters();      parameters.unflatten(parametersFlattened);      try {        theCamera.setParameters(parameters);        configManager.setDesiredCameraParameters(theCamera,true);      } catch (      RuntimeException re2) {        Log.w(TAG,"Camera rejected even safe-mode parameters! No configuration");      }    }  }}  }
class C{  private void cleanupAnyGroupBackupSnapshots(StorageSystem storage,CIMObjectPath replicationGroupPath){  _log.info("Cleaning up backup snapshots for: {}",replicationGroupPath);  CloseableIterator<CIMObjectPath> settings=null;  try {    settings=_helper.getReference(storage,replicationGroupPath,SmisConstants.CLAR_SETTINGS_DEFINE_STATE_RG_SAFS,null);    while (settings.hasNext()) {      CIMObjectPath path=settings.next();      CIMArgument[] inArgs=_helper.getDeleteSettingsForSnapshotInputArguments(path,true);      CIMArgument[] outArgs=new CIMArgument[5];      _helper.callModifySettingsDefineState(storage,inArgs,outArgs);    }  } catch (  Exception e) {    _log.warn("Problem making SMI-S call: ",e);  } finally {    if (settings != null) {      settings.close();    }  }}  }
class C{  public void propertyChange(PropertyChangeEvent evt){  if (evt.getPropertyName().equals(org.compiere.model.GridField.PROPERTY))   setValue(evt.getNewValue());}  }
class C{  public void addToken(Token tok){  this.tokens.add(tok);}  }
class C{  public void stopIfRequired(){  if (System.currentTimeMillis() > stopAt) {    throw new IllegalStateException();  }}  }
class C{  public static void main(String[] args){  TestTypeParameters tester=new TestTypeParameters();  run(tester,ARGS1,TEST1,NEGATED_TEST);  run(tester,ARGS2,TEST2,NEGATED_TEST);  tester.printSummary();}  }
class C{  public boolean handle(final HttpServerRequest req){  if (req.method().equals(HttpMethod.GET) && req.uri().contains(ZIP_RESOURCE_FLAG)) {    int seperationIndex=req.uri().lastIndexOf(ZIP_RESOURCE_FLAG) + ZIP_RESOURCE_FLAG.length() - 1;    String zipUrl=req.uri().substring(0,seperationIndex);    String insidePath=req.uri().substring(seperationIndex + 1);    performGETRequest(req,zipUrl,insidePath);    return true;  } else {    return false;  }}  }
class C{  private void validateExpressions(Class type) throws Exception {  for (  Label label : elements) {    if (label != null) {      validateExpression(label);    }  }  for (  Label label : attributes) {    if (label != null) {      validateExpression(label);    }  }  if (text != null) {    validateExpression(text);  }}  }
class C{  @RequestMapping(value=ApiUrl.CITIZEN_SEND_OTP,method=RequestMethod.POST) public @ResponseBody ResponseEntity<String> sendOTP(HttpServletRequest request){  ApiResponse res=ApiResponse.newInstance();  String identity=request.getParameter("identity");  Citizen citizen=null;  try {    if (identity.matches("\\d{10}")) {      citizen=citizenService.getCitizenByUserName(identity);    } else     if (identity.contains("@") && identity.contains(".")) {      citizen=citizenService.getCitizenByEmailId(identity);    }    if (citizen == null) {      return res.error(getMessage("user.not.found"));    }    citizenService.sendActivationMessage(citizen);    return res.setDataAdapter(new UserAdapter()).success(citizen,this.getMessage("sendOTP.success"));  } catch (  Exception e) {    LOGGER.error("EGOV-API ERROR ",e);    return res.error(getMessage("server.error"));  }}  }
class C{  public void deleteGeolocSharings2(ContactId contact) throws RemoteException {  if (contact == null) {    throw new ServerApiIllegalArgumentException("contact must not be null!");  }  mRichcallService.tryToDeleteGeolocSharings(contact);}  }
class C{  public TryStatement newTryStatement(){  return new TryStatement(this);}  }
class C{  public void execute(){  Object source=getData();  TetradTest test;  System.out.println("Clusters " + getParams().get("clusters",null));  if (source instanceof ICovarianceMatrix) {    ICovarianceMatrix covMatrix=(ICovarianceMatrix)source;    CorrelationMatrix corrMatrix=new CorrelationMatrix(covMatrix);    double alpha=getParams().getDouble("alpha",0.001);    TestType sigTestType=(TestType)getParams().get("tetradTestType",TestType.TETRAD_WISHART);    test=new ContinuousTetradTest(covMatrix,sigTestType,alpha);  } else   if (source instanceof DataSet) {    DataSet data=(DataSet)source;    double alpha=getParams().getDouble("alpha",0.001);    TestType sigTestType=(TestType)getParams().get("tetradTestType",TestType.TETRAD_WISHART);    test=new ContinuousTetradTest(data,sigTestType,alpha);  } else {    throw new RuntimeException("Data source for Purify of invalid type!");  }  List<List<Node>> inputPartition=ClusterUtils.clustersToPartition((Clusters)getParams().get("clusters",null),test.getVariables());  IPurify purify=new PurifyTetradBased2(test);  List<List<Node>> partition=purify.purify(inputPartition);  Clusters outputClusters=ClusterUtils.partitionToClusters(partition);  List<int[]> partitionAsInts=ClusterUtils.convertListToInt(partition,test.getVariables());  setResultGraph(ClusterUtils.convertSearchGraph(partitionAsInts,test.getVarNames()));  GraphUtils.fruchtermanReingoldLayout(getResultGraph());  setClusters(outputClusters);}  }
class C{  public IrcException(String e){  super(e);}  }
class C{  @Override public void update(){  transferState=initializer.getState();  progress=initializer.getProgress();  download=initializer.getBytesReceived();  upload=initializer.getBytesSent();  downloadSpeed=initializer.getDownloadSpeed();  uploadSpeed=initializer.getUploadSpeed();  timeLeft=initializer.getETA();  seeds=initializer.getSeedsString();  peers=initializer.getPeersString();  shareRatio=initializer.getShareRatio();  seedToPeerRatio=initializer.getSeedToPeerRatio();  size=initializer.getSize();  dateCreated=initializer.getDateCreated();  if (initializer.getCopyrightLicenseBroker() != null && initializer.getCopyrightLicenseBroker().license != null) {    license=initializer.getCopyrightLicenseBroker().license.getName();  } else {    license="";  }  if (initializer.getPaymentOptions() != null) {    paymentOptions=initializer.getPaymentOptions();  }  if (getInitializeObject().isCompleted()) {    showNotification();  }}  }
class C{  public InterfaceMethodImpl(Method wrapped){  this.m=requireNonNull(wrapped);}  }
class C{  public UserChangedEvent(Object source){  super(source);}  }
class C{  public UniformIntegerGenerator(int lb,int ub){  _lb=lb;  _ub=ub;  _interval=_ub - _lb + 1;}  }
class C{  private <T>T runWriteFreshConnection(ConnectionSupplier conns,TableReference tableRef,Function<DbWriteTable,T> runner){  log.debug("Running in a new thread to turn autocommit on for write");  AtomicReference<T> result=Atomics.newReference();  Thread writeThread=new Thread(null);  writeThread.start();  try {    writeThread.join();  } catch (  InterruptedException e) {    throw Throwables.rewrapAndThrowUncheckedException(e);  }  return result.get();}  }
class C{  public Notification createOrUpdate(Integer notificationID,NotificationAttributes notificationAttributes){  if (getIDs().contains(notificationID)) {    Notification notification=find(notificationID);    notification.update(notificationAttributes);    return notification;  } else {    return create(notificationID,notificationAttributes);  }}  }
class C{  @Override public void visitClassDef(JCClassDecl tree){  if (tree.sym.owner.kind == PCK) {    tree=analyzer.analyzeAndPreprocessClass(tree);  }  KlassInfo prevKlassInfo=kInfo;  try {    kInfo=new KlassInfo(tree);    super.visitClassDef(tree);    if (!kInfo.deserializeCases.isEmpty()) {      int prevPos=make.pos;      try {        make.at(tree);        kInfo.addMethod(makeDeserializeMethod(tree.sym));      }  finally {        make.at(prevPos);      }    }    List<JCTree> newMethods=kInfo.appendedMethodList.toList();    tree.defs=tree.defs.appendList(newMethods);    for (    JCTree lambda : newMethods) {      tree.sym.members().enter(((JCMethodDecl)lambda).sym);    }    result=tree;  }  finally {    kInfo=prevKlassInfo;  }}  }
class C{  public boolean accept(List<Node> currentResults,Node node,int index){  return pseudoFunction.match(currentResults,node,index,parsedExpression);}  }
class C{  private void synchronizeWithPeers(Operation request,Throwable failure){  if (failure instanceof CancellationException) {    failRequest(request,failure);    return;  }  Operation clonedRequest=request.clone();  boolean wasOwner=hasOption(ServiceOption.DOCUMENT_OWNER);  clonedRequest.setBody(request.getLinkedState()).setCompletion(null);  clonedRequest.setRetryCount(0);  clonedRequest.addPragmaDirective(Operation.PRAGMA_DIRECTIVE_SYNCH_PEER);  boolean isFactorySync=request.hasPragmaDirective(Operation.PRAGMA_DIRECTIVE_NO_FORWARDING);  getHost().selectServiceOwnerAndSynchState(this,clonedRequest,isFactorySync);}  }
class C{  public static void main(String[] args){  runEvaluator(new GainRatioAttributeEval(),args);}  }
class C{  public Cheque withRandomData(){  this.setCustomerName(SampleDataService.getRandomName());  this.setProductName(SampleDataService.getRandomProduct());  this.setRepairPeriod(SampleDataService.getRepairPeriod());  this.setReceiptDate(SampleDataService.getRandomDate());  this.setModelName(SampleDataService.getRandomModel());  this.setSerialNumber(SampleDataService.getRandomSerialNumber());  this.setDefect(SampleDataService.getRandomMalfunction());  this.setSpecialNotes(SampleDataService.getRandomSpecialNotes());  this.setRepresentativeName(SampleDataService.getRandomName());  this.setAddress(SampleDataService.getRandomAddress());  this.setPhoneNumber(SampleDataService.getRandomPhone());  this.setEmail(SampleDataService.getRandomEmail());  this.setComponents(SampleDataService.getSetConsistFrom(null));  this.setWarrantyDate(SampleDataService.getRandomDate());  this.setReadyDate(SampleDataService.getRandomDate());  this.setReturnedToClientDate(SampleDataService.getRandomDate());  return this;}  }
class C{  public void addLabel(AbstractStorageLabel<?> label,boolean doOverwrite){  if (label.getStorageLabelType().isOnePerStorage()) {    boolean exists=false;    for (    AbstractStorageLabel<?> existingLabel : labelList) {      if (label.getStorageLabelType().equals(existingLabel.getStorageLabelType())) {        exists=true;        if (doOverwrite) {          labelList.remove(existingLabel);          labelList.add(label);        }        break;      }    }    if (!exists) {      labelList.add(label);    }  } else   if (!labelList.contains(label)) {    labelList.add(label);  }}  }
class C{  protected Element createChildElement(QName qName,ElementMetadata<?,?> metadata) throws ParseException {  if (metadata == null) {    return new Element(qName);  }  try {    return metadata.createElement();  } catch (  ContentCreationException e) {    throw new ParseException(e);  }}  }
class C{  public void removeNetworkEventListener(final IMXNetworkEventListener networkEventListener){  if ((null != getDefaultSession()) && (null != networkEventListener)) {    getDefaultSession().getNetworkConnectivityReceiver().removeEventListener(networkEventListener);  }}  }
class C{  public int length(){  return this.myArrayList.size();}  }
class C{  public static String readAsciiLine(InputStream in) throws IOException {  StringBuilder result=new StringBuilder(80);  while (true) {    int c=in.read();    if (c == -1) {      throw new EOFException();    } else     if (c == '\n') {      break;    }    result.append((char)c);  }  int length=result.length();  if (length > 0 && result.charAt(length - 1) == '\r') {    result.setLength(length - 1);  }  return result.toString();}  }
class C{  public int search(final byte[] a,final int from){  return search(a,from,a.length);}  }
class C{  @Override protected void createLabels(){  String text=this.getText();  if (!WWUtil.isEmpty(text))   this.addLabel(text);}  }
class C{  public static String forward(int roboRioExternalPort,int devicePort){  String out="";  int localhostPort=m_nextLocalHostPort++;  out+=ForwardAdb(localhostPort,devicePort);  return out + ", " + forwardToLocal(roboRioExternalPort,localhostPort);}  }
class C{  public PowerVmAllocationPolicyMigrationLocalRegression(List<? extends Host> hostList,PowerVmSelectionPolicy vmSelectionPolicy,double safetyParameter,double schedulingInterval,PowerVmAllocationPolicyMigrationAbstract fallbackVmAllocationPolicy){  super(hostList,vmSelectionPolicy);  setSafetyParameter(safetyParameter);  setSchedulingInterval(schedulingInterval);  setFallbackVmAllocationPolicy(fallbackVmAllocationPolicy);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static double convertMetersToMiles(double meters){  return (meters * METERS_TO_MILES);}  }
class C{  public static List<IOTAddress> discoverDevices(){  return EspMeshDiscoverUtil.discoverIOTDevices();}  }
class C{  private void validateSendMessage(int port,byte[] msg){  try {    Socket s=createSocket();    s.connect(new InetSocketAddress(U.getLocalHost(),port),1000);    try {      s.getOutputStream().write(msg);      byte[] res=new byte[MSG_SIZE];      int rcvd=0;      InputStream inputStream=s.getInputStream();      while (rcvd < res.length) {        int cnt=inputStream.read(res,rcvd,res.length - rcvd);        if (cnt == -1)         fail("Server closed connection before echo reply was fully sent");        rcvd+=cnt;      }      if (!(s instanceof SSLSocket)) {        s.shutdownOutput();        s.shutdownInput();      }      assertEquals(msg.length,res.length);      for (int i=0; i < msg.length; i++)       assertEquals("Mismatch in position " + i,msg[i],res[i]);    }  finally {      s.close();    }  } catch (  Exception e) {    fail("Exception while sending message: " + e.getMessage());  }}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == PropertyAssignment.class) {switch (baseOperationID) {case N4JSPackage.PROPERTY_ASSIGNMENT___GET_DEFINED_MEMBER:      return N4JSPackage.PROPERTY_METHOD_DECLARATION___GET_DEFINED_MEMBER;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == ThisArgProvider.class) {switch (baseOperationID) {default :  return -1;}}if (baseClass == FunctionOrFieldAccessor.class) {switch (baseOperationID) {case N4JSPackage.FUNCTION_OR_FIELD_ACCESSOR___GET_NAME:return N4JSPackage.PROPERTY_METHOD_DECLARATION___GET_NAME;case N4JSPackage.FUNCTION_OR_FIELD_ACCESSOR___GET_LOCAL_ARGUMENTS_VARIABLE:return N4JSPackage.PROPERTY_METHOD_DECLARATION___GET_LOCAL_ARGUMENTS_VARIABLE;case N4JSPackage.FUNCTION_OR_FIELD_ACCESSOR___IS_ASYNC:return N4JSPackage.PROPERTY_METHOD_DECLARATION___IS_ASYNC;case N4JSPackage.FUNCTION_OR_FIELD_ACCESSOR___GET_DEFINED_FUNCTION_OR_ACCESSOR:return N4JSPackage.PROPERTY_METHOD_DECLARATION___GET_DEFINED_FUNCTION_OR_ACCESSOR;default :return -1;}}if (baseClass == TypeDefiningElement.class) {switch (baseOperationID) {default :return -1;}}if (baseClass == FunctionDefinition.class) {switch (baseOperationID) {case N4JSPackage.FUNCTION_DEFINITION___IS_ASYNC:return N4JSPackage.PROPERTY_METHOD_DECLARATION___IS_ASYNC;default :return -1;}}if (baseClass == GenericDeclaration.class) {switch (baseOperationID) {default :return -1;}}if (baseClass == TypeProvidingElement.class) {switch (baseOperationID) {case N4JSPackage.TYPE_PROVIDING_ELEMENT___GET_DECLARED_TYPE_REF:return N4JSPackage.PROPERTY_METHOD_DECLARATION___GET_DECLARED_TYPE_REF;default :return -1;}}if (baseClass == TypedElement.class) {switch (baseOperationID) {default :return -1;}}if (baseClass == MethodDeclaration.class) {switch (baseOperationID) {case N4JSPackage.METHOD_DECLARATION___EXISTS_EXPLICIT_SUPER_CALL:return N4JSPackage.PROPERTY_METHOD_DECLARATION___EXISTS_EXPLICIT_SUPER_CALL;case N4JSPackage.METHOD_DECLARATION___GET_DEFINED_TYPE_ELEMENT:return N4JSPackage.PROPERTY_METHOD_DECLARATION___GET_DEFINED_TYPE_ELEMENT;case N4JSPackage.METHOD_DECLARATION___IS_STATIC:return N4JSPackage.PROPERTY_METHOD_DECLARATION___IS_STATIC;default :return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public void characters(String characters) throws SAXException {  final int length=characters.length();  if (length > m_charsBuff.length) {    m_charsBuff=new char[length * 2 + 1];  }  characters.getChars(0,length,m_charsBuff,0);  characters(m_charsBuff,0,length);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SGenPackage.FEATURE_TYPE__DEPRECATED:    return isDeprecated();case SGenPackage.FEATURE_TYPE__COMMENT:  return getComment();case SGenPackage.FEATURE_TYPE__PARAMETERS:return getParameters();case SGenPackage.FEATURE_TYPE__LIBRARY:if (resolve) return getLibrary();return basicGetLibrary();case SGenPackage.FEATURE_TYPE__OPTIONAL:return isOptional();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static boolean isInvalid(int c){  return !isValid(c);}  }
class C{  static void debug(int level,String line){  if ((selectedDebugLevel & level) != 0) {    System.out.println(DEBUG_HEADER + line);  }}  }
class C{  public String stringValueOf(String name){  Dimension d=getDimension(name);  if (d != null) {    return d.getValue();  }  Metric m=getMetric(name);  if (m != null) {    return m.getValue();  }  return null;}  }
class C{  public ObservatoryPoint(){  super();}  }
class C{  public boolean isAlive(){  return isAlive;}  }
class C{  @Override protected Money handleTransactionThatIsOnTimePaymentOfInstallment(final LoanRepaymentScheduleInstallment currentInstallment,final LoanTransaction loanTransaction,final Money transactionAmountUnprocessed,List<LoanTransactionToRepaymentScheduleMapping> transactionMappings){  final LocalDate transactionDate=loanTransaction.getTransactionDate();  final MonetaryCurrency currency=transactionAmountUnprocessed.getCurrency();  Money transactionAmountRemaining=transactionAmountUnprocessed;  Money principalPortion=Money.zero(transactionAmountRemaining.getCurrency());  Money interestPortion=Money.zero(transactionAmountRemaining.getCurrency());  Money feeChargesPortion=Money.zero(transactionAmountRemaining.getCurrency());  Money penaltyChargesPortion=Money.zero(transactionAmountRemaining.getCurrency());  if (loanTransaction.isChargesWaiver()) {    penaltyChargesPortion=currentInstallment.waivePenaltyChargesComponent(transactionDate,loanTransaction.getPenaltyChargesPortion(currency));    transactionAmountRemaining=transactionAmountRemaining.minus(penaltyChargesPortion);    feeChargesPortion=currentInstallment.waiveFeeChargesComponent(transactionDate,loanTransaction.getFeeChargesPortion(currency));    transactionAmountRemaining=transactionAmountRemaining.minus(feeChargesPortion);  } else   if (loanTransaction.isInterestWaiver()) {    interestPortion=currentInstallment.waiveInterestComponent(transactionDate,transactionAmountRemaining);    transactionAmountRemaining=transactionAmountRemaining.minus(interestPortion);    loanTransaction.updateComponents(principalPortion,interestPortion,feeChargesPortion,penaltyChargesPortion);  } else   if (loanTransaction.isChargePayment()) {    if (loanTransaction.isPenaltyPayment()) {      penaltyChargesPortion=currentInstallment.payPenaltyChargesComponent(transactionDate,transactionAmountRemaining);      transactionAmountRemaining=transactionAmountRemaining.minus(penaltyChargesPortion);    } else {      feeChargesPortion=currentInstallment.payFeeChargesComponent(transactionDate,transactionAmountRemaining);      transactionAmountRemaining=transactionAmountRemaining.minus(feeChargesPortion);    }    loanTransaction.updateComponents(principalPortion,interestPortion,feeChargesPortion,penaltyChargesPortion);  } else {    penaltyChargesPortion=currentInstallment.payPenaltyChargesComponent(transactionDate,transactionAmountRemaining);    transactionAmountRemaining=transactionAmountRemaining.minus(penaltyChargesPortion);    feeChargesPortion=currentInstallment.payFeeChargesComponent(transactionDate,transactionAmountRemaining);    transactionAmountRemaining=transactionAmountRemaining.minus(feeChargesPortion);    interestPortion=currentInstallment.payInterestComponent(transactionDate,transactionAmountRemaining);    transactionAmountRemaining=transactionAmountRemaining.minus(interestPortion);    principalPortion=currentInstallment.payPrincipalComponent(transactionDate,transactionAmountRemaining);    transactionAmountRemaining=transactionAmountRemaining.minus(principalPortion);    loanTransaction.updateComponents(principalPortion,interestPortion,feeChargesPortion,penaltyChargesPortion);  }  if (principalPortion.plus(interestPortion).plus(feeChargesPortion).plus(penaltyChargesPortion).isGreaterThanZero()) {    transactionMappings.add(LoanTransactionToRepaymentScheduleMapping.createFrom(currentInstallment,principalPortion,interestPortion,feeChargesPortion,penaltyChargesPortion));  }  return transactionAmountRemaining;}  }
class C{  public synchronized Map<String,Integer> processedMessages(){  return new HashMap<>(procMsgs);}  }
class C{  public Matrix4x3f translationRotateTowards(Vector3fc pos,Vector3fc dir,Vector3fc up){  return translationRotateTowards(pos.x(),pos.y(),pos.z(),dir.x(),dir.y(),dir.z(),up.x(),up.y(),up.z());}  }
class C{  public void testConsolidate(){  System.out.println("consolidate");  AuditCommandImpl instance=null;}  }
class C{  public void visitInsn(int opcode){  if (mv != null) {    mv.visitInsn(opcode);  }}  }
class C{  public void changeLocale(){  resetInputs();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:18.862 -0500",hash_original_method="50DA395E2AF302C1CC5EAE713D0D4EBB",hash_generated_method="4FF6D0FAFA466F42803717B503EB07AB") public boolean isEmpty(){  return mCapabilities.isEmpty();}  }
class C{  private void writePid(final boolean force) throws FileAlreadyExistsException, IOException {  final boolean created=this.pidFile.createNewFile();  if (!created && !force) {    int otherPid=0;    try {      otherPid=ProcessUtils.readPid(this.pidFile);    } catch (    IOException e) {    }catch (    NumberFormatException e) {    }    boolean ignorePidFile=false;    if (otherPid != 0 && !ignoreIsPidAlive()) {      ignorePidFile=!ProcessUtils.isProcessAlive(otherPid);    }    if (!ignorePidFile) {      throw new FileAlreadyExistsException("Pid file already exists: " + this.pidFile + " for "+ (otherPid > 0 ? "process " + otherPid : "unknown process"));    }  }  this.pidFile.deleteOnExit();  final FileWriter writer=new FileWriter(this.pidFile);  writer.write(String.valueOf(this.pid));  writer.flush();  writer.close();}  }
class C{  public void buildClassifier(Instances data) throws Exception {  initializeClassifier(data);  while (next()) {  }  ;  done();}  }
class C{  public Builder retry(long retrySec){  this.retry=retrySec;  return this;}  }
class C{  public RawProperty(String name,ICalDataType dataType,String value){  this.name=name;  this.dataType=dataType;  this.value=value;}  }
class C{  private void handleStatement(final Resource s,final URI p,final Value o,final Resource c,final StatementEnum type){  _handleStatement((Resource)getCanonicalValue((BigdataResource)valueFactory.asValue(s)),(URI)getCanonicalValue((BigdataURI)valueFactory.asValue(p)),(Value)getCanonicalValue((BigdataValue)valueFactory.asValue(o)),(Resource)getCanonicalValue((BigdataResource)valueFactory.asValue(c)),type);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  UIManager uiMgr=stack.getUIMgr();  if (uiMgr != null && uiMgr.getUIClientType() == UIClient.REMOTE_UI) {    return ((MiniClientSageRenderer)uiMgr.getRootPanel().getRenderEngine()).getRemoteVersion();  }  return "";}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementgetattributenode.class,args);}  }
class C{  public Oid(InputStream derOid) throws GSSException {  try {    DerValue derVal=new DerValue(derOid);    derEncoding=derVal.toByteArray();    oid=derVal.getOID();  } catch (  IOException e) {    throw new GSSException(GSSException.FAILURE,"Improperly formatted ASN.1 DER encoding for Oid");  }}  }
class C{  private void pollManager(){  while (!stopPolling) {    for (int a=0; a < activeAIUMax; ++a) {      int aiuNo=activeAIUs[a];      currentAIU=aiuArray[aiuNo];      if (currentAIU != null) {        NceMessage m=makeAIUPoll(aiuNo);synchronized (this) {          if (log.isDebugEnabled()) {            log.debug("queueing poll request for AIU " + aiuNo);          }          tc.sendNceMessage(m,this);          awaitingReply=true;          try {            wait(pollTimeout);          } catch (          InterruptedException e) {            Thread.currentThread().interrupt();          }        }        int delay=shortCycleInterval;        if (aiuCycleCount >= 2 && lastMessageReceived >= System.currentTimeMillis() - maxSilentInterval) {          delay=longCycleInterval;        }synchronized (this) {          if (awaitingReply) {            log.warn("timeout awaiting poll response for AIU " + aiuNo);            delay=pollTimeout;          }          try {            awaitingDelay=true;            wait(delay);          } catch (          InterruptedException e) {            Thread.currentThread().interrupt();          } finally {            awaitingDelay=false;          }        }      }    }    ++aiuCycleCount;  }}  }
class C{  public synchronized boolean isClosed(){  return journalWriter == null;}  }
class C{  public void removeEventTrigger(EventTrigger<?> trigger){  eventTriggers.removeValue(trigger,true);}  }
class C{  public void add(SpatialKey key,V value){  putOrAdd(key,value,true);}  }
class C{  protected void onComplete(){}  }
class C{  public void storeProperty(@NotNull String key,@NotNull String value) throws IOException {  Path storageFile=getStorageFile().orElse(createStorage());  Properties properties=loadProperties(storageFile);  if (!properties.containsKey(key)) {    throw PropertyNotFoundException.from(key);  }  properties.setProperty(key,value);  try (OutputStream out=new BufferedOutputStream(newOutputStream(storageFile))){    properties.store(out,null);  } }  }
class C{  public DynamicRows(){  list=new ArrayList();}  }
class C{  public Boolean isIncomingBlocked(){  return incomingBlocked;}  }
class C{  @Override public PathImpl schemeWalk(String userPath,Map<String,Object> attributes,String filePath,int offset){  if (!isWindows()) {    return super.schemeWalk(userPath,attributes,filePath,offset);  }  String canonicalPath;  if (filePath.length() < offset + 2) {    return super.schemeWalk(userPath,attributes,filePath,offset);  }  char ch1=filePath.charAt(offset + 1);  char ch2=filePath.charAt(offset);  if ((ch2 == '/' || ch2 == _separatorChar) && (ch1 == '/' || ch1 == _separatorChar))   return super.schemeWalk(userPath,attributes,convertFromWindowsPath(filePath.substring(offset)),0); else   return super.schemeWalk(userPath,attributes,filePath,offset);}  }
class C{  public static void moveDirectory(File srcDir,File destDir) throws IOException {  if (srcDir == null) {    throw new NullPointerException("Source must not be null");  }  if (destDir == null) {    throw new NullPointerException("Destination must not be null");  }  if (!srcDir.exists()) {    throw new FileNotFoundException("Source '" + srcDir + "' does not exist");  }  if (!srcDir.isDirectory()) {    throw new IOException("Source '" + srcDir + "' is not a directory");  }  if (destDir.exists()) {    throw new FileExistsException("Destination '" + destDir + "' already exists");  }  boolean rename=srcDir.renameTo(destDir);  if (!rename) {    if (destDir.getCanonicalPath().startsWith(srcDir.getCanonicalPath())) {      throw new IOException("Cannot move directory: " + srcDir + " to a subdirectory of itself: "+ destDir);    }    copyDirectory(srcDir,destDir);    deleteDirectory(srcDir);    if (srcDir.exists()) {      throw new IOException("Failed to delete original directory '" + srcDir + "' after copy to '"+ destDir+ "'");    }  }}  }
class C{  public SWFActions tagDefineButton(int id,List buttonRecords) throws IOException {  if (tags != null) {    return tags.tagDefineButton(id,buttonRecords);  }  return null;}  }
class C{  public BigInteger toFlexiBigInt(){  return new BigInteger(1,toByteArray());}  }
class C{  public void testExecuteWithNoAction(){  try {    this.task.execute();    fail("Should have thrown an exception because an action must be specified unless the " + "id attribute is set");  } catch (  BuildException expected) {    final String messageStart="You must specify an [action] attribute with values ";    assertTrue(expected.getMessage() + " does not start with: " + messageStart,expected.getMessage().startsWith(messageStart));  }}  }
class C{  public synchronized void removeConnectionEventListener(ConnectionEventListener connectioneventlistener){  if (this.connectionEventListeners != null) {    this.connectionEventListeners.remove(connectioneventlistener);  }}  }
class C{  public void endVisit(BreakStatement node){}  }
class C{  public static void list(){  renderArgs.put("dataTable",new UserGroupDataTable());  render();}  }
class C{  public MarkerMoveResult onMarkerMoved(Marker marker){  if (marker.equals(centerMarker)) {    onCenterUpdated(marker.getPosition());    return MarkerMoveResult.moved;  }  if (marker.equals(resizerMarker)) {    double newRadius=MarkerAreasUtils.toRadiusMeters(centerMarker.getPosition(),marker.getPosition());    if (minRadius != -1 && newRadius < minRadius) {      return MarkerMoveResult.minRadius;    } else     if (maxRadius != -1 && newRadius > maxRadius) {      return MarkerMoveResult.maxRadius;    } else {      setRadius(newRadius);      return MarkerMoveResult.radiusChange;    }  }  return MarkerMoveResult.none;}  }
class C{  public boolean letsFluidIn(byte aSide,int aCoverID,int aCoverVariable,Fluid aFluid,ICoverable aTileEntity){  return false;}  }
class C{  public boolean isXmlOutput(){  return xmlOutput;}  }
class C{  public void match(String expectedName,X509Certificate cert) throws CertificateException {  if (isIpAddress(expectedName)) {    matchIP(expectedName,cert);  } else {    matchDNS(expectedName,cert);  }}  }
class C{  private void checkEqualsIsConsistent(Message message1,Message message2){  assertEquals(message1,message2);  assertEquals(message2,message1);  assertEquals(message2.hashCode(),message1.hashCode());}  }
class C{  private LifecycleUtils(){}  }
class C{  public static Pattern createPattern(String pattern,boolean isRegex,boolean isStringMatcher,boolean isCaseSensitive,boolean isWholeWord) throws PatternSyntaxException {  if (isRegex) {    pattern=substituteLinebreak(pattern);    Assert.isTrue(!isWholeWord,"isWholeWord unsupported together with isRegex");  } else {    int len=pattern.length();    StringBuffer buffer=new StringBuffer(len + 10);    if (isWholeWord && len > 0 && isWordChar(pattern.charAt(0))) {      buffer.append("\\b");    }    appendAsRegEx(isStringMatcher,pattern,buffer);    if (isWholeWord && len > 0 && isWordChar(pattern.charAt(len - 1))) {      buffer.append("\\b");    }    pattern=buffer.toString();  }  int regexOptions=Pattern.MULTILINE;  if (!isCaseSensitive) {    regexOptions|=Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE;  }  return Pattern.compile(pattern,regexOptions);}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  private static String startupMessagesForDisplay(){  StringBuffer s=new StringBuffer("\n\nLOG:");  for (  String m : startupLogMessages) {    s.append(m + "\n");  }  return s.toString();}  }
class C{  public Kursawe(int numberOfVariables,double lowerBound,double upperBound){  super(numberOfVariables,2);  this.lowerBound=lowerBound;  this.upperBound=upperBound;}  }
class C{  public final void testAddAllHelperTextColorsFromCollection(){  int helperTextColor1=Color.BLACK;  int helperTextColor2=Color.GRAY;  Collection<Integer> helperTextColors1=new LinkedList<>();  helperTextColors1.add(helperTextColor1);  helperTextColors1.add(helperTextColor2);  PasswordEditText passwordEditText=new PasswordEditText(getContext());  passwordEditText.addAllHelperTextColors(helperTextColors1);  passwordEditText.addAllHelperTextColors(helperTextColors1);  Collection<Integer> helperTextColors2=passwordEditText.getHelperTextColors();  assertEquals(helperTextColors1.size(),helperTextColors2.size());  Iterator<Integer> iterator=helperTextColors2.iterator();  assertEquals(helperTextColor1,(int)iterator.next());  assertEquals(helperTextColor2,(int)iterator.next());}  }
class C{  private void deleteSelectedlabels(){  StructuredSelection structuredSelection=(StructuredSelection)labelsTableViewer.getSelection();  if (!structuredSelection.isEmpty()) {    for (Iterator<?> it=structuredSelection.iterator(); it.hasNext(); ) {      labelsToAdd.remove(it.next());    }    labelsTableViewer.refresh();    setPageComplete(isPageComplete());  }}  }
class C{  public MessageInf(int iSignalWord,String sHazard,Object e){  m_iMsgNumber=iSignalWord;  m_sHazard=sHazard;  m_sConsequences="";  m_sAvoiding="";  m_eCause=e;}  }
class C{  protected boolean areMultipleLinesSelected(IDocument document,SourceRange s){  if (s.getLength() == 0)   return false;  try {    int startLine=document.getLineOfOffset(s.getOffset());    int endLine=document.getLineOfOffset(s.getEndPos());    IRegion line=document.getLineInformation(startLine);    return startLine != endLine || (s.getOffset() == line.getOffset() && s.getLength() == line.getLength());  } catch (  BadLocationException x) {    return false;  }}  }
class C{  public static float intersectLinePlane(float x,float y,float z,float x2,float y2,float z2,Plane plane,Vector3 intersection){  Vector3 direction=tmp.set(x2,y2,z2).sub(x,y,z);  Vector3 origin=tmp2.set(x,y,z);  float denom=direction.dot(plane.getNormal());  if (denom != 0) {    float t=-(origin.dot(plane.getNormal()) + plane.getD()) / denom;    if ((t >= 0 && t <= 1) && intersection != null)     intersection.set(origin).add(direction.mul(t));    return t;  } else   if (plane.testPoint(origin) == Plane.PlaneSide.OnPlane) {    if (intersection != null)     intersection.set(origin);    return 0;  }  return -1;}  }
class C{  Type classEnter(JCTree tree,Env<AttrContext> env){  Env<AttrContext> prevEnv=this.env;  try {    this.env=env;    tree.accept(this);    return result;  } catch (  CompletionFailure ex) {    return chk.completionError(tree.pos(),ex);  } finally {    this.env=prevEnv;  }}  }
class C{  public void cancelSpeedChange(){  if (stopTimer != null && stopTimer.isRunning()) {    stopTimer.stop();  }  finishChange();}  }
class C{  @Override public void storeState(){  partialBufferHelper.storeState();  for (  EvolutionaryProcessDelegate evolutionaryProcessDelegate : evolutionaryProcessDelegates) {    evolutionaryProcessDelegate.storeState();  }  if (useScaleFactors || useAutoScaling) {    scaleBufferHelper.storeState();    System.arraycopy(scaleBufferIndices,0,storedScaleBufferIndices,0,scaleBufferIndices.length);  }  flip=true;}  }
class C{  public synchronized void closeIdleConnections(final long idleTimeout){  idleConnectionHandler.closeIdleConnections(idleTimeout);}  }
class C{  public Object clone() throws CloneNotSupportedException {  NodeSet clone=(NodeSet)super.clone();  if ((null != this.m_map) && (this.m_map == clone.m_map)) {    clone.m_map=new Node[this.m_map.length];    System.arraycopy(this.m_map,0,clone.m_map,0,this.m_map.length);  }  return clone;}  }
class C{  public SecurityMapper(final Mapper wrapped,final TypePermission... permissions){  super(wrapped);  this.permissions=permissions == null ? new ArrayList<TypePermission>() : new ArrayList<TypePermission>(Arrays.asList(permissions));}  }
class C{  protected final void assertStillUp() throws IllegalStateException {  if (this.isShutDown)   throw new IllegalStateException("Manager is shut down.");}  }
class C{  public static void reverse(double[] array){  if (array == null) {    return;  }  int i=0;  int j=array.length - 1;  double tmp;  while (j > i) {    tmp=array[j];    array[j]=array[i];    array[i]=tmp;    j--;    i++;  }}  }
class C{  public void init(){synchronized (statemachine) {    statemachine.init();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:41.836 -0500",hash_original_method="C0D624CC7CEFFAF650D54F4FB963FAF6",hash_generated_method="8EA7C3FDBAE62B32653DE70AB5661C3A") public int length(){  return mLength;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 15:47:29.033 -0500",hash_original_method="50190664B4123DF961B95E3A5EE265B2",hash_generated_method="037F29B581B8F268FEEE3957B5B12B60") @DSSafe(DSCat.SAFE_OTHERS) public static String sha384Hex(byte[] data){  return Hex.encodeHexString(sha384(data));}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  Item newFieldItem(final String owner,final String name,final String desc){  key3.set(FIELD,owner,name,desc);  Item result=get(key3);  if (result == null) {    put122(FIELD,newClass(owner),newNameType(name,desc));    result=new Item(index++,key3);    put(result);  }  return result;}  }
class C{  protected double transformY(double value){  return ((yAxis.transform(value) - yAxis.transform(yAxis.getMinAxis())) * yScale) + yOffset;}  }
class C{  public boolean isMultiplicity(){  return multiplicity;}  }
class C{  public static String stemToken(String token,String postag){  if (whitespace.matcher(token).find()) {    throw new IllegalArgumentException("Token may not contain a space: " + token);  }  return morpha(cleanText(token) + "_" + postag,true);}  }
class C{  public static double atan2(final double y,final double x){  if (USE_JDK_MATH) {    return Math.atan2(y,x);  }  if (x > 0.0) {    if (y == 0.0) {      return y;    }    if (x == Double.POSITIVE_INFINITY) {      return atan2_pinf_yyy(y);    }    return atan(y / x);  } else   if (x < 0.0) {    if (y == 0.0) {      return signFromBit(y) * Math.PI;    }    if (x == Double.NEGATIVE_INFINITY) {      return atan2_ninf_yyy(y);    } else     if (y > 0.0) {      return Math.PI / 2 - atan(x / y);    } else     if (y < 0.0) {      return -Math.PI / 2 - atan(x / y);    } else {      return Double.NaN;    }  } else {    return atan2_yyy_zeroOrNaN(y,x);  }}  }
class C{  public boolean isPrintable(){  return printable;}  }
class C{  public String strRepWithBowlResults(){  return "#" + rankTeamPollScore + " "+ abbr+ " ("+ wins+ "-"+ losses+ ") "+ confChampion+ " "+ semiFinalWL+ natChampWL;}  }
class C{  public RangeQueryBuilder lt(long to){  this.to=to;  this.includeUpper=false;  return this;}  }
class C{  private List<Match<T>> sort(final Map<String,Match<T>> possibleMatches){  List<String> keys=new ArrayList<>(possibleMatches.keySet());  Collections.sort(keys,matchComparator);  List<Match<T>> matches1=new ArrayList<>(possibleMatches.size());  for (  String key : keys) {    matches1.add(possibleMatches.get(key));  }  return matches1;}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 2:{        addToken(Token.IDENTIFIER);      }case 72:    break;case 24:{    yybegin(INTAG_SCRIPT);    addToken(start,zzStartRead,Token.LITERAL_STRING_DOUBLE_QUOTE);  }case 73:break;case 69:{addToken(Token.LITERAL_BOOLEAN);}case 74:break;case 53:{addToken(Token.ERROR_CHAR);}case 75:break;case 50:{addToken(Token.ERROR_NUMBER_FORMAT);}case 76:break;case 44:{int count=yylength();addToken(zzStartRead,zzStartRead,Token.MARKUP_TAG_DELIMITER);zzMarkedPos-=(count - 1);yybegin(INTAG_CHECK_TAG_NAME);}case 77:break;case 22:{start=zzMarkedPos - 1;yybegin(INATTR_SINGLE_SCRIPT);}case 78:break;case 13:{yybegin(YYINITIAL);addToken(Token.MARKUP_TAG_DELIMITER);}case 79:break;case 8:{addToken(start,zzStartRead - 1,Token.VARIABLE);return firstToken;}case 80:break;case 54:{addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);}case 81:break;case 32:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);addEndToken(INTERNAL_IN_JS_MLC);return firstToken;}case 82:break;case 34:{start=zzMarkedPos - 1;yybegin(PHP_CHAR);}case 83:break;case 60:{addToken(Token.FUNCTION);}case 84:break;case 35:{start=zzMarkedPos - 1;yybegin(PHP_STRING);}case 85:break;case 48:{addToken(Token.COMMENT_EOL);addEndToken(INTERNAL_IN_JS);return firstToken;}case 86:break;case 45:{start=zzMarkedPos - 2;yybegin(DTD);}case 87:break;case 27:{addEndToken(INTERNAL_IN_JS);return firstToken;}case 88:break;case 71:{yybegin(YYINITIAL);addToken(zzStartRead,zzStartRead + 1,Token.MARKUP_TAG_DELIMITER);addToken(zzMarkedPos - 7,zzMarkedPos - 2,Token.MARKUP_TAG_NAME);addToken(zzMarkedPos - 1,zzMarkedPos - 1,Token.MARKUP_TAG_DELIMITER);}case 89:break;case 58:{addToken(Token.VARIABLE);}case 90:break;case 29:{addToken(Token.ERROR_CHAR);addEndToken(INTERNAL_IN_JS);return firstToken;}case 91:break;case 17:{yypushback(1);yybegin(INTAG);}case 92:break;case 26:{addToken(Token.ERROR_IDENTIFIER);}case 93:break;case 49:{start=zzMarkedPos - 2;yybegin(JS_MLC);}case 94:break;case 57:{start=zzMarkedPos - 2;yybegin(PHP_MLC);}case 95:break;case 20:{yybegin(INTAG);addToken(start,zzStartRead,Token.LITERAL_CHAR);}case 96:break;case 4:{addToken(Token.MARKUP_TAG_DELIMITER);yybegin(INTAG);}case 97:break;case 9:{yybegin(YYINITIAL);addToken(start,zzStartRead,Token.VARIABLE);}case 98:break;case 40:{yybegin(PHP);addToken(start,zzStartRead,Token.LITERAL_STRING_DOUBLE_QUOTE);}case 99:break;case 56:{yybegin(JAVASCRIPT);addToken(start,zzStartRead + 1,Token.COMMENT_MULTILINE);}case 100:break;case 65:{addToken(Token.LITERAL_CHAR);}case 101:break;case 46:{addToken(Token.SEPARATOR);yybegin(PHP);}case 102:break;case 15:{start=zzMarkedPos - 1;yybegin(INATTR_DOUBLE);}case 103:break;case 39:{}case 104:break;case 52:{addToken(Token.LITERAL_NUMBER_HEXADECIMAL);}case 105:break;case 16:{yypushback(yylength());yybegin(INTAG);}case 106:break;case 23:{start=zzMarkedPos - 1;yybegin(INATTR_DOUBLE_SCRIPT);}case 107:break;case 5:{addToken(Token.WHITESPACE);}case 108:break;case 59:{addToken(Token.SEPARATOR);yybegin(YYINITIAL);}case 109:break;case 6:{addToken(Token.DATA_TYPE);}case 110:break;case 18:{addToken(Token.MARKUP_TAG_NAME);}case 111:break;case 33:{addEndToken(INTERNAL_IN_PHP);return firstToken;}case 112:break;case 28:{addToken(Token.LITERAL_NUMBER_DECIMAL_INT);}case 113:break;case 14:{start=zzMarkedPos - 1;yybegin(INATTR_SINGLE);}case 114:break;case 10:{addToken(Token.MARKUP_TAG_ATTRIBUTE);}case 115:break;case 38:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);addEndToken(INTERNAL_PHP_STRING);return firstToken;}case 116:break;case 19:{yybegin(INTAG);addToken(start,zzStartRead,Token.LITERAL_STRING_DOUBLE_QUOTE);}case 117:break;case 62:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);addToken(temp,zzMarkedPos - 1,Token.VARIABLE);start=zzMarkedPos;}case 118:break;case 25:{yybegin(INTAG_SCRIPT);addToken(start,zzStartRead,Token.LITERAL_CHAR);}case 119:break;case 36:{addToken(Token.COMMENT_EOL);addEndToken(INTERNAL_IN_PHP);return firstToken;}case 120:break;case 42:{}case 121:break;case 66:{start=zzMarkedPos - 4;yybegin(COMMENT);}case 122:break;case 37:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);addEndToken(INTERNAL_IN_PHP_MLC);return firstToken;}case 123:break;case 55:{addToken(Token.RESERVED_WORD);}case 124:break;case 41:{addToken(start,zzStartRead - 1,Token.LITERAL_CHAR);addEndToken(INTERNAL_PHP_CHAR);return firstToken;}case 125:break;case 70:{addToken(zzStartRead,zzStartRead,Token.MARKUP_TAG_DELIMITER);addToken(zzMarkedPos - 6,zzMarkedPos - 1,Token.MARKUP_TAG_NAME);start=zzMarkedPos;yybegin(INTAG_SCRIPT);}case 126:break;case 64:{yybegin(YYINITIAL);addToken(start,zzStartRead + 2,Token.COMMENT_MULTILINE);}case 127:break;case 63:{int count=yylength();addToken(zzStartRead,zzStartRead + 1,Token.MARKUP_TAG_DELIMITER);zzMarkedPos-=(count - 2);yybegin(INTAG_CHECK_TAG_NAME);}case 128:break;case 61:{yybegin(PHP);addToken(start,zzStartRead + 1,Token.COMMENT_MULTILINE);}case 129:break;case 31:{addToken(Token.SEPARATOR);}case 130:break;case 30:{addToken(Token.ERROR_STRING_DOUBLE);addEndToken(INTERNAL_IN_JS);return firstToken;}case 131:break;case 3:{addNullToken();return firstToken;}case 132:break;case 21:{yybegin(JAVASCRIPT);addToken(Token.MARKUP_TAG_DELIMITER);}case 133:break;case 47:{addToken(Token.MARKUP_TAG_DELIMITER);yybegin(YYINITIAL);}case 134:break;case 7:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 135:break;case 11:{addToken(Token.OPERATOR);}case 136:break;case 51:{addToken(Token.LITERAL_NUMBER_FLOAT);}case 137:break;case 43:{yybegin(PHP);addToken(start,zzStartRead,Token.LITERAL_CHAR);}case 138:break;case 12:{addToken(Token.MARKUP_TAG_DELIMITER);}case 139:break;case 67:{addToken(Token.COMMENT_MULTILINE);}case 140:break;case 68:{addToken(Token.ERROR_STRING_DOUBLE);}case 141:break;case 1:{}case 142:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case INTAG_CHECK_TAG_NAME:{addToken(zzMarkedPos,zzMarkedPos,INTERNAL_INTAG);return firstToken;}case 7573:break;case JS_MLC:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);addEndToken(INTERNAL_IN_JS_MLC);return firstToken;}case 7574:break;case INTAG_SCRIPT:{addToken(zzMarkedPos,zzMarkedPos,INTERNAL_INTAG_SCRIPT);return firstToken;}case 7575:break;case PHP_MLC:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);addEndToken(INTERNAL_IN_PHP_MLC);return firstToken;}case 7576:break;case INATTR_DOUBLE_SCRIPT:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);addEndToken(INTERNAL_ATTR_DOUBLE_QUOTE_SCRIPT);return firstToken;}case 7577:break;case INATTR_SINGLE_SCRIPT:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);addEndToken(INTERNAL_ATTR_SINGLE_QUOTE_SCRIPT);return firstToken;}case 7578:break;case PHP_STRING:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);addEndToken(INTERNAL_PHP_STRING);return firstToken;}case 7579:break;case DTD:{addToken(start,zzStartRead - 1,Token.VARIABLE);return firstToken;}case 7580:break;case INATTR_SINGLE:{addToken(start,zzStartRead - 1,Token.LITERAL_CHAR);return firstToken;}case 7581:break;case INATTR_DOUBLE:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);return firstToken;}case 7582:break;case YYINITIAL:{addNullToken();return firstToken;}case 7583:break;case PHP_CHAR:{addToken(start,zzStartRead - 1,Token.LITERAL_CHAR);addEndToken(INTERNAL_PHP_CHAR);return firstToken;}case 7584:break;case PHP:{addEndToken(INTERNAL_IN_PHP);return firstToken;}case 7585:break;case INTAG:{addToken(zzMarkedPos,zzMarkedPos,INTERNAL_INTAG);return firstToken;}case 7586:break;case COMMENT:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 7587:break;case JAVASCRIPT:{addEndToken(INTERNAL_IN_JS);return firstToken;}case 7588:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  private String fullClassName(Element element){  assert element.getKind() == ElementKind.CLASS || element.getKind() == ElementKind.INTERFACE : element;  String pkg=findPackage(element);  return ((TypeElement)element).getQualifiedName().toString().substring(pkg.length() + 1);}  }
class C{  public static void addEmojis(Context context,Spannable text,int emojiSize,int emojiAlignment,int textSize){  EmojiUtil.addEmojis(context,text,emojiSize,emojiAlignment,textSize,0,-1,false);}  }
class C{  public static final String concatGroups(MatcherCompat matcher){  StringBuilder b=new StringBuilder();  final int numGroups=matcher.groupCount();  for (int i=1; i <= numGroups; i++) {    String s=matcher.group(i);    if (s != null) {      b.append(s);    }  }  return b.toString();}  }
class C{  Instruction createEventCounterInstruction(int counterNumber,double incrementValue){  if (VM.VerifyAssertions) {    VM._assert(handle != -1);  }  if (counterNumber >= numCounters) {    if (automaticallyGrowCounters) {      while (counterNumber >= numCounters) {        resizeCounters(getNumCounters() * 2);      }    } else {    }  }  return getCounterManager().createEventCounterInstruction(getHandle(),counterNumber,incrementValue);}  }
class C{  public SQLTransactionRollbackException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  public boolean isFromSplitAnd(){  if (m_fromSplitAnd != null)   return m_fromSplitAnd.booleanValue();  return false;}  }
class C{  protected InterfaceMemberDeclaration_Impl(){  super();}  }
class C{  public void translate(float tx,float ty){  showMissingWarning("translate");}  }
class C{  private static synchronized void obtainAddresses(){  if (addressChecked)   return;  addressChecked=true;  try {    for (    String server : stunServers) {      String[] addressAndPort=server.split(":");      StunCandidateHarvester stunHarv=new StunCandidateHarvester(new TransportAddress(addressAndPort[0],Integer.parseInt(addressAndPort[1]),Transport.UDP));      Agent agent=new Agent();      agent.setTrickling(false);      agent.addCandidateHarvester(stunHarv);      IceMediaStream stream=agent.createMediaStream("audio");      agent.createComponent(stream,Transport.UDP,32020,32020,32020 + 100);      IceMediaStream iceMediaStream=agent.getStreams().get(0);      TransportAddress addr=iceMediaStream.getComponent(Component.RTP).getDefaultCandidate().getTransportAddress();      mask=addr;      Candidate<?> candidate=iceMediaStream.getComponents().get(0).getDefaultCandidate();      face=candidate.getHostAddress();      agent.free();      if (mask != null && face != null)       break;    }    logger.info("Detected through stun local IP: " + face);    logger.info("Detected through stun public IP: " + mask);  } catch (  Exception exc) {    logger.log(Level.INFO,"We failed to obtain addresses " + "for the following reason: ",exc);  }}  }
class C{  public static void stop(Application application){  if (instance == null) {    return;  }  instance.cleanup(application);}  }
class C{  private static void addComponentDimConstraintString(DimConstraint dc,StringBuffer sb,boolean asAPI,boolean isHor,boolean noGrowAdd){  int gp=dc.getGrowPriority();  if (gp != 100) {    if (asAPI) {      sb.append(isHor ? ".growPrioX(" : ".growPrioY(").append(gp).append(')');    } else {      sb.append(isHor ? ",growpriox " : ",growprioy ").append(gp);    }  }  if (noGrowAdd == false) {    Float gw=dc.getGrow();    if (gw != null) {      String g=gw != 100f ? floatToString(gw,asAPI) : "";      if (asAPI) {        sb.append(isHor ? ".growX(" : ".growY(").append(g).append(')');      } else {        sb.append(isHor ? ",growx" : ",growy").append(g.length() > 0 ? (" " + g) : "");      }    }  }  int sp=dc.getShrinkPriority();  if (sp != 100) {    if (asAPI) {      sb.append(isHor ? ".shrinkPrioX(" : ".shrinkPrioY(").append(sp).append(')');    } else {      sb.append(isHor ? ",shrinkpriox " : ",shrinkprioy ").append(sp);    }  }  Float sw=dc.getShrink();  if (sw != null && sw.intValue() != 100) {    String s=floatToString(sw,asAPI);    if (asAPI) {      sb.append(isHor ? ".shrinkX(" : ".shrinkY(").append(s).append(')');    } else {      sb.append(isHor ? ",shrinkx " : ",shrinky ").append(s);    }  }  String eg=dc.getEndGroup();  if (eg != null) {    if (asAPI) {      sb.append(isHor ? ".endGroupX(\"" : ".endGroupY(\"").append(eg).append("\")");    } else {      sb.append(isHor ? ",endgroupx " : ",endgroupy ").append(eg);    }  }  String sg=dc.getSizeGroup();  if (sg != null) {    if (asAPI) {      sb.append(isHor ? ".sizeGroupX(\"" : ".sizeGroupY(\"").append(sg).append("\")");    } else {      sb.append(isHor ? ",sizegroupx " : ",sizegroupy ").append(sg);    }  }  appendBoundSize(dc.getSize(),sb,isHor,asAPI);  UnitValue al=dc.getAlign();  if (al != null) {    if (asAPI) {      sb.append(isHor ? ".alignX(\"" : ".alignY(\"").append(getUV(al)).append("\")");    } else {      sb.append(isHor ? ",alignx " : ",aligny ").append(getUV(al));    }  }  BoundSize gapBef=dc.getGapBefore();  BoundSize gapAft=dc.getGapAfter();  if (gapBef != null || gapAft != null) {    if (asAPI) {      sb.append(isHor ? ".gapX(\"" : ".gapY(\"").append(getBS(gapBef)).append("\", \"").append(getBS(gapAft)).append("\")");    } else {      sb.append(isHor ? ",gapx " : ",gapy ").append(getBS(gapBef));      if (gapAft != null)       sb.append(' ').append(getBS(gapAft));    }  }}  }
class C{  @Override protected Size2D arrangeRN(Graphics2D g2,Range widthRange){  Size2D s=arrangeNN(g2);  if (widthRange.contains(s.getWidth())) {    return s;  }  double ww=widthRange.constrain(s.getWidth());  return arrangeFN(g2,ww);}  }
class C{  private static Pattern initializePattern(){  return Pattern.compile("\\b(((ht|f)tp(s?)\\:\\/\\/|~\\/|\\/)|www.)" + "(\\w+:\\w+@)?(([-\\w]+\\.)+(com|org|net|gov" + "|mil|biz|info|mobi|name|aero|jobs|museum"+ "|travel|[a-z]{2}))(:[\\d]{1,5})?"+ "(((\\/([-\\w~!$+|.,=]|%[a-f\\d]{2})+)+|\\/)+|\\?|#)?"+ "((\\?([-\\w~!$+|.,*:]|%[a-f\\d{2}])+=?"+ "([-\\w~!$+|.,*:=]|%[a-f\\d]{2})*)"+ "(&(?:[-\\w~!$+|.,*:]|%[a-f\\d{2}])+=?"+ "([-\\w~!$+|.,*:=]|%[a-f\\d]{2})*)*)*"+ "(#([-\\w~!$+|.,*:=]|%[a-f\\d]{2})*)?\\b");}  }
class C{  protected Task<T> putTaskURI(Object request,URI uri){  TaskResourceRep task=client.putURI(TaskResourceRep.class,request,uri);  return new Task<T>(client,task,resourceClass);}  }
class C{  public int readTag() throws IOException {  if (isAtEnd()) {    lastTag=0;    return 0;  }  lastTag=readRawVarint32();  if (WireFormat.getTagFieldNumber(lastTag) == 0) {    throw InvalidProtocolBufferException.invalidTag();  }  return lastTag;}  }
class C{  public void jMenuHelpAbout_actionPerformed(ActionEvent e){  JTSTestBuilder_AboutBox dlg=new JTSTestBuilder_AboutBox(this);  java.awt.Dimension dlgSize=dlg.getPreferredSize();  java.awt.Dimension frmSize=getSize();  java.awt.Point loc=getLocation();  dlg.setLocation((frmSize.width - dlgSize.width) / 2 + loc.x,(frmSize.height - dlgSize.height) / 2 + loc.y);  dlg.setModal(true);  dlg.setVisible(true);}  }
class C{  public void insertChildAt(int index,Node<T> child) throws IndexOutOfBoundsException {  if (index == getNumberOfChildren()) {    addChild(child);  } else {    children.get(index);    children.add(index,child);    child.parent=this;  }}  }
class C{  public void hleRescheduleCurrentThread(){  if (needThreadReschedule) {    SceKernelThreadInfo newThread=nextThread();    if (newThread != null && (currentThread == null || currentThread.status != PSP_THREAD_RUNNING || currentThread.currentPriority > newThread.currentPriority)) {      if (LOG_CONTEXT_SWITCHING && Modules.log.isDebugEnabled()) {        log.debug("Context switching to '" + newThread + "' after reschedule");      }      if (contextSwitch(newThread)) {        needThreadReschedule=false;      }    } else {      needThreadReschedule=false;    }  }}  }
class C{  public SubscriptionAlreadyExistsException(Object[] params){  super(params);}  }
class C{  private void readInStates(BufferedReader bufferedReader) throws CpuStateMonitorException {  try {    String line;    while ((line=bufferedReader.readLine()) != null) {      String[] nums=line.split(" ");      _states.add(new CpuState(Utils.stringToInt(nums[0]),Utils.stringToLong(nums[1])));    }  } catch (  IOException e) {    throw new CpuStateMonitorException("Problem processing time-in-states file");  }}  }
class C{  public Object parse(Reader reader,Class target) throws java.io.IOException, org.xml.sax.SAXException, dr.xml.XMLParseException, javax.xml.parsers.ParserConfigurationException {  InputSource in=new InputSource(reader);  javax.xml.parsers.DocumentBuilderFactory documentBuilderFactory=javax.xml.parsers.DocumentBuilderFactory.newInstance();  javax.xml.parsers.DocumentBuilder documentBuilder=documentBuilderFactory.newDocumentBuilder();  Document document=documentBuilder.parse(in);  Element e=document.getDocumentElement();  if (e.getTagName().equals("beast")) {    concurrent=false;    return convert(e,target,null,false,true);  } else {    throw new dr.xml.XMLParseException("Unknown root document element, " + e.getTagName());  }}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  private void processMeshDevices(List<IEspDevice> meshDevices,IEspDeviceStatus status){  if (meshDevices.size() > 0) {    List<NetworkGroup> deviceNetworkGroups=new ArrayList<NetworkGroup>();    groupingNetwork(deviceNetworkGroups);    for (    IEspDevice meshDevice : meshDevices) {      for (      NetworkGroup netGroup : deviceNetworkGroups) {        if (netGroup.bssids.toString().contains(meshDevice.getBssid())) {          netGroup.postBssidList.add(meshDevice.getBssid());          break;        }      }    }    for (    NetworkGroup netGroup : deviceNetworkGroups) {      if (netGroup.postBssidList.size() > 0) {        if (netGroup.state.isStateLocal()) {          postMulticastLocal(meshDevices.get(0).getDeviceType(),netGroup,status);        } else {          postMulticastInternet(meshDevices.get(0).getDeviceType(),netGroup,status);        }      }    }  }}  }
class C{  protected void layout(){  SynthContext context=getContext(slider);  SynthGraphicsUtils synthGraphics=style.getGraphicsUtils(context);  Insets trackInsets=new Insets(0,0,0,0);  SynthContext trackContext=getContext(slider,Region.SLIDER_TRACK);  style.getInsets(trackContext,trackInsets);  trackContext.dispose();  if (slider.getOrientation() == JSlider.HORIZONTAL) {    valueRect.height=0;    if (paintValue) {      valueRect.height=synthGraphics.getMaximumCharHeight(context);    }    trackRect.height=trackHeight;    tickRect.height=0;    if (slider.getPaintTicks()) {      tickRect.height=getTickLength();    }    labelRect.height=0;    if (slider.getPaintLabels()) {      labelRect.height=getHeightOfTallestLabel();    }    contentRect.height=valueRect.height + trackRect.height + trackInsets.top+ trackInsets.bottom+ tickRect.height+ labelRect.height+ 4;    contentRect.width=slider.getWidth() - insetCache.left - insetCache.right;    int pad=0;    if (slider.getPaintLabels()) {      trackRect.x=insetCache.left;      trackRect.width=contentRect.width;      Dictionary dictionary=slider.getLabelTable();      if (dictionary != null) {        int minValue=slider.getMinimum();        int maxValue=slider.getMaximum();        int firstLblIdx=Integer.MAX_VALUE;        int lastLblIdx=Integer.MIN_VALUE;        for (Enumeration keys=dictionary.keys(); keys.hasMoreElements(); ) {          int keyInt=((Integer)keys.nextElement()).intValue();          if (keyInt >= minValue && keyInt < firstLblIdx) {            firstLblIdx=keyInt;          }          if (keyInt <= maxValue && keyInt > lastLblIdx) {            lastLblIdx=keyInt;          }        }        pad=getPadForLabel(firstLblIdx);        pad=Math.max(pad,getPadForLabel(lastLblIdx));      }    }    valueRect.x=trackRect.x=tickRect.x=labelRect.x=(insetCache.left + pad);    valueRect.width=trackRect.width=tickRect.width=labelRect.width=(contentRect.width - (pad * 2));    int centerY=slider.getHeight() / 2 - contentRect.height / 2;    valueRect.y=centerY;    centerY+=valueRect.height + 2;    trackRect.y=centerY + trackInsets.top;    centerY+=trackRect.height + trackInsets.top + trackInsets.bottom;    tickRect.y=centerY;    centerY+=tickRect.height + 2;    labelRect.y=centerY;    centerY+=labelRect.height;  } else {    trackRect.width=trackHeight;    tickRect.width=0;    if (slider.getPaintTicks()) {      tickRect.width=getTickLength();    }    labelRect.width=0;    if (slider.getPaintLabels()) {      labelRect.width=getWidthOfWidestLabel();    }    valueRect.y=insetCache.top;    valueRect.height=0;    if (paintValue) {      valueRect.height=synthGraphics.getMaximumCharHeight(context);    }    FontMetrics fm=slider.getFontMetrics(slider.getFont());    valueRect.width=Math.max(synthGraphics.computeStringWidth(context,slider.getFont(),fm,"" + slider.getMaximum()),synthGraphics.computeStringWidth(context,slider.getFont(),fm,"" + slider.getMinimum()));    int l=valueRect.width / 2;    int w1=trackInsets.left + trackRect.width / 2;    int w2=trackRect.width / 2 + trackInsets.right + tickRect.width + labelRect.width;    contentRect.width=Math.max(w1,l) + Math.max(w2,l) + 2+ insetCache.left+ insetCache.right;    contentRect.height=slider.getHeight() - insetCache.top - insetCache.bottom;    trackRect.y=tickRect.y=labelRect.y=valueRect.y + valueRect.height;    trackRect.height=tickRect.height=labelRect.height=contentRect.height - valueRect.height;    int startX=slider.getWidth() / 2 - contentRect.width / 2;    if (SynthLookAndFeel.isLeftToRight(slider)) {      if (l > w1) {        startX+=(l - w1);      }      trackRect.x=startX + trackInsets.left;      startX+=trackInsets.left + trackRect.width + trackInsets.right;      tickRect.x=startX;      labelRect.x=startX + tickRect.width + 2;    } else {      if (l > w2) {        startX+=(l - w2);      }      labelRect.x=startX;      startX+=labelRect.width + 2;      tickRect.x=startX;      trackRect.x=startX + tickRect.width + trackInsets.left;    }  }  context.dispose();  lastSize=slider.getSize();}  }
class C{  protected URI toUri(final String path,final String scheme){  return ServletUriComponentsBuilder.fromCurrentContextPath().path(REST_API_VERSION).path(path).scheme(scheme).build().toUri();}  }
class C{  public String path(){  String path=_path;  if (path != null) {    return path;  } else {    return uri();  }}  }
class C{  public static Assignment createDefault(String... variables){  return createDefault(Arrays.asList(variables));}  }
class C{  public void loadConfiguration(){  XMLFileChooser fc=new XMLFileChooser();  if (fc.showOpenDialog(new JPanel()) == XMLFileChooser.APPROVE_OPTION) {    this.loadConfig(fc.getSelectedFile().getPath());  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:05.128 -0500",hash_original_method="455EAE3DE648593AC33DA780813354C8",hash_generated_method="D0A2D391BDF46DDA5D237F5FEF381ACE") @DSComment("Constructor") @DSSafe(DSCat.SAFE_OTHERS) public ToNetASCIIOutputStream(OutputStream output){  super(output);  __lastWasCR=false;}  }
class C{  public void validate(String password) throws Exception {  PasswordValidateParam input=new PasswordValidateParam();  input.setPassword(password);  client.post(input,VALIDATE_PASSWORD_URL);}  }
class C{  public int end(){  return nodes.get(0).j;}  }
class C{  private void process(){  RepositoryDefinition repositoryDefinition=null;  PlatformIdent platformIdent=null;  StructuredSelection selection=(StructuredSelection)treeViewer.getSelection();  if (selection.isEmpty()) {    return;  }  Object firstElement=selection.getFirstElement();  if (firstElement instanceof DeferredAgentsComposite) {    repositoryDefinition=((DeferredAgentsComposite)firstElement).getRepositoryDefinition();  } else   if (firstElement instanceof AgentLeaf) {    platformIdent=((AgentLeaf)firstElement).getPlatformIdent();    Component parent=((AgentLeaf)firstElement).getParent();    while (null != parent) {      if (parent instanceof DeferredAgentsComposite) {        repositoryDefinition=((DeferredAgentsComposite)parent).getRepositoryDefinition();        break;      }      parent=parent.getParent();    }  }  if (null != repositoryDefinition) {    IHandlerService handlerService=(IHandlerService)PlatformUI.getWorkbench().getService(IHandlerService.class);    ICommandService commandService=(ICommandService)PlatformUI.getWorkbench().getService(ICommandService.class);    Command command=commandService.getCommand(ShowRepositoryHandler.COMMAND);    ExecutionEvent executionEvent=handlerService.createExecutionEvent(command,new Event());    IEvaluationContext context=(IEvaluationContext)executionEvent.getApplicationContext();    context.addVariable(ShowRepositoryHandler.REPOSITORY_DEFINITION,repositoryDefinition);    if (null != platformIdent) {      context.addVariable(ShowRepositoryHandler.AGENT,platformIdent);    }    try {      command.executeWithChecks(executionEvent);    } catch (    Exception e) {      throw new RuntimeException(e);    }  } else {    if (treeViewer.getExpandedState(firstElement)) {      treeViewer.collapseToLevel(firstElement,1);    } else {      treeViewer.expandToLevel(firstElement,1);    }  }}  }
class C{  @SuppressWarnings("unchecked") public final boolean hasNext(){  if (q[index] == null)   return false;  if (index == q.length - 1) {    q=(E[])q[index];    index=0;    if (q[index] == null)     return false;  }  return true;}  }
class C{  public NameSearch findMatchingName(final Set<String> names){  final NameSearch ret=new NameSearch(names);  Expression name=getObject(0);  if (name != null) {    if (ret.search(name)) {      return ret;    }  }  if (!ret.found()) {    name=getSubject(0);    if (name != null) {      if (ret.search(name)) {        return ret;      }    }  }  if (!ret.found()) {    name=getSubject(1);    if (name != null) {      if (ret.search(name)) {        return ret;      }    }  }  if (!ret.found()) {    name=getUnknownTypeExpression(0);    if (name != null) {      if (!name.hasAmount()) {        Expression num=getNumeral(0);        if (num != null) {          name.setAmount(num.getAmount());        }      }      if (ret.search(name)) {        return ret;      }    }  }  return ret;}  }
class C{  MemberState completeConfigure(){  configuring=false;  return this;}  }
class C{  protected TraceRecord_Impl(){  super();}  }
class C{  public SharpnessEffect(float scale){  if (scale < 0.0f)   scale=0.0f;  if (scale > 1.0f)   scale=1.0f;  this.scale=scale;}  }
class C{  public VecsResource vecs(){  return vecs;}  }
class C{  private void showMessage(String message){  Toast.makeText(this,message,Toast.LENGTH_SHORT).show();}  }
class C{  public SAXSVGDocumentFactory(String parser,boolean dd){  super(SVGDOMImplementation.getDOMImplementation(),parser,dd);}  }
class C{  public void fireUISettingsChanged(){  incModificationCount();  myDispatcher.getMulticaster().uiSettingsChanged(this);  ApplicationManager.getApplication().getMessageBus().syncPublisher(UISettingsListener.TOPIC).uiSettingsChanged(this);}  }
class C{  private void dispatchEventImpl(final AWTEvent event,final Object src){  event.isPosted=true;  if (event instanceof ActiveEvent) {    setCurrentEventAndMostRecentTimeImpl(event);    ((ActiveEvent)event).dispatch();  } else   if (src instanceof Component) {    ((Component)src).dispatchEvent(event);    event.dispatched();  } else   if (src instanceof MenuComponent) {    ((MenuComponent)src).dispatchEvent(event);  } else   if (src instanceof TrayIcon) {    ((TrayIcon)src).dispatchEvent(event);  } else   if (src instanceof AWTAutoShutdown) {    if (noEvents()) {      dispatchThread.stopDispatching();    }  } else {    if (getEventLog().isLoggable(PlatformLogger.Level.FINE)) {      getEventLog().fine("Unable to dispatch event: " + event);    }  }}  }
class C{  protected boolean loadBehaviorSettings(Document princessBehaviorDoc){synchronized (behaviorMap) {    try {      if (princessBehaviorDoc == null) {        return false;      }      Element root=princessBehaviorDoc.getDocumentElement();      BehaviorSettings behaviorSettings;      for (int i=0; i < root.getChildNodes().getLength(); i++) {        Node child=root.getChildNodes().item(i);        if (!"behavior".equalsIgnoreCase(child.getNodeName())) {          continue;        }        behaviorSettings=new BehaviorSettings((Element)child);        addBehavior(behaviorSettings);      }      return true;    } catch (    Exception e) {      e.printStackTrace();      return false;    } finally {      addDefaultBehaviors();    }  }}  }
class C{  public ClientConfig withLoggingEntityLength(int loggingEntityLength){  setLoggingEntityLength(loggingEntityLength);  return this;}  }
class C{  public static IAbstractNode parse(final String filterString) throws RecognitionException {  final CharStream charStream=new ANTLRStringStream(filterString);  final FilterLexer lexer=new FilterLexer(charStream);  final CommonTokenStream tokens=new CommonTokenStream();  tokens.setTokenSource(lexer);  final FilterParser parser=new FilterParser(tokens);  parser.setTreeAdaptor(adaptor);  final FilterParser.prog_return parserResult=parser.prog();  final CommonTree ast=(CommonTree)parserResult.getTree();  return convert(ast);}  }
class C{  public boolean cancelAndRunWhenAllCommitted(@NonNls @NotNull Object key,@NotNull final Runnable action){  ApplicationManager.getApplication().assertIsDispatchThread();  if (myProject.isDisposed()) {    action.run();    return true;  }  if (myUncommittedDocuments.isEmpty()) {    action.run();    if (!hasUncommitedDocuments()) {      assert actionsWhenAllDocumentsAreCommitted.isEmpty() : actionsWhenAllDocumentsAreCommitted;    }    return true;  }  actionsWhenAllDocumentsAreCommitted.put(key,action);  return false;}  }
class C{  public UpdateRulePanel(List<Neuron> neuronList,Window parent){  this(neuronList,parent,DEFAULT_NP_DISPLAY_STATE);}  }
class C{  public SnackbarBuilder dismissCallback(SnackbarDismissCallback callback){  callbackBuilder.dismissCallback(callback);  return this;}  }
class C{  public _QueueStatus(final _QueueStatus_Flag[] flags){  super(flags);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @DSSink({DSSinkKind.NETWORK}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:01.278 -0500",hash_original_method="F1F1C1D05E28ABD7E03ACA6C9259AC2F",hash_generated_method="9823E54C53B079EDAC31D5C9B4C87A7F") public void writeToParcel(Parcel dest,int flags){  dest.writeString(deviceName);  dest.writeString(deviceAddress);  dest.writeString(interfaceAddress);  dest.writeString(primaryDeviceType);  dest.writeString(secondaryDeviceType);  dest.writeInt(wpsConfigMethodsSupported);  dest.writeInt(deviceCapability);  dest.writeInt(groupCapability);  dest.writeInt(status);}  }
class C{  public synchronized void addPanListener(PanListener listener){  mPanListeners.add(listener);}  }
class C{  private void drawDayNames(){  int firstDayOfWeek=calendar.getFirstDayOfWeek();  DateFormatSymbols dateFormatSymbols=new DateFormatSymbols(locale);  String[] dayNames=dateFormatSymbols.getShortWeekdays();  int day=firstDayOfWeek;  for (int i=0; i < 7; i++) {    days[i].setText(dayNames[day]);    if (day == 1) {      days[i].setForeground(sundayForeground);    } else {      days[i].setForeground(weekdayForeground);    }    if (day < 7) {      day++;    } else {      day-=6;    }  }}  }
class C{  protected void paintExpandControl(java.awt.Graphics g,java.awt.Rectangle clipBounds,java.awt.Insets insets,java.awt.Rectangle bounds,javax.swing.tree.TreePath path,int row,boolean isExpanded,boolean hasBeenExpanded,boolean isLeaf){  Object value=path.getLastPathComponent();  if (!isLeaf && (!hasBeenExpanded || treeModel.getChildCount(value) > 0)) {    int middleXOfKnob=bounds.x - (getRightChildIndent() - 1);    int middleYOfKnob=bounds.y + 10;    if (isExpanded) {      javax.swing.Icon expandedIcon=getExpandedIcon();      if (expandedIcon != null) {        drawCentered(tree,g,expandedIcon,middleXOfKnob,middleYOfKnob);      }    } else {      javax.swing.Icon collapsedIcon=getCollapsedIcon();      if (collapsedIcon != null) {        drawCentered(tree,g,collapsedIcon,middleXOfKnob,middleYOfKnob);      }    }  }}  }
class C{  public static String normalizeLocalPath(final String localPath){  if (localPath.endsWith("\\") && localPath.length() > 3) {    return localPath.substring(0,localPath.length() - 1);  }  return localPath;}  }
class C{  public static byte[] decode(String input) throws ParseException {  if (input.length() == 0) {    return new byte[0];  }  byte[] input58=new byte[input.length()];  for (int i=0; i < input.length(); ++i) {    char c=input.charAt(i);    int digit=c < 128 ? INDEXES[c] : -1;    if (digit < 0) {      throw new ParseException("Illegal character " + c + " at position "+ i,i);    }    input58[i]=(byte)digit;  }  int zeros=0;  while (zeros < input58.length && input58[zeros] == 0) {    ++zeros;  }  byte[] decoded=new byte[input.length()];  int outputStart=decoded.length;  for (int inputStart=zeros; inputStart < input58.length; ) {    decoded[--outputStart]=divmod(input58,inputStart,58,256);    if (input58[inputStart] == 0) {      ++inputStart;    }  }  while (outputStart < decoded.length && decoded[outputStart] == 0) {    ++outputStart;  }  return Arrays.copyOfRange(decoded,outputStart - zeros,decoded.length);}  }
class C{  public MovieExtendedMatcher(final Map<MovieSearchOptions,Object> searchOptions){  this.searchOptions=searchOptions;}  }
class C{  public GitHubBranchCause checkHook(GitHubBranchTrigger githubTrigger,GHEventPayload payload,TaskListener listener){  return null;}  }
class C{  @ShortCircuit("rightNode") protected boolean needsRightNode(boolean left){  return left;}  }
class C{  public float[] generateTransformedValuesHorizontalBarChart(List<? extends Entry> entries,int dataSet,BarData bd,float phaseY){  float[] valuePoints=new float[entries.size() * 2];  int setCount=bd.getDataSetCount();  float space=bd.getGroupSpace();  for (int j=0; j < valuePoints.length; j+=2) {    Entry e=entries.get(j / 2);    float x=e.getXIndex() + (j / 2 * (setCount - 1)) + dataSet+ space * (j / 2) + space / 2f;    float y=e.getVal();    valuePoints[j]=y * phaseY;    valuePoints[j + 1]=x;  }  pointValuesToPixel(valuePoints);  return valuePoints;}  }
class C{  public PasswordView(Element elem){  super(elem);}  }
class C{  @Override public boolean equals(Object obj){  return (obj == this);}  }
class C{  public void expandToQueue(PriorityQueue priQ,double minDistance){  boolean isComp1=isComposite(boundable1);  boolean isComp2=isComposite(boundable2);  if (isComp1 && isComp2) {    if (area(boundable1) > area(boundable2)) {      expand(boundable1,boundable2,priQ,minDistance);      return;    } else {      expand(boundable2,boundable1,priQ,minDistance);      return;    }  } else   if (isComp1) {    expand(boundable1,boundable2,priQ,minDistance);    return;  } else   if (isComp2) {    expand(boundable2,boundable1,priQ,minDistance);    return;  }  throw new IllegalArgumentException("neither boundable is composite");}  }
class C{  public GasStack copy(){  return new GasStack(type,amount);}  }
class C{  @Override public byte[] encode(){  byte binValue[]=new byte[HEADER_LENGTH + DATA_LENGTH];  binValue[0]=(byte)(getAttributeType() >> 8);  binValue[1]=(byte)(getAttributeType() & 0x00FF);  binValue[2]=(byte)(getDataLength() >> 8);  binValue[3]=(byte)(getDataLength() & 0x00FF);  binValue[4]=(byte)((lifetime >> 24) & 0xff);  binValue[5]=(byte)((lifetime >> 16) & 0xff);  binValue[6]=(byte)((lifetime >> 8) & 0xff);  binValue[7]=(byte)((lifetime) & 0xff);  return binValue;}  }
class C{  public void writeToParcel(Parcel dest,int flags){  dest.writeString(mLabel);  dest.writeDouble(mLatitude);  dest.writeDouble(mLongitude);  dest.writeLong(mExpiration);  dest.writeFloat(mAccuracy);}  }
class C{  public static void createProcedure(String name,String body) throws SQLException {  if (testSingleHost) {    Statement stmt=sharedConnection.createStatement();    stmt.execute("drop procedure IF EXISTS " + name);    stmt.execute("create  procedure " + name + body);    tempProcedureList.add(name);  }}  }
class C{  public Object jsFunction_readLines() throws IOException {  List<String> list=new ArrayList<String>();  String s;  while ((s=jsFunction_readLine()) != null) {    list.add(s);  }  String[] lines=list.toArray(new String[list.size()]);  Scriptable scope=ScriptableObject.getTopLevelScope(this);  Context cx=Context.getCurrentContext();  return cx.newObject(scope,"Array",lines);}  }
class C{  public LensHandle(Lens<TInventory,TStack> lens,InventoryProperty<?,?>... properties){  this.lens=lens;  if (properties != null && properties.length > 0) {    this.properties=new ArrayList<InventoryProperty<?,?>>();    for (    InventoryProperty<?,?> property : properties) {      this.properties.add(property);    }  }}  }
class C{  public void installApp(String url,String packageName){  Toast.makeText(context,"Please wait, Application is being installed.",Toast.LENGTH_LONG).show();  Preference.putString(context,resources.getString(R.string.current_downloading_app),packageName);  if (isPackageInstalled(Constants.AGENT_PACKAGE_NAME)) {    CommonUtils.callAgentApp(context,Constants.Operation.INSTALL_APPLICATION,url,null);  } else   if (isDownloadManagerAvailable(context)) {    downloadedAppName=getAppNameFromPackage(packageName);    IntentFilter filter=new IntentFilter(DownloadManager.ACTION_DOWNLOAD_COMPLETE);    context.registerReceiver(downloadReceiver,filter);    downloadViaDownloadManager(url,downloadedAppName);  } else {    downloadApp(url);  }}  }
class C{  public void count(HashMap<String,TreeMap<String,Integer>> table,String suffix,String tag){  TreeMap<String,Integer> counts=table.get(suffix);  if (counts == null) {    counts=new TreeMap<String,Integer>();    table.put(suffix,counts);  }  Integer count=counts.get(tag);  if (count == null)   count=0;  counts.put(tag,count + 1);}  }
class C{  public static DeleteServiceSessionE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  DeleteServiceSessionE object=new DeleteServiceSessionE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","deleteServiceSession").equals(reader.getName())) {          object.setDeleteServiceSession(DeleteServiceSession.Factory.parse(reader));        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public void addNeuronNode(NeuronNode node){  outlinedObjects.addChild(node);}  }
class C{  public static byte[] fastFingerprintRaw(final File file,final boolean includeDate) throws IOException {  final int mb=16 * 1024;  final long fl=file.length();  if (fl <= 2 * mb)   return encodeMD5Raw(file);  MessageDigest digest;  try {    digest=MessageDigest.getInstance("MD5");  } catch (  final NoSuchAlgorithmException e) {    e.printStackTrace();    return null;  }  final RandomAccessFile raf=new RandomAccessFile(file,"r");  final byte[] a=new byte[mb];  try {    raf.seek(0);    raf.readFully(a,0,mb);    digest.update(a,0,mb);    raf.seek(fl - mb);    raf.readFully(a,0,mb);    digest.update(a,0,mb);    digest.update(NaturalOrder.encodeLong(fl,8),0,8);    if (includeDate)     digest.update(NaturalOrder.encodeLong(file.lastModified(),8),0,8);  }  finally {    raf.close();    try {      raf.getChannel().close();    } catch (    final IOException e) {    }  }  return digest.digest();}  }
class C{  public Vec2 centroidToOut(final Transform xf,final Vec2 out){  Transform.mulToOutUnsafe(xf,m_centroid,out);  return out;}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 15:{        addToken(Token.RESERVED_WORD);      }case 17:    break;case 2:{    addToken(Token.IDENTIFIER);  }case 18:break;case 4:{addToken(Token.WHITESPACE);}case 19:break;case 11:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);return firstToken;}case 20:break;case 13:{addToken(start,zzStartRead - 1,Token.LITERAL_CHAR);return firstToken;}case 21:break;case 10:{addToken(Token.OPERATOR);}case 22:break;case 5:{if (zzStartRead == s.offset) {addToken(zzStartRead,zzEndRead,Token.COMMENT_EOL);addNullToken();return firstToken;} else {addToken(Token.IDENTIFIER);}}case 23:break;case 16:{addToken(Token.LITERAL_BOOLEAN);}case 24:break;case 8:{start=zzMarkedPos - 1;yybegin(STRING);}case 25:break;case 7:{addToken(zzStartRead,zzEndRead,Token.COMMENT_EOL);addNullToken();return firstToken;}case 26:break;case 6:{if (zzStartRead == s.offset) {addToken(zzStartRead,zzEndRead,Token.COMMENT_DOCUMENTATION);addNullToken();return firstToken;} else {addToken(Token.IDENTIFIER);}}case 27:break;case 9:{start=zzMarkedPos - 1;yybegin(CHAR);}case 28:break;case 14:{yybegin(YYINITIAL);addToken(start,zzStartRead,Token.LITERAL_CHAR);}case 29:break;case 12:{yybegin(YYINITIAL);addToken(start,zzStartRead,Token.LITERAL_STRING_DOUBLE_QUOTE);}case 30:break;case 3:{addNullToken();return firstToken;}case 31:break;case 1:{}case 32:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case STRING:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);return firstToken;}case 258:break;case YYINITIAL:{addNullToken();return firstToken;}case 259:break;case CHAR:{addToken(start,zzStartRead - 1,Token.LITERAL_CHAR);return firstToken;}case 260:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public Hour(Date time){  this(time,TimeZone.getDefault(),Locale.getDefault());}  }
class C{  public static Motor victor(int channel){  return victor(channel,SPEED_LIMITER);}  }
class C{  public CViewContent(final INaviView view,final ListenerProvider<INaviViewListener> listeners,final SQLProvider provider,final MutableDirectedGraph<INaviViewNode,INaviEdge> graph){  this.view=Preconditions.checkNotNull(view,"IE02613: view argument can not be null");  this.listeners=Preconditions.checkNotNull(listeners,"IE02614: listeners argument can not be null");  this.provider=Preconditions.checkNotNull(provider,"IE02615: provider argument can not be null");  this.graph=Preconditions.checkNotNull(graph,"IE02616: graph argument can not be null");  for (  final INaviViewNode node : this.graph.getNodes()) {    node.addListener(m_internalNodeListener);  }  for (  final INaviEdge edge : this.graph.getEdges()) {    edge.addListener(m_internalEdgeListener);  }  updateGraphType();}  }
class C{  private static boolean isDigit(char p_char){  return p_char >= '0' && p_char <= '9';}  }
class C{  public boolean checkCloseHitTest(float x,float y,boolean isRTL){  RectF closeRectangle=getCloseBounds(isRTL);  return closeRectangle != null ? closeRectangle.contains(x,y) : false;}  }
class C{  void readPage(int pos,Data page){  if (recordPageReads) {    if (pos >= MIN_PAGE_COUNT && recordedPagesIndex.get(pos) == IntIntHashMap.NOT_FOUND) {      recordedPagesIndex.put(pos,recordedPagesList.size());      recordedPagesList.add(pos);    }  }  if (pos < 0 || pos >= pageCount) {    throw DbException.get(ErrorCode.FILE_CORRUPTED_1,pos + " of " + pageCount);  }  file.seek((long)pos << pageSizeShift);  file.readFully(page.getBytes(),0,pageSize);  readCount++;}  }
class C{  Object processEXPR(StylesheetHandler handler,String uri,String name,String rawName,String value,ElemTemplateElement owner) throws org.xml.sax.SAXException {  try {    XPath expr=handler.createXPath(value,owner);    return expr;  } catch (  TransformerException te) {    throw new org.xml.sax.SAXException(te);  }}  }
class C{  public Long deleteFileOrFolderSelf(String SID,Long fileExplorerItemId) throws AxisFault {  try {    Long users_id=sessionManagement.checkSession(SID);    Long User_level=userManagement.getUserLevelByID(users_id);    if (authLevelManagement.checkUserLevel(User_level)) {      fileExplorerItemDao.deleteFileExplorerItem(fileExplorerItemId);    }  } catch (  Exception err) {    log.error("[deleteFileOrFolder]",err);  }  return null;}  }
class C{  public static <T>DatabaseTableConfig<T> fromClass(ConnectionSource connectionSource,Class<T> clazz) throws SQLException {  String tableName=extractTableName(clazz);  if (connectionSource.getDatabaseType().isEntityNamesMustBeUpCase()) {    tableName=tableName.toUpperCase();  }  return new DatabaseTableConfig<T>(clazz,tableName,extractFieldTypes(connectionSource,clazz,tableName));}  }
class C{  public void forget(Xid xid) throws XAException {}  }
class C{  public static Source fromURL(URL url,Charset cs) throws IOException {  URI uri;  try {    uri=url.toURI();  } catch (  URISyntaxException e) {    throw new IOException("Illegal URI",e);  }  try (InputStream is=url.openStream()){    return fromStream(is,uri,cs);  } }  }
class C{  public static void pause(Context context,String clientId){  Intent intent=new Intent(context,PlaybackService.class);  intent.setAction(ACTION_PAUSE_PLAYER);  intent.putExtra(BUNDLE_KEY_SOUND_CLOUD_CLIENT_ID,clientId);  context.startService(intent);}  }
class C{  public BarData(LocalDateTime dateTime,double open,double high,double low,double close,long volume){  this(null,dateTime,open,high,low,close,volume,1,LengthUnit.DAY);}  }
class C{  public WWObjectImpl(){}  }
class C{  public void init(HandlerInfo arg){  info=arg;}  }
class C{  public static void assertSize(List<IOObject> expected,List<IOObject> actual){  assertEquals("Number of connected output ports in the process is not equal with the number of ioobjects contained in the same folder with the format 'processname-expected-port-1', 'processname-expected-port-2', ...",expected.size(),actual.size());}  }
class C{  public Call createCall(){  CallImpl call=new CallImpl();  return call;}  }
class C{  @Override public void renderLimitLines(Canvas c){  List<LimitLine> limitLines=mXAxis.getLimitLines();  if (limitLines == null || limitLines.size() <= 0)   return;  float[] pts=new float[4];  Path limitLinePath=new Path();  for (int i=0; i < limitLines.size(); i++) {    LimitLine l=limitLines.get(i);    pts[0]=l.getLimit();    pts[2]=l.getLimit();    mTrans.pointValuesToPixel(pts);    pts[1]=mViewPortHandler.contentTop();    pts[3]=mViewPortHandler.contentBottom();    limitLinePath.moveTo(pts[0],pts[1]);    limitLinePath.lineTo(pts[2],pts[3]);    mLimitLinePaint.setStyle(Paint.Style.STROKE);    mLimitLinePaint.setColor(l.getLineColor());    mLimitLinePaint.setStrokeWidth(l.getLineWidth());    mLimitLinePaint.setPathEffect(l.getDashPathEffect());    c.drawPath(limitLinePath,mLimitLinePaint);    limitLinePath.reset();    String label=l.getLabel();    if (label != null && !label.equals("")) {      float xOffset=l.getLineWidth();      float add=Utils.convertDpToPixel(4f);      mLimitLinePaint.setStyle(l.getTextStyle());      mLimitLinePaint.setPathEffect(null);      mLimitLinePaint.setColor(l.getTextColor());      mLimitLinePaint.setStrokeWidth(0.5f);      mLimitLinePaint.setTextSize(l.getTextSize());      float yOffset=Utils.calcTextHeight(mLimitLinePaint,label) + add / 2f;      if (l.getLabelPosition() == LimitLine.LimitLabelPosition.POS_RIGHT) {        c.drawText(label,pts[0] + xOffset,mViewPortHandler.contentBottom() - add,mLimitLinePaint);      } else {        c.drawText(label,pts[0] + xOffset,mViewPortHandler.contentTop() + yOffset,mLimitLinePaint);      }    }  }}  }
class C{  @Override public boolean supportsTransactions(){  debugCodeCall("supportsTransactions");  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:25.880 -0500",hash_original_method="02EB65A37D4D288F16E2D066B80A09B0",hash_generated_method="F90E40FD842414200810B891B70D4B65") public DERSequence(DEREncodable obj){  this.addObject(obj);}  }
class C{  public static byte[] ripemd160(final byte[]... inputs){  return hash("RIPEMD160",inputs);}  }
class C{  public void commit() throws IOException {  if (hasErrors) {    completeEdit(this,false);    removeByDiskKey(entry.diskKey);  } else {    completeEdit(this,true);  }  committed=true;}  }
class C{  @Override public URI deresolveToProject(URI uri){  return uri.deresolve(getProject().getRootURI());}  }
class C{  public static MockVoltageSensor voltageSensor(){  return new MockVoltageSensor();}  }
class C{  public MLOutput executeScript(String dmlScript) throws IOException, DMLException {  return executeScript(dmlScript,false);}  }
class C{  private static String convertDomain(final String domain){  return stripDotSuffix(domain);}  }
class C{  private void configureAvailableSpeedStepModes(){  int modes=jmri.InstanceManager.throttleManagerInstance().supportedSpeedModes();  if ((modes & DccThrottle.SpeedStepMode128) != 0) {    SpeedStep128Button.setEnabled(true);  } else {    SpeedStep128Button.setEnabled(false);  }  if ((modes & DccThrottle.SpeedStepMode28) != 0) {    SpeedStep28Button.setEnabled(true);  } else {    SpeedStep28Button.setEnabled(false);  }  if ((modes & DccThrottle.SpeedStepMode27) != 0) {    SpeedStep27Button.setEnabled(true);  } else {    SpeedStep27Button.setEnabled(false);  }  if ((modes & DccThrottle.SpeedStepMode14) != 0) {    SpeedStep14Button.setEnabled(true);  } else {    SpeedStep14Button.setEnabled(false);  }}  }
class C{  public int indexOf(DurationFieldType type){  for (int i=0, isize=size(); i < isize; i++) {    if (iTypes[i] == type) {      return i;    }  }  return -1;}  }
class C{  public String toSourceCode(DoubleMatrix2D matrix){  Formatter copy=(Formatter)this.clone();  String b3=blanks(3);  copy.setPrintShape(false);  copy.setColumnSeparator(", ");  copy.setRowSeparator("},\n" + b3 + "{");  String lead="{\n" + b3 + "{";  String trail="}\n};";  return lead + copy.toString(matrix) + trail;}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  @Override protected void entryRemoved(boolean evicted,String key,BitmapDrawable oldValue,BitmapDrawable newValue){  if (RecyclingBitmapDrawable.class.isInstance(oldValue)) {    ((RecyclingBitmapDrawable)oldValue).setIsCached(false);  } else {    if (Utils.hasHoneycomb()) {      mReusableBitmaps.add(new SoftReference<Bitmap>(oldValue.getBitmap()));    }  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.TSTRUCT_FIELD__DEFINED_MEMBER:    if (resolve)     return getDefinedMember();  return basicGetDefinedMember();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void testBFS_directed_forward() throws Exception {  final SmallGraphProblem p=setupSmallGraphProblem();  final IGASEngine gasEngine=getGraphFixture().newGASEngine(1);  try {    final SailConnection cxn=getGraphFixture().getSail().getConnection();    try {      final IGraphAccessor graphAccessor=getGraphFixture().newGraphAccessor(cxn);      final IGASContext<BFS.VS,BFS.ES,Void> gasContext=gasEngine.newGASContext(graphAccessor,new BFS());      final IGASState<BFS.VS,BFS.ES,Void> gasState=gasContext.getGASState();      gasState.setFrontier(gasContext,p.getFoafPerson());      gasContext.setTraversalDirection(TraversalDirectionEnum.Forward);      gasContext.call();      assertEquals(0,gasState.getState(p.getFoafPerson()).depth());      assertEquals(null,gasState.getState(p.getFoafPerson()).predecessor());      assertEquals(-1,gasState.getState(p.getMike()).depth());      assertEquals(null,gasState.getState(p.getMike()).predecessor());      assertEquals(-1,gasState.getState(p.getBryan()).depth());      assertEquals(null,gasState.getState(p.getBryan()).predecessor());      assertEquals(-1,gasState.getState(p.getMartyn()).depth());      assertEquals(null,gasState.getState(p.getMartyn()).predecessor());    }  finally {      try {        cxn.rollback();      }  finally {        cxn.close();      }    }  }  finally {    gasEngine.shutdownNow();  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void clear(){  valueBoxBase.setText("");  clearErrorOrSuccess();  label.removeStyleName("active");}  }
class C{  public static boolean matchesCheckerOrSubcheckerFromList(final String processorString,List<String> fullyQualifiedCheckerNames){  if (processorString.contains(",")) {    return false;  }  return fullyQualifiedCheckerNames.contains(unshorthandProcessorNames(processorString,fullyQualifiedCheckerNames,true));}  }
class C{  public X509Certificate resolveX509Certificate(Element element,String baseURI,StorageResolver storage) throws KeyResolverException {  return resolverSpi.engineLookupResolveX509Certificate(element,baseURI,storage);}  }
class C{  public int addItemToEnd(String productId,BigDecimal amount,BigDecimal quantity,BigDecimal unitPrice,HashMap<String,GenericValue> features,HashMap<String,Object> attributes,String prodCatalogId,String itemType,LocalDispatcher dispatcher,Boolean triggerExternalOps,Boolean triggerPriceRules) throws CartItemModifyException, ItemNotFoundException {  return addItemToEnd(productId,amount,quantity,unitPrice,features,attributes,prodCatalogId,itemType,dispatcher,triggerExternalOps,triggerPriceRules,Boolean.FALSE,Boolean.FALSE);}  }
class C{  public void testMarshallingSelfLink() throws IgniteCheckedException {  SelfLink sl=new SelfLink("a string 1");  sl.link(sl);  SelfLink sl1=unmarshal(marshal(sl));  assert sl1.link() == sl1;}  }
class C{  public TObjectHash(int initialCapacity){  super(initialCapacity);  _hashingStrategy=this;}  }
class C{  public void addPlugin(IMaterialPlugin plugin){  if (mPlugins == null) {    mPlugins=new ArrayList<IMaterialPlugin>();  } else {    for (    IMaterialPlugin p : mPlugins) {      if (plugin.getClass().getSimpleName().equals(p.getClass().getSimpleName()))       return;    }  }  mPlugins.add(plugin);  mIsDirty=true;}  }
class C{  public boolean isNew(){  return id == null;}  }
class C{  private static String readLine(BufferedReader in){  String result=null;  try {    result=in.readLine();  } catch (  Exception e) {    System.err.println("Can't read from " + testingFile + ": "+ e);    System.exit(1);  }  return result;}  }
class C{  public HTMLAnnotationHover(boolean showLineNumber){  super(showLineNumber);}  }
class C{  protected void shiftEnd(int newSize){  int oldGapEnd=getGapEnd();  super.shiftEnd(newSize);  int dg=getGapEnd() - oldGapEnd;  int adjustIndex=findMarkAdjustIndex(oldGapEnd);  int n=marks.size();  for (int i=adjustIndex; i < n; i++) {    MarkData mark=marks.elementAt(i);    mark.index+=dg;  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  Set<AttributeDescriptor> mappedAttributes(EntityDescriptor entity,AttributeDescriptor attribute,EntityDescriptor referenced){  String mappedBy=attribute.mappedBy();  if (Names.isEmpty(mappedBy)) {    return referenced.attributes().values().stream().filter(null).filter(null).filter(null).collect(Collectors.toSet());  } else {    return referenced.attributes().values().stream().filter(null).collect(Collectors.toSet());  }}  }
class C{  public static Edge bidirectedEdge(Node nodeA,Node nodeB){  return new Edge(nodeA,nodeB,Endpoint.ARROW,Endpoint.ARROW);}  }
class C{  @Override protected void finalize() throws Throwable {  mView=null;  mTokenInfo=null;  super.finalize();}  }
class C{  public SecP256K1Point(ECCurve curve,ECFieldElement x,ECFieldElement y){  this(curve,x,y,false);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:46.153 -0500",hash_original_method="886E13332A9209796D68B57BD4AA101D",hash_generated_method="D2CF3E934D1AFF5F16088D62551FCDBD") private void waitForRequestToComplete(){synchronized (mRequestInFlightLock) {    while (mRequestInFlight) {      try {        mRequestInFlightLock.wait();      } catch (      InterruptedException e) {        Log.e(LOGTAG,"Interrupted while waiting for request to complete");      }    }  }}  }
class C{  public ArrayBasedIntToIntArrayMap(int expectedNumNodes,int expectedArraySize,StatsReceiver statsReceiver){  Preconditions.checkArgument(expectedNumNodes > 0,"Need to have at least one node!");  StatsReceiver scopedStatsReceiver=statsReceiver.scope("ArrayBasedIntToIntArrayMap");  this.numEdgesCounter=scopedStatsReceiver.counter("numEdges");  this.numNodesCounter=scopedStatsReceiver.counter("numNodes");  IntToIntPairHashMap intToIntPairHashMap=new IntToIntPairConcurrentHashMap(expectedNumNodes,0.5,(int)DEFAULT_RETURN_VALUE,scopedStatsReceiver);  readerAccessibleInfo=new ReaderAccessibleInfo(new ShardedBigIntArray(expectedNumNodes,expectedArraySize,0,scopedStatsReceiver),intToIntPairHashMap);  currentPositionOffset=0;  currentNumEdgesStored=0;}  }
class C{  public static void fileWriteEnd(Object context,long bytesWritten){  IoTraceHandler.fileWriteEnd(context,bytesWritten);}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  public boolean interceptIntent(Intent intent){  Tag tag=intent.getParcelableExtra(NfcAdapter.EXTRA_TAG);  if (tag != null) {    dispatchTag(tag);    return true;  } else {    return false;  }}  }
class C{  public RemoteContentServiceImpl(final DtoContentService dtoContentService,final FederationFacade federationFacade){  super(dtoContentService);  this.federationFacade=federationFacade;}  }
class C{  public boolean isDelegationTargetIsAbstract(){  return delegationTargetIsAbstract;}  }
class C{  public Element store(Object o){  RpsPositionIcon p=(RpsPositionIcon)o;  if (!p.isActive()) {    return null;  }  Element element=new Element("sensoricon");  storeCommonAttributes(p,element);  element.setAttribute("active",p.getActiveIcon().getURL());  element.setAttribute("error",p.getErrorIcon().getURL());  element.setAttribute("rotate",String.valueOf(p.getActiveIcon().getRotation()));  element.setAttribute("momentary",p.getMomentary() ? "true" : "false");  element.setAttribute("sxscale","" + p.getXScale());  element.setAttribute("syscale","" + p.getYScale());  element.setAttribute("sxorigin","" + p.getXOrigin());  element.setAttribute("syorigin","" + p.getYOrigin());  element.setAttribute("showid",p.isShowID() ? "true" : "false");  if (p.getFilter() != null) {    element.setAttribute("filter","" + p.getFilter());  }  element.addContent(storeIcon("active",p.getActiveIcon()));  element.addContent(storeIcon("error",p.getErrorIcon()));  element.setAttribute("class","jmri.jmrit.display.configurexml.RpsPositionIconXml");  return element;}  }
class C{  public static void copyRelationalValues(Instance instance,boolean instSrcCompat,Instances srcDataset,AttributeLocator srcLoc,Instances destDataset,AttributeLocator destLoc){  if (srcDataset == destDataset) {    return;  }  if (srcLoc.getAttributeIndices().length != destLoc.getAttributeIndices().length) {    throw new IllegalArgumentException("Src and Dest relational indices differ in length: " + srcLoc.getAttributeIndices().length + " != "+ destLoc.getAttributeIndices().length);  }  if (srcLoc.getLocatorIndices().length != destLoc.getLocatorIndices().length) {    throw new IllegalArgumentException("Src and Dest locator indices differ in length: " + srcLoc.getLocatorIndices().length + " != "+ destLoc.getLocatorIndices().length);  }  for (int i=0; i < srcLoc.getAttributeIndices().length; i++) {    int instIndex=instSrcCompat ? srcLoc.getActualIndex(srcLoc.getAttributeIndices()[i]) : destLoc.getActualIndex(destLoc.getAttributeIndices()[i]);    Attribute src=srcDataset.attribute(srcLoc.getActualIndex(srcLoc.getAttributeIndices()[i]));    Attribute dest=destDataset.attribute(destLoc.getActualIndex(destLoc.getAttributeIndices()[i]));    if (!instance.isMissing(instIndex)) {      int valIndex=dest.addRelation(src.relation((int)instance.value(instIndex)));      instance.setValue(instIndex,valIndex);    }  }  int[] srcIndices=srcLoc.getLocatorIndices();  int[] destIndices=destLoc.getLocatorIndices();  for (int i=0; i < srcIndices.length; i++) {    int index=instSrcCompat ? srcLoc.getActualIndex(srcIndices[i]) : destLoc.getActualIndex(destIndices[i]);    if (instance.isMissing(index)) {      continue;    }    Instances rel=instSrcCompat ? instance.relationalValue(index) : instance.relationalValue(index);    AttributeLocator srcRelAttsNew=srcLoc.getLocator(srcIndices[i]);    Instances srcDatasetNew=srcRelAttsNew.getData();    AttributeLocator destRelAttsNew=destLoc.getLocator(destIndices[i]);    Instances destDatasetNew=destRelAttsNew.getData();    for (int n=0; n < rel.numInstances(); n++) {      copyRelationalValues(rel.instance(n),instSrcCompat,srcDatasetNew,srcRelAttsNew,destDatasetNew,destRelAttsNew);    }  }}  }
class C{  public static <T>boolean contains(T[] array,T value){  return indexOf(array,value) != -1;}  }
class C{  public void clearChoices(){  if (mCheckedStates != null) {    mCheckedStates.clear();  }  if (mCheckedIdStates != null) {    mCheckedIdStates.clear();  }  mCheckedCount=0;  updateOnScreenCheckedViews();}  }
class C{  public void testWriteReadWrite() throws SAXException, ParserConfigurationException, IOException {  final String origFile=this.getClassInputDirectory() + "roadpricing1.xml";  final String tmpFile1=getOutputDirectory() + "roadpricing1.xml";  final String tmpFile2=getOutputDirectory() + "roadpricing2.xml";  final Id<Link> id1=Id.create(1,Link.class);  final Id<Link> id2=Id.create(2,Link.class);  final Id<Link> id3=Id.create(3,Link.class);  RoadPricingSchemeImpl scheme1=new RoadPricingSchemeImpl();  RoadPricingReaderXMLv1 reader1=new RoadPricingReaderXMLv1(scheme1);  reader1.readFile(origFile);  assertEquals("distance-toll-1",scheme1.getName());  assertEquals("distance toll for org.matsim.roadpricing.Fixture.createNetwork1().",scheme1.getDescription());  assertEquals(3,scheme1.getTolledLinkIds().size());  assertTrue(scheme1.getTolledLinkIds().contains(id1));  assertTrue(scheme1.getTolledLinkIds().contains(id2));  assertTrue(scheme1.getTolledLinkIds().contains(id3));  assertEquals(3,scheme1.getCostArray().length);  Iterator<RoadPricingSchemeImpl.Cost> costIter=scheme1.getTypicalCosts().iterator();  RoadPricingSchemeImpl.Cost cost=costIter.next();  assertEquals(6 * 3600.0,cost.startTime,EPSILON);  assertEquals(10 * 3600.0,cost.endTime,EPSILON);  assertEquals(0.00020,cost.amount,EPSILON);  cost=costIter.next();  assertEquals(10 * 3600.0,cost.startTime,EPSILON);  assertEquals(15 * 3600.0,cost.endTime,EPSILON);  assertEquals(0.00010,cost.amount,EPSILON);  cost=costIter.next();  assertEquals(15 * 3600.0,cost.startTime,EPSILON);  assertEquals(19 * 3600.0,cost.endTime,EPSILON);  assertEquals(0.00020,cost.amount,EPSILON);  assertFalse(costIter.hasNext());  assertTrue(scheme1.getTypicalCostsForLink().containsKey(id1));  assertNull(scheme1.getTypicalCostsForLink().get(id1));  assertTrue(scheme1.getTypicalCostsForLink().containsKey(id2));  assertNull(scheme1.getTypicalCostsForLink().get(id2));  assertTrue(scheme1.getTypicalCostsForLink().containsKey(id3));  assertNotNull(scheme1.getTypicalCostsForLink().get(id3));  RoadPricingWriterXMLv1 writer1=new RoadPricingWriterXMLv1(scheme1);  writer1.writeFile(tmpFile1);  assertTrue(new File(tmpFile1).length() > 0);  RoadPricingSchemeImpl scheme2=new RoadPricingSchemeImpl();  RoadPricingReaderXMLv1 reader2=new RoadPricingReaderXMLv1(scheme2);  reader2.readFile(tmpFile1);  RoadPricingWriterXMLv1 writer2=new RoadPricingWriterXMLv1(scheme2);  writer2.writeFile(tmpFile2);  long cksum1=CRCChecksum.getCRCFromFile(tmpFile1);  long cksum2=CRCChecksum.getCRCFromFile(tmpFile2);  assertEquals(cksum1,cksum2);}  }
class C{  public boolean checkCategory(@Nonnull final Notification notification){  return Objects.equals(this.notification.getCategory(),notification.getCategory());}  }
class C{  public boolean isSSO(){  String sso=getControllerSetting(BSS_USER_SSO);  return (sso != null) ? sso.equalsIgnoreCase("true") : false;}  }
class C{  public void addResolver(Resolver r){  resolvers.add(r);}  }
class C{  private void createPreferenceControls(Composite parent,Set<PreferenceId> preferenceSet,InputDefinition inputDefinition){  for (  PreferenceId preferenceIdEnum : preferenceSet) {    IPreferenceControl preferenceControl=PreferenceControlFactory.createPreferenceControls(parent,toolkit,preferenceIdEnum,this,inputDefinition);    if (null != preferenceControl) {      preferenceControlList.add(preferenceControl);    }  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:57.128 -0500",hash_original_method="A5E7BCD31AF83D3157F8D11FE9DEE1F1",hash_generated_method="B0989563A2859A21237FD768866FD7A4") private boolean readHeader() throws IOException {  if (consecutiveLineBreaks > 1) {    consecutiveLineBreaks=0;    return false;  }  readName();  consecutiveLineBreaks=0;  readValue();  return consecutiveLineBreaks > 0;}  }
class C{  public TextNode(final NetworkPanel netPanel,final NetworkTextObject text){  super(netPanel);  this.textObject=text;  pStyledText=new PStyledText();  pStyledText.setDocument(new DefaultStyledDocument());  this.addChild(pStyledText);  this.setBounds(pStyledText.getBounds());  addPropertyChangeListener(PROPERTY_FULL_BOUNDS,this);  update();}  }
class C{  private void drawSeriesTitles(Canvas canvas){  int[] titleDimensions=getTitleDimenions();  int lines=titleDimensions[0];  int lineHeight=titleDimensions[1];  int count=0;  for (int i=0; i < series.length; i++) {    ChartValueSeries chartValueSeries=series[i];    if (chartValueSeries.isEnabled() && chartValueSeries.hasData() || allowIfEmpty(i)) {      count++;      String title=getContext().getString(chartValueSeries.getTitleId(metricUnits));      Paint paint=chartValueSeries.getTitlePaint();      int x=(int)(0.5 * width) + getScrollX();      int y=topBorder - spacer - (lines - count) * (lineHeight + spacer);      canvas.drawText(title,x,y,paint);    }  }}  }
class C{  public void resetTimeout(AbstractMRMessage m){  return;}  }
class C{  private boolean containsNullValue(){  Entry[] tab=getTable();  for (int i=tab.length; i-- > 0; )   for (Entry e=tab[i]; e != null; e=e.next)   if (e.value == null)   return true;  return false;}  }
class C{  public void makeTreeOfWritables(Iterable<Pair<String,Integer>> flatData){  Text key=new Text();  for (  Pair<String,Integer> pair : flatData) {    key.set(pair.key);    ArrayList<IntWritable> valList;    if (!mockInput.containsKey(key)) {      valList=new ArrayList<>();      mockInput.put(key,valList);      key=new Text();    } else     valList=(ArrayList<IntWritable>)mockInput.get(key);    valList.add(new IntWritable(pair.value()));  }}  }
class C{  public void testRelease_ThrottleListener(){  ThrottleListener l=null;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.release(l);}  }
class C{  public void removeUnusableIndexConditions(){  for (int i=0; i < allFilters.length; i++) {    TableFilter f=allFilters[i];    setEvaluatable(f,true);    if (i < allFilters.length - 1 || f.getSession().getDatabase().getSettings().earlyFilter) {      f.optimizeFullCondition(false);    }    f.removeUnusableIndexConditions();  }  for (  TableFilter f : allFilters) {    setEvaluatable(f,false);  }}  }
class C{  public void configure(){  EasyDccTrafficController control=EasyDccTrafficController.instance();  control.connectPort(this);  this.getSystemConnectionMemo().setEasyDccTrafficController(control);  this.getSystemConnectionMemo().configureManagers();  jmri.jmrix.easydcc.ActiveFlag.setActive();}  }
class C{  public boolean isValid(){  return true;}  }
class C{  public TravelDistanceHandler(final double simulationEndTime,final int noOfTimeBins,final Network network,final String userGroup){  this(simulationEndTime,noOfTimeBins,network,null,userGroup);  LOGGER.info("Usergroup filtering is used, result will include all links but persons from given user group only.");  LOGGER.warn("User group will be identified for Munich scenario only, i.e. Urban, (Rev)Commuter and Freight.");}  }
class C{  public StextFactoryImpl(){  super();}  }
class C{  public XMLContent(Element content){  this.root=content;}  }
class C{  public boolean removeAll(Collection<?> c){  Objects.requireNonNull(c);  return batchRemove(c,false);}  }
class C{  public void actionPerformed(ActionEvent e){  super.actionPerformed(e);  if (Debug.debugging("labellayer")) {    System.out.println("LabelLayer.actionPerformed()");  }  repaint();}  }
class C{  @VisibleForTesting public Block createNextBlock(Address to,long time){  return createNextBlock(to,null,time,EMPTY_BYTES,Utils.toNanoCoins(50,0));}  }
class C{  public void handleDecode(String result,Bundle bundle){  mInactivityTimer.onActivity();  mBeepManager.playBeepSoundAndVibrate();  if (!CommonUtils.isEmpty(result) && CommonUtils.isUrl(result)) {    Intent intent=new Intent(Intent.ACTION_VIEW);    intent.setData(Uri.parse(result));    startActivity(intent);  } else {    bundle.putString(ResultActivity.BUNDLE_KEY_SCAN_RESULT,result);    readyGo(ResultActivity.class,bundle);  }}  }
class C{  public boolean isPermissionDeclined(@NonNull String permissionsName){  return ActivityCompat.checkSelfPermission(context,permissionsName) != PackageManager.PERMISSION_GRANTED;}  }
class C{  protected void fireActionPerformed(ActionEvent event){  Object[] listeners=listenerList.getListenerList();  ActionEvent e=null;  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == ActionListener.class) {      if (e == null) {        String actionCommand=event.getActionCommand();        if (actionCommand == null) {          actionCommand=getActionCommand();        }        e=new ActionEvent(AbstractButton.this,ActionEvent.ACTION_PERFORMED,actionCommand,event.getWhen(),event.getModifiers());      }      ((ActionListener)listeners[i + 1]).actionPerformed(e);    }  }}  }
class C{  public long blockStart(){  if (mDataPosition == mDataLength) {    return mBlockEndPos;  }  return mBlockStartPos;}  }
class C{  public void showSecondaryMenu(){  mSlidingMenu.showSecondaryMenu();}  }
class C{  public void testDoubleValuePositive1(){  String a="27467238945";  double result=2.7467238945E10;  double aNumber=new BigInteger(a).doubleValue();  assertTrue(aNumber == result);}  }
class C{  @Override public void visit(NodeVisitor v){  if (v.visit(this)) {    condition.visit(v);    thenPart.visit(v);    if (elsePart != null) {      elsePart.visit(v);    }  }}  }
class C{  public void error(SAXParseException exception) throws SAXException {  throw exception;}  }
class C{  public XZInputStream(InputStream in,int memoryLimit) throws IOException {  this.in=in;  this.memoryLimit=memoryLimit;  this.xzIn=new SingleXZInputStream(in,memoryLimit);}  }
class C{  private void requestReselection(){  Toast.makeText(this,"Mission load failure. Select again.",Toast.LENGTH_SHORT).show();  enableBackNavigation();}  }
class C{  public static byte[] padArray(byte[] array,byte value,int newLength){  int length=array.length;  int paddingLength=newLength - length;  if (paddingLength < 1) {    return array;  } else {    byte[] padding=new byte[paddingLength];    Arrays.fill(padding,value);    return concatenate(array,padding);  }}  }
class C{  protected IconOverlay(){  super();}  }
class C{  @Override protected Instances determineOutputFormat(Instances inputFormat) throws Exception {  Instances result;  int i;  result=getInputFormat();  for (i=0; i < getFilters().length; i++) {    if (!isFirstBatchDone()) {      getFilter(i).setInputFormat(result);    }    result=getFilter(i).getOutputFormat();  }  return result;}  }
class C{  public CustomTaskState(){}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  private void mergeForceCollapse(){  while (stackSize > 1) {    int n=stackSize - 2;    if (n > 0 && runLen[n - 1] < runLen[n + 1])     n--;    mergeAt(n);  }}  }
class C{  public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj instanceof ECFieldF2m) {    ECFieldF2m o=(ECFieldF2m)obj;    if (this.m == o.m) {      if (this.rp == null) {        if (o.rp == null) {          return true;        }      } else {        return Arrays.equals(this.ks,o.ks);      }    }  }  return false;}  }
class C{  public void connected(Context srcContext,Handler srcHandler,Messenger dstMessenger){  if (DBG)   log("connected srcHandler to the dstMessenger  E");  mSrcContext=srcContext;  mSrcHandler=srcHandler;  mSrcMessenger=new Messenger(mSrcHandler);  mDstMessenger=dstMessenger;  if (DBG)   log("connected srcHandler to the dstMessenger X");}  }
class C{  public static LongestPathFinder newInstanceOfAeroPath(int maxMP,IGame game){  LongestPathFinder lpf=new LongestPathFinder(new AeroMultiPathRelaxer(!game.getBoard().inSpace()),new NextStepsAdjacencyMap(MoveStepType.FORWARDS),new AeroMultiPathComparator(),game);  lpf.aero=true;  lpf.addFilter(new MovePathLengthFilter(maxMP));  lpf.addFilter(new MovePathLegalityFilter(game));  return lpf;}  }
class C{  public static String toHex(final byte[] bytes,final int offset,final int count){  if (offset >= bytes.length)   throw new IllegalArgumentException("Offset is greater than the length (" + offset + " >= "+ bytes.length+ ").");  final int byteCount=Math.min((bytes.length - offset),count);  final int upperBound=byteCount + offset;  final char[] chars=new char[byteCount * 2];  int charIndex=0;  for (int i=offset; i < upperBound; i++) {    final byte value=bytes[i];    chars[charIndex++]=HEX[(value >>> 4) & 0x0F];    chars[charIndex++]=HEX[value & 0x0F];  }  return new String(chars);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case GamlPackage.SKILL_REF__REF:    setRef((SkillFakeDefinition)null);  return;}super.eUnset(featureID);}  }
class C{  public static String prettyPrintClassifier(String classArgs){  String[] splittedArgs=classArgs.substring(1,classArgs.length() - 1).split(",");  String classifierName=splittedArgs[0];  String options=StringUtils.join(splittedArgs,"",1,splittedArgs.length);  return classifierName + options;}  }
class C{  public InputNode readElement(InputNode from,String name) throws Exception {  if (!stack.isRelevant(from)) {    return null;  }  EventNode event=reader.peek();  while (event != null) {    if (event.isText()) {      fillText(from);    } else     if (event.isEnd()) {      if (stack.top() == from) {        return null;      } else {        stack.pop();      }    } else     if (event.isStart()) {      if (isName(event,name)) {        return readElement(from);      }      break;    }    event=reader.next();    event=reader.peek();  }  return null;}  }
class C{  public CodeSearchEntry(){  super();  getCategories().add(CODESEARCH_CATEGORY);}  }
class C{  public <T extends View>T findViewByIdEfficient(int id){  return (T)findViewByIdEfficient(0,id);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static <T>T checkNotNull(T reference,String errorMessageTemplate,Object... errorMessageArgs){  if (reference == null) {    throw new NullPointerException(format(errorMessageTemplate,errorMessageArgs));  }  return reference;}  }
class C{  public LangSysRecord(RandomAccessFile raf) throws IOException {  tag=raf.readInt();  offset=raf.readUnsignedShort();}  }
class C{  public final ITypeBinding resolveBinding(){  return this.ast.getBindingResolver().resolveTypeParameter(this);}  }
class C{  protected static String LexicalError(boolean EOFSeen,int lexState,int errorLine,int errorColumn,String errorAfter,char curChar){  return ("Lexical error at line " + errorLine + ", column "+ errorColumn+ ".  Encountered: "+ (EOFSeen ? "<EOF> " : ("\"" + addEscapes(String.valueOf(curChar)) + "\"") + " (" + (int)curChar+ "), ")+ "after : \""+ addEscapes(errorAfter)+ "\"");}  }
class C{  public TransformW(double[] flatmatrix){  m00=flatmatrix[0];  m10=flatmatrix[1];  m01=flatmatrix[2];  m11=flatmatrix[3];  if (flatmatrix.length > 5) {    m02=flatmatrix[4];    m12=flatmatrix[5];  }  updateState();}  }
class C{  protected String[] staticCachedFiles(){  return null;}  }
class C{  @Override public boolean performDrop(Object data){  if (LOG.isDebugEnabled()) {    LOG.debug("performDrop...");  }  Object receiver=getCurrentTarget();  Object selectedData=null;  if (data == null) {    selectedData=((IStructuredSelection)this.getViewer().getSelection()).toArray();  } else {    selectedData=data;  }  for (  Object toDrop : DNDHelper.arrayToList(selectedData)) {    try {      GefaehrdungsUmsetzung parent=(GefaehrdungsUmsetzung)receiver;      RisikoMassnahmenUmsetzung child=(RisikoMassnahmenUmsetzung)toDrop;      List<IGefaehrdungsBaumElement> children=parent.getGefaehrdungsBaumChildren();      if (child instanceof RisikoMassnahmenUmsetzung && parent instanceof GefaehrdungsUmsetzung && !(children.contains(child))) {        AddMassnahmeToGefaherdung command=new AddMassnahmeToGefaherdung(parent,child);        command=ServiceFactory.lookupCommandService().executeCommand(command);        child=command.getChild();        parent.addChild(child);        viewer.refresh();        viewer.setExpandedState(parent,true);        return true;      } else {        return false;      }    } catch (    Exception e) {      ExceptionUtil.log(e,Messages.RisikoMassnahmenUmsetzungDropListener_0);      return false;    }  }  return false;}  }
class C{  public ClockEntry(ClockEntry other){  __isset_bitfield=other.__isset_bitfield;  this.nodeId=other.nodeId;  this.version=other.version;}  }
class C{  private void executeQueryTest(String[] queries,String indexedExpression,String regionPath) throws Exception {  ArrayList list=new ArrayList(queries.length);  for (  String query : queries) {    helpTestFunctionalIndexForQuery(query,indexedExpression,regionPath);  }}  }
class C{  public Matrix refresh(Matrix newMatrix,View chart,boolean invalidate){  mMatrixTouch.set(newMatrix);  limitTransAndScale(mMatrixTouch,mContentRect);  chart.invalidate();  newMatrix.set(mMatrixTouch);  return newMatrix;}  }
class C{  public void testSubmitCommand() throws Throwable {  Connection connection=mock(Connection.class);  when(connection.send(any(CommandRequest.class))).thenReturn(CompletableFuture.completedFuture(CommandResponse.builder().withStatus(Response.Status.OK).withIndex(10).withResult("Hello world!").build()));  ClientSessionState state=new ClientSessionState(UUID.randomUUID()).setSessionId(1).setState(Session.State.OPEN);  Executor executor=new MockExecutor();  ThreadContext context=mock(ThreadContext.class);  when(context.executor()).thenReturn(executor);  ClientSessionSubmitter submitter=new ClientSessionSubmitter(connection,state,new ClientSequencer(state),context);  assertEquals(submitter.submit(new TestCommand()).get(),"Hello world!");  assertEquals(state.getCommandRequest(),1);  assertEquals(state.getCommandResponse(),1);  assertEquals(state.getResponseIndex(),10);}  }
class C{  public boolean add(int e){  if (e < 0 || e >= has.length)   throw new IllegalArgumentException("Input must be in range [0, " + has.length + ") not "+ e); else   if (contains(e))   return false; else {    if (nnz == 0) {      first=e;      next[e]=prev[e]=STOP;    } else {      prev[first]=e;      next[e]=first;      prev[e]=STOP;      first=e;    }    nnz++;    return has[e]=true;  }}  }
class C{  public void shutdown(){  List<TcpSession> ls=new ArrayList<>(socks);  for (  TcpSession sess : ls) {    sess.close();  }}  }
class C{  public double put(double key,double value){  double previous=0;  int index=insertionIndex(key);  boolean isNewMapping=true;  if (index < 0) {    index=-index - 1;    previous=_values[index];    isNewMapping=false;  }  byte previousState=_states[index];  _set[index]=key;  _states[index]=FULL;  _values[index]=value;  if (isNewMapping) {    postInsertHook(previousState == FREE);  }  return previous;}  }
class C{  public HttpConnection(Socket client_socket,HttpServer server){  client=client_socket;  this.server=server;  InputStreamReader isr;  try {    isr=new InputStreamReader(client.getInputStream());    in=new BufferedReader(isr);    out=client.getOutputStream();  } catch (  IOException e) {    try {      close();    } catch (    IOException e2) {    }    System.err.println("Exception while getting socket streams: " + e);    return;  }}  }
class C{  public ASTRewriteCorrectionProposal(String name,ICompilationUnit cu,ASTRewrite rewrite,int relevance,Image image){  super(name,cu,relevance,image);  fRewrite=rewrite;}  }
class C{  @Modifying @Transactional public void addDiagnostic(Long chequeID,Diagnostic diagnostic){  diagnosticRepository.save(diagnostic.withDateTime());}  }
class C{  public void registerReceiver(BroadcastReceiver receiver,IntentFilter filter){synchronized (mReceivers) {    ReceiverRecord entry=new ReceiverRecord(filter,receiver);    ArrayList<IntentFilter> filters=mReceivers.get(receiver);    if (filters == null) {      filters=new ArrayList<IntentFilter>(1);      mReceivers.put(receiver,filters);    }    filters.add(filter);    for (int i=0; i < filter.countActions(); i++) {      String action=filter.getAction(i);      ArrayList<ReceiverRecord> entries=mActions.get(action);      if (entries == null) {        entries=new ArrayList<ReceiverRecord>(1);        mActions.put(action,entries);      }      entries.add(entry);    }  }}  }
class C{  private static void xstaticSetRandomGenerator(RandomEngine randomGenerator){synchronized (shared) {    shared.setRandomGenerator(randomGenerator);  }}  }
class C{  public static <T>Set<T> emptySet(final Set<T> set){  return (set != null ? set : Collections.<T>emptySet());}  }
class C{  public void move(java.awt.event.MouseEvent e){}  }
class C{  public long affinityFunctionInit(long memPtr,PlatformAffinityFunctionTarget baseFunc){  enter();  try {    return PlatformCallbackUtils.affinityFunctionInit(envPtr,memPtr,baseFunc);  }  finally {    leave();  }}  }
class C{  public void removeAttribute(String attName){  if (attName != null && !"".equals(attName.trim())) {    attributes.remove(attName.toLowerCase());  }}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  super.fixupVariables(vars,globalsSize);  if (null != m_args) {    for (int i=0; i < m_args.length; i++) {      m_args[i].fixupVariables(vars,globalsSize);    }  }}  }
class C{  public boolean isReadOnly(){  return transactionParams.hasArgument(TransactionParameterBuffer.READ);}  }
class C{  protected Object[] checkDistinctDistinctsAndOrderby(AggregateSource source){  boolean distinct=true;  List<OrderByExpression> ret=null;  ExpressionNode operand=null;  for (  AggregateFunctionExpression aggregate : source.getAggregates()) {    if (aggregate.isDistinct()) {      ExpressionNode other=aggregate.getOperand();      if (operand == null)       operand=other; else       if (!matchExpressionNode(operand,other))       throw new UnsupportedSQLException("More than one DISTINCT",other.getSQLsource());    }    List<OrderByExpression> cur=aggregate.getOrderBy();    if (ret == null)     ret=cur; else     if (cur != null && !cur.equals(ret))     throw new UnsupportedSQLException("Mix of ORDERY-BY ",aggregate.getSQLsource());  }  if (operand == null)   distinct=false; else   for (  AggregateFunctionExpression aggregate : source.getAggregates()) {    if (!aggregate.isDistinct()) {      ExpressionNode other=aggregate.getOperand();      if (!matchExpressionNode(operand,other))       throw new UnsupportedSQLException("Mix of DISTINCT and non-DISTINCT",operand.getSQLsource()); else       if (!distinctDoesNotMatter(aggregate.getFunction()))       throw new UnsupportedSQLException("Mix of DISTINCT and non-DISTINCT",other.getSQLsource());    }  }  if (ret != null && distinct)   throw new UnsupportedSQLException("Use of BOTH DISTINCT and ORDER-BY is not supported yet in" + source.getName());  return new Object[]{distinct,ret};}  }
class C{  protected boolean isNextCharacterEscapable(String nextLine,boolean inQuotes,int i){  return inQuotes && nextLine.length() > (i + 1) && isCharacterEscapable(nextLine.charAt(i + 1));}  }
class C{  void resetHierarchy(){  for (  DebugCounterImpl cur : this) {    cur.reset();  }}  }
class C{  void handleQuery(DNSIncoming in,InetAddress addr,int port) throws IOException {  if (logger.isLoggable(Level.FINE)) {    logger.fine(this.getName() + ".handle query: " + in);  }  boolean conflictDetected=false;  final long expirationTime=System.currentTimeMillis() + DNSConstants.KNOWN_ANSWER_TTL;  for (  DNSRecord answer : in.getAllAnswers()) {    conflictDetected|=answer.handleQuery(this,expirationTime);  }  this.ioLock();  try {    if (_plannedAnswer != null) {      _plannedAnswer.append(in);    } else {      DNSIncoming plannedAnswer=in.clone();      if (in.isTruncated()) {        _plannedAnswer=plannedAnswer;      }      this.startResponder(plannedAnswer,addr,port);    }  }  finally {    this.ioUnlock();  }  final long now=System.currentTimeMillis();  for (  DNSRecord answer : in.getAnswers()) {    this.handleRecord(answer,now);  }  if (conflictDetected) {    this.startProber();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:12.480 -0500",hash_original_method="129F7E351048C86B6490303416B23FF4",hash_generated_method="8A56BEE8B2FB9CBA199B3D2705E15405") public void send(byte[] data,InetAddress host) throws IOException {  send(data,data.length,host,DEFAULT_PORT);}  }
class C{  public boolean hasOption(String opt){  return options.contains(resolveOption(opt));}  }
class C{  public CommonsExtPropTestCase(){  super("CommonsExtPropTestCase");}  }
class C{  public void stop(){  _log.info("Stopping geosvc job queue");  _queue.stop(GeoServiceHelper.DEFAULT_MAX_WAIT_STOP);}  }
class C{  private void doLoad(HttpServletRequest request,ClassEditForm frm,Class_ c,String op){  String parentClassName="-";  Long parentClassId=null;  if (c.getParentClass() != null) {    parentClassName=c.getParentClass().toString();    if (sessionContext.hasPermission(c.getParentClass(),Right.ClassDetail))     parentClassId=c.getParentClass().getUniqueId();  }  CourseOffering cco=c.getSchedulingSubpart().getControllingCourseOffering();  InstructionalOfferingSearchAction.setLastInstructionalOffering(sessionContext,c.getSchedulingSubpart().getInstrOfferingConfig().getInstructionalOffering());  frm.setClassId(c.getUniqueId());  frm.setSection(c.getSectionNumberString());  frm.setClassName(c.getClassLabel());  SchedulingSubpart ss=c.getSchedulingSubpart();  String itypeDesc=c.getItypeDesc();  if (ss.getInstrOfferingConfig().getInstructionalOffering().hasMultipleConfigurations())   itypeDesc+=" [" + ss.getInstrOfferingConfig().getName() + "]";  frm.setItypeDesc(itypeDesc);  frm.setParentClassName(parentClassName);  frm.setParentClassId(parentClassId);  frm.setSubjectAreaId(cco.getSubjectArea().getUniqueId().toString());  frm.setInstrOfferingId(cco.getInstructionalOffering().getUniqueId().toString());  if (sessionContext.hasPermission(c.getSchedulingSubpart(),Right.SchedulingSubpartDetail))   frm.setSubpart(c.getSchedulingSubpart().getUniqueId()); else   frm.setSubpart(null);  frm.setCourseName(cco.getInstructionalOffering().getCourseName());  frm.setCourseTitle(cco.getTitle());  frm.setIsCrosslisted(new Boolean(cco.getInstructionalOffering().getCourseOfferings().size() > 1));  frm.setAccommodation(StudentAccomodation.toHtml(StudentAccomodation.getAccommodations(c)));  frm.setIsCancelled(c.isCancelled());  frm.setExpectedCapacity(c.getExpectedCapacity());  frm.setEnrollment(c.getEnrollment());  frm.setDatePattern(c.getDatePattern() == null ? new Long(-1) : c.getDatePattern().getUniqueId());  frm.setNbrRooms(c.getNbrRooms());  if (c.getNotes() == null)   frm.setNotes(""); else   frm.setNotes(c.getNotes().replaceAll("\n","<BR>"));  frm.setManagingDept(c.getManagingDept().getUniqueId());  frm.setManagingDeptLabel(c.getManagingDept().getManagingDeptLabel());  frm.setSchedulePrintNote(c.getSchedulePrintNote());  frm.setClassSuffix(c.getDivSecNumber());  frm.setMaxExpectedCapacity(c.getMaxExpectedCapacity());  frm.setRoomRatio(c.getRoomRatio());  frm.setEnabledForStudentScheduling(c.isEnabledForStudentScheduling());  frm.setDisplayInstructor(c.isDisplayInstructor());  frm.setMinRoomLimit(c.getMinRoomLimit());  Class_ next=c.getNextClass(sessionContext,Right.ClassDetail);  frm.setNextId(next == null ? null : next.getUniqueId().toString());  Class_ previous=c.getPreviousClass(sessionContext,Right.ClassDetail);  frm.setPreviousId(previous == null ? null : previous.getUniqueId().toString());  List instructors=new ArrayList(c.getClassInstructors());  InstructorComparator ic=new InstructorComparator();  ic.setCompareBy(ic.COMPARE_BY_LEAD);  Collections.sort(instructors,ic);  for (Iterator iter=instructors.iterator(); iter.hasNext(); ) {    ClassInstructor classInstr=(ClassInstructor)iter.next();    frm.addToInstructors(classInstr);  }  if (c.getNbrRooms().intValue() > 0) {    List<RoomLocation> roomLocations=TimetableDatabaseLoader.computeRoomLocations(c);    StringBuffer rooms=new StringBuffer();    if (roomLocations.isEmpty()) {      request.setAttribute(Location.AVAILABLE_LOCATIONS_ATTR,"<font color='red'><b>No rooms are available.</b></font>");    } else {      int idx=0;      for (      RoomLocation rl : roomLocations) {        if (idx > 0)         rooms.append(", ");        if (idx == 4)         rooms.append("<span id='room_dots' onMouseOver=\"this.style.cursor='hand';this.style.cursor='pointer';\" style='display:inline'><a onClick=\"document.getElementById('room_dots').style.display='none';document.getElementById('room_rest').style.display='inline';\">...</a></span><span id='room_rest' style='display:none'>");        rooms.append("<span style='color:" + PreferenceLevel.int2color(rl.getPreference()) + ";' "+ "onmouseover=\"showGwtRoomHint(this, '"+ rl.getId()+ "', '"+ PreferenceLevel.int2string(rl.getPreference())+ "');\" onmouseout=\"hideGwtRoomHint();\">"+ rl.getName()+ "</span>");        idx++;      }      if (idx >= 4)       rooms.append("</span>");      if (roomLocations.size() < c.getNbrRooms().intValue()) {        request.setAttribute(Location.AVAILABLE_LOCATIONS_ATTR,"<font color='red'><b>Not enough rooms are available:</b></font> " + rooms);      } else {        request.setAttribute(Location.AVAILABLE_LOCATIONS_ATTR,roomLocations.size() + " (" + rooms+ ")");      }    }  }}  }
class C{  private boolean looksLikeArrayInitializerIntro(){  nextToken();  if (fToken == Symbols.TokenEQUAL || skipBrackets()) {    return true;  }  return false;}  }
class C{  public GmlPoint(Double lat,Double lon){  this(new GmlPos(lat,lon));}  }
class C{  public void close() throws WikiApiException {  try {    this.revisionIndex.finalizeIndex();    this.chronoIndex.finalizeIndex();    info.setEndRevisionCount(lastRev.getRevisionCounter());    this.infoList.add(info);    this.articleIndex.add(currentArticleID,startTime,endTime,infoList);    this.articleIndex.finalizeIndex();    send();    this.indexWriter.finish();    if (connection != null) {      this.connection.close();    }  } catch (  SQLException sql) {    sql.printStackTrace();    throw new WikiApiException(sql);  }catch (  IOException sql) {    sql.printStackTrace();    throw new WikiApiException(sql);  }}  }
class C{  public static void main(String[] args){  TestRunner.run(MetadataTest.class);}  }
class C{  public void sequenceEvent(PublishRequest request,Runnable callback){  if (requestSequence == responseSequence) {    callback.run();    eventIndex=request.eventIndex();  } else {    eventCallbacks.add(new EventCallback(request,callback));    completeResponses();  }}  }
class C{  private BusinessObjectDefinition createBusinessObjectDefinitionFromEntity(BusinessObjectDefinitionEntity businessObjectDefinitionEntity){  BusinessObjectDefinition businessObjectDefinition=new BusinessObjectDefinition();  businessObjectDefinition.setId(businessObjectDefinitionEntity.getId());  businessObjectDefinition.setNamespace(businessObjectDefinitionEntity.getNamespace().getCode());  businessObjectDefinition.setBusinessObjectDefinitionName(businessObjectDefinitionEntity.getName());  businessObjectDefinition.setDescription(businessObjectDefinitionEntity.getDescription());  businessObjectDefinition.setDataProviderName(businessObjectDefinitionEntity.getDataProvider().getName());  businessObjectDefinition.setDisplayName(businessObjectDefinitionEntity.getDisplayName());  List<Attribute> attributes=new ArrayList<>();  businessObjectDefinition.setAttributes(attributes);  for (  BusinessObjectDefinitionAttributeEntity attributeEntity : businessObjectDefinitionEntity.getAttributes()) {    Attribute attribute=new Attribute();    attributes.add(attribute);    attribute.setName(attributeEntity.getName());    attribute.setValue(attributeEntity.getValue());  }  return businessObjectDefinition;}  }
class C{  public void addReadingListener(ReadingListener l){  if (!readingListeners.contains(l)) {    readingListeners.addElement(l);  }}  }
class C{  private static String normalisePath(String path){  return path.replace('\\','/');}  }
class C{  public StsdBox(RandomAccessFile fis,long pos){  this.fis=fis;  this.pos=pos;  findBoxAvcc();  findSPSandPPS();}  }
class C{  public boolean isEmpty(){  return events.size() == 0;}  }
class C{  public static Dog maxDog(Dog[] dogs){  Dog maxDog=dogs[0];  for (  Dog d : dogs) {    if (d.size > maxDog.size) {      maxDog=d;    }  }  return maxDog;}  }
class C{  public String randomSeedTipText(){  return "The seed used for random sampling.";}  }
class C{  public Collection<ApiProviderClass> exportsRemoteServicesFor(){  return this.exportsRemoteServicesFor;}  }
class C{  private void checkSearch(String inputGraph,String outputGraph){  Graph graph=GraphConverter.convert(inputGraph);  IndependenceTest independence=new IndTestDSep(graph);  Pcd pc=new Pcd(independence);  Graph resultGraph=pc.search();  Graph trueGraph=GraphConverter.convert(outputGraph);  resultGraph=GraphUtils.replaceNodes(resultGraph,trueGraph.getNodes());  assertTrue(resultGraph.equals(trueGraph));}  }
class C{  private BigInteger squareSum(){  BigInteger sum=Constants.BIGINT_ZERO;  for (int i=0; i < coeffs.length; i++) {    sum=sum.add(BigInteger.valueOf(coeffs[i] * coeffs[i]));  }  return sum;}  }
class C{  public static short max(short[] array){  if (array == null) {    throw new IllegalArgumentException("The Array must not be null");  } else   if (array.length == 0) {    throw new IllegalArgumentException("Array cannot be empty.");  }  short max=array[0];  for (int i=1; i < array.length; i++) {    if (array[i] > max) {      max=array[i];    }  }  return max;}  }
class C{  public static SendRequest forTx(Transaction tx){  SendRequest req=new SendRequest();  req.tx=tx;  return req;}  }
class C{  BoxPlotSeriesAttributes(ChartGenerator generator,String name,int index,double[][] values,SeriesChangeListener stoppable){  super(generator,name,index,stoppable);  setValues(values);  super.setSeriesName(name);}  }
class C{  public static boolean isLowerCase(char ch){  return false;}  }
class C{  final boolean complete(long timeoutMillis) throws InterruptedException, ExecutionException {  long totalWait=timeoutMillis;  if (totalWait <= 0)   totalWait=1000;synchronized (this) {    completer=Thread.currentThread();  }  final long start=System.currentTimeMillis();  try {    while ((System.currentTimeMillis() - start) < totalWait) {      if (Thread.interrupted())       throw new InterruptedException();      Throwable t=getLastError();      if (t != null) {        throw executionException(t);      }      if (!hasActiveTasks()) {        break;      }synchronized (completer) {        if (!completerNotify) {          try {            completer.wait(totalWait);          } catch (          InterruptedException e) {            if (!completerNotify) {              throw e;            }          }        }        completerNotify=false;      }    }  }  finally {synchronized (this) {      completer=null;    }  }  return ((System.currentTimeMillis() - start) < totalWait);}  }
class C{  public boolean isEmpty(){  return mMin == null;}  }
class C{  @SuppressWarnings("unchecked") static <T extends View>T findViewByIdSafe(View v,int resId){  View view=v.findViewById(resId);  if (view != null) {    try {      return (T)view;    } catch (    ClassCastException ex) {      String resName=getResourceName(v.getResources(),resId);      String message="View with id " + resName + " is of wrong type, see inner exception";      throw new IllegalStateException(message,ex);    }  }  String resName=getResourceName(v.getResources(),resId);  String message="There is no view with resource id" + resName + " in "+ Console.class;  throw new IllegalArgumentException(message);}  }
class C{  public Class<? extends XtextEditor> bindXtextEditor(){  return N4JSEditor.class;}  }
class C{  protected void writeString(String s) throws IOException {  for (int i=0; i < s.length(); i++) {    out.write((byte)s.charAt(i));  }}  }
class C{  private void present(){  glUseProgram(quadProgram);  glBindVertexArray(vao);  glBindTexture(GL_TEXTURE_2D,raytraceTexture);  glBindSampler(0,this.sampler);  glDrawArrays(GL_TRIANGLES,0,6);  glBindSampler(0,0);  glBindTexture(GL_TEXTURE_2D,0);  glBindVertexArray(0);  glUseProgram(0);}  }
class C{  private void createAvatarSelectDialog(){  FragmentManager fm=getSupportFragmentManager();  AvatarPickerDialogFragment avatarPickerDialog=new AvatarPickerDialogFragment();  avatarPickerDialog.show(fm,"avatar_picker");}  }
class C{  @Override protected void register(ContainerFactory containerFactory){  containerFactory.registerContainer("resin2x",ContainerType.INSTALLED,Resin2xInstalledLocalContainer.class);  containerFactory.registerContainer("resin3x",ContainerType.INSTALLED,Resin3xInstalledLocalContainer.class);  containerFactory.registerContainer("resin31x",ContainerType.INSTALLED,Resin31xInstalledLocalContainer.class);  containerFactory.registerContainer("resin4x",ContainerType.INSTALLED,Resin4xInstalledLocalContainer.class);}  }
class C{  public void init(SecureRandom random) throws IllegalArgumentException {}  }
class C{  public boolean shouldInvertColorOutput(){  boolean shouldInvertColorOutput=CLIArgumentParser.shouldInvertColorOutput();  if (!shouldInvertColorOutput && yamlConfiguration.isPresent() && !yamlConfiguration.get().getColor().isEmpty()) {    String option=yamlConfiguration.get().getColor();    validateColorOption(option);    if (option.equals(Messages.INVERT)) {      shouldInvertColorOutput=true;    }  }  return shouldInvertColorOutput;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public List<DiscoveryNode> connectedNodes(){  return nodesService.connectedNodes();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.073 -0400",hash_original_method="CEF9D34BF3086FDA40BC370A70DF5AD2",hash_generated_method="D60384CEF658CF51488D146FB7DCDC10") @Override public void close() throws IOException {  throw exception;}  }
class C{  public static byte[] toByteArray(InputStream input,int size) throws IOException {  if (size < 0) {    throw new IllegalArgumentException("Size must be equal or greater than zero: " + size);  }  if (size == 0) {    return new byte[0];  }  byte[] data=new byte[size];  int offset=0;  int readed;  while (offset < size && (readed=input.read(data,offset,size - offset)) != EOF) {    offset+=readed;  }  if (offset != size) {    throw new IOException("Unexpected readed size. current: " + offset + ", excepted: "+ size);  }  return data;}  }
class C{  public E poll(){  return removeAt(0);}  }
class C{  public DockNode(Node contents,String title){  this(contents,title,null);}  }
class C{  @Override public void alarm(DeployService2Impl<I> deploy,Result<I> result){  LifecycleState state=deploy.getState();  if (!state.isActive()) {    result.ok(deploy.get());  } else   if (deploy.isModifiedNow()) {    deploy.logModified(deploy.getLog());    deploy.restartImpl(result);  } else {    result.ok(deploy.get());  }}  }
class C{  public synchronized void removeIconsForPkg(String packageName,UserHandleCompat user){  removeFromMemCacheLocked(packageName,user);  long userSerial=mUserManager.getSerialNumberForUser(user);  mIconDb.delete(IconDB.COLUMN_COMPONENT + " LIKE ? AND " + IconDB.COLUMN_USER+ " = ?",new String[]{packageName + "/%",Long.toString(userSerial)});}  }
class C{  private IgniteUuidCache(){}  }
class C{  public void releaseAddressedProgrammer(AddressedProgrammer p){}  }
class C{  public GenericObjectEditorDialog(Dialog owner,String title){  super(owner,title);}  }
class C{  private int execAndReturnExitValue(String command){  String[] osArray={"sh","-c",command};  ProcessExecutor pe=new ProcessExecutor();  pe.setCommands(osArray);  if (logger.isDebugEnabled()) {    logger.debug("Executing OS command: " + command);  }  pe.run();  if (logger.isDebugEnabled()) {    logger.debug("OS command stdout: " + pe.getStdout());    logger.debug("OS command stderr: " + pe.getStderr());    logger.debug("OS command exit value: " + pe.getExitValue());  }  return pe.getExitValue();}  }
class C{  public Bag removeObjectsAtLocation(Int2D location){  return removeObjectsAtLocation(location.x,location.y);}  }
class C{  Enumeration values(){  return new Enumerator(this);}  }
class C{  public static String toString(long value){  return Long.toString(value);}  }
class C{  public static void updateMemberOffsets(final Connection connection,final List<Integer> members,final int delta,final List<Integer> implicitlyUpdatedMembers,final int implicitDelta,final INaviModule module) throws CouldntSaveDataException {  try {    final CallableStatement statement=connection.prepareCall("{ call update_member_offsets(?, ?, ?, ?, ?) }");    try {      statement.setInt(1,module.getConfiguration().getId());      statement.setArray(2,connection.createArrayOf("int4",members.toArray()));      statement.setInt(3,delta);      statement.setArray(4,connection.createArrayOf("int4",implicitlyUpdatedMembers.toArray()));      statement.setInt(5,implicitDelta);      statement.execute();    }  finally {      statement.close();    }  } catch (  final SQLException exception) {    throw new CouldntSaveDataException(exception);  }}  }
class C{  protected void fireStateChanged(){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == ChangeListener.class) {      if (changeEvent == null)       changeEvent=new ChangeEvent(this);      ((ChangeListener)listeners[i + 1]).stateChanged(changeEvent);    }  }}  }
class C{  public AuthenticationException(String message,String authHeader){  super(message);  initFromAuthHeader(authHeader);}  }
class C{  public void addRule(Rule rule){  backend.addRule(rule);}  }
class C{  private Prototype luaY_parser(InputStream z,String name) throws IOException {  LexState lexstate=new LexState(this,z);  FuncState funcstate=new FuncState();  lexstate.fs=funcstate;  lexstate.setinput(this,z.read(),z,(LuaString)LuaValue.valueOf(name));  funcstate.f=new Prototype();  funcstate.f.source=(LuaString)LuaValue.valueOf(name);  lexstate.mainfunc(funcstate);  LuaC._assert(funcstate.prev == null);  LuaC._assert(lexstate.dyd == null || (lexstate.dyd.n_actvar == 0 && lexstate.dyd.n_gt == 0 && lexstate.dyd.n_label == 0));  return funcstate.f;}  }
class C{  private int startFrame(final int offset,final int nLocal,final int nStack){  int n=3 + nLocal + nStack;  if (frame == null || frame.length < n) {    frame=new int[n];  }  frame[0]=offset;  frame[1]=nLocal;  frame[2]=nStack;  return 3;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeinsertbeforedocfragment.class,args);}  }
class C{  boolean requiresVarAssignment(){  return requiresVarAssignment;}  }
class C{  SegmentCheckParameters checkCol(int checkColumn){  this.checkColumn=checkColumn;  return this;}  }
class C{  private boolean containsIgnoreCase(List<String> stringlist,String match){  for (  String s : stringlist) {    if (s.equalsIgnoreCase(match)) {      return true;    }  }  return false;}  }
class C{  protected AsciiArray buildAsciiArray(){  return new DefaultAsciiArray().withFormatter(getFormatterMode());}  }
class C{  public ActionErrors validateForm(HttpServletRequest request,ConsultaUnidadesDocumentalesForm consultaUnidadesDocumentalesForm,ActionErrors errors){  if (!DisplayTagUtils.isPaginating(request) && !DisplayTagUtils.isSorting(request)) {    validateAmbitos(request,errors);    validateFechaEntrega(request,consultaUnidadesDocumentalesForm,errors);    validateFechaDevolucion(request,consultaUnidadesDocumentalesForm,errors);    validateTipoServicio(request,consultaUnidadesDocumentalesForm,errors);    if (StringUtils.isNotEmpty(consultaUnidadesDocumentalesForm.getFechaAIni()) && StringUtils.isNotEmpty(consultaUnidadesDocumentalesForm.getFechaAFin())) {      errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_FECHA_ENTREGA_Y_DEVOLUCION));    }  }  return errors;}  }
class C{  public PartitionSubstitutionModel parseMrBayesBlock(BeautiOptions options,List<CharSet> charSets) throws ImportException, IOException {  PartitionSubstitutionModel model=new PartitionSubstitutionModel(options,"nucs");  readTopLevelBlock(options,model,charSets);  return model;}  }
class C{  public JsonObjectRequest(String url,Listener<JSONObject> listener,ErrorListener errorListener){  super(Method.GET,url,null,listener,errorListener);}  }
class C{  public Node removeNamedItem(String name){  throw new DTMException(DTMException.NO_MODIFICATION_ALLOWED_ERR);}  }
class C{  public TemplatesHandler newTemplatesHandler() throws TransformerConfigurationException {  return new StylesheetHandler(this);}  }
class C{  public void processThreadWorkQueue(){  DualWorkQueue queues=threadWorkQueue.getThreadQueue();  if (queues.getFrontQueue().isEmpty()) {    boolean haveDispatched=unisolatedServices.getNamedWindowDispatchService().dispatch();    if (haveDispatched) {      dispatch();      if (!queues.getFrontQueue().isEmpty()) {        processThreadWorkQueueFront(queues);      }    }  } else {    processThreadWorkQueueFront(queues);  }  Object item;  while ((item=queues.getBackQueue().poll()) != null) {    if (item instanceof InsertIntoLatchSpin) {      processThreadWorkQueueLatchedSpin((InsertIntoLatchSpin)item);    } else     if (item instanceof InsertIntoLatchWait) {      processThreadWorkQueueLatchedWait((InsertIntoLatchWait)item);    } else {      processThreadWorkQueueUnlatched(item);    }    boolean haveDispatched=unisolatedServices.getNamedWindowDispatchService().dispatch();    if (haveDispatched) {      dispatch();    }    if (!queues.getFrontQueue().isEmpty()) {      processThreadWorkQueueFront(queues);    }  }}  }
class C{  public int hashCode(){  return ((location == null ? 0 : location.hashCode() << 24) ^ (groupID == null ? 0 : groupID.hashCode() << 16) ^ (className == null ? 0 : className.hashCode() << 9)^ (data == null ? 0 : data.hashCode() << 1)^ (restart ? 1 : 0));}  }
class C{  public boolean abort() throws LoginException {  roles=null;  name=null;  return true;}  }
class C{  @Inline(value=Inline.When.AssertionsDisabled) protected final void checkTailInsert(int arity){  if (bufferOffset(tail).isZero())   tailOverflow(arity); else   if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(bufferOffset(tail).sGE(Word.fromIntZeroExtend(arity).lsh(LOG_BYTES_IN_ADDRESS).toOffset()));}  }
class C{  public void parentAdded(SessionEvent event){  getSessionSupport().fireSessionEvent(event);  setSessionChanged(true);}  }
class C{  public Complex(double real,double imag){  this.real=real;  this.imag=imag;}  }
class C{  public static int color8888to5551(int color8888){  return ((color8888 >> 3) & 0x0000001F) | ((color8888 >> 6) & 0x000003E0) | ((color8888 >> 9) & 0x00007C00)| ((color8888 >> 16) & 0x00008000);}  }
class C{  public static boolean containIP(int cidrPrefix,int cidrMaskBits,int ip){  boolean matched=true;  int bitsToShift=32 - cidrMaskBits;  if (bitsToShift > 0) {    cidrPrefix=cidrPrefix >> bitsToShift;    ip=ip >> bitsToShift;    cidrPrefix=cidrPrefix << bitsToShift;    ip=ip << bitsToShift;  }  if (cidrPrefix != ip) {    matched=false;  }  return matched;}  }
class C{  public void initVelocimacro(){synchronized (this) {    setReplacementPermission(true);    setBlather(true);    logVMMessageInfo("Velocimacro : initialization starting.");    vmManager.setNamespaceUsage(false);    Object libfiles=rsvc.getProperty(RuntimeConstants.VM_LIBRARY);    if (libfiles != null) {      if (libfiles instanceof Vector) {        macroLibVec=(Vector)libfiles;      } else       if (libfiles instanceof String) {        macroLibVec=new Vector();        macroLibVec.addElement(libfiles);      }      for (int i=0; i < macroLibVec.size(); i++) {        String lib=(String)macroLibVec.elementAt(i);        if (lib != null && !lib.equals("")) {          vmManager.setRegisterFromLib(true);          logVMMessageInfo("Velocimacro : adding VMs from " + "VM library template : " + lib);          try {            Template template=rsvc.getTemplate(lib);            Twonk twonk=new Twonk();            twonk.template=template;            twonk.modificationTime=template.getLastModified();            libModMap.put(lib,twonk);          } catch (          Exception e) {            logVMMessageInfo("Velocimacro : error using  VM " + "library template " + lib + " : "+ e);          }          logVMMessageInfo("Velocimacro :  VM library template " + "macro registration complete.");          vmManager.setRegisterFromLib(false);        }      }    }    setAddMacroPermission(true);    if (!rsvc.getBoolean(RuntimeConstants.VM_PERM_ALLOW_INLINE,true)) {      setAddMacroPermission(false);      logVMMessageInfo("Velocimacro : allowInline = false : VMs can not " + "be defined inline in templates");    } else {      logVMMessageInfo("Velocimacro : allowInline = true : VMs can be " + "defined inline in templates");    }    setReplacementPermission(false);    if (rsvc.getBoolean(RuntimeConstants.VM_PERM_ALLOW_INLINE_REPLACE_GLOBAL,false)) {      setReplacementPermission(true);      logVMMessageInfo("Velocimacro : allowInlineToOverride = true : VMs " + "defined inline may replace previous VM definitions");    } else {      logVMMessageInfo("Velocimacro : allowInlineToOverride = false : VMs " + "defined inline may NOT replace previous VM definitions");    }    vmManager.setNamespaceUsage(true);    setTemplateLocalInline(rsvc.getBoolean(RuntimeConstants.VM_PERM_INLINE_LOCAL,false));    if (getTemplateLocalInline()) {      logVMMessageInfo("Velocimacro : allowInlineLocal = true : VMs " + "defined inline will be local to their defining template only.");    } else {      logVMMessageInfo("Velocimacro : allowInlineLocal = false : VMs " + "defined inline will be  global in scope if allowed.");    }    vmManager.setTemplateLocalInlineVM(getTemplateLocalInline());    setBlather(rsvc.getBoolean(RuntimeConstants.VM_MESSAGES_ON,true));    if (getBlather()) {      logVMMessageInfo("Velocimacro : messages on  : VM system " + "will output logging messages");    } else {      logVMMessageInfo("Velocimacro : messages off : VM system will be quiet");    }    setAutoload(rsvc.getBoolean(RuntimeConstants.VM_LIBRARY_AUTORELOAD,false));    if (getAutoload()) {      logVMMessageInfo("Velocimacro : autoload on  : VM system " + "will automatically reload global library macros");    } else {      logVMMessageInfo("Velocimacro : autoload off  : VM system " + "will not automatically reload global library macros");    }    rsvc.info("Velocimacro : initialization complete.");  }  return;}  }
class C{  public void savePerWalletModelData(WalletData perWalletModelData,boolean forceWrite){  if (perWalletModelData == null || perWalletModelData.getWalletFilename() == null) {    return;  }  File walletFile=new File(perWalletModelData.getWalletFilename());  WalletInfoData walletInfo=perWalletModelData.getWalletInfo();  if (walletInfo != null) {synchronized (walletInfo) {      if (perWalletModelData.isDirty() || forceWrite) {        boolean filesHaveChanged=haveFilesChanged(perWalletModelData);        if (!filesHaveChanged || forceWrite) {          String walletInfoFilename=WalletInfoData.createWalletInfoFilename(perWalletModelData.getWalletFilename());          saveWalletAndWalletInfo(perWalletModelData,perWalletModelData.getWalletFilename(),walletInfoFilename);          rememberFileSizesAndLastModified(walletFile,walletInfo);          perWalletModelData.setDirty(false);        } else {          BackupManager.INSTANCE.backupPerWalletModelData(this,perWalletModelData);        }      }    }  }  return;}  }
class C{  public static boolean sendEmail(String address,String subject,String body){  return sendEmail(ImmutableList.of(address),subject,body);}  }
class C{  @Override public void sendErrorStatus(String errorStatus) throws IOException {  ObjectNode root=this.mapper.createObjectNode();  root.put(TYPE,ERROR);  ObjectNode data=root.putObject(ERROR);  data.put(CODE,-1);  data.put(MESSAGE,errorStatus);  this.connection.sendMessage(this.mapper.writeValueAsString(root));}  }
class C{  private static int partition(final long[] arr,final int lo,final int hi){  int i=lo, j=hi + 1;  long v=arr[lo];  while (true) {    while (arr[++i] < v) {      if (i == hi) {        break;      }    }    while (v < arr[--j]) {      if (j == lo) {        break;      }    }    if (i >= j) {      break;    }    long x=arr[i];    arr[i]=arr[j];    arr[j]=x;  }  long x=arr[lo];  arr[lo]=arr[j];  arr[j]=x;  return j;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return ERROR_CODE;case 2:  return MESSAGE;default :return null;}}  }
class C{  public boolean isPriceModelFree(){  VOPriceModel priceModel=getPriceModel();  if (priceModel == null) {    return true;  }  return !priceModel.isChargeable();}  }
class C{  protected void onPrepareRequest(HttpUriRequest request) throws IOException {}  }
class C{  public DNetscapeCertificateRenewalUrl(JDialog parent){  super(parent);  setTitle(res.getString("DNetscapeCertificateRenewalUrl.Title"));  initComponents();}  }
class C{  public Boolean isApprovalLimitReachedForWO(final Long woId){  Boolean result=false;  final WorkOrder wo=findById(woId,false);  if (measurementBookService.getWorkOrderEstimatesForMB(wo.getWorkOrderEstimates()).isEmpty())   result=true;  return result;}  }
class C{  private boolean checkCMSKeyChecksum(byte[] key,byte[] checksum){  return Arrays.constantTimeAreEqual(calculateCMSKeyChecksum(key),checksum);}  }
class C{  public static void writeAttributeSet(ObjectOutputStream out,AttributeSet a) throws IOException {  int n=a.getAttributeCount();  out.writeInt(n);  Enumeration keys=a.getAttributeNames();  while (keys.hasMoreElements()) {    Object key=keys.nextElement();    if (key instanceof Serializable) {      out.writeObject(key);    } else {      Object ioFmt=freezeKeyMap.get(key);      if (ioFmt == null) {        throw new NotSerializableException(key.getClass().getName() + " is not serializable as a key in an AttributeSet");      }      out.writeObject(ioFmt);    }    Object value=a.getAttribute(key);    Object ioFmt=freezeKeyMap.get(value);    if (value instanceof Serializable) {      out.writeObject((ioFmt != null) ? ioFmt : value);    } else {      if (ioFmt == null) {        throw new NotSerializableException(value.getClass().getName() + " is not serializable as a value in an AttributeSet");      }      out.writeObject(ioFmt);    }  }}  }
class C{  public int defineChannelName(String name,int value){  Integer prev=channelNameToValueMap.get(name);  if (prev != null) {    return prev;  }  channelNameToValueMap.put(name,value);  setChannelNameForValue(value,name);  maxChannelType=Math.max(maxChannelType,value);  return value;}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  private static Color jointToColor(Joint joint){switch (joint.getType()) {case RevoluteJoint:case PrismaticJoint:case DistanceJoint:case PulleyJoint:case MouseJoint:case GearJoint:case WeldJoint:case FrictionJoint:    return Color.WHITE;case Unknown:default :  return Color.WHITE;}}  }
class C{  @CanIgnoreReturnValue public E removeLast(){  if (isEmpty()) {    throw new NoSuchElementException();  }  return removeAndGet(getMaxElementIndex());}  }
class C{  private <T extends Comparable<T>>List<T> sorted(Collection<T> col){  List<T> list=new ArrayList<>(col);  Collections.sort(list);  return list;}  }
class C{  public Logging logging(){  return logging;}  }
class C{  public void addToDamaged(final Collection<Unit> damagedUnits){  m_damaged.addAll(damagedUnits);}  }
class C{  public String unarchiveAddress(String address) throws APIException, IOException {  Map<String,String> params=buildBasicRequest();  params.put("address",address);  String response=HttpClient.getInstance().post(String.format("merchant/%s/unarchive_address",identifier),params);  JsonObject topElem=parseResponse(response);  return topElem.get("active").getAsString();}  }
class C{  public boolean indicesHaveDeleteMarkers(){  return getPrimaryIndex().getIndexMetadata().getDeleteMarkers();}  }
class C{  private static Set<AnnotationMirror> findAllSupers(AnnotationMirror anno,Map<AnnotationMirror,Set<AnnotationMirror>> supertypes,Map<AnnotationMirror,Set<AnnotationMirror>> allSupersSoFar){  Set<AnnotationMirror> supers=AnnotationUtils.createAnnotationSet();  for (  AnnotationMirror superAnno : supertypes.get(anno)) {    supers.add(superAnno);    supers.addAll(findAllSupers(superAnno,supertypes,allSupersSoFar));  }  allSupersSoFar.put(anno,Collections.unmodifiableSet(supers));  return supers;}  }
class C{  public AudioTrack(){  this(null,AudioManager.STREAM_MUSIC);}  }
class C{  private boolean test(){  int value=getWheel(R.id.slot_1).getCurrentItem();  return testWheelValue(R.id.slot_2,value) && testWheelValue(R.id.slot_3,value);}  }
class C{  protected double subspaceDensity(long[] subspace,DoubleDBIDList neighbors){  final double bandwidth=optimalBandwidth(BitsUtil.cardinality(subspace));  double density=0;  for (DoubleDBIDListIter neighbor=neighbors.iter(); neighbor.valid(); neighbor.advance()) {    double v=neighbor.doubleValue() / bandwidth;    if (v < 1) {      density+=1 - (v * v);    }  }  return density / relation.size();}  }
class C{  public String toString(){  return new String(_buffer,_offset,_length);}  }
class C{  public EfficientTerminalSet empty(){  return new EfficientTerminalSet(terminals,indices,new int[data.length]);}  }
class C{  public void enablePan(BluetoothAdapter adapter){  if (mPan == null)   mPan=(BluetoothPan)connectProxy(adapter,BluetoothProfile.PAN);  assertNotNull(mPan);  long start=System.currentTimeMillis();  mPan.setBluetoothTethering(true);  long stop=System.currentTimeMillis();  assertTrue(mPan.isTetheringOn());  writeOutput(String.format("enablePan() completed in %d ms",(stop - start)));}  }
class C{  @Override public void notifyChange(Uri uri,IContentObserver observer,boolean observerWantsSelfNotifications,boolean syncToNetwork,int userHandle){  if (Log.isLoggable(TAG,Log.VERBOSE)) {    Log.v(TAG,"Notifying update of " + uri + " for user "+ userHandle+ " from observer "+ observer+ ", syncToNetwork "+ syncToNetwork);  }  final int callingUserHandle=UserHandle.getCallingUserId();  if (userHandle != callingUserHandle) {    mContext.enforceCallingOrSelfPermission(Manifest.permission.INTERACT_ACROSS_USERS_FULL,"no permission to notify other users");  }  if (userHandle < 0) {    if (userHandle == UserHandle.USER_CURRENT) {      userHandle=ActivityManager.getCurrentUser();    } else     if (userHandle != UserHandle.USER_ALL) {      throw new InvalidParameterException("Bad user handle for notifyChange: " + userHandle);    }  }  final int uid=Binder.getCallingUid();  long identityToken=clearCallingIdentity();  try {    ArrayList<ObserverCall> calls=new ArrayList<ObserverCall>();synchronized (mRootNode) {      mRootNode.collectObserversLocked(uri,0,observer,observerWantsSelfNotifications,userHandle,calls);    }    final int numCalls=calls.size();    for (int i=0; i < numCalls; i++) {      ObserverCall oc=calls.get(i);      try {        oc.mObserver.onChange(oc.mSelfChange,uri);        if (Log.isLoggable(TAG,Log.VERBOSE)) {          Log.v(TAG,"Notified " + oc.mObserver + " of "+ "update at "+ uri);        }      } catch (      RemoteException ex) {synchronized (mRootNode) {          Log.w(TAG,"Found dead observer, removing");          IBinder binder=oc.mObserver.asBinder();          final ArrayList<ObserverNode.ObserverEntry> list=oc.mNode.mObservers;          int numList=list.size();          for (int j=0; j < numList; j++) {            ObserverNode.ObserverEntry oe=list.get(j);            if (oe.observer.asBinder() == binder) {              list.remove(j);              j--;              numList--;            }          }        }      }    }    if (syncToNetwork) {      SyncManager syncManager=getSyncManager();      if (syncManager != null) {        syncManager.scheduleLocalSync(null,callingUserHandle,uid,uri.getAuthority());      }    }  }  finally {    restoreCallingIdentity(identityToken);  }}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  public void addDragSourceListener(DragSourceListener dsl){  if (dsl != null) {synchronized (this) {      listener=DnDEventMulticaster.add(listener,dsl);    }  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void assertDefaultCipherSuites(String[] cipherSuites){  assertValidCipherSuites(CIPHER_SUITES,cipherSuites);  assertEquals(CIPHER_SUITES_DEFAULT,Arrays.asList(cipherSuites));}  }
class C{  public Boolean isHod(final Long assignId){  final List<HeadOfDepartments> hodList=employeeDepartmentRepository.getAllHodDepartments(assignId);  return !hodList.isEmpty();}  }
class C{  public void addGumball(float x,float y,Gumball gumball,float density,float radius,float bounce,float friction,BodyType bodyType){  CircleShape circleShape=new CircleShape();  circleShape.m_radius=radius;  addItem(x,y,circleShape,bounce,gumball,density,friction,bodyType);}  }
class C{  @Override public void close(){  super.close();  m_nvmasvc.close(m_nid);}  }
class C{  public static void serialize(Writable writable,Writer w){  serialize(asString(writable),w);}  }
class C{  public MessagingFraction defaultServer(){  findOrCreateDefaultServer();  return this;}  }
class C{  public void checkAndHandleFirstVisibleCellChange(){  if (mCurrentFirstVisibleItem != mPreviousFirstVisibleItem) {    if (mCellIsMobile && mMobileItemId != INVALID_ID) {      handleCellSwitch();    }  }}  }
class C{  public void accept(final ClassVisitor cv){  FieldVisitor fv=cv.visitField(access,name,desc,signature,value);  if (fv == null) {    return;  }  int i, n;  n=visibleAnnotations == null ? 0 : visibleAnnotations.size();  for (i=0; i < n; ++i) {    AnnotationNode an=visibleAnnotations.get(i);    an.accept(fv.visitAnnotation(an.desc,true));  }  n=invisibleAnnotations == null ? 0 : invisibleAnnotations.size();  for (i=0; i < n; ++i) {    AnnotationNode an=invisibleAnnotations.get(i);    an.accept(fv.visitAnnotation(an.desc,false));  }  n=visibleTypeAnnotations == null ? 0 : visibleTypeAnnotations.size();  for (i=0; i < n; ++i) {    TypeAnnotationNode an=visibleTypeAnnotations.get(i);    an.accept(fv.visitTypeAnnotation(an.typeRef,an.typePath,an.desc,true));  }  n=invisibleTypeAnnotations == null ? 0 : invisibleTypeAnnotations.size();  for (i=0; i < n; ++i) {    TypeAnnotationNode an=invisibleTypeAnnotations.get(i);    an.accept(fv.visitTypeAnnotation(an.typeRef,an.typePath,an.desc,false));  }  n=attrs == null ? 0 : attrs.size();  for (i=0; i < n; ++i) {    fv.visitAttribute(attrs.get(i));  }  fv.visitEnd();}  }
class C{  public void clearHistory(){  Display.impl.browserClearHistory(internal);}  }
class C{  public short[][] action_table(){  return _action_table;}  }
class C{  public static int lengthAsUtf8(char[] chars){  int i, b;  char c;  for (i=b=chars.length; --i >= 0; )   if ((c=chars[i]) >= 0x80)   b+=(c >= 0x800) ? 2 : 1;  return b;}  }
class C{  public static void assertGreaterThan(long great,long small){  assertGreaterThan(great,small,"");}  }
class C{  public void addVideoSharingInvitationNotification(Intent invitation,VideoSharingDAO vshDao){  if (vshDao.getContact() == null) {    if (LogUtils.isActive) {      Log.e(LOGTAG,"VideoSharingInvitationReceiver failed: cannot parse contact");    }    return;  }  Intent intent=new Intent(invitation);  intent.setClass(this,IncomingVideoSharing.class);  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  int uniqueId=Utils.getUniqueIdForPendingIntent();  PendingIntent contentIntent=PendingIntent.getActivity(this,uniqueId,intent,PendingIntent.FLAG_ONE_SHOT);  String displayName=RcsContactUtil.getInstance(this).getDisplayName(vshDao.getContact());  String notifTitle=getString(R.string.title_recv_video_sharing);  NotificationCompat.Builder notif=new NotificationCompat.Builder(this);  notif.setContentIntent(contentIntent);  notif.setSmallIcon(R.drawable.ri_notif_csh_icon);  notif.setWhen(System.currentTimeMillis());  notif.setAutoCancel(true);  notif.setOnlyAlertOnce(true);  notif.setSound(RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION));  notif.setDefaults(Notification.DEFAULT_VIBRATE);  notif.setContentTitle(notifTitle);  notif.setContentText(getString(R.string.label_from_args,displayName));  NotificationManager notificationManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);  notificationManager.notify(uniqueId,notif.build());}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case MappingPackage.ENUM_PROPERTY_SOURCE__PROPERTY:    return property != null;}return super.eIsSet(featureID);}  }
class C{  private void spread(int targetSpan,int span[]){  if (targetSpan == 0) {    return;  }  int tempSpace=0;  int remainingSpace=targetSpan;  for (int i=0; i < span.length; i++) {    if (absoluteChildren[i] > 0) {      span[i]=absoluteChildren[i];      remainingSpace-=span[i];    }  }  tempSpace=remainingSpace;  for (int i=0; i < span.length; i++) {    if (percentChildren[i] > 0 && tempSpace > 0) {      span[i]=(percentChildren[i] * tempSpace) / 100;      remainingSpace-=span[i];    } else     if (percentChildren[i] > 0 && tempSpace <= 0) {      span[i]=targetSpan / span.length;      remainingSpace-=span[i];    }  }  if (remainingSpace > 0 && relativeTotals > 0) {    for (int i=0; i < span.length; i++) {      if (relativeChildren[i] > 0) {        span[i]=(remainingSpace * relativeChildren[i]) / relativeTotals;      }    }  } else   if (remainingSpace > 0) {    float vTotal=(float)(targetSpan - remainingSpace);    float[] tempPercents=new float[span.length];    remainingSpace=targetSpan;    for (int i=0; i < span.length; i++) {      tempPercents[i]=((float)span[i] / vTotal) * 100.00f;      span[i]=(int)(((float)targetSpan * tempPercents[i]) / 100.00f);      remainingSpace-=span[i];    }    int i=0;    while (remainingSpace != 0) {      if (remainingSpace < 0) {        span[i++]--;        remainingSpace++;      } else {        span[i++]++;        remainingSpace--;      }      if (i == span.length)       i=0;    }  }}  }
class C{  public void checkQueueState(){  LOGGER.debug("checkQueueState - Check the state of the local queue depending on the tier we are in ");  int unfinishedJobs=statsUtil.getUnfinishedJobs();  LOGGER.debug("checkQueueState - maxUnfinishedJobs: " + maxUnfinishedJobs + ",  unfinishedJobs: "+ unfinishedJobs);  if (jobCount == 4) {    LOGGER.info("checkQueueState - First 4 jobs : maxUnfinishedJobs: " + maxUnfinishedJobs + ",  unfinishedJobs: "+ unfinishedJobs);    long now=System.currentTimeMillis();    if ((now - timeFirstMessageReceived) < 10 * 1000) {      final long expectedSynchTime=statsUtil.getCurrentMasterClockTime() + (25 * 1000);      final long waitMasterSyncTime=expectedSynchTime - now;      if (waitMasterSyncTime > 0) {        try {          LOGGER.debug("First 4 messages ... ");          Utilities.verboseLog("Master clock sync: wake up at " + expectedSynchTime + " i.e. in "+ waitMasterSyncTime+ " millis");          Thread.sleep(waitMasterSyncTime);        } catch (        InterruptedException e) {          e.printStackTrace();        }      }    }  }  if (statsUtil.isStopRemoteQueueJmsContainer()) {    LOGGER.debug("checkQueueState : isStopRemoteQueueJmsContainer = true");    return;  } else {    boolean stopRemoteQueue=false;    if ((jobCount % (maxUnfinishedJobs / (Math.pow(2,statsUtil.getTier() - 1))) == 0)) {      statsUtil.updateStatsUtilJobCounts();      unfinishedJobs=statsUtil.getUnfinishedJobs();    }switch (statsUtil.getTier()) {case 1:      if (unfinishedJobs > maxUnfinishedJobs) {        stopRemoteQueue=true;      }    break;case 2:  if (unfinishedJobs > maxUnfinishedJobs / 2) {    stopRemoteQueue=true;  }break;default :if (unfinishedJobs > maxUnfinishedJobs / (Math.pow(2,statsUtil.getTier()))) {stopRemoteQueue=true;}}if (stopRemoteQueue) {LOGGER.debug("checkQueueState - Disable remote listener ");statsUtil.setStopRemoteQueueJmsContainer(true);try {Thread.sleep(15 * 1000);} catch (InterruptedException e) {e.printStackTrace();}}}}  }
class C{  public void dragOver(DragSourceDragEvent dsde){  ((DragSourceListener)a).dragOver(dsde);  ((DragSourceListener)b).dragOver(dsde);}  }
class C{  @Override public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  process(request,response);}  }
class C{  public void addStateHistoryEntry(double time,double allocatedMips,double requestedMips,boolean isActive){  HostStateHistoryEntry newState=new HostStateHistoryEntry(time,allocatedMips,requestedMips,isActive);  if (!getStateHistory().isEmpty()) {    HostStateHistoryEntry previousState=getStateHistory().get(getStateHistory().size() - 1);    if (previousState.getTime() == time) {      getStateHistory().set(getStateHistory().size() - 1,newState);      return;    }  }  getStateHistory().add(newState);}  }
class C{  public PickAnyArgumentHint(final int parameterIndex,final int genericTypeIndex){  this.parameterIndex=parameterIndex;  this.genericTypeIndex=genericTypeIndex;}  }
class C{  public InternalFunctionInvocationTargetException(Throwable cause){  super(cause);}  }
class C{  public NedFrame(NedFrame nedpt){  x=nedpt.x;  y=nedpt.y;  z=nedpt.z;}  }
class C{  public static Uri toUri(JsonElement el){  return new Uri.Builder().scheme(JSON_SCHEME).appendPath(immutable(el).toString()).build();}  }
class C{  public Country(String value){  this();  setValue(value);}  }
class C{  private Set<CIMObjectPath> enumerateSubscriptions() throws WBEMException, ConnectionManagerException {  CIMInstance subscription;  CIMProperty<?> property;  CIMObjectPath subscriptionHandlerPath;  Object subscriptionHandlerName;  Set<CIMObjectPath> subscriptionSet=new HashSet<CIMObjectPath>();  WBEMClient cimClient=_connection.getCimClient();  String interopNS=_connection.getInteropNamespace();  CIMObjectPath subscriptionPath=CimObjectPathCreator.createInstance(CimConstants.CIM_SUBSCRIPTION_NAME,interopNS);  CloseableIterator<CIMInstance> subscriptionIter=null;  try {    subscriptionIter=cimClient.enumerateInstances(subscriptionPath,true,true,false,null);    while (subscriptionIter.hasNext()) {      subscription=subscriptionIter.next();      property=subscription.getProperty(CimConstants.SUBSCRIPTION_PROP_HANDLER);      subscriptionHandlerPath=(CIMObjectPath)property.getValue();      subscriptionHandlerName=subscriptionHandlerPath.getKey(CimConstants.NAME_KEY).getValue();      if (subscriptionHandlerName.equals(getHandler().getKey(CimConstants.NAME_KEY).getValue())) {        subscriptionPath=subscription.getObjectPath();        s_logger.debug("Found: {}",subscriptionPath);        subscriptionSet.add(subscriptionPath);      }    }  }  finally {    if (subscriptionIter != null) {      subscriptionIter.close();    }  }  return subscriptionSet;}  }
class C{  private boolean traverse(Tree tree,NodeRef node,int[] operatorNumber,boolean flip){  boolean update=false;  int nodeNum=node.getNumber();  NodeRef parent=tree.getParent(node);  if (operatorNumber != null) {    operatorNumber[0]=-1;  }  if (parent != null && updateNode[nodeNum]) {    final double branchRate=branchRateModel.getBranchRate(tree,node);    final double parentHeight=tree.getNodeHeight(parent);    final double nodeHeight=tree.getNodeHeight(node);    final double branchLength=branchRate * (parentHeight - nodeHeight);    if (branchLength < 0.0) {      throw new RuntimeException("Negative branch length: " + branchLength);    }    if (flip) {      for (      SubstitutionModelDelegate substitutionModelDelegate : substitutionModelDelegates) {        substitutionModelDelegate.flipMatrixBuffer(nodeNum);      }    }    branchUpdateIndices[branchUpdateCount]=nodeNum;    branchLengths[branchUpdateCount]=branchLength;    branchUpdateCount++;    update=true;  }  if (!tree.isExternal(node)) {    NodeRef child1=tree.getChild(node,0);    final int[] op1={-1};    final boolean update1=traverse(tree,child1,op1,flip);    NodeRef child2=tree.getChild(node,1);    final int[] op2={-1};    final boolean update2=traverse(tree,child2,op2,flip);    if (update1 || update2) {      int x=operationCount[operationListCount] * Beagle.OPERATION_TUPLE_SIZE;      if (flip) {        partialBufferHelper.flipOffset(nodeNum);      }      final int[] operations=this.operations[operationListCount];      operations[x]=partialBufferHelper.getOffsetIndex(nodeNum);      if (useScaleFactors) {        int n=nodeNum - tipCount;        if (recomputeScaleFactors) {          scaleBufferHelper.flipOffset(n);          scaleBufferIndices[n]=scaleBufferHelper.getOffsetIndex(n);          operations[x + 1]=scaleBufferIndices[n];          operations[x + 2]=Beagle.NONE;        } else {          operations[x + 1]=Beagle.NONE;          operations[x + 2]=scaleBufferIndices[n];        }      } else {        if (useAutoScaling) {          scaleBufferIndices[nodeNum - tipCount]=partialBufferHelper.getOffsetIndex(nodeNum);        }        operations[x + 1]=Beagle.NONE;        operations[x + 2]=Beagle.NONE;      }      operations[x + 3]=partialBufferHelper.getOffsetIndex(child1.getNumber());      operations[x + 5]=partialBufferHelper.getOffsetIndex(child2.getNumber());      operationCount[operationListCount]++;      update=true;      if (hasRestrictedPartials) {        if (updateRestrictedNodePartials) {          computeNodeToRestrictionMap();          updateRestrictedNodePartials=false;        }        if (partialsMap[nodeNum] != null) {        }      }    }  }  return update;}  }
class C{  public final boolean isPrivate(){  return Modifier.isPrivate(getModifiers());}  }
class C{  public Map<PlotDimension,double[]> initDataForUsageType(SeriesUsageType usageType,Iterable<PlotDimension> dimensions,int valueCount){  Map<PlotDimension,double[]> data=new HashMap<DimensionConfig.PlotDimension,double[]>();  for (  PlotDimension dimension : dimensions) {    data.put(dimension,new double[valueCount]);  }  setDataForUsageType(usageType,data);  return data;}  }
class C{  @Transactional @Caching(evict={@CacheEvict(value="network_download_count",key="#user.id"),@CacheEvict(value="network_download_size",key="#user.id")}) public void createDownloadUsage(final Long size,final Date start_date,final User user){  if (size == null || size < 0 || start_date == null || user == null) {    throw new IllegalArgumentException("Invalid parameters");  }  NetworkUsage download_usage=new NetworkUsage();  download_usage.setSize(size);  download_usage.setDate(start_date);  download_usage.setUser(user);  download_usage.setIsDownload(true);  networkUsageDao.create(download_usage);}  }
class C{  @Override protected void processFile(String ext,File outDir,serverObjects post,Map<String,Throwable> failures,File inFile) throws IOException {  System.out.println("Measuring  render with file : " + inFile.getAbsolutePath() + " encoded To : "+ ext);  File outFile=new File(outDir,inFile.getName() + "." + ext);  if (outFile.exists()) {    outFile.delete();  }  String urlString=inFile.getAbsolutePath();  EncodedImage img=null;  Exception error=null;  long beginTime=System.nanoTime(), time, minTime=Long.MAX_VALUE, maxTime=0, meanTime=0, totalTime=0;  int step=0;  for (step=0; (totalTime / 1000000000) < this.minMeasureTime; step++) {    beginTime=System.nanoTime();    ImageInputStream inStream=ImageIO.createImageInputStream(inFile);    try {      img=this.VIEWER.parseAndScale(post,true,new DigestURL(urlString),ext,inStream);    } catch (    Exception e) {      error=e;    }    time=System.nanoTime() - beginTime;    minTime=Math.min(minTime,time);    maxTime=Math.max(maxTime,time);    totalTime+=time;  }  if (step > 0) {    meanTime=totalTime / step;  } else {    meanTime=totalTime;  }  PrintWriter resultsWriter=new PrintWriter(new FileWriter(new File(outDir,"results_perfs.txt"),true));  try {    writeMessage("Measured  render with file : " + inFile.getAbsolutePath() + " encoded To : "+ ext,resultsWriter);    if (img == null) {      writeMessage("Image could not be rendered! Measurement show time needed to read and parse image data until error detection.",resultsWriter);    }    writeMessage("Render total time (ms) : " + (totalTime) / 1000000 + " on " + step + " steps.",resultsWriter);    writeMessage("Render mean time (ms) : " + (meanTime) / 1000000,resultsWriter);    writeMessage("Render min time (ms) : " + (minTime) / 1000000,resultsWriter);    writeMessage("Render max time (ms) : " + (maxTime) / 1000000,resultsWriter);  }  finally {    resultsWriter.close();  }  if (img == null) {    failures.put(urlString,error);  } else {    FileOutputStream outFileStream=null;    try {      outFileStream=new FileOutputStream(outFile);      img.getImage().writeTo(outFileStream);    }  finally {      if (outFileStream != null) {        outFileStream.close();      }      img.getImage().close();    }  }}  }
class C{  private static Element addElement(Document doc,Node parent,String tagName,String attr1,String val1,String attr2,String val2){  Element elem=doc.createElement(tagName);  if (attr1 != null)   elem.setAttribute(attr1,val1);  if (attr2 != null)   elem.setAttribute(attr2,val2);  parent.appendChild(elem);  return elem;}  }
class C{  public List<FileInfo> indexFiles(){  return indexFiles;}  }
class C{  public static final boolean accept(){  IniDialog id=new IniDialog();  if (id.isAccepted()) {    log.info("License Accepted");    return true;  }  System.exit(10);  return false;}  }
class C{  public synchronized void prefetchAds(Context context){  super.prefetchAds(context);  setupAds();  fetchAd();}  }
class C{  @Override public <T>Supplier<T> apply(Factory<T> factory){  return new IndirectSerializableSupplier<T>(delegate,indirectDelegateSupplier,factory);}  }
class C{  public final static int readMdLinkId(final StringBuilder out,final String in,final int start){  int pos=start;  int counter=1;  while (pos < in.length()) {    final char ch=in.charAt(pos);    boolean endReached=false;switch (ch) {case '\n':      out.append(' ');    break;case '[':  counter++;out.append(ch);break;case ']':counter--;if (counter == 0) {endReached=true;} else {out.append(ch);}break;default :out.append(ch);break;}if (endReached) {break;}pos++;}return (pos == in.length()) ? -1 : pos;}  }
class C{  private void debug(Object variable,String name){  if (variable != null) {    System.out.println("*************" + name + "="+ variable);  } else   System.out.println("*************" + name + " is null");}  }
class C{  public static Object newInterpreter(){  Object result;  result=null;  if (isPresent()) {    try {      result=Class.forName(CLASS_PYTHONINERPRETER).newInstance();    } catch (    Exception e) {      e.printStackTrace();      result=null;    }  }  return result;}  }
class C{  public void windowClosing(WindowEvent e){  if (AWTEventMonitor.windowListener_private != null) {    AWTEventMonitor.windowListener_private.windowClosing(e);  }}  }
class C{  @NonNull public static Animator rotateTo(float rotation,float duration,@Nullable Interpolator interpolator){  return rotate(rotation,duration,interpolator,ActionType.ROTATE_TO);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void updatePosition(Particle particle,long elapsedTime){  Vector3f speed=particle.getSpeed();  float delta=elapsedTime / 1000.0f;  float dx=speed.x * delta;  float dy=speed.y * delta;  float dz=speed.z * delta;  Vector3f pos=particle.getPosition();  particle.setPosition(pos.x + dx,pos.y + dy,pos.z + dz);}  }
class C{  public Date add(final Period period){  return new Date(advance(this,period.length(),period.units()));}  }
class C{  public List<AddressItem> queryDeep(String where,String... selectionArg){  Cursor cursor=db.rawQuery(getSelectDeep() + where,selectionArg);  return loadDeepAllAndCloseCursor(cursor);}  }
class C{  @Override public String toString(){  StringBuffer text=new StringBuffer();  if (m_Ls.size() <= 1) {    return "\nNo large itemsets and rules found!\n";  }  text.append("\nApriori\n=======\n\n");  text.append("Minimum support: " + Utils.doubleToString(m_minSupport,2) + " ("+ ((int)(m_minSupport * m_instances.numInstances() + 0.5))+ " instances)"+ '\n');  text.append("Minimum metric <");switch (m_metricType) {case CONFIDENCE:    text.append("confidence>: ");  break;case LIFT:text.append("lift>: ");break;case LEVERAGE:text.append("leverage>: ");break;case CONVICTION:text.append("conviction>: ");break;}text.append(Utils.doubleToString(m_minMetric,2) + '\n');if (m_significanceLevel != -1) {text.append("Significance level: " + Utils.doubleToString(m_significanceLevel,2) + '\n');}text.append("Number of cycles performed: " + m_cycles + '\n');text.append("\nGenerated sets of large itemsets:\n");if (!m_car) {for (int i=0; i < m_Ls.size(); i++) {text.append("\nSize of set of large itemsets L(" + (i + 1) + "): "+ (m_Ls.get(i)).size()+ '\n');if (m_outputItemSets) {text.append("\nLarge Itemsets L(" + (i + 1) + "):\n");for (int j=0; j < (m_Ls.get(i)).size(); j++) {text.append(((AprioriItemSet)(m_Ls.get(i)).get(j)).toString(m_instances) + "\n");}}}text.append("\nBest rules found:\n\n");if (m_toStringDelimiters != null) {text.append("Number,Premise,Premise Support,Consequence,Consequence Support,Confidence,Lift,Leverage,LeverageT,Conviction\n");}for (int i=0; i < m_allTheRules[0].size(); i++) {String outerDelim;String innerDelim;String stop;String implies;String confOpen;String confClose;String liftOpen;String liftClose;String levOpen;String levInner;String levClose;String convOpen;String convClose;if (m_toStringDelimiters != null) {outerDelim=m_toStringDelimiters.substring(0,1);innerDelim=m_toStringDelimiters.substring(1,2);stop=outerDelim;implies=outerDelim;confOpen=outerDelim;confClose="";liftOpen=outerDelim;liftClose="";levOpen=outerDelim;levInner=outerDelim;levClose="";convOpen=outerDelim;convClose="";} else {outerDelim=" ";innerDelim=" ";stop=". ";implies=" ==> ";confOpen="    " + (m_metricType == CONFIDENCE ? "<" : "") + "conf:(";confClose=")" + (m_metricType == CONFIDENCE ? ">" : "");liftOpen=(m_metricType == LIFT ? " <" : "") + " lift:(";liftClose=")" + (m_metricType == LIFT ? ">" : "");levOpen=(m_metricType == LEVERAGE ? " <" : "") + " lev:(";levInner=")" + " [";levClose="]" + (m_metricType == LEVERAGE ? ">" : "");convOpen=(m_metricType == CONVICTION ? " <" : "") + " conv:(";convClose=")" + (m_metricType == CONVICTION ? ">" : "");}char odc=outerDelim.charAt(0);char idc=innerDelim.charAt(0);String n=Utils.doubleToString((double)i + 1,(int)(Math.log(m_numRules) / Math.log(10) + 1),0);String premise=((AprioriItemSet)m_allTheRules[0].get(i)).toString(m_instances,odc,idc);String consequence=((AprioriItemSet)m_allTheRules[1].get(i)).toString(m_instances,odc,idc);String confidence=Utils.doubleToString(((Double)m_allTheRules[2].get(i)).doubleValue(),2);String lift=Utils.doubleToString(((Double)m_allTheRules[3].get(i)).doubleValue(),2);String leverage=Utils.doubleToString(((Double)m_allTheRules[4].get(i)).doubleValue(),2);String conviction=Utils.doubleToString(((Double)m_allTheRules[5].get(i)).doubleValue(),2);int leverageT=(int)(((Double)m_allTheRules[4].get(i)).doubleValue() * m_instances.numInstances());text.append(n).append(stop);text.append(premise).append(implies).append(consequence);text.append(confOpen).append(confidence).append(confClose);text.append(liftOpen).append(lift).append(liftClose);text.append(levOpen).append(leverage).append(levInner).append(leverageT).append(levClose);text.append(convOpen).append(conviction).append(convClose);text.append('\n');}} else {for (int i=0; i < m_Ls.size(); i++) {text.append("\nSize of set of large itemsets L(" + (i + 1) + "): "+ (m_Ls.get(i)).size()+ '\n');if (m_outputItemSets) {text.append("\nLarge Itemsets L(" + (i + 1) + "):\n");for (int j=0; j < (m_Ls.get(i)).size(); j++) {text.append(((ItemSet)(m_Ls.get(i)).get(j)).toString(m_instances) + "\n");text.append(((LabeledItemSet)(m_Ls.get(i)).get(j)).m_classLabel + "  ");text.append(((LabeledItemSet)(m_Ls.get(i)).get(j)).support() + "\n");}}}text.append("\nBest rules found:\n\n");if (m_toStringDelimiters != null) {text.append("Number,Premise,Premise Support,Consequence,Consequence Support,Confidence\n");}for (int i=0; i < m_allTheRules[0].size(); i++) {String outerDelim;String innerDelim;String stop;String implies;String confOpen;String confClose;if (m_toStringDelimiters != null) {outerDelim=m_toStringDelimiters.substring(0,1);innerDelim=m_toStringDelimiters.substring(1,2);stop=outerDelim;implies=outerDelim;confOpen=outerDelim;confClose="";} else {outerDelim=" ";innerDelim=" ";stop=". ";implies=" ==> ";confOpen="    " + "conf:(";confClose=")";}char odc=outerDelim.charAt(0);char idc=innerDelim.charAt(0);String n=Utils.doubleToString((double)i + 1,(int)(Math.log(m_numRules) / Math.log(10) + 1),0);String premise=((ItemSet)m_allTheRules[0].get(i)).toString(m_instances,odc,idc);String consequence=((ItemSet)m_allTheRules[1].get(i)).toString(m_onlyClass,odc,idc);String confidence=Utils.doubleToString(((Double)m_allTheRules[2].get(i)).doubleValue(),2);text.append(n).append(stop).append(premise).append(implies).append(consequence).append(confOpen).append(confidence).append(confClose);text.append('\n');}}return text.toString();}  }
class C{  @Override public void writeToParcel(Parcel dest,int flags){  dest.writeFloat(pivotX);  dest.writeFloat(pivotY);}  }
class C{  @Override public MatchResult match(String str){  RegexTemplate template=new RegexTemplate(toString());  return template.match(str);}  }
class C{  public void insert(IMultiPoint value){  if (value == null) {    throw new IllegalArgumentException("unable to insert null value into KDTree");  }  if (root == null) {    root=new DimensionalNode(1,value);    return;  }  DimensionalNode node=root;  DimensionalNode next;  while (node != null) {    if (node.isBelow(value)) {      next=node.getBelow();      if (next == null) {        node.setBelow(node.construct(value));        break;      } else {        node=next;      }    } else {      next=node.getAbove();      if (next == null) {        node.setAbove(node.construct(value));        return;      } else {        node=next;      }    }  }}  }
class C{  private static Pair<Map<String,String>,ZyGraphViewSettings> loadSettings(final INaviView view){  return view.getType() == ViewType.Native ? loadNativeSettings(view) : loadNonNativeSettings(view);}  }
class C{  protected void merge(Properties from){  merge(from,getProperties(),null,null);}  }
class C{  public static boolean isReservedMACAddress(String s){  if (!looksLikeBluetoothAddress(s)) {    return false;  }  s=s.replace(":","-");  s=s.toUpperCase();  if (Pattern.matches("^0[0-3]-00-5E.*",s)) {    return true;  } else   if (Pattern.matches("^FF-FF-FF-FF-FF-FF$",s)) {    return true;  }  return false;}  }
class C{  public void testInsertOfManyRowsUsingOneThread(){  Logger.global.info("java.sql stress test: single thread and many operations.");  int maxConnections=getConnectionNum();  Logger.global.info("Opening " + maxConnections + " to database "+ Support_SQL.getFilename());  openConnections(maxConnections);  int tasksPerConnection=Support_SQL.sqlMaxTasks / maxConnections;  Logger.global.info("TasksPerConnection =  " + Support_SQL.sqlMaxTasks + " by (maxConnections) "+ maxConnections+ " = "+ tasksPerConnection);  int pk=1;  for (int i=0; i < vc.size(); ++i) {    Logger.global.info(" creating " + tasksPerConnection + "tasks for Connection "+ i);    Connection c=vc.elementAt(i);    for (int j=0; j < tasksPerConnection; ++j) {      insertNewRecord(c,pk++);    }  }  try {    ResultSet rs=statement.executeQuery("SELECT COUNT(*) as counter FROM " + DatabaseCreator.TEST_TABLE2);    assertTrue("RecordSet is empty",rs.next());    assertEquals("Incorrect number of records",tasksPerConnection * maxConnections,rs.getInt("counter"));    rs.close();  } catch (  SQLException sql) {    fail("Unexpected SQLException " + sql.toString());  }}  }
class C{  public static Script createMultiSigOutputScript(int threshold,List<ECKey> pubkeys){  checkArgument(threshold > 0);  checkArgument(threshold <= pubkeys.size());  checkArgument(pubkeys.size() <= 16);  ScriptBuilder builder=new ScriptBuilder();  builder.smallNum(threshold);  for (  ECKey key : pubkeys) {    builder.data(key.getPubKey());  }  builder.smallNum(pubkeys.size());  builder.op(OP_CHECKMULTISIG);  return builder.build();}  }
class C{  @Override public synchronized CloneableIterator<byte[]> keys(final boolean up,final boolean rotating) throws IOException {  assert rotating == false;  final List<CloneableIterator<byte[]>> c=new ArrayList<CloneableIterator<byte[]>>(this.blobs.size());  final Iterator<blobItem> i=this.blobs.iterator();  while (i.hasNext()) {    c.add(i.next().blob.keys(up,rotating));  }  return MergeIterator.cascade(c,this.ordering,MergeIterator.simpleMerge,up);}  }
class C{  public Period withField(DurationFieldType field,int value){  if (field == null) {    throw new IllegalArgumentException("Field must not be null");  }  int[] newValues=getValues();  super.setFieldInto(newValues,field,value);  return new Period(newValues,getPeriodType());}  }
class C{  @Override public void run(){  try {    TmchCertificateAuthority.updateCrl(new String(marksdb.fetch(tmchCrlUrl,Optional.<String>absent()),UTF_8));  } catch (  IOException|GeneralSecurityException e) {    throw new RuntimeException("Failed to update ICANN TMCH CRL.",e);  }}  }
class C{  public RangeBuilder format(String format){  this.format=format;  return this;}  }
class C{  public boolean hasValue(){  return super.hasTextValue();}  }
class C{  public void updateSrlStreams(String active,List<String> popout){  srlStreams.removeAll();  if (active == null || active.isEmpty()) {    addItem(srlStreams,"","No channel joined");  } else {    addItem(srlStreams,"srlRaceActive",active);  }  if (!popout.isEmpty()) {    srlStreams.addSeparator();    for (    String chan : popout) {      addItem(srlStreams,"srlRace4" + chan,chan);    }  }}  }
class C{  private void resetShade(int shadeColorId,int modeIconResourceId){  int shadeColor=getResources().getColor(shadeColorId);  mBackgroundColor=shadeColor;  mShadePaint.setColor(shadeColor);  setScrollDistance(0f);  updateIconDrawableByResourceId(modeIconResourceId);  mIconDrawable.setAlpha(0);  setVisibility(VISIBLE);}  }
class C{  public void put(ReplDBMSEvent event) throws InterruptedException, ReplicatorException {  queue.put(event);  transactionCount++;  if (logger.isDebugEnabled()) {    if (transactionCount % 10000 == 0)     logger.debug("Queue store: xacts=" + transactionCount + " size="+ queue.size());  }}  }
class C{  public static StringBuilder readFile(String filePath,String charsetName){  File file=new File(filePath);  StringBuilder fileContent=new StringBuilder("");  if (file == null || !file.isFile()) {    return null;  }  BufferedReader reader=null;  try {    InputStreamReader is=new InputStreamReader(new FileInputStream(file),charsetName);    reader=new BufferedReader(is);    String line=null;    while ((line=reader.readLine()) != null) {      if (!fileContent.toString().equals("")) {        fileContent.append("\r\n");      }      fileContent.append(line);    }    reader.close();    return fileContent;  } catch (  IOException e) {    throw new RuntimeException("IOException occurred. ",e);  } finally {    if (reader != null) {      try {        reader.close();      } catch (      IOException e) {        throw new RuntimeException("IOException occurred. ",e);      }    }  }}  }
class C{  public boolean isAntiAliasingSupported(){  return impl.isAntiAliasingSupported();}  }
class C{  public boolean startsWith(final char c){  return hasMoreData() && myText.charAt(myPosition) == c;}  }
class C{  @Override public void addChild(FXGNode child){  if (child instanceof BRNode || child instanceof SpanNode || child instanceof CDATANode) {    if (content == null)     content=new ArrayList<TextNode>();    content.add((TextNode)child);  } else {    super.addChild(child);  }}  }
class C{  public void launchMedia(MediaSource song,boolean isPreview){  if (MediaPlayer.instance().getCurrentMedia() != null)   try {    MediaPlayer.instance().stop();    Thread.sleep(1000);  } catch (  Exception e) {    e.printStackTrace();  }  boolean playNextSong=true;  if (song.getFile() != null && MediaType.getVideoMediaType().matches(song.getFile().getAbsolutePath())) {    playNextSong=false;  }  MediaPlayer.instance().asyncLoadMedia(song,true,isPreview,playNextSong);}  }
class C{  @Override public void run(){  amIActive=true;  WhiteboxRaster image;  WhiteboxRaster image2;  int cols=0;  int rows=0;  double noData=-32768;  int numImages;  double z;  float progress=0;  int col, row;  int a, b, i;  String inputFilesString=null;  String[] imageFiles;  double[] imageTotals;  long[] imageNs;  double[] imageAverages;  String[] shortNames=null;  String[] units=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  if (numImages < 1) {    showFeedback("At least one image must be specified for an image correlation.");    return;  }  try {    imageTotals=new double[numImages];    imageNs=new long[numImages];    imageAverages=new double[numImages];    shortNames=new String[numImages];    units=new String[numImages];    double[] data;    for (a=0; a < numImages; a++) {      updateProgress("Image " + (a + 1) + ", Calculating image averages:",-1);      image=new WhiteboxRaster(imageFiles[a],"r");      noData=image.getNoDataValue();      rows=image.getNumberRows();      cols=image.getNumberColumns();      shortNames[a]=image.getShortHeaderFile();      if (!image.getZUnits().toLowerCase().equals("not specified")) {        units[a]=image.getZUnits();      } else {        units[a]="";      }      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != noData) {            imageTotals[a]+=data[col];            imageNs[a]++;          }        }        if (cancelOp) {          cancelOperation();          return;        }      }      image.close();      imageAverages[a]=imageTotals[a] / imageNs[a];      progress=(int)(100f * (a + 1) / numImages);      updateProgress("Image " + (a + 1) + ", Calculating image average:",(int)progress);    }    String retstr=null;    retstr="IMAGE AVERAGE\n";    DecimalFormat df=new DecimalFormat("0.0000");    for (a=0; a < numImages; a++) {      if (units[a].equals("")) {        retstr=retstr + "\n" + shortNames[a]+ "\t"+ df.format(imageAverages[a]);      } else {        retstr=retstr + "\n" + shortNames[a]+ "\t"+ df.format(imageAverages[a])+ units[a];      }    }    returnData(retstr);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public SVGGraphics2DRuntimeException(Exception ex){  this(null,ex);}  }
class C{  public static Motion createLinearColorMotion(int sourceValue,int destinationValue,int duration){  Motion l=new Motion(sourceValue,destinationValue,duration);  l.motionType=COLOR_LINEAR;  return l;}  }
class C{  public static WhereBuilder b(){  return new WhereBuilder();}  }
class C{  private List<DiffEntry> indexToWorkingTree(DiffFormatter formatter) throws IOException {  DirCache dirCache=null;  ObjectReader reader=repository.newObjectReader();  List<DiffEntry> diff;  try {    dirCache=repository.lockDirCache();    DirCacheIterator iterA=new DirCacheIterator(dirCache);    FileTreeIterator iterB=new FileTreeIterator(repository);    formatter.setDetectRenames(false);    diff=formatter.scan(iterA,iterB);    if (!request.isNoRenames()) {      RenameDetector renameDetector=createRenameDetector();      ContentSource.Pair sourcePairReader=new ContentSource.Pair(ContentSource.create(reader),ContentSource.create(iterB));      renameDetector.addAll(diff);      diff=renameDetector.compute(sourcePairReader,NullProgressMonitor.INSTANCE);    }  }  finally {    reader.close();    if (dirCache != null) {      dirCache.unlock();    }  }  return diff;}  }
class C{  public Iterator generators(){  if (generators != null)   return Collections.unmodifiableList(generators).iterator(); else   return Collections.EMPTY_LIST.iterator();}  }
class C{  private void validateBlockSnapshotsForExportGroupCreate(ExportCreateParam param){  if (param != null) {    List<URI> blockObjURIs=new ArrayList<URI>();    for (    VolumeParam volParam : param.getVolumes()) {      blockObjURIs.add(volParam.getId());    }    validateDuplicateRPBlockSnapshotsForExport(blockObjURIs);    validateVPLEXBlockSnapshotsForExport(blockObjURIs);  }}  }
class C{  public static Range iterateCategoryRangeBounds(CategoryDataset dataset,boolean includeInterval){  return iterateRangeBounds(dataset,includeInterval);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.383 -0400",hash_original_method="A865ADEBF58247B6AD56000E5CC2504C",hash_generated_method="352DF15A9748450D49191CDCADB73AEF") public static final byte[] decodeUrl(byte[] bytes) throws DecoderException {  if (bytes == null) {    return null;  }  ByteArrayOutputStream buffer=new ByteArrayOutputStream();  for (int i=0; i < bytes.length; i++) {    int b=bytes[i];    if (b == '+') {      buffer.write(' ');    } else     if (b == '%') {      try {        int u=Character.digit((char)bytes[++i],16);        int l=Character.digit((char)bytes[++i],16);        if (u == -1 || l == -1) {          throw new DecoderException("Invalid URL encoding");        }        buffer.write((char)((u << 4) + l));      } catch (      ArrayIndexOutOfBoundsException e) {        throw new DecoderException("Invalid URL encoding");      }    } else {      buffer.write(b);    }  }  return buffer.toByteArray();}  }
class C{  public void toggleClickability(View view){  if (mClickablePolygonWithHoles != null) {    mClickablePolygonWithHoles.setClickable(((CheckBox)view).isChecked());  }  if (mMutablePolygon != null) {    mMutablePolygon.setClickable(((CheckBox)view).isChecked());  }}  }
class C{  @Override public void onSaveInstanceState(Bundle savedInstanceState){  super.onSaveInstanceState(savedInstanceState);  savedInstanceState.putBoolean("IsFrontFacing",mIsFrontFacing);}  }
class C{  public static void sort(char[] array){  DualPivotQuicksort.sort(array);}  }
class C{  private static void decodeHanziSegment(BitSource bits,StringBuilder result,int count) throws FormatException {  if (count * 13 > bits.available()) {    throw FormatException.getFormatInstance();  }  byte[] buffer=new byte[2 * count];  int offset=0;  while (count > 0) {    int twoBytes=bits.readBits(13);    int assembledTwoBytes=((twoBytes / 0x060) << 8) | (twoBytes % 0x060);    if (assembledTwoBytes < 0x003BF) {      assembledTwoBytes+=0x0A1A1;    } else {      assembledTwoBytes+=0x0A6A1;    }    buffer[offset]=(byte)((assembledTwoBytes >> 8) & 0xFF);    buffer[offset + 1]=(byte)(assembledTwoBytes & 0xFF);    offset+=2;    count--;  }  try {    result.append(new String(buffer,StringUtils.GB2312));  } catch (  UnsupportedEncodingException uee) {    throw FormatException.getFormatInstance();  }}  }
class C{  public HdfsDataSource(){}  }
class C{  public static void removeSaslMechs(Collection<String> mechs){  for (  String mech : mechs) {    removeSaslMech(mech);  }}  }
class C{  public ViewPropertyAnimator yBy(float value){  animatePropertyBy(Y,value);  return this;}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,int options){  byte[] ALPHABET=getAlphabet(options);  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=ALPHABET[(inBuff >>> 18)];  destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=ALPHABET[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  public void traverse(ASTVisitor visitor,ClassScope classScope){  try {    if (visitor.visit(this,classScope)) {      if (this.javadoc != null) {        this.javadoc.traverse(visitor,this.scope);      }      if (this.annotations != null) {        int annotationsLength=this.annotations.length;        for (int i=0; i < annotationsLength; i++)         this.annotations[i].traverse(visitor,this.staticInitializerScope);      }      if (this.superclass != null)       this.superclass.traverse(visitor,this.scope);      if (this.superInterfaces != null) {        int length=this.superInterfaces.length;        for (int i=0; i < length; i++)         this.superInterfaces[i].traverse(visitor,this.scope);      }      if (this.typeParameters != null) {        int length=this.typeParameters.length;        for (int i=0; i < length; i++) {          this.typeParameters[i].traverse(visitor,this.scope);        }      }      if (this.memberTypes != null) {        int length=this.memberTypes.length;        for (int i=0; i < length; i++)         this.memberTypes[i].traverse(visitor,this.scope);      }      if (this.fields != null) {        int length=this.fields.length;        for (int i=0; i < length; i++) {          FieldDeclaration field;          if ((field=this.fields[i]).isStatic()) {            field.traverse(visitor,this.staticInitializerScope);          } else {            field.traverse(visitor,this.initializerScope);          }        }      }      if (this.methods != null) {        int length=this.methods.length;        for (int i=0; i < length; i++)         this.methods[i].traverse(visitor,this.scope);      }    }    visitor.endVisit(this,classScope);  } catch (  AbortType e) {  }}  }
class C{  public Sound(byte[] data,SoundType type){  super(data,type);}  }
class C{  public void reset(){  shouldFail=false;  clientCheckCallCnt.set(0);  srvCheckCallCnt.set(0);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SexecPackage.SCHEDULE_TIME_EVENT__TIME_EVENT:    return timeEvent != null;case SexecPackage.SCHEDULE_TIME_EVENT__TIME_VALUE:  return timeValue != null;}return super.eIsSet(featureID);}  }
class C{  @Nullable public BlockEntry findById(String id){  return idMap.get(id);}  }
class C{  public <M extends Map<K,V>,K,V>M retrieveMap(String key,Class classMap,Class<K> classMapKey,Class<V> classMapValue){  key=safetyKey(key);  try {    File file=new File(cacheDirectory,key);    Type typeMap=jolyglot.newParameterizedType(classMap,classMapKey,classMapValue);    Object data=jolyglot.fromJson(file,typeMap);    return (M)data;  } catch (  Exception e) {    return null;  }}  }
class C{  public EntityMigrationBuilder custom(EntityMigrationOperation operationEntity){  migrationBuilder.builder.entityMigrationRules().addRule(new EntityMigrationRule(migrationBuilder.fromVersion,migrationBuilder.toVersion,entityTypes,operationEntity));  return this;}  }
class C{  SourceAddressAttribute(){  super(SOURCE_ADDRESS);}  }
class C{  private void loadNextPage(List<GoodsListBean> tempNextList){  nexPage=tempNextList.get(0).getNext();  ArrayList<GoodsModel> tempNextAL=new ArrayList<>();  for (int i=0; i < tempNextList.get(0).getPosts().length; i++)   tempNextAL.add(tempNextList.get(0).getPosts()[i]);  addItems(tempNextAL);  notifyDataSetChanged();}  }
class C{  public void removeMapListener(MapListener listener){  if (listeners == null) {    return;  }  listeners.remove(listener);}  }
class C{  private static FlinkKafkaConsumer082<String> kafkaSource(BenchmarkConfig config){  return new FlinkKafkaConsumer082<>(config.kafkaTopic,new SimpleStringSchema(),config.getParameters().getProperties());}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public int costInline(int thresh,Environment env,Context ctx){  return (type.isType(TC_CLASS) ? 12 : 1) + left.costInline(thresh,env,ctx) + right.costInline(thresh,env,ctx);}  }
class C{  private void sendSupportedChannels(){  Set<String> listening=server.getMessenger().getIncomingChannels();  if (!listening.isEmpty()) {    ByteBuf buf=Unpooled.buffer(16 * listening.size());    for (    String channel : listening) {      buf.writeBytes(channel.getBytes(StandardCharsets.UTF_8));      buf.writeByte(0);    }    session.send(new PluginMessage("REGISTER",buf.array()));    buf.release();  }}  }
class C{  private void drawCircle(Canvas canvas,Paint paint,float x,float y,float radius){  canvas.drawCircle(x,y,radius,paint);}  }
class C{  public BiosCommandResult removeZone(URI volUri,NetworkFCZoneInfo fabricInfo,boolean activateZones) throws ControllerException {  ServiceError serviceError=NetworkDeviceControllerException.errors.zoningFailedArgs(volUri.toString());  BiosCommandResult result=BiosCommandResult.createErrorResult(serviceError);  List<Zone> zones=new ArrayList<Zone>();  Zone zone=new Zone(fabricInfo.getZoneName());  zones.add(zone);  String taskId=UUID.randomUUID().toString();  for (  String address : fabricInfo.getEndPoints()) {    ZoneMember member=new ZoneMember(address,ConnectivityMemberType.WWPN);    zone.getMembers().add(member);  }  InterProcessLock fabricLock=NetworkFabricLocker.lockFabric(fabricInfo.getFabricId(),_coordinator);  try {    NetworkSystem device=getDeviceObject(fabricInfo.getNetworkDeviceId());    NetworkSystemDevice networkDevice=getDevice(device.getSystemType());    if (networkDevice == null) {      throw NetworkDeviceControllerException.exceptions.removeZoneFailedNull(device.getSystemType());    }    if (fabricInfo.isLastReference() == true && !fabricInfo.isExistingZone()) {      result=networkDevice.removeZones(device,zones,fabricInfo.getFabricId(),fabricInfo.getFabricWwn(),activateZones);    } else {      result=BiosCommandResult.createSuccessfulResult();    }    if (result.isCommandSuccess()) {      if (fabricInfo.getFcZoneReferenceId() != null) {        try {          FCZoneReference reference=_dbClient.queryObject(FCZoneReference.class,fabricInfo.getFcZoneReferenceId());          if (reference != null) {            _dbClient.markForDeletion(reference);            recordZoneEvent(reference,OperationTypeEnum.REMOVE_SAN_ZONE.name(),OperationTypeEnum.REMOVE_SAN_ZONE.getDescription());          }        } catch (        Exception ex) {          _log.error("Can't mark object for removal: " + fabricInfo.getFcZoneReferenceId());        }      }    }    if (!result.isCommandSuccess()) {      ServiceError svcError=NetworkDeviceControllerException.errors.removeZoneFailed(volUri.toString(),device.getSystemType());      setStatus(Volume.class,volUri,taskId,false,svcError);    } else {      setStatus(Volume.class,volUri,taskId,true,null);    }  } catch (  ControllerException ex) {    URI primaryUri=fabricInfo.getNetworkDeviceId();    URI altUri=fabricInfo.getAltNetworkDeviceId();    if (altUri != null && altUri != primaryUri) {      NetworkFabricLocker.unlockFabric(fabricInfo.getFabricId(),fabricLock);      fabricLock=null;      _log.error("Remove Zone failed using device: " + primaryUri + " retrying with alternate device: "+ altUri);      fabricInfo.setNetworkDeviceId(altUri);      return removeZone(volUri,fabricInfo,activateZones);    } else {      ServiceError svcError=NetworkDeviceControllerException.errors.removeZoneFailedExc(volUri.toString());      setStatus(Volume.class,volUri,taskId,false,svcError);      throw ex;    }  } finally {    NetworkFabricLocker.unlockFabric(fabricInfo.getFabricId(),fabricLock);  }  return result;}  }
class C{  public void sortOutlineView(String currentState){  if (currentState.equals("method")) {    sortViewByMethodName();  } else   if (currentState.equals("class")) {    sortViewByClassName();  } else   if (currentState.equals("status")) {    sortViewByStatusAndClassName();  } else   if (currentState.equals("priority")) {    sortViewByPriorityAndClassName();  }}  }
class C{  private ReplaceTokens createHostnameToken(){  ReplaceTokens.Token tokenHostname=new ReplaceTokens.Token();  tokenHostname.setKey(GeneralPropertySet.HOSTNAME);  String hostname=getPropertyValue(GeneralPropertySet.HOSTNAME);  if (hostname == null) {    hostname=DEFAULT_HOSTNAME;  }  tokenHostname.setValue(hostname);  ReplaceTokens replaceHostname=new ReplaceTokens();  replaceHostname.addConfiguredToken(tokenHostname);  return replaceHostname;}  }
class C{  public boolean isAll(){  return isAll;}  }
class C{  public static String sanitizeVcfHeader(String vcfString){  return vcfString.replace("Version","").replaceAll("##CL=.*\n","").replaceAll("##TEMPLATE-SDF-ID=.*\n","").replaceAll("##RUN-ID=.*\n","").replaceAll("##fileDate=.*\n","").replaceAll("##reference=.*\n","").replaceAll("##source=.*\n","");}  }
class C{  public boolean saveError(String AD_Message,Exception ex){  Env.getCtx().put(LAST_EXCEPTION,ex);  return saveError(AD_Message,ex.getLocalizedMessage(),true);}  }
class C{  void deleteScore(String entry){  scores.remove(entry);}  }
class C{  private void delayedExecute(RunnableScheduledFuture<?> task){  if (isShutdown())   reject(task); else {    super.getQueue().add(task);    if (isShutdown() && !canRunInCurrentRunState(task.isPeriodic()) && remove(task))     task.cancel(false); else     ensurePrestart();  }}  }
class C{  public String toString(){  return this.getClass().getName() + "(" + mean+ ")";}  }
class C{  @Override public void analyze(Graph graph,Map<String,DescriptiveStatistics> statsMap){  DescriptiveStatistics stats=new DescriptiveStatistics();  stats.addValue(graph.getVertices().size());  statsMap.put(NUM_VERTICES,stats);  printStats(stats,NUM_VERTICES);  stats=new DescriptiveStatistics();  stats.addValue(graph.getEdges().size());  statsMap.put(NUM_EDGES,stats);  printStats(stats,NUM_EDGES);}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case TRACE_ID:    return isSetTrace_id();case NAME:  return isSetName();case ID:return isSetId();case PARENT_ID:return isSetParent_id();case ANNOTATIONS:return isSetAnnotations();case BINARY_ANNOTATIONS:return isSetBinary_annotations();case DEBUG:return isSetDebug();}throw new IllegalStateException();}  }
class C{  public static String graphToDot(Graph graph){  StringBuilder builder=new StringBuilder();  builder.append("digraph g {\n");  for (  Edge edge : graph.getEdges()) {    builder.append(" \"").append(edge.getNode1()).append("\" -> \"").append(edge.getNode2()).append("\" [arrowtail=");    if (edge.getEndpoint1() == Endpoint.ARROW) {      builder.append("normal");    } else     if (edge.getEndpoint1() == Endpoint.TAIL) {      builder.append("none");    } else     if (edge.getEndpoint1() == Endpoint.CIRCLE) {      builder.append("odot");    }    builder.append(", arrowhead=");    if (edge.getEndpoint2() == Endpoint.ARROW) {      builder.append("normal");    } else     if (edge.getEndpoint2() == Endpoint.TAIL) {      builder.append("none");    } else     if (edge.getEndpoint2() == Endpoint.CIRCLE) {      builder.append("odot");    }    builder.append("]; \n");  }  builder.append("}");  return builder.toString();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeaderRed=null;  String inputHeaderGreen=null;  String inputHeaderBlue=null;  String inputHeaderPan=null;  String outputHeader=null;  WhiteboxRaster ouptut=null;  int nCols=0;  int nRows=0;  int nColsPan, nRowsPan;  double redNoData=-32768;  double greenNoData=-32768;  double blueNoData=-32768;  double panNoData=-32768;  double x, y, z;  int progress=0;  int col, row;  int a, i;  double north, south, east, west;  double gridResX, gridResY;  String fusionMethod="brovey";  double r, g, b;  int rOut, gOut, bOut;  double adj;  double p;  double[] dataR, dataG, dataB, dataI, dataP;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeaderRed=args[0];  inputHeaderGreen=args[1];  inputHeaderBlue=args[2];  inputHeaderPan=args[3];  outputHeader=args[4];  if (args[5].toLowerCase().contains("ihs")) {    fusionMethod="ihs";  } else   if (args[5].toLowerCase().contains("brov")) {    fusionMethod="brovey";  }  try {    WhiteboxRasterInfo red=new WhiteboxRasterInfo(inputHeaderRed);    WhiteboxRasterInfo green=new WhiteboxRasterInfo(inputHeaderGreen);    WhiteboxRasterInfo blue=new WhiteboxRasterInfo(inputHeaderBlue);    WhiteboxRasterInfo pan=new WhiteboxRasterInfo(inputHeaderPan);    nCols=red.getNumberColumns();    nRows=red.getNumberRows();    if (green.getNumberColumns() != nCols || green.getNumberRows() != nRows) {      showFeedback("The input multispectral files must have the same dimensions.");      return;    }    if (blue.getNumberColumns() != nCols || blue.getNumberRows() != nRows) {      showFeedback("The input multispectral files must have the same dimensions.");      return;    }    north=red.getNorth();    south=red.getSouth();    east=red.getEast();    west=red.getWest();    redNoData=red.getNoDataValue();    greenNoData=green.getNoDataValue();    blueNoData=blue.getNoDataValue();    panNoData=pan.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeaderPan,WhiteboxRaster.DataType.FLOAT,panNoData);    output.setDataScale(DataScale.RGB);    nColsPan=pan.getNumberColumns();    nRowsPan=pan.getNumberRows();    int nColsLessOne=nColsPan - 1;    int nRowsLessOne=nRowsPan - 1;    gridResX=pan.getCellSizeX();    gridResY=pan.getCellSizeY();    double yRange=pan.getNorth() - pan.getSouth() - gridResY;    double xRange=pan.getEast() - pan.getWest() - gridResX;    int sourceCol, sourceRow;    double northernEdge=pan.getNorth() - gridResY;    double westernEdge=pan.getWest() + gridResX;    if (north < south) {      northernEdge=pan.getNorth() + gridResY;    }    if (east < west) {      westernEdge=west - gridResX;    }    double pMin=pan.getMinimumValue();    double pRange=pan.getMaximumValue() - pMin;    double maxMSVal=red.getMaximumValue();    if (green.getMaximumValue() > maxMSVal) {      maxMSVal=green.getMaximumValue();    }    if (blue.getMaximumValue() > maxMSVal) {      maxMSVal=blue.getMaximumValue();    }    if (fusionMethod.contains("brov")) {      for (row=0; row < nRowsPan; row++) {        y=northernEdge - (yRange * row) / nRowsLessOne;        sourceRow=(int)Math.round((north - y) / (north - south) * (nRows - 0.5));        if (sourceRow >= nRows) {          break;        }        if (sourceRow < 0) {          sourceRow=0;        }        dataR=red.getRowValues(sourceRow);        dataG=green.getRowValues(sourceRow);        dataB=blue.getRowValues(sourceRow);        dataP=pan.getRowValues(row);        for (col=0; col < nColsPan; col++) {          x=westernEdge + (xRange * col) / nColsLessOne;          sourceCol=(int)Math.round((x - west) / (east - west) * (nCols - 0.5));          if (sourceCol >= nCols) {            break;          }          if (sourceCol < 0) {            sourceCol=0;          }          p=(dataP[col] - pMin) / pRange;          if (dataP[col] != panNoData && dataR[sourceCol] != redNoData && dataG[sourceCol] != greenNoData && dataB[sourceCol] != blueNoData) {            r=dataR[sourceCol];            g=dataG[sourceCol];            b=dataB[sourceCol];            adj=(r + g + b) / 3;            rOut=(int)(r * p / adj * 255);            gOut=(int)(g * p / adj * 255);            bOut=(int)(b * p / adj * 255);            if (rOut < 0) {              rOut=0;            }            if (gOut < 0) {              gOut=0;            }            if (bOut < 0) {              bOut=0;            }            if (rOut > 255) {              rOut=255;            }            if (gOut > 255) {              gOut=255;            }            if (bOut > 255) {              bOut=255;            }            z=(double)((255 << 24) | (bOut << 16) | (gOut << 8)| rOut);            output.setValue(row,col,z);          } else {            output.setValue(row,col,panNoData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (nRowsPan - 1));        updateProgress(progress);      }    } else     if (fusionMethod.contains("ihs")) {      double[] ihs=new double[3];      double[] rgb=new double[3];      for (row=0; row < nRowsPan; row++) {        y=northernEdge - (yRange * row) / nRowsLessOne;        sourceRow=(int)Math.round((north - y) / (north - south) * (nRows - 0.5));        if (sourceRow >= nRows) {          break;        }        if (sourceRow < 0) {          sourceRow=0;        }        dataR=red.getRowValues(sourceRow);        dataG=green.getRowValues(sourceRow);        dataB=blue.getRowValues(sourceRow);        dataP=pan.getRowValues(row);        for (col=0; col < nColsPan; col++) {          x=westernEdge + (xRange * col) / nColsLessOne;          sourceCol=(int)Math.round((x - west) / (east - west) * (nCols - 0.5));          if (sourceCol >= nCols) {            break;          }          if (sourceCol < 0) {            sourceCol=0;          }          p=(dataP[col] - pMin) / pRange;          if (dataP[col] != panNoData && dataR[sourceCol] != redNoData && dataG[sourceCol] != greenNoData && dataB[sourceCol] != blueNoData) {            r=dataR[sourceCol] / maxMSVal;            g=dataG[sourceCol] / maxMSVal;            b=dataB[sourceCol] / maxMSVal;            ihs=RGBtoIHS(r,g,b);            ihs[0]=p * 3;            rgb=IHStoRGB(ihs);            rOut=(int)(rgb[0] * 255);            gOut=(int)(rgb[1] * 255);            bOut=(int)(rgb[2] * 255);            if (rOut < 0) {              rOut=0;            }            if (gOut < 0) {              gOut=0;            }            if (bOut < 0) {              bOut=0;            }            if (rOut > 255) {              rOut=255;            }            if (gOut > 255) {              gOut=255;            }            if (bOut > 255) {              bOut=255;            }            z=(double)((255 << 24) | (bOut << 16) | (gOut << 8)| rOut);            output.setValue(row,col,z);          } else {            output.setValue(row,col,panNoData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (nRowsPan - 1));        updateProgress(progress);      }    }    pan.close();    red.close();    green.close();    blue.close();    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static String dec2Hex(int value,String result){  int r=value % 16;  String remainder=r >= 10 ? String.valueOf((char)('A' + r % 10)) : String.valueOf(r);  if (value / 16 == 0)   return remainder + result; else   return dec2Hex(value / 16,remainder + result);}  }
class C{  public static void disable(){}  }
class C{  protected void paintText(Graphics g,JComponent c,Rectangle textRect,String text){  AbstractButton b=(AbstractButton)c;  ButtonModel model=b.getModel();  FontMetrics fm=MySwingUtilities2.getFontMetrics(c,g);  int mnemonicIndex=b.getDisplayedMnemonicIndex();  if (model.isEnabled()) {    if (model.isSelected())     g.setColor(UIManager.getColor(getPropertyPrefix() + "focus")); else     g.setColor(b.getForeground());    MySwingUtilities2.drawStringUnderlineCharAt(c,g,text,mnemonicIndex,textRect.x + getTextShiftOffset(),textRect.y + fm.getAscent() + getTextShiftOffset());  } else {    g.setColor(b.getBackground().brighter());    MySwingUtilities2.drawStringUnderlineCharAt(c,g,text,mnemonicIndex,textRect.x,textRect.y + fm.getAscent());    g.setColor(b.getBackground().darker());    MySwingUtilities2.drawStringUnderlineCharAt(c,g,text,mnemonicIndex,textRect.x - 1,textRect.y + fm.getAscent() - 1);  }}  }
class C{  public boolean isSet(final int holder){  return (holder & _mask) != 0;}  }
class C{  public boolean isEOFWhenNoWindows(){  return eofWhenNoWindows;}  }
class C{  public TxInstruction(String name,String operandFormat,String formula,String commentFormat,String action,String sampleUse,String description,TxInstructionSet.InstructionFormat32 instructionFormat32,TxInstructionSet.InstructionFormat16 instructionFormat16,FlowType flowType,boolean isConditional,DelaySlotType delaySlotType,SimulationCode simulationCode){  super(name,operandFormat,formula,commentFormat,action,flowType,isConditional,delaySlotType,simulationCode);  this.instructionFormat32=instructionFormat32;  this.instructionFormat16=instructionFormat16;}  }
class C{  public ToStringBuilder append(String fieldName,Object[] array,boolean fullDetail){  style.append(buffer,fieldName,array,BooleanUtils.toBooleanObject(fullDetail));  return this;}  }
class C{  private boolean calculateAuthenticationSuccess(Object principal,Object credentials,Object tokenDetails){  boolean successAuthentication=false;  if (credentials instanceof Collection) {    final Collection<?> multiValueCredentials=(Collection<?>)credentials;    if (multiValueCredentials.contains(principal)) {      successAuthentication=checkSourceIPAddressIfNeccessary(tokenDetails);    }  } else   if (principal.equals(credentials)) {    successAuthentication=checkSourceIPAddressIfNeccessary(tokenDetails);  }  return successAuthentication;}  }
class C{  protected void logv(String s){  Log.v(mName,s);}  }
class C{  public void sendSipBye(SipDialogPath dialog) throws PayloadException, NetworkException {  boolean loggerActivated=sLogger.isActivated();  try {    SipRequest bye=SipMessageFactory.createBye(dialog);    SessionAuthenticationAgent agent=dialog.getAuthenticationAgent();    if (agent != null) {      agent.setProxyAuthorizationHeader(bye);    }    ClientTransaction transaction=createNewTransaction(bye);    if (loggerActivated) {      sLogger.debug(">>> Send SIP BYE");    }    if (mSipTraceEnabled) {      System.out.println(">>> " + bye.getStackMessage().toString());      System.out.println(TRACE_SEPARATOR);    }    dialog.getStackDialog().sendRequest(transaction);  } catch (  ParseException e) {    throw new PayloadException("Unable to instantiate SIP transaction!",e);  }catch (  SipException e) {    throw new NetworkException("Can't send SIP message!",e);  }}  }
class C{  int characterClass() throws RESyntaxException {  if (pattern.charAt(idx) != '[') {    internalError();  }  if ((idx + 1) >= len || pattern.charAt(++idx) == ']') {    syntaxError("Empty or unterminated class");  }  if (idx < len && pattern.charAt(idx) == ':') {    idx++;    int idxStart=idx;    while (idx < len && pattern.charAt(idx) >= 'a' && pattern.charAt(idx) <= 'z') {      idx++;    }    if ((idx + 1) < len && pattern.charAt(idx) == ':' && pattern.charAt(idx + 1) == ']') {      String charClass=pattern.substring(idxStart,idx);      Character i=(Character)hashPOSIX.get(charClass);      if (i != null) {        idx+=2;        return node(RE.OP_POSIXCLASS,i.charValue());      }      syntaxError("Invalid POSIX character class '" + charClass + "'");    }    syntaxError("Invalid POSIX character class syntax");  }  int ret=node(RE.OP_ANYOF,0);  char CHAR_INVALID=Character.MAX_VALUE;  char last=CHAR_INVALID;  char simpleChar;  boolean include=true;  boolean definingRange=false;  int idxFirst=idx;  char rangeStart=Character.MIN_VALUE;  char rangeEnd;  RERange range=new RERange();  while (idx < len && pattern.charAt(idx) != ']') {    switchOnCharacter: switch (pattern.charAt(idx)) {case '^':      include=!include;    if (idx == idxFirst) {      range.include(Character.MIN_VALUE,Character.MAX_VALUE,true);    }  idx++;continue;case '\\':{int c;switch (c=escape()) {case ESC_COMPLEX:case ESC_BACKREF:  syntaxError("Bad character class");case ESC_CLASS:if (definingRange) {  syntaxError("Bad character class");}switch (pattern.charAt(idx - 1)) {case RE.E_NSPACE:range.include(Character.MIN_VALUE,7,include);range.include((char)11,include);range.include(14,31,include);range.include(33,Character.MAX_VALUE,include);break;case RE.E_NALNUM:range.include(Character.MIN_VALUE,'/',include);range.include(':','@',include);range.include('[','^',include);range.include('`',include);range.include('{',Character.MAX_VALUE,include);break;case RE.E_NDIGIT:range.include(Character.MIN_VALUE,'/',include);range.include(':',Character.MAX_VALUE,include);break;case RE.E_SPACE:range.include('\t',include);range.include('\r',include);range.include('\f',include);range.include('\n',include);range.include('\b',include);range.include(' ',include);break;case RE.E_ALNUM:range.include('a','z',include);range.include('A','Z',include);range.include('_',include);case RE.E_DIGIT:range.include('0','9',include);break;}last=CHAR_INVALID;break;default :simpleChar=(char)c;break switchOnCharacter;}}continue;case '-':if (definingRange) {syntaxError("Bad class range");}definingRange=true;rangeStart=(last == CHAR_INVALID ? 0 : last);if ((idx + 1) < len && pattern.charAt(++idx) == ']') {simpleChar=Character.MAX_VALUE;break;}continue;default :simpleChar=pattern.charAt(idx++);break;}if (definingRange) {rangeEnd=simpleChar;if (rangeStart >= rangeEnd) {syntaxError("Bad character class");}range.include(rangeStart,rangeEnd,include);last=CHAR_INVALID;definingRange=false;} else {if (idx >= len || pattern.charAt(idx) != '-') {range.include(simpleChar,include);}last=simpleChar;}}if (idx == len) {syntaxError("Unterminated character class");}idx++;instruction[ret + RE.offsetOpdata]=(char)range.num;for (int i=0; i < range.num; i++) {emit((char)range.minRange[i]);emit((char)range.maxRange[i]);}return ret;}  }
class C{  @Deprecated static public SerialTrafficController instance(){  if (self == null) {    if (log.isDebugEnabled()) {      log.debug("creating a new SerialTrafficController object");    }    self=new SerialTrafficController();  }  return self;}  }
class C{  public static void wrapError(PsiBuilder builder,String msg){  Marker marker=builder.mark();  builder.advanceLexer();  marker.error(msg);}  }
class C{  private void cleanMapping(){  ArrayList<Integer> toRemove=new ArrayList<Integer>();  int size=mListMapping.size();  for (int i=0; i < size; ++i) {    if (mListMapping.keyAt(i) == mListMapping.valueAt(i)) {      toRemove.add(mListMapping.keyAt(i));    }  }  size=toRemove.size();  for (int i=0; i < size; ++i) {    mListMapping.delete(toRemove.get(i));  }}  }
class C{  @NonNull public MotionImitator rest(){  if (mSpring != null) {    mSpring.setEndValue(mRestValue);  }  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:56.897 -0500",hash_original_method="2167C0D1D3C772E3CF273B6DCAFE6265",hash_generated_method="1280E52145850A1DA713E9F5D7CFB6FB") public String encodeBody(){  StringBuffer retval=new StringBuffer();  if (address.getAddressType() == AddressImpl.ADDRESS_SPEC) {    retval.append(LESS_THAN);  }  retval.append(address.encode());  if (address.getAddressType() == AddressImpl.ADDRESS_SPEC) {    retval.append(GREATER_THAN);  }  return retval.toString();}  }
class C{  public boolean needPreloadKey(int idx){  return preloadKeys != null && preloadKeys.get(idx);}  }
class C{  public StringBuilder dump(final IKeyOrder<ISPO> keyOrder){  final StringBuilder sb=new StringBuilder();  final IPredicate<ISPO> pred=new SPOPredicate(keyArity == 4 ? new BOp[]{Var.var("s"),Var.var("p"),Var.var("o"),Var.var("c")} : new BOp[]{Var.var("s"),Var.var("p"),Var.var("o")},NV.asMap(new NV[]{new NV(IPredicate.Annotations.RELATION_NAME,new String[]{getNamespace()})}));  final IChunkedOrderedIterator<ISPO> itr=getAccessPath(keyOrder,pred).iterator();  try {    while (itr.hasNext()) {      sb.append(itr.next());      sb.append("\n");    }  }  finally {    itr.close();  }  return sb;}  }
class C{  public boolean isRole(){  return RESPONSIBLETYPE_Role.equals(getResponsibleType()) && getAD_Role_ID() != 0;}  }
class C{  public Element store(Object o){  Element e=new Element("perform");  PerformScriptModel g=(PerformScriptModel)o;  e.setAttribute("name",FileUtil.getPortableFilename(g.getFileName()));  e.setAttribute("type","ScriptFile");  e.setAttribute("class",this.getClass().getName());  return e;}  }
class C{  public synchronized void flush() throws IOException {  checkNotClosed();  trimToSize();  journalWriter.flush();}  }
class C{  public static boolean isNetworkUri(Uri uri){  final String scheme=getSchemeOrNull(uri);  return HTTPS_SCHEME.equals(scheme) || HTTP_SCHEME.equals(scheme);}  }
class C{  public RegionCommands(WorldEdit worldEdit){  checkNotNull(worldEdit);  this.worldEdit=worldEdit;}  }
class C{  public Object clone() throws CloneNotSupportedException {  NodeSet clone=(NodeSet)super.clone();  if ((null != this.m_map) && (this.m_map == clone.m_map)) {    clone.m_map=new Node[this.m_map.length];    System.arraycopy(this.m_map,0,clone.m_map,0,this.m_map.length);  }  return clone;}  }
class C{  protected String parseQuotedString() throws IOException, RDFParseException {  String result=null;  int c1=readCodePoint();  verifyCharacterOrFail(c1,"\"\'");  int c2=readCodePoint();  int c3=readCodePoint();  if ((c1 == '"' && c2 == '"' && c3 == '"') || (c1 == '\'' && c2 == '\'' && c3 == '\'')) {    result=parseLongString(c2);  } else {    unread(c3);    unread(c2);    result=parseString(c1);  }  try {    result=TurtleUtil.decodeString(result);  } catch (  IllegalArgumentException e) {    reportError(e.getMessage(),BasicParserSettings.VERIFY_DATATYPE_VALUES);  }  return result;}  }
class C{  public ExpandVetoException(TreeExpansionEvent event){  this(event,null);}  }
class C{  public SpinnerDateModel(){  this(new Date(),null,null,Calendar.DAY_OF_MONTH);}  }
class C{  protected void pushValue(Type type){  if (type.getType() == T_VOID) {    throw new IllegalArgumentException("Can't push void");  }  TypeFrame frame=getFrame();  if (type.getType() == T_LONG) {    frame.pushValue(Type.LONG);    frame.pushValue(TypeFrame.getLongExtraType());  } else   if (type.getType() == T_DOUBLE) {    frame.pushValue(Type.DOUBLE);    frame.pushValue(TypeFrame.getDoubleExtraType());  } else {    frame.pushValue(type);  }}  }
class C{  public void process() throws TemplateException, IOException {  Object savedEnv=threadEnv.get();  threadEnv.set(this);  try {    clearCachedValues();    try {      doAutoImportsAndIncludes(this);      visit(getTemplate().getRootTreeNode());      if (getAutoFlush()) {        out.flush();      }    }  finally {      clearCachedValues();    }  }  finally {    threadEnv.set(savedEnv);  }}  }
class C{  protected void createWithPath(String path,Bitmap.Config config){  BitmapFactory.Options options=new BitmapFactory.Options();  options.inDither=true;  options.inPreferredConfig=config;  mBitmap=BitmapFactory.decodeFile(path,options);  mWidth=mBitmap.getWidth();  mHeight=mBitmap.getHeight();  mIsRecycled=false;  mIsLoaded=true;}  }
class C{  public boolean isPrimitive(){  return scanner.isPrimitive();}  }
class C{  protected void beforeShowContainer(Container c){}  }
class C{  public void windowOpened(WindowEvent e){  ((WindowListener)a).windowOpened(e);  ((WindowListener)b).windowOpened(e);}  }
class C{  public ComponentBuilder(String text){  current=new TextComponent(text);}  }
class C{  @KnownFailure("Fixed on DonutBurger, Wrong Exception thrown") public void test_unwrap_ByteBuffer_ByteBuffer_03(){  String host="new host";  int port=8080;  ByteBuffer bbsN=null;  ByteBuffer bbdN=null;  ByteBuffer bbs=ByteBuffer.allocate(10);  ByteBuffer bbd=ByteBuffer.allocate(100);  SSLEngine sse=getEngine(host,port);  sse.setUseClientMode(true);  try {    sse.unwrap(bbsN,bbd);    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException iae) {  }catch (  NullPointerException npe) {  }catch (  Exception e) {    fail(e + " was thrown instead of IllegalArgumentException");  }  try {    sse.unwrap(bbs,bbdN);    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException iae) {  }catch (  NullPointerException npe) {  }catch (  Exception e) {    fail(e + " was thrown instead of IllegalArgumentException");  }  try {    sse.unwrap(bbsN,bbdN);    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException iae) {  }catch (  NullPointerException npe) {  }catch (  Exception e) {    fail(e + " was thrown instead of IllegalArgumentException");  }}  }
class C{  @AntDoc("An argument to be passed to the module") public void addConfiguredArg(Arg arg){  this.args.add(arg);}  }
class C{  WeakProtectionDomainKey(ProtectionDomain pd,ReferenceQueue<Key> rq){  this((pd == null ? NULL_KEY : pd.key),rq);}  }
class C{  @Override public synchronized void addListener(final Listener listener,final Executor executor){  listeners.put(listener,executor);  addListenersForReal(delegate,addedListeners,listener,executor);}  }
class C{  public boolean isAccessDenied(final String viewName){  final List<DashboardMenuItem> accessibleViews=getAccessibleViews();  boolean accessDeined=Boolean.TRUE.booleanValue();  for (  final DashboardMenuItem dashboardViewType : accessibleViews) {    if (dashboardViewType.getViewName().equals(viewName)) {      accessDeined=Boolean.FALSE.booleanValue();    }  }  return accessDeined;}  }
class C{  public static void logOpenedByNotification(String target){  Map<String,String> event=new HitBuilders.EventBuilder().setAction("OPENED_BY_NOTIFICATION").setLabel("OPENED_BY_NOTIFICATION with link:" + target + ".").build();  sendEventToAppTrackers(event);}  }
class C{  public void writeContactId(String key,ContactId value){  if (writeParameter(key,value == null ? null : value.toString()) != 0) {    mCache.put(key,value);  }}  }
class C{  public <T>CompletableFuture<T> submit(Query<T> query){  State state=state();  if (state == State.CLOSED || state == State.EXPIRED) {    return Futures.exceptionalFuture(new ClosedSessionException("session closed"));  }  return submitter.submit(query);}  }
class C{  private static void SetLongField(JNIEnvironment env,int objJREF,int fieldID,long value){  if (traceJNI)   VM.sysWrite("JNI called: SetLongField  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object obj=env.getJNIRef(objJREF);    RVMField field=MemberReference.getFieldRef(fieldID).resolve();    field.setLongValueUnchecked(obj,value);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);  }}  }
class C{  @Override public void snmpV2Trap(InetAddress addr,String cs,SnmpOid trapOid,SnmpVarBindList varBindList) throws IOException, SnmpStatusException {  if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINER)) {    SNMP_ADAPTOR_LOGGER.logp(Level.FINER,dbgTag,"snmpV2Trap","trapOid=" + trapOid);  }  SnmpPduRequest pdu=new SnmpPduRequest();  pdu.address=null;  pdu.port=trapPort;  pdu.type=pduV2TrapPdu;  pdu.version=snmpVersionTwo;  if (cs != null)   pdu.community=cs.getBytes(); else   pdu.community=null;  SnmpVarBindList fullVbl;  if (varBindList != null)   fullVbl=varBindList.clone(); else   fullVbl=new SnmpVarBindList(2);  SnmpTimeticks sysUpTimeValue=new SnmpTimeticks(getSysUpTime());  fullVbl.insertElementAt(new SnmpVarBind(snmpTrapOidOid,trapOid),0);  fullVbl.insertElementAt(new SnmpVarBind(sysUpTimeOid,sysUpTimeValue),0);  pdu.varBindList=new SnmpVarBind[fullVbl.size()];  fullVbl.copyInto(pdu.varBindList);  if (addr != null)   sendTrapPdu(addr,pdu); else   sendTrapPdu(pdu);}  }
class C{  public Matrix3f rotateZYX(float angleZ,float angleY,float angleX){  return rotateZYX(angleZ,angleY,angleX,this);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:11.164 -0500",hash_original_method="8195A5AC7EDE6C7AAA15CD33C312F38D",hash_generated_method="AD9F182D1FD77219DDE792983B414E62") String remapGenericMimeType(String mimeType,String url,String contentDisposition){  if ("text/plain".equals(mimeType) || "application/octet-stream".equals(mimeType)) {    String filename=null;    if (contentDisposition != null) {      filename=URLUtil.parseContentDisposition(contentDisposition);    }    if (filename != null) {      url=filename;    }    String extension=getFileExtensionFromUrl(url);    String newMimeType=getMimeTypeFromExtension(extension);    if (newMimeType != null) {      mimeType=newMimeType;    }  } else   if ("text/vnd.wap.wml".equals(mimeType)) {    mimeType="text/plain";  } else {    if ("application/vnd.wap.xhtml+xml".equals(mimeType)) {      mimeType="application/xhtml+xml";    }  }  return mimeType;}  }
class C{  public static EntityReference parseEntityReference(String identityString){  return new EntityReference(new StringIdentity(identityString));}  }
class C{  public FileWriteStream(FileOutputStream fos){  super(null,fos);  _os=fos;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  double minVal;  float progress=0;  int a;  int filterSizeX=3;  int filterSizeY=3;  int dX[];  int dY[];  int midPointX;  int midPointY;  int numPixelsInFilter;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      filterSizeX=Integer.parseInt(args[i]);    } else     if (i == 3) {      filterSizeY=Integer.parseInt(args[i]);    } else     if (i == 4) {      filterRounded=Boolean.parseBoolean(args[i]);    } else     if (i == 5) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          minVal=z;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z != noData && filterShape[a] == 1) {              if (z < minVal) {                minVal=z;              }            }          }          outputFile.setValue(row,col,minVal);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private String quotedAV() throws IOException {  pos++;  beg=pos;  end=beg;  while (true) {    if (pos == chars.length) {      throw new IOException("Invalid distinguished name string");    }    if (chars[pos] == '"') {      pos++;      break;    } else     if (chars[pos] == '\\') {      chars[end]=getEscaped();    } else {      chars[end]=chars[pos];    }    pos++;    end++;  }  for (; pos < chars.length && chars[pos] == ' '; pos++) {  }  return new String(chars,beg,end - beg);}  }
class C{  public ModifyDefSpell(RPObject object){  super(object);}  }
class C{  @Override public void updateNull(int columnIndex) throws SQLException {  try {    debugCodeCall("updateNull",columnIndex);    update(columnIndex,ValueNull.INSTANCE);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void attachToMovingGrabPoint(OffsetGrabPoint gp){  gp.addGrabPoint(gpo);}  }
class C{  public Builder titleLocArgs(List<String> value){  titleLocArgs=Collections.unmodifiableList(value);  return this;}  }
class C{  private void notifyWifiAPState(){synchronized (this) {    Log.v(LOG_TAG,"notify wifi AP state changed.");    this.notify();  }}  }
class C{  public Posts createPosts(){  return mAdapter.create(Posts.class);}  }
class C{  public boolean nullPlusNonNullIsNull() throws SQLException {  return true;}  }
class C{  public static void openView(Object inputElement){  IWorkbenchPage activePage=Activator.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage();  InfoFlowDetailsViewPart view=(InfoFlowDetailsViewPart)activePage.findView(VIEW_ID);  if (view == null) {    try {      view=(InfoFlowDetailsViewPart)activePage.showView(VIEW_ID);    } catch (    PartInitException e) {      e.printStackTrace();    }  }  view.setInputElement(inputElement);  activePage.activate(view);}  }
class C{  @Override public String toString(){  return "ProcessInQueueModel{" + "transactionId=" + transactionId + ", s3Object='"+ s3Object+ '\''+ '}';}  }
class C{  public void calculateLogLikelihoods(double[] partials,double[] frequencies,double[] outLogLikelihoods){  int v=0;  for (int k=0; k < patternCount; k++) {    double sum=0.0;    for (int i=0; i < stateCount; i++) {      sum+=frequencies[i] * partials[v];      v++;    }    outLogLikelihoods[k]=Math.log(sum) + getLogScalingFactor(k);  }}  }
class C{  static int kindFromString(String kindStr){  if (kindStr.equalsIgnoreCase("prj"))   return IClasspathEntry.CPE_PROJECT;  if (kindStr.equalsIgnoreCase("var"))   return IClasspathEntry.CPE_VARIABLE;  if (kindStr.equalsIgnoreCase("con"))   return IClasspathEntry.CPE_CONTAINER;  if (kindStr.equalsIgnoreCase("src"))   return IClasspathEntry.CPE_SOURCE;  if (kindStr.equalsIgnoreCase("lib"))   return IClasspathEntry.CPE_LIBRARY;  if (kindStr.equalsIgnoreCase("output"))   return org.eclipse.jdt.internal.core.ClasspathEntry.K_OUTPUT;  return -1;}  }
class C{  @Override public IStriterator addFilter(final IFilter filter){  if (filters == null) {synchronized (this) {      if (filters == null) {        filters=Collections.synchronizedList(new LinkedList<IFilter>());      }    }  }  filters.add(filter);  return this;}  }
class C{  public void testIsConnected_WithServer() throws IOException {  connectLocalServer();  disconnectAfterConnected();  this.datagramSocket1.close();  this.channel1.close();  assertFalse(this.channel1.isConnected());}  }
class C{  public void download(int identificador,DbConnection db) throws ISicresAdminDAOException {  DynamicTable tableInfo=new DynamicTable();  DynamicRows rowsInfo=new DynamicRows();  DynamicRow rowInfo=new DynamicRow();  SicresInformeTabla table=new SicresInformeTabla();  if (logger.isDebugEnabled()) {    logger.debug("Obteniendo datos de scr_report...");  }  try {    tableInfo.setTableObject(table);    tableInfo.setClassName(table.getClass().getName());    tableInfo.setTablesMethod("getTableName");    tableInfo.setColumnsMethod("getColumnNames");    rowInfo.addRow(this);    rowInfo.setClassName(this.getClass().getName());    rowInfo.setValuesMethod("loadAllValues");    rowsInfo.add(rowInfo);    if (!DynamicFns.select(db,table.getById(identificador),tableInfo,rowsInfo,false)) {    }    if (logger.isDebugEnabled()) {      logger.debug("Datos de scr_report obtenidos.");    }  } catch (  Exception e) {    if (e instanceof ISicresAdminDAOException)     logger.warn("No se ha encontrado fila en scr_report"); else     logger.error("Error obteniendo datos de scr_report");    throw new ISicresAdminDAOException(ISicresAdminDAOException.EXC_GENERIC_EXCEPCION,e);  }}  }
class C{  public LuaValue stop(U audio,Varargs varargs){  return audio.stop();}  }
class C{  public DocumentSerializationException(Throwable cause){  super(cause);}  }
class C{  @Override public int hashCode(){  return id.hashCode();}  }
class C{  protected static void generateMatchEvents(ArrayList<List<MatchedEventMap>> eventList,int index,List<MatchedEventMap> result,MatchedEventMap matchEvent){  List<MatchedEventMap> events=eventList.get(index);  for (  MatchedEventMap theEvent : events) {    MatchedEventMap current=matchEvent.shallowCopy();    current.merge(theEvent);    if ((index + 1) == eventList.size()) {      result.add(current);    } else {      generateMatchEvents(eventList,index + 1,result,current);    }  }}  }
class C{  protected void handleSecurityException(SecurityException se){  if (userAgent != null) {    userAgent.displayError(se);  }}  }
class C{  public void push(StackFrame frame){  top=top.plus(frame.sizeInBytes());  assert top.LT(stackLimit);  stack.push(frame);}  }
class C{  public void CancelClick(){  onView(withText("Cancel")).perform(click());  onView(withId(R.id.btnCapture)).check(matches(isDisplayed()));}  }
class C{  @LargeTest public void testPropertiesMPEG4854_480() throws Exception {  final String videoItemFilename=INPUT_FILE_PATH + "MPEG4_SP_854x480_15fps_256kbps_AACLC_16khz_48kbps_s_0_26.mp4";  final int aspectRatio=MediaProperties.ASPECT_RATIO_16_9;  final int fileType=MediaProperties.FILE_MP4;  final int videoCodecType=MediaProperties.VCODEC_MPEG4;  final int duration=26933;  final int videoBitrate=319000;  final int audioBitrate=48000;  final int fps=15;  final int audioCodecType=MediaProperties.ACODEC_AAC_LC;  final int audioSamplingFrequency=16000;  final int audioChannel=2;  final int videoProfile=MediaProperties.MPEG4Profile.MPEG4ProfileSimple;  final int videoLevel=MediaProperties.MPEG4Level.MPEG4Level1;  final int width=854;  final int height=MediaProperties.HEIGHT_480;  final MediaVideoItem mvi=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFilename,MediaItem.RENDERING_MODE_BLACK_BORDER);  validateVideoProperties(aspectRatio,fileType,videoCodecType,duration,videoBitrate,fps,videoProfile,videoLevel,width,height,audioCodecType,audioSamplingFrequency,audioChannel,audioBitrate,mvi);}  }
class C{  public static void printPadding(PrintWriter out,int padding){  for (int i=0; i < padding; ++i) {    out.print(" ");  }}  }
class C{  @RequestProcessing(value="/notifications/at",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,LoginCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void showAtNotifications(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  final JSONObject currentUser=userQueryService.getCurrentUser(request);  if (null == currentUser) {    response.sendError(HttpServletResponse.SC_FORBIDDEN);    return;  }  request.setAttribute(Keys.TEMAPLTE_DIR_NAME,Symphonys.get("skinDirName"));  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();  context.setRenderer(renderer);  renderer.setTemplateName("/home/notifications/at.ftl");  final Map<String,Object> dataModel=renderer.getDataModel();  final String userId=currentUser.optString(Keys.OBJECT_ID);  String pageNumStr=request.getParameter("p");  if (Strings.isEmptyOrNull(pageNumStr) || !Strings.isNumeric(pageNumStr)) {    pageNumStr="1";  }  final int pageNum=Integer.valueOf(pageNumStr);  final int pageSize=Symphonys.getInt("atNotificationsCnt");  final int windowSize=Symphonys.getInt("atNotificationsWindowSize");  final JSONObject result=notificationQueryService.getAtNotifications(userId,pageNum,pageSize);  @SuppressWarnings("unchecked") final List<JSONObject> atNotifications=(List<JSONObject>)result.get(Keys.RESULTS);  dataModel.put(Common.AT_NOTIFICATIONS,atNotifications);  fillNotificationCount(userId,dataModel);  notificationMgmtService.makeRead(atNotifications);  final int recordCnt=result.getInt(Pagination.PAGINATION_RECORD_COUNT);  final int pageCount=(int)Math.ceil((double)recordCnt / (double)pageSize);  final List<Integer> pageNums=Paginator.paginate(pageNum,pageSize,pageCount,windowSize);  if (!pageNums.isEmpty()) {    dataModel.put(Pagination.PAGINATION_FIRST_PAGE_NUM,pageNums.get(0));    dataModel.put(Pagination.PAGINATION_LAST_PAGE_NUM,pageNums.get(pageNums.size() - 1));  }  dataModel.put(Pagination.PAGINATION_CURRENT_PAGE_NUM,pageNum);  dataModel.put(Pagination.PAGINATION_PAGE_COUNT,pageCount);  dataModel.put(Pagination.PAGINATION_PAGE_NUMS,pageNums);  filler.fillHeaderAndFooter(request,response,dataModel);}  }
class C{  public void addBinding(String name,Value value){  assert !bindings.containsKey(name) : "variable already bound: " + name;  setBinding(name,value);}  }
class C{  public Env(JCTree tree,A info){  this.next=null;  this.outer=null;  this.tree=tree;  this.toplevel=null;  this.enclClass=null;  this.enclMethod=null;  this.info=info;}  }
class C{  public ShortStream(AbstractDriver driver,String name,short minValue,short maxValue,short zeroValue,short defaultValue,String stringPre,String stringPost,int presentation,int paintStyle,int indexMaxStream,Color colour,boolean summary){  super(driver,name,minValue,maxValue,zeroValue,defaultValue,stringPre,stringPost,presentation,paintStyle,indexMaxStream,colour,summary);  if (VM.BuildWithGCSpy) {    Address tmpName=GCspy.util.getBytes(name);    Address tmpPre=GCspy.util.getBytes(stringPre);    Address tmpPost=GCspy.util.getBytes(stringPost);    sysCall.gcspyStreamInit(stream,streamId,SHORT_TYPE,tmpName,minValue,maxValue,zeroValue,defaultValue,tmpPre,tmpPost,presentation,paintStyle,indexMaxStream,colour.getRed(),colour.getGreen(),colour.getBlue());  }}  }
class C{  public static void show(Context context,@StringRes int messageResource){  show(context,context.getResources().getString(messageResource));}  }
class C{  private void invalidateLayouts(){  itemsLayout=null;  valueLayout=null;  scrollingOffset=0;}  }
class C{  public TimeSeriesModel(int numDataSources){  addDataSources(numDataSources);}  }
class C{  public PlatformCache withNoRetries(){  CacheOperationContext opCtx=cache.operationContext();  if (opCtx != null && opCtx.noRetries())   return this;  return copy(rawCache.withNoRetries(),keepBinary);}  }
class C{  private boolean isWhitespace(int offset,int exclusiveEnd){  if (exclusiveEnd == DONE || offset == DONE)   return false;  Assert.isTrue(offset >= 0);  Assert.isTrue(exclusiveEnd <= getText().getEndIndex());  Assert.isTrue(exclusiveEnd > offset);  CharSequence seq=fIterator.fText;  while (offset < exclusiveEnd) {    char ch=seq.charAt(offset);    if (!Character.isWhitespace(ch))     return false;    if (ch == '\n' || ch == '\r')     return false;    offset++;  }  return true;}  }
class C{  public String createMoveRefactoringSession(IJavaElement[] javaElements) throws JavaModelException, RefactoringException {  IReorgPolicy.IMovePolicy policy=ReorgPolicyFactory.createMovePolicy(new IResource[0],javaElements);  if (policy.canEnable()) {    JavaMoveProcessor processor=new JavaMoveProcessor(policy);    processor.setReorgQueries(new NullReorgQueries());    processor.setCreateTargetQueries(null);    Refactoring refactoring=new MoveRefactoring(processor);    MoveRefactoringSession session=new MoveRefactoringSession(refactoring,processor);    final String id=String.format("move-%s",sessionId.getAndIncrement());    sessions.put(id,session);    return id;  } else {    throw new RefactoringException("Can't create move refactoring session.");  }}  }
class C{  public ReferenceMap(final ReferenceStrength keyType,final ReferenceStrength valueType){  super(keyType,valueType,DEFAULT_CAPACITY,DEFAULT_LOAD_FACTOR,false);}  }
class C{  private void prepareBuffers(){  ByteBuffer[] out1=new ByteBuffer[1];  ByteBuffer buffer=ByteBuffer.allocate(dimensionValue1.length());  buffer.put(dimensionValue1.getBytes(Charset.forName("UTF-8")));  buffer.rewind();  out1[0]=buffer;  ByteBuffer[] out2=new ByteBuffer[1];  ByteBuffer buffer2=ByteBuffer.allocate(dimensionValue2.length());  buffer2.put(dimensionValue2.getBytes(Charset.forName("UTF-8")));  buffer2.rewind();  out2[0]=buffer2;  byte[] arr1=packByteBufferIntoSingleByteArray(out1);  byte[] arr2=packByteBufferIntoSingleByteArray(out2);  buff1=ByteBuffer.wrap(arr1);  buff1.position(4);  buff1.limit(buff1.position() + dimensionValue1.length());  buff2=ByteBuffer.wrap(arr2);  buff2.position(4);  buff2.limit(buff2.position() + dimensionValue2.length());}  }
class C{  public void remove(int start,int end){  checkWidget();  table.remove(start,end);}  }
class C{  private void notifyServiceRevokedToServiceUsers(Class<?> serviceClass,BeanContextServiceProvider serviceProvider,boolean revokeCurrentServicesNow){synchronized (children) {    for (Iterator<Object> iter=bcsChildren(); iter.hasNext(); ) {      BCSSChild bcssChild=(BCSSChild)iter.next();      notifyServiceRevokedToServiceUsers(serviceClass,serviceProvider,revokeCurrentServicesNow,bcssChild);    }  }}  }
class C{  private boolean areVolumesInCG(String cgName,List<VPlexClusterInfo> clusterInfoList,List<String> virtualVolumeNames){  VPlexApiDiscoveryManager discoveryMgr=_vplexApiClient.getDiscoveryManager();  VPlexConsistencyGroupInfo cgInfo=discoveryMgr.findConsistencyGroup(cgName,clusterInfoList,true);  for (  String vvolName : virtualVolumeNames) {    if (!cgInfo.getVirtualVolumes().contains(vvolName)) {      return false;    }  }  return true;}  }
class C{  protected DOMUtilities(){}  }
class C{  @Override public void put(String name,char value){  emulatedFields.put(name,value);}  }
class C{  public ModbusUDPMaster(String addr){  this(addr,Modbus.DEFAULT_PORT);}  }
class C{  public static String version(){  return version("release");}  }
class C{  private String evaluateVelocityTemplate(ConfigurationValue configurationValue,Map<String,Object> contextMap,String velocityTemplateName){  String messageText=null;  String velocityTemplate=configurationHelper.getProperty(configurationValue);  if (StringUtils.isNotBlank(velocityTemplate)) {    Map<String,Object> context=new HashMap<>();    context.put(ConfigurationValue.HERD_NOTIFICATION_SQS_ENVIRONMENT.getKey().replace('.','_'),configurationHelper.getProperty(ConfigurationValue.HERD_NOTIFICATION_SQS_ENVIRONMENT));    context.put("current_time",HerdDateUtils.now().toString());    context.put("uuid",UUID.randomUUID().toString());    context.put("username",herdDaoSecurityHelper.getCurrentUsername());    context.put("StringUtils",StringUtils.class);    context.put("CollectionUtils",CollectionUtils.class);    for (    Map.Entry<String,Object> mapEntry : contextMap.entrySet()) {      context.put(mapEntry.getKey(),mapEntry.getValue());    }    messageText=velocityHelper.evaluate(velocityTemplate,context,velocityTemplateName);  }  return messageText;}  }
class C{  private static List<Image> createLogos(){  List<Image> logos=new ArrayList<>();  logos.add(new Logo(48).getImage());  logos.add(new Logo(64).getImage());  logos.add(new Logo(96).getImage());  logos.add(new Logo(128).getImage());  logos.add(new Logo(256).getImage());  return logos;}  }
class C{  private IOException syntaxError(String message) throws IOException {  throw new IOException(message + " at path " + XmlScope.getPath(stackSize,stack,pathNames,pathIndices));}  }
class C{  public void show(Resource resource){  final Optional<Project> project=resource.getRelatedProject();  if (project.isPresent()) {    final FqnProvider provider=providers.get(project.get().getType());    try {      view.show(provider.getFqn(resource),resource.getLocation());    } catch (    RuntimeException e) {      view.show("",resource.getLocation());    }  }}  }
class C{  private String createNewZipEntryName(String path){  return path.replace(serverRoot + "/","");}  }
class C{  public static BoundingBox createBoundingBox(double xmin,double ymin,double xmax,double ymax){  return new BoundingBox(xmin,ymin,xmax,ymax);}  }
class C{  public Vector solution(int p) throws ArithmeticException {  if (solutions == null)   solve();  if (solutions[p] == null)   backSubstitution(p);  return solutions[p];}  }
class C{  public boolean isSplitterMovable(){  return mSplitterMovable;}  }
class C{  public CoordinateDD toDD(){  final double _degreesNorth=CoordinateUtility.toDecimalDegrees(degreesNorth,minutesNorth,tenthsOfSecondsNorth / 10d);  final double _degreesEast=CoordinateUtility.toDecimalDegrees(degreesEast,minutesEast,tenthsOfSecondsEast / 10d);  return new CoordinateDD(_degreesNorth,_degreesEast);}  }
class C{  private static String simplifyComments(String token){  if (token.startsWith("//")) {    token="/*" + token.substring(2) + "*/";  }  if (!token.startsWith("/*")) {    return token;  }  StringBuilder sb=new StringBuilder(token);  for (int i=sb.length() - 2; --i >= 2; ) {    if (JsLexer.isJsLineSeparator(sb.charAt(i))) {      sb.setCharAt(i,' ');    }  }  for (int close=-1; (close=sb.indexOf("*/",close + 1)) >= 0; ) {    sb.setCharAt(close + 1,' ');  }  return sb.toString();}  }
class C{  public static boolean instanceOfNonArray(RVMClass LHSclass,TIB rhsTIB){  if (LHSclass.isInterface()) {    return instanceOfInterface(LHSclass,rhsTIB);  } else {    return instanceOfClass(LHSclass,rhsTIB);  }}  }
class C{  @SuppressWarnings("unchecked") public void test_parallelRangeIterator(){  final String name="testIndex";  final IndexMetadata metadata=new IndexMetadata(name,UUID.randomUUID());  metadata.setTupleSerializer(NOPTupleSerializer.INSTANCE);  fed.registerIndex(metadata,new byte[][]{new byte[]{},new byte[]{4},new byte[]{7},new byte[]{10}},null);  final IIndex ndx=fed.getIndex(name,ITx.UNISOLATED);  ndx.insert(new byte[]{1},new byte[]{1});  ndx.insert(new byte[]{2},new byte[]{2});  ndx.insert(new byte[]{3},new byte[]{3});  ndx.insert(new byte[]{4},new byte[]{4});  ndx.insert(new byte[]{5},new byte[]{5});  ndx.insert(new byte[]{6},new byte[]{6});  ndx.insert(new byte[]{10},new byte[]{10});  ndx.insert(new byte[]{11},new byte[]{11});  ndx.insert(new byte[]{12},new byte[]{12});  final int capacity=0;  final int flags=IRangeQuery.DEFAULT | IRangeQuery.PARALLEL;  final long timestamp=0L;  final ITupleSerializer tupleSer=ndx.getIndexMetadata().getTupleSerializer();{    final ITupleIterator itr=ndx.rangeIterator(new byte[]{10},new byte[]{13},capacity,flags,null);    assertSameIteratorAnyOrder(new ITuple[]{new TestTuple(flags,tupleSer,new byte[]{10},new byte[]{10},false,timestamp),new TestTuple(flags,tupleSer,new byte[]{11},new byte[]{11},false,timestamp),new TestTuple(flags,tupleSer,new byte[]{12},new byte[]{12},false,timestamp)},itr);  }{    final ITupleIterator itr=ndx.rangeIterator(new byte[]{11},new byte[]{12},capacity,flags,null);    assertSameIteratorAnyOrder(new ITuple[]{new TestTuple(flags,tupleSer,new byte[]{11},new byte[]{11},false,timestamp)},itr);  }{    final ITupleIterator itr=ndx.rangeIterator(null,null,capacity,flags,null);    assertSameIteratorAnyOrder(new ITuple[]{new TestTuple(flags,tupleSer,new byte[]{1},new byte[]{1},false,timestamp),new TestTuple(flags,tupleSer,new byte[]{2},new byte[]{2},false,timestamp),new TestTuple(flags,tupleSer,new byte[]{3},new byte[]{3},false,timestamp),new TestTuple(flags,tupleSer,new byte[]{4},new byte[]{4},false,timestamp),new TestTuple(flags,tupleSer,new byte[]{5},new byte[]{5},false,timestamp),new TestTuple(flags,tupleSer,new byte[]{6},new byte[]{6},false,timestamp),new TestTuple(flags,tupleSer,new byte[]{10},new byte[]{10},false,timestamp),new TestTuple(flags,tupleSer,new byte[]{11},new byte[]{11},false,timestamp),new TestTuple(flags,tupleSer,new byte[]{12},new byte[]{12},false,timestamp)},itr);  }{    final ITupleIterator itr=ndx.rangeIterator(new byte[]{2},new byte[]{12},capacity,flags,null);    assertSameIteratorAnyOrder(new ITuple[]{new TestTuple(flags,tupleSer,new byte[]{2},new byte[]{2},false,timestamp),new TestTuple(flags,tupleSer,new byte[]{3},new byte[]{3},false,timestamp),new TestTuple(flags,tupleSer,new byte[]{4},new byte[]{4},false,timestamp),new TestTuple(flags,tupleSer,new byte[]{5},new byte[]{5},false,timestamp),new TestTuple(flags,tupleSer,new byte[]{6},new byte[]{6},false,timestamp),new TestTuple(flags,tupleSer,new byte[]{10},new byte[]{10},false,timestamp),new TestTuple(flags,tupleSer,new byte[]{11},new byte[]{11},false,timestamp)},itr);  }}  }
class C{  @Override synchronized public void write(byte b[],int off,int len) throws IOException {  if (b == null) {    throw new NullPointerException();  } else   if (off < 0 || len < 0 || len > b.length - off) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return;  }  c.checkWrite();  boolean isFirstRecordOfThePayload=true;  try {    do {      boolean holdRecord=false;      int howmuch;      if (isFirstRecordOfThePayload && c.needToSplitPayload()) {        howmuch=Math.min(0x01,r.availableDataBytes());        if ((len != 1) && (howmuch == 1)) {          holdRecord=true;        }      } else {        howmuch=Math.min(len,r.availableDataBytes());      }      if (isFirstRecordOfThePayload && howmuch != 0) {        isFirstRecordOfThePayload=false;      }      if (howmuch > 0) {        r.write(b,off,howmuch);        off+=howmuch;        len-=howmuch;      }      c.writeRecord(r,holdRecord);      c.checkWrite();    } while (len > 0);  } catch (  Exception e) {    c.handleException(e);  }}  }
class C{  private boolean isToAddOrientationHeader(byte[] h264Frame,VideoOrientation frameOrientation){  H264RtpHeaders h264Header=new H264RtpHeaders(h264Frame);  if (h264Header.isIDRSlice()) {    return true;  }  if ((frameOrientation != null && previousOrientation != null && previousOrientation.getOrientation() != frameOrientation.getOrientation()) && h264Header.isNonIDRSlice()) {    return true;  }  return false;}  }
class C{  public Crossfader withResizeContentPanel(boolean resizeContentPanel){  this.mResizeContentPanel=resizeContentPanel;  enableResizeContentPanel(mResizeContentPanel);  return this;}  }
class C{  public ImageException(String message,Reason reason,Throwable e){  super(message + " Cause: " + e.toString(),e);  bean.setReason(reason);  setMessageKey(getMessageKey() + "." + reason.name());}  }
class C{  @Override public void moveToInsertRow() throws SQLException {  try {    debugCodeCall("moveToInsertRow");    checkUpdatable();    insertRow=new Value[columnCount];  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public DijkstraShortestPath(Graph<V,E> g,Function<E,? extends Number> nev,boolean cached){  super(g,nev,cached);}  }
class C{  public static String decodeString(String s){  return new String(decode(s));}  }
class C{  public static void disableLighting(){  RenderHelper.disableStandardItemLighting();  OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit,240.0F,240.0F);}  }
class C{  @Override protected void onStart(){  super.onStart();  Log.d(TAG,"onStart() - the activity is about to become visible");}  }
class C{  public boolean bucketAccessible(GcsPath path) throws IOException {  return bucketAccessible(path,BACKOFF_FACTORY.backoff(),Sleeper.DEFAULT);}  }
class C{  private void initProgressBar(){  mMax=100;  mProgress=0;  mSecondaryProgress=0;  mIndeterminate=false;  mOnlyIndeterminate=false;  mDuration=4000;  mBehavior=AlphaAnimation.RESTART;  mMinWidth=24;  mMaxWidth=48;  mMinHeight=24;  mMaxHeight=48;}  }
class C{  public MemberName(Method m){  this(m,false);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static void notifyExit(int value){  if (MERLIN_ANALYSIS)   findDeaths();  trace.process();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case ExpressionsPackage.BITWISE_XOR_EXPRESSION__LEFT_OPERAND:    return getLeftOperand();case ExpressionsPackage.BITWISE_XOR_EXPRESSION__RIGHT_OPERAND:  return getRightOperand();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public Session currentSession(){  return sessionFactory.getCurrentSession();}  }
class C{  public void close() throws XMLStreamException, IOException {  this.endDocument();}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAction_();}  }
class C{  static void checkSignedShort(final int value,final String msg){  if (value < Short.MIN_VALUE || value > Short.MAX_VALUE) {    throw new IllegalArgumentException(msg + " (must be a signed short): " + value);  }}  }
class C{  public static void unregisterHandler(Handler target){  mHandlers.remove(target);}  }
class C{  public boolean isIncludeNullsOrgTrx(){  Object oo=get_Value(COLUMNNAME_IsIncludeNullsOrgTrx);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected void addValidationException(SAXException e){  validationExceptions.add(e);}  }
class C{  public void createNegotiationTableDataForWp(final TenderResponse tenderResponse,final PdfPTable negotiationTable,final Contractor contractor) throws DocumentException, ApplicationException {  Date asOnDate=null;  if (tenderResponse.getNegotiationDate() != null)   asOnDate=tenderResponse.getNegotiationDate();  int i=0;  final Map<String,Integer> exceptionaSorMap=worksService.getExceptionSOR();  totalBefNegAmt=0;  totalAmt=0;  totalAftNegAmt=0;  totalMarketRateAmt=0;  for (  final TenderResponseActivity tenderResponseActivity : tenderResponse.getTenderResponseActivities()) {    String schNo="";    String description="";    Double quantity=0.0;    double rate=0.0;    String per="";    double befNegRate=0.0;    double befNegAmount=0.0;    double aftNegRate=0.0;    double aftNegAmount=0.0;    MarketRate marketRateObj=null;    double marketRate=0.0;    double marketRateAmount=0.0;    double uomFactor=1;    if (tenderResponseActivity != null) {      if (tenderResponseActivity.getActivity() != null && tenderResponseActivity.getActivity().getSchedule() != null && tenderResponseActivity.getActivity().getSchedule().getCode() != null && exceptionaSorMap.containsKey(tenderResponseActivity.getActivity().getUom().getUom()))       uomFactor=exceptionaSorMap.get(tenderResponseActivity.getActivity().getUom().getUom());      final Map<String,Object> rateQtyMap=processLatestRateAndQtyForLineItem(worksPackage.getActivitiesForEstimate(),tenderResponseActivity.getActivity());      if (rateQtyMap != null && !rateQtyMap.isEmpty()) {        negotiationTable.addCell(makePara(++i));        schNo=(String)rateQtyMap.get("sorcode");        negotiationTable.addCell(centerPara(schNo));        negotiationTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);        description=(String)rateQtyMap.get("desc");        negotiationTable.addCell(makePara(description,Element.ALIGN_LEFT));        negotiationTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);        quantity=(Double)rateQtyMap.get("qty");        negotiationTable.addCell(centerPara(formatter.format(quantity)));        negotiationTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);        rate=(Double)rateQtyMap.get("rate");        negotiationTable.addCell(rightPara(formatter.format(rate)));        negotiationTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);        per=(String)rateQtyMap.get("per");        negotiationTable.addCell(centerPara(per));        negotiationTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);        final double amount=(Double)rateQtyMap.get("amt");        negotiationTable.addCell(rightPara(formatter.format(amount)));        totalAmt=totalAmt + amount;      }      if (rateQtyMap.get("slno") != null) {        negotiationTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);        for (        final TenderResponseQuotes tenderResponseQuotes : tenderResponseActivity.getTenderResponseQuotes())         if (tenderResponseQuotes.getContractor().getId() == contractor.getId()) {          if (tenderResponseQuotes.getQuotedRate() != 0.0)           befNegRate=tenderResponseQuotes.getQuotedRate();          negotiationTable.addCell(rightPara(formatter.format(befNegRate)));          befNegAmount=quantity * befNegRate / uomFactor;          totalBefNegAmt=totalBefNegAmt + befNegAmount;          negotiationTable.addCell(rightPara(formatter.format(befNegAmount)));        }        if (tenderResponseActivity.getNegotiatedRate() != 0.0)         aftNegRate=tenderResponseActivity.getNegotiatedRate();        negotiationTable.addCell(rightPara(formatter.format(aftNegRate)));        aftNegAmount=quantity * aftNegRate / uomFactor;        totalAftNegAmt=totalAftNegAmt + aftNegAmount;        negotiationTable.addCell(rightPara(formatter.format(aftNegAmount)));        if (tenderResponseActivity.getActivity() != null && tenderResponseActivity.getActivity().getSchedule() != null && asOnDate != null && tenderResponseActivity.getActivity().getSchedule().hasValidMarketRateFor(asOnDate)) {          marketRateObj=tenderResponseActivity.getActivity().getSchedule().getMarketRateOn(asOnDate);          marketRate=marketRateObj.getMarketRate().getValue();          marketRateAmount=quantity * marketRate / uomFactor;        }        if (tenderResponseActivity.getActivity() != null && tenderResponseActivity.getActivity().getSchedule() != null && asOnDate != null && !tenderResponseActivity.getActivity().getSchedule().hasValidMarketRateFor(asOnDate)) {          marketRate=tenderResponseActivity.getActivity().getRate();          marketRateAmount=quantity * marketRate;        }        if (tenderResponseActivity.getActivity() != null && tenderResponseActivity.getActivity().getNonSor() != null) {          marketRate=tenderResponseActivity.getActivity().getRate();          final double marketQty=tenderResponseActivity.getActivity().getQuantity();          marketRateAmount=marketQty * marketRate;        }        negotiationTable.addCell(rightPara(formatter.format(marketRate)));        totalMarketRateAmt=totalMarketRateAmt + marketRateAmount;        negotiationTable.addCell(rightPara(formatter.format(marketRateAmount)));      }    }  }}  }
class C{  public ByteBuffer(InputStream in) throws IOException {  ByteArrayOutputStream baos=new ByteArrayOutputStream();  buffer=new byte[4096];  int count=0;  while ((count=in.read(buffer,0,buffer.length)) > -1) {    baos.write(buffer,0,count);  }  buffer=baos.toByteArray();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:06.778 -0500",hash_original_method="52B6F67F184184B52BA8234FFCA8CD43",hash_generated_method="066E43B791FD8B9336586C488192B1BD") public Reader retrieveArticleBody() throws IOException {  return retrieveArticleBody(null);}  }
class C{  public int readNext(int offset,boolean ignoreComments) throws CoreException {  setOffset(offset);  return readNext(ignoreComments);}  }
class C{  public boolean isSetError(){  return this.error != null;}  }
class C{  private PubsubIO(){}  }
class C{  public HadoopFileBlock(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:02.684 -0500",hash_original_method="22A7E7A2EB4ADA3B586F576057F0955D",hash_generated_method="6568B9421DB93C92E67BDD4B90F5EF6A") public NameConstraints(GeneralSubtrees permittedSubtrees,GeneralSubtrees excludedSubtrees){  if (permittedSubtrees != null) {    List<GeneralSubtree> ps=permittedSubtrees.getSubtrees();    if (ps == null || ps.isEmpty()) {      throw new IllegalArgumentException("permittedSubtrees are empty");    }  }  if (excludedSubtrees != null) {    List<GeneralSubtree> es=excludedSubtrees.getSubtrees();    if (es == null || es.isEmpty()) {      throw new IllegalArgumentException("excludedSubtrees are empty");    }  }  this.permittedSubtrees=permittedSubtrees;  this.excludedSubtrees=excludedSubtrees;}  }
class C{  public void messageArrived(final String topic,final MqttMessage message){  logger.debug("[{}] Received message on topic \"{}\". Payload = \"{}\"",messageQueue.size(),topic,new String(message.getPayload()));  final long newId=MessageIdGenerator.getNewId();  final FormattedMqttMessage receivedMessage=new FormattedMqttMessage(newId,topic,message,connection);  final List<String> matchingSubscriptions=connection.getTopicMatcher().getMatchingSubscriptions(receivedMessage.getTopic());  receivedMessage.setMatchingSubscriptionTopics(matchingSubscriptions);  logger.trace("Matching subscriptions for message on {} = {}",receivedMessage.getTopic(),matchingSubscriptions);  if (connectionSettings.getMessageLog().isLogBeforeScripts()) {    logMessage(new FormattedMqttMessage(receivedMessage));  }  final FormattedMqttMessage formattedMessage=new FormattedMqttMessage(newId,topic,message,connection);  if (connectionSettings.getFormatter() != null) {    formattingManager.formatMessage(formattedMessage,(FormatterDetails)connectionSettings.getFormatter());  }  for (  final String matchingSubscriptionTopic : matchingSubscriptions) {    final BaseMqttSubscription subscription=connection.getMqttSubscriptionForTopic(matchingSubscriptionTopic);    if (subscription.isScriptActive()) {      scriptManager.runScriptWithReceivedMessage(subscription.getScript(),receivedMessage);    }    if (subscription.getStore() != null) {      subscription.getStore().messageReceived(formattedMessage);    }  }  if (!connectionSettings.getMessageLog().isLogBeforeScripts()) {    logMessage(receivedMessage);  }}  }
class C{  public long longValue(){  return ((new Long(name)).longValue());}  }
class C{  @Override public Bitmap decodeRegion(Rect rect,BitmapFactory.Options options){  return impl.decodeRegion(rect,options);}  }
class C{  @Override public void agg(Object newVal){  if (newVal instanceof byte[]) {    byte[] values=(byte[])newVal;    ByteBuffer buffer=ByteBuffer.wrap(values);    buffer.rewind();    while (buffer.hasRemaining()) {      valueSet.add(buffer.getInt());    }    return;  } else {    double value=new Double(newVal.toString());    agg(value);  }}  }
class C{  public int lastIndexOfFromTo(boolean element,int from,int to){  if (size == 0)   return -1;  checkRangeFromTo(from,to,size);  boolean[] theElements=elements;  for (int i=to; i >= from; i--) {    if (element == theElements[i]) {      return i;    }  }  return -1;}  }
class C{  public static boolean isCashbookPresentOnTerminal(Properties ctx,int cashBookId,String trxName){  String sqlStmt="SELECT U_POSTerminal_ID FROM U_POSTerminal WHERE AD_Client_ID=? AND C_CashBook_ID=? AND IsActive='Y'";  int terminalId=DB.getSQLValue(trxName,sqlStmt,Env.getAD_Client_ID(ctx),cashBookId);  return (terminalId != -1);}  }
class C{  public void detectPlugins(File folder){  Preconditions.checkNotNull(folder,"folder");  Preconditions.checkArgument(folder.isDirectory(),"Must load from a directory");  for (  File file : folder.listFiles()) {    if (file.isFile() && file.getName().endsWith(".jar")) {      try (JarFile jar=new JarFile(file)){        JarEntry pdf=jar.getJarEntry("bungee.yml");        if (pdf == null) {          pdf=jar.getJarEntry("plugin.yml");        }        Preconditions.checkNotNull(pdf,"Plugin must have a plugin.yml or bungee.yml");        try (InputStream in=jar.getInputStream(pdf)){          PluginDescription desc=yaml.loadAs(in,PluginDescription.class);          Preconditions.checkNotNull(desc.getName(),"Plugin from %s has no name",file);          Preconditions.checkNotNull(desc.getMain(),"Plugin from %s has no main",file);          desc.setFile(file);          toLoad.put(desc.getName(),desc);        }       } catch (      Exception ex) {        ProxyServer.getInstance().getLogger().log(Level.WARNING,"Could not load plugin from file " + file,ex);      }    }  }}  }
class C{  private void repairWifiConnection(){  Log.i(TAG,"Repairing wifi connection");  final WifiManager wifiManager=(WifiManager)this.getSystemService(Context.WIFI_SERVICE);  wifiManager.setWifiEnabled(false);  wifiManager.setWifiEnabled(true);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void refresh(final Object model,final String trxName){  if (model == null)   throw new IllegalArgumentException("model is null");  final PO po=getPO(model);  if (po == null)   throw new IllegalArgumentException("Class is not supported - " + model.getClass());  po.load(trxName);}  }
class C{  public void clear(){  for (int i=1; i <= 2 * m + 3; i++) {    n[i]=i + 1;  }  f[1]=0F;  f[2 * m + 3]=1F;  for (int i=1; i <= m; i++) {    f[2 * i + 1]=quantiles[i - 1];  }  for (int i=1; i <= m + 1; i++) {    f[2 * i]=(f[2 * i - 1] + f[2 * i + 1]) / 2F;  }  for (int i=1; i <= 2 * m + 3; i++) {    d[i]=1F + 2 * (m + 1) * f[i];  }  isInitializing=true;  ni=1;}  }
class C{  public static CDatabaseManager instance(){  return m_instance;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:41.497 -0500",hash_original_method="4F9FE824A1A1412EB15D3E5F93B9B70E",hash_generated_method="2C1995EA3C424E27CEBB5CA15BC3F003") public static void stringToGsm8BitUnpackedField(String s,byte dest[],int offset,int length){  int outByteIndex=offset;  SparseIntArray charToLanguageTable=sCharsToGsmTables[0];  SparseIntArray charToShiftTable=sCharsToShiftTables[0];  for (int i=0, sz=s.length(); i < sz && (outByteIndex - offset) < length; i++) {    char c=s.charAt(i);    int v=charToLanguageTable.get(c,-1);    if (v == -1) {      v=charToShiftTable.get(c,-1);      if (v == -1) {        v=charToLanguageTable.get(' ',' ');      } else {        if (!(outByteIndex + 1 - offset < length)) {          break;        }        dest[outByteIndex++]=GSM_EXTENDED_ESCAPE;      }    }    dest[outByteIndex++]=(byte)v;  }  while ((outByteIndex - offset) < length) {    dest[outByteIndex++]=(byte)0xff;  }}  }
class C{  @Override public void execute(MinecraftServer server,ICommandSender sender,String[] args) throws CommandException {  if (args.length < 1) {    throw new WrongUsageException(getCommandUsage(sender));  }  final EntityLivingBase entity=getEntity(server,sender,args[0],EntityLivingBase.class);  final IMaxHealth maxHealth=CapabilityMaxHealth.getMaxHealth(entity);  if (maxHealth != null) {    notifyCommandListener(sender,this,getSuccessMessage(),entity.getDisplayName(),CapabilityMaxHealth.formatMaxHealth(entity.getMaxHealth()),CapabilityMaxHealth.formatMaxHealth(maxHealth.getBonusMaxHealth()));  }}  }
class C{  public void enableLayers(boolean enable){  TextureState textureState=(TextureState)getLocalRenderState(RenderState.StateType.Texture);  textureState.setEnabled(enable);  markDirty(DirtyType.RenderState);}  }
class C{  public NetworkResponse(int statusCode,byte[] data,Map<String,String> headers,boolean notModified,long networkTimeMs){  this.statusCode=statusCode;  this.data=data;  this.headers=headers;  this.notModified=notModified;  this.networkTimeMs=networkTimeMs;}  }
class C{  public PendingInstallShortcutInfo(Intent data,Context context){  this.data=data;  mContext=context;  launchIntent=data.getParcelableExtra(Intent.EXTRA_SHORTCUT_INTENT);  label=data.getStringExtra(Intent.EXTRA_SHORTCUT_NAME);  user=UserHandleCompat.myUserHandle();  activityInfo=null;}  }
class C{  public static void sort(long[] array,int start,int end){  DualPivotQuicksort.sort(array,start,end);}  }
class C{  @Override public void parse(String content,Node block){  this.block=block;  this.input=content.trim();  this.index=0;  this.lastDelimiter=null;  this.lastBracket=null;  boolean moreToParse;  do {    moreToParse=parseInline();  } while (moreToParse);  processDelimiters(null);  mergeTextNodes(block.getFirstChild(),block.getLastChild());}  }
class C{  protected URLConnection openConnection(String url) throws IOException {  URLConnection conn=null;  boolean close=true;  while (true) {    conn=new URL(url).openConnection();    prepareConnection(conn);    conn.connect();    try {      if (conn instanceof HttpURLConnection) {        HttpURLConnection httpConn=(HttpURLConnection)conn;        try {          if (httpConn.getResponseCode() == -1) {            if (!responseCodeCheckEnabled) {              Log.w(LOG,"No response code, but ignoring - for url " + url);              close=false;              break;            } else {              Log.w(LOG,"No response code for url " + url);            }          } else {            close=false;            break;          }        } catch (        Exception e) {          Log.w(LOG,"Invalid response code for url " + url + " - "+ e);        }      } else       if (conn.getHeaderFields() == null) {        Log.w(LOG,"No header fields in response for url " + url);      } else {        close=false;        break;      }      if (url.startsWith("http:")) {        url="icy" + url.substring(4);        Log.i(LOG,"Trying to re-connect as ICY url " + url);      } else       throw new IOException("Invalid response - no response code / headers detected");    }  finally {      if (close) {        if (conn instanceof HttpURLConnection) {          try {            ((HttpURLConnection)conn).disconnect();          } catch (          Throwable t) {          }        }        conn=null;      }    }  }  return conn;}  }
class C{  @Override public GamaPoint centre(){  if (isNull()) {    return null;  }  return new GamaPoint((getMinX() + getMaxX()) / 2.0,(getMinY() + getMaxY()) / 2.0,(getMinZ() + getMaxZ()) / 2.0);}  }
class C{  private long computeFreshnessLifetime(){  CacheControl responseCaching=cacheResponse.cacheControl();  if (responseCaching.maxAgeSeconds() != -1) {    return SECONDS.toMillis(responseCaching.maxAgeSeconds());  } else   if (expires != null) {    long servedMillis=servedDate != null ? servedDate.getTime() : receivedResponseMillis;    long delta=expires.getTime() - servedMillis;    return delta > 0 ? delta : 0;  } else   if (lastModified != null && cacheResponse.request().url().query() == null) {    long servedMillis=servedDate != null ? servedDate.getTime() : sentRequestMillis;    long delta=servedMillis - lastModified.getTime();    return delta > 0 ? (delta / 10) : 0;  }  return 0;}  }
class C{  private void goToSearchURL(String methodName){  try {    URL url=new URL(CI_DOC_SEARCH_BASE + methodName + CI_DOC_SEARCH_SUFFIX);    System.out.printf("Going to URL: %s\n",url.toString());    URLDisplayer.getDefault().showURL(url);  } catch (  MalformedURLException mue) {    Toolkit.getDefaultToolkit().beep();    mue.printStackTrace(System.err);  }}  }
class C{  public long copyUsingLengthPrefix(BytesRef bytes){  if (bytes.length >= 32768) {    throw new IllegalArgumentException("max length is 32767 (got " + bytes.length + ")");  }  if (upto + bytes.length + 2 > blockSize) {    if (bytes.length + 2 > blockSize) {      throw new IllegalArgumentException("block size " + blockSize + " is too small to store length "+ bytes.length+ " bytes");    }    if (currentBlock != null) {      addBlock(currentBlock);    }    currentBlock=new byte[blockSize];    upto=0;  }  final long pointer=getPointer();  if (bytes.length < 128) {    currentBlock[upto++]=(byte)bytes.length;  } else {    currentBlock[upto++]=(byte)(0x80 | (bytes.length >> 8));    currentBlock[upto++]=(byte)(bytes.length & 0xff);  }  System.arraycopy(bytes.bytes,bytes.offset,currentBlock,upto,bytes.length);  upto+=bytes.length;  return pointer;}  }
class C{  public boolean isSending(String msgId){  for (  Connection con : this.sendingConnections) {    if (con.getMessage() == null) {      continue;    }    if (con.getMessage().getId().equals(msgId)) {      return true;    }  }  return false;}  }
class C{  public static void updateSsaMethod(SsaMethod ssaMeth,int threshold){  LocalVariableInfo localInfo=LocalVariableExtractor.extract(ssaMeth);  placePhiFunctions(ssaMeth,localInfo,threshold);  new SsaRenamer(ssaMeth,threshold).run();}  }
class C{  @Bean public AnyScriptFactory scriptFactory(){  return new AnyScriptFactoryImplementation().withExecutor(defaultExecutor()).withScriptFactory(new ScriptRecentFactory()).withScriptFactory(new ScriptLegacyFactory());}  }
class C{  protected Address(final PublicKey publicKey,final String encoded,final Boolean isValid){  this.publicKey=publicKey;  this.encoded=encoded;  this.isValid=isValid;}  }
class C{  public String findNumBinsTipText(){  return "Optimize number of equal-width bins using leave-one-out. Doesn't " + "work for equal-frequency binning";}  }
class C{  public final static float sphericalUnitsToRad(float u,float uCircumference){  return MoreMath.TWO_PI * (u / uCircumference);}  }
class C{  @Override public void streamInfoUpdated(StreamInfo info){  g.updateState(true);  g.updateChannelInfo();  g.addStreamInfo(info);  String channel="#" + info.getStream();  if (isChannelOpen(channel)) {    chatLog.viewerstats(channel,info.getViewerStats(false));    if (info.getOnline() && info.isValid()) {      chatLog.viewercount(channel,info.getViewers());    }  }  streamStatusWriter.streamStatus(info);  if (info.isNotFound() && notFoundInfoDone.putIfAbsent(info,info) == null) {    g.printLine("** This channel doesn't seem to exist on Twitch. " + "You may not be able to join this channel, but trying" + " anyways. **");  }}  }
class C{  protected static ClassInfo guessPackageAndClass(File lexFile) throws FileNotFoundException, IOException {  assert lexFile.isAbsolute() : lexFile;  LineNumberReader reader=new LineNumberReader(new FileReader(lexFile));  try {    ClassInfo classInfo=new ClassInfo();    while (classInfo.className == null || classInfo.packageName == null) {      String line=reader.readLine();      if (line == null) {        break;      }      guessPackage(classInfo,line);      guessClass(classInfo,line);    }    if (classInfo.className == null) {      classInfo.className=DEFAULT_NAME;    }    return classInfo;  }  finally {    reader.close();  }}  }
class C{  public void addNode(final NodeType node){  Preconditions.checkNotNull(node,"Node argument can not be null");  m_nodes.add(node);  m_nodeToEdges.put(node,new ArrayList<EdgeType>());}  }
class C{  public IMouseState createNodeEditExitState(final Node n,final MouseEvent event){  final CNodeEditExitState state=new CNodeEditExitState(this,m_graph,n);  m_factory.createNodeEditExitAction().execute(state,event);  return state;}  }
class C{  public static byte[] decode(byte[] source) throws java.io.IOException {  byte[] decoded=null;  decoded=decode(source,0,source.length,Base64.NO_OPTIONS);  return decoded;}  }
class C{  public Style(Color fg,Color bg,Font font){  this(fg,bg,font,false);}  }
class C{  @SuppressWarnings("unchecked") public ConcurrentARC(final int cacheSize,final int partitions,final Comparator<? super K> comparator){  int m=1;  while (m < partitions)   m=m * 2;  int partitionSize=cacheSize / m;  if (partitionSize < 4)   partitionSize=4;  this.arc=(ARC<K,V>[])Array.newInstance(ComparableARC.class,m);  for (int i=0; i < this.arc.length; i++)   this.arc[i]=new ComparableARC<K,V>(partitionSize,comparator);  m-=1;  this.mask=m;}  }
class C{  static String format(final Token[] tokens,final long years,final long months,final long days,final long hours,final long minutes,final long seconds,final long milliseconds,final boolean padWithZeros){  final StringBuilder buffer=new StringBuilder();  boolean lastOutputSeconds=false;  for (  final Token token : tokens) {    final Object value=token.getValue();    final int count=token.getCount();    if (value instanceof StringBuilder) {      buffer.append(value.toString());    } else {      if (value == y) {        buffer.append(paddedValue(years,padWithZeros,count));        lastOutputSeconds=false;      } else       if (value == M) {        buffer.append(paddedValue(months,padWithZeros,count));        lastOutputSeconds=false;      } else       if (value == d) {        buffer.append(paddedValue(days,padWithZeros,count));        lastOutputSeconds=false;      } else       if (value == H) {        buffer.append(paddedValue(hours,padWithZeros,count));        lastOutputSeconds=false;      } else       if (value == m) {        buffer.append(paddedValue(minutes,padWithZeros,count));        lastOutputSeconds=false;      } else       if (value == s) {        buffer.append(paddedValue(seconds,padWithZeros,count));        lastOutputSeconds=true;      } else       if (value == S) {        if (lastOutputSeconds) {          final int width=padWithZeros ? Math.max(3,count) : 3;          buffer.append(paddedValue(milliseconds,true,width));        } else {          buffer.append(paddedValue(milliseconds,padWithZeros,count));        }        lastOutputSeconds=false;      }    }  }  return buffer.toString();}  }
class C{  private static void registerCommonClasses(Class<?>... commonClasses){  for (  Class<?> clazz : commonClasses) {    commonClassCache.put(clazz.getName(),clazz);  }}  }
class C{  private void prepare(){  for (int i=0; i < ers.size(); i++) {    ers.get(i).setIndex(i);  }}  }
class C{  public Object[] executeQueriesWithDistinct(String qarr[]){  QueryService qs=cache.getQueryService();  Object[] result=new Object[qarr.length];  String query=null;  int j=0;  for (int i=0; i < qarr.length; i++) {    query=queries.get(qarr[i]);    if (query.indexOf("distinct") == -1)     query=query.replaceFirst("select","select distinct"); else     if (query.indexOf("DISTINCT") == -1)     query=query.replaceFirst("select","select distinct");    try {      result[j++]=qs.newQuery(query).execute();    } catch (    Exception e) {      throw new RuntimeException(e);    }  }  return result;}  }
class C{  @Override public void addPages(){  page=new NewFileWizardPage(selection);  addPage(page);}  }
class C{  public SlidingActivityHelper(Activity activity){  mActivity=activity;}  }
class C{  public String LNormTipText(){  return "The LNorm to use for document length normalization.";}  }
class C{  TimeZone convertTimeZone(String timeZone){  String[] timeZoneTokens=timeZone.split(":");  int hours=0;  int minutes=0;  if (!timeZone.startsWith("Z") && !timeZone.startsWith("z")) {    if (timeZoneTokens.length > 0) {      hours=Integer.parseInt(timeZoneTokens[0]);    }    if (timeZoneTokens.length > 1) {      minutes=Integer.parseInt(timeZoneTokens[1]);      if (timeZone.startsWith("-")) {        minutes=minutes * -1;      }    }  }  int timeZoneOffsetMilliSeconds=((hours * 60) + minutes) * 1000;  return new SimpleTimeZone(timeZoneOffsetMilliSeconds,"");}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public ShareProjectConfiguration(final IProject project,final ShareProjectAction action,final String serverPath){  Check.notNull(project,"project");  Check.notNull(action,"action");  Check.notNull(serverPath,"serverPath");  this.project=project;  this.action=action;  this.serverPath=serverPath;}  }
class C{  private void verifyPassword(){  if (!checkPassword(mPassword.getText().toString())) {    return;  }  if (mStage == Stage.NEW_FINGERPRINT_ENROLLED) {    SharedPreferences.Editor editor=mSharedPreferences.edit();    editor.putBoolean(getString(R.string.use_fingerprint_to_authenticate_key),mUseFingerprintFutureCheckBox.isChecked());    editor.apply();    if (mUseFingerprintFutureCheckBox.isChecked()) {      mActivity.createKey(MainActivity.DEFAULT_KEY_NAME,true);      mStage=Stage.FINGERPRINT;    }  }  mPassword.setText("");  mActivity.onPurchased(false,null);  dismiss();}  }
class C{  @Restrictions({@Restrict("SYSTEM_ADMIN"),@Restrict("SYSTEM_MONITOR"),@Restrict("RESTRICTED_SYSTEM_ADMIN")}) public static void externalItemsJson(@As(",") String[] ids){  List<BackupDataTable.Backup> results=Lists.newArrayList();  if (ids != null) {    for (    String id : ids) {      if (StringUtils.isNotBlank(id)) {        BackupInfo backupInfo=BackupUtils.getBackupInfo(id,false);        BackupDataTable.Backup backup=new BackupDataTable.Backup(id,false);        backup.creationtime=backupInfo.getCreateTime();        backup.sitename=backupInfo.getSiteName();        backup.version=backupInfo.getVersion();        backup.size=backupInfo.getBackupSize();        results.add(backup);      }    }  }  renderJSON(results);}  }
class C{  public static void availableNetworksJson(String id){  List<NetworkInfo> items=Lists.newArrayList();  List<NetworkRestRep> networks=NetworkUtils.getNetworksAssignableToVirtualArray(id);  for (  NetworkRestRep network : networks) {    items.add(new NetworkInfo(network,id));  }  renderJSON(DataTablesSupport.createJSON(items,params));}  }
class C{  public static int countUpperCase(final String text){  int count=0;  for (  final char chr : text.toCharArray()) {    if (Character.isUpperCase(chr)) {      count++;    }  }  return count;}  }
class C{  public void markVisited(int from,int upTo){  if (checkBounds(from) && checkBounds(upTo - 1)) {    for (int i=from; i < upTo; i++) {      this.markVisited(i);    }  } else {    throw new RuntimeException("The location " + from + ","+ upTo+ " out of bounds [0,"+ (this.registry.length - 1)+ "]");  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public StatusComponent(int steps){  STEPPING=true;  LABEL=new JLabel();  LABEL.setFont(LABEL.getFont().deriveFont(Font.BOLD));  BAR=new JProgressBar();  NF=NumberFormat.getInstance(GUIMediator.getLocale());  NF.setMaximumIntegerDigits(3);  NF.setMaximumFractionDigits(0);  setLayout(new BoxLayout(this,BoxLayout.Y_AXIS));  construct();  GUIUtils.setOpaque(false,this);  BAR.setMaximum(steps + 1);  BAR.setMinimum(0);  BAR.setValue(0);}  }
class C{  public SearchSourceBuilder query(String queryString){  return query(queryString.getBytes(Charsets.UTF_8));}  }
class C{  public static String makeHTMLNameSafe(String name){  if (name == null || name.isEmpty()) {    return name;  }  char[] chrs=name.toCharArray();  if (name.indexOf(percentInt) != -1 || name.indexOf(spaceInt) != -1 || name.indexOf(fullStopInt) != -1 || name.indexOf(plusInt) != -1 || name.indexOf(colonInt) != -1 || name.indexOf(equalsInt) != -1 || name.indexOf(forwardSlashInt) != -1 || name.indexOf(backSlashInt) != -1) {    for (int i=0; i < chrs.length; i++) {switch (chrs[i]) {case ampersand:        chrs[i]=ampersandInt;      break;case spaceInt:    chrs[i]=underScoreInt;  break;case fullStopInt:chrs[i]=minusInt;break;case percentInt:chrs[i]=underScoreInt;break;case plusInt:chrs[i]=pInt;break;case colonInt:chrs[i]=cInt;break;case equalsInt:chrs[i]=qInt;break;case forwardSlashInt:chrs[i]=underScoreInt;break;case backSlashInt:chrs[i]=underScoreInt;break;}}}final char[] testchrs={openSquareBracketInt,closeSquareBracketInt,hashInt,divideInt,openCurlyBracket,closeCurlyBracket};int count=0;for (final char chr1 : chrs) {for (final char testchr : testchrs) {if (chr1 == testchr) {count++;}}}if (count > 0) {int c=0;final char[] tmp=new char[chrs.length - count];MAINLOOP: for (final char chr : chrs) {for (final char testchr : testchrs) {if (chr == testchr) {continue MAINLOOP;}}tmp[c++]=chr;}chrs=tmp;}if (chrs[0] >= zeroInt && chrs[0] <= nineInt) {final char[] tmp=new char[chrs.length + 1];System.arraycopy(chrs,0,tmp,1,chrs.length);tmp[0]=aInt;chrs=tmp;}name=new String(chrs);return name;}  }
class C{  public JavaCardKit detectSDK(String path){  JavaCardKit detected=new JavaCardKit();  if (path == null || path.trim() == "") {    return detected;  }  String real_path=path.replaceFirst("^~",System.getProperty("user.home"));  if (!new File(real_path).exists()) {    log("JavaCard SDK folder " + path + " does not exist!",Project.MSG_WARN);    return detected;  }  detected.path=real_path;  if (Paths.get(detected.path,"lib","tools.jar").toFile().exists()) {    log("JavaCard 3.x SDK detected in " + detected.path,Project.MSG_VERBOSE);    detected.version=JC.V3;  } else   if (Paths.get(detected.path,"lib","api21.jar").toFile().exists()) {    detected.version=JC.V212;    log("JavaCard 2.1.x SDK detected in " + detected.path,Project.MSG_VERBOSE);  } else   if (Paths.get(detected.path,"lib","converter.jar").toFile().exists()) {    File api=Paths.get(detected.path,"lib","api.jar").toFile();    try (ZipInputStream zip=new ZipInputStream(new FileInputStream(api))){      while (true) {        ZipEntry entry=zip.getNextEntry();        if (entry == null) {          break;        }        if (entry.getName().equals("javacardx/apdu/ExtendedLength.class")) {          detected.version=JC.V222;          log("JavaCard 2.2.2 SDK detected in " + detected.path,Project.MSG_VERBOSE);        }      }    } catch (    IOException e) {      log("Could not parse api.jar",Project.MSG_DEBUG);    } finally {      if (detected.version == JC.NONE) {        detected.version=JC.V221;        log("JavaCard 2.x SDK detected in " + detected.path,Project.MSG_VERBOSE);      }    }  } else {    log("Could not detect a JavaCard SDK in " + Paths.get(path).toAbsolutePath(),Project.MSG_WARN);  }  return detected;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:26.590 -0500",hash_original_method="064C5502A668BA6541E1986AFB8ECCE1",hash_generated_method="3B0A40E136CAEE9ADB002BDD01A8DD39") public String next(Pattern pattern){  checkClosed();  checkNull(pattern);  matchSuccessful=false;  saveCurrentStatus();  if (!setTokenRegion()) {    recoverPreviousStatus();    throw new NoSuchElementException();  }  matcher.usePattern(pattern);  if (!matcher.matches()) {    recoverPreviousStatus();    throw new InputMismatchException();  }  matchSuccessful=true;  return matcher.group();}  }
