class C{  public void testGetInstance03() throws NoSuchAlgorithmException, IllegalArgumentException, InvalidAlgorithmParameterException {  try {    AlgorithmParameterGenerator.getInstance(null,mProv);    fail("NullPointerException or NoSuchAlgorithmException should be thrown");  } catch (  NullPointerException e) {  }catch (  NoSuchAlgorithmException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      AlgorithmParameterGenerator.getInstance(invalidValues[i],mProv);      fail("NoSuchAlgorithmException must be thrown (algorithm: ".concat(invalidValues[i]).concat(")"));    } catch (    NoSuchAlgorithmException e) {    }  }  Provider prov=null;  for (int i=0; i < validValues.length; i++) {    try {      AlgorithmParameterGenerator.getInstance(validValues[i],prov);      fail("IllegalArgumentException must be thrown when provider is null (algorithm: ".concat(invalidValues[i]).concat(")"));    } catch (    IllegalArgumentException e) {    }  }  AlgorithmParameterGenerator apG;  for (int i=0; i < validValues.length; i++) {    apG=AlgorithmParameterGenerator.getInstance(validValues[i],mProv);    assertEquals("Incorrect algorithm",apG.getAlgorithm(),validValues[i]);    assertEquals("Incorrect provider",apG.getProvider(),mProv);    checkResult(apG);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private static Class<?> forName(String name) throws ReflectException {  try {    return Class.forName(name);  } catch (  Exception e) {    throw new ReflectException(e);  }}  }
class C{  void makeRunnable(ThreadQueue threads){  makeRunnable(threads,true);}  }
class C{  public BaggageAPIImpl(Namespace<ByteString,ByteString> active,Namespace<ByteString,ByteString> archive){  this.ACTIVE=active;  this.ARCHIVE=archive;}  }
class C{  public static ResourceIdentifier fromString(final String resource){  Objects.requireNonNull(resource);  return new ResourceIdentifier(resource,false);}  }
class C{  public static void assertArrayEqual(float[] expected,float[] actual,double maxRelativeError){  if (verbose) {    log("assertArrayEqual(" + arrayToString(expected) + ", "+ arrayToString(actual)+ ")");  }  if (expected.length != actual.length) {    TestUtils.assertBool(false);  }  for (int index=0; index < expected.length; ++index) {    assertEqual(expected[index],actual[index],maxRelativeError);  }}  }
class C{  @Override public final void normalize(){  Node next;  for (Node node=getFirstChild(); node != null; node=next) {    next=node.getNextSibling();    node.normalize();    if (node.getNodeType() == Node.TEXT_NODE) {      ((TextImpl)node).minimize();    }  }}  }
class C{  public static boolean endsWithPunc(String str){  if (str.endsWith(".") || str.endsWith("?") || str.endsWith("!")|| str.endsWith(",")|| str.endsWith(":")|| str.endsWith("\"")|| str.endsWith("'")|| str.endsWith("''")|| str.endsWith(";")) {    return true;  }  return false;}  }
class C{  @Override public void registerPersistentStore(String storeName,Scope scope) throws SyncException {  registerStore(storeName,scope);}  }
class C{  public static JPanel horizontalJPanel(final Component westComponent,final Component eastComponent){  return horizontalJPanel(westComponent,Optional.empty(),eastComponent);}  }
class C{  protected static boolean parsePartHeaders(ByteArrayInputStream pduDataStream,PduPart part,int length){  assert (null != pduDataStream);  assert (null != part);  assert (length > 0);  int startPos=pduDataStream.available();  int tempPos=0;  int lastLen=length;  while (0 < lastLen) {    int header=pduDataStream.read();    assert (-1 != header);    lastLen--;    if (header > TEXT_MAX) {switch (header) {case PduPart.P_CONTENT_LOCATION:        byte[] contentLocation=parseWapString(pduDataStream,TYPE_TEXT_STRING);      if (null != contentLocation) {        part.setContentLocation(contentLocation);      }    tempPos=pduDataStream.available();  lastLen=length - (startPos - tempPos);break;case PduPart.P_CONTENT_ID:byte[] contentId=parseWapString(pduDataStream,TYPE_QUOTED_STRING);if (null != contentId) {part.setContentId(contentId);}tempPos=pduDataStream.available();lastLen=length - (startPos - tempPos);break;case PduPart.P_DEP_CONTENT_DISPOSITION:case PduPart.P_CONTENT_DISPOSITION:boolean contentDisposition=false;if (contentDisposition) {int len=parseValueLength(pduDataStream);pduDataStream.mark(1);int thisStartPos=pduDataStream.available();int thisEndPos=0;int value=pduDataStream.read();if (value == PduPart.P_DISPOSITION_FROM_DATA) {part.setContentDisposition(PduPart.DISPOSITION_FROM_DATA);} else if (value == PduPart.P_DISPOSITION_ATTACHMENT) {part.setContentDisposition(PduPart.DISPOSITION_ATTACHMENT);} else if (value == PduPart.P_DISPOSITION_INLINE) {part.setContentDisposition(PduPart.DISPOSITION_INLINE);} else {pduDataStream.reset();part.setContentDisposition(parseWapString(pduDataStream,TYPE_TEXT_STRING));}thisEndPos=pduDataStream.available();if (thisStartPos - thisEndPos < len) {value=pduDataStream.read();if (value == PduPart.P_FILENAME) {part.setFilename(parseWapString(pduDataStream,TYPE_TEXT_STRING));}thisEndPos=pduDataStream.available();if (thisStartPos - thisEndPos < len) {int last=len - (thisStartPos - thisEndPos);byte[] temp=new byte[last];pduDataStream.read(temp,0,last);}}tempPos=pduDataStream.available();lastLen=length - (startPos - tempPos);}break;default :if (LOCAL_LOGV) Log.v(LOG_TAG,"Not supported Part headers: " + header);if (-1 == skipWapValue(pduDataStream,lastLen)) {Log.e(LOG_TAG,"Corrupt Part headers");return false;}lastLen=0;break;}} else if ((header >= TEXT_MIN) && (header <= TEXT_MAX)) {byte[] tempHeader=parseWapString(pduDataStream,TYPE_TEXT_STRING);byte[] tempValue=parseWapString(pduDataStream,TYPE_TEXT_STRING);if (true == PduPart.CONTENT_TRANSFER_ENCODING.equalsIgnoreCase(new String(tempHeader))) {part.setContentTransferEncoding(tempValue);}tempPos=pduDataStream.available();lastLen=length - (startPos - tempPos);} else {if (LOCAL_LOGV) Log.v(LOG_TAG,"Not supported Part headers: " + header);if (-1 == skipWapValue(pduDataStream,lastLen)) {Log.e(LOG_TAG,"Corrupt Part headers");return false;}lastLen=0;}}if (0 != lastLen) {Log.e(LOG_TAG,"Corrupt Part headers");return false;}return true;}  }
class C{  public synchronized void importFromFile(){  Path file=Paths.get(importFileName);  try (BufferedReader reader=Files.newBufferedReader(file,CHARSET)){    LOGGER.info("[AddressbookImport] " + file.toAbsolutePath());    String line;    while ((line=reader.readLine()) != null) {      String result=command(line);      LOGGER.info(String.format("[AddressbookImport] %s [%s]",result,line));    }  } catch (  IOException ex) {    LOGGER.warning("Failed importing addressbook from file: " + ex);  }}  }
class C{  public int firstBadVersionB(int n){  int l=1;  int r=n;  while (l < r) {    int m=l + (r - l) / 2;    if (!isBadVersion(m)) {      l=m + 1;    } else     if (m == 1 || !isBadVersion(m - 1)) {      return m;    } else {      r=m;    }  }  return l;}  }
class C{  public boolean isSetSrcPath(){  return this.srcPath != null;}  }
class C{  public JavaDocContext(TemplateContextType type,IDocument document,int completionOffset,int completionLength,ISourceFile compilationUnit){  super(type,document,completionOffset,completionLength,compilationUnit);}  }
class C{  public final boolean isErrorEnabled(){  return false;}  }
class C{  public static Transaction createFakeTx(NetworkParameters params,Coin value,ECKey to){  Transaction t=new Transaction(params);  TransactionOutput outputToMe=new TransactionOutput(params,t,value,to);  t.addOutput(outputToMe);  TransactionOutput change=new TransactionOutput(params,t,valueOf(1,11),new ECKey());  t.addOutput(change);  Transaction prevTx=new Transaction(params);  TransactionOutput prevOut=new TransactionOutput(params,prevTx,value,to);  prevTx.addOutput(prevOut);  t.addInput(prevOut);  return roundTripTransaction(params,t);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.BLOCK__STATEMENTS:    getStatements().clear();  getStatements().addAll((Collection<? extends Statement>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public KafkaTopicStreamConsumer(final KafkaStream<byte[],byte[]> kafkaTopicStream,final OneToOneConcurrentArrayQueue3<byte[]> messages,final MessageWaitStrategy<byte[]> messageWaitStrategy){  this.kafkaTopicPartitionStream=kafkaTopicStream;  this.messages=messages;  this.messageWaitStrategy=messageWaitStrategy;}  }
class C{  public JSONObject(String baseName,Locale locale) throws JSONException {  this();  ResourceBundle bundle=ResourceBundle.getBundle(baseName,locale,Thread.currentThread().getContextClassLoader());  Enumeration<String> keys=bundle.getKeys();  while (keys.hasMoreElements()) {    Object key=keys.nextElement();    if (key != null) {      String[] path=((String)key).split("\\.");      int last=path.length - 1;      JSONObject target=this;      for (int i=0; i < last; i+=1) {        String segment=path[i];        JSONObject nextTarget=target.optJSONObject(segment);        if (nextTarget == null) {          nextTarget=new JSONObject();          target.put(segment,nextTarget);        }        target=nextTarget;      }      target.put(path[last],bundle.getString((String)key));    }  }}  }
class C{  IonTimestampLite(ContainerlessContext context,boolean isNull){  super(context,isNull);}  }
class C{  public static void addTargetLinks(final MgmtTarget response){  response.add(linkTo(methodOn(MgmtTargetRestApi.class).getAssignedDistributionSet(response.getControllerId())).withRel(MgmtRestConstants.TARGET_V1_ASSIGNED_DISTRIBUTION_SET));  response.add(linkTo(methodOn(MgmtTargetRestApi.class).getInstalledDistributionSet(response.getControllerId())).withRel(MgmtRestConstants.TARGET_V1_INSTALLED_DISTRIBUTION_SET));  response.add(linkTo(methodOn(MgmtTargetRestApi.class).getAttributes(response.getControllerId())).withRel(MgmtRestConstants.TARGET_V1_ATTRIBUTES));  response.add(linkTo(methodOn(MgmtTargetRestApi.class).getActionHistory(response.getControllerId(),0,MgmtRestConstants.REQUEST_PARAMETER_PAGING_DEFAULT_LIMIT_VALUE,ActionFields.ID.getFieldName() + ":" + SortDirection.DESC,null)).withRel(MgmtRestConstants.TARGET_V1_ACTIONS));}  }
class C{  private void associateImageServerToComputeSystem(URI imageServerURI,ComputeSystem cs){  if (!NullColumnValueGetter.isNullURI(imageServerURI)) {    ComputeImageServer imageServer=_dbClient.queryObject(ComputeImageServer.class,imageServerURI);    if (imageServer != null) {      cs.setComputeImageServer(imageServerURI);    } else {      throw APIException.badRequests.invalidParameter("compute image server",imageServerURI.toString());    }  } else {    List<URI> imageServerURIList=_dbClient.queryByType(ComputeImageServer.class,true);    ArrayList<URI> tempList=Lists.newArrayList(imageServerURIList.iterator());    if (tempList.size() == 1) {      Iterator<ComputeImageServer> imageServerItr=_dbClient.queryIterativeObjects(ComputeImageServer.class,tempList);      while (imageServerItr.hasNext()) {        ComputeImageServer imageSvr=imageServerItr.next();        if (imageSvr != null && imageSvr.getComputeImageServerStatus().equals(ComputeImageServerStatus.AVAILABLE.toString())) {          _log.info("Automatically associating compute System {} with available image Server {}.",cs.getLabel(),imageSvr.getLabel());          cs.setComputeImageServer(imageSvr.getId());        }      }    } else {      cs.setComputeImageServer(NullColumnValueGetter.getNullURI());    }  }}  }
class C{  public static void printMemoryUsage(String announcement){  System.out.printf(announcement + "memory usage: %sMB\n",memoryUsageInMB());}  }
class C{  public void testSingleProperty(){  testSingleProperty(DatasourcePropertySet.CONNECTION_TYPE,"javax.sql.DataSource");  testSingleProperty(DatasourcePropertySet.DRIVER_CLASS,"org.hsqldb.jdbcDriver");}  }
class C{  private void launchAnim3(){  animatedVector3.start();}  }
class C{  public IO(final InputStream inputStream,final OutputStream outputStream,final OutputStream errorStream){  assert inputStream != null;  assert outputStream != null;  assert errorStream != null;  this.inputStream=inputStream;  this.outputStream=outputStream;  this.errorStream=errorStream;  this.in=new InputStreamReader(inputStream);  this.out=new AnsiRenderWriter(outputStream,true);  this.err=new AnsiRenderWriter(errorStream,true);}  }
class C{  public boolean misbehaved(){  boolean isWellBehaved=type == Type.CONVERGE && steps.size() <= 1;  return !isWellBehaved;}  }
class C{  @Override public String globalInfo(){  return "Merges all values of the specified nominal attribute that are sufficiently infrequent.";}  }
class C{  public AnimationHelper(InfoBarContainer container,ContentWrapperView target,InfoBar infoBar,View toShow,int animationType){  mContainer=container;  mLinearLayout=container.getLinearLayout();  mInfoBar=infoBar;  mTargetWrapperView=target;  mAnimatorSet=new AnimatorSet();  mAnimationType=animationType;  mToShow=toShow;  assert mLinearLayout.indexOfChild(mTargetWrapperView) != -1;}  }
class C{  public static String grepMinusV(String val,String pattern){  return grepInner(val,pattern,true);}  }
class C{  public boolean reverseAccrualIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_REVERSEACCRUAL);  if (m_processMsg != null)   return false;  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_REVERSEACCRUAL);  if (m_processMsg != null)   return false;  return false;}  }
class C{  public NotificationChain basicSetArgs(ExpressionList newArgs,NotificationChain msgs){  ExpressionList oldArgs=args;  args=newArgs;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,GamlPackage.FUNCTION__ARGS,oldArgs,newArgs);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public GermanMinimalStemFilterFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public static Filter handleURL(ParsedURL url){  if (LOG.isDebuggingFiner()) {    LOG.debugFiner("handleURL " + url.toString());  }  if (!isCompatibleURLStatic(url)) {    return null;  }  int id;  try {    id=Integer.parseInt(url.getPath());  } catch (  NumberFormatException e) {    return null;  }  SoftReference<RenderedImage> ref=images.get(id);  if (ref != null) {    RenderedImage ri=ref.get();    if (ri == null) {      LOG.warning("Referenced image has expired from the cache!");    } else {      return new RedRable(GraphicsUtil.wrap(ri));    }  }  return null;}  }
class C{  public void addEffector(final Effector effector){  effectors.add(effector);  effector.setId(effectorIDGenerator.getId());  parentWorld.fireEffectorAdded(effector);}  }
class C{  public LocalDate toLocalDate(int dayOfMonth){  return new LocalDate(getYear(),getMonthOfYear(),dayOfMonth,getChronology());}  }
class C{  public static Angle linearAzimuth(LatLon p1,LatLon p2){  if (p1 == null || p2 == null) {    String message=Logging.getMessage("nullValue.LatLonIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  double lat1=p1.getLatitude().radians;  double lon1=p1.getLongitude().radians;  double lat2=p2.getLatitude().radians;  double lon2=p2.getLongitude().radians;  if (lat1 == lat2 && lon1 == lon2)   return Angle.ZERO;  double dLon=lon2 - lon1;  double dLat=lat2 - lat1;  if (Math.abs(dLon) > Math.PI) {    dLon=dLon > 0 ? -(2 * Math.PI - dLon) : (2 * Math.PI + dLon);  }  double azimuthRadians=Math.atan2(dLon,dLat);  return Double.isNaN(azimuthRadians) ? Angle.ZERO : Angle.fromRadians(azimuthRadians);}  }
class C{  public void finishPlayback(){  if (mVideoView != null) {    mVideoView.stopPlayback();    mVideoView.suspend();    mVideoView.setVideoURI(null);  }  releaseMediaSession();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void launchTracker(){  AbstractLaunch launch=mCardAdapter.getLauncher(CardAdapter.SANTA);  if (launch instanceof LaunchSanta) {    LaunchSanta tracker=(LaunchSanta)launch;    AnalyticsManager.sendEvent(R.string.analytics_event_category_launch,R.string.analytics_launch_action_village);    MeasurementManager.recordCustomEvent(mMeasurement,getString(R.string.analytics_event_category_launch),getString(R.string.analytics_launch_action_village));    tracker.onClick(tracker.getClickTarget());  }}  }
class C{  public void testRedilveredFlagSetOnRollback() throws Exception {  Destination destination=createDestination(getClass().getName());  Connection connection=createConnection();  connection.setClientID(idGen.generateId());  connection.start();  Session consumerSession=connection.createSession(true,Session.CLIENT_ACKNOWLEDGE);  MessageConsumer consumer=null;  if (topic) {    consumer=consumerSession.createDurableSubscriber((Topic)destination,"TESTRED");  } else {    consumer=consumerSession.createConsumer(destination);  }  Session producerSession=connection.createSession(true,Session.AUTO_ACKNOWLEDGE);  MessageProducer producer=producerSession.createProducer(destination);  producer.setDeliveryMode(deliveryMode);  TextMessage sentMsg=producerSession.createTextMessage();  sentMsg.setText("msg1");  producer.send(sentMsg);  producerSession.commit();  Message recMsg=consumer.receive(RECEIVE_TIMEOUT);  assertFalse(recMsg.getJMSRedelivered());  recMsg=consumer.receive(RECEIVE_TIMEOUT);  consumerSession.rollback();  recMsg=consumer.receive(RECEIVE_TIMEOUT);  assertTrue(recMsg.getJMSRedelivered());  consumerSession.commit();  assertTrue(recMsg.equals(sentMsg));  assertTrue(recMsg.getJMSRedelivered());  connection.close();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(getAttributeNS05.class,args);}  }
class C{  public void close() throws IOException {  if (socket != null) {    send("QUIT");    readCode(221);    socket.close();  }}  }
class C{  static int convertToPixels(float value,String unit,boolean isHor,float ref,ContainerWrapper parent,ComponentWrapper comp){  UnitValue uv=(isHor ? HOR_DEFS : VER_DEFS).get(unit);  return uv != null ? Math.round(value * uv.getPixels(ref,parent,comp)) : UnitConverter.UNABLE;}  }
class C{  private void sendHandshakeTableFeaturesRequest(){  OFTableFeaturesStatsRequest tfsr=factory.buildTableFeaturesStatsRequest().setXid(handshakeTransactionIds--).build();  mainConnection.write(tfsr);}  }
class C{  @Override protected String[] parseListType(String listTypeDefinition){  return parseSet(listTypeDefinition);}  }
class C{  public int updateTriggerGroupStateFromOtherStates(Connection conn,GroupMatcher<TriggerKey> matcher,String newState,String oldState1,String oldState2,String oldState3) throws SQLException {  PreparedStatement ps=null;  try {    ps=conn.prepareStatement(rtp(UPDATE_TRIGGER_GROUP_STATE_FROM_STATES));    ps.setString(1,newState);    ps.setString(2,toSqlLikeClause(matcher));    ps.setString(3,oldState1);    ps.setString(4,oldState2);    ps.setString(5,oldState3);    return ps.executeUpdate();  }  finally {    closeStatement(ps);  }}  }
class C{  private void decorateFromFilesystem(final IResource resource,final IDecoration decoration,final TFSRepository repository){  if (repository == null) {    decoration.addOverlay(imageHelper.getImageDescriptor(TFS_OFFLINE_ICON));  } else   if (resource.getType() == IResource.FILE && resource.isReadOnly()) {    decoration.addOverlay(imageHelper.getImageDescriptor(TFS_ICON));  } else   if (resource.getType() == IResource.FILE) {    decoration.addOverlay(imageHelper.getImageDescriptor(UNKNOWN_ICON));  } else {    decoration.addOverlay(imageHelper.getImageDescriptor(TFS_ICON));  }}  }
class C{  public AsyncResult OpenSecureChannelAsync(RequestHeader RequestHeader,UnsignedInteger ClientProtocolVersion,SecurityTokenRequestType RequestType,MessageSecurityMode SecurityMode,byte[] ClientNonce,UnsignedInteger RequestedLifetime){  OpenSecureChannelRequest req=new OpenSecureChannelRequest(RequestHeader,ClientProtocolVersion,RequestType,SecurityMode,ClientNonce,RequestedLifetime);  return channel.serviceRequestAsync(req);}  }
class C{  private String escapeAttributeValue(String value){  return escapeXmlValue(value,true);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (!Sage.client || !Sage.EMBEDDED || SageTV.neddy == null)   return null;  int progress=SageTV.neddy.getConnectionState();  if (progress == NetworkClient.CS_STATE_SERVER_LOADING)   return Sage.rez("CS_STATE_SERVER_LOADING"); else   if (progress == NetworkClient.CS_STATE_SERVER_NOT_FOUND)   return Sage.rez("CS_STATE_SERVER_NOT_FOUND"); else   if (progress == NetworkClient.CS_STATE_CONNECTION_ESTABLISHING)   return Sage.rez("CS_STATE_CONNECTION_ESTABLISHING"); else   if (progress == NetworkClient.CS_STATE_FULLY_CONNECTED)   return Sage.rez("CS_STATE_FULLY_CONNECTED"); else   if (progress == NetworkClient.CS_STATE_NOT_INITIALIZED)   return Sage.rez("CS_STATE_NOT_INITIALIZED"); else   if (progress == NetworkClient.CS_STATE_UNAUTHORIZED_CLIENT)   return Sage.rez("CS_STATE_UNAUTHORIZED_CLIENT"); else   if (progress == NetworkClient.CS_STATE_VERSION_MISMATCH)   return Sage.rez("CS_STATE_VERSION_MISMATCH"); else   return null;}  }
class C{  public Node(Animator animation){  this.animation=animation;}  }
class C{  protected void extractFile(Path sgmFile){  try (BufferedReader reader=Files.newBufferedReader(sgmFile,StandardCharsets.ISO_8859_1)){    StringBuilder buffer=new StringBuilder(1024);    StringBuilder outBuffer=new StringBuilder(1024);    String line=null;    int docNumber=0;    while ((line=reader.readLine()) != null) {      if (line.indexOf("</REUTERS") == -1) {        buffer.append(line).append(' ');      } else {        Matcher matcher=EXTRACTION_PATTERN.matcher(buffer);        while (matcher.find()) {          for (int i=1; i <= matcher.groupCount(); i++) {            if (matcher.group(i) != null) {              outBuffer.append(matcher.group(i));            }          }          outBuffer.append(System.lineSeparator()).append(System.lineSeparator());        }        String out=outBuffer.toString();        for (int i=0; i < META_CHARS_SERIALIZATIONS.length; i++) {          out=out.replaceAll(META_CHARS_SERIALIZATIONS[i],META_CHARS[i]);        }        Path outFile=outputDir.resolve(sgmFile.getFileName() + "-" + (docNumber++)+ ".txt");        try (BufferedWriter writer=Files.newBufferedWriter(outFile,StandardCharsets.UTF_8)){          writer.write(out);        }         outBuffer.setLength(0);        buffer.setLength(0);      }    }  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public Container createContainer(Resources res,String resourceName){  return createContainer(res,resourceName,null);}  }
class C{  public Days minus(Days days){  if (days == null) {    return this;  }  return minus(days.getValue());}  }
class C{  synchronized public void forceStop(){  forceStopScheduler(SCHEDULER_ALERT);  forceStopScheduler(SCHEDULER_METRICS);  forceStopScheduler(SCHEDULER_RETENTION);}  }
class C{  public static <T>Callable<T> privilegedCallable(Callable<T> callable){  if (callable == null)   throw new NullPointerException();  return new PrivilegedCallable<T>(callable);}  }
class C{  @Override public void updateBytes(String columnLabel,byte[] x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateBytes(" + quote(columnLabel) + ", x);");    }    update(columnLabel,x == null ? (Value)ValueNull.INSTANCE : ValueBytes.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void testAddIndexes() throws Exception {  boolean doFullMerge=false;  Directory dir1=getAssertNoDeletesDirectory(newDirectory());  IndexWriterConfig iwc=newIndexWriterConfig(new MockAnalyzer(random()));  if (iwc.getMaxBufferedDocs() < 20) {    iwc.setMaxBufferedDocs(20);  }  iwc.setMergePolicy(NoMergePolicy.INSTANCE);  IndexWriter writer=new IndexWriter(dir1,iwc);  createIndexNoClose(!doFullMerge,"index1",writer);  writer.flush(false,true);  Directory dir2=newDirectory();  IndexWriter writer2=new IndexWriter(dir2,newIndexWriterConfig(new MockAnalyzer(random())));  createIndexNoClose(!doFullMerge,"index2",writer2);  writer2.close();  DirectoryReader r0=writer.getReader();  assertTrue(r0.isCurrent());  writer.addIndexes(dir2);  assertFalse(r0.isCurrent());  r0.close();  DirectoryReader r1=writer.getReader();  assertTrue(r1.isCurrent());  writer.commit();  assertFalse(r1.isCurrent());  assertEquals(200,r1.maxDoc());  int index2df=r1.docFreq(new Term("indexname","index2"));  assertEquals(100,index2df);  Document doc5=r1.document(5);  assertEquals("index1",doc5.get("indexname"));  Document doc150=r1.document(150);  assertEquals("index2",doc150.get("indexname"));  r1.close();  writer.close();  dir1.close();  dir2.close();}  }
class C{  public static double[] toDoubleArray(byte[] array){  double[] result=new double[array.length];  for (int i=0; i < array.length; i++) {    result[i]=(double)array[i];  }  return result;}  }
class C{  public Table parseTableName(String sql){  parameters=New.arrayList();  initialize(sql);  read();  return readTableOrView();}  }
class C{  public void actionPerformed(ActionEvent e){  try {    saveData();  } catch (  IOException e1) {    e1.printStackTrace();    JOptionPane.showMessageDialog(JOptionUtils.centeringComp(),"Error in saving: " + e1.getMessage());  }}  }
class C{  public static Double createDouble(String val){  return Double.valueOf(val);}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-17 12:29:24.922 -0500",hash_original_method="39D3E8C83EC5D9AA90999E3A2D1BCB07",hash_generated_method="2DE8AD90C1A42DCA55687530BB5B9E78") @DSVerified @DSSafe(DSCat.ANDROID_CALLBACK) @Override protected void onRestoreInstanceState(Bundle state){  ensureList();  super.onRestoreInstanceState(state);}  }
class C{  @NotNull public static Set<VirtualFile> hgRoots(@NotNull Project project,@NotNull Collection<FilePath> filePaths){  HashSet<VirtualFile> roots=new HashSet<VirtualFile>();  for (  FilePath path : filePaths) {    ContainerUtil.addIfNotNull(roots,getHgRootOrNull(project,path));  }  return roots;}  }
class C{  public VisorTaskArgument(Collection<UUID> nodes,A arg,boolean debug){  assert nodes != null;  assert !nodes.isEmpty();  this.nodes=nodes;  this.arg=arg;  this.debug=debug;}  }
class C{  public void throwIfNotEmpty(){synchronized (nested) {    if (nested.isEmpty()) {    } else     if (nested.size() == 1) {      Throwable t=nested.get(0);      TigerThrower.sneakyThrow(t);    } else {      throw this;    }  }}  }
class C{  public static String insertParameter(String classname,String desc){  if (desc.charAt(0) != '(')   return desc; else   return "(L" + classname.replace('.','/') + ';'+ desc.substring(1);}  }
class C{  public double distance(){  return bestDistance;}  }
class C{  @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:51.487 -0500",hash_original_method="46011790469F97E3B0CE4186D5C8E763",hash_generated_method="235F8733C111298DA75197392233021F") public static byte[] numberToCalledPartyBCD(String number){  return numberToCalledPartyBCDHelper(number,false);}  }
class C{  public static boolean writeFile(File file,InputStream stream,boolean append){  OutputStream o=null;  try {    makeDirs(file.getAbsolutePath());    o=new FileOutputStream(file,append);    byte data[]=new byte[1024];    int length=-1;    while ((length=stream.read(data)) != -1) {      o.write(data,0,length);    }    o.flush();    return true;  } catch (  FileNotFoundException e) {    throw new RuntimeException("FileNotFoundException occurred. ",e);  }catch (  IOException e) {    throw new RuntimeException("IOException occurred. ",e);  } finally {    if (o != null) {      try {        o.close();        stream.close();      } catch (      IOException e) {        throw new RuntimeException("IOException occurred. ",e);      }    }  }}  }
class C{  private int nextClearBit(int fromIndex){  int u=unitIndex(fromIndex);  int testIndex=(fromIndex & BIT_INDEX_MASK);  long unit=this.units[u] >> testIndex;  if (unit == (WORD_MASK >> testIndex)) {    testIndex=0;  }  while ((unit == WORD_MASK) && (u < this.units.length - 1)) {    unit=this.units[++u];  }  if (unit == WORD_MASK) {    return -1;  }  int result;  if (unit == 0) {    result=u * BITS_PER_UNIT + testIndex;  } else {    testIndex+=trailingZeroCnt(~unit);    result=((u * BITS_PER_UNIT) + testIndex);  }  if (result > MAX_ID || result < 0) {    return -1;  } else {    return result;  }}  }
class C{  private Solution[] extremePoints(){  Solution[] result=new Solution[numberOfObjectives];  for (int i=0; i < numberOfObjectives; i++) {    result[i]=findExtremePoint(i);  }  return result;}  }
class C{  public static PartitionResponse send(PartitionedRegion pr,Index ind,boolean removeAllIndex){  RemoveIndexesResponse processor=null;  RegionAdvisor advisor=(RegionAdvisor)(pr.getDistributionAdvisor());  final Set recipients=new HashSet(advisor.adviseDataStore());  recipients.remove(pr.getDistributionManager().getDistributionManagerId());  if (recipients.size() > 0) {    processor=(RemoveIndexesResponse)(new RemoveIndexesMessage()).createReplyProcessor(pr,recipients);  }  if (removeAllIndex) {    RemoveIndexesMessage rm=new RemoveIndexesMessage(recipients,pr.getPRId(),processor);    pr.getDistributionManager().putOutgoing(rm);  } else {    RemoveIndexesMessage rm=new RemoveIndexesMessage(recipients,pr.getPRId(),processor,true,ind.getName());    pr.getDistributionManager().putOutgoing(rm);  }  return processor;}  }
class C{  public void transferData(Geometry targetGeom){  for (int i=0; i < targetGeom.getNumGeometries(); i++) {    Geometry geom=targetGeom.getGeometryN(i);    Coordinate vertexKey=(Coordinate)geom.getUserData();    if (vertexKey == null)     continue;    geom.setUserData(coordDataMap.get(vertexKey));  }}  }
class C{  public void delete(){  if (number == 0)   return;  dots[--number].setSelected(false);}  }
class C{  @Override protected Object doInBackground(Object... params){  try {    String token=fetchToken();    if (token != null) {      return token;    }  } catch (  IOException e) {    logger.error(e);  }  return null;}  }
class C{  public static boolean isEmpty(Object[] array){  return isNull(array) || array.length <= 0;}  }
class C{  protected final void shiftKeys(int pos){  int last, slot;  char curr;  final char[] key=this.key;  for (; ; ) {    pos=((last=pos) + 1) & mask;    for (; ; ) {      if (((curr=key[pos]) == ((char)0))) {        key[last]=((char)0);        return;      }      slot=(HashCommon.mix((curr))) & mask;      if (last <= pos ? last >= slot || slot > pos : last >= slot && slot > pos)       break;      pos=(pos + 1) & mask;    }    key[last]=curr;    value[last]=value[pos];  }}  }
class C{  private void drawNeedle(Canvas canvas,double angle,int centerX,int centerY,double radius,boolean arrow,Paint paint){  double diff=Math.toRadians(90);  int needleSinValue=(int)(NEEDLE_RADIUS * Math.sin(angle - diff));  int needleCosValue=(int)(NEEDLE_RADIUS * Math.cos(angle - diff));  int needleX=(int)(radius * Math.sin(angle));  int needleY=(int)(radius * Math.cos(angle));  int needleCenterX=centerX + needleX;  int needleCenterY=centerY + needleY;  float[] points;  if (arrow) {    int arrowBaseX=centerX + (int)(radius * 0.85 * Math.sin(angle));    int arrowBaseY=centerY + (int)(radius * 0.85 * Math.cos(angle));    points=new float[]{arrowBaseX - needleSinValue,arrowBaseY - needleCosValue,needleCenterX,needleCenterY,arrowBaseX + needleSinValue,arrowBaseY + needleCosValue};    float width=paint.getStrokeWidth();    paint.setStrokeWidth(5);    canvas.drawLine(centerX,centerY,needleCenterX,needleCenterY,paint);    paint.setStrokeWidth(width);  } else {    points=new float[]{centerX - needleSinValue,centerY - needleCosValue,needleCenterX,needleCenterY,centerX + needleSinValue,centerY + needleCosValue};  }  drawPath(canvas,points,paint,true);}  }
class C{  protected void terminate(boolean commit) throws HeurRollbackException, HeurMixedException, SysException, java.lang.SecurityException, HeurCommitException, HeurHazardException, RollbackException, IllegalStateException {synchronized (fsm_) {    if (commit) {      if (participants_.size() <= 1) {        commit(true);      } else {        int prepareResult=prepare();        if (prepareResult != Participant.READ_ONLY)         commit(false);      }    } else {      rollback();    }  }}  }
class C{  public mxTemporaryCellStates(mxGraphView view,double scale,Object[] cells){  this.view=view;  oldBounds=view.getGraphBounds();  oldStates=view.getStates();  oldScale=view.getScale();  view.setStates(new Hashtable<Object,mxCellState>());  view.setScale(scale);  if (cells != null) {    mxCellState state=view.createState(new mxCell());    for (int i=0; i < cells.length; i++) {      view.validateBounds(state,cells[i]);    }    double minX=0;    double minY=0;    double maxX=0;    double maxY=0;    for (int i=0; i < cells.length; i++) {      mxRectangle bounds=view.validatePoints(state,cells[i]);      minX=Math.min(minX,bounds.getX());      minY=Math.min(minY,bounds.getY());      maxX=Math.max(maxX,bounds.getX() + bounds.getWidth());      maxY=Math.max(maxY,bounds.getY() + bounds.getHeight());    }    view.setGraphBounds(new mxRectangle(minX,minY,maxX - minX,maxY - minY));  }}  }
class C{  public ReferenceMap(int keyType,int valueType,boolean purgeValues){  super(keyType,valueType,DEFAULT_CAPACITY,DEFAULT_LOAD_FACTOR,purgeValues);}  }
class C{  public <O>O normalizationRestore(O v){  return v;}  }
class C{  public InvalidMidiDataException(){  super();}  }
class C{  public int hashCode(){  return Objects.hash(file,princ,bound);}  }
class C{  public String cardTrashed(int i,String s){  return top.getString(R.string.trashed,showCard(i,s,CardAnimator.ShowCardType.TRASHED));}  }
class C{  public static void checkArgument(boolean expression,@Nullable Object errorMessage){  if (!expression) {    throw new IllegalArgumentException(String.valueOf(errorMessage));  }}  }
class C{  public boolean hasUsername(){  return hasExtension(Username.class);}  }
class C{  @Override public void agg(double newVal){  valueSet.add((int)(newVal - minValue));}  }
class C{  public INodejsProcess create(File projectDir,File tsFile,File nodejsFile,INodejsLaunchConfiguration configuration,String fileType) throws TypeScriptException {  INodejsProcess process=new NodejsProcess(projectDir,tsFile,nodejsFile,configuration,fileType);  process.addProcessListener(listener);  return process;}  }
class C{  public static void checkNeedForArgumentCasts(BlockScope scope,int operator,int operatorSignature,Expression left,int leftTypeId,boolean leftIsCast,Expression right,int rightTypeId,boolean rightIsCast){  if (scope.compilerOptions().getSeverity(CompilerOptions.UnnecessaryTypeCheck) == ProblemSeverities.Ignore) {    return;  }  int alternateLeftTypeId=leftTypeId;  if (leftIsCast) {    if ((left.bits & ASTNode.UnnecessaryCast) == 0 && left.resolvedType.isBaseType()) {      leftIsCast=false;    } else {      TypeBinding alternateLeftType=((CastExpression)left).expression.resolvedType;      if (alternateLeftType == null) {        return;      }      if ((alternateLeftTypeId=alternateLeftType.id) == leftTypeId || scope.environment().computeBoxingType(alternateLeftType).id == leftTypeId) {        scope.problemReporter().unnecessaryCast((CastExpression)left);        leftIsCast=false;      } else       if (alternateLeftTypeId == TypeIds.T_null) {        alternateLeftTypeId=leftTypeId;        leftIsCast=false;      }    }  }  int alternateRightTypeId=rightTypeId;  if (rightIsCast) {    if ((right.bits & ASTNode.UnnecessaryCast) == 0 && right.resolvedType.isBaseType()) {      rightIsCast=false;    } else {      TypeBinding alternateRightType=((CastExpression)right).expression.resolvedType;      if (alternateRightType == null) {        return;      }      if ((alternateRightTypeId=alternateRightType.id) == rightTypeId || scope.environment().computeBoxingType(alternateRightType).id == rightTypeId) {        scope.problemReporter().unnecessaryCast((CastExpression)right);        rightIsCast=false;      } else       if (alternateRightTypeId == TypeIds.T_null) {        alternateRightTypeId=rightTypeId;        rightIsCast=false;      }    }  }  if (leftIsCast || rightIsCast) {    if (alternateLeftTypeId > 15 || alternateRightTypeId > 15) {      if (alternateLeftTypeId == TypeIds.T_JavaLangString) {        alternateRightTypeId=TypeIds.T_JavaLangObject;      } else       if (alternateRightTypeId == TypeIds.T_JavaLangString) {        alternateLeftTypeId=TypeIds.T_JavaLangObject;      } else {        return;      }    }    int alternateOperatorSignature=OperatorExpression.OperatorSignatures[operator][(alternateLeftTypeId << 4) + alternateRightTypeId];    final int CompareMASK=(0xF << 16) + (0xF << 8) + 0xF;    if ((operatorSignature & CompareMASK) == (alternateOperatorSignature & CompareMASK)) {      if (leftIsCast) {        scope.problemReporter().unnecessaryCast((CastExpression)left);      }      if (rightIsCast) {        scope.problemReporter().unnecessaryCast((CastExpression)right);      }    }  }}  }
class C{  private void compareDictionaryValueFromSortedIndex(List<String> data,Dictionary forwardDictionary){  int expectedSurrogateKey=0;  for (int i=0; i < data.size(); i++) {    expectedSurrogateKey++;    String expectedDictionaryValue=data.get(i);    int actualSurrogateKey=forwardDictionary.getSurrogateKey(expectedDictionaryValue);    assertTrue(actualSurrogateKey == expectedSurrogateKey);    int sortedIndex=forwardDictionary.getSortedIndex(actualSurrogateKey);    String actualDictionaryValue=forwardDictionary.getDictionaryValueFromSortedIndex(sortedIndex);    assertTrue(expectedDictionaryValue.equals(actualDictionaryValue));  }}  }
class C{  public DrawerBuilder withRootView(@IdRes int rootViewRes){  if (mActivity == null) {    throw new RuntimeException("please pass an activity first to use this call");  }  return withRootView((ViewGroup)mActivity.findViewById(rootViewRes));}  }
class C{  @Before public void loadSchema(){  schema=new Schema();  reasoner=new LocalReasoner(TestUtils.NODE,schema,1,0);}  }
class C{  public Chest(){}  }
class C{  public static String trim(String list,String delimiter){  return trim(list,delimiter,new int[2],false);}  }
class C{  final public MutableString replace(final Char2CharMap m){  final int length=length();  final char[] a=array;  boolean found=false;  for (int i=0; i < length; i++)   if (m.containsKey(a[i])) {    a[i]=m.get(a[i]);    found=true;  }  if (found && hashLength < 0)   hashLength=-1;  return this;}  }
class C{  public void removeAllSynchronizers(){  this.lockSyncMap.lock();  try {    for (    List<StatSync> v : this.synchronizers.values()) {      v.clear();    }  }  finally {    this.lockSyncMap.unlock();  }}  }
class C{  public void backupFile(String name) throws IOException {  File original=new File(plugin.getDataFolder(),name);  File backup=new File(plugin.getDataFolder(),name + ".bak");  if (original.lastModified() > backup.lastModified() && original.exists()) {    try (FileInputStream inStream=new FileInputStream(original);FileOutputStream outStream=new FileOutputStream(backup)){      byte[] buffer=new byte[1024];      int length;      while ((length=inStream.read(buffer)) > 0) {        outStream.write(buffer,0,length);      }    }   }}  }
class C{  public static ApplicationConfig configFromAssets(final Context context,final String configFileName){  final AssetManager assetManager=context.getResources().getAssets();  final StringBuilder returnString=new StringBuilder();  final String configFilePath="www/" + configFileName;  BufferedReader reader=null;  try {    InputStreamReader isr=new InputStreamReader(assetManager.open(configFilePath));    reader=new BufferedReader(isr);    String line;    while ((line=reader.readLine()) != null) {      returnString.append(line);    }  } catch (  Exception e) {    Log.d("CHCP","Failed to read chcp.json from assets",e);  } finally {    try {      if (reader != null) {        reader.close();      }    } catch (    Exception e2) {      Log.d("CHCP","Failed to clear resources after reading chcp.json from the assets",e2);    }  }  return ApplicationConfig.fromJson(returnString.toString());}  }
class C{  public byte[] toByteArray(){  if (index > 0xFFFF) {    throw new RuntimeException("Class file too large!");  }  int size=24 + 2 * interfaceCount;  int nbFields=0;  FieldWriter fb=firstField;  while (fb != null) {    ++nbFields;    size+=fb.getSize();    fb=(FieldWriter)fb.fv;  }  int nbMethods=0;  MethodWriter mb=firstMethod;  while (mb != null) {    ++nbMethods;    size+=mb.getSize();    mb=(MethodWriter)mb.mv;  }  int attributeCount=0;  if (bootstrapMethods != null) {    ++attributeCount;    size+=8 + bootstrapMethods.length;    newUTF8("BootstrapMethods");  }  if (ClassReader.SIGNATURES && signature != 0) {    ++attributeCount;    size+=8;    newUTF8("Signature");  }  if (sourceFile != 0) {    ++attributeCount;    size+=8;    newUTF8("SourceFile");  }  if (sourceDebug != null) {    ++attributeCount;    size+=sourceDebug.length + 6;    newUTF8("SourceDebugExtension");  }  if (enclosingMethodOwner != 0) {    ++attributeCount;    size+=10;    newUTF8("EnclosingMethod");  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    ++attributeCount;    size+=6;    newUTF8("Deprecated");  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((version & 0xFFFF) < Opcodes.V1_5 || (access & ACC_SYNTHETIC_ATTRIBUTE) != 0) {      ++attributeCount;      size+=6;      newUTF8("Synthetic");    }  }  if (innerClasses != null) {    ++attributeCount;    size+=8 + innerClasses.length;    newUTF8("InnerClasses");  }  if (ClassReader.ANNOTATIONS && anns != null) {    ++attributeCount;    size+=8 + anns.getSize();    newUTF8("RuntimeVisibleAnnotations");  }  if (ClassReader.ANNOTATIONS && ianns != null) {    ++attributeCount;    size+=8 + ianns.getSize();    newUTF8("RuntimeInvisibleAnnotations");  }  if (ClassReader.ANNOTATIONS && tanns != null) {    ++attributeCount;    size+=8 + tanns.getSize();    newUTF8("RuntimeVisibleTypeAnnotations");  }  if (ClassReader.ANNOTATIONS && itanns != null) {    ++attributeCount;    size+=8 + itanns.getSize();    newUTF8("RuntimeInvisibleTypeAnnotations");  }  if (attrs != null) {    attributeCount+=attrs.getCount();    size+=attrs.getSize(this,null,0,-1,-1);  }  size+=pool.length;  ByteVector out=new ByteVector(size);  out.putInt(0xCAFEBABE).putInt(version);  out.putShort(index).putByteArray(pool.data,0,pool.length);  int mask=Opcodes.ACC_DEPRECATED | ACC_SYNTHETIC_ATTRIBUTE | ((access & ACC_SYNTHETIC_ATTRIBUTE) / TO_ACC_SYNTHETIC);  out.putShort(access & ~mask).putShort(name).putShort(superName);  out.putShort(interfaceCount);  for (int i=0; i < interfaceCount; ++i) {    out.putShort(interfaces[i]);  }  out.putShort(nbFields);  fb=firstField;  while (fb != null) {    fb.put(out);    fb=(FieldWriter)fb.fv;  }  out.putShort(nbMethods);  mb=firstMethod;  while (mb != null) {    mb.put(out);    mb=(MethodWriter)mb.mv;  }  out.putShort(attributeCount);  if (bootstrapMethods != null) {    out.putShort(newUTF8("BootstrapMethods"));    out.putInt(bootstrapMethods.length + 2).putShort(bootstrapMethodsCount);    out.putByteArray(bootstrapMethods.data,0,bootstrapMethods.length);  }  if (ClassReader.SIGNATURES && signature != 0) {    out.putShort(newUTF8("Signature")).putInt(2).putShort(signature);  }  if (sourceFile != 0) {    out.putShort(newUTF8("SourceFile")).putInt(2).putShort(sourceFile);  }  if (sourceDebug != null) {    int len=sourceDebug.length;    out.putShort(newUTF8("SourceDebugExtension")).putInt(len);    out.putByteArray(sourceDebug.data,0,len);  }  if (enclosingMethodOwner != 0) {    out.putShort(newUTF8("EnclosingMethod")).putInt(4);    out.putShort(enclosingMethodOwner).putShort(enclosingMethod);  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    out.putShort(newUTF8("Deprecated")).putInt(0);  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((version & 0xFFFF) < Opcodes.V1_5 || (access & ACC_SYNTHETIC_ATTRIBUTE) != 0) {      out.putShort(newUTF8("Synthetic")).putInt(0);    }  }  if (innerClasses != null) {    out.putShort(newUTF8("InnerClasses"));    out.putInt(innerClasses.length + 2).putShort(innerClassesCount);    out.putByteArray(innerClasses.data,0,innerClasses.length);  }  if (ClassReader.ANNOTATIONS && anns != null) {    out.putShort(newUTF8("RuntimeVisibleAnnotations"));    anns.put(out);  }  if (ClassReader.ANNOTATIONS && ianns != null) {    out.putShort(newUTF8("RuntimeInvisibleAnnotations"));    ianns.put(out);  }  if (ClassReader.ANNOTATIONS && tanns != null) {    out.putShort(newUTF8("RuntimeVisibleTypeAnnotations"));    tanns.put(out);  }  if (ClassReader.ANNOTATIONS && itanns != null) {    out.putShort(newUTF8("RuntimeInvisibleTypeAnnotations"));    itanns.put(out);  }  if (attrs != null) {    attrs.put(this,null,0,-1,-1,out);  }  if (invalidFrames) {    anns=null;    ianns=null;    attrs=null;    innerClassesCount=0;    innerClasses=null;    bootstrapMethodsCount=0;    bootstrapMethods=null;    firstField=null;    lastField=null;    firstMethod=null;    lastMethod=null;    computeMaxs=false;    computeFrames=true;    invalidFrames=false;    new ClassReader(out.data).accept(this,ClassReader.SKIP_FRAMES);    return toByteArray();  }  return out.data;}  }
class C{  void removeAll(final boolean mark){  if (mark) {    AbstractInsnNode insn=first;    while (insn != null) {      AbstractInsnNode next=insn.next;      insn.index=-1;      insn.prev=null;      insn.next=null;      insn=next;    }  }  size=0;  first=null;  last=null;  cache=null;}  }
class C{  public final int length(){  return longs.length();}  }
class C{  protected static void writeQuotedStringValue(ByteArrayOutputStream out,byte[] buf){  int len=buf.length;  byte ch;  for (int i=0; i < len; i++) {    ch=buf[i];    if (needEscape((char)ch)) {      out.write('\\');    }    out.write(ch);  }}  }
class C{  public Builder addAddress(Address address){  if (address != null) {    this.addresses.add(new Address.Builder(address).build());  }  return this;}  }
class C{  private static void assertParam(final Request req,final CharSequence param,final String value) throws IOException {  MatcherAssert.assertThat(new RqFormSmart(new RqFormBase(req)).single(param),Matchers.equalTo(value));}  }
class C{  public static void clear(){  XmlAuthorization.currentDocUri=null;  if (XmlAuthorization.userRoles != null) {    XmlAuthorization.userRoles.clear();    XmlAuthorization.userRoles=null;  }  if (XmlAuthorization.rolePermissions != null) {    XmlAuthorization.rolePermissions.clear();    XmlAuthorization.rolePermissions=null;  }  XmlAuthorization.xmlLoadFailure=null;}  }
class C{  @Override public void closeElement(){  current=(XMLElement)stack.pop();}  }
class C{  private CheckpointQueryBuilder parseCheckpoint(CheckpointQueryBuilder query){  Token token=scanToken();  if (token != Token.IDENTIFIER) {    throw error("Expected IDENTIFIER at {0}",token);  }  String pod=_lexeme;  String name;  if (peekToken() == Token.DOT) {    scanToken();    if ((token=scanToken()) != Token.IDENTIFIER) {      throw error("Expected IDENTIFIER at {0}",token);    }    name=_lexeme;  } else {    name=pod;    pod=getPodName();  }  query.setTableName(pod + '.' + name);  return query;}  }
class C{  private void validateUserGroupUpdateParam(UserGroupUpdateParam param){  validateUserGroupBaseParam(param);  validateUserAttributeParam(param.getAddAttributes());}  }
class C{  private MultipartUtils(){}  }
class C{  public boolean isSetVersion(){  return this.version != null;}  }
class C{  @DELETE @Path("/{id}") public Response cancelOrder(@ApiParam(value="The id of the order to cancel",required=true) @PathParam("id") int orderId){  orderService.cancelOrder(orderId);  return Response.ok().build();}  }
class C{  public void sample(ByteBuffer buffer) throws RemoteException {  assert buffer != null;  assert rvm != null;synchronized (buffer) {    buffer.clear();    buffer.put(rvm.getBytes());  }}  }
class C{  public static FtpClient open(String url) throws IOException {  FtpClient client=new FtpClient();  client.connect(url);  return client;}  }
class C{  public ApproximationSetCollector(double epsilon){  this(null,new double[]{epsilon});}  }
class C{  static public void showMethodWarning(String method){  PGraphics.showMethodWarning(method);}  }
class C{  public MethodAnnotationStruct(CstMethodRef method,AnnotationSetItem annotations){  if (method == null) {    throw new NullPointerException("method == null");  }  if (annotations == null) {    throw new NullPointerException("annotations == null");  }  this.method=method;  this.annotations=annotations;}  }
class C{  public static boolean equals(int[] left,int offsetLeft,int[] right,int offsetRight,int length){  if ((offsetLeft + length <= left.length) && (offsetRight + length <= right.length)) {    for (int i=0; i < length; i++) {      if (left[offsetLeft + i] != right[offsetRight + i]) {        return false;      }    }    return true;  }  return false;}  }
class C{  private void checkPrevious() throws GridNioException {  if (prevFilter == null)   throw new GridNioException("Failed to proceed with filter call since previous filter is not set " + "(do you use filter outside the filter chain?): " + getClass().getName());}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:33.262 -0500",hash_original_method="C92C5C24967E99B8B02E357BFAE9005B",hash_generated_method="B495614081449F8C08A453388FD8F37A") @Override public String toString(){  return super.toString();}  }
class C{  public synchronized boolean isOptionDefined(String key){  return options.containsKey(key);}  }
class C{  public char loadChar(){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return (char)0;}  }
class C{  protected final void BOOLEAN_CMP_INT(Instruction s,RegisterOperand res,Operand val1,Operand val2,ConditionOperand cond){  EMIT(CPOS(s,MIR_Compare.create(IA32_CMP,val1,val2)));  RegisterOperand temp=regpool.makeTemp(TypeReference.Boolean);  EMIT(CPOS(s,MIR_Set.create(IA32_SET__B,temp,COND(cond))));  EMIT(MIR_Unary.mutate(s,IA32_MOVZX__B,res,temp.copyD2U()));}  }
class C{  boolean incrementAnimation(){  this.animationStep++;  final boolean stopAnimation=this.animationStep > MAX_NUMBER_OF_STEPS;  if (stopAnimation) {    this.animationStep=0;  }  if (!isDisposed()) {    redraw();  }  return !stopAnimation;}  }
class C{  private void acceptSolutions(final ICloseableIterator<IBindingSet[]> itr){  try {    while (itr.hasNext()) {      final IBindingSet[] a=itr.next();      stats.chunksIn.increment();      stats.unitsIn.add(a.length);      for (      IBindingSet bset : a) {        IValueExpression<?> expr=null;        try {          for (          ISortOrder<?> s : sortOrder) {            (expr=s.getExpr()).get(bset);          }        } catch (        SparqlTypeErrorException ex) {          TypeErrorLog.handleTypeError(ex,expr,stats);        }        solutions.add(bset);      }    }    if (log.isInfoEnabled())     log.info("Buffered " + solutions.size() + " solutions so far");  }  finally {    itr.close();  }}  }
class C{  private File openFile(final EvolutionState state,final String filename){  File file=new File(filename);  if (file != null)   state.output.message("File created: " + filename); else   state.output.error("DRMStatistics#OpenFile: The file " + filename + " wasn't created.");  return file;}  }
class C{  @Override public JettySolrRunner createJetty(File solrHome,String dataDir,String shardList,String solrConfigOverride,String schemaOverride) throws Exception {  return createProxiedJetty(solrHome,dataDir,shardList,solrConfigOverride,schemaOverride);}  }
class C{  public static byte toByte(NibbleArray nibbles){  return toByte(nibbles.get(0),nibbles.get(1));}  }
class C{  public void resume(){  pauseLock.lock();  try {    paused=false;    pausedCondition.signalAll();  }  finally {    pauseLock.unlock();  }}  }
class C{  public int size(){  checkTokenized();  return tokens.length;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void addProperties(Properties props,String source){  for (  Object key : props.keySet()) {    String strKey=(String)key;    if (strKey == null || !strKey.toLowerCase().startsWith(m_parameterPrefix)) {      continue;    }    String val=props.getProperty(strKey);    m_rawProperties.put(strKey,new InternalProperty(strKey,val,source));  }}  }
class C{  public UnicodeSetIterator(UnicodeSet set){  reset(set);}  }
class C{  public void connected(ConnectedEvent e){}  }
class C{  protected EntityPropertySourceImpl(){  super();}  }
class C{  public static String normalizeFloat(String value){  return normalizeFPNumber(value,"-16777215.0","16777215.0","-149","104");}  }
class C{  public ServiceCall<TranslationResult> translate(final List<String> texts,final Language source,final Language target){  return translateRequest(texts,null,source,target);}  }
class C{  private void createTaskForVolume(Volume volume,VirtualPoolCapabilityValuesWrapper capabilities,TaskList taskList,String task){  ResourceOperationTypeEnum type=ResourceOperationTypeEnum.CREATE_BLOCK_VOLUME;  if (capabilities.getAddJournalCapacity()) {    type=ResourceOperationTypeEnum.ADD_JOURNAL_VOLUME;  }  createTaskForVolume(volume,type,taskList,task);}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public void clarifyFieldName(int order,String name){  assert name != null;  assert order < names.length;  names[order]=name.intern();}  }
class C{  public static TransitedEncoding parse(DerInputStream data,byte explicitTag,boolean optional) throws Asn1Exception, IOException {  if ((optional) && (((byte)data.peekByte() & (byte)0x1F) != explicitTag))   return null;  DerValue der=data.getDerValue();  if (explicitTag != (der.getTag() & (byte)0x1F)) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  } else {    DerValue subDer=der.getData().getDerValue();    return new TransitedEncoding(subDer);  }}  }
class C{  public static void checkState(boolean expression){  if (!expression) {    throw new IllegalStateException();  }}  }
class C{  public boolean register(){  return mSession.register_();}  }
class C{  private void saveToDatabase(){  StendhalRPZone zone=this.getZone();  if (zone != null) {    zone.storeToDatabase();  }}  }
class C{  public void addCalorie(double calorieAdded){  calorie+=calorieAdded;}  }
class C{  public void delete(@Nonnull final String username,@Nonnull final Collection<Long> ids){  Objects.requireNonNull(ids);  Preconditions.checkArgument(!ids.isEmpty(),"ids cannot be empty");  final URI uri=UriBuilder.fromUri(getTarget(username)).queryParam("ids",Joiner.on(",").join(ids)).build();  LOGGER.debug("DELETE {}",uri);  try (Timer.Context context=deleteTimer.time()){    client.target(uri).request().delete();  } catch (  Exception e) {    LOGGER.warn("Unable to delete notifications for {}",username,e);  }}  }
class C{  public TSink<JsonObject> events(TStream<JsonObject> stream,String eventId,int qos){  return stream.sink(new IotfDeviceEventsFixed(connector,eventId,qos));}  }
class C{  private RtpPacket parseRtpPacket(byte[] data){  RtpPacket packet=new RtpPacket();  packet.mLength=data.length;  packet.mReceivedAt=System.currentTimeMillis();  packet.extension=(data[0] & 0x10) > 0;  if ((byte)((data[1] & 0xff) & 0x80) == (byte)0x80) {    packet.marker=1;  } else {    packet.marker=0;  }  packet.payloadType=(byte)((data[1] & 0xff) & 0x7f);  packet.seqnum=(char)((data[2] << 8) | (data[3] & 0xff));  packet.timestamp=(((data[4] & 0xff) << 24) | ((data[5] & 0xff) << 16) | ((data[6] & 0xff) << 8)| (data[7] & 0xff));  packet.ssrc=(((data[8] & 0xff) << 24) | ((data[9] & 0xff) << 16) | ((data[10] & 0xff) << 8)| (data[11] & 0xff));  if (packet.extension) {    int dataId=11;    int extensionHeaderId=((data[++dataId] & 0xff) << 8) | (data[++dataId] & 0xff);    int length=((data[++dataId] & 0xff) << 8) | (data[++dataId] & 0xff);    if (extensionHeaderId == RtpExtensionHeader.RTP_EXTENSION_HEADER_ID) {      extractExtensionHeader(data,length,dataId,packet);    }    packet.payloadoffset=16 + length * 4;  } else {    packet.payloadoffset=12;  }  packet.payloadlength=packet.mLength - packet.payloadoffset;  packet.mData=new byte[packet.payloadlength];  System.arraycopy(data,packet.payloadoffset,packet.mData,0,packet.payloadlength);  return packet;}  }
class C{  public void clean(){  executeStack.clear();  executeTimeMap.clear();  seq=0;  error=false;  timeout=false;  stackId=null;}  }
class C{  private void defineTables(UIDefaults d){  d.put("tableHeaderBorderEnabled",new Color(0xcad3e0));  d.put("tableHeaderSortIndicator",new Color(0xc02a5481,true));  d.put("tableHeaderInteriorBaseEnabled",new Color(0x80a6d2));  String p="TableHeader";  String c=PAINTER_PREFIX + "TableHeaderPainter";  d.put(p + "[Enabled].ascendingSortIconPainter",new LazyPainter(c,TableHeaderPainter.Which.ASCENDINGSORTICON_ENABLED));  d.put(p + "[Enabled].descendingSortIconPainter",new LazyPainter(c,TableHeaderPainter.Which.DESCENDINGSORTICON_ENABLED));  p="Table";  d.put(p + ".background",new ColorUIResource(Color.WHITE));  d.put(p + ".alternateRowColor",new ColorUIResource(0xebf5fc));  d.put(p + ".showGrid",Boolean.FALSE);  d.put(p + ".contentMargins",new InsetsUIResource(0,0,0,0));  d.put(p + ".opaque",Boolean.TRUE);  d.put(p + ".intercellSpacing",new DimensionUIResource(0,0));  d.put(p + ".rendererUseTableColors",Boolean.TRUE);  d.put(p + ".rendererUseUIBorder",Boolean.TRUE);  d.put(p + ".cellNoFocusBorder",new BorderUIResource(BorderFactory.createEmptyBorder(2,5,2,5)));  d.put(p + "[Enabled+Selected].textForeground",Color.WHITE);  d.put(p + "[Enabled+Selected].textBackground",new Color(0x6181a5));  d.put(p + "[Disabled+Selected].textBackground",new Color(0x6181a5));  d.put(p + ".ascendingSortIcon",new SeaGlassIcon("TableHeader","ascendingSortIconPainter",8,7));  d.put(p + ".descendingSortIcon",new SeaGlassIcon("TableHeader","descendingSortIconPainter",8,7));  d.put(p + ".scrollPaneCornerComponent",TableScrollPaneCorner.class);  c=PAINTER_PREFIX + "TableHeaderRendererPainter";  p="TableHeader:\"TableHeader.renderer\"";  d.put(p + ".contentMargins",new InsetsUIResource(2,4,2,4));  d.put(p + ".States","Enabled,Pressed,Disabled,Focused,Sorted");  d.put(p + ".Sorted",new TableHeaderRendererSortedState());  d.put(p + "[Disabled].backgroundPainter",new LazyPainter(c,TableHeaderRendererPainter.Which.BACKGROUND_DISABLED));  d.put(p + "[Enabled].backgroundPainter",new LazyPainter(c,TableHeaderRendererPainter.Which.BACKGROUND_ENABLED));  d.put(p + "[Enabled+Focused].backgroundPainter",new LazyPainter(c,TableHeaderRendererPainter.Which.BACKGROUND_ENABLED_FOCUSED));  d.put(p + "[Pressed].backgroundPainter",new LazyPainter(c,TableHeaderRendererPainter.Which.BACKGROUND_PRESSED));  d.put(p + "[Enabled+Sorted].backgroundPainter",new LazyPainter(c,TableHeaderRendererPainter.Which.BACKGROUND_ENABLED_SORTED));  d.put(p + "[Enabled+Focused+Sorted].backgroundPainter",new LazyPainter(c,TableHeaderRendererPainter.Which.BACKGROUND_ENABLED_FOCUSED_SORTED));  d.put(p + "[Disabled+Sorted].backgroundPainter",new LazyPainter(c,TableHeaderRendererPainter.Which.BACKGROUND_DISABLED_SORTED));}  }
class C{  public void init(int width,int height,Parameters params){  setParameters(params);  setSize(width,height);  allocate();}  }
class C{  static FeeTransformResponseExtension createFeeCreateResponse(FeeTransformCommandExtension feeCreate,EppCommandOperations commandOperations){  return feeCreate.createResponseBuilder().setCurrency(commandOperations.getCurrency()).setFees(commandOperations.getFees()).setCredits(commandOperations.getCredits()).build();}  }
class C{  private void validateJobCreateRequest(JobCreateRequest request){  request.setNamespace(alternateKeyHelper.validateStringParameter("namespace",request.getNamespace()));  request.setJobName(alternateKeyHelper.validateStringParameter("job name",request.getJobName()));  parameterHelper.validateParameters(request.getParameters());  if (request.getS3PropertiesLocation() != null) {    s3PropertiesLocationHelper.validate(request.getS3PropertiesLocation());  }}  }
class C{  public InvisibleTypeOrVariableDescription(IEObjectDescription delegate){  super(delegate);}  }
class C{  private static boolean eq(Object o1,Object o2){  return o1 == null ? o2 == null : o1.equals(o2);}  }
class C{  public int current(){  if (currentIndex < replaceable.length()) {    return replaceable.charAt(currentIndex);  }  return DONE;}  }
class C{  @SuppressWarnings("unchecked") @Override public NotificationChain eInverseAdd(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case TypesPackage.OPERATION__PARAMETERS:    return ((InternalEList<InternalEObject>)(InternalEList<?>)getParameters()).basicAdd(otherEnd,msgs);}return super.eInverseAdd(otherEnd,featureID,msgs);}  }
class C{  private void dispatch(String message){  if (service == null) {    throw new NullPointerException(DebugOverlayService.class.getSimpleName() + " is null, but this should never be the case");  }  service.logMsg(message);}  }
class C{  public static void license(){  checkCompleteAndLicensed();  if (Common.isClusterStable()) {    render();  } else {    restarting();  }}  }
class C{  public CEdgeLabelHoverState(final CStateFactory<?,?> factory,final AbstractZyGraph<?,?> graph,final EdgeLabel label){  m_graph=Preconditions.checkNotNull(graph,"Error: graph argument can not be null");  m_factory=Preconditions.checkNotNull(factory,"Error: factory argument can not be null");  m_label=Preconditions.checkNotNull(label,"Error: label argument can not be null");}  }
class C{  protected void addGateway(String guid,IPv4Address ip){  if (ip.getInt() != 0) {    if (log.isDebugEnabled()) {      log.debug("Adding {} as gateway for GUID {}",ip.toString(),guid);    }    guidToGateway.put(guid,ip);    if (vNetsByGuid.get(guid) != null)     vNetsByGuid.get(guid).setGateway(ip.toString());    if (gatewayToGuid.containsKey(ip)) {      Set<String> gSet=gatewayToGuid.get(ip);      gSet.add(guid);    } else {      Set<String> gSet=Collections.synchronizedSet(new HashSet<String>());      gSet.add(guid);      gatewayToGuid.put(ip,gSet);    }  }}  }
class C{  @SuppressWarnings({"unchecked"}) public void addListener(EventType eventType,Listener<? extends BaseEvent> listener){  if (listener == null)   return;  if (listeners == null) {    listeners=new HashMap<String,List<Listener<BaseEvent>>>();  }  String key=getKey(eventType);  List<Listener<BaseEvent>> list=listeners.get(key);  if (list == null) {    list=new ArrayList<Listener<BaseEvent>>();    list.add((Listener)listener);    listeners.put(key,list);  } else {    if (!list.contains(listener)) {      list.add((Listener)listener);    }  }}  }
class C{  @Override public void seriesChanged(SeriesChangeEvent event){  refreshKeys();  fireDatasetChanged();}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMStyleElement(prefix,(AbstractDocument)doc);}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public void testIsCanalyzing(){  IndexedParent x=new IndexedParent(0,1);  IndexedParent y=new IndexedParent(1,2);  IndexedParent z=new IndexedParent(2,3);  IndexedParent[] twoParents=new IndexedParent[]{x,y};  IndexedParent[] threeParents=new IndexedParent[]{x,y,z};  BooleanFunction function=null;  function=new BooleanFunction(twoParents);  function.setValue(0,true);  function.setValue(1,false);  function.setValue(2,false);  function.setValue(3,false);  assertTrue(function.isCanalyzing());  function=new BooleanFunction(twoParents);  function.setValue(0,true);  function.setValue(1,true);  function.setValue(2,true);  function.setValue(3,false);  assertTrue(function.isCanalyzing());  function=new BooleanFunction(twoParents);  function.setValue(0,false);  function.setValue(1,true);  function.setValue(2,true);  function.setValue(3,false);  assertTrue(!(function.isCanalyzing()));  function=new BooleanFunction(threeParents);  function.setValue(0,true);  function.setValue(1,false);  function.setValue(2,false);  function.setValue(3,true);  function.setValue(4,false);  function.setValue(5,false);  function.setValue(6,false);  function.setValue(7,false);  assertTrue(function.isCanalyzing());  function=new BooleanFunction(threeParents);  function.setValue(0,true);  function.setValue(1,false);  function.setValue(2,false);  function.setValue(3,true);  function.setValue(4,false);  function.setValue(5,false);  function.setValue(6,false);  function.setValue(7,true);  assertTrue(!(function.isCanalyzing()));}  }
class C{  public void disableProtection(RecoverPointVolumeProtectionInfo volumeInfo) throws RecoverPointException {  try {    ConsistencyGroupUID cgUID=new ConsistencyGroupUID();    cgUID.setId(volumeInfo.getRpVolumeGroupID());    if (volumeInfo.getRpVolumeCurrentProtectionStatus() == RecoverPointVolumeProtectionInfo.volumeProtectionStatus.PROTECTED_SOURCE) {      disableConsistencyGroup(cgUID);    } else {      ConsistencyGroupCopyUID cgCopyUID=RecoverPointUtils.mapRPVolumeProtectionInfoToCGCopyUID(volumeInfo);      functionalAPI.disableConsistencyGroupCopy(cgCopyUID);      String cgCopyName=functionalAPI.getGroupCopyName(cgCopyUID);      String cgName=functionalAPI.getGroupName(cgCopyUID.getGroupUID());      logger.info("Protection disabled on CG copy " + cgCopyName + " on CG "+ cgName);      RecoverPointImageManagementUtils imageManager=new RecoverPointImageManagementUtils();      imageManager.waitForCGCopyLinkState(functionalAPI,cgCopyUID,PipeState.UNKNOWN);      logger.info("Protection disabled on CG copy " + cgCopyName + " on CG "+ cgName);    }  } catch (  FunctionalAPIActionFailedException_Exception e) {    throw RecoverPointException.exceptions.failedToDisableProtection(volumeInfo.getRpVolumeGroupID(),e);  }catch (  FunctionalAPIInternalError_Exception e) {    throw RecoverPointException.exceptions.failedToDisableProtection(volumeInfo.getRpVolumeGroupID(),e);  }}  }
class C{  public static boolean isPutAllPermitted(Field destination,Field source){  boolean isFirst=true;  boolean isAddAllFunction=false;  boolean isPutAllFunction=true;  return isAssignableFrom(getGenericString(destination),getGenericString(source),destination.getType(),source.getType(),isFirst,isAddAllFunction,isPutAllFunction);}  }
class C{  private void init(){  mSendDispatcher=new SendDispatcher(mSendQueue,mSender,mSendDelivery);  mSendDispatcher.start();  mReceiveDispatcher=new ReceiveDispatcher(mReceiver,mReceiveDelivery);  mReceiveDispatcher.start();}  }
class C{  static void fake_memset_127(double[] a){  double d=Double.longBitsToDouble(0x7f7f7f7f7f7f7f7fL);  for (int n=0; n < a.length; n++) {    a[n]=d;  }}  }
class C{  public static void w(String tag,Throwable tr){  w(tag,null,tr);}  }
class C{  public CoverageEntry(int topologyLevel,String desc,CoverageTable covtable){  this.tLevel=topologyLevel;  this.description=desc;  this.covtable=covtable;}  }
class C{  @Dev public SetQuestToYearAction(final String questname,@Dev(defaultValue="1") final int index){  this.questname=checkNotNull(questname);  this.index=index;}  }
class C{  public static void d(String tag,String msg){  if (sLevel > LEVEL_DEBUG) {    return;  }  Log.d(tag,msg);}  }
class C{  public static int[] sort(double[] array){  int[] index=new int[array.length];  array=(double[])array.clone();  for (int i=0; i < index.length; i++) {    index[i]=i;    if (Double.isNaN(array[i])) {      array[i]=Double.MAX_VALUE;    }  }  quickSort(array,index,0,array.length - 1);  return index;}  }
class C{  public static RelationalOpExpression gt(Expression left,Expression right){  return new RelationalOpExpression(left,">",right);}  }
class C{  protected void drawLabel(Graphics2D g2,Rectangle2D plotArea,double value,int cat,double startAngle,double extent){  FontRenderContext frc=g2.getFontRenderContext();  String label;  if (this.dataExtractOrder == TableOrder.BY_ROW) {    label=this.labelGenerator.generateColumnLabel(this.dataset,cat);  } else {    label=this.labelGenerator.generateRowLabel(this.dataset,cat);  }  Rectangle2D labelBounds=getLabelFont().getStringBounds(label,frc);  LineMetrics lm=getLabelFont().getLineMetrics(label,frc);  double ascent=lm.getAscent();  Point2D labelLocation=calculateLabelLocation(labelBounds,ascent,plotArea,startAngle);  Composite saveComposite=g2.getComposite();  g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,1.0f));  g2.setPaint(getLabelPaint());  g2.setFont(getLabelFont());  g2.drawString(label,(float)labelLocation.getX(),(float)labelLocation.getY());  g2.setComposite(saveComposite);}  }
class C{  public synchronized VisualItem findItem(Point p){  Point2D p2=(m_itransform == null ? p : m_itransform.transform(p,m_tmpPoint));  if (!m_queue.psorted) {    m_queue.sortPickingQueue();  }  for (int i=m_queue.psize; --i >= 0; ) {    VisualItem vi=m_queue.pitems[i];    if (!vi.isValid()) {      continue;    }    Renderer r=vi.getRenderer();    if (r != null && vi.isInteractive() && r.locatePoint(p2,vi)) {      return vi;    }  }  return null;}  }
class C{  private List<double[]> generateWeights(double[] point,int divisions){  List<double[]> result=new ArrayList<double[]>();  double sum=0.0;  int N=divisions;  if (point != null) {    sum=StatUtils.sum(point);    N=(int)((1.0 - sum) * divisions);  } else {    point=new double[0];  }  if (point.length < numberOfObjectives - 1) {    for (int i=0; i <= N; i++) {      result.addAll(generateWeights(extend(point,i / (double)divisions),divisions));    }  } else {    result.add(extend(point,1.0 - sum));  }  return result;}  }
class C{  private int unindent(int i){  if (i > 0 && isSpaceToken(i - 1)) {    return i - 1;  } else {    return i;  }}  }
class C{  public static Type intersectionType(Type lhst,Type rhst,Unit unit){  Type simpleIntersection=getSimpleIntersection(lhst,rhst);  if (simpleIntersection != null) {    return simpleIntersection;  }  List<Type> list=new ArrayList<Type>(2);  addToIntersection(list,rhst,unit);  addToIntersection(list,lhst,unit);  IntersectionType it=new IntersectionType(unit);  it.setSatisfiedTypes(list);  return it.canonicalize().getType();}  }
class C{  public static boolean compareStrings(String base,String search){  for (  String arg : search.split(" ")) {    if (!base.contains(arg)) {      return false;    }  }  return true;}  }
class C{  public void writeStart(String name,String prefix) throws Exception {  String text=indenter.push();  if (last == Tag.START) {    append('>');  }  flush();  append(text);  append('<');  if (!isEmpty(prefix)) {    append(prefix);    append(':');  }  append(name);  last=Tag.START;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public static void recursiveIdBrowse(final Element element){  for (int ii=0; ii < element.getChildNodes().getLength(); ii++) {    final Node node=element.getChildNodes().item(ii);    if (node.getNodeType() == Node.ELEMENT_NODE) {      final Element childElement=(Element)node;      setIDIdentifier(childElement);      recursiveIdBrowse(childElement);    }  }}  }
class C{  static MethodCoverageMap collectCoverage(String execFile,File classesDirectory) throws IOException {  MethodCoverageMap coverageMap=new MethodCoverageMap();  FileInputStream in=new FileInputStream(execFile);  ExecFileLoader fileLoader=new ExecFileLoader();  fileLoader.load(in);  in.close();  ExecutionDataStore dataStore=fileLoader.getExecutionDataStore();  CoverageBuilder coverageBuilder=new CoverageBuilder();  Analyzer analyzer=new Analyzer(dataStore,coverageBuilder);  analyzer.analyzeAll(classesDirectory);  JavaNames names=new JavaNames();  for (  IClassCoverage classCoverage : coverageBuilder.getClasses()) {    if (classCoverage.getMethodCounter().getCoveredCount() > 0) {      String className=getClassName(names,classCoverage);      for (      IMethodCoverage methodCoverage : classCoverage.getMethods()) {        String methodName=getMethodName(names,classCoverage,className,methodCoverage);        ICounter methodCounter=methodCoverage.getMethodCounter();        if (methodCounter.getCoveredCount() > 0) {          coverageMap.put(className,methodName,methodCounter);        }      }    }  }  return coverageMap;}  }
class C{  private void nextWeapon(){  if (ce() == null) {    return;  }  int weaponId=clientgui.mechD.wPan.selectNextWeapon();  if (ce().getId() != clientgui.mechD.wPan.getSelectedEntityId()) {    clientgui.mechD.wPan.displayMech(ce());  }  if (weaponId == -1) {    setFireModeEnabled(false);  } else {    Mounted m=ce().getEquipment(weaponId);    setFireModeEnabled(m.isModeSwitchable());  }  updateTarget();}  }
class C{  public static DoubleVector rchisq(int n,double ncp,Random random){  DoubleVector v=new DoubleVector(n);  double mean=Math.sqrt(ncp);  double x;  for (int i=0; i < n; i++) {    x=random.nextGaussian() + mean;    v.set(i,x * x);  }  return v;}  }
class C{  protected void doPrintClassification(double[] dist,Instance inst,int index) throws Exception {  int width=7 + m_NumDecimals;  int prec=m_NumDecimals;  Instance withMissing=(Instance)inst.copy();  withMissing.setDataset(inst.dataset());  double predValue=0;  if (Utils.sum(dist) == 0) {    predValue=Utils.missingValue();  } else {    if (inst.classAttribute().isNominal()) {      predValue=Utils.maxIndex(dist);    } else {      predValue=dist[0];    }  }  append(Utils.padLeft("" + (index + 1),6));  if (inst.dataset().classAttribute().isNumeric()) {    if (inst.classIsMissing())     append(" " + Utils.padLeft("?",width)); else     append(" " + Utils.doubleToString(inst.classValue(),width,prec));    if (Utils.isMissingValue(predValue))     append(" " + Utils.padLeft("?",width)); else     append(" " + Utils.doubleToString(predValue,width,prec));    if (Utils.isMissingValue(predValue) || inst.classIsMissing())     append(" " + Utils.padLeft("?",width)); else     append(" " + Utils.doubleToString(predValue - inst.classValue(),width,prec));  } else {    append(" " + Utils.padLeft(((int)inst.classValue() + 1) + ":" + inst.toString(inst.classIndex()),width));    if (Utils.isMissingValue(predValue))     append(" " + Utils.padLeft("?",width)); else     append(" " + Utils.padLeft(((int)predValue + 1) + ":" + inst.dataset().classAttribute().value((int)predValue),width));    if (!Utils.isMissingValue(predValue) && !inst.classIsMissing() && ((int)predValue + 1 != (int)inst.classValue() + 1))     append(" " + "  +  "); else     append(" " + "     ");    if (m_OutputDistribution) {      if (Utils.isMissingValue(predValue)) {        append(" " + "?");      } else {        append(" ");        for (int n=0; n < dist.length; n++) {          if (n > 0)           append(",");          if (n == (int)predValue)           append("*");          append(Utils.doubleToString(dist[n],prec));        }      }    } else {      if (Utils.isMissingValue(predValue))       append(" " + "?"); else       append(" " + Utils.doubleToString(dist[(int)predValue],prec));    }  }  append(" " + attributeValuesString(withMissing) + "\n");}  }
class C{  public ValidationDriver(SchemaReader sr){  this(PropertyMap.EMPTY,sr);}  }
class C{  @Override protected void adjustPieceJail(){  if (isDisposed()) {    return;  }  for (int i=0; i < DROPPABLE_PIECES.length; i++) {    PieceJailChessSquare square=board.getPieceJailSquares()[DROPPABLE_PIECES[i]];    square.setPiece(DROPPABLE_PIECES[i]);    square.setText("");    square.redraw();  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 21:46:29.521 -0400",hash_original_method="D8B68FB20189DFD1BF1EB7309BFA69B0",hash_generated_method="58611AAB3481BA235847201B2247A5D5") public void onSupportActionModeFinished(ActionMode mode){}  }
class C{  public void updateDragOrResize(final Point point){  if (dragged == null && resized == null) {    return;  }  if (dragged != null) {    dragged.handleDragEvent(point);    model.fireAnnotationMoved(dragged.getDraggedAnnotation());  } else   if (resized != null) {    resized.handleResizeEvent(point);    model.fireAnnotationMoved(resized.getResized());  }}  }
class C{  public String buildUnionSubQuery(String typeDiscriminatorColumn,String[] unionColumns,Set<String> columnsPresentInTable,int computedColumnsOffset,String typeDiscriminatorValue,String selection,String groupBy,String having){  int unionColumnsCount=unionColumns.length;  String[] projectionIn=new String[unionColumnsCount];  for (int i=0; i < unionColumnsCount; i++) {    String unionColumn=unionColumns[i];    if (unionColumn.equals(typeDiscriminatorColumn)) {      projectionIn[i]="'" + typeDiscriminatorValue + "' AS "+ typeDiscriminatorColumn;    } else     if (i <= computedColumnsOffset || columnsPresentInTable.contains(unionColumn)) {      projectionIn[i]=unionColumn;    } else {      projectionIn[i]="NULL AS " + unionColumn;    }  }  return buildQuery(projectionIn,selection,groupBy,having,null,null);}  }
class C{  @Override public void generateAtom(XmlWriter w,String elementName) throws IOException {  ArrayList<XmlWriter.Attribute> attrs=new ArrayList<XmlWriter.Attribute>();  if (Service.getVersion().isCompatible(Service.Versions.V1)) {    attrs.add(new XmlWriter.Attribute("type","text"));  }  if (lang != null) {    attrs.add(new XmlWriter.Attribute("xml:lang",lang));  }  w.simpleElement(Namespaces.atomNs,elementName,attrs,text);}  }
class C{  public void refreshConnections(IDataCable cable){}  }
class C{  public void simulate(){  int strategyIdx=simPaneCtrl.getParamValueIndex(PARAM_STRATEGY);  Problem problem=new BidirectionalEightPuzzleProblem(board);  SearchForActions search=SEARCH_ALGOS.get(strategyIdx);  List<Action> actions=search.search(problem);  for (  Action action : actions) {    if (action == EightPuzzleBoard.UP)     board.moveGapUp(); else     if (action == EightPuzzleBoard.DOWN)     board.moveGapDown(); else     if (action == EightPuzzleBoard.LEFT)     board.moveGapLeft(); else     if (action == EightPuzzleBoard.RIGHT)     board.moveGapRight();    updateStateView(null);    if (CancelableThread.currIsCanceled())     break;    simPaneCtrl.waitAfterStep();  }  updateStateView(search.getMetrics());}  }
class C{  public void notationDecl(String name,String publicId,String systemId) throws SAXException {  if (m_dtdHandler != null) {    m_dtdHandler.notationDecl(name,publicId,systemId);  }}  }
class C{  public XMLX509Digest itemDigest(int i) throws XMLSecurityException {  Element e=XMLUtils.selectDs11Node(this.constructionElement.getFirstChild(),Constants._TAG_X509DIGEST,i);  if (e != null) {    return new XMLX509Digest(e,this.baseURI);  }  return null;}  }
class C{  public boolean visitPredicate(ExpressionOwner owner,Expression pred){  boolean savedIsSame=m_isSameContext;  m_isSameContext=false;  pred.callVisitors(owner,this);  m_isSameContext=savedIsSame;  return false;}  }
class C{  public static double mouseX(){synchronized (mouseLock) {    return mouseX;  }}  }
class C{  public boolean isGlobal(){  return global;}  }
class C{  private void importPurchaseProductPlanning(X_I_ProductPlanning ipp){  MProduct product=MProduct.get(getCtx(),ipp.getM_Product_ID());  if (product.isPurchased()) {    final StringBuffer whereClause=new StringBuffer();    whereClause.append(MProductPO.COLUMNNAME_M_Product_ID).append("=? AND ");    whereClause.append(MProductPO.COLUMNNAME_C_BPartner_ID).append("=?");    MProductPO productPO=new Query(getCtx(),MProductPO.Table_Name,whereClause.toString(),get_TrxName()).setClient_ID().setParameters(ipp.getM_Product_ID(),ipp.getC_BPartner_ID()).first();    if (productPO == null) {      productPO=new MProductPO(getCtx(),0,get_TrxName());      productPO.setM_Product_ID(ipp.getM_Product_ID());      productPO.setC_BPartner_ID(ipp.getC_BPartner_ID());    }    productPO.setAD_Org_ID(ipp.getAD_Org_ID());    productPO.setOrder_Min(ipp.getOrder_Min());    productPO.setOrder_Pack(ipp.getOrder_Pack());    productPO.setDeliveryTime_Promised(ipp.getDeliveryTime_Promised().intValue());    productPO.setVendorProductNo(ipp.getVendorProductNo());    productPO.saveEx();  }}  }
class C{  @Override public synchronized P readPage(int pageID){  countRead();  P page=map.get(pageID);  if (page != null) {    if (LOG.isDebuggingFine()) {      LOG.debugFine("Read from cache: " + pageID);    }  } else {    if (LOG.isDebuggingFine()) {      LOG.debugFine("Read from backing: " + pageID);    }    page=file.readPage(pageID);    map.put(pageID,page);  }  return page;}  }
class C{  public static void main(String[] args){  try {    out=new FileWriter(outputFile);    out.write("Interpolation time comparison of the different methods:\n\n");    out.write("interpolation method \t\t\t\t" + "1*2 grid \t" + "3*3 grid \t"+ "10*10 grid\n");    out.write("-----------------------------------------------------------------------------------------------------\n");  } catch (  IOException e) {    e.printStackTrace();  }  testBiLinear();  testBiCubic();  testIDW();  try {    out.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public FilterJoinBuilder termsEncoding(TermsByQueryRequest.TermsEncoding termsEncoding){  this.termsEncoding=termsEncoding;  return this;}  }
class C{  public boolean containsKey(int key){  int hash=hash(key);  return segmentFor(hash).containsKey(key,hash);}  }
class C{  @Override public String toString(){  if (getUserObject() instanceof Movie) {    Movie movie=(Movie)getUserObject();    return movie.getTitleSortable();  }  return super.toString();}  }
class C{  public void indexUpdated(boolean storageError,boolean entriesDeleted){  if (storageError) {    actionQueue.becomeFollower();  } else   if (entriesDeleted) {    assert role != Role.LEADER;    actionQueue.updateStorageIndex();  } else {    actionQueue.updateSavedIndex();  }  lock.lock();  try {    workAvailable.signal();  }  finally {    lock.unlock();  }}  }
class C{  public void updateFileDetails(OCFile file,Account ocAccount){  setFile(file);  mAccount=ocAccount;  updateFileDetails(false,false);}  }
class C{  private void pixel(double x,double y){  offscreen.fillRect((int)Math.round(scaleX(x)),(int)Math.round(scaleY(y)),1,1);}  }
class C{  public static void clearPreferences(Context context){  SharedPreferences mainPref=context.getSharedPreferences(context.getResources().getString(R.string.shared_pref_package),Context.MODE_PRIVATE);  mainPref.edit().clear().commit();}  }
class C{  public I18n(String key,I18nSet lang){  super();  Assert.hasText(key,"Not allowed to create an I18n instance with an empty key");  this.key=key;  this.lang=lang;}  }
class C{  protected void clearText(){  setFilterText("");  textChanged();}  }
class C{  public static void search(Context context,String string){  Intent intent=new Intent(Intent.ACTION_WEB_SEARCH);  intent.putExtra(SearchManager.QUERY,string);  context.startActivity(intent);}  }
class C{  private void endMyTurn(){  Entity next=clientgui.getClient().getGame().getNextEntity(clientgui.getClient().getGame().getTurnIndex());  if ((IGame.Phase.PHASE_DEPLOYMENT == clientgui.getClient().getGame().getPhase()) && (null != next) && (null != ce())&& (next.getOwnerId() != ce().getOwnerId())) {    clientgui.setDisplayVisible(false);  }  cen=Entity.NONE;  clientgui.getBoardView().select(null);  clientgui.getBoardView().highlight(null);  clientgui.getBoardView().cursor(null);  clientgui.bv.markDeploymentHexesFor(null);  clientgui.setSelectedEntityNum(Entity.NONE);  disableButtons();}  }
class C{  protected void waitForIdleState(){  final IJobManager manager=Job.getJobManager();  while (manager.currentJob() != null) {    waitForUiThread();  }  waitForUiThread();}  }
class C{  private int measureShort(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public DaemonException(String message,Throwable cause){  super(message,cause);}  }
class C{  public void stop(){  stopped=true;}  }
class C{  NodeTextRep decompSubstituteInNodeText(NodeRepresentation nodeRep,ExprNode sn,NodeTextRep nodeTextRep,NodeRepresentation originalNodeRep){  Decomposition decomp=nodeRep.decomposition;  HashSet<String> prevDeclared=(HashSet<String>)this.declaredIdentifiers.clone();  addDeclaredSymbols(prevDeclared,originalNodeRep);  addSymbolsDeclaredLater(prevDeclared,originalNodeRep,false);  Renaming rename=decomp.renaming.clone();  addToRenaming(rename,prevDeclared,sn);  int decompParamsLen=0;  if (decomp.formalParams != null) {    decompParamsLen=decomp.formalParams.length;  }  FormalParamNode[] formalParams=new FormalParamNode[decompParamsLen + rename.identifiers.size()];  String[] arguments=new String[formalParams.length];  boolean[] isBoundedIdRenaming=new boolean[formalParams.length];  SemanticNode[] argNodes=new SemanticNode[formalParams.length];  for (int i=0; i < decompParamsLen; i++) {    formalParams[i]=decomp.formalParams[i];    arguments[i]=decomp.arguments[i];    isBoundedIdRenaming[i]=false;    argNodes[i]=decomp.argNodes[i];  }  for (int i=0; i < rename.identifiers.size(); i++) {    formalParams[i + decompParamsLen]=rename.identifiers.elementAt(i);    arguments[i + decompParamsLen]=rename.newNames.elementAt(i);    isBoundedIdRenaming[i + decompParamsLen]=true;    argNodes[i + decompParamsLen]=null;  }  NodeTextRep result=substituteInNodeText(formalParams,arguments,isBoundedIdRenaming,argNodes,sn,nodeTextRep,decomp);  decomp.renaming=rename;  return result;}  }
class C{  private Note(){}  }
class C{  private void reportProgress(State state,InnerState innerState){  long now=System.currentTimeMillis();  if (innerState.mBytesSoFar - innerState.mBytesNotified > Constants.MIN_PROGRESS_STEP && now - innerState.mTimeLastNotification > Constants.MIN_PROGRESS_TIME) {    mInfo.mCurrentBytes=innerState.mBytesSoFar;    mDB.updateDownloadCurrentBytes(mInfo);    innerState.mBytesNotified=innerState.mBytesSoFar;    innerState.mTimeLastNotification=now;    long totalBytesSoFar=innerState.mBytesThisSession + mService.mBytesSoFar;    if (Constants.LOGVV) {      Log.v(Constants.TAG,"downloaded " + mInfo.mCurrentBytes + " out of "+ mInfo.mTotalBytes);      Log.v(Constants.TAG,"     total " + totalBytesSoFar + " out of "+ mService.mTotalLength);    }    mService.notifyUpdateBytes(totalBytesSoFar);  }}  }
class C{  private void verifyNoOpenApplications() throws DomainHasOpenApplicationsException {  for (  DomainApplication application : loadActiveApplicationsByDomainName(targetId,now)) {    if (!application.getApplicationStatus().isFinalStatus()) {      throw new DomainHasOpenApplicationsException();    }  }}  }
class C{  public boolean remove(Solution solution){  modCount++;  return data.remove(solution);}  }
class C{  public static String scrubSubscriberId(String subscriberId){  if ("eng".equals(Build.TYPE)) {    return subscriberId;  } else   if (subscriberId != null) {    return subscriberId.substring(0,Math.min(6,subscriberId.length())) + "...";  } else {    return "null";  }}  }
class C{  public Rectangle listOffsetToView(RSyntaxTextArea textArea,TabExpander e,int pos,int x0,Rectangle rect){  int stableX=x0;  Token token=this;  FontMetrics fm=null;  Segment s=new Segment();  while (token != null && token.isPaintable()) {    fm=textArea.getFontMetricsForTokenType(token.type);    if (fm == null) {      return rect;    }    char[] text=token.text;    int start=token.textOffset;    int end=start + token.textCount;    if (token.containsPosition(pos)) {      s.array=token.text;      s.offset=token.textOffset;      s.count=pos - token.offset;      int w=Utilities.getTabbedTextWidth(s,fm,stableX,e,token.offset);      rect.x=stableX + w;      end=token.documentToToken(pos);      if (text[end] == '\t') {        rect.width=fm.charWidth(' ');      } else {        rect.width=fm.charWidth(text[end]);      }      return rect;    } else {      s.array=token.text;      s.offset=token.textOffset;      s.count=token.textCount;      stableX+=Utilities.getTabbedTextWidth(s,fm,stableX,e,token.offset);    }    token=token.getNextToken();  }  rect.x=stableX;  rect.width=1;  return rect;}  }
class C{  @Get @Put @Post @Delete public String noOp(String postdata){  setStatus(Status.SUCCESS_OK);  return "{\"status\":\"ok\"}";}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Object v2=stack.pop();  Object v1=stack.pop();  if (v2 == null)   return v1;  if (v1 == null)   return v2;  if (v1 instanceof Number && v2 instanceof Number) {    if (v1 instanceof Double || v2 instanceof Double)     return new Double(Math.min(((Number)v1).doubleValue(),((Number)v2).doubleValue())); else     if (v1 instanceof Float || v2 instanceof Float)     return new Float(Math.min(((Number)v1).floatValue(),((Number)v2).floatValue())); else     if (v1 instanceof Long || v2 instanceof Long)     return new Long(Math.min(((Number)v1).longValue(),((Number)v2).longValue())); else     return new Integer(Math.min(((Number)v1).intValue(),((Number)v2).intValue()));  } else {    return new Double(Math.min(Double.parseDouble(v1.toString()),Double.parseDouble(v2.toString())));  }}  }
class C{  @HLEFunction(nid=0x9AC2EEAC,version=150) public int sceNetAdhocPtpFlush(@CheckArgument("checkPtpId") int id,int timeout,int nonblock){  return 0;}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == TypeArgument.class) {switch (baseOperationID) {case TypeRefsPackage.TYPE_ARGUMENT___GET_TYPE_REF_AS_STRING:      return ImPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL_IM___GET_TYPE_REF_AS_STRING;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == TypeRef.class) {switch (baseOperationID) {case TypeRefsPackage.TYPE_REF___GET_TYPE_REF_AS_STRING:  return ImPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL_IM___GET_TYPE_REF_AS_STRING;case TypeRefsPackage.TYPE_REF___GET_DECLARED_TYPE:return ImPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL_IM___GET_DECLARED_TYPE;case TypeRefsPackage.TYPE_REF___GET_TYPING_STRATEGY:return ImPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL_IM___GET_TYPING_STRATEGY;case TypeRefsPackage.TYPE_REF___GET_STRUCTURAL_MEMBERS:return ImPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL_IM___GET_STRUCTURAL_MEMBERS;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == ParameterizedTypeRef.class) {switch (baseOperationID) {case TypeRefsPackage.PARAMETERIZED_TYPE_REF___GET_TYPING_STRATEGY:return ImPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL_IM___GET_TYPING_STRATEGY;case TypeRefsPackage.PARAMETERIZED_TYPE_REF___GET_TYPE_REF_AS_STRING:return ImPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL_IM___GET_TYPE_REF_AS_STRING;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == ParameterizedTypeRef_IM.class) {switch (baseOperationID) {case ImPackage.PARAMETERIZED_TYPE_REF_IM___GET_DECLARED_TYPE_IM:return ImPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL_IM___GET_DECLARED_TYPE_IM;case ImPackage.PARAMETERIZED_TYPE_REF_IM___SET_DECLARED_TYPE_IM__SYMBOLTABLEENTRY:return ImPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL_IM___SET_DECLARED_TYPE_IM__SYMBOLTABLEENTRY;case ImPackage.PARAMETERIZED_TYPE_REF_IM___GET_DECLARED_TYPE:return ImPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL_IM___GET_DECLARED_TYPE;case ImPackage.PARAMETERIZED_TYPE_REF_IM___SET_DECLARED_TYPE__TYPE:return ImPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL_IM___SET_DECLARED_TYPE__TYPE;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == StructuralTypeRef.class) {switch (baseOperationID) {case TypeRefsPackage.STRUCTURAL_TYPE_REF___GET_TYPING_STRATEGY:return ImPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL_IM___GET_TYPING_STRATEGY;case TypeRefsPackage.STRUCTURAL_TYPE_REF___SET_TYPING_STRATEGY__TYPINGSTRATEGY:return ImPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL_IM___SET_TYPING_STRATEGY__TYPINGSTRATEGY;case TypeRefsPackage.STRUCTURAL_TYPE_REF___GET_STRUCTURAL_MEMBERS:return ImPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL_IM___GET_STRUCTURAL_MEMBERS;case TypeRefsPackage.STRUCTURAL_TYPE_REF___HAS_POSTPONED_SUBSTITUTION_FOR__TYPEVARIABLE:return ImPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL_IM___HAS_POSTPONED_SUBSTITUTION_FOR__TYPEVARIABLE;default :return -1;}}if (baseClass == ParameterizedTypeRefStructural.class) {switch (baseOperationID) {case TypeRefsPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL___GET_TYPING_STRATEGY:return ImPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL_IM___GET_TYPING_STRATEGY;case TypeRefsPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL___SET_TYPING_STRATEGY__TYPINGSTRATEGY:return ImPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL_IM___SET_TYPING_STRATEGY__TYPINGSTRATEGY;case TypeRefsPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL___GET_STRUCTURAL_MEMBERS:return ImPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL_IM___GET_STRUCTURAL_MEMBERS;case TypeRefsPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL___GET_TYPE_REF_AS_STRING:return ImPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL_IM___GET_TYPE_REF_AS_STRING;default :return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public void putField(final Type owner,final String name,final Type type){  fieldInsn(Opcodes.PUTFIELD,owner,name,type);}  }
class C{  public static LoggingFraction createDefaultLoggingFraction(Level level){  return new LoggingFraction().defaultColorFormatter().consoleHandler(level,COLOR_PATTERN).rootLogger(level,CONSOLE);}  }
class C{  public void scrollRowToVisible(int row){  scrollPathToVisible(getPathForRow(row));}  }
class C{  public static void writeStringToFile(File file,String s) throws IOException {  writeStringToFile(file,s,Charset.defaultCharset().toString(),false);}  }
class C{  public CarouselView(Context context,AttributeSet attrs,int defStyle){  super(context,attrs,defStyle);  setChildrenDrawingOrderEnabled(true);  mGestureDetector=new GestureDetector(this.getContext(),this);  mGestureDetector.setIsLongpressEnabled(true);  setStaticTransformationsEnabled(true);  mAnimationDuration=400;  mUseReflection=false;  int selectedItem=0;  setNextSelectedPositionInt(selectedItem);}  }
class C{  public void test_dropSolutionSet_01() throws UpdateExecutionException, RepositoryException, MalformedQueryException {  if (!isSolutionSetUpdateEnabled()) {    return;  }  try {    con.prepareUpdate(QueryLanguage.SPARQL,"drop solutions %namedSet1").execute();    fail("Excepting: " + UpdateExecutionException.class);  } catch (  UpdateExecutionException ex) {    if (log.isInfoEnabled())     log.info("Ignoring expected exception: " + ex);  }}  }
class C{  public static WebXml newWebXml(WebXmlVersion theVersion){  Element root=new Element("web-app");  Document document=null;  if (theVersion.equals(WebXmlVersion.V2_2)) {    document=new WebXml22Type().document(root);    document.setDocType(new DocType("web-app","-//Sun Microsystems, Inc.//DTD Web Application 2.2//EN","http://java.sun.com/j2ee/dtds/web-app_2_2.dtd"));  } else   if (theVersion.equals(WebXmlVersion.V2_3)) {    document=new WebXml23Type().document(root);    document.setDocType(new DocType("web-app","-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN","http://java.sun.com/dtd/web-app_2_3.dtd"));  } else   if (theVersion.equals(WebXmlVersion.V2_4)) {    document=new WebXml24Type().document(root);    document.setDocType(new DocType("web-app","http://java.sun.com/xml/ns/j2ee"));  } else   if (theVersion.equals(WebXmlVersion.V2_5)) {    document=new WebXml25Type().document(root);    document.setDocType(new DocType("web-app","http://java.sun.com/xml/ns/j2ee"));  } else   if (theVersion.equals(WebXmlVersion.V3_0)) {    document=new WebXml30Type().document(root);    document.setDocType(new DocType("web-app","http://java.sun.com/xml/ns/j2ee"));  } else {    document=new WebXml25Type().document(root);    document.setDocType(new DocType("web-app","http://java.sun.com/xml/ns/j2ee"));  }  return (WebXml)document;}  }
class C{  public void putPresenter(int viewId,P presenter,Context context){  OrientationChangeFragment fragment=getFragment(context);  CacheEntry<V,P> entry=fragment.get(viewId);  if (entry == null) {    entry=new CacheEntry<V,P>(presenter);    fragment.put(viewId,entry);  } else {    entry.presenter=presenter;  }}  }
class C{  public FormField(){  this.type=FormField.TYPE_FIXED;}  }
class C{  public JMapperAPI add(MappedClass mappedClass){  root.classes.add(mappedClass.toXStream());  return this;}  }
class C{  private static int skipWhiteSpace(String rawdata,int i){  int length=rawdata.length();  if (i < length) {    char c=rawdata.charAt(i);    while ((i < length) && Character.isWhitespace(c)) {      ++i;      c=rawdata.charAt(i);    }  }  return i;}  }
class C{  @Override public void onPageStarted(WebView view,String url,Bitmap favicon){  super.onPageStarted(view,url,favicon);  isCurrentlyLoading=true;  parentEngine.bridge.reset();  parentEngine.client.onPageStarted(url);}  }
class C{  public void writeEnum(final int fieldNumber,final int value) throws IOException {  writeTag(fieldNumber,WireFormatNano.WIRETYPE_VARINT);  writeEnumNoTag(value);}  }
class C{  public static boolean checkInternetIsActive(Context context){  ConnectivityManager connec=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  android.net.NetworkInfo wifi=connec.getNetworkInfo(ConnectivityManager.TYPE_WIFI);  android.net.NetworkInfo mobile=connec.getNetworkInfo(ConnectivityManager.TYPE_MOBILE);  if (wifi.isConnected() || mobile.isConnected()) {    return true;  }  return false;}  }
class C{  @RequestMapping(value="all_podcasts",method=RequestMethod.GET) public String updateAllPodcasts(ModelMap model){  LOG.debug("------ received request to update all podcasts -----");  Integer numberOfWorkerThreads=Integer.valueOf(configBean.get("NO_WORKER_THREADS_FOR_UPDATE_ALL_PODCASTS"));  if (numberOfWorkerThreads == null) {    numberOfWorkerThreads=DEFAULT_NO_WORKER_THREADS_FOR_UPDATE_ALL_PODCASTS;  }  Integer totalNumberOfPodcasts=readService.getNumberOfPodcasts();  Integer mod=totalNumberOfPodcasts % numberOfWorkerThreads;  Integer chunkSize=totalNumberOfPodcasts / numberOfWorkerThreads;  for (int i=0; i < numberOfWorkerThreads; i++) {    int startRow=i * chunkSize;    if (i == numberOfWorkerThreads - 1) {      chunkSize=chunkSize + mod;      LOG.debug("Thread[" + i + "] - ["+ startRow+ ","+ chunkSize+ "]");      Future<String> future=batchUpdateService.updatePodcastsFromRange(startRow,chunkSize);    } else {      LOG.debug("Thread[" + i + "] - ["+ startRow+ ","+ chunkSize+ "]");      batchUpdateService.updatePodcastsFromRange(startRow,chunkSize);    }  }  restClient.invokeRefreshAllCaches();  return "redirect:/admin/update/batch";}  }
class C{  public boolean isCurrent(String first,char second){  int start=pos;  if (!forwardIfCurrent(first))   return false;  removeSpace();  boolean rtn=isCurrent(second);  pos=start;  return rtn;}  }
class C{  public void testIntsRoundTrip(){  byte[] encoded=new byte[Integer.BYTES];  for (int i=0; i < 10000; i++) {    int value=random().nextInt();    NumericUtils.intToSortableBytes(value,encoded,0);    assertEquals(value,NumericUtils.sortableBytesToInt(encoded,0));  }}  }
class C{  public MyStringRedisTemplate(RedisConnectionFactory connectionFactory){  this();  setConnectionFactory(connectionFactory);  afterPropertiesSet();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public void initialize(){  setPaletteName("Rainbow");  this.r=new int[this.red.length];  this.g=new int[this.green.length];  this.b=new int[this.blue.length];  System.arraycopy(this.red,0,this.r,0,this.red.length);  System.arraycopy(this.green,0,this.g,0,this.green.length);  System.arraycopy(this.blue,0,this.b,0,this.blue.length);}  }
class C{  @SuppressWarnings("rawtypes") public static Task createEndTask(){  return new Task(TaskTypes.ENDTASK);}  }
class C{  @Override public CategoryItemRendererState initialise(Graphics2D g2,Rectangle2D dataArea,CategoryPlot plot,int rendererIndex,PlotRenderingInfo info){  setPlot(plot);  CategoryDataset data=plot.getDataset(rendererIndex);  if (data != null) {    this.rowCount=data.getRowCount();    this.columnCount=data.getColumnCount();  } else {    this.rowCount=0;    this.columnCount=0;  }  CategoryItemRendererState state=createState(info);  state.setElementHinting(plot.fetchElementHintingFlag());  int[] visibleSeriesTemp=new int[this.rowCount];  int visibleSeriesCount=0;  for (int row=0; row < this.rowCount; row++) {    if (isSeriesVisible(row)) {      visibleSeriesTemp[visibleSeriesCount]=row;      visibleSeriesCount++;    }  }  int[] visibleSeries=new int[visibleSeriesCount];  System.arraycopy(visibleSeriesTemp,0,visibleSeries,0,visibleSeriesCount);  state.setVisibleSeriesArray(visibleSeries);  return state;}  }
class C{  public BitString(final String value){  this(value.length());  for (int i=0; i < value.length(); i++) {    if (value.charAt(i) == '1') {      setBit(value.length() - (i + 1),true);    } else     if (value.charAt(i) != '0') {      throw new IllegalArgumentException("Illegal character at position " + i);    }  }}  }
class C{  private void releasePort(){  if (mTemporaryConnection != null) {    try {      mTemporaryConnection.close();    } catch (    IOException e) {      mTemporaryConnection=null;    }  }}  }
class C{  public JPanelConfigSystem(){  initComponents();  jAutoLogoffTime.setText("100");  jMaxChange.setText("50");  jAutoLogoffTime.getDocument().addDocumentListener(dirty);  jAutoLogoffAfterKitchen.addActionListener(dirty);  jAutoLogoffAfterPrint.addActionListener(dirty);  jInactivityTimer.addActionListener(dirty);  jAutologoffAfterSale.addActionListener(dirty);  jEnableAutoLogoff.addActionListener(dirty);  jAutoLogoffToTables.addActionListener(dirty);  jMarineOpt.addActionListener(dirty);  jchkTextOverlay.addActionListener(dirty);  jMoveAMountBoxToTop.addActionListener(dirty);  jCheckPrice00.addActionListener(dirty);  jMoveAMountBoxToTop.addActionListener(dirty);  jCloseCashbtn.addActionListener(dirty);  jTableRetain.addChangeListener(dirty);  jUpdatedbprice.addActionListener(dirty);  jChangeSalesScreen.addActionListener(dirty);  jConsolidate.addActionListener(dirty);  jDisableDefaultProduct.addActionListener(dirty);  jTaxIncluded.addActionListener(dirty);  jCategoiesBynumber.addActionListener(dirty);  jMaxChange.getDocument().addDocumentListener(dirty);  jMaxChangeEnable.addActionListener(dirty);  JlongNames.addActionListener(dirty);  JCustomSounds.addActionListener(dirty);}  }
class C{  public static List<Link> createLinks(FactoryDto factory,Set<FactoryImage> images,ServiceContext serviceContext,String userName){  final List<Link> links=new LinkedList<>(createLinks(factory,serviceContext,userName));  final UriBuilder uriBuilder=serviceContext.getServiceUriBuilder();  final String factoryId=factory.getId();  links.addAll(images.stream().map(null).collect(toList()));  return links;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:15.443 -0500",hash_original_method="DCEA2882E2241B5A52F15EAA80B8F270",hash_generated_method="2CA44E47C5C5FAEA4907F1E6D36A559C") public void processMessage(SIPMessage sipMessage){  if (sipMessage instanceof SIPRequest) {    SIPRequest sipRequest=(SIPRequest)sipMessage;    if (sipStack.getStackLogger().isLoggingEnabled(ServerLogger.TRACE_MESSAGES)) {      this.sipStack.serverLogger.logMessage(sipMessage,this.getPeerHostPort().toString(),this.getHost() + ":" + this.myPort,false,receptionTime);    }    ServerRequestInterface sipServerRequest=sipStack.newSIPServerRequest(sipRequest,this);    if (sipServerRequest == null) {      if (sipStack.isLoggingEnabled()) {        this.sipStack.getStackLogger().logWarning("Null request interface returned -- dropping request");      }      return;    }    if (sipStack.isLoggingEnabled())     this.sipStack.getStackLogger().logDebug("About to process " + sipRequest.getFirstLine() + "/"+ sipServerRequest);    try {      sipServerRequest.processRequest(sipRequest,this);    }  finally {      if (sipServerRequest instanceof SIPTransaction) {        SIPServerTransaction sipServerTx=(SIPServerTransaction)sipServerRequest;        if (!sipServerTx.passToListener()) {          ((SIPTransaction)sipServerRequest).releaseSem();        }      }    }    if (sipStack.isLoggingEnabled())     this.sipStack.getStackLogger().logDebug("Done processing " + sipRequest.getFirstLine() + "/"+ sipServerRequest);  } else {    SIPResponse sipResponse=(SIPResponse)sipMessage;    try {      sipResponse.checkHeaders();    } catch (    ParseException ex) {      if (sipStack.isLoggingEnabled())       sipStack.getStackLogger().logError("Dropping Badly formatted response message >>> " + sipResponse);      return;    }    ServerResponseInterface sipServerResponse=sipStack.newSIPServerResponse(sipResponse,this);    if (sipServerResponse != null) {      try {        if (sipServerResponse instanceof SIPClientTransaction && !((SIPClientTransaction)sipServerResponse).checkFromTag(sipResponse)) {          if (sipStack.isLoggingEnabled())           sipStack.getStackLogger().logError("Dropping response message with invalid tag >>> " + sipResponse);          return;        }        sipServerResponse.processResponse(sipResponse,this);      }  finally {        if (sipServerResponse instanceof SIPTransaction && !((SIPTransaction)sipServerResponse).passToListener())         ((SIPTransaction)sipServerResponse).releaseSem();      }    } else {      if (sipStack.isLoggingEnabled()) {        this.sipStack.getStackLogger().logDebug("null sipServerResponse!");      }    }  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  public DateTimeConverter(){  super();}  }
class C{  public static boolean isNumbersWithPunctuation(String token){  boolean hasDigit=false;  int len=token.length();  for (int i=0; i < len; ++i) {    char c=token.charAt(i);    hasDigit=hasDigit || Character.isDigit(c);    if (!(Character.isDigit(c) || Characters.isPunctuation(c))) {      return false;    }  }  return hasDigit;}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException {  try {    decode(stream);  } catch (  InvalidKeyException e) {    e.printStackTrace();    throw new IOException("deserialized key is invalid: " + e.getMessage());  }}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public void mutableSubtract(Complex c){  mutableSubtract(c.real,c.imag);}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public String trainPercentTipText(){  return "The percentage of data to go into the training set";}  }
class C{  public UsedClass methodInC7(UsedClass p){  return p;}  }
class C{  public void printEnumBody(List<JCTree> stats) throws IOException {  print("{");  println();  indent();  boolean first=true;  for (List<JCTree> l=stats; l.nonEmpty(); l=l.tail) {    if (isEnumerator(l.head)) {      if (!first) {        print(",");        println();      }      align();      printStat(l.head);      first=false;    }  }  print(";");  println();  for (List<JCTree> l=stats; l.nonEmpty(); l=l.tail) {    if (!isEnumerator(l.head)) {      align();      printStat(l.head);      println();    }  }  undent();  align();  print("}");}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  private void trainUpdate(PropertyChangeEvent evt){  if (getAutomationItem() != null) {    Train train=getAutomationItem().getTrain();    if ((evt.getPropertyName().equals(Train.BUILT_CHANGED_PROPERTY) && train.getStatusCode() == Train.CODE_TERMINATED) || (evt.getPropertyName().equals(Train.BUILD_CHANGED_PROPERTY) && (boolean)evt.getNewValue() == false)) {      train.removePropertyChangeListener(this);      finishAction(true);    }  }}  }
class C{  void invokeLater(Runnable r){  queue.postRunnable(r);}  }
class C{  protected String createSpiAttributeName(String attrName){  return U.spiAttribute(this,attrName);}  }
class C{  private void updateQueue(AugmentedNode<ILineSegment> left,AugmentedNode<ILineSegment> right){  IPoint p=left.key().intersection(right.key());  if (p == null) {    return;  }  if (EventPoint.pointSorter.compare(p,lineState.sweepPt) > 0) {    EventPoint new_ep=new EventPoint(p);    if (!eq.contains(new_ep)) {      eq.insert(new_ep);    }  }}  }
class C{  public void removeListenersForRequest(Request request){  listeners.remove(request);}  }
class C{  public CacheHeader(String key,Entry entry){  this.key=key;  this.size=entry.data.length;  this.etag=entry.etag;  this.serverDate=entry.serverDate;  this.ttl=entry.ttl;  this.softTtl=entry.softTtl;  this.responseHeaders=entry.responseHeaders;}  }
class C{  public DrmInfo(int infoType,byte[] data,String mimeType){  mInfoType=infoType;  mMimeType=mimeType;  mData=data;  if (!isValid()) {    final String msg="infoType: " + infoType + ","+ "mimeType: "+ mimeType+ ","+ "data: "+ data;    throw new IllegalArgumentException(msg);  }}  }
class C{  public static <K,V>Hashtable<K,V> mapToHashtable(Map<K,V> map){  HashMap<K,V> m=new HashMap<K,V>(map);  if (m.containsKey(null))   m.remove(null);  for (Iterator<?> i=m.values().iterator(); i.hasNext(); )   if (i.next() == null)   i.remove();  return new Hashtable<K,V>(m);}  }
class C{  public void removeUpdate(FlowView fv,DocumentEvent e,Rectangle alloc){  sync(fv);  super.removeUpdate(fv,e,alloc);}  }
class C{  public JSONArray put(int index,long value) throws JSONException {  this.put(index,new Long(value));  return this;}  }
class C{  public void emitDirect(int taskId,String streamId,List<Object> tuple){  emitDirect(taskId,streamId,(Collection<Tuple>)null,tuple);}  }
class C{  public boolean contains(int val){  return index(val) >= 0;}  }
class C{  void resume(ThreadQueue threads){  assert mutatorsBlocked.get() >= 0 : mutatorsBlocked.get() + " mutators are blocked";  makeRunnable(threads);}  }
class C{  public XML fillOppositeField(Class<?> configuredClass,MappedField configuredField,MappedField targetField){  Attribute attribute=null;  Global global=loadGlobals().get(configuredClass.getName());  if (!isNull(global)) {    String value=global.getValue();    if (!isEmpty(value) && value.equals(targetField.getValue().getName())) {      String get=global.getGet();      String set=global.getSet();      if (!isNull(get) || !isNull(set))       attribute=new Attribute(null,new Value(global.getValue(),get,set));    }  }  if (isNull(attribute))   attribute=getAttribute(configuredField,configuredClass);  if (!isNull(attribute)) {    Value value=attribute.getValue();    if (!isNull(value))     if (targetField.getValue().getName().equals(value.getName())) {      if (isEmpty(targetField.getMethod()))       targetField.getMethod(value.getGet());      if (isEmpty(targetField.setMethod()))       targetField.setMethod(value.getSet());    }    SimplyAttribute[] attributes=attribute.getAttributes();    if (!isNull(attributes))     for (    SimplyAttribute targetAttribute : attributes)     if (targetField.getValue().getName().equals(targetAttribute.getName())) {      if (isEmpty(targetField.getMethod()))       targetField.getMethod(targetAttribute.getGet());      if (isEmpty(targetField.setMethod()))       targetField.setMethod(targetAttribute.getSet());    }  }  return this;}  }
class C{  public boolean isSetMessageType(){  return this.messageType != null;}  }
class C{  public static Bitmap createIconBitmap(String packageName,String resourceName,Context context){  PackageManager packageManager=context.getPackageManager();  try {    Resources resources=packageManager.getResourcesForApplication(packageName);    if (resources != null) {      final int id=resources.getIdentifier(resourceName,null,null);      return createIconBitmap(resources.getDrawableForDensity(id,LauncherAppState.getInstance().getInvariantDeviceProfile().fillResIconDpi),context);    }  } catch (  Exception e) {  }  return null;}  }
class C{  public static String toCCString(final int point){  final String hex=Integer.toHexString(point);  if (1 == hex.length()) {    return hex + hex + hex+ hex+ hex+ hex;  }  if (2 == hex.length()) {    final String a1=hex.substring(0,1);    final String a2=hex.substring(1);    return a1 + a1 + a1+ a2+ a2+ a2;  }  if (3 == hex.length()) {    final String a1=hex.substring(0,1);    final String a2=hex.substring(1,2);    final String a3=hex.substring(2);    return a1 + a1 + a2+ a2+ a3+ a3;  }  if (4 == hex.length()) {    final String a1=hex.substring(0,1);    final String a2=hex.substring(1,2);    final String a3=hex.substring(2,3);    final String a4=hex.substring(3);    return a1 + a2 + a3+ a4+ a3+ a4;  }  if (5 == hex.length()) {    final String a1=hex.substring(0,1);    final String a2=hex.substring(1,2);    final String a3=hex.substring(2,3);    final String a4=hex.substring(3,4);    final String a5=hex.substring(4);    return a1 + a2 + a3+ a4+ a5+ a5;  }  if (6 == hex.length()) {    return hex;  }  return hex.substring(0,6);}  }
class C{  public ImmutableType lookup(String hash){  return storage.get(hash);}  }
class C{  public Alarm(String name,AlarmListener listener,long delta){  this(name,listener);  runAfter(delta);}  }
class C{  public static GroupMatcher<TriggerKey> triggerGroupEquals(String compareTo){  return GroupMatcher.groupEquals(compareTo);}  }
class C{  @Path("add") @POST @Consumes(MediaType.APPLICATION_JSON) @Produces({MediaType.APPLICATION_JSON,MediaType.TEXT_PLAIN}) @RolesAllowed("workspace/developer") public CLIOutputResponse add(final AddRequest request) throws ServerException, IOException {  request.setProjectPath(getRealPath(request.getProjectPath()));  return this.subversionApi.add(request);}  }
class C{  @Override public String value(){  return value;}  }
class C{  public double pdf(double x){  throw new RuntimeException("not implemented");}  }
class C{  public void onStart(Interaction iact){}  }
class C{  public static void formatNanpNumber(Editable text){  int length=text.length();  if (length > "+1-nnn-nnn-nnnn".length()) {    return;  } else   if (length <= 5) {    return;  }  CharSequence saved=text.subSequence(0,length);  removeDashes(text);  length=text.length();  int dashPositions[]=new int[3];  int numDashes=0;  int state=NANP_STATE_DIGIT;  int numDigits=0;  for (int i=0; i < length; i++) {    char c=text.charAt(i);switch (c) {case '1':      if (numDigits == 0 || state == NANP_STATE_PLUS) {        state=NANP_STATE_ONE;        break;      }case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':case '0':    if (state == NANP_STATE_PLUS) {      text.replace(0,length,saved);      return;    } else     if (state == NANP_STATE_ONE) {      dashPositions[numDashes++]=i;    } else     if (state != NANP_STATE_DASH && (numDigits == 3 || numDigits == 6)) {      dashPositions[numDashes++]=i;    }  state=NANP_STATE_DIGIT;numDigits++;break;case '-':state=NANP_STATE_DASH;break;case '+':if (i == 0) {state=NANP_STATE_PLUS;break;}default :text.replace(0,length,saved);return;}}if (numDigits == 7) {numDashes--;}for (int i=0; i < numDashes; i++) {int pos=dashPositions[i];text.replace(pos + i,pos + i,"-");}int len=text.length();while (len > 0) {if (text.charAt(len - 1) == '-') {text.delete(len - 1,len);len--;} else {break;}}}  }
class C{  public static File armyTablesDir(){  lock.readLock().lock();  try {    return (army_tables_dir != null) ? army_tables_dir : new File(dataDir(),DEFAULT_DIR_NAME_ARMY_TABLES);  }  finally {    lock.readLock().unlock();  }}  }
class C{  protected static void sendTextContent(HttpServletResponse response,String content,String contentType) throws IOException {  response.setContentType(contentType);  response.getWriter().print(content);}  }
class C{  public SafeFaceDetector(Detector<Face> delegate){  mDelegate=delegate;}  }
class C{  public static SubQuery createSubQuery(Model model,Query subQuery){  SubQuery result=model.createResource(SP.SubQuery).as(SubQuery.class);  result.addProperty(SP.query,subQuery);  return result;}  }
class C{  public synchronized void engineSetKeyEntry(String alias,byte[] key,Certificate[] chain) throws KeyStoreException {  try {    new EncryptedPrivateKeyInfo(key);  } catch (  IOException ioe) {    throw new KeyStoreException("Private key is not stored" + " as PKCS#8 EncryptedPrivateKeyInfo: " + ioe,ioe);  }  PrivateKeyEntry entry=new PrivateKeyEntry();  entry.date=new Date();  if (debug != null) {    debug.println("Setting a protected private key at alias '" + alias + "'");  }  try {    entry.keyId=("Time " + (entry.date).getTime()).getBytes("UTF8");  } catch (  UnsupportedEncodingException ex) {  }  entry.alias=alias.toLowerCase(Locale.ENGLISH);  entry.protectedPrivKey=key.clone();  if (chain != null) {    if ((chain.length > 1) && (!validateChain(chain))) {      throw new KeyStoreException("Certificate chain is " + "not valid");    }    entry.chain=chain.clone();    certificateCount+=chain.length;    if (debug != null) {      debug.println("Setting a " + entry.chain.length + "-certificate chain at alias '"+ alias+ "'");    }  }  privateKeyCount++;  entries.put(alias.toLowerCase(Locale.ENGLISH),entry);}  }
class C{  protected void destroyEntry(final HashEntry<K,V> entry){  entry.next=null;  entry.key=null;  entry.value=null;}  }
class C{  @Override public int size(){  return mapping.length;}  }
class C{  public static <T>T[] eachWithIndex(T[] self,@ClosureParams(value=FromString.class,options="T,Integer") Closure closure){  final Object[] args=new Object[2];  int counter=0;  for (  T item : self) {    args[0]=item;    args[1]=counter++;    closure.call(args);  }  return self;}  }
class C{  public Iterator<Key> iterator(){  return new MyIterator();}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public RemainderDateTimeField(DividedDateTimeField dividedField,DateTimeFieldType type){  super(dividedField.getWrappedField(),type);  iDivisor=dividedField.iDivisor;  iRangeField=dividedField.iDurationField;}  }
class C{  public static void joinNodeGroup(ServiceHost host,String peerHost,int peerPort){  if (!host.checkServiceAvailable(ServiceUriPaths.DEFAULT_NODE_GROUP)) {    logger.warn("DEFAULT_NODE_GROUP service is unavailable!");    return;  }  URI peerNodeGroup=UriUtils.buildUri(peerHost,peerPort,"",null);  host.joinPeers(ImmutableList.of(peerNodeGroup),ServiceUriPaths.DEFAULT_NODE_GROUP);  logger.info("Joining group through {}",peerNodeGroup);}  }
class C{  public BerInputStream(byte[] encoded,int offset,int expectedLength) throws IOException {  this.in=null;  this.buffer=encoded;  this.offset=offset;  next();  if (length != INDEFINIT_LENGTH && (offset + expectedLength) != (this.offset + this.length)) {    throw new ASN1Exception("Wrong content length");  }}  }
class C{  public void onAnimationStart(Animator animation){  if (mRule == Dependency.WITH) {    startIfReady(animation);  }}  }
class C{  @Override public void onDrawEye(Eye eye){  GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT | GLES20.GL_DEPTH_BUFFER_BIT);  Matrix.multiplyMM(mView,0,eye.getEyeView(),0,mCamera,0);  multiplyMM(mViewProjectionMatrix,0,mProjectionMatrix,0,mView,0);  mSphere.draw(mViewProjectionMatrix);  checkGLError("onDrawEye");  if (mIsCardboardTriggered) {    mIsCardboardTriggered=false;    resetTexture();  }}  }
class C{  public NearestPointDecorator(DrawingCanvas inner,ElementCanvas<IMultiPoint> canvas,Model m){  super(inner);  this.canvas=canvas;  this.model=m;}  }
class C{  public void sendMessage(String type,String key,String value){  if (type.equals(SET_CONFIG_TYPE)) {    sendSetConfigMessage(key,value);  } else {    throw new IllegalArgumentException("Type is invalid. The possible values are {" + SET_CONFIG_TYPE + "}");  }}  }
class C{  @Override public long longValue(){  return value;}  }
class C{  @Override public void agg(Object newVal){  aggVal+=(long)newVal;  firstTime=false;}  }
class C{  public void close(){  log.info("shutting down...");  exec.shutdown();  log.info("closing {} JMX clients.",clients.size());  for (  CassandraJmxCompactionClient client : clients) {    client.close();  }}  }
class C{  public boolean isParameter(Operand op){  for (Enumeration<Operand> e=getParameters(); e.hasMoreElements(); ) {    if (e.nextElement().similar(op))     return true;  }  return false;}  }
class C{  public void update(Graphics g,JComponent c){  AbstractButton button=(AbstractButton)c;  if ((c.getBackground() instanceof UIResource) && button.isContentAreaFilled() && c.isEnabled()) {    ButtonModel model=button.getModel();    if (!MetalUtils.isToolBarButton(c)) {      if (!model.isArmed() && !model.isPressed() && MetalUtils.drawGradient(c,g,"ToggleButton.gradient",0,0,c.getWidth(),c.getHeight(),true)) {        paint(g,c);        return;      }    } else     if ((model.isRollover() || model.isSelected()) && MetalUtils.drawGradient(c,g,"ToggleButton.gradient",0,0,c.getWidth(),c.getHeight(),true)) {      paint(g,c);      return;    }  }  super.update(g,c);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return DELETED;default :return null;}}  }
class C{  @Override public E next(){  if (!hasNext()) {    throw new NoSuchElementException();  }  final E e=src.next();  nelements++;  return e;}  }
class C{  public Sentence(){  sentence=new ArrayList<TWord>();}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return zzCurrentPos >= s.offset + s.count;}  }
class C{  public static <T>T field(Object obj,String fieldName){  assert obj != null;  assert fieldName != null;  try {    for (Class cls=obj.getClass(); cls != Object.class; cls=cls.getSuperclass()) {      for (      Field field : cls.getDeclaredFields()) {        if (field.getName().equals(fieldName)) {          boolean accessible=field.isAccessible();          field.setAccessible(true);          T val=(T)field.get(obj);          if (!accessible)           field.setAccessible(false);          return val;        }      }    }  } catch (  Exception e) {    throw new IgniteException("Failed to get field value [fieldName=" + fieldName + ", obj="+ obj+ ']',e);  }  throw new IgniteException("Failed to get field value [fieldName=" + fieldName + ", obj="+ obj+ ']');}  }
class C{  public boolean hasFluid(){  return fluid != null;}  }
class C{  public static CallableStatement prepareCall(String sql){  return prepareCall(sql,ResultSet.CONCUR_UPDATABLE,null);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public SnippetHighlightPainter(Color c){  color=c;}  }
class C{  public static String argsToString(FieldType fieldType,String transformerName,Object[] args){  int numArgs=Ruqus.getTransformerData().numArgsOf(transformerName);  if (numArgs == 0)   return ""; else   if (numArgs == 1)   return " " + argToString(fieldType,args[0]); else   if (numArgs == C.VAR_ARGS || numArgs > 1) {    ArrayList<String> stringArgs=new ArrayList<>(args.length);    for (    Object arg : args)     stringArgs.add(argToString(fieldType,arg));    return " " + ListPhrase.from(" and ",", ",", and ").join(stringArgs).toString();  } else   throw new IllegalArgumentException("numArgs < -1.");}  }
class C{  public void calculate(NondominatedPopulation approximationSet){  if (Settings.isHypervolumeEnabled()) {    hypervolume=Hypervolume.evaluate(problem,hypervolumeNormalizer.normalize(approximationSet));  } else {    hypervolume=Double.NaN;  }  normalizedApproximationSet=normalizer.normalize(approximationSet);  generationalDistance=GenerationalDistance.evaluate(problem,normalizedApproximationSet,normalizedReferenceSet,Settings.getGDPower());  invertedGenerationalDistance=InvertedGenerationalDistance.evaluate(problem,normalizedApproximationSet,normalizedReferenceSet,Settings.getIGDPower());  additiveEpsilonIndicator=AdditiveEpsilonIndicator.evaluate(problem,normalizedApproximationSet,normalizedReferenceSet);  maximumParetoFrontError=MaximumParetoFrontError.evaluate(problem,normalizedApproximationSet,normalizedReferenceSet);  spacing=Spacing.evaluate(problem,approximationSet);}  }
class C{  protected void makeOutputStructure(Instances inputStructure) throws Exception {  m_matches=new SubstringLabelerRules(m_matchDetails,m_attName,getConsumeNonMatching(),getNominalBinary(),inputStructure,statusMessagePrefix(),m_log,m_env);  m_matches.makeOutputStructure();}  }
class C{  public Socket connectForClient(String host,int port,int timeout) throws IOException {  return connect(InetAddress.getByName(host),port,timeout,null,true,-1);}  }
class C{  public Plip replicate(){  return this;}  }
class C{  public static JPanel createDemoPanel(){  JFreeChart chart=createChart(createDataset());  chart.setPadding(new RectangleInsets(4,8,2,2));  ChartPanel panel=new ChartPanel(chart,false);  panel.setMouseWheelEnabled(true);  panel.setPreferredSize(new Dimension(600,300));  return panel;}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  private float calculateTypeAndScale(){  movementType=MovingViewAnimator.AUTO_MOVE;  float scale=1f;  float scaleByImage=Math.max(imageWidth / canvasWidth,imageHeight / canvasHeight);  Matrix m=new Matrix();  if (offsetWidth == 0 && offsetHeight == 0) {    float sW=canvasWidth / imageWidth;    float sH=canvasHeight / imageHeight;    if (sW > sH) {      scale=Math.min(sW,maxRelativeSize);      m.setTranslate((canvasWidth - imageWidth * scale) / 2f,0);      movementType=MovingViewAnimator.VERTICAL_MOVE;    } else     if (sW < sH) {      scale=Math.min(sH,maxRelativeSize);      m.setTranslate(0,(canvasHeight - imageHeight * scale) / 2f);      movementType=MovingViewAnimator.HORIZONTAL_MOVE;    } else {      scale=Math.max(sW,maxRelativeSize);      movementType=(scale == sW) ? MovingViewAnimator.NONE_MOVE : MovingViewAnimator.DIAGONAL_MOVE;    }  } else   if (offsetWidth == 0) {    scale=canvasWidth / imageWidth;    movementType=MovingViewAnimator.VERTICAL_MOVE;  } else   if (offsetHeight == 0) {    scale=canvasHeight / imageHeight;    movementType=MovingViewAnimator.HORIZONTAL_MOVE;  } else   if (scaleByImage > maxRelativeSize) {    scale=maxRelativeSize / scaleByImage;    if (imageWidth * scale < canvasWidth || imageHeight * scale < canvasHeight) {      scale=Math.max(canvasWidth / imageWidth,canvasHeight / imageHeight);    }  }  m.preScale(scale,scale);  setImageMatrix(m);  return scale;}  }
class C{  private static <T>void removeIdentity(List<T> list,T object){  Iterator<T> it=list.iterator();  while (it.hasNext()) {    if (object == it.next()) {      it.remove();    }  }}  }
class C{  public T caseTFormalParameter(TFormalParameter object){  return null;}  }
class C{  public XObject operate(XObject left,XObject right) throws javax.xml.transform.TransformerException {  return null;}  }
class C{  public boolean hasSuperclass(){  checkLevel(HIERARCHY);  return superClass != null;}  }
class C{  public boolean subtypeOf(CtClass clazz) throws NotFoundException {  return this == clazz || getName().equals(clazz.getName());}  }
class C{  public DateRangeBuilder format(String format){  this.format=format;  return this;}  }
class C{  @PUT @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.TENANT_ADMIN}) @Path("/{id}") public ClusterRestRep updateCluster(@PathParam("id") URI id,ClusterUpdateParam updateParam,@DefaultValue("true") @QueryParam("update-exports") boolean updateExports){  Cluster cluster=queryObject(Cluster.class,id,true);  validateClusterData(updateParam,cluster.getTenant(),cluster,_dbClient);  populateCluster(updateParam,cluster);  _dbClient.persistObject(cluster);  auditOp(OperationTypeEnum.UPDATE_CLUSTER,true,null,cluster.auditParameters());  if (updateExports) {    String taskId=UUID.randomUUID().toString();    ComputeSystemController controller=getController(ComputeSystemController.class,null);    Operation op=_dbClient.createTaskOpStatus(Cluster.class,cluster.getId(),taskId,ResourceOperationTypeEnum.UPDATE_CLUSTER);    controller.synchronizeSharedExports(cluster.getId(),taskId);    auditOp(OperationTypeEnum.UPDATE_CLUSTER,true,op.getStatus(),cluster.auditParameters());  }  return map(queryObject(Cluster.class,id,false));}  }
class C{  public void paint(Graphics2D g2d){  if (paint != null) {    g2d.setPaint(paint);    g2d.fill(shape);  }}  }
class C{  public String sqlObjectDetail_saveTemporaryColumn(String vendorName,String catalogName,String schemaName,String tableName,String columnName,String dataType){  return m_interfaces.get(getDBVendorID(vendorName)).sqlObjectDetail_saveTemporaryColumn(catalogName,schemaName,tableName,getTemporaryColumnName(),columnName,dataType);}  }
class C{  private String printCFormat(final char x){  final int nPrint=1;  int width=fieldWidth;  if (!fieldWidthSet) {    width=nPrint;  }  final char[] ca=new char[width];  int i;  if (leftJustify) {    ca[0]=x;    for (i=1; i <= width - nPrint; i++) {      ca[i]=' ';    }  } else {    for (i=0; i < width - nPrint; i++) {      ca[i]=' ';    }    ca[i]=x;  }  return new String(ca);}  }
class C{  public IOContainer(Collection<? extends IOObject> objectCollection){  ioObjects=new ArrayList<>(objectCollection.size());  ioObjects.addAll(objectCollection);}  }
class C{  public void right(){  if (this.stereoType == StereoType.SIDE_BY_SIDE) {    pgl.viewport(this.width / 2,0,this.width / 2,this.height);  } else {    pgl.viewport(0,0,this.width,this.height);  }  float top=widthdiv2;  float bottom=-widthdiv2;  float left=(-aspectRatio * widthdiv2 - 0.5f * eyeSeparation * nearPlane / convPlane);  float right=(aspectRatio * widthdiv2 - 0.5f * eyeSeparation * nearPlane / convPlane);  app.frustum(left,right,bottom,top,nearPlane,farPlane);  app.camera(posx + rightx,posy + righty,posz + rightz,posx + rightx + dirx,posy + righty + diry,posz + rightz + dirz,upx,upy,upz);}  }
class C{  private void validateVcenterLastDiscoveryJobStatus(Vcenter vcenter){  long tolerance=getRefreshInterval();  long lastDiscoveryTime=vcenter.getLastDiscoveryRunTime();  long currentSystemTime=System.currentTimeMillis();  if (DiscoveredDataObject.DataCollectionJobStatus.IN_PROGRESS.toString().equalsIgnoreCase(vcenter.getDiscoveryStatus()) || currentSystemTime - lastDiscoveryTime < tolerance * 1000) {    throw APIException.badRequests.cannotEditVcenterOrUpdateACL(vcenter.getLabel(),tolerance);  }}  }
class C{  public void test_blob_readBack(){  final Journal store=(Journal)getStore();  try {    final RWStrategy bs=(RWStrategy)store.getBufferStrategy();    final RWStore rw=bs.getStore();    final byte[] buf=new byte[2 * 1024 * 1024];    r.nextBytes(buf);    final ByteBuffer bb=ByteBuffer.wrap(buf);    final long faddr=bs.write(bb);    if (log.isInfoEnabled())     log.info("Blob Allocation at " + rw.convertFromAddr(faddr));    bb.position(0);    ByteBuffer rdBuf=bs.read(faddr);    assertEquals(bb,rdBuf);    if (log.isInfoEnabled())     log.info("Now commit to disk");    store.commit();    rw.reset();    rw.getWriteCacheService().resetAndClear();    rdBuf=bs.read(faddr);    assertEquals(bb,rdBuf);  } catch (  InterruptedException e) {    throw new RuntimeException(e);  } finally {    store.destroy();  }}  }
class C{  public CovLINard(int inputDimension){  this.D=inputDimension;}  }
class C{  public Sinh(){  super(Number.class,Number.class);}  }
class C{  public void freeSegment(SegmentKelp segment) throws IOException {  SegmentMeta segmentMeta=findSegmentMeta(segment.length());  segmentMeta.remove(segment);  segment.close();  segmentMeta.addFree(segment.extent());}  }
class C{  void allocDebugStuff(){  mDebugCollisionRect=new OutlineAlignedRect();  mDebugCollisionRect.setColor(1.0f,0.0f,0.0f);}  }
class C{  public boolean isInterrupted(){  return session.interrupted;}  }
class C{  public void callMethod() throws IOException {  print("callMethod",null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:24.495 -0500",hash_original_method="A8016262F3F363A84230A54DA12F1862",hash_generated_method="E4677857B1F1A73C67639E50F28EFECF") public synchronized void addRoute(SIPRequest sipRequest){  if (sipStack.isLoggingEnabled()) {    sipStack.getStackLogger().logDebug("setContact: dialogState: " + this + "state = "+ this.getState());  }  if (this.dialogState == CONFIRMED_STATE && SIPRequest.isTargetRefresh(sipRequest.getMethod())) {    this.doTargetRefresh(sipRequest);  }  if (this.dialogState == CONFIRMED_STATE || this.dialogState == TERMINATED_STATE) {    return;  }  if (sipRequest.getToTag() != null)   return;  RecordRouteList rrlist=sipRequest.getRecordRouteHeaders();  if (rrlist != null) {    this.addRoute(rrlist);  } else {    this.routeList=new RouteList();  }  ContactList contactList=sipRequest.getContactHeaders();  if (contactList != null) {    this.setRemoteTarget((ContactHeader)contactList.getFirst());  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_TRACE_TYPE_2__TRACER_ARGUMENT_1:    setTracerArgument_1(TRACER_ARGUMENT_1_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public void updateContent(InputStream content) throws ForbiddenException, ServerException {  getVirtualFile().updateContent(content,null);}  }
class C{  @Override public int length(){  return 0;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:26.766 -0500",hash_original_method="7E8DD532FE0D28207249CA86D60AFD62",hash_generated_method="D19A9737DAFF09954A9BC9BA22A98230") private void remove(ThreadGroup g){synchronized (groups) {    for (Iterator<ThreadGroup> i=groups.iterator(); i.hasNext(); ) {      ThreadGroup threadGroup=i.next();      if (threadGroup.equals(g)) {        i.remove();        break;      }    }  }  destroyIfEmptyDaemon();}  }
class C{  protected int evictionExtraSpace(Builder<K,V> builder){  return 0;}  }
class C{  @Override protected void onPostExecute(final OfferCollection result){  PlaceDetailsActivity.this.setProgressBarIndeterminateVisibility(false);  if (result == null || result.getItems() == null || result.getItems().size() < 1) {    if (result == null) {      offersListLabel.setText(R.string.failedToRetrieveOffers);    } else {      offersListLabel.setText(R.string.noOffers);    }    offersList.setAdapter(null);    return;  }  offersListLabel.setText(R.string.offers);  ListAdapter offersListAdapter=createOfferListAdapter(result.getItems());  offersList.setAdapter(offersListAdapter);}  }
class C{  public UpdateExport(final String key){  super(key);}  }
class C{  private void toggleDrawer(){  if (drawerLayout.isDrawerVisible(GravityCompat.START)) {    drawerLayout.closeDrawer(GravityCompat.START);  } else {    drawerLayout.openDrawer(GravityCompat.START);  }}  }
class C{  public void clearSections(){  sections.clear();  fireUpdateEvent(SECTION_EVENT);}  }
class C{  @Override public MapStream<K,V> parallel(){  inner=inner.parallel();  return this;}  }
class C{  private boolean mapTarget(final String target){  final String messageFormat=Messages.getString("BranchDialog.WorkingFolderDialogTextFormat");  final String purpose=MessageFormat.format(messageFormat,target,target);  final Workspace workspace=repository.getWorkspace();  final SetWorkingFolderDialog dialog=new SetWorkingFolderDialog(getShell(),workspace,target,purpose);  if (dialog.open() == IDialogConstants.OK_ID) {    final SetWorkingFolderCommand setCommand=new SetWorkingFolderCommand(repository,target,dialog.getLocalFolder(),WorkingFolderType.MAP,dialog.getRecursionType(),false);    if (!UICommandExecutorFactory.newUICommandExecutor(getShell()).execute(setCommand).isOK()) {      return false;    }    return true;  }  return false;}  }
class C{  public void optimizeSequence(List<CodeInstruction> codeInstructions){  if (RuntimeContext.memoryInt == null) {    return;  }  if (Profiler.isProfilerEnabled()) {    return;  }  if (State.debugger != null) {    return;  }  int decreaseSpInstruction=-1;  int stackSize=0;  int currentInstructionIndex=0;  int maxSpOffset=Integer.MAX_VALUE;  int swSequenceCount=0;  int[] storeSpInstructions=null;  int[] storeSpRegisters=null;  List<CodeInstruction> storeSpCodeInstructions=null;  boolean[] modifiedRegisters=new boolean[GprState.NUMBER_REGISTERS];  Arrays.fill(modifiedRegisters,false);  for (  CodeInstruction codeInstruction : codeInstructions) {    if (codeInstruction.isBranching() || codeInstruction.hasFlags(Instruction.FLAG_HAS_DELAY_SLOT)) {      break;    }    if (codeInstruction.isBranchTarget() && codeBlock.getStartAddress() != codeInstruction.getAddress()) {      break;    }    Instruction insn=codeInstruction.getInsn();    if (decreaseSpInstruction >= 0) {      if (insn == Instructions.SW) {        int rs=codeInstruction.getRsRegisterIndex();        int rt=codeInstruction.getRtRegisterIndex();        if (rs == _sp) {          int simm16=codeInstruction.getImm16(true);          if (!modifiedRegisters[rt]) {            if (simm16 >= 0 && simm16 < stackSize && (simm16 & 3) == 0 && simm16 < maxSpOffset) {              int index=simm16 >> 2;              if (storeSpInstructions[index] < 0) {                storeSpCodeInstructions.add(codeInstruction);                storeSpInstructions[index]=currentInstructionIndex;                storeSpRegisters[index]=rt;                swSequenceCount++;              }            }          } else {            maxSpOffset=min(maxSpOffset,simm16);          }        }      }    }    if (insn == Instructions.ADDI || insn == Instructions.ADDIU) {      int rs=codeInstruction.getRsRegisterIndex();      int rt=codeInstruction.getRtRegisterIndex();      int simm16=codeInstruction.getImm16(true);      if (rt == _sp && rs == _sp && simm16 < 0) {        decreaseSpInstruction=currentInstructionIndex;        stackSize=-codeInstruction.getImm16(true);        storeSpInstructions=new int[stackSize >> 2];        Arrays.fill(storeSpInstructions,-1);        storeSpRegisters=new int[storeSpInstructions.length];        Arrays.fill(storeSpRegisters,-1);        storeSpCodeInstructions=new LinkedList<CodeInstruction>();      } else       if (rs == _sp && simm16 >= 0) {        maxSpOffset=min(maxSpOffset,simm16);      }    } else     if (insn == Instructions.ADD || insn == Instructions.ADDU) {      int rs=codeInstruction.getRsRegisterIndex();      int rt=codeInstruction.getRtRegisterIndex();      if (rs == _sp || rt == _sp) {        break;      }    } else     if (insn == Instructions.LW || insn == Instructions.SWC1 || insn == Instructions.LWC1) {      int rs=codeInstruction.getRsRegisterIndex();      int simm16=codeInstruction.getImm16(true);      if (rs == _sp && simm16 >= 0) {        maxSpOffset=min(maxSpOffset,simm16);      }    } else     if (insn == Instructions.SVQ || insn == Instructions.LVQ) {      int rs=codeInstruction.getRsRegisterIndex();      int simm14=codeInstruction.getImm14(true);      if (rs == _sp && simm14 >= 0) {        maxSpOffset=min(maxSpOffset,simm14);      }    }    if (codeInstruction.hasFlags(Instruction.FLAG_WRITES_RT)) {      modifiedRegisters[codeInstruction.getRtRegisterIndex()]=true;    }    if (codeInstruction.hasFlags(Instruction.FLAG_WRITES_RD)) {      modifiedRegisters[codeInstruction.getRdRegisterIndex()]=true;    }    if (maxSpOffset <= 0) {      break;    }    currentInstructionIndex++;  }  if (swSequenceCount > 1) {    int[] offsets=new int[swSequenceCount];    int[] registers=new int[swSequenceCount];    int index=0;    for (int i=0; i < storeSpInstructions.length && index < swSequenceCount; i++) {      if (storeSpInstructions[i] >= 0) {        offsets[index]=i << 2;        registers[index]=storeSpRegisters[i];        index++;      }    }    codeInstructions.removeAll(storeSpCodeInstructions);    SequenceSWCodeInstruction sequenceSWCodeInstruction=new SequenceSWCodeInstruction(_sp,offsets,registers);    sequenceSWCodeInstruction.setAddress(storeSpCodeInstructions.get(0).getAddress());    codeInstructions.add(decreaseSpInstruction + 1,sequenceSWCodeInstruction);  }}  }
class C{  public void accumulate(long x){  Cell[] as;  long b, v, r;  int m;  Cell a;  if ((as=cells) != null || (r=function.applyAsLong(b=base,x)) != b && !casBase(b,r)) {    boolean uncontended=true;    if (as == null || (m=as.length - 1) < 0 || (a=as[getProbe() & m]) == null || !(uncontended=(r=function.applyAsLong(v=a.value,x)) == v || a.cas(v,r)))     longAccumulate(x,function,uncontended);  }}  }
class C{  public boolean isLegal(Collection<DPState> dpStates){  for (  DPState dpState : dpStates) {    if (dpState instanceof NgramDPState) {      String leftWords=" " + Vocabulary.getWords(((NgramDPState)dpState).getLeftLMStateWords()) + " ";      String rightWords=" " + Vocabulary.getWords(((NgramDPState)dpState).getRightLMStateWords()) + " ";      int leftPos=this.target.indexOf(leftWords);      int rightPos=this.target.lastIndexOf(rightWords);      return (leftPos != -1 && leftPos <= rightPos);    }  }  return true;}  }
class C{  public static String formatQuantity(Integer quantity){  if (quantity == null)   return ""; else   return formatQuantity(quantity.doubleValue());}  }
class C{  public @Test final void testCreationNegative3(){  thrown.expect(IllegalArgumentException.class);  new Role(null);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static boolean pathIsSymbolicLink(String path){  File file=new File(path);  try {    return (file.getAbsolutePath().equals(file.getCanonicalPath()));  } catch (  IOException e) {    e.printStackTrace();  }  return false;}  }
class C{  protected void addToGUI(JPanel gui,AbstractButton b,String cmd){  b.setActionCommand(cmd);  b.addActionListener(this);  gui.add(b);}  }
class C{  protected void removeTag(short tagId){  mExifTags.remove(tagId);}  }
class C{  @Override public CertPath engineGenerateCertPath(List<? extends Certificate> certificates) throws CertificateException {  return (new X509CertPath(certificates));}  }
class C{  public SurfaceEllipse(LatLon center,double majorRadius,double minorRadius,Angle heading,int intervals){  this(center,majorRadius,minorRadius,heading);  if (intervals < MIN_NUM_INTERVALS) {    String message=Logging.getMessage("generic.ArgumentOutOfRange",intervals);    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.intervals=intervals;}  }
class C{  public final void yyreset(java.io.Reader reader){  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtEOF=false;}  }
class C{  @Override public View onCreateFloatView(int position){  View v=mListView.getChildAt(position + mListView.getHeaderViewsCount() - mListView.getFirstVisiblePosition());  if (v == null) {    return null;  }  v.setPressed(false);  v.setDrawingCacheEnabled(true);  mFloatBitmap=Bitmap.createBitmap(v.getDrawingCache());  v.setDrawingCacheEnabled(false);  if (mImageView == null) {    mImageView=new ImageView(mListView.getContext());  }  mImageView.setBackgroundColor(mFloatBGColor);  mImageView.setPadding(0,0,0,0);  mImageView.setImageBitmap(mFloatBitmap);  mImageView.setLayoutParams(new ViewGroup.LayoutParams(v.getWidth(),v.getHeight()));  return mImageView;}  }
class C{  @Override public boolean equals(final Object o){  return this == o;}  }
class C{  public static Stats of(double... values){  StatsAccumulator acummulator=new StatsAccumulator();  acummulator.addAll(values);  return acummulator.snapshot();}  }
class C{  public Element parseXML(String xml) throws Exception {  InputSource input=new InputSource();  input.setCharacterStream(new StringReader(xml));  Document document=getParser().parse(input);  return document.getDocumentElement();}  }
class C{  public ReflectionRenderer(float opacity,float length,boolean blurEnabled){  this.changeSupport=new PropertyChangeSupport(this);  this.stackBlurFilter=new StackBlurFilter(1);  setOpacity(opacity);  setLength(length);  setBlurEnabled(blurEnabled);}  }
class C{  public org.oscm.example.client.EventServiceStub.RecordEventForSubscriptionResponseE recordEventForSubscription(org.oscm.example.client.EventServiceStub.RecordEventForSubscriptionE recordEventForSubscription0) throws java.rmi.RemoteException, org.oscm.example.client.DuplicateEventExceptionException, org.oscm.example.client.ObjectNotFoundExceptionException, org.oscm.example.client.OrganizationAuthoritiesExceptionException, org.oscm.example.client.ValidationExceptionException {  org.apache.axis2.context.MessageContext _messageContext=null;  try {    org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[0].getName());    _operationClient.getOptions().setAction("http://oscm.org/EventService/recordEventForSubscriptionRequest");    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);    addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");    _messageContext=new org.apache.axis2.context.MessageContext();    org.apache.axiom.soap.SOAPEnvelope env=null;    env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),recordEventForSubscription0,optimizeContent(new javax.xml.namespace.QName("http://oscm.org","recordEventForSubscription")));    _serviceClient.addHeadersToEnvelope(env);    _messageContext.setEnvelope(env);    _operationClient.addMessageContext(_messageContext);    _operationClient.execute(true);    org.apache.axis2.context.MessageContext _returnMessageContext=_operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);    org.apache.axiom.soap.SOAPEnvelope _returnEnv=_returnMessageContext.getEnvelope();    java.lang.Object object=fromOM(_returnEnv.getBody().getFirstElement(),org.oscm.example.client.EventServiceStub.RecordEventForSubscriptionResponseE.class,getEnvelopeNamespaces(_returnEnv));    return (org.oscm.example.client.EventServiceStub.RecordEventForSubscriptionResponseE)object;  } catch (  org.apache.axis2.AxisFault f) {    org.apache.axiom.om.OMElement faultElt=f.getDetail();    if (faultElt != null) {      if (faultExceptionNameMap.containsKey(faultElt.getQName())) {        try {          java.lang.String exceptionClassName=(java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());          java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);          java.lang.Exception ex=(java.lang.Exception)exceptionClass.newInstance();          java.lang.String messageClassName=(java.lang.String)faultMessageMap.get(faultElt.getQName());          java.lang.Class messageClass=java.lang.Class.forName(messageClassName);          java.lang.Object messageObject=fromOM(faultElt,messageClass,null);          java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});          m.invoke(ex,new java.lang.Object[]{messageObject});          if (ex instanceof org.oscm.example.client.DuplicateEventExceptionException) {            throw (org.oscm.example.client.DuplicateEventExceptionException)ex;          }          if (ex instanceof org.oscm.example.client.ObjectNotFoundExceptionException) {            throw (org.oscm.example.client.ObjectNotFoundExceptionException)ex;          }          if (ex instanceof org.oscm.example.client.OrganizationAuthoritiesExceptionException) {            throw (org.oscm.example.client.OrganizationAuthoritiesExceptionException)ex;          }          if (ex instanceof org.oscm.example.client.ValidationExceptionException) {            throw (org.oscm.example.client.ValidationExceptionException)ex;          }          throw new java.rmi.RemoteException(ex.getMessage(),ex);        } catch (        java.lang.ClassCastException e) {          throw f;        }catch (        java.lang.ClassNotFoundException e) {          throw f;        }catch (        java.lang.NoSuchMethodException e) {          throw f;        }catch (        java.lang.reflect.InvocationTargetException e) {          throw f;        }catch (        java.lang.IllegalAccessException e) {          throw f;        }catch (        java.lang.InstantiationException e) {          throw f;        }      } else {        throw f;      }    } else {      throw f;    }  } finally {    _messageContext.getTransportOut().getSender().cleanup(_messageContext);  }}  }
class C{  public CategoryFilter(){  categories=new LinkedList<ICategory>();  excludeCategories=new LinkedList<ICategory>();}  }
class C{  public void scheduleAtFixedRate(TimerTask task,Date firstTime,long period){  if (period <= 0)   throw new IllegalArgumentException("Non-positive period.");  sched(task,firstTime.getTime(),period);}  }
class C{  public static boolean isBodyVelocityEnabled(){  return bodyVelocityEnabled;}  }
class C{  public PlanStrategy chooseStrategy(final Person person){  double rnd=MatsimRandom.getRandom().nextDouble() * this.totalWeights.get(((PersonImplPops)person).getPopulationId());  double sum=0.0;  for (int i=0, max=this.weights.get(((PersonImplPops)person).getPopulationId()).size(); i < max; i++) {    sum+=this.weights.get(((PersonImplPops)person).getPopulationId()).get(i).doubleValue();    if (rnd <= sum) {      return this.strategies.get(((PersonImplPops)person).getPopulationId()).get(i);    }  }  return null;}  }
class C{  public ActionEvent(@NotNull Presentation presentation,@NotNull ActionManager actionManager,@NotNull PerspectiveManager perspectiveManager,@Nullable Map<String,String> parameters){  this.actionManager=actionManager;  this.presentation=presentation;  this.perspectiveManager=perspectiveManager;  this.parameters=parameters;}  }
class C{  public static void enable(MetricsRegistry metricsRegistry,long period,TimeUnit unit){  final ConsoleReporter reporter=new ConsoleReporter(metricsRegistry,System.out,MetricPredicate.ALL);  reporter.start(period,unit);}  }
class C{  public NamingSecurityException(String explanation){  super(explanation);}  }
class C{  private CellSignalStrengthWcdma(Parcel in){  mSignalStrength=in.readInt();  mBitErrorRate=in.readInt();  if (DBG)   log("CellSignalStrengthWcdma(Parcel): " + toString());}  }
class C{  protected boolean bothHaveSpecificPrefix(Prefix lhtPrefix,Prefix rhtPrefix,Prefix specificPrefix){  if (lhtPrefix == null || rhtPrefix == null || specificPrefix == null) {    return false;  }  return (lhtPrefix.equals(rhtPrefix) && rhtPrefix.equals(specificPrefix));}  }
class C{  public final void test() throws Exception {  System.out.println("ArgumentFeatures Feature Extractor");  String[] viewsToAdd={ViewNames.POS,ViewNames.LEMMA,ViewNames.SHALLOW_PARSE,ViewNames.PARSE_GOLD,ViewNames.SRL_VERB,ViewNames.PARSE_STANFORD,ViewNames.NER_CONLL};  TextAnnotation ta=DummyTextAnnotationGenerator.generateAnnotatedTextAnnotation(viewsToAdd,true,3);  int i=0;  ta.addView(ClauseViewGenerator.STANFORD);  ta.addView(PseudoParse.STANFORD);  System.out.println("This textannotation annotates the text: \n" + ta.getText());  View SRL_VERB=ta.getView("SRL_VERB");  List<Constituent> testlist=SRL_VERB.getConstituentsCoveringSpan(10,13);  testlist.addAll(SRL_VERB.getConstituentsCoveringSpan(26,27));  FeatureManifest featureManifest;  FeatureExtractor fex;  String fileName=Constant.prefix + "/Verb/Identifier/arg-features.fex";  featureManifest=new FeatureManifest(new FileInputStream(fileName));  FeatureManifest.setFeatureExtractor("hyphen-argument-feature",FeatureGenerators.hyphenTagFeature);  FeatureManifest.setTransformer("parse-left-sibling",FeatureGenerators.getParseLeftSibling(ViewNames.PARSE_STANFORD));  FeatureManifest.setTransformer("parse-right-sibling",FeatureGenerators.getParseRightSibling(ViewNames.PARSE_STANFORD));  FeatureManifest.setFeatureExtractor("pp-features",FeatureGenerators.ppFeatures(ViewNames.PARSE_STANFORD));  FeatureManifest.setFeatureExtractor("projected-path",new ProjectedPath(ViewNames.PARSE_STANFORD));  featureManifest.useCompressedName();  featureManifest.setVariable("*default-parser*",ViewNames.PARSE_STANFORD);  fex=featureManifest.createFex();  SrlVerbIdentifierArgumentFeatures af=new SrlVerbIdentifierArgumentFeatures();  for (  Constituent test : testlist) {    assertTrue(SRLFeaturesComparator.isNoCacheEqual(test,fex,af));  }}  }
class C{  public static void main(String[] args) throws ServiceException, IOException {  ContactsExampleParameters parameters=new ContactsExampleParameters(args);  if (parameters.isVerbose()) {    httpRequestLogger.setLevel(Level.FINEST);    ConsoleHandler handler=new ConsoleHandler();    handler.setLevel(Level.FINEST);    httpRequestLogger.addHandler(handler);    httpRequestLogger.setUseParentHandlers(false);  }  if (parameters.numberOfParameters() == 0 || parameters.isHelp() || (parameters.getAction() == null && parameters.getScript() == null)) {    displayUsage();    return;  }  if (parameters.getUserName() == null || parameters.getPassword() == null) {    System.err.println("Both username and password must be specified.");    return;  }  if (parameters.isContactFeed() && parameters.isGroupFeed()) {    throw new RuntimeException("Only one of contactfeed / groupfeed should" + "be specified");  }  ContactsExample example=new ContactsExample(parameters);  if (parameters.getScript() != null) {    processScript(example,parameters);  } else {    processAction(example,parameters);  }  System.out.flush();}  }
class C{  public void release(){  Toast.release();}  }
class C{  public static void main(String[] args){  MyDate date1=new MyDate();  MyDate date2=new MyDate(34355555133101L);  System.out.println("Date1: " + date1.getMonth() + "/"+ date1.getDay()+ "/"+ date1.getYear());  System.out.println("Date2: " + date2.getMonth() + "/"+ date2.getDay()+ "/"+ date2.getYear());}  }
class C{  @EventHandler(priority=EventPriority.HIGH,ignoreCancelled=true) public void onBlockUse(PlayerInteractEvent event){  if (event.getAction().equals(Action.RIGHT_CLICK_BLOCK)) {    Match match=Cardinal.getMatch(event.getPlayer());    if (match == null || !match.hasPlayer(event.getPlayer())) {      return;    }    for (    AppliedRegion reg : get(match,ApplyType.USE)) {      Block evaluating=event.getClickedBlock();      if (apply(reg,evaluating.getLocation(),event.getPlayer(),event,event,evaluating,event.getPlayer())) {        if (event.isCancelled()) {          event.setUseItemInHand(Event.Result.ALLOW);          event.setUseInteractedBlock(Event.Result.DENY);          event.setCancelled(false);        }        break;      }    }  }}  }
class C{  private void cleanEntriesInRcsContactProvider(){  Cursor cursor=null;  try {    cursor=mLocalContentResolver.query(CONTENT_URI,PROJ_RCSCONTACT_CONTACT,null,null,null);    CursorUtil.assertCursorIsNotNull(cursor,CONTENT_URI);    if (!cursor.moveToFirst()) {      return;    }    int contactColumnIdx=cursor.getColumnIndexOrThrow(KEY_CONTACT);    do {      String phoneNumber=cursor.getString(contactColumnIdx);      PhoneNumber number=ContactUtil.getValidPhoneNumberFromAndroid(phoneNumber);      ContactId contact=ContactUtil.createContactIdFromValidatedData(number);      if (getRawContactIdsFromPhoneNumber(contact).isEmpty()) {        Uri uri=Uri.withAppendedPath(ContactData.CONTENT_URI,phoneNumber);        mLocalContentResolver.delete(uri,null,null);        if (sLogger.isActivated()) {          sLogger.debug("cleanEntriesInRcsContactProvider clear for contact=".concat(phoneNumber));        }        mContactInfoCache.remove(contact);      }    } while (cursor.moveToNext());  }  finally {    CursorUtil.close(cursor);  }}  }
class C{  public void reset(){  resetInternal();  invalidateSelf();}  }
class C{  public static void check(Object o){  if (enabled) {    detectConcurrentAccess(o);  }}  }
class C{  public boolean isAcceptDirectDebit(){  Object oo=get_Value(COLUMNNAME_AcceptDirectDebit);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void addInt(int x){  prep(4,0);  putInt(x);}  }
class C{  public static Collection<AnnotationValue> resolveTypeQualifiers(Collection<AnnotationValue> values){  if (values.isEmpty()) {    return Collections.emptyList();  }  LinkedList<AnnotationValue> result=new LinkedList<AnnotationValue>();  LinkedList<ClassDescriptor> onStack=new LinkedList<ClassDescriptor>();  for (  AnnotationValue value : values) {    resolveTypeQualifierNicknames(value,result,onStack);  }  return result;}  }
class C{  private void sendNotification(String message){  Intent intent=new Intent(this,SplashActivity.class);  intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  PendingIntent pendingIntent=PendingIntent.getActivity(this,0,intent,PendingIntent.FLAG_ONE_SHOT);  Uri defaultSoundUri=RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);  NotificationCompat.Builder notificationBuilder=new NotificationCompat.Builder(this).setSmallIcon(R.mipmap.ic_launcher).setContentTitle(getString(R.string.app_name)).setContentText(message).setAutoCancel(true).setSound(defaultSoundUri).setContentIntent(pendingIntent);  NotificationManager notificationManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);  notificationManager.notify(0,notificationBuilder.build());}  }
class C{  public Attachment(String formatType,File file) throws IOException {  super(file);  setFormatType(formatType);}  }
class C{  public int lineLength(int line) throws IllegalArgumentException {  if (textLength == 0) {    return 0;  }  if (lineOutOfRange(line)) {    throw new IllegalArgumentException("line out of bounds");  }  if (line == nlOffsets.length - 1 && !finalNL) {    return textLength - nlOffsets[line - 1];  }  return (nlOffsets[line] - nlOffsets[line - 1]) - 1;}  }
class C{  public <T extends DataObject>Joiner join(String joinToAlias,String joinToField,Class<T> clazz,String alias){  JClass jc=new JClass(clazz,alias,jClasses.size());  jc.setJoinToAlias(joinToAlias);  jc.setJoinToField(joinToField);  jClasses.add(jc);  lastJClass=jc;  aliasMap.put(alias,jc);  return this;}  }
class C{  public void encode(OutputStream out) throws IOException {  DerOutputStream tmp=new DerOutputStream();  if (extensionValue == null) {    extensionId=PKIXExtensions.SubjectKey_Id;    critical=false;    encodeThis();  }  super.encode(tmp);  out.write(tmp.toByteArray());}  }
class C{  public com.wipro.ats.bdre.imcrawler.mr.Contents.Builder clearParentUrl(){  parentUrl=null;  fieldSetFlags()[5]=false;  return this;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private DualPivotQuicksort(){}  }
class C{  public void commit(byte[] buf,int bufOffset,int bufLen,int timeout) throws InterruptedException, GondolaException, TimeoutException {  ccmd.commit(buf,bufOffset,bufLen,timeout);}  }
class C{  synchronized public void shutdown(){  if (log.isInfoEnabled())   log.info("begin");  if (abstractTransactionService != null) {    abstractTransactionService.shutdown();  }  for (int i=0; i < dataService.length; i++) {    if (dataService[i] != null) {      dataService[i].shutdown();    }  }  if (metadataService != null) {    metadataService.shutdown();  }  if (loadBalancerService != null) {    loadBalancerService.shutdown();  }  super.shutdown();  if (log.isInfoEnabled())   log.info("done");}  }
class C{  private void linearScanBatchKNN(ArrayDBIDs ids,List<KNNHeap> heaps){  for (DBIDIter iter=relation.getDBIDs().iter(); iter.valid(); iter.advance()) {    int index=0;    for (DBIDIter iter2=ids.iter(); iter2.valid(); iter2.advance()) {      KNNHeap heap=heaps.get(index);      heap.insert(distanceQuery.distance(iter2,iter),iter);      index++;    }  }}  }
class C{  protected final void deserialize(ObjectInputStream ois,Collection coll) throws IOException, ClassNotFoundException {  int count=0;  count=ois.readInt();  while (count-- > 0) {    coll.add(ois.readObject());  }}  }
class C{  public HeapRowIterator(final String table,final Pattern pattern) throws IOException {  this.whereColumn=null;  this.whereValue=null;  this.wherePattern=pattern == null || pattern.toString().isEmpty() ? null : pattern;  final BEncodedHeap heap=getHeap(table);  this.i=heap.iterator();}  }
class C{  protected Anonymous_linkingOp_1_Impl(){  super();}  }
class C{  protected static void deleteFiles(){  for (int i=0; i < 4; i++) {    File[] files=dirs[i].listFiles();    if (files != null) {      for (int j=0; j < files.length; j++) {        files[j].delete();      }    }  }}  }
class C{  @Override public void processRow(ResultSet resultSet) throws SQLException {  String upi=resultSet.getString(1);  String sequence=resultSet.getString(2);  if (sequence == null || sequence.length() == 0) {    sequence=resultSet.getString(3);  }  if (sequence == null) {    throw new IllegalArgumentException("Ugh - found a UPI with no associated sequence!");  }  sequenceLoader.store(sequence,null,upi);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean put(String columnIdentifier,Cacheable cacheInfo,long requiredSize){  boolean columnKeyAddedSuccessfully=false;  if (freeMemorySizeForAddingCache(requiredSize)) {synchronized (lruCacheMap) {      currentSize=currentSize + requiredSize;      if (null == lruCacheMap.get(columnIdentifier)) {        lruCacheMap.put(columnIdentifier,cacheInfo);      }      columnKeyAddedSuccessfully=true;    }    LOGGER.debug("Added level entry to InMemory level lru cache :: " + columnIdentifier);  } else {    LOGGER.error("Size not available. Column cannot be added to level lru cache :: " + columnIdentifier + " .Required Size = "+ requiredSize+ " Size available "+ (lruCacheMemorySize - currentSize));  }  return columnKeyAddedSuccessfully;}  }
class C{  public void testKnownUsersLoadedEvent_UpdatesUi() throws Exception {  mController.init();  JsonUser user=new JsonUser("idA","nameA");  mFakeEventBus.post(new KnownUsersLoadedEvent(ImmutableSet.of(user)));  verify(mMockFragmentUi).showUsers(ImmutableList.of(user));}  }
class C{  public CompanyPrivilegeObject(){  super();}  }
class C{  @Override public int compareTo(Object o){  return 0;}  }
class C{  public static <T>T median(final Comparator<T> comparator,final T... items){  Validate.notEmpty(items,"null/empty items");  Validate.noNullElements(items);  Validate.notNull(comparator,"null comparator");  final TreeSet<T> sort=new TreeSet<T>(comparator);  Collections.addAll(sort,items);  @SuppressWarnings("unchecked") final T result=(T)sort.toArray()[(sort.size() - 1) / 2];  return result;}  }
class C{  public void populateStdCmdLineOptions(CmdLineOptions options) throws OpenStegoException {  options.add("-b","--maxBitsUsedPerChannel",CmdLineOption.TYPE_OPTION,true);}  }
class C{  @Override public String toString(){  return "Value: " + getValue() + " Hidden: "+ isHidden();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:07.643 -0500",hash_original_method="69EBEFD820D698F0EA00B7F4C8854ABB",hash_generated_method="CB21E98A2D5462330CE1379FB39264CC") public final boolean isFilterBitmap(){  return 1 == ((getFlags() & FILTER_BITMAP_FLAG) + 0);}  }
class C{  protected void processReturnInsertAndUpdate(){  processReturnInsert();  processReturnUpdate();}  }
class C{  private void analize(){  StringTokenizer tokenizer=new StringTokenizer(sourceData,",");  String nextToken=null;  id=Integer.parseInt(tokenizer.nextToken());  l=Integer.parseInt(tokenizer.nextToken());  t=Integer.parseInt(tokenizer.nextToken());  r=Integer.parseInt(tokenizer.nextToken());  b=Integer.parseInt(tokenizer.nextToken());  style=Integer.parseInt(tokenizer.nextToken());  classId=Integer.parseInt(tokenizer.nextToken());  text="";  boolean include=false;  do {    nextToken=tokenizer.nextToken();    if (nextToken.startsWith("\"") && nextToken.endsWith("\"")) {      text=text + nextToken.substring(1,nextToken.length() - 1);    } else     if (nextToken.startsWith("\"")) {      text=text + nextToken.substring(1,nextToken.length());      include=true;    } else     if (nextToken.endsWith("\"")) {      text=text + nextToken.substring(0,nextToken.length() - 1);    } else {      text=text + nextToken;      include=true;    }    if (include) {      text=text + ",";      include=false;    }  } while (!nextToken.endsWith("\""));  nextToken=tokenizer.nextToken();  fontName=nextToken.substring(1,nextToken.length() - 1);  fontSize=Integer.parseInt(tokenizer.nextToken());  fontEnh=Integer.parseInt(tokenizer.nextToken());  fontColor=Integer.parseInt(tokenizer.nextToken());  role=Integer.parseInt(tokenizer.nextToken());  fldId=Integer.parseInt(tokenizer.nextToken());  nextToken=tokenizer.nextToken();  name=nextToken.substring(1,nextToken.length() - 1);  nextToken=tokenizer.nextToken();  info=nextToken.substring(1,nextToken.length() - 1);}  }
class C{  public void addField(String name,Object value){  addField(name,value,1.0f);}  }
class C{  public AssertionError(int detailMessage){  this(String.valueOf(detailMessage));}  }
class C{  public boolean hasDeleted(){  return hasExtension(Deleted.class);}  }
class C{  public LuaTable toTable(){  LuaTable result=new LuaTable();  result.set("data",new UDData(getGlobals(),getmetatable(),null).append(mData));  result.set("code",LuaValue.valueOf(mStatusCode));  result.set("header",LuaUtil.toTable(mHeaders));  result.set("message",LuaValue.valueOf(mResponseMsg));  return result;}  }
class C{  private static boolean isError(String text){  for (  String indicator : ERROR_INDICATORS) {    if (text.trim().toLowerCase().startsWith(indicator.toLowerCase())) {      return true;    }  }  return false;}  }
class C{  protected void recursiveNestedJoin(EventBean lookupEvent,int nestingOrderIndex,EventBean[] currentPath,Collection<EventBean[]> result,ExprEvaluatorContext exprEvaluatorContext){  List<EventBean[]> nestedResult=new LinkedList<EventBean[]>();  ExecNode nestedExecNode=childNodes.get(nestingOrderIndex);  nestedExecNode.process(lookupEvent,currentPath,nestedResult,exprEvaluatorContext);  boolean isLastStream=(nestingOrderIndex == nestingOrderLength - 1);  if (!isLastStream) {    for (    EventBean[] row : nestedResult) {      EventBean lookup=row[nestedStreams[nestingOrderIndex]];      recursiveNestedJoin(lookup,nestingOrderIndex + 1,row,result,exprEvaluatorContext);    }    return;  }  for (  EventBean[] row : nestedResult) {    result.add(row);  }}  }
class C{  public Aggregator createAggregator(){  AggregatorImpl aggregator=new AggregatorImpl();  return aggregator;}  }
class C{  public boolean containsKey(E key){  return entries.containsKey(key);}  }
class C{  public void push(ICalComponent component){  components.add(component);}  }
class C{  @RequestMapping(value="/",method=RequestMethod.GET) public String webssoRootPageEntry(Locale locale,Model model,HttpServletRequest request,HttpServletResponse response) throws IOException {  logger.info("Welcome to webssoRootPage handler! ");  return "index";}  }
class C{  public static char[] toCharArray(InputStream is,Charset encoding) throws IOException {  CharArrayWriter output=new CharArrayWriter();  copy(is,output,encoding);  return output.toCharArray();}  }
class C{  private void tryAgain(){  if (Constants.AUTO_ENROLLMENT_BACKGROUND_SERVICE_ENABLED == false) {    Intent intent=new Intent(AuthenticationErrorActivity.this,AuthenticationActivity.class);    intent.putExtra(getResources().getString(R.string.intent_extra_from_activity),AuthenticationActivity.class.getSimpleName());    intent.putExtra(getResources().getString(R.string.intent_extra_regid),registrationId);    intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);    startActivity(intent);    finish();  }}  }
class C{  public CoordinateList(Coordinate[] coord,boolean allowRepeated){  ensureCapacity(coord.length);  add(coord,allowRepeated);}  }
class C{  public static boolean testLineSegmentTriangle(double p0X,double p0Y,double p0Z,double p1X,double p1Y,double p1Z,double v0X,double v0Y,double v0Z,double v1X,double v1Y,double v1Z,double v2X,double v2Y,double v2Z,double epsilon){  double dirX=p1X - p0X;  double dirY=p1Y - p0Y;  double dirZ=p1Z - p0Z;  double t=intersectRayTriangle(p0X,p0Y,p0Z,dirX,dirY,dirZ,v0X,v0Y,v0Z,v1X,v1Y,v1Z,v2X,v2Y,v2Z,epsilon);  return t >= 0.0 && t <= 1.0;}  }
class C{  public static void write(String data,Writer output) throws IOException {  if (data != null) {    output.write(data);  }}  }
class C{  public MultiInstanceofPredicate(Class[] typesToCheck){  _typesToCheck=typesToCheck;}  }
class C{  public void addDecorator(DayViewDecorator decorator){  if (decorator == null) {    return;  }  dayViewDecorators.add(decorator);  adapter.setDecorators(dayViewDecorators);}  }
class C{  public boolean canAddPatchSet(ReviewDb db) throws OrmException {  if (!getRefControl().canUpload() || isPatchSetLocked(db) || !isPatchVisible(patchSetUtil.current(db,notes),db)) {    return false;  }  if (isOwner()) {    return true;  }  return getRefControl().canAddPatchSet();}  }
class C{  public void decrementValue(int row,int column,double value){  if (saveChanges && column >= 0 && column < this.numberColumns && row >= 0 && row < this.numberRows) {    long cellNum=(long)(row) * numberColumns + column;    if ((cellNum > blockEndingCell) || (cellNum < blockStartingCell)) {      if (isDirty) {        writeDataBlock();      }      numReads++;      if (previousRow < row) {        if (currentReadDirection == -1) {          currentReadDirection=0;        }        if (currentReadDirection != 0) {          currentReadDirection=0;          numSwitchReadDirections++;          switchRatio=(double)numSwitchReadDirections / numReads;        }        blockStartingCell=(long)(cellNum - halfBlockSize * switchRatio);      } else {        if (currentReadDirection == -1) {          currentReadDirection=1;        }        if (currentReadDirection != 1) {          currentReadDirection=1;          numSwitchReadDirections++;          switchRatio=(double)numSwitchReadDirections / numReads;        }        blockStartingCell=(long)(cellNum - (blockSize - (switchRatio * halfBlockSize)));      }      previousRow=row;      if (blockStartingCell < 0) {        blockStartingCell=0;      }      readDataBlock();    }    grid[(int)(cellNum - blockStartingCell)]-=value;    isDirty=true;  }}  }
class C{  public boolean isDebugEnabled(){  return isLoggable(Log.DEBUG);}  }
class C{  public void offset(float dx,float dy){  left+=dx;  top+=dy;  right+=dx;  bottom+=dy;}  }
class C{  public void tryToResume() throws IOException {  if (mJournalFile.exists()) {    try {      readJournal();      processJournal();      mJournalWriter=new BufferedWriter(new FileWriter(mJournalFile,true),IO_BUFFER_SIZE);      if (SimpleDiskLruCache.DEBUG) {        CLog.d(SimpleDiskLruCache.LOG_TAG,"open success");      }    } catch (    IOException journalIsCorrupt) {      journalIsCorrupt.printStackTrace();      if (SimpleDiskLruCache.DEBUG) {        CLog.d(SimpleDiskLruCache.LOG_TAG,"clear old cache");      }      clear();    }  } else {    if (SimpleDiskLruCache.DEBUG) {      CLog.d(SimpleDiskLruCache.LOG_TAG,"create new cache");    }    if (mDirectory.exists()) {      mDirectory.delete();    }    mDirectory.mkdirs();    rebuildJournal();  }}  }
class C{  private Method mergeWith(Method other){  if (!getName().equals(other.getName()) || !getType().equals(other.getType())) {    throw new Error("attempt to merge method \"" + other.getNameAndDescriptor() + "\" with \""+ getNameAndDescriptor());  }  Vector<ClassDeclaration> legalExceptions=new Vector<ClassDeclaration>();  try {    collectCompatibleExceptions(other.exceptions,exceptions,legalExceptions);    collectCompatibleExceptions(exceptions,other.exceptions,legalExceptions);  } catch (  ClassNotFound e) {    env.error(0,"class.not.found",e.name,getClassDefinition().getName());    return null;  }  Method merged=(Method)clone();  merged.exceptions=new ClassDeclaration[legalExceptions.size()];  legalExceptions.copyInto(merged.exceptions);  return merged;}  }
class C{  @Override protected void onScreenTurnedOn(){  mImageView.startAnimation(mPulseAnimation);}  }
class C{  @Override public void respond(String response){  getChannel().send().message(getUser(),response);}  }
class C{  @Override public boolean performOk(){  reportConfigurationTab.performOk();  boolean analysisSettingsChanged=false;  boolean reporterSettingsChanged=false;  boolean needRedisplayMarkers=false;  if (workspaceSettingsTab != null) {    workspaceSettingsTab.performOK();  }  IProject eclipseProj=getProject();  if (eclipseProj != null) {    CloudPlugin item=clouds.get(cloudCombo.getSelectionIndex());    if (item != null) {      currentUserPreferences.setCloudId(item.getId());      SortedBugCollection collection=FindbugsPlugin.getBugCollectionIfSet(eclipseProj);      if (collection != null) {        Project fbProject=collection.getProject();        if (fbProject != null && !item.getId().equals(fbProject.getCloudId())) {          fbProject.setCloudId(item.getId());          collection.reinitializeCloud();          IWorkbenchPage page=FindbugsPlugin.getActiveWorkbenchWindow().getActivePage();          if (page != null) {            IViewPart view=page.findView(FindbugsPlugin.TREE_VIEW_ID);            if (view instanceof CommonNavigator) {              CommonNavigator nav=((CommonNavigator)view);              nav.getCommonViewer().refresh(true);            }          }        }      }    }  }  boolean pluginsChanged=false;  if (!currentUserPreferences.equals(origUserPreferences)) {    pluginsChanged=!currentUserPreferences.getCustomPlugins().equals(origUserPreferences.getCustomPlugins());    if (getProject() == null || enableProjectCheck.getSelection()) {      try {        FindbugsPlugin.saveUserPreferences(getProject(),currentUserPreferences);      } catch (      CoreException e) {        FindbugsPlugin.getDefault().logException(e,"Could not store FindBugs preferences for project");      }    }    if (pluginsChanged) {      FindbugsPlugin.applyCustomDetectors(true);    }  }  analysisSettingsChanged=pluginsChanged || areAnalysisPrefsChanged(currentUserPreferences,origUserPreferences);  reporterSettingsChanged=!currentUserPreferences.getFilterSettings().equals(origUserPreferences.getFilterSettings());  boolean markerSeveritiesChanged=reportConfigurationTab.isMarkerSeveritiesChanged();  needRedisplayMarkers=pluginsChanged || markerSeveritiesChanged || reporterSettingsChanged;  boolean builderEnabled=false;  if (getProject() != null) {    builderEnabled=chkEnableFindBugs.getSelection();    if (!natureEnabled && builderEnabled) {      addNature();    } else     if (natureEnabled && !builderEnabled) {      removeNature();    }    builderEnabled&=chkRunAtFullBuild.getSelection();    boolean newSelection=enableProjectCheck.getSelection();    if (projectPropsInitiallyEnabled != newSelection) {      analysisSettingsChanged=true;      FindbugsPlugin.setProjectSettingsEnabled(project,projectStore,newSelection);    }  }  if (analysisSettingsChanged) {    if (builderEnabled) {      runFindbugsBuilder();      needRedisplayMarkers=false;    } else {      if (!getPreferenceStore().getBoolean(FindBugsConstants.DONT_REMIND_ABOUT_FULL_BUILD)) {        remindAboutFullBuild();      }    }  }  if (needRedisplayMarkers) {    redisplayMarkers();  }  return true;}  }
class C{  static <V,A>void invokeUnchecked(PendingFuture<V,A> future){  assert future.isDone();  CompletionHandler<V,? super A> handler=future.handler();  if (handler != null) {    invokeUnchecked(handler,future.attachment(),future.value(),future.exception());  }}  }
class C{  public void addPaneMenuButton(@NotNull EditorPaneMenu editorPaneMenu){  this.editorPaneMenu=editorPaneMenu;  tabsPanel.add(editorPaneMenu);}  }
class C{  public int numberOfRunningActions(CCNode target){  HashElement element=targets.get(target);  if (element != null) {synchronized (element.actions) {      return element.actions.size();    }  }  return 0;}  }
class C{  @AfterMethod(alwaysRun=true) public void recoveryScenario(ITestResult rs) throws Throwable {  if (rs.getStatus() == 2) {    Reporter.log("Failed Test: " + rs.getTestName());  }}  }
class C{  public ChangeMessageVisibilityBatchResult changeMessageVisibilityBatch(ChangeMessageVisibilityBatchRequest changeMessageVisibilityBatchRequest) throws AmazonServiceException, AmazonClientException {  return amazonSqsToBeExtended.changeMessageVisibilityBatch(changeMessageVisibilityBatchRequest);}  }
class C{  public CoalescentSimulator(){}  }
class C{  private void parseLine(){  String value=reader.getAttributeValue(null,X1_ATTRIBUTE);  final double x1=parseNumber(value);  value=reader.getAttributeValue(null,Y1_ATTRIBUTE);  final double y1=parseNumber(value);  value=reader.getAttributeValue(null,X2_ATTRIBUTE);  final double x2=parseNumber(value);  value=reader.getAttributeValue(null,Y2_ATTRIBUTE);  final double y2=parseNumber(value);  IGeometric2D line=new Line2D(x1,y1,x2,y2).transform(currentMatrix);  shapes.add(line);}  }
class C{  public Shape transform(Shape shape){  return transform(shape,0);}  }
class C{  private String generateVersion(){  return "spec_version_" + System.currentTimeMillis();}  }
class C{  public static void deleteFiles(File[] files,boolean wait){  FileDeleteTask task=new FileDeleteTask(files);  if (wait)   task.run(); else {    Thread t=new Thread(task);    t.start();  }}  }
class C{  public <A,B,C,D,V>V provideSingleton(Class<V> desiredObjectClass,A a,B b,C c,D d){  return providerHelper(desiredObjectClass,createProvider(Shank.getFactory(desiredObjectClass,name),a,b,c,d));}  }
class C{  public synchronized void close(){  if (!closed) {    clientSocket.close();    closed=true;  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static final byte[] decode(byte[] base64) throws Base64DecodingException {  return decodeInternal(base64,-1);}  }
class C{  @Nullable public static PsiFile findRelativeFile(PsiFile start,String relativePath){  PsiDirectory startDirectory=BashPsiUtils.findFileContext(start).getContainingDirectory();  if (startDirectory == null || StringUtil.isEmptyOrSpaces(relativePath)) {    return null;  }  PsiDirectory currentDir=startDirectory;  List<String> parts=StringUtil.split(relativePath,"/");  String filePart=parts.size() > 0 ? parts.get(parts.size() - 1) : "";  for (int i=0, partsLength=parts.size() - 1; (i < partsLength) && (currentDir != null); i++) {    String part=parts.get(i);    if (".".equals(part)) {    } else     if ("..".equals(part)) {      currentDir=currentDir.getParentDirectory();    } else {      currentDir=currentDir.findSubdirectory(part);    }  }  if (currentDir != null) {    return currentDir.findFile(filePart);  }  return null;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  private void readFromResources(){  final InputStream str=WordList.class.getResourceAsStream(WORDS_FILENAME);  if (str != null) {    try {      final BufferedReader reader=new BufferedReader(new UnicodeSupportingInputStreamReader(str,"UTF-8"));      try {        read(reader,null);      } catch (      final IOException e) {        logger.error("error while reading resource file '" + WORDS_FILENAME + "'",e);      } finally {        try {          reader.close();        } catch (        IOException e) {          logger.error("error while closing reader stream for '" + WORDS_FILENAME + "'",e);        }      }    }  finally {      try {        str.close();      } catch (      IOException e) {        logger.warn("exception on closing resource stream",e);      }    }  } else {    logger.error("unable to locate resource file '" + WORDS_FILENAME + "'");  }}  }
class C{  public static void openAlertDialog(String messageKey){  MessageBox box=new MessageBox(Display.getCurrent().getActiveShell(),SWT.NULL | SWT.ICON_ERROR);  box.setMessage(DBPlugin.getResourceString(messageKey));  box.setText(DBPlugin.getResourceString("dialog.alert.title"));  box.open();}  }
class C{  public void testInForkJoinPool(){  testInForkJoinPool(mainPool());}  }
class C{  public AnnotationModelEvent(AnnotationModel model){  this.annotationModel=model;}  }
class C{  public ElasticsearchHistory(){}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writePaint(this.rosePaint,stream);  SerialUtilities.writePaint(this.roseCenterPaint,stream);  SerialUtilities.writePaint(this.roseHighlightPaint,stream);}  }
class C{  public JSONWriter(Writer w){  this.comma=false;  this.mode='i';  this.stack=new JSONObject[maxdepth];  this.top=0;  this.writer=w;}  }
class C{  public TrendView(Context context){  super(context);  this.initialize();}  }
class C{  public void remove(boolean priority,Marker m){  lock.lock();  sendEmptyMessage(BLANK);  if (priority) {    mOnScreenRemoveMarkerTasks.add(m);  } else {    mRemoveMarkerTasks.add(m);  }  lock.unlock();}  }
class C{  private void enrichMapWithCustomer(final Map<String,Object> map){  map.put(CUSTOMER,customerService.getCustomerByEmail((String)map.get(CUSTOMER_EMAIL),(Shop)map.get(SHOP)));}  }
class C{  @Override public void rollback(Savepoint savepoint) throws SQLException {  try {    JdbcSavepoint sp=convertSavepoint(savepoint);    debugCode("rollback(" + sp.getTraceObjectName() + ");");    checkClosedForWrite();    try {      sp.rollback();    }  finally {      afterWriting();    }  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static int ESRCH(){  return Errno.ESRCH.intValue();}  }
class C{  protected BlockItemMetaBuilder(final BlockItemMeta meta){  this.meta=meta.clone();}  }
class C{  public void showZoomRectangle(double x,double y,double w,double h){  this.zoomRectangle.setX(x);  this.zoomRectangle.setY(y);  this.zoomRectangle.setWidth(w);  this.zoomRectangle.setHeight(h);  this.zoomRectangle.setVisible(true);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.553 -0400",hash_original_method="7C746AA13415E8E0AE7778068EA348B5",hash_generated_method="833FB290FD68776643CC40816924356F") public static Tailer create(File file,TailerListener listener,long delayMillis,boolean end,boolean reOpen){  return create(file,listener,delayMillis,end,reOpen,DEFAULT_BUFSIZE);}  }
class C{  private void createBlockSnapshotData(String name,int numSnapshots) throws Exception {  Volume volume=new Volume();  URI volumeURI=URIUtil.createId(Volume.class);  testVolumeURIs.add(volumeURI);  volume.setId(volumeURI);  String volName="snapVolume";  volume.setLabel(volName);  URI cgUri=createBlockConsistencyGroup(volName + "-cg");  volume.setConsistencyGroup(cgUri);  _dbClient.createObject(volume);  for (int i=1; i <= numSnapshots; i++) {    BlockSnapshot blockSnapshot=new BlockSnapshot();    URI blockSnapshotURI=URIUtil.createId(BlockSnapshot.class);    testBlockSnapshotURIs.add(blockSnapshotURI);    blockSnapshot.setId(blockSnapshotURI);    blockSnapshot.setLabel(name + i);    blockSnapshot.setSnapsetLabel(name + i);    blockSnapshot.setParent(new NamedURI(volume.getId(),name + i));    blockSnapshot.setConsistencyGroup(cgUri);    _dbClient.createObject(blockSnapshot);    BlockSnapshot querySnap=_dbClient.queryObject(BlockSnapshot.class,blockSnapshotURI);  }}  }
class C{  public void ruleR5(Graph graph){  List<Node> nodes=graph.getNodes();  for (  Node a : nodes) {    List<Node> adjacents=graph.getNodesInTo(a,Endpoint.CIRCLE);    for (    Node b : adjacents) {      if (!(graph.getEndpoint(a,b) == Endpoint.CIRCLE))       continue;      List<List<Node>> ucCirclePaths=getUcCirclePaths(a,b,graph);      for (      List<Node> u : ucCirclePaths) {        if (u.size() < 3)         continue;        Node c=u.get(1);        Node d=u.get(u.size() - 2);        if (graph.isAdjacentTo(a,d))         continue;        if (graph.isAdjacentTo(b,c))         continue;        logger.log("colliderOrientations",SearchLogUtils.edgeOrientedMsg("Orient circle path",graph.getEdge(a,b)));        graph.setEndpoint(a,b,Endpoint.TAIL);        graph.setEndpoint(b,a,Endpoint.TAIL);        orientTailPath(u,graph);        changeFlag=true;      }    }  }}  }
class C{  public MqttCallbackHandler(Context context,String clientHandle){  this.context=context;  this.clientHandle=clientHandle;}  }
class C{  @DSComment("OS Bundle data structure") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:36.471 -0500",hash_original_method="1F6C5CEB9374270482ED4835594D6EF1",hash_generated_method="877978322BA244A0BEA7112AEE13C2F5") public void putDouble(String key,double value){  unparcel();  mMap.put(key,value);}  }
class C{  public void singleStep() throws DebugException {  try {    m_debugger.singleStep();  } catch (  final DebugExceptionWrapper e) {    throw new DebugException(e);  }}  }
class C{  ObjectCell(HeapVariable<?> key){  this.key=key;}  }
class C{  protected void addModule(Map<Class<? extends IFloodlightService>,IFloodlightModule> moduleMap,Collection<IFloodlightModule> moduleList,IFloodlightModule module){  Collection<Class<? extends IFloodlightService>> servs=moduleServiceMap.get(module);  if (servs != null) {    for (    Class<? extends IFloodlightService> c : servs)     moduleMap.put(c,module);  }  moduleList.add(module);}  }
class C{  @DSSpec(DSCat.IO) @DSSource({DSSourceKind.IO}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.706 -0400",hash_original_method="7FDC5668BF104D2F1DB6279D6F3A1179",hash_generated_method="CC33DED15C24FA1F452C35E7A89F47AC") @Override public int read(){  return -1;}  }
class C{  public static RecyclerViewHeader fromXml(Context context,@LayoutRes int layoutRes){  RecyclerViewHeader header=new RecyclerViewHeader(context);  View.inflate(context,layoutRes,header);  return header;}  }
class C{  public void write(byte b[],int off,int len) throws IOException {  out.write(b,off,len);  md5.Update(b,off,len);}  }
class C{  @SuppressLint("Override") public static String normalizeNumber(String phoneNumber){  StringBuilder sb=new StringBuilder();  int len=phoneNumber.length();  for (int i=0; i < len; i++) {    char c=phoneNumber.charAt(i);    int digit=Character.digit(c,10);    if (digit != -1) {      sb.append(digit);    } else     if (i == 0 && c == '+') {      sb.append(c);    } else     if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {      return normalizeNumber(PhoneNumberUtils.convertKeypadLettersToDigits(phoneNumber));    }  }  return sb.toString();}  }
class C{  private void drawResultPoints(Bitmap barcode,float scaleFactor,Result rawResult){  ResultPoint[] points=rawResult.getResultPoints();  if (points != null && points.length > 0) {    Canvas canvas=new Canvas(barcode);    Paint paint=new Paint();    paint.setColor(ContextCompat.getColor(this,R.color.result_points));    if (points.length == 2) {      paint.setStrokeWidth(4.0f);      drawLine(canvas,paint,points[0],points[1],scaleFactor);    } else     if (points.length == 4 && (rawResult.getBarcodeFormat() == BarcodeFormat.UPC_A || rawResult.getBarcodeFormat() == BarcodeFormat.EAN_13)) {      drawLine(canvas,paint,points[0],points[1],scaleFactor);      drawLine(canvas,paint,points[2],points[3],scaleFactor);    } else {      paint.setStrokeWidth(10.0f);      for (      ResultPoint point : points) {        if (point != null) {          canvas.drawPoint(scaleFactor * point.getX(),scaleFactor * point.getY(),paint);        }      }    }  }}  }
class C{  private void loadNumericSettings(){  for (  String settingName : longSettings.keySet()) {    LongSetting setting=longSettings.get(settingName);    Long value=settings.getLong(settingName);    setting.setSettingValue(value);  }}  }
class C{  @ReactMethod public void canShow(Promise promise){  promise.resolve(JoinAppGroupDialog.canShow());}  }
class C{  public AWindow find(int AD_Window_ID){  for (  CFrame w : windows) {    if (w instanceof AWindow) {      AWindow a=(AWindow)w;      if (a.getAD_Window_ID() == AD_Window_ID)       return a;    }  }  return null;}  }
class C{  public String toPattern(){  return toPattern(false);}  }
class C{  public static List<Long> tietjenMooreTest(GeoTimeSerie gts,int k,boolean useMedian,double alpha) throws WarpScriptException {  doubleCheck(gts);  List<Long> anomalous_ticks=new ArrayList<Long>();  if (true)   throw new WarpScriptException("tietjenMooreTest: Work in Progress. Consider using ESDTest instead.");  return anomalous_ticks;}  }
class C{  public final Key unwrap(byte[] wrappedKey,String wrappedKeyAlgorithm,int wrappedKeyType) throws InvalidKeyException, NoSuchAlgorithmException {  if (mode != UNWRAP_MODE) {    throw new IllegalStateException();  }  return spiImpl.engineUnwrap(wrappedKey,wrappedKeyAlgorithm,wrappedKeyType);}  }
class C{  public FieldInfo(ConstPool cp,String fieldName,String desc){  this(cp);  name=cp.addUtf8Info(fieldName);  cachedName=fieldName;  descriptor=cp.addUtf8Info(desc);}  }
class C{  @Override void lockedQuery(Object key,int operator,Collection results,Set keysToRemove,ExecutionContext context) throws TypeMismatchException {  int limit=-1;  Boolean orderByClause=(Boolean)context.cacheGet(CompiledValue.CAN_APPLY_ORDER_BY_AT_INDEX);  boolean asc=true;  List orderByAttrs=null;  boolean multiColOrderBy=false;  if (orderByClause != null && orderByClause.booleanValue()) {    orderByAttrs=(List)context.cacheGet(CompiledValue.ORDERBY_ATTRIB);    CompiledSortCriterion csc=(CompiledSortCriterion)orderByAttrs.get(0);    asc=!csc.getCriterion();    multiColOrderBy=orderByAttrs.size() > 1;  }  limit=multiColOrderBy ? -1 : limit;  if (key == null) {switch (operator) {case OQLLexerTokenTypes.TOK_EQ:{        nullMappedEntries.addValuesToCollection(results,limit,context);        break;      }case OQLLexerTokenTypes.TOK_NE_ALT:case OQLLexerTokenTypes.TOK_NE:{      NavigableMap sm=this.valueToEntriesMap;      if (!asc) {        sm=sm.descendingMap();      }      addValuesToResult(sm,results,keysToRemove,limit,context);      undefinedMappedEntries.addValuesToCollection(results,limit,context);      break;    }default :{    throw new IllegalArgumentException(LocalizedStrings.RangeIndex_INVALID_OPERATOR.toLocalizedString());  }}} else if (key == QueryService.UNDEFINED) {switch (operator) {case OQLLexerTokenTypes.TOK_EQ:{  undefinedMappedEntries.addValuesToCollection(results,limit,context);  break;}case OQLLexerTokenTypes.TOK_NE:case OQLLexerTokenTypes.TOK_NE_ALT:{NavigableMap sm=this.valueToEntriesMap.headMap(key,false);sm=asc ? sm : sm.descendingMap();addValuesToResult(sm,results,keysToRemove,limit,context);nullMappedEntries.addValuesToCollection(results,limit,context);break;}default :{throw new IllegalArgumentException(LocalizedStrings.RangeIndex_INVALID_OPERATOR.toLocalizedString());}}} else {if (isEmpty()) {return;}key=getPdxStringForIndexedPdxKeys(key);evaluate(key,operator,results,keysToRemove,limit,context);}}  }
class C{  public Rest sslVerification(final Boolean sslVerification){  this.sslVerification=sslVerification;  return this;}  }
class C{  public void doneWaiting(){  ControllerMemory.incrementNumAwoken();}  }
class C{  @CanIgnoreReturnValue public final double addAndGet(double delta){  while (true) {    long current=value;    double currentVal=longBitsToDouble(current);    double nextVal=currentVal + delta;    long next=doubleToRawLongBits(nextVal);    if (updater.compareAndSet(this,current,next)) {      return nextVal;    }  }}  }
class C{  public void saveToGeode(String regionPath,Properties opConf){  rddf.saveToGeode(regionPath,rddf.defaultConnectionConf(),propertiesToScalaMap(opConf));}  }
class C{  private static boolean isFoo(){  return true;}  }
class C{  private int safelyDeleteArticles(String whereClause,String[] whereArgs){  int deletedCount=0;  Collection<RemoteFile> rfs=getRemoteFilesForArticles(whereClause,whereArgs,true);  if (rfs != null && !rfs.isEmpty()) {    Set<Integer> rfIds=new HashSet<>(rfs.size());    for (    RemoteFile rf : rfs) {      rfIds.add(rf.id);      ImageCache imageCache=Controller.getInstance().getImageCache();      if (imageCache != null) {        File file=imageCache.getCacheFile(rf.url);        boolean deleted=file.delete();        if (!deleted)         Log.e(TAG,"Couldn't delete file: " + file.getAbsolutePath());      }    }    deleteRemoteFiles(rfIds);  }  StringBuilder query=new StringBuilder();  query.append(" articleId IN (").append("	 SELECT _id").append("	   FROM ").append(TABLE_ARTICLES).append("	   WHERE ").append(whereClause).append(" )");  SQLiteDatabase db=getOpenHelper().getWritableDatabase();  write.lock();  try {    db.beginTransaction();    db.delete(TABLE_REMOTEFILE2ARTICLE,query.toString(),whereArgs);    deletedCount=db.delete(TABLE_ARTICLES,whereClause,whereArgs);    purgeLabels();    db.setTransactionSuccessful();  }  finally {    try {      db.endTransaction();    }  finally {      write.unlock();    }  }  return deletedCount;}  }
class C{  @RequestMapping("flush_newest_and_recommended_podcasts_cache") @ResponseStatus(HttpStatus.OK) public void evictStartPagePodcastsCache(){  LOG.info("------ evictStartPagePodcastsCache was called --------");  cacheUpdateService.clearNewestAndRecommendedPodcastsCache();}  }
class C{  public PDFObject cachedDereference() throws IOException {  if (type == INDIRECT) {    PDFObject obj=null;    if (cache != null) {      obj=(PDFObject)cache.get();    }    if (obj == null || obj.value == null) {      if (owner == null) {        System.out.println("Bad seed (owner==null)!  Object=" + this);      }    }    return obj;  } else {    return this;  }}  }
class C{  private HttpCache(Context context,int type){  this(context);  this.type=type;  initData(type);}  }
class C{  public int size(){  return nNodes;}  }
class C{  private boolean checkDisposed(){  return tableViewer.getTable().isDisposed();}  }
class C{  @Override public void flush() throws XMLStreamException {  log.log(Level.FINE,"flush()");  stream.flush();}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SeaGlassFormattedTextFieldUI();}  }
class C{  public void dispose(){  removeListeners();}  }
class C{  @SuppressWarnings("TypeParameterExtendsFinalClass") private static boolean unsafeByteArrayCopyAvailable(){  try {    Class<? extends Unsafe> unsafeCls=Unsafe.class;    unsafeCls.getMethod("copyMemory",Object.class,long.class,Object.class,long.class,long.class);    return true;  } catch (  Exception ignored) {    return false;  }}  }
class C{  public static JSONObject toJSONObject(XMLTokener x) throws JSONException {  return (JSONObject)parse(x,false,null);}  }
class C{  public static <T>BigDecimal sumOfBigDecimal(Iterable<T> iterable,Function<? super T,BigDecimal> function){  if (iterable instanceof List) {    return ListIterate.sumOfBigDecimal((List<T>)iterable,function);  }  if (iterable != null) {    return IterableIterate.sumOfBigDecimal(iterable,function);  }  throw new IllegalArgumentException("Cannot perform an sumOfBigDecimal on null");}  }
class C{  public MBankStatementLoader(Properties ctx,ResultSet rs,String trxName){  super(ctx,rs,trxName);  init(null);}  }
class C{  public static Object mbRandomSample(Node Xi,Map<RandomVariable,Object> event,Randomizer r){  return sample(r.nextDouble(),Xi.getRandomVariable(),mbDistribution(Xi,event));}  }
class C{  public LocalDate roundCeilingCopy(){  return iInstant.withLocalMillis(iField.roundCeiling(iInstant.getLocalMillis()));}  }
class C{  public OptimizedMarshallerAopTest(){  super(false);}  }
class C{  public Script(byte[] programBytes) throws ScriptException {  program=programBytes;  parse(programBytes);  creationTimeSeconds=Utils.currentTimeMillis() / 1000;}  }
class C{  private void updateExportMaskDetailInDB(List<HostStorageDomain> hsdsWithInitiators,List<Path> allHSDPaths,ExportMask exportMask,StorageSystem storage,VolumeURIHLU[] volumeURIHLUs){  StringSetMap deviceDataMap=new StringSetMap();  for (  HostStorageDomain hsd : hsdsWithInitiators) {    StringSet targetPortSet=new StringSet();    List<String> hsdPorts=Arrays.asList(hsd.getPortID());    List<String> targetPortURIs=getStoragePortURIs(hsdPorts,storage);    targetPortSet.addAll(targetPortURIs);    deviceDataMap.put(hsd.getObjectID(),targetPortSet);  }  exportMask.addDeviceDataMap(deviceDataMap);  updateVolumeHLUInfo(volumeURIHLUs,allHSDPaths,exportMask);  dbClient.updateObject(exportMask);  log.info("ExportMask: {} details updated successfully.",exportMask.getId());}  }
class C{  public ParsableByteArray(byte[] data,int limit){  this.data=data;  this.limit=limit;}  }
class C{  final public boolean startsWith(final String prefix){  final int l=prefix.length();  if (l > length())   return false;  int i=l;  final char[] a=array;  while (i-- != 0)   if (prefix.charAt(i) != a[i])   return false;  return true;}  }
class C{  void advanceNextWriteDocValuesGen(){  nextWriteDocValuesGen++;}  }
class C{  public VNXeCommandResult deleteShareForSnapshotSync(String shareId){  VNXeCommandResult result=new VNXeCommandResult();  _url=URL_SHARE + shareId;  if (getShare(shareId) != null) {    unsetQueryParameters();    deleteRequest(null);    result.setSuccess(true);    return result;  } else {    throw VNXeException.exceptions.vnxeCommandFailed("The shareId is not found: " + shareId);  }}  }
class C{  @Override public Object instantiateItem(ViewGroup container,int position){  Object obj=super.instantiateItem(container,position);  if (obj instanceof Fragment) {    Fragment f=(Fragment)obj;    String tag=f.getTag();    fragmentTags.put(position,tag);  }  return obj;}  }
class C{  private void handleActionBaz(String param1,String param2){  throw new UnsupportedOperationException("Not yet implemented");}  }
class C{  public void tagSerialNumber(String serialNumber) throws IOException {  startTag(TAG_SERIALNUMBER,false);  out.writeString(serialNumber);  completeTag();}  }
class C{  public SMIDAS(double eta){  this(eta,DEFAULT_EPOCHS,DEFAULT_REG,DEFAULT_LOSS);}  }
class C{  public void add(char ch){  if (i == b.length) {    char[] new_b=new char[i + INC];    for (int c=0; c < i; c++)     new_b[c]=b[c];    b=new_b;  }  b[i++]=ch;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SexecPackage.TRACE_NODE_EXECUTED__NODE:    return node != null;}return super.eIsSet(featureID);}  }
class C{  public jMatrix solve(jMatrix B){  if (B.getRowDimension() != m) {    throw new IllegalArgumentException("jMatrix row dimensions must agree.");  }  if (!this.isNonsingular()) {    throw new RuntimeException("jMatrix is singular.");  }  int nx=B.getColumnDimension();  jMatrix Xmat=B.getMatrix(piv,0,nx - 1);  double[][] X=Xmat.getArray();  for (int k=0; k < n; k++) {    for (int i=k + 1; i < n; i++) {      for (int j=0; j < nx; j++) {        X[i][j]-=X[k][j] * LU[i][k];      }    }  }  for (int k=n - 1; k >= 0; k--) {    for (int j=0; j < nx; j++) {      X[k][j]/=LU[k][k];    }    for (int i=0; i < k; i++) {      for (int j=0; j < nx; j++) {        X[i][j]-=X[k][j] * LU[i][k];      }    }  }  return Xmat;}  }
class C{  public CSVPrinter(Writer out,CSVStrategy strategy){  this.out=out;  this.strategy=strategy == null ? CSVStrategy.DEFAULT_STRATEGY : strategy;}  }
class C{  @Override public void run(Runnable runnable){  if (!TaskProxy.sDefaultExecutor.isBusy()) {    TaskProxy.sDefaultExecutor.execute(runnable);  } else {    new Thread(runnable).start();  }}  }
class C{  public Company tag(String tag){  this.tag=tag;  return this;}  }
class C{  public static PrivateKeyEntry privateKey(KeyStore keyStore,char[] keyPassword,String keyAlgorithm,String signatureAlgorithm){  try {    PrivateKeyEntry found=null;    PasswordProtection password=new PasswordProtection(keyPassword);    for (    String alias : Collections.list(keyStore.aliases())) {      if (!keyStore.entryInstanceOf(alias,PrivateKeyEntry.class)) {        continue;      }      PrivateKeyEntry privateKey=(PrivateKeyEntry)keyStore.getEntry(alias,password);      if (!privateKey.getPrivateKey().getAlgorithm().equals(keyAlgorithm)) {        continue;      }      X509Certificate certificate=(X509Certificate)privateKey.getCertificate();      if (!certificate.getSigAlgName().contains(signatureAlgorithm)) {        continue;      }      if (found != null) {        throw new IllegalStateException("KeyStore has more than one private key for " + " keyAlgorithm: " + keyAlgorithm + " signatureAlgorithm: "+ signatureAlgorithm+ "\nfirst: "+ found.getPrivateKey()+ "\nsecond: "+ privateKey.getPrivateKey());      }      found=privateKey;    }    if (found == null) {      throw new IllegalStateException("KeyStore contained no private key for " + " keyAlgorithm: " + keyAlgorithm + " signatureAlgorithm: "+ signatureAlgorithm);    }    return found;  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  private static void finalizationConvexHull(DTSweepContext tcx){  AdvancingFrontNode n1, n2;  DelaunayTriangle t1, t2;  TriangulationPoint first, p1;  n1=tcx.aFront.head.next;  n2=n1.next;  first=n1.point;  turnAdvancingFrontConvex(tcx,n1,n2);  n1=tcx.aFront.tail.prev;  if (n1.triangle.contains(n1.next.point) && n1.triangle.contains(n1.prev.point)) {    t1=n1.triangle.neighborAcross(n1.point);    rotateTrianglePair(n1.triangle,n1.point,t1,t1.oppositePoint(n1.triangle,n1.point));    tcx.mapTriangleToNodes(n1.triangle);    tcx.mapTriangleToNodes(t1);  }  n1=tcx.aFront.head.next;  if (n1.triangle.contains(n1.prev.point) && n1.triangle.contains(n1.next.point)) {    t1=n1.triangle.neighborAcross(n1.point);    rotateTrianglePair(n1.triangle,n1.point,t1,t1.oppositePoint(n1.triangle,n1.point));    tcx.mapTriangleToNodes(n1.triangle);    tcx.mapTriangleToNodes(t1);  }  first=tcx.aFront.head.point;  n2=tcx.aFront.tail.prev;  t1=n2.triangle;  p1=n2.point;  n2.triangle=null;  do {    tcx.removeFromList(t1);    p1=t1.pointCCW(p1);    if (p1 == first)     break;    t2=t1.neighborCCW(p1);    t1.clear();    t1=t2;  } while (true);  first=tcx.aFront.head.next.point;  p1=t1.pointCW(tcx.aFront.head.point);  t2=t1.neighborCW(tcx.aFront.head.point);  t1.clear();  t1=t2;  while (p1 != first) {    tcx.removeFromList(t1);    p1=t1.pointCCW(p1);    t2=t1.neighborCCW(p1);    t1.clear();    t1=t2;  }  tcx.aFront.head=tcx.aFront.head.next;  tcx.aFront.head.prev=null;  tcx.aFront.tail=tcx.aFront.tail.prev;  tcx.aFront.tail.next=null;  tcx.finalizeTriangulation();}  }
class C{  static public boolean isEqual(float a,float b){  return Math.abs(a - b) <= FLOAT_ROUNDING_ERROR;}  }
class C{  private Widget newDelimiter(){  FlowPanel delimiter=new FlowPanel();  delimiter.setStyleName(toolbarResources.toolbar().toolbarDelimiter());  return delimiter;}  }
class C{  public void removeLast(){  int last=m_Ruleset.size() - 1;  m_Ruleset.remove(last);  m_Filtered.remove(last);  m_SimpleStats.remove(last);  if (m_Distributions != null) {    m_Distributions.remove(last);  }}  }
class C{  public static int indexOf(@NotNull char[] buffer,final char symbol,int fromIndex,final int toIndex){  if (fromIndex < 0) {    fromIndex=0;  }  for (int i=fromIndex; i < toIndex; i++) {    if (buffer[i] == symbol) {      return i;    }  }  return -1;}  }
class C{  protected int defaultMinRuleSize(){  return 1;}  }
class C{  public AffineTransformation translate(double x,double y){  compose(translationInstance(x,y));  return this;}  }
class C{  public String handlePortNotFound(gnu.io.NoSuchPortException p,String portName,Logger log){  log.error("Serial port " + portName + " not found");  ConnectionStatus.instance().setConnectionState(portName,ConnectionStatus.CONNECTION_DOWN);  return portName + " not found";}  }
class C{  public int fastSkipLenString(){  long len=this.readFieldLength();  this.position+=len;  return (int)len;}  }
class C{  @Override protected void createLabels(){  this.addLabel("PAA");  this.addLabel("PAA");  this.addLabel("PAA");  this.addLabel("PAA");}  }
class C{  public String invocation(){  List<String> adviceArgs=Lists.newArrayList();  List<MultiExportedVariable> multiLiterals=Lists.newArrayList();  for (  ExportedVariable x : methodSpec.getAdviceArgList()) {    if (x.hasLiteral()) {      adviceArgs.add(x.getLiteral());    } else     if (x.hasMulti()) {      String multi_literal=String.format("pivottracing_arg_%d",multiLiterals.size());      multiLiterals.add(x.getMulti());      adviceArgs.add(multi_literal);    }  }  String adviceArgString;  if (methodSpec.getAdviceArgCount() == 0) {    adviceArgString="new Object[0]";  } else {    List<String> boxedArgs=Lists.newArrayList();    for (    String adviceArg : adviceArgs) {      boxedArgs.add(String.format("%s.box(%s)",PrivilegedProxy.class.getName(),adviceArg));    }    adviceArgString=String.format("new Object[] { %s }",StringUtils.join(boxedArgs,", "));  }  String proxyClass=PrivilegedProxy.class.getName();  String invocation=String.format("%s.Advise(%d, %s);",proxyClass,adviceLookupId,adviceArgString);  for (int i=0; i < multiLiterals.size(); i++) {    MultiExportedVariable x=multiLiterals.get(i);    String var=String.format("pivottracing_arg_%s",i);    String var_array=String.format("pivottracing_arg_%s_array",i);    String var_i=var + "_i";    String var_indexed=String.format("((%s)%s[%s])",x.getType(),var_array,var_i);    String var_processed=x.getPostProcess().replace("{}",var_indexed);    String code=StringUtils.join(new String[]{"Object[] %s;","if (((Object)%s) instanceof java.util.Collection) {","   %s = ((java.util.Collection)(Object)%s).toArray();","} else {","   %s = (Object[])(Object)%s;","}","for (int %s = 0; %s < %s.length; %s++) {","   Object %s = %s;",invocation,"}"},"\n");    invocation=String.format(code,var_array,x.getLiteral(),var_array,x.getLiteral(),var_array,x.getLiteral(),var_i,var_i,var_array,var_i,var,var_processed);  }  invocation=StringUtils.join(new String[]{"try {",invocation,"} catch (java.lang.Throwable t) {","}"},"\n");  return invocation;}  }
class C{  public static boolean isVolumeFullCopy(Volume volume,DbClient dbClient){  boolean isFullCopy=false;  URI fcSourceObjURI=volume.getAssociatedSourceVolume();  if (!NullColumnValueGetter.isNullURI(fcSourceObjURI)) {    BlockObject fcSourceObj=BlockObject.fetch(dbClient,fcSourceObjURI);    if ((fcSourceObj != null) && (!fcSourceObj.getInactive())) {      isFullCopy=true;    }  }  return isFullCopy;}  }
class C{  protected void fireChange(CnATreeElement elmt){  if (LOG_INHERIT.isDebug()) {    LOG_INHERIT.debug("fireChange...");  }  elmt.fireIntegritaetChanged(new CascadingTransaction());  elmt.fireVerfuegbarkeitChanged(new CascadingTransaction());  elmt.fireVertraulichkeitChanged(new CascadingTransaction());}  }
class C{  private boolean addResolutionIfSuffix(AST2BOpContext ctx,JoinGroupNode g,String suffix,URI labelType,IVariable<IV> var){  if (!var.getName().endsWith(suffix)) {    return false;  }  String source=var.getName().substring(0,var.getName().length() - suffix.length());  IConstant<IV> labelTypeAsConstant=ctx.getAbstractTripleStore().getVocabulary().getConstant(labelType);  g.addArg(new StatementPatternNode(new VarNode(source),new ConstantNode(labelTypeAsConstant),new VarNode(var)));  return true;}  }
class C{  public static boolean isValidVector(Vector3f vector){  if (vector == null)   return false;  if (Float.isNaN(vector.x) || Float.isNaN(vector.y) || Float.isNaN(vector.z))   return false;  if (Float.isInfinite(vector.x) || Float.isInfinite(vector.y) || Float.isInfinite(vector.z))   return false;  return true;}  }
class C{  private void addTabId(int index,int tabId){  assert tabId != Tab.INVALID_TAB_ID;  if (mTabIdList.contains(tabId))   return;  mTabIdList.add(index,tabId);}  }
class C{  @SuppressWarnings("unused") public void hide(){  hide(MIN_SHOW_TIME);}  }
class C{  public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  DistributionTypeEditForm myForm=(DistributionTypeEditForm)form;  sessionContext.checkPermission(Right.DistributionTypeEdit);  String op=(myForm.getOp() != null ? myForm.getOp() : request.getParameter("op"));  Long sessionId=sessionContext.getUser().getCurrentAcademicSessionId();  if (op == null) {    Long id=new Long(Long.parseLong(request.getParameter("id")));    myForm.setRefTableEntry((new DistributionTypeDAO()).get(id),sessionId);  }  if (request.getParameterValues("depts") != null) {    String[] depts=request.getParameterValues("depts");    for (int i=0; i < depts.length; i++)     myForm.getDepartmentIds().add(new Long(depts[i]));  }  List list=(new DepartmentDAO()).getSession().createCriteria(Department.class).add(Restrictions.eq("session.uniqueId",sessionId)).addOrder(Order.asc("deptCode")).list();  Vector availableDepts=new Vector();  for (Iterator iter=list.iterator(); iter.hasNext(); ) {    Department d=(Department)iter.next();    availableDepts.add(new LabelValueBean(d.getDeptCode() + "-" + d.getName(),d.getUniqueId().toString()));  }  request.setAttribute(Department.DEPT_ATTR_NAME,availableDepts);  if ("Save".equals(op)) {    DistributionTypeDAO dao=new DistributionTypeDAO();    Transaction tx=null;    try {      org.hibernate.Session hibSession=dao.getSession();      if (hibSession.getTransaction() == null || !hibSession.getTransaction().isActive())       tx=hibSession.beginTransaction();      DistributionType distType=dao.get(myForm.getUniqueId());      DistributionType x=(DistributionType)myForm.getRefTableEntry();      distType.setAbbreviation(x.getAbbreviation());      distType.setAllowedPref(x.getAllowedPref());      distType.setDescr(x.getDescr());      distType.setInstructorPref(x.isInstructorPref() == null ? Boolean.FALSE : x.isInstructorPref());      distType.setLabel(x.getLabel());      distType.setVisible(x.isVisible() == null ? Boolean.FALSE : x.isVisible());      HashSet oldDepts=new HashSet(distType.getDepartments());      for (Enumeration e=myForm.getDepartmentIds().elements(); e.hasMoreElements(); ) {        Long departmentId=(Long)e.nextElement();        Department d=(new DepartmentDAO()).get(departmentId,hibSession);        if (d == null)         continue;        if (oldDepts.remove(d)) {        } else {          distType.getDepartments().add(d);        }      }      for (Iterator i=oldDepts.iterator(); i.hasNext(); ) {        Department d=(Department)i.next();        if (!d.getSessionId().equals(sessionId))         continue;        distType.getDepartments().remove(d);      }      hibSession.saveOrUpdate(distType);      ChangeLog.addChange(hibSession,sessionContext,distType,ChangeLog.Source.DIST_TYPE_EDIT,ChangeLog.Operation.UPDATE,null,null);      if (tx != null)       tx.commit();    } catch (    Exception e) {      if (tx != null)       tx.rollback();      throw e;    }    return mapping.findForward("showDistributionTypeList");  }  if ("Back".equals(op)) {    return mapping.findForward("showDistributionTypeList");  }  if ("Add Department".equals(op)) {    ActionMessages errors=new ActionErrors();    if (myForm.getDepartmentId() == null || myForm.getDepartmentId().longValue() < 0)     errors.add("department",new ActionMessage("errors.generic","No department selected.")); else {      boolean contains=myForm.getDepartmentIds().contains(myForm.getDepartmentId());      if (contains)       errors.add("department",new ActionMessage("errors.generic","Department already present in the list of departments."));    }    if (errors.size() > 0) {      saveErrors(request,errors);    } else {      myForm.getDepartmentIds().add(myForm.getDepartmentId());    }  }  if ("Remove Department".equals(op)) {    ActionMessages errors=new ActionErrors();    if (myForm.getDepartmentId() == null || myForm.getDepartmentId().longValue() < 0)     errors.add("department",new ActionMessage("errors.generic","No department selected.")); else {      boolean contains=myForm.getDepartmentIds().contains(myForm.getDepartmentId());      if (!contains)       errors.add("department",new ActionMessage("errors.generic","Department not present in the list of departments."));    }    if (errors.size() > 0) {      saveErrors(request,errors);    } else {      myForm.getDepartmentIds().remove(myForm.getDepartmentId());    }  }  return mapping.findForward("showEdit");}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  int allocate(BitField exclude,int first){  if (full) {    return -1;  }  int start=Math.max(0,first - getPos());  while (true) {    int free=used.nextClearBit(start);    if (free >= pageCount) {      if (start == 0) {        full=true;      }      return -1;    }    if (exclude != null && exclude.get(free + getPos())) {      start=exclude.nextClearBit(free + getPos()) - getPos();      if (start >= pageCount) {        return -1;      }    } else {      used.set(free);      store.logUndo(this,data);      store.update(this);      return free + getPos();    }  }}  }
class C{  public void updateContour(){  diff=new float[imageSize][imageSize];  int[] dim=plane.getElevationDifference(imageSize,diff,minMaxElev);  rows=dim[0];  columns=dim[1];  offX=(imageSize - columns) / 2;  offY=(imageSize - rows) / 2;  double min=Math.floor(minMaxElev[0]);  double max=Math.ceil(minMaxElev[1]);  byteBuffer.clear();  for (int i=0; i < offY; ++i) {    for (int j=0; j < imageSize; ++j) {      byteBuffer.put((byte)0);    }  }  for (int i=0; i < rows; ++i) {    for (int j=0; j < offX; ++j) {      byteBuffer.put((byte)0);    }    for (int j=0; j < columns; ++j) {      if (Float.isNaN(diff[i][j])) {        byteBuffer.put((byte)0);      } else {        int b=(int)(1 + (lutSize - 2) * (diff[i][j] - min) / (max - min));        if ((b < 1) || (b > 255)) {          System.err.println("ContourScene.updateContour " + b + " "+ i+ " "+ j+ " "+ diff[i][j]+ " "+ minMaxElev[0]+ " "+ minMaxElev[1]);        }        byteBuffer.put((byte)b);      }    }    for (int j=columns + offX; j < imageSize; ++j) {      byteBuffer.put((byte)0);    }  }  for (int i=rows + offY; i < imageSize; ++i) {    for (int j=0; j < imageSize; ++j) {      byteBuffer.put((byte)0);    }  }  byteBuffer.rewind();  texture.setImage(textureImage);  colorMap.setBaseMinimum(min);  colorMap.setBaseMaximum(max);  colorMap.setRange(min,max);}  }
class C{  @Override public void updateBigDecimal(int columnIndex,BigDecimal x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateBigDecimal(" + columnIndex + ", "+ quoteBigDecimal(x)+ ");");    }    update(columnIndex,x == null ? (Value)ValueNull.INSTANCE : ValueDecimal.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void expandBy(final double deltaX,final double deltaY,final double deltaZ){  if (isNull()) {    return;  }  minz-=deltaZ;  maxz+=deltaZ;  expandBy(deltaX,deltaY);  if (minz > maxz) {    setToNull();  }}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){  ButterKnife.bind(this);  WebSettings settings=this.jsBridgeWebview.getSettings();  settings.setJavaScriptEnabled(true);  this.jsBridgeWebview.setWebChromeClient(new JsBridgeWebChromeClient());  this.jsBridgeWebview.loadUrl("file:///android_asset/index.html");  JsBridge.register("bridge",BridgeImpl.class);}  }
class C{  public void checkShape(AbstractMatrix2D B,AbstractMatrix2D C){  if (columns != B.columns || rows != B.rows || columns != C.columns || rows != C.rows)   throw new IllegalArgumentException("Incompatible dimensions: " + toStringShort() + ", "+ B.toStringShort()+ ", "+ C.toStringShort());}  }
class C{  private static boolean isAPI10(){  return !FORCE_FALLBACK_IMPLEMENTATION && Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD_MR1;}  }
class C{  public Substitution<T> extend(Substitution<T> substitution){  Substitution<T> result=new Substitution<>(this);  for (  Entry<TypeVariable,T> entry : substitution.map.entrySet()) {    if (result.map.containsKey(entry.getKey()) && !result.get(entry.getKey()).equals(entry.getValue())) {      throw new IllegalArgumentException("Substitutions not disjoint, and map " + entry.getKey() + " to distinct types");    }    result.map.put(entry.getKey(),entry.getValue());  }  for (  Entry<java.lang.reflect.Type,T> entry : substitution.rawMap.entrySet()) {    if (result.rawMap.containsKey(entry.getKey()) && !result.get(entry.getKey()).equals(entry.getValue())) {      throw new IllegalArgumentException("Substitutions not disjoint, and map " + entry.getKey() + " to distinct types");    }    result.rawMap.put(entry.getKey(),entry.getValue());  }  return result;}  }
class C{  public String toLowerCase(){  return toLowerCase(Locale.getDefault());}  }
class C{  public int constrains(GeneralNameInterface inputName) throws UnsupportedOperationException {  int constraintType;  if (inputName == null)   constraintType=NAME_DIFF_TYPE; else   if (inputName.getType() != NAME_X400)   constraintType=NAME_DIFF_TYPE; else   throw new UnsupportedOperationException("Narrowing, widening, and match are not supported for X400Address.");  return constraintType;}  }
class C{  public void error(SourceLocator srcLctr,String msg,Object args[],Exception e) throws TransformerException {  String formattedMsg=XSLMessages.createMessage(msg,args);  ErrorListener errHandler=m_transformer.getErrorListener();  if (null != errHandler)   errHandler.fatalError(new TransformerException(formattedMsg,srcLctr)); else   throw new TransformerException(formattedMsg,srcLctr);}  }
class C{  public static void flushCaches(){  theCache.clear();}  }
class C{  public void mergeVertices(Set<VertexType> vertexSet,GraphType g,VertexCombinator<VertexType> combinator,GraphToolkit<GraphType,EdgeType,VertexType> toolkit){  if (vertexSet.size() <= 1) {    return;  }  TreeSet<EdgeType> edgeSet=new TreeSet<EdgeType>();  for (Iterator<EdgeType> i=g.edgeIterator(); i.hasNext(); ) {    EdgeType e=i.next();    if (vertexSet.contains(e.getSource()) || vertexSet.contains(e.getTarget())) {      edgeSet.add(e);    }  }  VertexType compositeVertex=combinator.combineVertices(vertexSet);  for (  EdgeType e : edgeSet) {    VertexType source=vertexSet.contains(e.getSource()) ? compositeVertex : e.getSource();    VertexType target=vertexSet.contains(e.getTarget()) ? compositeVertex : e.getTarget();    if (source == compositeVertex && target == compositeVertex && e.getSource() != e.getTarget()) {      continue;    }    if (g.lookupEdge(source,target) != null) {      continue;    }    EdgeType compositeEdge=g.createEdge(source,target);    toolkit.copyEdge(e,compositeEdge);  }  for (  VertexType aVertexSet : vertexSet) {    g.removeVertex(aVertexSet);  }}  }
class C{  public static boolean hasInitialContextFactoryBuilder(){  return (getInitialContextFactoryBuilder() != null);}  }
class C{  public static String toXmlString(Document doc) throws TransformerException {  TransformerFactory factory=TransformerFactory.newInstance();  Transformer transformer;  try {    transformer=factory.newTransformer();  } catch (  TransformerConfigurationException e) {    throw new RuntimeException(e);  }  transformer.setOutputProperty(OutputKeys.INDENT,"yes");  transformer.setOutputProperty(OutputKeys.STANDALONE,"yes");  transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION,"yes");  DOMSource source=new DOMSource(doc);  StringWriter xmlString=new StringWriter();  StreamResult streamResult=new StreamResult(xmlString);  transformer.transform(source,streamResult);  return xmlString.toString();}  }
class C{  private boolean parseConditionalExpression(BashPsiBuilder builder){  ParserUtil.getTokenAndAdvance(builder);  boolean success=true;  IElementType tokenType=builder.getTokenType();  while (!isEndToken(tokenType) && success) {    if (ParserUtil.isWordToken(tokenType)) {      builder.advanceLexer();    } else     if (Parsing.word.isWordToken(builder,true)) {      success=Parsing.word.parseWord(builder,true,conditionalRejects,TokenSet.EMPTY);    } else {      success=ConditionalParsingUtil.readTestExpression(builder,conditionalRejects);    }    tokenType=builder.getTokenType();  }  if (builder.getTokenType() == _EXPR_CONDITIONAL) {    builder.advanceLexer();    return true;  }  ParserUtil.error(builder,"parser.shell.conditional.expectedEnd");  return false;}  }
class C{  public ItemsSketch<T> merge(final ItemsSketch<T> other){  if (other == null)   return this;  if (other.isEmpty())   return this;  final long streamLen=this.streamLength + other.streamLength;  final ReversePurgeItemHashMap<T>.Iterator iter=other.hashMap.iterator();  while (iter.next()) {    this.update(iter.getKey(),iter.getValue());  }  this.offset+=other.offset;  this.streamLength=streamLen;  return this;}  }
class C{  private static boolean isNamed(Object funcName,Argument[] args) throws TransformerException {  if (ArrayUtil.isEmpty(args))   return false;  boolean named=false;  for (int i=0; i < args.length; i++) {    if (args[i] instanceof NamedArgument)     named=true; else     if (named)     throw new TransformerException("invalid argument for function " + funcName + ", you can not mix named and unnamed arguments",args[i].getStart());  }  return named;}  }
class C{  public void cancelTradeInternally(String partnerName){  trade.cancelTradeInternally(partnerName);}  }
class C{  public void requestMessage(InfoDisplayEvent event){  Layer l=event.getLayer();  String layername=(l == null) ? null : l.getName();  displayMessage("Message from " + layername + " layer:",event.getInformation());}  }
class C{  @SuppressWarnings("unchecked") public void loadProperties(String propertySet){  List<Property> properties=this.entityManager.createQuery("Select p from Property p where p.property like '" + propertySet + "%'").getResultList();  for (  Property property : properties) {    setProperty(property.getProperty(),property.getValue());  }}  }
class C{  public static boolean pingIOSDevice(){  String line=null;  boolean ret=false;  Process p=null;  try {    String[] sw_vers={"ssh","-p","2222","root@localhost","sw_vers"};    p=Runtime.getRuntime().exec(sw_vers);    BufferedReader br=new BufferedReader(new InputStreamReader(p.getInputStream()));    System.out.println("Gathering device details");    while (true) {      line=br.readLine();      if (line == null)       break;      System.out.println("\t" + line);      if (line.indexOf(IOS_PRODUCTNAME) > -1) {        line=line.substring(IOS_PRODUCTNAME.length()).trim();        if (line.toLowerCase().indexOf(IOS) > -1) {          ret=true;        }      }    }  } catch (  IOException e) {    e.printStackTrace();  }  return ret;}  }
class C{  public boolean isBackendPort(){  return PortRole.BACKEND.getRoleName().equals(role);}  }
class C{  public ScrollBar(int orientation){  super(orientation);  this.putClientProperty("JScrollBar.fastWheelScrolling",Boolean.TRUE);}  }
class C{  public void unloadData() throws BasicException {  saveData();  m_bd.unloadData();  m_editorrecord.refresh();  baseMoveTo(0);}  }
class C{  public ErrorCode(String codeName){  this(codeName,null,null,null);}  }
class C{  public boolean isObscuredRecipient(String playerName){  for (int i=0; i < obscuredRecipients.size(); i++) {    String s=obscuredRecipients.elementAt(i);    if (s.equals(playerName)) {      return true;    }  }  return false;}  }
class C{  public static <T>com.sun.tools.javac.util.List<T> toJCList(Iterable<T> collection){  return com.sun.tools.javac.util.List.from(collection);}  }
class C{  private static BitMatrix convertByteMatrixToBitMatrix(ByteMatrix matrix){  int matrixWidgth=matrix.getWidth();  int matrixHeight=matrix.getHeight();  BitMatrix output=new BitMatrix(matrixWidgth,matrixHeight);  output.clear();  for (int i=0; i < matrixWidgth; i++) {    for (int j=0; j < matrixHeight; j++) {      if (matrix.get(i,j) == 1) {        output.set(i,j);      }    }  }  return output;}  }
class C{  public EgovPaginatedList(final Page page,int fullListSize,final String sortCriterion,final SortOrderEnum sortDir){  super();  this.pageNumber=page.getPageNo();  this.objectsPerPage=page.getPageSize();  this.fullListSize=fullListSize;  this.list=page.getList();  this.sortCriterion=sortCriterion;  this.sortDirection=sortDir;}  }
class C{  public String mergeAndCommitChanges(ProjectStaticData current,String[] cuts) throws NullPointerException {  if (current == null) {    throw new NullPointerException("ProjectStaticData 'current' cannot be null");  }  Project db=StorageManager.getDatabaseProject();  String info="\n\n=== CTG run results ===\n";  info+=removeNoMoreExistentData(db,current);  List<TestsOnDisk> suites=gatherGeneratedTestsOnDisk();  info+="\nNew test suites: " + suites.size();  Set<String> missingCUTs=new LinkedHashSet<String>();  db.setTotalNumberOfTestableClasses(BigInteger.valueOf(current.getTotalNumberOfTestableCUTs()));  for (  String cut : current.getClassNames()) {    if (!current.getClassInfo(cut).isTestable()) {      continue;    }    TestsOnDisk suite=suites.parallelStream().filter(null).findFirst().orElse(null);    if (suite == null && current.getClassInfo(cut).isToTest()) {      missingCUTs.add(cut);    }    LoggingUtils.getEvoLogger().info("* Updating database to " + cut);    updateDatabase(cut,suite,db,current);  }  if (!missingCUTs.isEmpty()) {    if (missingCUTs.size() == 1) {      info+="\n\nWARN: failed to generate tests for " + missingCUTs.iterator().next();    } else {      info+="\n\nMissing classes:";      for (      String missingCUT : missingCUTs) {        info+="\n" + missingCUT;      }      String summary="\n\nWARN: failed to generate tests for " + missingCUTs.size() + " classes out of "+ current.getTotalNumberOfTestableCUTs();      info+=summary;    }  }  commitDatabase(db);  return info;}  }
class C{  public void restoreFromStream(final ByteArrayInputStream bis) throws IOException, ClassNotFoundException {  final ObjectInput os=new ObjectInputStream(bis);  final int size=(Integer)os.readObject();  max_size=size;  items=new Rectangle[size];  for (int i=0; i < size; i++) {    final GeneralPath path=PathSerializer.deserializePath(os);    if (path == null) {      items[i]=null;    } else {      items[i]=path.getBounds();    }  }}  }
class C{  public int V(){  return V;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:28.122 -0500",hash_original_method="1DCDBD8202B02F10B12F065EF60143EE",hash_generated_method="71A8491FD15CC48A6A994868E429A1DC") public ConnectionPoolTimeoutException(){  super();}  }
class C{  public static void w(String tag,String msg){  w(tag,msg,null);}  }
class C{  protected void sequence_TClass(ISerializationContext context,TClass semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  private static int patternMatchVariance(int[] counters,int[] pattern,int maxIndividualVariance){  int numCounters=counters.length;  int total=0;  int patternLength=0;  for (int i=0; i < numCounters; i++) {    total+=counters[i];    patternLength+=pattern[i];  }  if (total < patternLength) {    return Integer.MAX_VALUE;  }  int unitBarWidth=(total << INTEGER_MATH_SHIFT) / patternLength;  maxIndividualVariance=(maxIndividualVariance * unitBarWidth) >> 8;  int totalVariance=0;  for (int x=0; x < numCounters; x++) {    int counter=counters[x] << INTEGER_MATH_SHIFT;    int scaledPattern=pattern[x] * unitBarWidth;    int variance=counter > scaledPattern ? counter - scaledPattern : scaledPattern - counter;    if (variance > maxIndividualVariance) {      return Integer.MAX_VALUE;    }    totalVariance+=variance;  }  return totalVariance / total;}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void addAnnotation(final Message msg,final String key,final Object value){  MessageAnnotations annotations=msg.getMessageAnnotations();  if (annotations == null) {    annotations=new MessageAnnotations(new HashMap<>());    msg.setMessageAnnotations(annotations);  }  annotations.getValue().put(Symbol.getSymbol(key),value);}  }
class C{  protected void transcode(File file,Transcoder transcoder) throws IOException, TranscoderException {  transcoder.addTranscodingHint(XMLAbstractTranscoder.KEY_XML_PARSER_VALIDATING,Boolean.FALSE);  SVGDocument doc=cloneDocument();  TranscoderInput input=new TranscoderInput(doc);  OutputStream out=new BufferedOutputStream(new FileOutputStream(file));  TranscoderOutput output=new TranscoderOutput(out);  transcoder.transcode(input,output);  out.flush();  out.close();}  }
class C{  public static void main(String[] argv){  runClassifier(new Logistic(),argv);}  }
class C{  private void createTopAndReverseList(ControlFlowGraph cfg){  cfg.clearDFS();  listOfBlocks=cfg.entry();  listOfBlocks.sortDFS();  reverseTopFirst=null;  for (BasicBlock bb=listOfBlocks; bb != null; bb=(BasicBlock)bb.nextSorted) {    bb.sortedPrev=reverseTopFirst;    reverseTopFirst=bb;  }}  }
class C{  private void importADStores(Element extEle) throws Exception {  if (extEle == null) {    return;  }  NodeList nodes=extEle.getElementsByTagName(SAMLNames.ACTIVEDIRECTORYIDSTORE);  if (nodes.getLength() == 0) {    return;  }  Element adEle=(Element)nodes.item(0);  if (!adEle.hasAttribute(SAMLNames.IDNAME) || !adEle.hasAttribute(SAMLNames.IDUSERNAME) || !adEle.hasAttribute(SAMLNames.IDSPN)|| !adEle.hasAttribute(SAMLNames.IDUSERPWD)|| !adEle.hasAttribute(SAMLNames.IDSEARCHBASEDN)|| !adEle.hasAttribute(SAMLNames.IDSEARCHTIMEOUTSCNDS)) {    throw new IDMException("SAML medadata error: required " + "ActiveDirectoryIdentityStore attribute is missing!");  }  String providerName=adEle.getAttribute(SAMLNames.IDNAME);  String adFriendlyName=(adEle.hasAttribute(SAMLNames.IDFRIENDLYNAME)) ? adEle.getAttribute(SAMLNames.IDFRIENDLYNAME) : null;  String adUserName=adEle.getAttribute(SAMLNames.IDUSERNAME);  String adUseMachineAccount=adEle.getAttribute(SAMLNames.IDUSEMACHACCT);  String adSPN=adEle.getAttribute(SAMLNames.IDSPN);  String adPwd=adEle.getAttribute(SAMLNames.IDUSERPWD);  String searchBaseDn=adEle.getAttribute(SAMLNames.IDSEARCHBASEDN);  String timeOutSecStr=adEle.getAttribute(SAMLNames.IDSEARCHTIMEOUTSCNDS);  int timeOutSec=(timeOutSecStr == null) ? 0 : Integer.valueOf(timeOutSecStr);  ArrayList<String> kdcList=new ArrayList<String>();  NodeList kdcNodes=adEle.getElementsByTagName(SAMLNames.KDC);  if (nodes.getLength() > 0) {    for (int ind=0; ind < kdcNodes.getLength(); ind++) {      String kdc=((Element)kdcNodes.item(ind)).getTextContent();      if (kdc != null) {        kdcList.add(kdc);      }    }  } else {    throw new IDMException("SAML medadata error: missing KDC for " + "ActiveDirectoryIdentityStore");  }  Map<String,String> attrMap=new HashMap<String,String>();  NodeList attrMapNodes=adEle.getElementsByTagName(SAMLNames.ATTRIBUTEMAP);  if (nodes.getLength() > 0) {    for (int ind=0; ind < attrMapNodes.getLength(); ind++) {      Element attrMapEle=(Element)attrMapNodes.item(ind);      if (!attrMapEle.hasAttribute(SAMLNames.IDNAME) || !attrMapEle.hasAttribute(SAMLNames.IDVALUE)) {        throw new IDMException("SAML medadata error: illegal AD attr map!");      }      attrMap.put(attrMapEle.getAttribute(SAMLNames.IDNAME),attrMapEle.getAttribute(SAMLNames.IDVALUE));    }  } else {    throw new IDMException("SAML medadata error: missing AttributMap " + "for ActiveDirectoryIdentityStore");  }  IdentityStoreData adStore=IdentityStoreData.CreateExternalIdentityStoreData(providerName,null,IdentityStoreType.IDENTITY_STORE_TYPE_ACTIVE_DIRECTORY,AuthenticationType.USE_KERBEROS,adFriendlyName,timeOutSec,adUserName,adUseMachineAccount != null ? Boolean.getBoolean(adUseMachineAccount) : false,adSPN,adPwd,searchBaseDn,searchBaseDn,kdcList,attrMap,null);  this.idmClient.deleteProvider(this.tenantName,adStore.getName());  this.idmClient.addProvider(this.tenantName,adStore);}  }
class C{  public boolean clear(){  return mProviderHelper.clear();}  }
class C{  public final long totalTermFreq(){  return totalTermFreq;}  }
class C{  public static TaintSourcesViewPart findView(){  IWorkbenchPage activePage=Activator.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage();  TaintSourcesViewPart view=(TaintSourcesViewPart)activePage.findView(VIEW_ID);  return view;}  }
class C{  public static Principal deserialize(final DatagramReader reader) throws GeneralSecurityException {  if (reader == null) {    throw new NullPointerException("reader must not be null");  }  int code=reader.read(8);  ClientAuthenticationType type=ClientAuthenticationType.fromCode((byte)code);switch (type) {case CERT:    return deserializeCertChain(reader);case PSK:  return deserializeIdentity(reader);case RPK:return deserializeSubjectInfo(reader);default :return null;}}  }
class C{  private void checkDependencies(){  if (basedOnDatabase != null) {    if (!input.isComplete() || basedOnDatabase.get() != input.getInputStep().getDatabase()) {      basedOnDatabase=null;      firePanelUpdated();    }  }}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == ScriptElement.class) {switch (baseFeatureID) {default :      return -1;  }}if (baseClass == AnnotableScriptElement.class) {switch (baseFeatureID) {case N4JSPackage.ANNOTABLE_SCRIPT_ELEMENT__ANNOTATION_LIST:    return N4JSPackage.N4_CLASS_DECLARATION__ANNOTATION_LIST;default :  return -1;}}if (baseClass == ModifiableElement.class) {switch (baseFeatureID) {case N4JSPackage.MODIFIABLE_ELEMENT__DECLARED_MODIFIERS:return N4JSPackage.N4_CLASS_DECLARATION__DECLARED_MODIFIERS;default :return -1;}}if (baseClass == ExportableElement.class) {switch (baseFeatureID) {default :return -1;}}if (baseClass == NamedElement.class) {switch (baseFeatureID) {default :return -1;}}if (baseClass == N4TypeDeclaration.class) {switch (baseFeatureID) {case N4JSPackage.N4_TYPE_DECLARATION__NAME:return N4JSPackage.N4_CLASS_DECLARATION__NAME;default :return -1;}}if (baseClass == GenericDeclaration.class) {switch (baseFeatureID) {case N4JSPackage.GENERIC_DECLARATION__TYPE_VARS:return N4JSPackage.N4_CLASS_DECLARATION__TYPE_VARS;default :return -1;}}if (baseClass == N4ClassifierDeclaration.class) {switch (baseFeatureID) {case N4JSPackage.N4_CLASSIFIER_DECLARATION__TYPING_STRATEGY:return N4JSPackage.N4_CLASS_DECLARATION__TYPING_STRATEGY;default :return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  @Transactional public void addFollowingUserNotification(final JSONObject requestJSONObject) throws ServiceException {  try {    requestJSONObject.put(Notification.NOTIFICATION_DATA_TYPE,Notification.DATA_TYPE_C_FOLLOWING_USER);    addNotification(requestJSONObject);  } catch (  final RepositoryException e) {    final String msg="Adds notification [type=followingUser] failed";    LOGGER.log(Level.ERROR,msg,e);    throw new ServiceException(msg);  }}  }
class C{  public void testMoveRenameDirectorySourceAndDestinationMissing() throws Exception {  create(igfsSecondary,paths(DIR,SUBDIR,SUBSUBDIR,DIR_NEW,SUBDIR_NEW),null);  create(igfs,null,null);  igfs.rename(SUBSUBDIR,SUBSUBDIR_NEW);  checkExist(igfs,DIR,SUBDIR,DIR_NEW,SUBDIR_NEW);  checkExist(igfs,igfsSecondary,SUBSUBDIR_NEW);  checkNotExist(igfs,igfsSecondary,SUBSUBDIR);}  }
class C{  public synchronized void returnBuf(byte[] buf){  if (buf == null || buf.length > mSizeLimit) {    return;  }  mBuffersByLastUse.add(buf);  int pos=Collections.binarySearch(mBuffersBySize,buf,BUF_COMPARATOR);  if (pos < 0) {    pos=-pos - 1;  }  mBuffersBySize.add(pos,buf);  mCurrentSize+=buf.length;  trim();}  }
class C{  public static IntInterval oneToBy(int count,int step){  if (count < 1) {    throw new IllegalArgumentException("Only positive ranges allowed using oneToBy");  }  return IntInterval.fromToBy(1,count,step);}  }
class C{  public void cut(){  invokeAction(TransferHandler.getCutAction());}  }
class C{  public String toHuman(){  StringBuilder sb=new StringBuilder();  sb.append("  " + name + ": "+ count+ " item"+ (count == 1 ? "" : "s")+ "; "+ totalSize+ " bytes total\n");  if (smallestSize == largestSize) {    sb.append("    " + smallestSize + " bytes/item\n");  } else {    int average=totalSize / count;    sb.append("    " + smallestSize + ".."+ largestSize+ " bytes/item; average "+ average+ "\n");  }  return sb.toString();}  }
class C{  @DSModeled(DSC.SAFE) public boolean hasNext(){  return mCursorLeft.isLast() || !mCursorRight.isLast() || !mCursorLeft.isAfterLast()|| !mCursorRight.isAfterLast();}  }
class C{  private int supplementalHash(int h){  h^=(h >>> 20) ^ (h >>> 12);  return h ^ (h >>> 7) ^ (h >>> 4);}  }
class C{  @Override public void addChild(FXGNode child){  if (child instanceof MatrixNode) {    if (translateSet || scaleSet || rotationSet)     throw new FXGException(child.getStartLine(),child.getStartColumn(),"InvalidChildMatrixNode");    matrix=(MatrixNode)child;  } else   if (child instanceof GradientEntryNode) {    if (entries == null) {      entries=new ArrayList<GradientEntryNode>(4);    } else     if (entries.size() >= GRADIENT_ENTRIES_MAX_INCLUSIVE) {      FXGLog.getLogger().log(FXGLogger.WARN,"InvalidRadialGradientNumElements",null,getDocumentName(),startLine,startColumn);      return;    }    entries.add((GradientEntryNode)child);  } else {    super.addChild(child);  }}  }
class C{  protected CarbonDictionaryColumnMetaChunk readLastChunkFromDictionaryMetadataFile(DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier) throws IOException {  DictionaryService dictService=CarbonCommonFactory.getDictionaryService();  CarbonDictionaryMetadataReader columnMetadataReaderImpl=dictService.getDictionaryMetadataReader(dictionaryColumnUniqueIdentifier.getCarbonTableIdentifier(),dictionaryColumnUniqueIdentifier.getColumnIdentifier(),carbonStorePath);  CarbonDictionaryColumnMetaChunk carbonDictionaryColumnMetaChunk=null;  try {    carbonDictionaryColumnMetaChunk=columnMetadataReaderImpl.readLastEntryOfDictionaryMetaChunk();  }  finally {    columnMetadataReaderImpl.close();  }  return carbonDictionaryColumnMetaChunk;}  }
class C{  private Finalizer(Class<?> finalizableReferenceClass,ReferenceQueue<Object> queue,PhantomReference<Object> frqReference){  this.queue=queue;  this.finalizableReferenceClassReference=new WeakReference<Class<?>>(finalizableReferenceClass);  this.frqReference=frqReference;}  }
class C{  public SlimException(){  this(ErrorType.SLIM_ERROR);}  }
class C{  @Override public void ensureJobPartitions(int numTotalPartitions){  String lockForEnsureJobPartitions=zkRoot + "/" + ZNODE_LOCK_FOR_ENSURE_JOB_PARTITIONS;  InterProcessMutex lock=new InterProcessMutex(curator,lockForEnsureJobPartitions);  String path=zkRoot + "/" + ZNODE_PARTITIONS;  try {    lock.acquire();    int minDate=0;    String forceStartFrom=readForceStartFrom();    if (forceStartFrom != null) {      try {        minDate=Integer.valueOf(forceStartFrom);      } catch (      Exception ex) {        LOG.error("failing converting forceStartFrom znode value to integer with value " + forceStartFrom);        throw new IllegalStateException();      }    } else {      boolean pathExists=curator.checkExists().forPath(path) == null ? false : true;      boolean structureChanged=true;      if (pathExists) {        int currentCount=curator.getChildren().forPath(path).size();        if (numTotalPartitions == currentCount) {          structureChanged=false;          LOG.info("znode partitions structure is unchanged");        } else {          LOG.info("znode partitions structure is changed, current partition count " + currentCount + ", future count "+ numTotalPartitions);        }      }      if (!structureChanged) {        return;      }      if (pathExists) {        List<String> partitions=curator.getChildren().forPath(path);        for (        String partition : partitions) {          String date=new String(curator.getData().forPath(path + "/" + partition),"UTF-8");          int tmp=Integer.valueOf(date);          if (tmp < minDate) {            minDate=tmp;          }        }      }      if (minDate == 0) {        minDate=Integer.valueOf(getProcessedDateAfterBackoff(BACKOFF_DAYS));      }    }    rebuildJobPartitions(numTotalPartitions,String.valueOf(minDate));    deleteForceStartFrom();  } catch (  Exception e) {    LOG.error("fail building job partitions",e);    throw new RuntimeException(e);  } finally {    try {      lock.release();    } catch (    Exception e) {      LOG.error("fail releasing lock",e);      throw new RuntimeException(e);    }  }}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildBar(zone);}  }
class C{  protected boolean isValidServer(final String server){  boolean isValid=checkServerPrefixes(server);  if (isValid) {    if (server.startsWith("http")) {      isValid=canConnect(server);    } else     if (server.startsWith("file:")) {      isValid=isDirectory(server);    }  }  return isValid;}  }
class C{  private BitmapUtil(){  throw new Error("Do not need instantiate!");}  }
class C{  public void cancel(){  cancel=true;}  }
class C{  public InformationEvent(final InformationType type,final String... params){  super(type,params);}  }
class C{  public AbstractUdpServer(UdpPacketListener theListener,int thePort,int theBufferSize){  _myDatagramSize=theBufferSize;  _myPort=thePort;  _myListener=theListener;  if (_myListener != null) {    start();  }}  }
class C{  public AlternatingSequencesReader(final SequencesReader first,final SequencesReader second){  mFirst=first;  mSecond=second;}  }
class C{  public void testClassificationOnlyRemoveNominal(){  performTest(false,false,false,false,true);}  }
class C{  public static void assertPingFalse(String message,URL pingURL,Logger errorLogger){  assertPingFalse(message,null,pingURL,errorLogger);}  }
class C{  public ResultSet executeQuery(final String query) throws SQLException {  Preconditions.checkNotNull(query,"Query argument can not be null");  return m_database.executeQuery(query);}  }
class C{  public long env_end(){  return Long.parseLong(fields[50]);}  }
class C{  public static Statement single(Resource subj,IRI pred,Value obj,TripleSource store) throws QueryEvaluationException {  Statement stmt;  CloseableIteration<? extends Statement,QueryEvaluationException> stmts=store.getStatements(subj,pred,obj);  try {    if (stmts.hasNext()) {      stmt=stmts.next();      while (stmts.hasNext()) {        Statement nextStmt=stmts.next();        if (!org.eclipse.rdf4j.model.util.Statements.isSameTriple(stmt,nextStmt)) {          throw new QueryEvaluationException("Multiple statements for pattern: " + subj + " "+ pred+ " "+ obj);        }      }    } else {      stmt=null;    }  }  finally {    stmts.close();  }  return stmt;}  }
class C{  public void afterCartesianOfGroupJunctionsInAnAllGroupJunctionOfType_AND(){}  }
class C{  @Override public void stop(){  if (srv != null)   srv.stop();  if (client != null)   client.stop(true);  if (mbeanName != null)   try {    ManagementFactory.getPlatformMBeanServer().unregisterMBean(mbeanName);    if (log.isDebugEnabled())     log.debug("Unregistered MBean: " + mbeanName);  } catch (  JMException e) {    U.error(log,"Failed to unregister MBean.",e);  }  if (log.isInfoEnabled())   log.info("TCP router successfully stopped.");}  }
class C{  public void removeGeofence(Geofence fence,PendingIntent intent){  checkPendingIntent(intent);  checkGeofence(fence);  String packageName=mContext.getPackageName();  try {    mService.removeGeofence(fence,intent,packageName);  } catch (  RemoteException e) {    Log.e(TAG,"RemoteException",e);  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (contentType: ");  result.append(contentType);  result.append(')');  return result.toString();}  }
class C{  @SuppressWarnings("deprecation") protected void stopClassifier(){  if (m_RunThread != null) {    m_RunThread.interrupt();    m_RunThread.stop();  }}  }
class C{  void open(){  open=true;}  }
class C{  public void closeSocket(){  if (mSocket != null) {    try {      mSocket.close();    } catch (    IOException e) {    }  }}  }
class C{  @Override public boolean isEnabled(){  return isEnabled;}  }
class C{  public String replaceAll(String replacement){  return matcher.replaceAll(replacement);}  }
class C{  public void execute(boolean store,boolean loadInputProps) throws Exception {  if (loadInputProps) {    loadInputProperties();  }  generateOutputProperties();  if (store) {    storeOutputProperties();  }}  }
class C{  public void clear(){  for (  VerletSpring3D s : links) {    physics.removeSpringElements(s);  }  particles.clear();  links.clear();}  }
class C{  private void checkLoyaltyCards(){  Cursor cursor=db.getLoyaltyCardCursor();  int index=1;  while (cursor.moveToNext()) {    LoyaltyCard card=LoyaltyCard.toLoyaltyCard(cursor);    String expectedStore=String.format("store, \"%4d",index);    String expectedNote=String.format("note, \"%4d",index);    assertEquals(expectedStore,card.store);    assertEquals(expectedNote,card.note);    assertEquals(BARCODE_DATA,card.cardId);    assertEquals(BARCODE_TYPE,card.barcodeType);    index++;  }  cursor.close();}  }
class C{  public String toString(){  if (null == this.label)   return this.value.toString();  return this.label;}  }
class C{  @Override public Closure<V> trampoline(final Object... args){  return new TrampolineClosure<V>(original.curry(args));}  }
class C{  public ExtensionsRegistry(){}  }
class C{  public SslToServiceNoISCerts(){  requestFileName="getstate.query";  responseFile="getstate.answer";}  }
class C{  @Override public boolean complete(){  OutputStream os=_os;  _os=null;  IoUtil.close(os);  return true;}  }
class C{  public StringBuffer(int length){  internal=new StringBuilder(length);}  }
class C{  private void validate(Query qry){  if (!GridQueryProcessor.isEnabled(ctx.config()) && !(qry instanceof ScanQuery) && !(qry instanceof ContinuousQuery))   throw new CacheException("Indexing is disabled for cache: " + ctx.cache().name() + ". Use setIndexedTypes or setTypeMetadata methods on CacheConfiguration to enable.");  if (!ctx.kernalContext().query().moduleEnabled() && (qry instanceof SqlQuery || qry instanceof SqlFieldsQuery || qry instanceof TextQuery))   throw new CacheException("Failed to execute query. Add module 'ignite-indexing' to the classpath " + "of all Ignite nodes.");}  }
class C{  public StatementSequence(){  sequence=new LinkedList<RTLStatement>();}  }
class C{  public void paint(Graphics2D g){  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  origAlpha=1.0f;  Composite origComposite=g.getComposite();  if (origComposite instanceof AlphaComposite) {    AlphaComposite origAlphaComposite=(AlphaComposite)origComposite;    if (origAlphaComposite.getRule() == AlphaComposite.SRC_OVER) {      origAlpha=origAlphaComposite.getAlpha();    }  }  AffineTransform trans_0=g.getTransform();  paintRootGraphicsNode_0(g);  g.setTransform(trans_0);}  }
class C{  public final Angle add(Angle angle){  if (angle == null) {    throw new IllegalArgumentException("Angle Is Null");  }  return Angle.fromDegrees(this.degrees + angle.degrees);}  }
class C{  public static double pow2(double x){  if (x > Double.MAX_EXPONENT)   return Double.POSITIVE_INFINITY; else   if (x < Double.MIN_EXPONENT)   return 0; else   if (x < 0)   return 1.0 / pow2(-x);  double floorXd=Math.floor(x);  int floorX=(int)floorXd;  double frac=x - floorXd;  double pow2frac=-4.704682932438695 + 27.543765058113320 / (4.828085122666891 - frac) - 0.490129071734273 * frac;  return pow2frac * longBitsToDouble((floorX + 1023L) << 52);}  }
class C{  public void addMpUsed(int increment){  mpUsed+=increment;}  }
class C{  public static Color hsl(double h,double s,double l){  if (s == 0) {    int c=(int)(l * 255);    return rgbc(c,c,c);  }  double t1;  if (l < 0.5F) {    t1=l * (1 + s);  } else {    t1=l + s - l * s;  }  double t2=2 * l - t1;  h=(h % 360F) / 360F;  double tr=h + 1 / 3F;  double tg=h;  double tb=h - 1 / 3F;  tr=tr > 1 ? tr - 1 : tr < 0 ? tr + 1 : tr;  tg=tg > 1 ? tg - 1 : tg < 0 ? tg + 1 : tg;  tb=tb > 1 ? tb - 1 : tb < 0 ? tb + 1 : tb;  double r=constructColor(tr,t1,t2);  double g=constructColor(tg,t1,t2);  double b=constructColor(tb,t1,t2);  return rgbfc(r,g,b);}  }
class C{  public static void updateBarsColor(int color,Window window,boolean applyDarken,boolean navbar,boolean statusbar){  int sColor=color;  float[] hsv=new float[3];  Color.colorToHSV(color,hsv);  if (hsv[2] > 0.56f && hsv[1] < 0.12)   hsv[2]=0.56f;  sColor=Color.HSVToColor(hsv);  updateBarsColorWoCheck(sColor,window,applyDarken,navbar,statusbar);}  }
class C{  public double compute(Collection<? extends Number> dataset){  return computeInPlace(Doubles.toArray(dataset));}  }
class C{  public AbViewInfo(View view){  super();  this.view=view;}  }
class C{  public StateSpecificationItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public JsonBuffer(Writer writer){  this.writer=writer;  first=true;}  }
class C{  public void pickDevice(ConnectableDevice device){  this.device=device;}  }
class C{  public synchronized void release(){  processingWatches.cancelAll();  commitWatches.cancelAll();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void write(OutputStream stream,Object o) throws Exception {  toXML(o).write(stream);}  }
class C{  Region(Region r){  this(r.start(),r.end());}  }
class C{  @SuppressWarnings("unchecked") public static void mergePropertiesIntoMap(Properties props,Map map){  if (map == null) {    throw new IllegalArgumentException("Map must not be null");  }  if (props != null) {    for (Enumeration en=props.propertyNames(); en.hasMoreElements(); ) {      String key=(String)en.nextElement();      Object value=props.getProperty(key);      if (value == null) {        value=props.get(key);      }      map.put(key,value);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:36.217 -0500",hash_original_method="6CB3F309867B314299E03BAA3ADD01B0",hash_generated_method="7F0E77137CFC3A3346F77E5FE852F5A6") @DSSink(DSSinkKind.DATABASE) public boolean putBlob(byte[] value,int row,int column){  this.addTaint(value[0]);  return true;}  }
class C{  private boolean ensureDatabase(){  return !mShuttingDown && mReactDatabaseSupplier.ensureDatabase();}  }
class C{  public ConfigurableLineTracker(String[] legalLineDelimiters){  Assert.isTrue(legalLineDelimiters != null && legalLineDelimiters.length > 0);  fDelimiters=TextUtilities.copy(legalLineDelimiters);}  }
class C{  public boolean isData(){  return label.isData();}  }
class C{  private void showDebugDialog(int titleResId,int bodyResId){  AlertDialog.Builder builder=new AlertDialog.Builder(this).setTitle(titleResId).setMessage(bodyResId).setPositiveButton(android.R.string.ok,null);  builder.create().show();}  }
class C{  public void put(E e){  xfer(e,true,ASYNC,0);}  }
class C{  protected ContentHandler createHandler(){  return new ExpandedTitleContentHandler(new HTMLSerializer(writer));}  }
class C{  @Override protected boolean is(String word){  return false;}  }
class C{  private void expand(int i){  if (count + i <= buf.length) {    return;  }  byte[] newbuf=mPool.getBuf((count + i) * 2);  System.arraycopy(buf,0,newbuf,0,count);  mPool.returnBuf(buf);  buf=newbuf;}  }
class C{  @Override protected void startNewChunk(int len,String id,long offset){  super.startNewChunk(len,id,offset);}  }
class C{  public void test_serviceAlias2(){  final AbstractTripleStore store=getStore(getProperties());  try {    final BigdataValueFactory f=store.getValueFactory();    final BigdataURI serviceURI1=f.createURI("http://www.bigdata.com/myService/" + getName() + "/"+ UUID.randomUUID());    final BigdataURI serviceURI2=f.createURI("http://www.bigdata.com/myService2/" + getName() + "/"+ UUID.randomUUID());    final BigdataValue[] values=new BigdataValue[]{serviceURI1,serviceURI2};    store.getLexiconRelation().addTerms(values,values.length,false);    try {      assertNull(ServiceRegistry.getInstance().get(serviceURI1));      assertNull(ServiceRegistry.getInstance().get(serviceURI2));      ServiceRegistry.getInstance().addAlias(serviceURI1,serviceURI2);      assertNull(ServiceRegistry.getInstance().get(serviceURI1));      assertNull(ServiceRegistry.getInstance().get(serviceURI2));      final QueryEngine queryEngine=QueryEngineFactory.getInstance().getQueryController(store.getIndexManager());      final HttpClient cm=queryEngine.getClientConnectionManager();      final JoinGroupNode groupNode=new JoinGroupNode();      final ServiceNode serviceNode=new ServiceNode(new ConstantNode(serviceURI1.getIV()),groupNode);{        final ServiceCall<?> serviceCall=ServiceRegistry.getInstance().toServiceCall(store,cm,serviceURI1,serviceNode,null);        assertNotNull(serviceCall);      }{        final ServiceCall<?> serviceCall=ServiceRegistry.getInstance().toServiceCall(store,cm,serviceURI2,serviceNode,null);        assertNotNull(serviceCall);      }    }  finally {      ServiceRegistry.getInstance().remove(serviceURI1);    }  }  finally {    store.destroy();  }}  }
class C{  @Override public void addPlugin(Plugin plugin){  plugins.add(plugin);}  }
class C{  protected long[] fill(long[] array,long val){  for (int i=0; i < array.length; i++)   array[i]=val;  return array;}  }
class C{  public SpecificationRunnerBuilder withSection(String section){  this.sections.add(section);  return this;}  }
class C{  public boolean isIncluded(){  if (!m_includedAlreadyCalc) {    m_included=false;    if (getParentTab() != null) {      for (      GridTab tab : getParentTab().getIncludedTabs()) {        if (tab.equals(this)) {          m_included=true;          break;        }      }    }    m_includedAlreadyCalc=true;  }  return m_included;}  }
class C{  public EigenDecomposition decomposeMatrix(double[][] qMatrix){  Eval=new double[stateCount];  Evec=new double[stateCount][stateCount];  Ievc=new double[stateCount][stateCount];  elmhes(qMatrix,ordr,stateCount);  eltran(qMatrix,Evec,ordr,stateCount);  hqr2(stateCount,1,stateCount,qMatrix,Evec,Eval,evali);  luinverse(Evec,Ievc,stateCount);  double[] flatEvec=new double[stateCount * stateCount];  double[] flatIevc=new double[stateCount * stateCount];  for (int i=0; i < stateCount; i++) {    System.arraycopy(Evec[i],0,flatEvec,i * stateCount,stateCount);    System.arraycopy(Ievc[i],0,flatIevc,i * stateCount,stateCount);  }  return new EigenDecomposition(flatEvec,flatIevc,Eval);}  }
class C{  public static Object convertStringToObject(String objectString) throws IOException {  if (objectString == null) {    return null;  }  byte[] bytes=Base64.decodeBase64(objectString.getBytes("UTF-8"));  ByteArrayInputStream bais=null;  GZIPInputStream gis=null;  ObjectInputStream ois=null;  try {    bais=new ByteArrayInputStream(bytes);    gis=new GZIPInputStream(bais);    ois=new ObjectInputStream(gis);    return ois.readObject();  } catch (  ClassNotFoundException e) {    throw new IOException("Could not read object");  } finally {    try {      if (ois != null) {        ois.close();      }      if (gis != null) {        gis.close();      }      if (bais != null) {        bais.close();      }    } catch (    IOException e) {      LOG.error(e);    }  }}  }
class C{  public boolean isPinned(){  return pinned;}  }
class C{  protected ShaderVar addGlobal(String name,DataType dataType){  ShaderVar v=getInstanceForDataType(name,dataType);  v.isGlobal(true);  mGlobals.put(v.getName(),v);  return v;}  }
class C{  public String format(short val){  DecimalFormat df=getShortFormat();  if (df != null) {    return df.format(val);  }  return Short.toString(val);}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public Map<String,ThriftServiceEntry> entries(){  return entries;}  }
class C{  @Override public void windowClosing(WindowEvent e){  int result=JOptionPane.showConfirmDialog(e.getWindow(),"Are you sure you want to cancel the download?","Confirmation",JOptionPane.YES_NO_OPTION);  if (result == JOptionPane.YES_OPTION) {    e.getWindow().dispose();    System.exit(1);  }}  }
class C{  public void addSoftwareModule(final SoftwareModule createSoftwareModule){  if (softwareModules == null) {    softwareModules=new ArrayList<>();  }  softwareModules.add(createSoftwareModule);}  }
class C{  static DebugGraphicsInfo info(){  DebugGraphicsInfo debugGraphicsInfo=(DebugGraphicsInfo)SwingUtilities.appContextGet(debugGraphicsInfoKey);  if (debugGraphicsInfo == null) {    debugGraphicsInfo=new DebugGraphicsInfo();    SwingUtilities.appContextPut(debugGraphicsInfoKey,debugGraphicsInfo);  }  return debugGraphicsInfo;}  }
class C{  public void testNextBoolean(){  boolean f=ThreadLocalRandom.current().nextBoolean();  int i=0;  while (i < NCALLS && ThreadLocalRandom.current().nextBoolean() == f)   ++i;  assertTrue(i < NCALLS);}  }
class C{  public String[] involvedFields(){  return Arrays.copyOf(involvedFields,involvedFields.length);}  }
class C{  public static char[] encode(byte[] in){  return encode(in,0,in.length);}  }
class C{  public static void deleteModule(final AbstractSQLProvider provider,final INaviModule module) throws CouldntDeleteException {  PostgreSQLModuleFunctions.checkArguments(provider,module);  NaviLogger.info("Deleting module %s",module.getConfiguration().getName());  final CConnection connection=provider.getConnection();  try {    final String moduleViewQuery="DELETE FROM " + CTableNames.VIEWS_TABLE + " "+ " WHERE id IN (SELECT view_id FROM "+ CTableNames.MODULE_VIEWS_TABLE+ " WHERE module_id = "+ module.getConfiguration().getId()+ ")";    connection.executeUpdate(moduleViewQuery,true);    final String nodeQuery="DELETE FROM " + CTableNames.NODES_TABLE + " "+ " WHERE id IN "+ " (SELECT view_id FROM "+ CTableNames.MODULE_VIEWS_TABLE+ " WHERE module_id = "+ module.getConfiguration().getId()+ ")";    connection.executeUpdate(nodeQuery,true);    final String instructionsQuery=String.format("DELETE FROM " + CTableNames.INSTRUCTIONS_TABLE + " WHERE module_id = %d",module.getConfiguration().getId());    connection.executeUpdate(instructionsQuery,true);    connection.executeUpdate(String.format("delete FROM " + CTableNames.EXPRESSION_TREE_TABLE + "_mapping where module_id = %d",module.getConfiguration().getId()),true);    connection.executeUpdate(String.format("delete FROM " + CTableNames.EXPRESSION_TREE_TABLE + " where module_id = %d",module.getConfiguration().getId()),true);    connection.executeUpdate(String.format("delete FROM " + CTableNames.EXPRESSION_TREE_TABLE + "_ids where module_id = %d",module.getConfiguration().getId()),true);    connection.executeUpdate(String.format("delete FROM " + CTableNames.CODE_NODES_TABLE + " where module_id = %d",module.getConfiguration().getId()),true);    connection.executeUpdate(String.format("delete from " + CTableNames.MODULES_TABLE + " where id = %d",module.getConfiguration().getId()),true);  } catch (  final SQLException e) {    throw new CouldntDeleteException(e);  }}  }
class C{  public static final short BuildShort(byte bytevec[],int offset,boolean MSBFirst){  if (MSBFirst) {    return (BuildShortBE(bytevec,offset));  } else {    return (BuildShortLE(bytevec,offset));  }}  }
class C{  @Override public String toString(){  String fmt="  %12d:%11d%20d %d";  String hfmt="  %12s:%11s%20s %s";  final StringBuilder sb=new StringBuilder();  sb.append("ReversePurgeLongHashMap:").append(LS);  sb.append(String.format(hfmt,"Index","States","Values","Keys")).append(LS);  for (int i=0; i < keys.length; i++) {    if (states[i] <= 0)     continue;    sb.append(String.format(fmt,i,states[i],values[i],keys[i])).append(LS);  }  return sb.toString();}  }
class C{  protected Steppable[] increaseSubsteps(Steppable[] substeps){  Steppable[] newsubstep=new Steppable[substeps.length * 2 + 1];  System.arraycopy(substeps,0,newsubstep,0,substeps.length);  return newsubstep;}  }
class C{  public void uploadFile(String inFile,String outFile) throws FileSystemException {  FileObject local=fsManager.resolveFile(inFile);  FileObject remote=fsManager.resolveFile(outFile,opts);  LOG.debug("copy " + local + " to "+ remote);  remote.copyFrom(local,new AllFileSelector());}  }
class C{  private int runClientSide(String serviceUrlStr) throws Exception {  List<String> opts=buildCommandLine();  opts.add(serviceUrlStr);  int exitCode=0;  String[] optsArray=opts.toArray(new String[0]);  ProcessBuilder pb=new ProcessBuilder(optsArray);  Process p=ProcessTools.startProcess("MXBeanWeirdParamTest$ClientSide",pb);  try {    exitCode=p.waitFor();    if (exitCode != 0) {      System.out.println("Subprocess unexpected exit value of [" + exitCode + "]. Expected 0.\n");    }  } catch (  InterruptedException e) {    System.out.println("Parent process interrupted with exception : \n " + e + " :");    p.destroyForcibly();    throw new RuntimeException("Parent process interrupted with exception : \n " + e + " :");  } finally {    return exitCode;  }}  }
class C{  protected static JCas jCasWithTokens() throws UIMAException {  JCas jCas=JCasFactory.createJCas();  jCas.setDocumentText("Token1 Token2");  DocumentMetaData metaData=DocumentMetaData.create(jCas);  metaData.setDocumentId("tokensTest");  metaData.addToIndexes(jCas);  Token token1=new Token(jCas,0,6);  Token token2=new Token(jCas,7,13);  token1.addToIndexes(jCas);  token2.addToIndexes(jCas);  return jCas;}  }
class C{  protected void startDownload(int blocks){  log.info("Downloading block chain of size " + blocks + ". "+ (blocks > 1000 ? "This may take a while." : ""));}  }
class C{  @ResponseBody @ExceptionHandler(EntityNotFoundException.class) @ResponseStatus(HttpStatus.NOT_FOUND) VndErrors courseNotFoundExceptionHandler(EntityNotFoundException ex){  return new VndErrors(HttpStatus.NOT_FOUND.getReasonPhrase(),ex.getMessage());}  }
class C{  public boolean isStopped(){  return mDirection == STOPPED;}  }
class C{  @DSComment("not sensitive") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:40.410 -0500",hash_original_method="CDBC99BDF3D706FE5CF6000E4273C9D9",hash_generated_method="EE62E3FF899BD2828946937B2BAF16E5") @Override public void flush() throws IOException {synchronized (lock) {    checkNotClosed();    flushInternal();    out.flush();  }}  }
class C{  private void determineHostsAsProperty(){  if (hosts.startsWith("${") && hosts.endsWith("}")) {    String hostsProperty=hosts.substring(2,hosts.length() - 1);    hosts=PropertyUtil.getProperty(hostsProperty);    if (hosts == null) {      throw new IllegalArgumentException("Could not find property '" + hostsProperty + "'");    }  }}  }
class C{  public static void shutDown(){  Core.shutDown();  evictAllBitmap();  ConnectionClassManager.getInstance().removeListener();  ConnectionClassManager.shutDown();  ParseUtil.shutDown();}  }
class C{  private void updatePasswordVisibility(boolean checked){  int pos=mPasswordView.getSelectionEnd();  mPasswordView.setInputType(InputType.TYPE_CLASS_TEXT | (checked ? InputType.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD : InputType.TYPE_TEXT_VARIATION_PASSWORD));  if (pos >= 0) {    ((EditText)mPasswordView).setSelection(pos);  }}  }
class C{  protected static void appendDateType(StringBuilder sb){  sb.append("TIMESTAMP");}  }
class C{  public static void traverse(final File directory,final IDirectoryTraverselCallback callback){  final File[] files=directory.listFiles();  if (files == null) {    return;  }  callback.entering(directory);  for (  final File file : files) {    if (!file.isDirectory()) {      callback.nextFile(file);    }  }  for (  final File file : files) {    if (file.isDirectory()) {      traverse(file,callback);    }  }  callback.leaving(directory);}  }
class C{  public String connectAndBind(String host,int port,BindParameter bindParam,long timeout) throws IOException {  logger.debug("Connect and bind to {} port {}",host,port);  if (sequence().currentValue() != 1) {    throw new IOException("Failed connecting");  }  conn=connFactory.createConnection(host,port);  logger.info("Connected to {}",conn.getInetAddress());  conn.setSoTimeout(getEnquireLinkTimer());  sessionContext.open();  try {    in=new DataInputStream(conn.getInputStream());    out=conn.getOutputStream();    pduReaderWorker=new PDUReaderWorker();    pduReaderWorker.start();    String smscSystemId=sendBind(bindParam.getBindType(),bindParam.getSystemId(),bindParam.getPassword(),bindParam.getSystemType(),bindParam.getInterfaceVersion(),bindParam.getAddrTon(),bindParam.getAddrNpi(),bindParam.getAddressRange(),timeout);    sessionContext.bound(bindParam.getBindType());    enquireLinkSender=new EnquireLinkSender();    enquireLinkSender.start();    return smscSystemId;  } catch (  PDUException e) {    logger.error("Failed sending bind command",e);    throw new IOException("Failed sending bind since some string parameter area invalid: " + e.getMessage(),e);  }catch (  NegativeResponseException e) {    String message="Receive negative bind response";    logger.error(message,e);    close();    throw new IOException(message + ": " + e.getMessage(),e);  }catch (  InvalidResponseException e) {    String message="Receive invalid response of bind";    logger.error(message,e);    close();    throw new IOException(message + ": " + e.getMessage(),e);  }catch (  ResponseTimeoutException e) {    String message="Waiting bind response take time too long";    logger.error(message,e);    close();    throw new IOException(message + ": " + e.getMessage(),e);  }catch (  IOException e) {    logger.error("IO error occurred",e);    close();    throw e;  }}  }
class C{  @Override public double evaluateSubset(BitSet subset) throws Exception {  double num=0.0;  double denom=0.0;  float corr;  int larger, smaller;  for (int i=0; i < m_numAttribs; i++) {    if (i != m_classIndex) {      if (subset.get(i)) {        if (i > m_classIndex) {          larger=i;          smaller=m_classIndex;        } else {          smaller=i;          larger=m_classIndex;        }        if (m_corr_matrix[larger][smaller] == -999) {          corr=correlate(i,m_classIndex);          m_corr_matrix[larger][smaller]=corr;          num+=(m_std_devs[i] * corr);        } else {          num+=(m_std_devs[i] * m_corr_matrix[larger][smaller]);        }      }    }  }  for (int i=0; i < m_numAttribs; i++) {    if (i != m_classIndex) {      if (subset.get(i)) {        denom+=(1.0 * m_std_devs[i] * m_std_devs[i]);        for (int j=0; j < m_corr_matrix[i].length - 1; j++) {          if (subset.get(j)) {            if (m_corr_matrix[i][j] == -999) {              corr=correlate(i,j);              m_corr_matrix[i][j]=corr;              denom+=(2.0 * m_std_devs[i] * m_std_devs[j]* corr);            } else {              denom+=(2.0 * m_std_devs[i] * m_std_devs[j]* m_corr_matrix[i][j]);            }          }        }      }    }  }  if (denom < 0.0) {    denom*=-1.0;  }  if (denom == 0.0) {    return (0.0);  }  double merit=(num / Math.sqrt(denom));  if (merit < 0.0) {    merit*=-1.0;  }  return merit;}  }
class C{  public static <T>TStream<T> counter(TStream<T> stream){  return stream.pipe(new CounterOp<T>());}  }
class C{  public ResultSet executeQuery() throws GenericDataSourceException {  try {    _rs=_ps.executeQuery();  } catch (  SQLException sqle) {    this.checkLockWaitInfo(sqle);    throw new GenericDataSourceException("SQL Exception while executing the following:" + _sql,sqle);  }  return _rs;}  }
class C{  public boolean isOverwrite(){  return overwrite;}  }
class C{  public static double toNumber(Session session,Value v){  v=safeValue(v,Isolate.DEFAULT_ID);switch (v.getType()) {case VariableType.UNDEFINED:    return Double.NaN;case VariableType.NULL:  return 0;case VariableType.BOOLEAN:return ((Boolean)v.getValueAsObject()).booleanValue() ? 1 : 0;case VariableType.NUMBER:return ((Double)v.getValueAsObject()).doubleValue();case VariableType.STRING:{String s=(String)v.getValueAsObject();if (s.length() == 0) {return 0;} else {try {  return Double.parseDouble(s);} catch (NumberFormatException e) {  return Double.NaN;}}}default :return toNumber(session,toPrimitive(session,v,PreferredType.NUMBER,v.getIsolateId()));}}  }
class C{  public HttpMethodInfoBuilder httpRequest(Request request){  this.request=request;  return this;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Object values=stack.pop();  String setting=getString(stack);  sage.plugin.PluginWrapper pluggy=getPlugin(stack);  if (pluggy != null) {    if (pluggy.isServerPluginInfo()) {      stack.push(pluggy);      stack.push(setting);      stack.push(values);      return makeNetworkedCall(stack);    }    String[] svals=null;    if (values instanceof String[])     svals=(String[])values; else     if (values instanceof Object[]) {      Object[] oarr=(Object[])values;      svals=new String[oarr.length];      for (int i=0; i < oarr.length; i++)       svals[i]=oarr[i].toString();    } else     if (values instanceof java.util.Collection) {      Object[] oarr=((java.util.Collection)values).toArray();      svals=new String[oarr.length];      for (int i=0; i < oarr.length; i++)       svals[i]=oarr[i].toString();    } else     values=Pooler.EMPTY_STRING_ARRAY;    SageTVPlugin realPlug=sage.plugin.CorePluginManager.getInstance().getRealPlugin(pluggy.getId());    if (realPlug != null) {      if (stack.getUIMgr() != null) {        Catbert.uiContextThreadNames.set(stack.getUIMgr().getLocalUIClientName());      }      try {        realPlug.setConfigValues(setting,svals);      } catch (      Throwable t) {        return t.toString();      }    }  }  return null;}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  @Override public void updateCharacterStream(String columnLabel,Reader x,int length) throws SQLException {  updateCharacterStream(columnLabel,x,(long)length);}  }
class C{  public void testGetDataLength(){  char expectedReturn=4;  this.connectionIdAttribute.setConnectionIdValue(MsgFixture.CONNECTION_ID);  char actualReturn=this.connectionIdAttribute.getDataLength();  assertEquals("Datalength is not properly calculated",expectedReturn,actualReturn);}  }
class C{  public static Calendar truncate(final Calendar date,final int field){  if (date == null) {    throw new IllegalArgumentException("The date must not be null");  }  final Calendar truncated=(Calendar)date.clone();  modify(truncated,field,ModifyType.TRUNCATE);  return truncated;}  }
class C{  public float remove(long key){  float prev=0;  int index=index(key);  if (index >= 0) {    prev=_values[index];    removeAt(index);  }  return prev;}  }
class C{  public void updateOnConfigurationChange(){  launchedReuseTaskStackViews=false;  launchedHasConfigurationChanged=true;}  }
class C{  public void handleRequest(HttpServletRequest req,HttpServletResponse rsp,C component) throws IOException {  checkNotNull(component);  checkNotNull(rsp);  Action.Method method;  try {    method=Action.Method.valueOf(req.getMethod());  } catch (  IllegalArgumentException e) {    logger.infofmt("Unsupported method: %s",req.getMethod());    rsp.sendError(SC_METHOD_NOT_ALLOWED);    return;  }  String path=req.getRequestURI();  Optional<Route> route=router.route(path);  if (!route.isPresent()) {    logger.infofmt("No action found for: %s",path);    rsp.sendError(SC_NOT_FOUND);    return;  }  if (!route.get().isMethodAllowed(method)) {    logger.infofmt("Method %s not allowed for: %s",method,path);    rsp.sendError(SC_METHOD_NOT_ALLOWED);    return;  }  if (route.get().action().requireLogin() && !userService.isUserLoggedIn()) {    logger.info("not logged in");    rsp.setStatus(SC_MOVED_TEMPORARILY);    rsp.setHeader(LOCATION,userService.createLoginURL(req.getRequestURI()));    return;  }  if (route.get().shouldXsrfProtect(method) && !validateToken(nullToEmpty(req.getHeader(X_CSRF_TOKEN)),route.get().action().xsrfScope(),XSRF_VALIDITY)) {    rsp.sendError(SC_FORBIDDEN,"Invalid " + X_CSRF_TOKEN);    return;  }  try {    route.get().instantiator().apply(component).run();    if (route.get().action().automaticallyPrintOk()) {      rsp.setContentType(PLAIN_TEXT_UTF_8.toString());      rsp.getWriter().write("OK\n");    }  } catch (  HttpException e) {    e.send(rsp);  }}  }
class C{  public XML(){  xmlJmapper=new XmlJmapper();  xmlJmapper.classes=new ArrayList<XmlClass>();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:58.837 -0500",hash_original_method="4B192230440137F94B49778D22CB7CD2",hash_generated_method="EF578A8F193603212D59FEC332ACDBA1") private void checkAndEnableDataCallAfterEmergencyCallDropped(){  if (mIsInEmergencyCall) {    mIsInEmergencyCall=false;    String inEcm=SystemProperties.get(TelephonyProperties.PROPERTY_INECM_MODE,"false");    if (Phone.DEBUG_PHONE) {      log("checkAndEnableDataCallAfterEmergencyCallDropped,inEcm=" + inEcm);    }    if (inEcm.compareTo("false") == 0) {      phone.mDataConnectionTracker.setInternalDataEnabled(true);    }  }}  }
class C{  public ColladaUnit(String ns){  super(ns);}  }
class C{  public static byte[] genSpecBytes(byte len){  char u8=convertByte2Uint8(len);  return genSpecBytes(u8);}  }
class C{  private V doGet(Object okey){  Comparable<? super K> key=comparable(okey);  for (; ; ) {    Node<K,V> n=findNode(key);    if (n == null)     return null;    Object v=n.value;    if (v != null)     return (V)v;  }}  }
class C{  public void jjtReplaceWith(Node newNode){  if (parent != null) {    parent.jjtReplaceChild(this,newNode);  }  for (  Node childNode : children) {    childNode.jjtSetParent(newNode);  }}  }
class C{  private LocalDate parseDateFormat(String yyyymmdd){  return LocalDate.of(Integer.parseInt(yyyymmdd.substring(0,4)),Integer.parseInt(yyyymmdd.substring(4,6)),Integer.parseInt(yyyymmdd.substring(6,8)));}  }
class C{  public void extend(List<ReferenceType> types){  tupleLength+=1;  List<List<ReferenceType>> tupleList=new ArrayList<>();  for (  List<ReferenceType> tuple : typeTuples) {    for (    ReferenceType type : types) {      List<ReferenceType> extTuple=new ArrayList<>(tuple);      extTuple.add(type);      assert extTuple.size() == tupleLength : "tuple lengths don't match, expected: " + tupleLength + " have "+ extTuple.size();      tupleList.add(extTuple);    }  }  typeTuples=tupleList;}  }
class C{  public DropTargetDragEvent(DropTargetContext dtc,Point cursorLocn,int dropAction,int srcActions){  super(dtc);  if (cursorLocn == null)   throw new NullPointerException("cursorLocn");  if (dropAction != DnDConstants.ACTION_NONE && dropAction != DnDConstants.ACTION_COPY && dropAction != DnDConstants.ACTION_MOVE && dropAction != DnDConstants.ACTION_LINK)   throw new IllegalArgumentException("dropAction" + dropAction);  if ((srcActions & ~(DnDConstants.ACTION_COPY_OR_MOVE | DnDConstants.ACTION_LINK)) != 0)   throw new IllegalArgumentException("srcActions");  location=cursorLocn;  actions=srcActions;  this.dropAction=dropAction;}  }
class C{  public double real(){  return real;}  }
class C{  public Image(String formatType,byte[] data){  super(data);  setFormatType(formatType);}  }
class C{  public static final Criterion all(){  return AllCriterion.all();}  }
class C{  void addFillComponents(Container panel,int[] cols,int[] rows){  Dimension filler=new Dimension(10,10);  boolean filled_cell_11=false;  CellConstraints cc=new CellConstraints();  if (cols.length > 0 && rows.length > 0) {    if (cols[0] == 1 && rows[0] == 1) {      panel.add(Box.createRigidArea(filler),cc.xy(1,1));      filled_cell_11=true;    }  }  for (int index=0; index < cols.length; index++) {    if (cols[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(cols[index],1));  }  for (int index=0; index < rows.length; index++) {    if (rows[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(1,rows[index]));  }}  }
class C{  public void encode(RenderedImage im) throws IOException {  this.image=im;  this.width=image.getWidth();  this.height=image.getHeight();  SampleModel sampleModel=image.getSampleModel();  int[] sampleSize=sampleModel.getSampleSize();  this.bitDepth=-1;  this.bitShift=0;  if (param instanceof PNGEncodeParam.Gray) {    PNGEncodeParam.Gray paramg=(PNGEncodeParam.Gray)param;    if (paramg.isBitDepthSet()) {      this.bitDepth=paramg.getBitDepth();    }    if (paramg.isBitShiftSet()) {      this.bitShift=paramg.getBitShift();    }  }  if (this.bitDepth == -1) {    this.bitDepth=sampleSize[0];    for (int i=1; i < sampleSize.length; i++) {      if (sampleSize[i] != bitDepth) {        throw new RuntimeException();      }    }    if (bitDepth > 2 && bitDepth < 4) {      bitDepth=4;    } else     if (bitDepth > 4 && bitDepth < 8) {      bitDepth=8;    } else     if (bitDepth > 8 && bitDepth < 16) {      bitDepth=16;    } else     if (bitDepth > 16) {      throw new RuntimeException();    }  }  this.numBands=sampleModel.getNumBands();  this.bpp=numBands * ((bitDepth == 16) ? 2 : 1);  ColorModel colorModel=image.getColorModel();  if (colorModel instanceof IndexColorModel) {    if (bitDepth < 1 || bitDepth > 8) {      throw new RuntimeException();    }    if (sampleModel.getNumBands() != 1) {      throw new RuntimeException();    }    IndexColorModel icm=(IndexColorModel)colorModel;    int size=icm.getMapSize();    redPalette=new byte[size];    greenPalette=new byte[size];    bluePalette=new byte[size];    alphaPalette=new byte[size];    icm.getReds(redPalette);    icm.getGreens(greenPalette);    icm.getBlues(bluePalette);    icm.getAlphas(alphaPalette);    this.bpp=1;    if (param == null) {      param=createGrayParam(redPalette,greenPalette,bluePalette,alphaPalette);    }    if (param == null) {      param=new PNGEncodeParam.Palette();    }    if (param instanceof PNGEncodeParam.Palette) {      PNGEncodeParam.Palette parami=(PNGEncodeParam.Palette)param;      if (parami.isPaletteSet()) {        int[] palette=parami.getPalette();        size=palette.length / 3;        int index=0;        for (int i=0; i < size; i++) {          redPalette[i]=(byte)palette[index++];          greenPalette[i]=(byte)palette[index++];          bluePalette[i]=(byte)palette[index++];          alphaPalette[i]=(byte)255;        }      }      this.colorType=PNG_COLOR_PALETTE;    } else     if (param instanceof PNGEncodeParam.Gray) {      redPalette=greenPalette=bluePalette=alphaPalette=null;      this.colorType=PNG_COLOR_GRAY;    } else {      throw new RuntimeException();    }  } else   if (numBands == 1) {    if (param == null) {      param=new PNGEncodeParam.Gray();    }    this.colorType=PNG_COLOR_GRAY;  } else   if (numBands == 2) {    if (param == null) {      param=new PNGEncodeParam.Gray();    }    if (param.isTransparencySet()) {      skipAlpha=true;      numBands=1;      if ((sampleSize[0] == 8) && (bitDepth < 8)) {        compressGray=true;      }      bpp=(bitDepth == 16) ? 2 : 1;      this.colorType=PNG_COLOR_GRAY;    } else {      if (this.bitDepth < 8) {        this.bitDepth=8;      }      this.colorType=PNG_COLOR_GRAY_ALPHA;    }  } else   if (numBands == 3) {    if (param == null) {      param=new PNGEncodeParam.RGB();    }    this.colorType=PNG_COLOR_RGB;  } else   if (numBands == 4) {    if (param == null) {      param=new PNGEncodeParam.RGB();    }    if (param.isTransparencySet()) {      skipAlpha=true;      numBands=3;      bpp=(bitDepth == 16) ? 6 : 3;      this.colorType=PNG_COLOR_RGB;    } else {      this.colorType=PNG_COLOR_RGB_ALPHA;    }  }  interlace=param.getInterlacing();  writeMagic();  writeIHDR();  writeCHRM();  writeGAMA();  writeICCP();  writeSBIT();  writeSRGB();  writePLTE();  writeHIST();  writeTRNS();  writeBKGD();  writePHYS();  writeSPLT();  writeTIME();  writeTEXT();  writeZTXT();  writePrivateChunks();  writeIDAT();  writeIEND();  dataOutput.flush();}  }
class C{  private LocalVariableInfo doit(){  if (method.getRegCount() > 0) {    for (int bi=method.getEntryBlockIndex(); bi >= 0; bi=workSet.nextSetBit(0)) {      workSet.clear(bi);      processBlock(bi);    }  }  resultInfo.setImmutable();  return resultInfo;}  }
class C{  public ArrayList<Prediction> predictions(){  return m_delegate.predictions();}  }
class C{  protected void attrAdded(Attr node,String newv){  LiveAttributeValue lav=getLiveAttributeValue(node);  if (lav != null) {    lav.attrAdded(node,newv);  }}  }
class C{  public ServiceInstanceException(String message,Object... args){  super(String.format(message,args));}  }
class C{  private static String nativeLibraryName(Object lib){  assert lib != null;  return U.field(lib,"name");}  }
class C{  public InferenceResult doInfer(TypeAlias typeAlias){  return inferTypeDispatch(typeAlias.getTypeSpecifier());}  }
class C{  private Node firstOfMode(boolean isData){  for (Node p=head; p != null; p=succ(p)) {    if (!p.isMatched())     return (p.isData == isData) ? p : null;  }  return null;}  }
class C{  public boolean isCreate(){  return this.opType == OP_TYPE_CREATE && isEntry();}  }
class C{  public void write(byte b[],int off,int len) throws IOException {  if ((off | len | (b.length - (len + off))| (off + len)) < 0)   throw new IndexOutOfBoundsException();  for (int i=0; i < len; i++) {    write(b[off + i]);  }}  }
class C{  public void futureNullResult(long futPtr){  enter();  try {    PlatformCallbackUtils.futureNullResult(envPtr,futPtr);  }  finally {    leave();  }}  }
class C{  public static void enableWebViewDebugging(boolean enabled){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {    WebView.setWebContentsDebuggingEnabled(enabled);  }}  }
class C{  public void reset(AccessibilityNodeInfoCompat newNode){  if (mNode != newNode && mNode != null && mOwned) {    mNode.recycle();  }  mNode=newNode;  mOwned=true;}  }
class C{  public void printStackTrace(PrintStream s){  super.printStackTrace(s);}  }
class C{  public static void createF2L(ActivityFacilities facilities,Network network,String path2File){  writeF2L(getF2L(facilities,network),path2File);}  }
class C{  @SuppressWarnings("unchecked") @SneakyThrows public T invoke(Object instance,Object arg1,Object arg2){  try {    return (T)invoker.invoke(instance,arg1,arg2);  } catch (  ClassCastException|WrongMethodTypeException e) {    validateArgs(instance,arg1,arg2);    throw new AssertionError("Unknown error",e);  }}  }
class C{  public Map<String,String> pageParametesAsMap(final PageParameters pageParameters){  final Map<String,String> map=new LinkedHashMap<String,String>();  if (pageParameters != null) {    for (    String key : pageParameters.getNamedKeys()) {      if (!commandConfig.isInternalCommandKey(key)) {        map.put(key,pageParameters.get(key).toString());      }    }  }  return map;}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException, InvalidObjectException {  s.defaultReadObject();  if (minSmallest > minLargest) {    throw new InvalidObjectException("Smallest minimum value must be less than largest minimum value");  }  if (maxSmallest > maxLargest) {    throw new InvalidObjectException("Smallest maximum value must be less than largest maximum value");  }  if (minLargest > maxLargest) {    throw new InvalidObjectException("Minimum value must be less than maximum value");  }}  }
class C{  public static boolean removeFurnaceSmelting(ItemStack aInput){  if (aInput != null) {    for (    Object tInput : FurnaceRecipes.smelting().getSmeltingList().keySet()) {      if (GT_Utility.isStackValid(tInput) && GT_Utility.areStacksEqual(aInput,(ItemStack)tInput,true)) {        FurnaceRecipes.smelting().getSmeltingList().remove(tInput);        return true;      }    }  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:28.328 -0500",hash_original_method="7D0F511FF715F3B1AC0B77B3BBE41D35",hash_generated_method="C81206D625A5153C836324BB767FFA60") @Override public int delete(Uri uri,String selection,String[] selectionArgs){  SQLiteDatabase db=mOpenHelper.getWritableDatabase();  final int length=uri.getPathSegments().size();  if (length != 1) {    throw new IllegalArgumentException("Unknown Uri");  }  final String base=uri.getPathSegments().get(0);  int count=0;  if (base.equals(sSuggestions)) {    count=db.delete(sSuggestions,selection,selectionArgs);  } else {    throw new IllegalArgumentException("Unknown Uri");  }  getContext().getContentResolver().notifyChange(uri,null);  return count;}  }
class C{  void purge(long cutoff){  while (sampleCount >= MIN_QUEUE_SIZE && oldest != null && cutoff - oldest.timestamp > 0) {    Sample removed=oldest;    if (removed.accelerating) {      acceleratingCount--;    }    sampleCount--;    oldest=removed.next;    if (oldest == null) {      newest=null;    }    pool.release(removed);  }}  }
class C{  public CommitTimeIndex(final IRawStore store,final Checkpoint checkpoint,final IndexMetadata metadata,boolean readOnly){  super(store,checkpoint,metadata,readOnly);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public Source<Double> allDoubles(){  return Compositions.combineWithValues(fromNegativeInfinityToPositiveInfinity(),Double.NaN);}  }
class C{  @Interruptible public static void startGCspyServer(){  GCspy.startGCspyServer();}  }
class C{  public FloatMatrix negi(){  for (int i=0; i < length; i++) {    put(i,-get(i));  }  return this;}  }
class C{  public static int findIndexOf(Object self,int startIndex,Closure closure){  int result=-1;  int i=0;  BooleanClosureWrapper bcw=new BooleanClosureWrapper(closure);  for (Iterator iter=InvokerHelper.asIterator(self); iter.hasNext(); i++) {    Object value=iter.next();    if (i < startIndex) {      continue;    }    if (bcw.call(value)) {      result=i;      break;    }  }  return result;}  }
class C{  public void endElement(String uri,String localName,String qName) throws SAXException {  m_resultContentHandler.endElement(uri,localName,qName);}  }
class C{  public SmsTextMessage(String msg,SmsAlphabet alphabet,SmsMsgClass messageClass){  this(msg,SmsDcs.getGeneralDataCodingDcs(alphabet,messageClass));}  }
class C{  public static ComponentUI createUI(JComponent c){  return new CompiereComboBoxUI();}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public static void openElectricChestGui(EntityPlayerMP player,TileEntityElectricChest tileEntity,IInventory inventory,boolean isBlock){  player.getNextWindowId();  player.closeContainer();  int id=player.currentWindowId;  if (isBlock) {    Mekanism.packetHandler.sendTo(new ElectricChestMessage(ElectricChestPacketType.CLIENT_OPEN,true,false,0,id,null,Coord4D.get(tileEntity)),player);  } else {    Mekanism.packetHandler.sendTo(new ElectricChestMessage(ElectricChestPacketType.CLIENT_OPEN,false,false,0,id,null,null),player);  }  player.openContainer=new ContainerElectricChest(player.inventory,tileEntity,inventory,isBlock);  player.openContainer.windowId=id;  player.openContainer.addCraftingToCrafters(player);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected void writeInt(int value) throws IOException {  int output=value;  if (littleEndian) {    output=Integer.reverseBytes(value);  }  outputStream.write(new byte[]{(byte)(output >> 24),(byte)(output >> 16),(byte)(output >> 8),(byte)output});}  }
class C{  public byte[] asn1Encode() throws Asn1Exception, IOException {  DerOutputStream out=new DerOutputStream();  out.putDerValue(new KerberosString(this.realm).toDerValue());  return out.toByteArray();}  }
class C{  public JaroWinklerDistance(){}  }
class C{  public StrBuilder insert(int index,char chars[]){  validateIndex(index);  if (chars == null) {    return insert(index,nullText);  }  int len=chars.length;  if (len > 0) {    ensureCapacity(size + len);    System.arraycopy(buffer,index,buffer,index + len,size - index);    System.arraycopy(chars,0,buffer,index,len);    size+=len;  }  return this;}  }
class C{  public void reset(){  extensions=new Hashtable();  extOrdering=new Vector();}  }
class C{  public MainLayoutPanel(Window parent){  this(DEFAULT_DP_TRIANGLE_VISIBILITY,parent);}  }
class C{  public static RowLayout createMarginlessRowLayout(int type){  RowLayout result=new RowLayout(type);  result.marginLeft=0;  result.marginTop=0;  result.marginRight=0;  result.marginBottom=0;  result.fill=true;  result.marginHeight=0;  result.marginWidth=0;  result.justify=false;  result.spacing=0;  result.wrap=false;  return result;}  }
class C{  protected AbstractSiteMap processGzip(URL url,byte[] response) throws IOException, UnknownFormatException {  LOG.debug("Processing gzip");  AbstractSiteMap smi;  InputStream is=new ByteArrayInputStream(response);  String xmlUrl=url.toString().replaceFirst("\\.gz$","");  LOG.debug("XML url = {}",xmlUrl);  BOMInputStream decompressed=new BOMInputStream(new GZIPInputStream(is));  InputSource in=new InputSource(decompressed);  in.setSystemId(xmlUrl);  smi=processXml(url,in);  decompressed.close();  return smi;}  }
class C{  static int mulAdd(int[] out,int[] in,int offset,int len,int k){  implMulAddCheck(out,in,offset,len,k);  return implMulAdd(out,in,offset,len,k);}  }
class C{  private void append(StringBuffer result,CharacterIterator iterator){  if (iterator.first() != CharacterIterator.DONE) {    char aChar;    result.append(iterator.first());    while ((aChar=iterator.next()) != CharacterIterator.DONE) {      result.append(aChar);    }  }}  }
class C{  @TargetApi(21) private static void _handle_icon(PackageManager pacman,ApplicationInfo info,InstalledApp app){  if (info == null || app == null) {    return;  }  Drawable icon=info.loadIcon(pacman);  if (icon == null) {    return;  }  if (icon instanceof BitmapDrawable) {    new AppIcon(app,(BitmapDrawable)icon).save();  } else   if (Build.VERSION.SDK_INT >= 21 && icon instanceof VectorDrawable) {    VectorDrawable vd=(VectorDrawable)icon;    final Bitmap bmp=Bitmap.createBitmap(vd.getIntrinsicWidth(),vd.getIntrinsicHeight(),Bitmap.Config.ARGB_8888);    final Canvas canvas=new Canvas(bmp);    vd.setBounds(0,0,canvas.getWidth(),canvas.getHeight());    vd.draw(canvas);    new AppIcon(app,new BitmapDrawable(Resources.getSystem(),bmp)).save();  }}  }
class C{  public void include(Template includedTemplate) throws TemplateException, IOException {  final Template prevTemplate;  final boolean parentReplacementOn=isBeforeIcI2322();  prevTemplate=getTemplate();  if (parentReplacementOn) {    setParent(includedTemplate);  } else {    legacyParent=includedTemplate;  }  importMacros(includedTemplate);  try {    visit(includedTemplate.getRootTreeNode());  }  finally {    if (parentReplacementOn) {      setParent(prevTemplate);    } else {      legacyParent=prevTemplate;    }  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void verifyChecksum() throws LogConsistencyException {  try {    if (!checkCrc()) {      String fileName;      if (file == null)       fileName="unknown"; else       fileName=file.getName();      String message="Log record CRC failure: file=" + fileName + " offset="+ getOffset()+ " crc type="+ getCrcType()+ " stored crc="+ crc+ " computed crc="+ computedCrc;      throw new LogConsistencyException(message);    }  } catch (  IOException e) {    String fileName;    if (file == null)     fileName="unknown"; else     fileName=file.getName();    String message="CRC computation failure: file=" + fileName + " offset="+ getOffset()+ " crc type="+ getCrcType()+ " stored crc="+ getCrc();    throw new LogConsistencyException(message,e);  }}  }
class C{  @Inline protected final void checkHeadInsert(int arity){  if (bufferOffset(head).EQ(bufferSentinel(arity)) || head.EQ(HEAD_INITIAL_VALUE))   headOverflow(arity); else   if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(bufferOffset(head).sLE(bufferLastOffset(arity)));}  }
class C{  public SimpleTree simulateTree(TaxonList taxa,DemographicModel model){  return simulator.simulateTree(taxa,model.getDemographicFunction());}  }
class C{  public float[] toAxisAngle(){  float[] res=new float[4];  float sa=(float)Math.sqrt(1.0f - w * w);  if (sa < MathUtils.EPS) {    sa=1.0f;  } else {    sa=1.0f / sa;  }  res[0]=(float)Math.acos(w) * 2.0f;  res[1]=x * sa;  res[2]=y * sa;  res[3]=z * sa;  return res;}  }
class C{  public static <K,V>Map<K,V> constrainedMap(Map<K,V> map,MapConstraint<? super K,? super V> constraint){  return new ConstrainedMap<K,V>(map,constraint);}  }
class C{  public GF2nPolynomial(GF2Polynomial polynomial,GF2nField B1){  size=B1.getDegree() + 1;  coeff=new GF2nElement[size];  int i;  if (B1 instanceof GF2nONBField) {    for (i=0; i < size; i++) {      if (polynomial.testBit(i)) {        coeff[i]=GF2nONBElement.ONE((GF2nONBField)B1);      } else {        coeff[i]=GF2nONBElement.ZERO((GF2nONBField)B1);      }    }  } else   if (B1 instanceof GF2nPolynomialField) {    for (i=0; i < size; i++) {      if (polynomial.testBit(i)) {        coeff[i]=GF2nPolynomialElement.ONE((GF2nPolynomialField)B1);      } else {        coeff[i]=GF2nPolynomialElement.ZERO((GF2nPolynomialField)B1);      }    }  } else {    throw new IllegalArgumentException("PolynomialGF2n(Bitstring, GF2nField): B1 must be " + "an instance of GF2nONBField or GF2nPolynomialField!");  }}  }
class C{  public void addShutdownHook(Thread hook){  SecurityManager sm=System.getSecurityManager();  if (sm != null) {    sm.checkPermission(RuntimePermissionCollection.SHUTDOWN_HOOKS_PERMISSION);  }  if (hook == null)   throw new NullPointerException("null is not allowed here");  if (hook.getState() != Thread.State.NEW) {    throw new IllegalArgumentException();  }  if (VMState > 0) {    throw new IllegalStateException();  }synchronized (hooksList) {    if (hooksList.contains(hook)) {      throw new IllegalArgumentException();    }    hooksList.add(hook);  }}  }
class C{  public final void addException(Throwable cause){  Assert.assertTrue(cause != null,"unexpected null exception to add to FunctionException");  getExceptions().add(cause);}  }
class C{  public void uninstallUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);  }}  }
class C{  protected void resetPalette(){  java.awt.Container pal=getPalette();  boolean putUp=false;  if (pal != null && pal.isVisible()) {    putUp=true;    setPaletteVisible(false);  }  if (putUp) {    setPaletteVisible(true);  }}  }
class C{  public HorizontalSpinner(final Composite parent,final int style){  super(parent,style);  if ((style & SWT.LEFT) == SWT.LEFT) {    this.alignment=ALIGNMENT.LEFT;  }  if ((style & SWT.RIGHT) == SWT.RIGHT) {    this.alignment=ALIGNMENT.RIGHT;  }  final GridLayout gd=new GridLayout(3,false);  gd.horizontalSpacing=gd.verticalSpacing=0;  gd.marginWidth=gd.marginHeight=0;  this.setLayout(gd);  this.createContent(style);  this.addTextListeners();  this.addButtonsListener();  this.addModifyListeners();  this.decimalFormatSeparator=new DecimalFormatSymbols().getDecimalSeparator();}  }
class C{  protected SimpleExpressionEvaluator(ExpressionType type,Callable<String> stringCallable,DoubleCallable doubleCallable,Callable<Boolean> booleanCallable,Callable<Date> dateCallable,boolean isConstant){  this.stringCallable=stringCallable;  this.dateCallable=dateCallable;  this.doubleCallable=doubleCallable;  this.booleanCallable=booleanCallable;  this.type=type;  this.isConstant=isConstant;}  }
class C{  public static String toBase64(byte[] data){  if (data == null) {    return null;  }  int len=data.length;  if (len == 0) {    return "";  }  int olen=4 * ((len + 2) / 3);  char[] chars=new char[olen];  int iidx=0;  int oidx=0;  int charsLeft=len;  while (charsLeft > 0) {    int b0=data[iidx++] & 0xff;    int b1=(charsLeft > 1) ? data[iidx++] & 0xff : 0;    int b2=(charsLeft > 2) ? data[iidx++] & 0xff : 0;    int b24=(b0 << 16) | (b1 << 8) | b2;    int c0=(b24 >> 18) & 0x3f;    int c1=(b24 >> 12) & 0x3f;    int c2=(b24 >> 6) & 0x3f;    int c3=b24 & 0x3f;    chars[oidx++]=base64Chars[c0];    chars[oidx++]=base64Chars[c1];    chars[oidx++]=(charsLeft > 1) ? base64Chars[c2] : '=';    chars[oidx++]=(charsLeft > 2) ? base64Chars[c3] : '=';    charsLeft-=3;  }  return new String(chars);}  }
class C{  public void addTableDefinition(TableDefinition tableDefinition){  this.tableDefinitions.add(tableDefinition);}  }
class C{  public static <E>ImmutableList<E> of(E e1,E e2,E e3,E e4,E e5,E e6){  return construct(e1,e2,e3,e4,e5,e6);}  }
class C{  public static Vector3D max(Vector3D a,Vector3D b){  return new Vector3D(FastMath.max(a.getX(),b.getX()),FastMath.max(a.getY(),b.getY()),FastMath.max(a.getZ(),b.getZ()));}  }
class C{  public void subdivide(double t,Cubic c0,Cubic c1){  if ((c0 == null) && (c1 == null))   return;  Point2D.Double np=eval(t);  Point2D.Double npd=evalDt(t);  if (c0 != null) {    c0.p1.x=p1.x;    c0.p1.y=p1.y;    c0.p2.x=(p2.x + p1.x) * t;    c0.p2.y=(p2.y + p1.y) * t;    c0.p3.x=np.x - (npd.x * t / 3);    c0.p3.y=np.y - (npd.y * t / 3);    c0.p4.x=np.x;    c0.p4.y=np.y;  }  if (c1 != null) {    c1.p1.x=np.x;    c1.p1.y=np.y;    c1.p2.x=np.x + (npd.x * (1 - t) / 3);    c1.p2.y=np.y + (npd.y * (1 - t) / 3);    c1.p3.x=(p4.x + p3.x) * (1 - t);    c1.p3.y=(p4.y + p3.y) * (1 - t);    c1.p4.x=p4.x;    c1.p4.y=p4.y;  }}  }
class C{  private static void updateDisplay(final int menuSelection){switch (menuSelection) {case GENERAL:    borderPane.setCenter(getGeneralContent());  break;case PAGEDISPLAY:borderPane.setCenter(getPageDisplayContent());break;case INTERFACE:borderPane.setCenter(getInterfaceContent());break;case COLOR:borderPane.setCenter(getColorContent());break;case MENU:borderPane.setCenter(getMenuContent());break;case PRINTING:borderPane.setCenter(getPrintingContent());break;case EXTENSION:borderPane.setCenter(getExtensionContent());break;default :System.out.println("menu selection not available");break;}}  }
class C{  public boolean isOKVisible(){  return bOK.isVisible();}  }
class C{  public static String encode(byte[] input){  if (input.length == 0) {    return "";  }  int zeros=0;  while (zeros < input.length && input[zeros] == 0) {    ++zeros;  }  input=Arrays.copyOf(input,input.length);  char[] encoded=new char[input.length * 2];  int outputStart=encoded.length;  for (int inputStart=zeros; inputStart < input.length; ) {    encoded[--outputStart]=ALPHABET[divmod(input,inputStart,256,58)];    if (input[inputStart] == 0) {      ++inputStart;    }  }  while (outputStart < encoded.length && encoded[outputStart] == ENCODED_ZERO) {    ++outputStart;  }  while (--zeros >= 0) {    encoded[--outputStart]=ENCODED_ZERO;  }  return new String(encoded,outputStart,encoded.length - outputStart);}  }
class C{  private void createRecords(int AD_Client_ID,int AD_Org_ID,int S_Resource_ID,int M_Warehouse_ID) throws SQLException {  final String sql="INSERT INTO PP_MRP (" + "ad_org_id, created, createdby , dateordered," + "datepromised, datestart, datestartschedule, description,"+ "docstatus, isactive , "+ "m_forecastline_id, m_forecast_id,"+ "pp_order_id, pp_order_bomline_id,"+ "c_order_id, c_orderline_id,"+ "dd_order_id, dd_orderline_id,"+ "m_requisition_id, m_requisitionline_id,"+ "m_product_id, m_warehouse_id, "+ "pp_mrp_id, planner_id, "+ "qty, typemrp, ordertype, updated, updatedby, value, "+ "ad_client_id, s_resource_id, c_bpartner_id )";  List<Object> params=new ArrayList<Object>();  params.add(AD_Client_ID);  params.add(AD_Org_ID);  params.add(M_Warehouse_ID);  String sql_insert=" SELECT t.ad_org_id," + "t.created, t.createdby , t.datepromised ," + "t.datepromised, t.datepromised, t.datepromised, f.Name,"+ "'IP', t.isactive , "+ "t.m_forecastline_id, t.m_forecast_id, "+ "null, null,"+ "null, null,"+ "null, null,"+ "null, null,"+ "t.m_product_id, t.m_warehouse_id,"+ "nextidfunc(53040,'N'), null ,"+ "t.qty,  'D', 'FCT', t.updated, t.updatedby, f.Name,"+ "t.ad_client_id , null as S_Resource_ID, null as C_BPartner_ID "+ " FROM M_ForecastLine t "+ " INNER JOIN M_Forecast f ON (f.M_Forecast_ID=t.M_Forecast_ID) "+ " WHERE t.Qty > 0 AND "+ "t.AD_Client_ID=? AND t.AD_Org_ID=? AND t.M_Warehouse_ID= ?";  executeUpdate(sql + sql_insert,params);  commitEx();  sql_insert=" SELECT t.ad_org_id," + "t.created, t.createdby , t.dateordered ," + "t.datepromised, t.datepromised, t.dateordered, o.DocumentNo,"+ "o.DocStatus, o.isactive , "+ " null, null, "+ " null, null, "+ " t.c_order_id, t.c_orderline_id, "+ "null, null,"+ " null, null, "+ "t.m_product_id, t.m_warehouse_id,"+ "nextidfunc(53040,'N'), null ,"+ "t.QtyOrdered-t.QtyDelivered, 'D', 'SOO', t.updated, t.updatedby, o.DocumentNo,"+ "t.ad_client_id , null as S_Resource_ID, o.C_BPartner_ID"+ " FROM C_OrderLine t"+ " INNER JOIN C_Order o  ON (o.c_order_id=t.c_order_id)"+ " WHERE  (t.QtyOrdered - t.QtyDelivered) <> 0 AND o.DocStatus IN ('IP','CO') AND "+ "t.AD_Client_ID=? AND t.AD_Org_ID=? AND t.M_Warehouse_ID= ? AND o.IsSOTrx='Y' AND t.IsConsumesForecast='N'";  executeUpdate(sql + sql_insert,params);  commitEx();  sql_insert=" SELECT t.ad_org_id," + "t.created, t.createdby , t.dateordered ," + "t.datepromised, t.datepromised, t.dateordered, o.DocumentNo,"+ "o.DocStatus, o.isactive , "+ " null, null, "+ " null, null, "+ " t.c_order_id, t.c_orderline_id, "+ "null, null,"+ " null, null, "+ "t.m_product_id, t.m_warehouse_id,"+ "nextidfunc(53040,'N'), null ,"+ "t.QtyOrdered-t.QtyDelivered,  'S' , 'POO', t.updated, t.updatedby, o.DocumentNo,"+ "t.ad_client_id , null as S_Resource_ID, o.C_BPartner_ID"+ " FROM C_OrderLine t"+ " INNER JOIN C_Order o  ON (o.c_order_id=t.c_order_id)"+ " WHERE  (t.QtyOrdered - t.QtyDelivered) <> 0 AND o.DocStatus IN ('IP','CO') AND "+ "t.AD_Client_ID=? AND t.AD_Org_ID=? AND t.M_Warehouse_ID= ? AND o.IsSOTrx='N'";  executeUpdate(sql + sql_insert,params);  commitEx();  sql_insert=" SELECT rl.ad_org_id," + "rl.created, rl.createdby , t.DateDoc," + " t.daterequired,  t.daterequired,  t.datedoc, t.DocumentNo,"+ "t.DocStatus, t.isactive , "+ " null, null, "+ " null, null, "+ " null, null, "+ "null, null,"+ "rl.m_requisition_id, rl.m_requisitionline_id, "+ "rl.m_product_id, t.m_warehouse_id,"+ "nextidfunc(53040,'N'), null ,"+ "rl.Qty, 'S', 'POR', rl.updated, rl.updatedby, t.DocumentNo,"+ "rl.ad_client_id , null as S_Resource_ID, null as C_BPartner_ID "+ " FROM M_RequisitionLine rl"+ " INNER JOIN M_Requisition t ON (rl.m_requisition_id=t.m_requisition_id)"+ " WHERE rl.Qty > 0 AND t.DocStatus IN ('DR','IN') AND "+ "t.AD_Client_ID=? AND t.AD_Org_ID=? AND t.M_Warehouse_ID= ?";  executeUpdate(sql + sql_insert,params);  commitEx();  params=new ArrayList<Object>();  params.add(AD_Client_ID);  params.add(AD_Org_ID);  params.add(S_Resource_ID);  params.add(M_Warehouse_ID);  sql_insert=" SELECT t.ad_org_id," + "t.created, t.createdby , t.DateOrdered," + "t.datepromised, t.datepromised, t.datestartschedule , t.DocumentNo,"+ "t.DocStatus, t.isactive , "+ " null, null, "+ "t.pp_order_id, null,"+ " null, null, "+ "null, null,"+ " null, null, "+ "t.m_product_id, t.m_warehouse_id,"+ "nextidfunc(53040,'N'), null ,"+ "t.QtyOrdered-t.QtyDelivered,  'S', 'MOP', t.updated, t.updatedby, t.DocumentNo,"+ "t.ad_client_id, t.S_Resource_ID, null as C_BPartner_ID "+ " FROM PP_Order t "+ " WHERE (t.QtyOrdered - t.QtyDelivered) <> 0 AND t.DocStatus IN ('DR','IP','CO') AND "+ "t.AD_Client_ID=? AND t.AD_Org_ID=? AND t.S_Resource_ID=? AND t.M_Warehouse_ID= ?";  executeUpdate(sql + sql_insert,params);  commitEx();  sql_insert=" SELECT t.ad_org_id," + "t.created, t.createdby , o.DateOrdered," + "o.datepromised, o.datepromised, o.datestartschedule, o.DocumentNo,"+ "o.DocStatus, o.isactive , "+ " null, null, "+ "t.pp_order_id, t.pp_order_bomline_id,"+ " null, null, "+ "null, null,"+ " null, null, "+ "t.m_product_id, t.m_warehouse_id,"+ "nextidfunc(53040,'N'), null ,"+ "t.QtyRequired-t.QtyDelivered,  'D', 'MOP', t.updated, t.updatedby, o.DocumentNo,"+ "t.ad_client_id, o.S_Resource_ID, null as C_BPartner_ID "+ " FROM PP_Order_BOMLine t "+ " INNER JOIN PP_Order o ON (o.pp_order_id=t.pp_order_id)"+ " WHERE  (t.QtyRequired-t.QtyDelivered) <> 0 AND o.DocStatus IN ('DR','IP','CO') AND "+ "t.AD_Client_ID=? AND t.AD_Org_ID=? AND o.S_Resource_ID=? AND t.M_Warehouse_ID= ?";  executeUpdate(sql + sql_insert,params);  commitEx();  sql_insert=" SELECT t.ad_org_id," + "t.created, t.createdby , t.DateOrdered," + "t.datepromised, t.datepromised, t.dateordered, o.DocumentNo,"+ "o.DocStatus, o.isactive , "+ " null, null, "+ " null, null, "+ "null, null,"+ " t.dd_order_id, t.dd_orderline_id, "+ " null, null, "+ "t.m_product_id, l.m_warehouse_id,"+ "nextidfunc(53040,'N'), null ,"+ "t.QtyOrdered-t.QtyDelivered, 'D', 'DOO', t.updated, t.updatedby, o.DocumentNo,"+ "t.ad_client_id , null as S_Resource_ID, o.C_BPartner_ID"+ " FROM DD_OrderLine t"+ " INNER JOIN DD_Order o  ON (o.dd_order_id=t.dd_order_id)"+ " INNER JOIN M_Locator l ON (l.M_Locator_ID=t.M_Locator_ID)"+ " WHERE  (t.QtyOrdered - t.QtyDelivered) <> 0 AND o.DocStatus IN ('IP','CO') AND "+ "t.AD_Client_ID=? AND t.AD_Org_ID=? ";  params=new ArrayList<Object>();  params.add(AD_Client_ID);  params.add(AD_Org_ID);  executeUpdate(sql + sql_insert,params);  commitEx();  sql_insert=" SELECT t.ad_org_id," + "t.created, t.createdby , t.DateOrdered," + "t.datepromised, t.datepromised, t.dateordered, o.DocumentNo,"+ "o.DocStatus, o.isactive , "+ " null, null, "+ " null, null, "+ "null, null,"+ " t.dd_order_id, t.dd_orderline_id, "+ " null, null, "+ "t.m_product_id, l.m_warehouse_id,"+ "nextidfunc(53040,'N'), null ,"+ "t.QtyOrdered-t.QtyDelivered, 'S', 'DOO', t.updated, t.updatedby, o.DocumentNo,"+ "t.ad_client_id , null as S_Resource_ID, o.C_BPartner_ID"+ " FROM DD_OrderLine t"+ " INNER JOIN DD_Order o  ON (o.dd_order_id=t.dd_order_id)"+ " INNER JOIN M_Locator l ON (l.M_Locator_ID=t.M_LocatorTo_ID)"+ " WHERE  (t.QtyOrdered - t.QtyDelivered) <> 0 AND o.DocStatus IN ('IP','CO') AND "+ "o.AD_Client_ID=? AND o.AD_Org_ID=? ";  executeUpdate(sql + sql_insert,params);  commitEx();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.277 -0500",hash_original_method="7928C6AF630E4BCE57D31FA4979B7453",hash_generated_method="8EF7C6FA85B09C645E654C803E6CB6A8") public ToHeader createToHeader(Address address,String tag) throws ParseException {  if (address == null)   throw new NullPointerException("null address");  To to=new To();  to.setAddress(address);  if (tag != null)   to.setTag(tag);  return to;}  }
class C{  public boolean isUninstall(){  Object oo=get_Value(COLUMNNAME_Uninstall);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static int toModifier(int accflags){  return accflags;}  }
class C{  public boolean verifyIntegrity(Map<IgniteUuid,IgfsEntryInfo> infos,boolean relaxed){  if (relaxed) {    IgfsEntryInfo info=infos.get(ids[lastExistingIdx]);    if (info == null)     return false;    if (lastExistingIdx == ids.length - 1 && lastExistingIdx > 0) {      IgfsEntryInfo parentInfo=infos.get(ids[lastExistingIdx - 1]);      if (parentInfo == null || !parentInfo.hasChild(parts[lastExistingIdx],ids[lastExistingIdx]))       return false;    }  } else {    for (int i=0; i <= lastExistingIdx; i++) {      IgfsEntryInfo info=infos.get(ids[i]);      if (info == null)       return false;      if (i < lastExistingIdx) {        if (!info.hasChild(parts[i + 1],ids[i + 1]))         return false;      }    }  }  return true;}  }
class C{  private void createCountsLoadCurveGraphs(){  PtCountsLoadCurveGraphCreator cgc=new PtCountsLoadCurveGraphCreator("");  createCountsLoadCurveGraphs(PtCountsType.Boarding,cgc);  createCountsLoadCurveGraphs(PtCountsType.Alighting,cgc);  createCountsLoadCurveGraphs(PtCountsType.Occupancy,cgc);}  }
class C{  public int model(){  return theModel;}  }
class C{  static void checkIdentifier(final String name,final String msg){  checkIdentifier(name,0,-1,msg);}  }
class C{  public AttributeKey(String key,Class<T> clazz,@Nullable T defaultValue,boolean isNullValueAllowed){  this(key,clazz,defaultValue,isNullValueAllowed,null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:15.386 -0500",hash_original_method="C2A186E08A6901259D50AE521996EDF2",hash_generated_method="BCC9369DD1AC7B1C7E7AAADD8CD3AEF2") protected void shutdown(){  session=null;  version=null;  in=null;  handshakeProtocol=null;  alertProtocol=null;  appData=null;  if (pendingConnectionState != null) {    pendingConnectionState.shutdown();  }  pendingConnectionState=null;  if (activeReadState != null) {    activeReadState.shutdown();  }  activeReadState=null;  if (activeReadState != null) {    activeReadState.shutdown();  }  activeWriteState=null;}  }
class C{  public boolean isEmpty(){  return events.isEmpty();}  }
class C{  public static void readSkelFile(File skeletonFile){  if (skeletonFile == null)   throw new IllegalArgumentException("Skeleton file must not be null");  if (!skeletonFile.isFile() || !skeletonFile.canRead()) {    Out.error(ErrorMessages.CANNOT_READ_SKEL,skeletonFile.toString());    throw new GeneratorException();  }  Out.println(ErrorMessages.READING_SKEL,skeletonFile.toString());  try {    BufferedReader reader=new BufferedReader(new FileReader(skeletonFile));    readSkel(reader);  } catch (  IOException e) {    Out.error(ErrorMessages.SKEL_IO_ERROR);    throw new GeneratorException();  }}  }
class C{  private boolean journalRebuildRequired(){  final int REDUNDANT_OP_COMPACT_THRESHOLD=2000;  return redundantOpCount >= REDUNDANT_OP_COMPACT_THRESHOLD && redundantOpCount >= lruEntries.size();}  }
class C{  public static Bitmap decodeSampledBitmapFromFile(String filename,int reqWidth,int reqHeight,ImageCache cache){  final BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  BitmapFactory.decodeFile(filename,options);  options.inSampleSize=calculateInSampleSize(options,reqWidth,reqHeight);  if (Utils.hasHoneycomb()) {    addInBitmapOptions(options,cache);  }  options.inJustDecodeBounds=false;  return BitmapFactory.decodeFile(filename,options);}  }
class C{  public Object addDesignations(Object entity,String... uris) throws RepositoryException {  URI[] types=new URI[uris.length];  for (int i=0; i < uris.length; i++) {    types[i]=getValueFactory().createURI(uris[i]);  }  return addDesignations(entity,types);}  }
class C{  public LongKeyMap(int initialCapacity,float loadFactor){  if (initialCapacity < 0)   throw new IllegalArgumentException("Illegal initial capacity: " + initialCapacity);  if (initialCapacity > MAXIMUM_CAPACITY)   initialCapacity=MAXIMUM_CAPACITY;  if (loadFactor <= 0 || Float.isNaN(loadFactor))   throw new IllegalArgumentException("Illegal load factor: " + loadFactor);  int capacity=1;  while (capacity < initialCapacity)   capacity<<=1;  this.loadFactor=loadFactor;  threshold=(int)(capacity * loadFactor);  table=new LongEntry[capacity];}  }
class C{  public Tween target(float targetValue1,float targetValue2){  targetValues[0]=targetValue1;  targetValues[1]=targetValue2;  return this;}  }
class C{  private boolean betweenZeroAndOne(final String paramName,final double val){  if ((val < 0) || (val > 1)) {    JOptionPane.showMessageDialog(null,paramName + "should be between 0 and 1","Warning!",JOptionPane.WARNING_MESSAGE);    return false;  }  return true;}  }
class C{  public List<Synapse> connectNeurons(final boolean looseSynapses){  ArrayList<Synapse> syns=new ArrayList<Synapse>();  for (  Neuron source : sourceNeurons) {    makeExcitatory(source,syns,looseSynapses);    makeInhibitory(source,syns,looseSynapses);  }  return syns;}  }
class C{  public static byte[] copyOfRange(byte[] original,int start,int end){  if (start <= end) {    if (original.length >= start && 0 <= start) {      int length=end - start;      int copyLength=Math.min(length,original.length - start);      byte[] copy=new byte[length];      System.arraycopy(original,start,copy,0,copyLength);      return copy;    }    throw new ArrayIndexOutOfBoundsException();  }  throw new IllegalArgumentException();}  }
class C{  protected void propertyChange(PropertyChangeEvent evt){  super.propertyChange(evt);  if (evt.getPropertyName().equals("lineWrap") || evt.getPropertyName().equals("wrapStyleWord") || evt.getPropertyName().equals("tabSize")) {    modelChanged();  } else   if ("editable".equals(evt.getPropertyName())) {    updateFocusTraversalKeys();  }}  }
class C{  private void onWebCheckoutButtonClicked(){  launchBrowser(getSampleApplication().getCheckout().getWebUrl());}  }
class C{  public boolean isNoGrid(){  return noGrid;}  }
class C{  protected void rehash(){  Entry[] oldTable=table;  table=new Entry[oldTable.length * 2 + 1];  for (int i=oldTable.length - 1; i >= 0; i--) {    for (Entry old=oldTable[i]; old != null; ) {      Entry e=old;      old=old.next;      int index=e.hash % table.length;      e.next=table[index];      table[index]=e;    }  }}  }
class C{  public synchronized OMGraphicList prepare(){  Projection projection=getProjection();  OMGraphicList retList=new OMGraphicList();  retList.setTraverseMode(OMList.FIRST_ADDED_ON_TOP);  if (frameProvider == null) {    setPaths(paths);    if (frameProvider == null) {      logger.warning(getName() + ": null frame provider - either no RPF paths were set, or no frame provider was assigned.  The RpfLayer has no way to get RPF data.");      return retList;    }  }  if (coverage != null && coverage.isInUse()) {    coverage.prepare(projection,viewAttributes.chartSeries);    retList.add(coverage);  }  if (!isProjectionOK(projection)) {    return retList;  }  if (this.cache == null) {    rpfLogger.fine(getName() + ": Creating cache!");    this.cache=new RpfCacheManager(frameProvider,viewAttributes,subframeCacheSize,auxSubframeCacheSize);  }  if (!(projection instanceof EqualArc) && (viewAttributes.showMaps || viewAttributes.showInfo)) {  }  rpfLogger.fine(getName() + " doing it");  if (rpfLogger.isLoggable(Level.FINE)) {    rpfLogger.fine(getName() + "calling getRectangle " + " with projection: "+ projection+ " ul = "+ projection.getUpperLeft()+ " lr = "+ projection.getLowerRight());  }  if (frameProvider.needViewAttributeUpdates()) {    frameProvider.setViewAttributes(viewAttributes);  }  try {    retList.addAll(this.cache.getRectangle(projection));    if (logger.isLoggable(Level.FINE)) {      logger.fine(getName() + ": finished with " + retList.size()+ " graphics");    }  } catch (  java.lang.NullPointerException npe) {    logger.warning(getName() + ": Something really bad happened - \n " + npe);    npe.printStackTrace();    retList=new OMGraphicList();    this.cache=null;  }  return retList;}  }
class C{  private Hash(){  instanceNotAllowed(getClass());}  }
class C{  public CDeleteBookmarkAction(final BookmarkManager manager,final CBookmark bookmark){  super(String.format("Remove bookmark at offset %s",bookmark.getAddress().toHexString()));  m_manager=Preconditions.checkNotNull(manager,"IE01411: Manager argument can't be null");  m_bookmark=bookmark;}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMFETurbulenceElement(prefix,(AbstractDocument)doc);}  }
class C{  static public String escapeTags(final String input){  if (input == null || input.length() == 0 || (input.indexOf('"') == -1 && input.indexOf('&') == -1 && input.indexOf('<') == -1 && input.indexOf('>') == -1)) {    return input;  }  StringBuilder buf=new StringBuilder(input.length() + 6);  char ch;  int len=input.length();  for (int i=0; i < len; i++) {    ch=input.charAt(i);    if (ch > '>') {      buf.append(ch);    } else     if (ch == '<') {      buf.append("&lt;");    } else     if (ch == '>') {      buf.append("&gt;");    } else     if (ch == '&') {      buf.append("&amp;");    } else     if (ch == '"') {      buf.append("&quot;");    } else {      buf.append(ch);    }  }  return buf.toString();}  }
class C{  public Peek(Consumer<T> peeker){  this.peeker=peeker;}  }
class C{  public Map<String,String> hgetAll(final String key){  checkIsInMulti();  client.hgetAll(key);  return BuilderFactory.STRING_MAP.build(client.getBinaryMultiBulkReply());}  }
class C{  @Field(5) public double dblVal(){  return this.io.getDoubleField(this,5);}  }
class C{  public void addStyleSheet(StyleSheet ss){synchronized (this) {    if (linkedStyleSheets == null) {      linkedStyleSheets=new Vector<StyleSheet>();    }    if (!linkedStyleSheets.contains(ss)) {      int index=0;      if (ss instanceof javax.swing.plaf.UIResource && linkedStyleSheets.size() > 1) {        index=linkedStyleSheets.size() - 1;      }      linkedStyleSheets.insertElementAt(ss,index);      linkStyleSheetAt(ss,index);    }  }}  }
class C{  public Style addStyle(String nm,Style parent){  StyledDocument doc=getStyledDocument();  return doc.addStyle(nm,parent);}  }
class C{  @Override public int execute(final FormObject form,final int type,final String code,final int eventType,final char keyPressed){  int messageCode=ActionHandler.NOMESSAGE;  if (code instanceof String) {    final String js=code;    final String[] args=JSFunction.convertToArray(js);    final String command=args[0];    if (command.startsWith("AF")) {      messageCode=handleAFCommands(form,command,js,args,eventType,keyPressed);    }  }  return messageCode;}  }
class C{  public void removeVariable(String key){  m_envVars.remove(key);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static boolean putLong(Context context,String key,long value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putLong(key,value);  return editor.commit();}  }
class C{  public static void deleteImage(final IdocFrame ui){  FileVO ele=(FileVO)ui.getFileVO();  ele.getListImage().remove(ele.getImageSelectIndex());  ele.setImageSelectIndex(0);}  }
class C{  public String remainder(){  final String remainder=queue.substring(pos,queue.length());  pos=queue.length();  return remainder;}  }
class C{  public void flag(UserConfig config){  config.addCredentials(this);  POST(this.url + "/flag-user",config.toXML());}  }
class C{  public void acquireReadLock(){}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public void updateSizes(int size){  if (size == LARGE) {    setSizeParameters(CIRCLE_DIAMETER_LARGE,CIRCLE_DIAMETER_LARGE,CENTER_RADIUS_LARGE,STROKE_WIDTH_LARGE,ARROW_WIDTH_LARGE,ARROW_HEIGHT_LARGE);  } else {    setSizeParameters(CIRCLE_DIAMETER,CIRCLE_DIAMETER,CENTER_RADIUS,STROKE_WIDTH,ARROW_WIDTH,ARROW_HEIGHT);  }}  }
class C{  public void readLinksRepeated(final int[] columnsIndices,final BufferedReader reader) throws IOException {  String line=reader.readLine();  long id=0;  List<String> zeroCapacity=new ArrayList<String>();  List<String> loops=new ArrayList<String>();  while (line != null && line.length() > 0) {    final String[] parts=line.split(";");    String origId=parts[columnsIndices[0]];    Node from=network.getNodes().get(getPrincipalNode(Id.createNodeId(parts[columnsIndices[1]])));    Node to=network.getNodes().get(getPrincipalNode(Id.createNodeId(parts[columnsIndices[2]])));    double length=Double.parseDouble(parts[columnsIndices[3]]);    double freeSpeed=Double.parseDouble(parts[columnsIndices[4]]);    double capacity=Double.parseDouble(parts[columnsIndices[5]]);    double nOfLanes=Double.parseDouble(parts[columnsIndices[6]]);    if (capacity != 0 && !from.getId().equals(to.getId())) {      LinkFactoryImpl r=NetworkUtils.createLinkFactory();      Link link=NetworkUtils.createLink(Id.createLinkId(id),from,to,network,length,freeSpeed,capacity,nOfLanes);      final String id1=origId;      NetworkUtils.setOrigId(((Link)link),id1);      Set<String> modes=new HashSet<String>();      modes.add("car");      link.setAllowedModes(modes);      network.addLink(link);      id++;    } else     if (capacity == 0)     zeroCapacity.add(origId); else     loops.add(origId);    line=reader.readLine();  }  PrintWriter pw=new PrintWriter(new File("./data/networks/badLinks.txt"));  pw.println("Zero capacity");  for (  String i : zeroCapacity)   pw.println(i);  pw.println("Loops");  for (  String i : loops)   pw.println(i);  pw.close();}  }
class C{  public void testSendMomentaryFunctionGroup3(){  AbstractThrottle instance=new AbstractThrottleImpl();  instance.sendMomentaryFunctionGroup3();}  }
class C{  public Department depertmentForEmployee(final Employee emp){  Department dept=null;  final Date currDate=new Date();  try {    final Assignment empAssignment=eisCommonService.getLatestAssignmentForEmployeeByToDate(emp.getId(),currDate);    dept=empAssignment.getDepartment();    return dept;  } catch (  final NullPointerException ne) {    throw new ApplicationRuntimeException(ne.getMessage());  }catch (  final Exception e) {    throw new ApplicationRuntimeException("Error while getting Department fort the employee" + emp.getName());  }}  }
class C{  private boolean caretInSelection(Selection sel){  int caret=this.expression.getCaretPosition();  if (caret < sel.x || sel.y < caret) {    this.selections.clear();    return false;  }  return true;}  }
class C{  @Override public MemBufferHolder<VolatileMemAllocator> resizeBuffer(MemBufferHolder<VolatileMemAllocator> mholder,long size){  MemBufferHolder<VolatileMemAllocator> ret=null;  boolean ac=null != mholder.getRefId();  if (size > 0) {    int bufpos=mholder.get().position();    int buflimit=mholder.get().limit();    ByteBuffer buf=m_vmasvc.resizeByteBuffer(m_nid,mholder.get(),size);    if (null == buf && m_activegc) {      m_bufcollector.waitReclaimCoolDown(m_gctimeout);      buf=m_vmasvc.resizeByteBuffer(m_nid,mholder.get(),size);    }    if (null != buf) {      mholder.clear();      mholder.destroy();      buf.position(bufpos <= size ? bufpos : 0);      buf.limit(buflimit <= size ? buflimit : (int)size);      ret=new MemBufferHolder<VolatileMemAllocator>(this,buf);      if (ac) {        m_bufcollector.register(ret);      }    }  }  return ret;}  }
class C{  public static void takeSnapshot(){  mSnapshotSurface.setZOrderOnTop(true);  mSnapshotLayout.addView(mSnapshotSurface);}  }
class C{  public boolean isErrorResponse(){  return isErrorResponseType(getMessageType());}  }
class C{  MutableBigInteger hybridGCD(MutableBigInteger b){  MutableBigInteger a=this;  MutableBigInteger q=new MutableBigInteger();  while (b.intLen != 0) {    if (Math.abs(a.intLen - b.intLen) < 2)     return a.binaryGCD(b);    MutableBigInteger r=a.divide(b,q);    a=b;    b=r;  }  return a;}  }
class C{  public void flush(){}  }
class C{  @Override public String toString(){  return "n_" + id;}  }
class C{  public boolean isForcing(){  return this.force;}  }
class C{  @Override public boolean containsValue(Object value){  if (value != null) {    for (int i=0; i < elementData.length; i++) {      Entry<K,V> entry=elementData[i];      while (entry != null) {        if (areEqualValues(value,entry.value)) {          return true;        }        entry=entry.next;      }    }  } else {    for (int i=0; i < elementData.length; i++) {      Entry<K,V> entry=elementData[i];      while (entry != null) {        if (entry.value == null) {          return true;        }        entry=entry.next;      }    }  }  return false;}  }
class C{  public void remapMappedTypes(){  mItemAdapter.remapMappedTypes();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.406 -0400",hash_original_method="2BD035C73A838BB41D1FD62BFA454098",hash_generated_method="6C6045864E93EA335BA6A9445DBF5B1D") public static void writeSwappedShort(byte[] data,int offset,short value){  data[offset + 0]=(byte)((value >> 0) & 0xff);  data[offset + 1]=(byte)((value >> 8) & 0xff);}  }
class C{  private static QuadTree build(int dim,double[][] data,int begin,int end){  double[] minmax=computeExtend(dim,data,begin,end);  double squareSize=computeSquareSize(minmax);  double[] mid=computeCenterofMass(dim,data,begin,end);  final int size=end - begin;  if (squareSize <= QUADTREE_MIN_RESOLUION) {    data=Arrays.copyOfRange(data,begin,end);    return new QuadTree(data,null,mid,size,squareSize);  }  ArrayList<double[]> singletons=new ArrayList<>();  ArrayList<QuadTree> children=new ArrayList<>();  splitRecursively(data,begin,end,0,dim,minmax,singletons,children);  double[][] sing=singletons.size() > 0 ? singletons.toArray(new double[singletons.size()][]) : null;  QuadTree[] chil=children.size() > 0 ? children.toArray(new QuadTree[children.size()]) : null;  return new QuadTree(sing,chil,mid,size,squareSize);}  }
class C{  private void checkDeadLock(){  if (!(this instanceof CloseFuture || this instanceof WriteFuture || this instanceof ReadFuture|| this instanceof ConnectFuture)) {    return;  }  StackTraceElement[] stackTrace=Thread.currentThread().getStackTrace();  for (  StackTraceElement s : stackTrace) {    if (AbstractPollingIoProcessor.class.getName().equals(s.getClassName())) {      IllegalStateException e=new IllegalStateException("t");      e.getStackTrace();      throw new IllegalStateException("DEAD LOCK: " + IoFuture.class.getSimpleName() + ".await() was invoked from an I/O processor thread.  "+ "Please use "+ IoFutureListener.class.getSimpleName()+ " or configure a proper thread model alternatively.");    }  }  for (  StackTraceElement s : stackTrace) {    try {      Class<?> cls=DefaultIoFuture.class.getClassLoader().loadClass(s.getClassName());      if (IoProcessor.class.isAssignableFrom(cls)) {        throw new IllegalStateException("DEAD LOCK: " + IoFuture.class.getSimpleName() + ".await() was invoked from an I/O processor thread.  "+ "Please use "+ IoFutureListener.class.getSimpleName()+ " or configure a proper thread model alternatively.");      }    } catch (    Exception cnfe) {    }  }}  }
class C{  private void reNice(){  try {    java.lang.reflect.Field f=engineProc.getClass().getDeclaredField("pid");    f.setAccessible(true);    int pid=f.getInt(engineProc);    EngineUtil.reNice(pid,10);  } catch (  Throwable t) {  }}  }
class C{  public boolean equals(Key key){  if (type == key.type) {    return key.value.equals(value);  }  return false;}  }
class C{  public static void formatDoublePrecise(double source,int decimals,int precision,StringBuffer target){  if (isRoundedToZero(source,decimals,precision)) {    target.append('0');    return;  } else   if (Double.isNaN(source) || Double.isInfinite(source)) {    target.append(Double.toString(source));    return;  }  boolean negative=source < 0.0;  if (negative) {    source=-source;    target.append('-');  }  int scale=(source >= 1.0) ? decimals : precision;  String s=Double.toString(source);  if (source >= 1e-3 && source < 1e7) {    int dot=s.indexOf('.');    String decS=s.substring(dot + 1);    int decLength=decS.length();    if (scale >= decLength) {      if ("0".equals(decS)) {        target.append(s.substring(0,dot));      } else {        target.append(s);        for (int l=target.length() - 1; l >= 0 && target.charAt(l) == '0'; l--) {          target.setLength(l);        }      }      return;    } else     if (scale + 1 < decLength) {      decLength=scale + 1;      decS=decS.substring(0,decLength);    }    long intP=Long.parseLong(s.substring(0,dot));    long decP=Long.parseLong(decS);    format(target,scale,intP,decP);  } else {    int dot=s.indexOf('.');    assert dot >= 0;    int exp=s.indexOf('E');    assert exp >= 0;    int exposant=Integer.parseInt(s.substring(exp + 1));    String intS=s.substring(0,dot);    String decS=s.substring(dot + 1,exp);    int decLength=decS.length();    if (exposant >= 0) {      int digits=decLength - exposant;      if (digits <= 0) {        target.append(intS);        target.append(decS);        for (int i=-digits; i > 0; i--) {          target.append('0');        }      } else       if (digits <= scale) {        target.append(intS);        target.append(decS.substring(0,exposant));        target.append('.');        target.append(decS.substring(exposant));      } else {        long intP=Long.parseLong(intS) * tenPow(exposant) + Long.parseLong(decS.substring(0,exposant));        long decP=Long.parseLong(decS.substring(exposant,exposant + scale + 1));        format(target,scale,intP,decP);      }    } else {      exposant=-exposant;      int digits=scale - exposant + 1;      if (digits < 0) {        target.append('0');      } else       if (digits == 0) {        long decP=Long.parseLong(intS);        format(target,scale,0L,decP);      } else       if (decLength < digits) {        long decP=Long.parseLong(intS) * tenPow(decLength + 1) + Long.parseLong(decS) * 10;        format(target,exposant + decLength,0L,decP);      } else {        long subDecP=Long.parseLong(decS.substring(0,digits));        long decP=Long.parseLong(intS) * tenPow(digits) + subDecP;        format(target,scale,0L,decP);      }    }  }}  }
class C{  public SoundCloudTrack remove(int trackIndex){  SoundCloudTrack removedTrack=null;  ArrayList<SoundCloudTrack> tracks=mSoundCloudPlaylist.getTracks();  if (trackIndex >= 0 && trackIndex < tracks.size()) {    removedTrack=tracks.remove(trackIndex);    if (tracks.size() == 0) {      mCurrentTrackIndex=0;    } else     if (trackIndex == tracks.size()) {      mCurrentTrackIndex=(mCurrentTrackIndex - 1) % tracks.size();    } else     if (trackIndex >= 0 && trackIndex < mCurrentTrackIndex) {      mCurrentTrackIndex=(mCurrentTrackIndex - 1) % tracks.size();    }  }  return removedTrack;}  }
class C{  public void testHideStatusBar(final View v){  final Intent testActivity=new Intent(this,TestHideStatusBar.class);  startActivity(testActivity);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:22.050 -0400",hash_original_method="7A2A4752679C8696C148A96F8F50755B",hash_generated_method="DEF466035A4516BA3399AD6AB5C54816") public final boolean isSecure(Socket sock) throws IllegalArgumentException {  if (sock == null) {    throw new IllegalArgumentException("Socket may not be null.");  }  if (sock.getClass() != Socket.class) {    throw new IllegalArgumentException("Socket not created by this factory.");  }  if (sock.isClosed()) {    throw new IllegalArgumentException("Socket is closed.");  }  return false;}  }
class C{  public static void main(String[] args){  junit.textui.TestRunner.run(EMailTest.class);}  }
class C{  public Vec2D(double x,double y){  this.x=x;  this.y=y;}  }
class C{  public boolean intersects(Rectangle2D r){  Rectangle2D b=getBounds();  if (b == null)   return false;  return b.intersects(r);}  }
class C{  @android.view.RemotableViewMethod public void smoothScrollToPosition(int position){  super.smoothScrollToPosition(position);}  }
class C{  public TeXIcon build(){  if (style == null) {    throw new IllegalStateException("A style is required. Use setStyle()");  }  if (size == null) {    throw new IllegalStateException("A size is required. Use setStyle()");  }  DefaultTeXFont font=(type == null) ? new DefaultTeXFont(size) : createFont(size,type);  TeXEnvironment te;  if (widthUnit != null) {    te=new TeXEnvironment(style,font,widthUnit,textWidth);  } else {    te=new TeXEnvironment(style,font);  }  if (interLineUnit != null) {    te.setInterline(interLineUnit,interLineSpacing);  }  Box box=createBox(te);  TeXIcon ti;  if (widthUnit != null) {    HorizontalBox hb;    if (interLineUnit != null) {      float il=interLineSpacing * SpaceAtom.getFactor(interLineUnit,te);      Box b=BreakFormula.split(box,te.getTextwidth(),il);      hb=new HorizontalBox(b,isMaxWidth ? b.getWidth() : te.getTextwidth(),align);    } else {      hb=new HorizontalBox(box,isMaxWidth ? box.getWidth() : te.getTextwidth(),align);    }    ti=new TeXIcon(hb,size,trueValues);  } else {    ti=new TeXIcon(box,size,trueValues);  }  if (fgcolor != null) {    ti.setForeground(fgcolor);  }  ti.isColored=te.isColored;  return ti;}  }
class C{  @SuppressWarnings("fallthrough") private String nextUnquotedValue() throws IOException {  StringBuilder builder=null;  int i=0;  findNonLiteralCharacter:   while (true) {    for (; pos + i < limit; i++) {switch (buffer[pos + i]) {case '/':case '\\':case ';':case '#':case '=':        checkLenient();case '{':case '}':case '[':case ']':case ':':case ',':case ' ':case '\t':case '\f':case '\r':case '\n':      break findNonLiteralCharacter;  }}if (i < buffer.length) {  if (fillBuffer(i + 1)) {    continue;  } else {    break;  }}if (builder == null) {  builder=new StringBuilder();}builder.append(buffer,pos,i);pos+=i;i=0;if (!fillBuffer(1)) {  break;}}String result;if (builder == null) {result=new String(buffer,pos,i);} else {builder.append(buffer,pos,i);result=builder.toString();}pos+=i;return result;}  }
class C{  public boolean isAccessibleColumnSelected(int c){  return false;}  }
class C{  public void removeRange(int fromIndex,int toIndex){  if (SysProperties.CHECK) {    if (fromIndex > toIndex || toIndex > size) {      throw new ArrayIndexOutOfBoundsException("from=" + fromIndex + " to="+ toIndex+ " size="+ size);    }  }  System.arraycopy(data,toIndex,data,fromIndex,size - toIndex);  size-=toIndex - fromIndex;}  }
class C{  private static void restoreDateFactory(){  DateFactory.setInstance(new DateFactory());}  }
class C{  @Override public void onListItemClick(ListView l,View v,int position,long id){  if (DATA_VIEW_MODE.LIST == dataViewMode && ObdProt.OBD_SVC_DATA == CommService.elm.getService()) {    super.onListItemClick(l,v,position,id);  }  setMenuItemEnable(R.id.graph_actions,((CommService.elm.getService() == ObdProt.OBD_SVC_DATA) && (getListView().getCheckedItemCount() > 0)));}  }
class C{  public JarsAction(KseFrame kseFrame){  super(kseFrame);  putValue(LONG_DESCRIPTION,res.getString("JarsAction.statusbar"));  putValue(NAME,res.getString("JarsAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("JarsAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("JarsAction.image")))));}  }
class C{  public PDFXref(int id,int gen){  this.id=id;  this.generation=gen;  this.compressed=false;}  }
class C{  public boolean isCollocated(){  return collocated;}  }
class C{  public static void resetDeclaredFields(ActionForm form) throws InvocationTargetException, IllegalAccessException, NoSuchMethodException {  Field[] fields=form.getClass().getDeclaredFields();  for (int i=0; i < fields.length; i++) {    String key=fields[i].getName();    if (!key.equals(Constants.SERIAL_ID)) {      Object object=PropertyUtils.getProperty(form,key);      if (object != null && object instanceof Boolean)       PropertyUtils.setSimpleProperty(form,key,Boolean.FALSE); else       if (object != null && object instanceof String)       PropertyUtils.setSimpleProperty(form,key,null);    }  }}  }
class C{  public static int daysInFebruary(int year){  return (((year % 4 == 0) && ((!(year % 100 == 0)) || (year % 400 == 0))) ? 29 : 28);}  }
class C{  static public void assertNotSame(Object expected,Object actual){  assertNotSame(null,expected,actual);}  }
class C{  public void decrypt(KeyParameter aesKey){  keyChainGroupLock.lock();  try {    keyChainGroup.decrypt(aesKey);  }  finally {    keyChainGroupLock.unlock();  }  saveNow();}  }
class C{  private void key(byte key[]){  int i;  int koffp[]={0};  int lr[]={0,0};  int plen=P.length, slen=S.length;  for (i=0; i < plen; i++)   P[i]=P[i] ^ streamtoword(key,koffp);  for (i=0; i < plen; i+=2) {    encipher(lr,0);    P[i]=lr[0];    P[i + 1]=lr[1];  }  for (i=0; i < slen; i+=2) {    encipher(lr,0);    S[i]=lr[0];    S[i + 1]=lr[1];  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:34.302 -0500",hash_original_method="97D909B421F8D92376760AF2E5C3347E",hash_generated_method="75335BCEFB3A3540B523AEC1175349E1") protected BasicPoolEntry createEntry(RouteSpecificPool rospl,ClientConnectionOperator op){  if (log.isDebugEnabled()) {    log.debug("Creating new connection [" + rospl.getRoute() + "]");  }  BasicPoolEntry entry=new BasicPoolEntry(op,rospl.getRoute(),refQueue);  poolLock.lock();  try {    rospl.createdEntry(entry);    numConnections++;    issuedConnections.add(entry.getWeakRef());  }  finally {    poolLock.unlock();  }  return entry;}  }
class C{  public OperatorTree(MainFrame mainFrame){  super();  this.mainFrame=mainFrame;  setCellRenderer(new OperatorTreeCellRenderer());  addTreeSelectionListener(this);  addTreeExpansionListener(this);  addMouseListener(this);  setRowHeight(0);  getSelectionModel().setSelectionMode(TreeSelectionModel.DISCONTIGUOUS_TREE_SELECTION);}  }
class C{  public static final double nextDouble(double value){  if (value == Double.POSITIVE_INFINITY) {    return value;  }  long bits;  if (value == 0) {    bits=0;  } else {    bits=Double.doubleToLongBits(value);  }  return Double.longBitsToDouble(value < 0 ? bits - 1 : bits + 1);}  }
class C{  public boolean isDirectlyControlDependentOn(BytecodeInstruction ins,Branch b){  if (ins == null)   throw new IllegalArgumentException("null given");  BasicBlock insBlock=ins.getBasicBlock();  return isDirectlyControlDependentOn(insBlock,b);}  }
class C{  @Override protected void configChanged(){}  }
class C{  public void recycle(){synchronized (sPool) {    if (sPool.size() < MAX_POOL_SIZE) {      sPool.add(this);    }  }}  }
class C{  private static RedBlackNode rotateWithRightChild(RedBlackNode k1){  RedBlackNode k2=k1.right;  k1.right=k2.left;  k2.left=k1;  return k2;}  }
class C{  public div removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  protected boolean startWorkflow(int AD_Workflow_ID){  log.fine(AD_Workflow_ID + " - " + m_pi);  boolean started=false;  if (m_IsServerProcess) {    Server server=CConnection.get().getServer();    try {      if (server != null) {        m_pi=server.workflow(Env.getRemoteCallCtx(Env.getCtx()),m_pi,AD_Workflow_ID);        log.finest("server => " + m_pi);        started=true;      }    } catch (    Exception ex) {      log.log(Level.SEVERE,"AppsServer error",ex);      started=false;    }  }  if (!started && !m_IsServerProcess) {    if (m_trx != null)     m_pi.setTransactionName(m_trx.getTrxName());    MWFProcess wfProcess=ProcessUtil.startWorkFlow(Env.getCtx(),m_pi,AD_Workflow_ID);    started=wfProcess != null;  }  return started;}  }
class C{  public Iterator<? extends ITPS> rangeIterator(final Schema schema){  return rangeIterator(schema,null,null,0,MIN_TIMESTAMP,CURRENT_ROW,null);}  }
class C{  public static String formatNumber(double number,int decimalPlaces){  String s=String.valueOf(number);  int idx1=s.indexOf('.');  if (idx1 == -1) {    return s;  } else {    int idx2=s.indexOf('E');    int dp=decimalPlaces + (idx2 >= 0 ? 0 : 1);    String t=s.substring(0,Math.min(idx1 + dp,s.length()));    if (idx2 >= 0)     t+=s.substring(idx2);    return t;  }}  }
class C{  @SuppressWarnings("unchecked") public static <T>PropertyFunction<T> property(Property<T> property){  return ((PropertyReferenceHandler<T>)Proxy.getInvocationHandler(property)).property();}  }
class C{  public TestRecord selectByPrimaryKey(Integer recordId){  if (recordId == null)   return null;  this.model.recordId=recordId;  this.model.load();  if (this.model.entity()) {    return this.model;  } else {    return null;  }}  }
class C{  @Override public void drawBackground(Graphics2D g2,CategoryPlot plot,Rectangle2D dataArea){  plot.drawBackground(g2,dataArea);}  }
class C{  public static <T extends Date>T firstOfDay(T ts){  checkNotNull(ts);  T cloned=(T)ts.clone();  cloned.setTime(new DateTime(ts.getTime()).withTime(0,0,0,0).getMillis());  return cloned;}  }
class C{  public long optLong(int index,long defaultValue){  try {    return this.getLong(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public AlgorithmException(Algorithm algorithm,String message,Throwable cause){  super(message,cause);  this.algorithm=algorithm;}  }
class C{  public boolean offerLast(E e){  addLast(e);  return true;}  }
class C{  public boolean spans(String other,boolean compareParams){  return spans(new MIMEType(other),compareParams);}  }
class C{  public void redo(){  undo(false);}  }
class C{  public static int remainder(int dividend,int divisor){  return (int)(toLong(dividend) % toLong(divisor));}  }
class C{  private void renderOperatorBackground(final Operator operator,final Graphics2D g2){  Rectangle2D frame=model.getOperatorRect(operator);  if (frame == null) {    return;  }  RoundRectangle2D background=new RoundRectangle2D.Double(frame.getX() - 7,frame.getY() - 3,frame.getWidth() + 14,frame.getHeight() + 11,OPERATOR_BG_CORNER,OPERATOR_BG_CORNER);  g2.setColor(Color.WHITE);  g2.fill(background);  Rectangle2D nameBounds=OPERATOR_FONT.getStringBounds(operator.getName(),g2.getFontRenderContext());  if (nameBounds.getWidth() > frame.getWidth()) {    double relevantWidth=Math.min(nameBounds.getWidth(),frame.getWidth() * MAX_HEADER_RATIO);    double offset=(frame.getWidth() - relevantWidth) / 2;    int x=(int)(frame.getX() + offset);    int padding=5;    RoundRectangle2D nameBackground=new RoundRectangle2D.Double((int)Math.min(frame.getX() - padding,x - padding),frame.getY() - 3,relevantWidth + 2 * padding,ProcessRendererModel.HEADER_HEIGHT + 3,OPERATOR_BG_CORNER,OPERATOR_BG_CORNER);    g2.fill(nameBackground);  }  renderPortsBackground(operator.getInputPorts(),g2);  renderPortsBackground(operator.getOutputPorts(),g2);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:09.120 -0500",hash_original_method="3469D95A9F285D7729B7F7DF2EEF92C2",hash_generated_method="C5197774DA14880E801768C159BB979E") public void copy1DRangeFrom(int off,int count,byte[] d){  validateIsInt8();  copy1DRangeFromUnchecked(off,count,d);}  }
class C{  public static void viewServerFolder(final String serverItem){  Check.notNull(serverItem,"serverItem");  if (getServerItemBrowser() != null) {    getServerItemBrowser().browse(serverItem);  }}  }
class C{  public Object copyUserData(QueryTreeNode node,Object userData) throws StandardException {  if ((userData instanceof TableBinding) || (userData instanceof ColumnBinding)) {    bindingsToCopy.add(node);  }  return userData;}  }
class C{  public boolean indexContainsRepeatableGroup(){  FormEntryCaption[] groups=getCaptionHierarchy();  if (groups.length == 0) {    return false;  }  for (int i=0; i < groups.length; i++) {    if (groups[i].repeats())     return true;  }  return false;}  }
class C{  public static AbSampleFragment newInstance(){  AbSampleFragment f=new AbSampleFragment();  return f;}  }
class C{  public JoinAppGroupDialog(final Activity activity){  super(activity,DEFAULT_REQUEST_CODE);}  }
class C{  public static void serializePath(final ObjectOutput os,final PathIterator pi) throws IOException {  os.writeObject(pi.getWindingRule());  final List<java.io.Serializable> list=new ArrayList<java.io.Serializable>();  while (!pi.isDone()) {    final float[] array=new float[6];    final int type=pi.currentSegment(array);    list.add(type);    list.add(array);    pi.next();  }  os.writeObject(list);}  }
class C{  public EObject basicGetAstElement(){  return astElement;}  }
class C{  boolean isAuthRequired(){  return authRequired;}  }
class C{  @Override public String toString(){  return toString(0);}  }
class C{  public static void addBundle(String id,Bundle bundle){  DTN2Manager.bundles.put(id,bundle);}  }
class C{  public Result(){  success=false;}  }
class C{  public ClickableArea(RectF rect,double x,double y){  super();  this.rect=rect;  this.x=x;  this.y=y;}  }
class C{  public boolean canHalt(){  return canHalt;}  }
class C{  @Override public void addValue(double v){  addValue(v,1.0);}  }
class C{  private byte[] assembleSenderReportPacket(){  final int FIXED_HEADER_SIZE=4;  byte V_P_RC=(byte)((RtcpPacket.VERSION << 6) | (RtcpPacket.PADDING << 5) | (0x00));  byte ss[]=RtcpPacketUtils.longToBytes(rtcpSession.SSRC,4);  byte PT[]=RtcpPacketUtils.longToBytes((long)RtcpPacket.RTCP_SR,1);  byte NTP_TimeStamp[]=RtcpPacketUtils.longToBytes(rtcpSession.currentTime(),8);  short randomOffset=(short)Math.abs(rand.nextInt() & 0x000000FF);  byte RTP_TimeStamp[]=RtcpPacketUtils.longToBytes((long)rtcpSession.tc + randomOffset,4);  byte SenderPacketCount[]=RtcpPacketUtils.longToBytes(rtcpSession.packetCount,4);  byte SenderOctetCount[]=RtcpPacketUtils.longToBytes(rtcpSession.octetCount,4);  byte receptionReportBlocks[]=new byte[0];  receptionReportBlocks=RtcpPacketUtils.append(receptionReportBlocks,assembleRTCPReceptionReport());  byte receptionReports=(byte)(receptionReportBlocks.length / 24);  V_P_RC=(byte)(V_P_RC | (byte)(receptionReports & 0x1F));  byte length[]=RtcpPacketUtils.longToBytes((FIXED_HEADER_SIZE + ss.length + NTP_TimeStamp.length+ RTP_TimeStamp.length+ SenderPacketCount.length+ SenderOctetCount.length+ receptionReportBlocks.length) / 4 - 1,2);  byte rtcpSRPacket[]=new byte[1];  rtcpSRPacket[0]=V_P_RC;  rtcpSRPacket=RtcpPacketUtils.append(rtcpSRPacket,PT);  rtcpSRPacket=RtcpPacketUtils.append(rtcpSRPacket,length);  rtcpSRPacket=RtcpPacketUtils.append(rtcpSRPacket,ss);  rtcpSRPacket=RtcpPacketUtils.append(rtcpSRPacket,NTP_TimeStamp);  rtcpSRPacket=RtcpPacketUtils.append(rtcpSRPacket,RTP_TimeStamp);  rtcpSRPacket=RtcpPacketUtils.append(rtcpSRPacket,SenderPacketCount);  rtcpSRPacket=RtcpPacketUtils.append(rtcpSRPacket,SenderOctetCount);  rtcpSRPacket=RtcpPacketUtils.append(rtcpSRPacket,receptionReportBlocks);  return rtcpSRPacket;}  }
class C{  public static void resizeGridView(GridView gridView,int columns){  ListAdapter listAdapter=gridView.getAdapter();  if (listAdapter == null) {    return;  }  int totalHeight=0;  int items=listAdapter.getCount();  int rows=0;  int maxHeight=0;  for (int i=0; i < listAdapter.getCount(); i++) {    View listItem=listAdapter.getView(i,null,gridView);    listItem.measure(0,0);    totalHeight=listItem.getMeasuredHeight();    if (maxHeight < totalHeight) {      maxHeight=totalHeight;    }  }  float x=1;  if (items > columns) {    x=items / columns;    rows=(int)(x + 1);    maxHeight*=rows;  }  ViewGroup.LayoutParams params=gridView.getLayoutParams();  params.height=maxHeight;  gridView.setLayoutParams(params);}  }
class C{  public MessageBuilder appendMention(User user){  builder.append("<@").append(user.getId()).append('>');  mentioned.add(user);  return this;}  }
class C{  private int deleteComment(Comment comment,Listing listing){  int commentIndex=listing.getChildren().indexOf(comment);  if (commentIndex > -1) {    comment=(Comment)listing.getChildren().get(commentIndex);    comment.setBodyHtml(Comment.DELETED);    comment.setAuthor(Comment.DELETED);  }  return commentIndex;}  }
class C{  @Override public void onGuiClosed(){  Keyboard.enableRepeatEvents(false);}  }
class C{  @Override public boolean equals(Object other){  if (this == other) {    return true;  }  if (other == null || (!(other instanceof CertId))) {    return false;  }  CertId that=(CertId)other;  if (hashAlgId.equals(that.getHashAlgorithm()) && Arrays.equals(issuerNameHash,that.getIssuerNameHash()) && Arrays.equals(issuerKeyHash,that.getIssuerKeyHash())&& certSerialNumber.getNumber().equals(that.getSerialNumber())) {    return true;  } else {    return false;  }}  }
class C{  public void reset(){  rollingAverage.clear();  lastTime=-1L;}  }
class C{  public boolean writeHeader(OutputStream os){  try {    IOUtils.writeInt(os,CACHE_MAGIC);    IOUtils.writeString(os,key);    IOUtils.writeString(os,etag == null ? "" : etag);    IOUtils.writeLong(os,serverDate);    IOUtils.writeLong(os,lastModified);    IOUtils.writeLong(os,ttl);    IOUtils.writeLong(os,softTtl);    IOUtils.writeStringStringMap(responseHeaders,os);    os.flush();    return true;  } catch (  IOException e) {    VolleyLog.d("%s",e.toString());    return false;  }}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) @Path("/{id}/storage-ports/{portId}/register") public StoragePortRestRep registerStoragePort(@PathParam("id") URI id,@PathParam("portId") URI portId){  ArgValidator.checkFieldUriType(id,StorageSystem.class,"id");  queryRegisteredSystem(id);  ArgValidator.checkFieldUriType(portId,StoragePort.class,"portId");  StoragePort port=_dbClient.queryObject(StoragePort.class,portId);  ArgValidator.checkEntity(port,portId,isIdEmbeddedInURL(portId));  if (!id.equals(port.getStorageDevice())) {    throw APIException.badRequests.portNotBelongingToSystem(portId,id);  }  if (RegistrationStatus.UNREGISTERED.toString().equalsIgnoreCase(port.getRegistrationStatus())) {    registerStoragePort(port);  }  return MapStoragePort.getInstance(_dbClient).toStoragePortRestRep(port);}  }
class C{  public AnimatableValue interpolate(AnimatableValue result,AnimatableValue to,float interpolation,AnimatableValue accumulation,int multiplier){  AnimatableNumberOrPercentageValue res;  if (result == null) {    res=new AnimatableNumberOrPercentageValue(target);  } else {    res=(AnimatableNumberOrPercentageValue)result;  }  float newValue;  boolean newIsPercentage;  AnimatableNumberOrPercentageValue toValue=(AnimatableNumberOrPercentageValue)to;  AnimatableNumberOrPercentageValue accValue=(AnimatableNumberOrPercentageValue)accumulation;  if (to != null) {    if (toValue.isPercentage == isPercentage) {      newValue=value + interpolation * (toValue.value - value);      newIsPercentage=isPercentage;    } else {      if (interpolation >= 0.5) {        newValue=toValue.value;        newIsPercentage=toValue.isPercentage;      } else {        newValue=value;        newIsPercentage=isPercentage;      }    }  } else {    newValue=value;    newIsPercentage=isPercentage;  }  if (accumulation != null && accValue.isPercentage == newIsPercentage) {    newValue+=multiplier * accValue.value;  }  if (res.value != newValue || res.isPercentage != newIsPercentage) {    res.value=newValue;    res.isPercentage=newIsPercentage;    res.hasChanged=true;  }  return res;}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  StandardPieSectionLabelGenerator clone=(StandardPieSectionLabelGenerator)super.clone();  clone.attributedLabels=new HashMap();  clone.attributedLabels.putAll(this.attributedLabels);  return clone;}  }
class C{  private void createPanels(){  setLayout(new BorderLayout(5,5));  final JPanel p_1=new JPanel();  p_1.setLayout(new BorderLayout(5,5));  p_1.setBorder(new TitledBorder("View Depth"));  final JPanel p_1_1=new JPanel();  p_1_1.setLayout(new BorderLayout(5,5));  p_1_1.add(m_checkBoxParentDepth,BorderLayout.WEST);  p_1_1.add(m_parentLabel,BorderLayout.CENTER);  p_1_1.add(m_parentDepthSlider,BorderLayout.EAST);  final JPanel p_1_2=new JPanel();  p_1_2.setLayout(new BorderLayout(5,5));  p_1_2.add(m_checkBoxChildDepth,BorderLayout.WEST);  p_1_2.add(m_childLabel,BorderLayout.CENTER);  p_1_2.add(m_childDepthSlider,BorderLayout.EAST);  p_1.add(p_1_1,BorderLayout.NORTH);  p_1.add(p_1_2,BorderLayout.SOUTH);  final JPanel p_2=new JPanel();  p_2.setLayout(new BorderLayout(5,0));  final JPanel p_2_1=new JPanel();  final JPanel p_2_1_1=new JPanel();  p_2_1_1.setLayout(new GridLayout(1,2,5,5));  p_2_1_1.add(m_buttonOk);  p_2_1_1.add(m_buttonCancel);  p_2_1.add(p_2_1_1);  p_2.add(p_2_1,BorderLayout.EAST);  add(p_1,BorderLayout.NORTH);  add(p_2,BorderLayout.SOUTH);}  }
class C{  public String zookeeperConnect(){  return zookeeper.connectString();}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.SYMMETRIC_REFLEXIVE_ASSOCIATION___MULTIPLICITY_1:    getMultiplicity_1().clear();  getMultiplicity_1().addAll((Collection<? extends Multiplicity_>)newValue);return;case UmplePackage.SYMMETRIC_REFLEXIVE_ASSOCIATION___ROLE_NAME_1:setRoleName_1((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public DriveCollectionRequest(final String requestUrl,final IOneDriveClient client,final List<Option> options){  super(requestUrl,client,options);}  }
class C{  public String toString(){  StringBuffer buff=new StringBuffer();  Iterator iter=getOptions().iterator();  buff.append("[");  while (iter.hasNext()) {    Option option=(Option)iter.next();    if (option.getOpt() != null) {      buff.append("-");      buff.append(option.getOpt());    } else {      buff.append("--");      buff.append(option.getLongOpt());    }    buff.append(" ");    buff.append(option.getDescription());    if (iter.hasNext()) {      buff.append(", ");    }  }  buff.append("]");  return buff.toString();}  }
class C{  public boolean save(){  if (getShouldSave()) {    FACTORY.save();    fireSettingsEvent(EventType.SAVE);    return true;  }  return false;}  }
class C{  @Inject protected HistoryViewImpl(final GitResources resources,final GitLocalizationConstant locale,final PartStackUIResources partStackUIResources,final Resources res,final HistoryViewImplUiBinder uiBinder){  super(partStackUIResources);  this.res=resources;  this.locale=locale;  createCommitsTable(res);  setContentWidget(uiBinder.createAndBindUi(this));  minimizeButton.ensureDebugId("git-showHistory-minimizeBut");  btnProjectChanges.getElement().appendChild(new SVGImage(resources.projectLevel()).getElement());  btnResourceChanges.getElement().appendChild(new SVGImage(resources.resourceLevel()).getElement());  btnDiffWithIndex.getElement().appendChild(new SVGImage(resources.diffIndex()).getElement());  btnDiffWithWorkTree.getElement().appendChild(new SVGImage(resources.diffWorkTree()).getElement());  btnDiffWithPrevCommit.getElement().appendChild(new SVGImage(resources.diffPrevVersion()).getElement());  btnRefresh.getElement().appendChild(new SVGImage(resources.refresh()).getElement());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_namednodemapsetnameditem.class,args);}  }
class C{  public synchronized AnimatedLabel stopAnimation(){  removeTaskFromTimer(this);  return this;}  }
class C{  public TranslatableComponent(TranslatableComponent original){  super(original);  this.translate=original.getTranslate();  this.with.addAll(original.getWith().stream().map(null).collect(Collectors.toList()));}  }
class C{  private void sortNodes(){  if (mNeedsSort) {    mSortedNodes.clear();    ArrayList<Node> roots=new ArrayList<Node>();    int numNodes=mNodes.size();    for (int i=0; i < numNodes; ++i) {      Node node=mNodes.get(i);      if (node.dependencies == null || node.dependencies.size() == 0) {        roots.add(node);      }    }    ArrayList<Node> tmpRoots=new ArrayList<Node>();    while (roots.size() > 0) {      int numRoots=roots.size();      for (int i=0; i < numRoots; ++i) {        Node root=roots.get(i);        mSortedNodes.add(root);        if (root.nodeDependents != null) {          int numDependents=root.nodeDependents.size();          for (int j=0; j < numDependents; ++j) {            Node node=root.nodeDependents.get(j);            node.nodeDependencies.remove(root);            if (node.nodeDependencies.size() == 0) {              tmpRoots.add(node);            }          }        }      }      roots.clear();      roots.addAll(tmpRoots);      tmpRoots.clear();    }    mNeedsSort=false;    if (mSortedNodes.size() != mNodes.size()) {      throw new IllegalStateException("Circular dependencies cannot exist" + " in AnimatorSet");    }  } else {    int numNodes=mNodes.size();    for (int i=0; i < numNodes; ++i) {      Node node=mNodes.get(i);      if (node.dependencies != null && node.dependencies.size() > 0) {        int numDependencies=node.dependencies.size();        for (int j=0; j < numDependencies; ++j) {          Dependency dependency=node.dependencies.get(j);          if (node.nodeDependencies == null) {            node.nodeDependencies=new ArrayList<Node>();          }          if (!node.nodeDependencies.contains(dependency.node)) {            node.nodeDependencies.add(dependency.node);          }        }      }      node.done=false;    }  }}  }
class C{  public void draw(Canvas c,Rect bounds){  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mPaint.setColor(mColors[mColorIndex]);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);  if (mAlpha < 255) {    mCirclePaint.setColor(mBackgroundColor);    mCirclePaint.setAlpha(255 - mAlpha);    c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  }}  }
class C{  private synchronized void mapArray() throws IOException {  if (map != null) {    ByteArrayUtil.unmapByteBuffer(map);    map=null;  }  MapMode mode=writable ? MapMode.READ_WRITE : MapMode.READ_ONLY;  map=file.getChannel().map(mode,headersize,recordsize * numrecs);}  }
class C{  public boolean isInterface(){  return false;}  }
class C{  public static StringBuilder generateStubs(PsiFile psiFile){  final StringBuilder builder=new StringBuilder();  final Set<VirtualFile> files=Collections.singleton(psiFile.getViewProvider().getVirtualFile());  final Map<String,CharSequence> map=new GroovyToJavaGenerator(psiFile.getProject(),files).generateStubs((GroovyFile)psiFile);  for (  CharSequence stubText : map.values()) {    builder.append(stubText);    builder.append("\n");    builder.append("---");    builder.append("\n");  }  return builder;}  }
class C{  protected void read(URL url,InputStream in,Drawing drawing,LinkedList<Figure> figures) throws IOException {  NanoXMLDOMInput domi=new NanoXMLDOMInput(factory,in);  domi.openElement(factory.getName(drawing));  domi.openElement("figures",0);  figures.clear();  for (int i=0, n=domi.getElementCount(); i < n; i++) {    Figure f=(Figure)domi.readObject();    figures.add(f);  }  domi.closeElement();  domi.closeElement();  drawing.basicAddAll(drawing.getChildCount(),figures);}  }
class C{  public RefactoringStatus checkMethodName(){  return Checks.checkMethodName(fMethodName,fCUnit);}  }
class C{  Workflow.Method rollbackMethodNullMethod(){  return new Workflow.Method(ROLLBACK_METHOD_NULL);}  }
class C{  public boolean removeFooterView(View v){  if (mFooterViewInfos.size() > 0) {    boolean result=false;    if (mAdapter != null && ((PLAHeaderViewListAdapter)mAdapter).removeFooter(v)) {      mDataSetObserver.onChanged();      result=true;    }    removeFixedViewInfo(v,mFooterViewInfos);    return result;  }  return false;}  }
class C{  public boolean isReadWrite(){  return m_readWrite;}  }
class C{  public OverpassFilterQuery node(){  applySeparator();  builder.append("node");  return this;}  }
class C{  public StrBuilder deleteCharAt(final int index){  if (index < 0 || index >= size) {    throw new StringIndexOutOfBoundsException(index);  }  deleteImpl(index,index + 1,1);  return this;}  }
class C{  public synchronized boolean isDestroyed(){  return isDestroyed;}  }
class C{  public static CertificateID createCertId(BigInteger subjectSerialNumber,X509Certificate issuer) throws Exception {  return new CertificateID(createDigestCalculator(SHA1_ID),new X509CertificateHolder(issuer.getEncoded()),subjectSerialNumber);}  }
class C{  @Override protected void doPrintClassification(Classifier classifier,Instance inst,int index) throws Exception {  double[] d=classifier.distributionForInstance(inst);  doPrintClassification(d,inst,index);}  }
class C{  static public long parseDuration(String strDuration){  String[] durations=strDuration.split("\\s");  long duration=0;  for (  String singleDuration : durations) {    StringBuilder bldvalue=new StringBuilder("");    for (int i=0; i < singleDuration.length(); i++) {      char c=strDuration.charAt(i);      if (Character.isDigit(c)) {        bldvalue.append(c);      } else       if (Character.isLetter(c) && !bldvalue.toString().isEmpty()) {        duration+=calcDuration(Integer.parseInt(bldvalue.toString()),c);        bldvalue.setLength(0);        bldvalue.append("");        break;      }    }  }  return duration;}  }
class C{  public MySqlIterateStatement parseIterate(){  accept(Token.ITERATE);  MySqlIterateStatement iterateStmt=new MySqlIterateStatement();  iterateStmt.setLabelName(exprParser.name().getSimpleName());  accept(Token.SEMI);  return iterateStmt;}  }
class C{  public Reflector(int port,InetAddress address){  try {    packet=new DatagramPacket(buffer,buffer.length);    socket=new DatagramSocket(port,address);  } catch (  IOException ex) {    throw new RuntimeException("Creating datagram reflector failed",ex);  }}  }
class C{  public boolean visit(FieldAccess node){  return true;}  }
class C{  private static List<String> readFile(File file) throws IOException {  FileReader fr=new FileReader(file);  BufferedReader br=new BufferedReader(fr);  List<String> lines=new ArrayList<String>();  String line;  while ((line=br.readLine()) != null)   lines.add(line);  fr.close();  br.close();  return lines;}  }
class C{  public SVGZInputFormat(){}  }
class C{  public EmptyTileFactory(TileFactoryInfo info){  super(info);  int tileSize=info.getTileSize(info.getMinimumZoomLevel());  emptyTile=new BufferedImage(tileSize,tileSize,BufferedImage.TYPE_INT_ARGB);  Graphics2D g=emptyTile.createGraphics();  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  g.setColor(Color.GRAY);  g.fillRect(0,0,tileSize,tileSize);  g.setColor(Color.WHITE);  g.drawOval(10,10,tileSize - 20,tileSize - 20);  g.fillOval(70,50,20,20);  g.fillOval(tileSize - 90,50,20,20);  g.fillOval(tileSize / 2 - 10,tileSize / 2 - 10,20,20);  g.dispose();}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  @Override protected int computeVerticalScrollRange(){  int count=getChildCount();  return count == 0 ? getHeight() : (getChildAt(0)).getBottom();}  }
class C{  public Spring(){  super();}  }
class C{  private void updateDeliveryPredFor(DTNHost host){  double oldValue=getPredFor(host);  double newValue=oldValue + (1 - oldValue) * P_INIT;  preds.put(host,newValue);}  }
class C{  private void copyBuilder(Configuration<K,V> configuration,Builder<K,V> target){  CacheWriteMode tcacheWriteMode=null;  if (configuration instanceof Builder) {    Builder<K,V> sourceB=(Builder<K,V>)configuration;    if (sourceB.id != null)     target.id=sourceB.id;    target.strictJSR107=sourceB.strictJSR107;    target.maxCacheTime=sourceB.maxCacheTime;    target.maxCacheTimeSpread=sourceB.maxCacheTimeSpread;    target.expectedMapSize=sourceB.expectedMapSize;    target.concurrencyLevel=sourceB.concurrencyLevel;    if (sourceB.evictionPolicy != null)     target.evictionPolicy=sourceB.evictionPolicy;    if (sourceB.evictionClass != null)     target.evictionClass=sourceB.evictionClass;    if (sourceB.hashImplementation != null)     target.hashImplementation=sourceB.hashImplementation;    if (sourceB.jamPolicy != null)     target.jamPolicy=sourceB.jamPolicy;    if (sourceB.loader != null)     target.loader=sourceB.loader;    tcacheWriteMode=sourceB.writeMode;  }  if (configuration instanceof CompleteConfiguration) {    CompleteConfiguration<K,V> cc=(CompleteConfiguration<K,V>)configuration;    target.statistics=cc.isStatisticsEnabled();    target.management=cc.isManagementEnabled();    target.expiryPolicyFactory=cc.getExpiryPolicyFactory();    target.writerFactory=cc.getCacheWriterFactory();    Factory<javax.cache.integration.CacheLoader<K,V>> lf=cc.getCacheLoaderFactory();    if (lf != null) {      target.loader=null;      target.loaderFactory=lf;    }    Collection<CacheEntryListenerConfiguration<K,V>> listenerConfsCopy=new ArrayList<>(0);    for (    CacheEntryListenerConfiguration<K,V> entry : cc.getCacheEntryListenerConfigurations()) {      listenerConfsCopy.add(entry);    }    target.listenerConfigurations=listenerConfsCopy;    target.writeThrough=cc.isWriteThrough();    target.readThrough=cc.isReadThrough();  }  if (tcacheWriteMode != null)   target.writeMode=tcacheWriteMode; else   target.writeMode=CacheWriteMode.fromStoreByValue(configuration.isStoreByValue());  target.keyType=configuration.getKeyType();  target.valueType=configuration.getValueType();}  }
class C{  void addTransaction(Transaction t,boolean runSanityChecks){  unCacheTransactions();  if (transactions == null) {    transactions=new ArrayList<Transaction>();  }  t.setParent(this);  if (runSanityChecks && transactions.size() == 0 && !t.isCoinBase())   throw new RuntimeException("Attempted to add a non-coinbase transaction as the first transaction: " + t); else   if (runSanityChecks && transactions.size() > 0 && t.isCoinBase())   throw new RuntimeException("Attempted to add a coinbase transaction when there already is one: " + t);  transactions.add(t);  adjustLength(transactions.size(),t.length);  merkleRoot=null;  hash=null;}  }
class C{  public FireworkEffectMetaBuilder start(final FireworkEffectMeta meta){  return new FireworkEffectMetaBuilder(meta);}  }
class C{  public static OMCircle read(DataInputStream dis) throws IOException {  return read(dis,null);}  }
class C{  public StringEncoderComparator(){}  }
class C{  private boolean hasNextInetSocketAddress(){  return nextInetSocketAddressIndex < inetSocketAddresses.size();}  }
class C{  @Override public void updateStatus(JobContext jobContext) throws Exception {  DbClient dbClient=jobContext.getDbClient();  try {    if (_status == JobStatus.IN_PROGRESS) {      return;    }    VNXeApiClient vnxeApiClient=getVNXeClient(jobContext);    String opId=getTaskCompleter().getOpId();    StringBuilder logMsgBuilder=new StringBuilder(String.format("Updating status of job %s to %s",opId,_status.name()));    FileShare fsObj=null;    Snapshot snapObj=null;    StorageSystem storageObj=dbClient.queryObject(StorageSystem.class,getStorageSystemUri());    if (_status == JobStatus.SUCCESS) {      _isSuccess=true;      if (isFile) {        URI fsId=getTaskCompleter().getId();        fsObj=dbClient.queryObject(FileShare.class,fsId);        FileExportRule rule=getFileExportRule(fsId);        updateExportRule(dbClient,rule);        updateFSExport(fsObj,dbClient,vnxeApiClient);      } else {        URI snapshotId=getTaskCompleter().getId();        FileExportRule rule=getFileExportRule(snapshotId);        updateExportRule(dbClient,rule);        snapObj=updateSnapExport(dbClient,vnxeApiClient);        fsObj=dbClient.queryObject(FileShare.class,snapObj.getParent());      }    } else {      logMsgBuilder.append("\n");      logMsgBuilder.append(String.format("Task %s failed to export file system",opId));    }    _logger.info(logMsgBuilder.toString());    if (isFile) {      FileDeviceController.recordFileDeviceOperation(dbClient,OperationTypeEnum.UNEXPORT_FILE_SYSTEM,_isSuccess,logMsgBuilder.toString(),"",fsObj,storageObj);    } else {      FileDeviceController.recordFileDeviceOperation(dbClient,OperationTypeEnum.UNEXPORT_FILE_SNAPSHOT,_isSuccess,logMsgBuilder.toString(),"",snapObj,fsObj,storageObj);    }  } catch (  Exception e) {    _logger.error("Caught an exception while trying to updateStatus for VNXeUnexportFIleSystemJob",e);    setErrorStatus("Encountered an internal error during file system unexport job status processing : " + e.getMessage());  } finally {    super.updateStatus(jobContext);  }}  }
class C{  public void resellerRoleChanged(ValueChangeEvent event){  Boolean checkBoxChecked=(Boolean)event.getNewValue();  setReseller(checkBoxChecked.booleanValue());}  }
class C{  private boolean filterExportMasks(Map<URI,ExportMask> vplexExportMasks,List<Initiator> inits,URI varrayUri,StorageSystem vplexSystem,String vplexCluster){  boolean allPortsFromMaskMatchForVarray=true;  for (  Initiator init : inits) {    List<ExportMask> masks=ExportUtils.getInitiatorExportMasks(init,_dbClient);    for (    ExportMask mask : masks) {      if (mask.getStorageDevice().equals(vplexSystem.getId())) {        boolean clusterMatch=false;        _log.info("this ExportMask contains these storage ports: " + mask.getStoragePorts());        for (        String portUri : mask.getStoragePorts()) {          StoragePort port=getDataObject(StoragePort.class,URI.create(portUri),_dbClient);          if (port != null) {            if (clusterMatch == false) {              String vplexClusterForMask=ConnectivityUtil.getVplexClusterOfPort(port);              clusterMatch=vplexClusterForMask.equals(vplexCluster);              if (clusterMatch) {                _log.info("a matching ExportMask " + mask.getMaskName() + " was found on this VPLEX "+ vplexSystem.getSmisProviderIP()+ " on  cluster "+ vplexCluster);                vplexExportMasks.put(mask.getId(),mask);              } else {                break;              }            }            if (clusterMatch) {              StringSet taggedVarrays=port.getTaggedVirtualArrays();              if (taggedVarrays != null && taggedVarrays.contains(varrayUri.toString())) {                _log.info("Virtual Array " + varrayUri + " has connectivity to port "+ port.getLabel());              } else {                allPortsFromMaskMatchForVarray=false;              }            }          }        }      }    }  }  return allPortsFromMaskMatchForVarray;}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:43.739 -0500",hash_original_method="F2FF7EF8A0DC7477BB00BBE8F4736B84",hash_generated_method="440B44A8B71FBB9C3D13EE01FB35EE56") public Class load(String suiteClassName) throws ClassNotFoundException {  return Class.forName(suiteClassName);}  }
class C{  public static String substitute(String heronHome,String pathString){  Config config=Config.newBuilder().put(Keys.heronHome(),heronHome).build();  return substitute(config,pathString);}  }
class C{  public long skip(long n) throws IOException {  return 0;}  }
class C{  private void rePosted(){  if (getC_InvoiceLine_ID() > 0) {    int id=DB.getSQLValue(get_TrxName(),"SELECT M_MatchInv_ID FROM M_MatchInv WHERE C_InvoiceLine_ID=?",getC_InvoiceLine_ID());    if (id > 0) {      DB.executeUpdate("UPDATE M_MatchInv SET Posted='N', Processing='N', ProcessedOn=null WHERE M_MatchInv_ID=? AND Processed='Y'",id,get_TrxName());      MFactAcct.deleteEx(MMatchInv.Table_ID,id,get_TrxName());    }  } else   if (getM_InOutLine_ID() > 0) {    int id=DB.getSQLValue(get_TrxName(),"SELECT M_InOut_ID FROM M_InOutLine WHERE M_InOutLine_ID=? ",getM_InOutLine_ID());    if (id > 0) {      DB.executeUpdate("UPDATE M_InOut SET Posted='N', Processing='N', ProcessedOn=null WHERE M_InOut_ID=? AND Processed='Y'",id,get_TrxName());      MFactAcct.deleteEx(MInOut.Table_ID,id,get_TrxName());    }  } else   if (getC_OrderLine_ID() > 0) {    int id=DB.getSQLValue(get_TrxName(),"SELECT M_MatchPO_ID FROM M_MatchPO WHERE C_OrderLine_ID=?",getC_OrderLine_ID());    if (id > 0) {      DB.executeUpdate("UPDATE M_MatchPO SET Posted='N', Processing='N', ProcessedOn=null WHERE M_MatchPO_ID=? AND Processed='Y'",id,get_TrxName());      MFactAcct.deleteEx(MMatchPO.Table_ID,id,get_TrxName());    }  } else   if (getM_InventoryLine_ID() > 0) {    int id=DB.getSQLValue(get_TrxName(),"SELECT M_Inventory_ID FROM M_InventoryLine WHERE M_InventoryLine_ID=?",getM_InventoryLine_ID());    if (id > 0) {      DB.executeUpdate("UPDATE M_Inventory SET Posted='N', Processing='N', ProcessedOn=null WHERE M_Inventory_ID=? AND Processed='Y'",id,get_TrxName());      MFactAcct.deleteEx(MInventory.Table_ID,id,get_TrxName());    }  } else   if (getM_MovementLine_ID() > 0) {    int id=DB.getSQLValue(get_TrxName(),"SELECT M_Movement_ID FROM M_MovementLine WHERE M_MovementLine_ID=?",getM_MovementLine_ID());    if (id > 0) {      DB.executeUpdate("UPDATE M_Movement SET Posted='N', Processing='N', ProcessedOn=null WHERE M_Movement_ID=? AND Processed='Y'",id,get_TrxName());      MFactAcct.deleteEx(MMovement.Table_ID,id,get_TrxName());    }  } else   if (getC_LandedCostAllocation_ID() > 0) {  }}  }
