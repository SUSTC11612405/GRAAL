class C{  private void putEntry(String key,CacheHeader entry){  if (!mEntries.containsKey(key)) {    mTotalSize+=entry.size;  } else {    CacheHeader oldEntry=mEntries.get(key);    mTotalSize+=(entry.size - oldEntry.size);  }  mEntries.put(key,entry);}  }
class C{  public boolean isProduct(){  return MProduct.PRODUCTTYPE_Item.equals(m_productType);}  }
class C{  public ArffSortedTableModel(String filename,AbstractFileLoader... loaders){  this(new ArffTableModel(filename,loaders));}  }
class C{  private int decodeChannelCodeTab(int chNum){  VLC vlcTab;  int numVals;  int mask=ctx.useFullTable ? 7 : 3;  Channel chan=ctx.channels[chNum];  Channel refChan=ctx.channels[0];  chan.tableType=br.read(1);switch (br.read(2)) {case 0:    int numBits=ctx.useFullTable ? 3 : 2;  numVals=getNumCtValues();if (numVals < 0) {  return numVals;}for (int i=0; i < numVals; i++) {if (chan.quWordlen[i] != 0) {  chan.quTabIdx[i]=br.read(numBits);} else if (chNum > 0 && refChan.quWordlen[i] != 0) {  chan.quTabIdx[i]=br.read1();}}break;case 1:vlcTab=ctx.useFullTable ? ct_vlc_tabs[1] : ct_vlc_tabs[0];numVals=getNumCtValues();if (numVals < 0) {return numVals;}for (int i=0; i < numVals; i++) {if (chan.quWordlen[i] != 0) {chan.quTabIdx[i]=vlcTab.getVLC2(br);} else if (chNum > 0 && refChan.quWordlen[i] != 0) {chan.quTabIdx[i]=br.read1();}}break;case 2:VLC deltaVlc;if (ctx.useFullTable) {vlcTab=ct_vlc_tabs[1];deltaVlc=ct_vlc_tabs[2];} else {vlcTab=ct_vlc_tabs[0];deltaVlc=ct_vlc_tabs[0];}int pred=0;numVals=getNumCtValues();if (numVals < 0) {return numVals;}for (int i=0; i < numVals; i++) {if (chan.quWordlen[i] != 0) {chan.quTabIdx[i]=(i == 0 ? vlcTab.getVLC2(br) : (pred + deltaVlc.getVLC2(br)) & mask);pred=chan.quTabIdx[i];} else if (chNum > 0 && refChan.quWordlen[i] != 0) {chan.quTabIdx[i]=br.read1();}}break;case 3:if (chNum > 0) {vlcTab=ctx.useFullTable ? ct_vlc_tabs[3] : ct_vlc_tabs[0];numVals=getNumCtValues();if (numVals < 0) {return numVals;}for (int i=0; i < numVals; i++) {if (chan.quWordlen[i] != 0) {chan.quTabIdx[i]=(refChan.quTabIdx[i] + vlcTab.getVLC2(br)) & mask;} else if (chNum > 0 && refChan.quWordlen[i] != 0) {chan.quTabIdx[i]=br.read1();}}}break;}return 0;}  }
class C{  public static boolean isDatePart(String part){  Integer p=DATE_PART.get(StringUtils.toUpperEnglish(part));  return p != null;}  }
class C{  public static float maxX(final CGRect aRect){  return aRect.origin.x + aRect.size.width;}  }
class C{  private void checkBlockMetrics(IgfsMetrics initMetrics,IgfsMetrics metrics,long blocksRead,long blocksReadRemote,long bytesRead,long blocksWrite,long blocksWriteRemote,long bytesWrite) throws Exception {  assert metrics != null;  assertEquals(blocksRead,metrics.blocksReadTotal() - initMetrics.blocksReadTotal());  assertEquals(blocksReadRemote,metrics.blocksReadRemote() - initMetrics.blocksReadRemote());  assertEquals(bytesRead,metrics.bytesRead() - initMetrics.bytesRead());  assertEquals(blocksWrite,metrics.blocksWrittenTotal() - initMetrics.blocksWrittenTotal());  assertEquals(blocksWriteRemote,metrics.blocksWrittenRemote() - initMetrics.blocksWrittenRemote());  assertEquals(bytesWrite,metrics.bytesWritten() - initMetrics.bytesWritten());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:32.622 -0500",hash_original_method="1132B7677F458160633A6DD9E0917F73",hash_generated_method="1AA07CB7BC0CF0D2253AB41AB16DFC59") public static void initServiceCache(Map<String,IBinder> cache){  if (sCache.size() != 0) {    throw new IllegalStateException("setServiceCache may only be called once");  }  sCache.putAll(cache);}  }
class C{  @Override public String toValue(String string,INode node) throws ValueConverterException {  String withDots=IS_CONVERSION_REQUIRED ? string.replace(DELIMITER_MODULE_SPECIFIER,DELIMITER_INTERNAL) : string;  return (String)delegateService.toValue(withDots,grammarAccess.getSTRINGRule().getName(),node);}  }
class C{  private static int appendTypeArgumentSignature(char[] string,int start,boolean fullyQualifyTypeNames,StringBuffer buffer){  if (start >= string.length) {    throw new IllegalArgumentException();  }  char c=string[start];switch (c) {case C_STAR:    buffer.append('?');  return start;case C_EXTENDS:buffer.append("? extends ");return appendTypeSignature(string,start + 1,fullyQualifyTypeNames,buffer);case C_SUPER:buffer.append("? super ");return appendTypeSignature(string,start + 1,fullyQualifyTypeNames,buffer);default :return appendTypeSignature(string,start,fullyQualifyTypeNames,buffer);}}  }
class C{  void recomposeOutput(OutputProperties oprops) throws TransformerException {  m_outputProperties.copyFrom(oprops);}  }
class C{  public EUInformation clone(){  EUInformation result=new EUInformation();  result.NamespaceUri=NamespaceUri;  result.UnitId=UnitId;  result.DisplayName=DisplayName;  result.Description=Description;  return result;}  }
class C{  public static void listSnapshotAcl(String snapshotId,String shareName){  renderArgs.put("dataTable",new ShareACLDataTable());  renderArgs.put("snapshotId",uri(snapshotId));  renderArgs.put("shareName",shareName);  renderArgs.put("aclURL","/file/snapshots/" + uri(snapshotId) + "/shares/"+ shareName+ "/acl");  ViPRCoreClient client=BourneUtil.getViprClient();  FileSnapshotRestRep restRep=client.fileSnapshots().get(uri(snapshotId));  renderArgs.put("snapshotName",restRep.getName());  SnapshotShareACLForm shareACL=new SnapshotShareACLForm();  render(shareACL);}  }
class C{  public boolean isSorted(){  return (m_SortColumn > -1);}  }
class C{  public void joinChat(View view){  String username=mUsername.getText().toString();  if (!validUsername(username))   return;  SharedPreferences sp=getSharedPreferences(Constants.CHAT_PREFS,MODE_PRIVATE);  SharedPreferences.Editor edit=sp.edit();  edit.putString(Constants.CHAT_USERNAME,username);  edit.apply();  Intent intent=new Intent(this,MainActivity.class);  startActivity(intent);}  }
class C{  private void updatePreviewTransform(int incomingWidth,int incomingHeight,boolean forceUpdate){  Log.d(TAG,"updatePreviewTransform: " + incomingWidth + " x "+ incomingHeight);synchronized (mDimensionLock) {    int incomingRotation=CameraUtil.getDisplayRotation();    if (mScreenHeight == incomingHeight && mScreenWidth == incomingWidth && incomingRotation == mDisplayRotation && !forceUpdate) {      return;    }    mDisplayRotation=incomingRotation;    mScreenWidth=incomingWidth;    mScreenHeight=incomingHeight;    updatePreviewBufferDimension();    if (USE_AUTOTRANSFORM_UI_LAYOUT) {      if (mPreviewBufferWidth != 0 && mPreviewBufferHeight != 0) {        if (requiresNexus4SpecificFixFor16By9Previews()) {          mAppController.updatePreviewAspectRatio(16.f / 9.f);        } else {          mAppController.updatePreviewAspectRatio(mPreviewBufferWidth / (float)mPreviewBufferHeight);        }      }    } else {      Matrix transformMatrix=mPreviewTransformCalculator.toTransformMatrix(new Size(mScreenWidth,mScreenHeight),new Size(mPreviewBufferWidth,mPreviewBufferHeight));      mAppController.updatePreviewTransform(transformMatrix);    }  }}  }
class C{  private void checkCollectionEmptiness(Collection<?> c) throws Exception {  assert c.isEmpty();  assert !c.contains("Some value");  assertEquals(0,c.size());  assert !c.iterator().hasNext();  try {    c.iterator().next();    fail("NoSuchElementException must have been thrown.");  } catch (  NoSuchElementException e) {    info("Caught expected exception: " + e);  }  try {    c.iterator().remove();    fail("IllegalStateException must have been thrown.");  } catch (  IllegalStateException e) {    info("Caught expected exception: " + e);  }}  }
class C{  public boolean packageHasAnnotation(Annotation annotation){  try {    Package pkg=type.getPackage();    if (pkg == null) {      return false;    }    String className=pkg.getName() + ".package-info";    Class<?> packageType=Class.forName(className);    AnnotationAccessor accessor=new AnnotationAccessor(supportedAnnotations,packageType,ignoreAnnotationFailure);    return accessor.typeHas(annotation);  } catch (  ClassNotFoundException e) {    return false;  }}  }
class C{  public void append(long key,E value){  if (mSize != 0 && key <= mKeys[mSize - 1]) {    put(key,value);    return;  }  if (mGarbage && mSize >= mKeys.length) {    gc();  }  int pos=mSize;  if (pos >= mKeys.length) {    int n=ArrayUtils.idealLongArraySize(pos + 1);    long[] nkeys=new long[n];    Object[] nvalues=new Object[n];    System.arraycopy(mKeys,0,nkeys,0,mKeys.length);    System.arraycopy(mValues,0,nvalues,0,mValues.length);    mKeys=nkeys;    mValues=nvalues;  }  mKeys[pos]=key;  mValues[pos]=value;  mSize=pos + 1;}  }
class C{  private void assertInDebug(QueryResponse response,String key){  assertNotNull("debug map is null",response.getDebugMap());  assertNotNull("debug map has null for : " + key,response.getDebugMap().get(key));}  }
class C{  public ByteOrder byteOrder(){  return (_outer != null) ? _outer.byteOrder() : ByteOrder.BIG_ENDIAN;}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("ArchiveTokenFld[");  buffer.append("m_id = ").append(m_id);  buffer.append(", m_name = ").append(m_name);  buffer.append(", m_type = ").append(m_type);  buffer.append(", m_len = ").append(m_len);  buffer.append(", m_isNullable = ").append(m_isNullable);  buffer.append(", m_colName = ").append(m_colName);  buffer.append(", m_isDoc = ").append(m_isDoc);  buffer.append(", m_isMult = ").append(m_isMult);  buffer.append("]");  return buffer.toString();}  }
class C{  private void registerHandlers(){  addHandler(new ReadyHandler(api));  addHandler(new ReadyReconnectHandler(api));  addHandler(new ChannelCreateHandler(api));  addHandler(new ChannelDeleteHandler(api));  addHandler(new ChannelUpdateHandler(api));  addHandler(new MessageAckHandler(api));  addHandler(new MessageCreateHandler(api));  addHandler(new MessageDeleteHandler(api));  addHandler(new MessageUpdateHandler(api));  addHandler(new TypingStartHandler(api));  addHandler(new GuildBanAddHandler(api));  addHandler(new GuildBanRemoveHandler(api));  addHandler(new GuildCreateHandler(api));  addHandler(new GuildDeleteHandler(api));  addHandler(new GuildMemberAddHandler(api));  addHandler(new GuildMemberRemoveHandler(api));  addHandler(new GuildMemberUpdateHandler(api));  addHandler(new GuildUpdateHandler(api));  addHandler(new GuildRoleCreateHandler(api));  addHandler(new GuildRoleDeleteHandler(api));  addHandler(new GuildRoleUpdateHandler(api));  addHandler(new PresenceUpdateHandler(api));  addHandler(new UserGuildSettingsUpdateHandler(api));}  }
class C{  public byte[] digest(){  byte[] result=engineDigest();  state=INITIAL;  return result;}  }
class C{  public void onClickPlaneta(View view){  Intent intent=new Intent(this,PlanetaActivity.class);  ActivityOptionsCompat opts=ActivityOptionsCompat.makeCustomAnimation(this,R.anim.slide_in_left,R.anim.slide_out_left);  ActivityCompat.startActivity(this,intent,opts.toBundle());}  }
class C{  public Operator cloneOperator(String name,boolean forParallelExecution){  Operator clone=null;  try {    clone=operatorDescription.createOperatorInstance();  } catch (  Exception e) {    getLogger().log(Level.SEVERE,"Can not create clone of operator '" + getName() + "': "+ e,e);    throw new RuntimeException("Can not create clone of operator '" + getName(),e);  }  clone.setName(getName());  clone.breakPoint=new boolean[]{breakPoint[0],breakPoint[1]};  clone.enabled=enabled;  clone.expanded=expanded;  if (this.userData != null) {    for (    String key : this.userData.keySet()) {      UserData<Object> data=this.userData.get(key);      if (data != null) {        data=data.copyUserData(clone);        clone.setUserData(key,data);      }    }  }  if (forParallelExecution) {    clone.applyCount=this.applyCount;  } else {    clone.applyCount=new AtomicInteger();  }  clone.startTime=startTime;  clone.startCpuTime=startCpuTime;  clone.endTime=endTime;  clone.endCpuTime=endCpuTime;  clone.loopStartTime=loopStartTime;  clone.getParameters().copyFrom(this.getParameters());  clone.compatibilityLevel=compatibilityLevel;  clone.errorList.addAll(errorList);  return clone;}  }
class C{  private void initializeViewListeners(final INaviView view){  view.addListener(m_viewListener);}  }
class C{  @SuppressFBWarnings(value="SF_SWITCH_FALLTHROUGH") public OrderedCollection<PortChangeEvent> handlePortStatusMessage(OFPortStatus ps){  if (ps == null) {    throw new NullPointerException("OFPortStatus message must " + "not be null");  }  lock.writeLock().lock();  try {    OFPortDesc port=ps.getDesc();    OFPortReason reason=ps.getReason();    if (reason == null) {      throw new IllegalArgumentException("Unknown PortStatus " + "reason code " + ps.getReason());    }    if (log.isDebugEnabled()) {      log.debug("Handling OFPortStatus: {} for {}",reason,String.format("%s (%d)",port.getName(),port.getPortNo().getPortNumber()));    }    if (reason == OFPortReason.DELETE)     return handlePortStatusDelete(port);    Map<OFPort,OFPortDesc> newPortByNumber=new HashMap<OFPort,OFPortDesc>(portsByNumber);    OrderedCollection<PortChangeEvent> events=getSinglePortChanges(port);    for (    PortChangeEvent e : events) {switch (e.type) {case DELETE:        newPortByNumber.remove(e.port.getPortNo());      break;case ADD:    if (reason != OFPortReason.ADD) {    }case DOWN:case OTHER_UPDATE:case UP:  newPortByNumber.put(e.port.getPortNo(),e.port);break;}}updatePortsWithNewPortsByNumber(newPortByNumber);return events;}  finally {lock.writeLock().unlock();}}  }
class C{  public ShadowRenderer(final int size,final float opacity,final Color color){  changeSupport=new PropertyChangeSupport(this);  setSize(size);  setOpacity(opacity);  setColor(color);}  }
class C{  @SuppressWarnings("unchecked") protected AbstractHashedMap(int initialCapacity,final float loadFactor){  super();  if (initialCapacity < 0) {    throw new IllegalArgumentException("Initial capacity must be a non negative number");  }  if (loadFactor <= 0.0f || Float.isNaN(loadFactor)) {    throw new IllegalArgumentException("Load factor must be greater than 0");  }  this.loadFactor=loadFactor;  initialCapacity=calculateNewCapacity(initialCapacity);  this.threshold=calculateThreshold(initialCapacity,loadFactor);  this.data=new HashEntry[initialCapacity];  init();}  }
class C{  private HashMap<String,List<StoragePort>> discoverFileStoragePorts(StorageSystem system,VNXeApiClient client,Map<String,URI> nasServerIdMap) throws VNXeException {  HashMap<String,List<StoragePort>> storagePorts=new HashMap<String,List<StoragePort>>();  List<StoragePort> newStoragePorts=new ArrayList<StoragePort>();  List<StoragePort> existingStoragePorts=new ArrayList<StoragePort>();  List<VirtualNAS> modifiedServers=new ArrayList<VirtualNAS>();  _logger.info("Start storage port discovery for storage system {}",system.getId());  List<VNXeFileInterface> interfaces=client.getFileInterfaces();  if (interfaces == null || interfaces.isEmpty()) {    _logger.info("No file interfaces found for the system: {} ",system.getId());    return storagePorts;  }  _logger.info("Number file interfaces found: {}",interfaces.size());  for (  VNXeFileInterface intf : interfaces) {    StoragePort port=null;    VNXeBase nasServer=intf.getNasServer();    if (nasServer == null) {      continue;    }    String nasServerId=nasServer.getId();    URI haDomainUri=nasServerIdMap.get(nasServerId);    if (haDomainUri == null) {      continue;    }    String portNativeGuid=NativeGUIDGenerator.generateNativeGuid(system,intf.getIpAddress(),NativeGUIDGenerator.PORT);    URIQueryResultList results=new URIQueryResultList();    _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getStoragePortByNativeGuidConstraint(portNativeGuid),results);    Iterator<URI> it=results.iterator();    if (it.hasNext()) {      _logger.info("cross verifying for duplicate port");      StoragePort tmpPort=_dbClient.queryObject(StoragePort.class,it.next());      _logger.info(String.format("StorageDevice found for port %s - Actual StorageDevice %s : PortGroup found for port %s - Actual PortGroup %s",tmpPort.getStorageDevice(),system.getId(),tmpPort.getPortGroup(),nasServerId));      if (tmpPort.getStorageDevice().equals(system.getId()) && tmpPort.getPortGroup().equals(nasServerId)) {        port=tmpPort;        _logger.info("found duplicate dm intf {}",intf.getName());      }    }    if (port == null) {      port=new StoragePort();      port.setId(URIUtil.createId(StoragePort.class));      port.setLabel(portNativeGuid);      port.setTransportType("IP");      port.setNativeGuid(portNativeGuid);      port.setStorageDevice(system.getId());      port.setRegistrationStatus(RegistrationStatus.REGISTERED.toString());      port.setPortName(intf.getName());      port.setPortNetworkId(intf.getIpAddress());      port.setPortGroup(nasServerId);      port.setStorageHADomain(haDomainUri);      _logger.info("Creating new storage port using NativeGuid : {}, IP : {}",portNativeGuid,intf.getIpAddress());      newStoragePorts.add(port);    } else {      existingStoragePorts.add(port);    }    port.setDiscoveryStatus(DiscoveryStatus.VISIBLE.name());    port.setCompatibilityStatus(DiscoveredDataObject.CompatibilityStatus.COMPATIBLE.name());    VirtualNAS vNas=findvNasByNativeId(system,nasServerId);    if (vNas != null) {      if (vNas.getStoragePorts() != null && !vNas.getStoragePorts().isEmpty()) {        if (vNas.getStoragePorts().contains(port.getId())) {          vNas.getStoragePorts().remove(port.getId());        }      }      vNas.getStoragePorts().add(port.getId().toString());      modifiedServers.add(vNas);      _logger.info("VirtualNAS : {} : port : {} got modified",vNas.getId(),port.getPortName());    }  }  if (modifiedServers != null && !modifiedServers.isEmpty()) {    _logger.info("Modified VirtualNAS servers size {}",modifiedServers.size());    _dbClient.updateObject(modifiedServers);  }  _logger.info("Storage port discovery for storage system {} complete",system.getId());  storagePorts.put(NEW,newStoragePorts);  storagePorts.put(EXISTING,existingStoragePorts);  return storagePorts;}  }
class C{  @Override protected void finishInit(){  m_TabbedPane.setSelectedIndex(0);  for (  AbstractExperimenterTab tab : m_Tabs)   tab.update();  updateMenu();}  }
class C{  public boolean mousePressed(MouseEvent e){  return false;}  }
class C{  public void paintToggleButtonBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public static Button createPushButton(Composite parent,String label,String tooltip,Image image){  Button button=createPushButton(parent,label,image);  button.setToolTipText(tooltip);  return button;}  }
class C{  private CommandsInfo[] recoverLogState(RandomAccessFile log,long pointer,int startOffset,int number){  try {    long logLength=log.length();    ArrayList<CommandsInfo> state=new ArrayList<CommandsInfo>();    int recoveredBatches=0;    boolean mayRead=true;    log.seek(pointer);    int index=0;    while (index < startOffset) {      int size=log.readInt();      byte[] bytes=new byte[size];      log.read(bytes);      index++;    }    while (mayRead) {      try {        if (log.getFilePointer() < logLength) {          int size=log.readInt();          if (size > 0) {            byte[] bytes=new byte[size];            int read=log.read(bytes);            if (read == size) {              ByteArrayInputStream bis=new ByteArrayInputStream(bytes);              ObjectInputStream ois=new ObjectInputStream(bis);              state.add((CommandsInfo)ois.readObject());              if (++recoveredBatches == number) {                return state.toArray(new CommandsInfo[state.size()]);              }            } else {              System.out.println("recoverLogState (pointer,offset,number) STATE CLEAR");              mayRead=false;              state.clear();            }          } else {            System.out.println("recoverLogState (pointer,offset,number) ELSE 1");            mayRead=false;          }        } else {          System.out.println("recoverLogState (pointer,offset,number) ELSE 2 " + recoveredBatches);          mayRead=false;        }      } catch (      Exception e) {        e.printStackTrace();        state.clear();        mayRead=false;      }    }  } catch (  Exception e) {    e.printStackTrace();    System.err.println("State recover was aborted due to an unexpected exception");  }  return null;}  }
class C{  public Matrix4x3d m11(double m11){  this.m11=m11;  properties&=~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);  return this;}  }
class C{  public boolean validSystemNameConfig(String systemName){  return (true);}  }
class C{  public void deleteIndexDirectoryUnderLock(Index index,Settings indexSettings) throws IOException {  assert indexSettings != Settings.EMPTY;  final Path[] indexPaths=indexPaths(index);  logger.trace("deleting index {} directory, paths({}): [{}]",index,indexPaths.length,indexPaths);  IOUtils.rm(indexPaths);  if (hasCustomDataPath(indexSettings)) {    Path customLocation=resolveCustomLocation(indexSettings,index.name());    logger.trace("deleting custom index {} directory [{}]",index,customLocation);    IOUtils.rm(customLocation);  }}  }
class C{  @Override public String metricString(){switch (m_metricType) {case LIFT:    return "lif";case LEVERAGE:  return "leverage";case CONVICTION:return "conviction";default :return "conf";}}  }
class C{  private boolean less(int i,int j){  if (comparator == null) {    return ((Comparable<Key>)pq[i]).compareTo(pq[j]) < 0;  } else {    return comparator.compare(pq[i],pq[j]) < 0;  }}  }
class C{  public Jerry parent(){  List<Node> result=new NodeList(nodes.length);  for (  Node node : nodes) {    result.add(node.getParentNode());  }  return new Jerry(this,result);}  }
class C{  protected LogParser selectParser(Rabbit rabbit){  if (rabbit.getLoggerType().equals(LoggerType.Log4j)) {    return new Log4jParser();  } else   if (rabbit.getLoggerType().equals(LoggerType.PythonLogger)) {    return new PythonLogParser();  } else {    return new Log4jParser();  }}  }
class C{  public void beforePhase(PhaseEvent event){  if (event.getPhaseId() == PhaseId.RENDER_RESPONSE) {    FacesContext facesContext=event.getFacesContext();    restoreMessages(facesContext);  }}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (dishBumps == null) {    throw new NullPointerException();  }  if (dishBumpStDev < 0.0) {    throw new IllegalStateException();  }  if (dishNumber < 0 || dishNumber >= dishBumps.length) {    throw new IllegalStateException();  }}  }
class C{  RegularPolygon(int newN,double newSide){  n=newN;  side=newSide;  x=y=0;}  }
class C{  @HLEFunction(nid=0x24FE91A1,version=150) public int sceNetApctlDisconnect(){  changeState(PSP_NET_APCTL_STATE_DISCONNECTED);  return 0;}  }
class C{  public synchronized void close() throws IOException {  if (journalWriter == null) {    return;  }  for (  Entry entry : new ArrayList<Entry>(lruEntries.values())) {    if (entry.currentEditor != null) {      entry.currentEditor.abort();    }  }  trimToSize();  journalWriter.close();  journalWriter=null;}  }
class C{  public static void prepareToDraw(){  GLES20.glUseProgram(sProgramHandle);  Util.checkGlError("glUseProgram");  GLES20.glEnableVertexAttribArray(sPositionHandle);  Util.checkGlError("glEnableVertexAttribArray");  GLES20.glVertexAttribPointer(sPositionHandle,COORDS_PER_VERTEX,GLES20.GL_FLOAT,false,VERTEX_STRIDE,sVertexBuffer);  Util.checkGlError("glVertexAttribPointer");  sDrawPrepared=true;}  }
class C{  @CanIgnoreReturnValue public static <T>T readBytes(InputStream input,ByteProcessor<T> processor) throws IOException {  checkNotNull(input);  checkNotNull(processor);  byte[] buf=createBuffer();  int read;  do {    read=input.read(buf);  } while (read != -1 && processor.processBytes(buf,0,read));  return processor.getResult();}  }
class C{  public static Class<?> readBeanClass(String fqcn,byte[] inputClass) throws IOException {  return new ByteArrayClassLoader().defineClass(fqcn,inputClass);}  }
class C{  public boolean isToplevel(){  EObject _eContainer=this.eContainer();  if ((_eContainer instanceof ExportDeclaration)) {    EObject _eContainer_1=this.eContainer();    EObject _eContainer_2=_eContainer_1.eContainer();    return (_eContainer_2 instanceof Script);  }  EObject _eContainer_3=this.eContainer();  return (_eContainer_3 instanceof Script);}  }
class C{  public MatFileFilter(){  filter=new HashSet<String>();}  }
class C{  public SignatureVerifier(SignatureData signatureData){  this(new Signature(signatureData.getSignatureXml()),signatureData.getHashChainResult(),signatureData.getHashChain());}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  @Override public String toString(){  if (true) {    return Integer.toString(key);  } else {    StringBuffer buf=new StringBuffer();    buf.append("Node=[parent = ");    if (parent != null) {      buf.append(Integer.toString(parent.key));    } else {      buf.append("---");    }    buf.append(", key = ");    buf.append(Integer.toString(key));    buf.append(", degree = ");    buf.append(Integer.toString(degree));    buf.append(", right = ");    if (right != null) {      buf.append(Integer.toString(right.key));    } else {      buf.append("---");    }    buf.append(", left = ");    if (left != null) {      buf.append(Integer.toString(left.key));    } else {      buf.append("---");    }    buf.append(", child = ");    if (child != null) {      buf.append(Integer.toString(child.key));    } else {      buf.append("---");    }    buf.append(']');    return buf.toString();  }}  }
class C{  public Map<String,Object> input(){  return input;}  }
class C{  public void markAsAssigned(){  this.assigned=true;}  }
class C{  public void fillDefaultValues(){  tfLearningRate.setText(Double.toString(HebbianRule.DEFAULT_LEARNING_RATE));}  }
class C{  public void testUnconnectedStateParameters() throws Throwable {  URL url=new URL("https://localhost:55555");  HttpsURLConnection connection=(HttpsURLConnection)url.openConnection();  try {    connection.getCipherSuite();    fail("Expected IllegalStateException was not thrown");  } catch (  IllegalStateException e) {  }  try {    connection.getPeerPrincipal();    fail("Expected IllegalStateException was not thrown");  } catch (  IllegalStateException e) {  }  try {    connection.getLocalPrincipal();    fail("Expected IllegalStateException was not thrown");  } catch (  IllegalStateException e) {  }  try {    connection.getServerCertificates();    fail("Expected IllegalStateException was not thrown");  } catch (  IllegalStateException e) {  }  try {    connection.getLocalCertificates();    fail("Expected IllegalStateException was not thrown");  } catch (  IllegalStateException e) {  }}  }
class C{  public void addCircle(float latPoint,float lonPoint,float radius,LinkProperties properties) throws IOException {  LinkCircle.write(latPoint,lonPoint,radius,-1,-1,properties,link.dos);}  }
class C{  @Override public boolean equals(Object object){  if (object == this) {    return true;  }  if (!(object instanceof PacProxySelector)) {    return false;  }  PacProxySelector cmpPacProxySelector=(PacProxySelector)object;  return this.getPacUrl().equals(cmpPacProxySelector.getPacUrl());}  }
class C{  public byte ID(){  return 11;}  }
class C{  private final void processOperator(TreeNode treeNode,Vector defs,ModuleNode cm) throws AbortException {  TreeNode syntaxTreeNode=treeNode;  UniqueString name=null;  int arity=0;  boolean local=syntaxTreeNode.zero() != null;  TreeNode[] children=syntaxTreeNode.one();  TreeNode[] ss=children[0].heirs();  FormalParamNode[] params=null;  Context ctxt=new Context(moduleTable,errors);  boolean isRecursive=false;  symbolTable.pushContext(ctxt);  if (children[0].isKind(N_IdentLHS)) {    if (ss.length > 2) {      params=new FormalParamNode[(ss.length - 2) / 2];      for (int lvi=2; lvi < ss.length; lvi+=2) {        TreeNode sss[]=ss[lvi].heirs();        if (ss[lvi].isKind(N_IdentDecl)) {          name=sss[0].getUS();          arity=(sss.length - 1) / 2;        } else         if (ss[lvi].isKind(N_InfixDecl)) {          name=sss[1].getUS();          name=Operators.resolveSynonym(name);          arity=2;        } else         if (ss[lvi].isKind(N_PrefixDecl)) {          name=sss[0].getUS();          arity=1;        } else {          if (!ss[lvi].isKind(N_PostfixDecl)) {            throw new WrongInvocationException(MP.getMessage(EC.TLC_PARAMETER_MUST_BE_POSTFIX));          }          name=sss[1].getUS();          arity=1;        }        params[(lvi - 2) / 2]=new FormalParamNode(name,arity,ss[lvi],symbolTable,cm);      }    } else {      params=new FormalParamNode[0];    }    name=ss[0].getUS();  } else   if (children[0].isKind(N_PrefixLHS)) {    params=new FormalParamNode[1];    params[0]=new FormalParamNode(ss[1].getUS(),0,ss[1],symbolTable,cm);    name=Operators.resolveSynonym(ss[0].getUS());  } else   if (children[0].isKind(N_InfixLHS)) {    params=new FormalParamNode[2];    params[0]=new FormalParamNode(ss[0].getUS(),0,ss[0],symbolTable,cm);    params[1]=new FormalParamNode(ss[2].getUS(),0,ss[2],symbolTable,cm);    name=Operators.resolveSynonym(ss[1].getUS());  } else   if (children[0].isKind(N_PostfixLHS)) {    params=new FormalParamNode[1];    params[0]=new FormalParamNode(ss[0].getUS(),0,ss[0],symbolTable,cm);    name=Operators.resolveSynonym(ss[1].getUS());  } else {    errors.addError(children[0].getLocation(),"Unknown parameter declaration `" + children[0].getUS() + "'.");  }  OpDefNode odn=null;  SymbolNode symbolNode=symbolTable.resolveSymbol(name);  if (symbolNode != null) {    if (symbolNode instanceof OpDefNode) {      odn=(OpDefNode)symbolNode;    }    ;    if ((odn != null) && odn.inRecursive && (!odn.isDefined)) {      if (odn.letInLevel == curLevel) {        isRecursive=true;        boolean paramsMatch=(odn.getParams().length == params.length);        if (paramsMatch) {          for (int i=0; i < params.length; i++) {            paramsMatch=(params[i].getArity() == 0);          }          ;        }        ;        if (!paramsMatch) {          errors.addError(treeNode.getLocation(),"Definition of " + odn.getName() + " has different arity than "+ "its RECURSIVE declaration.");        }        ;        odn.setParams(params);      } else {        errors.addError(treeNode.getLocation(),"Recursive operator " + name.toString() + " defined at wrong LET/IN level.");        odn=null;      }    } else {      errors.addError(treeNode.getLocation(),"Operator " + name.toString() + " already defined or declared.");    }  }  pushLS();  ExprNode exp=generateExpression(children[2],cm);  symbolTable.popContext();  if (isRecursive) {    endOpDefNode(odn,exp,syntaxTreeNode);  } else {    odn=new OpDefNode(name,UserDefinedOpKind,params,local,exp,cm,symbolTable,syntaxTreeNode,true,null);    symbolNode=odn;    setOpDefNodeRecursionFields(odn,cm);  }  Hashtable ht=popLabelNodeSet();  if (odn != null) {    odn.setLabels(ht);  }  ;  cm.appendDef(symbolNode);  if (defs != null)   defs.addElement(symbolNode);}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case ID:    return is_set_id();case PROPERTY:  return is_set_property();}throw new IllegalStateException();}  }
class C{  public static CCSpriteSheet spriteSheet(String fileImage){  return new CCSpriteSheet(fileImage,defaultCapacity);}  }
class C{  public boolean isClosed(){  return journalWriter == null;}  }
class C{  public static double length2(Vector3 v){  return length2(v.x,v.y,v.z);}  }
class C{  private static boolean alreadyProcessed(Context context,Ticket t){  boolean processed=false;  Cursor c=context.getContentResolver().query(TicketProvider.Tickets.CONTENT_URI,projection,TicketProvider.Tickets.HASH + " = '" + t.getHash()+ "'",null,null);  try {    if (c.moveToFirst()) {      processed=true;    }  }  finally {    c.close();  }  return processed;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean containsDigital(){  return (this.channelIndicator1 & DIO_CHANNEL1) > 0 || this.channelIndicator2 > 0;}  }
class C{  public final void testEqualsObject03(){  assertTrue(new ECFieldF2m(1999,new int[]{367}).equals(new ECFieldF2m(1999,BigInteger.valueOf(0L).setBit(0).setBit(367).setBit(1999))));}  }
class C{  public SVGFilterElementBridge(){}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:10.466 -0500",hash_original_method="1A13EE8CB67080EC7270F23F0E09F3FC",hash_generated_method="1A13EE8CB67080EC7270F23F0E09F3FC") void inflate(int nativeFrame){  inflate(nativeFrame,mFlattenedData);}  }
class C{  public TradeOrder onPlaceOrder(final Contract contract,final TradeOrder tradeOrder) throws BrokerModelException {  try {synchronized (tradeOrder) {      if (null == tradeOrder.getOrderKey()) {        tradeOrder.setOrderKey(getNextRequestId());      }      if (null == tradeOrder.getClientId()) {        tradeOrder.setClientId(999);      }      TradeOrder transientInstance=m_tradePersistentModel.persistTradeOrder(tradeOrder);      _log.debug("Order Placed Key: " + transientInstance.getOrderKey());      TWSBrokerModel.logContract(TWSBrokerModel.getIBContract(contract));      TWSBrokerModel.logTradeOrder(TWSBrokerModel.getIBOrder(transientInstance));      return transientInstance;    }  } catch (  Exception ex) {    throw new BrokerModelException(tradeOrder.getOrderKey(),3030,"Could not save or place TradeOrder: " + tradeOrder.getOrderKey() + " Msg: "+ ex.getMessage());  }}  }
class C{  public TopNSort(int initialCapacity,int bound,boolean flag){  ascending=flag;  q=new PriorityQueue<E>(initialCapacity,new ReversibleComparator<E>(flag));  qbound=bound;}  }
class C{  public Table lookupTable(Project project,String tableReference) throws ScopeException, ExecutionException {  List<Schema> schemas=getAuthorizedSchemas(project);  if (schemas == null || schemas.isEmpty()) {    throw new ScopeException("cannot lookup table '" + tableReference + "' because there is no authorized schema defined in the Project");  }  int separator=tableReference.indexOf(':');  Schema schema=null;  if (separator < 0) {  } else   if (separator == 0) {    schema=find(schemas,"");  } else {    String schemaName=tableReference.substring(0,separator);    schema=find(schemas,schemaName);  }  if (schema != null) {    String tableName=tableReference.substring(separator + 1,tableReference.length());    Table result=schema.findTable(tableName);    if (result == null) {      throw new ScopeException("cannot lookup table '" + tableName + "' in schema '"+ schema.getName()+ "'");    } else {      return result;    }  } else {    Table singleton=null;    for (    Schema loop : schemas) {      Table table=loop.findTable(tableReference);      if (table != null) {        if (singleton != null) {          throw new ScopeException("cannot lookup table '" + tableReference + "' because it is ambiguous:"+ "add a schema prefix, e.g: '"+ singleton.getSchema().getName()+ ":"+ tableReference+ " or '"+ table.getSchema().getName()+ ":"+ tableReference+ "'");        } else {          singleton=table;        }      }    }    if (singleton == null) {      ArrayList<String> names=new ArrayList<String>(schemas.size());      for (      Schema s : schemas) {        names.add(s.getName());      }      throw new ScopeException("cannot lookup table '" + tableReference + "' in schemas "+ names);    } else {      return singleton;    }  }}  }
class C{  @Override public synchronized void put(String key,Entry entry){  pruneIfNeeded(entry.data.length);  File file=getFileForKey(key);  try {    BufferedOutputStream fos=new BufferedOutputStream(new FileOutputStream(file));    CacheHeader e=new CacheHeader(key,entry);    boolean success=e.writeHeader(fos);    if (!success) {      fos.close();      VolleyLog.d("Failed to write header for %s",file.getAbsolutePath());      throw new IOException();    }    fos.write(entry.data);    fos.close();    putEntry(key,e);    return;  } catch (  IOException e) {  }  boolean deleted=file.delete();  if (!deleted) {    VolleyLog.d("Could not clean up file %s",file.getAbsolutePath());  }}  }
class C{  private static boolean isNumericToken(String token){  int tokenLen=token.length();  if (tokenLen > 0) {    char c=token.charAt(0);switch (c) {case 'c':case 'C':case 'x':case 'y':case 'Y':case 'd':case 'h':case 'H':case 'm':case 's':case 'S':case 'e':case 'D':case 'F':case 'w':case 'W':case 'k':case 'K':      return true;case 'M':    if (tokenLen <= 2) {      return true;    }}}return false;}  }
class C{  public void writeGraphic(final String filename,final String legMode){  try {    ChartUtilities.saveChartAsPNG(new File(filename),getGraphic(legMode),1024,768);  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  private boolean updatevNasVirtualArrays(StoragePort storagePort,Network newNetwork,VirtualArrayAssignmentChanges varrayAssignmentChanges,boolean removePort){  Set<String> varraysAddedTovNas=new HashSet<String>();  Set<String> varraysRemovedFromvNas=new HashSet<String>();  boolean varraysForvNasUpdated=false;  VirtualNAS vNas=getVirtualNasForStoragePort(storagePort);  if (vNas == null) {    _log.info("No Virtual NAS found for port {} ",storagePort.getLabel());    return false;  }  if (newNetwork != null) {    StringSet vArrays=newNetwork.getAssignedVirtualArrays();    if (vArrays != null && !vArrays.isEmpty()) {      if (!removePort) {        vNas.addAssignedVirtualArrays(vArrays);        varraysForvNasUpdated=true;      } else {        StringSet vNasVarrys=new StringSet();        for (        String sp : vNas.getStoragePorts()) {          if (!sp.equalsIgnoreCase(storagePort.getId().toString())) {            StoragePort vNasSp=_dbClient.queryObject(StoragePort.class,URI.create(sp));            if (vNasSp.getConnectedVirtualArrays() != null && !vNasSp.getConnectedVirtualArrays().isEmpty()) {              vNasVarrys.addAll(vNasSp.getConnectedVirtualArrays());            }          }        }        if (!vNasVarrys.contains(vArrays)) {          if (vNas.getAssignedVirtualArrays() != null && !vNas.getAssignedVirtualArrays().isEmpty()) {            vNas.getAssignedVirtualArrays().removeAll(vArrays);            varraysForvNasUpdated=true;          }        }      }    }  }  if (varrayAssignmentChanges != null) {    VirtualArrayAssignments addAssignments=varrayAssignmentChanges.getAdd();    VirtualArrayAssignments removeAssignments=varrayAssignmentChanges.getRemove();    StringSet currentAssignmentsForvNas=vNas.getAssignedVirtualArrays();    if (addAssignments != null) {      Set<String> addVArrays=addAssignments.getVarrays();      if ((addVArrays != null) && (!addVArrays.isEmpty())) {        Iterator<String> addVArraysIterForvNas=addVArrays.iterator();        while (addVArraysIterForvNas.hasNext()) {          String addVArrayId=addVArraysIterForvNas.next();          if ((currentAssignmentsForvNas != null) && (currentAssignmentsForvNas.contains(addVArrayId))) {            _log.info("Virtual Nas already assigned to virtual array {}",addVArrayId);            continue;          }          varraysAddedTovNas.add(addVArrayId);          _log.info("virtual nas will be assigned to virtual array {}",addVArrayId);        }        if (!varraysAddedTovNas.isEmpty()) {          vNas.addAssignedVirtualArrays(varraysAddedTovNas);          _log.info("virtual nas assigned with virtual arrays size {}",varraysAddedTovNas.size());          varraysForvNasUpdated=true;        }      }    }    if (removeAssignments != null) {      Set<String> removeVArrays=removeAssignments.getVarrays();      if ((removeVArrays != null) && (!removeVArrays.isEmpty())) {        Iterator<String> removeVArraysIterForvNas=removeVArrays.iterator();        while (removeVArraysIterForvNas.hasNext()) {          String removeVArrayId=removeVArraysIterForvNas.next();          if ((currentAssignmentsForvNas != null) && (!currentAssignmentsForvNas.contains(removeVArrayId))) {            _log.info("Virtual Nas not assigned to virtual array {}",removeVArrayId);            continue;          }          varraysRemovedFromvNas.add(removeVArrayId);          _log.info("virtual nas will be unassigned to virtual array {}",removeVArrayId);        }        if (!varraysRemovedFromvNas.isEmpty()) {          vNas.removeAssignedVirtualArrays(varraysRemovedFromvNas);          _log.info("virtual nas un-assigned with virtual arrays size {}",varraysRemovedFromvNas.size());          varraysForvNasUpdated=true;        }      }    }  } else {    _log.info("Ignored assignment of varray to virtual nas as the storage port not belongs to vnx file");  }  if (varraysForvNasUpdated) {    _dbClient.persistObject(vNas);  }  return varraysForvNasUpdated;}  }
class C{  @Override public boolean isLowerInclusive(){  return lowerInclusive;}  }
class C{  private Part[] parseValues(String contents){  String[] parts=contents.split(",");  Part[] results=new Part[parts.length];  for (int i=0; i < parts.length; i++) {    try {      results[i]=new Part(parts[i],property);    } catch (    Exception e) {      LOG.warning(e.getMessage());      results[i]=null;    }  }  return results;}  }
class C{  public static void upgrade(Context context){  SharedPreferences colors=context.getSharedPreferences("COLOR",0);  if (colors != null && !colors.contains("Tutorial"))   return;  SharedPreferences upgradePrefs=context.getSharedPreferences("upgradeUtil",0);  final int CURRENT=upgradePrefs.getInt("VERSION",0);  if (CURRENT == VERSION)   return;  if (CURRENT < 1) {    SharedPreferences prefs=context.getSharedPreferences("SETTINGS",0);    String domains=prefs.getString(SettingValues.PREF_ALWAYS_EXTERNAL,"");    domains=domains.replaceFirst("(?<=^|,)youtube.co(?=$|,)","youtube.com").replaceFirst("(?<=^|,)play.google.co(?=$|,)","play.google.com");    prefs.edit().putString(SettingValues.PREF_ALWAYS_EXTERNAL,domains).apply();  }  upgradePrefs.edit().putInt("VERSION",VERSION).apply();}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  @Override public boolean isModified(){  if (_depend == null) {    return false;  }  if (_depend.isModified()) {    if (log.isLoggable(Level.FINE))     log.fine("class modified: " + _depend);    return reloadIsModified();  } else   if (_sourcePath == null) {    return false;  } else   if (_sourcePath.getLastModified() != _sourceLastModified) {    if (log.isLoggable(Level.FINE))     log.fine("source modified time: " + _sourcePath + " old:"+ new Date(_sourceLastModified)+ " new:"+ new Date(_sourcePath.getLastModified()));    if (!compileIsModified()) {      return false;    }    boolean isModified=reloadIsModified();    return isModified;  } else   if (_sourcePath.length() != _sourceLength) {    if (log.isLoggable(Level.FINE))     log.fine("source modified length: " + _sourcePath + " old:"+ _sourceLength+ " new:"+ _sourcePath.length());    if (!compileIsModified()) {      return false;    }    return reloadIsModified();  } else {    return false;  }}  }
class C{  public static void displayErrorDialog(Shell shell,String title,String message){  MessageDialog.openError(shell,title,message);}  }
class C{  public static String withFirst(String input,Function<Character,String> callback){  if (input == null) {    return null;  } else   if (input.length() == 0) {    return EMPTY;  } else {    return String.join(EMPTY,callback.apply(input.charAt(0)),input.subSequence(1,input.length()));  }}  }
class C{  protected Node newNode(){  return new SVGOMCircleElement();}  }
class C{  private void processLinks(JsonParser jsonParser) throws IOException {  LOG.info("@odata.bind tag found - start parsing");  final String fullLinkFieldName=jsonParser.getText();  final String key=fullLinkFieldName.substring(0,fullLinkFieldName.indexOf(ODATA_BIND));  JsonToken token=jsonParser.nextToken();  if (token != JsonToken.START_ARRAY) {    links.put(key,processLink(jsonParser));  } else {    final List<String> linksList=new ArrayList<>();    while (jsonParser.nextToken() != JsonToken.END_ARRAY) {      linksList.add(processLink(jsonParser));    }    this.links.put(key,linksList);  }}  }
class C{  public ParagraphView(Element elem){  super(elem,View.Y_AXIS);  setPropertiesFromAttributes();  Document doc=elem.getDocument();  Object i18nFlag=doc.getProperty(AbstractDocument.I18NProperty);  if ((i18nFlag != null) && i18nFlag.equals(Boolean.TRUE)) {    try {      if (i18nStrategy == null) {        String classname="javax.swing.text.TextLayoutStrategy";        ClassLoader loader=getClass().getClassLoader();        if (loader != null) {          i18nStrategy=loader.loadClass(classname);        } else {          i18nStrategy=Class.forName(classname);        }      }      Object o=i18nStrategy.newInstance();      if (o instanceof FlowStrategy) {        strategy=(FlowStrategy)o;      }    } catch (    Throwable e) {      throw new StateInvariantError("ParagraphView: Can't create i18n strategy: " + e.getMessage());    }  }}  }
class C{  private void parseIncludedMode(Attributes attributes) throws SAXException {  Mode parent=md.currentMode;  modeDataStack.push(md);  md=new ModeData();  md.currentMode=new Mode(defaultBaseMode);  md.currentMode.noteDefined(locator);  parent.addIncludedMode(md.currentMode);}  }
class C{  public boolean isCallToStaticMethod(){  if (!isMethodCall())   return false;  if (getCalledCFG() == null) {    return false;  }  return getCalledCFG().isStaticMethod();}  }
class C{  public Vector3f mult(Vector3f vec){  if (null == vec) {    logger.warning("Provided vector is null, null returned.");    return null;  }  return mult(vec,null);}  }
class C{  public void resetData(){  if (savedData != null) {    portData=new TreeMap<>();    HutnObject portDataJson=savedData.getJsonObject("port");    if (portDataJson != null) {      Iterator<String> iter=portDataJson.keySet().iterator();      while (iter.hasNext()) {        String key=iter.next();        portData.put(key,model().valueFromJson(portDataJson.get(key)));      }    }    if (classifier != null) {      if (instanceData == null) {        instanceData=(Instance)classifier.newInstance();      }    }    structuredData=null;  }}  }
class C{  private void processNewArray(Instruction s){  RegisterOperand result=NewArray.getResult(s);  ValueGraphVertex v=findOrCreateVertex(result.getRegister());  v.setLabel(s,0);}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (!success)   return success;  if (newRecord && getResult() != null) {    MRequestUpdate update=new MRequestUpdate(this);    update.saveEx();  }  if (newRecord)   sendNotices(new ArrayList<String>());  if (getM_ChangeRequest_ID() != 0 && is_ValueChanged(COLUMNNAME_R_Group_ID)) {    int oldID=get_ValueOldAsInt(COLUMNNAME_R_Group_ID);    if (getR_Group_ID() == 0) {      setM_ChangeRequest_ID(0);    } else {      MGroup oldG=MGroup.get(getCtx(),oldID);      MGroup newG=MGroup.get(getCtx(),getR_Group_ID());      if (oldG.getPP_Product_BOM_ID() != newG.getPP_Product_BOM_ID() || oldG.getM_ChangeNotice_ID() != newG.getM_ChangeNotice_ID()) {        MChangeRequest ecr=new MChangeRequest(getCtx(),getM_ChangeRequest_ID(),get_TrxName());        if (!ecr.isProcessed() || ecr.getM_FixChangeNotice_ID() == 0) {          ecr.setPP_Product_BOM_ID(newG.getPP_Product_BOM_ID());          ecr.setM_ChangeNotice_ID(newG.getM_ChangeNotice_ID());          ecr.saveEx();        }      }    }  }  if (m_emailTo.length() > 0)   log.saveInfo("RequestActionEMailOK",m_emailTo.toString());  return success;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:55.863 -0500",hash_original_method="A36333A6F745F23182438BFF478F971C",hash_generated_method="3E83C3693072E036EE6283AD07E42258") public String encode(){  return encode(new StringBuffer()).toString();}  }
class C{  public EPLExpressionEvaluationContext(String statementName,int contextPartitionId,String engineURI,Object statementUserObject){  this.statementName=statementName;  this.contextPartitionId=contextPartitionId;  this.engineURI=engineURI;  this.statementUserObject=statementUserObject;}  }
class C{  private int measureHeight(int measureSpec){  int result=0;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=TOAST_HEIGHT;    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public Name relativize(Name origin){  if (origin == null || !subdomain(origin))   return this;  Name newname=new Name();  copy(this,newname);  int length=length() - origin.length();  int labels=newname.labels() - origin.labels();  newname.setlabels(labels);  newname.name=new byte[length];  System.arraycopy(name,offset(0),newname.name,0,length);  return newname;}  }
class C{  public PassiveEntity(final RPObject object){  super(object);  setResistance(0);}  }
class C{  public static void length(long memPtr,int len){  GridUnsafe.putInt(memPtr + MEM_HDR_OFF_LEN,len);}  }
class C{  JavaFile brewTransformerDataFile(){  String genClassName=nextTDataClassName();  ClassName genClassType=ClassName.get(C.GEN_PKG,genClassName);  FieldSpec instanceField=FieldSpec.builder(TypeNames.TRANS_DATA,"INSTANCE",Modifier.PRIVATE,Modifier.STATIC,Modifier.FINAL).initializer("new $T()",genClassType).build();  CodeBlock.Builder staticBlockBuilder=CodeBlock.builder();  String addRealNameStmt="realNames.add($S)";  staticBlockBuilder.add("// Add real names of normal transformers.\n");  for (  String realName : realClassNames)   staticBlockBuilder.addStatement(addRealNameStmt,realName);  String addNARealNameStmt="realNoArgNames.add($S)";  staticBlockBuilder.add("// Add real names of no-args transformers.\n");  for (  String realNAName : realNAClassNames)   staticBlockBuilder.addStatement(addNARealNameStmt,realNAName);  String addVisibleNameStmt="visibleNames.put($S, $S)";  staticBlockBuilder.add("// Add visible names of normal transformers.\n");  for (  Map.Entry<String,String> entry : visibleNames.entrySet())   staticBlockBuilder.addStatement(addVisibleNameStmt,entry.getKey(),entry.getValue());  String addVisibleNANameStmt="visibleNoArgNames.put($S, $S)";  staticBlockBuilder.add("// Add visible names of no-arg transformers.\n");  for (  Map.Entry<String,String> entry : visibleNANames.entrySet())   staticBlockBuilder.addStatement(addVisibleNANameStmt,entry.getKey(),entry.getValue());  String addNumArgsStmt="numArgs.put($S, $L)";  staticBlockBuilder.add("// Add number of arguments values.\n");  for (  Map.Entry<String,Integer> entry : numArgsMap.entrySet())   staticBlockBuilder.addStatement(addNumArgsStmt,entry.getKey(),entry.getValue());  String addClassStmt="instanceMap.put($S, new $T())";  staticBlockBuilder.add("// Add transformer class instances.\n");  for (  Map.Entry<String,ClassName> entry : classMap.entrySet())   staticBlockBuilder.addStatement(addClassStmt,entry.getKey(),entry.getValue());  staticBlockBuilder.add("// Map types to the names of transformers which accept them.\n");  for (  Map.Entry<ClassName,HashSet<String>> entry : typesMap.entrySet()) {    staticBlockBuilder.add("typesToNames.put($T.class, new HashSet<String>() {{\n",entry.getKey()).indent();    for (    String s : entry.getValue())     staticBlockBuilder.addStatement("add($S)",s);    staticBlockBuilder.unindent().add("}});\n");  }  staticBlockBuilder.add("// Map types to the visible names of transformers which accept them.\n");  for (  Map.Entry<ClassName,HashSet<String>> entry : typesMap.entrySet()) {    staticBlockBuilder.add("typesToVisibleNames.put($T.class, new $T() {{\n",entry.getKey(),TypeNames.S_HASH_SET).indent();    for (    String s : entry.getValue())     staticBlockBuilder.addStatement("add($S)",visibleNames.get(s));    staticBlockBuilder.unindent().add("}});\n");  }  CodeBlock staticBlock=staticBlockBuilder.build();  TypeSpec clazz=TypeSpec.classBuilder(genClassName).superclass(TypeNames.TRANS_DATA).addModifiers(Modifier.FINAL).addField(instanceField).addStaticBlock(staticBlock).build();  typesMap.put(genClassType,new HashSet<String>(){{      add("Test");    }  });  messager.printMessage(Diagnostic.Kind.NOTE,"Creating " + genClassType.simpleName());  return JavaFile.builder(C.GEN_PKG,clazz).addFileComment(C.GEN_CODE_FILE_COMMENT).build();}  }
class C{  private boolean overridesEquals(ClassTree node){  List<? extends Tree> members=node.getMembers();  for (  Tree member : members) {    if (member instanceof MethodTree) {      MethodTree mTree=(MethodTree)member;      ExecutableElement enclosing=TreeUtils.elementFromDeclaration(mTree);      if (overrides(enclosing,Object.class,"equals")) {        return true;      }    }  }  return false;}  }
class C{  @Nullable private static String referenceToAttribute(String attrib,boolean includeDummies){  while (attrib.startsWith("\\\\")) {    attrib=attrib.substring(2);  }  if (attrib.startsWith("\\$")) {    if (includeDummies) {      attrib=attrib.substring(1);    } else     return null;  }  if (!StringUtil.startsWithChar(attrib,'$')) {    return null;  }  attrib=attrib.substring(1);  if (StringUtil.startsWithChar(attrib,'{')) {    String cleanAttribute=null;    for (int i=1; i < attrib.length(); i++) {      char currChar=attrib.charAt(i);      if (currChar == '{' || currChar == '.') {        cleanAttribute=null;        break;      } else       if (currChar == '}') {        cleanAttribute=attrib.substring(1,i);        break;      }    }    attrib=cleanAttribute;  } else {    for (int i=0; i < attrib.length(); i++) {      char currChar=attrib.charAt(i);      if (currChar == '{' || currChar == '}' || currChar == '.') {        attrib=attrib.substring(0,i);        break;      }    }  }  return attrib;}  }
class C{  @Override protected void onDraw(Canvas canvas){  super.onDraw(canvas);  if (!mShouldRender)   return;  int width=getMeasuredWidth();  int height=getMeasuredHeight();  if (mBitmap == null || mCanvas == null || mOldHeight != height || mOldWidth != width) {    if (mBitmap != null)     mBitmap.recycle();    mBitmap=Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);    mCanvas=new Canvas(mBitmap);  }  mOldWidth=width;  mOldHeight=height;  mCanvas.drawColor(Color.TRANSPARENT,PorterDuff.Mode.CLEAR);  mCanvas.drawColor(mMaskColour);  if (mEraser == null) {    mEraser=new Paint();    mEraser.setColor(0xFFFFFFFF);    mEraser.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));    mEraser.setFlags(Paint.ANTI_ALIAS_FLAG);  }  mCanvas.drawCircle(mXPosition,mYPosition,mRadius,mEraser);  canvas.drawBitmap(mBitmap,0,0,null);}  }
class C{  public GenericEntry updateEmailAddress(String oldEmailAddress,String newEmailAddress) throws AppsForYourDomainException, MalformedURLException, IOException, ServiceException {  GenericEntry entry=new GenericEntry();  entry.addProperty("userEmail",oldEmailAddress);  entry.addProperty("newEmail",newEmailAddress);  return service.update(new URL("https://apps-apis.google.com/a/feeds/user/userEmail/2.0/" + domain + "/"+ oldEmailAddress),entry);}  }
class C{  protected Object executeJavaTask(BinaryRawReaderEx reader,boolean async){  String taskName=reader.readString();  boolean keepBinary=reader.readBoolean();  Object arg=reader.readObjectDetached();  Collection<UUID> nodeIds=readNodeIds(reader);  IgniteCompute compute0=computeForTask(nodeIds);  if (async)   compute0=compute0.withAsync();  if (!keepBinary && arg instanceof BinaryObjectImpl)   arg=((BinaryObject)arg).deserialize();  Object res=compute0.execute(taskName,arg);  if (async) {    curFut.set(new ComputeConvertingFuture(compute0.future()));    return null;  } else   return toBinary(res);}  }
class C{  @Override public boolean excludeGroup(ILdapEntry groupEntry,String groupObjectSid){  if (WELL_KNOWN_GROUP_SIDS.contains(groupObjectSid))   return true;  if (groupEntry == null)   return false;  int groupTypes=ServerUtils.getIntegerValue(groupEntry.getAttributeValues(ATTR_GROUP_TYPE));  String groupDomain=ServerUtils.getDomainFromDN(groupEntry.getDN());  if (((groupTypes & DOMAIN_LOCAL_GROUP_TYPE) != 0) && (groupDomain != null) && (joinedDomain != null)&& (!groupDomain.equalsIgnoreCase(joinedDomain)))   return true;  if ((groupTypes & SECURITY_GROUP_TYPE) == 0)   return true;  return false;}  }
class C{  protected Caret createCaret(){  return new WindowsTextUI.WindowsCaret();}  }
class C{  public static double convert(String coordinate){  if (coordinate == null) {    throw new NullPointerException("coordinate");  }  boolean negative=false;  if (coordinate.charAt(0) == '-') {    coordinate=coordinate.substring(1);    negative=true;  }  StringTokenizer st=new StringTokenizer(coordinate,":");  int tokens=st.countTokens();  if (tokens < 1) {    throw new IllegalArgumentException("coordinate=" + coordinate);  }  try {    String degrees=st.nextToken();    double val;    if (tokens == 1) {      val=Double.parseDouble(degrees);      return negative ? -val : val;    }    String minutes=st.nextToken();    int deg=Integer.parseInt(degrees);    double min;    double sec=0.0;    if (st.hasMoreTokens()) {      min=Integer.parseInt(minutes);      String seconds=st.nextToken();      sec=Double.parseDouble(seconds);    } else {      min=Double.parseDouble(minutes);    }    boolean isNegative180=negative && (deg == 180) && (min == 0)&& (sec == 0);    if ((deg < 0.0) || (deg > 179 && !isNegative180)) {      throw new IllegalArgumentException("coordinate=" + coordinate);    }    if (min < 0 || min > 59) {      throw new IllegalArgumentException("coordinate=" + coordinate);    }    if (sec < 0 || sec > 59) {      throw new IllegalArgumentException("coordinate=" + coordinate);    }    val=deg * 3600.0 + min * 60.0 + sec;    val/=3600.0;    return negative ? -val : val;  } catch (  NumberFormatException nfe) {    throw new IllegalArgumentException("coordinate=" + coordinate);  }}  }
class C{  @Deprecated public void clearHistory(){  this.appView.clearHistory();}  }
class C{  public void moveEntity(int id,MovePath md){  Object[] data=new Object[2];  data[0]=new Integer(id);  data[1]=md;  send(new Packet(Packet.COMMAND_ENTITY_MOVE,data));}  }
class C{  private void initializeLiveAttributes(){  clipPathUnits=createLiveAnimatedEnumeration(null,SVG_CLIP_PATH_UNITS_ATTRIBUTE,CLIP_PATH_UNITS_VALUES,(short)1);}  }
class C{  private PDFObject readKeyword(char start) throws IOException {  StringBuffer sb=new StringBuffer(String.valueOf(start));  int c;  while (isRegularCharacter(c=buf.get())) {    sb.append((char)c);  }  buf.position(buf.position() - 1);  return new PDFObject(this,PDFObject.KEYWORD,sb.toString());}  }
class C{  @Override public String toString(){  return (m_Dataset.attribute(m_AttIndex).name() + " " + testComparisonString());}  }
class C{  public CompletableFuture<Session> register(){  return manager.open().thenApply(null);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.INTERFACE_DEFINITION___DEPEND_1:    return ((InternalEList<?>)getDepend_1()).basicRemove(otherEnd,msgs);case UmplePackage.INTERFACE_DEFINITION___INTERFACE_BODY_1:  return ((InternalEList<?>)getInterfaceBody_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static boolean isCommand(IElementType type){  return type == SQFTypes.COMMAND_TOKEN || type == SQFTypes.COMMAND || type == SQFTypes.CASE || type == SQFTypes.CASE_COMMAND;}  }
class C{  public ActionForward executeAction(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  HttpSession session=request.getSession();  DetalleExpedienteForm detalleExpedienteForm=(DetalleExpedienteForm)form;  try {    String sessionId=request.getParameter(Misc.SESION_ID);    if (Misc.isEmpty(sessionId)) {      sessionId=(String)session.getAttribute(ConstantesSesionUser.ID_SESION);    }    String cnif=Misc.getCNIFUsuario(request,sessionId);    String id=request.getParameter("id");    String reg=request.getParameter("registro");    Entidad entidad=Misc.obtenerEntidad(request);    ServicioConsultaExpedientes oServicio=LocalizadorServicios.getServicioConsultaExpedientes();    Expediente expediente=oServicio.busquedaExpediente(cnif,id,entidad);    if ((expediente == null) || (StringUtils.isBlank(expediente.getNumero()))) {      StringBuffer cCodigo=new StringBuffer(ConstantesServicios.SERVICE_QUERY_EXPS_ERROR_PREFIX);      cCodigo.append(String.valueOf(ConsultaCodigosError.EC_NUMERO_EXPEDIENTE_INCORRECTO));      throw new ConsultaExpedientesException(Long.valueOf(cCodigo.toString()).longValue());    }    HitoExpediente hitoEstado=oServicio.obtenerHitoEstado(id,entidad);    if (hitoEstado != null)     hitoEstado.setDescripcion(Misc.obtenerMensaje(request,hitoEstado.getDescripcion()));    detalleExpedienteForm.setHitoEstado(hitoEstado);    detalleExpedienteForm.setFicherosEstado(Misc.modificarMensajesFicherosHito(request,oServicio.obtenerFicherosHito(hitoEstado.getGuid(),entidad)).getFicheros());    try {      Subsanaciones subsActual=oServicio.obtenerSubsanacionesHitoActual(id,entidad);      Misc.modificarMensajesSubsanaciones(request,subsActual);      detalleExpedienteForm.setSubsActual(subsActual);    } catch (    Exception ex1) {      detalleExpedienteForm.setSubsActual(new Subsanaciones());    }    try {      Notificaciones notifsActual=oServicio.obtenerNotificionesHitoActual(id,entidad);      Misc.modificarMensajesNotificaciones(request,notifsActual);      detalleExpedienteForm.setNotifsActual(notifsActual);    } catch (    Exception ex1) {      detalleExpedienteForm.setNotifsActual(new Notificaciones());    }    try {      Pagos pagosActual=oServicio.obtenerPagosHitoActual(id,entidad);      Misc.modificarMensajesPagos(request,pagosActual);      detalleExpedienteForm.setPagosActual(pagosActual);    } catch (    Exception ex1) {      detalleExpedienteForm.setPagosActual(new Pagos());    }    HitosExpediente hitos=oServicio.obtenerHistoricoExpediente(id,entidad);    HitosExpediente hitosRev=new HitosExpediente();    for (int i=0; i < hitos.count(); i++) {      if (hitos.get(hitos.count() - i - 1) != null)       hitos.get(hitos.count() - i - 1).setDescripcion(Misc.obtenerMensaje(request,(hitos.get(hitos.count() - i - 1)).getDescripcion()));      hitosRev.add(hitos.get(hitos.count() - i - 1));    }    detalleExpedienteForm.setHitos(hitosRev.getHitosExpediente());    detalleExpedienteForm.setFicherosHashtable(obtenerFicherosHitos(request,hitosRev,entidad));    ArrayList subsanaciones=new ArrayList();    for (int i=0; i < hitos.count(); i++) {      String idHito=((HitoExpediente)hitos.get(hitos.count() - i - 1)).getGuid();      try {        Subsanaciones subsHist=oServicio.obtenerSubsanacionesHito(idHito,entidad);        Misc.modificarMensajesSubsanaciones(request,subsHist);        subsanaciones.add(subsHist);      } catch (      Exception ex2) {        subsanaciones.add(new Subsanaciones());      }    }    ArrayList notificaciones=new ArrayList();    for (int i=0; i < hitos.count(); i++) {      String idHito=((HitoExpediente)hitos.get(hitos.count() - i - 1)).getGuid();      try {        Notificaciones notifsHist=oServicio.obtenerNotificionesHito(idHito,entidad);        Misc.modificarMensajesNotificaciones(request,notifsHist);        notificaciones.add(notifsHist);      } catch (      Exception ex2) {        notificaciones.add(new Notificaciones());      }    }    ArrayList pagos=new ArrayList();    for (int i=0; i < hitos.count(); i++) {      String idHito=((HitoExpediente)hitos.get(hitos.count() - i - 1)).getGuid();      try {        Pagos pagosHist=oServicio.obtenerPagosHito(idHito,entidad);        Misc.modificarMensajesPagos(request,pagosHist);        pagos.add(pagosHist);      } catch (      Exception ex2) {        pagos.add(new Pagos());      }    }    detalleExpedienteForm.setSubsHistoricas(subsanaciones);    detalleExpedienteForm.setNotifsHistoricas(notificaciones);    detalleExpedienteForm.setPagosHistoricas(pagos);    detalleExpedienteForm.setURLAportacion(oServicio.obtenerURLAportacionExpedientes());    detalleExpedienteForm.setURLNotificacion(oServicio.obtenerURLNotificacionExpedientes());    detalleExpedienteForm.setURLPago(oServicio.obtenerURLPagoTasas());    detalleExpedienteForm.setNumeroExpediente(id);    detalleExpedienteForm.setNumeroRegistro(reg);    request.setAttribute("busqueda",request.getParameter("busqueda"));  } catch (  Exception ex) {    request.setAttribute(Misc.MENSAJE_ERROR,ex.getMessage());    return mapping.findForward("Failure");  }  return mapping.findForward("Success");}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public Node mutate(Node individual){  List<Node> newNodes=this.growth.generate(20);  Node mutant=individual.cloneTree();  for (  Node newNode : newNodes) {    Node randomNode=pickRandomNode(mutant);    if (randomNode != null) {      replaceNode(mutant,randomNode,newNode);      if (checkMaxDepth(mutant,1) && mutant.isValid()) {        break;      }    }    mutant=individual.cloneTree();  }  return mutant;}  }
class C{  public MediaMultipart(String contentType,InputStream inputStream) throws MessagingException {  super(new MediaStreamSource(inputStream,contentType));  if (getCount() != 2) {    throw new MessagingException("Multipart must have Atom and media part");  }  boolean atomFirst=getBodyPart(0).isMimeType(ContentType.ATOM.getMediaType());  if (!atomFirst && !getBodyPart(1).isMimeType(ContentType.ATOM.getMediaType())) {    throw new MessagingException("No Atom MIME body part found");  }  atomPart=(MediaBodyPart)getBodyPart(atomFirst ? 0 : 1);  mediaPart=(MediaBodyPart)getBodyPart(atomFirst ? 1 : 0);}  }
class C{  public ImageRenderer createStaticImageRenderer(){  if (onMacOSX)   return new MacRenderer();  return new StaticRenderer();}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public void multiplyThisBy(GFElement factor) throws RuntimeException {  if (!(factor instanceof GF2nPolynomialElement)) {    throw new RuntimeException();  }  if (!mField.equals(((GF2nPolynomialElement)factor).mField)) {    throw new RuntimeException();  }  if (equals(factor)) {    squareThis();    return;  }  polynomial=polynomial.multiply(((GF2nPolynomialElement)factor).polynomial);  reduceThis();}  }
class C{  private synchronized void enlargeCapacity(int key){  int diff=offCount - offset;  int newSize=arr.length;  if (newSize < 1)   newSize=1;  while (newSize < key + offset + diff) {    newSize*=2;  }  if (newSize > arr.length) {    int[] na=new int[newSize];    for (int i=offset; i < offset + size; i++) {      na[i + diff]=arr[i];    }    arr=na;    offset+=diff;  }}  }
class C{  public void optimize(TupleExpr tupleExpr,Dataset dataset,BindingSet bindings){  tupleExpr.visit(new JoinVisitor());}  }
class C{  protected void appendDetail(final StringBuffer buffer,final String fieldName,final byte[] array){  buffer.append(arrayStart);  for (int i=0; i < array.length; i++) {    if (i > 0) {      buffer.append(arraySeparator);    }    appendDetail(buffer,fieldName,array[i]);  }  buffer.append(arrayEnd);}  }
class C{  @Override public String graph() throws Exception {  StringBuffer text=new StringBuffer();  text.append("digraph M5Tree {\n");  Rule temp=m_ruleSet.get(0);  temp.topOfTree().graph(text);  text.append("}\n");  return text.toString();}  }
class C{  public com.boydti.fawe.configuration.file.YamlConfigurationOptions indent(final int value){  if (value < 2) {    throw new IllegalArgumentException("Indent must be at least 2 characters");  }  if (value > 9) {    throw new IllegalArgumentException("Indent cannot be greater than 9 characters");  }  indent=value;  return this;}  }
class C{  public static boolean isElevationModelConfigDocument(Element domElement){  if (domElement == null) {    String message=Logging.getMessage("nullValue.DocumentIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  XPath xpath=WWXML.makeXPath();  Element[] elements=WWXML.getElements(domElement,"//ElevationModel",xpath);  return elements != null && elements.length > 0;}  }
class C{  @SuppressWarnings("unused") @Test public void testFinalStateEnterSequence(){  Statechart sc=_createStatechart("cs");  Scope scope=_createInterfaceScope("interface",sc);  VariableDefinition v1=_createVariableDefinition("v1",TYPE_INTEGER,scope);  Region r=_createRegion("r",sc);  FinalState fs=_createFinalState(r);  ExecutionFlow flow=sequencer.transform(sc);  ExecutionState _fs=flow.getStates().get(0);  assertEquals("_final_0",_fs.getSimpleName());  assertSame(fs,_fs.getSourceElement());  assertNull(_fs.getEntryAction());  assertNotNull(_fs.getEnterSequences().get(0));  assertEquals(1,_fs.getEnterSequences().get(0).getSteps().size());  assertClass(EnterState.class,_fs.getEnterSequences().get(0).getSteps().get(0));}  }
class C{  public final String source(){  return name.toString();}  }
class C{  public void widthIsEmbedded(){  widthIsEmbedded=true;}  }
class C{  private void parseMode(Attributes attributes) throws SAXException {  md.currentMode=getModeAttribute(attributes,"name");  if (md.currentMode.isDefined()) {    error("duplicate_mode",md.currentMode.getName());    error("first_mode",md.currentMode.getName(),md.currentMode.getWhereDefined());  } else {    Mode base=getModeAttribute(attributes,"extends");    if (base != null)     md.currentMode.setBaseMode(base);    md.currentMode.noteDefined(locator);  }}  }
class C{  @Deprecated public static void write(StringBuffer data,Writer output) throws IOException {  if (data != null) {    output.write(data.toString());  }}  }
class C{  public static <T>T eachLine(Reader self,@ClosureParams(value=FromString.class,options={"String","String,Integer"}) Closure<T> closure) throws IOException {  return eachLine(self,1,closure);}  }
class C{  @Override public void shutdown(ShutdownModeAmp mode){  for (int i=_serviceCloseList.size() - 1; i >= 0; i--) {    ServiceRefAmp service=_serviceCloseList.get(i);    service.shutdown(mode);  }}  }
class C{  private static String createTxtServiceQuery(String instanceName,String serviceType,DnsSdTxtRecord txtRecord){  StringBuffer sb=new StringBuffer();  sb.append("bonjour ");  sb.append(createRequest((instanceName + "." + serviceType+ ".local."),DNS_TYPE_TXT,VERSION_1));  sb.append(" ");  byte[] rawData=txtRecord.getRawData();  if (rawData.length == 0) {    sb.append("00");  } else {    sb.append(bin2HexStr(rawData));  }  return sb.toString();}  }
class C{  public static String merge(String first,String second) throws ParseException {  JavaParser.setDoNotAssignCommentsPreceedingEmptyLines(false);  CompilationUnit cu1=JavaParser.parse(new StringReader(first),true);  CompilationUnit cu2=JavaParser.parse(new StringReader(second),true);  AbstractMerger<CompilationUnit> merger=AbstractMerger.getMerger(CompilationUnit.class);  CompilationUnit result=merger.merge(cu1,cu2);  return result.toString();}  }
class C{  private void generateClass(TreeLogger logger,GeneratorContext context,String packageName,String className,List<JClassType> extensions) throws UnableToCompleteException {  PrintWriter pw=context.tryCreate(logger,packageName,className);  if (pw == null) {    return;  }  ClassSourceFileComposerFactory composerFactory=new ClassSourceFileComposerFactory(packageName,className);  generateImports(extensions,composerFactory);  composerFactory.addImplementedInterface(ExtensionRegistry.class.getCanonicalName());  SourceWriter sw=composerFactory.createSourceWriter(context,pw);  sw.println("private final Map<String, ExtensionDescription> extensions = new HashMap<>();");  generateConstructor(className,extensions,sw);  generateGetExtensionsMethod(sw);  sw.outdent();  sw.println("}");  context.commit(logger,pw);}  }
class C{  @Override public void close(){  _pageReader.close();}  }
class C{  public Set<Earning> fetchEarnings(final Player earner){  Set<Earning> earningsToRemove=new HashSet<Earning>();  for (  RPObject earningRPObject : this.getSlot(EARNINGS_SLOT_NAME)) {    Earning earning=(Earning)earningRPObject;    if (earning.getSeller().equals(earner.getName())) {      earningsToRemove.add(earning);    }  }  if (!earningsToRemove.isEmpty()) {    int summedUpEarnings=0;    for (    Earning earningToSumUp : earningsToRemove) {      summedUpEarnings=summedUpEarnings + earningToSumUp.getValue();    }    final StackableItem item=(StackableItem)SingletonRepository.getEntityManager().getItem("money");    item.setQuantity(summedUpEarnings);    if (earner.equipToInventoryOnly(item)) {      for (      Earning earningToReward : earningsToRemove) {        if (earningToReward.shouldReward()) {          applyTradingBonus(earner);        }      }      removeEarnings(earningsToRemove);    } else {      earningsToRemove.clear();    }  }  return earningsToRemove;}  }
class C{  long totalLength(){  return mTotalLength;}  }
class C{  public static boolean isFloatingPointClass(Class clazz){  if ((clazz == Float.class) || (clazz == Double.class) || (clazz == float.class)|| (clazz == double.class)) {    return true;  }  return false;}  }
class C{  public static PatternNotExpr notFilter(Filter filter,String tagName){  return new PatternNotExpr(new PatternFilterExpr(filter,tagName));}  }
class C{  @Override protected void onStop(){  super.onStop();  Log.d(TAG,"onStop() - the activity is no longer visible (it is now \"stopped\")");}  }
class C{  SerializableImpl(Random random){  this.byteField=(byte)random.nextInt();  this.shortField=(short)random.nextInt();  this.intField=random.nextInt();  this.longField=random.nextLong();  this.floatField=random.nextFloat();  this.doubleField=random.nextDouble();  this.charField=(char)('A' + random.nextInt('Z' - 'A'));  this.booleanField=random.nextInt() % 2 == 0;  this.byteFieldPrim=(byte)random.nextInt();  this.shortFieldPrim=(short)random.nextInt();  this.intFieldPrim=random.nextInt();  this.longFieldPrim=random.nextLong();  this.floatFieldPrim=random.nextFloat();  this.doubleFieldPrim=random.nextDouble();  this.charFieldPrim=(char)('A' + random.nextInt('Z' - 'A'));  this.booleanFieldPrim=random.nextInt() % 2 == 0;  this.unsignedByteField=random.nextInt(256);  this.unsignedShortField=random.nextInt(65536);  int length=random.nextInt(100);  StringBuffer sb=new StringBuffer();  for (int i=0; i < length; i++) {    char c=(char)('A' + random.nextInt('Z' - 'A'));    sb.append(c);  }  this.stringField=sb.toString();  this.objectField=new SerializableImpl();}  }
class C{  public boolean isForkedResponse(){  return super.getClientTransaction() == null && m_originalTransaction != null;}  }
class C{  private boolean requiresNexus4SpecificFixFor16By9Previews(){  return USE_AUTOTRANSFORM_UI_LAYOUT && ApiHelper.IS_NEXUS_4 && is16by9AspectRatio(mPictureSize);}  }
class C{  public static void makePlaylistMenu(Context context,SubMenu sub){  String[] cols=new String[]{MediaStore.Audio.Playlists._ID,MediaStore.Audio.Playlists.NAME};  ContentResolver resolver=context.getContentResolver();  if (resolver == null) {    System.out.println("resolver = null");  } else {    String whereclause=MediaStore.Audio.Playlists.NAME + " != ''";    Cursor cur=resolver.query(MediaStore.Audio.Playlists.EXTERNAL_CONTENT_URI,cols,whereclause,null,MediaStore.Audio.Playlists.NAME);    sub.clear();    sub.add(1,Defs.QUEUE,0,R.string.queue);    sub.add(1,Defs.NEW_PLAYLIST,0,R.string.new_playlist);    if (cur != null && cur.getCount() > 0) {      cur.moveToFirst();      while (!cur.isAfterLast()) {        Intent intent=new Intent();        intent.putExtra("playlist",cur.getLong(0));        sub.add(1,Defs.PLAYLIST_SELECTED,0,cur.getString(1)).setIntent(intent);        cur.moveToNext();      }    }    if (cur != null) {      cur.close();    }  }}  }
class C{  @Override public void write(byte[] buffer,int off,int nbytes) throws IOException {  super.write(buffer,off,nbytes);  crc.update(buffer,off,nbytes);}  }
class C{  public FastStringBuffer reverse(){  final int limit=count / 2;  for (int i=0; i < limit; ++i) {    char c=value[i];    value[i]=value[count - i - 1];    value[count - i - 1]=c;  }  return this;}  }
class C{  public static String center(String str,int size,String delim){  int sz=str.length();  int p=size - sz;  if (p < 1) {    return str;  }  str=leftPad(str,sz + p / 2,delim);  str=rightPad(str,size,delim);  return str;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:43.024 -0500",hash_original_method="DF871C8C00FF2649781A75B85A334DC6",hash_generated_method="56CC79A19EB00EEFAF7D9F7DDFAD4D6D") protected TestResult start(String args[]) throws Exception {  String testCase="";  boolean wait=false;  for (int i=0; i < args.length; i++) {    if (args[i].equals("-wait"))     wait=true; else     if (args[i].equals("-c"))     testCase=extractClassName(args[++i]); else     if (args[i].equals("-v"))     System.err.println("JUnit " + Version.id() + " by Kent Beck and Erich Gamma"); else     testCase=args[i];  }  if (testCase.equals(""))   throw new Exception("Usage: TestRunner [-wait] testCaseName, where name is the name of the TestCase class");  try {    Test suite=getTest(testCase);    return doRun(suite,wait);  } catch (  Exception e) {    throw new Exception("Could not create and run test suite: " + e);  }}  }
class C{  public String printBody() throws IOException {  final ByteArrayOutputStream baos=new ByteArrayOutputStream();  this.printBody(baos);  return new Utf8String(baos.toByteArray()).string();}  }
class C{  public String parseDTDMarkup() throws IOException {  StringBuilder strBuff=new StringBuilder();  ch=readCh();  while (true) {switch (ch) {case '>':      ch=readCh();    return strBuff.toString();case -1:  error("invalid.markup");return strBuff.toString();case '\n':ln++;ch=readCh();lfCount++;break;case '"':ch=readCh();break;case '\r':ln++;if ((ch=readCh()) == '\n') {ch=readCh();crlfCount++;} else {crCount++;}break;default :strBuff.append((char)(ch & 0xFF));ch=readCh();break;}}}  }
class C{  public WireFrameBoxPortrayal3D(){  this(-0.5,-0.5,-0.5,0.5,0.5,0.5);}  }
class C{  public void actionPerformed(ActionEvent e){  String action=e.getActionCommand();  if (action == null || action.length() == 0)   return; else   if (action.equals(ConfirmPanel.A_RESET)) {    if (keylayout.getPOSKeyLayoutType().equals(MPOSKeyLayout.POSKEYLAYOUTTYPE_Numberpad))     text.setText("0"); else     text.setText("");    try {      text.commitEdit();    } catch (    ParseException e1) {      log.log(Level.FINE,"JFormattedTextField commit failed");    }  } else   if (action.equals(ConfirmPanel.A_CANCEL)) {    dispose();  } else   if (action.equals(ConfirmPanel.A_OK)) {    field.setText(text.getText());    try {      field.commitEdit();    } catch (    ParseException e1) {      log.log(Level.FINE,"JFormattedTextField commit failed");    }    dispose();  }  log.info("PosSubBasicKeys - actionPerformed: " + action);}  }
class C{  public Vec4 extractEyePoint(){  double x=-(m11 * m14) - (m21 * m24) - (m31 * m34);  double y=-(m12 * m14) - (m22 * m24) - (m32 * m34);  double z=-(m13 * m14) - (m23 * m24) - (m33 * m34);  return new Vec4(x,y,z);}  }
class C{  protected SecretKey engineTranslateKey(SecretKey key) throws InvalidKeyException {  try {    if ((key != null) && (key.getAlgorithm().equalsIgnoreCase("DESede")) && (key.getFormat().equalsIgnoreCase("RAW"))) {      if (key instanceof com.sun.crypto.provider.DESedeKey) {        return key;      }      DESedeKeySpec desEdeKeySpec=(DESedeKeySpec)engineGetKeySpec(key,DESedeKeySpec.class);      return engineGenerateSecret(desEdeKeySpec);    } else {      throw new InvalidKeyException("Inappropriate key format/algorithm");    }  } catch (  InvalidKeySpecException e) {    throw new InvalidKeyException("Cannot translate key");  }}  }
class C{  public boolean isDeliveryDeliveredReportsEnabled(){  return mRcsSettings.isImReportsActivated();}  }
class C{  static String lookUpFactoryClassName(String factoryId,String propertiesFilename,String fallbackClassName){  SecuritySupport ss=SecuritySupport.getInstance();  try {    String systemProp=ss.getSystemProperty(factoryId);    if (systemProp != null) {      debugPrintln("found system property, value=" + systemProp);      return systemProp;    }  } catch (  SecurityException se) {  }  String factoryClassName=null;  if (propertiesFilename == null) {    File propertiesFile=null;    boolean propertiesFileExists=false;    try {      String javah=ss.getSystemProperty("java.home");      propertiesFilename=javah + File.separator + "lib"+ File.separator+ DEFAULT_PROPERTIES_FILENAME;      propertiesFile=new File(propertiesFilename);      propertiesFileExists=ss.getFileExists(propertiesFile);    } catch (    SecurityException e) {      fLastModified=-1;      fXalanProperties=null;    }synchronized (ObjectFactory.class) {      boolean loadProperties=false;      FileInputStream fis=null;      try {        if (fLastModified >= 0) {          if (propertiesFileExists && (fLastModified < (fLastModified=ss.getLastModified(propertiesFile)))) {            loadProperties=true;          } else {            if (!propertiesFileExists) {              fLastModified=-1;              fXalanProperties=null;            }          }        } else {          if (propertiesFileExists) {            loadProperties=true;            fLastModified=ss.getLastModified(propertiesFile);          }        }        if (loadProperties) {          fXalanProperties=new Properties();          fis=ss.getFileInputStream(propertiesFile);          fXalanProperties.load(fis);        }      } catch (      Exception x) {        fXalanProperties=null;        fLastModified=-1;      } finally {        if (fis != null) {          try {            fis.close();          } catch (          IOException exc) {          }        }      }    }    if (fXalanProperties != null) {      factoryClassName=fXalanProperties.getProperty(factoryId);    }  } else {    FileInputStream fis=null;    try {      fis=ss.getFileInputStream(new File(propertiesFilename));      Properties props=new Properties();      props.load(fis);      factoryClassName=props.getProperty(factoryId);    } catch (    Exception x) {    } finally {      if (fis != null) {        try {          fis.close();        } catch (        IOException exc) {        }      }    }  }  if (factoryClassName != null) {    debugPrintln("found in " + propertiesFilename + ", value="+ factoryClassName);    return factoryClassName;  }  return findJarServiceProviderName(factoryId);}  }
class C{  public VersionConstraint createVersionConstraint(){  VersionConstraintImpl versionConstraint=new VersionConstraintImpl();  return versionConstraint;}  }
class C{  public static void initUSB(){  Context context=new Context();  int result=LibUsb.init(context);  System.out.println("LibUSB Init Complete");  if (result != LibUsb.SUCCESS)   throw new LibUsbException("Unable to initialize libusb.",result);}  }
class C{  public void reset(){  mRenderer.resetTextures();}  }
class C{  public TransactionFeeCalculatorBeforeFork(final MosaicFeeInformationLookup mosaicFeeInformationLookup){  this.mosaicFeeInformationLookup=mosaicFeeInformationLookup;}  }
class C{  static public void init(int maxPhraseLength,String path,boolean flatgazetteers) throws IOException {  if (flatgazetteers) {    gazetteers=new FlatGazetteers(path);  } else {    gazetteers=new TreeGazetteers(maxPhraseLength,path);  }}  }
class C{  public static boolean isRootId(@Nullable IgniteUuid id){  return id != null && ROOT_ID.equals(id);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return getEditorial(stack).getNetwork();}  }
class C{  public CAndExpression(final List<IFilterExpression<T>> expressions){  m_expressions=expressions;}  }
class C{  public static double normalizeLon(double lon){  return centeredModulus(lon,360);}  }
class C{  public String login(int AD_Org_ID,int AD_Role_ID,int AD_User_ID){  Env.setContext(Env.getCtx(),CTX_IsReplicationEnabled,true);  m_AD_Org_ID=AD_Org_ID;  m_AD_Role_ID=AD_Role_ID;  m_AD_User_ID=AD_User_ID;  log.info("AD_Org_ID  =" + m_AD_Org_ID);  log.info("AD_Role_ID =" + m_AD_Role_ID);  log.info("AD_User_ID =" + m_AD_User_ID);  loadReplicationStrategy();  return null;}  }
class C{  public static List<List<File>> partition(final int binCount,final Collection<File> files){  return binThem(binCount,files.toArray(new File[files.size()]));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:47.721 -0400",hash_original_method="B08580BE26568ABAA59E21E644AD634F",hash_generated_method="708E83190D467DC7D258871144946F0E") public void error(Object message){}  }
class C{  public CContentSelectionMenu(final CGraphModel model,final NaviNode node){  Preconditions.checkNotNull(model,"IE00968: Model argument can not be null");  Preconditions.checkNotNull(node,"IE00969: Node argument can not be null");  add(new CCopySelectionToClipboard(node));  add(new CSearchForSelection(model.getGraphPanel().getToolbar().getSearchPanel().getSearchField(),node));  add(new CSelectNodesWithSelection(model.getGraph(),node));}  }
class C{  @DSComment("Sip phone call") @DSSpec(DSCat.PHONE_CALL) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:28.924 -0500",hash_original_method="91407CCBE269ED4E5C3C36CDEC2695DD",hash_generated_method="50396E262A97339209C9B2C8CDF9F361") public void toggleMute(){synchronized (this) {    mMuted=!mMuted;    setAudioGroupMode();  }}  }
class C{  public static Value noInvoke(Value val){  if (val == null || isInvoke(val))   return null; else   return val;}  }
class C{  private LocalCandidate findRedundant(LocalCandidate cand){synchronized (localCandidates) {    for (    LocalCandidate redundantCand : localCandidates) {      if ((cand != redundantCand) && cand.getTransportAddress().equals(redundantCand.getTransportAddress()) && cand.getBase().equals(redundantCand.getBase())) {        return redundantCand;      }    }  }  return null;}  }
class C{  public void parse(String line,String timeKey) throws Exception {  Matcher matcher=PATTERN.matcher(line);  if (matcher.find()) {    load1=NumberUtils.toFloat(matcher.group(1));    load5=NumberUtils.toFloat(matcher.group(2));    load15=NumberUtils.toFloat(matcher.group(3));  }}  }
class C{  public void uncompress(){  data.position(0);  InflaterInputStream inflater=new InflaterInputStream(data.asInputStream());  byte[] buffer=new byte[8192];  IoBuffer tmp=IoBuffer.allocate(0);  tmp.setAutoExpand(true);  try {    while (inflater.available() > 0) {      int decompressed=inflater.read(buffer);      if (decompressed <= 0) {        break;      }      tmp.put(buffer,0,decompressed);    }  } catch (  IOException e) {    tmp.free();    throw new RuntimeException("could not uncompress data",e);  } finally {    if (inflater != null) {      try {        inflater.close();      } catch (      IOException e1) {      }    }  }  data.free();  data=tmp;  data.flip();  prepareIO();}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }}  }
class C{  protected void calculatePersianDate(){  long julianDate=((long)Math.floor((getTimeInMillis() - PersianCalendarConstants.MILLIS_JULIAN_EPOCH)) / PersianCalendarConstants.MILLIS_OF_A_DAY);  long PersianRowDate=PersianCalendarUtils.julianToPersian(julianDate);  long year=PersianRowDate >> 16;  int month=(int)(PersianRowDate & 0xff00) >> 8;  int day=(int)(PersianRowDate & 0xff);  this.persianYear=(int)(year > 0 ? year : year - 1);  this.persianMonth=month;  this.persianDay=day;}  }
class C{  private ConditionMatch evaluateCalendarCondition(final int calField){  return evaluateNumericCondition((Calendar.getInstance()).get(calField));}  }
class C{  public TokenType type(){  return tokenTypes[tokenIndex];}  }
class C{  final public int lastIndexOf(final char c,final int from){  final char[] a=array;  if (from < 0)   return -1;  int i=length();  if (from < i)   i=from + 1;  if (i < 0)   return -1;  while (i-- != 0)   if (a[i] == c)   return i;  return -1;}  }
class C{  private void resetInternal(){  mTransitionState=TRANSITION_NONE;  Arrays.fill(mStartAlphas,0);  mStartAlphas[0]=255;  Arrays.fill(mAlphas,0);  mAlphas[0]=255;  Arrays.fill(mIsLayerOn,false);  mIsLayerOn[0]=true;}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case TypesPackage.TMEMBER_WITH_ACCESS_MODIFIER___GET_MEMBER_ACCESS_MODIFIER:    return getMemberAccessModifier();}return super.eInvoke(operationID,arguments);}  }
class C{  static void drawPoint(Graphics g,int x,int y){  g.drawLine(x,y,x,y);}  }
class C{  private void notifyInterfaceClassActivity(String label,boolean active){  final int length=mObservers.beginBroadcast();  for (int i=0; i < length; i++) {    try {      mObservers.getBroadcastItem(i).interfaceClassDataActivityChanged(label,active);    } catch (    RemoteException e) {    }catch (    RuntimeException e) {    }  }  mObservers.finishBroadcast();}  }
class C{  @SuppressWarnings("unchecked") Map<String,Object> flatten(Map<String,Object> source){  Map<String,Object> result=new LinkedHashMap<>();  for (  String key : source.keySet()) {    Object value=source.get(key);    if (value instanceof Map) {      Map<String,Object> subMap=flatten((Map<String,Object>)value);      for (      String subkey : subMap.keySet()) {        result.put(key + "." + subkey,subMap.get(subkey));      }    } else     if (value instanceof Collection) {      StringBuilder joiner=new StringBuilder();      String separator="";      for (      Object element : ((Collection)value)) {        Map<String,Object> subMap=flatten(Collections.singletonMap(key,element));        joiner.append(separator).append(subMap.entrySet().iterator().next().getValue().toString());        separator=",";      }      result.put(key,joiner.toString());    } else {      result.put(key,value);    }  }  return result;}  }
class C{  public final int cancelOperation(int token){  return AsyncQueryServiceHelper.cancelOperation(token);}  }
class C{  ByteVector put12(final int b,final int s){  int length=this.length;  if (length + 3 > data.length) {    enlarge(3);  }  byte[] data=this.data;  data[length++]=(byte)b;  data[length++]=(byte)(s >>> 8);  data[length++]=(byte)s;  this.length=length;  return this;}  }
class C{  void reset(int docID) throws IOException {  boolean success=false;  try {    doReset(docID);    success=true;  }  finally {    if (success == false) {      chunkDocs=0;    }  }}  }
class C{  private String moveToFolder(final String file,final String folder){  final File source=new File(file);  final File destination=new File(folder + File.separator + source.getName());  Log.i(TAG,file + " stored in temp folder. Moving to " + destination.getAbsolutePath());  try {    FileUtils.moveFile(source,destination);  } catch (  final IOException e) {    Log.e(TAG,"I/O error while moving file");  }  return destination.getAbsolutePath();}  }
class C{  public BigInteger calculateServerEvidenceMessage() throws CryptoException {  if ((this.A == null) || (this.M1 == null) || (this.S == null)) {    throw new CryptoException("Impossible to compute M2: " + "some data are missing from the previous operations (A,M1,S)");  }  this.M2=SRP6Util.calculateM2(digest,N,A,M1,S);  return M2;}  }
class C{  public boolean isDividerAllowedAbove(){  return mDividerAllowedAbove;}  }
class C{  protected void calculateFitness(){  logger.debug("Calculating fitness for " + population.size() + " individuals");  Iterator<T> iterator=population.iterator();  while (iterator.hasNext()) {    T c=iterator.next();    if (isFinished()) {      if (c.isChanged())       iterator.remove();    } else {      calculateFitness(c);    }  }}  }
class C{  static File mapAlternativeName(File lib){  return null;}  }
class C{  private byte[] decode(DerInputStream in) throws IOException {  DerValue val=in.getDerValue();  byte[] derEncoding=val.toByteArray();  derEncoding[0]=DerValue.tag_SetOf;  DerInputStream derIn=new DerInputStream(derEncoding);  DerValue[] derVals=derIn.getSet(3,true);  PKCS9Attribute attrib;  ObjectIdentifier oid;  boolean reuseEncoding=true;  for (int i=0; i < derVals.length; i++) {    try {      attrib=new PKCS9Attribute(derVals[i]);    } catch (    ParsingException e) {      if (ignoreUnsupportedAttributes) {        reuseEncoding=false;        continue;      } else {        throw e;      }    }    oid=attrib.getOID();    if (attributes.get(oid) != null)     throw new IOException("Duplicate PKCS9 attribute: " + oid);    if (permittedAttributes != null && !permittedAttributes.containsKey(oid))     throw new IOException("Attribute " + oid + " not permitted in this attribute set");    attributes.put(oid,attrib);  }  return reuseEncoding ? derEncoding : generateDerEncoding();}  }
class C{  @Timed @ExceptionMetered @POST @Consumes(APPLICATION_JSON) public Response createSecret(@Auth User user,@Valid CreateSecretRequest request){  logger.info("User '{}' creating secret '{}'.",user,request.name);  Secret secret;  try {    SecretController.SecretBuilder builder=secretController.builder(request.name,request.content,user.getName(),request.expiry);    if (request.description != null) {      builder.withDescription(request.description);    }    if (request.metadata != null) {      builder.withMetadata(request.metadata);    }    secret=builder.create();  } catch (  DataAccessException e) {    logger.info(format("Cannot create secret %s",request.name),e);    throw new ConflictException(format("Cannot create secret %s.",request.name));  }  URI uri=UriBuilder.fromResource(SecretsResource.class).path("{secretId}").build(secret.getId());  Response response=Response.created(uri).entity(secretDetailResponseFromId(secret.getId())).build();  if (response.getStatus() == HttpStatus.SC_CREATED) {    Map<String,String> extraInfo=new HashMap<>();    if (request.description != null) {      extraInfo.put("description",request.description);    }    if (request.metadata != null) {      extraInfo.put("metadata",request.metadata.toString());    }    extraInfo.put("expiry",Long.toString(request.expiry));    auditLog.recordEvent(new Event(Instant.now(),EventTag.SECRET_CREATE,user.getName(),request.name,extraInfo));  }  return response;}  }
class C{  private void readHeader(StreamTokenizer tokenizer) throws IOException {  ArrayList<Attribute> attribDefs=new ArrayList<Attribute>();  ArrayList<Integer> ignores=new ArrayList<Integer>();  StreamTokenizerUtils.getFirstToken(tokenizer);  if (tokenizer.ttype == StreamTokenizer.TT_EOF) {    StreamTokenizerUtils.errms(tokenizer,"premature end of file");  }  m_numAttribs=1;  ArrayList<String> classVals=new ArrayList<String>();  while (tokenizer.ttype != StreamTokenizer.TT_EOL) {    String val=tokenizer.sval.trim();    if (val.length() > 0) {      val=removeTrailingPeriod(val);      classVals.add(val);    }    StreamTokenizerUtils.getToken(tokenizer);  }  int counter=0;  while (tokenizer.ttype != StreamTokenizer.TT_EOF) {    StreamTokenizerUtils.getFirstToken(tokenizer);    if (tokenizer.ttype != StreamTokenizer.TT_EOF) {      String attribName=tokenizer.sval;      StreamTokenizerUtils.getToken(tokenizer);      if (tokenizer.ttype == StreamTokenizer.TT_EOL) {        StreamTokenizerUtils.errms(tokenizer,"premature end of line. Expected " + "attribute type.");      }      String temp=tokenizer.sval.toLowerCase().trim();      if (temp.startsWith("ignore") || temp.startsWith("label")) {        ignores.add(new Integer(counter));        counter++;      } else       if (temp.startsWith("continuous")) {        attribDefs.add(new Attribute(attribName));        counter++;      } else {        counter++;        ArrayList<String> attribVals=new ArrayList<String>();        while (tokenizer.ttype != StreamTokenizer.TT_EOL && tokenizer.ttype != StreamTokenizer.TT_EOF) {          String val=tokenizer.sval.trim();          if (val.length() > 0) {            val=removeTrailingPeriod(val);            attribVals.add(val);          }          StreamTokenizerUtils.getToken(tokenizer);        }        attribDefs.add(new Attribute(attribName,attribVals));      }    }  }  boolean ok=true;  int i=-1;  if (classVals.size() == 1) {    for (i=0; i < attribDefs.size(); i++) {      if (attribDefs.get(i).name().compareTo(classVals.get(0)) == 0) {        ok=false;        m_numAttribs--;        break;      }    }  }  if (ok) {    attribDefs.add(new Attribute("Class",classVals));  }  m_structure=new Instances(m_fileStem,attribDefs,0);  try {    if (ok) {      m_structure.setClassIndex(m_structure.numAttributes() - 1);    } else {      m_structure.setClassIndex(i);    }  } catch (  Exception ex) {    ex.printStackTrace();  }  m_numAttribs=m_structure.numAttributes() + ignores.size();  m_ignore=new boolean[m_numAttribs];  for (i=0; i < ignores.size(); i++) {    m_ignore[ignores.get(i).intValue()]=true;  }}  }
class C{  public static _ItemTypeEnum fromString(final String value) throws SOAPSerializationException {  return (_ItemTypeEnum)Enumeration.fromString(value,_ItemTypeEnum.VALUES_TO_INSTANCES);}  }
class C{  public static void standardize(DoubleArrayList data,double mean,double standardDeviation){  double[] elements=data.elements();  for (int i=data.size(); --i >= 0; )   elements[i]=(elements[i] - mean) / standardDeviation;}  }
class C{  public boolean isCollection(){  return label.isCollection();}  }
class C{  public int recycleItems(LinearLayout layout,int firstItem,ItemsRange range){  int index=firstItem;  for (int i=0; i < layout.getChildCount(); ) {    if (!range.contains(index)) {      recycleView(layout.getChildAt(i),index);      layout.removeViewAt(i);      if (i == 0) {        firstItem++;      }    } else {      i++;    }    index++;  }  return firstItem;}  }
class C{  public String regexNormalize(String urlString,String scope){  HashMap<String,List<Rule>> scopedRules=getScopedRules();  List<Rule> curRules=scopedRules.get(scope);  if (curRules == null) {    String configFile=getConf().get("urlnormalizer.regex.file." + scope);    if (configFile != null) {      LOG.debug("resource for scope '" + scope + "': "+ configFile);      try {        Reader reader=getConf().getConfResourceAsReader(configFile);        curRules=readConfiguration(reader);        scopedRules.put(scope,curRules);      } catch (      Exception e) {        LOG.warn("Couldn't load resource '" + configFile + "': "+ e);      }    }    if (curRules == EMPTY_RULES || curRules == null) {      LOG.info("can't find rules for scope '" + scope + "', using default");      scopedRules.put(scope,EMPTY_RULES);    }  }  if (curRules == EMPTY_RULES || curRules == null) {    curRules=defaultRules;  }  Iterator<Rule> i=curRules.iterator();  while (i.hasNext()) {    Rule r=(Rule)i.next();    Matcher matcher=r.pattern.matcher(urlString);    urlString=matcher.replaceAll(r.substitution);  }  return urlString;}  }
class C{  @Override public Socket createSocket(InetAddress address,int port) throws IOException {  return new SSLSocketImpl(context,address,port);}  }
class C{  public boolean okToSend(){  return (true);}  }
class C{  public MLOutput execute(String dmlScriptFilePath,Map<String,String> namedArgs,boolean parsePyDML) throws IOException, DMLException, ParseException {  return execute(dmlScriptFilePath,namedArgs,parsePyDML,null);}  }
class C{  public static byte[] toByteArray(URLConnection urlConn) throws IOException {  InputStream inputStream=urlConn.getInputStream();  try {    return IOUtils.toByteArray(inputStream);  }  finally {    inputStream.close();  }}  }
class C{  public C1 method2(){  return null;}  }
class C{  public static void addChemicalInfuserRecipe(GasStack leftInput,GasStack rightInput,GasStack output){  try {    Class recipeClass=Class.forName("mekanism.common.recipe.RecipeHandler");    Method m=recipeClass.getMethod("addChemicalInfuserRecipe",GasStack.class,GasStack.class,GasStack.class);    m.invoke(null,leftInput,rightInput,output);  } catch (  Exception e) {    System.err.println("Error while adding recipe: " + e.getMessage());  }}  }
class C{  public RosterGroupComboBox(){  this(Roster.getDefault(),Roster.getDefault().getDefaultRosterGroup());}  }
class C{  public GeoRssWhere(Box box){  if (box != null) {    if (!(box instanceof GmlEnvelope)) {      box=new GmlEnvelope(box);    }    setExtension(box);  }}  }
class C{  public static void unforceSevereAlertProcessing(){  ForceSevereAlertProcessing.set(Boolean.FALSE);}  }
class C{  private void addWarningToContainers(PlausibilityWarning warning){  allWarnings.add(warning);  MapUtils.getSet(warning.getTransitRoute(),MapUtils.getMap(warning.getTransitLine(),this.warningsSchedule)).add(warning);  MapUtils.getSet(warning.getLinkIds(),warningsLinkIds).add(warning);  for (  Id<Link> linkId : warning.getLinkIds()) {    MapUtils.getSet(linkId,warningsLinks).add(warning);  }}  }
class C{  public static Vec4 fromFloatArray(float[] array,int offset,int length){  if (array == null) {    throw new IllegalArgumentException("Array Is Null");  }  if (offset < 0) {    throw new IllegalArgumentException("Offset Is Invalid");  }  if (length < 1) {    throw new IllegalArgumentException("Length Is Invalid");  }  if (array.length < offset + length) {    throw new IllegalArgumentException("Array Invalid Length");  }  if (length == 2)   return new Vec4(array[offset],array[offset + 1],0d);  if (length == 3)   return new Vec4(array[offset],array[offset + 1],array[offset + 2]);  return new Vec4(array[offset],array[offset + 1],array[offset + 2],array[offset + 3]);}  }
class C{  public static boolean isSchemaTriple(Statement triple){  URI pred=triple.getPredicate();  if (schemaPredicates.contains(pred)) {    return true;  } else   if (pred.equals(RDF.TYPE)) {    if (schemaTypes.contains(triple.getObject())) {      return true;    }  }  return false;}  }
class C{  public static long copy(File source,File destination) throws FileNotFoundException, IOException {  FileInputStream in=null;  FileOutputStream out=null;  try {    in=new FileInputStream(source);    out=new FileOutputStream(destination);    return copy(in,out);  }  finally {    CloseableUtils.close(in);    CloseableUtils.close(out);  }}  }
class C{  public void registerSystemAssociation(Association assoc) throws AssociationAlreadyRegisteredException, RegisterFailedException {  if (assoc == null) {    throw new IllegalArgumentException("The specified association is null");  }  try {    appAssocWriter.checkAssociationValidForRegistration(assoc);  } catch (  IllegalArgumentException e) {    throw e;  }  if (appAssocWriter.isAssociationExist(assoc,AppAssociationWriter.SYSTEM_LEVEL)) {    throw new AssociationAlreadyRegisteredException("Assocation already exists!");  }  appAssocWriter.registerAssociation(assoc,AppAssociationWriter.SYSTEM_LEVEL);}  }
class C{  @SuppressWarnings("unchecked") public final K column(String column){  this.column=column;  return (K)this;}  }
class C{  public void showAdelaide(View v){  if (mMap == null) {    return;  }  mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(ADELAIDE,10f));}  }
class C{  final int internalNextInt(int origin,int bound){  int r=mix32(nextSeed());  if (origin < bound) {    int n=bound - origin, m=n - 1;    if ((n & m) == 0)     r=(r & m) + origin; else     if (n > 0) {      for (int u=r >>> 1; u + m - (r=u % n) < 0; u=mix32(nextSeed()) >>> 1)       ;      r+=origin;    } else {      while (r < origin || r >= bound)       r=mix32(nextSeed());    }  }  return r;}  }
class C{  @Override public void visitInnerClass(final String aname,final String outerName,final String innerName,final int attr_access){  if ((name != null) && name.equals(aname)) {    this.access=attr_access;  }  super.visitInnerClass(aname,outerName,innerName,attr_access);}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder(getClass().getName());  sb.append("[propertyName=").append(getPropertyName());  appendTo(sb);  sb.append("; oldValue=").append(getOldValue());  sb.append("; newValue=").append(getNewValue());  sb.append("; propagationId=").append(getPropagationId());  sb.append("; source=").append(getSource());  return sb.append("]").toString();}  }
class C{  public GridClientAuthenticationException(String msg){  super(msg);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrinsertbefore5.class,args);}  }
class C{  synchronized List<Long> keys(boolean cold,boolean nonResident){  ArrayList<Long> keys=new ArrayList<Long>();  if (cold) {    Entry<V> start=nonResident ? queue2 : queue;    for (Entry<V> e=start.queueNext; e != start; e=e.queueNext) {      keys.add(e.key);    }  } else {    for (Entry<V> e=stack.stackNext; e != stack; e=e.stackNext) {      keys.add(e.key);    }  }  return keys;}  }
class C{  public CConditionBox(final List<ICriteriumCreator> criteria){  for (  final ICriteriumCreator criterium : criteria) {    addItem(new CCriteriumWrapper(criterium));  }}  }
class C{  public ImmutableLocation add(double dx,double dy,double dz){  return new ImmutableLocation(x + dx,y + dy,z + dz,w);}  }
class C{  public void cleanStrategyWorker(){  for (  String key : m_strategyWorkers.keySet()) {    if (m_strategyWorkers.get(key).isDone()) {      m_strategyWorkers.remove(key);    }  }}  }
class C{  public static String formatIntegerIfPossible(double value,int numberOfDigits,boolean groupingCharacter){  if (Double.isNaN(value)) {    return "?";  }  if (Double.isInfinite(value)) {    if (value < 0) {      return "-" + FORMAT_SYMBOLS.getInfinity();    } else {      return FORMAT_SYMBOLS.getInfinity();    }  }  long longValue=Math.round(value);  if (Math.abs(longValue - value) < epsilonDisplayValue) {    INTEGER_FORMAT.setGroupingUsed(groupingCharacter);    return INTEGER_FORMAT.format(value);  }  return formatNumber(value,numberOfDigits,groupingCharacter);}  }
class C{  public OperationAbortedException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  @Override public String toString(){  return "CUtexObject[" + "nativePointer=0x" + Long.toHexString(getNativePointer()) + "]";}  }
class C{  public void paint(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).paint(a,b);  }}  }
class C{  public SeparableInfoCalculatorDiscrete(int base,int history,int numInfoContributors){  this(base,history,numInfoContributors,false);}  }
class C{  public static boolean isEntityCoralium(EntityLivingBase par1){  return par1 instanceof ICoraliumEntity || par1 instanceof EntityPlayer && isPlayerCoralium((EntityPlayer)par1);}  }
class C{  public void testSetF19Momentary(){  boolean f19Momentary=false;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setF19Momentary(f19Momentary);}  }
class C{  public void dragEnter(DragSourceDragEvent dsde){  System.out.println("[Source] dragEnter");  changeCursor(dsde.getDragSourceContext(),dsde.getUserAction() & dsde.getDropAction());}  }
class C{  public boolean isStaticImport(){  return staticImport;}  }
class C{  public void put(int val){  min=val < min ? val : min;  max=val > max ? val : max;}  }
class C{  public static IStatus validateImportDeclaration(String name){  return validateImportDeclaration(name,CompilerOptions.VERSION_1_3,CompilerOptions.VERSION_1_3);}  }
class C{  public EnumMemberValue(ConstPool cp){  super('e',cp);  typeIndex=valueIndex=0;}  }
class C{  @Override public synchronized void put(String key,Entry entry){  pruneIfNeeded(entry.data.length);  File file=getFileForKey(key);  try {    FileOutputStream fos=new FileOutputStream(file);    CacheHeader e=new CacheHeader(key,entry);    boolean success=e.writeHeader(fos);    if (!success) {      fos.close();      Loger.debug(String.format("Failed to write header for %s",file.getAbsolutePath()));      throw new IOException();    }    fos.write(entry.data);    putEntry(key,e);    return;  } catch (  IOException e) {    Loger.debug(DiskBasedCache.class.getName() + e.getMessage());  }  boolean deleted=file.delete();  if (!deleted) {    Loger.debug(String.format("Could not clean up file %s",file.getAbsolutePath()));  }}  }
class C{  private static Boolean methodExists(Class clazz,String methodName,Type[] args,Type returnType){  try {    Class<?>[] _args=new Class[args.length];    for (int i=0; i < _args.length; i++) {      _args[i]=Types.toClass(args[i]);    }    Class<?> rtn=Types.toClass(returnType);    try {      java.lang.reflect.Method m=clazz.getMethod(methodName,_args);      return m.getReturnType() == rtn;    } catch (    Exception e) {      return false;    }  } catch (  Exception e) {    e.printStackTrace();    return null;  }}  }
class C{  public void oneUpgrade() throws Exception {  VendorData supplierData=setupNewSupplier("2013-01-01 08:00:00");  setDateFactory("2013-07-10 20:00:00");  setCutOffDay(supplierData.getAdminKey(),1);  CustomerData customerData=registerCustomer(supplierData);  VOServiceDetails service=createPublishActivateService(supplierData,TestPriceModel.EXAMPLE_RATA_WEEK_ROLES,"oneUpgrade");  updateOperatorRevenueShare(10.0D,service.getKey());  VOSubscriptionDetails subscr=subscribe(customerData.getAdminUser(),"oneUpgrade",service,"2013-08-01 12:00:00","ADMIN");  subscr=addSecondCustomerUser(subscr,service,"2013-08-05 10:00:00");  VOServiceDetails upgrService=createAndRegisterCompatibleService(supplierData,TestPriceModel.EXAMPLE_PRORATA_MONTH_ROLES,service,"oneUpgrade_upgr");  updateOperatorRevenueShare(15.0D,upgrService.getKey());  upgrade(customerData.getAdminUser(),subscr,upgrService,"2013-08-08 15:00:00");  resetCutOffDay(supplierData.getAdminKey());  cacheTestData("oneUpgrade",new TestData(supplierData));}  }
class C{  public void put(CtClass oldname,CtClass newname){  put(oldname.getName(),newname.getName());}  }
class C{  public List<File> uncompress(final File inputFile,final File outputDir){  LOGGER.info(String.format("Uncompressing %s to dir %s.",inputFile.getAbsolutePath(),outputDir.getAbsolutePath()));  try {switch (FileAnalyser.getMimetype(inputFile)) {case "application/x-bzip2":      return new Tar().uncompressTarBz2File(inputFile,outputDir,null);case "application/x-gzip":    return new Tar().uncompressTarGzFile(inputFile,outputDir,null);case "application/x-xz":  return new Tar().uncompressTarXzFile(inputFile,outputDir,null);default :return new Tar().uncompressTarFile(inputFile,outputDir,null);}} catch (PlayOnLinuxException e) {throw new ArchiveException("Unrecognized file format",e);}}  }
class C{  public static void copyExcept(Object src,Object dst,int oldSize,int removeIndex){  if (removeIndex > 0 && oldSize > 0) {    System.arraycopy(src,0,dst,0,removeIndex);  }  if (removeIndex < oldSize) {    System.arraycopy(src,removeIndex + 1,dst,removeIndex,oldSize - removeIndex - 1);  }}  }
class C{  @Override public void agentActed(Agent agent,Action action,Environment source){  super.agentAdded(agent,source);  notify(action.toString());}  }
class C{  public void moveVolumesFromOneStorageGroupToAnother(StorageSystem storage,CIMObjectPath sourceMaskingGroup,CIMObjectPath targetMaskingGroup,List<URI> volumeURIs,SmisJob job) throws Exception {  Set<String> volumeDeviceIds=new HashSet<String>();  for (  URI volURI : volumeURIs) {    Volume volume=_dbClient.queryObject(Volume.class,volURI);    volumeDeviceIds.add(volume.getNativeId());  }  CIMArgument[] inArgs=getMoveVolumesBetweenMaskingGroupInputArguments(storage,sourceMaskingGroup,targetMaskingGroup,volumeDeviceIds);  CIMArgument[] outArgs=new CIMArgument[1];  invokeMethodSynchronously(storage,_cimPath.getControllerConfigSvcPath(storage),"EMCMoveMembers",inArgs,outArgs,job);}  }
class C{  public boolean execute(String action,JSONArray args,CallbackContext callbackContext) throws JSONException {  CordovaArgs cordovaArgs=new CordovaArgs(args);  return execute(action,cordovaArgs,callbackContext);}  }
class C{  protected void paint(SynthContext context,Graphics g){}  }
class C{  public void createRcsAccount(String username,boolean enableSync) throws RcsAccountException {  try {    Account account=getAccount(username);    if (account == null) {      account=new Account(username,ACCOUNT_MANAGER_TYPE);      AccountManager accountManager=AccountManager.get(mContext);      boolean resource=accountManager.addAccountExplicitly(account,null,null);      if (!resource) {        throw new RcsAccountException("Failed to create RCS account for username '" + username + "'!");      }    }    if (enableSync) {      ContentResolver.setIsSyncable(account,ContactsContract.AUTHORITY,1);    }    ContentResolver.setSyncAutomatically(account,ContactsContract.AUTHORITY,enableSync);    if (ContactManager.INVALID_ID == mContactManager.getRcsGroupIdFromContactsContractGroups()) {      ContentValues contentValues=new ContentValues();      contentValues.put(Groups.ACCOUNT_NAME,username);      contentValues.put(Groups.ACCOUNT_TYPE,ACCOUNT_MANAGER_TYPE);      contentValues.put(Groups.GROUP_VISIBLE,false);      contentValues.put(Groups.TITLE,mContext.getString(R.string.rcs_core_account_id));      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {        contentValues.put(CONTACTSCONTRACT_GROUPS_COLUMN_TITLE_RES,R.string.rcs_core_account_id);        contentValues.put(CONTACTSCONTRACT_GROUPS_COLUMN_RES_PACKAGE,mContext.getPackageName());      }      contentValues.put(Groups.GROUP_IS_READ_ONLY,1);      mContentResolver.insert(Groups.CONTENT_URI,contentValues);    }    mContactManager.createMyContact();  } catch (  ContactManagerException e) {    throw new RcsAccountException(new StringBuilder("Failed to create RCS account for username '").append(username).append("'!").toString(),e);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void initProperties(String filePropertiesName){  readFromClassPath(filePropertiesName);  Path curDirPath=getFileInCurrentDir(filePropertiesName);  if (Files.exists(curDirPath)) {    try (InputStream curFolder=Files.newInputStream(curDirPath)){      if (curFolder != null) {        load(curFolder);      }    } catch (    Exception e) {      throw new RuntimeException("Error getting properties file : " + filePropertiesName,e);    }  }}  }
class C{  public static void writeLines(Collection<?> lines,String lineEnding,OutputStream output,Charset encoding) throws IOException {  if (lines == null) {    return;  }  if (lineEnding == null) {    lineEnding=LINE_SEPARATOR;  }  Charset cs=Charsets.toCharset(encoding);  for (  Object line : lines) {    if (line != null) {      output.write(line.toString().getBytes(cs));    }    output.write(lineEnding.getBytes(cs));  }}  }
class C{  BerDecoder readReply(LdapRequest ldr) throws IOException, NamingException {  BerDecoder rber;  long elapsedMilli=0;  long elapsedNano=0;  while (((rber=ldr.getReplyBer()) == null) && (readTimeout <= 0 || elapsedMilli < readTimeout)) {    try {synchronized (this) {        if (sock == null) {          throw new ServiceUnavailableException(host + ":" + port+ "; socket closed");        }      }synchronized (ldr) {        rber=ldr.getReplyBer();        if (rber == null) {          if (readTimeout > 0) {            long beginNano=System.nanoTime();            ldr.wait(readTimeout - elapsedMilli);            elapsedNano+=(System.nanoTime() - beginNano);            elapsedMilli+=elapsedNano / 1000_000;            elapsedNano%=1000_000;          } else {            ldr.wait();          }        } else {          break;        }      }    } catch (    InterruptedException ex) {      throw new InterruptedNamingException("Interrupted during LDAP operation");    }  }  if ((rber == null) && (elapsedMilli >= readTimeout)) {    abandonRequest(ldr,null);    throw new NamingException("LDAP response read timed out, timeout used:" + readTimeout + "ms.");  }  return rber;}  }
class C{  public long forceGetValueAsLong(long defaultValue){  long[] l=getValueAsLongs();  if (l != null && l.length >= 1) {    return l[0];  }  byte[] b=getValueAsBytes();  if (b != null && b.length >= 1) {    return b[0];  }  Rational[] r=getValueAsRationals();  if (r != null && r.length >= 1 && r[0].getDenominator() != 0) {    return (long)r[0].toDouble();  }  return defaultValue;}  }
class C{  public SepsetMapDci search(){  this.logger.log("info","Starting Fast Adjacency Search (DCI).");  Set<Edge> edges=graph.getEdges();  for (  Edge _edge : edges) {    String name1=_edge.getNode1().getName();    String name2=_edge.getNode2().getName();    if (knowledge.isForbidden(name1,name2) && knowledge.isForbidden(name2,name1)) {      graph.removeEdge(_edge);      this.logger.log("edgeRemoved","Removed " + _edge + " because it was "+ "forbidden by background knowledge.");    }  }  SepsetMapDci sepset=new SepsetMapDci();  int _depth=depth;  if (_depth == -1) {    _depth=1000;  }  for (int d=0; d <= _depth; d++) {    boolean more=searchAtDepth(graph,independenceTest,new Knowledge2(),sepset,d);    if (!more) {      break;    }  }  this.logger.log("info","Finishing Fast Adjacency Search.");  return sepset;}  }
class C{  public AppInfo(Context context,LauncherActivityInfoCompat info,UserHandleCompat user,IconCache iconCache){  this(context,info,user,iconCache,UserManagerCompat.getInstance(context).isQuietModeEnabled(user));}  }
class C{  static <T>T checkNotNull(final T reference,@NonNls final String errorMessage){  return checkNotNull(reference,errorMessage,NO_ARGS);}  }
class C{  public String sqlADAction_deleteUnusedElements(String vendorName,String catalogName,String schemaName){  String subQuery1a=sql_select(vendorName,catalogName,schemaName,"AD_Column","c",new ArrayList<String>(Arrays.asList("1")),null,new ArrayList<String>(Arrays.asList("UPPER(e.ColumnName) = UPPER(c.ColumnName)")),null,false);  String subQuery1b=sql_select(vendorName,catalogName,schemaName,"AD_Process_Para","p",new ArrayList<String>(Arrays.asList("1")),null,new ArrayList<String>(Arrays.asList("UPPER(e.ColumnName) = UPPER(p.ColumnName)")),null,false);  return sql_delete(vendorName,catalogName,schemaName,"AD_Element","e",new ArrayList<String>(Arrays.asList(new StringBuffer("NOT EXISTS (").append(subQuery1a).append(")").toString(),new StringBuffer("NOT EXISTS (").append(subQuery1b).append(")").toString())),null);}  }
class C{  private int parseArticleArray(final Set<Article> articles,JsonReader reader,IArticleOmitter filter){  long time=System.currentTimeMillis();  int count=0;  try {    reader.beginArray();    while (reader.hasNext()) {      Article article=new Article();      reader.beginObject();      boolean skipObject=parseArticle(article,reader,filter);      reader.endObject();      if (!skipObject && article.id != -1 && article.title != null)       articles.add(article);      count++;    }    reader.endArray();  } catch (  OutOfMemoryError e) {    Controller.getInstance().lowMemory(true);  }catch (  Exception e) {    Log.e(TAG,"Input data could not be read: " + e.getMessage() + " ("+ e.getCause()+ ")",e);  }  Log.d(TAG,String.format("parseArticleArray: parsing %s articles took %s ms",count,(System.currentTimeMillis() - time)));  return count;}  }
class C{  protected void concatenate(GenericObjectList objList){  concatenate(objList,false);}  }
class C{  @SuppressWarnings("unused") public static void blackhole(Object value){}  }
class C{  public Detector2 createDetector2(BugReporter bugReporter){  if (FindBugs.isNoAnalysis()) {    throw new IllegalStateException("No analysis specified");  }  return detectorCreator.createDetector2(bugReporter);}  }
class C{  public PieData findMostPlayedData(StatisticType type,List<Long> shownChallenges){  ArrayList<Entry> entries=new ArrayList<>();  ArrayList<String> labels=new ArrayList<>();  List<Statistics> statistics;  statistics=mStatisticsDataSource.findByCategoryAndUser(mCategoryId,mUser);switch (type) {case TYPE_MOST_PLAYED:    break;case TYPE_MOST_FAILED:  statistics=removeSucceeded(statistics);break;case TYPE_MOST_SUCCEEDED:statistics=removeFailed(statistics);break;default :return null;}shownChallenges.addAll(getMost(entries,labels,statistics,NUMBER_PLAYED_LISTED));if (entries.size() > 1) {PieDataSet dataset=new PieDataSet(entries,"");mSettings.applyDataSetSettings(dataset,type);PieData data=new PieData(labels,dataset);mSettings.applyDataSettings(data);return data;} else {return null;}}  }
class C{  public void repaintPanel(){  removeAll();  initializeLayout();  repaint();}  }
class C{  public DTMAxisIterator reset(){  if (_isConstant) {    _currentNode=_startNode;    return resetPosition();  } else {    final boolean temp=_isRestartable;    _isRestartable=true;    setStartNode(_startNode);    _isRestartable=temp;  }  return this;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public DefaultSVGFigureFactory(){}  }
class C{  public static int dpToPixels(float dp,Resources resources){  float px=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dp,resources.getDisplayMetrics());  return (int)px;}  }
class C{  public RDFHandlerWrapper(RDFHandler... rdfHandlers){  assert rdfHandlers != null;  this.rdfHandlers=rdfHandlers;}  }
class C{  public boolean isMacroSet(String macro,Operator operator){synchronized (LOCK) {    if (macroMap.containsKey(macro) || PREDEFINED_OPERATOR_INDEPENDENT_MACROS.contains(macro)) {      return true;    }  }  return operator != null && PREDEFINED_OPERATOR_DEPENDENT_MACROS.contains(macro);}  }
class C{  public static DoubleArrayList quantiles(DoubleArrayList sortedData,DoubleArrayList percentages){  int s=percentages.size();  DoubleArrayList quantiles=new DoubleArrayList(s);  for (int i=0; i < s; i++) {    quantiles.add(quantile(sortedData,percentages.get(i)));  }  return quantiles;}  }
class C{  public ArrayList<YouTubePlaylist> readAll(){  ArrayList<YouTubePlaylist> list=new ArrayList<>();  SQLiteDatabase db=dbHelper.getReadableDatabase();  Cursor c=db.rawQuery(YouTubePlaylistEntry.SELECT_QUERY_ORDER_DESC,null);  while (c.moveToNext()) {    String playlistId=c.getString(c.getColumnIndexOrThrow(YouTubePlaylistEntry.COLUMN_PLAYLIST_ID));    String title=c.getString(c.getColumnIndexOrThrow(YouTubePlaylistEntry.COLUMN_TITLE));    long number=c.getLong(c.getColumnIndexOrThrow(YouTubePlaylistEntry.COLUMN_VIDEOS_NUMBER));    String status=c.getString(c.getColumnIndexOrThrow(YouTubePlaylistEntry.COLUMN_STATUS));    String thumbnailUrl=c.getString(c.getColumnIndexOrThrow(YouTubePlaylistEntry.COLUMN_THUMBNAIL_URL));    list.add(new YouTubePlaylist(title,thumbnailUrl,playlistId,number,status));  }  c.close();  return list;}  }
class C{  public Header(){  init();}  }
class C{  public byte[] toByteArray(){  ByteBuffer buffer=ByteBuffer.allocate(BYTES).order(ByteOrder.LITTLE_ENDIAN);  xStats.writeTo(buffer);  yStats.writeTo(buffer);  buffer.putDouble(sumOfProductsOfDeltas);  return buffer.array();}  }
class C{  public JSONWriter object() throws JSONException {  if (this.mode == 'i') {    this.mode='o';  }  if (this.mode == 'o' || this.mode == 'a') {    this.append("{");    this.push(new JSONObject());    this.comma=false;    return this;  }  throw new JSONException("Misplaced object.");}  }
class C{  public static void startRetryAlarm(Context context,PendingIntent intent,long delay){  if (sLogger.isActivated()) {    sLogger.debug("Retry HTTP configuration update in " + DateUtils.formatElapsedTime(delay / 1000));  }  AlarmManager am=(AlarmManager)context.getSystemService(Context.ALARM_SERVICE);  TimerUtils.setExactTimer(am,System.currentTimeMillis() + delay,intent);}  }
class C{  public PMX(double probability){  super();  this.probability=probability;}  }
class C{  public EtypeServiceImpl(final GenericDAO<Etype,Long> etypeDao){  super(etypeDao);}  }
class C{  private void deleteAssociatedDocuments(EndpointRemovalTaskState state,SubStage next){  Query resourceQuery=Query.Builder.create().addFieldClause(QuerySpecification.buildCompositeFieldName(ComputeState.FIELD_NAME_CUSTOM_PROPERTIES,ComputeProperties.ENDPOINT_LINK_PROP_NAME),state.endpoint.documentSelfLink).build();  QueryTask resourceQueryTask=QueryTask.Builder.createDirectTask().setQuery(resourceQuery).build();  resourceQueryTask.tenantLinks=state.tenantLinks;  Operation.createPost(UriUtils.buildUri(getHost(),ServiceUriPaths.CORE_QUERY_TASKS)).setBody(resourceQueryTask).setCompletion(null).sendWith(this);}  }
class C{  private static void registerTranslators(){  for (  TranslatorFactory<?> translatorFactory : Arrays.asList(new CidrAddressBlockTranslatorFactory(),new CommitLogRevisionsTranslatorFactory(),new CreateAutoTimestampTranslatorFactory(),new CurrencyUnitTranslatorFactory(),new DurationTranslatorFactory(),new InetAddressTranslatorFactory(),new MoneyStringTranslatorFactory(),new ReadableInstantUtcTranslatorFactory(),new UpdateAutoTimestampTranslatorFactory())) {    factory().getTranslators().add(translatorFactory);  }}  }
class C{  protected boolean needInputMethod(){  return false;}  }
class C{  public static void clear(){  copiedObjects=new ArrayList();  fireClipboardChanged();}  }
class C{  public BayesPm(Graph graph,BayesPm oldBayesPm,int lowerBound,int upperBound){  if (graph == null) {    throw new NullPointerException("The graph must not be null.");  }  if (oldBayesPm == null) {    throw new NullPointerException("BayesPm must not be null.");  }  if (graph.getNumNodes() == 0) {    throw new IllegalArgumentException("The graph must have at least " + "one node in it.");  }  this.dag=new EdgeListGraph(graph);  this.nodesToVariables=new HashMap<>();  copyAvailableInformationFromOldBayesPm(oldBayesPm,lowerBound,upperBound);}  }
class C{  public static void i(String tag,String s){  if (LOG.INFO >= LOGLEVEL)   Log.i(tag,s);}  }
class C{  public void updateRaster(float lt,float ln,String url,LinkProperties properties,int graphicUpdateMask) throws IOException {  writeGraphicGestureHeader(graphicUpdateMask);  LinkRaster.write(lt,ln,url,properties,link.dos);}  }
class C{  private static Integer legalCharacter(final Opt<Integer> data,final ByteArrayOutputStream baos,final Integer position) throws HttpException {  if ((data.get() > 0x7f || data.get() < 0x20) && data.get() != '\t') {    throw new HttpException(HttpURLConnection.HTTP_BAD_REQUEST,String.format("illegal character 0x%02X in HTTP header line #%d: \"%s\"",data.get(),position,new Utf8String(baos.toByteArray()).string()));  }  return data.get();}  }
class C{  @Override public void removeTrainingSetListener(TrainingSetListener tsl){  m_trainingSetListeners.removeElement(tsl);}  }
class C{  public void show(StackablePath... paths){  dispatcher.dispatch(add(History.NAV_TYPE_MODAL,paths));}  }
class C{  @Override public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {  super.readExternal(in);  this.facetName=in.readUTF();}  }
class C{  private static int maxPoints(Point[] points){  if (points.length < 3)   return points.length;  int res=1;  Map<String,Integer> map=new HashMap<String,Integer>();  for (int i=0; i < points.length; i++) {    int max=0;    int countSame=0;    for (int j=i + 1; j < points.length; j++) {      if (points[i].x == points[j].x && points[i].y == points[j].y)       countSame++; else {        String key=normalize(points[i],points[j]);        if (map.containsKey(key)) {          int count=map.get(key) + 1;          map.put(key,count);          if (count > max)           max=count;        } else {          map.put(key,1);          if (max == 0)           max++;        }      }    }    res=Math.max(res,max + countSame + 1);    map.clear();  }  return res;}  }
class C{  Writer write(Writer writer,int indentFactor,int indent) throws JSONException {  try {    boolean commanate=false;    final int length=this.length();    Iterator keys=this.keys();    writer.write('{');    if (length == 1) {      Object key=keys.next();      writer.write(quote(key.toString()));      writer.write(':');      if (indentFactor > 0) {        writer.write(' ');      }      writeValue(writer,this.map.get(key),indentFactor,indent);    } else     if (length != 0) {      final int newindent=indent + indentFactor;      while (keys.hasNext()) {        Object key=keys.next();        if (commanate) {          writer.write(',');        }        if (indentFactor > 0) {          writer.write('\n');        }        indent(writer,newindent);        writer.write(quote(key.toString()));        writer.write(':');        if (indentFactor > 0) {          writer.write(' ');        }        writeValue(writer,this.map.get(key),indentFactor,newindent);        commanate=true;      }      if (indentFactor > 0) {        writer.write('\n');      }      indent(writer,indent);    }    writer.write('}');    return writer;  } catch (  IOException exception) {    throw new JSONException(exception);  }}  }
class C{  boolean inHalfOpenRange(K key,K least,K fence){  if (key == null)   throw new NullPointerException();  return ((least == null || compare(key,least) >= 0) && (fence == null || compare(key,fence) < 0));}  }
class C{  public FormInputITCase(String name){  super(name);}  }
class C{  @Override public Tree<String> extractBestMaxRuleParse(int start,int end,List<String> sentence){  return extractBestMaxRuleParse1(start,end,0,0,sentence);}  }
class C{  private static void scale(double constant,double vector[]){  if (constant == 1.0) {    return;  }  for (int i=0; i < vector.length; i++) {    vector[i]*=constant;  }}  }
class C{  public void writeConfiguration(){  URL fileURL=this.getClass().getClassLoader().getResource("evosuite.properties");  String name=fileURL.getFile();  writeConfiguration(name);}  }
class C{  public static byte[] decode(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,DECODABET);}  }
class C{  private static byte[] copyOfRange(byte[] from,int start,int end){  int length=end - start;  byte[] result=new byte[length];  System.arraycopy(from,start,result,0,length);  return result;}  }
class C{  public List<AbstractTypeDeclaration> types(){  return this.types;}  }
class C{  public synchronized void stop(){  if (_isRunning) {    s_logger.info("Stopping listener at {}",_url);    _listener.removeListener(_url.getPort());    s_logger.info("Stopped listener at {}",_url);    _isRunning=false;    _listener=null;  }}  }
class C{  private boolean isCompatibleType(Object value,Class type){  if (value == null || type.isInstance(value)) {    return true;  } else   if (type.equals(Integer.TYPE) && Integer.class.isInstance(value)) {    return true;  } else   if (type.equals(Long.TYPE) && Long.class.isInstance(value)) {    return true;  } else   if (type.equals(Double.TYPE) && Double.class.isInstance(value)) {    return true;  } else   if (type.equals(Float.TYPE) && Float.class.isInstance(value)) {    return true;  } else   if (type.equals(Short.TYPE) && Short.class.isInstance(value)) {    return true;  } else   if (type.equals(Byte.TYPE) && Byte.class.isInstance(value)) {    return true;  } else   if (type.equals(Character.TYPE) && Character.class.isInstance(value)) {    return true;  } else   if (type.equals(Boolean.TYPE) && Boolean.class.isInstance(value)) {    return true;  } else {    return false;  }}  }
class C{  public static String ofMethod(CtClass returnType,CtClass[] paramTypes){  StringBuffer desc=new StringBuffer();  desc.append('(');  if (paramTypes != null) {    int n=paramTypes.length;    for (int i=0; i < n; ++i)     toDescriptor(desc,paramTypes[i]);  }  desc.append(')');  if (returnType != null)   toDescriptor(desc,returnType);  return desc.toString();}  }
class C{  public static String displaySymbolTable(String name,LocalVariableMap symbolTable){  StringBuilder sb=new StringBuilder();  sb.append(name);  sb.append(":\n");  sb.append(displaySymbolTable(symbolTable));  return sb.toString();}  }
class C{  @Override public void awake(){  String user=this.bot.memory().getProperty("Twitter.user");  if (user != null) {    this.userName=user;  }  String token=this.bot.memory().getProperty("Twitter.token");  if (token != null) {    this.token=token;  }  String secret=this.bot.memory().getProperty("Twitter.secret");  if (secret != null) {    String data=secret;    if (data.startsWith("&&")) {      try {        this.tokenSecret=Utils.decrypt(Utils.KEY,data.substring(2,data.length()));      } catch (      Exception exception) {        this.tokenSecret=data;      }    } else {      this.tokenSecret=data;    }    setIsEnabled(true);  }  String property=this.bot.memory().getProperty("Twitter.tweetChats");  if (property != null) {    this.tweetChats=Boolean.valueOf(property);  }}  }
class C{  public synchronized void returnBuf(byte[] buf){  if (buf == null || buf.length > mSizeLimit) {    return;  }  mBuffersByLastUse.add(buf);  int pos=Collections.binarySearch(mBuffersBySize,buf,BUF_COMPARATOR);  if (pos < 0) {    pos=-pos - 1;  }  mBuffersBySize.add(pos,buf);  mCurrentSize+=buf.length;  trim();}  }
class C{  public ObjectState(S id,Collection<E> deferred,Collection<? extends Action<S,E>> entryActions,Collection<? extends Action<S,E>> exitActions,PseudoState<S,E> pseudoState,StateMachine<S,E> submachine){  super(id,deferred,entryActions,exitActions,pseudoState,submachine);}  }
class C{  @TargetApi(Build.VERSION_CODES.HONEYCOMB) public void start(@NonNull Context context,@NonNull Fragment fragment,int requestCode){  fragment.startActivityForResult(getIntent(context),requestCode);}  }
class C{  public void removeChangeListener(ChangeListener l){  styles.removeChangeListener(l);}  }
class C{  private static int tryGetTrunkPrefixOmittedIndex(String str,int currentIndex){  int length=str.length();  for (int i=currentIndex; i < length; i++) {    final char ch=str.charAt(i);    if (tryGetISODigit(ch) >= 0) {      return i + 1;    } else     if (isDialable(ch)) {      return -1;    }  }  return -1;}  }
class C{  public void startContinuousCopy(Map<URI,List<URI>> mirrors){  Iterator<URI> it=mirrors.keySet().iterator();  while (it.hasNext()) {    URI blockObject=it.next();    List<URI> copyIds=mirrors.get(blockObject);    if (!copyIds.isEmpty()) {      BlockStorageUtils.createContinuousCopy(blockObject,null,1,BlockStorageUtils.COPY_NATIVE,copyIds.get(0));      break;    }  }}  }
class C{  public boolean isLocal(){  return host == null && port <= 0;}  }
class C{  public int model(){  return theType.model();}  }
class C{  public void dispose(StepMetaInterface smi,StepDataInterface sdi){  meta=(MDKeyGenStepMeta)smi;  data=(MDKeyGenStepData)sdi;  super.dispose(smi,sdi);  dataHandler=null;  finalMerger=null;}  }
class C{  public static InternalDistributedMember identifyLockGrantor(String serviceName){  DLockService service=(DLockService)DistributedLockService.getServiceNamed(serviceName);  assertNotNull(service);  InternalDistributedMember grantor=service.getLockGrantorId().getLockGrantorMember();  assertNotNull(grantor);  logInfo("In identifyLockGrantor - grantor is " + grantor);  return grantor;}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  public static String validateDatePattern(String key,String value) throws ValidationException {  for (  DatePatternEnum iter : DatePatternEnum.values()) {    if (key.equals(iter.getMessageKey())) {      try {        new SimpleDateFormat(value);        value=value.trim();        break;      } catch (      Exception e) {        throw new ValidationException(ValidationException.ReasonEnum.FILE_IMPORT_FAILED,key,new Object[]{value});      }    }  }  return value;}  }
class C{  @Override public void invokeCommand(int argLength,String[] args,String command){  if (argLength == 1 || argLength == 2) {    boolean specified=argLength == 2;    if (args[0].equals("generate")) {      int count=0;      for (      File file : USBMassStorage.invalidDrives) {        File conf=new File(file,"toast_autorun.conf");        ModuleConfig config=new ModuleConfig(conf);        count++;      }      USBMassStorage.init();      if (count != 0)       Toast.log().info("Successfully Generated toast_autorun.conf Files in " + count + " invalid drive(s).");    } else     if (args[0].equals("dump")) {      for (      MassStorageDevice drive : USBMassStorage.connectedDevices) {        long time=System.currentTimeMillis();        File root=new File(drive.dump_directory,"dump_" + time);        try {          if (!specified || drive.drive_name.equalsIgnoreCase(args[1])) {            copyDirectory(ToastBootstrap.toastHome,root);            Toast.log().info("Data Dump Successful: dump_" + time + " on drive: "+ drive.drive_name);          }        } catch (        IOException e) {          Toast.log().error("Could not Dump Toast Files on drive: " + drive.drive_name);          Toast.log().exception(e);        }      }    } else     if (args[0].equals("load")) {      for (      MassStorageDevice drive : USBMassStorage.connectedDevices) {        try {          if (!specified || drive.drive_name.equalsIgnoreCase(args[1])) {            copyDirectory(drive.toast_directory,ToastBootstrap.toastHome);            Toast.log().info("Data Load Successful From Drive: " + drive.drive_name);          }        } catch (        IOException e) {          Toast.log().error("Could not Load Toast Files from drive: " + drive.drive_name);          Toast.log().exception(e);        }      }    } else     usage();  } else {    usage();  }}  }
class C{  public synchronized void waitForTimeout(){  try {    if (receivedResponses.size() == 0)     wait(12000);  } catch (  InterruptedException e) {  }}  }
class C{  public static <K,V>boolean putMapNotNullKey(Map<K,V> map,K key,V value){  if (map == null || key == null) {    return false;  }  map.put(key,value);  return true;}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) private void bindConfigProperties(){  bind(YamlConfiguration.class).toInstance(yamlConfiguration);  Iterator<String> propertyKeys=yamlConfiguration.getKeys();  while (propertyKeys.hasNext()) {    String propertyKey=propertyKeys.next();    Object propertyValue=yamlConfiguration.getProperty(propertyKey);    LinkedBindingBuilder annotatedWith=bind(propertyValue.getClass()).annotatedWith(Names.named(propertyKey));    annotatedWith.toInstance(propertyValue);  }}  }
class C{  public static DoubleVector dnorm(double x,DoubleVector mean,double sd){  DoubleVector den=new DoubleVector(mean.size());  for (int i=0; i < mean.size(); i++) {    den.set(i,dnorm(x,mean.get(i),sd));  }  return den;}  }
class C{  public int hashCode(){  return this.getHostName().hashCode();}  }
class C{  public boolean okToSend(){  return status();}  }
class C{  public final void replaceAll(int from,int to){  final int width=this.width;  final int height=this.height;  int[] fieldx=null;  for (int x=0; x < width; x++) {    fieldx=field[x];    for (int y=0; y < height; y++) {      if (fieldx[y] == from)       fieldx[y]=to;    }  }}  }
class C{  public void finish(){  String jsonOutput=((SingleMessageTrackingMeasurer)measurer).getMeasurementsAsJSON();  System.out.println(jsonOutput);}  }
class C{  public final boolean containsInAny(Vec4 point){  if (point == null) {    String msg=Logging.getMessage("nullValue.PointIsNull");    Logging.logger().fine(msg);    throw new IllegalArgumentException(msg);  }  for (  PickPointFrustum frustum : this) {    if (frustum.contains(point)) {      return true;    }  }  return false;}  }
class C{  public void start(){  super.start();  setupPortrayals();}  }
class C{  public void save(){  setModified(false);}  }
class C{  public void manipulateChildElements(List<HierarchyWrapper> children){}  }
class C{  public void finaliseAddObservations(){  totalObservations=0;  for (  double[] destination : vectorOfDestinationObservations) {    totalObservations+=destination.length - k;  }  destNextPastSourceVectors=new double[totalObservations][k + 2];  int startObservation=0;  Iterator<double[]> iterator=vectorOfDestinationObservations.iterator();  for (  double[] source : vectorOfSourceObservations) {    double[] destination=iterator.next();    double[][] currentDestNextPastSourceVectors=makeJointVectorForNextPastSource(destination,source);    MatrixUtils.arrayCopy(currentDestNextPastSourceVectors,0,0,destNextPastSourceVectors,startObservation,0,currentDestNextPastSourceVectors.length,k + 2);    startObservation+=destination.length - k;  }  if (normalise) {    for (int c=0; c < k + 2; c++) {      double std=MatrixUtils.stdDev(destNextPastSourceVectors,c);      epsilons[c]=epsilon * std;    }  } else {    for (int c=0; c < k + 2; c++) {      epsilons[c]=epsilon;    }  }  addedMoreThanOneObservationSet=vectorOfDestinationObservations.size() > 1;  if (addedMoreThanOneObservationSet && dynCorrExcl) {    throw new RuntimeException("Addition of multiple observation sets is not currently " + "supported with property DYN_CORR_EXCL set");  }  vectorOfSourceObservations=null;  vectorOfDestinationObservations=null;}  }
class C{  public int offsetFromNewest(int delta){  return wrapOffset(this.newestAt + delta);}  }
class C{  private static void testDexClassLoader(){  ClassLoader dexClassLoader=getDexClassLoader();  Class anotherClass;  try {    anotherClass=dexClassLoader.loadClass("Another");  } catch (  ClassNotFoundException cnfe) {    throw new RuntimeException("Another?");  }  Object another;  try {    another=anotherClass.newInstance();  } catch (  IllegalAccessException ie) {    throw new RuntimeException("new another",ie);  }catch (  InstantiationException ie) {    throw new RuntimeException("new another",ie);  }  dexClassLoader.getResource("nonexistent");}  }
class C{  public void multiplyAngles(Angle3D angles){  angleX*=angles.angleX;  angleY*=angles.angleY;  angleZ*=angles.angleZ;}  }
class C{  public boolean isSummary(){  Object oo=get_Value(COLUMNNAME_IsSummary);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public String amt(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  if (isCalloutActive() || value == null)   return "";  int C_UOM_To_ID=Env.getContextAsInt(ctx,WindowNo,"C_UOM_ID");  int M_Product_ID=Env.getContextAsInt(ctx,WindowNo,"M_Product_ID");  int M_PriceList_ID=Env.getContextAsInt(ctx,WindowNo,"M_PriceList_ID");  int StdPrecision=MPriceList.getStandardPrecision(ctx,M_PriceList_ID);  BigDecimal QtyEntered, QtyInvoiced, PriceEntered, PriceActual, PriceLimit, Discount, PriceList;  QtyEntered=(BigDecimal)mTab.getValue("QtyEntered");  QtyInvoiced=(BigDecimal)mTab.getValue("QtyInvoiced");  log.fine("QtyEntered=" + QtyEntered + ", Invoiced="+ QtyInvoiced+ ", UOM="+ C_UOM_To_ID);  PriceEntered=(BigDecimal)mTab.getValue("PriceEntered");  PriceActual=(BigDecimal)mTab.getValue("PriceActual");  PriceLimit=(BigDecimal)mTab.getValue("PriceLimit");  PriceList=(BigDecimal)mTab.getValue("PriceList");  log.fine("PriceList=" + PriceList + ", Limit="+ PriceLimit+ ", Precision="+ StdPrecision);  log.fine("PriceEntered=" + PriceEntered + ", Actual="+ PriceActual);  if (M_Product_ID == 0) {    if (mField.getColumnName().equals("PriceActual")) {      PriceEntered=(BigDecimal)value;      mTab.setValue("PriceEntered",value);    } else     if (mField.getColumnName().equals("PriceEntered")) {      PriceActual=(BigDecimal)value;      mTab.setValue("PriceActual",value);    }  } else   if ((mField.getColumnName().equals("QtyInvoiced") || mField.getColumnName().equals("QtyEntered") || mField.getColumnName().equals("C_UOM_ID")|| mField.getColumnName().equals("M_Product_ID")) && !"N".equals(Env.getContext(ctx,WindowNo,"DiscountSchema"))) {    int C_BPartner_ID=Env.getContextAsInt(ctx,WindowNo,"C_BPartner_ID");    if (mField.getColumnName().equals("QtyEntered"))     QtyInvoiced=MUOMConversion.convertProductFrom(ctx,M_Product_ID,C_UOM_To_ID,QtyEntered);    if (QtyInvoiced == null)     QtyInvoiced=QtyEntered;    boolean IsSOTrx=Env.getContext(ctx,WindowNo,"IsSOTrx").equals("Y");    MProductPricing pp=new MProductPricing(M_Product_ID,C_BPartner_ID,QtyInvoiced,IsSOTrx);    pp.setM_PriceList_ID(M_PriceList_ID);    int M_PriceList_Version_ID=Env.getContextAsInt(ctx,WindowNo,"M_PriceList_Version_ID");    pp.setM_PriceList_Version_ID(M_PriceList_Version_ID);    Timestamp date=(Timestamp)mTab.getValue("DateInvoiced");    pp.setPriceDate(date);    PriceEntered=MUOMConversion.convertProductFrom(ctx,M_Product_ID,C_UOM_To_ID,pp.getPriceStd());    if (PriceEntered == null)     PriceEntered=pp.getPriceStd();    log.fine("amt - QtyChanged -> PriceActual=" + pp.getPriceStd() + ", PriceEntered="+ PriceEntered+ ", Discount="+ pp.getDiscount());    PriceActual=pp.getPriceStd();    mTab.setValue("PriceActual",pp.getPriceStd());    mTab.setValue("PriceEntered",PriceEntered);    Env.setContext(ctx,WindowNo,"DiscountSchema",pp.isDiscountSchema() ? "Y" : "N");  } else   if (mField.getColumnName().equals("PriceActual")) {    PriceActual=(BigDecimal)value;    PriceEntered=MUOMConversion.convertProductFrom(ctx,M_Product_ID,C_UOM_To_ID,PriceActual);    if (PriceEntered == null)     PriceEntered=PriceActual;    log.fine("amt - PriceActual=" + PriceActual + " -> PriceEntered="+ PriceEntered);    mTab.setValue("PriceEntered",PriceEntered);  } else   if (mField.getColumnName().equals("PriceEntered")) {    PriceEntered=(BigDecimal)value;    PriceActual=MUOMConversion.convertProductTo(ctx,M_Product_ID,C_UOM_To_ID,PriceEntered);    if (PriceActual == null)     PriceActual=PriceEntered;    log.fine("amt - PriceEntered=" + PriceEntered + " -> PriceActual="+ PriceActual);    mTab.setValue("PriceActual",PriceActual);  }  String epl=Env.getContext(ctx,WindowNo,"EnforcePriceLimit");  boolean enforce=Env.isSOTrx(ctx,WindowNo) && epl != null && epl.equals("Y");  if (enforce && MRole.getDefault().isOverwritePriceLimit())   enforce=false;  if (enforce && PriceLimit.doubleValue() != 0.0 && PriceActual.compareTo(PriceLimit) < 0) {    PriceActual=PriceLimit;    PriceEntered=MUOMConversion.convertProductFrom(ctx,M_Product_ID,C_UOM_To_ID,PriceLimit);    if (PriceEntered == null)     PriceEntered=PriceLimit;    log.fine("amt =(under) PriceEntered=" + PriceEntered + ", Actual"+ PriceLimit);    mTab.setValue("PriceActual",PriceLimit);    mTab.setValue("PriceEntered",PriceEntered);    mTab.fireDataStatusEEvent("UnderLimitPrice","",false);    if (PriceList.intValue() != 0) {      Discount=new BigDecimal((PriceList.doubleValue() - PriceActual.doubleValue()) / PriceList.doubleValue() * 100.0);      if (Discount.scale() > 2)       Discount=Discount.setScale(2,BigDecimal.ROUND_HALF_UP);    }  }  BigDecimal LineNetAmt=QtyInvoiced.multiply(PriceActual);  if (LineNetAmt.scale() > StdPrecision)   LineNetAmt=LineNetAmt.setScale(StdPrecision,BigDecimal.ROUND_HALF_UP);  log.info("amt = LineNetAmt=" + LineNetAmt);  mTab.setValue("LineNetAmt",LineNetAmt);  boolean IsSOTrx="Y".equals(Env.getContext(Env.getCtx(),WindowNo,"IsSOTrx"));  if (!IsSOTrx) {    BigDecimal TaxAmt=Env.ZERO;    if (mField.getColumnName().equals("TaxAmt")) {      TaxAmt=(BigDecimal)mTab.getValue("TaxAmt");    } else {      Integer taxID=(Integer)mTab.getValue("C_Tax_ID");      if (taxID != null) {        int C_Tax_ID=taxID.intValue();        MTax tax=new MTax(ctx,C_Tax_ID,null);        TaxAmt=tax.calculateTax(LineNetAmt,isTaxIncluded(WindowNo),StdPrecision);        mTab.setValue("TaxAmt",TaxAmt);      }    }    mTab.setValue("LineTotalAmt",LineNetAmt.add(TaxAmt));  }  return "";}  }
class C{  private void processWorkerExit(Worker w,boolean completedAbruptly){  if (completedAbruptly)   decrementWorkerCount();  final ReentrantLock mainLock=this.mainLock;  mainLock.lock();  try {    completedTaskCount+=w.completedTasks;    workers.remove(w);  }  finally {    mainLock.unlock();  }  tryTerminate2();  if (!completedAbruptly) {    int min=allowCoreThreadTimeOut ? 0 : corePoolSize;    if (min == 0 && !workQueue.isEmpty())     min=1;    int c=ctl.get();    if (workerCountOf(c) >= min || runStateOf(c) >= STOP)     return;  }  addWorker(null,false);}  }
class C{  public SetQuestAndModifyKarmaAction(final String questname,final String state,final double karmaDiff){  this.questname=questname;  this.state=state;  this.karmaDiff=karmaDiff;}  }
class C{  public static String quote(String string){  StringWriter sw=new StringWriter();synchronized (sw.getBuffer()) {    try {      return quote(string,sw).toString();    } catch (    IOException ignored) {      return "";    }  }}  }
class C{  public int available() throws java.io.IOException {  return 0;}  }
class C{  public void computeLayer(){  doPrepare();}  }
class C{  public boolean useSSL(){  return this.sslConfig.isEnabled();}  }
class C{  @Override protected void emit_loadretaddrconst(int bcIndex){  asm.generateLoadReturnAddress(bcIndex);}  }
class C{  @Override public double accuracyLat(){  return Math.abs(int2coord(1) - int2coord(2));}  }
class C{  public boolean accept(java.io.File file){  if (file == null) {    String msg=Logging.getMessage("nullValue.FileIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (!this.acceptFilePath(file))   return false;  try {    return VPFDatabase.isDatabase(file.getPath());  } catch (  Exception e) {  }  return false;}  }
class C{  public static final ArrayList<Move> removeIllegal(Position pos,ArrayList<Move> moveList){  ArrayList<Move> ret=new ArrayList<Move>();  UndoInfo ui=new UndoInfo();  int mlSize=moveList.size();  for (int mi=0; mi < mlSize; mi++) {    Move m=moveList.get(mi);    pos.makeMove(m,ui);    pos.setWhiteMove(!pos.whiteMove);    if (!inCheck(pos))     ret.add(m);    pos.setWhiteMove(!pos.whiteMove);    pos.unMakeMove(m,ui);  }  return ret;}  }
class C{  @Override public double distance(NumberVector v1,NumberVector v2){  return 1 - Math.abs(PearsonCorrelation.coefficient(v1,v2));}  }
class C{  public long endcode(){  return Long.parseLong(fields[26]);}  }
class C{  public void init() throws ServletException {}  }
class C{  public RocCalculator(double[] scores,boolean[] inCategory,int direction){  if (scores == null) {    throw new NullPointerException();  }  if (inCategory == null) {    throw new NullPointerException();  }  if (scores.length != inCategory.length) {    throw new IllegalArgumentException("Scores array must have same " + "number of items as inCategory array.");  }  if (direction != ASCENDING && direction != DESCENDING) {    throw new IllegalArgumentException("Direction must be ASCENDING or " + "DESCENDING.");  }  this.direction=direction;  this.scoreCatPairs=new ScoreCategoryPair[scores.length];  for (int i=0; i < scores.length; i++) {    scoreCatPairs[i]=new ScoreCategoryPair(scores[i],inCategory[i]);  }}  }
class C{  public CActionChangeViewDescription(final JFrame parent,final INaviView view){  super("Change View Description");  m_parent=Preconditions.checkNotNull(parent,"IE02810: parent argument can not be null");  m_view=Preconditions.checkNotNull(view,"IE02811: view argument can not be null");  putValue(ACCELERATOR_KEY,HotKeys.GRAPH_CHANGE_VIEW_DESCRIPTION_HK.getKeyStroke());}  }
class C{  public void removeListener(T listener){  if (listeners != null) {    List<T> newlisteners=new ArrayList<T>();    newlisteners.addAll(listeners);    newlisteners.remove(listener);    listeners=newlisteners;  }}  }
class C{  public static Builder builder(PublishResponse response){  return new Builder(response);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  java.io.File f=getFile(stack);  if (SageConstants.LITE)   return null;  if (stack.getUIMgr() == null)   return Boolean.FALSE;  try {    stack.getUIMgr().freshStartup(f);  } catch (  Throwable e) {    return "There was an error loading the file of: " + e;  }  return Boolean.TRUE;}  }
class C{  private boolean isAlreadyRegistered(Class<? extends Extension> extensionType){  return (this.registeredExtensionTypes.contains(extensionType) || (this.parent != null && this.parent.isAlreadyRegistered(extensionType)));}  }
class C{  public static <A>Set<A> join(Set<Set<A>> set){  Set<A> result=empty();  for (  Set<A> innerSet : set) {    result=result.plus(innerSet);  }  return result;}  }
class C{  public static void main(final String[] args) throws IOException {  System.out.println(BuildType.BUILD.toDebugString());}  }
class C{  protected float convertFovFactorToFov(float fovFactor){  return (mFovRange.max - ((1.0f - fovFactor) * (mFovRange.max - mFovRange.min)));}  }
class C{  private void generateGroup(Group group,BufferedWriter vectorBW,boolean isLast) throws IOException {  vectorBW.write(group_start);  if (group.getName() != null) {    vectorBW.write(name.replace("#name",group.getName()));    vectorBW.newLine();  }  if (group.getPivotX() != null) {    vectorBW.write(pivotX.replace("#pivotX",group.getPivotX()));    vectorBW.newLine();  }  if (group.getPivotY() != null) {    vectorBW.write(pivotY.replace("#pivotY",group.getPivotY()));    vectorBW.newLine();  }  if (group.getScaleX() != null) {    vectorBW.write(scaleX.replace("#scaleX",group.getScaleX()));    vectorBW.newLine();  }  if (group.getScaleY() != null) {    vectorBW.write(scaleY.replace("#scaleY",group.getScaleY()));    vectorBW.newLine();  }  if (group.getTranslationX() != null) {    vectorBW.write(translateX.replace("#translateX",group.getTranslationX()));    vectorBW.newLine();  }  if (group.getTranslationY() != null) {    vectorBW.write(translateY.replace("#translateY",group.getTranslationY()));    vectorBW.newLine();  }  vectorBW.write(endtag);  vectorBW.newLine();  if (group.getGroups() != null) {    for (int i=0; i < group.getGroups().size(); i++) {      generateGroup(group.getGroups().get(i),vectorBW,isLast);    }  }  if (group.getPaths() != null) {    for (int i=0; i < group.getPaths().size(); i++) {      generatePath(group.getPaths().get(i),vectorBW,isLast);    }  }  if (group.getClipPaths() != null) {    for (int i=0; i < group.getClipPaths().size(); i++) {      generateClipPath(group.getClipPaths().get(i),vectorBW);    }  }  vectorBW.write(group_end);  vectorBW.newLine();}  }
class C{  public String globalInfo(){  return "Replaces substrings in String attribute values " + "using either literal match and replace or " + "regular expression matching. The attributes"+ "to apply the match and replace rules to "+ "can be selected via a range string (e.g "+ "1-5,6,last) or by a comma separated list "+ "of attribute names (/first and /last can be"+ " used to indicate the first and last attribute "+ "respectively)";}  }
class C{  public EventStoreBuilder userCredentials(String username,String password){  settingsBuilder.userCredentials(username,password);  return this;}  }
class C{  private void ensureDistances(){  if (getDistanceEnd() > distances.length) {    int newLength=distances.length * 4;    double[] newDistances=new double[newLength];    System.arraycopy(distances,0,newDistances,0,distances.length);    Arrays.fill(newDistances,distances.length,newLength,-1);    distances=newDistances;  }}  }
class C{  public int mate(int v){  validate(v);  return mate[v];}  }
class C{  public ShapeDataCacheEntry(DrawContext dc,long minExpiryTime,long maxExpiryTime){  this.timer=new TimedExpirySupport(Math.max(minExpiryTime,0),Math.max(maxExpiryTime,0));  this.globeStateKey=dc != null ? dc.getGlobe().getGlobeStateKey() : null;  this.verticalExaggeration=dc != null ? dc.getVerticalExaggeration() : 1d;}  }
class C{  public Attributes(){  this(11);}  }
class C{  @ObjectiveCName("onTypingWithPeer:") public void onTyping(@NotNull Peer peer){  modules.getTypingModule().onTyping(peer);}  }
class C{  private boolean nextItemIs(String match) throws IOException {  int c;  while (isWhiteSpace(c=buf.get())) {  }  for (int i=0; i < match.length(); i++) {    if (i > 0) {      c=buf.get();    }    if (c != match.charAt(i)) {      return false;    }  }  return true;}  }
class C{  public static void closeJars(){  closeJars=true;}  }
class C{  public void addBefore(T current,T newElement){  if (current == _head) {    addFirst(newElement);  } else   if (current == null) {    addLast(newElement);  } else {    TLinkable p=current.getPrevious();    newElement.setNext(current);    p.setNext(newElement);    newElement.setPrevious(p);    current.setPrevious(newElement);    _size++;  }}  }
class C{  public boolean isAutorizada(){  return (estado >= ValoracionConstants.ESTADO_ELIMINACION_APROBADA);}  }
class C{  public boolean isLocked(){  return locked;}  }
class C{  public void clear(){  students=new String[1];  numberOfStudents=0;}  }
class C{  public boolean isLatest(){  return isLatest;}  }
class C{  void postExceptionFromThread(Exception e){  m_exceptionThrown=e;  ;synchronized (this) {    notifyAll();  }}  }
class C{  public boolean mouseMoved(MouseEvent e){  return false;}  }
class C{  void loadItemsIntoSlots(final Player player){  final String[] slotsItems={"bag","rhand","lhand","head","armor","legs","feet","finger","cloak","back","belt","keyring","trade"};  try {    for (    final String slotName : slotsItems) {      if (!player.hasSlot(slotName)) {        continue;      }      final RPSlot slot=player.getSlot(slotName);      final PlayerSlot newSlot;      if (slotName.equals("keyring")) {        newSlot=new PlayerKeyringSlot(slotName);      } else       if (slotName.equals("trade")) {        newSlot=new PlayerTradeSlot(slotName);      } else {        newSlot=new PlayerSlot(slotName);      }      loadSlotContent(player,slot,newSlot);    }    for (    final Banks bank : Banks.values()) {      final RPSlot slot=player.getSlot(bank.getSlotName());      final PlayerSlot newSlot=new BankSlot(bank);      loadSlotContent(player,slot,newSlot);    }  } catch (  final RuntimeException e) {    logger.error("cannot create player",e);  }}  }
class C{  public static Typeface greenAvocado(Context context){  return FontSourceProcessor.process(R.raw.green_avocado,context);}  }
class C{  public int read() throws IOException {  return sd.read();}  }
class C{  public static MovAvgModel minimize(MovAvgModel model,EvictingQueue<Double> train,double[] test){  double temp=1;  double minTemp=0.0001;  int iterations=100;  double alpha=0.9;  MovAvgModel bestModel=model;  MovAvgModel oldModel=model;  double oldCost=cost(model,train,test);  double bestCost=oldCost;  while (temp > minTemp) {    for (int i=0; i < iterations; i++) {      MovAvgModel newModel=oldModel.neighboringModel();      double newCost=cost(newModel,train,test);      double ap=acceptanceProbability(oldCost,newCost,temp);      if (ap > Math.random()) {        oldModel=newModel;        oldCost=newCost;        if (newCost < bestCost) {          bestCost=newCost;          bestModel=newModel;        }      }    }    temp*=alpha;  }  return bestModel;}  }
class C{  private static void sweep(DTSweepContext tcx){  List<TriangulationPoint> points;  TriangulationPoint point;  AdvancingFrontNode node;  points=tcx.getPoints();  for (int i=1; i < points.size(); i++) {    point=points.get(i);    node=pointEvent(tcx,point);    if (point.hasEdges()) {      for (      DTSweepConstraint e : point.getEdges()) {        if (tcx.isDebugEnabled()) {          tcx.getDebugContext().setActiveConstraint(e);        }        edgeEvent(tcx,e,node);      }    }    tcx.update(null);  }}  }
class C{  PricedParameter handleParameterUpdate(VOPricedParameter voPricedParameter,PricedParameter pricedParameter,boolean priceModelCreatedInTransaction) throws ValidationException, ConcurrentModificationException, OperationNotPermittedException {  updatePricedParameter(voPricedParameter,pricedParameter);  Map<Long,ParameterOption> keyToParamOption=createParameterOptionMap(pricedParameter);  List<VOPricedOption> voPricedOptions=voPricedParameter.getPricedOptions();  List<PricedOption> pricedOptions=pricedParameter.getPricedOptionList();  List<PricedOption> resultList=new ArrayList<PricedOption>();  Map<Long,PricedOption> storedOptionsMap=new HashMap<Long,PricedOption>();  for (  PricedOption pricedOption : pricedOptions) {    storedOptionsMap.put(Long.valueOf(pricedOption.getKey()),pricedOption);  }  for (  VOPricedOption voPricedOption : voPricedOptions) {    ParameterOption paramOption=keyToParamOption.remove(Long.valueOf(voPricedOption.getParameterOptionKey()));    if (paramOption == null) {      OperationNotPermittedException onp=new OperationNotPermittedException("No ParameterOption found for PricedOption value object.");      logger.logWarn(Log4jLogger.SYSTEM_LOG,onp,LogMessageIdentifier.WARN_PRICEDOPTION_NO_OPTION_DEFINED);      throw onp;    }    PricedOption pricedOption=null;    if (!storedOptionsMap.containsKey(Long.valueOf(voPricedOption.getKey()))) {      if (!priceModelCreatedInTransaction && voPricedOption.getKey() != 0) {        OperationNotPermittedException onp=new OperationNotPermittedException("Priced option value object with invalid key.");        logger.logWarn(Log4jLogger.SYSTEM_LOG,onp,LogMessageIdentifier.WARN_PRICED_OPTION_WITH_INVALID_KEY);        throw onp;      }      pricedOption=createPricedOption(voPricedOption,pricedParameter);    } else {      pricedOption=storedOptionsMap.remove(Long.valueOf(voPricedOption.getKey()));      updatePricedOption(voPricedOption,pricedOption);    }    resultList.add(pricedOption);  }  pricedParameter.setPricedOptionList(resultList);  removePricedOptions(storedOptionsMap.values());  return pricedParameter;}  }
class C{  public void deleteAsync(final String id,final FutureCallback<Task> responseCallback) throws IOException {  deleteObjectAsync(id,responseCallback);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:44.808 -0500",hash_original_method="D93155F43F41AF612E7774F463E1747A",hash_generated_method="B0A07F09AFEBA201295BC1C071BF2828") public void clean(){  for (int i=theAtts.getLength() - 1; i >= 0; i--) {    String name=theAtts.getLocalName(i);    if (theAtts.getValue(i) == null || name == null || name.length() == 0) {      theAtts.removeAttribute(i);      continue;    }  }}  }
class C{  protected void leave(){  lock.leaveBusy();}  }
class C{  public void testFollowerAcceptsVoteWhenLogUpToDate() throws Throwable {  runOnServer(null);}  }
class C{  protected void addDataSourceToDomain(DataSource ds,Element domain){  Element connectionPool=domain.getOwnerDocument().createElement("jdbc-system-resource");  domain.appendChild(connectionPool);  Element name=connectionPool.getOwnerDocument().createElement("name");  connectionPool.appendChild(name);  name.setTextContent(ds.getId());  Element target=connectionPool.getOwnerDocument().createElement("target");  connectionPool.appendChild(target);  target.setTextContent(getServerName());  Element descriptorFileName=connectionPool.getOwnerDocument().createElement("descriptor-file-name");  connectionPool.appendChild(descriptorFileName);  descriptorFileName.setTextContent("jdbc/" + ds.getId() + "-jdbc.xml");}  }
class C{  public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  RoomGroupListForm roomGroupListForm=(RoomGroupListForm)form;  sessionContext.checkPermission(Right.RoomGroups);  ActionMessages errors=new ActionMessages();  String deptCode=(String)request.getAttribute("deptCode");  if (deptCode != null) {    roomGroupListForm.setDeptCodeX(deptCode);  }  if (sessionContext.getAttribute(SessionAttribute.DepartmentCodeRoom) != null && roomGroupListForm.getDeptCodeX() == null) {    deptCode=(String)sessionContext.getAttribute(SessionAttribute.DepartmentCodeRoom);    if (deptCode != null && ("All".equals(deptCode) || deptCode.matches("Exam[0-9]*")))     roomGroupListForm.setDeptCodeX((String)sessionContext.getAttribute(SessionAttribute.DepartmentCodeRoom));  }  if (roomGroupListForm.getDeptCodeX() != null && !roomGroupListForm.getDeptCodeX().isEmpty())   sessionContext.setAttribute(SessionAttribute.DepartmentCodeRoom,roomGroupListForm.getDeptCodeX());  LookupTables.setupDepartments(request,sessionContext,true);  LookupTables.setupExamTypes(request,sessionContext.getUser(),DepartmentStatusType.Status.ExamView,DepartmentStatusType.Status.ExamTimetable);  errors=roomGroupListForm.validate(mapping,request);  if (errors.size() > 0) {    saveErrors(request,errors);    return mapping.findForward("showRoomGroupSearch");  }  buildGroupTable(request,roomGroupListForm);  if ("Export PDF".equals(request.getParameter("op"))) {    sessionContext.checkPermission(Right.RoomGroupsExportPdf);    OutputStream out=ExportUtils.getPdfOutputStream(response,"roomGroups");    printPdfGroupTable(out,sessionContext,roomGroupListForm);    out.flush();    out.close();    return null;  }  return mapping.findForward("showRoomGroupList");}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 3:{        addToken(Token.IDENTIFIER);      }case 43:    break;case 39:{    addToken(Token.LITERAL_BOOLEAN);  }case 44:break;case 33:{start=zzMarkedPos - 3;yybegin(MULTILINE_STRING_DOUBLE);}case 45:break;case 13:{addToken(start,zzStartRead - 1,Token.COMMENT_DOCUMENTATION);return firstToken;}case 46:break;case 31:{addToken(Token.ERROR_CHAR);}case 47:break;case 18:{addToken(Token.ERROR_NUMBER_FORMAT);}case 48:break;case 5:{addToken(Token.ERROR_CHAR);addNullToken();return firstToken;}case 49:break;case 22:{addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);}case 50:break;case 26:{addToken(Token.FUNCTION);}case 51:break;case 7:{addToken(Token.ERROR_STRING_DOUBLE);addNullToken();return firstToken;}case 52:break;case 30:{start=zzMarkedPos - 3;yybegin(MULTILINE_STRING_SINGLE);}case 53:break;case 2:{addToken(Token.ERROR_IDENTIFIER);}case 54:break;case 23:{addToken(Token.COMMENT_EOL);addNullToken();return firstToken;}case 55:break;case 37:{yybegin(YYINITIAL);addToken(start,zzStartRead + 2,Token.LITERAL_CHAR);}case 56:break;case 42:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_DOCUMENTATION);addToken(temp,zzMarkedPos - 1,Token.VARIABLE);start=zzMarkedPos;}case 57:break;case 29:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_DOCUMENTATION);addToken(temp,zzMarkedPos - 1,Token.PREPROCESSOR);start=zzMarkedPos;}case 58:break;case 11:{addToken(Token.VARIABLE);}case 59:break;case 41:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_DOCUMENTATION);addHyperlinkToken(temp,zzMarkedPos - 1,Token.COMMENT_DOCUMENTATION);start=zzMarkedPos;}case 60:break;case 15:{}case 61:break;case 21:{addToken(Token.LITERAL_CHAR);}case 62:break;case 36:{yybegin(YYINITIAL);addToken(start,zzStartRead + 2,Token.LITERAL_STRING_DOUBLE_QUOTE);}case 63:break;case 20:{addToken(Token.LITERAL_NUMBER_HEXADECIMAL);}case 64:break;case 24:{start=zzMarkedPos - 2;yybegin(MLC);}case 65:break;case 8:{addToken(Token.WHITESPACE);}case 66:break;case 28:{yybegin(YYINITIAL);addToken(start,zzStartRead + 1,Token.COMMENT_DOCUMENTATION);}case 67:break;case 35:{addToken(Token.DATA_TYPE);}case 68:break;case 27:{yybegin(YYINITIAL);addToken(start,zzStartRead + 1,Token.COMMENT_MULTILINE);}case 69:break;case 4:{addToken(Token.LITERAL_NUMBER_DECIMAL_INT);}case 70:break;case 17:{}case 71:break;case 34:{start=zzMarkedPos - 3;yybegin(DOCCOMMENT);}case 72:break;case 25:{addToken(Token.RESERVED_WORD);}case 73:break;case 40:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);addHyperlinkToken(temp,zzMarkedPos - 1,Token.COMMENT_MULTILINE);start=zzMarkedPos;}case 74:break;case 10:{addToken(Token.SEPARATOR);}case 75:break;case 6:{addNullToken();return firstToken;}case 76:break;case 12:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 77:break;case 9:{addToken(Token.OPERATOR);}case 78:break;case 16:{addToken(start,zzStartRead - 1,Token.LITERAL_CHAR);return firstToken;}case 79:break;case 19:{addToken(Token.LITERAL_NUMBER_FLOAT);}case 80:break;case 38:{addToken(Token.COMMENT_MULTILINE);}case 81:break;case 1:{}case 82:break;case 14:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);return firstToken;}case 83:break;case 32:{addToken(Token.ERROR_STRING_DOUBLE);}case 84:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case MULTILINE_STRING_DOUBLE:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);return firstToken;}case 1100:break;case DOCCOMMENT:{yybegin(YYINITIAL);addToken(start,zzEndRead,Token.COMMENT_DOCUMENTATION);return firstToken;}case 1101:break;case YYINITIAL:{addNullToken();return firstToken;}case 1102:break;case MLC:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 1103:break;case MULTILINE_STRING_SINGLE:{addToken(start,zzStartRead - 1,Token.LITERAL_CHAR);return firstToken;}case 1104:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public JTree resetTree(TreeTableModel treeTableModel){  tree=new TreeTableCellRenderer(treeTableModel);  super.setModel(new TreeTableModelAdapter(treeTableModel,tree));  ListToTreeSelectionModelWrapper selectionWrapper=new ListToTreeSelectionModelWrapper();  tree.setSelectionModel(selectionWrapper);  setSelectionModel(selectionWrapper.getListSelectionModel());  if (tree.getRowHeight() < 1) {    setRowHeight(18);  }  setDefaultRenderer(TreeTableModel.class,tree);  setDefaultEditor(TreeTableModel.class,new TreeTableCellEditor());  setShowGrid(true);  setIntercellSpacing(new Dimension(1,1));  tree.setRootVisible(false);  tree.setShowsRootHandles(true);  DefaultTreeCellRenderer r=(DefaultTreeCellRenderer)tree.getCellRenderer();  r.setOpenIcon(null);  r.setClosedIcon(null);  r.setLeafIcon(null);  return tree;}  }
class C{  public static SharedStorageReference readFromNBT(NBTTagCompound nbt){  SharedStorageReference reference=new SharedStorageReference();  reference.setUUID(nbt.getUniqueId("uuid"));  reference.chunkPos=new ChunkPos(nbt.getInteger("x"),nbt.getInteger("z"));  return reference;}  }
class C{  private void writeSampleJSONManifest(String manifestPath) throws IOException {  logger.info("Writing sample " + manifestPath);  FileWriter outFile=new FileWriter(manifestPath);  PrintWriter out=new PrintWriter(outFile);  out.println("{");  out.println("  \"date\": \"Mon May  9 18:53:41 CEST 2011\",");  out.println("  \"product\": \"" + product + "\",");  out.println("  \"version\":");  out.println("  {");  out.println("    \"major\": " + versionMajor + ",");  out.println("    \"minor\": " + versionMinor + ",");  out.println("    \"revision\": " + versionRevision);  out.println("  },");  out.println("  \"userAccount\": \"linasvirbalas\",");  out.println("  \"host\": \"hostalpha\",");  out.println("  \"hudson\":");  out.println("  {");  out.println("    \"buildNumber\": " + hudsonBuildNumber + ",");  out.println("    \"buildId\": 306");  out.println("  },");  out.println("  \"SVN\":");  out.println("  {");  out.println("    \"commons\":");  out.println("    {");  out.println("      \"URL\": \"https://tungsten.svn.sourceforge.net/svnroot/tungsten/branches/tungsten-1.3/commons\",");  out.println("      \"revision\": 2939");  out.println("    }");  out.println("  }");  out.println("}");  out.close();}  }
class C{  public static String removeSubstring(String inString,String substring){  StringBuffer result=new StringBuffer();  int oldLoc=0, loc=0;  while ((loc=inString.indexOf(substring,oldLoc)) != -1) {    result.append(inString.substring(oldLoc,loc));    oldLoc=loc + substring.length();  }  result.append(inString.substring(oldLoc));  return result.toString();}  }
class C{  public void writeArrayValueSeparator(JsonGenerator jg) throws IOException, JsonGenerationException {  jg.writeRaw(',');}  }
class C{  protected boolean calculateSize(){  if (p_sizeCalculated)   return true;  p_height=m_renderer.getHeight();  p_width=m_renderer.getWidth();  if (p_maxWidth != 0f)   p_width=p_maxWidth;  if (p_maxHeight != 0f) {    if (p_maxHeight == -1f)     p_height=m_renderer.getHeightOneLine(); else     p_height=p_maxHeight;  }  m_renderer.setAllocation((int)p_width,(int)p_height);  return true;}  }
class C{  public void putIndexData(UCharacterProperty friend){  friend.setIndexData(m_friendAgent_);}  }
class C{  protected void addMethods() throws Exception {  Method method;  Class<?>[] params;  params=new Class[1];  params[0]=Element.class;  method=owner.getClass().getMethod("readFromXML",params);  addMethods(m_ReadMethods,method,owner.getClass().getMethods());  params=new Class[3];  params[0]=Element.class;  params[1]=Object.class;  params[2]=String.class;  method=owner.getClass().getMethod("writeToXML",params);  addMethods(m_WriteMethods,method,owner.getClass().getMethods());}  }
class C{  public static void main(String arg[]){  Display display=new Display();  Shell shell=new Shell(display);  File file=JFileDataStoreChooser.showOpenFile("shp",shell);  if (file != null) {    MessageDialog.openInformation(shell,"INFO","Selected " + file.getAbsolutePath());  } else {    MessageDialog.openInformation(shell,"INFO","Selection cancelled");  }}  }
class C{  public THLStoreApplier(){}  }
class C{  public static Class<?> resolvePrimitiveIfNecessary(Class<?> clazz){  Assert.notNull(clazz,"Class must not be null");  return (clazz.isPrimitive() && clazz != void.class ? primitiveTypeToWrapperMap.get(clazz) : clazz);}  }
class C{  public boolean hasUseListener(){  return this.useListener != null;}  }
class C{  public static AppCompatActivitySetup with(@NonNull AppCompatActivity activity){  return new AppCompatActivitySetup(activity);}  }
class C{  public Model lookup(int index){  int size=size();  if (index <= size) {    return get(index - 1);  }  return null;}  }
class C{  @Override @Deprecated public void write(ObjectOutput output) throws IOException {  if (!output.equals(oos)) {    throw new IllegalArgumentException("Attempting to write to a different stream than the one that created this PutField");  }  for (  EmulatedFields.ObjectSlot slot : emulatedFields.slots()) {    Object fieldValue=slot.getFieldValue();    Class<?> type=slot.getField().getType();    if (type == int.class) {      output.writeInt(fieldValue != null ? ((Integer)fieldValue).intValue() : 0);    } else     if (type == byte.class) {      output.writeByte(fieldValue != null ? ((Byte)fieldValue).byteValue() : 0);    } else     if (type == char.class) {      output.writeChar(fieldValue != null ? ((Character)fieldValue).charValue() : 0);    } else     if (type == short.class) {      output.writeShort(fieldValue != null ? ((Short)fieldValue).shortValue() : 0);    } else     if (type == boolean.class) {      output.writeBoolean(fieldValue != null ? ((Boolean)fieldValue).booleanValue() : false);    } else     if (type == long.class) {      output.writeLong(fieldValue != null ? ((Long)fieldValue).longValue() : 0);    } else     if (type == float.class) {      output.writeFloat(fieldValue != null ? ((Float)fieldValue).floatValue() : 0);    } else     if (type == double.class) {      output.writeDouble(fieldValue != null ? ((Double)fieldValue).doubleValue() : 0);    } else {      output.writeObject(fieldValue);    }  }}  }
class C{  public void recordBourneVolumeEvent(DbClient dbClient,String evtType,Operation.Status status,String desc,URI id) throws Exception {  RecordableEventManager eventManager=new RecordableEventManager();  eventManager.setDbClient(dbClient);  BlockObject blockObject=null;  if (URIUtil.isType(id,Volume.class)) {    blockObject=dbClient.queryObject(Volume.class,id);  } else   if (URIUtil.isType(id,BlockMirror.class)) {    blockObject=dbClient.queryObject(BlockMirror.class,id);  } else   if (URIUtil.isType(id,BlockSnapshot.class)) {    blockObject=dbClient.queryObject(BlockSnapshot.class,id);  }  RecordableBourneEvent event=ControllerUtils.convertToRecordableBourneEvent(blockObject,evtType,desc,"",dbClient,EVENT_SERVICE_TYPE,RecordType.Event.name(),EVENT_SERVICE_SOURCE);  try {    eventManager.recordEvents(event);    _logger.info("Bourne {} event recorded",evtType);  } catch (  Exception ex) {    _logger.error("Failed to record event. Event description: {}. Error:",evtType,ex);  }}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  public void stop(String quitMessage){synchronized (stateLock) {    if (state != State.RUNNING)     throw new RuntimeException("MultiBotManager cannot be stopped again or before starting. State: " + state);    state=State.STOPPING;  }  for (  PircBotX bot : runningBots.keySet())   if (bot.isConnected())   bot.sendIRC().quitServer(quitMessage);  botPool.shutdown();}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:15.450 -0500",hash_original_method="5949601888B92CAB7F6BB9E6373E9083",hash_generated_method="CA5DED15EEDBEE2F93349DDF45384D85") public void sendMessage(SIPMessage sipMessage) throws IOException {  if (sipStack.isLoggingEnabled() && this.sipStack.isLogStackTraceOnMessageSend()) {    if (sipMessage instanceof SIPRequest && ((SIPRequest)sipMessage).getRequestLine() != null) {      this.sipStack.getStackLogger().logStackTrace(StackLogger.TRACE_INFO);    } else {      this.sipStack.getStackLogger().logStackTrace(StackLogger.TRACE_INFO);    }  }  long time=System.currentTimeMillis();  try {    for (    MessageProcessor messageProcessor : sipStack.getMessageProcessors()) {      if (messageProcessor.getIpAddress().equals(this.peerAddress) && messageProcessor.getPort() == this.peerPort && messageProcessor.getTransport().equals(this.peerProtocol)) {        MessageChannel messageChannel=messageProcessor.createMessageChannel(this.peerAddress,this.peerPort);        if (messageChannel instanceof RawMessageChannel) {          ((RawMessageChannel)messageChannel).processMessage(sipMessage);          if (sipStack.isLoggingEnabled())           sipStack.getStackLogger().logDebug("Self routing message");          return;        }      }    }    byte[] msg=sipMessage.encodeAsBytes(this.getTransport());    sendMessage(msg,peerAddress,peerPort,peerProtocol,sipMessage instanceof SIPRequest);  } catch (  IOException ex) {    throw ex;  }catch (  Exception ex) {    sipStack.getStackLogger().logError("An exception occured while sending message",ex);    throw new IOException("An exception occured while sending message");  } finally {    if (sipStack.getStackLogger().isLoggingEnabled(ServerLogger.TRACE_MESSAGES) && !sipMessage.isNullRequest())     logMessage(sipMessage,peerAddress,peerPort,time); else     if (sipStack.getStackLogger().isLoggingEnabled(ServerLogger.TRACE_DEBUG))     sipStack.getStackLogger().logDebug("Sent EMPTY Message");  }}  }
class C{  public static int binarySearch(char[] array,char value){  return binarySearch(array,0,array.length,value);}  }
class C{  public static boolean isTraceFlag(){  return Boolean.valueOf(config.getProperty("harness.log.traceflag","true")).booleanValue();}  }
class C{  public cudaEvent_t(){}  }
class C{  public static void removeAllCookies(Context context){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {    removeAllCookiesV21();  } else {    removeAllCookiesV14(context.getApplicationContext());  }}  }
class C{  private IStatus installPackage(File installPath,String packageName) throws IOException, InterruptedException {  if (packageName == null || packageName.trim().isEmpty()) {    return statusHelper.createError("Malformed npm package name: '" + packageName + "'.");  }  ProcessResult per=commandFactory.createInstallPackageCommand(installPath,packageName,true).execute();  if (!per.isOK()) {    final Throwable cause=per.toThrowable("Error while installing npm package.");    if (null != cause) {      return statusHelper.createError(cause.getMessage(),cause);    } else {      final String processLog=per.toString();      return statusHelper.createError(processLog,cause);    }  } else {    return OK_STATUS;  }}  }
class C{  private void moveHosts(double timeIncrement){  for (int i=0, n=hosts.size(); i < n; i++) {    DTNHost host=hosts.get(i);    host.move(timeIncrement);  }}  }
class C{  public AuthSvcBaseClientIterator(EndPointLocator endPointLocator){  List<URI> endpoints=endPointLocator.getServiceEndpointList();  _size=endpoints.size();  _authSvcEndpoints=endpoints.toArray(new URI[_size]);}  }
class C{  public String outputMode(){  return mOutputMode;}  }
class C{  private void sendEvent(TriangulationProcessEvent event){  for (  TriangulationProcessListener l : _listeners) {    l.triangulationEvent(event,_tcx.getTriangulatable());  }}  }
class C{  private FileShare prepareEmptyFileSystem(String newFileLabel,Long fileshareSize,Project project,FileMirrorRecommendation fileMirrorRecommendation,TenantOrg tenantOrg,VirtualArray varray,VirtualPool sourceVpool,VirtualPool targetVpool,DataObject.Flag[] flags,String taskId){  _log.debug("prepareEmptyFileSystem start...");  FileShare fs=new FileShare();  fs.setId(URIUtil.createId(FileShare.class));  validateFileShareLabel(newFileLabel,project);  fs.setLabel(newFileLabel);  String convertedName=newFileLabel.replaceAll("[^\\dA-Za-z\\_]","");  _log.info("Original name {} and converted name {}",newFileLabel,convertedName);  fs.setName(convertedName);  fs.setCapacity(fileshareSize);  fs.setTenant(new NamedURI(tenantOrg.getId(),newFileLabel));  VirtualPool vpool=sourceVpool;  if (targetVpool != null) {    vpool=targetVpool;  }  fs.setVirtualPool(vpool.getId());  fs.setVirtualArray(varray.getId());  if (project != null) {    fs.setProject(new NamedURI(project.getId(),fs.getLabel()));  }  if (VirtualPool.ProvisioningType.Thin.toString().equalsIgnoreCase(vpool.getSupportedProvisioningType())) {    fs.setThinlyProvisioned(Boolean.TRUE);  }  if (flags != null) {    fs.addInternalFlags(flags);  }  fs.setOpStatus(new OpStatusMap());  Operation op=new Operation();  op.setResourceType(ResourceOperationTypeEnum.CREATE_FILE_SYSTEM);  fs.getOpStatus().createTaskStatus(taskId,op);  _dbClient.createObject(fs);  return fs;}  }
class C{  public long toEpochSecond(ZoneOffset offset){  Objects.requireNonNull(offset,"offset");  long epochDay=getDate().toEpochDay();  long secs=epochDay * 86400 + getTime().toSecondOfDay();  secs-=offset.getTotalSeconds();  return secs;}  }
class C{  public static String replace(String input,String find,String repl,boolean firstOnly){  return replace(input,find,repl,firstOnly,false);}  }
class C{  public void addCarbonTable(CarbonTable carbonTable){  tableInfoMap.put(convertToLowerCase(carbonTable.getTableUniqueName()),carbonTable);}  }
class C{  public void addTransition(int source,int dest,int min,int max){  if (transitions.length < nextTransition + 4) {    transitions=ArrayUtil.grow(transitions,nextTransition + 4);  }  transitions[nextTransition++]=source;  transitions[nextTransition++]=dest;  transitions[nextTransition++]=min;  transitions[nextTransition++]=max;}  }
class C{  public boolean isLeaf(){  return this.left == null;}  }
class C{  public boolean resetTranslationFlag(PO po){  if (!isActiveLanguages(false))   return true;  if (po.get_ID() == 0)   throw new IllegalArgumentException("PO ID is 0");  StringBuffer sb=new StringBuffer("UPDATE ");  sb.append(m_trlTableName).append(" SET IsTranslated='N',Updated=SysDate WHERE ").append(m_baseTableName).append("_ID=").append(po.get_ID());  int no=DB.executeUpdate(sb.toString(),po.get_TrxName());  log.fine(m_trlTableName + ": ID=" + po.get_ID()+ " #"+ no);  return no != 0;}  }
class C{  public VMProxyArg(RuntimeServices rs,String contextRef,Node callerArg){  rsvc=rs;  contextReference=contextRef;  nodeTree=callerArg;}  }
class C{  public synchronized void start(EventDispatcher dispatcher) throws ReplicatorException {  progressTracker.setApplySkipCount(applySkipCount);  progressTracker.setSeqnosToBeSkipped(seqnosToBeSkipped);  taskGroup.start(dispatcher);}  }
class C{  @PUT @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public ComputeVirtualPoolRestRep updateComputeVirtualPool(@PathParam("id") URI id,ComputeVirtualPoolUpdateParam param){  ComputeVirtualPool cvp=null;  _log.debug("Update Parameters:\n" + param.toString());  ArgValidator.checkFieldUriType(id,ComputeVirtualPool.class,"id");  cvp=this.queryObject(ComputeVirtualPool.class,id,true);  boolean nicOrHbaRangeChanges=false;  boolean moreRestrictiveChange=false;  boolean nameChange=(param.getName() != null && !(cvp.getLabel().equals(param.getName())));  if (nameChange) {    checkForDuplicateName(param.getName(),ComputeVirtualPool.class);    cvp.setLabel(param.getName());  }  if (null != param.getDescription()) {    cvp.setDescription(param.getDescription());  }  if (null != param.getSystemType()) {    ArgValidator.checkFieldValueFromEnum(param.getSystemType(),"system_type",ComputeVirtualPool.SupportedSystemTypes.class);    if (cvp.getServiceProfileTemplates() != null) {      if (!cvp.getServiceProfileTemplates().isEmpty()) {        throw APIException.badRequests.changeToComputeVirtualPoolNotSupported(cvp.getLabel(),"Cannot change system type when Service Profile Temples are associated");      }    }    cvp.setSystemType(param.getSystemType());  }  if (isParamSet(param.getMinProcessors()) && ((cvp.getMinProcessors() == null) || (cvp.getMinProcessors() < param.getMinProcessors()))) {    moreRestrictiveChange=true;    _log.debug("Min Processors increased from " + cvp.getMinProcessors() + " to "+ param.getMinProcessors());  }  cvp.setMinProcessors(getParamValue(param.getMinProcessors()));  if (isParamSet(param.getMaxProcessors()) && ((cvp.getMaxProcessors() == null) || (cvp.getMaxProcessors() == -1) || (cvp.getMaxProcessors() > param.getMaxProcessors()))) {    moreRestrictiveChange=true;    _log.debug("Max Processors decreased from " + cvp.getMaxProcessors() + " to "+ param.getMaxProcessors());  }  cvp.setMaxProcessors(getParamMaxValue(param.getMaxProcessors()));  validateMinMaxIntValues(cvp.getMinProcessors(),cvp.getMaxProcessors(),"min_processors","max_processors");  if (isParamSet(param.getMinTotalCores()) && ((cvp.getMinTotalCores() == null) || (cvp.getMinTotalCores() < param.getMinTotalCores()))) {    moreRestrictiveChange=true;    _log.debug("Min TotalCores increased from " + cvp.getMinTotalCores() + " to "+ param.getMinTotalCores());  }  cvp.setMinTotalCores(getParamValue(param.getMinTotalCores()));  if (isParamSet(param.getMaxTotalCores()) && ((cvp.getMaxTotalCores() == null) || (cvp.getMaxTotalCores() == -1) || (cvp.getMaxTotalCores() > param.getMaxTotalCores()))) {    moreRestrictiveChange=true;    _log.debug("Max TotalCores decreased from " + cvp.getMaxTotalCores() + " to "+ param.getMaxTotalCores());  }  cvp.setMaxTotalCores(getParamMaxValue(param.getMaxTotalCores()));  validateMinMaxIntValues(cvp.getMinTotalCores(),cvp.getMaxTotalCores(),"min_total_cores","max_total_cores");  if (isParamSet(param.getMinTotalThreads()) && ((cvp.getMinTotalThreads() == null) || (cvp.getMinTotalThreads() < param.getMinTotalThreads()))) {    moreRestrictiveChange=true;    _log.debug("Min TotalThreads increased from " + cvp.getMinTotalThreads() + " to "+ param.getMinTotalThreads());  }  cvp.setMinTotalThreads(getParamValue(param.getMinTotalThreads()));  if (isParamSet(param.getMaxTotalThreads()) && ((cvp.getMaxTotalThreads() == null) || (cvp.getMaxTotalThreads() == -1) || (cvp.getMaxTotalThreads() > param.getMaxTotalThreads()))) {    moreRestrictiveChange=true;    _log.debug("Max TotalThreads decreased from " + cvp.getMaxTotalThreads() + " to "+ param.getMaxMemory());  }  cvp.setMaxTotalThreads(getParamMaxValue(param.getMaxTotalThreads()));  validateMinMaxIntValues(cvp.getMinTotalThreads(),cvp.getMaxTotalThreads(),"min_total_threads","max_total_threads");  if (isParamSet(param.getMinCpuSpeed()) && ((cvp.getMinCpuSpeed() == null) || (cvp.getMinCpuSpeed() < param.getMinCpuSpeed()))) {    moreRestrictiveChange=true;    _log.debug("Min CpuSpeed increased from " + cvp.getMinCpuSpeed() + " to "+ param.getMinCpuSpeed());  }  cvp.setMinCpuSpeed(getParamValue(param.getMinCpuSpeed()));  if (isParamSet(param.getMaxCpuSpeed()) && ((cvp.getMaxCpuSpeed() == null) || (cvp.getMaxCpuSpeed() == -1) || (cvp.getMaxCpuSpeed() > param.getMaxCpuSpeed()))) {    moreRestrictiveChange=true;    _log.debug("Max CpuSpeed decreased from " + cvp.getMaxCpuSpeed() + " to "+ param.getMaxCpuSpeed());  }  cvp.setMaxCpuSpeed(getParamMaxValue(param.getMaxCpuSpeed()));  validateMinMaxIntValues(cvp.getMinCpuSpeed(),cvp.getMaxCpuSpeed(),"min_processor_speed","max_processor_speed");  if (isParamSet(param.getMinMemory()) && ((cvp.getMinMemory() == null) || (cvp.getMinMemory() < param.getMinMemory()))) {    moreRestrictiveChange=true;    _log.debug("Min Memory increased from " + cvp.getMinMemory() + " to "+ param.getMinMemory());  }  cvp.setMinMemory(getParamValue(param.getMinMemory()));  if (isParamSet(param.getMaxMemory()) && ((cvp.getMaxMemory() == null) || (cvp.getMaxMemory() == -1) || (cvp.getMaxMemory() > param.getMaxMemory()))) {    moreRestrictiveChange=true;    _log.debug("Max Memory decreased from " + cvp.getMaxMemory() + " to "+ param.getMaxMemory());  }  cvp.setMaxMemory(getParamMaxValue(param.getMaxMemory()));  validateMinMaxIntValues(cvp.getMinMemory(),cvp.getMaxMemory(),"min_memory","max_memory");  boolean moreRestrictiveNicHbaChange=false;  if (isParamSet(param.getMinNics()) && ((cvp.getMinNics() == null) || (cvp.getMinNics() < param.getMinNics()))) {    moreRestrictiveNicHbaChange=true;    _log.debug("Min nic increased from " + cvp.getMinNics() + " to "+ param.getMinNics());  }  cvp.setMinNics(getParamValue(param.getMinNics()));  if (isParamSet(param.getMaxNics()) && ((cvp.getMaxNics() == null) || (cvp.getMaxNics() == -1) || (cvp.getMaxNics() > param.getMaxNics()))) {    moreRestrictiveNicHbaChange=true;    _log.debug("Max nic decreased from " + cvp.getMaxNics() + " to "+ param.getMaxNics());  }  cvp.setMaxNics(getParamMaxValue(param.getMaxNics()));  validateMinMaxIntValues(cvp.getMinNics(),cvp.getMaxNics(),"min_nics","max_nics");  if (isParamSet(param.getMinHbas()) && ((cvp.getMinHbas() == null) || (cvp.getMinHbas() < param.getMinHbas()))) {    moreRestrictiveNicHbaChange=true;    _log.debug("Min hba increased from " + cvp.getMinHbas() + " to "+ param.getMinHbas());  }  cvp.setMinHbas(getParamValue(param.getMinHbas()));  if (isParamSet(param.getMaxHbas()) && ((cvp.getMaxHbas() == null) || (cvp.getMaxHbas() == -1) || (cvp.getMaxHbas() > param.getMaxHbas()))) {    moreRestrictiveNicHbaChange=true;    _log.debug("Max hba decreased from " + cvp.getMaxHbas() + " to "+ param.getMaxHbas());  }  cvp.setMaxHbas(getParamMaxValue(param.getMaxHbas()));  validateMinMaxIntValues(cvp.getMinHbas(),cvp.getMaxHbas(),"min_hbas","max_hbas");  boolean changeToStaticAssignment=false;  boolean changeToDynamicAssignment=false;  Collection<ComputeElement> staticElements=new HashSet<ComputeElement>();  if (!cvp.getUseMatchedElements() && cvp.getMatchedComputeElements() != null && !cvp.getMatchedComputeElements().isEmpty()) {    staticElements.addAll(_dbClient.queryObject(ComputeElement.class,toUriList(cvp.getMatchedComputeElements())));    _log.debug("static elements count:" + staticElements.size());  }  if (null != param.getUseMatchedElements()) {    changeToStaticAssignment=(param.getUseMatchedElements() == false) && (param.getUseMatchedElements() != cvp.getUseMatchedElements());    changeToDynamicAssignment=(param.getUseMatchedElements() == true) && (param.getUseMatchedElements() != cvp.getUseMatchedElements());    cvp.setUseMatchedElements(param.getUseMatchedElements());  }  if (changeToStaticAssignment) {    if (cvp.getMatchedComputeElements() != null) {      cvp.getMatchedComputeElements().clear();    }  }  if (null != param.getVarrayChanges()) {    updateVirtualArrays(cvp,param.getVarrayChanges());  }  if (null != param.getSptChanges()) {    if (cvp.getSystemType().contentEquals(ComputeVirtualPool.SupportedSystemTypes.Cisco_UCSM.toString())) {      updateServiceProfileTemplates(cvp,param.getSptChanges());    }  }  if (moreRestrictiveNicHbaChange) {    if (isComputeVirtualPoolInUse(cvp)) {      _log.warn("VCP is in use; more restrictive Nic or Hba change is not allowed");      throw APIException.badRequests.changeToComputeVirtualPoolNotSupported(cvp.getLabel(),"More restrictive updates to network adapter and hba range not allowed because compute virtual pool is already in use.");    }    Set<String> sptsNotMeetingCriteria=new HashSet<String>();    Collection<UCSServiceProfileTemplate> templates=_dbClient.queryObject(UCSServiceProfileTemplate.class,toUriList(cvp.getServiceProfileTemplates()));    for (    UCSServiceProfileTemplate template : templates) {      boolean inUse=isServiceProfileTemplateInUse(cvp,template);      try {        validateServiceProfileTemplate(cvp,template);      } catch (      APIException e) {        _log.warn("SPT " + template.getLabel() + ":"+ template.getDn()+ " is in use("+ inUse+ ") and does not meet criteria "+ e.toString());        if (inUse) {          throw APIException.badRequests.changeToComputeVirtualPoolNotSupported(cvp.getLabel(),"Updates to pool not allowed because service profile template(s) already in use do not meet requested criteria.");        }        sptsNotMeetingCriteria.add(template.getId().toString());        _log.warn("SPT does not meet criteria; so being removed");      }    }    cvp.removeServiceProfileTemplates(sptsNotMeetingCriteria);  }  if (cvp.getUseMatchedElements()) {    _log.debug("Compute pool " + cvp.getLabel() + " configured to use dynamic matching");    getMatchingCEsforCVPAttributes(cvp);  }  if (changeToDynamicAssignment && !staticElements.isEmpty()) {    for (    ComputeElement computeElement : staticElements) {      if (!isAvailable(computeElement)) {        _log.error("Cannot change to dynamic matching because statically assigned compute element(s) have been used in pool " + cvp.getId());        throw APIException.badRequests.changeToComputeVirtualPoolNotSupported(cvp.getLabel(),"Cannot change to automatic matching because manually assigned compute element(s) already in use.");      }    }    updateOtherPoolsComputeElements(cvp);  }  if (moreRestrictiveChange) {    if (isComputeVirtualPoolInUse(cvp)) {      _log.warn("VCP is in use; more restrictive change is not allowed");      throw APIException.badRequests.changeToComputeVirtualPoolNotSupported(cvp.getLabel(),"More restrictive updates to qualifiers not allowed because compute virtual pool is already in use.");    }    _log.info("VCP is not in use. So check if there are statically assigned members that need to be removed from vcp membership");    if (!cvp.getUseMatchedElements() && !staticElements.isEmpty()) {      Set<ComputeElement> cesNotMeetingCriteria=new HashSet<ComputeElement>();      Collection<ComputeElement> computeElements=_dbClient.queryObject(ComputeElement.class,getURIs(staticElements));      for (      ComputeElement element : computeElements) {        _log.debug("Blade:" + element.getChassisId() + "/"+ element.getSlotId());        boolean inUse=(element.getAvailable() == false);        try {          validateComputeElement(cvp,element);        } catch (        APIException e) {          _log.warn("Compute Element " + element.getLabel() + ":"+ element.getDn()+ " is in use("+ inUse+ ") and does not meet criteria "+ e.toString());          if (inUse) {            throw APIException.badRequests.changeToComputeVirtualPoolNotSupported(cvp.getLabel(),"Updates to pool not allowed because compute element(s) already in use do not meet requested criteria.");          }          cesNotMeetingCriteria.add(element);          _log.warn("Compute Element does not meet criteria; so being removed");        }      }      StringSet cesMeetingCriteria=new StringSet();      for (      ComputeElement staticElement : staticElements) {        _log.debug("Blade:" + staticElement.getChassisId() + ":"+ staticElement.getSlotId());        boolean invalid=false;        for (        ComputeElement element : cesNotMeetingCriteria) {          if (element.getId().toString().equals(staticElement.getId().toString())) {            invalid=true;          }        }        if (!invalid) {          _log.debug("added");          cesMeetingCriteria.add(staticElement.getId().toString());        }      }      cvp.getMatchedComputeElements().clear();      cvp.setMatchedComputeElements(cesMeetingCriteria);    }  }  _dbClient.updateAndReindexObject(cvp);  recordOperation(OperationTypeEnum.UPDATE_COMPUTE_VPOOL,VPOOL_UPDATED_DESCRIPTION,cvp);  return toComputeVirtualPool(_dbClient,cvp,isComputeVirtualPoolInUse(cvp));}  }
class C{  @After public void tearDown(){  solution=null;}  }
class C{  public void addPropertyChangeListener(PropertyChangeListener listener){  changeSupport.addPropertyChangeListener(listener);}  }
class C{  private Query parse(String text,int flags){  Analyzer analyzer=new MockAnalyzer(random());  SimpleQueryParser parser=new SimpleQueryParser(analyzer,Collections.singletonMap("field",1f),flags);  parser.setDefaultOperator(Occur.MUST);  return parser.parse(text);}  }
class C{  public void removeChangeListener(ChangeListener l){  m_ChangeListeners.remove(l);}  }
class C{  @Override public void fractureSingleVolumeMirror(StorageSystem storage,URI mirror,Boolean sync,TaskCompleter taskCompleter) throws DeviceControllerException {  log.info("fractureSingleVolumeMirror started");  try {    BlockMirror mirrorObj=dbClient.queryObject(BlockMirror.class,mirror);    Volume sourceVolume=dbClient.queryObject(Volume.class,mirrorObj.getSource());    hdsProtectionOperations.modifyShadowImagePair(storage,sourceVolume.getNativeId(),mirrorObj.getNativeId(),HDSApiProtectionManager.ShadowImageOperationType.split);    HDSJob syncjob=new HDSReplicationSyncJob(storage.getId(),sourceVolume.getNativeId(),mirrorObj.getNativeId(),ReplicationStatus.SPLIT,taskCompleter);    hdsCommandHelper.waitForAsyncHDSJob(syncjob);    mirrorObj.setSyncState(SynchronizationState.FRACTURED.name());    dbClient.persistObject(mirrorObj);    taskCompleter.ready(dbClient);  } catch (  Exception e) {    log.error("Failed to resume single volume mirror: {}",mirror,e);    ServiceError serviceError=DeviceControllerException.errors.jobFailed(e);    taskCompleter.error(dbClient,serviceError);  }  log.info("fractureSingleVolumeMirror completed");}  }
class C{  private void removeAndCancelEstimate(EstimateMapKey key){  LoadEstimateTask oldTask=null;  oldTask=(LoadEstimateTask)this.estimateMap.remove(key);  if (oldTask != null) {    oldTask.cancel();  }}  }
class C{  public void completeExecutorTask(){  ExecutorQueueItem item=null;synchronized (_executorLock) {    _executorTaskCount--;    assert (_executorTaskCount >= 0);    if (_executorQueueHead != null) {      item=_executorQueueHead;      _executorQueueHead=item._next;      if (_executorQueueHead == null)       _executorQueueTail=null;    }  }  if (item != null) {    Runnable task=item.getRunnable();    ClassLoader loader=item.getLoader();    boolean isPriority=false;    boolean isQueue=true;    boolean isWake=true;    scheduleImpl(task,loader,MAX_EXPIRE,isPriority,isQueue,isWake);  }}  }
class C{  protected IocScope _getScope(Scope scope){switch (scope) {case LOCAL:    return _localScope;case SINGLETON:  return _documentScope;case VIEW:return this._viewScope;default :return _localScope;}}  }
class C{  protected void assertMethodChooser(Object expected,Object arguments) throws Throwable {  Object value=invoke(this,"mockOverloadedMethod",arguments);  assertEquals("Invoking overloaded method for arguments: " + InvokerHelper.toString(arguments),expected,value);}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  public void selectAll(){  for (int i=0; i < mMusicTrackAdapter.getCount(); i++) {    MusicTrack musicTrack=mMusicTrackAdapter.getItem(i);    selectTrack(musicTrack,null,TrackSelectionState.Select);  }  updateListView();}  }
class C{  public Vset checkValue(Environment env,Context ctx,Vset vset,Hashtable exp){  env.error(where,"invalid.array.expr");  return vset;}  }
class C{  public void skippedEntity(String name) throws org.xml.sax.SAXException {}  }
class C{  public void readGroup(AttributeSet attrs){  TypedArray a=mContext.obtainStyledAttributes(attrs,R.styleable.SherlockMenuGroup);  groupId=a.getResourceId(R.styleable.SherlockMenuGroup_android_id,defaultGroupId);  groupCategory=a.getInt(R.styleable.SherlockMenuGroup_android_menuCategory,defaultItemCategory);  groupOrder=a.getInt(R.styleable.SherlockMenuGroup_android_orderInCategory,defaultItemOrder);  groupCheckable=a.getInt(R.styleable.SherlockMenuGroup_android_checkableBehavior,defaultItemCheckable);  groupVisible=a.getBoolean(R.styleable.SherlockMenuGroup_android_visible,defaultItemVisible);  groupEnabled=a.getBoolean(R.styleable.SherlockMenuGroup_android_enabled,defaultItemEnabled);  a.recycle();}  }
class C{  @Override public void onDestroyFloatView(View floatView){  ((ImageView)floatView).setImageDrawable(null);  mFloatBitmap.recycle();  mFloatBitmap=null;}  }
class C{  public String toString(){  StringBuffer buf=new StringBuffer("{");  if (values != null) {    for (int i=0; i < values.length; i++) {      buf.append(values[i].toString());      if (i + 1 < values.length)       buf.append(", ");    }  }  buf.append("}");  return buf.toString();}  }
class C{  public EntityQuery from(DynamicViewEntity dynamicViewEntity){  this.dynamicViewEntity=dynamicViewEntity;  this.entityName=null;  return this;}  }
class C{  public BootstrapMethod(int method,int[] args){  methodRef=method;  arguments=args;}  }
class C{  public static ResourceIdentifier from(final String endpoint,final String tenantId,final String resourceId){  Objects.requireNonNull(endpoint);  Objects.requireNonNull(tenantId);  return new ResourceIdentifier(endpoint,tenantId,resourceId);}  }
class C{  private static final void quicksortByLocation(GeoTimeSerie gts,int low,int high,boolean reversed){  if (0 == gts.values) {    return;  }  if (null == gts.locations) {    return;  }  int i=low, j=high;  long pivot=0L;  pivot=gts.locations[low + (high - low) / 2];  long pivotTick=gts.ticks[low + (high - low) / 2];  while (i <= j) {    if (!reversed) {      while (gts.locations[i] < pivot || (gts.locations[i] == pivot && gts.ticks[i] < pivotTick)) {        i++;      }      while (gts.locations[j] > pivot || (gts.locations[j] == pivot && gts.ticks[j] > pivotTick)) {        j--;      }    } else {      while (gts.locations[i] > pivot || (gts.locations[i] == pivot && gts.ticks[i] > pivotTick)) {        i++;      }      while (gts.locations[j] < pivot || (gts.locations[j] == pivot && gts.ticks[j] < pivotTick)) {        j--;      }    }    if (i <= j) {      if (TYPE.LONG == gts.type) {        long tmplong=gts.longValues[i];        gts.longValues[i]=gts.longValues[j];        gts.longValues[j]=tmplong;      } else       if (TYPE.DOUBLE == gts.type) {        double tmpdouble=gts.doubleValues[i];        gts.doubleValues[i]=gts.doubleValues[j];        gts.doubleValues[j]=tmpdouble;      } else       if (TYPE.STRING == gts.type) {        String tmpstring=gts.stringValues[i];        gts.stringValues[i]=gts.stringValues[j];        gts.stringValues[j]=tmpstring;      } else       if (TYPE.BOOLEAN == gts.type) {        boolean tmpboolean=gts.booleanValues.get(i);        gts.booleanValues.set(i,gts.booleanValues.get(j));        gts.booleanValues.set(j,tmpboolean);      }      long tmplong=gts.ticks[i];      gts.ticks[i]=gts.ticks[j];      gts.ticks[j]=tmplong;      if (null != gts.locations) {        tmplong=gts.locations[i];        gts.locations[i]=gts.locations[j];        gts.locations[j]=tmplong;      }      if (null != gts.elevations) {        tmplong=gts.elevations[i];        gts.elevations[i]=gts.elevations[j];        gts.elevations[j]=tmplong;      }      i++;      j--;    }  }  if (low < j) {    quicksortByLocation(gts,low,j,reversed);  }  if (i < high) {    quicksortByLocation(gts,i,high,reversed);  }}  }
class C{  private void acceptConnection() throws IOException {  if (mServerSocket == null) {    throw new IOException("ServerSocket is null, not trying to accept().");  } else   if (!mBluetoothAdapter.isEnabled()) {    throw new IOException("Bluetooth adapter is disabled, not trying to accept().");  }  Log.i(TAG,"Calling mServerSocket.accept()");  mSocket=mServerSocket.accept();  Log.i(TAG,"Accepted socket from " + mSocket.getRemoteDevice());  Log.i(TAG,"Accepted socket connected? " + mSocket.isConnected());  mExchange=new BandwidthMeasurementExchange(mSocket.getInputStream(),mSocket.getOutputStream(),false,new FriendStore(mContext,StorageBase.ENCRYPTION_DEFAULT),new MessageStore(mContext,StorageBase.ENCRYPTION_DEFAULT),mContext.mBandwidthExchangeCallback);  mContext.exchangeStartTimeMillis=System.currentTimeMillis();  (new Thread(mExchange)).start();}  }
class C{  public static ImageResizeOption valueOf(int value){  ImageResizeOption entry=mValueToEnum.get(value);  if (entry != null) {    return entry;  }  throw new IllegalArgumentException("No enum const class " + ImageResizeOption.class.getName() + ""+ value);}  }
class C{  public int locateGCPoint(Offset machCodeOffset,RVMMethod method){  machCodeOffset=machCodeOffset.minus(1 << ArchConstants.getLogInstructionWidth());  if (VM.TraceStkMaps) {    VM.sysWrite("ReferenceMaps-locateGCPoint for machine code offset = ");    VM.sysWrite(machCodeOffset);    VM.sysWrite("  --- in  method = ");    VM.sysWrite(method.getName());    VM.sysWrite("\n");  }  Offset distance=Offset.zero();  int index=0;  for (int i=0; i < mapCount; i++) {    distance=machCodeOffset.minus(MCSites[i]);    if (distance.sGE(Offset.zero())) {      index=i;      break;    }  }  for (int i=index + 1; i < mapCount; i++) {    Offset dist=machCodeOffset.minus(MCSites[i]);    if (dist.sLT(Offset.zero()))     continue;    if (dist.sLE(distance)) {      index=i;      distance=dist;    }  }  if (VM.TraceStkMaps) {    showInfo();    VM.sysWrite(" ReferenceMaps-locateGCPoint located index  = ");    VM.sysWrite(index);    VM.sysWrite("  byte  = ");    VM.sysWrite(referenceMaps[index]);    VM.sysWrite("\n");    if (index - 1 >= 0) {      VM.sysWrite(" MCSites[index-1] = ");      VM.sysWrite(machCodeOffset.minus(MCSites[index - 1]));      VM.sysWrite("\n");    }    VM.sysWrite(" MCSites[index  ] = ");    VM.sysWrite(machCodeOffset.minus(MCSites[index]));    VM.sysWrite("\n");    if (index + 1 < MCSites.length) {      VM.sysWrite(" MCSites[index+1] = ");      VM.sysWrite(machCodeOffset.minus(MCSites[index + 1]));      VM.sysWrite("\n");    }  }  if ((0x000000FF & (referenceMaps[index * bytesPerMap()] & JSR_MASK)) == (0x000000FF & JSR_MASK)) {    index=-index;    if (VM.TraceStkMaps) {      VM.sysWrite(" ReferenceMaps-locateGCPoint jsr mapid = ");      VM.sysWrite(-index);      VM.sysWrite("\n");    }  }  if (VM.TraceStkMaps) {    VM.sysWrite(" ReferenceMaps-locateGCPoint  machine offset = ");    VM.sysWrite(machCodeOffset);    VM.sysWrite("  - return map index = ");    VM.sysWrite(index);    VM.sysWrite("\n");  }  return index;}  }
class C{  public boolean isNaN(){  return Double.isNaN(hi);}  }
class C{  @Override public void valueBound(HttpSessionBindingEvent event){}  }
class C{  public List<? extends Position> outerBoundary(){  return this.boundaries.get(0);}  }
class C{  public Vector3f cross(Vector3f v){  return cross(v,null);}  }
class C{  public static WorkflowState makeState(){  return makeState(Limbo);}  }
class C{  private void readStylesElement(IXMLElement elem) throws IOException {  readStylesChildren(elem,commonStyles);}  }
class C{  public void testBug5729() throws Exception {  if (versionMeetsMinimum(4,1)) {    String valueAsString="1095923280000";    createTable("testBug5729","(field1 BIGINT UNSIGNED)");    this.stmt.executeUpdate("INSERT INTO testBug5729 VALUES (" + valueAsString + ")");    this.rs=this.conn.prepareStatement("SELECT * FROM testBug5729").executeQuery();    this.rs.next();    assertTrue(this.rs.getObject(1).toString().equals(valueAsString));  }}  }
class C{  private static void time(DateTimeFormatterBuilder bld,Collection<DateTimeFieldType> fields,boolean extended,boolean strictISO,boolean reducedPrec,boolean datePresent){  boolean hour=fields.remove(DateTimeFieldType.hourOfDay());  boolean minute=fields.remove(DateTimeFieldType.minuteOfHour());  boolean second=fields.remove(DateTimeFieldType.secondOfMinute());  boolean milli=fields.remove(DateTimeFieldType.millisOfSecond());  if (!hour && !minute && !second&& !milli) {    return;  }  if (hour || minute || second|| milli) {    if (strictISO && reducedPrec) {      throw new IllegalArgumentException("No valid ISO8601 format for fields because Date was reduced precision: " + fields);    }    if (datePresent) {      bld.appendLiteral('T');    }  }  if (hour && minute && second || (hour && !second && !milli)) {  } else {    if (strictISO && datePresent) {      throw new IllegalArgumentException("No valid ISO8601 format for fields because Time was truncated: " + fields);    }    if (!hour && (minute && second || (minute && !milli) || second)) {    } else {      if (strictISO) {        throw new IllegalArgumentException("No valid ISO8601 format for fields: " + fields);      }    }  }  if (hour) {    bld.appendHourOfDay(2);  } else   if (minute || second || milli) {    bld.appendLiteral('-');  }  if (extended && hour && minute) {    bld.appendLiteral(':');  }  if (minute) {    bld.appendMinuteOfHour(2);  } else   if (second || milli) {    bld.appendLiteral('-');  }  if (extended && minute && second) {    bld.appendLiteral(':');  }  if (second) {    bld.appendSecondOfMinute(2);  } else   if (milli) {    bld.appendLiteral('-');  }  if (milli) {    bld.appendLiteral('.');    bld.appendMillisOfSecond(3);  }}  }
class C{  public JMapper(final Class<D> destination,final Class<S> source,final ChooseConfig config,final JMapperAPI api){  this(destination,source,config,api.toXStream().toString());}  }
class C{  private static HashSet<String> readPurityFile(File purityFileName,File pathLoc) throws IOException {  HashSet<String> pureMethods=new LinkedHashSet<>();  BufferedReader reader=new BufferedReader(new FileReader(new File(pathLoc,purityFileName.getPath())));  if (true)   System.out.printf("Reading '%s' for pure methods %n",purityFileName);  for (String line=reader.readLine(); line != null; line=reader.readLine()) {    pureMethods.add(line.trim());  }  reader.close();  return pureMethods;}  }
class C{  public boolean containsKey(Object key){  return indexOfKey(key) >= 0;}  }
class C{  public static AccessibilityNodeInfoCompat focusSearch(AccessibilityNodeInfoCompat node,int direction){  final AccessibilityNodeInfoRef ref=AccessibilityNodeInfoRef.unOwned(node);switch (direction) {case SEARCH_FORWARD:{      if (!ref.nextInOrder()) {        return null;      }      return ref.release();    }case SEARCH_BACKWARD:{    if (!ref.previousInOrder()) {      return null;    }    return ref.release();  }}return null;}  }
class C{  public static synchronized BeanInfo findBeanInfo(String beanClassName){  String[] beanInfoPaths=Introspector.getBeanInfoSearchPath();  String infoClassName=beanClassName + "BeanInfo";  Class infoClass=null;  try {    infoClass=Class.forName(infoClassName);    return (BeanInfo)infoClass.newInstance();  } catch (  Exception ex) {  }  for (int i=0; i < beanInfoPaths.length; i++) {    int index=beanClassName.lastIndexOf(".");    String classNameWithDot=beanClassName.substring(index);    infoClassName=beanInfoPaths[i] + classNameWithDot + "BeanInfo";    try {      infoClass=Class.forName(infoClassName);      break;    } catch (    ClassNotFoundException ex) {    }  }  Object retval=null;  if (infoClass != null) {    try {      retval=infoClass.newInstance();    } catch (    Exception ex) {    }  }  return (BeanInfo)retval;}  }
class C{  public void commit(){  this.sessionId=0;}  }
class C{  protected boolean tiempoBloqueoExcedido(Date timestamp){  ConfiguracionSistemaArchivo csa=ConfiguracionSistemaArchivoFactory.getConfiguracionSistemaArchivo();  int maxPeriodo=TypeConverter.toInt(csa.getConfiguracionGeneral().getPeriodoMaximoBloqueo(),-1);  if (maxPeriodo > 0) {    Calendar cal=Calendar.getInstance();    cal.add(Calendar.MINUTE,maxPeriodo * (-1));    if (cal.getTimeInMillis() > timestamp.getTime())     return true;  }  return false;}  }
class C{  protected void computeScaledBounds(DrawContext dc,AVList modifiers,OrderedSymbol osym){  Dimension maxDimension=this.computeMinTextLayout(dc,modifiers);  osym.iconRectScaled=this.computeScaledRect(this.iconRect,maxDimension,osym.sx,osym.sy);  osym.layoutRectScaled=this.computeScaledRect(osym.layoutRect,maxDimension,osym.sx,osym.sy);}  }
class C{  public int blockToSector(int blockIndex){  validateBlock(blockIndex);  if (blockIndex < 32 * 4) {    return blockIndex / 4;  } else {    return 32 + (blockIndex - 32 * 4) / 16;  }}  }
class C{  public T caseScientificIntLiteral(ScientificIntLiteral object){  return null;}  }
class C{  public String evalTemplateString(String template,MailTemplateData td){  String result="";  String[] tokens=template.split("[{}]");  result=tokens[0];  for (int i=1; i < tokens.length; i+=2) {    String value=(String)td.get(tokens[i]);    if (value == null || value.length() == 0)     result+="[N/A]"; else     result+=td.get(tokens[i]);    if (i + 1 < tokens.length)     result+=tokens[i + 1];  }  return result;}  }
class C{  public final void createWrappedStructure(final WrapperFactory factory){  HierarchyWrapper currentWrapper=null;  for (  Content child : castToContentList(elementContent)) {    Wrapper<?> wrapper=factory.create(child);    if (wrapper instanceof ThrowAwayContentWrapper) {      continue;    }    if (currentWrapper == null) {      currentWrapper=new HierarchyWrapper(wrapper);      children.add(currentWrapper);    } else {      currentWrapper.addContent(wrapper);    }    if (currentWrapper.containsElement()) {      currentWrapper.createWrappedStructure(factory);      currentWrapper=null;    }  }}  }
class C{  private void removeElementAt(int at){  if (at < m_firstFree) {    int index=at >>> m_SHIFT;    int maxindex=m_firstFree >>> m_SHIFT;    int offset=at & m_MASK;    while (index <= maxindex) {      int copylen=m_blocksize - offset - 1;      int[] block=m_map[index];      if (null == block)       block=m_map[index]=new int[m_blocksize]; else       System.arraycopy(block,offset + 1,block,offset,copylen);      if (index < maxindex) {        int[] next=m_map[index + 1];        if (next != null)         block[m_blocksize - 1]=(next != null) ? next[0] : 0;      } else       block[m_blocksize - 1]=0;      offset=0;      ++index;    }  }  --m_firstFree;}  }
class C{  public void recompose(StylesheetRoot root){  root.recomposeVariables(this);}  }
class C{  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  in.defaultReadObject();  if (choiceLimits.length != choiceFormats.length) {    throw new InvalidObjectException("limits and format arrays of different length.");  }}  }
class C{  @Override public void bindView(ViewHolder viewHolder,List payloads){  super.bindView(viewHolder,payloads);  Context ctx=viewHolder.itemView.getContext();  viewHolder.imageName.setText(mName);  viewHolder.imageDescription.setText(mDescription);  viewHolder.imageView.setImageBitmap(null);  style(viewHolder.imageLovedOn,mStarred ? 1 : 0);  style(viewHolder.imageLovedOff,mStarred ? 0 : 1);  Glide.with(ctx).load(mImageUrl).animate(R.anim.alpha_on).into(viewHolder.imageView);}  }
class C{  public void push(int value){  if (size >= elements.length) {    int[] temp=new int[elements.length * 2];    System.arraycopy(elements,0,temp,0,elements.length);    elements=temp;  }  elements[size++]=value;}  }
class C{  @Override public void write(ArrayDataOutput dos) throws FitsException {  FitsSettings settings=FitsFactory.current();  this.fileOffset=FitsUtil.findOffset(dos);  this.cards.sort(new HeaderOrder());  checkBeginning();  checkEnd();  Cursor<String,HeaderCard> writeIterator=this.cards.iterator(0);  try {    while (writeIterator.hasNext()) {      HeaderCard card=writeIterator.next();      byte[] b=AsciiFuncs.getBytes(card.toString(settings));      dos.write(b);    }    FitsUtil.pad(dos,getNumberOfPhysicalCards() * HeaderCard.FITS_HEADER_CARD_SIZE,(byte)' ');    dos.flush();  } catch (  IOException e) {    throw new FitsException("IO Error writing header: " + e);  }}  }
class C{  protected void removeExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  String path="";  logger.info("Inicio de removeExecuteLogic");  String id=request.getParameter(Constants.ID);  if (logger.isInfoEnabled())   logger.info("Id clasificador: " + id);  String idObjeto=request.getParameter("idObjeto");  if (logger.isInfoEnabled())   logger.info("Id Objeto: " + idObjeto);  int tipoObjeto=TypeConverter.toInt(request.getParameter("tipoObjeto"),TipoObjeto.DESCRIPTOR);  if (logger.isInfoEnabled())   logger.info("Tipo Objeto: " + tipoObjeto);  GestionDocumentosElectronicosBI documentosBI=getGestionDocumentosElectronicosBI(request);  DocClasificadorVO clasificador=documentosBI.getClasificador(tipoObjeto,idObjeto,id);  DocumentosTreeView treeView=(DocumentosTreeView)getFromTemporalSession(request,DocumentosConstants.DOCUMENT_TREE_KEY);  try {    if (documentosBI.tieneDescendientes(tipoObjeto,idObjeto,id))     throw new DocElectronicosException(DocElectronicosException.XNO_SE_PUEDE_ELIMINAR_CLASIFICADOR_XTIENE_DESCENDIENTES);    documentosBI.removeClasificador(clasificador);    TreeNode parentNode=treeView.getSelectedNode().getParent();    if (parentNode != null)     path=parentNode.getNodePath();    TreeNode node=treeView.getSelectedNode();    treeView.removeNode(node);    setReturnActionFordward(request,redirectForwardMethod(request,"/clasificador","method","retrieve" + (clasificador.getIdClfPadre() != null ? "&id=" + clasificador.getIdClfPadre() : "") + (clasificador.getIdObjeto() != null ? "&idObjeto=" + clasificador.getIdObjeto() : "")+ "&tipoObjeto="+ tipoObjeto+ "&node="+ path+ "&remove="+ Boolean.TRUE+ "&refresh=1"));  } catch (  DocElectronicosException e) {    guardarError(request,e);    TreeNode node=treeView.getSelectedNode();    setReturnActionFordward(request,redirectForwardMethod(request,"/clasificador","method","retrieve" + (id != null ? "&id=" + id : "") + (idObjeto != null ? "&idObjeto=" + idObjeto : "")+ "&tipoObjeto="+ tipoObjeto+ "&node="+ node.getNodePath()+ "&refresh=1"));  }}  }
class C{  public static void main(String[] args) throws FileNotFoundException {  File file=new File(getFileName());  if (!file.exists()) {    System.out.println("File " + file.getName() + " does not exist");    System.exit(0);  }  int[] count=new int[26];  try (Scanner input=new Scanner(file)){    while (input.hasNext()) {      String line=(input.nextLine()).toUpperCase();      countLetters(count,line);    }  }   for (int i=0; i < count.length; i++) {    System.out.println("Number of " + (char)('A' + i) + "\'s: "+ count[i]);  }}  }
class C{  static public void computeNormalizedProbs(List<Double> nbestLogProbs,double scalingFactor){  double normalizationConstant=Double.NEGATIVE_INFINITY;  for (  double logp : nbestLogProbs) {    normalizationConstant=addInLogSemiring(normalizationConstant,logp * scalingFactor,0);  }  double tSum=0;  for (int i=0; i < nbestLogProbs.size(); i++) {    double normalizedProb=Math.exp(nbestLogProbs.get(i) * scalingFactor - normalizationConstant);    tSum+=normalizedProb;    nbestLogProbs.set(i,normalizedProb);    if (Double.isNaN(normalizedProb)) {      throw new RuntimeException("prob is NaN, must be wrong\nnbest_logps.get(i): " + nbestLogProbs.get(i) + "; scaling_factor: "+ scalingFactor+ "; normalization_constant:"+ normalizationConstant);    }  }  if (Math.abs(tSum - 1.0) > 1e-4) {    throw new RuntimeException("probabilities not sum to one, must be wrong");  }}  }
class C{  public boolean isClassicCompatible(){  return classicCompatible != null ? classicCompatible.intValue() != 0 : parent.isClassicCompatible();}  }
class C{  @Override public void onBindViewHolder(MovieViewHolder holder,int position){  Movie movie=movies.get(position);  holder.setMovie(movie);}  }
class C{  public SelectionEventFilter(){  super(InputEvent.BUTTON1_MASK);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean hasVibrobladesInLocation(int location){  if ((location != Mech.LOC_RARM) && (location != Mech.LOC_LARM)) {    return false;  }  for (int slot=0; slot < this.getNumberOfCriticals(location); slot++) {    CriticalSlot cs=getCritical(location,slot);    if (cs == null) {      continue;    }    if (cs.getType() != CriticalSlot.TYPE_EQUIPMENT) {      continue;    }    Mounted m=cs.getMount();    if (null == m) {      continue;    }    EquipmentType type=m.getType();    if ((type instanceof MiscType) && ((MiscType)type).isVibroblade()) {      return !(m.isDestroyed() || m.isMissing() || m.isBreached());    }  }  return false;}  }
class C{  public static void cleanBlockObjectFromExports(URI boURI,boolean addToExisting,DbClient dbClient){  _log.info("Cleaning block object {} from exports",boURI);  Map<URI,ExportGroup> exportGroupMap=new HashMap<URI,ExportGroup>();  Map<URI,ExportGroup> updatedExportGroupMap=new HashMap<URI,ExportGroup>();  Map<String,ExportMask> updatedExportMaskMap=new HashMap<String,ExportMask>();  BlockObject bo=BlockObject.fetch(dbClient,boURI);  URIQueryResultList exportGroupURIs=new URIQueryResultList();  dbClient.queryByConstraint(ContainmentConstraint.Factory.getBlockObjectExportGroupConstraint(boURI),exportGroupURIs);  for (  URI exportGroupURI : exportGroupURIs) {    _log.info("Cleaning block object from export group {}",exportGroupURI);    ExportGroup exportGroup=null;    if (exportGroupMap.containsKey(exportGroupURI)) {      exportGroup=exportGroupMap.get(exportGroupURI);    } else {      exportGroup=dbClient.queryObject(ExportGroup.class,exportGroupURI);      exportGroupMap.put(exportGroupURI,exportGroup);    }    if (exportGroup.hasBlockObject(boURI)) {      _log.info("Removing block object from export group");      exportGroup.removeVolume(boURI);      if (!updatedExportGroupMap.containsKey(exportGroupURI)) {        updatedExportGroupMap.put(exportGroupURI,exportGroup);      }    }    List<ExportMask> exportMasks=ExportMaskUtils.getExportMasks(dbClient,exportGroup);    for (    ExportMask exportMask : exportMasks) {      if (exportMask.hasVolume(boURI)) {        _log.info(String.format("Cleaning block object from export mask [%s]",exportMask.forDisplay()));        StringMap exportMaskVolumeMap=exportMask.getVolumes();        String hluStr=exportMaskVolumeMap.get(boURI.toString());        exportMask.removeVolume(boURI);        exportMask.removeFromUserCreatedVolumes(bo);        if (addToExisting) {          _log.info("Adding to existing volumes");          exportMask.addToExistingVolumesIfAbsent(bo,hluStr);        }        if (!updatedExportMaskMap.containsKey(exportMask.getId().toString())) {          updatedExportMaskMap.put(exportMask.getId().toString(),exportMask);        }      }    }  }  if (!updatedExportGroupMap.isEmpty()) {    List<ExportGroup> updatedExportGroups=new ArrayList<ExportGroup>(updatedExportGroupMap.values());    dbClient.updateObject(updatedExportGroups);  }  if (!updatedExportMaskMap.isEmpty()) {    List<ExportMask> updatedExportMasks=new ArrayList<ExportMask>(updatedExportMaskMap.values());    dbClient.updateObject(updatedExportMasks);  }}  }
class C{  public Camera(File intr,File dist) throws IOException {  intrinsics=new Matrix(MatrixUtils.loadMatrix(intr),3).transpose();  distCoeffs=new Matrix(dist == null ? new double[]{0,0,0,0} : MatrixUtils.loadMatrix(dist),1);  invIntrinsics=intrinsics.inverse();  cx=intrinsics.get(0,2);  cy=intrinsics.get(1,2);  fx=intrinsics.get(0,0);  fy=intrinsics.get(1,1);  k1=distCoeffs.get(0,0);  k2=distCoeffs.get(0,1);  p1=distCoeffs.get(0,2);  p2=distCoeffs.get(0,3);}  }
class C{  public void searchStopped(){  treeViewer.clearSelectedTaxa();}  }
class C{  public void init(){  setToNull();}  }
class C{  @Override HashMapEntry<K,V> constructorNewEntry(K key,V value,int hash,HashMapEntry<K,V> next){  LinkedEntry<K,V> header=this.header;  LinkedEntry<K,V> oldTail=header.prv;  LinkedEntry<K,V> newTail=new LinkedEntry<K,V>(key,value,hash,next,header,oldTail);  return oldTail.nxt=header.prv=newTail;}  }
class C{  private String isInputChecked(String dataSet,String value){  if (dataSet != null && dataSet.equals(value)) {    return " checked";  }  return "";}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  JFreeChart chart=(JFreeChart)super.clone();  chart.renderingHints=(RenderingHints)this.renderingHints.clone();  if (this.title != null) {    chart.title=(TextTitle)this.title.clone();    chart.title.addChangeListener(chart);  }  chart.subtitles=new ArrayList();  for (int i=0; i < getSubtitleCount(); i++) {    Title subtitle=(Title)getSubtitle(i).clone();    chart.subtitles.add(subtitle);    subtitle.addChangeListener(chart);  }  if (this.plot != null) {    chart.plot=(Plot)this.plot.clone();    chart.plot.addChangeListener(chart);  }  chart.progressListeners=new EventListenerList();  chart.changeListeners=new EventListenerList();  return chart;}  }
class C{  public CouldntLoadDataException(final Exception exception){  super(exception);  m_stacktrace=exception.getStackTrace();}  }
class C{  void checkAndRemoveHeaderRow(int position){  if (isUpdateListEmpty()) {    for (Iterator<Displayable> it=displayableList.iterator(); it.hasNext(); ) {      Displayable displayable=it.next();      if (displayable instanceof UpdateHeaderRow) {        it.remove();        notifyItemRemoved(position);      }    }  }}  }
class C{  public AgentSnapshotInfo createAgentSnapshotInfo(Id<Person> agentId,Coord startCoord,Coord endCoord,double distanceOnLink,Integer lane,double curveLength){  PositionInfo info=new PositionInfo();  info.setId(agentId);  double lanePosition=this.linkWidthCalculator.calculateLanePosition(lane);  Gbl.assertNotNull(startCoord);  Gbl.assertNotNull(endCoord);  calculateAndSetPosition(info,startCoord,endCoord,distanceOnLink,curveLength,lanePosition);  return info;}  }
class C{  public DefaultWindDataset(String[] seriesNames,Object[][][] data){  this(Arrays.asList(seriesNames),data);}  }
class C{  public static void mkdirs(File directory) throws CreateDirectoryException {  if (directory.exists()) {    if (directory.isDirectory()) {      return;    }    if (!directory.delete()) {      throw new CreateDirectoryException(directory.getAbsolutePath(),new FileDeleteException(directory.getAbsolutePath()));    }  }  if (!directory.mkdirs() && !directory.isDirectory()) {    throw new CreateDirectoryException(directory.getAbsolutePath());  }}  }
class C{  public OscMessage addArguments(final Object[] theArguments){  return add(theArguments);}  }
class C{  public TimeZoneDataType clone(){  TimeZoneDataType result=new TimeZoneDataType();  result.Offset=Offset;  result.DaylightSavingInOffset=DaylightSavingInOffset;  return result;}  }
class C{  public ImageReuseInfo create(String thisSize){  ArrayList<String> list=new ArrayList<String>();  boolean canBeReused=false;  for (int i=0; i < mSizeList.length; i++) {    String size=mSizeList[i];    if (!canBeReused && thisSize.equals(size)) {      canBeReused=true;      continue;    }    if (canBeReused && !thisSize.equals(size)) {      list.add(size);    }  }  if (list.size() == 0) {    return new ImageReuseInfo(thisSize,null);  } else {    String[] sizeList=new String[list.size()];    list.toArray(sizeList);    return new ImageReuseInfo(thisSize,sizeList);  }}  }
class C{  public ContainerVm findVmForContainer(Container container){  for (  ContainerVm containerVm : getContainerVmList()) {    if (containerVm.isSuitableForContainer(container)) {      return containerVm;    }  }  return null;}  }
class C{  public void start(@NonNull Activity activity,int requestCode){  activity.startActivityForResult(getIntent(activity),requestCode);}  }
class C{  public boolean epsilonEquals(Matrix4f m1,float epsilon){  boolean status=true;  if (Math.abs(this.m00 - m1.m00) > epsilon)   status=false;  if (Math.abs(this.m01 - m1.m01) > epsilon)   status=false;  if (Math.abs(this.m02 - m1.m02) > epsilon)   status=false;  if (Math.abs(this.m03 - m1.m03) > epsilon)   status=false;  if (Math.abs(this.m10 - m1.m10) > epsilon)   status=false;  if (Math.abs(this.m11 - m1.m11) > epsilon)   status=false;  if (Math.abs(this.m12 - m1.m12) > epsilon)   status=false;  if (Math.abs(this.m13 - m1.m13) > epsilon)   status=false;  if (Math.abs(this.m20 - m1.m20) > epsilon)   status=false;  if (Math.abs(this.m21 - m1.m21) > epsilon)   status=false;  if (Math.abs(this.m22 - m1.m22) > epsilon)   status=false;  if (Math.abs(this.m23 - m1.m23) > epsilon)   status=false;  if (Math.abs(this.m30 - m1.m30) > epsilon)   status=false;  if (Math.abs(this.m31 - m1.m31) > epsilon)   status=false;  if (Math.abs(this.m32 - m1.m32) > epsilon)   status=false;  if (Math.abs(this.m33 - m1.m33) > epsilon)   status=false;  return (status);}  }
class C{  CounterNode lookup(List<String> hierarchyElements){  CounterNode cur=this;  for (  String element : hierarchyElements) {    cur=cur.children.get(element);    if (cur == null) {      break;    }  }  return cur;}  }
class C{  public final int indexOf(final int id){  ensureAtLeast(id,0,"The id must be at least 0");  for (int i=0; i < getItemCount(); i++) {    AbstractItem item=adapter.getItem(i);    if (item.getId() == id) {      return i;    }  }  return -1;}  }
class C{  public static final UUID register(Object obj){  UUID key;  if (obj instanceof UUIDable) {    key=((UUIDable)obj).getUUID();    if (get(key) == null) {      registry.put(key,obj);    }  } else {    key=getKey(obj);    if (key == null) {      key=UUID.randomUUID();      registry.put(key,obj);    }  }  return key;}  }
class C{  public Iterator<BugAnnotation> annotationIterator(){  return annotationList.iterator();}  }
class C{  public EventStoreBuilder clusterNodeGossipTimeout(Duration duration){  clusterNodeGossipTimeout=duration;  return this;}  }
class C{  public void enableSave(boolean enable){  menuItemSave.setEnabled(enable);  menuItemSaveAs.setEnabled(enable);  saveButton.setEnabled(enable);}  }
class C{  private WebDoc createSecondPage(HttpServletRequest request,option[] roleOptions,String errorMessage){  log.info(" - " + errorMessage);  WebSessionCtx wsc=WebSessionCtx.get(request);  String windowTitle=Msg.getMsg(wsc.language,"LoginSuccess");  String action=WebEnv.getBaseDirectory("WMenu");  form myForm=null;  myForm=new form(action).setName("Login2");  myForm.setTarget(WebEnv.TARGET_MENU);  table table=new table().setAlign(AlignType.CENTER);  tr line=new tr();  line.addElement(new td().addElement(" "));  table.addElement(line);  line=new tr();  label roleLabel=new label().setFor(P_ROLE + "F").addElement(Msg.translate(wsc.language,"AD_Role_ID"));  roleLabel.setID(P_ROLE + "L");  line.addElement(new td().addElement(roleLabel).setAlign(AlignType.RIGHT));  select role=new select(P_ROLE,roleOptions);  role.setID(P_ROLE + "F");  role.setOnClick("fieldUpdate(this);");  line.addElement(new td().addElement(role));  table.addElement(line);  line=new tr();  label clientLabel=new label().setFor(P_CLIENT + "F").addElement(Msg.translate(wsc.language,"AD_Client_ID"));  clientLabel.setID(P_CLIENT + "L");  line.addElement(new td().addElement(clientLabel).setAlign(AlignType.RIGHT));  select client=new select(P_CLIENT);  client.setID(P_CLIENT + "F");  client.setOnClick("fieldUpdate(this);");  line.addElement(new td().addElement(client));  table.addElement(line);  line=new tr();  label orgLabel=new label().setFor(P_ORG + "F").addElement(Msg.translate(wsc.language,"AD_Org_ID"));  orgLabel.setID(P_ORG + "L");  line.addElement(new td().addElement(orgLabel).setAlign(AlignType.RIGHT));  select org=new select(P_ORG);  org.setID(P_ORG + "F");  org.setOnClick("fieldUpdate(this);");  line.addElement(new td().addElement(org));  table.addElement(line);  line=new tr();  label whLabel=new label().setFor(P_WAREHOUSE + "F").addElement(Msg.translate(wsc.language,"M_Warehouse_ID"));  whLabel.setID(P_WAREHOUSE + "L");  line.addElement(new td().addElement(whLabel).setAlign(AlignType.RIGHT));  select wh=new select(P_WAREHOUSE);  wh.setID(P_WAREHOUSE + "F");  line.addElement(new td().addElement(wh));  table.addElement(line);  String dateData=wsc.dateFormat.format(new java.util.Date());  line=new tr();  label dateLabel=new label().setFor(P_DATE + "F").addElement(Msg.getMsg(wsc.language,"Date"));  dateLabel.setID(P_DATE + "L");  line.addElement(new td().addElement(dateLabel).setAlign(AlignType.RIGHT));  input date=new input(input.TYPE_TEXT,P_DATE,dateData).setSize(10).setMaxlength(10);  date.setID(P_DATE + "F");  line.addElement(new td().addElement(date).setAlign(AlignType.LEFT));  table.addElement(line);  if (errorMessage != null && errorMessage.length() > 0) {    line=new tr();    line.addElement(new td().addElement(new strong(errorMessage)).setColSpan(2).setAlign(AlignType.CENTER));    table.addElement(line);  }  table tablebutton=new table().setAlign(AlignType.CENTER).setWidth("25%");  line=new tr();  input cancel=new input(input.TYPE_RESET,"Reset","  " + "Cancel");  cancel.setOnClick("window.top.location.replace('/adempiere/index.html');");  cancel.setClass("cancelbtn");  line.addElement(new td().addElement(cancel).setWidth("50%").setAlign(AlignType.CENTER));  input submit=new input(input.TYPE_SUBMIT,"Submit","  " + "OK");  submit.setOnClick("showLoadingMenu('" + WebEnv.getBaseDirectory("") + "');");  submit.setClass("loginbtn");  line.addElement(new td().addElement(submit).setWidth("50%").setAlign(AlignType.CENTER));  tablebutton.addElement(line);  table.addElement(tablebutton);  myForm.addElement(table);  WebDoc doc=WebDoc.createWindow(windowTitle);  img img=new img(WebEnv.getImageDirectory("Logo.gif"),"logo");  doc.addWindowCenter(true).addElement(img).addElement(new p()).addElement(myForm).addElement(new p()).addElement(new p());  String script="fieldUpdate(document.Login2." + P_ROLE + ");";  doc.getBody().addElement(new script(script));  doc.addWindowFooter().addElement(new p(Msg.getMsg(wsc.language,"WLoginBrowserNote"),AlignType.CENTER));  return doc;}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  DefaultIntervalCategoryDataset clone=(DefaultIntervalCategoryDataset)super.clone();  clone.categoryKeys=(Comparable[])this.categoryKeys.clone();  clone.seriesKeys=(Comparable[])this.seriesKeys.clone();  clone.startData=clone(this.startData);  clone.endData=clone(this.endData);  return clone;}  }
class C{  protected Query newSynonymQuery(Term terms[]){  return new SynonymQuery(terms);}  }
class C{  private int makeLmCharIndex(int[] context,TransitionStateType type){  if (context.length == 0 || this.alwaysSpaceTransitionTypes.contains(type)) {    return spaceCharIndex;  } else   if (type == TransitionStateType.RMRGN_HPHN_INIT) {    return hyphenCharIndex;  } else {    return context[context.length - 1];  }}  }
class C{  public void toggleShowCubeInsideOut(){  this.showCubeInsideOut=!showCubeInsideOut;}  }
class C{  public void addSeries(final String title,final Double[] values){  int cnt=1;  for (  double value : values) {    String category=(cnt > this.categories.length ? Integer.toString(cnt) : this.categories[cnt - 1]);    this.dataset.addValue(value,title,category);    cnt++;  }}  }
class C{  public double distance(Coordinate c){  double dx=x - c.x;  double dy=y - c.y;  return Math.sqrt(dx * dx + dy * dy);}  }
class C{  protected void maybeFireBoundsInvalidated(Rectangle invalidatedArea){  Drawing d=getDrawing();  Rectangle2D.Double canvasBounds=new Rectangle2D.Double(0,0,0,0);  if (d.get(CANVAS_WIDTH) != null) {    canvasBounds.width+=d.get(CANVAS_WIDTH);  }  if (d.get(CANVAS_HEIGHT) != null) {    canvasBounds.height+=d.get(CANVAS_HEIGHT);  }  if (!canvasBounds.contains(invalidatedArea)) {    fireBoundsInvalidated(invalidatedArea);  }}  }
class C{  public void shutdownImmediately(){  close();}  }
class C{  public u addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public static byte[] serialize(Object obj,DataHandler dataHandler){  try {    JavaObjectSerializer handlerSerializer=null;    if (dataHandler != null) {      handlerSerializer=dataHandler.getJavaObjectSerializer();    }    if (handlerSerializer != null) {      return handlerSerializer.serialize(obj);    }    if (serializer != null) {      return serializer.serialize(obj);    }    ByteArrayOutputStream out=new ByteArrayOutputStream();    ObjectOutputStream os=new ObjectOutputStream(out);    os.writeObject(obj);    return out.toByteArray();  } catch (  Throwable e) {    throw DbException.get(ErrorCode.SERIALIZATION_FAILED_1,e,e.toString());  }}  }
class C{  public static Vector2 round(Vector2 o){  return new Vector2(Math.round(o.x),Math.round(o.z));}  }
class C{  public void send(){  build();}  }
class C{  public synchronized int size(){  return listenerList.length;}  }
class C{  @Override public Object translateValue(final Object value){  return ((Number)value).doubleValue() / 1024;}  }
class C{  public void invoke(NormalBURS_DepGraph dg){  if (DEBUG)   dg.printDepGraph();  buildTrees(dg);  if (haveProblemEdges()) {    problemEdgePrep();    handleProblemEdges();  }  orderTrees(dg);  labelTrees();  generateTrees(makeCoder());}  }
class C{  protected String doIt() throws Exception {  sqlB=new StringBuffer("UPDATE AD_Package_Imp " + "SET PK_Status = 'Uninstalling' " + "WHERE AD_Package_Imp_ID = "+ m_AD_Package_Imp_ID);  int no=DB.executeUpdate(sqlB.toString(),get_TrxName());  log.info("Starting Package Reversal");  sql=new StringBuffer("SELECT * " + "FROM AD_Package_Imp_Detail " + "WHERE AD_Package_Imp_ID=" + m_AD_Package_Imp_ID + " ORDER BY AD_Package_Imp_Detail_ID DESC");  log.info(sql.toString());  PreparedStatement pstmt=null;  try {    pstmt=DB.prepareStatement(sql.toString(),null);    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      if (rs.getString("Type").compareTo("file") == 0) {        sqlB=new StringBuffer("SELECT * " + "FROM AD_Package_Imp_Backup " + "WHERE AD_Package_Imp_Detail_ID=" + rs.getInt("AD_Package_Imp_Detail_ID") + " AND AD_Package_Imp_ID="+ rs.getInt("AD_Package_Imp_ID"));        PreparedStatement pstmt2=null;        try {          pstmt2=DB.prepareStatement(sqlB.toString(),get_TrxName());          ResultSet rs2=pstmt2.executeQuery();          while (rs2.next()) {            if (rs2.getString("AD_Package_Imp_Bck_Dir") != null && rs2.getString("AD_Package_Imp_Org_Dir") != null) {              copyFile(rs2.getString("AD_Package_Imp_Bck_Dir"),rs2.getString("AD_Package_Imp_Org_Dir"));            }            sqlD=new StringBuffer("UPDATE AD_Package_Imp_Backup" + " SET Uninstall = 'Y'" + " WHERE AD_Package_Imp_Backup_ID = "+ rs2.getInt("AD_Package_Imp_Backup_ID"));            no=DB.executeUpdate(sqlD.toString(),null);            sqlD=new StringBuffer("UPDATE AD_Package_Imp_Detail" + " SET Uninstall = 'Y'" + " WHERE AD_Package_Imp_Detail_ID = "+ rs.getInt("AD_Package_Imp_Detail_ID"));            no=DB.executeUpdate(sqlD.toString(),null);          }          rs2.close();          pstmt2.close();          pstmt2=null;        } catch (        Exception e) {          log.log(Level.SEVERE,"doIt",e);        } finally {          try {            if (pstmt2 != null)             pstmt2.close();          } catch (          Exception e) {          }          pstmt2=null;        }      } else {        String tableName=rs.getString("TableName");        int recordID=rs.getInt("AD_Original_ID");        if (rs.getString("ACTION").compareTo("Update") == 0) {          sqlB=new StringBuffer("SELECT * " + "FROM AD_Package_Imp_Backup " + "WHERE AD_Package_Imp_Detail_ID=" + rs.getInt("AD_Package_Imp_Detail_ID") + " AND AD_Package_Imp_ID="+ rs.getInt("AD_Package_Imp_ID"));          PreparedStatement pstmt2=null;          try {            pstmt2=DB.prepareStatement(sqlB.toString(),get_TrxName());            ResultSet rs2=pstmt2.executeQuery();            while (rs2.next()) {              sql=new StringBuffer("SELECT IsKey FROM AD_Column WHERE AD_Column_ID = ?");              String IsKey=DB.getSQLValueString(get_TrxName(),sql.toString(),rs2.getInt("AD_Column_ID"));              sql=new StringBuffer("SELECT TableName FROM AD_Table WHERE AD_Table_ID = ?");              tableName=DB.getSQLValueString(get_TrxName(),sql.toString(),rs2.getInt("AD_Table_ID"));              sql=new StringBuffer("SELECT ColumnName FROM AD_Column WHERE AD_Column_ID = ?");              String columnName=DB.getSQLValueString(get_TrxName(),sql.toString(),rs2.getInt("AD_Column_ID"));              if (tableName.equals("AD_Ref_Table")) {                columnIDName="AD_Reference_ID";              } else               if (tableName.equals("AD_TreeNodeMM")) {                columnIDName="Node_ID";              } else {                columnIDName=tableName + "_ID";              }              if (IsKey.equals("Y") || columnName.startsWith("Created"))               ; else               if (columnName.equals("Updated")) {                sqlC=new StringBuffer("UPDATE " + tableName + " SET "+ columnName+ " = SYSDATE WHERE "+ columnIDName+ " = "+ recordID);                no=DB.executeUpdate(sqlC.toString(),null);                sqlD=new StringBuffer("UPDATE AD_Package_Imp_Backup" + " SET Uninstall = 'Y'" + " WHERE AD_Package_Imp_Backup_ID = "+ rs2.getInt("AD_Package_Imp_Backup_ID"));                no=DB.executeUpdate(sqlD.toString(),null);              } else               if (columnName.equals("UpdatedBy")) {                sqlC=new StringBuffer("UPDATE " + tableName + " SET "+ columnName+ " = '"+ Env.getAD_User_ID(Env.getCtx())+ "' WHERE "+ columnIDName+ " = "+ recordID);                no=DB.executeUpdate(sqlC.toString(),null);                sqlD=new StringBuffer("UPDATE AD_Package_Imp_Backup" + " SET Uninstall = 'Y'" + " WHERE AD_Package_Imp_Backup_ID = "+ rs2.getInt("AD_Package_Imp_Backup_ID"));                no=DB.executeUpdate(sqlD.toString(),null);              } else {                int v_AD_Reference_ID=rs2.getInt("AD_Reference_ID");                if (v_AD_Reference_ID == 10 || v_AD_Reference_ID == 14 || v_AD_Reference_ID == 34 || v_AD_Reference_ID == 17 || (v_AD_Reference_ID == 18 && columnName.equalsIgnoreCase("EntityType")))                 if (rs2.getObject("ColValue").toString().equals("null")) {                  ;                } else {                  sqlC=new StringBuffer("UPDATE " + tableName + " SET "+ columnName+ " = "+ "'"+ rs2.getObject("ColValue").toString().replaceAll("'","''")+ "'"+ " WHERE "+ columnIDName+ " = "+ recordID);                } else                 if (v_AD_Reference_ID == 20 || v_AD_Reference_ID == 28) {                  sqlC=new StringBuffer("UPDATE " + tableName + " SET "+ columnName+ " = "+ (rs2.getObject("ColValue").toString().equals("true") ? "'Y'" : "'N'")+ " WHERE "+ columnIDName+ " = "+ recordID);                } else                 if (v_AD_Reference_ID == 13 || v_AD_Reference_ID == 18 || v_AD_Reference_ID == 19 || v_AD_Reference_ID == 21 || v_AD_Reference_ID == 25 || v_AD_Reference_ID == 27 || v_AD_Reference_ID == 30 || v_AD_Reference_ID == 31 || v_AD_Reference_ID == 35)                 sqlC=new StringBuffer("UPDATE " + tableName + " SET "+ columnName+ " = "+ rs2.getObject("ColValue").toString().replaceAll("'","''")+ " WHERE "+ columnIDName+ " = "+ recordID); else                 if (v_AD_Reference_ID == 11 || v_AD_Reference_ID == 12 || v_AD_Reference_ID == 22 || v_AD_Reference_ID == 29)                 sqlC=new StringBuffer("UPDATE " + tableName + " SET "+ columnName+ " = "+ rs2.getObject("ColValue").toString().replaceAll("'","''")+ " WHERE "+ columnIDName+ " = "+ recordID); else                 if (v_AD_Reference_ID == 15 || v_AD_Reference_ID == 16)                 ; else                 ;                no=DB.executeUpdate(sqlC.toString(),null);                sqlD=new StringBuffer("UPDATE AD_Package_Imp_Backup" + " SET Uninstall = 'Y'" + " WHERE AD_Package_Imp_Backup_ID = "+ rs2.getInt("AD_Package_Imp_Backup_ID"));                no=DB.executeUpdate(sqlD.toString(),null);                sqlD=new StringBuffer("UPDATE AD_Package_Imp_Detail" + " SET Uninstall = 'Y'" + " WHERE AD_Package_Imp_Detail_ID = "+ rs.getInt("AD_Package_Imp_Detail_ID"));                no=DB.executeUpdate(sqlD.toString(),null);              }            }            rs2.close();            pstmt2.close();            pstmt2=null;          } catch (          Exception e) {            log.log(Level.SEVERE,"doIt",e);          } finally {            try {              if (pstmt2 != null)               pstmt2.close();            } catch (            Exception e) {            }            pstmt2=null;          }        } else         if (rs.getString("ACTION").compareTo("New") == 0) {          if (tableName.equals("AD_Ref_Table"))           columnIDName="AD_Reference_ID"; else           if (tableName.equals("AD_TreeNodeMM"))           columnIDName="Node_ID"; else           columnIDName=tableName + "_ID";          sqlC=new StringBuffer("UPDATE " + tableName + " SET IsActive = 'N'"+ " WHERE "+ columnIDName+ " = "+ recordID);          no=DB.executeUpdate(sqlC.toString(),null);          sqlD=new StringBuffer("UPDATE AD_Package_Imp_Detail" + " SET Uninstall = 'Y'" + " WHERE AD_Package_Imp_Detail_ID = "+ rs.getInt("AD_Package_Imp_Detail_ID"));          no=DB.executeUpdate(sqlD.toString(),null);        }      }    }    rs.close();    pstmt.close();    pstmt=null;  } catch (  Exception e) {    log.log(Level.SEVERE,"doIt",e);  } finally {    try {      if (pstmt != null)       pstmt.close();    } catch (    Exception e) {    }    pstmt=null;  }  sqlD=new StringBuffer("UPDATE AD_Package_Imp" + " SET Uninstall = 'Y'" + " WHERE AD_Package_Imp_ID = "+ m_AD_Package_Imp_ID);  no=DB.executeUpdate(sqlD.toString(),get_TrxName());  sqlB=new StringBuffer("UPDATE AD_Package_Imp " + " SET PK_Status = 'Uninstalled'" + " WHERE AD_Package_Imp_ID = "+ m_AD_Package_Imp_ID);  no=DB.executeUpdate(sqlB.toString(),get_TrxName());  log.info("Package Reversal Completed");  return "";}  }
class C{  private void calcAngles(){  mDrawAngles=new float[mData.getYValCount()];  mAbsoluteAngles=new float[mData.getYValCount()];  ArrayList<DataSet> dataSets=mData.getDataSets();  int cnt=0;  for (int i=0; i < mData.getDataSetCount(); i++) {    DataSet set=dataSets.get(i);    ArrayList<Entry> entries=set.getYVals();    for (int j=0; j < entries.size(); j++) {      mDrawAngles[cnt]=calcAngle(entries.get(j).getVal());      if (cnt == 0) {        mAbsoluteAngles[cnt]=mDrawAngles[cnt];      } else {        mAbsoluteAngles[cnt]=mAbsoluteAngles[cnt - 1] + mDrawAngles[cnt];      }      cnt++;    }  }}  }
class C{  public boolean isObjectExists(String objectName,HashMap<String,DBObject> objectMap){  boolean result=false;  if (objectMap != null && objectMap.size() > 0) {    for (Iterator<String> it=objectMap.keySet().iterator(); it.hasNext(); ) {      String key=it.next();      if (key.equalsIgnoreCase(objectName))       result=true; else       if (objectMap.get(key).isName(objectName))       result=true;    }  }  return result;}  }
class C{  public static void invalidateLoadedConceptData(){  sLoadedLocale=null;}  }
class C{  public DigestInputStream(InputStream stream,MessageDigest digest){  super(stream);  setMessageDigest(digest);}  }
class C{  public static RegressionRunner serializableInstance(){  List<Node> variables=new LinkedList<>();  ContinuousVariable var1=new ContinuousVariable("X");  ContinuousVariable var2=new ContinuousVariable("Y");  variables.add(var1);  variables.add(var2);  DataSet _dataSet=new ColtDataSet(3,variables);  double[] col1data=new double[]{0.0,1.0,2.0};  double[] col2data=new double[]{2.3,4.3,2.5};  for (int i=0; i < 3; i++) {    _dataSet.setDouble(i,0,col1data[i]);    _dataSet.setDouble(i,1,col2data[i]);  }  DataWrapper dataWrapper=new DataWrapper(_dataSet);  return new RegressionRunner(dataWrapper,new Parameters());}  }
class C{  @Override public void start(){  if (!isRunning) {    discoveryController.start(fireTVListener);    isRunning=true;  }}  }
class C{  public AtomicIntegerArray(int[] array){  this.array=array.clone();}  }
class C{  protected void newline(){  if (page != null && pagenum >= prFirst) {    page.drawString(line,x0,y0 + (linenum * lineheight) + lineascent);  }  line="";  charnum=0;  charoffset=0;  linenum++;  if (linenum >= lines_per_page) {    if (isPreview) {      pageImages.addElement(previewImage);    }    if (page != null) {      page.dispose();    }    page=null;    newpage();  }}  }
class C{  public static int add(int p,int q){  return p ^ q;}  }
class C{  private void fillOrderDetails(final CustomerOrder customerOrder,final ShoppingCart shoppingCart,final boolean temp) throws OrderAssemblyException {  for (  CartItem item : shoppingCart.getCartItemList()) {    if (item.getPrice() == null || item.getSalePrice() == null || item.getListPrice() == null || item.getNetPrice() == null || item.getGrossPrice() == null || item.getTaxRate() == null || item.getTaxCode() == null || item.getProductSkuCode() == null) {      throw new OrderAssemblyException("Order line has no prices and/or taxes: " + item);    }    CustomerOrderDet customerOrderDet=entityFactory.getByIface(CustomerOrderDet.class);    customerOrderDet.setCustomerOrder(customerOrder);    customerOrder.getOrderDetail().add(customerOrderDet);    customerOrderDet.setPrice(item.getPrice());    customerOrderDet.setSalePrice(item.getSalePrice());    customerOrderDet.setListPrice(item.getListPrice());    customerOrderDet.setQty(item.getQty());    customerOrderDet.setGift(item.isGift());    customerOrderDet.setPromoApplied(item.isPromoApplied());    customerOrderDet.setFixedPrice(item.isFixedPrice());    customerOrderDet.setAppliedPromo(item.getAppliedPromo());    customerOrderDet.setNetPrice(item.getNetPrice());    customerOrderDet.setGrossPrice(item.getGrossPrice());    customerOrderDet.setTaxCode(item.getTaxCode());    customerOrderDet.setTaxRate(item.getTaxRate());    customerOrderDet.setTaxExclusiveOfPrice(item.isTaxExclusiveOfPrice());    customerOrderDet.setProductSkuCode(item.getProductSkuCode());    final ProductSku sku=productSkuService.getProductSkuBySkuCode(item.getProductSkuCode());    if (sku == null) {      throw new OrderAssemblyException("No order line sku for " + item.getProductSkuCode());    }    if (Product.AVAILABILITY_SHOWROOM == sku.getProduct().getAvailability()) {      throw new OrderAssemblyException("Sku is for showroom only " + item.getProductSkuCode());    }    customerOrderDet.setProductName(new FailoverStringI18NModel(sku.getDisplayName(),sku.getName()).getValue(customerOrder.getLocale()));  }}  }
class C{  @Override public boolean isEnabled(){  return super.isEnabled();}  }
class C{  public void add(Method m){  Trace.trace(Trace.Item.PARSER,"defining method %s",m.getName());  if (SymbolTable.reservedWords.contains(m.getName()))   throw new RuntimeException(m.getName() + " is a reserved word");  if (table.containsKey(m.getName()))   throw new RuntimeException("Method " + m.getName() + " already defined");  table.put(m.getName(),m);}  }
class C{  public ActionForward executeAction(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  DynaValidatorForm oForm=(DynaValidatorForm)form;  try {    UserAdminHelper.deleteUser(request,oForm);  } catch (  Exception e) {  }  return mapping.findForward(SUCCESS_FORWARD);}  }
class C{  private Image createOSXSizeGrip(){  ClassLoader cl=getClass().getClassLoader();  URL url=cl.getResource("org/fife/ui/autocomplete/osx_sizegrip.png");  if (url == null) {    File f=new File("../AutoComplete/src/org/fife/ui/autocomplete/osx_sizegrip.png");    if (f.isFile()) {      try {        url=f.toURI().toURL();      } catch (      MalformedURLException mue) {        mue.printStackTrace();        return null;      }    } else {      return null;    }  }  Image image=null;  try {    image=ImageIO.read(url);  } catch (  IOException ioe) {    ioe.printStackTrace();  }  return image;}  }
class C{  public void showMenu(){  mSlidingMenu.showMenu();}  }
class C{  private EntityManager createEntityManager(){  EntityManager entityManager=entityManagerFactory.createEntityManager();  entityManager.setFlushMode(FlushModeType.COMMIT);  entityManagerThreadLocal.set(entityManager);  return entityManager;}  }
class C{  @Override public UpdateResponse addBeans(Collection<?> beans,int commitWithinMs) throws SolrServerException, IOException {  UpdateResponse ur=null;  if (this.solr0 != null)   ur=this.solr0.addBeans(beans,commitWithinMs);  if (this.solr1 != null)   ur=this.solr1.addBeans(beans,commitWithinMs);  return ur;}  }
class C{  public static double[] subarray(double[] buffer,int offset,int length){  double temp[]=new double[length];  System.arraycopy(buffer,offset,temp,0,length);  return temp;}  }
class C{  public static byte max(byte a,byte b,byte c){  if (b > a) {    a=b;  }  if (c > a) {    a=c;  }  return a;}  }
class C{  private void initializeDirectives() throws Exception {  runtimeDirectives=new Hashtable();  Properties directiveProperties=new Properties();  InputStream inputStream=null;  try {    inputStream=getClass().getResourceAsStream('/' + DEFAULT_RUNTIME_DIRECTIVES);    if (inputStream == null)     throw new Exception("Error loading directive.properties! " + "Something is very wrong if these properties " + "aren't being located. Either your Velocity "+ "distribution is incomplete or your Velocity "+ "jar file is corrupted!");    directiveProperties.load(inputStream);  } catch (  IOException ioe) {    String msg="Error while loading directive properties!";    error(msg);    throw new Exception(msg,ioe);  } finally {    try {      if (inputStream != null) {        inputStream.close();      }    } catch (    IOException ioe) {      String msg="Cannot close directive properties!";      debug(msg);    }  }  Enumeration directiveClasses=directiveProperties.elements();  while (directiveClasses.hasMoreElements()) {    String directiveClass=(String)directiveClasses.nextElement();    loadDirective(directiveClass,"System");  }  String[] userdirective=configuration.getStringArray("userdirective");  for (int i=0; i < userdirective.length; i++) {    loadDirective(userdirective[i],"User");  }}  }
class C{  private void drawEntities(final Graphics g){  for (  final MapObject object : controller.mapObjects.values()) {    object.draw(g,scale);  }}  }
class C{  public final Vec3 solve33(Vec3 b){  Vec3 x=new Vec3();  solve33ToOut(b,x);  return x;}  }
class C{  public boolean isBefore(long millisInstant){  return (getEndMillis() <= millisInstant);}  }
class C{  protected NetworkURLCatalogItem(INetworkLink link,CharSequence title,CharSequence summary,UrlInfoCollection<?> urls,Accessibility accessibility,int flags){  super(link,title,summary,urls,accessibility,flags);}  }
class C{  public DigestException(String msg){  super(msg);}  }
class C{  public AggregateableEvaluation(Instances data,CostMatrix costMatrix) throws Exception {  super(data,costMatrix);}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:52.746 -0500",hash_original_method="A17636F69FEFB6DDDFC5F873DED10994",hash_generated_method="60C8C0188F520A0E56A43B3C97B10639") @DSVerified @DSSafe(DSCat.UTIL_FUNCTION) public byte[] decode(byte[] array) throws DecoderException {  return decodeHex(new String(array).toCharArray());}  }
class C{  private synchronized void notifyListeners(boolean status,boolean log,boolean finished,String message){  if (m_listeners.size() > 0) {    for (int i=0; i < m_listeners.size(); i++) {      RemoteExperimentListener r=(m_listeners.elementAt(i));      r.remoteExperimentStatus(new RemoteExperimentEvent(status,log,finished,message));    }  } else {    System.err.println(message);  }}  }
class C{  public Builder bulkLoader(final String className){  configuration.setProperty(BULK_LOADER_CLASS_CFG_KEY,className);  return this;}  }
class C{  public void removeInspector(Class<?> clazz,Inspector inspector){  if (inspectors.containsKey(clazz)) {    inspectors.get(clazz).remove(inspector);  }}  }
class C{  public boolean isDistributed(){  return this.isDistributed;}  }
class C{  protected boolean canGrow(World world,BlockPos pos,IBlockState state,int height){  return world.getBlockState(pos.up()) != this && world.getBlockState(pos.up()).getMaterial() == Material.WATER && (this.maxHeight == -1 || height < this.maxHeight);}  }
class C{  public static <T>boolean moveBackward(final List<T> list,final int[] indices){  if (indices.length == 0)   return false;  Arrays.sort(indices);  if (indices[0] == 0)   return false;  for (  final int idx : indices) {    final T element=list.get(idx);    list.set(idx,list.get(idx - 1));    list.set(idx - 1,element);  }  return true;}  }
class C{  public void configure(){  Engine e=Engine.instance();  Distributor.instance().addReadingListener(e);  readerThread=new Thread(new Reader());  readerThread.start();  jmri.jmrix.rps.ActiveFlag.setActive();}  }
class C{  @Override public String push(final Request entry,CrawlProfile profile,final RobotsTxt robots) throws IOException, SpaceExceededException {  if (this.has(entry.url().hash()))   return "double occurrence";  depthCache.put(entry.url().hash(),entry.depth());  String hosthash=entry.url().hosthash();synchronized (this) {    HostQueue queue=this.queues.get(hosthash);    if (queue == null) {      queue=new HostQueue(this.hostsPath,entry.url(),this.queues.size() > this.onDemandLimit,this.exceed134217727);      this.queues.put(hosthash,queue);      robots.ensureExist(entry.url(),profile == null ? ClientIdentification.yacyInternetCrawlerAgent : profile.getAgent(),true);    }    return queue.push(entry,profile,robots);  }}  }
class C{  public XMLImporter(ProgressListener listener){  progressListener=listener;}  }
class C{  public void retrieveFile(String path,OutputStream os,int limit) throws IOException, FtpExceptionCanNotHaveDataConnection, FtpExceptionUnknownForcedDataClose, FtpExceptionControlClosedByForcedDataClose {  Socket socket=__openPassiveDataConnection(FTPCommand.RETR,path);  if (socket == null)   throw new FtpExceptionCanNotHaveDataConnection("RETR " + ((path == null) ? "" : path));  InputStream input=socket.getInputStream();  int len;  int count=0;  byte[] buf=new byte[org.apache.commons.net.io.Util.DEFAULT_COPY_BUFFER_SIZE];  while ((len=input.read(buf,0,buf.length)) != -1) {    count+=len;    if (limit >= 0 && count > limit) {      os.write(buf,0,len - (count - limit));      break;    }    os.write(buf,0,len);    os.flush();  }  socket.close();  try {    int reply=getReply();    if (!_notBadReply(reply))     throw new FtpExceptionUnknownForcedDataClose(getReplyString());  } catch (  FTPConnectionClosedException e) {    throw new FtpExceptionControlClosedByForcedDataClose(e.getMessage());  }}  }
class C{  @Override public void onBackPressed(){  File current=this.core.getCurrentFolder();  if (!this.useBackButton || current == null || current.getParent() == null || current.getPath().compareTo(this.startFolder.getPath()) == 0) {    super.onBackPressed();  } else {    this.core.loadFolder(current.getParent());  }}  }
class C{  public CodedExceptionWithHttpStatus(int status,CodedException e){  super(e.getFaultCode(),e.getFaultString());  this.faultDetail=e.getFaultDetail();  this.status=status;}  }
class C{  private Jdk14HandlerAccessor wrapHandler(Object handler,int index){  try {    if (handler == null) {      throw new IllegalArgumentException("handler is null");    }    Jdk14HandlerAccessor handlerAccessor=null;    if ("org.apache.juli.FileHandler".equals(handler.getClass().getName())) {      handlerAccessor=new JuliHandlerAccessor();    } else     if ("java.util.logging.ConsoleHandler".equals(handler.getClass().getName())) {      handlerAccessor=new Jdk14HandlerAccessor();    }    if (handlerAccessor != null) {      handlerAccessor.setLoggerAccessor(this);      handlerAccessor.setTarget(handler);      handlerAccessor.setIndex(Integer.toString(index));      handlerAccessor.setApplication(getApplication());    }    return handlerAccessor;  } catch (  Exception e) {    logger.error("Could not wrap handler: '{}'",handler,e);  }  return null;}  }
class C{  public static void checkState(boolean expression){  if (!expression) {    throw new IllegalStateException();  }}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  private TCacheEntryEventCollection<K,V> createSingleEvent(CacheEntryEvent<? extends K,? extends V> event){  List<CacheEntryEvent<? extends K,? extends V>> list=new ArrayList<>();  list.add(event);  TCacheEntryEventCollection<K,V> coll=new TCacheEntryEventCollection<>(list,event.getEventType());  return coll;}  }
class C{  public String readLine() throws IOException {  return keepCarriageReturns ? readUntilNewline() : reader.readLine();}  }
class C{  public Builder nst(){  this.withStackTrace=false;  this.stackTraceDepth=0;  return this;}  }
class C{  public boolean hasExtensions(){  return entry.hasExtensions();}  }
class C{  public void removeShutdownHook(){  if (drainOnShutdown != null)   Runtime.getRuntime().removeShutdownHook(drainOnShutdown);  if (FBUtilities.isWindows())   WindowsTimer.endTimerPeriod(DatabaseDescriptor.getWindowsTimerInterval());}  }
class C{  private boolean validateElement(InputNode node,String key) throws Exception {  String name=style.getElement(key);  InputNode child=node.getNext(name);  if (child == null) {    return true;  }  return root.validate(child);}  }
class C{  public ZapToggleButton(){  super(null,null,false);}  }
class C{  void process() throws SQLException {  int[] deck={OP_NEW_ORDER,OP_NEW_ORDER,OP_NEW_ORDER,OP_NEW_ORDER,OP_NEW_ORDER,OP_NEW_ORDER,OP_NEW_ORDER,OP_NEW_ORDER,OP_NEW_ORDER,OP_NEW_ORDER,OP_PAYMENT,OP_PAYMENT,OP_PAYMENT,OP_PAYMENT,OP_PAYMENT,OP_PAYMENT,OP_PAYMENT,OP_PAYMENT,OP_PAYMENT,OP_PAYMENT,OP_ORDER_STATUS,OP_DELIVERY,OP_STOCK_LEVEL};  int len=deck.length;  for (int i=0; i < len; i++) {    int temp=deck[i];    int j=random.getInt(0,len);    deck[i]=deck[j];    deck[j]=temp;  }  for (  int op : deck) {switch (op) {case OP_NEW_ORDER:      processNewOrder();    break;case OP_PAYMENT:  processPayment();break;case OP_ORDER_STATUS:processOrderStatus();break;case OP_DELIVERY:processDelivery();break;case OP_STOCK_LEVEL:processStockLevel();break;default :throw new AssertionError("op=" + op);}}}  }
class C{  public void testConstructor_I() throws Exception {  int[] port_invalid={-1,65536,Integer.MIN_VALUE,Integer.MAX_VALUE};  SSLServerSocket ssl=new mySSLServerSocket(0);  for (int i=0; i < port_invalid.length; i++) {    try {      new mySSLServerSocket(port_invalid[i]);      fail("IllegalArgumentException should be thrown");    } catch (    IllegalArgumentException expected) {    }  }  try {    new mySSLServerSocket(ssl.getLocalPort());    fail("IOException Expected when opening an already opened port");  } catch (  IOException expected) {  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document docAlt;  NamedNodeMap attributes;  NamedNodeMap attributesAlt;  NodeList elementList;  NodeList elementListAlt;  Element element;  Element elementAlt;  Attr attr;  Node newNode;  String nullNS=null;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagNameNS("*","address");  element=(Element)elementList.item(1);  attributes=element.getAttributes();  docAlt=(Document)load("staffNS",true);  elementListAlt=docAlt.getElementsByTagNameNS("*","address");  elementAlt=(Element)elementListAlt.item(1);  attributesAlt=elementAlt.getAttributes();  attr=(Attr)attributesAlt.getNamedItemNS(nullNS,"street");  newNode=attributesAlt.removeNamedItemNS(nullNS,"street");{    boolean success=false;    try {      newNode=attributes.setNamedItemNS(attr);    } catch (    DOMException ex) {      success=(ex.code == DOMException.WRONG_DOCUMENT_ERR);    }    assertTrue("throw_WRONG_DOCUMENT_ERR",success);  }}  }
class C{  public static boolean isSameWeek(final Date date1,final Date date2){  final Calendar cal1=Calendar.getInstance();  cal1.setFirstDayOfWeek(Calendar.MONDAY);  cal1.setTime(date1);  final Calendar cal2=Calendar.getInstance();  cal2.setFirstDayOfWeek(Calendar.MONDAY);  cal2.setTime(date2);  return cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.WEEK_OF_YEAR) == cal2.get(Calendar.WEEK_OF_YEAR);}  }
class C{  ArrayList<Node> selectElements(Node item,String sElement) throws Exception {  NodeList children=item.getChildNodes();  ArrayList<Node> nodelist=new ArrayList<Node>();  for (int iNode=0; iNode < children.getLength(); iNode++) {    Node node=children.item(iNode);    if ((node.getNodeType() == Node.ELEMENT_NODE) && node.getNodeName().equals(sElement)) {      nodelist.add(node);    }  }  return nodelist;}  }
class C{  private void initResources(){  this.storagePoolStorageSystemCache=new HashMap<String,List<String>>();  this.srcHaRecommendation=new RPRecommendation();  this.tgtHaRecommendation=new HashMap<URI,Recommendation>();  this.tgtVarrayHasHaVpool=new HashMap<VirtualArray,Boolean>();}  }
class C{  private boolean isStemmable(String term){  for (int c=0; c < term.length(); c++) {    if (!Character.isLetter(term.charAt(c))) {      return false;    }  }  return true;}  }
class C{  public ZyGraphCircularSettings(final GraphSettingsConfigItem type){  Preconditions.checkNotNull(type,"IE02010: Type argument can't be null");  m_type=type;}  }
class C{  @Override public IMatrix matrixValue(final IScope scope,final IType contentType,final boolean copy){  return GamaMatrixType.from(scope,listValue(scope,contentType,copy),contentType,null);}  }
class C{  public boolean detectNoop(){  return detectNoop;}  }
class C{  private double computeOverallProbability(SortedSet<TokenProbabilityStrength> tokenProbabilityStrengths,Map<String,Double> workCorpus){  double p=1.0;  double np=1.0;  double tempStrength=0.5;  int count=MAX_INTERESTING_TOKENS;  Iterator<TokenProbabilityStrength> iterator=tokenProbabilityStrengths.iterator();  while ((iterator.hasNext()) && (count-- > 0 || tempStrength >= INTERESTINGNESS_THRESHOLD)) {    TokenProbabilityStrength tps=iterator.next();    tempStrength=tps.strength;    double theDoubleValue=DEFAULT_TOKEN_PROBABILITY;    Double theDoubleObject=workCorpus.get(tps.token);    if (theDoubleObject != null) {      theDoubleValue=theDoubleObject;    }    p*=theDoubleValue;    np*=(1.0 - theDoubleValue);  }  return (p / (p + np));}  }
class C{  public String createPSP() throws SaaSApplicationException {  VOPSP newVoPSP=getOperatorService().savePSP(newPSP);  addMessage(null,FacesMessage.SEVERITY_INFO,INFO_PSP_CREATED,newVoPSP.getId());  newPSP=null;  return OUTCOME_SUCCESS;}  }
class C{  public Matrix4d swap(Matrix4d other){  double tmp;  tmp=m00;  m00=other.m00;  other.m00=tmp;  tmp=m01;  m01=other.m01;  other.m01=tmp;  tmp=m02;  m02=other.m02;  other.m02=tmp;  tmp=m03;  m03=other.m03;  other.m03=tmp;  tmp=m10;  m10=other.m10;  other.m10=tmp;  tmp=m11;  m11=other.m11;  other.m11=tmp;  tmp=m12;  m12=other.m12;  other.m12=tmp;  tmp=m13;  m13=other.m13;  other.m13=tmp;  tmp=m20;  m20=other.m20;  other.m20=tmp;  tmp=m21;  m21=other.m21;  other.m21=tmp;  tmp=m22;  m22=other.m22;  other.m22=tmp;  tmp=m23;  m23=other.m23;  other.m23=tmp;  tmp=m30;  m30=other.m30;  other.m30=tmp;  tmp=m31;  m31=other.m31;  other.m31=tmp;  tmp=m32;  m32=other.m32;  other.m32=tmp;  tmp=m33;  m33=other.m33;  other.m33=tmp;  byte props=properties;  this.properties=other.properties;  other.properties=props;  return this;}  }
class C{  private boolean acquireLockPermission(final DLockRequestMessage request){  if (logger.isTraceEnabled(LogMarker.DLS)) {    logger.trace(LogMarker.DLS,"[DLockGrantor.acquireLockPermission] {}",request);  }  boolean permitLockRequest=false;  if (request.getObjectName().equals(DLockService.SUSPEND_LOCKING_TOKEN)) {    permitLockRequest=acquireSuspendLockPermission(request);  } else {    permitLockRequest=acquireReadLockPermission(request);  }  return permitLockRequest;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:03.706 -0400",hash_original_method="9729F67B9F2FEFC1FCC46BDEC3EBFAEA",hash_generated_method="F14BF4961BC4377A26B87D76A08387A5") public Certificate engineGenerateCertificate(InputStream inStream) throws CertificateException {  if (inStream == null) {    throw new CertificateException("inStream == null");  }  try {    if (!inStream.markSupported()) {      inStream=new RestoringInputStream(inStream);    }    inStream.mark(1);    if (inStream.read() == '-') {      return getCertificate(decodePEM(inStream,CERT_BOUND_SUFFIX));    } else {      inStream.reset();      return getCertificate(inStream);    }  } catch (  IOException e) {    throw new CertificateException(e);  }}  }
class C{  public KeySelectorException(){  super();}  }
class C{  public static void frustumM(double[] m,int offset,double left,double right,double bottom,double top,double near,double far){  if (left == right) {    throw new IllegalArgumentException("left == right");  }  if (top == bottom) {    throw new IllegalArgumentException("top == bottom");  }  if (near == far) {    throw new IllegalArgumentException("near == far");  }  if (near <= 0.0) {    throw new IllegalArgumentException("near <= 0.0");  }  if (far <= 0.0) {    throw new IllegalArgumentException("far <= 0.0");  }  final double r_width=1.0 / (right - left);  final double r_height=1.0 / (top - bottom);  final double r_depth=1.0 / (near - far);  final double x=2.0 * (near * r_width);  final double y=2.0 * (near * r_height);  final double A=(right + left) * r_width;  final double B=(top + bottom) * r_height;  final double C=(far + near) * r_depth;  final double D=2.0 * (far * near * r_depth);  m[offset + 0]=x;  m[offset + 5]=y;  m[offset + 8]=A;  m[offset + 9]=B;  m[offset + 10]=C;  m[offset + 14]=D;  m[offset + 11]=-1.0;  m[offset + 1]=0.0;  m[offset + 2]=0.0;  m[offset + 3]=0.0;  m[offset + 4]=0.0;  m[offset + 6]=0.0;  m[offset + 7]=0.0;  m[offset + 12]=0.0;  m[offset + 13]=0.0;  m[offset + 15]=0.0;}  }
class C{  public String classIndexTipText(){  return "Sets the class index (\"first\" and \"last\" are valid values)";}  }
class C{  private boolean verificaFechaInicialReserva(ConsultaVO consulta){  boolean result=false;  if (consulta.getEstado() == ConsultasConstants.ESTADO_CONSULTA_RESERVADA) {    if (consulta.getFinicialreserva() != null) {      if (DateUtils.esHoy(consulta.getFinicialreserva()))       result=true;    }  }  return result;}  }
class C{  public void send(Object object){  send(DiscordUtils.GSON.toJson(object));}  }
class C{  public String retryFailedPaymentProcesses() throws OrganizationAuthoritiesException {  boolean result=getOperatorService().retryFailedPaymentProcesses();  return getOutcome(result);}  }
class C{  private static File parseFileName(Host host,final String value){  try {    StringBuilder rc=new StringBuilder();    for (int i=0; i < value.length(); i++) {      char ch=value.charAt(i);      if (i == 0 && ch == '~') {        rc.append(USER_HOME);        continue;      }      if (ch == '%' && i + 1 < value.length()) {        i++;switch (value.charAt(i)) {case '%':          rc.append('%');        break;case 'd':      rc.append(USER_HOME);    break;case 'h':  rc.append(host.getHostName());break;case 'l':rc.append(InetAddress.getLocalHost().getHostName());break;case 'r':rc.append(host.getUser());break;default :rc.append('%');rc.append(ch);break;}}rc.append(ch);}return new File(rc.toString());} catch (UnknownHostException e) {return null;}}  }
class C{  public static long sizeOfFields(Class clazz){  return sizeOf(clazz) - firstFieldOffset(clazz);}  }
class C{  public LongRangeValidatorTestCase(String name){  super(name);}  }
class C{  public void cancelAll(){  if (DBG)   Log.v(TAG,"prepare to cancel all");  cancelSchedule(ARRIVE);  schedule(CANCEL_ALL,0,0,null,0);}  }
class C{  private boolean loadWithInspectItClassLoader(String className){  return className.startsWith(CLASS_NAME_PREFIX);}  }
class C{  private void locate() throws ClientProtocolException, IllegalStateException, IOException, ParserConfigurationException, SAXException, NoRoutesException, URISyntaxException, BadAddressException {  Document response=getResponse(getRequest());  String markersText=allResponse.split("markers:")[1];  markersText=markersText.substring(0,markersText.indexOf("]}"));  String[] markersParts=markersText.split("latlng:\\{lat:");  Coord originLocation=new Coord(Double.parseDouble(markersParts[1].substring(0,markersParts[1].indexOf(",lng:"))),Double.parseDouble(markersParts[1].substring(markersParts[1].indexOf(",lng:") + 5,markersParts[1].indexOf("}"))));  Coord destinationLocation=new Coord(Double.parseDouble(markersParts[2].substring(0,markersParts[2].indexOf(",lng:"))),Double.parseDouble(markersParts[2].substring(markersParts[2].indexOf(",lng:") + 5,markersParts[2].indexOf("}"))));  NodeList results=null;switch (modeOption) {case DRIVING:    results=response.getElementsByTagName("li");  for (int i=0; i < results.getLength(); i++) {    String textTime=((Element)((Element)results.item(i)).getElementsByTagName("div").item(0)).getElementsByTagName("div").item(1).getChildNodes().item(0).getNodeValue();    routes.add(new Route(originLocation,destinationLocation,calculateSeconds(textTime)));  }break;case WALKING:results=response.getElementsByTagName("li");for (int i=0; i < results.getLength(); i++) {String textTime=((Element)((Element)results.item(i)).getElementsByTagName("div").item(0)).getElementsByTagName("div").item(1).getChildNodes().item(0).getNodeValue();routes.add(new Route(originLocation,destinationLocation,calculateSeconds(textTime)));}break;case PUBLIC_TRANSIT:NodeList alternatives=response.getChildNodes().item(0).getChildNodes();for (int r=0; r < alternatives.getLength(); r++) {NodeList alternativeParts=alternatives.item(r).getChildNodes();String textTime=alternativeParts.item(1).getChildNodes().item(1).getChildNodes().item(1).getChildNodes().item(1).getChildNodes().item(0).getNodeValue();PublicTransitRoute publicTransitRoute=new PublicTransitRoute(originLocation,destinationLocation,calculateSeconds(textTime));List<String> points=new ArrayList<String>();List<Mode> modes=new ArrayList<Mode>();List<String> originStationIds=new ArrayList<String>();List<String> destinationStationIds=new ArrayList<String>();List<String> vehicleRouteIds=new ArrayList<String>();points.add(origin);NodeList legs=alternativeParts.item(0).getChildNodes();for (int i=1; i < legs.getLength(); i+=2) {String info=legs.item(i).getTextContent();Mode modeA=null;for (Mode mode : Mode.values()) if (info.toUpperCase().startsWith(mode.name())) {modeA=mode;break;}modes.add(modeA);if (modeA.equals(Mode.WALK)) {originStationIds.add(null);destinationStationIds.add(null);vehicleRouteIds.add(null);String legDestination=info.substring(8,info.indexOf("About "));points.add(legDestination);} else {String[] infoParts=info.split("-");vehicleRouteIds.add(infoParts[1].trim());String[] infoParts2=info.split(" Arrive ");String[] infoParts3=infoParts2[0].split(" \\(Stop ID: ");String[] infoParts4=infoParts2[1].split(" \\(Stop ID: ");if (infoParts4.length > 1) {points.add(infoParts4[0]);originStationIds.add(infoParts3[1].substring(0,infoParts4[1].indexOf(')')));destinationStationIds.add(infoParts4[1].substring(0,infoParts4[1].indexOf(')')));} else {points.add(infoParts2[1].split("PreviousZoom")[0]);originStationIds.add(null);destinationStationIds.add(null);}}}try {publicTransitRoute.addLegs(points,modes,originStationIds,destinationStationIds,vehicleRouteIds);} catch (Exception e) {e.printStackTrace();}routes.add(publicTransitRoute);}break;}}  }
class C{  public void testPosPosFirstLonger(){  byte aBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};  byte bBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  int aSign=1;  int bSign=1;  byte rBytes[]={0,-2,-76,88,44,1,2,17,35,16,9,2,5,6,21};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.and(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  protected void doStateUnloadQueue(){  double colonyNectarNeed=getSimulation().colonyNectarNeed;  double costs=foragingCosts * 5.8;  double gain=((nectarLoad - foragingCosts) * sourceConcentration / 1000) * 5.8;  double individuality=.8 + ((r.nextDouble() * 20) / 100);  sourceQuality=gain / (costs + 1);  dancingThreshold=(individuality * sourceQuality) + (20 - colonyNectarNeed);  dancingThreshold=Math.max(0,dancingThreshold);  double honey=nectarToHoney(nectarLoad);  honey/=1000;  honey*=sourceConcentration;  hive.storeHoney(honey);  nectarLoad=0;  headTo(hive);  receptive=true;  if (foodSource != null) {    setColor(foodSource.getColor());    setState(State.inHiveWithInfo);  }  if (foodSource == null) {    setState(State.inHiveWithoutInfo);  }}  }
class C{  public boolean hasRight(Table table,int rightMask){  if (rightMask != Right.SELECT && !systemUser && table != null) {    table.checkWritingAllowed();  }  if (admin) {    return true;  }  Role publicRole=database.getPublicRole();  if (publicRole.isRightGrantedRecursive(table,rightMask)) {    return true;  }  if (table instanceof MetaTable || table instanceof RangeTable) {    return true;  }  if (table != null) {    if (hasRight(null,Right.ALTER_ANY_SCHEMA)) {      return true;    }    String tableType=table.getTableType();    if (Table.VIEW.equals(tableType)) {      TableView v=(TableView)table;      if (v.getOwner() == this) {        return true;      }    } else     if (tableType == null) {      return true;    }    if (table.isTemporary() && !table.isGlobalTemporary()) {      return true;    }  }  if (isRightGrantedRecursive(table,rightMask)) {    return true;  }  return false;}  }
class C{  public static boolean referencesNonLocalCgs(BlockConsistencyGroup cg,DbClient dbClient){  List<StorageSystem> storageSystems=getVPlexStorageSystems(cg,dbClient);  boolean referencesCgs=false;  if (storageSystems != null && !storageSystems.isEmpty()) {    for (    StorageSystem storageSystem : storageSystems) {      StringSet cgs=cg.getSystemConsistencyGroups().get(storageSystem.getId().toString());      if (cgs != null && !cgs.isEmpty()) {        referencesCgs=true;        break;      }    }  }  return referencesCgs;}  }
class C{  public static void assertSize(ICalComponent component,int subComponents,int properties){  assertEquals(subComponents,component.getComponents().size());  assertEquals(properties,component.getProperties().size());}  }
class C{  public void visitLabel(Label label){  if (mv != null) {    mv.visitLabel(label);  }}  }
class C{  @SuppressWarnings({"UnusedDeclaration"}) public DoNothingCloud(CloudPlugin plugin,BugCollection bc,Properties props){  this.plugin=plugin;  this.bugCollection=bc;}  }
class C{  public void run(String[] args){  parseArgs(args);  banner();  try (Connection c=new ConnectionFactory(url).createConnection()){    start=System.nanoTime();    int received=0;    Message msg=null;    byte[] reply=null;    try {      for (int i=0; i < count; i++) {        msg=c.request(subject,payload,10000);        if (msg == null) {          break;        }        received++;        reply=msg.getData();        if (reply != null) {          System.out.println("Got reply: " + new String(reply));        } else {          System.out.println("Got reply with null payload");        }      }    } catch (    Exception e) {      e.printStackTrace();    }    end=System.nanoTime();    elapsed=TimeUnit.NANOSECONDS.toSeconds(end - start);    System.out.printf("Completed %d requests in %d seconds ",received,elapsed);    if (elapsed > 0) {      System.out.printf("(%d msgs/second).\n",(received / elapsed));    } else {      System.out.println();      System.out.println("Test not long enough to produce meaningful stats. " + "Please increase the message count (-count n)");    }    printStats(c);  } catch (  IOException|TimeoutException e) {    System.err.println("Couldn't connect: " + e.getMessage());    System.exit(-1);  }}  }
class C{  protected void refactorUsingHandler(@NotNull final RefactoringActionHandler handler){  final Editor editor=myFixture.getEditor();  assertInstanceOf(editor,EditorEx.class);  handler.invoke(myFixture.getProject(),editor,myFixture.getFile(),((EditorEx)editor).getDataContext());}  }
class C{  public void clearLinks(){  links.clear();}  }
class C{  private void prepare(int consumers){  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(numConsumersWaiting == 0);  setNumConsumers(consumers);  clearCompletionFlag();}  }
class C{  @CanIgnoreReturnValue @Deprecated @Override public ImmutableSet<V> removeAll(Object key){  throw new UnsupportedOperationException();}  }
class C{  public void queueThread(WaitingThread wt){  if (wt == null) {    throw new IllegalArgumentException("Waiting thread must not be null.");  }  this.waitingThreads.add(wt);}  }
class C{  public static boolean compareDates(final java.util.Date startDate,final java.util.Date endDate){  if (startDate == null)   return false;  if (endDate == null)   return true;  if (endDate.before(startDate))   return false;  return true;}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY);  builder.addAttribute(LABEL);  builder.addAttribute(PRIMARY);  builder.addAttribute(REL);  builder.addElement(OrgDepartment.KEY);  builder.addElement(OrgJobDescription.KEY);  builder.addElement(OrgName.KEY);  builder.addElement(OrgSymbol.KEY);  builder.addElement(OrgTitle.KEY);  builder.addElement(Where.KEY);}  }
class C{  public void checkNumberArgs(int argNum) throws WrongNumberArgsException {  if (argNum != 0)   reportWrongNumberArgs();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public EditorCreatorComposed(EditorCreator... editors){  m_editors=editors;}  }
class C{  public TLongIntIterator(TLongIntHashMap map){  super(map);  _map=map;}  }
class C{  @RequestMapping(method=RequestMethod.POST) public String postToBiggerForm(@ModelAttribute("updatePodcastByFeedUrlForm") PodcastByFeedUrlForm podcastByFeedUrlForm,Model model,final RedirectAttributes redirectAttributes){  redirectAttributes.addFlashAttribute("updatePodcastOwnMetadataByFeedUrlForm",podcastByFeedUrlForm);  return "redirect:/admin/update/metadata/details";}  }
class C{  public boolean searchMatrixBest(int[][] matrix,int target){  if (matrix == null || matrix.length == 0 || matrix[0].length == 0)   return false;  int m=matrix.length;  int n=matrix[0].length;  int left=0;  int right=m * n - 1;  int mid;  while (left <= right) {    mid=left + (right - left) / 2;    if (matrix[mid / m][mid % m] == target)     return true; else     if (matrix[mid / m][mid % m] > target)     right=mid - 1; else     left=mid + 1;  }  return false;}  }
class C{  @Override public boolean equals(final Object obj){  if (!(obj instanceof FastDateFormat)) {    return false;  }  final FastDateFormat other=(FastDateFormat)obj;  return printer.equals(other.printer);}  }
class C{  public Object nextValue() throws JSONException {  char c=this.nextClean();  String string;switch (c) {case '"':case '\'':    return this.nextString(c);case '{':  this.back();return new JSONObject(this);case '[':this.back();return new JSONArray(this);}StringBuffer sb=new StringBuffer();while (c >= ' ' && ",:]}/\\\"[{;=#".indexOf(c) < 0) {sb.append(c);c=this.next();}this.back();string=sb.toString().trim();if ("".equals(string)) {throw this.syntaxError("Missing value");}return JSONObject.stringToValue(string);}  }
class C{  public Message(int numberOfParts,Version destVersion){  this.version=destVersion;  Assert.assertTrue(destVersion != null,"Attempt to create an unversioned message");  partsList=new Part[numberOfParts];  this.numberOfParts=numberOfParts;  for (int i=0; i < partsList.length; i++) {    partsList[i]=new Part();  }}  }
class C{  public TechnicalServiceNotAliveException(String message){  super(message);}  }
class C{  public Task create(String parentId,String parentKind,VirtualNetworkCreateSpec spec) throws ExternalException {  if (spec.getReservedStaticIpSize() + DEFAULT_RESERVED_IP_LIST_SIZE > spec.getSize()) {    throw new InvalidReservedStaticIpSizeException(String.format("Static IP size (%s) exceeds total IP size (%s) minus reserved IP size (%s)",spec.getReservedStaticIpSize(),spec.getSize(),DEFAULT_RESERVED_IP_LIST_SIZE));  }  CreateVirtualNetworkWorkflowDocument startState=new CreateVirtualNetworkWorkflowDocument();  startState.parentId=parentId;  startState.parentKind=parentKind;  startState.name=spec.getName();  startState.description=spec.getDescription();  startState.routingType=spec.getRoutingType();  startState.size=spec.getSize();  startState.reservedStaticIpSize=spec.getReservedStaticIpSize();  CreateVirtualNetworkWorkflowDocument finalState=backendClient.post(CreateVirtualNetworkWorkflowService.FACTORY_LINK,startState).getBody(CreateVirtualNetworkWorkflowDocument.class);  return TaskUtils.convertBackEndToFrontEnd(finalState.taskServiceState);}  }
class C{  Calendar toCalendar(String value,String pattern,Locale locale){  Calendar calendar=null;  try {    DateFormat format=(locale == null) ? new SimpleDateFormat(pattern) : new SimpleDateFormat(pattern,locale);    format.setLenient(false);    format.parse(value);    calendar=format.getCalendar();  } catch (  Exception e) {    fail("Error creating Calendar value ='" + value + ", pattern='"+ pattern+ "' "+ e.toString());  }  return calendar;}  }
class C{  public Role(String name){  super(name);  Assert.hasText(name,"Not allowed to create a Role with an empty name");}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == AnnotableElement.class) {switch (baseOperationID) {case N4JSPackage.ANNOTABLE_ELEMENT___GET_ANNOTATIONS:      return N4JSPackage.PROPERTY_ASSIGNMENT_ANNOTATION_LIST___GET_ANNOTATIONS;default :    return -1;}}if (baseClass == VariableEnvironmentElement.class) {switch (baseOperationID) {case N4JSPackage.VARIABLE_ENVIRONMENT_ELEMENT___APPLIES_ONLY_TO_BLOCK_SCOPED_ELEMENTS:  return N4JSPackage.PROPERTY_ASSIGNMENT_ANNOTATION_LIST___APPLIES_ONLY_TO_BLOCK_SCOPED_ELEMENTS;default :return -1;}}if (baseClass == NamedElement.class) {switch (baseOperationID) {case N4JSPackage.NAMED_ELEMENT___GET_NAME:return N4JSPackage.PROPERTY_ASSIGNMENT_ANNOTATION_LIST___GET_NAME;default :return -1;}}if (baseClass == PropertyNameOwner.class) {switch (baseOperationID) {case N4JSPackage.PROPERTY_NAME_OWNER___GET_NAME:return N4JSPackage.PROPERTY_ASSIGNMENT_ANNOTATION_LIST___GET_NAME;case N4JSPackage.PROPERTY_NAME_OWNER___IS_VALID_NAME:return N4JSPackage.PROPERTY_ASSIGNMENT_ANNOTATION_LIST___IS_VALID_NAME;default :return -1;}}if (baseClass == TypableElement.class) {switch (baseOperationID) {default :return -1;}}if (baseClass == PropertyAssignment.class) {switch (baseOperationID) {case N4JSPackage.PROPERTY_ASSIGNMENT___GET_DEFINED_MEMBER:return N4JSPackage.PROPERTY_ASSIGNMENT_ANNOTATION_LIST___GET_DEFINED_MEMBER;case N4JSPackage.PROPERTY_ASSIGNMENT___IS_VALID_NAME:return N4JSPackage.PROPERTY_ASSIGNMENT_ANNOTATION_LIST___IS_VALID_NAME;default :return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public static int dpToPx(Context context,float dp){  return (int)applyDimension(context,TypedValue.COMPLEX_UNIT_DIP,dp);}  }
class C{  public CharSeq replaceAll(String regex,String replacement){  return CharSeq.of(str.replaceAll(regex,replacement));}  }
class C{  public PositionBasedCompletionProposal(String replacementString,Position replacementPosition,int cursorPosition,Image image,String displayString,IContextInformation contextInformation,String additionalProposalInfo){  Assert.isNotNull(replacementString);  Assert.isTrue(replacementPosition != null);  fReplacementString=replacementString;  fReplacementPosition=replacementPosition;  fCursorPosition=cursorPosition;  fImage=image;  fDisplayString=displayString;  fContextInformation=contextInformation;  fAdditionalProposalInfo=additionalProposalInfo;}  }
class C{  public int copyLinesFrom(MJournal fromJournal,Timestamp dateAcct,char typeCR){  if (isProcessed() || fromJournal == null)   return 0;  int count=0;  MJournalLine[] fromLines=fromJournal.getLines(false);  for (int i=0; i < fromLines.length; i++) {    MJournalLine toLine=new MJournalLine(getCtx(),0,fromJournal.get_TrxName());    PO.copyValues(fromLines[i],toLine,getAD_Client_ID(),getAD_Org_ID());    toLine.setGL_Journal_ID(getGL_Journal_ID());    if (dateAcct != null)     toLine.setDateAcct(dateAcct);    if (typeCR == 'C') {      toLine.setAmtSourceDr(fromLines[i].getAmtSourceDr().negate());      toLine.setAmtSourceCr(fromLines[i].getAmtSourceCr().negate());    } else     if (typeCR == 'R') {      toLine.setAmtSourceDr(fromLines[i].getAmtSourceCr());      toLine.setAmtSourceCr(fromLines[i].getAmtSourceDr());    }    toLine.setIsGenerated(true);    toLine.setProcessed(false);    if (toLine.save())     count++;  }  if (fromLines.length != count)   log.log(Level.SEVERE,"Line difference - JournalLines=" + fromLines.length + " <> Saved="+ count);  return count;}  }
class C{  public JsonObject add(String name,boolean value){  add(name,valueOf(value));  return this;}  }
class C{  public void testEqualsNonModel(){  MockModel model=new MockModel();  assertFalse(model.equals("Dummy"));  assertFalse(model.equals(null));}  }
class C{  public WrappedGTestResultParser(String testRunName,ITestRunListener listener){  super(testRunName,listener);}  }
class C{  public void copyVideoData(Video v,OutputStream out) throws IOException {  Path source=getVideoPath(v);  if (!Files.exists(source)) {    throw new FileNotFoundException("Unable to find the referenced video file for videoId:" + v.getId());  }  Files.copy(source,out);}  }
class C{  public void removeListener(final ISpecialInstructionsModelListener listener){  m_listeners.removeListener(listener);}  }
class C{  void info(Throwable t,String s){  if (isEnabled(TraceSystem.INFO)) {    traceWriter.write(TraceSystem.INFO,s,t);  }}  }
class C{  public static void fail(int errorCode){  throw new RuntimeException(MP.getMessage(errorCode));}  }
class C{  public void keyPressed(KeyEvent e){  if (e.getKeyCode() == KeyEvent.VK_ENTER)   m_adaptee.keyPressed(e);}  }
class C{  @Override public int hashCode(){  int result=127;  result=HashUtilities.hashCode(result,this.formatString);  result=HashUtilities.hashCode(result,this.xFormat);  result=HashUtilities.hashCode(result,this.xDateFormat);  result=HashUtilities.hashCode(result,this.yFormat);  result=HashUtilities.hashCode(result,this.yDateFormat);  return result;}  }
class C{  public ListIterator<E> listIterator(){  return new ListItr(0);}  }
class C{  public Picnic(){  super();}  }
class C{  public final void trim(){  setDataCapacity(this.size << 1);}  }
class C{  void acceptTrade(){  RPAction action=makeAction();  action.put("action","deal");  ClientSingletonRepository.getClientFramework().send(action);}  }
class C{  protected Node newNode(){  return new SVGOMFlowDivElement();}  }
class C{  public static void main(String... argv) throws IOException {  run(System.out,argv);  System.out.println();}  }
class C{  public boolean isPrintHeader(){  return m_printHeader;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:38.264 -0500",hash_original_method="664E69D53BABC0BD392ABB3CB5A666E2",hash_generated_method="F4D1F0DC18534DC85E2667018E84D6C0") public static final void writeExceptionToParcel(Parcel reply,Exception e){  int code=0;  boolean logException=true;  if (e instanceof FileNotFoundException) {    code=1;    logException=false;  } else   if (e instanceof IllegalArgumentException) {    code=2;  } else   if (e instanceof UnsupportedOperationException) {    code=3;  } else   if (e instanceof SQLiteAbortException) {    code=4;  } else   if (e instanceof SQLiteConstraintException) {    code=5;  } else   if (e instanceof SQLiteDatabaseCorruptException) {    code=6;  } else   if (e instanceof SQLiteFullException) {    code=7;  } else   if (e instanceof SQLiteDiskIOException) {    code=8;  } else   if (e instanceof SQLiteException) {    code=9;  } else   if (e instanceof OperationApplicationException) {    code=10;  } else {    reply.writeException(e);    Log.e(TAG,"Writing exception to parcel",e);    return;  }  reply.writeInt(code);  reply.writeString(e.getMessage());  if (logException) {    Log.e(TAG,"Writing exception to parcel",e);  }}  }
class C{  protected String doIt(){  PreparedStatement pstmt=null;  ResultSet rs=null;  String sql="INSERT into T_Reconciliation " + "(AD_Client_ID, AD_Org_ID, Created, CreatedBy, Updated, UpdatedBy, " + "IsActive, Fact_Acct_ID,  "+ "AD_PInstance_ID, MatchCode) "+ "SELECT f.AD_Client_ID, f.AD_Org_ID, f.Created, f.CreatedBy, "+ "f.Updated, f.UpdatedBy, f.IsActive, "+ "f.Fact_Acct_ID, ?, r.MatchCode "+ "FROM Fact_Acct f "+ "LEFT OUTER JOIN Fact_Reconciliation r ON (f.Fact_Acct_ID=r.Fact_Acct_ID) "+ "WHERE Account_ID = ? "+ "AND DateAcct BETWEEN  ? AND ? ";  try {    pstmt=DB.prepareStatement(sql,get_TrxName());    pstmt.setInt(1,getAD_PInstance_ID());    pstmt.setInt(2,p_Account_ID);    pstmt.setTimestamp(3,p_DateAcct_From);    pstmt.setTimestamp(4,p_DateAcct_To);    int count=pstmt.executeUpdate();    String result=Msg.getMsg(getCtx(),"@Created@") + ": " + count+ ", ";    log.log(Level.FINE,result);    sql="DELETE FROM T_Reconciliation t " + "WHERE (SELECT SUM(f.amtacctdr-f.amtacctcr) FROM T_Reconciliation r " + "    INNER JOIN Fact_Acct f ON (f.Fact_Acct_ID = r.Fact_Acct_ID) "+ "       WHERE r.MatchCode=t.MatchCode"+ "       AND r.AD_PInstance_ID = t.AD_PInstance_ID) = 0 "+ "AND t.AD_PInstance_ID = ?";    pstmt=DB.prepareStatement(sql,get_TrxName());    pstmt.setInt(1,getAD_PInstance_ID());    count=pstmt.executeUpdate();    result=Msg.getMsg(getCtx(),"@Deleted@") + ": " + count;    log.log(Level.FINE,result);  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);    return e.getLocalizedMessage();  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  log.fine((System.currentTimeMillis() - m_start) + " ms");  return "";}  }
class C{  public static void addThermalEvaporationRecipe(FluidStack input,FluidStack output){  try {    Class recipeClass=Class.forName("mekanism.common.recipe.RecipeHandler");    Method m=recipeClass.getMethod("addThermalEvaporationRecipe",FluidStack.class,FluidStack.class);    m.invoke(null,input,output);  } catch (  Exception e) {    System.err.println("Error while adding recipe: " + e.getMessage());  }}  }
class C{  @SuppressWarnings("unchecked") public ListIterator<AbstractInsnNode> iterator(int index){  return new InsnListIterator(index);}  }
class C{  public void sort(ArrayList<Value[]> rows){  Collections.sort(rows,this);}  }
class C{  public double doOperation() throws OperatorFailedException {  double logq;  final double alpha=(arctanTransform ? Math.atan(bias) * SCALE_ALPHA : Math.log(bias));  final NodeRef root=tree.getRoot();  double maxHeight=tree.getNodeHeight(root);  NodeRef i;  NodeRef iP=null;  NodeRef CiP=null;  NodeRef PiP=null;  double height=Double.NaN;  List<NodeRef> destinations=null;  do {    i=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));  } while (root == i || tree.getParent(i) == root);  iP=tree.getParent(i);  CiP=getOtherChild(tree,iP,i);  PiP=tree.getParent(iP);  height=tree.getNodeHeight(iP);  destinations=getIntersectingEdges(tree,height);  if (destinations.size() == 0) {    throw new OperatorFailedException("No destinations found");  }  double[] pdf=getDestinationProbabilities(tree,i,height,maxHeight,destinations,alpha);  destinations.remove(i);  destinations.remove(CiP);  int r=MathUtils.randomChoicePDF(pdf);  double forwardProbability=pdf[r];  final NodeRef j=destinations.get(r);  final NodeRef jP=tree.getParent(j);  tree.beginTreeEdit();  tree.removeChild(iP,CiP);  tree.removeChild(PiP,iP);  tree.addChild(PiP,CiP);  tree.removeChild(jP,j);  tree.addChild(iP,j);  tree.addChild(jP,iP);  tree.endTreeEdit();  final List<NodeRef> reverseDestinations=getIntersectingEdges(tree,height);  double reverseProbability=getReverseProbability(tree,CiP,j,height,maxHeight,reverseDestinations,alpha);  logq=Math.log(reverseProbability) - Math.log(forwardProbability);  return logq;}  }
class C{  public synchronized void soften(CtClass clazz){  if (repository.isPrune())   clazz.prune();  classes.remove(clazz.getName());  softcache.put(clazz.getName(),clazz);}  }
class C{  private static boolean isNaturalDocOrder(Compiler compiler,int stepOpCodePos,int stepIndex,int analysis) throws javax.xml.transform.TransformerException {  if (canCrissCross(analysis))   return false;  if (isSet(analysis,BIT_NAMESPACE))   return false;  if (isSet(analysis,BIT_FOLLOWING | BIT_FOLLOWING_SIBLING) && isSet(analysis,BIT_PRECEDING | BIT_PRECEDING_SIBLING))   return false;  int stepType;  int stepCount=0;  boolean foundWildAttribute=false;  int potentialDuplicateMakingStepCount=0;  while (OpCodes.ENDOP != (stepType=compiler.getOp(stepOpCodePos))) {    stepCount++;switch (stepType) {case OpCodes.FROM_ATTRIBUTES:case OpCodes.MATCH_ATTRIBUTE:      if (foundWildAttribute)       return false;    String localName=compiler.getStepLocalName(stepOpCodePos);  if (localName.equals("*")) {    foundWildAttribute=true;  }break;case OpCodes.FROM_FOLLOWING:case OpCodes.FROM_FOLLOWING_SIBLINGS:case OpCodes.FROM_PRECEDING:case OpCodes.FROM_PRECEDING_SIBLINGS:case OpCodes.FROM_PARENT:case OpCodes.OP_VARIABLE:case OpCodes.OP_EXTFUNCTION:case OpCodes.OP_FUNCTION:case OpCodes.OP_GROUP:case OpCodes.FROM_NAMESPACE:case OpCodes.FROM_ANCESTORS:case OpCodes.FROM_ANCESTORS_OR_SELF:case OpCodes.MATCH_ANY_ANCESTOR:case OpCodes.MATCH_IMMEDIATE_ANCESTOR:case OpCodes.FROM_DESCENDANTS_OR_SELF:case OpCodes.FROM_DESCENDANTS:if (potentialDuplicateMakingStepCount > 0) return false;potentialDuplicateMakingStepCount++;case OpCodes.FROM_ROOT:case OpCodes.FROM_CHILDREN:case OpCodes.FROM_SELF:if (foundWildAttribute) return false;break;default :throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NULL_ERROR_HANDLER,new Object[]{Integer.toString(stepType)}));}int nextStepOpCodePos=compiler.getNextStepPos(stepOpCodePos);if (nextStepOpCodePos < 0) break;stepOpCodePos=nextStepOpCodePos;}return true;}  }
class C{  public SimpleTimeZone(int rawOffset,String ID){  this.rawOffset=rawOffset;  setID(ID);  dstSavings=millisPerHour;}  }
class C{  public synchronized final int evictionCount(){  return evictionCount;}  }
class C{  @Override public synchronized void updateDouble(String columnName,double x) throws SQLException {  updateDouble(findColumn(columnName),x);}  }
class C{  private void createQoSRules(){  JsonObject settings=new JsonObject();  JsonObject config=new JsonObject();  JsonObject sentinels=new JsonObject();  JsonObject rules=new JsonObject();  config.put("percentile",75);  config.put("quorum",40);  config.put("period",3);  config.put("minSampleCount",1000);  config.put("minSentinelCount",5);  settings.put("config",config);  JsonObject sentinel1=new JsonObject();  sentinel1.put("percentile",50);  JsonObject sentinel2=new JsonObject();  JsonObject sentinel3=new JsonObject();  JsonObject sentinel4=new JsonObject();  JsonObject sentinel5=new JsonObject();  sentinels.put("sentinelA",sentinel1);  sentinels.put("sentinelB",sentinel2);  sentinels.put("sentinelC",sentinel3);  sentinels.put("sentinelD",sentinel4);  sentinels.put("sentinelE",sentinel5);  settings.put("sentinels",sentinels);  JsonObject rule1=new JsonObject();  rule1.put("reject",1.3);  rule1.put("warn",1.1);  rules.put("/playground/myapi1/v1/.*",rule1);  JsonObject rule2=new JsonObject();  rule2.put("reject",1.7);  rules.put("/playground/myapi2/v1/.*",rule2);  settings.put("rules",rules);  given().body(settings.toString()).put("server/admin/v1/qos").then().assertThat().statusCode(200);}  }
class C{  public void destroy(){  ActivityManager.stopThread();}  }
class C{  public int shrinkReferences(){  final int oldsize=size();  final int diff=oldsize - maxReferences;  if (maxReferences <= 0 || diff <= 0)   return 0;synchronized (this) {    final int[] indexes=oldPostions(diff);    Arrays.sort(indexes);    for (int i=indexes.length - 1; i >= 0; i--) {      if (indexes[i] < 0)       break;      removeRow(indexes[i],false);    }    sort();  }  trim();  return oldsize - size();}  }
class C{  public boolean loadDeferred(){  return false;}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) public static Match maskL4AndUp(Match m){  Match.Builder mb=m.createBuilder();  Iterator<MatchField<?>> itr=m.getMatchFields().iterator();  while (itr.hasNext()) {    MatchField mf=itr.next();    if (mf.equals(MatchField.IN_PORT) || mf.equals(MatchField.ETH_TYPE) || mf.equals(MatchField.ETH_SRC)|| mf.equals(MatchField.ETH_DST)|| mf.equals(MatchField.IPV4_SRC)|| mf.equals(MatchField.IPV4_DST)|| mf.equals(MatchField.IP_PROTO)) {      if (m.isExact(mf)) {        mb.setExact(mf,m.get(mf));      } else       if (m.isPartiallyMasked(mf)) {        mb.setMasked(mf,m.getMasked(mf));      } else {      }    }  }  return mb.build();}  }
class C{  @Override public void onMapClick(LatLng latLng){  WritableMap event=Arguments.createMap();  WritableMap data=Arguments.createMap();  data.putDouble("latitude",latLng.latitude);  data.putDouble("longitude",latLng.longitude);  event.putString("event","didTapAtCoordinate");  event.putMap("data",data);  reactContext.getJSModule(RCTEventEmitter.class).receiveEvent(mapView.getId(),"topChange",event);}  }
class C{  @SuppressWarnings("unchecked") private E removeAt(int i){  modCount++;  int s=--size;  if (s == i)   queue[i]=null; else {    E moved=(E)queue[s];    queue[s]=null;    siftDown(i,moved);    if (queue[i] == moved) {      siftUp(i,moved);      if (queue[i] != moved)       return moved;    }  }  return null;}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  public IgniteTask(String host,double cpuCores,double mem,double disk){  this.host=host;  this.cpuCores=cpuCores;  this.mem=mem;  this.disk=disk;}  }
class C{  private DataSet simulateDataNonNormal(SemIm semIm,int sampleSize,List<Distribution> distributions){  List<Node> variables=new LinkedList<>();  List<Node> variableNodes=semIm.getSemPm().getVariableNodes();  for (  Node node : variableNodes) {    ContinuousVariable var=new ContinuousVariable(node.getName());    variables.add(var);  }  DataSet dataSet=new ColtDataSet(sampleSize,variables);  SemGraph graph=semIm.getSemPm().getGraph();  List<Node> tierOrdering=graph.getCausalOrdering();  int[] tierIndices=new int[variableNodes.size()];  for (int i=0; i < tierIndices.length; i++) {    tierIndices[i]=variableNodes.indexOf(tierOrdering.get(i));  }  int[][] _parents=new int[variables.size()][];  for (int i=0; i < variableNodes.size(); i++) {    Node node=variableNodes.get(i);    List<Node> parents=graph.getParents(node);    for (Iterator<Node> j=parents.iterator(); j.hasNext(); ) {      Node _node=j.next();      if (_node.getNodeType() == NodeType.ERROR) {        j.remove();      }    }    _parents[i]=new int[parents.size()];    for (int j=0; j < parents.size(); j++) {      Node _parent=parents.get(j);      _parents[i][j]=variableNodes.indexOf(_parent);    }  }  for (int row=0; row < sampleSize; row++) {    for (int i=0; i < tierOrdering.size(); i++) {      int col=tierIndices[i];      Distribution distribution=distributions.get(col);      double value=distribution.nextRandom();      for (int j=0; j < _parents[col].length; j++) {        int parent=_parents[col][j];        value+=dataSet.getDouble(row,parent) * semIm.getEdgeCoef().get(parent,col);      }      value+=semIm.getMeans()[col];      dataSet.setDouble(row,col,value);    }  }  return dataSet;}  }
class C{  public static Object extractInnerConnectionFromC3P0(Object pooledConnection) throws IOException {  return extractInnerConnectionFromPooledConnection(pooledConnection,C3P0_INNER_CONNECTION_VARNAME);}  }
class C{  @NonNull public JSONObject jsonSerialize(){  JSONObject json=new JSONObject();  JsonUtil.put(json,KEY_CONFIGURATION,configuration.toJson());  JsonUtil.put(json,KEY_CLIENT_ID,clientId);  JsonUtil.put(json,KEY_RESPONSE_TYPE,responseType);  JsonUtil.put(json,KEY_REDIRECT_URI,redirectUri.toString());  JsonUtil.putIfNotNull(json,KEY_DISPLAY,display);  JsonUtil.putIfNotNull(json,KEY_LOGIN_HINT,loginHint);  JsonUtil.putIfNotNull(json,KEY_SCOPE,scope);  JsonUtil.putIfNotNull(json,KEY_PROMPT,prompt);  JsonUtil.putIfNotNull(json,KEY_STATE,state);  JsonUtil.putIfNotNull(json,KEY_CODE_VERIFIER,codeVerifier);  JsonUtil.putIfNotNull(json,KEY_CODE_VERIFIER_CHALLENGE,codeVerifierChallenge);  JsonUtil.putIfNotNull(json,KEY_CODE_VERIFIER_CHALLENGE_METHOD,codeVerifierChallengeMethod);  JsonUtil.putIfNotNull(json,KEY_RESPONSE_MODE,responseMode);  JsonUtil.put(json,KEY_ADDITIONAL_PARAMETERS,JsonUtil.mapToJsonObject(additionalParameters));  return json;}  }
class C{  public InputStream post(String name1,Object value1,String name2,Object value2,String name3,Object value3) throws IOException {  postCookies();  setParameter(name1,value1);  setParameter(name2,value2);  setParameter(name3,value3);  return doPost();}  }
class C{  public RasterPlot(DataSource data){  offset=new Point2D.Double();  distance=new de.erichseifert.gral.graphics.Dimension2D.Double(1.0,1.0);  colors=new Grayscale();  ((XYPlotArea2D)getPlotArea()).setMajorGridX(false);  ((XYPlotArea2D)getPlotArea()).setMajorGridY(false);  getAxisRenderer(AXIS_X).setIntersection(-Double.MAX_VALUE);  getAxisRenderer(AXIS_Y).setIntersection(-Double.MAX_VALUE);  add(data);  autoscaleAxes();}  }
class C{  public void testDroppedTimedOffer(){  SubmissionPublisher<Integer> p=new SubmissionPublisher<Integer>(basicExecutor,4);  TestSubscriber s1=new TestSubscriber();  s1.request=false;  TestSubscriber s2=new TestSubscriber();  s2.request=false;  p.subscribe(s1);  p.subscribe(s2);  s2.awaitSubscribe();  s1.awaitSubscribe();  long delay=timeoutMillis();  for (int i=1; i <= 4; ++i)   assertTrue(p.offer(i,delay,MILLISECONDS,null) >= 0);  long startTime=System.nanoTime();  assertTrue(p.offer(5,delay,MILLISECONDS,null) < 0);  s1.sn.request(64);  assertTrue(p.offer(6,delay,MILLISECONDS,null) < 0);  assertTrue(millisElapsedSince(startTime) >= delay);  s2.sn.request(64);  p.close();  s2.awaitComplete();  assertTrue(s2.nexts >= 2);  s1.awaitComplete();  assertTrue(s1.nexts >= 2);}  }
class C{  public DelaunayTriangulationBuilder(){}  }
class C{  @Override public int read(byte[] buffer,int offset,int length){  if (currentPos >= data.length) {    if (isFinal) {      return -1;    } else {      try {        Thread.sleep(20);      } catch (      InterruptedException e) {      }    }  }  int i=0;  for (i=0; i < length & (currentPos + i) < data.length; i++) {    buffer[offset + i]=data[currentPos + i];  }  currentPos+=i;  return i;}  }
class C{  public String classIndexTipText(){  return "Sets the class index (\"first\" and \"last\" are valid values)";}  }
class C{  public void interpret(final HashMap<BigInteger,List<ReilInstruction>> instructions,final BigInteger entryPoint) throws InterpreterException {  cpuPolicy.start(this);  interpreterPolicy.start();  final String programCounter=cpuPolicy.getProgramCounter();  Preconditions.checkNotNull(programCounter,"Error: CPU Policy returned an invalid program counter");  setRegister(programCounter,entryPoint,cpuPolicy.getRegisterSize(programCounter),ReilRegisterStatus.DEFINED);  while (true) {    BigInteger pc=nativeToReil(getVariableValue(programCounter));    interpreterPolicy.nextInstruction(this);    log("Interpreting: %X%n",pc.longValue());    if (!instructions.containsKey(pc)) {      throw new InterpreterException(String.format("Error: Instruction at offset %X not found",pc));    }    final List<ReilInstruction> instructionList=instructions.get(pc);    if ((instructionList == null) || (instructionList.size() == 0)) {      throw new InterpreterException(String.format("Error: Instruction at offset %X has invalid REIL code",pc));    }    setRegister(SUB_PC,BigInteger.ZERO,OperandSize.DWORD,ReilRegisterStatus.DEFINED);    int subPc=getVariableValue(SUB_PC).intValue();    while (subPc < instructionList.size()) {      final ReilInstruction inst=instructionList.get(subPc);      log("Next instruction: " + inst.toString().replaceAll("%",""));      for (      final ReilRegister r : registers.values()) {        log("%s: %X%n",r.getRegister(),r.getValue());      }      interpretInstruction(inst,programCounter);      final int newSubPc=getVariableValue(SUB_PC).intValue();      if (subPc == newSubPc) {        subPc=newSubPc + 1;      } else {        subPc=newSubPc;      }      setRegister(SUB_PC,BigInteger.valueOf(subPc),OperandSize.DWORD,ReilRegisterStatus.DEFINED);    }    final BigInteger pcNew=getVariableValue(programCounter);    if (pc.equals(nativeToReil(pcNew))) {      pc=pcNew.add(BigInteger.ONE);    } else {      pc=pcNew;    }    if (pcNew.equals(BigInteger.valueOf(4294967295L))) {      break;    }    if (!searchNextPc(pc,instructions,programCounter)) {      break;    }  }  interpreterPolicy.end();}  }
class C{  @Override public Dimension minimumLayoutSize(Container target){  Dimension minimum=layoutSize(target,false);  minimum.width-=(getHgap() + 1);  return minimum;}  }
class C{  public DaemonException(Throwable cause){  super(cause);}  }
class C{  public Intent putExtras(Intent src){  if (src.mExtras != null) {    if (mExtras == null) {      mExtras=new Bundle(src.mExtras);    } else {      mExtras.putAll(src.mExtras);    }  }  return this;}  }
class C{  public void clearActiveLineRange(){  if (activeLineRangeStart != -1 || activeLineRangeEnd != -1) {    activeLineRangeStart=activeLineRangeEnd=-1;    repaint();  }}  }
class C{  private DocLine[] loadLines(MMovement move){  ArrayList<DocLine> list=new ArrayList<DocLine>();  MMovementLine[] lines=move.getLines(false);  for (int i=0; i < lines.length; i++) {    MMovementLine line=lines[i];    DocLine docLine=new DocLine(line,this);    docLine.setQty(line.getMovementQty(),false);    docLine.setReversalLine_ID(line.getReversalLine_ID());    log.fine(docLine.toString());    list.add(docLine);  }  DocLine[] dls=new DocLine[list.size()];  list.toArray(dls);  return dls;}  }
class C{  public T image(Bitmap bm){  if (view instanceof ImageView) {    ImageView iv=(ImageView)view;    iv.setTag(AQuery.TAG_URL,null);    iv.setImageBitmap(bm);  }  return self();}  }
class C{  public void remove(final Job job){  jobList.remove(job);  pcs.firePropertyChange(null,null,null);}  }
class C{  public String edgeType(){  return "dir=forward";}  }
class C{  public Vector3i sub(int x,int y,int z){  this.x-=x;  this.y-=y;  this.z-=z;  return this;}  }
class C{  public Flags optionalAppendFlags(ImapRequestLineReader request) throws DecodingException {  char next=request.nextWordChar();  if (next == '(') {    return request.flagList();  } else {    return null;  }}  }
class C{  public DropListenerSupport(){  this(null);}  }
class C{  public static void main(String... args) throws Exception {  Class.forName("org.h2.Driver");  Connection conn=DriverManager.getConnection("jdbc:h2:mem:","sa","");  Statement stat=conn.createStatement();  stat.execute("CREATE TABLE INVOICE(ID INT PRIMARY KEY, AMOUNT DECIMAL)");  stat.execute("CREATE TABLE INVOICE_SUM(AMOUNT DECIMAL)");  stat.execute("INSERT INTO INVOICE_SUM VALUES(0.0)");  stat.execute("CREATE TRIGGER INV_INS " + "AFTER INSERT ON INVOICE FOR EACH ROW " + "CALL \"org.h2.samples.TriggerSample$MyTrigger\" ");  stat.execute("CREATE TRIGGER INV_UPD " + "AFTER UPDATE ON INVOICE FOR EACH ROW " + "CALL \"org.h2.samples.TriggerSample$MyTrigger\" ");  stat.execute("CREATE TRIGGER INV_DEL " + "AFTER DELETE ON INVOICE FOR EACH ROW " + "CALL \"org.h2.samples.TriggerSample$MyTrigger\" ");  stat.execute("INSERT INTO INVOICE VALUES(1, 10.0)");  stat.execute("INSERT INTO INVOICE VALUES(2, 19.95)");  stat.execute("UPDATE INVOICE SET AMOUNT=20.0 WHERE ID=2");  stat.execute("DELETE FROM INVOICE WHERE ID=1");  ResultSet rs;  rs=stat.executeQuery("SELECT AMOUNT FROM INVOICE_SUM");  rs.next();  System.out.println("The sum is " + rs.getBigDecimal(1));  rs.close();  stat.close();  conn.close();}  }
class C{  protected SecurityObject(){}  }
class C{  public void testShouldDeployExpanded(){  AbstractCopyingInstalledLocalDeployer deployer=new TestableCopyingDeployer(createContainer(createContainerCapability(DeployableType.WAR),null));  assertTrue(deployer.shouldDeployExpanded(DeployableType.WAR));  deployer.setShouldDeployExpanded(DeployableType.WAR,true);  assertTrue(deployer.shouldDeployExpanded(DeployableType.WAR));  deployer.setShouldDeployExpanded(DeployableType.WAR,false);  assertFalse(deployer.shouldDeployExpanded(DeployableType.WAR));  deployer.setShouldDeployExpanded(DeployableType.WAR,true);  assertTrue(deployer.shouldDeployExpanded(DeployableType.WAR));}  }
class C{  public void testSuccessWithSuccessRatioAndFailureThreshold(){  CircuitBreaker breaker=new CircuitBreaker().withSuccessThreshold(3,4).withFailureThreshold(2);  breaker.halfOpen();  HalfOpenState state=new HalfOpenState(breaker);  state.recordSuccess();  state.recordSuccess();  state.recordFailure();  assertFalse(breaker.isOpen());  assertFalse(breaker.isClosed());  state.recordSuccess();  assertTrue(breaker.isClosed());}  }
class C{  public void opc_ifeq(Label l){  short instrBCI=getLength();  emitByte(opc_ifeq);  l.add(this,instrBCI,getLength(),getStack() - 1);  emitShort((short)-1);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:55.112 -0500",hash_original_method="CAE88651ED9FF39412B77E9D96C77B38",hash_generated_method="79A792DE7E8750FA6A50549E86B079B3") public String encodeBody(){  return optionTag != null ? optionTag : "";}  }
class C{  private List<TypedRegion> computePartitioning(final int offset,final int length){  return partitioner.computePartitioning(offset,length);}  }
class C{  public List<Entry> filter(List<Entry> points,double tolerance){  if (tolerance <= 0)   return points;  keep=new boolean[points.size()];switch (mType) {case DOUGLAS_PEUCKER:    return reduceWithDouglasPeuker(points,tolerance);case NONE:  return points;default :return points;}}  }
class C{  public void testCheckMetadata(){  assertEquals("Metadata should contain 5 elements",5,all.size());  Iterator<PojoDescriptor> it=all.iterator();  PojoDescriptor schema=it.next();  assertTrue("First element is schema description. Its class name should be empty",schema.valueClassName().isEmpty());  checkType(it.next());  checkType(it.next());  checkSchemaHasFullDbName(it.next());  checkType(it.next());}  }
class C{  public Component add(Component c){  ensurePopupMenuCreated();  popupMenu.add(c);  return c;}  }
class C{  public static void zoomSelected(final ZyGraph graph){  checkArguments(graph);  if (!graph.getSelectedNodes().isEmpty()) {    ZoomFunctions.zoomToNodes(graph,SelectedVisibleFilter.filter(graph.getSelectedNodes()));  }}  }
class C{  void deregisterSpring(Spring spring){  if (spring == null) {    throw new IllegalArgumentException("spring is required");  }  mActiveSprings.remove(spring);  mSpringRegistry.remove(spring.getId());}  }
class C{  public FloatMatrixWritable(FloatMatrix m){  super(m.rows,m.columns);  JavaBlas.rcopy(m.length,m.data,0,1,this.data,0,1);}  }
class C{  public static double REWSRrawFitness(boolean useTrainingData,GEPIndividual ind,int chromosomeNum,double range,double precision){  double expectedResult;  double predictedValue;  GEPDependentVariable dv;  if (useTrainingData)   dv=GEPDependentVariable.trainingData; else   dv=GEPDependentVariable.testingData;  double dvValues[]=dv.getDependentVariableValues(chromosomeNum);  int len=dvValues.length;  if (precision < 0.0) {    precision=-precision;    System.err.println("Warning: precision (" + precision + ") < 0 in call to REWSR fitness, setting to -precision.");  }  double totalError=0.0;  for (int i=0; i < len; i++) {    predictedValue=ind.eval(chromosomeNum,useTrainingData,i);    expectedResult=dvValues[i];    if (expectedResult == 0.0) {      expectedResult=RELATIVE_ERROR_ZERO_FACTOR;      predictedValue+=RELATIVE_ERROR_ZERO_FACTOR;      System.err.println("Warning: expected result = 0 in calculation of REWSRfitness, adjusting to avoid division by zero.");    }    double err=Math.abs(((predictedValue - expectedResult) / expectedResult) * 100.0);    if (err <= precision)     err=0.0;    totalError+=range - err;  }  return totalError;}  }
class C{  public static Database findDatabase(ResultHierarchy hier){  final List<Database> dbs=filterResults(hier,Database.class);  return (!dbs.isEmpty()) ? dbs.get(0) : null;}  }
class C{  private void remove(Thread t){synchronized (this) {    if (destroyed) {      return;    }    for (int i=0; i < nthreads; i++) {      if (threads[i] == t) {        System.arraycopy(threads,i + 1,threads,i,--nthreads - i);        threads[nthreads]=null;        break;      }    }  }}  }
class C{  public void rtpStreamAborted(){  mEventListener.onPlayerError();}  }
class C{  public void reconectOnFailure(final boolean reconnectOnFailure){  this.reconnectOnFailure=reconnectOnFailure;}  }
class C{  public Geometry extract(LinearLocation start,LinearLocation end){  if (end.compareTo(start) < 0) {    return reverse(computeLinear(end,start));  }  return computeLinear(start,end);}  }
class C{  @VisibleForTesting Block createNextBlockWithCoinbase(long version,byte[] pubKey,final int height){  return createNextBlock(null,version,(TransactionOutPoint)null,Utils.currentTimeSeconds(),pubKey,FIFTY_COINS,height);}  }
class C{  @Override public void startHandshake() throws IOException {  if (appDataIS == null) {    throw new IOException("Socket is not connected.");  }  if (socket_was_closed) {    throw new IOException("Socket has already been closed.");  }  if (!handshake_started) {    handshake_started=true;    if (sslParameters.getUseClientMode()) {      if (logger != null) {        logger.println("SSLSocketImpl: CLIENT");      }      handshakeProtocol=new ClientHandshakeImpl(this);    } else {      if (logger != null) {        logger.println("SSLSocketImpl: SERVER");      }      handshakeProtocol=new ServerHandshakeImpl(this);    }    alertProtocol=new AlertProtocol();    recordProtocol=new SSLRecordProtocol(handshakeProtocol,alertProtocol,new SSLStreamedInput(input),appDataIS.dataPoint);  }  if (logger != null) {    logger.println("SSLSocketImpl.startHandshake");  }  handshakeProtocol.start();  doHandshake();  if (logger != null) {    logger.println("SSLSocketImpl.startHandshake: END");  }}  }
class C{  public boolean isTraceActivated(){  return readBoolean(RcsSettingsData.TRACE_ACTIVATED);}  }
class C{  public static int toUCS4(char c,char d){  assert isHigh(c) && isLow(d);  return (((c & 0x3ff) << 10) | (d & 0x3ff)) + 0x10000;}  }
class C{  public boolean isDragInProgress(){  return dragStarted;}  }
class C{  public static VcfEvalParamsBuilder builder(){  return new VcfEvalParamsBuilder();}  }
class C{  private String refreshVolumeProperties(List<VolumeDescriptor> volumeDescriptors,StorageSystem system,String waitFor,Workflow workflow){  List<URI> targetURIs=VolumeDescriptor.getVolumeURIs(volumeDescriptors);  Method updateVolumePropertiesMethod=updateVolumePropertiesMethod(targetURIs,system.getId());  Method rollbackMethod=rollbackMethodNullMethod();  String stepId=workflow.createStep(REFRESH_VOLUME_PROPERTIES_STEP,REFRESH_VOLUME_PROPERTIES_STEP_DESC,waitFor,system.getId(),system.getSystemType(),getClass(),updateVolumePropertiesMethod,rollbackMethod,null);  return stepId;}  }
class C{  public Set<String> addContent(String variable,String value){  if (!paused) {    curState.addToState(new Assignment(variable,value));    return update();  } else {    log.info("system is paused, ignoring " + variable + "="+ value);    return Collections.emptySet();  }}  }
class C{  public static QuickTheory qt(){  return new QuickTheory(null);}  }
class C{  @Override public boolean execute(final String[] params,final String remainder){  int quantity;  String itemName;  if (params[0].matches("[0-9].*")) {    try {      quantity=Integer.parseInt(params[0]);    } catch (    final NumberFormatException ex) {      ClientSingletonRepository.getUserInterface().addEventLine(new StandardEventLine("Invalid quantity: " + params[0]));      return true;    }    itemName=remainder;  } else {    quantity=1;    itemName=(params[0] + " " + remainder).trim();  }  final String singularItemName=Grammar.singular(itemName);  for (  final String slotName : Constants.CARRYING_SLOTS) {    int itemID=User.get().findItem(slotName,itemName);    if ((itemID == -1) && !itemName.equals(singularItemName)) {      itemID=User.get().findItem(slotName,singularItemName);    }    if (itemID != -1) {      final RPAction drop=new RPAction();      drop.put(EquipActionConsts.TYPE,"drop");      drop.put(EquipActionConsts.BASE_OBJECT,User.get().getObjectID());      drop.put(EquipActionConsts.BASE_SLOT,slotName);      drop.put(EquipActionConsts.GROUND_X,(int)User.get().getX());      drop.put(EquipActionConsts.GROUND_Y,(int)User.get().getY());      drop.put(EquipActionConsts.QUANTITY,quantity);      drop.put(EquipActionConsts.BASE_ITEM,itemID);      ClientSingletonRepository.getClientFramework().send(drop);      return true;    }  }  ClientSingletonRepository.getUserInterface().addEventLine(new StandardEventLine("You don't have any " + singularItemName));  return true;}  }
class C{  public synchronized void openDriver(SurfaceHolder holder) throws IOException {  Camera theCamera=camera;  if (theCamera == null) {    theCamera=OpenCameraInterface.open();    if (theCamera == null) {      throw new IOException();    }    camera=theCamera;  }  theCamera.setPreviewDisplay(holder);  if (!initialized) {    initialized=true;    configManager.initFromCameraParameters(theCamera);    if (requestedFramingRectWidth > 0 && requestedFramingRectHeight > 0) {      setManualFramingRect(requestedFramingRectWidth,requestedFramingRectHeight);      requestedFramingRectWidth=0;      requestedFramingRectHeight=0;    }  }  Camera.Parameters parameters=theCamera.getParameters();  String parametersFlattened=parameters == null ? null : parameters.flatten();  try {    configManager.setDesiredCameraParameters(theCamera,false);  } catch (  RuntimeException re) {    Log.w(TAG,"Camera rejected parameters. Setting only minimal safe-mode parameters");    Log.i(TAG,"Resetting to saved camera params: " + parametersFlattened);    if (parametersFlattened != null) {      parameters=theCamera.getParameters();      parameters.unflatten(parametersFlattened);      try {        theCamera.setParameters(parameters);        configManager.setDesiredCameraParameters(theCamera,true);      } catch (      RuntimeException re2) {        Log.w(TAG,"Camera rejected even safe-mode parameters! No configuration");      }    }  }}  }
class C{  private void initialiseCards(){  Card c=new Card.Builder(this,CARD_PICKER).setTitle(getString(R.string.pick_title)).setDescription(getString(R.string.pick_text)).addAction(getString(R.string.pick_action),ACTION_PICK_PLACE,Card.ACTION_NEUTRAL).setLayout(R.layout.card_google).build(getActivity());  getCardStream().addCard(c,false);  c=new Card.Builder(this,CARD_DETAIL).setTitle(getString(R.string.empty)).setDescription(getString(R.string.empty)).build(getActivity());  getCardStream().addCard(c,false);  c=new Card.Builder(this,CARD_INTRO).setTitle(getString(R.string.intro_title)).setDescription(getString(R.string.intro_message)).build(getActivity());  getCardStream().addCard(c,true);}  }
class C{  public static void print(String[] lockers){  for (int i=0; i < lockers.length; i++) {    if (isOpen(lockers[i])) {      System.out.print("L" + (i + 1) + " ");    }  }  System.out.println();}  }
class C{  public boolean isStateFull(String url,ConfigData configData){  if (stateFullRsrcs.contains(url))   return true;  if (configData.isStateFull(url))   return true;  return false;}  }
class C{  public FruchtermanReingoldLayout(String graph,int maxIter){  super(graph);  m_nodeGroup=PrefuseLib.getGroupName(graph,Graph.NODES);  m_edgeGroup=PrefuseLib.getGroupName(graph,Graph.EDGES);  this.maxIter=maxIter;}  }
class C{  @Override public boolean onInterceptTouchEvent(MotionEvent ev){  Log.i(TAG,"SlidePager click :" + (ev.getAction() & MotionEvent.ACTION_MASK));  if (getAdapter() == null || getAdapter().getCount() == 0) {    Log.i(TAG,"SlidePager onInterceptTouchEvent returned false because adapter is null or empty:");    return false;  }  onTouchEvent(ev);  try {    return super.onInterceptTouchEvent(ev);  } catch (  Exception e) {    Log.e(TAG,e.toString());  }  return false;}  }
class C{  @Override public void onRequestPermissionsResult(int requestCode,@NonNull String[] permissions,@NonNull int[] grantResults){  if (requestCode == REQUEST_READ_CONTACTS) {    if (grantResults.length == 1 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {      populateAutoComplete();    }  }}  }
class C{  public void dragEnter(DragSourceDragEvent dsde){  ((DragSourceListener)a).dragEnter(dsde);  ((DragSourceListener)b).dragEnter(dsde);}  }
class C{  public boolean isValidMonthDay(MonthDay monthDay){  return monthDay != null && monthDay.isValidYear(year);}  }
class C{  private static boolean eq(double v1,double v2){  return v1 == v2;}  }
class C{  @Override public void populateDAG(DAG dag,Configuration conf){  SampleInput input=new SampleInput();  Collector collector=new Collector();  StreamFactory.fromInput(input,input.beanOutput,name("input")).addCompositeStreams(new PlaysForWord()).print(name("console")).endWith(collector,collector.input,name("Collector")).populateDag(dag);}  }
class C{  public ErrorWritingException(final Throwable cause){  super(cause);  addData(null,cause);}  }
class C{  public boolean canEdit(Class omgc){  Iterator iterator;  if (possibleEditableClasses == null) {    Set keys=loaders.keySet();    possibleEditableClasses=new Vector(keys.size());    iterator=keys.iterator();    while (iterator.hasNext()) {      String key=(String)iterator.next();      try {        possibleEditableClasses.add(Class.forName(key));      } catch (      ClassNotFoundException cnfe) {      }    }  }  iterator=possibleEditableClasses.iterator();  while (iterator.hasNext()) {    Class kc=(Class)iterator.next();    if (kc == omgc || kc.isAssignableFrom(omgc)) {      return true;    }  }  return false;}  }
class C{  protected void tearDown(){}  }
class C{  public boolean hasInherited(){  return hasSource(INHERITED);}  }
class C{  public static TextEdit reformat(int kind,String source,int indentationLevel,String lineSeparator,Map<String,String> options){  return reformat(kind,source,0,source.length(),indentationLevel,lineSeparator,options);}  }
class C{  public boolean verified(){  return verifierNodeId != null;}  }
class C{  public static final String convertHexChars(final String value){  if (value == null) {    return value;  }  final int escapeChar=value.indexOf(hashInt);  if (escapeChar == -1) {    return value;  }  final StringBuilder newString=new StringBuilder();  final int length=value.length();  char c;  for (int ii=0; ii < length; ii++) {    c=value.charAt(ii);    if (c == hashInt) {      ii++;      int end=ii + 2;      if (end > length) {        end=length;      }      final String key=value.substring(ii,end);      c=(char)Integer.parseInt(key,16);      ii++;      if (c != spaceInt) {        newString.append(c);      }    } else {      newString.append(c);    }  }  return newString.toString();}  }
class C{  private void verifyVpoolPlacementPolicyResults() throws Exception {  log.info("Verifying updated virtual pool results for VirtualPoolPlacementPolicyMigration.");  VirtualPool blockVpool=_dbClient.queryObject(VirtualPool.class,blockVpoolURI);  VirtualPool fileVpool=_dbClient.queryObject(VirtualPool.class,fileVpoolURI);  Assert.assertNotNull("placementPolicy shouldn't be null",blockVpool.getPlacementPolicy());  Assert.assertNull("PlacementPolicy should be null",fileVpool.getPlacementPolicy());}  }
class C{  private void searchWithTimeLimiter(Query query,ProcessedFilter filter,Collector collector) throws IOException {  if (queryCommand.getTimeAllowed() > 0) {    collector=new TimeLimitingCollector(collector,TimeLimitingCollector.getGlobalCounter(),queryCommand.getTimeAllowed());  }  TotalHitCountCollector hitCountCollector=new TotalHitCountCollector();  if (includeHitCount) {    collector=MultiCollector.wrap(collector,hitCountCollector);  }  if (filter.filter != null) {    query=new BooleanQuery.Builder().add(query,Occur.MUST).add(filter.filter,Occur.FILTER).build();  }  if (filter.postFilter != null) {    filter.postFilter.setLastDelegate(collector);    collector=filter.postFilter;  }  try {    searcher.search(query,collector);  } catch (  TimeLimitingCollector.TimeExceededException|ExitableDirectoryReader.ExitingReaderException x) {    partialResults=true;    logger.warn("Query: " + query + "; "+ x.getMessage());  }  if (includeHitCount) {    totalHitCount=hitCountCollector.getTotalHits();  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean moveToNext(){  try {    return rs.next();  } catch (  SQLException e) {    LOG.warn("Error moving inside the result set, to next",e);  }  return false;}  }
class C{  private static void usage(){  System.out.println("Usage: ");  System.out.println("\tPrint Contents:");  System.out.println(String.format("\t%s [%s] [%s <IP>] <Path Substring>",Command.PATH.name().toLowerCase(),WITH_DATA,HOST_ARG));  System.out.println(String.format("\t%s [%s <IP>] <Path Substring>",Command.SET.name().toLowerCase(),HOST_ARG));  System.out.println("\t\tData will be read from STDIN");  System.out.println(String.format("\t%s [%s] [%s <IP>]",Command.EPHEMERAL.name().toLowerCase(),WITH_DATA,HOST_ARG));  System.out.println(String.format("\t\t%s <IP>\tSpecify <IP>, default is localhost.",HOST_ARG));  System.out.println(String.format("\t\t%s \tPrint with data content.",WITH_DATA));  System.out.println("\n\tHandle ZK txn log:");  System.out.println(String.format("\t%s \t\tGet last valid logged txn id.",Command.GETLASTVALIDZXID.name().toLowerCase()));  System.out.println(String.format("\t%s \t\tTruncate to the last valid txnlog.",Command.TRUNCATETXNLOG.name().toLowerCase()));  System.out.println(String.format("\t%s <arg>(in hex)\t\tTruncate to the specific txn log.",Command.TRUNCATETXNLOG.name().toLowerCase()));  System.out.println("\n\tHandle Lock Process:");  System.out.println(String.format("\t%s <arg>\t\tLock to prevent starting <arg> process",Command.LOCK.name().toLowerCase()));  System.out.println(String.format("\t%s <arg>\t\tHold on to suspend <arg> process",Command.HOLD.name().toLowerCase()));  System.out.println(String.format("\t%s <arg>\t\tRelase all lock to <arg> continuously",Command.RELEASE.name().toLowerCase()));  System.out.println(String.format("\t%s <arg>\t\tShow the infomation about <arg>",Command.INFO.name().toLowerCase()));  System.out.println(String.format("\t\tAvailable Arguments:"));  System.out.println(String.format("\t\t%s\tHandle upgrading process.",LOCK_UPGRADE));  System.out.println("\n\tService Configuration:");  System.out.println(String.format("\t%s <arg>\t\tReset the service configuration of <arg>",Command.RESET.name().toLowerCase()));  System.out.println(String.format("\t\tAvailable Arguments:"));  System.out.println(String.format("\t\t%s\tReset MIGRATION_FAILED status.",RESET_MIFAIL));  System.out.println("\n\tSecurity operations:");  System.out.println(String.format("\t%s \t\t\tGet VDC's key and certificate chain.",Command.GETKEYANDCERT.name().toLowerCase()));  System.out.println(String.format("\t%s \t\t\tSave the ssh keys and configs for host, root and svcuser",Command.SAVE_SSH_KEYS.name().toLowerCase()));  System.out.println(String.format("\t%s \t\t\tExport the keystore to the default location.",Command.EXPORTKEYSTORE.name().toLowerCase()));  System.out.println(String.format("\t%s \t\t\tGenerate AuthorizedKeys2 for each user.",Command.GEN_SSH_AUTH_KEYS.name().toLowerCase()));  System.out.println("\n\tDisaster Recovery Operations:");  System.out.println(String.format("\t%s <key> <value>\t\tAdd \"key=value\" line to DR configuration",Command.TUNE_DR_CONFIG.name().toLowerCase()));  System.out.println(String.format("\t%s \t\t\tRollback DR Standby to previous viable data revision",Command.ROLLBACK_DATA_REVISION.name().toLowerCase()));}  }
class C{  @Deprecated public String loadMATSim4UrbanSimXSDString(){  try {    File f=loadMATSim4UrbanSimXSD();    return f.getCanonicalPath();  } catch (  IOException e) {    e.printStackTrace();  }  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:13.077 -0500",hash_original_method="5FC4B6592318F4C948D38B5B79469552",hash_generated_method="CE9217ADD286B0464C74DC335EE97C68") static public boolean isSystemReady(){  if (!sSystemReady) {    sSystemReady=getDefault().testIsSystemReady();  }  return sSystemReady;}  }
class C{  public void java_lang_Class_getDeclaredClasses0(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getLeastArrayObject());}  }
class C{  public Session(){}  }
class C{  @CanIgnoreReturnValue @Deprecated @Override public final Entry<K,V> pollLastEntry(){  throw new UnsupportedOperationException();}  }
class C{  public void doFilter(ServletRequest request,ServletResponse response,FilterChain filterChain) throws IOException, ServletException {  if (response.isCommitted()) {    log.info("Not proxying, already committed.");    return;  } else   if (!(request instanceof HttpServletRequest)) {    log.info("Request is not HttpRequest, will only handle HttpRequests.");    return;  } else   if (!(response instanceof HttpServletResponse)) {    log.info("Request is not HttpResponse, will only handle HttpResponses.");    return;  } else {    HttpServletResponse httpResponse=(HttpServletResponse)response;    HttpServletRequest httpRequest=(HttpServletRequest)request;    Server server=serverChain.evaluate(httpRequest);    if (server == null) {      log.info("Could not find a rule for this request, will not do anything.");      filterChain.doFilter(request,response);    } else {      httpRequest.setAttribute("proxyServer",server);      String ownHostName=request.getServerName() + ":" + request.getServerPort();      UrlRewritingResponseWrapper wrappedResponse;      wrappedResponse=new UrlRewritingResponseWrapper(httpResponse,server,ownHostName,httpRequest.getContextPath(),serverChain);      filterChain.doFilter(httpRequest,wrappedResponse);      wrappedResponse.processStream();    }  }}  }
class C{  public JsonApiMapper(EntityDictionary dictionary){  mapper=new ObjectMapper();  mapper.registerModule(JsonApiSerializer.getModule(dictionary));}  }
class C{  public AnnotationDeclaration addAnnotationDeclaration(String name){  return addAnnotationDeclaration(name,Modifier.PUBLIC);}  }
class C{  public JMenu createHelpMenu(){  ShowHelpAction helpAction=new ShowHelpAction("Pages/Network.html");  JMenu helpMenu=new JMenu("Help");  helpMenu.add(helpAction);  return helpMenu;}  }
class C{  public void addDataSources(final int numDataSources){  for (int i=0; i < numDataSources; i++) {    addDataSource();  }}  }
class C{  public boolean isScript(int i){  return i >= 0 && i < size() && getArgument(i) instanceof MathFunction && ("^".equals(((MathFunction)getArgument(i)).getName()) || "_".equals(((MathFunction)getArgument(i)).getName()));}  }
class C{  @RequestMapping(value="/sources/{applicationName}/container/{containerId}",method=RequestMethod.GET) public @ResponseBody ResponseEntity<List<SourceUnit>> findByApplication(@PathVariable String applicationName,@PathVariable String containerId) throws ServiceException, CheckException {  if (logger.isDebugEnabled()) {    logger.debug("applicationName:" + applicationName);    logger.debug("containerId:" + containerId);  }  List<SourceUnit> sources=fileService.listLogsFilesByContainer(containerId);  if (sources.size() == 0) {    String defaultFile=fileService.getLogDirectory(containerId);    sources.add(new SourceUnit(defaultFile));  }  return ResponseEntity.status(HttpStatus.OK).body(sources);}  }
class C{  public boolean isModeOptionsHidden(){  return mModeOptions.isHiddenOrHiding();}  }
class C{  public static double logPdf(double x,double shape,double scale,double factor){  if (x <= 0)   return Double.NEGATIVE_INFINITY;  return factor + shape * Math.log(scale) - (shape + 1) * Math.log(x) - (scale / x) - GammaFunction.lnGamma(shape);}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  private void jumpToNextTarget(){  Entity targ=getNextTarget();  if (null == targ) {    return;  }  clientgui.bv.centerOnHex(targ.getPosition());  clientgui.getBoardView().select(targ.getPosition());  target(targ);}  }
class C{  @Override public Operand makeJTOCOp(){  Address jtoc=Magic.getTocPointer();  return VM.BuildFor32Addr ? new IntConstantOperand(jtoc.toInt()) : new LongConstantOperand(jtoc.toLong());}  }
class C{  private String string(int val){  return val != -1 ? String.valueOf(val) : "";}  }
class C{  public JettisonMappedXmlDriver(final Configuration config){  this(config,true);}  }
class C{  private void createRenderables(){  this.gridElements=new ArrayList<GridElement>();  ArrayList<Position> positions=new ArrayList<Position>();  positions.clear();  positions.add(new Position(this.sector.getMinLatitude(),this.sector.getMinLongitude(),0));  positions.add(new Position(this.sector.getMaxLatitude(),this.sector.getMinLongitude(),0));  Object polyline=createLineRenderable(new ArrayList<Position>(positions),AVKey.LINEAR);  Sector lineSector=new Sector(this.sector.getMinLatitude(),this.sector.getMaxLatitude(),this.sector.getMinLongitude(),this.sector.getMinLongitude());  GridElement ge=new GridElement(lineSector,polyline,GridElement.TYPE_LINE);  ge.value=this.sector.getMinLongitude().degrees;  this.gridElements.add(ge);  if (this.sector.getMinLatitude().degrees == UTM_MIN_LATITUDE || this.sector.getMinLatitude().degrees == 0) {    positions.clear();    positions.add(new Position(this.sector.getMinLatitude(),this.sector.getMinLongitude(),0));    positions.add(new Position(this.sector.getMinLatitude(),this.sector.getMaxLongitude(),0));    polyline=createLineRenderable(new ArrayList<Position>(positions),AVKey.LINEAR);    lineSector=new Sector(this.sector.getMinLatitude(),this.sector.getMinLatitude(),this.sector.getMinLongitude(),this.sector.getMaxLongitude());    ge=new GridElement(lineSector,polyline,GridElement.TYPE_LINE);    ge.value=this.sector.getMinLatitude().degrees;    this.gridElements.add(ge);  }  if (this.sector.getMaxLatitude().degrees == UTM_MAX_LATITUDE) {    positions.clear();    positions.add(new Position(this.sector.getMaxLatitude(),this.sector.getMinLongitude(),0));    positions.add(new Position(this.sector.getMaxLatitude(),this.sector.getMaxLongitude(),0));    polyline=createLineRenderable(new ArrayList<Position>(positions),AVKey.LINEAR);    lineSector=new Sector(this.sector.getMaxLatitude(),this.sector.getMaxLatitude(),this.sector.getMinLongitude(),this.sector.getMaxLongitude());    ge=new GridElement(lineSector,polyline,GridElement.TYPE_LINE);    ge.value=this.sector.getMaxLatitude().degrees;    this.gridElements.add(ge);  }  if (this.hasLabel()) {    StringBuilder sb=new StringBuilder();    sb.append(this.zone).append(AVKey.NORTH.equals(this.hemisphere) ? "N" : "S");    GeographicText text=new UserFacingText(sb.toString(),new Position(this.sector.getCentroid(),0));    this.gridElements.add(new GridElement(this.sector,text,GridElement.TYPE_GRIDZONE_LABEL));  }}  }
class C{  protected void inorder(TreeNode<E> root){  if (root == null)   return;  Stack<TreeNode<E>> stack=new Stack<>();  TreeNode<E> current=root;  while (!stack.empty() || current != null) {    if (current != null) {      stack.push(current);      current=current.left;    } else {      TreeNode<E> node=stack.pop();      System.out.print(node.element + " ");      current=node.right;    }  }}  }
class C{  protected void createRayWithPoint(GL10 gl,PLIRenderer renderer,CGPoint point,PLVector3[] ray){  CGRect viewport=renderer.getViewport();  mViewport[0]=viewport.x;  mViewport[1]=viewport.y;  mViewport[2]=viewport.width;  mViewport[3]=viewport.height;  float y=(float)renderer.getSize().height - point.y;  GLUES.gluUnProject(point.x,y,0.0f,mModelMatrix,0,mProjectionMatrix,0,mViewport,0,mPosition,0);  ray[0].setValues(mPosition);  GLUES.gluUnProject(point.x,y,1.0f,mModelMatrix,0,mProjectionMatrix,0,mViewport,0,mPosition,0);  ray[1].setValues(mPosition);}  }
class C{  public static byte parseString(String value){  return Byte.decode(value);}  }
class C{  public JRadioButtonMenuItem(String text,Icon icon){  this(text,icon,false);}  }
class C{  public boolean shiftProcessedDump(String dumpName){  File f=new File(this.dump_dir_import,dumpName);  if (!f.exists())   return false;  File g=new File(this.dump_dir_imported,dumpName);  if (g.exists())   g.delete();  return f.renameTo(g);}  }
class C{  File writeFile(File f,String s) throws IOException {  if (f.getParentFile() != null)   f.getParentFile().mkdirs();  FileWriter out=new FileWriter(f);  try {    out.write(s);  }  finally {    out.close();  }  return f;}  }
class C{  @Override protected void rehash(int newCapacity){  int oldCapacity=_set.length;  float[] oldKeys=_set;  int[] oldVals=_values;  byte[] oldStates=_states;  _set=new float[newCapacity];  _values=new int[newCapacity];  _states=new byte[newCapacity];  for (int i=oldCapacity; i-- > 0; ) {    if (oldStates[i] == FULL) {      float o=oldKeys[i];      int index=insertionIndex(o);      _set[index]=o;      _values[index]=oldVals[i];      _states[index]=FULL;    }  }}  }
class C{  public VagCodeStatPanel(){  initComponents();}  }
class C{  protected FinalStateImpl(){  super();}  }
class C{  public static int numOnes(int x){  int totalOnes=0;  for (int i=0; i < 32; i+=1) {    int bottomBit=x & 1;    totalOnes+=bottomBit;    x=x >> 1;  }  return totalOnes;}  }
class C{  @Override public void visitMethodDef(final JCMethodDecl tree){  if (tree.sym == null) {    Assert.error("Visiting tree node before memberEnter");  }  if (sigOnly) {    if (!tree.mods.annotations.isEmpty()) {      TypeAnnotationPosition pos=new TypeAnnotationPosition();      pos.type=TargetType.METHOD_RETURN;      if (tree.sym.isConstructor()) {        pos.pos=tree.pos;        separateAnnotationsKinds(tree,null,tree.sym,pos);      } else {        pos.pos=tree.restype.pos;        separateAnnotationsKinds(tree.restype,tree.sym.type.getReturnType(),tree.sym,pos);      }    }    if (tree.recvparam != null && tree.recvparam.sym != null && !tree.recvparam.mods.annotations.isEmpty()) {      TypeAnnotationPosition pos=new TypeAnnotationPosition();      pos.type=TargetType.METHOD_RECEIVER;      pos.pos=tree.recvparam.vartype.pos;      separateAnnotationsKinds(tree.recvparam.vartype,tree.recvparam.sym.type,tree.recvparam.sym,pos);    }    int i=0;    for (    JCVariableDecl param : tree.params) {      if (!param.mods.annotations.isEmpty()) {        TypeAnnotationPosition pos=new TypeAnnotationPosition();        pos.type=TargetType.METHOD_FORMAL_PARAMETER;        pos.parameter_index=i;        pos.pos=param.vartype.pos;        separateAnnotationsKinds(param.vartype,param.sym.type,param.sym,pos);      }      ++i;    }  }  push(tree);  if (sigOnly) {    scan(tree.mods);    scan(tree.restype);    scan(tree.typarams);    scan(tree.recvparam);    scan(tree.params);    scan(tree.thrown);  } else {    scan(tree.defaultValue);    scan(tree.body);  }  pop();}  }
class C{  public RoundBorder strokeOpacity(int strokeOpacity){  this.strokeOpacity=strokeOpacity;  return this;}  }
class C{  public JsonArrayRequest(int method,String url,JSONArray jsonRequest,Listener<JSONArray> listener,ErrorListener errorListener){  super(method,url,(jsonRequest == null) ? null : jsonRequest.toString(),listener,errorListener);}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 160) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  protected Document createDefaultModel(){  return new RSyntaxDocument(SYNTAX_STYLE_NONE);}  }
class C{  public boolean verifyKeyedChecksum(byte[] data,int size,byte[] key,byte[] checksum,int usage) throws KrbCryptoException {  try {    byte[] newCksum=Aes256.calculateChecksum(key,usage,data,0,size);    return isChecksumEqual(checksum,newCksum);  } catch (  GeneralSecurityException e) {    KrbCryptoException ke=new KrbCryptoException(e.getMessage());    ke.initCause(e);    throw ke;  }}  }
class C{  public T caseRegularEventSpec(RegularEventSpec object){  return null;}  }
class C{  static public boolean hasADbHasEverBeenCreatedInThisProcess(){  return aDbHasEverBeenCreatedInThisProcess;}  }
class C{  public Vector2(Vector2 original){  this(original.x,original.z);}  }
class C{  private void draw(final Operator operator,final Graphics2D g2,final ProcessRendererModel rendererModel,final boolean printing){  if (visualizer.isActive()) {    return;  }  WorkflowAnnotations annotations=rendererModel.getOperatorAnnotations(operator);  if (annotations == null || annotations.isEmpty()) {    return;  }  Rectangle2D frame=rendererModel.getOperatorRect(operator);  int xOffset=(IMAGE_ANNOTATION.getIconWidth() + 2) * 2;  ProcessDrawUtils.getIcon(operator,IMAGE_ANNOTATION).paintIcon(null,g2,(int)(frame.getX() + frame.getWidth() - xOffset),(int)(frame.getY() + frame.getHeight() - IMAGE_ANNOTATION.getIconHeight() - 1));}  }
class C{  public DirectionButton(Icon icon,Icon downIcon,String direction,String description,ActionListener l,ButtonGroup group,boolean selected){  super();  this.addActionListener(l);  setFocusPainted(false);  setHorizontalTextPosition(CENTER);  group.add(this);  setIcon(icon);  setSelectedIcon(downIcon);  setActionCommand(direction);  getAccessibleContext().setAccessibleName(direction);  getAccessibleContext().setAccessibleDescription(description);  setSelected(selected);}  }
class C{  public LevelLessThanCondition(final int level){  this.level=level;}  }
class C{  private void profilesCB(){  Profile profile;  String host;  profile=(Profile)profilesComboBox.getSelectedItem();  if (profile != null) {    host=profile.getHost();    serverField.setText(host);    serverPortField.setText(String.valueOf(profile.getPort()));    usernameField.setText(profile.getUser());    passwordField.setText(profile.getPassword());  } else {    serverPortField.setText(String.valueOf(Profile.DEFAULT_SERVER_PORT));    usernameField.setText("");    passwordField.setText("");  }}  }
class C{  public static synchronized NumberIterator load(double from,double to,double max){  return loadMax((int)from,(int)to,(int)max);}  }
class C{  private List<Parameter> modifyParameters(VOService productToModify,PlatformUser currentUser,TechnicalProduct tProd,Product product,boolean isCreation) throws ObjectNotFoundException, OperationNotPermittedException, ValidationException, ConcurrentModificationException {  boolean isDirectAccess=tProd.getAccessType() == ServiceAccessType.DIRECT;  List<VOParameter> parameters=productToModify.getParameters();  ParameterSet currentParameterSet=product.getParameterSet();  Map<Long,Parameter> obsoleteParameters=new HashMap<Long,Parameter>();  List<Parameter> parametersToLog=new ArrayList<Parameter>();  if (currentParameterSet != null) {    for (    final Parameter p : currentParameterSet.getParameters()) {      obsoleteParameters.put(Long.valueOf(p.getKey()),p);    }  }  if (parameters != null && !parameters.isEmpty()) {    if (currentParameterSet == null) {      product.setParameterSet(new ParameterSet());      currentParameterSet=product.getParameterSet();    }    for (    VOParameter parameter : parameters) {      if (parameter == null) {        continue;      }      ParameterDefinition paramDef=null;      try {        paramDef=dm.getReference(ParameterDefinition.class,parameter.getParameterDefinition().getKey());      } catch (      ObjectNotFoundException e) {        sessionCtx.setRollbackOnly();        logger.logWarn(Log4jLogger.SYSTEM_LOG,e,LogMessageIdentifier.WARN_MARKETING_PRODUCT_CREATION_FAILED);        throw e;      }      if (!paramDef.isConfigurable()) {        OperationNotPermittedException onp=new OperationNotPermittedException(String.format("Cannot create parameter for parameter definition '%s' as the definition is non-configurable! User was: '%s'.",Long.valueOf(paramDef.getKey()),Long.valueOf(currentUser.getKey())));        logger.logWarn(Log4jLogger.SYSTEM_LOG,onp,LogMessageIdentifier.WARN_NON_CONFIGURABLE_PARAMETER_DEFINITION,String.valueOf(paramDef.getKey()),String.valueOf(currentUser.getKey()));        throw onp;      }      ParameterAssembler.validateParameter(parameter,paramDef);      if (paramDef.getParameterType() == ParameterType.SERVICE_PARAMETER && paramDef.getTechnicalProduct().getKey() != tProd.getKey()) {        sessionCtx.setRollbackOnly();        OperationNotPermittedException onp=new OperationNotPermittedException("Creation of marketing product failed");        logger.logWarn(Log4jLogger.SYSTEM_LOG,onp,LogMessageIdentifier.WARN_MARKETING_PRODUCT_CREATION_FAILED_NOT_ACCESSIBLE_PRODUCT,Long.toString(currentUser.getKey()));        throw onp;      }      List<Parameter> storedParameters=currentParameterSet.getParameters();      if (isParameterToBeSaved(isDirectAccess,parameter,paramDef)) {        final Parameter existingParameter=obsoleteParameters.remove(Long.valueOf(parameter.getKey()));        if (existingParameter == null) {          final Parameter param=ParameterAssembler.toParameter(parameter);          param.setParameterDefinition(paramDef);          param.setParameterSet(currentParameterSet);          storedParameters.add(param);          if (!isCreation || isDifferentFromDefaultValue(param)) {            parametersToLog.add(param);          }        } else {          boolean isChanged=isDifferentFromExistingValue(existingParameter,ParameterAssembler.toParameter(parameter));          ParameterAssembler.updateParameter(existingParameter,parameter);          existingParameter.setParameterDefinition(paramDef);          if (isChanged) {            parametersToLog.add(existingParameter);          }          if (!existingParameter.isConfigurable()) {            removePricedParameters(existingParameter);          }        }      }    }  }  if (currentParameterSet != null) {    for (    Parameter obsoleteParameter : obsoleteParameters.values()) {      removePricedParameters(obsoleteParameter);      dm.remove(obsoleteParameter);      currentParameterSet.getParameters().remove(obsoleteParameter);      Parameter parameterToLog=obsoleteParameter.copy(obsoleteParameter.getParameterSet());      parameterToLog.setConfigurable(false);      parameterToLog.setValue("");      parametersToLog.add(parameterToLog);    }  }  return parametersToLog;}  }
class C{  @SuppressWarnings("unused") public static byte[] selectCNFontB(){  byte[] result=new byte[3];  result[0]=FS;  result[1]=33;  result[2]=1;  return result;}  }
class C{  public static boolean annotationTypeMatches(Class<? extends Annotation> type,JavacNode node){  if (node.getKind() != Kind.ANNOTATION)   return false;  return typeMatches(type,node,((JCAnnotation)node.get()).annotationType);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:17.453 -0500",hash_original_method="93F95FF083791513BC80A25A69B4AF8A",hash_generated_method="A9C5AF9FFCCAC1EA0C2118B06CC55E47") public NetworkConfig(String init){  String fragments[]=init.split(",");  name=fragments[0].trim().toLowerCase();  type=Integer.parseInt(fragments[1]);  radio=Integer.parseInt(fragments[2]);  priority=Integer.parseInt(fragments[3]);  restoreTime=Integer.parseInt(fragments[4]);  dependencyMet=Boolean.parseBoolean(fragments[5]);}  }
class C{  public boolean isCommitment(){  Object oo=get_Value(COLUMNNAME_IsCommitment);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public JRootFrame(){  initComponents();}  }
class C{  public int lengthCertificate(){  return this.length(Constants.SignatureSpecNS,Constants._TAG_X509CERTIFICATE);}  }
class C{  public void onSignUpPressed(View view){  Intent intent=new Intent(LoginActivity.this,CreateAccountActivity.class);  startActivity(intent);}  }
class C{  protected AbstractLocation(final Id id,final Coord center){  this.id=id;  this.center=center;  if (this.center == null) {    throw new RuntimeException("Location id=" + id + " instanciate without coordinate!");  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public M5P(){  super();  setGenerateRules(false);}  }
class C{  public static int toInt(short[] shorts,int start){  return toInt(shorts[start],shorts[start + 1]);}  }
class C{  public void run(String username,String password) throws AuthenticationException {  for (  String s : WELCOME_MESSAGE) {    out.println(s);  }  BufferedReader reader=new BufferedReader(new InputStreamReader(System.in));  login(username,password);  try {    loadSheet(reader);  } catch (  IOException e) {    e.printStackTrace();  }catch (  ServiceException e) {    e.printStackTrace();  }  while (executeCommand(reader)) {  }}  }
class C{  @RequestMapping(value={"","/"},method=RequestMethod.PUT) @ResponseBody public RestWrapper insert(@ModelAttribute("dqsetup") @Valid DQSetupInfo dqSetupInfo,BindingResult bindingResult,Principal principal){  RestWrapper restWrapper=null;  if (bindingResult.hasErrors()) {    BindingResultError bindingResultError=new BindingResultError();    return bindingResultError.errorMessage(bindingResult);  }  try {    LOGGER.debug("Listing DQ properties on page " + dqSetupInfo.getPage());    List<Properties> propertiesList=dataQualityDAO.insertDQSetup(dqSetupInfo,principal.getName());    LOGGER.debug("properties contain" + propertiesList.size() + "objects");    DQSetupInfo dqSetup=new DQSetupInfo();    List<DQSetupInfo> dqSetups=new ArrayList<DQSetupInfo>();    int count=0;    int i=0;    for (    Properties properties : propertiesList) {      if (count % 5 == 0) {        dqSetups.add(i,new DQSetupInfo());      }      if (properties.getKey().equals(dqSetup.getRulesUserName())) {        dqSetups.get(i).setRulesUserNameValue(properties.getValue());        count++;      } else       if (properties.getKey().equals(dqSetup.getRulesPassword())) {        dqSetups.get(i).setRulesPasswordValue(properties.getValue());        count++;      } else       if (properties.getKey().equals(dqSetup.getRulesPackage())) {        dqSetups.get(i).setRulesPackageValue(properties.getValue());        count++;      } else       if (properties.getKey().equals(dqSetup.getFileDelimiterRegex())) {        dqSetups.get(i).setFileDelimiterRegexValue(properties.getValue());        count++;      } else       if (properties.getKey().equals(dqSetup.getMinPassThresholdPercent())) {        dqSetups.get(i).setMinPassThresholdPercentValue(properties.getValue());        count++;      } else       if (properties.getKey().equals(dqSetup.getProcessName())) {        dqSetups.get(i).setProcessName(properties.getValue());      }      if (count % 5 == 0) {        LOGGER.debug("The value of if statement is :" + count);        LOGGER.debug("properties has process id as ppid" + properties.getParentProcessId());        dqSetups.get(i).setDescription(properties.getDescription());        dqSetups.get(i).setParentProcessId(properties.getParentProcessId());        dqSetups.get(i).setSubProcessId(properties.getSubProcessId());        dqSetups.get(i).setCounter(properties.getCounter());        LOGGER.debug("values of dqSetup are" + dqSetups.get(i).getRulesUserNameValue() + dqSetups.get(i).getRulesPasswordValue()+ dqSetups.get(i).getRulesPackageValue()+ dqSetups.get(i).getParentProcessId());        i++;      }    }    restWrapper=new RestWrapper(dqSetups,RestWrapper.OK);    LOGGER.info(RECORDWITHID + dqSetupInfo.getParentProcessId() + " inserted in DQSetup by User:"+ principal.getName()+ dqSetupInfo);  } catch (  Exception e) {    LOGGER.error(e);    return new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  void addStaticField(FieldObj field){  staticFields.put(field.name,field);}  }
class C{  void lineMatch(Location loc,int javaLine,int defaultLine){  if (loc.lineNumber() != defaultLine) {    failure("FAIL: at " + loc.lineNumber() + ", expected "+ defaultLine);  } else {    println("at: " + loc.lineNumber());  }  if (loc.lineNumber("Java") != javaLine) {    failure("FAIL: at Java line " + loc.lineNumber("Java") + ", expected "+ javaLine);  }}  }
class C{  public final void saveAsSTL(String fileName,boolean useFlippedY){  saveAsSTL(fileName,new STLWriter(),useFlippedY);}  }
class C{  public CharCharMap(final int expected,final float f){  if (f <= 0 || f > 1)   throw new IllegalArgumentException("Load factor must be greater than 0 and smaller than or equal to 1");  if (expected < 0)   throw new IllegalArgumentException("The expected number of elements must be nonnegative");  this.f=f;  n=arraySize(expected,f);  mask=n - 1;  maxFill=maxFill(n,f);  key=new char[n + 1];  value=new char[n + 1];}  }
class C{  @SuppressWarnings("unchecked") private void processRestControllerMethod(Method method,RequestMapping classRequestMapping,String tagName,MethodSource<JavaClassSource> methodSource) throws MojoExecutionException {  log.debug("Processing method \"" + method.getName() + "\".");  Map<String,String> methodParamDescriptions=new HashMap<>();  JavaDocSource<MethodSource<JavaClassSource>> javaDocSource=methodSource.getJavaDoc();  List<JavaDocTag> tags=javaDocSource.getTags();  for (  JavaDocTag javaDocTag : tags) {    processJavaDocTag(javaDocTag,methodParamDescriptions);  }  List<String> produces=Collections.emptyList();  List<String> consumes=Collections.emptyList();  List<RequestMethod> requestMethods=Collections.emptyList();  List<String> uris=Collections.emptyList();  if (classRequestMapping != null) {    produces=CollectionUtils.arrayToList(classRequestMapping.produces());    consumes=CollectionUtils.arrayToList(classRequestMapping.consumes());    requestMethods=CollectionUtils.arrayToList(classRequestMapping.method());    uris=CollectionUtils.arrayToList(classRequestMapping.value());  }  ApiOperation apiOperation=method.getAnnotation(ApiOperation.class);  boolean hidden=apiOperation != null && apiOperation.hidden();  RequestMapping methodRequestMapping=method.getAnnotation(RequestMapping.class);  if ((methodRequestMapping != null) && (!hidden)) {    log.debug("Method \"" + method.getName() + "\" is a RequestMapping.");    requestMethods=getClassOrMethodValue(requestMethods,CollectionUtils.arrayToList(methodRequestMapping.method()));    uris=getClassOrMethodValue(uris,CollectionUtils.arrayToList(methodRequestMapping.value()));    produces=getClassOrMethodValue(produces,CollectionUtils.arrayToList(methodRequestMapping.produces()));    consumes=getClassOrMethodValue(consumes,CollectionUtils.arrayToList(methodRequestMapping.consumes()));    if (requestMethods.isEmpty()) {      log.warn("No request method defined for method \"" + method.getName() + "\". Skipping...");      return;    }    if (uris.isEmpty()) {      log.warn("No URI defined for method \"" + method.getName() + "\". Skipping...");      return;    }    if (uris.size() > 1) {      log.warn(uris.size() + " URI's found for method \"" + method.getName()+ "\". Only processing the first one.");    }    if (requestMethods.size() > 1) {      log.warn(uris.size() + " request methods found for method \"" + method.getName()+ "\". Only processing the first one.");    }    String uri=uris.get(0).trim();    Path path=swagger.getPath(uri);    if (path == null) {      path=new Path();      swagger.path(uri,path);    }    String methodSummary=method.getName();    if (apiOperation != null) {      methodSummary=apiOperation.value();    }    Operation operation=new Operation();    operation.tag(tagName);    operation.summary(methodSummary);    if (javaDocSource.getText() != null) {      Javadoc javadoc=(Javadoc)javaDocSource.getInternal();      List<TagElement> tagList=javadoc.tags();      StringBuilder stringBuilder=new StringBuilder();      for (      TagElement tagElement : tagList) {        if (tagElement.getTagName() == null) {          processFragments(tagElement.fragments(),stringBuilder);        }      }      operation.description(stringBuilder.toString());      setOperationId(tagName,method,operation);    }    if (!produces.isEmpty()) {      operation.setProduces(produces);    }    if (!consumes.isEmpty()) {      operation.setConsumes(consumes);    }    path.set(requestMethods.get(0).name().toLowerCase(),operation);    for (    ParameterSource<JavaClassSource> parameterSource : methodSource.getParameters()) {      processRestMethodParameter(parameterSource,operation,methodParamDescriptions);    }    processRestMethodReturnValue(method.getReturnType(),operation,methodParamDescriptions.get("@return"));  } else {    log.debug("Skipping method \"" + method.getName() + "\" because it is either not a RequestMapping or it is hidden.");  }}  }
class C{  public void savePreferences(Preferences prefs){  try {    prefs.putBoolean(ROTATE_LEFT_RIGHT_KEY,orbitRotateXCheckBox.isSelected());    prefs.putBoolean(ROTATE_UP_DOWN_KEY,orbitRotateYCheckBox.isSelected());    prefs.putBoolean(TRANSLATE_LEFT_RIGHT_KEY,orbitTranslateXCheckBox.isSelected());    prefs.putBoolean(TRANSLATE_UP_DOWN_KEY,orbitTranslateYCheckBox.isSelected());    prefs.putBoolean(MOVE_TOWARDS_AWAY_KEY,orbitZoomCheckBox.isSelected());    prefs.putBoolean(SELECT_KEY,selectBehCheckBox.isSelected());    prefs.putDouble(AUTO_ROTATE_X_KEY,rotAxis_X.getValue());    prefs.putDouble(AUTO_ROTATE_Y_KEY,rotAxis_Y.getValue());    prefs.putDouble(AUTO_ROTATE_Z_KEY,rotAxis_Z.getValue());    prefs.putDouble(AUTO_ROTATE_RATE_KEY,spinDuration.getValue());    prefs.putBoolean(AXES_KEY,showAxesCheckBox.isSelected());    prefs.putBoolean(TOOLTIPS_KEY,tooltips.isSelected());    prefs.putBoolean(SPOTLIGHT_KEY,showSpotlightCheckBox.isSelected());    prefs.putBoolean(AMBIENT_LIGHT_KEY,showAmbientLightCheckBox.isSelected());    prefs.putBoolean(BACKDROP_KEY,showBackgroundCheckBox.isSelected());    prefs.putInt(DRAW_POLYGONS_KEY,polyPoint.isSelected() ? 0 : polyLine.isSelected() ? 1 : 2);    prefs.putInt(DRAW_FACES_KEY,polyCullNone.isSelected() ? 0 : polyCullBack.isSelected() ? 1 : 2);    if (!Prefs.save(prefs))     Utilities.inform("Preferences Cannot be Saved","Your Java system can't save preferences.  Perhaps this is an applet?",this);  } catch (  java.security.AccessControlException e) {  }}  }
class C{  public MaterialPackageBO(KLVPacket.Header header,ByteProvider byteProvider,Map<Integer,MXFUID> localTagToUIDMap,IMFErrorLogger imfErrorLogger) throws IOException {  super(header);  long numBytesToRead=this.header.getVSize();  StructuralMetadata.populate(this,byteProvider,numBytesToRead,localTagToUIDMap);  if (this.instance_uid == null) {    imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_METADATA_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,MaterialPackage.ERROR_DESCRIPTION_PREFIX + "instance_uid is null");  }  if (this.tracks == null) {    imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_METADATA_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,MaterialPackage.ERROR_DESCRIPTION_PREFIX + "tracks is null");  } else {    for (    StrongRef strongRef : this.tracks.getEntries()) {      this.genericTrackInstanceUIDs.add(strongRef.getInstanceUID());    }  }}  }
class C{  @Override public String globalInfo(){  return "This Bayes Network learning algorithm uses a hill climbing algorithm " + "adding, deleting and reversing arcs. The search is not restricted by an order " + "on the variables (unlike K2). The difference with B and B2 is that this hill "+ "climber also considers arrows part of the naive Bayes structure for deletion.";}  }
class C{  public OMSpline(int[] xypoints){  super(xypoints);}  }
class C{  public void testNotationsSetNamedItemNS() throws Throwable {  Document doc;  NamedNodeMap notations;  DocumentType docType;  Element elem;  doc=(Document)load("hc_staff",builder);  docType=doc.getDoctype();  if (!(("text/html".equals(getContentType())))) {    assertNotNull("docTypeNotNull",docType);    notations=docType.getNotations();    assertNotNull("notationsNotNull",notations);    elem=doc.createElementNS("http://www.w3.org/1999/xhtml","br");    try {      notations.setNamedItemNS(elem);      fail("throw_HIER_OR_NO_MOD_ERR");    } catch (    DOMException ex) {switch (ex.code) {case 3:        break;case 7:      break;default :    throw ex;}}}}  }
class C{  public String execute(){  StorageManager storage=new StorageManager();  if (!storage.isStorageOk()) {    return "Failed to initialize local storage system";  }  if (Properties.CTG_DELETE_OLD_TMP_FOLDERS) {    storage.deleteAllOldTmpFolders();  }  if (!storage.createNewTmpFolders()) {    return "Failed to create tmp folders";  }  ProjectAnalyzer analyzer=new ProjectAnalyzer(target,prefix,cuts);  ProjectStaticData data=analyzer.analyze();  if (data.getTotalNumberOfTestableCUTs() == 0) {    return "There is no class to test in the chosen project\n" + "Target: " + target + "\n"+ "Prefix: '"+ prefix+ "'\n";  }  if (Properties.CTG_DEBUG_PORT != null && data.getTotalNumberOfTestableCUTs() != 1) {    throw new IllegalStateException("Cannot debug CTG when more than one CUT is selected");  }  if (Properties.CTG_TIME_PER_CLASS != null) {    configuration=configuration.getWithChangedTime(Properties.CTG_TIME_PER_CLASS,data.getTotalNumberOfTestableCUTs());  }  JobScheduler scheduler=new JobScheduler(data,configuration);  JobExecutor executor=new JobExecutor(storage,projectClassPath,configuration);  while (scheduler.canExecuteMore()) {    List<JobDefinition> jobs=scheduler.createNewSchedule();    executor.executeJobs(jobs,configuration.getNumberOfUsableCores());    executor.waitForJobs();  }  String description=storage.mergeAndCommitChanges(data,cuts);  if (exportFolder != null) {    try {      exportToFolder(".",exportFolder);    } catch (    IOException e) {      return "Failed to export tests: " + e.getMessage();    }  }  if (configuration.callHome) {  }  return description;}  }
class C{  public PureLogWriter(int level,PrintWriter logWriter,String connectionName){  super();  this.setLevel(level);  this.logWriter=logWriter;  this.connectionName=connectionName;}  }
class C{  protected final SerializerFactory findSerializerFactory(){  SerializerFactory factory=_serializerFactory;  if (factory == null) {    factory=SerializerFactory.createDefault();    _defaultSerializerFactory=factory;    _serializerFactory=factory;  }  return factory;}  }
class C{  public Object saveView(FacesContext context){  return oldStateManager.saveView(context);}  }
class C{  public static String camelToHypenNotation(String str){  if (isEmpty(str))   return str;  StringBuilder sb=new StringBuilder();  char c;  sb.append(Character.toLowerCase(str.charAt(0)));  for (int i=1; i < str.length(); i++) {    c=str.charAt(i);    if (Character.isUpperCase(c)) {      sb.append('-');      sb.append(Character.toLowerCase(c));    } else     sb.append(c);  }  return sb.toString();}  }
class C{  public void testPut() throws InterruptedException {  LinkedBlockingQueue q=new LinkedBlockingQueue(SIZE);  for (int i=0; i < SIZE; ++i) {    Integer I=new Integer(i);    q.put(I);    assertTrue(q.contains(I));  }  assertEquals(0,q.remainingCapacity());}  }
class C{  @Override public boolean hasAnyWatcherTriggered(){  return device.hasAnyWatcherTriggered();}  }
class C{  public static JSON from(Reader reader) throws IOException {  Assert.notNull("reader",reader);  String jsonString=IOUtils.toString(reader);  return from(jsonString);}  }
class C{  @Description(summary="Build H2 jar avoiding downloads (list missing files).") public void offline(){  downloadOrVerify(true);  if (filesMissing) {    println("Required files are missing");    println("Both Lucene 2 and 3 are supported using -Dlucene=x (x=2 or 3)");  } else {    jar();  }}  }
class C{  public static void constructAliasTable(int[] aliasTableArray){  int aliasTableSize=getAliasTableSize(aliasTableArray);  int averageWeight=getAliasTableAverageWeight(aliasTableArray);  int[] belowAverageIndices=new int[aliasTableSize];  int numBelowAverage=0;  int[] aboveAverageIndices=new int[aliasTableSize];  int numAboveAverage=0;  for (int i=0; i < aliasTableSize; i++) {    int weight=getWeight(aliasTableArray,i);    if (weight == averageWeight) {      setNextEntry(aliasTableArray,i,-1);    } else     if (weight < averageWeight) {      if (numAboveAverage > 0) {        int donatingItemIndex=aboveAverageIndices[--numAboveAverage];        setNextEntry(aliasTableArray,i,getEntry(aliasTableArray,donatingItemIndex));        int newWeight=getWeight(aliasTableArray,donatingItemIndex) - (averageWeight - weight);        setWeight(aliasTableArray,donatingItemIndex,newWeight);        if (newWeight == averageWeight) {          setNextEntry(aliasTableArray,donatingItemIndex,-1);        } else         if (newWeight < averageWeight) {          belowAverageIndices[numBelowAverage++]=donatingItemIndex;        } else {          aboveAverageIndices[numAboveAverage++]=donatingItemIndex;        }      } else {        belowAverageIndices[numBelowAverage++]=i;      }    } else {      aboveAverageIndices[numAboveAverage++]=i;    }  }  while (numBelowAverage > 0 && numAboveAverage > 0) {    int entryIndex=belowAverageIndices[--numBelowAverage];    int weight=getWeight(aliasTableArray,entryIndex);    int donatingElementIndex=aboveAverageIndices[--numAboveAverage];    setNextEntry(aliasTableArray,entryIndex,getEntry(aliasTableArray,donatingElementIndex));    int newWeight=getWeight(aliasTableArray,donatingElementIndex) - (averageWeight - weight);    setWeight(aliasTableArray,donatingElementIndex,newWeight);    if (newWeight == averageWeight) {      setNextEntry(aliasTableArray,donatingElementIndex,-1);    } else     if (newWeight < averageWeight) {      belowAverageIndices[numBelowAverage++]=donatingElementIndex;    } else {      aboveAverageIndices[numAboveAverage++]=donatingElementIndex;    }  }  for (int i=numBelowAverage - 1; i >= 0; i--) {    int index=belowAverageIndices[i];    setWeight(aliasTableArray,index,averageWeight);    setNextEntry(aliasTableArray,index,-1);  }  for (int i=numAboveAverage - 1; i >= 0; i--) {    int index=aboveAverageIndices[i];    setWeight(aliasTableArray,index,averageWeight);    setNextEntry(aliasTableArray,index,-1);  }}  }
class C{  public static JSONArray toJSONArray(JSONArray names,String string) throws JSONException {  return toJSONArray(names,new JSONTokener(string));}  }
class C{  public static void sort(long[] array){  sort(0,array.length,array);}  }
class C{  public static int pairHash(int i,int j,int k){  final int t=pairHash(i,j);  return pairHash(t,k);}  }
class C{  public Divide(){  super(Number.class,Number.class,Number.class);}  }
class C{  private void addHotkey(Hotkey hotkey,JRootPane pane){  String id=String.valueOf(hotkey.hashCode());  pane.getInputMap(INPUT_MAP_KEY).put(hotkey.keyStroke,PREFIX + id);  pane.getActionMap().put(PREFIX + id,createAction(hotkey));}  }
class C{  public void cardRead(){  physicalCardsRead++;}  }
class C{  public <T extends HealthIssue>void onDiscovered(T healthIssue){synchronized (mIssuesLock) {    mActiveIssues.add(healthIssue);  }  postTroubleshootingEvents(null);}  }
class C{  public static String stripHexPrefix(String hexString){  if (hexString.startsWith("0x") || hexString.startsWith("0X"))   return hexString.substring(2); else   return hexString;}  }
class C{  public void showWindow(){  view.setDepth("infinity");  view.setRevision("");  view.setIgnoreExternals(false);  view.setIsCustomRevision(false);  view.setIsHeadRevision(true);  view.setEnableUpdateButton(true);  view.setEnableCustomRevision(false);  view.showWindow();}  }
class C{  public SimpleSoundCloudUserView(Context context,AttributeSet attrs){  super(context,attrs);  if (!isInEditMode()) {    init();  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  boolean state;  Attr attribute;  Attr newAttribute;  doc=(Document)load("staff",false);  element=doc.createElement("address");  attribute=doc.createAttribute("domestic");  newAttribute=element.setAttributeNode(attribute);  state=element.hasAttribute("domestic");  assertTrue("elementhasattribute04",state);}  }
class C{  public ServiceRouteHeader createServiceRouteHeader(Address address){  if (address == null)   throw new NullPointerException("null address!");  ServiceRoute serviceRoute=new ServiceRoute();  serviceRoute.setAddress(address);  return serviceRoute;}  }
class C{  public void onFailure(int statusCode,Header[] headers,byte[] responseBody,Throwable error){  try {    String response=responseBody == null ? null : new String(responseBody,getCharset());    onFailure(statusCode,headers,error,response);  } catch (  UnsupportedEncodingException e) {    Log.e(LOG_TAG,e.toString());    onFailure(statusCode,headers,e,null);  }}  }
class C{  public boolean print() throws Exception {  boolean showDialogs=!GraphicsEnvironment.isHeadless();  return print(PrintMode.FIT_WIDTH,null,null,showDialogs,null,showDialogs,null);}  }
class C{  @Override public final void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"SSUB8");  translateAll(environment,instruction,"SSUB8",instructions);}  }
class C{  public boolean matches(String input){  TrieNode node=root;  for (int i=0; i < input.length(); i++) {    node=node.getChild(input.charAt(i));    if (node == null)     return false;    if (node.isTerminal())     return true;  }  return false;}  }
class C{  private int lowerHeightMap(int x,int y,int z){  for (--y; y >= 0; --y) {    if (getType(x,z,y) != 0) {      break;    }  }  return y + 1;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:58.129 -0500",hash_original_method="013DF8509B89AA0EABD8A254078FCC60",hash_generated_method="608257C18AFEB7152BC97B09FB556558") public void clearTestProviderStatus(String provider){  try {    mService.clearTestProviderStatus(provider);  } catch (  RemoteException ex) {    Log.e(TAG,"clearTestProviderStatus: RemoteException",ex);  }}  }
class C{  public static int pickFromDistribution(final Object[] objs,final RandomChoiceChooser chooser,final float prob,final int checkboundary){  if (prob < 0.0f || prob > 1.0f)   throw new ArithmeticException("Invalid probability for pickFromDistribution (must be 0.0<=x<=1.0)");  if (objs.length == 1)   return 0; else   if (objs.length < checkboundary) {    for (int x=0; x < objs.length - 1; x++)     if (chooser.getProbability(objs[x]) > prob)     return exemptZeroes(objs,chooser,x);    return exemptZeroes(objs,chooser,objs.length - 1);  } else {    int top=objs.length - 1;    int bottom=0;    int cur;    while (top != bottom) {      cur=(top + bottom) / 2;      if (chooser.getProbability(objs[cur]) > prob)       if (cur == 0 || chooser.getProbability(objs[cur - 1]) <= prob)       return exemptZeroes(objs,chooser,cur); else       top=cur; else       if (cur == objs.length - 1)       return exemptZeroes(objs,chooser,cur); else       if (bottom == cur)       bottom++; else       bottom=cur;    }    return exemptZeroes(objs,chooser,bottom);  }}  }
class C{  public FireStation(){  super();}  }
class C{  private String c(String str){  return str + count;}  }
class C{  public RawProperty(String name,String value){  this(name,null,value);}  }
class C{  private static ThreadRegisters parseThreadNode(final Node node) throws MessageParserException {  final List<RegisterValue> registerValues=new ArrayList<>();  final long tid=Long.valueOf(node.getAttributes().getNamedItem("id").getNodeValue());  final NodeList children=node.getChildNodes();  for (int i=0; i < children.getLength(); ++i) {    final Node child=children.item(i);    final String registerName=getAttribute(child,"name");    final BigInteger registerValue=new BigInteger(getAttribute(child,"value"),16);    final byte[] memory=MemoryStringParser.parseMemoryString(getAttribute(child,"memory"));    final boolean isPc=hasAttribute(child,"pc");    final boolean isSp=hasAttribute(child,"sp");    registerValues.add(new RegisterValue(registerName,registerValue,memory,isPc,isSp));  }  return new ThreadRegisters(tid,registerValues);}  }
class C{  private void writeFlowModToSwitch(DatapathId dpid,OFFlowMod flowMod){  IOFSwitch ofSwitch=switchService.getSwitch(dpid);  if (ofSwitch == null) {    if (log.isDebugEnabled()) {      log.debug("Not deleting key {} :: switch {} not connected",dpid.toString());    }    return;  }  writeFlowModToSwitch(ofSwitch,flowMod);}  }
class C{  private void createMenu(){  JMenu mFile=AEnv.getMenu("File");  menuBar.add(mFile);  AEnv.addMenuItem("PrintScreen",null,KeyStroke.getKeyStroke(KeyEvent.VK_PRINTSCREEN,0),mFile,this);  AEnv.addMenuItem("ScreenShot",null,KeyStroke.getKeyStroke(KeyEvent.VK_PRINTSCREEN,Event.SHIFT_MASK),mFile,this);  AEnv.addMenuItem("Report",null,KeyStroke.getKeyStroke(KeyEvent.VK_P,Event.ALT_MASK),mFile,this);  mFile.addSeparator();  AEnv.addMenuItem("End",null,KeyStroke.getKeyStroke(KeyEvent.VK_X,Event.ALT_MASK),mFile,this);  AEnv.addMenuItem("Exit",null,KeyStroke.getKeyStroke(KeyEvent.VK_X,Event.SHIFT_MASK + Event.ALT_MASK),mFile,this);  JMenu mView=AEnv.getMenu("View");  menuBar.add(mView);  if (MRole.getDefault().isAllow_Info_Product()) {    AEnv.addMenuItem("InfoProduct",null,KeyStroke.getKeyStroke(KeyEvent.VK_I,Event.ALT_MASK),mView,this);  }  if (MRole.getDefault().isAllow_Info_BPartner()) {    AEnv.addMenuItem("InfoBPartner",null,KeyStroke.getKeyStroke(KeyEvent.VK_I,Event.ALT_MASK + Event.CTRL_MASK),mView,this);  }  if (MRole.getDefault().isShowAcct() && MRole.getDefault().isAllow_Info_Account()) {    AEnv.addMenuItem("InfoAccount",null,KeyStroke.getKeyStroke(KeyEvent.VK_I,Event.ALT_MASK + Event.CTRL_MASK),mView,this);  }  if (MRole.getDefault().isAllow_Info_Schedule()) {    AEnv.addMenuItem("InfoSchedule",null,null,mView,this);  }  mView.addSeparator();  if (MRole.getDefault().isAllow_Info_Order()) {    AEnv.addMenuItem("InfoOrder","Info",null,mView,this);  }  if (MRole.getDefault().isAllow_Info_Invoice()) {    AEnv.addMenuItem("InfoInvoice","Info",null,mView,this);  }  if (MRole.getDefault().isAllow_Info_InOut()) {    AEnv.addMenuItem("InfoInOut","Info",null,mView,this);  }  if (MRole.getDefault().isAllow_Info_Payment()) {    AEnv.addMenuItem("InfoPayment","Info",null,mView,this);  }  if (MRole.getDefault().isAllow_Info_CashJournal()) {    AEnv.addMenuItem("InfoCashLine","Info",null,mView,this);  }  if (MRole.getDefault().isAllow_Info_Resource()) {    AEnv.addMenuItem("InfoAssignment","Info",null,mView,this);  }  if (MRole.getDefault().isAllow_Info_Asset()) {    AEnv.addMenuItem("InfoAsset","Info",null,mView,this);  }  JMenu mTools=AEnv.getMenu("Tools");  menuBar.add(mTools);  AEnv.addMenuItem("Calculator",null,null,mTools,this);  AEnv.addMenuItem("Calendar",null,null,mTools,this);  AEnv.addMenuItem("Editor",null,null,mTools,this);  MUser user=MUser.get(Env.getCtx());  if (user.isAdministrator())   AEnv.addMenuItem("Script",null,null,mTools,this);  if (MRole.getDefault().isShowPreference()) {    mTools.addSeparator();    AEnv.addMenuItem("Preference",null,null,mTools,this);  }  AMenu aMenu=(AMenu)Env.getWindow(0);  JMenu mWindow=new WindowMenu(aMenu.getWindowManager(),this);  menuBar.add(mWindow);  JMenu mHelp=AEnv.getMenu("Help");  menuBar.add(mHelp);  AEnv.addMenuItem("Help","Help",KeyStroke.getKeyStroke(KeyEvent.VK_F1,0),mHelp,this);  AEnv.addMenuItem("Online",null,null,mHelp,this);  AEnv.addMenuItem("EMailSupport",null,null,mHelp,this);  AEnv.addMenuItem("About",null,null,mHelp,this);}  }
class C{  @Override public void process(XmlPullParser parser) throws XmlPullParserException, IOException {  int attributesCount=parser.getAttributeCount();  String attributeName, attributeValue;  for (int i=0; i < attributesCount; ++i) {    attributeName=parser.getAttributeName(i);    attributeValue=parser.getAttributeValue(i);    if ("name".equals(attributeName)) {      if (attributeValue == null || attributeValue.length() == 0) {        continue;      }      String clazzName=parser.nextText();      layoutClazzNameMap.put(attributeValue,clazzName);      break;    }  }}  }
class C{  public synchronized void add(double minValue,double maxValue){  super.add(minValue);  mMaxValues.add(maxValue);}  }
class C{  public void dump(Printer pw,String prefix){  pw.println(prefix + "inputType=0x" + Integer.toHexString(inputType)+ " imeOptions=0x"+ Integer.toHexString(imeOptions)+ " privateImeOptions="+ privateImeOptions);  pw.println(prefix + "actionLabel=" + actionLabel+ " actionId="+ actionId);  pw.println(prefix + "initialSelStart=" + initialSelStart+ " initialSelEnd="+ initialSelEnd+ " initialCapsMode=0x"+ Integer.toHexString(initialCapsMode));  pw.println(prefix + "hintText=" + hintText+ " label="+ label);  pw.println(prefix + "packageName=" + packageName+ " fieldId="+ fieldId+ " fieldName="+ fieldName);  pw.println(prefix + "extras=" + extras);}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  protected void dispatchKeyboardEvent(String eventType,GraphicsNodeKeyEvent evt){  FocusManager fmgr=context.getFocusManager();  if (fmgr == null) {    return;  }  Element targetElement=(Element)fmgr.getCurrentEventTarget();  if (targetElement == null) {    targetElement=context.getDocument().getDocumentElement();  }  DocumentEvent d=(DocumentEvent)targetElement.getOwnerDocument();  DOMKeyboardEvent keyEvt=(DOMKeyboardEvent)d.createEvent("KeyboardEvent");  String modifiers=DOMUtilities.getModifiersList(evt.getLockState(),evt.getModifiers());  keyEvt.initKeyboardEventNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,eventType,true,true,null,mapKeyCodeToIdentifier(evt.getKeyCode()),mapKeyLocation(evt.getKeyLocation()),modifiers);  try {    ((EventTarget)targetElement).dispatchEvent(keyEvt);  } catch (  RuntimeException e) {    ua.displayError(e);  }}  }
class C{  @After public void tearDown() throws Exception {}  }
class C{  public IvParameterSpec(byte[] iv){  if (iv == null) {    throw new NullPointerException("iv == null");  }  this.iv=new byte[iv.length];  System.arraycopy(iv,0,this.iv,0,iv.length);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:48.359 -0500",hash_original_method="6FE1F5C82C04AB08E12223950D7EB08A",hash_generated_method="0970F67E09B2A5AAF9041B560FB4FFF3") static boolean isPrimitiveType(char typecode){  return 1 == ((typecode + '[' + typecode+ 'L'));}  }
class C{  public boolean isSelectionDefined(World world){  checkNotNull(world);  if (selector.getIncompleteRegion().getWorld() == null || !selector.getIncompleteRegion().getWorld().equals(world)) {    return false;  }  return selector.isDefined();}  }
class C{  public static CMSSignedData replaceSigners(CMSSignedData signedData,SignerInformationStore signerInformationStore){  CMSSignedData cms=new CMSSignedData(signedData);  cms.signerInfoStore=signerInformationStore;  ASN1EncodableVector digestAlgs=new ASN1EncodableVector();  ASN1EncodableVector vec=new ASN1EncodableVector();  Iterator it=signerInformationStore.getSigners().iterator();  while (it.hasNext()) {    SignerInformation signer=(SignerInformation)it.next();    digestAlgs.add(CMSSignedHelper.INSTANCE.fixAlgID(signer.getDigestAlgorithmID()));    vec.add(signer.toASN1Structure());  }  ASN1Set digests=new DERSet(digestAlgs);  ASN1Set signers=new DERSet(vec);  ASN1Sequence sD=(ASN1Sequence)signedData.signedData.toASN1Primitive();  vec=new ASN1EncodableVector();  vec.add(sD.getObjectAt(0));  vec.add(digests);  for (int i=2; i != sD.size() - 1; i++) {    vec.add(sD.getObjectAt(i));  }  vec.add(signers);  cms.signedData=SignedData.getInstance(new BERSequence(vec));  cms.contentInfo=new ContentInfo(cms.contentInfo.getContentType(),cms.signedData);  return cms;}  }
class C{  public DiskAccessException(String msg,Region r){  this(msg,null,r == null ? null : r.getFullPath());}  }
class C{  private void initPanel(){  final JPanel mainPanel=new JPanel(new BorderLayout());  mainPanel.setBorder(new TitledBorder("Edit Selection Condition"));  final JPanel comboPanel=new JPanel(new BorderLayout());  comboPanel.setBorder(new EmptyBorder(5,5,5,5));  selectionStateBox.addItem(SelectionState.SELECTED);  selectionStateBox.addItem(SelectionState.UNSELECTED);  comboPanel.add(selectionStateBox,BorderLayout.CENTER);  mainPanel.add(comboPanel,BorderLayout.NORTH);  add(mainPanel,BorderLayout.CENTER);}  }
class C{  public void testRandomAccess() throws Exception {  JarArchive jar=new DefaultJarArchive(getResourcePath(PACKAGE_PATH + "randomaccess.jar"));  assertContains(jar.getResource("firstEntry.txt"),"firstEntry");  assertContains(jar.getResource("secondEntry.txt"),"secondEntry");  assertContains(jar.getResource("secondEntry.txt"),"secondEntry");  assertContains(jar.getResource("firstEntry.txt"),"firstEntry");}  }
class C{  public SpecificSynapseRulePanel(Collection<Synapse> synapseList,final Window parent,boolean startingState){  this.synapseCollection=synapseList;  this.parent=parent;  displaySPTriangle=new DropDownTriangle(UpDirection.LEFT,startingState,"Settings","Settings",parent);  initSynapseType();  startingPanel=synapsePanel;  this.setLayout(new BoxLayout(this,BoxLayout.Y_AXIS));  initializeLayout();  addListeners();}  }
class C{  private void killServer(){  adb("kill-server");}  }
class C{  @Override public void paintComponent(Graphics gx){  super.paintComponent(gx);  if (m_isEnabled) {    if (m_isNumeric) {      m_oldWidth=-9000;      this.removeAll();      paintNumeric(gx);    } else {      if (m_Instances != null && m_Instances.numInstances() > 0 && m_Instances.numAttributes() > 0) {        if (m_oldWidth != this.getWidth()) {          this.removeAll();          m_oldWidth=this.getWidth();          paintNominal(gx);        }      }    }  }}  }
class C{  private boolean journalRebuildRequired(){  final int REDUNDANT_OP_COMPACT_THRESHOLD=2000;  return redundantOpCount >= REDUNDANT_OP_COMPACT_THRESHOLD && redundantOpCount >= lruEntries.size();}  }
class C{  public void derEncode(OutputStream out) throws IOException {  out.write(toByteArray());}  }
class C{  public void addStreamId(String streamId){  addRepeatingExtension(new GphotoStreamId(streamId));}  }
class C{  public int removeWaypoint(Waypoint point){  int index=pointSet.getChildIndex(point);  if (index < 0) {    return (index);  }  point.removeMotionListener(this);  pointSet.removePoint(point);  if (index < (pointSet.getNumberOfChildren())) {    renumberWaypoints(index);  }  if (lineIsEnabled)   pointSet.updateLine(line);  if (polyIsEnabled)   pointSet.updatePolygon(poly);  updateGeometricState(0,false);  return (index);}  }
class C{  public static void main(String[] args){  Log.printLine("Starting NetworkExample1...");  try {    int num_user=1;    Calendar calendar=Calendar.getInstance();    boolean trace_flag=false;    CloudSim.init(num_user,calendar,trace_flag);    Datacenter datacenter0=createDatacenter("Datacenter_0");    DatacenterBroker broker=createBroker();    int brokerId=broker.getId();    vmlist=new ArrayList<Vm>();    int vmid=0;    int mips=250;    long size=10000;    int ram=512;    long bw=1000;    int pesNumber=1;    String vmm="Xen";    Vm vm1=new Vm(vmid,brokerId,mips,pesNumber,ram,bw,size,vmm,new CloudletSchedulerTimeShared());    vmlist.add(vm1);    broker.submitVmList(vmlist);    cloudletList=new ArrayList<Cloudlet>();    int id=0;    long length=40000;    long fileSize=300;    long outputSize=300;    UtilizationModel utilizationModel=new UtilizationModelFull();    Cloudlet cloudlet1=new Cloudlet(id,length,pesNumber,fileSize,outputSize,utilizationModel,utilizationModel,utilizationModel);    cloudlet1.setUserId(brokerId);    cloudletList.add(cloudlet1);    broker.submitCloudletList(cloudletList);    NetworkTopology.buildNetworkTopology("topology.brite");    int briteNode=0;    NetworkTopology.mapNode(datacenter0.getId(),briteNode);    briteNode=3;    NetworkTopology.mapNode(broker.getId(),briteNode);    CloudSim.startSimulation();    List<Cloudlet> newList=broker.getCloudletReceivedList();    CloudSim.stopSimulation();    printCloudletList(newList);    Log.printLine("NetworkExample1 finished!");  } catch (  Exception e) {    e.printStackTrace();    Log.printLine("The simulation has been terminated due to an unexpected error");  }}  }
class C{  public boolean isArchived(){  return archived;}  }
class C{  @SuppressWarnings("rawtypes") final private void handleTerm(final IV<?,?> iv,final Collection<IV<?,?>> ivs,final Set<IV<?,?>> unrequested){  if (iv instanceof SidIV) {    handleSid((SidIV)iv,ivs,unrequested);  } else {    if (!ivs.contains(iv)) {      unrequested.add(iv);    }  }}  }
class C{  private void startECOCProcess(ExampleSet originalExampleSet,String[][] codeMatrix) throws OperatorException {  ExampleSet exampleSet=(ExampleSet)originalExampleSet.clone();  int numberOfClasses=codeMatrix.length;  int currentNumber=0;  HashMap<Integer,String> classIndexMap=new HashMap<Integer,String>(numberOfClasses);  for (  String currentClass : getLabel().getMapping().getValues()) {    classIndexMap.put(currentNumber,currentClass);    currentNumber++;  }  double[][] codeWords=new double[codeMatrix.length][codeMatrix[0].length];  for (int i=0; i < codeMatrix.length; i++) {    for (int j=0; j < codeMatrix[0].length; j++) {      codeWords[i][j]="true".equals(codeMatrix[i][j]) ? 1.0 : 0.0;    }  }  double[][] confidenceMatrix=new double[exampleSet.size()][getNumberOfModels()];  String currentLabel;  double currentConfidence;  for (int k=0; k < confidenceMatrix[0].length; k++) {    Model model=getModel(k);    exampleSet=model.apply(exampleSet);    Iterator<Example> reader=exampleSet.iterator();    int counter=0;    while (reader.hasNext()) {      Example example=reader.next();      Attribute predictedLabel=example.getAttributes().getPredictedLabel();      currentLabel=predictedLabel.getMapping().mapIndex((int)example.getValue(predictedLabel));      currentConfidence=example.getConfidence(currentLabel);      confidenceMatrix[counter][k]="true".equals(currentLabel) ? currentConfidence : 1 - currentConfidence;      counter++;    }    PredictionModel.removePredictedLabel(exampleSet);  }  Iterator<Example> reader=originalExampleSet.iterator();  int counter=0;  while (reader.hasNext()) {    Example example=reader.next();    int bestIndex=-1;    double[] confidenceVector=new double[numberOfClasses];    double bestConfidence=Double.POSITIVE_INFINITY;    for (int i=0; i < numberOfClasses; i++) {      confidenceVector[i]=0.0;      for (int j=0; j < confidenceMatrix[counter].length; j++) {        confidenceVector[i]=confidenceVector[i] + Math.abs(confidenceMatrix[counter][j] - codeWords[i][j]);      }      if (confidenceVector[i] < bestConfidence) {        bestConfidence=confidenceVector[i];        bestIndex=i;      }    }    example.setPredictedLabel(getLabel().getMapping().mapString(classIndexMap.get(bestIndex)));    int numberOfFunctions=codeMatrix[0].length;    for (int i=0; i < numberOfClasses; i++) {      example.setConfidence(classIndexMap.get(i),(numberOfFunctions - confidenceVector[i]) / numberOfFunctions);    }    counter++;  }}  }
class C{  public X509Certificate engineLookupResolveX509Certificate(Element element,String baseURI,StorageResolver storage) throws KeyResolverException {  return null;}  }
class C{  private HashEntry<K,V> scanAndLockForPut(K key,int hash,V value){  HashEntry<K,V> first=entryForHash(this,hash);  HashEntry<K,V> e=first;  HashEntry<K,V> node=null;  int retries=-1;  while (!tryLock()) {    HashEntry<K,V> f;    if (retries < 0) {      if (e == null) {        if (node == null)         node=new HashEntry<K,V>(hash,key,value,null);        retries=0;      } else       if (key.equals(e.key))       retries=0; else       e=e.next;    } else     if (++retries > MAX_SCAN_RETRIES) {      lock();      break;    } else     if ((retries & 1) == 0 && (f=entryForHash(this,hash)) != first) {      e=first=f;      retries=-1;    }  }  return node;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:28.478 -0500",hash_original_method="777E43DCC11684FA65853DF87647331C",hash_generated_method="777E43DCC11684FA65853DF87647331C") AlarmManager(IAlarmManager service){  mService=service;}  }
class C{  @Override public int print(Graphics g,PageFormat pf,int pageIndex){  if (pageIndex != 0) {    return NO_SUCH_PAGE;  }  Graphics2D g2=(Graphics2D)g;  double x=pf.getImageableX();  double y=pf.getImageableY();  double w=pf.getImageableWidth();  double h=pf.getImageableHeight();  this.chart.draw(g2,new Rectangle2D.Double(x,y,w,h),this.anchor,null);  return PAGE_EXISTS;}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public void show(JComponent comp,int x,int y){  this.x=x;  this.y=y;  super.show(comp,x,y);}  }
class C{  public void delete(Record record){  newUpdate(record.withDClass(DClass.NONE,0));}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public boolean hasWidthExt(){  return hasExtension(GphotoWidth.class);}  }
class C{  public static double lnToPhred(double val){  return -10 * LOG10_E * val;}  }
class C{  public char charAt(int index){  return fsb().charAt(m_start + index);}  }
class C{  public void addPatternObjects(List<ConfigurationPlugInPatternObject> configPattern) throws ConfigurationException {  initPatterns(configPattern);}  }
class C{  public void rotateAngleAxisZ(float angle){  if (mRotateMode != ROTATE_Z)   setRotationVector(ROTATE_Z);  float rotation=angle - mCurrentAngle[2];  mCurrentAngle[2]=mCurrentAngle[2] + (angle - mCurrentAngle[2]);  mRenderer.setRotationObject(rotation);}  }
class C{  private void addUtteranceToState(){  String rawText=inputField.getText().trim();  inputField.setText("");  if (rawText.equals("")) {    return;  } else   if (rawText.contains("/")) {    addIncrementalUtterance(rawText);  } else   if (rawText.contains("=")) {    addSpecialInput(rawText);  } else {    Map<String,Double> table=StringUtils.getTableFromInput(rawText);    new Thread(null).start();  }}  }
class C{  public void clearCache(){  ZipFile zipFile=_zipFileRef.getAndSet(null);  if (zipFile != null)   try {    zipFile.close();  } catch (  Exception e) {  }}  }
class C{  public void addAttribute(String pKey,String pValue){  fAttributes.put(pKey,pValue);}  }
class C{  public static void main(final String[] args){  CoordinateTransformation ct=args.length == 3 ? TransformationFactory.getCoordinateTransformation("WGS84",args[2]) : null;  Osm2TransitSchedule osm2mts=new Osm2TransitSchedule(ScheduleTools.createSchedule(),ct);  osm2mts.parse(args[0]);  osm2mts.createSchedule();  osm2mts.writeFile(args[1]);}  }
class C{  public void addHole(EdgeRing holeER){  holeER.setShell(this);  LinearRing hole=holeER.getRing();  if (holes == null)   holes=new ArrayList();  holes.add(hole);}  }
class C{  public static void closeSafely(@Nullable CloseableReference<?> ref){  if (ref != null) {    ref.close();  }}  }
class C{  public void reset(){  currBuf=0;  currBufIdx=-1;  bufPosition=0;  bufStart=0;  bufLength=0;  file.setLength(0);}  }
class C{  private double computeNestedDuration(InvocationSequenceData data){  if (data.getNestedSequences().isEmpty()) {    return 0;  }  double nestedDuration=0d;  boolean added=false;  for (  InvocationSequenceData nestedData : data.getNestedSequences()) {    if (null == nestedData.getParentSequence()) {      nestedDuration=nestedDuration + nestedData.getDuration();      added=true;    } else     if (null != nestedData.getTimerData()) {      nestedDuration=nestedDuration + nestedData.getTimerData().getDuration();      added=true;    } else     if ((null != nestedData.getSqlStatementData()) && (1 == nestedData.getSqlStatementData().getCount())) {      nestedDuration=nestedDuration + nestedData.getSqlStatementData().getDuration();      added=true;    }    if (!added && !nestedData.getNestedSequences().isEmpty()) {      nestedDuration=nestedDuration + computeNestedDuration(nestedData);    }    added=false;  }  return nestedDuration;}  }
class C{  public int read(byte[] buf,int offset,int length) throws IOException {  if (_is == null)   return -1;  int len=_is.read(buf,offset,length);  return len;}  }
class C{  public void disconnectAndCloseTab(final MqttAsyncConnection connection){  disconnectFromBroker(connection);  connection.closeConnection();  if (connection.getMessageLogger() != null && connection.getMessageLogger().isRunning()) {    connection.getMessageLogger().stop();  }  TabUtils.requestClose(connectionControllersMapping.get(connection).getTab());  subscriptionManagers.remove(connectionControllersMapping.get(connection));  connectionControllersMapping.remove(connection);  connectionTabs.remove(connection);  logger.debug("Closing connection tab; sm = {}; cc = {}; ct = {}",subscriptionManagers.keySet().size(),connectionControllersMapping.keySet().size(),connectionTabs.keySet().size());  connection.getScriptManager().stopScripts();  for (  final BaseMqttSubscription subscription : connection.getSubscriptions().values()) {    subscription.getStore().cleanUp();  }  connection.getStore().cleanUp();}  }
class C{  public S_Species createS_Species(){  S_SpeciesImpl s_Species=new S_SpeciesImpl();  return s_Species;}  }
class C{  private void $$$setupUI$$$(){  component=new JPanel();  component.setLayout(new GridLayoutManager(2,3,new Insets(0,0,0,0),-1,-1));  component.setPreferredSize(new Dimension(300,32));  final JPanel panel1=new JPanel();  panel1.setLayout(new GridLayoutManager(1,3,new Insets(0,0,0,0),-1,-1));  component.add(panel1,new GridConstraints(0,0,1,3,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,null,null,null,0,false));  appDir=new TextFieldWithBrowseButton();  appDir.setPreferredSize(new Dimension(300,24));  panel1.add(appDir,new GridConstraints(0,1,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW,null,new Dimension(700,-1),new Dimension(700,-1),0,false));  final JLabel label1=new JLabel();  this.$$$loadLabelText$$$(label1,ResourceBundle.getBundle("com/oroplatform/idea/oroplatform/messages/OroPlatformBundle").getString("settings.appDir"));  panel1.add(label1,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  appDirDefault=new JButton();  this.$$$loadButtonText$$$(appDirDefault,ResourceBundle.getBundle("com/oroplatform/idea/oroplatform/messages/OroPlatformBundle").getString("settings.default"));  panel1.add(appDirDefault,new GridConstraints(0,2,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  final Spacer spacer1=new Spacer();  component.add(spacer1,new GridConstraints(1,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_VERTICAL,1,GridConstraints.SIZEPOLICY_WANT_GROW,null,null,null,0,false));}  }
class C{  protected void cleanupEntities(){  cntCleanupEntitiesRuns.increment();  Calendar c=Calendar.getInstance();  c.add(Calendar.MILLISECOND,-ENTITY_TIMEOUT);  Date cutoff=c.getTime();  ArrayList<Entity> toRemove=new ArrayList<Entity>();  ArrayList<Entity> toKeep=new ArrayList<Entity>();  Iterator<Device> diter=deviceMap.values().iterator();  LinkedList<DeviceUpdate> deviceUpdates=new LinkedList<DeviceUpdate>();  while (diter.hasNext()) {    Device d=diter.next();    while (true) {      deviceUpdates.clear();      toRemove.clear();      toKeep.clear();      for (      Entity e : d.getEntities()) {        if (!e.getLastSeenTimestamp().equals(Entity.NO_DATE) && 0 > e.getLastSeenTimestamp().compareTo(cutoff)) {          toRemove.add(e);        } else {          toKeep.add(e);        }      }      if (toRemove.size() == 0) {        break;      }      cntEntityRemovedTimeout.increment();      for (      Entity e : toRemove) {        removeEntity(e,d.getEntityClass(),d.getDeviceKey(),toKeep);      }      if (toKeep.size() > 0) {        Device newDevice=allocateDevice(d.getDeviceKey(),d.getDHCPClientName(),d.oldAPs,d.attachmentPoints,toKeep,d.getEntityClass());        EnumSet<DeviceField> changedFields=EnumSet.noneOf(DeviceField.class);        for (        Entity e : toRemove) {          changedFields.addAll(findChangedFields(newDevice,e));        }        DeviceUpdate update=null;        if (changedFields.size() > 0) {          update=new DeviceUpdate(d,CHANGE,changedFields);        }        if (!deviceMap.replace(newDevice.getDeviceKey(),d,newDevice)) {          d=deviceMap.get(d.getDeviceKey());          if (null != d)           continue;        }        if (update != null) {          cntDeviceChanged.increment();          deviceUpdates.add(update);        }      } else {        DeviceUpdate update=new DeviceUpdate(d,DELETE,null);        if (!deviceMap.remove(d.getDeviceKey(),d)) {          d=deviceMap.get(d.getDeviceKey());          if (null != d)           continue;          cntDeviceDeleted.increment();        }        deviceUpdates.add(update);      }      processUpdates(deviceUpdates);      break;    }  }  debugEventService.flushEvents();}  }
class C{  @Ignore("NaN behavior TBD") @Test public void testRhumbAzimuth_WithNaN() throws Exception {  Location begin=new Location(Double.NaN,Double.NaN);  Location end=new Location(34.2,-119.2);  double azimuth=begin.rhumbAzimuth(end);  assertTrue("expecting NaN",Double.isNaN(azimuth));}  }
class C{  public int size(){  return foundations.size();}  }
class C{  public UserPreferencesRestRep updatePreferences(UserPreferencesUpdateParam input){  UriBuilder builder=client.uriBuilder(PathConstants.USER_PREFERENCES);  return client.putURI(UserPreferencesRestRep.class,input,builder.build());}  }
class C{  private String generateSystemEventFile() throws IOException {  LogRequest logReqInfo=new LogRequest.Builder().nodeIds(_nodeIds).baseNames(sysEventlogFileNames).logLevel(_severity).startTime(_start).endTime(_end).regex(_msgRegex).maxCont(maxCount).build();  String fileName=SYSTEM_EVENT_FILE_NAME + getFileExtension();  generateLogFile(logReqInfo,mediaType,SYSTEM_EVENT_FILE_PATH,fileName);  return SYSTEM_EVENT_FILE_PATH;}  }
class C{  public long loadLong(){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return 0L;}  }
class C{  public void sendCapacityExceededEvent(LicenseInfoExt licenseInfo,MediaType mediaType) throws CoordinatorClientException, Exception {  if (licenseInfo.isTrialLicense()) {    _log.info("CallHomeEventsFacade will not send capacity exceeded event for trial license of type {}",licenseInfo.getLicenseType().toString());    return;  }  licenseInfo.setLastCapacityExceededEventDate(formatCurrentDate());  _log.info("CallHomeEventsFacade::sendCapacityExceededEvent updating coordinator with {} capacity exceeded data",licenseInfo.getLicenseType().toString());  _licenseManager.updateCoordinatorWithLicenseInfo(licenseInfo);  _log.info("CallHomeEventsFacade::sendCapacityExceededEvent sending {} capacity exceeded data to SYR",licenseInfo.getLicenseType());  SendCapacityExceededEvent sendCapacityExceededEvent=new SendCapacityExceededEvent(serviceInfo,logSvcPropertiesLoader,mediaType,licenseInfo,coordinator);  sendCapacityExceededEvent.callEMCHome();  auditMgr.recordAuditLog(null,null,"callHome",OperationTypeEnum.SEND_CAPACITY_EXCEEDED,System.currentTimeMillis(),AuditLogManager.AUDITLOG_SUCCESS,null,licenseInfo.getLicenseType().toString(),licenseInfo.getProductId(),licenseInfo.getModelId(),licenseInfo.getStorageCapacity());}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public ToStringBuilder append(String fieldName,Object[] array,boolean fullDetail){  style.append(buffer,fieldName,array,BooleanUtils.toBooleanObject(fullDetail));  return this;}  }
class C{  @Transactional public void addAbusePointDeductNotification(final JSONObject requestJSONObject) throws ServiceException {  try {    requestJSONObject.put(Notification.NOTIFICATION_DATA_TYPE,Notification.DATA_TYPE_C_ABUSE_POINT_DEDUCT);    addNotification(requestJSONObject);  } catch (  final RepositoryException e) {    final String msg="Adds notification [type=abuse_point_deduct] failed";    LOGGER.log(Level.ERROR,msg,e);    throw new ServiceException(msg);  }}  }
class C{  public SmsMmsMessage(Context _context,SmsMessage[] messages,long _timestamp){  SmsMessage sms=messages[0];  context=_context;  timestamp=_timestamp;  messageType=MESSAGE_TYPE_SMS;  fromAddress=sms.getDisplayOriginatingAddress();  fromEmailGateway=sms.isEmail();  messageClass=sms.getMessageClass();  String body="";  try {    if (messages.length == 1 || sms.isReplace()) {      body=sms.getDisplayMessageBody();    } else {      StringBuilder bodyText=new StringBuilder();      for (int i=0; i < messages.length; i++) {        bodyText.append(messages[i].getMessageBody());      }      body=bodyText.toString();    }  } catch (  Exception e) {    if (BuildConfig.DEBUG)     Log.v("SmsMmsMessage<init> exception: " + e.toString());  }  messageBody=body;  ContactIdentification contactIdentify=null;  if (fromEmailGateway) {    if (BuildConfig.DEBUG)     Log.v("Sms came from email gateway");    contactIdentify=SmsPopupUtils.getPersonIdFromEmail(context,fromAddress);    contactName=fromAddress;  } else {    if (BuildConfig.DEBUG)     Log.v("Sms did NOT come from email gateway");    contactIdentify=SmsPopupUtils.getPersonIdFromPhoneNumber(context,fromAddress);    contactName=PhoneNumberUtils.formatNumber(fromAddress);  }  if (contactIdentify != null) {    contactId=contactIdentify.contactId;    contactLookupKey=contactIdentify.contactLookup;    contactName=contactIdentify.contactName;  }  final long smscTimestamp=sms.getTimestampMillis();  SmsPopupUtils.updateSmscTimestampDrift(context,timestamp,smscTimestamp);  locateMessageId();  unreadCount=1;  final ArrayList<SmsMmsMessage> unreadMessages=SmsPopupUtils.getUnreadMessages(context);  if (unreadMessages != null) {    final int size=unreadMessages.size();    boolean found=false;    for (int i=0; i < size; i++) {      if (unreadMessages.get(i).messageId == messageId) {        found=true;      }    }    unreadCount=found ? size : size + 1;  }}  }
class C{  public String optString(String key,String defaultValue){  Object object=this.opt(key);  return NULL.equals(object) ? defaultValue : object.toString();}  }
class C{  protected void listadoprestamosverExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  AppUser appUser=getAppUser(request);  ServiceRepository services=ServiceRepository.getInstance(ServiceClient.create(appUser));  saveCurrentInvocation(KeysClientsInvocations.SOLICITUDES_LISTADO_PRESTAMOS_VER,request);  List prestamosConNotas=generateListadoPrestamos(appUser);  CollectionUtils.transform(prestamosConNotas,PrestamoToPO.getInstance(request.getLocale(),services));  request.setAttribute(PrestamosConstants.LISTA_PRESTAMOS_KEY,prestamosConNotas);  request.setAttribute(PrestamosConstants.VER_BOTON_ELIMINAR,new Boolean(true));  request.setAttribute(PrestamosConstants.VER_COLUMNA_NOTAS,new Boolean(true));  request.setAttribute(PrestamosConstants.VER_COLUMNA_SELECCIONAR,new Boolean(true));  request.setAttribute(PrestamosConstants.METHOD,METHOD_LISTADOSVER);  setReturnActionFordward(request,mapping.findForward("listado_prestamo"));}  }
class C{  public void testLength(){  try {    CoderResult.UNDERFLOW.length();    fail("Should throw UnsupportedOperationException");  } catch (  UnsupportedOperationException ex) {  }  try {    CoderResult.OVERFLOW.length();    fail("Should throw UnsupportedOperationException");  } catch (  UnsupportedOperationException ex) {  }  assertEquals(CoderResult.malformedForLength(1).length(),1);  assertEquals(CoderResult.unmappableForLength(1).length(),1);}  }
class C{  public IContentProposalProvider createProviderForPath(IPath root){  return new ModuleSpecifierContentProposalProvider(root);}  }
class C{  public final void writeUTF(String str) throws IOException {  int strlen=str.length();  int utflen=0;  for (int i=0; i < strlen; i++) {    int c=str.charAt(i);    if ((c >= 0x0001) && (c <= 0x007F)) {      utflen++;    } else     if (c > 0x07FF) {      utflen+=3;    } else {      utflen+=2;    }  }  if (utflen > 65535) {    throw new UTFDataFormatException();  }  write((utflen >>> 8) & 0xFF);  write((utflen) & 0xFF);  for (int i=0; i < strlen; i++) {    int c=str.charAt(i);    if ((c >= 0x0001) && (c <= 0x007F)) {      write(c);    } else     if (c > 0x07FF) {      write(0xE0 | ((c >> 12) & 0x0F));      write(0x80 | ((c >> 6) & 0x3F));      write(0x80 | ((c) & 0x3F));    } else {      write(0xC0 | ((c >> 6) & 0x1F));      write(0x80 | ((c) & 0x3F));    }  }}  }
class C{  public void sendData(byte[][] data,int offset,int count,String targetHostName,int targetPort,long interval){  if ((data == null) || (data.length <= 0)) {    if (__IEsptouchTask.DEBUG) {      Log.e(TAG,"sendData(): data == null or length <= 0");    }    return;  }  for (int i=offset; !mIsStop && i < offset + count; i++) {    if (data[i].length == 0) {      continue;    }    try {      DatagramPacket localDatagramPacket=new DatagramPacket(data[i],data[i].length,InetAddress.getByName(targetHostName),targetPort);      this.mSocket.send(localDatagramPacket);    } catch (    UnknownHostException e) {      if (__IEsptouchTask.DEBUG) {        Log.e(TAG,"sendData(): UnknownHostException");      }      e.printStackTrace();      mIsStop=true;      break;    }catch (    IOException e) {      if (__IEsptouchTask.DEBUG) {        Log.e(TAG,"sendData(): IOException, but just ignore it");      }    }    try {      Thread.sleep(interval);    } catch (    InterruptedException e) {      e.printStackTrace();      if (__IEsptouchTask.DEBUG) {        Log.e(TAG,"sendData is Interrupted");      }      mIsStop=true;      break;    }  }  if (mIsStop) {    close();  }}  }
class C{  public boolean isSetRegisterRequest(){  return this.registerRequest != null;}  }
class C{  public String encodeBody(){  return contentEncoding;}  }
class C{  void computeUserFactorAndRoleFactorForOneUser(UserAssignmentFactors result,final List<UserAssignment> userAssignmentsForOneUser,PricingPeriod period,BillingInput billingInput){  UserAssignment previousAssignment=null;  List<UserAssignment> userAssignmentsForSameSlices=new ArrayList<UserAssignment>();  if (!userAssignmentsForOneUser.isEmpty()) {    long userKey=userAssignmentsForOneUser.get(0).getUserKey();    String userId=userAssignmentsForOneUser.get(0).getUserId();    for (    UserAssignment userAssignment : userAssignmentsForOneUser) {      if (previousAssignment != null && areNotAffectingSameTimeSlice(userAssignment,previousAssignment,period)) {        computeUserFactorForAssignmentsAffectingSameSlices(result,userAssignmentsForSameSlices,period,billingInput,userKey,userId);        computeUserRoleFactorForAssignmentsAffectingSameSlices(result,userAssignmentsForSameSlices,period,billingInput,userKey);        userAssignmentsForSameSlices.clear();      }      userAssignmentsForSameSlices.add(userAssignment);      previousAssignment=userAssignment;    }    computeUserFactorForAssignmentsAffectingSameSlices(result,userAssignmentsForSameSlices,period,billingInput,userKey,userId);    computeUserRoleFactorForAssignmentsAffectingSameSlices(result,userAssignmentsForSameSlices,period,billingInput,userKey);  }}  }
class C{  private LayoutManager createLayoutManager(){  return new SeaGlassRootLayout();}  }
class C{  @Override protected boolean parametersAreValid(){  boolean allIsOk;  allIsOk=true;  String text;  int junk;  boolean temp;  temp=intParameterIsValid(bootload,0,255);  allIsOk&=temp;  if (!temp) {    log.info("Bootloader Version Number is not valid: " + bootload.getText());  }  temp=intParameterIsValid(mfg,0,255);  allIsOk&=temp;  if (!temp) {    log.info("Manufacturer Number is not valid: " + mfg.getText());  }  temp=intParameterIsValid(developer,0,255);  allIsOk&=temp;  if (!temp) {    log.info("Developer Number is not valid: " + bootload.getText());  }  temp=intParameterIsValid(product,0,65535);  allIsOk&=temp;  if (!temp) {    log.info("Product Code is not valid: " + product.getText());  }  temp=intParameterIsValid(hardware,0,255);  allIsOk&=temp;  if (!temp) {    log.info("Hardware Version Number is not valid: " + hardware.getText());  }  temp=intParameterIsValid(software,0,255);  allIsOk&=temp;  if (!temp) {    log.info("Software Version Number is not valid: " + software.getText());  }  temp=intParameterIsValid(delay,Integer.parseInt(MIN_DELAY_VALUE),Integer.parseInt(MAX_DELAY_VALUE));  allIsOk&=temp;  if (!temp) {    log.info("Delay is not valid: " + delay.getText());  }  temp=(hardgroup.getSelection() != null);  allIsOk&=temp;  if (!temp) {    log.info("No harware version check radio button is selected.");  }  temp=(softgroup.getSelection() != null);  allIsOk&=temp;  if (!temp) {    log.info("No software version check radio button is selected.");  }  temp=true;  eestart.setForeground(Color.black);  text=eestart.getText();  if (text.equals("")) {    eestart.setText("0");    eestart.setForeground(Color.red);    temp=false;  } else {    try {      junk=Integer.parseInt(text,16);    } catch (    NumberFormatException ex) {      junk=-1;    }    if ((junk < Integer.parseInt(MIN_EESTART_VALUE,16)) || ((junk % 8) != 0) || (junk > Integer.parseInt(MAX_EESTART_VALUE,16))) {      eestart.setForeground(Color.red);      temp=false;    } else {      eestart.setForeground(Color.black);      temp=true;    }  }  eestart.updateUI();  allIsOk&=temp;  if (allIsOk == true) {    log.debug("No problems found when checking parameter values.");  }  return allIsOk;}  }
class C{  void actionCommandImpl(Command cmd,ActionEvent ev){  if (cmd == null) {    return;  }  if (comboLock) {    if (cmd == menuBar.getCancelMenuItem()) {      actionCommand(cmd);      return;    }    Component c=getFocused();    if (c != null) {      c.fireClicked();    }    return;  }  if (cmd != menuBar.getSelectCommand()) {    if (commandListener != null) {      commandListener.fireActionEvent(ev);      if (ev.isConsumed()) {        return;      }    }    actionCommand(cmd);  } else {    Component c=getFocused();    if (c != null) {      c.fireClicked();    }  }}  }
class C{  void addTilesets(final InputSerializer in) throws IOException, ClassNotFoundException {  final int amount=in.readInt();  for (int i=0; i < amount; i++) {    final TileSetDefinition tileset=(TileSetDefinition)in.readObject(new TileSetDefinition(null,null,-1));    tilesets.add(tileset);  }}  }
class C{  public boolean isOEMCP(){  return this.OEMCP;}  }
class C{  public <T extends Serializable,R>Observable<R> observe(final DistributedTask<T,R> distributedTask){  return Observable.create(null);}  }
class C{  public static boolean contains(String[] vals,String value){  for (int i=0; i < vals.length; i++) {    if (vals[i].equals(value)) {      return true;    }  }  return false;}  }
class C{  public void testLongValuePos(){  String a="123809648392384754573567356745735.63567890295784902768787678287E+21";  BigDecimal aNumber=new BigDecimal(a);  long result=1246043477766677607L;  assertTrue("incorrect value",aNumber.longValue() == result);}  }
class C{  public String value(){  return value;}  }
class C{  public void deleteValue(String idDescr,String idCampo,String orden){  try {    DbConnection conn=getConnection();    final StringBuffer qual=new StringBuffer().append(" WHERE ").append(DBUtils.generateEQTokenField(CAMPO_ID_DESCR,idDescr)).append(" AND ").append(DBUtils.generateEQTokenField(CAMPO_ID_CAMPO,idCampo));    if (StringUtils.isNotBlank(orden))     qual.append(" AND ").append(DBUtils.generateEQTokenField(CAMPO_ORDEN,orden));    DbDeleteFns.delete(conn,TABLE_NAME,qual.toString());  } catch (  Exception e) {    logger.error("Error eliminando campo de tipo texto corto para el descriptor " + idDescr,e);    throw new DBException("eliminando campo de tipo texto corto",e);  }}  }
class C{  public void suspendEncoding() throws java.io.IOException {  flushBase64();  this.suspendEncoding=true;}  }
class C{  public void init() throws SourceException {  super.init();  try {    initBaseband(mDeviceHandle);    enableI2CRepeater(mDeviceHandle,true);    boolean i2CRepeaterControl=false;    initTuner(i2CRepeaterControl);    enableI2CRepeater(mDeviceHandle,false);  } catch (  UsbException e) {    throw new SourceException("error during init()",e);  }}  }
class C{  public static BigInteger generateX2(BigInteger q,SecureRandom random){  BigInteger min=ONE;  BigInteger max=q.subtract(ONE);  return BigIntegers.createRandomInRange(min,max,random);}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"OPERATORS\"";  db.execSQL(sql);}  }
class C{  public ProjectionTransverseMercator(Angle centralMeridian){  super(makeProjectionLimits(centralMeridian,DEFAULT_WIDTH));  if (centralMeridian == null) {    String message=Logging.getMessage("nullValue.CentralMeridianIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.centralMeridian=centralMeridian;}  }
class C{  public void copyFrom(PackageSettingBase base){  grantedPermissions=base.grantedPermissions;  gids=base.gids;  timeStamp=base.timeStamp;  firstInstallTime=base.firstInstallTime;  lastUpdateTime=base.lastUpdateTime;  signatures=base.signatures;  permissionsFixed=base.permissionsFixed;  haveGids=base.haveGids;  userState.clear();  for (int i=0; i < base.userState.size(); i++) {    userState.put(base.userState.keyAt(i),base.userState.valueAt(i));  }  installStatus=base.installStatus;}  }
class C{  public static void bitVectorToEdge(final BitVector bv,final long seed,final int numVertices,final int e[]){  bitVectorToEdge(bv,seed,numVertices,(int)(numVertices * 0xAAAAAAABL >>> 33),e);}  }
class C{  public KpcRunner(GraphWrapper graphWrapper,Parameters params){  super(graphWrapper.getGraph(),params);}  }
class C{  public static List<String> generateXVals(int from,int to){  List<String> xvals=new ArrayList<String>();  for (int i=from; i < to; i++) {    xvals.add("" + i);  }  return xvals;}  }
class C{  public void testDoTag() throws Exception {  System.out.println("doTag");  ForHtmlAttributeTag instance=new ForHtmlAttributeTag();  String value="<div>";  String expected="&lt;div>";  instance.setJspContext(_pageContext);  instance.setValue(value);  instance.doTag();  String results=_response.getContentAsString();  assertEquals(expected,results);}  }
class C{  private static void createAndShowGUI(List<File> pngs){  JFrame frame=new JFrame("ImageViewer");  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  ImageViewer animator=new ImageViewer(pngs);  frame.add(animator,BorderLayout.CENTER);  frame.pack();  frame.setVisible(true);}  }
class C{  public static int charToGsm(char c,boolean throwException) throws EncodeException {  int ret;  ret=sCharsToGsmTables[0].get(c,-1);  if (ret == -1) {    ret=sCharsToShiftTables[0].get(c,-1);    if (ret == -1) {      if (throwException) {        throw new EncodeException(c);      } else {        return sCharsToGsmTables[0].get(' ',' ');      }    } else {      return GSM_EXTENDED_ESCAPE;    }  }  return ret;}  }
class C{  public void removeService(BlockingService serviceImplementation){  String serviceName=getServiceName(serviceImplementation.getDescriptorForType());  if (serviceNameMap.remove(serviceName) != null) {    log.info("Removed " + serviceName);  }}  }
class C{  private void onTrigger5(){  final Context context=getContext();  final String localContextMenuDirection=getGestureDirectionForRequiredAction(getContext().getString(R.string.shortcut_value_local_breakout));  final String cursorControl=context.getString(R.string.title_edittext_controls);  final String selectAll=context.getString(android.R.string.selectAll);  addInstruction(R.string.accessibility_tutorial_lesson_5_text_6,true,localContextMenuDirection,cursorControl,selectAll);  mLayout.setAccessibilityDelegate(mSelectAllDelegate);}  }
class C{  public final String text(){  return toString(bytes);}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap entities;  NamedNodeMap notations;  Entity entity;  Notation notation;  Node newNode;  String nullNS=null;  doc=(Document)load("staffNS",true);  docType=doc.getDoctype();  entities=docType.getEntities();  assertNotNull("entitiesNotNull",entities);  notations=docType.getNotations();  assertNotNull("notationsNotNull",notations);  entity=(Entity)entities.getNamedItem("ent1");  notation=(Notation)notations.getNamedItem("notation1");{    boolean success=false;    try {      newNode=entities.setNamedItemNS(entity);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR_entities",success);  }{    boolean success=false;    try {      newNode=notations.setNamedItemNS(notation);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR_notations",success);  }}  }
class C{  @Override public BytesRef next() throws IOException {  BytesRef text;  while ((text=in.next()) != null) {    if (text.utf8ToString().indexOf('e') != -1)     return text;  }  return null;}  }
class C{  public final void removeMessages(int what,Object object){  mExec.removeMessages(what,object);}  }
class C{  public void actionPerformed(ActionEvent e){  JTextComponent target=getTextComponent(e);  if (target != null) {    target.paste();  }}  }
class C{  public static int randInt(int i0,int i1){  double x=raw();  int i=i0 + new Double(Math.floor((i1 - i0 + 1) * x)).intValue();  return i;}  }
class C{  private void addWindowsPath(int id,String path){  if (path == null || path.equals("")) {    return;  }  _sb.append(id);  _sb.append(" RCDATA BEGIN \"");  _sb.append(path.replaceAll("\\\\","\\\\\\\\").replaceAll("/","\\\\\\\\"));  _sb.append("\\0\" END\n");}  }
class C{  private void startLinkedQueryTargetServices(Map<URI,ExampleServiceState> exampleStates,int recursionDepth) throws Throwable {  Set<String> nextLayerLinks=new HashSet<>();  Set<String> previousLayerLinks=new HashSet<>();  this.host.log("Building document graph: Service count:%d, links per document:%d, layers:%d",this.serviceCount,this.linkCount,recursionDepth);  for (int layer=0; layer < recursionDepth + 1; layer++) {    nextLayerLinks.clear();    for (int i=0; i < this.serviceCount * Math.pow(this.linkCount,layer + 1); i++) {      nextLayerLinks.add(UriUtils.buildUriPath(GraphQueryValidationTestService.FACTORY_LINK,"layer-" + (layer + 1) + "-"+ UUID.randomUUID().toString()));    }    this.host.log("Graph vertex counts, next: %d, previous:%d, layer:%d",nextLayerLinks.size(),previousLayerLinks.size(),layer);    if (previousLayerLinks.isEmpty()) {      for (int i=0; i < this.serviceCount; i++) {        previousLayerLinks.add(UriUtils.buildUriPath(GraphQueryValidationTestService.FACTORY_LINK,"layer-" + layer + "-"+ UUID.randomUUID().toString()));      }    }    createGraphLayerOfLinkedServices(exampleStates,nextLayerLinks,previousLayerLinks,layer);    previousLayerLinks=new HashSet<>(nextLayerLinks);  }}  }
class C{  private Object[] computeNonJavaResources(){  int length=0;  Object[] resources=null;  int index=0;  if (index == 0)   return NO_NON_JAVA_RESOURCES;  if (index < length) {    System.arraycopy(resources,0,resources=new Object[index],0,index);  }  return resources;}  }
class C{  @Override public int read() throws IOException {synchronized (lock) {    if (isOpen()) {      if (pos != count) {        return str.charAt(pos++);      }      return -1;    }    throw new IOException("StringReader is closed");  }}  }
class C{  public static DataStorage newDataStorage(Properties properties) throws IllegalDataStorageTypeException {  String storageType=(String)properties.get(EAGLE_STORAGE_TYPE);  if (storageType == null) {    LOG.error(EAGLE_STORAGE_TYPE + " is null");    throw new IllegalDataStorageTypeException(EAGLE_STORAGE_TYPE + " is null");  }  return newDataStorage(storageType);}  }
class C{  public void createBuffers(){  boolean supportsUIntBuffers=RajawaliRenderer.supportsUIntBuffers;  if (mVertices != null) {    mVertices.compact().position(0);    createBuffer(mVertexBufferInfo,BufferType.FLOAT_BUFFER,mVertices,GLES20.GL_ARRAY_BUFFER);  }  if (mNormals != null) {    mNormals.compact().position(0);    createBuffer(mNormalBufferInfo,BufferType.FLOAT_BUFFER,mNormals,GLES20.GL_ARRAY_BUFFER);  }  if (mTextureCoords != null) {    mTextureCoords.compact().position(0);    createBuffer(mTexCoordBufferInfo,BufferType.FLOAT_BUFFER,mTextureCoords,GLES20.GL_ARRAY_BUFFER);  }  if (mColors != null) {    mColors.compact().position(0);    createBuffer(mColorBufferInfo,BufferType.FLOAT_BUFFER,mColors,GLES20.GL_ARRAY_BUFFER);  }  if (mIndicesInt != null && !mOnlyShortBufferSupported && supportsUIntBuffers) {    mIndicesInt.compact().position(0);    createBuffer(mIndexBufferInfo,BufferType.INT_BUFFER,mIndicesInt,GLES20.GL_ELEMENT_ARRAY_BUFFER);  }  if (mOnlyShortBufferSupported || !supportsUIntBuffers) {    mOnlyShortBufferSupported=true;    if (mIndicesShort == null && mIndicesInt != null) {      mIndicesInt.position(0);      mIndicesShort=ByteBuffer.allocateDirect(mNumIndices * SHORT_SIZE_BYTES).order(ByteOrder.nativeOrder()).asShortBuffer();      try {        for (int i=0; i < mNumIndices; ++i) {          mIndicesShort.put((short)mIndicesInt.get(i));        }      } catch (      BufferOverflowException e) {        RajLog.e("Buffer overflow. Unfortunately your device doesn't supported int type index buffers. The mesh is too big.");        throw (e);      }      mIndicesInt.clear();      mIndicesInt.limit();      mIndicesInt=null;    }    if (mIndicesShort != null) {      mIndicesShort.compact().position(0);      createBuffer(mIndexBufferInfo,BufferType.SHORT_BUFFER,mIndicesShort,GLES20.GL_ELEMENT_ARRAY_BUFFER);    }  }  GLES20.glBindBuffer(GLES20.GL_ELEMENT_ARRAY_BUFFER,0);  GLES20.glBindBuffer(GLES20.GL_ARRAY_BUFFER,0);  mHaveCreatedBuffers=true;}  }
class C{  public void hideKeyboard(View view){  InputMethodManager inputMethodManager=(InputMethodManager)mContext.getSystemService(Context.INPUT_METHOD_SERVICE);  inputMethodManager.hideSoftInputFromWindow(view.getWindowToken(),0);}  }
class C{  static TIntIntHashMap countBackSlashes(CharSequence text,int start,int end){  TIntIntHashMap result=new TIntIntHashMap();  int line=0;  if (end > text.length()) {    end=text.length();  }  for (int i=start; i < end; i++) {    char c=text.charAt(i);switch (c) {case '\n':      line++;    break;case '\\':  result.put(line,1);break;}}return result;}  }
class C{  AnnotationCommitter(CollectionService collectionService,MonitorService monitorService,AtomicInteger jobCounter){  super(collectionService,monitorService,jobCounter);}  }
class C{  public ExampleXmlGenerator(Log log,Class<?> clazz) throws MojoExecutionException {  this.log=log;  generateExampleXml(clazz);}  }
class C{  public void showDialog(@Nullable List<SourceEstimation> sourceEstimationList,@NotNull ProjectProblemDialogCallback callback){  this.callback=callback;  if (sourceEstimationList == null || sourceEstimationList.isEmpty()) {    estimatedTypes=null;    view.showDialog(null);    return;  }  estimatedTypes=new ArrayList<>(sourceEstimationList.size());  List<String> estimatedTypeNames=new ArrayList<>(sourceEstimationList.size());  for (  SourceEstimation estimatedType : sourceEstimationList) {    ProjectTypeDefinition projectType=projectTypeRegistry.getProjectType(estimatedType.getType());    if (estimatedType.isPrimaryable() && projectType != null) {      this.estimatedTypes.add(estimatedType);      estimatedTypeNames.add(projectType.getDisplayName());    }  }  view.showDialog(estimatedTypeNames);}  }
class C{  public void dec(){  this.counter--;}  }
class C{  public String[] prepareTfMtd(String line) throws IOException {  String[] words=getWords(line);  if (!getOmitAgent().omit(words,this)) {    getMVImputeAgent().prepare(words);    getRecodeAgent().prepare(words,this);    getBinAgent().prepare(words,this);    incrValid();  }  incrTotal();  return words;}  }
class C{  public XMLScanner(InputStream is,String enc) throws XMLException {  context=DOCUMENT_START_CONTEXT;  try {    reader=new StreamNormalizingReader(is,enc);    current=nextChar();  } catch (  IOException e) {    throw new XMLException(e);  }}  }
class C{  public static boolean isDefaultType(String schema){  for (int i=ALL_MEDIA_TYPES.length; --i >= 0; )   if (schema.equals(ALL_MEDIA_TYPES[i].schema))   return true;  return false;}  }
class C{  public boolean isStandbySupported(){  return standbySupported;}  }
class C{  public boolean produces(final EvolutionState state,final Population newpop,final int subpopulation,final int thread){  if (!super.produces(state,newpop,subpopulation,thread))   return false;  if (newpop.subpops[subpopulation].species instanceof GPSpecies)   return true;  return false;}  }
class C{  private void defineTrees(UIDefaults d){  String p="Tree";  String c=PAINTER_PREFIX + "TreePainter";  d.put(p + ".contentMargins",new InsetsUIResource(0,0,0,0));  d.put(p + ".opaque",Boolean.TRUE);  d.put(p + ".textForeground",d.get("text"));  d.put(p + ".textBackground",d.get("seaGlassLightBackground"));  d.put(p + ".background",d.get("seaGlassLightBackground"));  d.put(p + ".rendererFillBackground",Boolean.FALSE);  d.put(p + ".leftChildIndent",new Integer(12));  d.put(p + ".rightChildIndent",new Integer(8));  d.put(p + ".drawHorizontalLines",Boolean.FALSE);  d.put(p + ".drawVerticalLines",Boolean.FALSE);  d.put(p + ".showsRootHandles",Boolean.FALSE);  d.put(p + ".rendererUseTreeColors",Boolean.TRUE);  d.put(p + ".repaintWholeRow",Boolean.TRUE);  d.put(p + ".rowHeight",new Integer(0));  d.put(p + ".rendererMargins",new InsetsUIResource(2,5,1,5));  d.put(p + ".selectionForeground",d.get("seaGlassSelectedText"));  d.put(p + ".selectionBackground",d.get("seaGlassSelectionBackground"));  d.put(p + ".dropLineColor",d.get("seaGlassFocus"));  d.put(p + "[Enabled].collapsedIconPainter",new LazyPainter(c,TreePainter.Which.COLLAPSEDICON_ENABLED));  d.put(p + "[Enabled+Selected].collapsedIconPainter",new LazyPainter(c,TreePainter.Which.COLLAPSEDICON_ENABLED_SELECTED));  d.put(p + "[Enabled].expandedIconPainter",new LazyPainter(c,TreePainter.Which.EXPANDEDICON_ENABLED));  d.put(p + "[Enabled+Selected].expandedIconPainter",new LazyPainter(c,TreePainter.Which.EXPANDEDICON_ENABLED_SELECTED));  d.put(p + ".collapsedIcon",new SeaGlassIcon(p,"collapsedIconPainter",7,7));  d.put(p + ".expandedIcon",new SeaGlassIcon(p,"expandedIconPainter",7,7));  d.put(p + ".leafIcon",null);  d.put(p + ".closedIcon",null);  d.put(p + ".openIcon",null);  p="Tree:TreeCell";  c=PAINTER_PREFIX + "TreeCellPainter";  d.put(p + ".contentMargins",new InsetsUIResource(0,0,0,0));  d.put(p + "[Enabled].background",d.get("seaGlassLightBackground"));  d.put(p + "[Enabled+Focused].background",d.get("seaGlassLightBackground"));  d.put(p + "[Enabled+Focused].backgroundPainter",new LazyPainter(c,TreeCellPainter.Which.BACKGROUND_ENABLED_FOCUSED));  d.put(p + "[Enabled+Selected].textForeground",Color.WHITE);  d.put(p + "[Enabled+Selected].backgroundPainter",new LazyPainter(c,TreeCellPainter.Which.BACKGROUND_ENABLED_SELECTED));  d.put(p + "[Focused+Selected].textForeground",Color.WHITE);  d.put(p + "[Focused+Selected].backgroundPainter",new LazyPainter(c,TreeCellPainter.Which.BACKGROUND_SELECTED_FOCUSED));  p="Tree:\"Tree.cellRenderer\"";  d.put(p + ".font",new FontUIResource("SansSerif",Font.PLAIN,13));  d.put(p + ".contentMargins",new InsetsUIResource(0,0,0,0));  d.put(p + "[Disabled].textForeground",getDerivedColor("seaGlassDisabledText",0,0,0,0,true));  p="\"Tree.cellEditor\"";  c=PAINTER_PREFIX + "TreeCellEditorPainter";  d.put(p + ".font",new FontUIResource("SansSerif",Font.PLAIN,13));  d.put(p + ".contentMargins",new InsetsUIResource(2,5,2,5));  d.put(p + ".opaque",Boolean.TRUE);  d.put(p + ".background",d.get("control"));  d.put(p + "[Disabled].textForeground",d.get("seaGlassDisabledText"));  d.put(p + "[Selected].textForeground",d.get("seaGlassSelectedText"));  d.put(p + "[Selected].textBackground",new ColorUIResource((Color)d.get("seaGlassSelection")));  d.put(p + "[Enabled].backgroundPainter",new LazyPainter(c,TreeCellEditorPainter.Which.BACKGROUND_ENABLED));  d.put(p + "[Enabled+Focused].backgroundPainter",new LazyPainter(c,TreeCellEditorPainter.Which.BACKGROUND_ENABLED_FOCUSED));}  }
class C{  public void addObserver(ExecutionObserver observer){  if (!observers.contains(observer)) {    logger.debug("Adding observer");    observers.add(observer);  }}  }
class C{  public static void main(String[] args){  Integer[] intArray={2,3,2,5,6,1,-2,3,14,12};  Double[] doubleArray={3.4,1.3,-22.1,14.8,6.0,2.3,12.2};  Character[] charArray={'a','J','r'};  String[] stringArray={"Tom","Susan","Kim"};  mergeSort(intArray);  mergeSort(doubleArray);  mergeSort(charArray);  mergeSort(stringArray);  printList(intArray);  printList(charArray);  printList(stringArray);  printList(doubleArray);  GeometricObject[] list={new Circle(5),new Rectangle(4,5),new Circle(5.5),new Rectangle(2.4,5),new Circle(0.5),new Rectangle(4,65),new Circle(4.5),new Rectangle(4.4,1),new Circle(6.5),new Rectangle(4,5)};  mergeSort(list,new GeometricObjectComparator());  printList(list);}  }
class C{  @Override protected void after(){  ActiveMQClient.clearThreadPools();  InVMConnector.resetThreadPool();  try {    if (enabled) {      boolean failed=true;      boolean failedOnce=false;      long timeout=System.currentTimeMillis() + 60000;      while (failed && timeout > System.currentTimeMillis()) {        failed=checkThread();        if (failed) {          failedOnce=true;          forceGC();          try {            Thread.sleep(500);          } catch (          Throwable e) {          }        }      }      if (failed) {        Assert.fail("Thread leaked");      } else       if (failedOnce) {        System.out.println("******************** Threads cleared after retries ********************");        System.out.println();      }    } else {      enabled=true;    }  }  finally {    previousThreads=null;  }}  }
class C{  public LocalDeclaration[] findLocalVariableDeclarations(int position){  int ilocal=0, maxLocals=this.localIndex;  boolean hasMoreVariables=maxLocals > 0;  LocalDeclaration[] localDeclarations=null;  int declPtr=0;  int iscope=0, maxScopes=this.subscopeCount;  boolean hasMoreScopes=maxScopes > 0;  while (hasMoreVariables || hasMoreScopes) {    if (hasMoreScopes && (!hasMoreVariables || (this.subscopes[iscope].startIndex() <= ilocal))) {      Scope subscope=this.subscopes[iscope];      if (subscope.kind == Scope.BLOCK_SCOPE) {        localDeclarations=((BlockScope)subscope).findLocalVariableDeclarations(position);        if (localDeclarations != null) {          return localDeclarations;        }      }      hasMoreScopes=++iscope < maxScopes;    } else {      LocalVariableBinding local=this.locals[ilocal];      if (local != null) {        LocalDeclaration localDecl=local.declaration;        if (localDecl != null) {          if (localDecl.declarationSourceStart <= position) {            if (position <= localDecl.declarationSourceEnd) {              if (localDeclarations == null) {                localDeclarations=new LocalDeclaration[maxLocals];              }              localDeclarations[declPtr++]=localDecl;            }          } else {            return localDeclarations;          }        }      }      hasMoreVariables=++ilocal < maxLocals;      if (!hasMoreVariables && localDeclarations != null) {        return localDeclarations;      }    }  }  return null;}  }
class C{  public void updateStrengthOfWins(){  int strWins=0;  for (int i=0; i < 12; ++i) {    Game g=gameSchedule.get(i);    if (g.homeTeam == this) {      strWins+=Math.pow(60 - g.awayTeam.rankTeamPollScore,2);    } else {      strWins+=Math.pow(60 - g.homeTeam.rankTeamPollScore,2);    }  }  teamStrengthOfWins=strWins / 50;  for (  Team t : gameWinsAgainst) {    teamStrengthOfWins+=Math.pow(t.wins,2);  }}  }
class C{  public static String crop(String string){  if (string.length() == 0) {    return null;  }  return string;}  }
class C{  private RealMatrix newIdentityMatrix(){  RealMatrix identity=MatrixUtils.createRealMatrix(dimension,dimension);  for (int i=0; i < dimension; i++) {    identity.setEntry(i,i,1.0);  }  return identity;}  }
class C{  public void displayError(Exception e){  displayError(e.getMessage());}  }
class C{  public Shape apply(E e){  Shape edgeShape=getLoopOrNull(e);  if (edgeShape != null) {    return edgeShape;  }  int index=getIndex(e,edgeIndexFunction);  float controlY=control_offset_increment + control_offset_increment * index;  QUAD_CURVE.setCurve(0.0f,0.0f,0.5f,controlY,1.0f,0.0f);  return QUAD_CURVE;}  }
class C{  @Override public int read() throws IOException {  return Streams.readSingleByte(this);}  }
class C{  public static final void reset(){  _instance=NO_OBSERVER;}  }
class C{  default boolean isStarted(){  return false;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4mfPackage.PROVIDED_RUNTIME_LIBRARIES__PROVIDED_RUNTIME_LIBRARIES:    getProvidedRuntimeLibraries().clear();  return;}super.eUnset(featureID);}  }
class C{  public CloseListener(Object resource){  _resource=resource;}  }
class C{  private static void unSetExpiryTimeAndCloseCache(){  System.clearProperty(HARegionQueue.REGION_ENTRY_EXPIRY_TIME);  CacheTestCase.closeCache();}  }
class C{  public static String enumNameOf(Column column,Injector injector){  final TranslatorSupport<Table> support=new TranslatorSupport<>(injector,column.getParentOrThrow());  final String shortName=support.namer().javaTypeName(column.getJavaName());  return support.generatedEntityType().getTypeName() + "." + shortName;}  }
class C{  public static Bitmap dequeueBitmap(String key){  Bitmap bmp=mBitmapQueue.get(key);  mBitmapQueue.remove(key);  return bmp;}  }
class C{  @Deprecated public static PrivKey load(File file) throws IOException, InvalidKeySpecException, NoSuchAlgorithmException {  byte[] encoded=FileUtil.readFile(file);  return new PrivKey(encoded);}  }
class C{  private String createMnemonic(String text){  m_savedMnemonic=0;  if (text == null)   return text;  int pos=text.indexOf('&');  if (pos != -1) {    char ch=text.charAt(pos + 1);    if (ch != ' ') {      setDisplayedMnemonic(ch);      setSavedMnemonic(ch);      return text.substring(0,pos) + text.substring(pos + 1);    }  }  return text;}  }
class C{  protected String[] defaultClassifierOptions(){  return new String[0];}  }
class C{  public static void assertEmpty(BufferedImage image){  assertEmpty("",image);}  }
class C{  private static String escapeForCSV(String sArg){  StringBuffer sb=new StringBuffer();  if (sArg != null) {    if ((sArg.indexOf(",") >= 0) || (sArg.indexOf("\n") >= 0) || (sArg.indexOf("\r") >= 0)|| (sArg.indexOf("\"") >= 0)) {      sb.append("\"");      sb.append(StringUtils.replace(sArg,"\"","\"\""));      sb.append("\"");    } else {      sb.append(sArg);    }  }  return sb.toString();}  }
class C{  @Override protected void onDraw(Canvas canvas){  super.onDraw(canvas);  if (mArcBounds == null || mArcBounds.isEmpty()) {    return;  }  if (mChartSeries != null) {    boolean labelsSupported=true;    for (int i=0; i < mChartSeries.size(); i++) {      ChartSeries chartSeries=mChartSeries.get(i);      chartSeries.draw(canvas,mArcBounds);      labelsSupported&=(!chartSeries.isVisible() || chartSeries.getSeriesItem().getSpinClockwise());      mMeasureViewableArea[i]=getLabelPosition(i);    }    if (labelsSupported) {      for (int i=0; i < mMeasureViewableArea.length; i++) {        if (mMeasureViewableArea[i] >= 0f) {          ChartSeries chartSeries=mChartSeries.get(i);          chartSeries.drawLabel(canvas,mArcBounds,mMeasureViewableArea[i]);        }      }    }  }}  }
class C{  protected void encodeBufferSuffix(OutputStream a) throws IOException {  super.pStream.println(" \nend");  super.pStream.flush();}  }
class C{  private static void printMessage(String[] msg){  printMessage(msg,true);}  }
class C{  @Override public void disconnect(){  if (delegate == null)   super.disconnect(); else   delegate.disconnect();}  }
class C{  private void writeHttpContentToFile(URL url,Map<String,String> properties) throws IOException, FileNotDownloadedException, NetworkException {  HttpURLConnection urlConnection=null;  try {    urlConnection=openHttpConnection(url,properties);    int statusCode=urlConnection.getResponseCode();    String message=urlConnection.getResponseMessage();    if (sLogger.isActivated()) {      sLogger.debug("HTTP get file response: " + statusCode + " ("+ message+ ")");    }    if (isHttpTraceEnabled()) {      System.out.println("<<< Receive HTTP response: \n" + statusCode + " "+ statusCode);    }    int receivedBytes=0;switch (statusCode) {case HttpURLConnection.HTTP_OK:      break;case HttpURLConnection.HTTP_PARTIAL:    receivedBytes=Long.valueOf(mFile.length()).intValue();  break;default :throw new FileNotDownloadedException("Unhandled http response code : " + statusCode + " for file download from server!");}byte[] buffer=new byte[CHUNK_MAX_SIZE];InputStream input=urlConnection.getInputStream();int num;while ((num=input.read(buffer)) != -1 && !isCancelled() && !isPaused()) {receivedBytes+=num;getListener().onHttpTransferProgress(receivedBytes,mContent.getSize());mFileDownloadStream.write(buffer,0,num);}if (isPaused()) {throw new FileNotDownloadedException("Download file paused, the file is not complete!");}if (!isCancelled() && receivedBytes != mContent.getSize()) {mFile.delete();throw new FileNotDownloadedException("Download file error, the file is not complete!");}FileFactory.getFactory().updateMediaStorage(mDownloadedFile.getEncodedPath());}  finally {CloseableUtils.tryToClose(mFileDownloadStream);mFileDownloadStream=null;if (urlConnection != null) {urlConnection.disconnect();}}}  }
class C{  protected void pushBidirectionalVipRoutes(IOFSwitch sw,OFPacketIn pi,FloodlightContext cntx,IPClient client,LBMember member){  IDevice srcDevice=null;  IDevice dstDevice=null;  Collection<? extends IDevice> allDevices=deviceManagerService.getAllDevices();  for (  IDevice d : allDevices) {    for (int j=0; j < d.getIPv4Addresses().length; j++) {      if (srcDevice == null && client.ipAddress.equals(d.getIPv4Addresses()[j]))       srcDevice=d;      if (dstDevice == null && member.address == d.getIPv4Addresses()[j].getInt()) {        dstDevice=d;        member.macString=dstDevice.getMACAddressString();      }      if (srcDevice != null && dstDevice != null)       break;    }  }  if (srcDevice == null || dstDevice == null)   return;  DatapathId srcIsland=topologyService.getL2DomainId(sw.getId());  if (srcIsland == null) {    log.debug("No openflow island found for source {}/{}",sw.getId().toString(),pi.getInPort());    return;  }  boolean on_same_island=false;  boolean on_same_if=false;  for (  SwitchPort dstDap : dstDevice.getAttachmentPoints()) {    DatapathId dstSwDpid=dstDap.getSwitchDPID();    DatapathId dstIsland=topologyService.getL2DomainId(dstSwDpid);    if ((dstIsland != null) && dstIsland.equals(srcIsland)) {      on_same_island=true;      if ((sw.getId().equals(dstSwDpid)) && ((pi.getVersion().compareTo(OFVersion.OF_12) < 0 ? pi.getInPort() : pi.getMatch().get(MatchField.IN_PORT)).equals(dstDap.getPort()))) {        on_same_if=true;      }      break;    }  }  if (!on_same_island) {    if (log.isTraceEnabled()) {      log.trace("No first hop island found for destination " + "device {}, Action = flooding",dstDevice);    }    return;  }  if (on_same_if) {    if (log.isTraceEnabled()) {      log.trace("Both source and destination are on the same " + "switch/port {}/{}, Action = NOP",sw.toString(),pi.getInPort());    }    return;  }  SwitchPort[] srcDaps=srcDevice.getAttachmentPoints();  Arrays.sort(srcDaps,clusterIdComparator);  SwitchPort[] dstDaps=dstDevice.getAttachmentPoints();  Arrays.sort(dstDaps,clusterIdComparator);  int iSrcDaps=0, iDstDaps=0;  while ((iSrcDaps < srcDaps.length) && (iDstDaps < dstDaps.length)) {    SwitchPort srcDap=srcDaps[iSrcDaps];    SwitchPort dstDap=dstDaps[iDstDaps];    DatapathId srcCluster=topologyService.getL2DomainId(srcDap.getSwitchDPID());    DatapathId dstCluster=topologyService.getL2DomainId(dstDap.getSwitchDPID());    int srcVsDest=srcCluster.compareTo(dstCluster);    if (srcVsDest == 0) {      if (!srcDap.equals(dstDap) && (srcCluster != null) && (dstCluster != null)) {        Route routeIn=routingEngineService.getRoute(srcDap.getSwitchDPID(),srcDap.getPort(),dstDap.getSwitchDPID(),dstDap.getPort(),U64.of(0));        Route routeOut=routingEngineService.getRoute(dstDap.getSwitchDPID(),dstDap.getPort(),srcDap.getSwitchDPID(),srcDap.getPort(),U64.of(0));        if (routeIn != null) {          pushStaticVipRoute(true,routeIn,client,member,sw);        }        if (routeOut != null) {          pushStaticVipRoute(false,routeOut,client,member,sw);        }      }      iSrcDaps++;      iDstDaps++;    } else     if (srcVsDest < 0) {      iSrcDaps++;    } else {      iDstDaps++;    }  }  return;}  }
class C{  private int readCommand(boolean charstring){  while (true) {    int t=readNext(charstring);    if (t == CMD) {      return num;    } else {      stack[stackptr++]=(t == NUM) ? (float)num : fnum;    }  }}  }
class C{  @Override public List<StoragePool> matchStoragePoolsWithAttributeOn(List<StoragePool> pools,Map<String,Object> attributeMap,StringBuffer errorMessage){  List<StoragePool> matchedPools=new ArrayList<StoragePool>();  Set<String> vArrays=(Set<String>)attributeMap.get(Attributes.varrays.toString());  if (vArrays != null && !vArrays.isEmpty()) {    _logger.info("Pools Matching vArrays Started {}, {} :",vArrays,Joiner.on("\t").join(getNativeGuidFromPools(pools)));    List<URI> vArrayPools=getVarrayPools(vArrays);    Iterator<StoragePool> poolIterator=pools.iterator();    while (poolIterator.hasNext()) {      StoragePool pool=poolIterator.next();      if (vArrayPools.contains(pool.getId())) {        matchedPools.add(pool);      }    }  }  if (CollectionUtils.isEmpty(matchedPools)) {    errorMessage.append(String.format("Virtual Arrays %s does not have Storage Pools. ",vArrays));    _logger.error(errorMessage.toString());  }  _logger.info("Pools Matching vArrays Ended: {}",Joiner.on("\t").join(getNativeGuidFromPools(matchedPools)));  return matchedPools;}  }
class C{  public void putStringArrayList(String key,ArrayList<String> value){  unparcel();  mMap.put(key,value);}  }
