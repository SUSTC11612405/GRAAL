class C{  public void squareThis(){  squareThisPreCalc();}  }
class C{  private boolean testHostPort(String host,int port){  Socket pingSocket=null;  try {    InetAddress server=InetAddress.getByName(host);    pingSocket=new Socket(server,port);  } catch (  UnknownHostException e) {    inform("  Unknown Host: " + e);  }catch (  IOException io) {    inform("  IO Exception: " + io);  }  if (pingSocket != null) {    try {      pingSocket.close();    } catch (    IOException e) {      inform("  IO close exception: " + e);    }    inform("  *** success ***");    return true;  } else {    return false;  }}  }
class C{  public static void filledRectangle(double x,double y,double halfWidth,double halfHeight){  if (halfWidth < 0)   throw new IllegalArgumentException("half width must be nonnegative");  if (halfHeight < 0)   throw new IllegalArgumentException("half height must be nonnegative");  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(2 * halfWidth);  double hs=factorY(2 * halfHeight);  if (ws <= 1 && hs <= 1)   pixel(x,y); else   offscreen.fill(new Rectangle2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));  draw();}  }
class C{  public static CacheHeader readHeader(InputStream is) throws IOException {  CacheHeader entry=new CacheHeader();  int magic=readInt(is);  if (magic != CACHE_MAGIC) {    throw new IOException();  }  entry.key=readString(is);  entry.etag=readString(is);  if (entry.etag.equals("")) {    entry.etag=null;  }  entry.serverDate=readLong(is);  entry.ttl=readLong(is);  entry.softTtl=readLong(is);  entry.responseHeaders=readStringStringMap(is);  try {    entry.lastModified=readLong(is);  } catch (  EOFException e) {  }  return entry;}  }
class C{  @SideEffectFree public void entering(@Nullable String sourceClass,@Nullable String sourceMethod){  throw new RuntimeException();}  }
class C{  public void testBug18869381() throws Exception {  if (this.sha256Conn != null && ((MySQLConnection)this.sha256Conn).versionMeetsMinimum(5,6,6)) {    if (!pluginIsActive(this.sha256Stmt,"sha256_password")) {      fail("sha256_password required to run this test");    }    try {      this.sha256Stmt.executeUpdate("SET @current_old_passwords = @@global.old_passwords");      createUser(this.sha256Stmt,"'bug18869381user1'@'%'","identified WITH sha256_password");      this.sha256Stmt.executeUpdate("grant all on *.* to 'bug18869381user1'@'%'");      createUser(this.sha256Stmt,"'bug18869381user2'@'%'","identified WITH sha256_password");      this.sha256Stmt.executeUpdate("grant all on *.* to 'bug18869381user2'@'%'");      createUser(this.sha256Stmt,"'bug18869381user3'@'%'","identified WITH mysql_native_password");      this.sha256Stmt.executeUpdate("grant all on *.* to 'bug18869381user3'@'%'");      this.sha256Stmt.executeUpdate(((MySQLConnection)this.sha256Conn).versionMeetsMinimum(5,7,6) ? "ALTER USER 'bug18869381user3'@'%' IDENTIFIED BY 'pwd3'" : "set password for 'bug18869381user3'@'%' = PASSWORD('pwd3')");      this.sha256Stmt.executeUpdate("SET GLOBAL old_passwords= 2");      this.sha256Stmt.executeUpdate("SET SESSION old_passwords= 2");      this.sha256Stmt.executeUpdate(((MySQLConnection)this.sha256Conn).versionMeetsMinimum(5,7,6) ? "ALTER USER 'bug18869381user1'@'%' IDENTIFIED BY 'LongLongLongLongLongLongLongLongLongLongLongLongPwd1'" : "set password for 'bug18869381user1'@'%' = PASSWORD('LongLongLongLongLongLongLongLongLongLongLongLongPwd1')");      this.sha256Stmt.executeUpdate(((MySQLConnection)this.sha256Conn).versionMeetsMinimum(5,7,6) ? "ALTER USER 'bug18869381user2'@'%' IDENTIFIED BY 'pwd2'" : "set password for 'bug18869381user2'@'%' = PASSWORD('pwd2')");      this.sha256Stmt.executeUpdate("flush privileges");      Properties props=new Properties();      props.setProperty("allowPublicKeyRetrieval","true");      props.setProperty("defaultAuthenticationPlugin","com.mysql.jdbc.authentication.MysqlNativePasswordPlugin");      props.setProperty("useCompression","false");      testBug18869381WithProperties(props);      props.setProperty("useCompression","true");      testBug18869381WithProperties(props);      props.setProperty("defaultAuthenticationPlugin","com.mysql.jdbc.authentication.Sha256PasswordPlugin");      props.setProperty("useCompression","false");      testBug18869381WithProperties(props);      props.setProperty("useCompression","true");      testBug18869381WithProperties(props);      props.setProperty("serverRSAPublicKeyFile","src/testsuite/ssl-test-certs/mykey.pub");      props.setProperty("useCompression","false");      testBug18869381WithProperties(props);      props.setProperty("useCompression","true");      testBug18869381WithProperties(props);      String trustStorePath="src/testsuite/ssl-test-certs/test-cert-store";      System.setProperty("javax.net.ssl.keyStore",trustStorePath);      System.setProperty("javax.net.ssl.keyStorePassword","password");      System.setProperty("javax.net.ssl.trustStore",trustStorePath);      System.setProperty("javax.net.ssl.trustStorePassword","password");      props.setProperty("useSSL","true");      props.setProperty("useCompression","false");      testBug18869381WithProperties(props);      props.setProperty("useCompression","true");      testBug18869381WithProperties(props);    }  finally {      this.sha256Stmt.executeUpdate("SET GLOBAL old_passwords = @current_old_passwords");    }  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public int depth(){  return children == null ? 1 : 1 + Math.max(children[0].depth(),children[1].depth());}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.PACKAGE_MEMBER__ANNOTATIONS:    getAnnotations().clear();  return;}super.eUnset(featureID);}  }
class C{  @Inline protected final void updateLimit(Address newLimit,Address start,int bytes){  limit=newLimit;  internalLimit=start.plus(STEP_SIZE);  if (internalLimit.GT(limit))   internalLimit=limit; else {    while (internalLimit.LT(cursor.plus(bytes)))     internalLimit=internalLimit.plus(STEP_SIZE);    if (VM.VERIFY_ASSERTIONS)     VM.assertions._assert(internalLimit.LE(limit));  }}  }
class C{  public boolean isSecure(){  return true;}  }
class C{  public void updateSizes(@ProgressDrawableSize int size){  if (size == LARGE) {    setSizeParameters(CIRCLE_DIAMETER_LARGE,CIRCLE_DIAMETER_LARGE,CENTER_RADIUS_LARGE,STROKE_WIDTH_LARGE,ARROW_WIDTH_LARGE,ARROW_HEIGHT_LARGE);  } else {    setSizeParameters(CIRCLE_DIAMETER,CIRCLE_DIAMETER,CENTER_RADIUS,STROKE_WIDTH,ARROW_WIDTH,ARROW_HEIGHT);  }}  }
class C{  protected SimpleQuery genAnalysisQueryWithBeyondLimitSupport(DashboardAnalysis analysis,MeasureGroup group,boolean cachable,boolean optimize) throws ScopeException, SQLScopeException, ComputingException, InterruptedException, RenderingException {  List<GroupByAxis> beyondLimitGroup=analysis.getBeyondLimit() != null ? analysis.getBeyondLimit() : Collections.<GroupByAxis>emptyList();  DashboardAnalysis subAnalysisWithLimit=new DashboardAnalysis(analysis.getUniverse());  ArrayList<Axis> joins=new ArrayList<>();  for (  GroupByAxis groupBy : analysis.getGrouping()) {    if (!beyondLimitGroup.contains(groupBy)) {      subAnalysisWithLimit.add(groupBy);      joins.add(groupBy.getAxis());    } else {    }  }  if (subAnalysisWithLimit.getGrouping().isEmpty()) {    analysis.noLimit();    return genAnalysisQueryWithSoftFiltering(analysis,group,cachable,optimize);  }  for (  Measure measure : analysis.getKpis()) {    subAnalysisWithLimit.add(measure);  }  ArrayList<ExpressionAST> exclude=new ArrayList<>();  DateExpressionAssociativeTransformationExtractor extractor=new DateExpressionAssociativeTransformationExtractor();  for (  GroupByAxis slice : beyondLimitGroup) {    exclude.add(extractor.eval(slice.getAxis().getDefinitionSafe()));  }  for (  OrderBy order : analysis.getOrders()) {    ExpressionAST naked=extractor.eval(order.getExpression());    if (!exclude.contains(naked)) {      subAnalysisWithLimit.orderBy(order);    }  }  if (analysis.hasLimit())   subAnalysisWithLimit.limit(analysis.getLimit());  if (analysis.hasOffset())   subAnalysisWithLimit.offset(analysis.getOffset());  if (analysis.isRollupGrandTotal())   subAnalysisWithLimit.setRollupGrandTotal(true);  if (analysis.hasRollup())   subAnalysisWithLimit.setRollup(analysis.getRollup());  if (analysis.getBeyondLimitSelection() != null) {    subAnalysisWithLimit.setSelection(new DashboardSelection(analysis.getBeyondLimitSelection()));  } else {    subAnalysisWithLimit.setSelection(new DashboardSelection(analysis.getSelection()));  }  if (joins.size() == 1 && subAnalysisWithLimit.hasLimit() && subAnalysisWithLimit.getLimit() < 50) {    DataMatrix selection=computeAnalysisSimple(subAnalysisWithLimit,false);    Axis join=joins.get(0);    Collection<DimensionMember> values=selection.getAxisValues(join);    if (!values.isEmpty()) {      Long limit=analysis.getLimit();      analysis.noLimit();      analysis.getSelection().add(join,values);      SimpleQuery mainquery=genAnalysisQueryWithSoftFiltering(analysis,group,cachable,optimize);      return mainquery;    } else {      return genAnalysisQueryWithSoftFiltering(analysis,group,cachable,optimize);    }  } else {    SimpleQuery subquery=genAnalysisQueryWithSoftFiltering(subAnalysisWithLimit,group,cachable,false);    analysis.noLimit();    SimpleQuery mainquery=genAnalysisQueryWithSoftFiltering(analysis,group,cachable,optimize);    mainquery.join(joins,subquery);    return mainquery;  }}  }
class C{  public static void assertJPut(String request,String content,String... tests) throws Exception {  assertJPut(request,content,JSONTestUtil.DEFAULT_DELTA,tests);}  }
class C{  public SVGOMFontFaceSrcElement(String prefix,AbstractDocument owner){  super(prefix,owner);}  }
class C{  public void put(int taskId,ReplDBMSEvent event) throws InterruptedException, ReplicatorException {  String failTag=event.getDBMSEvent().getMetadataOptionValue(FAILURE_TAG);  if (failTag != null)   throw new ReplicatorException("Failure triggered by " + FAILURE_TAG + "="+ failTag);  queues.get(taskId).put(event);  transactionCount++;  if (logger.isDebugEnabled()) {    if (transactionCount % 10000 == 0)     logger.debug("Queue store: xacts=" + transactionCount);  }synchronized (this) {    long seqno=event.getSeqno();    if (seqno < minStored)     minStored=seqno;    if (seqno > maxStored)     maxStored=seqno;  }}  }
class C{  public static SparseMatrix loadSparseMatrix(String filename) throws IOException, IllegalFormatException {  return loadSparseMatrix(new File(filename));}  }
class C{  public void reregister(){  if (!request.isCanceled()) {    Request refresh=Request.newGet();    refresh.setDestination(request.getDestination());    refresh.setDestinationPort(request.getDestinationPort());    refresh.setToken(request.getToken());    refresh.setOptions(request.getOptions());    refresh.setObserve();    for (    MessageObserver mo : request.getMessageObservers()) {      refresh.addMessageObserver(mo);    }    endpoint.sendRequest(refresh);    this.request=refresh;    this.orderer=new ObserveNotificationOrderer();  }}  }
class C{  public static Object[] objects(Object... objects){  return objects;}  }
class C{  public static boolean isBuiltIn(String variable){  return BUILT_IN.contains(variable);}  }
class C{  public static void init(String agent,String domain){  if (instance == null) {    instance=new AnalyticsService();  }  instance.agent=agent;  instance.domain=domain;}  }
class C{  public PsFixed(final Identity identity){  this.user=identity;}  }
class C{  public boolean isColorSpaceLinear(){  return csLinear;}  }
class C{  public boolean isSupportBle(){  return getPackageManager().hasSystemFeature(PackageManager.FEATURE_BLUETOOTH_LE);}  }
class C{  public String concatenate(String start,List<String> chunks){  StringBuffer buf;  if (start == null) {    buf=new StringBuffer();  } else {    buf=new StringBuffer(start);  }  if (chunks != null) {    for (    String chunk : chunks) {      if (chunk != null) {        buf.append(chunk);      }    }  }  return (buf.length() == 0) ? null : buf.toString();}  }
class C{  protected String parseSymCode(String symCode){  String scheme=symCode.substring(0,1);  if (SymbologyConstants.SCHEME_WARFIGHTING.equalsIgnoreCase(scheme)) {    return this.parseWarfightingSymCode(symCode);  } else   if (SymbologyConstants.SCHEME_TACTICAL_GRAPHICS.equalsIgnoreCase(scheme)) {    return this.parseTacticalGraphicsSymCode(symCode);  } else   if (SymbologyConstants.SCHEME_METOC.equalsIgnoreCase(scheme)) {    return this.parseMetocSymCode(symCode);  } else   if (SymbologyConstants.SCHEME_INTELLIGENCE.equalsIgnoreCase(scheme)) {    return this.parseIntelligenceSymCode(symCode);  } else   if (SymbologyConstants.SCHEME_STABILITY_OPERATIONS.equalsIgnoreCase(scheme)) {    return this.parseStabilityOperationsSymCode(symCode);  } else   if (SymbologyConstants.SCHEME_EMERGENCY_MANAGEMENT.equalsIgnoreCase(scheme)) {    return this.parseEmergencyManagementSymCode(symCode);  } else {    return this.parseUnrecognizedSymCode(symCode);  }}  }
class C{  public DenseObjectMatrix1D(int size){  setUp(size);  this.elements=new Object[size];}  }
class C{  public PriceModelException(final String message){  super(message);}  }
class C{  public void runAll(){  String cronExecutingUser=(String)getConfig().get("cronExecutingUser");  if (null == cronExecutingUser) {    cronExecutingUser="anonymous";  }synchronized (paragraphs) {    for (    Paragraph p : paragraphs) {      if (!p.isEnabled()) {        continue;      }      AuthenticationInfo authenticationInfo=new AuthenticationInfo();      authenticationInfo.setUser(cronExecutingUser);      p.setAuthenticationInfo(authenticationInfo);      run(p.getId());    }  }}  }
class C{  public void changedUpdate(DocumentEvent de){  fileContent=null;  pubData.getDocument().removeDocumentListener(this);}  }
class C{  protected static List<String> extractOptWithPattern(final Pattern pattern,boolean allowEmpties,final List<String> args){  final List<String> matchedArgs=new ArrayList<String>();  int i=0;  while (i < args.size()) {    final Matcher matcher=pattern.matcher(args.get(i));    if (matcher.matches()) {      final String arg=matcher.group(1).trim();      if (!arg.isEmpty() || allowEmpties) {        matchedArgs.add(arg);      }      args.remove(i);    } else {      i++;    }  }  return matchedArgs;}  }
class C{  protected int retrieveClosingAngleBracketPosition(int start){  this.scanner.resetTo(start,this.compilationUnitSourceLength);  this.scanner.returnOnlyGreater=true;  try {    int token;    while ((token=this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {switch (token) {case TerminalTokens.TokenNameGREATER:        return this.scanner.currentPosition - 1;case TerminalTokens.TokenNameLESS:      continue;default :    return start;}}} catch (InvalidInputException e) {}this.scanner.returnOnlyGreater=false;return start;}  }
class C{  @Override protected int calcnCluster(){  return 1;}  }
class C{  public ExecutionRegionItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public Object trapMethodcall(int identifier,Object[] args) throws Throwable {  try {    Method[] m=getReflectiveMethods();    return m[identifier].invoke(null,args);  } catch (  java.lang.reflect.InvocationTargetException e) {    throw e.getTargetException();  }catch (  java.lang.IllegalAccessException e) {    throw new CannotInvokeException(e);  }}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,byte[] alphabet){  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=alphabet[(inBuff >>> 18)];  destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=alphabet[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  public void applyLayout(Point2D initialPosition){  layout.setInitialLocation(initialPosition);  layout.layoutNeurons(getNeuronList());}  }
class C{  public JSONObject put(String key,boolean value) throws JSONException {  this.put(key,value ? Boolean.TRUE : Boolean.FALSE);  return this;}  }
class C{  public String toSourceCode(DoubleMatrix3D matrix){  Formatter copy=(Formatter)this.clone();  String b3=blanks(3);  String b6=blanks(6);  copy.setPrintShape(false);  copy.setColumnSeparator(", ");  copy.setRowSeparator("},\n" + b6 + "{");  copy.setSliceSeparator("}\n" + b3 + "},\n"+ b3+ "{\n"+ b6+ "{");  String lead="{\n" + b3 + "{\n"+ b6+ "{";  String trail="}\n" + b3 + "}\n}";  return lead + copy.toString(matrix) + trail;}  }
class C{  public static UnsignedLong valueOf(long value){  if (value >= 0 && value < CACHE.length)   return CACHE[(int)value];  return new UnsignedLong(value);}  }
class C{  public void addFile(String filename){  if (filename != null)   addFile(new File(filename));}  }
class C{  public ServerBuilder idleTimeout(Duration idleTimeout){  requireNonNull(idleTimeout,"idleTimeout");  idleTimeoutMillis=ServerConfig.validateIdleTimeoutMillis(idleTimeout.toMillis());  return this;}  }
class C{  public GenericFastItemAdapter<Model,Item> addModel(int position,List<Model> models){  mItemAdapter.addModel(position,models);  return this;}  }
class C{  public Interval dompForgettingSource(){  return new Interval(1E-6,100E-6);}  }
class C{  private boolean process(ValueNode node,NodeWorkList worklist){  if (node.isAlive()) {    if (worklist == null) {      if (result == null) {        result=node;      } else       if (result != node) {        result=null;        return false;      }    } else {      worklist.add(node);    }  }  return true;}  }
class C{  public String toString(){  if (userObject == null) {    return "";  } else {    return userObject.toString();  }}  }
class C{  @Ignore @Test public void testWebService() throws Exception {  Properties props=new Properties();  props.put(StreamingApplication.DT_PREFIX + "stream.input.classname",TestGeneratorInputOperator.class.getName());  props.put(StreamingApplication.DT_PREFIX + "stream.input.outputNode","module1");  props.put(StreamingApplication.DT_PREFIX + "module.module1.classname",GenericTestOperator.class.getName());  LOG.info("Initializing Client");  LogicalPlanConfiguration tb=new LogicalPlanConfiguration(new Configuration(false));  tb.addFromProperties(props,null);  StramClient client=new StramClient(new Configuration(yarnCluster.getConfig()),createDAG(tb));  if (StringUtils.isBlank(System.getenv("JAVA_HOME"))) {    client.javaCmd="java";  }  try {    client.start();    client.startApplication();    ApplicationReport appReport=client.getApplicationReport();    Thread.sleep(5000);    Client wsClient=Client.create();    wsClient.setFollowRedirects(true);    WebResource r=wsClient.resource("http://" + appReport.getTrackingUrl()).path(StramWebServices.PATH).path(StramWebServices.PATH_INFO);    LOG.info("Requesting: " + r.getURI());    ClientResponse response=r.accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);    assertEquals(MediaType.APPLICATION_JSON_TYPE,response.getType());    JSONObject json=response.getEntity(JSONObject.class);    LOG.info("Got response: " + json.toString());    assertEquals("incorrect number of elements",1,json.length());    assertEquals("appId",appReport.getApplicationId().toString(),json.get("id"));    r=wsClient.resource("http://" + appReport.getTrackingUrl()).path(StramWebServices.PATH).path(StramWebServices.PATH_PHYSICAL_PLAN_OPERATORS);    LOG.info("Requesting: " + r.getURI());    response=r.accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);    assertEquals(MediaType.APPLICATION_JSON_TYPE,response.getType());    json=response.getEntity(JSONObject.class);    LOG.info("Got response: " + json.toString());  }  finally {    client.killApplication();    client.stop();  }}  }
class C{  public RowDataDynamic(MysqlIO io,int colCount,Field[] fields,boolean isBinaryEncoded) throws SQLException {  this.io=io;  this.columnCount=colCount;  this.isBinaryEncoded=isBinaryEncoded;  this.metadata=fields;  this.exceptionInterceptor=this.io.getExceptionInterceptor();  this.useBufferRowExplicit=MysqlIO.useBufferRowExplicit(this.metadata);}  }
class C{  @Override public void updateServerURI(String uri){  if (!runsAsApplication) {    LOG.info("verinice runs in designer mode - retrieving server configuration from ODA driver.");    ClientPropertyPlaceholderConfigurer.setRemoteServerMode(uri);    try {      ServiceFactory.openCommandService();    } catch (    MalformedURLException e) {      throw new IllegalStateException(e);    }    state=ServiceFactory.getClientWorkObjects();    VeriniceContext.setState(state);    context.registerService(ICommandService.class.getName(),VeriniceContext.get(VeriniceContext.COMMAND_SERVICE),null);  }}  }
class C{  protected boolean shouldFetchForProjection(Projection proj){  Point2D anchor1=new Point2D.Double(lat,lon);  Point2D anchor2=new Point2D.Double(lat2,lon2);  float imageScale=com.bbn.openmap.proj.ProjMath.getScale(anchor1,anchor2,proj);  float scaleRatio=Cache.DEFAULT_SCALE_RATIO;  if (cache instanceof Cache) {    scaleRatio=((Cache)cache).getCutoffScaleRatio();  }  return (imageScale * scaleRatio) <= proj.getScale();}  }
class C{  @Override public void endWindow(){  V modeValue=null;  int max=0;  for (  Map.Entry<V,Integer> entry : values.entrySet()) {    if (entry.getValue() > max) {      modeValue=entry.getKey();      max=entry.getValue();    }  }  if (mode != null) {    mode.emit(modeValue);  }}  }
class C{  protected void onInjected(@Nullable Bundle savedInstanceState){}  }
class C{  public JEditTextArea(){  this(TextAreaDefaults.getDefaults());}  }
class C{  public void installUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).installUI(a);  }}  }
class C{  private void checkBookType(UsuarioVO usuario,BaseLibroVO libro,TipoLibroEnum tipoLibro){  boolean checkType=false;  if (TipoLibroEnum.ENTRADA.equals(tipoLibro)) {    checkType=CollectionUtils.exists(findLibrosEntradaByUser(usuario),new BeanPropertyValueEqualsPredicate("id",libro.getId()));  } else {    checkType=CollectionUtils.exists(findLibrosSalidaByUser(usuario),new BeanPropertyValueEqualsPredicate("id",libro.getId()));  }  if (!checkType) {    StringBuffer sb=new StringBuffer();    sb.append("El libro con identificador [").append(libro.getId()).append("] no es de tipo [").append(tipoLibro.getName()).append("]");    if (logger.isDebugEnabled()) {      logger.debug(sb.toString());    }    throw new LibroException(sb.toString());  }}  }
class C{  public Vector3 floor(){  x=(float)Math.floor(x);  y=(float)Math.floor(y);  z=(float)Math.floor(z);  return this;}  }
class C{  public String biasToUniformClassTipText(){  return "Whether to use bias towards a uniform class. A value of 0 leaves the class " + "distribution as-is, a value of 1 ensures the class distribution is " + "uniform in the output data.";}  }
class C{  public int color(Context ctx,@AttrRes int colorStyle,@ColorRes int colorDefaultRes){  int color=color(ctx);  if (color == 0) {    return UIUtils.getThemeColorFromAttrOrRes(ctx,colorStyle,colorDefaultRes);  } else {    return color;  }}  }
class C{  private void initContactListener(){  jboxWorld.setContactListener(this);}  }
class C{  private void closeConnection(Connection connection) throws SQLException {  if (connection != null) {    try {      connection.close();    } catch (    SQLException e) {      throw new SQLException("Failed to close a connection to the data source.",e);    }  }}  }
class C{  public final void normalize(Quaternion q1){  float norm;  norm=(q1.x * q1.x + q1.y * q1.y + q1.z * q1.z + q1.w * q1.w);  if (norm > 0.0f) {    norm=1.0f / (float)Math.sqrt(norm);    this.x=norm * q1.x;    this.y=norm * q1.y;    this.z=norm * q1.z;    this.w=norm * q1.w;  } else {    this.x=(float)0.0;    this.y=(float)0.0;    this.z=(float)0.0;    this.w=(float)0.0;  }}  }
class C{  public void paintScrollPaneBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public static void start(Application application,Settings settings){  if (instance != null) {    throw new RuntimeException("DayNightSensor already instantiated.");  }  instance=new DayNightSensor(application,settings);}  }
class C{  private <T extends DataObject>boolean queryAndDeleteObject(URI id,Class<T> clazz,boolean force) throws Exception {  DependencyTracker dependencyTracker=null;  if (_dependencyChecker == null) {    DataObjectScanner dataObjectscanner=(DataObjectScanner)ctx.getBean("dataObjectScanner");    dependencyTracker=dataObjectscanner.getDependencyTracker();    _dependencyChecker=new DependencyChecker(_dbClient,dependencyTracker);  }  String reference=_dependencyChecker.checkDependencies(id,clazz,false);  if (reference != null) {    if (!force) {      System.err.println(String.format("Failed to delete the object %s: there are active dependencies",id));      printReferenceWhenDeletingFailed(id,clazz,dependencyTracker);      return false;    }    log.info("Force to delete object {} that has active dependencies",id);  }  T object=queryObject(id,clazz);  if (object == null) {    System.err.println(String.format("The object %s has already been deleted",id));    return false;  }  if ((object.canBeDeleted() == null) || force) {    if (object.canBeDeleted() != null) {      log.info("Force to delete object {} that can't be deleted",id);    }    _dbClient.removeObject(object);    return true;  }  System.err.println(String.format("The object %s can't be deleted",id));  printReferenceWhenDeletingFailed(id,clazz,dependencyTracker);  return false;}  }
class C{  public void enableHeadlight(boolean enable){  headlightEnabled=enable;  headlight.setEnabled(enable);  World.getInstance().getRoot().markDirty(DirtyType.RenderState);}  }
class C{  public static Plane constructNormalizedXPlane(final Vector... planePoints){  double bestDistance=0.0;  Vector bestPoint=null;  for (  final Vector point : planePoints) {    final double pointDist=point.y * point.y + point.z * point.z;    if (pointDist > bestDistance) {      bestDistance=pointDist;      bestPoint=point;    }  }  return constructNormalizedXPlane(bestPoint.y,bestPoint.z,0.0);}  }
class C{  public static void serialize(File serializedFile,Object serializableObject) throws IOException {  FileOutputStream fos=new FileOutputStream(serializedFile);  BufferedOutputStream bufStr=new BufferedOutputStream(fos);  OutputStream underlyingStream=null;  if (serializedFile.getName().endsWith(".gz")) {    underlyingStream=new GZIPOutputStream(bufStr);  } else   if (serializedFile.getName().endsWith(".bz2")) {    underlyingStream=new CBZip2OutputStream(bufStr);    fos.write("BZ".getBytes("UTF-8"));  } else {    underlyingStream=bufStr;  }  ObjectOutputStream serializer=new ObjectOutputStream(underlyingStream);  try {    serializer.writeObject(serializableObject);  }  finally {    serializer.flush();    serializer.close();  }}  }
class C{  public boolean isRelevant(){  return relevant;}  }
class C{  public static double geoHashCellSize(int level){  assert level >= 0;  final double w=geoHashCellWidth(level);  final double h=geoHashCellHeight(level);  return Math.sqrt(w * w + h * h);}  }
class C{  public static double computePerspectiveNearDistance(double farDistance,double farResolution,int depthBits){  if (farDistance < 0) {    String msg=Logging.getMessage("generic.DistanceLessThanZero");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (farResolution < 0) {    String msg=Logging.getMessage("generic.ResolutionLessThanZero");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (depthBits < 1) {    String msg=Logging.getMessage("generic.DepthBitsLessThanOne");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (farDistance == 0 || farResolution == 0) {    return 0;  }  double maxDepthValue=(1L << depthBits) - 1L;  return farDistance / (maxDepthValue / (1 - farResolution / farDistance) - maxDepthValue + 1);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 21:46:39.426 -0400",hash_original_method="DCB176B376623FC7561DCD073EB66D0A",hash_generated_method="BC07DF84425BB82DDA544CDA0E99B7FE") public boolean invoke(){  if (mClickListener != null && mClickListener.onMenuItemClick(this)) {    return true;  }  if (mMenu.dispatchMenuItemSelected(mMenu.getRootMenu(),this)) {    return true;  }  if (mItemCallback != null) {    mItemCallback.run();    return true;  }  if (mIntent != null) {    try {      mMenu.getContext().startActivity(mIntent);      return true;    } catch (    ActivityNotFoundException e) {      Log.e(TAG,"Can't find activity to handle intent; ignoring",e);    }  }  if (mActionProvider != null && mActionProvider.onPerformDefaultAction()) {    return true;  }  return false;}  }
class C{  void run(String out){  this.outDir=out;  new File(out).mkdirs();  BufferedImage img;  Graphics2D g;  img=new BufferedImage(SIZE * 64,SIZE * LINE_REPEAT,BufferedImage.TYPE_INT_ARGB);  g=img.createGraphics();  for (int i=0; i < 2; i++) {    setStroke(g,i);    g.drawLine(0,SIZE / 2,SIZE * 64,SIZE / 2);  }  g.dispose();  savePng(img,"div-d.png");  img=null;  img=new BufferedImage(SIZE,SIZE * LINE_REPEAT,BufferedImage.TYPE_INT_ARGB);  g=img.createGraphics();  for (int i=0; i < 2; i++) {    setStroke(g,i);    g.drawLine(0,SIZE / 2,SIZE,SIZE / 2);    g.drawLine(SIZE / 2,SIZE,SIZE / 2,SIZE * LINE_REPEAT);    g.drawArc(-SIZE / 2,SIZE / 2,SIZE,SIZE,0,90);  }  g.dispose();  savePng(img,"div-ts.png");  savePng(flipHorizontal(img),"div-te.png");  img=null;  img=new BufferedImage(SIZE,SIZE * LINE_REPEAT,BufferedImage.TYPE_INT_ARGB);  g=img.createGraphics();  for (int i=0; i < 2; i++) {    setStroke(g,i);    g.drawArc(SIZE / 2,-SIZE / 2,SIZE,SIZE,180,270);  }  savePng(img,"div-ls.png");  savePng(flipHorizontal(img),"div-le.png");  for (int i=0; i < 2; i++) {    setStroke(g,i);    g.drawArc(SIZE / 2,-SIZE / 2,SIZE,SIZE,180,270);    g.drawLine(SIZE / 2,0,SIZE / 2,SIZE * LINE_REPEAT);  }  g.dispose();  savePng(img,"div-ks.png");  savePng(flipHorizontal(img),"div-ke.png");  img=null;}  }
class C{  public AnalyticsConfigData(String argTrackingCode,VisitorData visitorData){  if (argTrackingCode == null)   throw new RuntimeException("Tracking code cannot be null");  trackingCode=argTrackingCode;  this.visitorData=visitorData;}  }
class C{  @Override public void fail(Object jobId){}  }
class C{  public void test() throws Exception {  int val=0xffff;  TestCase.assertEquals((short)-1,U16.t(val));  TestCase.assertEquals((short)32767,U16.t(0x7fff));  TestCase.assertEquals(val,U16.f((short)-1));}  }
class C{  private void validateReference(Element referentElement) throws XMLSecurityException {  if (!XMLUtils.elementIsInSignatureSpace(referentElement,Constants._TAG_KEYINFO)) {    Object exArgs[]={new QName(referentElement.getNamespaceURI(),referentElement.getLocalName())};    throw new XMLSecurityException("KeyInfoReferenceResolver.InvalidReferentElement.WrongType",exArgs);  }  KeyInfo referent=new KeyInfo(referentElement,"");  if (referent.containsKeyInfoReference()) {    if (secureValidation) {      throw new XMLSecurityException("KeyInfoReferenceResolver.InvalidReferentElement.ReferenceWithSecure");    } else {      throw new XMLSecurityException("KeyInfoReferenceResolver.InvalidReferentElement.ReferenceWithoutSecure");    }  }}  }
class C{  public String format(final LogEvent event){  final int priority=getSyslogPriority(event);  final int facility=getSyslogFacility(event);  String message=event.getMessage();  if (null == message) {    message="";  }  if (m_showFacilityBanner) {    message=getFacilityDescription(facility) + ": " + message;  }  return "<" + (facility | priority) + "> "+ message;}  }
class C{  public static byte[] string2utf(String s){  return chars2utf(s.toCharArray());}  }
class C{  private boolean shouldRewrite(String contentType){  String lowerCased=contentType.toLowerCase();  return (lowerCased.indexOf("html") > -1 || lowerCased.indexOf("css") > -1 || lowerCased.indexOf("javascript") > -1);}  }
class C{  public void remove(K k){  boxedHashMap.remove(k);}  }
class C{  public boolean addAuxClasspathEntry(String auxClasspathEntry){  return addToListInternal(auxClasspathEntryList,makeAbsoluteCWD(auxClasspathEntry));}  }
class C{  @Bean public SimpleMappingExceptionResolver exceptionResolver(){  SimpleMappingExceptionResolver exceptionResolver=new SimpleMappingExceptionResolver();  Properties exceptionMappings=new Properties();  exceptionMappings.put("java.lang.Exception","error/error");  exceptionMappings.put("java.lang.RuntimeException","error/error");  exceptionResolver.setExceptionMappings(exceptionMappings);  Properties statusCodes=new Properties();  statusCodes.put("error/404","404");  statusCodes.put("error/error","500");  exceptionResolver.setStatusCodes(statusCodes);  return exceptionResolver;}  }
class C{  @Override public Object score(AlignmentTemplate alTemp){  return null;}  }
class C{  public static void checkForDuplicatePortNetworkIdWithinSystem(DbClient dbClient,String portNetworkId,URI systemURI){  URIQueryResultList portUriList=new URIQueryResultList();  dbClient.queryByConstraint(AlternateIdConstraint.Factory.getStoragePortEndpointConstraint(portNetworkId),portUriList);  Iterator<URI> storagePortIter=portUriList.iterator();  while (storagePortIter.hasNext()) {    StoragePort port=dbClient.queryObject(StoragePort.class,storagePortIter.next());    if (port != null && !port.getInactive() && port.getStorageDevice().toString().equals(systemURI.toString())) {      throw APIException.badRequests.duplicateEntityWithField("StoragePort","portNetworkId");    }  }}  }
class C{  @Override public String toString(){  return "CUDA_TEXTURE_DESC[" + createString(",") + "]";}  }
class C{  public JDBCPieDataset(String url,String driverName,String user,String password) throws SQLException, ClassNotFoundException {  Class.forName(driverName);  this.connection=DriverManager.getConnection(url,user,password);}  }
class C{  public int hashCode(){  return hashCode;}  }
class C{  final int findMarkAdjustIndex(int searchIndex){  search.index=Math.max(searchIndex,1);  int index=findSortIndex(search);  for (int i=index - 1; i >= 0; i--) {    MarkData d=marks.elementAt(i);    if (d.index != search.index) {      break;    }    index-=1;  }  return index;}  }
class C{  public StateMachineTestPlanStepBuilder step(){  return new StateMachineTestPlanStepBuilder();}  }
class C{  public static DecomposableMatchBuilder0<Float> caseFloat(float f){  List<Matcher<Object>> matchers=new ArrayList<>();  matchers.add(eq(f));  return new DecomposableMatchBuilder0<>(matchers,new PrimitiveFieldExtractor<>(Float.class));}  }
class C{  protected int entryHashCode(HashEntry entry){  return entry.hashCode;}  }
class C{  private static void callFlowMethodOnJavaCompiler(JavaCompiler compiler,Object arg){  if (flowMethod == null) {    try {      flowMethod=JavaCompiler.class.getDeclaredMethod("flow",java.util.Queue.class);    } catch (    NoSuchMethodException e) {      try {        flowMethod=JavaCompiler.class.getDeclaredMethod("flow",com.sun.tools.javac.util.List.class);      } catch (      NoSuchMethodException e2) {        throw Lombok.sneakyThrow(e2);      }    }  }  try {    flowMethod.invoke(compiler,arg);  } catch (  Exception e) {    if (e instanceof InvocationTargetException)     throw Lombok.sneakyThrow(e.getCause());    throw Lombok.sneakyThrow(e);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 14:38:21.722 -0400",hash_original_method="2E413CDCDC92249000630030E3446FB8",hash_generated_method="411393EBF5782B8B2161A44F61B72E0D") public void start(){  SR_RecognizerActivateRule(mRecognizer,mActiveGrammar.mGrammar,"trash",1);  SR_RecognizerStart(mRecognizer);}  }
class C{  public MaximizationFixWindowListener(Frame owner,boolean enabled,int wait,boolean logging){  super();  m_Owner=owner;  m_Enabled=enabled;  m_Wait=wait;  m_CurrentBounds=null;  m_UnMaximizedBounds=null;  m_IgnoreStateChangeEvent=false;  m_Logging=logging;}  }
class C{  private static String findSomeDir(String dir,boolean create){  File d=new File(dir);  String[] dl=d.list();  if (dl == null) {    throw new RuntimeException("Can't list " + dir);  }  for (int i=0; i < dl.length; i++) {    File f=new File(d,dl[i]);    if (Files.isDirectory(f.toPath(),LinkOption.NOFOLLOW_LINKS)) {      String[] dl2=f.list();      if (dl2 == null || dl2.length >= 250) {        continue;      }      return dl[i];    }  }  if (create) {    File sd=new File(d,gensym());    if (sd.mkdir())     return sd.getName();  }  return null;}  }
class C{  public boolean isOK(){  return m_isOK;}  }
class C{  public TrainingSetEvent(Object source,Instances trainSet,int runNum,int maxRunNum,int setNum,int maxSetNum){  this(source,trainSet,setNum,maxSetNum);  m_runNumber=runNum;  m_maxRunNumber=maxRunNum;}  }
class C{  public <T>T[] toArray(T[] vec){  return elems.toArray(vec);}  }
class C{  public BEncodedHeap(final File location,final int keylength) throws IOException {  this.table=new Heap(location,keylength,NaturalOrder.naturalOrder,100);  this.columnames=new LinkedHashSet<String>();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList employeeList;  int length;  int expectedCount=0;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(2);  employeeList=employeeNode.getChildNodes();  length=(int)employeeList.getLength();  assertTrue("lengthIs6or13",(equals(6,length) | equals(13,length)));}  }
class C{  public static String encodeHex(byte[] bytes){  StringBuilder hex=new StringBuilder(bytes.length * 2);  for (  byte aByte : bytes) {    if (((int)aByte & 0xff) < 0x10) {      hex.append("0");    }    hex.append(Integer.toString((int)aByte & 0xff,16));  }  return hex.toString();}  }
class C{  PolicyNodeImpl copyTree(){  return copyTree(null);}  }
class C{  public void clear(){  removeAllItems();}  }
class C{  public static void intBenchmark(int runs,int rows,int columns,String kind,boolean print,int initialCapacity,double minLoadFactor,double maxLoadFactor){  throw new InternalError();}  }
class C{  protected void fireFigureRemoved(Figure f,int zIndex){  CompositeFigureEvent event=null;  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == CompositeFigureListener.class) {      if (event == null) {        event=new CompositeFigureEvent(this,f,f.getDrawingArea(),zIndex);      }      ((CompositeFigureListener)listeners[i + 1]).figureRemoved(event);    }  }}  }
class C{  private static boolean compareSentences(String oo,String no){  char[] ochars=oo.toCharArray();  char[] nchars=no.toCharArray();  int oindex=0;  int nindex=0;  while (true) {    if (oindex == ochars.length)     if (nindex == nchars.length) {      return true;    } else     return false; else {      if (nindex == nchars.length)       return false;    }    if (ochars[oindex] != nchars[nindex]) {      if (oindex > 0 && nindex > 0 && ochars[oindex - 1] == '\'' && nchars[nindex - 1] == '\'' && nchars[nindex] == ' ') {        nindex++;        continue;      } else       if (ochars[oindex] == '\'' && nchars[nindex] == ' ') {        nindex++;        continue;      } else       if (nchars[nindex] == '\'' && ochars[oindex] == ' ') {        oindex++;        continue;      } else {        return false;      }    } else {      ++oindex;      ++nindex;    }  }}  }
class C{  public boolean canTerminate(){  return targetInformation.getDebuggerOptions().canTerminate();}  }
class C{  public int[] generateDistinctRandomInts(int length,int cap){  int[] data=new int[length];  boolean[] used=new boolean[cap];  for (int i=0; i < length; i++) {    int nextAttempt;    for (nextAttempt=random.nextInt(cap); used[nextAttempt]; nextAttempt=random.nextInt(cap)) {    }    data[i]=nextAttempt;    used[nextAttempt]=true;  }  return data;}  }
class C{  public static Function<String,String> dos2unix(){  return null;}  }
class C{  public DefaultXPath(String text) throws InvalidXPathException {  this.text=text;  this.xpath=parse(text);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:26.208 -0500",hash_original_method="BDEF03D241AC1847AD8585ACF20EF682",hash_generated_method="FAEDE6B1CF62F5433757D65A427A7126") protected ListAdapter onCreateRootAdapter(){  return new PreferenceGroupAdapter(this);}  }
class C{  private void extract(Document source){  Node node=source.getDocumentElement();  if (node != null) {    offer(node);    extract(node);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public Type3Message(Type2Message type2,String password,String domain,String user,String workstation,int flags){  setFlags(flags | getDefaultFlags(type2));  if (workstation == null)   workstation=getDefaultWorkstation();  setWorkstation(workstation);  setDomain(domain);  setUser(user);switch (LM_COMPATIBILITY) {case 0:case 1:    if ((getFlags() & NTLMSSP_NEGOTIATE_NTLM2) == 0) {      setLMResponse(getLMResponse(type2,password));      setNTResponse(getNTResponse(type2,password));    } else {      byte[] clientChallenge=new byte[24];      RANDOM.nextBytes(clientChallenge);      java.util.Arrays.fill(clientChallenge,8,24,(byte)0x00);      byte[] responseKeyNT=NtlmPasswordAuthentication.nTOWFv1(password);      byte[] ntlm2Response=NtlmPasswordAuthentication.getNTLM2Response(responseKeyNT,type2.getChallenge(),clientChallenge);      setLMResponse(clientChallenge);      setNTResponse(ntlm2Response);      if ((getFlags() & NTLMSSP_NEGOTIATE_SIGN) == NTLMSSP_NEGOTIATE_SIGN) {        byte[] sessionNonce=new byte[16];        System.arraycopy(type2.getChallenge(),0,sessionNonce,0,8);        System.arraycopy(clientChallenge,0,sessionNonce,8,8);        MD4 md4=new MD4();        md4.update(responseKeyNT);        byte[] userSessionKey=md4.digest();        HMACT64 hmac=new HMACT64(userSessionKey);        hmac.update(sessionNonce);        byte[] ntlm2SessionKey=hmac.digest();        if ((getFlags() & NTLMSSP_NEGOTIATE_KEY_EXCH) != 0) {          masterKey=new byte[16];          RANDOM.nextBytes(masterKey);          byte[] exchangedKey=new byte[16];          RC4 rc4=new RC4(ntlm2SessionKey);          rc4.update(masterKey,0,16,exchangedKey,0);          setSessionKey(exchangedKey);        } else {          masterKey=ntlm2SessionKey;          setSessionKey(masterKey);        }      }    }  break;case 2:byte[] nt=getNTResponse(type2,password);setLMResponse(nt);setNTResponse(nt);break;case 3:case 4:case 5:byte[] responseKeyNT=NtlmPasswordAuthentication.nTOWFv2(domain,user,password);byte[] clientChallenge=new byte[8];RANDOM.nextBytes(clientChallenge);setLMResponse(getLMv2Response(type2,domain,user,password,clientChallenge));byte[] clientChallenge2=new byte[8];RANDOM.nextBytes(clientChallenge2);setNTResponse(getNTLMv2Response(type2,responseKeyNT,clientChallenge2));if ((getFlags() & NTLMSSP_NEGOTIATE_SIGN) == NTLMSSP_NEGOTIATE_SIGN) {HMACT64 hmac=new HMACT64(responseKeyNT);hmac.update(ntResponse,0,16);byte[] userSessionKey=hmac.digest();if ((getFlags() & NTLMSSP_NEGOTIATE_KEY_EXCH) != 0) {masterKey=new byte[16];RANDOM.nextBytes(masterKey);byte[] exchangedKey=new byte[16];RC4 rc4=new RC4(userSessionKey);rc4.update(masterKey,0,16,exchangedKey,0);setSessionKey(exchangedKey);} else {masterKey=userSessionKey;setSessionKey(masterKey);}}break;default :setLMResponse(getLMResponse(type2,password));setNTResponse(getNTResponse(type2,password));}}  }
class C{  public FluentFunction<T,R> before(final Consumer<T> action){  return withFn(null);}  }
class C{  public static final int find(int[] a,int key,int length){  for (int i=0; i < length; i++) {    if (a[i] == key) {      return i;    }  }  return -1;}  }
class C{  public static String rightJustify(int fieldSize,String field){  if (field == null) {    field="";  }  StringBuffer output=new StringBuffer();  for (int i=0, j=fieldSize - field.length(); i < j; i++) {    output.append(' ');  }  output.append(field);  return output.toString();}  }
class C{  private void paintMe(Graphics g){  g.setFont(g.getFont().deriveFont(11f).deriveFont(Font.BOLD));  FontMetrics fontMetrics=g.getFontMetrics(g.getFont());  int type=this.node.getType();  Color color;switch (type) {case PertChartAbstraction.Type.NORMAL:    color=NORMAL_COLOR;  break;case PertChartAbstraction.Type.SUPER:color=SUPER_COLOR;break;case PertChartAbstraction.Type.MILESTONE:color=MILESTONE_COLOR;break;default :color=NORMAL_COLOR;}g.setColor(this.backgroundColor);g.fillRoundRect(x,y,NODE_WIDTH,NODE_HEIGHT,16,16);g.setColor(color);g.drawRoundRect(x,y,NODE_WIDTH,NODE_HEIGHT,16,16);g.drawRoundRect(x + 1,y + 1,NODE_WIDTH - 2,NODE_HEIGHT - 2,14,14);g.drawLine(x,y + yName + fontMetrics.getHeight()+ Y_OFFSET,x + NODE_WIDTH,y + yName + fontMetrics.getHeight()+ Y_OFFSET);g.setColor(Color.BLACK);String name=node.getName();g.drawString(StringUtils.getTruncatedString(name,NODE_WIDTH - xName,fontMetrics),x + xName,y + yName + fontMetrics.getHeight());g.setFont(g.getFont().deriveFont(Font.PLAIN));fontMetrics=g.getFontMetrics(g.getFont());g.setColor(Color.BLACK);g.drawString(language.getText("start") + ": " + node.getStartDate().toString(),x + xName,(int)(y + yName + 2.3 * fontMetrics.getHeight()));g.drawString(language.getText("end") + ": " + node.getEndDate().toString(),x + xName,(int)(y + yName + 3.3 * fontMetrics.getHeight()));if (node.getDuration() != null) g.drawString(language.getText("duration") + ": " + node.getDuration().getLength(),x + xName,(int)(y + yName + 4.3 * fontMetrics.getHeight()));}  }
class C{  public byte[] serialize(){  int length;  if (dataOffset == 0)   dataOffset=5;  length=dataOffset << 2;  byte[] payloadData=null;  if (payload != null) {    payload.setParent(this);    payloadData=payload.serialize();    length+=payloadData.length;  }  byte[] data=new byte[length];  ByteBuffer bb=ByteBuffer.wrap(data);  bb.putShort((short)this.sourcePort.getPort());  bb.putShort((short)this.destinationPort.getPort());  bb.putInt(this.sequence);  bb.putInt(this.acknowledge);  bb.putShort((short)(this.flags | (dataOffset << 12)));  bb.putShort(this.windowSize);  bb.putShort(this.checksum);  bb.putShort(this.urgentPointer);  if (dataOffset > 5) {    int padding;    bb.put(options);    padding=(dataOffset << 2) - 20 - options.length;    for (int i=0; i < padding; i++)     bb.put((byte)0);  }  if (payloadData != null)   bb.put(payloadData);  if (this.parent != null && this.parent instanceof IPv4)   ((IPv4)this.parent).setProtocol(IpProtocol.TCP);  if (this.checksum == 0) {    if (this.parent != null && this.parent instanceof IPv4) {      IPv4 ipv4=(IPv4)this.parent;      int bufferlength=length + 12;      boolean odd=length % 2 == 1;      byte[] source=ipv4.getSourceAddress().getBytes();      byte[] destination=ipv4.getDestinationAddress().getBytes();      if (odd) {        ++bufferlength;      }      byte[] buffer=new byte[bufferlength];      buffer[0]=source[0];      buffer[1]=source[1];      buffer[2]=source[2];      buffer[3]=source[3];      buffer[4]=destination[0];      buffer[5]=destination[1];      buffer[6]=destination[2];      buffer[7]=destination[3];      buffer[8]=(byte)0;      buffer[9]=(byte)ipv4.getProtocol().getIpProtocolNumber();      shortToBytes((short)length,buffer,10);      int i=11;      while (++i < length + 12) {        buffer[i]=data[i + 0 - 12];      }      if (odd) {        buffer[i]=(byte)0;      }      this.checksum=checksum(buffer,buffer.length,0);    } else {      bb.rewind();      int accumulation=0;      for (int i=0; i < length / 2; ++i) {        accumulation+=0xffff & bb.getShort();      }      if (length % 2 > 0) {        accumulation+=(bb.get() & 0xff) << 8;      }      accumulation=((accumulation >> 16) & 0xffff) + (accumulation & 0xffff);      this.checksum=(short)(~accumulation & 0xffff);    }    bb.putShort(16,this.checksum);  }  return data;}  }
class C{  javax.cache.Cache<Integer,String> createJsr107Cache(String cacheName){  MutableConfiguration<Integer,String> mc=new MutableConfiguration<>();  mc.setCacheLoaderFactory(FactoryBuilder.factoryOf(new NumberCacheLoader()));  javax.cache.Cache<Integer,String> cache=cacheManager().createCache(cacheName,mc);  return cache;}  }
class C{  public boolean needsUpdatingWhileSaving(){  return mNeedsUpdating;}  }
class C{  @Override public Model learn(ExampleSet exampleSet) throws OperatorException {  svm_parameter params=getParameters(exampleSet);  if (exampleSet.size() < 2) {    throw new UserError(this,110,2);  }  Tools.onlyNonMissingValues(exampleSet,getOperatorClassName(),this);  Attribute label=exampleSet.getAttributes().getLabel();  if (label.isNominal()) {    if ((params.svm_type != SVM_TYPE_C_SVC) && (params.svm_type != SVM_TYPE_NU_SVC) && (params.svm_type != SVM_TYPE_ONE_CLASS)) {      throw new UserError(this,102,SVM_TYPES[params.svm_type],label.getName());    }    if ((params.svm_type == SVM_TYPE_ONE_CLASS) && label.getMapping().size() > 1) {      throw new UserError(this,118,label.getName(),label.getMapping().size() + "",1 + " for one-class svm");    }  } else {    if ((params.svm_type != SVM_TYPE_EPS_SVR) && (params.svm_type != SVM_TYPE_NU_SVR)) {      throw new UserError(this,101,SVM_TYPES[params.svm_type],label.getName());    }  }  svm_problem problem=getProblem(exampleSet);  this.checkForStop();  String errorMsg=Svm.svm_check_parameter(problem,params);  if (errorMsg != null) {    throw new UserError(this,905,new Object[]{"libsvm",errorMsg});  }  log("Training LibSVM.");  svm_model model=Svm.svm_train(problem,params,this);  return new LibSVMModel(exampleSet,model,exampleSet.getAttributes().size(),getParameterAsBoolean(PARAMETER_CONFIDENCE_FOR_MULTICLASS));}  }
class C{  private void findAccount(EditText editText,int type){  if (!TextUtils.isEmpty(editText.getText().toString())) {    if (editText.getTag() != null) {      FindAccountRunnable lastRunnable=(FindAccountRunnable)editText.getTag();      lastRunnable.cancel();    }    FindAccountRunnable findRunnable=new FindAccountRunnable(type);    editText.setTag(findRunnable);    EspBaseApiUtil.submit(findRunnable);  }}  }
class C{  public void popScene(){  assert runningCCScene_ != null : "A running CCScene is needed";  CCScenesStack_.remove(CCScenesStack_.size() - 1);  int c=CCScenesStack_.size();  if (c == 0) {    end();  } else {    nextCCScene_=CCScenesStack_.get(c - 1);  }}  }
class C{  static protected int SFSSelectFeature(Set<Integer> available,DataSet dataSet,Set<Integer> catToRemove,Set<Integer> numToRemove,Set<Integer> catSelecteed,Set<Integer> numSelected,Object evaluater,int folds,Random rand,double[] PbestScore,int minFeatures){  int nCat=dataSet.getNumCategoricalVars();  int curBest=-1;  double curBestScore=Double.POSITIVE_INFINITY;  for (  int feature : available) {    removeFeature(feature,nCat,catToRemove,numToRemove);    DataSet workOn=dataSet.shallowClone();    RemoveAttributeTransform remove=new RemoveAttributeTransform(workOn,catToRemove,numToRemove);    workOn.applyTransform(remove);    double score=getScore(workOn,evaluater,folds,rand);    if (score < curBestScore) {      curBestScore=score;      curBest=feature;    }    addFeature(feature,nCat,catToRemove,numToRemove);  }  if (curBestScore <= 1e-14 && PbestScore[0] <= 1e-14 && catSelecteed.size() + numSelected.size() >= minFeatures)   return -1;  if (curBestScore < PbestScore[0] || catSelecteed.size() + numSelected.size() < minFeatures || Math.abs(PbestScore[0] - curBestScore) < 1e-3) {    PbestScore[0]=curBestScore;    addFeature(curBest,nCat,catSelecteed,numSelected);    removeFeature(curBest,nCat,catToRemove,numToRemove);    available.remove(curBest);    return curBest;  } else   return -1;}  }
class C{  public BipartiteMatching(Graph G){  bipartition=new BipartiteX(G);  if (!bipartition.isBipartite()) {    throw new IllegalArgumentException("graph is not bipartite");  }  this.V=G.V();  mate=new int[V];  for (int v=0; v < V; v++)   mate[v]=UNMATCHED;  while (hasAugmentingPath(G)) {    int t=-1;    for (int v=0; v < G.V(); v++) {      if (!isMatched(v) && edgeTo[v] != -1) {        t=v;        break;      }    }    for (int v=t; v != -1; v=edgeTo[edgeTo[v]]) {      int w=edgeTo[v];      mate[v]=w;      mate[w]=v;    }    cardinality++;  }  inMinVertexCover=new boolean[V];  for (int v=0; v < V; v++) {    if (bipartition.color(v) && !marked[v])     inMinVertexCover[v]=true;    if (!bipartition.color(v) && marked[v])     inMinVertexCover[v]=true;  }  assert certifySolution(G);}  }
class C{  @Override public void run(){  amIActive=true;  String destHeader=null;  String outputHeader=null;  String backLinkHeader=null;  WhiteboxRaster destImage;  WhiteboxRaster output;  WhiteboxRaster backLink;  int cols, rows;  double z, flowDir;  float progress=0;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double lnOf2=0.693147180559945;  double gridRes;  int col, row, a;  int c;  int x, y, i;  boolean flag=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      destHeader=args[i];    } else     if (i == 1) {      backLinkHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    }  }  if ((destHeader == null) || (backLinkHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    destImage=new WhiteboxRaster(destHeader,"r");    rows=destImage.getNumberRows();    cols=destImage.getNumberColumns();    double noData=destImage.getNoDataValue();    gridRes=(destImage.getCellSizeX() + destImage.getCellSizeY()) / 2;    backLink=new WhiteboxRaster(backLinkHeader,"r");    if (backLink.getNumberColumns() != cols || backLink.getNumberRows() != rows) {      showFeedback("Input images must have the same dimensions");      return;    }    output=new WhiteboxRaster(outputHeader,"rw",backLinkHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    double[] data;    for (row=0; row < rows; row++) {      data=destImage.getRowValues(row);      for (col=0; col < cols; col++) {        if (data[col] > 0) {          x=col;          y=row;          flag=true;          do {            z=output.getValue(y,x);            if (z == noData) {              output.setValue(y,x,1);            } else {              output.setValue(y,x,z + 1);            }            flowDir=backLink.getValue(y,x);            if (flowDir > 0) {              c=(int)(Math.log(flowDir) / lnOf2);              x+=dX[c];              y+=dY[c];            } else {              flag=false;            }          } while (flag);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    destImage.close();    backLink.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public String toString(){  return getWriter().toString();}  }
class C{  public void writeCollectionState(URI backupLoc,String backupId,String collectionName,DocCollection collectionState) throws IOException {  URI dest=repository.resolve(backupLoc,backupId,ZK_STATE_DIR,COLLECTION_PROPS_FILE);  try (OutputStream collectionStateOs=repository.createOutput(dest)){    collectionStateOs.write(Utils.toJSON(Collections.singletonMap(collectionName,collectionState)));  } }  }
class C{  public static void downsample(Mat img,double scale){  Imgproc.pyrDown(img,img,new Size((double)img.width() / scale,(double)img.height() / scale));}  }
class C{  private Set<String> readSubscriptionsForUser(String user) throws SubscriptionException {  File userRoot=new File(store.userRoot(user));  Set<String> subscriptionNames;  try {    subscriptionNames=readSubscriptions(userRoot);  } catch (  IOException e) {    throw new SubscriptionException(e);  }  return subscriptionNames;}  }
class C{  public boolean isGradientEnabled(){  return mGradientEnabled;}  }
class C{  public synchronized long skip(long n){  long k=count - pos;  if (n < k) {    k=n < 0 ? 0 : n;  }  pos+=k;  return k;}  }
class C{  public void rulesR8R9R10(Graph graph){  List<Node> nodes=graph.getNodes();  for (  Node c : nodes) {    List<Node> intoCArrows=graph.getNodesInTo(c,Endpoint.ARROW);    for (    Node a : intoCArrows) {      if (!(graph.getEndpoint(c,a) == Endpoint.CIRCLE)) {        continue;      }      if (!ruleR8(a,c,graph)) {        boolean b=ruleR9(a,c,graph);        if (!b) {          ruleR10(a,c,graph);        }      }    }  }}  }
class C{  private static void appendToSyncFile(File file,String key,String data) throws IOException, JSONException {  LogUtil.log(SyncInfoManager.class.getSimpleName(),"appendToSyncFile: " + data);  JSONParser parser=new JSONParser();  JSONArray array;  JSONObject obj;  try {    obj=(JSONObject)parser.parse(new FileReader(file));    array=(JSONArray)obj.get("DeletedPhotos");  } catch (  ParseException e) {    e.printStackTrace();    obj=new JSONObject();    array=new JSONArray();  }  JSONObject newData=new JSONObject();  newData.put(key,data);  array.add(newData);  obj.put("DeletedPhotos",array);  LogUtil.log(SyncInfoManager.class.getSimpleName(),"JSONArray: " + array.toString());  FileWriter writer=null;  try {    writer=new FileWriter(file);    writer.write(obj.toString());  } catch (  IOException e) {    e.printStackTrace();  } finally {    if (writer != null) {      writer.flush();      writer.close();    }  }}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(2);  newVector.addElement(new Option("\tSpecifies list of instances to select. First and last\n" + "\tare valid indexes. (required)\n","R",1,"-R <inst1,inst2-inst4,...>"));  newVector.addElement(new Option("\tSpecifies if inverse of selection is to be output.\n","V",0,"-V"));  return newVector.elements();}  }
class C{  public static void internalOnlyInvokeTestFailure(String failureKey){  String invokeArtificialFailure=_coordinator.getPropertyInfo().getProperty(ARTIFICIAL_FAILURE);  if (invokeArtificialFailure != null && invokeArtificialFailure.equalsIgnoreCase(failureKey)) {    throw new NullPointerException("Artificially Thrown Exception");  }}  }
class C{  public void addToBlacklist(String bssid){  sendMessage(CMD_BLACKLIST_NETWORK,bssid);}  }
class C{  public KmlPlacemark(){  super();}  }
class C{  public static <Key,Value>Value putIfAbsent(final ObjectMap<Key,Value> map,final Key key,final Value value){  if (!map.containsKey(key)) {    map.put(key,value);    return value;  }  return map.get(key);}  }
class C{  public PersonalChestSlot(final PersonalChest owner){  super(owner);  this.chest=owner;}  }
class C{  public ConversationBuilder end(){  conversationBuilder.prompts=prompts;  return conversationBuilder;}  }
class C{  public SolrInputDocument toSolrInputDocument(SolrDocument doc){  SolrInputDocument sid=new SolrInputDocument();  for (  String name : doc.getFieldNames()) {    if (this.contains(name)) {      sid.addField(name,doc.getFieldValue(name),1.0f);    }  }  return sid;}  }
class C{  public DetachedBaggage split(){  return wrap(impl == null ? null : impl.split());}  }
class C{  public BasicControl(String id){  this.id=id;}  }
class C{  int extractVersionFromFilename(final File file){  final Matcher matcher=versionedPattern.matcher(file.getAbsolutePath());  matcher.find();  return Integer.parseInt(matcher.group(2));}  }
class C{  @Override protected void onPostCreate(Bundle savedInstanceState){  super.onPostCreate(savedInstanceState);  mDrawerToggle.syncState();}  }
class C{  public void addMessageListener(MessageListener listener){  if (listener == null) {    return;  }  listeners.add(listener);}  }
class C{  public CommitReplyException(String s){  super(s);  this.exceptions=Collections.EMPTY_SET;}  }
class C{  final public static boolean approximately_equal(float a,float b,float epsilon){  return (Math.abs(a - b) <= epsilon);}  }
class C{  public static Date add(final Date inputDate,final int addType,final int addAmount){  final Calendar calendar=Calendar.getInstance();  calendar.setTime(inputDate);  calendar.add(addType,addAmount);  return calendar.getTime();}  }
class C{  public ExportKeyPairPrivateKeyAction(KseFrame kseFrame){  super(kseFrame);  putValue(LONG_DESCRIPTION,res.getString("ExportKeyPairPrivateKeyAction.statusbar"));  putValue(NAME,res.getString("ExportKeyPairPrivateKeyAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("ExportKeyPairPrivateKeyAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("ExportKeyPairPrivateKeyAction.image")))));}  }
class C{  public void handleAnimatedAttributeChanged(AnimatedLiveAttributeValue alav){  try {    boolean rebuild=false;    if (alav.getNamespaceURI() == null) {      String ln=alav.getLocalName();      if (ln.equals(SVG_WIDTH_ATTRIBUTE) || ln.equals(SVG_HEIGHT_ATTRIBUTE)) {        rebuild=true;      } else       if (ln.equals(SVG_X_ATTRIBUTE) || ln.equals(SVG_Y_ATTRIBUTE)) {        SVGDocument doc=(SVGDocument)e.getOwnerDocument();        SVGOMSVGElement se=(SVGOMSVGElement)e;        boolean isOutermost=doc.getRootElement() == e;        if (!isOutermost) {          AbstractSVGAnimatedLength _x=(AbstractSVGAnimatedLength)se.getX();          float x=_x.getCheckedValue();          AbstractSVGAnimatedLength _y=(AbstractSVGAnimatedLength)se.getY();          float y=_y.getCheckedValue();          AffineTransform positionTransform=AffineTransform.getTranslateInstance(x,y);          CanvasGraphicsNode cgn;          cgn=(CanvasGraphicsNode)node;          cgn.setPositionTransform(positionTransform);          return;        }      } else       if (ln.equals(SVG_VIEW_BOX_ATTRIBUTE) || ln.equals(SVG_PRESERVE_ASPECT_RATIO_ATTRIBUTE)) {        SVGDocument doc=(SVGDocument)e.getOwnerDocument();        SVGOMSVGElement se=(SVGOMSVGElement)e;        boolean isOutermost=doc.getRootElement() == e;        float x=0;        float y=0;        if (!isOutermost) {          AbstractSVGAnimatedLength _x=(AbstractSVGAnimatedLength)se.getX();          x=_x.getCheckedValue();          AbstractSVGAnimatedLength _y=(AbstractSVGAnimatedLength)se.getY();          y=_y.getCheckedValue();        }        AbstractSVGAnimatedLength _width=(AbstractSVGAnimatedLength)se.getWidth();        float w=_width.getCheckedValue();        AbstractSVGAnimatedLength _height=(AbstractSVGAnimatedLength)se.getHeight();        float h=_height.getCheckedValue();        CanvasGraphicsNode cgn;        cgn=(CanvasGraphicsNode)node;        SVGOMAnimatedRect vb=(SVGOMAnimatedRect)se.getViewBox();        SVGAnimatedPreserveAspectRatio par=se.getPreserveAspectRatio();        AffineTransform newVT=ViewBox.getPreserveAspectRatioTransform(e,vb,par,w,h,ctx);        AffineTransform oldVT=cgn.getViewingTransform();        if ((newVT.getScaleX() != oldVT.getScaleX()) || (newVT.getScaleY() != oldVT.getScaleY()) || (newVT.getShearX() != oldVT.getShearX())|| (newVT.getShearY() != oldVT.getShearY()))         rebuild=true; else {          cgn.setViewingTransform(newVT);          Shape clip=null;          if (CSSUtilities.convertOverflow(e)) {            float[] offsets=CSSUtilities.convertClip(e);            if (offsets == null) {              clip=new Rectangle2D.Float(x,y,w,h);            } else {              clip=new Rectangle2D.Float(x + offsets[3],y + offsets[0],w - offsets[1] - offsets[3],h - offsets[2] - offsets[0]);            }          }          if (clip != null) {            try {              AffineTransform at;              at=cgn.getPositionTransform();              if (at == null)               at=new AffineTransform(); else               at=new AffineTransform(at);              at.concatenate(newVT);              at=at.createInverse();              clip=at.createTransformedShape(clip);              Filter filter=cgn.getGraphicsNodeRable(true);              cgn.setClip(new ClipRable8Bit(filter,clip));            } catch (            NoninvertibleTransformException ex) {            }          }        }      }      if (rebuild) {        CompositeGraphicsNode gn=node.getParent();        gn.remove(node);        disposeTree(e,false);        handleElementAdded(gn,e.getParentNode(),e);        return;      }    }  } catch (  LiveAttributeException ex) {    throw new BridgeException(ctx,ex);  }  super.handleAnimatedAttributeChanged(alav);}  }
class C{  private void checkStatus(HadoopJobId jobId,boolean complete) throws Exception {  for (int i=0; i < gridCount(); i++) {    IgniteKernal kernal=(IgniteKernal)grid(i);    Hadoop hadoop=kernal.hadoop();    HadoopJobStatus stat=hadoop.status(jobId);    assert stat != null;    IgniteInternalFuture<?> fut=hadoop.finishFuture(jobId);    if (!complete)     assertFalse(fut.isDone()); else {      info("Waiting for status future completion on node [idx=" + i + ", nodeId="+ kernal.getLocalNodeId()+ ']');      fut.get();    }  }}  }
class C{  public Vertex parseState(TextStream stream,Map<String,Map<String,Vertex>> elements,boolean debug,Network network){  try {    List<String> comments=null;    Vertex state=parseElement(stream,elements,debug,network);    BinaryData byteCode=new BinaryData();    ByteArrayOutputStream byteStream=new ByteArrayOutputStream();    DataOutputStream dataStream=new DataOutputStream(byteStream);    stream.skipWhitespace();    ensureNext('{',stream);    stream.skipWhitespace();    String element=stream.peekWord();    while (!("}".equals(element))) {      if (element == null) {        throw new SelfParseException("Unexpected end of state, missing '}'",stream);      }      element=element.toLowerCase();      if (element.equals(CASE)) {        parseCaseByteCode(stream,dataStream,elements,debug,network);      } else       if (element.equals(PATTERN)) {        parsePatternByteCode(stream,dataStream,elements,debug,network);      } else       if (element.equals(STATE)) {        parseState(stream,elements,debug,network);      } else       if (element.equals(VAR) || element.equals(VARIABLE)) {        parseVariable(stream,elements,debug,network);      } else       if (element.equals(QUOTIENT) || element.equals(ANSWER)) {        parseQuotientByteCode(stream,dataStream,elements,debug,network);      } else       if (element.equals(EQUATION) || element.equals(FUNCTION)) {        parseEquation(stream,elements,debug,network);      } else       if (element.equals(DO)) {        parseDoByteCode(stream,dataStream,elements,debug,network);      } else       if (element.equals(GOTO)) {        parseGotoByteCode(stream,dataStream,elements,debug,network);      } else       if (element.equals(PUSH)) {        parsePushByteCode(stream,dataStream,elements,debug,network);      } else       if (element.equals(RETURN)) {        parseReturnByteCode(stream,dataStream,elements,debug,network);      } else       if (element.equals("/")) {        comments=getComments(stream);        if (comments.isEmpty()) {          throw new SelfParseException("Unknown element: " + element,stream);        }      } else {        throw new SelfParseException("Unknown element: " + element,stream);      }      element=stream.peekWord();    }    ensureNext('}',stream);    dataStream.writeLong(0l);    byteCode.setBytes(byteStream.toByteArray());    state.setData(byteCode);    network.addVertex(state);    return state;  } catch (  IOException exception) {    throw new SelfParseException("IO Error",stream,exception);  }}  }
class C{  private int numInRow(TicTacToeBoard board,int num,char mark){  int c, r;  int ct=0;  for (c=0; c < board.numColumns(); c++) {    if (countMark(board,c,0,0,1,board.numRows(),mark) == num) {      ct++;    }  }  for (r=0; r < board.numRows(); r++) {    if (countMark(board,0,r,1,0,board.numColumns(),mark) == num) {      ct++;    }  }  if (countMark(board,0,0,1,1,board.numColumns(),mark) == num) {    ct++;  }  if (countMark(board,0,2,1,-1,board.numColumns(),mark) == num) {    ct++;  }  return ct;}  }
class C{  public void disableNavigationButtons(){  setTitle(getTitle() + " (fixed)");  nextSource.setEnabled(false);  previousSource.setEnabled(false);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:24.233 -0500",hash_original_method="43999A16FC6A2BCB60CE78FA610F37AD",hash_generated_method="CAA6FAED36ECA1054AC22F42FB17400E") private void parseExternalEntity(ExpatParser entityParser,InputSource inputSource) throws IOException, SAXException {  Reader reader=inputSource.getCharacterStream();  if (reader != null) {    try {      entityParser.append("<externalEntity>");      entityParser.parseFragment(reader);      entityParser.append("</externalEntity>");    }  finally {      IoUtils.closeQuietly(reader);    }    return;  }  InputStream in=inputSource.getByteStream();  if (in != null) {    try {      entityParser.append("<externalEntity>".getBytes(entityParser.encoding));      entityParser.parseFragment(in);      entityParser.append("</externalEntity>".getBytes(entityParser.encoding));    }  finally {      IoUtils.closeQuietly(in);    }    return;  }  String systemId=inputSource.getSystemId();  if (systemId == null) {    throw new ParseException("No input specified.",locator);  }  in=openUrl(systemId);  try {    entityParser.append("<externalEntity>".getBytes(entityParser.encoding));    entityParser.parseFragment(in);    entityParser.append("</externalEntity>".getBytes(entityParser.encoding));  }  finally {    IoUtils.closeQuietly(in);  }}  }
class C{  public void update(byte input){  digest.update(input);}  }
class C{  @Override public void validate(final IDescription cd){  final IExpressionDescription receiver=cd.getFacet(NAME);  final IExpression expr=receiver.getExpression();  if (!(expr instanceof IVarExpression)) {    cd.error("The expression " + cd.getLitteral(NAME) + " is not a reference to a variable ",NAME);    return;  }  final IExpressionDescription assigned=cd.getFacet(VALUE);  if (assigned != null) {    Assert.typesAreCompatibleForAssignment(cd,Cast.toGaml(expr),expr.getType(),assigned);  }  if (((IVarExpression)expr).getVar().isNotModifiable()) {    cd.error("The variable " + expr.serialize(false) + " is a constant or a function and cannot be assigned a value.",IKeyword.NAME);  }}  }
class C{  private void log(IStatus status){  ResourcesPlugin.log(status);}  }
class C{  BluetoothA2dp(Context context,ServiceListener l){  mContext=context;  mServiceListener=l;  mAdapter=BluetoothAdapter.getDefaultAdapter();  IBluetoothManager mgr=mAdapter.getBluetoothManager();  if (mgr != null) {    try {      mgr.registerStateChangeCallback(mBluetoothStateChangeCallback);    } catch (    RemoteException e) {      Log.e(TAG,"",e);    }  }  if (!context.bindService(new Intent(IBluetoothA2dp.class.getName()),mConnection,0)) {    Log.e(TAG,"Could not bind to Bluetooth A2DP Service");  }}  }
class C{  public void removeContentProposalListener(IContentProposalListener2 listener){  proposalListeners2.remove(listener);}  }
class C{  public static StringBuilder leftShift(CharSequence self,Object value){  return new StringBuilder(self).append(value);}  }
class C{  protected void checkConfigurationMatchesResource(String configuration,Resource resource) throws Exception {  String pathToResource="//Engine/DefaultContext/Resource[@name='" + resource.getName() + "']";  String pathToResourceParams="//Engine/DefaultContext/ResourceParams[@name='" + resource.getName() + "']";  XMLAssert.assertXpathEvaluatesTo("Container",pathToResource + "/@auth",configuration);  if (resource.getClassName() != null) {    XMLAssert.assertXpathEvaluatesTo(resource.getClassName(),pathToResource + "/@type",configuration);  } else {    XMLAssert.assertXpathEvaluatesTo(resource.getType(),pathToResource + "/@type",configuration);  }  for (  String propertyName : resource.getParameterNames()) {    String propertyNameInTomcatXML=propertyName;    if ("user".equals(propertyName)) {      propertyNameInTomcatXML="username";    }    XMLAssert.assertXpathEvaluatesTo(resource.getParameter(propertyName),pathToResourceParams + "/parameter[name='" + propertyNameInTomcatXML+ "']/value",configuration);  }}  }
class C{  private void changeSpillState(TraceInterval interval,int spillPos){  if (TraceLinearScanPhase.Options.LIROptTraceRAEliminateSpillMoves.getValue()) {switch (interval.spillState()) {case NoSpillStore:      final int minSpillPos=interval.spillDefinitionPos();    final int maxSpillPost=spillPos;  final int optimalSpillPos=findOptimalSpillPos(minSpillPos,maxSpillPost);assert !allocator.isBlockEnd(optimalSpillPos);assert (optimalSpillPos & 1) == 0 : "Spill pos must be even";interval.setSpillDefinitionPos(optimalSpillPos);interval.setSpillState(SpillState.SpillStore);break;case SpillStore:case StartInMemory:case NoOptimization:case NoDefinitionFound:break;default :throw new BailoutException("other states not allowed at this time");}} else {interval.setSpillState(SpillState.NoOptimization);}}  }
class C{  public static void v(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_VERBOSE) {    return;  }  Log.v(tag,msg,throwable);}  }
class C{  public Socks5ClientForInitiator(StreamHost streamHost,String digest,Connection connection,String sessionID,String target){  super(streamHost,digest);  this.connection=connection;  this.sessionID=sessionID;  this.target=target;}  }
class C{  private boolean isMemberMXBeanFound(final Collection<ObjectName> objectNames){  return !(objectNames == null || objectNames.isEmpty());}  }
class C{  public OverScroller(Context context){  this(context,null);}  }
class C{  public SubscriptionStateException(){  super();}  }
class C{  protected static String makeOptionStr(AbstractFileLoader loader){  StringBuffer result;  Option option;  result=new StringBuffer("\nUsage:\n");  result.append("\t" + loader.getClass().getName().replaceAll(".*\\.",""));  if (loader instanceof OptionHandler) {    result.append(" [options]");  }  result.append(" <");  String[] ext=loader.getFileExtensions();  for (int i=0; i < ext.length; i++) {    if (i > 0) {      result.append(" | ");    }    result.append("file" + ext[i]);  }  result.append(">\n");  if (loader instanceof OptionHandler) {    result.append("\nOptions:\n\n");    Enumeration<Option> enm=((OptionHandler)loader).listOptions();    while (enm.hasMoreElements()) {      option=enm.nextElement();      result.append(option.synopsis() + "\n");      result.append(option.description() + "\n");    }  }  return result.toString();}  }
class C{  public int addLabel(FacetLabel label,int hash,int cid){  int bucketIndex=indexFor(hash,this.capacity);  for (Entry e=this.entries[bucketIndex]; e != null; e=e.next) {    if (e.hash == hash && CategoryPathUtils.equalsToSerialized(label,labelRepository,e.offset)) {      return e.cid;    }  }  int offset=labelRepository.length();  CategoryPathUtils.serialize(label,labelRepository);  addEntry(offset,cid,hash,bucketIndex);  return cid;}  }
class C{  public WheelHorizontalView(Context context){  this(context,null);}  }
class C{  public Builder removeEmail(Email email){  this.emails.remove(email);  return this;}  }
class C{  void add(Permission p){  permissions.add(p);}  }
class C{  public Object opt(int index){  return (index < 0 || index >= this.length()) ? null : this.myArrayList.get(index);}  }
class C{  public URL path(){  return path;}  }
class C{  public FloatMatrix put(Range rs,Range cs,FloatMatrix x){  rs.init(0,rows);  cs.init(0,columns);  for (; rs.hasMore(); rs.next()) {    cs.init(0,columns);    for (; cs.hasMore(); cs.next()) {      put(rs.value(),cs.value(),x.get(rs.index(),cs.index()));    }  }  return this;}  }
class C{  public SqlQuery(String type,String sql){  setType(type);  setSql(sql);}  }
class C{  public final void info(final String message){  if (isInfoEnabled()) {    output(Priority.INFO,message,null);  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col;  float progress=0;  double maxPatchValue=0;  int x, y;  boolean blnFoundNeighbour;  boolean blnIncludeDiagNeighbour=false;  boolean blnTreatZerosAsBackground=false;  int i;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      blnIncludeDiagNeighbour=Boolean.parseBoolean(args[i]);      if (!blnIncludeDiagNeighbour) {        dX=new int[]{0,1,0,-1};        dY=new int[]{-1,0,1,0};      }    } else     if (i == 3) {      blnTreatZerosAsBackground=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    numScanCells=dY.length;    image=new WhiteboxRaster(inputHeader,"r");    int rows=image.getNumberRows();    int cols=image.getNumberColumns();    noData=image.getNoDataValue();    double initialValue=-1;    output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,initialValue);    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    output.setPreferredPalette("qual.pal");    if (blnTreatZerosAsBackground) {      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          if (image.getValue(row,col) == 0) {            output.setValue(row,col,0);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress((int)progress);      }      if (output.getValue(0,0) == -1) {        output.setValue(0,0,1);      }    } else {      output.setValue(0,0,0);    }    double patchValue=0;    double neighbourPatchValue=0;    double newPatchValue=0;    double imageValue=0;    int loopNum=1;    updateProgress("Loop " + loopNum + ":",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        imageValue=image.getValue(row,col);        if (imageValue != noData) {          patchValue=output.getValue(row,col);          if (patchValue == initialValue) {            blnFoundNeighbour=false;            for (i=0; i < numScanCells; i++) {              x=col + dX[i];              y=row + dY[i];              neighbourPatchValue=output.getValue(y,x);              if (neighbourPatchValue != initialValue && image.getValue(y,x) == imageValue) {                output.setValue(row,col,neighbourPatchValue);                newPatchValue=neighbourPatchValue;                blnFoundNeighbour=true;                break;              }            }            if (!blnFoundNeighbour) {              maxPatchValue++;              newPatchValue=maxPatchValue;              output.setValue(row,col,newPatchValue);            }            depth=0;            ScanConnectedCells(row,col,imageValue,initialValue,newPatchValue);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    boolean somethingDone;    double[] reclass=new double[(int)maxPatchValue + 1];    do {      loopNum++;      updateProgress("Loop " + loopNum + ":",0);      somethingDone=false;      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          imageValue=image.getValue(row,col);          if (imageValue != noData) {            patchValue=output.getValue(row,col);            for (i=0; i < numScanCells; i++) {              x=col + dX[i];              y=row + dY[i];              neighbourPatchValue=output.getValue(y,x);              if (neighbourPatchValue != patchValue && image.getValue(y,x) == imageValue) {                somethingDone=true;                if (patchValue < neighbourPatchValue) {                  reclass[(int)neighbourPatchValue]=-1;                  output.setValue(y,x,patchValue);                  ScanConnectedCells(y,x,imageValue,neighbourPatchValue,patchValue);                } else {                  reclass[(int)patchValue]=-1;                  output.setValue(row,col,neighbourPatchValue);                  ScanConnectedCells(row,col,imageValue,patchValue,neighbourPatchValue);                  patchValue=neighbourPatchValue;                }              }            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress((int)progress);      }    } while (somethingDone);    i=0;    for (int a=0; a < maxPatchValue + 1; a++) {      if (reclass[a] != -1) {        reclass[a]=i;        i++;      }    }    loopNum++;    updateProgress("Loop " + loopNum + ":",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        patchValue=output.getValue(row,col);        if (patchValue != noData) {          output.setValue(row,col,reclass[(int)patchValue]);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    image.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @ObjectiveCName("changeImageAutoDownloadEnabled:") public void changeImageAutoDownloadEnabled(boolean val){  modules.getSettingsModule().setImageAutoDownloadEnabled(val);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:21.725 -0500",hash_original_method="82AA707C3D594DFF9A299AE775B6B0C9",hash_generated_method="98E6B087723D101A0E68731DFDBCE4D0") public Chunk handleChunk(Chunk request){  if (false)   Log.v("ddm-exit","Handling " + name(request.type) + " chunk");  ByteBuffer in=wrapChunk(request);  int statusCode=in.getInt();  Runtime.getRuntime().halt(statusCode);  return null;}  }
class C{  public static void NeedsLabel(AST stmt){  if (stmt.lbl.equals("")) {    String lbl=PcalParams.LabelRoot + nextLabelNum;    nextLabelNum=nextLabelNum + 1;    while (allLabels.containsKey(lbl)) {      lbl=PcalParams.LabelRoot + nextLabelNum;      nextLabelNum=nextLabelNum + 1;    }    ;    stmt.lbl=lbl;    addedLabels.addElement(lbl);    addedLabelsLocs.addElement(stmt.location());  }  return;}  }
class C{  private void validateXmlFieldPresent(String message,String xmlTagName){  for (  String xmlTag : Arrays.asList(String.format("<%s>",xmlTagName),String.format("</%s>",xmlTagName))) {    assertTrue(String.format("%s expected, but not found.",xmlTag),message.contains(xmlTag));  }}  }
class C{  public void insertBack(Blorp x){  size+=1;  Node p=sentinel;  while (p.next != null) {    p=p.next;  }  p.next=new Node(x,null);}  }
class C{  private void executeStatement(JdbcTemplate jdbcTemplate,JdbcStatement jdbcStatement,Map<String,Object> variables,int jdbcStatementIndex){  Throwable exception=null;  try {    String sql=evaluate(jdbcStatement.getSql(),variables,"jdbc statement sql");    validateSqlStatement(sql,jdbcStatementIndex);    if (JdbcStatementType.UPDATE.equals(jdbcStatement.getType())) {      int result=jdbcDao.update(jdbcTemplate,sql);      jdbcStatement.setStatus(JdbcStatementStatus.SUCCESS);      jdbcStatement.setResult(String.valueOf(result));    } else     if (JdbcStatementType.QUERY.equals(jdbcStatement.getType())) {      Integer maxResults=configurationHelper.getProperty(ConfigurationValue.JDBC_RESULT_MAX_ROWS,Integer.class);      JdbcStatementResultSet jdbcStatementResultSet=jdbcDao.query(jdbcTemplate,sql,maxResults);      jdbcStatement.setStatus(JdbcStatementStatus.SUCCESS);      jdbcStatement.setResultSet(jdbcStatementResultSet);    } else {      throw new IllegalStateException("Unsupported JDBC statement type '" + jdbcStatement.getType() + "'");    }  } catch (  CannotGetJdbcConnectionException cannotGetJdbcConnectionException) {    Throwable causeThrowable=cannotGetJdbcConnectionException.getCause();    throw new IllegalArgumentException(String.valueOf(causeThrowable).trim(),cannotGetJdbcConnectionException);  }catch (  DataAccessException dataAccessException) {    exception=dataAccessException.getCause();  }  if (exception != null) {    jdbcStatement.setStatus(JdbcStatementStatus.ERROR);    jdbcStatement.setErrorMessage(maskSensitiveInformation(exception,variables));  }}  }
class C{  public boolean compareTo(Vector4f rhs){  boolean ret=false;  if (this.points[0] == rhs.points[0] && this.points[1] == rhs.points[1] && this.points[2] == rhs.points[2] && this.points[3] == rhs.points[3])   ret=true;  return ret;}  }
class C{  @Override public String globalInfo(){  return "This Bayes Network learning algorithm uses the general purpose search method " + "of simulated annealing to find a well scoring network structure.\n\n" + "For more information see:\n\n"+ getTechnicalInformation().toString();}  }
class C{  public meta addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  void importFile(Object fileObject,int policy){  IContainer containerResource;  try {    containerResource=getDestinationContainerFor(fileObject);  } catch (  CoreException e) {    IStatus coreStatus=e.getStatus();    String newMessage=NLS.bind("DataTransferMessages.ImportOperation_coreImportError",fileObject,coreStatus.getMessage());    IStatus status=new Status(coreStatus.getSeverity(),coreStatus.getPlugin(),coreStatus.getCode(),newMessage,null);    errorTable.add(status);    return;  }  String fileObjectPath=provider.getFullPath(fileObject);  monitor.subTask(fileObjectPath);  IFile targetResource=containerResource.getFile(new Path(provider.getLabel(fileObject)));  monitor.worked(1);  if (rejectedFiles.contains(targetResource.getFullPath())) {    return;  }  IPath targetPath=targetResource.getLocation();  if (targetPath != null && (targetPath.toFile().equals(new File(fileObjectPath)))) {    errorTable.add(new Status(IStatus.ERROR,PlatformUI.PLUGIN_ID,0,NLS.bind("DataTransferMessages.ImportOperation_targetSameAsSourceError",fileObjectPath),null));    return;  }  InputStream contentStream=provider.getContents(fileObject);  if (contentStream == null) {    errorTable.add(new Status(IStatus.ERROR,PlatformUI.PLUGIN_ID,0,NLS.bind("DataTransferMessages.ImportOperation_openStreamError",fileObjectPath),null));    return;  }  try {    if (createVirtualFolder || createLinks || createLinkFilesOnly) {      if (targetResource.exists())       targetResource.delete(true,null);      targetResource.createLink(createRelativePath(new Path(provider.getFullPath(fileObject)),targetResource),0,null);    } else {      if (targetResource.exists()) {        if (targetResource.isLinked()) {          targetResource.delete(true,null);          targetResource.create(contentStream,false,null);        } else         targetResource.setContents(contentStream,IResource.KEEP_HISTORY,null);      } else       targetResource.create(contentStream,false,null);    }    setResourceAttributes(targetResource,fileObject);  } catch (  CoreException e) {    errorTable.add(e.getStatus());  } finally {    try {      contentStream.close();    } catch (    IOException e) {      errorTable.add(new Status(IStatus.ERROR,PlatformUI.PLUGIN_ID,0,NLS.bind("DataTransferMessages.ImportOperation_closeStreamError",fileObjectPath),e));    }  }}  }
class C{  public void testSkip() throws IOException {  byte[] data=new byte[1024 * 1024];  byte[] gzipped=GZIPOutputStreamTest.gzip(data);  GZIPInputStream in=new GZIPInputStream(new ByteArrayInputStream(gzipped));  long totalSkipped=0;  long count;  do {    count=in.skip(Long.MAX_VALUE);    totalSkipped+=count;  } while (count > 0);  assertEquals(data.length,totalSkipped);  in.close();}  }
class C{  public boolean isIconRowHeaderEnabled(){  for (int i=0; i < getComponentCount(); i++) {    if (getComponent(i) == iconArea) {      return true;    }  }  return false;}  }
class C{  public SerialParameters(){  portName="";  baudRate=9600;  flowControlIn=AbstractSerialConnection.FLOW_CONTROL_DISABLED;  flowControlOut=AbstractSerialConnection.FLOW_CONTROL_DISABLED;  databits=8;  stopbits=AbstractSerialConnection.ONE_STOP_BIT;  parity=AbstractSerialConnection.NO_PARITY;  encoding=Modbus.DEFAULT_SERIAL_ENCODING;  echo=false;}  }
class C{  public void initNodeTest(int whatToShow,String namespace,String name){  m_whatToShow=whatToShow;  m_namespace=namespace;  m_name=name;  calcScore();}  }
class C{  public static Occurred compare(VectorClock v1,VectorClock v2){  if (v1 == null || v2 == null)   throw new IllegalArgumentException("Can't compare null vector clocks!");  boolean v1Bigger=false;  boolean v2Bigger=false;  int p1=0;  int p2=0;  while (p1 < v1.versions.size() && p2 < v2.versions.size()) {    ClockEntry ver1=v1.versions.get(p1);    ClockEntry ver2=v2.versions.get(p2);    if (ver1.getNodeId() == ver2.getNodeId()) {      if (ver1.getVersion() > ver2.getVersion())       v1Bigger=true; else       if (ver2.getVersion() > ver1.getVersion())       v2Bigger=true;      p1++;      p2++;    } else     if (ver1.getNodeId() > ver2.getNodeId()) {      v2Bigger=true;      p2++;    } else {      v1Bigger=true;      p1++;    }  }  if (p1 < v1.versions.size())   v1Bigger=true; else   if (p2 < v2.versions.size())   v2Bigger=true;  if (!v1Bigger && !v2Bigger)   return Occurred.BEFORE; else   if (v1Bigger && !v2Bigger)   return Occurred.AFTER; else   if (!v1Bigger && v2Bigger)   return Occurred.BEFORE; else   return Occurred.CONCURRENTLY;}  }
class C{  public void doWindowClose(){  doExit();}  }
class C{  private void cubr(TreeModel tree,NodeRef node,double rate){  int nodeNumber=node.getNumber();  if (!tree.isRoot(node)) {    if (isVariableSelected(tree,node)) {      if (ratesAreMultipliers) {        rate*=getVariable(tree,node);      } else {        rate=getVariable(tree,node);      }    }  }  unscaledBranchRates[nodeNumber]=rate;  int childCount=tree.getChildCount(node);  for (int i=0; i < childCount; i++) {    cubr(tree,tree.getChild(node,i),rate);  }}  }
class C{  protected void process(String tenantId,List<S> items,int retryCount) throws Exception {  ProcessingUnit<S,T> pu=new ProcessingUnit<S,T>();  pu.setProcessor(getProcessor());  pu.setRetrySubscriber(retrySubscriber);  pu.setRetryCount(retryCount);  pu.setResultHandler(null);  pu.setRetryHandler(null);  pu.handle(tenantId,items);}  }
class C{  public void onHealed(final int amount){}  }
class C{  public void registerShareKey(String shareKey){  connectionDirectory.registerShareKey(shareKey);}  }
class C{  public boolean processCC() throws IllegalArgumentException {  setEncoded(true);  return m_ok;}  }
class C{  private boolean FayyadAndIranisMDL(double[] priorCounts,double[][] bestCounts,double numInstances,int numCutPoints){  double priorEntropy, entropy, gain;  double entropyLeft, entropyRight, delta;  int numClassesTotal, numClassesRight, numClassesLeft;  priorEntropy=ContingencyTables.entropy(priorCounts);  entropy=ContingencyTables.entropyConditionedOnRows(bestCounts);  gain=priorEntropy - entropy;  numClassesTotal=0;  for (  double priorCount : priorCounts) {    if (priorCount > 0) {      numClassesTotal++;    }  }  numClassesLeft=0;  for (int i=0; i < bestCounts[0].length; i++) {    if (bestCounts[0][i] > 0) {      numClassesLeft++;    }  }  numClassesRight=0;  for (int i=0; i < bestCounts[1].length; i++) {    if (bestCounts[1][i] > 0) {      numClassesRight++;    }  }  entropyLeft=ContingencyTables.entropy(bestCounts[0]);  entropyRight=ContingencyTables.entropy(bestCounts[1]);  delta=Utils.log2(Math.pow(3,numClassesTotal) - 2) - ((numClassesTotal * priorEntropy) - (numClassesRight * entropyRight) - (numClassesLeft * entropyLeft));  return (gain > (Utils.log2(numCutPoints) + delta) / numInstances);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodelistreturnlastitem.class,args);}  }
class C{  public ComputeTaskTimeoutException(Throwable cause){  this(cause.getMessage(),cause);}  }
class C{  public static boolean initDebug(){  return StaticHelper.initOpenCV(false);}  }
class C{  public final static long horizontalDHTDistance(final byte[] from,final byte[] to){  final long toPos=horizontalDHTPosition(to);  final long fromPos=horizontalDHTPosition(from);  return horizontalDHTDistance(fromPos,toPos);}  }
class C{  protected FloatType(SqlType sqlType,Class<?>[] classes){  super(sqlType,classes);}  }
class C{  public Picker count(int max){  mSelectionSpec.setMinSelectable(0);  mSelectionSpec.setMaxSelectable(max);  return this;}  }
class C{  boolean isRunning(){  return executorRef.get() != null;}  }
class C{  public void updateDefaultZoomDensity(float density){  assert density > 0;  if (Math.abs(density - mDefaultScale) > MINIMUM_SCALE_INCREMENT) {    final float originalDefault=mDefaultScale;    mDisplayDensity=density;    setDefaultZoomScale(density);    float scaleChange=(originalDefault > 0.0) ? density / originalDefault : 1.0f;    setZoomScale(mActualScale * scaleChange,true);  }}  }
class C{  public BeanContextSupport(BeanContext peer,Locale lcle,boolean dTime,boolean visible){  super(peer);  locale=lcle != null ? lcle : Locale.getDefault();  designTime=dTime;  okToUseGui=visible;  initialize();}  }
class C{  private void checkAndSetFastPathStatus(){  boolean fastPathWasOn=isFastPath;  if ((roundingMode == RoundingMode.HALF_EVEN) && (isGroupingUsed()) && (groupingSize == 3)&& (multiplier == 1)&& (!decimalSeparatorAlwaysShown)&& (!useExponentialNotation)) {    isFastPath=((minimumIntegerDigits == 1) && (maximumIntegerDigits >= 10));    if (isFastPath) {      if (isCurrencyFormat) {        if ((minimumFractionDigits != 2) || (maximumFractionDigits != 2))         isFastPath=false;      } else       if ((minimumFractionDigits != 0) || (maximumFractionDigits != 3))       isFastPath=false;    }  } else   isFastPath=false;  if (isFastPath) {    if (fastPathData == null)     fastPathData=new FastPathData();    fastPathData.zeroDelta=symbols.getZeroDigit() - '0';    fastPathData.groupingChar=symbols.getGroupingSeparator();    fastPathData.fractionalMaxIntBound=(isCurrencyFormat) ? 99 : 999;    fastPathData.fractionalScaleFactor=(isCurrencyFormat) ? 100.0d : 1000.0d;    fastPathData.positiveAffixesRequired=(positivePrefix.length() != 0) || (positiveSuffix.length() != 0);    fastPathData.negativeAffixesRequired=(negativePrefix.length() != 0) || (negativeSuffix.length() != 0);    int maxNbIntegralDigits=10;    int maxNbGroups=3;    int containerSize=Math.max(positivePrefix.length(),negativePrefix.length()) + maxNbIntegralDigits + maxNbGroups+ 1+ maximumFractionDigits+ Math.max(positiveSuffix.length(),negativeSuffix.length());    fastPathData.fastPathContainer=new char[containerSize];    fastPathData.charsPositiveSuffix=positiveSuffix.toCharArray();    fastPathData.charsNegativeSuffix=negativeSuffix.toCharArray();    fastPathData.charsPositivePrefix=positivePrefix.toCharArray();    fastPathData.charsNegativePrefix=negativePrefix.toCharArray();    int longestPrefixLength=Math.max(positivePrefix.length(),negativePrefix.length());    int decimalPointIndex=maxNbIntegralDigits + maxNbGroups + longestPrefixLength;    fastPathData.integralLastIndex=decimalPointIndex - 1;    fastPathData.fractionalFirstIndex=decimalPointIndex + 1;    fastPathData.fastPathContainer[decimalPointIndex]=isCurrencyFormat ? symbols.getMonetaryDecimalSeparator() : symbols.getDecimalSeparator();  } else   if (fastPathWasOn) {    fastPathData.fastPathContainer=null;    fastPathData.charsPositiveSuffix=null;    fastPathData.charsNegativeSuffix=null;    fastPathData.charsPositivePrefix=null;    fastPathData.charsNegativePrefix=null;  }  fastPathCheckNeeded=false;}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:17.682 -0500",hash_original_method="2B7BAEA20D94561E69BFE5897EA1BEB9",hash_generated_method="316B677311269FE7A70880051EF64718") @Override public void send(HandshakeIODataStream out){  out.writeUint16(bytes1.length);  out.write(bytes1);  out.writeUint16(bytes2.length);  out.write(bytes2);  if (bytes3 != null) {    out.writeUint16(bytes3.length);    out.write(bytes3);  }  if (hash != null) {    out.writeUint16(hash.length);    out.write(hash);  }}  }
class C{  @Inject public AggregatorParsers(Set<Aggregator.Parser> aggParsers,Set<PipelineAggregator.Parser> pipelineAggregatorParsers){  MapBuilder<String,Aggregator.Parser> aggParsersBuilder=MapBuilder.newMapBuilder();  for (  Aggregator.Parser parser : aggParsers) {    aggParsersBuilder.put(parser.type(),parser);  }  this.aggParsers=aggParsersBuilder.immutableMap();  MapBuilder<String,PipelineAggregator.Parser> pipelineAggregatorParsersBuilder=MapBuilder.newMapBuilder();  for (  PipelineAggregator.Parser parser : pipelineAggregatorParsers) {    pipelineAggregatorParsersBuilder.put(parser.type(),parser);  }  this.pipelineAggregatorParsers=pipelineAggregatorParsersBuilder.immutableMap();}  }
class C{  int fp1(int level){  Object x=null;  if (level > 0)   x=new Object();  if (level > 4)   return x.hashCode();  return 0;}  }
class C{  protected AttributeImpl(){  super();}  }
class C{  public Object stringToValue(String text) throws ParseException {  Object value=stringToValue(text,getFormat());  if (value != null && getValueClass() != null && !getValueClass().isInstance(value)) {    value=super.stringToValue(value.toString());  }  try {    if (!isValidValue(value,true)) {      throw new ParseException("Value not within min/max range",0);    }  } catch (  ClassCastException cce) {    throw new ParseException("Class cast exception comparing values: " + cce,0);  }  return value;}  }
class C{  public final void pushPair(int v1,int v2){  if (null == m_map) {    m_map=new int[m_blocksize];    m_mapSize=m_blocksize;  } else {    if ((m_firstFree + 2) >= m_mapSize) {      m_mapSize+=m_blocksize;      int newMap[]=new int[m_mapSize];      System.arraycopy(m_map,0,newMap,0,m_firstFree);      m_map=newMap;    }  }  m_map[m_firstFree]=v1;  m_map[m_firstFree + 1]=v2;  m_firstFree+=2;}  }
class C{  public static boolean isCurator(Project aProject,RepositoryService aProjectRepository,User aUser){  boolean curator=false;  try {    List<ProjectPermission> permissionLevels=aProjectRepository.listProjectPermisionLevel(aUser,aProject);    for (    ProjectPermission permissionLevel : permissionLevels) {      if (StringUtils.equalsIgnoreCase(permissionLevel.getLevel().getName(),PermissionLevel.CURATOR.getName())) {        curator=true;        break;      }    }  } catch (  NoResultException ex) {    LOG.info("No permision is given to this user " + ex);  }  return curator;}  }
class C{  public synchronized VisualTupleSet add(String group,TupleSet data,Predicate filter){  if (data instanceof Table) {    return addTable(group,(Table)data,filter);  } else   if (data instanceof Tree) {    return addTree(group,(Tree)data,filter);  } else   if (data instanceof Graph) {    return addGraph(group,(Graph)data,filter);  } else {    throw new IllegalArgumentException("Unsupported TupleSet type.");  }}  }
class C{  public boolean canAcceptVariables(){  return false;}  }
class C{  public FireworkEffectBuilder withColor(Color color) throws IllegalArgumentException {  Validate.notNull(color,"Color can't be null");  this.colors.add(color);  return this;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(stack.getUIMgrSafe().getVideoFrame().isFileRecording());}  }
class C{  public final Vec2D normalize(){  float mag=x * x + y * y;  if (mag > 0) {    mag=1f / (float)Math.sqrt(mag);    x*=mag;    y*=mag;  }  return this;}  }
class C{  public void emitNext(){  out.print(line[pos++]);}  }
class C{  @Override public synchronized void writeCustom(final int section,final Object str){switch (section) {case FLUSH:    flush();  break;default :super.writeCustom(section,str);}}  }
class C{  public static Sector fromDegreesAndClamp(double minLatitude,double maxLatitude,double minLongitude,double maxLongitude){  if (minLatitude < -90)   minLatitude=-90;  if (maxLatitude > 90)   maxLatitude=90;  if (minLongitude < -180)   minLongitude=-180;  if (maxLongitude > 180)   maxLongitude=180;  return new Sector(Angle.fromDegrees(minLatitude),Angle.fromDegrees(maxLatitude),Angle.fromDegrees(minLongitude),Angle.fromDegrees(maxLongitude));}  }
class C{  public IncreaseHandleDetailLevelAction(DrawingEditor editor){  super(editor);  ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.draw.Labels");  labels.configureAction(this,ID);  updateEnabledState();}  }
class C{  public IESEngine(BasicAgreement agree,DerivationFunction kdf,Mac mac,BufferedBlockCipher cipher){  this.agree=agree;  this.kdf=kdf;  this.mac=mac;  this.macBuf=new byte[mac.getMacSize()];  this.cipher=cipher;}  }
class C{  protected Set<AnnotationMirror> findBottoms(Map<AnnotationMirror,Set<AnnotationMirror>> supertypes){  Set<AnnotationMirror> possibleBottoms=AnnotationUtils.createAnnotationSet();  possibleBottoms.addAll(supertypes.keySet());  for (  Set<AnnotationMirror> supers : supertypes.values()) {    possibleBottoms.removeAll(supers);  }  return possibleBottoms;}  }
class C{  public static boolean isHighSurrogate(char ch){  return (MIN_HIGH_SURROGATE <= ch && MAX_HIGH_SURROGATE >= ch);}  }
class C{  public void testDivideBigDecimalScaleRoundingModeCEILING(){  String a="3736186567876876578956958765675671119238118911893939591735";  int aScale=100;  String b="74723342238476237823787879183470";  int bScale=15;  int newScale=45;  RoundingMode rm=RoundingMode.CEILING;  String c="1E-45";  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,newScale,rm);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",newScale,result.scale());}  }
class C{  @Modifying @Transactional public void deleteNote(@PathVariable Long chequeID,@PathVariable Long noteID){  noteRepository.delete(noteID);}  }
class C{  public boolean decodeContentLength(int startIndex){  return decodeIntegerValue(startIndex);}  }
class C{  private SimplePanel createTitleWidget(){  SimplePanel titleWrapper=new SimplePanel();  Label titleLabel=new Label();  titleWrapper.add(titleLabel);  titleWrapper.setStyleName(resources.notificationCss().notificationPopupTitleWrapper());  titleWrapper.ensureDebugId(TITLE_DBG_ID + notification.getId());  return titleWrapper;}  }
class C{  public char dataSave(boolean manualCmd){  if (!m_open) {    log.warning("Error - Open=" + m_open);    return SAVE_ERROR;  }  if (m_rowChanged == -1) {    log.config("NoNeed - Changed=" + m_changed + ", Row="+ m_rowChanged);    if (!manualCmd)     return SAVE_OK;  }  if (m_rowData == null) {    m_rowChanged=-1;    log.fine("No Changes");    return SAVE_ERROR;  }  if (m_readOnly) {    log.warning("IsReadOnly - ignored");    dataIgnore();    return SAVE_ACCESS;  }  if (m_rowChanged == -1) {    if (m_newRow != -1)     m_rowChanged=m_newRow; else {      fireDataStatusEEvent("SaveErrorNoChange","",true);      return SAVE_ERROR;    }  }  int[] co=getClientOrg(m_rowChanged);  int AD_Client_ID=co[0];  int AD_Org_ID=co[1];  if (!MRole.getDefault(m_ctx,false).canUpdate(AD_Client_ID,AD_Org_ID,m_AD_Table_ID,0,true)) {    fireDataStatusEEvent(CLogger.retrieveError());    dataIgnore();    return SAVE_ACCESS;  }  log.info("Row=" + m_rowChanged);  try {    if (!manualCmd)     m_vetoableChangeSupport.fireVetoableChange(PROPERTY,-1,m_rowChanged);  } catch (  PropertyVetoException pve) {    log.warning(pve.getMessage());    return SAVE_ABORT;  }  Object[] rowData=getDataAtRow(m_rowChanged);  boolean specialZeroUpdate=false;  if (!m_inserting && manualCmd && (Env.getAD_User_ID(m_ctx) == 0 || Env.getAD_User_ID(m_ctx) == 100)&& getKeyID(m_rowChanged) == 0) {    String tablename=getTableName();    if (tablename.equals("AD_Org") || tablename.equals("AD_ReportView") || tablename.equals("AD_Role")|| tablename.equals("AD_System")|| tablename.equals("AD_User")|| tablename.equals("C_DocType")|| tablename.equals("GL_Category")|| tablename.equals("M_AttributeSet")|| tablename.equals("M_AttributeSetInstance")) {      specialZeroUpdate=true;    }  }  String missingColumns=getMandatory(rowData);  if (missingColumns.length() != 0) {    fireDataStatusEEvent("FillMandatory",missingColumns + "\n",true);    return SAVE_MANDATORY;  }  int Record_ID=0;  if (!m_inserting)   Record_ID=getKeyID(m_rowChanged);  try {    if (!m_tableName.endsWith("_Trl") && !specialZeroUpdate)     return dataSavePO(Record_ID);  } catch (  Throwable e) {    if (e instanceof ClassNotFoundException)     log.warning(m_tableName + " - " + e.getLocalizedMessage()); else {      log.log(Level.SEVERE,"Persistency Issue - " + m_tableName + ": "+ e.getLocalizedMessage(),e);      return SAVE_ERROR;    }  }  log.info("NonPO");  boolean error=false;  lobReset();  String is=null;  final String ERROR="ERROR: ";  final String INFO="Info: ";  StringBuffer select=new StringBuffer("SELECT ");  for (int i=0, addedColumns=0; i < m_fields.size(); i++) {    GridField field=(GridField)m_fields.get(i);    if (m_inserting && field.isVirtualColumn())     continue;    if (addedColumns++ > 0)     select.append(",");    select.append(field.getColumnSQL(true));  }  select.append(" FROM ").append(m_tableName);  StringBuffer singleRowWHERE=new StringBuffer();  StringBuffer multiRowWHERE=new StringBuffer();  if (m_inserting)   select.append(" WHERE 1=2"); else   select.append(" WHERE ").append(getWhereClause(rowData));  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(select.toString(),ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE,null);    rs=pstmt.executeQuery();    if (!(m_inserting || rs.next())) {      fireDataStatusEEvent("SaveErrorRowNotFound","",true);      dataRefresh(m_rowChanged);      return SAVE_ERROR;    }    Object[] rowDataDB=null;    boolean manualUpdate=ResultSet.CONCUR_READ_ONLY == rs.getConcurrency();    if (!manualUpdate && Ini.isPropertyBool(Ini.P_LOGMIGRATIONSCRIPT))     manualUpdate=true;    if (manualUpdate)     createUpdateSqlReset();    if (m_inserting) {      if (manualUpdate)       log.fine("Prepare inserting ... manual"); else {        log.fine("Prepare inserting ... RowSet");        rs.moveToInsertRow();      }    } else {      log.fine("Prepare updating ... manual=" + manualUpdate);      rowDataDB=readData(rs);    }    Timestamp now=new Timestamp(System.currentTimeMillis());    int user=Env.getContextAsInt(m_ctx,"#AD_User_ID");    int size=m_fields.size();    int colRs=1;    for (int col=0; col < size; col++) {      GridField field=(GridField)m_fields.get(col);      if (field.isVirtualColumn()) {        if (!m_inserting)         colRs++;        continue;      }      String columnName=field.getColumnName();      if (field.getDisplayType() == DisplayType.RowID || field.isVirtualColumn())       ; else       if (field.isKey() && m_inserting) {        if (columnName.endsWith("_ID") || columnName.toUpperCase().endsWith("_ID")) {          int insertID=DB.getNextID(m_ctx,m_tableName,null);          if (manualUpdate)           createUpdateSql(columnName,String.valueOf(insertID)); else           rs.updateInt(colRs,insertID);          singleRowWHERE.append(columnName).append("=").append(insertID);          is=INFO + columnName + " -> "+ insertID+ " (Key)";        } else {          String str=rowData[col].toString();          if (manualUpdate)           createUpdateSql(columnName,DB.TO_STRING(str)); else           rs.updateString(colRs,str);          singleRowWHERE=new StringBuffer();          singleRowWHERE.append(columnName).append("=").append(DB.TO_STRING(str));          is=INFO + columnName + " -> "+ str+ " (StringKey)";        }        log.fine(is);      } else       if (columnName.equals("DocumentNo")) {        boolean newDocNo=false;        String docNo=(String)rowData[col];        if (docNo == null || docNo.length() == 0)         newDocNo=true; else         if (docNo.startsWith("<") && docNo.endsWith(">"))         newDocNo=true;        if (newDocNo || m_inserting) {          String insertDoc=null;          if (m_inserting)           insertDoc=DB.getDocumentNo(m_ctx,m_WindowNo,m_tableName,true,null);          log.fine("DocumentNo entered=" + docNo + ", DocTypeInsert="+ insertDoc+ ", newDocNo="+ newDocNo);          if (insertDoc == null || insertDoc.length() == 0) {            if (!newDocNo && docNo != null && docNo.length() > 0)             insertDoc=docNo; else             insertDoc=DB.getDocumentNo(m_ctx,m_WindowNo,m_tableName,false,null);          }          if (insertDoc == null || insertDoc.length() == 0) {            if (docNo != null && docNo.length() != 0)             insertDoc=(String)rowData[col]; else {              error=true;              is=ERROR + field.getColumnName() + "= "+ rowData[col]+ " NO DocumentNo";              log.fine(is);              break;            }          }          if (manualUpdate)           createUpdateSql(columnName,DB.TO_STRING(insertDoc)); else           rs.updateString(colRs,insertDoc);          is=INFO + columnName + " -> "+ insertDoc+ " (DocNo)";          log.fine(is);        }      } else       if (columnName.equals("Value") && m_inserting) {        String value=(String)rowData[col];        if (value == null || value.length() == 0) {          value=DB.getDocumentNo(m_ctx,m_WindowNo,m_tableName,false,null);          if (value == null || value.length() == 0) {            error=true;            is=ERROR + field.getColumnName() + "= "+ rowData[col]+ " No Value";            log.fine(is);            break;          }        }        if (manualUpdate)         createUpdateSql(columnName,DB.TO_STRING(value)); else         rs.updateString(colRs,value);        is=INFO + columnName + " -> "+ value+ " (Value)";        log.fine(is);      } else       if (columnName.equals("Updated")) {        if (m_compareDB && !m_inserting && !m_rowData[col].equals(rowDataDB[col])) {          error=true;          is=ERROR + field.getColumnName() + "= "+ m_rowData[col]+ " != DB: "+ rowDataDB[col];          log.fine(is);          break;        }        if (manualUpdate)         createUpdateSql(columnName,DB.TO_DATE(now,false)); else         rs.updateTimestamp(colRs,now);        is=INFO + "Updated/By -> " + now+ " - "+ user;        log.fine(is);      } else       if (columnName.equals("UpdatedBy")) {        if (manualUpdate)         createUpdateSql(columnName,String.valueOf(user)); else         rs.updateInt(colRs,user);      } else       if (m_inserting && columnName.equals("Created")) {        if (manualUpdate)         createUpdateSql(columnName,DB.TO_DATE(now,false)); else         rs.updateTimestamp(colRs,now);      } else       if (m_inserting && columnName.equals("CreatedBy")) {        if (manualUpdate)         createUpdateSql(columnName,String.valueOf(user)); else         rs.updateInt(colRs,user);      } else       if (m_rowData[col] == null && rowData[col] == null) {        if (m_inserting) {          if (manualUpdate)           createUpdateSql(columnName,"NULL"); else           rs.updateNull(colRs);          is=INFO + columnName + "= NULL";          log.fine(is);        }      } else       if (m_inserting || (m_rowData[col] == null && rowData[col] != null) || (m_rowData[col] != null && rowData[col] == null)|| !m_rowData[col].equals(rowData[col])) {        if (m_inserting || !m_compareDB || (m_rowData[col] == null && rowDataDB[col] == null)|| (m_rowData[col] != null && m_rowData[col].equals(rowDataDB[col]))) {          if (CLogMgt.isLevelFinest())           log.fine(columnName + "=" + rowData[col]+ " "+ (rowData[col] == null ? "" : rowData[col].getClass().getName()));          boolean encrypted=field.isEncryptedColumn();          String type="String";          if (rowData[col] == null) {            if (manualUpdate)             createUpdateSql(columnName,"NULL"); else             rs.updateNull(colRs);          } else           if (DisplayType.isID(field.getDisplayType()) || field.getDisplayType() == DisplayType.Integer) {            try {              Object dd=rowData[col];              Integer iii=null;              if (dd instanceof Integer)               iii=(Integer)dd; else               iii=new Integer(dd.toString());              if (encrypted)               iii=(Integer)encrypt(iii);              if (manualUpdate)               createUpdateSql(columnName,String.valueOf(iii)); else               rs.updateInt(colRs,iii.intValue());            } catch (            Exception e) {              if (manualUpdate)               createUpdateSql(columnName,DB.TO_STRING(rowData[col].toString())); else               rs.updateString(colRs,rowData[col].toString());            }            type="Int";          } else           if (DisplayType.isNumeric(field.getDisplayType())) {            BigDecimal bd=(BigDecimal)rowData[col];            if (encrypted)             bd=(BigDecimal)encrypt(bd);            if (manualUpdate)             createUpdateSql(columnName,bd.toString()); else             rs.updateBigDecimal(colRs,bd);            type="Number";          } else           if (DisplayType.isDate(field.getDisplayType())) {            Timestamp ts=(Timestamp)rowData[col];            if (encrypted)             ts=(Timestamp)encrypt(ts);            if (manualUpdate)             createUpdateSql(columnName,DB.TO_DATE(ts,false)); else             rs.updateTimestamp(colRs,ts);            type="Date";          } else           if (field.getDisplayType() == DisplayType.TextLong) {            PO_LOB lob=new PO_LOB(getTableName(),columnName,null,field.getDisplayType(),rowData[col]);            lobAdd(lob);            type="CLOB";          } else           if (field.getDisplayType() == DisplayType.YesNo) {            String yn=null;            if (rowData[col] instanceof Boolean) {              Boolean bb=(Boolean)rowData[col];              yn=bb.booleanValue() ? "Y" : "N";            } else             yn="Y".equals(rowData[col]) ? "Y" : "N";            if (encrypted)             yn=(String)yn;            if (manualUpdate)             createUpdateSql(columnName,DB.TO_STRING(yn)); else             rs.updateString(colRs,yn);          } else {            String str=rowData[col].toString();            if (encrypted)             str=(String)encrypt(str);            if (manualUpdate)             createUpdateSql(columnName,DB.TO_STRING(str)); else             rs.updateString(colRs,str);          }          is=INFO + columnName + "= "+ m_rowData[col]+ " -> "+ rowData[col]+ " ("+ type+ ")";          if (encrypted)           is+=" encrypted";          log.fine(is);        } else {          error=true;          is=ERROR + field.getColumnName() + "= "+ m_rowData[col]+ " != DB: "+ rowDataDB[col]+ " -> "+ rowData[col];          log.fine(is);        }      }      if (field.isKey() && !m_inserting) {        if (rowData[col] == null)         throw new RuntimeException("Key is NULL - " + columnName);        if (columnName.endsWith("_ID"))         singleRowWHERE.append(columnName).append("=").append(rowData[col]); else {          singleRowWHERE=new StringBuffer();          singleRowWHERE.append(columnName).append("=").append(DB.TO_STRING(rowData[col].toString()));        }      }      if (field.isParentColumn()) {        if (rowData[col] == null)         throw new RuntimeException("MultiKey Parent is NULL - " + columnName);        if (multiRowWHERE.length() != 0)         multiRowWHERE.append(" AND ");        if (columnName.endsWith("_ID"))         multiRowWHERE.append(columnName).append("=").append(rowData[col]); else         multiRowWHERE.append(columnName).append("=").append(DB.TO_STRING(rowData[col].toString()));      }      colRs++;    }    if (error) {      if (manualUpdate)       createUpdateSqlReset(); else       rs.cancelRowUpdates();      fireDataStatusEEvent("SaveErrorDataChanged","",true);      dataRefresh(m_rowChanged);      return SAVE_ERROR;    }    String whereClause=singleRowWHERE.toString();    if (whereClause.length() == 0)     whereClause=multiRowWHERE.toString();    if (m_inserting) {      log.fine("Inserting ...");      if (manualUpdate) {        String sql=createUpdateSql(true,null);        int no=DB.executeUpdateEx(sql,null);        if (no != 1)         log.log(Level.SEVERE,"Insert #=" + no + " - "+ sql);      } else       rs.insertRow();    } else {      log.fine("Updating ... " + whereClause);      if (manualUpdate) {        String sql=createUpdateSql(false,whereClause);        int no=DB.executeUpdateEx(sql,null);        if (no != 1)         log.log(Level.SEVERE,"Update #=" + no + " - "+ sql);      } else       rs.updateRow();    }    log.fine("Committing ...");    DB.commit(true,null);    DB.close(rs,pstmt);    rs=null;    pstmt=null;    lobSave(whereClause);    log.fine("Reading ... " + whereClause);    StringBuffer refreshSQL=new StringBuffer(m_SQL_Select).append(" WHERE ").append(whereClause);    pstmt=DB.prepareStatement(refreshSQL.toString(),null);    rs=pstmt.executeQuery();    if (rs.next()) {      rowDataDB=readData(rs);      setDataAtRow(m_rowChanged,rowDataDB);      if (m_virtual) {        MSort sort=m_sort.get(m_rowChanged);        int oldId=sort.index;        int newId=getKeyID(m_rowChanged);        if (newId != oldId) {          sort.index=newId;          Object[] data=m_virtualBuffer.remove(oldId);          m_virtualBuffer.put(newId,data);        }      }      fireTableRowsUpdated(m_rowChanged,m_rowChanged);    } else     log.log(Level.SEVERE,"Inserted row not found");  } catch (  Exception e) {    String msg="SaveError";    if (DBException.isUniqueContraintError(e)) {      log.log(Level.SEVERE,"Key Not Unique",e);      msg="SaveErrorNotUnique";    } else     log.log(Level.SEVERE,select.toString(),e);    fireDataStatusEEvent(msg,e.getLocalizedMessage(),true);    return SAVE_ERROR;  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  m_rowData=null;  m_changed=false;  m_compareDB=true;  m_rowChanged=-1;  m_newRow=-1;  m_inserting=false;  fireDataStatusIEvent("Saved","");  log.info("fini");  return SAVE_OK;}  }
class C{  public void assertEquals(String message,int expected,int actual){  if (expected != actual) {    fail("Expected: " + expected + " actual: "+ actual+ " message: "+ message);  }}  }
class C{  public static String makeSafe(String s){  return (s == null) ? "" : s;}  }
class C{  public XTIFFDirectory createDirectory(SeekableStream stream,int directory) throws IOException {  return new GeoTIFFDirectory(stream,directory);}  }
class C{  public static byte[] decode(byte[] source,int off,int len,int options) throws java.io.IOException {  if (source == null) {    throw new NullPointerException("Cannot decode null source array.");  }  if (off < 0 || off + len > source.length) {    throw new IllegalArgumentException(String.format(Locale.ROOT,"Source array with length %d cannot have offset of %d and process %d bytes.",source.length,off,len));  }  if (len == 0) {    return new byte[0];  } else   if (len < 4) {    throw new IllegalArgumentException("Base64-encoded string must have at least four characters, but length specified was " + len);  }  byte[] DECODABET=getDecodabet(options);  int len34=len * 3 / 4;  byte[] outBuff=new byte[len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiDecode=0;  for (i=off; i < off + len; i++) {    sbiDecode=DECODABET[source[i] & 0xFF];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        b4[b4Posn++]=source[i];        if (b4Posn > 3) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,options);          b4Posn=0;          if (source[i] == EQUALS_SIGN) {            if (i + 1 < len + off) {              throw new java.io.IOException(String.format(Locale.ROOT,"Found equals sign at position %d of the base64 string, not at the end",i));            }            break;          }        } else {          if (source[i] == EQUALS_SIGN && len + off > i && source[i + 1] != EQUALS_SIGN) {            throw new java.io.IOException(String.format(Locale.ROOT,"Found equals sign at position %d of the base64 string, not at the end",i));          }        }      }    } else {      throw new java.io.IOException(String.format(Locale.ROOT,"Bad Base64 input character decimal %d in array position %d",((int)source[i]) & 0xFF,i));    }  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  @Override public void drawItem(Graphics2D g2,XYItemRendererState state,Rectangle2D dataArea,PlotRenderingInfo info,XYPlot plot,ValueAxis domainAxis,ValueAxis rangeAxis,XYDataset dataset,int series,int item,CrosshairState crosshairState,int pass){  if (!getItemVisible(series,item)) {    return;  }  if (isLinePass(pass)) {    if (getItemLineVisible(series,item)) {      if (this.drawSeriesLineAsPath) {        drawPrimaryLineAsPath(state,g2,plot,dataset,pass,series,item,domainAxis,rangeAxis,dataArea);      } else {        drawPrimaryLine(state,g2,plot,dataset,pass,series,item,domainAxis,rangeAxis,dataArea);      }    }  } else   if (isItemPass(pass)) {    EntityCollection entities=null;    if (info != null && info.getOwner() != null) {      entities=info.getOwner().getEntityCollection();    }    drawSecondaryPass(g2,plot,dataset,pass,series,item,domainAxis,dataArea,rangeAxis,crosshairState,entities);  }}  }
class C{  public void updateSelections(int position,boolean add){  if (add) {    selections.put(position,true);  } else {    selections.put(position,false);  }  notifyDataSetChanged();}  }
class C{  @Override public void handlePeriodicMaintenance(Operation maintenance){  ServiceUtils.logInfo(this,"Periodic maintenance triggered. %s",getSelfLink());  try {    maintenance.complete();    TaskUtils.sendSelfPatch(this,buildPatch(TaskState.TaskStage.STARTED,null));  } catch (  Throwable e) {    ServiceUtils.logSevere(this,"Maintenance trigger failed with the failure: %s",e.toString());  }}  }
class C{  public NetworkChannelFile(String inHostname,String name,String mode,String inCharset,boolean direct) throws java.io.IOException {  super(inCharset);  if (mode.indexOf("c") != -1 || mode.indexOf("w") != -1)   throw new java.io.IOException("Unsupported mode for remote random file:" + mode);  remoteFilename=name;  hostname=inHostname;  this.direct=direct;  bufSize=131072;  rb=direct ? java.nio.ByteBuffer.allocateDirect(bufSize) : java.nio.ByteBuffer.allocate(bufSize);  rb.clear().limit(0);  if (remoteFilename != null)   openConnection();}  }
class C{  public String toQuery(){  final StringBuilder query=new StringBuilder();  for (  final Map.Entry<String,String> param : npv.entrySet()) {    toAppendNVPTo(query,param.getKey(),param.getValue());  }  return query.toString();}  }
class C{  public PreparedStatement execute(String sql,ArrayList<Value> params,boolean reusePrepared){  if (conn == null) {    throw connectException;  }  for (int retry=0; ; retry++) {    try {synchronized (conn) {        PreparedStatement prep=preparedMap.remove(sql);        if (prep == null) {          prep=conn.getConnection().prepareStatement(sql);        }        if (trace.isDebugEnabled()) {          StatementBuilder buff=new StatementBuilder();          buff.append(getName()).append(":\n").append(sql);          if (params != null && params.size() > 0) {            buff.append(" {");            int i=1;            for (            Value v : params) {              buff.appendExceptFirst(", ");              buff.append(i++).append(": ").append(v.getSQL());            }            buff.append('}');          }          buff.append(';');          trace.debug(buff.toString());        }        if (params != null) {          for (int i=0, size=params.size(); i < size; i++) {            Value v=params.get(i);            v.set(prep,i + 1);          }        }        prep.execute();        if (reusePrepared) {          reusePreparedStatement(prep,sql);          return null;        }        return prep;      }    } catch (    SQLException e) {      if (retry >= MAX_RETRY) {        throw DbException.convert(e);      }      conn.close(true);      connect();    }  }}  }
class C{  public Complex plus(Complex c){  return add(this,c);}  }
class C{  private Direction fieldAnnotationDirection(ModifiersTree modifiers){  for (  AnnotationTree annotation : modifiers.getAnnotations()) {    if (!annotation.getArguments().isEmpty()) {      return Direction.VERTICAL;    }  }  return Direction.HORIZONTAL;}  }
class C{  public final void addCaretListener(CaretListener listener){  listenerList.add(CaretListener.class,listener);}  }
class C{  public AuthSvcClientIterator(EndPointLocator authSvcEndPointLocator){  super(authSvcEndPointLocator);  setClientRequestHelper(new ClientRequestHelper());}  }
class C{  public Writer write(Writer writer) throws JSONException {  return this.write(writer,0,0);}  }
class C{  private static String generateWebSocketKey(){  byte[] data=new byte[16];  Misc.nextBytes(data);  return Base64.encode(data);}  }
class C{  public MatrixObject toMatrixObject(){  return matrixObject;}  }
class C{  protected void err(String message){  errorCount++;  indent(indentLevel + 1);  log.print(message);  log.flush();  if (!nothrow) {    throw new RuntimeException(message);  }}  }
class C{  public Versioned<T> cloneVersioned(){  return new Versioned<T>(this.getValue(),this.version.clone());}  }
class C{  public static StaticBody fromStream(final InputStream inStream) throws BOSHException {  ByteArrayOutputStream byteOut=new ByteArrayOutputStream();  try {    byte[] buffer=new byte[BUFFER_SIZE];    int read;    do {      read=inStream.read(buffer);      if (read > 0) {        byteOut.write(buffer,0,read);      }    } while (read >= 0);  } catch (  IOException iox) {    throw (new BOSHException("Could not read body data",iox));  }  return fromString(byteOut.toString());}  }
class C{  public String readString() throws IOException {  ByteArrayOutputStream bs=new ByteArrayOutputStream();  while (true) {    int b=messageInput.read();    if (b < 0)     throw new IOException("EOF in the middle of a string");    if (b == 0)     break;    bs.write(b);  }  return bs.toString(encoding);}  }
class C{  private static void checkElement(@Nullable Object node){  if (node == null) {    throw new NoSuchElementException();  }}  }
class C{  public void add(char[] str,int idx){  SAXRecord rr=records.get(String.valueOf(str));  if (null == rr) {    rr=new SAXRecord(str,idx);    this.records.put(String.valueOf(str),rr);  } else {    rr.addIndex(idx);  }  this.realTSindex.put(idx,rr);}  }
class C{  private void loadMap(){  boolean found=false;  try {    String[] keys=prefs.keys();    for (int i=0; i < keys.length; i++) {      String string=keys[i];      if (string.startsWith("CONTROL_MAPPING")) {        String mapping=prefs.get(string,"");        AssignableControl command=new AssignableControl(mapping);        List<AssignableControl> commands=map.get(command.getButton());        if (commands == null) {          commands=new LinkedList<AssignableControl>();          map.put(command.getButton(),commands);        }        commands.add(0,command);        Logger.getLogger(ControlMap.class.getName()).debug("Load command:{0} " + command.getPrefString());        found=true;      }    }  } catch (  BackingStoreException ex) {    Logger.getLogger(ControlMap.class.getName()).error("{0}",ex);  }  if (!found) {    Logger.getLogger(ControlMap.class.getName()).debug("Load default button map");    createDefaultMapping();  }}  }
class C{  public static boolean keysEqual(Key key1,Key key2){  if (key1 == key2) {    return true;  }  if ((key1 == null && key2 != null) || (key1 != null && key2 == null)) {    return false;  }  if (key1.equals(key2)) {    return true;  }  if (Arrays.equals(key1.getEncoded(),key2.getEncoded())) {    return true;  }  if ((key1 instanceof RSAPrivateKey) && (key2 instanceof RSAPrivateKey)) {    if ((((RSAKey)key1).getModulus().equals(((RSAKey)key2).getModulus())) && (((RSAPrivateKey)key1).getPrivateExponent().equals(((RSAPrivateKey)key2).getPrivateExponent()))) {      return true;    }  }  return false;}  }
class C{  public static Matcher<BindingSet> notBinds(String name){  return new NotBindsMatcher(name);}  }
class C{  private SQFPrivatization(@NotNull E privateElement,@Nullable T privatizer){  this.privateElement=privateElement;  this.privatizer=privatizer;  declarationScope=privatizer == null ? SQFPsiUtil.getContainingScope(this.privateElement) : SQFPsiUtil.getContainingScope(privatizer.getPrivatizerElement());}  }
class C{  public void update(){}  }
class C{  public static String leftJustify(String source,int length){  if (source.length() >= length) {    return source;  }  return StringUtils.spaces(length - source.length()) + source;}  }
class C{  private void updateOffsetViewWidth(){  final int addressBytes=m_addressMode == AddressMode.BIT32 ? 8 : 16;  m_offsetViewWidth=PADDING_OFFSETVIEW + (m_charWidth * addressBytes);}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 194) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public ModbusSlaveException(int type){  super();  this.type=type;}  }
class C{  public AnimatorSet playTogether(List list){  AnimatorSet animatorSet=new AnimatorSet();  animatorSet.playTogether(list);  return animatorSet;}  }
class C{  private SoundCloudArtworkHelper(){}  }
class C{  public List(){  this(null,null);}  }
class C{  String readAmPmMarker(String source,int ofs){  int i=findEndText(source,ofs);  if (i == -1) {    i=source.length();  }  String fragment=source.substring(ofs,i).toLowerCase();  String markers[]=getDateFormatSymbols().getAmPmStrings();  for (  String marker : markers) {    if (fragment.startsWith(marker)) {      return source.substring(ofs,ofs + marker.length());    }  }  for (  String marker : markers) {    if (fragment.charAt(0) == marker.charAt(0)) {      return source.substring(ofs,ofs + 1);    }  }  return null;}  }
class C{  private void validateQuietZone(BitArray row,int startPattern) throws NotFoundException {  int quietCount=this.narrowLineWidth * 10;  quietCount=quietCount < startPattern ? quietCount : startPattern;  for (int i=startPattern - 1; quietCount > 0 && i >= 0; i--) {    if (row.get(i)) {      break;    }    quietCount--;  }  if (quietCount != 0) {    throw NotFoundException.getNotFoundInstance();  }}  }
class C{  public static String decryptString(CipherTextIvMac civ,SecretKeys secretKeys) throws UnsupportedEncodingException, GeneralSecurityException {  return decryptString(civ,secretKeys,"UTF-8");}  }
class C{  public Set<A> plus(Iterable<A> as){  Set<A> result=this;  for (  A a : as) {    result=result.plus(a);  }  return result;}  }
class C{  public static String toString(URL url,Charset encoding) throws IOException {  InputStream inputStream=url.openStream();  try {    return toString(inputStream,encoding);  }  finally {    inputStream.close();  }}  }
class C{  @Override protected void onRestart(){  super.onRestart();  Log.d(TAG,"onRestart() - the activity is about to be restarted()");}  }
class C{  protected void adjustCanopies(double[] densities){  if (m_numClustersRequested < 0) {    assignCanopiesToCanopyCenters();    m_trainingData=new Instances(m_canopies,0);    return;  }  if (m_canopies.numInstances() > m_numClustersRequested) {    int[] sortedIndexes=Utils.stableSort(densities);    Instances finalCanopies=new Instances(m_canopies,0);    int count=0;    for (int i=sortedIndexes.length - 1; count < m_numClustersRequested; i--) {      finalCanopies.add(m_canopies.instance(sortedIndexes[i]));      count++;    }    m_canopies=finalCanopies;    List<double[][]> tempCanopyCenters=new ArrayList<double[][]>();    List<double[]> tempT2Dists=new ArrayList<double[]>();    List<double[]> tempMissings=new ArrayList<double[]>();    count=0;    for (int i=sortedIndexes.length - 1; count < finalCanopies.numInstances(); i--) {      tempCanopyCenters.add(m_canopyCenters.get(sortedIndexes[i]));      tempT2Dists.add(m_canopyT2Density.get(sortedIndexes[i]));      tempMissings.add(m_canopyNumMissingForNumerics.get(sortedIndexes[i]));      count++;    }    m_canopyCenters=tempCanopyCenters;    m_canopyT2Density=tempT2Dists;    m_canopyNumMissingForNumerics=tempMissings;  } else   if (m_canopies.numInstances() < m_numClustersRequested && m_trainingData != null && m_trainingData.numInstances() > 0) {    Random r=new Random(getSeed());    for (int i=0; i < 10; i++) {      r.nextInt();    }    HashMap<DecisionTableHashKey,Integer> initC=new HashMap<DecisionTableHashKey,Integer>();    DecisionTableHashKey hk=null;    for (int i=0; i < m_canopies.numInstances(); i++) {      try {        hk=new DecisionTableHashKey(m_canopies.instance(i),m_canopies.numAttributes(),true);        initC.put(hk,null);      } catch (      Exception e) {        e.printStackTrace();      }    }    for (int j=m_trainingData.numInstances() - 1; j >= 0; j--) {      int instIndex=r.nextInt(j + 1);      try {        hk=new DecisionTableHashKey(m_trainingData.instance(instIndex),m_trainingData.numAttributes(),true);      } catch (      Exception e) {        e.printStackTrace();      }      if (!initC.containsKey(hk)) {        Instance newInstance=m_trainingData.instance(instIndex);        m_canopies.add(newInstance);        double[] density=new double[1];        density[0]=1.0;        m_canopyT2Density.add(density);        double[][] center=new double[newInstance.numAttributes()][0];        double[] numMissingNumerics=new double[newInstance.numAttributes()];        updateCanopyCenter(newInstance,center,numMissingNumerics);        m_canopyCenters.add(center);        m_canopyNumMissingForNumerics.add(numMissingNumerics);        initC.put(hk,null);      }      m_trainingData.swap(j,instIndex);      if (m_canopies.numInstances() == m_numClustersRequested) {        break;      }    }  }  assignCanopiesToCanopyCenters();  m_trainingData=new Instances(m_canopies,0);}  }
class C{  @Override public int size(boolean dataTupleAware){  return 1;}  }
class C{  public void showPropertiesDialog(){  ReflectivePropertyEditor editor=(new ReflectivePropertyEditor(model));  JDialog dialog=editor.getDialog();  dialog.setModal(true);  dialog.pack();  dialog.setLocationRelativeTo(null);  dialog.setVisible(true);}  }
class C{  public void play(int position){  checkState();  ArrayList<SoundCloudTrack> tracks=mPlayerPlaylist.getPlaylist().getTracks();  if (position >= 0 && position < tracks.size()) {    SoundCloudTrack trackToPlay=tracks.get(position);    mPlayerPlaylist.setPlayingTrack(position);    PlaybackService.play(getContext(),mClientKey,trackToPlay);  }}  }
class C{  private void verifyAudioFocusLoss(int focusGainMode,int expectedFocusLossMode) throws Exception {  int result=mAudioManager.requestAudioFocus(mAudioFocusListener,AudioManager.STREAM_MUSIC,AudioManager.AUDIOFOCUS_GAIN);  assertTrue("requestAudioFocus returned " + result,result == AudioManager.AUDIOFOCUS_REQUEST_GRANTED);  result=mAudioManager.requestAudioFocus(null,AudioManager.STREAM_MUSIC,focusGainMode);  assertTrue("requestAudioFocus returned " + result,result == AudioManager.AUDIOFOCUS_REQUEST_GRANTED);  java.lang.Thread.sleep(WAIT_FOR_AUDIOFOCUS_LOSS_MS);  assertEquals("listener lost focus",mAudioFocusListener.mLastFocusChange,expectedFocusLossMode);}  }
class C{  public static boolean isMatch(Method methodA,Method methodB){  if (!methodA.getName().equals(methodB.getName()))   return false;  return isMatch(methodA.getParameterTypes(),methodB.getParameterTypes());}  }
class C{  public void transpose(){  for (int i=0; i < 2; ++i) {    for (int j=i + 1; j < 3; ++j) {      float temp=mMat[i * 3 + j];      mMat[i * 3 + j]=mMat[j * 3 + i];      mMat[j * 3 + i]=temp;    }  }}  }
class C{  @Override public void modelNormalInstruction(Instruction ins,int numWordsConsumed,int numWordsProduced){  if (VERIFY_INTEGRITY) {    if (numWordsProduced > 0) {      throw new InvalidBytecodeException("missing visitor method for " + ins);    }  }  super.modelNormalInstruction(ins,numWordsConsumed,numWordsProduced);}  }
class C{  public void replay(){  mReplaying=true;}  }
class C{  public int readMapStart() throws IOException {  return read();}  }
class C{  @HLEFunction(nid=0xE20B23A6,version=150) public int sceUsbActivateWithCharging(int pid,boolean charging){  usbActivated=true;  return 0;}  }
class C{  public ASN1InputStream(InputStream input,int limit){  this(input,limit,false);}  }
class C{  public byte[] toByteArray(){  byte[] b=output.toByteArray();  ByteArray.write16bit(numOfEntries,b,0);  return b;}  }
class C{  public Page transform(Factory factory,ConfigImpl config,SourceCode sc,TagLib[] tlibs,FunctionLib[] flibs,long sourceLastModified,Boolean dotNotationUpperCase,boolean returnValue,boolean ignoreScope) throws TemplateException {  boolean dnuc;  if (dotNotationUpperCase == null) {    if (sc instanceof PageSourceCode)     dnuc=sc.getDialect() == CFMLEngine.DIALECT_CFML && ((MappingImpl)((PageSourceCode)sc).getPageSource().getMapping()).getDotNotationUpperCase(); else     dnuc=sc.getDialect() == CFMLEngine.DIALECT_CFML && config.getDotNotationUpperCase();  } else   dnuc=dotNotationUpperCase;  TagLib[][] _tlibs=new TagLib[][]{null,new TagLib[0]};  _tlibs[TAG_LIB_GLOBAL]=tlibs;  if (_tlibs[TAG_LIB_PAGE].length > 0) {    _tlibs[TAG_LIB_PAGE]=new TagLib[0];  }  Page page=new Page(factory,config,sc,null,ConfigWebUtil.getEngine(config).getInfo().getFullVersionInfo(),sourceLastModified,sc.getWriteLog(),sc.getDialect() == CFMLEngine.DIALECT_LUCEE || config.getSuppressWSBeforeArg(),config.getDefaultFunctionOutput(),returnValue,ignoreScope);  TagData data=new TagData(factory,_tlibs,flibs,config.getCoreTagLib(sc.getDialect()).getScriptTags(),sc,page,dnuc,ignoreScope);  try {    do {      body(data,page,false,null);      if (data.srcCode.isAfterLast())       break;      if (data.srcCode.forwardIfCurrent("</")) {        int pos=data.srcCode.getPos();        TagLib tagLib=nameSpace(data);        if (tagLib == null) {          page.addPrintOut(data.factory,"</",null,null);        } else {          String name=identifier(data.srcCode,true,true);          if (tagLib.getIgnoreUnknowTags()) {            TagLibTag tlt=tagLib.getTag(name);            if (tlt == null) {              data.srcCode.setPos(pos);              page.addPrintOut(data.factory,"</",null,null);            }          } else           throw new TemplateException(sc,"no matching start tag for end tag [" + tagLib.getNameSpaceAndSeparator() + name+ "]");        }      } else       throw new TemplateException(sc,"Error while transforming CFML File");    } while (true);    data.ep.run();    return page;  } catch (  TemplateException e) {    data.ep.clear();    throw e;  }}  }
class C{  @Override public boolean onKeyDown(int keyCode,KeyEvent event){switch (keyCode) {case KeyEvent.KEYCODE_DPAD_LEFT:    playSoundEffect(SoundEffectConstants.NAVIGATION_LEFT);  return true;case KeyEvent.KEYCODE_DPAD_RIGHT:playSoundEffect(SoundEffectConstants.NAVIGATION_RIGHT);return true;case KeyEvent.KEYCODE_DPAD_CENTER:case KeyEvent.KEYCODE_ENTER:mReceivedInvokeKeyDown=true;}return super.onKeyDown(keyCode,event);}  }
class C{  private String createInterfaceSource(InterfaceModel model){  String[] names=splitClassName(model.getName());  StringBuffer sb=new StringBuffer();  if (!names[0].equals("")) {    sb.append("package ").append(names[0]).append(";\n\n");  }  sb.append("public interface ").append(names[1]);  sb.append(createParentRelation(model));  sb.append(" {\n");  List<AbstractUMLModel> children=model.getChildren();  for (int i=0; i < children.size(); i++) {    Object child=children.get(i);    if (child instanceof AttributeModel) {      sb.append(createAttribute((AttributeModel)child)).append("\n");    }  }  sb.append("\n");  for (int i=0; i < children.size(); i++) {    Object child=children.get(i);    if (child instanceof OperationModel) {      sb.append(createMethodSignature((OperationModel)child));      sb.append(";\n\n");    }  }  sb.append("}\n");  return sb.toString();}  }
class C{  private void addRouteContextToMessage(final ServerMessage message){  byte[] ids=message.getBytesProperty(idsHeaderName);  if (ids == null) {    ids=new byte[8];  } else {    byte[] newIds=new byte[ids.length + 8];    System.arraycopy(ids,0,newIds,8,ids.length);    ids=newIds;  }  ByteBuffer buff=ByteBuffer.wrap(ids);  buff.putLong(remoteQueueID);  message.putBytesProperty(idsHeaderName,ids);  if (logger.isTraceEnabled()) {    logger.trace("Adding remoteQueue ID = " + remoteQueueID + " into message="+ message+ " store-forward-queue="+ storeAndForwardQueue);  }}  }
class C{  public static VMInfo createDeadVM(int vmid,LocalVirtualMachine localVm,VMInfoState state){  VMInfo vmInfo=new VMInfo();  vmInfo.state_=state;  vmInfo.localVm_=localVm;  return vmInfo;}  }
class C{  public BinaryNode binaryNode(byte[] data,int offset,int length){  return BinaryNode.valueOf(data,offset,length);}  }
class C{  public static String bytesToHex(byte[] bytes){  return bytesToHex(bytes,false);}  }
class C{  protected TagTitleImpl(){  super();}  }
class C{  private List<ObjectContent> retrievePropertiesAllObjects(List<PropertyFilterSpec> filterSpecs) throws InvalidPropertyFaultMsg, RuntimeFaultFaultMsg {  RetrieveOptions retrieveOptions=new RetrieveOptions();  ManagedObjectReference collector=serviceContent.getPropertyCollector();  List<ObjectContent> contents=new ArrayList<ObjectContent>();  RetrieveResult results=vimPort.retrievePropertiesEx(collector,filterSpecs,retrieveOptions);  if (results != null && results.getObjects() != null && !results.getObjects().isEmpty()) {    contents.addAll(results.getObjects());  }  String token=null;  if (results != null && results.getToken() != null) {    token=results.getToken();  }  while (token != null && token.length() > 0) {    results=vimPort.continueRetrievePropertiesEx(collector,token);    token=null;    if (results != null) {      token=results.getToken();      if (results.getObjects() != null && !results.getObjects().isEmpty()) {        contents.addAll(results.getObjects());      }    }  }  return contents;}  }
class C{  private HashMap<String,byte[]> readChars(byte[] d){  HashMap<String,byte[]> hm=new HashMap<String,byte[]>();  int i=findSlashName(d,"CharStrings");  if (i < 0) {    return hm;  }  PSParser psp=new PSParser(d,i);  while (true) {    String s=psp.readThing();    char c=s.charAt(0);    if (c == '/') {      int len=Integer.parseInt(psp.readThing());      String go=psp.readThing();      if (go.equals("-|") || go.equals("RD")) {        psp.setLoc(psp.getLoc() + 1);        byte[] line=psp.getNEncodedBytes(len,password,lenIV);        hm.put(s.substring(1),line);      }    } else     if (s.equals("end")) {      break;    }  }  return hm;}  }
class C{  public static void swapRows(double[][] matrix,int row1,int row2){  double[] temp=matrix[row1];  matrix[row1]=matrix[row2];  matrix[row2]=temp;}  }
class C{  @Deprecated @Override public final void add(E e){  throw new UnsupportedOperationException();}  }
class C{  private static void readSystemProps(){  System.getProperties().stringPropertyNames().stream().map(null).forEach(null);}  }
class C{  private void checkPermissions(){  SecurityManager sm=System.getSecurityManager();  if (sm != null) {    Enumeration<Permission> enum_=permissions.elements();    while (enum_.hasMoreElements()) {      sm.checkPermission(enum_.nextElement());    }  }}  }
class C{  public static CreateStatement orRollback(CharSequence table){  return produce(table,"ROLLBACK");}  }
class C{  public Boolean isUseToe(){  return useToe;}  }
class C{  public boolean isMultiplicity(){  return multiplicity;}  }
class C{  public static OSType calculateOS(){  String osName=System.getProperty("os.name");  osName=osName.toLowerCase(Locale.ENGLISH);  if (osName.startsWith("mac os")) {    return OSType.APPLE;  }  if (osName.startsWith("windows")) {    return OSType.WINDOWS;  }  if (osName.startsWith("linux")) {    return OSType.LINUX;  }  if (osName.startsWith("sun")) {    return OSType.SUN;  }  return OSType.UNKNOWN;}  }
class C{  public static void stop(UUID clientId,boolean wait){  busyLock.readLock().lock();  try {    GridClientImpl client=openClients.remove(clientId);    if (client != null)     client.stop(wait);  }  finally {    busyLock.readLock().unlock();  }}  }
class C{  public void shiftRightUnsigned() throws IOException {  writeCode(SHIFT_UNSIGNED);}  }
class C{  int registerMiss(){  return misses.incrementAndGet();}  }
class C{  public LegHistogram(final int binSize){  this(binSize,30 * 3600 / binSize + 1);}  }
class C{  public Update fromTemplate(AbstractModel template){  if (!template.isModified()) {    throw new IllegalArgumentException("Template has no values set to use for update");  }  ValuesStorage setValues=template.getSetValues();  for (  Entry<String,Object> entry : setValues.valueSet()) {    valuesToUpdate.put(entry.getKey(),entry.getValue());  }  invalidateCompileCache();  return this;}  }
class C{  public static String sendFedexRequest(String xmlString,Delegator delegator,String shipmentGatewayConfigId,String resource,Locale locale) throws FedexConnectException {  String url=getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,"connectUrl",resource,"shipment.fedex.connect.url");  if (UtilValidate.isEmpty(url)) {    throw new FedexConnectException(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexConnectUrlIncomplete",locale));  }  if (!xmlString.matches("^(?s)<\\?xml\\s+version=\"1\\.0\"\\s+encoding=\"UTF-8\"\\s*\\?>.*")) {    throw new FedexConnectException(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexXmlHeaderMalformed",locale));  }  url=url.trim();  String timeOutStr=getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,"connectTimeout",resource,"shipment.fedex.connect.timeout","60");  int timeout=60;  try {    timeout=Integer.parseInt(timeOutStr);  } catch (  NumberFormatException e) {    Debug.logError(e,"Unable to set timeout to " + timeOutStr + " using default "+ timeout);  }  if (Debug.verboseOn()) {    Debug.logVerbose("Fedex Connect URL : " + url,module);    Debug.logVerbose("Fedex XML String : " + xmlString,module);  }  HttpClient http=new HttpClient(url);  http.setTimeout(timeout * 1000);  String response=null;  try {    response=http.post(xmlString);  } catch (  HttpClientException e) {    Debug.logError(e,"Problem connecting to Fedex server",module);    throw new FedexConnectException(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexConnectUrlProblem",UtilMisc.toMap("errorString",e.toString()),locale));  }  if (response == null) {    throw new FedexConnectException(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexReceivedNullResponse",locale));  }  if (Debug.verboseOn()) {    Debug.logVerbose("Fedex Response : " + response,module);  }  return response;}  }
class C{  private boolean ifFilterCoversIndex(String index,String filter){  if (index.startsWith("/"))   index=index.substring(1);  if (filter.startsWith("/"))   filter=filter.substring(1);  if (index.equals(filter))   return true;  if ("".equals(index) || "".equals(filter)) {    if ("".equals(filter) && "".equals(index)) {      return true;    }    return false;  }  if (!filter.contains("*")) {    if ("*".equals(index)) {      return true;    } else {      return index.equals(filter);    }  }  if (index.contains("*")) {    return index.equals(filter);  } else {    String regexStr="";    if (!filter.startsWith("*"))     regexStr="^";    String[] splitStrArr=filter.split("\\*");    for (int i=0; i < splitStrArr.length; i++) {      if (i < splitStrArr.length - 1) {        if ("".equals(splitStrArr[i])) {          regexStr+=".*?";        } else {          regexStr+=Pattern.quote(splitStrArr[i]) + ".*?";        }      } else {        regexStr+=Pattern.quote(splitStrArr[i]);      }    }    if (filter.endsWith("*"))     regexStr+=".*?$"; else     regexStr+="$";    Pattern p=Pattern.compile(regexStr);    Matcher m=p.matcher(index);    return m.find();  }}  }
class C{  public DeprecatedAttribute(ConstPool cp){  super(cp,tag,new byte[0]);}  }
class C{  private Object readResolve(){  return iChronology.weekyear();}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:40.219 -0500",hash_original_method="9805B7FF3BAD48B8D2DE0E62F52A36CA",hash_generated_method="C424A8BDBD8B97D664023DF9B1CDBC17") static void clearGatheredViolations(){  gatheredViolations.set(null);}  }
class C{  private void put(final Item i){  if (index + typeCount > threshold) {    int ll=items.length;    int nl=ll * 2 + 1;    Item[] newItems=new Item[nl];    for (int l=ll - 1; l >= 0; --l) {      Item j=items[l];      while (j != null) {        int index=j.hashCode % newItems.length;        Item k=j.next;        j.next=newItems[index];        newItems[index]=j;        j=k;      }    }    items=newItems;    threshold=(int)(nl * 0.75);  }  int index=i.hashCode % items.length;  i.next=items[index];  items[index]=i;}  }
class C{  public static void writeLines(File file,Collection<?> lines,String lineEnding,boolean append) throws IOException {  writeLines(file,null,lines,lineEnding,append);}  }
class C{  public static Builder newBuilder(){  return new Builder();}  }
class C{  private void addPrintLines(int row,int col,Object data){  while (m_printRows.size() <= row)   m_printRows.add(null);  ArrayList<ArrayList<Object>> columns=m_printRows.get(row);  if (columns == null)   columns=new ArrayList<ArrayList<Object>>(m_columnHeader.length);  while (columns.size() <= col)   columns.add(null);  ArrayList<Object> coordinate=columns.get(col);  if (coordinate == null)   coordinate=new ArrayList<Object>();  coordinate.add(data);  columns.set(col,coordinate);  m_printRows.set(row,columns);  log.finest("row=" + row + ", col="+ col+ " - Rows="+ m_printRows.size()+ ", Cols="+ columns.size()+ " - "+ data);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  UIManager uiMgr=stack.getUIMgr();  return (uiMgr == null || !uiMgr.areCoreAnimationsEnabled()) ? Boolean.FALSE : Boolean.TRUE;}  }
class C{  private void removeOldJar() throws IOException {  if (outputFile.exists()) {    if (outputFile.isDirectory()) {      if (!FileUtils.recursiveDelete(outputFile)) {        throw new IOException("Could not delete file [" + outputFile.getAbsolutePath() + "]");      }    } else {      if (!outputFile.delete()) {        throw new IOException("Could not delete file [" + outputFile.getAbsolutePath() + "]");      }    }  }}  }
class C{  public void addTable(int tag,ReadableFontData data){  tables.put(tag,data);}  }
class C{  private void collectWrapperAndSuppressedInfo(Matcher matcher) throws AdeException {  m_suppressedNonWrapperMessageCount++;  m_suppressedMessagesRemaining=Integer.parseInt(matcher.group(1));  m_suppressedMessagesRemaining--;  m_messageInstanceWaiting=m_messageTextPreprocessor.getExtraMessage(m_prevMessageInstance);}  }
class C{  public static long[] coordinatesToHilbert(long[] coords,int bitsperdim,int offset){  final int numdim=coords.length;  final int numbits=numdim * bitsperdim;  final long[] output=BitsUtil.zero(numbits);  int rotation=0;  long[] refl=BitsUtil.zero(numdim);  for (int i=0; i < bitsperdim; i++) {    final long[] hist=interleaveBits(coords,i + offset);    final long[] bits=BitsUtil.copy(hist);    BitsUtil.xorI(bits,refl);    BitsUtil.cycleRightI(bits,rotation,numdim);    final int nextrot=(rotation + BitsUtil.numberOfTrailingZerosSigned(bits) + 2) % numdim;    BitsUtil.invgrayI(bits);    BitsUtil.orI(output,bits,numbits - (i + 1) * numdim);    refl=hist;    BitsUtil.flipI(refl,rotation);    if (!BitsUtil.get(bits,0)) {      BitsUtil.flipI(refl,(nextrot - 1 + numdim) % numdim);    }    rotation=nextrot;  }  return output;}  }
class C{  public static void clear(){  int size;  long stamp=lock.readLock();  try {    size=cache.size();    if (size == 0) {      return;    }    stamp=convertToWriteLock(stamp);    size=cache.size();    cache.clear();  }  finally {    lock.unlock(stamp);  }  if (size != 0 && logger.isDebugEnabled()) {    if (size != 1) {      logger.debug("Cleared: {} entries",size);    } else {      logger.debug("Cleared: 1 entry");    }  }}  }
class C{  public boolean canSendEvent(){  try {    validateSendEvent();    return true;  } catch (  Exception e) {    return false;  }}  }
class C{  private void updateAccountWaitTime(Long clientCustomerId,long waitForMills){  final long newTime=DateTime.now().getMillis() + waitForMills;  boolean done=true;  do {    long oldTime=accountWaitUntil.get(clientCustomerId);    if (oldTime < newTime) {      done=(oldTime == accountWaitUntil.getAndAdd(clientCustomerId,newTime - oldTime));    } else {      done=true;    }  } while (!done);}  }
class C{  public static String titleText(String prefix){  if (prefix == "") {    return "Definitions and Declarations";  } else {    return prefix;  }}  }
class C{  void showEditor(){  BoardEditor editor=new BoardEditor(controller);  controller.boardEditor=editor;  launch(editor.getFrame());  editor.boardNew();}  }
class C{  @Override public String toString(){  return month + "/" + day+ "/"+ year;}  }
class C{  public Object clone(){  return new LinearLocation(componentIndex,segmentIndex,segmentFraction);}  }
class C{  public boolean isMotorEnabled(){  return joint.isMotorEnabled();}  }
class C{  public LineRange(int startLine,int numberOfLines){  fStartLine=startLine;  fNumberOfLines=numberOfLines;}  }
class C{  SortedSet<String> typesToImport(){  SortedSet<String> typesToImport=new TreeSet<String>();  for (  Map.Entry<String,Spelling> entry : imports.entrySet()) {    if (entry.getValue().importIt) {      typesToImport.add(entry.getKey());    }  }  return typesToImport;}  }
class C{  public int numSources(){  return NUM_SOURCES;}  }
class C{  @Override public final double[] weights(Instance instance){  double[] weights;  int i;  if (instance.isMissing(m_attIndex)) {    weights=new double[m_numSubsets];    for (i=0; i < m_numSubsets; i++) {      weights[i]=m_distribution.perBag(i) / m_distribution.total();    }    return weights;  } else {    return null;  }}  }
class C{  public void flushPending() throws SAXException {  if (m_needToCallStartDocument) {    startDocumentInternal();    m_needToCallStartDocument=false;  }  if (m_elemContext.m_startTagOpen) {    closeStartTag();    m_elemContext.m_startTagOpen=false;  }  if (m_cdataTagOpen) {    closeCDATA();    m_cdataTagOpen=false;  }}  }
class C{  public void addOperand(int startTick,int endTick){  if (operands.size() == 0 && this.startTick != startTick) {    throw new IllegalArgumentException("The start tick of the first operand must be equal to the start tick of the combined fragment");  }  operands.add(new Operand(startTick,endTick));}  }
class C{  public UF5(int numberOfVariables){  super(numberOfVariables,2);}  }
class C{  public static Date zeroTimeDate(Date date){  final GregorianCalendar gregorianCalendar=new GregorianCalendar();  gregorianCalendar.setTime(date);  gregorianCalendar.set(Calendar.HOUR_OF_DAY,0);  gregorianCalendar.set(Calendar.MINUTE,0);  gregorianCalendar.set(Calendar.SECOND,0);  gregorianCalendar.set(Calendar.MILLISECOND,0);  return gregorianCalendar.getTime();}  }
class C{  public static void copyStreamPortion(java.io.InputStream inputStream,java.io.OutputStream outputStream,int portionSize,int bufferSize) throws IOException {  if (bufferSize > portionSize) {    bufferSize=portionSize;  }  byte[] writeBuffer=new byte[bufferSize];  int totalRead=0;  while (totalRead < portionSize) {    int bytesToRead=bufferSize;    if (bytesToRead > portionSize - totalRead) {      bytesToRead=portionSize - totalRead;    }    int bytesRead=inputStream.read(writeBuffer,0,bytesToRead);    outputStream.write(writeBuffer,0,bytesRead);    totalRead+=bytesRead;  }  outputStream.flush();}  }
class C{  public static Style createFromSLD(final File sld){  try {    final SLDParser stylereader=new SLDParser(styleFactory,sld.toURI().toURL());    final Style[] style=stylereader.readXML();    return style[0];  } catch (  final Exception e) {    ExceptionMonitor.show(null,e,"Problem creating style");  }  return null;}  }
class C{  @Override public void handleMousePressed(ChartCanvas canvas,MouseEvent e){  this.mousePressedPoint=new Point2D.Double(e.getX(),e.getY());}  }
class C{  private static boolean isSchoolGoing(Plan plan){  boolean result=false;  Iterator<PlanElement> iterator=plan.getPlanElements().iterator();  while (!result & iterator.hasNext()) {    PlanElement pe=iterator.next();    if (pe instanceof Activity) {      result=((Activity)pe).getType().contains("e1");    }  }  return result;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:07.062 -0500",hash_original_method="E906BEDBA8C667F2A993849051C66540",hash_generated_method="92A9E7A1C9812AD7226E5F9C6F28DDAE") public BlurMaskFilter(float radius,Blur style){  native_instance=nativeConstructor(radius,style.native_int);}  }
class C{  public boolean isStateActive(State state){switch (state) {case main_region_StateA:    return stateVector[0] == State.main_region_StateA;case main_region_StateB:  return stateVector[0] == State.main_region_StateB;default :return false;}}  }
class C{  public PSPProcessingException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public static void printRootCauseStackTrace(final Throwable throwable,final PrintStream stream){  if (throwable == null) {    return;  }  if (stream == null) {    throw new IllegalArgumentException("The PrintStream must not be null");  }  final String trace[]=getRootCauseStackTrace(throwable);  for (  final String element : trace) {    stream.println(element);  }  stream.flush();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.ARROW_FUNCTION__HAS_BRACES_AROUND_BODY:    return hasBracesAroundBody != HAS_BRACES_AROUND_BODY_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  public PubsubFuture<Void> acknowledge(final String project,final String subscription,final List<String> ackIds){  return acknowledge(Subscription.canonicalSubscription(project,subscription),ackIds);}  }
class C{  @Override public int currentSegment(double[] coords){  int numCoords=0;  int type=0;  if (index == path.size()) {    if (path.size() > 1) {      BezierPath.Node previous=path.get(path.size() - 1);      BezierPath.Node current=path.get(0);      if ((previous.mask & BezierPath.C2_MASK) == 0) {        if ((current.mask & BezierPath.C1_MASK) == 0) {          numCoords=1;          type=SEG_LINETO;          coords[0]=current.x[0];          coords[1]=current.y[0];        } else {          numCoords=2;          type=SEG_QUADTO;          coords[0]=current.x[1];          coords[1]=current.y[1];          coords[2]=current.x[0];          coords[3]=current.y[0];        }      } else {        if ((current.mask & BezierPath.C1_MASK) == 0) {          numCoords=2;          type=SEG_QUADTO;          coords[0]=previous.x[2];          coords[1]=previous.y[2];          coords[2]=current.x[0];          coords[3]=current.y[0];        } else {          numCoords=3;          type=SEG_CUBICTO;          coords[0]=previous.x[2];          coords[1]=previous.y[2];          coords[2]=current.x[1];          coords[3]=current.y[1];          coords[4]=current.x[0];          coords[5]=current.y[0];        }      }    }  } else   if (index > path.size()) {    return SEG_CLOSE;  } else   if (index == 0) {    BezierPath.Node current=path.get(index);    coords[0]=current.x[0];    coords[1]=current.y[0];    numCoords=1;    type=SEG_MOVETO;  } else   if (index < path.size()) {    BezierPath.Node current=path.get(index);    BezierPath.Node previous=path.get(index - 1);    if ((previous.mask & BezierPath.C2_MASK) == 0) {      if ((current.mask & BezierPath.C1_MASK) == 0) {        numCoords=1;        type=SEG_LINETO;        coords[0]=current.x[0];        coords[1]=current.y[0];      } else {        numCoords=2;        type=SEG_QUADTO;        coords[0]=current.x[1];        coords[1]=current.y[1];        coords[2]=current.x[0];        coords[3]=current.y[0];      }    } else {      if ((current.mask & BezierPath.C1_MASK) == 0) {        numCoords=2;        type=SEG_QUADTO;        coords[0]=previous.x[2];        coords[1]=previous.y[2];        coords[2]=current.x[0];        coords[3]=current.y[0];      } else {        numCoords=3;        type=SEG_CUBICTO;        coords[0]=previous.x[2];        coords[1]=previous.y[2];        coords[2]=current.x[1];        coords[3]=current.y[1];        coords[4]=current.x[0];        coords[5]=current.y[0];      }    }  }  if (affine != null) {    affine.transform(coords,0,coords,0,numCoords);  } else {    System.arraycopy(coords,0,coords,0,numCoords);  }  return type;}  }
class C{  public static int[] sort(float a[]){  int[] p=new int[a.length];  for (int i=0; i < a.length; i++)   p[i]=i;  sort(a,p,0,a.length - 1);  return p;}  }
class C{  public void sendStatus(int resultCode,Bundle results){  if (mWatcher != null) {    try {      mWatcher.instrumentationStatus(mComponent,resultCode,results);    } catch (    RemoteException e) {      mWatcher=null;    }  }}  }
class C{  private void verifyCollectedMockStats(ComputeStatsResponse response){  ComputeStatsResponse.ComputeStats computeStats=response.statsList.get(0);  Assert.assertTrue("Compute Link is empty",!computeStats.computeLink.isEmpty());  for (  String key : computeStats.statValues.keySet()) {    List<ServiceStats.ServiceStat> stats=computeStats.statValues.get(key);    for (    ServiceStats.ServiceStat stat : stats) {      Assert.assertTrue("Unit is empty",!stat.unit.isEmpty());    }  }}  }
class C{  private static void arcToBezier(Path p,double cx,double cy,double a,double b,double e1x,double e1y,double theta,double start,double sweep){  int numSegments=Math.abs((int)Math.ceil(sweep * 4 / Math.PI));  double eta1=start;  double cosTheta=Math.cos(theta);  double sinTheta=Math.sin(theta);  double cosEta1=Math.cos(eta1);  double sinEta1=Math.sin(eta1);  double ep1x=(-a * cosTheta * sinEta1) - (b * sinTheta * cosEta1);  double ep1y=(-a * sinTheta * sinEta1) + (b * cosTheta * cosEta1);  double anglePerSegment=sweep / numSegments;  for (int i=0; i < numSegments; i++) {    double eta2=eta1 + anglePerSegment;    double sinEta2=Math.sin(eta2);    double cosEta2=Math.cos(eta2);    double e2x=cx + (a * cosTheta * cosEta2) - (b * sinTheta * sinEta2);    double e2y=cy + (a * sinTheta * cosEta2) + (b * cosTheta * sinEta2);    double ep2x=-a * cosTheta * sinEta2 - b * sinTheta * cosEta2;    double ep2y=-a * sinTheta * sinEta2 + b * cosTheta * cosEta2;    double tanDiff2=Math.tan((eta2 - eta1) / 2);    double alpha=Math.sin(eta2 - eta1) * (Math.sqrt(4 + (3 * tanDiff2 * tanDiff2)) - 1) / 3;    double q1x=e1x + alpha * ep1x;    double q1y=e1y + alpha * ep1y;    double q2x=e2x - alpha * ep2x;    double q2y=e2y - alpha * ep2y;    p.cubicTo((float)q1x,(float)q1y,(float)q2x,(float)q2y,(float)e2x,(float)e2y);    eta1=eta2;    e1x=e2x;    e1y=e2y;    ep1x=ep2x;    ep1y=ep2y;  }}  }
class C{  public static Result help(){  return getHelp(Version.NEW);}  }
class C{  public T remove(int idx){  int index=(idx << 1);  nvPairs.remove(index);  @SuppressWarnings("unchecked") T result=(T)nvPairs.remove(index);  return result;}  }
class C{  public int next(){  int current;  int node;  int type;  final int nodeType=_nodeType;  int currentNodeID=makeNodeIdentity(_currentNode);  if (nodeType >= DTM.NTYPES) {    do {      node=currentNodeID;      current=node;      do {        current++;        type=_type2(current);      } while (type != NULL && (ATTRIBUTE_NODE == type || NAMESPACE_NODE == type));      currentNodeID=(type != NULL) ? current : NULL;    } while (node != DTM.NULL && _exptype2(node) != nodeType);  } else {    do {      node=currentNodeID;      current=node;      do {        current++;        type=_type2(current);      } while (type != NULL && (ATTRIBUTE_NODE == type || NAMESPACE_NODE == type));      currentNodeID=(type != NULL) ? current : NULL;    } while (node != DTM.NULL && (_exptype2(node) != nodeType && _type2(node) != nodeType));  }  _currentNode=makeNodeHandle(currentNodeID);  return (node == DTM.NULL ? DTM.NULL : returnNode(makeNodeHandle(node)));}  }
class C{  public TelefonKomponente(CnATreeElement parent){  super(parent);  setEntity(new Entity(TYPE_ID));  getEntity().initDefaultValues(getTypeFactory());  setTitel(getTypeFactory().getMessage(TYPE_ID));}  }
class C{  @Override protected Object convertToType(final Class type,final Object value) throws Throwable {  return new URI(value.toString());}  }
class C{  public static boolean isPrintableString(String str){  for (int i=str.length() - 1; i >= 0; i--) {    char ch=str.charAt(i);    if (ch > 0x007f) {      return false;    }    if ('a' <= ch && ch <= 'z') {      continue;    }    if ('A' <= ch && ch <= 'Z') {      continue;    }    if ('0' <= ch && ch <= '9') {      continue;    }switch (ch) {case ' ':case '\'':case '(':case ')':case '+':case '-':case '.':case ':':case '=':case '?':case '/':case ',':      continue;  }  return false;}return true;}  }
class C{  @Override public Vertex parseReturn(TextStream stream,Map<String,Map<String,Vertex>> elements,boolean debug,Network network){  stream.nextWord();  stream.skipWhitespace();  Vertex expression=network.createInstance(Primitive.RETURN);  if (stream.peek() != ';') {    boolean with=stream.peekWord().toLowerCase().equals(WITH);    if (!with) {      Vertex result=parseElement(stream,elements,debug,network);      expression.addRelationship(Primitive.RETURN,result);      stream.skipWhitespace();      with=stream.peekWord().toLowerCase().equals(WITH);    }    if (with) {      stream.skipWord();      stream.skipWhitespace();      if (stream.peek() == '(') {        stream.skip();        stream.skipWhitespace();        Vertex argument=parseElement(stream,elements,debug,network);        expression.addRelationship(Primitive.ARGUMENT,argument,Integer.MAX_VALUE);        stream.skipWhitespace();        while (stream.peek() == ',') {          stream.skip();          stream.skipWhitespace();          argument=parseElement(stream,elements,debug,network);          expression.addRelationship(Primitive.ARGUMENT,argument,Integer.MAX_VALUE);        }        ensureNext(')',stream);      } else {        Vertex argument=parseElement(stream,elements,debug,network);        expression.addRelationship(Primitive.ARGUMENT,argument,Integer.MAX_VALUE);      }    }  }  return expression;}  }
class C{  void initComputeProgram(){  glUseProgram(computeProgram);  ray00Uniform=glGetUniformLocation(computeProgram,"ray00");  ray10Uniform=glGetUniformLocation(computeProgram,"ray10");  ray01Uniform=glGetUniformLocation(computeProgram,"ray01");  ray11Uniform=glGetUniformLocation(computeProgram,"ray11");  IntBuffer workGroupSize=BufferUtils.createIntBuffer(3);  glGetProgramiv(computeProgram,GL_COMPUTE_WORK_GROUP_SIZE,workGroupSize);  workGroupSizeX=workGroupSize.get(0);  workGroupSizeY=workGroupSize.get(1);  int boxesResourceIndex=glGetProgramResourceIndex(computeProgram,GL_SHADER_STORAGE_BLOCK,"Triangles");  IntBuffer props=BufferUtils.createIntBuffer(1);  IntBuffer params=BufferUtils.createIntBuffer(1);  props.put(0,GL_BUFFER_BINDING);  glGetProgramResourceiv(computeProgram,GL_SHADER_STORAGE_BLOCK,boxesResourceIndex,props,null,params);  trianglesSsboBinding=params.get(0);  int loc=glGetUniformLocation(computeProgram,"framebufferImage");  glGetUniformiv(computeProgram,loc,params);  framebufferImageBinding=params.get(0);  glUseProgram(0);}  }
class C{  public T charset(String value){  return attr("charset",value);}  }
class C{  void onDragExit(){  mDragEnforcer.onDragExit();  if (mDragging) {    mDragging=false;  }  mDragCell[0]=mDragCell[1]=-1;  mDragOutlineAnims[mDragOutlineCurrent].animateOut();  mDragOutlineCurrent=(mDragOutlineCurrent + 1) % mDragOutlineAnims.length;  revertTempState();  setIsDragOverlapping(false);}  }
class C{  public static strictfp double pow2_strict(final double a){  return a * a;}  }
class C{  public double clip(final double value){  double val=value;  if (val > upperBound) {    val=upperBound;  } else {    if (val < lowerBound) {      val=lowerBound;    }  }  return val;}  }
class C{  @Override public boolean isResetted(){  return (x == 0.0f && y == 0.0f);}  }
class C{  public AtomicLongChunks(final long length){  this(length,CHUNK_BITS);}  }
class C{  public boolean isHeld(){synchronized (mToken) {    return mHeld;  }}  }
class C{  private static void quickSort(int[] array,int[] index,int lo0,int hi0){  int lo=lo0;  int hi=hi0;  int mid;  int help;  if (hi0 > lo0) {    mid=array[index[(lo0 + hi0) / 2]];    while (lo <= hi) {      while ((array[index[lo]] < mid) && (lo < hi0)) {        ++lo;      }      while ((array[index[hi]] > mid) && (hi > lo0)) {        --hi;      }      if (lo <= hi) {        help=index[lo];        index[lo]=index[hi];        index[hi]=help;        ++lo;        --hi;      }    }    if (lo0 < hi) {      quickSort(array,index,lo0,hi);    }    if (lo < hi0) {      quickSort(array,index,lo,hi0);    }  }}  }
class C{  protected double[] logs2densities(int j,Instance in) throws Exception {  double[] logs=m_clusterers[j].logJointDensitiesForInstance(in);  for (int i=0; i < logs.length; i++) {    logs[i]+=Math.log(m_priors[j]);  }  return logs;}  }
class C{  public ProcessStep addStep(long serviceProcessId,String stepName,int stepNo,String dossierStatus,int daysDuration,long referenceDossierPartId,String externalAppUrl,ServiceContext context) throws PortalException, SystemException {  ProcessStep step=null;  long processStepId=counterLocalService.increment(ProcessStep.class.getName());  step=processStepPersistence.create(processStepId);  Date now=new Date();  if (Validator.isNotNull(step)) {    step.setCompanyId(context.getCompanyId());    step.setGroupId(context.getScopeGroupId());    step.setUserId(context.getUserId());    step.setCreateDate(now);    step.setModifiedDate(now);    step.setServiceProcessId(serviceProcessId);    step.setStepName(stepName);    step.setSequenceNo(stepNo);    step.setDossierStatus(dossierStatus);    step.setDaysDuration(daysDuration);    step.setExternalAppUrl(externalAppUrl);    step.setReferenceDossierPartId(referenceDossierPartId);    processStepPersistence.update(step);  }  return step;}  }
class C{  public PolynomialGF2mSmallM multWithElement(int element){  if (!field.isElementOfThisField(element)) {    throw new ArithmeticException("Not an element of the finite field this polynomial is defined over.");  }  int[] resultCoeff=multWithElement(coefficients,element);  return new PolynomialGF2mSmallM(field,resultCoeff);}  }
class C{  public void testAsciiCharConversion() throws Exception {  byte[] buf=new byte[10];  buf[0]=(byte)'?';  buf[1]=(byte)'S';  buf[2]=(byte)'t';  buf[3]=(byte)'a';  buf[4]=(byte)'t';  buf[5]=(byte)'e';  buf[6]=(byte)'-';  buf[7]=(byte)'b';  buf[8]=(byte)'o';  buf[9]=(byte)'t';  String testString="?State-bot";  String convertedString=StringUtils.toAsciiString(buf);  for (int i=0; i < convertedString.length(); i++) {    System.out.println((byte)convertedString.charAt(i));  }  assertTrue("Converted string != test string",testString.equals(convertedString));}  }
class C{  public void dismissView(){  if (mView != null) {    mView.dismiss();  }}  }
class C{  private SimplePanel createIconWidget(){  SimplePanel iconWrapper=new SimplePanel();  iconWrapper.setStyleName(resources.notificationCss().notificationPopupIconWrapper());  iconWrapper.ensureDebugId(ICON_DBG_ID + notification.getId());  return iconWrapper;}  }
class C{  public void saveSettings(){  Env.LAUNCHER_SETTINGS.save();  Env.APP_SETTINGS.save();  for (  final ModEnv modEnv : Env.EXT_MOD_MANAGER.getStartedExtModEnvList())   for (  final ISettingsBean settings : modEnv.getSettingsBeanList())   settings.save();}  }
class C{  public static ByteArray toByteArray(String s){  try {    return new ByteArray(s.getBytes("UTF-8"));  } catch (  UnsupportedEncodingException e) {    throw new IllegalStateException(e);  }}  }
class C{  void createParameterDefinition(String id,ParameterValueType valueType,String mandatory,String defaultValue,String minValue,String maxValue,String configurable,String modificationType) throws ImportException {  paramDef=new ParameterDefinition();  paramDef.setParameterType(ParameterType.SERVICE_PARAMETER);  paramDef.setParameterId(id);  paramDef.setValueType(valueType);  if (!isBlank(mandatory)) {    paramDef.setMandatory(Boolean.parseBoolean(mandatory));  } else {    paramDef.setMandatory(false);  }  if (!isBlank(configurable)) {    paramDef.setConfigurable(Boolean.parseBoolean(configurable));  } else {    paramDef.setConfigurable(true);  }  if (!isBlank(modificationType)) {    paramDef.setModificationType(ParameterModificationType.valueOf(modificationType));  } else {    paramDef.setModificationType(ParameterModificationType.STANDARD);  }  setDefaultValue(defaultValue,minValue,maxValue,valueType);  if (!isBlank(minValue)) {    paramDef.setMinimumValue(Long.valueOf(minValue));  }  if (!isBlank(maxValue)) {    paramDef.setMaximumValue(Long.valueOf(maxValue));  }  paramDef.setTechnicalProduct(techProduct);  setCreateAction(true);}  }
class C{  private void assertElementContentEquals(final HtmlPage page,final String elementId,final String expected){  HtmlElement element=page.getElementById(elementId);  assertNotNull(element);  assertEquals("Testing element content of #" + elementId,expected,element.getTextContent());}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  protected void sequence_TypeRef(ISerializationContext context,TypeRef semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  private static synchronized void printInXml(File file,Document doc){  FileOutputStream os=null;  try {    Source source=new DOMSource(doc);    os=new FileOutputStream(file);    Result result=new StreamResult(os);    Transformer xformer;    xformer=TransformerFactory.newInstance().newTransformer();    xformer.transform(source,result);  } catch (  FileNotFoundException e) {    e.printStackTrace();  }catch (  TransformerConfigurationException e) {    e.printStackTrace();  }catch (  TransformerFactoryConfigurationError e) {    e.printStackTrace();  }catch (  TransformerException e) {    e.printStackTrace();  } finally {    try {      if (os != null)       os.close();    } catch (    Exception e) {    }  }}  }
class C{  public Individual(double[] weights){  this.weights=weights;  neighbors=new ArrayList<Individual>();  utility=1.0;}  }
class C{  public RestHttpOperationInvoker(final LinkIndex linkIndex,final Gfsh gfsh,final String baseUrl,Map<String,String> securityProperties){  super(gfsh,baseUrl,securityProperties);  assertNotNull(linkIndex,"The Link Index resolving commands to REST API web service endpoints cannot be null!");  this.linkIndex=linkIndex;  this.httpOperationInvoker=new SimpleHttpOperationInvoker(gfsh,baseUrl,securityProperties);}  }
class C{  public static byte[] decode(byte[] source,int off,int len,byte[] decodabet) throws Base64DecoderException {  int len34=len * 3 / 4;  byte[] outBuff=new byte[2 + len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiCrop=0;  byte sbiDecode=0;  for (i=0; i < len; i++) {    sbiCrop=(byte)(source[i + off] & 0x7f);    sbiDecode=decodabet[sbiCrop];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        if (sbiCrop == EQUALS_SIGN) {          int bytesLeft=len - i;          byte lastByte=(byte)(source[len - 1 + off] & 0x7f);          if (b4Posn == 0 || b4Posn == 1) {            throw new Base64DecoderException("invalid padding byte '=' at byte offset " + i);          } else           if ((b4Posn == 3 && bytesLeft > 2) || (b4Posn == 4 && bytesLeft > 1)) {            throw new Base64DecoderException("padding byte '=' falsely signals end of encoded value " + "at offset " + i);          } else           if (lastByte != EQUALS_SIGN && lastByte != NEW_LINE) {            throw new Base64DecoderException("encoded value has invalid trailing byte");          }          break;        }        b4[b4Posn++]=sbiCrop;        if (b4Posn == 4) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);          b4Posn=0;        }      }    } else {      throw new Base64DecoderException("Bad Base64 input character at " + i + ": "+ source[i + off]+ "(decimal)");    }  }  if (b4Posn != 0) {    if (b4Posn == 1) {      throw new Base64DecoderException("single trailing character at offset " + (len - 1));    }    b4[b4Posn++]=EQUALS_SIGN;    outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  public static String parseValue(String value,CarbonDimension dimension){  try {switch (dimension.getDataType()) {case DECIMAL:      return parseStringToBigDecimal(value,dimension);default :    return value;}} catch (Exception e) {return null;}}  }
class C{  public void popSscrCssIfSwitchingEnabled(){  if (!isSscrSSDSet()) {    setSscrCSS(getSscrPSS());  }}  }
class C{  public PlayerHasItemEquippedInSlot(final String item,final String slot){  this.item=checkNotNull(item);  this.slot=checkNotNull(slot);}  }
class C{  public synchronized void stopPreview(){  if (autoFocusManager != null) {    autoFocusManager.stop();    autoFocusManager=null;  }  if (camera != null && previewing) {    camera.stopPreview();    previewCallback.setHandler(null,0);    previewing=false;  }}  }
class C{  public boolean equals(Object o){  return (o instanceof LoggerComparator);}  }
class C{  private char map(char ch){  int index=ch - 'A';  if (index < 0 || index >= this.getSoundexMapping().length) {    throw new IllegalArgumentException("The character is not mapped: " + ch);  }  return this.getSoundexMapping()[index];}  }
class C{  private void initializeLight(String systemName){  mBit=SerialAddress.getBitFromSystemName(systemName);  setState(OFF);}  }
class C{  @Override public void printEverything(){  List<kafka.javaapi.TopicMetadata> data=getAllTopicPartition();  for (  kafka.javaapi.TopicMetadata item : data) {    System.out.println("Topic: " + item.topic());    for (    kafka.javaapi.PartitionMetadata part : item.partitionsMetadata()) {      String replicas="";      String isr="";      for (      kafka.cluster.Broker replica : part.replicas()) {        replicas+=" " + replica.host();      }      for (      kafka.cluster.Broker replica : part.isr()) {        isr+=" " + replica.host();      }      String leader="";      if (part.leader() != null) {        if (part.leader().host() != null)         leader=part.leader().host();      }      System.out.println("    Partition: " + part.partitionId() + ": Leader: "+ leader+ " Replicas:["+ replicas+ "] ISR:["+ isr+ "]");    }  }}  }
class C{  private Cancelable doLoad(ImageView view,String url,ImageOptions options,Callback.CommonCallback<Drawable> callback){  this.viewRef=new WeakReference<ImageView>(view);  this.options=options;  this.key=new MemCacheKey(url,options);  this.callback=callback;  if (callback instanceof Callback.ProgressCallback) {    this.progressCallback=(Callback.ProgressCallback<Drawable>)callback;  }  if (callback instanceof Callback.PrepareCallback) {    this.prepareCallback=(Callback.PrepareCallback<File,Drawable>)callback;  }  if (callback instanceof Callback.CacheCallback) {    this.cacheCallback=(Callback.CacheCallback<Drawable>)callback;  }  Drawable loadingDrawable=null;  if (options.isForceLoadingDrawable()) {    loadingDrawable=options.getLoadingDrawable(view);    view.setScaleType(options.getPlaceholderScaleType());    view.setImageDrawable(new AsyncDrawable(this,loadingDrawable));  } else {    loadingDrawable=view.getDrawable();    view.setImageDrawable(new AsyncDrawable(this,loadingDrawable));  }  RequestParams params=createRequestParams(url,options);  if (view instanceof FakeImageView) {synchronized (FAKE_IMG_MAP) {      FAKE_IMG_MAP.put(url,(FakeImageView)view);    }  }  return cancelable=x.http().get(params,this);}  }
class C{  public boolean isWithin(final Vector point){  if (circlePlane == null)   return false;  if (!circlePlane.isWithin(point))   return false;  for (  final Membership m : cutoffPlanes) {    if (!m.isWithin(point)) {      return false;    }  }  return true;}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  public void decrementVariant(ProductVariant variant){  for (  CartLineItem lineItem : lineItems) {    if (lineItem.getVariantId().equals(variant.getId()) && lineItem.getQuantity() > 0) {      lineItem.setQuantity(lineItem.getQuantity() - 1);      if (lineItem.getQuantity() == 0) {        lineItems.remove(lineItem);        productVariants.remove(variant);      }      return;    }  }}  }
class C{  public long readUnsignedLongToLong(){  long result=readLong();  if (result < 0) {    throw new IllegalStateException("Top bit not zero: " + result);  }  return result;}  }
class C{  protected void text(Element elem) throws IOException, BadLocationException {  String contentStr=getText(elem);  if ((contentStr.length() > 0) && (contentStr.charAt(contentStr.length() - 1) == NEWLINE)) {    contentStr=contentStr.substring(0,contentStr.length() - 1);  }  if (contentStr.length() > 0) {    write(contentStr);  }}  }
class C{  @Override public void run(){  if ((r.getOutputScriptName() != null) && (!r.getOutputScriptName().equals(""))) {    JmriScriptEngineManager.getDefault().runScript(new File(jmri.util.FileUtil.getExternalFilename(r.getOutputScriptName())));  }  if ((r.getOutputSoundName() != null) && (!r.getOutputSoundName().equals(""))) {    try {      (new Sound(r.getOutputSoundName())).play();    } catch (    NullPointerException ex) {      log.error("Cannot find file {}",r.getOutputSoundName());    }  }  for (int k=0; k < r.getNumOutputSensors(); k++) {    Sensor t=r.getOutputSensor(k);    int state=r.getOutputSensorState(k);    if (state == Route.TOGGLE) {      int st=t.getKnownState();      if (st == Sensor.ACTIVE) {        state=Sensor.INACTIVE;      } else {        state=Sensor.ACTIVE;      }    }    try {      t.setKnownState(state);    } catch (    JmriException e) {      log.warn("Exception setting sensor {} in route",t.getSystemName());    }    try {      Thread.sleep(50);    } catch (    InterruptedException e) {      Thread.currentThread().interrupt();    }  }  int delay=r.getRouteCommandDelay();  for (int k=0; k < r.getNumOutputTurnouts(); k++) {    Turnout t=r.getOutputTurnout(k);    int state=r.getOutputTurnoutState(k);    if (state == Route.TOGGLE) {      int st=t.getKnownState();      if (st == Turnout.CLOSED) {        state=Turnout.THROWN;      } else {        state=Turnout.CLOSED;      }    }    t.setCommandedState(state);    try {      Thread.sleep(250 + delay);    } catch (    InterruptedException e) {      Thread.currentThread().interrupt();    }  }  r.setRouteBusy(false);}  }
class C{  public static Address fromIntSignExtend(int address){  return new Address(ArchitecturalWord.fromIntSignExtend(address));}  }
class C{  public void monitorEnter(){  mv.visitInsn(Opcodes.MONITORENTER);}  }
class C{  public synchronized int countObservers(){  return obs.size();}  }
class C{  protected final void transitionTo(IState destState){  mSmHandler.transitionTo(destState);}  }
class C{  public static boolean isLowSurrogate(int c){  return (0xDC00 <= c && c <= 0xDFFF);}  }
class C{  public static byte[] reverseDwordBytes(byte[] bytes,int trimLength){  checkArgument(bytes.length % 4 == 0);  checkArgument(trimLength < 0 || trimLength % 4 == 0);  byte[] rev=new byte[trimLength >= 0 && bytes.length > trimLength ? trimLength : bytes.length];  for (int i=0; i < rev.length; i+=4) {    System.arraycopy(bytes,i,rev,i,4);    for (int j=0; j < 4; j++) {      rev[i + j]=bytes[i + 3 - j];    }  }  return rev;}  }
class C{  public Object monitor(Object object,Class iface){  return monitor(object,new Class[]{iface});}  }
class C{  public MetadataAllowedMethods(){  requestFileName="getstate.query";  responseFile="getstate.answer";}  }
class C{  public void visit(String name,Object value){  if (av != null) {    av.visit(name,value);  }}  }
class C{  public BlackVarianceTermStructure(final Date referenceDate){  this(referenceDate,new Calendar(),BusinessDayConvention.Following,new DayCounter());}  }
class C{  private boolean hasNodesInContext(SiteNode node){  @SuppressWarnings("unchecked") Enumeration<SiteNode> en=node.children();  while (en.hasMoreElements()) {    SiteNode sn=en.nextElement();    if (isInContext(sn)) {      return true;    }    if (hasNodesInContext(sn)) {      return true;    }  }  return false;}  }
class C{  public void removeUser(String username){  Jetty9YaCySecurityHandler hx=this.server.getChildHandlerByClass(Jetty9YaCySecurityHandler.class);  if (hx != null) {    YaCyLoginService loginservice=(YaCyLoginService)hx.getLoginService();    loginservice.removeUser(username);  }}  }
class C{  @Override public void putAll(Map<? extends Integer,? extends V> map){  Iterator<? extends Entry<? extends Integer,? extends V>> it=map.entrySet().iterator();  for (int i=map.size(); i-- > 0; ) {    Entry<? extends Integer,? extends V> e=it.next();    this.put(e.getKey(),e.getValue());  }}  }
class C{  protected int drawEvent(Canvas canvas,Event event,int x,int y,int rightEdge,boolean moreEvents,boolean showTimes,boolean doDraw){  final int BORDER_SPACE=EVENT_SQUARE_BORDER + 1;  final int STROKE_WIDTH_ADJ=EVENT_SQUARE_BORDER / 2;  boolean allDay=event.allDay;  int eventRequiredSpace=mEventHeight;  if (allDay) {    eventRequiredSpace+=BORDER_SPACE * 2;  } else   if (showTimes) {    eventRequiredSpace+=mExtrasHeight;  }  int reservedSpace=EVENT_BOTTOM_PADDING;  if (moreEvents) {    eventRequiredSpace+=EVENT_LINE_PADDING;    reservedSpace+=mExtrasHeight;  }  if (y + eventRequiredSpace + reservedSpace > mHeight) {    return y;  } else   if (!doDraw) {    return y + eventRequiredSpace;  }  boolean isDeclined=event.selfAttendeeStatus == Attendees.ATTENDEE_STATUS_DECLINED;  int color=event.color;  if (isDeclined) {    color=Utils.getDeclinedColorFromColor(color);  }  int textX, textY, textRightEdge;  if (allDay) {    r.left=x;    r.right=rightEdge - STROKE_WIDTH_ADJ;    r.top=y + STROKE_WIDTH_ADJ;    r.bottom=y + mEventHeight + BORDER_SPACE * 2 - STROKE_WIDTH_ADJ;    textX=x + BORDER_SPACE;    textY=y + mEventAscentHeight + BORDER_SPACE;    textRightEdge=rightEdge - BORDER_SPACE;  } else {    r.left=x;    r.right=x + EVENT_SQUARE_WIDTH;    r.bottom=y + mEventAscentHeight;    r.top=r.bottom - EVENT_SQUARE_HEIGHT;    textX=x + EVENT_SQUARE_WIDTH + EVENT_RIGHT_PADDING;    textY=y + mEventAscentHeight;    textRightEdge=rightEdge;  }  Style boxStyle=Style.STROKE;  boolean solidBackground=false;  if (event.selfAttendeeStatus != Attendees.ATTENDEE_STATUS_INVITED) {    boxStyle=Style.FILL_AND_STROKE;    if (allDay) {      solidBackground=true;    }  }  mEventSquarePaint.setStyle(boxStyle);  mEventSquarePaint.setColor(color);  canvas.drawRect(r,mEventSquarePaint);  float avail=textRightEdge - textX;  CharSequence text=TextUtils.ellipsize(event.title,mEventPaint,avail,TextUtils.TruncateAt.END);  Paint textPaint;  if (solidBackground) {    textPaint=mSolidBackgroundEventPaint;  } else   if (isDeclined) {    textPaint=mDeclinedEventPaint;  } else   if (allDay) {    mFramedEventPaint.setColor(color);    textPaint=mFramedEventPaint;  } else {    textPaint=mEventPaint;  }  canvas.drawText(text.toString(),textX,textY,textPaint);  y+=mEventHeight;  if (allDay) {    y+=BORDER_SPACE * 2;  }  if (showTimes && !allDay) {    textY=y + mExtrasAscentHeight;    mStringBuilder.setLength(0);    text=DateUtils.formatDateRange(getContext(),mFormatter,event.startMillis,event.endMillis,DateUtils.FORMAT_SHOW_TIME | DateUtils.FORMAT_ABBREV_ALL,Utils.getTimeZone(getContext(),null)).toString();    text=TextUtils.ellipsize(text,mEventExtrasPaint,avail,TextUtils.TruncateAt.END);    canvas.drawText(text.toString(),textX,textY,isDeclined ? mEventDeclinedExtrasPaint : mEventExtrasPaint);    y+=mExtrasHeight;  }  y+=EVENT_LINE_PADDING;  return y;}  }
class C{  public MultivariateTable(CategoricalTable headTable){  this.headVars=new HashSet<String>(Arrays.asList(headTable.getVariable()));  this.table=new HashMap<Assignment,Double>();  String variable=headTable.getVariable();  for (  Value a : headTable.getValues()) {    double prob=headTable.getProb(a);    table.put(new Assignment(variable,a),prob);  }}  }
class C{  @Override protected void register(DeployerFactory deployerFactory){  deployerFactory.registerDeployer("jo1x",DeployerType.INSTALLED,Jo1xInstalledLocalDeployer.class);}  }
class C{  public JsonObject add(String name,double value){  add(name,valueOf(value));  return this;}  }
class C{  public void stopEditing(boolean updateCellLabel){  for (  Entry<GridField,WEditor> entry : editors.entrySet()) {    if (entry.getValue().getComponent().getParent() != null) {      if (updateCellLabel) {        Listcell cell=(Listcell)entry.getValue().getComponent().getParent();        if (entry.getKey().getDisplayType() == DisplayType.YesNo) {          cell.setLabel("");          createReadonlyCheckbox(entry.getValue().getValue(),cell);        } else {          cell.setLabel(getDisplayText(entry.getValue().getValue(),getColumnIndex(entry.getKey())));        }      }      entry.getValue().getComponent().detach();      entry.getKey().removePropertyChangeListener(entry.getValue());      entry.getValue().removeValuechangeListener(dataBinder);    }  }}  }
class C{  protected void processHttpUploadResponse(byte[] response) throws PayloadException, NetworkException {  if (mUploadManager.isCancelled()) {    return;  }  FileTransferHttpInfoDocument infoDocument;  if (response == null || (infoDocument=FileTransferUtils.parseFileTransferHttpDocument(response,mRcsSettings)) == null) {    handleError(new FileSharingError(FileSharingError.MEDIA_UPLOAD_FAILED));    return;  }  mMessagingLog.setFileTransferDownloadInfo(getFileTransferId(),infoDocument);  removeSession();  handleHttpDownloadInfoAvailable();}  }
class C{  public void deleteRange(IgfsFileAffinityRange range){  if (ranges == null)   throw new IgfsInvalidRangeException("Failed to remove range (file map is empty) " + "[range=" + range + ", ranges=null]");  assert !ranges.isEmpty();  try {    int lastIdx=ranges.size() - 1;    IgfsFileAffinityRange last=ranges.get(lastIdx);    if (last.regionEqual(range)) {      assert last.status() == RANGE_STATUS_MOVED;      ranges.remove(last);      return;    }    int firstIdx=0;    IgfsFileAffinityRange first=ranges.get(firstIdx);    if (first.regionEqual(range)) {      assert first.status() == RANGE_STATUS_MOVED;      ranges.remove(first);      return;    }    while (lastIdx - firstIdx > 1) {      int midIdx=(firstIdx + lastIdx) / 2;      IgfsFileAffinityRange midRange=ranges.get(midIdx);      if (midRange.regionEqual(range)) {        assert midRange.status() == RANGE_STATUS_MOVED;        ranges.remove(midIdx);        return;      }      if (midRange.less(range.startOffset()))       lastIdx=midIdx; else {        assert midRange.greater(range.startOffset());        firstIdx=midIdx;      }    }  }  finally {    if (ranges.isEmpty())     ranges=null;  }  throw new IgfsInvalidRangeException("Failed to remove range from file map (corresponding map range " + "was not found) [range=" + range + ", ranges="+ ranges+ ']');}  }
class C{  public static double toDoubleValue(Object o,boolean alsoFromDate,double defaultValue){  if (o instanceof Number)   return ((Number)o).doubleValue(); else   if (o instanceof Boolean)   return ((Boolean)o).booleanValue() ? 1 : 0; else   if (o instanceof CharSequence)   return toDoubleValue(o.toString(),alsoFromDate,defaultValue); else   if (o instanceof Castable) {    return ((Castable)o).castToDoubleValue(defaultValue);  } else   if (o instanceof ObjectWrap)   return toDoubleValue(((ObjectWrap)o).getEmbededObject(new Double(defaultValue)),true,defaultValue); else   if (o instanceof Date)   return DateTimeUtil.getInstance().toDoubleValue(((Date)o).getTime()); else   if (o instanceof Calendar)   return DateTimeUtil.getInstance().toDoubleValue(((Calendar)o).getTimeInMillis()); else   if (o instanceof Character)   return toDoubleValue(o.toString(),alsoFromDate,defaultValue);  return defaultValue;}  }
class C{  public static InputNode read(InputStream source) throws Exception {  return read(PROVIDER.provide(source));}  }
class C{  public boolean isGreaterThan(Coin other){  return compareTo(other) > 0;}  }
class C{  public ToStringBuilder append(String fieldName,long[] array){  style.append(buffer,fieldName,array,null);  return this;}  }
class C{  public boolean isHidden(){  return false;}  }
class C{  public void futureError(long futPtr,long memPtr){  enter();  try {    PlatformCallbackUtils.futureError(envPtr,futPtr,memPtr);  }  finally {    leave();  }}  }
class C{  public ComputeJobFailoverException(Throwable cause){  this(cause.getMessage(),cause);}  }
class C{  public static void main(String[] args) throws AdeException {  final AdeExtRequestType requestType=AdeExtRequestType.UTILITIES;  System.err.println("Running Ade: " + requestType);  final AdeExtMessageHandler messageHandler=new AdeExtMessageHandler();  final AdeUtilMain adeutilmain=new AdeUtilMain();  try {    adeutilmain.run(args);  } catch (  AdeUsageException e) {    messageHandler.handleUserException(e);  }catch (  AdeInternalException e) {    messageHandler.handleAdeInternalException(e);  }catch (  AdeException e) {    messageHandler.handleAdeException(e);  }catch (  Throwable e) {    messageHandler.handleUnexpectedException(e);  } finally {    adeutilmain.quietCleanup();  }}  }
class C{  public static int max(final int one,final int two){  if (one > two) {    return one;  }  return two;}  }
class C{  public void savePreferences(){  ApplicationPreferences.getPreferences().flush();}  }
class C{  public static MethodIdentifier ofNonStatic(final String containingClass,final String methodName,final String returnType,final String... parameterTypes){  return of(containingClass,methodName,returnType,false,parameterTypes);}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return new XNumber(getArg0AsNumber(xctxt));}  }
class C{  private Object unwrap(Object o){  return coCtx == null ? o : o instanceof CacheObject ? ((CacheObject)o).value(coCtx,false) : o;}  }
class C{  @SideEffectFree protected final Object clone() throws CloneNotSupportedException {  throw new CloneNotSupportedException();}  }
class C{  public void stopClock(){  if (timer.isRunning()) {    firePropertyChange(TIMER_STATUS,(getClockDirection() > 0 ? TimerStatus.FORWARD : TimerStatus.BACKWARD),TimerStatus.STOPPED);    fireClockUpdate(TimerStatus.STOPPED);    timer.stop();  }}  }
class C{  @Override protected File fromString(String s){  return new File(s);}  }
class C{  @Override public boolean onTouchEvent(MotionEvent event){  if (mIsEnabled) {    return mGestureDetector.onTouchEvent(event);  }  return false;}  }
class C{  public Object clone(){  try {    return super.clone();  } catch (  CloneNotSupportedException e) {    throw new Error();  }}  }
class C{  private int addToPopulation(Solution solution){  int id=nextFreeId();  solutions.put(id,solution);  return id;}  }
class C{  public static TypeVariableMapping createTypeVariableMapping(TypeVariable typeVar,TypeArgument typeArg){  final TypeVariableMapping result=TypeRefsFactory.eINSTANCE.createTypeVariableMapping();  result.setTypeVar(typeVar);  result.setTypeArg(TypeUtils.copyIfContained(typeArg));  return result;}  }
class C{  public final BufferedImage loadStoredImage(String current_image){  if (current_image == null) {    return null;  }  current_image=removeIllegalFileNameCharacters(current_image);  final String flag=image_type.get(current_image);  BufferedImage image=null;  if (flag == null) {    return null;  } else   if (flag.equals("tif")) {    image=loadStoredImage(current_image,".tif");  } else   if (flag.equals("jpg")) {    image=loadStoredJPEGImage(current_image);  } else   if (flag.equals("png")) {    image=loadStoredImage(current_image,".png");  } else   if (flag.equals("jpl")) {    image=loadStoredImage(current_image,".jpl");  }  return image;}  }
class C{  public void testChatLogMessageQuery(){  Cursor cursor=null;  try {    String where=ChatLog.Message.CHAT_ID.concat("=?");    String[] whereArgs=new String[]{"123456789"};    cursor=mProvider.query(ChatLog.Message.CONTENT_URI,CHAT_LOG_MESSAGE_PROJECTION,where,whereArgs,null);    assertNotNull(cursor);  } catch (  Exception e) {    fail("query of ChatLog.Message failed " + e.getMessage());  } finally {    if (cursor != null) {      cursor.close();    }  }}  }
class C{  public static void main(String[] args){  NetworkPanel np=new NetworkPanel(new Network());  JFrame frame=new JFrame();  ConnectionPanel cp=createConnectionPanel(frame,np);  frame.setContentPane(cp.mainPanel);  cp.mainPanel.setVisible(true);  frame.setVisible(true);  frame.pack();}  }
class C{  public boolean onTouchEvent(MotionEvent ev){  boolean hasChildren=(mDeckView.getChildCount() > 0);  if (!hasChildren) {    return false;  }  if (mInterceptedBySwipeHelper && mSwipeHelper.onTouchEvent(ev)) {    return true;  }  initVelocityTrackerIfNotExists();  int action=ev.getAction();switch (action & MotionEvent.ACTION_MASK) {case MotionEvent.ACTION_DOWN:{      mInitialMotionX=mLastMotionX=(int)ev.getX();      mInitialMotionY=mLastMotionY=(int)ev.getY();      mInitialP=mLastP=mDeckView.getStackAlgorithm().screenYToCurveProgress(mLastMotionY);      mActivePointerId=ev.getPointerId(0);      mActiveDeckChildView=findViewAtPoint(mLastMotionX,mLastMotionY);      mScroller.stopScroller();      mScroller.stopBoundScrollAnimation();      initOrResetVelocityTracker();      mVelocityTracker.addMovement(createMotionEventForStackScroll(ev));      final ViewParent parent=mDeckView.getParent();      if (parent != null) {        parent.requestDisallowInterceptTouchEvent(true);      }      break;    }case MotionEvent.ACTION_POINTER_DOWN:{    final int index=ev.getActionIndex();    mActivePointerId=ev.getPointerId(index);    mLastMotionX=(int)ev.getX(index);    mLastMotionY=(int)ev.getY(index);    mLastP=mDeckView.getStackAlgorithm().screenYToCurveProgress(mLastMotionY);    break;  }case MotionEvent.ACTION_MOVE:{  if (mActivePointerId == INACTIVE_POINTER_ID)   break;  mVelocityTracker.addMovement(createMotionEventForStackScroll(ev));  int activePointerIndex=ev.findPointerIndex(mActivePointerId);  int x=(int)ev.getX(activePointerIndex);  int y=(int)ev.getY(activePointerIndex);  int yTotal=Math.abs(y - mInitialMotionY);  float curP=mDeckView.getStackAlgorithm().screenYToCurveProgress(y);  float deltaP=mLastP - curP;  if (!mIsScrolling) {    if (yTotal > mScrollTouchSlop) {      mIsScrolling=true;      final ViewParent parent=mDeckView.getParent();      if (parent != null) {        parent.requestDisallowInterceptTouchEvent(true);      }    }  }  if (mIsScrolling) {    float curStackScroll=mScroller.getStackScroll();    float overScrollAmount=mScroller.getScrollAmountOutOfBounds(curStackScroll + deltaP);    if (Float.compare(overScrollAmount,0f) != 0) {      float maxOverScroll=mConfig.taskStackOverscrollPct;      deltaP*=(1f - (Math.min(maxOverScroll,overScrollAmount) / maxOverScroll));    }    mScroller.setStackScroll(curStackScroll + deltaP);  }  mLastMotionX=x;  mLastMotionY=y;  mLastP=mDeckView.getStackAlgorithm().screenYToCurveProgress(mLastMotionY);  mTotalPMotion+=Math.abs(deltaP);  break;}case MotionEvent.ACTION_UP:{mVelocityTracker.computeCurrentVelocity(1000,mMaximumVelocity);int velocity=(int)mVelocityTracker.getYVelocity(mActivePointerId);if (mIsScrolling && (Math.abs(velocity) > mMinimumVelocity)) {  float overscrollRangePct=Math.abs((float)velocity / mMaximumVelocity);  int overscrollRange=(int)(Math.min(1f,overscrollRangePct) * (DVConstants.Values.DView.TaskStackMaxOverscrollRange - DVConstants.Values.DView.TaskStackMinOverscrollRange));  mScroller.mScroller.fling(0,mScroller.progressToScrollRange(mScroller.getStackScroll()),0,velocity,0,0,mScroller.progressToScrollRange(mDeckView.getStackAlgorithm().mMinScrollP),mScroller.progressToScrollRange(mDeckView.getStackAlgorithm().mMaxScrollP),0,DVConstants.Values.DView.TaskStackMinOverscrollRange + overscrollRange);  mDeckView.invalidate();} else if (mScroller.isScrollOutOfBounds()) {  mScroller.animateBoundScroll();}mActivePointerId=INACTIVE_POINTER_ID;mIsScrolling=false;mTotalPMotion=0;recycleVelocityTracker();break;}case MotionEvent.ACTION_POINTER_UP:{int pointerIndex=ev.getActionIndex();int pointerId=ev.getPointerId(pointerIndex);if (pointerId == mActivePointerId) {final int newPointerIndex=(pointerIndex == 0) ? 1 : 0;mActivePointerId=ev.getPointerId(newPointerIndex);mLastMotionX=(int)ev.getX(newPointerIndex);mLastMotionY=(int)ev.getY(newPointerIndex);mLastP=mDeckView.getStackAlgorithm().screenYToCurveProgress(mLastMotionY);mVelocityTracker.clear();}break;}case MotionEvent.ACTION_CANCEL:{if (mScroller.isScrollOutOfBounds()) {mScroller.animateBoundScroll();}mActivePointerId=INACTIVE_POINTER_ID;mIsScrolling=false;mTotalPMotion=0;recycleVelocityTracker();break;}}return true;}  }
class C{  public boolean hasCurrencyCode(){  return getCurrencyCode() != null;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile=args[0];  if (inputFile.toLowerCase().contains(".dep")) {    calculateRaster();  } else   if (inputFile.toLowerCase().contains(".shp")) {    calculateVector();  } else {    showFeedback("There was a problem reading the input file.");  }}  }
class C{  public NegativeArraySizeException(java.lang.String s){  super(s);}  }
class C{  public synchronized void childChanged(ChildState cs){  if (lastValidOffset == null) {    lastValidOffset=cs;  } else   if (cs.getChildView().getStartOffset() < lastValidOffset.getChildView().getStartOffset()) {    lastValidOffset=cs;  }}  }
class C{  void addDelta(TableKelp db,int offset,int length){  if (_delta == null) {    _delta=new int[2 * db.getDeltaMax()];  }  _delta[_deltaTail++]=offset;  _delta[_deltaTail++]=length;}  }
class C{  @SuppressWarnings("unchecked") private List<List<GroupAttribute>> searchAuthProvider(Filter queryBuilder,String[] returnAttributes,final long countLimit,AttributesMapper mapper,ValidationFailureReason[] failureReason) throws SizeLimitExceededException {  SearchControls groupSearchControls=new SearchControls(SearchControls.SUBTREE_SCOPE,countLimit,_searchControls.getTimeLimit(),returnAttributes,_searchControls.getReturningObjFlag(),_searchControls.getDerefLinkFlag());  List<List<GroupAttribute>> queryGroupResults=null;  queryGroupResults=safeLdapSearch(_baseDN,queryBuilder.encode(),groupSearchControls,mapper,failureReason);  return queryGroupResults;}  }
class C{  @Override public VersionListing listVersions(ListVersionsRequest listVersionsRequest,AmazonS3Client s3Client){  LOGGER.debug("listVersions(): listVersionsRequest.getBucketName() = " + listVersionsRequest.getBucketName());  String bucketName=listVersionsRequest.getBucketName();  if (MOCK_S3_BUCKET_NAME_NO_SUCH_BUCKET_EXCEPTION.equals(bucketName)) {    AmazonS3Exception amazonS3Exception=new AmazonS3Exception(MOCK_S3_BUCKET_NAME_NO_SUCH_BUCKET_EXCEPTION);    amazonS3Exception.setErrorCode("NoSuchBucket");    throw amazonS3Exception;  }  VersionListing versionListing=new VersionListing();  versionListing.setBucketName(bucketName);  MockS3Bucket mockS3Bucket=mockS3Buckets.get(bucketName);  if (mockS3Bucket != null) {    for (    MockS3Object mockS3Object : mockS3Bucket.getVersions().values()) {      String s3ObjectKey=mockS3Object.getKey();      if (listVersionsRequest.getPrefix() == null || s3ObjectKey.startsWith(listVersionsRequest.getPrefix())) {        S3VersionSummary s3VersionSummary=new S3VersionSummary();        s3VersionSummary.setBucketName(bucketName);        s3VersionSummary.setKey(s3ObjectKey);        s3VersionSummary.setVersionId(mockS3Object.getVersion());        s3VersionSummary.setSize(mockS3Object.getData().length);        s3VersionSummary.setStorageClass(mockS3Object.getObjectMetadata() != null ? mockS3Object.getObjectMetadata().getStorageClass() : null);        versionListing.getVersionSummaries().add(s3VersionSummary);      }    }  }  return versionListing;}  }
class C{  public ReaderAccessibleInfo(BigIntArray edges,IntToIntPairHashMap nodeInfo){  this.edges=edges;  this.nodeInfo=nodeInfo;}  }
class C{  public void printTimeMemory(String s,long time){  println(getMemoryUsed() + " MB: " + s+ " ms: "+ time);}  }
class C{  public final boolean edgeExplicitlyRequired(String var1,String var2){  return this.requiredEdges.contains(new KnowledgeEdge(var1,var2));}  }
class C{  public OutlierResult run(Relation<V> relation){  final int dim=RelationUtil.dimensionality(relation);  final ArrayDBIDs ids=DBIDUtil.ensureArray(relation.getDBIDs());  svm.svm_set_print_string_function(LOG_HELPER);  svm_parameter param=new svm_parameter();  param.svm_type=svm_parameter.ONE_CLASS;  param.kernel_type=svm_parameter.LINEAR;  param.degree=3;switch (kernel) {case LINEAR:    param.kernel_type=svm_parameter.LINEAR;  break;case QUADRATIC:param.kernel_type=svm_parameter.POLY;param.degree=2;break;case CUBIC:param.kernel_type=svm_parameter.POLY;param.degree=3;break;case RBF:param.kernel_type=svm_parameter.RBF;break;case SIGMOID:param.kernel_type=svm_parameter.SIGMOID;break;default :throw new AbortException("Invalid kernel parameter: " + kernel);}param.nu=0.05;param.coef0=0.;param.cache_size=100;param.C=1e2;param.eps=1e-4;param.p=0.1;param.shrinking=0;param.probability=0;param.nr_weight=0;param.weight_label=new int[0];param.weight=new double[0];param.gamma=1e-4 / dim;svm_problem prob=new svm_problem();prob.l=relation.size();prob.x=new svm_node[prob.l][];prob.y=new double[prob.l];{DBIDIter iter=ids.iter();for (int i=0; i < prob.l && iter.valid(); iter.advance(), i++) {V vec=relation.get(iter);svm_node[] x=new svm_node[dim];for (int d=0; d < dim; d++) {x[d]=new svm_node();x[d].index=d + 1;x[d].value=vec.doubleValue(d);}prob.x[i]=x;prob.y[i]=+1;}}if (LOG.isVerbose()) {LOG.verbose("Training one-class SVM...");}String err=svm.svm_check_parameter(prob,param);if (err != null) {LOG.warning("svm_check_parameter: " + err);}svm_model model=svm.svm_train(prob,param);if (LOG.isVerbose()) {LOG.verbose("Predicting...");}WritableDoubleDataStore scores=DataStoreUtil.makeDoubleStorage(relation.getDBIDs(),DataStoreFactory.HINT_DB);DoubleMinMax mm=new DoubleMinMax();{DBIDIter iter=ids.iter();double[] buf=new double[svm.svm_get_nr_class(model)];for (int i=0; i < prob.l && iter.valid(); iter.advance(), i++) {V vec=relation.get(iter);svm_node[] x=new svm_node[dim];for (int d=0; d < dim; d++) {x[d]=new svm_node();x[d].index=d + 1;x[d].value=vec.doubleValue(d);}svm.svm_predict_values(model,x,buf);double score=-buf[0] / param.gamma;scores.putDouble(iter,score);mm.put(score);}}DoubleRelation scoreResult=new MaterializedDoubleRelation("One-Class SVM Decision","svm-outlier",scores,ids);OutlierScoreMeta scoreMeta=new BasicOutlierScoreMeta(mm.getMin(),mm.getMax(),Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY,0.);return new OutlierResult(scoreMeta,scoreResult);}  }
class C{  public static mat4 createRotate(float x,float y,float z){  mat4 result=new mat4();  mat4_util_load_rotate(result.m,x,y,z);  return result;}  }
class C{  public static Object invoke(Object obj,String methodName,float newValue) throws NoSuchMethodException {  try {    Method method=obj.getClass().getMethod(methodName,new Class[]{Float.TYPE});    return method.invoke(obj,new Object[]{new Float(newValue)});  } catch (  IllegalAccessException e) {    throw new NoSuchMethodException(methodName + " is not accessible");  }catch (  InvocationTargetException e) {    throw new InternalError(e.getMessage());  }}  }
class C{  public DuplicateResourceAwareFileSetupContext(final FileSetupContext context){  super(context.getState(),context.getXpectFile());  this.context=context;}  }
class C{  public void writeLong(long v) throws IOException {  final byte[] buffer=writeBuffer;  buffer[0]=(byte)(v >>> 56);  buffer[1]=(byte)(v >>> 48);  buffer[2]=(byte)(v >>> 40);  buffer[3]=(byte)(v >>> 32);  buffer[4]=(byte)(v >>> 24);  buffer[5]=(byte)(v >>> 16);  buffer[6]=(byte)(v >>> 8);  buffer[7]=(byte)v;  out.write(buffer,0,8);}  }
class C{  public static Aggregator fromString(String name){  if (name != null && !name.isEmpty()) {    for (    Aggregator aggregator : Aggregator.values()) {      if (name.equalsIgnoreCase(aggregator.name())) {        return aggregator;      }    }  }  return null;}  }
class C{  public static void flushFromCaches(Class<?> clazz){  if (clazz == null) {    throw new NullPointerException();  }  theCache.remove(clazz);}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == Expression.class) {switch (baseOperationID) {case N4JSPackage.EXPRESSION___IS_VALID_SIMPLE_ASSIGNMENT_TARGET:      return N4JSPackage.PAREN_EXPRESSION___IS_VALID_SIMPLE_ASSIGNMENT_TARGET;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  private void initialize(@NonNull final Context context,@StyleRes final int themeResourceId){  TypedValue typedValue=new TypedValue();  context.getTheme().resolveAttribute(R.attr.bottomSheetTheme,typedValue,true);  int themeId=typedValue.resourceId;  themeId=themeId != 0 ? themeId : R.style.BottomSheet_Light;  bottomSheet=new BottomSheet(context,themeId);  bottomSheet.requestWindowFeature(Window.FEATURE_NO_TITLE);  bottomSheet.setCanceledOnTouchOutside(true);  bottomSheet.setCancelable(true);  bottomSheet.setContentView(createContentView(),new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT));  obtainStyledAttributes(themeId);}  }
class C{  public void startDecoding(){  decoderState=DECODER_OK;  decoderBufferAmount=0;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:27.436 -0500",hash_original_method="57D47F2F9FCDF87C613C3BEA50BCDEDC",hash_generated_method="DDFD1156A672B3D06EE42F0698E0914D") public boolean isSecure(){  return true;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.PROPERTY_GETTER_DECLARATION__ANNOTATION_LIST:    return basicSetAnnotationList(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  SolrInputField field(String name,float boost,Object... values){  SolrInputField f=new SolrInputField(name);  for (  Object v : values) {    f.addValue(v,1.0F);  }  f.setBoost(boost);  return f;}  }
class C{  public static void copyStream(java.io.InputStream inputStream,java.io.OutputStream outputStream,int bufferSize) throws IOException {  try {    byte[] writeBuffer=new byte[bufferSize];    for (int br=inputStream.read(writeBuffer); br != -1; br=inputStream.read(writeBuffer)) {      outputStream.write(writeBuffer,0,br);    }    outputStream.flush();  }  finally {    inputStream.close();  }}  }
class C{  private Shape createButtonPath(CornerSize size,int x,int y,int w,int h){  return shapeGenerator.createRoundRectangle(x,y,w,h,size,CornerStyle.SQUARE,CornerStyle.SQUARE,CornerStyle.ROUNDED,CornerStyle.ROUNDED);}  }
class C{  private void read(IgfsPath path,int off,int len) throws Exception {  IgfsInputStream is=igfsPrimary.open(path);  is.readFully(off,new byte[len]);  is.close();}  }
class C{  protected User(User user,boolean unused){  super(user);  userId=user.userId;}  }
class C{  public UTMCoordPanel(CenterSupport support){  super(support);}  }
class C{  public static final void decode(String base64Data,OutputStream os) throws Base64DecodingException, IOException {  byte[] bytes=new byte[base64Data.length()];  int len=getBytesInternal(base64Data,bytes);  decode(bytes,os,len);}  }
class C{  public void onMarkReferenced(RefElement refWhat,RefElement refFrom,boolean referencedFromClassInitializer,boolean forReading,boolean forWriting){  onMarkReferenced(refWhat,refFrom,referencedFromClassInitializer);}  }
class C{  public TwitterFactory(){  this(ConfigurationContext.getInstance());}  }
class C{  void process(TagDecoder d) throws IOException {  m_master=new ActionList(true);  d.setKeepOffsets(true);  d.parse(this);}  }
class C{  public int keyAt(int index){  return mKeys[index];}  }
class C{  private Rectangle2D[] splitVerticalBar(RectangularShape bar,double a,double b,double c){  Rectangle2D[] result=new Rectangle2D[4];  double x0=bar.getMinX();  double x1=Math.rint(x0 + (bar.getWidth() * a));  double x2=Math.rint(x0 + (bar.getWidth() * b));  double x3=Math.rint(x0 + (bar.getWidth() * c));  result[0]=new Rectangle2D.Double(bar.getMinX(),bar.getMinY(),x1 - x0,bar.getHeight());  result[1]=new Rectangle2D.Double(x1,bar.getMinY(),x2 - x1,bar.getHeight());  result[2]=new Rectangle2D.Double(x2,bar.getMinY(),x3 - x2,bar.getHeight());  result[3]=new Rectangle2D.Double(x3,bar.getMinY(),bar.getMaxX() - x3,bar.getHeight());  return result;}  }
class C{  public Epoch createEpoch(int timestamp,ServerViewController recManager){  epochsLock.lock();  Epoch epoch=new Epoch(recManager,this,timestamp);  epochs.put(timestamp,epoch);  epochsLock.unlock();  return epoch;}  }
class C{  public boolean failoverMirrorFilePair(URI storage,URI fileshareURI,String policyName,String opId){  TaskCompleter completer=null;  try {    StorageSystem system=dbClient.queryObject(StorageSystem.class,storage);    FileShare fileShare=dbClient.queryObject(FileShare.class,fileshareURI);    List<URI> combined=new ArrayList<URI>();    combined.add(fileshareURI);    if (fileShare.getParentFileShare() != null) {      combined.add(fileShare.getParentFileShare().getURI());    }    completer=new MirrorFileFailoverTaskCompleter(FileShare.class,combined,opId,storage);    WorkflowStepCompleter.stepExecuting(opId);    getRemoteMirrorDevice(system).doFailoverLink(system,fileShare,completer,policyName);  } catch (  Exception e) {    ServiceError error=DeviceControllerException.errors.jobFailed(e);    if (null != completer) {      completer.error(dbClient,error);    }    WorkflowStepCompleter.stepFailed(opId,error);    return false;  }  return true;}  }
class C{  @Override public void process(V tuple){  if ((low == null) || (low.doubleValue() > tuple.doubleValue())) {    low=tuple;  }  if ((high == null) || (high.doubleValue() < tuple.doubleValue())) {    high=tuple;  }}  }
class C{  public DefaultKeyedValues2D(boolean sortRowKeys){  this.rowKeys=new java.util.ArrayList();  this.columnKeys=new java.util.ArrayList();  this.rows=new java.util.ArrayList();  this.sortRowKeys=sortRowKeys;}  }
class C{  private void releaseCatalog(){  if (mCatalog != null) {    try {      mCatalog.delete();    } catch (    EchoNestException e) {      Log.e(TAG,"Unable to delete catalog",e);    }  }}  }
class C{  public static <T,A>ReaderTSeq<T,A> of(final AnyMSeq<Reader<T,A>> monads){  return new ReaderTSeq<>(monads);}  }
class C{  private void scale(final float[][] Trm){  if (Trm[0][0] != 1.0 || Trm[1][1] != 1.0 || Trm[0][1] != 0.0 || Trm[1][0] != 0.0) {    final int w=current_image.getWidth();    final int h=current_image.getHeight();    AffineTransform image_at=new AffineTransform(Trm[0][0],-Trm[0][1],-Trm[1][0],Trm[1][1],0,0);    final Area r=new Area(new Rectangle(0,0,w,h));    r.transform(image_at);    ny=r.getBounds2D().getY();    nx=r.getBounds2D().getX();    image_at=new AffineTransform(Trm[0][0],-Trm[0][1],-Trm[1][0],Trm[1][1],-nx,-ny);    final AffineTransformOp invert;    if ((w > 10) & (h > 10)) {      invert=new AffineTransformOp(image_at,ColorSpaces.hints);    } else {      invert=new AffineTransformOp(image_at,null);    }    if (scaleImage) {      if (h == 1 && Trm[0][0] == 0 && Trm[0][1] > 0 && Trm[1][0] < 0 && Trm[1][1] == 0) {        final BufferedImage newImage=new BufferedImage(h,w,BufferedImage.TYPE_INT_ARGB);        for (int i=0; i < w; i++) {          final int col=current_image.getRGB(i,0);          newImage.setRGB(0,(w - 1) - i,col);        }        current_image=newImage;      } else {        current_image=invert.filter(current_image,null);      }    }  }}  }
class C{  public void insert(final T object,int index){  mObjects.add(index,object);  notifyItemInserted(index);}  }
class C{  private void initializeLiveAttributes(){  x=createLiveAnimatedLength(null,SVG_X_ATTRIBUTE,SVG_FILTER_PRIMITIVE_X_DEFAULT_VALUE,SVGOMAnimatedLength.HORIZONTAL_LENGTH,false);  y=createLiveAnimatedLength(null,SVG_Y_ATTRIBUTE,SVG_FILTER_PRIMITIVE_Y_DEFAULT_VALUE,SVGOMAnimatedLength.VERTICAL_LENGTH,false);  width=createLiveAnimatedLength(null,SVG_WIDTH_ATTRIBUTE,SVG_FILTER_PRIMITIVE_WIDTH_DEFAULT_VALUE,SVGOMAnimatedLength.HORIZONTAL_LENGTH,true);  height=createLiveAnimatedLength(null,SVG_HEIGHT_ATTRIBUTE,SVG_FILTER_PRIMITIVE_HEIGHT_DEFAULT_VALUE,SVGOMAnimatedLength.VERTICAL_LENGTH,true);  result=createLiveAnimatedString(null,SVG_RESULT_ATTRIBUTE);}  }
class C{  protected CountDownLatch updateNodeStats(final ActionListener<NodesStatsResponse> listener){  final CountDownLatch latch=new CountDownLatch(1);  final NodesStatsRequest nodesStatsRequest=new NodesStatsRequest("data:true");  nodesStatsRequest.clear();  nodesStatsRequest.fs(true);  nodesStatsRequest.timeout(fetchTimeout);  transportNodesStatsAction.execute(nodesStatsRequest,new LatchedActionListener<>(listener,latch));  return latch;}  }
class C{  public ProtocolViolationException(){}  }
class C{  public NotificationChain basicSetHistoryStep(Step newHistoryStep,NotificationChain msgs){  Step oldHistoryStep=historyStep;  historyStep=newHistoryStep;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,SexecPackage.HISTORY_ENTRY__HISTORY_STEP,oldHistoryStep,newHistoryStep);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public void dispose(){  mListener=null;}  }
class C{  private void addToken(final List<String> list,String tok){  if (StringUtils.isEmpty(tok)) {    if (isIgnoreEmptyTokens()) {      return;    }    if (isEmptyTokenAsNull()) {      tok=null;    }  }  list.add(tok);}  }
class C{  public static long copy(InputStream input,OutputStream output,byte[] buffer) throws IOException {  long count=0;  int n=0;  while (-1 != (n=input.read(buffer))) {    output.write(buffer,0,n);    count+=n;  }  return count;}  }
class C{  private X509CRLImpl(){}  }
class C{  public static PlaceholderFragment newInstance(int sectionNumber){  PlaceholderFragment fragment=new PlaceholderFragment();  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  fragment.currentSection=sectionNumber;  return fragment;}  }
class C{  public void actionPerformed(ActionEvent e){  Object source=e.getSource();  String command=e.getActionCommand();  String interString;  Paint tmpPaint;  if (command == LineColorCommand && linePaint instanceof Color) {    interString=i18n.get(DrawingAttributes.class,"chooseLineColor","Choose Line Color");    tmpPaint=getNewPaint((Component)source,interString,(Color)linePaint);    if (tmpPaint != null) {      setLinePaint(tmpPaint);    }  } else   if (command == FillColorCommand && fillPaint instanceof Color) {    interString=i18n.get(DrawingAttributes.class,"chooseFillColor","Choose Fill Color");    tmpPaint=getNewPaint((Component)source,interString,(Color)fillPaint);    if (tmpPaint != null) {      setFillPaint(tmpPaint);    }  } else   if (command == SelectColorCommand && selectPaint instanceof Color) {    interString=i18n.get(DrawingAttributes.class,"chooseSelectColor","Choose Select Color");    tmpPaint=getNewPaint((Component)source,interString,(Color)selectPaint);    if (tmpPaint != null) {      setSelectPaint(tmpPaint);    }  } else   if (command == MattingColorCommand && mattingPaint instanceof Color) {    interString=i18n.get(DrawingAttributes.class,"chooseMattingColor","Choose Matting Color");    tmpPaint=getNewPaint((Component)source,interString,(Color)mattingPaint);    if (tmpPaint != null) {      setMattingPaint(tmpPaint);    }  } else   if (command == MattedCommand) {    setMatted(mattedEnabledItem.getState());  } else {    if (logger.isLoggable(Level.FINE)) {      logger.fine("unrecognized command > " + command);    }  }}  }
class C{  public String toString(){  String orig=super.toString();  if (unexecs != null) {    orig+=("First unexecuted modification: " + unexecs[0].toString());  }  return orig;}  }
class C{  public static void close(FileInputStream finStream){  if (null != finStream) {    try {      finStream.close();    } catch (    IOException e) {      LOGGER.warn(String.format(LOG_FORMAT,"file stream"));    }  }}  }
class C{  public void sort(){  if (left > right) {    int temp=left;    left=right;    right=temp;  }  if (top > bottom) {    int temp=top;    top=bottom;    bottom=temp;  }}  }
class C{  private HashtableEntry<K,V>[] makeTable(int newCapacity){  @SuppressWarnings("unchecked") HashtableEntry<K,V>[] newTable=(HashtableEntry<K,V>[])new HashtableEntry[newCapacity];  table=newTable;  threshold=(newCapacity >> 1) + (newCapacity >> 2);  return newTable;}  }
class C{  public void undo(){  if (--m_tempUndoIndex < 0) {    m_tempUndoIndex=m_tempUndoFiles.length - 1;  }  if (m_tempUndoFiles[m_tempUndoIndex] != null) {    AbstractFileLoader loader=ConverterUtils.getLoaderForFile(m_tempUndoFiles[m_tempUndoIndex]);    try {      loader.setFile(m_tempUndoFiles[m_tempUndoIndex]);      setInstancesFromFile(loader);    } catch (    Exception e) {      e.printStackTrace();      m_Log.logMessage(e.toString());      JOptionPane.showMessageDialog(PreprocessPanel.this,"Cannot perform undo operation!\n" + e.toString(),"Undo",JOptionPane.ERROR_MESSAGE);    }    m_tempUndoFiles[m_tempUndoIndex]=null;  }  int temp=m_tempUndoIndex - 1;  if (temp < 0) {    temp=m_tempUndoFiles.length - 1;  }  m_UndoBut.setEnabled(m_tempUndoFiles[temp] != null);}  }
class C{  public boolean isSuccessful(){  return code >= 200 && code < 300;}  }
class C{  public static final String longToHexString(long a){  StringBuffer sb=new StringBuffer(16);  for (int i=0; i < 16; i++)   sb.append(NIBBLE[(int)(a >>> (60 - 4 * i)) & 0xf]);  return sb.toString();}  }
class C{  static void errorUnexpectedElement(String systemID,int lineNr,String parentElementName,String unexpectedElementName) throws XMLValidationException {  throw new XMLValidationException(XMLValidationException.UNEXPECTED_ELEMENT,systemID,lineNr,unexpectedElementName,null,null,"Unexpected " + unexpectedElementName + " in a "+ parentElementName);}  }
class C{  private static Boolean findConvexPolygon(final PlanetModel planetModel,final Edge currentEdge,final GeoCompositePolygon rval,final EdgeBuffer edgeBuffer,final List<GeoPolygon> holes,final GeoPoint testPoint){  final Set<Edge> includedEdges=new HashSet<>();  includedEdges.add(currentEdge);  Edge firstEdge=currentEdge;  Edge lastEdge=currentEdge;  while (true) {    if (firstEdge.startPoint == lastEdge.endPoint) {      break;    }    final Edge newLastEdge=edgeBuffer.getNext(lastEdge);    if (isWithin(newLastEdge.endPoint,includedEdges)) {      final SidedPlane returnBoundary;      if (firstEdge.startPoint != newLastEdge.endPoint) {        returnBoundary=new SidedPlane(firstEdge.endPoint,firstEdge.startPoint,newLastEdge.endPoint);      } else {        returnBoundary=null;      }      boolean foundPointInside=false;      final Iterator<Edge> edgeIterator=edgeBuffer.iterator();      while (edgeIterator.hasNext()) {        final Edge edge=edgeIterator.next();        if (!includedEdges.contains(edge) && edge != newLastEdge) {          if (edge.startPoint != newLastEdge.endPoint) {            if (isWithin(edge.startPoint,includedEdges,newLastEdge,returnBoundary)) {              foundPointInside=true;              break;            }          }          if (edge.endPoint != firstEdge.startPoint) {            if (isWithin(edge.endPoint,includedEdges,newLastEdge,returnBoundary)) {              foundPointInside=true;              break;            }          }        }      }      if (!foundPointInside) {        includedEdges.add(newLastEdge);        lastEdge=newLastEdge;        continue;      }    }    break;  }  while (true) {    if (firstEdge.startPoint == lastEdge.endPoint) {      break;    }    final Edge newFirstEdge=edgeBuffer.getPrevious(firstEdge);    if (isWithin(newFirstEdge.startPoint,includedEdges)) {      final SidedPlane returnBoundary;      if (newFirstEdge.startPoint != lastEdge.endPoint) {        returnBoundary=new SidedPlane(lastEdge.startPoint,lastEdge.endPoint,newFirstEdge.startPoint);      } else {        returnBoundary=null;      }      boolean foundPointInside=false;      final Iterator<Edge> edgeIterator=edgeBuffer.iterator();      while (edgeIterator.hasNext()) {        final Edge edge=edgeIterator.next();        if (!includedEdges.contains(edge) && edge != newFirstEdge) {          if (edge.startPoint != lastEdge.endPoint) {            if (isWithin(edge.startPoint,includedEdges,newFirstEdge,returnBoundary)) {              foundPointInside=true;              break;            }          }          if (edge.endPoint != newFirstEdge.startPoint) {            if (isWithin(edge.endPoint,includedEdges,newFirstEdge,returnBoundary)) {              foundPointInside=true;              break;            }          }        }      }      if (!foundPointInside) {        includedEdges.add(newFirstEdge);        firstEdge=newFirstEdge;        continue;      }    }    break;  }  if (includedEdges.size() < 2) {    return false;  }  final List<GeoPoint> points=new ArrayList<GeoPoint>(includedEdges.size() + 1);  final BitSet internalEdges=new BitSet(includedEdges.size());  final boolean returnIsInternal;  if (firstEdge.startPoint == lastEdge.endPoint) {    if (includedEdges.size() < 3) {      return false;    }    Edge edge=firstEdge;    points.add(edge.startPoint);    int k=0;    while (true) {      if (edge == lastEdge) {        break;      }      points.add(edge.endPoint);      internalEdges.set(k++,edge.isInternal);      edge=edgeBuffer.getNext(edge);    }    returnIsInternal=lastEdge.isInternal;    for (int i=0; i < points.size(); i++) {      final GeoPoint start=points.get(i);      final GeoPoint end=points.get(getLegalIndex(i + 1,points.size()));      final Plane planeToFind=new Plane(start,end);      int endPointIndex=-1;      for (int j=0; j < points.size(); j++) {        final int index=getLegalIndex(j + i + 2,points.size());        if (!planeToFind.evaluateIsZero(points.get(index))) {          endPointIndex=index;          break;        }      }      if (endPointIndex == -1) {        return false;      }    }    edgeBuffer.clear();  } else {    final SidedPlane returnSidedPlane=new SidedPlane(firstEdge.endPoint,false,firstEdge.startPoint,lastEdge.endPoint);    final Edge returnEdge=new Edge(firstEdge.startPoint,lastEdge.endPoint,returnSidedPlane,true);    final List<Edge> edges=new ArrayList<Edge>(includedEdges.size());    returnIsInternal=true;    Edge edge=firstEdge;    points.add(edge.startPoint);    int k=0;    while (true) {      points.add(edge.endPoint);      internalEdges.set(k++,edge.isInternal);      edges.add(edge);      if (edge == lastEdge) {        break;      }      edge=edgeBuffer.getNext(edge);    }    for (int i=0; i < points.size(); i++) {      final GeoPoint start=points.get(i);      final GeoPoint end=points.get(getLegalIndex(i + 1,points.size()));      final Plane planeToFind=new Plane(start,end);      int endPointIndex=-1;      for (int j=0; j < points.size(); j++) {        final int index=getLegalIndex(j + i + 2,points.size());        if (!planeToFind.evaluateIsZero(points.get(index))) {          endPointIndex=index;          break;        }      }      if (endPointIndex == -1) {        return false;      }    }    edgeBuffer.replace(edges,returnEdge);  }  if (testPoint != null && holes != null && holes.size() > 0) {    final GeoPolygon testPolygon=new GeoConvexPolygon(planetModel,points,null,internalEdges,returnIsInternal);    if (testPolygon.isWithin(testPoint)) {      return null;    }  }  final GeoPolygon realPolygon=new GeoConvexPolygon(planetModel,points,holes,internalEdges,returnIsInternal);  if (testPoint != null && (holes == null || holes.size() == 0)) {    if (realPolygon.isWithin(testPoint)) {      return null;    }  }  rval.addShape(realPolygon);  return true;}  }
class C{  private void jbInit() throws Exception {  CompiereColor.setBackground(this);  centerPanel.setLayout(centerLayout);  String optional=Msg.translate(Env.getCtx(),"Optional");  lClientName.setLabelFor(fClientName);  lClientName.setText(Msg.translate(Env.getCtx(),"AD_Client_ID"));  fClientName.setText("client");  fClientName.setColumns(20);  lOrgName.setLabelFor(fOrgName);  lOrgName.setText(Msg.translate(Env.getCtx(),"AD_Org_ID"));  fOrgName.setText("org");  fOrgName.setColumns(20);  lCurrency.setLabelFor(fCurrency);  lCurrency.setText(Msg.translate(Env.getCtx(),"C_Currency_ID"));  lUserClient.setLabelFor(fUserClient);  lUserClient.setText(Msg.parseTranslation(Env.getCtx(),"@AD_User_ID@ @AD_Client_ID@"));  fUserClient.setText("clientAdmin");  fUserClient.setColumns(20);  lUserOrg.setLabelFor(fUserOrg);  lUserOrg.setText(Msg.parseTranslation(Env.getCtx(),"@AD_User_ID@ @AD_Org_ID@"));  fUserOrg.setText("clientUser");  fUserOrg.setColumns(20);  lCountry.setLabelFor(fCountry);  lCountry.setText(Msg.translate(Env.getCtx(),"C_Country_ID"));  lCity.setLabelFor(fCity);  lCity.setText(Msg.translate(Env.getCtx(),"C_City_ID"));  fCity.setText("city");  fCity.setColumns(20);  lRegion.setLabelFor(fRegion);  lRegion.setText(Msg.translate(Env.getCtx(),"C_Region_ID"));  lRegion.setToolTipText(optional);  lAccountSeg.setText(optional);  fBPartner.setSelected(true);  fBPartner.setText(Msg.translate(Env.getCtx(),"C_BPartner_ID"));  fProduct.setSelected(true);  fProduct.setText(Msg.translate(Env.getCtx(),"M_Product_ID"));  fProject.setText(Msg.translate(Env.getCtx(),"C_Project_ID"));  fMCampaign.setText(Msg.translate(Env.getCtx(),"C_Campaign_ID"));  fSRegion.setText(Msg.translate(Env.getCtx(),"C_SalesRegion_ID"));  buttonLoadAcct.setText(Msg.getMsg(Env.getCtx(),"LoadAccountingValues"));  centerPane.getViewport().add(centerPanel,null);  centerPanel.add(lClientName,new GridBagConstraints(0,0,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  centerPanel.add(fClientName,new GridBagConstraints(1,0,4,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,0,5,5),0,0));  centerPanel.add(lOrgName,new GridBagConstraints(0,1,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(0,5,5,5),0,0));  centerPanel.add(fOrgName,new GridBagConstraints(1,1,4,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,5,5),0,0));  centerPanel.add(lUserClient,new GridBagConstraints(0,2,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(0,5,5,5),0,0));  centerPanel.add(fUserClient,new GridBagConstraints(1,2,4,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,5,5),0,0));  centerPanel.add(lUserOrg,new GridBagConstraints(0,3,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(0,5,5,5),0,0));  centerPanel.add(fUserOrg,new GridBagConstraints(1,3,2,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,5,5),0,0));  centerPanel.add(lAccountSeg,new GridBagConstraints(0,8,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(0,5,5,5),0,0));  centerPanel.add(fProject,new GridBagConstraints(1,9,3,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,5,5),0,0));  centerPanel.add(fBPartner,new GridBagConstraints(1,8,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,5,5),0,0));  centerPanel.add(fMCampaign,new GridBagConstraints(1,10,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,5,5),0,0));  centerPanel.add(fCurrency,new GridBagConstraints(1,4,2,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,5,5),0,0));  centerPanel.add(lCurrency,new GridBagConstraints(0,4,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(0,5,5,5),0,0));  centerPanel.add(buttonLoadAcct,new GridBagConstraints(1,11,2,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,0,5,5),0,0));  centerPanel.add(lCountry,new GridBagConstraints(0,5,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(0,5,5,5),0,0));  centerPanel.add(lCity,new GridBagConstraints(0,6,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(0,5,5,5),0,0));  centerPanel.add(fCountry,new GridBagConstraints(1,5,3,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,5,5),0,0));  centerPanel.add(fCity,new GridBagConstraints(1,6,3,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,5,5),0,0));  centerPanel.add(fProduct,new GridBagConstraints(2,8,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,5,0),0,0));  centerPanel.add(fSRegion,new GridBagConstraints(2,10,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,5,5),0,0));  centerPanel.add(lRegion,new GridBagConstraints(0,7,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(0,5,5,5),0,0));  centerPanel.add(fRegion,new GridBagConstraints(1,7,2,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,5,5),0,0));}  }
class C{  public void unblockUser(InstagramAPIResponseCallback<IGRelationship> callback,String userId){  updateRelationShip(callback,InstagramKitConstants.kRelationshipActionUnblock,userId);}  }
class C{  @Override public boolean isInside(Point point){  return c3Poly.contains(point.x - bounds.x,point.y - bounds.y);}  }
class C{  public synchronized Transaction begin(){  int transactionId;  int status;  if (!init) {    throw DataUtils.newIllegalStateException(DataUtils.ERROR_TRANSACTION_ILLEGAL_STATE,"Not initialized");  }  transactionId=openTransactions.nextClearBit(1);  if (transactionId > maxTransactionId) {    throw DataUtils.newIllegalStateException(DataUtils.ERROR_TOO_MANY_OPEN_TRANSACTIONS,"There are {0} open transactions",transactionId - 1);  }  openTransactions.set(transactionId);  status=Transaction.STATUS_OPEN;  return new Transaction(this,transactionId,status,null,0);}  }
class C{  public String valuesAsString(){  StringBuilder sb=new StringBuilder(80);  sb.append(className).append(',').append(methodCode.size()).append("\n");  for (  Map.Entry<String,byte[]> entry : methodCode.entrySet()) {    sb.append(entry.getKey()).append(',');    byte[] code=entry.getValue();    for (int i=0; i < code.length; i++) {      sb.append(hexChars[(code[i] & 0xff)]);    }    sb.append("\n");  }  return sb.toString();}  }
class C{  public static void scaleFill(Bitmap src,Bitmap dest){  scaleFill(src,dest,CLEAR_COLOR);}  }
class C{  private String constructDeleteLunPathsQuery(String systemId,List<String> lunPathObjectIdList,String model){  Map<String,Object> attributeMap=new HashMap<String,Object>();  List<Path> pathList=new ArrayList<Path>();  StorageArray array=new StorageArray(systemId);  Delete deleteOp=new Delete(HDSConstants.LUN_TARGET);  attributeMap.put(HDSConstants.STORAGEARRAY,array);  attributeMap.put(HDSConstants.MODEL,model);  attributeMap.put(HDSConstants.DELETE,deleteOp);  if (null != lunPathObjectIdList && !lunPathObjectIdList.isEmpty()) {    for (    String pathObjectId : lunPathObjectIdList) {      Path path=new Path(pathObjectId);      pathList.add(path);    }  }  attributeMap.put(HDSConstants.PATH_LIST,pathList);  String deleteLunInputXML=InputXMLGenerationClient.getInputXMLString(HDSConstants.DELETE_PATH_FROM_HSD_OP,attributeMap,HDSConstants.HITACHI_INPUT_XML_CONTEXT_FILE,HDSConstants.HITACHI_SMOOKS_CONFIG_FILE);  return deleteLunInputXML;}  }
class C{  public void run(){  System.out.println("Shutting down TerminalServiceReceiver");synchronized (lock) {    lock.notifyAll();  }}  }
class C{  public Builder(){}  }
class C{  public SharedTicketInfo(){}  }
class C{  public Boolean isInPassthroughMode(){  return inPassthroughMode;}  }
class C{  private void addAttributesToTag(TagNode tag,Map<String,String> attributes){  if (attributes != null) {    Map<String,String> tagAttributes=tag.getAttributes();    for (    Map.Entry<String,String> currEntry : attributes.entrySet()) {      String attName=currEntry.getKey();      if (!tagAttributes.containsKey(attName)) {        String attValue=currEntry.getValue();        tag.addAttribute(attName,attValue);      }    }  }}  }
class C{  public Contribution(NondominatedPopulation referenceSet,double epsilon){  this(referenceSet,new EpsilonBoxDominanceComparator(epsilon));}  }
class C{  private byte[] generateDerivedKey(int bytesNeeded){  byte[] buf=new byte[digest.getDigestSize()];  byte[] key=new byte[bytesNeeded];  int offset=0;  for (; ; ) {    digest.update(password,0,password.length);    digest.update(salt,0,salt.length);    digest.doFinal(buf,0);    int len=(bytesNeeded > buf.length) ? buf.length : bytesNeeded;    System.arraycopy(buf,0,key,offset,len);    offset+=len;    bytesNeeded-=len;    if (bytesNeeded == 0) {      break;    }    digest.reset();    digest.update(buf,0,buf.length);  }  return key;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:34.570 -0500",hash_original_method="BE8327B0577A60EC2E498BB75874DAB6",hash_generated_method="9E401BE439EAF230A739D78ABA17C0AD") static BigInteger flipBit(BigInteger val,int n){  val.prepareJavaRepresentation();  int resSign=(val.sign == 0) ? 1 : val.sign;  int intCount=n >> 5;  int bitN=n & 31;  int resLength=Math.max(intCount + 1,val.numberLength) + 1;  int[] resDigits=new int[resLength];  int i;  int bitNumber=1 << bitN;  System.arraycopy(val.digits,0,resDigits,0,val.numberLength);  if (val.sign < 0) {    if (intCount >= val.numberLength) {      resDigits[intCount]=bitNumber;    } else {      int firstNonZeroDigit=val.getFirstNonzeroDigit();      if (intCount > firstNonZeroDigit) {        resDigits[intCount]^=bitNumber;      } else       if (intCount < firstNonZeroDigit) {        resDigits[intCount]=-bitNumber;        for (i=intCount + 1; i < firstNonZeroDigit; i++) {          resDigits[i]=-1;        }        resDigits[i]=resDigits[i]--;      } else {        i=intCount;        resDigits[i]=-((-resDigits[intCount]) ^ bitNumber);        if (resDigits[i] == 0) {          for (i++; resDigits[i] == -1; i++) {            resDigits[i]=0;          }          resDigits[i]++;        }      }    }  } else {    resDigits[intCount]^=bitNumber;  }  return new BigInteger(resSign,resLength,resDigits);}  }
class C{  public MediaSize(int x,int y,int units,MediaSizeName media){  super(x,y,units);  if (x > y) {    throw new IllegalArgumentException("X dimension > Y dimension");  }  if (media != null && mediaMap.get(media) == null) {    mediaName=media;    mediaMap.put(mediaName,this);  }  sizeVector.add(this);}  }
class C{  ManagedBean addDynamicAttributes(ManagedBean managed) throws org.apache.geode.admin.AdminException {  if (managed == null) {    throw new IllegalArgumentException(LocalizedStrings.SystemMemberCacheJmxImpl_MANAGEDBEAN_IS_NULL.toLocalizedString());  }  refresh();  ManagedBean newManagedBean=new DynamicManagedBean(managed);  for (int i=0; i < this.statistics.length; i++) {    StatisticAttributeInfo attrInfo=new StatisticAttributeInfo();    attrInfo.setName(this.statistics[i].getName());    attrInfo.setDisplayName(this.statistics[i].getName());    attrInfo.setDescription(this.statistics[i].getDescription());    attrInfo.setType("java.lang.Number");    attrInfo.setIs(false);    attrInfo.setReadable(true);    attrInfo.setWriteable(false);    attrInfo.setStat(this.statistics[i]);    newManagedBean.addAttribute(attrInfo);  }  return newManagedBean;}  }
class C{  protected String canProduce(final Territory producer,final Territory to,final Collection<Unit> units,final PlayerID player,final boolean simpleCheck){  final Collection<Unit> testUnits=(units == null ? new ArrayList<>() : units);  final boolean canProduceInConquered=isPlacementAllowedInCapturedTerritory(player);  if (!producer.getOwner().equals(player)) {    if (producer.isWater() && Match.someMatch(testUnits,new CompositeMatchAnd<>(Matches.UnitIsSea,Matches.UnitIsConstruction))) {      boolean ownedNeighbor=false;      for (      final Territory current : getData().getMap().getNeighbors(to,Matches.TerritoryIsLand)) {        if (current.getOwner().equals(player) && (canProduceInConquered || !wasConquered(current))) {          ownedNeighbor=true;          break;        }      }      if (!ownedNeighbor) {        return producer.getName() + " is not owned by you, and you have no owned neighbors which can produce";      }    } else {      return producer.getName() + " is not owned by you";    }  }  if (!canProduceInConquered && wasConquered(producer)) {    return producer.getName() + " was conquered this turn and cannot produce till next turn";  }  if (isPlayerAllowedToPlacementAnyTerritoryOwnedLand(player) && Matches.TerritoryIsLand.match(to) && Matches.isTerritoryOwnedBy(player).match(to)) {    return null;  }  if (isPlayerAllowedToPlacementAnySeaZoneByOwnedLand(player) && Matches.TerritoryIsWater.match(to) && Matches.isTerritoryOwnedBy(player).match(producer)) {    return null;  }  if (simpleCheck) {    return null;  }  if (isUnitPlacementRestrictions() && !testUnits.isEmpty() && !Match.someMatch(testUnits,unitWhichRequiresUnitsHasRequiredUnits(producer,true))) {    return "You do not have the required units to build in " + producer.getName();  }  if (to.isWater() && (!isWW2V2() && !isUnitPlacementInEnemySeas()) && to.getUnits().someMatch(Matches.enemyUnit(player,getData()))) {    return "Cannot place sea units with enemy naval units";  }  if (wasOwnedUnitThatCanProduceUnitsOrIsFactoryInTerritoryAtStartOfStep(producer,player)) {    return null;  }  if (Match.someMatch(testUnits,Matches.UnitIsConstruction)) {    if (howManyOfEachConstructionCanPlace(to,producer,testUnits,player).totalValues() > 0) {      return null;    }    return "No more Constructions Allowed in " + producer.getName();  }  if (Match.someMatch(getAlreadyProduced(producer),Matches.UnitCanProduceUnits) || Match.someMatch(getAlreadyProduced(to),Matches.UnitCanProduceUnits)) {    return "Factory in " + producer.getName() + " cant produce until 1 turn after it is created";  }  return "No Factory in " + producer.getName();}  }
class C{  public NullLiteral createNullLiteral(){  NullLiteralImpl nullLiteral=new NullLiteralImpl();  return nullLiteral;}  }
class C{  public XMLString(XMLString string){  setValues(string);}  }
class C{  public Vertex checkState(Vertex root,Vertex input,Vertex sentence,List<Vertex> states,int index,int recurse,List<Vertex> inputs,Map<Vertex,Vertex> variables,List<Vertex> stateStack,float correctnessRequired,Network network){  if (states == null || this.abort) {    return null;  }  if (this.startTime == 0) {    this.startTime=System.currentTimeMillis();  }  long processTime=this.maxStateProcess;  if (getBot().isDebugFiner()) {    processTime=processTime * 10;  }  Vertex state=null;  try {    while (index <= inputs.size()) {      Vertex currentInput=null;      if (index < inputs.size()) {        currentInput=inputs.get(index);      }      for (ListIterator<Vertex> iterator=states.listIterator(); iterator.hasNext(); ) {        if (this.abort) {          return null;        }        if ((System.currentTimeMillis() - this.startTime) > processTime) {          log("State processing time limit reached",Level.WARNING,processTime,root,state);          this.abort=true;          return null;        }        if (stateStack.size() > MAX_STACK) {          log("State stack overflow",Level.WARNING,MAX_STACK,root,state);          this.abort=true;          return null;        }        Map<Vertex,Vertex> localVariables=new HashMap<Vertex,Vertex>(variables);        state=iterator.next();        Vertex lastState=null;        if (!stateStack.isEmpty()) {          lastState=stateStack.get(stateStack.size() - 1);        }        stateStack.add(state);        Vertex newRoot=root;        Vertex decompiled=SelfDecompiler.getDecompiler().decompileState(state,state.getNetwork());        if (root == null) {          newRoot=state;          log("STATE MACHINE",Level.FINE,state,currentInput);          if (!this.loadedStates.contains(state.getId()) && (stateStack.size() == 1) && this.loadedStates.size() < 20) {            this.loadedStates.add(state.getId());            SelfCompiler.getCompiler().fastLoadChildren(state);          }          localVariables.put(network.createVertex(Primitive.STATE),decompiled);        } else {          log("STATE",Level.FINER,state,currentInput);        }        Collection<Relationship> equations=decompiled.orderedRelationships(Primitive.DO);        Vertex response=null;        if (equations != null) {          for (          Relationship equationRelationship : equations) {            if (this.abort) {              return null;            }            if ((System.currentTimeMillis() - this.startTime) > processTime) {              log("State processing time limit reached",Level.WARNING,processTime,root,state);              this.abort=true;              return null;            }            Vertex equation=equationRelationship.getTarget();            if (equation.instanceOf(Primitive.CASE) || equation.hasRelationship(Primitive.PATTERN)) {              List<Relationship> fors=equation.orderedRelationships(Primitive.FOR);              if (fors != null) {                fors=null;              }              Vertex pattern=equation.getRelationship(Primitive.PATTERN);              Vertex caseVariable=null;              Boolean match=false;              boolean anyOrNone=false;              boolean emptyMatch=false;              if (pattern != null) {                log("PATTERN",Level.FINER,pattern,currentInput);                caseVariable=pattern;                if (lastState != state) {                  match=evaluatePattern(pattern,sentence,Primitive.WILDCARD,localVariables,network);                }              } else {                caseVariable=equation.getRelationship(Primitive.CASE);                if (caseVariable != null && (!caseVariable.isVariable())) {                  if ((caseVariable.instanceOf(Primitive.EXPRESSION) || caseVariable.instanceOf(Primitive.EQUATION))) {                    caseVariable=SelfInterpreter.getInterpreter().evaluateExpression(caseVariable,localVariables,network,this.startTime,processTime,0);                  } else                   if (caseVariable.instanceOf(Primitive.FUNCTION)) {                    caseVariable=SelfInterpreter.getInterpreter().evaluateFunction(caseVariable,localVariables,network,this.startTime,processTime,0);                  }                }                if (caseVariable != null) {                  anyOrNone=(caseVariable.getName() != null && (caseVariable.getName().equals("poundstar") || caseVariable.getName().equals("hatstar"))) || ((caseVariable.instanceOf(Primitive.ARRAY) || caseVariable.instanceOf(Primitive.LIST)) && !caseVariable.hasRelationship(Primitive.TYPE,Primitive.REQUIRED));                }                if (index >= inputs.size()) {                  if (anyOrNone) {                    emptyMatch=true;                    match=Boolean.TRUE;                    log("CASE",Level.FINER,caseVariable,currentInput);                  } else {                    continue;                  }                } else {                  currentInput=inputs.get(index);                  log("CASE",Level.FINER,caseVariable,currentInput);                  if (caseVariable != null) {                    match=caseVariable.matches(currentInput,localVariables);                    if (match != Boolean.TRUE && caseVariable.isPrimitive() && currentInput != null && currentInput.instanceOf(Primitive.WORD)) {                      if (currentInput.hasRelationship(Primitive.MEANING,caseVariable)) {                        match=true;                      }                    }                    if (currentInput == input) {                      Vertex sentenceVariable=caseVariable.getRelationship(Primitive.INPUT);                      if (sentenceVariable != null) {                        localVariables.put(sentenceVariable,sentence);                      }                    }                  }                  if (match != Boolean.TRUE && anyOrNone) {                    emptyMatch=true;                    match=Boolean.TRUE;                  }                }              }              if (match == Boolean.TRUE) {                Vertex topic=equation.getRelationship(Primitive.TOPIC);                if (topic != null) {                  match=false;                  Vertex conversation=input.getRelationship(Primitive.CONVERSATION);                  Vertex currentTopic=null;                  if (conversation != null) {                    currentTopic=conversation.getRelationship(Primitive.TOPIC);                  }                  log("Checking topic",Level.FINER,topic,currentTopic);                  if (currentTopic != null) {                    match=evaluatePattern(topic,currentTopic,Primitive.TOPICWILDCARD,localVariables,network);                  }                }                Vertex that=equation.getRelationship(Primitive.THAT);                if (match && (that != null)) {                  match=false;                  Vertex questionInput=input.getRelationship(Primitive.QUESTION);                  log("Checking that",Level.FINER,that,questionInput);                  if (questionInput != null) {                    Vertex question=questionInput.getRelationship(Primitive.INPUT);                    if (question != null) {                      match=evaluatePattern(that,question,Primitive.THATWILDCARD,localVariables,network);                      if (!match) {                        network.createParagraph(question);                        if (question.instanceOf(Primitive.PARAGRAPH)) {                          Collection<Relationship> relationships=question.getRelationships(Primitive.SENTENCE);                          if (relationships != null) {                            for (                            Relationship relationship : relationships) {                              match=evaluatePattern(that,relationship.getTarget(),Primitive.THATWILDCARD,localVariables,network);                              if (match) {                                break;                              }                            }                          }                        }                      }                    }                  }                }              }              if (match == Boolean.TRUE) {                if (pattern != null) {                  log("PATTERN MATCH",Level.FINE,pattern,currentInput);                } else {                  log("CASE MATCH",Level.FINER,caseVariable,currentInput);                }                Vertex template=equation.getRelationship(Primitive.TEMPLATE);                if (template != null) {                  if (template.instanceOf(Primitive.EQUATION) || template.instanceOf(Primitive.EXPRESSION) || template.instanceOf(Primitive.FUNCTION)) {                    response=evaluateAnswerResponse(template,state,localVariables,network);                    if (response != null) {                      return response;                    }                  } else {                    if (template.getNetwork() != network) {                      template=network.createVertex(template);                    }                    if ((template != null) && template.instanceOf(Primitive.LABEL)) {                      template=template.mostConscious(Primitive.RESPONSE);                    }                    if (template.instanceOf(Primitive.FORMULA)) {                      log("Template is template formula",Level.FINE,template);                      response=evaluateFormula(template,localVariables,network);                      if (response == null) {                        log("Template formula cannot be evaluated",Level.FINE,template);                      } else {                        return response;                      }                    } else                     if (template.instanceOf(Primitive.EQUATION) || template.instanceOf(Primitive.EXPRESSION) || template.instanceOf(Primitive.FUNCTION)) {                      response=evaluateAnswerResponse(template,state,localVariables,network);                      if (response != null) {                        return response;                      }                    } else {                      return template;                    }                  }                }                Vertex as=equation.getRelationship(Primitive.AS);                if (as != null) {                  localVariables.put(as,localVariables.get(caseVariable));                }                List<Vertex> gotoStates=equation.orderedRelations(Primitive.GOTO);                if (gotoStates != null) {                  if ((gotoStates.size() == 1) && gotoStates.get(0).is(Primitive.RETURN)) {                    log("CASE RETURN",Level.FINER);                    return null;                  }                  List<Relationship> arguments=equation.orderedRelationships(Primitive.FOR);                  List<Vertex> newInputs=inputs;                  int newIndex=index + 1;                  if (arguments != null) {                    Vertex variable=arguments.get(1).getTarget();                    Vertex value=arguments.get(0).getTarget();                    newInputs=new ArrayList<Vertex>();                    Vertex variableValue=SelfInterpreter.getInterpreter().evaluateExpression(variable,localVariables,network,this.startTime,processTime,0);                    List<Relationship> relationships=variableValue.orderedRelationships(value);                    if (relationships != null) {                      for (                      Relationship result : relationships) {                        newInputs.add(result.getTarget());                      }                    }                    newIndex=0;                  }                  log("CASE GOTO STATE",Level.FINER,gotoStates);                  if (!emptyMatch) {                    response=checkState(newRoot,input,sentence,gotoStates,newIndex,recurse,newInputs,localVariables,stateStack,correctnessRequired,network);                  }                  if (response != null) {                    return response;                  }                  if (anyOrNone && (newIndex == index + 1) && !gotoStates.contains(state)) {                    response=checkState(newRoot,input,sentence,gotoStates,index,recurse,newInputs,localVariables,stateStack,correctnessRequired,network);                  }                  if (response != null) {                    return response;                  }                }              } else {                log("Case not matched",Level.FINER,caseVariable,currentInput);              }            } else             if (equation.instanceOf(Primitive.DO)) {              log("DO",Level.FINER,state,currentInput);              SelfInterpreter.getInterpreter().evaluateExpression(equation.getRelationship(Primitive.DO),localVariables,network,this.startTime,processTime,0);              localVariables.remove(network.createVertex(Primitive.RETURN));            } else             if (equation.instanceOf(Primitive.GOTO)) {              if (!equation.hasRelationship(Primitive.FINALLY) || (index >= inputs.size())) {                List<Vertex> gotoStates=equation.orderedRelations(Primitive.GOTO);                log("GOTO",Level.FINER,state,gotoStates);                List<Vertex> arguments=equation.orderedRelations(Primitive.ARGUMENT);                if (arguments == null || arguments.isEmpty()) {                  response=checkState(newRoot,input,sentence,gotoStates,index,recurse,inputs,localVariables,stateStack,correctnessRequired,network);                } else {                  List<Vertex> newInputs=new ArrayList<Vertex>();                  for (                  Vertex argument : arguments) {                    newInputs.add(SelfInterpreter.getInterpreter().evaluateExpression(argument,localVariables,network,this.startTime,processTime,0));                  }                  response=checkState(newRoot,input,sentence,gotoStates,0,recurse,newInputs,localVariables,stateStack,correctnessRequired,network);                }                if (response != null) {                  return response;                }              }            } else             if (equation.instanceOf(Primitive.PUSH)) {              Vertex argument=equation.getRelationship(Primitive.ARGUMENT);              argument=SelfInterpreter.getInterpreter().evaluateExpression(argument,localVariables,network,this.startTime,processTime,0);              log("PUSH",Level.FINER,state,argument);              inputs.add(index,argument);            } else             if (equation.instanceOf(Primitive.RETURN)) {              log("RETURN",Level.FINER,state,currentInput);              List<Vertex> lastStates=new ArrayList<Vertex>(1);              Vertex current=stateStack.remove(stateStack.size() - 1);              Vertex last=stateStack.remove(stateStack.size() - 1);              lastStates.add(last);              Map<Vertex,Vertex> newVariables=localVariables;              Collection<Relationship> arguments=equation.getRelationships(Primitive.ARGUMENT);              if (arguments != null) {                newVariables=new HashMap<Vertex,Vertex>(variables);                for (                Relationship variable : arguments) {                  newVariables.put(variable.getTarget(),localVariables.get(variable.getTarget()));                }              }              Vertex value=equation.getRelationship(Primitive.RETURN);              if (value != null && value.isVariable()) {                value=localVariables.get(value);                if (value == null) {                  value=network.createVertex(Primitive.NULL);                }              }              if (value != null) {                List<Vertex> newInputs=new ArrayList<Vertex>(inputs);                if (currentInput == null) {                  newInputs.add(value);                } else {                  index++;                  newInputs.add(index,value);                }                recurse++;                if (recurse > MAX_DEPTH) {                  stateStack.add(last);                  stateStack.add(current);                  throw new SelfExecutionException(current,"Max recursive state execution");                }                response=checkState(newRoot,input,sentence,lastStates,index++,recurse,newInputs,newVariables,stateStack,correctnessRequired,network);              } else {                response=checkState(newRoot,input,sentence,lastStates,index++,recurse,inputs,newVariables,stateStack,correctnessRequired,network);              }              if (response != null) {                return response;              }              stateStack.add(last);              stateStack.add(current);            }          }        }        if (currentInput != null && currentInput.instanceOf(Primitive.PUNCTUATION)) {          response=checkState(newRoot,input,sentence,states,index + 1,recurse,inputs,localVariables,stateStack,correctnessRequired,network);          if (response != null) {            return response;          }        }        if ((index >= inputs.size())) {          Vertex[] pair=bestAnswer(correctnessRequired,decompiled,localVariables,input,sentence,network);          if (pair != null) {            response=pair[1];            log("ANSWER",Level.FINER,state,response);            Vertex quotient=pair[0];            setLastStateMachine(root);            setLastState(state);            setLastQuotient(quotient);            return response;          }        }        stateStack.remove(stateStack.size() - 1);        log("STATE DONE",Level.FINER,state,currentInput);      }      index++;      return null;    }  } catch (  Exception failure) {    log("Error occured in processing state",Level.WARNING,root,state);    log(failure);    return null;  } finally {    if (root == null) {      log("State processing time",Level.FINE,System.currentTimeMillis() - startTime);    }  }  return null;}  }
class C{  @SuppressWarnings("deprecation") private void initCropFrameStyle(@NonNull TypedArray a){  int cropFrameStrokeSize=a.getDimensionPixelSize(R.styleable.ucrop_UCropView_ucrop_frame_stroke_size,getResources().getDimensionPixelSize(R.dimen.ucrop_default_crop_frame_stoke_width));  int cropFrameColor=a.getColor(R.styleable.ucrop_UCropView_ucrop_frame_color,getResources().getColor(R.color.ucrop_color_default_crop_frame));  mCropFramePaint.setStrokeWidth(cropFrameStrokeSize);  mCropFramePaint.setColor(cropFrameColor);  mCropFramePaint.setStyle(Paint.Style.STROKE);  mCropFrameCornersPaint.setStrokeWidth(cropFrameStrokeSize * 3);  mCropFrameCornersPaint.setColor(cropFrameColor);  mCropFrameCornersPaint.setStyle(Paint.Style.STROKE);}  }
class C{  public static short phaseAngleFromCartesianTrig(float real,float imag){  if (real == 0 && imag == 0)   return ZERO_INDEX;  double theta=HALF_PI - Math.atan2(real,imag);  short steps=(short)(theta * STEPS_PER_RADIAN);  if (steps < 0)   steps+=PHASE_RESOLUTION;  return steps;}  }
class C{  public List<AbstractIndex> loadAndGetBlocks(List<TableBlockInfo> tableBlocksInfos,AbsoluteTableIdentifier absoluteTableIdentifier) throws IndexBuilderException {  AbstractIndex[] loadedBlock=new AbstractIndex[tableBlocksInfos.size()];  addTableLockObject(absoluteTableIdentifier);  Collections.sort(tableBlocksInfos);  Object lockObject=tableLockMap.get(absoluteTableIdentifier);  Map<TableBlockInfo,AbstractIndex> tableBlockMapTemp=null;  int numberOfCores=1;  try {    numberOfCores=Integer.parseInt(CarbonProperties.getInstance().getProperty(CarbonCommonConstants.NUM_CORES,CarbonCommonConstants.NUM_CORES_DEFAULT_VAL));  } catch (  NumberFormatException e) {    numberOfCores=Integer.parseInt(CarbonCommonConstants.NUM_CORES_DEFAULT_VAL);  }  ExecutorService executor=Executors.newFixedThreadPool(numberOfCores);synchronized (lockObject) {    tableBlockMapTemp=tableBlocksMap.get(absoluteTableIdentifier);    if (null == tableBlockMapTemp) {      tableBlockMapTemp=new ConcurrentHashMap<TableBlockInfo,AbstractIndex>();      tableBlocksMap.put(absoluteTableIdentifier,tableBlockMapTemp);    }  }  AbstractIndex tableBlock=null;  List<Future<AbstractIndex>> blocksList=new ArrayList<Future<AbstractIndex>>();  int counter=-1;  for (  TableBlockInfo blockInfo : tableBlocksInfos) {    counter++;    tableBlock=tableBlockMapTemp.get(blockInfo);    if (null == tableBlock) {      Object blockInfoLockObject=blockInfoLock.get(blockInfo);      if (null == blockInfoLockObject) {synchronized (blockInfoLock) {          blockInfoLockObject=blockInfoLock.get(blockInfo);          if (null == blockInfoLockObject) {            blockInfoLockObject=new Object();            blockInfoLock.put(blockInfo,blockInfoLockObject);          }        }      }synchronized (blockInfoLockObject) {        tableBlock=tableBlockMapTemp.get(blockInfo);        if (null == tableBlock) {          blocksList.add(executor.submit(new BlockLoaderThread(blockInfo,tableBlockMapTemp)));        }      }    } else {      loadedBlock[counter]=tableBlock;    }  }  executor.shutdown();  try {    executor.awaitTermination(1,TimeUnit.HOURS);  } catch (  InterruptedException e) {    throw new IndexBuilderException(e);  }  fillLoadedBlocks(loadedBlock,blocksList);  return Arrays.asList(loadedBlock);}  }
class C{  public DefaultRequest pageDownloadTime(Integer value){  setInteger(PAGE_DOWNLOAD_TIME,value);  return this;}  }
class C{  public CategoryGraph(Wikipedia pWiki) throws WikiApiException {  constructCategoryGraph(pWiki,pWiki.__getCategories(),null);}  }
class C{  protected void init(){  Properties props=new Properties();  props.put("bootstrap.servers",PropertyUtil.getProperty(PropertyUtil.HAWKULAR_APM_URI_PUBLISHER,PropertyUtil.getProperty(PropertyUtil.HAWKULAR_APM_URI)).substring(PropertyUtil.KAFKA_PREFIX.length()));  props.put("acks","all");  props.put("retries",PropertyUtil.getPropertyAsInteger(PropertyUtil.HAWKULAR_APM_KAFKA_PRODUCER_RETRIES,3));  props.put("batch.size",16384);  props.put("linger.ms",1);  props.put("buffer.memory",33554432);  props.put("key.serializer","org.apache.kafka.common.serialization.StringSerializer");  props.put("value.serializer","org.apache.kafka.common.serialization.StringSerializer");  producer=new KafkaProducer<>(props);}  }
class C{  private GVCongruenceClass findOrCreateCongruenceClass(Object label,HashMap<Object,GVCongruenceClass> labelMap){  GVCongruenceClass result=labelMap.get(label);  if ((result == null) || (label == null)) {    result=createCongruenceClass(label);    labelMap.put(label,result);  }  return result;}  }
class C{  @POST @Consumes(MediaType.APPLICATION_JSON) @Transactional public Response createStateMachine(StateMachineDefinition stateMachineDefinition) throws Exception {  if (stateMachineDefinition == null)   throw new IllegalRepresentationException("State machine definition is empty");  StateMachine stateMachine=stateMachinePersistenceService.createStateMachine(stateMachineDefinition);  workFlowExecutionController.initAndStart(stateMachine);  logger.info("Created state machine with Id: {} and correlation Id: {}",stateMachine.getId(),stateMachine.getCorrelationId());  return Response.status(Response.Status.CREATED.getStatusCode()).entity(stateMachine.getId()).build();}  }
class C{  private void writeOutTypeFromTo(BytecodeContext bc) throws TransformerException {  ForDoubleVisitor forDoubleVisitor=new ForDoubleVisitor();  loopVisitor=forDoubleVisitor;  GeneratorAdapter adapter=bc.getAdapter();  int from=adapter.newLocal(Types.DOUBLE_VALUE);  ExpressionUtil.writeOutSilent(getAttribute("from").getValue(),bc,Expression.MODE_VALUE);  adapter.storeLocal(from);  int to=adapter.newLocal(Types.DOUBLE_VALUE);  ExpressionUtil.writeOutSilent(getAttribute("to").getValue(),bc,Expression.MODE_VALUE);  adapter.storeLocal(to);  int step=adapter.newLocal(Types.DOUBLE_VALUE);  Attribute attrStep=getAttribute("step");  if (attrStep != null) {    ExpressionUtil.writeOutSilent(attrStep.getValue(),bc,Expression.MODE_VALUE);  } else {    adapter.push(1D);  }  adapter.storeLocal(step);  int dirPlus=adapter.newLocal(Types.BOOLEAN_VALUE);  DecisionDoubleVisitor div=new DecisionDoubleVisitor();  div.visitBegin();  adapter.loadLocal(step);  div.visitGT();  adapter.push(0D);  div.visitEnd(bc);  adapter.storeLocal(dirPlus);  div=new DecisionDoubleVisitor();  div.visitBegin();  adapter.loadLocal(step);  div.visitNEQ();  adapter.push(0D);  div.visitEnd(bc);  Label ifEnd=new Label();  adapter.ifZCmp(Opcodes.IFEQ,ifEnd);  int index=adapter.newLocal(Types.VARIABLE_REFERENCE);  adapter.loadArg(0);  Attribute attr=getAttribute("index");  if (attr == null)   attr=getAttribute("item");  ExpressionUtil.writeOutSilent(attr.getValue(),bc,Expression.MODE_REF);  adapter.invokeStatic(Types.VARIABLE_INTERPRETER,GET_VARIABLE_REFERENCE);  adapter.storeLocal(index);  adapter.loadLocal(index);  adapter.loadLocal(from);  adapter.invokeVirtual(Types.VARIABLE_REFERENCE,SET_DOUBLE);  adapter.visitLabel(forDoubleVisitor.beforeInit);  forDoubleVisitor.forInit(adapter,from,true);  adapter.goTo(forDoubleVisitor.beforeExpr);  adapter.visitLabel(forDoubleVisitor.beforeUpdate);  adapter.loadLocal(index);  adapter.visitVarInsn(Opcodes.DLOAD,forDoubleVisitor.i);  adapter.loadLocal(step);  adapter.visitInsn(Opcodes.DADD);  adapter.visitInsn(Opcodes.DUP2);  adapter.visitVarInsn(Opcodes.DSTORE,forDoubleVisitor.i);  adapter.invokeVirtual(Types.VARIABLE_REFERENCE,SET_DOUBLE);  adapter.visitLabel(forDoubleVisitor.beforeExpr);  int i=forDoubleVisitor.i;  adapter.loadLocal(dirPlus);  Label l1=new Label();  adapter.visitJumpInsn(Opcodes.IFEQ,l1);  div=new DecisionDoubleVisitor();  div.visitBegin();  adapter.visitVarInsn(Opcodes.DLOAD,i);  div.visitLTE();  adapter.loadLocal(to);  div.visitEnd(bc);  Label l2=new Label();  adapter.visitJumpInsn(Opcodes.GOTO,l2);  adapter.visitLabel(l1);  div=new DecisionDoubleVisitor();  div.visitBegin();  adapter.visitVarInsn(Opcodes.DLOAD,i);  div.visitGTE();  adapter.loadLocal(to);  div.visitEnd(bc);  adapter.visitLabel(l2);  forDoubleVisitor.visitAfterExpressionBeginBody(adapter);  getBody().writeOut(bc);  forDoubleVisitor.visitEndBody(bc,getEnd());  adapter.visitLabel(ifEnd);}  }
class C{  public void addProperty(String key,String value){  carbonProperties.setProperty(key,value);}  }
class C{  private View fillRight(int pos,int nextLeft){  View selectedView=null;  int end=(getRight() - getLeft());  while (nextLeft < end && pos < mItemCount) {    boolean selected=pos == mSelectedPosition;    View child=makeAndAddView(pos,nextLeft,true,mListPadding.top,selected);    nextLeft=child.getRight() + mDividerWidth;    if (selected) {      selectedView=child;    }    pos++;  }  setVisibleRangeHint(mFirstPosition,mFirstPosition + getChildCount() - 1);  return selectedView;}  }
class C{  private synchronized void createQueueBranch(final QueueInfo queueInfo) throws Exception {  final File queueDir=new File(providerDirPath);  File lockFile=new File(AsyncDBUtil.getGlobalLockFilePath());  LOG.info("Creating directory for provider {} ({})",queueInfo.getName(),providerDirPath);  if (!lockFile.exists()) {    FileUtils.touch(lockFile);  }  if (!queueDir.exists()) {    Callable<Object> queueDirCreationTask=null;    AsyncDBUtil.performLocked(queueDirCreationTask,AsyncDBUtil.getGlobalLockFilePath(),this);  }}  }
class C{  public static long round(double a){  return Math.round(a);}  }
class C{  @Override public void write(byte b[],int off,int len) throws IOException {  for (  OutputStream stream : outs) {    stream.write(b,off,len);  }}  }
class C{  public LongMemberValue(long j,ConstPool cp){  super('J',cp);  setValue(j);}  }
class C{  public void writeBytes(byte[] bytes){  writeBytes(bytes,0,bytes.length);}  }
class C{  protected LexicalUnit parseExpression(boolean param){  LexicalUnit result=parseTerm(null);  LexicalUnit curr=result;  for (; ; ) {    boolean op=false;switch (current) {case LexicalUnits.COMMA:      op=true;    curr=CSSLexicalUnit.createSimple(LexicalUnit.SAC_OPERATOR_COMMA,curr,getLineNumber());  nextIgnoreSpaces();break;case LexicalUnits.EQUAL:case LexicalUnits.DIVIDE:op=true;curr=CSSLexicalUnit.createSimple(LexicalUnit.SAC_OPERATOR_SLASH,curr,getLineNumber());nextIgnoreSpaces();}if (param) {if (current == LexicalUnits.RIGHT_BRACE) {if (op) {throw createCSSParseException("token",new Object[]{new Integer(current)});}return result;}curr=parseTerm(curr);} else {switch (current) {case LexicalUnits.IMPORTANT_SYMBOL:case LexicalUnits.SEMI_COLON:case LexicalUnits.RIGHT_CURLY_BRACE:case LexicalUnits.EOF:if (op) {throw createCSSParseException("token",new Object[]{new Integer(current)});}return result;default :curr=parseTerm(curr);}}}}  }
class C{  @Override public String toString(){  return query.toString() + " (" + samples.size()+ " samples already collected)";}  }
class C{  public NemAsyncTimerVisitor(final String timerName,final TimeProvider timeProvider){  this.timerName=timerName;  this.timeProvider=timeProvider;}  }
class C{  private void checkForFragmentID(Attributes attributes){  if (!m_shouldProcess) {    if ((null != attributes) && (null != m_fragmentIDString)) {      int n=attributes.getLength();      for (int i=0; i < n; i++) {        String name=attributes.getQName(i);        if (name.equals(Constants.ATTRNAME_ID)) {          String val=attributes.getValue(i);          if (val.equalsIgnoreCase(m_fragmentIDString)) {            m_shouldProcess=true;            m_fragmentID=m_elementID;          }        }      }    }  }}  }
class C{  protected PostfixExpressionImpl(){  super();}  }
class C{  public static <E extends Comparable<E>>void quickSort(E[] list){  quickSort(list,0,list.length - 1);}  }
class C{  public OPath(Block owner,String name){  super(owner,0,0);  _name=name;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  int x=getInt(stack);  Playlist p=getPlaylist(stack);  return (p == null) ? null : p.getSegment(x);}  }
class C{  public CActionDeleteNode(final INaviView view,final INaviViewNode node){  super("Delete Node");  m_view=Preconditions.checkNotNull(view,"IE00930: View argument can't be null");  m_node=Preconditions.checkNotNull(node,"IE00931: Node argument can't be null");}  }
class C{  public XPathExpressionException(String message){  super(message);}  }
class C{  @Override public boolean isImmediate(){  return (Boolean)getStateHelper().eval(PropertyKeys.immediate,false);}  }
class C{  public static void putIntField(Object obj,long fieldOff,int val){  UNSAFE.putInt(obj,fieldOff,val);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:40:20.415 -0400",hash_original_method="0C7284D4698B6D9EDCE559C939F82D31",hash_generated_method="4B1EC895048BE87C177505050F8A1F75") public AtCommandResult handleActionCommand(){  return new AtCommandResult(AtCommandResult.ERROR);}  }
class C{  private void addAnnotationConfiguration() throws IllegalAccessException, InvocationTargetException, NoSuchMethodException {  setAttributeMethod().invoke(getServer(),new Object[]{"org.eclipse.jetty.webapp.configuration",new String[]{"org.eclipse.jetty.webapp.WebInfConfiguration","org.eclipse.jetty.webapp.WebXmlConfiguration","org.eclipse.jetty.webapp.MetaInfConfiguration","org.eclipse.jetty.webapp.FragmentConfiguration","org.eclipse.jetty.annotations.AnnotationConfiguration","org.eclipse.jetty.webapp.JettyWebXmlConfiguration"}});}  }
class C{  public ActivatableServerRef(ActivationID id,int port){  this(id,port,null,null);}  }
class C{  public void decorate(OutputNode node){  decorate(node,null);}  }
class C{  public int numParameters(){  return m_Coefficients.length - 1;}  }
class C{  public void testReadFromFile_LargeScenarioCase() throws SAXException, ParserConfigurationException, IOException {  String eventsFilename=getClassInputDirectory() + "link10_events.xml";  String networkFile="test/scenarios/equil/network.xml";  Scenario scenario=ScenarioUtils.createScenario(ConfigUtils.createConfig());  Config config=scenario.getConfig();  Network network=scenario.getNetwork();  new MatsimNetworkReader(scenario.getNetwork()).readFile(networkFile);  EventsManager events=EventsUtils.createEventsManager();  TravelTimeCalculator ttCalc=new TravelTimeCalculator(network,config.travelTimeCalculator());  events.addHandler(ttCalc);  new MatsimEventsReader(events).readFile(eventsFilename);  Link link10=network.getLinks().get(Id.create("10",Link.class));  assertEquals("wrong link travel time at 06:00.",110.0,ttCalc.getLinkTravelTimes().getLinkTravelTime(link10,6.0 * 3600,null,null),EPSILON);  assertEquals("wrong link travel time at 06:15.",359.9712023038157,ttCalc.getLinkTravelTimes().getLinkTravelTime(link10,6.25 * 3600,null,null),EPSILON);}  }
class C{  private static HashMap<String,Integer> processColumnNames(FileSystem fs,CSVFileFormatProperties prop,String headerLine,String smallestFile) throws IllegalArgumentException, IOException {  HashMap<String,Integer> colNames=new HashMap<String,Integer>();  String escapedDelim=Pattern.quote(prop.getDelim());  Pattern compiledDelim=Pattern.compile(escapedDelim);  String[] names=compiledDelim.split(headerLine,-1);  for (int i=0; i < names.length; i++)   colNames.put(UtilFunctions.unquote(names[i].trim()),i + 1);  return colNames;}  }
class C{  public static boolean equals(EventLog eventLog1,EventLog eventLog2){  if (Math.rint(eventLog1.getTime() * 10000) == Math.rint(eventLog2.getTime() * 10000) && eventLog1.getLinkId() == eventLog2.getLinkId()) {    return true;  } else {    System.out.println("====PROBLEM=====");    eventLog1.print();    eventLog2.print();    System.out.println("=========");  }  return false;}  }
class C{  protected void replaceFragment(int containerViewId,Fragment fragment,boolean addToBackStack){  if (containerViewId > -1 && fragment != null) {    FragmentTransaction ft=getSupportFragmentManager().beginTransaction();    ft.replace(containerViewId,fragment,fragment.getClass().getName());    if (addToBackStack) {      ft.addToBackStack(null);    }    ft.commit();  }}  }
class C{  @SuppressWarnings("resource") public void performance() throws Exception {  int[] tokCount={100,500,1000,2000,5000,10000};  int[] modCounts={1,2,5,10,20,50,100,200,500};  for (int k=0; k < tokCount.length; k++) {    StringBuilder buffer=new StringBuilder();    System.out.println("-----Tokens: " + tokCount[k] + "-----");    for (int i=0; i < tokCount[k]; i++) {      buffer.append(English.intToEnglish(i).toUpperCase(Locale.ROOT)).append(' ');    }    TeeSinkTokenFilter teeStream=new TeeSinkTokenFilter(new StandardFilter(standardTokenizer(buffer)));    TokenStream sink=new ModuloTokenFilter(teeStream.newSinkTokenStream(),100);    teeStream.consumeAllTokens();    TokenStream stream=new ModuloTokenFilter(new StandardFilter(standardTokenizer(buffer)),100);    CharTermAttribute tfTok=stream.addAttribute(CharTermAttribute.class);    CharTermAttribute sinkTok=sink.addAttribute(CharTermAttribute.class);    for (int i=0; stream.incrementToken(); i++) {      assertTrue(sink.incrementToken());      assertTrue(tfTok + " is not equal to " + sinkTok+ " at token: "+ i,tfTok.equals(sinkTok) == true);    }    for (int j=0; j < modCounts.length; j++) {      int tfPos=0;      long start=System.currentTimeMillis();      for (int i=0; i < 20; i++) {        stream=new StandardFilter(standardTokenizer(buffer));        PositionIncrementAttribute posIncrAtt=stream.getAttribute(PositionIncrementAttribute.class);        while (stream.incrementToken()) {          tfPos+=posIncrAtt.getPositionIncrement();        }        stream=new ModuloTokenFilter(new StandardFilter(standardTokenizer(buffer)),modCounts[j]);        posIncrAtt=stream.getAttribute(PositionIncrementAttribute.class);        while (stream.incrementToken()) {          tfPos+=posIncrAtt.getPositionIncrement();        }      }      long finish=System.currentTimeMillis();      System.out.println("ModCount: " + modCounts[j] + " Two fields took "+ (finish - start)+ " ms");      int sinkPos=0;      start=System.currentTimeMillis();      for (int i=0; i < 20; i++) {        teeStream=new TeeSinkTokenFilter(new StandardFilter(standardTokenizer(buffer)));        sink=new ModuloTokenFilter(teeStream.newSinkTokenStream(),modCounts[j]);        PositionIncrementAttribute posIncrAtt=teeStream.getAttribute(PositionIncrementAttribute.class);        while (teeStream.incrementToken()) {          sinkPos+=posIncrAtt.getPositionIncrement();        }        posIncrAtt=sink.getAttribute(PositionIncrementAttribute.class);        while (sink.incrementToken()) {          sinkPos+=posIncrAtt.getPositionIncrement();        }      }      finish=System.currentTimeMillis();      System.out.println("ModCount: " + modCounts[j] + " Tee fields took "+ (finish - start)+ " ms");      assertTrue(sinkPos + " does not equal: " + tfPos,sinkPos == tfPos);    }    System.out.println("- End Tokens: " + tokCount[k] + "-----");  }}  }
class C{  public NumericalToHistogram(DataSet dataSet,int n){  this(n);  fit(dataSet);}  }
class C{  void foo(){}  }
class C{  boolean draw(Graphics boardGraph,Coords c,int drawX,int drawY,boolean saveBoardImage){  Coords src;  boolean hasLoS=true;  if (this.boardView1.selected != null) {    src=this.boardView1.selected;  } else   if (this.boardView1.selectedEntity != null) {    src=this.boardView1.selectedEntity.getPosition();  } else {    src=null;  }  if ((src == null) || !this.boardView1.game.getBoard().contains(src)) {    return true;  }  if (saveBoardImage) {    return true;  }  Point p=new Point(drawX,drawY);  boolean highlight=gs.getBoolean(GUIPreferences.FOV_HIGHLIGHT);  boolean darken=gs.getBoolean(GUIPreferences.FOV_DARKEN);  if ((darken || highlight) && (this.boardView1.game.getPhase() == Phase.PHASE_MOVEMENT)) {    final int pad=0;    final int lw=7;    boolean sensorsOn=boardView1.game.getOptions().booleanOption("tacops_sensors");    boolean doubleBlindOn=boardView1.game.getOptions().booleanOption("double_blind");    boolean inclusiveSensorsOn=boardView1.game.getOptions().booleanOption("inclusive_sensor_range");    boolean targetIlluminated=false;    for (    Entity target : this.boardView1.game.getEntitiesVector(c)) {      targetIlluminated|=target.isIlluminated();    }    if (!targetIlluminated) {      int lightLvl=boardView1.game.isPositionIlluminated(c);      targetIlluminated=lightLvl != Game.ILLUMINATED_NONE;    }    final int max_dist;    if ((boardView1.selectedEntity != null) && doubleBlindOn) {      max_dist=this.boardView1.game.getPlanetaryConditions().getVisualRange(this.boardView1.selectedEntity,targetIlluminated);    } else {      max_dist=60;    }    final Color transparent_gray=new Color(0,0,0,gs.getInt(GUIPreferences.FOV_DARKEN_ALPHA));    final Color transparent_light_gray=new Color(0,0,0,gs.getInt(GUIPreferences.FOV_DARKEN_ALPHA) / 2);    final Color selected_color=new Color(50,80,150,70);    int dist=src.distance(c);    int visualRange=30;    int minSensorRange=0;    int maxSensorRange=0;    if (dist == 0) {      this.boardView1.drawHexBorder(boardGraph,p,selected_color,pad,lw);    } else     if (dist < max_dist) {      LosEffects los=getCachedLosEffects(src,c);      if (null != this.boardView1.selectedEntity) {        if (doubleBlindOn) {          visualRange=Compute.getVisualRange(this.boardView1.game,this.boardView1.selectedEntity,los,targetIlluminated);        }        int bracket=Compute.getSensorRangeBracket(this.boardView1.selectedEntity,null,cachedAllECMInfo);        int range=Compute.getSensorRangeByBracket(this.boardView1.game,this.boardView1.selectedEntity,null,los);        maxSensorRange=bracket * range;        minSensorRange=Math.max((bracket - 1) * range,0);        if (inclusiveSensorsOn) {          minSensorRange=0;        }      }      if (!doubleBlindOn) {        visualRange=dist;      }      if (!los.canSee() || (dist > visualRange)) {        if (darken) {          if (sensorsOn && (dist > minSensorRange) && (dist <= maxSensorRange)) {            boardView1.drawHexLayer(p,boardGraph,transparent_light_gray,false);          } else {            boardView1.drawHexLayer(p,boardGraph,transparent_gray,true);          }        }        hasLoS=false;      } else       if (highlight) {        Iterator<Integer> itR=ringsRadii.iterator();        Iterator<Color> itC=ringsColors.iterator();        while (itR.hasNext() && itC.hasNext()) {          int dt=itR.next();          Color ct=itC.next();          if (dist <= dt) {            boardView1.drawHexLayer(p,boardGraph,ct,false);            break;          }        }      }    } else {      if (darken) {        this.boardView1.drawHexLayer(p,boardGraph,transparent_gray,true);      }      hasLoS=false;    }  }  return hasLoS;}  }
class C{  public Builder coordA(Double coordA){  this.coordA=coordA;  return this;}  }
class C{  public void testExtractLineIndexAtEndpointWithZeroLenComponents(){  checkExtractLine("MULTILINESTRING ((0 0, 10 0), (10 0, 10 0), (20 0, 25 0, 30 0))",10,-1,"LINESTRING (20 0, 25 0, 29 0)");  checkExtractLine("MULTILINESTRING ((0 0, 10 0), (10 0, 10 0), (20 0, 25 0, 30 0))",5,10,"LINESTRING (5 0, 10 0)");  checkExtractLine("MULTILINESTRING ((0 0, 10 0), (10 0, 10 0), (10 0, 10 0), (20 0, 25 0, 30 0))",10,10,"LINESTRING (10 0, 10 0)");  checkExtractLine("MULTILINESTRING ((0 0, 10 0), (10 0, 10 0), (10 0, 10 0), (10 0, 10 0), (20 0, 25 0, 30 0))",10,-10,"LINESTRING (10 0, 10 0)");}  }
class C{  public String requestStatistics(){  return "unsupported";}  }
class C{  @Override public synchronized CloseableReference<T> clone(){  Preconditions.checkState(isValid());  return new CloseableReference<T>(mSharedReference);}  }
class C{  @BeforeClass() public static void initClass() throws SQLException {  createTable("resultsSetReadingTest","id int not null primary key auto_increment, test int");  if (testSingleHost) {    Statement st=sharedConnection.createStatement();    st.execute("INSERT INTO resultsSetReadingTest (test) values (1), (2), (3)");  }}  }
class C{  public boolean standard_local_names(){  return soot.PhaseOptions.getBoolean(options,"standard-local-names");}  }
class C{  public static boolean isSystemBarOnBottom(Context ctx){  WindowManager wm=(WindowManager)ctx.getSystemService(Context.WINDOW_SERVICE);  DisplayMetrics metrics=new DisplayMetrics();  wm.getDefaultDisplay().getMetrics(metrics);  Configuration cfg=ctx.getResources().getConfiguration();  boolean canMove=(metrics.widthPixels != metrics.heightPixels && cfg.smallestScreenWidthDp < 600);  return (!canMove || metrics.widthPixels < metrics.heightPixels);}  }
class C{  public static String outputLocation(IClasspathEntry cp,IJavaProject project){  IPath out=cp.getOutputLocation();  if (out == null) {    try {      out=project.getOutputLocation();      if (out != null) {        String path=project.getProject().getLocation().toOSString() + File.separator + ".."+ File.separator+ project.getOutputLocation().toOSString();        return new File(path).getCanonicalPath();      }    } catch (    final Exception exc) {      throw new RuntimeException(exc);    }  } else {    return out.toOSString();  }  IFile outDir=ResourceUtils.workspaceRoot().getFile(cp.getPath());  return outDir.getLocation().toOSString();}  }
class C{  public static long quantile(long[] values,double quantile){  if (values == null)   throw new IllegalArgumentException("Values cannot be null.");  if (quantile < 0.0 || quantile > 1.0)   throw new IllegalArgumentException("Quantile must be between 0.0 and 1.0");  long[] copy=new long[values.length];  System.arraycopy(values,0,copy,0,copy.length);  Arrays.sort(copy);  int index=(int)(copy.length * quantile);  return copy[index];}  }
class C{  public static void executeCommand(String command,Tab tab,String tag,Context context){  Intent i=new Intent(com.kerneladiutor.library.action.Intent.EXECUTE_COMMAND);  i.putExtra(com.kerneladiutor.library.action.Intent.COMMAND,command);  i.putExtra(com.kerneladiutor.library.action.Intent.TAB,tab);  i.putExtra(com.kerneladiutor.library.action.Intent.TAG,tag);  context.sendBroadcast(i);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case FunctionblockPackage.PRIMITIVE_PARAM__TYPE:    return getType();case FunctionblockPackage.PRIMITIVE_PARAM__CONSTRAINT_RULE:  return getConstraintRule();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public int receiveMessage(Message m,DTNHost from){  int retVal=this.router.receiveMessage(m,from);  if (retVal == MessageRouter.RCV_OK) {    m.addNodeOnPath(this);  }  return retVal;}  }
class C{  public void removeHandler(String path){  getDispatchHandler().removeHandler(path);}  }
class C{  private static void registerImage(String key,String partialURL){  try {    ImageDescriptor id=ImageDescriptor.createFromURL(new URL(ICON_BASE_URL,partialURL));    imageRegistry.put(key,id);    imageDescriptors.put(key,id);  } catch (  Exception e) {    Trace.trace(Trace.SEVERE,"Error registering image " + key + " from "+ partialURL,e);  }}  }
class C{  public static boolean isMultiYear(int field){  return (field == DECADE || field == CENTURY || field == MILLENIUM);}  }
class C{  public String table(){  return tableId.table();}  }
class C{  public DataAccessException convertHibernateAccessException(GuzzException ex){  if (getJdbcExceptionTranslator() != null && ex instanceof JDBCException) {    return convertJdbcAccessException((JDBCException)ex,getJdbcExceptionTranslator());  }  return TransactionManagerUtils.convertGuzzAccessException(ex);}  }
class C{  @Override public String[] list() throws IOException {  return getJar().list(getPath());}  }
class C{  protected boolean checkStorageFileSystemExistsInDB(String nativeGuid) throws IOException {  URIQueryResultList result=new URIQueryResultList();  _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getFileSystemNativeGUIdConstraint(nativeGuid),result);  if (result.iterator().hasNext()) {    return true;  }  return false;}  }
class C{  public List<JCCompilationUnit> enterTrees(List<JCCompilationUnit> roots){  if (!taskListener.isEmpty()) {    for (    JCCompilationUnit unit : roots) {      TaskEvent e=new TaskEvent(TaskEvent.Kind.ENTER,unit);      taskListener.started(e);    }  }  enter.main(roots);  if (!taskListener.isEmpty()) {    for (    JCCompilationUnit unit : roots) {      TaskEvent e=new TaskEvent(TaskEvent.Kind.ENTER,unit);      taskListener.finished(e);    }  }  if (needRootClasses || sourceOutput || stubOutput) {    ListBuffer<JCClassDecl> cdefs=new ListBuffer<>();    for (    JCCompilationUnit unit : roots) {      for (List<JCTree> defs=unit.defs; defs.nonEmpty(); defs=defs.tail) {        if (defs.head instanceof JCClassDecl)         cdefs.append((JCClassDecl)defs.head);      }    }    rootClasses=cdefs.toList();  }  for (  JCCompilationUnit unit : roots) {    inputFiles.add(unit.sourcefile);  }  return roots;}  }
class C{  public void updateLockBatch(Object batchId,DLockBatch newBatch) throws InterruptedException {  final boolean isDebugEnabled_DLS=logger.isTraceEnabled(LogMarker.DLS);  if (isDebugEnabled_DLS) {    logger.trace(LogMarker.DLS,"[DLockGrantor.updateLockBatch] enter: {}",batchId);  }synchronized (this.batchLocks) {    waitWhileInitializing();    if (!acquireDestroyReadLock(0)) {      waitUntilDestroyed();      checkDestroyed();    }    try {      checkDestroyed();      final DLockBatch oldBatch=(DLockBatch)this.batchLocks.get(batchId);      if (oldBatch != null) {        this.batchLocks.put(batchId,newBatch);      }    }  finally {      releaseDestroyReadLock();    }  }  if (isDebugEnabled_DLS) {    logger.trace(LogMarker.DLS,"[DLockGrantor.updateLockBatch] exit: {}",batchId);  }}  }
class C{  public static boolean testPlaneSphere(double a,double b,double c,double d,double centerX,double centerY,double centerZ,double radius){  double denom=Math.sqrt(a * a + b * b + c * c);  double dist=(a * centerX + b * centerY + c * centerZ + d) / denom;  return -radius <= dist && dist <= radius;}  }
class C{  public static void validateCompositeData(CompositeData cd){  if (cd == null) {    throw new NullPointerException("Null CompositeData");  }  CompositeType type=cd.getCompositeType();  boolean currentVersion=true;  if (!isTypeMatched(threadInfoCompositeType,type)) {    currentVersion=false;    if (!isTypeMatched(threadInfoV5CompositeType,type)) {      throw new IllegalArgumentException("Unexpected composite type for ThreadInfo");    }  }  CompositeData[] stackTraceData=(CompositeData[])cd.get(STACK_TRACE);  if (stackTraceData == null) {    throw new IllegalArgumentException("StackTraceElement[] is missing");  }  if (stackTraceData.length > 0) {    StackTraceElementCompositeData.validateCompositeData(stackTraceData[0]);  }  if (currentVersion) {    CompositeData li=(CompositeData)cd.get(LOCK_INFO);    if (li != null) {      if (!isTypeMatched(lockInfoCompositeType,li.getCompositeType())) {        throw new IllegalArgumentException("Unexpected composite type for \"" + LOCK_INFO + "\" attribute.");      }    }    CompositeData[] lms=(CompositeData[])cd.get(LOCKED_MONITORS);    if (lms == null) {      throw new IllegalArgumentException("MonitorInfo[] is null");    }    if (lms.length > 0) {      MonitorInfoCompositeData.validateCompositeData(lms[0]);    }    CompositeData[] lsyncs=(CompositeData[])cd.get(LOCKED_SYNCS);    if (lsyncs == null) {      throw new IllegalArgumentException("LockInfo[] is null");    }    if (lsyncs.length > 0) {      if (!isTypeMatched(lockInfoCompositeType,lsyncs[0].getCompositeType())) {        throw new IllegalArgumentException("Unexpected composite type for \"" + LOCKED_SYNCS + "\" attribute.");      }    }  }}  }
class C{  protected void parseImport(InStream in) throws IOException {  String movieName=in.readString();  int count=in.readUI16();  String[] importNames=new String[count];  int[] importIds=new int[count];  for (int i=0; i < count; i++) {    importIds[i]=in.readUI16();    importNames[i]=in.readString();  }  tagtypes.tagImport(movieName,importNames,importIds);}  }
class C{  public final void runAlgorithms(Households hh){  for (int i=0; i < this.householdAlgorithms.size(); i++) {    HouseholdAlgorithm algorithm=this.householdAlgorithms.get(i);    log.info("Running algorithm " + algorithm.getClass().getName());    Counter c=new Counter("  household # ");    for (    Household household : hh.getHouseholds().values()) {      algorithm.run(household);      c.incCounter();    }    c.printCounter();    log.info("Done running algorithm.");  }}  }
class C{  @DSComment("Data structure only") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:01.391 -0500",hash_original_method="053704FA5AD46F36CEE00CE492DC93E4",hash_generated_method="0F2EAA8A9FA79AE5D6CEE9645500DEB9") public boolean hasSpeed(){  return mHasSpeed;}  }
class C{  public BasicTextAreaUI(){  super();}  }
class C{  protected void prepare(){  StringBuffer sb=new StringBuffer("AD_PInstance_ID=").append(getAD_PInstance_ID());  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (name.equals("DateAcct")) {      p_DateAcct_From=(Timestamp)para[i].getParameter();      p_DateAcct_To=(Timestamp)para[i].getParameter_To();    } else     if (name.equals("Account_ID"))     p_Account_ID=((BigDecimal)para[i].getParameter()).intValue(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }}  }
class C{  public <U>SimpleReactStream<U> fromStreamAsync(final Stream<? extends Supplier<U>> actions){  return new SimpleReactStreamImpl<U>(this,actions.map(null));}  }
class C{  @Override public void checkStatus(Server server,String status) throws CheckException {  if (server.getStatus().name().equalsIgnoreCase(status)) {    throw new CheckException("Error : Server " + server.getName() + " is already "+ status+ "ED");  }}  }
class C{  static public Locator center(){  return center(false);}  }
class C{  public boolean isNull(){  return (this.value == null);}  }
class C{  public strike addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public HeapBuffer reset(byte[] array){  bytes.memory.reset(array);  clear();  return this;}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public void putField(final Type owner,final String name,final Type type){  fieldInsn(Opcodes.PUTFIELD,owner,name,type);}  }
class C{  public void addPoint(double weight,int targetClass){  counts[targetClass]+=weight;  sumOfWeights+=weight;}  }
class C{  public ConfigurationDBAdapter configure(URL url) throws RuntimeException {  if (log.isInfoEnabled()) {    log.info("Configuring from url: " + url.toString());  }  try {    ConfigurationDBAdapterParser.doConfigure(this,url.openStream(),url.toString());    return this;  } catch (  IOException ioe) {    throw new RuntimeException("could not configure from URL: " + url,ioe);  }}  }
class C{  public static void checkState(boolean expression){  if (!expression) {    throw new IllegalStateException();  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:04.127 -0400",hash_original_method="8B615132CA365FD6AAA05512132E9CB5",hash_generated_method="5DE0A1E3CF7EED692E50AB07609A20B8") protected int engineGetDigestLength(){  return DIGEST_LENGTH;}  }
class C{  private Mappers assignMappers(Collection<HadoopInputSplit> splits,HadoopMapReducePlanTopology top) throws IgniteCheckedException {  Mappers res=new Mappers();  for (  HadoopInputSplit split : splits) {    Collection<UUID> nodeIds=affinityNodesForSplit(split,top);    UUID node=bestMapperNode(nodeIds,top);    assert node != null;    res.add(split,node);  }  return res;}  }
class C{  Type toType(Environment env,Context ctx){  env.error(where,"invalid.type.expr");  return Type.tError;}  }
class C{  public InlineQueryResultDocument.InlineQueryResultDocumentBuilder mimeType(String mimeType){  this.mime_type=mimeType;  return this;}  }
class C{  public DigestAuthentication(boolean isProxy,URL url,String realm,String authMethod,PasswordAuthentication pw,Parameters params){  super(isProxy ? PROXY_AUTHENTICATION : SERVER_AUTHENTICATION,AuthScheme.DIGEST,url,realm);  this.authMethod=authMethod;  this.pw=pw;  this.params=params;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:33.707 -0500",hash_original_method="2940DDB99DA35A45D241AA850C69BABB",hash_generated_method="233D9C497249B4182F6C699E5A5AEB4F") public ProxySelectorRoutePlanner(SchemeRegistry schreg,ProxySelector prosel){  if (schreg == null) {    throw new IllegalArgumentException("SchemeRegistry must not be null.");  }  schemeRegistry=schreg;  proxySelector=prosel;}  }
class C{  void createComputeProgram() throws IOException {  int program=glCreateProgram();  int cshader=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/feedbackSsboTriangle.glsl",GL_COMPUTE_SHADER);  int random=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/random.glsl",GL_COMPUTE_SHADER);  int randomCommon=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/randomCommon.glsl",GL_COMPUTE_SHADER,"330");  glAttachShader(program,cshader);  glAttachShader(program,random);  glAttachShader(program,randomCommon);  glLinkProgram(program);  int linked=glGetProgrami(program,GL_LINK_STATUS);  String programLog=glGetProgramInfoLog(program);  if (programLog.trim().length() > 0) {    System.err.println(programLog);  }  if (linked == 0) {    throw new AssertionError("Could not link program");  }  this.computeProgram=program;}  }
class C{  public NTPServerTimeProvider(String[] ntpServers) throws UnknownHostException, SocketException {  client=new NTPUDPClient();  setServers(ntpServers);  if (servers.isEmpty()) {    throw new UnknownHostException(ntpServers[0]);  }  setSocketTimeout();}  }
class C{  private String readParameter(String key){  Cursor c=null;  try {    String[] whereArg=new String[]{key};    c=mLocalContentResolver.query(RcsSettingsData.CONTENT_URI,null,WHERE_CLAUSE,whereArg,null);    CursorUtil.assertCursorIsNotNull(c,RcsSettingsData.CONTENT_URI);    if (!c.moveToFirst()) {      throw new IllegalArgumentException("Illegal setting key:" + key);    }    return c.getString(c.getColumnIndexOrThrow(RcsSettingsData.KEY_VALUE));  }  finally {    if (c != null) {      c.close();    }  }}  }
class C{  private void addContact(){  Intent intent=new Intent(this,ViewActivity.class);  startActivity(intent);}  }
class C{  public void lostOwnership(Clipboard clipboard,Transferable contents){}  }
class C{  public byte lookup(Segment text,int offset,int length){  if (length == 0) {    return Token.NULL;  }  Keyword k=map[getSegmentMapKey(text,offset,length)];  while (k != null) {    if (length != k.keyword.length) {      k=k.next;      continue;    }    if (SyntaxUtilities.regionMatches(ignoreCase,text,offset,k.keyword)) {      return k.id;    }    k=k.next;  }  return Token.NULL;}  }
class C{  private void process(){  StructuredSelection selection=(StructuredSelection)treeViewer.getSelection();  if (selection.getFirstElement() instanceof IStorageDataProvider) {    showStorage((IStorageDataProvider)selection.getFirstElement(),InspectIT.getDefault().getInspectITStorageManager());  } else   if (selection.getFirstElement() instanceof ILocalStorageDataProvider) {    showStorage((ILocalStorageDataProvider)selection.getFirstElement(),InspectIT.getDefault().getInspectITStorageManager());  } else {    TreeSelection treeSelection=(TreeSelection)selection;    TreePath path=treeSelection.getPaths()[0];    if (null != path) {      boolean expanded=treeViewer.getExpandedState(path);      if (expanded) {        treeViewer.collapseToLevel(path,1);      } else {        treeViewer.expandToLevel(path,1);      }    }  }}  }
class C{  public Message build(){  if (registrationIds.isEmpty()) {    throw new IllegalArgumentException("You must specify a destination!");  }  return new Message(collapseKey,ttl,delayWhileIdle,data,registrationIds,priority);}  }
class C{  public void trim(){  StyledDocument doc;  int size;  int maxSize;  int pos;  doc=m_Output.getStyledDocument();  size=doc.getLength();  maxSize=((Integer)m_SpinnerMaxSize.getValue()).intValue();  if (size > maxSize) {    try {      pos=size - maxSize;      while (!doc.getText(pos,1).equals("\n")) {        pos++;      }      while (doc.getText(pos,1).equals("\n")) {        pos++;      }      doc.remove(0,pos);    } catch (    Exception ex) {      if (DEBUG) {        System.out.println(ex);      }    }  }  m_Output.setCaretPosition(doc.getLength());}  }
class C{  @Override protected void onRestoreInstanceState(@NonNull Bundle savedInstanceState){  super.onRestoreInstanceState(savedInstanceState);  mExpandableAdapter.onRestoreInstanceState(savedInstanceState);}  }
class C{  public void unregisterObjectsForNotification(final Observer observer){  if (observer != null) {    registrator.removeObserver(observer);  }}  }
class C{  private Base64(){}  }
class C{  public CLIQUEUnit<V> leftNeighbor(CLIQUEUnit<V> unit,int dim){  CLIQUEInterval i=unit.getInterval(dim);  for (  CLIQUEUnit<V> u : getDenseUnits()) {    if (u.containsLeftNeighbor(i)) {      return u;    }  }  return null;}  }
class C{  public void testTextAreas2(){  final JPanel panel=new JPanel(new GridBagLayout());  final JTextField field1=new JTextField();  field1.setPreferredSize(new Dimension(15,20));  final JTextField field2=new JTextField();  field2.setPreferredSize(new Dimension(15,20));  final JTextField field3=new JTextField();  field3.setPreferredSize(new Dimension(100,20));  GridBagConverter converter=new GridBagConverter();  converter.addComponent(field1,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  converter.addComponent(field2,new GridConstraints(0,1,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  converter.addComponent(field3,new GridConstraints(1,0,1,2,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  applyConversionResults(panel,converter);  assertEquals(100,panel.getPreferredSize().width);}  }
class C{  public static String arrayToStr(Object[] array,String encloseBy,String separator) throws IllegalArgumentException {  if (array == null || array.length == 0)   throw new IllegalArgumentException("Supply a valid array");  if (encloseBy == null)   throw new IllegalArgumentException("encloseBy cannot be null");  if (separator == null)   throw new IllegalArgumentException("separator cannot be null");  StringBuffer str=new StringBuffer("");  for (int i=0; i < array.length; i++) {    str.append(encloseBy);    str.append(array[i].toString());    str.append(encloseBy);    if (i < array.length - 1)     str.append(separator);  }  return str.toString();}  }
class C{  public static <T1,T2,T3,T4,T5,T6,T7,R>QuadFunction<T4,T5,T6,T7,R> partial7(final T1 t1,final T2 t2,final T3 t3,final HeptFunction<T1,T2,T3,T4,T5,T6,T7,R> heptFunc){  return null;}  }
class C{  @Override public void run(){  amIActive=true;  String[] shapefiles=new String[2];  String outputFile;  int progress;  int i, n, FID;  int oneHundredthTotal;  int numRecs;  ShapeType shapeType;  ShapeType outputShapeType=ShapeType.POLYGON;  GeometryFactory factory=new GeometryFactory();  com.vividsolutions.jts.geom.Geometry g1=null;  com.vividsolutions.jts.geom.Geometry g2=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  shapefiles[0]=args[0];  shapefiles[1]=args[1];  outputFile=args[2];  if ((shapefiles[0].length() <= 0) || (shapefiles[1].length() <= 0) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    com.vividsolutions.jts.geom.Geometry[] recJTSGeometries=null;    ArrayList<com.vividsolutions.jts.geom.Geometry> inputGeometryList=new ArrayList<com.vividsolutions.jts.geom.Geometry>();    com.vividsolutions.jts.geom.Geometry outputGeometry=null;    ShapeFile input1=new ShapeFile(shapefiles[0]);    shapeType=input1.getShapeType();    numRecs=input1.getNumberOfRecords();    if (shapeType.getBaseType() == ShapeType.POINT || shapeType.getBaseType() == ShapeType.MULTIPOINT) {      outputShapeType=ShapeType.POINT;    } else     if (shapeType.getBaseType() == ShapeType.POLYLINE && outputShapeType == ShapeType.POLYGON) {      outputShapeType=ShapeType.POLYLINE;    }    oneHundredthTotal=numRecs / 100;    progress=0;    n=0;    for (    ShapeFileRecord record : input1.records) {      if (record.getShapeType() != ShapeType.NULLSHAPE) {        recJTSGeometries=record.getGeometry().getJTSGeometries();        for (int a=0; a < recJTSGeometries.length; a++) {          recJTSGeometries[a].setUserData(record.getRecordNumber());          if (recJTSGeometries[a].isValid()) {            inputGeometryList.add(recJTSGeometries[a]);          } else {            System.out.println(record.getRecordNumber() + " is invalid.");          }        }      }      n++;      if (n >= oneHundredthTotal) {        n=0;        if (cancelOp) {          cancelOperation();          return;        }        progress++;        updateProgress("Loop 1 of " + 2 + ": Reading data:",progress);      }    }    g1=factory.buildGeometry(inputGeometryList);    inputGeometryList.clear();    ShapeFile input2=new ShapeFile(shapefiles[1]);    shapeType=input2.getShapeType();    numRecs=input2.getNumberOfRecords();    if (shapeType.getBaseType() == ShapeType.POINT || shapeType.getBaseType() == ShapeType.MULTIPOINT) {      outputShapeType=ShapeType.POINT;    } else     if (shapeType.getBaseType() == ShapeType.POLYLINE && outputShapeType == ShapeType.POLYGON) {      outputShapeType=ShapeType.POLYLINE;    }    oneHundredthTotal=numRecs / 100;    progress=0;    n=0;    for (    ShapeFileRecord record : input2.records) {      if (record.getShapeType() != ShapeType.NULLSHAPE) {        recJTSGeometries=record.getGeometry().getJTSGeometries();        for (int a=0; a < recJTSGeometries.length; a++) {          recJTSGeometries[a].setUserData(record.getRecordNumber());          if (recJTSGeometries[a].isValid()) {            inputGeometryList.add(recJTSGeometries[a]);          } else {            System.out.println(record.getRecordNumber() + " is invalid.");          }        }      }      n++;      if (n >= oneHundredthTotal) {        n=0;        if (cancelOp) {          cancelOperation();          return;        }        progress++;        updateProgress("Loop 2 of " + 2 + ": Reading data:",progress);      }    }    g2=factory.buildGeometry(inputGeometryList);    inputGeometryList.clear();    updateProgress("Performing operation (progress will not be updated):",-1);    try {      outputGeometry=g1.difference(g2);    } catch (    Exception ex) {      outputGeometry=com.vividsolutions.jts.operation.overlay.snap.SnapOverlayOp.difference(g1,g2);    }    ShapeFile output=null;    AttributeTable reader=input1.getAttributeTable();    int numFields=1 + reader.getFieldCount();    DBFField fields[]=new DBFField[numFields];    fields[0]=new DBFField();    fields[0].setName("FID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    for (int a=0; a < reader.getFieldCount(); a++) {      DBFField inputField=reader.getField(a);      fields[a + 1]=inputField;      if (inputField.getName().equals("FID")) {        fields[a + 1].setName("PARENT_FID");      }    }    output=new ShapeFile(outputFile,outputShapeType,fields);    output.setProjectionStringFromOtherShapefile(input1);    PreparedGeometry[] tests=new PreparedGeometry[g1.getNumGeometries()];    com.vividsolutions.jts.geom.Geometry[] testGs=new com.vividsolutions.jts.geom.Geometry[g1.getNumGeometries()];    int[] userData=new int[g1.getNumGeometries()];    for (int a=0; a < g1.getNumGeometries(); a++) {      tests[a]=PreparedGeometryFactory.prepare(g1.getGeometryN(a));      userData[a]=Integer.parseInt(g1.getGeometryN(a).getUserData().toString());      testGs[a]=g1.getGeometryN(a);    }    Object[][] attributeTableRecords=new Object[reader.getNumberOfRecords()][numFields];    for (int a=0; a < reader.getNumberOfRecords(); a++) {      Object[] rec=reader.nextRecord();      for (int b=0; b < numFields - 1; b++) {        attributeTableRecords[a][b + 1]=rec[b];      }    }    if (outputGeometry instanceof GeometryCollection) {      int numGeometries=outputGeometry.getNumGeometries();      oneHundredthTotal=(int)(numGeometries / 100.0);      progress=0;      n=0;      FID=0;      int parentRecNum=0;      for (int a=0; a < numGeometries; a++) {        parentRecNum=-99;        com.vividsolutions.jts.geom.Geometry gN=outputGeometry.getGeometryN(a);        if (gN instanceof com.vividsolutions.jts.geom.Point && outputShapeType == ShapeType.POINT) {          for (int m=0; m < tests.length; m++) {            if (tests[m].overlaps(gN) || gN.distance(testGs[m]) < 0.0001) {              parentRecNum=userData[m];              break;            }          }          Coordinate p=gN.getCoordinate();          whitebox.geospatialfiles.shapefile.Point wbGeometry=new whitebox.geospatialfiles.shapefile.Point(p.x,p.y);          FID++;          Object[] rowData=attributeTableRecords[parentRecNum - 1];          rowData[0]=new Double(FID);          output.addRecord(wbGeometry,rowData);        } else         if (gN instanceof LineString && outputShapeType == ShapeType.POLYLINE) {          for (int m=0; m < tests.length; m++) {            if (tests[m].overlaps(gN) || gN.distance(testGs[m]) < 0.0001) {              parentRecNum=userData[m];              break;            }          }          LineString ls=(LineString)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<ShapefilePoint>();          int[] parts={0};          Coordinate[] coords=ls.getCoordinates();          for (i=0; i < coords.length; i++) {            pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());          FID++;          Object[] rowData=attributeTableRecords[parentRecNum - 1];          rowData[0]=new Double(FID);          output.addRecord(wbGeometry,rowData);        } else         if (gN instanceof com.vividsolutions.jts.geom.Polygon && outputShapeType == ShapeType.POLYLINE) {          for (int m=0; m < tests.length; m++) {            if (tests[m].contains(gN.getInteriorPoint())) {              parentRecNum=userData[m];              break;            }          }          com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<ShapefilePoint>();          int[] parts=new int[p.getNumInteriorRing() + 1];          Coordinate[] coords=p.getExteriorRing().getCoordinates();          if (Topology.isClockwisePolygon(coords)) {            for (i=0; i < coords.length; i++) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          } else {            for (i=coords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          }          for (int b=0; b < p.getNumInteriorRing(); b++) {            parts[b + 1]=pnts.size();            coords=p.getInteriorRingN(b).getCoordinates();            if (Topology.isClockwisePolygon(coords)) {              for (i=coords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            } else {              for (i=0; i < coords.length; i++) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            }          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());          FID++;          Object[] rowData=attributeTableRecords[parentRecNum - 1];          rowData[0]=new Double(FID);          output.addRecord(wbGeometry,rowData);        } else         if (gN instanceof com.vividsolutions.jts.geom.Polygon && outputShapeType == ShapeType.POLYGON) {          for (int m=0; m < tests.length; m++) {            if (tests[m].contains(gN.getInteriorPoint())) {              parentRecNum=userData[m];              break;            }          }          com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<>();          int[] parts=new int[p.getNumInteriorRing() + 1];          Coordinate[] coords=p.getExteriorRing().getCoordinates();          if (Topology.isClockwisePolygon(coords)) {            for (i=0; i < coords.length; i++) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          } else {            for (i=coords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          }          for (int b=0; b < p.getNumInteriorRing(); b++) {            parts[b + 1]=pnts.size();            coords=p.getInteriorRingN(b).getCoordinates();            if (Topology.isClockwisePolygon(coords)) {              for (i=coords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            } else {              for (i=0; i < coords.length; i++) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            }          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.Polygon wbGeometry=new whitebox.geospatialfiles.shapefile.Polygon(parts,pl.getPointsArray());          FID++;          Object[] rowData=attributeTableRecords[parentRecNum - 1];          rowData[0]=new Double(FID);          output.addRecord(wbGeometry,rowData);        } else {        }        n++;        if (n >= oneHundredthTotal) {          n=0;          if (cancelOp) {            cancelOperation();            return;          }          progress++;          updateProgress("Saving output file",progress);        }      }    } else {      showFeedback("An error was encountered when saving the output file.");      return;    }    output.write();    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  boolean isStaticReference(JCTree tree){  if (tree.hasTag(SELECT)) {    Symbol lsym=TreeInfo.symbol(((JCFieldAccess)tree).selected);    if (lsym == null || lsym.kind != TYP) {      return false;    }  }  return true;}  }
class C{  static CountingFragment newInstance(int num){  CountingFragment f=new CountingFragment();  Bundle args=new Bundle();  args.putInt("num",num);  f.setArguments(args);  return f;}  }
class C{  public void test_ConstructorIF(){  whm=new WeakHashMap(50,0.5f);  for (int i=0; i < 100; i++)   whm.put(keyArray[i],valueArray[i]);  for (int i=0; i < 100; i++)   assertTrue("Incorrect value retrieved",whm.get(keyArray[i]) == valueArray[i]);  WeakHashMap empty=new WeakHashMap(0,0.75f);  assertNull("Empty hashtable access",empty.get("nothing"));  empty.put("something","here");  assertTrue("cannot get element",empty.get("something") == "here");  try {    new WeakHashMap(50,-0.5f);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException e) {  }  try {    new WeakHashMap(-50,0.5f);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException e) {  }}  }
class C{  public void clear(){  this.map.clear();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return stack.getUIMgrSafe().get("default_audio_language","English");}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case GamlPackage.EQUATION_REF__REF:    return ref != null;}return super.eIsSet(featureID);}  }
class C{  void encode(Encoder encoder,Writer out,String str,int j) throws IOException {  out.write(str,0,j);  final int n=str.length();  _input.clear();  _output.clear();  final char[] inputArray=_input.array();  final char[] outputArray=_output.array();  for (; ; ) {    final int remainingInput=n - j;    final int startPosition=_input.position();    final int batchSize=Math.min(remainingInput,_input.remaining());    str.getChars(j,j + batchSize,inputArray,startPosition);    _input.limit(startPosition + batchSize);    for (; ; ) {      CoderResult cr=encoder.encodeArrays(_input,_output,batchSize == remainingInput);      if (cr.isUnderflow()) {        break;      }      out.write(outputArray,0,_output.position());      _output.clear();    }    j+=_input.position() - startPosition;    if (j == n) {      out.write(outputArray,0,_output.position());      return;    }    _input.compact();  }}  }
class C{  public int addObject(int id,Object o){  if (map.size() > maxElements * 2) {    Iterator<Integer> it=map.keySet().iterator();    while (it.hasNext()) {      Integer k=it.next();      if (k.intValue() + maxElements < lastId) {        it.remove();      }    }  }  if (id > lastId) {    lastId=id;  }  map.put(id,o);  cacheId=id;  cache=o;  return id;}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="EI_EXPOSE_REP") @Override public String[] validBaudRates(){  return validSpeeds;}  }
class C{  public UnicastRef2(LiveRef liveRef){  super(liveRef);}  }
class C{  public static OptimizationPlanElement[] createOptimizationPlan(OptOptions options){  if (masterPlan == null) {    initializeMasterPlan();  }  ArrayList<OptimizationPlanElement> temp=new ArrayList<OptimizationPlanElement>();  for (  OptimizationPlanElement element : masterPlan) {    if (element.shouldPerform(options)) {      temp.add(element);    }  }  if (VM.writingBootImage) {    masterPlan=null;  }  return toArray(temp);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void main(String[] args){  log.debug("starting testing getMetrics");  new MonitorClient().getMetrics();  log.debug("starting testing getMetrics");}  }
class C{  public String name(){  return name;}  }
class C{  public void release(int number){  set.add(number);}  }
class C{  public Tanh(){  super(Number.class,Number.class);}  }
class C{  @Override public void execute(StepInstance stepInstance,String temporaryFileDirectory){  Utilities.verboseLog(10," FastaFileLoadStep - starting");  if (LOGGER.isDebugEnabled()) {    LOGGER.debug("FastaFileLoadStep.fastaFileLoader : " + fastaFileLoader);  }  String providedPath;  if (overridingFastaFileName == null || overridingFastaFileName.isEmpty()) {    providedPath=stepInstance.getParameters().get(FASTA_FILE_PATH_KEY);  } else {    providedPath=stepInstance.buildFullyQualifiedFilePath(temporaryFileDirectory,overridingFastaFileName);  }  String analysisJobNames=stepInstance.getParameters().get(ANALYSIS_JOB_NAMES_KEY);  final String completionJobName=stepInstance.getParameters().get(COMPLETION_JOB_NAME_KEY);  boolean useMatchLookupService=true;  if (stepInstance.getParameters().containsKey(USE_MATCH_LOOKUP_SERVICE)) {    useMatchLookupService=Boolean.parseBoolean(stepInstance.getParameters().get(USE_MATCH_LOOKUP_SERVICE));  }  if (LOGGER.isDebugEnabled()) {    LOGGER.debug("Fasta file path to be loaded: " + providedPath);  }  if (providedPath != null) {    InputStream fastaFileInputStream=null;    String fastaFileInputStatusMessage;    try {      Path path=Paths.get(providedPath);      System.out.println(getTimeNow() + " Loading file " + providedPath);      if (Files.exists(path)) {        fastaFileInputStatusMessage=" - fasta file exists";        if (Files.isReadable(path)) {          if (Files.size(path) == 0) {            if (path.getFileName().toString().contains("orfs")) {              System.out.println("\nThe ORF predication tool EMBOSS: getorf produced an empty result file (" + providedPath + ").");              System.out.println("Therefore there are no proteins for InterproScan to analyse");              System.out.println("Finishing...");              System.exit(0);            }            System.out.println("\nThe FASTA input file " + providedPath + " is empty.");            System.out.println("Therefore there are no sequences for InterproScan to analyse");            System.out.println("Finishing...");            System.exit(0);          }          try {            fastaFileInputStream=Files.newInputStream(path);          } catch (          FileNotFoundException e) {            System.out.println("\nERROR: Could not find FASTA input file " + path.toAbsolutePath().toString());            System.out.println("Exiting...");            System.exit(2);          }        } else {          System.out.println("\nERROR: The FASTA input file " + providedPath + " is visible but cannot be read.  Please check the file permissions.");          System.out.println("Exiting...");          System.exit(2);        }      } else {        fastaFileInputStatusMessage=" - fasta file does not exist and absolute file path did not resolve. ";        if (LOGGER.isDebugEnabled()) {          LOGGER.debug("The file " + providedPath + " does not exist.  Attempting to access this file using the ClassLoader.");        }        fastaFileInputStream=FastaFileLoadStep.class.getClassLoader().getResourceAsStream(providedPath);      }      boolean stdinOn=false;      if (providedPath.equals("-")) {        fastaFileInputStream=System.in;        stdinOn=true;      }      if ((!stdinOn) && fastaFileInputStream == null) {        System.out.println("Cannot find the fasta file located at " + providedPath + fastaFileInputStatusMessage);        System.out.println("Exiting...");        System.exit(2);      }      if (LOGGER.isDebugEnabled()) {        LOGGER.debug("Number of jobs in i5: " + jobs.getJobList().size());        for (        Job job4Debug : jobs.getAnalysisJobs().getJobList()) {          LOGGER.debug("SignatureLibraryRelease: " + job4Debug.getId() + ": "+ job4Debug.getLibraryRelease().getLibrary().getName()+ ", "+ job4Debug.getLibraryRelease().getVersion()+ ", "+ "active: "+ job4Debug.isActive());          if (job4Debug.getLibraryRelease().getLibrary().getName().equalsIgnoreCase("gene3d")) {            LOGGER.debug("Gene3d: " + job4Debug.getLibraryRelease().getVersion() + " - "+ job4Debug.getSteps());          }          if (job4Debug.getLibraryRelease().getLibrary().getName().equalsIgnoreCase("panther")) {            LOGGER.debug("panther: " + job4Debug.getLibraryRelease().getVersion() + " - "+ job4Debug.getSteps());          }        }      }      Map<String,SignatureLibraryRelease> analysisJobMap=new HashMap<>();      Jobs analysisJobs;      if (analysisJobNames == null) {        analysisJobs=jobs.getActiveAnalysisJobs();        List<String> analysisJobIdList=analysisJobs.getJobIdList();        StringBuilder analysisJobNamesBuilder=new StringBuilder();        for (        String jobName : analysisJobIdList) {          if (analysisJobNamesBuilder.length() > 0) {            analysisJobNamesBuilder.append(',');          }          analysisJobNamesBuilder.append(jobName);        }        analysisJobNames=analysisJobNamesBuilder.toString();      } else {        analysisJobs=jobs.subset(StringUtils.commaDelimitedListToStringArray(analysisJobNames));      }      if (LOGGER.isDebugEnabled()) {        LOGGER.debug("analysisJobs: " + analysisJobs);        LOGGER.debug("analysisJobNames: " + analysisJobNames);      }      for (      Job analysisJob : analysisJobs.getJobList()) {        SignatureLibraryRelease signatureLibraryRelease=analysisJob.getLibraryRelease();        if (signatureLibraryRelease != null) {          analysisJobMap.put(signatureLibraryRelease.getLibrary().getName().toUpperCase(),signatureLibraryRelease);          if (LOGGER.isDebugEnabled()) {            LOGGER.debug("Name: " + signatureLibraryRelease.getLibrary().getName() + " version: "+ signatureLibraryRelease.getVersion()+ " name: "+ signatureLibraryRelease.getLibrary().getName());          }        }      }      if (LOGGER.isDebugEnabled()) {        LOGGER.debug("analysisJobMap:" + analysisJobMap);      }      String analysesPrintOutStr=getTimeNow() + " Running the following analyses:\n";      String analysesDisplayStr=getTimeNow() + " Running the following analyses:\n";      if (LOGGER.isDebugEnabled()) {        LOGGER.debug(analysesPrintOutStr + Arrays.asList(analysisJobNames));      }      StringBuilder analysesToRun=new StringBuilder();      StringJoiner analysesToDisplay=new StringJoiner(",");      for (      String key : analysisJobMap.keySet()) {        analysesToRun.append(analysisJobMap.get(key).getLibrary().getName() + "-" + analysisJobMap.get(key));        analysesToDisplay.add(String.join("-",analysisJobMap.get(key).getLibrary().getName(),analysisJobMap.get(key).getVersion()));      }      if (LOGGER.isDebugEnabled()) {        LOGGER.debug(analysesPrintOutStr + Collections.singletonList(analysisJobNames));        LOGGER.debug(analysesDisplayStr + analysesToDisplay.toString());      }      System.out.println(analysesDisplayStr + "[" + analysesToDisplay.toString()+ "]");      Job completionJob=jobs.getJobById(completionJobName);      StepCreationSequenceLoadListener sequenceLoadListener=new StepCreationSequenceLoadListener(analysisJobs,completionJob,stepInstance.getParameters());      sequenceLoadListener.setStepInstanceDAO(stepInstanceDAO);      fastaFileLoader.loadSequences(fastaFileInputStream,sequenceLoadListener,analysisJobMap,useMatchLookupService);      LOGGER.debug("Finished loading sequences and creating step instances.");    } catch (    IOException e) {      e.printStackTrace();    } finally {      if (fastaFileInputStream != null) {        try {          fastaFileInputStream.close();        } catch (        IOException e) {          LOGGER.warn("Unable to cleanly close the InputStream from FASTA file " + providedPath);        }      }    }  }  Utilities.verboseLog(10," FastaFileLoadStep - done");}  }
class C{  public void startDigest(String title){  if (digestEnabled()) {    String attachmentTitle="STARTED";    SlackAttachment slackAttachment=new SlackAttachment(attachmentTitle,"",title,null);    slackAttachment.setColor("good");    slackSession.sendMessage(digestChannel,"",slackAttachment);  }}  }
class C{  private boolean containsCertChain(List<ArrayList<String>> certChainsNew,ArrayList<String> certFingerprints){  boolean hasCertChain=false;  for (  ArrayList<String> chain : certChainsNew) {    if (chain.size() == certFingerprints.size() && chain.containsAll(certFingerprints)) {      hasCertChain=true;      break;    }  }  return hasCertChain;}  }
class C{  public static boolean addSmiles(Context context,Spannable spannable){  boolean hasChanges=false;  for (  Entry<Pattern,Integer> entry : emoticons.entrySet()) {    Matcher matcher=entry.getKey().matcher(spannable);    while (matcher.find()) {      boolean set=true;      for (      ImageSpan span : spannable.getSpans(matcher.start(),matcher.end(),ImageSpan.class))       if (spannable.getSpanStart(span) >= matcher.start() && spannable.getSpanEnd(span) <= matcher.end())       spannable.removeSpan(span); else {        set=false;        break;      }      if (set) {        hasChanges=true;        Drawable drawable=context.getResources().getDrawable(entry.getValue());        drawable.setBounds(0,0,50,50);        ImageSpan imageSpan=new ImageSpan(drawable,ImageSpan.ALIGN_BOTTOM);        spannable.setSpan(imageSpan,matcher.start(),matcher.end(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);      }    }  }  return hasChanges;}  }
class C{  @Override protected void keyTyped(char par1,int par2){  tokenBox.textboxKeyTyped(par1,par2);  if (par2 == 28 || par2 == 156)   actionPerformed((GuiButton)buttonList.get(0));}  }
class C{  public CacheException(String s){  super(s);}  }
class C{  public String toString(){  return "Time=" + Float.toString(this.elapsedTime()) + " secs";}  }
class C{  public AttributeCertificateHolder(int digestedObjectType,ASN1ObjectIdentifier digestAlgorithm,ASN1ObjectIdentifier otherObjectTypeID,byte[] objectDigest){  holder=new Holder(new ObjectDigestInfo(digestedObjectType,otherObjectTypeID,new AlgorithmIdentifier(digestAlgorithm),Arrays.clone(objectDigest)));}  }
class C{  public DBFWriter(File dbfFile) throws DBFException {  try {    this.fileName=dbfFile.getAbsolutePath();    this.raf=new RandomAccessFile(dbfFile,"rw");    if (!dbfFile.exists() || dbfFile.length() == 0) {      this.header=new DBFHeader();      return;    }    header=new DBFHeader();    this.header.read(raf);    this.raf.seek(this.raf.length() - 1);  } catch (  FileNotFoundException e) {    throw new DBFException("Specified file is not found. " + e.getMessage());  }catch (  IOException e) {    throw new DBFException(e.getMessage() + " while reading header");  }  this.recordCount=this.header.numberOfRecords;}  }
class C{  protected void run(boolean resuming,boolean restoringFromCheckpoint){  run(resuming);}  }
class C{  public Terrain(int terrainSize,float scale,float minY,float maxY,String heightMapFile,String textureFile,int textInc) throws Exception {  this.terrainSize=terrainSize;  gameItems=new GameItem[terrainSize * terrainSize];  BufferedImage heightMapImage=ImageIO.read(getClass().getResourceAsStream(heightMapFile));  verticesPerCol=heightMapImage.getWidth() - 1;  verticesPerRow=heightMapImage.getHeight() - 1;  heightMapMesh=new HeightMapMesh(minY,maxY,heightMapImage,textureFile,textInc);  boundingBoxes=new Rectangle2D.Float[terrainSize][terrainSize];  for (int row=0; row < terrainSize; row++) {    for (int col=0; col < terrainSize; col++) {      float xDisplacement=(col - ((float)terrainSize - 1) / (float)2) * scale * HeightMapMesh.getXLength();      float zDisplacement=(row - ((float)terrainSize - 1) / (float)2) * scale * HeightMapMesh.getZLength();      GameItem terrainBlock=new GameItem(heightMapMesh.getMesh());      terrainBlock.setScale(scale);      terrainBlock.setPosition(xDisplacement,0,zDisplacement);      gameItems[row * terrainSize + col]=terrainBlock;      boundingBoxes[row][col]=getBoundingBox(terrainBlock);    }  }}  }
class C{  public String replicaSetName(){  return replicaSetName;}  }
class C{  public void cancel(String tag){  if (requestMap.containsKey(tag)) {    Request request=requestMap.remove(tag);    request.task.cancel(false);    if (LOG) {      Log.d(TAG,"Task " + request.key + "has been canceled.");    }  }}  }
class C{  public Object putForMetaRegion(Object key,Object value,byte[] deltaBytes,EntryEventImpl event,Object callbackArg,boolean isMetaRegionPutOp){  if (this.region == null) {    return PutOp.execute(this.pool,this.regionName,key,value,deltaBytes,event,Operation.CREATE,false,null,callbackArg,this.pool.getPRSingleHopEnabled(),isMetaRegionPutOp);  } else {    return PutOp.execute(this.pool,this.region,key,value,deltaBytes,event,Operation.CREATE,false,null,callbackArg,this.pool.getPRSingleHopEnabled());  }}  }
class C{  public final CC span(int... cells){  if (cells == null || cells.length == 0) {    setSpanX(LayoutUtil.INF);    setSpanY(1);  } else   if (cells.length == 1) {    setSpanX(cells[0]);    setSpanY(1);  } else {    setSpanX(cells[0]);    setSpanY(cells[1]);  }  return this;}  }
class C{  public boolean hasInstance(Scriptable value){  Scriptable proto=value.getPrototype();  while (proto != null) {    if (proto.equals(this))     return true;    proto=proto.getPrototype();  }  return false;}  }
class C{  public LocaleDateTimeEditor(String dateFormat,boolean allowEmpty){  this.formatter=DateTimeFormat.forPattern(dateFormat);  this.allowEmpty=allowEmpty;}  }
class C{  public FloatMemberValue(int index,ConstPool cp){  super('F',cp);  this.valueIndex=index;}  }
class C{  void close(){  queues.remove(driver.getCurrentWindow());}  }
class C{  @SuppressWarnings("rawtypes") public static String unqualifiedClassName(Class type){  if (type.isArray()) {    return unqualifiedClassName(type.getComponentType()) + "Array";  }  String name=type.getName();  return name.substring(name.lastIndexOf('.') + 1);}  }
class C{  public Link(Socket socket) throws IOException {  this.socket=socket;  InputStream is=socket.getInputStream();  BufferedInputStream bis=new BufferedInputStream(is);  this.dis=new DataInputStream(bis);  OutputStream os=socket.getOutputStream();  BufferedOutputStream bos=new BufferedOutputStream(os);  this.dos=new LinkOutputStream(bos);}  }
class C{  @Override public String toString(){  return String.format("%s , len=%d start=%d, isComplete=%s",trgPoints.toString(),srcLength,srcStart,this.isComplete());}  }
class C{  protected void computeArc(Globe globe,List<Position> positions,Position center,Angle startAzimuth,Angle endAzimuth,double radius,int intervals){  Angle sweep=endAzimuth.subtract(startAzimuth).normalizedLongitude();  Angle da=sweep.divide(intervals);  double globeRadius=globe.getRadiusAt(center.getLatitude(),center.getLongitude());  double radiusRadians=radius / globeRadius;  for (int i=0; i < intervals; i++) {    double angle=i * da.radians + startAzimuth.radians;    LatLon ll=LatLon.greatCircleEndPosition(center,angle,radiusRadians);    positions.add(new Position(ll,0));  }}  }
class C{  public NotificationChain basicSetLeftOperand(Expression newLeftOperand,NotificationChain msgs){  Expression oldLeftOperand=leftOperand;  leftOperand=newLeftOperand;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,ExpressionsPackage.LOGICAL_OR_EXPRESSION__LEFT_OPERAND,oldLeftOperand,newLeftOperand);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public synchronized void trimToSize(){  if (elementData.length != elementCount) {    grow(elementCount);  }}  }
class C{  @Override public boolean equals(Object o){  if (!(o instanceof Connection)) {    return false;  }  Connection c=(Connection)o;  return clientHandle.equals(c.clientHandle);}  }
class C{  private boolean checkModeMatch(GridDeploymentInfo dep,GridDeploymentMetadata meta){  if (dep.deployMode() != meta.deploymentMode()) {    U.warn(log,"Received invalid deployment mode (will not deploy, make sure that all nodes " + "executing the same classes in shared mode have identical GridDeploymentMode parameter) [mode=" + meta.deploymentMode() + ", expected="+ dep.deployMode()+ ']');    return false;  }  return true;}  }
class C{  void activateMetric(int index,MetricsManager.Metrics metric){  Method getFaceScoreMethod=null;  try {switch (metric.getType()) {case Emotion:      Detector.class.getMethod("setDetect" + MetricsManager.getCamelCase(metric),boolean.class).invoke(detector,true);    metricNames[index].setText(MetricsManager.getUpperCaseName(metric));  getFaceScoreMethod=Face.Emotions.class.getMethod("get" + MetricsManager.getCamelCase(metric));if (metric == MetricsManager.Emotions.VALENCE) {  metricDisplays[index].setIsShadedMetricView(true);} else {  metricDisplays[index].setIsShadedMetricView(false);}break;case Expression:Detector.class.getMethod("setDetect" + MetricsManager.getCamelCase(metric),boolean.class).invoke(detector,true);metricNames[index].setText(MetricsManager.getUpperCaseName(metric));getFaceScoreMethod=Face.Expressions.class.getMethod("get" + MetricsManager.getCamelCase(metric));break;case Emoji:detector.setDetectAllEmojis(true);MetricsManager.Emojis emoji=((MetricsManager.Emojis)metric);String metricTitle=emoji.getDisplayName();metricNames[index].setText(metricTitle);Log.d(LOG_TAG,"Getter Method: " + "get" + MetricsManager.getCamelCase(metric));getFaceScoreMethod=Face.Emojis.class.getMethod("get" + MetricsManager.getCamelCase(metric));break;}} catch (NoSuchMethodException e) {Log.e(LOG_TAG,String.format("No such method while using reflection to generate methods for %s",metric.toString()),e);}catch (InvocationTargetException e) {Log.e(LOG_TAG,String.format("Invocation error while using reflection to generate methods for %s",metric.toString()),e);}catch (IllegalAccessException e) {Log.e(LOG_TAG,String.format("Illegal access error while using reflection to generate methods for %s",metric.toString()),e);}metricDisplays[index].setMetricToDisplay(metric,getFaceScoreMethod);}  }
class C{  public static int min(int a,int b){  return a < b ? a : b;}  }
class C{  public Supplier<Pair<Integer,JsonNode>> handlePatch(StateContext state) throws HttpStatusException {  throw new UnsupportedOperationException(this.getClass().toString());}  }
class C{  public ScenarioResult(Classifier<?> supplier,Class client,Class factory,Class implementer){  this(supplier,client,factory);  this.implementer=Objects.requireNonNull(implementer);}  }
class C{  @Override public void run(){  amIActive=true;  String sourceHeader=null;  String outputHeader=null;  String backLinkHeader=null;  WhiteboxRaster sourceImage;  WhiteboxRaster output;  WhiteboxRaster backLink;  int cols, rows;  double z, flowDir;  float progress=0;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double lnOf2=0.693147180559945;  double gridRes;  int col, row, a;  int c;  int x, y, i;  boolean flag=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      sourceHeader=args[i];    } else     if (i == 1) {      backLinkHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    }  }  if ((sourceHeader == null) || (backLinkHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    sourceImage=new WhiteboxRaster(sourceHeader,"r");    rows=sourceImage.getNumberRows();    cols=sourceImage.getNumberColumns();    double noData=sourceImage.getNoDataValue();    gridRes=(sourceImage.getCellSizeX() + sourceImage.getCellSizeY()) / 2;    backLink=new WhiteboxRaster(backLinkHeader,"r");    if (backLink.getNumberColumns() != cols || backLink.getNumberRows() != rows) {      showFeedback("Input images must have the same dimensions");      return;    }    output=new WhiteboxRaster(outputHeader,"rw",sourceHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette(sourceImage.getPreferredPalette());    updateProgress("Loop 1 of 2:",0);    double[] data;    for (row=0; row < rows; row++) {      data=sourceImage.getRowValues(row);      for (col=0; col < cols; col++) {        if (data[col] > 0) {          output.setValue(row,col,data[col]);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 1 of 2:",(int)progress);    }    updateProgress("Loop 2 of 2:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (backLink.getValue(row,col) != noData && output.getValue(row,col) == noData) {          x=col;          y=row;          z=noData;          flag=true;          do {            flowDir=backLink.getValue(y,x);            if (flowDir > 0) {              c=(int)(Math.log(flowDir) / lnOf2);              x+=dX[c];              y+=dY[c];              if (output.getValue(y,x) > 0) {                z=output.getValue(y,x);                flag=false;              }            } else {              z=output.getValue(y,x);              flag=false;            }          } while (flag);          x=col;          y=row;          flag=true;          do {            output.setValue(y,x,z);            flowDir=backLink.getValue(y,x);            if (flowDir > 0) {              c=(int)(Math.log(flowDir) / lnOf2);              x+=dX[c];              y+=dY[c];              if (output.getValue(y,x) > 0) {                flag=false;              }            } else {              flag=false;            }          } while (flag);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 2 of 2:",(int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    sourceImage.close();    backLink.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static String formatTimeStamp(long epochTime){  return TIME_FORMAT.format(new Date(epochTime));}  }
class C{  public static void LOGD(String tag,String message){  if (DEBUG || Log.isLoggable(tag,Log.DEBUG)) {    Log.d(tag,"[v" + WearManager.getInstance().getVersion() + "] "+ message);  }}  }
class C{  public Type basicGetType(){  if (getTypeSpecifier() != null) {    return getTypeSpecifier().getType();  }  return null;}  }
class C{  public void add(String path){  deletedFiles.add(path);}  }
class C{  public WrapToken_v2(Krb5Context context,MessageProp prop,byte[] dataBytes,int dataOffset,int dataLen) throws GSSException {  super(Krb5Token.WRAP_ID_v2,context);  confounder=Confounder.bytes(CONFOUNDER_SIZE);  genSignAndSeqNumber(prop,dataBytes,dataOffset,dataLen);  if (!context.getConfState())   prop.setPrivacy(false);  privacy=prop.getPrivacy();  if (!privacy) {    tokenData=new byte[dataLen + checksum.length];    System.arraycopy(dataBytes,dataOffset,tokenData,0,dataLen);    System.arraycopy(checksum,0,tokenData,dataLen,checksum.length);  } else {    tokenData=cipherHelper.encryptData(this,confounder,getTokenHeader(),dataBytes,dataOffset,dataLen,getKeyUsage());  }}  }
class C{  public boolean imageUpdate(Image img,int infoflags,int x,int y,int w,int h){  if (!isShowing() || !SwingUtilities.doesIconReferenceImage(getIcon(),img) && !SwingUtilities.doesIconReferenceImage(disabledIcon,img)) {    return false;  }  return super.imageUpdate(img,infoflags,x,y,w,h);}  }
class C{  Set<File> findFiles(File dir){  Set<File> files=new LinkedHashSet<File>();  findFiles(dir,files);  return files;}  }
class C{  private void stopExecutors0(IgniteLogger log){  assert log != null;  U.shutdownNow(getClass(),execSvc,log);  execSvc=null;  U.shutdownNow(getClass(),sysExecSvc,log);  sysExecSvc=null;  U.shutdownNow(getClass(),mgmtExecSvc,log);  mgmtExecSvc=null;  U.shutdownNow(getClass(),p2pExecSvc,log);  p2pExecSvc=null;  U.shutdownNow(getClass(),igfsExecSvc,log);  igfsExecSvc=null;  if (restExecSvc != null)   U.shutdownNow(getClass(),restExecSvc,log);  restExecSvc=null;  U.shutdownNow(getClass(),utilityCacheExecSvc,log);  utilityCacheExecSvc=null;  U.shutdownNow(getClass(),marshCacheExecSvc,log);  marshCacheExecSvc=null;  U.shutdownNow(getClass(),callbackExecSvc,log);  callbackExecSvc=null;}  }
class C{  public boolean isReadable(long arc){switch ((int)arc) {case 2:    return true;default :  break;}return false;}  }
class C{  public static int capacity(long memPtr){  return GridUnsafe.getInt(memPtr + MEM_HDR_OFF_CAP);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  double minVal;  float progress=0;  int a;  int filterSizeX=3;  int filterSizeY=3;  int dX[];  int dY[];  int midPointX;  int midPointY;  int numPixelsInFilter;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      filterSizeX=Integer.parseInt(args[i]);    } else     if (i == 3) {      filterSizeY=Integer.parseInt(args[i]);    } else     if (i == 4) {      filterRounded=Boolean.parseBoolean(args[i]);    } else     if (i == 5) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          minVal=z;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z != noData && filterShape[a] == 1) {              if (z > minVal) {                minVal=z;              }            }          }          outputFile.setValue(row,col,minVal);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public void onSupportActionModeStarted(ActionMode mode){}  }
class C{  private static String replaceChars(String str){  StringBuffer buf=new StringBuffer(str);  int length=buf.length();  for (int i=0; i < length; i++) {    char currentChar=buf.charAt(i);    if (currentChar == ' ') {      buf.setCharAt(i,'%');      buf.insert(i + 1,"20");      length=length + 2;      i=i + 2;    } else     if (currentChar == '\\') {      buf.setCharAt(i,'/');    }  }  return buf.toString();}  }
class C{  @SuppressWarnings("deprecation") private static boolean runRemoteReplicationStepsOnTarget(UnManagedVolume unManagedVolume,Volume volume,List<UnManagedVolume> unManagedVolumes,String type,DbClient dbClient){  boolean removeUnManagedVolume=false;  StringSetMap unManagedVolumeInformation=unManagedVolume.getVolumeInformation();  String sourceUnManagedVolumeId=PropertySetterUtil.extractValueFromStringSet(SupportedVolumeInformation.REMOTE_MIRROR_SOURCE_VOLUME.toString(),unManagedVolumeInformation);  _logger.info("Type {} Source Native Guid {}",type,sourceUnManagedVolumeId);  String sourceVolumeId=sourceUnManagedVolumeId.replace(VolumeIngestionUtil.UNMANAGEDVOLUME,VolumeIngestionUtil.VOLUME);  List<URI> sourceUris=dbClient.queryByConstraint(AlternateIdConstraint.Factory.getVolumeNativeGuidConstraint(sourceVolumeId));  String copyMode=PropertySetterUtil.extractValueFromStringSet(SupportedVolumeInformation.REMOTE_COPY_MODE.toString(),unManagedVolumeInformation);  String raGroup=PropertySetterUtil.extractValueFromStringSet(SupportedVolumeInformation.REMOTE_MIRROR_RDF_GROUP.toString(),unManagedVolumeInformation);  volume.setSrdfCopyMode(copyMode);  volume.setSrdfGroup(URI.create(raGroup));  if (sourceUris.isEmpty()) {    _logger.info("Source {} Not found for target {}",sourceVolumeId,volume.getId());  } else {    List<URI> sourceUnmanagedUris=dbClient.queryByConstraint(AlternateIdConstraint.Factory.getVolumeInfoNativeIdConstraint(sourceUnManagedVolumeId));    if (!sourceUnmanagedUris.isEmpty()) {      UnManagedVolume sourceUnManagedVolume=dbClient.queryObject(UnManagedVolume.class,sourceUnmanagedUris.get(0));      if (null != sourceUnManagedVolume) {        StringSet targetUnManagedVolumeGuids=sourceUnManagedVolume.getVolumeInformation().get(SupportedVolumeInformation.REMOTE_MIRRORS.toString());        if (null != targetUnManagedVolumeGuids && !targetUnManagedVolumeGuids.isEmpty()) {          StringSet targetVolumeNativeGuids=VolumeIngestionUtil.getListofVolumeIds(targetUnManagedVolumeGuids);          List<URI> targetUris=VolumeIngestionUtil.getVolumeUris(targetVolumeNativeGuids,dbClient);          targetUris.add(volume.getId());          _logger.info("Expected targets Size {} , found {} ",targetUnManagedVolumeGuids.size(),targetUris.size());          _logger.debug("Expected Targets {} : Found {}",Joiner.on("\t").join(targetVolumeNativeGuids),Joiner.on("\t").join(targetUris));          List<Volume> modifiedVolumes=new ArrayList<Volume>();          if (targetUris.size() == targetUnManagedVolumeGuids.size()) {            Volume sourceVolume=dbClient.queryObject(Volume.class,sourceUris.get(0));            VirtualPool sourceVPool=dbClient.queryObject(VirtualPool.class,sourceVolume.getVirtualPool());            Map<URI,VpoolRemoteCopyProtectionSettings> settings=sourceVPool.getRemoteProtectionSettings(sourceVPool,dbClient);            if (null == settings || settings.size() == 0 || !settings.containsKey(volume.getVirtualArray())) {              _logger.info("Target Volume's VArray {} is not matching already ingested source volume virtual pool's remote VArray ",volume.getVirtualArray());              return false;            }            sourceVolume.setSrdfTargets(VolumeIngestionUtil.convertUrisToStrings(targetUris));            _logger.info("Clearing internal flag for source volume {} found",sourceVolume.getNativeGuid());            sourceVolume.clearInternalFlags(INTERNAL_VOLUME_FLAGS);            _logger.debug("Set srdf target for source volume {} found",sourceVolume.getId());            modifiedVolumes.add(sourceVolume);            sourceUnManagedVolume.setInactive(true);            unManagedVolumes.add(sourceUnManagedVolume);            volume.setSrdfParent(new NamedURI(sourceVolume.getId(),sourceVolume.getLabel()));            _logger.debug("target volume  set parent",volume.getId());            removeUnManagedVolume=true;            List<Volume> targetVolumes=dbClient.queryObject(Volume.class,targetUris);            for (            Volume targetVolume : targetVolumes) {              _logger.debug("Set parent for remaining target volume {}",targetVolume.getId());              targetVolume.setSrdfParent(new NamedURI(sourceVolume.getId(),sourceVolume.getLabel()));              targetVolume.clearInternalFlags(INTERNAL_VOLUME_FLAGS);            }            modifiedVolumes.addAll(targetVolumes);            List<UnManagedVolume> targetUnManagedVolumes=dbClient.queryObject(UnManagedVolume.class,VolumeIngestionUtil.getUnManagedVolumeUris(targetUnManagedVolumeGuids,dbClient));            for (            UnManagedVolume targetUnManagedVol : targetUnManagedVolumes) {              _logger.debug("Set Target unmanaged volume inactive {}",targetUnManagedVol.getId());              targetUnManagedVol.setInactive(true);              unManagedVolumes.add(targetUnManagedVol);            }            dbClient.persistObject(modifiedVolumes);            _logger.info("Target Volume successfully ingested with remote replication links",volume.getNativeGuid());          } else {            _logger.info("Expected Targets not found for source Volume {}",sourceUnManagedVolumeId);          }        } else {          _logger.info("Targets information not found on source volume {}." + "This could happen when parallel ingests are tried or the actual volume got deleted on array.",sourceUnManagedVolumeId);        }      }    }  }  return removeUnManagedVolume;}  }
class C{  public <T>T po2VO(Class<T> clazz,Object po) throws InstantiationException, IllegalAccessException {  T vo=clazz.newInstance();  BeanUtils.copyPropertiesIgnoreNull(po,vo);  return vo;}  }
class C{  public static long unsignedByteToLong(byte b){  return b & 0xFF;}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) private void writeValueSection(ByteBuffer dataFileBuffer,PcpValueInfo info){  int originalPosition=dataFileBuffer.position();  TypeHandler rawHandler=info.getTypeHandler();  if (rawHandler.requiresLargeStorage()) {    dataFileBuffer.putLong(STRING_BLOCK_LENGTH - 1);    dataFileBuffer.putLong(info.getLargeValue().getOffset());    dataFileBuffer.position(info.getLargeValue().getOffset());  }  rawHandler.putBytes(dataFileBuffer,info.getInitialValue());  dataFileBuffer.position(originalPosition + DATA_VALUE_LENGTH);  dataFileBuffer.putLong(info.getDescriptorOffset());  dataFileBuffer.putLong(info.getInstanceOffset());}  }
class C{  public boolean isTaxExempt(){  Object oo=get_Value(COLUMNNAME_IsTaxExempt);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static int finalizerPos(JCTree tree){  if (tree.hasTag(TRY)) {    JCTry t=(JCTry)tree;    Assert.checkNonNull(t.finalizer);    return firstStatPos(t.finalizer);  } else   if (tree.hasTag(SYNCHRONIZED)) {    return endPos(((JCSynchronized)tree).body);  } else {    throw new AssertionError();  }}  }
class C{  public static String internalReducer(Metric metric,String reducerType){  Map<Long,String> sortedDatapoints=new HashMap<Long,String>();  sortedDatapoints.putAll(metric.getDatapoints());  List<Double> operands=new ArrayList<Double>();  for (  String str : sortedDatapoints.values()) {    if (reducerType.equals("name")) {      break;    }    if (str == null || str.equals("")) {      operands.add(0.0);    } else {      operands.add(Double.parseDouble(str));    }  }  InternalReducerType type=InternalReducerType.fromString(reducerType);switch (type) {case AVG:    return String.valueOf((new Mean()).evaluate(Doubles.toArray(operands)));case MIN:  return String.valueOf(Collections.min(operands));case MAX:return String.valueOf(Collections.max(operands));case RECENT:return String.valueOf(operands.get(operands.size() - 1));case MAXIMA:return String.valueOf(Collections.max(operands));case MINIMA:return String.valueOf(Collections.min(operands));case NAME:return metric.getMetric();case DEVIATION:return String.valueOf((new StandardDeviation()).evaluate(Doubles.toArray(operands)));default :throw new UnsupportedOperationException(reducerType);}}  }
class C{  public POSBaseLineFeatureExtractor(String viewName,POSBaseLineCounter counter){  this.viewName=viewName;  this.counter=counter;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MDistributionRunDetail[").append(get_ID()).append(";M_DistributionListLine_ID=").append(getM_DistributionListLine_ID()).append(";Qty=").append(getQty()).append(";Ratio=").append(getRatio()).append(";MinQty=").append(getMinQty()).append("]");  return sb.toString();}  }
class C{  public SendablePhotoMessage.SendablePhotoMessageBuilder photo(InputFile photo){  this.photo=photo;  return this;}  }
class C{  public void testCallable() throws Exception {  Ignite ignite=startGrid(1);  startGrid(2);  final TestBinarylizableCallable callable=new TestBinarylizableCallable();  ignite.compute(ignite.cluster().forRemotes()).call(callable);  assert TestBinarylizableCallable.executed.get();  assert TestBinarylizableCallable.writeCalled.get();  assert TestBinarylizableCallable.readCalled.get();}  }
class C{  public static Object ask(ActorRef actor,Object message,Timeout timeout) throws Exception {  return Await.result(Patterns.ask(actor,message,timeout.duration().length()),timeout.duration());}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public CompareToBuilder append(final float lhs,final float rhs){  if (comparison != 0) {    return this;  }  comparison=Float.compare(lhs,rhs);  return this;}  }
class C{  @Override public Object deserializeTypedFromObject(JsonParser jp,DeserializationContext ctxt) throws IOException, JsonProcessingException {  return _deserialize(jp,ctxt);}  }
class C{  protected int placeTo(ByteBuffer[] dsts,int offset,int length){  if (buffer == null) {    return 0;  }  int pos=0;  int len=buffer.length;  int rem;  for (int i=offset; i < offset + length; i++) {    rem=dsts[i].remaining();    if (len - pos < rem) {      dsts[i].put(buffer,pos,len - pos);      pos=len;      break;    }    dsts[i].put(buffer,pos,rem);    pos+=rem;  }  if (pos != len) {    throw new AlertException(AlertProtocol.INTERNAL_ERROR,new SSLException("The received application data could not be fully written" + "into the destination buffers"));  }  buffer=null;  return len;}  }
class C{  public boolean isRowSelected(int row){  return listSelectionModel.isSelectedIndex(row);}  }
class C{  private void prepareTestCase2(){  when(page1.canSkip()).thenReturn(false);  when(page1.isCompleted()).thenReturn(true);  when(page2.canSkip()).thenReturn(false);  when(page2.isCompleted()).thenReturn(true);  when(page3.canSkip()).thenReturn(true);  when(page3.isCompleted()).thenReturn(true);  when(page4.canSkip()).thenReturn(true);  when(page4.isCompleted()).thenReturn(true);  wizard.addPage(page1);  wizard.addPage(page2);  wizard.addPage(page3);  wizard.addPage(page4);}  }
class C{  public static void $json(String str,String title){  if ($.sDebug || DEBUG_TAG_LOG) {    Log.d(getTag(),"|===================================================================");    if (!TextUtils.isEmpty(title)) {      Log.d(getTag(),"| " + title);      Log.d(getTag(),"|-------------------------------------------------------------------");    }    String message;    try {      if (str.startsWith("{")) {        JSONObject jsonObject=new JSONObject(str);        message=jsonObject.toString(JSON_INDENT);      } else       if (str.startsWith("[")) {        JSONArray jsonArray=new JSONArray(str);        message=jsonArray.toString(JSON_INDENT);      } else {        message=str;      }    } catch (    JSONException e) {      message=str;    }    String[] lines=message.split("\n");    for (    String line : lines) {      Log.d(getTag(),line);    }    Log.d(getTag(),"===================================================================|");  }}  }
class C{  private void validatePatch(State current,State patch){  ValidationUtils.validatePatch(current,patch);  ValidationUtils.validateTaskStageProgression(current.taskState,patch.taskState);}  }
class C{  public AppLauncher forward(int localPort){  this.localPort=localPort;  return this;}  }
class C{  public final void testToString() throws Exception {  Set<TrustAnchor> taSet=TestUtils.getTrustAnchorSet();  if (taSet == null) {    fail(getName() + ": not performed (could not create test TrustAnchor set)");  }  PKIXParameters p=new PKIXParameters(taSet);  assertNotNull(p.toString());  PKIXParameters p1=null;  try {    p1.toString();    fail("NullPointerException expected");  } catch (  NullPointerException e) {  }}  }
class C{  public String nextTo(String delimiters) throws JSONException {  char c;  StringBuffer sb=new StringBuffer();  for (; ; ) {    c=next();    if (delimiters.indexOf(c) >= 0 || c == 0 || c == '\n' || c == '\r') {      if (c != 0) {        back();      }      return sb.toString().trim();    }    sb.append(c);  }}  }
class C{  public ReleaseClearLockMessage(){}  }
class C{  public static List<String> provisionInstances(VerificationHost host,Compute compute,String userEmail,String projectId,String zoneId,int n,int batchSize,long interval) throws Throwable {  if (n < 0) {    throw new IllegalArgumentException("the number of instances to be provisioned cannot be negative.");  }  if (batchSize <= 0) {    throw new IllegalArgumentException("batch size cannot be less or equal to zero.");  }  if (interval <= 0) {    throw new IllegalArgumentException("waiting interval cannot be less or equal to zero");  }  List<String> scopes=Collections.singletonList(ComputeScopes.CLOUD_PLATFORM);  List<String> instanceNames=new ArrayList<>();  com.google.api.services.compute.model.Operation[] ops=new com.google.api.services.compute.model.Operation[n];  String[] zones=new String[n];  String[] opIds=new String[n];  Instance instance=createInstanceTemplate(userEmail,projectId,zoneId,scopes);  for (int i=0; i < n; i++) {    String instanceName=ADAPTER_TEST_INSTANCE + UUID.randomUUID().toString();    instanceNames.add(instanceName);    ops[i]=provisionOneInstance(compute,instance,instanceName,projectId,zoneId);    zones[i]=ops[i].getZone();    zones[i]=extractZoneFromZoneUri(zones[i]);    opIds[i]=ops[i].getName();    if ((i + 1) % batchSize == 0) {      TimeUnit.MILLISECONDS.sleep(interval);    }  }  waitForOperationsDone(host,compute,projectId,ops,zones,opIds);  return instanceNames;}  }
class C{  public void fireStateChanged(){  changeSupport.fireStateChanged();}  }
class C{  @Override public void onDropDownOpen(Set<Entity> selectedEntities,Array<String> actionsSet){}  }
class C{  public Type leftDeclaredType(){  return (left instanceof TypeRef) ? ((TypeRef)left).getDeclaredType() : null;}  }
class C{  public static void recycle(Bitmap bitmap){  if (bitmap == null || bitmap.isRecycled()) {    return;  }  bitmap.recycle();}  }
class C{  public boolean isSOTrx(){  Object oo=get_Value(COLUMNNAME_IsSOTrx);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(createDocument04.class,args);}  }
class C{  public void updateWithResult(MatchResult result){  JsonPreference<Club> userClubPref=userPreferences.clubPreference();  Preference<Long> userCoinsPref=userPreferences.coinsPreference();  int goalDiff=Math.abs(result.homeGoals().size() - result.awayGoals().size());  if (!result.isDraw()) {    if (userClub.nameEquals(result.winner())) {      userClubPref.set(userClub.newWithWin(goalDiff));      userCoinsPref.set(userPreferences.coins() + UserPreferences.COINS_PRIZE_WIN);    } else {      userClubPref.set(userClub.newWithLoss(-goalDiff));    }  } else {    userClubPref.set(userClub.newWithDraw());    userCoinsPref.set(userPreferences.coins() + UserPreferences.COINS_PRIZE_DRAW);  }}  }
class C{  public String handle(){  final String r=get(CrawlAttribute.HANDLE.key);  assert r != null;  return r;}  }
class C{  public static String GotoNextNonSpace(Vector inputVec,IntPair curLoc){  boolean found=false;  while ((!found) && curLoc.one < inputVec.size()) {    String line=(String)inputVec.elementAt(curLoc.one);    while ((!found) && curLoc.two < line.length()) {      if (line.charAt(curLoc.two) == ' ') {        curLoc.two++;      } else {        found=true;      }    }    if (!found) {      curLoc.one++;      curLoc.two=0;    }  }  if (curLoc.one < inputVec.size()) {    return (String)inputVec.elementAt(curLoc.one);  }  return "";}  }
class C{  protected UndoableEdit lastEdit(){  int count=edits.size();  if (count > 0)   return edits.elementAt(count - 1); else   return null;}  }
class C{  public void loadPropertyFile(String file,Properties target){  try {    SecuritySupport ss=SecuritySupport.getInstance();    InputStream is=ss.getResourceAsStream(ObjectFactory.findClassLoader(),file);    BufferedInputStream bis=new BufferedInputStream(is);    target.load(bis);    bis.close();  } catch (  Exception ex) {    throw new org.apache.xml.utils.WrappedRuntimeException(ex);  }}  }
class C{  @Override protected SystemMemberRegion createSystemMemberRegion(Region r) throws org.apache.geode.admin.AdminException {  SystemMemberRegionJmxImpl managedSystemMemberRegion=null;  boolean needsRefresh=false;synchronized (this.managedRegionResourcesMap) {    SystemMemberRegionJmxImpl managedResource=managedRegionResourcesMap.get(r.getFullPath());    if (managedResource != null) {      managedSystemMemberRegion=managedResource;    } else {      managedSystemMemberRegion=new SystemMemberRegionJmxImpl(this,r);      managedRegionResourcesMap.put(r.getFullPath(),managedSystemMemberRegion);      needsRefresh=true;    }  }  if (needsRefresh) {    managedSystemMemberRegion.refresh();  }  return managedSystemMemberRegion;}  }
class C{  public void beginMyTurn(){  clientgui.setDisplayVisible(true);  clientgui.bv.clearFieldofF();  butDone.setEnabled(true);  if (numButtonGroups > 1)   buttons.get(FiringCommand.FIRE_MORE).setEnabled(true);  setFireCalledEnabled(clientgui.getClient().getGame().getOptions().booleanOption("tacops_called_shots"));  setStatusBarText(Messages.getString("StatusBarPhaseDisplay.pointblankShot"));}  }
class C{  void indent(int lineLengthLimit){  int charsInLine=0;  LinkedList<Indent> indents=new LinkedList<Indent>();  int lastBreakPt=-1;  LinkedList<Indent> indentsAtLastBreakPt=null;  int charsInLineAtLastBreakPt=-1;  indents.add(new Indent(0,false));  for (int i=0, n=tokens.size(); i < n; ++i) {    String tok=tokens.get(i);    charsInLine+=tok.length();    if (lastBreakPt >= 0 && charsInLine >= lineLengthLimit && !(" ".equals(tok) || "\n".equals(tok))) {      if (" ".equals(tokens.get(lastBreakPt))) {        tokens.set(lastBreakPt,"\n");        i=lastBreakPt - 1;      } else {        tokens.add(lastBreakPt + 1,"\n");        i=lastBreakPt;      }      lastBreakPt=-1;      indents=indentsAtLastBreakPt;      charsInLine=charsInLineAtLastBreakPt;      continue;    }    if (tok.length() != 1) {      if (!TokenClassification.isComment(tok)) {        indents.set(0,indents.get(0).withInStatement(true));      }      continue;    }switch (tok.charAt(0)) {case '(':case '[':      int indentLevel=Math.min(charsInLine,indents.get(0).spaces + 2);    indents.addFirst(new Indent(indentLevel,parenthetical[i]));  break;case '{':indents.set(0,indents.get(0).withInStatement(false));indents.addFirst(new Indent(indents.get(0).spaces + 2,false));break;case '}':if (indents.size() > 1) {indents.removeFirst();}indents.set(0,indents.get(0).withInStatement(false));break;case ']':case ')':if (indents.size() > 1) {indents.removeFirst();}break;case ' ':break;case '\n':if (i + 1 < n) {String nextToken=tokens.get(i + 1);if (!"\n".equals(nextToken)) {charsInLine=indents.get(0).getIndentLevel();if (nextToken.length() == 1) {switch (nextToken.charAt(0)) {case '}':case ']':case ')':if (indents.size() > 1) {charsInLine=indents.get(1).spaces;}break;}} else if ("case".equals(nextToken) || "default".equals(nextToken)) {charsInLine=Math.max(charsInLine - 2,0);}tokens.set(i,makeIndent(charsInLine));}}lastBreakPt=-1;break;case ';':case ',':case ':':indents.set(0,indents.get(0).withInStatement(false));break;default :indents.set(0,indents.get(0).withInStatement(true));break;}switch (tok.charAt(0)) {case ' ':case ')':case '}':case ']':lastBreakPt=i;indentsAtLastBreakPt=new LinkedList<Indent>(indents);charsInLineAtLastBreakPt=charsInLine;break;}}}  }
class C{  public RotateDrawable(){  this(null,null);}  }
class C{  @Override public Array subAssign(final Array another){  QL.require(this.size() == another.size(),ARRAY_IS_INCOMPATIBLE);  final Address.ArrayAddress.ArrayOffset toff=this.addr.offset();  final Address.ArrayAddress.ArrayOffset aoff=another.addr.offset();  for (int i=0; i < size(); i++) {    $[toff.op()]-=another.$[aoff.op()];    toff.nextIndex();    aoff.nextIndex();  }  return this;}  }
class C{  private double toNumber(String str) throws IOException {  return toLength(str,100);}  }
class C{  public <T extends DataObject>T find(String alias,URI uri){  JClass jc=lookupAlias(alias);  if (jc.isCacheValid()) {    Map<URI,T> cachedObjects=jc.getCachedObjects();    return cachedObjects.get(uri);  }  return (T)jc.queryObject(engine,uri);}  }
class C{  private StorageVolume createDriverVolume(StorageSystem storage,BlockObject volume){  StorageVolume driverVolume=new StorageVolume();  driverVolume.setStorageSystemId(storage.getNativeId());  driverVolume.setNativeId(volume.getNativeId());  driverVolume.setDeviceLabel(volume.getDeviceLabel());  if (!NullColumnValueGetter.isNullURI(volume.getConsistencyGroup())) {    BlockConsistencyGroup cg=dbClient.queryObject(BlockConsistencyGroup.class,volume.getConsistencyGroup());    driverVolume.setConsistencyGroup(cg.getLabel());  }  return driverVolume;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return DPID;case 2:  return PORT;default :return null;}}  }
class C{  public void addRootDocument(String name,String fileExt,int sortOrder,String pathDocumentFile) throws Exception {  addDocument(name,FolderBaseDefs.CLF_ROOT_ID,fileExt,sortOrder,pathDocumentFile,null);}  }
class C{  public static float[] clone(float[] array){  if (array == null) {    return null;  }  return (float[])array.clone();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SexecPackage.EXECUTION_STATE__STATE_VECTOR:    return getStateVector();case SexecPackage.EXECUTION_STATE__SUB_SCOPES:  return getSubScopes();case SexecPackage.EXECUTION_STATE__SUPER_SCOPE:if (resolve) return getSuperScope();return basicGetSuperScope();case SexecPackage.EXECUTION_STATE__ENTER_SEQUENCES:return getEnterSequences();case SexecPackage.EXECUTION_STATE__EXIT_SEQUENCE:return getExitSequence();case SexecPackage.EXECUTION_STATE__INIT_SEQUENCE:return getInitSequence();case SexecPackage.EXECUTION_STATE__LEAF:return isLeaf();case SexecPackage.EXECUTION_STATE__ENTRY_ACTION:return getEntryAction();case SexecPackage.EXECUTION_STATE__EXIT_ACTION:return getExitAction();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static List<String> toList(CharSequence self){  String s=self.toString();  int size=s.length();  List<String> answer=new ArrayList<String>(size);  for (int i=0; i < size; i++) {    answer.add(s.substring(i,i + 1));  }  return answer;}  }
class C{  private static boolean showCheatSheet(View view,CharSequence text){  if (TextUtils.isEmpty(text)) {    return false;  }  final int[] screenPos=new int[2];  final Rect displayFrame=new Rect();  view.getLocationOnScreen(screenPos);  view.getWindowVisibleDisplayFrame(displayFrame);  final Context context=view.getContext();  final int viewWidth=view.getWidth();  final int viewHeight=view.getHeight();  final int viewCenterX=screenPos[0] + viewWidth / 2;  final int screenWidth=context.getResources().getDisplayMetrics().widthPixels;  final int estimatedToastHeight=(int)(ESTIMATED_TOAST_HEIGHT_DIPS * context.getResources().getDisplayMetrics().density);  Toast cheatSheet=Toast.makeText(context,text,Toast.LENGTH_SHORT);  boolean showBelow=screenPos[1] < estimatedToastHeight;  if (showBelow) {    cheatSheet.setGravity(Gravity.TOP | Gravity.CENTER_HORIZONTAL,viewCenterX - screenWidth / 2,screenPos[1] - displayFrame.top + viewHeight);  } else {    cheatSheet.setGravity(Gravity.TOP | Gravity.CENTER_HORIZONTAL,viewCenterX - screenWidth / 2,screenPos[1] - displayFrame.top - estimatedToastHeight);  }  cheatSheet.show();  return true;}  }
class C{  public String single(final CharSequence name) throws IOException {  final Iterator<String> params=this.param(name).iterator();  if (!params.hasNext()) {    throw new HttpException(HttpURLConnection.HTTP_BAD_REQUEST,String.format("form param \"%s\" is mandatory",name));  }  return params.next();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public XYAreaRendererState(PlotRenderingInfo info){  super(info);  this.area=new GeneralPath();  this.line=new Line2D.Double();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public CharEscaperBuilder addEscapes(char[] cs,String r){  for (  char c : cs) {    addEscape(c,r);  }  return this;}  }
class C{  public boolean supportsIsolationLevel(){  return getActiveConnectionPassive().supportsIsolationLevel();}  }
class C{  public boolean isCompatible(String minimumRequiredVersion){  return isCompatible(new Version(minimumRequiredVersion));}  }
class C{  @Override public void close() throws IOException {  super.close();  closed=true;}  }
class C{  public boolean isIncludeViewParams(){  return includeViewParams;}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/expand") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) public TaskResourceRep expand(@PathParam("id") URI id,FileSystemExpandParam param) throws InternalException {  _log.info(String.format("FileShareExpand --- FileShare id: %1$s, New Size: %2$s",id,param.getNewSize()));  ArgValidator.checkFieldUriType(id,FileShare.class,"id");  FileShare fs=queryResource(id);  Long newFSsize=SizeUtil.translateSize(param.getNewSize());  ArgValidator.checkEntity(fs,id,isIdEmbeddedInURL(id));  if (newFSsize <= 0) {    throw APIException.badRequests.parameterMustBeGreaterThan("new_size",0);  }  long expand=newFSsize - fs.getCapacity();  final long MIN_EXPAND_SIZE=SizeUtil.translateSize("1MB") + 1;  if (expand < MIN_EXPAND_SIZE) {    throw APIException.badRequests.invalidParameterBelowMinimum("new_size",newFSsize,fs.getCapacity() + MIN_EXPAND_SIZE,"bytes");  }  Project project=_dbClient.queryObject(Project.class,fs.getProject().getURI());  TenantOrg tenant=_dbClient.queryObject(TenantOrg.class,fs.getTenant().getURI());  VirtualPool vpool=_dbClient.queryObject(VirtualPool.class,fs.getVirtualPool());  CapacityUtils.validateQuotasForProvisioning(_dbClient,vpool,project,tenant,expand,"filesystem");  String task=UUID.randomUUID().toString();  Operation op=_dbClient.createTaskOpStatus(FileShare.class,fs.getId(),task,ResourceOperationTypeEnum.EXPAND_FILE_SYSTEM);  op.setDescription("Filesystem expand");  FileServiceApi fileServiceApi=getFileShareServiceImpl(fs,_dbClient);  try {    fileServiceApi.expandFileShare(fs,newFSsize,task);  } catch (  InternalException e) {    if (_log.isErrorEnabled()) {      _log.error("Expand File Size error",e);    }    FileShare fileShare=_dbClient.queryObject(FileShare.class,fs.getId());    op=fs.getOpStatus().get(task);    op.error(e);    fileShare.getOpStatus().updateTaskStatus(task,op);    _dbClient.updateObject(fs);    throw e;  }  return toTask(fs,task,op);}  }
class C{  public List<Entry> entries(){  return this.entries;}  }
class C{  public void addPropertyChangeListener(PropertyChangeListener l){  getPcs().addPropertyChangeListener(l);}  }
class C{  @Override public void loadUrl(final String url,boolean clearNavigationStack){  webView.loadUrl(url);}  }
class C{  @NotNull public static InjectionResult registerStringLiteralInjection(@NotNull PsiElement element,@NotNull MultiHostRegistrar registrar){  return processStringLiteral(element,registrar,"","",Formatting.PERCENT);}  }
class C{  public static void disable(){}  }
class C{  public GridDistributedCacheEntry entryExx(KeyCacheObject key,AffinityTopologyVersion topVer,boolean allowDetached){  return allowDetached && !ctx.affinity().primary(ctx.localNode(),key,topVer) ? createEntry(key) : entryExx(key,topVer);}  }
class C{  @Override public synchronized void putAll(Map map){  putAll(map,defaultAction);}  }
class C{  public boolean matches(Sentence sentence){  return getPattern().matcher(sentence.fullSource()).find();}  }
class C{  public void update(final long item){  update(item,1);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:18.333 -0500",hash_original_method="DFBC1065284BB1C2F3C0505C2EF2AEEC",hash_generated_method="23D51F05B534713A6782D78D5D996E7E") public DERSet(ASN1Encodable[] a){  for (int i=0; i != a.length; i++) {    this.addObject(a[i]);  }  this.sort();}  }
class C{  public void removeProtocols(final Set<String> protocols){  if (protocols != null && _protocols != null) {    HashSet<String> removeProtocols=new HashSet<String>();    removeProtocols.addAll(protocols);    _protocols.removeAll(removeProtocols);  }}  }
class C{  private boolean isNearThumb(int x,int y){  tmpRect.set(thumbOffset.x,thumbOffset.y,thumbOffset.x + thumbWidth,thumbOffset.y + thumbHeight);  tmpRect.inset(touchInset,touchInset);  return tmpRect.contains(x,y);}  }
class C{  private boolean isFocusInside(Object newFocusedComp){  if (newFocusedComp instanceof Popup) {    return true;  }  if (newFocusedComp instanceof Component && !SwingUtilities.isDescendingFrom((Component)newFocusedComp,this)) {    if (containingWindow == null) {      return false;    }    Window focusedWindow=KeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow();    if (containingWindow == focusedWindow) {      return false;    }  }  return true;}  }
class C{  public FlexMessage decodeFlexMessage(IoBuffer in,RTMP rtmp){  in.skip(1);  org.red5.io.amf3.Input.RefStorage refStorage=new org.red5.io.amf3.Input.RefStorage();  Input input=new org.red5.io.amf.Input(in);  String action=deserializer.deserialize(input,String.class);  int invokeId=deserializer.<Number>deserialize(input,Number.class).intValue();  FlexMessage msg=new FlexMessage();  msg.setInvokeId(invokeId);  Object[] params=new Object[]{};  if (in.hasRemaining()) {    ArrayList<Object> paramList=new ArrayList<Object>();    final Object obj=deserializer.deserialize(input,Object.class);    if (obj != null) {      paramList.add(obj);    }    while (in.hasRemaining()) {      byte tmp=in.get();      in.position(in.position() - 1);      if (tmp == AMF.TYPE_AMF3_OBJECT) {        input=new org.red5.io.amf3.Input(in,refStorage);      } else {        input=new org.red5.io.amf.Input(in);      }      paramList.add(deserializer.deserialize(input,Object.class));    }    params=paramList.toArray();  }  final int dotIndex=action.lastIndexOf('.');  String serviceName=(dotIndex == -1) ? null : action.substring(0,dotIndex);  String serviceMethod=(dotIndex == -1) ? action : action.substring(dotIndex + 1,action.length());  PendingCall call=new PendingCall(serviceName,serviceMethod,params);  msg.setCall(call);  return msg;}  }
class C{  public void add(String expr,ShapeAction f){  Predicate p=(Predicate)ExpressionParser.parse(expr);  super.add(p,f);}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  for (int i=0; i < numVertices; i++) {    for (int j=0; j < numVertices; j++) {      if (j == i)       continue;      EdgeInfo inf=info[i][j];      if (inf != null) {        sb.append(inf).append('\n');      }    }  }  return sb.toString() + "\ncost:" + getCost()+ "\nflow:"+ getFlow();}  }
class C{  public static void init(){  try {    if (!init) {      init=true;      logDir=new File(ToastBootstrap.toastHome,"log");      logDir.mkdirs();      recentOut=new File(logDir,"recent.txt");      recentErr=new File(logDir,"recentErr.txt");      if (recentOut.exists()) {        oldOut=new File(logDir,"last_session.txt");        if (oldOut.exists())         oldOut.delete();        recentOut.renameTo(oldOut);        recentOut=new File(logDir,"recent.txt");        recentOut.delete();      }      if (recentErr.exists())       recentErr.delete();      fileOut=new FileOutputStream(recentOut);      fileErr=new FileOutputStream(recentErr);      sysOut=System.out;      sysErr=System.err;      master=new SplitStream(sysOut,fileOut);      outStream=new ColorPrint(master);      masterError=new SplitStream(sysErr,fileOut,fileErr);      errStream=new ColorPrint(masterError);      System.setOut(outStream);      System.setErr(errStream);    }  } catch (  Exception e) {    System.err.println("System Log Proxy failed...");    e.printStackTrace();  }}  }
class C{  public Coord4D(int x,int y,int z){  xCoord=x;  yCoord=y;  zCoord=z;  dimensionId=0;}  }
class C{  public static OracleRequest[] generateVectors(int cipherBlockSize){  Random r=new Random();  byte[] b=new byte[cipherBlockSize * 2];  r.nextBytes(b);  OracleRequest[] oracleRequests=new OracleRequest[VECTOR_SIZE * 4];  for (int i=0; i < VECTOR_SIZE; i++) {    byte[] vector=b.clone();    vector[cipherBlockSize - 1]=(byte)i;    oracleRequests[i * 4]=new OracleRequest();    oracleRequests[i * 4].setEncryptedData(vector);    byte[] vector2=vector.clone();    vector2[0]=(byte)(vector2[0] ^ 0x40);    oracleRequests[i * 4 + 1]=new OracleRequest();    oracleRequests[i * 4 + 1].setEncryptedData(vector2);    byte[] vector3=vector.clone();    vector3[0]=(byte)(vector3[0] ^ 0x80);    oracleRequests[i * 4 + 2]=new OracleRequest();    oracleRequests[i * 4 + 2].setEncryptedData(vector3);    byte[] vector4=vector.clone();    vector4[0]=(byte)(vector4[0] ^ 0xB0);    oracleRequests[i * 4 + 3]=new OracleRequest();    oracleRequests[i * 4 + 3].setEncryptedData(vector4);  }  return oracleRequests;}  }
class C{  @Override public void clear(){  super.clear();  int[] keys=_set;  Object[] values=_values;  for (int i=keys.length; i-- > 0; ) {    keys[i]=(int)0;    values[i]=null;  }}  }
class C{  @Override public void extensionUnloaded(){  Logging.getInstance().log(getClass(),"Extension is now unloaded.",Logging.INFO);  stdout.println("");  stderr.println("");}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.ecommerce.org/schema";  String qualifiedName="namespaceURI:x";  Document doc;  DocumentType docType;  DOMImplementation domImpl;  Document aNewDoc;  doc=(Document)load("staffNS",false);  aNewDoc=(Document)load("staffNS",false);  docType=doc.getDoctype();  domImpl=aNewDoc.getImplementation();{    boolean success=false;    try {      aNewDoc=domImpl.createDocument(namespaceURI,qualifiedName,docType);    } catch (    DOMException ex) {      success=(ex.code == DOMException.WRONG_DOCUMENT_ERR);    }    assertTrue("throw_WRONG_DOCUMENT_ERR",success);  }}  }
class C{  public static boolean isSynthetic(Class class_){  throw new UnsupportedOperationException("NotImplemented");}  }
class C{  private void localDestroy() throws Exception {  grid(0).getOrCreateCache(getLocalConfig());  assert grid(0).cache(CACHE_NAME_LOC).get(KEY_VAL) == null;  assert grid(1).cache(CACHE_NAME_LOC).get(KEY_VAL) == null;  grid(0).cache(CACHE_NAME_LOC).put(KEY_VAL,KEY_VAL + 0);  grid(1).cache(CACHE_NAME_LOC).put(KEY_VAL,KEY_VAL + 1);  assert grid(0).cache(CACHE_NAME_LOC).get(KEY_VAL).equals(KEY_VAL + 0);  assert grid(1).cache(CACHE_NAME_LOC).get(KEY_VAL).equals(KEY_VAL + 1);  grid(0).cache(CACHE_NAME_LOC).destroy();  assertNull(grid(0).cache(CACHE_NAME_LOC));}  }
class C{  @Override protected void testInputFormat(Instances instanceInfo) throws Exception {  getCapabilities().testWithFail(instanceInfo);}  }
class C{  public IPoint intersection(ILineSegment other){  double x1=start.getX();  double y1=start.getY();  double x2=end.getX();  double y2=end.getY();  double x3=other.getStart().getX();  double y3=other.getStart().getY();  double x4=other.getEnd().getX();  double y4=other.getEnd().getY();  double da=(y4 - y3) * (x2 - x1);  double db=(x4 - x3) * (y2 - y1);  double denom=da - db;  if (FloatingPoint.value(denom) == 0) {    return null;  }  double ux=(x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);  double uy=(x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);  ux=ux / denom;  uy=uy / denom;  if (FloatingPoint.value(ux) >= 0 && FloatingPoint.value(ux - 1) <= 0 && FloatingPoint.value(uy) >= 0 && FloatingPoint.value(uy - 1) <= 0) {    double ix=x1 + ux * (x2 - x1);    double iy=y1 + ux * (y2 - y1);    TwoDPoint intersect=new TwoDPoint(ix,iy);    return intersect;  }  return null;}  }
class C{  private static void compressTBZ2(Resource[] sources,Resource target,int mode) throws IOException {  ByteArrayOutputStream baos=new ByteArrayOutputStream();  compressTar(sources,baos,mode);  _compressBZip2(new ByteArrayInputStream(baos.toByteArray()),target.getOutputStream());}  }
class C{  private boolean isOn(long flag){  return (this.options & flag) > 0;}  }
class C{  protected static String readFile(String path) throws IOException {  BufferedReader reader=null;  try {    StringBuilder output=new StringBuilder();    reader=new BufferedReader(new FileReader(path));    for (String line=reader.readLine(), newLine=""; line != null; line=reader.readLine()) {      output.append(newLine).append(line);      newLine="\n";    }    return output.toString();  }  finally {    if (reader != null) {      reader.close();    }  }}  }
class C{  public boolean unlockIt(){  log.info("unlockIt - " + toString());  setProcessing(false);  return true;}  }
class C{  public DCDs(int maxIterations,double tolerance,double C,boolean useL1){  setMaxIterations(maxIterations);  setTolerance(tolerance);  setC(C);  setUseL1(useL1);}  }
class C{  public BatchException(){}  }
class C{  @Override public void writeTo(ChannelBuffer data){  if (bytes != null)   data.writeBytes(bytes);}  }
class C{  public static String formatBytesToKBytes(long bytes){  return decFormat.format((double)bytes / 1024) + " Kb";}  }
class C{  public OMDistance(double[] llPoints,int units,int lType,int nsegs,Length distanceUnits){  super(llPoints,units,lType,nsegs);  setDistUnits(distanceUnits);}  }
class C{  public boolean follows(E a,E b){  return innerChain.follows(a,b);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case MappingPackage.ENUM_SOURCE__MODEL:    if (resolve)     return getModel();  return basicGetModel();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  java.io.File dFile=getFile(stack);  FileDownloader downer=FileDownloader.getFileDownloader(dFile);  if (downer != null) {    if (downer.isComplete()) {      if (downer.wasSuccessful())       return Boolean.TRUE; else       return "Error: " + downer.getStatusMessage();    } else     return downer.getStatusMessage();  } else {    Object rv=FileDownloader.getBGDownloadResult(dFile);    if (rv == null)     return Sage.rez("Error: Invalid Download Target Specified"); else     return rv;  }}  }
class C{  private static HttpResponse forbidden(){  final DefaultHttpResponse res=new DefaultHttpResponse();  res.respond(HttpStatus.FORBIDDEN);  return res;}  }
class C{  public StateInfo(StateInfo info){  this.state=info.state;  this.font=info.font;  if (info.data != null) {    if (data == null) {      data=new HashMap();    }    data.putAll(info.data);  }  if (info.colors != null) {    this.colors=new Color[info.colors.length];    System.arraycopy(info.colors,0,colors,0,info.colors.length);  }}  }
class C{  public static StatAlertsManagerAssignMessage create(StatAlertDefinition[] alertDefs,long refreshInterval){  return new StatAlertsManagerAssignMessage(alertDefs,refreshInterval);}  }
class C{  public static boolean isDataUri(@Nullable Uri uri){  return DATA_SCHEME.equals(getSchemeOrNull(uri));}  }
class C{  public boolean testMDChange(String algo,int dataLength) throws Exception {  MessageDigest mdIn=MessageDigest.getInstance(algo);  MessageDigest mdOut=MessageDigest.getInstance(algo);  try (ByteArrayInputStream bais=new ByteArrayInputStream(data);DigestInputStream dis=new DigestInputStream(bais,mdIn);ByteArrayOutputStream baos=new ByteArrayOutputStream();DigestOutputStream dos=new DigestOutputStream(baos,mdOut)){    int k=0;    byte[] buffer=new byte[10];    while ((k=dis.read()) != -1) {      dos.write(k);      if ((k=dis.read(buffer,0,buffer.length)) != -1) {        dos.write(buffer,0,k);      }      dis.setMessageDigest(mdOut);      dos.setMessageDigest(mdIn);      mdIn=dis.getMessageDigest();      mdOut=dos.getMessageDigest();    }    byte[] output1=mdIn.digest();    byte[] output2=mdOut.digest();    byte[] standard=md.digest(data);    return MessageDigest.isEqual(output1,standard) && MessageDigest.isEqual(output2,standard);  } catch (  Exception ex) {    out.println("testMDChange failed at:" + algo + "/"+ dataLength+ " with unexpected exception");    throw ex;  }}  }
class C{  protected Statement createMethodInvocation(final MethodDeclaration declaration,final MethodInvocation invocation){  Assert.isNotNull(declaration);  Assert.isNotNull(invocation);  Statement statement=null;  final Type type=declaration.getReturnType2();  if (type == null)   statement=createExpressionStatement(invocation); else {    if (type instanceof PrimitiveType) {      final PrimitiveType primitive=(PrimitiveType)type;      if (primitive.getPrimitiveTypeCode().equals(PrimitiveType.VOID))       statement=createExpressionStatement(invocation); else       statement=createReturnStatement(invocation);    } else     statement=createReturnStatement(invocation);  }  return statement;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:46.802 -0500",hash_original_method="0598EE9DB236F7268C8A7877021962D5",hash_generated_method="510880B85D007E14A841E542571C558E") public Drawable loadIcon(PackageManager pm){  return mService.loadIcon(pm);}  }
class C{  private static boolean isBasicFeature(Feature aFeature){  return aFeature.getName().equals(CAS.FEATURE_FULL_NAME_SOFA) || aFeature.toString().equals("uima.cas.AnnotationBase:sofa");}  }
class C{  public static BigDecimal toBTC(String currency,BigDecimal value) throws APIException, IOException {  return toBTC(currency,value,null);}  }
class C{  public void testRandomStrings() throws Exception {  checkRandomData(random(),new MockAnalyzer(random()),atLeast(1000));}  }
class C{  public ToStringBuilder append(String fieldName,double[] array,boolean fullDetail){  style.append(buffer,fieldName,array,BooleanUtils.toBooleanObject(fullDetail));  return this;}  }
class C{  private boolean isAffected(final String resourcePath,final String changed,final RecursionType recursionType){  if (recursionType == RecursionType.FULL && LocalPath.isChild(resourcePath,changed)) {    return true;  } else   if (recursionType == RecursionType.NONE && LocalPath.equals(resourcePath,changed)) {    return true;  } else   if (recursionType == RecursionType.ONE_LEVEL && (LocalPath.equals(resourcePath,changed) || LocalPath.equals(resourcePath,LocalPath.getDirectory(changed)))) {    return true;  }  return false;}  }
class C{  private void addPivotDoc(SolrClient client,Object... fields) throws IOException, SolrServerException {  indexDoc(client,params(),sdoc(fields));}  }
class C{  public boolean isBackOffRequired(int statusCode){switch (statusCode) {case HttpStatusCodes.STATUS_CODE_SERVER_ERROR:case HttpStatusCodes.STATUS_CODE_SERVICE_UNAVAILABLE:    return true;default :  return false;}}  }
class C{  private static boolean isRegister(final ReilOperand operand,final boolean translatingReil){  return ((operand.getType() == OperandType.REGISTER) && (translatingReil || ReilHelpers.isNativeRegister(operand)));}  }
class C{  public static boolean testAarAar(float minXA,float minYA,float maxXA,float maxYA,float minXB,float minYB,float maxXB,float maxYB){  return maxXA >= minXB && maxYA >= minYB && minXA <= maxXB && minYA <= maxYB;}  }
class C{  public Pos3D(TileEntity tileEntity){  this(tileEntity.xCoord,tileEntity.yCoord,tileEntity.zCoord);}  }
class C{  private int checkTripChain(List<Trip> a){  for (  Trip T : a)   if ((zones.getLocation(Id.create(T.zone_o,Zone.class)) == null) || zones.getLocation(Id.create(T.zone_d,Zone.class)) == null)   return 5;  if (a.size() == 1)   return 4;  String nextActivity=a.get(0).act_d;  boolean hasHomeEpisode=false;  int i=1;  for (; i < a.size(); i++) {    if (!a.get(i).act_o.equals(nextActivity))     return 3;    if (a.get(i).act_o.equals("H") || a.get(i).act_d.equals("H"))     hasHomeEpisode=true;    nextActivity=a.get(i).act_d;  }  if (!hasHomeEpisode)   return 1;  return 0;}  }
class C{  protected boolean shouldWriteUTFAsGetBytes(){  return Util.getImplementation().shouldWriteUTFAsGetBytes();}  }
class C{  public ImageProperty(InputStream in,ImageType type) throws IOException {  super(in,type);}  }
class C{  public void initialize(GL10 gl,TextureManager textureManager){  mState=STATE_INITIALIZED;  mTexture=textureManager.createTexture(gl);  mTexture.bind(gl);  gl.glTexParameterf(GL10.GL_TEXTURE_2D,GL10.GL_TEXTURE_MIN_FILTER,GL10.GL_NEAREST);  gl.glTexParameterf(GL10.GL_TEXTURE_2D,GL10.GL_TEXTURE_MAG_FILTER,GL10.GL_NEAREST);  gl.glTexParameterf(GL10.GL_TEXTURE_2D,GL10.GL_TEXTURE_WRAP_S,GL10.GL_CLAMP_TO_EDGE);  gl.glTexParameterf(GL10.GL_TEXTURE_2D,GL10.GL_TEXTURE_WRAP_T,GL10.GL_CLAMP_TO_EDGE);  gl.glTexEnvf(GL10.GL_TEXTURE_ENV,GL10.GL_TEXTURE_ENV_MODE,GL10.GL_REPLACE);}  }
class C{  FIRTypeIV(int numBands,int nHalf){  super(numBands,nHalf,2 * nHalf);}  }
class C{  @Override public void initializeInternal(int val,int loc){  menStarting=val;  menShooting=val;  super.initializeInternal(val,loc);}  }
class C{  public void arrangeChildren(ArrayList<View> list,int itemCount){  arrangeChildren(list,itemCount,true);}  }
class C{  public boolean isAnalyticsModuleSupport(){  return analyticsModuleSupport;}  }
class C{  private void processCustomMetricParameters(@SuppressWarnings("rawtypes") GoogleAnalyticsRequest request,List<NameValuePair> postParms){  Map<String,String> customMetricParms=new HashMap<String,String>();  for (  String defaultCustomMetricKey : defaultRequest.custommMetrics().keySet()) {    customMetricParms.put(defaultCustomMetricKey,defaultRequest.custommMetrics().get(defaultCustomMetricKey));  }  @SuppressWarnings("unchecked") Map<String,String> requestCustomMetrics=request.custommMetrics();  for (  String requestCustomDimKey : requestCustomMetrics.keySet()) {    customMetricParms.put(requestCustomDimKey,requestCustomMetrics.get(requestCustomDimKey));  }  for (  String key : customMetricParms.keySet()) {    postParms.add(new BasicNameValuePair(key,customMetricParms.get(key)));  }}  }
class C{  public long age(){  final Date lm=lastModified();  final Date now=new Date();  return now.getTime() - lm.getTime();}  }
class C{  @Override public void createControl(final Composite parent){  final Composite container=new Composite(parent,SWT.NULL);  final FormLayout formLayout=new FormLayout();  formLayout.marginHeight=FormHelper.MarginHeight();  formLayout.marginWidth=FormHelper.MarginWidth();  container.setLayout(formLayout);  setControl(container);  final Label label=new Label(container,SWT.WRAP);  final FormData labelData=new FormData();  labelData.top=new FormAttachment(0,0);  labelData.left=new FormAttachment(0,0);  label.setLayoutData(labelData);  label.setText(Messages.getString("MergeEndPage.StatusLabelText"));  ControlSize.setCharWidthHint(label,MergeWizard.TEXT_CHARACTER_WIDTH);  final Label label2=new Label(container,SWT.WRAP);  final FormData label2Data=new FormData();  label2Data.top=new FormAttachment(label,10,SWT.BOTTOM);  label2Data.left=new FormAttachment(0,0);  label2.setLayoutData(label2Data);  label2.setText(Messages.getString("MergeEndPage.ExplainMergeProcess"));  ControlSize.setCharWidthHint(label2,MergeWizard.TEXT_CHARACTER_WIDTH);  final Label label3=new Label(container,SWT.WRAP);  final FormData label3Data=new FormData();  label3Data.top=new FormAttachment(label2,10,SWT.BOTTOM);  label3Data.left=new FormAttachment(0,0);  label3.setLayoutData(label3Data);  label3.setText(Messages.getString("MergeEndPage.InformConflictResolution"));}  }
class C{  @Override public void addScannedResult(Map<ByteArrayWrapper,MeasureAggregator[]> scannerResult){  this.scannerResult=scannerResult;  resulSize=scannerResult.size();  this.resultIterator=scannerResult.entrySet().iterator();}  }
class C{  public <S extends T>S copyIntoSubclass(Class<S> subclass){  S copy=Instantiator.of(subclass).instantiate();  return copyInto(copy);}  }
class C{  public Builder detectAll(){  return enable(DETECT_VM_ACTIVITY_LEAKS | DETECT_VM_CURSOR_LEAKS | DETECT_VM_CLOSABLE_LEAKS| DETECT_VM_REGISTRATION_LEAKS| DETECT_VM_FILE_URI_EXPOSURE);}  }
class C{  public static int[] toArray(List<Integer> list){  if (list == null) {    return null;  }  int length=list.size();  int[] intArray=new int[length];  for (int i=0; i < length; i++) {    intArray[i]=list.get(i);  }  return intArray;}  }
class C{  public final void mesh(Mesh3D mesh,boolean smooth,float normalLength){  gfx.beginShape(PConstants.TRIANGLES);  if (smooth) {    for (    Face f : mesh.getFaces()) {      gfx.normal(f.a.normal.x,f.a.normal.y,f.a.normal.z);      gfx.vertex(f.a.x,f.a.y,f.a.z);      gfx.normal(f.b.normal.x,f.b.normal.y,f.b.normal.z);      gfx.vertex(f.b.x,f.b.y,f.b.z);      gfx.normal(f.c.normal.x,f.c.normal.y,f.c.normal.z);      gfx.vertex(f.c.x,f.c.y,f.c.z);    }  } else {    for (    Face f : mesh.getFaces()) {      gfx.normal(f.normal.x,f.normal.y,f.normal.z);      gfx.vertex(f.a.x,f.a.y,f.a.z);      gfx.vertex(f.b.x,f.b.y,f.b.z);      gfx.vertex(f.c.x,f.c.y,f.c.z);    }  }  gfx.endShape();  if (normalLength > 0) {    int strokeCol=0;    boolean isStroked=gfx.stroke;    if (isStroked) {      strokeCol=gfx.strokeColor;    }    if (smooth) {      for (      Vertex v : mesh.getVertices()) {        Vec3D w=v.add(v.normal.scale(normalLength));        Vec3D n=v.normal.scale(127);        gfx.stroke(n.x + 128,n.y + 128,n.z + 128);        gfx.line(v.x,v.y,v.z,w.x,w.y,w.z);      }    } else {      float third=1f / 3;      for (      Face f : mesh.getFaces()) {        Vec3D c=f.a.add(f.b).addSelf(f.c).scaleSelf(third);        Vec3D d=c.add(f.normal.scale(normalLength));        Vec3D n=f.normal.scale(127);        gfx.stroke(n.x + 128,n.y + 128,n.z + 128);        gfx.line(c.x,c.y,c.z,d.x,d.y,d.z);      }    }    if (isStroked) {      gfx.stroke(strokeCol);    } else {      gfx.noStroke();    }  }}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  int n=s.readInt();  attrs=(n >= 1) ? new Hashtable<String,Attribute>(n * 2) : new Hashtable<String,Attribute>(2);  while (--n >= 0) {    put((Attribute)s.readObject());  }}  }
class C{  public boolean addIncidentEdge(Edge edge){  return getIncidentEdges().add(edge);}  }
class C{  @Override public String toString(){  return "CUdevice[" + "nativePointer=0x" + Long.toHexString(getNativePointer()) + "]";}  }
class C{  @Override public boolean handles(ResultHistoryList history,int index){  return (getClassifier(history,index) instanceof MultiLabelClassifier) && (history.getResultAt(index).getMeasurement(CURVE_DATA_MACRO) != null);}  }
class C{  private void defineXstreamMappingV1(){  xstreamV1.omitField(LegacyRegistration.class,"associatedOrganisations");  xstreamV1.alias("organisation",LegacyOrganisation.class);  xstreamV1.alias("registry",LegacyRegistration.class);}  }
class C{  private boolean checkAuthorization(String authorization){  if (authorization == null)   return false;  try {    String userInfo=authorization.substring(6).trim();    Base64 decoder=new Base64();    String namePassword=new String(decoder.decode(userInfo.getBytes()));    int index=namePassword.indexOf(':');    String name=namePassword.substring(0,index);    String password=namePassword.substring(index + 1);    Login login=new Login(Env.getCtx());    KeyNamePair rolesKNPairs[]=login.getRoles(name,password);    if (rolesKNPairs == null || rolesKNPairs.length == 0)     throw new AdempiereException("@UserPwdError@");    for (    KeyNamePair keyNamePair : rolesKNPairs) {      if ("System Administrator".equals(keyNamePair.getName())) {        log.info("Name=" + name);        return true;      }    }    log.warning("Not a Sys Admin = " + name);    return false;  } catch (  Exception e) {    log.log(Level.SEVERE,"check",e);  }  return false;}  }
class C{  @Override protected EClass eStaticClass(){  return DatatypePackage.Literals.TYPE;}  }
class C{  public CommonDialogWindow createAddSoftwareModuleWindow(){  return createUpdateSoftwareModuleWindow(null);}  }
class C{  public static void runSsoSettings(String adminEmail,String password,String domainName){  try {    SingleSignOnService client=new SingleSignOnService(adminEmail,password,domainName,"test");    final String key=Base64.encode(("-----BEGIN CERTIFICATE-----\n" + "MIIEbDCCA9WgAwIBAgIBCTANBgkqhkiG9w0BAQUFADCBjDELMAkGA1UEBhMCVVMx\n" + "ETAPBgNVBAgTCE5ldyBZb3JrMREwDwYDVQQHEwhOZXcgWW9yazEPMA0GA1UEChMG\n"+ "R29vZ2xlMSQwIgYDVQQDFBtUaW0gRGllcmtzIENBIFtubyBzZWN1cml0eV0xIDAe\n"+ "BgkqhkiG9w0BCQEWEWRpZXJrc0Bnb29nbGUuY29tMB4XDTA0MDQxNDIwMzM1NFoX\n"+ "DTA1MDQxNDIwMzM1NFowQTEPMA0GA1UEChMGR29vZ2xlMRcwFQYDVQQLEw5TaW5n\n"+ "bGUgU2lnbi1vbjEVMBMGA1UEAxMMTG9naW4gU2VydmVyMIIBtzCCASwGByqGSM44\n"+ "BAEwggEfAoGBAKGpKYcoXxcgewIuAdDxT8QzSNI9I7Lja/LoueR1z7A/l0UWqZHO\n"+ "6J8SyudgXFVxfkQEeYGbidsew2RMxvMl6pWMfqr/22eCqr9GPVkT7GVGqjAVdHVu\n"+ "qJOPKSW7fQV3c82aj5g2qgkpwc1fUep8Cn1+Nz4ApCttVCSJD5kPtDTPAhUAo9jk\n"+ "HrC8TH0kMFARmNbG5pizRS8CgYEAiB/TJmxCStDDMhDwo0ccnWgNo4oOQlMSeN46\n"+ "Gb5YyVejeFBZSGni958ZcaaPW0Dg4VpbGxsQTSuF8P1BVY03fqimMd+dbRWSGgNy\n"+ "YpkpdWBe21FnsSrnIrWnv/3K/7HMB7Xn4rEbhSvJF14I5TDuRN3lIOnIOKK6I5O9\n"+ "QYfIfYoDgYQAAoGABPbEsbJS59Gj9556j9eAnGeLur56b98AGO7OFvYSoo9XcjoS\n"+ "uYiFNhxu8MLzhkEqA6bqUif0mpl/d/VAXc74mdxaeg3vGb5MUGzdcr/mk9+32KYx\n"+ "aX1hxn3UEN6WuypWe1eKuRVUzI/OepC88ib60XZHnkW9ByqqYXWdyGxW/G2jggEN\n"+ "MIIBCTAJBgNVHRMEAjAAMCEGCWCGSAGG+EIBDQQUFhJHb29nbGUgLSBEaWVya3Mg\n"+ "Q0EwHQYDVR0OBBYEFISoKKfKZlD6QIGqX60VCQA07sGLMIG5BgNVHSMEgbEwga6A\n"+ "FK517Zhw+C2LH0rAjGRdEx61PYsIoYGSpIGPMIGMMQswCQYDVQQGEwJVUzERMA8G\n"+ "A1UECBMITmV3IFlvcmsxETAPBgNVBAcTCE5ldyBZb3JrMQ8wDQYDVQQKEwZHb29n\n"+ "bGUxJDAiBgNVBAMUG1RpbSBEaWVya3MgQ0EgW25vIHNlY3VyaXR5XTEgMB4GCSqG\n"+ "SIb3DQEJARYRZGllcmtzQGdvb2dsZS5jb22CAQAwDQYJKoZIhvcNAQEFBQADgYEA\n"+ "qwjvp27Xq1lp2ZyVWrGj8A3vuwUhsA2xGHvw4FTk4bCPwuuErugP/pwNl2582KNR\n"+ "bjl1Vnz6zXkW1T4855EFWOZZkhIrvLGTRIoyQODCoW/Zd+3e7CfTvPdmJJNaVpD7\n"+ "1RMPC45yjolVq4JLTT9/y6/+/5Nnn7oELnXRgDiMAR0=\n"+ "-----END CERTIFICATE-----").getBytes());    LOGGER.log(Level.INFO,"Retrieving SSO Settings: \n" + client.getSsoSettings().getAllProperties());    LOGGER.log(Level.INFO,"Retrieving SSO Key: \n" + client.getSsoSigningKey().getAllProperties());    LOGGER.log(Level.INFO,"Updating SSO Key: \n" + client.updateSsoSigningKey(key).getAllProperties());  } catch (  AuthenticationException e) {    LOGGER.log(Level.SEVERE,e.getMessage(),e);  }catch (  IllegalArgumentException e) {    LOGGER.log(Level.SEVERE,e.getMessage(),e);  }catch (  ServiceException e) {    LOGGER.log(Level.SEVERE,e.getMessage(),e);  }catch (  MalformedURLException e) {    LOGGER.log(Level.SEVERE,e.getMessage(),e);  }catch (  IOException e) {    LOGGER.log(Level.SEVERE,e.getMessage(),e);  }}  }
class C{  public boolean computeScrollOffset(){  if (mFinished) {    return false;  }  int timePassed=(int)(AnimationUtils.currentAnimationTimeMillis() - mStartTime);  if (timePassed < mDuration) {switch (mMode) {case SCROLL_MODE:      final float x=mInterpolator.getInterpolation(timePassed * mDurationReciprocal);    mCurrX=mStartX + Math.round(x * mDeltaX);  mCurrY=mStartY + Math.round(x * mDeltaY);break;case FLING_MODE:final float t=(float)timePassed / mDuration;final int index=(int)(NB_SAMPLES * t);float distanceCoef=1.f;float velocityCoef=0.f;if (index < NB_SAMPLES) {final float t_inf=(float)index / NB_SAMPLES;final float t_sup=(float)(index + 1) / NB_SAMPLES;final float d_inf=SPLINE_POSITION[index];final float d_sup=SPLINE_POSITION[index + 1];velocityCoef=(d_sup - d_inf) / (t_sup - t_inf);distanceCoef=d_inf + (t - t_inf) * velocityCoef;}mCurrVelocity=velocityCoef * mDistance / mDuration * 1000.0f;mCurrX=mStartX + Math.round(distanceCoef * (mFinalX - mStartX));mCurrX=Math.min(mCurrX,mMaxX);mCurrX=Math.max(mCurrX,mMinX);mCurrY=mStartY + Math.round(distanceCoef * (mFinalY - mStartY));mCurrY=Math.min(mCurrY,mMaxY);mCurrY=Math.max(mCurrY,mMinY);if (mCurrX == mFinalX && mCurrY == mFinalY) {mFinished=true;}break;}} else {mCurrX=mFinalX;mCurrY=mFinalY;mFinished=true;}return true;}  }
class C{  @Override public String create(String subDirectory){  return FilenameUtils.concat(getRootDirectoryPath(),subDirectory);}  }
class C{  private int countMark(TicTacToeBoard board,int c,int r,int dc,int dr,int sz,char m){  int ct=0;  for (int i=0; i < sz; i++, c+=dc, r+=dr) {    if (board.isClear(c,r)) {      continue;    }    if (board.get(c,r) != m) {      return -1;    }    ct++;  }  return ct;}  }
class C{  public DrawerBuilder withFooter(@LayoutRes int footerViewRes){  if (mActivity == null) {    throw new RuntimeException("please pass an activity first to use this call");  }  if (footerViewRes != -1) {    this.mFooterView=mActivity.getLayoutInflater().inflate(footerViewRes,null,false);  }  return this;}  }
class C{  public static Element drawFrame(SVGPlot svgp,Projection2D proj,double[] min,double[] max){  SVGPath path=new SVGPath();  ArrayList<double[]> edges=getVisibleEdges(proj,min,max);  double[] rv_min=proj.fastProjectDataToRenderSpace(min);  recDrawEdges(path,rv_min[0],rv_min[1],edges,BitsUtil.zero(edges.size()));  return path.makeElement(svgp);}  }
class C{  public OdorWorldEntity(final String imageLocation,OdorWorld world){  this.animation=new Animation(imageLocation);  this.parentWorld=world;  animation.start();}  }
class C{  public void markDeleted(boolean deleted){  markedAsDeleted=deleted;}  }
class C{  public void testSetF20Momentary(){  boolean f20Momentary=false;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setF20Momentary(f20Momentary);}  }
class C{  protected void verifyNewTargetCount(BlockObject sourceObj,int newTargetsCount,boolean zeroIsValid){  if ((!zeroIsValid) && (newTargetsCount == 0)) {    throw APIException.badRequests.invalidZeroLinkedTargetsRequested();  }}  }
class C{  public static boolean greaterEquals(double x,double y){  return value(x - y) >= 0;}  }
class C{  protected void sendDeliveryReport(ImdnDocument.DeliveryStatus status,long timestamp) throws PayloadException, NetworkException {  String msgId=getFileTransferId();  if (sLogger.isActivated()) {    sLogger.debug("Send delivery report ".concat(status.toString()));  }  ChatSession chatSession;  ContactId remote=getRemoteContact();  InstantMessagingService imService=Core.getInstance().getImService();  if (mGroupFileTransfer) {    chatSession=imService.getGroupChatSession(getContributionID());  } else {    chatSession=imService.getOneToOneChatSession(remote);  }  if (chatSession != null && chatSession.isMediaEstablished()) {    chatSession.sendMsrpMessageDeliveryStatus(remote,msgId,status,timestamp);  } else {    String chatId=mGroupFileTransfer ? getContributionID() : remote.toString();    mImdnManager.sendMessageDeliveryStatusImmediately(chatId,remote,msgId,status,mRemoteInstanceId,timestamp);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:33.918 -0500",hash_original_method="8D4DBCB92EE624B36C1D9B80653BEEEA",hash_generated_method="2B7F988CEDF2A109C681D39B5CE213CF") public void onObbStateChange(String path,int state){}  }
class C{  @Override public boolean doesGuiPauseGame(){  return false;}  }
class C{  public boolean visitUnaryOperation(ExpressionOwner owner,UnaryOperation op){  return true;}  }
class C{  public RoleManager move(int newPosition){  checkPermission(Permission.MANAGE_ROLES);  checkPosition();  int maxRolePosition=role.getGuild().getRolesForUser(role.getJDA().getSelfInfo()).get(0).getPosition();  if (newPosition >= maxRolePosition)   throw new PermissionException("Cannot move to a position equal to or higher than the highest role that you have access to.");  if (newPosition < 0 || newPosition == role.getPosition())   return this;  Map<Integer,Role> newPositions=new HashMap<>();  Map<Integer,Role> currentPositions=role.getGuild().getRoles().stream().collect(Collectors.toMap(null,null));  currentPositions.remove(-1);  int searchIndex=newPosition > role.getPosition() ? newPosition : newPosition;  int index=0;  for (  Role r : currentPositions.values()) {    if (r == role)     continue;    if (index == searchIndex) {      newPositions.put(index,role);      index++;    }    newPositions.put(index,r);    index++;  }  if (!newPositions.containsValue(role))   newPositions.put(newPosition,role);  for (int i=0; i < newPositions.size(); i++) {    if (currentPositions.get(i) == newPositions.get(i))     newPositions.remove(i);  }  JSONArray rolePositions=new JSONArray();  newPositions.forEach(null);  ((JDAImpl)role.getJDA()).getRequester().patch(Requester.DISCORD_API_PREFIX + "guilds/" + role.getGuild().getId()+ "/roles",rolePositions);  return this;}  }
class C{  public void clearUserModules(){  try {    runInDatabase("cts:uris((),(),cts:not-query(cts:collection-query('hub-core-module')))[\n" + "  fn:not(\n" + "    fn:ends-with(., \"options/spring-batch.xml\") or\n"+ "    fn:ends-with(., \"options/traces.xml\") or\n"+ "    fn:matches(., \"/marklogic.rest.resource/(collector|debug|entity|flow|tracing|validate|writer)/assets/(metadata\\.xml|resource\\.(xqy|sjs))\") or\n"+ "    fn:matches(., \"/marklogic.rest.transform/(get-content|run-flow|trace-json|trace-search)/assets/(metadata\\.xml|transform\\.(xqy|sjs))\")\n"+ "  )\n"+ "] ! xdmp:document-delete(.)\n",hubConfig.modulesDbName);  } catch (  FailedRequestException e) {    logger.error("Failed to clear user modules");  }}  }
class C{  static MyDialogFragment newInstance(int num){  MyDialogFragment f=new MyDialogFragment();  Bundle args=new Bundle();  args.putInt("num",num);  f.setArguments(args);  return f;}  }
class C{  @Override public int size(){  return count;}  }
class C{  public void buildStandardCategory(String argsFileList,Properties argsProps,CategorySystemData sysData) throws IOException {  addProperties(sysData.getPropertiesFromDeprecatedNames());  addPropertiesFromEnvironmentVariableFileList();  addPropertiesFromSystemPropertyFileList();  addPropertiesFromCommandLineArgumentFileList(argsFileList);  addProperties(sysData.getPropertiesFromSystemProperties());  addProperties(argsProps);  addProperties(sysData.getPropertiesFromExternalNames());}  }
class C{  public void removeEntry(NceConsistRosterEntry e){  if (log.isDebugEnabled()) {    log.debug("Remove entry " + e);  }  _list.remove(_list.indexOf(e));  setDirty(true);  firePropertyChange("remove",null,e);}  }
class C{  protected WDSBlueMixProxyResource mock_bluemix_rest_client_is_created(int status_code,Object entity) throws Exception {  wdsresource=mock(WDSBlueMixProxyResource.class);  ResponseBuilder responseBuilder=mock(ResponseBuilder.class);  response=mock(Response.class);  when(response.getStatus()).thenReturn(status_code);  when(response.getEntity()).thenReturn(entity);  when((responseBuilder).build()).thenReturn(response);  return wdsresource;}  }
class C{  @Override public void drawSeries(Graphics2D g2,Rectangle2D dataArea,PlotRenderingInfo info,PolarPlot plot,XYDataset dataset,int seriesIndex){  final int numPoints=dataset.getItemCount(seriesIndex);  if (numPoints == 0) {    return;  }  GeneralPath poly=null;  ValueAxis axis=plot.getAxisForDataset(plot.indexOf(dataset));  for (int i=0; i < numPoints; i++) {    double theta=dataset.getXValue(seriesIndex,i);    double radius=dataset.getYValue(seriesIndex,i);    Point p=plot.translateToJava2D(theta,radius,axis,dataArea);    if (poly == null) {      poly=new GeneralPath();      poly.moveTo(p.x,p.y);    } else {      poly.lineTo(p.x,p.y);    }  }  assert poly != null;  if (getConnectFirstAndLastPoint()) {    poly.closePath();  }  g2.setPaint(lookupSeriesPaint(seriesIndex));  g2.setStroke(lookupSeriesStroke(seriesIndex));  if (isSeriesFilled(seriesIndex)) {    Composite savedComposite=g2.getComposite();    g2.setComposite(this.fillComposite);    g2.fill(poly);    g2.setComposite(savedComposite);    if (this.drawOutlineWhenFilled) {      g2.setPaint(lookupSeriesOutlinePaint(seriesIndex));      g2.draw(poly);    }  } else {    g2.draw(poly);  }  if (this.shapesVisible) {    EntityCollection entities=null;    if (info != null) {      entities=info.getOwner().getEntityCollection();    }    PathIterator pi=poly.getPathIterator(null);    int i=0;    while (!pi.isDone()) {      final float[] coords=new float[6];      final int segType=pi.currentSegment(coords);      pi.next();      if (segType != PathIterator.SEG_LINETO && segType != PathIterator.SEG_MOVETO) {        continue;      }      final int x=Math.round(coords[0]);      final int y=Math.round(coords[1]);      final Shape shape=ShapeUtilities.createTranslatedShape(getItemShape(seriesIndex,i++),x,y);      Paint paint;      if (useFillPaint) {        paint=lookupSeriesFillPaint(seriesIndex);      } else {        paint=lookupSeriesPaint(seriesIndex);      }      g2.setPaint(paint);      g2.fill(shape);      if (isSeriesFilled(seriesIndex) && this.drawOutlineWhenFilled) {        g2.setPaint(lookupSeriesOutlinePaint(seriesIndex));        g2.setStroke(lookupSeriesOutlineStroke(seriesIndex));        g2.draw(shape);      }      if (entities != null && AbstractXYItemRenderer.isPointInRect(dataArea,x,y)) {        addEntity(entities,shape,dataset,seriesIndex,i - 1,x,y);      }    }  }}  }
class C{  public void onStopping(){  sysStopping=true;}  }
class C{  public CategoryColumn tokenizeAndSort(){  CategoryColumn newColumn=CategoryColumn.create(name() + "[sorted]",this.size());  for (int r=0; r < size(); r++) {    String value=get(r);    Splitter splitter=Splitter.on(CharMatcher.WHITESPACE);    splitter=splitter.trimResults();    splitter=splitter.omitEmptyStrings();    List<String> tokens=new ArrayList<>(splitter.splitToList(value));    Collections.sort(tokens);    value=String.join(" ",tokens);    newColumn.add(value);  }  return newColumn;}  }
class C{  public static String escapeQueryString(String unescString){  if (unescString == null)   return null;  String escString="";  String shellSpChars="&;`'\"|*?~<>^()[]{}$\\\n";  for (int index=0; index < unescString.length(); index++) {    char nextChar=unescString.charAt(index);    if (shellSpChars.indexOf(nextChar) != -1)     escString+="\\";    escString+=nextChar;  }  return escString;}  }
class C{  @Override public void run(){  DatagramPacket packet=null;  while (this.running) {    try {      IceSocketWrapper localSock;synchronized (sockLock) {        if (!running)         return;        localSock=this.sock;      }      int receiveBufferSize=1500;      if (packet == null) {        packet=new DatagramPacket(new byte[receiveBufferSize],receiveBufferSize);      } else {        byte[] packetData=packet.getData();        if ((packetData == null) || (packetData.length < receiveBufferSize)) {          packet.setData(new byte[receiveBufferSize],0,receiveBufferSize);        } else {          packet.setLength(receiveBufferSize);        }      }      localSock.receive(packet);      if (!running)       return;      if (logger.isLoggable(Level.FINEST)) {        logger.finest("received datagram packet - addr: " + packet.getAddress() + " port: "+ packet.getPort());      }      if (packet.getPort() < 0) {        logger.warning("Out of range packet port, resetting to 0");        packet.setPort(0);      }      RawMessage rawMessage=new RawMessage(packet.getData(),packet.getLength(),new TransportAddress(packet.getAddress(),packet.getPort(),listenAddress.getTransport()),listenAddress);      messageQueue.add(rawMessage);    } catch (    SocketException ex) {      if (running) {        logger.log(Level.WARNING,"Connector died: " + listenAddress + " -> "+ remoteAddress,ex);        stop();        errorHandler.handleFatalError(this,"A socket exception was thrown" + " while trying to receive a message.",ex);      } else {      }    }catch (    ClosedChannelException cce) {      logger.log(Level.WARNING,"A net access point has gone useless:",cce);      stop();      errorHandler.handleFatalError(this,"ClosedChannelException occurred while listening" + " for messages!",cce);    }catch (    IOException ex) {      logger.log(Level.WARNING,"A net access point has gone useless:",ex);      errorHandler.handleError(ex.getMessage(),ex);    }catch (    Throwable ex) {      logger.log(Level.WARNING,"A net access point has gone useless:",ex);      stop();      errorHandler.handleFatalError(this,"Unknown error occurred while listening for messages!",ex);    }  }}  }
class C{  @Provides @Config("dnsUpdateTimeout") public static Duration provideDnsUpdateTimeout(){  return Duration.standardSeconds(30);}  }
class C{  private int hexToByte(byte b){switch (b) {case '0':    return 0;case '1':  return 1;case '2':return 2;case '3':return 3;case '4':return 4;case '5':return 5;case '6':return 6;case '7':return 7;case '8':return 8;case '9':return 9;case 'A':case 'a':return 10;case 'B':case 'b':return 11;case 'C':case 'c':return 12;case 'D':case 'd':return 13;case 'E':case 'e':return 14;case 'F':case 'f':return 15;default :throw new IllegalArgumentException("Switch error decoding URL");}}  }
class C{  public Type basicGetDefinedType(){  return definedType;}  }
class C{  @Override public Vertex parseOperator(TextStream stream,Map<String,Map<String,Vertex>> elements,boolean debug,Network network){  Vertex expression=network.createInstance(Primitive.EXPRESSION);  String next=stream.nextWord();  next=next.toLowerCase();  if (!OPERATORS.contains(next)) {    throw new SelfParseException("Invalid operator: '" + next + "' valid operators are: "+ OPERATORS,stream);  }  String last=next.toLowerCase();  if (next.equals(NOT)) {    next="not";  }  Vertex operator=network.createVertex(new Primitive(next));  expression.addRelationship(Primitive.OPERATOR,operator);  expression.setName(next);  if (last.equals(IF)) {    List<Vertex> arguments=parseArguments(expression,Primitive.ARGUMENT,0,stream,elements,false,debug,network);    ensureArguments(IF,1,arguments,stream);    stream.skipWhitespace();    ensureNext('{',stream);    parseArguments(expression,Primitive.THEN,0,stream,elements,true,debug,network);    stream.skipWhitespace();    ensureNext('}',stream);    next=lower(stream.peekWord());    boolean elseif=true;    while (elseif) {      elseif=false;      if (ELSE.equals(next)) {        stream.nextWord();        next=lower(stream.peekWord());        if (IF.equals(next)) {          elseif=true;          Vertex elseifExpression=parseOperator(stream,elements,debug,network);          expression.addRelationship(Primitive.ELSEIF,elseifExpression);        } else {          stream.skipWhitespace();          ensureNext('{',stream);          parseArguments(expression,Primitive.ELSE,0,stream,elements,true,debug,network);          stream.skipWhitespace();          ensureNext('}',stream);        }      }    }  } else   if (last.equals(WHILE)) {    List<Vertex> arguments=parseArguments(expression,Primitive.ARGUMENT,0,stream,elements,false,debug,network);    ensureArguments(WHILE,1,arguments,stream);    stream.skipWhitespace();    ensureNext('{',stream);    parseArguments(expression,Primitive.DO,0,stream,elements,true,debug,network);    stream.skipWhitespace();    ensureNext('}',stream);  } else   if (last.equals(DO) || last.equals(THINK)) {    stream.skipWhitespace();    ensureNext('{',stream);    parseArguments(expression,Primitive.DO,0,stream,elements,true,debug,network);    stream.skipWhitespace();    ensureNext('}',stream);  } else   if (last.equals(FOR)) {    stream.skipWhitespace();    ensureNext('(',stream);    boolean more=true;    while (more) {      Vertex variable=parseElement(stream,elements,debug,network);      stream.skipWhitespace();      ensureNext("in",stream);      Vertex object=parseElement(stream,elements,debug,network);      expression.addRelationship(Primitive.ARGUMENT,variable,Integer.MAX_VALUE);      expression.addRelationship(Primitive.ARGUMENT,object,Integer.MAX_VALUE);      stream.skipWhitespace();      if (stream.peek() == ',') {        stream.skip();      } else {        more=false;      }    }    ensureNext(')',stream);    stream.skipWhitespace();    ensureNext('{',stream);    parseArguments(expression,Primitive.DO,0,stream,elements,true,debug,network);    stream.skipWhitespace();    ensureNext('}',stream);  } else   if (last.equals(NEW)) {    stream.skipWhitespace();    if (Character.isUpperCase(stream.peek())) {      int position=stream.getPosition();      String type=stream.nextWord();      if (stream.peek() == '(') {        stream.skip();        stream.skipWhitespace();        ensureNext(')',stream);        expression.addRelationship(Primitive.ARGUMENT,new Primitive(type.toLowerCase()));      } else {        stream.setPosition(position);        parseArguments(expression,Primitive.ARGUMENT,0,stream,elements,false,debug,network);      }    } else {      parseArguments(expression,Primitive.ARGUMENT,0,stream,elements,false,debug,network);    }  } else {    parseArguments(expression,Primitive.ARGUMENT,0,stream,elements,false,debug,network);  }  return expression;}  }
class C{  public void compose(StylesheetRoot sroot) throws TransformerException {  super.compose(sroot);  StylesheetRoot.ComposeState cstate=sroot.getComposeState();  m_selectExpression.fixupVariables(cstate.getVariableNames(),cstate.getGlobalsSize());}  }
class C{  public int search(char[] text){  int m=pattern.length;  int n=text.length;  int i, j;  for (i=0, j=0; i < n && j < m; i++) {    j=dfa[text[i]][j];  }  if (j == m)   return i - m;  return n;}  }
class C{  @CheckReturnValue public TheoryBuilder2<A,B> assuming(BiPredicate<A,B> newAssumption){  return new TheoryBuilder2<A,B>(this.state,this.as,this.bs,this.assumptions.and(newAssumption));}  }
class C{  public void testBoundedInts(){  AtomicInteger fails=new AtomicInteger(0);  ThreadLocalRandom r=ThreadLocalRandom.current();  long size=12345L;  for (int least=-15485867; least < MAX_INT_BOUND; least+=524959) {    for (int bound=least + 2; bound < least && bound < MAX_INT_BOUND; bound+=67867967) {      final int lo=least, hi=bound;      r.ints(size,lo,hi).parallel().forEach(null);    }  }  assertEquals(fails.get(),0);}  }
class C{  public void loading(){  if (footerProgressBarEnabled)   mProgressBar.setVisibility(View.VISIBLE);  mHintView.setText(R.string.pulltorefresh_listview_header_hint_loading);}  }
class C{  public boolean isIPv6reference(){  return _is_IPv6reference;}  }
class C{  public void useAttributeFor(final Class<?> definedIn,final String fieldName){  if (attributeMapper == null) {    throw new InitializationException("No " + AttributeMapper.class.getName() + " available");  }  attributeMapper.addAttributeFor(definedIn,fieldName);}  }
class C{  private static void createOperandExpression(final SQLProvider provider,final INaviOperandTreeNode node,final int parent) throws SQLException {  if (node.getId() != -1) {    return;  }  final ExpressionType type=node.getType();  final String value=getValue(type,node.getValue());  final int moduleId=node.getOperand().getInstruction().getModule().getConfiguration().getId();  final int typeId=COperandTypeConverter.convert(type);  final String immediate=Convert.isDecString(value) ? value : "null";  final String symbol=Convert.isDecString(value) ? "null" : value;  final String parentString=parent == 0 ? "null" : String.valueOf(parent);  final ResultSet resultSet=provider.getConnection().executeQuery("select max(id)+1 AS id from " + CTableNames.EXPRESSION_TREE_TABLE + " where module_id = "+ moduleId,true);  try {    if (resultSet.next()) {      final int id=resultSet.getInt("id");      final String query=String.format("insert into " + CTableNames.EXPRESSION_TREE_TABLE + "(module_id, id, type, symbol, immediate, position, parent_id) "+ " values(%d, %d , %d, ?, %s, 0, %s)",moduleId,id,typeId,immediate,parentString);      final PreparedStatement statement=provider.getConnection().getConnection().prepareStatement(query);      try {        statement.setString(1,symbol);        statement.executeUpdate();      }  finally {        statement.close();      }      node.setId(id);    }  }  finally {    resultSet.close();  }}  }
class C{  public boolean isFromDHCP(){  return fromDHCP;}  }
class C{  protected void connect() throws Exception {  FloodlightModuleContext fmc=new FloodlightModuleContext();  ThreadPool tp=new ThreadPool();  syncManager=new RemoteSyncManager();  fmc.addService(IThreadPoolService.class,tp);  fmc.addService(ISyncService.class,syncManager);  fmc.addConfigParam(syncManager,"hostname",settings.hostname);  fmc.addConfigParam(syncManager,"port",Integer.toString(settings.port));  if (settings.authScheme != null) {    fmc.addConfigParam(syncManager,"authScheme",settings.authScheme.toString());    fmc.addConfigParam(syncManager,"keyStorePath",settings.keyStorePath);    fmc.addConfigParam(syncManager,"keyStorePassword",settings.keyStorePassword);  }  tp.init(fmc);  syncManager.init(fmc);  tp.startUp(fmc);  syncManager.startUp(fmc);  out.println("Using remote sync service at " + settings.hostname + ":"+ settings.port);}  }
class C{  private void updateAlbumTag(int i,ViewHolder tag){  final SearchEntry entry=mSortedAlbums.get(i);  ProviderAggregator aggregator=ProviderAggregator.getDefault();  Album album=aggregator.retrieveAlbum(entry.ref,entry.identifier);  if (album != null && album.equals(tag.content)) {    return;  }  if (album != null) {    tag.tvTitle.setText(album.getName());    if (album.getYear() > 0) {      tag.tvSubtitle.setText("" + album.getYear());    } else {      tag.tvSubtitle.setText("");    }    tag.albumArtImageView.loadArtForAlbum(album);    tag.sourceLogo=PluginsLookup.getDefault().getCachedLogo(tag.vRoot.getResources(),album);    tag.ivSource.setImageDrawable(tag.sourceLogo);    tag.content=album;    tag.ivOverflow.setOnClickListener(mOverflowAlbumClickListener);    ProviderConnection conn=PluginsLookup.getDefault().getProvider(album.getProvider());    if (conn != null) {      IMusicProvider binder=conn.getBinder();      if (binder != null) {        try {          binder.fetchAlbumTracks(album.getRef());        } catch (        RemoteException e) {          Log.e(TAG,"Cannot fetch album tracks");        }      }    }  } else {    tag.tvTitle.setText(R.string.loading);    tag.tvSubtitle.setText(null);    tag.albumArtImageView.setDefaultArt();    tag.ivOverflow.setOnClickListener(null);  }}  }
class C{  public static MessagingFraction createDefaultFraction(){  return new MessagingFraction().applyDefaults();}  }
class C{  public boolean isEmpty(){  return this.elements.isEmpty();}  }
class C{  public static <K extends Comparable<? super K>,V>Collection<K> sortedKeySet(Map<K,V> m){  throw new RuntimeException();}  }
class C{  @Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){  int width=resolveSize(mDesiredWidth,widthMeasureSpec);  int height;  if (width == mDesiredWidth) {    height=mDesiredHeight;  } else {    height=Math.round((float)mDesiredHeight / mDesiredWidth * width);    height=resolveSize(height,heightMeasureSpec);  }  super.onMeasure(MeasureSpec.makeMeasureSpec(width,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(height,MeasureSpec.EXACTLY));}  }
class C{  public void endRegisterInstantiatorsSend(long startTime,boolean failed){  long duration=getStatTime() - startTime;  endClientOpSend(duration,failed);  this.sendStats.incInt(registerInstantiatorsSendInProgressId,-1);  int endRegisterInstantiatorsSendId;  if (failed) {    endRegisterInstantiatorsSendId=registerInstantiatorsSendFailedId;  } else {    endRegisterInstantiatorsSendId=registerInstantiatorsSendId;  }  this.sendStats.incInt(endRegisterInstantiatorsSendId,1);  this.stats.incLong(registerInstantiatorsSendDurationId,duration);}  }
class C{  public CFGFrame analyze(ClassLoader classLoader,String owner,String method,MethodNode node) throws AnalyzerException {  cfgGenerator=new CFGGenerator(classLoader,owner,method,node);  this.analyze(owner,node);  Frame[] frames=getFrames();  if (frames.length == 0)   return null;  return (CFGFrame)getFrames()[0];}  }
class C{  public void extractAchievementsFromConfig(){  ignoreVerticalDistance=plugin.getConfig().getBoolean("IgnoreVerticalDistance",false);  footAchievementsCache=extractDistanceAchievementFromConfig("DistanceFoot");  horseAchievementsCache=extractDistanceAchievementFromConfig("DistanceHorse");  pigAchievementsCache=extractDistanceAchievementFromConfig("DistancePig");  minecartAchievementsCache=extractDistanceAchievementFromConfig("DistanceMinecart");  boatAchievementsCache=extractDistanceAchievementFromConfig("DistanceBoat");  glidingAchievementsCache=extractDistanceAchievementFromConfig("DistanceGliding");}  }
class C{  public UnconditionalFlowInfo discardNonFieldInitializations(){  int limit=this.maxFieldCount;  if (limit < BitCacheSize) {    long mask=(1L << limit) - 1;    this.definiteInits&=mask;    this.potentialInits&=mask;    this.nullBit1&=mask;    this.nullBit2&=mask;    this.nullBit3&=mask;    this.nullBit4&=mask;  }  if (this.extra == null) {    return this;  }  int vectorIndex, length=this.extra[0].length;  if ((vectorIndex=(limit / BitCacheSize) - 1) >= length) {    return this;  }  if (vectorIndex >= 0) {    long mask=(1L << (limit % BitCacheSize)) - 1;    for (int j=0; j < extraLength; j++) {      this.extra[j][vectorIndex]&=mask;    }  }  for (int i=vectorIndex + 1; i < length; i++) {    for (int j=0; j < extraLength; j++) {      this.extra[j][i]=0;    }  }  return this;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void addTask(final Task task){  tasks.add(task);}  }
class C{  public boolean hasNavigtionBar(){  return mHasNavigationBar;}  }
class C{  public static boolean imp(Object left,Object right) throws PageException {  return imp(Caster.toBooleanValue(left),Caster.toBooleanValue(right));}  }
class C{  public final Node pop(){  m_firstFree--;  Node n=m_map[m_firstFree];  m_map[m_firstFree]=null;  return n;}  }
class C{  public FingerprintFilterFactory(Map<String,String> args){  super(args);  maxOutputTokenSize=getInt(args,MAX_OUTPUT_TOKEN_SIZE_KEY,FingerprintFilter.DEFAULT_MAX_OUTPUT_TOKEN_SIZE);  separator=getChar(args,SEPARATOR_KEY,FingerprintFilter.DEFAULT_SEPARATOR);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public void icon(Object icon){  this.icon=Objects.requireNonNull(icon);}  }
class C{  public void scale(float scale){  this.x=this.x * scale;  this.y=this.y * scale;  this.z=this.z * scale;}  }
class C{  public static Time convertNanoToTime(long nanos){  long millis=nanos / 1000000;  long s=millis / 1000;  millis-=s * 1000;  long m=s / 60;  s-=m * 60;  long h=m / 60;  m-=h * 60;  long ms=getMillis(null,1970,1,1,(int)(h % 24),(int)m,(int)s,(int)millis);  return new Time(ms);}  }
class C{  public void print(){  String reportDeep="#";  Reports currentReports=this;  do {    System.out.println("[" + reportDeep + "] ----------------Diagnostic data-----------------");    System.out.println(currentReports.getXmlDiagnosticData());    System.out.println("[" + reportDeep + "] ----------------Validation report---------------");    System.out.println(currentReports.getXmlDetailedReport());    System.out.println("[" + reportDeep + "] ----------------Simple report-------------------");    System.out.println(currentReports.getXmlSimpleReport());    System.out.println("[" + reportDeep + "] END ------------------------------------------------");    reportDeep+="#";    currentReports=currentReports.getNextReports();  } while (currentReports != null);}  }
class C{  public KeyDetailsAction(KseFrame kseFrame){  super(kseFrame);  putValue(LONG_DESCRIPTION,res.getString("KeyDetailsAction.statusbar"));  putValue(NAME,res.getString("KeyDetailsAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("KeyDetailsAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("KeyDetailsAction.image")))));}  }
class C{  public long convertPolarStereographicToGeodetic(double Easting,double Northing){  double dy=0, dx=0;  double rho=0;  double t;  double PHI, sin_PHI;  double tempPHI=0.0;  double essin;  double pow_es;  double delta_radius;  long Error_Code=POLAR_NO_ERROR;  double min_easting=Polar_False_Easting - Polar_Delta_Easting;  double max_easting=Polar_False_Easting + Polar_Delta_Easting;  double min_northing=Polar_False_Northing - Polar_Delta_Northing;  double max_northing=Polar_False_Northing + Polar_Delta_Northing;  if (Easting > max_easting || Easting < min_easting) {    Error_Code|=POLAR_EASTING_ERROR;  }  if (Northing > max_northing || Northing < min_northing) {    Error_Code|=POLAR_NORTHING_ERROR;  }  if (Error_Code == POLAR_NO_ERROR) {    dy=Northing - Polar_False_Northing;    dx=Easting - Polar_False_Easting;    rho=Math.sqrt(dx * dx + dy * dy);    delta_radius=Math.sqrt(Polar_Delta_Easting * Polar_Delta_Easting + Polar_Delta_Northing * Polar_Delta_Northing);    if (rho > delta_radius) {      Error_Code|=POLAR_RADIUS_ERROR;    }  }  if (Error_Code == POLAR_NO_ERROR) {    if ((dy == 0.0) && (dx == 0.0)) {      Latitude=PI_OVER_2;      Longitude=Polar_Origin_Long;    } else {      if (Southern_Hemisphere != 0) {        dy*=-1.0;        dx*=-1.0;      }      if (Math.abs(Math.abs(Polar_Origin_Lat) - PI_OVER_2) > 1.0e-10)       t=rho * tc / (Polar_a_mc); else       t=rho * e4 / (two_Polar_a);      PHI=PI_OVER_2 - 2.0 * Math.atan(t);      while (Math.abs(PHI - tempPHI) > 1.0e-10) {        tempPHI=PHI;        sin_PHI=Math.sin(PHI);        essin=es * sin_PHI;        pow_es=Math.pow((1.0 - essin) / (1.0 + essin),es_OVER_2);        PHI=PI_OVER_2 - 2.0 * Math.atan(t * pow_es);      }      Latitude=PHI;      Longitude=Polar_Origin_Long + Math.atan2(dx,-dy);      if (Longitude > PI)       Longitude-=TWO_PI; else       if (Longitude < -PI)       Longitude+=TWO_PI;      if (Latitude > PI_OVER_2)       Latitude=PI_OVER_2; else       if (Latitude < -PI_OVER_2)       Latitude=-PI_OVER_2;      if (Longitude > PI)       Longitude=PI; else       if (Longitude < -PI)       Longitude=-PI;    }    if (Southern_Hemisphere != 0) {      Latitude*=-1.0;      Longitude*=-1.0;    }  }  return (Error_Code);}  }
class C{  private void itemChanged(){  if (getMethod() != null) {    this.messageEvent(getMethod());  }}  }
class C{  public static <T>T[] concat(@Nullable T[] arr,T... obj){  T[] newArr;  if (arr == null || arr.length == 0)   newArr=obj; else {    newArr=Arrays.copyOf(arr,arr.length + obj.length);    System.arraycopy(obj,0,newArr,arr.length,obj.length);  }  return newArr;}  }
class C{  public long readLong(int bitsPerValue) throws IOException {  assert bitsPerValue > 0 && bitsPerValue <= 64 : bitsPerValue;  long r=0;  while (bitsPerValue > 0) {    if (remainingBits == 0) {      current=in.readByte() & 0xFF;      remainingBits=8;    }    final int bits=Math.min(bitsPerValue,remainingBits);    r=(r << bits) | ((current >>> (remainingBits - bits)) & ((1L << bits) - 1));    bitsPerValue-=bits;    remainingBits-=bits;  }  return r;}  }
class C{  public LocalDate roundFloorCopy(){  return iInstant.withLocalMillis(iField.roundFloor(iInstant.getLocalMillis()));}  }
class C{  public boolean isShowingPopup(){  return getListPopupWindow().isShowing();}  }
class C{  public mxPoint(mxPoint point){  this(point.getX(),point.getY());}  }
class C{  private void displayValue(long bytes){  int exp=getUnit(bytes);  unitCombo.select(exp);  displayValue(bytes,exp);}  }
class C{  @SuppressWarnings("rawtypes") public static String join(Iterator iterator,String separator){  if (separator == null) {    separator="";  }  StringBuilder buf=new StringBuilder(256);  while (iterator.hasNext()) {    buf.append(iterator.next());    if (iterator.hasNext()) {      buf.append(separator);    }  }  return buf.toString();}  }
class C{  @Override @Retained protected InternalCacheEvent createEvent(DistributedRegion rgn) throws EntryNotFoundException {  @Retained EntryEventImpl event=EntryEventImpl.create(rgn,Operation.REMOVEALL_DESTROY,null,null,this.callbackArg,true,getSender());  if (this.context != null) {    event.context=this.context;  }  event.setPossibleDuplicate(this.possibleDuplicate);  event.setEventId(this.eventId);  return event;}  }
class C{  private void tql2(){  for (int i=1; i < n; i++) {    e[i - 1]=e[i];  }  e[n - 1]=0.0;  double f=0.0;  double tst1=0.0;  final double eps=Math.pow(2.0,-52.0);  for (int l=0; l < n; l++) {    tst1=Math.max(tst1,Math.abs(d[l]) + Math.abs(e[l]));    int m=l;    while (m < n) {      if (Math.abs(e[m]) <= eps * tst1) {        break;      }      m++;    }    if (m > l) {      int iter=0;      do {        iter=iter + 1;        double g=d[l];        double p=(d[l + 1] - g) / (2.0 * e[l]);        double r=Math.hypot(p,1.0);        if (p < 0) {          r=-r;        }        d[l]=e[l] / (p + r);        d[l + 1]=e[l] * (p + r);        final double dl1=d[l + 1];        double h=g - d[l];        for (int i=l + 2; i < n; i++) {          d[i]-=h;        }        f=f + h;        p=d[m];        double c=1.0;        double c2=c;        double c3=c;        final double el1=e[l + 1];        double s=0.0;        double s2=0.0;        for (int i=m - 1; i >= l; i--) {          c3=c2;          c2=c;          s2=s;          g=c * e[i];          h=c * p;          r=Math.hypot(p,e[i]);          e[i + 1]=s * r;          s=e[i] / r;          c=p / r;          p=c * d[i] - s * g;          d[i + 1]=h + s * (c * g + s * d[i]);          for (int k=0; k < n; k++) {            h=V.$[V.addr.op(k,i + 1)];            V.$[V.addr.op(k,i + 1)]=s * V.$[V.addr.op(k,i)] + c * h;            V.$[V.addr.op(k,i)]=c * V.$[V.addr.op(k,i)] - s * h;          }        }        p=-s * s2 * c3* el1* e[l] / dl1;        e[l]=s * p;        d[l]=c * p;      } while (Math.abs(e[l]) > eps * tst1);    }    d[l]=d[l] + f;    e[l]=0.0;  }  for (int i=0; i < n - 1; i++) {    int k=i;    double p=d[i];    for (int j=i + 1; j < n; j++) {      if (d[j] < p) {        k=j;        p=d[j];      }    }    if (k != i) {      d[k]=d[i];      d[i]=p;      for (int j=0; j < n; j++) {        p=V.$[V.addr.op(j,i)];        V.$[V.addr.op(j,i)]=V.$[V.addr.op(j,k)];        V.$[V.addr.op(j,k)]=p;      }    }  }}  }
class C{  public boolean request(int interruptNumber){  int icr;  boolean isNMI=false;  if (interruptNumber == 0xF) {    icr=0xF;    isNMI=true;  } else   if (interruptNumber >= 0x10 && interruptNumber <= 0x3F) {    int irNumber=interruptNumber - INTERRUPT_NUMBER_EXTERNAL_IR_OFFSET;    int icrAddress=irNumber + ExpeedIoListener.REGISTER_ICR00;    icr=platform.getMemory().loadUnsigned8(icrAddress,null) & 0x1F | 0x10;  } else {    throw new InterruptControllerException("Cannot determine ICR value for interrupt 0x" + Format.asHex(interruptNumber,2));  }  if (icr == 0x1F) {    return false;  } else {    return request(new FrInterruptRequest(interruptNumber,isNMI,icr));  }}  }
class C{  public static boolean validSystemNameConfig(String systemName,char type){  if (!validSystemNameFormat(systemName,type)) {    log.warn(systemName + " invalid; bad format");    return false;  }  SerialNode node=getNodeFromSystemName(systemName);  if (node == null) {    log.warn(systemName + " invalid; no such node");    return false;  }  int bit=getBitFromSystemName(systemName);  if ((type == 'T') || (type == 'L')) {    if ((bit <= 0) || (bit > SerialNode.outputBits[node.nodeType])) {      log.warn(systemName + " invalid; bad bit number");      return false;    }  } else   if (type == 'S') {    if ((bit <= 0) || (bit > SerialNode.inputBits[node.nodeType])) {      log.warn(systemName + " invalid; bad bit number");      return false;    }  } else {    log.error("Invalid type specification in validSystemNameConfig call");    return false;  }  return true;}  }
class C{  public Surface fillRect(float x,float y,float width,float height){  if (patternTex != null) {    batch.addQuad(patternTex,tint,tx(),x,y,width,height);  } else {    batch.addQuad(colorTex,Tint.combine(fillColor,tint),tx(),x,y,width,height);  }  return this;}  }
class C{  @Override public void closeElement(){  current=current.getParentNode();}  }
class C{  private void showRemoteBrowser(){  final CRemoteSelectionDialog dlg=CRemoteSelectionDialog.show(m_parent,m_debugger,m_fileSystem,m_processList);  final File selectedFile=dlg.getSelectedFile();  final ProcessDescription selectedProcess=dlg.getSelectedProcess();  if (selectedFile != null) {    try {      m_debugger.selectFile(selectedFile.getAbsolutePath());      m_selectedTarget=true;    } catch (    final DebugExceptionWrapper e) {      CUtilityFunctions.logException(m_loaderThread.getException());      final String message="E00039: " + "Could not send target file request";      final String description=CUtilityFunctions.createDescription("BinNavi could not send the target file request to the debug client.",new String[]{"The connection to the debug client was closed before" + " the request could be sent."},new String[]{"There is still no debug target selected."});      NaviErrorDialog.show(m_parent,message,description,m_loaderThread.getException());    }  } else   if (selectedProcess != null) {    try {      m_debugger.selectProcess(selectedProcess.getPID());      m_selectedTarget=true;    } catch (    final DebugExceptionWrapper e) {      CUtilityFunctions.logException(m_loaderThread.getException());      final String message="E00040: " + "Could not send target process request";      final String description=CUtilityFunctions.createDescription("BinNavi could not send the target process request to the debug client.",new String[]{"The connection to the debug client was closed before the" + "request could be sent."},new String[]{"There is still not debug target selected."});      NaviErrorDialog.show(m_parent,message,description,m_loaderThread.getException());    }  }}  }
class C{  public Builder name(String name){  this.name=name;  return this;}  }
class C{  private void validateParameterList(MethodDeclaration methodDecl){  if (methodDecl.parameters().size() > 0) {    result.addProblem(ClientBundleProblem.createNonEmptyParameterList(methodDecl));  }}  }
class C{  public static String makeLogTag(Class cls){  return makeLogTag(cls.getSimpleName());}  }
class C{  private void declareExtensions(){  new PortfolioFeed().declareExtensions(extProfile);  new PositionFeed().declareExtensions(extProfile);  new TransactionFeed().declareExtensions(extProfile);}  }
class C{  public boolean isLocal(){  return this == LOCAL;}  }
class C{  public Boundary(String sidc){  super(sidc);}  }
class C{  @SuppressWarnings({"MismatchedQueryAndUpdateOfCollection"}) private void updateLocal(int p,UUID nodeId,GridDhtPartitionState state,long updateSeq){  assert lock.isWriteLockedByCurrentThread();  assert nodeId.equals(cctx.localNodeId());  ClusterNode oldest=CU.oldestAliveCacheServerNode(cctx,topVer);  if (oldest.id().equals(cctx.localNodeId())) {    long seq=node2part.updateSequence();    if (seq != updateSeq) {      if (seq > updateSeq) {        if (this.updateSeq.get() < seq) {          boolean b=this.updateSeq.compareAndSet(this.updateSeq.get(),seq + 1);          assert b : "Invalid update sequence [updateSeq=" + updateSeq + ", seq="+ seq+ ", curUpdateSeq="+ this.updateSeq.get()+ ", node2part="+ node2part.toFullString()+ ']';          updateSeq=seq + 1;        } else         updateSeq=seq;      }      node2part.updateSequence(updateSeq);    }  }  GridDhtPartitionMap2 map=node2part.get(nodeId);  if (map == null)   node2part.put(nodeId,map=new GridDhtPartitionMap2(nodeId,updateSeq,topVer,Collections.<Integer,GridDhtPartitionState>emptyMap(),false));  map.updateSequence(updateSeq,topVer);  map.put(p,state);  Set<UUID> ids=part2node.get(p);  if (ids == null)   part2node.put(p,ids=U.newHashSet(3));  ids.add(nodeId);}  }
class C{  public void performBackup(ParcelFileDescriptor oldState,BackupDataOutput data,ParcelFileDescriptor newState){  performBackup_checked(oldState,data,newState,mFiles,mKeys);}  }
class C{  public static boolean isAbsolute(String fileName){  return FilePath.get(fileName).isAbsolute();}  }
class C{  public static File downloadFileWithRedirect(File parent,String prefix,String suffix,URL url) throws IOException {  File file=File.createTempFile(prefix,suffix,parent);  URLConnection conn=null;  final String protocol=url.getProtocol().toLowerCase(Locale.ENGLISH);  try {    conn=url.openConnection();    boolean redirect=false;    if ("http".equals(protocol) || "https".equals(protocol)) {      HttpURLConnection http=(HttpURLConnection)conn;      http.setRequestMethod(HttpMethod.GET);      int status=http.getResponseCode();      if (status == HttpURLConnection.HTTP_MOVED_TEMP || status == HttpURLConnection.HTTP_MOVED_PERM || status == HttpURLConnection.HTTP_SEE_OTHER) {        redirect=true;      }      if (redirect) {        String newUrl=conn.getHeaderField("Location");        http.disconnect();        conn=new URL(newUrl).openConnection();        http=(HttpURLConnection)conn;        http.setRequestMethod(HttpMethod.GET);      }    }    try (InputStream input=conn.getInputStream();FileOutputStream fOutput=new FileOutputStream(file)){      byte[] b=new byte[8192];      int r;      while ((r=input.read(b)) != -1) {        fOutput.write(b,0,r);      }    }   }  finally {    if (conn != null && ("http".equals(protocol) || "https".equals(protocol))) {      ((HttpURLConnection)conn).disconnect();    }  }  return file;}  }
class C{  public EdgeHistogramImplementation(){  bins=new int[80];  treshold=11;  num_block=1100;  Local_Edge_Histogram=new double[80];  blockSize=-1;}  }
class C{  protected void handleUnknownHostException(UnknownHostException ex) throws MessagingException {  if (!isLeaveUndeliverable())   setMessageDeleted();  if (isMarkUndeliverableSeen())   setMessageSeen();  logStatusWarn("Message could not be delivered due to an error determining the remote domain.");  if (getLogger().isDebugEnabled()) {    StringBuilder messageBuffer=new StringBuilder("UNDELIVERABLE Message ID: ");    messageBuffer.append(getMessageIn().getMessageID());    getLogger().debug(messageBuffer.toString(),ex);  }}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public int encodeMessage(byte[] outputBytes) throws SnmpTooBigException {  int encodingLength=0;  if (data == null)   throw new IllegalArgumentException("Data field is null");  try {    BerEncoder benc=new BerEncoder(outputBytes);    benc.openSequence();    benc.putAny(data,dataLength);    benc.putOctetString((community != null) ? community : new byte[0]);    benc.putInteger(version);    benc.closeSequence();    encodingLength=benc.trim();  } catch (  ArrayIndexOutOfBoundsException x) {    throw new SnmpTooBigException();  }  return encodingLength;}  }
class C{  private void update(){}  }
class C{  public static float latE7ToY(final int screenHeight,int screenWidth,final BoundingBox viewBox,final int latE7){  double pixelRadius=(double)screenWidth / (viewBox.getWidth() / 1E7d);  return (float)(screenHeight - (latE7ToMercator(latE7) - viewBox.getBottomMercator()) * pixelRadius);}  }
class C{  private void updateButtonPane2Margin(){  FlowLayout layout=(FlowLayout)buttonPane2.getLayout();  if (buttonPane2.getComponentCount() == 0) {    layout.setVgap(0);  } else {    layout.setVgap(4);  }}  }
class C{  public Builder initializeEmpty(IndexMetaData indexMetaData,UnassignedInfo unassignedInfo){  IndexShardRoutingTable oldShard=shards.get(0);  if (oldShard != null && oldShard.getPrimaryShardRouting() != null) {    oldShard.getPrimaryShardRouting().updateUnassignedInfo(unassignedInfo);  }  return this;}  }
class C{  public boolean containerCreate(Container container){  if (getSize() < container.getSize()) {    Log.printConcatLine("[ContainerScheduler.ContainerCreate] Allocation of Container #",container.getId()," to VM #",getId()," failed by storage");    return false;  }  if (!getContainerRamProvisioner().allocateRamForContainer(container,container.getCurrentRequestedRam())) {    Log.printConcatLine("[ContainerScheduler.ContainerCreate] Allocation of Container #",container.getId()," to VM #",getId()," failed by RAM");    return false;  }  if (!getContainerBwProvisioner().allocateBwForContainer(container,container.getCurrentRequestedBw())) {    Log.printConcatLine("[ContainerScheduler.ContainerCreate] Allocation of Container #",container.getId()," to VM #",getId()," failed by BW");    getContainerRamProvisioner().deallocateRamForContainer(container);    return false;  }  if (!getContainerScheduler().allocatePesForContainer(container,container.getCurrentRequestedMips())) {    Log.printConcatLine("[ContainerScheduler.ContainerCreate] Allocation of Container #",container.getId()," to VM #",getId()," failed by MIPS");    getContainerRamProvisioner().deallocateRamForContainer(container);    getContainerBwProvisioner().deallocateBwForContainer(container);    return false;  }  setSize(getSize() - container.getSize());  getContainerList().add(container);  container.setVm(this);  return true;}  }
class C{  ViewServer(WindowManagerService windowManager,int port){  mWindowManager=windowManager;  mPort=port;}  }
class C{  @Override public long byteSize(){  if (this.revisionText == null) {    return 0;  }  return this.revisionText.length();}  }
class C{  private boolean isValid(URL url){  return url.getProtocol().equalsIgnoreCase("http") || url.getProtocol().equalsIgnoreCase("https");}  }
class C{  public void addMouseListener(MouseListener l){}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  ModuleMarshal marshal(Class<?> sourceType){  ModuleMarshal marshal=_marshalSourceMap.get(sourceType);  if (marshal == null) {    marshal=marshalImpl(sourceType);    _marshalSourceMap.put(sourceType,marshal);  }  return marshal;}  }
class C{  public float distanceTo(AnimatableValue other){  return 0f;}  }
class C{  public final void update(byte input) throws IllegalStateException {  chooseFirstProvider();  if (initialized == false) {    throw new IllegalStateException("MAC not initialized");  }  spi.engineUpdate(input);}  }
class C{  private ScenarioResult createReferenceScenario(){switch (specification.getSupplierType()) {case CLASS:{      Class supplier=new Class("S").setVisibility(specification.getSupplierVisibility());      Class factory=new Class("GetS").setVisibility(Classifier.Visibility.PUBLIC);      factory.addMember(new Method("getS").setVisibility(Member.Visibility.PUBLIC).setReturnType("S").setBody("return new S();"));switch (specification.getClientType()) {case CLASS:        return new ScenarioResult(supplier,new Class("C"),factory);case ABSTRACT_CLASS:case INTERFACE:case DEFAULT_INTERFACE:      throw new IllegalArgumentException("Invalid Scenario: Cannot instantiate abstract classes or interfaces for reference scenario");  }  break;}case ABSTRACT_CLASS:{Class supplier=new Class("S").setVisibility(specification.getSupplierVisibility()).makeAbstract();Class implementer=new Class("SImpl").setSuperClass(supplier).setVisibility(Classifier.Visibility.PUBLIC);Class factory=new Class("GetS").setVisibility(Classifier.Visibility.PUBLIC);factory.addMember(new Method("getS").setVisibility(Member.Visibility.PUBLIC).setReturnType("S").setBody("return new SImpl();"));switch (specification.getClientType()) {case CLASS:  return new ScenarioResult(supplier,new Class("C"),factory,implementer);case ABSTRACT_CLASS:case INTERFACE:case DEFAULT_INTERFACE:throw new IllegalArgumentException("Invalid Scenario: Cannot instantiate abstract classes or interfaces for reference scenario");}break;}case INTERFACE:{Interface supplier=new Interface("S").setVisibility(specification.getSupplierVisibility());Class implementer=new Class("SImpl").addInterface(supplier).setVisibility(Classifier.Visibility.PUBLIC);Class factory=new Class("GetS").setVisibility(Classifier.Visibility.PUBLIC);factory.addMember(new Method("getS").setVisibility(Member.Visibility.PUBLIC).setReturnType("S").setBody("return new SImpl();"));switch (specification.getClientType()) {case CLASS:return new ScenarioResult(supplier,new Class("C"),factory,implementer);case ABSTRACT_CLASS:case INTERFACE:case DEFAULT_INTERFACE:throw new IllegalArgumentException("Invalid Scenario: Cannot instantiate abstract classes or interfaces for reference scenario");}break;}case DEFAULT_INTERFACE:{Interface supplier=new Interface("S").setVisibility(specification.getSupplierVisibility());Class implementer=new Class("SImpl").addInterface(supplier).setVisibility(Classifier.Visibility.PUBLIC);Class factory=new Class("GetS").setVisibility(Classifier.Visibility.PUBLIC);factory.addMember(new Method("getS").setVisibility(Member.Visibility.PUBLIC).setReturnType("S").setBody("return new SImpl();"));switch (specification.getClientType()) {case CLASS:return new ScenarioResult(supplier,new Class("C"),factory,implementer);case ABSTRACT_CLASS:case INTERFACE:case DEFAULT_INTERFACE:throw new IllegalArgumentException("Invalid Scenario: Cannot instantiate abstract classes or interfaces for reference scenario");}break;}}throw new IllegalArgumentException("Unexpected supplier type: " + specification.getSupplierType());}  }
class C{  public static String cronExpression(long period,long phase){  while (phase >= period) {    phase=phase - period;  }  long secondsPeriod=0;  long minutesPeriod=0;  long hoursPeriod=0;  if (period < 60) {    secondsPeriod=period;  } else   if (period < 60 * 60) {    minutesPeriod=period / 60;  } else   if (period < 60 * 60 * 24) {    hoursPeriod=period / (60 * 60);  } else {    throw new IllegalArgumentException("Period is too large: " + period);  }  long secondsPhase=0;  long minutesPhase=0;  long hoursPhase=0;  if (phase < 60) {    secondsPhase=phase;  } else   if (phase < 60 * 60) {    minutesPhase=phase / 60;  } else   if (phase < 60 * 60 * 24) {    hoursPhase=phase / (60 * 60);  } else {    throw new IllegalArgumentException("Phase is too large: " + phase);  }  String secondsCron=cronSubexpression(secondsPeriod,secondsPhase);  String minutesCron="*";  String hoursCron="*";  String daysCron="*";  String monthsCron="*";  String dowCron="?";  if (secondsPeriod == 0) {    minutesCron=cronSubexpression(minutesPeriod,minutesPhase);    if (minutesPeriod == 0) {      hoursCron=cronSubexpression(hoursPeriod,hoursPhase);    }  }  return secondsCron + " " + minutesCron+ " "+ hoursCron+ " "+ daysCron+ " "+ monthsCron+ " "+ dowCron;}  }
class C{  public int processBlock(byte[] in,int inOff,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  return (encrypting) ? encryptBlock(in,inOff,out,outOff) : decryptBlock(in,inOff,out,outOff);}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public static float[] reallocateBuffer(float[] oldBuffer,int oldCapacity,int newCapacity){  assert (newCapacity > oldCapacity);  float[] newBuffer=new float[newCapacity];  if (oldBuffer != null) {    System.arraycopy(oldBuffer,0,newBuffer,0,oldCapacity);  }  return newBuffer;}  }
class C{  public void close() throws IOException {  flush();  pw.close();  rawWriter.close();}  }
class C{  public KernelSGD(){  this(new SoftmaxLoss(),new RBFKernel(),1e-4,KernelPoint.BudgetStrategy.MERGE_RBF,300);}  }
class C{  synchronized public void startup() throws XMPPException {  readerThread.start();  try {    int waitTime=SmackConfiguration.getPacketReplyTimeout();    wait(3 * waitTime);  } catch (  InterruptedException ie) {  }  if (connectionID == null) {    throw new XMPPException("Connection failed. No response from server.");  } else {    connection.connectionID=connectionID;  }}  }
class C{  private boolean checkStatus(String TableName,int Record_ID,String DocStatus){  String sql="SELECT 2 FROM " + TableName + " WHERE "+ TableName+ "_ID="+ Record_ID+ " AND DocStatus='"+ DocStatus+ "'";  int result=DB.getSQLValue(null,sql);  return result == 2;}  }
class C{  public static void evolve(Permutation p1,Permutation p2){  int n=p1.size();  if (n != p2.size()) {    throw new FrameworkException("permutations not same size");  }  int cuttingPoint1=PRNG.nextInt(n);  int cuttingPoint2=PRNG.nextInt(n - 1);  if (cuttingPoint1 == cuttingPoint2) {    cuttingPoint2=n - 1;  } else   if (cuttingPoint1 > cuttingPoint2) {    int swap=cuttingPoint1;    cuttingPoint1=cuttingPoint2;    cuttingPoint2=swap;  }  int[] parent1=p1.toArray();  int[] parent2=p2.toArray();  int[] offspring1=new int[n];  int[] offspring2=new int[n];  int[] replacement1=new int[n];  int[] replacement2=new int[n];  Arrays.fill(replacement1,-1);  Arrays.fill(replacement2,-1);  for (int i=cuttingPoint1; i <= cuttingPoint2; i++) {    offspring1[i]=parent2[i];    offspring2[i]=parent1[i];    replacement1[parent2[i]]=parent1[i];    replacement2[parent1[i]]=parent2[i];  }  for (int i=0; i < n; i++) {    if ((i < cuttingPoint1) || (i > cuttingPoint2)) {      int n1=parent1[i];      int m1=replacement1[n1];      int n2=parent2[i];      int m2=replacement2[n2];      while (m1 != -1) {        n1=m1;        m1=replacement1[m1];      }      while (m2 != -1) {        n2=m2;        m2=replacement2[m2];      }      offspring1[i]=n1;      offspring2[i]=n2;    }  }  p1.fromArray(offspring1);  p2.fromArray(offspring2);}  }
class C{  public void ned2ecef(double ned[],double latitude,double longitude,double ecef[]){  double temp[][]=new double[3][3];  double clat=Math.cos(latitude);  double clon=Math.cos(longitude);  double slat=Math.sin(latitude);  double slon=Math.sin(longitude);  ned[0]=this.x;  ned[1]=this.y;  ned[2]=this.z;  temp[0][0]=-slat * clon;  temp[1][0]=-slat * slon;  temp[2][0]=clat;  temp[0][1]=-slon;  temp[1][1]=clon;  temp[2][1]=0.0;  temp[0][2]=-clat * clon;  temp[1][2]=-clat * slon;  temp[2][2]=-slat;  for (int j=0; j < 3; ++j) {    ecef[j]=0.0;    for (int i=0; i < 3; i++)     ecef[j]+=temp[j][i] * ned[i];  }}  }
class C{  @Override public void attachContext(Context context){  mContextRef=context == null ? null : new WeakReference<Context>(context);}  }
class C{  protected void addDocumentListeners(){  domNodeInsertedListener=new DOMNodeInsertedListener();  domNodeRemovedListener=new DOMNodeRemovedListener();  domAttrModifiedListener=new DOMAttrModifiedListener();  NodeEventTarget et=(NodeEventTarget)document;  et.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMNodeInserted",domNodeInsertedListener,false,null);  et.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMNodeRemoved",domNodeRemovedListener,false,null);  et.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMAttrModified",domAttrModifiedListener,false,null);}  }
class C{  public Collection<CustomToken> tokenize(PerlStringLexer stringLexer,boolean isExtended,boolean isSecondBlock){  return isExtended ? tokenizeExtended(stringLexer,isSecondBlock) : tokenizeRegular(stringLexer,isSecondBlock);}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] pointFiles;  String outputHeader=null;  int row, col;  int nrows, ncols;  double x, y, z;  int i;  int progress=0;  int numPoints=0;  int lineNum=0;  int nlines=0;  double maxDist=Double.POSITIVE_INFINITY;  double minX=Double.POSITIVE_INFINITY;  double maxX=Double.NEGATIVE_INFINITY;  double minY=Double.POSITIVE_INFINITY;  double maxY=Double.NEGATIVE_INFINITY;  double north, south, east, west;  double resolution=1;  String delimiter=" ";  boolean firstLineHeader=false;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  List<KdTree.Entry<Double>> results;  double noData=-32768;  double northing, easting;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  firstLineHeader=Boolean.parseBoolean(args[1]);  outputHeader=args[2];  resolution=Double.parseDouble(args[3]);  if (!args[4].equalsIgnoreCase("not specified")) {    maxDist=Double.parseDouble(args[4]);  }  if ((inputFilesString.length() <= 0) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    pointFiles=inputFilesString.split(";");    int numPointFiles=pointFiles.length;    if (maxDist < Double.POSITIVE_INFINITY) {      maxDist=maxDist * maxDist;    }    updateProgress("Counting the number of points:",0);    numPoints=0;    for (i=0; i < numPointFiles; i++) {      nlines=countLinesInFile(pointFiles[i]);      if (firstLineHeader) {        numPoints+=nlines - 1;      } else {        numPoints+=nlines;      }    }    KdTree<Double> pointsTree=new KdTree.SqrEuclid<Double>(2,new Integer(numPoints));    nlines=0;    for (i=0; i < numPointFiles; i++) {      DataInputStream in=null;      BufferedReader br=null;      try {        FileInputStream fstream=new FileInputStream(pointFiles[i]);        in=new DataInputStream(fstream);        br=new BufferedReader(new InputStreamReader(in));        String line;        String[] str;        lineNum=1;        while ((line=br.readLine()) != null) {          str=line.split(delimiter);          if (str.length <= 1) {            delimiter="\t";            str=line.split(delimiter);            if (str.length <= 1) {              delimiter=" ";              str=line.split(delimiter);              if (str.length <= 1) {                delimiter=",";                str=line.split(delimiter);              }            }          }          if ((lineNum > 1 || !firstLineHeader) && (str.length >= 3)) {            x=Double.parseDouble(str[0]);            y=Double.parseDouble(str[1]);            z=Double.parseDouble(str[2]);            double[] entry={y,x};            pointsTree.addPoint(entry,z);            if (x < minX) {              minX=x;            }            if (x > maxX) {              maxX=x;            }            if (y < minY) {              minY=y;            }            if (y > maxY) {              maxY=y;            }          }          lineNum++;          nlines++;          progress=(int)(100d * nlines / numPoints);          updateProgress("Reading point data:",progress);        }        in.close();        br.close();      } catch (      java.io.IOException e) {        System.err.println("Error: " + e.getMessage());      } finally {        try {          if (in != null || br != null) {            in.close();            br.close();          }        } catch (        java.io.IOException ex) {        }      }    }    west=minX - 0.5 * resolution;    north=maxY + 0.5 * resolution;    nrows=(int)(Math.ceil((north - minY) / resolution));    ncols=(int)(Math.ceil((maxX - west) / resolution));    south=north - nrows * resolution;    east=west + ncols * resolution;    fw=new FileWriter(outputHeader,false);    bw=new BufferedWriter(fw);    out=new PrintWriter(bw,true);    str1="Min:\t" + Double.toString(Integer.MAX_VALUE);    out.println(str1);    str1="Max:\t" + Double.toString(Integer.MIN_VALUE);    out.println(str1);    str1="North:\t" + Double.toString(north);    out.println(str1);    str1="South:\t" + Double.toString(south);    out.println(str1);    str1="East:\t" + Double.toString(east);    out.println(str1);    str1="West:\t" + Double.toString(west);    out.println(str1);    str1="Cols:\t" + Integer.toString(ncols);    out.println(str1);    str1="Rows:\t" + Integer.toString(nrows);    out.println(str1);    str1="Data Type:\t" + "float";    out.println(str1);    str1="Z Units:\t" + "not specified";    out.println(str1);    str1="XY Units:\t" + "not specified";    out.println(str1);    str1="Projection:\t" + "not specified";    out.println(str1);    str1="Data Scale:\tcontinuous";    out.println(str1);    str1="Preferred Palette:\t" + "spectrum.pal";    out.println(str1);    str1="NoData:\t" + noData;    out.println(str1);    if (java.nio.ByteOrder.nativeOrder() == java.nio.ByteOrder.LITTLE_ENDIAN) {      str1="Byte Order:\t" + "LITTLE_ENDIAN";    } else {      str1="Byte Order:\t" + "BIG_ENDIAN";    }    out.println(str1);    out.close();    WhiteboxRaster image=new WhiteboxRaster(outputHeader,"rw");    double halfResolution=resolution / 2;    for (row=0; row < nrows; row++) {      for (col=0; col < ncols; col++) {        easting=(col * resolution) + (west + halfResolution);        northing=(north - halfResolution) - (row * resolution);        double[] entry={northing,easting};        results=pointsTree.nearestNeighbor(entry,1,true);        if (results.get(0).distance < maxDist) {          image.setValue(row,col,results.get(0).value);        } else {          image.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (nrows - 1));      updateProgress("Interpolating point data:",progress);    }    image.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    image.addMetadataEntry("Created on " + new Date());    image.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public Vset checkAmbigName(Environment env,Context ctx,Vset vset,Hashtable exp,UnaryExpression loc){  if (id == idThis || id == idClass) {    loc=null;  }  return checkCommon(env,ctx,vset,exp,loc,false);}  }
class C{  public void testBug30508() throws Exception {  createTable("testBug30508","(k INT PRIMARY KEY NOT NULL AUTO_INCREMENT, p VARCHAR(32))");  try {    Statement ggkStatement=this.conn.createStatement();    ggkStatement.executeUpdate("INSERT INTO testBug30508 (p) VALUES ('abc')",Statement.RETURN_GENERATED_KEYS);    this.rs=ggkStatement.getGeneratedKeys();    ggkStatement.close();    this.rs.next();    fail("Should've had an exception here");  } catch (  SQLException sqlEx) {    assertEquals("S1000",sqlEx.getSQLState());  }  try {    this.pstmt=this.conn.prepareStatement("SELECT 1",Statement.RETURN_GENERATED_KEYS);    this.rs=this.pstmt.getGeneratedKeys();    this.pstmt.close();    this.rs.next();    fail("Should've had an exception here");  } catch (  SQLException sqlEx) {    assertEquals("S1000",sqlEx.getSQLState());  }  if (versionMeetsMinimum(5,0)) {    createProcedure("testBug30508","() BEGIN SELECT 1; END");    try {      this.pstmt=this.conn.prepareCall("{CALL testBug30508()}");      this.rs=this.pstmt.getGeneratedKeys();      this.pstmt.close();      this.rs.next();      fail("Should've had an exception here");    } catch (    SQLException sqlEx) {      assertEquals("S1000",sqlEx.getSQLState());    }  }}  }
class C{  public static ImmutableBlockVolume newWithoutArrayClone(BlockPalette palette,Vector3i start,Vector3i size,byte[] blocks){  return new ArrayImmutableBlockBuffer(palette,new ByteBackingData(blocks),start,size);}  }
class C{  public OMGraphicList prepare(){synchronized (this) {    return super.prepare();  }}  }
class C{  public DrawingPanel(){  ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.draw.Labels");  initComponents();  undoManager=new UndoRedoManager();  editor=new DefaultDrawingEditor();  editor.add(view);  addCreationButtonsTo(creationToolbar,editor);  ButtonFactory.addAttributesButtonsTo(attributesToolbar,editor);  JPopupButton pb=new JPopupButton();  pb.setItemFont(UIManager.getFont("MenuItem.font"));  labels.configureToolBarButton(pb,"actions");  pb.add(new DuplicateAction());  pb.addSeparator();  pb.add(new GroupAction(editor));  pb.add(new UngroupAction(editor));  pb.addSeparator();  pb.add(new BringToFrontAction(editor));  pb.add(new SendToBackAction(editor));  pb.addSeparator();  pb.add(new CutAction());  pb.add(new CopyAction());  pb.add(new PasteAction());  pb.add(new SelectAllAction());  pb.add(new SelectSameAction(editor));  pb.addSeparator();  pb.add(undoManager.getUndoAction());  pb.add(undoManager.getRedoAction());  JMenu m=new JMenu(labels.getString("view.zoomFactor.text"));  JRadioButtonMenuItem rbmi;  ButtonGroup group=new ButtonGroup();  m.add(rbmi=new JRadioButtonMenuItem(new ZoomAction(editor,0.1,null)));  group.add(rbmi);  m.add(rbmi=new JRadioButtonMenuItem(new ZoomAction(editor,0.25,null)));  group.add(rbmi);  m.add(rbmi=new JRadioButtonMenuItem(new ZoomAction(editor,0.5,null)));  group.add(rbmi);  m.add(rbmi=new JRadioButtonMenuItem(new ZoomAction(editor,0.75,null)));  group.add(rbmi);  m.add(rbmi=new JRadioButtonMenuItem(new ZoomAction(editor,1.0,null)));  rbmi.setSelected(true);  group.add(rbmi);  m.add(rbmi=new JRadioButtonMenuItem(new ZoomAction(editor,1.25,null)));  group.add(rbmi);  m.add(rbmi=new JRadioButtonMenuItem(new ZoomAction(editor,1.5,null)));  group.add(rbmi);  m.add(rbmi=new JRadioButtonMenuItem(new ZoomAction(editor,2,null)));  group.add(rbmi);  m.add(rbmi=new JRadioButtonMenuItem(new ZoomAction(editor,3,null)));  group.add(rbmi);  m.add(rbmi=new JRadioButtonMenuItem(new ZoomAction(editor,4,null)));  group.add(rbmi);  pb.add(m);  pb.setFocusable(false);  creationToolbar.addSeparator();  creationToolbar.add(pb);  DefaultDrawing drawing=new DefaultDrawing();  view.setDrawing(drawing);  drawing.addUndoableEditListener(undoManager);}  }
class C{  public static void printInfo(String title,String infoString){  if (infoString == null) {    System.out.println("Null info string");    return;  }  String[] outerParts=infoString.split(";");  System.out.println(title);  for (  String s : outerParts) {    String[] innerParts=s.split(":");    for (    String parts : innerParts) {      System.out.println("\t" + parts);    }    System.out.println();  }}  }
class C{  public boolean isInPeriod(Timestamp date){  if (date == null)   return false;  Timestamp dateOnly=TimeUtil.getDay(date);  Timestamp from=TimeUtil.getDay(getStartDate());  if (dateOnly.before(from))   return false;  Timestamp to=TimeUtil.getDay(getEndDate());  if (dateOnly.after(to))   return false;  return true;}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="EI_EXPOSE_REP") public int[] validBaudNumber(){  return validSpeedValues;}  }
class C{  public static _QueuedBuildRetryOption fromString(final String value) throws SOAPSerializationException {  return (_QueuedBuildRetryOption)Enumeration.fromString(value,_QueuedBuildRetryOption.VALUES_TO_INSTANCES);}  }
class C{  public SIPHeader parse() throws ParseException {  Expires expires=new Expires();  if (debug)   dbg_enter("parse");  try {    lexer.match(TokenTypes.EXPIRES);    lexer.SPorHT();    lexer.match(':');    lexer.SPorHT();    String nextId=lexer.getNextId();    lexer.match('\n');    try {      int delta=Integer.parseInt(nextId);      expires.setExpires(delta);      return expires;    } catch (    NumberFormatException ex) {      throw createParseException("bad integer format");    }catch (    InvalidArgumentException ex) {      throw createParseException(ex.getMessage());    }  }  finally {    if (debug)     dbg_leave("parse");  }}  }
class C{  protected void checkRowExistsInServerGroup(String sql,String groupName) throws Exception {  this.conn.clearServerSelectionCriteria();  this.conn.setServerGroupName(groupName);  checkRowExists(sql);}  }
class C{  public Symbol resolveIdent(String name){  if (name.equals(""))   return syms.errSymbol;  JavaFileObject prev=log.useSource(null);  try {    JCExpression tree=null;    for (    String s : name.split("\\.",-1)) {      if (!SourceVersion.isIdentifier(s))       return syms.errSymbol;      tree=(tree == null) ? make.Ident(names.fromString(s)) : make.Select(tree,names.fromString(s));    }    JCCompilationUnit toplevel=make.TopLevel(List.<JCTree.JCAnnotation>nil(),null,List.<JCTree>nil());    toplevel.packge=syms.unnamedPackage;    return attr.attribIdent(tree,toplevel);  }  finally {    log.useSource(prev);  }}  }
class C{  public void logp(Level level,String sourceClass,String sourceMethod,Supplier<String> msgSupplier){  if (!isLoggable(level)) {    return;  }  LogRecord lr=new LogRecord(level,msgSupplier.get());  lr.setSourceClassName(sourceClass);  lr.setSourceMethodName(sourceMethod);  doLog(lr);}  }
class C{  void generateStaticProxy(Class<?> clazz){  imports.clear();  addImport(InvocationHandler.class);  addImport(Method.class);  addImport(clazz);  className=getClassName(clazz) + "Proxy";  for (  Method m : clazz.getDeclaredMethods()) {    if (Modifier.isStatic(m.getModifiers())) {      if (!Modifier.isPrivate(m.getModifiers())) {        addMethod(m);      }    }  }}  }
class C{  protected Pair<PropositionSymbol,Boolean> findPureSymbol(List<PropositionSymbol> symbols,Set<Clause> clauses,Model model){  Pair<PropositionSymbol,Boolean> result=null;  Set<PropositionSymbol> symbolsToKeep=new HashSet<PropositionSymbol>(symbols);  Set<PropositionSymbol> candidatePurePositiveSymbols=new HashSet<PropositionSymbol>();  Set<PropositionSymbol> candidatePureNegativeSymbols=new HashSet<PropositionSymbol>();  for (  Clause c : clauses) {    for (    PropositionSymbol p : c.getPositiveSymbols()) {      if (symbolsToKeep.contains(p)) {        candidatePurePositiveSymbols.add(p);      }    }    for (    PropositionSymbol n : c.getNegativeSymbols()) {      if (symbolsToKeep.contains(n)) {        candidatePureNegativeSymbols.add(n);      }    }  }  for (  PropositionSymbol s : symbolsToKeep) {    if (candidatePurePositiveSymbols.contains(s) && candidatePureNegativeSymbols.contains(s)) {      candidatePurePositiveSymbols.remove(s);      candidatePureNegativeSymbols.remove(s);    }  }  if (candidatePurePositiveSymbols.size() > 0) {    result=new Pair<PropositionSymbol,Boolean>(candidatePurePositiveSymbols.iterator().next(),true);  } else   if (candidatePureNegativeSymbols.size() > 0) {    result=new Pair<PropositionSymbol,Boolean>(candidatePureNegativeSymbols.iterator().next(),false);  }  return result;}  }
class C{  private boolean isInstalled() throws IOException {  Optional<String> pdeBuild=FileMisc.readToken(getRootFolder(),TOKEN);  pdeBuildFolder=pdeBuild.map(null).orElse(null);  return pdeBuildFolder != null;}  }
class C{  public static void requireState(boolean condition,String message){  require(condition,message,IllegalStateException.class);}  }
class C{  private static int generateRandomLength(){  return DataGenerator.generateRandom(128,100 * 1024);}  }
class C{  public boolean removePluginPassiveScanner(PluginPassiveScanner pluginPassiveScanner){  if (pluginPassiveScanner == null) {    throw new IllegalArgumentException("Parameter pluginPassiveScanner must not be null.");  }  return removePassiveScanner(pluginPassiveScanner.getClass().getName());}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  for (; ; ) {    @SuppressWarnings("unchecked") E item=(E)s.readObject();    if (item == null)     break; else     offer(item);  }}  }
class C{  private String toPattern(boolean localized){  StringBuffer result=new StringBuffer();  for (int j=1; j >= 0; --j) {    if (j == 1)     appendAffix(result,posPrefixPattern,positivePrefix,localized); else     appendAffix(result,negPrefixPattern,negativePrefix,localized);    int i;    int digitCount=useExponentialNotation ? getMaximumIntegerDigits() : Math.max(groupingSize,getMinimumIntegerDigits()) + 1;    for (i=digitCount; i > 0; --i) {      if (i != digitCount && isGroupingUsed() && groupingSize != 0 && i % groupingSize == 0) {        result.append(localized ? symbols.getGroupingSeparator() : PATTERN_GROUPING_SEPARATOR);      }      result.append(i <= getMinimumIntegerDigits() ? (localized ? symbols.getZeroDigit() : PATTERN_ZERO_DIGIT) : (localized ? symbols.getDigit() : PATTERN_DIGIT));    }    if (getMaximumFractionDigits() > 0 || decimalSeparatorAlwaysShown)     result.append(localized ? symbols.getDecimalSeparator() : PATTERN_DECIMAL_SEPARATOR);    for (i=0; i < getMaximumFractionDigits(); ++i) {      if (i < getMinimumFractionDigits()) {        result.append(localized ? symbols.getZeroDigit() : PATTERN_ZERO_DIGIT);      } else {        result.append(localized ? symbols.getDigit() : PATTERN_DIGIT);      }    }    if (useExponentialNotation) {      result.append(localized ? symbols.getExponentSeparator() : PATTERN_EXPONENT);      for (i=0; i < minExponentDigits; ++i)       result.append(localized ? symbols.getZeroDigit() : PATTERN_ZERO_DIGIT);    }    if (j == 1) {      appendAffix(result,posSuffixPattern,positiveSuffix,localized);      if ((negSuffixPattern == posSuffixPattern && negativeSuffix.equals(positiveSuffix)) || (negSuffixPattern != null && negSuffixPattern.equals(posSuffixPattern))) {        if ((negPrefixPattern != null && posPrefixPattern != null && negPrefixPattern.equals("'-" + posPrefixPattern)) || (negPrefixPattern == posPrefixPattern && negativePrefix.equals(symbols.getMinusSign() + positivePrefix)))         break;      }      result.append(localized ? symbols.getPatternSeparator() : PATTERN_SEPARATOR);    } else     appendAffix(result,negSuffixPattern,negativeSuffix,localized);  }  return result.toString();}  }
class C{  @Override public void endTransaction(){  throw new UnsupportedOperationException("Transaction Unsupported.");}  }
class C{  String findParmValue(Element e,String name){  List<Element> l=e.getChildren("parameter");  for (int i=0; i < l.size(); i++) {    Element n=l.get(i);    if (n.getAttributeValue("name").equals(name)) {      return n.getTextTrim();    }  }  return null;}  }
class C{  public static void init(Set<OutputOption> options){  for (int i=0; i < 0x10000; i++) {    instructionMap[i]=defaultInstruction;  }  addBaseInstructions(options);  if (options.contains(OutputOption.STACK))   replaceAltStackInstructions();  if (options.contains(OutputOption.SHIFT))   replaceShiftInstructions();  if (options.contains(OutputOption.DMOV))   replaceAltDmovInstructions();  if (options.contains(OutputOption.SPECIALS))   replaceAltSpecialInstructions();}  }
class C{  public static double rho(ExampleSet eSet,Attribute a,Attribute b,double f) throws OperatorException {  ExampleSet e=extract(eSet,a,b);  double[] ranka=rank(e,a,null,f);  double[] rankb=rank(e,b,a,f);  int nObs=ranka.length;  double mu2=nObs * (nObs + 1.0d) * (nObs + 1.0d) / 4.0d;  double prod=0;  double a2=0;  double b2=0;  for (int i=0; i < nObs; i++) {    prod+=ranka[i] * rankb[i];    a2+=ranka[i] * ranka[i];    b2+=rankb[i] * rankb[i];  }  double value=Math.sqrt((a2 - mu2) * (b2 - mu2));  if (value != 0) {    return (prod - mu2) / value;  } else {    return 0;  }}  }
class C{  public static IMouseStateChange enterEdge(final CStateFactory<?,?> m_factory,final MouseEvent event,final HitInfo hitInfo){  final Edge e=hitInfo.getHitEdge();  return new CStateChange(m_factory.createEdgeEnterState(e,event),true);}  }
class C{  private JDlgChangePassword(java.awt.Dialog parent,boolean modal){  super(parent,modal);}  }
class C{  @Override public Request<Factory> save(String jsonContent){  URL logoURL=null;  JsonReader jSonReader=Json.createReader(new StringReader(jsonContent));  JsonObject jsonObject=jSonReader.readObject();  if (jsonObject != null) {    JsonObject button=jsonObject.getJsonObject("button");    if (button != null) {      String type=button.getString("type");      if ("logo".equals(type)) {        JsonObject attributes=button.getJsonObject("attributes");        if (attributes != null) {          String logoPath=attributes.getString("logo");          if (logoPath != null && !logoPath.isEmpty()) {            try {              logoURL=new URL(logoPath);            } catch (            MalformedURLException e) {              throw new IllegalStateException("Invalid logo content found in the JSON file.",e);            }          }        }      }    }  }  final FormDataMultiPart formDataMultiPart=new FormDataMultiPart().field("factoryUrl",jsonContent);  if (logoURL != null) {    try {      URLConnection urlConnection=logoURL.openConnection();      String contentType=urlConnection.getContentType();      FormDataBodyPart formDataBodyPart=new FormDataBodyPart(FormDataContentDisposition.name("image").fileName("example").build(),logoURL.openStream(),MediaType.valueOf(contentType));      formDataMultiPart.bodyPart(formDataBodyPart);    } catch (    IOException e) {      throw new IllegalStateException("Invalid logo content found in the JSON file.",e);    }  }  final Invocation request=getWebTarget().request().accept(APPLICATION_JSON).buildPost(Entity.entity(formDataMultiPart,MULTIPART_FORM_DATA));  return new SimpleRequest<Factory>(request,DefaultFactory.class,getAuthenticationManager());}  }
class C{  public void testToStringboolean() throws Exception {  new IdentityStub("aaa").toString(false);  new IdentityStub("aaa2",IdentityScope.getSystemScope()).toString(false);  new IdentityStub("bbb").toString(true);  new IdentityStub("bbb2",IdentityScope.getSystemScope()).toString(true);}  }
class C{  public static <S,E>void insertBeforeStep(final Step<S,E> insertStep,final Step<E,?> afterStep,final Traversal.Admin<?,?> traversal){  traversal.addStep(stepIndex(afterStep,traversal),insertStep);}  }
class C{  public static synchronized void startConfigBackThread(){  if (_configBackThread != null)   return;  _configBackThread=new BackThread("HtmlSpeedConfigUtils");  _configBackThread.start();}  }
class C{  public static ModelId fromPath(String path){  String[] pathFragments=path.substring(1).split("/");  return new ModelId(pathFragments[pathFragments.length - 2],convertToNamespace(pathFragments),pathFragments[pathFragments.length - 1]);}  }
class C{  public void addHop(int id){  if (entities == null) {    return;  }  hopsNumber++;  entities.add(Integer.valueOf(id));}  }
class C{  public Property centuryOfEra(){  return new Property(this,getChronology().centuryOfEra());}  }
class C{  public boolean isEmpty(){  for (int i=0; i < array.length; i+=2) {    int valueNumber=array[i];    if (valueNumber < 0) {      return true;    }    int myLockCount=array[i + 1];    if (myLockCount > 0) {      return false;    }  }  return true;}  }
class C{  @VisibleForTesting public static boolean sendToTMaster(String command,String topologyName,SchedulerStateManagerAdaptor stateManager,NetworkUtils.TunnelConfig tunnelConfig){  LOG.fine("Fetching TMaster location for topology: " + topologyName);  TopologyMaster.TMasterLocation location=stateManager.getTMasterLocation(topologyName);  if (location == null) {    LOG.severe("Failed to fetch TMaster Location for topology: " + topologyName);    return false;  }  LOG.fine("Fetched TMaster location for topology: " + topologyName);  String url=String.format("http://%s:%d/%s?topologyid=%s",location.getHost(),location.getControllerPort(),command,location.getTopologyId());  try {    URL endpoint=new URL(url);    LOG.fine("HTTP URL for TMaster: " + endpoint);    return sendGetRequest(endpoint,command,tunnelConfig);  } catch (  MalformedURLException e) {    throw new RuntimeException("Invalid URL for tmaster endpoint: " + url,e);  }}  }
class C{  public static void createBedTabixIndex(File fileToIndex) throws IOException {  try {    new TabixIndexer(fileToIndex).saveBedIndex();  } catch (  final IllegalArgumentException e) {    Diagnostic.warning("Cannot produce TABIX index for: " + fileToIndex + ": "+ e.getMessage());    throw e;  }catch (  final UnindexableDataException e) {    Diagnostic.warning("Cannot produce TABIX index for: " + fileToIndex + ": "+ e.getMessage());  }}  }
class C{  public static String gradleDockerLogsDirectory(Class<?> testClass){  return "build/dockerLogs/" + testClass.getSimpleName();}  }
class C{  @RequestMapping(value="/{cubeName}/holes",method={RequestMethod.PUT}) @ResponseBody public List<JobInstance> fillHoles(@PathVariable String cubeName){  checkCubeName(cubeName);  List<JobInstance> jobs=Lists.newArrayList();  List<CubeSegment> holes=cubeService.getCubeManager().calculateHoles(cubeName);  if (holes.size() == 0) {    logger.info("No hole detected for cube '" + cubeName + "'");    return jobs;  }  boolean isOffsetOn=holes.get(0).isSourceOffsetsOn();  for (  CubeSegment hole : holes) {    if (isOffsetOn == true) {      JobBuildRequest2 request=new JobBuildRequest2();      request.setBuildType(CubeBuildTypeEnum.BUILD.toString());      request.setSourceOffsetStart(hole.getSourceOffsetStart());      request.setSourcePartitionOffsetStart(hole.getSourcePartitionOffsetStart());      request.setSourceOffsetEnd(hole.getSourceOffsetEnd());      request.setSourcePartitionOffsetEnd(hole.getSourcePartitionOffsetEnd());      try {        JobInstance job=build(cubeName,request);        jobs.add(job);      } catch (      Exception e) {        logger.info("Error to submit job for hole '" + hole.toString() + "', skip it now.",e);        continue;      }    } else {      JobBuildRequest request=new JobBuildRequest();      request.setBuildType(CubeBuildTypeEnum.BUILD.toString());      request.setStartTime(hole.getDateRangeStart());      request.setEndTime(hole.getDateRangeEnd());      try {        JobInstance job=build(cubeName,request);        jobs.add(job);      } catch (      Exception e) {        logger.info("Error to submit job for hole '" + hole.toString() + "', skip it now.",e);        continue;      }    }  }  return jobs;}  }
class C{  private void insertAtInstruction() throws IOException {  pos=c.localPosition();  int opcode=c.readU1();  if (opcode == opc_wide) {    int wopcode=c.readU1();    int lvIndex=c.readU2();switch (wopcode) {case opc_aload:case opc_astore:case opc_fload:case opc_fstore:case opc_iload:case opc_istore:case opc_lload:case opc_lstore:case opc_dload:case opc_dstore:case opc_ret:      break;case opc_iinc:    c.readS2();  break;default :throw new Error("Invalid wide opcode: " + wopcode);}} else {Injector inj;inj=before[opcode];if (inj != null) {inject(pos,inj.bytecodes(className,methodName,pos));}switch (opcode) {case opc_tableswitch:{int header=(pos + 1 + 3) & (~3);c.skip(header - (pos + 1));c.readU4();int low=c.readU4();int high=c.readU4();c.skip((high + 1 - low) * 4);break;}case opc_lookupswitch:{int header=(pos + 1 + 3) & (~3);c.skip(header - (pos + 1));c.readU4();int npairs=c.readU4();c.skip(npairs * 8);break;}default :{int instrLen=opcLengths[opcode];c.skip(instrLen - 1);}}inj=after[opcode];if (inj != null) {pos=c.localPosition();inject(pos,inj.bytecodes(className,methodName,pos));}}}  }
class C{  public boolean isIdealFitness(final EvolutionState state,final Individual ind){  return (ind.fitness.isIdealFitness());}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void denyTypes(final Class<?>... types){  denyPermission(new ExplicitTypePermission(types));}  }
