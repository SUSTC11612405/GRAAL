class C{  public int compareTo(@NonNull CpuState other){  return Integer.compare(freq,other.freq);}  }
class C{  public void checkHallofFame(){  for (  Player p : playersLeaving) {    int gms=p.gamesPlayed + p.careerGamesPlayed;    int allConf=p.careerAllConference + (p.wonAllConference ? 1 : 0);    int allAmer=p.careerAllAmerican + (p.wonAllAmerican ? 1 : 0);    int poty=p.careerHeismans + (p.wonHeisman ? 1 : 0);    if (gms / 2 + 5 * allConf + 15 * allAmer + 50 * poty > 50) {      ArrayList<String> careerStats=p.getCareerStatsList();      StringBuilder sb=new StringBuilder();      sb.append(p.getPosNameYrOvr_Str() + "&");      for (      String s : careerStats) {        sb.append(s + "&");      }      hallOfFame.add(sb.toString());    }  }}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public FileLinesList(final CharSequence filename,final String encoding) throws IOException {  this(filename,encoding,FastBufferedInputStream.DEFAULT_BUFFER_SIZE);}  }
class C{  public static PeriodType hours(){  PeriodType type=cHours;  if (type == null) {    type=new PeriodType("Hours",new DurationFieldType[]{DurationFieldType.hours()},new int[]{-1,-1,-1,-1,0,-1,-1,-1});    cHours=type;  }  return type;}  }
class C{  public EOMGEvent(EditableOMGraphic source,Cursor cursor,String message,MouseEvent me,int status){  this.source=source;  this.cursor=cursor;  this.message=message;  this.mouseEvent=me;  this.status=status;}  }
class C{  protected SwapSpaceSpi spi(){  return new FileSwapSpaceSpi();}  }
class C{  public SamFilterChain(Collection<SamFilter> filters){  mFilters=filters.toArray(new SamFilter[filters.size()]);}  }
class C{  public void writeStartDocument(String encoding,String version,String standalone) throws XMLStreamException {  if (_state > 0) {    throw new XMLStreamException("XML declaration must be as the first line in the XML document.");  }  _state=STATE_XML_DECL;  String enc=encoding;  if (enc == null) {    enc=_encoding;  } else {    try {      getCharset(encoding);    } catch (    UnsupportedEncodingException e) {      throw new XMLStreamException(e);    }  }  if (version == null) {    version=XMLStreamWriter.DEFAULT_XML_VERSION;  }  _writer.write("<?xml version=\"");  _writer.write(version);  _writer.write(DOUBLEQUOT);  if (enc != null) {    _writer.write(" encoding=\"");    _writer.write(enc);    _writer.write(DOUBLEQUOT);  }  if (standalone != null) {    _writer.write(" standalone=\"");    _writer.write(standalone);    _writer.write(DOUBLEQUOT);  }  _writer.write("?>");  writeLineSeparator();}  }
class C{  @org.junit.Test public void testDate(){  Bot bot=Bot.createInstance();  Language language=bot.mind().getThought(Language.class);  language.setLearningMode(LearningMode.Disabled);  TextEntry text=bot.awareness().getSense(TextEntry.class);  List<String> output=registerForOutput(text);  Calendar date=Calendar.getInstance();  text.input("WHAT YEAR IS THIS");  String response=waitForOutput(output);  if (!response.equals(date.get(Calendar.YEAR) + ".")) {    fail("Incorrect response: " + response);  }  text.input("What month is it right now?");  response=waitForOutput(output);  if (!response.equals(date.getDisplayName(Calendar.MONTH,Calendar.LONG,Locale.US) + ".")) {    fail("Incorrect response: " + response);  }  text.input("IS TODAY SUNDAY or saturday?");  response=waitForOutput(output);  if (!response.equals("Today is " + date.getDisplayName(Calendar.DAY_OF_WEEK,Calendar.LONG,Locale.US) + ".")) {    fail("Incorrect response: " + response);  }  bot.shutdown();}  }
class C{  @DSComment("I/O activity") @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:20.331 -0500",hash_original_method="82BCADC868B280559F217E3557A725A7",hash_generated_method="422FFC525900FA0AAD1FCE2F59538D50") public static void parse(Reader in,ContentHandler contentHandler) throws IOException, SAXException {  XMLReader reader=new ExpatReader();  reader.setContentHandler(contentHandler);  reader.parse(new InputSource(in));}  }
class C{  public void testMapEquals(){  resetEmpty();  assertTrue("Empty maps unequal.",map.equals(confirmed));  verify();  resetFull();  assertTrue("Full maps unequal.",map.equals(confirmed));  verify();  resetFull();  Iterator iter=confirmed.keySet().iterator();  iter.next();  iter.remove();  assertTrue("Different maps equal.",!map.equals(confirmed));  resetFull();  assertTrue("equals(null) returned true.",!map.equals(null));  assertTrue("equals(new Object()) returned true.",!map.equals(new Object()));  verify();}  }
class C{  public Builder filter(MetricFilter filter){  this.filter=filter;  return this;}  }
class C{  public Editor edit() throws IOException {  return DiskLruCache.this.edit(key,sequenceNumber);}  }
class C{  private void sendEmail(String toAddress,String subject,String body){  try {    Properties props=new Properties();    props.put("mail.smtp.host",smtp);    Message msg=new MimeMessage(Session.getDefaultInstance(props));    msg.setFrom(new InternetAddress(serverEmail));    msg.addRecipient(Message.RecipientType.TO,new InternetAddress(toAddress));    msg.setSubject(subject);    msg.setText(body);    Transport.send(msg);  } catch (  Exception e) {    log("ERROR: unable to send email: " + subject + ", "+ e.getMessage());  }}  }
class C{  public boolean isEmpty(){  return this.pathCondition.isEmpty();}  }
class C{  public static void marginTop(Node no,double top){  AnchorPane.setTopAnchor(no,top);}  }
class C{  public static int size(ListModel self){  return self.getSize();}  }
class C{  public void pulse(){  sessions.keySet().forEach(null);}  }
class C{  void test(){  log("test");  List<ClassSymbol> nestedClasses=new LinkedList<ClassSymbol>();  for (  PackageSymbol p : packages) {    for (Scope.Entry se=p.members_field.elems; se != null; se=se.sibling) {      if (se.sym.name.toString().contains("$"))       nestedClasses.add((ClassSymbol)se.sym);    }  }  for (int i=nestedClasses.size(); i > 0; i--) {    ClassSymbol sym=nestedClasses.remove(rgen.nextInt(i));    log("adjusting class " + sym);    starImportModel.remove(sym);    String s=sym.name.toString();    int dollar=s.indexOf("$");    assert (sym.owner.kind == PCK);    Name outerName=names.fromString(s.substring(0,dollar));    Scope.Entry outerEntry=sym.owner.members().lookup(outerName);    ClassSymbol outer=(ClassSymbol)outerEntry.sym;    sym.owner.members().remove(sym);    sym.name=names.fromString(s.substring(dollar + 1));    outer.members().enter(sym);    sym.owner=outer;    starImportModel.check(starImportScope);  }}  }
class C{  @Override public void recover(Parser recognizer,RecognitionException re){  Token token=re.getOffendingToken();  String message;  if (token == null) {    message="error " + getTokenErrorDisplay(token);  } else   if (re instanceof InputMismatchException) {    message="unexpected token " + getTokenErrorDisplay(token) + " on line ("+ token.getLine()+ ") position ("+ token.getCharPositionInLine()+ ")"+ " was expecting one of "+ re.getExpectedTokens().toString(recognizer.getVocabulary());  } else   if (re instanceof NoViableAltException) {    if (token.getType() == JavascriptParser.EOF) {      message="unexpected end of expression";    } else {      message="invalid sequence of tokens near " + getTokenErrorDisplay(token) + " on line ("+ token.getLine()+ ") position ("+ token.getCharPositionInLine()+ ")";    }  } else {    message=" unexpected token near " + getTokenErrorDisplay(token) + " on line ("+ token.getLine()+ ") position ("+ token.getCharPositionInLine()+ ")";  }  ParseException parseException=new ParseException(message,token.getStartIndex());  parseException.initCause(re);  throw new RuntimeException(parseException);}  }
class C{  public void add(Object e){  throw new UnsupportedOperationException();}  }
class C{  public boolean addEntries(TestEntrySet testEntrySet,User user,long createTime,Errors errors){  if (user == null) {    return false;  }  if (testEntrySet == null) {    return false;  }  if (!testEntrySet.areValuesValid()) {    return false;  }  for (  final TestEntry testEntry : testEntrySet.getRootEntries()) {    if (!addEntryHelper(testEntry,user,createTime,null,testEntrySet,errors)) {      return false;    }  }  return !hasErrors(errors);}  }
class C{  public boolean isMandatory(){  return !MANDATORYTYPE_NotMandatory.equals(getMandatoryType()) || isLotMandatory() || isSerNoMandatory()|| isGuaranteeDateMandatory();}  }
class C{  public static int sprintf(char[] dest,int destOffset,char[] src,int srcStart,int srcEnd){  for (int i=srcStart; i < srcEnd; ++i) {    char nextChar=getArrayNoBarrier(src,i);    destOffset=sprintf(dest,destOffset,nextChar);  }  return destOffset;}  }
class C{  public void record(Event evt){  assert evt != null;  if (!enterBusy())   return;  try {    int type=evt.type();    if (!isRecordable(type)) {      LT.warn(log,"Trying to record event without checking if it is recordable: " + U.gridEventName(type));    }    if ((isDaemon || isUserRecordable(type)) && !isHiddenEvent(type))     try {      getSpi().record(evt);    } catch (    IgniteSpiException e) {      U.error(log,"Failed to record event: " + evt,e);    }    if (isRecordable(type))     notifyListeners(evt);  }  finally {    leaveBusy();  }}  }
class C{  @Override public void testStatistic() throws Exception {  BoundedRangeStatisticImpl stat=new BoundedRangeStatisticImpl("myRange","millis","myDescription",10,3000);  assertStatistic(stat,"myRange","millis","myDescription");  assertEquals(10,stat.getLowerBound());  assertEquals(3000,stat.getUpperBound());  assertRangeStatistic(stat);}  }
class C{  private void unBind() throws RemoteException {  String host=resources.getRMIRegistryHost();  if (host == null || host.length() == 0) {    return;  }  Registry registry=LocateRegistry.getRegistry(resources.getRMIRegistryHost(),resources.getRMIRegistryPort());  String bindName=resources.getRMIBindName();  try {    registry.unbind(bindName);    UnicastRemoteObject.unexportObject(this,true);  } catch (  java.rmi.NotBoundException nbe) {  }  getLog().info("Scheduler un-bound from name '" + bindName + "' in RMI registry");}  }
class C{  public XMLException(String msg){  super(msg);}  }
class C{  public JSONObject(String baseName,Locale locale) throws JSONException {  this();  ResourceBundle bundle=ResourceBundle.getBundle(baseName,locale,Thread.currentThread().getContextClassLoader());  Enumeration<String> keys=bundle.getKeys();  while (keys.hasMoreElements()) {    Object key=keys.nextElement();    if (key != null) {      String[] path=((String)key).split("\\.");      int last=path.length - 1;      JSONObject target=this;      for (int i=0; i < last; i+=1) {        String segment=path[i];        JSONObject nextTarget=target.optJSONObject(segment);        if (nextTarget == null) {          nextTarget=new JSONObject();          target.put(segment,nextTarget);        }        target=nextTarget;      }      target.put(path[last],bundle.getString((String)key));    }  }}  }
class C{  private void onBluetoothRemoteDeviceClassChange(Context context,Intent intent){  Log.d(TAG,"Remote device's class changed.");}  }
class C{  public ClientCertPolicy(boolean revCheckEnabled,boolean ocspEnabled,boolean useCRLAsFailOver,boolean sendOCSPNonce,HashMap<String,AlternativeOCSPList> altOCSPmap,boolean useCRLDP,URL crlAddress,int crlCacheSize,String[] oidFilters){  this._enabled=revCheckEnabled;  this._ocspEnabled=ocspEnabled;  this._useCRLAsFailOver=useCRLAsFailOver;  this._sendOCSPNonce=sendOCSPNonce;  this._siteOCSPMap=altOCSPmap;  this._useCerCRL=useCRLDP;  this._crlUrl=crlAddress;  this._crlCacheSize=crlCacheSize;  this._oids=oidFilters;}  }
class C{  public ToStringBuilder append(float[] array){  style.append(buffer,null,array,null);  return this;}  }
class C{  public static String planClass(String name){  PlanSpecific plan=plans.get(name);  if (plan == null) {    System.err.println("No plan specific configuration for " + name);    return name;  }  return plan.getName();}  }
class C{  public SlidingActivityHelper(Activity activity){  mActivity=activity;}  }
class C{  Node(){  this.children=new Node[256];  this.symbol=0;  this.terminalBits=0;}  }
class C{  List<Node<T>> nextNodes(){  return nextNodes;}  }
class C{  @Override public AgentAppEnvironmentView createEnvironmentView(){  return new VacuumView();}  }
class C{  public boolean removeChild(SessionNode child){  if (this.children.contains(child)) {    child.removeParent(this);    if (!child.containsParent(this)) {      this.children.remove(child);      return true;    }  }  return false;}  }
class C{  private boolean matchesMobile(NetworkIdentity ident){  return ident.mType == TYPE_WIMAX || ((sForceAllNetworkTypes || contains(DATA_USAGE_NETWORK_TYPES,ident.mType)) && Objects.equal(mSubscriberId,ident.mSubscriberId));}  }
class C{  public static boolean deleteFolderRcursive(final File dir){  boolean ret=true;  if (dir.isDirectory()) {    String[] children=dir.list();    for (    String aChildren : children) {      ret&=new File(dir,aChildren).delete();    }  }  return ret;}  }
class C{  public void incrementLine(){  line++;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:46.158 -0500",hash_original_method="4B44553A53A441875D6B8FA3F401ACD7",hash_generated_method="90E61E8A6A5B7EB05B10B4E4B65BA202") public static void onReceivedCredentials(LoadListener loader,String host,String realm,String username,String password){  CallbackProxy proxy=loader.getFrame().getCallbackProxy();  proxy.onReceivedHttpAuthCredentials(host,realm,username,password);}  }
class C{  public OperationStateException(String message){  super(message);}  }
class C{  public CompiledST compile(String srcName,String name,List<FormalArgument> args,String template,Token templateToken){  Compiler c=new Compiler(this);  return c.compile(srcName,name,args,template,templateToken);}  }
class C{  public static String slurpFile(File file) throws IOException {  Reader r=new FileReader(file);  return slurpReader(r);}  }
class C{  private void createRScript(){  ClassLoader classLoader=getClass().getClassLoader();  File out=new File(scriptPath);  if (out.exists() && out.isDirectory()) {    throw new InterpreterException("Can't create r script " + out.getAbsolutePath());  }  try {    FileOutputStream outStream=new FileOutputStream(out);    IOUtils.copy(classLoader.getResourceAsStream("R/zeppelin_sparkr.R"),outStream);    outStream.close();  } catch (  IOException e) {    throw new InterpreterException(e);  }  logger.info("File {} created",scriptPath);}  }
class C{  public static String defaultString(Object obj){  return defaultString(obj,"");}  }
class C{  public static ThreadSafeLocation[] wrapArray(Object syncObj,Location[] locations){  ThreadSafeLocation[] threadSafeLocations=new ThreadSafeLocation[locations.length];  for (int i=0; i < locations.length; ++i) {    threadSafeLocations[i]=wrap(syncObj,locations[i]);  }  return threadSafeLocations;}  }
class C{  public static void main(String[] args){  runFilter(new ReplaceMissingWithUserConstant(),args);}  }
class C{  @Override protected void initGUI(){  super.initGUI();  m_List=new JList();  add(new BaseScrollPane(m_List),BorderLayout.CENTER);}  }
class C{  public ResultPoint[] detect() throws NotFoundException {  int height=image.getHeight();  int width=image.getWidth();  int halfHeight=height >> 1;  int halfWidth=width >> 1;  int deltaY=Math.max(1,height / (MAX_MODULES << 3));  int deltaX=Math.max(1,width / (MAX_MODULES << 3));  int top=0;  int bottom=height;  int left=0;  int right=width;  ResultPoint pointA=findCornerFromCenter(halfWidth,0,left,right,halfHeight,-deltaY,top,bottom,halfWidth >> 1);  top=(int)pointA.getY() - 1;  ResultPoint pointB=findCornerFromCenter(halfWidth,-deltaX,left,right,halfHeight,0,top,bottom,halfHeight >> 1);  left=(int)pointB.getX() - 1;  ResultPoint pointC=findCornerFromCenter(halfWidth,deltaX,left,right,halfHeight,0,top,bottom,halfHeight >> 1);  right=(int)pointC.getX() + 1;  ResultPoint pointD=findCornerFromCenter(halfWidth,0,left,right,halfHeight,deltaY,top,bottom,halfWidth >> 1);  bottom=(int)pointD.getY() + 1;  pointA=findCornerFromCenter(halfWidth,0,left,right,halfHeight,-deltaY,top,bottom,halfWidth >> 2);  return new ResultPoint[]{pointA,pointB,pointC,pointD};}  }
class C{  @Override public boolean sendMessage(IMMessage message){  if (!isAllowSendMessage(message)) {    return false;  }  NIMClient.getService(MsgService.class).sendMessage(message,false);  messageListPanel.onMsgSend(message);  return true;}  }
class C{  public static void validateUTF8(byte[] utf8) throws MalformedInputException {  validateUTF8(utf8,0,utf8.length);}  }
class C{  public long first(){  return startDate.getTime();}  }
class C{  public final QuadEdge oNext(){  return next;}  }
class C{  public void writeBinary(final PacketOutputStream writer){  if (escapedArray == null)   utf8();  writer.assureBufferCapacity(position + 9);  writer.writeFieldLength(position);  writer.buffer.put(escapedArray,0,position);  escapedArray=null;}  }
class C{  public boolean isInterface_1(){  return interface_1;}  }
class C{  public JSONObject loadJSONFromAsset(Context context,String filename){  String json=null;  JSONObject jsonObject=null;  try {    InputStream is=context.getAssets().open(filename);    int size=is.available();    byte[] buffer=new byte[size];    final int read=is.read(buffer);    is.close();    if (read > 0) {      json=new String(buffer,"UTF-8");    }  } catch (  IOException ex) {    ex.printStackTrace();    return null;  }  try {    jsonObject=new JSONObject(json);  } catch (  JSONException e) {    e.printStackTrace();  }  return jsonObject;}  }
class C{  public boolean dominates(int b,BitVector bits){  for (int i=0; i < bits.length(); i++) {    if (!bits.get(i)) {      continue;    }    if (!dominates(b,i)) {      return false;    }  }  return true;}  }
class C{  public StaticMap center(double latitude,double longitude){  return center(new GeoPoint(latitude,longitude));}  }
class C{  @Override @Inline public void release(Address block){  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(Block.isAligned(block));  Block.setBlockAsUnallocated(block);  ((FreeListPageResource)pr).releasePages(block);}  }
class C{  public void visitEnd(){  if (cv != null) {    cv.visitEnd();  }}  }
class C{  public ModuleLoadedReply(final int packetId,final int errorCode,final MemoryModule module,final TargetProcessThread thread){  super(packetId,errorCode);  this.module=module;  this.thread=thread;}  }
class C{  public List<String> names(){  List<String> names=new ArrayList<String>(datasources.keySet());  return names;}  }
class C{  public static void apply(View v,int rippleColor,int resId,ImageView.ScaleType scaleType){  RippleConfig config=new RippleConfig();  config.setRippleColor(rippleColor);  if (sContext != null) {    try {      config.setBackgroundDrawable(sContext.getResources().getDrawable(resId));      config.setScaleType(scaleType);    } catch (    Exception e) {      e.printStackTrace();    }  } else {    Log.e(TAG,"RippleCompat->apply --err log-- not init context!");  }  apply(v,config,null);}  }
class C{  public static int[] naiveCountingSort(int[] arr){  int max=Integer.MIN_VALUE;  for (  int i : arr) {    if (i > max) {      max=i;    }  }  int[] counts=new int[max + 1];  for (  int i : arr) {    counts[i]+=1;  }  int[] sorted=new int[arr.length];  int k=0;  for (int i=0; i < counts.length; i+=1) {    for (int j=0; j < counts[i]; j+=1, k+=1) {      sorted[k]=i;    }  }  return sorted;}  }
class C{  public void disableDebug(){  this.debug=false;}  }
class C{  IndexSearcher createSearcher(final Directory dir) throws IOException {  return new IndexSearcher(DirectoryReader.open(dir));}  }
class C{  protected void layoutMinorAxis(int targetSpan,int axis,int[] offsets,int[] spans){  super.layoutMinorAxis(targetSpan,axis,offsets,spans);  int col=0;  int ncells=getViewCount();  for (int cell=0; cell < ncells; cell++, col++) {    View cv=getView(cell);    for (; isFilled(col); col++)     ;    int colSpan=getColumnsOccupied(cv);    int rowSpan=getRowsOccupied(cv);    if (rowSpan > 1) {      int row0=rowIndex;      int row1=Math.min(rowIndex + rowSpan - 1,getRowCount() - 1);      spans[cell]=getMultiRowSpan(row0,row1);    }    if (colSpan > 1) {      col+=colSpan - 1;    }  }}  }
class C{  public static final void sort(int[] a,int[] b){  mergesort(a,b,0,a.length - 1);}  }
class C{  public static void main(final String[] args){  Logger.getLogger("com.jme").setLevel(Level.OFF);  Logger.getLogger("com.jmex").setLevel(Level.OFF);  SplashWindow.splash(ResourceManager.getImage("simbrain-logo.gif"));  SplashWindow.invokeMain("org.simbrain.workspace.gui.SimbrainDesktop",args);  SplashWindow.disposeSplash();}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildCastleDungeonArea(zone);}  }
class C{  private int generateNonce(){  return RANDOM.nextInt();}  }
class C{  public static boolean isMessageCpimType(String mime){  return mime != null && mime.toLowerCase().startsWith(CpimMessage.MIME_TYPE);}  }
class C{  public void menuCanceled(MenuEvent e){}  }
class C{  private int readMaxTotalConnectionSetting(){  int maxTotalConnections=DEFAULT_MAX_TOTAL_CONNECTIONS;  try {    maxTotalConnections=Integer.parseInt(System.getProperty("http.maxTotalConnections",String.valueOf(DEFAULT_MAX_TOTAL_CONNECTIONS)));  } catch (  Exception e) {    log.error("Could not use http.maxTotalConnections definition.",e);  }  return maxTotalConnections;}  }
class C{  public Boolean isClientKeyPEM(){  return clientKeyPEM;}  }
class C{  public boolean contains(String field){  return delegate.contains(field);}  }
class C{  public void deleteAccountInfoRequest(String user,String requestId) throws AppsForYourDomainException, IOException, ServiceException {  URL url=new URL(BASE_URL + "account/" + domain+ "/"+ user+ "/"+ requestId);  delete(url);}  }
class C{  private static GridClientLoadBalancer resolveBalancer(String balancer) throws GridClientException {  if (F.isEmpty(balancer) || "random".equals(balancer))   return new GridClientRandomBalancer();  if ("roundrobin".equals(balancer))   return new GridClientRoundRobinBalancer();  return newInstance(GridClientLoadBalancer.class,balancer);}  }
class C{  public static int bitCount(long v){  v-=(v >>> 1) & 0x5555555555555555L;  v=(v & 0x3333333333333333L) + ((v >>> 2) & 0x3333333333333333L);  int i=((int)(v >>> 32)) + (int)v;  i=(i & 0x0F0F0F0F) + ((i >>> 4) & 0x0F0F0F0F);  i+=i >>> 8;  i+=i >>> 16;  return i & 0x0000007F;}  }
class C{  public FciCcdSearchEditor(CcdRunner runner){  super(runner,"Result allow_latent_common_causes");}  }
class C{  public void init(IndicatorViewPart view,IStructuredSelection selection){  this.view=view;  this.selection=selection;}  }
class C{  public ZipEntry(String name){  super(name);}  }
class C{  @SuppressWarnings("unchecked") @Override protected R resolve(final Object arg0){  final ITuple tuple=(ITuple)arg0;  return (R)tuple.getObject();}  }
class C{  public GROUP_BY GROUP_BY(String groupBy){  return new GROUP_BY(this,groupBy);}  }
class C{  @Override public boolean isConsistent(long oldSw,short oldPort,long newSw,short newPort){  return isConsistent(oldSw,oldPort,newSw,newPort,true);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static boolean isProjectCreator(RepositoryService aProjectRepository,User aUser){  boolean roleAdmin=false;  for (  String role : getRoles(aProjectRepository,aUser)) {    if (Role.ROLE_PROJECT_CREATOR.name().equals(role)) {      roleAdmin=true;      break;    }  }  return roleAdmin;}  }
class C{  public void visitOuterClass(String owner,String name,String desc){  if (cv != null) {    cv.visitOuterClass(owner,name,desc);  }}  }
class C{  int adjustTextOffset(int offset){  maxTextOffset=Math.max(maxTextOffset,offset);  return maxTextOffset;}  }
class C{  public String toFormattedString(){  return "CUDA resource view descriptor:\n    " + createString("\n    ");}  }
class C{  public com.emc.storageos.vasa.VasaServiceStub.QueryUniqueIdentifiersForFileSystemsResponse queryUniqueIdentifiersForFileSystems(com.emc.storageos.vasa.VasaServiceStub.QueryUniqueIdentifiersForFileSystems queryUniqueIdentifiersForFileSystems7) throws java.rmi.RemoteException, com.emc.storageos.vasa.NotImplemented, com.emc.storageos.vasa.InvalidArgument, com.emc.storageos.vasa.NotFound, com.emc.storageos.vasa.InvalidSession, com.emc.storageos.vasa.StorageFault {  org.apache.axis2.context.MessageContext _messageContext=null;  try {    org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[3].getName());    _operationClient.getOptions().setAction("urn:queryUniqueIdentifiersForFileSystems");    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);    addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");    _messageContext=new org.apache.axis2.context.MessageContext();    org.apache.axiom.soap.SOAPEnvelope env=null;    env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),queryUniqueIdentifiersForFileSystems7,optimizeContent(new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/","queryUniqueIdentifiersForFileSystems")));    _serviceClient.addHeadersToEnvelope(env);    _messageContext.setEnvelope(env);    _operationClient.addMessageContext(_messageContext);    _operationClient.execute(true);    org.apache.axis2.context.MessageContext _returnMessageContext=_operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);    org.apache.axiom.soap.SOAPEnvelope _returnEnv=_returnMessageContext.getEnvelope();    java.lang.Object object=fromOM(_returnEnv.getBody().getFirstElement(),com.emc.storageos.vasa.VasaServiceStub.QueryUniqueIdentifiersForFileSystemsResponse.class,getEnvelopeNamespaces(_returnEnv));    return (com.emc.storageos.vasa.VasaServiceStub.QueryUniqueIdentifiersForFileSystemsResponse)object;  } catch (  org.apache.axis2.AxisFault f) {    org.apache.axiom.om.OMElement faultElt=f.getDetail();    if (faultElt != null) {      if (faultExceptionNameMap.containsKey(faultElt.getQName())) {        try {          java.lang.String exceptionClassName=(java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());          java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);          java.lang.Exception ex=(java.lang.Exception)exceptionClass.newInstance();          java.lang.String messageClassName=(java.lang.String)faultMessageMap.get(faultElt.getQName());          java.lang.Class messageClass=java.lang.Class.forName(messageClassName);          java.lang.Object messageObject=fromOM(faultElt,messageClass,null);          java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});          m.invoke(ex,new java.lang.Object[]{messageObject});          if (ex instanceof com.emc.storageos.vasa.NotImplemented) {            throw (com.emc.storageos.vasa.NotImplemented)ex;          }          if (ex instanceof com.emc.storageos.vasa.InvalidArgument) {            throw (com.emc.storageos.vasa.InvalidArgument)ex;          }          if (ex instanceof com.emc.storageos.vasa.NotFound) {            throw (com.emc.storageos.vasa.NotFound)ex;          }          if (ex instanceof com.emc.storageos.vasa.InvalidSession) {            throw (com.emc.storageos.vasa.InvalidSession)ex;          }          if (ex instanceof com.emc.storageos.vasa.StorageFault) {            throw (com.emc.storageos.vasa.StorageFault)ex;          }          throw new java.rmi.RemoteException(ex.getMessage(),ex);        } catch (        java.lang.ClassCastException e) {          throw f;        }catch (        java.lang.ClassNotFoundException e) {          throw f;        }catch (        java.lang.NoSuchMethodException e) {          throw f;        }catch (        java.lang.reflect.InvocationTargetException e) {          throw f;        }catch (        java.lang.IllegalAccessException e) {          throw f;        }catch (        java.lang.InstantiationException e) {          throw f;        }      } else {        throw f;      }    } else {      throw f;    }  } finally {    _messageContext.getTransportOut().getSender().cleanup(_messageContext);  }}  }
class C{  private AsyncEvent optimalGet(Long k){  LocalRegion lr=(LocalRegion)this.region;  Object o=null;  try {    o=lr.getValueInVMOrDiskWithoutFaultIn(k);    if (o != null && o instanceof CachedDeserializable) {      o=((CachedDeserializable)o).getDeserializedValue(lr,lr.getRegionEntry(k));    }  } catch (  EntryNotFoundException ok) {  }  if (o == Token.TOMBSTONE) {    o=null;  }  return (AsyncEvent)o;}  }
class C{  public static boolean parsePerlCode(PsiBuilder b,int l,PsiBuilder.Marker outerMarker,IElementType perlTokenType,IElementType blockTokenType){  PsiBuilder.Marker perlMarker=b.mark();  while (!b.eof() && !isEndTagAhead(b,l)) {    b.advanceLexer();  }  boolean recoverBlock=true;  if (isEndTagAhead(b,l)) {    perlMarker.collapse(perlTokenType);    perlMarker.setCustomEdgeTokenBinders(WhitespacesBinders.GREEDY_LEFT_BINDER,WhitespacesBinders.GREEDY_RIGHT_BINDER);  } else {    perlMarker.drop();  }  if (TemplateToolkitParser.element(b,l)) {    LighterASTNode latestDoneMarker=b.getLatestDoneMarker();    if (latestDoneMarker != null && latestDoneMarker.getTokenType() == END_DIRECTIVE) {      outerMarker.done(blockTokenType);      recoverBlock=false;    }  }  if (recoverBlock) {    while (!b.eof() || b.getTokenType() == TT2_OUTLINE_TAG || b.getTokenType() == TT2_OPEN_TAG) {      b.advanceLexer();    }    outerMarker.done(blockTokenType);    outerMarker.setCustomEdgeTokenBinders(WhitespacesBinders.GREEDY_LEFT_BINDER,WhitespacesBinders.GREEDY_RIGHT_BINDER);    outerMarker.precede().error(PerlBundle.message("ttk2.error.unclosed.perl.block"));  }  return true;}  }
class C{  public static Component findSubComponent(Component parent,String className){  String parentClassName=parent.getClass().getName();  if (parentClassName.contains(className)) {    return parent;  }  if (parent instanceof Container) {    for (    Component child : ((Container)parent).getComponents()) {      Component subComponent=findSubComponent(child,className);      if (subComponent != null) {        return subComponent;      }    }  }  return null;}  }
class C{  public void stop(){  for (  DownloadDispatcher dispatcher : mDispatchers) {    if (dispatcher != null)     dispatcher.quit();  }}  }
class C{  @Override public ItemStack transferStackInSlot(EntityPlayer par1EntityPlayer,int slotID){  ItemStack var2=null;  Slot var3=(Slot)this.inventorySlots.get(slotID);  if (var3 != null && var3.getHasStack()) {    ItemStack itemStack=var3.getStack();    var2=itemStack.copy();    if (slotID >= this.slotCount) {      boolean didTry=false;      for (int i=0; i < this.slotCount; i++) {        if (this.getSlot(i).isItemValid(itemStack)) {          didTry=true;          if (this.mergeItemStack(itemStack,i,i + 1,false)) {            break;          }        }      }      if (!didTry) {        if (slotID < 27 + this.slotCount) {          if (!this.mergeItemStack(itemStack,27 + this.slotCount,36 + this.slotCount,false)) {            return null;          }        } else         if (slotID >= 27 + this.slotCount && slotID < 36 + this.slotCount && !this.mergeItemStack(itemStack,slotCount,27 + slotCount,false)) {          return null;        }      }    } else     if (!mergeItemStack(itemStack,this.slotCount,36 + this.slotCount,false)) {      return null;    }    if (itemStack.stackSize == 0) {      var3.putStack((ItemStack)null);    } else {      var3.onSlotChanged();    }    if (itemStack.stackSize == var2.stackSize) {      return null;    }    var3.onPickupFromSlot(par1EntityPlayer,itemStack);  }  return var2;}  }
class C{  @Override public String toString(){  final StringBuilder sb=new StringBuilder();  sb.append(selector).append("{");  for (  final Property property : properties) {    if (property != null) {      sb.append(property.toString());    }  }  sb.append("}");  return sb.toString();}  }
class C{  public void onCellInfoChanged(List<CellInfo> cellInfo){}  }
class C{  @SuppressWarnings("JavaDoc") public static boolean saveObject(Context context,Serializable ser,String file){  FileOutputStream fos=null;  ObjectOutputStream oos=null;  try {    fos=context.openFileOutput(file,Context.MODE_PRIVATE);    oos=new ObjectOutputStream(fos);    oos.writeObject(ser);    oos.flush();    return true;  } catch (  Exception e) {    e.printStackTrace();    return false;  } finally {    try {      if (oos != null)       oos.close();    } catch (    Exception e) {      e.printStackTrace();    }    try {      if (fos != null)       fos.close();    } catch (    Exception e) {      e.printStackTrace();    }  }}  }
class C{  private long heartbeatTime(){  int quorumIndex=quorumIndex();  if (quorumIndex >= 0) {    return context.getClusterState().getActiveMemberStates(null).get(quorumIndex).getHeartbeatTime();  }  return System.currentTimeMillis();}  }
class C{  public void addDependency(Dependency dependency){  if (dependencies == null) {    dependencies=new ArrayList<Dependency>();    nodeDependencies=new ArrayList<Node>();  }  dependencies.add(dependency);  if (!nodeDependencies.contains(dependency.node)) {    nodeDependencies.add(dependency.node);  }  Node dependencyNode=dependency.node;  if (dependencyNode.nodeDependents == null) {    dependencyNode.nodeDependents=new ArrayList<Node>();  }  dependencyNode.nodeDependents.add(this);}  }
class C{  private static CategoryDataset createDataset(){  DefaultCategoryDataset dataset=new DefaultCategoryDataset();  dataset.addValue(7445,"JFreeSVG","Warm-up");  dataset.addValue(24448,"Batik","Warm-up");  dataset.addValue(4297,"JFreeSVG","Test");  dataset.addValue(21022,"Batik","Test");  return dataset;}  }
class C{  public static Map<String,?> deepCopy(final Map<String,?> script,final CollectionDetector collectionDetector){  final Map<String,Object> copy=new LinkedHashMap<>(script.size() + 1,1);  final CollectionDetector notNullCollectionDetector=MoreObjects.firstNonNull(collectionDetector,CollectionDetector.DEFAULT);  for (  String key : script.keySet()) {    copy.put(key,copyIfNecessary(script.get(key),notNullCollectionDetector));  }  return copy;}  }
class C{  @Override public String next(){  if (hasNext()) {    return tokens[tokenPos++];  }  throw new NoSuchElementException();}  }
class C{  public void gc(){  return;}  }
class C{  public void put(String key,Object value){  Bindings nn=getBindings(ScriptContext.ENGINE_SCOPE);  if (nn != null) {    nn.put(key,value);  }}  }
class C{  @Override public void onLoaderReset(Loader<Cursor> loader){  mInitialScrollPosition=mViewPager.getCurrentItem();  mAdapter.swapCursor(null);  if (Global.debugEnabledSql) {    Log.i(Global.LOG_CONTEXT,mDebugPrefix + " onLoaderReset" + getDebugContext());  }  mAdapter.notifyDataSetChanged();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  protected boolean isLog4JAvailable(){  return isLogLibraryAvailable("Log4J",LOGGING_IMPL_LOG4J_LOGGER);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:53.581 -0500",hash_original_method="DA573DADA483FE1143660303AA3E0D9F",hash_generated_method="3300E7531D33224452AC62CE66C92E9A") protected int regCodeToServiceState(int code){switch (code) {case 0:    return ServiceState.STATE_OUT_OF_SERVICE;case 1:  return ServiceState.STATE_IN_SERVICE;case 2:case 3:case 4:return ServiceState.STATE_OUT_OF_SERVICE;case 5:return ServiceState.STATE_IN_SERVICE;default :loge("regCodeToServiceState: unexpected service state " + code);return ServiceState.STATE_OUT_OF_SERVICE;}}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public double pdf(double x){  return this.TERM * Math.pow((1 + x * x / freedom),-(freedom + 1) * 0.5);}  }
class C{  public void testNestedCallProcMixed(){  check("CALL func1(CALL func2(field1), CALL func3(field2))","{call func1({call func2(field1)}, {call func3(field2)})}");  check("select CALL func1(CALL func2(field1), CALL func3(field2)) from table;","select {call func1({call func2(field1)}, {call func3(field2)})} from table;");  check("CALL func1(CALL func2(CALL func3(field1))) CALL func1(CALL func2(field2))","{call func1({call func2({call func3(field1)})})} {call func1({call func2(field2)})}");}  }
class C{  public Builder addCustom(final Class clazz,final SerializerShim serializer){  addOrOverrideRegistration(clazz,null);  return this;}  }
class C{  public static boolean arrayStartsWith(final byte[] array,final byte[] str){  boolean result=false;  if (array.length >= str.length) {    result=true;    int index=str.length;    while (--index >= 0) {      if (array[index] != str[index]) {        result=false;        break;      }    }  }  return result;}  }
class C{  public static boolean containsIgnoreCase(String str,String query){  if (str != null && query != null) {    int limit=str.length() - query.length() + 1;    for (int i=0; i < limit; i++) {      if (matchesIgnoreCase(str,query,i)) {        return true;      }    }  }  return false;}  }
class C{  public void ignorableWhitespace(char[] ch,int start,int length) throws SAXException {  characters(ch,start,length);}  }
class C{  public static synchronized boolean updateXYPairs(Hashtable<Long,Pair> userDataVector,double[] terms){  boolean updated=false;  for (Enumeration<Pair> enumPairs=userDataVector.elements(); enumPairs.hasMoreElements(); ) {    Pair pair=enumPairs.nextElement();    double y=fx(pair.x,terms);    pair.y=y;    updated=true;  }  return updated;}  }
class C{  public AbstractLocalTransition(State<S,E> source,State<S,E> target,Collection<Action<S,E>> actions,E event,Guard<S,E> guard,Trigger<S,E> trigger){  super(source,target,actions,event,TransitionKind.LOCAL,guard,trigger);}  }
class C{  @Override public int read(byte[] b) throws IOException {  return read(b,0,b.length);}  }
class C{  public static void cleanUpCustomTempDirectories(){  if (tempDirectoryList != null) {    log.info("Removing custom temp directories");    try {      for (      File tempFile : tempDirectoryList)       if (tempFile.exists()) {        log.info("Deleting : " + tempFile.getCanonicalPath());        deleteDirectory(tempFile);      }      tempDirectoryList.clear();    } catch (    IOException e) {      e.printStackTrace();    }  } else   log.info("No custom temp directory created.");  log.info("Finished removing custom temp directories");}  }
class C{  @Override public void updateString(int columnIndex,String x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateString(" + columnIndex + ", "+ quote(x)+ ");");    }    update(columnIndex,x == null ? ValueNull.INSTANCE : ValueString.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static void clearActionsFromString(OFFlowMod.Builder fmb,String inst,Logger log){  if (fmb.getVersion().compareTo(OFVersion.OF_11) < 0) {    log.error("Clear Actions Instruction not supported in OpenFlow 1.0");    return;  }  if (inst != null && inst.isEmpty()) {    OFInstructionClearActions i=OFFactories.getFactory(fmb.getVersion()).instructions().clearActions();    log.debug("Appending ClearActions instruction: {}",i);    appendInstruction(fmb,i);    log.debug("All instructions after append: {}",fmb.getInstructions());  } else {    log.error("Got non-empty or null string, but ClearActions should not have any String sub-fields: {}",inst);  }}  }
class C{  public UserModificationConstraintExceptionBean(ApplicationExceptionBean bean,Reason reason){  super(bean);  setReason(reason);}  }
class C{  public AdempiereSystemError(String message,Object detail){  super(message);  setDetail(detail);}  }
class C{  private ActionBarBackground changeColor(Boolean fade){  if (fade) {    fadeBackground(mOldBackground,getColoredBackground(mNewColor));  } else {    mActionBar.setBackgroundDrawable(getColoredBackground(mNewColor));  }  return this;}  }
class C{  public void addModifyListener(final ModifyListener listener){  checkWidget();  this.panel.addModifyListener(listener);}  }
class C{  public boolean is_applicable(@NonNull InstalledApp app){  return is_applicable(app.get_package_name());}  }
class C{  protected ByteBuffer createRaster(double x,double y,double xScale,double yScale){  try {    Camera tCam=offscreenRenderer.getCamera();    Vector3 camLocation=new Vector3(x,y,cameraZ);    tCam.setFrame(camLocation,Vector3.NEG_UNIT_X,Vector3.UNIT_Y,Vector3.NEG_UNIT_Z);    double right=(tileWidth * xScale) / 2 + xScale;    double top=(tileLength * yScale) / 2 + yScale;    tCam.setFrustum(near,far,-right,right,top,-top);    tCam.update();    offscreenRenderer.render(root,Renderer.BUFFER_COLOR_AND_DEPTH);    return (offscreenRenderer.getRGBABuffer());  } catch (  Exception e) {    System.out.println("Unable to render tile.");    e.printStackTrace();    return (null);  }}  }
class C{  public LensMagnificationGraphMousePlugin(){  this(MouseEvent.CTRL_MASK);}  }
class C{  public void loadPDF(final File input){  if (input == null) {    return;  }  scale=1;  PDFfile=input.getAbsolutePath();  fileLoc.setText(PDFfile);  openFile(input,null,false);}  }
class C{  private void debugSegment(WriteStream out,SegmentServiceImpl segmentService,SegmentExtent extent,byte[] debugTableKey) throws IOException {  int length=extent.length();  try (InSegment in=segmentService.openRead(extent)){    ReadStream is=new ReadStream(in);    is.position(length - BLOCK_SIZE);    long seq=BitsUtil.readLong(is);    if (seq <= 0) {      return;    }    byte[] tableKey=new byte[32];    is.readAll(tableKey,0,tableKey.length);    TableEntry table=segmentService.findTable(tableKey);    if (table == null) {      return;    }    if (debugTableKey != null && !Arrays.equals(debugTableKey,tableKey)) {      return;    }    out.println();    StringBuilder sb=new StringBuilder();    Base64Util.encode(sb,seq);    long time=_idGen.time(seq);    out.println("Segment: " + extent.getId() + " (seq: "+ sb+ ", table: "+ Hex.toShortHex(tableKey)+ ", addr: 0x"+ Long.toHexString(extent.address())+ ", len: 0x"+ Integer.toHexString(length)+ ", time: "+ LocalDateTime.ofEpochSecond(time / 1000,0,ZoneOffset.UTC)+ ")");    debugSegmentEntries(out,is,extent,table);  } }  }
class C{  private static void writeResourceToFile(String resourceName,File file) throws IOException {  if (file == null) {    throw new NullPointerException("Target file may not be null");  }  if (file.exists()) {    throw new IllegalArgumentException("Target file already exists: " + file);  }  InputStream inputStream=LibUtils.class.getResourceAsStream(resourceName);  if (inputStream == null) {    throw new IOException("No resource found with name '" + resourceName + "'");  }  OutputStream outputStream=null;  try {    outputStream=new FileOutputStream(file);    byte[] buffer=new byte[32768];    while (true) {      int read=inputStream.read(buffer);      if (read < 0) {        break;      }      outputStream.write(buffer,0,read);    }    outputStream.flush();  }  finally {    if (outputStream != null) {      try {        outputStream.close();      } catch (      IOException e) {        logger.log(Level.SEVERE,e.getMessage(),e);      }    }    try {      inputStream.close();    } catch (    IOException e) {      logger.log(Level.SEVERE,e.getMessage(),e);    }  }}  }
class C{  public void bind(int index,byte[] value){  if (value == null) {    mPreparedStatement.bindNull(index);  } else {    mPreparedStatement.bindBlob(index,value);  }}  }
class C{  public static ResponseEntity<InputStream> writeFileResponse(final Artifact artifact,final HttpServletResponse servletResponse,final HttpServletRequest request,final DbArtifact file){  return writeFileResponse(artifact,servletResponse,request,file,null,null);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  void assignOne(){  for (int i=0; i < mLength - 1; i++) {    mPol[i]=0xffffffffffffffffL;  }  mPol[mLength - 1]=mMaxmask[mBit - 1];}  }
class C{  public void ensureCapacity(int minCapacity){  int minExpand=(elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA) ? 0 : DEFAULT_CAPACITY;  if (minCapacity > minExpand) {    ensureExplicitCapacity(minCapacity);  }}  }
class C{  public String embeddingvectorfile(){  return embeddingvectorfile;}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public boolean emitToClassfile(){  return !type.isLocal() || isValidOffset;}  }
class C{  public void add(RoleUnresolved role) throws IllegalArgumentException {  if (role == null) {    String excMsg="Invalid parameter";    throw new IllegalArgumentException(excMsg);  }  super.add(role);}  }
class C{  protected TColor(){  rgb=new float[3];  hsv=new float[3];  cmyk=new float[4];}  }
class C{  public static void assertFalse(String message,boolean condition){  Assert.assertFalse(message,condition);}  }
class C{  private synchronized void touchPeer(Peer peer){  Peer copyInList=getCanonicalPeer(peer);  if (copyInList != null) {    copyInList.touch();  }  if (peer != null) {    peer.touch();  }}  }
class C{  public ParetoObjectiveComparator(){  super();}  }
class C{  public void metadataRepository(File file){  addArg("metadataRepository",FileMisc.asUrl(file));}  }
class C{  public JobExecutionException(boolean refireImmediately){  refire=refireImmediately;}  }
class C{  public void reInitCache(int minTermOccurrenceInCache,boolean justCachedTerms) throws IOException {  this.justCachedTerms=justCachedTerms;  this.docsWithClassSize=countDocsWithClass();  termCClassHitCache.clear();  cclasses.clear();  classTermFreq.clear();  Map<String,Long> frequencyMap=new HashMap<>();  for (  String textFieldName : textFieldNames) {    TermsEnum termsEnum=MultiFields.getTerms(indexReader,textFieldName).iterator();    while (termsEnum.next() != null) {      BytesRef term=termsEnum.term();      String termText=term.utf8ToString();      long frequency=termsEnum.docFreq();      Long lastfreq=frequencyMap.get(termText);      if (lastfreq != null)       frequency+=lastfreq;      frequencyMap.put(termText,frequency);    }  }  for (  Map.Entry<String,Long> entry : frequencyMap.entrySet()) {    if (entry.getValue() > minTermOccurrenceInCache) {      termCClassHitCache.put(entry.getKey(),new ConcurrentHashMap<BytesRef,Integer>());    }  }  Terms terms=MultiFields.getTerms(indexReader,classFieldName);  TermsEnum termsEnum=terms.iterator();  while ((termsEnum.next()) != null) {    cclasses.add(BytesRef.deepCopyOf(termsEnum.term()));  }  for (  BytesRef cclass : cclasses) {    double avgNumberOfUniqueTerms=0;    for (    String textFieldName : textFieldNames) {      terms=MultiFields.getTerms(indexReader,textFieldName);      long numPostings=terms.getSumDocFreq();      avgNumberOfUniqueTerms+=numPostings / (double)terms.getDocCount();    }    int docsWithC=indexReader.docFreq(new Term(classFieldName,cclass));    classTermFreq.put(cclass,avgNumberOfUniqueTerms * docsWithC);  }}  }
class C{  public void method1(int a,int b){}  }
class C{  private boolean isAdditiveNumber(BigInteger num1,BigInteger num2,int start,String num){  if (start == num.length()) {    return true;  }  num2=num2.add(num1);  num1=num2.subtract(num1);  String sum=num2.toString();  return num.startsWith(sum,start) && isAdditiveNumber(num1,num2,start + sum.length(),num);}  }
class C{  boolean isValidValue(Object value,boolean wantsCCE){  Comparable min=getMinimum();  try {    if (min != null && min.compareTo(value) > 0) {      return false;    }  } catch (  ClassCastException cce) {    if (wantsCCE) {      throw cce;    }    return false;  }  Comparable max=getMaximum();  try {    if (max != null && max.compareTo(value) < 0) {      return false;    }  } catch (  ClassCastException cce) {    if (wantsCCE) {      throw cce;    }    return false;  }  return true;}  }
class C{  final public void clear(){  this.buf=null;}  }
class C{  public GeoPolygonQueryBuilder queryName(String queryName){  this.queryName=queryName;  return this;}  }
class C{  public void call(String method,Object[] args) throws IOException {  startCall(method);  if (args != null) {    for (int i=0; i < args.length; i++)     writeObject(args[i]);  }  completeCall();}  }
class C{  public static Angle fromRadians(double radians){  return new Angle(RADIANS_TO_DEGREES * radians,radians);}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("[");  buffer.append(getClass().getName());  buffer.append(": ");  Iterator iter=getServerIterator();  Server currentServer=null;  while (iter.hasNext()) {    currentServer=(Server)iter.next();    buffer.append(currentServer);    if (iter.hasNext()) {      buffer.append(", ");    }  }  buffer.append("]");  return buffer.toString();}  }
class C{  public void removeEnd(AbstractEndNode pred){  int predIndex=phiPredecessorIndex(pred);  assert predIndex != -1;  deleteEnd(pred);  for (  PhiNode phi : phis().snapshot()) {    if (phi.isDeleted()) {      continue;    }    ValueNode removedValue=phi.valueAt(predIndex);    phi.removeInput(predIndex);    if (removedValue != null && removedValue.isAlive() && removedValue.hasNoUsages() && GraphUtil.isFloatingNode(removedValue)) {      GraphUtil.killWithUnusedFloatingInputs(removedValue);    }  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.INLINE_STATE_MACHINE___QUEUED_1:    return isQueued_1();case UmplePackage.INLINE_STATE_MACHINE___NAME_1:  return getName_1();case UmplePackage.INLINE_STATE_MACHINE___ANONYMOUS_INLINE_STATE_MACHINE_11:return getAnonymous_inlineStateMachine_1_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public PcapByteInputStream(byte[] pcap) throws IOException {  is=new DataInputStream(new ByteArrayInputStream(pcap));  readGlobalHeader();}  }
class C{  public JsonObject add(String name,float value){  add(name,Json.value(value));  return this;}  }
class C{  private String determineState(int numberOfProcessLinkedAssets,int numberOfAllLinkedAssets){  String state=IControl.IMPLEMENTED_PARTLY;  if (numberOfAllLinkedAssets == 0 || (numberOfAllLinkedAssets == numberOfProcessLinkedAssets)) {    state=IControl.IMPLEMENTED_YES;  }  return state;}  }
class C{  public ProjectContext loadProjectContext(ProjectRef ref) throws FileNotFoundException {  FileHandle projectFile=null;  for (  FileHandle f : Gdx.files.absolute(ref.getPath()).list()) {    if (f.extension().equals(ProjectManager.PROJECT_EXTENSION)) {      projectFile=f;      break;    }  }  if (projectFile != null) {    Input input=new Input(new FileInputStream(projectFile.path()));    ProjectDescriptor projectDescriptor=kryo.readObjectOrNull(input,ProjectDescriptor.class);    ProjectContext context=DescriptorConverter.convert(projectDescriptor);    context.activeSceneName=projectDescriptor.getCurrentSceneName();    return context;  }  return null;}  }
class C{  public void putFile(String path,byte[] data,long lastModified){  makeDirectory();  try {    File tmp=new File(filePath(path + ".tmp"));    OutputStream out=new BufferedOutputStream(new FileOutputStream(tmp));    out.write(data);    out.close();    File f=new File(filePath(path));    FileUtils.renameFile(tmp,f);    if (fileList == null) {      fileList=new HashSet<String>();    }    fileList.add(path);  } catch (  Exception e) {    if (Trace.error) {      e.printStackTrace();    }    throw new SwcException.FileNotWritten(path,e.getMessage());  }}  }
class C{  public LongMap(int initialCapacity){  this(initialCapacity,0.8f);}  }
class C{  public void adjustSize(int surfaceViewWidth,int surfaceViewHeight,int videoWidth,int videoHeight){  if (videoWidth > 0 && videoHeight > 0) {    ViewGroup.LayoutParams lp=getLayoutParams();    DisplayMetrics displayMetrics=getContext().getResources().getDisplayMetrics();    int windowWidth=displayMetrics.widthPixels;    int windowHeight=displayMetrics.heightPixels;    int margin=(int)(getContext().getResources().getDisplayMetrics().density * MARGIN_DP);    float videoRatio=0;    if (windowWidth < windowHeight) {      videoRatio=((float)(videoWidth)) / videoHeight;    } else {      videoRatio=((float)(videoHeight)) / videoWidth;    }    if (windowWidth < windowHeight) {      if (videoWidth > videoHeight) {        if (surfaceViewWidth / videoRatio > surfaceViewHeight) {          lp.height=surfaceViewHeight;          lp.width=(int)(surfaceViewHeight * videoRatio);        } else {          lp.height=(int)(surfaceViewWidth / videoRatio);          lp.width=surfaceViewWidth;        }      } else       if (videoWidth <= videoHeight) {        if (surfaceViewHeight * videoRatio > surfaceViewWidth) {          lp.height=(int)(surfaceViewWidth / videoRatio);          lp.width=surfaceViewWidth;        } else {          lp.height=surfaceViewHeight;          lp.width=(int)(surfaceViewHeight * videoRatio);        }      }    } else     if (windowWidth > windowHeight) {      if (videoWidth > videoHeight) {        if (windowWidth * videoRatio > videoHeight) {          lp.height=windowHeight - margin;          lp.width=(int)((windowHeight - margin) / videoRatio);        } else {          lp.height=(int)(windowWidth * videoRatio);          lp.width=windowWidth;        }      } else       if (videoWidth < videoHeight) {        lp.width=(int)((windowHeight - margin) / videoRatio);        lp.height=windowHeight - margin;      } else {        lp.height=windowHeight - margin;        lp.width=lp.height;      }    }    setLayoutParams(lp);    getHolder().setFixedSize(videoWidth,videoHeight);    setVisibility(View.VISIBLE);  }}  }
class C{  final boolean isReflex(EarClippingVertex vertex){  Vector2 p=vertex.point;  Vector2 p0=vertex.prev.point;  Vector2 p1=vertex.next.point;  Vector2 v1=p.to(p0);  Vector2 v2=p.to(p1);  if (v1.cross(v2) < 0.0) {    return false;  } else {    return true;  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:57.901 -0500",hash_original_method="68CC4A5755726297BC90EB8071236539",hash_generated_method="C5BE334319C46F9911B52B73C8B29B15") protected boolean right(TextView widget,Spannable buffer){  return false;}  }
class C{  public void refreshDatabase(){  Database old=this.getDBManager().getDatabase();  old.setStale();  try {    this.getDBManager().setupDatabase();  } catch (  ExecutionException e) {    e.printStackTrace();  }}  }
class C{  public static Field findField(Class<?> cl,String name){  Field m=null;  boolean notFound=true;  Class<?> currentCl=cl;  while (notFound) {    try {      m=currentCl.getDeclaredField(name);      notFound=false;    } catch (    Exception e) {      currentCl=currentCl.getSuperclass();      if (currentCl == null) {        notFound=false;        break;      }    }  }  if (null == m) {    Parametric p=new Parametric(cl);    m=p.findField(name);  }  return (m);}  }
class C{  public Location(Location l){  set(l);}  }
class C{  public void tradeOrderFilled(TradeOrder tradeOrder){}  }
class C{  static void checkDesc(final String desc,final boolean canBeVoid){  int end=checkDesc(desc,0,canBeVoid);  if (end != desc.length()) {    throw new IllegalArgumentException("Invalid descriptor: " + desc);  }}  }
class C{  public static String GetVersionName(Context context){  try {    PackageInfo manager=context.getPackageManager().getPackageInfo(context.getPackageName(),0);    return manager.versionName;  } catch (  PackageManager.NameNotFoundException e) {    return "";  }}  }
class C{  @Override public Object deserialize(byte[] arg0){  String logLine=new String(arg0);  HDFSAuditLogParser parser=new HDFSAuditLogParser();  HDFSAuditLogObject entity=null;  try {    entity=parser.parse(logLine);  } catch (  Exception ex) {    LOG.error("Failing parse audit log message",ex);  }  if (entity == null) {    LOG.warn("Event ignored as it can't be correctly parsed, the log is ",logLine);    return null;  }  Map<String,Object> map=new TreeMap<String,Object>();  map.put("src",entity.src);  map.put("dst",entity.dst);  map.put("host",entity.host);  map.put("timestamp",entity.timestamp);  map.put("allowed",entity.allowed);  map.put("user",entity.user);  map.put("cmd",entity.cmd);  return map;}  }
class C{  public boolean contains(double x,double y){  return getDistance(this.y,y) <= height / 2 && getDistance(this.x,x) <= width / 2;}  }
class C{  public GPathResult parseText(final String text) throws IOException, SAXException {  return parse(new StringReader(text));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 14:54:54.324 -0400",hash_original_method="629CABADADFA0A98A76126E90A02EC8E",hash_generated_method="629CABADADFA0A98A76126E90A02EC8E") boolean isSupportedMimeType(String mimeType){  if (null != mimeType && !mimeType.equals("")) {    for (int i=0; i < mMimeTypeList.size(); i++) {      String completeMimeType=mMimeTypeList.get(i);      if (completeMimeType.startsWith(mimeType)) {        return true;      }    }  }  return false;}  }
class C{  @RequestMapping(value=ApiUrl.CITIZEN_REGISTER,method=RequestMethod.POST,consumes={"application/json"}) public @ResponseBody ResponseEntity<String> register(@RequestBody JSONObject citizen){  ApiResponse res=ApiResponse.newInstance();  try {    Citizen citizenCreate=new Citizen();    citizenCreate.setUsername(citizen.get("mobileNumber").toString());    citizenCreate.setMobileNumber(citizen.get("mobileNumber").toString());    citizenCreate.setName(citizen.get("name").toString());    if (citizen.get("emailId") != null && !citizen.get("emailId").toString().trim().equals(""))     citizenCreate.setEmailId(citizen.get("emailId").toString());    citizenCreate.setPassword(citizen.get("password").toString());    Device device=deviceRepository.findByDeviceUId(citizen.get("deviceId").toString());    if (device == null) {      device=new Device();      device.setDeviceId(citizen.get("deviceId").toString());      device.setType(citizen.get("deviceType").toString());      device.setOSVersion(citizen.get("OSVersion").toString());    }    User user=userservice.getUserByUsername(citizenCreate.getMobileNumber());    if (user != null) {      return res.error(getMessage("user.register.duplicate.mobileno"));    }    if (citizenCreate.getEmailId() != null && !citizenCreate.getEmailId().isEmpty()) {      User getUser=userservice.getUserByEmailId(citizenCreate.getEmailId());      if (getUser != null) {        return res.error(getMessage("user.register.duplicate.email"));      }    }    citizenCreate.getDevices().add(device);    citizenService.create(citizenCreate);    return res.setDataAdapter(new UserAdapter()).success(citizenCreate,this.getMessage("msg.citizen.reg.success"));  } catch (  Exception e) {    LOGGER.error("EGOV-API ERROR ",e);    return res.error(getMessage("server.error"));  }}  }
class C{  public static void testOneWay(CollectionReaderDescription aReader,String aExpectedFile,String aFile,TestOptions aOptions) throws Exception {  String outputFolder=StringUtils.substringAfterLast(aReader.getImplementationName(),".") + "-" + FilenameUtils.getBaseName(aFile);  if (DkproTestContext.get() != null) {    outputFolder=DkproTestContext.get().getTestOutputFolderName();  }  File output=new File("target/test-output/" + outputFolder + "/dump.txt");  AnalysisEngineDescription writer=createEngineDescription(CasDumpWriter.class,CasDumpWriter.PARAM_TARGET_LOCATION,output,CasDumpWriter.PARAM_SORT,true);  testOneWay2(aReader,writer,aExpectedFile,"dump.txt",aFile,aOptions);}  }
class C{  public Builder addCharFilter(String name,Map<String,String> params) throws IOException {  Objects.requireNonNull(name,"CharFilter name may not be null");  charFilters.add(applyResourceLoader(CharFilterFactory.forName(name,applyDefaultParams(params))));  componentsAdded=true;  return this;}  }
class C{  public void shutdown(){  if (_producer != null) {    _producer.close();  }  _executorService.shutdown();  try {    if (!_executorService.awaitTermination(10,TimeUnit.SECONDS)) {      _logger.warn("Shutdown of Kafka executor service timed out after 10 seconds.");      _executorService.shutdownNow();    }  } catch (  InterruptedException ex) {    _logger.warn("Shutdown of executor service was interrupted.");    Thread.currentThread().interrupt();  }}  }
class C{  public Element store(Object o){  LightIcon p=(LightIcon)o;  if (!p.isActive()) {    return null;  }  Element element=new Element("LightIcon");  element.setAttribute("light",p.getLight().getSystemName());  storeCommonAttributes(p,element);  Element elem=new Element("icons");  elem.addContent(storeIcon("on",p.getOnIcon()));  elem.addContent(storeIcon("off",p.getOffIcon()));  elem.addContent(storeIcon("unknown",p.getUnknownIcon()));  elem.addContent(storeIcon("inconsistent",p.getInconsistentIcon()));  element.addContent(elem);  element.setAttribute("class","jmri.jmrit.display.configurexml.LightIconXml");  return element;}  }
class C{  public boolean supportsConvert() throws SQLException {  return false;}  }
class C{  public static void removeNPC(String name) throws UserDoesNotExistException {  User user=getUserByName(name);  if (user == null) {    throw new UserDoesNotExistException(name);  }  deleteNPC(name);}  }
class C{  MultipartStream(InputStream input,byte[] boundary){  this(input,boundary,DEFAULT_BUFSIZE);}  }
class C{  public static IProposalComputer newUiBinderRootElementProposalComputer(ContentAssistRequest contentAssistRequest){  Node node=contentAssistRequest.getNode();  if (node == null) {    return null;  }  if (node.getNodeType() == Node.ELEMENT_NODE) {    if (!XmlUtilities.getRootElement(node).equals(node)) {      return null;    }  } else   if (node.getNodeType() == Node.TEXT_NODE) {    if (node.getOwnerDocument().getDocumentElement() != null) {      return null;    }  } else {    return null;  }  String newLine=((DocumentImpl)node.getOwnerDocument()).getModel().getStructuredDocument().getLineDelimiter();  String beforeCursorText=MessageFormat.format("ui:{0} xmlns:ui=\"{1}\">{2}",UiBinderConstants.UI_BINDER_ELEMENT_NAME,UiBinderConstants.UI_BINDER_XML_NAMESPACE,newLine);  String afterCursorText=MessageFormat.format("{0}</ui:{1}>",newLine,UiBinderConstants.UI_BINDER_ELEMENT_NAME);  String fullText=beforeCursorText + afterCursorText;  String matchString=contentAssistRequest.getMatchString();  if (!fullText.startsWith(matchString)) {    return null;  }  int replaceOffset=contentAssistRequest.getReplacementBeginPosition();  return new StaticTextProposalComputer(new String[]{fullText},matchString,replaceOffset,matchString.length(),replaceOffset + beforeCursorText.length(),XmlContentAssistUtilities.getImageForElement());}  }
class C{  public synchronized void trimToSize(){  modCount++;  int oldCapacity=elementData.length;  if (elementCount < oldCapacity) {    Object[] oldData=elementData;    elementData=new Object[elementCount];    System.arraycopy(oldData,0,elementData,0,elementCount);  }}  }
class C{  private void broadcastEnd(){  sendBroadcast(new Intent(MainActivity.MISSION_END));}  }
class C{  public boolean supportsGetGeneratedKeys() throws SQLException {  return AbstractGeneratedKeysQuery.isGeneratedKeysSupportLoaded() && firebirdSupportInfo.supportsInsertReturning();}  }
class C{  public static List<MetaMethod> respondsTo(Object self,String name){  return InvokerHelper.getMetaClass(self).respondsTo(self,name);}  }
class C{  private static int indexOf(String[] names,String functionName){  for (int i=0; i < names.length; i++) {    if (names[i].equals(functionName))     return i;  }  return -1;}  }
class C{  public boolean isServiceActive(){  return getVO().getStatus().equals(ServiceStatus.ACTIVE);}  }
class C{  public LineMergeDirectedEdge(Node from,Node to,Coordinate directionPt,boolean edgeDirection){  super(from,to,directionPt,edgeDirection);}  }
class C{  public int decrement(int offset){  return increment(-offset);}  }
class C{  public LoopNestTree(Collection<Loop> loops){  super(new LoopNestTreeComparator());  addAll(loops);}  }
class C{  public BerkeleyDbDatabase(BerkeleyDbEnvironment environment,String dbName,boolean isReadOnly,boolean allowCreateNew,TupleBinding entryBinding) throws DatabaseException {  DatabaseConfig dbConfig=new DatabaseConfig();  dbConfig.setAllowCreate(allowCreateNew);  dbConfig.setReadOnly(isReadOnly);  dbConfig.setTransactional(false);  db=environment.getEnvironment().openDatabase(null,dbName,dbConfig);  this.entryBinding=entryBinding;  this.keyBinding=TupleBinding.getPrimitiveBinding(String.class);}  }
class C{  public static TableColumn createTableColumn(GuzzContext guzzContext,AbstractObjectMapping mapping,String propName,String colName,String dataType,String columnDataLoader){  Assert.assertNotEmpty(propName,"invalid property.");  if (StringUtil.isEmpty(colName)) {    colName=propName;  }  Table st=mapping.getTable();  TableColumn col=new TableColumn(st);  col.setColName(colName);  col.setPropName(propName);  col.setType(dataType);  col.setAllowInsert(true);  col.setAllowUpdate(true);  col.setLazy(false);  ColumnDataLoader dl=null;  if (StringUtil.notEmpty(columnDataLoader)) {    dl=(ColumnDataLoader)BeanCreator.newBeanInstance(ClassUtil.getClass(columnDataLoader));    dl.configure(mapping,st,col);    guzzContext.registerColumnDataLoader(dl);  }  mapping.initColumnMapping(col,dl);  return col;}  }
class C{  public static AnimationObject createAnimationImage(Image img,int x,int y){  AnimationObject o=new AnimationObject();  o.img=img;  o.motionX=Motion.createLinearMotion(x,x,1);  o.motionX.setStartTime(Long.MAX_VALUE);  o.motionY=Motion.createLinearMotion(y,y,1);  o.motionY.setStartTime(Long.MAX_VALUE);  return o;}  }
class C{  @Override public void clearArrivedMessages(String clientHandle){  db=mqttDb.getWritableDatabase();  String[] selectionArgs=new String[1];  selectionArgs[0]=clientHandle;  int rows=0;  if (clientHandle == null) {    traceHandler.traceDebug(TAG,"clearArrivedMessages: clearing the table");    rows=db.delete(ARRIVED_MESSAGE_TABLE_NAME,null,null);  } else {    traceHandler.traceDebug(TAG,"clearArrivedMessages: clearing the table of " + clientHandle + " messages");    rows=db.delete(ARRIVED_MESSAGE_TABLE_NAME,MqttServiceConstants.CLIENT_HANDLE + "=?",selectionArgs);  }  traceHandler.traceDebug(TAG,"clearArrivedMessages: rows affected = " + rows);  return;}  }
class C{  public String readString() throws IOException {  return new String(readStringBytes());}  }
class C{  public static Type toType(Class type,boolean axistype){  if (axistype)   type=AxisCaster.toAxisTypeClass(type);  return Type.getType(type);}  }
class C{  public void deconfigure() throws CoreException {  IProjectDescription description=getProject().getDescription();  ICommand[] commands=description.getBuildSpec();  for (int i=0; i < commands.length; ++i) {    String builderName=commands[i].getBuilderName();    if (builderName.equals(TLAParsingBuilder.BUILDER_ID) || builderName.equals(PCalDetectingBuilder.BUILDER_ID)) {      ICommand[] newCommands=new ICommand[commands.length - 1];      System.arraycopy(commands,0,newCommands,0,i);      System.arraycopy(commands,i + 1,newCommands,i,commands.length - i - 1);      description.setBuildSpec(newCommands);    }  }  Activator.getDefault().logDebug("Nature removed");}  }
class C{  public static void logFirstStateExit(PanelState fromState,PanelState toState,StateChangeReason reason){  int code;switch (fromState) {case UNDEFINED:case CLOSED:    code=getStateChangeCode(toState,reason,EXIT_CLOSED_TO_STATE_CHANGE_CODES,EXIT_CLOSED_TO_OTHER);  RecordHistogram.recordEnumeratedHistogram("Search.ContextualSearchExitClosed",code,EXIT_CLOSED_TO_BOUNDARY);break;case PEEKED:code=getStateChangeCode(toState,reason,EXIT_PEEKED_TO_STATE_CHANGE_CODES,EXIT_PEEKED_TO_OTHER);RecordHistogram.recordEnumeratedHistogram("Search.ContextualSearchExitPeeked",code,EXIT_PEEKED_TO_BOUNDARY);break;case EXPANDED:code=getStateChangeCode(toState,reason,EXIT_EXPANDED_TO_STATE_CHANGE_CODES,EXIT_EXPANDED_TO_OTHER);RecordHistogram.recordEnumeratedHistogram("Search.ContextualSearchExitExpanded",code,EXIT_EXPANDED_TO_BOUNDARY);break;case MAXIMIZED:code=getStateChangeCode(toState,reason,EXIT_MAXIMIZED_TO_STATE_CHANGE_CODES,EXIT_MAXIMIZED_TO_OTHER);RecordHistogram.recordEnumeratedHistogram("Search.ContextualSearchExitMaximized",code,EXIT_MAXIMIZED_TO_BOUNDARY);break;default :break;}}  }
class C{  public static boolean isAnnotation(int flags){  return (flags & AccAnnotation) != 0;}  }
class C{  private void insertRandomRecord(ISqlTransaction tran,Table table){  DmlStatement insertStatement=createInsertDmlStatement(table);  Row row=createRandomInsertValues(insertStatement,table);  try {    tran.prepareAndExecute(insertStatement.getSql(),insertStatement.getValueArray(row.toArray(table.getColumnNames()),row.toArray(table.getPrimaryKeyColumnNames())));  } catch (  SqlException ex) {    log.info("Failed to insert into {}: {}",table.getName(),ex.getMessage());    if (continueOnError) {      if (debug) {        logRow(row);        log.info("",ex);      }      selectRandomRecord(tran,table);    } else {      throw ex;    }  }}  }
class C{  public static boolean aboveOrEqual(long a,long b){  return Long.compareUnsigned(a,b) >= 0;}  }
class C{  public boolean isChildOf(Node node1,Node node2){  for (  Object o : getEdges(node2)) {    Edge edge=(Edge)(o);    Node sub=Edges.traverseDirected(node2,edge);    if (sub == node1) {      return true;    }  }  return false;}  }
class C{  String validateTurnoutReference(String name){  Turnout t=null;  if (name != null) {    if (name.length() > 0) {      t=InstanceManager.turnoutManagerInstance().getByUserName(name);      if (t != null) {        return name;      }    }    t=InstanceManager.turnoutManagerInstance().getBySystemName(name);  }  if (t == null) {    messageInvalidActionItemName(name,"Turnout");    return null;  }  return name;}  }
class C{  public boolean lessThan(RegisterPriority other){  return ordinal() < other.ordinal();}  }
class C{  public BEShadowBorder3(){  super(new Insets(TOP,LEFT,BOTTOM,RIGHT),org.jb2011.lnf.beautyeye.widget.__Icon9Factory__.getInstance().getBorderIcon_Shadow3());}  }
class C{  @Override public int numReferences(){  return mReferenceLengths.length;}  }
class C{  public static String replaceControlSequence(String origText_){  String cleanText=origText_.replaceAll("@\\^","");  cleanText=cleanText.replaceAll("\\^@","");  cleanText=cleanText.replaceAll("\\^","");  cleanText=cleanText.replaceAll("@ "," ");  return cleanText;}  }
class C{  synchronized boolean isConnected(){  return this.currentHostIndex != NO_CONNECTION_INDEX;}  }
class C{  protected void createModel(){  m=new jmri.jmrit.beantable.sensor.SensorTableDataModel(senManager);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:06.782 -0500",hash_original_method="34F4A4372E44ECCE36EFF0A68D9EEA82",hash_generated_method="06A169190BAFFBFF1D43CAB047683A35") public Reader retrieveArticleBody(int articleNumber,ArticlePointer pointer) throws IOException {  return __retrieve(NNTPCommand.BODY,articleNumber,pointer);}  }
class C{  public boolean isFileTransferHttpSupported(){  return mFileTransferHttp;}  }
class C{  public void custom(String name,Throwing.Function<String,String> formatter){  customLazy(name,null);}  }
class C{  public String NGramMinSizeTipText(){  return "The min N of the NGram.";}  }
class C{  public void testBug16436511() throws Exception {  DatabaseMetaData dbmd=this.conn.getMetaData();  assertEquals("MySQL Connector Java",dbmd.getDriverName());}  }
class C{  public boolean checkConnection(){  try {    return (connection != null) && !connection.isClosed();  } catch (  final SQLException e) {    return false;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:10.968 -0500",hash_original_method="622D19544C973DA41E1BE7D7819B5A41",hash_generated_method="A2F2AD20F127C56B568674E19E7767FA") public final void transform(Matrix matrix){  if (matrix == null) {    throw new IllegalArgumentException("matrix must not be null");  }  nativeTransform(mNativePtr,matrix);}  }
class C{  public void printLayout(String path,int indent,StringBuilder string) throws KeeperException, InterruptedException {  byte[] data=getData(path,null,null,true);  List<String> children=getChildren(path,null,true);  StringBuilder dent=new StringBuilder();  for (int i=0; i < indent; i++) {    dent.append(" ");  }  string.append(dent + path + " ("+ children.size()+ ")"+ NEWL);  if (data != null) {    String dataString=new String(data,StandardCharsets.UTF_8);    if ((!path.endsWith(".txt") && !path.endsWith(".xml")) || path.endsWith(ZkStateReader.CLUSTER_STATE)) {      if (path.endsWith(".xml")) {        dataString=prettyPrint(dataString);      }      string.append(dent + "DATA:\n" + dent+ "    "+ dataString.replaceAll("\n","\n" + dent + "    ")+ NEWL);    } else {      string.append(dent + "DATA: ...supressed..." + NEWL);    }  }  for (  String child : children) {    if (!child.equals("quota")) {      try {        printLayout(path + (path.equals("/") ? "" : "/") + child,indent + 1,string);      } catch (      NoNodeException e) {      }    }  }}  }
class C{  public static SubscriptionAlreadyExistsException convertToApi(org.oscm.internal.types.exception.SubscriptionAlreadyExistsException oldEx){  return convertExceptionToApi(oldEx,SubscriptionAlreadyExistsException.class);}  }
class C{  @Override public void onGuiClosed(){  state=ServerFinderState.CANCELLED;  WurstClient.INSTANCE.analytics.trackEvent("server finder","cancel","gui closed",working);  if (MiscUtils.isInteger(maxThreadsBox.getText())) {    WurstClient.INSTANCE.options.serverFinderThreads=Integer.valueOf(maxThreadsBox.getText());    WurstClient.INSTANCE.files.saveOptions();  }  Keyboard.enableRepeatEvents(false);}  }
class C{  @SuppressWarnings("unchecked") public ArrayDeque(Collection<? extends E> c){  elements=(E[])new Object[countInitSize(c.size())];  front=rear=0;  status=DequeStatus.Empty;  modCount=0;  Iterator<? extends E> it=c.iterator();  while (it.hasNext()) {    addLastImpl(it.next());  }}  }
class C{  private static String[] extractParamNames(Method method){  String paramsName=method.getName() + PARAMETERS_SUFFIX;  String[] codeName=ClassUtil.getStringArrayClassField(method.getDeclaringClass(),paramsName);  if (codeName != null)   return codeName;  String[] name=new String[method.getParameterTypes().length - 1];  for (int i=1; i < name.length; i++)   name[i]="arg" + i;  return name;}  }
class C{  void installListeners(){  Window[] windows=getOwnedWindows();  for (  Window window : windows) {    if (window != null) {      window.removeWindowListener(this);      window.addWindowListener(this);    }  }}  }
class C{  public double[] calc(double[] llpoints,double precision){  double[] res;  if (llpoints.length > 4) {    int[] xpoints=new int[(int)(llpoints.length / 2)];    int[] ypoints=new int[xpoints.length];    for (int i=0, j=0; i < llpoints.length; i+=2, j++) {      xpoints[j]=(int)(llpoints[i] / precision);      ypoints[j]=(int)(llpoints[i + 1] / precision);    }    Cubic[] X=calcNaturalCubic(xpoints.length - 1,xpoints);    Cubic[] Y=calcNaturalCubic(ypoints.length - 1,ypoints);    Polygon p=new Polygon();    p.addPoint((int)Math.round(X[0].eval(0)),(int)Math.round(Y[0].eval(0)));    for (int i=0; i < X.length; i++) {      for (int j=1; j <= steps; j++) {        float u=j / (float)steps;        p.addPoint(Math.round(X[i].eval(u)),Math.round(Y[i].eval(u)));      }    }    res=new double[p.npoints * 2];    for (int i=0, j=0; i < p.npoints; i++, j+=2) {      res[j]=(double)p.xpoints[i] * precision;      res[j + 1]=(double)p.ypoints[i] * precision;    }    p=null;  } else {    res=llpoints;  }  return res;}  }
class C{  public boolean add(E o){  return innerChain.add(o);}  }
class C{  public static int[] allColumn(int[][] m){  int[] result=new int[m.length];  for (int i=0; i < result.length; i++) {    result[i]=-1;  }  int[] count=new int[2];  for (int i=0; i < m.length; i++) {    count[0]=0;    count[1]=0;    for (int j=0; j < m[i].length; j++) {      count[m[j][i]]++;      if (count[0] < j + 1 && count[1] < j + 1) {        break;      }    }    if (count[0] >= m.length || count[1] >= m.length)     result[i]=count[0] > count[1] ? 0 : 1;  }  return result;}  }
class C{  @Override public boolean rowUpdated() throws SQLException {  try {    debugCodeCall("rowUpdated");    return false;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public Note createNote(List<String> interpreterIds,AuthenticationInfo subject) throws IOException {  Note note=new Note(notebookRepo,replFactory,jobListenerFactory,noteSearchService,credentials,this);synchronized (notes) {    notes.put(note.getId(),note);  }  if (interpreterIds != null) {    bindInterpretersToNote(subject.getUser(),note.getId(),interpreterIds);  }  if (subject != null && !"anonymous".equals(subject.getUser())) {    Set<String> owners=new HashSet<String>();    owners.add(subject.getUser());    notebookAuthorization.setOwners(note.getId(),owners);  }  noteSearchService.addIndexDoc(note);  note.persist(subject);  fireNoteCreateEvent(note);  return note;}  }
class C{  static void toast(Context context,CharSequence text,int duration){  Toast toast=Toast.makeText(context,text,duration);  toast.show();}  }
class C{  public boolean isRecording(){  return recordingTrackId != PreferencesUtils.RECORDING_TRACK_ID_DEFAULT;}  }
class C{  public static long[] invgrayI(long[] v){  final int last=v.length - 1;  int o;  for (o=1; o < Long.SIZE; o<<=1) {    for (int i=0; i < last; i++) {      v[i]^=(v[i] >>> o) ^ (v[i + 1] << (Long.SIZE - o));    }    v[last]^=(v[last] >>> o);  }  for (o=1; o <= last; o<<=1) {    for (int i=o; i <= last; i++) {      v[i - o]^=v[i];    }  }  return v;}  }
class C{  public void addedDocument(int commitWithin){  if (docsUpperBound > 0) {    long docs=docsSinceCommit.incrementAndGet();    if (docs == docsUpperBound + 1) {      docsSinceCommit.set(0);      _scheduleCommitWithin(DOC_COMMIT_DELAY_MS);    }  }  _scheduleCommitWithinIfNeeded(commitWithin);}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 1662) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  @Reference(authors="Steinbach, M. and Karypis, G. and Kumar, V.",title="A comparison of document clustering techniques",booktitle="KDD workshop on text mining, 2000",url="http://www-users.itlabs.umn.edu/~karypis/publications/Papers/PDF/doccluster.pdf") public double f1Measure(){  return Util.f1Measure(purity(),inversePurity());}  }
class C{  public void addValue(String key,String val,String comment) throws HeaderCardException {  addHeaderCard(key,new HeaderCard(key,val,comment));}  }
class C{  public Button findCommandComponent(Command c){  if (permanentSideMenu) {    Button b=findCommandComponent(c,permanentSideMenuContainer);    if (b != null) {      return b;    }  }  Button b=sideMenu.findCommandComponent(c);  if (b != null) {    return b;  }  return findCommandComponent(c,this);}  }
class C{  public CountingInputStream(InputStream in){  super(checkNotNull(in));}  }
class C{  @Override public double max(){  QL.require(samples() > 0,EMPTY_SAMPLE_SET);  return max_;}  }
class C{  public DoubleArrayListParameter(OptionID optionID,boolean optional){  super(optionID,optional);}  }
class C{  public TravelDistanceHandler(final double simulationEndTime,final int noOfTimeBins,final Network network){  this(simulationEndTime,noOfTimeBins,network,null,null);  LOGGER.info("No filtering is used, result will include all links, persons from all user groups.");}  }
class C{  @CanIgnoreReturnValue @Deprecated @Override public <T extends B>T putInstance(Class<T> type,T value){  throw new UnsupportedOperationException();}  }
class C{  public CcdRunner(GraphSource graphWrapper,Parameters params){  super(graphWrapper.getGraph(),params,null);}  }
class C{  public Builder fileStore(FileStore store){  return set("fileStore",store);}  }
class C{  public boolean isProvidedByRuntime(){  return true;}  }
class C{  public void tickBlock(BlockPos pos){  List<BlockPos> validCoords=new ArrayList<>();  for (int xOffset=-TICK_RANGE; xOffset <= TICK_RANGE; xOffset++) {    for (int zOffset=-TICK_RANGE; zOffset <= TICK_RANGE; zOffset++) {      if (xOffset == 0 && zOffset == 0)       continue;      if (isValidSwapPosition(pos.add(xOffset,0,zOffset)))       validCoords.add(pos.add(xOffset,0,zOffset));    }  }  if (!validCoords.isEmpty() && !world.isRemote) {    BlockPos toSwap=validCoords.get(rand.nextInt(validCoords.size()));    world.setBlockState(toSwap,stateToSet,1 | 2);  }}  }
class C{  public void computeIntersectionNodes(GeometryGraph geomGraph,int argIndex){  for (Iterator edgeIt=geomGraph.getEdgeIterator(); edgeIt.hasNext(); ) {    Edge e=(Edge)edgeIt.next();    int eLoc=e.getLabel().getLocation(argIndex);    for (Iterator eiIt=e.getEdgeIntersectionList().iterator(); eiIt.hasNext(); ) {      EdgeIntersection ei=(EdgeIntersection)eiIt.next();      RelateNode n=(RelateNode)nodes.addNode(ei.coord);      if (eLoc == Location.BOUNDARY)       n.setLabelBoundary(argIndex); else {        if (n.getLabel().isNull(argIndex))         n.setLabel(argIndex,Location.INTERIOR);      }    }  }}  }
class C{  public static void growBB(AxisAlignedBB target,AxisAlignedBB source,int x,int y,int z){  target.minX=source.minX - x;  target.minY=source.minY - y;  target.minZ=source.minZ - z;  target.maxX=source.maxX + x;  target.maxY=source.maxY + y;  target.maxZ=source.maxZ + z;}  }
class C{  private void handleJsonSignIn(RequestAndResponse requestAndResponse) throws IOException, ServletException {  requestAndResponse.setResponseContentTypeJson();  String userName;  String password;  String csrft;  try {    final JsonNodeHelper json=getJsonNode(requestAndResponse);    userName=json.getString("username");    password=json.getString("password");    csrft=json.getString("csrft");  } catch (  final IOException e) {    returnJson400(requestAndResponse,servletText.errorJson());    return;  }  if (userName != null) {    userName=userName.toLowerCase();  }  if (isTheCsrftWrong(requestAndResponse,csrft)) {    returnJson400(requestAndResponse,servletText.errorWrongCsrft());    return;  }  if (userName == null || userName.isEmpty()) {    returnJson400(requestAndResponse,servletText.errorUsernameMustNotBeBlank());    return;  }  if (password == null || password.isEmpty()) {    returnJson400(requestAndResponse,servletText.errorPasswordMustNotBeBlank());    return;  }  if (!AccountAttributeValidator.isUserNameValid(userName)) {    returnJson400(requestAndResponse,servletText.errorUserNameIsNotValid());    return;  }  if (!AccountAttributeValidator.isPasswordValid(password)) {    returnJson400(requestAndResponse,servletText.errorPasswordIsNotValid());    return;  }  try {    final User user=dbLogic.getUserByUserName(userName);    if (user == null) {      returnJson400(requestAndResponse,servletText.errorNoAccountFound());      return;    }    if (user.getIsAccountClosed()) {      returnJson400(requestAndResponse,servletText.errorAccountIsClosed());      return;    }    final String realPassword=user.getPassword();    if (realPassword == null || !realPassword.equals(DigestUtils.sha1Hex(password))) {      returnJson400(requestAndResponse,servletText.errorPasswordIsIncorrect());      return;    }    mapSessionToUser(requestAndResponse,user.getId());    dbLogic.commit();    returnJson200(requestAndResponse);  } catch (  final PersistenceException e) {    logger.log(Level.INFO,"Exception",e);    returnJson500(requestAndResponse,servletText.errorInternalDatabase());  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.INLINE_ASSOCIATION___MODIFIER_1:    return getModifier_1();case UmplePackage.INLINE_ASSOCIATION___INLINE_ASSOCIATION_END_1:  return getInlineAssociationEnd_1();case UmplePackage.INLINE_ASSOCIATION___ARROW_1:return getArrow_1();case UmplePackage.INLINE_ASSOCIATION___ASSOCIATION_END_1:return getAssociationEnd_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override public void connect(SocketAddress endpoint,int timeout) throws IOException {  super.connect(endpoint,timeout);  init();}  }
class C{  public boolean isValid(){  return new File(this.uri).exists();}  }
class C{  public void tryToReconnect(Context context){  LogCS.e("LOG","Check for socket reconnect");  if (mSocket != null) {    if (mSocket.connected()) {    } else {      connectToSocket(context);    }  } else {    connectToSocket(context);  }}  }
class C{  public static void tweakTipEditorPane(JEditorPane textArea){  if (UIManager.getLookAndFeel().getName().equals("Nimbus")) {    Color selBG=textArea.getSelectionColor();    Color selFG=textArea.getSelectedTextColor();    textArea.setUI(new javax.swing.plaf.basic.BasicEditorPaneUI());    textArea.setSelectedTextColor(selFG);    textArea.setSelectionColor(selBG);  }  textArea.setEditable(false);  textArea.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));  textArea.getCaret().setSelectionVisible(true);  textArea.setBackground(TipUtil.getToolTipBackground());  Font font=UIManager.getFont("Label.font");  if (font == null) {    font=new Font("SansSerif",Font.PLAIN,12);  }  HTMLDocument doc=(HTMLDocument)textArea.getDocument();  doc.getStyleSheet().addRule("body { font-family: " + font.getFamily() + "; font-size: "+ font.getSize()+ "pt; }");}  }
class C{  public void commit(){  sequence.set(cursor.get());  sequenceCache.value=sequence.get();}  }
class C{  private void initializeFeatureStructures(){  int num_blocks=features.getInt(0);  estimated=new float[num_blocks];  precomputable=new float[num_blocks];  Arrays.fill(estimated,Float.NEGATIVE_INFINITY);  Arrays.fill(precomputable,Float.NEGATIVE_INFINITY);  featureSize=features.getInt(4);}  }
class C{  @Override public void drawOutline(Graphics2D g2,CategoryPlot plot,Rectangle2D dataArea){  float x0=(float)dataArea.getX();  float x1=x0 + (float)Math.abs(this.xOffset);  float x3=(float)dataArea.getMaxX();  float x2=x3 - (float)Math.abs(this.xOffset);  float y0=(float)dataArea.getMaxY();  float y1=y0 - (float)Math.abs(this.yOffset);  float y3=(float)dataArea.getMinY();  float y2=y3 + (float)Math.abs(this.yOffset);  GeneralPath clip=new GeneralPath();  clip.moveTo(x0,y0);  clip.lineTo(x0,y2);  clip.lineTo(x1,y3);  clip.lineTo(x3,y3);  clip.lineTo(x3,y1);  clip.lineTo(x2,y0);  clip.closePath();  Stroke outlineStroke=plot.getOutlineStroke();  Paint outlinePaint=plot.getOutlinePaint();  if ((outlineStroke != null) && (outlinePaint != null)) {    g2.setStroke(outlineStroke);    g2.setPaint(outlinePaint);    g2.draw(clip);  }}  }
class C{  public NotificationObject(NotificationObject parent){  this.id=parent.getId();  this.userId=parent.getUserId();  this.isRead=parent.getIsRead();  this.activityId=parent.getActivityId();  this.companyId=parent.getCompanyId();  this.created=parent.getCreated();}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.nist.gov";  String qualifiedName="xml:qualifiedName";  Document doc;  NodeList elementList;  Node testAddr;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagName("employee");  testAddr=elementList.item(0);{    boolean success=false;    try {      ((Element)testAddr).setAttributeNS(namespaceURI,qualifiedName,"newValue");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("throw_NAMESPACE_ERR",success);  }}  }
class C{  protected boolean haveSharedCellsRaw(ObjectMatrix2D other){  if (other instanceof SelectedSparseObjectMatrix2D) {    SelectedSparseObjectMatrix2D otherMatrix=(SelectedSparseObjectMatrix2D)other;    return this.elements == otherMatrix.elements;  } else   if (other instanceof SparseObjectMatrix2D) {    SparseObjectMatrix2D otherMatrix=(SparseObjectMatrix2D)other;    return this.elements == otherMatrix.elements;  }  return false;}  }
class C{  public org.topbraid.spin.model.Query createQuery(Query arq,String uri){  Resource spinQuery=model.createResource(uri);  addNamedGraphClauses(arq,spinQuery);  Resource where=createElementList(arq.getQueryPattern());  spinQuery.addProperty(SP.where,where);  if (arq.isAskType()) {    spinQuery.addProperty(RDF.type,SP.Ask);    addValues(arq,spinQuery);    return spinQuery.as(Ask.class);  } else   if (arq.isConstructType()) {    Resource head=createHead(arq.getConstructTemplate());    spinQuery.addProperty(RDF.type,SP.Construct);    spinQuery.addProperty(SP.templates,head);    addSolutionModifiers(arq,spinQuery);    addValues(arq,spinQuery);    return spinQuery.as(Construct.class);  } else   if (arq.isSelectType()) {    spinQuery.addProperty(RDF.type,SP.Select);    Select select=spinQuery.as(Select.class);    addSelectProperties(arq,spinQuery);    addGroupBy(arq,spinQuery);    addValues(arq,spinQuery);    return select;  } else   if (arq.isDescribeType()) {    spinQuery.addProperty(RDF.type,SP.Describe);    Describe describe=spinQuery.as(Describe.class);    addDescribeProperties(arq,spinQuery);    addSolutionModifiers(arq,spinQuery);    addValues(arq,spinQuery);    return describe;  }  throw new IllegalArgumentException("Unsupported SPARQL query type");}  }
class C{  public <R>R doWithFreshSessionCache(Work<R> work){  try {    com.googlecode.objectify.ObjectifyService.push(com.googlecode.objectify.ObjectifyService.factory().begin());    return work.run();  }  finally {    com.googlecode.objectify.ObjectifyService.pop();  }}  }
class C{  public VisionWorldComponent(final String name){  this(name,new MutableVisionWorldModel());  initAttributes();}  }
class C{  public EventStoreException(String message,Throwable cause){  super(message,cause);}  }
class C{  public static void w(String msg,Object... args){  if (!allowW)   return;  StackTraceElement caller=getCallerStackTraceElement();  String tag=generateTag(caller);  if (sLevel > LEVEL_WARNING) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.w(tag,msg);}  }
class C{  public boolean isMirrored(){  return this != NONE;}  }
class C{  public boolean isTemplate(){  return template;}  }
class C{  public void createPackageContents(){  if (isCreated)   return;  isCreated=true;  packageEClass=createEClass(PACKAGE);  createEReference(packageEClass,PACKAGE__MEMBER);  createEReference(packageEClass,PACKAGE__DOMAIN);  createEReference(packageEClass,PACKAGE__IMPORT);  typeEClass=createEClass(TYPE);  createEReference(typeEClass,TYPE__CONSTRAINT);  createEAttribute(typeEClass,TYPE__ABSTRACT);  createEAttribute(typeEClass,TYPE__VISIBLE);  declarationEClass=createEClass(DECLARATION);  operationEClass=createEClass(OPERATION);  createEReference(operationEClass,OPERATION__PARAMETERS);  propertyEClass=createEClass(PROPERTY);  createEAttribute(propertyEClass,PROPERTY__CONST);  createEAttribute(propertyEClass,PROPERTY__READONLY);  createEAttribute(propertyEClass,PROPERTY__EXTERNAL);  parameterEClass=createEClass(PARAMETER);  createEReference(parameterEClass,PARAMETER__OWNING_OPERATION);  typedElementEClass=createEClass(TYPED_ELEMENT);  createEReference(typedElementEClass,TYPED_ELEMENT__TYPE);  createEReference(typedElementEClass,TYPED_ELEMENT__TYPE_SPECIFIER);  typeSpecifierEClass=createEClass(TYPE_SPECIFIER);  createEReference(typeSpecifierEClass,TYPE_SPECIFIER__TYPE);  createEReference(typeSpecifierEClass,TYPE_SPECIFIER__TYPE_ARGUMENTS);  eventEClass=createEClass(EVENT);  createEAttribute(eventEClass,EVENT__DIRECTION);  enumerationTypeEClass=createEClass(ENUMERATION_TYPE);  createEReference(enumerationTypeEClass,ENUMERATION_TYPE__ENUMERATOR);  primitiveTypeEClass=createEClass(PRIMITIVE_TYPE);  createEReference(primitiveTypeEClass,PRIMITIVE_TYPE__BASE_TYPE);  complexTypeEClass=createEClass(COMPLEX_TYPE);  createEReference(complexTypeEClass,COMPLEX_TYPE__FEATURES);  createEReference(complexTypeEClass,COMPLEX_TYPE__SUPER_TYPES);  enumeratorEClass=createEClass(ENUMERATOR);  createEReference(enumeratorEClass,ENUMERATOR__OWNING_ENUMERATION);  createEAttribute(enumeratorEClass,ENUMERATOR__LITERAL_VALUE);  typeConstraintEClass=createEClass(TYPE_CONSTRAINT);  createEAttribute(typeConstraintEClass,TYPE_CONSTRAINT__VALUE);  typeParameterEClass=createEClass(TYPE_PARAMETER);  createEReference(typeParameterEClass,TYPE_PARAMETER__BOUND);  parameterizedTypeEClass=createEClass(PARAMETERIZED_TYPE);  createEReference(parameterizedTypeEClass,PARAMETERIZED_TYPE__PARAMETER);  packageMemberEClass=createEClass(PACKAGE_MEMBER);  createEAttribute(packageMemberEClass,PACKAGE_MEMBER__ID);  rangeConstraintEClass=createEClass(RANGE_CONSTRAINT);  createEAttribute(rangeConstraintEClass,RANGE_CONSTRAINT__LOWER_BOUND);  createEAttribute(rangeConstraintEClass,RANGE_CONSTRAINT__UPPER_BOUND);  domainEClass=createEClass(DOMAIN);  createEAttribute(domainEClass,DOMAIN__DOMAIN_ID);  typeAliasEClass=createEClass(TYPE_ALIAS);  annotationEClass=createEClass(ANNOTATION);  createEReference(annotationEClass,ANNOTATION__PROPERTIES);  createEReference(annotationEClass,ANNOTATION__TARGETS);  annotatableElementEClass=createEClass(ANNOTATABLE_ELEMENT);  createEReference(annotatableElementEClass,ANNOTATABLE_ELEMENT__ANNOTATIONS);  arrayTypeSpecifierEClass=createEClass(ARRAY_TYPE_SPECIFIER);  createEAttribute(arrayTypeSpecifierEClass,ARRAY_TYPE_SPECIFIER__SIZE);  directionEEnum=createEEnum(DIRECTION);}  }
class C{  public NotificationChain basicSetSource(Vertex newSource,NotificationChain msgs){  msgs=eBasicSetContainer((InternalEObject)newSource,SGraphPackage.TRANSITION__SOURCE,msgs);  return msgs;}  }
class C{  private void readHeader() throws IOException {  byte[] signatureBytes=new byte[8];  for (int i=0; i < 8; i++)   signatureBytes[i]=plogStream.readByte();  String stringifiedHeader=new String(signatureBytes,"US-ASCII");  if (!stringifiedHeader.equals("PLOG\n \r ")) {    throw new IOException("File header does not denote a PLOG file.");  }  int major_file_version=readSwappedInteger(plogStream);  int minor_file_version=readSwappedInteger(plogStream);  if (major_file_version != 1 || minor_file_version != 1) {    throw new IOException("File header indicates version " + major_file_version + "."+ minor_file_version+ "; but it should be 1.1");  }  logger.info("Header and file version OK");  return;}  }
class C{  public void open(HttpRoute route,HttpContext context,HttpParams params) throws IOException {  if (route == null) {    throw new IllegalArgumentException("Route must not be null.");  }  if (params == null) {    throw new IllegalArgumentException("Parameters must not be null.");  }  if ((this.tracker != null) && this.tracker.isConnected()) {    throw new IllegalStateException("Connection already open.");  }  this.tracker=new RouteTracker(route);  final HttpHost proxy=route.getProxyHost();  connOperator.openConnection(this.connection,(proxy != null) ? proxy : route.getTargetHost(),route.getLocalAddress(),context,params);  RouteTracker localTracker=tracker;  if (localTracker == null) {    throw new IOException("Request aborted");  }  if (proxy == null) {    localTracker.connectTarget(this.connection.isSecure());  } else {    localTracker.connectProxy(proxy,this.connection.isSecure());  }}  }
class C{  public AVListImpl(){}  }
class C{  private static void appendNoDefaultValue(Document htmldoc,Element optdd){  Element p=htmldoc.createElement(HTMLUtil.HTML_P_TAG);  p.appendChild(htmldoc.createTextNode(HEADER_DEFAULT_VALUE));  p.appendChild(htmldoc.createTextNode(NO_DEFAULT_VALUE));  optdd.appendChild(p);}  }
class C{  public void charactersRaw(char ch[],int start,int length) throws org.xml.sax.SAXException {  if (isOutsideDocElem() && org.apache.xml.utils.XMLCharacterRecognizer.isWhiteSpace(ch,start,length))   return;  String s=new String(ch,start,length);  append(m_doc.createProcessingInstruction("xslt-next-is-raw","formatter-to-dom"));  append(m_doc.createTextNode(s));}  }
class C{  public void addTightSourceNode(ASTNode reference){  fTightSourceRangeNodes.add(reference);  List<StructuralPropertyDescriptor> properties=reference.structuralPropertiesForType();  for (Iterator<StructuralPropertyDescriptor> iterator=properties.iterator(); iterator.hasNext(); ) {    StructuralPropertyDescriptor descriptor=iterator.next();    if (descriptor.isChildProperty()) {      ASTNode child=(ASTNode)reference.getStructuralProperty(descriptor);      if (child != null && isExtending(child,reference)) {        addTightSourceNode(child);      }    } else     if (descriptor.isChildListProperty()) {      List<? extends ASTNode> children=ASTNodes.getChildListProperty(reference,(ChildListPropertyDescriptor)descriptor);      for (Iterator<? extends ASTNode> iterator2=children.iterator(); iterator2.hasNext(); ) {        ASTNode child=iterator2.next();        if (isExtending(child,reference)) {          addTightSourceNode(child);        }      }    }  }}  }
class C{  public T next(){  SQLException sqlException=null;  try {    T result=nextThrow();    if (result != null) {      return result;    }  } catch (  SQLException e) {    sqlException=e;  }  last=null;  closeQuietly();  throw new IllegalStateException("Could not get next result for " + dataClass,sqlException);}  }
class C{  public void clearIO(){  clearInputs();  clearOutputs();}  }
class C{  @Override public PrintStream openStream(String filename){  return stream;}  }
class C{  public String queryString(int what){  return EGL14.eglQueryString(mEGLDisplay,what);}  }
class C{  @Override public void populateDAG(DAG dag,Configuration conf){  IntegerOperator intInput=dag.addOperator("intInput",new IntegerOperator());  DevNullCounter oper=dag.addOperator("oper",new DevNullCounter());  dag.getMeta(oper).getMeta(oper.data).getAttributes().put(PortContext.QUEUE_CAPACITY,QUEUE_CAPACITY);  dag.addStream("dev",intInput.integer_data,oper.data).setLocality(locality);}  }
class C{  static boolean send(String serviceName,LockGrantorId theLockGrantorId,DM dm){  InternalDistributedMember recipient=theLockGrantorId.getLockGrantorMember();  NonGrantorDestroyedProcessor processor=new NonGrantorDestroyedProcessor(dm,recipient);  NonGrantorDestroyedMessage.send(serviceName,recipient,dm,processor);  try {    processor.waitForRepliesUninterruptibly();  } catch (  ReplyException e) {    e.handleAsUnexpected();  }  return processor.informedGrantor();}  }
class C{  public static void main(String[] argv){  runClusterer(new MakeDensityBasedClusterer(),argv);}  }
class C{  public Vector3d div(double x,double y,double z){  this.x/=x;  this.y/=y;  this.z/=z;  return this;}  }
class C{  private long[] randomSubspace(final int alldim,final int mindim,final int maxdim,final Random rand){  long[] dimset=BitsUtil.zero(alldim);  int[] dims=new int[alldim];  for (int d=0; d < alldim; d++) {    dims[d]=d;  }  int subdim=mindim + rand.nextInt(maxdim - mindim);  for (int d=0; d < alldim - subdim; d++) {    int s=rand.nextInt(alldim - d);    BitsUtil.setI(dimset,dims[s]);    dims[s]=dims[alldim - d - 1];  }  return dimset;}  }
class C{  private void onBluetoothDisconnectRequested(Context context,Intent intent){  BluetoothDevice device;  device=(BluetoothDevice)intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);  log.info("Bluetooth broadcast: disconnected! (from " + device + ")");}  }
class C{  private int epochMonthToYear(int epochMonth){  return (epochMonth + hijrahStartEpochMonth) / 12;}  }
class C{  public CircleView(Context context){  this(context,null);}  }
class C{  public MailBuilder html(String html){  return param("html",html);}  }
class C{  public void initialize(){  int numFactors=this.updateFunction.getNumFactors();  int maxLag=this.updateFunction.getMaxLag();  if (initSync) {    if (syncInitialization == null) {      syncInitialization=new double[maxLag + 1][numFactors];      historyArray=new double[maxLag + 1][numFactors];      getInitializer().initialize(syncInitialization);    }    for (int i=0; i < historyArray.length; i++) {      for (int j=0; j < historyArray[0].length; j++) {        if (getDishModel() == null) {          historyArray[i][j]=syncInitialization[i][j];        } else {          historyArray[i][j]=getDishModel().bumpInitialization(syncInitialization[i][j]);        }      }    }  } else {    if (historyArray == null) {      historyArray=new double[maxLag + 1][numFactors];    }    getInitializer().initialize(historyArray);  }  if (false) {    System.out.println("\nHistory array:");    for (    double[] aHistoryArray : historyArray) {      for (int j=0; j < historyArray[0].length; j++) {        System.out.print(aHistoryArray[j] + "\t");      }      System.out.println();    }    System.out.println();  }  this.step=-1;}  }
class C{  public DeleteNodesItem clone(){  DeleteNodesItem result=new DeleteNodesItem();  result.NodeId=NodeId;  result.DeleteTargetReferences=DeleteTargetReferences;  return result;}  }
class C{  public void readGroup(AttributeSet attrs){  TypedArray a=mContext.obtainStyledAttributes(attrs,com.android.internal.R.styleable.MenuGroup);  groupId=a.getResourceId(com.android.internal.R.styleable.MenuGroup_id,defaultGroupId);  groupCategory=a.getInt(com.android.internal.R.styleable.MenuGroup_menuCategory,defaultItemCategory);  groupOrder=a.getInt(com.android.internal.R.styleable.MenuGroup_orderInCategory,defaultItemOrder);  groupCheckable=a.getInt(com.android.internal.R.styleable.MenuGroup_checkableBehavior,defaultItemCheckable);  groupVisible=a.getBoolean(com.android.internal.R.styleable.MenuGroup_visible,defaultItemVisible);  groupEnabled=a.getBoolean(com.android.internal.R.styleable.MenuGroup_enabled,defaultItemEnabled);  a.recycle();}  }
class C{  private RhinoScriptBuilder initScriptBuilder(){  try {    RhinoScriptBuilder builder=null;    if (scope == null) {      final String scriptInit="var exports = {};";      builder=RhinoScriptBuilder.newChain().evaluateChain(scriptInit,"initSass").evaluateChain(getScriptAsStream(),DEFAULT_SASS_JS);      scope=builder.getScope();    } else {      builder=RhinoScriptBuilder.newChain(scope);    }    return builder;  } catch (  final IOException ex) {    throw new WroRuntimeException("Failed reading javascript sass.js",ex);  }}  }
class C{  protected String invoke(String path,DaemonParameters parameters) throws DaemonException, IOException {  FormContentType contentType=null;  UrlEncodedFormWriter urlEncodedFormWriter=null;  URL invokeURL;  if (this.url.toString().endsWith("/")) {    invokeURL=new URL(this.url + path);  } else {    invokeURL=new URL(this.url + "/" + path);  }  HttpURLConnection connection=(HttpURLConnection)invokeURL.openConnection();  connection.setAllowUserInteraction(false);  connection.setDoInput(true);  connection.setUseCaches(false);  if (parameters == null) {    connection.setDoOutput(false);    connection.setRequestMethod("GET");  } else {    connection.setDoOutput(true);    connection.setRequestMethod("POST");    if (parameters.isMultipartForm()) {      contentType=new MultipartFormContentType();      connection.setChunkedStreamingMode(0);    } else {      contentType=new UrlEncodedFormContentType();      urlEncodedFormWriter=new UrlEncodedFormWriter();      for (      Map.Entry<String,String> entry : parameters.getParameters().entrySet()) {        urlEncodedFormWriter.addField(entry.getKey(),entry.getValue());      }      connection.setRequestProperty("Content-Length",String.valueOf(urlEncodedFormWriter.getLength()));    }  }  if (contentType != null) {    connection.setRequestProperty("Content-Type",contentType.getContentType());  }  if (this.userAgent != null) {    connection.setRequestProperty("User-Agent",this.userAgent);  }  if (this.username != null) {    String authorization=toAuthorization(this.username,this.password);    connection.setRequestProperty("Authorization",authorization);  }  connection.connect();  if (contentType instanceof MultipartFormContentType) {    MultipartFormWriter writer=new MultipartFormWriter((MultipartFormContentType)contentType,connection.getOutputStream());    for (    Map.Entry<String,String> entry : parameters.getParameters().entrySet()) {      writer.writeField(entry.getKey(),entry.getValue());    }    for (    Map.Entry<String,String> entry : parameters.getFiles().entrySet()) {      writer.writeFile(entry.getKey(),"application/octet-stream",fileHandler.getName(entry.getValue()),fileHandler.getInputStream(entry.getValue()));    }    writer.close();  } else   if (contentType instanceof UrlEncodedFormContentType) {    urlEncodedFormWriter.write(connection.getOutputStream());  }  String response;  try {    getLogger().info("Trying to read input data",this.getClass().getName());    response=toString(connection.getInputStream(),MANAGER_CHARSET);  } catch (  IOException e) {    if (connection.getResponseCode() == 401) {      throw new DaemonException("The username and password you provided are" + " not correct (error 401)",e);    } else     if (connection.getResponseCode() == 403) {      throw new DaemonException("The username you provided is not allowed to " + "use the text-based Cargo daemon manager (error 403)",e);    } else {      throw new DaemonException(connection.getResponseMessage(),e);    }  }  getLogger().info("Response is " + response,this.getClass().getName());  if (!response.startsWith("OK -")) {    String scriptEndString="</script>";    int scriptEnd=response.indexOf(scriptEndString);    if (scriptEnd != -1) {      response=response.substring(scriptEnd + scriptEndString.length()).trim();    }    throw new DaemonException("Failed parsing response for " + invokeURL + ". Response was: "+ response);  }  return response;}  }
class C{  public void update(int length,long ntpts,long rtpts) throws IOException {  packetCount+=1;  octetCount+=length;  setLong(packetCount,20,24);  setLong(octetCount,24,28);  now=SystemClock.elapsedRealtime();  delta+=oldnow != 0 ? now - oldnow : 0;  oldnow=now;  if (interval > 0) {    if (delta >= interval) {      send(ntpts,rtpts);      delta=0;    }  }}  }
class C{  private void placePolygonHoles(EdgeRing shell,List minEdgeRings){  for (Iterator it=minEdgeRings.iterator(); it.hasNext(); ) {    MinimalEdgeRing er=(MinimalEdgeRing)it.next();    if (er.isHole()) {      er.setShell(shell);    }  }}  }
class C{  public void timingEvent(float fraction){  if (!pastFirstTurn) {    if (keyFrames.getInterval(fraction) == 1) {      turn();      pastFirstTurn=true;    }  } else   if (!pastSecondTurn) {    if (keyFrames.getInterval(fraction) == 3) {      turn();      pastSecondTurn=true;    }  } else   if (!pastThirdTurn) {    if (keyFrames.getInterval(fraction) == 5) {      turn();      pastThirdTurn=true;    }  } else   if (!pastFourthTurn) {    if (keyFrames.getInterval(fraction) == 7) {      turn();      pastFourthTurn=true;    }  }}  }
class C{  public static boolean isQwertyDevice(){  return qwertyDevice;}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildQuicksandArea(zone);}  }
class C{  public AttachAPINotFoundException(final Throwable cause){  super(cause);}  }
class C{  public boolean reportDeprecated(Environment env){  return false;}  }
class C{  public DefaultVirtualTerminal(TerminalSize initialTerminalSize){  this.regularTextBuffer=new TextBuffer();  this.privateModeTextBuffer=new TextBuffer();  this.dirtyTerminalCells=new TreeSet<TerminalPosition>();  this.listeners=new ArrayList<VirtualTerminalListener>();  this.inputQueue=new LinkedBlockingQueue<KeyStroke>();  this.activeModifiers=EnumSet.noneOf(SGR.class);  this.activeForegroundColor=TextColor.ANSI.DEFAULT;  this.activeBackgroundColor=TextColor.ANSI.DEFAULT;  this.currentTextBuffer=regularTextBuffer;  this.wholeBufferDirty=false;  this.terminalSize=initialTerminalSize;  this.cursorVisible=true;  this.cursorPosition=TerminalPosition.TOP_LEFT_CORNER;  this.savedCursorPosition=TerminalPosition.TOP_LEFT_CORNER;  this.backlogSize=1000;}  }
class C{  void reset(){  System.arraycopy(icb,0,counter,0,icb.length);  counterSave=null;}  }
class C{  public void addTrial(long n,long startTime,long endTime){  ArrayList<Long> trials=timings.get(n);  if (trials == null) {    trials=new ArrayList<Long>();    timings.put(n,trials);  }  trials.add(new Long(endTime - startTime));}  }
class C{  public CViewIconNode(final INaviView view){  Preconditions.checkNotNull(view,"IE01823: View argument can not be null");  m_view=view;}  }
class C{  protected boolean onHungry(){  if ("food".equals(getIdea())) {    if (!stopped()) {      return true;    }  } else {    if ((hunger % 10) != 0) {      return false;    }  }  return searchForFood();}  }
class C{  public HttpServletResponseRecorder(HttpServletResponse response){  super(response);}  }
class C{  public ByteBuffer buildPacket(int encap,short destUdp,short srcUdp){  ByteBuffer result=ByteBuffer.allocate(MAX_LENGTH);  fillInPacket(encap,Inet4Address.ALL,Inet4Address.ANY,destUdp,srcUdp,result,DHCP_BOOTREQUEST,mBroadcast);  result.flip();  return result;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodesetprefix01.class,args);}  }
class C{  public boolean isEOM(){  return (flags & FLAG_EOM) != 0;}  }
class C{  public void writeListEnd() throws IOException {  print("</list>");}  }
class C{  public T webImage(String url){  return webImage(url,true,false,0xFF000000);}  }
class C{  public static byte[] buildNalUnit(byte[] data,int offset,int length){  byte[] nalUnit=new byte[length + NAL_START_CODE.length];  System.arraycopy(NAL_START_CODE,0,nalUnit,0,NAL_START_CODE.length);  System.arraycopy(data,offset,nalUnit,NAL_START_CODE.length,length);  return nalUnit;}  }
class C{  protected void postEvent2V(Object event){  eventRegister.postEvent2V(event);}  }
class C{  public Shape triangle_right(float x,float y,float height){  m_path.reset();  m_path.moveTo(x,y + height);  m_path.lineTo(x + height,y + height / 2);  m_path.lineTo(x,y);  m_path.closePath();  return m_path;}  }
class C{  public static int rateCleanness(ParserInfo info){  if (info.clean.isEmpty()) {    return -1;  }  int rate=0;  int words=info.clean.split(" ").length;  int seps=info.clean.split("[_.-]").length - 1;  int uc=info.clean.replaceAll("[^A-Z]","").length();  int lc=info.clean.replaceAll("[A-Z]","").length();  double cleaned=100 - info.clean.length() * 100 / info.name.length();  int cc=0;  Pattern pattern=Pattern.compile("[A-Z][a-z]");  Matcher matcher=pattern.matcher(info.clean);  while (matcher.find()) {    cc++;  }  rate=cc * 20 + (10 - words * 2) * 2 + (seps * -20) - info.clean.length() * 2 + (int)cleaned;  if (!info.year.isEmpty()) {    rate+=20;  }  LOGGER.trace(info + " - Rate:" + rate+ "    PERC:"+ cleaned+ " LEN:"+ info.clean.length()+ " WRD:"+ words+ " UC:"+ uc+ " LC:"+ lc+ " CC:"+ cc+ " SEP:"+ seps);  return rate;}  }
class C{  public GridDataGenerator(ContinuousDistribution noiseSource,int... dimensions){  this(noiseSource,new Random(),dimensions);}  }
class C{  public int importKeys(List<ECKey> keys){  return basic.importKeys(keys);}  }
class C{  public void trace(Object message){  log(Level.FINEST,String.valueOf(message),null);}  }
class C{  public double classifyInstance(Instance instance) throws Exception {  double[] dist=distributionForInstance(instance);  if (dist == null) {    throw new Exception("Null distribution predicted");  }switch (instance.classAttribute().type()) {case Attribute.NOMINAL:    double max=0;  int maxIndex=0;for (int i=0; i < dist.length; i++) {  if (dist[i] > max) {    maxIndex=i;    max=dist[i];  }}if (max > 0) {return maxIndex;} else {}case Attribute.NUMERIC:return dist[0];default :return -1;}}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case TypesPackage.TANNOTATION_STRING_ARGUMENT___GET_ARG_AS_STRING:    return getArgAsString();}return super.eInvoke(operationID,arguments);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:05.193 -0500",hash_original_method="DEB75D9E243CF808689902CC0AE95AB4",hash_generated_method="57029F4FBEA51285CEB45FD521D3BF60") private T[] ensureCapacity(int minCapacity){  if (tmp.length < minCapacity) {    int newSize=minCapacity;    newSize|=newSize >> 1;    newSize|=newSize >> 2;    newSize|=newSize >> 4;    newSize|=newSize >> 8;    newSize|=newSize >> 16;    newSize++;    if (newSize < 0)     newSize=minCapacity; else     newSize=Math.min(newSize,a.length >>> 1);    @SuppressWarnings({"unchecked","UnnecessaryLocalVariable"}) T[] newArray=(T[])new Object[newSize];    tmp=newArray;  }  return tmp;}  }
class C{  public boolean isSetVersion(){  return this.version != null;}  }
class C{  public ClientRegionFactoryImpl(GemFireCacheImpl cache,String refid){  this.cache=cache;  RegionAttributes ra=cache.getRegionAttributes(refid);  if (ra == null) {    throw new IllegalStateException("The named region attributes \"" + refid + "\" has not been defined.");  }  this.attrsFactory=new AttributesFactory<K,V>(ra);  initAttributeFactoryDefaults();}  }
class C{  public GuacamoleCredentialsException(Throwable cause,CredentialsInfo credentialsInfo){  super(cause);  this.credentialsInfo=credentialsInfo;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:58.859 -0500",hash_original_method="4DC647D2F13B88E4867C33AA162D4CA1",hash_generated_method="4DC647D2F13B88E4867C33AA162D4CA1") boolean _stateIsWont(int option){  return !_stateIsWill(option);}  }
class C{  public String[] array(){  String[] list=new String[size()];  for (int i=0; i < size(); i++) {    list[i]=get(i);  }  return list;}  }
class C{  public LocationOperand(int index){  if (VM.VerifyAssertions)   VM._assert(index <= 0);  type=SPILL_ACCESS;  spillOffset=index;}  }
class C{  @Override public void writeToParcel(Parcel dest,int flags){  if (DBG)   log("writeToParcel(Parcel, int): " + toString());  dest.writeInt(mMcc);  dest.writeInt(mMnc);  dest.writeInt(mCi);  dest.writeInt(mPci);  dest.writeInt(mTac);}  }
class C{  private static DefaultSampleValues parseTrex(ParsableByteArray trex){  trex.setPosition(FULL_ATOM_HEADER_SIZE + 4);  int defaultSampleDescriptionIndex=trex.readUnsignedIntToInt() - 1;  int defaultSampleDuration=trex.readUnsignedIntToInt();  int defaultSampleSize=trex.readUnsignedIntToInt();  int defaultSampleFlags=trex.readInt();  return new DefaultSampleValues(defaultSampleDescriptionIndex,defaultSampleDuration,defaultSampleSize,defaultSampleFlags);}  }
class C{  protected void alert(byte level,byte description){  if (logger != null) {    logger.println("Alert.alert: " + level + " "+ description);  }  this.alert[0]=level;  this.alert[1]=description;}  }
class C{  public Path tmpFile(){  return tmpFile;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:12.826 -0500",hash_original_method="98470A6BD6E1C018549BCC7706D1DEF2",hash_generated_method="54487B663FB40F0AC0F04BC7B3F08FC1") public void stop(){synchronized (this.messageQueue) {    this.isRunning=false;    this.messageQueue.notifyAll();    sock.close();  }}  }
class C{  public static void main(String[] args) throws UnknownHostException {  SpringApplication app=new SpringApplication(BarApp.class);  SimpleCommandLinePropertySource source=new SimpleCommandLinePropertySource(args);  addDefaultProfile(app,source);  Environment env=app.run(args).getEnvironment();  log.info("\n----------------------------------------------------------\n\t" + "Application '{}' is running! Access URLs:\n\t" + "Local: \t\thttp://127.0.0.1:{}\n\t"+ "External: \thttp://{}:{}\n----------------------------------------------------------",env.getProperty("spring.application.name"),env.getProperty("server.port"),InetAddress.getLocalHost().getHostAddress(),env.getProperty("server.port"));  String configServerStatus=env.getProperty("configserver.status");  log.info("\n----------------------------------------------------------\n\t" + "Config Server: \t{}\n----------------------------------------------------------",configServerStatus == null ? "Not found or not setup for this application" : configServerStatus);}  }
class C{  public double computeMinOuterProduct(double[][] A,double[][] B,int rows,int cols){  double min=Double.MAX_VALUE;  for (int i=0; i < rows; i++) {    double val1=A[i][0];    if (val1 != 0 || min <= 0)     for (int j=0; j < cols; j++) {      double val2=B[0][j];      double val3=val1 * val2;      min=Math.min(min,val3);    }  }  return min;}  }
class C{  private void writeStart(OutputNode node) throws Exception {  writeComment(node);  writeName(node);  writeAttributes(node);  writeNamespaces(node);}  }
class C{  public static BigDecimal createBigDecimal(String str){  if (str == null) {    return null;  }  if (StringUtils.isBlank(str)) {    throw new NumberFormatException("A blank string is not a valid number");  }  return new BigDecimal(str);}  }
class C{  @ObjectiveCName("formatContentTextWithSenderId:withContentType:withText:withRelatedUid:withIsChannel:") public String formatContentText(int senderId,ContentType contentType,String text,int relatedUid,boolean isChannel){  String groupKey=isChannel ? "channels" : "groups";switch (contentType) {case TEXT:    return text;case DOCUMENT:  if (text == null || text.length() == 0) {    return get("content.document");  }return text;case DOCUMENT_PHOTO:return get("content.photo");case DOCUMENT_VIDEO:return get("content.video");case DOCUMENT_AUDIO:return get("content.audio");case CONTACT:return get("content.contact");case LOCATION:return get("content.location");case STICKER:if (text != null && !"".equals(text)) {return text + " " + get("content.sticker");} else {return get("content.sticker");}case SERVICE:return text;case SERVICE_REGISTERED:return getTemplateNamed(senderId,"content.service.registered.compact").replace("{app_name}",getAppName());case SERVICE_CREATED:return getTemplateNamed(senderId,"content.service." + groupKey + ".created");case SERVICE_ADD:return getTemplateNamed(senderId,"content.service." + groupKey + ".invited").replace("{name_added}",getSubjectName(relatedUid));case SERVICE_LEAVE:return getTemplateNamed(senderId,"content.service." + groupKey + ".left");case SERVICE_KICK:return getTemplateNamed(senderId,"content.service." + groupKey + ".kicked").replace("{name_kicked}",getSubjectName(relatedUid));case SERVICE_AVATAR:return getTemplateNamed(senderId,"content.service." + groupKey + ".avatar_changed");case SERVICE_AVATAR_REMOVED:return getTemplateNamed(senderId,"content.service." + groupKey + ".avatar_removed");case SERVICE_TITLE:return getTemplateNamed(senderId,"content.service." + groupKey + ".title_changed.compact");case SERVICE_TOPIC:return getTemplateNamed(senderId,"content.service." + groupKey + ".topic_changed.compact");case SERVICE_ABOUT:return getTemplateNamed(senderId,"content.service." + groupKey + ".about_changed.compact");case SERVICE_JOINED:return getTemplateNamed(senderId,"content.service." + groupKey + ".joined");case SERVICE_CALL_ENDED:return get("content.service.calls.ended");case SERVICE_CALL_MISSED:return get("content.service.calls.missed");case NONE:return "";default :case UNKNOWN_CONTENT:return get("content.unsupported");}}  }
class C{  @Override public void doAction(){  if (getAutomationItem() != null) {    Train train=getAutomationItem().getTrain();    if (train == null || !train.isBuilt() || train.getRoute() == null) {      finishAction(false);    } else {      RouteLocation rl=getAutomationItem().getRouteLocation();      for (      RouteLocation routeLocation : train.getRoute().getLocationsBySequenceList()) {        if (routeLocation == rl) {          finishAction(false);          break;        }        if (train.getCurrentLocation() == routeLocation) {          finishAction(true);          break;        }      }    }  }}  }
class C{  public boolean relocateCurrentLegRoute(Leg leg,Person person,int currentLinkIndex,Id<Link> toLinkId,double time){  Route route=leg.getRoute();  if (!(route instanceof NetworkRoute)) {    log.warn("route not instance of NetworkRoute");    return false;  }  NetworkRoute oldRoute=(NetworkRoute)route;  List<Id<Link>> oldLinkIds=getRouteLinkIds(oldRoute);  Id<Link> currentLinkId=oldLinkIds.get(currentLinkIndex);  final Link startLink=network.getLinks().get(currentLinkId);  final Link endLink=network.getLinks().get(toLinkId);  Vehicle vehicle=null;  Path path=this.pathCalculator.calcLeastCostPath(startLink.getToNode(),endLink.getFromNode(),time,person,vehicle);  List<Id<Link>> newLinkIds=new ArrayList<Id<Link>>();  if (currentLinkIndex > 0) {    newLinkIds.addAll(oldLinkIds.subList(1,currentLinkIndex + 1));  }  if (newLinkIds.size() > 0 && path.links.size() > 0 && newLinkIds.get(newLinkIds.size() - 1).equals(path.links.get(path.links.size() - 1))) {    newLinkIds.remove(newLinkIds.size() - 1);  }  newLinkIds.addAll(NetworkUtils.getLinkIds(path.links));  oldRoute.setLinkIds(oldRoute.getStartLinkId(),newLinkIds,toLinkId);  return true;}  }
class C{  public static short cmpCRC(final byte[] b){  int work=0xffff;  for (int i=0; i < b.length; i++) {    work=(crcTable[((work >> 8)) & 0xff] ^ (work << 8) ^ (b[i] & 0xff)) & 0xffff;  }  return (short)work;}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (!isSummary() && getPA_Measure_ID() == 0) {    log.saveError("FillMandatory",Msg.getElement(getCtx(),"PA_Measure_ID"));    return false;  }  if (isSummary() && getPA_Measure_ID() != 0)   setPA_Measure_ID(0);  if ((newRecord || is_ValueChanged("AD_User_ID") || is_ValueChanged("AD_Role_ID")) && getAD_User_ID() != 0) {    MUser user=MUser.get(getCtx(),getAD_User_ID());    MRole[] roles=user.getRoles(getAD_Org_ID());    if (roles.length == 0)     setAD_Role_ID(0); else     if (roles.length == 1)     setAD_Role_ID(roles[0].getAD_Role_ID()); else {      int AD_Role_ID=getAD_Role_ID();      if (AD_Role_ID != 0) {        boolean found=false;        for (int i=0; i < roles.length; i++) {          if (AD_Role_ID == roles[i].getAD_Role_ID()) {            found=true;            break;          }        }        if (!found)         AD_Role_ID=0;      }      if (AD_Role_ID == 0)       setAD_Role_ID(roles[0].getAD_Role_ID());    }  }  return true;}  }
class C{  public void addNewError(FeaturesObjectTypesEnum type,String errorID){  FeaturesStructure list=this.collection.get(type);  if (list == null) {    list=new FeaturesStructure();    this.collection.put(type,list);  }  if (list.errors == null) {    list.errors=new ArrayList<>();  }  list.errors.add(errorID);}  }
class C{  private static boolean[] createSafeOctets(String safeChars){  int maxChar=-1;  char[] safeCharArray=safeChars.toCharArray();  for (  char c : safeCharArray) {    maxChar=Math.max(c,maxChar);  }  boolean[] octets=new boolean[maxChar + 1];  for (  char c : safeCharArray) {    octets[c]=true;  }  return octets;}  }
class C{  @SuppressLint("NewApi") public LongOsmElementMap(LongOsmElementMap<? extends V> map){  m_mask=map.m_mask;  m_fillFactor=map.m_fillFactor;  m_threshold=map.m_threshold;  m_size=map.m_size;  removedKey=map.removedKey;  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD) {    m_data=Arrays.copyOf(map.m_data,map.m_data.length);  } else {    m_data=new OsmElement[map.m_data.length];    for (int i=0; i < m_data.length; i++) {      m_data[i]=map.m_data[i];    }  }}  }
class C{  public JasperException(String reason,Throwable exception){  super(reason,exception);}  }
class C{  @SuppressWarnings("deprecation") public static LocalVariableMap[] readResultFile(JobConf job,String fname) throws DMLRuntimeException, IOException {  HashMap<Long,LocalVariableMap> tmp=new HashMap<Long,LocalVariableMap>();  FileSystem fs=FileSystem.get(job);  Path path=new Path(fname);  LongWritable key=new LongWritable();  Text value=new Text();  int countAll=0;  for (  Path lpath : MatrixReader.getSequenceFilePaths(fs,path)) {    SequenceFile.Reader reader=new SequenceFile.Reader(FileSystem.get(job),lpath,job);    try {      while (reader.next(key,value)) {        if (!tmp.containsKey(key.get()))         tmp.put(key.get(),new LocalVariableMap());        Object[] dat=ProgramConverter.parseDataObject(value.toString());        tmp.get(key.get()).put((String)dat[0],(Data)dat[1]);        countAll++;      }    }  finally {      if (reader != null)       reader.close();    }  }  LOG.debug("Num remote worker results (before deduplication): " + countAll);  LOG.debug("Num remote worker results: " + tmp.size());  return tmp.values().toArray(new LocalVariableMap[0]);}  }
class C{  void submit(final long ts,final int fromIndex,final int toIndex,final byte[][] keys,final byte[][] vals,final AbstractKeyArrayIndexProcedureConstructor ctor,final IResultHandler aggregator){  final LinkedList<Split> splits=splitKeys(ts,fromIndex,toIndex,keys);  final int nsplits=splits.size();  final ArrayList<AbstractDataServiceProcedureTask> tasks=new ArrayList<AbstractDataServiceProcedureTask>(nsplits);  final Iterator<Split> itr=splits.iterator();  boolean parallel=false;  while (itr.hasNext()) {    final Split split=itr.next();    final IKeyArrayIndexProcedure proc=ctor.newInstance(this,split.fromIndex,split.toIndex,keys,vals);    if (proc instanceof IParallelizableIndexProcedure) {      parallel=true;    }    tasks.add(new KeyArrayDataServiceProcedureTask(this,keys,vals,ts,split,proc,aggregator,ctor));  }  if (log.isInfoEnabled())   log.info("Procedures created by " + ctor.getClass().getName() + " will run on "+ nsplits+ " index partitions in "+ (parallel ? "parallel" : "sequence"));  runTasks(parallel,tasks);}  }
class C{  protected int hashCode(String ns,String nm){  int result=(ns == null) ? 0 : ns.hashCode();  return result ^ nm.hashCode();}  }
class C{  public static final String createWarning(String msgKey,Object args[]){  return createMsg(XSLTBundle,msgKey,args);}  }
class C{  void reverse(){  Collections.reverse(nodes);}  }
class C{  void _m13(float m13){  this.m13=m13;}  }
class C{  public static void disposeImages(){  for (  final Image image : IMAGES_TABLE.values()) {    image.dispose();  }  IMAGES_TABLE.clear();}  }
class C{  private static int nanosToMicros(long nanos){  long micros=nanos / 1000;  int microsInt=(int)micros;  if (microsInt != micros) {    throw new RuntimeException("Integer overflow: " + nanos);  }  return microsInt;}  }
class C{  void extras(){}  }
class C{  public XRTreeFrag(int root,XPathContext xctxt){  super(null);  initDTM(root,xctxt);}  }
class C{  public void emitop4(int op,int od){  emitop(op);  if (!alive)   return;  emit4(od);switch (op) {case goto_w:    markDead();  break;case jsr_w:break;default :throw new AssertionError(mnem(op));}}  }
class C{  public PropertyChangeEvent(Object source,String propertyName,Object oldValue,Object newValue){  this.source=source;  this.propertyName=propertyName;  this.newValue=newValue;  this.oldValue=oldValue;}  }
class C{  public boolean genStringAsCharArray(){  return this.genStringAsCharArray;}  }
class C{  Object processAVT_QNAME(StylesheetHandler handler,String uri,String name,String rawName,String value,ElemTemplateElement owner) throws org.xml.sax.SAXException {  AVT avt=null;  try {    avt=new AVT(handler,uri,name,rawName,value,owner);    if (avt.isSimple()) {      int indexOfNSSep=value.indexOf(':');      if (indexOfNSSep >= 0) {        String prefix=value.substring(0,indexOfNSSep);        if (!XML11Char.isXML11ValidNCName(prefix)) {          handleError(handler,XSLTErrorResources.INVALID_QNAME,new Object[]{name,value},null);          return null;        }      }      String localName=(indexOfNSSep < 0) ? value : value.substring(indexOfNSSep + 1);      if ((localName == null) || (localName.length() == 0) || (!XML11Char.isXML11ValidNCName(localName))) {        handleError(handler,XSLTErrorResources.INVALID_QNAME,new Object[]{name,value},null);        return null;      }    }  } catch (  TransformerException te) {    throw new org.xml.sax.SAXException(te);  }  return avt;}  }
class C{  AttributedString(AttributedCharacterIterator[] iterators){  if (iterators == null) {    throw new NullPointerException("Iterators must not be null");  }  if (iterators.length == 0) {    text="";  } else {    StringBuffer buffer=new StringBuffer();    for (int counter=0; counter < iterators.length; counter++) {      appendContents(buffer,iterators[counter]);    }    text=buffer.toString();    if (text.length() > 0) {      int offset=0;      Map<Attribute,Object> last=null;      for (int counter=0; counter < iterators.length; counter++) {        AttributedCharacterIterator iterator=iterators[counter];        int start=iterator.getBeginIndex();        int end=iterator.getEndIndex();        int index=start;        while (index < end) {          iterator.setIndex(index);          Map<Attribute,Object> attrs=iterator.getAttributes();          if (mapsDiffer(last,attrs)) {            setAttributes(attrs,index - start + offset);          }          last=attrs;          index=iterator.getRunLimit();        }        offset+=(end - start);      }    }  }}  }
class C{  public boolean containsAttributes(AttributeSet attrs){  boolean result=true;  Enumeration names=attrs.getAttributeNames();  while (result && names.hasMoreElements()) {    Object name=names.nextElement();    result=attrs.getAttribute(name).equals(getAttribute(name));  }  return result;}  }
class C{  public static void main(String[] args) throws FileNotFoundException, IOException {  ParameterDatabase pd=new ParameterDatabase(new File(args[0]),args);  pd.set(new Parameter("Hi there"),"Whatever");  pd.set(new Parameter(new String[]{"1","2","3"})," Whatever ");  pd.set(new Parameter(new String[]{"a","b","c"}).pop().push("d"),"Whatever");  System.err.println("\n\n PRINTING ALL PARAMETERS \n\n");  pd.list(new PrintWriter(System.err,true),true);  System.err.println("\n\n PRINTING ONLY VALID PARAMETERS \n\n");  pd.list(new PrintWriter(System.err,true),false);}  }
class C{  public int leader(){  return leader;}  }
class C{  public static BuildInfo readBuildInfo(){  InputStream stream=Utils.class.getResourceAsStream("/BuildInfo.properties");  if (stream == null) {    throw new RuntimeException("Cannot load BuildInfo.properties");  } else {    Properties prop=new Properties();    try {      prop.load(stream);      BuildInfo result=new BuildInfo();      result.version=prop.getProperty("version");      result.buildtime=prop.getProperty("buildtime");      return result;    } catch (    IOException e) {      throw new RuntimeException("Cannot load properties from file BuildInfo.properties",e);    } finally {      try {        stream.close();      } catch (      IOException e) {      }    }  }}  }
class C{  public WStringEditor(){  this("String",false,false,true,30,30,"",null);}  }
class C{  public void testRegexps() throws Exception {  int num=atLeast(1000);  for (int i=0; i < num; i++) {    String reg=AutomatonTestUtil.randomRegexp(random());    if (VERBOSE) {      System.out.println("TEST: regexp=" + reg);    }    assertSame(reg);  }}  }
class C{  public boolean isDisplayChartValues(){  return mDisplayChartValues;}  }
class C{  public View open(){  if (viewData == null) {    return (null);  }  if (!viewData.isVisible())   return (null);  Window window=viewData.getViewWindow();  if (window != null) {    window.setVisible(true);    return (viewData.view);  }  createView();  viewData.viewWindow.setVisible(true);  return (viewData.view);}  }
class C{  @Override public void delete(byte[] key) throws IOException {  key=normalizeKey(key);synchronized (this) {    super.deleteFingerprint();    assert this.buffer != null;    if (this.buffer != null) {      byte[] blob=this.buffer.remove(key);      if (blob != null) {        this.buffersize-=blob.length;        return;      }    }    super.delete(key);  }}  }
class C{  public static SoapMessageImpl createResponse(String fileName) throws Exception {  Soap message=createSoapMessage(fileName);  if (!(message instanceof SoapMessageImpl)) {    throw new RuntimeException("Got " + message.getClass() + " instead of SoapResponse");  }  if (((SoapMessageImpl)message).isRequest()) {    throw new RuntimeException("Got request instead of response");  }  return (SoapMessageImpl)message;}  }
class C{  protected JvmThreadingMeta createJvmThreadingMetaNode(String groupName,String groupOid,ObjectName groupObjname,MBeanServer server){  return new JvmThreadingMetaImpl(this,objectserver);}  }
class C{  static <K,V>boolean checkInvariants(TreeNode<K,V> t){  TreeNode<K,V> tp=t.parent, tl=t.left, tr=t.right, tb=t.prev, tn=(TreeNode<K,V>)t.next;  if (tb != null && tb.next != t)   return false;  if (tn != null && tn.prev != t)   return false;  if (tp != null && t != tp.left && t != tp.right)   return false;  if (tl != null && (tl.parent != t || tl.hash > t.hash))   return false;  if (tr != null && (tr.parent != t || tr.hash < t.hash))   return false;  if (t.red && tl != null && tl.red && tr != null && tr.red)   return false;  if (tl != null && !checkInvariants(tl))   return false;  if (tr != null && !checkInvariants(tr))   return false;  return true;}  }
class C{  public String requestPannous(String message,String botid,String server,String apikey,int limit) throws Exception {  try {    if (server != null && !server.isEmpty()) {      server=server.toLowerCase();      if (!server.startsWith("http")) {        server="http://" + server;      }    } else {      server=PANNOUS;    }    String url=server + "/api?input=" + Utils.encodeURL(message);    log("PANNOUS",Level.INFO,url);    InputStream stream=Utils.openStream(new URL(url));    String result=Utils.loadTextFile(stream,"UTF-8",1000000);    log("Response",Level.INFO,result);    JSONObject json=(JSONObject)JSONSerializer.toJSON(result);    if (json == null || json.isNullObject()) {      return null;    }    JSONArray outputs=json.getJSONArray("output");    if (outputs == null || outputs.isEmpty()) {      return null;    }    JSONObject output=(JSONObject)outputs.get(0);    if (output == null || output.isNullObject()) {      return null;    }    JSONObject actions=output.getJSONObject("actions");    if (actions == null || actions.isNullObject()) {      return null;    }    JSONObject value=actions.getJSONObject("say");    if (value == null || value.isNullObject()) {      return null;    }    String text=value.getString("text");    if (text == null) {      return null;    }    if (limit > 0) {      StringWriter writer=new StringWriter();      TextStream textStream=new TextStream(text);      for (int index=0; index < limit; index++) {        if (textStream.atEnd()) {          break;        }        writer.write(textStream.nextSentence());      }      text=writer.toString();    }    return text;  } catch (  Exception exception) {    log(exception);    return null;  }}  }
class C{  public boolean isDefaultSessionToken(String token){  if (getParam().getDefaultTokensEnabled().contains(token.toLowerCase(Locale.ENGLISH)))   return true;  return false;}  }
class C{  public View findViewById(int id){  View v;  if (mSlidingMenu != null) {    v=mSlidingMenu.findViewById(id);    if (v != null)     return v;  }  return null;}  }
class C{  private static synchronized void initDisplayMetrics(Context context){  sDisplayMetrics=context.getResources().getDisplayMetrics();}  }
class C{  private void createDelayMatrix(TopologicalGraph graph,boolean directed){  mTotalNodeNum=graph.getNumberOfNodes();  mDelayMatrix=new float[mTotalNodeNum][mTotalNodeNum];  for (int row=0; row < mTotalNodeNum; ++row) {    for (int col=0; col < mTotalNodeNum; ++col) {      mDelayMatrix[row][col]=Float.MAX_VALUE;    }  }  Iterator<TopologicalLink> itr=graph.getLinkIterator();  TopologicalLink edge;  while (itr.hasNext()) {    edge=itr.next();    mDelayMatrix[edge.getSrcNodeID()][edge.getDestNodeID()]=edge.getLinkDelay();    if (!directed) {      mDelayMatrix[edge.getDestNodeID()][edge.getSrcNodeID()]=edge.getLinkDelay();    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:36.458 -0500",hash_original_method="624BF5A05D2AD2F91E52D17C6AFF6DC5",hash_generated_method="0B5116E0C68CA388AB59C0FD4706ECB4") public boolean isShrinkAllColumns(){  return mShrinkAllColumns;}  }
class C{  public static void main(String[] args) throws Exception {  Project.initialize();  GenericObjectEditor.registerAllEditors();  ExperimentFileChooser fchooser=new ExperimentFileChooser();  int retVal=fchooser.showOpenDialog(null);  System.out.println("OK? " + (retVal == ExperimentFileChooser.APPROVE_OPTION));  System.out.println("file: " + fchooser.getSelectedFile());  System.out.println("reader: " + OptionUtils.toCommandLine(fchooser.getReader()));  System.out.println("writer: " + OptionUtils.toCommandLine(fchooser.getWriter()));}  }
class C{  private static int mix32(long z){  z=(z ^ (z >>> 33)) * 0x62a9d9ed799705f5L;  return (int)(((z ^ (z >>> 28)) * 0xcb24d0a5c88c35b3L) >>> 32);}  }
class C{  protected Invariant_Impl(){  super();}  }
class C{  public int typicalIndsProduced(){  return (tossSecondParent ? minChildProduction() : minChildProduction() * 2);}  }
class C{  public void addTypeSubtype(final TypeVariable target,final AnnotatedTypeMirror supertype,Set<AnnotationMirror> hierarchies){  final Subtypes subtypes=targetToRecords.get(target).subtypes;  final Set<AnnotationMirror> subtypesTops=subtypes.targets.get(supertype);  if (subtypesTops == null) {    subtypes.types.put(supertype,new HashSet<>(hierarchies));  } else {    subtypesTops.addAll(hierarchies);  }}  }
class C{  @Override public int compareTo(IntsRef other){  if (this == other)   return 0;  final int[] aInts=this.ints;  int aUpto=this.offset;  final int[] bInts=other.ints;  int bUpto=other.offset;  final int aStop=aUpto + Math.min(this.length,other.length);  while (aUpto < aStop) {    int aInt=aInts[aUpto++];    int bInt=bInts[bUpto++];    if (aInt > bInt) {      return 1;    } else     if (aInt < bInt) {      return -1;    }  }  return this.length - other.length;}  }
class C{  @Override public String toString(){  return "cudaStream_t[" + "nativePointer=" + getNativePointer() + "]";}  }
class C{  @Override public double evaluate(Recommendation<U,I> recommendation){  U u=recommendation.getUser();  ItemNovelty.UserItemNoveltyModel uinm=novelty.getModel(u);  if (uinm == null) {    return Double.NaN;  } else {    return super.evaluate(recommendation);  }}  }
class C{  private void displaySongsList(Cursor cursor){  if (cursor.moveToFirst()) {    songInfoList=new ArrayList<FileDownloadHelper.SongInfo>(cursor.getCount());    do {      View songView=LayoutInflater.from(getActivity()).inflate(R.layout.list_item_song,songListView,false);      TextView songTitle=(TextView)songView.findViewById(R.id.song_title);      TextView trackNumber=(TextView)songView.findViewById(R.id.track_number);      TextView details=(TextView)songView.findViewById(R.id.details);      ImageView contextMenu=(ImageView)songView.findViewById(R.id.list_context_menu);      FileDownloadHelper.SongInfo songInfo=new FileDownloadHelper.SongInfo(albumDisplayArtist,albumTitle,cursor.getInt(AlbumSongsListQuery.SONGID),cursor.getInt(AlbumSongsListQuery.TRACK),cursor.getString(AlbumSongsListQuery.TITLE),cursor.getString(AlbumSongsListQuery.FILE));      songInfoList.add(songInfo);      songTitle.setText(songInfo.title);      trackNumber.setText(String.valueOf(songInfo.track));      String artist=cursor.getString(AlbumSongsListQuery.ARTIST);      String duration=UIUtils.formatTime(cursor.getInt(AlbumSongsListQuery.DURATION));      String detailsText=TextUtils.isEmpty(artist) ? duration : duration + "  |  " + artist;      details.setText(detailsText);      contextMenu.setTag(songInfo);      contextMenu.setOnClickListener(songItemMenuClickListener);      songView.setTag(songInfo);      songView.setOnClickListener(songClickListener);      songListView.addView(songView);    } while (cursor.moveToNext());    if (!songInfoList.isEmpty()) {      FileDownloadHelper.SongInfo songInfo=new FileDownloadHelper.SongInfo(albumDisplayArtist,albumTitle,0,0,null,null);      if (songInfo.downloadDirectoryExists()) {        Resources.Theme theme=getActivity().getTheme();        TypedArray styledAttributes=theme.obtainStyledAttributes(new int[]{R.attr.colorAccent});        downloadButton.setColorFilter(styledAttributes.getColor(0,getActivity().getResources().getColor(R.color.accent_default)));        styledAttributes.recycle();      } else {        downloadButton.clearColorFilter();      }    }  }}  }
class C{  public void remove(final AbstractInsnNode insn){  --size;  AbstractInsnNode next=insn.next;  AbstractInsnNode prev=insn.prev;  if (next == null) {    if (prev == null) {      first=null;      last=null;    } else {      prev.next=null;      last=prev;    }  } else {    if (prev == null) {      first=next;      next.prev=null;    } else {      prev.next=next;      next.prev=prev;    }  }  cache=null;  insn.index=-1;  insn.prev=null;  insn.next=null;}  }
class C{  public boolean containsDashDash(){  return buffer.indexOf("--") != -1;}  }
class C{  public void descendentsOf(Cell cell,HashMap add_here){  add_here.put(official_name,this);  for (int z=0; z < num_children; z++)   daughters[z].descendentsOf(cell,add_here);}  }
class C{  public void testTxLocalOptimisticSerializable() throws Exception {  checkTx(LOCAL,OPTIMISTIC,SERIALIZABLE);}  }
class C{  @Override public void initialize(Map<String,Object> properties){  return;}  }
class C{  public PerpendicularBar(double height){  super(false,true,false);  this.height=height;}  }
class C{  @Override public String toString(){  String result;  if (m_FilteredInstances == null) {    result="FilteredAssociator: No model built yet.";  } else {    result="FilteredAssociator using " + getAssociatorSpec() + " on data filtered through "+ getFilterSpec()+ "\n\nFiltered Header\n"+ m_FilteredInstances.toString()+ "\n\nAssociator Model\n"+ m_Associator.toString();  }  return result;}  }
class C{  public boolean remove(RVMThread t){  if (t.queuedOn != this)   return false;  if (trace) {    VM.sysWriteln("removing ",t.getThreadSlot()," from ",Magic.objectAsAddress(this));  }  for (RVMThread cur=null; cur != tail; cur=getNext(cur)) {    if (getNext(cur) == t) {      if (trace) {        VM.sysWriteln("found!  before:");        dump();      }      setNext(cur,t.next);      if (tail == t) {        tail=cur;      }      if (trace) {        VM.sysWriteln("after:");        dump();      }      t.next=null;      t.queuedOn=null;      return true;    }  }  VM.sysWriteln("Could not remove Thread #",t.getThreadSlot()," from queue!");  dump();  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return false;}  }
class C{  public Complex evaluate(double Omega){  Complex ejOmega=Complex.exp(new Complex(0.0,-Omega));  return T.evaluate(ejOmega);}  }
class C{  void CalcBins4Map(double Range){  int ad=0;  if (Range % this.LagSize == 0) {    ad=0;  }  bin[][] bins1=new bin[(int)Math.ceil(Range / this.LagSize) + ad][(int)Math.ceil(Range / this.LagSize + ad)];  bin[][] bins4=new bin[(int)Math.ceil(Range / this.LagSize) + ad][(int)Math.ceil(Range / this.LagSize + ad)];  bin[][] bins1c=new bin[(int)Math.ceil(Range / this.LagSize) + ad][(int)Math.ceil(Range / this.LagSize + ad)];  bin[][] bins4c=new bin[(int)Math.ceil(Range / this.LagSize) + ad][(int)Math.ceil(Range / this.LagSize + ad)];  BinSurface=new bin[2 * ((int)Math.ceil(Range / this.LagSize) + ad)][2 * ((int)Math.ceil(Range / this.LagSize + ad))];  double radious=this.LagSize * 2 / Math.sqrt(2);  double halfLagSize=this.LagSize;  List<pair> prs=new ArrayList();  double w=0;  for (int r=0; r < bins1.length; r++) {    for (int c=0; c < bins1[r].length; c++) {      if (bins1[r][c] == null) {        bin bb=new bin();        bin bbc=new bin();        bins1[r][c]=bb;        bins1c[r][c]=bbc;      }      bins1[r][c].GridHorDistance=0.5 * this.LagSize + c * this.LagSize;      bins1[r][c].GridVerDistance=0.5 * this.LagSize + r * this.LagSize;      bins1c[r][c].GridHorDistance=-0.5 * this.LagSize - c * this.LagSize;      bins1c[r][c].GridVerDistance=-0.5 * this.LagSize - r * this.LagSize;      double[] center=new double[]{bins1[r][c].GridVerDistance,bins1[r][c].GridHorDistance};      prs=getBinNNPairs4Map(PairsTree,center,halfLagSize,radious);      for (int n=0; n < prs.size(); n++) {        bins1[r][c].HorDistance+=prs.get(n).HorDistance;        bins1[r][c].VerDistance+=prs.get(n).VerDistance;        w=(1 - (Math.abs(bins1[r][c].GridHorDistance - prs.get(n).HorDistance) / this.LagSize)) * (1 - (Math.abs(bins1[r][c].GridVerDistance - prs.get(n).VerDistance) / this.LagSize));        bins1[r][c].Weight+=w;        bins1[r][c].Value+=prs.get(n).MomentI * w;        bins1[r][c].Size+=1;        bins1c[r][c].HorDistance+=prs.get(n).HorDistance;        bins1c[r][c].VerDistance+=prs.get(n).VerDistance;        bins1c[r][c].Weight+=w;        bins1c[r][c].Value+=prs.get(n).MomentI * w;        bins1c[r][c].Size+=1;      }    }  }  for (int i=0; i < bins1.length; i++) {    for (int j=0; j < bins1[i].length; j++) {      if (bins1[i][j] == null) {        bin bb=new bin();        bins1[i][j]=bb;        bins1[i][j].HorDistance=i * this.LagSize;        bins1[i][j].VerDistance=j * this.LagSize;        bins1[i][j].Value=-1;        bin bbc=new bin();        bins1c[i][j]=bbc;        bins1c[i][j].HorDistance=-i * this.LagSize;        bins1c[i][j].VerDistance=-j * this.LagSize;        bins1c[i][j].Value=-1;      } else {        bins1[i][j].HorDistance=bins1[i][j].HorDistance / bins1[i][j].Size;        bins1[i][j].VerDistance=bins1[i][j].VerDistance / bins1[i][j].Size;        bins1[i][j].Value=bins1[i][j].Value / bins1[i][j].Weight;        bins1c[i][j].HorDistance=bins1c[i][j].HorDistance / bins1c[i][j].Size;        bins1c[i][j].VerDistance=bins1c[i][j].VerDistance / bins1c[i][j].Size;        bins1c[i][j].Value=bins1c[i][j].Value / bins1c[i][j].Weight;      }    }  }  for (int r=0; r < bins4.length; r++) {    for (int c=0; c < bins4[r].length; c++) {      if (bins4[r][c] == null) {        bin bb=new bin();        bin bbc=new bin();        bins4[r][c]=bb;        bins4c[r][c]=bbc;      }      bins4[r][c].GridHorDistance=0.5 * this.LagSize + c * this.LagSize;      bins4[r][c].GridVerDistance=-0.5 * this.LagSize - r * this.LagSize;      bins4c[r][c].GridHorDistance=-0.5 * this.LagSize - c * this.LagSize;      bins4c[r][c].GridVerDistance=0.5 * this.LagSize + r * this.LagSize;      double[] center=new double[]{bins4[r][c].GridVerDistance,bins4[r][c].GridHorDistance};      prs=getBinNNPairs4Map(PairsTree,center,halfLagSize,radious);      for (int n=0; n < prs.size(); n++) {        bins4[r][c].HorDistance+=prs.get(n).HorDistance;        bins4[r][c].VerDistance+=prs.get(n).VerDistance;        w=(1 - (Math.abs(bins4[r][c].GridHorDistance - prs.get(n).HorDistance) / this.LagSize)) * (1 - (Math.abs(bins4[r][c].GridVerDistance - prs.get(n).VerDistance) / this.LagSize));        bins4[r][c].Weight+=w;        bins4[r][c].Value+=prs.get(n).MomentI * w;        bins4[r][c].Size+=1;        bins4c[r][c].HorDistance+=prs.get(n).HorDistance;        bins4c[r][c].VerDistance+=prs.get(n).VerDistance;        bins4c[r][c].Weight+=w;        bins4c[r][c].Value+=prs.get(n).MomentI * w;        bins4c[r][c].Size+=1;      }    }  }  for (int i=0; i < bins4.length; i++) {    for (int j=0; j < bins4[i].length; j++) {      if (bins4[i][j] == null) {        bin bb=new bin();        bins4[i][j]=bb;        bins4[i][j].HorDistance=i * this.LagSize;        bins4[i][j].VerDistance=j * this.LagSize;        bins4[i][j].Value=-1;        bin bbc=new bin();        bins4c[i][j]=bbc;        bins4c[i][j].HorDistance=-i * this.LagSize;        bins4c[i][j].VerDistance=-j * this.LagSize;        bins4c[i][j].Value=-1;      } else {        bins4[i][j].HorDistance=bins4[i][j].HorDistance / bins4[i][j].Size;        bins4[i][j].VerDistance=bins4[i][j].VerDistance / bins4[i][j].Size;        bins4[i][j].Value=bins4[i][j].Value / bins4[i][j].Weight;        bins4c[i][j].HorDistance=bins4c[i][j].HorDistance / bins4c[i][j].Size;        bins4c[i][j].VerDistance=bins4c[i][j].VerDistance / bins4c[i][j].Size;        bins4c[i][j].Value=bins4c[i][j].Value / bins4c[i][j].Weight;      }    }  }  int stI=BinSurface.length / 2;  int stJ=BinSurface[0].length / 2;  for (int i=0; i < bins1.length; i++) {    for (int j=0; j < bins1[i].length; j++) {      BinSurface[stI + i][stJ + j]=bins1[i][j];      BinSurface[stI - 1 - i][stJ - 1 - j]=bins1c[i][j];    }  }  stI=BinSurface.length / 2;  stJ=BinSurface[0].length / 2;  for (int i=0; i < bins4.length; i++) {    for (int j=0; j < bins4[i].length; j++) {      BinSurface[stI - 1 - i][stJ + j]=bins4[i][j];      BinSurface[stI + i][stJ - 1 - j]=bins4c[i][j];    }  }  int resd=0;}  }
class C{  public PageRankWithPriors(Hypergraph<V,E> graph,Function<E,? extends Number> edge_weights,Function<V,Double> vertex_priors,double alpha){  super(graph,edge_weights,vertex_priors,alpha);}  }
class C{  protected Host createNewHost(TenantOrg tenant,HostParam param){  Host host=new Host();  host.setId(URIUtil.createId(Host.class));  host.setTenant(tenant.getId());  populateHostData(host,param);  if (!NullColumnValueGetter.isNullURI(host.getCluster())) {    Cluster cluster=_dbClient.queryObject(Cluster.class,host.getCluster());    if (ComputeSystemHelper.isClusterInExport(_dbClient,host.getCluster())) {      String taskId=UUID.randomUUID().toString();      ComputeSystemController controller=getController(ComputeSystemController.class,null);      controller.addHostsToExport(Arrays.asList(host.getId()),host.getCluster(),taskId,null,false);    } else {      ComputeSystemHelper.updateInitiatorClusterName(_dbClient,host.getCluster(),host.getId());    }  }  return host;}  }
class C{  public void collectObserversLocked(Uri uri,int index,IContentObserver observer,boolean observerWantsSelfNotifications,int targetUserHandle,ArrayList<ObserverCall> calls){  String segment=null;  int segmentCount=countUriSegments(uri);  if (index >= segmentCount) {    collectMyObserversLocked(true,observer,observerWantsSelfNotifications,targetUserHandle,calls);  } else   if (index < segmentCount) {    segment=getUriSegment(uri,index);    collectMyObserversLocked(false,observer,observerWantsSelfNotifications,targetUserHandle,calls);  }  int N=mChildren.size();  for (int i=0; i < N; i++) {    ObserverNode node=mChildren.get(i);    if (segment == null || node.mName.equals(segment)) {      node.collectObserversLocked(uri,index + 1,observer,observerWantsSelfNotifications,targetUserHandle,calls);      if (segment != null) {        break;      }    }  }}  }
class C{  public CoapEndpoint(final NetworkConfig config){  this(new InetSocketAddress(0),config);}  }
class C{  private static final void showCorruptionError(Throwable err){  err.printStackTrace();  StringWriter sw=new StringWriter();  PrintWriter pw=new PrintWriter(sw);  pw.println("FrostWire version " + FrostWireUtils.getFrostWireVersion());  pw.print("Java version ");  pw.print(System.getProperty("java.version","?"));  pw.print(" from ");  pw.println(System.getProperty("java.vendor","?"));  pw.print(System.getProperty("os.name","?"));  pw.print(" v. ");  pw.print(System.getProperty("os.version","?"));  pw.print(" on ");  pw.println(System.getProperty("os.arch","?"));  Runtime runtime=Runtime.getRuntime();  pw.println("Free/total memory: " + runtime.freeMemory() + "/"+ runtime.totalMemory());  pw.println();  err.printStackTrace(pw);  pw.println();  pw.println("STARTUP ERROR!");  pw.println();  File propsFile=new File(getUserSettingsDir(),"frostwire.props");  Properties props=new Properties();  try {    FileInputStream fis=new FileInputStream(propsFile);    props.load(fis);    fis.close();    props.list(pw);  } catch (  FileNotFoundException fnfe) {  }catch (  IOException ioe) {  }  pw.flush();  displayError(sw.toString());}  }
class C{  public static Vector2 min(Vector2 o1,Vector2 o2){  return new Vector2(Math.min(o1.x,o2.x),Math.min(o1.z,o2.z));}  }
class C{  public static String toFullHexString(long value){  long currentValue=value;  StringBuffer stringBuffer=new StringBuffer(16);  for (int j=0; j < 16; j++) {    int currentDigit=(int)currentValue & 0xf;    stringBuffer.append(HEX_DIGITS[currentDigit]);    currentValue>>>=4;  }  return stringBuffer.reverse().toString();}  }
class C{  public final AC count(int size){  makeSize(size);  return this;}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:36.487 -0500",hash_original_method="6C90B1571D2A36769CB59FB958C842F7",hash_generated_method="427819B9974AD331D76B1095B8CA7023") public void putIntegerArrayList(String key,ArrayList<Integer> value){  unparcel();  mMap.put(key,value);}  }
class C{  public static void main(String... args) throws SQLException {  new Restore().runTool(args);}  }
class C{  public void clear(){  classes.clear();  units.values().forEach(null);  units.clear();}  }
class C{  public void reset(){  this.clearReferences();}  }
class C{  public BlogEntry newEntry(final String key,final byte[] subject,final byte[] author,final String ip,final Date date,final byte[] page,final List<String> comments,final String commentMode){  return new BlogEntry(normalize(key),subject,author,ip,date,page,comments,commentMode);}  }
class C{  private Comparable<? super K> comparable(Object key) throws ClassCastException {  if (key == null)   throw new NullPointerException();  if (comparator != null)   return new ComparableUsingComparator<K>((K)key,comparator); else   return (Comparable<? super K>)key;}  }
class C{  private int upperIndex(int ch){  int index=-1;  if (ch >= 0xdf) {    if (ch <= 0x587) {      if (ch == 0xdf) {        index=0;      } else       if (ch <= 0x149) {        if (ch == 0x149) {          index=1;        }      } else       if (ch <= 0x1f0) {        if (ch == 0x1f0) {          index=2;        }      } else       if (ch <= 0x390) {        if (ch == 0x390) {          index=3;        }      } else       if (ch <= 0x3b0) {        if (ch == 0x3b0) {          index=4;        }      } else       if (ch <= 0x587) {        if (ch == 0x587) {          index=5;        }      }    } else     if (ch >= 0x1e96) {      if (ch <= 0x1e9a) {        index=6 + ch - 0x1e96;      } else       if (ch >= 0x1f50 && ch <= 0x1ffc) {        index="\u000b\u0000\f\u0000\r\u0000\u000e\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>\u0000\u0000?@A\u0000BC\u0000\u0000\u0000\u0000D\u0000\u0000\u0000\u0000\u0000EFG\u0000HI\u0000\u0000\u0000\u0000J\u0000\u0000\u0000\u0000\u0000KL\u0000\u0000MN\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000OPQ\u0000RS\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000TUV\u0000WX\u0000\u0000\u0000\u0000Y".value[ch - 0x1f50];        if (index == 0) {          index=-1;        }      } else       if (ch >= 0xfb00) {        if (ch <= 0xfb06) {          index=90 + ch - 0xfb00;        } else         if (ch >= 0xfb13 && ch <= 0xfb17) {          index=97 + ch - 0xfb13;        }      }    }  }  return index;}  }
class C{  public boolean isMine(Wallet wallet){  for (  TransactionOutput output : this.outputs) {    if (output.isMine(wallet)) {      return true;    }  }  for (  TransactionInput input : this.inputs) {    if (isTransactionInputMine(input,wallet)) {      return true;    }  }  return false;}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == TAnnotableElement.class) {switch (baseFeatureID) {case TypesPackage.TANNOTABLE_ELEMENT__ANNOTATIONS:      return TypesPackage.TYPE__ANNOTATIONS;default :    return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  private Vector<File> collectFiles(){  Vector<File> colfiles=new Vector<File>();  File[] files=new File(option.getOriginalDir()).listFiles(new RecursiveFilenameFilter());  if (files == null) {    System.out.println("\"" + option.getOriginalDir() + "\" is not a directory or an I/O error occurred!");    return null;  }  if (option.isReadSubdirs())   subdirFileFilter=new RecursiveFilenameFilter(); else   subdirFileFilter=new NonRecursiveFilenameFilter();  for (int i=0; i < files.length; i++) {    if (files[i].isDirectory()) {      if (option.getPathToFiles() != null)       collectInDir(colfiles,new File(files[i],option.getPathToFiles())); else       collectInDir(colfiles,files[i]);    } else     colfiles.add(files[i]);  }  if (colfiles.size() <= 1) {    System.out.println("\"" + option.getOriginalDir() + "\" didn't contain at least two files\n"+ "suitable for the specified options!");    return null;  }  return colfiles;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Airing a=getAir(stack);  return (a == null) ? "" : a.getChannelName();}  }
class C{  public static void main(String[] args){  System.out.println("\n i    m(i)");  System.out.println("-----------");  for (int i=1; i <= 10; i++) {    System.out.printf("%2d%8.2f\n",i,m(i));  }}  }
class C{  default <U>Zippable<Tuple2<T,U>> zip(final Seq<? extends U> other){  return zip((Stream<? extends U>)other);}  }
class C{  private static String[] createOSAScriptCommand(String playlist,File[] files){  List<String> command=new ArrayList<String>();  command.add("osascript");  command.add("-e");  command.add("tell application \"Finder\"");  for (int i=0; i < files.length; i++) {    File f=files[i];    String path=f.getAbsolutePath();    command.add("-e");    command.add("set hfsFile" + i + " to (POSIX file \""+ path+ "\")");  }  command.add("-e");  command.add("set thePlaylist to \"" + playlist + "\"");  command.add("-e");  command.add("tell application \"iTunes\"");  command.add("-e");  command.add("launch");  command.add("-e");  command.add("if not (exists playlist thePlaylist) then");  command.add("-e");  command.add("set thisPlaylist to make new playlist");  command.add("-e");  command.add("set name of thisPlaylist to thePlaylist");  command.add("-e");  command.add("end if");  for (int i=0; i < files.length; i++) {    command.add("-e");    command.add("add hfsFile" + i + " to playlist thePlaylist");  }  command.add("-e");  command.add("end tell");  command.add("-e");  command.add("end tell");  return command.toArray(new String[command.size()]);}  }
class C{  @Inline public final void push(ObjectReference object){  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(!object.isNull());  checkHeadInsert(1);  uncheckedHeadInsert(object.toAddress());}  }
class C{  @Override public Color transform(Element element){  return match(element);}  }
class C{  public static void writeFile(ArrayList<String> array,String fileName){  try {    FileWriter fw=new FileWriter(fileName);    BufferedWriter bw=new BufferedWriter(fw);    try (PrintWriter outputFile=new PrintWriter(bw)){      for (int i=0; i < array.size(); i++) {        outputFile.println(array.get(i));      }    }   } catch (  Exception e) {    System.out.println("Error : " + e.toString() + e);  }}  }
class C{  private Version(){}  }
class C{  public static String encryptCTR(final byte[] concatenatedHashValue,Long turnoverCounter,final SecretKey symmetricKey,int turnOverCounterLengthInBytes) throws NoSuchAlgorithmException, NoSuchProviderException, NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException, IllegalBlockSizeException, BadPaddingException {  final ByteBuffer byteBufferIV=ByteBuffer.allocate(16);  byteBufferIV.put(concatenatedHashValue);  final byte[] IV=byteBufferIV.array();  final ByteBuffer byteBufferData=ByteBuffer.allocate(16);  byteBufferData.putLong(turnoverCounter);  final byte[] data=byteBufferData.array();  byte[] turnOverCounterByteRep=get2ComplementRepForLong(turnoverCounter,turnOverCounterLengthInBytes);  System.arraycopy(turnOverCounterByteRep,0,data,0,turnOverCounterByteRep.length);  final IvParameterSpec ivSpec=new IvParameterSpec(IV);  final Cipher cipher=Cipher.getInstance("AES/CTR/NoPadding","BC");  cipher.init(Cipher.ENCRYPT_MODE,symmetricKey,ivSpec);  final byte[] encryptedTurnOverValueComplete=cipher.doFinal(data);  final byte[] encryptedTurnOverValue=new byte[turnOverCounterLengthInBytes];  System.arraycopy(encryptedTurnOverValueComplete,0,encryptedTurnOverValue,0,turnOverCounterLengthInBytes);  return CashBoxUtils.base64Encode(encryptedTurnOverValue,false);}  }
class C{  public void initLoader(String selection){  if (LOGD)   Log.d(TAG,"Querying for widget events...");  Uri uri=createLoaderUri();  mLoader=new CursorLoader(mContext,uri,EVENT_PROJECTION,selection,null,EVENT_SORT_ORDER);  mLoader.setUpdateThrottle(WIDGET_UPDATE_THROTTLE);synchronized (mLock) {    mLastSerialNum=++mSerialNum;  }  mLoader.registerListener(mAppWidgetId,this);  mLoader.startLoading();}  }
class C{  public static void register(){  CommandCenter.register("group_management",new GroupManagementAction());}  }
class C{  @DSSpec(DSCat.SPEC_OTHERS) @DSSink({DSSinkKind.IPC}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:29.542 -0500",hash_original_method="D242868C7C53E8784BBDECD4F038DC32",hash_generated_method="C889A277772E7F5A7183DAD0C616AEDF") public boolean sendBroadcast(Intent intent){synchronized (mReceivers) {    final String action=intent.getAction();    final String type=intent.resolveTypeIfNeeded(mAppContext.getContentResolver());    final Uri data=intent.getData();    final String scheme=intent.getScheme();    final Set<String> categories=intent.getCategories();    final boolean debug=DEBUG || ((intent.getFlags() & Intent.FLAG_DEBUG_LOG_RESOLUTION) != 0);    if (debug)     Log.v(TAG,"Resolving type " + type + " scheme "+ scheme+ " of intent "+ intent);    ArrayList<ReceiverRecord> entries=mActions.get(intent.getAction());    if (entries != null) {      if (debug)       Log.v(TAG,"Action list: " + entries);      ArrayList<ReceiverRecord> receivers=null;      for (int i=0; i < entries.size(); i++) {        ReceiverRecord receiver=entries.get(i);        if (debug)         Log.v(TAG,"Matching against filter " + receiver.filter);        if (receiver.broadcasting) {          if (debug) {            Log.v(TAG,"  Filter's target already added");          }          continue;        }        int match=receiver.filter.match(action,type,scheme,data,categories,"LocalBroadcastManager");        if (match >= 0) {          if (debug)           Log.v(TAG,"  Filter matched!  match=0x" + Integer.toHexString(match));          if (receivers == null) {            receivers=new ArrayList<ReceiverRecord>();          }          receivers.add(receiver);          receiver.broadcasting=true;        } else {          if (debug) {            String reason;switch (match) {case IntentFilter.NO_MATCH_ACTION:              reason="action";            break;case IntentFilter.NO_MATCH_CATEGORY:          reason="category";        break;case IntentFilter.NO_MATCH_DATA:      reason="data";    break;case IntentFilter.NO_MATCH_TYPE:  reason="type";break;default :reason="unknown reason";break;}Log.v(TAG,"  Filter did not match: " + reason);}}}if (receivers != null) {for (int i=0; i < receivers.size(); i++) {receivers.get(i).broadcasting=false;}mPendingBroadcasts.add(new BroadcastRecord(intent,receivers));if (!mHandler.hasMessages(MSG_EXEC_PENDING_BROADCASTS)) {mHandler.sendEmptyMessage(MSG_EXEC_PENDING_BROADCASTS);}return true;}}}return false;}  }
class C{  public static InitMaxStreams create(int maxInStreams,int maxOutStreams){  if (maxOutStreams < 0 || maxOutStreams > 65535)   throw new IllegalArgumentException("Invalid maxOutStreams value");  if (maxInStreams < 0 || maxInStreams > 65535)   throw new IllegalArgumentException("Invalid maxInStreams value");  return new InitMaxStreams(maxInStreams,maxOutStreams);}  }
class C{  protected void hflushOrSync(FSDataOutputStream os) throws IOException {  try {    this.refHflushOrSync.invoke(os);  } catch (  InvocationTargetException e) {    String msg="Error while trying to hflushOrSync!";    LOGGER.error(msg);    Throwable cause=e.getCause();    if (cause != null && cause instanceof IOException) {      throw (IOException)cause;    }    throw new FlumeException(msg,e);  }catch (  Exception e) {    String msg="Error while trying to hflushOrSync!";    LOGGER.error(msg);    throw new FlumeException(msg,e);  }}  }
class C{  public SourceAttr(String name){  this.name=new AsciiCP(name);}  }
class C{  @Override public void frequencyChanged(FrequencyChangeEvent event){  if (event.getEvent() == Event.NOTIFICATION_FREQUENCY_CHANGE) {    setFrequency(event.getValue().longValue(),false);  }}  }
class C{  public boolean checkMember(MemberDefinition field){  return checkModifier(field.getModifiers());}  }
class C{  public static void init(Context context){  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);  prefs.registerOnSharedPreferenceChangeListener(null);}  }
class C{  public final IntGrid3D multiply(int byThisMuch){  if (byThisMuch == 1.0)   return this;  int[][] fieldx=null;  int[] fieldxy=null;  final int width=this.width;  final int height=this.height;  final int length=this.length;  for (int x=0; x < width; x++) {    fieldx=field[x];    for (int y=0; y < height; y++) {      fieldxy=fieldx[y];      for (int z=0; z < length; z++)       fieldxy[z]*=byThisMuch;    }  }  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:04.390 -0500",hash_original_method="55D32946D61D585CF9CB8D4DE0F8875C",hash_generated_method="F651B33C5F1F4A3D6588D50A91443375") public void dispose(){  nativeDispose(false);}  }
class C{  public boolean isOrderingAsAdded(){  return mOrderingAsAdded;}  }
class C{  private String cleanInput(String input){  if (input == null) {    return null;  }  input=input.trim();  if (input.isEmpty()) {    return null;  }  return input.toUpperCase(java.util.Locale.ENGLISH);}  }
class C{  public int nextIntInRange(int lowerBound,int upperBound){  if (upperBound <= lowerBound) {    throw new IllegalArgumentException("RandomGenerator.nextIntInRange : the upper bound of the " + "random number range should be greater than the lower bound.");  }  return nextInt(upperBound - lowerBound) + lowerBound;}  }
class C{  public void addCdataSectionElements(String URI_and_localNames){  if (URI_and_localNames != null)   initCdataElems(URI_and_localNames);  if (m_StringOfCDATASections == null)   m_StringOfCDATASections=URI_and_localNames; else   m_StringOfCDATASections+=(" " + URI_and_localNames);}  }
class C{  public long readLong(){  return scanner.nextLong();}  }
class C{  protected void copyResponseHeaders(HttpResponse proxyResponse,HttpServletRequest servletRequest,HttpServletResponse servletResponse){  for (  Header header : proxyResponse.getAllHeaders()) {    if (hopByHopHeaders.containsHeader(header.getName()))     continue;    if (header.getName().equals(org.apache.http.cookie.SM.SET_COOKIE) || header.getName().equals(org.apache.http.cookie.SM.SET_COOKIE2)) {      copyProxyCookie(servletRequest,servletResponse,header);    } else {      servletResponse.addHeader(header.getName(),header.getValue());    }  }}  }
class C{  static void verifyNotInPendingDelete(Set<DesignatedContact> contacts,Key<ContactResource> registrant,Set<Key<HostResource>> nameservers) throws EppException {  for (  DesignatedContact contact : nullToEmpty(contacts)) {    verifyNotInPendingDelete(contact.getContactKey());  }  if (registrant != null) {    verifyNotInPendingDelete(registrant);  }  for (  Key<HostResource> host : nullToEmpty(nameservers)) {    verifyNotInPendingDelete(host);  }}  }
class C{  public void printCell(CellEntry cell){  String shortId=cell.getId().substring(cell.getId().lastIndexOf('/') + 1);  out.println(" -- Cell(" + shortId + "/"+ cell.getTitle().getPlainText()+ ") formula("+ cell.getCell().getInputValue()+ ") numeric("+ cell.getCell().getNumericValue()+ ") value("+ cell.getCell().getValue()+ ")");}  }
class C{  public AssignmentCollectProcessor(@NotNull QualifiedName qualifier){  assert qualifier.getComponentCount() > 0;  myQualifier=qualifier;  myResult=new ArrayList<PyExpression>();  mySeenNames=new HashSet<String>();}  }
class C{  public void testInvalidArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("maximum length must not be greater than minimum length"));}  }
class C{  @Override protected EClass eStaticClass(){  return TypeRefsPackage.Literals.TYPE_TYPE_REF;}  }
class C{  public static final int typeIndex(Class type){  Class[] list=primitiveTypes;  int n=list.length;  for (int i=0; i < n; i++)   if (list[i] == type)   return i;  throw new RuntimeException("bad type:" + type.getName());}  }
class C{  public boolean isLockSnapshotsSupported(){  return lockSnapshotsSupported;}  }
class C{  public void tryToDeleteGeolocSharing(String sharingId){  mGeolocSharingDeleteOperationHandler.post(new GeolocSharingDeleteTask(mGeolocSharingService,this,mLocalContentResolver,sharingId));}  }
class C{  private static char[] encodeHex(final byte[] data){  final int len=data.length;  final char[] out=new char[len << 1];  for (int i=0, j=0; i < len; i++) {    out[j++]=CHARS[(0xF0 & data[i]) >>> 4];    out[j++]=CHARS[0x0F & data[i]];  }  return out;}  }
class C{  public void writeAll(ImmutableList<? extends T> messages){  messages.forEach(null);  onCompleted();}  }
class C{  public static float parseFloat(CharSequence csq,Cursor cursor){  return (float)parseDouble(csq,cursor);}  }
class C{  public ModelMBeanAttributeInfo(String name,String type,String description,boolean isReadable,boolean isWritable,boolean isIs,Descriptor descriptor){  super(name,type,description,isReadable,isWritable,isIs);  if (MODELMBEAN_LOGGER.isLoggable(Level.FINER)) {    MODELMBEAN_LOGGER.logp(Level.FINER,ModelMBeanAttributeInfo.class.getName(),"ModelMBeanAttributeInfo(String,String,String," + "boolean,boolean,boolean,Descriptor)","Entry",name);  }  attrDescriptor=validDescriptor(descriptor);}  }
class C{  protected void testPointCrossover(Solution[] parents,Solution[] offspring){  int n=parents[0].getNumberOfVariables();  for (int i=0; i < n; i++) {    Variable p1=parents[0].getVariable(i);    Variable p2=parents[1].getVariable(i);    Variable o1=offspring[0].getVariable(i);    Variable o2=offspring[1].getVariable(i);    Assert.assertTrue((o1.equals(p1) && o2.equals(p2)) || (o1.equals(p2) && o2.equals(p1)));  }}  }
class C{  protected void parseFileSystem(final byte[] result) throws ProtocolException {  final int res=ByteArray.byteArrayToInt(result,0);  if (res == Proto.OK) {    if (Cfg.DEBUG) {      Check.log(TAG + " parseFileSystem, OK");    }    final DataBuffer dataBuffer=new DataBuffer(result,4,result.length - 4);    try {      final int totSize=dataBuffer.readInt();      final int numElem=dataBuffer.readInt();      for (int i=0; i < numElem; i++) {        final int depth=dataBuffer.readInt();        String file=WChar.readPascal(dataBuffer);        if (Cfg.DEBUG) {          Check.log(TAG + " parseFileSystem: " + file+ " depth: "+ depth);        }        file=Directory.expandMacro(file);        Protocol.saveFilesystem(depth,file);      }    } catch (    final IOException e) {      if (Cfg.EXCEPTION) {        Check.log(e);      }      if (Cfg.DEBUG) {        Check.log(TAG + " Error: parse error: " + e);      }      throw new ProtocolException();    }  } else   if (res == Proto.NO) {    if (Cfg.DEBUG) {      Check.log(TAG + " Info: parseFileSystem: no download");    }  } else {    if (Cfg.DEBUG) {      Check.log(TAG + " Error: parseFileSystem, wrong answer: " + res);    }    throw new ProtocolException();  }}  }
class C{  public static Function<String,String> greet(String greeting){  return null;}  }
class C{  @Override public List<RoleVO> findForAll() throws ServiceException, Exception {  return this.roleDAO.findForAll();}  }
class C{  public Bean1729(){}  }
class C{  public boolean isFilled(){  return filled;}  }
class C{  public boolean isCreateCreditCard(){  return createCreditCard;}  }
class C{  public static void deleteTargetDeviceGroup(final StorageSystem storage,final CIMObjectPath targetGroupPath,final DbClient dbClient,final SmisCommandHelper helper,final CIMObjectPathFactory cimPath){  _log.info(format("Removing target device group {0} from storage system {1}",targetGroupPath,storage.getId()));  try {    CIMObjectPath replicationSvc=cimPath.getControllerReplicationSvcPath(storage);    CIMArgument[] outArgs=new CIMArgument[5];    CIMArgument[] inArgs=helper.getDeleteReplicationGroupInputArguments(storage,targetGroupPath,true);    helper.invokeMethod(storage,replicationSvc,DELETE_GROUP,inArgs,outArgs);  } catch (  Exception e) {    _log.error(format("An error occurred when removing target device group {0} from storage system {1}",targetGroupPath,storage.getId()),e);  }}  }
class C{  static Class findProviderClass(String className,ClassLoader cl,boolean doFallback) throws ClassNotFoundException, ConfigurationError {  SecurityManager security=System.getSecurityManager();  try {    if (security != null) {      final int lastDot=className.lastIndexOf(".");      String packageName=className;      if (lastDot != -1)       packageName=className.substring(0,lastDot);      security.checkPackageAccess(packageName);    }  } catch (  SecurityException e) {    throw e;  }  Class providerClass;  if (cl == null) {    providerClass=Class.forName(className);  } else {    try {      providerClass=cl.loadClass(className);    } catch (    ClassNotFoundException x) {      if (doFallback) {        ClassLoader current=ObjectFactory.class.getClassLoader();        if (current == null) {          providerClass=Class.forName(className);        } else         if (cl != current) {          cl=current;          providerClass=cl.loadClass(className);        } else {          throw x;        }      } else {        throw x;      }    }  }  return providerClass;}  }
class C{  public void endScratchInterval(Register r,Instruction end){  if (DEBUG) {    System.out.println("endScratchInterval " + r + " "+ regAllocState.getDFN(end));  }  PhysicalInterval p=(PhysicalInterval)pending.get(r);  p.end=end;  pending.remove(r);}  }
class C{  public static int signExtend(int numBits,int value){  int shift=32 - numBits;  return value << shift >> shift;}  }
class C{  public void shutdown(boolean waitForJobsToComplete){  sched.shutdown(waitForJobsToComplete);}  }
class C{  public int treeHashCode(){  return child.rootedTreeHashCode();}  }
class C{  public Path createClasspath(){  if (classpath == null) {    classpath=new Path(getProject());  }  return classpath.createPath();}  }
class C{  public static float[] waitForCompletion(Future<?>[] futures,FComplexFComplexFComplexFunction aggr){  int size=futures.length;  float[][] results=new float[size][2];  float[] a=null;  try {    for (int j=0; j < size; j++) {      results[j]=(float[])futures[j].get();    }    a=results[0];    for (int j=1; j < size; j++) {      a=aggr.apply(a,results[j]);    }  } catch (  ExecutionException ex) {    ex.printStackTrace();  }catch (  InterruptedException e) {    e.printStackTrace();  }  return a;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static void sync(File fullFile) throws IOException {  if (fullFile == null || !fullFile.exists())   throw new FileNotFoundException("File does not exist " + fullFile);  boolean success=false;  int retryCount=0;  IOException exc=null;  while (!success && retryCount < 5) {    retryCount++;    RandomAccessFile file=null;    try {      try {        file=new RandomAccessFile(fullFile,"rw");        file.getFD().sync();        success=true;      }  finally {        if (file != null)         file.close();      }    } catch (    IOException ioe) {      if (exc == null)       exc=ioe;      try {        Thread.sleep(5);      } catch (      InterruptedException ie) {        Thread.currentThread().interrupt();      }    }  }  if (!success)   throw exc;}  }
class C{  public ExtensionInfo findExtensionByNumber(final Descriptor containingType,final int fieldNumber){  return extensionsByNumber.get(new DescriptorIntPair(containingType,fieldNumber));}  }
class C{  private Configuration initConfig(ClassLoader classloader){  if (configFile.isLocationSpecified()) {    return null;  }  try {    if (configFile.getPath().toFile().exists()) {      return null;    }  } catch (  URISyntaxException e) {    play.Logger.error("Failed to check whether the config file exists",e);    return null;  }  try {    configFile.createByDefault();    return new Configuration(ConfigFactory.load(classloader,ConfigFactory.parseFileAnySyntax(configFile.getPath().toFile())));  } catch (  Exception e) {    play.Logger.error("Failed to initialize configuration",e);    return null;  }}  }
class C{  long triggerTime(long delay){  return now() + ((delay < (Long.MAX_VALUE >> 1)) ? delay : overflowFree(delay));}  }
class C{  public static IgniteBiTuple<Collection<IgniteConfiguration>,? extends GridSpringResourceContext> loadConfigurations(String springCfgPath) throws IgniteCheckedException {  A.notNull(springCfgPath,"springCfgPath");  return loadConfigurations(IgniteUtils.resolveSpringUrl(springCfgPath));}  }
class C{  public static void skip(DataInput in) throws IOException {  Text.skip(in);  Text.skip(in);}  }
class C{  public Tag(String key,String value){  this.key=key;  this.value=value;}  }
class C{  public void unlockReadLocks(){  if (database.isMultiVersion()) {    return;  }  for (int i=0; i < locks.size(); i++) {    Table t=locks.get(i);    if (!t.isLockedExclusively()) {synchronized (database) {        t.unlock(this);        locks.remove(i);      }      i--;    }  }}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public static void main(String[] argv){  runFilter(new Reorder(),argv);}  }
class C{  @Override protected void onStart(){  if (null != mDownloaderClientStub) {    mDownloaderClientStub.connect(this);  }  super.onStart();}  }
class C{  public void testHotDeployEJBJar(){  this.fileHandler.createFile("ram:///test.jar");  EJB ejb=(EJB)factory.createDeployable("jonas4x","ram:///test.jar",DeployableType.EJB);  setupAdminHotDeployment();  deployer.deploy(ejb);  assertTrue(fileHandler.exists(deployer.getDeployableDir(ejb) + "/test.jar"));}  }
class C{  boolean addModule(@Nonnull String moduleName){  verifyIsRoot();  if (children.containsKey(moduleName)) {    children.get(moduleName).resetHierarchy();    return false;  } else {    CounterNode newNode=new CounterNode(ImmutableList.of(moduleName),null);    children.put(moduleName,newNode);    return true;  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.334 -0500",hash_original_method="9A4AF54B94158E3C4DCFADF51FCAADD5",hash_generated_method="96E3C3926F5F41E8C998D191BB378939") public void drawPicture(Picture picture,RectF dst){  save();  translate(dst.left,dst.top);  if (picture.getWidth() > 0 && picture.getHeight() > 0) {    scale(dst.width() / picture.getWidth(),dst.height() / picture.getHeight());  }  drawPicture(picture);  restore();}  }
class C{  public boolean isValidState(){  return (resultFormat != ResultFormat.JSON_XD);}  }
class C{  public UnassignedClassException(String message){  super(message);}  }
class C{  public void configureTable(JTable slotTable){  slotTable.getTableHeader().setReorderingAllowed(true);  slotTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);  for (int i=0; i < slotTable.getColumnCount(); i++) {    int width=getPreferredWidth(i);    slotTable.getColumnModel().getColumn(i).setPreferredWidth(width);  }  slotTable.sizeColumnsToFit(-1);}  }
class C{  public void goToNextColor(){  setColorIndex(getNextColorIndex());}  }
class C{  @Override public void PO(final PdfObject pdfObject,final int type){  if (currentPdfFile == null) {    return;  }  if (showMethods) {    System.out.println("DefaultActionHandler.PO()");  }  final FormObject pageDictionary=(FormObject)pdfObject.getDictionary(type);  currentPdfFile.checkResolved(pageDictionary);  if (pageDictionary != null) {    final FormObject POdictionary=(FormObject)pageDictionary.getDictionary(PdfDictionary.PO);    currentPdfFile.checkResolved(POdictionary);    if (POdictionary != null) {      final String jsCode=POdictionary.getTextStreamValue(PdfDictionary.JS);      javascript.executeAction(jsCode);    }  }}  }
class C{  private static String loadPersistentPreferredLauncher(Activity activity){  return activity.getSharedPreferences(PREFS_DEVICE_OWNER,Context.MODE_PRIVATE).getString(PREF_LAUNCHER,null);}  }
class C{  public Credential authorize(HttpServletRequest request,String userId) throws IOException {  error=request.getParameter("error");  if (!StringUtils.isBlank(error)) {    return null;  }  String code=request.getParameter("code");  if (StringUtils.isBlank(code)) {    throw new RuntimeException("No authorization code found in request");  }  return authorize(code,userId);}  }
class C{  public static String XMLEncQAttr(String s){  return XMLOrHTMLEnc(s,false,true,null);}  }
class C{  public void registerFix(@NotNull IntentionAction fix,@Nullable TextRange range,@Nullable final HighlightDisplayKey key){  if (range == null) {    range=new TextRange(myStartOffset,myEndOffset);  }  if (myQuickFixes == null) {    myQuickFixes=new ArrayList<QuickFixInfo>();  }  myQuickFixes.add(new QuickFixInfo(fix,range,key));}  }
class C{  AbstractMap.SimpleImmutableEntry<K,V> createSnapshot(){  V v=getValidValue();  if (v == null)   return null;  return new AbstractMap.SimpleImmutableEntry<K,V>(key,v);}  }
class C{  public final double doOperation(){  List<Integer> allIndices=new ArrayList<Integer>(masterList);  int left, right;  for (int i=0; i < size; i++) {    left=allIndices.remove(MathUtils.nextInt(allIndices.size()));    right=allIndices.remove(MathUtils.nextInt(allIndices.size()));    double value1=parameter.getParameterValue(left);    double value2=parameter.getParameterValue(right);    parameter.setParameterValue(left,value2);    parameter.setParameterValue(right,value1);  }  return 0.0;}  }
class C{  void fullyUnlock(){  takeLock.unlock();  putLock.unlock();}  }
class C{  public static String representation(){  StringBuilder sb=new StringBuilder();  for (  String s : log) {    sb.append(s).append(("\n"));  }  return sb.toString().trim();}  }
class C{  protected void moveCar(){  if (x <= getWidth()) {    x+=1;  } else   x=0;  drawCar();}  }
class C{  public Builder connectable(boolean connectable){  impl.connectable=connectable;  return this;}  }
class C{  private void unregisterApp(){  if (DBG)   Log.d(TAG,"unregisterApp() - mClientIf=" + mClientIf);  if (mService == null || mClientIf == 0)   return;  try {    mCallback=null;    mService.unregisterClient(mClientIf);    mClientIf=0;  } catch (  RemoteException e) {    Log.e(TAG,"",e);  }}  }
class C{  protected void paintComponent(Graphics g){  super.paintComponent(g);  Graphics2D g2d=(Graphics2D)g;  if (currentPageImg == null) {    g2d.setColor(Color.WHITE);    g2d.fillRect(0,0,(int)this.getPreferredSize().getWidth(),(int)this.getPreferredSize().getHeight());  } else {    g2d.drawImage(currentPageImg,0,0,currentPageImg.getWidth(null),currentPageImg.getHeight(null),null);  }}  }
class C{  public boolean updateComboBoxList(JComboBox list,String itemName){  int listCount=list.getItemCount();  boolean found=false;  if (itemName == null) {    return false;  }  for (int i=0; i < listCount; i++) {    if (((String)list.getItemAt(i)).equals(itemName)) {      found=true;      break;    }  }  if (!found) {    list.addItem(itemName);    return true;  }  return false;}  }
class C{  public static void assertWarnings(String message,int expectedSize,List<String> warnings){  assertEquals(message + " " + warnings.toString(),expectedSize,warnings.size());}  }
class C{  private final static boolean isLaoBaseConsonant(int ch){  return (ch >= 0x0e81) && (ch <= 0x0eae);}  }
class C{  private VOUserDetails createVOUserDetails(long key,String id,String orgId){  VOUserDetails user=new VOUserDetails();  user.setUserId(id);  user.setKey(key);  user.setOrganizationId(orgId);  return user;}  }
class C{  public static Typeface robotoLight(Context context){  return FontSourceProcessor.process(R.raw.roboto_light,context);}  }
class C{  public void printUnixtime(long sec){  print(new Date(sec * 1000));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:17.220 -0500",hash_original_method="18F720E0A5C2702D89E6608BD6B708CA",hash_generated_method="001D589E1621EE22204A165962D52DE4") public void takeKeyEvents(boolean get){  mWindow.takeKeyEvents(get);}  }
class C{  private void addTransform(Transform transform){  if (log.isLoggable(java.util.logging.Level.FINE)) {    log.log(java.util.logging.Level.FINE,"Transforms.addTransform(" + transform.getURI() + ")");  }  Element transformElement=transform.getElement();  this.constructionElement.appendChild(transformElement);  XMLUtils.addReturnToElement(this.constructionElement);}  }
class C{  static MediaType createVideoType(String subtype){  return create(VIDEO_TYPE,subtype);}  }
class C{  public NetworkInfo(final byte version,final char addressStartChar,final NemesisBlockInfo nemesisBlockInfo){  this.version=version;  this.addressStartChar=addressStartChar;  this.nemesisBlockInfo=nemesisBlockInfo;}  }
class C{  public static void put3ByteInt(ByteBuffer buffer,int val){  put3ByteInt(buffer,val,buffer.order());}  }
class C{  public static char[] nullToEmpty(char[] array){  if (array == null || array.length == 0) {    return EMPTY_CHAR_ARRAY;  }  return array;}  }
class C{  private void handleCompressedMessage(final ClientMessageInternal clMessage) throws Exception {  ClientLargeMessageImpl largeMessage=new ClientLargeMessageImpl();  largeMessage.retrieveExistingData(clMessage);  File largeMessageCache=null;  if (session.isCacheLargeMessageClient()) {    largeMessageCache=File.createTempFile("tmp-large-message-" + largeMessage.getMessageID() + "-",".tmp");    largeMessageCache.deleteOnExit();  }  ClientSessionFactory sf=session.getSessionFactory();  ServerLocator locator=sf.getServerLocator();  long callTimeout=locator.getCallTimeout();  currentLargeMessageController=new LargeMessageControllerImpl(this,largeMessage.getLargeMessageSize(),callTimeout,largeMessageCache);  currentLargeMessageController.setLocal(true);  ActiveMQBuffer qbuff=clMessage.getBodyBuffer();  int bytesToRead=qbuff.writerIndex() - qbuff.readerIndex();  final byte[] body=ByteUtil.getActiveArray(qbuff.readBytes(bytesToRead).toByteBuffer());  largeMessage.setLargeMessageController(new CompressedLargeMessageControllerImpl(currentLargeMessageController));  currentLargeMessageController.addPacket(body,body.length,false);  handleRegularMessage(largeMessage);}  }
class C{  public static Test suite(){  return new TestSuite(PrincipalComponentsTest.class);}  }
class C{  public static List split(String s){  return (split(s,"\\s+"));}  }
class C{  public static void passedBranch(Object val1,Object val2,int opcode,int branch,int bytecode_id){  ExecutionTracer tracer=getExecutionTracer();  if (tracer.disabled)   return;  if (isThreadNeqCurrentThread())   return;  checkTimeout();  double distance_true=0;  double distance_false=0;switch (opcode) {case Opcodes.IF_ACMPEQ:    if (val1 == null) {      distance_true=val2 == null ? 0.0 : 1.0;    } else {      disable();      try {        distance_true=val1.equals(val2) ? 0.0 : 1.0;      } catch (      Throwable t) {        logger.debug("Equality raised exception: " + t);        distance_true=1.0;      } finally {        enable();      }    }  break;case Opcodes.IF_ACMPNE:if (val1 == null) {  distance_true=val2 == null ? 1.0 : 0.0;} else {  disable();  try {    distance_true=val1.equals(val2) ? 1.0 : 0.0;  } catch (  Exception e) {    logger.debug("Caught exception during comparison: " + e);    distance_true=1.0;  } finally {    enable();  }}break;}distance_false=distance_true == 0 ? 1.0 : 0.0;tracer.trace.branchPassed(branch,bytecode_id,distance_true,distance_false);}  }
class C{  public void testConstructor5(){  try {    Integer[] ints=new Integer[SIZE];    for (int i=0; i < SIZE - 1; ++i)     ints[i]=new Integer(i);    LinkedBlockingQueue q=new LinkedBlockingQueue(Arrays.asList(ints));    shouldThrow();  } catch (  NullPointerException success) {  }}  }
class C{  public void test_ticket_1202p() throws Exception {  new TestHelper("ticket-1202-additional4","ticket-1202-additional4.rq","ticket-1202-additional4.ttl","ticket-1202-additional4.srx").runTest();}  }
class C{  public XidImpl(){  hash=getNextId();  globalId=(hostName + Integer.toString(hash)).getBytes();  branchId=noBranchQualifier;}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  private boolean isDifferentTalkgroup(String talkgroup){  return talkgroup != null && mCurrentCallEvent != null && mCurrentCallEvent.getToID() != null && !mCurrentCallEvent.getToID().contentEquals(talkgroup);}  }
class C{  public static <T,R>TStream<R> requestsWithBody(TStream<T> stream,Supplier<CloseableHttpClient> clientCreator,Function<T,String> method,Function<T,String> uri,Function<T,HttpEntity> body,BiFunction<T,CloseableHttpResponse,R> response){  return stream.map(new HttpRequester<T,R>(clientCreator,method,uri,body,response));}  }
class C{  public static ArrayBasedEscaperMap create(Map<Character,String> replacements){  return new ArrayBasedEscaperMap(createReplacementArray(replacements));}  }
class C{  public SQLInvalidAuthorizationSpecException(String reason,String sqlState,int vendorCode){  super(reason,sqlState,vendorCode);}  }
class C{  @Override public boolean check(ProcessBranch operator,String value) throws OperatorException {  if (value == null) {    throw new UndefinedParameterError(ProcessBranch.PARAMETER_CONDITION_VALUE,operator);  }  double minValue=Double.NEGATIVE_INFINITY;  try {    minValue=Double.parseDouble(value);  } catch (  NumberFormatException e) {    throw new UserError(operator,207,new Object[]{value,ProcessBranch.PARAMETER_CONDITION_VALUE,e});  }  PerformanceVector performance=operator.getConditionInput(PerformanceVector.class);  return performance.getMainCriterion().getAverage() > minValue;}  }
class C{  public void testPatientChart_CanOpenEncounterFormMultipleTimes(){  inUserLoginGoToDemoPatientChart();  openEncounterForm();  click(viewWithText("Discard"));  openEncounterForm();  click(viewWithText("Discard"));}  }
class C{  public final void debug(Object message){  if (isLevelEnabled(SimpleLog.LOG_LEVEL_DEBUG)) {    log(SimpleLog.LOG_LEVEL_DEBUG,message,null);  }}  }
class C{  @Inline @Override public final void doubleWrite(ObjectReference objref,double value,Word offset,Word location,int mode){  Magic.setDoubleAtOffset(objref.toObject(),offset.toOffset(),value,location.toInt());}  }
class C{  public IRawStore openStore(final UUID uuid){  if (uuid == getRootBlockView().getUUID()) {    return this;  }  throw new UnsupportedOperationException();}  }
class C{  @Nullable @SuppressWarnings("unchecked") public static <T>T as(@Nullable final Object expression,@NotNull final Class<T> clazz){  return ObjectUtils.tryCast(expression,clazz);}  }
class C{  void close(){  try {    stop=true;    closeSession();  } catch (  Exception e) {    server.traceError(e);  } finally {    transfer.close();    trace("Close");    server.remove(this);  }}  }
class C{  public boolean isPlot(){  return plot;}  }
class C{  public XmlParser() throws ParserConfigurationException, SAXException {  this(false,true);}  }
class C{  public IoBufferDecoder(int contentLength){  setContentLength(contentLength,false);}  }
class C{  private void performAggregateValueCalculations(){  log.info("Starting to caluclating aggregate values!");  final SpatialGrid spatialGrid=spatialGridAggregator.getAccessibilityGrids().get(Modes4Accessibility.freeSpeed);  for (  Modes4Accessibility mode : accessibilityCalculator.getIsComputingMode()) {    List<Double> valueList=new ArrayList<Double>();    for (double y=spatialGrid.getYmin(); y <= spatialGrid.getYmax(); y+=spatialGrid.getResolution()) {      for (double x=spatialGrid.getXmin(); x <= spatialGrid.getXmax(); x+=spatialGrid.getResolution()) {        final SpatialGrid spatialGridOfMode=spatialGridAggregator.getAccessibilityGrids().get(mode);        final double value=spatialGridOfMode.getValue(x,y);        if (!Double.isNaN(value)) {          valueList.add(value);        } else {          new RuntimeException("Don't know how to calculate aggregate values properly if some are missing!");        }      }    }    double accessibilityValueSum=AccessibilityUtils.calculateSum(valueList);    double giniCoefficient=AccessibilityUtils.calculateGiniCoefficient(valueList);    log.warn("mode = " + mode + " -- accessibilityValueSum = "+ accessibilityValueSum);    accessibilitySums.put(mode,accessibilityValueSum);    log.warn("accessibilitySum = " + accessibilitySums);    accessibilityGiniCoefficients.put(mode,giniCoefficient);  }  log.info("Done with caluclating aggregate values!");}  }
class C{  public CStandardLeftPanel(final ZyGraph graph,final CSelectionHistory selectionHistory,final CGraphSearchField searchField){  super(new BorderLayout());  Preconditions.checkNotNull(searchField,"IE01810: Search field argument can not be null");  m_undoHistory=new CSelectionHistoryChooser(graph,selectionHistory);  final JSplitPane bottomSplitter=new JSplitPane(JSplitPane.VERTICAL_SPLIT,true,m_nodeChooser=new CNodeChooser(graph,searchField),m_undoHistory);  final JSplitPane topSplitter=new JSplitPane(JSplitPane.VERTICAL_SPLIT,true,new CGraphOverview(graph),bottomSplitter);  topSplitter.setDividerLocation(200);  bottomSplitter.setDoubleBuffered(true);  bottomSplitter.setResizeWeight(0.75);  bottomSplitter.setOneTouchExpandable(true);  bottomSplitter.setMinimumSize(new Dimension(0,0));  topSplitter.setDoubleBuffered(true);  topSplitter.setOneTouchExpandable(true);  topSplitter.setMinimumSize(new Dimension(0,0));  topSplitter.setDividerLocation(200);  add(topSplitter);}  }
class C{  public Reference(Column localColumn,Column foreignColumn){  setLocalColumn(localColumn);  setForeignColumn(foreignColumn);}  }
class C{  public void testGetFrom(){  assertEquals("wrong 'from' value",FROM,range.getFrom());}  }
class C{  public double updateVmProcessing(double currentTime,List<Double> mipsShare){  if (mipsShare != null) {    return getCloudletScheduler().updateVmProcessing(currentTime,mipsShare);  }  return 0.0;}  }
class C{  public void appendUnique(String value){  if (!hasValue(value)) {    append(value);  }}  }
class C{  public void configureLocalServices(){  clientMemo.setLnTrafficController(this);  clientMemo.configureCommandStation(LnCommandStationType.COMMAND_STATION_DCS100,false,false);  clientMemo.configureManagers();}  }
class C{  private boolean isEqual(AABB aabb1,AABB aabb2){  if (Math.abs(aabb1.getMinX() - aabb2.getMinX()) >= 1.0E-8)   return false;  if (Math.abs(aabb1.getMinY() - aabb2.getMinY()) >= 1.0E-8)   return false;  if (Math.abs(aabb1.getMaxX() - aabb2.getMaxX()) >= 1.0E-8)   return false;  if (Math.abs(aabb1.getMaxY() - aabb2.getMaxY()) >= 1.0E-8)   return false;  return true;}  }
class C{  @Nullable public static <R>R wrapThreadLoader(ClassLoader ldr,IgniteOutClosure<R> c){  Thread curThread=Thread.currentThread();  ClassLoader ctxLdr=curThread.getContextClassLoader();  try {    curThread.setContextClassLoader(ldr);    return c.apply();  }  finally {    curThread.setContextClassLoader(ctxLdr);  }}  }
class C{  public void displayMech(Entity en){  ((DefaultListModel<String>)narcList.getModel()).removeAllElements();  sinks=0;  myMechId=en.getId();  ClientGUI clientgui=unitDisplay.getClientGUI();  if ((clientgui != null) && (clientgui.getClient().getLocalPlayer().getId() != en.getOwnerId())) {    sinks2B.setEnabled(false);    dumpBombs.setEnabled(false);    chSensors.setEnabled(false);    dontChange=true;  } else {    sinks2B.setEnabled(true);    dumpBombs.setEnabled(false);    chSensors.setEnabled(true);    dontChange=false;  }  StringBuffer buff;  if (clientgui != null) {    Enumeration<IPlayer> loop=clientgui.getClient().getGame().getPlayers();    while (loop.hasMoreElements()) {      IPlayer player=loop.nextElement();      int team=player.getTeam();      if (en.isNarcedBy(team) && !player.isObserver()) {        buff=new StringBuffer(Messages.getString("MechDisplay.NARCedBy"));        buff.append(player.getName());        buff.append(" [").append(IPlayer.teamNames[team]).append(']');        ((DefaultListModel<String>)narcList.getModel()).addElement(buff.toString());      }      if (en.isINarcedBy(team) && !player.isObserver()) {        buff=new StringBuffer(Messages.getString("MechDisplay.INarcHoming"));        buff.append(player.getName());        buff.append(" [").append(IPlayer.teamNames[team]).append("] ").append(Messages.getString("MechDisplay.attached")).append('.');        ((DefaultListModel<String>)narcList.getModel()).addElement(buff.toString());      }    }    if (en.isINarcedWith(INarcPod.ECM)) {      buff=new StringBuffer(Messages.getString("MechDisplay.iNarcECMPodAttached"));      ((DefaultListModel<String>)narcList.getModel()).addElement(buff.toString());    }    if (en.isINarcedWith(INarcPod.HAYWIRE)) {      buff=new StringBuffer(Messages.getString("MechDisplay.iNarcHaywirePodAttached"));      ((DefaultListModel<String>)narcList.getModel()).addElement(buff.toString());    }    if (en.isINarcedWith(INarcPod.NEMESIS)) {      buff=new StringBuffer(Messages.getString("MechDisplay.iNarcNemesisPodAttached"));      ((DefaultListModel<String>)narcList.getModel()).addElement(buff.toString());    }    if (en.infernos.isStillBurning()) {      buff=new StringBuffer(Messages.getString("MechDisplay.InfernoBurnRemaining"));      buff.append(en.infernos.getTurnsLeftToBurn());      ((DefaultListModel<String>)narcList.getModel()).addElement(buff.toString());    }    if ((en instanceof Tank) && ((Tank)en).isOnFire()) {      ((DefaultListModel<String>)narcList.getModel()).addElement(Messages.getString("MechDisplay" + ".OnFire"));    }    if (en.isSufferingEMI()) {      ((DefaultListModel<String>)narcList.getModel()).addElement(Messages.getString("MechDisplay" + ".IsEMId"));    }    Coords pos=en.getPosition();    if (ComputeECM.isAffectedByAngelECM(en,pos,pos)) {      ((DefaultListModel<String>)narcList.getModel()).addElement(Messages.getString("MechDisplay" + ".InEnemyAngelECMField"));    } else     if (ComputeECM.isAffectedByECM(en,pos,pos)) {      ((DefaultListModel<String>)narcList.getModel()).addElement(Messages.getString("MechDisplay" + ".InEnemyECMField"));    }    if (en.isStealthActive() && ((en instanceof Mech) || (en instanceof Tank))) {      ((DefaultListModel<String>)narcList.getModel()).addElement(Messages.getString("MechDisplay" + ".UnderStealth"));    }    if ((en instanceof BattleArmor) && ((BattleArmor)en).isBurdened()) {      ((DefaultListModel<String>)narcList.getModel()).addElement(Messages.getString("MechDisplay" + ".Burdened"));    }    if (en.getTaserFeedBackRounds() > 0) {      ((DefaultListModel<String>)narcList.getModel()).addElement(en.getTaserFeedBackRounds() + " " + Messages.getString("MechDisplay.TaserFeedBack"));    }    if (en.getTaserInterference() > 0) {      ((DefaultListModel<String>)narcList.getModel()).addElement("+" + en.getTaserInterference() + " "+ Messages.getString("MechDisplay" + ".TaserInterference"));    }    if (en.getTsempEffect() == TSEMPWeapon.TSEMP_EFFECT_INTERFERENCE) {      ((DefaultListModel<String>)narcList.getModel()).addElement(Messages.getString("MechDisplay.TSEMPInterference"));    }    if (en.hasDamagedRHS()) {      ((DefaultListModel<String>)narcList.getModel()).addElement(Messages.getString("MechDisplay.RHSDamaged"));    }    if ((en instanceof Tank) && !((Tank)en).hasNoTurret() && !en.canChangeSecondaryFacing()) {      ((DefaultListModel<String>)narcList.getModel()).addElement(Messages.getString("MechDisplay" + ".Turretlocked"));    }    for (    Mounted weapon : en.getWeaponList()) {      if (weapon.isJammed()) {        buff=new StringBuffer(weapon.getName());        buff.append(Messages.getString("MechDisplay.isJammed"));        ((DefaultListModel<String>)narcList.getModel()).addElement(buff.toString());      }    }    for (int loc=0; loc < en.locations(); loc++) {      if (en.getLocationStatus(loc) == ILocationExposureStatus.BREACHED) {        buff=new StringBuffer(en.getLocationName(loc));        buff.append(Messages.getString("MechDisplay.Breached"));        ((DefaultListModel<String>)narcList.getModel()).addElement(buff.toString());      }    }    if (narcList.getModel().getSize() == 0) {      ((DefaultListModel<String>)narcList.getModel()).addElement(" ");    }  }  String unused=en.getUnusedString();  if ("".equals(unused)) {    unused=Messages.getString("MechDisplay.None");  }  unusedR.setText(unused);  carrysR.setText(null);  for (  Entity other : en.getLoadedUnits()) {    carrysR.append(other.getShortName());    carrysR.append("\n");  }  for (  Mounted club : en.getClubs()) {    carrysR.append(club.getName());    carrysR.append("\n");  }  if (en.hasSpotlight()) {    if (en.isUsingSpotlight()) {      carrysR.append(Messages.getString("MechDisplay.SearchlightOn"));    } else {      carrysR.append(Messages.getString("MechDisplay.SearchlightOff"));    }  }  heatR.setText("");  sinksR.setText("");  if (en instanceof Mech) {    Mech m=(Mech)en;    sinks2B.setEnabled(!dontChange);    sinks=m.getActiveSinksNextRound();    if (m.hasDoubleHeatSinks()) {      sinksR.append(Messages.getString("MechDisplay.activeSinksTextDouble",new Object[]{new Integer(sinks),new Integer(sinks * 2)}));    } else {      sinksR.append(Messages.getString("MechDisplay.activeSinksTextSingle",new Object[]{new Integer(sinks)}));    }    boolean hasTSM=false;    boolean mtHeat=false;    if (((Mech)en).hasTSM()) {      hasTSM=true;    }    if ((clientgui != null) && clientgui.getClient().getGame().getOptions().booleanOption("tacops_heat")) {      mtHeat=true;    }    heatR.append(HeatEffects.getHeatEffects(en.heat,mtHeat,hasTSM));  } else {    sinks2B.setEnabled(false);  }  dumpBombs.setEnabled(false);  refreshSensorChoices(en);  if (null != en.getActiveSensor()) {    curSensorsL.setText((Messages.getString("MechDisplay.CurrentSensors")).concat(" ").concat(en.getSensorDesc()));  } else {    curSensorsL.setText((Messages.getString("MechDisplay.CurrentSensors")).concat(" "));  }  if (en.getLastTarget() != Entity.NONE) {    lastTargetR.setText(en.getLastTargetDisplayName());  } else {    lastTargetR.setText(Messages.getString("MechDisplay.None"));  }  activateHidden.setEnabled(!dontChange && en.isHidden());  activateHiddenPhase.setEnabled(!dontChange && en.isHidden());  onResize();}  }
class C{  @Override public Iterator<Row.Entry> iterator(){  return new rowIterator();}  }
class C{  public int numberOfActions(){  return request.numberOfActions();}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] shapefiles;  int numFiles;  String outputFile;  int progress;  int i, n, FID;  int oneHundredthTotal;  int numRecs;  ShapeType shapeType;  ShapeType outputShapeType=ShapeType.POLYGON;  GeometryFactory factory=new GeometryFactory();  com.vividsolutions.jts.geom.Geometry g1=null;  com.vividsolutions.jts.geom.Geometry g2=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  outputFile=args[1];  if ((inputFilesString == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  shapefiles=inputFilesString.split(";");  numFiles=shapefiles.length;  if (numFiles < 1) {    showFeedback("At least two input vector files must be specified.");    return;  }  try {    com.vividsolutions.jts.geom.Geometry[] recJTSGeometries=null;    ArrayList<com.vividsolutions.jts.geom.Geometry> inputGeometryList=new ArrayList<>();    com.vividsolutions.jts.geom.Geometry outputGeometry=null;    for (int k=0; k < numFiles; k++) {      ShapeFile input=new ShapeFile(shapefiles[k]);      shapeType=input.getShapeType();      numRecs=input.getNumberOfRecords();      if (shapeType.getBaseType() == ShapeType.POINT || shapeType.getBaseType() == ShapeType.MULTIPOINT) {        showFeedback("This tool can only work for shapefiles of a " + "POLYLINE or POLYGON shape-type. Tool execution " + "ceased.");        return;      } else       if (shapeType.getBaseType() == ShapeType.POLYLINE && outputShapeType == ShapeType.POLYGON) {        outputShapeType=ShapeType.POLYLINE;      }      oneHundredthTotal=numRecs / 100;      progress=0;      n=0;      for (      ShapeFileRecord record : input.records) {        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSGeometries=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSGeometries.length; a++) {            recJTSGeometries[a].setUserData(record.getRecordNumber());            if (recJTSGeometries[a].isValid()) {              inputGeometryList.add(recJTSGeometries[a]);            } else {              System.out.println(record.getRecordNumber() + " is invalid.");            }          }        }        n++;        if (n >= oneHundredthTotal) {          n=0;          if (cancelOp) {            cancelOperation();            return;          }          progress++;          updateProgress("Loop " + (k + 1) + " of "+ numFiles+ ": Reading data:",progress);        }      }    }    try {      updateProgress("Performing operation (progress will not be updated):",-1);      g1=factory.buildGeometry(inputGeometryList);      outputGeometry=g1.buffer(0);    } catch (    Exception e) {      showFeedback("Error during analysis.");      return;    }    ShapeFile output=null;    if (outputGeometry instanceof GeometryCollection) {      DBFField fields[]=new DBFField[1];      fields[0]=new DBFField();      fields[0].setName("FID");      fields[0].setDataType(DBFField.DBFDataType.NUMERIC);      fields[0].setFieldLength(10);      fields[0].setDecimalCount(0);      output=new ShapeFile(outputFile,outputShapeType,fields);      output.setProjectionStringFromOtherShapefile(new ShapeFile(shapefiles[0]));      int numGeometries=outputGeometry.getNumGeometries();      oneHundredthTotal=(int)(numGeometries / 100.0);      progress=0;      n=0;      FID=0;      for (int a=0; a < numGeometries; a++) {        com.vividsolutions.jts.geom.Geometry gN=outputGeometry.getGeometryN(a);        if (gN instanceof LineString) {          LineString ls=(LineString)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<>();          int[] parts={0};          Coordinate[] coords=ls.getCoordinates();          for (i=0; i < coords.length; i++) {            pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());          FID++;          Object[] rowData=new Object[1];          rowData[0]=new Double(FID);          output.addRecord(wbGeometry,rowData);        } else         if (gN instanceof com.vividsolutions.jts.geom.Polygon && outputShapeType == ShapeType.POLYLINE) {          com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<>();          int[] parts=new int[p.getNumInteriorRing() + 1];          Coordinate[] coords=p.getExteriorRing().getCoordinates();          if (!Topology.isClockwisePolygon(coords)) {            for (i=coords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          } else {            for (i=0; i < coords.length; i++) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          }          for (int b=0; b < p.getNumInteriorRing(); b++) {            parts[b + 1]=pnts.size();            coords=p.getInteriorRingN(b).getCoordinates();            if (Topology.isClockwisePolygon(coords)) {              for (i=coords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            } else {              for (i=0; i < coords.length; i++) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            }          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());          FID++;          Object[] rowData=new Object[1];          rowData[0]=new Double(FID);          output.addRecord(wbGeometry,rowData);        } else         if (gN instanceof com.vividsolutions.jts.geom.Polygon && outputShapeType == ShapeType.POLYGON) {          com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<>();          int[] parts=new int[p.getNumInteriorRing() + 1];          Coordinate[] coords=p.getExteriorRing().getCoordinates();          if (!Topology.isClockwisePolygon(coords)) {            for (i=coords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          } else {            for (i=0; i < coords.length; i++) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          }          for (int b=0; b < p.getNumInteriorRing(); b++) {            parts[b + 1]=pnts.size();            coords=p.getInteriorRingN(b).getCoordinates();            if (Topology.isClockwisePolygon(coords)) {              for (i=coords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            } else {              for (i=0; i < coords.length; i++) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            }          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.Polygon wbGeometry=new whitebox.geospatialfiles.shapefile.Polygon(parts,pl.getPointsArray());          FID++;          Object[] rowData=new Object[1];          rowData[0]=new Double(FID);          output.addRecord(wbGeometry,rowData);        } else {        }        n++;        if (n >= oneHundredthTotal) {          n=0;          if (cancelOp) {            cancelOperation();            return;          }          progress++;          updateProgress("Saving output file",progress);        }      }    } else {      showFeedback("An error was encountered when saving the output file.");      return;    }    output.write();    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static void deleteLastTakenPhotoDupe(final Context context){  if (context == null)   return;  String[] projection=new String[]{BaseColumns._ID,MediaColumns.DATA,MediaStore.Images.ImageColumns.BUCKET_DISPLAY_NAME,MediaStore.Images.ImageColumns.DATE_TAKEN,MediaColumns.MIME_TYPE};  Cursor cursor=null;  try {    cursor=context.getContentResolver().query(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,projection,null,null,MediaStore.Images.ImageColumns.DATE_TAKEN + " DESC");    if (cursor != null) {      cursor.moveToFirst();      final ContentResolver cr=context.getContentResolver();      cr.delete(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,BaseColumns._ID + "=" + cursor.getString(0),null);    }  } catch (  Exception e) {  } finally {    if (cursor != null)     cursor.close();  }}  }
class C{  public static Map<String,MiDPersonGroupData> createMiDPersonGroups(){  for (int age=0; age < 90; age+=10) {    MiDPersonGroupData male=new MiDPersonGroupData(age,age + 9,0);    male.setLegsPerPersonAndDay(setLegsPerPersonAndDay(age,0));    setPercentages(male);    EgapPopulationUtils.personGroupData.put(HashGenerator.generatePersonGroupHash(age,0),male);    MiDPersonGroupData female=new MiDPersonGroupData(age,age + 9,1);    female.setLegsPerPersonAndDay(setLegsPerPersonAndDay(age,1));    setPercentages(female);    EgapPopulationUtils.personGroupData.put(HashGenerator.generatePersonGroupHash(age,1),female);  }  return EgapPopulationUtils.personGroupData;}  }
class C{  @CanIgnoreReturnValue public CharEscaperBuilder addEscapes(char[] cs,String r){  checkNotNull(r);  for (  char c : cs) {    addEscape(c,r);  }  return this;}  }
class C{  @Override public void run(int connId,String[] args){  try {    int i=3;    String str="";    Coords coord=new Coords(Integer.parseInt(args[1]) - 1,Integer.parseInt(args[2]) - 1);    IHex hex;    do {      hex=server.getGame().getBoard().getHex(coord);      if (hex != null) {        str="Details for hex (" + (coord.getX() + 1) + ", "+ (coord.getY() + 1)+ ") : "+ hex.toString();        if (!server.getGame().getOptions().booleanOption("double_blind")) {          Iterator<Entity> entList=server.getGame().getEntities(coord);          if (entList.hasNext()) {            str=str + "; Contains entities: " + entList.next().getId();            while (entList.hasNext()) {              str=str + ", " + entList.next().getId();            }          }        }        server.sendServerChat(connId,str);      } else {        server.sendServerChat(connId,"Hex (" + (coord.getX() + 1) + ", "+ (coord.getY() + 1)+ ") is not on the board.");      }      if (i < args.length) {        coord=coord.translated(args[i]);      }      i++;    } while (i < args.length);  } catch (  NumberFormatException nfe) {  }catch (  NullPointerException npe) {  }catch (  IndexOutOfBoundsException ioobe) {  }}  }
class C{  @Override public Enumeration<String> enumerateRequests(){  Vector<String> newVector=new Vector<String>(0);  if (m_filterThread != null) {    newVector.addElement("Stop");  }  return newVector.elements();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentcreateattributeNS05.class,args);}  }
class C{  private void processBranchTarget(int index,int branchtarget){  BasicBlock newBB, currentBB;  if (byteToBlockMap[branchtarget] == BasicBlock.NOTBLOCK) {    newBB=bbf.newBlock(branchtarget);    addBasicBlock(newBB);    byteToBlockMap[branchtarget]=(short)newBB.getBlockNumber();    currentBB=basicBlocks[byteToBlockMap[index]];    newBB.addPredecessor(currentBB);  } else   if (index > branchtarget) {    processBackwardBranch(index,branchtarget);  } else {    currentBB=basicBlocks[byteToBlockMap[index]];    basicBlocks[byteToBlockMap[branchtarget]].addPredecessor(currentBB);  }}  }
class C{  @Override protected void onActivityResult(int requestCode,int resultCode,Intent data){  if (requestCode == REQUEST_AVATAR_SELECTION_CODE) {    if (resultCode == RESULT_OK) {      if (data != null) {        updateAvatar(data.getStringExtra(Extra.AVATAR_URL));      }    }  }}  }
class C{  private void refresh(){  Object organization=orgField.getValue();  Object locator=locatorField.getValue();  Object product=productField.getValue();  Object movementType=mtypeField.getValue();  Timestamp movementDateFrom=(Timestamp)dateFField.getValue();  Timestamp movementDateTo=(Timestamp)dateTField.getValue();  panel.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  refresh(organization,locator,product,movementType,movementDateFrom,movementDateTo,statusBar);  panel.setCursor(Cursor.getDefaultCursor());}  }
class C{  public TableBuilder useDefaultPrimaryKey(){  primaryKey=new Column();  primaryKey.name=BaseColumns._ID;  primaryKey.type=COLUMN_TYPE.INTEGER;  return this;}  }
class C{  public static BoundingShape chain(Point2D... points){  if (points.length < 2)   throw new IllegalArgumentException("Chain shape requires at least 2 points. Given points: " + points.length);  double maxX=Stream.of(points).mapToDouble(null).max().getAsDouble();  double maxY=Stream.of(points).mapToDouble(null).max().getAsDouble();  return new BoundingShape(ShapeType.CHAIN,points,new Dimension2D(maxX,maxY));}  }
class C{  public static MosaicLevy createMosaicLevy(){  return createMosaicLevy(Utils.createMosaicId(2));}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public void removeAllStickyEvents(){  removeAllStickyEventsRemote();  removeAllStickyEventsLocal();}  }
class C{  @Override public Optional<B> transform(Generator gen,A model){  requireNonNull(gen);  requireNonNull(model);  Object o=model;  for (  final Transform<?,?> step : steps) {    if (o == null) {      return Optional.empty();    } else {      @SuppressWarnings("unchecked") final Transform<Object,?> step2=(Transform<Object,?>)step;      o=gen.transform(step2,o,factory).map(null).orElse(null);    }  }  if (o == null) {    return Optional.empty();  } else {    if (to.isAssignableFrom(o.getClass())) {      @SuppressWarnings("unchecked") final B result=(B)o;      return Optional.of(result);    } else {      throw new IllegalStateException("The bridge between '" + from.getSimpleName() + "' to '"+ to.getSimpleName()+ "' is not complete.");    }  }}  }
class C{  @HLEFunction(nid=0xF16EAF4F,version=150) public int sceNetAdhocMatchingDelete(@CheckArgument("checkMatchingId") int matchingId){  matchingObjects.remove(matchingId).delete();  return 0;}  }
class C{  public boolean next() throws SQLException {  if (updated) {    getResultSet().updateRow();    updated=false;  }  return getResultSet().next();}  }
class C{  public static List<URI> filterOutVplexSrdfTargets(DbClient dbClient,List<URI> vplexVolumeUris){  List<URI> returnedVolumes=new ArrayList<URI>();  returnedVolumes.addAll(vplexVolumeUris);  List<URI> vplexSrdfTargets=returnVplexSrdfTargets(dbClient,vplexVolumeUris);  returnedVolumes.removeAll(vplexSrdfTargets);  return returnedVolumes;}  }
class C{  public Response onCommand(POP3Session session,Request request){  if (session.getHandlerState() == POP3Session.TRANSACTION) {    return POP3Response.OK;  } else {    return POP3Response.ERR;  }}  }
class C{  public CROSS_JOIN CROSS_JOIN(String tableToJoin){  return new CROSS_JOIN(this,tableToJoin);}  }
class C{  protected String encodeBody(){  return method;}  }
class C{  private int disasmListGetSelectedIndex(){  return (SelectedPC - DebuggerPC) / 4;}  }
class C{  protected long unwrapValue(Object value){  return ((Long)value).longValue();}  }
class C{  private void ekskey(final byte data[],final byte key[]){  int i;  final int koffp[]={0}, doffp[]={0};  final int lr[]={0,0};  final int plen=P.length, slen=S.length;  for (i=0; i < plen; i++) {    P[i]=P[i] ^ streamtoword(key,koffp);  }  for (i=0; i < plen; i+=2) {    lr[0]^=streamtoword(data,doffp);    lr[1]^=streamtoword(data,doffp);    encipher(lr,0);    P[i]=lr[0];    P[i + 1]=lr[1];  }  for (i=0; i < slen; i+=2) {    lr[0]^=streamtoword(data,doffp);    lr[1]^=streamtoword(data,doffp);    encipher(lr,0);    S[i]=lr[0];    S[i + 1]=lr[1];  }}  }
class C{  @Description(summary="Create the Javadocs of the implementation.") public void javadocImpl(){  compileTools();  mkdir("docs/javadocImpl2");  javadoc("-sourcepath","src/main" + File.pathSeparator + "src/test"+ File.pathSeparator+ "src/tools","-noindex","-tag","h2.resource","-d","docs/javadocImpl2","-classpath",javaToolsJar + File.pathSeparator + "ext/slf4j-api-1.6.0.jar"+ File.pathSeparator+ "ext/servlet-api-3.1.0.jar"+ File.pathSeparator+ "ext/lucene-core-3.6.2.jar"+ File.pathSeparator+ "ext/org.osgi.core-4.2.0.jar"+ File.pathSeparator+ "ext/org.osgi.enterprise-4.2.0.jar"+ File.pathSeparator+ "ext/jts-core-1.14.0.jar","-subpackages","org.h2","-exclude","org.h2.test.jaqu:org.h2.jaqu");  mkdir("docs/javadocImpl3");  javadoc("-sourcepath","src/main","-noindex","-tag","h2.resource","-d","docs/javadocImpl3","-classpath",javaToolsJar + File.pathSeparator + "ext/slf4j-api-1.6.0.jar"+ File.pathSeparator+ "ext/servlet-api-3.1.0.jar"+ File.pathSeparator+ "ext/lucene-core-3.6.2.jar"+ File.pathSeparator+ "ext/org.osgi.core-4.2.0.jar"+ File.pathSeparator+ "ext/org.osgi.enterprise-4.2.0.jar"+ File.pathSeparator+ "ext/jts-core-1.14.0.jar","-subpackages","org.h2.mvstore","-exclude","org.h2.mvstore.db");  System.setProperty("h2.interfacesOnly","false");  System.setProperty("h2.javadocDestDir","docs/javadocImpl");  javadoc("-sourcepath","src/main" + File.pathSeparator + "src/test"+ File.pathSeparator+ "src/tools","-classpath",javaToolsJar + File.pathSeparator + "ext/slf4j-api-1.6.0.jar"+ File.pathSeparator+ "ext/servlet-api-3.1.0.jar"+ File.pathSeparator+ "ext/lucene-core-3.6.2.jar"+ File.pathSeparator+ "ext/org.osgi.core-4.2.0.jar"+ File.pathSeparator+ "ext/org.osgi.enterprise-4.2.0.jar"+ File.pathSeparator+ "ext/jts-core-1.14.0.jar","-subpackages","org.h2","-exclude","org.h2.test.jaqu:org.h2.jaqu","-package","-docletpath","bin" + File.pathSeparator + "temp","-doclet","org.h2.build.doclet.Doclet");  copy("docs/javadocImpl",files("src/docsrc/javadoc"),"src/docsrc/javadoc");}  }
class C{  @Override public final void preTearDownCacheTestCase() throws Exception {  client.invoke(null);  server.invoke(null);}  }
class C{  public long last(){  return 0;}  }
class C{  public int compareString(String a,String b,boolean ignoreCase){  if (ignoreCase) {    return a.compareToIgnoreCase(b);  }  return a.compareTo(b);}  }
class C{  static boolean isFilenameValid(String filename,File downloadsDataDir){  filename=filename.replaceFirst("/+","/");  return filename.startsWith(Environment.getDownloadCacheDirectory().toString()) || filename.startsWith(downloadsDataDir.toString()) || filename.startsWith(Environment.getExternalStorageDirectory().toString());}  }
class C{  public boolean is3DESSupported(){  return is3DESSupported;}  }
class C{  public int index(int position){  return m_indices.get(position);}  }
class C{  private void readNextItem(){  if (matcher.find()) {    final String groupWholeFound=this.matcher.group(0);    final String groupWholeFoundTrimmed=groupWholeFound.trim();    final String groupCloseStruct=this.matcher.group(1);    final String groupTypeOrName=this.matcher.group(2);    final String groupArrayLength=this.matcher.group(3);    final String groupName=this.matcher.group(4);    final String groupEnder=this.matcher.group(5);    final String skipString=this.processingString.substring(Math.max(this.lastCharSubstingFound,0),matcher.start()).trim();    if (skipString.length() != 0 && !skipString.startsWith("//")) {      this.detectedException=new JBBPTokenizerException(skipString,Math.max(this.lastCharSubstingFound,0));    } else {      JBBPTokenType type=JBBPTokenType.ATOM;      if (groupWholeFoundTrimmed.startsWith("//")) {        type=JBBPTokenType.COMMENT;      } else       if ("{".equals(groupEnder)) {        type=JBBPTokenType.STRUCT_START;        if (groupName != null) {          final int position=matcher.start() + groupWholeFound.length() - groupWholeFoundTrimmed.length();          this.detectedException=new JBBPTokenizerException("Wrong structure format, it must have only name (and may be array definition)",position);          return;        }      } else       if (groupCloseStruct != null) {        type=JBBPTokenType.STRUCT_END;      } else       if (groupTypeOrName == null) {        final int position=matcher.start() + groupWholeFound.length() - groupWholeFoundTrimmed.length();        this.detectedException=new JBBPTokenizerException("Detected atomic field definition without type",position);        return;      }      String fieldType=groupTypeOrName;      final String arrayLength=groupArrayLength;      int position=matcher.start();      final String fieldName;      if (type == JBBPTokenType.COMMENT) {        fieldName=matcher.group(0).trim().substring(2).trim();        position+=groupWholeFound.indexOf('/');      } else {        if (type == JBBPTokenType.STRUCT_START) {          fieldName=fieldType;          fieldType=null;        } else {          fieldName=groupName;        }        position+=groupWholeFound.length() - groupWholeFound.trim().length();        this.detectedException=checkFieldName(fieldName,position);        if (this.detectedException != null) {          return;        }      }      JBBPFieldTypeParameterContainer parsedType=null;      if (fieldType != null) {        final Matcher typeMatcher=FIELD_TYPE_BREAK_PATTERN.matcher(fieldType);        boolean wrongFormat=true;        if (typeMatcher.find()) {          final String groupTypeByteOrder=typeMatcher.group(1);          final String groupTypeName=typeMatcher.group(2);          final String groupTypeExtraField=typeMatcher.group(3);          wrongFormat=false;          JBBPByteOrder byteOrder=null;          if (groupTypeByteOrder != null) {            if (">".equals(groupTypeByteOrder)) {              byteOrder=JBBPByteOrder.BIG_ENDIAN;            } else             if ("<".equals(groupTypeByteOrder)) {              byteOrder=JBBPByteOrder.LITTLE_ENDIAN;            } else {              throw new Error("Illegal byte order char, unexpected error, contact developer please [" + fieldType + ']');            }          } else {            byteOrder=JBBPByteOrder.BIG_ENDIAN;          }          if (!wrongFormat) {            parsedType=new JBBPFieldTypeParameterContainer(byteOrder,groupTypeName,groupTypeExtraField);          }        }        if (wrongFormat) {          this.detectedException=new JBBPTokenizerException("Wrong format of type definition [" + fieldType + ']',position);          return;        }      } else {        parsedType=null;      }      this.nextItem=new JBBPToken(type,position,parsedType,arrayLength,fieldName);      lastCharSubstingFound=matcher.end();    }  } else {    if (this.lastCharSubstingFound < 0) {      this.detectedException=new JBBPTokenizerException("Wrong format of whole string",0);    } else {      final String restOfString=this.processingString.substring(this.lastCharSubstingFound);      if (restOfString.trim().length() != 0) {        throw new JBBPTokenizerException("Can't recognize a part of script [" + restOfString + ']',this.lastCharSubstingFound);      }    }    this.nextItem=null;  }}  }
class C{  private boolean isInterestRegistered(SelectableChannel channel,int operation){  SelectionKey key=channel.keyFor(selector);  return key != null && (key.interestOps() & operation) != 0;}  }
class C{  public static void onErrorDropped(Consumer<? super Throwable> c){  log.info("Hooking new default : onErrorDropped");  onErrorDroppedHook=Objects.requireNonNull(c,"onErrorDroppedHook");}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:19.912 -0500",hash_original_method="30C77F2F1070D21229A0301D2E3C23FC",hash_generated_method="7B5C852FA9A1DF46DDC4AC013C96E720") public int indexOf(String subString,int start){  addTaint(subString.getTaintInt());  return getTaintInt();}  }
class C{  @Override public void connectionNotification(String eventName,Object source){}  }
class C{  public boolean isViewDisplayed(){  createHelpWindow();  return jhelp.isNavigatorDisplayed();}  }
class C{  void keyStoreDialog(int mode){  Point location=tw.getLocationOnScreen();  setLayout(new GridBagLayout());  if (mode == EDIT_KEYSTORE) {    JLabel label=new JLabel();    tw.addNewComponent(this,label,KSD_NAME_LABEL,0,0,1,1,0.0,0.0,GridBagConstraints.BOTH,ToolWindow.R_BOTTOM_PADDING);    JTextField tf=new JTextField(tool.getKeyStoreName(),30);    ToolWindow.configureLabelFor(label,tf,"KeyStore.URL.");    tf.setPreferredSize(new Dimension(tf.getPreferredSize().width,TEXTFIELD_HEIGHT));    tf.getAccessibleContext().setAccessibleName(PolicyTool.getMessage("KeyStore.U.R.L."));    tw.addNewComponent(this,tf,KSD_NAME_TEXTFIELD,1,0,1,1,1.0,0.0,GridBagConstraints.BOTH,ToolWindow.BOTTOM_PADDING);    label=new JLabel();    tw.addNewComponent(this,label,KSD_TYPE_LABEL,0,1,1,1,0.0,0.0,GridBagConstraints.BOTH,ToolWindow.R_BOTTOM_PADDING);    tf=new JTextField(tool.getKeyStoreType(),30);    ToolWindow.configureLabelFor(label,tf,"KeyStore.Type.");    tf.setPreferredSize(new Dimension(tf.getPreferredSize().width,TEXTFIELD_HEIGHT));    tf.getAccessibleContext().setAccessibleName(PolicyTool.getMessage("KeyStore.Type."));    tw.addNewComponent(this,tf,KSD_TYPE_TEXTFIELD,1,1,1,1,1.0,0.0,GridBagConstraints.BOTH,ToolWindow.BOTTOM_PADDING);    label=new JLabel();    tw.addNewComponent(this,label,KSD_PROVIDER_LABEL,0,2,1,1,0.0,0.0,GridBagConstraints.BOTH,ToolWindow.R_BOTTOM_PADDING);    tf=new JTextField(tool.getKeyStoreProvider(),30);    ToolWindow.configureLabelFor(label,tf,"KeyStore.Provider.");    tf.setPreferredSize(new Dimension(tf.getPreferredSize().width,TEXTFIELD_HEIGHT));    tf.getAccessibleContext().setAccessibleName(PolicyTool.getMessage("KeyStore.Provider."));    tw.addNewComponent(this,tf,KSD_PROVIDER_TEXTFIELD,1,2,1,1,1.0,0.0,GridBagConstraints.BOTH,ToolWindow.BOTTOM_PADDING);    label=new JLabel();    tw.addNewComponent(this,label,KSD_PWD_URL_LABEL,0,3,1,1,0.0,0.0,GridBagConstraints.BOTH,ToolWindow.R_BOTTOM_PADDING);    tf=new JTextField(tool.getKeyStorePwdURL(),30);    ToolWindow.configureLabelFor(label,tf,"KeyStore.Password.URL.");    tf.setPreferredSize(new Dimension(tf.getPreferredSize().width,TEXTFIELD_HEIGHT));    tf.getAccessibleContext().setAccessibleName(PolicyTool.getMessage("KeyStore.Password.U.R.L."));    tw.addNewComponent(this,tf,KSD_PWD_URL_TEXTFIELD,1,3,1,1,1.0,0.0,GridBagConstraints.BOTH,ToolWindow.BOTTOM_PADDING);    JButton okButton=new JButton(PolicyTool.getMessage("OK"));    okButton.addActionListener(new ChangeKeyStoreOKButtonListener(tool,tw,this));    tw.addNewComponent(this,okButton,KSD_OK_BUTTON,0,4,1,1,0.0,0.0,GridBagConstraints.VERTICAL);    JButton cancelButton=new JButton(PolicyTool.getMessage("Cancel"));    ActionListener cancelListener=new CancelButtonListener(this);    cancelButton.addActionListener(cancelListener);    tw.addNewComponent(this,cancelButton,KSD_CANCEL_BUTTON,1,4,1,1,0.0,0.0,GridBagConstraints.VERTICAL);    getRootPane().setDefaultButton(okButton);    getRootPane().registerKeyboardAction(cancelListener,escKey,JComponent.WHEN_IN_FOCUSED_WINDOW);  }  pack();  setLocationRelativeTo(tw);  setVisible(true);}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  private static void dumpMifareClassic1KBlock(MfReaderWriter reader,MfCard card,int sectorId,int blockId,List<String> keys) throws CardException {  System.out.printf("Sector %02d block %02d: ",sectorId,blockId);  for (  String key : keys) {    if (isValidMifareClassic1KKey(key)) {      byte[] keyBytes=hexStringToBytes(key);      MfAccess access=new MfAccess(card,sectorId,blockId,Key.A,keyBytes);      String blockData=readMifareClassic1KBlock(reader,access);      if (blockData == null) {        access=new MfAccess(card,sectorId,blockId,Key.B,keyBytes);        blockData=readMifareClassic1KBlock(reader,access);      }      if (blockData != null) {        System.out.println(blockData + " (Key " + access.getKey()+ ": "+ key+ ")");        return;      }    }  }  System.out.println("<Failed to read block>");}  }
class C{  public void addUsers(org.oscm.xsd.User param){  if (localUsers == null) {    localUsers=new org.oscm.xsd.User[]{};  }  localUsersTracker=true;  java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(localUsers);  list.add(param);  this.localUsers=(org.oscm.xsd.User[])list.toArray(new org.oscm.xsd.User[list.size()]);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case EipPackage.AGGREGATOR__NAME:    return getName();case EipPackage.AGGREGATOR__TO_CHANNELS:  return getToChannels();case EipPackage.AGGREGATOR__FROM_CHANNELS:return getFromChannels();case EipPackage.AGGREGATOR__PART:return getPart();case EipPackage.AGGREGATOR__STRATEGY:return getStrategy();case EipPackage.AGGREGATOR__EXPRESSION:return getExpression();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public int recycleItems(LinearLayout layout,int firstItem,ItemsRange range){  int index=firstItem;  for (int i=0; i < layout.getChildCount(); ) {    if (!range.contains(index)) {      recycleView(layout.getChildAt(i),index);      layout.removeViewAt(i);      if (i == 0) {        firstItem++;      }    } else {      i++;    }    index++;  }  return firstItem;}  }
class C{  public static char[] toCharArray(InputStream is) throws IOException {  return toCharArray(is,Charset.defaultCharset());}  }
class C{  public void readFitness(final EvolutionState state,final LineNumberReader reader) throws IOException {  setFitness(state,Code.readDoubleWithPreamble(FITNESS_PREAMBLE,state,reader));}  }
class C{  public boolean ownDeletesAreVisible(int type) throws SQLException {  return ResultSet.TYPE_SCROLL_INSENSITIVE == type || ResultSet.TYPE_SCROLL_SENSITIVE == type;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  double z;  int r, g, b;  int rOut, gOut, bOut;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  int E=Integer.parseInt(args[2]);  if (E < 20) {    E=20;  }  if (E > 235) {    E=235;  }  if (inputHeader.isEmpty() || outputHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    int progress=0;    WhiteboxRaster input=new WhiteboxRaster(inputHeader,"r");    if (input.getDataScale() != WhiteboxRasterBase.DataScale.RGB) {      showFeedback("The input image should be of an RGB data scale.");      return;    }    int rows=input.getNumberRows();    int cols=input.getNumberColumns();    double noData=input.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setDataScale(WhiteboxRasterBase.DataScale.RGB);    double[] data;    long numPixels=0;    int r_l=Integer.MAX_VALUE;    int r_h=Integer.MIN_VALUE;    long r_e=0;    long rSqrTotal=0;    int g_l=Integer.MAX_VALUE;    int g_h=Integer.MIN_VALUE;    long g_e=0;    long gSqrTotal=0;    int b_l=Integer.MAX_VALUE;    int b_h=Integer.MIN_VALUE;    long b_e=0;    long bSqrTotal=0;    int L=0;    int H=255;    for (row=0; row < rows; row++) {      data=input.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          numPixels++;          r=((int)z & 0xFF);          g=(((int)z >> 8) & 0xFF);          b=(((int)z >> 16) & 0xFF);          if (r < r_l) {            r_l=r;          }          if (r > r_h) {            r_h=r;          }          r_e+=r;          rSqrTotal+=r * r;          if (g < g_l) {            g_l=g;          }          if (g > g_h) {            g_h=g;          }          g_e+=g;          gSqrTotal+=g * g;          if (b < b_l) {            b_l=b;          }          if (b > b_h) {            b_h=b;          }          b_e+=b;          bSqrTotal+=b * b;        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    r_e=r_e / numPixels;    g_e=g_e / numPixels;    b_e=b_e / numPixels;    double r_s=(double)rSqrTotal / numPixels;    double g_s=(double)gSqrTotal / numPixels;    double b_s=(double)bSqrTotal / numPixels;    double r_b=(r_h * r_h * (E - L) - r_s * (H - L) + r_l * r_l * (H - E)) / (2 * (r_h * (E - L) - r_e * (H - L) + r_l * (H - E)));    double r_a=(H - L) / ((r_h - r_l) * (r_h + r_l - 2 * r_b));    double r_c=L - r_a * ((r_l - r_b) * (r_l - r_b));    double g_b=(g_h * g_h * (E - L) - g_s * (H - L) + g_l * g_l * (H - E)) / (2 * (g_h * (E - L) - g_e * (H - L) + g_l * (H - E)));    double g_a=(H - L) / ((g_h - g_l) * (g_h + g_l - 2 * g_b));    double g_c=L - g_a * ((g_l - g_b) * (g_l - g_b));    double b_b=(b_h * b_h * (E - L) - b_s * (H - L) + b_l * b_l * (H - E)) / (2 * (b_h * (E - L) - b_e * (H - L) + b_l * (H - E)));    double b_a=(H - L) / ((b_h - b_l) * (b_h + b_l - 2 * b_b));    double b_c=L - b_a * ((b_l - b_b) * (b_l - b_b));    for (row=0; row < rows; row++) {      data=input.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          numPixels++;          r=((int)z & 0xFF);          g=(((int)z >> 8) & 0xFF);          b=(((int)z >> 16) & 0xFF);          rOut=(int)(r_a * ((r - r_b) * (r - r_b)) + r_c);          gOut=(int)(g_a * ((g - g_b) * (g - g_b)) + g_c);          bOut=(int)(b_a * ((b - b_b) * (b - b_b)) + b_c);          if (rOut > 255) {            rOut=255;          }          if (gOut > 255) {            gOut=255;          }          if (bOut > 255) {            bOut=255;          }          if (rOut < 0) {            rOut=0;          }          if (gOut < 0) {            gOut=0;          }          if (bOut < 0) {            bOut=0;          }          z=(double)((255 << 24) | (bOut << 16) | (gOut << 8)| rOut);          output.setValue(row,col,z);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    input.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void dynInit(){  processField=new CComboBox(getProcessData());  tableField=new CComboBox(getTableData());  createdByQField=new CComboBox(getUserData());  bPartnerField=VLookup.createBPartner(m_WindowNo);}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj == null) {    return false;  }  if (obj instanceof MpoIfdData) {    MpoIfdData data=(MpoIfdData)obj;    if (data.getTagCount() == getTagCount()) {      MpoTag[] tags=data.getAllTags();      for (      MpoTag tag : tags) {        MpoTag tag2=mTags.get(tag.getTagId());        if (!tag.equals(tag2)) {          return false;        }      }      return true;    }  }  return false;}  }
class C{  public void addArgumentNoEncoding(String key,String[] value){  if (value == null || value.length == 0) {    return;  }  if (value.length == 1) {    addArgumentNoEncoding(key,value[0]);    return;  }  String[] v=new String[value.length];  System.arraycopy(value,0,v,0,value.length);  addArg(key,v);}  }
class C{  public void printf(Locale locale,String format,Object... args){  out.printf(locale,format,args);  out.flush();}  }
class C{  public void prefetchOnMerge(MergingStateAccessor<?,W> state){  StateMerging.prefetchWatermarks(state,elementHoldTag);}  }
class C{  private void checkForTenantRolesUsingDomains(StringSet domains){  List<URI> tenantURIList=_dbClient.queryByType(TenantOrg.class,true);  for (  URI tenantURI : tenantURIList) {    TenantOrg tenant=_dbClient.queryObject(TenantOrg.class,tenantURI);    _log.debug("checking " + tenant.getLabel());    List<RoleAssignmentEntry> tenantRoles=_permissionsHelper.convertToRoleAssignments(tenant.getRoleAssignments(),false);    List<String> matchingUsers=checkRolesUsingDomains(tenantRoles,domains);    if (!matchingUsers.isEmpty()) {      throw APIException.badRequests.cannotDeleteAuthProviderWithTenantRoles(tenant.getLabel(),matchingUsers.size(),matchingUsers);    }  }}  }
class C{  private static String poolTypeToMetricName(MemoryType memoryType){switch (memoryType) {case HEAP:    return "heap";case NON_HEAP:  return "nonheap";default :return "unknown";}}  }
class C{  public static void syncModificationTimes(Configuration conf,Path src,Path dest,Optional<PathFilter> filter) throws IOException {  Set<FileStatus> srcFileStatuses=getFileStatusesRecursive(conf,src,filter);  Map<String,Long> srcFileModificationTimes=null;  try {    srcFileModificationTimes=getRelativePathToModificationTime(src,srcFileStatuses);  } catch (  ArgumentException e) {    throw new IOException("Invalid file statuses!",e);  }  FileSystem destFs=dest.getFileSystem(conf);  for (  String file : srcFileModificationTimes.keySet()) {    destFs.setTimes(new Path(dest,file),srcFileModificationTimes.get(file),-1);  }}  }
class C{  public static void onEventDuration(Context context,PostEvent event){  init(context);  if (event.getDuration() == 0) {    Ln.e("onEventDuration","onEventDuration the duration is 0");    return;  }  if (event.getStringMap() != null) {    startLogService(MessageUtils.HASH_EVENT_DATA,event.eventToJOSNObj());  } else {    startLogService(MessageUtils.EVENT_DATA,event.eventToJOSNObj());  }}  }
class C{  void incoming() throws IOException {  writeLine(String.format("hello from %s",hostId));  String line=readLine();  if (networkTracing) {    logger.info("[{}] {}",hostId,line);  }  Matcher matcher=makeCallPattern.matcher(line);  if (matcher.find()) {    makeCall=true;    fromMemberId=Integer.parseInt(matcher.group(1));    toMemberId=Integer.parseInt(matcher.group(2));  } else {    matcher=requestCallBackPattern.matcher(line);    if (matcher.find()) {      fromMemberId=Integer.parseInt(matcher.group(1));      toMemberId=Integer.parseInt(matcher.group(2));    } else {      throw new IllegalStateException("Invalid message: " + line);    }  }}  }
class C{  public void invite(String channel){  bot.sendIRC().invite(serverUser.getNick(),channel);}  }
class C{  @SuppressWarnings("unchecked") private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  ObjectInputStream.GetField gf=s.readFields();  readOnly=gf.get("readOnly",false);  Set<Principal> inputPrincs=(Set<Principal>)gf.get("principals",null);  if (inputPrincs == null) {    throw new NullPointerException(ResourcesMgr.getString("invalid.null.input.s."));  }  try {    principals=Collections.synchronizedSet(new SecureSet<Principal>(this,PRINCIPAL_SET,inputPrincs));  } catch (  NullPointerException npe) {    principals=Collections.synchronizedSet(new SecureSet<Principal>(this,PRINCIPAL_SET));  }  this.pubCredentials=Collections.synchronizedSet(new SecureSet<Object>(this,PUB_CREDENTIAL_SET));  this.privCredentials=Collections.synchronizedSet(new SecureSet<Object>(this,PRIV_CREDENTIAL_SET));}  }
class C{  @Override public void addRow(Value[] values){  cloneLobs(values);  if (distinct) {    ValueArray array=getArrayOfVisible(values);    distinctRows.put(array,values);    rowCount=distinctRows.size();    if (rowCount > maxMemoryRows) {      throw DbException.getUnsupportedException("too big result row " + maxMemoryRows);    }    return;  }  rows.add(values);  rowCount++;  if (rows.size() > maxMemoryRows) {    throw DbException.getUnsupportedException("too big result row " + maxMemoryRows);  }}  }
class C{  public void selectOperators(List<Operator> ops){  if (options.hasData()) {switch (clockType) {case STRICT_CLOCK:      ops.add(getOperator("clock.rate"));    break;case RANDOM_LOCAL_CLOCK:  ops.add(getOperator("clock.rate"));addRandomLocalClockOperators(ops);break;case FIXED_LOCAL_CLOCK:ops.add(getOperator("clock.rate"));for (Taxa taxonSet : options.taxonSets) {if (options.taxonSetsMono.get(taxonSet)) {ops.add(getOperator(taxonSet.getId() + ".rate"));}}break;case UNCORRELATED:switch (clockDistributionType) {case LOGNORMAL:ops.add(getOperator(ClockType.UCLD_MEAN));ops.add(getOperator(ClockType.UCLD_STDEV));break;case GAMMA:ops.add(getOperator(ClockType.UCGD_MEAN));ops.add(getOperator(ClockType.UCGD_SHAPE));break;case CAUCHY:break;case EXPONENTIAL:ops.add(getOperator(ClockType.UCED_MEAN));break;}break;case AUTOCORRELATED:throw new UnsupportedOperationException("Autocorrelated clock not implemented yet");default :throw new IllegalArgumentException("Unknown clock model");}}Parameter allMus=getParameter("allMus");if (allMus.getSubParameters().size() > 1) {Operator muOperator;if (USE_DIRICHLET_PRIOR_FOR_MUS) {muOperator=getOperator("scaleMus");} else {muOperator=getOperator("deltaMus");}ops.add(muOperator);}}  }
class C{  public static Bundler of(Bundle b){  return new Bundler(b);}  }
class C{  private static void reply_Login2_Org(body body,MobileSessionCtx wsc,WWindowStatus ws,String formName,String fieldValue,String locationValue){  String form=null;  log.info("Location-Org: " + locationValue);  form=locationValue + MobileEnv.TARGET_WINDOW + ".document."+ formName+ ".";  StringBuffer script=new StringBuffer();  script.append("var C=").append(form).append(WLogin.P_WAREHOUSE).append(".options; ");  script.append("C.length=0; ");  KeyNamePair org=new KeyNamePair(Integer.parseInt(fieldValue),fieldValue);  Login login=new Login(wsc.ctx);  String error=login.validateLogin(org);  if (error != null && error.length() > 0) {    log.severe(error);    ws.mWindow=null;    wsc.ctx=new Properties();    return;  }  KeyNamePair[] whs=login.getWarehouses(org);  if (whs != null) {    for (int i=0; i < whs.length; i++) {      KeyNamePair p=whs[i];      script.append("C[").append(i).append("]=new Option('");      script.append(p.getName());      script.append("','");      script.append(p.getKey());      script.append("'); ");    }  }  body.addElement(new p().addElement(WLogin.P_WAREHOUSE + "="));  body.addElement(new script(script.toString()));}  }
class C{  public static void hideActionBar(Activity activity){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB && activity != null) {    activity.getWindow().requestFeature(Window.FEATURE_ACTION_BAR);    activity.getActionBar().hide();  }}  }
class C{  public ClientHello(HandshakeIODataStream in,int length) throws IOException {  client_version=new byte[2];  client_version[0]=(byte)in.readUint8();  client_version[1]=(byte)in.readUint8();  Streams.readFully(in,random);  int size=in.read();  session_id=new byte[size];  in.read(session_id,0,size);  int l=in.readUint16();  if ((l & 0x01) == 0x01) {    fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect ClientHello");  }  size=l >> 1;  cipher_suites=new CipherSuite[size];  for (int i=0; i < size; i++) {    byte b0=(byte)in.read();    byte b1=(byte)in.read();    cipher_suites[i]=CipherSuite.getByCode(b0,b1);  }  size=in.read();  compression_methods=new byte[size];  in.read(compression_methods,0,size);  this.length=38 + session_id.length + (cipher_suites.length << 1)+ compression_methods.length;  if (this.length > length) {    fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect ClientHello");  }  if (this.length < length) {    in.skip(length - this.length);    this.length=length;  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void updateMeetingProbFor(Integer index){  Map.Entry<Integer,Double> smallestEntry=null;  double smallestValue=Double.MAX_VALUE;  this.lastUpdateTime=SimClock.getTime();  if (probs.size() == 0) {    probs.put(index,1.0);    return;  }  double newValue=getProbFor(index) + alpha;  probs.put(index,newValue);  for (  Map.Entry<Integer,Double> entry : probs.entrySet()) {    entry.setValue(entry.getValue() / (1 + alpha));    if (entry.getValue() < smallestValue) {      smallestEntry=entry;      smallestValue=entry.getValue();    }  }  if (probs.size() >= maxSetSize) {    if (DEBUG)     core.Debug.p("Probsize: " + probs.size() + " dropping "+ probs.remove(smallestEntry.getKey()));  }}  }
class C{  @Override public void printOperationLog(String source,UUID operationTrackId,long maxOperationDurationMs){  int logSize=0;  long startedTs=System.currentTimeMillis();  while (!Thread.interrupted()) {    TrackerOperationView po=getTrackerOperation(source.toUpperCase(),operationTrackId);    if (po != null) {      if (logSize != po.getLog().length()) {        System.out.println(po.getLog().substring(logSize,po.getLog().length()));        logSize=po.getLog().length();      }      long ts=System.currentTimeMillis() - startedTs;      if (po.getState() != OperationState.RUNNING || ts > maxOperationDurationMs) {        return;      }      try {        Thread.sleep(100);      } catch (      InterruptedException e) {        return;      }    } else {      LOG.warn("Tracker operation not found");      return;    }  }}  }
class C{  public boolean isAutomata(){  return mAutomata;}  }
class C{  public static int generate(int crc,byte ch){  return (crc << 8) ^ CRC_TABLE[((crc >> 24) ^ ch) & 0xff];}  }
class C{  public static ArrayList<String> propToArray(File propFile){  ArrayList<String> lines=new ArrayList<String>();  BufferedReader br=null;  try {    DataInputStream dis=new DataInputStream(new FileInputStream(propFile));    br=new BufferedReader(new InputStreamReader(new BufferedInputStream(dis),Charset.forName("UTF-8").newDecoder()));    String line;    while ((line=br.readLine()) != null) {      if (line.length() > 0 && line.charAt(0) != '#') {        lines.add(line);      }    }  } catch (  Exception e) {    e.printStackTrace();  }  try {    br.close();  } catch (  IOException e) {    e.printStackTrace();  }  return lines;}  }
class C{  public static boolean validVarName(String varName){  return !varName.contains(".");}  }
class C{  public SendableVenueMessage.SendableVenueMessageBuilder address(String address){  this.address=address;  return this;}  }
class C{  public void close() throws IOException {  HttpStream stream=_stream;  _stream=null;  if (stream != null)   stream.close();}  }
class C{  public static List<String> splitAtLastBlank(String s,int width){  List<String> chunks=new ArrayList<>();  String tmp=s;  while (tmp.length() > 0) {    int index=findSplitpoint(tmp,width);    chunks.add(tmp.substring(0,index));    while (index < tmp.length() && tmp.charAt(index) == ' ') {      index+=1;    }    if (index < tmp.length() && tmp.regionMatches(index,NEWLINE,0,NEWLINE.length())) {      index+=NEWLINE.length();    }    if (index >= tmp.length()) {      break;    }    tmp=tmp.substring(index);  }  return chunks;}  }
class C{  public CCheckForUpdatesAction(final JFrame parent){  super("Check for Updates...");  m_parent=Preconditions.checkNotNull(parent,"IE02337: Parent argument " + "can not be null");}  }
class C{  public boolean isEMailWhenDue(){  Object oo=get_Value(COLUMNNAME_IsEMailWhenDue);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public void startCounting(ExampleSet exampleSet,boolean useExampleWeights) throws OperatorException {  super.startCounting(exampleSet,useExampleWeights);  Iterator<Example> reader=exampleSet.iterator();  this.margin=0.0d;  this.counter=0.0d;  Attribute labelAttr=exampleSet.getAttributes().getLabel();  Attribute weightAttribute=null;  if (useExampleWeights) {    weightAttribute=exampleSet.getAttributes().getWeight();  }  while (reader.hasNext()) {    Example example=reader.next();    String trueLabel=example.getNominalValue(labelAttr);    double confidence=example.getConfidence(trueLabel);    double currentMargin=Math.max(0,1.0d - confidence);    double weight=1.0d;    if (weightAttribute != null) {      weight=example.getValue(weightAttribute);    }    this.margin+=currentMargin * weight;    this.counter+=weight;  }}  }
class C{  public TankDrive(Motor left,Motor right){  this(left,right,null,null);}  }
class C{  @Override public void notifyExit(int value){  report();}  }
class C{  SharedFsCheckpointData(byte[] state,long expTime,String host,String key){  assert expTime >= 0;  assert host != null;  this.state=state;  this.expTime=expTime;  this.host=host;  this.key=key;}  }
class C{  public Matrix mul(final Matrix another){  QL.require(cols() == another.rows(),MATRIX_IS_INCOMPATIBLE);  final Matrix result=new Matrix(rows(),another.cols(),this.flags());  final Address.MatrixAddress.MatrixOffset toff=this.addr.offset();  final Address.MatrixAddress.MatrixOffset aoff=another.addr.offset();  final int offsetT=this.addr.isFortran() ? 1 : 0;  final int offsetA=another.addr.isFortran() ? 1 : 0;  for (int col=offsetA; col < another.cols() + offsetA; col++) {    for (int row=offsetT; row < this.rows() + offsetT; row++) {      toff.setRow(row);      toff.setCol(offsetT);      aoff.setRow(offsetA);      aoff.setCol(col);      double sum=0.0;      for (int i=0; i < this.cols(); i++) {        final double telem=this.$[toff.op()];        final double aelem=another.$[aoff.op()];        sum+=telem * aelem;        toff.nextCol();        aoff.nextRow();      }      result.$[result.addr.op(row,col - offsetA + offsetT)]=sum;    }  }  return result;}  }
class C{  public static String createResourceName(String resource,Locale locale,boolean removeExtension){  String resourceName=resource;  if (removeExtension) {    if (resourceName.endsWith(".xml")) {      resourceName=resourceName.replace(".xml","");    } else     if (resourceName.endsWith(".properties")) {      resourceName=resourceName.replace(".properties","");    }  }  if (locale != null) {    if (UtilValidate.isNotEmpty(locale.toString())) {      resourceName=resourceName + "_" + locale;    }  }  return resourceName;}  }
class C{  boolean isEmpty(){  return refSet.isEmpty();}  }
class C{  public void notifyCreate(){  ScopeContext context=new ScopeContext(SCOPE_NAME,this);  application.publishEvent(FacesContext.getCurrentInstance(),PostConstructCustomScopeEvent.class,context);}  }
class C{  public JavaTypeNameParser(final String typeName){  this.typeName=typeName;}  }
class C{  @Override protected boolean isLargeProblem(OptNode pn,double M){  boolean ret=false;  try {    double T=_cost.getEstimate(TestMeasure.EXEC_TIME,pn);    ret=(T >= EXEC_TIME_THRESHOLD) && (M > PROB_SIZE_THRESHOLD_MB);  } catch (  DMLRuntimeException e) {    LOG.error("Failed to estimate execution time.",e);  }  return ret;}  }
class C{  protected Set addListenerAndGetMembers(){  return getDistributionManager().addMembershipListenerAndGetDistributionManagerIds(this);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case EipPackage.FILTER__NAME:    return getName();case EipPackage.FILTER__TO_CHANNELS:  return getToChannels();case EipPackage.FILTER__FROM_CHANNELS:return getFromChannels();case EipPackage.FILTER__EXPRESSION:return getExpression();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();{    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  public BusinessObjectFormat createTestBusinessObjectFormat(){  return createTestBusinessObjectFormat(AbstractServiceTest.NO_ATTRIBUTES);}  }
class C{  public Builder addCustomModule(final SimpleModule custom){  this.customModules.add(custom);  return this;}  }
class C{  private void internalResolve(Scope scope){  if (this.selectedNode != null) {switch (scope.kind) {case Scope.CLASS_SCOPE:      this.selectedNode.resolveType((ClassScope)scope);    break;case Scope.METHOD_SCOPE:  this.selectedNode.resolveType((MethodScope)scope);break;}Binding binding=null;if (this.selectedNode instanceof JavadocFieldReference) {JavadocFieldReference fieldRef=(JavadocFieldReference)this.selectedNode;binding=fieldRef.binding;if (binding == null && fieldRef.methodBinding != null) {binding=fieldRef.methodBinding;}} else if (this.selectedNode instanceof JavadocMessageSend) {binding=((JavadocMessageSend)this.selectedNode).binding;} else if (this.selectedNode instanceof JavadocAllocationExpression) {binding=((JavadocAllocationExpression)this.selectedNode).binding;} else if (this.selectedNode instanceof JavadocSingleNameReference) {binding=((JavadocSingleNameReference)this.selectedNode).binding;} else if (this.selectedNode instanceof JavadocSingleTypeReference) {JavadocSingleTypeReference typeRef=(JavadocSingleTypeReference)this.selectedNode;if (typeRef.packageBinding == null) {binding=typeRef.resolvedType;}} else if (this.selectedNode instanceof JavadocQualifiedTypeReference) {JavadocQualifiedTypeReference typeRef=(JavadocQualifiedTypeReference)this.selectedNode;if (typeRef.packageBinding == null) {binding=typeRef.resolvedType;}} else {binding=this.selectedNode.resolvedType;}throw new SelectionNodeFound(binding);} else if (this.inheritDocSelected) {ReferenceContext referenceContext=scope.referenceContext();if (referenceContext instanceof MethodDeclaration) {throw new SelectionNodeFound(((MethodDeclaration)referenceContext).binding);}}}  }
class C{  protected void buildSuccessful(Notification notification,String successMessage,String prefixConsole){  notification.setMessage(successMessage);  notification.setStatus(FINISHED);  console.print(prefixConsole + "::" + successMessage);}  }
class C{  public void testPosNegFirstShorter(){  byte aBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  byte bBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};  int aSign=1;  int bSign=-1;  byte rBytes[]={73,-92,-48,4,12,6,4,32,48,64,0,8,3};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.and(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public List<List<String>> groupAnagrams(String[] strs){  if (strs == null || strs.length == 0) {    return Collections.emptyList();  }  Map<String,List<String>> map=new HashMap<>();  for (int i=0; i < strs.length; i++) {    char[] word=strs[i].toCharArray();    Arrays.sort(word);    String key=String.valueOf(word);    if (!map.containsKey(key)) {      map.put(key,new ArrayList<>());    }    map.get(key).add(strs[i]);  }  return new ArrayList<>(map.values());}  }
class C{  public Workflow generate4StepWF(int level,int maxLevels,String orchTaskId){  String[] args=new String[1];  args[0]=orchTaskId;  taskStatusMap.put(orchTaskId,WorkflowState.CREATED);  Workflow workflow=workflowService.getNewWorkflow(this,"generate3StepWFForTest10",false,orchTaskId);  WorkflowTaskCompleter completer=new WorkflowTaskCompleter(workflow.getWorkflowURI(),orchTaskId);  String lastStep=workflow.createStep("first",genMsg(level,1,"sub"),null,nullURI,this.getClass().getName(),false,this.getClass(),nopMethod(level,1),nopMethod(level,1),false,null);  lastStep=workflow.createStep("second",genMsg(level,2,"sub"),lastStep,nullURI,this.getClass().getName(),false,this.getClass(),subMethod(level,maxLevels,2),nopMethod(level,2),false,null);  lastStep=workflow.createStep("third",genMsg(level,3,"sub"),lastStep,nullURI,this.getClass().getName(),false,this.getClass(),subMethod(level,maxLevels,3),nopMethod(level,3),false,null);  lastStep=workflow.createStep("fourth",genMsg(level,4,"sub"),lastStep,nullURI,this.getClass().getName(),false,this.getClass(),nopMethod(level,4),nopMethod(level,4),false,null);  workflow.executePlan(completer,String.format("Workflow level %d successful",level),new WorkflowCallback(),args,null,null);  return workflow;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void startCommon(){  removeCallbacks(this);}  }
class C{  public CoreContainer(String solrHome){  this(new SolrResourceLoader(Paths.get(solrHome)));}  }
class C{  public boolean isVisible(int row){  return getBoolean(row,VisualItem.VISIBLE);}  }
class C{  protected boolean matchesName(char[] pattern,char[] name){  if (pattern == null)   return true;  if (name == null)   return false;  return matchNameValue(pattern,name) != IMPOSSIBLE_MATCH;}  }
class C{  private void doFinish(String fileName,String setName,IProgressMonitor monitor) throws IOException, CoreException {  monitor.beginTask("Creating " + setName,1);  monitor.setTaskName("Creating file...");  IWorkspaceRoot root=ResourcesPlugin.getWorkspace().getRoot();  IFile file=root.getFile(new Path(fileName));  ObjectXmlPersist persist=new ObjectXmlPersist(XStreamFactory.getSharedRefXStream());  if (file.exists()) {    addToSet(persist,file,setName);  } else {    newFileAndSet(persist,file,setName);  }  monitor.worked(1);}  }
class C{  public KMLLookAt(String namespaceURI){  super(namespaceURI);}  }
class C{  public void initializeStringTable(){  stringTable=new byte[4096][];  for (int i=0; i < 256; i++) {    stringTable[i]=new byte[1];    stringTable[i][0]=(byte)i;  }  tableIndex=258;  bitsToGet=9;}  }
class C{  public static void hasNominalLabels(ExampleSet es) throws OperatorException {  isLabelled(es);  Attribute a=es.getAttributes().getLabel();  if (!Ontology.ATTRIBUTE_VALUE_TYPE.isA(a.getValueType(),Ontology.NOMINAL)) {    throw new UserError(null,101,"clustering",a.getName());  }}  }
class C{  @LargeTest public void testWifiScanning(){  int scanTimeSum=0;  int i;  int ssidAppearInScanResultsCount=0;  for (i=0; i < mScanIterations; i++) {    log("testWifiScanning: iteration: " + i);    int averageScanTime=0;    if (i > 0) {      averageScanTime=scanTimeSum / i;    }    writeOutput(String.format("iteration %d out of %d",i,mScanIterations));    writeOutput(String.format("average scanning time is %d",averageScanTime));    writeOutput(String.format("ssid appear %d out of %d scan iterations",ssidAppearInScanResultsCount,i));    long startTime=System.currentTimeMillis();    mAct.scanResultAvailable=false;    assertTrue("start scan failed",mAct.mWifiManager.startScan());    while (true) {      if ((System.currentTimeMillis() - startTime) > ConnectivityManagerTestActivity.WIFI_SCAN_TIMEOUT) {        fail("Wifi scanning takes more than " + ConnectivityManagerTestActivity.WIFI_SCAN_TIMEOUT + " ms");      }synchronized (mAct) {        try {          mAct.wait(ConnectivityManagerTestActivity.WAIT_FOR_SCAN_RESULT);        } catch (        InterruptedException e) {          e.printStackTrace();        }        if (mAct.scanResultAvailable) {          long scanTime=(System.currentTimeMillis() - startTime);          scanTimeSum+=scanTime;          break;        }      }    }    if ((mAct.mWifiManager.getScanResults() == null) || (mAct.mWifiManager.getScanResults().size() <= 0)) {      fail("Scan results are empty ");    }    List<ScanResult> netList=mAct.mWifiManager.getScanResults();    if (netList != null) {      log("size of scan result list: " + netList.size());      for (int s=0; s < netList.size(); s++) {        ScanResult sr=netList.get(s);        log(String.format("scan result for %s is: %s",sr.SSID,sr.toString()));        log(String.format("signal level for %s is %d ",sr.SSID,sr.level));        if (sr.SSID.equals(mSsid)) {          ssidAppearInScanResultsCount+=1;          log("Number of times " + mSsid + " appear in the scan list: "+ ssidAppearInScanResultsCount);          break;        }      }    }  }  if (i == mScanIterations) {    writeOutput(String.format("iteration %d out of %d",i,mScanIterations));    writeOutput(String.format("average scanning time is %d",scanTimeSum / mScanIterations));    writeOutput(String.format("ssid appear %d out of %d scan iterations",ssidAppearInScanResultsCount,mScanIterations));  }}  }
class C{  protected final Object clone(){  return this;}  }
class C{  public DeprecatableElement createDeprecatableElement(){  DeprecatableElementImpl deprecatableElement=new DeprecatableElementImpl();  return deprecatableElement;}  }
class C{  private void closeAllDumps(){  Object[] options={"Close all","Cancel close"};  int selectValue=JOptionPane.showOptionDialog(null,"<html><body>Are you sure, you want to close all open dump files","Confirm closing...",JOptionPane.DEFAULT_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,options[0]);  if (selectValue == 0) {    topNodes=new Vector();    resetMainPanel();  }}  }
class C{  @Override public void addPropertyChangeListener(String name,PropertyChangeListener pcl){  m_bcSupport.addPropertyChangeListener(name,pcl);}  }
class C{  public static String encodeFromFile(String filename){  String encodedData=null;  Base64.InputStream bis=null;  try {    java.io.File file=new java.io.File(filename);    byte[] buffer=new byte[(int)(file.length() * 2)];    int length=0;    int numBytes=0;    bis=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.ENCODE);    while ((numBytes=bis.read(buffer,length,4096)) >= 0)     length+=numBytes;    encodedData=new String(buffer,0,length,Base64.PREFERRED_ENCODING);  } catch (  java.io.IOException e) {    logger.error("Error encoding from file " + filename,e);  } finally {    try {      bis.close();    } catch (    Exception e) {    }  }  return encodedData;}  }
class C{  public static void closeCache(){  if (cache != null && !cache.isClosed()) {    cache.close();    cache.getDistributedSystem().disconnect();  }}  }
class C{  private void install() throws IOException {  System.out.print("Installing p2 bootstrap " + release + "... ");  FileMisc.cleanDir(getRootFolder());  File target=new File(getRootFolder(),DOWNLOAD_FILE);  URL url=new URL(DOWNLOAD_ROOT + release.version() + DOWNLOAD_FILE);  FileUtils.copyURLToFile(url,target);  ZipMisc.unzip(target,target.getParentFile());  FileMisc.forceDelete(target);  FileMisc.writeToken(getRootFolder(),TOKEN);  System.out.print("Success.");}  }
class C{  public AuthenticationFailureEvent(Credentials credentials){  this.credentials=credentials;}  }
class C{  public static String createImageLink(String id,String quality){  return "http://i.mover.uz/{id}_{qq}1.jpg".replace("{id}",id).replace("{qq}",quality);}  }
class C{  public IfStatement(Token t,List<Expression> conds,List<Statement> stmts){  super(t);  this.conds=conds;  this.stmts=stmts;  assert conds.size() == stmts.size() || conds.size() + 1 == stmts.size() : "mismatch between conditions and statements for a conditional";}  }
class C{  public IgnoreResourceException(){  super();}  }
class C{  private void createSampler(){  this.sampler=glCreateSamplers();  glSamplerParameteri(this.sampler,GL_TEXTURE_MIN_FILTER,GL_NEAREST);  glSamplerParameteri(this.sampler,GL_TEXTURE_MAG_FILTER,GL_NEAREST);}  }
class C{  private Widget toWidget(Result result){  Widget widget=null;  if (result.containsColumn(CF,QCOST) && result.containsColumn(CF,QNAME)) {    String name=Bytes.toString(result.getValue(CF,QNAME));    int cost=Bytes.toInt(result.getValue(CF,QCOST));    widget=new Widget(name,cost);  }  return widget;}  }
class C{  public void printErrorAndExit(String message){  LOG.log(Level.SEVERE,message);  printError(message,false);  if (!interactive) {    exit(1);  }}  }
class C{  public RelationalLocator(Instances data){  super(data,Attribute.RELATIONAL);}  }
class C{  @Override public UtilityTable queryUtil(Query.UtilQuery query){  InferenceAlgorithm algo=selectBestAlgorithm(query);  return algo.queryUtil(query);}  }
class C{  private DockerCLI createCliWithWait(URL url,int port) throws InterruptedException, IOException {  DockerCLI tempCli=null;  boolean connected=false;  int i=0;  while (i <= 10 && !connected) {    i++;    try {      final CLIConnectionFactory factory=new CLIConnectionFactory().url(url);      tempCli=new DockerCLI(factory,port);      final String channelName=tempCli.getChannel().getName();      if (channelName.contains("CLI connection to")) {        tempCli.upgrade();        connected=true;        LOG.debug(channelName);      } else {        LOG.debug("Cli connection is not via CliPort '{}'. Sleeping for 5s...",channelName);        tempCli.close();        Thread.sleep(5 * 1000);      }    } catch (    IOException e) {      LOG.debug("Jenkins is not available. Sleeping for 5s...",e.getMessage());      Thread.sleep(5 * 1000);    }  }  if (!connected) {    throw new IOException("Can't connect to {}" + url.toString());  }  LOG.info("Jenkins future {}",url);  LOG.info("Jenkins future {}/configure",url);  LOG.info("Jenkins future {}/log/all",url);  return tempCli;}  }
class C{  public NodeC(CategoricalResults crResult,int children){  super(children);  this.crResult=crResult;}  }
class C{  public boolean isUpdatable(){  return isUpdatable;}  }
class C{  public void updateGrid(int x1,int y1,int rows,int columns,float orientation,float vResolution,float hResolution,int major,int[] data,LinkProperties properties,int graphicUpdateMask) throws IOException {  writeGraphicGestureHeader(graphicUpdateMask);  LinkGrid.write(x1,y1,rows,columns,orientation,vResolution,hResolution,major,data,properties,link.dos);}  }
class C{  public Object trapFieldRead(String name){  Class jc=getClassMetaobject().getJavaClass();  try {    return jc.getField(name).get(getObject());  } catch (  NoSuchFieldException e) {    throw new RuntimeException(e.toString());  }catch (  IllegalAccessException e) {    throw new RuntimeException(e.toString());  }}  }
class C{  public Offset(double latPoint,double lonPoint,float[] xypoints,int cMode){  super(latPoint,lonPoint,xypoints,cMode);  setIsPolygon(false);}  }
class C{  private boolean pruned(Class<?> clazz){  return clazz.isPrimitive() || clazz.isArray() || getPrunedPattern().matcher(clazz.getName()).matches();}  }
class C{  public GroupMembershipType idTokenGroupsRequested(){  return this.idTokenGroupsRequested;}  }
class C{  public static Filter makeCopy(Filter model) throws Exception {  return (Filter)new SerializedObject(model).getObject();}  }
class C{  public Constraints(Anchor anchor,String relativeToActionId){  myAnchor=anchor;  myRelativeToActionId=relativeToActionId;}  }
class C{  public static String arrayAsString(IPrimitiveArray charArray,int offset,int count,int limit){  if (charArray.getType() != IObject.Type.CHAR)   return null;  int length=charArray.getLength();  int contentToRead=count <= limit ? count : limit;  if (contentToRead > length - offset)   contentToRead=length - offset;  char[] value;  if (offset == 0 && length == contentToRead) {    value=(char[])charArray.getValueArray();  } else {    value=(char[])charArray.getValueArray(offset,contentToRead);  }  if (value == null)   return null;  StringBuilder result=new StringBuilder(value.length);  for (int ii=0; ii < value.length; ii++) {    char val=value[ii];    if (val >= 32 && val < 127) {      result.append(val);    } else {      result.append("\\u").append(String.format("%04x",0xFFFF & val));    }  }  if (limit < count)   result.append("...");  return result.toString();}  }
class C{  private void compress(SsaBasicBlock in){  DFSInfo bbInfo=info[in.getIndex()];  DFSInfo ancestorbbInfo=info[bbInfo.ancestor.getIndex()];  if (ancestorbbInfo.ancestor != null) {    ArrayList<SsaBasicBlock> worklist=new ArrayList<SsaBasicBlock>();    HashSet<SsaBasicBlock> visited=new HashSet<SsaBasicBlock>();    worklist.add(in);    while (!worklist.isEmpty()) {      int wsize=worklist.size();      SsaBasicBlock v=worklist.get(wsize - 1);      DFSInfo vbbInfo=info[v.getIndex()];      SsaBasicBlock vAncestor=vbbInfo.ancestor;      DFSInfo vabbInfo=info[vAncestor.getIndex()];      if (visited.add(vAncestor) && vabbInfo.ancestor != null) {        worklist.add(vAncestor);        continue;      }      worklist.remove(wsize - 1);      if (vabbInfo.ancestor == null) {        continue;      }      SsaBasicBlock vAncestorRep=vabbInfo.rep;      SsaBasicBlock vRep=vbbInfo.rep;      if (info[vAncestorRep.getIndex()].semidom < info[vRep.getIndex()].semidom) {        vbbInfo.rep=vAncestorRep;      }      vbbInfo.ancestor=vabbInfo.ancestor;    }  }}  }
class C{  @GET @Path("search") @ZeppelinApi public Response search(@QueryParam("q") String queryTerm){  LOG.info("Searching notes for: {}",queryTerm);  String principal=SecurityUtils.getPrincipal();  HashSet<String> roles=SecurityUtils.getRoles();  HashSet<String> userAndRoles=new HashSet<>();  userAndRoles.add(principal);  userAndRoles.addAll(roles);  List<Map<String,String>> notesFound=noteSearchService.query(queryTerm);  for (int i=0; i < notesFound.size(); i++) {    String[] Id=notesFound.get(i).get("id").split("/",2);    String noteId=Id[0];    if (!notebookAuthorization.isOwner(noteId,userAndRoles) && !notebookAuthorization.isReader(noteId,userAndRoles) && !notebookAuthorization.isWriter(noteId,userAndRoles)) {      notesFound.remove(i);      i--;    }  }  LOG.info("{} notes found",notesFound.size());  return new JsonResponse<>(Status.OK,notesFound).build();}  }
class C{  public Message(Message other){  if (other.isSetSessionIDs()) {    List<String> __this__sessionIDs=new ArrayList<String>();    for (    String other_element : other.sessionIDs) {      __this__sessionIDs.add(other_element);    }    this.sessionIDs=__this__sessionIDs;  }  if (other.isSetPacket()) {    this.packet=new Packet(other.packet);  }}  }
class C{  public Vector3d add(double x,double y,double z){  this.x+=x;  this.y+=y;  this.z+=z;  return this;}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  String contextPath=request.getParameter("path");  String warURL=request.getParameter("war");  String command=request.getServletPath();  if (command.equals("/deploy")) {    deploy(response,contextPath,warURL);  } else   if (command.equals("/undeploy")) {    undeploy(response,contextPath);  } else {    response.sendError(400,"Command " + command + " is unknown");  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void initiateDataEntryWorkflow(BasicProperty basicProperty,final User initiater){  LOGGER.debug("Entered into initiateDataEntryWorkflow");  final PropertyImpl oldProperty=(PropertyImpl)basicProperty.getProperty();  final PropertyImpl newProperty=(PropertyImpl)oldProperty.createPropertyclone();  final Position owner=eisCommonsService.getPositionByUserId(initiater.getId());  final String desigName=propertyTaxUtil.getDesignationName(initiater.getId());  final String value=WFLOW_ACTION_NAME_MODIFY + ":" + desigName+ "_"+ WF_STATE_APPROVAL_PENDING;  newProperty.transition(true).start().withSenderName(initiater.getName()).withComments(PROPERTY_WORKFLOW_STARTED).withStateValue(value).withOwner(owner).withDateInfo(new Date());  final PropertyMutationMaster propMutMstr=(PropertyMutationMaster)getPropPerServ().find("from PropertyMutationMaster PM where upper(PM.code) = ?",PROPERTY_MODIFY_REASON_DATA_ENTRY);  newProperty.getPropertyDetail().setPropertyMutationMaster(propMutMstr);  newProperty.setStatus(PropertyTaxConstants.STATUS_WORKFLOW);  basicProperty.addProperty(newProperty);  basicProperty.addPropertyStatusValues(createPropStatVal(basicProperty,PROPERTY_MODIFY_REASON_ADD_OR_ALTER,getPropertyCompletionDate(basicProperty,newProperty),null,null,null,null));  basicProperty=basicPropertyService.update(basicProperty);  LOGGER.debug("Exiting from initiateDataEntryWorkflow");}  }
class C{  public void deleteGroupFileTransfers(String chatId) throws RcsServiceNotAvailableException, RcsGenericException {  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    mApi.deleteGroupFileTransfers2(chatId);  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public NetBlackboard(Network Net){  initVars();  setNetwork(Net);  initComponents();}  }
class C{  private void noSuccessor(){  if (compute == FRAMES) {    Label l=new Label();    l.frame=new Frame();    l.frame.owner=l;    l.resolve(this,code.length,code.data);    previousBlock.successor=l;    previousBlock=l;  } else {    currentBlock.outputStackMax=maxStackSize;  }  currentBlock=null;}  }
class C{  @Override public void updateClusterer(Instance newInstance) throws Exception {  m_numberOfClustersDetermined=false;  if (m_cobwebTree == null) {    m_cobwebTree=new CNode(newInstance.numAttributes(),newInstance);  } else {    m_cobwebTree.addInstance(newInstance);  }}  }
class C{  public static <T>QueueBuilder<T> newBuilder(){  return new QueueBuilder<T>();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public final AssertSubscriber<T> await(Duration timeout){  if (cdl.getCount() == 0) {    return this;  }  try {    if (!cdl.await(timeout.toMillis(),TimeUnit.MILLISECONDS)) {      throw new AssertionError("No complete or error signal before timeout");    }    return this;  } catch (  InterruptedException ex) {    throw new AssertionError("Wait interrupted",ex);  }}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) @Test public void testNodeProcessing() throws Exception {  FilterKeyVals<String,Number> oper=new FilterKeyVals<String,Number>();  CollectorTestSink sortSink=new CollectorTestSink();  oper.filter.setSink(sortSink);  HashMap<String,Number> filter=new HashMap<String,Number>();  filter.put("b",2);  oper.setKeyVals(filter);  oper.clearKeys();  filter.clear();  filter.put("e",200);  filter.put("f",2);  filter.put("blah",2);  oper.setKeyVals(filter);  filter.clear();  filter.put("a",2);  oper.setKeyVals(filter);  oper.beginWindow(0);  HashMap<String,Number> input=new HashMap<String,Number>();  input.put("a",2);  input.put("b",5);  input.put("c",7);  input.put("d",42);  input.put("e",202);  input.put("e",200);  input.put("f",2);  oper.data.process(input);  Assert.assertEquals("number emitted tuples",3,sortSink.collectedTuples.size());  Assert.assertEquals("Total filtered value is ",204,getTotal(sortSink.collectedTuples));  sortSink.clear();  input.clear();  input.put("a",5);  oper.data.process(input);  Assert.assertEquals("number emitted tuples",0,sortSink.collectedTuples.size());  sortSink.clear();  input.clear();  input.put("a",2);  input.put("b",33);  input.put("f",2);  oper.data.process(input);  Assert.assertEquals("number emitted tuples",2,sortSink.collectedTuples.size());  Assert.assertEquals("Total filtered value is ",4,getTotal(sortSink.collectedTuples));  sortSink.clear();  input.clear();  input.put("b",6);  input.put("a",2);  input.put("j",6);  input.put("e",2);  input.put("dd",6);  input.put("blah",2);  input.put("another",6);  input.put("notmakingit",2);  oper.data.process(input);  Assert.assertEquals("number emitted tuples",2,sortSink.collectedTuples.size());  Assert.assertEquals("Total filtered value is ",4,getTotal(sortSink.collectedTuples));  sortSink.clear();  input.clear();  input.put("c",9);  oper.setInverse(true);  oper.data.process(input);  Assert.assertEquals("number emitted tuples",1,sortSink.collectedTuples.size());  Assert.assertEquals("Total filtered value is ",9,getTotal(sortSink.collectedTuples));  oper.endWindow();}  }
class C{  private ThreadState convertThreadState(final int value){switch (value) {case 0:    return ThreadState.RUNNING;case 1:  return ThreadState.SUSPENDED;default :throw new IllegalArgumentException(String.format("Received invalid thread state %d",value));}}  }
class C{  public ElementOperand clone(){  ElementOperand result=new ElementOperand();  result.Index=Index;  return result;}  }
class C{  private byte skipEntityForward(){  while (charIndex < length && (lastChar=text.charAt(charIndex++)) != ';') {  }  return Character.DIRECTIONALITY_WHITESPACE;}  }
class C{  public byte nextByte(){  return (byte)(next(8));}  }
class C{  public static void showAlert(Context context,String title,String text){  Builder alertBuilder=new Builder(context);  alertBuilder.setTitle(title);  alertBuilder.setMessage(text);  alertBuilder.create().show();}  }
class C{  public Entry(){  this(KEY);}  }
class C{  public List<A> reverse(){  if (isEmpty() || tail.isEmpty())   return this;  List<A> rev=nil();  for (List<A> l=this; l.nonEmpty(); l=l.tail)   rev=new List<A>(l.head,rev);  return rev;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:06.964 -0500",hash_original_method="A09FFD0724C9FDF42E343E15D3777A7E",hash_generated_method="8EFD25694144D5D97FB4797756B34472") public static void resumeTimers(){  if (BrowserFrame.sJavaBridge == null) {    throw new IllegalStateException("No WebView has been created in this process!");  }  BrowserFrame.sJavaBridge.resume();}  }
class C{  private void addElementNameEvidenceElementToOverrideTarget(ProcessRemarkService prs,ProcessRemark pr){  EvidenceElement ee=prs.getEvidenceElement(ProcessRemarkService.DEFAULT_EVIDENCE,ELEMENT_NAME_VALUE_KEY);  pr.addElement(ee);}  }
class C{  public void clear(){  throw new UnsupportedOperationException();}  }
class C{  public void testDivideRoundCeilingPos(){  String a="92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=-24;  String b="7472334223847623782375469293018787918347987234564568";  int bScale=13;  String c="1.24390557635720517122423359799284E+53";  int resScale=-21;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_CEILING);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  static public void compareTupleQueryResults(final String name,final String testURI,final AbstractTripleStore store,final ASTContainer astContainer,final TupleQueryResult queryResult,final TupleQueryResult expectedResult,final boolean laxCardinality,final boolean checkOrder) throws QueryEvaluationException {  final MutableTupleQueryResult queryResultTable=new MutableTupleQueryResult(queryResult);  final MutableTupleQueryResult expectedResultTable=new MutableTupleQueryResult(expectedResult);  boolean resultsEqual;  if (laxCardinality) {    resultsEqual=QueryResultUtil.isSubset(queryResultTable,expectedResultTable);  } else {    resultsEqual=QueryResultUtil.equals(queryResultTable,expectedResultTable);    if (checkOrder) {      queryResultTable.beforeFirst();      expectedResultTable.beforeFirst();      while (queryResultTable.hasNext()) {        final BindingSet bs=queryResultTable.next();        final BindingSet expectedBs=expectedResultTable.next();        if (!bs.equals(expectedBs)) {          resultsEqual=false;          break;        }      }    }  }  StringBuilder expectedAndActualResults=null;  if (!resultsEqual && true) {    queryResultTable.beforeFirst();    expectedResultTable.beforeFirst();    final StringBuilder message=new StringBuilder(2048);    message.append("\n============ ");    message.append(name);    message.append(" =======================\n");    message.append("Expected result: \n");    while (expectedResultTable.hasNext()) {      message.append(expectedResultTable.next());      message.append("\n");    }    message.append("=============");    StringUtil.appendN('=',name.length(),message);    message.append("========================\n");    message.append("Query result: \n");    while (queryResultTable.hasNext()) {      message.append(queryResultTable.next());      message.append("\n");    }    message.append("=============");    StringUtil.appendN('=',name.length(),message);    message.append("========================\n");    expectedAndActualResults=message;  }  if (!resultsEqual) {    queryResultTable.beforeFirst();    expectedResultTable.beforeFirst();    final List<BindingSet> queryBindings=Iterations.asList(queryResultTable);    final List<BindingSet> expectedBindings=Iterations.asList(expectedResultTable);    final List<BindingSet> missingBindings=new ArrayList<BindingSet>(expectedBindings);    missingBindings.removeAll(queryBindings);    final List<BindingSet> unexpectedBindings=new ArrayList<BindingSet>(queryBindings);    unexpectedBindings.removeAll(expectedBindings);    final StringBuilder message=new StringBuilder(2048);    message.append("\n");    message.append(testURI);    message.append("\n");    message.append(name);    message.append("\n===================================\n");    if (!missingBindings.isEmpty()) {      message.append("Missing bindings: \n");      for (      BindingSet bs : missingBindings) {        message.append(bs);        message.append("\n");      }      message.append("=============");      StringUtil.appendN('=',name.length(),message);      message.append("========================\n");    }    if (!unexpectedBindings.isEmpty()) {      message.append("Unexpected bindings: \n");      for (      BindingSet bs : unexpectedBindings) {        message.append(bs);        message.append("\n");      }      message.append("=============");      StringUtil.appendN('=',name.length(),message);      message.append("========================\n");    }    if (checkOrder && missingBindings.isEmpty() && unexpectedBindings.isEmpty()) {      message.append("Results are not in expected order.\n");      message.append(" =======================\n");      message.append("query result: \n");      for (      BindingSet bs : queryBindings) {        message.append(bs);        message.append("\n");      }      message.append(" =======================\n");      message.append("expected result: \n");      for (      BindingSet bs : expectedBindings) {        message.append(bs);        message.append("\n");      }      message.append(" =======================\n");      log.error(message.toString());    }    if (expectedAndActualResults != null) {      message.append(expectedAndActualResults);    }    if (astContainer != null) {      message.append("\n===================================\n");      message.append(astContainer.toString());    }    if (store != null && store.getStatementCount() < 100) {      message.append("\n===================================\n");      message.append("database dump:\n");      message.append(store.dumpStore());    }    log.error(message.toString());    fail(message.toString());  }}  }
class C{  public boolean isAtNndn(){  return isAtElement(RDE_NNDN_URI,"NNDN");}  }
class C{  public boolean writeHeader(OutputStream os){  try {    writeInt(os,CACHE_MAGIC);    writeString(os,key);    writeString(os,etag == null ? "" : etag);    writeLong(os,serverDate);    writeLong(os,lastModified);    writeLong(os,ttl);    writeLong(os,softTtl);    writeStringStringMap(responseHeaders,os);    os.flush();    return true;  } catch (  IOException e) {    VolleyLog.d("%s",e.toString());    return false;  }}  }
class C{  @Override public InterpreterResult interpret(String line,InterpreterContext context){  if (sparkVersion.isUnsupportedVersion()) {    return new InterpreterResult(Code.ERROR,"Spark " + sparkVersion.toString() + " is not supported");  }  z.setInterpreterContext(context);  if (line == null || line.trim().length() == 0) {    return new InterpreterResult(Code.SUCCESS);  }  return interpret(line.split("\n"),context);}  }
class C{  public void paintComponentBackground(Graphics g){  super.paintComponentBackground(g);  int clipX=g.getClipX();  int clipY=g.getClipY();  int clipW=g.getClipWidth();  int clipH=g.getClipHeight();  int width=getWidth();  int height=getHeight();  int y=getY();  if (infinite) {    int blockSize=getWidth() / 5;    int x=getX() + (int)((((float)value) / ((float)maxValue - minValue)) * (getWidth() - blockSize));    g.clipRect(x,y,blockSize,height - 1);  } else {    if (vertical) {      int actualHeight=(int)((((float)value) / ((float)maxValue - minValue)) * getHeight());      y+=height - actualHeight;    } else {      width=(int)((((float)value) / ((float)maxValue - minValue)) * getWidth());    }    g.clipRect(getX(),y,width,height);  }  paintingFull=true;  super.paintComponentBackground(g);  paintingFull=false;  g.setClip(clipX,clipY,clipW,clipH);  if (thumbImage != null && !infinite) {    if (!vertical) {      int xPos=getX() + width - thumbImage.getWidth() / 2;      xPos=Math.max(getX(),xPos);      xPos=Math.min(getX() + getWidth() - thumbImage.getWidth(),xPos);      g.drawImage(thumbImage,xPos,y + height / 2 - thumbImage.getHeight() / 2);    } else {      int yPos=y;      g.drawImage(thumbImage,getX() + width / 2 - thumbImage.getWidth() / 2,yPos);    }  }}  }
class C{  private void addPingTimeData(long sample){  lastPingTimesLock.lock();  try {    if (lastPingTimes == null) {      lastPingTimes=new long[PING_MOVING_AVERAGE_WINDOW];      Arrays.fill(lastPingTimes,sample);    } else {      System.arraycopy(lastPingTimes,1,lastPingTimes,0,lastPingTimes.length - 1);      lastPingTimes[lastPingTimes.length - 1]=sample;    }  }  finally {    lastPingTimesLock.unlock();  }}  }
class C{  @Override public synchronized void deleteRow() throws SQLException {  checkClosed();  if (!this.isUpdatable) {    throw new NotUpdatable(this.notUpdatableReason);  }  if (this.onInsertRow) {    throw SQLError.createSQLException(Messages.getString("UpdatableResultSet.1"),getExceptionInterceptor());  } else   if (this.rowData.size() == 0) {    throw SQLError.createSQLException(Messages.getString("UpdatableResultSet.2"),getExceptionInterceptor());  } else   if (isBeforeFirst()) {    throw SQLError.createSQLException(Messages.getString("UpdatableResultSet.3"),getExceptionInterceptor());  } else   if (isAfterLast()) {    throw SQLError.createSQLException(Messages.getString("UpdatableResultSet.4"),getExceptionInterceptor());  }  if (this.deleter == null) {    if (this.deleteSQL == null) {      generateStatements();    }    this.deleter=(PreparedStatement)this.connection.clientPrepareStatement(this.deleteSQL);  }  this.deleter.clearParameters();  int numKeys=this.primaryKeyIndicies.size();  if (numKeys == 1) {    int index=this.primaryKeyIndicies.get(0).intValue();    this.setParamValue(this.deleter,1,this.thisRow,index,this.fields[index].getSQLType());  } else {    for (int i=0; i < numKeys; i++) {      int index=this.primaryKeyIndicies.get(i).intValue();      this.setParamValue(this.deleter,i + 1,this.thisRow,index,this.fields[index].getSQLType());    }  }  this.deleter.executeUpdate();  this.rowData.removeRow(this.rowData.getCurrentRowNumber());  previous();}  }
class C{  public Transaction(String transaction){  String[] a=transaction.split("\\s+");  who=a[0];  when=new Date(a[1]);  amount=Double.parseDouble(a[2]);  if (Double.isNaN(amount) || Double.isInfinite(amount))   throw new IllegalArgumentException("Amount cannot be NaN or infinite");}  }
class C{  protected boolean ModifyFavorites(MenuItem item){  if (!prefHelper.isOnline(getActivity())) {    Toast.makeText(getActivity(),R.string.no_connection,Toast.LENGTH_SHORT).show();    return true;  }  if (databaseManager.checkFavorite(lastComicNumber)) {    new DeleteComicImageTask().execute(true);    item.setIcon(R.drawable.ic_favorite_outline);  } else {    if (!(ContextCompat.checkSelfPermission(getActivity(),Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED)) {      ActivityCompat.requestPermissions(getActivity(),new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE},2);      return true;    }    new SaveComicImageTask().execute(true);    item.setIcon(R.drawable.ic_action_favorite);  }  return true;}  }
class C{  public List<NamedRelatedVirtualPoolRep> listByVirtualArray(URI varrayId){  VirtualPoolList response=client.get(VirtualPoolList.class,String.format(ID_URL_FORMAT,VARRAY_URL) + "/vpools",varrayId);  return defaultList(response.getVirtualPool());}  }
class C{  private void runTest(TestIdentifier testId,final Test junitTest,final TestResult junitResult){  if (junitTest instanceof IDeviceTest) {    ((IDeviceTest)junitTest).setDevice(getDevice());  } else   if (junitTest instanceof com.android.hosttest.DeviceTest) {    com.android.hosttest.DeviceTest deviceTest=(com.android.hosttest.DeviceTest)junitTest;    deviceTest.setDevice(getDevice().getIDevice());    deviceTest.setTestAppPath(mCtsBuild.getTestCasesDir().getAbsolutePath());  }  if (junitTest instanceof IBuildReceiver) {    ((IBuildReceiver)junitTest).setBuild(mBuildInfo);  }  TestRunnable testRunnable=new TestRunnable(junitTest,junitResult);  CommandStatus status=RunUtil.getDefault().runTimed(mTimeoutMs,testRunnable,true);  if (status.equals(CommandStatus.TIMED_OUT)) {    junitResult.addError(junitTest,new TestTimeoutException());    junitResult.endTest(junitTest);  }  if (testRunnable.getException() != null) {    throw testRunnable.getException();  }}  }
class C{  public Bundler putSerializable(String key,Serializable value){  bundle.putSerializable(key,value);  return this;}  }
class C{  public synchronized long skipToKeyframeBefore(long timeUs){  if (queueSize == 0 || timeUs < timesUs[relativeReadIndex]) {    return -1;  }  int lastWriteIndex=(relativeWriteIndex == 0 ? capacity : relativeWriteIndex) - 1;  long lastTimeUs=timesUs[lastWriteIndex];  if (timeUs > lastTimeUs) {    return -1;  }  int sampleCount=0;  int sampleCountToKeyframe=-1;  int searchIndex=relativeReadIndex;  while (searchIndex != relativeWriteIndex) {    if (timesUs[searchIndex] > timeUs) {      break;    } else     if ((flags[searchIndex] & C.SAMPLE_FLAG_SYNC) != 0) {      sampleCountToKeyframe=sampleCount;    }    searchIndex=(searchIndex + 1) % capacity;    sampleCount++;  }  if (sampleCountToKeyframe == -1) {    return -1;  }  queueSize-=sampleCountToKeyframe;  relativeReadIndex=(relativeReadIndex + sampleCountToKeyframe) % capacity;  absoluteReadIndex+=sampleCountToKeyframe;  return offsets[relativeReadIndex];}  }
class C{  public static double tanh(double x){  return ((java.lang.Math.exp(x) - java.lang.Math.exp(-x)) / (java.lang.Math.exp(x) + java.lang.Math.exp(-x)));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:10.053 -0400",hash_original_method="56227BC78914E69D5BB5837C37E02869",hash_generated_method="427EB60DA47DD5CB266DE75BAAB297A7") private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  throw new NotSerializableException();}  }
class C{  @Override public synchronized int available(){  return count - pos;}  }
class C{  public static BulkRequest bulkRequest(){  return new BulkRequest();}  }
class C{  public void write(Integer value){  if (value == null) {    throw new RuntimeException("FrSerialInterface.write(null)");  } else {    if (!isScrRxeSet()) {      if (logSerialMessages)       System.err.println("FrSerialInterface.write(0x" + Format.asHex(value,2) + ") was called while Rx is disabled. Ignored");    } else {      Queue<Integer> rxFifo;      int fbyteThreshold;      if (isRxFifo1()) {        rxFifo=fifo1;        fbyteThreshold=fbyte1;      } else {        rxFifo=fifo2;        fbyteThreshold=fbyte2;      }      if (rxFifo == null) {        if (isSsrRdrfSet()) {          setSsrOre();          if (isScrRieSet()) {            requestInterrupt(rxInterruptNumber,rxInterruptSource);          }        } else {          rdr=mask(value);          signalRdrFull();        }      } else {        if (rxFifo.size() == FIFO_SIZE) {          setSsrOre();          if (rxFifo == fifo1) {            clearFcr0Fe1();            fifo1=null;          } else {            clearFcr0Fe2();            fifo2=null;          }          if (isScrRieSet()) {            requestInterrupt(rxInterruptNumber,rxInterruptSource);          }        } else {          rxFifo.add(mask(value));          if (rxFifo.size() == fbyteThreshold) {            if (!isSsrRdrfSet()) {              signalRdrFull();            }          } else {            fifoIdleCounter=0;          }        }      }    }    if (isSlaveAndClockInputEnabled()) {      super.valueReady(read());    }  }}  }
class C{  public Subnetwork(final Network net){  super(net);  setLabel("Subnetwork");}  }
class C{  @Override public int hashCode(){  int hash=17;  hash=31 * hash + month;  hash=31 * hash + day;  hash=31 * hash + year;  return hash;}  }
class C{  public static void printChars(char ch1,char ch2,int numberPerLine){  for (char c=ch1, count=1; c <= ch2; c++, count++) {    if (count % numberPerLine == 0)     System.out.println(c); else     System.out.print(c + " ");  }}  }
class C{  public SymbolTableEntryInternal steFor_arguments(){  return getSymbolTableEntryInternal("arguments",true);}  }
class C{  public static NodeMetadataLeftIndexedMultiSegmentBipartiteGraph buildRandomNodeMetadataLeftIndexedMultiSegmentBipartiteGraph(int leftSize,int rightSize,double edgeProbability,Random random){  NodeMetadataLeftIndexedMultiSegmentBipartiteGraph nodeMetadataGraph=new NodeMetadataLeftIndexedPowerLawMultiSegmentBipartiteGraph(5,1000,leftSize,(int)(rightSize * edgeProbability),2.0,rightSize,2,new IdentityEdgeTypeMask(),new NullStatsReceiver());  int[][] leftNodeMetadata=new int[][]{};  int[][] rightNodeMetadata=new int[][]{};  for (int i=0; i < leftSize; i++) {    for (int j=0; j < rightSize; j++) {      if (random.nextDouble() < edgeProbability) {        nodeMetadataGraph.addEdge(i,j,(byte)0,leftNodeMetadata,rightNodeMetadata);      }    }  }  return nodeMetadataGraph;}  }
class C{  public boolean isInitializing(){  return m_Initializing;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  private void addToken(int tokenType){  addToken(zzStartRead,zzMarkedPos - 1,tokenType);}  }
class C{  public void actionPerformed(ActionEvent e){}  }
class C{  public SparseDoubleMatrix1D(int size){  this(size,size / 1000,0.2,0.5);}  }
class C{  public static Uri PathToUri(String path){  return Uri.fromFile(new File(path));}  }
class C{  protected void displayResult(P result){  if (result != null) {    String resultOutputString="X: " + GuiBase.getFormat().format(result.getX()) + ",<BR>Y: "+ GuiBase.getFormat().format(result.getY());    localizationResult.setText("<HTML>Result: <BR>" + resultOutputString + "</HTML>");    md.showResult(result);  } else {    clearResult();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:32:01.518 -0400",hash_original_method="95B367B29207B84F57FA0AC8C88D7587",hash_generated_method="51BD899EDC75332FFDC13E22A22A2768") public void register(String command,AtCommandHandler handler){  mExtHandlers.put(command,handler);}  }
class C{  public List<CIMInstance> executeQuery(StorageSystem storageSystem,CIMObjectPath objectPath,String query,String queryLanguage){  CloseableIterator<CIMInstance> iterator=null;  CimConnection connection=_cimConnection.getConnection(storageSystem);  WBEMClient client=connection.getCimClient();  _log.info(String.format("Executing query: %s, objectPath: %s, query language: %s",query,objectPath,queryLanguage));  List<CIMInstance> instanceList=new ArrayList<CIMInstance>();  try {    iterator=client.execQuery(objectPath,query,queryLanguage);    while (iterator.hasNext()) {      CIMInstance instance=iterator.next();      instanceList.add(instance);    }  } catch (  WBEMException we) {    _log.error("Caught an error while attempting to execute query and process query result. Query: " + query,we);  } finally {    if (iterator != null) {      iterator.close();    }  }  return instanceList;}  }
class C{  public JsonArray add(final JsonValue value){  if (value == null) {    throw new NullPointerException("value is null");  }  values.append(value);  return this;}  }
class C{  public void addImagePath(List<String> pathList){  if (pathList == null || pathList.isEmpty()) {    return;  }  if (this.mImageList != null && this.mImageList.isEmpty()) {    this.mImageList.addAll(pathList);  } else {    this.mImageList.addAll(pathList);  }}  }
class C{  private void logSlowRequests(long requestLifetime,Request<?> request,byte[] responseContents,StatusLine statusLine){  if (DEBUG || requestLifetime > SLOW_REQUEST_THRESHOLD_MS) {    VolleyLog.d("HTTP response for request=<%s> [lifetime=%d], [size=%s], " + "[rc=%d], [retryCount=%s]",request,requestLifetime,responseContents != null ? responseContents.length : "null",statusLine.getStatusCode(),request.getRetryPolicy().getCurrentRetryCount());  }}  }
class C{  public RequestCreator resizeDimen(int targetWidthResId,int targetHeightResId){  Resources resources=picasso.context.getResources();  int targetWidth=resources.getDimensionPixelSize(targetWidthResId);  int targetHeight=resources.getDimensionPixelSize(targetHeightResId);  return resize(targetWidth,targetHeight);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 15:47:28.932 -0500",hash_original_method="59142F99E3CC6A5A81C344A4B40F2377",hash_generated_method="33411700A0440DA9267F9A90B6ABF1A9") @DSVerified @DSSafe(DSCat.UTIL_FUNCTION) public static String md5Hex(String data){  return Hex.encodeHexString(md5(data));}  }
class C{  public BusinessObjectDataEntity createBusinessObjectDataEntityInRestoringState(BusinessObjectDataKey businessObjectDataKey,String originStorageName,String originStorageUnitStatus,String glacierStorageName,String glacierStorageUnitStatus){  BusinessObjectDataEntity businessObjectDataEntity=businessObjectDataDaoTestHelper.createBusinessObjectDataEntity(businessObjectDataKey,AbstractDaoTest.LATEST_VERSION_FLAG_SET,AbstractDaoTest.BDATA_STATUS);  StorageEntity originStorageEntity=storageDao.getStorageByName(originStorageName);  if (originStorageEntity == null) {    originStorageEntity=storageDaoTestHelper.createStorageEntity(originStorageName,StoragePlatformEntity.S3);  }  StorageEntity glacierStorageEntity=storageDao.getStorageByName(glacierStorageName);  if (glacierStorageEntity == null) {    glacierStorageEntity=storageDaoTestHelper.createStorageEntity(glacierStorageName,StoragePlatformEntity.GLACIER);  }  StorageUnitEntity originStorageUnitEntity=null;  if (originStorageUnitStatus != null) {    originStorageUnitEntity=createStorageUnitEntity(originStorageEntity,businessObjectDataEntity,originStorageUnitStatus,AbstractDaoTest.NO_STORAGE_DIRECTORY_PATH);  }  if (glacierStorageUnitStatus != null) {    StorageUnitEntity glacierStorageUnitEntity=createStorageUnitEntity(glacierStorageEntity,businessObjectDataEntity,glacierStorageUnitStatus,AbstractDaoTest.NO_STORAGE_DIRECTORY_PATH);    glacierStorageUnitEntity.setParentStorageUnit(originStorageUnitEntity);  }  return businessObjectDataEntity;}  }
class C{  public boolean is_action(){  return false;}  }
class C{  public boolean contains(Rectangle2D rect){  return contains(rect.x,rect.y,rect.size.getWidth(),rect.size.getHeight());}  }
class C{  public Set<String> keySet(){  return this.map.keySet();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  IoBuffer fetchAppBuffer(){  if (this.appBuffer == null) {    return IoBuffer.allocate(0);  } else {    IoBuffer appBuffer=this.appBuffer.flip();    this.appBuffer=null;    return appBuffer;  }}  }
class C{  public PlaceProperty(String text){  setText(text);}  }
class C{  public STextEditPlugin(){  super(new ResourceLocator[]{ExpressionsEditPlugin.INSTANCE,BaseEditPlugin.INSTANCE,TypesEditPlugin.INSTANCE,SGraphEditPlugin.INSTANCE});}  }
class C{  public boolean checkPassword(CharSequence password){  keyChainGroupLock.lock();  try {    return keyChainGroup.checkPassword(password);  }  finally {    keyChainGroupLock.unlock();  }}  }
class C{  public Credentials withUsername(String username){  this.username=username;  return this;}  }
class C{  private boolean checkAttribute(String servAlg,String attribute,String val){  String attributeValue=getPropertyIgnoreCase(servAlg + ' ' + attribute);  if (attributeValue != null) {    if (attribute.equalsIgnoreCase("KeySize")) {      if (Integer.parseInt(attributeValue) >= Integer.parseInt(val)) {        return true;      }    } else {      if (attributeValue.equalsIgnoreCase(val)) {        return true;      }    }  }  return false;}  }
class C{  public static <TK,FV>ConcreteRule<TK,FV> makeSyntheticRule(ConcreteRule<TK,FV> base,Sequence<TK> target,PhraseAlignment align,Scorer<FV> scorer,FeatureExtractor<TK,FV> featurizer,Sequence<TK> sourceSequence,InputProperties inputProperties,int sourceInputId){  Rule<TK> baseRule=base.abstractRule;  Rule<TK> newRule=new Rule<>(baseRule.scores,baseRule.phraseScoreNames,target,baseRule.source,align,PHRASE_TABLE_NAME);  newRule.reoderingScores=baseRule.reoderingScores;  newRule.forwardOrientation=baseRule.forwardOrientation;  newRule.backwardOrientation=baseRule.backwardOrientation;  ConcreteRule<TK,FV> rule=new ConcreteRule<>(newRule,base.sourceCoverage,featurizer,scorer,sourceSequence,sourceInputId,inputProperties);  return rule;}  }
class C{  private boolean isOverFindButton(){  return getFindButtonBounds().contains(currentMouseX,currentMouseY);}  }
class C{  void initModelData(POProfile profile){  if (model.isInitialized()) {    return;  }  initUserData(profile);  initOrganizationData(profile);  model.setRenderOrganizationSection(isOrganizationAdmin() && !appBean.isUIElementHidden(HiddenUIConstants.PANEL_ORGANIZATION_EDIT_ORGANIZATIONDATA));  model.setInitialized(true);}  }
class C{  public void removeAll(){  if (mRecords.size() >= 0) {    mRecords.clear();    mCurrentPosition=-1;    notifyObservers();  }}  }
class C{  public Duration toDuration(){  long durMillis=toDurationMillis();  if (durMillis == 0) {    return Duration.ZERO;  } else {    return new Duration(durMillis);  }}  }
class C{  public static Color rgbc(int red,int green,int blue){  return rgbac(red,green,blue,255);}  }
class C{  void transform(){  if (transformed || nvert <= 0) {    return;  }  if (tvert == null || tvert.length < nvert * 3) {    tvert=new int[nvert * 3];  }  mat.transform(vert,tvert,nvert);  transformed=true;}  }
class C{  public static float quad(float t,float p0,float p1,float p2){  return (float)(p0 * Math.pow(1 - t,2) + p1 * 2 * t* (1 - t) + p2 * t * t);}  }
class C{  private Token viewToToken(Point p){  return modelToToken(viewToModel(p));}  }
class C{  public Quaterniond rotateYXZ(double angleZ,double angleY,double angleX){  return rotateYXZ(angleZ,angleY,angleX,this);}  }
class C{  public TxId2CommitTimeIndex(final IRawStore store,final Checkpoint checkpoint,final IndexMetadata metadata,boolean readOnly){  super(store,checkpoint,metadata,readOnly);}  }
class C{  public MutableLeafData(final int branchingFactor,final boolean hasVersionTimestamps,final boolean hasDeleteMarkers,final boolean hasRawRecords){  keys=new MutableKeyBuffer(branchingFactor + 1);  vals=new MutableValueBuffer(branchingFactor + 1);  versionTimestamps=(hasVersionTimestamps ? new long[branchingFactor + 1] : null);  minimumVersionTimestamp=Long.MAX_VALUE;  maximumVersionTimestamp=Long.MIN_VALUE;  deleteMarkers=(hasDeleteMarkers ? new boolean[branchingFactor + 1] : null);  rawRecords=(hasRawRecords ? new boolean[branchingFactor + 1] : null);}  }
class C{  public Chunk3D(Entity entity){  xCoord=((int)entity.posX) >> 4;  zCoord=((int)entity.posZ) >> 4;  dimensionId=entity.dimension;}  }
class C{  private static Object cloneSerializableObject(Object o) throws IOException, ClassNotFoundException {  ByteArrayOutputStream b=new ByteArrayOutputStream();  ObjectOutputStream out=new ObjectOutputStream(b);  out.writeObject(o);  out.flush();  out.close();  ByteArrayInputStream bi=new ByteArrayInputStream(b.toByteArray());  ObjectInputStream in=new ObjectInputStream(bi);  return in.readObject();}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  int context=getArg0AsNode(xctxt);  if (DTM.NULL == context)   return XString.EMPTYSTRING;  DTM dtm=xctxt.getDTM(context);  String s=(context != DTM.NULL) ? dtm.getLocalName(context) : "";  if (s.startsWith("#") || s.equals("xmlns"))   return XString.EMPTYSTRING;  return new XString(s);}  }
class C{  private byte[] resolveHashStep(String uri,HashChainType currentChain) throws Exception {  LOG.trace("resolveHashStep({})",uri);  Pair<HashStepType,HashChainType> hashStep=fetchHashStep(uri,currentChain);  List<AbstractValueType> values=hashStep.getLeft().getHashValueOrStepRefOrDataRef();  DigestValue[] digests=new DigestValue[values.size()];  for (int i=0; i < digests.length; ++i) {    digests[i]=resolveValue(values.get(i),hashStep.getRight());  }  return DigestList.concatDigests(digests);}  }
class C{  @Override public void postApply(List<URI> initiatorsForResource,Map<URI,Map<URI,Integer>> initiatorsToVolumes) throws Exception {}  }
class C{  public void loading(){  mHintView.setVisibility(View.GONE);  mProgressBar.setVisibility(View.VISIBLE);}  }
class C{  public FileReadStream(FileInputStream is){  init(is);}  }
class C{  public BillingAdapterNotFoundException(String message,Object[] params){  super(message,params);}  }
class C{  public void fromString(String match) throws IllegalArgumentException {  if (match.equals("") || match.equalsIgnoreCase("any") || match.equalsIgnoreCase("all")|| match.equals("[]"))   match="OFMatch[]";  String[] tokens=match.split("[\\[,\\]]");  String[] values;  int initArg=0;  if (tokens[0].equals("OFMatch"))   initArg=1;  this.wildcards=OFPFW_ALL;  int i;  for (i=initArg; i < tokens.length; i++) {    values=tokens[i].split("=");    if (values.length != 2)     throw new IllegalArgumentException("Token " + tokens[i] + " does not have form 'key=value' parsing "+ match);    values[0]=values[0].toLowerCase();    if (values[0].equals(STR_IN_PORT) || values[0].equals("input_port")) {      this.inputPort=U16.t(Integer.valueOf(values[1]));      this.wildcards&=~OFPFW_IN_PORT;    } else     if (values[0].equals(STR_DL_DST) || values[0].equals("eth_dst")) {      this.dataLayerDestination=HexString.fromHexString(values[1]);      this.wildcards&=~OFPFW_DL_DST;    } else     if (values[0].equals(STR_DL_SRC) || values[0].equals("eth_src")) {      this.dataLayerSource=HexString.fromHexString(values[1]);      this.wildcards&=~OFPFW_DL_SRC;    } else     if (values[0].equals(STR_DL_TYPE) || values[0].equals("eth_type")) {      if (values[1].startsWith("0x"))       this.dataLayerType=U16.t(Integer.valueOf(values[1].replaceFirst("0x",""),16)); else       this.dataLayerType=U16.t(Integer.valueOf(values[1]));      this.wildcards&=~OFPFW_DL_TYPE;    } else     if (values[0].equals(STR_DL_VLAN)) {      if (values[1].startsWith("0x"))       this.dataLayerVirtualLan=U16.t(Integer.valueOf(values[1].replaceFirst("0x",""),16)); else       this.dataLayerVirtualLan=U16.t(Integer.valueOf(values[1]));      this.wildcards&=~OFPFW_DL_VLAN;    } else     if (values[0].equals(STR_DL_VLAN_PCP)) {      this.dataLayerVirtualLanPriorityCodePoint=U8.t(Short.valueOf(values[1]));      this.wildcards&=~OFPFW_DL_VLAN_PCP;    } else     if (values[0].equals(STR_NW_DST) || values[0].equals("ip_dst")) {      setFromCIDR(values[1],STR_NW_DST);    } else     if (values[0].equals(STR_NW_SRC) || values[0].equals("ip_src")) {      setFromCIDR(values[1],STR_NW_SRC);    } else     if (values[0].equals(STR_NW_PROTO)) {      if (values[1].startsWith("0x"))       this.networkProtocol=U8.t(Short.valueOf(values[1].replaceFirst("0x",""),16)); else       this.networkProtocol=U8.t(Short.valueOf(values[1]));      this.wildcards&=~OFPFW_NW_PROTO;    } else     if (values[0].equals(STR_NW_TOS)) {      this.setNetworkTypeOfService(U8.t(Short.valueOf(values[1])));      this.wildcards&=~OFPFW_NW_TOS;    } else     if (values[0].equals(STR_TP_DST)) {      this.transportDestination=U16.t(Integer.valueOf(values[1]));      this.wildcards&=~OFPFW_TP_DST;    } else     if (values[0].equals(STR_TP_SRC)) {      this.transportSource=U16.t(Integer.valueOf(values[1]));      this.wildcards&=~OFPFW_TP_SRC;    } else {      throw new IllegalArgumentException("unknown token " + tokens[i] + " parsing "+ match);    }  }}  }
class C{  @Override public int compareTo(PolarAnglePoint p){  if (p.angle > angle) {    return +1;  } else   if (p.angle < angle) {    return -1;  }  return 0;}  }
class C{  public boolean isRequired(){  return required;}  }
class C{  public static int convertPointerEvents(Element e){  Value v=getComputedStyle(e,SVGCSSEngine.POINTER_EVENTS_INDEX);  String s=v.getStringValue();switch (s.charAt(0)) {case 'v':    if (s.length() == 7) {      return GraphicsNode.VISIBLE;    } else {switch (s.charAt(7)) {case 'p':        return GraphicsNode.VISIBLE_PAINTED;case 'f':      return GraphicsNode.VISIBLE_FILL;case 's':    return GraphicsNode.VISIBLE_STROKE;default :  throw new IllegalStateException("unexpected event, must be one of (p,f,s) is:" + s.charAt(7));}}case 'p':return GraphicsNode.PAINTED;case 'f':return GraphicsNode.FILL;case 's':return GraphicsNode.STROKE;case 'a':return GraphicsNode.ALL;case 'n':return GraphicsNode.NONE;default :throw new IllegalStateException("unexpected event, must be one of (v,p,f,s,a,n) is:" + s.charAt(0));}}  }
class C{  public void characters(char ch[],int start,int length) throws SAXException {  m_curValue.append(ch,start,length);}  }
class C{  public static void put(String relativeUrl,RequestParams params,AsyncHttpResponseHandler handler){  client.post(getAbsoluteApiUrl(relativeUrl),params,handler);  TLog.log(TAG,"PUT " + relativeUrl + " & "+ params.toString());}  }
class C{  static ZoneOffsetTransition readExternal(DataInput in) throws IOException {  long epochSecond=Ser.readEpochSec(in);  ZoneOffset before=Ser.readOffset(in);  ZoneOffset after=Ser.readOffset(in);  if (before.equals(after)) {    throw new IllegalArgumentException("Offsets must not be equal");  }  return new ZoneOffsetTransition(epochSecond,before,after);}  }
class C{  void dndDone(){}  }
class C{  private int slotSizeIndex(final int allocSize){  if (allocSize % 64 != 0)   return -1;  final int slotSize=allocSize / 64;  int slotSizeIndex=-1;  for (int index=0; index < m_allocSizes.length; index++) {    if (m_allocSizes[index] == slotSize) {      slotSizeIndex=index;      break;    }  }  return slotSizeIndex;}  }
class C{  public void end(String namespace,String name) throws Exception {  PropertyBean top=null;  try {    top=(PropertyBean)digester.pop();  } catch (  Exception e) {    throw new IllegalStateException("Popped object is not a " + CLASS_NAME + " instance");  }  PropertyHolder ah=(PropertyHolder)digester.peek();  PropertyBean old=ah.getProperty(top.getPropertyName());  if (old == null) {    if (digester.getLogger().isDebugEnabled()) {      digester.getLogger().debug("[PropertyRule]{" + digester.getMatch() + "} New("+ top.getPropertyName()+ ")");    }    ah.addProperty(top);  } else {    if (digester.getLogger().isDebugEnabled()) {      digester.getLogger().debug("[PropertyRule]{" + digester.getMatch() + "} Merge("+ top.getPropertyName()+ ")");    }    mergeProperty(top,old);  }}  }
class C{  @Override public boolean logModified(Logger log){  return false;}  }
class C{  HttpStreamWrapper(HttpStream stream) throws IOException {  _stream=stream;}  }
class C{  public boolean isBoolean(String key){  return get(key) instanceof Boolean;}  }
class C{  public HostScsiDisk findLunDisk(int hlu,Collection<String> sourceNames,Collection<String> targetNames){  Map<String,HostHostBusAdapter> hbas=getHostBusAdapters();  String diskKey=null;  for (  HostScsiTopologyInterface adapter : listScsiTopologyInterfaces()) {    HostHostBusAdapter hba=hbas.get(adapter.getAdapter());    String sourceName=getSourceName(hba);    if (!sourceNames.contains(sourceName) || (adapter.getTarget() == null)) {      continue;    }    for (    HostScsiTopologyTarget target : adapter.getTarget()) {      String targetName=getTargetName(target);      if (!targetNames.contains(targetName)) {        continue;      }      HostScsiTopologyLun lun=findLun(target,hlu);      if (lun != null) {        String key=lun.getScsiLun();        if (diskKey == null) {          diskKey=key;        } else         if (!StringUtils.equals(diskKey,key)) {          throw new IllegalArgumentException("LUN " + hlu + " maps to different disks for "+ targetNames);        }      }    }  }  if (diskKey == null) {    return null;  }  HostScsiDisk disk=getScsiDiskByKey(diskKey);  return disk;}  }
class C{  public void testZonesAndTentsDisplayed_afterChartView(){  inUserLoginGoToPatientCreation();  String id=generateId();  populateNewPatientFields(id);  click(viewWithText("OK"));  waitForProgressFragment();  pressBack();  inLocationSelectionCheckZonesAndTentsDisplayed();}  }
class C{  public void testBug3539() throws Exception {  if (!serverSupportsStoredProcedures()) {    return;  }  createProcedure("testBug3539","()\nBEGIN\nSELECT 1;end\n");  this.rs=this.conn.getMetaData().getProcedures(null,null,"testBug3539");  assertTrue(this.rs.next());  assertTrue("testBug3539".equals(this.rs.getString(3)));}  }
class C{  private FloorwiseDemandCalculations createFloorDmdCalc(final PTDemandCalculations ptDmdCal,final Floor floor,final TaxCalculationInfo taxCalcInfo){  LOGGER.debug("Entered into createFloorDmdCalc, ptDmdCal: " + ptDmdCal + ", floor: "+ floor+ ", taxCalcInfo: "+ taxCalcInfo);  final FloorwiseDemandCalculations floorDmdCalc=new FloorwiseDemandCalculations();  floorDmdCalc.setPTDemandCalculations(ptDmdCal);  floorDmdCalc.setFloor(floor);  for (  final UnitTaxCalculationInfo unitTax : taxCalcInfo.getUnitTaxCalculationInfos())   if (FLOOR_MAP.get(floor.getFloorNo()).equals(unitTax.getFloorNumber()) && floor.getPropertyUsage().getUsageCode().equalsIgnoreCase(unitTax.getUnitUsage()) && floor.getPropertyOccupation().getOccupancyCode().equalsIgnoreCase(unitTax.getUnitOccupation())&& floor.getStructureClassification().getConstrTypeCode().equalsIgnoreCase(unitTax.getUnitStructure())&& floor.getBuiltUpArea().getArea().equals(Float.valueOf(unitTax.getFloorArea().toString())))   setFloorDmdCalTax(unitTax,floorDmdCalc);  totalAlv=totalAlv.add(floorDmdCalc.getAlv());  LOGGER.debug("floorDmdCalc: " + floorDmdCalc + "\nExiting from createFloorDmdCalc");  return floorDmdCalc;}  }
class C{  public static MatchResult findMatchAfterIndex(RegExp regexp,String text,int exclusiveStartIndex){  regexp.setLastIndex(exclusiveStartIndex + 1);  return regexp.exec(text);}  }
class C{  public static boolean isLocalVdcSingleSite(){  List<URI> ids=dbClient.queryByType(VirtualDataCenter.class,true);  for (  URI vdcId : ids) {    VirtualDataCenter vdc=dbClient.queryObject(VirtualDataCenter.class,vdcId);    if (!vdc.getLocal()) {      if ((vdc.getConnectionStatus() == VirtualDataCenter.ConnectionStatus.ISOLATED) || vdc.getRepStatus() == VirtualDataCenter.GeoReplicationStatus.REP_NONE) {        continue;      }      return false;    }  }  return true;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static String resolve(IObject object){  if (object == null) {    throw new NullPointerException(Messages.ClassSpecificNameResolverRegistry_Error_MissingObject.pattern);  }  return instance().registry.doResolve(object);}  }
class C{  public final int pop(){  return m_map[--m_firstFree];}  }
class C{  public static AccountFragment newInstance(String param1,String param2){  AccountFragment fragment=new AccountFragment();  Bundle args=new Bundle();  args.putString(ARG_PARAM1,param1);  args.putString(ARG_PARAM2,param2);  fragment.setArguments(args);  return fragment;}  }
class C{  public synchronized void addStatisticsNotificationListener(StatisticsNotificationListener l){  if (m_StatisticsNotificationListeners == null)   m_StatisticsNotificationListeners=new HashSet<>();  m_StatisticsNotificationListeners.add(l);}  }
class C{  public void autoWireSingle(Operator operator,CompatibilityLevel level,boolean inputs,boolean outputs){  if (inputs) {    transformMDNeighbourhood();    LinkedList<OutputPort> readyOutputs=new LinkedList<OutputPort>();    addReadyOutputs(readyOutputs,getInnerSources());    boolean found=false;    for (    Operator other : operators) {      if (other == operator) {        found=true;        break;      } else {        addReadyOutputs(readyOutputs,other.getOutputPorts());      }    }    if (!found) {      throw new IllegalArgumentException("Operator " + operator.getName() + " does not belong to this subprocess "+ getName()+ ".");    }    getEnclosingOperator().getLogger().fine("Wiring: " + operator + "."+ operator.getInputPorts().getAllPorts()+ " to "+ readyOutputs);    autoWire(level,operator.getInputPorts(),readyOutputs);  }  if (outputs) {    LinkedList<OutputPort> readyOutputs=new LinkedList<OutputPort>();    addReadyOutputs(readyOutputs,operator.getOutputPorts());    List<Operator> successors=new LinkedList<Operator>();    boolean foundMe=false;    for (    Operator other : getOperators()) {      if (foundMe) {        successors.add(other);      } else       if (other == operator) {        foundMe=true;      }    }    autoWire(level,successors,readyOutputs,false,false);  }}  }
class C{  private static Variable createVariableFromString(String line) throws VerifierException {  boolean isPrim=false;  int size=0;  String[] variable=line.split(":");  String variable_type=variable[1];  String variable_name=variable[0];  String repeatCountField=null;  ArrayList<Integer> sizes=new ArrayList<Integer>();  if (variable_type.contains("unsigned") || variable_type.contains("signed")) {    variable_type=variable_type.split(" ")[1];  }  if (Helper.isArrayUnsupported(variable_type)) {    System.out.println("Does not suuport 3D array or higher dimension in the following Layout declaration: " + line);    return null;  }  if (Helper.isFieldDup(variable_name)) {    System.out.println("Two or more variables have the same name! in the following Layout declaration: " + line);    return null;  }  if (Helper.isPointer(variable_type)) {    size=System.getProperty("sun.arch.data.model").equals("32") ? 4 : 8;    numOfPointer++;  } else {    size=Integer.parseInt(variable[2]);    totalSize+=size;  }  if (variable_type.contains("[")) {    String arrayPart=variable_type;    sizes=new ArrayList<Integer>();    if (arrayPart.contains("[")) {      while (arrayPart.contains("[")) {        String arraySize=arrayPart.substring(arrayPart.indexOf("[") + 1,arrayPart.indexOf("]"));        if (null != repeatCountField) {          throw new VerifierException("only single dimension VLAs are accepted");        }        if (Helper.isInteger(arraySize)) {          sizes.add(Integer.parseInt(arraySize));        } else {          repeatCountField=arraySize;          if (!Helper.isFieldDup(repeatCountField)) {            throw new VerifierException("the repeatCountField '" + repeatCountField + "' for VLA '"+ variable_name+ "' does not exist or is not preceding the VLA");          }        }        arrayPart=variable_type.substring(arrayPart.indexOf("]") + 1,arrayPart.length());      }      variable_type=variable_type.substring(0,variable_type.indexOf("["));    }  }  Helper.testValidation(variable_name,variable_type,line);  if (Helper.isJPrimitiveType(variable_type) && variable_type.contains("j")) {    variable_type=variable_type.substring(1,variable_type.length());    if (sizes.size() != 0) {      isPrim=true;    }  } else   if (Helper.isCPrimitiveType(variable_type)) {    return null;  }  return new Variable(variable_name,variable_type,integerArrayListToIntArray(sizes),isPrim,size,repeatCountField);}  }
class C{  public synchronized boolean canThreadDecoding(Thread t){  ThreadStatus status=mThreadStatus.get(t);  if (status == null) {    return true;  }  return (status.mState != State.CANCEL);}  }
class C{  public static String toLowerEnglish(String s){  return s.toLowerCase(Locale.ENGLISH);}  }
class C{  public static int firstMissingPositive(int[] A){  if (A == null || A.length == 0)   return 1;  int n=A.length;  for (int i=0; i < n; i++) {    int num=A[i];    while (A[i] <= n && A[i] > 0 && A[num - 1] != num) {      A[i]=A[num - 1];      A[num - 1]=num;      num=A[i];    }  }  for (int i=0; i < n; i++)   if (A[i] != i + 1)   return i + 1;  return n + 1;}  }
class C{  public void reset(String latex){  parseString=new StringBuffer(latex);  len=parseString.length();  formula.root=null;  pos=0;  spos=0;  line=0;  col=0;  group=0;  insertion=false;  atIsLetter=0;  arrayMode=false;  ignoreWhiteSpace=true;  firstpass();}  }
class C{  @Override public void onCommit(List<? extends IndexCommit> commits) throws IOException {  log.debug("SolrDeletionPolicy.onCommit: commits: {}",new CommitsLoggingDebug(commits));  updateCommits(commits);}  }
class C{  public boolean isReturnval(){  return returnval;}  }
class C{  @Override public void run(){  try {    this.runAndThrow();  } catch (  Throwable t) {    if (!this.stopped) {      this.lastException=t;      this.logger.warn("Error in the embedded HTTP server: " + t.toString(),this.getClass().getName());      for (      StackTraceElement ste : t.getStackTrace()) {        this.logger.warn(ste.toString(),this.getClass().getName());      }    }  }}  }
class C{  public SootMethod retrieveGetCharSequence_ID(Integer intId){  String methodName="getCharSequence_" + String.format("%x",intId);  SootMethod method=null;  try {    method=mSootClass.getMethodByName(methodName);    return method;  } catch (  Exception ex) {    return addGetCharSequence_ID(intId);  }}  }
class C{  @Override public Account findByUsername(String username){  Account account=accountRepository.findByUsername(username);  return account;}  }
class C{  public boolean isPrinter(){  return (iPrinter != null);}  }
class C{  public final BottomSheet create(){  return bottomSheet;}  }
class C{  public Hyperbolic(double alpha,double beta,RandomEngine randomGenerator){  setRandomGenerator(randomGenerator);  setState(alpha,beta);}  }
class C{  @Override public DescribeClusterResult describeClusterRequest(AmazonElasticMapReduceClient emrClient,DescribeClusterRequest describeClusterRequest){  return emrClient.describeCluster(describeClusterRequest);}  }
class C{  public SizeAnimator(){  super();}  }
class C{  private void upgradeToMetroPointVolume(Volume volume,VirtualPool newVpool,VirtualPoolChangeParam vpoolChangeParam,String taskId) throws InternalException {  _log.info(String.format("Upgrade [%s] to MetroPoint",volume.getLabel()));  Project project=_dbClient.queryObject(Project.class,volume.getProject());  URI currentVpool=volume.getVirtualPool();  volume.setVirtualPool(newVpool.getId());  List<Recommendation> recommendations=getRecommendationsForVirtualPoolChangeRequest(volume,newVpool,vpoolChangeParam,null);  volume.setVirtualPool(currentVpool);  if (recommendations.isEmpty()) {    throw APIException.badRequests.noStorageFoundForVolume();  }  VirtualArray varray=_dbClient.queryObject(VirtualArray.class,volume.getVirtualArray());  VolumeCreate param=new VolumeCreate(volume.getLabel(),String.valueOf(volume.getCapacity()),1,newVpool.getId(),volume.getVirtualArray(),volume.getProject().getURI());  VirtualPoolCapabilityValuesWrapper capabilities=new VirtualPoolCapabilityValuesWrapper();  capabilities.put(VirtualPoolCapabilityValuesWrapper.RESOURCE_COUNT,1);  capabilities.put(VirtualPoolCapabilityValuesWrapper.BLOCK_CONSISTENCY_GROUP,volume.getConsistencyGroup());  TaskList taskList=new TaskList();  createTaskForVolume(volume,ResourceOperationTypeEnum.CHANGE_BLOCK_VOLUME_VPOOL,taskList,taskId);  Map<VpoolUse,List<Recommendation>> recommendationMap=new HashMap<VpoolUse,List<Recommendation>>();  recommendationMap.put(VpoolUse.ROOT,recommendations);  createVolumes(param,project,varray,newVpool,recommendationMap,taskList,taskId,capabilities);}  }
class C{  public boolean isPanXEnabled(){  return mPanXEnabled;}  }
class C{  public ActionForward redirectForwardMethod(HttpServletRequest request,String nameAction,String pMethodName,String methodName){  ActionForward ret=new ActionForward();  ret.setPath(request.getServletPath() + nameAction + "?"+ pMethodName+ "="+ methodName);  ret.setRedirect(true);  return ret;}  }
class C{  private void drawFill(Graphics g,int x,int y,int w,int h){  g.setColor(Color.BLACK);  g.drawRect(x,y,w,h);  g.setColor(Color.LIGHT_GRAY);  g.fillRect(x,y,w,h);}  }
class C{  public static int encodeZigZag32(final int n){  return (n << 1) ^ (n >> 31);}  }
class C{  public void testNegateNegative(){  byte aBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  int aSign=-1;  byte rBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.negate();  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertTrue("incorrect sign",result.signum() == 1);}  }
class C{  protected void executeQuery(){  if (evaluateMandatoryFilter()) {    if (getAD_Window_ID() > 1)     bZoom.setEnabled(true);    bSelectAll.setEnabled(true);    bExport.setEnabled(true);    if (isDeleteable())     bDelete.setEnabled(true);    collapsibleSearch.setCollapsed(isCollapsibleByDefault());    p_loadedOK=initBrowser();    Env.setContext(Env.getCtx(),0,"currWindowNo",getWindowNo());    if (parameterPanel != null)     parameterPanel.refreshContext();    if (m_worker != null && m_worker.isAlive())     return;    if (!testCount())     return;    m_frame.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));    setStatusLine(Msg.getMsg(Env.getCtx(),"StartSearch"),false);    m_worker=new Worker();    m_worker.start();  }}  }
class C{  public void addParameter(final NameValuePair param) throws IllegalArgumentException {  LOG.trace("enter PostMethod.addParameter(NameValuePair)");  if (param == null) {    throw new IllegalArgumentException("NameValuePair may not be null");  }  addParameter(param.getName(),param.getValue());}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static Joiner create(Table fromTable,Table toTable) throws IOException {  return create(fromTable.getForeignKeyIndex(toTable));}  }
class C{  public Boolean isConstantBitRateSupported(){  return constantBitRateSupported;}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public Plan(Object... steps){  for (int i=0; i < steps.length; i++) {    add(steps[i]);  }}  }
class C{  public static void logOut(){  ConnectionRequest req=new ConnectionRequest();  req.setPost(false);  req.setUrl("https://www.facebook.com/logout.php?access_token=" + token + "&confirm=1&next="+ redirectURI);  NetworkManager.getInstance().addToQueueAndWait(req);  token=null;}  }
class C{  public boolean empty(){  return (position == input.length());}  }
class C{  public boolean verifyKeyedChecksum(byte[] data,int size,byte[] key,byte[] checksum,int usage) throws KrbCryptoException {  byte[] cksum=decryptKeyedChecksum(checksum,key);  byte[] new_data=new byte[size + confounderSize()];  System.arraycopy(cksum,0,new_data,0,confounderSize());  System.arraycopy(data,0,new_data,confounderSize(),size);  byte[] new_cksum=calculateChecksum(new_data,new_data.length);  byte[] orig_cksum=new byte[cksumSize() - confounderSize()];  System.arraycopy(cksum,confounderSize(),orig_cksum,0,cksumSize() - confounderSize());  return isChecksumEqual(orig_cksum,new_cksum);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SexecPackage.REACTION_FIRED__REACTION:    if (resolve)     return getReaction();  return basicGetReaction();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static void dumpRef(ObjectReference ref){  DebugUtil.dumpRef(ref);}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public void resetCount(){  progress=0;  setText("0%");  invalidate();}  }
class C{  public boolean isStateActive(State state){switch (state) {case main_region_StateA:    return stateVector[0] == State.main_region_StateA;case main_region_StateB:  return stateVector[0] == State.main_region_StateB;default :return false;}}  }
class C{  public boolean hasNext(){  return super.hasAttribute(NEXT);}  }
class C{  public ToStringBuilder append(final String fieldName,final int[] array){  style.append(buffer,fieldName,array,null);  return this;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static int exec(String origArgs[]){  errorReporter=new ToolErrorReporter(false,global.getErr());  shellContextFactory.setErrorReporter(errorReporter);  String[] args=processOptions(origArgs);  if (mainModule != null && !fileList.contains(mainModule))   fileList.add(mainModule);  if (processStdin)   fileList.add(null);  if (!global.initialized) {    global.init(shellContextFactory);  }  IProxy iproxy=new IProxy(IProxy.PROCESS_FILES);  iproxy.args=args;  shellContextFactory.call(iproxy);  return exitCode;}  }
class C{  public final void mul(Matrix4f m1,Matrix4f m2){  if (this != m1 && this != m2) {    this.m00=m1.m00 * m2.m00 + m1.m01 * m2.m10 + m1.m02 * m2.m20 + m1.m03 * m2.m30;    this.m01=m1.m00 * m2.m01 + m1.m01 * m2.m11 + m1.m02 * m2.m21 + m1.m03 * m2.m31;    this.m02=m1.m00 * m2.m02 + m1.m01 * m2.m12 + m1.m02 * m2.m22 + m1.m03 * m2.m32;    this.m03=m1.m00 * m2.m03 + m1.m01 * m2.m13 + m1.m02 * m2.m23 + m1.m03 * m2.m33;    this.m10=m1.m10 * m2.m00 + m1.m11 * m2.m10 + m1.m12 * m2.m20 + m1.m13 * m2.m30;    this.m11=m1.m10 * m2.m01 + m1.m11 * m2.m11 + m1.m12 * m2.m21 + m1.m13 * m2.m31;    this.m12=m1.m10 * m2.m02 + m1.m11 * m2.m12 + m1.m12 * m2.m22 + m1.m13 * m2.m32;    this.m13=m1.m10 * m2.m03 + m1.m11 * m2.m13 + m1.m12 * m2.m23 + m1.m13 * m2.m33;    this.m20=m1.m20 * m2.m00 + m1.m21 * m2.m10 + m1.m22 * m2.m20 + m1.m23 * m2.m30;    this.m21=m1.m20 * m2.m01 + m1.m21 * m2.m11 + m1.m22 * m2.m21 + m1.m23 * m2.m31;    this.m22=m1.m20 * m2.m02 + m1.m21 * m2.m12 + m1.m22 * m2.m22 + m1.m23 * m2.m32;    this.m23=m1.m20 * m2.m03 + m1.m21 * m2.m13 + m1.m22 * m2.m23 + m1.m23 * m2.m33;    this.m30=m1.m30 * m2.m00 + m1.m31 * m2.m10 + m1.m32 * m2.m20 + m1.m33 * m2.m30;    this.m31=m1.m30 * m2.m01 + m1.m31 * m2.m11 + m1.m32 * m2.m21 + m1.m33 * m2.m31;    this.m32=m1.m30 * m2.m02 + m1.m31 * m2.m12 + m1.m32 * m2.m22 + m1.m33 * m2.m32;    this.m33=m1.m30 * m2.m03 + m1.m31 * m2.m13 + m1.m32 * m2.m23 + m1.m33 * m2.m33;  } else {    float m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33;    m00=m1.m00 * m2.m00 + m1.m01 * m2.m10 + m1.m02 * m2.m20 + m1.m03 * m2.m30;    m01=m1.m00 * m2.m01 + m1.m01 * m2.m11 + m1.m02 * m2.m21 + m1.m03 * m2.m31;    m02=m1.m00 * m2.m02 + m1.m01 * m2.m12 + m1.m02 * m2.m22 + m1.m03 * m2.m32;    m03=m1.m00 * m2.m03 + m1.m01 * m2.m13 + m1.m02 * m2.m23 + m1.m03 * m2.m33;    m10=m1.m10 * m2.m00 + m1.m11 * m2.m10 + m1.m12 * m2.m20 + m1.m13 * m2.m30;    m11=m1.m10 * m2.m01 + m1.m11 * m2.m11 + m1.m12 * m2.m21 + m1.m13 * m2.m31;    m12=m1.m10 * m2.m02 + m1.m11 * m2.m12 + m1.m12 * m2.m22 + m1.m13 * m2.m32;    m13=m1.m10 * m2.m03 + m1.m11 * m2.m13 + m1.m12 * m2.m23 + m1.m13 * m2.m33;    m20=m1.m20 * m2.m00 + m1.m21 * m2.m10 + m1.m22 * m2.m20 + m1.m23 * m2.m30;    m21=m1.m20 * m2.m01 + m1.m21 * m2.m11 + m1.m22 * m2.m21 + m1.m23 * m2.m31;    m22=m1.m20 * m2.m02 + m1.m21 * m2.m12 + m1.m22 * m2.m22 + m1.m23 * m2.m32;    m23=m1.m20 * m2.m03 + m1.m21 * m2.m13 + m1.m22 * m2.m23 + m1.m23 * m2.m33;    m30=m1.m30 * m2.m00 + m1.m31 * m2.m10 + m1.m32 * m2.m20 + m1.m33 * m2.m30;    m31=m1.m30 * m2.m01 + m1.m31 * m2.m11 + m1.m32 * m2.m21 + m1.m33 * m2.m31;    m32=m1.m30 * m2.m02 + m1.m31 * m2.m12 + m1.m32 * m2.m22 + m1.m33 * m2.m32;    m33=m1.m30 * m2.m03 + m1.m31 * m2.m13 + m1.m32 * m2.m23 + m1.m33 * m2.m33;    this.m00=m00;    this.m01=m01;    this.m02=m02;    this.m03=m03;    this.m10=m10;    this.m11=m11;    this.m12=m12;    this.m13=m13;    this.m20=m20;    this.m21=m21;    this.m22=m22;    this.m23=m23;    this.m30=m30;    this.m31=m31;    this.m32=m32;    this.m33=m33;  }}  }
class C{  public static boolean copyFile(InputStream is,File dst){  OutputStream os=null;  try {    os=new FileOutputStream(dst);    byte[] buffer=new byte[102400];    int length;    while ((length=is.read(buffer)) > 0) {      os.write(buffer,0,length);    }  } catch (  FileNotFoundException e) {    Log.w(StorageUtil.class.getSimpleName(),e);    return false;  }catch (  IOException e) {    Log.w(StorageUtil.class.getSimpleName(),e);    return false;  } finally {    try {      is.close();    } catch (    IOException ignored) {    }    try {      if (os != null) {        os.close();      }    } catch (    IOException ignored) {    }  }  return true;}  }
class C{  public void selectConfigurableTab(Co2Configurable configurable,boolean selectCO2Tab){  Component tabComponent=configurable.getTabComponent();  if (tabComponent != null) {    Container parent=tabComponent.getParent();    if (parent instanceof JTabbedPane) {      ((JTabbedPane)parent).setSelectedComponent(tabComponent);    }  }}  }
class C{  public void add(long l) throws IOException {  assert bitsPerValue == 64 || (l >= 0 && l <= PackedInts.maxValue(bitsPerValue)) : bitsPerValue;  assert !finished;  if (count >= numValues) {    throw new EOFException("Writing past end of stream");  }  nextValues[off++]=l;  if (off == nextValues.length) {    flush();  }  count++;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public String intToRomanB(int num){  StringBuilder sb=new StringBuilder();  int i=0;  while (num > 0 && i < intDict.length) {    if (num >= intDict[i]) {      sb.append(romanDict[i]);      num-=intDict[i];    } else {      i++;    }  }  return sb.toString();}  }
class C{  @SuppressWarnings("UnusedDeclaration") public void notifyDataSetChanged(final boolean force){  if (force || !(mDecoratedBaseAdapter instanceof ArrayAdapter<?>)) {    mDecoratedBaseAdapter.notifyDataSetChanged();  }}  }
class C{  @Override public boolean onCreateOptionsMenu(Menu menu){  return true;}  }
class C{  protected long checkWrite(long offset,long length){  checkOffset(offset);  long position=offset + length;  if (position > size())   throw new BufferOverflowException();  return position;}  }
class C{  public void preVisit(TextEdit edit){}  }
class C{  public DesiredCapabilities createCapabilities(final DriverConfig webDriverConfig){  DesiredCapabilities capability;  capability=new DesiredCapabilities();  capability.setBrowserName(DesiredCapabilities.firefox().getBrowserName());  FirefoxProfile profile=getFirefoxProfile(webDriverConfig);  configProfile(profile,webDriverConfig);  capability.setCapability(FirefoxDriver.PROFILE,profile);  capability.setCapability("marionette",true);  if (webDriverConfig.isEnableJavascript()) {    capability.setJavascriptEnabled(true);  } else {    capability.setJavascriptEnabled(false);  }  capability.setCapability(CapabilityType.TAKES_SCREENSHOT,true);  capability.setCapability(CapabilityType.ACCEPT_SSL_CERTS,true);  if (webDriverConfig.getBrowserVersion() != null) {    capability.setVersion(webDriverConfig.getBrowserVersion());  }  if (webDriverConfig.getWebPlatform() != null) {    capability.setPlatform(webDriverConfig.getWebPlatform());  }  if (webDriverConfig.getProxyHost() != null) {    capability.setCapability(CapabilityType.PROXY,webDriverConfig.getProxy());  }  if (webDriverConfig.getMode() == DriverMode.LOCAL) {    String marionetteDriverPath=webDriverConfig.getChromeDriverPath();    if (marionetteDriverPath == null) {      try {        if (System.getenv("webdriver.gecko.driver") != null) {          System.out.println("get gecko driver from property:" + System.getenv("webdriver.gecko.driver"));          System.setProperty("webdriver.gecko.driver",System.getenv("webdriver.gecko.driver"));        } else {          handleExtractResources();        }      } catch (      IOException ex) {        ex.printStackTrace();      }    } else {      System.setProperty("webdriver.gecko.driver",marionetteDriverPath);    }  }  return capability;}  }
class C{  protected final void LOWTABLESWITCH(Instruction s){  RegisterOperand newIndex=regpool.makeTempInt();  EMIT(MIR_Move.create(PPC_MOVE,newIndex,LowTableSwitch.getClearIndex(s)));  int number=LowTableSwitch.getNumberOfTargets(s);  Instruction s2=CPOS(s,MIR_LowTableSwitch.create(MIR_LOWTABLESWITCH,newIndex.copyRO(),number * 2));  for (int i=0; i < number; i++) {    MIR_LowTableSwitch.setTarget(s2,i,LowTableSwitch.getClearTarget(s,i));    MIR_LowTableSwitch.setBranchProfile(s2,i,LowTableSwitch.getClearBranchProfile(s,i));  }  EMIT(s2);}  }
class C{  private CodePattern buildCodePattern_ONE_VS_ONE(Attribute classLabel){  int numberOfClasses=classLabel.getMapping().size();  int numberOfCombinations=(numberOfClasses * (numberOfClasses - 1)) / 2;  String[] classIndexMap=new String[numberOfClasses];  CodePattern codePattern=new CodePattern(numberOfClasses,numberOfCombinations);  modelNames.clear();  for (int i=0; i < numberOfClasses; i++) {    for (int j=0; j < numberOfCombinations; j++) {      codePattern.partitionEnabled[i][j]=false;    }  }  int classIndex=0;  for (  String className : classLabel.getMapping().getValues()) {    classIndexMap[classIndex]=className;    classIndex++;  }  int currentClassA=0, currentClassB=1;  for (int counter=0; counter < numberOfCombinations; counter++) {    if (currentClassB > (numberOfClasses - 1)) {      currentClassA++;      currentClassB=currentClassA + 1;    }    if (currentClassA > (numberOfClasses - 2)) {      break;    }    codePattern.partitionEnabled[currentClassA][counter]=true;    codePattern.partitionEnabled[currentClassB][counter]=true;    String currentClassNameA=classIndexMap[currentClassA];    String currentClassNameB=classIndexMap[currentClassB];    codePattern.data[currentClassA][counter]=currentClassNameA;    codePattern.data[currentClassB][counter]=currentClassNameB;    modelNames.add(currentClassNameA + " vs. " + currentClassNameB);    currentClassB++;  }  return codePattern;}  }
class C{  public static void square(double x,double y,double r){  if (r < 0)   throw new IllegalArgumentException("square side length must be nonnegative");  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(2 * r);  double hs=factorY(2 * r);  if (ws <= 1 && hs <= 1)   pixel(x,y); else   offscreen.draw(new Rectangle2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));  draw();}  }
class C{  public final void addNotify(){  super.addNotify();  myUISettings.addUISettingsListener(this);}  }
class C{  public void toggle(){  mSlidingMenu.toggle();}  }
class C{  private String loadSource(String sourceUrl){  String source=null;  int hash=sourceUrl.indexOf('#');  if (hash >= 0) {    sourceUrl=sourceUrl.substring(0,hash);  }  try {    InputStream is;    openStream: {      if (sourceUrl.indexOf(':') < 0) {        try {          if (sourceUrl.startsWith("~/")) {            String home=SecurityUtilities.getSystemProperty("user.home");            if (home != null) {              String pathFromHome=sourceUrl.substring(2);              File f=new File(new File(home),pathFromHome);              if (f.exists()) {                is=new FileInputStream(f);                break openStream;              }            }          }          File f=new File(sourceUrl);          if (f.exists()) {            is=new FileInputStream(f);            break openStream;          }        } catch (        SecurityException ex) {        }        if (sourceUrl.startsWith("//")) {          sourceUrl="http:" + sourceUrl;        } else         if (sourceUrl.startsWith("/")) {          sourceUrl="http://127.0.0.1" + sourceUrl;        } else {          sourceUrl="http://" + sourceUrl;        }      }      is=(new URL(sourceUrl)).openStream();    }    try {      source=Kit.readReader(new InputStreamReader(is));    }  finally {      is.close();    }  } catch (  IOException ex) {    System.err.println("Failed to load source from " + sourceUrl + ": "+ ex);  }  return source;}  }
class C{  public String computeDigest(byte[] byteArray){  MessageDigest digest=null;  try {    digest=MessageDigest.getInstance(type);  } catch (  NoSuchAlgorithmException e) {    value="Hash not supported";    return value;  }  byte[] digestBytes=digest.digest(byteArray);  StringBuilder buf=new StringBuilder();  for (int i=0; i < digestBytes.length; i++) {    String s=Integer.toHexString((digestBytes[i] & 0xff));    if (s.length() == 1) {      buf.append("0");    }    buf.append(s);  }  value=buf.toString();  return value;}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void testLoadPasswordsFromFile() throws Exception {  AuthenticationInfo authenticationInfo=new AuthenticationInfo();  authenticationInfo.setPasswordFileLocation("sample.passwords.store");  TungstenProperties tungsteProperties=SecurityHelper.loadPasswordsFromAuthenticationInfo(authenticationInfo);  assertNotNull(tungsteProperties);}  }
class C{  @Override public void flush() throws IOException {synchronized (lock) {    out.flush();  }}  }
class C{  public int order(){  return order;}  }
class C{  public static Bitmap convertViewToBitmap(View view){  return convertViewToBitmap(view,UNSPECIFIED,UNSPECIFIED);}  }
class C{  private void _mergeNotifierConfiguration(){  Method[] methods=_notifierFactory.getClass().getDeclaredMethods();  for (  Method method : methods) {    if (Notifier.class.isAssignableFrom(method.getReturnType())) {      try {        boolean accessible=method.isAccessible();        method.setAccessible(true);        Notifier notifier=Notifier.class.cast(method.invoke(_notifierFactory,new Object[]{}));        method.setAccessible(accessible);        _mergeProperties(notifier.getNotifierProperties());      } catch (      Exception e) {        requireState(false,"Failed to load notifier properties for notifier factory method " + method.getName());      }    }  }}  }
class C{  protected boolean cargarListaArchivos(HttpServletRequest request,ConsultaForm consultaForm){  AppUser appUser=getAppUser(request);  List listaArchivos=new ArrayList();  UsuarioSalasConsultaVO usuarioSalasConsultaVO=appUser.getUsuarioSalasConsultaVO();  if (consultaForm.isTipoEntidadInvestigador() && consultaForm.isCheckedConsultaEnSala() && usuarioSalasConsultaVO != null) {    listaArchivos.addAll(usuarioSalasConsultaVO.getListaArchivos());    if (ListUtils.isNotEmpty(listaArchivos)) {      listaArchivos.add(0,new UsuarioSalasConsultaVO());    }  } else {    listaArchivos=getGestionArchivosBI(request).getListaArchivos();    if (consultaForm.isCheckedConsultaEnSala() && ListUtils.isNotEmpty(listaArchivos)) {      listaArchivos.add(0,new UsuarioArchivoSalasConsultaVO());    }  }  if (ListUtils.isNotEmpty(listaArchivos)) {    setInTemporalSession(request,ConsultasConstants.LISTA_ARCHIVOS,listaArchivos);    return true;  } else {    setInTemporalSession(request,ConsultasConstants.LISTA_ARCHIVOS,listaArchivos);    return false;  }}  }
class C{  protected boolean execute(String actionAsString,JSONArray args,CallbackContext cbc) throws Exception {  Action action;  try {    action=Action.valueOf(actionAsString);  } catch (  IllegalArgumentException e) {    Log.e(SQLitePlugin.class.getSimpleName(),"unexpected error",e);    throw (e);  }  try {    return executeAndPossiblyThrow(action,args,cbc);  } catch (  JSONException e) {    Log.e(SQLitePlugin.class.getSimpleName(),"unexpected error",e);    throw (e);  }}  }
class C{  private static int calculatePriority(String title,String artist,String album,String currTitle,String currArtist,String currAlbum){  int priority=10;  boolean countArtist=(artist != null && currArtist != null);  boolean countAlbum=(album != null && currAlbum != null);  if (title != null && currTitle != null) {    if (currTitle.equals(title)) {      priority-=2;    } else     if (currTitle.startsWith(title)) {      priority-=1;    }    if (countArtist && currArtist.equals(artist)) {      priority-=2;    } else     if (countArtist && currArtist.startsWith(artist)) {      priority-=1;    }    if (countAlbum && currAlbum.equals(album)) {      priority-=2;    } else     if (countAlbum && currAlbum.startsWith(album)) {      priority-=1;    }  }  return priority;}  }
class C{  public static SubqueryInExpression subqueryIn(String property,EPStatementObjectModel model){  return new SubqueryInExpression(getPropExpr(property),model,false);}  }
class C{  public static boolean validSchema(URI uri){  LOG.trace("Checking schema {}",uri.toString());  String hostName=Utils.getHost(uri);  LOG.trace("Got hostname as {}",hostName);  int i=hostName.indexOf(".");  if (i < 0) {    return false;  }  String service=hostName.substring(i + 1);  LOG.trace("Got service as {}",service);  if (service.isEmpty() || service.contains(".")) {    return false;  }  return true;}  }
class C{  void pollForChanges(@NotNull final CloudDebugProcessState state){  final Debugger client=CloudDebuggerClient.getShortTimeoutClient(state);  if (client == null) {    if (state.isListenInBackground()) {      LOG.warn("CloudDebugProcessState is listening in the background but no debugger client " + "could be retrieved => stop listening");      handleBreakpointQueryError(state,GctBundle.message("clouddebug.background.listener.access.error.message",state.getProject().getName()));      return;    } else {      LOG.error("Polling changes for a debug state that is not set to listen in the background");      return;    }  }  boolean changed=false;  try {    String oldToken=state.getWaitToken();    queryServerForBreakpoints(state,client);    String responseWaitToken=state.getWaitToken();    if (!Strings.isNullOrEmpty(responseWaitToken)) {      changed=oldToken == null || !responseWaitToken.equals(oldToken);    } else {      changed=!Strings.isNullOrEmpty(oldToken);    }  } catch (  SocketTimeoutException ex) {  }catch (  GoogleJsonResponseException ex) {    if (ex.getStatusCode() != HttpURLConnection.HTTP_CONFLICT) {      handleBreakpointQueryError(state,ex);    }  }catch (  IOException ex) {    LOG.warn("exception listing breakpoints",ex);    handleBreakpointQueryError(state,ex);    return;  }catch (  Exception ex) {    LOG.error("exception listing breakpoints",ex);    handleBreakpointQueryError(state,ex);    return;  }  if (changed) {    fireBreakpointsChanged(state);  }}  }
class C{  protected void paint(SynthContext context,Graphics g){  if (handleIcon != null && toolBar.isFloatable()) {    int startX=toolBar.getComponentOrientation().isLeftToRight() ? 0 : toolBar.getWidth() - SynthIcon.getIconWidth(handleIcon,context);    SynthIcon.paintIcon(handleIcon,context,g,startX,0,SynthIcon.getIconWidth(handleIcon,context),SynthIcon.getIconHeight(handleIcon,context));  }  SynthContext subcontext=getContext(toolBar,Region.TOOL_BAR_CONTENT,contentStyle);  paintContent(subcontext,g,contentRect);  subcontext.dispose();}  }
class C{  @Override public void run(){  try {    ClassReader reader=new ClassReader(new FileInputStream(this.classFile));    AsmClassVisitor visitor=new AsmClassVisitor(this.dataProvider,this.config);    reader.accept(visitor,ClassReader.SKIP_DEBUG);  } catch (  Exception e) {    LOGGER.log(Level.SEVERE,e.getMessage(),e);  }}  }
class C{  public DefaultText(String text){  super(text);}  }
class C{  public boolean isNonsingular(){  return quick.isNonsingular();}  }
class C{  public void componentResized(ComponentEvent e){  JScrollBar bar=getVerticalScrollBar();  int incr=(int)(getSize().getHeight() - (bar.getUnitIncrement(1) * 3));  getVerticalScrollBar().setBlockIncrement(incr);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void checkConfiguration(){  if (configuration == null) {    throw new IllegalStateException(ERROR_NOT_INIT);  }}  }
class C{  protected void evaluate(Preprocessor preProcessor,PrintWriter pwOut){  System.err.println("Starting evaluation...");  DocumentReaderAndWriter<CoreLabel> docReader=new ProcessorTools.PostprocessorDocumentReaderAndWriter(preProcessor);  ObjectBank<List<CoreLabel>> lines=classifier.makeObjectBankFromFile(flags.testFile,docReader);  Counter<String> labelTotal=new ClassicCounter<String>();  Counter<String> labelCorrect=new ClassicCounter<String>();  int total=0;  int correct=0;  PrintWriter pw=new PrintWriter(IOTools.getWriterFromFile("apply.out"));  for (  List<CoreLabel> line : lines) {    line=classifier.classify(line);    pw.println(Sentence.listToString(ProcessorTools.toPostProcessedSequence(line)));    total+=line.size();    for (    CoreLabel label : line) {      String hypothesis=label.get(CoreAnnotations.AnswerAnnotation.class);      String reference=label.get(CoreAnnotations.GoldAnswerAnnotation.class);      labelTotal.incrementCount(reference);      if (hypothesis.equals(reference)) {        correct++;        labelCorrect.incrementCount(reference);      }    }  }  pw.close();  double accuracy=((double)correct) / ((double)total);  accuracy*=100.0;  pwOut.println("EVALUATION RESULTS");  pwOut.printf("#datums:\t%d%n",total);  pwOut.printf("#correct:\t%d%n",correct);  pwOut.printf("accuracy:\t%.2f%n",accuracy);  pwOut.println("==================");  pwOut.println("PER LABEL ACCURACIES");  for (  String refLabel : labelTotal.keySet()) {    double nTotal=labelTotal.getCount(refLabel);    double nCorrect=labelCorrect.getCount(refLabel);    double acc=(nCorrect / nTotal) * 100.0;    pwOut.printf(" %s\t%.2f%n",refLabel,acc);  }}  }
class C{  public BurstCaptureCommand(FrameServer frameServer,RequestBuilder.Factory builder,ManagedImageReader managedImageReader,Surface burstInputSurface,Lifetime lifetime,EvictionHandler burstEvictionHandler,BurstController burstController,Runnable restorePreviewCommand,int maxImageCount){  mFrameServer=frameServer;  mBuilderFactory=new RequestTemplate(builder);  mManagedImageReader=managedImageReader;  mBurstInputSurface=burstInputSurface;  mBurstLifetime=lifetime;  mBurstEvictionHandler=burstEvictionHandler;  mBurstController=burstController;  mRestorePreviewCommand=restorePreviewCommand;  mMaxImageCount=maxImageCount;}  }
class C{  public static Text createText(Composite parent,int style,int hspan,String text){  Text t=new Text(parent,style);  t.setFont(parent.getFont());  GridData gd=new GridData(GridData.FILL_HORIZONTAL);  gd.horizontalSpan=hspan;  t.setLayoutData(gd);  t.setText(text);  return t;}  }
class C{  public CoapResponse putIfMatch(byte[] payload,int format,byte[]... etags){  return synchronous(ifMatch(format(newPut().setURI(uri).setPayload(payload),format),etags));}  }
class C{  public static void main(String[] args){  OptionPaneDemo demo=new OptionPaneDemo(null);  demo.mainImpl();}  }
class C{  private void updateGridFrequencyResponse(){  mGridFrequencyResponse=new double[mGrid.getSize()];  double[] gridFrequencyCosines=mGrid.getCosineFrequencyGrid();  for (int i=0; i < mGridFrequencyResponse.length; i++) {    mGridFrequencyResponse[i]=getFrequencyResponse(gridFrequencyCosines[i]);  }}  }
class C{  private XYPlot initializeUpperPlot(){  heapMemory=new YIntervalSeriesImproved("heap memory");  YIntervalSeriesCollection yintervalseriescollection=new YIntervalSeriesCollection();  yintervalseriescollection.addSeries(heapMemory);  DeviationRenderer renderer=new DeviationRenderer(true,false);  renderer.setBaseShapesVisible(true);  renderer.setSeriesStroke(0,new BasicStroke(3.0f,BasicStroke.CAP_ROUND,BasicStroke.JOIN_ROUND));  renderer.setSeriesFillPaint(0,new Color(255,200,200));  renderer.setSeriesOutlineStroke(0,new BasicStroke(2.0f));  renderer.setSeriesShape(0,new Ellipse2D.Double(-2.5,-2.5,5.0,5.0));  renderer.setBaseToolTipGenerator(new StandardXYToolTipGenerator(StandardXYToolTipGenerator.DEFAULT_TOOL_TIP_FORMAT,DateFormat.getDateTimeInstance(),NumberFormat.getNumberInstance()));  final NumberAxis rangeAxis=new NumberAxis("Heap / kbytes");  rangeAxis.setRangeType(RangeType.POSITIVE);  SystemInformationData systemData=(SystemInformationData)dataAccessService.getLastDataObject(systemTemplate);  if (systemData != null) {    double maxHeapUpperRange;    if (systemData.getMaxHeapMemorySize() != -1) {      maxHeapUpperRange=systemData.getMaxHeapMemorySize() / 1024.0d;    } else     if (systemData.getInitHeapMemorySize() != -1) {      maxHeapUpperRange=(systemData.getInitHeapMemorySize() * 2) / 1024.0d;    } else {      maxHeapUpperRange=728 * 1024 * 1024;    }    rangeAxis.setRange(0.0d,maxHeapUpperRange);    rangeAxis.setAutoRangeMinimumSize(maxHeapUpperRange);  }  final XYPlot subplot=new XYPlot(yintervalseriescollection,null,rangeAxis,renderer);  subplot.setAxisOffset(new RectangleInsets(5.0,5.0,5.0,5.0));  subplot.setRangeAxisLocation(AxisLocation.TOP_OR_LEFT);  subplot.setRangeCrosshairVisible(true);  return subplot;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  int[] jobs=Ministry.getInstance().getTranscodeJobIDs();  Integer[] rv=new Integer[jobs == null ? 0 : jobs.length];  for (int i=0; i < rv.length; i++)   rv[i]=new Integer(jobs[i]);  return rv;}  }
class C{  Node<K,V> findNear(K kkey,int rel){  Comparable<? super K> key=comparable(kkey);  for (; ; ) {    Node<K,V> b=findPredecessor(key);    Node<K,V> n=b.next;    for (; ; ) {      if (n == null)       return ((rel & LT) == 0 || b.isBaseHeader()) ? null : b;      Node<K,V> f=n.next;      if (n != b.next)       break;      Object v=n.value;      if (v == null) {        n.helpDelete(b,f);        break;      }      if (v == n || b.value == null)       break;      int c=key.compareTo(n.key);      if ((c == 0 && (rel & EQ) != 0) || (c < 0 && (rel & LT) == 0))       return n;      if (c <= 0 && (rel & LT) != 0)       return b.isBaseHeader() ? null : b;      b=n;      n=f;    }  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case DatatypePackage.OBJECT_PROPERTY_TYPE__TYPE:    setType((Type)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  private void checkValidity() throws ModbusException {}  }
class C{  public static String urlEncode(String value,String encoding){  if (value == null) {    return "";  }  try {    String encoded=URLEncoder.encode(value,encoding);    return encoded.replace("+","%20").replace("*","%2A").replace("~","%7E").replace("/","%2F");  } catch (  UnsupportedEncodingException e) {    throw new IllegalArgumentException(OSS_RESOURCE_MANAGER.getString("FailedToEncodeUri"),e);  }}  }
class C{  public void removeAt(int index){  System.arraycopy(mKeys,index + 1,mKeys,index,mSize - (index + 1));  System.arraycopy(mValues,index + 1,mValues,index,mSize - (index + 1));  mSize--;}  }
class C{  private static boolean inRange(int policyLow,int policyHigh,int targetLow,int targetHigh){  final int ephemeralLow=EphemeralRange.low;  final int ephemeralHigh=EphemeralRange.high;  if (targetLow == 0) {    if (!inRange(policyLow,policyHigh,ephemeralLow,ephemeralHigh)) {      return false;    }    if (targetHigh == 0) {      return true;    }    targetLow=1;  }  if (policyLow == 0 && policyHigh == 0) {    return targetLow >= ephemeralLow && targetHigh <= ephemeralHigh;  }  if (policyLow != 0) {    return targetLow >= policyLow && targetHigh <= policyHigh;  }  if (policyHigh >= ephemeralLow - 1) {    return targetHigh <= ephemeralHigh;  }  return (targetLow <= policyHigh && targetHigh <= policyHigh) || (targetLow >= ephemeralLow && targetHigh <= ephemeralHigh);}  }
class C{  @Override public EObject create(EClass eClass){switch (eClass.getClassifierID()) {case FunctionblockPackage.FUNCTIONBLOCK_MODEL:    return createFunctionblockModel();case FunctionblockPackage.FUNCTION_BLOCK:  return createFunctionBlock();case FunctionblockPackage.CONFIGURATION:return createConfiguration();case FunctionblockPackage.STATUS:return createStatus();case FunctionblockPackage.FAULT:return createFault();case FunctionblockPackage.OPERATION:return createOperation();case FunctionblockPackage.RETURN_TYPE:return createReturnType();case FunctionblockPackage.RETURN_OBJECT_TYPE:return createReturnObjectType();case FunctionblockPackage.RETURN_PRIMITIVE_TYPE:return createReturnPrimitiveType();case FunctionblockPackage.PRIMITIVE_PARAM:return createPrimitiveParam();case FunctionblockPackage.REF_PARAM:return createRefParam();case FunctionblockPackage.PARAM:return createParam();case FunctionblockPackage.EVENT:return createEvent();default :throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");}}  }
class C{  public TranslationResponseStream decodeAll(TranslationRequestStream request){  TranslationResponseStream results=new TranslationResponseStream(request);  CompletableFuture.runAsync(null);  return results;}  }
class C{  public boolean isCompleteParse(){  return completeParse;}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public boolean isChartDrawn(){  return mDrawn;}  }
class C{  @Deprecated public int size() throws FitsException {  readToEnd();  return getNumberOfHDUs();}  }
class C{  public boolean contains(Rectangle2D r){  return path.contains(r);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:30.924 -0500",hash_original_method="6DDBCACEAF7453CD975901EB7FA152DA",hash_generated_method="22695AA06A08FA30FFFAAE4F39AE1461") public String toHostString(){  CharArrayBuffer buffer=new CharArrayBuffer(32);  buffer.append(this.hostname);  if (this.port != -1) {    buffer.append(':');    buffer.append(Integer.toString(this.port));  }  return buffer.toString();}  }
class C{  public static String convertToARGB(int color){  String alpha=Integer.toHexString(Color.alpha(color));  String red=Integer.toHexString(Color.red(color));  String green=Integer.toHexString(Color.green(color));  String blue=Integer.toHexString(Color.blue(color));  if (alpha.length() == 1) {    alpha="0" + alpha;  }  if (red.length() == 1) {    red="0" + red;  }  if (green.length() == 1) {    green="0" + green;  }  if (blue.length() == 1) {    blue="0" + blue;  }  return "#" + alpha + red+ green+ blue;}  }
class C{  protected void initializeJMenuItem(JMenuItem item,String name,String specialization) throws ResourceFormatException, MissingListenerException {  try {    Action a=actions.getAction(getSpecializedString(name + ACTION_SUFFIX,specialization));    if (a == null) {      throw new MissingListenerException("","Action",name + ACTION_SUFFIX);    }    item.setAction(a);    item.setText(getSpecializedString(name + TEXT_SUFFIX,specialization));    if (a instanceof JComponentModifier) {      ((JComponentModifier)a).addJComponent(item);    }  } catch (  MissingResourceException e) {  }  try {    String s=getSpecializedString(name + ICON_SUFFIX,specialization);    URL url=actions.getClass().getResource(s);    if (url != null) {      item.setIcon(new ImageIcon(url));    }  } catch (  MissingResourceException e) {  }  try {    String str=getSpecializedString(name + MNEMONIC_SUFFIX,specialization);    if (str.length() == 1) {      item.setMnemonic(str.charAt(0));    } else {      throw new ResourceFormatException("Malformed mnemonic",bundle.getClass().getName(),name + MNEMONIC_SUFFIX);    }  } catch (  MissingResourceException e) {  }  try {    if (!(item instanceof JMenu)) {      String str=getSpecializedString(name + ACCELERATOR_SUFFIX,specialization);      KeyStroke ks=KeyStroke.getKeyStroke(str);      if (ks != null) {        item.setAccelerator(ks);      } else {        throw new ResourceFormatException("Malformed accelerator",bundle.getClass().getName(),name + ACCELERATOR_SUFFIX);      }    }  } catch (  MissingResourceException e) {  }  try {    item.setEnabled(getSpecializedBoolean(name + ENABLED_SUFFIX,specialization));  } catch (  MissingResourceException e) {  }}  }
class C{  public void resamplePatterns(){  int siteCount=patterns.getSiteCount();  int oldPatternCount=patterns.getPatternCount();  patternIndices=new int[oldPatternCount];  weights=new double[oldPatternCount];  int site, pattern;  patternCount=0;  for (int i=0; i < siteCount; i++) {    site=MathUtils.nextInt(siteCount);    pattern=patterns.getPatternIndex(site);    int j=0;    for (j=0; j < patternCount; j++) {      if (patternIndices[j] == pattern) {        break;      }    }    if (j < patternCount) {      weights[j]+=1.0;    } else {      patternIndices[patternCount]=pattern;      weights[patternCount]=1.0;      patternCount++;    }  }}  }
class C{  public void moveTo(int offset){  cursor=offset;}  }
class C{  public StringMemberValue(int index,ConstPool cp){  super('s',cp);  this.valueIndex=index;}  }
class C{  public static int longestCommonSubstring(String s,String t){  int d[][];  int n;  int m;  int i;  int j;  char s_i;  char t_j;  n=s.length();  m=t.length();  if (n == 0) {    return 0;  }  if (m == 0) {    return 0;  }  d=new int[n + 1][m + 1];  for (i=0; i <= n; i++) {    d[i][0]=0;  }  for (j=0; j <= m; j++) {    d[0][j]=0;  }  for (i=1; i <= n; i++) {    s_i=s.charAt(i - 1);    for (j=1; j <= m; j++) {      t_j=t.charAt(j - 1);      if (s_i == t_j) {        d[i][j]=SloppyMath.max(d[i - 1][j],d[i][j - 1],d[i - 1][j - 1] + 1);      } else {        d[i][j]=Math.max(d[i - 1][j],d[i][j - 1]);      }    }  }  if (false) {    int numChars=(int)Math.ceil(Math.log(d[n][m]) / Math.log(10));    for (i=0; i < numChars + 3; i++) {      System.err.print(' ');    }    for (j=0; j < m; j++) {      System.err.print("" + t.charAt(j) + " ");    }    System.err.println();    for (i=0; i <= n; i++) {      System.err.print((i == 0 ? ' ' : s.charAt(i - 1)) + " ");      for (j=0; j <= m; j++) {        System.err.print("" + d[i][j] + " ");      }      System.err.println();    }  }  return d[n][m];}  }
class C{  @Override protected boolean accepts(final IProjectDescription desc){  if (!desc.hasNature(WorkbenchHelper.GAMA_NATURE) || desc.getNatureIds().length > 2) {    return false;  }  return !(desc.hasNature(WorkbenchHelper.BUILTIN_NATURE) || desc.hasNature(WorkbenchHelper.PLUGIN_NATURE));}  }
class C{  public void addStreamStoreDefinition(StreamStoreDefinition streamStoreDefinition){  streamStoreDefinition.getTables().forEach(null);  StreamStoreRenderer renderer=streamStoreDefinition.getRenderer(packageName,name);  Multimap<String,Supplier<OnCleanupTask>> streamStoreCleanupTasks=streamStoreDefinition.getCleanupTasks(packageName,name,renderer,namespace);  cleanupTasks.putAll(streamStoreCleanupTasks);  streamStoreRenderers.add(renderer);}  }
class C{  public static boolean isVariantGt(String gt){  return !isNonVariantGt(gt);}  }
class C{  private boolean readExternalId(boolean requireSystemName,boolean assignFields) throws IOException, XmlPullParserException {  skip();  int c=peekCharacter();  if (c == 'S') {    read(SYSTEM);  } else   if (c == 'P') {    read(PUBLIC);    skip();    if (assignFields) {      publicId=readQuotedId(true);    } else {      readQuotedId(false);    }  } else {    return false;  }  skip();  if (!requireSystemName) {    int delimiter=peekCharacter();    if (delimiter != '"' && delimiter != '\'') {      return true;    }  }  if (assignFields) {    systemId=readQuotedId(true);  } else {    readQuotedId(false);  }  return true;}  }
class C{  public void testMapWithMrbean() throws Exception {  ObjectMapper mapper=new ObjectMapper();  mapper.registerModule(new MrBeanModule());  runTest(mapper);}  }
class C{  public boolean isIndicatorVisible(){  return isIndicatorVisible;}  }
class C{  public static Target compile(VirtualFile targetFile,Configuration configuration,SwcCache swcCache,Map licenseMap) throws CompilerException {  Target target=new Target();  try {    if (configuration.benchmark()) {      flex2.compiler.CompilerAPI.runBenchmark();    } else {      flex2.compiler.CompilerAPI.disableBenchmark();    }    target.configuration=configuration;    flex2.compiler.CompilerAPI.useAS3();    flex2.compiler.CompilerAPI.usePathResolver();    flex2.compiler.CompilerAPI.setupHeadless(configuration);    LocalizationManager l10n=new LocalizationManager();    l10n.addLocalizer(new XLRLocalizer());    l10n.addLocalizer(new ResourceBundleLocalizer());    ThreadLocalToolkit.setLocalizationManager(l10n);    checkSupportedTargetMimeType(targetFile);    List<VirtualFile> virtualFileList=new ArrayList<VirtualFile>();    virtualFileList.add(targetFile);    CompilerConfiguration compilerConfig=configuration.getCompilerConfiguration();    NameMappings mappings=flex2.compiler.CompilerAPI.getNameMappings(configuration);    flex2.compiler.Transcoder[] transcoders=getTranscoders(configuration);    flex2.compiler.SubCompiler[] compilers=getCompilers(compilerConfig,mappings,transcoders);    target.fileSpec=new FileSpec(Collections.<VirtualFile>emptyList(),getFileSpecMimeTypes());    VirtualFile[] asClasspath=compilerConfig.getSourcePath();    target.sourceList=new SourceList(virtualFileList,asClasspath,targetFile,getSourcePathMimeTypes());    target.sourcePath=new SourcePath(asClasspath,targetFile,getSourcePathMimeTypes(),compilerConfig.allowSourcePathOverlap());    target.resources=new ResourceContainer();    target.bundlePath=new ResourceBundlePath(configuration.getCompilerConfiguration(),targetFile);    if (ThreadLocalToolkit.getBenchmark() != null) {      ThreadLocalToolkit.getBenchmark().benchmark(l10n.getLocalizedTextString(new Mxmlc.InitialSetup()));    }    CompilerSwcContext swcContext=new CompilerSwcContext();    swcContext.load(compilerConfig.getLibraryPath(),Configuration.getAllExcludedLibraries(compilerConfig,configuration),compilerConfig.getIncludeLibraries(),mappings,I18nUtils.getTranslationFormat(compilerConfig),swcCache);    configuration.addExterns(swcContext.getExterns());    configuration.addIncludes(swcContext.getIncludes());    flex2.compiler.CompilerAPI.validateCompilationUnits(target.fileSpec,target.sourceList,target.sourcePath,target.bundlePath,target.resources,swcContext,null,configuration);    final SymbolTable symbolTable=new SymbolTable(configuration);    target.perCompileData=symbolTable.perCompileData;    target.units=flex2.compiler.CompilerAPI.compile(target.fileSpec,target.sourceList,null,target.sourcePath,target.resources,target.bundlePath,swcContext,symbolTable,mappings,configuration,compilers,new PreLink(),licenseMap,new ArrayList<Source>());    return target;  } catch (  CompilerException ex) {    throw ex;  }catch (  Throwable t) {    String message=t.getMessage();    if (message == null) {      message=t.getClass().getName();    }    ThreadLocalToolkit.logError(message);    throw new CompilerException(message);  } finally {    flex2.compiler.CompilerAPI.removePathResolver();  }}  }
class C{  private Object parseValue(GridField field,Object in){  if (in == null)   return null;  int dt=field.getDisplayType();  try {    if (dt == DisplayType.Integer || (DisplayType.isID(dt) && field.getColumnName().endsWith("_ID"))) {      if (in instanceof Integer)       return in;      int i=Integer.parseInt(in.toString());      return new Integer(i);    } else     if (DisplayType.isNumeric(dt)) {      if (in instanceof BigDecimal)       return in;      return DisplayType.getNumberFormat(dt).parse(in.toString());    } else     if (DisplayType.isDate(dt)) {      if (in instanceof Timestamp)       return in;      long time=0;      try {        time=DisplayType.getDateFormat_JDBC().parse(in.toString()).getTime();        return new Timestamp(time);      } catch (      Exception e) {        log.log(Level.SEVERE,in + "(" + in.getClass()+ ")"+ e);        time=DisplayType.getDateFormat(dt).parse(in.toString()).getTime();      }      return new Timestamp(time);    } else     if (in instanceof Boolean)     return ((Boolean)in).booleanValue() ? "Y" : "N";  } catch (  Exception ex) {    log.log(Level.SEVERE,"Object=" + in,ex);    String error=ex.getLocalizedMessage();    if (error == null || error.length() == 0)     error=ex.toString();    StringBuffer errMsg=new StringBuffer();    errMsg.append(field.getColumnName()).append(" = ").append(in).append(" - ").append(error);    throw new AdempiereException(errMsg.toString());  }  return in;}  }
class C{  public void close(){  this.shell.dispose();}  }
class C{  public static void addTransmutation(String input,String output,int out,float xp){  if (!OreDictionary.getOres(output).isEmpty()) {    ItemStack o=OreDictionary.getOres(output).get(0).copy();    o.stackSize=out;    for (    ItemStack stack : OreDictionary.getOres(input))     addTransmutation(stack,o,xp);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public BasicMapPanel(boolean delayCreation){  this(null,delayCreation);}  }
class C{  protected void updateTileGridInfo(){  this.tileWidth=sm.getWidth();  this.tileHeight=sm.getHeight();  int x1, y1, maxTileX, maxTileY;  minTileX=getXTile(bounds.x);  minTileY=getYTile(bounds.y);  x1=bounds.x + bounds.width - 1;  maxTileX=getXTile(x1);  numXTiles=maxTileX - minTileX + 1;  y1=bounds.y + bounds.height - 1;  maxTileY=getYTile(y1);  numYTiles=maxTileY - minTileY + 1;}  }
class C{  public static Element addChildElementValue(Element element,String childElementName,String childElementValue,Document document){  Element newElement=addChildElement(element,childElementName,document);  newElement.appendChild(document.createTextNode(childElementValue));  return newElement;}  }
class C{  public final void doubleScaleTransformScale(){  if ((CTM[0][0] != 0.0) & (CTM[1][1] != 0.0)) {    scale(Trm2);  }}  }
class C{  @Override public boolean parseLine(String line){  return parseLine(pattern,RFC3164_HEADER_TIMESTAMP_GROUP,RFC3164_HEADER_HOSTNAME_GROUP,COMP_GROUP,PID_GROUP,MSG_GROUP,line);}  }
class C{  private void createAndConnect(){  Intent createConnection;  createConnection=new Intent();  createConnection.setClassName(clientConnections.getApplicationContext(),"org.eclipse.paho.android.service.sample.NewConnection");  clientConnections.startActivityForResult(createConnection,ActivityConstants.connect);}  }
class C{  public void testRandomHugeStrings() throws Exception {  Random random=random();  checkRandomData(random,analyzer,20 * RANDOM_MULTIPLIER,8192);  checkRandomData(random,analyzerNoPunct,20 * RANDOM_MULTIPLIER,8192);  checkRandomData(random,analyzerNormalNBest,20 * RANDOM_MULTIPLIER,8192);}  }
class C{  public StringRequest(String url,Listener<String> listener,ErrorListener errorListener){  this(Method.GET,url,listener,errorListener);}  }
class C{  public void addFooterView(View v,Object data,boolean isSelectable){  FixedViewInfo info=new FixedViewInfo();  info.view=v;  info.data=data;  info.isSelectable=isSelectable;  mFooterViewInfos.add(info);  if (mAdapter != null && mObserver != null) {    mObserver.onChanged();  }}  }
class C{  protected boolean[] doesntUseTestClassVal(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int classType){  print("classifier ignores test instance class vals");  printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType);  print("...");  int numTrain=2 * getNumInstances(), numTest=getNumInstances(), numClasses=2, missingLevel=0;  boolean predictorMissing=false, classMissing=false;  boolean[] result=new boolean[2];  Instances train=null;  Instances test=null;  Classifier[] classifiers=null;  boolean evalFail=false;  try {    train=makeTestDataset(42,numTrain,nominalPredictor ? getNumNominal() + 1 : 0,numericPredictor ? getNumNumeric() + 1 : 0,stringPredictor ? getNumString() : 0,datePredictor ? getNumDate() : 0,relationalPredictor ? getNumRelational() : 0,numClasses,classType,multiInstance);    test=makeTestDataset(24,numTest,nominalPredictor ? getNumNominal() + 1 : 0,numericPredictor ? getNumNumeric() + 1 : 0,stringPredictor ? getNumString() : 0,datePredictor ? getNumDate() : 0,relationalPredictor ? getNumRelational() : 0,numClasses,classType,multiInstance);    if (missingLevel > 0) {      addMissing(train,missingLevel,predictorMissing,classMissing);      addMissing(test,Math.min(missingLevel,50),predictorMissing,classMissing);    }    classifiers=AbstractClassifier.makeCopies(getClassifier(),2);    classifiers[0].buildClassifier(train);    classifiers[1].buildClassifier(train);  } catch (  Exception ex) {    throw new Error("Error setting up for tests: " + ex.getMessage());  }  try {    for (int i=0; i < test.numInstances(); i++) {      Instance testInst=test.instance(i);      Instance classMissingInst=(Instance)testInst.copy();      classMissingInst.setDataset(test);      classMissingInst.setClassMissing();      double[] dist0=classifiers[0].distributionForInstance(testInst);      double[] dist1=classifiers[1].distributionForInstance(classMissingInst);      for (int j=0; j < dist0.length; j++) {        if (Double.isNaN(dist0[j]) && Double.isNaN(dist1[j])) {          if (getDebug()) {            System.out.println("Both predictions are NaN!");          }          continue;        }        if (dist0[j] != dist1[j]) {          throw new Exception("Prediction different for instance " + (i + 1));        }      }    }    println("yes");    result[0]=true;  } catch (  Exception ex) {    println("no");    result[0]=false;    if (m_Debug) {      println("\n=== Full Report ===");      if (evalFail) {        println("Results differ between non-missing and " + "missing test class values.");      } else {        print("Problem during testing");        println(": " + ex.getMessage() + "\n");      }      println("Here are the datasets:\n");      println("=== Train Dataset ===\n" + train.toString() + "\n");      println("=== Train Weights ===\n");      for (int i=0; i < train.numInstances(); i++) {        println(" " + (i + 1) + "    "+ train.instance(i).weight());      }      println("=== Test Dataset ===\n" + test.toString() + "\n\n");      println("(test weights all 1.0\n");    }  }  return result;}  }
class C{  public final SymbolNode resolveSymbol(UniqueString name){  for (int c=contextStack.size() - 1; c >= 0; c--) {    Context ct=(Context)contextStack.elementAt(c);    SymbolNode r=ct.getSymbol(name);    if (r != null)     return r;  }  return null;}  }
class C{  protected void addFieldNameTranslation(EmbeddableMapping embeddableMapping,String overrideName,DatabaseField overrideField,MappingAccessor aggregatesAccessor){  DatabaseMapping aggregatesMapping=aggregatesAccessor.getMapping();  DatabaseField aggregatesMappingField=aggregatesMapping.getField();  if (aggregatesAccessor.isId()) {    updatePrimaryKeyField(aggregatesAccessor,overrideField);  }  if (overrideName.contains(".")) {    embeddableMapping.addNestedFieldTranslation(overrideName,overrideField,aggregatesMappingField.getName());  } else {    embeddableMapping.addFieldTranslation(overrideField,aggregatesMappingField.getName());  }}  }
class C{  protected void acceptState(){}  }
class C{  @Override public boolean supportsOuterJoins(){  debugCodeCall("supportsOuterJoins");  return true;}  }
class C{  public List<Peer> findPeersWithServiceMask(int mask){  lock.lock();  try {    ArrayList<Peer> results=new ArrayList<Peer>(peers.size());    for (    Peer peer : peers)     if ((peer.getPeerVersionMessage().localServices & mask) == mask)     results.add(peer);    return results;  }  finally {    lock.unlock();  }}  }
class C{  public boolean contains(double x,double z){  double xx=((x - mPosition.x) * mOneOverXScale + mDivisions * 0.5);  double zz=((z - mPosition.z) * mOneOverZScale + mDivisions * 0.5);  if (xx >= 0 && zz >= 0) {    if (xx < mDivisions && zz < mDivisions) {      return true;    }  }  return false;}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (parents == null) {    throw new NullPointerException();  }  if (lookupTable == null) {    throw new NullPointerException();  }}  }
class C{  protected PapeRequest(){  set("preferred_auth_policies","");  if (DEBUG)   _log.debug("Created empty Pape request.");}  }
class C{  public IgniteUuid taskSessionId(){  return sesId;}  }
class C{  public boolean accepted(){  return accepted;}  }
class C{  final private double basisPointValue(final Leg leg,final InterestRate y,final Date settlementDate){  final double shift=0.0001;  final double dirtyPrice=npv(leg,y,settlementDate);  final double modifiedDuration=duration(leg,y,Duration.Modified,settlementDate);  final double convexity=convexity(leg,y,settlementDate);  double delta=-modifiedDuration * dirtyPrice;  double gamma=(convexity / 100.0) * dirtyPrice;  delta*=shift;  gamma*=shift * shift;  return delta + 0.5 * gamma;}  }
class C{  private byte[] marshal(Object obj) throws IgniteCheckedException {  return ctx.config().getMarshaller().marshal(obj);}  }
class C{  public void backup(int amount){  inBuf+=amount;  if ((bufpos-=amount) < 0)   bufpos+=bufsize;}  }
class C{  public JarListLoader(){}  }
class C{  private final double internalNextDouble(double origin,double bound){  double r=(nextLong() >>> 11) * DOUBLE_UNIT;  if (origin < bound) {    r=r * (bound - origin) + origin;    if (r >= bound)     r=Double.longBitsToDouble(Double.doubleToLongBits(bound) - 1);  }  return r;}  }
class C{  void writeRepeatedSqrt(DD xdd){  int count=0;  while (xdd.doubleValue() > 1e-300) {    count++;    double x=xdd.doubleValue();    DD xSqrt=xdd.sqrt();    String s=xSqrt.toString();    DD xSqrt2=DD.parse(s);    DD xx=xSqrt2.multiply(xSqrt2);    double err=Math.abs(xx.doubleValue() - x);    xdd=xSqrt;    DD distFrom1DD=xSqrt.subtract(DD.valueOf(1.0));    double distFrom1=distFrom1DD.doubleValue();    if (Math.abs(distFrom1) < 1.0e-40)     break;  }}  }
class C{  public static Date plus(Date self,int days){  Calendar calendar=(Calendar)Calendar.getInstance().clone();  calendar.setTime(self);  calendar.add(Calendar.DAY_OF_YEAR,days);  return calendar.getTime();}  }
class C{  public boolean isNative(){  return Modifier.isNative(this.getModifiers());}  }
class C{  public DoubleLiteral createDoubleLiteral(){  DoubleLiteralImpl doubleLiteral=new DoubleLiteralImpl();  return doubleLiteral;}  }
class C{  public void currentState(long state,Model currentModel){  currentState=state;  if (loggers != null) {    for (    Logger logger : loggers) {      logger.log(state);    }  }}  }
class C{  public void testParseNullYieldsJSONObjectNull() throws JSONException {  JSONArray array=new JSONArray("[\"null\",null]");  array.put((Collection)null);  assertEquals("null",array.get(0));  assertEquals(JSONObject.NULL,array.get(1));  try {    array.get(2);    fail();  } catch (  JSONException e) {  }  assertEquals("null",array.getString(0));  assertEquals("null",array.getString(1));  try {    array.getString(2);    fail();  } catch (  JSONException e) {  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:24.658 -0500",hash_original_method="35CCCF58010C828A125388DBAAB260E2",hash_generated_method="B9DAB758FE076528F57D8806EA550E91") public void finishPreferencePanel(Fragment caller,int resultCode,Intent resultData){  if (mSinglePane) {    setResult(resultCode,resultData);    finish();  } else {    onBackPressed();    if (caller != null) {      if (caller.getTargetFragment() != null) {        caller.getTargetFragment().onActivityResult(caller.getTargetRequestCode(),resultCode,resultData);      }    }  }}  }
class C{  public boolean userCanMoveDir(int connectedUserId,int dirId,int dstDirId,String entidad) throws Exception {  boolean can=false;  int parentId;  int parentDirMgrId=ISicresAdminDefsKeys.NULL_ID;  int dstDirMgrId=ISicresAdminDefsKeys.NULL_ID;  DirsTable table=new DirsTable();  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession());    parentId=DbSelectFns.selectLongInteger(dbConn,DaoDATNodeTbl.getTblName(),DaoDATNodeTbl.getParentIdColName(true),table.getLoadNodeDirQual(dirId));    if (parentId == ISicresAdminDefsKeys.ROOT_DIR_ID)     parentDirMgrId=0; else     parentDirMgrId=this.getDirMgrId(parentId,entidad);    if (dstDirId == ISicresAdminDefsKeys.NULL_ID || dstDirId == ISicresAdminDefsKeys.ROOT_DIR_ID)     dstDirMgrId=0; else     dstDirMgrId=this.getDirMgrId(dstDirId,entidad);    can=hasUserAuth(connectedUserId,USER_ACTION_ID_MOVE,ISicresAdminDefsKeys.NULL_ID,parentDirMgrId,dstDirMgrId,entidad);  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }  return can;}  }
class C{  public void saveSelection(IMiniTable miniTable){  log.info("");  ArrayList<Integer> results=new ArrayList<Integer>();  setSelection(null);  int rows=miniTable.getRowCount();  for (int i=0; i < rows; i++) {    IDColumn id=(IDColumn)miniTable.getValueAt(i,0);    if (id != null && id.isSelected())     results.add(id.getRecord_ID());  }  if (results.size() == 0)   return;  log.config("Selected #" + results.size());  setSelection(results);}  }
class C{  public boolean inSensitiveArea(Point2D pt){  if (painters == null)   return false;  for (int i=0; i < count; ++i) {    if (painters[i].inSensitiveArea(pt))     return true;  }  return false;}  }
class C{  public Builder clearCenterInside(){  centerInside=false;  return this;}  }
class C{  public static boolean isProtected(int accflags){  return (accflags & PROTECTED) != 0;}  }
class C{  public UnitCollection(final NamedUnitHolder holder,final GameData data){  super(data);  m_holder=holder;}  }
class C{  public static boolean deleteDirectory(final File path){  if (path.exists()) {    File[] files=path.listFiles();    for (    File file : files) {      if (file.isDirectory()) {        deleteDirectory(file);      } else {        file.delete();      }    }  }  return path.delete();}  }
class C{  public void close(){  this.setVisible(false);  this.dispose();}  }
class C{  protected void fillOrg(JComboBox cb){  KeyNamePair pp=new KeyNamePair(0,"");  cb.addItem(pp);  String sql="SELECT AD_Org_ID, Name FROM AD_Org WHERE AD_Client_ID=? ORDER BY Value";  try {    PreparedStatement pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,AD_Client_ID);    ResultSet rs=pstmt.executeQuery();    while (rs.next())     cb.addItem(new KeyNamePair(rs.getInt(1),rs.getString(2)));    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  }}  }
class C{  public boolean isIpConfigurationMethodSettable(){  return ipConfigurationMethodSettable;}  }
class C{  private boolean fireProtectionPlacementRules(ProtectionSystem protectionSystem,RPProtectionRecommendation rpRec,Integer resourceCount){  final String cgCountLog="CG count for Protection System %s is %s/%s";  final String cgNoCapacityLog="Protection System %s does not have the CG capacity to protect volumes.";  final String sourceSiteVolumeCountLog="Volume count for Protection System %s/site %s (source) is %s/%s";  final String destSiteVolumeCountLog="Volume count for Protection System %s/site %s (destination) is %s/%s";  final String sourceSiteVolumeNoCapacityLog="Protection System %s/site %s (source) does not have the volume capacity to protect volumes. " + "Requires capacity for %s volume(s).";  final String destSiteVolumeNoCapacityLog="Protection System %s/site %s (destination) does not have the volume capacity to protect volumes. " + "Requires capacity for %s volume(s).";  final String parseSiteStatsLog="A problem occurred parsing site volume statistics for Protection System %s.  " + "Protection system is unable to protect volumes: %s";  final String missingProtectionSystemMetric="RecoverPoint metric '%s' for Protection System %s cannot be found. " + "Unable to determine if the protection system is capable of protection volumes.";  final String missingSiteMetric="RecoverPoint metric '%s' for Protection System %s/Site %s cannot be found. Unable " + "to determine if the protection system is capable of protection volumes.";  final String validProtectionSystem="RecoverPoint Protection System '%s' is capable of protecting the requested volumes.";  final String inValidProtectionSystem="RecoverPoint Protection System '%s' is not capable of protecting the requested volumes.";  final String validatingProtection="Validating protection systems to ensure they are capable of handling a protection for %s" + " production volume(s).";  _log.info(String.format(validatingProtection,resourceCount));  boolean isValid=true;  Long rpCGCapacity=protectionSystem.getCgCapacity();  Long rpCurrentCGCount=protectionSystem.getCgCount();  if (rpCGCapacity == null) {    _log.warn(String.format(missingProtectionSystemMetric,"CG Capacity",protectionSystem));    rpCGCapacity=-1L;  }  if (rpCurrentCGCount == null) {    _log.warn(String.format(missingProtectionSystemMetric,"CG Count",protectionSystem));    rpCurrentCGCount=-1L;  }  long rpAvailableCGCapacity=rpCGCapacity - rpCurrentCGCount;  _log.info(String.format(cgCountLog,protectionSystem.getLabel(),rpCurrentCGCount,rpCGCapacity));  if (rpAvailableCGCapacity < 1) {    isValid=false;    _log.info(String.format(cgNoCapacityLog,protectionSystem));    rpRec.setProtectionSystemCriteriaError(String.format(cgNoCapacityLog,protectionSystem));  }  StringMap siteVolumeCapacity=protectionSystem.getSiteVolumeCapacity();  StringMap siteVolumeCount=protectionSystem.getSiteVolumeCount();  List<RPRecommendation> sourceRecommendation=rpRec.getSourceRecommendations();  String sourceInternalSiteName=sourceRecommendation.iterator().next().getInternalSiteName();  if (siteVolumeCount != null && siteVolumeCount.size() > 0) {    String sourceSiteVolumeCount=siteVolumeCount.get(String.valueOf(sourceInternalSiteName));    String sourceSiteVolumeCapacity=siteVolumeCapacity.get(String.valueOf(sourceInternalSiteName));    if (sourceSiteVolumeCount == null) {      _log.warn(String.format(missingSiteMetric,"Source Site Volume Count",protectionSystem,rpRec.getResourceCount()));      sourceSiteVolumeCount="-1";    }    if (sourceSiteVolumeCapacity == null) {      _log.warn(String.format(missingSiteMetric,"Source Site Volume Capacity",protectionSystem,sourceInternalSiteName));      sourceSiteVolumeCapacity="-1";    }    try {      long sourceSiteAvailableVolCapacity=Long.parseLong(sourceSiteVolumeCapacity) - Long.parseLong(sourceSiteVolumeCount);      _log.debug(String.format(sourceSiteVolumeCountLog,protectionSystem,sourceInternalSiteName,sourceSiteVolumeCount,sourceSiteVolumeCapacity));      if (sourceSiteAvailableVolCapacity < rpRec.getNumberOfVolumes(sourceInternalSiteName)) {        isValid=false;        _log.info(String.format(sourceSiteVolumeNoCapacityLog,protectionSystem,sourceInternalSiteName,resourceCount));        rpRec.setProtectionSystemCriteriaError(String.format(sourceSiteVolumeNoCapacityLog,protectionSystem,sourceInternalSiteName,resourceCount));      }    } catch (    NumberFormatException nfe) {      isValid=false;      _log.info(String.format(parseSiteStatsLog,protectionSystem,nfe.getMessage()));      rpRec.setProtectionSystemCriteriaError(String.format(parseSiteStatsLog,protectionSystem,nfe.getMessage()));    }    for (    RPRecommendation sourceRec : rpRec.getSourceRecommendations()) {      for (      RPRecommendation targetRec : sourceRec.getTargetRecommendations()) {        String internalSiteName=targetRec.getInternalSiteName();        String destSiteVolumeCount=siteVolumeCount.get(String.valueOf(internalSiteName));        String destSiteVolumeCapacity=siteVolumeCapacity.get(String.valueOf(internalSiteName));        if (destSiteVolumeCount == null) {          _log.warn(String.format(missingSiteMetric,"Destination Site Volume Count",protectionSystem,internalSiteName));          destSiteVolumeCount="-1";        }        if (destSiteVolumeCapacity == null) {          _log.warn(String.format(missingSiteMetric,"Destination Site Volume Capacity",protectionSystem,internalSiteName));          destSiteVolumeCapacity="-1";        }        try {          long destSiteAvailableVolCapacity=Long.parseLong(destSiteVolumeCapacity) - Long.parseLong(destSiteVolumeCount);          _log.debug(String.format(destSiteVolumeCountLog,protectionSystem,internalSiteName,destSiteVolumeCount,destSiteVolumeCapacity));          if (destSiteAvailableVolCapacity < rpRec.getNumberOfVolumes(targetRec.getInternalSiteName())) {            isValid=false;            _log.info(String.format(destSiteVolumeNoCapacityLog,protectionSystem,internalSiteName,rpRec.getResourceCount()));            rpRec.setProtectionSystemCriteriaError(String.format(destSiteVolumeNoCapacityLog,protectionSystem,internalSiteName,rpRec.getResourceCount()));          }        } catch (        NumberFormatException nfe) {          isValid=false;          _log.info(String.format(parseSiteStatsLog,protectionSystem,nfe.getMessage()));          rpRec.setProtectionSystemCriteriaError(String.format(parseSiteStatsLog,protectionSystem,nfe.getMessage()));        }      }    }  } else {    isValid=false;    _log.warn(String.format(missingProtectionSystemMetric,"Site Volume Capacity/Count",protectionSystem));    rpRec.setProtectionSystemCriteriaError(String.format(missingProtectionSystemMetric,"Site Volume Capacity/Count",protectionSystem));  }  if (isValid) {    _log.debug(String.format(validProtectionSystem,protectionSystem));  } else {    _log.debug(String.format(inValidProtectionSystem,protectionSystem));  }  return isValid;}  }
class C{  public SQLNonTransientConnectionException(String reason,String SQLState,int vendorCode,Throwable cause){  super(reason,SQLState,vendorCode,cause);}  }
class C{  public DeleteDirectoryResponse deleteDirectory(String directoryPath,String dataStore) throws InterruptedException, RpcException {  SyncHandler<DeleteDirectoryResponse,Host.AsyncClient.delete_directory_call> syncHandler=new SyncHandler<>();  deleteDirectory(directoryPath,dataStore,syncHandler);  syncHandler.await();  return ResponseValidator.checkDeleteDirectoryResponse(syncHandler.getResponse());}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  public static void main(String[] args){  String searchWord="Computer Programming";  String startingURL="http://cs.armstrong.edu/liang";  crawler(startingURL,searchWord);}  }
class C{  public void clearAll(){  for (int i=0; i < bits.length; i++) {    bits[i]=0;  }}  }
class C{  @CanIgnoreReturnValue public static long copy(InputStream from,OutputStream to) throws IOException {  checkNotNull(from);  checkNotNull(to);  byte[] buf=createBuffer();  long total=0;  while (true) {    int r=from.read(buf);    if (r == -1) {      break;    }    to.write(buf,0,r);    total+=r;  }  return total;}  }
class C{  public boolean isDefaultValuesForLongTypesSupported(){  return defaultValuesForLongTypesSupported;}  }
class C{  public static <T>Set<T> toSorted(SortedSet<T> self){  return new LinkedHashSet<T>(self);}  }
class C{  public PrivateKeyUsageExtension(Boolean critical,Object value) throws CertificateException, IOException {  this.extensionId=PKIXExtensions.PrivateKeyUsage_Id;  this.critical=critical.booleanValue();  this.extensionValue=(byte[])value;  DerInputStream str=new DerInputStream(this.extensionValue);  DerValue[] seq=str.getSequence(2);  for (int i=0; i < seq.length; i++) {    DerValue opt=seq[i];    if (opt.isContextSpecific(TAG_BEFORE) && !opt.isConstructed()) {      if (notBefore != null) {        throw new CertificateParsingException("Duplicate notBefore in PrivateKeyUsage.");      }      opt.resetTag(DerValue.tag_GeneralizedTime);      str=new DerInputStream(opt.toByteArray());      notBefore=str.getGeneralizedTime();    } else     if (opt.isContextSpecific(TAG_AFTER) && !opt.isConstructed()) {      if (notAfter != null) {        throw new CertificateParsingException("Duplicate notAfter in PrivateKeyUsage.");      }      opt.resetTag(DerValue.tag_GeneralizedTime);      str=new DerInputStream(opt.toByteArray());      notAfter=str.getGeneralizedTime();    } else     throw new IOException("Invalid encoding of " + "PrivateKeyUsageExtension");  }}  }
class C{  private long createRoleDefinition(TechnicalProduct technicalProduct,String roleID) throws Exception {  ArrayList<PricedProductRole> pricedRoles=new ArrayList<PricedProductRole>();  RoleDefinition roleDefinition=new RoleDefinition();  roleDefinition.setTechnicalProduct(technicalProduct);  roleDefinition.setRoleId(roleID);  roleDefinition.setPricedRoles(pricedRoles);  mgr.persist(roleDefinition);  mgr.flush();  return roleDefinition.getKey();}  }
class C{  private static int hashWrapperName(String xn){  if (xn.length() < 3) {    return 0;  }  return (3 * xn.charAt(1) + xn.charAt(2)) % 16;}  }
class C{  public boolean isAssignedGBIFSupportedLicense(){  return eml.parseLicenseUrl() != null && Constants.GBIF_SUPPORTED_LICENSES.contains(eml.parseLicenseUrl());}  }
class C{  public static ExitState abnormal(JavaCompiler comp,Throwable ex,Options options){  if (comp == null || comp.errorCount() == 0 || options == null || options.get("dev") != null) {    return new ExitState(ABNORMAL,CeylonState.BUG,0,ex,null);  } else   if (hasCeylonCodegenErrors(comp) || isAbnormalException(ex)) {    return new ExitState(ABNORMAL,CeylonState.BUG,comp.errorCount(),ex,comp);  }  return new ExitState(ABNORMAL,CeylonState.ERROR,comp.errorCount(),null,null);}  }
class C{  @Override public String toString(){  if (m_NumIterationsPerformed == 0) {    StringBuffer buf=new StringBuffer();    if (m_ZeroR == null) {      buf.append("AdaBoostM1: No model built yet.\n");    } else {      buf.append(this.getClass().getName().replaceAll(".*\\.","") + "\n");      buf.append(this.getClass().getName().replaceAll(".*\\.","").replaceAll(".","=") + "\n\n");      buf.append("Warning: No model could be built, hence ZeroR model is used:\n\n");      buf.append(m_ZeroR.toString());    }    return buf.toString();  }  StringBuffer text=new StringBuffer();  if (m_NumIterationsPerformed == 1) {    text.append("AdaBoostM1: No boosting possible, one classifier used!\n");    text.append(m_Classifiers[0].toString() + "\n");  } else {    text.append("AdaBoostM1: Base classifiers and their weights: \n\n");    for (int i=0; i < m_NumIterationsPerformed; i++) {      text.append(m_Classifiers[i].toString() + "\n\n");      text.append("Weight: " + Utils.roundDouble(m_Betas[i],2) + "\n\n");    }    text.append("Number of performed Iterations: " + m_NumIterationsPerformed + "\n");  }  return text.toString();}  }
class C{  public static boolean testAarLine(double minX,double minY,double maxX,double maxY,double x0,double y0,double x1,double y1){  double a=y0 - y1;  double b=x1 - x0;  double c=-b * y0 - a * x0;  return testAarLine(minX,minY,maxX,maxY,a,b,c);}  }
class C{  public void onReqReplaceFinancialAccount(int faDataType,String xml) throws BrokerModelException {  try {    if (m_client.isConnected()) {      m_client.replaceFA(faDataType,xml);    } else {      throw new BrokerModelException(0,3010,"Not conected Financial Account data cannot be replaced");    }  } catch (  Exception ex) {    error(0,3295,"Error replacing Financial Account Msg: " + ex.getMessage());  }}  }
class C{  public ManagedThread(String name){  super(name);  setPriority(Thread.NORM_PRIORITY);  setUncaughtExceptionHandler(HANDLER);}  }
class C{  public Terrain(int terrainSize,float scale,float minY,float maxY,String heightMapFile,String textureFile,int textInc) throws Exception {  this.terrainSize=terrainSize;  gameItems=new GameItem[terrainSize * terrainSize];  BufferedImage heightMapImage=ImageIO.read(getClass().getResourceAsStream(heightMapFile));  verticesPerCol=heightMapImage.getWidth() - 1;  verticesPerRow=heightMapImage.getHeight() - 1;  heightMapMesh=new HeightMapMesh(minY,maxY,heightMapImage,textureFile,textInc);  boundingBoxes=new Rectangle2D.Float[terrainSize][terrainSize];  for (int row=0; row < terrainSize; row++) {    for (int col=0; col < terrainSize; col++) {      float xDisplacement=(col - ((float)terrainSize - 1) / (float)2) * scale * HeightMapMesh.getXLength();      float zDisplacement=(row - ((float)terrainSize - 1) / (float)2) * scale * HeightMapMesh.getZLength();      GameItem terrainBlock=new GameItem(heightMapMesh.getMesh());      terrainBlock.setScale(scale);      terrainBlock.setPosition(xDisplacement,0,zDisplacement);      gameItems[row * terrainSize + col]=terrainBlock;      boundingBoxes[row][col]=getBoundingBox(terrainBlock);    }  }}  }
class C{  public void deleteStaleSubscriptions(String subscriptionsIdentifier){  s_logger.debug("Entering {}",Thread.currentThread().getStackTrace()[1].getMethodName());  _subscriptionManager=new CimSubscriptionManager(this,subscriptionsIdentifier);  try {    _subscriptionManager.deleteStaleSubscriptions();  } catch (  WBEMException e) {    s_logger.error("Unable to delete Stale Subscriptions",e);  }  s_logger.debug("Exiting {}",Thread.currentThread().getStackTrace()[1].getMethodName());}  }
class C{  private boolean isTargetPathConfigured(final Path[] paths,ShardPath targetPath){  for (  Path path : paths) {    if (path.equals(targetPath.getDataPath())) {      return true;    }  }  return false;}  }
class C{  private static void checkParameters(MultipleCategorySeries dataset,DefaultRenderer renderer){  if (dataset == null || renderer == null || !checkMultipleSeriesItems(dataset,renderer.getSeriesRendererCount())) {    throw new IllegalArgumentException("Titles and values should be not null and the dataset number of items should be equal to the number of series renderers");  }}  }
class C{  static public FunctionNode AND(final ValueExpressionNode t1,final ValueExpressionNode t2){  return new FunctionNode(FunctionRegistry.AND,null,new ValueExpressionNode[]{t1,t2});}  }
class C{  protected void appendDetail(StringBuffer buffer,String fieldName,Object value){  buffer.append(value);}  }
class C{  public StripedLockConcurrentHashMap(){  this(DEFAULT_INITIAL_CAPACITY);}  }
class C{  private static BitMatrix extractPureBits(BitMatrix image) throws NotFoundException {  int[] leftTopBlack=image.getTopLeftOnBit();  int[] rightBottomBlack=image.getBottomRightOnBit();  if (leftTopBlack == null || rightBottomBlack == null) {    throw NotFoundException.getNotFoundInstance();  }  int moduleSize=moduleSize(leftTopBlack,image);  int top=leftTopBlack[1];  int bottom=rightBottomBlack[1];  int left=leftTopBlack[0];  int right=rightBottomBlack[0];  int matrixWidth=(right - left + 1) / moduleSize;  int matrixHeight=(bottom - top + 1) / moduleSize;  if (matrixWidth <= 0 || matrixHeight <= 0) {    throw NotFoundException.getNotFoundInstance();  }  int nudge=moduleSize >> 1;  top+=nudge;  left+=nudge;  BitMatrix bits=new BitMatrix(matrixWidth,matrixHeight);  for (int y=0; y < matrixHeight; y++) {    int iOffset=top + y * moduleSize;    for (int x=0; x < matrixWidth; x++) {      if (image.get(left + x * moduleSize,iOffset)) {        bits.set(x,y);      }    }  }  return bits;}  }
class C{  public static Taxonomy loadTaxonomy(SequencesReader reader) throws IOException {  final Taxonomy tax=new Taxonomy();  try (FileInputStream fis=new FileInputStream(new File(reader.path(),TaxonomyUtils.TAXONOMY_FILE))){    tax.read(fis);  }   return tax;}  }
class C{  public WaferMapDataset(int maxChipX,int maxChipY,Number chipSpace){  this.maxValue=new Double(Double.NEGATIVE_INFINITY);  this.minValue=new Double(Double.POSITIVE_INFINITY);  this.data=new DefaultKeyedValues2D();  this.maxChipX=maxChipX;  this.maxChipY=maxChipY;  if (chipSpace == null) {    this.chipSpace=DEFAULT_CHIP_SPACE;  } else {    this.chipSpace=chipSpace.doubleValue();  }}  }
class C{  public static Thread consumeProcessOutputStream(Process self,OutputStream output){  Thread thread=new Thread(new ByteDumper(self.getInputStream(),output));  thread.start();  return thread;}  }
class C{  @Nullable static HighlightInfo checkIllegalForwardReferenceToField(@NotNull PsiReferenceExpression expression,@NotNull PsiField referencedField){  final Boolean isIllegalForwardReference=isIllegalForwardReferenceToField(expression,referencedField,false);  if (isIllegalForwardReference == null)   return null;  String description=isIllegalForwardReference ? JavaErrorMessages.message("illegal.forward.reference") : JavaErrorMessages.message("illegal.self.reference");  return HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(expression).descriptionAndTooltip(description).create();}  }
class C{  public <T,I extends Serializable>Slice<T> findAll(final Specification<T> spec,final Pageable pageable,final Class<T> domainClass){  final SimpleJpaNoCountRepository<T,I> noCountDao=new SimpleJpaNoCountRepository<>(domainClass,em);  return noCountDao.findAll(spec,pageable);}  }
class C{  private Bitmap drawableToBitmap(Drawable drawable){  if (drawable instanceof BitmapDrawable) {    return ((BitmapDrawable)drawable).getBitmap();  }  int width=drawable.getIntrinsicWidth();  width=width > 0 ? width : 1;  int height=drawable.getIntrinsicHeight();  height=height > 0 ? height : 1;  Bitmap bitmap=Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);  Canvas canvas=new Canvas(bitmap);  drawable.setBounds(0,0,canvas.getWidth(),canvas.getHeight());  drawable.draw(canvas);  return bitmap;}  }
class C{  public Boolean hasDemandDues(final String assessmentNo){  final BasicProperty basicProperty=basicPropertyDAO.getBasicPropertyByPropertyID(assessmentNo);  final BigDecimal currentWaterTaxDue=getWaterTaxDues(assessmentNo);  final Map<String,BigDecimal> propertyTaxDetails=getCurrentPropertyTaxDetails(basicProperty.getActiveProperty());  final BigDecimal currentPropertyTaxDue=propertyTaxDetails.get(CURR_DMD_STR).subtract(propertyTaxDetails.get(CURR_COLL_STR));  final BigDecimal arrearPropertyTaxDue=propertyTaxDetails.get(ARR_DMD_STR).subtract(propertyTaxDetails.get(ARR_COLL_STR));  return currentWaterTaxDue.add(currentPropertyTaxDue).add(arrearPropertyTaxDue).longValue() > 0;}  }
class C{  public JapaneseTokenizer(UserDictionary userDictionary,boolean discardPunctuation,Mode mode){  this(DEFAULT_TOKEN_ATTRIBUTE_FACTORY,userDictionary,discardPunctuation,mode);}  }
class C{  public boolean isReadOnly(){  return attribute.isReadOnly();}  }
