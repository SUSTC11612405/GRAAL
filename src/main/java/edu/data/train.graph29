class C{  public void addAlias(Alias alias){  if (alias != null) {    for (    AliasID aliasID : alias.getId()) {      addAliasID(aliasID,alias);    }  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean isUseAlternateEndpointsEnabled(){  return useAlternateEndpoints;}  }
class C{  public static long[] make(int bits,long init){  long[] v=new long[((bits - 1) >>> LONG_LOG2_SIZE) + 1];  v[0]=init;  return v;}  }
class C{  @Override public View onCreateFloatView(int position){  View v=mListView.getChildAt(position + mListView.getHeaderViewsCount() - mListView.getFirstVisiblePosition());  if (v == null) {    return null;  }  v.setPressed(false);  v.setDrawingCacheEnabled(true);  mFloatBitmap=Bitmap.createBitmap(v.getDrawingCache());  v.setDrawingCacheEnabled(false);  if (mImageView == null) {    mImageView=new ImageView(mListView.getContext());  }  mImageView.setBackgroundColor(mFloatBGColor);  mImageView.setPadding(0,0,0,0);  mImageView.setImageBitmap(mFloatBitmap);  mImageView.setLayoutParams(new ViewGroup.LayoutParams(v.getWidth(),v.getHeight()));  return mImageView;}  }
class C{  public int MPV_frame_start(){  int i;  AVFrame pic;  this.mb_skipped=0;  if (true) {    for (i=0; i < MAX_PICTURE_COUNT; i++) {      if (this.picture[i].data_base[0] != null && 0 == this.picture[i].reference && this.picture[i].type != FF_BUFFER_TYPE_SHARED) {        free_frame_buffer(this.picture[i]);      }    }    if (this.current_picture_ptr != null && this.current_picture_ptr.data_base[0] == null) {      pic=this.current_picture_ptr;    } else {      i=ff_find_unused_picture(0);      pic=this.picture[i];    }    pic.reference=0;    if (0 == this.dropable) {      if (this.codec_id == H264PredictionContext.CODEC_ID_H264)       pic.reference=this.picture_structure; else       if (this.pict_type != H264Context.FF_B_TYPE)       pic.reference=3;    }    pic.coded_picture_number=this.coded_picture_number++;    if (this.ff_alloc_picture(pic,0) < 0) {      return -1;    }    this.current_picture_ptr=pic;    this.current_picture_ptr.top_field_first=this.top_field_first;    this.current_picture_ptr.interlaced_frame=(0 == this.progressive_frame && 0 == this.progressive_sequence) ? 1 : 0;  }  this.current_picture_ptr.pict_type=this.pict_type;  this.current_picture_ptr.key_frame=(this.pict_type == H264Context.FF_I_TYPE) ? 1 : 0;  ff_copy_picture(this.current_picture,this.current_picture_ptr);  if (this.pict_type != H264Context.FF_B_TYPE) {    this.last_picture_ptr=this.next_picture_ptr;    if (0 == this.dropable)     this.next_picture_ptr=this.current_picture_ptr;  }  if (this.last_picture_ptr != null)   ff_copy_picture(this.last_picture,this.last_picture_ptr);  if (this.next_picture_ptr != null)   ff_copy_picture(this.next_picture,this.next_picture_ptr);  this.error_recognition=1;  return 0;}  }
class C{  public SendablePhotoMessage.SendablePhotoMessageBuilder caption(String caption){  this.caption=caption;  return this;}  }
class C{  public EcuCodeItem(String code,String description){  put(FID_CODE,code);  put(FID_DESCRIPT,description);}  }
class C{  protected boolean isBottom(final AnnotatedTypeMirror subtype){  final AnnotationMirror bottom=qualifierHierarchy.getBottomAnnotation(currentTop);  if (bottom == null) {    return false;  }switch (subtype.getKind()) {case TYPEVAR:    return isBottom(((AnnotatedTypeVariable)subtype).getUpperBound());case WILDCARD:  final AnnotatedWildcardType subtypeWc=(AnnotatedWildcardType)subtype;return isBottom(subtypeWc);default :final AnnotationMirror subtypeAnno=subtype.getAnnotationInHierarchy(currentTop);return isAnnoSubtype(subtypeAnno,bottom,false);}}  }
class C{  public boolean hasNext(){  if (nextItem != null)   return true;  noNext();  return false;}  }
class C{  final public void computeTimeLimit(SearchParams sPar){  minTimeLimit=-1;  maxTimeLimit=-1;  maxDepth=-1;  maxNodes=-1;  if (sPar.infinite) {    minTimeLimit=-1;    maxTimeLimit=-1;    maxDepth=-1;  } else   if (sPar.depth > 0) {    maxDepth=sPar.depth;  } else   if (sPar.mate > 0) {    maxDepth=sPar.mate * 2 - 1;  } else   if (sPar.moveTime > 0) {    minTimeLimit=maxTimeLimit=sPar.moveTime;  } else   if (sPar.nodes > 0) {    maxNodes=sPar.nodes;  } else {    int moves=sPar.movesToGo;    if (moves == 0) {      moves=999;    }    moves=Math.min(moves,45);    if (ponderMode) {      final double ponderHitRate=0.35;      moves=(int)Math.ceil(moves * (1 - ponderHitRate));    }    boolean white=pos.whiteMove;    int time=white ? sPar.wTime : sPar.bTime;    int inc=white ? sPar.wInc : sPar.bInc;    final int margin=Math.min(1000,time * 9 / 10);    int timeLimit=(time + inc * (moves - 1) - margin) / moves;    minTimeLimit=(int)(timeLimit * 0.85);    maxTimeLimit=(int)(minTimeLimit * (Math.max(2.5,Math.min(4.0,moves / 2))));    minTimeLimit=clamp(minTimeLimit,1,time - margin);    maxTimeLimit=clamp(maxTimeLimit,1,time - margin);  }}  }
class C{  public EmptyImportCustomizerProvider(final ImportCustomizerProvider baseCustomizer,final Set<String> extraImports,final Set<String> extraStaticImports){  this(extraImports,extraStaticImports);  this.extraImports.addAll(baseCustomizer.getImports());  this.extraImports.addAll(baseCustomizer.getExtraImports());  this.extraStaticImports.addAll(baseCustomizer.getStaticImports());  this.extraStaticImports.addAll(baseCustomizer.getExtraStaticImports());}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.TFIELD__CONST:    setConst((Boolean)newValue);  return;case TypesPackage.TFIELD__HAS_EXPRESSION:setHasExpression((Boolean)newValue);return;case TypesPackage.TFIELD__TYPE_REF:setTypeRef((TypeRef)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public String generateKey() throws Exception {  return RandomStringUtils.random(KEY_LENGTH,0,charsForKey.length - 1,true,true,charsForKey,SecureRandom.getInstance(SecurityUtil.getSecuredRandomAlgorithm()));}  }
class C{  private static <T>int gallopLeft(T key,T[] a,int base,int len,int hint,Comparator<? super T> c){  if (DEBUG)   assert len > 0 && hint >= 0 && hint < len;  int lastOfs=0;  int ofs=1;  if (c.compare(key,a[base + hint]) > 0) {    int maxOfs=len - hint;    while (ofs < maxOfs && c.compare(key,a[base + hint + ofs]) > 0) {      lastOfs=ofs;      ofs=(ofs * 2) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    lastOfs+=hint;    ofs+=hint;  } else {    final int maxOfs=hint + 1;    while (ofs < maxOfs && c.compare(key,a[base + hint - ofs]) <= 0) {      lastOfs=ofs;      ofs=(ofs * 2) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    int tmp=lastOfs;    lastOfs=hint - ofs;    ofs=hint - tmp;  }  if (DEBUG)   assert -1 <= lastOfs && lastOfs < ofs && ofs <= len;  lastOfs++;  while (lastOfs < ofs) {    int m=lastOfs + ((ofs - lastOfs) >>> 1);    if (c.compare(key,a[base + m]) > 0)     lastOfs=m + 1; else     ofs=m;  }  if (DEBUG)   assert lastOfs == ofs;  return ofs;}  }
class C{  public NGramFilterFactory(Map<String,String> args){  super(args);  minGramSize=getInt(args,"minGramSize",NGramTokenFilter.DEFAULT_MIN_NGRAM_SIZE);  maxGramSize=getInt(args,"maxGramSize",NGramTokenFilter.DEFAULT_MAX_NGRAM_SIZE);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  protected void fillBuffer() throws IOException {  count=inputStream.read(buffer,0,BUFFER_SIZE);  position=0;}  }
class C{  @Override public synchronized void initialize(){  if (!mRootDirectory.exists()) {    if (!mRootDirectory.mkdirs()) {      VolleyLog.e("Unable to create cache dir %s",mRootDirectory.getAbsolutePath());    }    return;  }  File[] files=mRootDirectory.listFiles();  if (files == null) {    return;  }  for (  File file : files) {    BufferedInputStream fis=null;    try {      fis=new BufferedInputStream(new FileInputStream(file));      CacheHeader entry=CacheHeader.readHeader(fis);      entry.size=file.length();      putEntry(entry.key,entry);    } catch (    IOException e) {      if (file != null) {        file.delete();      }    } finally {      try {        if (fis != null) {          fis.close();        }      } catch (      IOException ignored) {      }    }  }}  }
class C{  private boolean findAndRemove(Object e){  if (e != null) {    for (Node pred=null, p=head; p != null; ) {      Object item=p.item;      if (p.isData) {        if (item != null && item != p && e.equals(item) && p.tryMatchData()) {          unsplice(pred,p);          return true;        }      } else       if (item == null)       break;      pred=p;      if ((p=p.next) == pred) {        pred=null;        p=head;      }    }  }  return false;}  }
class C{  private float spacing(WrapMotionEvent event){  double x=event.getX(0) - event.getX(1);  double y=event.getY(0) - event.getY(1);  return (float)Math.sqrt((x * x + y * y));}  }
class C{  public static byte[] decrypt(byte[] key,byte[] nonce,byte[] a,byte[] c,int numAuthenticationBytes) throws GeneralSecurityException {  byte[] T;  byte[] m;  byte[] mac;  long lengthM=c.length - numAuthenticationBytes;  Cipher cipher=Cipher.getInstance(BLOCK_CIPHER);  cipher.init(Cipher.ENCRYPT_MODE,new SecretKeySpec(key,BLOCK_CIPHER));  List<byte[]> S_i=generateKeyStreamBlocks(lengthM,nonce,cipher);  byte[] S_0=S_i.get(0);  byte[] concatenatedS_i=generateConcatenatedKeyStream(S_i,lengthM);  byte[] encryptedM=ByteArrayUtils.truncate(c,(int)lengthM);  m=ByteArrayUtils.xorArrays(encryptedM,concatenatedS_i);  byte[] encryptedT=new byte[numAuthenticationBytes];  System.arraycopy(c,(int)lengthM,encryptedT,0,numAuthenticationBytes);  T=ByteArrayUtils.xorArrays(encryptedT,ByteArrayUtils.truncate(S_0,numAuthenticationBytes));  mac=computeCbcMac(nonce,m,a,cipher,numAuthenticationBytes);  if (Arrays.equals(T,mac)) {    return m;  } else {    throw new InvalidMacException(mac,T);  }}  }
class C{  public static void main(String[] args) throws AuthenticationException {  SimpleCommandLineParser parser=new SimpleCommandLineParser(args);  String username=parser.getValue("username","user","u");  String password=parser.getValue("password","pass","p");  boolean help=parser.containsKey("help","h");  if (help || username == null || password == null) {    usage();    System.exit(1);  }  TableDemo demo=new TableDemo(new SpreadsheetService("Table Demo"),System.out);  demo.run(username,password);}  }
class C{  public PdfPTable createTenderTotalTable(){  final PdfPTable tenderTotalTable=new PdfPTable(3);  tenderTotalTable.getDefaultCell().setBorderWidth(1);  tenderTotalTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);  tenderTotalTable.getDefaultCell().setColspan(3);  tenderTotalTable.addCell(pdfLabel.get("tenderNegotiationpdf.tendertotal"));  return tenderTotalTable;}  }
class C{  public boolean onKeyUp(int keyCode,KeyEvent event){  if (keyCode == KeyEvent.KEYCODE_BACK && mSlidingMenu.isMenuShowing()) {    showContent();    return true;  }  return false;}  }
class C{  public KMLContainerTreeNode(KMLAbstractContainer container){  super(container);}  }
class C{  public void testFsyncWorks() throws Exception {  Path dir=wrap(createTempDir());  FileChannel file=FileChannel.open(dir.resolve("file"),StandardOpenOption.CREATE_NEW,StandardOpenOption.READ,StandardOpenOption.WRITE);  byte bytes[]=new byte[128];  random().nextBytes(bytes);  file.write(ByteBuffer.wrap(bytes));  file.force(true);  file.close();}  }
class C{  @Override protected void free(){  try {    device.deletePortMapping(getTransportAddress().getPort(),"UDP");  } catch (  Exception e) {  }  IceSocketWrapper socket=getIceSocketWrapper();  if (socket != null) {    socket.close();  }  device=null;}  }
class C{  @Override protected Instance process(Instance instance) throws Exception {  Instance result;  int i;  result=(Instance)instance.copy();  for (i=0; i < getFilters().length; i++) {    if (getFilter(i).input(result)) {      result=getFilter(i).output();    } else {      result=null;      break;    }  }  return result;}  }
class C{  public MethodProposalInfo(IJavaProject project,CompletionProposal proposal){  super(project,proposal);}  }
class C{  public boolean isAdjacent(MonotoneVertex<E> vertex){  return vertex == this.previous || vertex == this.next;}  }
class C{  private Bitmap doResponse(byte[] byteArray) throws OutOfMemoryError {  BitmapFactory.Options decodeOptions=new BitmapFactory.Options();  Bitmap bitmap;  if (mMaxWidth == 0 && mMaxHeight == 0) {    decodeOptions.inPreferredConfig=mDecodeConfig;    bitmap=BitmapFactory.decodeByteArray(byteArray,0,byteArray.length,decodeOptions);  } else {    decodeOptions.inJustDecodeBounds=true;    BitmapFactory.decodeByteArray(byteArray,0,byteArray.length,decodeOptions);    int actualWidth=decodeOptions.outWidth;    int actualHeight=decodeOptions.outHeight;    int desiredWidth=getResizedDimension(mMaxWidth,mMaxHeight,actualWidth,actualHeight,mScaleType);    int desiredHeight=getResizedDimension(mMaxHeight,mMaxWidth,actualHeight,actualWidth,mScaleType);    decodeOptions.inJustDecodeBounds=false;    decodeOptions.inSampleSize=findBestSampleSize(actualWidth,actualHeight,desiredWidth,desiredHeight);    Bitmap tempBitmap=BitmapFactory.decodeByteArray(byteArray,0,byteArray.length,decodeOptions);    if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) {      bitmap=Bitmap.createScaledBitmap(tempBitmap,desiredWidth,desiredHeight,true);      tempBitmap.recycle();    } else {      bitmap=tempBitmap;    }  }  return bitmap;}  }
class C{  public Builder addVarint(final long value){  if (result.varint == null) {    result.varint=new ArrayList<Long>();  }  result.varint.add(value);  return this;}  }
class C{  public boolean grabPixels() throws InterruptedException {  return grabPixels(0);}  }
class C{  public static boolean isFile(IPath classpathRelativePath,IJavaProject javaProject) throws JavaModelException {  return ClasspathResourceUtilities.resolveFile(classpathRelativePath,javaProject) instanceof IFile;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void consolidateLayouts(){  logger.info("consolidate layouts ");  List<Layout> origList=new LinkedList<Layout>();  for (  Layout layout : layouts) {    logger.info("layout.name {}, layout.view.id {} ",layout.name,layout.view.id);    if (layout.view.children.size() > 0) {      if (layout.name != null) {        String key=layout.name;        viewgroupTable.put(key,layout.view);        logger.info("adding viewgroup {}, key {} ",layout.view.name,key);      }    }  }}  }
class C{  public static boolean canDelete(DownloadFileInfo downloadFileInfo){  if (!DownloadFileUtil.isLegal(downloadFileInfo)) {    return false;  }  if (isDownloadingStatus(downloadFileInfo)) {    return false;  }  return true;}  }
class C{  @Override public void process() throws MigrationCallbackException {  DbClient dbClient=getDbClient();  try {    List<URI> networkUris=dbClient.queryByType(Network.class,true);    Iterator<Network> networks=dbClient.queryIterativeObjects(Network.class,networkUris);    List<Network> updated=new ArrayList<Network>();    while (networks.hasNext()) {      Network network=networks.next();      log.info("Updating connected virtual arrays for network {}",network.getLabel());      if (network.getAssignedVirtualArrays() != null) {        if (network.getConnectedVirtualArrays() != null) {          for (          String assignedVarrayUri : network.getAssignedVirtualArrays()) {            log.info("Adding virtual array {} to connected virtual arrays",assignedVarrayUri);            network.getConnectedVirtualArrays().add(assignedVarrayUri);          }        } else {          log.info("Setting connected virtual arrays to {}",network.getAssignedVirtualArrays());          network.setConnectedVirtualArrays(new StringSet(network.getAssignedVirtualArrays()));        }        updated.add(network);      }    }    dbClient.updateAndReindexObject(updated);  } catch (  Exception e) {    log.error("Exception occured while updating Network connectedVirtualArrays");    log.error(e.getMessage(),e);  }}  }
class C{  private void populateSystemVocabulary(){  final Vocabulary tmVocab=sa.getVocabulary();  IntStream.range(0,tmVocab.size()).parallel().forEach(null);}  }
class C{  public void incrementOffset(int n){  offset+=n;  availLen-=n;  if (availLen < 0)   throw new PngjOutputException("Anomalous situation");  if (availLen == 0) {    flush();  }}  }
class C{  public void write(int b) throws IOException {  tempBuf[0]=(byte)b;  write(tempBuf,0,1);}  }
class C{  public static void toggleAutomaticLayouting(final ZyGraph graph){  Preconditions.checkNotNull(graph,"IE01748: Graph argument can not be null");  graph.getSettings().getLayoutSettings().setAutomaticLayouting(!graph.getSettings().getLayoutSettings().getAutomaticLayouting());}  }
class C{  private void assignZeroMatrix(int m,int n){  numRows=m;  numColumns=n;  length=(n + 31) >>> 5;  matrix=new int[numRows][length];  for (int i=0; i < numRows; i++) {    for (int j=0; j < length; j++) {      matrix[i][j]=0;    }  }}  }
class C{  void createDepthTexture(){  depthTexture=glGenTextures();  glBindTexture(GL_TEXTURE_2D,depthTexture);  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_NEAREST);  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_NEAREST);  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_WRAP_S,GL_CLAMP_TO_EDGE);  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_WRAP_T,GL_CLAMP_TO_EDGE);  glTexImage2D(GL_TEXTURE_2D,0,GL_DEPTH_COMPONENT,shadowMapSize,shadowMapSize,0,GL_DEPTH_COMPONENT,GL_UNSIGNED_BYTE,(ByteBuffer)null);  glBindTexture(GL_TEXTURE_2D,0);}  }
class C{  public char charValue(){  return ' ';}  }
class C{  private void processLeaveRequest(LeaveRequestMessage incomingRequest){  logger.info("received leave request from {} for {}",incomingRequest.getSender(),incomingRequest.getMemberID());  NetView v=currentView;  if (v == null) {    recordViewRequest(incomingRequest);    return;  }  InternalDistributedMember mbr=incomingRequest.getMemberID();  if (logger.isDebugEnabled()) {    logger.debug("JoinLeave.processLeaveRequest invoked.  isCoordinator=" + isCoordinator + "; isStopping="+ isStopping+ "; cancelInProgress="+ services.getCancelCriterion().isCancelInProgress());  }  if (!v.contains(mbr) && mbr.getVmViewId() < v.getViewId()) {    logger.debug("ignoring leave request from old member");    return;  }  if (incomingRequest.getMemberID().equals(this.localAddress)) {    logger.info("I am being told to leave the distributed system by {}",incomingRequest.getSender());    forceDisconnect(incomingRequest.getReason());    return;  }  if (!isCoordinator && !isStopping && !services.getCancelCriterion().isCancelInProgress()) {    logger.debug("Checking to see if I should become coordinator");    NetView check=new NetView(v,v.getViewId() + 1);    check.remove(incomingRequest.getMemberID());synchronized (removedMembers) {      check.removeAll(removedMembers);      check.addCrashedMembers(removedMembers);    }synchronized (leftMembers) {      leftMembers.add(mbr);      check.removeAll(leftMembers);    }    if (check.getCoordinator().equals(localAddress)) {synchronized (viewInstallationLock) {        becomeCoordinator(incomingRequest.getMemberID());      }    }  } else {    if (!isStopping && !services.getCancelCriterion().isCancelInProgress()) {      recordViewRequest(incomingRequest);      this.viewProcessor.processLeaveRequest(incomingRequest.getMemberID());      this.prepareProcessor.processLeaveRequest(incomingRequest.getMemberID());    }  }}  }
class C{  protected void handleElementAdded(CompositeGraphicsNode gn,Node parent,Element childElt){  GVTBuilder builder=ctx.getGVTBuilder();  GraphicsNode childNode=builder.build(ctx,childElt);  if (childNode == null) {    return;  }  int idx=-1;  for (Node ps=childElt.getPreviousSibling(); ps != null; ps=ps.getPreviousSibling()) {    if (ps.getNodeType() != Node.ELEMENT_NODE)     continue;    Element pse=(Element)ps;    GraphicsNode psgn=ctx.getGraphicsNode(pse);    while ((psgn != null) && (psgn.getParent() != gn)) {      psgn=psgn.getParent();    }    if (psgn == null)     continue;    idx=gn.indexOf(psgn);    if (idx == -1)     continue;    break;  }  idx++;  gn.add(idx,childNode);}  }
class C{  public List<ContainerListEntry> listContainers() throws IOException {  return listContainers(ListContainersParams.create().withAll(true));}  }
class C{  public static Pattern glob2Pattern(String... globs){  final StringBuilder regex=new StringBuilder();  boolean needOr=false;  for (  String glob : globs) {    if (needOr) {      regex.append('|');    }    int i=0, len=glob.length();    while (i < len) {      char c=glob.charAt(i++);switch (c) {case '*':        if (i < len && glob.charAt(i) == '*') {          regex.append(".*");          i++;        } else {          regex.append("[^.]*");        }      break;case '?':    regex.append("[^.]");  break;default :if (isRegexMeta(c)) {  regex.append('\\');}regex.append(c);}}needOr=true;}return Pattern.compile(regex.toString(),0);}  }
class C{  public static void updateRpSystemConnectivity(ProtectionSystem rpSystem,DbClient dbClient){  if (rpSystem.getInactive()) {    return;  }  if (rpSystem.getVirtualArrays() == null) {    rpSystem.setVirtualArrays(new StringSet());  }  rpSystem.getVirtualArrays().replace(StringSetUtil.uriListToSet(getRPSystemVirtualArrays(dbClient,rpSystem.getId())));  dbClient.updateAndReindexObject(rpSystem);}  }
class C{  public synchronized boolean add(OMGraphic g){  boolean ret=super.add(g);  String id=((LinkProperties)g.getAttribute(OMGraphic.APP_OBJECT)).getProperty(LPC_GRAPHICID);  if (Debug.debugging("linkdetail")) {    Debug.output("LinkOMGraphicList: Adding graphic, id(" + id + ")");  }  if (id != null) {    hash.put(id.intern(),g);  }  return ret;}  }
class C{  @Override public void init(Processor processor){  super.init(processor);  if (((ExpressionBasedAction)getAction()).getExpression() != null) {    try {      expression=ExpressionHandlerFactory.getHandler(((ExpressionBasedAction)getAction()).getExpression());      expression.init(processor,getAction(),false);      if (!isUsesHeaders()) {        setUsesHeaders(expression.isUsesHeaders());      }      if (!isUsesContent()) {        setUsesContent(expression.isUsesContent());      }    } catch (    Throwable t) {      if (log.isLoggable(Level.FINE)) {        log.log(Level.FINE,"Failed to compile expression for action '" + getAction() + "'",t);      }      ProcessorIssue pi=new ProcessorIssue();      pi.setProcessor(processor.getDescription());      pi.setAction(getAction().getDescription());      pi.setField("expression");      pi.setSeverity(Severity.Error);      pi.setDescription(t.getMessage());      if (getIssues() == null) {        setIssues(new ArrayList<Issue>());      }      getIssues().add(pi);    }  } else {    if (log.isLoggable(Level.FINE)) {      log.fine("No action expression defined for processor action= " + getAction());    }    ProcessorIssue pi=new ProcessorIssue();    pi.setProcessor(processor.getDescription());    pi.setAction(getAction().getDescription());    pi.setField("expression");    pi.setSeverity(Severity.Error);    pi.setDescription(EXPRESSION_HAS_NOT_BEEN_DEFINED);    if (getIssues() == null) {      setIssues(new ArrayList<Issue>());    }    getIssues().add(pi);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:09.390 -0400",hash_original_method="167D6058217CAE2D9314E19221D90CE8",hash_generated_method="1DB101F683AB5E18DE11500B4664D09F") public LoginException(){  super();}  }
class C{  private ListenableFuture sendSingleGetData(GetDataMessage getdata){  Preconditions.checkArgument(getdata.getItems().size() == 1);  GetDataRequest req=new GetDataRequest();  req.future=SettableFuture.create();  req.hash=getdata.getItems().get(0).hash;  getDataFutures.add(req);  sendMessage(getdata);  return req.future;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case GamlPackage.EXPRESSION_LIST__EXPRS:    return ((InternalEList<?>)getExprs()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public DellSCMirroring(){  this.connectionManager=DellSCConnectionManager.getInstance();}  }
class C{  protected ResolveResult(){  resolvedObj=null;  remainingName=null;}  }
class C{  public static org.oscm.internal.vo.VOCustomerService convertToUp(org.oscm.vo.VOCustomerService oldVO){  if (oldVO == null) {    return null;  }  org.oscm.internal.vo.VOCustomerService newVO=new org.oscm.internal.vo.VOCustomerService();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setParameters(convertToUpVOParameter(oldVO.getParameters()));  newVO.setDescription(oldVO.getDescription());  newVO.setName(oldVO.getName());  newVO.setServiceId(oldVO.getServiceId());  newVO.setTechnicalId(oldVO.getTechnicalId());  newVO.setFeatureURL(oldVO.getFeatureURL());  newVO.setBaseURL(oldVO.getBaseURL());  newVO.setPriceModel(convertToUp(oldVO.getPriceModel()));  newVO.setStatus(EnumConverter.convert(oldVO.getStatus(),org.oscm.internal.types.enumtypes.ServiceStatus.class));  newVO.setAccessType(EnumConverter.convert(oldVO.getAccessType(),org.oscm.internal.types.enumtypes.ServiceAccessType.class));  newVO.setSellerId(oldVO.getSellerId());  newVO.setSellerName(oldVO.getSellerName());  newVO.setSellerKey(oldVO.getSellerKey());  newVO.setTags(oldVO.getTags());  newVO.setShortDescription(oldVO.getShortDescription());  newVO.setAverageRating(oldVO.getAverageRating());  newVO.setNumberOfReviews(oldVO.getNumberOfReviews());  newVO.setOfferingType(EnumConverter.convert(oldVO.getOfferingType(),org.oscm.internal.types.enumtypes.OfferingType.class));  newVO.setOrganizationId(oldVO.getOrganizationId());  newVO.setOrganizationKey(oldVO.getOrganizationKey());  newVO.setOrganizationName(oldVO.getOrganizationName());  newVO.setName(oldVO.getName());  newVO.setConfiguratorUrl(oldVO.getConfiguratorUrl());  newVO.setCustomTabUrl(oldVO.getCustomTabUrl());  newVO.setCustomTabName(oldVO.getCustomTabName());  return newVO;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public synchronized Iterator<Long> handles() throws IOException {  return NaturalOrder.LongIterator(this.stack.keys(true,false));}  }
class C{  boolean findClass(String className) throws Exception {  ClassLoaderReference cl=targetClass.classLoader();  Iterator vci=cl.visibleClasses().iterator();  while (vci.hasNext()) {    ReferenceType rt=(ReferenceType)vci.next();    println(rt.name() + " - " + rt.classLoader());    if (rt.name().equals(className)) {      return true;    }  }  return false;}  }
class C{  public boolean isPersistent(){  return (null != cookieExpiryDate);}  }
class C{  public Property property(DateTimeFieldType fieldType){  if (fieldType == null) {    throw new IllegalArgumentException("The DateTimeFieldType must not be null");  }  if (isSupported(fieldType) == false) {    throw new IllegalArgumentException("Field '" + fieldType + "' is not supported");  }  return new Property(this,fieldType.getField(getChronology()));}  }
class C{  static public void removeNotificationListener(JMXConnector jmxConnector,Class<?> mbeanClass,NotificationListener notificationListener) throws Exception {  MBeanServerConnection mbsc=jmxConnector.getMBeanServerConnection();  ObjectName objectName=generateMBeanObjectName(mbeanClass);  mbsc.removeNotificationListener(objectName,notificationListener);}  }
class C{  public void sortMoviesInMovieSet(MovieSet movieSet){  if (movieSet.getMovies().size() > 1) {    movieSet.sortMovies();  }  firePropertyChange("sortedMovieSets",null,movieSetList);}  }
class C{  private String prepareDirs(String dirType,int numDirs){  File[] dirs=new File[numDirs];  String dirsString="";  for (int i=0; i < numDirs; i++) {    dirs[i]=new File(testWorkDir,MiniYARNCluster.this.getName() + "-" + dirType+ "Dir-nm-"+ index+ "_"+ i);    dirs[i].mkdirs();    LOG.info("Created " + dirType + "Dir in "+ dirs[i].getAbsolutePath());    String delimiter=(i > 0) ? "," : "";    dirsString=dirsString.concat(delimiter + dirs[i].getAbsolutePath());  }  return dirsString;}  }
class C{  public DateColumn withRange(Date low,Date high){  this.low=low;  this.high=high;  return this;}  }
class C{  public GPUImageSmoothToonFilter(){  blurFilter=new GPUImageGaussianBlurFilter();  addFilter(blurFilter);  toonFilter=new GPUImageToonFilter();  addFilter(toonFilter);  getFilters().add(blurFilter);  setBlurSize(0.5f);  setThreshold(0.2f);  setQuantizationLevels(10.0f);}  }
class C{  public LongsSketch(final int maxMapSize){  this(toLog2(maxMapSize,"maxMapSize"),LG_MIN_MAP_SIZE);}  }
class C{  public ArrayDeque(){  this(DEFAULT_SIZE);}  }
class C{  @Override public void updateNString(String columnLabel,String x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateNString(" + quote(columnLabel) + ", "+ quote(x)+ ");");    }    update(columnLabel,x == null ? ValueNull.INSTANCE : ValueString.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void testMergeMultipleSecurityConstraintsForDifferentPatterns() throws Exception {  String srcXml="<web-app>" + "  <security-constraint>" + "    <web-resource-collection>"+ "      <web-resource-name>resource1</web-resource-name>"+ "      <url-pattern>/s1/*</url-pattern>"+ "    </web-resource-collection>"+ "    <auth-constraint>"+ "      <role-name>role1</role-name>"+ "    </auth-constraint>"+ "  </security-constraint>"+ "</web-app>";  WebXml srcWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(srcXml.getBytes("UTF-8")),null);  String mergeXml="<web-app>" + "  <security-constraint>" + "    <web-resource-collection>"+ "      <web-resource-name>resource2</web-resource-name>"+ "      <url-pattern>/s2/*</url-pattern>"+ "    </web-resource-collection>"+ "    <auth-constraint>"+ "      <role-name>role2</role-name>"+ "    </auth-constraint>"+ "  </security-constraint>"+ "</web-app>";  WebXml mergeWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(mergeXml.getBytes("UTF-8")),null);  WebXmlMerger merger=new WebXmlMerger(srcWebXml);  merger.merge(mergeWebXml);  assertNotNull(WebXmlUtils.getSecurityConstraint(srcWebXml,"/s1/*"));  assertNotNull(WebXmlUtils.getSecurityConstraint(srcWebXml,"/s2/*"));  assertNull(WebXmlUtils.getSecurityConstraint(srcWebXml,"/s3/*"));}  }
class C{  private void logMandatoryWarning(DiagnosticPosition pos,String msg,Object... args){  if (enforceMandatory)   log.mandatoryWarning(lintCategory,pos,msg,args); else   log.warning(lintCategory,pos,msg,args);}  }
class C{  public void init(SecureRandom random) throws IllegalArgumentException {}  }
class C{  private void addHullFixtureAction(){  TreePath path=this.tree.getSelectionPath();  if (path != null) {    DefaultMutableTreeNode node=(DefaultMutableTreeNode)path.getLastPathComponent();    if (node.getUserObject() instanceof SandboxBody) {      BodyFixture fixture=AddConvexHullFixtureDialog.show(ControlUtilities.getParentWindow(this));      SandboxBody body=(SandboxBody)node.getUserObject();      if (fixture != null) {synchronized (Simulation.LOCK) {          body.addFixture(fixture);          if (!body.isMassExplicit()) {            body.updateMass();          }        }        DefaultMutableTreeNode fixtureNode=new DefaultMutableTreeNode(fixture);        this.model.insertNodeInto(fixtureNode,node,node.getChildCount());        this.tree.expandPath(new TreePath(fixtureNode.getPath()).getParentPath());      }    }  }}  }
class C{  private void checkIfAnimationIsRunning(){  if (animatorThread != null) {    SWT.error(SWT.ERROR_INVALID_ARGUMENT,null,"Can not change this value when an animation is running");  }}  }
class C{  public void testUnspecifiedProperties() throws InterruptedException {  NetworkClientFilter ncf=new NetworkClientFilter();  ncf.setTungstenSchema("tungsten_foo");  try {    filterHelper.setContext(replicatorContext);    filterHelper.setFilter(ncf);    filterHelper.done();    fail("Exception not thrown during configure though definitionsFile property was not set");  } catch (  ReplicatorException e) {    logger.info("Expected error received: " + e);  }}  }
class C{  public void delete(String name) throws IOException {  if (name.equalsIgnoreCase(SKIP_CERTS))   throw new IOException("Attribute " + SKIP_CERTS + " may not be deleted."); else   throw new IOException("Attribute name not recognized by " + "CertAttrSet:InhibitAnyPolicy.");}  }
class C{  public DAWGTestResultSetParseException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  public void parseLandUseAndBuildings(String file) throws FileNotFoundException {  File f=new File(file);  if (!f.exists()) {    throw new FileNotFoundException("Could not find " + file);  }  LandUseBuildingSink landUseBuildingSink=new LandUseBuildingSink(this.ct,this.osmLandUseToMatsimTypeMap,this.osmBuildingToMatsimTypeMap,this.buildingTypeFromVicinityRange,this.tagsToIgnoreBuildings);  XmlReader xmlReader=new XmlReader(f,false,CompressionMethod.None);  xmlReader.setSink(landUseBuildingSink);  xmlReader.run();  this.landuse=landUseBuildingSink.getFacilities();  this.amenityAttributes=landUseBuildingSink.getFacilityAttributes();}  }
class C{  public boolean equals(Object obj){  if (obj instanceof NtlmPasswordAuthentication) {    NtlmPasswordAuthentication ntlm=(NtlmPasswordAuthentication)obj;    if (ntlm.domain.toUpperCase().equals(domain.toUpperCase()) && ntlm.username.toUpperCase().equals(username.toUpperCase())) {      if (hashesExternal && ntlm.hashesExternal) {        return Arrays.equals(ansiHash,ntlm.ansiHash) && Arrays.equals(unicodeHash,ntlm.unicodeHash);      } else       if (!hashesExternal && password.equals(ntlm.password)) {        return true;      }    }  }  return false;}  }
class C{  public static ProcessOutputReader fg(Class main,String[] vmArgs,String[] mainArgs) throws IOException {  File javabindir=new File(System.getProperty("java.home"),"bin");  File javaexe=new File(javabindir,"java");  int bits=Integer.getInteger("sun.arch.data.model",0).intValue();  String vmKindArg=(bits == 64) ? "-d64" : null;  ArrayList argList=new ArrayList();  argList.add(javaexe.getPath());  if (vmKindArg != null) {    argList.add(vmKindArg);  }  argList.add("-Djava.class.path=" + System.getProperty("java.class.path"));  argList.add("-Djava.library.path=" + System.getProperty("java.library.path"));  if (vmArgs != null) {    argList.addAll(Arrays.asList(vmArgs));  }  argList.add(main.getName());  if (mainArgs != null) {    argList.addAll(Arrays.asList(mainArgs));  }  String[] cmd=(String[])argList.toArray(new String[argList.size()]);  return new ProcessOutputReader(Runtime.getRuntime().exec(cmd));}  }
class C{  public boolean isDefault(){  return this == DEFAULT;}  }
class C{  public JBBPOut Double(final double... value) throws IOException {  assertNotEnded();  assertArrayNotNull(value);  if (this.processCommands) {    for (    final double d : value) {      _writeLong(Double.doubleToLongBits(d));    }  }  return this;}  }
class C{  private void paint(SeaGlassPainter p,SynthContext ctx,Graphics g,int x,int y,int w,int h,AffineTransform transform){  if (p != null) {    if (g instanceof Graphics2D) {      Graphics2D gfx=(Graphics2D)g;      if (transform != null) {        gfx.transform(transform);      }      gfx.translate(x,y);      p.paint(gfx,ctx.getComponent(),w,h);      gfx.translate(-x,-y);      if (transform != null) {        try {          gfx.transform(transform.createInverse());        } catch (        NoninvertibleTransformException e) {          e.printStackTrace();        }      }    } else {      BufferedImage img=new BufferedImage(w,h,BufferedImage.TYPE_INT_ARGB);      Graphics2D gfx=img.createGraphics();      if (transform != null) {        gfx.transform(transform);      }      p.paint(gfx,ctx.getComponent(),w,h);      gfx.dispose();      g.drawImage(img,x,y,null);      img=null;    }  }}  }
class C{  public boolean matchRecipient(MailAddress recipient){  if (recipient.getDomain().equals(listservAddress.getDomain())) {    if (recipient.getLocalPart().startsWith(listservAddress.getLocalPart() + "-")) {      return true;    }  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:56.319 -0500",hash_original_method="7B6C844E67A0CC9BDD3E050A8ACE8852",hash_generated_method="75305BFFFD74A8F7A8CA4190E9D9C1C4") protected int processCdmaWapPdu(byte[] pdu,int referenceNumber,String address){  int index=0;  int msgType=(0xFF & pdu[index++]);  if (msgType != 0) {    Log.w(TAG,"Received a WAP SMS which is not WDP. Discard.");    return Intents.RESULT_SMS_HANDLED;  }  int totalSegments=(0xFF & pdu[index++]);  int segment=(0xFF & pdu[index++]);  if (segment >= totalSegments) {    Log.e(TAG,"WDP bad segment #" + segment + " expecting 0-"+ (totalSegments - 1));    return Intents.RESULT_SMS_HANDLED;  }  int sourcePort=0;  int destinationPort=0;  if (segment == 0) {    sourcePort=(0xFF & pdu[index++]) << 8;    sourcePort|=0xFF & pdu[index++];    destinationPort=(0xFF & pdu[index++]) << 8;    destinationPort|=0xFF & pdu[index++];    if (mCheckForDuplicatePortsInOmadmWapPush) {      if (checkDuplicatePortOmadmWappush(pdu,index)) {        index=index + 4;      }    }  }  Log.i(TAG,"Received WAP PDU. Type = " + msgType + ", originator = "+ address+ ", src-port = "+ sourcePort+ ", dst-port = "+ destinationPort+ ", ID = "+ referenceNumber+ ", segment# = "+ segment+ '/'+ totalSegments);  byte[] userData=new byte[pdu.length - index];  System.arraycopy(pdu,index,userData,0,pdu.length - index);  return processMessagePart(userData,address,referenceNumber,segment,totalSegments,0L,destinationPort,true);}  }
class C{  public EncryptionService(){  if (Security.getProvider(BouncyCastleProvider.PROVIDER_NAME) == null) {    Security.addProvider(new BouncyCastleProvider());  }}  }
class C{  public static int min(int a,int b,int c){  int mi;  mi=a;  if (b < mi) {    mi=b;  }  if (c < mi) {    mi=c;  }  return mi;}  }
class C{  @After public void clearSourceAndTargetFolder(){  deleteFiles(sourceFolder);  deleteFiles(targetFolder);}  }
class C{  public RDN(ASN1ObjectIdentifier oid,ASN1Encodable value){  ASN1EncodableVector v=new ASN1EncodableVector();  v.add(oid);  v.add(value);  this.values=new DERSet(new DERSequence(v));}  }
class C{  protected String handleResourceAccessException(final ResourceAccessException e){  stop();  return String.format("The connection to the GemFire Manager's HTTP service @ %1$s failed with: %2$s. " + "Please try reconnecting or see the GemFire Manager's log file for further details.",getBaseUrl(),e.getMessage());}  }
class C{  CacheServerCreation(InternalCache cache){  super(cache);}  }
class C{  private Object loadSpringContextBean(Object appCtx,String beanName){  try {    IgniteSpringHelper spring=IgniteComponentType.SPRING.create(false);    return spring.loadBeanFromAppContext(appCtx,beanName);  } catch (  Exception e) {    throw new IgniteException("Failed to load bean in application context [beanName=" + beanName + ", igniteConfig="+ appCtx+ ']',e);  }}  }
class C{  protected boolean hasOutstandingChanges(){  return (fAmtFrom.hasChanged() || fAmtTo.hasChanged() || fBPartner_ID.hasChanged()|| fDescription.hasChanged()|| fDocumentNo.hasChanged()|| fDateFrom.hasChanged()|| fDateTo.hasChanged()|| fIsDelivered.hasChanged()|| fIsSOTrx.hasChanged()|| fPOReference.hasChanged());}  }
class C{  public static void addPrecisionSawmillRecipe(ItemStack input,ItemStack primaryOutput){  addRecipe(Recipe.PRECISION_SAWMILL,new SawmillRecipe(input,primaryOutput));}  }
class C{  public FacebookGraphObjectException(Throwable throwable){  super(throwable);}  }
class C{  private void addProjectPath(final Path path){  addToClassPool(path);  if (path.toFile().isFile() && path.toString().endsWith(".jar")) {    addJarClasses(path);  } else   if (path.toFile().isDirectory()) {    addDirectoryClasses(path,Paths.get(""));  } else {    throw new IllegalArgumentException("The project path '" + path + "' must be a jar file or a directory");  }}  }
class C{  public AdeInternal(String inputPropertyPath) throws AdeException {  String propertyPath=inputPropertyPath;  if (propertyPath == null) {    propertyPath=System.getProperty(ADE_SETUP_FILE_PATH_PROPERTY);    if ("".equals(propertyPath) || propertyPath == null) {      throw new AdeUsageException("Missing property: " + ADE_SETUP_FILE_PATH_PROPERTY);    }  }  m_setupFilePath=propertyPath;  logger.info("Reading configuration from " + m_setupFilePath);  m_configProps=new AdeConfigPropertiesImpl(propertyPath);  ADE_VERSION=m_configProps.debug().getRegressionMode() ? ADE_REGRESSION_VERSION : ADE_DEPLOYMENT_VERSION;  m_directoriesManager=new AdeDirectoriesManagerImpl(m_configProps.getOutputPath(),m_configProps.getAnalysisOutputPath(),m_configProps.getTempPath());  m_userSpecifications=createUserSpecifications(m_configProps);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case EipPackage.METADATA__KEY:    return getKey();case EipPackage.METADATA__VALUES:  return getValues();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static Uri addPlaceholder(Bitmap placeholder){  Uri uri=generateUniquePlaceholderUri();  replacePlaceholder(uri,placeholder);  return uri;}  }
class C{  private void addNotificationCategory(JPanel panel,String categoryName){  addNotificationCategoryLabel(panel,"<html><b>" + categoryName + "</b></html>");  addNotificationCategorySeparator(panel);}  }
class C{  public char nextClean() throws JSONException {  int nextCleanInt=nextCleanInternal();  return nextCleanInt == -1 ? '\0' : (char)nextCleanInt;}  }
class C{  public static void assertNotEqual(long expected,long actual,double minRelativeError,String errorMessage){  if (verbose) {    log("assertNotEqual(" + expected + ", "+ actual+ ", "+ minRelativeError+ ", "+ errorMessage+ ")");  }  if (expected == actual) {    TestUtils.assertBool(false,errorMessage);  } else {    assertRelativeErrorExceeded(expected,actual,minRelativeError,errorMessage);  }}  }
class C{  public boolean startsWith(String prefix,int toffset){  return str().startsWith(prefix,toffset);}  }
class C{  protected void doFormatFile(File file,ResultCollector rc,Properties hashCache,String basedirPath,boolean dryRun) throws IOException, BadLocationException, MojoFailureException, MojoExecutionException {  Log log=getLog();  log.debug("Processing file: " + file);  String code=readFileAsString(file);  String originalHash=md5hash(code);  String canonicalPath=file.getCanonicalPath();  String path=canonicalPath.substring(basedirPath.length());  String cachedHash=hashCache.getProperty(path);  if (cachedHash != null && cachedHash.equals(originalHash)) {    rc.skippedCount++;    log.debug("File is already formatted.");    return;  }  Result result;  if (file.getName().endsWith(".java") && javaFormatter.isInitialized()) {    result=this.javaFormatter.formatFile(file,this.lineEnding,dryRun);  } else   if (file.getName().endsWith(".js") && jsFormatter.isInitialized()) {    result=this.jsFormatter.formatFile(file,this.lineEnding,dryRun);  } else {    result=Result.SKIPPED;  }switch (result) {case SKIPPED:    rc.skippedCount++;  return;case SUCCESS:rc.successCount++;break;case FAIL:rc.failCount++;return;default :break;}String formattedCode=readFileAsString(file);String formattedHash=md5hash(formattedCode);hashCache.setProperty(path,formattedHash);if (originalHash.equals(formattedHash)) {rc.skippedCount++;log.debug("Equal hash code. Not writing result to file.");return;}writeStringToFile(formattedCode,file);}  }
class C{  protected void tag(String tag,ArrayList names,ArrayList values,int nattr,boolean close){  spacing();  m_out.print('<');  m_out.print(tag);  for (int i=0; i < nattr; ++i) {    m_out.print(' ');    m_out.print((String)names.get(i));    m_out.print('=');    m_out.print('\"');    escapeString((String)values.get(i));    m_out.print('\"');  }  if (close)   m_out.print('/');  m_out.print('>');  println();  if (!close) {    m_tagStack.add(tag);  }}  }
class C{  public String branch(){  return this.branch;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:04.612 -0500",hash_original_method="AB3B4827E233BF1789642230E2C32EC4",hash_generated_method="AB3B4827E233BF1789642230E2C32EC4") void updateFromNative(){  mRS.validate();  mName=mRS.nGetName(getID());}  }
class C{  private Job createJobFromRequest(String namespaceCd,String jobName,Map<String,Object> mergedParameters,String processInstanceId){  Job job=new Job();  job.setId(processInstanceId);  job.setNamespace(namespaceCd);  job.setJobName(jobName);  if (!mergedParameters.isEmpty()) {    List<Parameter> jobParameters=new ArrayList<>();    job.setParameters(jobParameters);    for (    Map.Entry<String,Object> entry : mergedParameters.entrySet()) {      Parameter parameter=new Parameter(entry.getKey(),entry.getValue() != null ? entry.getValue().toString() : null);      jobDefinitionHelper.maskPassword(parameter);      jobParameters.add(parameter);    }  }  return job;}  }
class C{  public static double[] P(double Y[][],int j[],int x[]){  int L=j.length;  double p[]=new double[L];  for (int j_=0; j_ < L; j_++) {    p[j_]=p(Y,j[j_],x[j_]);  }  return p;}  }
class C{  public SendableTextMessage.SendableTextMessageBuilder replyTo(Message replyTo){  this.replyTo=replyTo != null ? replyTo.getMessageId() : 0;  return this;}  }
class C{  protected File createFileOnSD(String filename,long fileSize,DataType type,String subdirectory) throws IOException {  String sdPath=Environment.getExternalStorageDirectory().getPath();  StringBuilder fullPath=new StringBuilder(sdPath);  if (subdirectory != null) {    fullPath.append(File.separatorChar).append(subdirectory);  }  File file=null;  if (filename == null) {    file=File.createTempFile("DMTEST_",null,new File(fullPath.toString()));  } else {    fullPath.append(File.separatorChar).append(filename);    file=new File(fullPath.toString());    file.createNewFile();  }  DataOutputStream output=new DataOutputStream(new FileOutputStream(file));  final int CHUNK_SIZE=1000000;  long remaining=fileSize;  int nextChunkSize=CHUNK_SIZE;  byte[] randomData=null;  Random rng=new LoggingRng();  byte[] chunkSizeData=generateData(nextChunkSize,type,rng);  try {    while (remaining > 0) {      if (remaining < CHUNK_SIZE) {        nextChunkSize=(int)remaining;        remaining=0;        randomData=generateData(nextChunkSize,type,rng);      } else {        remaining-=CHUNK_SIZE;        randomData=chunkSizeData;      }      output.write(randomData);      Log.i(TAG,"while creating " + fileSize + " file, "+ "remaining bytes to be written: "+ remaining);    }  } catch (  IOException e) {    Log.e(LOG_TAG,"Error writing to file " + file.getAbsolutePath());    file.delete();    throw e;  } finally {    output.close();  }  return file;}  }
class C{  public boolean equals(ImageGraphicAttribute rhs){  if (rhs == null) {    return false;  }  if (this == rhs) {    return true;  }  if (fOriginX != rhs.fOriginX || fOriginY != rhs.fOriginY) {    return false;  }  if (getAlignment() != rhs.getAlignment()) {    return false;  }  if (!fImage.equals(rhs.fImage)) {    return false;  }  return true;}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.TANNOTATION_ARGUMENT;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case ImPackage.SYMBOL_TABLE_ENTRY__REFERENCING_ELEMENTS:    return ((InternalEList<?>)getReferencingElements()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static void sendEvent(int category,int action,int label){  sendEvent(getString(category),getString(action),getString(label));}  }
class C{  protected void runTests() throws Exception {  BreakpointEvent bpe=startToMain("ExpiredRequestDeletionTarg");  targetClass=bpe.location().declaringType();  mainThread=bpe.thread();  erm=vm().eventRequestManager();  List meths=targetClass.methodsByName("bar");  if (meths.size() != 1) {    throw new Exception("test error: should be one bar()");  }  Method barMethod=(Method)meths.get(0);  StepRequest sr=erm.createStepRequest(mainThread,StepRequest.STEP_LINE,StepRequest.STEP_OVER);  sr.addCountFilter(1);  sr.enable();  BreakpointRequest bpr=erm.createBreakpointRequest(barMethod.location());  bpr.addCountFilter(1);  bpr.enable();  listenUntilVMDisconnect();  if (!testFailed) {    println("ExpiredRequestDeletionTest: passed");  } else {    throw new Exception("ExpiredRequestDeletionTest: failed",throwable);  }}  }
class C{  @Override public void close(){  U.closeQuiet(in);}  }
class C{  public static void send(final InternalResourceManager irm,Set<InternalDistributedMember> recips,ResourceManagerProfile profile){  final DM dm=irm.getResourceAdvisor().getDistributionManager();  ResourceProfileMessage r=new ResourceProfileMessage(recips,profile);  dm.putOutgoing(r);}  }
class C{  private void updatePendingNodes(final int newLandmarkIndex,final RouterPriorityQueue<Node> pendingNodes){  final List<Double> newEstRemTravCosts=new ArrayList<>();  final List<Node> nodesToBeUpdated=new ArrayList<>();  final InternalLandmarkData landmarkData=new InternalLandmarkData();  for (  Node node : pendingNodes) {    final AStarNodeData role=getData(node);    final PreProcessLandmarks.LandmarksData ppRole=preprocess.getNodeData(node);    landmarkData.setDelegate(ppRole);    final double newEstRemTravCost=estimateRemainingTravelCost(landmarkData,newLandmarkIndex);    if (newEstRemTravCost > role.getExpectedRemainingCost()) {      nodesToBeUpdated.add(node);      newEstRemTravCosts.add(newEstRemTravCost);    }  }  for (  Node node : nodesToBeUpdated) {    pendingNodes.remove(node);  }  for (int i=0; i < nodesToBeUpdated.size(); i++) {    final Node node=nodesToBeUpdated.get(i);    final AStarNodeData data=getData(node);    data.setExpectedRemainingCost(newEstRemTravCosts.get(i));    pendingNodes.add(node,getPriority(data));  }}  }
class C{  public void vetoableChange(PropertyChangeEvent e){  log.info(e.getPropertyName() + "=" + e.getNewValue());  if (e.getPropertyName().equals("AD_Org_ID"))   m_AD_Org_ID=e.getNewValue();  if (e.getPropertyName().equals("C_BPartner_ID")) {    m_C_BPartner_ID=e.getNewValue();    fBPartner.setValue(m_C_BPartner_ID);  }  executeQuery();}  }
class C{  public boolean undefinesSome(){  return (getUndefinedRegisters().size() != 0) && (getDefinedRegisters().size() != 0);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:08.056 -0500",hash_original_method="028A0A610E31197643C52E1AA7424EFD",hash_generated_method="1A432DCE8A1D9FDC87F89E0825D717EC") public static String format(String format,Object... args){  if (args != null) {    for (int i=0; i < args.length; i++) {      if (args[i] == null) {        args[i]="null";      }    }  }  return new MessageFormat(format).format(args);}  }
class C{  public boolean isRowfill(){  return rowfill;}  }
class C{  protected static void register(Class<?> parent,String cname){  Entry e=data.get(parent);  if (e == null) {    data.put(parent,e=new Entry());  }  e.addName(cname);}  }
class C{  private static void validateArray(final Object array){  if (array == null) {    throw new IllegalArgumentException("The Array must not be null");  }  Validate.isTrue(Array.getLength(array) != 0,"Array cannot be empty.");}  }
class C{  @Override public void validate(final StatementDescription description){  IExpressionDescription ed=description.getFacet(SPECIES);  SpeciesDescription target=null;  if (ed != null) {    target=description.getType().getDenotedSpecies();    if (target == null) {      description.error(ed.toString() + " is not the description of a species",IGamlIssue.WRONG_TYPE,ed.getTarget());      return;    }    if (description.getKeyword().equals(GRID_POPULATION) && !target.isGrid()) {      description.error(target + " is not a grid",IGamlIssue.WRONG_TYPE,ed.getTarget());      return;    }  }  ed=description.getFacet(ASPECT);  if (ed != null) {    final String a=description.getLitteral(ASPECT);    if (target != null) {      if (target.getAspect(a) != null) {        ed.compileAsLabel();      } else {        description.error(a + " is not the name of an aspect of " + target.getName(),IGamlIssue.GENERAL,description.getFacet(ASPECT).getTarget());      }    }  }}  }
class C{  protected TransientMixin(String id,String displayName){  super(id,displayName,false,true,false);}  }
class C{  public Y in(X value,X... values){  if (isIngore(value)) {    return criteria;  }  if (q.isEmpty() == false) {    q.add(" AND ");  }  q.add(getColumnName()).in(getValues(value,values));  return criteria;}  }
class C{  protected void downloadFileUsingDownloadManager() throws Exception {  int downloadManagerUid=mConnectionUtil.downloadManagerUid();  assertTrue(downloadManagerUid >= 0);  NetworkStats pre_test_stats=fetchDataFromProc(downloadManagerUid);  TrafficStats.startDataProfiling(mContext);  String ts=Long.toString(System.currentTimeMillis());  String targetUrl=BandwidthTestUtil.buildDownloadUrl(mTestServer,FILE_SIZE,mDeviceId,ts);  Log.v(LOG_TAG,"Download url: " + targetUrl);  File tmpSaveFile=new File(BASE_DIR + File.separator + TMP_FILENAME);  assertTrue(mConnectionUtil.startDownloadAndWait(targetUrl,500000));  NetworkStats prof_stats=TrafficStats.stopDataProfiling(mContext);  NetworkStats post_test_stats=fetchDataFromProc(downloadManagerUid);  NetworkStats proc_stats=post_test_stats.subtract(pre_test_stats);  Log.d(LOG_TAG,prof_stats.toString());  Bundle results=new Bundle();  results.putString("device_id",mDeviceId);  results.putString("timestamp",ts);  results.putInt("size",FILE_SIZE);  AddStatsToResults(PROF_LABEL,prof_stats,results);  AddStatsToResults(PROC_LABEL,proc_stats,results);  getInstrumentation().sendStatus(INSTRUMENTATION_IN_PROGRESS,results);  assertTrue(cleanUpFile(tmpSaveFile));}  }
class C{  protected void decodeChildren(mxCodec dec,Node node,Object obj){  Node child=node.getFirstChild();  while (child != null) {    if (child.getNodeType() == Node.ELEMENT_NODE && !processInclude(dec,child,obj)) {      decodeChild(dec,child,obj);    }    child=child.getNextSibling();  }}  }
class C{  protected String form(DoubleMatrix1D matrix,int index,Former formatter){  return formatter.form(matrix.get(index));}  }
class C{  protected void selectSegment(Segment segment){  if (segment.isUnpaired()) {    for (    Segment other : segments.getPairedSegments(segment)) {      indirectSelections.put(other,segment);      selectSegment(other);    }  } else {    if (!selectedSegments.contains(segment)) {      selectedSegments.add(segment);      if (segment.getDBIDs() != null) {        unselectedObjects.removeDBIDs(segment.getDBIDs());      }    }  }}  }
class C{  private boolean excludeResultNSDecl(String prefix,String uri) throws TransformerException {  if (uri != null) {    if (uri.equals(Constants.S_XSLNAMESPACEURL) || getStylesheet().containsExtensionElementURI(uri))     return true;    if (containsExcludeResultPrefix(prefix,uri))     return true;  }  return false;}  }
class C{  public static BlinkConn newConnection(Socket socket,ReceiveListener listener) throws Exception {  return newConnection(socket,DEFAULT_SOCKET_BUFFER_SIZE,getDefaultResourcePath(),UUID.randomUUID().toString(),listener);}  }
class C{  public void invokeHookBoltAck(Tuple tuple,long processLatencyNs){  if (taskHooks.size() != 0) {    BoltAckInfo ackInfo=new BoltAckInfo(tuple,getThisTaskId(),processLatencyNs / Constants.MILLISECONDS_TO_NANOSECONDS);    for (    ITaskHook taskHook : taskHooks) {      taskHook.boltAck(ackInfo);    }  }}  }
class C{  public void deleteAsync(final String flavorId,final FutureCallback<Task> responseCallback) throws IOException {  deleteObjectAsync(flavorId,responseCallback);}  }
class C{  @Override protected void unregisterListeners(){}  }
class C{  public void testMalformedUrl(){  setParameterToInitMockMethod("my_url.com/a/b/c/index2.html",TestSolution.NOT_APPLICABLE);  SeoRule01081 test=new SeoRule01081();  test.setProcessResultDataService(mockProcessResultDataService);  test.setTest(mockTest);  ProcessResult processResult=test.processImpl(mockSspHandler);  assertEquals(mockDefiniteResult,processResult);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public int findLastCompletelyVisibleItemPosition(){  final View child=findOneVisibleChild(layoutManager.getChildCount() - 1,-1,true,false);  return child == null ? RecyclerView.NO_POSITION : recyclerView.getChildAdapterPosition(child);}  }
class C{  public boolean hasNavigtionBar(){  return mHasNavigationBar;}  }
class C{  public static String postImmediate(int WindowNo,int AD_Client_ID,int AD_Table_ID,int Record_ID,boolean force){  log.info("Window=" + WindowNo + ", AD_Table_ID="+ AD_Table_ID+ "/"+ Record_ID+ ", Force="+ force);  String error=null;  MAcctSchema[] ass=MAcctSchema.getClientAcctSchema(Env.getCtx(),AD_Client_ID);  error=Doc.postImmediate(ass,AD_Table_ID,Record_ID,force,null);  return error;}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  System.out.print("Enter a password: ");  String password=input.nextLine();  System.out.println((isValidPassword(password) ? "Valid " : "Invalid ") + "Password");}  }
class C{  public void removeTestingCallback(OneSheeldTestingCallback testingCallback){  if (testingCallback != null && testingCallbacks.contains(testingCallback))   testingCallbacks.remove(testingCallback);}  }
class C{  @Override public SortBuilder missing(Object missing){  return this;}  }
class C{  public Object addLineHighlight(int line,Color color) throws BadLocationException {  if (lineHighlightManager == null) {    lineHighlightManager=new LineHighlightManager(this);  }  return lineHighlightManager.addLineHighlight(line,color);}  }
class C{  public static int pickFromDistribution(final Object[] objs,final RandomChoiceChooser chooser,final float prob){  return pickFromDistribution(objs,chooser,prob,CHECKBOUNDARY);}  }
class C{  public boolean equals(Object other){  if (other == null || getClass() != other.getClass()) {    return false;  }  if (other == this) {    return true;  }  DefaultProperty dp=(DefaultProperty)other;  return compare(name,dp.name) && compare(displayName,dp.displayName) && compare(shortDescription,dp.shortDescription)&& compare(category,dp.category)&& compare(type,dp.type)&& editable == dp.editable;}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.ANNOTATION_ARGUMENT___VALUE:    return value();case N4JSPackage.ANNOTATION_ARGUMENT___GET_VALUE_AS_STRING:  return getValueAsString();}return super.eInvoke(operationID,arguments);}  }
class C{  protected void markFirstTime(Element elem){  String elemName=elem.getName();  if (elemName.equals("html")) {    seenHtml=true;  } else   if (elemName.equals("head")) {    seenHead=true;  } else   if (elemName.equals("body")) {    if (buf.length == 1) {      char[] newBuf=new char[256];      newBuf[0]=buf[0];      buf=newBuf;    }    seenBody=true;  }}  }
class C{  public void searchNextFrame(){  while (in.remaining() > 1) {    int ch=in.get() & 0xff;    if (ch != 0xff) {      continue;    }    if ((in.get() & 0xe0) == 0xe0) {      in.position(in.position() - 2);      return;    }  }}  }
class C{  public void print(boolean x){  out.print(x);  out.flush();}  }
class C{  public static UPSCoord fromLatLon(Angle latitude,Angle longitude){  return fromLatLon(latitude,longitude,null);}  }
class C{  @Override public void paintIcon(final Component c,final Graphics g,final int x,final int y){  g.setColor(c.getForeground());  g.setFont(c.getFont());  if (fRotation == ROTATE_NONE) {    int yPos=y + fCharHeight;    for (int i=0; i < fCharStrings.length; i++) {      final int tweak;switch (fPosition[i]) {case POSITION_NORMAL:        g.drawString(fCharStrings[i],x + ((fWidth - fCharWidths[i]) / 2),yPos);      break;case POSITION_TOP_RIGHT:    tweak=fCharHeight / 3;  g.drawString(fCharStrings[i],x + (tweak / 2),yPos - tweak);break;case POSITION_FAR_TOP_RIGHT:tweak=fCharHeight - fCharHeight / 3;g.drawString(fCharStrings[i],x + (tweak / 2),yPos - tweak);break;}yPos+=fCharHeight;}} else if (fRotation == ROTATE_LEFT) {g.translate(x + fWidth,y + fHeight);((Graphics2D)g).rotate(-NINETY_DEGREES);g.drawString(fLabel,kBufferSpace,-fDescent);((Graphics2D)g).rotate(NINETY_DEGREES);g.translate(-(x + fWidth),-(y + fHeight));} else if (fRotation == ROTATE_RIGHT) {g.translate(x,y);((Graphics2D)g).rotate(NINETY_DEGREES);g.drawString(fLabel,kBufferSpace,-fDescent);((Graphics2D)g).rotate(-NINETY_DEGREES);g.translate(-x,-y);}}  }
class C{  @Override public void respond(String response){  getBot().sendRaw().rawLine(response);}  }
class C{  private static void placePhiFunctions(SsaMethod ssaMeth,LocalVariableInfo localInfo,int threshold){  ArrayList<SsaBasicBlock> ssaBlocks;  int regCount;  int blockCount;  ssaBlocks=ssaMeth.getBlocks();  blockCount=ssaBlocks.size();  regCount=ssaMeth.getRegCount() - threshold;  DomFront df=new DomFront(ssaMeth);  DomFront.DomInfo[] domInfos=df.run();  BitSet[] defsites=new BitSet[regCount];  BitSet[] phisites=new BitSet[regCount];  for (int i=0; i < regCount; i++) {    defsites[i]=new BitSet(blockCount);    phisites[i]=new BitSet(blockCount);  }  for (int bi=0, s=ssaBlocks.size(); bi < s; bi++) {    SsaBasicBlock b=ssaBlocks.get(bi);    for (    SsaInsn insn : b.getInsns()) {      RegisterSpec rs=insn.getResult();      if (rs != null && rs.getReg() - threshold >= 0) {        defsites[rs.getReg() - threshold].set(bi);      }    }  }  if (DEBUG) {    System.out.println("defsites");    for (int i=0; i < regCount; i++) {      StringBuilder sb=new StringBuilder();      sb.append('v').append(i).append(": ");      sb.append(defsites[i].toString());      System.out.println(sb);    }  }  BitSet worklist;  for (int reg=0, s=regCount; reg < s; reg++) {    int workBlockIndex;    worklist=(BitSet)(defsites[reg].clone());    while (0 <= (workBlockIndex=worklist.nextSetBit(0))) {      worklist.clear(workBlockIndex);      IntIterator dfIterator=domInfos[workBlockIndex].dominanceFrontiers.iterator();      while (dfIterator.hasNext()) {        int dfBlockIndex=dfIterator.next();        if (!phisites[reg].get(dfBlockIndex)) {          phisites[reg].set(dfBlockIndex);          int tReg=reg + threshold;          RegisterSpec rs=localInfo.getStarts(dfBlockIndex).get(tReg);          if (rs == null) {            ssaBlocks.get(dfBlockIndex).addPhiInsnForReg(tReg);          } else {            ssaBlocks.get(dfBlockIndex).addPhiInsnForReg(rs);          }          if (!defsites[reg].get(dfBlockIndex)) {            worklist.set(dfBlockIndex);          }        }      }    }  }  if (DEBUG) {    System.out.println("phisites");    for (int i=0; i < regCount; i++) {      StringBuilder sb=new StringBuilder();      sb.append('v').append(i).append(": ");      sb.append(phisites[i].toString());      System.out.println(sb);    }  }}  }
class C{  public final void error(Object message,Throwable t){  if (isLevelEnabled(SimpleLog.LOG_LEVEL_ERROR)) {    log(SimpleLog.LOG_LEVEL_ERROR,message,t);  }}  }
class C{  protected void createShapes(DrawContext dc){  this.paths=new Path[3];  Position baseMidpoint=new Position(LatLon.interpolate(0.5,this.position2,this.position3),0);  this.paths[0]=this.createPath(Arrays.asList(baseMidpoint,this.position1));  List<Position> positions=this.computeArrowheadPositions(dc,baseMidpoint,this.position1);  this.paths[1]=createPath(positions);  positions=this.computeBasePositions(dc,this.position2,this.position3,this.position1);  this.paths[2]=createPath(positions);}  }
class C{  protected Serializable extractRowValue(int type,ResultSet rowValues,String columnName) throws Exception {switch (type) {case java.sql.Types.BIT:case java.sql.Types.BOOLEAN:{      return rowValues.getBoolean(columnName);    }case java.sql.Types.CHAR:case java.sql.Types.VARCHAR:case java.sql.Types.LONGVARCHAR:case java.sql.Types.NCHAR:case java.sql.Types.NVARCHAR:case java.sql.Types.LONGNVARCHAR:case java.sql.Types.NCLOB:case java.sql.Types.CLOB:{    return rowValues.getString(columnName);  }case java.sql.Types.TINYINT:case java.sql.Types.SMALLINT:case java.sql.Types.INTEGER:{  return rowValues.getInt(columnName);}case java.sql.Types.FLOAT:{return rowValues.getFloat(columnName);}case java.sql.Types.DOUBLE:{return rowValues.getDouble(columnName);}case java.sql.Types.REAL:{return rowValues.getFloat(columnName);}case java.sql.Types.DECIMAL:case java.sql.Types.NUMERIC:{return rowValues.getBigDecimal(columnName);}case java.sql.Types.TIMESTAMP:{return java.sql.Timestamp.valueOf(rowValues.getString(columnName));}case java.sql.Types.DATE:{return java.sql.Date.valueOf(rowValues.getString(columnName));}case java.sql.Types.TIME:{return java.sql.Time.valueOf(rowValues.getString(columnName));}case java.sql.Types.BINARY:case java.sql.Types.VARBINARY:case java.sql.Types.LONGVARBINARY:case java.sql.Types.BLOB:{throw new Exception("THL loader does not yet support binary data");}case java.sql.Types.NULL:case java.sql.Types.BIGINT:case java.sql.Types.OTHER:case java.sql.Types.JAVA_OBJECT:case java.sql.Types.DISTINCT:case java.sql.Types.STRUCT:case java.sql.Types.ARRAY:case java.sql.Types.REF:case java.sql.Types.DATALINK:case java.sql.Types.ROWID:case java.sql.Types.SQLXML:{throw new Exception("unsupported data type " + type);}default :{throw new Exception("unknown data type " + type);}}}  }
class C{  public CCriteriaDialog(final JFrame owner,final CCriteriaFactory conditionFactory){  super(owner,"Select by Criteria",true);  Preconditions.checkNotNull(conditionFactory,"IE01315: Condition factory argument can not be null");  final List<ICriteriumCreator> criteria=conditionFactory.getConditions();  m_jtree=new JCriteriumTree(m_ctree,criteria);  final CConditionBox selectionBox=new CConditionBox(criteria);  final CAddConditionButtonListener addConditionButtonListner=new CAddConditionButtonListener(m_jtree,m_ctree,selectionBox);  final JButton addConditionButton=new JButton(addConditionButtonListner);  final CPanelTwoButtons okCancelPanel=new CPanelTwoButtons(new InternalOkCancelButttonListener(),"Execute","Cancel");  final JPanel defineConditionPanel=new JPanel(new BorderLayout());  initDialog(m_jtree,selectionBox,defineConditionPanel,okCancelPanel,addConditionButton);  GuiHelper.centerChildToParent(owner,this,true);  m_updater=new CDialogUpdater(m_jtree,m_ctree,defineConditionPanel,addConditionButton,okCancelPanel.getFirstButton());}  }
class C{  public static void init(MonitorAgentProvider implementation){  MonitorAgent.monitorAgentImpl=implementation;}  }
class C{  public static String toString(Object value){  return InvokerHelper.toString(value);}  }
class C{  @Override public void readNdefMessage(Message message){  if (message.size() > 1) {    toast(getString(R.string.readMultipleRecordNDEFMessage));  } else {    toast(getString(R.string.readSingleRecordNDEFMessage));  }  this.message=message;  Log.d(TAG,"Found " + message.size() + " NDEF records");  for (int k=0; k < message.size(); k++) {    Record record=message.get(k);    Log.d(TAG,"Record " + k + " type "+ record.getClass().getSimpleName());    if (record instanceof MimeRecord) {    } else     if (record instanceof ExternalTypeRecord) {    } else     if (record instanceof TextRecord) {    } else {    }  }  showList();}  }
class C{  protected float mapPoint(float x,float sourceStart,float sourceEnd,float targetStart,float targetEnd){  if (x <= sourceStart) {    return targetStart;  }  if (x >= sourceEnd) {    return targetEnd;  }  return (x - sourceStart) / (sourceEnd - sourceStart) * (targetEnd - targetStart) + targetStart;}  }
class C{  public URLExt(URL url,boolean is_directory){  this(url,is_directory,null);}  }
class C{  public SHACLSuggestionGenerator createSuggestionGenerator(Model dataModel,Model shapesModel){  return null;}  }
class C{  public synchronized void insertChannelAssignment(String shardId,int channel) throws ReplicatorException {  assertActive();  try {    channelTable.insert(getConnection(),shardId,channel);    if (channel > maxChannel)     maxChannel=channel;    assignments.put(shardId,channel);  } catch (  SQLException e) {    throw new ReplicatorException("Unable to access channel assignment table; ensure it is defined",e);  }}  }
class C{  public NewExpression createNewExpression(){  NewExpressionImpl newExpression=new NewExpressionImpl();  return newExpression;}  }
class C{  protected BreakIterator parseBreakIterator(String type,Locale locale){  if (type == null || "SENTENCE".equals(type)) {    return BreakIterator.getSentenceInstance(locale);  } else   if ("LINE".equals(type)) {    return BreakIterator.getLineInstance(locale);  } else   if ("WORD".equals(type)) {    return BreakIterator.getWordInstance(locale);  } else   if ("CHARACTER".equals(type)) {    return BreakIterator.getCharacterInstance(locale);  } else   if ("WHOLE".equals(type)) {    return new WholeBreakIterator();  } else {    throw new IllegalArgumentException("Unknown " + HighlightParams.BS_TYPE + ": "+ type);  }}  }
class C{  @NotNull @Override public Object[] toArray(){  Object[] elements=array;  if (elements.length == 0)   return ArrayUtilRt.EMPTY_OBJECT_ARRAY;  return Arrays.copyOf(elements,elements.length,Object[].class);}  }
class C{  public void testUnsizedLongsCount(){  LongAdder counter=new LongAdder();  Random r=new Random();  long size=100;  r.longs().limit(size).parallel().forEach(null);  assertEquals(counter.sum(),size);}  }
class C{  protected BaseInterval(long startInstant,long endInstant,Chronology chrono){  super();  iChronology=DateTimeUtils.getChronology(chrono);  checkInterval(startInstant,endInstant);  iStartMillis=startInstant;  iEndMillis=endInstant;}  }
class C{  public boolean canConnect(){  try {    wake();    ClientSocket stream=open();    if (stream != null) {      stream.free(stream.getIdleStartTime());      return true;    }    return false;  } catch (  Exception e) {    log.log(Level.FINER,e.toString(),e);    return false;  }}  }
class C{  public String openExternal(String url){  try {    Intent intent=null;    intent=new Intent(Intent.ACTION_VIEW);    Uri uri=Uri.parse(url);    if ("file".equals(uri.getScheme())) {      intent.setDataAndType(uri,webView.getResourceApi().getMimeType(uri));    } else {      intent.setData(uri);    }    this.cordova.getActivity().startActivity(intent);    return "";  } catch (  android.content.ActivityNotFoundException e) {    Log.d(LOG_TAG,"InAppBrowser: Error loading url " + url + ":"+ e.toString());    return e.toString();  }}  }
class C{  @Override public void doRun(int run) throws Exception {  if (getRawOutput()) {    if (m_ZipDest == null) {      m_ZipDest=new OutputZipper(m_OutputFile);    }  }  if (m_Instances == null) {    throw new Exception("No Instances set");  }  int fold=(run - 1) % m_NumFolds;  run=((run - 1) / m_NumFolds) + 1;  Instances runInstances=new Instances(m_Instances);  Random random=new Random(run);  runInstances.randomize(random);  if (runInstances.classAttribute().isNominal()) {    runInstances.stratify(m_NumFolds);  }  Object[] seKey=m_SplitEvaluator.getKey();  Object[] key=new Object[seKey.length + 3];  key[0]=Utils.backQuoteChars(m_Instances.relationName());  key[1]="" + run;  key[2]="" + (fold + 1);  System.arraycopy(seKey,0,key,3,seKey.length);  if (m_ResultListener.isResultRequired(this,key)) {    for (int tempFold=0; tempFold < fold; tempFold++) {      runInstances.trainCV(m_NumFolds,tempFold,random);    }    Instances train=runInstances.trainCV(m_NumFolds,fold,random);    Instances test=runInstances.testCV(m_NumFolds,fold);    try {      Object[] seResults=m_SplitEvaluator.getResult(train,test);      Object[] results=new Object[seResults.length + 1];      results[0]=getTimestamp();      System.arraycopy(seResults,0,results,1,seResults.length);      if (m_debugOutput) {        String resultName=("" + run + "."+ (fold + 1)+ "."+ Utils.backQuoteChars(runInstances.relationName())+ "."+ m_SplitEvaluator.toString()).replace(' ','_');        resultName=Utils.removeSubstring(resultName,"weka.classifiers.");        resultName=Utils.removeSubstring(resultName,"weka.filters.");        resultName=Utils.removeSubstring(resultName,"weka.attributeSelection.");        m_ZipDest.zipit(m_SplitEvaluator.getRawResultOutput(),resultName);      }      m_ResultListener.acceptResult(this,key,results);    } catch (    Exception ex) {      throw ex;    }  }}  }
class C{  public NamedThreadPoolExecutor(String poolName,int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,BlockingQueue<Runnable> queue,ThreadFactory factory){  super(corePoolSize,maximumPoolSize,keepAliveTime,unit,queue,new NamedThreadFactory(poolName,factory));  setPoolName(poolName);}  }
class C{  @Override protected void load(){  if (!this.getWorld().isRemote) {    for (    EnvironmentEvent event : this.environmentEventRegistry.getEvents().values()) {      event.readFromNBT(this.getData());    }    this.environmentEventRegistry.setDisabled(this.getData().getBoolean("eventsDisabled"));    this.aspectManager.loadAndPopulateStaticAspects(this.getData().getCompoundTag("itemAspects"),AspectManager.getAspectsSeed(this.getWorld().getWorldInfo().getSeed()));  }}  }
class C{  public SWFText tagDefineText2(int id,Rect bounds,Matrix matrix) throws IOException {  lastBounds=curBounds;  curBounds=bounds;  return new TextDumper();}  }
class C{  public double remove(double key){  double prev=0;  int index=index(key);  if (index >= 0) {    prev=_values[index];    removeAt(index);  }  return prev;}  }
class C{  public static Builder builder(ConnectRequest request){  return new Builder(request);}  }
class C{  public IoBufferDecoder(byte[] delimiter){  setDelimiter(delimiter,true);}  }
class C{  public static Gamepad logitechF310(int port){  Joystick joystick=new Joystick(port);  return Gamepad.create(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);}  }
class C{  public void consumeAllTokens() throws IOException {  while (incrementToken()) {  }}  }
class C{  public void addBounds(Rectangle2D bounds){  this.bounds.add(bounds);}  }
class C{  protected void print(double v) throws IOException {  print(String.valueOf(v));}  }
class C{  public static void async(Activity act,Context context,ImageView iv,String url,Object progress,AccountHandle ah,ImageOptions options,HttpHost proxy,String networkUrl){  async(act,context,iv,url,options.memCache,options.fileCache,options.targetWidth,options.fallback,options.preset,options.animation,options.ratio,options.anchor,progress,ah,options.policy,options.round,proxy,networkUrl);}  }
class C{  public boolean hasHeaders(){  return getListView().getVisibility() == View.VISIBLE && mPreferenceManager == null;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case EipPackage.SPLITTER__NAME:    setName(NAME_EDEFAULT);  return;case EipPackage.SPLITTER__TO_CHANNELS:getToChannels().clear();return;case EipPackage.SPLITTER__FROM_CHANNELS:getFromChannels().clear();return;}super.eUnset(featureID);}  }
class C{  private void scrollToChild(View child){  child.getDrawingRect(mTempRect);  offsetDescendantRectToMyCoords(child,mTempRect);  int scrollDeltaV=computeScrollDeltaToGetChildRectOnScreenV(mTempRect);  int scrollDeltaH=computeScrollDeltaToGetChildRectOnScreenH(mTempRect);  if (scrollDeltaH != 0 || scrollDeltaV != 0) {    scrollBy(scrollDeltaH,scrollDeltaV);  }}  }
class C{  public static ExtensionRegistryLite newInstance(){  return new ExtensionRegistryLite();}  }
class C{  public boolean isReply(){  return reply;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList nameList;  doc=(Document)load("staff",false);  nameList=doc.getElementsByTagName("*");  if (("image/svg+xml".equals(getContentType()))) {    assertSize("elementCountSVG",39,nameList);  } else {    assertSize("documentGetElementsByTagNameTotalLengthAssert",37,nameList);  }}  }
class C{  public Integer onLoadData32(byte[] ioPage,int addr,int value,DebuggableMemory.AccessSource accessSource){  if (addr >= REGISTER_TMRLRA0_32 && addr < (REGISTER_TMRLRA0_32 + NUM_TIMER32 * TIMER32_OFFSET)) {    int channel;    channel=(addr - REGISTER_TMRLRA0_32) / TIMER32_OFFSET;    addr-=(channel * TIMER32_OFFSET);    channel+=NUM_TIMER;switch (addr) {case REGISTER_TMRLRA0_32:      return ((FrReloadTimer32)platform.getProgrammableTimers()[channel]).getTmrlra();case REGISTER_TMR0_32:    return ((FrReloadTimer32)platform.getProgrammableTimers()[channel]).getTmr();default :  stop("Warning: ignoring attempt to write 32-bit register in 32-bit Timer");}} else if (addr == REGISTER_EIRR0 || addr == REGISTER_EIRR1) {FrInterruptController interruptController=(FrInterruptController)platform.getInterruptController();int unit=(addr == REGISTER_EIRR1 ? 1 : 0);return ((interruptController.getEirr(unit) << 24) | (interruptController.getEnir(unit) << 16) | interruptController.getElvr(unit));} else {switch (addr) {case REGISTER_DIVR0:case REGISTER_DIVR1:case REGISTER_DIVR2:stop("Warning: reading DIVR registers by 32bit is not supported");}}if (logRegisterMessages) warn("Register 0x" + Format.asHex(addr,8) + ": Load32 is not supported yet");return null;}  }
class C{  public void add(LogLine object){  if (mOriginalValues != null) {synchronized (mLock) {      mOriginalValues.add(object);      mObjects.add(object);      if (mNotifyOnChange)       notifyDataSetChanged();    }  } else {    mObjects.add(object);    if (mNotifyOnChange)     notifyDataSetChanged();  }}  }
class C{  public int count(){  return m_extFlds.size();}  }
class C{  private void recordVirtualPoolEvent(String type,String description,URI vpool){  RecordableBourneEvent event=new RecordableBourneEvent(type,null,URI.create("ViPR-User"),null,vpool,EVENT_SERVICE_TYPE,vpool,description,System.currentTimeMillis(),"",null,RecordType.Event.name(),EVENT_SERVICE_SOURCE,"","");  try {    _evtMgr.recordEvents(event);  } catch (  Exception ex) {    _log.error("Failed to record event. Event description: {}. Error: {}.",description,ex);  }}  }
class C{  public synchronized void disconnect(ITLCOutputListener listener){  Assert.isNotNull(listener);  ITLCOutputSource source=this.sources.get(listener.getModel());  if (source != null) {    source.removeTLCOutputListener(listener);  }  printStats();}  }
class C{  public static final Criterion and(List<Criterion> criteria){  return new ConjunctionCriterion(Conjunction.AND,criteria);}  }
class C{  public Principal findUser(String tenantName,String user) throws NoSuchTenantException, NoSuchIdpException, InvalidPrincipalException, Exception {  return getService().findUser(tenantName,user,this.getServiceContext());}  }
class C{  public void testIllegalOccur(){  Random random=random();  expectThrows(IllegalArgumentException.class,null);  expectThrows(IllegalArgumentException.class,null);}  }
class C{  public void correctTo(Dibit stateDibit){  if (mCorrect && mConstellation.getState() == stateDibit) {    return;  }  if (isCurrentConnectionCorrect()) {    mConstellation=Constellation.fromStateAndInputDibits(stateDibit,mConstellation.getInput());    mCorrect=true;    if (mConnectedNode != null) {      mConnectedNode.correctTo(mConstellation.getInput());    }  } else {    Constellation cheapestConstellation=mConstellation;    int cheapestCost=100;    for (    Dibit testInput : Dibit.values()) {      Constellation testConstellation=Constellation.fromStateAndInputDibits(stateDibit,testInput);      int testCost=mConstellation.costTo(testConstellation) + mConnectedNode.costTo(testInput);      if (testCost < cheapestCost) {        cheapestCost=testCost;        cheapestConstellation=testConstellation;      }    }    mConstellation=cheapestConstellation;    mConnectedNode.correctTo(mConstellation.getInput());    mCorrect=true;  }}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  sb.append(String.format("======= Composition : %s =======%n",this.compositionPlaylistType.getId()));  sb.append(this.compositionPlaylistType.getEditRate().toString());  return sb.toString();}  }
class C{  public boolean mkdirs(){  if (exists()) {    return false;  }  if (mkdir()) {    return true;  }  File canonFile=null;  try {    canonFile=getCanonicalFile();  } catch (  IOException e) {    return false;  }  File parent=canonFile.getParentFile();  return (parent != null && (parent.mkdirs() || parent.exists()) && canonFile.mkdir());}  }
class C{  public boolean selectSingleNode(D nodeData){  if ((selectedNodes.size() == 1) && (selectedNodes.get(0).equals(nodeData))) {    return false;  }  clearSelections();  insertAndSelectNode(nodeData,0,true);  return true;}  }
class C{  private void writeObject(java.io.ObjectOutputStream out) throws IOException {  out.defaultWriteObject();  Set roleNames=new HashSet(this.failedRoles.size());  for (Iterator iter=this.failedRoles.iterator(); iter.hasNext(); ) {    String name=((Role)iter.next()).getName();    roleNames.add(name);  }  out.writeObject(roleNames);}  }
class C{  private static void loadDirectionNumbers() throws IOException {  BufferedReader reader=null;  try {    reader=new BufferedReader(new InputStreamReader(Sobol.class.getResourceAsStream(DIRECTIONS_RESOURCE)));    List<int[]> directions=new ArrayList<int[]>();    String line=reader.readLine();    while ((line=reader.readLine()) != null) {      StringTokenizer tokenizer=new StringTokenizer(line);      tokenizer.nextToken();      int s=Integer.parseInt(tokenizer.nextToken());      int[] d=new int[s + 1];      d[0]=Integer.parseInt(tokenizer.nextToken());      for (int i=1; i <= s; i++) {        d[i]=Integer.parseInt(tokenizer.nextToken());      }      directions.add(d);    }    Sobol.DIRECTIONS=directions.toArray(new int[0][0]);  }  finally {    if (reader != null) {      reader.close();    }  }}  }
class C{  public boolean isRtl(){  return builder.context.getResources().getBoolean(R.bool.wel_is_rtl);}  }
class C{  @ObjectiveCName("onDialogsOpen") public void onDialogsOpen(){  modules.getEvents().post(new DialogsOpened());}  }
class C{  @Override public List<InitJobRowInfo> execute(String[] params){  List<InitJobRowInfo> initJobRowInfos=new ArrayList<InitJobRowInfo>();  try {    InitJobRowInfo initJobInfo=new InitJobRowInfo();    CommandLine commandLine=getCommandLine(params,PARAMS_STRUCTURE);    String pid=commandLine.getOptionValue("process-id");    LOGGER.debug("processId is " + pid);    String maxBId=commandLine.getOptionValue("max-batch");    LOGGER.debug("maxBatch is " + maxBId);    initJobInfo.setProcessId(Integer.parseInt(pid));    initJobInfo.setMaxBatch(Integer.parseInt(maxBId));    initJobRowInfos=jobDAO.initJob(initJobInfo.getProcessId(),initJobInfo.getMaxBatch());    return initJobRowInfos;  } catch (  Exception e) {    LOGGER.error("Error occurred",e);    throw new MetadataException(e);  }}  }
class C{  public boolean isEmpty(){  return sortedEvents.isEmpty();}  }
class C{  @Override protected void drawNeedle(Graphics2D g2,Rectangle2D plotArea,Point2D rotate,double angle){  Area shape;  GeneralPath pointer=new GeneralPath();  int minY=(int)(plotArea.getMinY());  int maxY=(int)(plotArea.getMaxY());  int midX=(int)(plotArea.getMinX() + (plotArea.getWidth() / 2));  int lenX=(int)(plotArea.getWidth() / 10);  if (lenX < 2) {    lenX=2;  }  pointer.moveTo(midX - lenX,maxY - lenX);  pointer.lineTo(midX + lenX,maxY - lenX);  pointer.lineTo(midX,minY + lenX);  pointer.closePath();  lenX=4 * lenX;  Ellipse2D circle=new Ellipse2D.Double(midX - lenX / 2,plotArea.getMaxY() - lenX,lenX,lenX);  shape=new Area(circle);  shape.add(new Area(pointer));  if ((rotate != null) && (angle != 0)) {    getTransform().setToRotation(angle,rotate.getX(),rotate.getY());    shape.transform(getTransform());  }  defaultDisplay(g2,shape);}  }
class C{  public void deleteNode(String sName) throws Exception {  int nTargetNode=getNode(sName);  deleteNode(nTargetNode);}  }
class C{  public boolean forEachKey(TIntProcedure procedure){  return forEach(procedure);}  }
class C{  public BlockDifficulty(final long difficulty){  this(difficulty,true);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public DateOrDateTimeProperty(Date value){  this(value,true);}  }
class C{  public ConcurrentSkipListPriorityQueue(Comparator<? super E> comparator){  this.comparator=comparator;  initialize();}  }
class C{  public static boolean createBucketIfNotExists(String bucket,String region){  if (getS3Client().doesBucketExist(bucket)) {    return false;  }  getS3Client().createBucket(new CreateBucketRequest(bucket,region));  return true;}  }
class C{  public void testWrite5() throws Exception {  Cipher cf=Cipher.getInstance("DES/CBC/PKCS5Padding");  NullCipher nc=new NullCipher();  CipherOutputStream stream1=new CipherOutputStream(new BufferedOutputStream((OutputStream)null),nc);  CipherOutputStream stream2=new CipherOutputStream(stream1,cf);  CipherOutputStream stream3=new CipherOutputStream(stream2,nc);  stream3.write(new byte[]{0},0,0);}  }
class C{  public long optLong(int index){  return this.optLong(index,0);}  }
class C{  public Builder ttl(long duration,TimeUnit timeUnit){  this.ttl=timeUnit.toSeconds(duration);  return this;}  }
class C{  protected void revalidate(){  valid=true;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  protected static void regressionTest(IntrinsicDimensionalityEstimator est,int dim,int size,long seed,double edim){  Random r=new Random(seed);  final int zeros=100;  double[] data=new double[size + zeros];  final double p=1. / dim;  for (int i=0; i < size; i++) {    data[i]=Math.pow(r.nextDouble(),p);  }  Arrays.sort(data);  assertEquals("Accuracy of " + est.getClass().getSimpleName(),edim,est.estimate(Arrays.copyOfRange(data,zeros,data.length)),1e-8);  assertEquals("Accuracy of " + est.getClass().getSimpleName(),edim,est.estimate(data),1e-8);}  }
class C{  public int[] toArray(){  int[] value=new int[_size];  System.arraycopy(_data,0,value,0,_size);  return value;}  }
class C{  public NotificationChain basicSetDeclaredThisType(TypeRef newDeclaredThisType,NotificationChain msgs){  TypeRef oldDeclaredThisType=declaredThisType;  declaredThisType=newDeclaredThisType;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,TypesPackage.FIELD_ACCESSOR__DECLARED_THIS_TYPE,oldDeclaredThisType,newDeclaredThisType);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  private void sendMessage(BeanMessageID type,Buffer payload){  Buffer buffer=new Buffer();  buffer.writeByte((type.getRawValue() >> 8) & 0xff);  buffer.writeByte(type.getRawValue() & 0xff);  if (payload != null) {    try {      buffer.writeAll(payload);    } catch (    IOException e) {      throw new RuntimeException(e);    }  }  GattSerialMessage serialMessage=GattSerialMessage.fromPayload(buffer.readByteArray());  gattClient.getSerialProfile().sendMessage(serialMessage.getBuffer());}  }
class C{  public SelectionEvent(Object selection,int id,Shape highlightShape){  this.id=id;  this.selection=selection;  this.highlightShape=highlightShape;}  }
class C{  public void unregisterReceiver(BroadcastReceiver receiver){synchronized (mReceivers) {    ArrayList<IntentFilter> filters=mReceivers.remove(receiver);    if (filters == null) {      return;    }    for (int i=0; i < filters.size(); i++) {      IntentFilter filter=filters.get(i);      for (int j=0; j < filter.countActions(); j++) {        String action=filter.getAction(j);        ArrayList<ReceiverRecord> receivers=mActions.get(action);        if (receivers != null) {          for (int k=0; k < receivers.size(); k++) {            if (receivers.get(k).receiver == receiver) {              receivers.remove(k);              k--;            }          }          if (receivers.size() <= 0) {            mActions.remove(action);          }        }      }    }  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.813 -0400",hash_original_method="7AEF2C3B62C677DC9FD1211BE4D4F4EB",hash_generated_method="112EB2C413E4179B843715E34640BB86") @Override public synchronized void mark(int readlimit){  if (!markSupported) {    throw new UnsupportedOperationException("Mark not supported");  }  mark=position;  this.readlimit=readlimit;}  }
class C{  public PartitionAttributesFactory<K,V> addPartitionListener(PartitionListener listener){  if (listener == null) {    throw new IllegalArgumentException(LocalizedStrings.PartitionAttributesFactory_PARTITION_LISTENER_PARAMETER_WAS_NULL.toLocalizedString());  }synchronized (this.partitionAttributes) {    this.partitionAttributes.addPartitionListener(listener);  }  return this;}  }
class C{  public static X509Certificate createCertificate() throws IOException {  try (InputStream cert=TestUtils.class.getResourceAsStream("/cert.pem")){    CertificateFactory certificateFactory=CertificateFactory.getInstance("X.509");    return (X509Certificate)certificateFactory.generateCertificate(cert);  } catch (  CertificateException ex) {    throw new IOException(ex);  }}  }
class C{  public void update(byte input){  digest.update(input);}  }
class C{  public NonNumericFeaturesException(){  super();}  }
class C{  private Supplier<Pair<Integer,JsonNode>> handleAddOp(String path,JsonNode patchValue,PatchRequestScope requestScope,PatchAction action){  try {    JsonApiDocument value=requestScope.getMapper().readJsonApiPatchExtValue(patchValue);    Data<Resource> data=value.getData();    if (data == null || data.get() == null) {      throw new InvalidEntityBodyException("Expected an entity body but received none.");    }    Collection<Resource> resources=data.get();    if (!path.contains("relationships")) {      String id=getSingleResource(resources).getId();      String fullPath=path + "/" + id;      getSingleResource(resources).setRelationships(null);      action.doc=requestScope.getMapper().readJsonApiPatchExtValue(patchValue);      action.path=fullPath;      action.isPostProcessing=true;    }    PostVisitor visitor=new PostVisitor(new PatchRequestScope(path,value,requestScope));    return visitor.visit(Elide.parse(path));  } catch (  HttpStatusException e) {    action.cause=e;    throw e;  }catch (  IOException e) {    throw new InvalidEntityBodyException("Could not parse patch extension value: " + patchValue);  }}  }
class C{  public Vector3 crs(float x,float y,float z){  return this.set(this.y * z - this.z * y,this.z * x - this.x * z,this.x * y - this.y * x);}  }
class C{  public static String encodeBytes(byte[] source,int off,int len){  String encoded=null;  try {    encoded=encodeBytes(source,off,len,NO_OPTIONS);  } catch (  java.io.IOException ex) {    assert false : ex.getMessage();  }  assert encoded != null;  return encoded;}  }
class C{  public JSONObject put(String key,boolean value) throws JSONException {  this.put(key,value ? Boolean.TRUE : Boolean.FALSE);  return this;}  }
class C{  public void mouseMoved(MouseEvent e){}  }
class C{  public CustomPopupWindow(View contentView,int width,int height,int animationStyleId){  mContentView=contentView;  mWidth=width;  mHeight=height;  mAnimationId=animationStyleId;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public int read() throws IOException {  return read(tempBuf,0,1) == -1 ? -1 : (tempBuf[0] & 0xFF);}  }
class C{  @Override public void execute(StepInstance stepInstance,String temporaryFileDirectory){  LOGGER.info("Starting step with Id " + this.getId());  InputStream stream=null;  try {    final String outputFilePath=stepInstance.buildFullyQualifiedFilePath(temporaryFileDirectory,outputFileNameTemplate);    stream=new FileInputStream(outputFilePath);    Set<TMHMMProtein> proteins=parser.parse(stream);    TMHMMMatch represantiveRawMatch=null;    int locationCount=0;    for (    final TMHMMProtein tmhmmProtein : proteins) {      locationCount+=tmhmmProtein.getMatches().size();      if (represantiveRawMatch == null) {        if (tmhmmProtein.getMatches().size() > 0) {          represantiveRawMatch=tmhmmProtein.getMatches().iterator().next();        }      }    }    if (LOGGER.isDebugEnabled()) {      LOGGER.debug("TMHMM: Retrieved " + proteins.size() + " proteins.");      LOGGER.debug("TMHHM: A total of " + locationCount + " locations found.");    }    int count=locationCount;    LOGGER.info("Persisting parsed matches...");    filteredMatchDAO.persist(proteins);    Long now=System.currentTimeMillis();    if (count > 0) {      int waitTimeFactor=Utilities.getWaitTimeFactor(count).intValue();      if (represantiveRawMatch != null) {        Utilities.verboseLog("represantiveRawMatch :" + represantiveRawMatch.toString());        Utilities.sleep(waitTimeFactor * 1000);      } else {        LOGGER.warn("Check if Raw matches committed " + count + " rm: "+ represantiveRawMatch);        Utilities.verboseLog("Check if Raw matches committed " + count + " rm: "+ represantiveRawMatch);      }      Long timeTaken=System.currentTimeMillis() - now;      Utilities.verboseLog("ParseStep: count: " + count + " represantiveRawMatch : "+ represantiveRawMatch.toString()+ " time taken: "+ timeTaken);    }  } catch (  IOException e) {    throw new IllegalStateException("IOException thrown when attempting to parse Panther file " + outputFileNameTemplate,e);  } finally {    if (stream != null) {      try {        stream.close();      } catch (      IOException e) {        LOGGER.error("Unable to close connection to the Panther output file located at " + outputFileNameTemplate,e);      }    }  }  LOGGER.info("Step with Id " + this.getId() + " finished.");}  }
class C{  public Vec2 toPoint(Point2D p){  return new Vec2(toMeters(p.getX()),toMeters(appHeight - p.getY()));}  }
class C{  @Override public void initializeActiveSlotsList(final List<String> list){  this.activeSlotsList=list;  if (logger.isDebugEnabled() || Testing.DEBUG) {    logger.info("SlotActivatedItem: Initializing active slots list");    if (this.activeSlotsList == null) {      logger.error("Could not initialize active slots list");    }  }}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == ExportableElement.class) {switch (baseOperationID) {case N4JSPackage.EXPORTABLE_ELEMENT___IS_EXPORTED:      return N4JSPackage.EXPORTED_VARIABLE_STATEMENT___IS_EXPORTED;case N4JSPackage.EXPORTABLE_ELEMENT___IS_EXPORTED_AS_DEFAULT:    return N4JSPackage.EXPORTED_VARIABLE_STATEMENT___IS_EXPORTED_AS_DEFAULT;case N4JSPackage.EXPORTABLE_ELEMENT___GET_EXPORTED_NAME:  return N4JSPackage.EXPORTED_VARIABLE_STATEMENT___GET_EXPORTED_NAME;case N4JSPackage.EXPORTABLE_ELEMENT___IS_TOPLEVEL:return N4JSPackage.EXPORTED_VARIABLE_STATEMENT___IS_TOPLEVEL;default :return -1;}}if (baseClass == AnnotableElement.class) {switch (baseOperationID) {case N4JSPackage.ANNOTABLE_ELEMENT___GET_ANNOTATIONS:return N4JSPackage.EXPORTED_VARIABLE_STATEMENT___GET_ANNOTATIONS;default :return -1;}}if (baseClass == AnnotableScriptElement.class) {switch (baseOperationID) {case N4JSPackage.ANNOTABLE_SCRIPT_ELEMENT___GET_ANNOTATIONS:return N4JSPackage.EXPORTED_VARIABLE_STATEMENT___GET_ANNOTATIONS;default :return -1;}}if (baseClass == ModifiableElement.class) {switch (baseOperationID) {default :return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  private void switchOverToHash(int numAtts){  for (int index=0; index < numAtts; index++) {    String qName=super.getQName(index);    Integer i=new Integer(index);    m_indexFromQName.put(qName,i);    String uri=super.getURI(index);    String local=super.getLocalName(index);    m_buff.setLength(0);    m_buff.append('{').append(uri).append('}').append(local);    String key=m_buff.toString();    m_indexFromQName.put(key,i);  }}  }
class C{  public void vetoableChange(PropertyChangeEvent e){  log.info(e.getPropertyName() + "=" + e.getNewValue());  if (e.getPropertyName().equals("M_Warehouse_ID"))   m_M_Warehouse_ID=e.getNewValue();  if (e.getPropertyName().equals("C_BPartner_ID")) {    m_C_BPartner_ID=e.getNewValue();    fBPartner.setValue(m_C_BPartner_ID);  }  executeQuery();}  }
class C{  protected boolean addToPendingNodes(final Link l,final Node n,final PseudoRemovePriorityQueue<Node> pendingNodes,final double currTime,final double currCost){  double travelTime=this.timeFunction.getLinkTravelTime(l,currTime,person,vehicle);  double travelCost=this.costFunction.getLinkTravelDisutility(l,currTime,this.person,this.vehicle);  DijkstraNodeData data=getData(n);  double nCost=data.getCost();  if (!data.isVisited(getIterationId())) {    visitNode(n,data,pendingNodes,currTime + travelTime,currCost + travelCost,l);    return true;  }  double totalCost=currCost + travelCost;  if (totalCost < nCost) {    revisitNode(n,data,pendingNodes,currTime + travelTime,totalCost,l);    return true;  }  return false;}  }
class C{  private void resetShapeBounds(){  RoundRectangle2D.Double rrect=(RoundRectangle2D.Double)shape;  rrect.setRoundRect(0,0,getBounds().width - 1,getBounds().height - 1,10,10);}  }
class C{  public boolean usesVirtualAccess(){  if (hasAccess()) {    return getAccess().equals(EL_ACCESS_VIRTUAL);  } else {    return m_classAccessor.usesVirtualAccess();  }}  }
class C{  @Deprecated public ContentItem contentType(String contentType){  this.contentType=contentType;  return this;}  }
class C{  private static void replaceUIDelegateFocusListener(Component c,FocusListener replacement){  final FocusListener[] focusListeners=c.getFocusListeners();  for (int i=0; i < focusListeners.length; i++)   if (focusListeners[i].getClass().getName().indexOf("ComboBoxUI") != -1)   c.removeFocusListener(focusListeners[i]);  c.addFocusListener(replacement);}  }
class C{  public static boolean[] toPrimitive(final Boolean[] array,final boolean valueForNull){  if (array == null) {    return null;  } else   if (array.length == 0) {    return ArrayUtils.EMPTY_BOOLEAN_ARRAY;  }  final boolean[] result=new boolean[array.length];  for (int i=0; i < array.length; i++) {    Boolean b=array[i];    result[i]=b == null ? valueForNull : b.booleanValue();  }  return result;}  }
class C{  public void update(String text){  if (text == null)   return;  text=NGram.normalize_vi(text);  NGram gram=new NGram();  for (int i=0; i < text.length(); ++i) {    gram.addChar(text.charAt(i));    for (int n=1; n <= NGram.N_GRAM; ++n) {      add(gram.get(n));    }  }}  }
class C{  protected AbstractMenu(String name){  MENU=new JMenu(new MenuAction(name));  MENU.addMenuListener(new RefreshMenuListener());}  }
class C{  public static void main(String argv[]){  if (argv.length == 0) {    System.out.println("Usage : java PTB2TextLexer <inputfile>");  } else {    for (int i=0; i < argv.length; i++) {      PTB2TextLexer scanner=null;      try {        scanner=new PTB2TextLexer(new java.io.FileReader(argv[i]));        while (!scanner.yy_atEOF)         scanner.next();      } catch (      java.io.FileNotFoundException e) {        System.out.println("File not found : \"" + argv[i] + "\"");      }catch (      java.io.IOException e) {        System.out.println("IO error scanning file \"" + argv[i] + "\"");        System.out.println(e);      }catch (      Exception e) {        System.out.println("Unexpected exception:");        e.printStackTrace();      }    }  }}  }
class C{  public void configureWifi(String code,String data){  boolean wifistatus=false;  String ssid=null;  String password=null;  try {    JSONObject wifiData=new JSONObject(data);    if (!wifiData.isNull(resources.getString(R.string.intent_extra_ssid))) {      ssid=(String)wifiData.get(resources.getString(R.string.intent_extra_ssid));    }    if (!wifiData.isNull(resources.getString(R.string.intent_extra_password))) {      password=(String)wifiData.get(resources.getString(R.string.intent_extra_password));    }  } catch (  JSONException e) {    Log.e(TAG,"Invalid JSON format " + e.toString());  }  WiFiConfig config=new WiFiConfig(context.getApplicationContext());  wifistatus=config.saveWEPConfig(ssid,password);  String status=null;  if (wifistatus) {    status=resources.getString(R.string.shared_pref_default_status);  } else {    status=resources.getString(R.string.shared_pref_false_status);  }  resultBuilder.build(code,status);}  }
class C{  public RegionSet(Set<GliderRegionOfInterest> regions){  if (regions == null) {    String message=Logging.getMessage("nullValue.RegionListIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.regions=Collections.unmodifiableSet(regions);}  }
class C{  public int writeNibble(final int x) throws IOException {  if (x < 0)   throw new IllegalArgumentException("The argument " + x + " is negative");  if (x == 0)   return writeInt(8,4);  final int msb=Fast.mostSignificantBit(x);  int h=msb / 3;  do {    writeBit(h == 0);    writeInt(x >> h * 3,3);  } while (h-- != 0);  return ((msb / 3) + 1) << 2;}  }
class C{  private GJChronology(Chronology base,JulianChronology julian,GregorianChronology gregorian,Instant cutoverInstant){  super(base,new Object[]{julian,gregorian,cutoverInstant});}  }
class C{  public void bulkDelete(List<IMessage> messages) throws DiscordException, RateLimitException, MissingPermissionsException {  DiscordUtils.checkPermissions(client,channel,EnumSet.of(Permissions.MANAGE_MESSAGES));  if (!client.isBot())   throw new DiscordException("You must be a bot to bulk delete!");  if (messages.size() > 100)   throw new DiscordException("You can only delete 100 messages at a time!");  try {    client.REQUESTS.POST.makeRequest(DiscordEndpoints.CHANNELS + channel.getID() + "/messages/bulk_delete",new StringEntity(DiscordUtils.GSON.toJson(new BulkDeleteRequest(messages))),new BasicNameValuePair("content-type","application/json"),new BasicNameValuePair("authorization",client.getToken()));  } catch (  UnsupportedEncodingException e) {    Discord4J.LOGGER.error(LogMarkers.UTIL,"Discord4J Internal Exception",e);  }}  }
class C{  public void run() throws Exception {  Logger log=LoggerFactory.getLogger(RemoteServerExample.class);  SchedulerFactory sf=new StdSchedulerFactory();  Scheduler sched=sf.getScheduler();  log.info("------- Initialization Complete -----------");  log.info("------- (Not Scheduling any Jobs - relying on a remote client to schedule jobs --");  log.info("------- Starting Scheduler ----------------");  sched.start();  log.info("------- Started Scheduler -----------------");  log.info("------- Waiting ten minutes... ------------");  try {    Thread.sleep(600L * 1000L);  } catch (  Exception e) {  }  log.info("------- Shutting Down ---------------------");  sched.shutdown(true);  log.info("------- Shutdown Complete -----------------");  SchedulerMetaData metaData=sched.getMetaData();  log.info("Executed " + metaData.getNumberOfJobsExecuted() + " jobs.");}  }
class C{  public Message(String name,Object source){  this(name,source,System.currentTimeMillis());}  }
class C{  public DocumentOrderingWrapper(DocumentInfo document){  this.documentInfo=document;  init();}  }
class C{  @Override public void closeElement(){  current=(XMLElement)stack.pop();}  }
class C{  public static void onlyNumericalAttributes(ExampleSet es,String task) throws OperatorException {  onlyNumericalAttributes(es.getAttributes(),task);}  }
class C{  public static Envelope envelopeToFixed(Envelope env){  return new Envelope(floatingDegreesToFixed(env.getMinX()),floatingDegreesToFixed(env.getMaxX()),floatingDegreesToFixed(env.getMinY()),floatingDegreesToFixed(env.getMaxY()));}  }
class C{  Object createBoundingBox(Object objA){  SpatialKey a=(SpatialKey)objA;  if (a.isNull()) {    return a;  }  float[] minMax=new float[dimensions * 2];  for (int i=0; i < dimensions; i++) {    minMax[i + i]=a.min(i);    minMax[i + i + 1]=a.max(i);  }  return new SpatialKey(0,minMax);}  }
class C{  private static Annotation createZipkinAnnotation(String value,long time,Endpoint ep,boolean sendRequest){  Annotation annotation=new Annotation();  annotation.setHost(ep);  if (sendRequest) {    annotation.setTimestamp(time * 1000);  } else {    annotation.setTimestamp(time * 1000);  }  annotation.setValue(value);  return annotation;}  }
class C{  public static String stringFor(int n){  if (n == 0) {    return "CU_EVENT_DEFAULT";  }  String result="";  if ((n & CU_EVENT_BLOCKING_SYNC) != 0)   result+="CU_EVENT_BLOCKING_SYNC ";  if ((n & CU_EVENT_DISABLE_TIMING) != 0)   result+="CU_EVENT_DISABLE_TIMING ";  if ((n & CU_EVENT_INTERPROCESS) != 0)   result+="CU_EVENT_INTERPROCESS ";  return result;}  }
class C{  public void clear(){  Iterator sets=m_map.entrySet().iterator();  while (sets.hasNext()) {    Map.Entry entry=(Map.Entry)sets.next();    ((TupleSet)entry.getValue()).clear();  }  m_count=0;}  }
class C{  public ServiceUnavailableException(){  super();}  }
class C{  public String toString(boolean reverse,Hashtable oidSymbols){  StringBuffer buf=new StringBuffer();  Vector components=new Vector();  boolean first=true;  StringBuffer ava=null;  for (int i=0; i < ordering.size(); i++) {    if (((Boolean)added.elementAt(i)).booleanValue()) {      ava.append('+');      appendValue(ava,oidSymbols,(ASN1ObjectIdentifier)ordering.elementAt(i),(String)values.elementAt(i));    } else {      ava=new StringBuffer();      appendValue(ava,oidSymbols,(ASN1ObjectIdentifier)ordering.elementAt(i),(String)values.elementAt(i));      components.addElement(ava);    }  }  if (reverse) {    for (int i=components.size() - 1; i >= 0; i--) {      if (first) {        first=false;      } else {        buf.append(',');      }      buf.append(components.elementAt(i).toString());    }  } else {    for (int i=0; i < components.size(); i++) {      if (first) {        first=false;      } else {        buf.append(',');      }      buf.append(components.elementAt(i).toString());    }  }  return buf.toString();}  }
class C{  public PermissionCollectionPage(final BasePermissionCollectionResponse response,final IPermissionCollectionRequestBuilder builder){  super(response,builder);}  }
class C{  public boolean removeEdges(List<Edge> edges){  return getEdges().removeAll(edges);}  }
class C{  public void unsubscribe(EventSubscriber<?> subscriber){  final Class<?> eventType=getEventType(subscriber);  final Set<EventSubscriber> entries=subscribersByEventType.get(eventType);  if (entries != null && !entries.isEmpty()) {    boolean changed=entries.remove(subscriber);    if (changed) {      if (entries.isEmpty()) {        subscribersByEventType.remove(eventType);      }    }  }}  }
class C{  public void removeMetric(Class<?> klass,String name){  removeMetric(klass,name,null);}  }
class C{  public T caseLiteralOrComputedPropertyName(LiteralOrComputedPropertyName object){  return null;}  }
class C{  private boolean checkDirectoryOrURL(String optName){  String value=options.get(optName);  if (value == null)   return true;  try {    URL url=new URL(value);    String scheme=url.getProtocol();    if ("http".equals(scheme) || "https".equals(scheme))     return true;    error("ceylon.err.output.repo.not.supported",value);    return false;  } catch (  MalformedURLException x) {  }  File file=new File(value);  if (file.exists() && !file.isDirectory()) {    error("err.file.not.directory",value);    return false;  }  return true;}  }
class C{  public final void sort(int attIndex){  int i, j;  j=numInstances() - 1;  i=0;  while (i <= j) {    if (instance(j).isMissing(attIndex)) {      j--;    } else {      if (instance(i).isMissing(attIndex)) {        swap(i,j);        j--;      }      i++;    }  }  quickSort(attIndex,0,j);}  }
class C{  public int keyAt(int index){  return mKeys[index];}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == AccessibleTypeElement.class) {switch (baseFeatureID) {case TypesPackage.ACCESSIBLE_TYPE_ELEMENT__DECLARED_TYPE_ACCESS_MODIFIER:      return TypesPackage.DECLARED_TYPE_WITH_ACCESS_MODIFIER__DECLARED_TYPE_ACCESS_MODIFIER;case TypesPackage.ACCESSIBLE_TYPE_ELEMENT__DECLARED_PROVIDED_BY_RUNTIME:    return TypesPackage.DECLARED_TYPE_WITH_ACCESS_MODIFIER__DECLARED_PROVIDED_BY_RUNTIME;default :  return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  public void interruptAll(){  if (m_releaseLatchOnInterrupt) {    for (    final CountDownLatch latch : m_latchesToCloseOnShutdown) {      removeShutdownLatch(latch);    }  }}  }
class C{  private static ByteBuffer resampleTo16BitPcm(ByteBuffer buffer,int offset,int size,int sourceEncoding,ByteBuffer out){  int resampledSize;switch (sourceEncoding) {case C.ENCODING_PCM_8BIT:    resampledSize=size * 2;  break;case C.ENCODING_PCM_24BIT:resampledSize=(size / 3) * 2;break;case C.ENCODING_PCM_32BIT:resampledSize=size / 2;break;default :throw new IllegalStateException();}ByteBuffer resampledBuffer=out;if (resampledBuffer == null || resampledBuffer.capacity() < resampledSize) {resampledBuffer=ByteBuffer.allocateDirect(resampledSize);}resampledBuffer.position(0);resampledBuffer.limit(resampledSize);int limit=offset + size;switch (sourceEncoding) {case C.ENCODING_PCM_8BIT:for (int i=offset; i < limit; i++) {resampledBuffer.put((byte)0);resampledBuffer.put((byte)((buffer.get(i) & 0xFF) - 128));}break;case C.ENCODING_PCM_24BIT:for (int i=offset; i < limit; i+=3) {resampledBuffer.put(buffer.get(i + 1));resampledBuffer.put(buffer.get(i + 2));}break;case C.ENCODING_PCM_32BIT:for (int i=offset; i < limit; i+=4) {resampledBuffer.put(buffer.get(i + 2));resampledBuffer.put(buffer.get(i + 3));}break;default :throw new IllegalStateException();}resampledBuffer.position(0);return resampledBuffer;}  }
class C{  @NonNull public IconDrawable sizePx(@IntRange(from=-1) int size){  iconState.height=size;  if (size == -1) {    iconState.width=-1;  } else {    paint.setTextSize(size);    paint.getTextBounds(text,0,1,TEMP_DRAW_BOUNDS);    iconState.width=TEMP_DRAW_BOUNDS.width();  }  return this;}  }
class C{  private void notifyAdditionalOnScrollStateChangedListener(AbsListView view,int scrollState){  if (mAdditionalOnScrollListener != null) {    mAdditionalOnScrollListener.onScrollStateChanged(view,scrollState);  }}  }
class C{  public void endExecuteFunctionSend(long startTime,boolean failed){  long duration=getStatTime() - startTime;  this.sendStats.incInt(executeFunctionSendInProgressId,-1);  int endExecuteFunctionSendId;  if (failed) {    endExecuteFunctionSendId=executeFunctionSendFailedId;  } else {    endExecuteFunctionSendId=executeFunctionSendId;  }  this.sendStats.incInt(endExecuteFunctionSendId,1);  this.stats.incLong(executeFunctionSendDurationId,duration);}  }
class C{  protected Anonymous_eventDefinition_1_Impl(){  super();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private static float constrain(float amount,float low,float high){  return amount < low ? low : (amount > high ? high : amount);}  }
class C{  public boolean ignoreHiddenFiles(){  return ignoreHiddenFiles;}  }
class C{  private int stiLineTableIndex(int sti,int jplsLine){  int i;  int lineIndexStart;  int lineIndexEnd;  lineIndexStart=stratumTable[sti].lineIndex;  lineIndexEnd=stratumTable[sti + 1].lineIndex;  for (i=lineIndexStart; i < lineIndexEnd; ++i) {    if ((jplsLine >= lineTable[i].jplsStart) && (jplsLine <= lineTable[i].jplsEnd)) {      return i;    }  }  return -1;}  }
class C{  private boolean equals(PageContextImpl pc,String id){  Thread thread=pc.getThread();  if (Caster.toString(FDThreadImpl.id(pc)).equals(id))   return true;  if (Caster.toString(thread.getId()).equals(id))   return true;  if (Caster.toString(thread.hashCode()).equals(id))   return true;  return false;}  }
class C{  protected GroupImpl(){  super();}  }
class C{  public AnnotationVisitor visitAnnotationDefault(){  if (mv != null) {    return mv.visitAnnotationDefault();  }  return null;}  }
class C{  public int length(){  return chars.length;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name: ");  result.append(name);  result.append(')');  return result.toString();}  }
class C{  public void addXValue(String xVal){  mXVals.add(xVal);}  }
class C{  public static boolean isGAUseUpdatable(){  return true;}  }
class C{  public DefaultUpnpServiceConfiguration(){  this(NetworkAddressFactoryImpl.DEFAULT_TCP_HTTP_LISTEN_PORT);}  }
class C{  private static boolean isInHorizontalTargetZone(float x,float y,float handleXStart,float handleXEnd,float handleY,float targetRadius){  if (x > handleXStart && x < handleXEnd && Math.abs(y - handleY) <= targetRadius) {    return true;  }  return false;}  }
class C{  public void close() throws IOException {  if (debugLeaks) {    openFiles.remove(location);    if (showOpen)     System.out.println("  close " + location);  }  if (file == null)   return;  flush();  long fileSize=file.length();  if (!readonly && (minLength != 0) && (minLength != fileSize)) {    file.setLength(minLength);  }  file.close();}  }
class C{  @Inline public static boolean checkBlockMeta(Address block){  return getMetaAddress(block).plus(FL_META_OFFSET).loadWord().EQ(Word.one());}  }
class C{  protected void postExecute(){  restoreSelection();  ++cursor;}  }
class C{  protected boolean check(SMTPSession session,Mail mail){  MimeMessage message;  try {    message=mail.getMessage();    HashSet<String> domains=scanMailForDomains(message,session);    for (    String domain : domains) {      Iterator<String> uRbl=uriRbl.iterator();      String target=domain;      while (uRbl.hasNext()) {        try {          String uRblServer=uRbl.next();          String address=target + "." + uRblServer;          if (session.getLogger().isDebugEnabled()) {            session.getLogger().debug("Lookup " + address);          }          dnsService.getByName(address);          session.setAttachment(URBLSERVER,uRblServer,State.Transaction);          session.setAttachment(LISTED_DOMAIN,target,State.Transaction);          return true;        } catch (        UnknownHostException uhe) {        }      }    }  } catch (  MessagingException e) {    session.getLogger().error(e.getMessage());  }catch (  IOException e) {    session.getLogger().error(e.getMessage());  }  return false;}  }
class C{  public boolean equals(Object obj){  if (!(obj instanceof CompilationUnit))   return false;  CompilationUnit other=(CompilationUnit)obj;  return this.owner.equals(other.owner) && super.equals(obj);}  }
class C{  public DebuggerSynchronizer(final IDebugger debugger){  Preconditions.checkNotNull(debugger,"IE00789: Debugger argument can not be null");  attachSynchronizer=new AttachSynchronizer(debugger,listeners);  breakpointHitSynchronizer=new BreakpointHitSynchronizer(debugger,listeners);  breakpointRemovedSynchronizer=new BreakpointRemovedSynchronizer(debugger,listeners);  breakpointSetSynchronizer=new BreakpointSetSynchronizer(debugger,listeners);  detachSynchronizer=new DetachSynchronizer(debugger,listeners);  echoBreakpointHitSynchronizer=new EchoBreakpointHitSynchronizer(debugger,listeners);  echoBreakpointRemovedSynchronizer=new EchoBreakpointRemovedSynchronizer(debugger,listeners);  echoBreakpointSetSynchronizer=new EchoBreakpointSetSynchronizer(debugger,listeners);  errorConnectionClosedSynchronizer=new ErrorConnectionClosedSynchronizer(debugger,listeners);  authenticationFailedSynchronizer=new AuthenticationFailedSynchronizer(debugger,listeners);  exceptionOccurredSynchronizer=new ExceptionOccurredSynchronizer(debugger,listeners);  fileSelectedSynchronizer=new SelectFileSynchronizer(debugger,listeners);  haltSynchronizer=new HaltSynchronizer(debugger,listeners);  targetInformationSynchronizer=new TargetInformationSynchronizer(debugger,listeners);  listFilesSynchronizer=new ListFilesSynchronizer(debugger,listeners);  listProcessesSynchronizer=new ListProcessesSynchronizer(debugger,listeners);  memoryMapSynchronizer=new MemoryMapSynchronizer(debugger,listeners);  moduleLoadedSynchronizer=new ModuleLoadedSynchronizer(debugger,listeners);  moduleUnloadedSynchronizer=new ModuleUnloadedSynchronizer(debugger,listeners);  processClosedSynchronizer=new ProcessClosedSynchronizer(debugger,listeners);  processSelectedSynchronizer=new ProcessSelectedSynchronizer(debugger,listeners);  readMemorySynchronizer=new ReadMemorySynchronizer(debugger,listeners);  readRegistersSynchronizer=new ReadRegistersSynchronizer(debugger,listeners);  requestTargetSynchronizer=new RequestTargetSynchronizer(debugger,listeners);  resumeSynchronizer=new ResumeSynchronizer(debugger,listeners);  searchSynchronizer=new SearchSynchronizer(debugger,listeners);  setRegisterSynchronizer=new SetRegisterSynchronizer(debugger,listeners);  singleStepSynchronizer=new SingleStepSynchronizer(debugger,listeners);  stepBreakpointHitSynchronizer=new StepBreakpointHitSynchronizer(debugger,listeners);  stepBreakpointRemovedSynchronizer=new StepBreakpointRemovedSynchronizer(debugger,listeners);  stepBreakpointSetSynchronizer=new StepBreakpointSetSynchronizer(debugger,listeners);  terminateSynchronizer=new TerminateSynchronizer(debugger,listeners);  threadClosedSynchronizer=new ThreadClosedSynchronizer(debugger,listeners);  threadCreatedSynchronizer=new ThreadCreatedSynchronizer(debugger,listeners);  validateMemorySynchronizer=new ValidateMemorySynchronizer(debugger,listeners);  resumeThreadSynchronizer=new ResumeThreadSynchronizer(debugger,listeners);  suspendThreadSynchronizer=new SuspendThreadSynchronizer(debugger,listeners);  breakpointConditionSetSynchronizer=new BreakpointConditionSetSynchronizer(debugger,listeners);  writeMemorySynchronizer=new WriteMemorySynchronizer(debugger,listeners);  queryDebuggerEventSettingsSynchronizer=new QueryDebuggerEventSettingsSynchronizer(debugger,listeners);  setExceptionSettingsSynchronizer=new SetExceptionSettingsSynchronizer(debugger,listeners);  processStartSynchronizer=new ProcessStartSynchronizer(debugger,listeners);  setDebuggerEventSettingsSynchronizer=new SetDebuggerEventSettingsSynchronizer(debugger,listeners);  cancelTargetSelectionSynchronizer=new CancelTargetSelectionSynchronizer(debugger,listeners);}  }
class C{  public Topology build(){  return topology;}  }
class C{  public void clear(){  cache.clear();}  }
class C{  @Deprecated public Task<VolumeRestRep> detachFullCopy(URI id,URI copyId){  return postTask(getFullCopyUrl() + "/{copyId}/detach",id,copyId);}  }
class C{  public String format(Locale locale,double number){  DecimalFormat df=getDecimalFormat(locale);  df.applyPattern(",0");  df.setGroupingSize(3);  return df.format(number).replace('\'',',');}  }
class C{  public void from(@Nonnull String dependencyNotation){  from(getProject().getDependencies().create(dependencyNotation));}  }
class C{  public boolean isGaussian(){  return (m_clustertype == SubspaceCluster.GAUSSIAN);}  }
class C{  public void curePlayers(){  curePlayersPosition(teamQBs);  curePlayersPosition(teamRBs);  curePlayersPosition(teamWRs);  curePlayersPosition(teamOLs);  curePlayersPosition(teamKs);  curePlayersPosition(teamSs);  curePlayersPosition(teamCBs);  curePlayersPosition(teamF7s);  sortPlayers();}  }
class C{  public void addNewMessage(Message message){  MessageHeaderParent item=null;  for (int i=getItemCount(false) - 1; i > 1; i--) {    if (items.get(i) instanceof MessageHeaderParent) {      item=(MessageHeaderParent)items.get(i);      if (!item.getId().equals(message.getIdForHolder())) {        item=null;      }      break;    }  }  if (item == null) {    item=new MessageHeaderParent((message.getStream() == null) ? null : message.getStream().getName(),message.getSubject(),message.getIdForHolder(),message);    item.setMessageType(message.getType());    item.setDisplayRecipent(message.getDisplayRecipient(zulipApp));    if (message.getType() == MessageType.STREAM_MESSAGE)     item.setMute(mMutedTopics.isTopicMute(message));    item.setColor((message.getStream() == null) ? mDefaultStreamHeaderColor : message.getStream().getParsedColor());    items.add(getItemCount(true) - 1,item);    notifyItemInserted(getItemCount(true) - 1);  }  items.add(getItemCount(true) - 1,message);  notifyItemInserted(getItemCount(true) - 1);}  }
class C{  public T profile(String value){  return attr("profile",value);}  }
class C{  public static <I,A>Parser<I,A> fail(){  return null;}  }
class C{  public void actionPerformed(ActionEvent e){  log.config(e.getActionCommand());  Object source=e.getSource();  if (source instanceof JCheckBox || source instanceof JRadioButton) {    cmd_selection(source);    if (source instanceof JRadioButton) {      Iterator it=m_buttonGroups.values().iterator();      while (it.hasNext()) {        ButtonGroup group=(ButtonGroup)it.next();        Enumeration en=group.getElements();        while (en.hasMoreElements()) {          if (source == en.nextElement()) {            Enumeration info=group.getElements();            while (info.hasMoreElements()) {              Object infoObj=info.nextElement();              if (source != infoObj)               cmd_selection(infoObj);            }          }        }      }    }  } else   if (source == productField || source == productQty) {    m_qty=(BigDecimal)productQty.getValue();    KeyNamePair pp=(KeyNamePair)productField.getSelectedItem();    m_product=MProduct.get(Env.getCtx(),pp.getKey());    createMainPanel();    sizeIt();  } else   if (source == orderField) {    KeyNamePair pp=(KeyNamePair)orderField.getSelectedItem();    boolean valid=(pp != null && pp.getKey() > 0);    if (invoiceField != null)     invoiceField.setReadWrite(!valid);    if (projectField != null)     projectField.setReadWrite(!valid);  } else   if (source == invoiceField) {    KeyNamePair pp=(KeyNamePair)invoiceField.getSelectedItem();    boolean valid=(pp != null && pp.getKey() > 0);    if (orderField != null)     orderField.setReadWrite(!valid);    if (projectField != null)     projectField.setReadWrite(!valid);  } else   if (source == projectField) {    KeyNamePair pp=(KeyNamePair)projectField.getSelectedItem();    boolean valid=(pp != null && pp.getKey() > 0);    if (orderField != null)     orderField.setReadWrite(!valid);    if (invoiceField != null)     invoiceField.setReadWrite(!valid);  } else   if (e.getActionCommand().equals(ConfirmPanel.A_OK)) {    if (cmd_save())     dispose();  } else   if (e.getActionCommand().equals(ConfirmPanel.A_CANCEL))   dispose();  boolean OK=m_product != null;  if (OK) {    KeyNamePair pp=null;    if (orderField != null)     pp=(KeyNamePair)orderField.getSelectedItem();    if ((pp == null || pp.getKey() <= 0) && invoiceField != null)     pp=(KeyNamePair)invoiceField.getSelectedItem();    if ((pp == null || pp.getKey() <= 0) && projectField != null)     pp=(KeyNamePair)projectField.getSelectedItem();    OK=(pp != null && pp.getKey() > 0);  }  confirmPanel.getOKButton().setEnabled(OK);}  }
class C{  public boolean isLongerThan(ReadableDuration duration){  if (duration == null) {    duration=Duration.ZERO;  }  return compareTo(duration) > 0;}  }
class C{  private DateTestUtil(){}  }
class C{  public static <T>LazyDequeX<T> fromIterable(Iterable<T> it){  return fromIterable(DequeX.<T>defaultCollector(),it);}  }
class C{  public void onSequenceCompleted(int sequenceId,long frameNumber){}  }
class C{  private static void rebuildSessionFactory(){  try {    Class.forName("net.sourceforge.jtds.jdbc.Driver",true,SessionFactory.class.getClassLoader());    sessionFactoryBean=new LocalSessionFactoryBean();    sessionFactoryBean.setConfigLocation(configLocation);    sessionFactoryBean.setBeanClassLoader(HibernateSessionFactory.class.getClassLoader());    sessionFactoryBean.afterPropertiesSet();    sessionFactory=(org.hibernate.SessionFactory)sessionFactoryBean.getObject();    if (LOG.isDebugEnabled()) {      LOG.debug("New session factory for GSTOOL import created, configuration file: " + configLocation);    }  } catch (  Exception e) {    LOG.error("Error while rebuilding session factory.",e);  }}  }
class C{  public SRaster(){  super(GraphicType.GT_Raster,RenderType.RT_Unknown,LineType.LT_Unknown,DeclutterType.DC_None);  p1_=new XYPoint((short)0,(short)0);  ll1_=new LLPoint(0f,0f);  width_=0;  height_=0;  x_hot_=0;  y_hot_=0;  pixels_=new byte[0];  colorsTotal_=0;  transparent_=0;  ct_=new CTEntry[0];}  }
class C{  public GsonBuilder disableHtmlEscaping(){  this.escapeHtmlChars=false;  return this;}  }
class C{  public static TextView findTextView(View view){  if (view instanceof TextView) {    return (TextView)view;  } else {    if (view instanceof ViewGroup) {      return findTextView(((ViewGroup)view).getChildAt(0));    } else {      return null;    }  }}  }
class C{  public StopAnalyzer(Path stopwordsFile) throws IOException {  this(loadStopwordSet(stopwordsFile));}  }
class C{  public static ComponentUI createUI(JComponent c){  return new CompiereTableHeaderUI();}  }
class C{  final long fn(long v,long x){  return v + x;}  }
class C{  protected double estimateMaximumTickLabelWidth(Graphics2D g2,TickUnit unit){  RectangleInsets tickLabelInsets=getTickLabelInsets();  double result=tickLabelInsets.getLeft() + tickLabelInsets.getRight();  if (isVerticalTickLabels()) {    FontRenderContext frc=g2.getFontRenderContext();    LineMetrics lm=getTickLabelFont().getLineMetrics("0",frc);    result+=lm.getHeight();  } else {    Range range=getRange();    double lower=range.getLowerBound();    double upper=range.getUpperBound();    AttributedString lowerStr=createTickLabel(lower);    AttributedString upperStr=createTickLabel(upper);    double w1=AttrStringUtils.getTextBounds(lowerStr,g2).getWidth();    double w2=AttrStringUtils.getTextBounds(upperStr,g2).getWidth();    result+=Math.max(w1,w2);  }  return result;}  }
class C{  public boolean isPermitted(PermissionType type,String target,int value){  if (roleTypes.contains(RoleType.SUPER))   return true;  Integer v=permissions[type.ordinal()].get(target);  for (  RoleType roleType : roleTypes) {    Integer v1=roleType.permissionValue(type,target);    if (v1 != null && (v == null || v < v1)) {      v=v1;    }  }  return v == null || v >= value;}  }
class C{  @Override public IBinder onBind(Intent intent){  return sSyncAdapter.getSyncAdapterBinder();}  }
class C{  public static void enableDeathOnNetwork(){  int oldPolicy=getThreadPolicyMask();  int newPolicy=oldPolicy | DETECT_NETWORK | PENALTY_DEATH_ON_NETWORK;  setThreadPolicyMask(newPolicy);}  }
class C{  public synchronized VisualTree addTree(String group,Tree tree,Predicate filter){  return addTree(group,tree,filter,VisualItem.SCHEMA,VisualItem.SCHEMA);}  }
class C{  protected SVGOMFEImageElement(){}  }
class C{  public void writeInteger(String key,Integer value){  if (writeParameter(key,value.toString()) != 0) {    mCache.put(key,value);  }}  }
class C{  private void findTypesIn(Object model,Map<String,Type> types){  requireNonNull(model);  requireNonNull(types);  if (HasSupertype.class.isInstance(model)) {    ((HasSupertype<?>)model).getSupertype().ifPresent(null);  }  if (HasAnnotationUsage.class.isInstance(model)) {    ((HasAnnotationUsage<?>)model).getAnnotations().forEach(null);  }  if (HasClasses.class.isInstance(model)) {    ((HasClasses<?>)model).getClasses().forEach(null);  }  if (HasConstructors.class.isInstance(model)) {    ((HasConstructors<?>)model).getConstructors().forEach(null);  }  if (HasFields.class.isInstance(model)) {    ((HasFields<?>)model).getFields().forEach(null);  }  if (HasGenerics.class.isInstance(model)) {    ((HasGenerics<?>)model).getGenerics().forEach(null);  }  if (HasImplements.class.isInstance(model)) {    ((HasImplements<?>)model).getInterfaces().forEach(null);  }  if (HasMethods.class.isInstance(model)) {    ((HasMethods<?>)model).getMethods().forEach(null);  }  if (HasThrows.class.isInstance(model)) {    ((HasThrows<?>)model).getExceptions().forEach(null);  }  if (HasType.class.isInstance(model)) {    addType(((HasType<?>)model).getType(),types);  }}  }
class C{  public static byte[] readFileToByteArray(File file) throws IOException {  InputStream in=null;  try {    in=openInputStream(file);    return IOUtils.toByteArray(in,file.length());  }  finally {    IOUtils.closeQuietly(in);  }}  }
class C{  public boolean saveError(String AD_Message,String message){  return saveError(AD_Message,message,true);}  }
class C{  public void addSchemaLdif(String schemaLdif){  if (this._schemaLdifList == null) {    this._schemaLdifList=new ArrayList<String>();  }  _schemaLdifList.add(schemaLdif);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void processIncoming(Fact fact){  Resource subject=fact.getSubject();  URI predURI=fact.getPredicate();  OwlProperty prop=schema.getProperty(predURI);  for (  Resource type : prop.getRange()) {    types.processType(type,OwlRule.PRP_RNG,fact);  }  for (  URI inverseProp : prop.getInverseProperties()) {    collect(triple(node,inverseProp,subject,OwlRule.PRP_INV,fact));  }  if (prop.isSymmetric() && !fact.hasRule(OwlRule.PRP_SYMP) && !subject.equals(node)) {    collect(triple(node,predURI,subject,OwlRule.PRP_SYMP,fact));  }  if (prop.isIrreflexive() && subject.equals(node)) {    collectInconsistency(inconsistency(OwlRule.PRP_IRP,fact));  }  if (prop.isTransitive() && !subject.equals(node) && checkTransitivityIncoming(fact)) {    if (!transitiveIncoming.containsKey(predURI)) {      transitiveIncoming.put(predURI,new LinkedList<Fact>());    }    transitiveIncoming.get(predURI).add(fact);  }  if (prop.isAsymmetric()) {    if (!asymmetricIncoming.containsKey(predURI)) {      asymmetricIncoming.put(predURI,new LinkedList<Fact>());    }    asymmetricIncoming.get(predURI).add(fact);  }  for (  Resource rNode : prop.getRestrictions()) {    OwlClass restriction=schema.getClass(rNode);    Set<Resource> valuesFrom=restriction.someValuesFrom();    valuesFrom.remove(OWL.THING);    for (    Resource commonType : valuesFrom) {      types.onType(commonType,triple(subject,RDF.TYPE,rNode,OwlRule.CLS_SVF1,fact));    }  }}  }
class C{  public boolean endNalUnit(int discardPadding){  if (!isFilling) {    return false;  }  nalLength-=discardPadding;  isFilling=false;  isCompleted=true;  return true;}  }
class C{  public void removeFactor(String factor){  Object o=connectivity.remove(factor);  if (o == null) {    throw new IllegalArgumentException("Factor not in graph: " + factor);  }}  }
class C{  public boolean isEOF(){  return this.byteBuffer[4] == (byte)0xFE && this.getDataLength() <= 5;}  }
class C{  public static String formatText(final FormatterDetails customFormatter,final String text,final byte[] rawText){  logger.trace("Formatting '" + text + "' with "+ customFormatter.getName());  String formattedText=text;  for (  final FormatterFunction function : customFormatter.getFunction()) {    if (function.getSubstringReplace() != null) {      formattedText=doSubstringReplacement(function.getSubstringReplace(),formattedText);    } else     if (function.getSubstringExtract() != null) {      formattedText=doSubstringExtract(function.getSubstringExtract(),formattedText);    } else     if (function.getSubstringConversion() != null) {      formattedText=doSubstringConversion(function.getSubstringConversion(),formattedText);    } else     if (function.getConversion() != null) {      if (customFormatter.getFunction().size() == 1 && rawText != null) {        formattedText=convertText(function.getConversion().getFormat(),rawText);      } else {        formattedText=convertText(function.getConversion().getFormat(),formattedText);      }    } else     if (function.getCharacterReplace() != null) {      formattedText=replaceCharacters(function.getCharacterReplace().getFormat(),formattedText,function.getCharacterReplace().getCharacterRangeFrom(),function.getCharacterReplace().getCharacterRangeTo(),function.getCharacterReplace().getWrapCharacter());    }    logger.trace("After function transformation = '" + formattedText + "'");  }  return formattedText;}  }
class C{  @Override public String[] sentenceFinalPunctuationTags(){  return tags;}  }
class C{  public ProtocolVersion forVersion(int major,int minor){  if ((major == this.major) && (minor == this.minor)) {    return this;  }  if (major == 1) {    if (minor == 0) {      return HTTP_1_0;    }    if (minor == 1) {      return HTTP_1_1;    }  }  if ((major == 0) && (minor == 9)) {    return HTTP_0_9;  }  return new HttpVersion(major,minor);}  }
class C{  public TwoColumnOutput(@Nonnull Writer out,int leftWidth,int rightWidth,@Nonnull String spacer){  if (leftWidth < 1) {    throw new IllegalArgumentException("leftWidth < 1");  }  if (rightWidth < 1) {    throw new IllegalArgumentException("rightWidth < 1");  }  this.out=out;  this.leftWidth=leftWidth;  this.rightWidth=rightWidth;  this.spacer=spacer;}  }
class C{  public synchronized boolean hasAnyAssociatedInverseRelationship(Vertex associate,Vertex target,Vertex type){  Collection<Relationship> relationships=getRelationships(associate);  if (relationships == null) {    return false;  }  for (  Relationship relationship : relationships) {    if (relationship.getTarget().hasInverseRelationship(type,target)) {      return true;    }  }  return false;}  }
class C{  public void java_io_ObjectInputStream_allocateNewArray(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  throw new NativeMethodNotSupportedException(method);}  }
class C{  protected void writePaddedString(String s,int length){  int pad=length - s.length();  printer.print(s);  while (pad > 0) {    printer.print(" ");    pad--;  }}  }
class C{  @Override public boolean isEmpty(){  return size() == 0;}  }
class C{  public VdcConfig toConfigParam(VirtualDataCenter vdc){  log.info("copy {} to the sync config param",vdc.getShortId());  VdcConfig vdcConfig=new VdcConfig();  Site activeSite=drUtil.getActiveSite(vdc.getShortId());  vdcConfig.setId(vdc.getId());  vdcConfig.setShortId(vdc.getShortId());  vdcConfig.setSecretKey(vdc.getSecretKey());  if ((vdc.getLabel() != null) && (!vdc.getLabel().isEmpty())) {    vdcConfig.setName(vdc.getLabel());  }  if ((vdc.getDescription() != null) && (!vdc.getDescription().isEmpty())) {    vdcConfig.setDescription(vdc.getDescription());  }  if (activeSite.getVipEndPoint() != null) {    vdcConfig.setApiEndpoint(activeSite.getVipEndPoint());  }  vdcConfig.setHostCount(activeSite.getNodeCount());  HashMap<String,String> ipv4AddrMap=new HashMap<String,String>(activeSite.getHostIPv4AddressMap());  vdcConfig.setHostIPv4AddressesMap(ipv4AddrMap);  HashMap<String,String> ipv6AddrMap=new HashMap<String,String>(activeSite.getHostIPv6AddressMap());  vdcConfig.setHostIPv6AddressesMap(ipv6AddrMap);  vdcConfig.setVersion(vdc.getVersion());  vdcConfig.setConnectionStatus(vdc.getConnectionStatus().toString());  vdcConfig.setRepStatus(vdc.getRepStatus().toString());  vdcConfig.setGeoCommandEndpoint(vdc.getGeoCommandEndpoint());  vdcConfig.setGeoDataEndpoint(vdc.getGeoDataEndpoint());  vdcConfig.setActiveSiteId(activeSite.getUuid());  return vdcConfig;}  }
class C{  public static boolean isTopLevelScrollItem(AccessibilityNodeInfoCompat node){  if (node == null) {    return false;  }  AccessibilityNodeInfoCompat parent=null;  try {    parent=node.getParent();    if (parent == null) {      return false;    }    if (isScrollable(node)) {      return true;    }    if (nodeMatchesClassByType(parent,Spinner.class))     return false;    return nodeMatchesAnyClassByType(parent,AdapterView.class,ScrollView.class,HorizontalScrollView.class,CLASS_TOUCHWIZ_TWADAPTERVIEW);  }  finally {    recycleNodes(parent);  }}  }
class C{  public void check(List<String> words) throws MnemonicException {  toEntropy(words);}  }
class C{  public ChildState(View v){  child=v;  minorValid=false;  majorValid=false;  childSizeValid=false;  child.setParent(AsyncBoxView.this);}  }
class C{  private void validateBeforeSending(){  if (getDestination() == null)   throw new NullPointerException("Destination is null");  if (getDestinationPort() == 0)   throw new NullPointerException("Destination port is 0");}  }
class C{  protected void removeAt(int index){  _set[index]=no_entry_value;  super.removeAt(index);}  }
class C{  public static Component createHorizontalStrut(int width){  return new Filler(new Dimension(width,0),new Dimension(width,0),new Dimension(width,Short.MAX_VALUE));}  }
class C{  public void printJobRequiresAttention(PrintJobEvent pje){}  }
class C{  public static Iterable<String> files(SegmentInfos infos) throws IOException {  final List<Collection<String>> list=new ArrayList<>();  list.add(Collections.singleton(infos.getSegmentsFileName()));  for (  SegmentCommitInfo info : infos) {    list.add(info.files());  }  return Iterables.concat();}  }
class C{  protected void clearEvents(){}  }
class C{  public static boolean writeFile(File file,InputStream stream,boolean append){  OutputStream o=null;  try {    makeDirs(file.getAbsolutePath());    o=new FileOutputStream(file,append);    byte data[]=new byte[1024];    int length=-1;    while ((length=stream.read(data)) != -1) {      o.write(data,0,length);    }    o.flush();    return true;  } catch (  FileNotFoundException e) {    throw new RuntimeException("FileNotFoundException occurred. ",e);  }catch (  IOException e) {    throw new RuntimeException("IOException occurred. ",e);  } finally {    if (o != null) {      try {        o.close();        stream.close();      } catch (      IOException e) {        throw new RuntimeException("IOException occurred. ",e);      }    }  }}  }
class C{  static SystemTestEnvironment createSystemTestEnvironment(String classpath,Path buildDir){  Path workingDir=buildDir.resolve("working-directories");  Path testInputClassDir=buildDir.resolve("classes/testInput");  Path jacocoAgentPath=buildDir.resolve("jacocoagent/jacocoagent.jar");  return new SystemTestEnvironment(classpath,workingDir,testInputClassDir,jacocoAgentPath);}  }
class C{  public void discardUpstreamSamples(int discardFromIndex){  rollingBuffer.discardUpstreamSamples(discardFromIndex);  largestParsedTimestampUs=rollingBuffer.peekSample(sampleInfoHolder) ? sampleInfoHolder.timeUs : Long.MIN_VALUE;}  }
class C{  public static int pickCards(int[] deck){  return (int)(Math.random() * deck.length);}  }
class C{  public void testBug22643() throws Exception {  checkPingQuery(this.conn);  Connection replConnection=getMasterSlaveReplicationConnection();  try {    checkPingQuery(replConnection);  }  finally {    if (replConnection != null) {      replConnection.close();    }  }  Connection lbConn=getLoadBalancedConnection();  try {    checkPingQuery(lbConn);  }  finally {    if (lbConn != null) {      lbConn.close();    }  }}  }
class C{  private void writeFile(List<String> lines,File file) throws Exception {  try (PrintWriter writer=new PrintWriter(new FileOutputStream(file))){    for (    String line : lines) {      writer.println(line);    }  } }  }
class C{  protected void doPrintHeader(){}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  String s1=m_arg0.execute(xctxt).str();  String s2=m_arg1.execute(xctxt).str();  int index=s1.indexOf(s2);  return (-1 == index) ? XString.EMPTYSTRING : new XString(s1.substring(0,index));}  }
class C{  public static XppDom buildDom(Reader r) throws XmlPullParserException, IOException {  XmlPullParser parser=createDefaultParser();  parser.setInput(r);  return XppDom.build(parser);}  }
class C{  private PostgreSQLCallgraphLoader(){}  }
class C{  public static CacheHeader readHeader(InputStream is) throws IOException {  CacheHeader entry=new CacheHeader();  int magic=readInt(is);  if (magic != CACHE_MAGIC) {    throw new IOException();  }  entry.key=readString(is);  entry.etag=readString(is);  if (entry.etag.equals("")) {    entry.etag=null;  }  entry.serverDate=readLong(is);  entry.ttl=readLong(is);  entry.softTtl=readLong(is);  entry.responseHeaders=readStringStringMap(is);  return entry;}  }
class C{  private static void fillAllFields(PriceModel priceModel,LocalizerFacade facade,VOPriceModel voPM){  fillBaseFields(priceModel,voPM);  if (priceModel.isChargeable()) {    voPM.setRoleSpecificUserPrices(PricedProductRoleAssembler.toVOPricedProductRoles(priceModel.getRoleSpecificUserPrices(),facade));    voPM.setSteppedPrices(SteppedPriceAssembler.toVOSteppedPrices(priceModel.getSteppedPrices()));  }  String license=facade.getText(priceModel.getKey(),LocalizedObjectTypes.PRICEMODEL_LICENSE);  voPM.setLicense(license);  voPM.setConsideredEvents(EventAssembler.toVOPricedEvent(priceModel.getConsideredEvents(),facade));  String description=facade.getText(priceModel.getKey(),LocalizedObjectTypes.PRICEMODEL_DESCRIPTION);  voPM.setDescription(description);  voPM.setFreePeriod(priceModel.getFreePeriod());  voPM.setSelectedParameters(ParameterAssembler.toVOPricedParameters(priceModel.getSelectedParameters(),facade));  if (priceModel.isExternal()) {    LocalizedBillingResource localizedPriceModelPresentation=facade.getLocalizedPriceModelResource(priceModel.getUuid());    if (localizedPriceModelPresentation != null) {      voPM.setRelatedSubscription(localizedPriceModelPresentation.getResourceType() == LocalizedBillingResourceType.PRICEMODEL_SUBSCRIPTION);      voPM.setPresentation(localizedPriceModelPresentation.getValue());      voPM.setPresentationDataType(localizedPriceModelPresentation.getDataType());    }  }}  }
class C{  public static void drag(float fromX,float toX,float fromY,float toY,int stepCount){  Instrumentation inst=InstrumentationRegistry.getInstrumentation();  long downTime=SystemClock.uptimeMillis();  long eventTime=SystemClock.uptimeMillis();  float y=fromY;  float x=fromX;  float yStep=(toY - fromY) / stepCount;  float xStep=(toX - fromX) / stepCount;  MotionEvent event=MotionEvent.obtain(downTime,eventTime,MotionEvent.ACTION_DOWN,x,y,0);  inst.sendPointerSync(event);  for (int i=0; i < stepCount; ++i) {    y+=yStep;    x+=xStep;    eventTime=SystemClock.uptimeMillis();    event=MotionEvent.obtain(downTime,eventTime,MotionEvent.ACTION_MOVE,x,y,0);    inst.sendPointerSync(event);  }  eventTime=SystemClock.uptimeMillis();  event=MotionEvent.obtain(downTime,eventTime,MotionEvent.ACTION_UP,x,y,0);  inst.sendPointerSync(event);  inst.waitForIdleSync();}  }
class C{  public Term(String fld){  this(fld,new BytesRef());}  }
class C{  public void add(CarbonLevel level,CarbonQuery.SortType sortType,List<CarbonMeasureFilter> msrFilters,CarbonDimensionLevelFilter dimLevelFilter){  CarbonLevelHolder holder=new CarbonLevelHolder(level,sortType);  holder.setMsrFilters(msrFilters);  holder.setDimLevelFilter(dimLevelFilter);  dims.add(holder);}  }
class C{  public JSONArray put(int index,Map value) throws JSONException {  this.put(index,new JSONObject(value));  return this;}  }
class C{  private void decode(byte[] data,int width,int height){  long start=System.currentTimeMillis();  Camera.Size size=activity.getCameraManager().getPreviewSize();  byte[] rotatedData=new byte[data.length];  for (int y=0; y < size.height; y++) {    for (int x=0; x < size.width; x++)     rotatedData[x * size.height + size.height - y - 1]=data[x + y * size.width];  }  int tmp=size.width;  size.width=size.height;  size.height=tmp;  String resultStr=null;  Rect cropRect=activity.getCropRect();  if (null == cropRect) {    activity.initCrop();  }  cropRect=activity.getCropRect();  TLog.d(TAG,cropRect.toString());  mDecodeUtils.setDataMode(activity.getDataMode());  String zbarStr=mDecodeUtils.decodeWithZbar(rotatedData,size.width,size.height,cropRect);  String zxingStr=mDecodeUtils.decodeWithZxing(rotatedData,size.width,size.height,cropRect);  if (!TextUtils.isEmpty(zbarStr)) {    mDecodeMode=DecodeUtils.DECODE_MODE_ZBAR;    resultStr=zbarStr;  } else   if (!TextUtils.isEmpty(zxingStr)) {    mDecodeMode=DecodeUtils.DECODE_MODE_ZXING;    resultStr=zxingStr;  }  Handler handler=activity.getHandler();  if (!TextUtils.isEmpty(resultStr)) {    long end=System.currentTimeMillis();    if (handler != null) {      Message message=Message.obtain(handler,Constants.ID_DECODE_SUCCESS,resultStr);      Bundle bundle=new Bundle();      PlanarYUVLuminanceSource source=new PlanarYUVLuminanceSource(rotatedData,size.width,size.height,cropRect.left,cropRect.top,cropRect.width(),cropRect.height(),false);      bundle.putInt(DecodeThread.DECODE_MODE,mDecodeMode);      bundle.putString(DecodeThread.DECODE_TIME,(end - start) + "ms");      bundleThumbnail(source,bundle);      message.setData(bundle);      message.sendToTarget();    }  } else {    if (handler != null) {      Message message=Message.obtain(handler,Constants.ID_DECODE_FAILED);      message.sendToTarget();    }  }}  }
class C{  public final boolean isPrivate(){  return Modifier.isPrivate(getModifiers());}  }
class C{  public void computeHole(){  LinearRing ring=getRing();  isHole=CGAlgorithms.isCCW(ring.getCoordinates());}  }
class C{  public void appendToLog(String s){  append("\n" + s);}  }
class C{  public void write(int bits,int width) throws IOException {  if (bits == 0 && width == 0) {    return;  }  if (width <= 0 || width > 32) {    throw new IOException("Bad write width.");  }  while (width > 0) {    int actual=width;    if (actual > this.vacant) {      actual=this.vacant;    }    this.unwritten|=((bits >>> (width - actual)) & BitInputStream.mask[actual]) << (this.vacant - actual);    width-=actual;    nrBits+=actual;    this.vacant-=actual;    if (this.vacant == 0) {      this.out.write(this.unwritten);      this.unwritten=0;      this.vacant=8;    }  }}  }
class C{  public void sendEvent(final String name,final Map<String,String> properties){  final String eventName=String.format(TfsTelemetryConstants.PLUGIN_ACTION_EVENT_NAME_FORMAT,name);  final PropertyMapBuilder builder=new PropertyMapBuilder(properties);  logger.debug(String.format("sendEvent(%s, %s)",name,builder.toString()));  if (telemetryClient != null) {    telemetryClient.trackEvent(eventName,builder.build(),null);  }}  }
class C{  public void vetoableChange(PropertyChangeEvent evt) throws PropertyVetoException {  if (evt.getSource() instanceof VEditor) {    GridField changedField=((VEditor)evt.getSource()).getField();    if (changedField != null) {      processDependencies(changedField);    }  }  processNewValue(evt.getNewValue(),evt.getPropertyName());}  }
class C{  public void serialEvent(SerialPortEvent event){switch (event.getEventType()) {case SerialPortEvent.BI:case SerialPortEvent.OE:case SerialPortEvent.FE:case SerialPortEvent.PE:case SerialPortEvent.CD:case SerialPortEvent.CTS:case SerialPortEvent.DSR:case SerialPortEvent.RI:case SerialPortEvent.OUTPUT_BUFFER_EMPTY:    break;case SerialPortEvent.DATA_AVAILABLE:  log.debug("Data Available");handleOneIncomingReply();break;}}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.720 -0400",hash_original_method="981FD37767829C6F7D8558BD0416446C",hash_generated_method="EF53AA7565D23EFB8E8E742395670F3B") @Override public boolean accept(File file){  return file.isFile();}  }
class C{  public void createFailureJointCount(){  new Capacity(0,-3,0);}  }
class C{  public void endDocument(){  LOG.info("Completed parse.  Found " + pages + " pages.");}  }
class C{  public Container(Layout layout){  super();  setUIID("Container");  this.layout=layout;  setFocusable(false);}  }
class C{  public BrownianBridge(final TimeGrid timeGrid){  this.size_=timeGrid.size() - 1;  this.t_=new double[this.size_];  this.sqrtdt_=new double[this.size_];  this.bridgeIndex_=new int[this.size_];  this.leftIndex_=new int[this.size_];  this.rightIndex_=new int[this.size_];  this.leftWeight_=new double[this.size_];  this.rightWeight_=new double[this.size_];  this.stdDev_=new double[this.size_];  for (int i=0; i < size_; ++i) {    t_[i]=timeGrid.get(i + 1);  }  initialize();}  }
class C{  private List<Recommendation> createMetroPointRecommendations(VirtualArray srcVarray,List<VirtualArray> tgtVarrays,VirtualPool srcVpool,VirtualArray haVarray,VirtualPool haVpool,Project project,VirtualPoolCapabilityValuesWrapper capabilities,List<StoragePool> candidatePrimaryPools,List<StoragePool> candidateSecondaryPools,Volume vpoolChangeVolume){  List<Recommendation> recommendations=new ArrayList<Recommendation>();  RPProtectionRecommendation rpProtectionRecommendaton=null;  Map<VirtualArray,List<StoragePool>> tgtVarrayStoragePoolsMap=getVplexTargetMatchingPools(tgtVarrays,srcVpool,project,capabilities,vpoolChangeVolume);  rpProtectionRecommendaton=createRPProtectionRecommendationForMetroPoint(srcVarray,tgtVarrays,srcVpool,haVarray,haVpool,capabilities,candidatePrimaryPools,candidateSecondaryPools,tgtVarrayStoragePoolsMap,vpoolChangeVolume,project);  _log.info(String.format("Produced %s recommendations for MetroPoint placement.",rpProtectionRecommendaton.getResourceCount()));  recommendations.add(rpProtectionRecommendaton);  return recommendations;}  }
class C{  private void openSelected(final boolean analyze,final boolean useCustomFilters){  if (table.isEditable())   return;  IRepFiltersBean customFiltersBean=null;  if (useCustomFilters) {    final RepFiltersEditorDialog filtersEditorDialog=new RepFiltersEditorDialog();    if (!filtersEditorDialog.isOk())     return;    customFiltersBean=filtersEditorDialog.getRepFiltersBean();  }  IPage<?> firstPage=null;  for (  final int row : table.getSelectedModelRows()) {    final RepFolderBean rfBean=(RepFolderBean)table.getModel().getValueAt(row,beanColIdx);    IPage<?> page;    if (analyze)     Env.MAIN_FRAME.getMultiRepAnalyzersPage().addChild(page=useCustomFilters ? new MultiRepAnalyzerPage(rfBean,customFiltersBean) : new MultiRepAnalyzerPage(rfBean)); else     Env.MAIN_FRAME.getRepFoldersPage().addChild(page=useCustomFilters ? new RepListPage(rfBean,customFiltersBean) : new RepListPage(rfBean));    if (firstPage == null)     firstPage=page;  }  if (firstPage != null) {    Env.MAIN_FRAME.rebuildMainPageTree();    Env.MAIN_FRAME.multiPageComp.selectPage(firstPage);  }}  }
class C{  @Deprecated final static public boolean bind(final IPredicate<?> pred,final IConstraint[] constraints,final Object e,final IBindingSet bindings){  copyValues((IElement)e,pred,bindings);  if (constraints != null) {    return BOpUtility.isConsistent(constraints,bindings);  }  return true;}  }
class C{  public boolean checkAbsolute(LocPathIterator path){  m_isAbs=true;  path.callVisitors(null,this);  return m_isAbs;}  }
class C{  @Override protected String selectedDecoderType(){  if (!isDecoderSelected()) {    return null;  } else {    return mDecoderList.getSelectedValue();  }}  }
class C{  private static Class registerTypeMapping(RPCServer server,Class clazz){  java.lang.reflect.Method[] methods=clazz.getMethods();  java.lang.reflect.Method method;  Class[] params;  for (int i=0; i < methods.length; i++) {    method=methods[i];    if (method.getDeclaringClass() == clazz) {      _registerTypeMapping(server,method.getReturnType());      params=method.getParameterTypes();      for (int y=0; y < params.length; y++) {        _registerTypeMapping(server,params[y]);      }    }  }  return clazz;}  }
class C{  public void destroy(){  m_filterConfig=null;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public String toString(){  return new String(chars);}  }
class C{  public void removeColumnListener(ColumnListener listener){  m_listeners.remove(listener);}  }
class C{  public EvaluationStatisticsTableModel(){  this(new ArrayList<EvaluationStatistics>());}  }
class C{  public List<Long> fillChart(PieChart chart,StatisticType type){  if (chart == null)   return null;  chart.clear();  List<Long> shownChallenges=new ArrayList<>();  PieData data;switch (type) {case TYPE_DUE:    data=mDataLogic.findDueData();  chart.setCenterText(mApplication.getString(R.string.due_chart_center_text));break;case TYPE_STAGE:data=mDataLogic.findStageData();chart.setCenterText(mApplication.getString(R.string.stage_chart_center_text));break;default :data=mDataLogic.findMostPlayedData(type,shownChallenges);chart.setCenterText("");chart.getLegend().setEnabled(false);}if (data != null) {chart.setData(data);mSettings.applyChartSettings(chart);} else {mSettings.applyNoDataSettings(chart);}return (shownChallenges.size() > 0) ? shownChallenges : null;}  }
class C{  public void testVerifyJBossHomeWhenMissingRunJar() throws Exception {  this.fsManager.resolveFile("ram:///jboss/bin/shutdown.jar").createFile();  this.fsManager.resolveFile("ram:///jboss/client/something").createFile();  this.fsManager.resolveFile("ram:///jboss/lib/something").createFile();  this.fsManager.resolveFile("ram:///jboss/lib/endorsed/something").createFile();  this.fsManager.resolveFile("ram:///jboss/server/something").createFile();  try {    this.container.verifyJBossHome();    fail("Should have thrown an exception here");  } catch (  ContainerException expected) {    assertEquals("Invalid JBoss installation. The [ram:///jboss/bin/run.jar] JAR doesn't " + "exist. Make sure the JBoss container home directory you have specified points " + "to the right location (It's currently pointing to [ram:///jboss])",expected.getMessage());  }}  }
class C{  public boolean calculateSrcSpans(){  return calculateSrcSpans;}  }
class C{  public String toString(){  return length > 0 ? new String(ch,offset,length) : "";}  }
class C{  public final Address pop2(){  return uncheckedDequeue();}  }
class C{  synchronized void killPlayThread(){  setThreadShouldStop(true);  try {    if (playThread != null) {      do {        try {synchronized (simulation.state.schedule) {            playThread.interrupt();          }        } catch (        SecurityException ex) {        }        playThread.join(50);      } while (playThread.isAlive());      playThread=null;    }  } catch (  InterruptedException e) {    System.err.println("WARNING: This should never happen: " + e);  }}  }
class C{  public BusinessObjectFormatEntity createBusinessObjectFormatEntity(BusinessObjectFormatKey businessObjectFormatKey,String businessObjectFormatDescription,Boolean businessObjectFormatLatestVersion,String businessObjectFormatPartitionKey){  return createBusinessObjectFormatEntity(businessObjectFormatKey.getNamespace(),businessObjectFormatKey.getBusinessObjectDefinitionName(),businessObjectFormatKey.getBusinessObjectFormatUsage(),businessObjectFormatKey.getBusinessObjectFormatFileType(),businessObjectFormatKey.getBusinessObjectFormatVersion(),businessObjectFormatDescription,businessObjectFormatLatestVersion,businessObjectFormatPartitionKey);}  }
class C{  public void checkFontSaved(final Object glyph,final String name,final PdfFont currentFontData){  pageObjects.addElement(glyph);  objectType.addElement(DynamicVectorRenderer.MARKER);  areas.addElement(null);  currentItem++;  if (fontsUsed.contains(name) || currentFontData.isFontSubsetted()) {    fonts.put(name,currentFontData.getGlyphData());    fontsUsed.add(name);  }}  }
class C{  public boolean hasTradePosition(){  if (null == getTradePosition())   return false;  return true;}  }
class C{  @Override public void process(HashMap<K,V> tuple){  for (  Map.Entry<K,V> e : tuple.entrySet()) {    if (key.isConnected()) {      key.emit(cloneKey(e.getKey()));    }    if (val.isConnected()) {      val.emit(cloneValue(e.getValue()));    }    if (keyval.isConnected()) {      keyval.emit(new KeyValPair<K,V>(cloneKey(e.getKey()),cloneValue(e.getValue())));    }  }}  }
class C{  public Boolean isMemory(){  return memory;}  }
class C{  public void writeBackupProperties(URI backupLoc,String backupId,Properties props) throws IOException {  URI dest=repository.resolve(backupLoc,backupId,BACKUP_PROPS_FILE);  try (Writer propsWriter=new OutputStreamWriter(repository.createOutput(dest),StandardCharsets.UTF_8)){    props.store(propsWriter,"Backup properties file");  } }  }
class C{  public T caseAnonymous_singleIsA_1_(Anonymous_singleIsA_1_ object){  return null;}  }
class C{  public static StringBuilder formatTo(StringBuilder buf,int[] d,String sep){  if (d == null) {    return buf.append("null");  }  if (d.length == 0) {    return buf;  }  buf.append(d[0]);  for (int i=1; i < d.length; i++) {    buf.append(sep);    buf.append(d[i]);  }  return buf;}  }
class C{  private double maxMoved(double[][] means,double[][] newmeans,double[] dists){  assert (means.length == k);  assert (newmeans.length == k);  assert (dists.length == k);  boolean issquared=(distanceFunction instanceof SquaredEuclideanDistanceFunction);  double max=0.;  for (int i=0; i < k; i++) {    double d=distanceFunction.distance(DoubleVector.wrap(means[i]),DoubleVector.wrap(newmeans[i]));    d=issquared ? Math.sqrt(d) : d;    dists[i]=d;    max=(d > max) ? d : max;  }  return max;}  }
class C{  public static void write(byte[] from,File to) throws IOException {  asByteSink(to).write(from);}  }
class C{  public Record[] run(){  if (done)   reset();  if (name.isAbsolute())   resolve(name,null); else   if (searchPath == null)   resolve(name,Name.root); else {    if (name.labels() > defaultNdots)     resolve(name,Name.root);    if (done)     return answers;    for (int i=0; i < searchPath.length; i++) {      resolve(name,searchPath[i]);      if (done)       return answers; else       if (foundAlias)       break;    }  }  if (!done) {    if (badresponse) {      result=TRY_AGAIN;      error=badresponse_error;      done=true;    } else     if (timedout) {      result=TRY_AGAIN;      error="timed out";      done=true;    } else     if (networkerror) {      result=TRY_AGAIN;      error="network error";      done=true;    } else     if (nxdomain) {      result=HOST_NOT_FOUND;      done=true;    } else     if (referral) {      result=UNRECOVERABLE;      error="referral";      done=true;    } else     if (nametoolong) {      result=UNRECOVERABLE;      error="name too long";      done=true;    }  }  return answers;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static double tCdf(double x,double df){  double t, y, b, a, z, j, n, cdf;  n=df;  z=1.0;  t=x * x;  y=t / n;  b=1.0 + y;  if ((n > Math.floor(n)) || ((n >= 20.0) && (t < n)) || (n > 20.0)) {    if ((n < 2.0) && (n != 1.0)) {      double da=0.5, db=0.5 * n, dx, dp;      dx=db / (db + da * t);      dp=betaCdf(dx,db,da);      cdf=(x >= 0) ? 1.0 - .5 * dp : .5 * dp;    } else {      if (y > TOL) {        y=Math.log(b);      }      a=n - 0.5;      b=48.0 * a * a;      y=a * y;      y=(((((-0.4 * y - 3.3) * y - 24.0) * y - 85.5) / (0.8 * y * y + 100.0 + b) + y + 3.0) / b + 1.0) * Math.sqrt(y);      y=-1.0 * y;      cdf=normalCdf(y);      if (x > 0.0) {        cdf=1.0 - cdf;      }    }  } else {    if ((n < 20.0) && (t < 4.0)) {      a=Math.sqrt(y);      y=a;      if (n == 1.0) {        a=0.0;      }    } else {      a=Math.sqrt(b);      y=a * n;      for (j=2; Math.abs(a - z) > TOL; j+=2.0) {        z=a;        y=(y * (j - 1)) / (b * j);        a=a + y / (n + j);      }      n+=2.0;      z=0.0;      y=0.0;      a=-a;    }    for (n=n - 2.0; n > 1.0; n-=2.0) {      a=((n - 1.0) / (b * n)) * a + y;    }    a=(Math.abs(n) < TOL) ? a / Math.sqrt(b) : TWOVRPI * (Math.atan(y) + a / b);    cdf=z - a;    if (x > 0.0) {      cdf=1.0 - 0.5 * cdf;    } else {      cdf=0.5 * cdf;    }  }  return cdf;}  }
class C{  public void appendToFsb(org.apache.xml.utils.FastStringBuffer fsb){  fsb.append((char[])m_obj,m_start,m_length);}  }
class C{  private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {  in.defaultReadObject();  doReadObject(in);}  }
class C{  public void addBreakpointListener(final BreakpointListener listener){  breakpointListeners.add(listener);}  }
class C{  @Override public void updateTask(){  EntityLivingBase entitylivingbase=this.entity.getAttackTarget();  if (entitylivingbase != null) {    double d0=this.entity.getDistanceSq(entitylivingbase.posX,entitylivingbase.getEntityBoundingBox().minY,entitylivingbase.posZ);    boolean flag=this.entity.getEntitySenses().canSee(entitylivingbase);    boolean flag1=this.seeTime > 0;    if (flag != flag1) {      this.seeTime=0;    }    if (flag) {      ++this.seeTime;    } else {      --this.seeTime;    }    if (d0 <= this.maxAttackDistance && this.seeTime >= 20) {      this.entity.getNavigator().clearPathEntity();      ++this.strafingTime;    } else {      this.entity.getNavigator().tryMoveToEntityLiving(entitylivingbase,this.moveSpeedAmp);      this.strafingTime=-1;    }    if (this.strafingTime >= 20) {      if (this.entity.getRNG().nextFloat() < 0.3D) {        this.strafingClockwise=!this.strafingClockwise;      }      if (this.entity.getRNG().nextFloat() < 0.3D) {        this.strafingBackwards=!this.strafingBackwards;      }      this.strafingTime=0;    }    if (this.strafingTime > -1) {      if (d0 > this.maxAttackDistance * 0.75F) {        this.strafingBackwards=false;      } else       if (d0 < this.maxAttackDistance * 0.25F) {        this.strafingBackwards=true;      }      this.entity.getMoveHelper().strafe(this.strafingBackwards ? -0.5F : 0.5F,this.strafingClockwise ? 0.5F : -0.5F);      this.entity.faceEntity(entitylivingbase,30.0F,30.0F);    } else {      this.entity.getLookHelper().setLookPositionWithEntity(entitylivingbase,30.0F,30.0F);    }    if (this.entity.isHandActive()) {      if (!flag && this.seeTime < -60) {        this.entity.resetActiveHand();      } else       if (flag) {        int i=this.entity.getItemInUseMaxCount();        if (i >= 20) {          this.entity.resetActiveHand();          this.entity.attackEntityWithRangedAttack(entitylivingbase,ItemBow.getArrowVelocity(i));          this.attackTime=this.attackCooldown;        }      }    } else     if (--this.attackTime <= 0 && this.seeTime >= -60) {      this.entity.setActiveHand(EnumHand.MAIN_HAND);    }  }}  }
class C{  public boolean isIdent(){  return isIdent;}  }
class C{  protected void doDrawToStereoDevice(DrawContext dc){  GL2 gl=dc.getGL().getGL2();  View dcView=dc.getView();  if (this.isSwapEyes())   gl.glDrawBuffer(GL2.GL_BACK_RIGHT); else   gl.glDrawBuffer(GL2.GL_BACK_LEFT);  gl.glClear(GL.GL_COLOR_BUFFER_BIT | GL.GL_DEPTH_BUFFER_BIT);  super.draw(dc);  Angle viewHeading=dcView.getHeading();  dcView.setHeading(dcView.getHeading().subtract(this.getFocusAngle()));  dcView.apply(dc);  try {    if (this.isSwapEyes())     gl.glDrawBuffer(GL2.GL_BACK_LEFT); else     gl.glDrawBuffer(GL2.GL_BACK_RIGHT);    gl.glClear(GL.GL_COLOR_BUFFER_BIT | GL.GL_DEPTH_BUFFER_BIT);    super.draw(dc);  }  finally {    dcView.setHeading(viewHeading);    dcView.apply(dc);  }}  }
class C{  @Interruptible private static void printColumnNames(){  Log.write("GC\t");  for (int c=0; c < counters; c++) {    if (counter[c].mergePhases()) {      Log.write(counter[c].getName());      Log.write(counter[c].getColumnSuffix());      Log.write("\t");    } else {      Log.write(counter[c].getName());      Log.write(counter[c].getColumnSuffix());      Log.write(".mu\t");      Log.write(counter[c].getName());      Log.write(counter[c].getColumnSuffix());      Log.write(".gc\t");    }  }  Log.writeln();}  }
class C{  public void testSomeSequences(){  assertTrue(asBytes("").isValidUtf8());  assertTrue(asBytes("\u0000abc\u007f").isValidUtf8());  assertTrue(asBytes("\u00a2\u00a2").isValidUtf8());  assertTrue(asBytes("\u020ac\u020ac").isValidUtf8());  assertTrue(asBytes("\u024B62\u024B62").isValidUtf8());  assertTrue(asBytes("a\u020ac\u00a2b\\u024B62u020acc\u00a2de\u024B62").isValidUtf8());  assertInvalidUtf8(-1,0,-1,0);}  }
class C{  public void addArrayDimension(){  arrayDims++;}  }
class C{  public static byte[] decode(byte[] source){  byte[] decoded=null;  try {    decoded=decode(source,0,source.length,Base64.NO_OPTIONS);  } catch (  java.io.IOException ex) {    assert false : "IOExceptions only come from GZipping, which is turned off: " + ex.getMessage();  }  return decoded;}  }
class C{  public ByteArrayOutputStream(){  this(1024);}  }
class C{  public IllegalTriangleException(double side1,double side2,double side3){  super("Illegal sides " + side1 + " "+ side2+ " "+ side3);  this.side1=side1;  this.side2=side2;  this.side3=side3;}  }
class C{  @Override protected EClass eStaticClass(){  return MappingPackage.Literals.STATUS_SOURCE;}  }
class C{  public static byte[] encode(byte[] source,int off,int len,byte[] alphabet,int maxLineLength){  int lenDiv3=(len + 2) / 3;  int len43=lenDiv3 * 4;  byte[] outBuff=new byte[len43 + (len43 / maxLineLength)];  int d=0;  int e=0;  int len2=len - 2;  int lineLength=0;  for (; d < len2; d+=3, e+=4) {    int inBuff=((source[d + off] << 24) >>> 8) | ((source[d + 1 + off] << 24) >>> 16) | ((source[d + 2 + off] << 24) >>> 24);    outBuff[e]=alphabet[(inBuff >>> 18)];    outBuff[e + 1]=alphabet[(inBuff >>> 12) & 0x3f];    outBuff[e + 2]=alphabet[(inBuff >>> 6) & 0x3f];    outBuff[e + 3]=alphabet[(inBuff) & 0x3f];    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;      lineLength=0;    }  }  if (d < len) {    encode3to4(source,d + off,len - d,outBuff,e,alphabet);    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;    }    e+=4;  }  assert (e == outBuff.length);  return outBuff;}  }
class C{  RollupWindow(int windowID,DTVCCDirection direction){  this.rect=null;  this.windowID=windowID;  this.direction=direction;}  }
class C{  private static void startIntent(Context context,String uri){  Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(uri));  context.startActivity(intent);}  }
class C{  protected final void GET_TIME_BASE(Instruction s,RegisterOperand result){  if (VM.BuildFor32Addr) {    Register highReg=result.getRegister();    Register lowReg=regpool.getSecondReg(highReg);    EMIT(CPOS(s,MIR_RDTSC.create(IA32_RDTSC,new RegisterOperand(getEAX(),TypeReference.Int),new RegisterOperand(getEDX(),TypeReference.Int))));    EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(lowReg,TypeReference.Int),new RegisterOperand(getEAX(),TypeReference.Int))));    EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(highReg,TypeReference.Int),new RegisterOperand(getEDX(),TypeReference.Int))));  } else {    Register res=result.getRegister();    EMIT(CPOS(s,MIR_RDTSC.create(IA32_RDTSC,new RegisterOperand(getEAX(),TypeReference.Int),new RegisterOperand(getEDX(),TypeReference.Int))));    EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(res,TypeReference.Long),new RegisterOperand(getEDX(),TypeReference.Long))));    EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_SHL,new RegisterOperand(getEDX(),TypeReference.Long),LC(32))));    EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_OR,new RegisterOperand(res,TypeReference.Long),new RegisterOperand(getEAX(),TypeReference.Long))));  }}  }
class C{  public void subscribe(boolean subscribe){  if (subscribe)   setSubscribeDate(null); else   setOptOutDate(null);}  }
class C{  public Map<Integer,Double> compute(int... dataset){  return computeInPlace(intsToDoubles(dataset));}  }
class C{  public Set(Class<?> type,String name){  super(type,type);  this.name=name;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:09.099 -0500",hash_original_method="A088283C6D3AFB361E7B10D0999AC3A3",hash_generated_method="7C560D97AD8C6B301BF770F86C880C01") public void disconnect() throws IOException {  super.disconnect();  _reader_=null;  _writer_=null;  _replyString=null;  _isAllowedToPost=false;}  }
class C{  public double squaredNorm(){  return x * x + y * y + z * z;}  }
class C{  public static void main(String[] args){  JavadocTester tester=new AccessSummary();  run(tester,JAVADOC_ARGS,TESTARRAY1,new String[][]{});  tester.printSummary();}  }
class C{  public static Complex subtract(Complex first,Complex second){  return new Complex(first.left() - second.left(),first.right() - second.right());}  }
class C{  protected void handleSectionStateChange(AllocatedSection as){  if (!isInAllocatedList(as)) {    addAllocatedSection(as);  }}  }
class C{  public int markInputPosition(){  return ptr;}  }
class C{  private void doWaitFor(Process process){  startReadStreamThread(process.getInputStream());  startReadStreamThread(process.getErrorStream());  try {    process.waitFor();  } catch (  InterruptedException e) {    log.warn("e=",e);  }}  }
class C{  public LimeTextField(String text){  super(text);  init();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.476 -0400",hash_original_method="423B72A848C918F2592E84C74B14F648",hash_generated_method="F90A3FFCCBFE0EFFBA55263D9E24990E") @Override public boolean accept(File file){  return file.isHidden();}  }
class C{  public static boolean isProfile(File path){  if (path.isDirectory()) {    if ((new File(path,SHARED_PROPERTIES)).canRead()) {      return true;    }    if ((new File(path,PROPERTIES)).canRead()) {      return true;    }  }  return false;}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.example.gov";  Document doc;  NodeList elementList;  Node testAddr;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("em");  testAddr=elementList.item(0);{    boolean success=false;    try {      ((Element)testAddr).setAttributeNS(namespaceURI,"","newValue");    } catch (    DOMException ex) {      success=(ex.code == DOMException.INVALID_CHARACTER_ERR);    }    assertTrue("throw_INVALID_CHARACTER_ERR",success);  }}  }
class C{  public char currentChar(){  return desc.charAt(curPos);}  }
class C{  public int hashCode(){  return m_hashCode;}  }
class C{  @SuppressWarnings("unchecked") public synchronized E lastElement(){  try {    return (E)elementData[elementCount - 1];  } catch (  IndexOutOfBoundsException e) {    throw new NoSuchElementException();  }}  }
class C{  @PostConstruct void init(){  createComponents();  buildLayout();  restoreState();  eventBus.subscribe(this);  ui=UI.getCurrent();}  }
class C{  public HeapLayout(){  super(Harness.options,"Heap Layout","Heap Layout",Integer.valueOf(System.getProperty("mmtk.harness.heap-layout","0")));}  }
class C{  public static void checkGreaterOrEqualToZero(int number,String message){  if (number < 0) {    throw new IllegalArgumentException(message);  }}  }
class C{  public static boolean saveStringToFile(String saveFilePathAndName,String saveString){  if ((saveFilePathAndName == null) || saveFilePathAndName.isEmpty() || (saveString == null)|| saveString.isEmpty()) {    return false;  }  BufferedWriter writer=null;  try {    File outputFile=new File(saveFilePathAndName);    writer=new BufferedWriter(new FileWriter(outputFile));    writer.write(saveString);    return true;  } catch (  Exception e) {    logger.debug(e.toString() + System.lineSeparator() + StackTrace.getStringFromStackTrace(e));    return false;  } finally {    try {      if (writer != null) {        writer.close();      }    } catch (    Exception e) {      logger.debug(e.toString() + System.lineSeparator() + StackTrace.getStringFromStackTrace(e));    }  }}  }
class C{  private void onRenameFileOperationFinish(RenameFileOperation operation,RemoteOperationResult result){  dismissLoadingDialog();  OCFile renamedFile=operation.getFile();  if (result.isSuccess()) {    FileFragment details=getSecondFragment();    if (details != null) {      if (details instanceof FileDetailFragment && renamedFile.equals(details.getFile())) {        ((FileDetailFragment)details).updateFileDetails(renamedFile,getAccount());        showDetails(renamedFile);      } else       if (details instanceof PreviewMediaFragment && renamedFile.equals(details.getFile())) {        ((PreviewMediaFragment)details).updateFile(renamedFile);        if (PreviewMediaFragment.canBePreviewed(renamedFile)) {          int position=((PreviewMediaFragment)details).getPosition();          startMediaPreview(renamedFile,position,true);        } else {          getFileOperationsHelper().openFile(renamedFile);        }      } else       if (details instanceof PreviewTextFragment && renamedFile.equals(details.getFile())) {        ((PreviewTextFragment)details).updateFile(renamedFile);        if (PreviewTextFragment.canBePreviewed(renamedFile)) {          startTextPreview(renamedFile);        } else {          getFileOperationsHelper().openFile(renamedFile);        }      }    }    if (getStorageManager().getFileById(renamedFile.getParentId()).equals(getCurrentDir())) {      refreshListOfFilesFragment();    }  } else {    Toast msg=Toast.makeText(this,ErrorMessageAdapter.getErrorCauseMessage(result,operation,getResources()),Toast.LENGTH_LONG);    msg.show();    if (result.isSslRecoverableException()) {      mLastSslUntrustedServerResult=result;      showUntrustedCertDialog(mLastSslUntrustedServerResult);    }  }}  }
class C{  public ElementalGenerationMethod elementalmethod(){  return elementalmethod;}  }
class C{  public static double[][] chi2(Instances D){  int L=D.classIndex();  double X[][]=new double[L][L];  for (int j=0; j < L; j++) {    for (int k=j + 1; k < L; k++) {      X[j][k]=chi2(D,j,k);    }  }  return X;}  }
class C{  public IllegalArgumentException(java.lang.String s){}  }
class C{  protected Object clone() throws CloneNotSupportedException {  AbstractHashedMap cloned=(AbstractHashedMap)super.clone();  cloned.data=new HashEntry[data.length];  cloned.entrySet=null;  cloned.keySet=null;  cloned.values=null;  cloned.modCount=0;  cloned.size=0;  cloned.init();  cloned.putAll(this);  return cloned;}  }
class C{  @Override public void updateNull(String columnLabel) throws SQLException {  try {    debugCodeCall("updateNull",columnLabel);    update(columnLabel,ValueNull.INSTANCE);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  @Override public String printCheckStats(){  StringBuilder sb=new StringBuilder("Permission Check Statistics:\n");  checkStats.entrySet().stream().sorted(Map.Entry.comparingByValue()).forEachOrdered(null);  String stats=sb.toString();  log.trace(stats);  return stats;}  }
class C{  public boolean canScrollDown(){  return mScroll > mMinScroll;}  }
class C{  @Override public Operand copy(){  return new BranchOperand(target);}  }
class C{  public void decode(FacesContext context,UIComponent component){  if (context == null || component == null) {    return;  }  UIInput input=(UIInput)component;  String id=input.getId();  Object value=input.getValue();  GameBoard board=(GameBoard)value;  input.setValue(value);  Map parameters=context.getExternalContext().getRequestParameterMap();  String boardSize=(String)parameters.get("boardsize");  if (boardSize != null) {    int size=new Integer(boardSize).intValue();    if (board.getRows() != size) {      board.setRows(new Integer(boardSize).intValue());      board.setColumns(new Integer(boardSize).intValue());      board.initialize();    }  }  String coords=(String)parameters.get(id);  if (coords == null) {    return;  }  try {    board.setCurrent(coords);  } catch (  Exception ex) {    input.setValid(false);    context.addMessage(id,new FacesMessage(FacesMessage.SEVERITY_ERROR,"Invalid position","The position that you specified is invalid"));  }}  }
class C{  void trackMotionScroll(float deltaAngle){  if (getChildCount() == 0) {    return;  }  for (int i=0; i < getAdapter().getCount(); i++) {    CarouselItemView child=(CarouselItemView)getAdapter().getView(i,null,null);    float angle=child.getCurrentAngle();    angle+=deltaAngle;    while (angle > 360.0f)     angle-=360.0f;    while (angle < 0.0f)     angle+=360.0f;    child.setCurrentAngle(angle);    Calculate3DPosition(child,getWidth(),angle);  }  mRecycler.clear();  invalidate();}  }
class C{  public void addChild(ValueNode<V> node){  children.add(node);}  }
class C{  public Object encode(Object pObject) throws EncoderException {  if (!(pObject instanceof java.lang.String)) {    throw new EncoderException("Parameter supplied to Metaphone encode is not of type java.lang.String");  }  return metaphone((String)pObject);}  }
class C{  public ExtractConstantDescriptor(){  super(IJavaRefactorings.EXTRACT_CONSTANT);}  }
class C{  @Override @Deprecated public void invalidate(){  LOGGER.warn("deprecated method 'invalidate()' used...");}  }
class C{  public void bindAsVertexBuffer(DrawContext dc){  if (dc == null) {    String message=Logging.getMessage("nullValue.DrawContextIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.buffer.bindAsVertexBuffer(dc);}  }
class C{  public WSPortConnector(String remoteWsdlUrl,String userName,String password,String host) throws IOException, WSDLException {  this.userName=userName;  this.password=password;  URL url=new URL(remoteWsdlUrl);  if (requiresUserAuthentication(userName,password)) {    url=BasicAuthLoader.load(url,userName,password);  }  WSDLLocator locator=new BasicAuthWSDLLocator(remoteWsdlUrl,userName,password);  try {    details=getServiceDetails(locator,host);  }  finally {    locator.close();  }}  }
class C{  public void onDrawerOpened(View drawerView){  super.onDrawerOpened(drawerView);}  }
class C{  static short readShort(final byte[] b,final int index){  return (short)(((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF));}  }
class C{  public TagObject(int id){  this.id=id;}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public synchronized void waitUntilDone() throws InterruptedException {  boolean interrupted=false;  while (!(interrupted=Thread.interrupted()) && !done)   wait(1000);  if (interrupted)   throw new InterruptedException();}  }
class C{  @Override public synchronized void stop(){  if (running) {    if (statusLogger != null) {      statusLogger.cancel(false);    }    deduplicator.stop();    clear();    running=false;  }}  }
class C{  public Method find(String methodName,Object[] args) throws AmbiguousException {  List methodList=get(methodName);  if (methodList == null) {    return null;  }  int l=args.length;  Class[] classes=new Class[l];  for (int i=0; i < l; ++i) {    Object arg=args[i];    classes[i]=arg == null ? null : arg.getClass();  }  return getMostSpecific(methodList,classes);}  }
class C{  @Override public boolean isIntensityVariable(){  return false;}  }
class C{  private ScenarioResult createScenario(){switch (specification.getScenario()) {case EXTENDS:    return createExtensionScenario();case IMPLEMENTS:  return createImplementationScenario();case REFERENCES:return createReferenceScenario();}throw new IllegalArgumentException("Unexpected scenario: " + specification.getScenario());}  }
class C{  private static void last(int[] n1,int[] n2,int[] sum){  int b=n1.length;  int carry=0;  while (--b >= 0) {    int s=n1[b] + n2[b] + carry;    if (s > 9) {      sum[b + 1]=s - 10;      carry=1;    } else {      sum[b + 1]=s;      carry=0;    }  }  sum[0]=carry;}  }
class C{  public final void delete(int index){  m_Instances.removeElementAt(index);}  }
class C{  public Clean(){  super();}  }
class C{  public void testSingleLineStringRoundTrip() throws SQLException {  LineStringGenerator pg=new LineStringGenerator();  pg.setGeometryFactory(geometryFactory);  pg.setBoundingBox(new Envelope(0,10,0,10));  pg.setNumberPoints(10);  LineString pt=(LineString)pg.create();  OraWriter ow=new OraWriter();  STRUCT st=ow.write(pt,getConnection());  OraReader or=new OraReader();  LineString pt2=(LineString)or.read(st);  assertTrue("The input LineString is not the same as the output LineString",pt.equals(pt2));}  }
class C{  public boolean createBookmarkRollbackStep(String stepId){  WorkflowStepCompleter.stepExecuting(stepId);  _log.info(String.format("rollbackCreateBookmarkStep - Nothing to rollback for step id [%s], return",stepId));  WorkflowStepCompleter.stepSucceded(stepId);  return true;}  }
class C{  public void endVisit(IfStatement node){}  }
class C{  protected void updateHeader(){  TextView label=(TextView)mDayNamesHeader.findViewById(R.id.wk_label);  label.setVisibility(View.GONE);  int offset=mFirstDayOfWeek - 1;  for (int i=1; i < 8; i++) {    label=(TextView)mDayNamesHeader.getChildAt(i);    if (i < mDaysPerWeek + 1) {      int position=(offset + i) % 7;      label.setText(mDayLabels[position]);      label.setVisibility(View.VISIBLE);      if (position == Time.SATURDAY) {        label.setTextColor(mSaturdayColor);      } else       if (position == Time.SUNDAY) {        label.setTextColor(mSundayColor);      } else {        label.setTextColor(mDayNameColor);      }    } else {      label.setVisibility(View.GONE);    }  }  mDayNamesHeader.invalidate();}  }
class C{  public boolean isCase2(){  return isCase2;}  }
class C{  protected RuleMatchPair matchWithRule(IOFSwitch sw,OFPacketIn pi,FloodlightContext cntx){  FirewallRule matched_rule=null;  Ethernet eth=IFloodlightProviderService.bcStore.get(cntx,IFloodlightProviderService.CONTEXT_PI_PAYLOAD);  AllowDropPair adp=new AllowDropPair(sw.getOFFactory());synchronized (rules) {    Iterator<FirewallRule> iter=this.rules.iterator();    FirewallRule rule=null;    while (iter.hasNext()) {      rule=iter.next();      if (rule.matchesThisPacket(sw.getId(),(pi.getVersion().compareTo(OFVersion.OF_12) < 0 ? pi.getInPort() : pi.getMatch().get(MatchField.IN_PORT)),eth,adp) == true) {        matched_rule=rule;        break;      }    }  }  RuleMatchPair rmp=new RuleMatchPair();  rmp.rule=matched_rule;  if (matched_rule == null) {    Match.Builder mb=MatchUtils.createRetentiveBuilder(pi.getMatch());    mb.setExact(MatchField.ETH_SRC,eth.getSourceMACAddress()).setExact(MatchField.ETH_DST,eth.getDestinationMACAddress()).setExact(MatchField.ETH_TYPE,EthType.of(eth.getEtherType()));    if (mb.get(MatchField.ETH_TYPE).equals(EthType.IPv4)) {      IPv4 ipv4=(IPv4)eth.getPayload();      mb.setExact(MatchField.IPV4_SRC,ipv4.getSourceAddress()).setExact(MatchField.IPV4_DST,ipv4.getDestinationAddress()).setExact(MatchField.IP_PROTO,ipv4.getProtocol());      if (mb.get(MatchField.IP_PROTO).equals(IpProtocol.TCP)) {        TCP tcp=(TCP)ipv4.getPayload();        mb.setExact(MatchField.TCP_SRC,tcp.getSourcePort()).setExact(MatchField.TCP_DST,tcp.getDestinationPort());      } else       if (mb.get(MatchField.IP_PROTO).equals(IpProtocol.UDP)) {        UDP udp=(UDP)ipv4.getPayload();        mb.setExact(MatchField.UDP_SRC,udp.getSourcePort()).setExact(MatchField.UDP_DST,udp.getDestinationPort());      } else {      }    }    rmp.match=mb.build();  } else   if (matched_rule.action == FirewallRule.FirewallAction.DROP) {    rmp.match=adp.drop.build();  } else {    rmp.match=adp.allow.build();  }  return rmp;}  }
class C{  @Override public synchronized void put(String key,Entry entry){  pruneIfNeeded(entry.data.length);  File file=getFileForKey(key);  try {    BufferedOutputStream fos=new BufferedOutputStream(new FileOutputStream(file));    CacheHeader e=new CacheHeader(key,entry);    boolean success=e.writeHeader(fos);    if (!success) {      fos.close();      VolleyLog.d("Failed to write header for %s",file.getAbsolutePath());      throw new IOException();    }    fos.write(entry.data);    fos.close();    putEntry(key,e);    return;  } catch (  IOException e) {  }  boolean deleted=file.delete();  if (!deleted) {    VolleyLog.d("Could not clean up file %s",file.getAbsolutePath());  }}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append(Constants.INDENT);  buffer.append("mechanism: ");  buffer.append(mechanism);  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("pParameter: ");  buffer.append(pParameter.toString());  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("ulParameterLen: ??");  return buffer.toString();}  }
class C{  public VCard next(VCardVersion expectedVersion) throws IOException {  if (first) {    first=false;  } else {    if (!warningsChecked) {      warnings(0);    }    int total=vcard.getProperties().size();    assertEquals("The vCard has " + total + " properties, but only "+ propertiesChecked+ " were checked.",propertiesChecked,total);  }  vcard=reader.readNext();  propertiesChecked=0;  warningsChecked=false;  if (vcard != null) {    assertEquals(expectedVersion,vcard.getVersion());  }  return vcard;}  }
class C{  private void validateSQLFields(){  boolean flag=controller.isEnableSQLDatabaseOutput();  enableSQLDatabaseConnection.setSelected(flag);  sqlHostLabel.setEnabled(flag);  sqlHostField.setEnabled(flag);  sqlDatabaseLabel.setEnabled(flag);  sqlDatabaseField.setEnabled(flag);  sqlUserLabel.setEnabled(flag);  sqlUserField.setEnabled(flag);  sqlPasswordLabel.setEnabled(flag);  sqlPasswordField.setEnabled(flag);  enableZipEncodingCheckBox.setEnabled(flag);}  }
class C{  private boolean hasConnectivityToAllSystems(Initiator initiator,Collection<URI> storageSystems,ExportGroup exportGroup){  return hasConnectivityToAllSystems(initiator,storageSystems,null,exportGroup);}  }
class C{  public void endPrefixMapping(String prefix) throws SAXException {  flushStartDoc();  m_resultContentHandler.endPrefixMapping(prefix);}  }
class C{  public static String readAll(Reader rd) throws IOException {  StringBuilder sb=new StringBuilder();  int cp;  while ((cp=rd.read()) != -1) {    sb.append((char)cp);  }  return sb.toString();}  }
class C{  protected TextSyntax(String value,Locale locale){  this.value=verify(value);  this.locale=verify(locale);}  }
class C{  public static void addConceptMapAttributes(Element element,String conceptValueString){  String[] tokens=StringUtils.split(conceptValueString,"^");  ConceptService cs=Context.getConceptService();  try {    Concept concept=cs.getConcept(Integer.valueOf(tokens[0].trim()));    String prefSourceName=Context.getAdministrationService().getGlobalProperty(XformConstants.GLOBAL_PROP_KEY_PREFERRED_CONCEPT_SOURCE);    if (StringUtils.isNotBlank(prefSourceName)) {      ConceptSource preferredSource=cs.getConceptSourceByName(prefSourceName);      if (concept.getConceptMappings().size() > 0) {        if (preferredSource != null) {          for (          ConceptMap map : concept.getConceptMappings()) {            ConceptReferenceTerm term=map.getConceptReferenceTerm();            if (OpenmrsUtil.nullSafeEquals(preferredSource,term.getConceptSource())) {              element.setAttribute(null,ATTRIBUTE_OPENMRS_CONCEPT,term.getConceptSource().getName() + ":" + term.getCode());              return;            }          }        }      }    }  } catch (  NumberFormatException e) {    throw new IllegalArgumentException("Invalid concept value: " + conceptValueString,e);  }}  }
class C{  @SuppressWarnings("unchecked") public static <K,V>ImmutableListMultimap<K,V> of(){  return (ImmutableListMultimap<K,V>)EmptyImmutableListMultimap.INSTANCE;}  }
class C{  public static RecyclerViewHeader fromXml(Context context,@LayoutRes int layoutRes){  RecyclerViewHeader header=new RecyclerViewHeader(context);  View.inflate(context,layoutRes,header);  return header;}  }
class C{  public Object next(){  if (currentWord == null) {    LinkedVector vector=(LinkedVector)super.next();    if (vector != null)     currentWord=(Word)vector.get(0);  }  Word result=currentWord;  if (currentWord != null)   currentWord=(Word)currentWord.next;  return result;}  }
class C{  public void normalizeOutdir(){  if (outputDir != null)   return;  File destDir;  if (destinationDir != null) {    if (packageName == null) {      destDir=destinationDir;    } else {      String path=packageName.replace('.',File.separatorChar);      destDir=new File(destinationDir,path);    }  } else {    destDir=new File(inputFile.getParent());  }  setOutdir(destDir);}  }
class C{  public SVGPath relativeHorizontalLineTo(double x){  if (x > Double.NEGATIVE_INFINITY && x < Double.POSITIVE_INFINITY) {    append(PATH_HORIZONTAL_LINE_TO_RELATIVE,x);  }  return this;}  }
class C{  protected void registerOperator(Process process){  if (process != null) {    setName(process.registerName(getName(),this));  }}  }
class C{  public boolean isModernTls(){  return modernTls;}  }
class C{  public SQLRecoverableException(String reason,String sqlState){  super(reason,sqlState,0);}  }
class C{  public static Calendar toCalendar(Date date,TimeZone timeZone,Locale locale){  Calendar cal=getCalendarInstance(timeZone,locale);  if (date != null) {    cal.setTime(date);  }  return cal;}  }
class C{  public Boolean isCompressLargeMessage(){  if (ActiveMQResourceAdapter.trace) {    ActiveMQRALogger.LOGGER.trace("isCompressLargeMessage()");  }  return raProperties.isCompressLargeMessage();}  }
class C{  public Tasks<VolumeRestRep> createFullCopy(URI id,VolumeFullCopyCreateParam input){  return postTasks(input,getFullCopyUrl(),id);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:19.368 -0500",hash_original_method="CB8395C0A8B6CFC4974D10648908BD61",hash_generated_method="20E6E3A8ED32C619C18A9D0CB16FE443") protected int tryAcquireShared(int ignore){  return innerIsDone() ? 1 : -1;}  }
class C{  public void rolledback(CompositeTransaction tx){  removeTransaction(tx);}  }
class C{  public float avgPrimariesPerNode(){  return ((float)metaData.numberOfShards()) / nodes.size();}  }
class C{  public float noise(float x,float y,float z){  if (perlin == null) {    if (perlinRandom == null) {      perlinRandom=new Random();    }    perlin=new float[PERLIN_SIZE + 1];    for (int i=0; i < PERLIN_SIZE + 1; i++) {      perlin[i]=perlinRandom.nextFloat();    }    perlin_cosTable=PGraphics.cosLUT;    perlin_TWOPI=perlin_PI=PGraphics.SINCOS_LENGTH;    perlin_PI>>=1;  }  if (x < 0)   x=-x;  if (y < 0)   y=-y;  if (z < 0)   z=-z;  int xi=(int)x, yi=(int)y, zi=(int)z;  float xf=(float)(x - xi);  float yf=(float)(y - yi);  float zf=(float)(z - zi);  float rxf, ryf;  float r=0;  float ampl=0.5f;  float n1, n2, n3;  for (int i=0; i < perlin_octaves; i++) {    int of=xi + (yi << PERLIN_YWRAPB) + (zi << PERLIN_ZWRAPB);    rxf=noise_fsc(xf);    ryf=noise_fsc(yf);    n1=perlin[of & PERLIN_SIZE];    n1+=rxf * (perlin[(of + 1) & PERLIN_SIZE] - n1);    n2=perlin[(of + PERLIN_YWRAP) & PERLIN_SIZE];    n2+=rxf * (perlin[(of + PERLIN_YWRAP + 1) & PERLIN_SIZE] - n2);    n1+=ryf * (n2 - n1);    of+=PERLIN_ZWRAP;    n2=perlin[of & PERLIN_SIZE];    n2+=rxf * (perlin[(of + 1) & PERLIN_SIZE] - n2);    n3=perlin[(of + PERLIN_YWRAP) & PERLIN_SIZE];    n3+=rxf * (perlin[(of + PERLIN_YWRAP + 1) & PERLIN_SIZE] - n3);    n2+=ryf * (n3 - n2);    n1+=noise_fsc(zf) * (n2 - n1);    r+=n1 * ampl;    ampl*=perlin_amp_falloff;    xi<<=1;    xf*=2;    yi<<=1;    yf*=2;    zi<<=1;    zf*=2;    if (xf >= 1.0f) {      xi++;      xf--;    }    if (yf >= 1.0f) {      yi++;      yf--;    }    if (zf >= 1.0f) {      zi++;      zf--;    }  }  return r;}  }
class C{  private boolean updateZone(MDSDialog dialog,ZoneUpdate updateZone,Integer vsanId,List<Zone> zonesInFabric,boolean activateZones) throws NetworkDeviceControllerException {  _log.info("Updating zone: " + updateZone.getName() + " vsan: "+ vsanId);  boolean updated=false;  Zone zoneInFabric=getZoneInFabric(updateZone.getName(),zonesInFabric);  if (zoneInFabric != null) {    dialog.zoneNameVsan(updateZone.getName(),vsanId,false);    try {      Collection<String> memberAddresses=getWwnsInZone(zoneInFabric);      Collection<String> memberAliases=getAliasesInZone(zoneInFabric);      for (      ZoneMember zoneMember : updateZone.getRemoveZones()) {        if (!StringUtils.isEmpty(zoneMember.getAddress()) && memberAddresses.contains(zoneMember.getAddress())) {          dialog.zoneMemberPwwn(zoneMember.getAddress(),true);          _log.info("Zone member : " + zoneMember.getAddress() + " was removed.");        } else         if (!StringUtils.isEmpty(zoneMember.getAlias()) && memberAliases.contains(zoneMember.getAlias())) {          dialog.zoneMemberAlias(zoneMember.getAlias(),true);          _log.info("Zone member of type alias : " + zoneMember.getAlias() + " was removed.");        }      }      for (      ZoneMember zoneMember : updateZone.getAddZones()) {        if (!StringUtils.isEmpty(zoneMember.getAddress())) {          dialog.zoneMemberPwwn(zoneMember.getAddress());          _log.info("Zone member : " + zoneMember.getAddress() + " was added.");        } else         if (!StringUtils.isEmpty(zoneMember.getAlias())) {          dialog.zoneMemberAlias(zoneMember.getAlias());          _log.info("Zone member of type alias : " + zoneMember.getAlias() + " was added.");        }      }      _log.info("Updated zone: " + updateZone.getName() + " vsan: "+ vsanId);      updated=true;    }  finally {      dialog.exitToConfig();    }  } else {    throw NetworkDeviceControllerException.exceptions.zoneNotFoundInFabric(updateZone.getName(),vsanId.toString());  }  return updated;}  }
class C{  public TcpServer tcpServer(){  return _myOscNetManager.tcpServer();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(textwithnomarkup.class,args);}  }
class C{  public XYLocation east(){  return new XYLocation(xCoOrdinate + 1,yCoOrdinate);}  }
class C{  public void playNext(){  if (mNextListener != null && mNextButton != null && mNextButton.getVisibility() == View.VISIBLE) {    mNextListener.onClick(mNextButton);  }}  }
class C{  public static CloseableHttpClient basic(String user,String password){  return basic(null,null);}  }
class C{  private void initView(){  WebSettings settings=mWebView.getSettings();  settings.setJavaScriptEnabled(true);  settings.setSupportZoom(false);  btnComment.setClickable(false);  ScrollerBottomLayoutDelegation.delegation(mNestedScroller,mBottomLayout);}  }
class C{  public static boolean isDiscoveryJobTypeSupported(String jobType){  return jobType != null && Arrays.asList(DISCOVERY_JOB_TYPES).contains(jobType);}  }
class C{  public void addButtonActionPerformed(){  int nodeAddress=readNodeAddress();  if (nodeAddress < 0) {    return;  }  curNode=(SerialNode)_memo.getTrafficController().getNodeFromAddress(nodeAddress);  if (curNode != null) {    statusText1.setText(rb.getString("Error1") + Integer.toString(nodeAddress) + rb.getString("Error2"));    statusText1.setVisible(true);    errorInStatus1=true;    resetNotes2();    return;  }  if (!readReceiveDelay()) {    return;  }  if (!readPulseWidth()) {    return;  }  if (!checkConsistency()) {    return;  }  curNode=new SerialNode(nodeAddress,nodeType,_memo.getTrafficController());  setNodeParameters();  ((SerialSensorManager)_memo.getSensorManager()).registerSensorsForNode(curNode);  resetNotes();  changedNode=true;  statusText1.setText(rb.getString("FeedBackAdd") + " " + Integer.toString(nodeAddress));  errorInStatus1=true;}  }
class C{  public EObject basicGetAstElement(){  return astElement;}  }
class C{  public void log(@GuardSatisfied Level level,String msg,@GuardSatisfied Object param1){  throw new RuntimeException();}  }
class C{  public final synchronized boolean canMoveVariationUp(){  return game.canMoveVariation(-1);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private boolean journalRebuildRequired(){  final int redundantOpCompactThreshold=2000;  return redundantOpCount >= redundantOpCompactThreshold && redundantOpCount >= lruEntries.size();}  }
class C{  public void syncEvent(@NonNull MessageEvent messageEvent){  byte[] objectArray=messageEvent.getData();  int indexClassDelimiter=messageEvent.getPath().lastIndexOf(WearBusTools.CLASS_NAME_DELIMITER);  String className=messageEvent.getPath().substring(indexClassDelimiter + 1);  boolean isEventMessage=messageEvent.getPath().contains(WearBusTools.MESSAGE_PATH) || messageEvent.getPath().contains(WearBusTools.MESSAGE_PATH_STICKY);  if (isEventMessage) {    Object obj=WearBusTools.getSendSimpleObject(objectArray,className);    if (obj == null) {      obj=findParcel(objectArray,className);    }    if (obj != null) {      boolean isSticky=messageEvent.getPath().contains(WearBusTools.MESSAGE_PATH_STICKY);      if (isSticky) {        postStickyLocal(obj);      } else {        postLocal(obj);      }    }  } else   if (messageEvent.getPath().contains(WearBusTools.MESSAGE_PATH_COMMAND)) {    stickyEventCommand(messageEvent,objectArray,className);  }}  }
class C{  private void init(){  String cfName=_clazz.getAnnotation(Cf.class).value();  _cf=new ColumnFamily<String,CompositeColumnName>(cfName,StringSerializer.get(),CompositeColumnNameSerializer.get());  BeanInfo bInfo;  try {    bInfo=Introspector.getBeanInfo(_clazz);  } catch (  IntrospectionException ex) {    throw DatabaseException.fatals.serializationFailedInitializingBeanInfo(_clazz,ex);  }  PropertyDescriptor[] pds=bInfo.getPropertyDescriptors();  for (int i=0; i < pds.length; i++) {    PropertyDescriptor pd=pds[i];    if (!isColumnField(bInfo.getBeanDescriptor().getBeanClass().getName(),pd)) {      _log.info("Not column field, skip {}.{}",bInfo.getBeanDescriptor().getBeanClass().getName(),pd.getName());      continue;    }    ColumnField col=new ColumnField(this,pd);    if (col.getType() == ColumnField.ColumnType.Id) {      _idField=col;      continue;    }    _columnFieldMap.put(col.getName(),col);    if (col.isLazyLoaded()) {      _lazyLoadedFields.add(col);    }  }  Collection<ColumnField> fields=_columnFieldMap.values();  for (  ColumnField field : fields) {    DbIndex index=field.getIndex();    if (index instanceof AggregateDbIndex) {      String[] groupByArr=((AggregateDbIndex)index).getGroupBy();      for (      String groupByName : groupByArr) {        ColumnField groupField=_columnFieldMap.get(groupByName);        if (groupField == null || groupField.getIndex() == null) {          DatabaseException.fatals.invalidAnnotation("AggregateIndex","property " + groupByName + " does not have a valid value or referenced another indexed field");        }        ((AggregateDbIndex)index).addGroupByField(_columnFieldMap.get(groupByName));        if (groupField != null && groupField.getDependentFields() != null) {          groupField.getDependentFields().add(field);        }        field.getRefFields().add(groupField);      }      if (!field.getRefFields().isEmpty()) {        _preprocessedFields.add(field);      }    }  }  lazyLoadInit();}  }
class C{  public static void main(String[] args){  junit.textui.TestRunner.run(ResultSetTest.class);}  }
class C{  public int normalize(char s[],int len){  for (int i=0; i < len; i++) {switch (s[i]) {case '\u0928':      if (i + 1 < len && s[i + 1] == '\u094D') {        s[i]='\u0902';        len=delete(s,i + 1,len);      }    break;case '\u0901':  s[i]='\u0902';break;case '\u093C':len=delete(s,i,len);i--;break;case '\u0929':s[i]='\u0928';break;case '\u0931':s[i]='\u0930';break;case '\u0934':s[i]='\u0933';break;case '\u0958':s[i]='\u0915';break;case '\u0959':s[i]='\u0916';break;case '\u095A':s[i]='\u0917';break;case '\u095B':s[i]='\u091C';break;case '\u095C':s[i]='\u0921';break;case '\u095D':s[i]='\u0922';break;case '\u095E':s[i]='\u092B';break;case '\u095F':s[i]='\u092F';break;case '\u200D':case '\u200C':len=delete(s,i,len);i--;break;case '\u094D':len=delete(s,i,len);i--;break;case '\u0945':case '\u0946':s[i]='\u0947';break;case '\u0949':case '\u094A':s[i]='\u094B';break;case '\u090D':case '\u090E':s[i]='\u090F';break;case '\u0911':case '\u0912':s[i]='\u0913';break;case '\u0972':s[i]='\u0905';break;case '\u0906':s[i]='\u0905';break;case '\u0908':s[i]='\u0907';break;case '\u090A':s[i]='\u0909';break;case '\u0960':s[i]='\u090B';break;case '\u0961':s[i]='\u090C';break;case '\u0910':s[i]='\u090F';break;case '\u0914':s[i]='\u0913';break;case '\u0940':s[i]='\u093F';break;case '\u0942':s[i]='\u0941';break;case '\u0944':s[i]='\u0943';break;case '\u0963':s[i]='\u0962';break;case '\u0948':s[i]='\u0947';break;case '\u094C':s[i]='\u094B';break;default :break;}}return len;}  }
class C{  public AddUIResource(java.awt.Component c,EditableResources res){  super((java.awt.Frame)SwingUtilities.windowForComponent(c),true);  initComponents();  ModifiableJOptionPane.reverseOKCancel(ok,cancel);  name.setText(AddResourceDialog.nextAvailableName(res,"GUI"));  try {    templateDetails.setPage(getClass().getResource("/templates/BlankForm.html"));  } catch (  IOException ex) {    ex.printStackTrace();  }  pack();  setLocationRelativeTo(c);  setVisible(true);}  }
class C{  private E doRemove(Object okey,Object value){  Comparable<? super E> key=comparable(okey);  for (; ; ) {    Node<E> b=findPredecessor(key);    Node<E> n=b.next;    for (; ; ) {      if (n == null)       return null;      Node<E> f=n.next;      if (n != b.next)       break;      Object v=n.value;      if (v == null) {        n.helpDelete(b,f);        break;      }      if (v == n || b.value == null)       break;      int c=key.compareTo(n.key);      if (c < 0)       return null;      if (c > 0) {        b=n;        n=f;        continue;      }      if (value != null && !value.equals(v))       return null;      if (!n.casValue(v,null))       break;      if (!n.appendMarker(f) || !b.casNext(n,f))       findNode(key); else {        findPredecessor(key);        if (head.right == null)         tryReduceLevel();      }      return (E)v;    }  }}  }
class C{  public boolean isSetKey(){  return this.key != null;}  }
class C{  public Builder customProperty(Property property){  int index=customProperties.stream().filter(null).findFirst().map(null).orElse(-1);  if (index > -1) {    customProperties.set(index,property);  } else {    customProperties.add(property);  }  return this;}  }
class C{  void displayWarningLog(Window w){  ToolDialog wd=new ToolDialog(PolicyTool.getMessage("Warning"),tool,this,true);  Point location=((w == null) ? getLocationOnScreen() : w.getLocationOnScreen());  wd.setLayout(new GridBagLayout());  JTextArea ta=new JTextArea();  ta.setEditable(false);  for (int i=0; i < tool.warnings.size(); i++) {    ta.append(tool.warnings.elementAt(i));    ta.append(PolicyTool.getMessage("NEWLINE"));  }  addNewComponent(wd,ta,0,0,0,1,1,0.0,0.0,GridBagConstraints.BOTH,BOTTOM_PADDING);  ta.setFocusable(false);  JButton okButton=new JButton(PolicyTool.getMessage("OK"));  ActionListener okListener=new CancelButtonListener(wd);  okButton.addActionListener(okListener);  addNewComponent(wd,okButton,1,0,1,1,1,0.0,0.0,GridBagConstraints.VERTICAL,LR_PADDING);  wd.getRootPane().setDefaultButton(okButton);  wd.getRootPane().registerKeyboardAction(okListener,escKey,JComponent.WHEN_IN_FOCUSED_WINDOW);  wd.pack();  wd.setLocationRelativeTo(w);  wd.setVisible(true);}  }
class C{  void processNew(Instruction s){  for (  HeapOperand<?> def : ssa.getHeapDefs(s)) {    DF_LatticeCell c=findOrCreateCell(def.getHeapVariable());    if (c instanceof ObjectCell) {      ((ObjectCell)c).setBOTTOM();    } else {      ((ArrayCell)c).setBOTTOM();    }  }}  }
class C{  public void insert(int index,Boolean value){  if (value == null) {    insertNull(index);  } else {    _insert(index,booleanNode(value.booleanValue()));  }}  }
class C{  private void sendMessage(){  String msg=mMessageText.getText().toString();  Nearby.Connections.sendReliableMessage(mGoogleApiClient,mOtherEndpointId,msg.getBytes());  mMessageText.setText(null);}  }
class C{  @Override public synchronized int available(){  return count - pos;}  }
class C{  public LowerCaseFilter(TokenStream in){  super(in);}  }
class C{  protected void onPageScrolled(){  final int scrollX=getScrollX();  final int childCount=getChildCount();  for (int i=0; i < childCount; i++) {    final View child=getChildAt(i);    final float transformPos=(float)(child.getLeft() - scrollX) / getClientWidth();    transformPage(child,transformPos);  }}  }
class C{  public String toString(){  if (value == null) {    return '[' + localName + ']';  }  return '[' + localName + "=\""+ value+ "\"]";}  }
class C{  public static PropertiesReader loadFromClasspath(String propertiesFile){  return new PropertiesReader(loadPropertiesFromClasspath(propertiesFile));}  }
class C{  @Override protected boolean isHorizontal(){  return false;}  }
class C{  public ToStringBuilder append(final String fieldName,final char[] array,final boolean fullDetail){  style.append(buffer,fieldName,array,Boolean.valueOf(fullDetail));  return this;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.ANNOTATION__PROPERTIES:    return getProperties();case TypesPackage.ANNOTATION__TARGETS:  return getTargets();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private void runExternalChecks(LimeWireCore limeWireCore,String[] args){  ExternalControl externalControl=limeWireCore.getExternalControl();  if (args.length > 0 && !args[0].equals("-startup")) {    String arg=externalControl.preprocessArgs(args);    externalControl.checkForActiveFrostWire(arg);    externalControl.enqueueControlRequest(arg);  } else   if (!StartupSettings.ALLOW_MULTIPLE_INSTANCES.getValue()) {    externalControl.checkForActiveFrostWire();  }}  }
class C{  public Vector3d mulPosition(Matrix4x3fc mat){  return mulPosition(mat,this);}  }
class C{  public void detach(){  m_currentNode=DTM.NULL;  m_dtm=null;  m_traverser=null;  m_isFresh=true;  m_root=DTM.NULL;}  }
class C{  @SuppressWarnings("unchecked") void checkIfError(ResourceNode node) throws ResourceCollectionException {  if (node.getObject() != null) {    if (node.getObject() instanceof ResourceCollectionException) {      throw (ResourceCollectionException)node.getObject();    } else     if (node.getObject() instanceof Map<?,?>) {      Map<String,ResourceCollectionException> errorMap=(Map<String,ResourceCollectionException>)node.getObject();      StringBuilder errorMessage=new StringBuilder("Errors found in resources:\n");      for (      String resource : errorMap.keySet()) {        errorMessage.append(resource).append(": ").append(errorMap.get(resource).getMessage()).append("\n");      }      if (!errorMap.isEmpty()) {        throw new ResourceCollectionException(errorMessage.toString(),StatusCode.INTERNAL_SERVER_ERROR);      }    }  }}  }
class C{  public double localScore(int i){  throw new UnsupportedOperationException();}  }
class C{  public void update(IBlockAccess access,Multiblock mb,BlockPos anchorPos){  originalBlockAccess=access;  multiblock=mb;  this.anchorPos=anchorPos;  hasBlockAccess=access != null;}  }
class C{  public int index(){  return index;}  }
class C{  public final Iterator<String> categoriesIterator(){  return mCategories != null ? mCategories.iterator() : null;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(attrdefaultvalue.class,args);}  }
class C{  public Object readRemote() throws IOException {  String type=readType();  String url=readString();  return resolveRemote(type,url);}  }
class C{  public boolean isShowTextOverlay(){  return (worldScene.getShowTextOverlay());}  }
class C{  public void onExceededDatabaseQuota(String url,String databaseIdentifier,long quota,long estimatedDatabaseSize,long totalQuota,WebStorage.QuotaUpdater quotaUpdater){  if (mWebChromeClient == null) {    quotaUpdater.updateQuota(quota);    return;  }  Message exceededQuota=obtainMessage(EXCEEDED_DATABASE_QUOTA);  HashMap<String,Object> map=new HashMap();  map.put("databaseIdentifier",databaseIdentifier);  map.put("url",url);  map.put("quota",quota);  map.put("estimatedDatabaseSize",estimatedDatabaseSize);  map.put("totalQuota",totalQuota);  map.put("quotaUpdater",quotaUpdater);  exceededQuota.obj=map;  sendMessage(exceededQuota);}  }
class C{  private void updateCurrentActionsList(){  currentActionListModel.clear();  for (  NetworkUpdateAction action : network.getUpdateManager().getActionList()) {    currentActionListModel.addElement(action);  }  repaint();}  }
class C{  public DTNHost createHost(MovementModel mmProto,String name){  if (settings.getNameSpace() == null) {    settings.setNameSpace(IFACE_NS);  }  if (!this.settings.contains(NetworkInterface.TRANSMIT_RANGE_S)) {    settings.putSetting(NetworkInterface.TRANSMIT_RANGE_S,"1.0");    settings.putSetting(NetworkInterface.TRANSMIT_SPEED_S,"1");  }  NetworkInterface ni=new TestInterface(settings);  ni.setClisteners(conListeners);  List<NetworkInterface> li=new ArrayList<NetworkInterface>();  li.add(ni);  DTNHost host=new DTNHost(msgListeners,null,groupId,li,comBus,mmProto,mr);  if (name != null) {    host.setName(name);  }  this.allHosts.add(host);  return host;}  }
class C{  @Override public void addQueueSimulationListeners(MobsimListener listener){  this.listenerManager.addQueueSimulationListener(listener);}  }
class C{  public String toString(){  return mPath;}  }
class C{  @Override public void removePropertyChangeListener(PropertyChangeListener pcl){  m_pcs.removePropertyChangeListener(pcl);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:51.514 -0500",hash_original_method="77FDB26F7E07396FBB2F925B9C6125A4",hash_generated_method="EC73CBB8EAD727032252B9D5371705BD") public static boolean putString(ContentResolver resolver,String name,String value){  if (MOVED_TO_SECURE.contains(name)) {    Log.w(TAG,"Setting " + name + " has moved from android.provider.Settings.System"+ " to android.provider.Settings.Secure, value is unchanged.");    return false;  }  return putString(resolver,CONTENT_URI,name,value);}  }
class C{  private String toString(BalancedBinaryNode<K,V> node){  if (node == null) {    return "";  }  StringBuilder sb=new StringBuilder("(");  sb.append(toString(node.left()));  sb.append(node.toString());  sb.append(toString(node.right()));  return sb.append(")").toString();}  }
class C{  public Short(short value){  this.value=value;}  }
class C{  public int optInt(String key){  return optInt(key,0);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:03.129 -0500",hash_original_method="D08BA028CDC8B846863357DB1B876085",hash_generated_method="C93B72394AF8999743A4416F94F84797") @Deprecated public synchronized void clear(){  mPlugins.clear();}  }
class C{  public boolean addressTypeUnique(){  return true;}  }
class C{  protected byte[] generateData(int size,DataType type,Random rng){  int min=Byte.MIN_VALUE;  int max=Byte.MAX_VALUE;  if (type == DataType.TEXT) {    min=32;    max=126;  }  byte[] result=new byte[size];  Log.i(LOG_TAG,"Generating data of size: " + size);  if (rng == null) {    rng=new LoggingRng();  }  for (int i=0; i < size; ++i) {    result[i]=(byte)(min + rng.nextInt(max - min + 1));  }  return result;}  }
class C{  public Builder put(String key,String value){  if (key != null && value != null) {    mParams.put(key,value);  }  return this;}  }
class C{  public void withVisualItem(AggregateItem item,Consumer<VisualItem> cb){  Iterator it=item.items(IS_SWITCH_PREDICATE);  if (it.hasNext()) {    cb.accept((VisualItem)it.next());  }}  }
class C{  private void jbInit() throws Exception {  int line=0;  queryPanel.add(reportField,new GridBagConstraints(0,line,3,1,0,0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(0,0,0,0),0,0));  reportField.addActionListener(this);  queryPanel.add(processLabel,new GridBagConstraints(0,++line,1,1,0,0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,0,0,5),0,0));  queryPanel.add(processField,new GridBagConstraints(1,line,2,1,0,0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(5,0,0,0),0,0));  queryPanel.add(bPartnerLabel,new GridBagConstraints(0,++line,1,1,0,0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,0,0,5),0,0));  queryPanel.add(bPartnerField,new GridBagConstraints(1,line,2,1,0,0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(5,0,0,0),0,0));  queryPanel.add(tableLabel,new GridBagConstraints(0,++line,1,1,0,0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,0,0,5),0,0));  queryPanel.add(tableField,new GridBagConstraints(1,line,2,1,0,0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(5,0,0,0),0,0));  queryPanel.add(nameQLabel,new GridBagConstraints(0,++line,1,1,0,0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(10,0,0,5),0,0));  queryPanel.add(nameQField,new GridBagConstraints(1,line,2,1,0,0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(10,0,0,0),0,0));  queryPanel.add(descriptionQLabel,new GridBagConstraints(0,++line,1,1,0,0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,0,0,5),0,0));  queryPanel.add(descriptionQField,new GridBagConstraints(1,line,2,1,0,0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(5,0,0,0),0,0));  queryPanel.add(helpQLabel,new GridBagConstraints(0,++line,1,1,0,0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,0,0,5),0,0));  queryPanel.add(helpQField,new GridBagConstraints(1,line,2,1,0,0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(5,0,0,0),0,0));  queryPanel.add(createdByQLabel,new GridBagConstraints(0,++line,1,1,0,0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(10,0,0,5),0,0));  queryPanel.add(createdByQField,new GridBagConstraints(1,line,2,1,0,0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(10,0,0,0),0,0));  queryPanel.add(createdQLabel,new GridBagConstraints(0,++line,1,1,0,0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,0,0,5),0,0));  queryPanel.add(createdQFrom,new GridBagConstraints(1,line,1,1,0,0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,0,0,0),0,0));  queryPanel.add(createdQTo,new GridBagConstraints(2,line,1,1,0,0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,0,0,0),0,0));  panel.add(queryPanel,Msg.getMsg(Env.getCtx(),"ViewerQuery"));  line=0;  viewPanel.add(viewPanelSplit,BorderLayout.CENTER);  viewPanelSplit.setLeftComponent(pdfViewer);  bBack.addActionListener(this);  bNext.addActionListener(this);  positionInfo.setFontBold(true);  positionInfo.setHorizontalAlignment(CLabel.CENTER);  viewEnterPanel.add(bBack,new GridBagConstraints(0,line,1,1,0,0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,0,0),0,0));  viewEnterPanel.add(positionInfo,new GridBagConstraints(1,line,1,1,0,0,GridBagConstraints.CENTER,GridBagConstraints.NONE,new Insets(0,5,0,5),0,0));  viewEnterPanel.add(bNext,new GridBagConstraints(2,line,1,1,0,0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(0,0,0,5),0,0));  createdByField.setReadWrite(false);  createdField.setReadWrite(false);  nameField.addVetoableChangeListener(this);  descriptionField.addVetoableChangeListener(this);  helpField.addVetoableChangeListener(this);  viewEnterPanel.add(createdByLabel,new GridBagConstraints(0,++line,3,1,0,0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,0,0,5),0,0));  viewEnterPanel.add(createdByField,new GridBagConstraints(0,++line,3,1,0,0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(2,0,0,5),0,0));  viewEnterPanel.add(createdField,new GridBagConstraints(0,++line,3,1,0,0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(2,0,0,5),0,0));  viewEnterPanel.add(nameLabel,new GridBagConstraints(0,++line,3,1,0,0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,0,0,5),0,0));  viewEnterPanel.add(nameField,new GridBagConstraints(0,++line,3,1,1,0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(2,0,0,5),0,0));  viewEnterPanel.add(descriptionLabel,new GridBagConstraints(0,++line,3,1,0,0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,0,0,5),0,0));  viewEnterPanel.add(descriptionField,new GridBagConstraints(0,++line,3,1,1,0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(2,0,0,5),0,0));  viewEnterPanel.add(helpLabel,new GridBagConstraints(0,++line,3,1,0,0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,0,0,5),0,0));  viewEnterPanel.add(helpField,new GridBagConstraints(0,++line,3,1,1,0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(2,0,0,5),0,0));  viewEnterPanel.add(updateArchive,new GridBagConstraints(0,++line,3,1,0,0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,0,0,5),0,0));  viewEnterPanel.setPreferredSize(new Dimension(220,500));  updateArchive.addActionListener(this);  viewPanelSplit.setRightComponent(viewEnterPanel);  panel.add(viewPanel,Msg.getMsg(Env.getCtx(),"ViewerResult"));  confirmPanel.addActionListener(this);  updateQDisplay();  panel.setPreferredSize(new Dimension(720,500));}  }
class C{  static private void addLinkedDefinition(WbXmlDefinition def,String value){  def.getLinkedDefinitions().put(value,null);}  }
class C{  private PositionedReadable in() throws IOException {  if (opened) {    if (err != null)     throw err;  } else {    opened=true;    try {      in=fs.open(path,bufSize);      if (in == null)       throw new IOException("Failed to open input stream (file system returned null): " + path);    } catch (    IOException e) {      err=e;      throw err;    }  }  return in;}  }
class C{  public XYEntry<K,V> removeByIndex(int index){  K key=indexList.remove(index);  return new XYEntry<K,V>(key,this.remove(key));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:56.365 -0500",hash_original_method="489D29010318A7E75E7BD15B3041DE9E",hash_generated_method="879A428473929333048F52A723E405DE") public static boolean isStatusClientError(int status){  return (status >= 400 && status < 500);}  }
class C{  public void clearOutputElements(){  peekOutputElements().clear();}  }
class C{  protected boolean isBottomEdge(@NonNull SpanLookup spanLookup,int position,int childCount){  int latestCheckedPosition=childCount - 1;  for (; latestCheckedPosition >= 0; latestCheckedPosition--) {    int spanIndex=spanLookup.getIndex(latestCheckedPosition);    if (spanIndex == 0) {      break;    }  }  return position >= latestCheckedPosition;}  }
class C{  public static Test suite(){  return (new TestSuite(FaceletsITCase.class));}  }
class C{  public static void main(String[] args){  log.info("===================================================================");  log.info("  Generating a plans file from an UrbanSim population query. ");  log.info("-------------------------------------------------------------------");  MyDemandGenerator mdg=new MyDemandGenerator(args[0],args[1],args[2],args[3],Boolean.parseBoolean(args[4]));  MyZoneReader mzr=new MyZoneReader(mdg.shapefile.getAbsolutePath());  mzr.readZones(1);  Map<Id<MyZone>,MyZone> zoneMap=mzr.getZoneMap();  mdg.generateDemand(zoneMap);  log.info("-------------------------------------------------------------------");  log.info("  Process completed.");  log.info("===================================================================");}  }
class C{  public int normalize(char s[],int len){  for (int i=0; i < len; i++) {switch (s[i]) {case FARSI_YEH:case YEH_BARREE:      s[i]=YEH;    break;case KEHEH:  s[i]=KAF;break;case HEH_YEH:case HEH_GOAL:s[i]=HEH;break;case HAMZA_ABOVE:len=delete(s,i,len);i--;break;default :break;}}return len;}  }
class C{  public URLConnection(URL u){  super(u);  properties=new MessageHeader();}  }
class C{  @Override public boolean status(){  return true;}  }
class C{  public void readSequence(StringBuffer sequence,DataType dataType,String delimiters,int maxSites,String gapCharacters,String missingCharacters,String matchCharacters,String matchSequence) throws IOException, ImportException {  char ch=read();  try {    int n=0;    while (n < maxSites && delimiters.indexOf(ch) == -1) {      if (hasComments && (ch == startComment || ch == lineComment)) {        skipComments(ch);        ch=read();      }      if (!Character.isWhitespace(ch)) {        char ch1=ch;        if (gapCharacters.indexOf(ch) != -1) {          ch1=DataType.GAP_CHARACTER;        } else         if (missingCharacters.indexOf(ch) != -1) {          ch1=DataType.UNKNOWN_CHARACTER;        } else         if (matchCharacters.indexOf(ch) != -1) {          if (matchSequence == null) {            throw new ImportException("Match character in first sequences");          }          if (n >= matchSequence.length()) {            throw new ImportException("Match sequences too short");          }          ch1=matchSequence.charAt(n);        }        sequence.append(ch1);        n++;      }      ch=read();    }    lastDelimiter=ch;    if (Character.isWhitespace((char)lastDelimiter)) {      ch=nextCharacter();      if (delimiters.indexOf(ch) != -1) {        lastDelimiter=readCharacter();      }    }  } catch (  EOFException e) {  }}  }
class C{  @Override public <R>Task<R> offerJob(T key,Supplier<Task<R>> job,int maxQueueSize){  if (key == null) {    executorService.execute(null);  }  return getSerializer(key).executeSerialized(null,maxQueueSize);}  }
class C{  public ParseException(String message){  super(message);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:14.074 -0500",hash_original_method="FB275304C6A60067CFDA4B800CA085AD",hash_generated_method="B0D60E7C0E7958119A198825437CB9DE") protected DERObject buildObject(int tag,int tagNo,int length) throws IOException {  boolean isConstructed=(tag & CONSTRUCTED) != 0;  DefiniteLengthInputStream defIn=new DefiniteLengthInputStream(this,length);  if ((tag & APPLICATION) != 0) {    return new DERApplicationSpecific(isConstructed,tagNo,defIn.toByteArray());  }  if ((tag & TAGGED) != 0) {    return new ASN1StreamParser(defIn).readTaggedObject(isConstructed,tagNo);  }  if (isConstructed) {switch (tagNo) {case OCTET_STRING:      return new BERConstructedOctetString(buildDEREncodableVector(defIn).v);case SEQUENCE:    if (lazyEvaluate) {      return new LazyDERSequence(defIn.toByteArray());    } else {      return DERFactory.createSequence(buildDEREncodableVector(defIn));    }case SET:  return DERFactory.createSet(buildDEREncodableVector(defIn),false);case EXTERNAL:return new DERExternal(buildDEREncodableVector(defIn));default :return new DERUnknownTag(true,tagNo,defIn.toByteArray());}}return createPrimitiveDERObject(tagNo,defIn.toByteArray());}  }
class C{  public static double[] toPrimitive(final Double[] array){  if (array == null) {    return null;  } else   if (array.length == 0) {    return ArrayUtils.EMPTY_DOUBLE_ARRAY;  }  final double[] result=new double[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i].doubleValue();  }  return result;}  }
class C{  private void handleNumericAttribute(Instances trainInstances) throws Exception {  m_c45S=new C45Split(m_attIndex,2,m_sumOfWeights,true);  m_c45S.buildClassifier(trainInstances);  if (m_c45S.numSubsets() == 0) {    return;  }  m_errors=0;  Instances[] trainingSets=new Instances[m_complexityIndex];  trainingSets[0]=new Instances(trainInstances,0);  trainingSets[1]=new Instances(trainInstances,0);  int subset=-1;  for (int i=0; i < trainInstances.numInstances(); i++) {    Instance instance=trainInstances.instance(i);    subset=m_c45S.whichSubset(instance);    if (subset != -1) {      trainingSets[subset].add((Instance)instance.copy());    } else {      double[] weights=m_c45S.weights(instance);      for (int j=0; j < m_complexityIndex; j++) {        Instance temp=(Instance)instance.copy();        if (weights.length == m_complexityIndex) {          temp.setWeight(temp.weight() * weights[j]);        } else {          temp.setWeight(temp.weight() / m_complexityIndex);        }        trainingSets[j].add(temp);      }    }  }  Random r=new Random(1);  int minNumCount=0;  for (int i=0; i < m_complexityIndex; i++) {    if (trainingSets[i].numInstances() > 5) {      minNumCount++;      Discretize disc=new Discretize();      disc.setInputFormat(trainingSets[i]);      trainingSets[i]=Filter.useFilter(trainingSets[i],disc);      trainingSets[i].randomize(r);      trainingSets[i].stratify(5);      NaiveBayesUpdateable fullModel=new NaiveBayesUpdateable();      fullModel.buildClassifier(trainingSets[i]);      m_errors+=NBTreeNoSplit.crossValidate(fullModel,trainingSets[i],r);    } else {      for (int j=0; j < trainingSets[i].numInstances(); j++) {        m_errors+=trainingSets[i].instance(j).weight();      }    }  }  if (minNumCount > 1) {    m_numSubsets=m_complexityIndex;  }}  }
class C{  public static byte[] toPrimitive(Byte[] array){  if (array == null) {    return null;  } else   if (array.length == 0) {    return EMPTY_BYTE_ARRAY;  }  final byte[] result=new byte[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i].byteValue();  }  return result;}  }
class C{  public Text concat(Text that){  final int length=this._count + that._count;  if (length <= BLOCK_SIZE) {    Text text=Text.newPrimitive(length);    this.getChars(0,this._count,text._data,0);    that.getChars(0,that._count,text._data,this._count);    return text;  } else {    Text head=this;    Text tail=that;    if (((head._count << 1) < tail._count) && (tail._data == null)) {      if (tail._head._count > tail._tail._count) {        tail=tail.rightRotation();      }      head=head.concat(tail._head);      tail=tail._tail;    } else     if (((tail._count << 1) < head._count) && (head._data == null)) {      if (head._tail._count > head._head._count) {        head=head.leftRotation();      }      tail=head._tail.concat(tail);      head=head._head;    }    return Text.newComposite(head,tail);  }}  }
class C{  public ClientMessenger(final String host,final int port,final String name,final String mac,final IObjectStreamFactory streamFact,final IConnectionLogin login) throws IOException {  m_socketChannel=SocketChannel.open();  m_socketChannel.configureBlocking(false);  final InetSocketAddress remote=new InetSocketAddress(host,port);  if (!m_socketChannel.connect(remote)) {    int waitTimeMilliseconds=0;    while (true) {      if (waitTimeMilliseconds > 10000) {        m_socketChannel.close();        throw new IOException("Connection refused");      }      if (m_socketChannel.finishConnect()) {        break;      }      ThreadUtil.sleep(50);      waitTimeMilliseconds+=50;    }  }  final Socket socket=m_socketChannel.socket();  socket.setKeepAlive(true);  m_socket=new NIOSocket(streamFact,this,name);  final ClientQuarantineConversation conversation=new ClientQuarantineConversation(login,m_socketChannel,m_socket,name,mac);  m_socket.add(m_socketChannel,conversation);  conversation.showCredentials();  try {    m_initLatch.await();  } catch (  final InterruptedException e) {    m_connectionRefusedError=e;    try {      m_socketChannel.close();    } catch (    final IOException e2) {    }  }  if (conversation.getErrorMessage() != null || m_connectionRefusedError != null) {    m_socket.shutDown();    if (conversation.getErrorMessage() != null) {      String msg=conversation.getErrorMessage();      if (m_connectionRefusedError != null) {        msg+=", " + m_connectionRefusedError;      }      login.notifyFailedLogin(msg);      throw new CouldNotLogInException();    } else     if (m_connectionRefusedError instanceof CouldNotLogInException) {      throw (CouldNotLogInException)m_connectionRefusedError;    } else     if (m_connectionRefusedError != null) {      throw new IOException(m_connectionRefusedError.getMessage());    }  }}  }
class C{  private List<Entry> reduceWithDouglasPeuker(List<Entry> entries,double epsilon){  if (epsilon <= 0 || entries.size() < 3) {    return entries;  }  keep[0]=true;  keep[entries.size() - 1]=true;  algorithmDouglasPeucker(entries,epsilon,0,entries.size() - 1);  List<Entry> reducedEntries=new ArrayList<Entry>();  for (int i=0; i < entries.size(); i++) {    if (keep[i]) {      Entry curEntry=entries.get(i);      reducedEntries.add(new Entry(curEntry.getVal(),curEntry.getXIndex()));    }  }  return reducedEntries;}  }
class C{  public static double mapValueFromRangeToRange(double value,double fromLow,double fromHigh,double toLow,double toHigh){  double fromRangeSize=fromHigh - fromLow;  double toRangeSize=toHigh - toLow;  double valueScale=(value - fromLow) / fromRangeSize;  return toLow + (valueScale * toRangeSize);}  }
class C{  private int buildMessage(StringBuilder message,List<Offer> offers,Map<String,Offer> map,boolean usingFilter){  int counter=0;  for (  Offer offer : offers) {    counter++;    if (counter > MAX_SHOWN_OFFERS) {      message.append("Only " + MAX_SHOWN_OFFERS + " first offers shown.");      if (!usingFilter) {        message.append(" You can filter the offer list. For example #show #meat will only show meat related offers.");      }      return counter;    }    Item item=offer.getItem();    int quantity=1;    if (item instanceof StackableItem) {      quantity=((StackableItem)item).getQuantity();    }    message.append(counter);    message.append(": ");    message.append(Grammar.quantityplnoun(quantity,offer.getItemName(),"a"));    message.append(" for ");    message.append(offer.getPrice());    message.append(" money");    message.append("\n");    map.put(Integer.toString(counter),offer);  }  return counter;}  }
class C{  public void switchHost(HostInfo hostInfo){  releaseCurrentHost();  currentHostInfo=hostInfo;  if (currentHostInfo != null) {    PreferenceManager.getDefaultSharedPreferences(context).edit().putInt(Settings.KEY_PREF_CURRENT_HOST_ID,currentHostInfo.getId()).apply();  }}  }
class C{  public Rectangle modelToView(int pos) throws BadLocationException {  return getUI().modelToView(this,pos);}  }
class C{  public void paintToggleButtonBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  private static String stripNonCharCodepoints(String input){  StringBuilder stripped=new StringBuilder(input.length());  char ch;  for (int i=0; i < input.length(); i++) {    ch=input.charAt(i);    if (ch % 0x10000 != 0xffff && ch % 0x10000 != 0xfffe && (ch <= 0xfdd0 || ch >= 0xfdef) && (ch > 0x1F || ch == 0x9 || ch == 0xa || ch == 0xd)) {      stripped.append(ch);    }  }  return stripped.toString();}  }
class C{  private static void toFile(String filePath,Object... msg){  File logFile=null;  try {    logFile=createFile(filePath,true);  } catch (  IOException e) {    e.printStackTrace();  }  if (logFile != null) {    try {      BufferedWriter buf=new BufferedWriter(new FileWriter(logFile,true));      buf.append(getMsg(msg));      buf.newLine();      buf.close();    } catch (    IOException e) {      e.printStackTrace();    }  }}  }
class C{  public void done(){  isCompleted=true;  earlier=null;}  }
class C{  public void emitop1w(int op,int od){  if (od > 0xFF) {    emitop(wide);    emitop(op);    emit2(od);  } else {    emitop(op);    emit1(od);  }  if (!alive)   return;switch (op) {case iload:    state.push(syms.intType);  break;case lload:state.push(syms.longType);break;case fload:state.push(syms.floatType);break;case dload:state.push(syms.doubleType);break;case aload:state.push(lvar[od].sym.type);break;case lstore:case dstore:state.pop(2);break;case istore:case fstore:case astore:state.pop(1);break;case ret:markDead();break;default :throw new AssertionError(mnem(op));}postop();}  }
class C{  public boolean hasDates(){  return hasRepeatingExtension(Date.class);}  }
class C{  static byte[] discardWhitespace(byte[] data){  byte groomedData[]=new byte[data.length];  int bytesCopied=0;  for (int i=0; i < data.length; i++) {switch (data[i]) {case (byte)' ':case (byte)'\n':case (byte)'\r':case (byte)'\t':      break;default :    groomedData[bytesCopied++]=data[i];}}byte packedData[]=new byte[bytesCopied];System.arraycopy(groomedData,0,packedData,0,bytesCopied);return packedData;}  }
class C{  boolean collapseGroup(int groupPos){  ExpandableHListPosition elGroupPos=ExpandableHListPosition.obtain(ExpandableHListPosition.GROUP,groupPos,-1,-1);  PositionMetadata pm=getFlattenedPos(elGroupPos);  elGroupPos.recycle();  if (pm == null)   return false;  boolean retValue=collapseGroup(pm);  pm.recycle();  return retValue;}  }
class C{  public boolean isFractalNoise(){  return fractalNoise;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:38.038 -0500",hash_original_method="062E55715164230436BF863A3994A273",hash_generated_method="29D0A8B9D260A09CC32C49AB2CD937C9") public static UUID randomUUID(){  byte[] data=new byte[16];synchronized (UUID.class) {    if (rng == null) {      rng=new SecureRandom();    }  }  rng.nextBytes(data);  return makeUuid(data,4);}  }
class C{  @SuppressWarnings("unused") private static String convertNodeToXML(Node node){  StringWriter writer=new StringWriter();  Transformer transformer;  try {    transformer=TransformerFactory.newInstance().newTransformer();    transformer.transform(new DOMSource(node),new StreamResult(writer));  } catch (  TransformerException|TransformerFactoryConfigurationError e) {    Assert.fail(e.getMessage());  }  return writer.toString();}  }
class C{  protected ParameterImpl(){  super();}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public BinarySearchST(){  this(INIT_CAPACITY);}  }
class C{  public void test_DELETE_accessPath_delete_c1() throws Exception {  if (TestMode.quads != getTestMode())   return;  doInsertbyURL("POST",packagePath + "test_delete_by_access_path.trig");  final long mutationResult=doDeleteWithAccessPath(null,null,null,new URIImpl("http://www.bigdata.com/c1"));  assertEquals(2,mutationResult);}  }
class C{  public static void fillStickyDrawerItemFooter(DrawerBuilder drawer,ViewGroup container,View.OnClickListener onClickListener){  for (  IDrawerItem drawerItem : drawer.mStickyDrawerItems) {    int selected_color=UIUtils.getThemeColorFromAttrOrRes(container.getContext(),R.attr.material_drawer_selected,R.color.material_drawer_selected);    if (drawerItem instanceof PrimaryDrawerItem) {      selected_color=ColorHolder.color(((PrimaryDrawerItem)drawerItem).getSelectedColor(),container.getContext(),R.attr.material_drawer_selected,R.color.material_drawer_selected);    } else     if (drawerItem instanceof SecondaryDrawerItem) {      selected_color=ColorHolder.color(((SecondaryDrawerItem)drawerItem).getSelectedColor(),container.getContext(),R.attr.material_drawer_selected,R.color.material_drawer_selected);    }    View view=drawerItem.generateView(container.getContext(),container);    view.setTag(drawerItem);    if (drawerItem.isEnabled()) {      UIUtils.setBackground(view,DrawerUIUtils.getSelectableBackground(container.getContext(),selected_color));      view.setOnClickListener(onClickListener);    }    container.addView(view);    DrawerUIUtils.setDrawerVerticalPadding(view);  }  container.setPadding(0,0,0,0);}  }
class C{  public RedisStateMachinePersister(StateMachinePersist<S,E,String> stateMachinePersist){  super(stateMachinePersist);}  }
class C{  void check(ThreadReference thr){  String kind="";  if (thr != null) {    try {      kind="ownedMonitors()";      System.out.println("kind = " + kind);      if (thr.ownedMonitors() == null) {        failure("failure: ownedMonitors = null");      }      kind="ownedMonitorsAndFrames()";      System.out.println("kind = " + kind);      if (thr.ownedMonitorsAndFrames() == null) {        failure("failure: ownedMonitorsAndFrames = null");      }      kind="currentContendedMonitor()";      System.out.println("kind = " + kind);      thr.currentContendedMonitor();      kind="frames()";      System.out.println("kind = " + kind);      List<StackFrame> frames=thr.frames();      int nframes=frames.size();      if (nframes > 0) {        kind="frames(0, size - 1)";        System.out.println("kind = " + kind);        thr.frames(0,frames.size() - 1);      }      kind="frameCount()";      System.out.println("kind = " + kind);      if (thr.frameCount() == -1) {        failure("failure: frameCount = -1");      }      kind="name()";      System.out.println("kind = " + kind);      if (thr.name() == null) {        failure("failure: name = null");      }      kind="status()";      System.out.println("kind = " + kind);      if (thr.status() < 0) {        failure("failure: status < 0");      }    } catch (    IncompatibleThreadStateException ee) {    }catch (    VMDisconnectedException ee) {      throw ee;    }catch (    Exception ee) {      failure("failure: Got exception from " + kind + ": "+ ee);    }  }}  }
class C{  public boolean isReused(){  return isReused;}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  private static String processIfChildNodesExists(Class cls,Object object,Class[] noparams,String elementName) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {  String childNodeOutput=null;  Method method=cls.getDeclaredMethod(XMLConstants.CHILD_NODE_METHOD,noparams);  Object output=method.invoke(object,null);  if (null != output && !output.toString().isEmpty()) {    log.debug("Processing child nodes of node {}",elementName);    childNodeOutput=output.toString();  }  return childNodeOutput;}  }
class C{  static double squaredDistanceTo(final double x2,final double y2){  if (User.isNull()) {    return Double.POSITIVE_INFINITY;  }  return (User.get().getX() - x2) * (User.get().getX() - x2) + (User.get().getY() - y2) * (User.get().getY() - y2);}  }
class C{  @Override public boolean onInterceptTouchEvent(MotionEvent ev){  ZogUtils.printLog(getClass(),"onInterceptTouchEvent");  float lastX=ev.getX();  float lastY=ev.getY();switch (ev.getAction()) {case MotionEvent.ACTION_DOWN:    mIsHorizontal=null;  mFirstX=lastX;mFirstY=lastY;int motionPosition=pointToPosition((int)mFirstX,(int)mFirstY);if (motionPosition >= 0) {View currentItemView=getChildAt(motionPosition - getFirstVisiblePosition());mPreItemView=mCurrentItemView;mCurrentItemView=currentItemView;}break;case MotionEvent.ACTION_MOVE:float dx=lastX - mFirstX;float dy=lastY - mFirstY;if (Math.abs(dx) >= 5 && Math.abs(dy) >= 5) {return true;}break;case MotionEvent.ACTION_UP:case MotionEvent.ACTION_CANCEL:if (mIsShown && (mPreItemView != mCurrentItemView || isHitCurItemLeft(lastX))) {hiddenRight(mPreItemView);}break;}return super.onInterceptTouchEvent(ev);}  }
class C{  private static char CallNonvirtualCharMethodV(JNIEnvironment env,int objJREF,int classJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: CallNonvirtualCharMethodV  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object obj=env.getJNIRef(objJREF);    Object returnObj=JNIHelpers.invokeWithVarArg(obj,methodID,argAddress,TypeReference.Char,true);    return Reflection.unwrapChar(returnObj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  public static void convertActivityToTranslucentBeforeL(Activity activity){  try {    Class<?>[] classes=Activity.class.getDeclaredClasses();    Class<?> translucentConversionListenerClazz=null;    for (    Class clazz : classes) {      if (clazz.getSimpleName().contains("TranslucentConversionListener")) {        translucentConversionListenerClazz=clazz;      }    }    Method method=Activity.class.getDeclaredMethod("convertToTranslucent",translucentConversionListenerClazz);    method.setAccessible(true);    method.invoke(activity,new Object[]{null});  } catch (  Throwable ignored) {  }}  }
class C{  private static String generateReference(final String baseName){  int myRefIndex=refIndex.addAndGet(1);  return harnessReference + ":" + baseName+ ":"+ myRefIndex;}  }
class C{  public NotificationChain basicSetParentRegion(Region newParentRegion,NotificationChain msgs){  msgs=eBasicSetContainer((InternalEObject)newParentRegion,SGraphPackage.STATE__PARENT_REGION,msgs);  return msgs;}  }
class C{  boolean takeIndexWrapped(){  if (isDetached())   return true;  if (itrs.cycles - prevCycles > 1) {    shutdown();    return true;  }  return false;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  int v=getInt(stack);  CaptureDeviceInput conn=getCapDevInput(stack);  if (conn != null)   conn.setSharpness(v);  return null;}  }
class C{  public FillOutsideLine(Type type){  this.mType=type;}  }
class C{  @Override public String toString(){  if (ActiveMQRACredential.trace) {    ActiveMQRALogger.LOGGER.trace("toString()");  }  return super.toString() + "{ username=" + userName+ ", password=**** }";}  }
class C{  public static String toLanguageTag(Locale locale){  return locale.getLanguage() + (hasText(locale.getCountry()) ? "-" + locale.getCountry() : "");}  }
class C{  void dispose(){  Component component=getComponent();  Window window=SwingUtilities.getWindowAncestor(component);  if (component instanceof JWindow) {    ((Window)component).dispose();    component=null;  }  if (window instanceof DefaultFrame) {    window.dispose();  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean inTapSquare(){  return touchDownX != -1;}  }
class C{  @Override public void actionPerformed(ActionEvent e){  controller.displayHelpContext(helpContextToDisplay);}  }
class C{  public HTMLParser(){  addCharEntity("bull",8226);  addCharEntity("euro",8364);  setIncludeWhitespacesBetweenTags(true);}  }
class C{  public void print(PrintStream ps){  ps.println("IIR Filter:");  for (int i=0; i < sections.size(); i++) {    ps.println("\n  Section " + i + "\n");    sections.get(i).print(ps);    ps.println();  }}  }
class C{  public String parse(String inputTemplate,String intputEncoding,String outputFile,String outputEncoding,String objectID,Object object) throws Exception {  if (objectID != null && object != null) {    controlContext.put(objectID,object);  }  Template template=getTemplate(inputTemplate,inputEncoding != null ? inputEncoding : this.inputEncoding);  if (outputFile == null || outputFile.equals("")) {    StringWriter sw=new StringWriter();    template.merge(controlContext,sw);    return sw.toString();  } else {    Writer writer=null;    if (writers.get(outputFile) == null) {      writer=getWriter(getOutputPath() + File.separator + outputFile,outputEncoding != null ? outputEncoding : this.outputEncoding);      writers.put(outputFile,writer);    } else {      writer=(Writer)writers.get(outputFile);    }    VelocityContext vc=new VelocityContext(controlContext);    template.merge(vc,writer);    return "";  }}  }
class C{  public void onFailure(int statusCode,Header[] headers,String responseBody,Throwable error){  onFailure(responseBody,error);}  }
class C{  public void load() throws SAXException, IOException {  final InputStream in=ZonesXMLLoader.class.getResourceAsStream(uri.getPath());  if (in == null) {    throw new FileNotFoundException("Cannot find resource: " + uri);  }  try {    load(in);  }  finally {    in.close();  }}  }
class C{  private void loadOrganisations(){  List<Organisation> associatedOrganisations=registrationManager.list();  organisations=Maps.newLinkedHashMap();  if (!associatedOrganisations.isEmpty()) {    if (associatedOrganisations.size() > 1) {      organisations.put("",getText("admin.organisation.name.select"));    }    Organisation noOrganisation=getDefaultOrganisation();    if (noOrganisation != null) {      organisations.put(noOrganisation.getKey().toString(),getText("eml.publishingOrganisation.none"));    }    for (    Organisation o : associatedOrganisations) {      if (!o.getKey().equals(noOrganisation.getKey())) {        organisations.put(o.getKey().toString(),o.getName());      }    }  }}  }
class C{  public void testDifferentRange(){  ((MergeManyValues)m_Filter).setMergeValueRange("2,3");  Instances result=useFilter();  assertEquals(m_Instances.numAttributes(),result.numAttributes());  assertEquals(m_Instances.numInstances(),result.numInstances());  int mergedIndex=-1;  for (int i=0; i < result.numInstances(); i++) {    if ((m_Instances.instance(i).value(1) == 1) || (m_Instances.instance(i).value(1) == 2)) {      if (mergedIndex == -1) {        mergedIndex=(int)result.instance(i).value(1);      } else {        assertEquals("Checking merged value for instance: " + (i + 1),mergedIndex,(int)result.instance(i).value(1));      }    }  }}  }
class C{  protected CCProgressTimer(String filename){  this(CCTextureCache.sharedTextureCache().addImage(filename));}  }
class C{  public static BayesPm serializableInstance(){  return new BayesPm(Dag.serializableInstance());}  }
class C{  public void updateClassifier(BayesNet bayesNet,Instance instance) throws Exception {  throw new Exception("Incorrect BayesNetEstimator: use subclass instead.");}  }
class C{  public void updateMarbleLocationField(){  marbleLocField.setLocalValue(World.getInstance().getMarble().getTranslation());}  }
class C{  @Override public void close() throws SecurityException {}  }
class C{  public static FetchRequest createFetchRequest(ParameterList params) throws MessageException {  FetchRequest req=new FetchRequest(params);  if (!req.isValid())   throw new MessageException("Invalid parameters for a fetch request");  if (DEBUG)   _log.debug("Created fetch request from parameter list:\n" + params);  return req;}  }
class C{  protected String encodeCookie(SerializableHttpCookie cookie){  if (cookie == null)   return null;  ByteArrayOutputStream os=new ByteArrayOutputStream();  try {    ObjectOutputStream outputStream=new ObjectOutputStream(os);    outputStream.writeObject(cookie);  } catch (  IOException e) {    Log.d(LOG_TAG,"IOException in encodeCookie",e);    return null;  }  return byteArrayToHexString(os.toByteArray());}  }
class C{  @Override public int generateDirectSurrogateKey(String memberStr){  SimpleDateFormat timeParser=new SimpleDateFormat(CarbonProperties.getInstance().getProperty(CarbonCommonConstants.CARBON_TIMESTAMP_FORMAT,CarbonCommonConstants.CARBON_TIMESTAMP_DEFAULT_FORMAT));  timeParser.setLenient(false);  if (null == memberStr || memberStr.trim().isEmpty() || memberStr.equals(CarbonCommonConstants.MEMBER_DEFAULT_VAL)) {    return 1;  }  return getDirectSurrogateForMember(memberStr,timeParser);}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  public void deleteByIdProc(String idProc){  String qual=new StringBuffer().append("WHERE ").append(DBUtils.generateEQTokenField(CAMPO_ID_PROC,idProc)).toString();  deleteVO(qual,TABLE_NAME);}  }
class C{  public MutableValuesRaba(final int fromIndex,final int toIndex,final int capacity,final byte[][] a){  super(fromIndex,toIndex,capacity,a);}  }
class C{  public DrawerBuilder addDrawerItems(@NonNull IDrawerItem... drawerItems){  this.getAdapter().addDrawerItems(IdDistributor.checkIds(drawerItems));  return this;}  }
class C{  public OpenIntIntHashMap(){  this(defaultCapacity);}  }
class C{  public void write(File file,Integer indent,String xmlVersion) throws TransformerException, IOException {  write(file,new XCardOutputProperties(indent,xmlVersion));}  }
class C{  public Builder failOnNoServerResponse(boolean failOnNoServerResponse){  this.failOnNoServerResponse=failOnNoServerResponse;  return this;}  }
class C{  public int maxLineLength(){  return DEFAULT_MAX_LINE_LENGTH;}  }
class C{  static Object newInstance(String className,ClassLoader cl,boolean doFallback) throws ConfigurationError {  try {    Class providerClass=findProviderClass(className,cl,doFallback);    Object instance=providerClass.newInstance();    debugPrintln("created new instance of " + providerClass + " using ClassLoader: "+ cl);    return instance;  } catch (  ClassNotFoundException x) {    throw new ConfigurationError("Provider " + className + " not found",x);  }catch (  Exception x) {    throw new ConfigurationError("Provider " + className + " could not be instantiated: "+ x,x);  }}  }
class C{  private void doFilter(List<CompositeMethodDetailDescriptor> list){  if (list.isEmpty()) {    return;  }  Iterator<CompositeMethodDetailDescriptor> iter=list.iterator();  while (iter.hasNext()) {    CompositeMethodDetailDescriptor descriptor=iter.next();    Method method=descriptor.descriptor().method();    if (Property.class.isAssignableFrom(method.getReturnType()) || Association.class.isAssignableFrom(method.getReturnType()) || ManyAssociation.class.isAssignableFrom(method.getReturnType())|| NamedAssociation.class.isAssignableFrom(method.getReturnType())) {      continue;    }    iter.remove();  }}  }
class C{  public void mv(Object src,Object dst){  cmdLine.mv(getProject().file(src),getProject().file(dst));}  }
class C{  public void testSimpleLink(){  LOGGER.debug("buildTextFromElement of simple link");  Document document=Jsoup.parse("<a href=\"\">    Text1 Text3    </a>");  Element el=document.select("a").first();  LinkTextElementBuilder instance=new LinkTextElementBuilder();  String expResult="Text1 Text3";  String result=instance.buildTextFromElement(el);  assertEquals(expResult,result);}  }
class C{  public String toString(int indentFactor) throws JSONException {  StringWriter sw=new StringWriter();synchronized (sw.getBuffer()) {    return this.write(sw,indentFactor,0).toString();  }}  }
class C{  public static TypeEditorPanel CreatePrototypeEditor(JFrame parent,TypeManager typeManager,INaviFunction function){  Preconditions.checkNotNull(typeManager,"Error: typeManager argument can not be null");  Preconditions.checkNotNull(function,"Error: function argument can not be null");  return new TypeEditorPanel(parent,TypesTree.createPrototypeDndTypesTree(function,typeManager),typeManager,"Prototype");}  }
class C{  private InternalSelectionListener(final JTable table,final ZyGraph graph){  m_table=table;  m_graph=graph;}  }
class C{  static void parse(Reader r,Map<String,Object> map) throws ParseException, IOException {  final StreamTokenizer st=initTokenizer(r);  final String identifierPattern="[a-zA-Z_$][0-9a-zA-Z_$]*";  final Pattern propertyNamePattern=Pattern.compile("(" + identifierPattern + "\\.)*"+ identifierPattern);  while (true) {    int token;    token=st.nextToken();    if (token == StreamTokenizer.TT_EOF) {      break;    }    if (token != StreamTokenizer.TT_WORD) {      throw new ParseException(st,"type name");    }    final int type=interpretType(st.sval);    if (type == TYPE_ERROR) {      throw new ParseException(st,"valid type name");    }    st.sval=null;    if (type == TYPE_UNSET) {      token=st.nextToken();      if (token != '(') {        throw new ParseException(st,"'('");      }    }    token=st.nextToken();    if (token != StreamTokenizer.TT_WORD) {      throw new ParseException(st,"property name");    }    final String propertyName=st.sval;    if (!propertyNamePattern.matcher(propertyName).matches()) {      throw new ParseException(st,"valid property name");    }    st.sval=null;    if (type == TYPE_UNSET) {      token=st.nextToken();      if (token != ')') {        throw new ParseException(st,"')'");      }      map.remove(propertyName);    } else {      token=st.nextToken();      if (token != '=') {        throw new ParseException(st,"'='");      }      final Object value=parseValue(st,type);      final Object oldValue=map.remove(propertyName);      if (oldValue != null) {        if (value.getClass() != oldValue.getClass()) {          throw new ParseException(st,"(property previously declared as a different type)");        }      }      map.put(propertyName,value);    }    token=st.nextToken();    if (token != ';') {      throw new ParseException(st,"';'");    }  }}  }
class C{  public CompoundFilter(BufferedImageOp filter1,BufferedImageOp filter2){  this.filter1=filter1;  this.filter2=filter2;}  }
class C{  @Override public boolean supportsUnion(){  debugCodeCall("supportsUnion");  return true;}  }
class C{  @PostConstruct public void postConstruct(){  addFilter();}  }
class C{  public MutableNodeData(final long nentries,final IRaba keys,final long[] childAddr,final long[] childEntryCounts,final boolean hasVersionTimestamps,final long minimumVersionTimestamp,final long maximumVersionTimestamp){  assert keys != null;  assert childAddr != null;  assert childEntryCounts != null;  assert keys.capacity() + 1 == childAddr.length;  assert childAddr.length == childEntryCounts.length;  this.nentries=nentries;  this.keys=(MutableKeyBuffer)keys;  this.childAddr=childAddr;  this.childEntryCounts=childEntryCounts;  this.hasVersionTimestamps=hasVersionTimestamps;  this.minimumVersionTimestamp=minimumVersionTimestamp;  this.maximumVersionTimestamp=maximumVersionTimestamp;}  }
class C{  protected int resolveLevelAsSubtype(char[] simplePattern,char[] qualifiedPattern,ReferenceBinding type,char[] methodName,TypeBinding[] argumentTypes,char[] packageName,boolean isDefault){  if (type == null)   return INACCURATE_MATCH;  int level=resolveLevelForType(simplePattern,qualifiedPattern,type);  if (level != IMPOSSIBLE_MATCH) {    if (isDefault && !CharOperation.equals(packageName,type.qualifiedPackageName())) {      return IMPOSSIBLE_MATCH;    }    MethodBinding method=argumentTypes == null ? null : getMethodBinding(type,methodName,argumentTypes);    if (((method != null && !method.isAbstract()) || !type.isAbstract()) && !type.isInterface()) {      level|=OVERRIDDEN_METHOD_FLAVOR;    }    return level;  }  if (!type.isInterface() && !CharOperation.equals(type.compoundName,TypeConstants.JAVA_LANG_OBJECT)) {    level=resolveLevelAsSubtype(simplePattern,qualifiedPattern,type.superclass(),methodName,argumentTypes,packageName,isDefault);    if (level != IMPOSSIBLE_MATCH) {      if (argumentTypes != null) {        MethodBinding method=getMethodBinding(type,methodName,argumentTypes);        if (method != null) {          if ((level & OVERRIDDEN_METHOD_FLAVOR) != 0) {            return IMPOSSIBLE_MATCH;          }          if (!method.isAbstract() && !type.isInterface()) {            level|=OVERRIDDEN_METHOD_FLAVOR;          }        }      }      return level | SUB_INVOCATION_FLAVOR;    }  }  ReferenceBinding[] interfaces=type.superInterfaces();  if (interfaces == null)   return INACCURATE_MATCH;  for (int i=0; i < interfaces.length; i++) {    level=resolveLevelAsSubtype(simplePattern,qualifiedPattern,interfaces[i],methodName,null,packageName,isDefault);    if (level != IMPOSSIBLE_MATCH) {      if (!type.isAbstract() && !type.isInterface()) {        level|=OVERRIDDEN_METHOD_FLAVOR;      }      return level | SUB_INVOCATION_FLAVOR;    }  }  return IMPOSSIBLE_MATCH;}  }
class C{  public void kill(){  this.kill=true;}  }
class C{  private void addNewPasswordFormFields(RequestAndResponse requestAndResponse,final User editedUser,final boolean currentIsEditedUser) throws IOException {  requestAndResponse.print("<div class=\"infoheader\">" + servletText.sentenceEnterNewPasswordHereTwice(currentIsEditedUser,editedUser.getUserName()) + "</div>");  requestAndResponse.print("<input type=\"password\" id=\"newpassword\" name=\"newpassword\" placeholder=\"" + servletText.sentenceNewPassword() + "\" maxlength=\"20\"><br>"+ "<input type=\"password\" id=\"newpassword2\" name=\"newpassword2\" placeholder=\""+ servletText.sentenceVerifyNewPassword()+ "\" maxlength=\"20\"><br>");}  }
class C{  protected static void establishMirror(){  if (m_offline) {    return;  }  try {    String mirrorListURL="http://www.cs.waikato.ac.nz/ml/weka/packageMetaDataMirror.txt";    URLConnection conn=null;    URL connURL=new URL(mirrorListURL);    if (PACKAGE_MANAGER.setProxyAuthentication(connURL)) {      conn=connURL.openConnection(PACKAGE_MANAGER.getProxy());    } else {      conn=connURL.openConnection();    }    conn.setConnectTimeout(10000);    conn.setReadTimeout(10000);    BufferedReader bi=new BufferedReader(new InputStreamReader(conn.getInputStream()));    REP_MIRROR=bi.readLine();    bi.close();    if (REP_MIRROR != null && REP_MIRROR.length() > 0) {      if (!REP_MIRROR.equals(PRIMARY_REPOSITORY) && !USER_SET_REPO) {        log(weka.core.logging.Logger.Level.INFO,"[WekaPackageManager] Package manager using repository mirror: " + REP_MIRROR);        REP_URL=new URL(REP_MIRROR);      }    }  } catch (  Exception ex) {    log(weka.core.logging.Logger.Level.WARNING,"[WekaPackageManager] The repository meta data mirror file seems " + "to be unavailable (" + ex.getMessage() + ")");  }}  }
class C{  public static boolean contains(long[] array,long value){  return indexOf(array,value) != -1;}  }
class C{  private boolean shouldValidateType(TypeDeclaration typeDecl){  if (!typeDecl.isInterface()) {    return false;  }  ITypeBinding typeBinding=typeDecl.resolveBinding();  if (typeBinding == null) {    return false;  }  if (!isUiBinder(typeBinding)) {    return false;  }  return true;}  }
class C{  public SegmentInfos readLastCommittedSegmentsInfo() throws IOException {  failIfCorrupted();  try {    return readSegmentsInfo(null,directory());  } catch (  CorruptIndexException ex) {    markStoreCorrupted(ex);    throw ex;  }}  }
class C{  public DelegateFactory(final MonitoringHandler monitoringHandler,final HttpClient selfClient,final Map<String,Object> properties,final String delegatesSchema){  this.monitoringHandler=monitoringHandler;  this.selfClient=selfClient;  this.properties=properties;  this.delegatesSchema=delegatesSchema;}  }
class C{  private int calculateNumber(@NonNull String text,int nested){  if (text.length() < 3) {    return -1;  }  int number=-1;  String s=text.substring(nested * KEY_HEADER.length(),text.length());  if (TextUtils.isDigitsOnly(s.substring(0,1))) {    number=Integer.parseInt(s.substring(0,1));    for (int i=1; i < s.length(); i++) {      if (TextUtils.isDigitsOnly(s.substring(i,i + 1))) {        number=number * 10 + Integer.parseInt(s.substring(i,i + 1));        continue;      } else {        return number;      }    }  } else {    return number;  }  return number;}  }
class C{  public String toDenseString(int fractionDigits,boolean quoteNominal){  StringBuffer result=new StringBuffer();  Iterator<Attribute> a=getAttributes().allAttributes();  boolean first=true;  while (a.hasNext()) {    if (first) {      first=false;    } else {      result.append(SEPARATOR);    }    result.append(getValueAsString(a.next(),fractionDigits,quoteNominal));  }  return result.toString();}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (sepsets == null) {    throw new NullPointerException();  }}  }
class C{  public void prevField(EditorState editorState){  prevField(editorState,editorState.getCurrentField());}  }
class C{  public GenericGF(int primitive,int size,int b){  this.primitive=primitive;  this.size=size;  this.generatorBase=b;  expTable=new int[size];  logTable=new int[size];  int x=1;  for (int i=0; i < size; i++) {    expTable[i]=x;    x*=2;    if (x >= size) {      x^=primitive;      x&=size - 1;    }  }  for (int i=0; i < size - 1; i++) {    logTable[expTable[i]]=i;  }  zero=new GenericGFPoly(this,new int[]{0});  one=new GenericGFPoly(this,new int[]{1});}  }
class C{  public static int Show(Object msg){  return Show(msg,TITLE,INFORMATION_MESSAGE);}  }
class C{  public static int maxProfitB(int[] prices){  if (prices == null || prices.length < 2) {    return 0;  }  int min=prices[0];  int max=0;  int len=prices.length;  int[] history=new int[len];  for (int i=0; i < len - 1; i++) {    min=min < prices[i] ? min : prices[i];    if (i > 0) {      history[i]=Math.max(history[i - 1],prices[i] - min);      max=history[i] > max ? history[i] : max;    }  }  return max;}  }
class C{  public BaleenJob(String name,String yaml,CollectionProcessingEngine engine){  super(name,yaml,engine);}  }
class C{  public TIntHash(int initialCapacity,float loadFactor,int no_entry_value){  super(initialCapacity,loadFactor);  this.no_entry_value=no_entry_value;  if (no_entry_value != (int)0) {    Arrays.fill(_set,no_entry_value);  }}  }
class C{  private void putRec(O obj,Rec<O> rec){  graph.put(obj,rec);  for (int i=0; i < numelems; ++i) {    if (obj == elems[i]) {      return;    }  }  if (elems.length == numelems) {    elems=Arrays.copyOf(elems,(elems.length << 1) + 1);  }  elems[numelems++]=obj;}  }
class C{  private Zone showIvrZone(String zoneName){  Zone zone=new Zone(zoneName);  SSHPrompt[] prompts={SSHPrompt.POUND,SSHPrompt.GREATER_THAN};  StringBuilder buf=new StringBuilder();  String payload=MessageFormat.format(MDSDialogProperties.getString("MDSDialog.ivr.show.zoneName.cmd"),zoneName);  sendWaitFor(payload,defaultTimeout,prompts,buf);  String[] lines=getLines(buf);  ZoneMember member=null;  String[] regex={MDSDialogProperties.getString("MDSDialog.ivr.showZoneset.zone.member.match")};  String[] groups=new String[10];  for (  String line : lines) {    int index=match(line,regex,groups);    member=new ZoneMember(ZoneMember.ConnectivityMemberType.WWPN);switch (index) {case 0:      member.setAddress(groups[0]);    zone.getMembers().add(member);  break;}}return zone;}  }
class C{  public long partSize(){  return size;}  }
class C{  @Override public void processAuthorize(WebSocketChannel channel,String authorizeToken){  sendHandshakePayload(channel,authorizeToken);}  }
class C{  public OMGraphicList checkProjAndGetTiledImages(Projection proj) throws IOException {  if (!isOnMap(proj) || !validScale(proj)) {    return new OMGraphicList();  }  return getTiledImages(proj);}  }
class C{  protected void processPauseRequest(){  if (mState == State.PLAYING) {    mState=State.PAUSED;    mPlayer.pause();    releaseResources(false);  }}  }
class C{  public boolean contains(Key key){  if (key == null)   throw new NullPointerException("argument to contains() is null");  return get(key) != null;}  }
class C{  public static BufferedImage convertToPowerOfTwoImage(BufferedImage image,boolean scaleToFit){  if (image == null) {    String message=Logging.getMessage("nullValue.ImageIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (WWMath.isPowerOfTwo(image.getWidth()) && WWMath.isPowerOfTwo(image.getHeight())) {    return image;  }  int potWidth=WWMath.powerOfTwoCeiling(image.getWidth());  int potHeight=WWMath.powerOfTwoCeiling(image.getHeight());  BufferedImage potImage=new BufferedImage(potWidth,potHeight,image.getColorModel().hasAlpha() ? BufferedImage.TYPE_4BYTE_ABGR : BufferedImage.TYPE_3BYTE_BGR);  Graphics2D g2d=potImage.createGraphics();  try {    if (scaleToFit) {      g2d.setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BILINEAR);      g2d.drawImage(image,0,0,potImage.getWidth(),potImage.getHeight(),null);    } else {      g2d.drawImage(image,0,0,null);    }  }  finally {    g2d.dispose();  }  return potImage;}  }
class C{  public void deleteChar(){  String text=getText();  if (text.length() > 0) {    int cursorCharPosition=getCursorPosition();    if (cursorCharPosition > 0) {      int tmpCursorCharPosition=cursorCharPosition - 1;      if (!overwriteMode) {        if (tmpCursorCharPosition == text.length()) {          text=text.substring(0,text.length() - 1);        } else {          text=text.substring(0,tmpCursorCharPosition) + text.substring(tmpCursorCharPosition + 1,text.length());        }        super.setText(text);        commitChange();        fireDataChanged(DataChangedListener.REMOVED,tmpCursorCharPosition);      }      if (cursorCharPosition == 1) {        cursorX=0;        cursorCharPosition=0;      } else {        setCursorPosition(tmpCursorCharPosition);      }    }  }}  }
class C{  public int indexOf(int offset,float value){  for (int i=offset; i < _pos; i++) {    if (_data[i] == value) {      return i;    }  }  return -1;}  }
class C{  protected void initLinkTable(){  m_links=createLinkTable();  IntIterator edges=getEdgeTable().rows();  while (edges.hasNext()) {    updateDegrees(edges.nextInt(),1);  }}  }
class C{  public void testOversizeDimensions(){  Document doc=new Document();  IllegalArgumentException expected;  expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("does not support greater than 4 dimensions"));}  }
class C{  protected void internalAdd(TemplatePersistenceData data){  if (!data.isCustom()) {    String id=data.getId();    for (Iterator it=fTemplates.iterator(); it.hasNext(); ) {      TemplatePersistenceData d2=(TemplatePersistenceData)it.next();      if (d2.getId() != null && d2.getId().equals(id))       return;    }    fTemplates.add(data);  }}  }
class C{  public double filter(double x){  int stage=order;  while (stage >= 0) {    if (stage > 0) {      x-=k[stage - 1] * state[stage - 1];      state[stage]=k[stage - 1] * x + state[stage - 1];    } else {      state[stage]=x;    }    stage--;  }  return ((double)state[order]);}  }
class C{  public String toString(){  return this.keyword;}  }
class C{  public static String[] values(){  return ALL_VALUES;}  }
class C{  public boolean removeLastOccurrence(Object o){  if (o == null)   return false;  int mask=elements.length - 1;  int i=(tail - 1) & mask;  E x;  while ((x=elements[i]) != null) {    if (o.equals(x)) {      delete(i);      return true;    }    i=(i - 1) & mask;  }  return false;}  }
class C{  public long convertGeodeticToMGRS(double latitude,double longitude,int precision){  String Hemisphere=AVKey.NORTH;  double Easting=0.0;  double Northing=0.0;  MGRSString="";  long error_code=MGRS_NO_ERROR;  if ((latitude < -PI_OVER_2) || (latitude > PI_OVER_2)) {    error_code=MGRS_LAT_ERROR;  }  if ((longitude < -PI) || (longitude > (2 * PI))) {    error_code=MGRS_LON_ERROR;  }  if ((precision < 0) || (precision > MAX_PRECISION))   error_code=MGRS_PRECISION_ERROR;  if (error_code == MGRS_NO_ERROR) {    if ((latitude < MIN_UTM_LAT) || (latitude > MAX_UTM_LAT)) {      try {        UPSCoord UPS=UPSCoord.fromLatLon(Angle.fromRadians(latitude),Angle.fromRadians(longitude),globe);        error_code|=convertUPSToMGRS(UPS.getHemisphere(),UPS.getEasting(),UPS.getNorthing(),precision);      } catch (      Exception e) {        error_code=MGRS_UPS_ERROR;      }    } else {      try {        UTMCoord UTM=UTMCoord.fromLatLon(Angle.fromRadians(latitude),Angle.fromRadians(longitude),globe);        error_code|=convertUTMToMGRS(UTM.getZone(),latitude,UTM.getEasting(),UTM.getNorthing(),precision);      } catch (      Exception e) {        error_code=MGRS_UTM_ERROR;      }    }  }  return error_code;}  }
class C{  @SuppressWarnings("unchecked") public Frame<V>[] analyze(final String owner,final MethodNode m) throws AnalyzerException {  if ((m.access & (ACC_ABSTRACT | ACC_NATIVE)) != 0) {    frames=(Frame<V>[])new Frame<?>[0];    return frames;  }  n=m.instructions.size();  insns=m.instructions;  handlers=(List<TryCatchBlockNode>[])new List<?>[n];  frames=(Frame<V>[])new Frame<?>[n];  subroutines=new Subroutine[n];  queued=new boolean[n];  queue=new int[n];  top=0;  for (int i=0; i < m.tryCatchBlocks.size(); ++i) {    TryCatchBlockNode tcb=m.tryCatchBlocks.get(i);    int begin=insns.indexOf(tcb.start);    int end=insns.indexOf(tcb.end);    for (int j=begin; j < end; ++j) {      List<TryCatchBlockNode> insnHandlers=handlers[j];      if (insnHandlers == null) {        insnHandlers=new ArrayList<TryCatchBlockNode>();        handlers[j]=insnHandlers;      }      insnHandlers.add(tcb);    }  }  Subroutine main=new Subroutine(null,m.maxLocals,null);  List<AbstractInsnNode> subroutineCalls=new ArrayList<AbstractInsnNode>();  Map<LabelNode,Subroutine> subroutineHeads=new HashMap<LabelNode,Subroutine>();  findSubroutine(0,main,subroutineCalls);  while (!subroutineCalls.isEmpty()) {    JumpInsnNode jsr=(JumpInsnNode)subroutineCalls.remove(0);    Subroutine sub=subroutineHeads.get(jsr.label);    if (sub == null) {      sub=new Subroutine(jsr.label,m.maxLocals,jsr);      subroutineHeads.put(jsr.label,sub);      findSubroutine(insns.indexOf(jsr.label),sub,subroutineCalls);    } else {      sub.callers.add(jsr);    }  }  for (int i=0; i < n; ++i) {    if (subroutines[i] != null && subroutines[i].start == null) {      subroutines[i]=null;    }  }  Frame<V> current=newFrame(m.maxLocals,m.maxStack);  Frame<V> handler=newFrame(m.maxLocals,m.maxStack);  current.setReturn(interpreter.newValue(Type.getReturnType(m.desc)));  Type[] args=Type.getArgumentTypes(m.desc);  int local=0;  if ((m.access & ACC_STATIC) == 0) {    Type ctype=Type.getObjectType(owner);    current.setLocal(local++,interpreter.newValue(ctype));  }  for (int i=0; i < args.length; ++i) {    current.setLocal(local++,interpreter.newValue(args[i]));    if (args[i].getSize() == 2) {      current.setLocal(local++,interpreter.newValue(null));    }  }  while (local < m.maxLocals) {    current.setLocal(local++,interpreter.newValue(null));  }  merge(0,current,null);  init(owner,m);  while (top > 0) {    int insn=queue[--top];    Frame<V> f=frames[insn];    Subroutine subroutine=subroutines[insn];    queued[insn]=false;    AbstractInsnNode insnNode=null;    try {      insnNode=m.instructions.get(insn);      int insnOpcode=insnNode.getOpcode();      int insnType=insnNode.getType();      if (insnType == AbstractInsnNode.LABEL || insnType == AbstractInsnNode.LINE || insnType == AbstractInsnNode.FRAME) {        merge(insn + 1,f,subroutine);        newControlFlowEdge(insn,insn + 1);      } else {        current.init(f).execute(insnNode,interpreter);        subroutine=subroutine == null ? null : subroutine.copy();        if (insnNode instanceof JumpInsnNode) {          JumpInsnNode j=(JumpInsnNode)insnNode;          if (insnOpcode != GOTO && insnOpcode != JSR) {            merge(insn + 1,current,subroutine);            newControlFlowEdge(insn,insn + 1);          }          int jump=insns.indexOf(j.label);          if (insnOpcode == JSR) {            merge(jump,current,new Subroutine(j.label,m.maxLocals,j));          } else {            merge(jump,current,subroutine);          }          newControlFlowEdge(insn,jump);        } else         if (insnNode instanceof LookupSwitchInsnNode) {          LookupSwitchInsnNode lsi=(LookupSwitchInsnNode)insnNode;          int jump=insns.indexOf(lsi.dflt);          merge(jump,current,subroutine);          newControlFlowEdge(insn,jump);          for (int j=0; j < lsi.labels.size(); ++j) {            LabelNode label=lsi.labels.get(j);            jump=insns.indexOf(label);            merge(jump,current,subroutine);            newControlFlowEdge(insn,jump);          }        } else         if (insnNode instanceof TableSwitchInsnNode) {          TableSwitchInsnNode tsi=(TableSwitchInsnNode)insnNode;          int jump=insns.indexOf(tsi.dflt);          merge(jump,current,subroutine);          newControlFlowEdge(insn,jump);          for (int j=0; j < tsi.labels.size(); ++j) {            LabelNode label=tsi.labels.get(j);            jump=insns.indexOf(label);            merge(jump,current,subroutine);            newControlFlowEdge(insn,jump);          }        } else         if (insnOpcode == RET) {          if (subroutine == null) {            throw new AnalyzerException(insnNode,"RET instruction outside of a sub routine");          }          for (int i=0; i < subroutine.callers.size(); ++i) {            JumpInsnNode caller=subroutine.callers.get(i);            int call=insns.indexOf(caller);            if (frames[call] != null) {              merge(call + 1,frames[call],current,subroutines[call],subroutine.access);              newControlFlowEdge(insn,call + 1);            }          }        } else         if (insnOpcode != ATHROW && (insnOpcode < IRETURN || insnOpcode > RETURN)) {          if (subroutine != null) {            if (insnNode instanceof VarInsnNode) {              int var=((VarInsnNode)insnNode).var;              subroutine.access[var]=true;              if (insnOpcode == LLOAD || insnOpcode == DLOAD || insnOpcode == LSTORE || insnOpcode == DSTORE) {                subroutine.access[var + 1]=true;              }            } else             if (insnNode instanceof IincInsnNode) {              int var=((IincInsnNode)insnNode).var;              subroutine.access[var]=true;            }          }          merge(insn + 1,current,subroutine);          newControlFlowEdge(insn,insn + 1);        }      }      List<TryCatchBlockNode> insnHandlers=handlers[insn];      if (insnHandlers != null) {        for (int i=0; i < insnHandlers.size(); ++i) {          TryCatchBlockNode tcb=insnHandlers.get(i);          Type type;          if (tcb.type == null) {            type=Type.getObjectType("java/lang/Throwable");          } else {            type=Type.getObjectType(tcb.type);          }          int jump=insns.indexOf(tcb.handler);          if (newControlFlowExceptionEdge(insn,tcb)) {            handler.init(f);            handler.clearStack();            handler.push(interpreter.newValue(type));            merge(jump,handler,subroutine);          }        }      }    } catch (    AnalyzerException e) {      throw new AnalyzerException(e.node,"Error at instruction " + insn + ": "+ e.getMessage(),e);    }catch (    Exception e) {      throw new AnalyzerException(insnNode,"Error at instruction " + insn + ": "+ e.getMessage(),e);    }  }  return frames;}  }
class C{  public int read(BitReader bitreader) throws JSONException {  try {    this.width=0;    Symbol symbol=this.table;    while (symbol.integer == none) {      this.width+=1;      symbol=bitreader.bit() ? symbol.one : symbol.zero;    }    tick(symbol.integer);    if (JSONzip.probe) {      JSONzip.logchar(symbol.integer,this.width);    }    return symbol.integer;  } catch (  Throwable e) {    throw new JSONException(e);  }}  }
class C{  public JenkinsIntegration jenkins(){  return jenkinsIntegration;}  }
class C{  public void adjustFacing(MoveStepType stepType){  facing=MovePath.getAdjustedFacing(facing,stepType);}  }
class C{  public static Font[] loadFontUsingByteArray(File file,boolean fingerprint) throws IOException {  byte[] b=TestUtils.readFile(file);  FontFactory fontFactory=FontFactory.getInstance();  fontFactory.fingerprintFont(fingerprint);  return fontFactory.loadFonts(b);}  }
class C{  private void updateSize(IoBuffer data){  this.widthInfo=data.getShort();  this.heightInfo=data.getShort();  this.width=this.widthInfo & 0xfff;  this.height=this.heightInfo & 0xfff;  this.blockWidth=this.widthInfo & 0xf000;  this.blockWidth=(this.blockWidth >> 12) + 1;  this.blockWidth<<=4;  this.blockHeight=this.heightInfo & 0xf000;  this.blockHeight=(this.blockHeight >> 12) + 1;  this.blockHeight<<=4;  int xblocks=this.width / this.blockWidth;  if ((this.width % this.blockWidth) != 0) {    xblocks+=1;  }  int yblocks=this.height / this.blockHeight;  if ((this.height % this.blockHeight) != 0) {    yblocks+=1;  }  this.blockCount=xblocks * yblocks;  int blockSize=this.maxCompressedSize(this.blockWidth * this.blockHeight * 3);  int totalBlockSize=blockSize * this.blockCount;  if (this.totalBlockDataSize != totalBlockSize) {    log.info("Allocating memory for {} compressed blocks.",this.blockCount);    this.blockDataSize=blockSize;    this.totalBlockDataSize=totalBlockSize;    this.blockData=new byte[blockSize * this.blockCount];    this.blockSize=new int[blockSize * this.blockCount];    for (int idx=0; idx < this.blockCount; idx++) {      this.blockSize[idx]=0;    }  }}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  private boolean isDirectPolyfill(ContainerType<?> containerType){  if (!containerType.isStaticPolyfill() || !(bottomType instanceof TClassifier)) {    return false;  }  QualifiedName qn=N4TSQualifiedNameProvider.getStaticPolyfillFQN((TClassifier)bottomType,qualifiedNameProvider);  if (containerType instanceof TClass) {    return qn.equals(qualifiedNameProvider.getFullyQualifiedName(containerType));  }  if (containerType instanceof TN4Classifier) {    return Iterables.any(((TN4Classifier)containerType).getSuperClassifierRefs(),null);  }  return false;}  }
class C{  public void add(Class geomFuncClass){  List funcs=createFunctions(geomFuncClass);  Collections.sort(funcs);  add(funcs);}  }
class C{  private void init(){  _logger.debug("Initializing....");  list=new ConcurrentLinkedQueue<ArrivedIndication>();  IntermediateProcessor intermediateProcessor=new IntermediateProcessor(list,_processor);  indicationProcessTimer=Executors.newSingleThreadScheduledExecutor();  indicationProcessTimer.scheduleWithFixedDelay(intermediateProcessor,CIMConstants.INDICATION_PROCESS_INTERVAL,PERIODIC_DELAY,TimeUnit.SECONDS);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void selectAutoCompleteTerm(FilterBypass filterBypass,AttributeSet attributeSet,Object selectedItemBeforeEdit,boolean allowPartialAutoCompletionTerm) throws BadLocationException {  if (doNotAutoComplete)   return;  final boolean prefixIsEmpty="".equals(prefix);  final int originalCaretPosition=comboBoxEditorComponent.getCaretPosition();  boolean autoCompleteTermIsExactMatch=false;  for (int i=0, n=comboBoxModel.getSize(); i < n; i++) {    String itemString=convertToString(comboBoxModel.getElementAt(i));    if (prefixIsEmpty ? !"".equals(itemString) : !filterMatcher.matches(itemString))     continue;    int matchIndex=i;    String matchString=itemString;    for (int j=i; j < n; j++) {      itemString=convertToString(comboBoxModel.getElementAt(j));      if (prefix.equals(itemString)) {        matchIndex=j;        matchString=itemString;        autoCompleteTermIsExactMatch=true;        break;      }    }    if (!allowPartialAutoCompletionTerm && !prefix.equals(itemString))     return;    if (getCorrectsCase() || isStrict()) {      filterBypass.replace(0,prefix.length(),matchString,attributeSet);    } else {      final String itemSuffix=matchString.substring(prefix.length());      filterBypass.insertString(prefix.length(),itemSuffix,attributeSet);    }    final boolean silently=isTableCellEditor || GlazedListsImpl.equal(selectedItemBeforeEdit,matchString);    selectItem(matchIndex,silently);    if (autoCompleteTermIsExactMatch) {      comboBoxEditorComponent.setCaretPosition(originalCaretPosition);    } else {      comboBoxEditorComponent.select(prefix.length(),document.getLength());    }    return;  }  final boolean silently=isTableCellEditor || selectedItemBeforeEdit == null;  selectItem(-1,silently);}  }
class C{  public IComment editLocalComment(final IComment comment,final String newComment) throws com.google.security.zynamics.binnavi.API.disassembly.CouldntSaveDataException {  try {    return m_node.getComments().editLocalCodeNodeComment(comment,newComment);  } catch (  final CouldntSaveDataException exception) {    throw new com.google.security.zynamics.binnavi.API.disassembly.CouldntSaveDataException(exception);  }}  }
class C{  public static boolean isOnLine(Coordinate p,Coordinate[] pt){  LineIntersector lineIntersector=new RobustLineIntersector();  for (int i=1; i < pt.length; i++) {    Coordinate p0=pt[i - 1];    Coordinate p1=pt[i];    lineIntersector.computeIntersection(p,p0,p1);    if (lineIntersector.hasIntersection()) {      return true;    }  }  return false;}  }
class C{  protected void endNode(int node) throws org.xml.sax.SAXException {  super.endNode(node);  if (DTM.ELEMENT_NODE == m_dtm.getNodeType(node)) {    m_transformer.getXPathContext().popCurrentNode();  }}  }
class C{  protected void updatePositions(DocumentEvent event){  ArrayList<PositionUpdater> list=new ArrayList<PositionUpdater>(fPositionUpdaters);  Iterator<PositionUpdater> e=list.iterator();  while (e.hasNext()) {    PositionUpdater u=e.next();    u.update(event);  }}  }
class C{  public static void playSound(final String soundFilePath){  playSound(new File(soundFilePath));}  }
class C{  private void addDistributionLocatorConfig(DistributionLocatorConfig config){  checkReadOnly();  this.locatorConfigs.add(config);  configChanged();}  }
class C{  public IndexExistsException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.INDEXED_ACCESS_EXPRESSION__TARGET:    return target != null;case N4JSPackage.INDEXED_ACCESS_EXPRESSION__INDEX:  return index != null;}return super.eIsSet(featureID);}  }
class C{  private final char _verifyNoLeadingZeroes() throws IOException, JsonParseException {  if (_inputPtr >= _inputEnd && !loadMore()) {    return '0';  }  char ch=_inputBuffer[_inputPtr];  if (ch < '0' || ch > '9') {    return '0';  }  if (!isEnabled(Feature.ALLOW_NUMERIC_LEADING_ZEROS)) {    reportInvalidNumber("Leading zeroes not allowed");  }  ++_inputPtr;  if (ch == INT_0) {    while (_inputPtr < _inputEnd || loadMore()) {      ch=_inputBuffer[_inputPtr];      if (ch < '0' || ch > '9') {        return '0';      }      ++_inputPtr;      if (ch != '0') {        break;      }    }  }  return ch;}  }
class C{  private double testFit(double[] x,double[] test,Distribution dist) throws ArithmeticException {  for (int i=0; i < test.length; i++) {    test[i]=dist.cdf(x[i]);    if (test[i] > 1.) {      test[i]=1.;    }    if (test[i] < 0.) {      test[i]=0.;    }    if (Double.isNaN(test[i])) {      throw new ArithmeticException("Got NaN after fitting " + dist.toString());    }  }  Arrays.sort(test);  return KolmogorovSmirnovTest.simpleTest(test);}  }
class C{  private void pingClient(String toToken,String senderToken){  Client senderClient;  if (toToken.equals(SENDER_ID + "@" + GcmServer.GCM_HOST)) {    senderClient=clientMap.get(toToken);    toToken=senderToken;  } else {    senderClient=clientMap.get(senderToken);  }  JsonObject jPing=new JsonObject();  JsonObject jData=new JsonObject();  jData.addProperty(ACTION_KEY,PING_CLIENT);  jData.addProperty(SENDER_KEY,senderClient.registrationToken);  JsonObject jNotification=new JsonObject();  jNotification.addProperty("body",senderClient.name + " is pinging you.");  jNotification.addProperty("title",PING_TITLE);  jNotification.addProperty("icon",PING_ICON);  jNotification.addProperty("sound","default");  jNotification.addProperty("click_action",CLICK_ACTION);  jPing.add(DATA_KEY,jData);  jPing.add("notification",jNotification);  friendlyGcmServer.send(toToken,jPing);}  }
class C{  public AWTGVTFont(String name,int style,int size){  this.awtFont=new Font(name,style,(int)FONT_SIZE);  this.size=size;  this.scale=size / awtFont.getSize2D();  initializeFontCache(awtFont);}  }
class C{  public void init(boolean encrypting,CipherParameters params){  if (params instanceof KeyParameter) {    this.encrypting=encrypting;    this.workingKey=((KeyParameter)params).getKey();    this.k64Cnt=(this.workingKey.length / 8);    setKey(this.workingKey);    return;  }  throw new IllegalArgumentException("invalid parameter passed to Twofish init - " + params.getClass().getName());}  }
class C{  private static int GetBooleanField(JNIEnvironment env,int objJREF,int fieldID){  if (traceJNI)   VM.sysWrite("JNI called: GetBooleanField  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object obj=env.getJNIRef(objJREF);    RVMField field=MemberReference.getFieldRef(fieldID).resolve();    return field.getBooleanValueUnchecked(obj) ? 1 : 0;  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  public ByteArrayBody(final byte[] data,final String filename){  this(data,"application/octet-stream",filename);}  }
class C{  @SuppressWarnings("unused") public StreamingViewAsSingleton(DataflowRunner runner,View.AsSingleton<T> transform){  this.transform=transform;}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (connectivity == null) {    throw new NullPointerException();  }  if (booleanFunctions == null) {    throw new NullPointerException();  }  if (errorDistributions == null) {    throw new NullPointerException();  }  if (lowerBound >= basalExpression) {    throw new IllegalStateException();  }  if ((decayRate <= 0.0) || (decayRate > 1.0)) {    throw new IllegalStateException();  }  if (booleanInfluenceRate <= 0.0) {    throw new IllegalStateException();  }}  }
class C{  public Boolean isEnable(){  return enable;}  }
class C{  private void obtainStyledAttributes(@Nullable final AttributeSet attributeSet){  TypedArray typedArray=getContext().obtainStyledAttributes(attributeSet,R.styleable.EditText);  try {    obtainMaxNumberOfCharacters(typedArray);    obtainEditTextStyledAttributes(typedArray);  }  finally {    typedArray.recycle();  }}  }
class C{  protected boolean isStoreAsOrdinal(){  return this.storeAsOrdinal;}  }
class C{  static JpaTarget updateTargetInfo(@NotNull final JpaTarget target,@NotNull final TargetUpdateStatus status,final boolean setInstalledDate,final TargetInfoRepository targetInfoRepository,final EntityManager entityManager){  final JpaTargetInfo ts=(JpaTargetInfo)target.getTargetInfo();  ts.setUpdateStatus(status);  if (setInstalledDate) {    ts.setInstallationDate(System.currentTimeMillis());  }  targetInfoRepository.save(ts);  return entityManager.merge(target);}  }
class C{  private void mgf1(byte[] seed,int seedOfs,int seedLen,byte[] out,int outOfs,int maskLen) throws BadPaddingException {  byte[] C=new byte[4];  byte[] digest=new byte[mgfMd.getDigestLength()];  while (maskLen > 0) {    mgfMd.update(seed,seedOfs,seedLen);    mgfMd.update(C);    try {      mgfMd.digest(digest,0,digest.length);    } catch (    DigestException e) {      throw new BadPaddingException(e.toString());    }    for (int i=0; (i < digest.length) && (maskLen > 0); maskLen--) {      out[outOfs++]^=digest[i++];    }    if (maskLen > 0) {      for (int i=C.length - 1; (++C[i] == 0) && (i > 0); i--) {      }    }  }}  }
class C{  public String metaphone(String txt){  boolean hard=false;  if ((txt == null) || (txt.isEmpty())) {    return "";  }  if (txt.length() == 1) {    return txt.toUpperCase(java.util.Locale.ENGLISH);  }  char[] inwd=txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();  StringBuilder local=new StringBuilder(40);  StringBuilder code=new StringBuilder(10);switch (inwd[0]) {case 'K':case 'G':case 'P':    if (inwd[1] == 'N') {      local.append(inwd,1,inwd.length - 1);    } else {      local.append(inwd);    }  break;case 'A':if (inwd[1] == 'E') {  local.append(inwd,1,inwd.length - 1);} else {  local.append(inwd);}break;case 'W':if (inwd[1] == 'R') {local.append(inwd,1,inwd.length - 1);break;}if (inwd[1] == 'H') {local.append(inwd,1,inwd.length - 1);local.setCharAt(0,'W');} else {local.append(inwd);}break;case 'X':inwd[0]='S';local.append(inwd);break;default :local.append(inwd);}int wdsz=local.length();int n=0;while ((code.length() < this.getMaxCodeLen()) && (n < wdsz)) {char symb=local.charAt(n);if ((symb != 'C') && (isPreviousChar(local,n,symb))) {n++;} else {switch (symb) {case 'A':case 'E':case 'I':case 'O':case 'U':if (n == 0) {code.append(symb);}break;case 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {break;}code.append(symb);break;case 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {break;}if (regionMatch(local,n,"CIA")) {code.append('X');break;}if (!isLastChar(wdsz,n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {code.append('S');break;}if (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {code.append('K');break;}if (isNextChar(local,n,'H')) {if ((n == 0) && (wdsz >= 3) && isVowel(local,2)) {code.append('K');} else {code.append('X');}} else {code.append('K');}break;case 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) {code.append('J');n+=2;} else {code.append('T');}break;case 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {break;}if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {break;}if ((n > 0) && (regionMatch(local,n,"GN") || regionMatch(local,n,"GNED"))) {break;}if (isPreviousChar(local,n,'G')) {hard=true;} else {hard=false;}if (!isLastChar(wdsz,n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && (!hard)) {code.append('J');} else {code.append('K');}break;case 'H':if (isLastChar(wdsz,n)) {break;}if ((n > 0) && (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {break;}if (isVowel(local,n + 1)) {code.append('H');}break;case 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);break;case 'K':if (n > 0) {if (!isPreviousChar(local,n,'C')) {code.append(symb);}} else {code.append(symb);}break;case 'P':if (isNextChar(local,n,'H')) {code.append('F');} else {code.append(symb);}break;case 'Q':code.append('K');break;case 'S':if (regionMatch(local,n,"SH") || regionMatch(local,n,"SIO") || regionMatch(local,n,"SIA")) {code.append('X');} else {code.append('S');}break;case 'T':if (regionMatch(local,n,"TIA") || regionMatch(local,n,"TIO")) {code.append('X');break;}if (regionMatch(local,n,"TCH")) {break;}if (regionMatch(local,n,"TH")) {code.append('0');} else {code.append('T');}break;case 'V':code.append('F');break;case 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {code.append(symb);}break;case 'X':code.append('K');code.append('S');break;case 'Z':code.append('S');break;}n++;}if (code.length() > this.getMaxCodeLen()) {code.setLength(this.getMaxCodeLen());}}return code.toString();}  }
class C{  public PlaceMark(int col,int row,Player player){  this.col=col;  this.row=row;  this.player=player;}  }
class C{  @Override public void addListener(final IEventLayerListener listener){  listeners.add(listener);}  }
class C{  private void release252c(){  String sql="SELECT COUNT(*) FROM M_ProductDownload";  int no=DB.getSQLValue(null,sql);  if (no > 0) {    log.finer("No Need - Downloads #" + no);    return;  }  int count=0;  sql="SELECT AD_Client_ID, AD_Org_ID, M_Product_ID, Name, DownloadURL " + "FROM M_Product " + "WHERE DownloadURL IS NOT NULL";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    rs=pstmt.executeQuery();    while (rs.next()) {      int AD_Client_ID=rs.getInt(1);      int AD_Org_ID=rs.getInt(2);      int M_Product_ID=rs.getInt(3);      String Name=rs.getString(4);      String DownloadURL=rs.getString(5);      Properties ctx=new Properties(Env.getCtx());      Env.setContext(ctx,"#AD_Client_ID",AD_Client_ID);      Env.setContext(ctx,"AD_Client_ID",AD_Client_ID);      Env.setContext(ctx,"#AD_Org_ID",AD_Org_ID);      Env.setContext(ctx,"AD_Org_ID",AD_Org_ID);      MProductDownload pdl=new MProductDownload(ctx,0,null);      pdl.setM_Product_ID(M_Product_ID);      pdl.setName(Name);      pdl.setDownloadURL(DownloadURL);      if (pdl.save()) {        count++;        String sqlUpdate="UPDATE M_Product SET DownloadURL = NULL WHERE M_Product_ID=" + M_Product_ID;        int updated=DB.executeUpdate(sqlUpdate,null);        if (updated != 1)         log.warning("Product not updated");      } else       log.warning("Product Download not created M_Product_ID=" + M_Product_ID);    }  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  log.info("#" + count);}  }
class C{  public static String join(byte[] self,String separator){  StringBuilder buffer=new StringBuilder();  boolean first=true;  if (separator == null)   separator="";  for (  byte next : self) {    if (first) {      first=false;    } else {      buffer.append(separator);    }    buffer.append(next);  }  return buffer.toString();}  }
class C{  public Variant(Object value){  if (value instanceof Enumeration)   value=((Enumeration)value).getValue();  this.value=value;  if (value != null) {    compositeClass=value.getClass();    if (compositeClass == Variant.class) {      throw new IllegalArgumentException("Variant cannot be " + compositeClass.getCanonicalName());    }    while (compositeClass.isArray() && !compositeClass.equals(byte[].class))     compositeClass=compositeClass.getComponentType();    assertValidClass(compositeClass);  }}  }
class C{  public boolean open() throws IOException {  if (isCancelOpen)   return false;  boolean inStage2=needsRollforward();  if (inStage2) {    for (    ITimmyTable tt : tables) {      if (!tt.commitTransactionStage2(null))       return false;    }    for (    ITimmyTable tt : tables)     tt.commitTransactionStage3();  } else   for (  ITimmyTable tt : tables) {    if (!tt.rollbackTransaction())     return false;  }  isOpen=true;  this.propertyMap=masterTable.readProperties();  initProperties();  return true;}  }
class C{  public static boolean checkExpon(BigInteger x){  return !(x.compareTo(BigInteger.ONE) > 0 && x.compareTo(SM.ORDER_S) <= 0);}  }
class C{  public static final long BuildLongBE(byte bytevec[],int offset){  return (((long)signedToInt(bytevec[0 + offset]) << 56) | ((long)signedToInt(bytevec[1 + offset]) << 48) | ((long)signedToInt(bytevec[2 + offset]) << 40)| ((long)signedToInt(bytevec[3 + offset]) << 32)| ((long)signedToInt(bytevec[4 + offset]) << 24)| ((long)signedToInt(bytevec[5 + offset]) << 16)| ((long)signedToInt(bytevec[6 + offset]) << 8)| ((long)signedToInt(bytevec[7 + offset])));}  }
class C{  private void down(final String userId,final String dataId,final int dataType) throws RepositoryException {  final int oldType=voteRepository.removeIfExists(userId,dataId);  if (Vote.DATA_TYPE_C_ARTICLE == dataType) {    final JSONObject article=articleRepository.get(dataId);    if (null == article) {      LOGGER.log(Level.ERROR,"Not found article [id={0}] to vote down",dataId);      return;    }    if (-1 == oldType) {      article.put(Article.ARTICLE_BAD_CNT,article.optInt(Article.ARTICLE_BAD_CNT) + 1);    } else     if (Vote.TYPE_C_UP == oldType) {      article.put(Article.ARTICLE_GOOD_CNT,article.optInt(Article.ARTICLE_GOOD_CNT) - 1);      article.put(Article.ARTICLE_BAD_CNT,article.optInt(Article.ARTICLE_BAD_CNT) + 1);    }    final int ups=article.optInt(Article.ARTICLE_GOOD_CNT);    final int downs=article.optInt(Article.ARTICLE_BAD_CNT);    final long t=article.optLong(Keys.OBJECT_ID) / 1000;    final double redditScore=redditScore(ups,downs,t);    article.put(Article.REDDIT_SCORE,redditScore);    articleRepository.update(dataId,article);  }  final JSONObject vote=new JSONObject();  vote.put(Vote.USER_ID,userId);  vote.put(Vote.DATA_ID,dataId);  vote.put(Vote.TYPE,Vote.TYPE_C_DOWN);  vote.put(Vote.DATA_TYPE,dataType);  voteRepository.add(vote);}  }
class C{  public IPreparedGraphQuery prepareGraphQuery(final String query) throws Exception {  return prepareGraphQuery(query,UUID.randomUUID());}  }
class C{  public static ClientRequestType parseClientRegRequest(SoapMessageImpl message) throws Exception {  return parse(message,CLIENT_REG);}  }
class C{  @Override public boolean isModified(){  return rawEditor.isTextModified() || attackerModified;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.075 -0500",hash_original_method="8E464E19F5A7F279FF3FC1B84D15C4F0",hash_generated_method="3C7366855ACB2D093DD423127CC059B2") public boolean isHardwareAccelerated(){  return false;}  }
class C{  public double computeAverageLocal(int states[][][],int[][] sourceOffsets){  initialise();  addObservations(states,sourceOffsets);  return computeAverageLocalOfObservations();}  }
class C{  public VersionedBrowserMatcher(@NonNull String packageName,@NonNull Set<String> signatureHashes,boolean usingCustomTab,@NonNull VersionRange versionRange){  mPackageName=packageName;  mSignatureHashes=signatureHashes;  mUsingCustomTab=usingCustomTab;  mVersionRange=versionRange;}  }
class C{  private Journal readJournal(ParcelFileDescriptor oldState){  Journal journal=new Journal();  if (oldState == null) {    return journal;  }  FileInputStream inStream=new FileInputStream(oldState.getFileDescriptor());  try {    int availableBytes=inStream.available();    if (DEBUG)     Log.d(TAG,"available " + availableBytes);    if (availableBytes < MAX_JOURNAL_SIZE) {      byte[] buffer=new byte[availableBytes];      int bytesRead=0;      boolean valid=false;      InvalidProtocolBufferNanoException lastProtoException=null;      while (availableBytes > 0) {        try {          int result=inStream.read(buffer,bytesRead,1);          if (result > 0) {            availableBytes-=result;            bytesRead+=result;          } else {            Log.w(TAG,"unexpected end of file while reading journal.");            availableBytes=0;          }        } catch (        IOException e) {          buffer=null;          availableBytes=0;        }        try {          MessageNano.mergeFrom(journal,readCheckedBytes(buffer,bytesRead));          valid=true;          availableBytes=0;          if (VERBOSE)           Log.v(TAG,"read " + bytesRead + " bytes of journal");        } catch (        InvalidProtocolBufferNanoException e) {          lastProtoException=e;          journal.clear();        }      }      if (DEBUG)       Log.d(TAG,"journal bytes read: " + bytesRead);      if (!valid) {        Log.w(TAG,"could not find a valid journal",lastProtoException);      }    }  } catch (  IOException e) {    Log.w(TAG,"failed to close the journal",e);  } finally {    try {      inStream.close();    } catch (    IOException e) {      Log.w(TAG,"failed to close the journal",e);    }  }  return journal;}  }
class C{  private UnManagedFileSystem createUnManagedFileSystem(UnManagedFileSystem unManagedFileSystem,String unManagedFileSystemNativeGuid,StorageSystem system,StoragePool pool,StoragePort storagePort,VNXeFileSystem fileSystem,DbClient dbClient){  boolean created=false;  if (null == unManagedFileSystem) {    unManagedFileSystem=new UnManagedFileSystem();    unManagedFileSystem.setId(URIUtil.createId(UnManagedFileSystem.class));    unManagedFileSystem.setNativeGuid(unManagedFileSystemNativeGuid);    unManagedFileSystem.setStorageSystemUri(system.getId());    unManagedFileSystem.setStoragePoolUri(pool.getId());    unManagedFileSystem.setHasExports(false);    unManagedFileSystem.setHasShares(false);    created=true;  }  Map<String,StringSet> unManagedFileSystemInformation=new HashMap<String,StringSet>();  StringMap unManagedFileSystemCharacteristics=new StringMap();  unManagedFileSystemCharacteristics.put(UnManagedFileSystem.SupportedFileSystemCharacterstics.IS_SNAP_SHOT.toString(),Boolean.FALSE.toString());  if (fileSystem.getIsThinEnabled()) {    unManagedFileSystemCharacteristics.put(UnManagedFileSystem.SupportedFileSystemCharacterstics.IS_THINLY_PROVISIONED.toString(),Boolean.TRUE.toString());  } else {    unManagedFileSystemCharacteristics.put(UnManagedFileSystem.SupportedFileSystemCharacterstics.IS_THINLY_PROVISIONED.toString(),Boolean.FALSE.toString());  }  unManagedFileSystemCharacteristics.put(UnManagedFileSystem.SupportedFileSystemCharacterstics.IS_FILESYSTEM_EXPORTED.toString(),Boolean.FALSE.toString());  if (null != system) {    StringSet systemTypes=new StringSet();    systemTypes.add(system.getSystemType());    unManagedFileSystemInformation.put(UnManagedFileSystem.SupportedFileSystemInformation.SYSTEM_TYPE.toString(),systemTypes);  }  if (null != pool) {    StringSet pools=new StringSet();    pools.add(pool.getId().toString());    unManagedFileSystemInformation.put(UnManagedFileSystem.SupportedFileSystemInformation.STORAGE_POOL.toString(),pools);    StringSet matchedVPools=DiscoveryUtils.getMatchedVirtualPoolsForPool(dbClient,pool.getId(),unManagedFileSystemCharacteristics.get(UnManagedFileSystem.SupportedFileSystemCharacterstics.IS_THINLY_PROVISIONED.toString()));    log.debug("Matched Pools : {}",Joiner.on("\t").join(matchedVPools));    if (null == matchedVPools || matchedVPools.isEmpty()) {      unManagedFileSystem.getSupportedVpoolUris().clear();    } else {      unManagedFileSystem.getSupportedVpoolUris().replace(matchedVPools);      log.info("Replaced Pools :" + Joiner.on("\t").join(unManagedFileSystem.getSupportedVpoolUris()));    }  }  if (null != storagePort) {    StringSet storagePorts=new StringSet();    storagePorts.add(storagePort.getId().toString());    unManagedFileSystemInformation.put(UnManagedFileSystem.SupportedFileSystemInformation.STORAGE_PORT.toString(),storagePorts);  }  unManagedFileSystemCharacteristics.put(UnManagedFileSystem.SupportedFileSystemCharacterstics.IS_INGESTABLE.toString(),Boolean.TRUE.toString());  StringSet fsPath=new StringSet();  fsPath.add("/" + fileSystem.getName());  StringSet fsMountPath=new StringSet();  fsMountPath.add("/" + fileSystem.getName());  StringSet fsName=new StringSet();  fsName.add(fileSystem.getName());  StringSet fsId=new StringSet();  fsId.add(fileSystem.getId() + "");  unManagedFileSystem.setLabel(fileSystem.getName());  unManagedFileSystemInformation.put(UnManagedFileSystem.SupportedFileSystemInformation.NAME.toString(),fsName);  unManagedFileSystemInformation.put(UnManagedFileSystem.SupportedFileSystemInformation.NATIVE_ID.toString(),fsId);  unManagedFileSystemInformation.put(UnManagedFileSystem.SupportedFileSystemInformation.DEVICE_LABEL.toString(),fsName);  unManagedFileSystemInformation.put(UnManagedFileSystem.SupportedFileSystemInformation.PATH.toString(),fsPath);  unManagedFileSystemInformation.put(UnManagedFileSystem.SupportedFileSystemInformation.MOUNT_PATH.toString(),fsMountPath);  StringSet allocatedCapacity=new StringSet();  String usedCapacity=String.valueOf(fileSystem.getSizeAllocated());  allocatedCapacity.add(usedCapacity);  unManagedFileSystemInformation.put(UnManagedFileSystem.SupportedFileSystemInformation.ALLOCATED_CAPACITY.toString(),allocatedCapacity);  StringSet provisionedCapacity=new StringSet();  String capacity=String.valueOf(fileSystem.getSizeTotal());  provisionedCapacity.add(capacity);  unManagedFileSystemInformation.put(UnManagedFileSystem.SupportedFileSystemInformation.PROVISIONED_CAPACITY.toString(),provisionedCapacity);  unManagedFileSystem.addFileSystemInformation(unManagedFileSystemInformation);  unManagedFileSystem.setFileSystemCharacterstics(unManagedFileSystemCharacteristics);  if (created) {    unManagedFilesystemsInsert.add(unManagedFileSystem);  } else {    unManagedFilesystemsUpdate.add(unManagedFileSystem);  }  return unManagedFileSystem;}  }
class C{  @Override protected void computeTxFillLevel(){  txInterruptFillLevel=tfc & TFC_TIL_MASK;  if (txInterruptFillLevel > 32) {    throw new RuntimeException(getName() + " error : HSC0TFC<TIL5:1> is more than 32 (" + txInterruptFillLevel+ ")");  }}  }
class C{  public static void main(String[] argv){  ArgParser ap=new ArgParser("Purge");  if (argv.length == 0) {    ap.bail("Wanders through directory tree pruning '~' files.\nUsage: java com.bbn.openmap.util.wanderer.Purge <dir>",false);  }  Purge purge=new Purge(new String[]{".#"},new String[]{"~"});  for (int i=0; i < argv.length; i++) {    purge.handleEntry(new File(argv[i]));  }}  }
class C{  private void interpretClassResult(final ClassResult classResult){  classResult.getMethods().stream().forEach(null);}  }
class C{  @SuppressWarnings("unchecked") public final void integrityCheck(AbstractRStarTree<N,E,?> tree){  if (isLeaf()) {    for (int i=0; i < getCapacity(); i++) {      E e=getEntry(i);      if (i < getNumEntries() && e == null) {        throw new RuntimeException("i < numEntries && entry == null");      }      if (i >= getNumEntries() && e != null) {        throw new RuntimeException("i >= numEntries && entry != null");      }    }  } else {    N tmp=tree.getNode(getEntry(0));    boolean childIsLeaf=tmp.isLeaf();    for (int i=0; i < getCapacity(); i++) {      E e=getEntry(i);      if (i < getNumEntries() && e == null) {        throw new RuntimeException("i < numEntries && entry == null");      }      if (i >= getNumEntries() && e != null) {        throw new RuntimeException("i >= numEntries && entry != null");      }      if (e != null) {        N node=tree.getNode(e);        if (childIsLeaf && !node.isLeaf()) {          for (int k=0; k < getNumEntries(); k++) {            tree.getNode(getEntry(k));          }          throw new RuntimeException("Wrong Child in " + this + " at "+ i);        }        if (!childIsLeaf && node.isLeaf()) {          throw new RuntimeException("Wrong Child: child id no leaf, but node is leaf!");        }        node.integrityCheckParameters((N)this,i);        node.integrityCheck(tree);      }    }    if (LoggingConfiguration.DEBUG) {      Logger.getLogger(this.getClass().getName()).fine("DirNode " + getPageID() + " ok!");    }  }}  }
class C{  void insert(V val,K key){  ArrayList<K> list=map.get(val);  if (list == null) {    list=new ArrayList<K>(4);    map.put(cloneValue(val),list);  }  list.add(key);}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (newRecord || is_ValueChanged("Keyword"))   setKeyword(getKeyword());  if (getKeyword().equals("?")) {    log.saveError("FillMandatory",Msg.getElement(getCtx(),"Keyword"));    return false;  }  return true;}  }
class C{  public synchronized void performExtract(final Node node){  if (node != null) {    createCheckpoint(R.string.undo_action_extract_node);    getDelegator().replaceNode(node);    map.invalidate();  }}  }
class C{  @OnWebSocketConnect public void onConnect(Session session){  this.websocketSession=session;  sendUpdate(this.websocketSession,this.oAuthToken,this.streamType,this.streamQuery,this.streamVersion,this.schemaVersion);}  }
class C{  public static void main(String[] a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  private void addA(byte[] in,int aStartLast){  ensureCapacity(A_INFO_LEN);  _out[_outLen]=A_KIND;  _out[_outLen + A_START_FIRST]=_aStartFirst;  _out[_outLen + A_START_LAST]=aStartLast;  _out[_outLen + A_TARGET_FIRST]=_targetAttrFirst;  _out[_outLen + A_TARGET_LAST]=_targetAttrLast;  _out[_outLen + A_HREF_FIRST]=_hrefAttrFirst;  _out[_outLen + A_HREF_LAST]=_hrefAttrLast;  _outLen+=A_INFO_LEN;  _inAStart=false;  _targetAttrFirst=(-1);  _targetAttrLast=(-1);  _hrefAttrFirst=(-1);  _hrefAttrLast=(-1);}  }
class C{  public ReadProcessedDetails clone(){  ReadProcessedDetails result=new ReadProcessedDetails();  result.StartTime=StartTime;  result.EndTime=EndTime;  result.ProcessingInterval=ProcessingInterval;  result.AggregateType=AggregateType == null ? null : AggregateType.clone();  result.AggregateConfiguration=AggregateConfiguration == null ? null : AggregateConfiguration.clone();  return result;}  }
class C{  public static void rotate(int[] ray,int first,int new_first,int last){  int next=new_first;  while (next != first) {    int temp=ray[first];    ray[first]=ray[next];    ray[next]=temp;    first++;    next++;    if (next == last) {      next=new_first;    } else     if (first == new_first) {      new_first=next;    }  }}  }
class C{  public static JSONObject toJSONObject(java.util.Properties properties) throws JSONException {  JSONObject jo=new JSONObject();  if (properties != null && !properties.isEmpty()) {    Enumeration<?> enumProperties=properties.propertyNames();    while (enumProperties.hasMoreElements()) {      String name=(String)enumProperties.nextElement();      jo.put(name,properties.getProperty(name));    }  }  return jo;}  }
class C{  public boolean isReconnectingDS(){  return !this.hasJoined && this.wasReconnectingSystem;}  }
class C{  public void toggleTabNames(boolean showTabNames){  if (this.showTabNames == showTabNames) {    return;  }  this.showTabNames=showTabNames;  responseTabbedPanel.setShowTabNames(showTabNames);  if (layout != Layout.FULL) {    getTabbedStatus().setShowTabNames(showTabNames);    getTabbedSelect().setShowTabNames(showTabNames);    getTabbedWork().setShowTabNames(showTabNames);  } else {    getTabbedFull().setShowTabNames(showTabNames);  }}  }
class C{  private Cursor makeStreamCursor(CharSequence streamName) throws SQLException {  if (streamName == null) {    streamName="";  }  return ((AndroidDatabaseResults)app.getDao(Stream.class).queryRaw("SELECT rowid _id, * FROM streams WHERE " + Stream.SUBSCRIBED_FIELD + " = 1 AND "+ Stream.NAME_FIELD+ " LIKE ? ESCAPE '\\' ORDER BY "+ Stream.NAME_FIELD+ " COLLATE NOCASE",DatabaseHelper.likeEscape(streamName.toString()) + "%").closeableIterator().getRawResults()).getRawCursor();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 10:08:23.582 -0400",hash_original_method="943099AB2885A4BDD8B9C646B5F94275",hash_generated_method="9B4C3F6F3E948F433E0CB6833B663B3A") public K keyAt(int index){  return (K)mArray[index << 1];}  }
class C{  private void latex(File file) throws IOException {  String fileName=file.getAbsolutePath();  BufferedReader in=new BufferedReader(new FileReader(file));  File outFile=new File(fileName + ".txt");  BufferedWriter out=new BufferedWriter(new FileWriter(outFile,false));  String line=null;  int lineNo=0;  while ((line=in.readLine()) != null) {    lineNo++;    boolean ignore=false;    char[] inLine=line.toCharArray();    StringBuffer sb=new StringBuffer();    for (int i=0; i < inLine.length; i++) {      char c=inLine[i];      if (c == '\\')       ignore=true; else       if (c == '{')       ignore=false; else       if (c == '}')       ; else       if (!ignore)       sb.append(c);    }    out.write(sb.toString());    out.newLine();  }  in.close();  out.close();  System.out.println("File " + fileName + " - lines="+ lineNo);}  }
class C{  public static byte[] toByteArray(long[] array){  byte[] result=new byte[array.length];  for (int i=0; i < array.length; i++) {    result[i]=(byte)array[i];  }  return result;}  }
class C{  protected static String dumpSerialStream(byte[] bytes){  StringBuilder sb=new StringBuilder(bytes.length * 5);  Formatter fmt=new Formatter(sb);  fmt.format("    byte[] bytes = {");  final int linelen=10;  for (int i=0; i < bytes.length; i++) {    if (i % linelen == 0) {      fmt.format("%n        ");    }    fmt.format(" %3d,",bytes[i] & 0xff);    if ((i % linelen) == (linelen - 1) || i == bytes.length - 1) {      fmt.format("  /*");      int s=i / linelen * linelen;      int k=i % linelen;      for (int j=0; j <= k && s + j < bytes.length; j++) {        fmt.format(" %c",bytes[s + j] & 0xff);      }      fmt.format(" */");    }  }  fmt.format("%n    };%n");  return sb.toString();}  }
class C{  public Boolean isSendOnError(){  return sendOnError;}  }
class C{  public boolean isLoadingMore(){  return STATUS.isLoadingMore(mStatus);}  }
class C{  public final void yyreset(java.io.Reader reader){  zzReader=reader;  zzAtBOL=true;  zzAtEOF=false;  zzEndRead=zzStartRead=0;  zzCurrentPos=zzMarkedPos=0;  yyline=yychar=yycolumn=0;  zzLexicalState=YYINITIAL;}  }
class C{  public boolean create(DBConnection db){  s_logger.log(Level.FINE,"createThisObject",new Object[]{getObjectType(),m_name,db.getDirection()});  Savepoint sp=db.setSavepoint("create object");  boolean result=m_interface.createObject(s_parameters,s_logger,s_dbEngine,db,m_name,m_headers,m_contents);  db.releaseSavepoint(sp);  return result;}  }
class C{  public static LocPathIterator createUnionIterator(Compiler compiler,int opPos) throws javax.xml.transform.TransformerException {  UnionPathIterator upi=new UnionPathIterator(compiler,opPos);  int nPaths=upi.m_exprs.length;  boolean isAllChildIterators=true;  for (int i=0; i < nPaths; i++) {    LocPathIterator lpi=upi.m_exprs[i];    if (lpi.getAxis() != Axis.CHILD) {      isAllChildIterators=false;      break;    } else {      if (HasPositionalPredChecker.check(lpi)) {        isAllChildIterators=false;        break;      }    }  }  if (isAllChildIterators) {    UnionChildIterator uci=new UnionChildIterator();    for (int i=0; i < nPaths; i++) {      PredicatedNodeTest lpi=upi.m_exprs[i];      uci.addNodeTest(lpi);    }    return uci;  } else   return upi;}  }
class C{  private void removeOldRevocationValues(){  final Element toRemove=xadesSignature.getRevocationValues();  if (toRemove != null) {    unsignedSignaturePropertiesDom.removeChild(toRemove);    xadesSignature.resetRevocationSources();  }}  }
class C{  public static int countOccurrences(String s,char c){  int count=0;  int index=0;  while (true) {    index=s.indexOf(c,index);    if (index == -1) {      break;    }    count++;  }  return count;}  }
class C{  void calculateUtility(PhysicalInfo physicalInfo){  if (physicalInfo.getProbabilityToHit() <= 0.0) {    physicalInfo.setUtility(-10000);    return;  }  double utility=DAMAGE_UTILITY * physicalInfo.getExpectedDamage();  utility+=CRITICAL_UTILITY * physicalInfo.getExpectedCriticals();  utility+=KILL_UTILITY * physicalInfo.getKillProbability();  utility*=calcTargetPotentialDamageMultiplier(physicalInfo.getTarget());  utility-=(physicalInfo.getTarget() instanceof MechWarrior) ? EJECTED_PILOT_DISUTILITY : 0;  utility+=calcCommandUtility(physicalInfo.getTarget());  utility+=calcStrategicBuildingTargetUtility(physicalInfo.getTarget());  utility+=calcPriorityUnitTargetUtility(physicalInfo.getTarget());  utility-=calcCivilianTargetDisutility(physicalInfo.getTarget());  physicalInfo.setUtility(utility);}  }
class C{  void buildStructure(Document doc) throws Exception {  m_Distributions=new Estimator[m_Instances.numAttributes()][];  for (int iNode=0; iNode < m_Instances.numAttributes(); iNode++) {    String sName=m_Instances.attribute(iNode).name();    Element definition=getDefinition(doc,sName);    ArrayList<Node> nodelist=getParentNodes(definition);    for (int iParent=0; iParent < nodelist.size(); iParent++) {      Node parentName=nodelist.get(iParent).getFirstChild();      String sParentName=((CharacterData)(parentName)).getData();      int nParent=getNode(sParentName);      m_ParentSets[iNode].addParent(nParent,m_Instances);    }    int nCardinality=m_ParentSets[iNode].getCardinalityOfParents();    int nValues=m_Instances.attribute(iNode).numValues();    m_Distributions[iNode]=new Estimator[nCardinality];    for (int i=0; i < nCardinality; i++) {      m_Distributions[iNode][i]=new DiscreteEstimatorBayes(nValues,0.0f);    }    String sTable=getTable(definition);    StringTokenizer st=new StringTokenizer(sTable.toString());    for (int i=0; i < nCardinality; i++) {      DiscreteEstimatorBayes d=(DiscreteEstimatorBayes)m_Distributions[iNode][i];      for (int iValue=0; iValue < nValues; iValue++) {        String sWeight=st.nextToken();        d.addValue(iValue,new Double(sWeight).doubleValue());      }    }  }}  }
class C{  private boolean holdsEqualTypeVariables(PolyfillValidationState state){  final String typeVars1=Joiner.on(',').join(state.polyType.getTypeVars().stream().map(null).toArray());  final String typeVars2=Joiner.on(',').join(state.filledType.getTypeVars().stream().map(null).toArray());  if (!typeVars1.equals(typeVars2)) {    final String msg=getMessageForCLF_POLYFILL_DIFFERENT_TYPEPARS(state.name);    addIssue(state,msg,CLF_POLYFILL_DIFFERENT_TYPEPARS);    return false;  }  EList<TypeArgument> args=state.n4Class.getSuperClassRef().getTypeArgs();  if (args.size() != state.polyType.getTypeVars().size()) {    return true;  }  for (int i=state.polyType.getTypeVars().size() - 1; i >= 0; i--) {    TypeArgument arg=args.get(i);    TypeVariable par=state.polyType.getTypeVars().get(i);    String argString=arg.getTypeRefAsString();    String parString=par.getName();    if (!argString.equals(parString)) {      final String msg=getMessageForCLF_POLYFILL_TYPEPARS_DIFFER_TYPEARGS(state.name,parString,argString);      addIssue(state,msg,CLF_POLYFILL_TYPEPARS_DIFFER_TYPEARGS);      return false;    }  }  return true;}  }
class C{  public void sendLocoNetMessage(LocoNetMessage m){  transmittedMsgCount++;  m.setParity();  int len=m.getNumDataElements();  byte msg[]=new byte[len];  for (int i=0; i < len; i++) {    msg[i]=(byte)m.getElement(i);  }  if (log.isDebugEnabled()) {    log.debug("queue LocoNet packet: {}",m.toString());  }  try {synchronized (xmtHandler) {      xmtList.addLast(msg);      xmtHandler.notify();    }  } catch (  Exception e) {    log.warn("passing to xmit: unexpected exception: " + e);  }}  }
class C{  @Override public List<Metric> transform(List<Metric> metrics,List<String> constants){  if (constants == null || constants.isEmpty()) {    return transform(metrics);  }  if (constants.size() == 1 && constants.get(0).toUpperCase().equals(FULLJOIN)) {    fulljoinIndicator=true;    return transform(metrics);  }  return mapping(metrics,constants);}  }
class C{  public DownloadTouchIcon(Context ctx,ContentResolver cr,String url){  mTab=null;  mContext=ctx.getApplicationContext();  mContentResolver=cr;  mOriginalUrl=null;  mUrl=url;  mUserAgent=null;}  }
class C{  public static int readUnsignedShort(byte[] array,int offset){  int b0=array[offset + 0] & 0xFF;  int b1=array[offset + 1] & 0xFF;  return ((b0 << 8) + (b1 << 0));}  }
class C{  public InputStream fetchMoverStats(final Argument argument,final Map<String,Object> keyMap,int index) throws VNXFilePluginException {  _logger.info("VNX Mover Stats query");  InputStream iStream=null;  List<QueryStats> statsList=new ArrayList<QueryStats>();  try {    Set<String> movers=(Set<String>)keyMap.get(VNXFileConstants.MOVERLIST);    if (null != movers && !movers.isEmpty()) {      for (      String moverID : movers) {        QueryStats queryStats=new QueryStats();        MoverStatsSetQueryParams moverStatsSetQueryParams=new MoverStatsSetQueryParams();        moverStatsSetQueryParams.setStatsSet(MoverStatsSetType.NETWORK_DEVICES);        moverStatsSetQueryParams.setMover(moverID);        queryStats.setMoverStats(moverStatsSetQueryParams);        statsList.add(queryStats);      }      iStream=_vnxFileInputRequestBuilder.getMultiRequestQueryStatsPacket(statsList);    } else {      _logger.error("No movers found to construct volumeStats query.");    }  } catch (  JAXBException jaxbException) {    throw new VNXFilePluginException("Exception occurred while generating input xml for celerra mover stats",jaxbException.getCause());  }  return iStream;}  }
class C{  protected static void binarySearch(ModifiableDoubleDBIDList index,DoubleDBIDListIter iter,double val){  int left=0, right=index.size();  while (left < right) {    final int mid=(left + right) >>> 1;    final double curd=iter.seek(mid).doubleValue();    if (val < curd) {      right=mid;    } else     if (val > curd) {      left=mid + 1;    } else {      left=mid;      break;    }  }  if (left >= index.size()) {    --left;  }  iter.seek(left);}  }
class C{  public NokiaPictureMessage(OtaBitmap otaBitmap,String msg,boolean asUnicode){  this(otaBitmap.getBytes(),msg,asUnicode);}  }
class C{  public void deleteUser(String username) throws ServerRuntimeException {  String _username=this.getApplicationSpecificUsername(username);  this.authenticationInfo.setUsername(_username);  SecurityHelper.deleteUserFromAuthenticationInfo(this.authenticationInfo);}  }
class C{  public JKeyIdentifier(String title,PublicKey publicKey){  this.title=title;  this.publicKey=publicKey;  initComponents();}  }
class C{  private Integer computeNumPaths(Map<URI,List<StoragePort>> initiatorPortMap,URI varray,StorageSystem array){  StoragePortsAssigner assigner=StoragePortsAssignerFactory.getAssigner(array.getSystemType());  int portsPerPath=assigner.getNumberOfPortsPerPath();  Map<URI,List<StoragePort>> arrayTargetMap=ConnectivityUtil.getStoragePortsOfTypeAndVArray(_dbClient,array.getId(),StoragePort.PortType.frontend,varray);  int numPaths=0;  for (  URI networkURI : initiatorPortMap.keySet()) {    if (arrayTargetMap.get(networkURI) != null) {      int pathsInNetwork=arrayTargetMap.get(networkURI).size() / portsPerPath;      int initiatorsInNetwork=initiatorPortMap.get(networkURI).size();      if (pathsInNetwork > initiatorsInNetwork) {        pathsInNetwork=initiatorsInNetwork;      }      _log.info(String.format("Network %s has %s paths",networkURI,pathsInNetwork));      numPaths+=pathsInNetwork;    } else {      _log.info(String.format("Storage Array %s has no ports in Network %s",array.getNativeGuid(),networkURI));    }  }  return numPaths;}  }
class C{  protected ArrayList<ArrayList<DBIDs>> buildRanges(Relation<V> relation){  final int dim=RelationUtil.dimensionality(relation);  final int size=relation.size();  final ArrayList<ArrayList<DBIDs>> ranges=new ArrayList<>();  ArrayModifiableDBIDs ids=DBIDUtil.newArray(relation.getDBIDs());  SortDBIDsBySingleDimension sorter=new SortDBIDsBySingleDimension(relation);  final double part=size * 1.0 / phi;  for (int d=0; d < dim; d++) {    sorter.setDimension(d);    ids.sort(sorter);    ArrayList<DBIDs> dimranges=new ArrayList<>(phi + 1);    int start=0;    DBIDArrayIter iter=ids.iter();    for (int r=1; r <= phi; r++) {      int end=(r < phi) ? (int)(part * r) : size;      ArrayModifiableDBIDs currange=DBIDUtil.newArray(end - start);      for (iter.seek(start); iter.getOffset() < end; iter.advance()) {        currange.add(iter);      }      start=end;      dimranges.add(currange);    }    ranges.add(dimranges);  }  return ranges;}  }
class C{  public Period minusDays(long daysToSubtract){  return (daysToSubtract == Long.MIN_VALUE ? plusDays(Long.MAX_VALUE).plusDays(1) : plusDays(-daysToSubtract));}  }
class C{  protected static BytesToNameCanonicalizer createRoot(int hashSeed){  return new BytesToNameCanonicalizer(DEFAULT_TABLE_SIZE,true,hashSeed);}  }
class C{  public synchronized int search(Object o){  final Object[] dumpArray=elementData;  final int size=elementCount;  if (o != null) {    for (int i=size - 1; i >= 0; i--) {      if (o.equals(dumpArray[i])) {        return size - i;      }    }  } else {    for (int i=size - 1; i >= 0; i--) {      if (dumpArray[i] == null) {        return size - i;      }    }  }  return -1;}  }
class C{  @Override public void writeNdefCannotWriteTech(){  toast(getString(R.string.cannotWriteTechMessage));}  }
class C{  private void releaseAllLocks(){synchronized (read_notify) {    read_notify.notifyAll();  }synchronized (write_notify) {    write_notify.notifyAll();  }synchronized (state_notify) {    state_notify.notifyAll();  }}  }
class C{  private static boolean tooManyDigitsUsed(double source,int scale){  double decExp=Math.log10(source);  return scale >= 308 || decExp + scale >= 14.5;}  }
class C{  private CActionProxy(final Action action){  this.m_action=action;}  }
class C{  Item newLong(final long value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.putByte(LONG).putLong(value);    result=new Item(index,key);    index+=2;    put(result);  }  return result;}  }
class C{  public Builder addDataEvent(DataEvent dataEvent){  this.innerDataEventList.add(dataEvent);  return this;}  }
class C{  public int size(){  return processes.size();}  }
class C{  public void sortInstances(int columnIndex){  if ((columnIndex > 0) && (columnIndex < getColumnCount())) {    addUndoPoint();    m_Data.stableSort(columnIndex - 1);    notifyListener(new TableModelEvent(this));  }}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{volume_id}/action") @CheckPermission(roles={Role.SYSTEM_MONITOR,Role.TENANT_ADMIN},acls={ACL.ANY}) public Object actionOnVolume(@PathParam("tenant_id") String openstackTenantId,@PathParam("volume_id") String volumeId,String input) throws InternalException, InterruptedException {  _log.info("String format input is  = {}",input);  _log.info("Action on volume: id = {}",volumeId);  boolean bReserve=false;  boolean bUnReserve=false;  boolean bTerminate=false;  boolean bBeginDetach=false;  boolean bDetach=false;  boolean bAttach=false;  boolean bInitCon=false;  boolean bExtend=false;  boolean bBootable=false;  boolean bReadonly=false;  if (input.contains(ExportOperations.OS_RESERVE.getOperation()))   bReserve=true;  if (input.contains(ExportOperations.OS_UNRESERVE.getOperation()))   bUnReserve=true;  if (input.contains(ExportOperations.OS_TERMINATE_CONNECTION.getOperation()))   bTerminate=true;  if (input.contains(ExportOperations.OS_BEGIN_DETACHING.getOperation()))   bBeginDetach=true;  if (input.contains(ExportOperations.OS_DETACH.getOperation()))   bDetach=true;  if (input.contains(ExportOperations.OS_ATTACH.getOperation()))   bAttach=true;  if (input.contains(ExportOperations.OS_INITIALIZE_CONNECTION.getOperation()))   bInitCon=true;  if (input.contains(ExportOperations.OS_EXTEND.getOperation())) {    String[] extendStrings=input.split(":");    String sizeString=extendStrings[2].replaceAll("}","");    _log.debug("extend string size value  = {}",sizeString);    if ((sizeString == null) || !isNumeric(sizeString.trim())) {      _log.info("Improper extend size ={}",sizeString.trim());      return CinderApiUtils.createErrorResponse(400,"Bad request : improper volume extend size ");    }    bExtend=true;  }  if (input.contains(ExportOperations.OS_SET_BOOTABLE.getOperation()))   bBootable=true;  if (input.contains(ExportOperations.OS_UPDATE_READONLY.getOperation()))   bReadonly=true;  if (input.contains(ExportOperations.OS_RESET_STATUS.getOperation())) {    Volume vol=findVolume(volumeId,openstackTenantId);    if (vol != null) {      return changeVolumeStatus(vol,input);    } else {      return Response.status(404).build();    }  }  _log.info(String.format("bReserve:  %b , bUnReserve:  %b, bTerminate:%b, bBeginDetach:%b , bDetach:%b , " + "bAttach:%b , bInitCon:%b , bExtend:%b, bReadonly:%b",bReserve,bUnReserve,bTerminate,bBeginDetach,bDetach,bAttach,bInitCon,bExtend,bReadonly));  Gson gson=new Gson();  VolumeActionRequest action=gson.fromJson(input,VolumeActionRequest.class);  Volume vol=findVolume(volumeId,openstackTenantId);  if (vol == null) {    _log.info("Invalid volume id ={} ",volumeId);    return CinderApiUtils.createErrorResponse(404,"Not Found :  Invaild volume id");  }  verifyUserCanModifyVolume(vol);  _log.debug("User can modify volume");  if ((bInitCon) && (action.attach.connector != null) && (action.attach.connector.ip != null)&& (action.attach.connector.ip.length() > 0)) {    String chosenProtocol=getProtocol(vol,action.attach.connector);    boolean bIsSuccess=processAttachRequest(vol,action.attach,openstackTenantId,chosenProtocol);    if (bIsSuccess) {      if (chosenProtocol.equals("iSCSI")) {        return populateIscsiConnectionInfo(vol);      } else       if (chosenProtocol.equals("FC")) {        return populateFcConnectionInfo(chosenProtocol,vol,action,openstackTenantId);      }    } else {      vol.getExtensions().put("status","OPENSTACK_ATTACHING_TIMED_OUT");      _dbClient.updateObject(vol);      _log.info("After fifteen tries, the ITLs are not found yet and hence failing initilize connection");    }    throw APIException.internalServerErrors.genericApisvcError("Export failed",new Exception("Initialize_connection operation failed due to timeout"));  } else   if (bDetach) {    getVolExtensions(vol).put("status",ComponentStatus.AVAILABLE.getStatus().toLowerCase());    _dbClient.updateObject(vol);    return Response.status(202).build();  } else   if (bBeginDetach) {    if (getVolExtensions(vol).containsKey("status") && getVolExtensions(vol).get("status").equals(ComponentStatus.IN_USE.getStatus().toLowerCase())) {      getVolExtensions(vol).put("status",ComponentStatus.DETACHING.getStatus().toLowerCase());      _dbClient.updateObject(vol);      return Response.status(202).build();    } else {      _log.info("Volume is already in detached state.");      throw APIException.internalServerErrors.genericApisvcError("Unexport failed",new Exception("Volume not in attached state"));    }  } else   if (bTerminate) {    StringMap extensionsMap=getVolExtensions(vol);    if (extensionsMap.containsKey("status") && (extensionsMap.get("status").equals(ComponentStatus.DETACHING.getStatus().toLowerCase()) || extensionsMap.get("status").equals(ComponentStatus.IN_USE.getStatus().toLowerCase()))) {      extensionsMap.put("status",ComponentStatus.DETACHING.getStatus().toLowerCase());      _dbClient.updateObject(vol);      String chosenProtocol=getProtocol(vol,action.detach.connector);      processDetachRequest(vol,action.detach,openstackTenantId,chosenProtocol);      extensionsMap.put("status",ComponentStatus.AVAILABLE.getStatus().toLowerCase());      extensionsMap.remove("OPENSTACK_NOVA_INSTANCE_ID");      extensionsMap.remove("OPENSTACK_NOVA_INSTANCE_MOUNTPOINT");      extensionsMap.remove("OPENSTACK_ATTACH_MODE");      _dbClient.updateObject(vol);      return Response.status(202).build();    } else {      _log.info("Volume not in a state for terminate connection.");      throw APIException.internalServerErrors.genericApisvcError("Unexport failed",new Exception("Volume not in state for termination"));    }  } else   if (bAttach) {    _log.info("IN THE IF CONDITION OF THE ATTACH VOLUME TO INSTANCE");    if ((action.attachToInstance != null) && (action.attachToInstance.instance_uuid != null) && (action.attachToInstance.instance_uuid.length() > 0)) {      processAttachToInstance(vol,action.attachToInstance,openstackTenantId);      return Response.status(202).build();    } else {      throw APIException.badRequests.parameterIsNullOrEmpty("Instance");    }  } else   if (bReserve) {    _log.info("IN THE IF CONDITION OF RESERVE");    if (getVolExtensions(vol).containsKey("status") && getVolExtensions(vol).get("status").equals(ComponentStatus.ATTACHING.getStatus().toLowerCase())) {      _log.debug("Reserved Volume cannot be  reserved again");      return CinderApiUtils.createErrorResponse(400,"Bad request :  volume is already reserved");    }    processReserveRequest(vol,openstackTenantId);    return Response.status(202).build();  } else   if (bUnReserve) {    processUnReserveRequest(vol,openstackTenantId);    return Response.status(202).build();  } else   if (bBootable) {    _log.debug("set Volume bootable Flag");    if (action.bootVol != null) {      setBootable(vol,action.bootVol,openstackTenantId);      return Response.status(200).build();    } else {      throw APIException.badRequests.parameterIsNullOrEmpty("Volume");    }  } else   if (bReadonly) {    _log.debug("Set Readonly Flag for Volume");    if (action.readonlyVol != null) {      setReadOnlyFlag(vol,action.readonlyVol,openstackTenantId);      return Response.status(200).build();    } else {      throw APIException.badRequests.parameterIsNullOrEmpty("Volume");    }  } else   if (bExtend) {    _log.info("Extend existing volume size");    if (action.extendVol != null) {      if (volumeId == null) {        _log.info("Source volume id is empty ");        return CinderApiUtils.createErrorResponse(404,"Not Found :  source volume id is empty");      }      long extend_size=action.extendVol.new_size * GB;      if (extend_size <= vol.getCapacity()) {        _log.info(String.format("expandVolume: VolumeId id: %s, Current size: %d, New size: %d ",volumeId,vol.getCapacity(),extend_size));        return CinderApiUtils.createErrorResponse(400,"Bad request :  New size should be larger than old");      }      extendExistingVolume(vol,extend_size,openstackTenantId,volumeId);      return Response.status(202).build();    } else {      throw APIException.badRequests.parameterIsNullOrEmpty("Volume");    }  }  throw APIException.badRequests.parameterIsNotValid("Action Type");}  }
class C{  public CorePlusExtensionsParser(String defaultField,Analyzer analyzer){  this(defaultField,analyzer,null);}  }
class C{  private void handleGetRequest(HttpServletRequest req,HttpServletResponse resp,String queryUri,String authSubToken) throws ServletException, IOException {  HttpURLConnection connection=null;  try {    connection=openConnectionFollowRedirects(queryUri,authSubToken);  } catch (  GeneralSecurityException e) {    resp.sendError(HttpServletResponse.SC_BAD_REQUEST,"Error creating authSub header.");    return;  }catch (  MalformedURLException e) {    resp.sendError(HttpServletResponse.SC_BAD_REQUEST,"Malformed URL - " + e.getMessage());    return;  }catch (  IOException e) {    resp.sendError(HttpServletResponse.SC_BAD_REQUEST,"IOException - " + e.getMessage());    return;  }  int respCode=connection.getResponseCode();  if (respCode != HttpServletResponse.SC_OK) {    Map<String,List<String>> headers=connection.getHeaderFields();    StringBuffer errorMessage=new StringBuffer("Failed to retrive calendar feed from: ");    errorMessage.append(queryUri);    errorMessage.append(".\nServer Error Response:\n");    errorMessage.append(connection.getResponseMessage());    for (Iterator<String> iter=headers.keySet().iterator(); iter.hasNext(); ) {      String header=iter.next();      List<String> headerValues=headers.get(header);      for (Iterator<String> headerIter=headerValues.iterator(); headerIter.hasNext(); ) {        String headerVal=headerIter.next();        errorMessage.append(header + ": " + headerVal+ ", ");      }    }    resp.sendError(respCode,errorMessage.toString());    return;  }  try {    BufferedReader reader=new BufferedReader(new InputStreamReader(connection.getInputStream()));    String line;    while ((line=reader.readLine()) != null) {      resp.getWriter().write(line);    }  } catch (  IOException e) {  }}  }
class C{  public ArrayList<BloomFilter<E>> searchBloomFilters(E o,SearchStatistics stat){  return findMatches(this.root,o,stat);}  }
class C{  public static <A>MaybeTSeq<A> of(final AnyMSeq<Maybe<A>> monads){  return new MaybeTSeq<>(monads);}  }
class C{  void updateGrid(){  if (!gridValid) {    relativeCells=false;    multiRowCells=false;    captionIndex=-1;    rows.removeAllElements();    int n=getViewCount();    for (int i=0; i < n; i++) {      View v=getView(i);      if (v instanceof RowView) {        rows.addElement((RowView)v);        RowView rv=(RowView)v;        rv.clearFilledColumns();        rv.rowIndex=rows.size() - 1;        rv.viewIndex=i;      } else {        Object o=v.getElement().getAttributes().getAttribute(StyleConstants.NameAttribute);        if (o instanceof HTML.Tag) {          HTML.Tag kind=(HTML.Tag)o;          if (kind == HTML.Tag.CAPTION) {            captionIndex=i;          }        }      }    }    int maxColumns=0;    int nrows=rows.size();    for (int row=0; row < nrows; row++) {      RowView rv=getRow(row);      int col=0;      for (int cell=0; cell < rv.getViewCount(); cell++, col++) {        View cv=rv.getView(cell);        if (!relativeCells) {          AttributeSet a=cv.getAttributes();          CSS.LengthValue lv=(CSS.LengthValue)a.getAttribute(CSS.Attribute.WIDTH);          if ((lv != null) && (lv.isPercentage())) {            relativeCells=true;          }        }        for (; rv.isFilled(col); col++)         ;        int rowSpan=getRowsOccupied(cv);        if (rowSpan > 1) {          multiRowCells=true;        }        int colSpan=getColumnsOccupied(cv);        if ((colSpan > 1) || (rowSpan > 1)) {          int rowLimit=row + rowSpan;          int colLimit=col + colSpan;          for (int i=row; i < rowLimit; i++) {            for (int j=col; j < colLimit; j++) {              if (i != row || j != col) {                addFill(i,j);              }            }          }          if (colSpan > 1) {            col+=colSpan - 1;          }        }      }      maxColumns=Math.max(maxColumns,col);    }    columnSpans=new int[maxColumns];    columnOffsets=new int[maxColumns];    columnRequirements=new SizeRequirements[maxColumns];    for (int i=0; i < maxColumns; i++) {      columnRequirements[i]=new SizeRequirements();      columnRequirements[i].maximum=Integer.MAX_VALUE;    }    gridValid=true;  }}  }
class C{  public void addIgnored(Class<?> c,String displayName){  HashSet<String> list;  if (m_Ignored.contains(c)) {    list=m_Ignored.get(c);  } else {    list=new HashSet<String>();    m_Ignored.put(c,list);  }  list.add(displayName);}  }
class C{  public SpriteSheetDrawer rotateRegistration(float regX,float regY){  setRotateRegistration(regX,regY);  return this;}  }
class C{  private static String replaceOptionalVariable(String s,Movie movie,boolean forFilename){  Pattern regex=Pattern.compile("\\$.{1}");  Matcher mat=regex.matcher(s);  if (mat.find()) {    String rep=createDestination(mat.group(),movie,forFilename);    if (rep.isEmpty()) {      return "";    } else {      return s.replace(mat.group(),rep);    }  } else {    return "";  }}  }
class C{  public NTSidPrimaryGroupPrincipal(String name){  super(name);}  }
class C{  public Builder withInitialResAllocs(Map<String,ResAllocs> resAllocs){  this.resAllocs=resAllocs;  return this;}  }
class C{  public void updateParentId(int parentId,int archiveId,String entidad) throws Exception {  boolean commit=false;  boolean inTrans=false;  if (_logger.isDebugEnabled())   _logger.debug("updateParentId");  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession(entidad));    if (!isValidParentId(parentId,entidad))     AdminException.throwException(ArchiveErrorCodes.EC_PARENT_NO_ID);    if (!isValidArchId(archiveId,entidad))     AdminException.throwException(ArchiveErrorCodes.EC_ARCH_NO_ID);    dbConn.beginTransaction();    inTrans=true;    updateArchParentId(parentId,archiveId);    commit=true;  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    if (inTrans)     dbConn.endTransaction(commit);    dbConn.close();  }}  }
class C{  public SearchRequestBuilder clearRescorers(){  sourceBuilder().clearRescorers();  return this;}  }
class C{  public void paintValue(Graphics gfx,Rectangle box){  throw new java.lang.UnsupportedOperationException("Method paintValue() not yet implemented.");}  }
class C{  public static void earlyProcessCommandLineArguments(){  for (int i=0; i < app_name_pos; i++) {    String arg=args[i];    PrefixType type=arg_types[i];    if (type == PrefixType.INVALID_ARG)     continue;    Prefix p=findPrefix(type);    if (DEBUG)     VM.sysWriteln(" CommandLineArgs.earlyProcessCLA(" + p + arg+ " - "+ type+ ")");switch (type) {case CLASSPATH_ARG:      RVMClassLoader.stashApplicationRepositories(arg);    i++;  break;case JAR_ARG:RVMClassLoader.stashApplicationRepositories(arg);i++;break;case ENABLE_ASSERTION_ARG:RVMClassLoader.stashEnableAssertionArg(arg);break;case ENABLE_SYSTEM_ASSERTION_ARG:RVMClassLoader.stashEnableAssertionArg(arg);break;case DISABLE_ASSERTION_ARG:RVMClassLoader.stashDisableAssertionArg(arg);break;case DISABLE_SYSTEM_ASSERTION_ARG:RVMClassLoader.stashDisableAssertionArg(arg);break;case VERBOSE_CLS_ARG:VM.verboseClassLoading=true;break;case VERBOSE_JNI_ARG:VM.verboseJNI=true;break;case AVAILABLE_PROCESSORS_ARG:RVMThread.availableProcessors=primitiveParseInt(arg);if (RVMThread.availableProcessors < 1) {VM.sysWrite("vm: ",p.value," needs an argument that is at least 1");VM.sysWriteln(", but found ",arg);VM.sysExit(EXIT_STATUS_BOGUS_COMMAND_LINE_ARG);}break;case GC_HELP_ARG:MemoryManager.processCommandLineArg("help");break;case GC_ARG:MemoryManager.processCommandLineArg(arg);break;case IRC_HELP_ARG:RuntimeCompiler.processCommandLineArg("-X:irc:","help");break;case IRC_ARG:RuntimeCompiler.processCommandLineArg("-X:irc:",arg);break;case RECOMP_HELP_ARG:if (VM.BuildForAdaptiveSystem) {Controller.addOptCompilerOption("opt:help");} else {VM.sysWriteln("vm: nonadaptive configuration; -X:recomp is not a legal prefix in this configuration");VM.sysExit(EXIT_STATUS_BOGUS_COMMAND_LINE_ARG);}break;case RECOMP_ARG:if (VM.BuildForAdaptiveSystem) {Controller.addOptCompilerOption("opt" + arg);} else {VM.sysWriteln("vm: nonadaptive configuration; -X:recomp is not a legal prefix in this configuration");VM.sysExit(EXIT_STATUS_BOGUS_COMMAND_LINE_ARG);}break;case AOS_HELP_ARG:if (VM.BuildForAdaptiveSystem) {Controller.processCommandLineArg("help");} else {VM.sysWrite("vm: nonadaptive configuration; -X:aos is not a legal prefix in this configuration\n");VM.sysExit(EXIT_STATUS_BOGUS_COMMAND_LINE_ARG);}break;case AOS_ARG:if (VM.BuildForAdaptiveSystem) {Controller.processCommandLineArg(arg);} else {VM.sysWrite("vm: nonadaptive configuration; -X:aos is not a legal prefix in this configuration\n");VM.sysExit(EXIT_STATUS_BOGUS_COMMAND_LINE_ARG);}break;case BASE_HELP_ARG:BaselineOptions.printHelp("-X:base:");break;case BASE_ARG:BaselineCompiler.processCommandLineArg(p.value,arg);break;case OPT_HELP_ARG:if (VM.BuildForAdaptiveSystem) {RuntimeCompiler.processOptCommandLineArg("-X:opt:","help");} else {VM.sysWriteln("vm: You are not using a system that includes the optimizing compiler.");VM.sysWriteln("  Illegal command line argument prefix '-X:opt'");VM.sysExit(EXIT_STATUS_BOGUS_COMMAND_LINE_ARG);}break;case OPT_ARG:if (VM.BuildForAdaptiveSystem) {RuntimeCompiler.processOptCommandLineArg("-X:opt:",arg);Controller.addOptCompilerOption("opt:" + arg);} else {VM.sysWriteln("vm: You are not using a system that includes the optimizing compiler.");VM.sysWriteln("  Illegal command line argument prefix '-X:opt'");VM.sysExit(EXIT_STATUS_BOGUS_COMMAND_LINE_ARG);}break;case HELP_ARG:Options.printHelp();break;case ARG:if (!Options.process(arg)) {VM.sysWriteln("Unrecognized command line argument ",p.value,arg);VM.sysExit(EXIT_STATUS_BOGUS_COMMAND_LINE_ARG);}break;}}}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:13.105 -0500",hash_original_method="91EB591AB70C8A379D1426222FA143D7",hash_generated_method="12E40A961D71F26D2516FD836FFBE829") private SslErrorHandlerImpl(SslErrorHandler origin,LoadListener listener){  mOriginHandler=origin;  mLoadListener=listener;}  }
class C{  public static FunctionblockFactory init(){  try {    FunctionblockFactory theFunctionblockFactory=(FunctionblockFactory)EPackage.Registry.INSTANCE.getEFactory(FunctionblockPackage.eNS_URI);    if (theFunctionblockFactory != null) {      return theFunctionblockFactory;    }  } catch (  Exception exception) {    EcorePlugin.INSTANCE.log(exception);  }  return new FunctionblockFactoryImpl();}  }
class C{  public static CXFormWithAlpha cxFormWithAlpha(double alphaMultiplier,double redMultiplier,double greenMultiplier,double blueMultiplier,double alphaOffset,double redOffset,double greenOffset,double blueOffset){  CXFormWithAlpha c=new CXFormWithAlpha();  c.alphaMultTerm=fixed8(alphaMultiplier);  c.redMultTerm=fixed8(redMultiplier);  c.greenMultTerm=fixed8(greenMultiplier);  c.blueMultTerm=fixed8(blueMultiplier);  c.alphaAddTerm=(int)(alphaOffset);  c.redAddTerm=(int)(redOffset);  c.greenAddTerm=(int)(greenOffset);  c.blueAddTerm=(int)(blueOffset);  if (c.alphaAddTerm > 0 || c.redAddTerm > 0 || c.greenAddTerm > 0 || c.blueAddTerm > 0)   c.hasAdd=true;  if (c.alphaMultTerm > 0 || c.redMultTerm > 0 || c.greenMultTerm > 0 || c.blueMultTerm > 0)   c.hasMult=true;  return c;}  }
class C{  public Polyline2D(){  points=new ArrayList<Point2D>();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void bind(int index,boolean value){  mPreparedStatement.bindLong(index,value ? 1 : 0);}  }
class C{  public ThrottledRunLater(Runnable runnable){  this.runnable=runnable;}  }
class C{  public NodeSet(Node node){  this(32);  addNode(node);}  }
class C{  @Override public void connectionNotification(String eventName,Object source){  if (connectionAllowed(eventName)) {    m_listeneeTypes.add(eventName);    m_listenees.put(source,source);  }}  }
class C{  public Area createTransformedArea(AffineTransform t){  Area a=new Area(this);  a.transform(t);  return a;}  }
class C{  private byte convertMapElement(byte[] curBBMap,int offset,int len,byte reftype){  byte bitmap=0;  byte mask=JSR_MASK;  for (int i=offset; i < offset + len; i++) {    if (curBBMap[i] == reftype) {      bitmap=(byte)(bitmap | mask);    }    mask=(byte)((0x000000ff & mask) >>> 1);  }  return bitmap;}  }
class C{  private static void removeDependencySubsets(String swcLocation,Map<String,Set<String>> dependencyMap,SwcDependencyInfoImpl depInfo){  Set<String> removeSet=new HashSet<String>();  SwcExternalScriptInfo externalInfo=depInfo.getSwcExternalScriptInfo(swcLocation);  Map<String,Set<String>> externalsBySwc=new HashMap<String,Set<String>>();  for (  String swcDependLocation : dependencyMap.get(swcLocation)) {    for (    String swcDependLocation2 : dependencyMap.get(swcLocation)) {      if (swcDependLocation.equals(swcDependLocation2))       continue;      Set<String> externalScripts=externalsBySwc.get(swcDependLocation);      Set<String> externalScripts2=externalsBySwc.get(swcDependLocation2);      if (externalScripts == null) {        externalScripts=externalInfo.getExternalScripts(swcDependLocation);        externalsBySwc.put(swcDependLocation,externalScripts);      }      if (externalScripts2 == null) {        externalScripts2=externalInfo.getExternalScripts(swcDependLocation2);        externalsBySwc.put(swcDependLocation2,externalScripts2);      }      if (externalScripts2.size() > externalScripts.size() && externalScripts2.containsAll(externalScripts)) {        removeSet.add(swcDependLocation);        break;      }    }  }  Set<String> dependencySet=dependencyMap.get(swcLocation);  dependencySet.removeAll(removeSet);}  }
class C{  @Override public void write(byte[] out){  log.trace("RX: " + ProtUtils.hexDumpBuffer(new String(out).toCharArray()));  try {    mSerialIoManager.writeAsync(out);  } catch (  Exception ex) {    log.error("TX error",ex);    connectionLost();  }}  }
class C{  private boolean rebuildItems(){  boolean updated=false;  ItemsRange range=getItemsRange();  if (itemsLayout != null) {    int first=recycle.recycleItems(itemsLayout,firstItem,range);    updated=firstItem != first;    firstItem=first;  } else {    createItemsLayout();    updated=true;  }  if (!updated) {    updated=firstItem != range.getFirst() || itemsLayout.getChildCount() != range.getCount();  }  if (firstItem > range.getFirst() && firstItem <= range.getLast()) {    for (int i=firstItem - 1; i >= range.getFirst(); i--) {      if (!addViewItem(i,true)) {        break;      }      firstItem=i;    }  } else {    firstItem=range.getFirst();  }  int first=firstItem;  for (int i=itemsLayout.getChildCount(); i < range.getCount(); i++) {    if (!addViewItem(firstItem + i,false) && itemsLayout.getChildCount() == 0) {      first++;    }  }  firstItem=first;  return updated;}  }
class C{  private TwitterHelper(){  throw new AssertionError(TwitterHelper.class.getName() + " is non-instantiable");}  }
class C{  @Override public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception {  endpoints.authenticationManager(authenticationManager).tokenStore(tokenStore()).accessTokenConverter(tokenEnhancer());}  }
class C{  public BasicDataFileStore(File directoryPath){  if (directoryPath == null) {    String message=Logging.getMessage("nullValue.PathIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  StringBuilder sb=new StringBuilder("<?xml version=\"1.0\"?>");  sb.append("<dataFileStore><writeLocations><location wwDir=\"");  sb.append(directoryPath.getAbsolutePath());  sb.append("\" create=\"true\"/></writeLocations></dataFileStore>");  this.initialize(WWIO.getInputStreamFromString(sb.toString()));}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public ArrayConverter(Class defaultType,Converter elementConverter){  super();  if (defaultType == null) {    throw new IllegalArgumentException("Default type is missing");  }  if (!defaultType.isArray()) {    throw new IllegalArgumentException("Default type must be an array.");  }  if (elementConverter == null) {    throw new IllegalArgumentException("Component Converter is missing.");  }  this.defaultTypeInstance=Array.newInstance(defaultType.getComponentType(),0);  this.elementConverter=elementConverter;}  }
class C{  @Override public void run(){  String inputFile=args[0];  if (inputFile.toLowerCase().contains(".dep")) {    calculateRaster();  } else   if (inputFile.toLowerCase().contains(".shp")) {    calculateVector();  } else {    showFeedback("There was a problem reading the input file.");  }}  }
class C{  private Bitmap handleBlendingOperation(int offsetX,int offsetY,byte blendOp,Bitmap frameBitmap,Bitmap baseBitmap){  if (enableVerboseLog)   FLog.v("Create a new bitmap");  Bitmap redrawnBitmap=Bitmap.createBitmap(baseWidth,baseHeight,Bitmap.Config.ARGB_8888);  Canvas canvas=new Canvas(redrawnBitmap);  if (baseBitmap != null) {    canvas.drawBitmap(baseBitmap,0,0,null);    if (blendOp == PngChunkFCTL.APNG_BLEND_OP_SOURCE) {      canvas.clipRect(offsetX,offsetY,offsetX + frameBitmap.getWidth(),offsetY + frameBitmap.getHeight());      canvas.drawColor(Color.TRANSPARENT,PorterDuff.Mode.CLEAR);      canvas.clipRect(0,0,baseWidth,baseHeight);    }  }  canvas.drawBitmap(frameBitmap,offsetX,offsetY,null);  return redrawnBitmap;}  }
class C{  public Boolean isVPMCSupported(){  return vpmcSupported;}  }
class C{  private void initialize(){  Context context=getContext();  if (!sInitialized) {    sInitialized=true;    Resources resources=context.getApplicationContext().getResources();    sCropSize=resources.getDimensionPixelSize(R.dimen.photo_crop_width);    sCropDimPaint=new Paint();    sCropDimPaint.setAntiAlias(true);    sCropDimPaint.setColor(resources.getColor(R.color.photo_crop_dim_color));    sCropDimPaint.setStyle(Style.FILL);    sCropPaint=new Paint();    sCropPaint.setAntiAlias(true);    sCropPaint.setColor(resources.getColor(R.color.photo_crop_highlight_color));    sCropPaint.setStyle(Style.STROKE);    sCropPaint.setStrokeWidth(resources.getDimension(R.dimen.photo_crop_stroke_width));    final ViewConfiguration configuration=ViewConfiguration.get(context);    final int touchSlop=configuration.getScaledTouchSlop();    sTouchSlopSquare=touchSlop * touchSlop;  }  mGestureDetector=new GestureDetectorCompat(context,this,null);  mScaleGetureDetector=new ScaleGestureDetector(context,this);  mQuickScaleEnabled=ScaleGestureDetectorCompat.isQuickScaleEnabled(mScaleGetureDetector);  mScaleRunnable=new ScaleRunnable(this);  mTranslateRunnable=new TranslateRunnable(this);  mSnapRunnable=new SnapRunnable(this);  mRotateRunnable=new RotateRunnable(this);}  }
class C{  protected EntryPointSpecImpl(){  super();}  }
class C{  public SmaliClassDetailLoader(ZipFile apkFile,boolean translateInstructions){  ArrayList<ZipEntry> dexEntries=new ArrayList<ZipEntry>();  dexEntries.add(apkFile.getEntry("classes.dex"));  for (int i=2; i < 99; ++i) {    final ZipEntry e=apkFile.getEntry("classes" + i + ".dex");    if (e != null) {      dexEntries.add(e);    } else {      break;    }  }  final int n=dexEntries.size();  if (n == 0) {    Log.err("Source apk does not have any dex files");  }  this.translateInstructions=translateInstructions;  this.resolver=translateInstructions ? new InvocationResolver() : null;  final Opcodes opcodes=Opcodes.forApi(Settings.apiLevel);  try {    dexFiles=new DexFile[n];    for (int i=0; i < n; ++i) {      dexFiles[i]=DexBackedDexFile.fromInputStream(opcodes,new BufferedInputStream(apkFile.getInputStream(dexEntries.get(i))));    }  } catch (  IOException e) {    Log.err("failed to process the source apk file");    Log.err(e);  }}  }
class C{  public final AC grow(float w){  return grow(w,curIx);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case ImPackage.PARAMETERIZED_TYPE_REF_IM__REWIRED_TARGET:    if (resolve)     return getRewiredTarget();  return basicGetRewiredTarget();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public T accesskey(String value){  return attr("accesskey",value);}  }
class C{  private void addToEvents(){  List<PricedEventRow> events=priceModelBean.getPricedEvents();  int addToIndex=0;  if (index >= 0 && index < events.size()) {    PricedEventRow row=events.get(index);    VOPricedEvent pricedEvent=row.getPricedEvent();    addToIndex=1;    if (row.getSteppedPrice() == null) {      VOSteppedPrice sp=new VOSteppedPrice();      sp.setLimit(Long.valueOf(1));      sp.setPrice(row.getPricedEvent().getEventPrice());      pricedEvent.getSteppedPrices().add(sp);      row.setSteppedPrice(sp);      addToIndex=0;    }    PricedEventRow rowToAdd=new PricedEventRow();    rowToAdd.setPricedEvent(pricedEvent);    VOSteppedPrice sp=new VOSteppedPrice();    sp.setPrice(row.getSteppedPrice().getPrice());    int i=pricedEvent.getSteppedPrices().indexOf(row.getSteppedPrice());    pricedEvent.getSteppedPrices().add(i + 1,sp);    rowToAdd.setSteppedPrice(sp);    events.add(index + 1,rowToAdd);  }  index+=addToIndex;}  }
class C{  @Override protected void drawYLabels(Canvas c,float fixedPosition,float[] positions,float offset){  mAxisLabelPaint.setTypeface(mYAxis.getTypeface());  mAxisLabelPaint.setTextSize(mYAxis.getTextSize());  mAxisLabelPaint.setColor(mYAxis.getTextColor());  for (int i=0; i < mYAxis.mEntryCount; i++) {    String text=mYAxis.getFormattedLabel(i);    if (!mYAxis.isDrawTopYLabelEntryEnabled() && i >= mYAxis.mEntryCount - 1)     return;    c.drawText(text,positions[i * 2],fixedPosition - offset,mAxisLabelPaint);  }}  }
class C{  protected Size2D arrangeRN(BlockContainer container,Graphics2D g2,RectangleConstraint constraint){  Size2D s1=arrangeNN(container,g2);  if (constraint.getWidthRange().contains(s1.width)) {    return s1;  } else {    RectangleConstraint c=constraint.toFixedWidth(constraint.getWidthRange().getUpperBound());    return arrangeFN(container,g2,c);  }}  }
class C{  @CanIgnoreReturnValue @Override public int add(E element,int occurrences){  checkNotNull(element);  if (occurrences == 0) {    return count(element);  }  CollectPreconditions.checkPositive(occurrences,"occurences");  while (true) {    AtomicInteger existingCounter=Maps.safeGet(countMap,element);    if (existingCounter == null) {      existingCounter=countMap.putIfAbsent(element,new AtomicInteger(occurrences));      if (existingCounter == null) {        return 0;      }    }    while (true) {      int oldValue=existingCounter.get();      if (oldValue != 0) {        try {          int newValue=IntMath.checkedAdd(oldValue,occurrences);          if (existingCounter.compareAndSet(oldValue,newValue)) {            return oldValue;          }        } catch (        ArithmeticException overflow) {          throw new IllegalArgumentException("Overflow adding " + occurrences + " occurrences to a count of "+ oldValue);        }      } else {        AtomicInteger newCounter=new AtomicInteger(occurrences);        if ((countMap.putIfAbsent(element,newCounter) == null) || countMap.replace(element,existingCounter,newCounter)) {          return 0;        }        break;      }    }  }}  }
class C{  public void accessTime(final long accessTime){  this.accessTime=accessTime;}  }
class C{  public TreeMap<Integer,Collection<Revisions>> listIDs(final String hostport,final int depth){  TreeMap<Integer,Collection<Revisions>> result=new TreeMap<>();  TreeMap<Integer,TreeSet<String>> list=directory.get(hostport);  if (list != null) {    for (    Map.Entry<Integer,TreeSet<String>> entry : list.entrySet()) {      if (depth != -1 && entry.getKey() != depth)       continue;      Collection<Revisions> r=new ArrayList<>(entry.getValue().size());      for (      String datehash : entry.getValue()) {        r.add(new Revisions(hostport,entry.getKey(),datehash));      }      result.put(entry.getKey(),r);    }  }  return result;}  }
class C{  public static Map<String,Object> createPartyGroup(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=ctx.getDelegator();  GenericValue userLogin=(GenericValue)context.get("userLogin");  Timestamp now=UtilDateTime.nowTimestamp();  String partyId=(String)context.get("partyId");  Locale locale=(Locale)context.get("locale");  if (UtilValidate.isEmpty(partyId)) {    try {      partyId=delegator.getNextSeqId("Party");    } catch (    IllegalArgumentException e) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"partyservices.could_not_create_party_group_generation_failure",locale));    }  } else {    if (partyId.matches("\\d+")) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"partyservices.could_not_create_party_ID_digit",locale));    }  }  try {    GenericValue party=EntityQuery.use(delegator).from("Party").where("partyId",partyId).queryOne();    GenericValue partyGroupPartyType=EntityQuery.use(delegator).from("PartyType").where("partyTypeId","PARTY_GROUP").cache().queryOne();    if (partyGroupPartyType == null) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"partyservices.partyservices.party_type_not_found_in_database_cannot_create_party_group",locale));    }    if (party != null) {      GenericValue partyType=party.getRelatedOne("PartyType",true);      if (!EntityTypeUtil.isType(partyType,partyGroupPartyType)) {        return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"partyservices.partyservices.cannot_create_party_group_already_exists_not_PARTY_GROUP_type",locale));      }    } else {      String partyTypeId="PARTY_GROUP";      if (UtilValidate.isNotEmpty(context.get("partyTypeId"))) {        GenericValue desiredPartyType=EntityQuery.use(delegator).from("PartyType").where("partyTypeId",context.get("partyTypeId")).cache().queryOne();        if (desiredPartyType != null && EntityTypeUtil.isType(desiredPartyType,partyGroupPartyType)) {          partyTypeId=desiredPartyType.getString("partyTypeId");        } else {          return ServiceUtil.returnError(UtilProperties.getMessage(resource,"PartyPartyTypeIdNotFound",UtilMisc.toMap("partyTypeId",context.get("partyTypeId")),locale));        }      }      Map<String,Object> newPartyMap=UtilMisc.toMap("partyId",partyId,"partyTypeId",partyTypeId,"createdDate",now,"lastModifiedDate",now);      if (userLogin != null) {        newPartyMap.put("createdByUserLogin",userLogin.get("userLoginId"));        newPartyMap.put("lastModifiedByUserLogin",userLogin.get("userLoginId"));      }      String statusId=(String)context.get("statusId");      party=delegator.makeValue("Party",newPartyMap);      party.setNonPKFields(context);      if (statusId == null) {        statusId="PARTY_ENABLED";      }      party.set("statusId",statusId);      party.create();      GenericValue partyStat=delegator.makeValue("PartyStatus",UtilMisc.toMap("partyId",partyId,"statusId",statusId,"statusDate",now));      partyStat.create();    }    GenericValue partyGroup=EntityQuery.use(delegator).from("PartyGroup").where("partyId",partyId).queryOne();    if (partyGroup != null) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"partyservices.cannot_create_party_group_already_exists",locale));    }    partyGroup=delegator.makeValue("PartyGroup",UtilMisc.toMap("partyId",partyId));    partyGroup.setNonPKFields(context);    partyGroup.create();  } catch (  GenericEntityException e) {    Debug.logWarning(e,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"partyservices.data_source_error_adding_party_group",UtilMisc.toMap("errMessage",e.getMessage()),locale));  }  result.put("partyId",partyId);  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  return result;}  }
class C{  public String sizeTipText(){  return "Size of the compressed matrix. Should be \n" + "less than the number of labels and more than 1.";}  }
class C{  public static Collection<ClusterNode> aliveRemoteServerNodesWithCaches(final GridCacheSharedContext ctx,AffinityTopologyVersion topOrder){  return ctx.discovery().aliveRemoteServerNodesWithCaches(topOrder);}  }
class C{  public void finishTransitionImmediately(){  mTransitionState=TRANSITION_NONE;  for (int i=0; i < mLayers.length; i++) {    mAlphas[i]=mIsLayerOn[i] ? 255 : 0;  }  invalidateSelf();}  }
class C{  private static boolean isConstIntZeroOrKnownNull(RegisterSpec spec){  TypeBearer tb=spec.getTypeBearer();  if (tb instanceof CstLiteralBits) {    CstLiteralBits clb=(CstLiteralBits)tb;    return (clb.getLongBits() == 0);  }  return false;}  }
class C{  private boolean isUnderlyingTypeAValue(AnnotatedTypeMirror type){  return coveredClassStrings.contains(type.getUnderlyingType().toString());}  }
class C{  protected Path createBowtie(DrawContext dc){  LatLon center=this.circle.getCenter();  double dist=this.circle.getRadius() * 0.75;  Angle distance=Angle.fromRadians(dist / dc.getGlobe().getRadius());  LatLon a=LatLon.greatCircleEndPosition(center,Angle.fromDegrees(-65.0),distance);  LatLon b=LatLon.greatCircleEndPosition(center,Angle.fromDegrees(-115.0),distance);  LatLon c=LatLon.greatCircleEndPosition(center,Angle.fromDegrees(65.0),distance);  LatLon d=LatLon.greatCircleEndPosition(center,Angle.fromDegrees(115.0),distance);  Path bowtie=this.createPath();  bowtie.setPositions(this.asPositionList(a,b,c,d,a));  return bowtie;}  }
class C{  public void shutdown(){  ExecutorService executor=Executors.newScheduledThreadPool(0);  executor.submit(createShutdown(0));}  }
class C{  public Deadtime(long deadtimePeriod,TimeUnit unit){  setPeriod(deadtimePeriod,unit);}  }
class C{  public void paintSliderThumbBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBorder(context,g,x,y,w,h,orientation);}  }
class C{  private static Geometry createPolygon(Geometry[] parts){  LinearRing[] rings=new LinearRing[parts.length];  for (int i=0; i < parts.length; i++) {    rings[i]=(LinearRing)parts[i];  }  return createPolygon(rings);}  }
class C{  public long precision(){  return precision;}  }
class C{  public MWFActivity(MWFProcess process,int next_ID,PO lastPO){  this(process,next_ID);  if (lastPO != null) {    if (lastPO.get_Table_ID() == getAD_Table_ID() && lastPO.get_ID() == getRecord_ID()) {      m_po=lastPO;    }  }}  }
class C{  static String formatFlags(byte type,byte flags){  if (flags == 0)   return "";switch (type) {case TYPE_SETTINGS:case TYPE_PING:    return flags == FLAG_ACK ? "ACK" : BINARY[flags];case TYPE_PRIORITY:case TYPE_RST_STREAM:case TYPE_GOAWAY:case TYPE_WINDOW_UPDATE:  return BINARY[flags];}String result=flags < FLAGS.length ? FLAGS[flags] : BINARY[flags];if (type == TYPE_PUSH_PROMISE && (flags & FLAG_END_PUSH_PROMISE) != 0) {return result.replace("HEADERS","PUSH_PROMISE");} else if (type == TYPE_DATA && (flags & FLAG_COMPRESSED) != 0) {return result.replace("PRIORITY","COMPRESSED");}return result;}  }
class C{  public static ArrayList<Object> singletons(Instances instancesNoClass,Instances classes) throws Exception {  ArrayList<Object> setOfItemSets=new ArrayList<Object>();  LabeledItemSet current;  for (int i=0; i < instancesNoClass.numAttributes(); i++) {    if (instancesNoClass.attribute(i).isNumeric()) {      throw new Exception("Can't handle numeric attributes!");    }    for (int j=0; j < instancesNoClass.attribute(i).numValues(); j++) {      for (int k=0; k < (classes.attribute(0)).numValues(); k++) {        current=new LabeledItemSet(instancesNoClass.numInstances(),k);        current.m_items=new int[instancesNoClass.numAttributes()];        for (int l=0; l < instancesNoClass.numAttributes(); l++) {          current.m_items[l]=-1;        }        current.m_items[i]=j;        setOfItemSets.add(current);      }    }  }  return setOfItemSets;}  }
class C{  @Override public CompilerPhase newExecution(IR ir){  return this;}  }
class C{  public boolean isCurrent(String first,String second){  int start=pos;  if (!forwardIfCurrent(first))   return false;  removeSpace();  boolean rtn=isCurrent(second);  pos=start;  return rtn;}  }
class C{  public boolean isVoid(){  return effects.isEmpty() || (type == RuleType.PROB && effects.size() == 1 && effects.containsKey(new Effect()));}  }
class C{  public double sdTerm(int numObservations,int dimensions){  double constantTerm=Math.pow(Math.PI / 4.0,(double)dimensions / 2.0);  double result=0.0;  if (dimensions % 2 == 0) {    for (int d=dimensions / 2; d > 1; d--) {      result-=Math.log(d);    }  } else {    constantTerm*=Math.pow(2.0,(double)(dimensions + 1) / 2.0);    constantTerm/=Math.sqrt(Math.PI);    for (int d=dimensions; d > 1; d-=2) {      result-=Math.log(d);    }  }  result+=Math.log(constantTerm);  return result;}  }
class C{  public S3ManifestComparator(String key,S3Reader connection,S3ObjectWriter writer,S3Deleter deleter,S3StringWriter stringWriter){  this.key=key;  this.versionedKey=newKey(1L).toJson();  this.reader=connection;  this.writer=writer;  this.deleter=deleter;  this.stringWriter=stringWriter;  backoff=500l;}  }
class C{  public List<ValueSource> parseValueSourceList() throws SyntaxError {  List<ValueSource> sources=new ArrayList<>(3);  while (hasMoreArguments()) {    sources.add(parseValueSource(true));  }  return sources;}  }
class C{  public Matrix3f rotateYXZ(float angleY,float angleX,float angleZ){  return rotateYXZ(angleY,angleX,angleZ,this);}  }
class C{  public static EpisodeMatchingResult detectEpisodeFromFilenameAlternative(String name,String showname){  LOGGER.debug("parsing '" + name + "'");  EpisodeMatchingResult result=new EpisodeMatchingResult();  Pattern regex;  Matcher m;  String filename=FilenameUtils.getName(name);  String extension=FilenameUtils.getExtension(name);  if (filename.toLowerCase().matches("(video_ts|vts_\\d\\d_\\d)\\.(vob|bup|ifo)") || filename.toLowerCase().matches("(index\\.bdmv|movieobject\\.bdmv|\\d{5}\\.m2ts)")) {    name=FilenameUtils.getPath(name);  }  String basename=ParserUtils.removeStopwordsAndBadwordsFromTvEpisodeName(name);  String foldername="";  regex=Pattern.compile("(.*[\\/\\\\])");  m=regex.matcher(basename);  if (m.find()) {    foldername=m.group(1);    basename=basename.replaceAll(regex.pattern(),"");  }  if (showname != null && !showname.isEmpty()) {    basename=basename.replaceAll("(?i)^" + Pattern.quote(showname) + "","");    basename=basename.replaceAll("(?i) " + Pattern.quote(showname) + " ","");  }  basename=basename.replaceFirst("\\.\\w{1,4}$","");  basename=basename.replaceFirst("[\\(\\[]\\d{4}[\\)\\]]","");  basename=basename + " ";  result.stackingMarkerFound=!Utils.getStackingMarker(filename).isEmpty() ? true : false;  result.name=basename.trim();  if (result.season == -1) {    regex=seasonPattern;    m=regex.matcher(foldername + basename);    if (m.find()) {      int s=result.season;      try {        s=Integer.parseInt(m.group(2));      } catch (      NumberFormatException nfe) {      }      result.season=s;      LOGGER.trace("add found season " + s);    }  }  String numbers=basename.replaceAll("[^0-9]","");  if (numbers.length() == 3) {    regex=numbers3Pattern;    m=regex.matcher(basename);    if (m.find()) {      int s=Integer.parseInt(m.group(1));      int ep=Integer.parseInt(m.group(2));      if (ep > 0 && !result.episodes.contains(ep)) {        result.episodes.add(ep);        LOGGER.trace("add found EP " + ep);      }      LOGGER.trace("add found season " + s);      result.season=s;      return result;    } else {      regex=numbers2Pattern;      m=regex.matcher(basename);      if (m.find()) {        int ep=Integer.parseInt(m.group(1));        if (ep > 0 && !result.episodes.contains(ep)) {          result.episodes.add(ep);          LOGGER.trace("add found EP " + ep);        }      }    }  } else   if (numbers.length() == 2) {    regex=numbers2Pattern;    m=regex.matcher(basename);    if (m.find()) {      int ep=Integer.parseInt(m.group(1));      if (ep > 0 && !result.episodes.contains(ep)) {        result.episodes.add(ep);        LOGGER.trace("add found EP " + ep);      }      return result;    }  } else   if (numbers.length() == 1) {    int ep=Integer.parseInt(numbers);    if (ep > 0 && !result.episodes.contains(ep)) {      result.episodes.add(ep);      LOGGER.trace("add found EP " + ep);    }    return result;  }  regex=seasonMultiEP;  m=regex.matcher(foldername + basename);  int lastFoundEpisode=0;  while (m.find()) {    int s=-1;    try {      s=Integer.parseInt(m.group(1));      String eps=m.group(2);      Pattern regex2=episodePattern;      Matcher m2=regex2.matcher(eps);      while (m2.find()) {        int ep=0;        try {          ep=Integer.parseInt(m2.group(1));        } catch (        NumberFormatException nfe) {        }        if (ep > 0 && !result.episodes.contains(ep) && (lastFoundEpisode == 0 || lastFoundEpisode + 1 == ep)) {          lastFoundEpisode=ep;          result.episodes.add(ep);          LOGGER.trace("add found EP " + ep);        }      }    } catch (    NumberFormatException nfe) {    }    if (s >= 0) {      result.season=s;      LOGGER.trace("add found season " + s);    }  }  regex=seasonMultiEP2;  m=regex.matcher(foldername + basename);  while (m.find()) {    int s=-1;    try {      if (m.group(2) != null && result.season == -1) {        s=Integer.parseInt(m.group(1));      }      String eps=m.group(2);      Pattern regex2=episodePattern;      Matcher m2=regex2.matcher(eps);      while (m2.find()) {        int ep=0;        try {          ep=Integer.parseInt(m2.group(1));        } catch (        NumberFormatException nfe) {        }        if (ep > 0 && !result.episodes.contains(ep)) {          result.episodes.add(ep);          LOGGER.trace("add found EP " + ep);        }      }    } catch (    NumberFormatException nfe) {    }    if (s >= 0) {      result.season=s;      LOGGER.trace("add found season " + s);    }  }  if (result.episodes.isEmpty()) {    regex=episodePattern2;    m=regex.matcher(basename);    while (m.find()) {      int ep=0;      try {        ep=Integer.parseInt(m.group(1));      } catch (      NumberFormatException nfe) {      }      if (ep > 0 && !result.episodes.contains(ep)) {        result.episodes.add(ep);        LOGGER.trace("add found EP " + ep);      }    }  }  if (result.episodes.isEmpty()) {    regex=episodePattern;    m=regex.matcher(basename);    while (m.find()) {      int ep=0;      try {        ep=Integer.parseInt(m.group(1));      } catch (      NumberFormatException nfe) {      }      if (ep > 0 && !result.episodes.contains(ep)) {        result.episodes.add(ep);        LOGGER.trace("add found EP " + ep);      }    }  }  if (result.episodes.isEmpty()) {    regex=romanPattern;    m=regex.matcher(basename);    while (m.find()) {      int ep=0;      ep=decodeRoman(m.group(2));      if (ep > 0 && !result.episodes.contains(ep)) {        result.episodes.add(ep);        LOGGER.trace("add found EP " + ep);      }    }  }  if (result.season == -1) {    m=date1.matcher(basename);    if (m.find()) {      int s=result.season;      try {        s=Integer.parseInt(m.group(1));        result.date=new SimpleDateFormat("yyyy-MM-dd").parse(m.group(1) + "-" + m.group(2)+ "-"+ m.group(3));      } catch (      NumberFormatException|ParseException nfe) {      }      result.season=s;      LOGGER.trace("add found year as season " + s);    }  }  if (result.season == -1) {    m=date2.matcher(basename);    if (m.find()) {      int s=result.season;      try {        s=Integer.parseInt(m.group(3));        result.date=new SimpleDateFormat("dd-MM-yyyy").parse(m.group(1) + "-" + m.group(2)+ "-"+ m.group(3));      } catch (      NumberFormatException|ParseException nfe) {      }      result.season=s;      LOGGER.trace("add found year as season " + s);    }  }  Collections.sort(result.episodes);  LOGGER.debug("returning result " + result);  return result;}  }
class C{  @Override public boolean isSquad(){  return false;}  }
class C{  @Override protected void onPause(){  super.onPause();  Log.d(TAG,"onPause() - another activity is taking focus (this activity is about to be \"paused\")");}  }
class C{  public List<KrigingPoint> calcInterpolationPoints(){  double north, south, east, west;  int nrows, ncols;  double northing, easting;  west=bMinX - 0.5 * resolution;  north=bMaxY + 0.5 * resolution;  nrows=(int)(Math.ceil((north - bMinY) / resolution));  ncols=(int)(Math.ceil((bMaxX - west) / resolution));  south=north - nrows * resolution;  east=west + ncols * resolution;  int row, col;  List<KrigingPoint> pnts=new ArrayList();  double halfResolution=resolution / 2;  for (row=0; row < nrows; row++) {    for (col=0; col < ncols; col++) {      easting=(col * resolution) + (west + halfResolution);      northing=(north - halfResolution) - (row * resolution);      pnts.add(new KrigingPoint(easting,northing,0.0));    }  }  return pnts;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  double x, y;  int progress;  int oldProgress;  int i, n;  double[][] vertices=null;  int numPolys=0;  ShapeType shapeType, outputShapeType=ShapeType.POLYLINE;  int[] parts={0};  double psi=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  MinimizationCriterion minimizationCriteria=MinimizationCriterion.AREA;  if (args[1].toLowerCase().contains("peri")) {    minimizationCriteria=MinimizationCriterion.PERIMETER;  }  String outputFile=args[2];  if (args[3].toLowerCase().contains("true")) {    outputShapeType=ShapeType.POLYGON;  } else {    outputShapeType=ShapeType.POLYLINE;  }  if ((inputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    shapeType=input.getShapeType();    numPolys=input.getNumberOfRecords();    DBFField fields[]=new DBFField[4];    fields[0]=new DBFField();    fields[0].setName("PARENT_ID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    fields[1]=new DBFField();    fields[1].setName("SHRT_AXIS");    fields[1].setDataType(DBFField.DBFDataType.NUMERIC);    fields[1].setFieldLength(10);    fields[1].setDecimalCount(3);    fields[2]=new DBFField();    fields[2].setName("LNG_AXIS");    fields[2].setDataType(DBFField.DBFDataType.NUMERIC);    fields[2].setFieldLength(10);    fields[2].setDecimalCount(3);    fields[3]=new DBFField();    fields[3].setName("ELONGATION");    fields[3].setDataType(DBFField.DBFDataType.NUMERIC);    fields[3].setFieldLength(10);    fields[3].setDecimalCount(3);    ShapeFile output=new ShapeFile(outputFile,outputShapeType,fields);    output.setProjectionStringFromOtherShapefile(input);    MinimumBoundingRectangle mbr=new MinimumBoundingRectangle(minimizationCriteria);    int recordNum;    if (shapeType.getBaseType() == ShapeType.POLYGON || shapeType.getBaseType() == ShapeType.POLYLINE) {      oldProgress=-1;      for (      ShapeFileRecord record : input.records) {        recordNum=record.getRecordNumber();        vertices=record.getGeometry().getPoints();        mbr.setCoordinates(vertices);        double[][] points=mbr.getBoundingBox();        Object[] rowData=new Object[4];        rowData[0]=(double)recordNum;        rowData[1]=mbr.getShortAxisLength();        rowData[2]=mbr.getLongAxisLength();        rowData[3]=mbr.getElongationRatio();        Geometry poly;        if (outputShapeType == ShapeType.POLYLINE) {          poly=new PolyLine(parts,points);        } else {          poly=new Polygon(parts,points);        }        output.addRecord(poly,rowData);        progress=(int)((recordNum * 100.0) / numPolys);        if (progress != oldProgress) {          updateProgress(progress);          oldProgress=progress;          if (cancelOp) {            cancelOperation();            return;          }        }      }    } else {      ArrayList<Double> pointsX=new ArrayList<>();      ArrayList<Double> pointsY=new ArrayList<>();      oldProgress=-1;      for (      ShapeFileRecord record : input.records) {        recordNum=record.getRecordNumber();        vertices=record.getGeometry().getPoints();        int numVertices=vertices.length;        for (i=0; i < numVertices; i++) {          pointsX.add(vertices[i][0]);          pointsY.add(vertices[i][1]);        }        progress=(int)((recordNum * 100.0) / numPolys);        if (progress != oldProgress) {          updateProgress(progress);          if (cancelOp) {            cancelOperation();            return;          }        }        oldProgress=progress;      }      vertices=new double[pointsX.size()][2];      for (i=0; i < vertices.length; i++) {        vertices[i][0]=pointsX.get(i);        vertices[i][1]=pointsY.get(i);      }      mbr.setCoordinates(vertices);      double[][] points=mbr.getBoundingBox();      Object[] rowData=new Object[4];      rowData[0]=1.0d;      rowData[1]=mbr.getShortAxisLength();      rowData[2]=mbr.getLongAxisLength();      rowData[3]=mbr.getElongationRatio();      Geometry poly;      if (outputShapeType == ShapeType.POLYLINE) {        poly=new PolyLine(parts,points);      } else {        poly=new Polygon(parts,points);      }      output.addRecord(poly,rowData);    }    output.write();    updateProgress("Displaying vector: ",0);    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public boolean isChargeFee(){  Object oo=get_Value(COLUMNNAME_ChargeFee);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public ModifyAtkSpell(String name,Nature nature,int amount,int atk,int cooldown,int def,double lifesteal,int mana,int minimumlevel,int range,int rate,int regen,double modifier){  super(name,nature,amount,atk,cooldown,def,lifesteal,mana,minimumlevel,range,rate,regen,modifier);}  }
class C{  public OpenCouplingManagerAction(final SimbrainDesktop desktop){  super("Open Coupling Manager...");  this.desktop=desktop;  putValue(SMALL_ICON,ResourceManager.getImageIcon("Coupling.png"));  putValue(SHORT_DESCRIPTION,"Open coupling manager");}  }
class C{  private static String formatSQL(String sql){  if (!sql.endsWith(";"))   sql+=";";  return sql;}  }
class C{  void deleteStreams(Transaction t,final Set<Long> streamIds){  if (streamIds.isEmpty()) {    return;  }  Set<StreamTestStreamMetadataTable.StreamTestStreamMetadataRow> smRows=Sets.newHashSet();  Multimap<StreamTestStreamHashAidxTable.StreamTestStreamHashAidxRow,StreamTestStreamHashAidxTable.StreamTestStreamHashAidxColumn> shToDelete=HashMultimap.create();  for (  Long streamId : streamIds) {    smRows.add(StreamTestStreamMetadataTable.StreamTestStreamMetadataRow.of(streamId));  }  StreamTestStreamMetadataTable table=tables.getStreamTestStreamMetadataTable(t);  Map<StreamTestStreamMetadataTable.StreamTestStreamMetadataRow,StreamMetadata> metadatas=table.getMetadatas(smRows);  Set<StreamTestStreamValueTable.StreamTestStreamValueRow> streamValueToDelete=Sets.newHashSet();  for (  Entry<StreamTestStreamMetadataTable.StreamTestStreamMetadataRow,StreamMetadata> e : metadatas.entrySet()) {    Long streamId=e.getKey().getId();    long blocks=getNumberOfBlocksFromMetadata(e.getValue());    for (long i=0; i < blocks; i++) {      streamValueToDelete.add(StreamTestStreamValueTable.StreamTestStreamValueRow.of(streamId,i));    }    ByteString streamHash=e.getValue().getHash();    Sha256Hash hash=Sha256Hash.EMPTY;    if (streamHash != com.google.protobuf.ByteString.EMPTY) {      hash=new Sha256Hash(streamHash.toByteArray());    } else {      log.error("Empty hash for stream " + streamId);    }    StreamTestStreamHashAidxTable.StreamTestStreamHashAidxRow hashRow=StreamTestStreamHashAidxTable.StreamTestStreamHashAidxRow.of(hash);    StreamTestStreamHashAidxTable.StreamTestStreamHashAidxColumn column=StreamTestStreamHashAidxTable.StreamTestStreamHashAidxColumn.of(streamId);    shToDelete.put(hashRow,column);  }  tables.getStreamTestStreamHashAidxTable(t).delete(shToDelete);  tables.getStreamTestStreamValueTable(t).delete(streamValueToDelete);  table.delete(smRows);}  }
class C{  public static synchronized void closeSessionFactories(){  log.trace("closeSessionFactories()");  Collection<SessionFactoryCtx> sessionFactories=new ArrayList<>(sessionFactoryCache.values());  for (  SessionFactoryCtx ctx : sessionFactories) {    closeSessionFactory(ctx);  }  sessionFactoryCache.clear();}  }
class C{  private void importRunnerEnvironment(ImportProject importProject,FolderEntry baseProjectFolder,String defaultRunnerName) throws ForbiddenException, ServerException, ConflictException, IOException {  VirtualFileEntry environmentsFolder=baseProjectFolder.getChild(Constants.CODENVY_RUNNER_ENVIRONMENTS_DIR);  if (environmentsFolder != null && environmentsFolder.isFile()) {    throw new ConflictException(String.format("Unable import runner environments. File with the name '%s' already exists.",Constants.CODENVY_RUNNER_ENVIRONMENTS_DIR));  } else   if (environmentsFolder == null) {    environmentsFolder=baseProjectFolder.createFolder(Constants.CODENVY_RUNNER_ENVIRONMENTS_DIR);  }  Map<String,RunnerSource> filteredRunners=importProject.getSource().getRunners().entrySet().stream().filter(null).collect(toMap(null,null));  for (  Map.Entry<String,RunnerSource> entry : filteredRunners.entrySet()) {    String name=entry.getKey().substring(entry.getKey().lastIndexOf('/') + 1);    if (defaultRunnerName == null || name.equals(defaultRunnerName)) {      try (InputStream in=new java.net.URL(entry.getValue().getLocation()).openStream()){        ((FolderEntry)environmentsFolder).createFolder(name).createFile("Dockerfile",in,null);      }     }  }}  }
class C{  public ASN1Primitive toASN1Primitive(){  ASN1EncodableVector v=new ASN1EncodableVector();  v.add(otherRevInfoFormat);  v.add(otherRevInfo);  return new DERSequence(v);}  }
class C{  public static <T>T assertIsNotNull(T t,String message) throws NullPointerException {  if (t == null)   throw new NullPointerException(message); else   return t;}  }
class C{  public static RxMarkdown with(String content,Context context){  return new RxMarkdown(content,context);}  }
class C{  @Override public void distributeScoreToOutlinks(String fromUrl,WebPage row,Collection<ScoreDatum> scoreData,int allCount){  ByteBuffer cashRaw=row.getMetadata().get(CASH_KEY);  if (cashRaw == null) {    return;  }  float cash=Bytes.toFloat(cashRaw.array(),cashRaw.arrayOffset() + cashRaw.position());  if (cash == 0) {    return;  }  float scoreUnit=cash / allCount;  float internalScore=scoreUnit * internalScoreFactor;  float externalScore=scoreUnit * externalScoreFactor;  for (  ScoreDatum scoreDatum : scoreData) {    try {      String toHost=new URL(scoreDatum.getUrl()).getHost();      String fromHost=new URL(fromUrl.toString()).getHost();      if (toHost.equalsIgnoreCase(fromHost)) {        scoreDatum.setScore(internalScore);      } else {        scoreDatum.setScore(externalScore);      }    } catch (    MalformedURLException e) {      LOG.error("Failed with the following MalformedURLException: ",e);      scoreDatum.setScore(externalScore);    }  }  row.getMetadata().put(CASH_KEY,ByteBuffer.wrap(Bytes.toBytes(0.0f)));}  }
class C{  private static int findIndex(ArrayList list,Object o){  int n=list.size();  for (int i=0; i < n; i++) {    if (list.get(i) == o)     return i;  }  return -1;}  }
class C{  public ArrayStack(){  super();}  }
class C{  public boolean hasUnresolvedTypeArgument(){  for (int i=0, varLength=this.substitutes.length; i < varLength; i++) {    if (this.substitutes[i] == null) {      return true;    }  }  return false;}  }
class C{  public int size(){  return entries.size();}  }
class C{  public String nextString(){  _laststring=_values.elementAt(_gen.nextInt());  return _laststring;}  }
class C{  public static <T1,T2,T3,T4,T5,T6,T7,R>TriFunction<T5,T6,T7,R> partial7(final T1 t1,final T2 t2,final T3 t3,final T4 t4,final HeptFunction<T1,T2,T3,T4,T5,T6,T7,R> heptFunc){  return null;}  }
class C{  public void testCloneNodeNotNamespaceAware() throws Exception {  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();  factory.setNamespaceAware(false);  builder=factory.newDocumentBuilder();  document=builder.parse(new InputSource(new StringReader("<menu " + "xmlns:f=\"http://food\" xmlns:a=\"http://addons\">" + "<f:item a:standard=\"strawberry\" deluxe=\"yes\">Waffles</f:item></menu>")));  name=(Element)document.getFirstChild().getFirstChild();  Element clonedName=(Element)name.cloneNode(true);  assertNull(clonedName.getNamespaceURI());  assertEquals("f:item",clonedName.getNodeName());  assertNull(clonedName.getLocalName());  assertNull(clonedName.getNamespaceURI());  assertEquals("yes",clonedName.getAttribute("deluxe"));  assertEquals("strawberry",clonedName.getAttribute("a:standard"));  assertEquals("",clonedName.getAttributeNS("http://addons","standard"));}  }
class C{  public boolean isGeneratedNode(AllocNode node){  if (node.getType() instanceof RefType) {    return classesAdded.contains(((RefType)node.getType()).getSootClass());  }  return false;}  }
class C{  public void paint(Graphics2D g){  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  origAlpha=1.0f;  Composite origComposite=g.getComposite();  if (origComposite instanceof AlphaComposite) {    AlphaComposite origAlphaComposite=(AlphaComposite)origComposite;    if (origAlphaComposite.getRule() == AlphaComposite.SRC_OVER) {      origAlpha=origAlphaComposite.getAlpha();    }  }  AffineTransform trans_0=g.getTransform();  paintRootGraphicsNode_0(g);  g.setTransform(trans_0);}  }
class C{  public ObjectWriter withDefaultPrettyPrinter(){  return withPrettyPrinter(new DefaultPrettyPrinter());}  }
class C{  public EducationalBackground qualifications(List<String> qualifications){  this.qualifications=qualifications;  return this;}  }
class C{  private void startRoomActivity(){  if (null != mCall) {    String roomId=mCall.getRoom().getRoomId();    Intent intent=new Intent(getApplicationContext(),VectorRoomActivity.class);    intent.putExtra(VectorRoomActivity.EXTRA_ROOM_ID,roomId);    intent.putExtra(VectorRoomActivity.EXTRA_MATRIX_ID,mMatrixId);    startActivity(intent);  }}  }
class C{  public synchronized ZooKeeperClientBuilder name(String name){  this.name=name;  return this;}  }
class C{  public Grant(String name){  super(name);}  }
class C{  public static String formatMillis(int millis){  String result="";  int hr=millis / 3600000;  millis%=3600000;  int min=millis / 60000;  millis%=60000;  int sec=millis / 1000;  if (hr > 0) {    result+=hr + ":";  }  if (min >= 0) {    if (min > 9) {      result+=min + ":";    } else {      result+="0" + min + ":";    }  }  if (sec > 9) {    result+=sec;  } else {    result+="0" + sec;  }  return result;}  }
class C{  public static void init(ILog logProxy){  LogImpl.setLogProxy(logProxy);}  }
class C{  boolean isWritingEncryptedData(){  return writingEncryptedData;}  }
class C{  public boolean isDeltaCRLIndicatorEnabled(){  return deltaCRLIndicator;}  }
class C{  public MongoClient clientForMembers(ServerAddress... seeds){  List<ServerAddress> addresses=new ArrayList<>();  for (  ServerAddress seedAddress : seeds) {    if (seedAddress != null)     addresses.add(seedAddress);  }  return clientForMembers(addresses);}  }
class C{  public ForwardSeekableStream(InputStream src){  this.src=src;}  }
class C{  public boolean isTransformStackValid(){  return transformStackValid;}  }
class C{  public String fromNodeString(){  return "<--- " + _fromNode;}  }
class C{  private boolean enableClockStats(boolean clockStatsEnabled){  boolean oldValue=CachePerfStats.enableClockStats;  CachePerfStats.enableClockStats=clockStatsEnabled;  return oldValue;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public static String encode(byte[] source,int off,int len,byte[] alphabet,boolean doPadding){  byte[] outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE);  int outLen=outBuff.length;  while (doPadding == false && outLen > 0) {    if (outBuff[outLen - 1] != '=') {      break;    }    outLen-=1;  }  return new String(outBuff,0,outLen);}  }
class C{  public static void hshaServer(PacketStreamer.Processor<PacketStreamerHandler> processor){  try {    TNonblockingServerTransport serverTransport=new TNonblockingServerSocket(port);    THsHaServer.Args args=new THsHaServer.Args(serverTransport);    args.processor(processor);    args.transportFactory(new TFramedTransport.Factory());    args.protocolFactory(new TBinaryProtocol.Factory(true,true));    TServer server=new THsHaServer(args);    log.info("Starting the packetstreamer hsha server on port {} ...",port);    server.serve();  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public long simpleQueryForLong(){  return simpleQuery().getLong();}  }
class C{  protected TileInfo createTileInfo(DrawContext dc){  Dimension tileDimension=this.computeTextureTileDimension(dc);  LevelSet levelSet=this.getLevelSet(tileDimension.width,tileDimension.height);  String cacheName=this.uniqueCacheName();  return new TileInfo(levelSet,cacheName,tileDimension.width,tileDimension.height);}  }
class C{  public static List<Point> SpatialKnnQuery(PointRDD pointRDD,Point queryCenter,Integer k){  @SuppressWarnings("serial") JavaRDD<Point> tmp=pointRDD.getRawPointRDD().mapPartitions(new PointKnnJudgement(queryCenter,k));  return tmp.takeOrdered(k,new PointDistanceComparator(queryCenter));}  }
class C{  public static void main(String[] args) throws IOException {  createCurrentVersionFiles(new File(args[0]));}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public Object readReply(Class expectedClass) throws Throwable {  int tag=read();  if (tag != 'r')   error("expected hessian reply at " + codeName(tag));  int major=read();  int minor=read();  tag=read();  if (tag == 'f')   throw prepareFault(); else {    _peek=tag;    Object value=readObject(expectedClass);    completeValueReply();    return value;  }}  }
class C{  private AddressingModeThreeGenerator(){}  }
class C{  void updateActivity(){  timeSinceLastUpdate=System.currentTimeMillis();}  }
class C{  public ClusterRenderer(Clusters clusters,List<String> varNames){  if (clusters == null) {    throw new NullPointerException();  }  if (varNames == null) {    throw new NullPointerException();  }  this.clusters=clusters;  this.varNames=varNames;  this.numClusters=clusters.getNumClusters();  setLayout(new BorderLayout());  add(clusterDisplay(),BorderLayout.CENTER);}  }
class C{  @Override public int hashCode(){  int hc=hashCodeValue;  if (hc == 0) {    hc=baseLocale.hashCode();    if (localeExtensions != null) {      hc^=localeExtensions.hashCode();    }    hashCodeValue=hc;  }  return hc;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private static boolean useGoogleLocationSettings(Context context){  if (!isEnforceable(context)) {    return false;  }  if (!ApiAdapterFactory.getApiAdapter().hasLocationMode()) {    return true;  } else {    return getUseLocationForServices(context) == USE_LOCATION_FOR_SERVICES_OFF;  }}  }
class C{  public void mouseExited(MouseEvent e){  ((MouseListener)a).mouseExited(e);  ((MouseListener)b).mouseExited(e);}  }
class C{  protected void sequence_Script(ISerializationContext context,Script semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  static void runLater(Runnable r){  NativePlatformFactory.getNativePlatform().getRunnableProcessor().invokeLater(r);}  }
class C{  protected Command processPacketIn(IOFSwitch sw,OFPacketIn msg,FloodlightContext cntx){  Ethernet eth=IFloodlightProviderService.bcStore.get(cntx,IFloodlightProviderService.CONTEXT_PI_PAYLOAD);  Command ret=Command.STOP;  String srcNetwork=macToGuid.get(eth.getSourceMACAddress());  if (eth.isBroadcast() || eth.isMulticast() || isDefaultGateway(eth)|| isDhcpPacket(eth)) {    ret=Command.CONTINUE;  } else   if (srcNetwork == null) {    log.trace("Blocking traffic from host {} because it is not attached to any network.",eth.getSourceMACAddress().toString());    ret=Command.STOP;  } else   if (oneSameNetwork(eth.getSourceMACAddress(),eth.getDestinationMACAddress())) {    ret=Command.CONTINUE;  }  if (log.isTraceEnabled())   log.trace("Results for flow between {} and {} is {}",new Object[]{eth.getSourceMACAddress(),eth.getDestinationMACAddress(),ret});  return ret;}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.SUPER_LITERAL;}  }
class C{  public CommunicationException(String arg0,Throwable arg1){  super(arg0,arg1);}  }
class C{  public static boolean isHeader(Header hdr){  return hdr.getBooleanValue(ZTABLE,false);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(2);  newVector.addElement(new Option("\tThe name of the field to average over.\n" + "\t(default \"Fold\")","F",1,"-F <field name>"));  newVector.addElement(new Option("\tThe number of results expected per average.\n" + "\t(default 10)","X",1,"-X <num results>"));  newVector.addElement(new Option("\tCalculate standard deviations.\n" + "\t(default only averages)","S",0,"-S"));  newVector.addElement(new Option("\tThe full class name of a ResultProducer.\n" + "\teg: weka.experiment.CrossValidationResultProducer","W",1,"-W <class name>"));  if ((m_ResultProducer != null) && (m_ResultProducer instanceof OptionHandler)) {    newVector.addElement(new Option("","",0,"\nOptions specific to result producer " + m_ResultProducer.getClass().getName() + ":"));    newVector.addAll(Collections.list(((OptionHandler)m_ResultProducer).listOptions()));  }  return newVector.elements();}  }
class C{  public Folder(Context context,AttributeSet attrs){  super(context,attrs);  LauncherAppState app=LauncherAppState.getInstance();  DeviceProfile grid=app.getDynamicGrid().getDeviceProfile();  setAlwaysDrawnWithCacheEnabled(false);  mInflater=LayoutInflater.from(context);  mIconCache=app.getIconCache();  Resources res=getResources();  mMaxCountX=(int)grid.numColumns;  if (LauncherAppState.isDisableAllApps()) {    mMaxCountY=mMaxNumItems=Integer.MAX_VALUE;  } else {    mMaxCountY=(int)grid.numRows;    mMaxNumItems=mMaxCountX * mMaxCountY;  }  mInputMethodManager=(InputMethodManager)getContext().getSystemService(Context.INPUT_METHOD_SERVICE);  mExpandDuration=res.getInteger(R.integer.config_folderExpandDuration);  mMaterialExpandDuration=res.getInteger(R.integer.config_materialFolderExpandDuration);  mMaterialExpandStagger=res.getInteger(R.integer.config_materialFolderExpandStagger);  if (sDefaultFolderName == null) {    sDefaultFolderName=res.getString(R.string.folder_name);  }  if (sHintText == null) {    sHintText=res.getString(R.string.folder_hint_text);  }  mLauncher=(Launcher)context;  setFocusableInTouchMode(true);}  }
class C{  public Object assertOneGetOldAndReset(){  ScopeTestHelper.assertTrue("Listener invocation not received but expected",isInvoked);  ScopeTestHelper.assertEquals("Mismatch in the number of invocations",1,newDataList.size());  ScopeTestHelper.assertEquals("Mismatch in the number of invocations",1,oldDataList.size());  if (lastOldData == null) {    ScopeTestHelper.fail("No old-data events received");  }  ScopeTestHelper.assertEquals("Mismatch in the number of old-data events",1,lastOldData.length);  ScopeTestHelper.assertNull("Expected no new-data events",lastNewData);  Object lastNew=lastOldData[0];  reset();  return lastNew;}  }
class C{  public LruCache(Context context){  this(Utils.calculateMemoryCacheSize(context));}  }
class C{  public static <T>TestResult<T> timeTasks(int nThreads,Callable<T> task) throws InterruptedException {  return timeTasks(nThreads,task,"Thread");}  }
class C{  public final void init(Key key,SecureRandom random) throws InvalidKeyException {  if (spi != null) {    spi.engineInit(key,random);  } else {    try {      chooseProvider(I_NO_PARAMS,key,null,random);    } catch (    InvalidAlgorithmParameterException e) {      throw new InvalidKeyException(e);    }  }  if (!skipDebug && pdebug != null) {    pdebug.println("KeyAgreement." + algorithm + " algorithm from: "+ this.provider.getName());  }}  }
class C{  DownloadCallback downloadCallback(){  return downloadCallback;}  }
class C{  private ListenerWrapper(final IDebuggerContainerListener listener){  m_listener=listener;}  }
class C{  public static boolean defaultReuseAddress(){  return Constants.WINDOWS ? false : true;}  }
class C{  public void clear(){  Node<K,V>[] tab;  modCount++;  if ((tab=table) != null && size > 0) {    size=0;    for (int i=0; i < tab.length; ++i)     tab[i]=null;  }}  }
class C{  public synchronized void activityStop(){  if (this.spinnerDialog != null) {    this.spinnerDialog.dismiss();    this.spinnerDialog=null;  }}  }
class C{  public NotificationChain basicSetExpression(Expression newExpression,NotificationChain msgs){  Expression oldExpression=expression;  expression=newExpression;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.WITH_STATEMENT__EXPRESSION,oldExpression,newExpression);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public final void init(final CharSequence text,int start,int end,@Nullable final Kind kind){  myKind=kind;  myText=text;  myStart=start;  myEnd=end;}  }
class C{  public void init(boolean forEncryption,CipherParameters params) throws IllegalArgumentException {  this.forEncryption=forEncryption;  reset();  if (params instanceof ParametersWithRandom) {    ParametersWithRandom p=(ParametersWithRandom)params;    padding.init(p.getRandom());    cipher.init(forEncryption,p.getParameters());  } else {    padding.init(null);    cipher.init(forEncryption,params);  }}  }
class C{  GridClientDataFactory(Set<GridClientCacheFlag> flags){  this.flags=flags;}  }
class C{  public void addCallBack(Provider provider,String callBack){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {    if (Objects.equals(provider.name(),Constants.FACEBOOK) || Objects.equals(provider.name(),Constants.LINKEDIN) || Objects.equals(provider.name(),Constants.MYSPACE)|| Objects.equals(provider.name(),Constants.YAHOO)|| Objects.equals(provider.name(),Constants.RUNKEEPER)) {      Log.d("SocialAuthAdapter","Callback Url not require");    } else     provider.setCallBackUri(callBack);  }}  }
class C{  public void addGlobPattern(final String pattern){  globMatchers.add(new GlobMatcher(pattern));}  }
class C{  public boolean isSignificant(){  return true;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return getEditorial(stack).getTitle();}  }
class C{  public String toString(){  String numStr=Long.toBinaryString(xBits);  String zero64="0000000000000000000000000000000000000000000000000000000000000000";  String padStr=zero64 + numStr;  String bitStr=padStr.substring(padStr.length() - 64);  String str=bitStr.substring(0,1) + "  " + bitStr.substring(1,12)+ "("+ getExponent()+ ") "+ bitStr.substring(12)+ " [ "+ x+ " ]";  return str;}  }
class C{  public Query prepareQueryforDefaultersReport(final Long wardId,final String fromDemand,final String toDemand,final Integer limit,final String ownerShipType){  final StringBuffer query=new StringBuffer(300);  query.append("select pmv from PropertyMaterlizeView pmv where pmv.propertyId is not null and pmv.isActive = true and pmv.isExempted=false ");  String arrearBalanceCond=" ((pmv.aggrArrDmd - pmv.aggrArrColl) + ((pmv.aggrCurrFirstHalfDmd + pmv.aggrCurrSecondHalfDmd) - (pmv.aggrCurrFirstHalfColl + pmv.aggrCurrSecondHalfColl))) ";  String arrearBalanceNotZeroCond=" and ((pmv.aggrArrDmd - pmv.aggrArrColl) + ((pmv.aggrCurrFirstHalfDmd + pmv.aggrCurrSecondHalfDmd) - (pmv.aggrCurrFirstHalfColl + pmv.aggrCurrSecondHalfColl)))!=0 ";  String orderByClause=" order by ";  query.append(arrearBalanceNotZeroCond);  if (StringUtils.isNotBlank(fromDemand) && StringUtils.isBlank(toDemand)) {    query.append(" and " + arrearBalanceCond + " >= ").append(fromDemand);  } else   if (StringUtils.isNotBlank(fromDemand) && StringUtils.isNotBlank(toDemand)) {    query.append(" and " + arrearBalanceCond + " >= ").append(fromDemand);    query.append(" and " + arrearBalanceCond + " <= ").append(toDemand);  }  if (wardId != null && wardId != -1) {    query.append(" and pmv.ward.id = ").append(wardId);  }  if (StringUtils.isNotBlank(ownerShipType)) {    if (ownerShipType.equals(OWNERSHIP_TYPE_PRIVATE)) {      query.append(" and (pmv.propTypeMstrID.code = '" + ownerShipType + "' or pmv.propTypeMstrID.code = 'EWSHS') and cast(pmv.propertyId as integer) not in (select propertyId from PropertyCourtCase) ");    } else     if (ownerShipType.equals(OWNERSHIP_TYPE_STATE_GOVT)) {      query.append(" and (pmv.propTypeMstrID.code = '" + ownerShipType + "') and  cast(pmv.propertyId as integer) not in (select propertyId from PropertyCourtCase) ");    } else     if (ownerShipType.equals(OWNERSHIP_TYPE_CENTRAL_GOVT)) {      query.append(" and (pmv.propTypeMstrID.code like  '" + ownerShipType + "%') and cast(pmv.propertyId as integer) not in (select propertyId from PropertyCourtCase) ");    } else     if (ownerShipType.equals(OWNERSHIP_TYPE_COURT_CASE)) {      query.append(" and cast(pmv.propertyId as integer) in (select propertyId from PropertyCourtCase)");    }  }  orderByClause=orderByClause.concat(arrearBalanceCond + " desc, pmv.ward.id asc ");  query.append(orderByClause);  final Query qry=persistenceService.getSession().createQuery(query.toString());  if (limit != null && limit != -1)   qry.setMaxResults(limit);  return qry;}  }
class C{  private JCExpression makeMetafactoryIndyCall(TranslationContext<?> context,int refKind,Symbol refSym,List<JCExpression> indy_args){  JCFunctionalExpression tree=context.tree;  MethodSymbol samSym=(MethodSymbol)types.findDescriptorSymbol(tree.type.tsym);  List<Object> staticArgs=List.<Object>of(typeToMethodType(samSym.type),new Pool.MethodHandle(refKind,refSym,types),typeToMethodType(tree.getDescriptorType(types)));  ListBuffer<Type> indy_args_types=new ListBuffer<>();  for (  JCExpression arg : indy_args) {    indy_args_types.append(arg.type);  }  MethodType indyType=new MethodType(indy_args_types.toList(),tree.type,List.<Type>nil(),syms.methodClass);  Name metafactoryName=context.needsAltMetafactory() ? names.altMetafactory : names.metafactory;  if (context.needsAltMetafactory()) {    ListBuffer<Object> markers=new ListBuffer<>();    for (    Type t : tree.targets.tail) {      if (t.tsym != syms.serializableType.tsym) {        markers.append(t.tsym);      }    }    int flags=context.isSerializable() ? FLAG_SERIALIZABLE : 0;    boolean hasMarkers=markers.nonEmpty();    boolean hasBridges=context.bridges.nonEmpty();    if (hasMarkers) {      flags|=FLAG_MARKERS;    }    if (hasBridges) {      flags|=FLAG_BRIDGES;    }    staticArgs=staticArgs.append(flags);    if (hasMarkers) {      staticArgs=staticArgs.append(markers.length());      staticArgs=staticArgs.appendList(markers.toList());    }    if (hasBridges) {      staticArgs=staticArgs.append(context.bridges.length() - 1);      for (      Symbol s : context.bridges) {        Type s_erasure=s.erasure(types);        if (!types.isSameType(s_erasure,samSym.erasure(types))) {          staticArgs=staticArgs.append(s.erasure(types));        }      }    }    if (context.isSerializable()) {      int prevPos=make.pos;      try {        make.at(kInfo.clazz);        addDeserializationCase(refKind,refSym,tree.type,samSym,tree,staticArgs,indyType);      }  finally {        make.at(prevPos);      }    }  }  return makeIndyCall(tree,syms.lambdaMetafactory,metafactoryName,staticArgs,indyType,indy_args,samSym.name);}  }
class C{  @Override public void command(){synchronized (this) {    cachedCollections=null;  }}  }
class C{  public boolean trim(){  if (bits.length == numWords(length))   return false;  bits=LongArrays.setLength(bits,numWords(length));  return true;}  }
class C{  public void insertBack(int x){  if (size == items.length) {    resize((int)(size * 1.01));  }  items[size]=x;  size=size + 1;}  }
class C{  @RequestMapping(value={"/","/login","/home","/settings","/jobs","/traces/**","/404"},method=RequestMethod.GET) public String index(){  return "index";}  }
class C{  public boolean isEmpty(){  return n == 0;}  }
class C{  public void reportJSException(String instanceId,String function,String exception){  if (WXEnvironment.isApkDebugable()) {    WXLogUtils.e("reportJSException >>>> instanceId:" + instanceId + ", exception function:"+ function+ ", exception:"+ exception);  }  StringBuilder errorMsg=new StringBuilder();  WXSDKInstance instance=WXSDKManager.getInstance().getSDKInstance(instanceId);  if (instance != null) {    instance.onJSException(null,function,exception);    errorMsg.append("bundleUrl:" + instance.getBundleUrl());  } else {    errorMsg.append(" bundleUrl:instance is null!");  }  errorMsg.append(" exception function:" + function);  errorMsg.append(" exception:" + exception);  WXErrorCode.WX_ERR_JS_EXECUTE.appendErrMsg(errorMsg.toString());  commitJSBridgeAlarmMonitor(instanceId,WXErrorCode.WX_ERR_JS_EXECUTE);}  }
class C{  public boolean isA_Transfer_Balance(){  Object oo=get_Value(COLUMNNAME_A_Transfer_Balance);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private boolean containsSingleMetric(BufferedReader reader) throws FormatParseException {  try {    reader.mark(1);    char firstChar=(char)reader.read();    reader.reset();    return firstChar == '{';  } catch (  IOException e) {    throw new FormatParseException("IOException while determining if single or multiple metrics ",e);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:51.205 -0500",hash_original_method="6DABC4D6488D8CA07EA47E3AEA2A5D8B",hash_generated_method="48ECFDAC0E20ADB9B68E16251B33DD0D") public synchronized void removeListeningPoints(){  for (Iterator it=this.listeningPoints.values().iterator(); it.hasNext(); ) {    ListeningPointImpl lp=(ListeningPointImpl)it.next();    lp.messageProcessor.stop();    it.remove();  }}  }
class C{  public String format(int number,int decimalPlaces){  StringBuilder sb=new StringBuilder();  int paddingRequired=decimalPlaces - (String.valueOf(number).length());  for (int x=0; x < paddingRequired; x++) {    sb.append("0");  }  sb.append(number);  return sb.toString();}  }
class C{  public final boolean postAtFrontOfQueue(Runnable r){  return mExec.postAtFrontOfQueue(wrapRunnable(r));}  }
class C{  public static void print(CtClass clazz,PrintStream stream){  (new FramePrinter(stream)).print(clazz);}  }
class C{  public void testSuccessWithFailureThreshold(){  CircuitBreaker breaker=new CircuitBreaker().withFailureThreshold(3);  breaker.halfOpen();  HalfOpenState state=new HalfOpenState(breaker);  assertFalse(breaker.isOpen());  assertFalse(breaker.isClosed());  state.recordFailure();  state.recordSuccess();  assertTrue(breaker.isClosed());}  }
class C{  public void removeListener(final BreakpointManagerListener listener){  listeners.removeListener(listener);}  }
class C{  private Eml convertMetadataToEml(Dataset metadata){  Eml eml=new Eml();  if (metadata != null) {    eml.setTitle(metadata.getTitle());    if (metadata.getDescription() != null) {      for (      String para : Splitter.onPattern("\r?\n").trimResults().omitEmptyStrings().split(metadata.getDescription())) {        eml.addDescriptionPara(para);      }    }    if (metadata.getHomepage() != null) {      eml.setDistributionUrl(metadata.getHomepage().toString());    }    if (metadata.getLogoUrl() != null) {      eml.setLogoUrl(metadata.getLogoUrl().toString());    }    if (metadata.getPubDate() != null) {      eml.setPubDate(metadata.getPubDate());    } else {      eml.setPubDate(new Date());      log.debug("pubDate set to today, because incoming pubDate was null");    }  }  return eml;}  }
class C{  public void writeAttribute(String name,Object value,String componentPropertyName) throws IOException {  if (name == null) {    throw new NullPointerException(MessageUtils.getExceptionMessageString(MessageUtils.NULL_PARAMETERS_ERROR_MESSAGE_ID,"name"));  }  if (value == null) {    throw new NullPointerException(MessageUtils.getExceptionMessageString(MessageUtils.NULL_PARAMETERS_ERROR_MESSAGE_ID,"value"));  }  Class valueClass=value.getClass();  if (valueClass == Boolean.class) {    if (Boolean.TRUE.equals(value)) {      writer.write(" ");      writer.write(name);    } else {    }  } else {    writer.write(" ");    writer.write(name);    writer.write("=\"");    ensureTextBufferCapacity(value.toString());    HtmlUtils.writeAttribute(writer,true,true,buffer,value.toString(),textBuffer,true);    writer.write("\"");  }}  }
class C{  public boolean isCellEditable(int rowIndex,int columnIndex){  return columnIndex == 1;}  }
class C{  public boolean isEmpty(){  return (getSelection() == null);}  }
class C{  public void publish(ModelQuery query){  Map<String,Object> paramsToSend=prepareData(query);  publish(paramsToSend);}  }
class C{  private Font styleFont(final Label label,final int style){  final FontData[] fontData=label.getFont().getFontData();  for (int i=0; i < fontData.length; i++) {    fontData[i].setStyle(fontData[i].getStyle() | style);  }  return new Font(label.getDisplay(),fontData);}  }
class C{  public IndicatorTreeElementLabelProvider(IndicatorViewPart viewPart){  this.viewPart=viewPart;}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) public T adapter(Adapter adapter){  if (view instanceof AdapterView) {    AdapterView av=(AdapterView)view;    av.setAdapter(adapter);  }  return self();}  }
class C{  public FixedSizeThumbnailMaker keepAspectRatio(boolean keep){  if (ready.isSet(PARAM_KEEP_RATIO)) {    throw new IllegalStateException("Whether to keep the aspect ratio has already been set.");  }  this.keepRatio=keep;  ready.set(PARAM_KEEP_RATIO);  return this;}  }
class C{  public void evaluate(final EvolutionState state,final int thread,final GPData input,final ADFStack stack,final GPIndividual individual,final Problem problem,final int argument){  if (argument >= adf.children.length || argument < 0) {    individual.printIndividual(state,0);    state.output.fatal("Invalid argument number for " + adf.errorInfo());  }  if (!(adf instanceof ADM))   arguments[argument].copyTo(input); else {    if (stack.moveOntoSubstack(1) != 1)     state.output.fatal("Substack prematurely empty for " + adf.errorInfo());    adf.children[argument].eval(state,thread,input,stack,individual,problem);    if (stack.moveFromSubstack(1) != 1)     state.output.fatal("Stack prematurely empty for " + adf.errorInfo());  }}  }
class C{  public static Wallet fromKeys(NetworkParameters params,List<ECKey> keys){  for (  ECKey key : keys)   checkArgument(!(key instanceof DeterministicKey));  KeyChainGroup group=new KeyChainGroup(params);  group.importKeys(keys);  return new Wallet(params,group);}  }
class C{  private static boolean isNewArrayAllZeroDims(NewArrayTree node){  boolean isAllZeros=true;  for (  ExpressionTree dim : node.getDimensions()) {    if (dim instanceof LiteralTree) {      Object val=((LiteralTree)dim).getValue();      if (!(val instanceof Number) || !(new Integer(0).equals(val))) {        isAllZeros=false;        break;      }    } else {      isAllZeros=false;      break;    }  }  return isAllZeros;}  }
class C{  private void invalidateElementsByTagName(Node node){  if (node.getNodeType() != ELEMENT_NODE) {    return;  }  AbstractDocument ad=getCurrentDocument();  String ns=node.getNamespaceURI();  String nm=node.getNodeName();  String ln=(ns == null) ? node.getNodeName() : node.getLocalName();  for (Node n=this; n != null; n=n.getParentNode()) {switch (n.getNodeType()) {case ELEMENT_NODE:case DOCUMENT_NODE:      ElementsByTagName l=ad.getElementsByTagName(n,nm);    if (l != null) {      l.invalidate();    }  l=ad.getElementsByTagName(n,"*");if (l != null) {  l.invalidate();}ElementsByTagNameNS lns=ad.getElementsByTagNameNS(n,ns,ln);if (lns != null) {lns.invalidate();}lns=ad.getElementsByTagNameNS(n,"*",ln);if (lns != null) {lns.invalidate();}lns=ad.getElementsByTagNameNS(n,ns,"*");if (lns != null) {lns.invalidate();}lns=ad.getElementsByTagNameNS(n,"*","*");if (lns != null) {lns.invalidate();}}}Node c=node.getFirstChild();while (c != null) {invalidateElementsByTagName(c);c=c.getNextSibling();}}  }
class C{  private String readNfcErrorMsg(ByteBuffer reply) throws IOException {  int errorType=reply.getInt();  int errorCode=reply.getInt();  int msgLen=reply.getInt();  if (msgLen == 0) {    return "";  }  ByteBuffer msgBuffer=ByteBuffer.allocate(msgLen);  readFully(msgBuffer);  String errorMsg=new String(msgBuffer.array(),0,msgLen - 1,Charsets.US_ASCII);  return String.format("NFC Error %d/%d: %s",errorType,errorCode,errorMsg);}  }
