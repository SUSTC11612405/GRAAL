class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY);}  }
class C{  static public String localDateToString(LocalDate date){  return localDateToString(date,"");}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer(nRow * nCol * 8);  int i, j;  for (i=0; i < nRow; i++) {    for (j=0; j < nCol; j++) {      buffer.append(values[i][j]).append(" ");    }    buffer.append("\n");  }  return buffer.toString();}  }
class C{  public int start(){  return start(0);}  }
class C{  public static boolean isFileTransferHttpType(String mime){  return mime != null && mime.toLowerCase().startsWith(FileTransferHttpInfoDocument.MIME_TYPE);}  }
class C{  public ConstantMigrationModel(String name,int demeCount,Parameter migrationParameter){  super(name);  this.demeCount=demeCount;  this.migrationParameter=migrationParameter;  addVariable(migrationParameter);  migrationParameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,0.0,migrationParameter.getDimension()));}  }
class C{  public static String stringFor(int n){switch (n) {case MAJOR_VERSION:    return "MAJOR_VERSION";case MINOR_VERSION:  return "MINOR_VERSION";case PATCH_LEVEL:return "PATCH_LEVEL";}return "INVALID libraryPropertyType: " + n;}  }
class C{  public SocketTimeoutException(String detailMessage,Throwable cause){  super(detailMessage,cause);}  }
class C{  public void changeChangeEnabled(ChangeEnabledState state) throws RefactoringException {  RefactoringSession session=getRefactoringSession(state.getSessionId());  session.updateChangeEnabled(state.getChangeId(),state.isEnabled());}  }
class C{  public long sizeAsLong(){  long sizeRaw=map.sizeAsLong();  MVMap<Long,Object[]> undo=transaction.store.undoLog;  long undoLogSize;synchronized (undo) {    undoLogSize=undo.sizeAsLong();  }  if (undoLogSize == 0) {    return sizeRaw;  }  if (undoLogSize > sizeRaw) {    long size=0;    Cursor<K,VersionedValue> cursor=map.cursor(null);    while (cursor.hasNext()) {      VersionedValue data;synchronized (transaction.store.undoLog) {        K key=cursor.next();        data=getValue(key,readLogId,cursor.getValue());      }      if (data != null && data.value != null) {        size++;      }    }    return size;  }synchronized (undo) {    long size=map.sizeAsLong();    MVMap<Object,Integer> temp=transaction.store.createTempMap();    try {      for (      Entry<Long,Object[]> e : undo.entrySet()) {        Object[] op=e.getValue();        int m=(Integer)op[0];        if (m != mapId) {          continue;        }        @SuppressWarnings("unchecked") K key=(K)op[1];        if (get(key) == null) {          Integer old=temp.put(key,1);          if (old == null) {            size--;          }        }      }    }  finally {      transaction.store.store.removeMap(temp);    }    return size;  }}  }
class C{  public static list<tuple2<String,Integer>> extract(String query,Iterable<String> choices,Function<tuple2<String,Boolean>,String> processor,Function<tuple3<String,String,Boolean>,Integer> scorer,Integer limit){  if (limit == null) {    limit=5;  }  if (choices == null) {    return x.list();  }  try {    if (x.len(choices) == 0) {      return x.list();    }  } catch (  Exception e) {  }  if (x.isFalse(processor)) {    processor=full_process;  }  if (x.isFalse(scorer)) {    scorer=WRatio;  }  list<tuple2<String,Integer>> sl=x.list();  for (  String choice : choices) {    String processed=processor.apply(x.<String,Boolean>tuple2(choice,null));    int score=scorer.apply(x.<String,String,Boolean>tuple3(query,processed,null));    sl.append(x.tuple2(choice,score));  }  sl=x.list(x.sort(sl,x.<Integer>lambdaF("i : i[1]"),true));  return sl.sliceTo(limit);}  }
class C{  public void startEditingAtPath(JTree tree,TreePath path){  tree.scrollPathToVisible(path);  if (path != null && tree.isVisible(path))   startEditing(path,null);}  }
class C{  @Inject protected DefaultMetricService(MonitorService monitorService,Provider<MetricReader<Metric>> metricsprovider,Provider<MetricReader<MetricQuery>> queryprovider,SystemConfiguration config){  super(config);  requireArgument(monitorService != null,"Monitor service cannot be null.");  _monitorService=monitorService;  _metricReaderProviderForMetrics=metricsprovider;  _metricReaderProviderForQueries=queryprovider;}  }
class C{  public void traverse(Node pos,Node top) throws org.xml.sax.SAXException {  this.fSerializer.startDocument();  if (pos.getNodeType() != Node.DOCUMENT_NODE) {    Document ownerDoc=pos.getOwnerDocument();    if (ownerDoc != null && ownerDoc.getImplementation().hasFeature("Core","3.0")) {      fIsLevel3DOM=true;    }  } else {    if (((Document)pos).getImplementation().hasFeature("Core","3.0")) {      fIsLevel3DOM=true;    }  }  if (fSerializer instanceof LexicalHandler) {    fLexicalHandler=((LexicalHandler)this.fSerializer);  }  if (fFilter != null)   fWhatToShowFilter=fFilter.getWhatToShow();  while (null != pos) {    startNode(pos);    Node nextNode=null;    nextNode=pos.getFirstChild();    while (null == nextNode) {      endNode(pos);      if ((null != top) && top.equals(pos))       break;      nextNode=pos.getNextSibling();      if (null == nextNode) {        pos=pos.getParentNode();        if ((null == pos) || ((null != top) && top.equals(pos))) {          nextNode=null;          break;        }      }    }    pos=nextNode;  }  this.fSerializer.endDocument();}  }
class C{  @SuppressWarnings("static-access") public static int main(String[] args) throws Exception {  Options options=new Options();  options.addOption(OptionBuilder.withLongOpt("config-file").withDescription("Path to the XML configuration file").hasArg().withArgName("PATH").create());  options.addOption(OptionBuilder.withLongOpt("op").withDescription("name of operation to perform").hasArg().withArgName("OP").create());  options.addOption(OptionBuilder.withLongOpt("db").withDescription("Hive DB where the table or partition that " + "you want to replicate resides").hasArg().withArgName("DB").create());  options.addOption(OptionBuilder.withLongOpt("table").withDescription("Hive table to replicate or if a partition " + "is specified, the source table for the partition").hasArg().withArgName("TABLE").create());  options.addOption(OptionBuilder.withLongOpt("partition").withDescription("Hive partition to replicate").hasArg().withArgName("PARTITION").create());  options.addOption(OptionBuilder.withLongOpt("partition").withDescription("Hive partition to replicate").hasArg().withArgName("PARTITION").create());  options.addOption(OptionBuilder.withLongOpt("help").withDescription("Help message").create());  CommandLineParser parser=new BasicParser();  CommandLine cl=parser.parse(options,args);  String configPath=null;  String dbName=null;  String tableName=null;  String partitionName=null;  String op=null;  if (cl.hasOption("help")) {    CliUtils.printHelp("<command>",options);  }  if (cl.hasOption("config-file")) {    configPath=cl.getOptionValue("config-file");    LOG.info("config-file=" + configPath);  }  if (cl.hasOption("db")) {    dbName=cl.getOptionValue("db");    LOG.info("db=" + dbName);  }  if (cl.hasOption("table")) {    tableName=cl.getOptionValue("table");    LOG.info("table=" + tableName);  }  if (cl.hasOption("partition")) {    partitionName=cl.getOptionValue("partition");    LOG.info("partition=" + partitionName);  }  if (cl.hasOption("op")) {    op=cl.getOptionValue("op");    LOG.info("op=" + op);  }  if (configPath == null) {    throw new ArgumentException("config path not specified");  }  if (dbName == null) {    throw new ArgumentException("db was not specified!");  }  if (tableName == null) {    throw new ArgumentException("table was not specified!");  }  Configuration conf=new Configuration();  conf.addResource(new Path(configPath));  String srcName=conf.get("airbnb.hive.cluster.src.name");  String srcMetastoreHost=conf.get("airbnb.hive.cluster.src.metastore.host");  int srcMetastorePort=Integer.parseInt(conf.get("airbnb.hive.cluster.src.metastore.port"));  Path srcHdfsRoot=new Path(conf.get("airbnb.hive.cluster.src.hdfs.root"));  Path srcTmpDir=new Path(conf.get("airbnb.hive.cluster.src.hdfs.tmp.dir"));  String destName=conf.get("airbnb.hive.cluster.dest.name");  String destMetastoreHost=conf.get("airbnb.hive.cluster.dest.metastore.host");  int destMetastorePort=Integer.parseInt(conf.get("airbnb.hive.cluster.dest.metastore.port"));  Path destHdfsRoot=new Path(conf.get("airbnb.hive.cluster.dest.hdfs.root"));  Path destTmpDir=new Path(conf.get("airbnb.hive.cluster.dest.hdfs.tmp.dir"));  HiveObjectSpec spec=new HiveObjectSpec(dbName,tableName,partitionName);  LOG.info("srcName=" + srcName);  LOG.info("srcMetastoreHost=" + srcMetastoreHost);  LOG.info("srcMetastorePort=" + srcMetastorePort);  LOG.info("srcHdfsRoot=" + srcHdfsRoot);  LOG.info("srcTmpDir=" + srcTmpDir);  LOG.info("destName=" + destName);  LOG.info("destMetastoreHost=" + destMetastoreHost);  LOG.info("destMetastorePort=" + destMetastorePort);  LOG.info("destHdfsRoot=" + destHdfsRoot);  LOG.info("destTmpDir=" + destTmpDir);  LOG.info("pool.name=" + conf.get("pool.name"));  LOG.info("spec=" + spec);  HardCodedCluster srcCluster=new HardCodedCluster(srcName,srcMetastoreHost,srcMetastorePort,null,null,srcHdfsRoot,srcTmpDir);  HardCodedCluster destCluster=new HardCodedCluster(destName,destMetastoreHost,destMetastorePort,null,null,destHdfsRoot,destTmpDir);  DirectoryCopier directoryCopier=new DirectoryCopier(conf,destTmpDir,true);  ObjectConflictHandler conflictHandler=new ObjectConflictHandler();  conflictHandler.setConf(conf);  DestinationObjectFactory destinationObjectFactory=new DestinationObjectFactory();  destinationObjectFactory.setConf(conf);  if ("copy-unpartitioned-table".equals(op)) {    LOG.info("Copying an unpartitioned table");    ThriftHiveMetastoreClient ms=srcCluster.getMetastoreClient();    Table srcTable=ms.getTable(spec.getDbName(),spec.getTableName());    CopyUnpartitionedTableTask job=new CopyUnpartitionedTableTask(conf,destinationObjectFactory,conflictHandler,srcCluster,destCluster,spec,ReplicationUtils.getLocation(srcTable),directoryCopier,true);    if (job.runTask().getRunStatus() == RunInfo.RunStatus.SUCCESSFUL) {      return 0;    } else {      return -1;    }  } else   if ("copy-partitioned-table".equals(op)) {    LOG.info("Copying a partitioned table");    ThriftHiveMetastoreClient ms=srcCluster.getMetastoreClient();    Table srcTable=ms.getTable(spec.getDbName(),spec.getTableName());    CopyPartitionedTableTask job=new CopyPartitionedTableTask(conf,destinationObjectFactory,conflictHandler,srcCluster,destCluster,spec,ReplicationUtils.getLocation(srcTable));    if (job.runTask().getRunStatus() == RunInfo.RunStatus.SUCCESSFUL) {      return 0;    } else {      return -1;    }  } else   if (op.equals("copy-partition")) {    LOG.info("Copying a partition");    ThriftHiveMetastoreClient ms=srcCluster.getMetastoreClient();    Partition srcPartition=ms.getPartition(spec.getDbName(),spec.getTableName(),spec.getPartitionName());    CopyPartitionTask job=new CopyPartitionTask(conf,destinationObjectFactory,conflictHandler,srcCluster,destCluster,spec,ReplicationUtils.getLocation(srcPartition),Optional.<Path>empty(),new DirectoryCopier(conf,srcCluster.getTmpDir(),true),true);    if (job.runTask().getRunStatus() == RunInfo.RunStatus.SUCCESSFUL) {      return 0;    } else {      return -1;    }  } else {    throw new RuntimeException("Unhandled op " + op);  }}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tThe tolerance parameter for checking the stopping criterion.\n" + "\t(default 0.001)","T",1,"-T <double>"));  result.addElement(new Option("\tUse variant 1 of the algorithm when true, otherwise use variant 2.\n" + "\t(default true)","V",0,"-V"));  result.addAll(Collections.list(super.listOptions()));  return result.elements();}  }
class C{  public void testPartialCopy(){  Instances data;  data=new Instances(m_Instances,0,m_Instances.numInstances());  assertEquals("# of instances differ",m_Instances.numInstances(),data.numInstances());  data=new Instances(m_Instances,5,10);  assertEquals("# of instances differ",10,data.numInstances());}  }
class C{  public static boolean isPrimitiveWrapperArray(Class<?> clazz){  Assert.notNull(clazz,"Class must not be null");  return (clazz.isArray() && isPrimitiveWrapper(clazz.getComponentType()));}  }
class C{  public synchronized void returnBuf(byte[] buf){  if (buf == null || buf.length > mSizeLimit) {    return;  }  mBuffersByLastUse.add(buf);  int pos=Collections.binarySearch(mBuffersBySize,buf,BUF_COMPARATOR);  if (pos < 0) {    pos=-pos - 1;  }  mBuffersBySize.add(pos,buf);  mCurrentSize+=buf.length;  trim();}  }
class C{  private List<FilteredNavigationRecord> constructBrandFilteredNavigationRecords(final List<Object[]> list){  List<FilteredNavigationRecord> result=new ArrayList<FilteredNavigationRecord>(list.size());  for (  Object[] objArray : list) {    result.add(new FilteredNavigationRecordImpl((String)objArray[0],(String)objArray[1],(String)objArray[2],(Integer)objArray[3]));  }  return result;}  }
class C{  private static long hasher(long hashcode,byte[] list){  long sum=0;  for (  byte val : list) {    sum+=1L + val;  }  hashcode^=sum;  return hashcode;}  }
class C{  public boolean isEnableFilesLogging(){  return enableFilesLogging;}  }
class C{  protected boolean startEditing(TreePath path,MouseEvent event){  if (isEditing(tree) && tree.getInvokesStopCellEditing() && !stopEditing(tree)) {    return false;  }  completeEditing();  if (cellEditor != null && tree.isPathEditable(path)) {    int row=getRowForPath(tree,path);    if (cellEditor.isCellEditable(event)) {      editingComponent=cellEditor.getTreeCellEditorComponent(tree,path.getLastPathComponent(),tree.isPathSelected(path),tree.isExpanded(path),treeModel.isLeaf(path.getLastPathComponent()),row);      Rectangle nodeBounds=getPathBounds(tree,path);      if (nodeBounds == null) {        return false;      }      editingRow=row;      Dimension editorSize=editingComponent.getPreferredSize();      if (editorSize.height != nodeBounds.height && getRowHeight() > 0)       editorSize.height=getRowHeight();      if (editorSize.width != nodeBounds.width || editorSize.height != nodeBounds.height) {        editorHasDifferentSize=true;        treeState.invalidatePathBounds(path);        updateSize();        nodeBounds=getPathBounds(tree,path);        if (nodeBounds == null) {          return false;        }      } else       editorHasDifferentSize=false;      tree.add(editingComponent);      editingComponent.setBounds(nodeBounds.x,nodeBounds.y,nodeBounds.width,nodeBounds.height);      editingPath=path;      AWTAccessor.getComponentAccessor().revalidateSynchronously(editingComponent);      editingComponent.repaint();      if (cellEditor.shouldSelectCell(event)) {        stopEditingInCompleteEditing=false;        tree.setSelectionRow(row);        stopEditingInCompleteEditing=true;      }      Component focusedComponent=SwingUtilities2.compositeRequestFocus(editingComponent);      boolean selectAll=true;      if (event != null) {        Point componentPoint=SwingUtilities.convertPoint(tree,new Point(event.getX(),event.getY()),editingComponent);        Component activeComponent=SwingUtilities.getDeepestComponentAt(editingComponent,componentPoint.x,componentPoint.y);        if (activeComponent != null) {          MouseInputHandler handler=new MouseInputHandler(tree,activeComponent,event,focusedComponent);          if (releaseEvent != null) {            handler.mouseReleased(releaseEvent);          }          selectAll=false;        }      }      if (selectAll && focusedComponent instanceof JTextField) {        ((JTextField)focusedComponent).selectAll();      }      return true;    } else     editingComponent=null;  }  return false;}  }
class C{  public int length(){  return steps.size();}  }
class C{  public void clearLocalCache(){  super.clearCache();}  }
class C{  @MediumTest public void testPreconditions(){  startActivity(mStartIntent,null,null);  mButton=(Button)getActivity().findViewById(R.id.go);  assertNotNull(getActivity());  assertNotNull(mButton);}  }
class C{  public static String humanReadableMillisCount(long millis,boolean shortDescription){  StringBuilder stringBuilder=new StringBuilder();  boolean started=false;  long days=TimeUnit.MILLISECONDS.toDays(millis);  if (days > 0) {    if (shortDescription) {      return days + " day" + (days > 1 ? "s" : "");    }    stringBuilder.append(String.format("%dd",days));    started=true;  }  long hours=TimeUnit.MILLISECONDS.toHours(millis) - TimeUnit.DAYS.toHours(TimeUnit.MILLISECONDS.toDays(millis));  if (started) {    stringBuilder.append(String.format(" %dh",hours));  } else   if (hours > 0) {    if (shortDescription) {      return hours + " hour" + (hours > 1 ? "s" : "");    }    stringBuilder.append(String.format("%dh",hours));    started=true;  }  long min=TimeUnit.MILLISECONDS.toMinutes(millis) - TimeUnit.HOURS.toMinutes(TimeUnit.MILLISECONDS.toHours(millis));  if (started) {    stringBuilder.append(String.format(" %dm",min));  } else   if (min > 0) {    if (shortDescription) {      return min + " minute" + (min > 1 ? "s" : "");    }    stringBuilder.append(String.format("%dm",min));    started=true;  }  long sec=TimeUnit.MILLISECONDS.toSeconds(millis) - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(millis));  if (started) {    stringBuilder.append(String.format(" %ds",sec));  } else   if (sec > 0) {    if (shortDescription) {      return sec + " second" + (sec > 1 ? "s" : "");    }    stringBuilder.append(String.format("%ds",sec));    started=true;  }  return stringBuilder.toString();}  }
class C{  private void resolveLayoutInclude(Layout layout){  List<View> includeList=new LinkedList<View>();  logger.warn("dumping layout {}, childrend list {} ",layout.name,layout.view.children);  for (  View view : layout.view.children) {    logger.warn("layout/view {}:{}: ",layout.name,view.name);    if (!view.name.equals("include")) {      continue;    }    logger.warn("Found include view {} in layout {} ",view,layout.name);    if (view.attr_exists("layout")) {      String layoutName=view.get_attr("layout");      logger.warn("include layout {} ",layoutName);    }  }}  }
class C{  public boolean equalTo(Entry e){  if (e == null)   return false;  if (e.mData != this.mData)   return false;  if (e.mXIndex != this.mXIndex)   return false;  if (Math.abs(e.mVal - this.mVal) > 0.00001f)   return false;  return true;}  }
class C{  protected AbstractSimilarityProvider(String name){  this.name=name;}  }
class C{  public boolean isDistributedAck(){  return this == DISTRIBUTED_ACK;}  }
class C{  public Info_Column(String colHeader,String colSQL,Class<?> colClass,int displayType,String IDcolSQL){  super(colHeader,colSQL,colClass,displayType,true,false,IDcolSQL);}  }
class C{  protected SaveHistoryImpl(){  super();}  }
class C{  public SusiThought mergeData(JSONArray table1){  JSONArray table0=this.getData();  while (table0.length() < table1.length())   table0.put(new JSONObject());  for (int i=0; i < table1.length(); i++) {    table0.getJSONObject(i).putAll(table1.getJSONObject(i));  }  setData(table0);  return this;}  }
class C{  @Nullable public static EmailHeader parse(@Nullable String line){  if (line == null)   return null;  String[] values=line.split(SEPARATOR);  if (values.length == 2) {    String name=values[0].trim();    String value=values[1].trim();    return new EmailHeader(name,value);  }  return null;}  }
class C{  public static void main(String[] args) throws Exception {  int res=ToolRunner.run(new Configuration(),new MapReduceIndexerTool(),args);  System.exit(res);}  }
class C{  public static TextArea create(String text){  return create(text,20);}  }
class C{  public static String format(long sysTime){  return LONG_DATE_FMT.format(new java.util.Date(sysTime));}  }
class C{  private void showEmptyMessage(){  overlayLabel.setText(ERROR_MESSAGE_TEXT);  overlayLabel.setFont(ERROR_MESSAGE_FONT);  overlayLabel.setForeground(Color.BLACK);  overlayLabel.setIcon(ERROR_MESSAGE_ICON);}  }
class C{  private static Matrix vandermonde(int rows,int cols){  Matrix result=new Matrix(rows,cols);  for (int r=0; r < rows; r++) {    for (int c=0; c < cols; c++) {      result.set(r,c,Galois.exp((byte)r,c));    }  }  return result;}  }
class C{  public void copyEntryContents(OutputStream out) throws IOException {  byte[] buf=new byte[LARGE_BUFFER_SIZE];  while (true) {    int numRead=read(buf,0,buf.length);    if (numRead == -1) {      break;    }    out.write(buf,0,numRead);  }}  }
class C{  public void run(){  LOGGER.info("Running Configurable Scenario...");  clientConfigurationProperties.getScenarios().forEach(null);}  }
class C{  public static <T>UnboundedSource<T,UnboundedSource.CheckpointMark> of(SourceFunction<T> flinkSource){  return new UnboundedFlinkSource<>(flinkSource);}  }
class C{  public OnlineAMM(double lambda){  this(lambda,DEFAULT_CLASS_BUDGET);}  }
class C{  @Override public int compareTo(Object o1){  int result;  if (o1 instanceof Minute) {    Minute m=(Minute)o1;    result=getHour().compareTo(m.getHour());    if (result == 0) {      result=this.minute - m.getMinute();    }  } else   if (o1 instanceof RegularTimePeriod) {    result=0;  } else {    result=1;  }  return result;}  }
class C{  public void showDropDown(int xOffset,int yOffset){  preShow();  window.setAnimationStyle(R.style.Animations_PopDownMenu_Left);  window.showAsDropDown(anchor,xOffset,yOffset);}  }
class C{  public void testAddressServiceInstantiation() throws Exception {  HostAddressService has=new HostAddressService(true);  List<String> methodNames=has.getEnabledMethodNames();  assertTrue("Have at least one method",methodNames.size() > 0);  for (  String methodName : methodNames) {    String pingMethod=has.getMethodName(methodName);    assertNotNull("Checking method availability: " + methodName,pingMethod);  }}  }
class C{  public static String removeCharAt(final String source,final int position){  final StringBuilder sb=new StringBuilder();  if (position == source.length()) {    return source;  }  sb.append(source.substring(0,position)).append(source.substring(position + 1));  return sb.toString();}  }
class C{  public final int countDataTypes(){  return mDataTypes != null ? mDataTypes.size() : 0;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:38.062 -0500",hash_original_method="22D2FA35D30B9562E8F9B8FBAC9604FC",hash_generated_method="88D563792C86D28CDA44D828651551F6") public int clockSequence(){  if (version != 1) {    throw new UnsupportedOperationException();  }  return clockSequence;}  }
class C{  public String longestCommonPrefix(String[] strs){  if (strs == null)   return null;  if (strs.length == 0)   return "";  if (strs.length == 1)   return strs[0];  String word=strs[0];  int prefixLength=word.length();  for (int i=1; i < strs.length; ++i) {    String nextWord=strs[i];    prefixLength=Math.min(prefixLength,nextWord.length());    for (int j=0; j < prefixLength; ++j)     if (word.charAt(j) != nextWord.charAt(j)) {      prefixLength=j;      break;    }  }  return word.substring(0,prefixLength);}  }
class C{  public Float(float value){}  }
class C{  public CCSprite createSprite(CGRect rect){  CCSprite sprite=CCSprite.sprite(textureAtlas_.getTexture(),rect);  sprite.useSpriteSheetRender(this);  return sprite;}  }
class C{  public BorderLayout(int behavior){  setCenterBehavior(behavior);}  }
class C{  public void onResized(MapPaneEvent ev){}  }
class C{  public static boolean equals(byte[] array1,byte[] array2,int length){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length < length || array2.length < length) {    return false;  }  for (int i=0; i < length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  @Pure @ShouldBePure public static String testParam6Good(Object in1,Object in2,Object in3,Object in4,Object in5,Object in6){  Pure4J.immutable(in1,in2,in3,in4);  Pure4J.immutable(in5,in6);  return in1.toString();}  }
class C{  Item newClass(final String value){  key2.set(CLASS,value,null,null);  Item result=get(key2);  if (result == null) {    pool.put12(CLASS,newUTF8(value).index);    result=new Item(index++,key2);    put(result);  }  return result;}  }
class C{  public CorrelationMatrix(DataSet dataSet){  super(Collections.unmodifiableList(dataSet.getVariables()),dataSet.getCorrelationMatrix(),dataSet.getNumRows());  if (!dataSet.isContinuous()) {    throw new IllegalArgumentException("Data set not continuous.");  }  if (DataUtils.containsMissingValue(dataSet)) {    throw new IllegalArgumentException("Please remove or impute missing values.");  }}  }
class C{  private final double splitEnt(Distribution bags,double totalnoInst){  double returnValue=0;  double noUnknown;  int i;  noUnknown=totalnoInst - bags.total();  if (Utils.gr(bags.total(),0)) {    for (i=0; i < bags.numBags(); i++) {      returnValue=returnValue - lnFunc(bags.perBag(i));    }    returnValue=returnValue - lnFunc(noUnknown);    returnValue=returnValue + lnFunc(totalnoInst);  }  return returnValue / ContingencyTables.log2;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(setAttributeNS04.class,args);}  }
class C{  public void testQtz259() throws Exception {  CronScheduleBuilder schedBuilder=CronScheduleBuilder.cronSchedule("0 0 0 L-2 * ? *");  Trigger trigger=TriggerBuilder.newTrigger().withIdentity("test").withSchedule(schedBuilder).build();  int i=0;  Date pdate=trigger.getFireTimeAfter(new Date());  while (++i < 26) {    Date date=trigger.getFireTimeAfter(pdate);    System.out.println("fireTime: " + date + ", previousFireTime: "+ pdate);    assertFalse("Next fire time is the same as previous fire time!",pdate.equals(date));    pdate=date;  }}  }
class C{  protected int height(TreeNode<E> root){  if (root == null)   return 0;  return 1 + Math.max(height(root.left),height(root.right));}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public String name(){  return getName();}  }
class C{  public BabushkaText(Context context){  super(context);  init();}  }
class C{  private void generateSample(SparkExecutionContext sec) throws DMLRuntimeException {  if (maxValue < rows && !replace)   throw new DMLRuntimeException("Sample (size=" + rows + ") larger than population (size="+ maxValue+ ") can only be generated with replacement.");  if (LOG.isTraceEnabled())   LOG.trace("Process RandSPInstruction sample with range=" + maxValue + ", size="+ rows+ ", replace="+ replace+ ", seed="+ seed);  double fraction=SamplingUtils.computeFractionForSampleSize((int)rows,UtilFunctions.toLong(maxValue),replace);  Well1024a bigrand=LibMatrixDatagen.setupSeedsForRand(seed);  double hdfsBlockSize=InfrastructureAnalyzer.getHDFSBlockSize();  long outputSize=MatrixBlock.estimateSizeDenseInMemory(rows,1);  int numPartitions=(int)Math.ceil((double)outputSize / hdfsBlockSize);  long partitionSize=(long)Math.ceil(maxValue / numPartitions);  ArrayList<SampleTask> offsets=new ArrayList<SampleTask>();  long st=1;  while (st <= maxValue) {    SampleTask s=new SampleTask();    s.range_start=st;    s.seed=bigrand.nextLong();    offsets.add(s);    st=st + partitionSize;  }  JavaRDD<SampleTask> offsetRDD=sec.getSparkContext().parallelize(offsets,numPartitions);  JavaRDD<Double> rdd=offsetRDD.flatMap((new GenerateSampleBlock(replace,fraction,(long)maxValue,partitionSize)));  JavaRDD<Double> randomizedRDD=rdd.mapToPair(new AttachRandom()).sortByKey().values();  JavaPairRDD<MatrixIndexes,MatrixCell> miRDD=randomizedRDD.zipWithIndex().filter(new TrimSample(rows)).mapToPair(new Double2MatrixCell());  MatrixCharacteristics mcOut=new MatrixCharacteristics(rows,1,rowsInBlock,colsInBlock,rows);  JavaPairRDD<MatrixIndexes,MatrixBlock> mbRDD=RDDConverterUtils.binaryCellToBinaryBlock(sec.getSparkContext(),miRDD,mcOut,true);  MatrixCharacteristics retDims=sec.getMatrixCharacteristics(output.getName());  retDims.setNonZeros(rows);  sec.setRDDHandleForVariable(output.getName(),mbRDD);}  }
class C{  static public double bucketDurationMS(){  return BUCKET_DURATION_MS;}  }
class C{  public void show(boolean animate){  show(animate,fadeIn);}  }
class C{  public static Set<org.oscm.vo.VOPaymentType> convertToApiVOPaymentType(Set<org.oscm.internal.vo.VOPaymentType> oldVO){  if (oldVO == null) {    return null;  }  Set<org.oscm.vo.VOPaymentType> newVO=new HashSet<org.oscm.vo.VOPaymentType>();  for (  org.oscm.internal.vo.VOPaymentType tmp : oldVO) {    newVO.add(convertToApi(tmp));  }  return newVO;}  }
class C{  public String modelChange(PO po,int type) throws Exception {  log.info(po.get_TableName() + " Type: " + type);  if (po.get_TableName().equals(MOrder.Table_Name) && (type == ModelValidator.TYPE_AFTER_NEW || type == ModelValidator.TYPE_AFTER_CHANGE)) {    if (po == null)     return null;    MOrder order=(MOrder)po;    syncOpportunity(order);  }  if (po.get_TableName().equals(MOrderLine.Table_Name) && (type == ModelValidator.TYPE_AFTER_NEW || type == ModelValidator.TYPE_AFTER_CHANGE)) {    if (po == null)     return null;    MOrderLine line=(MOrderLine)po;    MOrder order=(MOrder)line.getC_Order();    syncOpportunity(order);  }  return null;}  }
class C{  void bracket() throws RESyntaxException {  if (idx >= len || pattern.charAt(idx++) != '{') {    internalError();  }  if (idx >= len || !Character.isDigit(pattern.charAt(idx))) {    syntaxError("Expected digit");  }  StringBuffer number=new StringBuffer();  while (idx < len && Character.isDigit(pattern.charAt(idx))) {    number.append(pattern.charAt(idx++));  }  try {    bracketMin=Integer.parseInt(number.toString());  } catch (  NumberFormatException e) {    syntaxError("Expected valid number");  }  if (idx >= len) {    syntaxError("Expected comma or right bracket");  }  if (pattern.charAt(idx) == '}') {    idx++;    bracketOpt=0;    return;  }  if (idx >= len || pattern.charAt(idx++) != ',') {    syntaxError("Expected comma");  }  if (idx >= len) {    syntaxError("Expected comma or right bracket");  }  if (pattern.charAt(idx) == '}') {    idx++;    bracketOpt=bracketUnbounded;    return;  }  if (idx >= len || !Character.isDigit(pattern.charAt(idx))) {    syntaxError("Expected digit");  }  number.setLength(0);  while (idx < len && Character.isDigit(pattern.charAt(idx))) {    number.append(pattern.charAt(idx++));  }  try {    bracketOpt=Integer.parseInt(number.toString()) - bracketMin;  } catch (  NumberFormatException e) {    syntaxError("Expected valid number");  }  if (bracketOpt < 0) {    syntaxError("Bad range");  }  if (idx >= len || pattern.charAt(idx++) != '}') {    syntaxError("Missing close brace");  }}  }
class C{  public void onReceive(Object message){  drop(message);}  }
class C{  public synchronized Shape createTransformedShape(AffineTransform at){  return path.createTransformedShape(at);}  }
class C{  public void nodeHovered(final NaviNode node,final double y){  if (node.getRawNode() instanceof CGroupNode) {    return;  }  final double yPos=y - node.getY();  final IZyNodeRealizer realizer=node.getRealizer();  final int row=node.positionToRow(yPos);  if (row == -1) {    if (m_lastHoveredLine != null) {      m_lastHoveredLine.clearHighlighting(1);      m_lastHoveredLine=null;    }    return;  }  final ZyLabelContent content=realizer.getNodeContent();  final ZyLineContent hoveredLine=content.getLineContent(row);  if (hoveredLine.equals(m_lastHoveredLine)) {    return;  }  setHoveredLine(content,hoveredLine,realizer.isSelected() ? realizer.getFillColor().darker().darker() : realizer.getFillColor().darker());  if (m_lastHoveredLine != null) {    m_lastHoveredLine.clearHighlighting(1);  }  m_lastHoveredLine=hoveredLine;}  }
class C{  public Action call() throws IOException {  MDCLoggingContext.reset();  MDCLoggingContext.setNode(cores);  if (cores == null) {    sendError(503,"Server is shutting down or failed to initialize");    return RETURN;  }  if (solrDispatchFilter.abortErrorMessage != null) {    sendError(500,solrDispatchFilter.abortErrorMessage);    return RETURN;  }  try {    init();    if (cores.getAuthorizationPlugin() != null && shouldAuthorize()) {      AuthorizationContext context=getAuthCtx();      log.debug("AuthorizationContext : {}",context);      AuthorizationResponse authResponse=cores.getAuthorizationPlugin().authorize(context);      if (authResponse.statusCode == AuthorizationResponse.PROMPT.statusCode) {        Map<String,String> headers=(Map)getReq().getAttribute(AuthenticationPlugin.class.getName());        if (headers != null) {          for (          Map.Entry<String,String> e : headers.entrySet())           response.setHeader(e.getKey(),e.getValue());        }        log.debug("USER_REQUIRED " + req.getHeader("Authorization") + " "+ req.getUserPrincipal());      }      if (!(authResponse.statusCode == HttpStatus.SC_ACCEPTED) && !(authResponse.statusCode == HttpStatus.SC_OK)) {        log.info("USER_REQUIRED auth header {} context : {} ",req.getHeader("Authorization"),context);        sendError(authResponse.statusCode,"Unauthorized request, Response code: " + authResponse.statusCode);        return RETURN;      }    }    HttpServletResponse resp=response;switch (action) {case ADMIN:      handleAdminRequest();    return RETURN;case REMOTEQUERY:  remoteQuery(coreUrl + path,resp);return RETURN;case PROCESS:final Method reqMethod=Method.getMethod(req.getMethod());HttpCacheHeaderUtil.setCacheControlHeader(config,resp,reqMethod);if (config.getHttpCachingConfig().isNever304() || !HttpCacheHeaderUtil.doCacheHeaderValidation(solrReq,req,reqMethod,resp)) {SolrQueryResponse solrRsp=new SolrQueryResponse();SolrRequestInfo.setRequestInfo(new SolrRequestInfo(solrReq,solrRsp));execute(solrRsp);HttpCacheHeaderUtil.checkHttpCachingVeto(solrRsp,resp,reqMethod);Iterator<Map.Entry<String,String>> headers=solrRsp.httpHeaders();while (headers.hasNext()) {Map.Entry<String,String> entry=headers.next();resp.addHeader(entry.getKey(),entry.getValue());}QueryResponseWriter responseWriter=core.getQueryResponseWriter(solrReq);if (invalidStates != null) solrReq.getContext().put(CloudSolrClient.STATE_VERSION,invalidStates);writeResponse(solrRsp,responseWriter,reqMethod);}return RETURN;default :return action;}} catch (Throwable ex) {sendError(ex);Throwable t=ex;while (t != null) {if (t instanceof Error) {if (t != ex) {log.error("An Error was wrapped in another exception - please report complete stacktrace on SOLR-6161",ex);}throw (Error)t;}t=t.getCause();}return RETURN;} finally {MDCLoggingContext.clear();}}  }
class C{  private void removeFinishedClients(){  ConnectorHandler client=null;  while ((client=deadClients.poll()) != null) {    try {      client.release(context);    } catch (    Exception e) {      logger.warn("Failed to release connector handler",e);    }    clients.remove(client);  }}  }
class C{  public static S1Interval fromPoint(double p){  if (p == -S2.M_PI) {    p=S2.M_PI;  }  return new S1Interval(p,p,true);}  }
class C{  private static void validateId(String id){  if (id == null) {    return;  }  int n=id.length();  if (n < 1) {    throw new IllegalArgumentException("Empty id attribute is not allowed");  }  for (int i=0; i < n; i++) {    char c=id.charAt(i);    if (i == 0) {      if (!Character.isLetter(c) && (c != '_')) {        throw new IllegalArgumentException(id);      }    } else {      if (!Character.isLetter(c) && !Character.isDigit(c) && (c != '-')&& (c != '_')) {        throw new IllegalArgumentException(id);      }    }  }}  }
class C{  public static boolean isEmpty(Object[] array){  return array == null || array.length == 0;}  }
class C{  public boolean isExtends(String classNames){  return classNames.contains(superName);}  }
class C{  public static CacheHeader readHeader(InputStream is) throws IOException {  CacheHeader entry=new CacheHeader();  int magic=readInt(is);  if (magic != CACHE_MAGIC) {    throw new IOException();  }  entry.key=readString(is);  entry.etag=readString(is);  if (entry.etag.equals("")) {    entry.etag=null;  }  entry.serverDate=readLong(is);  entry.lastModified=readLong(is);  entry.ttl=readLong(is);  entry.softTtl=readLong(is);  entry.responseHeaders=readStringStringMap(is);  return entry;}  }
class C{  public boolean isChecked(int position){  return touchListener.isChecked(position);}  }
class C{  public static String dump(Map<?,?> map){  StringBuilder stringBuilder=new StringBuilder();  for (  Map.Entry<?,?> entry : map.entrySet()) {    stringBuilder.append(entry.getKey());    stringBuilder.append(" : ");    stringBuilder.append(entry.getValue());  }  return stringBuilder.toString();}  }
class C{  public static Date parseDate(final String dateValue,String[] dateFormats) throws DateParseException {  return parseDate(dateValue,dateFormats,null);}  }
class C{  public boolean isPrinted(){  Object oo=get_Value(COLUMNNAME_IsPrinted);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.EXPORTED_VARIABLE_STATEMENT__ANNOTATION_LIST:    setAnnotationList((AnnotationList)newValue);  return;case N4JSPackage.EXPORTED_VARIABLE_STATEMENT__DECLARED_MODIFIERS:getDeclaredModifiers().clear();getDeclaredModifiers().addAll((Collection<? extends N4Modifier>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  @Override public DataStoreTransaction beginTransaction(){  Session session=sessionFactory.getCurrentSession();  Preconditions.checkNotNull(session);  session.beginTransaction();  return new HibernateTransaction(session);}  }
class C{  public boolean isDrawBarShadowEnabled(){  return mDrawBarShadow;}  }
class C{  void renderNormalAndDepth(){  glEnable(GL_DEPTH_TEST);  glUseProgram(this.normalProgram);  glUniformMatrix4fv(viewMatrixUniform,false,viewMatrix.get(matrixBuffer));  glUniformMatrix4fv(projMatrixUniform,false,projMatrix.get(matrixBuffer));  glUniformMatrix3fv(normalMatrixUniform,false,normalMatrix.get(matrixBuffer));  glBindFramebufferEXT(GL_FRAMEBUFFER_EXT,fbo);  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);  glBindBuffer(GL_ARRAY_BUFFER,this.cubeVbo);  glEnableVertexAttribArray(0);  glVertexAttribPointer(0,3,GL_FLOAT,false,0,0L);  glEnableVertexAttribArray(1);  glVertexAttribPointer(1,3,GL_FLOAT,false,0,normalsOffset);  glDrawArrays(GL_TRIANGLES,0,numVertices);  glDisableVertexAttribArray(0);  glDisableVertexAttribArray(1);  glBindBuffer(GL_ARRAY_BUFFER,0);  glBindFramebufferEXT(GL_FRAMEBUFFER_EXT,0);  glUseProgram(0);}  }
class C{  private boolean isAfterArrayType(){  if ((this.intPtr > -1) && (this.intStack[this.intPtr] < 11)) {    return true;  }  return false;}  }
class C{  public static String decrypt(String value){  if (value == null)   return null;  if (s_engine == null)   init(System.getProperties());  boolean inQuotes=value.startsWith("'") && value.endsWith("'");  if (inQuotes)   value=value.substring(1,value.length() - 1);  String retValue=null;  if (value.startsWith(SecureInterface.CLEARVALUE_START) && value.endsWith(SecureInterface.CLEARVALUE_END))   retValue=value.substring(SecureInterface.CLEARVALUE_START.length(),value.length() - SecureInterface.CLEARVALUE_END.length()); else   retValue=s_engine.implementation.decrypt(value);  if (inQuotes)   return "'" + retValue + "'";  return retValue;}  }
class C{  public void breakpointReached(BreakpointEvent event){  BreakpointRequest req=(BreakpointRequest)event.request();  for (int ii=0; ii < nthreads; ii++) {    if (req == bkpts[ii]) {      println("Hit bkpt on thread: " + ii + ": "+ ++hits[ii]);      break;    }  }}  }
class C{  public EIPModelTest(String name){  super(name);}  }
class C{  public void endEntity(String name) throws org.xml.sax.SAXException {}  }
class C{  public static boolean isPrimitiveArray(Class<?> clazz){  Assert.notNull(clazz,"Class must not be null");  return (clazz.isArray() && clazz.getComponentType().isPrimitive());}  }
class C{  public Digraph reverse(){  Digraph reverse=new Digraph(V);  for (int v=0; v < V; v++) {    for (    int w : adj(v)) {      reverse.addEdge(w,v);    }  }  return reverse;}  }
class C{  @Override public int compare(final PlayerID p1,final PlayerID p2){  if (p1.equals(p2)) {    return 0;  }  final GameSequence sequence;  m_data.acquireReadLock();  try {    sequence=m_data.getSequence();  }  finally {    m_data.releaseReadLock();  }  for (  final GameStep s : sequence) {    if (s.getPlayerID() == null) {      continue;    }    final IDelegate delegate;    m_data.acquireReadLock();    try {      delegate=s.getDelegate();    }  finally {      m_data.releaseReadLock();    }    if (delegate != null && delegate.getClass() != null) {      final String delegateClassName=delegate.getClass().getName();      if (delegateClassName.equals("games.strategy.triplea.delegate.InitializationDelegate") || delegateClassName.equals("games.strategy.triplea.delegate.BidPurchaseDelegate") || delegateClassName.equals("games.strategy.triplea.delegate.BidPlaceDelegate")|| delegateClassName.equals("games.strategy.triplea.delegate.EndRoundDelegate")) {        continue;      }    } else     if (s.getName() != null && (s.getName().endsWith("Bid") || s.getName().endsWith("BidPlace"))) {      continue;    }    if (s.getPlayerID().equals(p1)) {      return -1;    } else     if (s.getPlayerID().equals(p2)) {      return 1;    }  }  return 0;}  }
class C{  public VersionRange(@Nullable DelimitedVersion lowerBound,@Nullable DelimitedVersion upperBound){  mLowerBound=lowerBound;  mUpperBound=upperBound;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public synchronized void removeSelectedWay(Way way){  if (selectedWays != null) {    selectedWays.remove(way);    if (selectedWays.size() == 0) {      selectedWays=null;    }  }}  }
class C{  private boolean collectTaint(ASTNode node,boolean isSimpleName){  boolean foundTaint=false;  if (!taintedDataMapStack.empty()) {    Map<String,Set<CallLocationModel>> dataMap=taintedDataMapStack.peek();    if (!dataMap.isEmpty()) {      String nodeString=node.toString();      foundTaint=collectTaint(node,nodeString,dataMap);      if (!foundTaint && isSimpleName)       foundTaint=collectTaint(node,"this." + nodeString,dataMap);    }  }  return foundTaint;}  }
class C{  public PKMACValue(AlgorithmIdentifier aid,DERBitString value){  this.algId=aid;  this.value=value;}  }
class C{  public ActionForward executeAction(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  HttpSession session=request.getSession();  String cnif="";  String sessionId="";  try {    sessionId=request.getParameter(Misc.SESION_ID);    if (Misc.isEmpty(sessionId)) {      sessionId=(String)session.getAttribute(ConstantesSesionUser.ID_SESION);    }    cnif=Misc.getCNIFUsuario(request,sessionId);  } catch (  Exception ex) {    request.setAttribute(Misc.MENSAJE_ERROR,ex.getMessage());  }  ListaExpedientesForm listaExpedienteForm=(ListaExpedientesForm)form;  boolean completo=true;  try {    String numExpediente=request.getParameter(Misc.EXPEDIENTE);    String procedimiento=request.getParameter(Misc.PROCEDIMIENTO);    String numeroRegistroInicial=request.getParameter(Misc.NUMERO_REGISTRO_INICIAL);    String fechaRegistroInicialDesdeRequest=request.getParameter(Misc.FECHA_REGISTRO_INICIAL_DESDE);    String operadorFechaInicial=request.getParameter(Misc.OPERADOR_CONSULTA_FECHA_INICIAL);    String fechaRegistroInicialHastaRequest=request.getParameter(Misc.FECHA_REGISTRO_INICIAL_HASTA);    String fechaDesdeRequest=request.getParameter(Misc.FECHA_DESDE);    String operador=request.getParameter(Misc.OPERADOR_CONSULTA);    String fechaHastaRequest=request.getParameter(Misc.FECHA_HASTA);    String estado=request.getParameter(Misc.ESTADO);    Entidad entidad=Misc.obtenerEntidad(request);    ServicioConsultaExpedientes oServicio=LocalizadorServicios.getServicioConsultaExpedientes();    Expedientes expedientes=null;    CriterioBusquedaExpedientes oCriterio=new CriterioBusquedaExpedientes();    oCriterio.setNIF(cnif);    if (fechaDesdeRequest == null && fechaRegistroInicialDesdeRequest == null && estado == null && numExpediente == null && procedimiento == null && numeroRegistroInicial == null) {      expedientes=oServicio.consultarExpedientesNIF(cnif,entidad);    } else {      String fechaParseadaDesde=null;      String fechaParseadaHasta=null;      String fechaRegistroInicialParseadaDesde=null;      String fechaRegistroInicialParseadaHasta=null;      try {        fechaParseadaDesde=parsearFecha(fechaDesdeRequest);        fechaParseadaHasta=parsearFecha(fechaHastaRequest);        fechaRegistroInicialParseadaDesde=parsearFecha(fechaRegistroInicialDesdeRequest);        fechaRegistroInicialParseadaHasta=parsearFecha(fechaRegistroInicialHastaRequest);      } catch (      Throwable conEx) {        ActionMessages errors=new ActionMessages();        errors.add("error",new ActionMessage("formatoFechaIncorrecto"));        return mapping.findForward("Busqueda");      }      session.setAttribute(Misc.EXPEDIENTE,numExpediente);      session.setAttribute(Misc.PROCEDIMIENTO,procedimiento);      session.setAttribute(Misc.NUMERO_REGISTRO_INICIAL,numeroRegistroInicial);      session.setAttribute(Misc.FECHA_REGISTRO_INICIAL_DESDE,fechaRegistroInicialParseadaDesde);      session.setAttribute(Misc.FECHA_REGISTRO_INICIAL_DESDE_BUSQUEDA,fechaRegistroInicialDesdeRequest);      session.setAttribute(Misc.OPERADOR_CONSULTA_FECHA_INICIAL,operadorFechaInicial);      session.setAttribute(Misc.FECHA_REGISTRO_INICIAL_HASTA,fechaRegistroInicialParseadaHasta);      session.setAttribute(Misc.FECHA_REGISTRO_INICIAL_HASTA_BUSQUEDA,fechaRegistroInicialHastaRequest);      session.setAttribute(Misc.FECHA_DESDE,fechaParseadaDesde);      session.setAttribute(Misc.FECHA_DESDE_BUSQUEDA,fechaDesdeRequest);      session.setAttribute(Misc.OPERADOR_CONSULTA,operador);      session.setAttribute(Misc.FECHA_HASTA,fechaParseadaHasta);      session.setAttribute(Misc.FECHA_HASTA_BUSQUEDA,fechaHastaRequest);      session.setAttribute(Misc.ESTADO,estado);      completo=false;      oCriterio.setFechaDesde(fechaParseadaDesde);      oCriterio.setFechaHasta(fechaParseadaHasta);      oCriterio.setOperadorConsulta(operador);      oCriterio.setFechaRegistroInicialDesde(fechaRegistroInicialParseadaDesde);      oCriterio.setFechaRegistroInicialHasta(fechaRegistroInicialParseadaHasta);      oCriterio.setOperadorConsultaFechaInicial(operadorFechaInicial);      oCriterio.setExpediente(numExpediente);      oCriterio.setNumeroRegistroInicial(numeroRegistroInicial);      oCriterio.setProcedimiento(procedimiento);      oCriterio.setEstado(estado);      expedientes=oServicio.busquedaExpedientes(oCriterio,entidad);    }    listaExpedienteForm.setURLAportacion(oServicio.obtenerURLAportacionExpedientes());    listaExpedienteForm.setURLNotificacion(oServicio.obtenerURLNotificacionExpedientes());    Expedientes nuevoExpedientes=new Expedientes();    for (int a=0; a < expedientes.count(); a++) {      Expediente expediente=(Expediente)expedientes.get(a);      if (expediente.getEstado().equals(Expediente.COD_ESTADO_EXPEDIENTE_FINALIZADO)) {        expediente.setEstado("cerrado");      } else {        expediente.setEstado("abierto");      }      String proc=expediente.getProcedimiento();      if (proc.length() > 60) {        proc=proc.substring(0,57) + "...";        expediente.setProcedimiento(proc);      }      boolean existeNotificacion=oServicio.existenNotificaciones(expediente.getNumero(),entidad);      if (existeNotificacion) {        expediente.setNotificacion("S");      } else {        expediente.setNotificacion("N");      }      boolean existeSubsanacion=oServicio.existenSubsanaciones(expediente.getNumero(),entidad);      if (existeSubsanacion) {        expediente.setAportacion("S");      } else {        expediente.setAportacion("N");      }      boolean existePago=oServicio.existenPagos(expediente.getNumero(),entidad);      if (existePago) {        expediente.setPagos("S");      } else {        expediente.setPagos("N");      }      nuevoExpedientes.add(expediente);    }    listaExpedienteForm.setExpedientes(nuevoExpedientes);    request.setAttribute("expedientes",nuevoExpedientes.getExpedientes());  } catch (  Exception ex) {    request.setAttribute(Misc.MENSAJE_ERROR,ex.getMessage());  }  if (completo) {    return mapping.findForward("Success");  } else {    return mapping.findForward("Success_Search");  }}  }
class C{  public CreateSlotAction(List<String> slotNames){  this.slotNames=ImmutableList.copyOf(slotNames);}  }
class C{  public boolean isBelowThresholdNotFlapping(){  return belowThresholdNotFlapping;}  }
class C{  @Override public void committed(long committedWindowId) throws IOException {  LOG.debug("data manager committed {}",committedWindowId);  for (  Long currentWindow : savedWindows.keySet()) {    if (currentWindow <= largestWindowAddedToTransferQueue) {      continue;    }    if (currentWindow <= committedWindowId) {      LOG.debug("to transfer {}",currentWindow);      largestWindowAddedToTransferQueue=currentWindow;      windowsToTransfer.add(currentWindow);    } else {      break;    }  }}  }
class C{  public ShadedPaint(final PdfObject Shading,final boolean isPrinting,final GenericColorSpace shadingColorSpace,final PdfObjectReader currentPdfFile,final float[][] matrix,final boolean colorsReversed){  this.isPrinting=isPrinting;  this.colorsReversed=colorsReversed;  this.type=Shading.getInt(PdfDictionary.ShadingType);  this.matrix=matrix;  init(Shading,shadingColorSpace,currentPdfFile,matrix);}  }
class C{  public void writeExif(String jpegFileName,String exifOutFileName) throws FileNotFoundException, IOException {  if (jpegFileName == null || exifOutFileName == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  InputStream is=null;  try {    is=new FileInputStream(jpegFileName);    writeExif(is,exifOutFileName);  } catch (  IOException e) {    closeSilently(is);    throw e;  }  is.close();}  }
class C{  public static RuntimeException failWithCancel(){  return CANCEL_STACKTRACE ? new CancelException() : CancelException.INSTANCE;}  }
class C{  public int generateBytes(byte[] out,int outOff,int len) throws DataLengthException, IllegalArgumentException {  if ((out.length - len) < outOff) {    throw new DataLengthException("output buffer too small");  }  byte[] hashBuf=new byte[hLen];  byte[] C=new byte[4];  int counter=0;  digest.reset();  if (len > hLen) {    do {      ItoOSP(counter,C);      digest.update(seed,0,seed.length);      digest.update(C,0,C.length);      digest.doFinal(hashBuf,0);      System.arraycopy(hashBuf,0,out,outOff + counter * hLen,hLen);    } while (++counter < (len / hLen));  }  if ((counter * hLen) < len) {    ItoOSP(counter,C);    digest.update(seed,0,seed.length);    digest.update(C,0,C.length);    digest.doFinal(hashBuf,0);    System.arraycopy(hashBuf,0,out,outOff + counter * hLen,len - (counter * hLen));  }  return len;}  }
class C{  private void writeLog(String log){  File file=new File(CrashHandlerDefault.Log_Default_Path + "/" + formatter.format(new Date())+ ".log");  try {    FileOutputStream fileOutputStream=new FileOutputStream(file);    byte[] bytes=log.getBytes();    fileOutputStream.write(bytes);    fileOutputStream.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  protected void onEntranceTransitionStart(){}  }
class C{  int subtract(MutableBigInteger b){  MutableBigInteger a=this;  int[] result=value;  int sign=a.compare(b);  if (sign == 0) {    reset();    return 0;  }  if (sign < 0) {    MutableBigInteger tmp=a;    a=b;    b=tmp;  }  int resultLen=a.intLen;  if (result.length < resultLen)   result=new int[resultLen];  long diff=0;  int x=a.intLen;  int y=b.intLen;  int rstart=result.length - 1;  while (y > 0) {    x--;    y--;    diff=(a.value[x + a.offset] & LONG_MASK) - (b.value[y + b.offset] & LONG_MASK) - ((int)-(diff >> 32));    result[rstart--]=(int)diff;  }  while (x > 0) {    x--;    diff=(a.value[x + a.offset] & LONG_MASK) - ((int)-(diff >> 32));    result[rstart--]=(int)diff;  }  value=result;  intLen=resultLen;  offset=value.length - resultLen;  normalize();  return sign;}  }
class C{  public NestedChildElementBinder(boolean shouldReadTextContent){  this.shouldReadTextContent=shouldReadTextContent;}  }
class C{  public static Long parseTimeString(String timeString){  if (timeString == null)   return null;  if (isKMLTimeShift(timeString)) {    timeString=timeString.trim();    int colonPosition=timeString.length() - 3;    String newTimeString=timeString.substring(0,colonPosition);    timeString=newTimeString + timeString.substring(colonPosition + 1,timeString.length());  }  try {    DateFormat df=new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:sszzzzz");    return df.parse(timeString).getTime();  } catch (  ParseException ignored) {  }  try {    DateFormat df=new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'");    return df.parse(timeString).getTime();  } catch (  ParseException ignored) {  }  try {    DateFormat df=new SimpleDateFormat("yyyy-MM-dd");    return df.parse(timeString).getTime();  } catch (  ParseException ignored) {  }  try {    DateFormat df=new SimpleDateFormat("yyyy-MM");    return df.parse(timeString).getTime();  } catch (  ParseException ignored) {  }  try {    DateFormat df=new SimpleDateFormat("yyyy");    return df.parse(timeString).getTime();  } catch (  ParseException ignored) {  }  return null;}  }
class C{  public SolrClusterOptions(String clusterName){  this.clusterName=clusterName;  clusterSize=FREE_CLUSTER_SIZE;}  }
class C{  public void addFact(Expression e,Fact fact){  addFactInt(rfold(e,false),fact);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodetextnodetype.class,args);}  }
class C{  void acc_expand(){  int len=digits.length;  int oldOnes[]=digits;  digits=new int[len + 1];  System.arraycopy(oldOnes,0,digits,1,len);}  }
class C{  public static RowSpec decode(String encodedRowSpec){  return decode(encodedRowSpec,LayoutMap.getRoot());}  }
class C{  public static double RAEmaxFitness(GEPIndividual ind){  return 1000.0;}  }
class C{  public void add(PrintStream p,boolean timestamp){  add(p,timestamp,"");}  }
class C{  @UiThreadTest public void test_toMapPixels_0_0(){}  }
class C{  public static void permute(int[] list,int[] indexes){  int[] copy=(int[])list.clone();  for (int i=list.length; --i >= 0; )   list[i]=copy[indexes[i]];}  }
class C{  private PrintsRawMatch cloneRawMatch(PrintsRawMatch original){  return new PrintsRawMatch(original.getSequenceIdentifier(),original.getModelId(),original.getSignatureLibraryRelease(),original.getLocationStart(),original.getLocationEnd(),original.getEvalue(),original.getGraphscan(),original.getMotifCount(),original.getMotifNumber(),original.getPvalue(),original.getScore());}  }
class C{  public void apply(FilterSet filterSet,FilterServiceGranularLockFactory lockFactory){  for (  FilterSetEntry entry : filterSet.getFilters()) {    add(entry.getFilterValueSet(),entry.getHandle(),lockFactory);  }}  }
class C{  public Agent(){  super(KEY);}  }
class C{  void parseDocumentTypeDeclaration() throws IOException {  skipParameterSpace();  if (!parseIdentifier(true)) {    error("expected","identifier");  } else {    skipParameterSpace();  }  strpos=0;  parseExternalIdentifier();  if (ch == '[') {    ch=in.read();    parseSection();    expect(']');    skipParameterSpace();  }  expect('>');}  }
class C{  @Override final public void mouseMoved(MouseEvent e){  mouseMove(e);}  }
class C{  protected void endNode(int node) throws org.xml.sax.SAXException {switch (m_dtm.getNodeType(node)) {case DTM.DOCUMENT_NODE:    this.m_contentHandler.endDocument();  break;case DTM.ELEMENT_NODE:String ns=m_dtm.getNamespaceURI(node);if (null == ns) ns="";this.m_contentHandler.endElement(ns,m_dtm.getLocalName(node),m_dtm.getNodeName(node));for (int nsn=m_dtm.getFirstNamespaceNode(node,true); DTM.NULL != nsn; nsn=m_dtm.getNextNamespaceNode(node,nsn,true)) {String prefix=m_dtm.getNodeNameX(nsn);this.m_contentHandler.endPrefixMapping(prefix);}break;case DTM.CDATA_SECTION_NODE:break;case DTM.ENTITY_REFERENCE_NODE:{if (m_contentHandler instanceof LexicalHandler) {LexicalHandler lh=((LexicalHandler)this.m_contentHandler);lh.endEntity(m_dtm.getNodeName(node));}}break;default :}}  }
class C{  @GET @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{qos_id}/associate") @CheckPermission(roles={Role.SYSTEM_MONITOR,Role.TENANT_ADMIN},acls={ACL.ANY}) public Response associateQosWithVolumeType(@PathParam("tenant_id") String openstackTenantId,@PathParam("qos_id") String qosId,@QueryParam("vol_type_id") String volTypeId){  _log.debug("START associate qos with volume type(virtual pool)");  throw new UnsupportedOperationException();}  }
class C{  public static boolean checkIfInitiatorsForRP(DbClient dbClient,StringSet initiatorList){  if (dbClient == null || initiatorList == null) {    return false;  }  List<Initiator> initiators=new ArrayList<Initiator>();  for (  String initiatorId : initiatorList) {    Initiator initiator=dbClient.queryObject(Initiator.class,URI.create(initiatorId));    if (initiator != null) {      initiators.add(initiator);    }  }  return checkIfInitiatorsForRP(initiators);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public void onDetach(){  super.onDetach();  if (getChildFragmentManager().getFragments() != null) {    getChildFragmentManager().getFragments().clear();  }}  }
class C{  boolean partialIsVariable(MultistepExprHolder testee,int lengthToTest){  if (1 == lengthToTest) {    WalkingIterator wi=(WalkingIterator)testee.m_exprOwner.getExpression();    if (wi.getFirstWalker() instanceof FilterExprWalker)     return true;  }  return false;}  }
class C{  private void parseParameter(String parameter){  if (parameter != null) {    int i=parameter.indexOf('=');    if (i >= 0) {      String token=parameter.substring(0,i).trim();      String value=trimDoubleQuotesIfAny(parameter.substring(i + 1).trim());      if (HttpLog.LOGV) {        HttpLog.v("HttpAuthHeader.parseParameter():" + " token: " + token + " value: "+ value);      }      if (token.equalsIgnoreCase(REALM_TOKEN)) {        mRealm=value;      } else {        if (mScheme == DIGEST) {          parseParameter(token,value);        }      }    }  }}  }
class C{  public static void registerConfig(){  Config.registerSelf(DefaultMessageFactory.class);  if (!Config.isInvalid()) {    int msgSize=Config.parms.getInt("ms");    if (msgSize < 0) {      Config.logger.log(Level.WARNING,"Message size (ms={0}) must be at least 0",msgSize);    }    String mt=Config.parms.getString("mt");    if (!mt.equals(BYTES) & !mt.equals(MAP) & !mt.equals(STREAM)& !mt.equals(OBJECT)& !mt.equals(TEXT)& !mt.equals(EBCDIC)& !mt.equals(EMPTY)) {      Config.logger.log(Level.WARNING,"Message type (mt={0}) must be one of [" + BYTES + ","+ TEXT+ ","+ EBCDIC+ ","+ MAP+ ","+ STREAM+ ","+ OBJECT+ ","+ EMPTY+ "]",mt);    }    String messageFile=Config.parms.getString("mf");    if (messageFile != null && !messageFile.equals("")) {      if (mt.equals(EMPTY)) {        Config.logger.warning("Cannot specify -mf when using an empty message type.");      }      if (!new File(messageFile).exists()) {        Config.logger.log(Level.WARNING,"File {0} does not exist",messageFile);      }    }    useNativeCorrelationId=Config.parms.getBoolean("cp");    String propertiesFile=Config.parms.getString("pf");    if (propertiesFile != null && !propertiesFile.equals("")) {      if (!new File(propertiesFile).exists()) {        Config.logger.log(Level.WARNING,"File {0} does not exist",propertiesFile);      }    }  }}  }
class C{  public void toNativeArray(int[] dest,int offset,int len){  if (len == 0) {    return;  }  if (offset < 0 || offset >= _pos) {    throw new ArrayIndexOutOfBoundsException(offset);  }  System.arraycopy(_data,offset,dest,0,len);}  }
class C{  public static Program createProgram(Architecture arch){  programInstance=new Program(arch);  return programInstance;}  }
class C{  @Override public boolean isConsistent(DatapathId oldSw,OFPort oldPort,DatapathId newSw,OFPort newPort){  return isConsistent(oldSw,oldPort,newSw,newPort,true);}  }
class C{  protected void IdKeyPattern() throws javax.xml.transform.TransformerException {  FunctionCall();}  }
class C{  public static void quickSort(long[] a,int fromIndex,int toIndex,LongComparator c){  rangeCheck(a.length,fromIndex,toIndex);  quickSort1(a,fromIndex,toIndex - fromIndex,c);}  }
class C{  public void dismissLoadingDialog(){  Fragment frag=getSupportFragmentManager().findFragmentByTag(DIALOG_WAIT_TAG);  if (frag != null) {    LoadingDialog loading=(LoadingDialog)frag;    loading.dismiss();  }}  }
class C{  public Constraint horizontalSpan(int span){  setHorizontalSpan(span);  return this;}  }
class C{  public ClassDefFormat1(RandomAccessFile raf) throws IOException {  startGlyph=raf.readUnsignedShort();  glyphCount=raf.readUnsignedShort();  classValues=new int[glyphCount];  for (int i=0; i < glyphCount; i++) {    classValues[i]=raf.readUnsignedShort();  }}  }
class C{  public static byte[] toBytes(short x,byte[] bytes,int bytePos){  bytes[bytePos++]=(byte)(x);  bytes[bytePos]=(byte)(x >> 8);  return bytes;}  }
class C{  protected void installMenuBar(){  if (getParent() == null) {    int type=getCommandBehavior();    if (type == Display.COMMAND_BEHAVIOR_BUTTON_BAR_TITLE_RIGHT || type == Display.COMMAND_BEHAVIOR_ICS || type == Display.COMMAND_BEHAVIOR_SIDE_NAVIGATION) {      return;    }    int softkeyCount=Display.getInstance().getImplementation().getSoftkeyCount();    if (softkeyCount > 1 || type == Display.COMMAND_BEHAVIOR_BUTTON_BAR || type == Display.COMMAND_BEHAVIOR_BUTTON_BAR_TITLE_BACK) {      if (Display.getInstance().getProperty("adPaddingBottom",null) == null) {        parent.addComponentToForm(BorderLayout.SOUTH,this);      }    }  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void testRenameColumn() throws IOException, ReplicatorException, InterruptedException {  PrintWriter out=new PrintWriter(new FileWriter(definitionsFile));  out.println("schemaz,tableq,cola,-,-,colaa # Only rename column.");  out.println("schemaz,tablew,cols,-,-,colss # Rename column and table below:");  out.println("schemaz,tablew,*,-,tableww,- # Only rename column.");  out.println("schemax,tablee,cold,-,-,coldd # Rename column and move to other schema below:");  out.println("schemax,tablee,*,schemaxx,-,- # Rename column and move to other schema below:");  out.println("schemaz,*,colf,-,-,colff # Rename column across all tables of this schema.");  out.println("*,*,colg,-,-,colgg # Rename column across all tables in all schemas.");  out.close();  RenameFilter rf=new RenameFilter();  rf.setTungstenSchema("tungsten_foo");  rf.setDefinitionsFile(definitionsFile);  filterHelper.setFilter(rf);  assertColumnChanged("schemaz","tableq",new String[]{"cola","id","name","color"},"schemaz","tableq",new String[]{"colaa","id","name","color"});  assertColumnChanged("schemaz","tablew",new String[]{"id","name","cols","color"},"schemaz","tableww",new String[]{"id","name","colss","color"});  assertColumnChanged("schemax","tablee",new String[]{"id","name","color","cold"},"schemaxx","tablee",new String[]{"id","name","color","coldd"});  assertColumnChanged("schemax","tablee",new String[]{"id","name","color","cold"},"schemaxx","tablee",new String[]{"id","name","color","coldd"});  assertColumnChanged("anyschema","anytable",new String[]{"id","name","color","colg"},"anyschema","anytable",new String[]{"id","name","color","colgg"});  assertColumnChanged("anyschema","tablee",new String[]{"id","name","color","colg"},"anyschema","tablee",new String[]{"id","name","color","colgg"});  assertColumnChanged("schemaz","tableq",new String[]{"cols","id","name","color"},"schemaz","tableq",new String[]{"cols","id","name","color"});  assertColumnChanged("schemaz","tablew",new String[]{"id","name","cola","color"},"schemaz","tableww",new String[]{"id","name","cola","color"});  assertColumnChanged("schemax","tablee",new String[]{"id","name","color","cols"},"schemaxx","tablee",new String[]{"id","name","color","cols"});  assertColumnChanged("schemax","tablee",new String[]{"id","name","color","colh"},"schemaxx","tablee",new String[]{"id","name","color","colh"});  assertColumnChanged("anyschema","anytable",new String[]{"id","name","color","colj"},"anyschema","anytable",new String[]{"id","name","color","colj"});  assertColumnChanged("anyschema","tablee",new String[]{"id","name","color","colk"},"anyschema","tablee",new String[]{"id","name","color","colk"});}  }
class C{  public AlignmentVisitor(SurfacePriviledged<T> surface){  this.surface=surface;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(getAttributeNS02.class,args);}  }
class C{  public final boolean removeElement(int s){  for (int i=0; i < m_firstFree; i++) {    if (m_map[i] == s) {      if ((i + 1) < m_firstFree)       System.arraycopy(m_map,i + 1,m_map,i - 1,m_firstFree - i); else       m_map[i]=java.lang.Integer.MIN_VALUE;      m_firstFree--;      return true;    }  }  return false;}  }
class C{  @Nonnull public List<Project> findAll() throws HibernateException {  List<Project> results=null;  EntityManager em=getEntityManager();  try {    begin();    CriteriaBuilder cb=em.getCriteriaBuilder();    CriteriaQuery<Project> query=cb.createQuery(Project.class);    Root<Project> root=query.from(Project.class);    Fetch<Project,Workload> wl=root.fetch(Project.PROPERTY_WORKLOADS);    wl.fetch("jobConfiguration");    query.select(root);    results=em.createQuery(query).getResultList();    for (    Project project : results) {      project.getWorkloads().get(0).getJobConfiguration().getVariables();      project.getWorkloads().get(0).getJobConfiguration().getDataFileIds();    }    commit();  } catch (  Exception e) {    rollback();    e.printStackTrace();    throw new RuntimeException(e);  } finally {    cleanup();  }  return results;}  }
class C{  public static void main(String[] args) throws IOException {  InputStream is=FlipSokoban.class.getClassLoader().getResourceAsStream("games/stendhal/server/entity/mapstuff/game/sokoban.txt");  BufferedReader reader=new BufferedReader(new InputStreamReader(is,Charsets.UTF_8));  try {    new FlipSokoban().flip(reader,System.out);  }  finally {    reader.close();  }}  }
class C{  private CFValue changeLockAnnoToTop(Receiver r,CFValue currentValue){  if (currentValue == null) {    Set<AnnotationMirror> set=AnnotationUtils.createAnnotationSet();    set.add(atypeFactory.GUARDEDBYUNKNOWN);    set.add(atypeFactory.LOCKPOSSIBLYHELD);    return analysis.createAbstractValue(set,r.getType());  }  QualifierHierarchy hierarchy=atypeFactory.getQualifierHierarchy();  Set<AnnotationMirror> currentSet=currentValue.getAnnotations();  AnnotationMirror gb=hierarchy.findAnnotationInHierarchy(currentSet,atypeFactory.GUARDEDBYUNKNOWN);  Set<AnnotationMirror> newSet=AnnotationUtils.createAnnotationSet();  newSet.add(atypeFactory.LOCKPOSSIBLYHELD);  if (gb != null) {    newSet.add(gb);  }  return analysis.createAbstractValue(newSet,currentValue.getUnderlyingType());}  }
class C{  public EditingGraphMousePlugin(Supplier<V> vertexFactory,Supplier<E> edgeFactory){  this(MouseEvent.BUTTON1_MASK,vertexFactory,edgeFactory);}  }
class C{  public Token(int kind,String image){  this.kind=kind;  this.image=image;}  }
class C{  public void addMetric(Metric metric){  getMetrics().add(metric);}  }
class C{  public InetNetworkBuilder(DNSService dnsServer){  this.dnsService=dnsServer;}  }
class C{  public void log(Level logLevel,String msg){  if (!internalIsLoggable(logLevel)) {    return;  }  dalvikLogHandler.publish(this,androidTag,logLevel,msg);}  }
class C{  public int size(){  return count.get();}  }
class C{  public CreateIndexRequest(ActionRequest request){  super(request);}  }
class C{  public static void configurePeriodicSync(Context context,int syncInterval,int flexTime){  Account account=getSyncAccount(context);  String authority=context.getString(R.string.content_authority);  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {    SyncRequest request=new SyncRequest.Builder().syncPeriodic(syncInterval,flexTime).setSyncAdapter(account,authority).setExtras(new Bundle()).build();    ContentResolver.requestSync(request);  } else {    ContentResolver.addPeriodicSync(account,authority,new Bundle(),syncInterval);  }}  }
class C{  public void testSplit1(){  SplittableRandom sr=new SplittableRandom();  for (int reps=0; reps < REPS; ++reps) {    SplittableRandom sc=sr.split();    int i=0;    while (i < NCALLS && sr.nextLong() == sc.nextLong())     ++i;    assertTrue(i < NCALLS);  }}  }
class C{  public static void loadConfiguration(Configuration targetConf,Configuration srcConf,String section){  Iterator confKeys=srcConf.getKeys();  while (confKeys.hasNext()) {    Object keyObject=confKeys.next();    if (!(keyObject instanceof String)) {      continue;    }    String key=(String)keyObject;    if (key.startsWith(section)) {      targetConf.setProperty(key.substring(section.length()),srcConf.getProperty(key));    }  }}  }
class C{  QuartzSchedulerThread(QuartzScheduler qs,QuartzSchedulerResources qsRsrcs,boolean setDaemon,int threadPrio){  super(qs.getSchedulerThreadGroup(),qsRsrcs.getThreadName());  this.qs=qs;  this.qsRsrcs=qsRsrcs;  this.setDaemon(setDaemon);  if (qsRsrcs.isThreadsInheritInitializersClassLoadContext()) {    log.info("QuartzSchedulerThread Inheriting ContextClassLoader of thread: " + Thread.currentThread().getName());    this.setContextClassLoader(Thread.currentThread().getContextClassLoader());  }  this.setPriority(threadPrio);  paused=true;  halted=new AtomicBoolean(false);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public PrivateKeyUnencryptedException(Throwable causeThrowable){  super(causeThrowable);}  }
class C{  public static double[][] H(int C[][],int N){  int L=C.length;  double M[][]=new double[L][L];  for (int j=0; j < L; j++) {    for (int k=j + 1; k < L; k++) {      M[j][k]=H(C,j,k,N);    }  }  return M;}  }
class C{  public BeforeAfterAction(String textWait,String textAfter){  this.textWait=textWait;  this.textAfter=textAfter;}  }
class C{  public static List<Fare> calculateFares(PathWithTimes pathWithTimes,TransportNetwork transportNetwork){  List<FareRide> fareRides=new ArrayList<>(pathWithTimes.length);  FareRide prev=null;  TransitLayer transitLayer=transportNetwork.transitLayer;  for (int pathIndex=0; pathIndex < pathWithTimes.length; pathIndex++) {    int pattern=pathWithTimes.patterns[pathIndex];    TripPattern tripPattern=transitLayer.tripPatterns.get(pattern);    if (tripPattern.routeIndex >= 0) {      RouteInfo routeInfo=transitLayer.routes.get(tripPattern.routeIndex);      int boardStopIdx=pathWithTimes.boardStops[pathIndex];      int alightStopIdx=pathWithTimes.alightStops[pathIndex];      com.conveyal.r5.api.util.Stop from=new com.conveyal.r5.api.util.Stop(boardStopIdx,transitLayer);      com.conveyal.r5.api.util.Stop to=new com.conveyal.r5.api.util.Stop(alightStopIdx,transitLayer);      FareRide fareRide=new FareRide(from,to,routeInfo,prev);      if (prev != null && prev.type == fareRide.type) {        prev.to=fareRide.to;        prev.calcFare();      } else {        fareRides.add(fareRide);        prev=fareRide;      }    }  }  List<Fare> fares=com.google.common.collect.Lists.newArrayList();  fares.addAll(fareRides.stream().map(null).filter(null).collect(Collectors.toList()));  return fares;}  }
class C{  public final HashCode append(float value){  return hashCode.append(value);}  }
class C{  public void moveRandomly(){  setRandomPathFrom(getX(),getY(),getMovementRange() / 2);}  }
class C{  private static UIComponent findComponent(UIComponent c,String id){  if (id.equals(c.getId())) {    return c;  }  Iterator<UIComponent> kids=c.getFacetsAndChildren();  while (kids.hasNext()) {    UIComponent found=findComponent(kids.next(),id);    if (found != null) {      return found;    }  }  return null;}  }
class C{  private static AssetFieldDescriptor createAssetField(ServiceFieldRestRep field,List<String> dependencies){  AssetFieldDescriptor assetField=new AssetFieldDescriptor();  assetField.assetType=field.getAssetType();  assetField.select=field.getSelect();  assetField.fieldsWeDependOn=dependencies;  assetField.fieldsThatDependOnUs=Lists.newArrayList();  return assetField;}  }
class C{  private HookResult doMailSize(SMTPSession session,String mailOptionValue,String tempSender){  int size=0;  try {    size=Integer.parseInt(mailOptionValue);  } catch (  NumberFormatException pe) {    session.getLogger().error("Rejected syntactically incorrect value for SIZE parameter.");    return SYNTAX_ERROR;  }  if (session.getLogger().isDebugEnabled()) {    StringBuilder debugBuffer=new StringBuilder(128).append("MAIL command option SIZE received with value ").append(size).append(".");    session.getLogger().debug(debugBuffer.toString());  }  long maxMessageSize=session.getConfiguration().getMaxMessageSize();  if ((maxMessageSize > 0) && (size > maxMessageSize)) {    StringBuilder errorBuffer=new StringBuilder(256).append("Rejected message from ").append(tempSender != null ? tempSender : null).append(" from ").append(session.getRemoteAddress().getAddress().getHostAddress()).append(" of size ").append(size).append(" exceeding system maximum message size of ").append(maxMessageSize).append("based on SIZE option.");    session.getLogger().error(errorBuffer.toString());    return QUOTA_EXCEEDED;  } else {    session.setAttachment(MESG_SIZE,Integer.valueOf(size),State.Transaction);  }  return null;}  }
class C{  @Override public int analyseProtocol(){  logging.log(getClass(),"\nAnalyse: " + getProtocol() + " with ID: "+ getToken(),Logging.DEBUG);  ArrayList<SSOProtocol> last_protocolflow=SSOProtocol.getLastProtocolFlow();  if (last_protocolflow != null) {    double listsize=(double)last_protocolflow.size();    double protocol=0;    double token=0;    long tmp=0;    long curr_time=0;    long last_time=0;    boolean wait=true;    for (    SSOProtocol sso : last_protocolflow) {      if (sso.getProtocol().substring(0,4).equals(this.getProtocol().substring(0,4))) {        logging.log(getClass(),sso.getProtocol(),Logging.DEBUG);        protocol++;      }      if (sso.getToken().equals(this.getToken())) {        logging.log(getClass(),sso.getToken(),Logging.DEBUG);        token++;      }      if (wait) {        wait=false;      } else {        curr_time=sso.getTimestamp();        tmp+=curr_time - last_time;        logging.log(getClass(),"Diff: " + (curr_time - last_time),Logging.DEBUG);      }      last_time=sso.getTimestamp();    }    if (listsize >= 0) {      double diff_time=((double)tmp / listsize);      double curr_diff_time=getTimestamp() - last_protocolflow.get(last_protocolflow.size() - 1).getTimestamp();      double time_bonus=0;      logging.log(getClass(),"CurrDiff:" + curr_diff_time + " Diff:"+ diff_time,Logging.DEBUG);      if (curr_diff_time <= (diff_time + 4000)) {        time_bonus=0.35;      }      double prob=((protocol / listsize) + (token / listsize) * 2) / 3 + (time_bonus);      logging.log(getClass(),"Probability: " + prob,Logging.DEBUG);      if (prob >= 0.7) {        return getIDOfLastList();      }    }  }  return newProtocolflowID();}  }
class C{  public static void fill(double[] a,double val){  fill(a,0,a.length,val);}  }
class C{  public void analyze1(CompilationUnit unit,TypeTable typeTable){}  }
class C{  public static PredictiveInformationCalculatorDiscrete newInstance(int numDiscreteValues,int blockLength){  return new PredictiveInformationCalculatorDiscrete(numDiscreteValues,blockLength);}  }
class C{  public void connect(String connStr,boolean usePersistence) throws MqttException {  if ((mqtt != null) && (!connStr.equals(mqtt.getServerURI()))) {    mqtt=null;  }  if (mqtt == null) {    MqttClientPersistence persistence=null;    if (usePersistence) {      persistence=new MqttDefaultFilePersistence(optionsComp.getPersistenceDirectory());    }    mqtt=new MqttClient(connStr,optionsComp.getClientID(),persistence);    mqtt.setCallback(this);    if (traceEnabled) {      startTrace();    }  }  opts=new MqttConnectOptions();  opts.setCleanSession(optionsComp.isCleanSessionSelected());  opts.setKeepAliveInterval(optionsComp.getKeepAlive());  if (optionsComp.isLWTTopicSet()) {    opts.setWill(mqtt.getTopic(optionsComp.getLWTTopic()),optionsComp.getLWTData().getBytes(),optionsComp.getLWTQoS(),optionsComp.isLWTRetainSelected());  }  mqtt.connect(opts);}  }
class C{  private String createString(String f){  return "srcXInBytes=" + srcXInBytes + f+ "srcY="+ srcY+ f+ "srcMemoryType="+ CUmemorytype.stringFor(srcMemoryType)+ f+ "srcHost ="+ srcHost+ f+ "srcDevice ="+ srcDevice+ f+ "srcArray ="+ srcArray+ f+ "srcPitch="+ srcPitch+ f+ "dstXInBytes="+ dstXInBytes+ f+ "dstY="+ dstY+ f+ "dstMemoryType="+ CUmemorytype.stringFor(dstMemoryType)+ f+ "dstHost ="+ dstHost+ f+ "dstDevice ="+ dstDevice+ f+ "dstArray ="+ dstArray+ f+ "dstPitch="+ dstPitch+ f+ "WidthInBytes="+ WidthInBytes+ f+ "Height="+ Height;}  }
class C{  private void createAndModifyNetwork(Scenario scenario,int caseNr){  Network network=scenario.getNetwork();  NetworkFactory factory=network.getFactory();  Node node1=factory.createNode(Id.createNodeId("1"),new Coord((double)0,(double)0));  Node node2=factory.createNode(Id.createNodeId("2"),new Coord((double)0,(double)200));  Node node3=factory.createNode(Id.createNodeId("3"),new Coord((double)0,(double)400));  Node node4=factory.createNode(Id.createNodeId("4"),new Coord((double)0,(double)600));  network.addNode(node1);  network.addNode(node2);  network.addNode(node3);  network.addNode(node4);  Link link1=factory.createLink(LINK_ID1,node1,node2);  link1.setCapacity(3600);  link1.setLength(200);  link1.setFreespeed(200);  network.addLink(link1);  Link link2=factory.createLink(LINK_ID2,node2,node3);  link2.setCapacity(3600);  link2.setLength(200);  link2.setFreespeed(75);  network.addLink(link2);  Link link3=factory.createLink(LINK_ID3,node3,node4);  link3.setCapacity(3600);  link3.setLength(200);  link3.setFreespeed(200);  network.addLink(link3);  if (!(caseNr == 1)) {    modifyNetwork(scenario,caseNr);  }}  }
class C{  protected static Variable snarfFieldValue(FieldInstruction fieldIns,ConstantPoolGen cpg,ValueNumberFrame frame) throws DataflowAnalysisException {  if (isLongOrDouble(fieldIns,cpg)) {    int numSlots=frame.getNumSlots();    ValueNumber topValue=frame.getValue(numSlots - 1);    ValueNumber nextValue=frame.getValue(numSlots - 2);    return new LongOrDoubleLocalVariable(topValue,nextValue);  } else {    return new LocalVariable(frame.getTopValue());  }}  }
class C{  static Object doFloorDiv(int x,int y){  try {    return Math.floorDiv(x,y);  } catch (  ArithmeticException ae) {    return ae;  }}  }
class C{  public static BigInteger toBigInteger(final Ed25519EncodedFieldElement encoded){  return toBigInteger(encoded.getRaw());}  }
class C{  public ServerOperationException(){}  }
class C{  private void validateWithinTokenLifePeriod(long clockToleranceSec) throws InvalidTimingException {  if (_expirationTime < _startTime) {    String message="Start time / Expiration time not valid: " + "StartTime: " + new Date(_startTime) + " ExpirationTime: "+ new Date(_expirationTime);    _log.error(message);    throw new InvalidTimingException(message);  }  long currentTime=Calendar.getInstance(TimeZone.getTimeZone(DEFAULT_TIME_ZONE)).getTimeInMillis();  long effectiveExpirationTime=_expirationTime + clockToleranceSec * MILLISECONDS_PER_SECOND;  if (effectiveExpirationTime < currentTime) {    String message="Token expiration date: " + new Date(_expirationTime) + " is in the past.";    _log.info(message);    throw new InvalidTimingException(message);  }}  }
class C{  public void cancel(){  cancelled=true;}  }
class C{  public boolean uninstallCounters(){  return debugCounterService.removeCounterHierarchy(COUNTER_MODULE,dpidAndConnIdString);}  }
class C{  @NoInline public static void write(RVMMember value){  write(value.getMemberRef());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:37.931 -0500",hash_original_method="5282503E7213EB860C46CD1340339EC5",hash_generated_method="2B43E8E4611A95C069B1552F2C692488") protected void onDeleteComplete(int token,Object cookie,int result){}  }
class C{  public ProtocolException(String message,Throwable cause){  super(message,cause);}  }
class C{  public BasicInventoryPacketState(){  this(0,PacketPhase.MASK_NONE);}  }
class C{  private void summarizeChecks(){  if (serverReply == CheckResult.PASSED && sdCardWritable == CheckResult.PASSED) {    looper();  } else   if (serverReply == CheckResult.FAILED) {    if (mBadPasswordFlag) {      final int id=toExport.size() > 0 ? toExport.get(0) : RadioBeacon.SESSION_NOT_TRACKING;      onUploadFailed(id,getResources().getString(R.string.warning_bad_password));    } else {      final int id=toExport.size() > 0 ? toExport.get(0) : RadioBeacon.SESSION_NOT_TRACKING;      onUploadFailed(id,getResources().getString(R.string.warning_outdated_client));    }  } else   if (serverReply == CheckResult.UNKNOWN) {    final int id=toExport.size() > 0 ? toExport.get(0) : RadioBeacon.SESSION_NOT_TRACKING;    onUploadFailed(id,getResources().getString(R.string.warning_client_version_not_checked));  } else   if (sdCardWritable == CheckResult.FAILED) {    final int id=toExport.size() > 0 ? toExport.get(0) : RadioBeacon.SESSION_NOT_TRACKING;    onUploadFailed(id,getResources().getString(R.string.warning_sd_not_writable));  } else {    final int id=toExport.size() > 0 ? toExport.get(0) : RadioBeacon.SESSION_NOT_TRACKING;    onUploadFailed(id,"Unknown error");  }}  }
class C{  public void closeDriver(){  if (camera != null) {    FlashlightManager.disableFlashlight();    camera.release();    camera=null;  }}  }
class C{  public boolean isKeyRotating(ECKey key){  long time=vKeyRotationTimestamp;  return time != 0 && key.getCreationTimeSeconds() < time;}  }
class C{  public SPARQLBooleanXMLParser(){  super();}  }
class C{  public SourceFile similarFileInSwf(SwfInfo info,SourceFile f) throws InProgressException {  SourceFile hit=null;  SourceFile[] files=info.getSourceList(m_session);  if (!info.isProcessingComplete())   throw new InProgressException();  for (int i=0; i < files.length; i++) {    if (filesMatch(f,files[i]))     hit=files[i];  }  return hit;}  }
class C{  public MapObject(Object id,Drawable drawable,Point position,boolean isTouchable){  this(id,drawable,position.x,position.y,true,true);}  }
class C{  @POST @Path("{guid}") @Consumes({Servlets.JSON_MEDIA_TYPE,MediaType.APPLICATION_JSON}) @Produces(Servlets.JSON_MEDIA_TYPE) public Response updateEntityByGuid(@PathParam("guid") String guid,@QueryParam("property") String attribute,@Context HttpServletRequest request){  AtlasPerfTracer perf=null;  try {    if (AtlasPerfTracer.isPerfTraceEnabled(PERF_LOG)) {      perf=AtlasPerfTracer.getPerfTracer(PERF_LOG,"EntityResource.updateEntityByGuid()");    }    if (StringUtils.isEmpty(attribute)) {      return updateEntityPartialByGuid(guid,request);    } else {      return updateEntityAttributeByGuid(guid,attribute,request);    }  }  finally {    AtlasPerfTracer.log(perf);  }}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){  final int deltaValue, currentScrollValue, scrollValue;switch (view.getPullToRefreshScrollDirection()) {case HORIZONTAL:    deltaValue=deltaX;  scrollValue=scrollX;currentScrollValue=view.getScrollX();break;case VERTICAL:default :deltaValue=deltaY;scrollValue=scrollY;currentScrollValue=view.getScrollY();break;}if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {final Mode mode=view.getMode();if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {final int newScrollValue=(deltaValue + scrollValue);if (PullToRefreshBase.DEBUG) {Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);}if (newScrollValue < (0 - fuzzyThreshold)) {if (mode.showHeaderLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));}} else if (newScrollValue > (scrollRange + fuzzyThreshold)) {if (mode.showFooterLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));}} else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {view.setState(State.RESET);}} else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {view.setState(State.RESET);}}}  }
class C{  static boolean isMemoryChangeRequired(){  if (memoryChangeRequired-- <= 0) {    memoryChangeRequired=10;    return true;  }  return false;}  }
class C{  public void testLoggingEnabledSamplingDisabled() throws Exception {  logging=true;  sampling=false;  startUp();  assert !logEnabled();}  }
class C{  public String globalInfo(){  return "This is ARAM.";}  }
class C{  private byte[] chunk(int len){  byte[] chunk=new byte[len];  for (int i=0; i < len; i++)   chunk[i]=(byte)i;  return chunk;}  }
class C{  private static void dismissOld(Context context,HashMap<Long,ArrayList<MessageItem>> newMessages){  Set<Long> oldThreads=new HashSet<>();  for (  String s : sPrefs.getStringSet(PREV_NOTIFICATIONS,new HashSet<String>())) {    long l=Long.parseLong(s);    if (!oldThreads.contains(l)) {      oldThreads.add(l);    }  }  Set<Long> newThreads=newMessages.keySet();  Log.d(TAG,"Old threads: " + Arrays.toString(oldThreads.toArray()));  Log.d(TAG,"New threads: " + Arrays.toString(newThreads.toArray()));  for (  long threadId : oldThreads) {    if (!newThreads.contains(threadId)) {      dismiss(context,(int)threadId);    }  }  Set<String> newThreadStrings=new HashSet<>();  for (  long threadId : newThreads) {    newThreadStrings.add(Long.toString(threadId));  }  sPrefs.edit().putStringSet(PREV_NOTIFICATIONS,newThreadStrings).apply();}  }
class C{  public static LinkedList<String> wrapInTag(LinkedList<String> sequence,int startPosition,int endPosition,String tag,String cssClass){  LinkedList<String> result=(LinkedList<String>)sequence.clone();  StringBuilder tagBuilder=new StringBuilder();  tagBuilder.append("<");  tagBuilder.append(tag);  if (cssClass != null) {    tagBuilder.append(" class=\"");    tagBuilder.append(cssClass);    tagBuilder.append("\"");  }  tagBuilder.append(">");  String startTag=tagBuilder.toString();  tagBuilder.delete(0,tagBuilder.length());  tagBuilder.append("</");  tagBuilder.append(tag);  tagBuilder.append(">");  String endTag=tagBuilder.toString();  result.add(startPosition,startTag);  result.add(endPosition,endTag);  return result;}  }
class C{  private Workflow.Method createRollbackForgetVolumesMethod(URI vplexSystemURI,List<URI> volumeURIs){  return new Workflow.Method(RB_FORGET_VOLUMES_METHOD_NAME,vplexSystemURI,volumeURIs);}  }
class C{  public ASCIIFoldingFilterFactory(Map<String,String> args){  super(args);  preserveOriginal=getBoolean(args,"preserveOriginal",false);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public void transform(Source xmlSource,Result outputTarget) throws TransformerException {  transform(xmlSource,outputTarget,true);}  }
class C{  public void remove(String key){  put(key,null);}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 20:{        addToken(Token.PREPROCESSOR);      }case 23:    break;case 2:{    addNullToken();    return firstToken;  }case 24:break;case 21:{yybegin(YYINITIAL);addToken(start,zzStartRead + 1,Token.COMMENT_MULTILINE);}case 25:break;case 18:{start=zzMarkedPos - 2;yybegin(MLC);}case 26:break;case 4:{addToken(Token.WHITESPACE);}case 27:break;case 14:{addToken(start,zzStartRead - 1,Token.LITERAL_CHAR);return firstToken;}case 28:break;case 9:{start=zzMarkedPos - 1;yybegin(CHAR);}case 29:break;case 7:{addToken(Token.LITERAL_NUMBER_FLOAT);}case 30:break;case 19:{addToken(Token.RESERVED_WORD);}case 31:break;case 6:{addToken(Token.SEPARATOR);}case 32:break;case 15:{yybegin(YYINITIAL);addToken(start,zzStartRead,Token.LITERAL_CHAR);}case 33:break;case 1:{addToken(Token.IDENTIFIER);}case 34:break;case 22:{addToken(Token.FUNCTION);}case 35:break;case 12:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);return firstToken;}case 36:break;case 17:{addToken(Token.COMMENT_EOL);}case 37:break;case 8:{start=zzMarkedPos - 1;yybegin(STRING);}case 38:break;case 3:{addToken(Token.LITERAL_NUMBER_DECIMAL_INT);}case 39:break;case 5:{addToken(Token.OPERATOR);}case 40:break;case 13:{yybegin(YYINITIAL);addToken(start,zzStartRead,Token.LITERAL_STRING_DOUBLE_QUOTE);}case 41:break;case 10:{addToken(Token.ERROR_IDENTIFIER);addNullToken();return firstToken;}case 42:break;case 11:{}case 43:break;case 16:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 44:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case STRING:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);return firstToken;}case 355:break;case YYINITIAL:{addNullToken();return firstToken;}case 356:break;case MLC:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 357:break;case CHAR:{addToken(start,zzStartRead - 1,Token.LITERAL_CHAR);return firstToken;}case 358:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public IconicsDrawableOld colorRes(int colorRes){  paint.setColor(context.getResources().getColor(colorRes));  invalidateSelf();  return this;}  }
class C{  @Override public void close() throws SQLException {  lock.lock();  try {    closed=true;    if (serverPrepareResult != null && protocol != null) {      try {        serverPrepareResult.getUnProxiedProtocol().releasePrepareStatement(serverPrepareResult);      } catch (      QueryException e) {      }    }    serverPrepareResult=null;    protocol=null;    if (connection == null || connection.pooledConnection == null || connection.pooledConnection.statementEventListeners.isEmpty()) {      return;    }    connection.pooledConnection.fireStatementClosed(this);    connection=null;  }  finally {    lock.unlock();  }}  }
class C{  public static LinearLocation[] indicesOf(Geometry linearGeom,Geometry subLine){  LocationIndexOfLine locater=new LocationIndexOfLine(linearGeom);  return locater.indicesOf(subLine);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  String DEMHeader=null;  int row, col, x, y;  int progress=0;  double z, val, val2, val3;  int i, c;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  boolean flag=false;  double flowDir=0;  double flowLength=0;  double numUpslopeFlowpaths=0;  double flowpathLengthToAdd=0;  double conversionFactor=1;  double divideElevToAdd=0;  double radToDeg=180 / Math.PI;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  DEMHeader=args[1];  outputHeader=args[2];  conversionFactor=Double.parseDouble(args[3]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster pntr=new WhiteboxRaster(inputHeader,"r");    int rows=pntr.getNumberRows();    int cols=pntr.getNumberColumns();    double noData=pntr.getNoDataValue();    double gridResX=pntr.getCellSizeX();    double gridResY=pntr.getCellSizeY();    double diagGridRes=Math.sqrt(gridResX * gridResX + gridResY * gridResY);    double[] gridLengths=new double[]{diagGridRes,gridResX,diagGridRes,gridResY,diagGridRes,gridResX,diagGridRes,gridResY};    WhiteboxRaster DEM=new WhiteboxRaster(DEMHeader,"r");    if (DEM.getNumberRows() != rows || DEM.getNumberColumns() != cols) {      showFeedback("The input files must have the same dimensions, i.e. number of " + "rows and columns.");      return;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,-999);    output.setPreferredPalette("blueyellow.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    output.setZUnits(pntr.getXYUnits());    WhiteboxRaster numInflowingNeighbours=new WhiteboxRaster(outputHeader.replace(".dep","_temp1.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    numInflowingNeighbours.isTemporaryFile=true;    WhiteboxRaster numUpslopeDivideCells=new WhiteboxRaster(outputHeader.replace(".dep","_temp2.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    numUpslopeDivideCells.isTemporaryFile=true;    WhiteboxRaster totalFlowpathLength=new WhiteboxRaster(outputHeader.replace(".dep","_temp3.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    totalFlowpathLength.isTemporaryFile=true;    WhiteboxRaster totalUpslopeDivideElev=new WhiteboxRaster(outputHeader.replace(".dep","_temp4.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    totalUpslopeDivideElev.isTemporaryFile=true;    updateProgress("Loop 1 of 3:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (pntr.getValue(row,col) != noData) {          z=0;          for (i=0; i < 8; i++) {            if (pntr.getValue(row + dY[i],col + dX[i]) == inflowingVals[i]) {              z++;            }          }          if (z > 0) {            numInflowingNeighbours.setValue(row,col,z);          } else {            numInflowingNeighbours.setValue(row,col,-1);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 1 of 3:",progress);    }    updateProgress("Loop 2 of 3:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        val=numInflowingNeighbours.getValue(row,col);        if (val <= 0 && val != noData) {          flag=false;          x=col;          y=row;          do {            val=numInflowingNeighbours.getValue(y,x);            if (val <= 0 && val != noData) {              if (val == -1) {                numUpslopeDivideCells.setValue(y,x,0);                numUpslopeFlowpaths=1;                divideElevToAdd=DEM.getValue(y,x);              } else {                numUpslopeFlowpaths=numUpslopeDivideCells.getValue(y,x);                divideElevToAdd=totalUpslopeDivideElev.getValue(y,x);              }              numInflowingNeighbours.setValue(y,x,noData);              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                flowLength=gridLengths[c];                val2=totalFlowpathLength.getValue(y,x);                flowpathLengthToAdd=val2 + numUpslopeFlowpaths * flowLength;                x+=dX[c];                y+=dY[c];                numUpslopeDivideCells.setValue(y,x,numUpslopeDivideCells.getValue(y,x) + numUpslopeFlowpaths);                totalFlowpathLength.setValue(y,x,totalFlowpathLength.getValue(y,x) + flowpathLengthToAdd);                totalUpslopeDivideElev.setValue(y,x,totalUpslopeDivideElev.getValue(y,x) + divideElevToAdd);                numInflowingNeighbours.setValue(y,x,numInflowingNeighbours.getValue(y,x) - 1);              } else {                flag=true;              }            } else {              flag=true;            }          } while (!flag);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 2 of 3:",progress);    }    numUpslopeDivideCells.flush();    totalFlowpathLength.flush();    totalUpslopeDivideElev.flush();    numInflowingNeighbours.close();    updateProgress("Loop 3 of 3:",0);    double[] data1=null;    double[] data2=null;    double[] data3=null;    double[] data4=null;    double[] data5=null;    for (row=0; row < rows; row++) {      data1=numUpslopeDivideCells.getRowValues(row);      data2=totalFlowpathLength.getRowValues(row);      data3=pntr.getRowValues(row);      data4=totalUpslopeDivideElev.getRowValues(row);      data5=DEM.getRowValues(row);      for (col=0; col < cols; col++) {        if (data3[col] != noData) {          if (data1[col] > 0) {            val=data2[col] / data1[col];            val2=(data4[col] / data1[col] - data5[col]) * conversionFactor;            val3=Math.atan(val2 / val) * radToDeg;            output.setValue(row,col,val3);          } else {            output.setValue(row,col,0);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 3 of 3:",progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    DEM.close();    numUpslopeDivideCells.close();    totalFlowpathLength.close();    totalUpslopeDivideElev.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void caretPositionChanged(InputMethodEvent e){  ((InputMethodListener)a).caretPositionChanged(e);  ((InputMethodListener)b).caretPositionChanged(e);}  }
class C{  public boolean ifThereIsErrorInResponse(ResponseOnSingeRequest myResponse){  return myResponse == null ? true : myResponse.isFailObtainResponse();}  }
class C{  public static int resetAndGetNumberOfMatches(RegExp regexp,String input){  regexp.setLastIndex(0);  return getNumberOfMatches(regexp,input);}  }
class C{  public void spreadFire(int x,int y,int windDir,int windStr){  Coords src=new Coords(x,y);  Coords nextCoords=src.translated(windDir);  int curHeight=game.getBoard().getHex(src).ceiling();  TargetRoll directroll=new TargetRoll(9,"spread downwind");  TargetRoll obliqueroll=new TargetRoll(11,"spread 60 degrees to downwind");  if ((windStr > PlanetaryConditions.WI_NONE) && (windStr < PlanetaryConditions.WI_STRONG_GALE)) {    directroll.addModifier(-2,"light/moderate gale");    obliqueroll.addModifier(-1,"light/moderate gale");  } else   if (windStr > PlanetaryConditions.WI_MOD_GALE) {    directroll.addModifier(-3,"strong gale+");    directroll.addModifier(-2,"strong gale+");  }  spreadFire(nextCoords,directroll,curHeight);  IHex nextHex=game.getBoard().getHex(nextCoords);  IHex jumpHex=game.getBoard().getHex(nextCoords.translated(windDir));  if ((nextHex != null) && (jumpHex != null) && !(nextHex.containsTerrain(Terrains.FIRE))&& ((curHeight >= nextHex.ceiling()) || (jumpHex.ceiling() >= nextHex.ceiling()))) {    directroll.addModifier(3,"crossing non-burning hex");    spreadFire(nextCoords.translated(windDir),directroll,curHeight);  }  spreadFire(src.translated((windDir + 1) % 6),obliqueroll,curHeight);  spreadFire(src.translated((windDir + 5) % 6),obliqueroll,curHeight);}  }
class C{  public void reload(){  AgentStatusRequest request=new AgentStatusRequest();  request.setTo(workgroupJID);  connection.sendPacket(request);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:42.688 -0500",hash_original_method="FDD2FC9FD3536A57EA5709C92DDFDA00",hash_generated_method="25F8972A71AF3F265EBEAA230EB3E829") @Override protected void tearDown() throws Exception {  Runtime.getRuntime().gc();  Runtime.getRuntime().runFinalization();  Runtime.getRuntime().gc();  super.tearDown();}  }
class C{  public void testFileRetention() throws Exception {  File testDir=createTestDir("testFileRetention");  String prefix1="testfile";  File[] files1=createFiles(testDir,prefix1,5);  String prefix2="testfil";  File[] files2=createFiles(testDir,prefix2,5);  File[] purgeCandidates1=FileCommands.filesOverRetention(testDir,"testfile",1);  assertEquals("4 of 5 eligible",4,purgeCandidates1.length);  File[] toPurge1=FileCommands.filesOverModDate(purgeCandidates1,new Interval("10s"));  assertEquals("Nobody is expired yet",0,toPurge1.length);  Thread.sleep(5000);  File[] purgeCandidates2=FileCommands.filesOverRetention(testDir,"testfile",2);  assertEquals("3 of 5 eligible",3,purgeCandidates2.length);  File[] toPurge2=FileCommands.filesOverModDate(purgeCandidates2,new Interval("3s"));  assertEquals("Files to purge",3,toPurge2.length);  FileCommands.deleteFiles(toPurge2,true);  assertNotExists(toPurge2);  for (int i=files1.length - 2; i < files1.length; i++) {    if (!files1[i].exists())     throw new Exception("File was unexpectedly deleted: " + files1[i].getName());  }  assertExists(files2);}  }
class C{  @SuppressWarnings("ForLoopReplaceableByForEach") void write(OptimizedObjectOutputStream out,Object obj) throws IOException {  out.write(type);switch (type) {case BYTE:    out.writeByte((Byte)obj);  break;case SHORT:out.writeShort((Short)obj);break;case INT:out.writeInt((Integer)obj);break;case LONG:out.writeLong((Long)obj);break;case FLOAT:out.writeFloat((Float)obj);break;case DOUBLE:out.writeDouble((Double)obj);break;case CHAR:out.writeChar((Character)obj);break;case BOOLEAN:out.writeBoolean((Boolean)obj);break;case BYTE_ARR:out.writeByteArray((byte[])obj);break;case SHORT_ARR:out.writeShortArray((short[])obj);break;case INT_ARR:out.writeIntArray((int[])obj);break;case LONG_ARR:out.writeLongArray((long[])obj);break;case FLOAT_ARR:out.writeFloatArray((float[])obj);break;case DOUBLE_ARR:out.writeDoubleArray((double[])obj);break;case CHAR_ARR:out.writeCharArray((char[])obj);break;case BOOLEAN_ARR:out.writeBooleanArray((boolean[])obj);break;case OBJ_ARR:OptimizedClassDescriptor compDesc=classDescriptor(clsMap,obj.getClass().getComponentType(),ctx,mapper);compDesc.writeTypeData(out);out.writeArray((Object[])obj);break;case STR:out.writeString((String)obj);break;case UUID:out.writeUuid((UUID)obj);break;case PROPS:out.writeProperties((Properties)obj,dfltsFieldOff);break;case ARRAY_LIST:out.writeArrayList((ArrayList<?>)obj);break;case HASH_MAP:out.writeHashMap((HashMap<?,?>)obj,loadFactorFieldOff,false);break;case HASH_SET:out.writeHashSet((HashSet<?>)obj,HASH_SET_MAP_OFF,loadFactorFieldOff);break;case LINKED_LIST:out.writeLinkedList((LinkedList<?>)obj);break;case LINKED_HASH_MAP:out.writeLinkedHashMap((LinkedHashMap<?,?>)obj,loadFactorFieldOff,accessOrderFieldOff,false);break;case LINKED_HASH_SET:out.writeLinkedHashSet((LinkedHashSet<?>)obj,HASH_SET_MAP_OFF,loadFactorFieldOff);break;case DATE:out.writeDate((Date)obj);break;case CLS:OptimizedClassDescriptor clsDesc=classDescriptor(clsMap,(Class<?>)obj,ctx,mapper);clsDesc.writeTypeData(out);break;case PROXY:out.writeInt(proxyIntfs.length);for (Class<?> intf : proxyIntfs) {OptimizedClassDescriptor intfDesc=classDescriptor(clsMap,intf,ctx,mapper);intfDesc.writeTypeData(out);}InvocationHandler ih=Proxy.getInvocationHandler(obj);assert ih != null;out.writeObject(ih);break;case ENUM:writeTypeData(out);out.writeInt(((Enum)obj).ordinal());break;case EXTERNALIZABLE:writeTypeData(out);out.writeShort(checksum);out.writeExternalizable(obj);break;case SERIALIZABLE:if (out.requireSerializable() && !isSerial) throw new NotSerializableException("Must implement java.io.Serializable or " + "set OptimizedMarshaller.setRequireSerializable() to false " + "(note that performance may degrade if object is not Serializable): "+ name);writeTypeData(out);out.writeShort(checksum);out.writeSerializable(obj,writeObjMtds,fields);break;default :throw new IllegalStateException("Invalid class type: " + type);}}  }
class C{  public void testAnalyse(){  System.out.println("analyse");  AuditCommand mockAuditCommand=createMock(AuditCommand.class);  mockAuditCommand.analyse();  expectLastCall().once();  replay(mockAuditCommand);  AuditServiceThreadImpl instance=initialiseAuditServiceThread(mockAuditCommand);  instance.analyse();  verify(mockAuditCommand);}  }
class C{  public static WhereBuilder b(String columnName,String op,Object value){  WhereBuilder result=new WhereBuilder();  result.appendCondition(null,columnName,op,value);  return result;}  }
class C{  public synchronized static boolean removeGlobalUnitConverter(UnitConverter unit){  return CONVERTERS.remove(unit);}  }
class C{  private String readNodeAddress(){  String addr="";  addr=nodeAddrField.getText();  if (addr.equals("FF FF ") || addr.equals("FF FE ") || addr.equals("")) {    addr=nodeAddr64Field.getText();  }  return (addr);}  }
class C{  @Override public OsmAgentView createEnvironmentView(){  return new OsmAgentView(map.getOsmMap());}  }
class C{  public static float r_distanceSquared(vec3 a,vec3 b){  float x=a.m[0] - b.m[0];  float y=a.m[1] - b.m[1];  float z=a.m[2] - b.m[2];  float result=x * x + y * y + z * z;  return result;}  }
class C{  public UnitTypeList(final GameData data){  super(data);}  }
class C{  public static void initialize(final File rootPath){  dictSource=new File(rootPath,path_to_source_dictionaries);  if (!dictSource.exists()) {    dictSource.mkdirs();  }  dictRoot=rootPath;  initAutotagging();  activateDeReWo();  initDidYouMean();  initSynonyms();  initRewriter();  integrateOpenGeoDB();  integrateGeonames0(-1);  integrateGeonames1(-1);  integrateGeonames2(100000);  Set<String> allTags=new HashSet<String>();  allTags.addAll(autotagging.allTags());  autotagging.addPlaces(geoLoc);  WordCache.learn(allTags);}  }
class C{  public IssuerAlternativeNameExtension(GeneralNames names) throws IOException {  this.names=names;  this.extensionId=PKIXExtensions.IssuerAlternativeName_Id;  this.critical=false;  encodeThis();}  }
class C{  private long entry(long qAddr){  return mem.readLong(qAddr + 27);}  }
class C{  public PdxInputStream(byte[] bytes){  super(bytes);}  }
class C{  public static void registerPlugin(GDSFactoryPlugin plugin){  boolean newPlugin=registeredPlugins.add(plugin);  if (!newPlugin)   return;  GDSType type=GDSType.registerType(plugin.getTypeName());  typeToPluginMap.put(type,plugin);  if (defaultType == null)   defaultType=type;  String[] aliases=plugin.getTypeAliases();  for (  String alias : aliases) {    GDSType aliasType=GDSType.registerType(alias);    typeToPluginMap.put(aliasType,plugin);  }  String[] jdbcUrls=plugin.getSupportedProtocols();  for (  String jdbcUrl : jdbcUrls) {    GDSFactoryPlugin otherPlugin=jdbcUrlToPluginMap.put(jdbcUrl,plugin);    if (otherPlugin != null && !otherPlugin.equals(plugin))     throw new IllegalArgumentException("Duplicate JDBC URL pattern detected: URL " + jdbcUrl + ", "+ "plugin "+ plugin.getTypeName()+ ", other plugin "+ otherPlugin.getTypeName());  }}  }
class C{  private String encodeAttributeValue(final String attributeValue){  if (attributeValue == null) {    return null;  }  int len=attributeValue.length();  boolean encode=false;  for (int pos=0; pos < len; pos++) {    char ch=attributeValue.charAt(pos);    if (ch == '<') {      encode=true;      break;    } else     if (ch == '>') {      encode=true;      break;    } else     if (ch == '\"') {      encode=true;      break;    } else     if (ch == '&') {      encode=true;      break;    }  }  if (encode) {    StringBuffer bf=new StringBuffer();    for (int pos=0; pos < len; pos++) {      char ch=attributeValue.charAt(pos);      if (ch == '<') {        bf.append("&lt;");      } else       if (ch == '>') {        bf.append("&gt;");      } else       if (ch == '\"') {        bf.append("&quot;");      } else       if (ch == '&') {        bf.append("&amp;");      } else {        bf.append(ch);      }    }    return bf.toString();  }  return attributeValue;}  }
class C{  public IndentPrinter(Writer out,String indent,boolean addNewlines){  this(out,indent,addNewlines,false);}  }
class C{  public static boolean isConcat(SmsUserData ud,byte[] udh){  int udLength=ud.getLength();  int bytesLeft=PDUMAXLENGTH;  int maxChars;  if (udh != null) {    bytesLeft-=udh.length;  }switch (ud.getDcs().getAlphabet()) {case GSM:    maxChars=(bytesLeft * 8) / 7;  break;case UCS2:maxChars=bytesLeft / 2;break;case ASCII:maxChars=bytesLeft + ASCIIMAXLENGTH - PDUMAXLENGTH;break;case LATIN1:default :maxChars=bytesLeft;break;}return (udLength > maxChars);}  }
class C{  void onContentCreated(){  int messageTopMargin=mMessageTextView != null ? mMargin / 4 : 0;  mMessageView.setLayoutParams(new LayoutParams(0,messageTopMargin,0,0));  mMainGroup=new Group(Group.filterNullViews(mIconView,mMessageView));  View[] buttons=Group.filterNullViews(mCustomButton,mTertiaryButton,mSecondaryButton,mPrimaryButton);  if (buttons.length != 0)   mButtonGroup=new Group(buttons);  for (  View v : mMainGroup.views)   addView(v);  if (mCustomGroup != null) {    for (    View v : mCustomGroup.views)     addView(v);  }  if (mButtonGroup != null) {    for (    View v : mButtonGroup.views)     addView(v);  }  addView(mCloseButton);}  }
class C{  public void addAdapter(RecyclerView.Adapter adapter){  addAdapter(adapters.size(),adapter);}  }
class C{  public void writeUint16(long n){  check(2);  buffer[write_pos++]=(byte)((n & 0x00ff00) >> 8);  buffer[write_pos++]=(byte)(n & 0x00ff);}  }
class C{  public void deleteMigrationSources(URI vplexURI,URI virtualVolumeURI,URI newVpoolURI,URI newVarrayURI,List<URI> migrationSources,String stepId) throws WorkflowException {  try {    WorkflowStepCompleter.stepExecuting(stepId);    Volume volume=_dbClient.queryObject(Volume.class,virtualVolumeURI);    if (newVarrayURI != null && volume.isVolumeExported(_dbClient)) {      URIQueryResultList exportGroupURIs=new URIQueryResultList();      _dbClient.queryByConstraint(ContainmentConstraint.Factory.getBlockObjectExportGroupConstraint(virtualVolumeURI),exportGroupURIs);      Iterator<URI> iterator=exportGroupURIs.iterator();      while (iterator.hasNext()) {        URI egUri=iterator.next();        ExportGroup eg=_dbClient.queryObject(ExportGroup.class,egUri);        if (eg != null) {          StringMap volumesMap=eg.getVolumes();          String lun=volumesMap.get(virtualVolumeURI.toString());          if (lun == null || lun.isEmpty()) {            lun=ExportGroup.LUN_UNASSIGNED_DECIMAL_STR;          }          List<URI> initiators=StringSetUtil.stringSetToUriList(eg.getInitiators());          ExportGroup newEg=null;          if (initiators != null && !initiators.isEmpty()) {            URI initiatorUri=initiators.get(0);            AlternateIdConstraint constraint=AlternateIdConstraint.Factory.getExportGroupInitiatorConstraint(initiatorUri.toString());            URIQueryResultList egUris=new URIQueryResultList();            _dbClient.queryByConstraint(constraint,egUris);            Iterator<URI> egIt=egUris.iterator();            while (egIt.hasNext()) {              ExportGroup theEg=_dbClient.queryObject(ExportGroup.class,egIt.next());              if (theEg.getVirtualArray().equals(newVarrayURI)) {                List<URI> theEgInits=StringSetUtil.stringSetToUriList(theEg.getInitiators());                if (theEgInits.containsAll(initiators) && theEgInits.size() == initiators.size()) {                  _log.info(String.format("Found existing exportGroup %s",theEg.getId().toString()));                  newEg=theEg;                  break;                }              }            }          }          if (newEg != null) {            newEg.addVolume(virtualVolumeURI,Integer.valueOf(lun));            _dbClient.updateObject(newEg);          } else {            _log.info("Creating new ExportGroup");            createExportGroup(eg,volume,Integer.valueOf(lun));          }          eg.removeVolume(virtualVolumeURI);          _dbClient.updateObject(eg);        }      }    }    if (!migrationSources.isEmpty()) {      final String workflowKey="deleteOriginalSources";      if (!WorkflowService.getInstance().hasWorkflowBeenCreated(stepId,workflowKey)) {        String subTaskId=stepId;        Workflow subWorkflow=_workflowService.getNewWorkflow(this,DELETE_MIGRATION_SOURCES_WF_NAME,true,subTaskId);        WorkflowTaskCompleter completer=new WorkflowTaskCompleter(subWorkflow.getWorkflowURI(),subTaskId);        boolean unexportStepsAdded=vplexAddUnexportVolumeWfSteps(subWorkflow,null,migrationSources,null);        String waitFor=null;        if (unexportStepsAdded) {          waitFor=UNEXPORT_STEP;          addStepToForgetVolumes(subWorkflow,vplexURI,migrationSources,waitFor);        }        Iterator<URI> migrationSourcesIter=migrationSources.iterator();        while (migrationSourcesIter.hasNext()) {          URI migrationSourceURI=migrationSourcesIter.next();          _log.info("Migration source URI is {}",migrationSourceURI);          Volume migrationSource=_dbClient.queryObject(Volume.class,migrationSourceURI);          URI sourceSystemURI=migrationSource.getStorageController();          _log.info("Source storage system URI is {}",sourceSystemURI);          StorageSystem sourceSystem=_dbClient.queryObject(StorageSystem.class,sourceSystemURI);          String subWFStepId=subWorkflow.createStepId();          Workflow.Method deleteVolumesMethod=new Workflow.Method(DELETE_VOLUMES_METHOD_NAME,sourceSystemURI,Arrays.asList(migrationSourceURI));          _log.info("Creating workflow step to delete source");          subWorkflow.createStep(MIGRATION_VOLUME_DELETE_STEP,String.format("Delete volume from storage system: %s",sourceSystemURI),waitFor,sourceSystemURI,sourceSystem.getSystemType(),BlockDeviceController.class,deleteVolumesMethod,null,subWFStepId);          _log.info("Created workflow step to delete source");        }        subWorkflow.executePlan(completer,"Deleted migration sources");        WorkflowService.getInstance().markWorkflowBeenCreated(stepId,workflowKey);      }    } else {      WorkflowStepCompleter.stepSucceded(stepId);      _log.info("Updated workflow step to success");    }  } catch (  Exception ex) {    _log.error("Error deleting migration sources",ex);    WorkflowStepCompleter.stepSucceded(stepId);  }}  }
class C{  public boolean minimizeApplication(){  return getImplementation().minimizeApplication();}  }
class C{  @Override public void windowDeactivated(WindowEvent e){}  }
class C{  public static boolean isBaseLanguage(Properties ctx,String tableName){  return Language.isBaseLanguage(getAD_Language(ctx));}  }
class C{  public static boolean verify(PublicKey publicKey,String signedData,String signature){  byte[] signatureBytes;  try {    signatureBytes=Base64.decode(signature,Base64.DEFAULT);  } catch (  IllegalArgumentException e) {    Log.e(TAG,"Base64 decoding failed.");    return false;  }  try {    Signature sig=Signature.getInstance(SIGNATURE_ALGORITHM);    sig.initVerify(publicKey);    sig.update(signedData.getBytes());    if (!sig.verify(signatureBytes)) {      Log.e(TAG,"Signature verification failed.");      return false;    }    return true;  } catch (  NoSuchAlgorithmException e) {    Log.e(TAG,"NoSuchAlgorithmException.");  }catch (  InvalidKeyException e) {    Log.e(TAG,"Invalid key specification.");  }catch (  SignatureException e) {    Log.e(TAG,"Signature exception.");  }  return false;}  }
class C{  protected int endGap(){  int result=(current == -1) ? 0 : 1;switch (type) {case LexicalUnits.FUNCTION:case LexicalUnits.STRING:case LexicalUnits.S:case LexicalUnits.PERCENTAGE:    result+=1;  break;case LexicalUnits.COMMENT:case LexicalUnits.HZ:case LexicalUnits.EM:case LexicalUnits.EX:case LexicalUnits.PC:case LexicalUnits.PT:case LexicalUnits.PX:case LexicalUnits.CM:case LexicalUnits.MM:case LexicalUnits.IN:case LexicalUnits.MS:result+=2;break;case LexicalUnits.KHZ:case LexicalUnits.DEG:case LexicalUnits.DPI:case LexicalUnits.RAD:result+=3;break;case LexicalUnits.DPCM:case LexicalUnits.GRAD:result+=4;}return result + blankCharacters;}  }
class C{  public BigInteger calculateAgreement(CipherParameters pubKey){  DHPublicKeyParameters pub=(DHPublicKeyParameters)pubKey;  if (!pub.getParameters().equals(dhParams)) {    throw new IllegalArgumentException("Diffie-Hellman public key has wrong parameters.");  }  return pub.getY().modPow(key.getX(),dhParams.getP());}  }
class C{  private void removeEntries(){  table.clear();}  }
class C{  public Object readBeanConnection(Element node) throws Exception {  Object result;  Vector<Element> children;  Element child;  String name;  int i;  int source;  int target;  int sourcePos;  int targetPos;  String event;  boolean hidden;  if (DEBUG) {    trace(new Throwable(),node.getAttribute(ATT_NAME));  }  m_CurrentNode=node;  result=null;  children=XMLDocument.getChildTags(node);  source=0;  target=0;  event="";  hidden=false;  for (i=0; i < children.size(); i++) {    child=children.get(i);    name=child.getAttribute(ATT_NAME);    if (name.equals(VAL_SOURCEID)) {      source=readIntFromXML(child);    } else     if (name.equals(VAL_TARGETID)) {      target=readIntFromXML(child);    } else     if (name.equals(VAL_EVENTNAME)) {      event=(String)invokeReadFromXML(child);    } else     if (name.equals(VAL_HIDDEN)) {      hidden=readBooleanFromXML(child);    } else {      System.out.println("WARNING: '" + name + "' is not a recognized name for "+ node.getAttribute(ATT_NAME)+ "!");    }  }  sourcePos=m_BeanInstancesID.indexOf(new Integer(source));  targetPos=m_BeanInstancesID.indexOf(new Integer(target));  if (m_IgnoreBeanConnections) {    addBeanConnectionRelation(m_CurrentMetaBean,sourcePos + "," + targetPos+ ","+ event+ ","+ hidden);    return result;  }  result=createBeanConnection(sourcePos,targetPos,event,hidden);  return result;}  }
class C{  public int next(){  int nextPos=index;  char c=desc.charAt(nextPos);  if (c == '(') {    ++index;    c=desc.charAt(++nextPos);    param=true;  }  if (c == ')') {    ++index;    c=desc.charAt(++nextPos);    param=false;  }  while (c == '[')   c=desc.charAt(++nextPos);  if (c == 'L') {    nextPos=desc.indexOf(';',nextPos) + 1;    if (nextPos <= 0)     throw new IndexOutOfBoundsException("bad descriptor");  } else   ++nextPos;  curPos=index;  index=nextPos;  return curPos;}  }
class C{  public void addConnection(Connection connection){  connections.put(connection.handle(),connection);  try {    persistence.persistConnection(connection);  } catch (  PersistenceException e) {    e.printStackTrace();  }}  }
class C{  public boolean verifyAllocatedAddress(long addr){  if (s_islogTrace)   log.trace("Checking Allocator " + m_index + ", size: "+ m_size);  final Iterator<AllocBlock> blocks=m_allocBlocks.iterator();  final long range=m_size * m_bitSize * 32;  while (blocks.hasNext()) {    final int startAddr=blocks.next().m_addr;    if (startAddr != 0) {      final long start=RWStore.convertAddr(startAddr);      final long end=start + range;      if (s_islogTrace)       log.trace("Checking " + addr + " between "+ start+ " - "+ end);      if (addr >= start && addr < end)       return true;    } else {      break;    }  }  return false;}  }
class C{  private void waitLoadCompete(){  if (m_loadComplete)   return;  m_loader.setPriority(Thread.NORM_PRIORITY);  log.config("");  while (m_loader.isAlive()) {    try {      Thread.sleep(100);    } catch (    Exception e) {      log.log(Level.SEVERE,"",e);    }  }  log.config("fini");}  }
class C{  protected void engineSetMode(String mode){  if (!mode.equalsIgnoreCase("ECB")) {    throw new IllegalArgumentException("can't support mode " + mode);  }}  }
class C{  public static void main(String[] args) throws Exception {  new ResultFileInfo().start(args);}  }
class C{  public SQLTransactionRollbackException(Throwable cause){  super(cause);}  }
class C{  public void readExternal(ObjectInput is) throws IOException {  DataInput dis=is;  if (is instanceof ObjectInputStream) {    ObjectInputStream ois=(ObjectInputStream)is;    dis=new FastBufferedDataInputStream(ois);  }  readHeaderAndPayload(dis);}  }
class C{  public static int readSingleByte(InputStream in) throws IOException {  byte[] buffer=new byte[1];  int result=in.read(buffer,0,1);  return (result != -1) ? buffer[0] & 0xff : -1;}  }
class C{  void register(Object listener){  Multimap<Class<?>,Subscriber> listenerMethods=findAllSubscribers(listener);  for (  Map.Entry<Class<?>,Collection<Subscriber>> entry : listenerMethods.asMap().entrySet()) {    Class<?> eventType=entry.getKey();    Collection<Subscriber> eventMethodsInListener=entry.getValue();    CopyOnWriteArraySet<Subscriber> eventSubscribers=subscribers.get(eventType);    if (eventSubscribers == null) {      CopyOnWriteArraySet<Subscriber> newSet=new CopyOnWriteArraySet<Subscriber>();      eventSubscribers=MoreObjects.firstNonNull(subscribers.putIfAbsent(eventType,newSet),newSet);    }    eventSubscribers.addAll(eventMethodsInListener);  }}  }
class C{  @POST @Path("/validate-update") @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public Response validateUserPasswordForUpdate(@Context HttpServletRequest httpRequest,PasswordUpdateParam passwordParam){  checkPasswordParameter(httpRequest,passwordParam,false);  return Response.noContent().build();}  }
class C{  public static byte[] decodeHex(String hexString){  int length=hexString.length();  if ((length & 0x01) != 0) {    throw new IllegalArgumentException("Odd number of characters.");  }  boolean badHex=false;  byte[] out=new byte[length >> 1];  for (int i=0, j=0; j < length; i++) {    int c1=hexString.charAt(j++);    if (c1 > 'f') {      badHex=true;      break;    }    final byte d1=DIGITS[c1];    if (d1 == -1) {      badHex=true;      break;    }    int c2=hexString.charAt(j++);    if (c2 > 'f') {      badHex=true;      break;    }    final byte d2=DIGITS[c2];    if (d2 == -1) {      badHex=true;      break;    }    out[i]=(byte)(d1 << 4 | d2);  }  if (badHex) {    throw new IllegalArgumentException("Invalid hexadecimal digit: " + hexString);  }  return out;}  }
class C{  public com.emc.storageos.vasa.VasaServiceStub.QueryStoragePortsResponse queryStoragePorts(com.emc.storageos.vasa.VasaServiceStub.QueryStoragePorts queryStoragePorts13) throws java.rmi.RemoteException, com.emc.storageos.vasa.NotImplemented, com.emc.storageos.vasa.InvalidArgument, com.emc.storageos.vasa.InvalidSession, com.emc.storageos.vasa.StorageFault {  org.apache.axis2.context.MessageContext _messageContext=null;  try {    org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[6].getName());    _operationClient.getOptions().setAction("urn:queryStoragePorts");    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);    addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");    _messageContext=new org.apache.axis2.context.MessageContext();    org.apache.axiom.soap.SOAPEnvelope env=null;    env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),queryStoragePorts13,optimizeContent(new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/","queryStoragePorts")));    _serviceClient.addHeadersToEnvelope(env);    _messageContext.setEnvelope(env);    _operationClient.addMessageContext(_messageContext);    _operationClient.execute(true);    org.apache.axis2.context.MessageContext _returnMessageContext=_operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);    org.apache.axiom.soap.SOAPEnvelope _returnEnv=_returnMessageContext.getEnvelope();    java.lang.Object object=fromOM(_returnEnv.getBody().getFirstElement(),com.emc.storageos.vasa.VasaServiceStub.QueryStoragePortsResponse.class,getEnvelopeNamespaces(_returnEnv));    return (com.emc.storageos.vasa.VasaServiceStub.QueryStoragePortsResponse)object;  } catch (  org.apache.axis2.AxisFault f) {    org.apache.axiom.om.OMElement faultElt=f.getDetail();    if (faultElt != null) {      if (faultExceptionNameMap.containsKey(faultElt.getQName())) {        try {          java.lang.String exceptionClassName=(java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());          java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);          java.lang.Exception ex=(java.lang.Exception)exceptionClass.newInstance();          java.lang.String messageClassName=(java.lang.String)faultMessageMap.get(faultElt.getQName());          java.lang.Class messageClass=java.lang.Class.forName(messageClassName);          java.lang.Object messageObject=fromOM(faultElt,messageClass,null);          java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});          m.invoke(ex,new java.lang.Object[]{messageObject});          if (ex instanceof com.emc.storageos.vasa.NotImplemented) {            throw (com.emc.storageos.vasa.NotImplemented)ex;          }          if (ex instanceof com.emc.storageos.vasa.InvalidArgument) {            throw (com.emc.storageos.vasa.InvalidArgument)ex;          }          if (ex instanceof com.emc.storageos.vasa.InvalidSession) {            throw (com.emc.storageos.vasa.InvalidSession)ex;          }          if (ex instanceof com.emc.storageos.vasa.StorageFault) {            throw (com.emc.storageos.vasa.StorageFault)ex;          }          throw new java.rmi.RemoteException(ex.getMessage(),ex);        } catch (        java.lang.ClassCastException e) {          throw f;        }catch (        java.lang.ClassNotFoundException e) {          throw f;        }catch (        java.lang.NoSuchMethodException e) {          throw f;        }catch (        java.lang.reflect.InvocationTargetException e) {          throw f;        }catch (        java.lang.IllegalAccessException e) {          throw f;        }catch (        java.lang.InstantiationException e) {          throw f;        }      } else {        throw f;      }    } else {      throw f;    }  } finally {    _messageContext.getTransportOut().getSender().cleanup(_messageContext);  }}  }
class C{  public Anonymous_traceType_2_ createAnonymous_traceType_2_(){  Anonymous_traceType_2_Impl anonymous_traceType_2_=new Anonymous_traceType_2_Impl();  return anonymous_traceType_2_;}  }
class C{  public OracleCommunicator(String hostName,String instanceName,int portNumber){  this.hostName=hostName;  this.instanceName=instanceName;  this.portNumber=portNumber;  this.connected=false;}  }
class C{  public void addEntry(Entry e,int dataSetIndex){  if (mDataSets.size() > dataSetIndex && dataSetIndex >= 0) {    float val=e.getVal();    T set=mDataSets.get(dataSetIndex);    if (mYValCount == 0) {      mYMin=val;      mYMax=val;      if (set.getAxisDependency() == AxisDependency.LEFT) {        mLeftAxisMax=e.getVal();        mLeftAxisMin=e.getVal();      } else {        mRightAxisMax=e.getVal();        mRightAxisMin=e.getVal();      }    } else {      if (mYMax < val)       mYMax=val;      if (mYMin > val)       mYMin=val;      if (set.getAxisDependency() == AxisDependency.LEFT) {        if (mLeftAxisMax < e.getVal())         mLeftAxisMax=e.getVal();        if (mLeftAxisMin > e.getVal())         mLeftAxisMin=e.getVal();      } else {        if (mRightAxisMax < e.getVal())         mRightAxisMax=e.getVal();        if (mRightAxisMin > e.getVal())         mRightAxisMin=e.getVal();      }    }    mYValCount+=1;    mYValueSum+=val;    handleEmptyAxis(getFirstLeft(),getFirstRight());    set.addEntry(e);  } else {    Log.e("addEntry","Cannot add Entry because dataSetIndex too high or too low.");  }}  }
class C{  public Session newSession(){  session=new Session(this);  session.saveContext(session.getNewContext(Constant.messages.getString("context.default.name")));  return session;}  }
class C{  public static void selectInList(int[] path,int offset){  selectListOffset(getComponentByPath(path),offset);}  }
class C{  public void hideToolbar(){  showing=false;  if (actualPaneInitialH == 0) {    Form f=getComponentForm();    if (f != null) {      initVars(f.getActualPane());    }  }  hideShowMotion=Motion.createSplineMotion(getY(),-getHeight(),300);  getComponentForm().registerAnimated(this);  hideShowMotion.start();}  }
class C{  public static Protocol retrieveProxy(final UrlParser urlParser,final ReentrantLock lock) throws QueryException, SQLException {  Protocol protocol;switch (urlParser.getHaMode()) {case AURORA:    return getProxyLoggingIfNeeded(urlParser,(Protocol)Proxy.newProxyInstance(AuroraProtocol.class.getClassLoader(),new Class[]{Protocol.class},new FailoverProxy(new AuroraListener(urlParser),lock)));case REPLICATION:  return getProxyLoggingIfNeeded(urlParser,(Protocol)Proxy.newProxyInstance(MastersSlavesProtocol.class.getClassLoader(),new Class[]{Protocol.class},new FailoverProxy(new MastersSlavesListener(urlParser),lock)));case FAILOVER:case SEQUENTIAL:return getProxyLoggingIfNeeded(urlParser,(Protocol)Proxy.newProxyInstance(MasterProtocol.class.getClassLoader(),new Class[]{Protocol.class},new FailoverProxy(new MastersFailoverListener(urlParser),lock)));default :protocol=getProxyLoggingIfNeeded(urlParser,new MasterProtocol(urlParser,lock));protocol.connectWithoutProxy();return protocol;}}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.479 -0400",hash_original_method="A242DFA5F52516C95D0F167B92B745B6",hash_generated_method="1891156C8FEFAA68CD85CC13506CC1D3") protected void handleIOException(IOException e) throws IOException {  throw e;}  }
class C{  static String kindToString(int kind){switch (kind) {case IClasspathEntry.CPE_PROJECT:    return "src";case IClasspathEntry.CPE_SOURCE:  return "src";case IClasspathEntry.CPE_LIBRARY:return "lib";case IClasspathEntry.CPE_VARIABLE:return "var";case IClasspathEntry.CPE_CONTAINER:return "con";case ClasspathEntry.K_OUTPUT:return "output";default :return "unknown";}}  }
class C{  public SaaSApplicationException(String message,ApplicationExceptionBean bean){  super(message);  this.bean=bean;}  }
class C{  public Composite createPlainComposite(Composite parent,int style){  Composite c=super.createComposite(parent,style);  c.setBackground(parent.getBackground());  paintBordersFor(c);  return c;}  }
class C{  public void loadCurrentArtwork(final ImageView imageView){  loadImage(generateAlbumCacheKey(MusicUtils.getAlbumName(),MusicUtils.getArtistName()),MusicUtils.getArtistName(),MusicUtils.getAlbumName(),MusicUtils.getCurrentAlbumId(),imageView,ImageType.ALBUM);}  }
class C{  private VectorDictionaryTable(final HashMap<String,double[]> dictionary){  super();  init(dictionary.size(),2);  int i=0;  for (  Map.Entry<String,double[]> entry : dictionary.entrySet()) {    String token=entry.getKey();    double[] vals=entry.getValue();    setLogicalValue(i,0,token,false);    setLogicalValue(i,1,Utils.doubleArrayToString(vals),false);    i++;  }  fireTableDataChanged();}  }
class C{  @Override public void onPageScrolled(int position,float positionOffset,int positionOffsetPixels){}  }
class C{  public ConnectionEvent(Object source,int type,DbUtils utils,Exception ex){  super(source);  m_Type=type;  m_DbUtils=utils;  m_Exception=ex;}  }
class C{  void createIsland(){  showError("Functionality temporarily disabled");}  }
class C{  public void attachTo(RecyclerView recycler,boolean headerAlreadyAligned){  validateRecycler(recycler,headerAlreadyAligned);  mRecycler=recycler;  mAlreadyAligned=headerAlreadyAligned;  mReversed=isLayoutManagerReversed(recycler);  setupAlignment(recycler);  setupHeader(recycler);}  }
class C{  protected String convertLoginString(String login){  int slashPos=login.indexOf("\\");  if (slashPos >= 0) {    String domainAlias=login.substring(0,slashPos);    String domain=domainAliasesResolver.getDomainName(domainAlias).toUpperCase();    String userName=login.substring(slashPos + 1);    login=domain + "\\" + userName;  } else {    int atSignPos=login.indexOf("@");    if (atSignPos >= 0) {      String domainAlias=login.substring(atSignPos + 1);      String domain=domainAliasesResolver.getDomainName(domainAlias).toUpperCase();      String userName=login.substring(0,atSignPos);      login=domain + "\\" + userName;    }  }  return login;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4mfPackage.TESTED_PROJECTS__TESTED_PROJECTS:    getTestedProjects().clear();  return;}super.eUnset(featureID);}  }
class C{  private void startGame(int p){  try {    if (!connect(p))     return;    readyForMessages=false;    put(new Event(EType.HELLO).setString(name));    Event e=comm.doWait();    if (e == null) {      throw new IOException("No response received. Expected " + EType.GAMESTATS + " or "+ EType.NEWGAME);    }    if (e.t == EType.GAMESTATS || e.t == EType.NEWGAME) {      Message m=Message.obtain(mHandler,MESSAGE_EVENT,e);      mHandler.handleMessage(m);    } else {      throw new IOException("Unknown response received. Event was " + e);    }    readyForMessages=true;    if (comm == null) {      return;    }    while ((e=comm.poll()) != null) {      handle(e);    }  } catch (  final IOException e) {    alert("Connection failed!","Reported error was: " + e.getLocalizedMessage());  }}  }
class C{  @Override protected List<String> createNewExportMaskWorkflowForInitiators(List<URI> initiatorURIs,ExportGroup exportGroup,Workflow workflow,Map<URI,Integer> volumeMap,StorageSystem storage,String token,String previousStep) throws Exception {  List<String> newSteps=new ArrayList<>();  if (!initiatorURIs.isEmpty()) {    List<Initiator> initiators=_dbClient.queryObject(Initiator.class,initiatorURIs);    if (_restHelper.isClusteredHost(storage,initiators,exportGroup.getType())) {      _log.info(String.format("New export masks for %s",exportGroup.getLabel()));      GenExportMaskCreateWorkflowResult result=generateDeviceSpecificExportMaskCreateWorkFlow(workflow,previousStep,storage,exportGroup,initiatorURIs,volumeMap,token);      previousStep=result.getStepId();    } else {      Map<String,List<URI>> computeResourceToInitiators=mapInitiatorsToComputeResource(exportGroup,initiatorURIs);      for (      Map.Entry<String,List<URI>> resourceEntry : computeResourceToInitiators.entrySet()) {        String computeKey=resourceEntry.getKey();        List<URI> computeInitiatorURIs=resourceEntry.getValue();        _log.info(String.format("New export masks for %s",computeKey));        GenExportMaskCreateWorkflowResult result=generateDeviceSpecificExportMaskCreateWorkFlow(workflow,previousStep,storage,exportGroup,computeInitiatorURIs,volumeMap,token);        previousStep=result.getStepId();      }    }  }  newSteps.add(previousStep);  return newSteps;}  }
class C{  @Override public void onRequestPermissionsResult(int requestCode,@NonNull String[] permissions,@NonNull int[] grantResults){switch (requestCode) {case REQUEST_STORAGE_READ_ACCESS_PERMISSION:    if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {      pickFromGallery();    }  break;default :super.onRequestPermissionsResult(requestCode,permissions,grantResults);}}  }
class C{  public boolean contains(long prefix_hash){  if (prefix_hash == 0) {    return false;  }  int idx=-1 * Arrays.binarySearch(hashes_idx,prefix_hash) - 1;  if (idx == cache_size) {    return false;  } else {    return (hashes_idx[idx] & PREFIX_HASH_MASK) == prefix_hash;  }}  }
class C{  public static void copyToRange(byte[] src,byte[] dest,int destIx){  assertTrue(src.length < dest.length - destIx);  System.arraycopy(src,0,dest,destIx,src.length);}  }
class C{  public Geo offset(double distance,double azimuth){  return offset(distance,azimuth,new Geo());}  }
class C{  public byte[] encrypt(byte[] iv,byte[] data) throws IntegrityException {  if (data.length % blockSize != 0) {    throw new IntegrityException("Incorrect data size");  }  if (iv.length != blockSize) {    throw new IntegrityException("Incorrect iv size");  }  byte[] currentBlock=new byte[blockSize];  byte[] res=new byte[data.length];  byte[] currentIV=new byte[blockSize];  for (int i=0; i < blockSize; i++) {    currentIV[i]=iv[i];  }  int count=data.length / blockSize;  for (int i=0; i < count; i++) {    for (int j=0; j < blockSize; j++) {      currentBlock[j]=(byte)((data[i * blockSize + j] & 0xFF) ^ (currentIV[j] & 0xFF));    }    blockCipher.encryptBlock(currentBlock,0,res,i * blockSize);    for (int j=0; j < blockSize; j++) {      currentIV[j]=res[i * blockSize + j];    }  }  return res;}  }
class C{  public Object jjtAccept(ParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  public DateTimeFormatterBuilder appendDayOfYear(int minDigits){  return appendDecimal(DateTimeFieldType.dayOfYear(),minDigits,3);}  }
class C{  public XObject operate(XObject left,XObject right) throws javax.xml.transform.TransformerException {  return left.lessThanOrEqual(right) ? XBoolean.S_TRUE : XBoolean.S_FALSE;}  }
class C{  public void stop(){  m_loadProgressPanel.stop();  m_database.removeListener(m_databaseListener);  CGlobalProgressManager.instance().remove(this);}  }
class C{  private ByteBuffer read(FileChannel channel,int size,long offset){  ByteBuffer byteBffer=ByteBuffer.allocate(size);  try {    channel.position(offset);    channel.read(byteBffer);  } catch (  Exception e) {    LOGGER.error(e,e.getMessage());  }  byteBffer.rewind();  return byteBffer;}  }
class C{  public String toString(){  StringBuffer buf=new StringBuffer();  buf.append("[ Options: [ short ");  buf.append(shortOpts.toString());  buf.append(" ] [ long ");  buf.append(longOpts);  buf.append(" ]");  return buf.toString();}  }
class C{  protected int defineSymbol(Movie movie,SWFTagTypes timelineWriter,SWFTagTypes definitionwriter) throws IOException {  return getNextId(movie);}  }
class C{  void addSensor(){  if ((nextSensor.getText()).trim().length() <= 0) {    JOptionPane.showMessageDialog(this,rb.getString("Error10"),Bundle.getMessage("ErrorTitle"),JOptionPane.ERROR_MESSAGE);    return;  }  SensorIcon l=new SensorIcon(new NamedIcon("resources/icons/smallschematics/tracksegments/circuit-error.gif","resources/icons/smallschematics/tracksegments/circuit-error.gif"),this);  l.setIcon("SensorStateActive",sensorIconEditor.getIcon(0));  l.setIcon("SensorStateInactive",sensorIconEditor.getIcon(1));  l.setIcon("BeanStateInconsistent",sensorIconEditor.getIcon(2));  l.setIcon("BeanStateUnknown",sensorIconEditor.getIcon(3));  l.setSensor(nextSensor.getText().trim());  l.setDisplayLevel(SENSORS);  if (l.getSensor() != null) {    if ((l.getNamedSensor().getName() == null) || (!(l.getNamedSensor().getName().equals(nextSensor.getText().trim())))) {      nextSensor.setText(l.getNamedSensor().getName());    }  }  nextSensor.setText(l.getNamedSensor().getName());  setNextLocation(l);  setDirty(true);  putItem(l);}  }
class C{  private void mask(Mask mask,boolean on){  flags=mask.set(flags,on);}  }
class C{  public void invalidateAll(){  logger.debug("{}: Invalidate all cache entries",Thread.currentThread().getName());  this.cache.invalidateAll();}  }
class C{  public void createOverlay(DrawingView view,@Nullable TextHolderFigure figure){  view.getComponent().add(editScrollContainer,0);  editedFigure=figure;  this.view=view;  if (editedFigure != null) {    editedFigure.addFigureListener(figureHandler);    updateWidget();  }}  }
class C{  public static byte[] decode(String s) throws java.io.IOException {  return decode(s,NO_OPTIONS);}  }
class C{  public boolean isResettable(){  return inputStream == null && reader == null;}  }
class C{  FLVReader(){}  }
class C{  @Override public boolean equals(Object other){  if (this == other)   return true;  if (!(other instanceof InputFileObject))   return false;  InputFileObject o=(InputFileObject)other;  return getAbsoluteFile().equals(o.getAbsoluteFile());}  }
class C{  public Webserver(String port) throws IOException {  this(Integer.parseInt(port));}  }
class C{  private SolrInputDocument genNestedDocuments(Map<String,SolrInputDocument> allDocs,int thisLevel,int maxDepth){  String id="" + (idCounter++);  SolrInputDocument sdoc=new SolrInputDocument();  allDocs.put(id,sdoc);  sdoc.addField("id",id);  sdoc.addField("level_i",thisLevel);  sdoc.addField("name",names[TestUtil.nextInt(random(),0,names.length - 1)]);  if (0 < maxDepth) {    int numKids=TestUtil.nextInt(random(),-2,7);    for (int i=0; i < numKids; i++) {      sdoc.addChildDocument(genNestedDocuments(allDocs,thisLevel + 1,maxDepth - 1));    }  }  return sdoc;}  }
class C{  public com.linkedin.camus.example.records.DummyLog2.Builder clearName(){  name=null;  fieldSetFlags()[1]=false;  return this;}  }
class C{  @Override public void mouseReleased(MouseEvent evt){  if (popupTimer != null) {    popupTimer.stop();    popupTimer=null;  }  if (isMousePressedPopupTrigger) {    isMousePressedPopupTrigger=false;  } else {    if (evt.isPopupTrigger()) {      handlePopupMenu(evt);    } else {      super.mouseReleased(evt);    }  }}  }
class C{  public OneVSAll(Classifier baseClassifier){  this(baseClassifier,true);}  }
class C{  @Override public boolean equals(Object o){  if (o == this)   return true;  if (!(o instanceof BtcFixedFormat))   return false;  BtcFixedFormat other=(BtcFixedFormat)o;  return super.equals(other) && other.scale() == scale() && other.decimalGroups.equals(decimalGroups);}  }
class C{  private void init(DerValue encoding) throws Asn1Exception, KrbApErrException, IOException {  DerValue der, subDer;  if (((encoding.getTag() & (byte)0x1F) != (byte)0x15) || (encoding.isApplication() != true) || (encoding.isConstructed() != true))   throw new Asn1Exception(Krb5.ASN1_BAD_ID);  der=encoding.getData().getDerValue();  if (der.getTag() != DerValue.tag_Sequence)   throw new Asn1Exception(Krb5.ASN1_BAD_ID);  subDer=der.getData().getDerValue();  if ((subDer.getTag() & 0x1F) == 0x00) {    pvno=subDer.getData().getBigInteger().intValue();    if (pvno != Krb5.PVNO) {      throw new KrbApErrException(Krb5.KRB_AP_ERR_BADVERSION);    }  } else   throw new Asn1Exception(Krb5.ASN1_BAD_ID);  subDer=der.getData().getDerValue();  if ((subDer.getTag() & 0x1F) == 0x01) {    msgType=subDer.getData().getBigInteger().intValue();    if (msgType != Krb5.KRB_PRIV)     throw new KrbApErrException(Krb5.KRB_AP_ERR_MSG_TYPE);  } else   throw new Asn1Exception(Krb5.ASN1_BAD_ID);  encPart=EncryptedData.parse(der.getData(),(byte)0x03,false);  if (der.getData().available() > 0)   throw new Asn1Exception(Krb5.ASN1_BAD_ID);}  }
class C{  public Result uploadImage(ImageEntity imageEntity,InputStream inputStream) throws IOException, InternalException, VmdkFormatException, ExternalException {  inputStream=new BufferedInputStream(inputStream);  boolean isVmdkFile=isVmdkFile(inputStream);  boolean isTarFile=isVmdkFile ? false : isTarFile(inputStream);  if (!isVmdkFile && !isTarFile) {    throw new UnsupportedImageFileType("Image must be either a vmdk or an ova file.");  }  Result result;  EsxCloudVmx ecv=null;  EsxOvaFile esxOvaFile=null;  if (isTarFile) {    esxOvaFile=new EsxOvaFile(inputStream);    ecv=EsxCloudVmxGenerator.generate(esxOvaFile.getOvf());  }  result=new Result();  Image image=null;  try {    image=imageStore.createImage(imageEntity.getId());    if (isVmdkFile) {      logger.info("Reading disk image from VMDK file.");      result.imageSize+=image.addDisk(DISK_FILE_SUFFIX,inputStream);    } else {      logger.info("Reading disk image from OVA file.");      result.imageSize+=loadImageFromOva(esxOvaFile,image,ecv);      result.imageSettings.putAll(EsxCloudVmx.toImageSettings(ecv));    }    image.close();    imageStore.finalizeImage(image);  } catch (  Exception e) {    logger.warn("Upload image {} failed.",e);    if (image != null) {      image.close();      deleteUploadFolder(image);    }    throw e;  }  return result;}  }
class C{  public boolean isFinished(){  return mState == STATE_IDLE;}  }
class C{  public Pos3D diff(Pos3D pos){  return new Pos3D(xPos - pos.xPos,yPos - pos.yPos,zPos - pos.zPos);}  }
class C{  public CtClass makeClassIfNew(InputStream classfile) throws IOException, RuntimeException {  compress();  classfile=new BufferedInputStream(classfile);  CtClass clazz=new CtClassType(classfile,this);  clazz.checkModify();  String classname=clazz.getName();  CtClass found=checkNotExists(classname);  if (found != null)   return found; else {    cacheCtClass(classname,clazz,true);    return clazz;  }}  }
class C{  protected void computeArrowheadGeometry(DrawContext dc,int poleA,int poleB,Vec4 polePtA,Vec4 polePtB,FloatBuffer buffer,PathData pathData){  double arrowLength=this.getArrowLength();  double arrowBase=arrowLength * this.getArrowAngle().tanHalfAngle();  double poleDistance=polePtA.distanceTo3(polePtB);  int midIndex=(poleA + poleB) / 2;  List<Position> tessellatedPositions=pathData.getTessellatedPositions();  Position posA=tessellatedPositions.get(midIndex);  Position posB=tessellatedPositions.get(midIndex + 1);  Terrain terrain=dc.getTerrain();  Vec4 ptA=this.computePoint(dc,terrain,posA);  Vec4 ptB=this.computePoint(dc,terrain,posB);  Vec4 parallel=ptA.subtract3(ptB);  Vec4 surfaceNormal=dc.getGlobe().computeSurfaceNormalAtPoint(ptB);  Vec4 perpendicular=surfaceNormal.cross3(parallel);  Vec4 midPoint;  if ((poleA - poleB) % 2 != 0) {    midPoint=ptA.add3(ptB).divide3(2.0);  } else {    midPoint=ptA;  }  if (!this.isArrowheadSmall(dc,midPoint,1)) {    View view=dc.getView();    double midpointDistance=view.getEyePoint().distanceTo3(midPoint);    double pixelSize=view.computePixelSizeAtDistance(midpointDistance);    if (arrowLength / pixelSize > this.maxScreenSize) {      arrowLength=this.maxScreenSize * pixelSize;      arrowBase=arrowLength * this.getArrowAngle().tanHalfAngle();    }    if (poleDistance <= arrowLength) {      return;    }    perpendicular=perpendicular.normalize3().multiply3(arrowBase);    parallel=parallel.normalize3().multiply3(arrowLength);    midPoint=midPoint.subtract3(parallel.divide3(2.0));    Vec4 vertex1=midPoint.add3(parallel).add3(perpendicular);    Vec4 vertex2=midPoint.add3(parallel).add3(perpendicular.multiply3(-1.0));    Vec4 referencePoint=pathData.getReferencePoint();    buffer.put((float)(vertex1.x - referencePoint.x));    buffer.put((float)(vertex1.y - referencePoint.y));    buffer.put((float)(vertex1.z - referencePoint.z));    buffer.put((float)(vertex2.x - referencePoint.x));    buffer.put((float)(vertex2.y - referencePoint.y));    buffer.put((float)(vertex2.z - referencePoint.z));    buffer.put((float)(midPoint.x - referencePoint.x));    buffer.put((float)(midPoint.y - referencePoint.y));    buffer.put((float)(midPoint.z - referencePoint.z));  }}  }
class C{  public static final boolean isASCII(Resources res,int resId) throws IOException, NotFoundException {  BufferedReader buffer=new BufferedReader(new InputStreamReader(res.openRawResource(resId)));  boolean isASCII=isASCII(buffer);  buffer.close();  return isASCII;}  }
class C{  public int rewind(int n){  pos-=n;  return pos;}  }
class C{  public DirectoryLoader(ClassLoader loader,PathImpl dir){  super(loader,dir);}  }
class C{  private InetSocketAddress extractInetSocketAddress(final Server server) throws Exception {  final ServerImpl impl=(ServerImpl)server;  final Field transportServerField=ServerImpl.class.getDeclaredField("transportServer");  transportServerField.setAccessible(true);  final Object transportServer=transportServerField.get(impl);  final Field channelField=transportServer.getClass().getDeclaredField("channel");  channelField.setAccessible(true);  final Channel channel=(Channel)channelField.get(transportServer);  return (InetSocketAddress)channel.localAddress();}  }
class C{  protected static void preparePdfDoc(){  toSignDocument=new FileDocument(new File("src/main/resources/hello-world.pdf"));}  }
class C{  private static double doubleValue(Object attributeValue) throws NumberFormatException {  if (attributeValue instanceof Number) {    return (((Number)attributeValue).doubleValue());  } else {    return (Double.parseDouble(attributeValue.toString()));  }}  }
class C{  private void addUserMappings(TenantOrg tenant,List<UserMappingParam> userMappingParams,StorageOSUser user){  List<UserMapping> userMappings=UserMapping.fromParamList(userMappingParams);  Map<String,Map<URI,List<UserMapping>>> domainUserMappingMap=new HashMap<String,Map<URI,List<UserMapping>>>();  for (  UserMapping userMapping : userMappings) {    if (null == userMapping.getDomain() || userMapping.getDomain().isEmpty()) {      throw APIException.badRequests.requiredParameterMissingOrEmpty("domain");    }    trimGroupAndDomainNames(userMapping);    if (!authNProviderExistsForDomain(userMapping.getDomain())) {      throw APIException.badRequests.invalidParameter("domain",userMapping.getDomain());    }    String domain=userMapping.getDomain();    Map<URI,List<UserMapping>> domainMappings=domainUserMappingMap.get(domain);    if (null == domainMappings) {      domainMappings=_permissionsHelper.getAllUserMappingsForDomain(domain);      domainUserMappingMap.put(domain,domainMappings);    }    for (    Entry<URI,List<UserMapping>> existingMappingEntry : domainMappings.entrySet()) {      if (!tenant.getId().equals(existingMappingEntry.getKey())) {        for (        UserMapping existingMapping : existingMappingEntry.getValue()) {          if (userMapping.isMatch(existingMapping)) {            URI dupTenantURI=existingMappingEntry.getKey();            throw _permissionsHelper.userHasGivenRole(user,dupTenantURI,Role.TENANT_ADMIN) ? APIException.badRequests.userMappingDuplicatedInAnotherTenantExtended(userMapping.toString(),dupTenantURI.toString()) : APIException.badRequests.userMappingDuplicatedInAnotherTenant(userMapping.toString());          }        }      }    }    if (!isValidMapping(userMapping)) {      throw APIException.badRequests.invalidParameter("user_mapping",userMapping.toString());    }    tenant.addUserMapping(userMapping.getDomain(),userMapping.toString());  }}  }
class C{  public void visit(int version,int access,String name,String signature,String superName,String[] interfaces){  if (cv != null) {    cv.visit(version,access,name,signature,superName,interfaces);  }}  }
class C{  @Override public final void postSetUp() throws Exception {  final Host host=Host.getHost(0);  vm0=host.getVM(0);  vm1=host.getVM(1);  vm2=host.getVM(2);  vm3=host.getVM(3);  vm0.invoke(null);}  }
class C{  public HashCodeBuilder append(final Object object){  if (object == null) {    iTotal=iTotal * iConstant;  } else {    if (object.getClass().isArray()) {      if (object instanceof long[]) {        append((long[])object);      } else       if (object instanceof int[]) {        append((int[])object);      } else       if (object instanceof short[]) {        append((short[])object);      } else       if (object instanceof char[]) {        append((char[])object);      } else       if (object instanceof byte[]) {        append((byte[])object);      } else       if (object instanceof double[]) {        append((double[])object);      } else       if (object instanceof float[]) {        append((float[])object);      } else       if (object instanceof boolean[]) {        append((boolean[])object);      } else {        append((Object[])object);      }    } else {      iTotal=iTotal * iConstant + object.hashCode();    }  }  return this;}  }
class C{  private void runInternalSpark(){  for (  MethodOrMethodContext momc : PTABridge.v().getReachableMethodContexts()) {    SootMethod method=momc.method();    Context context=momc.context();    if (API.v().isSystemMethod(method))     continue;    Iterator<Edge> outgoingEdges=Scene.v().getCallGraph().edgesOutOf(momc);    while (outgoingEdges.hasNext()) {      Edge edge=outgoingEdges.next();      if (edge.srcStmt() == null || !edge.srcStmt().containsInvokeExpr())       continue;      InvokeExpr invoke=edge.srcStmt().getInvokeExpr();      if (invoke == null)       continue;      if (invoke instanceof InstanceInvokeExpr) {        InstanceInvokeExpr iie=(InstanceInvokeExpr)invoke;        if (typesToConsider.contains(iie.getBase().getType())) {          Set<? extends IAllocNode> nodes;          nodes=PTABridge.v().getPTSet(iie.getBase(),context);          for (          IAllocNode an : nodes) {            if (RCFG.v().isRecOrArgForAPICall(an)) {              getCalls(an).add(edge);            }          }        }      }      for (      Value argv : invoke.getArgs()) {        if (PTABridge.v().isPointer(argv) && typesToConsider.contains(argv.getType())) {          Set<? extends IAllocNode> nodes;          nodes=PTABridge.v().getPTSet(argv,context);          for (          IAllocNode an : nodes) {            if (RCFG.v().isRecOrArgForAPICall(an)) {              getCalls(an).add(edge);            }          }        }      }    }  }}  }
class C{  public static int toInteger(Datum datum,final int defaultValue) throws SQLException {  if (datum == null)   return defaultValue;  return ((NUMBER)datum).intValue();}  }
class C{  public void stopFlipping(){  mStarted=false;  updateRunning();}  }
class C{  private int recalcOffset(int offset,int totalSize,int viewSize,int componentSize){  if (offset + (animationPosition % componentSize) + (fixedDraggedAnimationPosition % componentSize) >= viewSize) {    offset-=totalSize;  } else {    if (offset + (animationPosition % componentSize) + (fixedDraggedAnimationPosition % componentSize) < 1 - componentSize) {      offset+=totalSize;    }  }  return offset;}  }
class C{  public static SortedMap<Integer,Integer> generateSortedTagMap(String[] partitions,Map<String,String> tags){  final SortedMap<Integer,Integer> tagHashMap=new TreeMap<Integer,Integer>();  for (  Map.Entry<String,String> entry : tags.entrySet()) {    final String tagName=entry.getKey();    final String tagValue=entry.getValue();    if (tagValue == null || isPartitionTag(partitions,tagName))     continue;    tagHashMap.put(tagName.hashCode(),tagValue.hashCode());  }  return tagHashMap;}  }
class C{  public RDFJSONParser(final RDFFormat actualFormat){  this.actualFormat=actualFormat;}  }
class C{  public String key(){  return key;}  }
class C{  public static CharsRef deepCopyOf(CharsRef other){  return new CharsRef(Arrays.copyOfRange(other.chars,other.offset,other.offset + other.length),0,other.length);}  }
class C{  private Date watchCoreStartAt(SolrClient client,final long timeout,final Date min) throws InterruptedException, IOException, SolrServerException {  final long sleepInterval=200;  long timeSlept=0;  try (HttpSolrClient adminClient=adminClient(client)){    SolrParams p=params("action","status","core","collection1");    while (timeSlept < timeout) {      QueryRequest req=new QueryRequest(p);      req.setPath("/admin/cores");      try {        NamedList data=adminClient.request(req);        for (        String k : new String[]{"status","collection1"}) {          Object o=data.get(k);          assertNotNull("core status rsp missing key: " + k,o);          data=(NamedList)o;        }        Date startTime=(Date)data.get("startTime");        assertNotNull("core has null startTime",startTime);        if (null == min || startTime.after(min)) {          return startTime;        }      } catch (      SolrException e) {        if (500 != e.code()) {          throw e;        }      }      timeSlept+=sleepInterval;      Thread.sleep(sleepInterval);    }    fail("timed out waiting for collection1 startAt time to exceed: " + min);    return min;  } }  }
class C{  public void accept(final ClassVisitor cv){  String[] interfaces=new String[this.interfaces.size()];  this.interfaces.toArray(interfaces);  cv.visit(version,access,name,signature,superName,interfaces);  if (sourceFile != null || sourceDebug != null) {    cv.visitSource(sourceFile,sourceDebug);  }  if (outerClass != null) {    cv.visitOuterClass(outerClass,outerMethod,outerMethodDesc);  }  int i, n;  n=visibleAnnotations == null ? 0 : visibleAnnotations.size();  for (i=0; i < n; ++i) {    AnnotationNode an=visibleAnnotations.get(i);    an.accept(cv.visitAnnotation(an.desc,true));  }  n=invisibleAnnotations == null ? 0 : invisibleAnnotations.size();  for (i=0; i < n; ++i) {    AnnotationNode an=invisibleAnnotations.get(i);    an.accept(cv.visitAnnotation(an.desc,false));  }  n=visibleTypeAnnotations == null ? 0 : visibleTypeAnnotations.size();  for (i=0; i < n; ++i) {    TypeAnnotationNode an=visibleTypeAnnotations.get(i);    an.accept(cv.visitTypeAnnotation(an.typeRef,an.typePath,an.desc,true));  }  n=invisibleTypeAnnotations == null ? 0 : invisibleTypeAnnotations.size();  for (i=0; i < n; ++i) {    TypeAnnotationNode an=invisibleTypeAnnotations.get(i);    an.accept(cv.visitTypeAnnotation(an.typeRef,an.typePath,an.desc,false));  }  n=attrs == null ? 0 : attrs.size();  for (i=0; i < n; ++i) {    cv.visitAttribute(attrs.get(i));  }  for (i=0; i < innerClasses.size(); ++i) {    innerClasses.get(i).accept(cv);  }  for (i=0; i < fields.size(); ++i) {    fields.get(i).accept(cv);  }  for (i=0; i < methods.size(); ++i) {    methods.get(i).accept(cv);  }  cv.visitEnd();}  }
class C{  protected Facets buildFacetsResult(FacetsCollector drillDowns,FacetsCollector[] drillSideways,String[] drillSidewaysDims) throws IOException {  Facets drillDownFacets;  Map<String,Facets> drillSidewaysFacets=new HashMap<>();  if (taxoReader != null) {    drillDownFacets=new FastTaxonomyFacetCounts(taxoReader,config,drillDowns);    if (drillSideways != null) {      for (int i=0; i < drillSideways.length; i++) {        drillSidewaysFacets.put(drillSidewaysDims[i],new FastTaxonomyFacetCounts(taxoReader,config,drillSideways[i]));      }    }  } else {    drillDownFacets=new SortedSetDocValuesFacetCounts(state,drillDowns);    if (drillSideways != null) {      for (int i=0; i < drillSideways.length; i++) {        drillSidewaysFacets.put(drillSidewaysDims[i],new SortedSetDocValuesFacetCounts(state,drillSideways[i]));      }    }  }  if (drillSidewaysFacets.isEmpty()) {    return drillDownFacets;  } else {    return new MultiFacets(drillSidewaysFacets,drillDownFacets);  }}  }
class C{  public Type1C(){}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @PUT @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{target_tenant_id}") @CheckPermission(roles={Role.SYSTEM_MONITOR,Role.TENANT_ADMIN},acls={ACL.ANY}) public Response updateQuota(@PathParam("tenant_id") String openstack_tenant_id,@PathParam("target_tenant_id") String openstackTargetTenantId,CinderQuotaDetails quotaUpdates,@Context HttpHeaders header){  _log.info("Updating Quota");  Project project=getCinderHelper().getProject(openstackTargetTenantId.toString(),getUserFromContext());  HashMap<String,String> defaultQuotaMap=getQuotaHelper().getCompleteDefaultConfiguration(openstackTargetTenantId);  if (project == null) {    throw APIException.badRequests.projectWithTagNonexistent(openstackTargetTenantId);  }  long maxQuota=0L;  if (project.getQuotaEnabled()) {    maxQuota=(long)(project.getQuota().intValue());  } else {    maxQuota=Long.valueOf(defaultQuotaMap.get(CinderConstants.ResourceQuotaDefaults.GIGABYTES.getResource()));  }  boolean bVpoolQuotaUpdate=isVpoolQuotaUpdate(quotaUpdates.quota_set);  String vpoolName=null;  VirtualPool objVpool=null;  if (bVpoolQuotaUpdate) {    vpoolName=getVpoolName(quotaUpdates.quota_set);    _log.info("Vpool for which quota is being updated is {}",vpoolName);    objVpool=getCinderHelper().getVpool(vpoolName);    if (objVpool == null) {      _log.error("vpool with the given name doesnt exist");      throw APIException.badRequests.parameterIsNotValid(vpoolName);    }    if (!_permissionsHelper.tenantHasUsageACL(URI.create(openstackTargetTenantId),objVpool)) {      _log.error("tenant {} does not have access to vpool with the given name {}",openstackTargetTenantId,vpoolName);      throw APIException.badRequests.parameterIsNotValid(vpoolName);    }    _log.info("objVpool.getLabel() is {}",objVpool.getLabel());  }  List<URI> quotas=_dbClient.queryByType(QuotaOfCinder.class,true);  boolean noEntriesInDB=true;  for (  URI quota : quotas) {    QuotaOfCinder quotaObj=_dbClient.queryObject(QuotaOfCinder.class,quota);    if ((quotaObj.getProject() != null) && (quotaObj.getProject().toString().equalsIgnoreCase(project.getId().toString()))) {      _log.info("QuotaObj being updated is {}",quotaObj.toString());      URI vpoolUri=quotaObj.getVpool();      if ((!bVpoolQuotaUpdate) && (vpoolUri != null)) {        continue;      }      if ((bVpoolQuotaUpdate) && (vpoolUri != null)) {        VirtualPool pool=_dbClient.queryObject(VirtualPool.class,vpoolUri);        if ((pool != null) && (pool.getLabel().equals(vpoolName)) && (vpoolName != null)&& (vpoolName.length() > 0)) {          if (quotaUpdates.quota_set.containsKey("gigabytes_" + vpoolName))           quotaObj.setTotalQuota(new Long(quotaUpdates.quota_set.get("gigabytes_" + vpoolName)));          if (quotaUpdates.quota_set.containsKey("volumes_" + vpoolName))           quotaObj.setVolumesLimit(new Long(quotaUpdates.quota_set.get("volumes_" + vpoolName)));          if (quotaUpdates.quota_set.containsKey("snapshots_" + vpoolName))           quotaObj.setSnapshotsLimit(new Long(quotaUpdates.quota_set.get("snapshots_" + vpoolName)));          noEntriesInDB=false;          _dbClient.updateObject(quotaObj);          return getQuotaDetailFormat(header,quotaUpdates);        }      } else       if (!bVpoolQuotaUpdate) {        if (quotaUpdates.quota_set.containsKey("gigabytes"))         quotaObj.setTotalQuota(new Long(quotaUpdates.quota_set.get("gigabytes")));        if (quotaUpdates.quota_set.containsKey("volumes"))         quotaObj.setVolumesLimit(new Long(quotaUpdates.quota_set.get("volumes")));        if (quotaUpdates.quota_set.containsKey("snapshots"))         quotaObj.setSnapshotsLimit(new Long(quotaUpdates.quota_set.get("snapshots")));        noEntriesInDB=false;        _dbClient.updateObject(quotaObj);        return getQuotaDetailFormat(header,quotaUpdates);      }    }  }  if (noEntriesInDB) {    _log.info("No entries in the QuotaOfCinder column family");    QuotaOfCinder objQuotaOfCinder=new QuotaOfCinder();    objQuotaOfCinder.setProject(project.getId());    if (bVpoolQuotaUpdate) {      objQuotaOfCinder.setVpool(objVpool.getId());      _log.info("Updating Quota of Vpool");      if (quotaUpdates.quota_set.containsKey("gigabytes_" + vpoolName))       objQuotaOfCinder.setTotalQuota(new Long(quotaUpdates.quota_set.get("gigabytes_" + vpoolName))); else       objQuotaOfCinder.setTotalQuota(Long.valueOf(defaultQuotaMap.get("gigabytes_" + vpoolName)));      if (quotaUpdates.quota_set.containsKey("volumes_" + vpoolName))       objQuotaOfCinder.setVolumesLimit(new Long(quotaUpdates.quota_set.get("volumes_" + vpoolName))); else       objQuotaOfCinder.setVolumesLimit(Long.valueOf(defaultQuotaMap.get("volumes_" + vpoolName)));      if (quotaUpdates.quota_set.containsKey("snapshots_" + vpoolName))       objQuotaOfCinder.setSnapshotsLimit(new Long(quotaUpdates.quota_set.get("snapshots_" + vpoolName))); else       objQuotaOfCinder.setSnapshotsLimit(Long.valueOf(defaultQuotaMap.get("snapshots_" + vpoolName)));    } else {      if (quotaUpdates.quota_set.containsKey("gigabytes"))       objQuotaOfCinder.setTotalQuota(new Long(quotaUpdates.quota_set.get("gigabytes"))); else       objQuotaOfCinder.setTotalQuota(maxQuota);      if (quotaUpdates.quota_set.containsKey("volumes"))       objQuotaOfCinder.setVolumesLimit(new Long(quotaUpdates.quota_set.get("volumes"))); else       objQuotaOfCinder.setVolumesLimit(Long.valueOf(defaultQuotaMap.get("volumes")));      if (quotaUpdates.quota_set.containsKey("snapshots"))       objQuotaOfCinder.setSnapshotsLimit(new Long(quotaUpdates.quota_set.get("snapshots"))); else       objQuotaOfCinder.setSnapshotsLimit(Long.valueOf(defaultQuotaMap.get("snapshots")));    }    objQuotaOfCinder.setId(URI.create(UUID.randomUUID().toString()));    _dbClient.createObject(objQuotaOfCinder);    return getQuotaDetailFormat(header,quotaUpdates);  }  return getQuotaDetailFormat(header,quotaUpdates);}  }
class C{  public double trace(){  double t=0;  for (int i=0; i < Math.min(m,n); i++) {    t+=A[i][i];  }  return t;}  }
class C{  protected boolean isAuthenticationRequired(String artifact,String version) throws IOException {  return "true".equalsIgnoreCase((String)loadProperties(artifact,version).get(AUTHENTICATION_REQUIRED_PROPERTY));}  }
class C{  protected void postProcessJobDetail(JobDetail jobDetail){}  }
class C{  protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {  return new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false");}  }
class C{  public DNetscapeCaRevocationUrl(JDialog parent){  super(parent);  setTitle(res.getString("DNetscapeCaRevocationUrl.Title"));  initComponents();}  }
class C{  public com.emc.storageos.vasa.VasaServiceStub.QueryAssociatedPortsForProcessorResponse queryAssociatedPortsForProcessor(com.emc.storageos.vasa.VasaServiceStub.QueryAssociatedPortsForProcessor queryAssociatedPortsForProcessor17) throws java.rmi.RemoteException, com.emc.storageos.vasa.NotImplemented, com.emc.storageos.vasa.InvalidArgument, com.emc.storageos.vasa.InvalidSession, com.emc.storageos.vasa.StorageFault {  org.apache.axis2.context.MessageContext _messageContext=null;  try {    org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[8].getName());    _operationClient.getOptions().setAction("urn:queryAssociatedPortsForProcessor");    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);    addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");    _messageContext=new org.apache.axis2.context.MessageContext();    org.apache.axiom.soap.SOAPEnvelope env=null;    env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),queryAssociatedPortsForProcessor17,optimizeContent(new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/","queryAssociatedPortsForProcessor")));    _serviceClient.addHeadersToEnvelope(env);    _messageContext.setEnvelope(env);    _operationClient.addMessageContext(_messageContext);    _operationClient.execute(true);    org.apache.axis2.context.MessageContext _returnMessageContext=_operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);    org.apache.axiom.soap.SOAPEnvelope _returnEnv=_returnMessageContext.getEnvelope();    java.lang.Object object=fromOM(_returnEnv.getBody().getFirstElement(),com.emc.storageos.vasa.VasaServiceStub.QueryAssociatedPortsForProcessorResponse.class,getEnvelopeNamespaces(_returnEnv));    return (com.emc.storageos.vasa.VasaServiceStub.QueryAssociatedPortsForProcessorResponse)object;  } catch (  org.apache.axis2.AxisFault f) {    org.apache.axiom.om.OMElement faultElt=f.getDetail();    if (faultElt != null) {      if (faultExceptionNameMap.containsKey(faultElt.getQName())) {        try {          java.lang.String exceptionClassName=(java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());          java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);          java.lang.Exception ex=(java.lang.Exception)exceptionClass.newInstance();          java.lang.String messageClassName=(java.lang.String)faultMessageMap.get(faultElt.getQName());          java.lang.Class messageClass=java.lang.Class.forName(messageClassName);          java.lang.Object messageObject=fromOM(faultElt,messageClass,null);          java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});          m.invoke(ex,new java.lang.Object[]{messageObject});          if (ex instanceof com.emc.storageos.vasa.NotImplemented) {            throw (com.emc.storageos.vasa.NotImplemented)ex;          }          if (ex instanceof com.emc.storageos.vasa.InvalidArgument) {            throw (com.emc.storageos.vasa.InvalidArgument)ex;          }          if (ex instanceof com.emc.storageos.vasa.InvalidSession) {            throw (com.emc.storageos.vasa.InvalidSession)ex;          }          if (ex instanceof com.emc.storageos.vasa.StorageFault) {            throw (com.emc.storageos.vasa.StorageFault)ex;          }          throw new java.rmi.RemoteException(ex.getMessage(),ex);        } catch (        java.lang.ClassCastException e) {          throw f;        }catch (        java.lang.ClassNotFoundException e) {          throw f;        }catch (        java.lang.NoSuchMethodException e) {          throw f;        }catch (        java.lang.reflect.InvocationTargetException e) {          throw f;        }catch (        java.lang.IllegalAccessException e) {          throw f;        }catch (        java.lang.InstantiationException e) {          throw f;        }      } else {        throw f;      }    } else {      throw f;    }  } finally {    _messageContext.getTransportOut().getSender().cleanup(_messageContext);  }}  }
class C{  public boolean isSpringDamper(){  return this.frequency > 0.0 && this.dampingRatio > 0.0;}  }
class C{  @Override public boolean equals(Object obj){  if (!(obj instanceof Range)) {    return false;  }  Range range=(Range)obj;  if (!(this.lower == range.lower)) {    return false;  }  if (!(this.upper == range.upper)) {    return false;  }  return true;}  }
class C{  public void removeJobFromWorkerState(Message message){  workerState.removeFromNonFinishedJobs(message);}  }
class C{  public boolean isOneClickSupported(){  return oneClickSupported;}  }
class C{  public static PlatformUser findUser(DataService mgr,String userId){  PlatformUser sample=new PlatformUser();  sample.setUserId(userId);  PlatformUser user=(PlatformUser)mgr.find(sample);  return user;}  }
class C{  @Override public void run(){  amIActive=true;  boolean image1Bool=false;  boolean image2Bool=false;  double constant1=0;  double constant2=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String inputHeader1=args[0];  File file=new File(inputHeader1);  image1Bool=file.exists();  if (image1Bool) {    constant1=-1;  } else {    constant1=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String inputHeader2=args[1];  file=new File(inputHeader2);  image2Bool=file.exists();  if (image2Bool) {    constant2=-1;  } else {    constant2=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    if (image1Bool && image2Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData1=inputFile1.getNoDataValue();      double noData2=inputFile2.getNoDataValue();      if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {        showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");        return;      }      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData1);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          z2=data2[col];          if ((z1 != noData1) && (z2 != noData2)) {            if (z1 <= z2) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          } else {            outputFile.setValue(row,col,noData1);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      inputFile2.close();      outputFile.close();    } else     if (image1Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData=inputFile1.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          if (z1 != noData) {            if (z1 <= constant2) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      outputFile.close();    } else     if (image2Bool) {      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile2.getNumberRows();      int cols=inputFile2.getNumberColumns();      double noData=inputFile2.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader2,WhiteboxRaster.DataType.INTEGER,noData);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row <= rows; row++) {        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z2=data2[col];          if (z2 != noData) {            if (z2 < constant1) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile2.close();      outputFile.close();    } else {      showFeedback("At least one of the inputs must be a raster image.");    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static void i(String tag,String msg,Throwable tr){  println(INFO,tag,msg,tr);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:43.690 -0500",hash_original_method="8A0C770C89ACE123AD07688E6EE32DB8",hash_generated_method="4ADF04B04F03EC8375470461FE2518DE") private void readStatusLocked(){  if (DEBUG_FILE)   Log.v(TAG,"Reading " + mStatusFile.getBaseFile());  try {    byte[] data=mStatusFile.readFully();    Parcel in=Parcel.obtain();    in.unmarshall(data,0,data.length);    in.setDataPosition(0);    int token;    while ((token=in.readInt()) != STATUS_FILE_END) {      if (token == STATUS_FILE_ITEM) {        SyncStatusInfo status=new SyncStatusInfo(in);        if (mAuthorities.indexOfKey(status.authorityId) >= 0) {          status.pending=false;          if (DEBUG_FILE)           Log.v(TAG,"Adding status for id " + status.authorityId);          mSyncStatus.put(status.authorityId,status);        }      } else {        Log.w(TAG,"Unknown status token: " + token);        break;      }    }  } catch (  java.io.IOException e) {    Log.i(TAG,"No initial status");  }}  }
class C{  public Vector3d mulTransposePosition(Matrix4dc mat){  return mulTransposePosition(mat,this);}  }
class C{  public static org.oscm.internal.vo.VODiscount convertToUp(org.oscm.vo.VODiscount oldVO){  if (oldVO == null) {    return null;  }  org.oscm.internal.vo.VODiscount newVO=new org.oscm.internal.vo.VODiscount();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setEndTime(oldVO.getEndTime());  newVO.setStartTime(oldVO.getStartTime());  newVO.setValue(oldVO.getValue());  return newVO;}  }
class C{  public HighlightBuilder postTags(String... postTags){  this.postTags=postTags;  return this;}  }
class C{  public Labeling(String modelDir,TaggingData dataTagger,DataReader dataReader,DataWriter dataWriter){  init(modelDir);  this.dataTagger=dataTagger;  this.dataWriter=dataWriter;  this.dataReader=dataReader;}  }
class C{  public boolean doAction(OMGraphic graphic,OMAction action){  OMGraphicList list=getList();  if (list != null) {    list.doAction(graphic,action);  }  return true;}  }
class C{  public void execute(String javaScript){  Display.impl.browserExecute(internal,javaScript);}  }
class C{  protected KMLAbstractColorStyle(String namespaceURI){  super(namespaceURI);}  }
class C{  public static void matchModifiedStoragePoolsWithAllVpool(List<StoragePool> systemModifiedPools,DbClient dbClient,CoordinatorClient coordinator,URI systemId,StringBuffer errorMessage) throws DeviceControllerException {  if (null == systemModifiedPools || systemModifiedPools.isEmpty()) {    _logger.info("No StoragePools found to run implicit pool matching for systemId: {}",systemId);    return;  }  _logger.info("matchModifiedStoragePoolsWithAllVirtualPool for system {}",systemId);  ControllerServiceImpl.Lock lock=ControllerServiceImpl.Lock.getLock(Constants.POOL_MATCHER);  try {    lock.acquire();    _logger.info("Acquired lock to update vpool-pool relation for system {}",systemId);    matchModifiedStoragePoolsWithAllVirtualPool(systemModifiedPools,dbClient,coordinator,errorMessage);  } catch (  Exception e) {    _logger.error("Failed to match pools",e);    throw new DeviceControllerException(e,"Failed to match pools. Caused by : {0}",new Object[]{e.getMessage()});  } finally {    try {      lock.release();    } catch (    Exception e) {      _logger.error("Failed to release  Lock while matching pools {} -->{}",lock.toString(),e.getMessage());    }  }}  }
class C{  public static String generateAuthorizationHeader(Map<String,String> digestChallenge,String username,String password){  String nonce=digestChallenge.get("nonce");  String nc="00000001";  String cnonce=generateCnonce(nonce,nc);  String qop="auth";  String uri="/RPC2";  String realm=digestChallenge.get("realm");  String opaque=digestChallenge.get("opaque");  String requestDigest=calculateMD5RequestDigest(uri,username,password,realm,nonce,nc,cnonce,qop);  Map<String,String> digestResponseMap=new HashMap<String,String>();  digestResponseMap.put("algorithm","MD5");  digestResponseMap.put("username",quoteParam(username));  digestResponseMap.put("realm",quoteParam(realm));  digestResponseMap.put("nonce",quoteParam(nonce));  digestResponseMap.put("uri",quoteParam(uri));  digestResponseMap.put("qop",qop);  digestResponseMap.put("nc",nc);  digestResponseMap.put("cnonce",quoteParam(cnonce));  digestResponseMap.put("response",quoteParam(requestDigest));  digestResponseMap.put("opaque",quoteParam(opaque));  return serializeDigestResponse(digestResponseMap);}  }
class C{  public HypervolumeFitnessEvaluator(Problem problem){  super(problem);}  }
class C{  private boolean zzRefill() throws java.io.IOException {  if (zzStartRead > 0) {    System.arraycopy(zzBuffer,zzStartRead,zzBuffer,0,zzEndRead - zzStartRead);    zzEndRead-=zzStartRead;    zzCurrentPos-=zzStartRead;    zzMarkedPos-=zzStartRead;    zzStartRead=0;  }  if (zzCurrentPos >= zzBuffer.length) {    char newBuffer[]=new char[zzCurrentPos * 2];    System.arraycopy(zzBuffer,0,newBuffer,0,zzBuffer.length);    zzBuffer=newBuffer;  }  int numRead=zzReader.read(zzBuffer,zzEndRead,zzBuffer.length - zzEndRead);  if (numRead > 0) {    zzEndRead+=numRead;    return false;  }  if (numRead == 0) {    int c=zzReader.read();    if (c == -1) {      return true;    } else {      zzBuffer[zzEndRead++]=(char)c;      return false;    }  }  return true;}  }
class C{  @Override public void fatalError(SAXParseException exception) throws SAXException {  try {    this.reportFatalError(exception);  } catch (  RDFParseException rdfpe) {    throw new SAXException(rdfpe);  }}  }
class C{  public boolean isActive(){  return active;}  }
class C{  public String generateResourceCitation(@NotNull BigDecimal version,@NotNull URI homepage){  StringBuilder sb=new StringBuilder();  List<String> verifiedAuthorList=Lists.newArrayList();  for (  Agent creator : getEml().getCreators()) {    String authorName=getAuthorName(creator);    if (authorName != null) {      verifiedAuthorList.add(authorName);    }  }  Iterator<String> iter=verifiedAuthorList.iterator();  while (iter.hasNext()) {    sb.append(iter.next());    if (iter.hasNext()) {      sb.append(", ");    }  }  int publicationYear=getPublicationYear(getEml().getDateStamp());  if (publicationYear > 0) {    sb.append(" (");    sb.append(publicationYear);    sb.append("): ");  }  sb.append((StringUtils.trimToNull(getTitle()) == null) ? getShortname() : StringUtils.trim(getTitle()));  sb.append(". ");  sb.append("v");  sb.append(version.toPlainString());  sb.append(". ");  String publisher=(getOrganisation() == null) ? null : StringUtils.trimToNull(getOrganisation().getName());  if (publisher != null) {    sb.append(publisher);    sb.append(". ");  }  sb.append("Dataset");  if (getCoreType() != null) {    sb.append("/");    sb.append(StringUtils.capitalize(getCoreType().toLowerCase()));  }  sb.append(". ");  if (getDoi() != null) {    sb.append(getDoi().getUrl());  } else   if (getEml().getCitation() != null && !Strings.isNullOrEmpty(getEml().getCitation().getIdentifier())) {    sb.append(getEml().getCitation().getIdentifier());  } else {    sb.append(homepage.toString());  }  return sb.toString();}  }
class C{  @Override public List<MatchResult> find(String str,int maxResults){  Value val=ValueFactory.create(str);  if (val instanceof RelationalVal) {    return getMatches((RelationalVal)val);  }  return Collections.emptyList();}  }
class C{  @Override public synchronized void put(String key,Entry entry){  pruneIfNeeded(entry.data.length);  File file=getFileForKey(key);  try {    FileOutputStream fos=new FileOutputStream(file);    CacheHeader e=new CacheHeader(key,entry);    e.writeHeader(fos);    fos.write(entry.data);    fos.close();    putEntry(key,e);    return;  } catch (  IOException e) {  }  boolean deleted=file.delete();  if (!deleted) {    VolleyLog.d("Could not clean up file %s",file.getAbsolutePath());  }}  }
class C{  private static void executeInDummyMode(String mode,ExecutorService executor) throws Exception {  if ("server".equalsIgnoreCase(mode)) {    RpcTcpListener listener=new RpcTcpListener(9001,executor);    listener.startListening(new DummyMessageHandler());    System.in.read();  } else {    RpcClient client=new RpcTcpClientFactory(executor).createRpcClient("tcp://localhost:9001");    int batchSize=1000;    List<Pair<RaftRequestMessage,CompletableFuture<RaftResponseMessage>>> list=new LinkedList<Pair<RaftRequestMessage,CompletableFuture<RaftResponseMessage>>>();    BufferedReader reader=new BufferedReader(new InputStreamReader(System.in));    System.out.print("ready to start?");    reader.readLine();    while (true) {      for (int i=0; i < batchSize; ++i) {        RaftRequestMessage request=randomRequest();        request.setSource(i);        CompletableFuture<RaftResponseMessage> response=client.send(request);        list.add(new Pair<RaftRequestMessage,CompletableFuture<RaftResponseMessage>>(request,response));      }      for (int i=0; i < batchSize; ++i) {        System.out.printf("Waiting for response %d\n",i);        Pair<RaftRequestMessage,CompletableFuture<RaftResponseMessage>> item=list.get(i);        RaftRequestMessage request=item.item1;        RaftResponseMessage response=item.item2.get();        System.out.println(String.format("Response %d: Accepted: %s, Src: %d, Dest: %d, MT: %s, NI: %d, T: %d",i,String.valueOf(response.isAccepted()),response.getSource(),response.getDestination(),response.getMessageType(),response.getNextIndex(),response.getTerm()));        if (request.getTerm() != response.getTerm()) {          System.out.printf("fatal: request and response are mismatched, %d v.s. %d @ %s!\n",request.getTerm(),response.getTerm(),item.item2.toString());          reader.readLine();          return;        }      }      System.out.print("Continue?");      String answer=reader.readLine();      if (!"yes".equalsIgnoreCase(answer)) {        break;      }      list.clear();    }  }}  }
class C{  public LTRNetDecoder(DecodeConfigLTRNet config,AliasList aliasList){  mLTRFSKDecoder=new LTRFSKDecoder();  if (config.getMessageDirection() == MessageDirection.OSW) {    mLTRMessageFramer=new MessageFramer(SyncPattern.LTR_STANDARD_OSW.getPattern(),LTR_STANDARD_MESSAGE_LENGTH);  } else {    mLTRMessageFramer=new MessageFramer(SyncPattern.LTR_STANDARD_ISW.getPattern(),LTR_STANDARD_MESSAGE_LENGTH);  }  mLTRFSKDecoder.addListener(mLTRMessageFramer);  mLTRMessageProcessor=new LTRNetMessageProcessor(config.getMessageDirection(),aliasList);  mLTRMessageFramer.addMessageListener(mLTRMessageProcessor);  mLTRMessageProcessor.setMessageListener(this);}  }
class C{  public void init(Certificate cert){  try {    if (signature != null) {      signature.initVerify(cert);    } else     if (cipher != null) {      cipher.init(Cipher.DECRYPT_MODE,cert);    }  } catch (  InvalidKeyException e) {    throw new AlertException(AlertProtocol.BAD_CERTIFICATE,new SSLException("init - invalid certificate",e));  }}  }
class C{  public FilterExprIterator(Expression expr){  super(null);  m_expr=expr;}  }
class C{  public static InputStream post(URL url,String name1,Object value1,String name2,Object value2,String name3,Object value3,String name4,Object value4) throws IOException {  return new ClientHttpRequest(url).post(name1,value1,name2,value2,name3,value3,name4,value4);}  }
class C{  public boolean isAccessible(){  return accessible;}  }
class C{  @Override final public boolean isFullyBuffered(){  if (!isOpen())   throw new IllegalStateException();  return false;}  }
class C{  public final void yyreset(java.io.Reader reader) throws java.io.IOException {  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtEOF=false;}  }
class C{  @Override public void onSkipPressed(){  goToMainActivity();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.TYPE__ANNOTATIONS:    return getAnnotations();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void removeChannel(YouTubeChannel channel){  removeChannel(channel.getId());}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case GamlPackage.SDISPLAY__NAME:    return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);}return super.eIsSet(featureID);}  }
class C{  private boolean isMultipleSelectNode(Node node){  boolean multipSelect=false;  NamedNodeMap attributes=node.getAttributes();  if (attributes != null) {    Node multipleValue=attributes.getNamedItem(XformBuilder.ATTRIBUTE_MULTIPLE);    if (attributes.getNamedItem(XformBuilder.ATTRIBUTE_OPENMRS_CONCEPT) != null && multipleValue != null && multipleValue.getNodeValue().equals("1"))     multipSelect=true;  }  return multipSelect;}  }
class C{  private void initializeGraphAsChain(){  parentMatrix=new int[getNumNodes()][getMaxDegree() + 2];  childMatrix=new int[getNumNodes()][getMaxDegree() + 2];  for (int i=0; i < getNumNodes(); i++) {    for (int j=1; j < getMaxDegree() + 1; j++) {      parentMatrix[i][j]=-5;      childMatrix[i][j]=-5;    }  }  parentMatrix[0][0]=1;  childMatrix[0][0]=2;  childMatrix[0][1]=1;  parentMatrix[getNumNodes() - 1][0]=2;  parentMatrix[getNumNodes() - 1][1]=getNumNodes() - 2;  childMatrix[getNumNodes() - 1][0]=1;  for (int i=1; i < (getNumNodes() - 1); i++) {    parentMatrix[i][0]=2;    parentMatrix[i][1]=i - 1;    childMatrix[i][0]=2;    childMatrix[i][1]=i + 1;  }}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  public SqlTimeConverter(final Object defaultValue){  super(defaultValue);}  }
class C{  public boolean isFtsInContents(){  return ftsInContents;}  }
class C{  @Override public boolean equals(Object o){  if (o instanceof PircBot) {    PircBot other=(PircBot)o;    return other == this;  }  return false;}  }
class C{  private static double m(double i){  if (i == 0)   return 0; else   return i / (2 * i + 1) + m(i - 1);}  }
class C{  public synchronized void checkOut(ISchedulingRule rule){  decrementPreparedOperations();  rebalanceNestedOperations();  if (preparedOperations == 0)   hasBuildChanges=false;  operationCanceled=false;  try {    lock.release();  }  finally {    jobManager.endRule(rule);  }}  }
class C{  public HexTable(HexEditor hexEditor,HexTableModel model){  super(model);  this.hexEditor=hexEditor;  this.model=model;  enableEvents(AWTEvent.KEY_EVENT_MASK);  setAutoResizeMode(JTable.AUTO_RESIZE_OFF);  setFont(new Font("Monospaced",Font.PLAIN,14));  setCellSelectionEnabled(true);  setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);  setDefaultEditor(Object.class,cellEditor);  setDefaultRenderer(Object.class,new CellRenderer());  getTableHeader().setReorderingAllowed(false);  setShowGrid(false);  FontMetrics fm=getFontMetrics(getFont());  Font headerFont=UIManager.getFont("TableHeader.font");  FontMetrics headerFM=hexEditor.getFontMetrics(headerFont);  int w=fm.stringWidth("wwww");  w=Math.max(w,headerFM.stringWidth("+999"));  for (int i=0; i < getColumnCount(); i++) {    TableColumn column=getColumnModel().getColumn(i);    if (i < 16) {      column.setPreferredWidth(w);    } else {      column.setPreferredWidth(HexEditor.DUMP_COLUMN_WIDTH);    }  }  setPreferredScrollableViewportSize(new Dimension(w * 16 + HexEditor.DUMP_COLUMN_WIDTH,25 * getRowHeight()));  anchorSelectionIndex=leadSelectionIndex=0;}  }
class C{  public void savePoisFromAssets(){  List<Poi> pois=poiAssetLoader.loadPoisFromAssets();  Timber.d("Loaded %s poi, trying to insert them",pois.size());  for (  Poi poi : pois) {    Timber.d("saving poi %s",poi);    savePoi(poi);    Timber.d("poi saved");  }}  }
class C{  public static byte[] decode(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decode(bytes,0,bytes.length);}  }
class C{  public static double[] nextPointNear(Rectangle rectangle){  if (rectangle.crossesDateline()) {    if (random().nextBoolean()) {      return nextPointNear(new Rectangle(rectangle.minLat,rectangle.maxLat,-180,rectangle.maxLon));    } else {      return nextPointNear(new Rectangle(rectangle.minLat,rectangle.maxLat,rectangle.minLon,180));    }  } else {    return nextPointNear(boxPolygon(rectangle));  }}  }
class C{  public String buildSentence(){  String sentence="There was a problem assembling the sentence!";  sentence=String.format("%s %s %s %s %s.",subjectService.getWord().getString(),verbService.getWord().getString(),articleService.getWord().getString(),adjectiveService.getWord().getString(),nounService.getWord().getString());  return sentence;}  }
class C{  public void removeShutdownLatch(final CountDownLatch latch,final boolean doNotRelease){synchronized (this) {    if (!doNotRelease) {      releaseLatch(latch);    }    m_latchesToCloseOnShutdown.remove(latch);  }}  }
class C{  @SideEffectFree @Override public Collection<V> values(){  return super.values();}  }
class C{  public PoBox(){  super(KEY);}  }
class C{  private final int yToLine(int y){  int line=-1;  int h=textArea.getVisibleRect().height;  if (y < h) {    float at=y / (float)h;    line=(int)(textArea.getLineCount() * at);  }  return line;}  }
class C{  @Dev public SayTimeRemainingUntilTimeReachedAction(final String questname,@Dev(defaultValue="1") final int index,final String message){  this.questname=checkNotNull(questname);  this.index=index;  this.message=checkNotNull(message);}  }
class C{  public static int[] transformIntArray(Integer[] source){  int[] destin=new int[source.length];  for (int i=0; i < source.length; i++) {    destin[i]=source[i];  }  return destin;}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.common_ui);  CardboardView cardboardView=(CardboardView)findViewById(R.id.cardboard_view);  cardboardView.setRestoreGLStateEnabled(false);  cardboardView.setRenderer(this);  setCardboardView(cardboardView);  modelCube=new float[16];  camera=new float[16];  view=new float[16];  modelViewProjection=new float[16];  modelView=new float[16];  modelFloor=new float[16];  modelPosition=new float[]{0.0f,0.0f,-MAX_MODEL_DISTANCE / 2.0f};  headRotation=new float[4];  headView=new float[16];  vibrator=(Vibrator)getSystemService(Context.VIBRATOR_SERVICE);  overlayView=(CardboardOverlayView)findViewById(R.id.overlay);}  }
class C{  @VisibleForTesting void invokeSubscriberMethod(Object event) throws InvocationTargetException {  try {    method.invoke(target,checkNotNull(event));  } catch (  IllegalArgumentException e) {    throw new Error("Method rejected target/argument: " + event,e);  }catch (  IllegalAccessException e) {    throw new Error("Method became inaccessible: " + event,e);  }catch (  InvocationTargetException e) {    if (e.getCause() instanceof Error) {      throw (Error)e.getCause();    }    throw e;  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:35.411 -0500",hash_original_method="9897CCA73BB03B431F373D7FDD204A5D",hash_generated_method="B6A5DB70FCF05F1392F8A6D133E6F6D8") public void logp(Level logLevel,String sourceClass,String sourceMethod,String msg){  if (!internalIsLoggable(logLevel)) {    return;  }  LogRecord record=new LogRecord(logLevel,msg);  record.setLoggerName(this.name);  record.setSourceClassName(sourceClass);  record.setSourceMethodName(sourceMethod);  setResourceBundle(record);  log(record);}  }
class C{  private static Type decodeBuf(byte[] buf){  if (buf[0] == GZIP_MAGIC1 && buf[1] == GZIP_MAGIC2) {    return RCompression.Type.GZIP;  } else   if (buf[0] == 'B' && buf[1] == 'Z' && buf[2] == 'h') {    return RCompression.Type.BZIP2;  } else   if (buf[0] == (byte)0xFD && buf[1] == '7' && buf[2] == 'z' && buf[3] == 'X' && buf[4] == 'Z') {    return RCompression.Type.LZMA;  } else {    return RCompression.Type.NONE;  }}  }
class C{  public void addExceptionMessage(ExceptionMessage userFriendlyMessage,NestingException nestingException){  m_exceptionMessages.addElement(userFriendlyMessage);  assimilateContext(nestingException);}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writeShape(this.legendLine,stream);}  }
class C{  private void dropTable(String table){  db.execSQL("Drop TABLE " + table);}  }
class C{  public void stopCarousel(){  this.autoPlay=false;}  }
class C{  public void putAll(LongOsmElementMap<V> map){  ensureCapacity(m_data.length + map.size());  for (  V e : map) {    put(e.getOsmId(),e);  }}  }
class C{  public static String resource(String path,Class clazz) throws IOException {  BufferedReader resource=new BufferedReader(new InputStreamReader(clazz.getResourceAsStream(path)));  StringBuilder sb=new StringBuilder();  for (String s=resource.readLine(); s != null; s=resource.readLine()) {    sb.append(s);  }  return sb.toString();}  }
class C{  public TreeIndexHeader(int pageSize,int dirCapacity,int leafCapacity,int dirMinimum,int leafMinimum){  super(pageSize);  this.dirCapacity=dirCapacity;  this.leafCapacity=leafCapacity;  this.dirMinimum=dirMinimum;  this.leafMinimum=leafMinimum;}  }
class C{  public RequestTooLargeException(String message,Response response){  super(HttpStatus.REQUEST_TOO_LONG,message,response);}  }
class C{  private int calculateCurrentPositionFromCurrentSeconds(int mCurrentSeconds){  return mWidth * mCurrentSeconds / mMaxSeconds;}  }
class C{  public void removeDataChangeListener(DataChangedListener d){  listeners.removeListener(d);}  }
class C{  public static void ensureSPINRDFExists(Model model){  for (  Resource instance : model.listSubjectsWithProperty(SP.text).toList()) {    if (!hasSPINRDF(instance)) {      String text=instance.getProperty(SP.text).getString();      Model baseModel=JenaUtil.createMemoryModel();      MultiUnion unionGraph=new MultiUnion(new Graph[]{baseModel.getGraph(),model.getGraph()});      unionGraph.setBaseGraph(baseModel.getGraph());      baseModel.getGraph().getPrefixMapping().setNsPrefixes(model);      Model tempModel=ModelFactory.createModelForGraph(unionGraph);      Command tempCommand;      if (SPINFactory.asCommand(instance) instanceof Update) {        tempCommand=ARQ2SPIN.parseUpdate(text,tempModel);      } else {        tempCommand=ARQ2SPIN.parseQuery(text,tempModel);      }      tempCommand.removeAll(RDF.type);      for (      Statement s : baseModel.listStatements().toList()) {        if (s.getSubject().equals(tempCommand)) {          instance.addProperty(s.getPredicate(),s.getObject());        } else {          instance.getModel().add(s);        }      }    }  }}  }
class C{  public void start(long startMs,float initialRadius,float targetRadius){  if (mFocusState != FocusState.STATE_INACTIVE) {    Log.w(TAG,"start() called while the ring was still focusing!");  }  mRingRadius.stop();  mRingRadius.setValue(initialRadius);  mRingRadius.setTarget(targetRadius);  mEnterStartMillis=startMs;  mFocusState=FocusState.STATE_ENTER;  mInvalidator.invalidate();}  }
class C{  public void close() throws IOException {  mSocket.close();}  }
class C{  public AfterLayout layout(){  if (!mGuessListViewHeight) {    layoutInternal();  } else {    layoutWithHeightDetection();  }  dispatchPreDraw(mView);  return new AfterLayout();}  }
class C{  public static String prefix(String string,String prefix){  if (string.startsWith(prefix) == false) {    string=prefix + string;  }  return string;}  }
class C{  public boolean isStaticPolyfillModule(){  return staticPolyfillModule;}  }
class C{  public void removeExpired(){}  }
class C{  public JSONObject put(String key,int value) throws JSONException {  this.put(key,new Integer(value));  return this;}  }
class C{  public String toHtmlString(){  StringBuffer buf=new StringBuffer();  buf.append(jquery_header());  buf.append("<div class=grid>");  buf.append("<div class=col1>");  buf.append("<h1> SpecDump </h1>");  buf.append("<div style='padding-left:0px'>");  buf.append("<h4>whitelist</h4>\n");  for (  Method m : whitelist) {    buf.append(m.toString() + "<br>");  }  List<Method> entry_points=new ArrayList<Method>(eventBlocks.keySet());  Collections.sort(entry_points);  TreeSet<String> all_banned_methods=new TreeSet<String>();  for (  Method ie : entry_points) {    buf.append(html_entry_point(ie));    buf.append("<div style='padding-left:15px'>\n");    List<Method> outm=new ArrayList<Method>(eventBlocks.get(ie));    Collections.sort(outm);    List<String> banned_methods=new ArrayList<String>();    Set<String> all_descrs=new LinkedHashSet<String>();    for (    Method oe : outm) {      all_descrs.addAll(api_descriptors(oe));    }    List<String> all_descrs_sorted=new ArrayList<String>();    all_descrs_sorted.addAll(all_descrs);    Collections.sort(all_descrs_sorted);    for (    String descr : all_descrs_sorted) {      String mstr="";      int danger=-100;      int dcnt=0;      for (      Method oe : outm) {        if (api_descriptors(oe).contains(descr)) {          dcnt++;          mstr+=html_api_call(oe,ie);          int d=api_danger(oe);          if (d > danger)           danger=d;        }      }      String style="";      if (danger > 0)       style="color:red"; else       if (danger < 0)       style="color:green";      descr=String.format("<span style='%s'>%s</span>",style,descr);      String cnt=String.format(" (<span class=count>%d</span>)",dcnt);      buf.append("<h4> Descriptor " + descr + cnt+ "</h4>\n");      buf.append("<div style='padding-left:15px'>\n");      buf.append(mstr);      buf.append("</div>\n");    }    Collections.sort(banned_methods);    buf.append("\n</div>\n");  }  buf.append("\n<p>" + all_banned_methods.size() + " banned methods<p>\n");  for (  String m : all_banned_methods)   buf.append(m + "<br>\n");  buf.append("</div>" + "</div>\n" + "<div class=col2 id=content>\n"+ "<iframe name=iframe_content height=195px width=100%>\n"+ "</iframe>\n"+ "</div>\n"+ "</div>\n");  return buf.toString();}  }
class C{  public void removeAllListeners(){  clientgui.getClient().getGame().removeGameListener(this);  clientgui.getBoardView().removeBoardViewListener(this);}  }
class C{  private void createInitialState(){  long[] precalc=(long[])INITIAL_STATES.get(variantIdentifier(getBlockSize(),getOutputSize()));  if ((key == null) && (precalc != null)) {    chain=Arrays.clone(precalc);  } else {    chain=new long[getBlockSize() / 8];    if (key != null) {      ubiComplete(SkeinParameters.PARAM_TYPE_KEY,key);    }    ubiComplete(PARAM_TYPE_CONFIG,new Configuration(outputSizeBytes * 8).getBytes());  }  if (preMessageParameters != null) {    for (int i=0; i < preMessageParameters.length; i++) {      Parameter param=preMessageParameters[i];      ubiComplete(param.getType(),param.getValue());    }  }  initialState=Arrays.clone(chain);}  }
class C{  protected Selectable selectElements(BaseElementSelector elementSelector){  ListIterator<Element> elementIterator=getElements().listIterator();  if (!elementSelector.hasAttribute()) {    List<Element> resultElements=new ArrayList<Element>();    while (elementIterator.hasNext()) {      Element element=checkElementAndConvert(elementIterator);      List<Element> selectElements=elementSelector.selectElements(element);      resultElements.addAll(selectElements);    }    return new HtmlNode(resultElements);  } else {    List<String> resultStrings=new ArrayList<String>();    while (elementIterator.hasNext()) {      Element element=checkElementAndConvert(elementIterator);      List<String> selectList=elementSelector.selectList(element);      resultStrings.addAll(selectList);    }    return new PlainText(resultStrings);  }}  }
class C{  public IntCharSet copy(){  IntCharSet result=new IntCharSet();  int size=intervalls.size();  for (int i=0; i < size; i++) {    Interval iv=((Interval)intervalls.elementAt(i)).copy();    result.intervalls.addElement(iv);  }  return result;}  }
class C{  public static void makePlaylistMenu(final Context context,final int groupId,final SubMenu subMenu,final boolean showFavorites){  if (context == null) {    LOG.warn("context was null, not making playlist menu");    return;  }  subMenu.clearHeader();  if (showFavorites) {    subMenu.add(groupId,FragmentMenuItems.ADD_TO_FAVORITES,Menu.NONE,R.string.add_to_favorites);  }  subMenu.add(groupId,FragmentMenuItems.NEW_PLAYLIST,Menu.NONE,R.string.new_empty_playlist);  Cursor cursor=PlaylistLoader.makePlaylistCursor(context);  if (cursor != null && cursor.getCount() > 0 && cursor.moveToFirst()) {    while (!cursor.isAfterLast()) {      final Intent intent=new Intent();      String name=cursor.getString(1);      if (name != null) {        intent.putExtra("playlist",getIdForPlaylist(context,name));        subMenu.add(groupId,FragmentMenuItems.PLAYLIST_SELECTED,Menu.NONE,name).setIntent(intent);      }      cursor.moveToNext();    }  }  if (cursor != null) {    cursor.close();  }}  }
class C{  public void remove(TrayIcon trayIcon){  if (trayIcon == null) {    return;  }  TrayIcon[] oldArray=null, newArray=null;synchronized (this) {    oldArray=systemTray.getTrayIcons();    Vector<TrayIcon> icons=(Vector<TrayIcon>)AppContext.getAppContext().get(TrayIcon.class);    if (icons == null || !icons.remove(trayIcon)) {      return;    }    trayIcon.removeNotify();    newArray=systemTray.getTrayIcons();  }  firePropertyChange("trayIcons",oldArray,newArray);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void add(int index,Role role) throws IllegalArgumentException, IndexOutOfBoundsException {  if (role == null) {    String excMsg="Invalid parameter";    throw new IllegalArgumentException(excMsg);  }  super.add(index,role);}  }
class C{  protected boolean isTerrain(Spatial s){  if (s == null) {    return false;  }  if (s instanceof Terrain) {    return true;  }  if (s.getParent() != null) {    return isTerrain(s.getParent());  }  return false;}  }
class C{  public void score(int s){  score=s;}  }
class C{  static String normalizeV(String str,boolean toXml) throws IOException {  String value=trim(str);  if (value.startsWith("\"")) {    StringBuilder sb=new StringBuilder();    StringReader sr=new StringReader(value.substring(1,value.length() - 1));    int i=0;    char c;    while ((i=sr.read()) > -1) {      c=(char)i;      if ((c == ',') || (c == '=') || (c == '+')|| (c == '<')|| (c == '>')|| (c == '#')|| (c == ';')) {        sb.append('\\');      }      sb.append(c);    }    value=trim(sb.toString());  }  if (toXml) {    if (value.startsWith("#")) {      value='\\' + value;    }  } else {    if (value.startsWith("\\#")) {      value=value.substring(1);    }  }  return value;}  }
class C{  @SuppressWarnings("rawtypes") public static IConstraint wrap(final BooleanValueExpression ve){  return new Constraint(ve);}  }
class C{  private void showPopup(){  Popup oldPopup=popup;  if (oldPopup != null) {    oldPopup.hide();  }  PopupFactory popupFactory=PopupFactory.getSharedInstance();  if (isLightWeightPopupEnabled()) {    popupFactory.setPopupType(PopupFactory.LIGHT_WEIGHT_POPUP);  } else {    popupFactory.setPopupType(PopupFactory.HEAVY_WEIGHT_POPUP);  }  Point p=adjustPopupLocationToFitScreen(desiredLocationX,desiredLocationY);  desiredLocationX=p.x;  desiredLocationY=p.y;  Popup newPopup=getUI().getPopup(this,desiredLocationX,desiredLocationY);  popupFactory.setPopupType(PopupFactory.LIGHT_WEIGHT_POPUP);  popup=newPopup;  newPopup.show();}  }
class C{  Scenario loadScenario(){  String currentDir=new File("tmp").getAbsolutePath();  currentDir=currentDir.substring(0,currentDir.length() - 3);  log.info("loading scenario from base directory: " + currentDir);  this.loadNetwork();  this.loadActivityFacilities();  this.loadPopulation();  this.loadHouseholds();  this.loadTransit();  this.loadTransitVehicles();  if (this.config.vehicles().getVehiclesFile() != null) {    this.loadVehicles();  }  if (this.config.network().getLaneDefinitionsFile() != null) {    this.loadLanes();  }  return this.scenario;}  }
class C{  public static Term term(String field,String dim,String... path){  return new Term(field,FacetsConfig.pathToString(dim,path));}  }
class C{  public static void main(String... args) throws SQLException {  new Recover().runTool(args);}  }
class C{  public static int editDistance(List<SingleVariableDeclaration> params,List<SingleVariableDeclaration> peerParams){  ASTMatcher matcher=new ASTMatcher();  int[][] dp=new int[params.size() + 1][peerParams.size() + 1];  for (int i=0; i <= params.size(); i++) {    dp[i][0]=i;  }  for (int j=0; j <= peerParams.size(); j++) {    dp[0][j]=j;  }  for (int i=1; i <= params.size(); i++) {    for (int j=1; j <= peerParams.size(); j++) {      int distance=dp[i - 1][j - 1];      if (!params.get(i - 1).subtreeMatch(matcher,peerParams.get(j - 1))) {        distance+=1;      }      if (dp[i - 1][j] + 1 < distance) {        distance=dp[i - 1][j] + 1;      }      if (dp[i][j - 1] + 1 < distance) {        distance=dp[i][j - 1] + 1;      }      dp[i][j]=distance;    }  }  return dp[params.size()][peerParams.size()];}  }
class C{  public static boolean intersectRaySphere(Vector3d origin,Vector3d dir,Vector3d center,double radiusSquared,Vector2d result){  return intersectRaySphere(origin.x,origin.y,origin.z,dir.x,dir.y,dir.z,center.x,center.y,center.z,radiusSquared,result);}  }
class C{  public BasicLagGraph(LagGraph lagGraph){  this.connectivity=lagGraph.getConnectivity();  this.maxLagAllowable=lagGraph.getMaxLagAllowable();}  }
class C{  private void clearDatabase(){  SQLiteDatabase database=db.getWritableDatabase();  database.execSQL("delete from " + DBHelper.LoyaltyCardDbIds.TABLE);  database.close();  assertEquals(0,db.getLoyaltyCardCount());}  }
class C{  @Override public boolean contains(Point2D.Double p){  Shape triangle=getBezierPath();  double grow=AttributeKeys.getPerpendicularHitGrowth(this);  if (grow != 0d) {    GrowStroke gs=new GrowStroke((float)grow,(float)(AttributeKeys.getStrokeTotalWidth(this) * get(STROKE_MITER_LIMIT)));    triangle=gs.createStrokedShape(triangle);  }  return triangle.contains(p);}  }
class C{  public boolean isReadAheadIdle(int idleReaderErrorThreshold,TimeUnit timeUnit){  return (lastEntryProcessTime.elapsed(timeUnit) > idleReaderErrorThreshold);}  }
class C{  public static boolean initWeb(ServletConfig config){  if (s_initOK) {    log.info(config.getServletName());    return true;  }  Enumeration en=config.getInitParameterNames();  StringBuffer info=new StringBuffer("Servlet Init Parameter: ").append(config.getServletName());  while (en.hasMoreElements()) {    String name=en.nextElement().toString();    String value=config.getInitParameter(name);    System.setProperty(name,value);    info.append("\n").append(name).append("=").append(value);  }  boolean retValue=initWeb(config.getServletContext());  log.info(info.toString());  return retValue;}  }
class C{  protected static void saveTags(final CConnection connection,final List<INaviViewNode> nodes,final int firstNode) throws SQLException {  int counter=firstNode;  final String deleteStatement="DELETE FROM " + CTableNames.TAGGED_NODES_TABLE + " WHERE node_id IN (%s)";  final String insertStatement="INSERT INTO " + CTableNames.TAGGED_NODES_TABLE + " VALUES %s ";  boolean isFirst=true;  final StringBuilder range=new StringBuilder();  for (int i=0; i < nodes.size(); i++) {    if (isFirst) {      range.append(counter);      isFirst=false;      continue;    }    range.append(", ");    range.append(counter);    ++counter;  }  if (range.length() != 0) {    connection.executeUpdate(String.format(deleteStatement,range.toString()),true);  }  counter=firstNode;  final StringBuilder insert=new StringBuilder();  isFirst=true;  for (  final INaviViewNode node : nodes) {    final Iterator<CTag> it=node.getTagsIterator();    while (it.hasNext()) {      final CTag tag=it.next();      insert.append(isFirst ? "" : ",");      insert.append('(');      insert.append(counter);      insert.append(", ");      insert.append(tag.getId());      insert.append(')');      isFirst=false;    }    ++counter;  }  if (insert.length() != 0) {    connection.executeUpdate(String.format(insertStatement,insert.toString()),true);  }}  }
class C{  private void registerCalls(IR ir){  SSADictionary dictionary=ir.HIRInfo.dictionary;  for (Enumeration<BasicBlock> bbe=ir.getBasicBlocks(); bbe.hasMoreElements(); ) {    BasicBlock b=bbe.nextElement();    for (Enumeration<Instruction> e=b.forwardInstrEnumerator(); e.hasMoreElements(); ) {      Instruction s=e.nextElement();      boolean isSynch=(s.operator() == READ_CEILING) || (s.operator() == WRITE_FLOOR) || (s.operator() == FENCE);      if (isSynch || Call.conforms(s) || MonitorOp.conforms(s)|| Prepare.conforms(s)|| Attempt.conforms(s)|| CacheOp.conforms(s)|| s.isDynamicLinkingPoint()) {        dictionary.registerUnknown(s,b);      }    }  }}  }
class C{  public View findViewById(int id){  View v;  if (mSlidingMenu != null) {    v=mSlidingMenu.findViewById(id);    if (v != null)     return v;  }  return null;}  }
class C{  public TimeSeriesCollection(TimeSeries series,TimeZone zone){  if (zone == null) {    zone=TimeZone.getDefault();  }  this.workingCalendar=Calendar.getInstance(zone);  this.data=new ArrayList();  if (series != null) {    this.data.add(series);    series.addChangeListener(this);  }  this.xPosition=TimePeriodAnchor.START;  this.domainIsPointsInTime=true;}  }
class C{  Builder(Swagger swagger){  this.swagger=swagger;  this.swaggerLocation=null;}  }
class C{  public CircleBuilder center(Coordinate center){  this.center=center;  return this;}  }
class C{  public boolean checkIfExists(Object sql){  Cursor cursor=null;  try {    debugSql(sql);    cursor=mDBHelper.getReadableDatabase().rawQuery(sql.toString(),null);    return cursor.moveToFirst();  } catch (  Exception e) {    Log.e(TAG,e.getMessage(),e);  } finally {    if (cursor != null)     cursor.close();  }  return false;}  }
class C{  public void pushMatrix(){  showMethodWarning("pushMatrix");}  }
class C{  public Address minus(Offset offset){  return null;}  }
class C{  @Override public void toBytes(ByteBuf buf){  buf.writeLong(lastUseTime);  buf.writeByte(hand.ordinal());}  }
class C{  public static final JIPList append(final JIPList head,final JIPList tail){  List cell=new List(ConsCell.append((ConsCell)head.getTerm(),(ConsCell)tail.getTerm()));  return new JIPList(cell);}  }
class C{  private static String makeHHString(int i){  String s=Integer.toHexString(i).toUpperCase();  if (s.length() == 1) {    s="0" + s;  }  return s;}  }
class C{  public static void saveStructurePiece(GlowStructurePiece structurePiece,CompoundTag compound){  StructurePieceStore<?> store=classTable.get(structurePiece.getClass());  if (store == null) {    throw new IllegalArgumentException("Unknown structure piece type to save: \"" + structurePiece.getClass() + "\"");  }  compound.putString("id",store.getId());  getBaseStore(store).save(structurePiece,compound);}  }
class C{  private void findAll(QueryKraken query,Object[] args,Result<Iterable<Cursor>> result){  try {    TableKraken table=query.table();    TableKelp tableKelp=table.getTableKelp();    TablePod tablePod=table.getTablePod();    if (query.isStaticNode()) {      RowCursor cursor=tableKelp.cursor();      query.fillKey(cursor,args);      int hash=query.calculateHash(cursor);      if (tablePod.getNode(hash).isSelfCopy() || true) {        query.findAll(result,args);        return;      } else {        result.ok(null);        return;      }    }    query.findAll(result,args);  } catch (  Exception e) {    result.fail(e);  }}  }
class C{  public XMLDocument addElement(XML element){  if (content == null)   content=element; else   content.addElement(element);  return (this);}  }
class C{  public Query like(int docNum) throws IOException {  if (fieldNames == null) {    Collection<String> fields=MultiFields.getIndexedFields(ir);    fieldNames=fields.toArray(new String[fields.size()]);  }  return createQuery(retrieveTerms(docNum));}  }
class C{  public void printArray(String text,byte[][] array){  System.out.println(text);  int counter=0;  for (int i=0; i < array.length; i++) {    for (int j=0; j < array[0].length; j++) {      System.out.println(counter + "; " + array[i][j]);      counter++;    }  }}  }
class C{  public static String extractDigitsFromString(final String input){  return input.replaceAll("\\D","");}  }
class C{  void initCommentMapper(Scanner scanner){  this.commentMapper=new DefaultCommentMapper(this.optionalCommentTable);  this.commentMapper.initialize(this,scanner);}  }
class C{  private VarSymbol makeSyntheticVar(long flags,String name,Type type,Symbol owner){  return makeSyntheticVar(flags,names.fromString(name),type,owner);}  }
class C{  private Thread fullGetFirstQueuedThread(){  Node h, s;  Thread st;  if (((h=head) != null && (s=h.next) != null && s.prev == head && (st=s.thread) != null) || ((h=head) != null && (s=h.next) != null && s.prev == head && (st=s.thread) != null))   return st;  Node t=tail;  Thread firstThread=null;  while (t != null && t != head) {    Thread tt=t.thread;    if (tt != null)     firstThread=tt;    t=t.prev;  }  return firstThread;}  }
class C{  public void flushIfNeeded(long curTime) throws AdeException {  if (m_flushed || curTime < m_lastMessageTime + m_flushTime) {    return;  }  m_processor.incomingSeparator(Ade.getAde().getDataFactory().newTimeSeparator("flush"));  m_flushed=true;}  }
class C{  public int minutes(){  return this.minutes;}  }
class C{  public static BooleanGlassFunction serializableInstance(){  return new BooleanGlassFunction(BasicLagGraph.serializableInstance());}  }
class C{  public Replacer(Map<String,String> replacements){  this.replacementValues=new String[replacements.size()];  StringBuilder sb=new StringBuilder("");  int i=0;  for (  String item : replacements.keySet()) {    try {      Pattern.compile(item);    } catch (    PatternSyntaxException ex) {      throw new IllegalArgumentException("Invalid replacement pattern.",ex);    }    if (sb.length() != 0) {      sb.append("|");    }    sb.append("(").append(item).append(")");    replacementValues[i]=replacements.get(item);    i++;  }  pattern=Pattern.compile(sb.toString());}  }
class C{  public MessagingFraction server(String childKey,EnhancedServerConsumer config){  super.server(null);  return this;}  }
class C{  public void writeLine(byte[] data) throws IOException, IllegalStateException {  LOG.trace("enter HttpConnection.writeLine(byte[])");  write(data);  writeLine();}  }
class C{  public NumberNode(final long value){  this.value=value;}  }
class C{  public static String parseCharset(Map<String,String> headers){  String contentType=headers.get(HTTP.CONTENT_TYPE);  if (contentType != null) {    String[] params=contentType.split(";");    for (int i=1; i < params.length; i++) {      String[] pair=params[i].trim().split("=");      if (pair.length == 2) {        if (pair[0].equals("charset")) {          return pair[1];        }      }    }  }  return HTTP.DEFAULT_CONTENT_CHARSET;}  }
class C{  @Override public CompilerPhase newExecution(IR ir){  return this;}  }
class C{  public String removeKdigits(String num,int k){  if (num.length() == k) {    return "0";  }  Deque<Character> stack=new ArrayDeque<>();  for (int i=0; i < num.length(); i++) {    while (k > 0 && !stack.isEmpty() && stack.peek() > num.charAt(i)) {      stack.pop();      k--;    }    stack.push(num.charAt(i));  }  while (k > 0) {    stack.pop();    k--;  }  StringBuilder sb=new StringBuilder();  while (!stack.isEmpty()) {    sb.append(stack.pop());  }  sb.reverse();  while (sb.length() > 1 && sb.charAt(0) == '0') {    sb.deleteCharAt(0);  }  return sb.toString();}  }
class C{  @Override public void validateExpression(HashMap<String,DataIdentifier> ids,HashMap<String,ConstIdentifier> currConstVars,boolean conditional) throws LanguageException {  for (  Entry<String,Expression> e : getVarParams().entrySet()) {    String s=e.getKey();    Expression inputParamExpr=e.getValue();    if (inputParamExpr instanceof FunctionCallIdentifier) {      raiseValidateError("UDF function call not supported as parameter to built-in function call",false,LanguageErrorCodes.INVALID_PARAMETERS);    }    inputParamExpr.validateExpression(ids,currConstVars,conditional);    if (getVarParam(s).getOutput().getDataType() != DataType.SCALAR && !s.equals(RAND_DATA)) {      raiseValidateError("Non-scalar data types are not supported for data expression.",conditional,LanguageErrorCodes.INVALID_PARAMETERS);    }  }  performConstantPropagationRand(currConstVars);  performConstantPropagationReadWrite(currConstVars);  Expression dataParam1=getVarParam(RAND_DATA);  if (dataParam1 == null && getOpCode().equals(DataOp.MATRIX)) {    raiseValidateError("for matrix, must defined data parameter",conditional,LanguageErrorCodes.INVALID_PARAMETERS);  }  if (dataParam1 != null && dataParam1.getOutput().getDataType() == DataType.SCALAR) {    this.setOpCode(DataOp.RAND);  }switch (this.getOpCode()) {case READ:    if (getVarParam(DATATYPEPARAM) != null && !(getVarParam(DATATYPEPARAM) instanceof StringIdentifier)) {      raiseValidateError("for read statement, parameter " + DATATYPEPARAM + " can only be a string. "+ "Valid values are: "+ Statement.MATRIX_DATA_TYPE+ ", "+ Statement.SCALAR_DATA_TYPE,conditional);    }  String dataTypeString=(getVarParam(DATATYPEPARAM) == null) ? null : getVarParam(DATATYPEPARAM).toString();if (dataTypeString != null && dataTypeString.equalsIgnoreCase(Statement.SCALAR_DATA_TYPE)) {  if (getVarParam(READROWPARAM) != null || getVarParam(READCOLPARAM) != null || getVarParam(ROWBLOCKCOUNTPARAM) != null || getVarParam(COLUMNBLOCKCOUNTPARAM) != null || getVarParam(FORMAT_TYPE) != null || getVarParam(DELIM_DELIMITER) != null || getVarParam(DELIM_HAS_HEADER_ROW) != null || getVarParam(DELIM_FILL) != null || getVarParam(DELIM_FILL_VALUE) != null || getVarParam(DELIM_NA_STRINGS) != null) {    raiseValidateError("Invalid parameters in read statement of a scalar: " + toString() + ". Only "+ VALUETYPEPARAM+ " is allowed.",conditional,LanguageErrorCodes.INVALID_PARAMETERS);  }}JSONObject configObject=null;String inputFileName=getInputFileName(currConstVars,conditional);String mtdFileName=getMTDFileName(inputFileName);boolean shouldReadMTD=_checkMetadata && !ConfigurationManager.getCompilerConfigFlag(ConfigType.IGNORE_READ_WRITE_METADATA);if (shouldReadMTD && !MapReduceTool.existsFileOnHDFS(inputFileName)) {String fsext=InfrastructureAnalyzer.isLocalMode() ? "FS (local mode)" : "HDFS";raiseValidateError("Read input file does not exist on " + fsext + ": "+ inputFileName,conditional,LanguageErrorCodes.INVALID_PARAMETERS);}boolean inferredFormatType=false;String formatTypeString=(getVarParam(FORMAT_TYPE) == null) ? null : getVarParam(FORMAT_TYPE).toString();if (formatTypeString == null && shouldReadMTD) {boolean isMatrixMarketFormat=checkHasMatrixMarketFormat(inputFileName,mtdFileName,conditional);if (isMatrixMarketFormat) {formatTypeString=FORMAT_TYPE_VALUE_MATRIXMARKET;addVarParam(FORMAT_TYPE,new StringIdentifier(FORMAT_TYPE_VALUE_MATRIXMARKET,this.getFilename(),this.getBeginLine(),this.getBeginColumn(),this.getBeginLine(),this.getBeginColumn()));inferredFormatType=true;shouldReadMTD=false;}}if (formatTypeString == null && shouldReadMTD) {boolean isDelimitedFormat=checkHasDelimitedFormat(inputFileName,conditional);if (isDelimitedFormat) {addVarParam(FORMAT_TYPE,new StringIdentifier(FORMAT_TYPE_VALUE_CSV,this.getFilename(),this.getBeginLine(),this.getBeginColumn(),this.getBeginLine(),this.getBeginColumn()));formatTypeString=FORMAT_TYPE_VALUE_CSV;inferredFormatType=true;}}if (formatTypeString != null && formatTypeString.equalsIgnoreCase(FORMAT_TYPE_VALUE_MATRIXMARKET)) {for (String key : _varParams.keySet()) {if (!(key.equals(IO_FILENAME) || key.equals(FORMAT_TYPE))) {raiseValidateError("Invalid parameters in readMM statement: " + toString() + ". Only "+ IO_FILENAME+ " is allowed.",conditional,LanguageErrorCodes.INVALID_PARAMETERS);}}shouldReadMTD=false;String[] headerLines=readMatrixMarketFile(inputFileName,conditional);String legalHeaderMM="%%MatrixMarket matrix coordinate real general";if (headerLines != null && headerLines.length >= 2) {String firstLine=headerLines[0].trim();if (!firstLine.equals(legalHeaderMM)) {raiseValidateError("Unsupported format in MatrixMarket file: " + headerLines[0] + ". Only supported format in MatrixMarket file has header line "+ legalHeaderMM,conditional,LanguageErrorCodes.INVALID_PARAMETERS);}String secondLine=headerLines[1];String[] sizeInfo=secondLine.trim().split("\\s+");if (sizeInfo.length != 3) {raiseValidateError("Unsupported size line in MatrixMarket file: " + headerLines[1] + ". Only supported format in MatrixMarket file has size line: <NUM ROWS> <NUM COLS> <NUM NON-ZEROS>, where each value is an integer.",conditional);}long rowsCount=-1, colsCount=-1, nnzCount=-1;try {rowsCount=Long.parseLong(sizeInfo[0]);if (rowsCount < 1) throw new Exception("invalid rows count");addVarParam(READROWPARAM,new IntIdentifier(rowsCount,this.getFilename(),this.getBeginLine(),this.getBeginColumn(),this.getBeginLine(),this.getBeginColumn()));} catch (Exception e) {raiseValidateError("In MatrixMarket file " + getVarParam(IO_FILENAME) + " invalid row count "+ sizeInfo[0]+ " (must be long value >= 1). Sizing info line from file: "+ headerLines[1],conditional,LanguageErrorCodes.INVALID_PARAMETERS);}try {colsCount=Long.parseLong(sizeInfo[1]);if (colsCount < 1) throw new Exception("invalid cols count");addVarParam(READCOLPARAM,new IntIdentifier(colsCount,this.getFilename(),this.getBeginLine(),this.getBeginColumn(),this.getBeginLine(),this.getBeginColumn()));} catch (Exception e) {raiseValidateError("In MatrixMarket file " + getVarParam(IO_FILENAME) + " invalid column count "+ sizeInfo[1]+ " (must be long value >= 1). Sizing info line from file: "+ headerLines[1],conditional,LanguageErrorCodes.INVALID_PARAMETERS);}try {nnzCount=Long.parseLong(sizeInfo[2]);if (nnzCount < 1) throw new Exception("invalid nnz count");addVarParam("nnz",new IntIdentifier(nnzCount,this.getFilename(),this.getBeginLine(),this.getBeginColumn(),this.getBeginLine(),this.getBeginColumn()));} catch (Exception e) {raiseValidateError("In MatrixMarket file " + getVarParam(IO_FILENAME) + " invalid number non-zeros "+ sizeInfo[2]+ " (must be long value >= 1). Sizing info line from file: "+ headerLines[1],conditional,LanguageErrorCodes.INVALID_PARAMETERS);}}}configObject=null;if (shouldReadMTD) {configObject=readMetadataFile(mtdFileName,conditional);if (configObject != null) {parseMetaDataFileParameters(mtdFileName,configObject,conditional);inferredFormatType=true;} else {LOG.warn("Metadata file: " + new Path(mtdFileName) + " not provided");}}boolean isCSV=false;isCSV=(formatTypeString != null && formatTypeString.equalsIgnoreCase(FORMAT_TYPE_VALUE_CSV));if (isCSV) {shouldReadMTD=true;if (!inferredFormatType) {for (String key : _varParams.keySet()) {if (!(key.equals(IO_FILENAME) || key.equals(FORMAT_TYPE) || key.equals(DELIM_HAS_HEADER_ROW)|| key.equals(DELIM_DELIMITER)|| key.equals(DELIM_FILL)|| key.equals(DELIM_FILL_VALUE)|| key.equals(READROWPARAM)|| key.equals(READCOLPARAM)|| key.equals(READNUMNONZEROPARAM)|| key.equals(DATATYPEPARAM)|| key.equals(VALUETYPEPARAM)|| key.equals(SCHEMAPARAM))) {String msg="Only parameters allowed are: " + IO_FILENAME + ","+ SCHEMAPARAM+ ","+ DELIM_HAS_HEADER_ROW+ ","+ DELIM_DELIMITER+ ","+ DELIM_FILL+ ","+ DELIM_FILL_VALUE+ ","+ READROWPARAM+ ","+ READCOLPARAM;raiseValidateError("Invalid parameter " + key + " in read statement: "+ toString()+ ". "+ msg,conditional,LanguageErrorCodes.INVALID_PARAMETERS);}}}if (getVarParam(DELIM_DELIMITER) == null) {addVarParam(DELIM_DELIMITER,new StringIdentifier(DEFAULT_DELIM_DELIMITER,this.getFilename(),this.getBeginLine(),this.getBeginColumn(),this.getBeginLine(),this.getBeginColumn()));} else {if ((getVarParam(DELIM_DELIMITER) instanceof ConstIdentifier) && (!(getVarParam(DELIM_DELIMITER) instanceof StringIdentifier))) {raiseValidateError("For delimited file '" + getVarParam(DELIM_DELIMITER) + "' must be a string value ",conditional);}}if (getVarParam(DELIM_FILL_VALUE) == null) {addVarParam(DELIM_FILL_VALUE,new DoubleIdentifier(DEFAULT_DELIM_FILL_VALUE,this.getFilename(),this.getBeginLine(),this.getBeginColumn(),this.getBeginLine(),this.getBeginColumn()));} else {if ((getVarParam(DELIM_FILL_VALUE) instanceof ConstIdentifier) && (!(getVarParam(DELIM_FILL_VALUE) instanceof IntIdentifier || getVarParam(DELIM_FILL_VALUE) instanceof DoubleIdentifier))) {raiseValidateError("For delimited file '" + getVarParam(DELIM_FILL_VALUE) + "' must be a numeric value ",conditional);}}if (getVarParam(DELIM_HAS_HEADER_ROW) == null) {addVarParam(DELIM_HAS_HEADER_ROW,new BooleanIdentifier(DEFAULT_DELIM_HAS_HEADER_ROW,this.getFilename(),this.getBeginLine(),this.getBeginColumn(),this.getBeginLine(),this.getBeginColumn()));} else {if ((getVarParam(DELIM_HAS_HEADER_ROW) instanceof ConstIdentifier) && (!(getVarParam(DELIM_HAS_HEADER_ROW) instanceof BooleanIdentifier))) {raiseValidateError("For delimited file '" + getVarParam(DELIM_HAS_HEADER_ROW) + "' must be a boolean value ",conditional);}}if (getVarParam(DELIM_FILL) == null) {addVarParam(DELIM_FILL,new BooleanIdentifier(DEFAULT_DELIM_FILL,this.getFilename(),this.getBeginLine(),this.getBeginColumn(),this.getBeginLine(),this.getBeginColumn()));} else {if ((getVarParam(DELIM_FILL) instanceof ConstIdentifier) && (!(getVarParam(DELIM_FILL) instanceof BooleanIdentifier))) {raiseValidateError("For delimited file '" + getVarParam(DELIM_FILL) + "' must be a boolean value ",conditional);}}}dataTypeString=(getVarParam(DATATYPEPARAM) == null) ? null : getVarParam(DATATYPEPARAM).toString();if (dataTypeString == null || dataTypeString.equalsIgnoreCase(Statement.MATRIX_DATA_TYPE) || dataTypeString.equalsIgnoreCase(Statement.FRAME_DATA_TYPE)) {boolean isMatrix=false;if (dataTypeString == null || dataTypeString.equalsIgnoreCase(Statement.MATRIX_DATA_TYPE)) isMatrix=true;getOutput().setDataType(isMatrix ? DataType.MATRIX : DataType.FRAME);Expression ennz=this.getVarParam("nnz");long nnz=-1;if (ennz != null) {nnz=Long.valueOf(ennz.toString());getOutput().setNnz(nnz);}getOutput().setDimensions(-1,-1);if (!isCSV && ConfigurationManager.getCompilerConfig().getBool(ConfigType.REJECT_READ_WRITE_UNKNOWNS) && (getVarParam(READROWPARAM) == null || getVarParam(READCOLPARAM) == null)) {raiseValidateError("Missing or incomplete dimension information in read statement: " + mtdFileName,conditional,LanguageErrorCodes.INVALID_PARAMETERS);}if (getVarParam(READROWPARAM) instanceof ConstIdentifier && getVarParam(READCOLPARAM) instanceof ConstIdentifier) {Long dim1=(getVarParam(READROWPARAM) == null) ? null : Long.valueOf(getVarParam(READROWPARAM).toString());Long dim2=(getVarParam(READCOLPARAM) == null) ? null : Long.valueOf(getVarParam(READCOLPARAM).toString());if (!isCSV && (dim1 <= 0 || dim2 <= 0) && ConfigurationManager.getCompilerConfig().getBool(ConfigType.REJECT_READ_WRITE_UNKNOWNS)) {raiseValidateError("Invalid dimension information in read statement",conditional,LanguageErrorCodes.INVALID_PARAMETERS);}if (dim1 != null && dim2 != null) {getOutput().setDimensions(dim1,dim2);} else if (!isCSV && ((dim1 != null) || (dim2 != null))) {raiseValidateError("Partial dimension information in read statement",conditional,LanguageErrorCodes.INVALID_PARAMETERS);}}getOutput().setBlockDimensions(-1,-1);int format=1;String fmt=(getVarParam(FORMAT_TYPE) == null ? null : getVarParam(FORMAT_TYPE).toString());if (fmt == null || fmt.equalsIgnoreCase("text")) {getOutput().setFormatType(FormatType.TEXT);format=1;} else if (fmt.equalsIgnoreCase("binary")) {getOutput().setFormatType(FormatType.BINARY);format=2;} else if (fmt.equalsIgnoreCase(FORMAT_TYPE_VALUE_CSV)) {getOutput().setFormatType(FormatType.CSV);format=1;} else if (fmt.equalsIgnoreCase(FORMAT_TYPE_VALUE_MATRIXMARKET)) {getOutput().setFormatType(FormatType.MM);format=1;} else {raiseValidateError("Invalid format '" + fmt + "' in statement: "+ this.toString(),conditional);}if (getVarParam(ROWBLOCKCOUNTPARAM) instanceof ConstIdentifier && getVarParam(COLUMNBLOCKCOUNTPARAM) instanceof ConstIdentifier) {Long rowBlockCount=(getVarParam(ROWBLOCKCOUNTPARAM) == null) ? null : Long.valueOf(getVarParam(ROWBLOCKCOUNTPARAM).toString());Long columnBlockCount=(getVarParam(COLUMNBLOCKCOUNTPARAM) == null) ? null : Long.valueOf(getVarParam(COLUMNBLOCKCOUNTPARAM).toString());if ((rowBlockCount != null) && (columnBlockCount != null)) {getOutput().setBlockDimensions(rowBlockCount,columnBlockCount);} else if ((rowBlockCount != null) || (columnBlockCount != null)) {raiseValidateError("Partial block dimension information in read statement",conditional,LanguageErrorCodes.INVALID_PARAMETERS);} else {getOutput().setBlockDimensions(-1,-1);}}if (((format == 1 || !isMatrix) && (getOutput().getRowsInBlock() != -1 || getOutput().getColumnsInBlock() != -1))) {raiseValidateError("Invalid block dimensions (" + getOutput().getRowsInBlock() + ","+ getOutput().getColumnsInBlock()+ ") when format="+ getVarParam(FORMAT_TYPE)+ " in \""+ this.toString()+ "\".",conditional);}} else if (dataTypeString.equalsIgnoreCase(Statement.SCALAR_DATA_TYPE)) {getOutput().setDataType(DataType.SCALAR);getOutput().setNnz(-1L);} else {raiseValidateError("Unknown Data Type " + dataTypeString + ". Valid  values: "+ Statement.SCALAR_DATA_TYPE+ ", "+ Statement.MATRIX_DATA_TYPE,conditional,LanguageErrorCodes.INVALID_PARAMETERS);}if (getVarParam(VALUETYPEPARAM) != null && !(getVarParam(VALUETYPEPARAM) instanceof StringIdentifier)) {raiseValidateError("for read method, parameter " + VALUETYPEPARAM + " can only be a string. "+ "Valid values are: "+ Statement.DOUBLE_VALUE_TYPE+ ", "+ Statement.INT_VALUE_TYPE+ ", "+ Statement.BOOLEAN_VALUE_TYPE+ ", "+ Statement.STRING_VALUE_TYPE,conditional);}String valueTypeString=getVarParam(VALUETYPEPARAM) == null ? null : getVarParam(VALUETYPEPARAM).toString();if (valueTypeString != null) {if (valueTypeString.equalsIgnoreCase(Statement.DOUBLE_VALUE_TYPE)) {getOutput().setValueType(ValueType.DOUBLE);} else if (valueTypeString.equalsIgnoreCase(Statement.STRING_VALUE_TYPE)) {getOutput().setValueType(ValueType.STRING);} else if (valueTypeString.equalsIgnoreCase(Statement.INT_VALUE_TYPE)) {getOutput().setValueType(ValueType.INT);} else if (valueTypeString.equalsIgnoreCase(Statement.BOOLEAN_VALUE_TYPE)) {getOutput().setValueType(ValueType.BOOLEAN);} else {raiseValidateError("Unknown Value Type " + valueTypeString + ". Valid values are: "+ Statement.DOUBLE_VALUE_TYPE+ ", "+ Statement.INT_VALUE_TYPE+ ", "+ Statement.BOOLEAN_VALUE_TYPE+ ", "+ Statement.STRING_VALUE_TYPE,conditional);}} else {getOutput().setValueType(ValueType.DOUBLE);}break;case WRITE:if (getVarParam(FORMAT_TYPE) == null || getVarParam(FORMAT_TYPE).toString().equalsIgnoreCase(FORMAT_TYPE_VALUE_CSV)) {if (getVarParam(DELIM_DELIMITER) == null) {addVarParam(DELIM_DELIMITER,new StringIdentifier(DEFAULT_DELIM_DELIMITER,this.getFilename(),this.getBeginLine(),this.getBeginColumn(),this.getBeginLine(),this.getBeginColumn()));}if (getVarParam(DELIM_HAS_HEADER_ROW) == null) {addVarParam(DELIM_HAS_HEADER_ROW,new BooleanIdentifier(DEFAULT_DELIM_HAS_HEADER_ROW,this.getFilename(),this.getBeginLine(),this.getBeginColumn(),this.getBeginLine(),this.getBeginColumn()));}if (getVarParam(DELIM_SPARSE) == null) {addVarParam(DELIM_SPARSE,new BooleanIdentifier(DEFAULT_DELIM_SPARSE,this.getFilename(),this.getBeginLine(),this.getBeginColumn(),this.getBeginLine(),this.getBeginColumn()));}}String fnameWrite=getVarParam(IO_FILENAME).toString();if (!LocalFileUtils.validateExternalFilename(fnameWrite,true)) raiseValidateError("Invalid (non-trustworthy) hdfs write filename.",false);if (getVarParam(FORMAT_TYPE) == null || getVarParam(FORMAT_TYPE).toString().equalsIgnoreCase("text")) getOutput().setBlockDimensions(-1,-1); else if (getVarParam(FORMAT_TYPE).toString().equalsIgnoreCase("binary")) getOutput().setBlockDimensions(ConfigurationManager.getBlocksize(),ConfigurationManager.getBlocksize()); else if (getVarParam(FORMAT_TYPE).toString().equalsIgnoreCase(FORMAT_TYPE_VALUE_MATRIXMARKET) || (getVarParam(FORMAT_TYPE).toString().equalsIgnoreCase(FORMAT_TYPE_VALUE_CSV))) getOutput().setBlockDimensions(-1,-1); else {raiseValidateError("Invalid format " + getVarParam(FORMAT_TYPE) + " in statement: "+ this.toString(),conditional);}break;case RAND:Expression dataParam=getVarParam(RAND_DATA);if (dataParam != null) {if (dataParam instanceof DataIdentifier) {addVarParam(RAND_MIN,dataParam);addVarParam(RAND_MAX,dataParam);} else if (dataParam instanceof IntIdentifier) {long roundedValue=((IntIdentifier)dataParam).getValue();Expression minExpr=new DoubleIdentifier(roundedValue,getFilename(),getBeginLine(),getBeginColumn(),getEndLine(),getEndColumn());addVarParam(RAND_MIN,minExpr);addVarParam(RAND_MAX,minExpr);} else if (dataParam instanceof DoubleIdentifier) {double roundedValue=((DoubleIdentifier)dataParam).getValue();Expression minExpr=new DoubleIdentifier(roundedValue,getFilename(),getBeginLine(),getBeginColumn(),getEndLine(),getEndColumn());addVarParam(RAND_MIN,minExpr);addVarParam(RAND_MAX,minExpr);} else if (dataParam instanceof StringIdentifier) {String data=((StringIdentifier)dataParam).getValue();Expression minExpr=new StringIdentifier(data,getFilename(),getBeginLine(),getBeginColumn(),getEndLine(),getEndColumn());addVarParam(RAND_MIN,minExpr);addVarParam(RAND_MAX,minExpr);_strInit=true;} else {dataParam.validateExpression(ids,currConstVars,conditional);addVarParam(RAND_MIN,dataParam);addVarParam(RAND_MAX,dataParam);}removeVarParam(RAND_DATA);removeVarParam(RAND_BY_ROW);this.setRandDefault();}for (String key : _varParams.keySet()) {boolean found=false;for (String name : RAND_VALID_PARAM_NAMES) {found|=name.equals(key);}if (!found) {raiseValidateError("unexpected parameter \"" + key + "\". Legal parameters for Rand statement are "+ "(capitalization-sensitive): "+ RAND_ROWS+ ", "+ RAND_COLS+ ", "+ RAND_MIN+ ", "+ RAND_MAX+ ", "+ RAND_SPARSITY+ ", "+ RAND_SEED+ ", "+ RAND_PDF+ ", "+ RAND_LAMBDA,conditional);}}if (getVarParam(RAND_ROWS) instanceof StringIdentifier || getVarParam(RAND_ROWS) instanceof BooleanIdentifier) {raiseValidateError("for Rand statement " + RAND_ROWS + " has incorrect value type",conditional);}if (getVarParam(RAND_COLS) instanceof StringIdentifier || getVarParam(RAND_COLS) instanceof BooleanIdentifier) {raiseValidateError("for Rand statement " + RAND_COLS + " has incorrect value type",conditional);}if (getVarParam(RAND_SEED) instanceof StringIdentifier || getVarParam(RAND_SEED) instanceof BooleanIdentifier) {raiseValidateError("for Rand statement " + RAND_SEED + " has incorrect value type",conditional);}if ((getVarParam(RAND_MAX) instanceof StringIdentifier && !_strInit) || getVarParam(RAND_MAX) instanceof BooleanIdentifier) {raiseValidateError("for Rand statement " + RAND_MAX + " has incorrect value type",conditional);}if ((getVarParam(RAND_MIN) instanceof StringIdentifier && !_strInit) || getVarParam(RAND_MIN) instanceof BooleanIdentifier) {raiseValidateError("for Rand statement " + RAND_MIN + " has incorrect value type",conditional);}if (!(getVarParam(RAND_SPARSITY) instanceof DoubleIdentifier || getVarParam(RAND_SPARSITY) instanceof IntIdentifier)) {raiseValidateError("for Rand statement " + RAND_SPARSITY + " has incorrect value type",conditional);}if (!(getVarParam(RAND_PDF) instanceof StringIdentifier)) {raiseValidateError("for Rand statement " + RAND_PDF + " has incorrect value type",conditional);}Expression lambda=getVarParam(RAND_LAMBDA);if (!((lambda instanceof DataIdentifier || lambda instanceof ConstIdentifier) && (lambda.getOutput().getValueType() == ValueType.DOUBLE || lambda.getOutput().getValueType() == ValueType.INT))) {raiseValidateError("for Rand statement " + RAND_LAMBDA + " has incorrect data type",conditional);}long rowsLong=-1L, colsLong=-1L;Expression rowsExpr=getVarParam(RAND_ROWS);if (rowsExpr instanceof IntIdentifier) {if (((IntIdentifier)rowsExpr).getValue() >= 1) {rowsLong=((IntIdentifier)rowsExpr).getValue();} else {raiseValidateError("In rand statement, can only assign rows a long " + "(integer) value >= 1 -- attempted to assign value: " + ((IntIdentifier)rowsExpr).getValue(),conditional);}} else if (rowsExpr instanceof DoubleIdentifier) {if (((DoubleIdentifier)rowsExpr).getValue() >= 1) {rowsLong=UtilFunctions.toLong(Math.floor(((DoubleIdentifier)rowsExpr).getValue()));} else {raiseValidateError("In rand statement, can only assign rows a long " + "(integer) value >= 1 -- attempted to assign value: " + rowsExpr.toString(),conditional);}} else if (rowsExpr instanceof DataIdentifier && !(rowsExpr instanceof IndexedIdentifier)) {String identifierName=((DataIdentifier)rowsExpr).getName();if (currConstVars.containsKey(identifierName)) {ConstIdentifier constValue=currConstVars.get(identifierName);if (constValue instanceof IntIdentifier) {if (((IntIdentifier)constValue).getValue() < 1) {raiseValidateError("In rand statement, can only assign rows a long " + "(integer) value >= 1 -- attempted to assign value: " + constValue.toString(),conditional);}long roundedValue=((IntIdentifier)constValue).getValue();rowsExpr=new IntIdentifier(roundedValue,this.getFilename(),this.getBeginLine(),this.getBeginColumn(),this.getEndLine(),this.getEndColumn());addVarParam(RAND_ROWS,rowsExpr);rowsLong=roundedValue;} else if (constValue instanceof DoubleIdentifier) {if (((DoubleIdentifier)constValue).getValue() < 1.0) {raiseValidateError("In rand statement, can only assign rows a long " + "(integer) value >= 1 -- attempted to assign value: " + constValue.toString(),conditional);}long roundedValue=Double.valueOf(Math.floor(((DoubleIdentifier)constValue).getValue())).longValue();rowsExpr=new IntIdentifier(roundedValue,this.getFilename(),this.getBeginLine(),this.getBeginColumn(),this.getEndLine(),this.getEndColumn());addVarParam(RAND_ROWS,rowsExpr);rowsLong=roundedValue;} else {raiseValidateError("In rand statement, can only assign rows a long " + "(integer) value >= 1 -- attempted to assign value: " + constValue.toString(),conditional);}} else {rowsExpr.validateExpression(ids,currConstVars,conditional);}} else {rowsExpr.validateExpression(ids,currConstVars,conditional);}Expression colsExpr=getVarParam(RAND_COLS);if (colsExpr instanceof IntIdentifier) {if (((IntIdentifier)colsExpr).getValue() >= 1) {colsLong=((IntIdentifier)colsExpr).getValue();} else {raiseValidateError("In rand statement, can only assign cols a long " + "(integer) value >= 1 -- attempted to assign value: " + colsExpr.toString(),conditional);}} else if (colsExpr instanceof DoubleIdentifier) {if (((DoubleIdentifier)colsExpr).getValue() >= 1) {colsLong=Double.valueOf((Math.floor(((DoubleIdentifier)colsExpr).getValue()))).longValue();} else {raiseValidateError("In rand statement, can only assign rows a long " + "(integer) value >= 1 -- attempted to assign value: " + colsExpr.toString(),conditional);}} else if (colsExpr instanceof DataIdentifier && !(colsExpr instanceof IndexedIdentifier)) {String identifierName=((DataIdentifier)colsExpr).getName();if (currConstVars.containsKey(identifierName)) {ConstIdentifier constValue=currConstVars.get(identifierName);if (constValue instanceof IntIdentifier) {if (((IntIdentifier)constValue).getValue() < 1) {raiseValidateError("In rand statement, can only assign cols a long " + "(integer) value >= 1 -- attempted to assign value: " + constValue.toString(),conditional);}long roundedValue=((IntIdentifier)constValue).getValue();colsExpr=new IntIdentifier(roundedValue,this.getFilename(),this.getBeginLine(),this.getBeginColumn(),this.getEndLine(),this.getEndColumn());addVarParam(RAND_COLS,colsExpr);colsLong=roundedValue;} else if (constValue instanceof DoubleIdentifier) {if (((DoubleIdentifier)constValue).getValue() < 1) {raiseValidateError("In rand statement, can only assign cols a long " + "(integer) value >= 1 -- attempted to assign value: " + constValue.toString(),conditional);}long roundedValue=Double.valueOf(Math.floor(((DoubleIdentifier)constValue).getValue())).longValue();colsExpr=new IntIdentifier(roundedValue,this.getFilename(),this.getBeginLine(),this.getBeginColumn(),this.getEndLine(),this.getEndColumn());addVarParam(RAND_COLS,colsExpr);colsLong=roundedValue;} else {raiseValidateError("In rand statement, can only assign cols a long " + "(integer) value >= 1 -- attempted to assign value: " + constValue.toString(),conditional);}} else {colsExpr.validateExpression(ids,currConstVars,conditional);}} else {colsExpr.validateExpression(ids,currConstVars,conditional);}Expression minExpr=getVarParam(RAND_MIN);if (minExpr instanceof DataIdentifier && !(minExpr instanceof IndexedIdentifier)) {String identifierName=((DataIdentifier)minExpr).getName();if (currConstVars.containsKey(identifierName)) {ConstIdentifier constValue=currConstVars.get(identifierName);if (constValue instanceof IntIdentifier) {long roundedValue=((IntIdentifier)constValue).getValue();minExpr=new DoubleIdentifier(roundedValue,this.getFilename(),this.getBeginLine(),this.getBeginColumn(),this.getEndLine(),this.getEndColumn());addVarParam(RAND_MIN,minExpr);} else if (constValue instanceof DoubleIdentifier) {double roundedValue=((DoubleIdentifier)constValue).getValue();minExpr=new DoubleIdentifier(roundedValue,this.getFilename(),this.getBeginLine(),this.getBeginColumn(),this.getEndLine(),this.getEndColumn());addVarParam(RAND_MIN,minExpr);} else {raiseValidateError("In rand statement, can only assign min a numerical " + "value -- attempted to assign: " + constValue.toString(),conditional);}} else {minExpr.validateExpression(ids,currConstVars,conditional);}} else {minExpr.validateExpression(ids,currConstVars,conditional);}Expression maxExpr=getVarParam(RAND_MAX);if (maxExpr instanceof DataIdentifier && !(maxExpr instanceof IndexedIdentifier)) {String identifierName=((DataIdentifier)maxExpr).getName();if (currConstVars.containsKey(identifierName)) {ConstIdentifier constValue=currConstVars.get(identifierName);if (constValue instanceof IntIdentifier) {long roundedValue=((IntIdentifier)constValue).getValue();maxExpr=new DoubleIdentifier(roundedValue,this.getFilename(),this.getBeginLine(),this.getBeginColumn(),this.getEndLine(),this.getEndColumn());addVarParam(RAND_MAX,maxExpr);} else if (constValue instanceof DoubleIdentifier) {double roundedValue=((DoubleIdentifier)constValue).getValue();maxExpr=new DoubleIdentifier(roundedValue,this.getFilename(),this.getBeginLine(),this.getBeginColumn(),this.getEndLine(),this.getEndColumn());addVarParam(RAND_MAX,maxExpr);} else {raiseValidateError("In rand statement, can only assign max a numerical " + "value -- attempted to assign: " + constValue.toString(),conditional);}} else {maxExpr.validateExpression(ids,currConstVars,conditional);}} else {maxExpr.validateExpression(ids,currConstVars,conditional);}getOutput().setFormatType(FormatType.BINARY);getOutput().setDataType(DataType.MATRIX);getOutput().setValueType(ValueType.DOUBLE);getOutput().setDimensions(rowsLong,colsLong);if (getOutput() instanceof IndexedIdentifier) {DataIdentifier targetAsSeen=ids.get(((DataIdentifier)getOutput()).getName());if (targetAsSeen == null) {raiseValidateError("cannot assign value to indexed identifier " + ((DataIdentifier)getOutput()).getName() + " without first initializing "+ ((DataIdentifier)getOutput()).getName(),conditional);}((IndexedIdentifier)getOutput()).setOriginalDimensions(targetAsSeen.getDim1(),targetAsSeen.getDim2());}if (getOutput() instanceof IndexedIdentifier) {LOG.warn(this.printWarningLocation() + "Output for Rand Statement may have incorrect size information");}break;case MATRIX:setMatrixDefault();for (String key : _varParams.keySet()) {boolean found=false;for (String name : MATRIX_VALID_PARAM_NAMES) {found|=name.equals(key);}if (!found) {raiseValidateError("unexpected parameter \"" + key + "\". "+ "Legal parameters for matrix statement are (case-sensitive): "+ RAND_DATA+ ", "+ RAND_ROWS+ ", "+ RAND_COLS+ ", "+ RAND_BY_ROW,conditional);}}if (getVarParam(RAND_DATA) != null && (getVarParam(RAND_DATA) instanceof BooleanIdentifier)) {raiseValidateError("for matrix statement " + RAND_DATA + " has incorrect value type",conditional);}if (getVarParam(RAND_ROWS) != null && (getVarParam(RAND_ROWS) instanceof StringIdentifier || getVarParam(RAND_ROWS) instanceof BooleanIdentifier)) {raiseValidateError("for matrix statement " + RAND_ROWS + " has incorrect value type",conditional);}if (getVarParam(RAND_COLS) != null && (getVarParam(RAND_COLS) instanceof StringIdentifier || getVarParam(RAND_COLS) instanceof BooleanIdentifier)) {raiseValidateError("for matrix statement " + RAND_COLS + " has incorrect value type",conditional);}if (!(getVarParam(RAND_BY_ROW) instanceof BooleanIdentifier)) {raiseValidateError("for matrix statement " + RAND_BY_ROW + " has incorrect value type",conditional);}getVarParam(RAND_DATA).validateExpression(ids,currConstVars,conditional);rowsLong=-1L;colsLong=-1L;rowsExpr=getVarParam(RAND_ROWS);if (rowsExpr != null) {if (rowsExpr instanceof IntIdentifier) {if (((IntIdentifier)rowsExpr).getValue() >= 1) {rowsLong=((IntIdentifier)rowsExpr).getValue();} else {raiseValidateError("In matrix statement, can only assign rows a long " + "(integer) value >= 1 -- attempted to assign value: " + ((IntIdentifier)rowsExpr).getValue(),conditional);}} else if (rowsExpr instanceof DoubleIdentifier) {if (((DoubleIdentifier)rowsExpr).getValue() >= 1) {rowsLong=Double.valueOf((Math.floor(((DoubleIdentifier)rowsExpr).getValue()))).longValue();} else {raiseValidateError("In matrix statement, can only assign rows a long " + "(integer) value >= 1 -- attempted to assign value: " + rowsExpr.toString(),conditional);}} else if (rowsExpr instanceof DataIdentifier && !(rowsExpr instanceof IndexedIdentifier)) {String identifierName=((DataIdentifier)rowsExpr).getName();if (currConstVars.containsKey(identifierName)) {ConstIdentifier constValue=currConstVars.get(identifierName);if (constValue instanceof IntIdentifier) {if (((IntIdentifier)constValue).getValue() < 1) {raiseValidateError("In matrix statement, can only assign rows a long " + "(integer) value >= 1 -- attempted to assign value: " + constValue.toString(),conditional);}long roundedValue=((IntIdentifier)constValue).getValue();rowsExpr=new IntIdentifier(roundedValue,this.getFilename(),this.getBeginLine(),this.getBeginColumn(),this.getEndLine(),this.getEndColumn());addVarParam(RAND_ROWS,rowsExpr);rowsLong=roundedValue;} else if (constValue instanceof DoubleIdentifier) {if (((DoubleIdentifier)constValue).getValue() < 1.0) {raiseValidateError("In matrix statement, can only assign rows a long " + "(integer) value >= 1 -- attempted to assign value: " + constValue.toString(),conditional);}long roundedValue=Double.valueOf(Math.floor(((DoubleIdentifier)constValue).getValue())).longValue();rowsExpr=new IntIdentifier(roundedValue,this.getFilename(),this.getBeginLine(),this.getBeginColumn(),this.getEndLine(),this.getEndColumn());addVarParam(RAND_ROWS,rowsExpr);rowsLong=roundedValue;} else {raiseValidateError("In matrix statement, can only assign rows a long " + "(integer) value >= 1 -- attempted to assign value: " + constValue.toString(),conditional);}} else {rowsExpr.validateExpression(ids,currConstVars,conditional);}} else {rowsExpr.validateExpression(ids,currConstVars,conditional);}}colsExpr=getVarParam(RAND_COLS);if (colsExpr != null) {if (colsExpr instanceof IntIdentifier) {if (((IntIdentifier)colsExpr).getValue() >= 1) {colsLong=((IntIdentifier)colsExpr).getValue();} else {raiseValidateError("In matrix statement, can only assign cols a long " + "(integer) value >= 1 -- attempted to assign value: " + colsExpr.toString(),conditional);}} else if (colsExpr instanceof DoubleIdentifier) {if (((DoubleIdentifier)colsExpr).getValue() >= 1) {colsLong=Double.valueOf((Math.floor(((DoubleIdentifier)colsExpr).getValue()))).longValue();} else {raiseValidateError("In matrix statement, can only assign rows a long " + "(integer) value >= 1 -- attempted to assign value: " + colsExpr.toString(),conditional);}} else if (colsExpr instanceof DataIdentifier && !(colsExpr instanceof IndexedIdentifier)) {String identifierName=((DataIdentifier)colsExpr).getName();if (currConstVars.containsKey(identifierName)) {ConstIdentifier constValue=currConstVars.get(identifierName);if (constValue instanceof IntIdentifier) {if (((IntIdentifier)constValue).getValue() < 1) {raiseValidateError("In matrix statement, can only assign cols a long " + "(integer) value >= 1 -- attempted to assign value: " + constValue.toString(),conditional);}long roundedValue=((IntIdentifier)constValue).getValue();colsExpr=new IntIdentifier(roundedValue,this.getFilename(),this.getBeginLine(),this.getBeginColumn(),this.getEndLine(),this.getEndColumn());addVarParam(RAND_COLS,colsExpr);colsLong=roundedValue;} else if (constValue instanceof DoubleIdentifier) {if (((DoubleIdentifier)constValue).getValue() < 1) {raiseValidateError("In matrix statement, can only assign cols a long " + "(integer) value >= 1 -- attempted to assign value: " + constValue.toString(),conditional);}long roundedValue=Double.valueOf(Math.floor(((DoubleIdentifier)constValue).getValue())).longValue();colsExpr=new IntIdentifier(roundedValue,this.getFilename(),this.getBeginLine(),this.getBeginColumn(),this.getEndLine(),this.getEndColumn());addVarParam(RAND_COLS,colsExpr);colsLong=roundedValue;} else {raiseValidateError("In matrix statement, can only assign cols a long " + "(integer) value >= 1 -- attempted to assign value: " + constValue.toString(),conditional);}} else {colsExpr.validateExpression(ids,currConstVars,conditional);}} else {colsExpr.validateExpression(ids,currConstVars,conditional);}}getOutput().setFormatType(FormatType.BINARY);getOutput().setDataType(DataType.MATRIX);getOutput().setValueType(ValueType.DOUBLE);getOutput().setDimensions(rowsLong,colsLong);if (getOutput() instanceof IndexedIdentifier) {((IndexedIdentifier)getOutput()).setOriginalDimensions(getOutput().getDim1(),getOutput().getDim2());}if (getOutput() instanceof IndexedIdentifier) {LOG.warn(this.printWarningLocation() + "Output for matrix Statement may have incorrect size information");}break;default :raiseValidateError("Unsupported Data expression" + this.getOpCode(),false,LanguageErrorCodes.INVALID_PARAMETERS);}return;}  }
class C{  public MagnifyShapeTransformer(Component component){  this(component,null);}  }
class C{  protected void clearSourceCollection() throws Exception {  this.deleteCollection(SOURCE_COLLECTION);  this.waitForCollectionToDisappear(SOURCE_COLLECTION);  this.createCollection(SOURCE_COLLECTION);  this.waitForRecoveriesToFinish(SOURCE_COLLECTION,true);  this.updateMappingsFromZk(SOURCE_COLLECTION);}  }
class C{  public static float parseString(String value){  return Float.parseFloat(value);}  }
class C{  public Object remove(String key){  return this.map.remove(key);}  }
class C{  private void checkProductUsingUPC(){  String upc=upcField.getText();  DefaultTableModel model=(DefaultTableModel)dialog.getMiniTable().getModel();  List<MProduct> products=MProduct.getByUPC(Env.getCtx(),upc,null);  for (  MProduct product : products) {    int row=findProductRow(product.get_ID());    if (row >= 0) {      BigDecimal qty=(BigDecimal)model.getValueAt(row,1);      model.setValueAt(qty,row,1);      model.setValueAt(Boolean.TRUE,row,0);      model.fireTableRowsUpdated(row,row);    }  }  upcField.setText("");  upcField.requestFocusInWindow();}  }
class C{  public boolean visit(ClassInstanceCreation node){  return true;}  }
class C{  public static void convertActivityToTranslucentBeforeL(Activity activity){  try {    Class<?>[] classes=Activity.class.getDeclaredClasses();    Class<?> translucentConversionListenerClazz=null;    for (    Class clazz : classes) {      if (clazz.getSimpleName().contains("TranslucentConversionListener")) {        translucentConversionListenerClazz=clazz;      }    }    Method method=Activity.class.getDeclaredMethod("convertToTranslucent",translucentConversionListenerClazz);    method.setAccessible(true);    method.invoke(activity,new Object[]{null});  } catch (  Throwable t) {  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public void generateCode(BlockScope currentScope){  if (this.expression.resolvedType.id == TypeIds.T_JavaLangString) {    generateCodeForStringSwitch(currentScope);    return;  }  try {    if ((this.bits & IsReachable) == 0) {      return;    }    final boolean hasCases=this.caseCount != 0;    final TypeBinding resolvedType=this.expression.resolvedType;    boolean valueRequired=false;    if (resolvedType.isEnum()) {      this.expression.generateCode(currentScope,true);    } else {      valueRequired=this.expression.constant == Constant.NotAConstant || hasCases;      this.expression.generateCode(currentScope,valueRequired);    }    if (hasCases) {      int[] sortedIndexes=new int[this.caseCount];      for (int i=0; i < this.caseCount; i++) {        sortedIndexes[i]=i;      }      int[] localKeysCopy;      System.arraycopy(this.constants,0,(localKeysCopy=new int[this.caseCount]),0,this.caseCount);      int max=localKeysCopy[this.caseCount - 1];      int min=localKeysCopy[0];      if ((long)(this.caseCount * 2.5) > ((long)max - (long)min)) {      }    }    int caseIndex=0;    if (this.statements != null) {      for (int i=0, maxCases=this.statements.length; i < maxCases; i++) {        Statement statement=this.statements[i];        if ((caseIndex < this.caseCount) && (statement == this.cases[caseIndex])) {          this.scope.enclosingCase=this.cases[caseIndex];          if (this.preSwitchInitStateIndex != -1) {          }          caseIndex++;        } else {          if (statement == this.defaultCase) {            this.scope.enclosingCase=this.defaultCase;          }        }        statement.generateCode(this.scope);      }    }  }  finally {    if (this.scope != null) {      this.scope.enclosingCase=null;    }  }}  }
class C{  private Version(String product,String name,byte major,byte minor,byte release,byte patch,byte ordinal,Version gemfireVersion){  this(product,name,major,minor,release,patch,ordinal);  this.gemfireVersion=gemfireVersion;}  }
class C{  public static void w(String tag,String msg){  w(tag,msg,null);}  }
class C{  protected static String quoteBigDecimal(BigDecimal x){  if (x == null) {    return "null";  }  return "new BigDecimal(\"" + x.toString() + "\")";}  }
class C{  void lockedQuery(Object lowerBoundKey,int lowerBoundOperator,Object upperBoundKey,int upperBoundOperator,Collection results,Set keysToRemove,ExecutionContext context) throws TypeMismatchException, FunctionDomainException, NameResolutionException, QueryInvocationTargetException {  throw new UnsupportedOperationException("Range grouping for HashIndex condition is not supported");}  }
class C{  private boolean[] parseRange(String range,int rangeMin,int rangeMax) throws ConfigException {  boolean[] values=new boolean[rangeMax + 1];  int j=0;  while (j < range.length()) {    char ch=range.charAt(j);    int min=0;    int max=0;    int step=1;    if (ch == '*') {      min=rangeMin;      max=rangeMax;      j++;    } else     if ('0' <= ch && ch <= '9') {      for (; j < range.length() && '0' <= (ch=range.charAt(j)) && ch <= '9'; j++) {        min=10 * min + ch - '0';      }      if (j < range.length() && ch == '-') {        for (j++; j < range.length() && '0' <= (ch=range.charAt(j)) && ch <= '9'; j++) {          max=10 * max + ch - '0';        }      } else       max=min;    } else     throw new ConfigException(L.l("'{0}' is an illegal cron range",range));    if (min < rangeMin)     throw new ConfigException(L.l("'{0}' is an illegal cron range (min value is too small)",range)); else     if (rangeMax < max)     throw new ConfigException(L.l("'{0}' is an illegal cron range (max value is too large)",range));    if (j < range.length() && (ch=range.charAt(j)) == '/') {      step=0;      for (j++; j < range.length() && '0' <= (ch=range.charAt(j)) && ch <= '9'; j++) {        step=10 * step + ch - '0';      }      if (step == 0)       throw new ConfigException(L.l("'{0}' is an illegal cron range",range));    }    if (range.length() <= j) {    } else     if (ch == ',')     j++; else {      throw new ConfigException(L.l("'{0}' is an illegal cron range",range));    }    for (; min <= max; min+=step)     values[min]=true;  }  return values;}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public BottomRecyclerView(Context context,AttributeSet attrs){  super(context,attrs);}  }
class C{  public static String htmlToPlainText(String html){  if (html == null) {    throw new NullPointerException("Html parameter may not be null.");  }  String text=StringUtil.stripAndCollapse(html);  text=htmlNewlinePattern.matcher(text).replaceAll("\n");  text=htmlListPattern.matcher(text).replaceAll("\n- ");  text=htmlTagPattern.matcher(text).replaceAll("");  text=StringUtil.unescapeHTML(text).trim();  return StringUtil.fixedWidth(text.split("\n"),EMAIL_LINE_WIDTH_MAX);}  }
class C{  private String validateNonEmptyString(String value,String defaultValue){  return isEmpty(value) ? defaultValue : value;}  }
class C{  private SSLContext createSslContext() throws SSLException {  checkParameters();  try {    KeyManagerFactory keyMgrFactory=KeyManagerFactory.getInstance(keyAlgorithm);    KeyStore keyStore=loadKeyStore(keyStoreType,keyStoreFilePath,keyStorePwd);    keyMgrFactory.init(keyStore,keyStorePwd);    TrustManager[] mgrs=trustMgrs;    if (mgrs == null) {      TrustManagerFactory trustMgrFactory=TrustManagerFactory.getInstance(keyAlgorithm);      KeyStore trustStore=loadKeyStore(trustStoreType,trustStoreFilePath,trustStorePwd);      trustMgrFactory.init(trustStore);      mgrs=trustMgrFactory.getTrustManagers();    }    SSLContext ctx=SSLContext.getInstance(proto);    ctx.init(keyMgrFactory.getKeyManagers(),mgrs,null);    return ctx;  } catch (  GeneralSecurityException e) {    throw new SSLException("Failed to initialize SSL context " + parameters(),e);  }}  }
class C{  public boolean isDescendentOf(Node node1,Node node2){  return (node1 == node2) || isProperDescendentOf(node1,node2);}  }
class C{  public FloatBuffer put(int index,float c){  floatArray.set(index,c);  return this;}  }
class C{  public IconicsDrawable style(Paint.Style style){  mIconPaint.setStyle(style);  return this;}  }
class C{  public DrawerBuilder withActionBarDrawerToggleAnimated(boolean actionBarDrawerToggleAnimated){  this.mAnimateActionBarDrawerToggle=actionBarDrawerToggleAnimated;  return this;}  }
class C{  public T casePragma(Pragma object){  return null;}  }
class C{  public static void writeChartSingleDataSet(String filename,String title,String xAxisLabel,String yAxisLable,String series,double[] xAxis,double[] yAxis){  System.out.println("Writing chart: " + filename);  XYLineChart chart=new XYLineChart(title,xAxisLabel,yAxisLable);  chart.addSeries(series,xAxis,yAxis);  chart.saveAsPng(filename,1920,1080);  System.out.println("... finished writing chart.");}  }
class C{  public static boolean containsThis(CommandWithWhere command){  String queryString=ARQFactory.get().createCommandString(command);  return queryString.contains("?this");}  }
class C{  @NoInline public static void write(char[] value,int len){  for (int i=0, n=len; i < n; ++i) {    if (runningVM) {      write(Services.getArrayNoBarrier(value,i));    } else {      write(value[i]);    }  }}  }
class C{  int fillWindow(CursorWindow window,int startPos,int requiredPos,boolean countAllRows){  acquireReference();  try {    window.acquireReference();    try {      int numRows=getSession().executeForCursorWindow(getSql(),getBindArgs(),window,startPos,requiredPos,countAllRows,getConnectionFlags());      return numRows;    } catch (    SQLiteDatabaseCorruptException ex) {      onCorruption();      throw ex;    }catch (    SQLiteException ex) {      Logger.e(TAG,"exception: " + ex.getMessage() + "; query: "+ getSql());      throw ex;    } finally {      window.releaseReference();    }  }  finally {    releaseReference();  }}  }
class C{  public boolean isVariable(long arc){switch ((int)arc) {case 4:case 3:case 2:case 1:    return true;default :  break;}return false;}  }
class C{  public static double toDoubleValue(Object o) throws PageException {  if (o instanceof Number) {    return ((Number)o).doubleValue();  } else   if (o instanceof Boolean)   return ((Boolean)o).booleanValue() ? 1 : 0; else   if (o instanceof CharSequence)   return toDoubleValue(o.toString(),true); else   if (o instanceof Castable)   return ((Castable)o).castToDoubleValue(); else   if (o == null)   return 0; else   if (o instanceof ObjectWrap)   return toDoubleValue(((ObjectWrap)o).getEmbededObject()); else   if (o instanceof Date)   return DateTimeUtil.getInstance().toDoubleValue(((Date)o).getTime()); else   if (o instanceof Calendar)   return DateTimeUtil.getInstance().toDoubleValue(((Calendar)o).getTimeInMillis()); else   if (o instanceof Character)   return toDoubleValue(o.toString(),true);  throw new CasterException(o,"number");}  }
class C{  public void stop(){  Thread t=thread;  thread=null;  stopProcessor();  if (t != null) {    t.interrupt();    try {      t.join();    } catch (    InterruptedException e) {      LOG.info("Interrupted while waiting for completion",e);      Thread.currentThread().interrupt();    }  }}  }
class C{  public static String dateTimeFormat(long dateTime){  DateFormat iso8601=new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'",Locale.US);  iso8601.setTimeZone(UTC);  return iso8601.format(dateTime);}  }
class C{  public void sort(Comparator c){  Arrays.sort(vector,0,size,c);}  }
class C{  private void updateStatusLabel(){  String text="";  if (searchResult != null) {switch (searchResult.size()) {case 0:      text="(0 of 0)";    break;case 1:  text="(1 of 1)";break;default :text="(" + (searchResultIndex + 1) + " of "+ searchResult.size()+ ")";}}statusText.setText(text);}  }
class C{  @Override public void read(ArrayDataInput str) throws FitsException {  setFileOffset(str);  try {    str.readLArray(this.dataArray);  } catch (  IOException e) {    throw new FitsException("IO error reading Random Groups data " + e);  }  int pad=FitsUtil.padding(getTrueSize());  try {    str.skipAllBytes(pad);  } catch (  EOFException e) {    throw new PaddingException("EOF reading padding after random groups",this,e);  }catch (  IOException e) {    throw new FitsException("IO error reading padding after random groups",e);  }}  }
class C{  public void updateSplitters(){  final GeneralSettingsConfigItem.GraphWindowConfigItem settings=ConfigManager.instance().getGeneralSettings().getGraphWindow();  final Dimension screenSize=Toolkit.getDefaultToolkit().getScreenSize();  final int leftPanelSize=CSizeSettingsNormalizer.getSize(settings.getSizeLeftPanel(),screenSize.width,200);  final int rightPanelSize=CSizeSettingsNormalizer.getSize(settings.getSizeRightPanel(),screenSize.width,screenSize.width - 200);  final int bottomPanelSize=CSizeSettingsNormalizer.getSize(settings.getSizeBottomPanel(),screenSize.height,screenSize.height - 400);  m_graphTaggingSplitter.setDividerLocation(0,leftPanelSize);  m_graphTaggingSplitter.setDividerLocation(1,rightPanelSize);  m_graphSplitter.setDividerLocation(0,bottomPanelSize);  CGraphPanelSettingsSynchronizer.initializeSynchronizer(m_graphSplitter,m_graphTaggingSplitter);}  }
class C{  public static String trimToMaxLength(String s,int maxLength){  try {    if (s != null && s.length() > maxLength) {      return s.substring(0,maxLength);    } else {      return s;    }  } catch (  StringIndexOutOfBoundsException e) {    throw new IllegalArgumentException(format("trimToMaxLength(%s, %d)",s,maxLength));  }}  }
class C{  static void appendDate(StringBuilder buff,long dateValue){  int y=DateTimeUtils.yearFromDateValue(dateValue);  int m=DateTimeUtils.monthFromDateValue(dateValue);  int d=DateTimeUtils.dayFromDateValue(dateValue);  if (y > 0 && y < 10000) {    StringUtils.appendZeroPadded(buff,4,y);  } else {    buff.append(y);  }  buff.append('-');  StringUtils.appendZeroPadded(buff,2,m);  buff.append('-');  StringUtils.appendZeroPadded(buff,2,d);}  }
class C{  private void emitCode(){  LinkedList<Instantiation> worklist=new LinkedList<Instantiation>();  worklist.add(new Instantiation(null,mainSubroutine));  InsnList newInstructions=new InsnList();  List<TryCatchBlockNode> newTryCatchBlocks=new ArrayList<TryCatchBlockNode>();  List<LocalVariableNode> newLocalVariables=new ArrayList<LocalVariableNode>();  while (!worklist.isEmpty()) {    Instantiation inst=worklist.removeFirst();    emitSubroutine(inst,worklist,newInstructions,newTryCatchBlocks,newLocalVariables);  }  instructions=newInstructions;  tryCatchBlocks=newTryCatchBlocks;  localVariables=newLocalVariables;}  }
class C{  public static String toString(Object object,ToStringStyle style,boolean outputTransients,Class reflectUpToClass){  return new ReflectionToStringBuilder(object,style,null,reflectUpToClass,outputTransients).toString();}  }
class C{  public static double cdf(double x,double k,double theta,double shift){  x=(x - shift);  if (x <= 0.) {    return 0.;  }  return GammaDistribution.regularizedGammaP(k,Math.log1p(x) * theta);}  }
class C{  public Flag(OptionID optionID){  super(optionID);  setOptional(true);  setDefaultValue(Boolean.FALSE);}  }
class C{  @Override protected Void doInBackground(Void... notUsed){  MilStd2525.initializeRenderer(getApplicationContext());  return null;}  }
class C{  public void simpleAnimate(){  theta+=0.0025;}  }
class C{  protected void notifyChangingListeners(int oldValue,int newValue){  for (  OnWheelChangedListener listener : changingListeners) {    listener.onChanged(this,oldValue,newValue);  }}  }
class C{  private void computeLabelDisplayMapFromDefault(IndicatorViewState oldState){  labelDisplayMap=new HashMap<String,Boolean>();  for (  String key : defaultLabelDisplayMap.keySet()) {    labelDisplayMap.put(key,defaultLabelDisplayMap.get(key));    if (oldState != null) {      Boolean oldDefaultDisplay=oldState.defaultLabelDisplayMap.get(key);      Boolean oldDisplay=oldState.labelDisplayMap.get(key);      if (oldDefaultDisplay != null && oldDisplay != null && !oldDisplay.equals(oldDefaultDisplay)) {        labelDisplayMap.put(key,oldDisplay);      }    }  }}  }
class C{  public void request(long n){  if (n > 0L) {    for (; ; ) {      long prev=demand, d;      if ((d=prev + n) < prev)       d=Long.MAX_VALUE;      if (U.compareAndSwapLong(this,DEMAND,prev,d)) {        for (int c, h; ; ) {          if ((c=ctl) == DISABLED)           break; else           if ((c & ACTIVE) != 0) {            if ((c & CONSUME) != 0 || U.compareAndSwapInt(this,CTL,c,c | CONSUME))             break;          } else           if ((h=head) != tail) {            if (U.compareAndSwapInt(this,CTL,c,c | (ACTIVE | CONSUME))) {              startOrDisable();              break;            }          } else           if (head == h && tail == h)           break;          if (demand == 0L)           break;        }        break;      }    }  } else   if (n < 0L)   onError(new IllegalArgumentException("negative subscription request"));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:49.470 -0400",hash_original_method="85049635908343ACDAD200DDE16B4592",hash_generated_method="2FD16A3C49F5C9E6773A5C4B53A454C2") private boolean isVowel(char ch){  return VOWELS.indexOf(ch) != -1;}  }
class C{  private void handle412ConditionalRequestFailed(SipTransactionContext ctx) throws PayloadException, NetworkException {  if (sLogger.isActivated()) {    sLogger.info("412 conditional response received");  }  mDialogPath.incrementCseq();  saveEntityTag(null);  SipRequest publish=SipMessageFactory.createPublish(mDialogPath,mExpirePeriod,mEntityTag,mDialogPath.getLocalContent());  sendPublish(publish);}  }
class C{  public Object encode(Object obj) throws EncoderException {  if (!(obj instanceof String)) {    throw new EncoderException("DoubleMetaphone encode parameter is not of type String");  }  return doubleMetaphone((String)obj);}  }
class C{  protected static void open_files(){  File fil;  String out_name;  if (emit.input_file_name != null)   try {    input_file=new BufferedInputStream(new FileInputStream(emit.input_file_name));  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(3);  } else   input_file=new BufferedInputStream(System.in);  if (out_path == null)   out_path="";  out_name=out_path + emit.parser_class_name + ".java";  fil=new File(out_name);  try {    parser_class_file=new PrintStream(new BufferedOutputStream(new FileOutputStream(fil),4096));  } catch (  Exception e) {    System.err.println("Can't open \"" + out_name + "\" for output");    System.exit(3);  }  out_name=out_path + emit.symbol_const_class_name + ".java";  fil=new File(out_name);  try {    symbol_class_file=new PrintStream(new BufferedOutputStream(new FileOutputStream(fil),4096));  } catch (  Exception e) {    System.err.println("Can't open \"" + out_name + "\" for output");    System.exit(4);  }}  }
class C{  protected void forwardMessage(AbstractMRListener client,AbstractMRMessage m){  ((SRCPListener)client).message((SRCPMessage)m);}  }
class C{  public static float clamp(float value,float a,float b){  float min=(a > b) ? b : a;  float max=(a > b) ? a : b;  if (value < min) {    value=min;  } else   if (value > max) {    value=max;  }  return value;}  }
class C{  public String readStatement(){  if (endOfFile) {    return null;  }  try {    return readStatementLoop();  } catch (  IOException e) {    throw DbException.convertIOException(e,null);  }}  }
class C{  public BottomRecyclerView(Context context){  super(context);}  }
class C{  public void reset(){  _previouslyHovered=null;}  }
class C{  public static void doFlip(ByteBuffer bBuf,int width,int height){  bBuf.rewind();  byte[] scanLine0=new byte[width];  byte[] scanLine1=new byte[width];  for (int h=0; h < height / 2; ++h) {    bBuf.position(h * width);    bBuf.get(scanLine0,0,width);    bBuf.position((height - h - 1) * width);    bBuf.get(scanLine1,0,width);    bBuf.position((height - h - 1) * width);    bBuf.put(scanLine0,0,width);    bBuf.position(h * width);    bBuf.put(scanLine1,0,width);  }  bBuf.rewind();}  }
class C{  public void handleDOMChildNodeRemovedEvent(MutationEvent evt){  Node childNode=(Node)evt.getTarget();switch (childNode.getNodeType()) {case Node.TEXT_NODE:case Node.CDATA_SECTION_NODE:    if (isParentDisplayed(childNode)) {      laidoutText=null;    }  break;case Node.ELEMENT_NODE:{  Element childElt=(Element)childNode;  if (isTextChild(childElt)) {    laidoutText=null;    removeContextFromChild(ctx,childElt);  }  break;}default :}}  }
class C{  @Override public boolean removeFromWorld(){  StendhalRPZone zone=SingletonRepository.getRPWorld().getZone("0_semos_mountain_n2");  zone.remove(sign);  updateQuest();  return true;}  }
class C{  boolean pageScroll(int direction){  int nextPage=-1;  boolean down=false;  if (direction == FOCUS_UP) {    nextPage=Math.max(0,mSelectedPosition - getChildCount() - 1);  } else   if (direction == FOCUS_DOWN) {    nextPage=Math.min(mItemCount - 1,mSelectedPosition + getChildCount() - 1);    down=true;  }  if (nextPage >= 0) {    int position=lookForSelectablePosition(nextPage,down);    if (position >= 0) {      mLayoutMode=LAYOUT_SPECIFIC;      mSpecificTop=mPaddingTop + getVerticalFadingEdgeLength();      if (down && position > mItemCount - getChildCount()) {        mLayoutMode=LAYOUT_FORCE_BOTTOM;      }      if (!down && position < getChildCount()) {        mLayoutMode=LAYOUT_FORCE_TOP;      }      setSelectionInt(position);      invokeOnItemScrollListener();      if (!awakenScrollBars()) {        invalidate();      }      return true;    }  }  return false;}  }
class C{  public void testPolygonNullPolyLons(){  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("polyLons must not be null"));}  }
class C{  private static int unitsReset(List<CompilationUnit> units){  int resetCount=0;  for (int i=0, n=units.size(); i < n; i++) {    CompilationUnit unit=units.get(i);    Source source=unit.getSource();    if (!source.isInternal() && !source.isCompiled()) {      unit.reset();      resetCount++;    } else     if (!source.isInternal()) {      unit.checkBits=0;    }  }  return resetCount;}  }
class C{  public Tree(){  rmin=new MathVector();  rsize=-2.0 * -2.0;  root=null;  bodyTab=null;  bodyTabRev=null;  rmin.value(0,-2.0);  rmin.value(1,-2.0);  rmin.value(2,-2.0);}  }
class C{  public void recompose(StylesheetRoot root) throws TransformerException {}  }
class C{  public boolean isExposureEnabled(){  return exposureEnabled;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementremoveattributenode.class,args);}  }
class C{  public static <T>void testByteCount(Coder<T> coder,Coder.Context context,T[] elements) throws Exception {  TestElementByteSizeObserver observer=new TestElementByteSizeObserver();  CountingOutputStream os=new CountingOutputStream(ByteStreams.nullOutputStream());  for (  T elem : elements) {    coder.registerByteSizeObserver(elem,observer,context);    coder.encode(elem,os,context);    observer.advance();  }  long expectedLength=os.getCount();  assertEquals(expectedLength,observer.getSum());  assertEquals(elements.length,observer.getCount());}  }
class C{  private boolean cancelResolution(){synchronized (runningResolutionList) {    if (runningResolutionList.size() == 0) {      return true;    }    String message;    if (runningResolutionList.size() == 1) {      message=Messages.getString("ConflictDialog.ConfirmSingleConflictDialogText");    } else {      message=Messages.getString("ConflictDialog.ConfirmMultiConflictsDialogText");    }    final boolean cancelling=MessageDialog.openQuestion(getShell(),Messages.getString("ConflictDialog.ConfirmCancelDialogTitle"),message);    if (!cancelling) {      return false;    }    for (final Iterator i=runningResolutionList.iterator(); i.hasNext(); ) {      final ConflictResolution resolution=(ConflictResolution)i.next();      resolution.removeStatusListener(this);      resolution.cancel();    }  }  return true;}  }
class C{  public TimeSeries createCopy(RegularTimePeriod start,RegularTimePeriod end) throws CloneNotSupportedException {  ParamChecks.nullNotPermitted(start,"start");  ParamChecks.nullNotPermitted(end,"end");  if (start.compareTo(end) > 0) {    throw new IllegalArgumentException("Requires start on or before end.");  }  boolean emptyRange=false;  int startIndex=getIndex(start);  if (startIndex < 0) {    startIndex=-(startIndex + 1);    if (startIndex == this.data.size()) {      emptyRange=true;    }  }  int endIndex=getIndex(end);  if (endIndex < 0) {    endIndex=-(endIndex + 1);    endIndex=endIndex - 1;  }  if ((endIndex < 0) || (endIndex < startIndex)) {    emptyRange=true;  }  if (emptyRange) {    TimeSeries copy=(TimeSeries)super.clone();    copy.data=new java.util.ArrayList();    return copy;  }  return createCopy(startIndex,endIndex);}  }
class C{  public static byte parseByte(java.lang.String s,int radix) throws java.lang.NumberFormatException {  return 0;}  }
class C{  public <AnnotationType extends Annotation>void register(MethodBinder<AnnotationType> binder){  methodBinders.add(binder);  for (  BinderCache cache : classBinderCacheMap.values()) {    cache.register(binder);  }}  }
class C{  protected void adaptToReplace(){  if (fLength > 0 && fPosition.offset <= fOffset && fOffset + fLength <= fPosition.offset + fPosition.length) {    fPosition.length+=fReplaceLength - fLength;  } else {    if (fLength > 0)     adaptToRemove();    if (fReplaceLength > 0)     adaptToInsert();  }}  }
class C{  public static boolean initDebug(boolean InitCuda){  return StaticHelper.initOpenCV(InitCuda);}  }
class C{  public void undoInsert() throws SQLException {  throw new UnsupportedOperationException();}  }
class C{  public boolean containsDigest(){  return this.lengthDigest() > 0;}  }
class C{  @Override public void onClick(View v){switch (v.getId()) {case R.id.b1:    worker.showTitle("fill this up now");  break;case R.id.b2:worker.showLogo();break;case R.id.b3:worker.triggerfromSearchIcon();break;case R.id.b4:worker.updateCount(u++);break;case R.id.b5:worker.updateCount(0);break;case R.id.bxx:Intent g=new Intent(this,TestOfCandyBar2Icons.class);startActivity(g);break;}}  }
class C{  private static String generateJWT(String secret,String jwtID,String iss,Integer ttl,Map<String,String> claims) throws HmacException {  try {    return signJWT(secret,jwtID,ttl,iss,claims);  } catch (  JOSEException e) {    e.printStackTrace();    throw new HmacException("Cannot generate JWT",e);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:11.062 -0500",hash_original_method="A2C68F8615572C95C5947791A8CC8026",hash_generated_method="3F5A46C8072690BC5A043F57C3B27AFD") public void copyFrom(PointerCoords other){  final long bits=other.mPackedAxisBits;  mPackedAxisBits=bits;  if (bits != 0) {    final float[] otherValues=other.mPackedAxisValues;    final int count=Long.bitCount(bits);    float[] values=mPackedAxisValues;    if (values == null || count > values.length) {      values=new float[otherValues.length];      mPackedAxisValues=values;    }    System.arraycopy(otherValues,0,values,0,count);  }  x=other.x;  y=other.y;  pressure=other.pressure;  size=other.size;  touchMajor=other.touchMajor;  touchMinor=other.touchMinor;  toolMajor=other.toolMajor;  toolMinor=other.toolMinor;  orientation=other.orientation;}  }
class C{  public TransactionInput(NetworkParameters params,@Nullable Transaction parentTransaction,byte[] scriptBytes){  this(params,parentTransaction,scriptBytes,new TransactionOutPoint(params,UNCONNECTED,(Transaction)null));}  }
class C{  private boolean isKibanaRequest(String requestPath){  String index=normalizeUrlPath(requestPath);  if ("/".equals(requestPath) || "/_nodes".equals(requestPath) || "/.kibana".equals(index)|| "/_cluster/health/.kibana".equals(requestPath)|| "_mget".equals(index)) {    return true;  }  return false;}  }
class C{  public T caseInlineStateMachine_(InlineStateMachine_ object){  return null;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (!Sage.client || SageTV.neddy == null)   return Boolean.FALSE;  return SageTV.neddy.isClientConnected() ? Boolean.FALSE : Boolean.TRUE;}  }
class C{  @Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){  super.onMeasure(widthMeasureSpec,heightMeasureSpec);  if (LayoutSpec.get(getContext()) == LayoutSpec.LAYOUT_PHONE || LayoutSpec.get(getContext()) == LayoutSpec.LAYOUT_KINDLE) {    int paddingEdge=getResources().getDimensionPixelSize(R.dimen.cursor_toolbar_padding_horizontal_edge);    cursorToolbarFrame.setPadding(paddingEdge,0,paddingEdge,0);    return;  }  int width=MeasureSpec.getSize(widthMeasureSpec);  anchorPositionPx2=CursorUtils.getCursorEditTextAnchorPosition(getContext(),width);  if (ViewUtils.isInPortrait(getContext())) {    int left=CursorUtils.getCursorMenuLeftMargin(getContext(),width);    ((FrameLayout.LayoutParams)newCursorEditText.getLayoutParams()).leftMargin=anchorPositionPx2;    ((FrameLayout.LayoutParams)hintView.getLayoutParams()).leftMargin=anchorPositionPx2;    cursorToolbarFrame.setPadding(left,0,left,0);  } else {    int left=CursorUtils.getCursorMenuLeftMargin(getContext(),width);    ((FrameLayout.LayoutParams)newCursorEditText.getLayoutParams()).leftMargin=anchorPositionPx2;    ((FrameLayout.LayoutParams)hintView.getLayoutParams()).leftMargin=anchorPositionPx2;    cursorToolbarFrame.setPadding(left,0,left,0);  }}  }
class C{  public void testBadStreamSize(){  ThreadLocalRandom r=ThreadLocalRandom.current();  executeAndCatchIAE(null);  executeAndCatchIAE(null);  executeAndCatchIAE(null);  executeAndCatchIAE(null);  executeAndCatchIAE(null);  executeAndCatchIAE(null);}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  public static int binarySearch(double[] array,double value){  return binarySearch(array,0,array.length,value);}  }
class C{  public static void addSelectionMenus(final JPopupMenu menu,final ZyGraph graph,final NaviNode node){  Preconditions.checkNotNull(menu,"IE02144: Menu argument can not be null");  Preconditions.checkNotNull(graph,"IE02145: Graph argument can not be null");  Preconditions.checkNotNull(node,"IE02146: Node argument can not be null");  final JMenu selectionMenu=new JMenu("Selection");  selectionMenu.add(CActionProxy.proxy(new CActionSelectNodePredecessors(graph,node)));  selectionMenu.add(CActionProxy.proxy(new CActionSelectNodeSuccessors(graph,node)));  if (graph.getSelectedNodes().size() > 0) {    selectionMenu.add(CActionProxy.proxy(new CGroupAction(graph)));  }  if (node.getRawNode() instanceof INaviCodeNode) {    try {      final INaviFunction parentFunction=((INaviCodeNode)node.getRawNode()).getParentFunction();      selectionMenu.add(CActionProxy.proxy(new CActionSelectSameParentFunction(graph,parentFunction)));    } catch (    final MaybeNullException exception) {    }  } else   if (node.getRawNode() instanceof INaviFunctionNode) {    final INaviFunction function=((INaviFunctionNode)node.getRawNode()).getFunction();    selectionMenu.add(CActionProxy.proxy(new CActionSelectSameFunctionType(graph,function.getType())));  }  menu.add(selectionMenu);  menu.addSeparator();}  }
class C{  @Override public void validate(final StatementDescription desc){  final String action=desc.getLitteral(ACTION);  final SpeciesDescription sd=desc.getSpeciesContext();  if (sd == null) {    return;  }  if (!sd.hasAction(action)) {    desc.error("Action " + action + " does not exist in "+ sd.getName(),IGamlIssue.UNKNOWN_ACTION,ACTION,action,sd.getName());  }}  }
class C{  public Object key(){  short key[]=new short[69];  int idx=0;  for (int i=0; i < 4; i++) {    key[idx++]=freeEncoding[i];  }  for (int i=0; i < 4; i++) {    key[idx++]=foundationEncoding[i];  }  for (int i=0; i < cols.length; i++) {    Column col=cols[order[i]];    int sz=col.num;    for (int j=0; j < sz; j++) {      key[idx++]=col.cards[j];    }    key[idx++]=-1;  }  return key;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:38.332 -0500",hash_original_method="5576E8CFBC652E677E2E7A2A7B8415A7",hash_generated_method="8FA831EA5EA31CC4BA7DA39826A1D483") public static void cursorStringToContentValues(Cursor cursor,String field,ContentValues values){  cursorStringToContentValues(cursor,field,values,field);}  }
class C{  public static String encodeDate(long date){  Time t=new Time(UTC.getID());  t.set(date);  return t.format3339(false);}  }
class C{  @SuppressWarnings("checkstyle:cyclomaticcomplexity") private Batch batch(Date lastNextStartTime,JSONObject lastNextContinue) throws RetryableException {  try {    @SuppressWarnings("unchecked") final Change continueChange=wikibase.getChangeFromContinue((Map<String,Object>)lastNextContinue);    JSONObject recentChanges=wikibase.fetchRecentChangesBackoff(lastNextStartTime,batchSize,true);    Map<String,Change> changesByTitle=new LinkedHashMap<>();    JSONObject nextContinue=(JSONObject)recentChanges.get("continue");    long nextStartTime=lastNextStartTime.getTime();    JSONArray result=(JSONArray)((JSONObject)recentChanges.get("query")).get("recentchanges");    DateFormat df=inputDateFormat();    for (    Object rco : result) {      JSONObject rc=(JSONObject)rco;      long namespace=(long)rc.get("ns");      long rcid=(long)rc.get("rcid");      if (!wikibase.isEntityNamespace(namespace)) {        log.info("Skipping change in irrelevant namespace:  {}",rc);        continue;      }      if (!wikibase.isValidEntity(rc.get("title").toString())) {        log.info("Skipping change with bogus id:  {}",rc.get("title").toString());        continue;      }      Date timestamp=df.parse(rc.get("timestamp").toString());      Change change;      if (rc.get("type").toString().equals("log") && (long)rc.get("revid") == 0) {        change=new Change(rc.get("title").toString(),-1L,timestamp,rcid);      } else {        change=new Change(rc.get("title").toString(),(long)rc.get("revid"),timestamp,(long)rc.get("rcid"));      }      Change dupe=changesByTitle.put(change.entityId(),change);      if (dupe != null && (dupe.revision() > change.revision() || dupe.revision() < 0)) {        changesByTitle.remove(change.entityId());        changesByTitle.put(change.entityId(),dupe);      }      nextStartTime=Math.max(nextStartTime,timestamp.getTime());    }    ImmutableList<Change> changes=ImmutableList.copyOf(changesByTitle.values());    if (nextContinue == null) {      if (changes.size() != 0) {        nextContinue=wikibase.getContinueObject(changes.get(changes.size() - 1));      } else {        if (result.size() >= batchSize) {          log.info("Backoff overflow, advancing one second");          nextStartTime+=1000;        }        nextContinue=lastNextContinue;      }    }    if (changes.size() != 0) {      log.info("Got {} changes, from {} to {}",changes.size(),changes.get(0).toString(),changes.get(changes.size() - 1).toString());    } else {      log.info("Got no real changes");    }    String upTo=inputDateFormat().format(new Date(nextStartTime - 1000));    long advanced=nextStartTime - lastNextStartTime.getTime();    return new Batch(changes,advanced,upTo,new Date(nextStartTime),nextContinue);  } catch (  java.text.ParseException e) {    throw new RetryableException("Parse error from api",e);  }}  }
class C{  public DelimitedVersion(long[] numericParts){  mNumericParts=numericParts;}  }
class C{  private void dispatch() throws Exception {  while (!Thread.currentThread().isInterrupted()) {    try {      List<String> children;      List<String> locks;synchronized (this) {        boolean needRescan=false;        do {          locks=_zkClient.getChildren().watched().forPath(_lockPath);          children=_zkClient.getChildren().watched().forPath(_queuePath);          _log.info("Processing queue {} - #items: {}, #locks: {}",new Object[]{_name,children.size(),locks.size()});          children.removeAll(locks);          if (children.isEmpty()) {            wait();            needRescan=true;          } else           if (_consumer.isBusy(_queueName)) {            _log.info("The consumer {} is busy",_consumer);            wait();            needRescan=true;          } else {            needRescan=false;          }        } while (needRescan);      }      if (!children.isEmpty()) {        processChildren(children);      }    } catch (    KeeperException e) {      _log.warn("KeeperException in dispatch loop, retrying in dispatch loop",e);      continue;    }catch (    Exception e) {      _log.error("Exception in dispatch loop, quiting",e);      throw e;    }  }}  }
class C{  public IntVector(int v[]){  if (v == null) {    V=new int[0];    setSize(0);  } else {    V=new int[v.length];    setSize(v.length);    set(0,size() - 1,v,0);  }}  }
class C{  public Srinivas(){  super(2,2,2);}  }
class C{  public Configuration subset(String prefix){  Configuration c=new Configuration();  Iterator keys=getKeys();  boolean validSubset=false;  while (keys.hasNext()) {    Object key=keys.next();    if (key instanceof String && ((String)key).startsWith(prefix)) {      if (!validSubset) {        validSubset=true;      }      String newKey=null;      if (((String)key).length() == prefix.length()) {        newKey=prefix;      } else {        newKey=((String)key).substring(prefix.length() + 1);      }      c.setProperty(newKey,get(key));    }  }  if (validSubset) {    return c;  } else {    return null;  }}  }
class C{  public static PeerGroup newWithTor(Context context,@Nullable AbstractBlockChain chain,TorClient torClient,boolean doDiscovery) throws TimeoutException {  checkNotNull(torClient);  DRMWorkaround.maybeDisableExportControls();  BlockingClientManager manager=new BlockingClientManager(torClient.getSocketFactory());  final int CONNECT_TIMEOUT_MSEC=TOR_TIMEOUT_SECONDS * 1000;  manager.setConnectTimeoutMillis(CONNECT_TIMEOUT_MSEC);  PeerGroup result=new PeerGroup(context,chain,manager,torClient);  result.setConnectTimeoutMillis(CONNECT_TIMEOUT_MSEC);  if (doDiscovery) {    NetworkParameters params=context.getParams();    HttpDiscovery.Details[] httpSeeds=params.getHttpSeeds();    if (httpSeeds.length > 0) {      OkHttpClient httpClient=new OkHttpClient();      httpClient.setSocketFactory(torClient.getSocketFactory());      List<PeerDiscovery> discoveries=Lists.newArrayList();      for (      HttpDiscovery.Details httpSeed : httpSeeds)       discoveries.add(new HttpDiscovery(params,httpSeed,httpClient));      result.addPeerDiscovery(new MultiplexingDiscovery(params,discoveries));    } else {      result.addPeerDiscovery(new TorDiscovery(params,torClient));    }  }  return result;}  }
class C{  protected PropertySetterDeclarationImpl(){  super();}  }
class C{  @Beta public static void collectSections(File wsjDirectory,List<File> treebankFiles,ListSpecification wsjSections){  if (!wsjDirectory.isDirectory())   return;  for (  File subFile : wsjDirectory.listFiles()) {    if (!subFile.isDirectory())     continue;    try {      int section=Integer.valueOf(subFile.getName());      if (!wsjSections.contains(section))       continue;    } catch (    NumberFormatException e) {      continue;    }    collectFiles(subFile,treebankFiles);  }}  }
class C{  public void initialize(byte[] key){  if (key.length != 16) {    throw new IllegalArgumentException("Key must be exactly 16 bytes.");  }  v0=0x736f6d6570736575L;  v1=0x646f72616e646f6dL;  v2=0x6c7967656e657261L;  v3=0x7465646279746573L;  long k0=bytesLEtoLong(key,0);  long k1=bytesLEtoLong(key,8);  v0^=k0;  v1^=k1;  v2^=k0;  v3^=k1;  msg_byte_counter=0;}  }
class C{  @Override public void inflict(PoisonStatus status,StatusList statusList,Entity attacker){  RPEntity entity=statusList.getEntity();  if (entity == null) {    return;  }  int count=statusList.countStatusByType(status.getStatusType());  if (count <= 6) {    statusList.addInternal(status);  }  statusList.activateStatusAttribute("poisoned");  if (entity instanceof Player) {    TutorialNotifier.poisoned((Player)entity);  }  if (count == 0) {    TurnListener turnListener=new PoisonStatusTurnListener(statusList);    TurnNotifier.get().dontNotify(turnListener);    TurnNotifier.get().notifyInTurns(0,turnListener);  }}  }
class C{  public BreakpointSetReply(final int packetId,final int errorCode,final List<Pair<RelocatedAddress,Integer>> addresses){  super(packetId,errorCode,addresses);}  }
class C{  public static final Cursor query(ContentResolver cr,String[] projection,long begin,long end){  Uri.Builder builder=CONTENT_URI.buildUpon();  ContentUris.appendId(builder,begin);  ContentUris.appendId(builder,end);  return cr.query(builder.build(),projection,WHERE_CALENDARS_SELECTED,WHERE_CALENDARS_ARGS,DEFAULT_SORT_ORDER);}  }
class C{  public void extractJars(){  ExtractJarFile extractor=this.injector.getInstance(ExtractJarFile.class);  extractor.execute();}  }
class C{  @Transactional @IsCreatable(ResourceType.MILESTONE) public static Result newMilestone(String userName,String projectName){  Form<Milestone> milestoneForm=new Form<>(Milestone.class).bindFromRequest();  Project project=Project.findByOwnerAndProjectName(userName,projectName);  validateTitle(project,milestoneForm);  validateDueDate(milestoneForm);  if (milestoneForm.hasErrors()) {    return ok(create.render("title.newMilestone",milestoneForm,project));  } else {    Milestone newMilestone=milestoneForm.get();    if (newMilestone.contents == null) {      return status(REQUEST_ENTITY_TOO_LARGE,ErrorViews.RequestTextEntityTooLarge.render());    }    newMilestone.project=project;    newMilestone.dueDate=JodaDateUtil.lastSecondOfDay(newMilestone.dueDate);    Milestone.create(newMilestone);    Attachment.moveAll(UserApp.currentUser().asResource(),newMilestone.asResource());    return redirect(routes.MilestoneApp.milestone(userName,projectName,newMilestone.id));  }}  }
class C{  public static Map ordinalMap(TupleSet tuples,String field,Comparator cmp){  if (tuples instanceof Table) {    ColumnMetadata md=((Table)tuples).getMetadata(field);    return md.getOrdinalMap();  } else {    return ordinalMap(tuples.tuples(),field,cmp);  }}  }
class C{  public static void deleteUserFromAuthenticationInfo(AuthenticationInfo authenticationInfo) throws ServerRuntimeException {  String username=authenticationInfo.getUsername();  String passwordFileLocation=authenticationInfo.getPasswordFileLocation();  try {    PropertiesConfiguration props=new PropertiesConfiguration(passwordFileLocation);    String usernameInFile=props.getString(username);    if (usernameInFile == null) {      throw new ServerRuntimeException(MessageFormat.format("Username does not exist: {0}",username));    }    props.clearProperty(username);    props.save();  } catch (  org.apache.commons.configuration.ConfigurationException ce) {    logger.error("Error while saving properties for file:" + authenticationInfo.getPasswordFileLocation(),ce);    throw new ServerRuntimeException("Error while saving Credentials: " + ce.getMessage());  }}  }
class C{  void add(final int[] frameIndexes,final int[] frameDelays){  if (frameIndexes.length != frameDelays.length) {    throw new IllegalArgumentException("Mismatched number of frame indexes and delays");  }  for (int i=0; i < frameIndexes.length; i++) {    final int[] frames=new int[frameIndexes.length];    final int[] delays=new int[frameIndexes.length];    int tidx=i;    for (int fidx=0; fidx < frameIndexes.length; fidx++) {      frames[fidx]=frameIndexes[tidx];      delays[fidx]=frameDelays[tidx];      if (++tidx >= frameIndexes.length) {        tidx=0;      }    }    add(frameIndexes[i],frames,delays);  }}  }
class C{  public SVGGVTFont(float fontSize,GVTFontFace fontFace,String[] glyphUnicodes,String[] glyphNames,String[] glyphLangs,String[] glyphOrientations,String[] glyphForms,BridgeContext ctx,Element[] glyphElements,Element missingGlyphElement,Element[] hkernElements,Element[] vkernElements,Element textElement){  this.fontFace=fontFace;  this.fontSize=fontSize;  this.glyphUnicodes=glyphUnicodes;  this.glyphNames=glyphNames;  this.glyphLangs=glyphLangs;  this.glyphOrientations=glyphOrientations;  this.glyphForms=glyphForms;  this.ctx=ctx;  this.glyphElements=glyphElements;  this.missingGlyphElement=missingGlyphElement;  this.hkernElements=hkernElements;  this.vkernElements=vkernElements;  this.scale=fontSize / fontFace.getUnitsPerEm();  this.textElement=textElement;  this.language=XMLSupport.getXMLLang(textElement);  Value v=CSSUtilities.getComputedStyle(textElement,SVGCSSEngine.WRITING_MODE_INDEX);  if (v.getStringValue().startsWith(CSS_TB_VALUE)) {    this.orientation=SVG_V_VALUE;  } else {    this.orientation=SVG_H_VALUE;  }  createKerningTables();}  }
class C{  public Iterable findAll(Iterable ids){  final List entities=new LinkedList();  log.info("Looking for multiple entities for a number of ids");  log.debug(ids);  for (  Object id : ids) {    final Object found=findOne((Serializable)id);    if (found != null) {      log.trace("Entity found for key " + id + ", adding the found entity to the list of returned entity");      entities.add(found);    }  }  return entities;}  }
class C{  public void addMovie(Movie movie){  if (!movieList.contains(movie)) {    int oldValue=movieList.size();    movieList.add(movie);    updateTags(movie);    movie.addPropertyChangeListener(tagListener);    firePropertyChange("movies",null,movieList);    firePropertyChange("movieCount",oldValue,movieList.size());  }}  }
class C{  public ExceptionDisplayFrame(ExceptionContext context){  if (context == null) {    throw new IllegalArgumentException("ExceptionContext argument passed to ErrorDisplayFrame constructor cannot be null.");  }  this.context=context;  InitComponents();}  }
class C{  public List<JSONObject> toHarbormaster(){  List<JSONObject> harbormasterData=new ArrayList<JSONObject>();  for (  UnitResult result : results) {    harbormasterData.add(result.toHarbormaster());  }  return harbormasterData;}  }
class C{  protected void sequence_Import(ISerializationContext context,Import semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static double bessi0(double x){  double ax, ans;  double y;  if ((ax=Math.abs(x)) < 3.75) {    y=x / 3.75;    y*=y;    ans=1.0 + y * (3.5156229 + y * (3.0899424 + y * (1.2067492 + y * (0.2659732 + y * (0.360768e-1 + y * 0.45813e-2)))));  } else {    y=3.75 / ax;    ans=(Math.exp(ax) / Math.sqrt(ax)) * (0.39894228 + y * (0.1328592e-1 + y * (0.225319e-2 + y * (-0.157565e-2 + y * (0.916281e-2 + y * (-0.2057706e-1 + y * (0.2635537e-1 + y * (-0.1647633e-1 + y * 0.392377e-2))))))));  }  return ans;}  }
class C{  protected boolean updateAssignment(DBIDIter iditer,List<? extends ModifiableDBIDs> clusters,WritableIntegerDataStore assignment,int newA){  final int oldA=assignment.intValue(iditer);  if (oldA == newA) {    return false;  }  clusters.get(newA).add(iditer);  assignment.putInt(iditer,newA);  if (oldA >= 0) {    clusters.get(oldA).remove(iditer);  }  return true;}  }
class C{  protected void addModule(Map<Class<? extends IFloodlightService>,IFloodlightModule> moduleMap,Collection<IFloodlightModule> moduleSet,IFloodlightModule module){  if (!moduleSet.contains(module)) {    Collection<Class<? extends IFloodlightService>> servs=moduleServiceMap.get(module);    if (servs != null) {      for (      Class<? extends IFloodlightService> c : servs)       moduleMap.put(c,module);    }    moduleSet.add(module);  }}  }
class C{  public static Short toShort(boolean b){  return Short.valueOf(toShortValue(b));}  }
class C{  public static void assertFalse(boolean value,String errorMessage){  if (verbose) {    log("assertFalse(" + value + ", "+ errorMessage+ ")");  }  assertBool(!value,errorMessage);}  }
class C{  @SuppressWarnings("unchecked") public StartRequest parse(HttpServletRequest request){  ServletFileUpload servletFileUpload=new ServletFileUpload(new DiskFileItemFactory());  parameters=new PropertyTable();  files=new HashMap<String,FileItem>();  if (ServletFileUpload.isMultipartContent(request)) {    List<FileItem> fileItems;    try {      fileItems=servletFileUpload.parseRequest(request);      for (      FileItem item : fileItems) {        String fieldName=item.getFieldName();        if (item.isFormField()) {          if (item.getString() != null && !item.getString().isEmpty()) {            parameters.put(fieldName,item.getString());          }        } else {          files.put(fieldName,item);        }      }    } catch (    FileUploadException e) {      throw new CargoDaemonException(e);    }  }  return this;}  }
class C{  public GuardingProfiler(Writer writer,Writer verbose,int maxDurationMillis){  mGuardWriter=writer;  mVerboseWriter=verbose;  mMaxDurationMillis=maxDurationMillis;}  }
class C{  public ConnectionPool(){  this(5,5,TimeUnit.MINUTES);}  }
class C{  public final void addAlias(final URI serviceURI,final URI aliasURI){  if (serviceURI == null)   throw new IllegalArgumentException();  if (aliasURI == null)   throw new IllegalArgumentException();synchronized (this) {    if (services.containsKey(aliasURI)) {      throw new IllegalStateException("Alias already registered as service: uri=" + aliasURI);    }    if (aliases.containsKey(aliasURI)) {      throw new IllegalStateException("Alias already registered: uri=" + aliasURI);    }    aliases.put(aliasURI,serviceURI);  }}  }
class C{  public PoliticalActionAttachment waitForPoliticalAction(final boolean firstRun,final IPoliticsDelegate iPoliticsDelegate){  m_firstRun=firstRun;  m_validPoliticalActions=new ArrayList<>(iPoliticsDelegate.getValidActions());  Collections.sort(m_validPoliticalActions,new PoliticalActionComparator(getCurrentPlayer(),getData()));  if (m_firstRun && m_validPoliticalActions.isEmpty()) {    return null;  } else {    if (m_firstRun) {      ClipPlayer.play(SoundPath.CLIP_PHASE_POLITICS,getCurrentPlayer());    }    SwingUtilities.invokeLater(null);  }  waitForRelease();  return m_choice;}  }
class C{  public AssignmentProblem(double[][] weight){  n=weight.length;  this.weight=new double[n][n];  for (int i=0; i < n; i++) {    for (int j=0; j < n; j++) {      if (Double.isNaN(weight[i][j]))       throw new IllegalArgumentException("weight " + i + "-"+ j+ " is NaN");      if (weight[i][j] < minWeight)       minWeight=weight[i][j];      this.weight[i][j]=weight[i][j];    }  }  px=new double[n];  py=new double[n];  xy=new int[n];  yx=new int[n];  for (int i=0; i < n; i++)   xy[i]=UNMATCHED;  for (int j=0; j < n; j++)   yx[j]=UNMATCHED;  for (int k=0; k < n; k++) {    assert isDualFeasible();    assert isComplementarySlack();    augment();  }  assert certifySolution();}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  public static String bg(String foreground,String background){  Preconditions.checkArgument(StringUtils.isNotEmpty(foreground),"foreground");  Preconditions.checkArgument(StringUtils.isNotEmpty(background),"background");  return foreground + "," + background;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:55.171 -0500",hash_original_method="60CA42675AB74B8A2A3519AD856C2D26",hash_generated_method="ACA8F4A04230827D73D348D0F6DD0A14") public IvParameterSpec(byte[] iv,int offset,int byteCount){  if ((iv == null) || (iv.length - offset < byteCount)) {    throw new IllegalArgumentException();  }  Arrays.checkOffsetAndCount(iv.length,offset,byteCount);  this.iv=new byte[byteCount];  System.arraycopy(iv,offset,this.iv,0,byteCount);}  }
class C{  public static void copyFiles(InputStream in,OutputStream out) throws IOException {  byte[] buffer=new byte[2048];  int read;  while ((read=in.read(buffer)) != -1) {    out.write(buffer,0,read);  }  out.flush();}  }
class C{  public static Document loadDocument(URL url) throws Exception {  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();  DocumentBuilder builder=factory.newDocumentBuilder();  return builder.parse(url.openStream());}  }
class C{  public ListSelection(List list){  if (list == null) {    throw new NullPointerException("List of list must " + "not be null.");  }  this.list=list;}  }
class C{  @Override public String toString(){  return "cudaResourceViewDesc[" + createString(",") + "]";}  }
class C{  public WriteLockedOffHeapClockCacheFactory(PageSource tableSource,Factory<? extends StorageEngine<? super K,? super V>> storageEngineFactory,int tableSize){  this(tableSource,storageEngineFactory,null,tableSize);}  }
class C{  public LogicAsserter stream(Goal goal){  this.stream=goal.run(Subst.EMPTY);  return this;}  }
class C{  public CUnstarModulesAction(final JFrame parent,final INaviModule[] modules){  super("Unstar module");  m_parent=parent;  m_modules=modules.clone();}  }
class C{  public SolrDocumentList SolrQueryResponse2SolrDocumentList(final SolrQueryRequest req,final SolrQueryResponse rsp){  SolrDocumentList sdl=new SolrDocumentList();  NamedList<?> nl=rsp.getValues();  ResultContext resultContext=(ResultContext)nl.get("response");  DocList response=resultContext == null ? new DocSlice(0,0,new int[0],new float[0],0,0.0f) : resultContext.docs;  sdl.setNumFound(response == null ? 0 : response.matches());  sdl.setStart(response == null ? 0 : response.offset());  String originalName=Thread.currentThread().getName();  if (response != null) {    try {      SolrIndexSearcher searcher=req.getSearcher();      final int responseCount=response.size();      DocIterator iterator=response.iterator();      for (int i=0; i < responseCount; i++) {        int docid=iterator.nextDoc();        Thread.currentThread().setName("EmbeddedSolrConnector.SolrQueryResponse2SolrDocumentList: " + docid);        Document responsedoc=searcher.doc(docid,(Set<String>)null);        SolrDocument sordoc=doc2SolrDoc(responsedoc);        sdl.add(sordoc);      }    } catch (    IOException e) {      ConcurrentLog.logException(e);    }  }  Thread.currentThread().setName(originalName);  return sdl;}  }
class C{  public static void isNotNull(Object object,String message){  if (object == null)   throw new AssertionFailedException("null argument:" + message);}  }
class C{  public static IClasspathAttribute newClasspathAttribute(String name,String value){  return new ClasspathAttribute(name,value);}  }
class C{  public static int findFirstNonSpaceColumnOnTheLine(@NotNull Editor editor,int visualLineNumber){  Document document=editor.getDocument();  VisualPosition visLine=new VisualPosition(visualLineNumber,0);  int logLine=editor.visualToLogicalPosition(visLine).line;  int logLineStartOffset=document.getLineStartOffset(logLine);  int logLineEndOffset=document.getLineEndOffset(logLine);  LogicalPosition logLineStart=editor.offsetToLogicalPosition(logLineStartOffset);  VisualPosition visLineStart=editor.logicalToVisualPosition(logLineStart);  boolean softWrapIntroducedLine=visLineStart.line != visualLineNumber;  if (!softWrapIntroducedLine) {    int offset=findFirstNonSpaceOffsetInRange(document.getCharsSequence(),logLineStartOffset,logLineEndOffset);    if (offset >= 0) {      return EditorUtil.calcColumnNumber(editor,document.getCharsSequence(),logLineStartOffset,offset);    } else {      return -1;    }  }  int lineFeedsToSkip=visualLineNumber - visLineStart.line;  List<? extends SoftWrap> softWraps=editor.getSoftWrapModel().getSoftWrapsForLine(logLine);  for (  SoftWrap softWrap : softWraps) {    CharSequence softWrapText=softWrap.getText();    int softWrapLineFeedsNumber=StringUtil.countNewLines(softWrapText);    if (softWrapLineFeedsNumber < lineFeedsToSkip) {      lineFeedsToSkip-=softWrapLineFeedsNumber;      continue;    }    int softWrapTextLength=softWrapText.length();    boolean skip=true;    for (int j=0; j < softWrapTextLength; j++) {      if (softWrapText.charAt(j) == '\n') {        skip=--lineFeedsToSkip > 0;        continue;      }      if (skip) {        continue;      }      int nextSoftWrapLineFeedOffset=StringUtil.indexOf(softWrapText,'\n',j,softWrapTextLength);      int end=findFirstNonSpaceOffsetInRange(softWrapText,j,softWrapTextLength);      if (end >= 0) {        if (nextSoftWrapLineFeedOffset < 0 || end < nextSoftWrapLineFeedOffset) {          return EditorUtil.calcColumnNumber(editor,softWrapText,j,end);        } else {          return -1;        }      }      if (nextSoftWrapLineFeedOffset >= 0) {        return -1;      }    }    int end=findFirstNonSpaceOffsetInRange(document.getCharsSequence(),softWrap.getStart(),logLineEndOffset);    if (end >= 0) {      return EditorUtil.calcColumnNumber(editor,document.getCharsSequence(),softWrap.getStart(),end);    } else {      return -1;    }  }  return -1;}  }
class C{  public boolean isEqualNode(Node arg){  if (arg == this) {    return true;  }  if (arg.getNodeType() != getNodeType()) {    return false;  }  if (getNodeName() == null) {    if (arg.getNodeName() != null) {      return false;    }  } else   if (!getNodeName().equals(arg.getNodeName())) {    return false;  }  if (getLocalName() == null) {    if (arg.getLocalName() != null) {      return false;    }  } else   if (!getLocalName().equals(arg.getLocalName())) {    return false;  }  if (getNamespaceURI() == null) {    if (arg.getNamespaceURI() != null) {      return false;    }  } else   if (!getNamespaceURI().equals(arg.getNamespaceURI())) {    return false;  }  if (getPrefix() == null) {    if (arg.getPrefix() != null) {      return false;    }  } else   if (!getPrefix().equals(arg.getPrefix())) {    return false;  }  if (getNodeValue() == null) {    if (arg.getNodeValue() != null) {      return false;    }  } else   if (!getNodeValue().equals(arg.getNodeValue())) {    return false;  }  return true;}  }
class C{  public Iterator contextTypes(){  return fContextTypes.values().iterator();}  }
class C{  public MemoryHandler(Handler target,int size,Level pushLevel){  if (target == null || pushLevel == null) {    throw new NullPointerException();  }  if (size <= 0) {    throw new IllegalArgumentException();  }  sealed=false;  configure();  sealed=true;  this.target=target;  this.pushLevel=pushLevel;  this.size=size;  init();}  }
class C{  private <I>I logAndReturnNull(Exception exception){  JmapperLog.ERROR(exception);  return null;}  }
class C{  protected AnimatablePreserveAspectRatioValue(AnimationTarget target){  super(target);}  }
class C{  public void save(File file,String privateKeyPassword) throws IOException {  if (privateKeyPassword == null || privateKeyPassword.length() == 0) {    PKCS8EncodedKeySpec spec=new PKCS8EncodedKeySpec(getPrivateKey().getEncoded());    FileWriter fw=new FileWriter(file);    try {      fw.append(BEGIN_RSA_PRIVATE_KEY);      fw.append(CryptoUtil.base64Encode(spec.getEncoded()));      fw.append(END_RSA_PRIVATE_KEY);    }  finally {      fw.close();    }  } else {    savePemWithBC(file,privateKeyPassword);  }}  }
class C{  public void hyperlinkUpdate(HyperlinkEvent evt){  JEditorPane c=getOutermostJEditorPane();  if (c == null) {    return;  }  if (!(evt instanceof HTMLFrameHyperlinkEvent)) {    c.fireHyperlinkUpdate(evt);    return;  }  HTMLFrameHyperlinkEvent e=(HTMLFrameHyperlinkEvent)evt;  if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {    String target=e.getTarget();    String postTarget=target;    if (target.equals("_parent") && !inNestedFrameSet()) {      target="_top";    }    if (evt instanceof FormSubmitEvent) {      HTMLEditorKit kit=(HTMLEditorKit)c.getEditorKit();      if (kit != null && kit.isAutoFormSubmission()) {        if (target.equals("_top")) {          try {            movePostData(c,postTarget);            c.setPage(e.getURL());          } catch (          IOException ex) {          }        } else {          HTMLDocument doc=(HTMLDocument)c.getDocument();          doc.processHTMLFrameHyperlinkEvent(e);        }      } else {        c.fireHyperlinkUpdate(evt);      }      return;    }    if (target.equals("_top")) {      try {        c.setPage(e.getURL());      } catch (      IOException ex) {      }    }    if (!c.isEditable()) {      c.fireHyperlinkUpdate(new HTMLFrameHyperlinkEvent(c,e.getEventType(),e.getURL(),e.getDescription(),getElement(),e.getInputEvent(),target));    }  }}  }
class C{  public void testSyncSubscriber_doesNotShowSpinnerDuringReload(){  mFakeGlobalEventBus.post(new SyncSucceededEvent());  verify(mFragmentMockUi,times(0)).showSpinner(true);}  }
class C{  public static int updatePrices(String message,double f){  return (int)f;}  }
class C{  public VariableModel(Dim debugger,Object scope){  this.debugger=debugger;  this.root=new VariableNode(scope,"this");}  }
class C{  private List<SwaggerApiListing> concatListings(List<SwaggerApiListing> listingsA,List<SwaggerApiListing> listingsB){  List<SwaggerApiListing> finalList=new ArrayList<>();  listingsA.addAll(listingsB);  for (  SwaggerApiListing listingA : listingsA) {    boolean added=false;    for (    SwaggerApiListing finalListing : finalList) {      if (listingA.getPath().equals(finalListing.getPath())) {        added=true;        finalListing.getOperations().addAll(listingA.getOperations());        break;      }    }    if (!added) {      finalList.add(listingA);    }  }  return finalList;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public void removeEventListener(IRcsServiceRegistrationListener listener){  if (sLogger.isActivated()) {    sLogger.info("Remove a service listener");  }synchronized (mLock) {    mRcsServiceRegistrationEventBroadcaster.removeEventListener(listener);  }}  }
class C{  static public CFrame showWindow(int AD_Window_ID){  for (int i=0; i < s_hiddenWindows.size(); i++) {    CFrame hidden=s_hiddenWindows.get(i);    if (hidden.getAD_Window_ID() == AD_Window_ID) {      s_hiddenWindows.remove(i);      s_log.info(hidden.toString());      hidden.setVisible(true);      int state=hidden.getExtendedState();      if ((state & CFrame.ICONIFIED) > 0)       hidden.setExtendedState(state & ~CFrame.ICONIFIED);      hidden.toFront();      return hidden;    }  }  return null;}  }
class C{  public StringElement reset(){  setTagText("");  return this;}  }
class C{  private static boolean isAuditFieldModif(Object oldValue,Object newValue){  BigDecimal bigDecimalValue=null;  boolean result=true;  if ((oldValue instanceof BigDecimal) && (newValue instanceof Integer)) {    bigDecimalValue=new BigDecimal(((Integer)newValue).toString());    result=!(new EqualsBuilder().append(oldValue,bigDecimalValue).isEquals());  } else {    if ((oldValue instanceof Integer) && (newValue instanceof BigDecimal)) {      bigDecimalValue=new BigDecimal(((Integer)oldValue).toString());      result=!(new EqualsBuilder().append(bigDecimalValue,newValue).isEquals());    } else {      result=!(new EqualsBuilder().append(oldValue,newValue).isEquals());    }  }  return result;}  }
class C{  private boolean isValidSearch(Map<String,List<String>> params,String[] criterias){  for (  String search : criterias) {    if (params.containsKey(search)) {      return true;    }  }  return false;}  }
class C{  private void assertAcquireTokenThrowsException(String subject,String password,TokenSpec spec) throws SsoException {  boolean exceptionThrown=false;  try {    Credential cred=new UsernamePasswordCredential(subject,password);    validSTS.acquireToken(cred,spec);  } catch (  IllegalArgumentException e) {    exceptionThrown=true;  } finally {    assertTrue(exceptionThrown);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Agent a=(Agent)stack.pop();  return (a == null) ? "" : a.getCause(true);}  }
class C{  public synchronized void clear(){  super.clear();  mMaxValues.clear();}  }
class C{  public void unregisterSmsProvisioningReceiver(){  if (mOtpSmsReceiver == null) {    return;  }  if (sLogger.isActivated()) {    sLogger.debug("Unregistering SMS provider receiver");  }  try {    mContext.unregisterReceiver(mOtpSmsReceiver);  } catch (  IllegalArgumentException e) {  }  mOtpSmsReceiver=null;}  }
class C{  public Property millisOfDay(){  return new Property(this,getChronology().millisOfDay());}  }
class C{  public boolean customMessageDiscard(){  return customMsgDiscard;}  }
class C{  public static SegmentCommitInfo writeDoc(Random random,Directory dir,Analyzer analyzer,Similarity similarity,Document doc) throws IOException {  IndexWriter writer=new IndexWriter(dir,new IndexWriterConfig(analyzer).setSimilarity(similarity == null ? IndexSearcher.getDefaultSimilarity() : similarity));  writer.addDocument(doc);  writer.commit();  SegmentCommitInfo info=writer.newestSegment();  writer.close();  return info;}  }
class C{  public NodeIterator selectNodeIterator(Node contextNode,String str) throws TransformerException {  return selectNodeIterator(contextNode,str,contextNode);}  }
class C{  public NBTTagCompound save(NBTTagCompound tag,String key,Object value){  if (value instanceof Boolean) {    tag.setBoolean("isBoolean",true);    tag.setBoolean(key,(boolean)value);  } else   if (value instanceof Byte) {    tag.setBoolean("isBoolean",false);    tag.setByte(key,(byte)value);  } else   if (value instanceof Short) {    tag.setShort(key,(short)value);  } else   if (value instanceof Integer) {    tag.setInteger(key,(int)value);  } else   if (value instanceof Long) {    tag.setLong(key,(long)value);  } else   if (value instanceof Character) {    tag.setInteger(key,(Character)value);  } else   if (value instanceof Float) {    tag.setFloat(key,(float)value);  } else   if (value instanceof Double) {    tag.setDouble(key,(double)value);  } else   if (value instanceof String) {    tag.setString(key,(String)value);  } else   if (value instanceof Data) {    NBTTagCompound innerTag=new NBTTagCompound();    toNative(innerTag,(Data)value);    tag.setTag(key,innerTag);  }  return tag;}  }
class C{  protected final void _skipCR() throws IOException {  if (_inputPtr < _inputEnd || loadMore()) {    if (_inputBuffer[_inputPtr] == BYTE_LF) {      ++_inputPtr;    }  }  ++_currInputRow;  _currInputRowStart=_inputPtr;}  }
class C{  public void updateConnection(Connection connection){  connections.put(connection.handle(),connection);  try {    persistence.updateConnection(connection);  } catch (  PersistenceException e) {    e.printStackTrace();  }}  }
class C{  public void ensureCapacity(int increament) throws BufferOverflowException {  if (buffer.remaining() >= increament) {    return;  }  int requiredCapacity=buffer.capacity() + increament - buffer.remaining();  if (requiredCapacity > m_maxCapacity) {    throw new BufferOverflowException();  }  int tmp=Math.max(requiredCapacity,buffer.capacity() * 2);  int newCapacity=Math.min(tmp,m_maxCapacity);  ByteBuffer newBuffer=ByteBuffer.allocate(newCapacity);  newBuffer.order(buffer.order());  buffer.flip();  newBuffer.put(buffer);  buffer=newBuffer;}  }
class C{  public void logWarning(String message,Throwable cause){  getLog().log(new Status(IStatus.WARNING,pluginId,message,cause));}  }
class C{  public void w(Object str){  if (debug) {    if (logLevel <= Log.WARN) {      String name=getFunctionName();      if (name != null) {        Log.w(tag,name + "\n" + str+ "\n------------------------------------------------------------------------------");      } else {        Log.w(tag,str.toString());      }    }  }}  }
class C{  public String toString(){  return getClass().getName() + "[hgap=" + hgap+ ",vgap="+ vgap+ ",rows="+ rows+ ",cols="+ cols+ "]";}  }
class C{  private CalendarContract(){}  }
class C{  public LookupTranslator(final CharSequence[]... lookup){  lookupMap=new HashMap<>();  int _shortest=Integer.MAX_VALUE;  int _longest=0;  if (lookup != null) {    for (    final CharSequence[] seq : lookup) {      this.lookupMap.put(seq[0].toString(),seq[1]);      final int sz=seq[0].length();      if (sz < _shortest) {        _shortest=sz;      }      if (sz > _longest) {        _longest=sz;      }    }  }  shortest=_shortest;  longest=_longest;}  }
class C{  public String toStringHeader(){  return new ResultMatrixPlainText(this).toStringHeader();}  }
class C{  public static void verifyValueBounds(DateTimeFieldType fieldType,int value,int lowerBound,int upperBound){  if ((value < lowerBound) || (value > upperBound)) {    throw new IllegalFieldValueException(fieldType,Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));  }}  }
class C{  public boolean isMaxValue(Number check){  if (check.doubleValue() > this.maxValue.doubleValue()) {    return true;  }  return false;}  }
class C{  @Inject public ChangeValuePresenter(ChangeValueView view,DebuggerLocalizationConstant constant,DebuggerManager debuggerManager,DebuggerPresenter debuggerPresenter){  this.view=view;  this.debuggerManager=debuggerManager;  this.debuggerPresenter=debuggerPresenter;  this.view.setDelegate(this);  this.constant=constant;}  }
class C{  public void writeTo(ChannelBuffer data){  data.writeBytes(hardwareAddress);  data.writeBytes(new byte[]{0,0});  try {    byte[] name=this.name.getBytes("ASCII");    if (name.length < OFP_MAX_PORT_NAME_LEN) {      data.writeBytes(name);      for (int i=name.length; i < OFP_MAX_PORT_NAME_LEN; ++i) {        data.writeByte((byte)0);      }    } else {      data.writeBytes(name,0,15);      data.writeByte((byte)0);    }  } catch (  UnsupportedEncodingException e) {    throw new RuntimeException(e);  }  data.writeInt(ipv4Addr);  data.writeInt(ipv4AddrMask);}  }
class C{  private static int checkPartPosition(PduPart part){  assert (null != part);  if ((null == mTypeParam) && (null == mStartParam)) {    return THE_LAST_PART;  }  if (null != mStartParam) {    byte[] contentId=part.getContentId();    if (null != contentId) {      if (true == Arrays.equals(mStartParam,contentId)) {        return THE_FIRST_PART;      }    }  }  if (null != mTypeParam) {    byte[] contentType=part.getContentType();    if (null != contentType) {      if (true == Arrays.equals(mTypeParam,contentType)) {        return THE_FIRST_PART;      }    }  }  return THE_LAST_PART;}  }
class C{  protected Suite(Class<?> klass,List<Runner> runners) throws InitializationError {  super(klass);  this.runners=Collections.unmodifiableList(runners);}  }
class C{  public static long parseLongDefault(final String s,final long def){  if (s == null) {    return def;  }  long r;  try {    r=Long.parseLong(s);  } catch (  final NumberFormatException e) {    r=def;  }  return r;}  }
class C{  private Workflow.Method createRestoreResyncRollbackMethod(URI vplexURI,URI vplexVolumeURI,URI mirrorVolumeURI,URI cgURI,String detachStepId){  return new Workflow.Method(RESTORE_RESYNC_RB_METHOD_NAME,vplexURI,vplexVolumeURI,mirrorVolumeURI,cgURI,detachStepId);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.TRACE_PERIOD___TRACE_PERIOD_1:    return getTrace_period_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public Vector multiply(Vector other){  return new Vector(x * other.x,y * other.y,z * other.z);}  }
class C{  static public void simpleBinaryRunDelay(String stepid){  Long elapsedTime=System.currentTimeMillis() - timeSinceLastBinaryRun;  binaryStepCount++;  LOGGER.debug("Binary Step # " + binaryStepCount + "("+ stepid+ ") elapsed time: "+ elapsedTime);  if (verboseLogLevel > 5) {    System.out.println(getTimeNow() + " Binary Step # " + binaryStepCount+ "("+ stepid+ ") elapsed time: "+ elapsedTime);  }  if (binaryRunDelay == 0) {    timeSinceLastBinaryRun=System.currentTimeMillis();    return;  }  if (elapsedTime > binaryRunDelay) {    timeSinceLastBinaryRun=System.currentTimeMillis();    return;  }  if (checkForkInProgress) {    long sleepInterval=binaryRunDelay / 3;    if (sleepInterval < 10) {      sleepInterval=10;    }    long totalSleepTime=sleepInterval;    if (elapsedTime < sleepInterval) {      try {        Thread.sleep(sleepInterval);      } catch (      InterruptedException e) {        e.printStackTrace();      }    }    while (isForkHappening()) {      LOGGER.debug("ForkHappening - Wait on binary Step No." + binaryStepCount + " "+ stepid);      try {        Thread.sleep(sleepInterval);      } catch (      InterruptedException e) {        e.printStackTrace();      }      if (binaryRunDelay < totalSleepTime) {        break;      }      totalSleepTime+=sleepInterval;    }  } else {    simpleWait(binaryRunDelay - elapsedTime);  }  timeSinceLastBinaryRun=System.currentTimeMillis();}  }
class C{  private CloseableReference(SharedReference<T> sharedReference){  mSharedReference=Preconditions.checkNotNull(sharedReference);  sharedReference.addReference();}  }
class C{  public boolean hasKeyColumn(){  return m_hasKeyColumn;}  }
class C{  protected AbstractRpcRequest(Class<?> serviceType,String method,Iterable<?> args){  this(serviceType,method,ImmutableList.copyOf(args));}  }
class C{  private void estimateIM(BayesPm bayesPm,DataSet dataSet){  if (bayesPm == null) {    throw new NullPointerException();  }  if (dataSet == null) {    throw new NullPointerException();  }  BayesUtils.ensureVarsInData(bayesPm.getVariables(),dataSet);  this.estimatedIm=new MlBayesIm(bayesPm,MlBayesIm.RANDOM);  int numNodes=estimatedIm.getNumNodes();  for (int node=0; node < numNodes; node++) {    int numRows=estimatedIm.getNumRows(node);    int numCols=estimatedIm.getNumColumns(node);    int[] parentVarIndices=estimatedIm.getParents(node);    if (nodes[node].getNodeType() == NodeType.LATENT) {      continue;    }    Node nodeObs=observedIm.getNode(nodes[node].getName());    int nodeObsIndex=observedIm.getNodeIndex(nodeObs);    boolean anyParentLatent=false;    for (    int parentVarIndice : parentVarIndices) {      if (nodes[parentVarIndice].getNodeType() == NodeType.LATENT) {        anyParentLatent=true;        break;      }    }    if (anyParentLatent) {      continue;    }    for (int row=0; row < numRows; row++) {      for (int col=0; col < numCols; col++) {        double p=observedIm.getProbability(nodeObsIndex,row,col);        estimatedIm.setProbability(node,row,col,p);      }    }  }}  }
class C{  public Property minuteOfHour(){  return new Property(this,getChronology().minuteOfHour());}  }
class C{  public void updateGestureRotation(float x,float y){  mChart.setRotationAngle(mChart.getAngleForPoint(x,y) - mStartAngle);}  }
class C{  public static List<Envelope> SpatialKnnQueryUsingIndex(RectangleRDD objectRDD,Point queryCenter,Integer k){  if (objectRDD.indexedRDDNoId == null) {    throw new NullPointerException("Need to invoke buildIndex() first, indexedRDDNoId is null");  }  JavaRDD<Envelope> tmp=objectRDD.indexedRDDNoId.mapPartitions(new RectangleKnnJudgementUsingIndex(queryCenter,k));  return tmp.takeOrdered(k,new RectangleDistanceComparator(queryCenter));}  }
class C{  public void onHeadersTransitionStop(boolean withHeaders){}  }
class C{  public TooltipHandlerFX(String id){  super(id,false,false,false,false);}  }
class C{  public FadeAnimation(CustomStage customStage){  this.stage=customStage;  showAnimation=setupShowAnimation();  dismissAnimation=setupDismissAnimation();  sq=new SequentialTransition(setupShowAnimation(),setupDismissAnimation());}  }
class C{  public static boolean checkAttackEntity(EntityPlayer entityPlayer,Entity targetEntity){  final ItemStack item=entityPlayer.getHeldItemMainhand();  if (item != null) {    return true;  }  return true;}  }
class C{  protected void appendMethodParameterName(IMethod method,int index){  fBuffer.append("a");  fBuffer.append(index);}  }
class C{  private static PermissionCollection createUnknownSourcePermissions(){  Permissions permissions=new Permissions();  return permissions;}  }
class C{  protected final static VersionInfo fromMap(String pckg,Map info,ClassLoader clsldr){  if (pckg == null) {    throw new IllegalArgumentException("Package identifier must not be null.");  }  String module=null;  String release=null;  String timestamp=null;  if (info != null) {    module=(String)info.get(PROPERTY_MODULE);    if ((module != null) && (module.length() < 1))     module=null;    release=(String)info.get(PROPERTY_RELEASE);    if ((release != null) && ((release.length() < 1) || (release.equals("${pom.version}"))))     release=null;    timestamp=(String)info.get(PROPERTY_TIMESTAMP);    if ((timestamp != null) && ((timestamp.length() < 1) || (timestamp.equals("${mvn.timestamp}"))))     timestamp=null;  }  String clsldrstr=null;  if (clsldr != null)   clsldrstr=clsldr.toString();  return new VersionInfo(pckg,module,release,timestamp,clsldrstr);}  }
class C{  protected void sendTestMessage(TamsMessage m){  if (log.isDebugEnabled()) {    log.debug("sendTestMessage    [" + m + "]");  }  notifyMessage(m,null);  return;}  }
class C{  public void testMasterLeaveAwareCallable() throws Exception {  Ignite ignite=startGrid(1);  startGrid(2);  final TestBinarylizableMasterLeaveAwareCallable callable=new TestBinarylizableMasterLeaveAwareCallable();  ignite.compute(ignite.cluster().forRemotes()).call(callable);  assert TestBinarylizableCallable.executed.get();  assert TestBinarylizableCallable.writeCalled.get();  assert TestBinarylizableCallable.readCalled.get();  assert TestBinarylizableMasterLeaveAwareCallable.writeCalled.get();  assert TestBinarylizableMasterLeaveAwareCallable.readCalled.get();}  }
class C{  void this_windowClosing(WindowEvent e){  setCancel(true);  dispose();}  }
class C{  @Override public int compare(Map.Entry<List<String>,List<Double>> e1,Map.Entry<List<String>,List<Double>> e2){  int r=0;  List<String> keyList1=e1.getKey();  List<Double> valueList1=e1.getValue();  List<String> keyList2=e2.getKey();  List<Double> valueList2=e2.getValue();  for (  SortOption so : sortOptions) {    int index=so.getIndex();    if (index == -1) {      continue;    }    if (!so.isInGroupby()) {      Double value1=valueList1.get(index);      Double value2=valueList2.get(index);      r=value1.compareTo(value2);    } else {      String key1=keyList1.get(index);      String key2=keyList2.get(index);      r=key1.compareTo(key2);    }    if (r == 0)     continue;    if (!so.isAscendant()) {      r=-r;    }    return r;  }  if (r == 0) {    return new GroupbyFieldsComparator().compare(keyList1,keyList2);  }  return r;}  }
class C{  int size(){  return count;}  }
class C{  public Dimension(Dimension d){  this.width=d.width;  this.height=d.height;}  }
class C{  public Database(Context context){  super(context,DATABASE_NAME,null,DATABASE_VERSION);}  }
class C{  @Nullable private View findStartView(RecyclerView recyclerView){  int attachedViewCount=recyclerView.getLayoutManager().getChildCount();  if (parentStart == Integer.MIN_VALUE) {    recyclerView.getLocationInWindow(windowLocation);    parentStart=orientation == LayoutOrientation.HORIZONTAL ? windowLocation[0] : windowLocation[1];  }  for (int viewIndex=0; viewIndex < attachedViewCount; viewIndex++) {    View view=recyclerView.getLayoutManager().getChildAt(viewIndex);    view.getLocationInWindow(windowLocation);    int startLoc=orientation == LayoutOrientation.HORIZONTAL ? windowLocation[0] : windowLocation[1];    if (startLoc <= parentStart) {      return view;    }  }  return null;}  }
class C{  public ChunkedOutputStream(OutputStream stream) throws IOException {  this(stream,2048);}  }
class C{  public UdpInputStream(DatagramSocket newSocket){  this();  setSocket(newSocket);}  }
class C{  public boolean isEnabled(){  return myEnabled;}  }
class C{  public void runTest() throws Throwable {  Document doc;  EntityReference entRef;  boolean success;  doc=(Document)load("staffNS",false);  entRef=doc.createEntityReference("ent1");  assertNotNull("createdEntRefNotNull",entRef);  success=entRef.isSupported("XML CORE","");  assertFalse("nodeissupported04",success);}  }
class C{  public static int appendChar(Automaton a,int state,int c){  int newState=a.createState();  a.addTransition(state,newState,c,c);  return newState;}  }
class C{  private boolean isSupplierSetsInvoiceASDefault(){  return Boolean.parseBoolean(configService.getConfigurationSetting(ConfigurationKey.SUPPLIER_SETS_INVOICE_AS_DEFAULT,Configuration.GLOBAL_CONTEXT).getValue());}  }
class C{  public void propertyChange(PropertyChangeEvent evt){  if (m_stopediting)   return;  if (evt.getPropertyName().equals(GridField.PROPERTY)) {    m_inserting=GridField.INSERTING.equals(evt.getOldValue());    setValue(evt.getNewValue());    m_inserting=false;  }}  }
class C{  public static void main(String[] args){  runFileLoader(new C45Loader(),args);}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  count.set(0);  last=head=new Node<E>(null);  for (; ; ) {    @SuppressWarnings("unchecked") E item=(E)s.readObject();    if (item == null)     break;    add(item);  }}  }
class C{  public TerminalSeqSetf(Terminal[]... sequences){  super();  for (  Terminal[] seqArr : sequences) {    this.set.add(new TerminalSeqf(seqArr));  }  this.maxLength=super.getMaxLength();  this.hashCode=calcHashCode();}  }
class C{  private void processQueue(){  Packet p=null;  try {    p=queue.take();  } catch (  InterruptedException e) {    if (Cfg.DEBUG) {      Check.log(TAG + " (processQueue) Error: " + e);    }  }  if (Cfg.DEBUG) {  }switch (p.getCommand()) {case EvidenceBuilder.LOG_CREATE:    createEv(p);  break;case EvidenceBuilder.LOG_ATOMIC:atomicEv(p);break;case EvidenceBuilder.LOG_APPEND:appendEv(p);break;case EvidenceBuilder.LOG_WRITE:writeEv(p);break;case EvidenceBuilder.LOG_ITEMS:itemsEv(p);break;case EvidenceBuilder.LOG_CLOSE:closeEv(p);break;case EvidenceBuilder.INTERRUPT:if (Cfg.DEBUG) {Check.log(TAG + " (processQueue), INTERRUPT");}halt=true;break;default :if (Cfg.DEBUG) {Check.log(TAG + " Error: " + "processQueue() got LOG_UNKNOWN");}break;}return;}  }
class C{  public ClusterSearchShardsRequest routing(String... routings){  this.routing=Strings.arrayToCommaDelimitedString(routings);  return this;}  }
class C{  private void appendTextures(PrintWriter out){  for (  UV uv : exportTexCoords) {    BigDecimal uRound=new BigDecimal(uv.u).setScale(9,RoundingMode.HALF_UP);    BigDecimal vRound=new BigDecimal(uv.v).setScale(9,RoundingMode.HALF_UP);    out.print("vt " + uRound.toPlainString() + " "+ vRound.toPlainString());    out.println();  }}  }
class C{  protected void printStartOfEmbeddedStatement(StringBuilder ddl){  println(",",ddl);  printIndent(ddl);}  }
class C{  private boolean contains(int s){  return (indexOf(s,0) >= 0);}  }
class C{  public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (obj instanceof AnnotationMember) {    AnnotationMember that=(AnnotationMember)obj;    if (name.equals(that.name) && tag == that.tag) {      if (tag == ARRAY) {        return equalArrayValue(that.value);      } else       if (tag == ERROR) {        return false;      } else {        return value.equals(that.value);      }    }  }  return false;}  }
class C{  public static void assertSame(Object expected,Object actual){  if (expected != actual) {    throw new RuntimeException("EXPECTED: " + expected + "; ACTUAL: "+ actual);  }}  }
class C{  public MBeanParameterInfo(String name,String type,String description){  this(name,type,description,(Descriptor)null);}  }
class C{  public String findMostSpecific(String attributeType){  pos=0;  beg=0;  end=0;  cur=0;  chars=dn.toCharArray();  String attType=nextAT();  if (attType == null) {    return null;  }  while (true) {    String attValue="";    if (pos == length) {      return null;    }switch (chars[pos]) {case '"':      attValue=quotedAV();    break;case '#':  attValue=hexAV();break;case '+':case ',':case ';':break;default :attValue=escapedAV();}if (attributeType.equalsIgnoreCase(attType)) {return attValue;}if (pos >= length) {return null;}if (chars[pos] == ',' || chars[pos] == ';') {} else if (chars[pos] != '+') {throw new IllegalStateException("Malformed DN: " + dn);}pos++;attType=nextAT();if (attType == null) {throw new IllegalStateException("Malformed DN: " + dn);}}}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public int hashCode(){  return _index * 13;}  }
class C{  @Override public void draw(Graphics2D g2,CategoryPlot plot,Rectangle2D dataArea,CategoryAxis domainAxis,ValueAxis rangeAxis){  CategoryDataset dataset=plot.getDataset();  int catIndex=dataset.getColumnIndex(this.category);  int catCount=dataset.getColumnCount();  float anchorX=0.0f;  float anchorY=0.0f;  PlotOrientation orientation=plot.getOrientation();  RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(plot.getDomainAxisLocation(),orientation);  RectangleEdge rangeEdge=Plot.resolveRangeAxisLocation(plot.getRangeAxisLocation(),orientation);  if (orientation == PlotOrientation.HORIZONTAL) {    anchorY=(float)domainAxis.getCategoryJava2DCoordinate(this.categoryAnchor,catIndex,catCount,dataArea,domainEdge);    anchorX=(float)rangeAxis.valueToJava2D(this.value,dataArea,rangeEdge);  } else   if (orientation == PlotOrientation.VERTICAL) {    anchorX=(float)domainAxis.getCategoryJava2DCoordinate(this.categoryAnchor,catIndex,catCount,dataArea,domainEdge);    anchorY=(float)rangeAxis.valueToJava2D(this.value,dataArea,rangeEdge);  }  g2.setFont(getFont());  g2.setPaint(getPaint());  TextUtilities.drawRotatedString(getText(),g2,anchorX,anchorY,getTextAnchor(),getRotationAngle(),getRotationAnchor());}  }
class C{  protected long expireAndGrantLocks(Iterator grants){  long smallestExpire=Long.MAX_VALUE;  while (grants.hasNext()) {    DLockGrantToken grant=(DLockGrantToken)grants.next();    if (grant.isDestroyed()) {      continue;    }    long expire=grant.expireAndGrantLock();    if (expire < smallestExpire) {      smallestExpire=expire;    }  }  return smallestExpire;}  }
class C{  public void debug(Object message){  log(LogSystem.DEBUG_ID,message);}  }
class C{  public AttributedCharacterSpanIterator(AttributedCharacterIterator aci,int start,int stop){  this.aci=aci;  end=Math.min(aci.getEndIndex(),stop);  begin=Math.max(aci.getBeginIndex(),start);  this.aci.setIndex(begin);}  }
class C{  void initializeIncludedList(){  _includedMastAppearancesList=new ArrayList<SignalMastAppearances>();  for (int i=0; i < _mastAppearancesList.size(); i++) {    if (_mastAppearancesList.get(i).isIncluded()) {      _includedMastAppearancesList.add(_mastAppearancesList.get(i));    }  }  _includedSignalList=new ArrayList<SignalGroupSignal>();  for (int i=0; i < _signalList.size(); i++) {    if (_signalList.get(i).isIncluded()) {      _includedSignalList.add(_signalList.get(i));    }  }}  }
class C{  public boolean execute(){  setStatus(ControllerPlan.IN_PROGRESS);  ControllerMemory.insert(this);  if (Controller.options.BACKGROUND_RECOMPILATION || getCompPlan().getMethod().getDeclaringClass().isInBootImage()) {    Controller.compilationQueue.insert(getPriority(),this);    AOSLogging.logger.recompilationScheduled(getCompPlan(),getPriority());    return true;  } else {    getCompPlan().getMethod().replaceCompiledMethod(null);    return true;  }}  }
class C{  @Override public int hashCode(){  return date.hashCode() ^ time.hashCode();}  }
class C{  public static Query toQuery(Object o) throws PageException {  if (o instanceof Query)   return (Query)o;  if (o instanceof ObjectWrap) {    return toQuery(((ObjectWrap)o).getEmbededObject());  }  if (o instanceof ResultSet)   return new QueryImpl((ResultSet)o,"query",ThreadLocalPageContext.getTimeZone());  if (o instanceof Component) {    Member member=((Component)o).getMember(Component.ACCESS_PRIVATE,KeyConstants.__toQuery,false,false);    if (member instanceof UDFPlus) {      UDFPlus udf=(UDFPlus)member;      if (udf.getReturnType() == CFTypes.TYPE_QUERY && udf.getFunctionArguments().length == 0) {        return Caster.toQuery(((Component)o).call(ThreadLocalPageContext.get(),KeyConstants.__toQuery,new Object[]{}));      }    }  }  throw new CasterException(o,"query");}  }
class C{  public boolean isProcessedOK(){  return m_ok;}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INJECTOR_DB\"";  db.execSQL(sql);}  }
class C{  public void addShutdownLatch(final CountDownLatch latch){synchronized (this) {    if (m_isShutDown) {      releaseLatch(latch);      return;    }    m_latchesToCloseOnShutdown.add(latch);  }}  }
class C{  protected void inorder(TreeNode<E> root){  if (root == null)   return;  inorder(root.left);  System.out.print(root.element + " ");  inorder(root.right);}  }
class C{  public Object put(Object o1,Object o2,Object value){  int hash=hashCode(o1,o2) & 0x7FFFFFFF;  int index=hash % table.length;  for (Entry e=table[index]; e != null; e=e.next) {    if ((e.hash == hash) && e.match(o1,o2)) {      Object old=e.value;      e.value=value;      return old;    }  }  int len=table.length;  if (count++ >= (len - (len >> 2))) {    rehash();    index=hash % table.length;  }  Entry e=new Entry(hash,o1,o2,value,table[index]);  table[index]=e;  return null;}  }
class C{  public static <T>Permutations<T> create(T[] in,T[] out){  return new Permutations<T>(in,out,in.length);}  }
class C{  private void initQuestAndAddToWorld(final IQuest quest){  logger.info("Loading Quest: " + quest.getName());  quest.addToWorld();  quests.add(quest);}  }
class C{  public SnackbarBuilder appendMessage(CharSequence message,@ColorInt int color){  initialiseAppendMessages();  Spannable spannable=new SpannableString(message);  spannable.setSpan(new ForegroundColorSpan(color),0,spannable.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);  appendMessages.append(spannable);  return this;}  }
class C{  public BlockHeight(final long height){  super(height,BlockHeight.class);  if (this.getRaw() <= 0) {    throw new IllegalArgumentException("height must be positive");  }}  }
class C{  public void verifyCompleted(boolean arg0,String arg1){  _log.debug("verifyCompleted: " + arg0 + " "+ arg1);}  }
class C{  public static int ccw(Point2D a,Point2D b,Point2D c){  double area2=(b.x - a.x) * (c.y - a.y) - (b.y - a.y) * (c.x - a.x);  if (area2 < 0)   return -1; else   if (area2 > 0)   return +1; else   return 0;}  }
class C{  public boolean isMessageImprintDataFound(){  return messageImprintDataFound;}  }
class C{  public void addPropertyChangeListener(PropertyChangeListener pcl){  m_pcSupport.addPropertyChangeListener(pcl);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.ARRAY_LIKE__DECLARED_ELEMENT_TYPE:    return declaredElementType != null;}return super.eIsSet(featureID);}  }
class C{  private boolean adviseEldestGatewaySender(){  Profile[] snapshot=this.profiles;  TreeSet<Long> senderStartTimes=new TreeSet<Long>();  for (  Profile profile : snapshot) {    GatewaySenderProfile sp=(GatewaySenderProfile)profile;    if (!sp.isParallel && sp.isRunning) {      senderStartTimes.add(sp.startTime);    }  }  return (senderStartTimes.isEmpty()) || (this.sender.isRunning() && (this.sender.startTime <= senderStartTimes.first()));}  }
class C{  private void addTooltipTextView(String tooltipText,String fieldId,ViewGroup rowView,Integer drawableId){  LinearLayout tooltipLayout=new LinearLayout(rowView.getContext());  tooltipLayout.setOrientation(LinearLayout.VERTICAL);  tooltipLayout.setBackgroundResource(R.drawable.tooltip_text_background);  tooltipLayout.setTag(TOOLTIP_TAG + fieldId);  LayoutParams tooltipLayoutParams=new LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT);  tooltipLayoutParams.setMargins(TOOLTIP_TEXT_MARGIN,TOOLTIP_TEXT_MARGIN,TOOLTIP_TEXT_MARGIN,TOOLTIP_TEXT_MARGIN);  TextView tooltipTextView=new TextView(rowView.getContext());  tooltipTextView.setText(tooltipText);  tooltipLayout.addView(tooltipTextView,new LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT));  if (drawableId != null && drawableId > 0) {    ImageView tooltipImageView=new ImageView(rowView.getContext());    tooltipImageView.setImageResource(drawableId);    tooltipLayout.addView(tooltipImageView,new LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT));  }  ViewGroup parentViewGroup=(ViewGroup)rowView.getParent();  parentViewGroup.addView(tooltipLayout,parentViewGroup.indexOfChild(rowView) + 1,tooltipLayoutParams);}  }
class C{  public void removeOnItemTouchListener(RecyclerView.OnItemTouchListener listener){  mRecycler.removeOnItemTouchListener(listener);}  }
class C{  public static Queue createQueue(final String name){  return ActiveMQDestination.createQueue(name);}  }
class C{  public final static long murmurHash3(long x){  x^=x >>> 33;  x*=0xff51afd7ed558ccdL;  x^=x >>> 33;  x*=0xc4ceb9fe1a85ec53L;  x^=x >>> 33;  return x;}  }
class C{  private Set<Map<String,BytecodeInstruction>> toRememberableBytecodeInstructionMap(Set<Map<String,VariableDefinition>> activeDefMaps){  Set<Map<String,BytecodeInstruction>> r=new HashSet<Map<String,BytecodeInstruction>>();  for (  Map<String,VariableDefinition> activeDefMap : activeDefMaps) {    Map<String,BytecodeInstruction> instructionMap=new HashMap<String,BytecodeInstruction>();    for (    String var : activeDefMap.keySet()) {      VariableDefinition activeDef=activeDefMap.get(var);      if (activeDef.getDefinition().isLocalDU())       continue;      instructionMap.put(var,activeDef.getDefinition());    }    r.add(instructionMap);  }  return r;}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == Type.class) {switch (baseOperationID) {case TypesPackage.TYPE___IS_FINAL:      return TypesPackage.ANY_TYPE___IS_FINAL;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public static boolean isSorted(char[] array){  if (array == null || array.length < 2) {    return true;  }  char previous=array[0];  final int n=array.length;  for (int i=1; i < n; i++) {    final char current=array[i];    if (CharUtils.compare(previous,current) > 0) {      return false;    }    previous=current;  }  return true;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:14.684 -0500",hash_original_method="FF4C7212103FFBD9D2780D404E5A05FB",hash_generated_method="7BF91F071252BD0D49C93659143BB712") private void makeRoom(){  if (size <= MAX_SIZE) {    return;  }  indexFiles();  int removals=size - MAX_SIZE;  Iterator<File> i=accessOrder.values().iterator();  do {    delete(i.next());    i.remove();  } while (--removals > 0);}  }
class C{  public void add(Object key,BufferedImage image){  if (key == null) {    String msg=Logging.getMessage("nullValue.KeyIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (image == null) {    String msg=Logging.getMessage("nullValue.ImageIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (image.getWidth() + 2 > this.maxWidth || image.getHeight() + 2 > this.maxHeight) {    String msg=Logging.getMessage("TextureAtlas.ImageTooLarge",key);    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  try {    this.doAdd(key,image);  } catch (  Exception e) {    String msg=Logging.getMessage("TextureAtlas.AtlasIsFull",key);    Logging.logger().severe(msg);    throw new WWRuntimeException(msg);  }}  }
class C{  @SuppressWarnings("unchecked") protected void applyAttributesTo(Figure that){  for (  Map.Entry<AttributeKey,Object> entry : attributes.entrySet()) {    that.set(entry.getKey(),entry.getValue());  }}  }
class C{  public static NinePatch createNinePatch(InputStream stream,boolean is9Patch,boolean convert) throws IOException {  return NinePatch.load(stream,is9Patch,convert);}  }
class C{  public AlbumDataImpl(ExtensionPoint extensionPoint){  super(extensionPoint);  pointData=new PointDataImpl(extensionPoint);  boundingBoxData=new BoxDataImpl(extensionPoint);  mediaData=new MediaDataImpl(extensionPoint);}  }
class C{  public void loadModel(ModelReader reader) throws IOException {  param=new Param(reader);  nodes=new Node[param.num_nodes];  for (int i=0; i < param.num_nodes; i++) {    nodes[i]=new Node(reader);  }  stats=new RTreeNodeStat[param.num_nodes];  for (int i=0; i < param.num_nodes; i++) {    stats[i]=new RTreeNodeStat(reader);  }}  }
class C{  private ResultContentEvent newResultContentEvent(double[] prediction,InstanceContentEvent inEvent){  ResultContentEvent rce=new ResultContentEvent(inEvent.getInstanceIndex(),inEvent.getInstance(),inEvent.getClassId(),prediction,inEvent.isLastEvent());  rce.setClassifierIndex(this.processorId);  rce.setEvaluationIndex(inEvent.getEvaluationIndex());  return rce;}  }
class C{  public void moduleValueChanged(String key,Object newValue){  this.currentEnergy=(Double)newValue;}  }
class C{  public String toString(){  return toXML(false);}  }
class C{  public void start(){  if (running) {    return;  }  running=true;  notifyJobConsumer();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:53.366 -0500",hash_original_method="4FE582D960848B41E26F8E6C418819DF",hash_generated_method="78DCC3D9F18822F61C1519A8CA3EDD7A") public CharSequence loadLabel(PackageManager pm){  return mReceiver.loadLabel(pm);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-01-27 09:54:40.349 -0500",hash_original_method="F893922E2C2E4CF6AF95C190516DB394",hash_generated_method="FDE8D96477E28E3BDD367BAF0ED08001") public LongSparseArray(){  this(10);}  }
class C{  public static void importExpressionSubstitutions(final CConnection connection,final int rawModuleId,final int moduleId) throws SQLException {  Preconditions.checkNotNull(connection,"IE00433: connection argument can not be null");  final String query="INSERT INTO " + CTableNames.EXPRESSION_SUBSTITUTIONS_TABLE + " (module_id, address, position, expression_id, replacement) "+ " SELECT "+ moduleId+ " , address, position, expression_node_id, replacement "+ " FROM ex_"+ rawModuleId+ "_expression_substitutions";  connection.executeUpdate(query,true);}  }
class C{  private QueryExp buildQueryExp(final String pidAttribute,final String[] attributes,final Object[] values){  final QueryExp optionalAttributes=buildOptionalQueryExp(attributes,values);  QueryExp constraint;  if (optionalAttributes != null) {    constraint=Query.and(optionalAttributes,Query.eq(Query.attr(pidAttribute),Query.value(this.pid)));  } else {    constraint=Query.eq(Query.attr(pidAttribute),Query.value(this.pid));  }  return constraint;}  }
class C{  public synchronized final int evictionCount(){  return evictionCount;}  }
class C{  public void forcePut(E e) throws InterruptedException {  if (e == null)   throw new NullPointerException();  int c=-1;  final ReentrantLock putLock=this.putLock;  final AtomicInteger count=this.count;  putLock.lockInterruptibly();  try {    enqueue(e);    c=count.getAndIncrement();    if (c + 1 < capacity)     notFull.signal();  }  finally {    putLock.unlock();  }  if (c == 0)   signalNotEmpty();}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  @Override public void beforePhase(PhaseEvent event){  PhaseListener listener=getPhaseListener();  if (listener != null) {    listener.beforePhase(event);  }}  }
class C{  public static double min(final double a,final double b){  if (Double.isNaN(a)) {    return b;  } else   if (Double.isNaN(b)) {    return a;  } else {    return Math.min(a,b);  }}  }
class C{  public void autoFeatureSample(){  featureSamples=-1;}  }
class C{  protected static CompiledMethod fallback(NormalMethod method){  return baselineCompile(method);}  }
class C{  public void toggleRow(int position){  this.opened[position]=!this.opened[position];  notifyDataSetChanged();}  }
class C{  private void appendPath(Path cp,final Path p){  if (p != null && p.size() > 0) {    cp.append(p);  }}  }
class C{  Set<String> createDisjunctiveNormalForm(Query q){  List<Conjunction> dnf=QueryFilter.createDisjunctiveNormalForm(q);  Set<String> ret=new HashSet<>();  for (  Conjunction c : dnf) {    ret.add(c.toString());  }  return ret;}  }
class C{  public Map<Integer,Integer> popMissing(){  HashMap<Integer,Integer> map=new HashMap<>();  for (int i=0; i < missingBlocks.length; i++) {    int count=missingBlocks[i];    if (count > 0) {      map.put(i,count);    }  }  Arrays.fill(missingBlocks,0);  return map;}  }
class C{  public static String urlEncodePostalAddress(GenericValue postalAddress) throws GenericEntityException, UnsupportedEncodingException {  Assert.notNull("postalAddress",postalAddress);  if (!"PostalAddress".equals(postalAddress.getEntityName())) {    throw new IllegalArgumentException("postalAddress argument is not a PostalAddress entity");  }  StringBuilder sb=new StringBuilder();  if (postalAddress.get("address1") != null) {    sb.append(postalAddress.get("address1"));  }  if (postalAddress.get("address2") != null) {    sb.append(", ").append(postalAddress.get("address2"));  }  if (postalAddress.get("city") != null) {    sb.append(", ").append(postalAddress.get("city"));  }  if (postalAddress.get("stateProvinceGeoId") != null) {    GenericValue geoValue=postalAddress.getRelatedOne("StateProvinceGeo",false);    if (geoValue != null) {      sb.append(", ").append(geoValue.get("geoName"));    }  } else   if (postalAddress.get("countyGeoId") != null) {    GenericValue geoValue=postalAddress.getRelatedOne("CountyGeo",false);    if (geoValue != null) {      sb.append(", ").append(geoValue.get("geoName"));    }  }  if (postalAddress.get("postalCode") != null) {    sb.append(", ").append(postalAddress.get("postalCode"));  }  if (postalAddress.get("countryGeoId") != null) {    GenericValue geoValue=postalAddress.getRelatedOne("CountryGeo",false);    if (geoValue != null) {      sb.append(", ").append(geoValue.get("geoName"));    }  }  String postalAddressString=sb.toString().trim();  while (postalAddressString.contains("  ")) {    postalAddressString=postalAddressString.replace("  "," ");  }  return URLEncoder.encode(postalAddressString,"UTF-8");}  }
class C{  Vset check(Environment env,Context ctx,Vset vset,Hashtable exp){  vset=reach(env,vset);  Hashtable newexp=new Hashtable();  CheckContext newctx1=new CheckContext(ctx,this);  Vset vset1=body.check(env,newctx1,vset.copy(),newexp).join(newctx1.vsBreak);  CheckContext newctx2=new CheckContext(ctx,this);  newctx2.vsContinue=null;  Vset vset2=finalbody.check(env,newctx2,vset,exp);  finallyCanFinish=!vset2.isDeadEnd();  vset2=vset2.join(newctx2.vsBreak);  if (finallyCanFinish) {    for (Enumeration e=newexp.keys(); e.hasMoreElements(); ) {      Object def=e.nextElement();      exp.put(def,newexp.get(def));    }  }  return ctx.removeAdditionalVars(vset1.addDAandJoinDU(vset2));}  }
class C{  protected void checkIfClassIsExcluded(){}  }
class C{  HeapAnotB(long seed){  seedHash_=computeSeedHash(seed);}  }
class C{  protected double[][] cycltrans(double[][] matrix,int m,int n){  int ys=matrix.length;  int xs=matrix[0].length;  m=((m % ys) + ys) % ys;  n=((n % xs) + xs) % xs;  double[][] doublematrix=new double[ys + ys][xs + xs];  for (int i=0; i < doublematrix.length; i++) {    for (int j=0; j < doublematrix[i].length; j++) {      doublematrix[i][j]=matrix[i % ys][j % xs];    }  }  double[][] res=new double[ys][xs];  for (int i=0; i < ys; i++) {    for (int j=0; j < xs; j++) {      res[i][j]=doublematrix[i + m % ys][j + n % xs];    }  }  return res;}  }
class C{  @Override public void windowClosed(WindowEvent e){}  }
class C{  public void parseAmount(final String str,final ErrorDrain errors){  try {    final String numberString=str.replace(',','.');    setAmount((int)Math.round(Double.parseDouble(numberString)));    setType(new ExpressionType(ExpressionType.NUMERAL));    normalized=amount.toString();  } catch (  final NumberFormatException e) {    errors.setError("illegal number format: '" + str + "'");  }}  }
class C{  public IMouseState createBackgroundClickedLeftState(final MouseEvent event){  final CBackgroundClickedLeftState<NodeType> state=new CBackgroundClickedLeftState<NodeType>(this,m_graph);  m_factory.createBackgroundClickedLeftAction().execute(state,event);  return state;}  }
class C{  public void freeMemory(){  getInputPorts().freeMemory();  getOutputPorts().freeMemory();}  }
class C{  public void testWriteBytes() throws IOException {  int size=0;  while (size < 16 * 1024) {    testWriteBytes(size,false);    testWriteBytes(size,true);    size+=512;  }}  }
class C{  public final void printSummary(){  this.reportCoverage();  if (TLCGlobals.tool) {    MP.printMessage(EC.TLC_PROGRESS_SIMU,String.valueOf(this.numOfGenStates));  }  MP.printMessage(EC.TLC_STATS_SIMU,new String[]{String.valueOf(this.numOfGenStates),String.valueOf(this.seed),String.valueOf(this.aril)});}  }
class C{  static String convertTableToClassName(String tableName){  String[] chunks=StringUtils.arraySplit(tableName,'_',false);  StringBuilder className=new StringBuilder();  for (  String chunk : chunks) {    if (chunk.length() == 0) {      continue;    }    className.append(Character.toUpperCase(chunk.charAt(0)));    className.append(chunk.substring(1).toLowerCase());  }  return className.toString();}  }
class C{  private void consolidate(){  table.clear();  Node<Key> x=head;  int maxOrder=0;  min=head;  Node<Key> y=null, z=null;  do {    y=x;    x=x.next;    z=table.get(y.order);    while (z != null) {      table.remove(y.order);      if (greater(y.key,z.key)) {        link(y,z);        y=z;      } else {        link(z,y);      }      z=table.get(y.order);    }    table.put(y.order,y);    if (y.order > maxOrder)     maxOrder=y.order;  } while (x != head);  head=null;  for (  Node<Key> n : table.values()) {    min=greater(min.key,n.key) ? n : min;    head=insert(n,head);  }}  }
class C{  private double fitness(Solution solution,double[] weights){  double max=Double.NEGATIVE_INFINITY;  for (int i=0; i < solution.getNumberOfObjectives(); i++) {    max=Math.max(max,Math.max(weights[i],0.0001) * Math.abs(solution.getObjective(i) - idealPoint[i]));  }  if (solution.violatesConstraints()) {    max+=10000.0;  }  return max;}  }
class C{  public Boolean isProtocolEndpoint(){  return protocolEndpoint;}  }
class C{  private static void updateWindowUI(Window window){  SwingUtilities.updateComponentTreeUI(window);  Window ownedWins[]=window.getOwnedWindows();  for (  Window ownedWin : ownedWins) {    updateWindowUI(ownedWin);  }}  }
class C{  protected boolean isSharedStore(){  return false;}  }
class C{  public String jsFunction_readLine() throws IOException {  return getReader().readLine();}  }
class C{  public boolean isAccrual(){  Object oo=get_Value(COLUMNNAME_IsAccrual);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean addScoreForPlayer(String playerName,long score){  if (!hasPlayer(playerName)) {    return false;  }  long currentScore=0L;  if (gameData.getScores().containsKey(playerName)) {    currentScore=gameData.getScores().get(playerName);  }  gameData.getScores().put(playerName,Long.valueOf(currentScore + score));  return true;}  }
class C{  public boolean hasResult(IAllocNode node){  return this.allocNodeToVAModelMap.containsKey(node) && !this.allocNodeToVAModelMap.get(node).invalidated();}  }
class C{  public void testDivideExpEqualsZero(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=-15;  String b="747233429293018787918347987234564568";  int bScale=10;  String c="1.64769459009933764189139568605273529E+40";  int resScale=-5;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_CEILING);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  private long elapsedTime(){  long startTime=log.getDate().getTime();  if (task.getEndTime() != null) {    return task.getEndTime().getTimeInMillis() - startTime;  } else {    return System.currentTimeMillis() - startTime;  }}  }
class C{  public static CharSequence trimTrailingWhitespace(CharSequence source){  if (source == null)   return "";  int i=source.length();  while (--i >= 0 && Character.isWhitespace(source.charAt(i))) {  }  return source.subSequence(0,i + 1);}  }
class C{  public void handle(final HttpServerRequest req,final Buffer bodyData){  monitoringHandler.updateRequestsMeter(target,req.uri());  monitoringHandler.updateRequestPerRuleMonitoring(req,rule.getMetricName());  final String targetUri=urlPattern.matcher(req.uri()).replaceAll(rule.getPath()).replaceAll("\\/\\/","/");  final Logger log=RequestLoggerFactory.getLogger(Forwarder.class,req);  log.debug("Forwarding request: " + req.uri() + " to "+ rule.getScheme()+ "://"+ target+ targetUri+ " with rule "+ rule.getRuleIdentifier());  final String userId=extractUserId(req,log);  if (userId != null && rule.getProfile() != null && userProfilePath != null) {    log.debug("Get profile information for user '" + userId + "' to append to headers");    String userProfileKey=String.format(userProfilePath,userId);    req.pause();    storage.get(userProfileKey,null);  } else {    handleRequest(req,bodyData,targetUri,log,null);  }}  }
class C{  public boolean allowsCoreThreadTimeOut(){  return allowCoreThreadTimeOut;}  }
class C{  @DSComment("Animation class") @DSSafe(DSCat.ANDROID_ANIMATION) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:35.564 -0500",hash_original_method="7A2DAA3629AD92EDC2DFD0D78B3421C9",hash_generated_method="13FDA7CA700C3F2B682BF97543D98984") public static ObjectAnimator ofFloat(Object target,String propertyName,float... values){  ObjectAnimator anim=new ObjectAnimator(target,propertyName);  anim.setFloatValues(values);  return anim;}  }
class C{  public boolean addFragmentAllocToInitLayout_ID(String strId){  logger.info("addFragmentAllocForInitLayout view ID {} ",strId);  Integer intId=mNumberToIDMap.inverse().get(strId);  if (intId == null) {    logger.warn("No matching numeric Id for {} ",strId);    return false;  }  SootMethod method=lookupGetUi_ID(intId);  if (method == null) {    logger.warn("findFragmentByID_{} is NULL ",String.format("%08x",intId));    return false;  }  Expr invokeExpr=Jimple.v().newStaticInvokeExpr(method.makeRef(),mArgContext);  Stmt stmt=Jimple.v().newInvokeStmt(invokeExpr);  Chain<Unit> units=mInitLayoutBody.getUnits();  units.add(stmt);  return true;}  }
class C{  public String invoice(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  if (isCalloutActive())   return "";  Integer C_Invoice_ID=(Integer)value;  if (C_Invoice_ID == null || C_Invoice_ID.intValue() == 0) {    mTab.setValue("C_Currency_ID",null);    return "";  }  int C_InvoicePaySchedule_ID=0;  if (Env.getContextAsInt(ctx,WindowNo,Env.TAB_INFO,"C_Invoice_ID") == C_Invoice_ID.intValue() && Env.getContextAsInt(ctx,WindowNo,Env.TAB_INFO,"C_InvoicePaySchedule_ID") != 0)   C_InvoicePaySchedule_ID=Env.getContextAsInt(ctx,WindowNo,Env.TAB_INFO,"C_InvoicePaySchedule_ID");  Timestamp ts=Env.getContextAsDate(ctx,WindowNo,"DateAcct");  if (ts == null)   ts=new Timestamp(System.currentTimeMillis());  String sql="SELECT C_BPartner_ID, C_Currency_ID," + "invoiceOpen(C_Invoice_ID, ?), IsSOTrx, " + "invoiceDiscount(C_Invoice_ID,?,?) "+ "FROM C_Invoice WHERE C_Invoice_ID=?";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,C_InvoicePaySchedule_ID);    pstmt.setTimestamp(2,ts);    pstmt.setInt(3,C_InvoicePaySchedule_ID);    pstmt.setInt(4,C_Invoice_ID.intValue());    rs=pstmt.executeQuery();    if (rs.next()) {      mTab.setValue("C_Currency_ID",new Integer(rs.getInt(2)));      BigDecimal PayAmt=rs.getBigDecimal(3);      BigDecimal DiscountAmt=rs.getBigDecimal(5);      boolean isSOTrx="Y".equals(rs.getString(4));      if (!isSOTrx) {        PayAmt=PayAmt.negate();        DiscountAmt=DiscountAmt.negate();      }      mTab.setValue("Amount",PayAmt.subtract(DiscountAmt));      mTab.setValue("DiscountAmt",DiscountAmt);      mTab.setValue("WriteOffAmt",Env.ZERO);      Env.setContext(ctx,WindowNo,"InvTotalAmt",PayAmt.toString());    }  } catch (  SQLException e) {    log.log(Level.SEVERE,"invoice",e);    return e.getLocalizedMessage();  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  return "";}  }
class C{  public WbXmlAttributeDef locateAttribute(String name,String value){  TreeSet<WbXmlAttributeDef> attrs=this.attrsByName.get(name);  if (attrs != null) {    for (    WbXmlAttributeDef attr : attrs) {      if (name.equals(attr.getNameWithPrefix()) && (attr.getValue() == null || value.startsWith(attr.getValue()))) {        return attr;      }    }  }  return null;}  }
class C{  public final String shallIndexCacheForProxy(){  if (profile() == null) {    return "shallIndexCacheForProxy: profile() is null !";  }  if (!profile().indexText() && !profile().indexMedia()) {    return "indexing not allowed - indexText and indexMedia not set (for proxy = " + this.profile.collectionName() + ")";  }  if (!profile().crawlingQ()) {    if (url().isPOST()) {      return "Dynamic_(POST)";    }    if (MultiProtocolURL.isCGI(MultiProtocolURL.getFileExtension(url().getFileName()))) {      return "Dynamic_(CGI)";    }  }  if (requestWithCookie()) {    return "Dynamic_(Requested_With_Cookie)";  }  if (this.responseHeader != null) {    final String parserError=TextParser.supportsMime(this.responseHeader.getContentType());    if (parserError != null) {      return "Media_Content, no parser: " + parserError;    }    final Date ifModifiedSince=this.ifModifiedSince();    final Date now=new Date();    if ((ifModifiedSince != null) && (this.responseHeader.containsKey(HeaderFramework.LAST_MODIFIED))) {      Date d=this.responseHeader.lastModified();      if (d == null)       d=now;      if (d.after(ifModifiedSince)) {        return "Stale_(Last-Modified>Modified-Since)";      }    }    if (this.responseHeader.containsKey(HeaderFramework.PRAGMA) && (this.responseHeader.get(HeaderFramework.PRAGMA)).toUpperCase().contains("NO-CACHE")) {      return "Denied_(pragma_no_cache)";    }    final Date expires=this.responseHeader.expires();    if (expires != null && expires.before(now)) {      return "Stale_(Expired)";    }    String cacheControl=this.responseHeader.get(HeaderFramework.CACHE_CONTROL);    if (cacheControl != null) {      cacheControl=cacheControl.trim().toUpperCase();      if (cacheControl.contains("PRIVATE") || cacheControl.contains("NO-CACHE") || cacheControl.contains("NO-STORE")) {        return "Stale_(denied_by_cache-control=" + cacheControl + ")";      } else       if (cacheControl.startsWith("MAX-AGE=")) {        final Date date=this.responseHeader.date();        if (date == null) {          return "Stale_(no_date_given_in_response)";        }        try {          final long ttl=1000 * NumberTools.parseLongDecSubstring(cacheControl,8);          if (now.getTime() - date.getTime() > ttl) {            return "Stale_(expired_by_cache-control)";          }        } catch (        final Exception e) {          return "Error_(" + e.getMessage() + ")";        }      }    }  }  return null;}  }
class C{  @Override public void test() throws ParameterException {  ArrayList<String> set=new ArrayList<>();  ArrayList<String> notSet=new ArrayList<>();  for (  Parameter<?> p : parameterList) {    if (p.isDefined()) {      set.add(p.getName());    } else {      notSet.add(p.getName());    }  }  if (!set.isEmpty() && !notSet.isEmpty()) {    throw new WrongParameterValueException("Global Constraint Error.\n" + "Either all of the parameters " + OptionUtil.optionsNamesToString(parameterList) + " must be set or none of them. "+ "Parameter(s) currently set: "+ set.toString()+ ", parameters currently "+ "not set: "+ notSet.toString());  }}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public <T extends Enum<T>>List<T> convertList(List<? extends Enum<?>> values,Class<T> targetClass){  List<T> list=new ArrayList<T>();  if (values == null) {    return null;  }  for (  Enum<?> e : values) {    T result=convert(e,targetClass);    if (result != null) {      list.add(result);    }  }  return list;}  }
class C{  public static int findDeepestLevel(int width,int height){  int level=0;  int w=width;  int h=height;  while ((w % 2 == 0) && (h % 2 == 0)) {    w=w / 2;    h=h / 2;    level++;  }  return level - 1;}  }
class C{  private void fireAdded(final RPObject object){  listener.onAdded(object);  userListener.onAdded(object);  for (  final RPSlot slot : object.slots()) {    final String slotName=slot.getName();    for (    final RPObject sobject : slot) {      fireAdded(object,slotName,sobject);    }  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean hasCDCIPictureEssenceDescriptor(){  return this.hasInterchangeObject(CDCIPictureEssenceDescriptor.class);}  }
class C{  public boolean isDisplayed(){  Object oo=get_Value(COLUMNNAME_IsDisplayed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  SHA5(String name,int digestLength,long[] initialHashes){  super(name,digestLength,128);  this.initialHashes=initialHashes;  state=new long[8];  W=new long[80];  implReset();}  }
class C{  public QueryService createQueryService(URI context) throws RepositoryException {  Transaction transaction=createTransaction();  transaction.setAllContexts(context);  return transaction.createQueryService();}  }
class C{  public boolean isImportant(int i){  return (masks[i] & IMPORTANT_MASK) != 0;}  }
class C{  public void stateChanged(ChangeEvent e){  if (!(e.getSource() instanceof ColorSelectionModel))   return;  setPreviewColor(((ColorSelectionModel)e.getSource()).getSelectedColor());}  }
class C{  public static RetainDataFragment attachTo(Fragment fragment){  return attachTo(fragment.getActivity());}  }
class C{  private boolean retrieveSpreadsheetList(){  SpreadsheetFeed feed;  try {    feed=service.getFeed(factory.getSpreadsheetsFeedUrl(),SpreadsheetFeed.class);  } catch (  IOException e) {    SpreadsheetApiDemo.showErrorBox(e);    return false;  }catch (  ServiceException e) {    SpreadsheetApiDemo.showErrorBox(e);    return false;  }  this.spreadsheetEntries=feed.getEntries();  return true;}  }
class C{  @Override public final void attrSplit(int attr,Instances inst) throws Exception {  int i;  int len;  int low=0;  int high=inst.numInstances() - 1;  PairedStats full=new PairedStats(0.01);  PairedStats leftSubset=new PairedStats(0.01);  PairedStats rightSubset=new PairedStats(0.01);  int classIndex=inst.classIndex();  double leftCorr, rightCorr;  double leftVar, rightVar, allVar;  double order=2.0;  initialize(low,high,attr);  if (m_number < 4) {    return;  }  len=((high - low + 1) < 5) ? 1 : (high - low + 1) / 5;  m_position=low;  for (i=low; i < len; i++) {    full.add(inst.instance(i).value(attr),inst.instance(i).value(classIndex));    leftSubset.add(inst.instance(i).value(attr),inst.instance(i).value(classIndex));  }  for (i=len; i < inst.numInstances(); i++) {    full.add(inst.instance(i).value(attr),inst.instance(i).value(classIndex));    rightSubset.add(inst.instance(i).value(attr),inst.instance(i).value(classIndex));  }  full.calculateDerived();  allVar=(full.yStats.stdDev * full.yStats.stdDev);  allVar=Math.abs(allVar);  allVar=Math.pow(allVar,(1.0 / order));  for (i=low + len; i < high - len - 1; i++) {    rightSubset.subtract(inst.instance(i).value(attr),inst.instance(i).value(classIndex));    leftSubset.add(inst.instance(i).value(attr),inst.instance(i).value(classIndex));    if (!Utils.eq(inst.instance(i + 1).value(attr),inst.instance(i).value(attr))) {      leftSubset.calculateDerived();      rightSubset.calculateDerived();      leftCorr=Math.abs(leftSubset.correlation);      rightCorr=Math.abs(rightSubset.correlation);      leftVar=(leftSubset.yStats.stdDev * leftSubset.yStats.stdDev);      leftVar=Math.abs(leftVar);      leftVar=Math.pow(leftVar,(1.0 / order));      rightVar=(rightSubset.yStats.stdDev * rightSubset.yStats.stdDev);      rightVar=Math.abs(rightVar);      rightVar=Math.pow(rightVar,(1.0 / order));      double score=allVar - ((leftSubset.count / full.count) * leftVar) - ((rightSubset.count / full.count) * rightVar);      leftCorr=(leftSubset.count / full.count) * leftCorr;      rightCorr=(rightSubset.count / full.count) * rightCorr;      if (!Utils.eq(score,0.0)) {        if (score > m_maxImpurity) {          m_maxImpurity=score;          m_splitValue=(inst.instance(i).value(attr) + inst.instance(i + 1).value(attr)) * 0.5;          m_position=i;        }      }    }  }}  }
class C{  public Cursor query(SQLiteDatabase db,String[] projectionIn,String selection,String[] selectionArgs,String groupBy,String having,String sortOrder,String limit){  if (mTables == null) {    return null;  }  if (mStrict && selection != null && selection.length() > 0) {    String sqlForValidation=buildQuery(projectionIn,"(" + selection + ")",groupBy,having,sortOrder,limit);    validateSql(db,sqlForValidation);  }  String sql=buildQuery(projectionIn,selection,groupBy,having,sortOrder,limit);  return db.rawQueryWithFactory(mFactory,sql,selectionArgs,SQLiteDatabase.findEditTable(mTables));}  }
class C{  public TechnicalServiceNotAliveException(Reason reason,Throwable t){  super(reason.toString(),t);  setMessageKey(getMessageKey() + "." + reason);}  }
class C{  private static void createAndShowGUI(){  JFrame frame=new JFrame("FileChooserDemo2");  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  frame.add(new ImageFileChooserDemo());  frame.pack();  frame.setVisible(true);}  }
class C{  private static boolean checkSingleton(TypeTable typeTable,Type ltype,Type rtype,StandardDefs standardDefs){  return (rtype != null) && (rtype.isAssignableTo(ltype) || (standardDefs.isIFactory(ltype) && rtype.equals(typeTable.classType)) || (typeTable.functionType.isAssignableTo(ltype) && rtype.isAssignableTo(standardDefs.INTERFACE_IFACTORY)));}  }
class C{  public InvalidDatabaseVersionException(final DatabaseVersion version){  m_version=Preconditions.checkNotNull(version,"IE01093: Version argument can not be null");}  }
class C{  public int numberOfUsers(){synchronized (this) {    return allUsers.size();  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  int progress=0;  double z, val;  int i;  int[] dX={1,1,1,0,-1,-1,-1,0};  int[] dY={-1,0,1,1,1,0,-1,-1};  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  boolean onlyInterolateInteriorHoles=Boolean.parseBoolean(args[2]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    image.isReflectedAtEdges=true;    int rows=image.getNumberRows();    int cols=image.getNumberColumns();    double noData=image.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=image.getValue(row,col);        if (z == noData) {          output.setValue(row,col,1);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 1 of 6: ",progress);    }    if (onlyInterolateInteriorHoles) {      int[] scanFilter=new int[]{6,7,0,5};      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          z=output.getValue(row,col);          if (z == 1) {            for (int a=0; a < 4; a++) {              x=col + dX[scanFilter[a]];              y=row + dY[scanFilter[a]];              z=output.getValue(y,x);              if (z == -1 || x < 0 || x >= cols || y < 0 || y >= rows) {                output.setValue(row,col,-1);              }            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress("Loop 2 of 6: ",progress);      }      scanFilter=new int[]{4,3,2,1};      for (row=(rows - 1); row >= 0; row--) {        for (col=0; col < cols; col++) {          z=output.getValue(row,col);          if (z == 1) {            for (int a=0; a < 4; a++) {              x=col + dX[scanFilter[a]];              y=row + dY[scanFilter[a]];              z=output.getValue(y,x);              if (z == -1 || x < 0 || x >= cols || y < 0 || y >= rows) {                output.setValue(row,col,-1);              }            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * 1 - row / (rows - 1));        updateProgress("Loop 3 of 6: ",progress);      }    }    int k=0;    boolean neighboursNoData=false;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=image.getValue(row,col);        if (z != noData) {          neighboursNoData=false;          for (i=0; i < 8; i++) {            if (output.getValue(row + dY[i],col + dX[i]) == 1) {              neighboursNoData=true;              break;            }          }          if (neighboursNoData) {            k++;          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 4 of 6: ",progress);    }    KdTree<Double> tree=new KdTree.SqrEuclid<Double>(2,k);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=image.getValue(row,col);        if (z != noData) {          neighboursNoData=false;          for (i=0; i < 8; i++) {            if (output.getValue(row + dY[i],col + dX[i]) == 1) {              neighboursNoData=true;              break;            }          }          if (neighboursNoData) {            double[] entry={row,col};            tree.addPoint(entry,z);          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 5 of 6: ",progress);    }    List<KdTree.Entry<Double>> results;    double sumWeights;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=output.getValue(row,col);        if (z == 1) {          double[] entry={row,col};          results=tree.nearestNeighbor(entry,6,true);          sumWeights=0;          for (i=0; i < results.size(); i++) {            sumWeights+=1 / (results.get(i).distance);          }          val=0;          for (i=0; i < results.size(); i++) {            val+=(1 / (results.get(i).distance)) / sumWeights * results.get(i).value;          }          output.setValue(row,col,val);        } else {          output.setValue(row,col,image.getValue(row,col));        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 6 of 6: ",progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    image.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public AbstractStateMachine(Collection<State<S,E>> states,Collection<Transition<S,E>> transitions,State<S,E> initialState,Transition<S,E> initialTransition,Message<E> initialEvent,ExtendedState extendedState,UUID uuid){  super();  this.uuid=uuid == null ? UUID.randomUUID() : uuid;  this.states=states;  this.transitions=transitions;  this.initialState=initialState;  this.initialEvent=initialEvent;  this.extendedState=extendedState != null ? extendedState : new DefaultExtendedState();  if (initialTransition == null) {    this.initialTransition=new InitialTransition<S,E>(initialState);  } else {    this.initialTransition=initialTransition;  }}  }
class C{  @Override public boolean equals(Object other){  if (!(other instanceof TObjectDoubleHashMap)) {    return false;  }  TObjectDoubleHashMap that=(TObjectDoubleHashMap)other;  if (that.size() != this.size()) {    return false;  }  return forEachEntry(new EqProcedure<K>(that));}  }
class C{  public List<FlashcardEntity> queryDeep(String where,String... selectionArg){  Cursor cursor=db.rawQuery(getSelectDeep() + where,selectionArg);  return loadDeepAllAndCloseCursor(cursor);}  }
class C{  @Override public void writeBatch() throws IOException {  Instances instances=getInstances();  if (instances == null) {    throw new IOException("No instances to save");  }  if (instances.classIndex() == -1) {    instances.setClassIndex(instances.numAttributes() - 1);    System.err.println("No class specified. Last attribute is used as class attribute.");  }  if (instances.attribute(instances.classIndex()).isNumeric()) {    throw new IOException("To save in C4.5 format the class attribute cannot be numeric.");  }  if (getRetrieval() == INCREMENTAL) {    throw new IOException("Batch and incremental saving cannot be mixed.");  }  setRetrieval(BATCH);  if (retrieveFile() == null || getWriter() == null) {    throw new IOException("C4.5 format requires two files. Therefore no output to standard out can be generated.\nPlease specifiy output files using the -o option.");  }  setWriteMode(WRITE);  setFileExtension(".names");  PrintWriter outW=new PrintWriter(getWriter());  for (int i=0; i < instances.attribute(instances.classIndex()).numValues(); i++) {    outW.write(instances.attribute(instances.classIndex()).value(i));    if (i < instances.attribute(instances.classIndex()).numValues() - 1) {      outW.write(",");    } else {      outW.write(".\n");    }  }  for (int i=0; i < instances.numAttributes(); i++) {    if (i != instances.classIndex()) {      outW.write(instances.attribute(i).name() + ": ");      if (instances.attribute(i).isNumeric() || instances.attribute(i).isDate()) {        outW.write("continuous.\n");      } else {        Attribute temp=instances.attribute(i);        for (int j=0; j < temp.numValues(); j++) {          outW.write(temp.value(j));          if (j < temp.numValues() - 1) {            outW.write(",");          } else {            outW.write(".\n");          }        }      }    }  }  outW.flush();  outW.close();  String out=retrieveFile().getAbsolutePath();  setFileExtension(".data");  out=out.substring(0,out.lastIndexOf('.')) + getFileExtension();  File namesFile=new File(out);  try {    setFile(namesFile);  } catch (  Exception ex) {    throw new IOException("Cannot create data file, only names file created (Reason: " + ex.toString() + ").");  }  if (retrieveFile() == null || getWriter() == null) {    throw new IOException("Cannot create data file, only names file created.");  }  outW=new PrintWriter(getWriter());  for (int i=0; i < instances.numInstances(); i++) {    Instance temp=instances.instance(i);    for (int j=0; j < temp.numAttributes(); j++) {      if (j != instances.classIndex()) {        if (temp.isMissing(j)) {          outW.write("?,");        } else         if (instances.attribute(j).isNominal() || instances.attribute(j).isString()) {          outW.write(instances.attribute(j).value((int)temp.value(j)) + ",");        } else {          outW.write("" + temp.value(j) + ",");        }      }    }    if (temp.isMissing(instances.classIndex())) {      outW.write("?");    } else {      outW.write(instances.attribute(instances.classIndex()).value((int)temp.value(instances.classIndex())));    }    outW.write("\n");  }  outW.flush();  outW.close();  setFileExtension(".names");  setWriteMode(WAIT);  outW=null;  resetWriter();  setWriteMode(CANCEL);}  }
class C{  public static void main(String... args){  try {    GlowServer server=createFromArguments(args);    if (server == null) {      return;    }    server.run();  } catch (  BindException ex) {    logger.severe("The server could not bind to the requested address.");    if (ex.getMessage().startsWith("Cannot assign requested address")) {      logger.severe("The 'server.ip' in your configuration may not be valid.");      logger.severe("Unless you are sure you need it, try removing it.");      logger.severe(ex.toString());    } else     if (ex.getMessage().startsWith("Address already in use")) {      logger.severe("The address was already in use. Check that no server is");      logger.severe("already running on that port. If needed, try killing all");      logger.severe("Java processes using Task Manager or similar.");      logger.severe(ex.toString());    } else {      logger.log(Level.SEVERE,"An unknown bind error has occurred.",ex);    }    System.exit(1);  }catch (  Throwable t) {    logger.log(Level.SEVERE,"Error during server startup.",t);    System.exit(1);  }}  }
class C{  public final boolean canGetLong(String field){  Column col=getColumn(field);  return (col == null ? false : col.canGetLong());}  }
class C{  @Override public void updateEntity(){  if (!addedToEnet)   onLoaded();}  }
class C{  public mxRectangle(double x,double y,double width,double height){  super(x,y);  setWidth(width);  setHeight(height);}  }
class C{  public static int[] createInverseMap(int[] values){  if (values == null) {    return null;  }  int[] result=new int[values.length];  for (int i=0; i < values.length; i++) {    result[values[i]]=i;  }  return result;}  }
class C{  public boolean evaluateEnclosed(){  deletePoint();  boolean enclosed=false;  if (isEnclosed()) {    enclose(true);    enclosed=true;  }  return enclosed;}  }
class C{  public static <T1,T2,T3,T4,T5,R>Function<T5,R> partial5(final T1 t1,final T2 t2,final T3 t3,final T4 t4,final QuintFunction<T1,T2,T3,T4,T5,R> quintFunc){  return null;}  }
class C{  public Ravin(){  super();}  }
class C{  @VisibleForTesting static MapsFeature buildMapsLineFeature(String title,ArrayList<Location> locations){  MapsFeature mapsFeature=new MapsFeature();  mapsFeature.setType(MapsFeature.LINE);  mapsFeature.generateAndroidId();  mapsFeature.setTitle(TextUtils.isEmpty(title) ? EMPTY_TITLE : title);  mapsFeature.setColor(LINE_COLOR);  for (  Location location : locations) {    mapsFeature.addPoint(location);  }  return mapsFeature;}  }
class C{  public ExceptionPanel(){  initComponents();}  }
class C{  public FrameSetView(Element elem,int axis){  super(elem,axis);  children=null;}  }
class C{  @Override public boolean equals(Object other){  if (_map.equals(other)) {    return true;  } else   if (other instanceof Map) {    Map that=(Map)other;    if (that.size() != _map.size()) {      return false;    } else {      Iterator it=that.entrySet().iterator();      for (int i=that.size(); i-- > 0; ) {        Map.Entry e=(Map.Entry)it.next();        Object key=e.getKey();        Object val=e.getValue();        if (key instanceof Float && val instanceof Double) {          float k=unwrapKey(key);          double v=unwrapValue(val);          if (_map.containsKey(k) && v == _map.get(k)) {          } else {            return false;          }        } else {          return false;        }      }      return true;    }  } else {    return false;  }}  }
class C{  public static JSONValue value(Long value){  return new JSONNumber(Long.toString(value,10));}  }
class C{  public static String encodeECC200(String codewords,SymbolInfo symbolInfo){  if (codewords.length() != symbolInfo.getDataCapacity()) {    throw new IllegalArgumentException("The number of codewords does not match the selected symbol");  }  StringBuilder sb=new StringBuilder(symbolInfo.getDataCapacity() + symbolInfo.getErrorCodewords());  sb.append(codewords);  int blockCount=symbolInfo.getInterleavedBlockCount();  if (blockCount == 1) {    String ecc=createECCBlock(codewords,symbolInfo.getErrorCodewords());    sb.append(ecc);  } else {    sb.setLength(sb.capacity());    int[] dataSizes=new int[blockCount];    int[] errorSizes=new int[blockCount];    int[] startPos=new int[blockCount];    for (int i=0; i < blockCount; i++) {      dataSizes[i]=symbolInfo.getDataLengthForInterleavedBlock(i + 1);      errorSizes[i]=symbolInfo.getErrorLengthForInterleavedBlock(i + 1);      startPos[i]=0;      if (i > 0) {        startPos[i]=startPos[i - 1] + dataSizes[i];      }    }    for (int block=0; block < blockCount; block++) {      StringBuilder temp=new StringBuilder(dataSizes[block]);      for (int d=block; d < symbolInfo.getDataCapacity(); d+=blockCount) {        temp.append(codewords.charAt(d));      }      String ecc=createECCBlock(temp.toString(),errorSizes[block]);      int pos=0;      for (int e=block; e < errorSizes[block] * blockCount; e+=blockCount) {        sb.setCharAt(symbolInfo.getDataCapacity() + e,ecc.charAt(pos++));      }    }  }  return sb.toString();}  }
class C{  public static byte[] toIPv4AddressBytes(String ipAddress){  String[] octets=ipAddress.split("\\.");  if (octets.length != 4)   throw new IllegalArgumentException("Specified IPv4 address must" + "contain 4 sets of numerical digits separated by periods");  byte[] result=new byte[4];  for (int i=0; i < 4; ++i) {    result[i]=Integer.valueOf(octets[i]).byteValue();  }  return result;}  }
class C{  public static String generateFolderename(TvShow tvShow,MediaFile mf){  return generateName("",tvShow,mf,false);}  }
class C{  public static <A>Set<A> of(Iterable<A> as){  return Set.<A>empty().plus(as);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testEmployee;  NamedNodeMap attributes;  Node streetAttr;  String attrName;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("address");  testEmployee=elementList.item(1);  attributes=testEmployee.getAttributes();  streetAttr=attributes.getNamedItem("street");  assertInstanceOf("typeAssert",Attr.class,streetAttr);  attrName=streetAttr.getNodeName();  assertEquals("nodeName","street",attrName);  attrName=((Attr)streetAttr).getName();  assertEquals("attrName","street",attrName);}  }
class C{  @Override public DPState compute(Rule rule,List<HGNode> tailNodes,int i,int j,SourcePath sourcePath,Sentence sentence,Accumulator acc){  if (rule == null) {    return null;  }  int[] words;  if (config.source_annotations) {    words=getTags(rule,i,j,sentence);  } else {    words=getRuleIds(rule);  }  if (withOovFeature) {    acc.add(oovDenseFeatureIndex,getOovs(words));  }  return computeTransition(words,tailNodes,acc);}  }
class C{  public void broadcastShieldFrame(ShieldFrame frame){  broadcastShieldFrame(frame,null);}  }
class C{  public void disableNativeIM(){  InputMethod inputMethod=getInputMethod();  if (inputMethod != null && inputMethod instanceof InputMethodAdapter) {    ((InputMethodAdapter)inputMethod).stopListening();  }}  }
class C{  @Override protected void onPause(){  super.onPause();  Log.d(TAG,"onPause() - another activity is taking focus (this activity is about to be \"paused\")");}  }
class C{  public void hideImageCover(){  mBackgroundBitmap=null;  setVisibility(GONE);  mAnimationType=IDLE;}  }
class C{  public void ensureCapacity(int minimumCapacity){  return;}  }
class C{  public void visitIincInsn(int var,int increment){  if (mv != null) {    mv.visitIincInsn(var,increment);  }}  }
class C{  public static double exp(double lambda){  return -Math.log(1 - Math.random()) / lambda;}  }
class C{  public void writeRecord(byte[] record) throws IOException {  if (debug) {    System.err.println("WriteRecord: recIdx = " + currRecIdx + " blkIdx = "+ currBlkIdx);  }  if (outStream == null) {    throw new IOException("writing to an input buffer");  }  if (record.length != recordSize) {    throw new IOException("record to write has length '" + record.length + "' which is not the record size of '"+ recordSize+ "'");  }  if (currRecIdx >= recsPerBlock) {    writeBlock();  }  System.arraycopy(record,0,blockBuffer,(currRecIdx * recordSize),recordSize);  currRecIdx++;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:27.613 -0400",hash_original_method="03180C88152D7B1BF2E65C6D596D2C44",hash_generated_method="3310DFD00EBD0DB7DF7EC802984DE9D5") private boolean isInstalled(ComponentName globalSearch){  Intent intent=new Intent(SearchManager.INTENT_ACTION_GLOBAL_SEARCH);  intent.setComponent(globalSearch);  PackageManager pm=mContext.getPackageManager();  List<ResolveInfo> activities=pm.queryIntentActivities(intent,PackageManager.MATCH_DEFAULT_ONLY);  if (activities != null && !activities.isEmpty()) {    return true;  }  return false;}  }
class C{  protected void assertToString(Object value,String expected){  Object console=InvokerHelper.invokeMethod(value,"toString",null);  assertEquals("toString() on value: " + value,expected,console);}  }
class C{  public List<FilePolicyRestRep> listByFileSystem(URI fileSystemId){  FilePolicyList response=client.get(FilePolicyList.class,getByFileSystemUrl(),fileSystemId);  return defaultList(response.getFilePolicies());}  }
class C{  public static boolean isExtension(String filename,String extension){  if (filename == null) {    return false;  }  if (extension == null || extension.length() == 0) {    return indexOfExtension(filename) == -1;  }  String fileExt=getExtension(filename);  return fileExt.equals(extension);}  }
class C{  public Boolean isScheduledHardwareUpgradeSupported(){  return scheduledHardwareUpgradeSupported;}  }
class C{  protected static String quoteBytes(byte[] x){  if (x == null) {    return "null";  }  return "org.h2.util.StringUtils.convertHexToBytes(\"" + StringUtils.convertBytesToHex(x) + "\")";}  }
class C{  public CloudObject(String type,int permissions){  accessPermissions=permissions;  values.put(CloudStorage.TYPE_FIELD,type);}  }
class C{  public static void selectList(final ZyGraph graph,final TraceList list){  Preconditions.checkNotNull(graph,"IE01384: Graph argument can not be null");  Preconditions.checkNotNull(list,"IE01385: List argument can not be null");  graph.selectNodes(CTraceNodeFinder.getTraceNodes(graph,list),true);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String s=getString(stack);  if (Sage.DBG)   System.out.println(s);  return null;}  }
class C{  protected boolean top(TextView widget,Spannable buffer){  return false;}  }
class C{  static void readZoneNames(String fileName){  if (fileName == null) {    return;  }  BufferedReader in=null;  try {    FileReader fr=new FileReader(fileName);    in=new BufferedReader(fr);  } catch (  FileNotFoundException e) {    Main.panic("can't open file: " + fileName);  }  targetZones=new HashSet<String>();  String line;  try {    while ((line=in.readLine()) != null) {      line=line.trim();      if (line.length() == 0 || line.charAt(0) == '#') {        continue;      }      if (!targetZones.add(line)) {        Main.warning("duplicated target zone name: " + line);      }    }    in.close();  } catch (  IOException e) {    Main.panic("IO error: " + e.getMessage());  }}  }
class C{  public void pvChanged(PvChangeEvent event){switch (event.getType()) {case PvChangeEvent.PV_ADDED:    updateColumnWidths();  break;}}  }
class C{  public DefaultNamespace(Element parent,String prefix,String uri){  super(prefix,uri);  this.parent=parent;}  }
class C{  public void ifNull(final Label label){  mv.visitJumpInsn(Opcodes.IFNULL,label);}  }
class C{  public String renameReplacement(){  return renameReplacement;}  }
class C{  public void accept(final ClassVisitor cv){  String[] interfaces=new String[this.interfaces.size()];  this.interfaces.toArray(interfaces);  cv.visit(version,access,name,signature,superName,interfaces);  if (sourceFile != null || sourceDebug != null) {    cv.visitSource(sourceFile,sourceDebug);  }  if (outerClass != null) {    cv.visitOuterClass(outerClass,outerMethod,outerMethodDesc);  }  int i, n;  n=visibleAnnotations == null ? 0 : visibleAnnotations.size();  for (i=0; i < n; ++i) {    AnnotationNode an=visibleAnnotations.get(i);    an.accept(cv.visitAnnotation(an.desc,true));  }  n=invisibleAnnotations == null ? 0 : invisibleAnnotations.size();  for (i=0; i < n; ++i) {    AnnotationNode an=invisibleAnnotations.get(i);    an.accept(cv.visitAnnotation(an.desc,false));  }  n=visibleTypeAnnotations == null ? 0 : visibleTypeAnnotations.size();  for (i=0; i < n; ++i) {    TypeAnnotationNode an=visibleTypeAnnotations.get(i);    an.accept(cv.visitTypeAnnotation(an.typeRef,an.typePath,an.desc,true));  }  n=invisibleTypeAnnotations == null ? 0 : invisibleTypeAnnotations.size();  for (i=0; i < n; ++i) {    TypeAnnotationNode an=invisibleTypeAnnotations.get(i);    an.accept(cv.visitTypeAnnotation(an.typeRef,an.typePath,an.desc,false));  }  n=attrs == null ? 0 : attrs.size();  for (i=0; i < n; ++i) {    cv.visitAttribute(attrs.get(i));  }  for (i=0; i < innerClasses.size(); ++i) {    innerClasses.get(i).accept(cv);  }  for (i=0; i < fields.size(); ++i) {    fields.get(i).accept(cv);  }  for (i=0; i < methods.size(); ++i) {    methods.get(i).accept(cv);  }  cv.visitEnd();}  }
class C{  public void cleanUp(){  resetGlobalState();}  }
class C{  public synchronized void checkOwnership() throws LockingException {  if (null == lockAcquireFuture || !lockAcquireFuture.isDefined()) {    throw new LockingException(lockPath,"check ownership before acquiring");  }  if (!haveLock()) {    throw new LockingException(lockPath,"Lost lock ownership");  }}  }
class C{  private static void checkEquals(double expected,double actual,String label,double eps){  if (Math.abs(expected - actual) <= eps * Math.max(expected,actual)) {    System.out.println("PASS: " + label + ": Expected "+ expected+ " and you gave "+ actual);  } else {    System.out.println("FAIL: " + label + ": Expected "+ expected+ " and you gave "+ actual);  }}  }
class C{  void pressKey(int virtualKeyCode){  keysPressed.addInt(virtualKeyCode);  modifiers|=getModifier(virtualKeyCode);}  }
class C{  public ClassFile(DataInputStream in) throws IOException {  read(in);}  }
class C{  public void addAttributes(Map<? extends AttributedCharacterIterator.Attribute,?> attributes,int start,int end){  Iterator<?> it=attributes.entrySet().iterator();  while (it.hasNext()) {    Map.Entry<?,?> entry=(Map.Entry<?,?>)it.next();    addAttribute((AttributedCharacterIterator.Attribute)entry.getKey(),entry.getValue(),start,end);  }}  }
class C{  public void deleteFile(){  if (mFile != null) {    mFile.delete();  }}  }
class C{  public boolean hasVaryAll(){  return varyFields.contains("*");}  }
class C{  public char[] nextKey(){  goNext();  return keys[lastPos];}  }
class C{  public static long readSharedPreference(Context context,String key,long default_value){  try {    SharedPreferences settings=getSharedPreferenceManager(context);    return settings.getLong(key,default_value);  } catch (  Exception e) {    return default_value;  }}  }
class C{  public FilterRecyclerAdapter(Context context,Filters filterData){  this.context=context;  for (  FilterType filterType : filterData.getFilters()) {    if (DeserializerFilters.FILTER_TYPE_COLOR.equals(filterType.getType())) {      try {        List<FilterValueColor> colorValues=((FilterTypeColor)filterType).getValues();        if (colorValues.get(0).getId() != DEFAULT_ID || !colorValues.get(0).getValue().equals(context.getString(R.string.All))) {          colorValues.add(0,new FilterValueColor(DEFAULT_ID,context.getString(R.string.All)));        }      } catch (      Exception e) {        Timber.e(e,"Setting default value for color filter failed");      }    } else     if (DeserializerFilters.FILTER_TYPE_SELECT.equals(filterType.getType())) {      try {        List<FilterValueSelect> selectValues=((FilterTypeSelect)filterType).getValues();        if (selectValues.get(0).getId() != DEFAULT_ID || !selectValues.get(0).getValue().equals(context.getString(R.string.All))) {          selectValues.add(0,new FilterValueSelect(DEFAULT_ID,context.getString(R.string.All)));        }      } catch (      Exception e) {        Timber.e(e,"Setting default value for select filter failed");      }    }  }  filterTypeList.addAll(filterData.getFilters());}  }
class C{  public void refresh() throws RefreshFailedException {  if (destroyed)   throw new RefreshFailedException("A destroyed ticket " + "cannot be renewd.");  if (!isRenewable())   throw new RefreshFailedException("This ticket is not renewable");  if (System.currentTimeMillis() > getRenewTill().getTime())   throw new RefreshFailedException("This ticket is past " + "its last renewal time.");  Throwable e=null;  sun.security.krb5.Credentials krb5Creds=null;  try {    krb5Creds=new sun.security.krb5.Credentials(asn1Encoding,client.toString(),server.toString(),sessionKey.getEncoded(),sessionKey.getKeyType(),flags,authTime,startTime,endTime,renewTill,clientAddresses);    krb5Creds=krb5Creds.renew();  } catch (  sun.security.krb5.KrbException krbException) {    e=krbException;  }catch (  java.io.IOException ioException) {    e=ioException;  }  if (e != null) {    RefreshFailedException rfException=new RefreshFailedException("Failed to renew Kerberos Ticket " + "for client " + client + " and server "+ server+ " - "+ e.getMessage());    rfException.initCause(e);    throw rfException;  }synchronized (this) {    try {      this.destroy();    } catch (    DestroyFailedException dfException) {    }    init(krb5Creds.getEncoded(),new KerberosPrincipal(krb5Creds.getClient().getName()),new KerberosPrincipal(krb5Creds.getServer().getName(),KerberosPrincipal.KRB_NT_SRV_INST),krb5Creds.getSessionKey().getBytes(),krb5Creds.getSessionKey().getEType(),krb5Creds.getFlags(),krb5Creds.getAuthTime(),krb5Creds.getStartTime(),krb5Creds.getEndTime(),krb5Creds.getRenewTill(),krb5Creds.getClientAddresses());    destroyed=false;  }}  }
class C{  public SVGDescriptor toSVG(GraphicContext gc){  return toSVG((AlphaComposite)gc.getComposite());}  }
class C{  public void navigateToCheckin(Context context){  if (context != null) {    context.startActivity(new Intent(context,CheckinActivity.class));  }}  }
class C{  public static void addTime(long delta,TimeUnit timeUnit){  delta=timeUnit.toMillis(delta);  long time=CurrentTime.currentTime() + delta;  CurrentTimeTest.setTime(time);}  }
class C{  public MessageChannel createRawMessageChannel(String sourceIpAddress,int sourcePort,Hop nextHop) throws UnknownHostException {  Host targetHost;  HostPort targetHostPort;  Iterator processorIterator;  MessageProcessor nextProcessor;  MessageChannel newChannel;  targetHost=new Host();  targetHost.setHostname(nextHop.getHost());  targetHostPort=new HostPort();  targetHostPort.setHost(targetHost);  targetHostPort.setPort(nextHop.getPort());  newChannel=null;  processorIterator=messageProcessors.iterator();  while (processorIterator.hasNext() && newChannel == null) {    nextProcessor=(MessageProcessor)processorIterator.next();    if (nextHop.getTransport().equalsIgnoreCase(nextProcessor.getTransport()) && sourceIpAddress.equals(nextProcessor.getIpAddress().getHostAddress()) && sourcePort == nextProcessor.getPort()) {      try {        newChannel=nextProcessor.createMessageChannel(targetHostPort);      } catch (      UnknownHostException ex) {        if (isLoggingEnabled())         stackLogger.logException(ex);        throw ex;      }catch (      IOException e) {        if (isLoggingEnabled())         stackLogger.logException(e);      }    }  }  return newChannel;}  }
class C{  public ChopEllipseConnector(){}  }
class C{  public static void log(final String message){  log(message,false,false);}  }
class C{  public boolean containsValue(Object value){  if (value == null)   return containsNullValue();  Entry[] tab=table;  for (int i=0; i < tab.length; i++)   for (Entry e=tab[i]; e != null; e=e.next)   if (value.equals(e.value))   return true;  return false;}  }
class C{  private void resetStreamSettings(){  gotHeader=false;  streamMetadata=null;  currIndex=-1;  imageMetadata=null;  imageStartPosition=new ArrayList();  numImages=-1;  blockLength=0;  bitPos=0;  nextByte=0;  next32Bits=0;  lastBlockFound=false;  theImage=null;  theTile=null;  width=-1;  height=-1;  streamX=-1;  streamY=-1;  rowsDone=0;  interlacePass=0;  fallbackColorTable=null;}  }
class C{  public static Method findMethod(Object base,String methodName,Object[] params){  List<Method> methods=new ArrayList<>();  for (  Method method : base.getClass().getMethods()) {    if (method.getName().equals(methodName) && method.getParameterTypes().length == params.length) {      methods.add(method);    }  }  if (methods.size() == 1) {    return methods.get(0);  }  if (methods.size() > 1) {    for (    Method method : methods) {      boolean match=true;      Class<?>[] candidateParams=method.getParameterTypes();      for (int i=0; i < params.length; i++) {        if (!candidateParams[i].isInstance(params[i])) {          match=false;          break;        }      }      if (match) {        return method;      }    }  }  return null;}  }
class C{  public String print(String aClassName,String aFieldOrMtdSignature,Tag aTag){  return aTag.toString();}  }
class C{  @Override public final void insert(DBIDRef id){  insertLeaf(createNewLeafEntry(DBIDUtil.deref(id)));}  }
class C{  @Override protected boolean isAllowed(final RPEntity user){  Sentence sentence=ConversationParser.parse(user.get("text"));  if (condition != null) {    return condition.fire((Player)user,sentence,this);  }  return true;}  }
class C{  void transfer(LongEntry[] newTable){  LongEntry<VALUE>[] src=table;  int newCapacity=newTable.length;  for (int j=0; j < src.length; j++) {    LongEntry<VALUE> e=src[j];    if (e != null) {      src[j]=null;      do {        LongEntry<VALUE> next=e.next;        int i=indexFor(e.hash,newCapacity);        e.next=newTable[i];        newTable[i]=e;        e=next;      } while (e != null);    }  }}  }
class C{  public boolean isTransactional(){  return transactional;}  }
class C{  public double norm1(DoubleMatrix2D A){  double max=0;  for (int column=A.columns(); --column >= 0; ) {    max=Math.max(max,norm1(A.viewColumn(column)));  }  return max;}  }
class C{  public void close() throws IOException {  if (!closed) {    try {      if (!eof) {        exhaustInputStream(this);      }    }  finally {      eof=true;      closed=true;    }  }}  }
class C{  private void resetViewStatus(){  if (mRootView.getVisibility() == View.GONE) {    return;  }  mRootView.setVisibility(View.GONE);  if (mEmptyView != null) {    mEmptyView.setVisibility(View.GONE);  }  if (mLoadingView != null) {    mLoadingView.setVisibility(View.GONE);  }}  }
class C{  public Document loadXmlFromFile(String sourceFile){  InputStream is=null;  try {    if (!getFileHandler().exists(sourceFile)) {      throw new CargoException("Cannot find file: " + sourceFile);    }    if (getFileHandler().isDirectory(sourceFile)) {      throw new CargoException("The destination is a directory: " + sourceFile);    }    is=getFileHandler().getInputStream(sourceFile);    Document document=this.builder.parse(is);    return document;  } catch (  Exception e) {    throw new CargoException("Cannot parse XML file " + sourceFile,e);  } finally {    if (is != null) {      try {        is.close();      } catch (      Exception ignored) {      } finally {        is=null;      }    }    System.gc();  }}  }
class C{  public static BugCollection doAnalysis(@Nonnull Project p,FindBugsProgress progressCallback) throws IOException, InterruptedException {  StringWriter stringWriter=new StringWriter();  BugCollectionBugReporter pcb=new BugCollectionBugReporter(p,new PrintWriter(stringWriter,true));  pcb.setPriorityThreshold(Priorities.LOW_PRIORITY);  IFindBugsEngine fb=createEngine(p,pcb);  fb.setUserPreferences(getUserPreferences());  fb.setProgressCallback(progressCallback);  fb.setProjectName(p.getProjectName());  fb.execute();  String warnings=stringWriter.toString();  if (warnings.length() > 0) {    JTextArea tp=new JTextArea(warnings);    tp.setEditable(false);    JScrollPane pane=new JScrollPane(tp);    pane.setPreferredSize(new Dimension(600,400));    JOptionPane.showMessageDialog(MainFrame.getInstance(),pane,"Analysis errors",JOptionPane.WARNING_MESSAGE);  }  return pcb.getBugCollection();}  }
class C{  @Nonnull public BugInstance addReferencedField(DismantleBytecode visitor){  FieldAnnotation f=FieldAnnotation.fromReferencedField(visitor);  addField(f);  return this;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:15.373 -0500",hash_original_method="2B97B8EA201FFE74530152ABDF41ED91",hash_generated_method="C5DDAC8973345F26091FACB30536355A") public void clear(){}  }
class C{  static int readInt(final byte[] b,final int index){  return ((b[index] & 0xFF) << 24) | ((b[index + 1] & 0xFF) << 16) | ((b[index + 2] & 0xFF) << 8)| (b[index + 3] & 0xFF);}  }
class C{  public long validCurrent(long startTime,long checkTime,long currentCount){  if (startTime == 0) {    startTime=RecurrenceUtil.now();  }  if (checkTime == 0) {    checkTime=startTime;  }  if (getEndTime() != 0 && getEndTime() <= RecurrenceUtil.now()) {    return 0;  }  if (getCount() != -1 && currentCount >= getCount()) {    return 0;  }  Date nextRun=getNextFreq(startTime,checkTime);  Calendar cal=Calendar.getInstance();  Calendar checkTimeCal=Calendar.getInstance();  cal.setTime(nextRun);  checkTimeCal.setTime(new Date(checkTime));switch (getFrequency()) {case YEARLY:    cal.add(Calendar.YEAR,-getIntervalInt());  if (cal.get(Calendar.YEAR) != checkTimeCal.get(Calendar.YEAR)) {    return 0;  }case MONTHLY:if (MONTHLY == getFrequency()) {  cal.add(Calendar.MONTH,-getIntervalInt());  if (cal.get(Calendar.MONTH) != checkTimeCal.get(Calendar.MONTH)) {    return 0;  }} else {  cal.set(Calendar.MONTH,checkTimeCal.get(Calendar.MONTH));}case WEEKLY:if (WEEKLY == getFrequency()) {cal.add(Calendar.WEEK_OF_YEAR,-getIntervalInt());if (cal.get(Calendar.WEEK_OF_YEAR) != checkTimeCal.get(Calendar.WEEK_OF_YEAR)) {  return 0;}} else {cal.set(Calendar.WEEK_OF_YEAR,checkTimeCal.get(Calendar.WEEK_OF_YEAR));}case DAILY:if (DAILY == getFrequency()) {cal.add(Calendar.DAY_OF_MONTH,-getIntervalInt());if (cal.get(Calendar.DAY_OF_MONTH) != checkTimeCal.get(Calendar.DAY_OF_MONTH)) {return 0;}} else {cal.set(Calendar.DAY_OF_MONTH,checkTimeCal.get(Calendar.DAY_OF_MONTH));}case HOURLY:if (HOURLY == getFrequency()) {cal.add(Calendar.HOUR_OF_DAY,-getIntervalInt());if (cal.get(Calendar.HOUR_OF_DAY) != checkTimeCal.get(Calendar.HOUR_OF_DAY)) {return 0;}} else {cal.set(Calendar.HOUR_OF_DAY,checkTimeCal.get(Calendar.HOUR_OF_DAY));}case MINUTELY:if (MINUTELY == getFrequency()) {cal.add(Calendar.MINUTE,-getIntervalInt());if (cal.get(Calendar.MINUTE) != checkTimeCal.get(Calendar.MINUTE)) {return 0;}} else {cal.set(Calendar.MINUTE,checkTimeCal.get(Calendar.MINUTE));}case SECONDLY:if (SECONDLY == getFrequency()) {cal.add(Calendar.SECOND,-getIntervalInt());if (cal.get(Calendar.SECOND) != checkTimeCal.get(Calendar.SECOND)) {return 0;}} else {cal.set(Calendar.SECOND,checkTimeCal.get(Calendar.SECOND));}}if (validByRule(cal.getTime())) {return cal.getTime().getTime();}return 0;}  }
class C{  public NotAuthorizedException(final String message){  this(message,null,null);}  }
class C{  private String testComparisonString(){  Attribute att=m_Dataset.attribute(m_AttIndex);  if (att.isNumeric()) {    return ((m_Not ? ">= " : "< ") + Utils.doubleToString(m_Split,3));  } else {    if (att.numValues() != 2) {      return ((m_Not ? "!= " : "= ") + att.value((int)m_Split));    } else {      return ("= " + (m_Not ? att.value((int)m_Split == 0 ? 1 : 0) : att.value((int)m_Split)));    }  }}  }
class C{  public synchronized void clear(){  clearAnnotations();  clearSeriesValues();}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  @Override protected void doInitializeFilters(){  Vector<String> filters=GenericObjectEditor.getClassnames(FileBasedMeasurementEvaluationStatisticsExporter.class.getName());  m_FileFilters=new ArrayList<>();  for (  String filter : filters) {    try {      FileBasedMeasurementEvaluationStatisticsExporter handler=(FileBasedMeasurementEvaluationStatisticsExporter)Utils.forName(FileBasedEvaluationStatisticsExporter.class,filter,new String[0]);      m_FileFilters.add(new ExtensionFileFilterWithClass(handler.getFormatExtensions(),handler.getFormatDescription() + " (" + ObjectUtils.flatten(handler.getFormatExtensions(),", ")+ ")",filter));    } catch (    Exception e) {      System.err.println("Failed to instantiate file filter: " + filter);      e.printStackTrace();    }  }}  }
class C{  private static Consumer<JavaFileObject> logRemover(Log log){  try {    Field sourceMap=AbstractLog.class.getDeclaredField("sourceMap");    sourceMap.setAccessible(true);    Map<JavaFileObject,DiagnosticSource> value=(Map<JavaFileObject,DiagnosticSource>)sourceMap.get(log);    return null;  } catch (  IllegalAccessException|NoSuchFieldException e) {    throw new RuntimeException(e);  }}  }
class C{  protected ExifInterface createExif(Optional<ExifInterface> exifData,TaskImage image,ListenableFuture<TotalCaptureResultProxy> totalCaptureResultProxyFuture){  ExifInterface exif;  if (exifData.isPresent()) {    exif=exifData.get();  } else {    exif=new ExifInterface();  }  Optional<Location> location=Optional.fromNullable(mSession.getLocation());  try {    new ExifUtil(exif).populateExif(Optional.of(image),Optional.<CaptureResultProxy>of(totalCaptureResultProxyFuture.get()),location);  } catch (  InterruptedException|ExecutionException e) {    new ExifUtil(exif).populateExif(Optional.of(image),Optional.<CaptureResultProxy>absent(),location);  }  return exif;}  }
class C{  @RequestMapping(value="/{id}",method=RequestMethod.DELETE) @ResponseBody public RestWrapper delete(@PathVariable("id") Integer appDeploymentStatusId,Principal principal){  RestWrapper restWrapper=null;  try {    appDeploymentQueueStatusDAO.delete(appDeploymentStatusId.shortValue());    restWrapper=new RestWrapper(null,RestWrapper.OK);    LOGGER.info(RECORDWITHID + appDeploymentStatusId + " deleted from AppDeploymentQueueStatus by User:"+ principal.getName());  } catch (  Exception e) {    LOGGER.error(e);    return new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  public static void mapping(String mappedFieldName,String mappedClassName,String targetFieldName,String targetClassName){  throw new MappingErrorException(MSG.INSTANCE.message(mappingErrorException4,mappedFieldName,mappedClassName,targetFieldName,targetClassName));}  }
class C{  protected static void init(){  if (JavaScript.supported()) {    engine=new JSEngine();    StateTracker.addTransition(engine);    StateTracker.addTicker(engine);  }}  }
class C{  Set<Class<?>> flattenHierarchy(Class<?> concreteClass){  Set<Class<?>> classes=flattenHierarchyCache.get(concreteClass);  if (classes == null) {    Set<Class<?>> classesCreation=getClassesFor(concreteClass);    classes=flattenHierarchyCache.putIfAbsent(concreteClass,classesCreation);    if (classes == null) {      classes=classesCreation;    }  }  return classes;}  }
class C{  HeapArrayOfDoublesAnotB(final int numValues,final long seed){  numValues_=numValues;  seedHash_=Util.computeSeedHash(seed);}  }
class C{  public String reduceNumberOfDistanceCalcsViaCanopiesTipText(){  return "Use canopy clustering to reduce the number of distance calculations " + "performed by k-means";}  }
class C{  @Override public void publish(LogRecord record){  super.publish(record);  super.flush();}  }
class C{  @GET @Produces({MediaType.TEXT_PLAIN}) @Path("/stablecheck") public String checkVdcStable(){  return String.valueOf(isClusterStable());}  }
class C{  protected Injector createInjector(List<Module> modules){  return Guice.createInjector(modules);}  }
class C{  @Override public void onAction(final ActionType at){  if (isReleased()) {    return;  }switch (at) {case USE:    at.send(at.fillTargetInfo(entity));  break;default :super.onAction(at);break;}}  }
class C{  public void doFilter(ServletRequest request,ServletResponse response,FilterChain filterChain) throws IOException, ServletException {  HttpServletRequest httpRequest=(HttpServletRequest)request;  String entidad=null;  if (AutenticacionBackOffice.autenticar(httpRequest)) {    Sesion sesion=AutenticacionBackOffice.obtenerDatos(httpRequest);    entidad=sesion.getIdEntidad();  }  if (entidad != null) {    httpRequest.getSession().setAttribute(ConstantesGestionUsuariosBackOffice.PARAMETRO_ID_ENTIDAD,entidad);  }  String oEntidad=(String)httpRequest.getSession().getAttribute(ConstantesGestionUsuariosBackOffice.PARAMETRO_ID_ENTIDAD);  MultiEntityContextHolder.setEntity(oEntidad);  filterChain.doFilter(request,response);}  }
class C{  public void cancel(){  mTicksLeft=0;  mStarted=false;}  }
class C{  public void copyIntoArray(int fromStart,double[] to,int toStart,int len){  System.arraycopy(objs,fromStart,to,toStart,len);}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return true;}  }
class C{  public boolean isSmallIconsUsed(){  return smallIcons;}  }
class C{  protected boolean isTransactable(){  return true;}  }
class C{  public PTQuery_Partial HappenedBeforeJoin(Filter filter,String x,Tracepoint tracepoint) throws PTQueryException {  return AddHappenedBefore(this,filter,x,PTQuery.From(tracepoint));}  }
class C{  public void paintToolBarBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBorder(context,g,x,y,w,h,orientation);}  }
class C{  private static DroidsafeExecutionStatus jsaAnalysis(IDroidsafeProgressMonitor monitor){  try {    JSAStrings.executor=Executors.newSingleThreadExecutor();    monitor.subTask("String Analysis: Setting Hotspots");    JSAUtils.setupSpecHotspots();    if (monitor.isCanceled()) {      JSAStrings.executor.shutdownNow();      return DroidsafeExecutionStatus.CANCEL_STATUS;    }    monitor.subTask("String Analysis: Running Analysis");    JSAStrings.run();    if (monitor.isCanceled()) {      JSAStrings.executor.shutdownNow();      return DroidsafeExecutionStatus.CANCEL_STATUS;    }    monitor.subTask("String Analysis: Logging");    JSAStrings.v().log();    if (monitor.isCanceled()) {      JSAStrings.executor.shutdownNow();      return DroidsafeExecutionStatus.CANCEL_STATUS;    }    JSAStrings.executor.shutdownNow();  } catch (  Exception e) {    logger.warn("Error in JSA analysis.  Continuing...",e);    Config.v().runStringAnalysis=false;    JSAStrings.v().setHasRun(false);  }  if (!JSAStrings.v().hasRun()) {    AnalysisReport.v().addEntry("String analysis did not complete.",AnalysisReport.Level.HIGH);  }  return DroidsafeExecutionStatus.OK_STATUS;}  }
class C{  private int numberOfUniqueSolutions(Population population){  int count=0;  for (int i=0; i < population.size(); i++) {    boolean isDuplicate=false;    for (int j=0; j < i; j++) {      if ((population.get(j) == population.get(i)) || Arrays.equals(population.get(j).getObjectives(),population.get(i).getObjectives())) {        isDuplicate=true;        break;      }      if (!isDuplicate) {        count++;      }    }  }  return count;}  }
class C{  @RequestProcessing(value="/oauth/token",method=HTTPRequestMethod.POST) public void mobileLogin(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws ServletException, IOException, JSONException {  final String error="invalid grant";  final String errorDescription="The provided authorization grant is invalid, expired, revoked, does not match";  final JSONRenderer renderer=new JSONRenderer();  context.setRenderer(renderer);  final JSONObject ret=new JSONObject();  renderer.setJSONObject(ret);  final String username=request.getParameter("username");  final String password=request.getParameter("password");  try {    JSONObject user=userQueryService.getUserByName(username);    if (null == user) {      user=userQueryService.getUserByEmail(username);    }    if (null == user || null == password) {      ret.put("error",error);      ret.put("error_description",errorDescription);      return;    }    if (UserExt.USER_STATUS_C_INVALID == user.optInt(UserExt.USER_STATUS) || UserExt.USER_STATUS_C_INVALID_LOGIN == user.optInt(UserExt.USER_STATUS)) {      userMgmtService.updateOnlineStatus(user.optString(Keys.OBJECT_ID),"",false);      ret.put("error",error);      ret.put("error_description",errorDescription);      return;    }    final String userPassword=user.optString(User.USER_PASSWORD);    if (userPassword.equals(MD5.hash(password))) {      final String ip=Requests.getRemoteAddr(request);      userMgmtService.updateOnlineStatus(user.optString(Keys.OBJECT_ID),ip,true);      ret.put("access_token","{\"userPassword\":\"" + user.optString(User.USER_PASSWORD) + "\",\"userEmail\":\""+ user.optString(User.USER_EMAIL)+ "\"}");      ret.put("token_type","bearer");      ret.put("scope","user");      ret.put("created_at",new Date().getTime());    }  } catch (  final ServiceException e) {    ret.put("error",error);    ret.put("error_description",errorDescription);  }}  }
class C{  public static void text(double x,double y,String s){  offscreen.setFont(font);  FontMetrics metrics=offscreen.getFontMetrics();  double xs=scaleX(x);  double ys=scaleY(y);  int ws=metrics.stringWidth(s);  int hs=metrics.getDescent();  offscreen.drawString(s,(float)(xs - ws / 2.0),(float)(ys + hs));  draw();}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof AbstractPieItemLabelGenerator)) {    return false;  }  AbstractPieItemLabelGenerator that=(AbstractPieItemLabelGenerator)obj;  if (!this.labelFormat.equals(that.labelFormat)) {    return false;  }  if (!this.numberFormat.equals(that.numberFormat)) {    return false;  }  if (!this.percentFormat.equals(that.percentFormat)) {    return false;  }  return true;}  }
class C{  public T caseRecordEntity_(RecordEntity_ object){  return null;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static boolean isConnectionFast(int type,int subType){  if (type == ConnectivityManager.TYPE_WIFI) {    return true;  } else   if (type == ConnectivityManager.TYPE_MOBILE) {switch (subType) {case TelephonyManager.NETWORK_TYPE_1xRTT:      return false;case TelephonyManager.NETWORK_TYPE_CDMA:    return false;case TelephonyManager.NETWORK_TYPE_EDGE:  return false;case TelephonyManager.NETWORK_TYPE_EVDO_0:return true;case TelephonyManager.NETWORK_TYPE_EVDO_A:return true;case TelephonyManager.NETWORK_TYPE_GPRS:return false;case TelephonyManager.NETWORK_TYPE_HSDPA:return true;case TelephonyManager.NETWORK_TYPE_HSPA:return true;case TelephonyManager.NETWORK_TYPE_HSUPA:return true;case TelephonyManager.NETWORK_TYPE_UMTS:return true;case TelephonyManager.NETWORK_TYPE_EHRPD:return true;case TelephonyManager.NETWORK_TYPE_EVDO_B:return true;case TelephonyManager.NETWORK_TYPE_HSPAP:return true;case TelephonyManager.NETWORK_TYPE_IDEN:return false;case TelephonyManager.NETWORK_TYPE_LTE:return true;case TelephonyManager.NETWORK_TYPE_UNKNOWN:default :return false;}} else {return false;}}  }
class C{  public WFNode(MWFNode node){  super();  setOpaque(true);  m_node=node;  setName(m_node.getName());  m_icon=new WFIcon(node.getAction());  m_name=m_node.getName(true);  setBorder(s_border);  String description=node.getDescription(true);  if (description != null && description.length() > 0)   setToolTipText(description); else   setToolTipText(node.getName(true));  setBounds(node.getXPosition(),node.getYPosition(),s_size.width,s_size.height);  log.config(node.getAD_WF_Node_ID() + "," + node.getName()+ " - "+ getLocation());  setSelected(false);  setVisited(false);}  }
class C{  protected CCFollow(CCNode followedNode){  super();  followedNode_=followedNode;  boundarySet=false;  boundaryFullyCovered=false;  CGSize winSize=CCDirector.sharedDirector().winSize();  fullScreenSize=CGPoint.make(winSize.width,winSize.height);  halfScreenSize=CGPoint.ccpMult(fullScreenSize,.5f);}  }
class C{  public static GoogleCredentials fromStream(InputStream credentialsStream,HttpTransportFactory transportFactory) throws IOException {  Preconditions.checkNotNull(credentialsStream);  Preconditions.checkNotNull(transportFactory);  JsonFactory jsonFactory=OAuth2Utils.JSON_FACTORY;  JsonObjectParser parser=new JsonObjectParser(jsonFactory);  GenericJson fileContents=parser.parseAndClose(credentialsStream,OAuth2Utils.UTF_8,GenericJson.class);  String fileType=(String)fileContents.get("type");  if (fileType == null) {    throw new IOException("Error reading credentials from stream, 'type' field not specified.");  }  if (USER_FILE_TYPE.equals(fileType)) {    return UserCredentials.fromJson(fileContents,transportFactory);  }  if (SERVICE_ACCOUNT_FILE_TYPE.equals(fileType)) {    return ServiceAccountCredentials.fromJson(fileContents,transportFactory);  }  throw new IOException(String.format("Error reading credentials from stream, 'type' value '%s' not recognized." + " Expecting '%s' or '%s'.",fileType,USER_FILE_TYPE,SERVICE_ACCOUNT_FILE_TYPE));}  }
class C{  private static void checkArguments(final JFrame parent,final IDebugger debugger,final ZyGraph graph){  checkArguments(parent,debugger);  Preconditions.checkNotNull(graph,"IE01555: Graph argument can not be null");}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_lang_String() throws Exception {  Provider[] providers=Security.getProviders("Cipher.DES");  assertNotNull("No installed providers support Cipher.DES",providers);  for (int i=0; i < providers.length; i++) {    Cipher cipher=Cipher.getInstance("DES",providers[i].getName());    assertNotNull("Cipher.getInstance() returned a null value",cipher);    try {      cipher=Cipher.getInstance("DoBeDoBeDo",providers[i]);      fail();    } catch (    NoSuchAlgorithmException expected) {    }  }  try {    Cipher.getInstance("DES",(String)null);    fail();  } catch (  IllegalArgumentException expected) {  }  try {    Cipher.getInstance("DES","IHaveNotBeenConfigured");    fail();  } catch (  NoSuchProviderException expected) {  }}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  @Override public void clear(){  if (size != 0) {    Arrays.fill(table,null);    entryForNullKey=null;    modCount++;    size=0;  }}  }
class C{  public void mergeJarFiles(boolean mergeJarFiles){  this.mergeJarFiles=mergeJarFiles;}  }
class C{  private void fireSelectionChangedEvent(int prevSmallest,int prevLargest){  SelectionChangedEvent e=null;  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == SelectionChangedListener.class) {      if (e == null) {        e=new SelectionChangedEvent(this,prevSmallest,prevLargest,getSmallestSelectionIndex(),getLargestSelectionIndex());      }      ((SelectionChangedListener)listeners[i + 1]).selectionChanged(e);    }  }}  }
class C{  public boolean contains(Object value){  if (value == null) {    throw new NullPointerException();  }  Entry tab[]=table;  for (int i=tab.length; i-- > 0; ) {    for (Entry e=tab[i]; e != null; e=e.next) {      if (e.value.equals(value)) {        return true;      }    }  }  return false;}  }
class C{  public UIComponentBaseTestCase(String name){  super(name);}  }
class C{  public void reinitIfClosed(){  if (isClosed.get()) {    logger.info("External Resource was released. Now Re-initializing resources ...");    ActorConfig.createAndGetActorSystem();    httpClientStore.reinit();    tcpSshPingResourceStore.reinit();    try {      Thread.sleep(1000l);    } catch (    InterruptedException e) {      logger.error("error reinit httpClientStore",e);    }    isClosed.set(true);    logger.info("Parallel Client Resources has been reinitialized.");  } else {    logger.debug("NO OP. Resource was not released.");  }}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  @Override public boolean equals(Object o){  if (this == o) {    return true;  }  if (o == null || this.getClass() != o.getClass()) {    return false;  }  Derivation other=(Derivation)o;  if ((rule == null && other.rule != null) || (rule != null && !rule.equals(other.rule))) {    return false;  }  if ((sources == null && other.sources != null) || (sources != null && !sources.equals(other.sources))) {    return false;  }  return true;}  }
class C{  public void createPackageContents(){  if (isCreated)   return;  isCreated=true;  namedElementEClass=createEClass(NAMED_ELEMENT);  createEOperation(namedElementEClass,NAMED_ELEMENT___GET_NAME);  scriptEClass=createEClass(SCRIPT);  createEReference(scriptEClass,SCRIPT__ANNOTATIONS);  createEReference(scriptEClass,SCRIPT__SCRIPT_ELEMENTS);  createEReference(scriptEClass,SCRIPT__MODULE);  createEAttribute(scriptEClass,SCRIPT__FLAGGED_USAGE_MARKING_FINISHED);  scriptElementEClass=createEClass(SCRIPT_ELEMENT);  exportDeclarationEClass=createEClass(EXPORT_DECLARATION);  createEReference(exportDeclarationEClass,EXPORT_DECLARATION__EXPORTED_ELEMENT);  createEReference(exportDeclarationEClass,EXPORT_DECLARATION__DEFAULT_EXPORTED_EXPRESSION);  createEReference(exportDeclarationEClass,EXPORT_DECLARATION__NAMED_EXPORTS);  createEAttribute(exportDeclarationEClass,EXPORT_DECLARATION__WILDCARD_EXPORT);  createEAttribute(exportDeclarationEClass,EXPORT_DECLARATION__DEFAULT_EXPORT);  createEReference(exportDeclarationEClass,EXPORT_DECLARATION__REEXPORTED_FROM);  exportSpecifierEClass=createEClass(EXPORT_SPECIFIER);  createEReference(exportSpecifierEClass,EXPORT_SPECIFIER__ELEMENT);  createEAttribute(exportSpecifierEClass,EXPORT_SPECIFIER__ALIAS);  exportableElementEClass=createEClass(EXPORTABLE_ELEMENT);  createEOperation(exportableElementEClass,EXPORTABLE_ELEMENT___IS_EXPORTED);  createEOperation(exportableElementEClass,EXPORTABLE_ELEMENT___IS_EXPORTED_AS_DEFAULT);  createEOperation(exportableElementEClass,EXPORTABLE_ELEMENT___GET_EXPORTED_NAME);  createEOperation(exportableElementEClass,EXPORTABLE_ELEMENT___IS_TOPLEVEL);  importDeclarationEClass=createEClass(IMPORT_DECLARATION);  createEReference(importDeclarationEClass,IMPORT_DECLARATION__IMPORT_SPECIFIERS);  createEAttribute(importDeclarationEClass,IMPORT_DECLARATION__IMPORT_FROM);  createEReference(importDeclarationEClass,IMPORT_DECLARATION__MODULE);  importSpecifierEClass=createEClass(IMPORT_SPECIFIER);  createEAttribute(importSpecifierEClass,IMPORT_SPECIFIER__FLAGGED_USED_IN_CODE);  namedImportSpecifierEClass=createEClass(NAMED_IMPORT_SPECIFIER);  createEReference(namedImportSpecifierEClass,NAMED_IMPORT_SPECIFIER__IMPORTED_ELEMENT);  createEAttribute(namedImportSpecifierEClass,NAMED_IMPORT_SPECIFIER__IMPORTED_ELEMENT_AS_TEXT);  createEAttribute(namedImportSpecifierEClass,NAMED_IMPORT_SPECIFIER__ALIAS);  createEOperation(namedImportSpecifierEClass,NAMED_IMPORT_SPECIFIER___IS_DEFAULT_IMPORT);  defaultImportSpecifierEClass=createEClass(DEFAULT_IMPORT_SPECIFIER);  createEOperation(defaultImportSpecifierEClass,DEFAULT_IMPORT_SPECIFIER___GET_ALIAS);  createEOperation(defaultImportSpecifierEClass,DEFAULT_IMPORT_SPECIFIER___IS_DEFAULT_IMPORT);  namespaceImportSpecifierEClass=createEClass(NAMESPACE_IMPORT_SPECIFIER);  createEAttribute(namespaceImportSpecifierEClass,NAMESPACE_IMPORT_SPECIFIER__DECLARED_DYNAMIC);  createEAttribute(namespaceImportSpecifierEClass,NAMESPACE_IMPORT_SPECIFIER__ALIAS);  typeProvidingElementEClass=createEClass(TYPE_PROVIDING_ELEMENT);  createEOperation(typeProvidingElementEClass,TYPE_PROVIDING_ELEMENT___GET_DECLARED_TYPE_REF);  typedElementEClass=createEClass(TYPED_ELEMENT);  createEReference(typedElementEClass,TYPED_ELEMENT__DECLARED_TYPE_REF);  createEReference(typedElementEClass,TYPED_ELEMENT__BOGUS_TYPE_REF);  variableEnvironmentElementEClass=createEClass(VARIABLE_ENVIRONMENT_ELEMENT);  createEOperation(variableEnvironmentElementEClass,VARIABLE_ENVIRONMENT_ELEMENT___APPLIES_ONLY_TO_BLOCK_SCOPED_ELEMENTS);  thisTargetEClass=createEClass(THIS_TARGET);  thisArgProviderEClass=createEClass(THIS_ARG_PROVIDER);  variableEClass=createEClass(VARIABLE);  createEOperation(variableEClass,VARIABLE___IS_CONST);  annotableElementEClass=createEClass(ANNOTABLE_ELEMENT);  createEOperation(annotableElementEClass,ANNOTABLE_ELEMENT___GET_ANNOTATIONS);  annotableScriptElementEClass=createEClass(ANNOTABLE_SCRIPT_ELEMENT);  createEReference(annotableScriptElementEClass,ANNOTABLE_SCRIPT_ELEMENT__ANNOTATION_LIST);  createEOperation(annotableScriptElementEClass,ANNOTABLE_SCRIPT_ELEMENT___GET_ANNOTATIONS);  annotableExpressionEClass=createEClass(ANNOTABLE_EXPRESSION);  createEReference(annotableExpressionEClass,ANNOTABLE_EXPRESSION__ANNOTATION_LIST);  createEOperation(annotableExpressionEClass,ANNOTABLE_EXPRESSION___GET_ANNOTATIONS);  abstractAnnotationListEClass=createEClass(ABSTRACT_ANNOTATION_LIST);  createEReference(abstractAnnotationListEClass,ABSTRACT_ANNOTATION_LIST__ANNOTATIONS);  annotationListEClass=createEClass(ANNOTATION_LIST);  expressionAnnotationListEClass=createEClass(EXPRESSION_ANNOTATION_LIST);  annotationEClass=createEClass(ANNOTATION);  createEAttribute(annotationEClass,ANNOTATION__NAME);  createEReference(annotationEClass,ANNOTATION__ARGS);  createEOperation(annotationEClass,ANNOTATION___GET_ANNOTATED_ELEMENT);  annotationArgumentEClass=createEClass(ANNOTATION_ARGUMENT);  createEOperation(annotationArgumentEClass,ANNOTATION_ARGUMENT___VALUE);  createEOperation(annotationArgumentEClass,ANNOTATION_ARGUMENT___GET_VALUE_AS_STRING);  literalAnnotationArgumentEClass=createEClass(LITERAL_ANNOTATION_ARGUMENT);  createEReference(literalAnnotationArgumentEClass,LITERAL_ANNOTATION_ARGUMENT__LITERAL);  createEOperation(literalAnnotationArgumentEClass,LITERAL_ANNOTATION_ARGUMENT___VALUE);  typeRefAnnotationArgumentEClass=createEClass(TYPE_REF_ANNOTATION_ARGUMENT);  createEReference(typeRefAnnotationArgumentEClass,TYPE_REF_ANNOTATION_ARGUMENT__TYPE_REF);  createEOperation(typeRefAnnotationArgumentEClass,TYPE_REF_ANNOTATION_ARGUMENT___VALUE);  functionOrFieldAccessorEClass=createEClass(FUNCTION_OR_FIELD_ACCESSOR);  createEReference(functionOrFieldAccessorEClass,FUNCTION_OR_FIELD_ACCESSOR__BODY);  createEReference(functionOrFieldAccessorEClass,FUNCTION_OR_FIELD_ACCESSOR__LOK);  createEOperation(functionOrFieldAccessorEClass,FUNCTION_OR_FIELD_ACCESSOR___GET_NAME);  createEOperation(functionOrFieldAccessorEClass,FUNCTION_OR_FIELD_ACCESSOR___GET_LOCAL_ARGUMENTS_VARIABLE);  createEOperation(functionOrFieldAccessorEClass,FUNCTION_OR_FIELD_ACCESSOR___IS_ASYNC);  createEOperation(functionOrFieldAccessorEClass,FUNCTION_OR_FIELD_ACCESSOR___GET_DEFINED_FUNCTION_OR_ACCESSOR);  functionDefinitionEClass=createEClass(FUNCTION_DEFINITION);  createEReference(functionDefinitionEClass,FUNCTION_DEFINITION__FPARS);  createEReference(functionDefinitionEClass,FUNCTION_DEFINITION__RETURN_TYPE_REF);  createEAttribute(functionDefinitionEClass,FUNCTION_DEFINITION__GENERATOR);  createEAttribute(functionDefinitionEClass,FUNCTION_DEFINITION__DECLARED_ASYNC);  createEOperation(functionDefinitionEClass,FUNCTION_DEFINITION___IS_ASYNC);  fieldAccessorEClass=createEClass(FIELD_ACCESSOR);  createEOperation(fieldAccessorEClass,FIELD_ACCESSOR___GET_DECLARED_TYPE_REF);  createEOperation(fieldAccessorEClass,FIELD_ACCESSOR___GET_DEFINED_ACCESSOR);  functionDeclarationEClass=createEClass(FUNCTION_DECLARATION);  createEAttribute(functionDeclarationEClass,FUNCTION_DECLARATION__NAME);  createEOperation(functionDeclarationEClass,FUNCTION_DECLARATION___IS_EXTERNAL);  functionExpressionEClass=createEClass(FUNCTION_EXPRESSION);  createEAttribute(functionExpressionEClass,FUNCTION_EXPRESSION__NAME);  createEOperation(functionExpressionEClass,FUNCTION_EXPRESSION___IS_ARROW_FUNCTION);  arrowFunctionEClass=createEClass(ARROW_FUNCTION);  createEAttribute(arrowFunctionEClass,ARROW_FUNCTION__HAS_BRACES_AROUND_BODY);  createEOperation(arrowFunctionEClass,ARROW_FUNCTION___IS_ARROW_FUNCTION);  createEOperation(arrowFunctionEClass,ARROW_FUNCTION___IS_SINGLE_EXPR_IMPLICIT_RETURN);  createEOperation(arrowFunctionEClass,ARROW_FUNCTION___IMPLICIT_RETURN_EXPR);  localArgumentsVariableEClass=createEClass(LOCAL_ARGUMENTS_VARIABLE);  createEOperation(localArgumentsVariableEClass,LOCAL_ARGUMENTS_VARIABLE___GET_NAME);  formalParameterEClass=createEClass(FORMAL_PARAMETER);  createEReference(formalParameterEClass,FORMAL_PARAMETER__ANNOTATIONS);  createEAttribute(formalParameterEClass,FORMAL_PARAMETER__VARIADIC);  createEReference(formalParameterEClass,FORMAL_PARAMETER__DEFINED_TYPE_ELEMENT);  createEReference(formalParameterEClass,FORMAL_PARAMETER__INITIALIZER);  createEReference(formalParameterEClass,FORMAL_PARAMETER__BINDING_PATTERN);  blockEClass=createEClass(BLOCK);  createEReference(blockEClass,BLOCK__STATEMENTS);  createEOperation(blockEClass,BLOCK___APPLIES_ONLY_TO_BLOCK_SCOPED_ELEMENTS);  createEOperation(blockEClass,BLOCK___GET_ALL_STATEMENTS);  createEOperation(blockEClass,BLOCK___GET_ALL_RETURN_STATEMENTS);  createEOperation(blockEClass,BLOCK___GET_ALL_NON_VOID_RETURN_STATEMENTS);  createEOperation(blockEClass,BLOCK___GET_ALL_VOID_RETURN_STATEMENTS);  createEOperation(blockEClass,BLOCK___HAS_NON_VOID_RETURN);  statementEClass=createEClass(STATEMENT);  variableDeclarationContainerEClass=createEClass(VARIABLE_DECLARATION_CONTAINER);  createEReference(variableDeclarationContainerEClass,VARIABLE_DECLARATION_CONTAINER__VAR_DECLS_OR_BINDINGS);  createEAttribute(variableDeclarationContainerEClass,VARIABLE_DECLARATION_CONTAINER__VAR_STMT_KEYWORD);  createEOperation(variableDeclarationContainerEClass,VARIABLE_DECLARATION_CONTAINER___GET_VAR_DECL);  createEOperation(variableDeclarationContainerEClass,VARIABLE_DECLARATION_CONTAINER___IS_BLOCK_SCOPED);  variableStatementEClass=createEClass(VARIABLE_STATEMENT);  exportedVariableStatementEClass=createEClass(EXPORTED_VARIABLE_STATEMENT);  createEOperation(exportedVariableStatementEClass,EXPORTED_VARIABLE_STATEMENT___IS_EXTERNAL);  variableDeclarationOrBindingEClass=createEClass(VARIABLE_DECLARATION_OR_BINDING);  createEOperation(variableDeclarationOrBindingEClass,VARIABLE_DECLARATION_OR_BINDING___GET_VARIABLE_DECLARATIONS);  variableBindingEClass=createEClass(VARIABLE_BINDING);  createEReference(variableBindingEClass,VARIABLE_BINDING__PATTERN);  createEReference(variableBindingEClass,VARIABLE_BINDING__EXPRESSION);  exportedVariableBindingEClass=createEClass(EXPORTED_VARIABLE_BINDING);  createEReference(exportedVariableBindingEClass,EXPORTED_VARIABLE_BINDING__DEFINED_VARIABLE);  variableDeclarationEClass=createEClass(VARIABLE_DECLARATION);  createEReference(variableDeclarationEClass,VARIABLE_DECLARATION__ANNOTATIONS);  createEReference(variableDeclarationEClass,VARIABLE_DECLARATION__EXPRESSION);  createEOperation(variableDeclarationEClass,VARIABLE_DECLARATION___IS_CONST);  exportedVariableDeclarationEClass=createEClass(EXPORTED_VARIABLE_DECLARATION);  createEReference(exportedVariableDeclarationEClass,EXPORTED_VARIABLE_DECLARATION__DEFINED_VARIABLE);  emptyStatementEClass=createEClass(EMPTY_STATEMENT);  expressionStatementEClass=createEClass(EXPRESSION_STATEMENT);  createEReference(expressionStatementEClass,EXPRESSION_STATEMENT__EXPRESSION);  ifStatementEClass=createEClass(IF_STATEMENT);  createEReference(ifStatementEClass,IF_STATEMENT__EXPRESSION);  createEReference(ifStatementEClass,IF_STATEMENT__IF_STMT);  createEReference(ifStatementEClass,IF_STATEMENT__ELSE_STMT);  iterationStatementEClass=createEClass(ITERATION_STATEMENT);  createEReference(iterationStatementEClass,ITERATION_STATEMENT__STATEMENT);  createEReference(iterationStatementEClass,ITERATION_STATEMENT__EXPRESSION);  doStatementEClass=createEClass(DO_STATEMENT);  whileStatementEClass=createEClass(WHILE_STATEMENT);  forStatementEClass=createEClass(FOR_STATEMENT);  createEReference(forStatementEClass,FOR_STATEMENT__INIT_EXPR);  createEReference(forStatementEClass,FOR_STATEMENT__UPDATE_EXPR);  createEAttribute(forStatementEClass,FOR_STATEMENT__FOR_IN);  createEAttribute(forStatementEClass,FOR_STATEMENT__FOR_OF);  createEOperation(forStatementEClass,FOR_STATEMENT___IS_FOR_PLAIN);  createEOperation(forStatementEClass,FOR_STATEMENT___APPLIES_ONLY_TO_BLOCK_SCOPED_ELEMENTS);  continueStatementEClass=createEClass(CONTINUE_STATEMENT);  createEReference(continueStatementEClass,CONTINUE_STATEMENT__LABEL);  breakStatementEClass=createEClass(BREAK_STATEMENT);  createEReference(breakStatementEClass,BREAK_STATEMENT__LABEL);  returnStatementEClass=createEClass(RETURN_STATEMENT);  createEReference(returnStatementEClass,RETURN_STATEMENT__EXPRESSION);  withStatementEClass=createEClass(WITH_STATEMENT);  createEReference(withStatementEClass,WITH_STATEMENT__EXPRESSION);  createEReference(withStatementEClass,WITH_STATEMENT__STATEMENT);  switchStatementEClass=createEClass(SWITCH_STATEMENT);  createEReference(switchStatementEClass,SWITCH_STATEMENT__EXPRESSION);  createEReference(switchStatementEClass,SWITCH_STATEMENT__CASES);  createEOperation(switchStatementEClass,SWITCH_STATEMENT___APPLIES_ONLY_TO_BLOCK_SCOPED_ELEMENTS);  createEOperation(switchStatementEClass,SWITCH_STATEMENT___GET_DEFAULT_CLAUSE);  createEOperation(switchStatementEClass,SWITCH_STATEMENT___GET_CASE_CLAUSES);  abstractCaseClauseEClass=createEClass(ABSTRACT_CASE_CLAUSE);  createEReference(abstractCaseClauseEClass,ABSTRACT_CASE_CLAUSE__STATEMENTS);  caseClauseEClass=createEClass(CASE_CLAUSE);  createEReference(caseClauseEClass,CASE_CLAUSE__EXPRESSION);  defaultClauseEClass=createEClass(DEFAULT_CLAUSE);  labelledStatementEClass=createEClass(LABELLED_STATEMENT);  createEAttribute(labelledStatementEClass,LABELLED_STATEMENT__NAME);  createEReference(labelledStatementEClass,LABELLED_STATEMENT__STATEMENT);  throwStatementEClass=createEClass(THROW_STATEMENT);  createEReference(throwStatementEClass,THROW_STATEMENT__EXPRESSION);  tryStatementEClass=createEClass(TRY_STATEMENT);  createEReference(tryStatementEClass,TRY_STATEMENT__BLOCK);  createEReference(tryStatementEClass,TRY_STATEMENT__CATCH);  createEReference(tryStatementEClass,TRY_STATEMENT__FINALLY);  abstractCatchBlockEClass=createEClass(ABSTRACT_CATCH_BLOCK);  createEReference(abstractCatchBlockEClass,ABSTRACT_CATCH_BLOCK__BLOCK);  catchBlockEClass=createEClass(CATCH_BLOCK);  createEReference(catchBlockEClass,CATCH_BLOCK__CATCH_VARIABLE);  catchVariableEClass=createEClass(CATCH_VARIABLE);  createEReference(catchVariableEClass,CATCH_VARIABLE__BINDING_PATTERN);  finallyBlockEClass=createEClass(FINALLY_BLOCK);  debuggerStatementEClass=createEClass(DEBUGGER_STATEMENT);  primaryExpressionEClass=createEClass(PRIMARY_EXPRESSION);  parenExpressionEClass=createEClass(PAREN_EXPRESSION);  createEReference(parenExpressionEClass,PAREN_EXPRESSION__EXPRESSION);  createEOperation(parenExpressionEClass,PAREN_EXPRESSION___IS_VALID_SIMPLE_ASSIGNMENT_TARGET);  identifierRefEClass=createEClass(IDENTIFIER_REF);  createEReference(identifierRefEClass,IDENTIFIER_REF__ID);  createEAttribute(identifierRefEClass,IDENTIFIER_REF__ID_AS_TEXT);  createEOperation(identifierRefEClass,IDENTIFIER_REF___IS_VALID_SIMPLE_ASSIGNMENT_TARGET);  strictModeRelevantEClass=createEClass(STRICT_MODE_RELEVANT);  createEAttribute(strictModeRelevantEClass,STRICT_MODE_RELEVANT__STRICT_MODE);  superLiteralEClass=createEClass(SUPER_LITERAL);  createEOperation(superLiteralEClass,SUPER_LITERAL___IS_SUPER_CONSTRUCTOR_ACCESS);  createEOperation(superLiteralEClass,SUPER_LITERAL___IS_SUPER_MEMBER_ACCESS);  thisLiteralEClass=createEClass(THIS_LITERAL);  arrayLiteralEClass=createEClass(ARRAY_LITERAL);  createEReference(arrayLiteralEClass,ARRAY_LITERAL__ELEMENTS);  createEAttribute(arrayLiteralEClass,ARRAY_LITERAL__TRAILING_COMMA);  arrayElementEClass=createEClass(ARRAY_ELEMENT);  createEAttribute(arrayElementEClass,ARRAY_ELEMENT__SPREAD);  createEReference(arrayElementEClass,ARRAY_ELEMENT__EXPRESSION);  arrayPaddingEClass=createEClass(ARRAY_PADDING);  objectLiteralEClass=createEClass(OBJECT_LITERAL);  createEReference(objectLiteralEClass,OBJECT_LITERAL__PROPERTY_ASSIGNMENTS);  propertyAssignmentEClass=createEClass(PROPERTY_ASSIGNMENT);  createEOperation(propertyAssignmentEClass,PROPERTY_ASSIGNMENT___GET_DEFINED_MEMBER);  createEOperation(propertyAssignmentEClass,PROPERTY_ASSIGNMENT___IS_VALID_NAME);  propertyNameOwnerEClass=createEClass(PROPERTY_NAME_OWNER);  createEReference(propertyNameOwnerEClass,PROPERTY_NAME_OWNER__DECLARED_NAME);  createEOperation(propertyNameOwnerEClass,PROPERTY_NAME_OWNER___GET_NAME);  createEOperation(propertyNameOwnerEClass,PROPERTY_NAME_OWNER___IS_VALID_NAME);  literalOrComputedPropertyNameEClass=createEClass(LITERAL_OR_COMPUTED_PROPERTY_NAME);  createEAttribute(literalOrComputedPropertyNameEClass,LITERAL_OR_COMPUTED_PROPERTY_NAME__KIND);  createEAttribute(literalOrComputedPropertyNameEClass,LITERAL_OR_COMPUTED_PROPERTY_NAME__LITERAL_NAME);  createEAttribute(literalOrComputedPropertyNameEClass,LITERAL_OR_COMPUTED_PROPERTY_NAME__COMPUTED_NAME);  createEReference(literalOrComputedPropertyNameEClass,LITERAL_OR_COMPUTED_PROPERTY_NAME__EXPRESSION);  createEOperation(literalOrComputedPropertyNameEClass,LITERAL_OR_COMPUTED_PROPERTY_NAME___GET_NAME);  annotablePropertyAssignmentEClass=createEClass(ANNOTABLE_PROPERTY_ASSIGNMENT);  createEReference(annotablePropertyAssignmentEClass,ANNOTABLE_PROPERTY_ASSIGNMENT__ANNOTATION_LIST);  createEOperation(annotablePropertyAssignmentEClass,ANNOTABLE_PROPERTY_ASSIGNMENT___GET_ANNOTATIONS);  propertyAssignmentAnnotationListEClass=createEClass(PROPERTY_ASSIGNMENT_ANNOTATION_LIST);  createEOperation(propertyAssignmentAnnotationListEClass,PROPERTY_ASSIGNMENT_ANNOTATION_LIST___GET_DEFINED_MEMBER);  propertyNameValuePairEClass=createEClass(PROPERTY_NAME_VALUE_PAIR);  createEReference(propertyNameValuePairEClass,PROPERTY_NAME_VALUE_PAIR__DEFINED_FIELD);  createEReference(propertyNameValuePairEClass,PROPERTY_NAME_VALUE_PAIR__EXPRESSION);  createEOperation(propertyNameValuePairEClass,PROPERTY_NAME_VALUE_PAIR___GET_DEFINED_MEMBER);  createEOperation(propertyNameValuePairEClass,PROPERTY_NAME_VALUE_PAIR___IS_VALID_NAME);  propertyNameValuePairSingleNameEClass=createEClass(PROPERTY_NAME_VALUE_PAIR_SINGLE_NAME);  createEReference(propertyNameValuePairSingleNameEClass,PROPERTY_NAME_VALUE_PAIR_SINGLE_NAME__IDENTIFIER_REF);  createEOperation(propertyNameValuePairSingleNameEClass,PROPERTY_NAME_VALUE_PAIR_SINGLE_NAME___GET_NAME);  propertyMethodDeclarationEClass=createEClass(PROPERTY_METHOD_DECLARATION);  createEReference(propertyMethodDeclarationEClass,PROPERTY_METHOD_DECLARATION__DEFINED_METHOD);  createEOperation(propertyMethodDeclarationEClass,PROPERTY_METHOD_DECLARATION___GET_DEFINED_MEMBER);  getterDeclarationEClass=createEClass(GETTER_DECLARATION);  createEReference(getterDeclarationEClass,GETTER_DECLARATION__DEFINED_GETTER);  createEOperation(getterDeclarationEClass,GETTER_DECLARATION___GET_DEFINED_ACCESSOR);  setterDeclarationEClass=createEClass(SETTER_DECLARATION);  createEReference(setterDeclarationEClass,SETTER_DECLARATION__DEFINED_SETTER);  createEReference(setterDeclarationEClass,SETTER_DECLARATION__FPAR);  createEOperation(setterDeclarationEClass,SETTER_DECLARATION___GET_DEFINED_ACCESSOR);  createEOperation(setterDeclarationEClass,SETTER_DECLARATION___GET_DECLARED_TYPE_REF);  propertyGetterDeclarationEClass=createEClass(PROPERTY_GETTER_DECLARATION);  createEOperation(propertyGetterDeclarationEClass,PROPERTY_GETTER_DECLARATION___GET_DEFINED_GETTER);  createEOperation(propertyGetterDeclarationEClass,PROPERTY_GETTER_DECLARATION___GET_DEFINED_MEMBER);  createEOperation(propertyGetterDeclarationEClass,PROPERTY_GETTER_DECLARATION___IS_VALID_NAME);  propertySetterDeclarationEClass=createEClass(PROPERTY_SETTER_DECLARATION);  createEOperation(propertySetterDeclarationEClass,PROPERTY_SETTER_DECLARATION___GET_DEFINED_SETTER);  createEOperation(propertySetterDeclarationEClass,PROPERTY_SETTER_DECLARATION___GET_DEFINED_MEMBER);  createEOperation(propertySetterDeclarationEClass,PROPERTY_SETTER_DECLARATION___IS_VALID_NAME);  expressionEClass=createEClass(EXPRESSION);  createEOperation(expressionEClass,EXPRESSION___IS_VALID_SIMPLE_ASSIGNMENT_TARGET);  newTargetEClass=createEClass(NEW_TARGET);  newExpressionEClass=createEClass(NEW_EXPRESSION);  createEReference(newExpressionEClass,NEW_EXPRESSION__CALLEE);  createEReference(newExpressionEClass,NEW_EXPRESSION__ARGUMENTS);  createEAttribute(newExpressionEClass,NEW_EXPRESSION__WITH_ARGS);  parameterizedAccessEClass=createEClass(PARAMETERIZED_ACCESS);  createEReference(parameterizedAccessEClass,PARAMETERIZED_ACCESS__TYPE_ARGS);  createEOperation(parameterizedAccessEClass,PARAMETERIZED_ACCESS___IS_PARAMETERIZED);  parameterizedCallExpressionEClass=createEClass(PARAMETERIZED_CALL_EXPRESSION);  createEReference(parameterizedCallExpressionEClass,PARAMETERIZED_CALL_EXPRESSION__TARGET);  createEReference(parameterizedCallExpressionEClass,PARAMETERIZED_CALL_EXPRESSION__ARGUMENTS);  createEOperation(parameterizedCallExpressionEClass,PARAMETERIZED_CALL_EXPRESSION___GET_RECEIVER);  argumentEClass=createEClass(ARGUMENT);  createEAttribute(argumentEClass,ARGUMENT__SPREAD);  createEReference(argumentEClass,ARGUMENT__EXPRESSION);  indexedAccessExpressionEClass=createEClass(INDEXED_ACCESS_EXPRESSION);  createEReference(indexedAccessExpressionEClass,INDEXED_ACCESS_EXPRESSION__TARGET);  createEReference(indexedAccessExpressionEClass,INDEXED_ACCESS_EXPRESSION__INDEX);  createEOperation(indexedAccessExpressionEClass,INDEXED_ACCESS_EXPRESSION___IS_VALID_SIMPLE_ASSIGNMENT_TARGET);  taggedTemplateStringEClass=createEClass(TAGGED_TEMPLATE_STRING);  createEReference(taggedTemplateStringEClass,TAGGED_TEMPLATE_STRING__TARGET);  createEReference(taggedTemplateStringEClass,TAGGED_TEMPLATE_STRING__TEMPLATE);  parameterizedPropertyAccessExpressionEClass=createEClass(PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION);  createEReference(parameterizedPropertyAccessExpressionEClass,PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION__TARGET);  createEReference(parameterizedPropertyAccessExpressionEClass,PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION__PROPERTY);  createEAttribute(parameterizedPropertyAccessExpressionEClass,PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION__PROPERTY_AS_TEXT);  createEOperation(parameterizedPropertyAccessExpressionEClass,PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION___IS_VALID_SIMPLE_ASSIGNMENT_TARGET);  awaitExpressionEClass=createEClass(AWAIT_EXPRESSION);  createEReference(awaitExpressionEClass,AWAIT_EXPRESSION__EXPRESSION);  promisifyExpressionEClass=createEClass(PROMISIFY_EXPRESSION);  createEReference(promisifyExpressionEClass,PROMISIFY_EXPRESSION__EXPRESSION);  yieldExpressionEClass=createEClass(YIELD_EXPRESSION);  createEReference(yieldExpressionEClass,YIELD_EXPRESSION__EXPRESSION);  createEAttribute(yieldExpressionEClass,YIELD_EXPRESSION__MANY);  literalEClass=createEClass(LITERAL);  createEOperation(literalEClass,LITERAL___GET_VALUE_AS_STRING);  nullLiteralEClass=createEClass(NULL_LITERAL);  createEOperation(nullLiteralEClass,NULL_LITERAL___GET_VALUE_AS_STRING);  booleanLiteralEClass=createEClass(BOOLEAN_LITERAL);  createEAttribute(booleanLiteralEClass,BOOLEAN_LITERAL__TRUE);  createEOperation(booleanLiteralEClass,BOOLEAN_LITERAL___GET_VALUE_AS_STRING);  stringLiteralEClass=createEClass(STRING_LITERAL);  createEAttribute(stringLiteralEClass,STRING_LITERAL__VALUE);  createEAttribute(stringLiteralEClass,STRING_LITERAL__RAW_VALUE);  createEOperation(stringLiteralEClass,STRING_LITERAL___GET_VALUE_AS_STRING);  templateLiteralEClass=createEClass(TEMPLATE_LITERAL);  createEReference(templateLiteralEClass,TEMPLATE_LITERAL__SEGMENTS);  createEOperation(templateLiteralEClass,TEMPLATE_LITERAL___GET_VALUE_AS_STRING);  templateSegmentEClass=createEClass(TEMPLATE_SEGMENT);  createEAttribute(templateSegmentEClass,TEMPLATE_SEGMENT__RAW_VALUE);  createEOperation(templateSegmentEClass,TEMPLATE_SEGMENT___GET_VALUE_AS_STRING);  numericLiteralEClass=createEClass(NUMERIC_LITERAL);  createEAttribute(numericLiteralEClass,NUMERIC_LITERAL__VALUE);  createEOperation(numericLiteralEClass,NUMERIC_LITERAL___GET_VALUE_AS_STRING);  doubleLiteralEClass=createEClass(DOUBLE_LITERAL);  createEOperation(doubleLiteralEClass,DOUBLE_LITERAL___TO_DOUBLE);  createEOperation(doubleLiteralEClass,DOUBLE_LITERAL___GET_VALUE_AS_STRING);  abstractIntLiteralEClass=createEClass(ABSTRACT_INT_LITERAL);  createEOperation(abstractIntLiteralEClass,ABSTRACT_INT_LITERAL___TO_INT);  createEOperation(abstractIntLiteralEClass,ABSTRACT_INT_LITERAL___TO_LONG);  createEOperation(abstractIntLiteralEClass,ABSTRACT_INT_LITERAL___TO_BIG_INTEGER);  intLiteralEClass=createEClass(INT_LITERAL);  binaryIntLiteralEClass=createEClass(BINARY_INT_LITERAL);  octalIntLiteralEClass=createEClass(OCTAL_INT_LITERAL);  legacyOctalIntLiteralEClass=createEClass(LEGACY_OCTAL_INT_LITERAL);  hexIntLiteralEClass=createEClass(HEX_INT_LITERAL);  scientificIntLiteralEClass=createEClass(SCIENTIFIC_INT_LITERAL);  regularExpressionLiteralEClass=createEClass(REGULAR_EXPRESSION_LITERAL);  createEAttribute(regularExpressionLiteralEClass,REGULAR_EXPRESSION_LITERAL__VALUE);  createEOperation(regularExpressionLiteralEClass,REGULAR_EXPRESSION_LITERAL___GET_VALUE_AS_STRING);  postfixExpressionEClass=createEClass(POSTFIX_EXPRESSION);  createEReference(postfixExpressionEClass,POSTFIX_EXPRESSION__EXPRESSION);  createEAttribute(postfixExpressionEClass,POSTFIX_EXPRESSION__OP);  unaryExpressionEClass=createEClass(UNARY_EXPRESSION);  createEAttribute(unaryExpressionEClass,UNARY_EXPRESSION__OP);  createEReference(unaryExpressionEClass,UNARY_EXPRESSION__EXPRESSION);  castExpressionEClass=createEClass(CAST_EXPRESSION);  createEReference(castExpressionEClass,CAST_EXPRESSION__EXPRESSION);  createEReference(castExpressionEClass,CAST_EXPRESSION__TARGET_TYPE_REF);  multiplicativeExpressionEClass=createEClass(MULTIPLICATIVE_EXPRESSION);  createEReference(multiplicativeExpressionEClass,MULTIPLICATIVE_EXPRESSION__LHS);  createEAttribute(multiplicativeExpressionEClass,MULTIPLICATIVE_EXPRESSION__OP);  createEReference(multiplicativeExpressionEClass,MULTIPLICATIVE_EXPRESSION__RHS);  additiveExpressionEClass=createEClass(ADDITIVE_EXPRESSION);  createEReference(additiveExpressionEClass,ADDITIVE_EXPRESSION__LHS);  createEAttribute(additiveExpressionEClass,ADDITIVE_EXPRESSION__OP);  createEReference(additiveExpressionEClass,ADDITIVE_EXPRESSION__RHS);  shiftExpressionEClass=createEClass(SHIFT_EXPRESSION);  createEReference(shiftExpressionEClass,SHIFT_EXPRESSION__LHS);  createEAttribute(shiftExpressionEClass,SHIFT_EXPRESSION__OP);  createEReference(shiftExpressionEClass,SHIFT_EXPRESSION__RHS);  relationalExpressionEClass=createEClass(RELATIONAL_EXPRESSION);  createEReference(relationalExpressionEClass,RELATIONAL_EXPRESSION__LHS);  createEAttribute(relationalExpressionEClass,RELATIONAL_EXPRESSION__OP);  createEReference(relationalExpressionEClass,RELATIONAL_EXPRESSION__RHS);  equalityExpressionEClass=createEClass(EQUALITY_EXPRESSION);  createEReference(equalityExpressionEClass,EQUALITY_EXPRESSION__LHS);  createEAttribute(equalityExpressionEClass,EQUALITY_EXPRESSION__OP);  createEReference(equalityExpressionEClass,EQUALITY_EXPRESSION__RHS);  binaryBitwiseExpressionEClass=createEClass(BINARY_BITWISE_EXPRESSION);  createEReference(binaryBitwiseExpressionEClass,BINARY_BITWISE_EXPRESSION__LHS);  createEAttribute(binaryBitwiseExpressionEClass,BINARY_BITWISE_EXPRESSION__OP);  createEReference(binaryBitwiseExpressionEClass,BINARY_BITWISE_EXPRESSION__RHS);  binaryLogicalExpressionEClass=createEClass(BINARY_LOGICAL_EXPRESSION);  createEReference(binaryLogicalExpressionEClass,BINARY_LOGICAL_EXPRESSION__LHS);  createEAttribute(binaryLogicalExpressionEClass,BINARY_LOGICAL_EXPRESSION__OP);  createEReference(binaryLogicalExpressionEClass,BINARY_LOGICAL_EXPRESSION__RHS);  conditionalExpressionEClass=createEClass(CONDITIONAL_EXPRESSION);  createEReference(conditionalExpressionEClass,CONDITIONAL_EXPRESSION__EXPRESSION);  createEReference(conditionalExpressionEClass,CONDITIONAL_EXPRESSION__TRUE_EXPRESSION);  createEReference(conditionalExpressionEClass,CONDITIONAL_EXPRESSION__FALSE_EXPRESSION);  assignmentExpressionEClass=createEClass(ASSIGNMENT_EXPRESSION);  createEReference(assignmentExpressionEClass,ASSIGNMENT_EXPRESSION__LHS);  createEAttribute(assignmentExpressionEClass,ASSIGNMENT_EXPRESSION__OP);  createEReference(assignmentExpressionEClass,ASSIGNMENT_EXPRESSION__RHS);  commaExpressionEClass=createEClass(COMMA_EXPRESSION);  createEReference(commaExpressionEClass,COMMA_EXPRESSION__EXPRS);  typeDefiningElementEClass=createEClass(TYPE_DEFINING_ELEMENT);  createEReference(typeDefiningElementEClass,TYPE_DEFINING_ELEMENT__DEFINED_TYPE);  genericDeclarationEClass=createEClass(GENERIC_DECLARATION);  createEReference(genericDeclarationEClass,GENERIC_DECLARATION__TYPE_VARS);  n4TypeDefinitionEClass=createEClass(N4_TYPE_DEFINITION);  createEOperation(n4TypeDefinitionEClass,N4_TYPE_DEFINITION___IS_EXTERNAL);  n4TypeDeclarationEClass=createEClass(N4_TYPE_DECLARATION);  createEAttribute(n4TypeDeclarationEClass,N4_TYPE_DECLARATION__NAME);  createEOperation(n4TypeDeclarationEClass,N4_TYPE_DECLARATION___IS_EXTERNAL);  n4ClassifierDeclarationEClass=createEClass(N4_CLASSIFIER_DECLARATION);  createEAttribute(n4ClassifierDeclarationEClass,N4_CLASSIFIER_DECLARATION__TYPING_STRATEGY);  n4ClassifierDefinitionEClass=createEClass(N4_CLASSIFIER_DEFINITION);  createEReference(n4ClassifierDefinitionEClass,N4_CLASSIFIER_DEFINITION__OWNED_MEMBERS_RAW);  createEOperation(n4ClassifierDefinitionEClass,N4_CLASSIFIER_DEFINITION___GET_OWNED_MEMBERS);  createEOperation(n4ClassifierDefinitionEClass,N4_CLASSIFIER_DEFINITION___GET_OWNED_CTOR);  createEOperation(n4ClassifierDefinitionEClass,N4_CLASSIFIER_DEFINITION___GET_OWNED_CALLABLE_CTOR);  createEOperation(n4ClassifierDefinitionEClass,N4_CLASSIFIER_DEFINITION___GET_OWNED_METHODS);  createEOperation(n4ClassifierDefinitionEClass,N4_CLASSIFIER_DEFINITION___GET_OWNED_FIELDS);  createEOperation(n4ClassifierDefinitionEClass,N4_CLASSIFIER_DEFINITION___GET_OWNED_GETTERS);  createEOperation(n4ClassifierDefinitionEClass,N4_CLASSIFIER_DEFINITION___GET_OWNED_SETTERS);  createEOperation(n4ClassifierDefinitionEClass,N4_CLASSIFIER_DEFINITION___GET_SUPER_CLASSIFIER_REFS);  createEOperation(n4ClassifierDefinitionEClass,N4_CLASSIFIER_DEFINITION___GET_IMPLEMENTED_OR_EXTENDED_INTERFACE_REFS);  n4ClassDefinitionEClass=createEClass(N4_CLASS_DEFINITION);  createEReference(n4ClassDefinitionEClass,N4_CLASS_DEFINITION__SUPER_CLASS_REF);  createEReference(n4ClassDefinitionEClass,N4_CLASS_DEFINITION__SUPER_CLASS_EXPRESSION);  createEReference(n4ClassDefinitionEClass,N4_CLASS_DEFINITION__IMPLEMENTED_INTERFACE_REFS);  createEOperation(n4ClassDefinitionEClass,N4_CLASS_DEFINITION___GET_DEFINED_TYPE_AS_CLASS);  createEOperation(n4ClassDefinitionEClass,N4_CLASS_DEFINITION___GET_SUPER_CLASSIFIER_REFS);  createEOperation(n4ClassDefinitionEClass,N4_CLASS_DEFINITION___GET_IMPLEMENTED_OR_EXTENDED_INTERFACE_REFS);  n4ClassDeclarationEClass=createEClass(N4_CLASS_DECLARATION);  createEOperation(n4ClassDeclarationEClass,N4_CLASS_DECLARATION___IS_ABSTRACT);  n4ClassExpressionEClass=createEClass(N4_CLASS_EXPRESSION);  createEAttribute(n4ClassExpressionEClass,N4_CLASS_EXPRESSION__NAME);  n4InterfaceDeclarationEClass=createEClass(N4_INTERFACE_DECLARATION);  createEReference(n4InterfaceDeclarationEClass,N4_INTERFACE_DECLARATION__SUPER_INTERFACE_REFS);  createEOperation(n4InterfaceDeclarationEClass,N4_INTERFACE_DECLARATION___GET_DEFINED_TYPE_AS_INTERFACE);  createEOperation(n4InterfaceDeclarationEClass,N4_INTERFACE_DECLARATION___GET_SUPER_CLASSIFIER_REFS);  createEOperation(n4InterfaceDeclarationEClass,N4_INTERFACE_DECLARATION___GET_IMPLEMENTED_OR_EXTENDED_INTERFACE_REFS);  n4EnumDeclarationEClass=createEClass(N4_ENUM_DECLARATION);  createEReference(n4EnumDeclarationEClass,N4_ENUM_DECLARATION__LITERALS);  createEOperation(n4EnumDeclarationEClass,N4_ENUM_DECLARATION___GET_DEFINED_TYPE_AS_ENUM);  n4EnumLiteralEClass=createEClass(N4_ENUM_LITERAL);  createEAttribute(n4EnumLiteralEClass,N4_ENUM_LITERAL__NAME);  createEAttribute(n4EnumLiteralEClass,N4_ENUM_LITERAL__VALUE);  createEReference(n4EnumLiteralEClass,N4_ENUM_LITERAL__DEFINED_LITERAL);  modifiableElementEClass=createEClass(MODIFIABLE_ELEMENT);  createEAttribute(modifiableElementEClass,MODIFIABLE_ELEMENT__DECLARED_MODIFIERS);  n4MemberDeclarationEClass=createEClass(N4_MEMBER_DECLARATION);  createEReference(n4MemberDeclarationEClass,N4_MEMBER_DECLARATION__OWNER);  createEOperation(n4MemberDeclarationEClass,N4_MEMBER_DECLARATION___GET_DEFINED_TYPE_ELEMENT);  createEOperation(n4MemberDeclarationEClass,N4_MEMBER_DECLARATION___IS_DECLARED_STATIC);  createEOperation(n4MemberDeclarationEClass,N4_MEMBER_DECLARATION___IS_STATIC);  createEOperation(n4MemberDeclarationEClass,N4_MEMBER_DECLARATION___IS_DECLARED_FINAL);  createEOperation(n4MemberDeclarationEClass,N4_MEMBER_DECLARATION___IS_FINAL);  createEOperation(n4MemberDeclarationEClass,N4_MEMBER_DECLARATION___IS_CONSTRUCTOR);  createEOperation(n4MemberDeclarationEClass,N4_MEMBER_DECLARATION___IS_CALLABLE_CONSTRUCTOR);  annotableN4MemberDeclarationEClass=createEClass(ANNOTABLE_N4_MEMBER_DECLARATION);  createEReference(annotableN4MemberDeclarationEClass,ANNOTABLE_N4_MEMBER_DECLARATION__ANNOTATION_LIST);  createEOperation(annotableN4MemberDeclarationEClass,ANNOTABLE_N4_MEMBER_DECLARATION___GET_ANNOTATIONS);  n4MemberAnnotationListEClass=createEClass(N4_MEMBER_ANNOTATION_LIST);  createEOperation(n4MemberAnnotationListEClass,N4_MEMBER_ANNOTATION_LIST___GET_DEFINED_TYPE_ELEMENT);  createEOperation(n4MemberAnnotationListEClass,N4_MEMBER_ANNOTATION_LIST___GET_DECLARED_TYPE_REF);  createEOperation(n4MemberAnnotationListEClass,N4_MEMBER_ANNOTATION_LIST___GET_NAME);  n4FieldDeclarationEClass=createEClass(N4_FIELD_DECLARATION);  createEReference(n4FieldDeclarationEClass,N4_FIELD_DECLARATION__DEFINED_FIELD);  createEReference(n4FieldDeclarationEClass,N4_FIELD_DECLARATION__EXPRESSION);  createEOperation(n4FieldDeclarationEClass,N4_FIELD_DECLARATION___GET_DEFINED_TYPE_ELEMENT);  createEOperation(n4FieldDeclarationEClass,N4_FIELD_DECLARATION___IS_CONST);  createEOperation(n4FieldDeclarationEClass,N4_FIELD_DECLARATION___IS_STATIC);  createEOperation(n4FieldDeclarationEClass,N4_FIELD_DECLARATION___IS_VALID);  createEOperation(n4FieldDeclarationEClass,N4_FIELD_DECLARATION___IS_VALID_NAME);  methodDeclarationEClass=createEClass(METHOD_DECLARATION);  createEOperation(methodDeclarationEClass,METHOD_DECLARATION___EXISTS_EXPLICIT_SUPER_CALL);  createEOperation(methodDeclarationEClass,METHOD_DECLARATION___GET_DEFINED_TYPE_ELEMENT);  createEOperation(methodDeclarationEClass,METHOD_DECLARATION___IS_STATIC);  n4MethodDeclarationEClass=createEClass(N4_METHOD_DECLARATION);  createEOperation(n4MethodDeclarationEClass,N4_METHOD_DECLARATION___IS_ABSTRACT);  createEOperation(n4MethodDeclarationEClass,N4_METHOD_DECLARATION___IS_CONSTRUCTOR);  createEOperation(n4MethodDeclarationEClass,N4_METHOD_DECLARATION___IS_CALLABLE_CONSTRUCTOR);  createEOperation(n4MethodDeclarationEClass,N4_METHOD_DECLARATION___IS_STATIC);  createEOperation(n4MethodDeclarationEClass,N4_METHOD_DECLARATION___IS_VALID_NAME);  n4FieldAccessorEClass=createEClass(N4_FIELD_ACCESSOR);  createEOperation(n4FieldAccessorEClass,N4_FIELD_ACCESSOR___IS_ABSTRACT);  createEOperation(n4FieldAccessorEClass,N4_FIELD_ACCESSOR___IS_VALID_NAME);  n4GetterDeclarationEClass=createEClass(N4_GETTER_DECLARATION);  createEOperation(n4GetterDeclarationEClass,N4_GETTER_DECLARATION___GET_DEFINED_TYPE_ELEMENT);  n4SetterDeclarationEClass=createEClass(N4_SETTER_DECLARATION);  createEOperation(n4SetterDeclarationEClass,N4_SETTER_DECLARATION___GET_DEFINED_TYPE_ELEMENT);  bindingPatternEClass=createEClass(BINDING_PATTERN);  createEReference(bindingPatternEClass,BINDING_PATTERN__PROPERTIES);  createEReference(bindingPatternEClass,BINDING_PATTERN__ELEMENTS);  objectBindingPatternEClass=createEClass(OBJECT_BINDING_PATTERN);  arrayBindingPatternEClass=createEClass(ARRAY_BINDING_PATTERN);  bindingPropertyEClass=createEClass(BINDING_PROPERTY);  createEReference(bindingPropertyEClass,BINDING_PROPERTY__VALUE);  createEReference(bindingPropertyEClass,BINDING_PROPERTY__VAR_DECL);  createEOperation(bindingPropertyEClass,BINDING_PROPERTY___GET_NAME);  createEOperation(bindingPropertyEClass,BINDING_PROPERTY___IS_VALID_NAME);  bindingElementEClass=createEClass(BINDING_ELEMENT);  createEAttribute(bindingElementEClass,BINDING_ELEMENT__REST);  createEReference(bindingElementEClass,BINDING_ELEMENT__VAR_DECL);  createEReference(bindingElementEClass,BINDING_ELEMENT__NESTED_PATTERN);  createEReference(bindingElementEClass,BINDING_ELEMENT__EXPRESSION);  variableStatementKeywordEEnum=createEEnum(VARIABLE_STATEMENT_KEYWORD);  propertyNameKindEEnum=createEEnum(PROPERTY_NAME_KIND);  postfixOperatorEEnum=createEEnum(POSTFIX_OPERATOR);  unaryOperatorEEnum=createEEnum(UNARY_OPERATOR);  multiplicativeOperatorEEnum=createEEnum(MULTIPLICATIVE_OPERATOR);  additiveOperatorEEnum=createEEnum(ADDITIVE_OPERATOR);  relationalOperatorEEnum=createEEnum(RELATIONAL_OPERATOR);  equalityOperatorEEnum=createEEnum(EQUALITY_OPERATOR);  binaryBitwiseOperatorEEnum=createEEnum(BINARY_BITWISE_OPERATOR);  binaryLogicalOperatorEEnum=createEEnum(BINARY_LOGICAL_OPERATOR);  shiftOperatorEEnum=createEEnum(SHIFT_OPERATOR);  assignmentOperatorEEnum=createEEnum(ASSIGNMENT_OPERATOR);  n4ModifierEEnum=createEEnum(N4_MODIFIER);  iteratorOfStatementEDataType=createEDataType(ITERATOR_OF_STATEMENT);  iteratorOfReturnStatementEDataType=createEDataType(ITERATOR_OF_RETURN_STATEMENT);}  }
class C{  public void clearOutputs(){  unCache();  for (  TransactionOutput output : outputs) {    output.setParent(null);  }  outputs.clear();  this.length=this.unsafeBitcoinSerialize().length;}  }
class C{  public BumpSensor(OdorWorldEntity parent,double bumpVal){  super(parent,"" + bumpVal);  this.bumpValue=bumpVal;}  }
class C{  public ProcessWorkflow updateWorkflow(long processWorkflowId,long preProcessStepId,long postProcessStepId,String autoEvent,String actionName,boolean assignUser,long actionUserId,boolean requestPayment,String paymentFee,boolean generateReceptionNo,String receptionNoPattern,boolean generateDeadline,String deadlinePattern,boolean isFinishStep,String preCondition,boolean isMultipled,ServiceContext context) throws PortalException, SystemException {  ProcessWorkflow workflow=processWorkflowPersistence.fetchByPrimaryKey(processWorkflowId);  if (Validator.isNotNull(workflow)) {    workflow.setModifiedDate(new Date());    workflow.setPreProcessStepId(preProcessStepId);    workflow.setAutoEvent(autoEvent);    workflow.setPostProcessStepId(postProcessStepId);    workflow.setActionName(actionName);    workflow.setAssignUser(assignUser);    workflow.setActionUserId(actionUserId);    workflow.setRequestPayment(requestPayment);    workflow.setPaymentFee(paymentFee);    workflow.setGenerateReceptionNo(generateReceptionNo);    workflow.setReceptionNoPattern(receptionNoPattern);    workflow.setGenerateDeadline(generateDeadline);    workflow.setDeadlinePattern(deadlinePattern);    workflow.setIsFinishStep(isFinishStep);    workflow.setIsMultipled(isMultipled);    workflow.setPreCondition(preCondition);    processWorkflowPersistence.update(workflow);  }  return workflow;}  }
class C{  public void storeAssetOptionsMethods(List<AssetOptionsMethodInfo> assetMethods){  for (  AssetOptionsMethodInfo annotatedMethodInfo : assetMethods) {    final String assetTypeName=annotatedMethodInfo.assetName;    if (!supportedAssetTypes.containsKey(assetTypeName)) {      supportedAssetTypes.put(assetTypeName,Lists.<AssetOptionsMethodInfo>newArrayList());    }    supportedAssetTypes.get(assetTypeName).add(annotatedMethodInfo);  }}  }
class C{  public static void logWarning(Throwable exception,String message){  log(IStatus.WARNING,IStatus.OK,message,exception);}  }
class C{  protected String simplifyLine(String line){  return removeEscapedQuotes(line).replace("--"," -- ").replaceAll("\\s+"," ").trim().toUpperCase();}  }
class C{  @Override public void componentResized(ComponentEvent e){  Dimension d=vv.getSize();  if (d.width <= 0 || d.height <= 0)   return;  checkOffscreenImage(d);  repaint();}  }
class C{  private static Object generateKey(final Object[] args){  if (args == null)   return Collections.emptyList();  Object[] copyOfArgs=copyOf(args,args.length);  return asList(copyOfArgs);}  }
class C{  public void copyInternalVersion(Project copy){  if (copy == null) {    this.internalVersion=VERSION_1;  } else {    this.internalVersion=copy.internalVersion;  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static boolean intersects(final int[] paramsOne,final int[] paramsTwo){  final int X1=paramsOne[0];  final int Y1=paramsOne[1];  final int W1=paramsOne[2];  final int H1=paramsOne[3];  final int X2=paramsTwo[0];  final int Y2=paramsTwo[1];  final int W2=paramsTwo[2];  final int H2=paramsTwo[3];  return !(X1 + W1 < X2 || X2 + W2 < X1 || Y1 + H1 < Y2 || Y2 + H2 < Y1);}  }
class C{  public ExperimentTrainTest(String aExperimentName,Class<? extends TCMachineLearningAdapter> mlAdapter) throws TextClassificationException {  setExperimentName(aExperimentName);  setMachineLearningAdapter(mlAdapter);  setType("Evaluation-" + experimentName);  setAttribute(TC_TASK_TYPE,TcTaskType.EVALUATION.toString());}  }
class C{  public boolean collides(final int x,final int y){  if ((x < 0) || (x >= width)) {    return true;  }  if ((y < 0) || (y >= height)) {    return true;  }  return map.get(x,y);}  }
class C{  void removeObjective(GlowObjective objective){  if (objective.displaySlot != null) {    setDisplaySlot(objective.displaySlot,null);  }  getForCriteria(objective.getCriteria()).remove(objective);  objectives.remove(objective.getName());  broadcast(ScoreboardObjectiveMessage.remove(objective.getName()));}  }
class C{  @DSSink({DSSinkKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:05.957 -0500",hash_original_method="41630DBB62E0DD4474E2353E85A23DEC",hash_generated_method="51F12645A0F3999256B122AE6A18CCC9") public void write(char[] buffer,int offset,int length) throws IOException {synchronized (lock) {    while (length-- > 0)     write(buffer[offset++]);  }}  }
class C{  protected MetaMessage(byte[] data){  super(data);  if (data.length >= 3) {    dataLength=data.length - 3;    int pos=2;    while (pos < data.length && (data[pos] & 0x80) != 0) {      dataLength--;      pos++;    }  }}  }
class C{  @Override public int read(byte b[],int off,int len) throws IOException {  int nr=in.read(b,off,len);  incrementValue(nr);  return nr;}  }
class C{  public static final LocoNetMessage createIplSpecificSlaveQueryPacket(Integer hostMfr,Integer hostDevice,Integer slaveMfr,Integer slaveDevice){  LocoNetMessage m=createQueryAllIplDevicesPacket();  m.setElement(4,hostMfr);  m.setElement(5,hostDevice);  m.setElement(7,slaveMfr);  m.setElement(6,slaveDevice);  return m;}  }
class C{  public long skip(long n) throws IOException {  return in.skip(n);}  }
class C{  private void response(List<? extends Synced> synceds,ContentProviderClient cp,Uri uri) throws RemoteException {  if (synceds == null) {    return;  }  ContentValues vals=new ContentValues(2);  String sel=Columns.VERSION + " = ?";  String[] args=new String[1];  int size=synceds.size();  for (int i=0; i < size; i++) {    Synced synced=synceds.get(i);    if (synced.globalId > 0 && uri != REVIEW_DRAFTS_URI) {      vals.put(Columns.GLOBAL_ID,synced.globalId);      if (uri == RESTAURANTS_URI) {        Restaurants.deleteConflict(synced.localId,synced.globalId);      }    }    vals.put(Columns.DIRTY,synced.dirty);    args[0]=String.valueOf(synced.version);    cp.update(ContentUris.withAppendedId(uri,synced.localId),vals,sel,args);    vals.clear();  }}  }
class C{  public MetaDataLimit(){  super(Options.set,"Meta Data Limit","Trigger a GC if the meta data volume grows to this limit",4096);}  }
class C{  @Override public void wordWrite(ObjectReference src,Address slot,Word value,Word metaDataA,Word metaDataB,int mode){  VM.barriers.wordWrite(src,value,metaDataA,metaDataB,mode);}  }
class C{  private void startDiscovery(){  if (isScanning()) {    LOG.warn("Not starting discovery, because already scanning.");    return;  }  startDiscovery(Scanning.SCANNING_BT);}  }
class C{  public static String mod(String[] params) throws FBSQLParseException {  if (params.length != 2)   throw new FBSQLParseException("Incorrect number of " + "parameters of function mod : " + params.length);  return "mod(" + params[0] + ", "+ params[1]+ ")";}  }
class C{  private void sampleEdge(){  int rand=RandomUtil.getInstance().nextInt(getNumNodes() * (getNumNodes() - 1));  randomParent=rand / (getNumNodes() - 1);  int rest=rand - randomParent * (getNumNodes() - 1);  if (rest >= randomParent) {    randomChild=rest + 1;  } else {    randomChild=rest;  }}  }
class C{  private void updateQueue(DoubleNode<ILineSegment> left,DoubleNode<ILineSegment> right){  IPoint p=left.value().intersection(right.value());  if (p != null && EventPoint.pointSorter.compare(p,lineState.sweepPt) > 0) {    EventPoint new_ep=new EventPoint(p);    if (!eq.contains(new_ep)) {      eq.insert(new_ep);    }  }}  }
class C{  public int hashCode(){  return (int)(value ^ (value >>> 32));}  }
class C{  public void logCrashedMemberWeights(NetView oldView,Logger log){  InternalDistributedMember lead=oldView.getLeadMember();  for (  InternalDistributedMember mbr : this.crashedMembers) {    if (!oldView.contains(mbr)) {      continue;    }    int mbrWeight=mbr.getNetMember().getMemberWeight();switch (mbr.getVmKind()) {case DistributionManager.NORMAL_DM_TYPE:      if (lead != null && mbr.equals(lead)) {        mbrWeight+=15;      } else {        mbrWeight+=10;      }    break;case DistributionManager.LOCATOR_DM_TYPE:  mbrWeight+=3;break;case DistributionManager.ADMIN_ONLY_DM_TYPE:break;default :throw new IllegalStateException("Unknown member type: " + mbr.getVmKind());}log.info("  " + mbr + " had a weight of "+ mbrWeight);}}  }
class C{  public HttpUrl apiEndpoint(){  return apiEndpoint;}  }
class C{  private void testIncrementalBackupScriptForUnix(BackupInspector inspector) throws Exception {  assertEquals(UNIX_COPY_FROM_1,inspector.getCopyFromForOplogFile(OPLOG_FILENAME_1));  assertEquals(UNIX_COPY_TO_1,inspector.getCopyToForOplogFile(OPLOG_FILENAME_1));  assertEquals(UNIX_COPY_FROM_2,inspector.getCopyFromForOplogFile(OPLOG_FILENAME_2));  assertEquals(UNIX_COPY_TO_2,inspector.getCopyToForOplogFile(OPLOG_FILENAME_2));  assertEquals(UNIX_COPY_FROM_3,inspector.getCopyFromForOplogFile(OPLOG_FILENAME_3));  assertEquals(UNIX_COPY_TO_3,inspector.getCopyToForOplogFile(OPLOG_FILENAME_3));}  }
class C{  protected EntryOrExitAction_Impl(){  super();}  }
class C{  @Override protected void register(DeployerFactory deployerFactory){  deployerFactory.registerDeployer("jonas4x",DeployerType.REMOTE,Jonas4xJsr160RemoteDeployer.class);  deployerFactory.registerDeployer("jonas4x",DeployerType.INSTALLED,Jonas4xInstalledLocalDeployer.class);  deployerFactory.registerDeployer("jonas5x",DeployerType.REMOTE,Jonas5xJsr160RemoteDeployer.class);  deployerFactory.registerDeployer("jonas5x",DeployerType.INSTALLED,Jonas5xInstalledLocalDeployer.class);}  }
class C{  private int verifyInputs(boolean warn){  int verify=0;  Sensor s;  try {    s=InstanceManager.sensorManagerInstance().provideSensor(startSensor.getText());    if (s == null) {      throw new Exception();    }  } catch (  Exception e) {    log.error("Start sensor invalid: " + startSensor.getText());    if (warn) {      JOptionPane.showMessageDialog(this,Bundle.getMessage("ErrorStartSensor"),Bundle.getMessage("TitleError"),JOptionPane.WARNING_MESSAGE);    }    return verify;  }  try {    s=InstanceManager.sensorManagerInstance().provideSensor(stopSensor1.getText());    if (s == null) {      throw new Exception();    }  } catch (  Exception e) {    log.error("Stop 1 sensor invalid : " + stopSensor1.getText());    if (warn) {      JOptionPane.showMessageDialog(this,Bundle.getMessage("ErrorStopSensor1"),Bundle.getMessage("TitleError"),JOptionPane.WARNING_MESSAGE);    }    return verify;  }  if (distance1.getText().equals("")) {    log.error("Distance 1 has not been defined");    if (warn) {      JOptionPane.showMessageDialog(this,Bundle.getMessage("ErrorDistance1"),Bundle.getMessage("TitleError"),JOptionPane.WARNING_MESSAGE);    }    return verify;  }  verify=1;  if (!stopSensor2.getText().equals("") || !distance2.getText().equals("")) {    try {      s=InstanceManager.sensorManagerInstance().provideSensor(stopSensor2.getText());      if (s == null) {        throw new Exception();      }    } catch (    Exception e) {      log.error("Stop 2 sensor invalid: " + stopSensor2.getText());      if (warn) {        JOptionPane.showMessageDialog(this,Bundle.getMessage("ErrorStopSensor2"),Bundle.getMessage("TitleError"),JOptionPane.WARNING_MESSAGE);      }      return 0;    }    if (distance2.getText().equals("")) {      log.error("Distance 2 has not been defined");      enableConfiguration(true);      if (warn) {        JOptionPane.showMessageDialog(this,Bundle.getMessage("ErrorDistance2"),Bundle.getMessage("TitleError"),JOptionPane.WARNING_MESSAGE);      }      return 0;    }    verify=2;  }  return verify;}  }
class C{  public CActionEditEdgeComments(final JFrame parent,final NaviEdge edge){  super("Edit Edge Comments");  m_parent=parent;  m_edge=edge;}  }
class C{  public Class defineClass(String name,byte[] b){  return super.defineClass(name,b,0,b.length);}  }
class C{  public static boolean confirmDialog(Stage owner,String msg){  return showDialog(owner,MessageType.CONFIRM,msg,false) == Result.YES;}  }
class C{  private AppUtils(){  throw new Error("Do not need instantiate!");}  }
class C{  private synchronized void open(){  if (is_open)   close();  is_open=true;  try {    store=new HGStore(location,config);    store.getTransactionManager().setHyperGraph(this);    eventManager=config.getEventManager();    eventManager.setHyperGraph(this);    cache=config.getCacheImplementation();    cache.setHyperGraph(this);    HGCache<HGPersistentHandle,IncidenceSet> incidenceCache=new LRUCache<HGPersistentHandle,IncidenceSet>(0.9f,0.3f);    ((LRUCache<HGPersistentHandle,IncidenceSet>)incidenceCache).setLockImplementation(new ReentrantReadWriteLock());    incidenceCache.setResolver(new ISRefResolver(this));    cache.setIncidenceCache(incidenceCache);    typeSystem=new HGTypeSystem(this);    indexByType=store.getIndex(TYPES_INDEX_NAME,BAtoHandle.getInstance(this.getHandleFactory()),BAtoHandle.getInstance(this.getHandleFactory()),null,null,true);    indexByValue=store.getIndex(VALUES_INDEX_NAME,BAtoHandle.getInstance(this.getHandleFactory()),BAtoHandle.getInstance(this.getHandleFactory()),null,null,true);    if (config.isUseSystemAtomAttributes())     systemAttributesDB=store.getIndex(SA_DB_NAME,BAtoHandle.getInstance(this.getHandleFactory()),HGAtomAttrib.baConverter,null,null,true);    idx_manager=new HGIndexManager(this);    getTransactionManager().beginTransaction(HGTransactionConfig.DEFAULT);    typeSystem.bootstrap(config.getTypeConfiguration());    getTransactionManager().endTransaction(true);    idx_manager.loadIndexers();    initAtomManagement();    loadListeners();    if (config == null || !config.getSkipOpenedEvent())     eventManager.dispatch(this,new HGOpenedEvent());    HGDatabaseVersionFile versionFile=HGEnvironment.getVersions(location);    if (versionFile.getVersion("hgdb") == null)     versionFile.setVersion("hgdb","1.3");    if (config != null) {      if (config.getCancelMaintenance()) {        List<HGHandle> L=HGQuery.hg.findAll(this,HGQuery.hg.typePlus(MaintenanceOperation.class));        for (        HGHandle x : L)         remove(x);      } else       if (!config.getSkipMaintenance())       runMaintenance();    }  } catch (  Throwable t) {    if (store != null)     try {      store.close();    } catch (    Throwable t1) {    }    try {      cache.close();    } catch (    Throwable t1) {    }    is_open=false;    throw new HGException(t);  }}  }
class C{  public static void sendPatchToOwner(Service service,ServiceHost host,String taskSchedulerServiceSelfLink,TaskSchedulerService.State state,URI referLink){  Operation.CompletionHandler handler=null;  Operation selectOwnerOp=Operation.createPost(null).setExpiration(ServiceUtils.computeExpirationTime(OWNER_SELECTION_TIMEOUT)).setCompletion(handler);  host.selectOwner(null,taskSchedulerServiceSelfLink,selectOwnerOp);}  }
class C{  protected int handlePrevious(){  CharacterIterator text=getText();  int state=START_STATE;  int category=0;  int lastCategory=0;  int c=getCurrent();  while (c != CharacterIterator.DONE && state != STOP_STATE) {    lastCategory=category;    category=lookupCategory(c);    if (category != IGNORE) {      state=lookupBackwardState(state,category);    }    c=getPrevious();  }  if (c != CharacterIterator.DONE) {    if (lastCategory != IGNORE) {      getNext();      getNext();    } else {      getNext();    }  }  return text.getIndex();}  }
class C{  @Override public String toString(){  final StringBuilder buffer=new StringBuilder(128);  buffer.append("EvictionAttributesData [");  buffer.append("algorithm=").append(this.getAlgorithm());  if (!this.getAlgorithm().equals(EvictionAlgorithm.NONE.toString())) {    buffer.append(", action=").append(this.getAction());    if (!this.getAlgorithm().equals(EvictionAlgorithm.LRU_HEAP.toString())) {      buffer.append(", maximum=").append(this.getMaximum());    }  }  buffer.append("]");  return buffer.toString();}  }
class C{  @Override protected int computeVerticalScrollRange(){  final int count=getChildCount();  final int contentHeight=getHeight() - getPaddingTop() - getPaddingBottom();  if (count == 0) {    return contentHeight;  }  int scrollRange=getChildAt(0).getBottom();  final int scrollY=getScrollY();  final int overscrollBottom=Math.max(0,scrollRange - contentHeight);  if (scrollY < 0) {    scrollRange-=scrollY;  } else   if (scrollY > overscrollBottom) {    scrollRange+=scrollY - overscrollBottom;  }  return scrollRange;}  }
class C{  public void ignoreHiddenFiles(final boolean ignoreHiddenFiles){  this.ignoreHiddenFiles=ignoreHiddenFiles;}  }
class C{  private void tryStartingKbMode(int keyCode){  if (keyCode == -1 || addKeyIfLegal(keyCode)) {    mInKbMode=true;    onValidationChanged(false);    updateDisplay(false);    mRadialTimePickerView.setInputEnabled(false);  }}  }
class C{  public static URL findResource(String bundleName,String mainPath,String prefix,String suffix){  return findResource(bundleName,mainPath,prefix,suffix,Platform.getNL());}  }
class C{  public boolean isODKTablesInstanceDataDirectory(File directory){  String dirPath=directory.getAbsolutePath();  if (dirPath.startsWith(mOdkRoot)) {    dirPath=dirPath.substring(mOdkRoot.length());    String[] parts=dirPath.split(File.separator);    if (parts.length == 4 && parts[1].equals("instances")) {      return true;    }  }  return false;}  }
class C{  void clear(){  setTOP(false);  size=0;  numbers=null;}  }
class C{  public synchronized void release(){  if (outputStreamCache != null)   outputStreamCache.invalidateAll();  if (cacheDir.exists() && cacheDir.isDirectory()) {    for (    File cachedFile : cacheDir.listFiles()) {      if (!cachedFile.delete()) {        logger.warn("Unable to clear cached vector: " + cachedFile.getAbsolutePath());      }    }  }}  }
class C{  public boolean isBankAccount(){  Object oo=get_Value(COLUMNNAME_IsBankAccount);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean isDebug(){  return debug;}  }
class C{  public void reset(V v){  mDistanceMap.remove(v);  mIncomingEdgeMap.remove(v);}  }
