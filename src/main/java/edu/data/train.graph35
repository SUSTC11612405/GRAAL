class C{  public void assertConvertible(Type s,Type t){  assertCastable(s,t,true);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean dataSave(boolean manualCmd){  log.fine("#" + m_vo.TabNo + " - row="+ m_currentRow);  try {    if (hasChangedCurrentTabAndParents()) {      if (manualCmd || m_mTable.hasChanged(m_currentRow))       return false;    }    boolean retValue=(m_mTable.dataSave(manualCmd) == GridTable.SAVE_OK);    if (manualCmd) {      setCurrentRow(m_currentRow,false);      if (m_lastDataStatusEvent != null && m_lastDataStatusEvent.getCurrentRow() == m_currentRow && ((m_lastDataStatusEvent.Record_ID != null && m_lastDataStatusEvent.Record_ID instanceof Integer && (Integer)m_lastDataStatusEvent.Record_ID == 0) || m_lastDataStatusEvent.Record_ID == null)) {        updateDataStatusEventProperties(m_lastDataStatusEvent);      }    }    fireStateChangeEvent(new StateChangeEvent(this,StateChangeEvent.DATA_SAVE));    if (retValue) {      refreshParents();    }    return retValue;  } catch (  Exception e) {    log.log(Level.SEVERE,"#" + m_vo.TabNo + " - row="+ m_currentRow,e);  }  return false;}  }
class C{  @Override public void addMessageBatch(byte[][] commands,MessageContext[] msgCtx,int consensusId){  CommandsInfo command=new CommandsInfo(commands,msgCtx);  if (isToLog) {    if (log == null)     createLogFile();    writeCommandToDisk(command,consensusId);  }}  }
class C{  protected static void restoreViewport(FrameBuffer dest){  if (hasViewport && dest == null) {    Gdx.gl.glViewport((int)viewport.x,(int)viewport.y,(int)viewport.width,(int)viewport.height);  }}  }
class C{  public boolean isInteger(){  return type == INTEGER;}  }
class C{  public static boolean hasTargetClassBeenLoaded(){  return TARGET_CLASS_INSTANCE != null;}  }
class C{  public static void debug(Player player,String msg){  debug(player,msg,false);}  }
class C{  private double adjustTransform(){  double xMin=Double.POSITIVE_INFINITY;  double xMax=Double.NEGATIVE_INFINITY;  double yMin=Double.POSITIVE_INFINITY;  double yMax=Double.NEGATIVE_INFINITY;  for (  String loc : env.getMap().getLocations()) {    Point2D point=env.getMap().getPosition(loc);    xMin=Math.min(xMin,point.getX());    xMax=Math.max(xMax,point.getX());    yMin=Math.min(yMin,point.getY());    yMax=Math.max(yMax,point.getY());  }  double scale=Math.min((envStateView.getWidth() - 150) / (xMax - xMin),(envStateView.getHeight() - 60) / (yMax - yMin));  envStateView.setTranslateX((scale * (envStateView.getWidth() - xMin - xMax) / 2.0 - 30));  envStateView.setTranslateY((scale * (envStateView.getHeight() - yMin - yMax) / 2.0 - 10));  envStateView.setScaleX(scale);  envStateView.setScaleY(scale);  return scale;}  }
class C{  @Override public void populateDAG(DAG dag,Configuration conf){  JdbcPOJOInsertOutputOperator jdbcOutput=new JdbcPOJOInsertOutputOperator();  jdbcOutput.setFieldInfos(addFieldInfos());  JdbcTransactionalStore outputStore=new JdbcTransactionalStore();  jdbcOutput.setStore(outputStore);  jdbcOutput.setTablename("TestTable");  ApexStream<String> stream=StreamFactory.fromFolder("./src/test/resources/data");  stream.flatMap(new ExtractWords()).filter(new EmptyStringFilter()).map(new Uppercase()).map(new PojoMapper()).endWith(jdbcOutput,jdbcOutput.input,Option.Options.name("jdbcOutput"));  stream.populateDag(dag);}  }
class C{  public int[] updateRemainingAttributes(int[] selectedAttributes,int bestAttribute){  int[] remainingAttributes;  if (columnTable.representsNominalAttribute(bestAttribute)) {    remainingAttributes=removeAttribute(bestAttribute,selectedAttributes);  } else {    remainingAttributes=selectedAttributes;  }  return remainingAttributes;}  }
class C{  protected boolean canUseDiamond(){  return fCanUseDiamond;}  }
class C{  public final void clear(int index){  bits[index >>> 0x5]&=~(1 << (index & 0x1f));}  }
class C{  private void unregisterLocationListener(){  if (myTracksLocationManager == null) {    Log.e(TAG,"locationManager is null.");    return;  }  myTracksLocationManager.removeLocationUpdates(locationListener);}  }
class C{  protected Node newNode(){  return new SVGOMAltGlyphItemElement();}  }
class C{  public static boolean addRollingMachineRecipe(ItemStack aResult,Object[] aRecipe){  aResult=GT_OreDictUnificator.get(true,aResult);  if (aResult == null || aRecipe == null || aResult.stackSize <= 0)   return false;  try {    mods.railcraft.api.crafting.RailcraftCraftingManager.rollingMachine.getRecipeList().add(new ShapedOreRecipe(GT_Utility.copy(aResult),aRecipe));  } catch (  Throwable e) {    return addCraftingRecipe(GT_Utility.copy(aResult),aRecipe);  }  return true;}  }
class C{  public CommentObject(CommentObject parent){  this.id=parent.getId();  this.content=parent.getContent();  this.creatorId=parent.getCreatorId();  this.attachId=parent.getAttachId();  this.attachType=parent.getAttachType();  this.deleted=parent.getDeleted();  this.projectId=parent.getProjectId();  this.created=parent.getCreated();  this.updated=parent.getUpdated();  this.creatorName=parent.getCreatorName();  this.companyId=parent.getCompanyId();  this.creatorAvatar=parent.getCreatorAvatar();}  }
class C{  protected boolean runAndReset(){  if (state != NEW || !UNSAFE.compareAndSwapObject(this,runnerOffset,null,Thread.currentThread()))   return false;  boolean ran=false;  int s=state;  try {    Callable<V> c=callable;    if (c != null && s == NEW) {      try {        c.call();        ran=true;      } catch (      Throwable ex) {        setException(ex);      }    }  }  finally {    runner=null;    s=state;    if (s >= INTERRUPTING)     handlePossibleCancellationInterrupt(s);  }  return ran && s == NEW;}  }
class C{  public static String toString(final long value){  return Long.toString(value);}  }
class C{  public static boolean isDefaultHapolicyRequestBackup(){  return DEFAULT_HAPOLICY_REQUEST_BACKUP;}  }
class C{  public double normalDistance(final Vector v,final Membership... bounds){  return normalDistance(v.x,v.y,v.z,bounds);}  }
class C{  private static Set<Emoticon> parseEmotes(String json,String channelRestriction){  Set<Emoticon> emotes=new HashSet<>();  if (json == null) {    return emotes;  }  JSONParser parser=new JSONParser();  try {    JSONObject root=(JSONObject)parser.parse(json);    String urlTemplate=(String)root.get("urlTemplate");    if (urlTemplate == null || urlTemplate.isEmpty()) {      LOGGER.warning("No URL Template");      return emotes;    }    JSONArray emotesArray=(JSONArray)root.get("emotes");    for (    Object o : emotesArray) {      if (o instanceof JSONObject) {        Emoticon emote=parseEmote((JSONObject)o,urlTemplate,channelRestriction);        if (emote != null) {          emotes.add(emote);        }      }    }  } catch (  ParseException|ClassCastException ex) {    LOGGER.warning("BTTV: Error parsing emotes: " + ex);  }  return emotes;}  }
class C{  private static boolean isCspAccountValid(PersistedAccount account,@NonNull String requestedProviderUrl){  return account != null && account.providerUrl.equals(requestedProviderUrl);}  }
class C{  public static Automaton makeAnyBinary(){  Automaton a=new Automaton();  int s=a.createState();  a.setAccept(s,true);  a.addTransition(s,s,0,255);  a.finishState();  return a;}  }
class C{  static boolean parseLoopBody(BashPsiBuilder builder,boolean parseCompoundList,boolean enforcedDoKeyword){  final IElementType firstToken=ParserUtil.getTokenAndAdvance(builder);  if (firstToken == DO_KEYWORD && ParserUtil.isEmptyListFollowedBy(builder,DONE_KEYWORD)) {    ParserUtil.error(builder,"parser.shell.expectedCommands");    ParserUtil.readEmptyListFollowedBy(builder,DONE_KEYWORD);    builder.advanceLexer();    return true;  }  if (enforcedDoKeyword && firstToken != DO_KEYWORD) {    ParserUtil.error(builder,"parser.unexpected.token");    return false;  }  if (firstToken == DO_KEYWORD || firstToken == LEFT_CURLY) {    boolean parsed=parseCompoundList ? Parsing.list.parseCompoundList(builder,true,true) : Parsing.list.parseList(builder);    if (parsed) {      final IElementType lastToken=ParserUtil.getTokenAndAdvance(builder);      boolean ok=(firstToken == DO_KEYWORD && lastToken == DONE_KEYWORD) || (firstToken == LEFT_CURLY && lastToken == RIGHT_CURLY);      if (!ok) {        ParserUtil.error(builder,"parser.unexpected.token");      }      return ok;    } else {      ParserUtil.error(builder,"parser.unexpected.token");      return false;    }  }  return false;}  }
class C{  @Override public int countMissing(){  int count=0;  for (int i=0; i < size(); i++) {    if (getLong(i) == MISSING_VALUE) {      count++;    }  }  return count;}  }
class C{  private void cdiv(final double xr,final double xi,final double yr,final double yi){  double r, d;  if (Math.abs(yr) > Math.abs(yi)) {    r=yi / yr;    d=yr + r * yi;    cdivr=(xr + r * xi) / d;    cdivi=(xi - r * xr) / d;  } else {    r=yr / yi;    d=yi + r * yr;    cdivr=(r * xr + xi) / d;    cdivi=(r * xi - xr) / d;  }}  }
class C{  public CapabilitiesRequest(URI uri,String service) throws URISyntaxException {  super(uri,service);  if (uri == null) {    String message=Logging.getMessage("nullValue.URIIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (service == null) {    String message=Logging.getMessage("nullValue.WMSServiceNameIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }}  }
class C{  public void testHiveCommandLine() throws Exception {  assertEquals(0,executeHiveQuery("create table table_a (" + "id_a int," + "id_b int"+ ") "+ "row format delimited fields terminated by '\\t'"+ "stored as textfile "+ "location '/table-a'"));  assertEquals(0,executeHadoopCmd("fs","-put",new File(testWorkDir,"data-a").getAbsolutePath(),"/table-a"));  assertEquals(0,executeHiveQuery("create table table_b (" + "id_b int," + "rndv int"+ ") "+ "row format delimited fields terminated by '\\t'"+ "stored as textfile "+ "location '/table-b'"));  assertEquals(0,executeHadoopCmd("fs","-put",new File(testWorkDir,"data-b").getAbsolutePath(),"/table-b"));  checkQuery("0 0\n" + "1 2\n" + "2 4\n"+ "3 6\n"+ "4 8\n"+ "5 10\n"+ "6 12\n"+ "7 14\n"+ "8 16\n"+ "9 18\n","select * from table_a order by id_a limit 10");  checkQuery("2000\n","select count(id_b) from table_b");  checkQuery("250 500 2002\n" + "251 502 2006\n" + "252 504 2010\n"+ "253 506 2014\n"+ "254 508 2018\n"+ "255 510 2022\n"+ "256 512 2026\n"+ "257 514 2030\n"+ "258 516 2034\n"+ "259 518 2038\n","select a.id_a, a.id_b, b.rndv" + " from table_a a" + " inner join table_b b on a.id_b = b.id_b"+ " where b.rndv > 2000"+ " order by a.id_a limit 10");  checkQuery("1000\n","select count(b.id_b) from table_a a inner join table_b b on a.id_b = b.id_b");}  }
class C{  public static void sync(SolrCore core,List<String> replicas,int nUpdates){  ShardHandlerFactory shardHandlerFactory=core.getCoreDescriptor().getCoreContainer().getShardHandlerFactory();  ShardHandler shardHandler=shardHandlerFactory.getShardHandler();  for (  String replica : replicas) {    ShardRequest sreq=new ShardRequest();    sreq.shards=new String[]{replica};    sreq.params=new ModifiableSolrParams();    sreq.params.set("qt","/get");    sreq.params.set("distrib",false);    sreq.params.set("getVersions",nUpdates);    shardHandler.submit(sreq,replica,sreq.params);  }  for (  String replica : replicas) {    ShardResponse srsp=shardHandler.takeCompletedOrError();  }}  }
class C{  @Override public int hashCode(){  return this.name.hashCode();}  }
class C{  public static Geometry read(Shape shp,double flatness,GeometryFactory geomFact){  PathIterator pathIt=shp.getPathIterator(INVERT_Y,flatness);  return ShapeReader.read(pathIt,geomFact);}  }
class C{  void remove(OsmElement element){  if (element.isUnchanged()) {    Log.e("DiscardedTags","Presented with unmodified element");    return;  }  boolean modified=false;  newTags=new TreeMap<String,String>();  for (  String key : element.getTags().keySet()) {    Log.d("DiscardedTags","Checking " + key);    if (!redundantTags.contains(key)) {      newTags.put(key,element.getTags().get(key));    } else {      Log.d("DiscardedTags"," delete");      modified=true;    }  }  if (modified) {    element.setTags(newTags);  }}  }
class C{  public void start(){  UserTransaction userTransaction=startUserTransaction();  try {    start(userTransaction);  }  finally {    resolveUserTransaction(userTransaction);  }}  }
class C{  @Deprecated public static <T>UnmodifiableIterator<T> unmodifiableIterator(UnmodifiableIterator<T> iterator){  return checkNotNull(iterator);}  }
class C{  @DELETE @Path("/{id}") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SECURITY_ADMIN}) public Response deleteProvider(@PathParam("id") URI id){  AuthnProvider provider=getProviderById(id,false);  ArgValidator.checkEntityNotNull(provider,id,isIdEmbeddedInURL(id));  checkForActiveTenantsUsingDomains(provider.getDomains());  if (!AuthnProvider.ProvidersType.keystone.toString().equalsIgnoreCase(provider.getMode())) {    checkForVdcRolesUsingDomains(provider.getDomains());    checkForUserGroupsUsingDomains(provider.getDomains());    verifyDomainsIsNotInUse(provider.getDomains());  } else {    _openStackSynchronizationTask.stopSynchronizationTask();    List<URI> osTenantURIs=_dbClient.queryByType(OSTenant.class,true);    List<OSTenant> tenants=_dbClient.queryObject(OSTenant.class,osTenantURIs);    for (    OSTenant osTenant : tenants) {      _dbClient.removeObject(osTenant);    }    _keystoneUtils.deleteCinderEndpoints(provider.getManagerDN(),provider.getServerUrls(),provider.getManagerPassword());  }  _dbClient.removeObject(provider);  notifyChange();  auditOp(OperationTypeEnum.DELETE_AUTHPROVIDER,true,null,provider.getId().toString());  return Response.ok().build();}  }
class C{  public BasicBlock exit(){  return _exitNode;}  }
class C{  public WebPage prepareWebpage(){  WebPage wp=WebPage.newBuilder().build();  wp.setStatus(1);  wp.setFetchInterval(interval);  wp.setScore(1.0f);  wp.setFetchTime(0L);  return wp;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:58.515 -0500",hash_original_method="E4304895721C991E07562D8775709E0E",hash_generated_method="4DEA8A7D31FCA622334591A054AF24E7") public void removeChargingCollectionFunctionAddress(String ccfAddress) throws ParseException {  if (ccfAddress == null)   throw new NullPointerException("JAIN-SIP Exception, " + "P-Charging-Function-Addresses, setChargingCollectionFunctionAddress(), the ccfAddress parameter is null.");  if (!this.delete(ccfAddress,ParameterNamesIms.CCF)) {    throw new ParseException("CCF Address Not Removed",0);  }}  }
class C{  public InvalidAttributeIdentifierException(String explanation){  super(explanation);}  }
class C{  public boolean isGlobal(){  return this == GLOBAL;}  }
class C{  public void repaint(){  initialiseHeader();  this.setModel(this.getModel());  return;}  }
class C{  public CharSeq forEachLine(Consumer<CharSeq> action){  Objects.requireNonNull(action);  Seq<CharSeq> lines=this.eachLine();  lines.forEach(action);  return this;}  }
class C{  public static <T extends MessageNano>String print(T message){  if (message == null) {    return "";  }  StringBuffer buf=new StringBuffer();  try {    print(null,message,new StringBuffer(),buf);  } catch (  IllegalAccessException e) {    return "Error printing proto: " + e.getMessage();  }catch (  InvocationTargetException e) {    return "Error printing proto: " + e.getMessage();  }  return buf.toString();}  }
class C{  public ObjectTypeAttributes clone(){  ObjectTypeAttributes result=new ObjectTypeAttributes();  result.SpecifiedAttributes=SpecifiedAttributes;  result.DisplayName=DisplayName;  result.Description=Description;  result.WriteMask=WriteMask;  result.UserWriteMask=UserWriteMask;  result.IsAbstract=IsAbstract;  return result;}  }
class C{  public void putDouble(String key,double value){  unparcel();  mMap.put(key,value);}  }
class C{  @Override public void connect(SocketAddress addr) throws SocketException {  if (delegate == null)   super.connect(addr); else   delegate.connect(addr);}  }
class C{  public void fireGenerateEvent(int eventType,char[] ch,int start,int length){}  }
class C{  public static boolean equals(char[] a,char[] a2){  if (a == a2)   return true;  if (a == null || a2 == null)   return false;  int length=a.length;  if (a2.length != length) {    return false;  }  for (int i=0; i < length; i++) {    if (a[i] != a2[i])     return false;  }  return true;}  }
class C{  public SymbolTableEntry basicGetRewiredTarget(){  return rewiredTarget;}  }
class C{  public double extractFloatData(byte[] pachSourceData,int nMaxBytes,MutableInt pnConsumedBytes){switch (pszFormatString.charAt(0)) {case 'A':case 'I':case 'R':case 'S':case 'C':    String dataString=extractStringData(pachSourceData,nMaxBytes,pnConsumedBytes);  if (dataString.length() == 0) {    return 0;  }try {  return Double.parseDouble(dataString);} catch (NumberFormatException nfe) {  if (Debug.debugging("iso8211")) {    Debug.output("DDFSubfieldDefinition.extractFloatData: number format problem: " + dataString);  }  return 0;}case 'B':case 'b':byte[] abyData=new byte[8];if (pnConsumedBytes != null) {pnConsumedBytes.value=nFormatWidth;}if (nFormatWidth > nMaxBytes) {Debug.error("DDFSubfieldDefinition: format width is greater than max bytes for float");return 0.0;}System.arraycopy(pachSourceData,0,abyData,0,nFormatWidth);switch (eBinaryFormat) {case DDFBinaryFormat.UInt:case DDFBinaryFormat.SInt:case DDFBinaryFormat.FloatReal:return (int)pszFormatString.charAt(0) == 'B' ? MoreMath.BuildIntegerBE(abyData) : MoreMath.BuildIntegerLE(abyData);case DDFBinaryFormat.NotBinary:case DDFBinaryFormat.FPReal:case DDFBinaryFormat.FloatComplex:return 0.0;}break;default :}return 0.0;}  }
class C{  @SuppressWarnings("unchecked") private void init(int left,int right){  root=(T)constructor.construct(left,right);  expandLeft(root);  expandRight(root);}  }
class C{  public Word prepareWord(Offset offset){  return loadWord(offset);}  }
class C{  public static Collection<ImppType> all(){  return enums.all();}  }
class C{  public static TypeReference newTypeReference(int sort){  return new TypeReference(sort << 24);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  void verifyExceptionCaptured(Class<? extends Throwable> expectedExceptionClass){  assertTrue("Excpected exception not thrown",exceptionEventCapture.hasCaptured());  Throwable caughtEx=exceptionEventCapture.getValue().getCause();  assertEquals(expectedExceptionClass,caughtEx.getClass());  exceptionEventCapture.reset();}  }
class C{  public boolean isTask(){  return X_AD_Menu.ACTION_Task.equals(m_imageIndicator);}  }
class C{  public void testExactPhraseVersusMultiPhraseWithHoles() throws Exception {  Term t1=randomTerm();  Term t2=randomTerm();  PhraseQuery.Builder builder=new PhraseQuery.Builder();  builder.add(t1,0);  builder.add(t2,2);  PhraseQuery q1=builder.build();  Term t3=randomTerm();  MultiPhraseQuery.Builder q2b=new MultiPhraseQuery.Builder();  q2b.add(t1);  q2b.add(new Term[]{t2,t3},2);  assertSubsetOf(q1,q2b.build());}  }
class C{  public ASTNode createAST(IProgressMonitor monitor){  ASTNode result=null;  if (monitor != null)   monitor.beginTask("",1);  try {    if (this.rawSource == null && this.typeRoot == null) {      throw new IllegalStateException("source not specified");    }    result=internalCreateAST(monitor);  }  finally {    initializeDefaults();    if (monitor != null)     monitor.done();  }  return result;}  }
class C{  public Message sendMessageSynchronously(int what,int arg1,int arg2,Object obj){  Message msg=Message.obtain();  msg.what=what;  msg.arg1=arg1;  msg.arg2=arg2;  msg.obj=obj;  Message resultMsg=sendMessageSynchronously(msg);  return resultMsg;}  }
class C{  public LessThan(){  super(Boolean.class,Number.class,Number.class);}  }
class C{  public void addHUDObject(Node geom){  hud_group.addChild(geom);}  }
class C{  public boolean toThunderState(){  return to;}  }
class C{  public static final int[] trim(int[] a,int size){  if (a.length == size) {    return a;  } else {    int[] b=new int[size];    System.arraycopy(a,0,b,0,size);    return b;  }}  }
class C{  public LazyArray(final ObjectProvider<? extends Type> provider,final boolean ordered,final Type[] array,final int start,final int count){  super(ordered,array,start,count);  this.provider=provider;}  }
class C{  public String extractMsgFileName(byte[] stegoData,String stegoFileName) throws OpenStegoException {  RandomLSBInputStream lsbIS=null;  lsbIS=new RandomLSBInputStream(ImageUtil.byteArrayToImage(stegoData,stegoFileName),this.config);  return lsbIS.getDataHeader().getFileName();}  }
class C{  public static void write(String s,Address a){  write(s);  write(a);}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static boolean saveFile(String fileName,String m){  try {    PrintWriter out=new PrintWriter(fileName);    out.println(m);    out.close();    return true;  } catch (  IOException ioex) {    return false;  }}  }
class C{  public JSONObject accumulate(String key,Object value) throws JSONException {  testValidity(value);  Object o=opt(key);  if (o == null) {    put(key,value instanceof JSONArray ? new JSONArray().put(value) : value);  } else   if (o instanceof JSONArray) {    ((JSONArray)o).put(value);  } else {    put(key,new JSONArray().put(o).put(value));  }  return this;}  }
class C{  public Rectangle(Size rectSize){  setRect(new Rect(0,0,(int)rectSize.width,(int)rectSize.height));}  }
class C{  public void testPrivateMode() throws Exception {  processIsolatedModeTest(DeploymentMode.PRIVATE);}  }
class C{  public static byte[] encode(byte[] source,int off,int len,byte[] alphabet,int maxLineLength){  int lenDiv3=(len + 2) / 3;  int len43=lenDiv3 * 4;  byte[] outBuff=new byte[len43 + (len43 / maxLineLength)];  int d=0;  int e=0;  int len2=len - 2;  int lineLength=0;  for (; d < len2; d+=3, e+=4) {    int inBuff=((source[d + off] << 24) >>> 8) | ((source[d + 1 + off] << 24) >>> 16) | ((source[d + 2 + off] << 24) >>> 24);    outBuff[e]=alphabet[(inBuff >>> 18)];    outBuff[e + 1]=alphabet[(inBuff >>> 12) & 0x3f];    outBuff[e + 2]=alphabet[(inBuff >>> 6) & 0x3f];    outBuff[e + 3]=alphabet[(inBuff) & 0x3f];    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;      lineLength=0;    }  }  if (d < len) {    encode3to4(source,d + off,len - d,outBuff,e,alphabet);    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;    }    e+=4;  }  assert (e == outBuff.length);  return outBuff;}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  public static void main(String args[]){  new RouteFindingAgentApp().startApplication();}  }
class C{  public static final String mangleChar(char ch){  char[] result=new char[5];  result[0]='_';  result[1]=Character.forDigit((ch >> 12) & 0xf,16);  result[2]=Character.forDigit((ch >> 8) & 0xf,16);  result[3]=Character.forDigit((ch >> 4) & 0xf,16);  result[4]=Character.forDigit(ch & 0xf,16);  return new String(result);}  }
class C{  public String toString(){  return " at " + this.index + " [character "+ this.character+ " line "+ this.line+ "]";}  }
class C{  public int hashCode(){  int hash=Float.floatToIntBits(width);  hash=hash * 31 + join;  hash=hash * 31 + cap;  hash=hash * 31 + Float.floatToIntBits(miterlimit);  if (dash != null) {    hash=hash * 31 + Float.floatToIntBits(dash_phase);    for (int i=0; i < dash.length; i++) {      hash=hash * 31 + Float.floatToIntBits(dash[i]);    }  }  return hash;}  }
class C{  private void closeMessage(){  Intent intent=new Intent(getApplicationContext(),SmsPopupUtilsService.class);  intent.setAction(SmsPopupUtilsService.ACTION_MARK_MESSAGE_READ);  intent.putExtras(smsPopupPager.getActiveMessage().toBundle());  WakefulBroadcastReceiver.startWakefulService(getApplicationContext(),intent);  removeActiveMessage();}  }
class C{  public boolean isFullyZoomedOutX(){  if (mScaleX > mMinScaleX || mMinScaleX > 1f)   return false; else   return true;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static Uri createDocumentDataString(int id,String initialUrl){  return new Uri.Builder().scheme(UrlConstants.DOCUMENT_SCHEME).authority(String.valueOf(id)).query(initialUrl).build();}  }
class C{  private void updatePos(int change){  if (change == 0) {    return;  }  boolean isUnderTouch=mPtrIndicator.isUnderTouch();  if (isUnderTouch && !mHasSendCancelEvent && mPtrIndicator.hasMovedAfterPressedDown()) {    mHasSendCancelEvent=true;    sendCancelEvent();  }  if ((mPtrIndicator.hasJustLeftStartPosition() && mStatus == PTR_STATUS_INIT) || (mPtrIndicator.goDownCrossFinishPosition() && mStatus == PTR_STATUS_COMPLETE && isEnabledNextPtrAtOnce())) {    mStatus=PTR_STATUS_PREPARE;    mPtrUIHandlerHolder.onUIRefreshPrepare(this);    if (DEBUG) {      PtrCLog.i(LOG_TAG,"PtrUIHandler: onUIRefreshPrepare, mFlag %s",mFlag);    }  }  if (mPtrIndicator.hasJustBackToStartPosition()) {    tryToNotifyReset();    if (isUnderTouch) {      sendDownEvent();    }  }  if (mStatus == PTR_STATUS_PREPARE) {    if (isUnderTouch && !isAutoRefresh() && mPullToRefresh&& mPtrIndicator.crossRefreshLineFromTopToBottom()) {      tryToPerformRefresh();    }    if (performAutoRefreshButLater() && mPtrIndicator.hasJustReachedHeaderHeightFromTopToBottom()) {      tryToPerformRefresh();    }  }  if (DEBUG) {    PtrCLog.v(LOG_TAG,"updatePos: change: %s, current: %s last: %s, top: %s, headerHeight: %s",change,mPtrIndicator.getCurrentPosY(),mPtrIndicator.getLastPosY(),mContent.getTop(),mHeaderHeight);  }  mHeaderView.offsetTopAndBottom(change);  if (!isPinContent()) {    mContent.offsetTopAndBottom(change);  }  invalidate();  if (mPtrUIHandlerHolder.hasHandler()) {    mPtrUIHandlerHolder.onUIPositionChange(this,isUnderTouch,mStatus,mPtrIndicator);  }  onPositionChange(isUnderTouch,mStatus,mPtrIndicator);}  }
class C{  public void populate(SqlStatementData sqlData,Object connection){  ConnectionMetaData connectionMetaData=get(connection);  if ((null != connectionMetaData) && (EMPTY != connectionMetaData)) {    sqlData.setDatabaseProductName(connectionMetaData.product);    sqlData.setDatabaseProductVersion(connectionMetaData.version);    sqlData.setDatabaseUrl(connectionMetaData.url);  }}  }
class C{  public PropertyStringFormatException(){  super();}  }
class C{  public GeolocSharingDeleteTask(GeolocSharingServiceImpl geolocSharingService,RichcallService richcallService,LocalContentResolver contentResolver,ContactId contact){  super(contentResolver,GeolocSharingData.CONTENT_URI,GeolocSharingData.KEY_SHARING_ID,GeolocSharingData.KEY_CONTACT,contact);  mGeolocSharingService=geolocSharingService;  mRichcallService=richcallService;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static long divide(long dividend,long divisor){  if (divisor < 0) {    if (compare(dividend,divisor) < 0) {      return 0;    } else {      return 1;    }  }  if (dividend >= 0) {    return dividend / divisor;  }  long quotient=((dividend >>> 1) / divisor) << 1;  long rem=dividend - quotient * divisor;  return quotient + (compare(rem,divisor) >= 0 ? 1 : 0);}  }
class C{  public static double end(String name){  double time=(System.currentTimeMillis() - getExecutionTimes().get(name)) / 1000.0;  getExecutionTimes().remove(name);  return time;}  }
class C{  @TargetApi(Build.VERSION_CODES.KITKAT) public void removePauseListener(android.animation.Animator.AnimatorPauseListener listener){  mNativeAnimator.removePauseListener(listener);}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  System.out.print("Enter n: ");  int n=input.nextInt();  printMatrix(n);}  }
class C{  public synchronized long term(){  Map.Entry<Long,Long> entry=terms.lastEntry();  return entry != null ? entry.getValue() : 0;}  }
class C{  public ArrayNode putArray(String fieldName){  ArrayNode n=arrayNode();  _put(fieldName,n);  return n;}  }
class C{  public ReturnType createReturnType(){  ReturnTypeImpl returnType=new ReturnTypeImpl();  return returnType;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_LINKING_OP_2__AND_OP_1:    return AND_OP_1_EDEFAULT == null ? andOp_1 != null : !AND_OP_1_EDEFAULT.equals(andOp_1);case UmplePackage.ANONYMOUS_LINKING_OP_2__CONSTRAINT_EXPR_1:  return constraintExpr_1 != null && !constraintExpr_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public CommandNotExpectedException(TcpCommand expected,TcpCommand actual){  super(String.format("Expected : %s. Actual : %s.",expected,actual));}  }
class C{  public void showLoading(){  isLoadingViewBeingShown=true;  changeViewsVisibility();  setViewVisibility(viewLoading,View.VISIBLE);}  }
class C{  public static void showView(Activity context,int id){  if (context != null) {    View view=context.findViewById(id);    if (view != null) {      view.setVisibility(View.VISIBLE);    } else {      Log.e("PercolateAndroidUtils","View does not exist.  Could not hide it.");    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:25.377 -0500",hash_original_method="9BD4203D3E5EBD7464FA7B2A4E6BD9E0",hash_generated_method="2901E5EF19F5713990C93D0D25796978") @SuppressWarnings({"unchecked"}) private void inheritValues(Values fromParent){  Object[] table=this.table;  for (int i=table.length - 2; i >= 0; i-=2) {    Object k=table[i];    if (k == null || k == TOMBSTONE) {      continue;    }    Reference<InheritableThreadLocal<?>> reference=(Reference<InheritableThreadLocal<?>>)k;    InheritableThreadLocal key=reference.get();    if (key != null) {      table[i + 1]=key.childValue(fromParent.table[i + 1]);    } else {      table[i]=TOMBSTONE;      table[i + 1]=null;      fromParent.table[i]=TOMBSTONE;      fromParent.table[i + 1]=null;      tombstones++;      fromParent.tombstones++;      size--;      fromParent.size--;    }  }}  }
class C{  private Object readResolve(){  if (list instanceof RandomAccess) {    return new UnmodifiableRandomAccessList<E>(list);  }  return this;}  }
class C{  private void changeAllGreenSignalControlTo1SO(){  SignalsData signalsData=(SignalsData)this.scenario.getScenarioElement(SignalsData.ELEMENT_NAME);  SignalControlData signalControl=signalsData.getSignalControlData();  SignalSystemControllerData signalSystem2Control=signalControl.getSignalSystemControllerDataBySystemId().get(Id.create("signalSystem2",SignalSystem.class));  for (  SignalPlanData signalPlan : signalSystem2Control.getSignalPlanData().values()) {    SignalGroupSettingsData signalGroupSOSetting;    signalGroupSOSetting=signalPlan.getSignalGroupSettingsDataByGroupId().get(Id.create("signal1_2.2",SignalGroup.class));    signalGroupSOSetting.setOnset(0);    signalGroupSOSetting.setDropping(1);  }  SignalSystemControllerData signalSystem3Control=signalControl.getSignalSystemControllerDataBySystemId().get(Id.create("signalSystem3",SignalSystem.class));  for (  SignalPlanData signalPlan : signalSystem3Control.getSignalPlanData().values()) {    SignalGroupSettingsData signalGroupSOSetting;    if (signalPlan.getSignalGroupSettingsDataByGroupId().containsKey(Id.create("signal2_3.2",SignalGroup.class))) {      signalGroupSOSetting=signalPlan.getSignalGroupSettingsDataByGroupId().get(Id.create("signal2_3.2",SignalGroup.class));    } else {      signalGroupSOSetting=signalPlan.getSignalGroupSettingsDataByGroupId().get(Id.create("signal23_3.2",SignalGroup.class));    }    signalGroupSOSetting.setOnset(0);    signalGroupSOSetting.setDropping(1);  }}  }
class C{  public static <T>MutableSeq<T> newMutableSeq(Collection<T> values){  return new SeqImpl<>(values);}  }
class C{  public static Double toDouble(Object o,Double defaultValue){  if (o instanceof Double)   return (Double)o;  double dbl=toDoubleValue(o,true,Double.NaN);  if (Double.isNaN(dbl))   return defaultValue;  return new Double(dbl);}  }
class C{  public InputStream newInputStream(int index) throws IOException {synchronized (DiskLruCache.this) {    if (entry.currentEditor != this) {      throw new IllegalStateException();    }    if (!entry.readable) {      return null;    }    try {      return new FileInputStream(entry.getCleanFile(index));    } catch (    FileNotFoundException e) {      return null;    }  }}  }
class C{  public CachedComponentClassLoader(final ClassLoader parentClassLoader){  super(parentClassLoader);}  }
class C{  @Override public void onCanceled(List<ApplicationItem> data){  super.onCanceled(data);  onReleaseResources(data);}  }
class C{  public boolean readBoolean(String key,boolean defaultValue){  return preferences.getBoolean(key,defaultValue);}  }
class C{  static boolean isValid(String name){  return true;}  }
class C{  void addFillComponents(Container panel,int[] cols,int[] rows){  Dimension filler=new Dimension(10,10);  boolean filled_cell_11=false;  CellConstraints cc=new CellConstraints();  if (cols.length > 0 && rows.length > 0) {    if (cols[0] == 1 && rows[0] == 1) {      panel.add(Box.createRigidArea(filler),cc.xy(1,1));      filled_cell_11=true;    }  }  for (int index=0; index < cols.length; index++) {    if (cols[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(cols[index],1));  }  for (int index=0; index < rows.length; index++) {    if (rows[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(1,rows[index]));  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:05.488 -0500",hash_original_method="36EA363278EADF8446AD30BF262D8211",hash_generated_method="E2F4212D7AF6C9562AED52895CA91EA6") public boolean isMulticastEnabled(){  try {    return mService.isMulticastEnabled();  } catch (  RemoteException e) {    return false;  }}  }
class C{  int parseNumber(String source,int ofs,String name,int min,int max) throws ParseException {  if (source == null) {    throwInvalid(name,ofs);  }  int v=-1;  try {    v=Integer.parseInt(source);  } catch (  NumberFormatException nfe) {    throwInvalid(name,ofs);  }  if (min != max) {    validateNumber(v,ofs,name,min,max);  }  return v;}  }
class C{  public XYBarDataset(XYDataset underlying,double barWidth){  this.underlying=underlying;  this.underlying.addChangeListener(this);  this.barWidth=barWidth;}  }
class C{  public static IndexType createUnique(boolean persistent,boolean hash){  IndexType type=new IndexType();  type.unique=true;  type.persistent=persistent;  type.hash=hash;  return type;}  }
class C{  @Override public boolean isEmpty(){  return size() == 0;}  }
class C{  public void propertyChange(PropertyChangeEvent evt){  if (evt.getPropertyName() == MouseDelegator.ActiveModeProperty) {    String mmID=((MapMouseMode)evt.getNewValue()).getID();    JToggleButton btn=(JToggleButton)buttonSet.get(mmID);    if (btn != null) {      btn.setSelected(true);      enabledButton=btn;    }  } else   if (evt.getPropertyName() == MouseDelegator.MouseModesProperty) {    toolBar.removeAll();    setPanel(mouseDelegator);  }}  }
class C{  private static int extractNavigableNodes(AccessibilityNodeInfoCompat root,List<AccessibilityNodeInfoCompat> nodes,Set<AccessibilityNodeInfoCompat> visitedNodes){  if (root == null) {    return 0;  }  AccessibilityNodeInfoCompat visitedNode=AccessibilityNodeInfoCompat.obtain(root);  if (!visitedNodes.add(visitedNode)) {    visitedNode.recycle();    return 0;  }  if (nodes != null) {    nodes.add(AccessibilityNodeInfoCompat.obtain(root));  }  int supportedGranularities=root.getMovementGranularities();  if (!TextUtils.isEmpty(root.getContentDescription())) {    return supportedGranularities;  }  final int childCount=root.getChildCount();  for (int i=0; i < childCount; i++) {    final AccessibilityNodeInfoCompat child=root.getChild(i);    if (child == null) {      continue;    }    PerformActionUtils.performAction(child,AccessibilityNodeInfoCompat.ACTION_SET_SELECTION,null);    if (!AccessibilityNodeInfoUtils.shouldFocusNode(child)) {      supportedGranularities|=extractNavigableNodes(child,nodes,visitedNodes);    }    child.recycle();  }  return supportedGranularities;}  }
class C{  public UCSReader(InputStream inputStream,int size,short encoding){  fInputStream=inputStream;  fBuffer=new byte[size];  fEncoding=encoding;}  }
class C{  void cleanupAfterExchange(){  setConnecting(false);  setLastExchangeTime();  try {    if (mSocket != null) {      mSocket.close();    }    if (mBluetoothSpeaker.mSocket != null) {      mBluetoothSpeaker.mSocket.close();    }  } catch (  IOException e) {    Log.w(TAG,"Couldn't close bt socket after exhange success: " + e);  }  mSocket=null;  mBluetoothSpeaker.mSocket=null;}  }
class C{  @CanIgnoreReturnValue @Override public Builder<K,V> put(K key,V value){  builderMultimap.put(checkNotNull(key),checkNotNull(value));  return this;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public RegisteredServer2 clone(){  RegisteredServer2 result=new RegisteredServer2();  result.ServerUri=ServerUri;  result.ProductUri=ProductUri;  result.ServerNames=ServerNames == null ? null : ServerNames.clone();  result.ServerType=ServerType;  result.GatewayServerUri=GatewayServerUri;  result.DiscoveryUrls=DiscoveryUrls == null ? null : DiscoveryUrls.clone();  result.SemaphoreFilePath=SemaphoreFilePath;  result.IsOnline=IsOnline;  result.MdnsServerName=MdnsServerName;  result.ServerCapabilities=ServerCapabilities == null ? null : ServerCapabilities.clone();  return result;}  }
class C{  private StringBuffer prepareOptimizedInsertStatement(OneRowChange oneRowChange){  StringBuffer stmt;  stmt=new StringBuffer();  stmt.append("INSERT INTO ");  stmt.append(conn.getDatabaseObjectName(oneRowChange.getSchemaName()) + "." + conn.getDatabaseObjectName(oneRowChange.getTableName()));  stmt.append(" ( ");  printColumnSpec(stmt,oneRowChange.getColumnSpec(),null,null,PrintMode.NAMES_ONLY,", ");  stmt.append(") VALUES (");  boolean firstRow=true;  for (  ArrayList<ColumnVal> oneRowValues : oneRowChange.getColumnValues()) {    if (firstRow) {      firstRow=false;    } else     stmt.append(", (");    printColumnSpec(stmt,oneRowChange.getColumnSpec(),null,oneRowValues,PrintMode.PLACE_HOLDER," , ");    stmt.append(")");  }  return stmt;}  }
class C{  private String sortXml(final String originalXml){  String errorMsg="Could not sort pom files content: ";  xmlProcessingInstructionParser.scanForIgnoredSections(originalXml);  String xml=xmlProcessingInstructionParser.replaceIgnoredSections();  insertXmlInXmlProcessor(xml,errorMsg);  xmlProcessor.sortXml();  try (ByteArrayOutputStream sortedXmlOutputStream=xmlProcessor.getSortedXml()){    String sortedXml=sortedXmlOutputStream.toString(encoding);    if (xmlProcessingInstructionParser.existsIgnoredSections()) {      sortedXml=xmlProcessingInstructionParser.revertIgnoredSections(sortedXml);    }    return sortedXml;  } catch (  IOException e) {    throw new FailureException(errorMsg + xml,e);  }}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  public boolean contains(double latitude,double longitude){  return this.minLatitude <= latitude && this.maxLatitude >= latitude && this.minLongitude <= longitude && this.maxLongitude >= longitude;}  }
class C{  private Object writeReplace(){  return new Ser(Ser.ZONE_DATE_TIME_TYPE,this);}  }
class C{  public JSONObject put(String key,Map<String,Object> value) throws JSONException {  this.put(key,new JSONObject(value));  return this;}  }
class C{  public void defineDictionary(String name,Map<String,Object> mapping){  dictionaries.put(name,mapping);}  }
class C{  private static Map<String,Object> createBillingAccountFromReturn(GenericValue returnHeader,List<GenericValue> returnItems,DispatchContext dctx,Map<String,? extends Object> context){  LocalDispatcher dispatcher=dctx.getDispatcher();  GenericValue userLogin=(GenericValue)context.get("userLogin");  Locale locale=(Locale)context.get("locale");  try {    List<GenericValue> orders=EntityUtil.getRelated("OrderHeader",null,returnItems,false);    List<GenericValue> productStores=EntityUtil.getRelated("ProductStore",null,orders,false);    Long storeCreditValidDays=null;    for (    GenericValue productStore : productStores) {      Long thisStoreValidDays=productStore.getLong("storeCreditValidDays");      if (thisStoreValidDays == null)       continue;      if (storeCreditValidDays == null) {        storeCreditValidDays=thisStoreValidDays;      } else       if (thisStoreValidDays.compareTo(storeCreditValidDays) < 0) {        storeCreditValidDays=thisStoreValidDays;      }    }    Timestamp thruDate=null;    if (storeCreditValidDays != null)     thruDate=UtilDateTime.getDayEnd(UtilDateTime.nowTimestamp(),storeCreditValidDays);    Map<String,Object> input=UtilMisc.<String,Object>toMap("accountLimit",BigDecimal.ZERO,"description","Credit Account for Return #" + returnHeader.get("returnId"),"userLogin",userLogin);    input.put("accountCurrencyUomId",returnHeader.get("currencyUomId"));    input.put("thruDate",thruDate);    Map<String,Object> results=dispatcher.runSync("createBillingAccount",input);    if (ServiceUtil.isError(results))     return results;    String billingAccountId=(String)results.get("billingAccountId");    input=UtilMisc.toMap("billingAccountId",billingAccountId,"partyId",returnHeader.get("fromPartyId"),"roleTypeId","BILL_TO_CUSTOMER","userLogin",userLogin);    Map<String,Object> roleResults=dispatcher.runSync("createBillingAccountRole",input);    if (ServiceUtil.isError(roleResults)) {      Debug.logError("Error with createBillingAccountRole: " + roleResults.get(ModelService.ERROR_MESSAGE),module);      return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorWithCreateBillingAccountRole",locale) + roleResults.get(ModelService.ERROR_MESSAGE));    }    return results;  } catch (  GenericEntityException e) {    Debug.logError(e,"Entity error when creating BillingAccount: " + e.getMessage(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderProblemsCreatingBillingAccount",locale));  }catch (  GenericServiceException e) {    Debug.logError(e,"Service error when creating BillingAccount: " + e.getMessage(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderProblemsCreatingBillingAccount",locale));  }}  }
class C{  public static <T>List<T> decode(InputStream data,Parser<T> parser) throws IOException {  CodedInputStream stream=CodedInputStream.newInstance(data);  List<T> list=new ArrayList<>();  while (!stream.isAtEnd()) {    int size=stream.readRawVarint32();    byte[] element=stream.readRawBytes(size);    T decoded=parser.parseFrom(element);    list.add(decoded);  }  return list;}  }
class C{  @Override public void onRestoreFile(ParcelFileDescriptor data,long size,int type,String domain,String relpath,long mode,long mtime) throws IOException {  if (DEBUG)   Slog.d(TAG,"Shared restore: [ " + domain + " : "+ relpath+ "]");  File outFile=null;  int slash=relpath.indexOf('/');  if (slash > 0) {    try {      int i=Integer.parseInt(relpath.substring(0,slash));      if (i <= mVolumes.length) {        outFile=new File(mVolumes[i].getPath(),relpath.substring(slash + 1));        if (DEBUG)         Slog.i(TAG," => " + outFile.getAbsolutePath());      } else {        Slog.w(TAG,"Cannot restore data for unavailable volume " + i);      }    } catch (    NumberFormatException e) {      if (DEBUG)       Slog.w(TAG,"Bad volume number token: " + relpath.substring(0,slash));    }  } else {    if (DEBUG)     Slog.i(TAG,"Can't find volume-number token");  }  if (outFile == null) {    Slog.e(TAG,"Skipping data with malformed path " + relpath);  }  FullBackup.restoreFile(data,size,type,-1,mtime,outFile);}  }
class C{  @Override public boolean nullsAreSortedLow(){  debugCodeCall("nullsAreSortedLow");  return !SysProperties.SORT_NULLS_HIGH;}  }
class C{  boolean launchConfirmationActivity(int request,CharSequence message,CharSequence details){  boolean launched=false;switch (mLockPatternUtils.getKeyguardStoredPasswordQuality()) {case DevicePolicyManager.PASSWORD_QUALITY_SOMETHING:    launched=confirmPattern(request,message,details);  break;case DevicePolicyManager.PASSWORD_QUALITY_NUMERIC:case DevicePolicyManager.PASSWORD_QUALITY_ALPHABETIC:case DevicePolicyManager.PASSWORD_QUALITY_ALPHANUMERIC:case DevicePolicyManager.PASSWORD_QUALITY_COMPLEX:launched=confirmPassword(request);break;}return launched;}  }
class C{  protected boolean isDefaultGateway(Ethernet frame){  if (macToGateway.containsKey(frame.getSourceMACAddress()))   return true;  IPv4Address gwIp=macToGateway.get(frame.getDestinationMACAddress());  if (gwIp != null) {    MacAddress host=frame.getSourceMACAddress();    String srcNet=macToGuid.get(host);    if (srcNet != null) {      IPv4Address gwIpSrcNet=guidToGateway.get(srcNet);      if ((gwIpSrcNet != null) && (gwIp.equals(gwIpSrcNet)))       return true;    }  }  return false;}  }
class C{  static String decodeString(ByteBuffer buffer,String charset){  if (buffer == null) {    return null;  }  if (charset == null) {    throw new IllegalArgumentException("charset");  }  try {    return new String(buffer.array(),buffer.position(),buffer.limit() - buffer.position(),charset);  } catch (  UnsupportedEncodingException e) {    throw new RuntimeException(e);  }}  }
class C{  public void toggle(Animation animIn,Animation animOut){  toggle(true,animIn,animOut);}  }
class C{  public static String toString(float[] a){  if (a == null)   return "null";  int iMax=a.length - 1;  if (iMax == -1)   return "[]";  StringBuilder b=new StringBuilder();  b.append('[');  for (int i=0; ; i++) {    b.append(a[i]);    if (i == iMax)     return b.append(']').toString();    b.append(", ");  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader;  String outputHeader;  int row, col;  int progress=0;  double z, w, wN;  int i, n;  int[] dX={1,1,1,0,-1,-1,-1,0};  int[] dY={-1,0,1,1,1,0,-1,-1};  double largeValue=Float.MAX_VALUE;  double smallValue=0.0001;  boolean somethingDone;  int loopNum=1;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  smallValue=Double.parseDouble(args[2]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    double noDataOutput=-32768.0;    WhiteboxRaster output;    if (smallValue < 0.01 && smallValue > 0) {      output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.DOUBLE,largeValue);    } else {      output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,largeValue);    }    output.setNoDataValue(noDataOutput);    double[] data=null;    for (row=0; row < rows; row++) {      data=DEM.getRowValues(row);      if (row == 0 || row == (rows - 1)) {        for (col=0; col < cols; col++) {          if (data[col] != noData) {            output.setValue(row,col,data[col]);          } else {            output.setValue(row,col,noDataOutput);          }        }      } else {        for (col=0; col < cols; col++) {          z=data[col];          if (z == noData) {            output.setValue(row,col,noDataOutput);          } else {            output.setValue(row,col,z);            break;          }        }        for (col=cols - 1; col >= 0; col--) {          z=data[col];          if (z == noData) {            output.setValue(row,col,noDataOutput);          } else {            output.setValue(row,col,z);            break;          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 1:",progress);    }    i=0;    do {      loopNum++;      somethingDone=false;switch (i) {case 0:        for (row=1; row < (rows - 1); row++) {          for (col=1; col < (cols - 1); col++) {            z=DEM.getValue(row,col);            w=output.getValue(row,col);            if (w > z) {              for (n=0; n < 8; n++) {                wN=output.getValue(row + dY[n],col + dX[n]) + smallValue;                if (z == noData && wN == noDataOutput) {                  w=noDataOutput;                  output.setValue(row,col,w);                }                if (wN < w) {                  if (wN > z) {                    output.setValue(row,col,wN);                    w=wN;                  } else {                    output.setValue(row,col,z);                    break;                  }                  somethingDone=true;                }              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * row / (rows - 1));          updateProgress("Loop " + loopNum + ":",progress);        }      break;case 1:    for (row=(rows - 2); row >= 1; row--) {      for (col=(cols - 2); col >= 1; col--) {        z=DEM.getValue(row,col);        w=output.getValue(row,col);        if (w > z) {          for (n=0; n < 8; n++) {            wN=output.getValue(row + dY[n],col + dX[n]) + smallValue;            if (z == noData && wN == noDataOutput) {              w=noDataOutput;              output.setValue(row,col,w);            }            if (wN < w) {              if (wN > z) {                output.setValue(row,col,wN);                w=wN;              } else {                output.setValue(row,col,z);                break;              }              somethingDone=true;            }          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * (rows - row) / (rows - 1));      updateProgress("Loop " + loopNum + ":",progress);    }  break;case 2:for (row=1; row < (rows - 1); row++) {  for (col=(cols - 2); col >= 1; col--) {    z=DEM.getValue(row,col);    w=output.getValue(row,col);    if (w > z) {      for (n=0; n < 8; n++) {        wN=output.getValue(row + dY[n],col + dX[n]) + smallValue;        if (z == noData && wN == noDataOutput) {          w=noDataOutput;          output.setValue(row,col,w);        }        if (wN < w) {          if (wN > z) {            output.setValue(row,col,wN);            w=wN;          } else {            output.setValue(row,col,z);            break;          }          somethingDone=true;        }      }    }  }  if (cancelOp) {    cancelOperation();    return;  }  progress=(int)(100f * row / (rows - 1));  updateProgress("Loop " + loopNum + ":",progress);}break;case 3:for (row=(rows - 2); row >= 1; row--) {for (col=1; col < (cols - 1); col++) {z=DEM.getValue(row,col);w=output.getValue(row,col);if (w > z) {  for (n=0; n < 8; n++) {    wN=output.getValue(row + dY[n],col + dX[n]) + smallValue;    if (z == noData && wN == noDataOutput) {      w=noDataOutput;      output.setValue(row,col,w);    }    if (wN < w) {      if (wN > z) {        output.setValue(row,col,wN);        w=wN;      } else {        output.setValue(row,col,z);        break;      }      somethingDone=true;    }  }}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * (rows - row) / (rows - 1));updateProgress("Loop " + loopNum + ":",progress);}break;}i++;if (i > 3) {i=0;}} while (somethingDone);loopNum++;double zN;dX=new int[]{-1,0,1,1,-1};dY=new int[]{-1,-1,-1,0,0};for (row=0; row < rows; row++) {for (col=0; col < cols; col++) {z=DEM.getValue(row,col);if (z == noData && output.getValue(row,col) != noDataOutput) {for (i=0; i < 5; i++) {zN=output.getValue(row + dY[i],col + dX[i]);if (zN == noDataOutput) {output.setValue(row,col,noDataOutput);break;}}}}for (col=cols - 1; col >= 0; col--) {z=DEM.getValue(row,col);if (z == noData && output.getValue(row,col) != noDataOutput) {for (i=0; i < 5; i++) {zN=output.getValue(row + dY[i],col + dX[i]);if (zN == noDataOutput) {output.setValue(row,col,noDataOutput);break;}}}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * row / (rows - 1));updateProgress("Loop " + loopNum + ":",progress);}loopNum++;dX=new int[]{-1,0,1,1,-1};dY=new int[]{1,1,1,0,0};for (row=rows - 1; row >= 0; row--) {for (col=0; col < cols; col++) {z=DEM.getValue(row,col);if (z == noData && output.getValue(row,col) != noDataOutput) {for (i=0; i < 5; i++) {zN=output.getValue(row + dY[i],col + dX[i]);if (zN == noDataOutput) {output.setValue(row,col,noDataOutput);break;}}}}for (col=cols - 1; col >= 0; col--) {z=DEM.getValue(row,col);if (z == noData && output.getValue(row,col) != noDataOutput) {for (i=0; i < 5; i++) {zN=output.getValue(row + dY[i],col + dX[i]);if (zN == noDataOutput) {output.setValue(row,col,noDataOutput);break;}}}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * (rows - row) / (rows - 1));updateProgress("Loop " + loopNum + ":",progress);}output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());DEM.close();output.flush();output.findMinAndMaxVals();output.close();returnData(outputHeader);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public boolean hasService(Class<?> serviceClass){  if (serviceClass == null) {    throw new NullPointerException();  }  boolean has;synchronized (services) {    has=services.containsKey(serviceClass);  }  if (!has && getBeanContext() instanceof BeanContextServices) {    has=((BeanContextServices)getBeanContext()).hasService(serviceClass);  }  return has;}  }
class C{  public static void main(final String... args){  try {    new Builder(args).build().run();  } catch (  AttachAPINotFoundException e) {    System.err.println(e.getMessage());  }}  }
class C{  public static AlertLevel forName(String name){  for (int i=0; i < VALUES.length; i++) {    AlertLevel level=VALUES[i];    if (level.getName().equalsIgnoreCase(name)) {      return level;    }  }  throw new IllegalArgumentException(LocalizedStrings.AlertLevel_THERE_IS_NO_ALERT_LEVEL_0.toLocalizedString(name));}  }
class C{  private static boolean isValidGlobalOffset(PsiElement referenceElement,PsiElement definition){  BashFunctionDef refScope=findNextVarDefFunctionDefScope(referenceElement);  BashFunctionDef defScope=findNextVarDefFunctionDefScope(definition);  int refOffset=referenceElement.getTextOffset();  int defOffset=definition.getTextOffset();  if (refScope == defScope || (refScope != null && refScope.isEquivalentTo(defScope))) {    return refOffset > defOffset;  }  if (refScope != null && defScope != null) {    return true;  }  return refOffset > defOffset;}  }
class C{  public NTLMEngineException(String message,Throwable cause){  super(message,cause);}  }
class C{  @Override public void mouseDragged(MouseEvent arg0){}  }
class C{  public static Map<String,String> toMap(String source){  HashMap<String,String> responses=new HashMap<String,String>();  String values[]=source.split(";");  for (  String value : values) {    String nv[]=value.split("=");    if (nv.length >= 2) {      responses.put(nv[0],nv[1]);    } else     if (nv.length == 1) {      responses.put(nv[0],null);    }  }  return responses.size() != 0 ? responses : null;}  }
class C{  private CodePattern buildCodePattern_ONE_VS_ALL(Attribute classLabel){  int numberOfClasses=classLabel.getMapping().size();  CodePattern codePattern=new CodePattern(numberOfClasses,numberOfClasses);  Iterator<String> classIt=classLabel.getMapping().getValues().iterator();  modelNames.clear();  for (int i=0; i < numberOfClasses; i++) {    for (int j=0; j < numberOfClasses; j++) {      if (i == j) {        String currentClass=classIt.next();        modelNames.add(currentClass + " vs. all other");        codePattern.data[i][j]=currentClass;      } else {        codePattern.data[i][j]="all_other_classes";      }    }  }  return codePattern;}  }
class C{  public void addClass(ClassNode node){  node=node.redirect();  String name=node.getName();  ClassNode stored=classes.get(name);  if (stored != null && stored != node) {    SourceUnit nodeSource=node.getModule().getContext();    SourceUnit storedSource=stored.getModule().getContext();    String txt="Invalid duplicate class definition of class " + node.getName() + " : ";    if (nodeSource == storedSource) {      txt+="The source " + nodeSource.getName() + " contains at least two definitions of the class "+ node.getName()+ ".\n";      if (node.isScriptBody() || stored.isScriptBody()) {        txt+="One of the classes is an explicit generated class using the class statement, the other is a class generated from" + " the script body based on the file name. Solutions are to change the file name or to change the class name.\n";      }    } else {      txt+="The sources " + nodeSource.getName() + " and "+ storedSource.getName()+ " each contain a class with the name "+ node.getName()+ ".\n";    }    nodeSource.getErrorCollector().addErrorAndContinue(new SyntaxErrorMessage(new SyntaxException(txt,node.getLineNumber(),node.getColumnNumber(),node.getLastLineNumber(),node.getLastColumnNumber()),nodeSource));  }  classes.put(name,node);  if (classesToCompile.containsKey(name)) {    ClassNode cn=classesToCompile.get(name);    cn.setRedirect(node);    classesToCompile.remove(name);  }}  }
class C{  public TimeDuration(final Date date1,final Date date2){  this(date1.getTime(),date2.getTime());}  }
class C{  public void remove(){  throw new UnsupportedOperationException("ThreadUntilEnd is not mutable through the Iterator.");}  }
class C{  public LibraryLocation(IPath libraryPath,IPath sourcePath,IPath packageRoot,URL javadocLocation){  this(libraryPath,sourcePath,packageRoot,javadocLocation,null);}  }
class C{  public static float fixedPointToFloat(int fixedPoint){  return fixedPoint / 32f;}  }
class C{  private static void writeMinorStatisticsString(BufferedWriter output,SAZone zone) throws IOException {  output.write(zone.getName());  output.write(delimiter);  output.write(String.valueOf(zone.getMinorActivityCount()));  output.write(delimiter);  for (int i=0; i < 24; i++) {    output.write(String.valueOf(zone.getMinorActivityCountDetail(i)));    output.write(delimiter);  }  for (int i=0; i < 23; i++) {    output.write(String.valueOf(zone.getMinorActivityDurationDetail(i)));    output.write(delimiter);  }  output.write(String.valueOf(zone.getMinorActivityDurationDetail(23)));  output.newLine();}  }
class C{  static void installMultiDex(Context base){  android.support.multidex.MultiDex.install(base);}  }
class C{  public int namespaceIndex(String namespace,Vector extensions){  for (int i=0; i < extensions.size(); i++) {    if (((ExtensionNamespaceSupport)extensions.get(i)).getNamespace().equals(namespace))     return i;  }  return -1;}  }
class C{  public void initializeClassifier(Instances data) throws Exception {  if (m_Classifier instanceof IterativeClassifier)   ((IterativeClassifier)m_Classifier).initializeClassifier(setUp(data)); else   throw new Exception("Classifier: " + getClassifierSpec() + " is not an IterativeClassifier");}  }
class C{  public static Intent fragmentArgumentsToIntent(Bundle arguments){  Intent intent=new Intent();  if (arguments == null) {    return intent;  }  final Uri data=arguments.getParcelable(KEY_DATA);  if (data != null) {    intent.setData(data);  }  final String action=arguments.getString(KEY_ACTION);  if (action != null) {    intent.setAction(action);  }  intent.putExtras(arguments);  intent.removeExtra(KEY_DATA);  intent.removeExtra(KEY_ACTION);  return intent;}  }
class C{  public static TimeProvider createMockTimeProvider(final int... rawInstants){  final TimeInstant[] instants=new TimeInstant[rawInstants.length - 1];  for (int i=1; i < rawInstants.length; ++i) {    instants[i - 1]=new TimeInstant(rawInstants[i]);  }  final TimeProvider timeProvider=Mockito.mock(TimeProvider.class);  Mockito.when(timeProvider.getCurrentTime()).thenReturn(new TimeInstant(rawInstants[0]),instants);  return timeProvider;}  }
class C{  public String toFormattedString(){  return "3D peer memory copy setup:\n    " + createString("\n    ");}  }
class C{  default B power(final int power){  this.meta().setPower(power);  return this.getBuilder();}  }
class C{  private CViewNodeHelpers(){}  }
class C{  static boolean compareLocaleNames(Locale locale,String name){  return name.equalsIgnoreCase(locale.toString()) || name.equalsIgnoreCase(getName(locale));}  }
class C{  protected void configureJndi(){  try {    System.setProperty(Context.INITIAL_CONTEXT_FACTORY,"org.apache.xbean.spring.jndi.SpringInitialContextFactory");    new InitialContext();  } catch (  NamingException ex) {    logger.error("Error configurando jndi para los test:" + ex.getLocalizedMessage());  }}  }
class C{  public Object nextMeta() throws JSONException {  char c;  char q;  do {    c=next();  } while (Character.isWhitespace(c));switch (c) {case 0:    throw syntaxError("Misshaped meta tag");case '<':  return XML.LT;case '>':return XML.GT;case '/':return XML.SLASH;case '=':return XML.EQ;case '!':return XML.BANG;case '?':return XML.QUEST;case '"':case '\'':q=c;for (; ; ) {c=next();if (c == 0) {throw syntaxError("Unterminated string");}if (c == q) {return Boolean.TRUE;}}default :for (; ; ) {c=next();if (Character.isWhitespace(c)) {return Boolean.TRUE;}switch (c) {case 0:case '<':case '>':case '/':case '=':case '!':case '?':case '"':case '\'':back();return Boolean.TRUE;}}}}  }
class C{  public static BufferedImage createTranslucentCompatibleImage(int width,int height){  return CONFIGURATION.createCompatibleImage(width,height,Transparency.TRANSLUCENT);}  }
class C{  protected final static byte composeMessageType(byte esmClass,byte messageTypeValue){  return (byte)(cleanMessageType(esmClass) | messageTypeValue);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof TickUnit)) {    return false;  }  TickUnit that=(TickUnit)obj;  if (this.size != that.size) {    return false;  }  if (this.minorTickCount != that.minorTickCount) {    return false;  }  return true;}  }
class C{  @Override public synchronized void open() throws IOException {  open(defaultMaxIO,true);}  }
class C{  private double queryWork(Vec x,Set<Integer> validIndecies,SparseVector logProd){  if (originalVecs == null)   throw new UntrainedModelException("Model has not yet been created, queries can not be perfomed");  double logH=0;  for (int i=0; i < sortedDimVals.length; i++) {    double[] X=sortedDimVals[i];    double h=bandwidth[i];    logH+=log(h);    double xi=x.get(i);    int from=Arrays.binarySearch(X,xi - h * k.cutOff());    int to=Arrays.binarySearch(X,xi + h * k.cutOff());    from=from < 0 ? -from - 1 : from;    to=to < 0 ? -to - 1 : to;    Set<Integer> subIndecies=new IntSet();    for (int j=max(0,from); j < min(X.length,to + 1); j++) {      int trueIndex=sortedIndexVals[i][j];      if (i == 0) {        validIndecies.add(trueIndex);        logProd.set(trueIndex,log(k.k((xi - X[j]) / h)));      } else       if (validIndecies.contains(trueIndex)) {        logProd.increment(trueIndex,log(k.k((xi - X[j]) / h)));        subIndecies.add(trueIndex);      }    }    if (i > 0) {      validIndecies.retainAll(subIndecies);      if (validIndecies.isEmpty())       break;    }  }  return logH;}  }
class C{  public void abortshadow(final RWWriteCacheService cache){  for (int i=0; i < m_live.length; i++) {    final int startBit=i * 32;    final int chkbits=m_live[i] & ~m_commit[i];    clearCacheBits(cache,startBit,chkbits);    m_live[i]&=m_commit[i];    m_transients[i]=m_commit[i];  }  m_commit=m_saveCommit;  m_saveCommit=null;  m_isoFrees=null;}  }
class C{  @RequestMapping(value="/_search/users/{query}",method=RequestMethod.GET,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public List<User> search(@PathVariable String query){  return StreamSupport.stream(userSearchRepository.search(queryStringQuery(query)).spliterator(),false).collect(Collectors.toList());}  }
class C{  public void addArgument(GrammarNode arg){  children.add(arg);}  }
class C{  private void resetSearchInTraceSection(){  searchInTraceCheckBox.setSelection(false);  searchDepthSpinner.setSelection(-1);  searchDepthSpinner.setEnabled(false);}  }
class C{  public boolean hasWhere(){  return hasExtension(Where.class);}  }
class C{  List<Node<T>> previousNodes(){  return prevNodes;}  }
class C{  final public PathNode p(){  return (PathNode)get(1);}  }
class C{  public AverageTrueRangeItem(RegularTimePeriod period,BigDecimal averageTrueRange){  super(period,new AverageTrueRange(averageTrueRange));}  }
class C{  protected void updateDimensions(JTextField sender){  int newValue;  int baseValue;  if (!m_AspectRatioCheckBox.isSelected() || m_IgnoreChange) {    return;  }  if (!(sender instanceof JTextField) || (sender == null)) {    return;  }  if (sender.getText().length() == 0) {    return;  }  try {    baseValue=Integer.parseInt(sender.getText());    newValue=0;    if (baseValue <= 0) {      return;    }    if (Double.isNaN(m_AspectRatio)) {      m_AspectRatio=(double)getComponent().getWidth() / (double)getComponent().getHeight();    }  } catch (  Exception e) {    return;  }  m_IgnoreChange=true;  if (sender == m_CustomWidthText) {    newValue=(int)((baseValue) * (1 / m_AspectRatio));    m_CustomHeightText.setText("" + newValue);  } else   if (sender == m_CustomHeightText) {    newValue=(int)((baseValue) * m_AspectRatio);    m_CustomWidthText.setText("" + newValue);  }  m_IgnoreChange=false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:40.732 -0500",hash_original_method="ED310F254F72ACCB3181D18F31C09E67",hash_generated_method="7C025AC8F8B6B6795C0C122F7C211279") public void addStackTrace(StackTrace stackTrace,int[] countCell){  if (!threadIdToThreadEvent.containsKey(stackTrace.threadId)) {    throw new IllegalArgumentException("Unknown thread id " + stackTrace.threadId);  }  int[] old=stackTraces.put(stackTrace,countCell);  if (old != null) {    throw new IllegalArgumentException("StackTrace already registered for id " + stackTrace.stackTraceId + ":\n"+ stackTrace);  }}  }
class C{  public static File createTempDir(){  return createTempDir(new File(System.getProperty("java.io.tmpdir")));}  }
class C{  public static void write(File file,CharSequence data,Charset encoding,boolean append) throws IOException {  String str=data == null ? null : data.toString();  writeStringToFile(file,str,encoding,append);}  }
class C{  private void createHolderImageAndHolderText(){  RelativeLayout.LayoutParams paramsForContainer=new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT,RelativeLayout.LayoutParams.WRAP_CONTENT);  imageAndTextContainerInHolder=new LinearLayout(context);  imageAndTextContainerInHolder.setOrientation(LinearLayout.VERTICAL);  imageAndTextContainerInHolder.setLayoutParams(paramsForContainer);  imageAndTextContainerInHolder.setGravity(Gravity.CENTER);  holderImage=new ImageView(context);  holderText=new TextView(context);  imageAndTextContainerInHolder.addView(holderImage);  imageAndTextContainerInHolder.addView(holderText);  LinearLayout.LayoutParams paramsForChilds=new LinearLayout.LayoutParams(HOLDER_IMAGE_SIZE_IN_PX,HOLDER_IMAGE_SIZE_IN_PX);  holderImage.setLayoutParams(paramsForChilds);  if (HOLDER_IMAGE_DRAWABLE == null) {    holderImage.setVisibility(View.GONE);  } else {    setImageViewBackground(holderImage,HOLDER_IMAGE_DRAWABLE);  }  paramsForChilds=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);  paramsForChilds.setMargins(HOLDER_TEXT_RIGHT_LEFT_MARGIN_IN_PX,HOLDER_TEXT_MARGIN_TOP_IN_PX,HOLDER_TEXT_RIGHT_LEFT_MARGIN_IN_PX,0);  holderText.setLayoutParams(paramsForChilds);  holderText.setGravity(Gravity.CENTER_HORIZONTAL);  holderText.setTextColor(HOLDER_TEXT_COLOR);  holderText.setTextSize(HOLDER_TEXT_FONT_SIZE_IN_PX);  holderText.setText(HOLDER_TEXT);  addCustomViewToHolder(imageAndTextContainerInHolder);}  }
class C{  @Override public void test(Number t) throws ParameterException {  if (t.doubleValue() >= constraintValue.doubleValue()) {    throw new WrongParameterValueException("Parameter Constraint Error: \n" + "The parameter value specified has to be less than " + constraintValue.toString() + ". (current value: "+ t.doubleValue()+ ")\n");  }}  }
class C{  public INode remove(){  ArrayList<INode> min=tree.minimum();  INode best=min.remove(0);  hash.remove(best);  if (min.size() > 0) {    tree.insert(best.score(),min);  }  return best;}  }
class C{  private void switchGameSwitch(NineSwitchesGameSwitch gameSwitch){  int index=switches.indexOf(gameSwitch);  int row=index / 3;  int col=index % 3;  if (row > 0) {    switches.get((row - 1) * 3 + col).toggle();  }  if (col > 0) {    switches.get(row * 3 + col - 1).toggle();  }  gameSwitch.toggle();  if (row < 2) {    switches.get((row + 1) * 3 + col).toggle();  }  if (col < 2) {    switches.get(row * 3 + col + 1).toggle();  }}  }
class C{  public void onReachedTaskBlock(){  workerReachedBlock=true;  timeBlockReached=System.currentTimeMillis();  this.worker.setWorking(true);  worker.adaptItem(worker.worldObj.getBlockState(new BlockPos(posX,posY,posZ)).getBlock().getMaterial());}  }
class C{  public Matrix4f sub4x3(Matrix4f subtrahend){  return sub4x3(subtrahend,this);}  }
class C{  protected InternalReadReport asyncStreamRead(EntityDefinition ed,Scan scan,EntityCreationListener listener) throws IOException {  long counter=0;  long startTimestamp=0;  long stopTimestamp=0;  InternalScanner scanner=this.getCurrentRegion().getScanner(scan);  List<Cell> results=new ArrayList<Cell>();  try {    boolean hasMoreRows;    GenericMetricShadowEntity singleMetricEntity=null;    do {      hasMoreRows=scanner.next(results);      Map<String,byte[]> kvMap=new HashMap<String,byte[]>();      if (!results.isEmpty()) {        counter++;        byte[] row=results.get(0).getRow();        long timestamp=RowkeyBuilder.getTimestamp(row,ed);        if (startTimestamp == 0 || startTimestamp > timestamp) {          startTimestamp=timestamp;        }        if (stopTimestamp == 0 || stopTimestamp < timestamp) {          stopTimestamp=timestamp;        }        for (        Cell kv : results) {          String qualifierName=Bytes.toString(kv.getQualifier());          if (kv.getValue() != null) {            kvMap.put(qualifierName,kv.getValue());          }        }        InternalLog internalLog=HBaseInternalLogHelper.buildObject(ed,row,timestamp,kvMap);        if (internalLog != null) {          TaggedLogAPIEntity logAPIEntity=null;          try {            logAPIEntity=HBaseInternalLogHelper.buildEntity(internalLog,ed);            if (logAPIEntity instanceof GenericMetricEntity) {              if (singleMetricEntity == null) {                singleMetricEntity=new GenericMetricShadowEntity();              }              GenericMetricEntity e=(GenericMetricEntity)logAPIEntity;              if (e.getValue() != null) {                int count=e.getValue().length;                @SuppressWarnings("unused") Class<?> cls=ed.getMetricDefinition().getSingleTimestampEntityClass();                for (int i=0; i < count; i++) {                  long ts=logAPIEntity.getTimestamp() + i * ed.getMetricDefinition().getInterval();                  singleMetricEntity.setTimestamp(ts);                  singleMetricEntity.setTags(e.getTags());                  singleMetricEntity.setValue(e.getValue()[i]);                  if (startTimestamp == 0 || startTimestamp > ts) {                    startTimestamp=ts;                  }                  if (stopTimestamp == 0 || stopTimestamp < ts) {                    stopTimestamp=ts;                  }                  listener.entityCreated(singleMetricEntity);                }              }            } else {              listener.entityCreated(logAPIEntity);            }          } catch (          Exception e) {            if (internalLog != null) {              LOG.error("Got exception to handle " + internalLog.toString() + ": "+ e.getMessage(),e);            }            throw new IOException(e);          }        } else {          LOG.error("Got null to parse internal log for row: " + row.length + " with fields: "+ kvMap);        }        results.clear();      } else {        if (LOG.isDebugEnabled()) {          LOG.warn("Empty batch of KeyValue");        }      }    } while (hasMoreRows);  } catch (  IOException ex) {    LOG.error(ex.getMessage(),ex);    throw ex;  } finally {    if (scanner != null) {      scanner.close();    }  }  return new InternalReadReport(counter,startTimestamp,stopTimestamp);}  }
class C{  private void clearNotificationInternal(){  NotificationManager notificationManager=(NotificationManager)getSystemService(NOTIFICATION_SERVICE);  notificationManager.cancel(Constants.WEAR_NOTIFICATION_ID);}  }
class C{  public TimestampItem build(){  DateTime dateTime=getDateTimeObject(timestamp);  if (dateTime == null) {    return new TimestampItem(timestamp,null,null,null,Calendar.getInstance());  }  dateTime=dateTime.toDateTime(DateTimeZone.UTC);  dateTime=dateTime.plusHours(hours).plusMinutes(minutes);  Calendar calendar=dateTime.toCalendar(Locale.getDefault());  SimpleDateFormat dateFormatter=new SimpleDateFormat(dateFormat,Locale.getDefault());  String date=dateFormatter.format(calendar.getTime());  SimpleDateFormat timeFormatter=new SimpleDateFormat(timeFormat,Locale.getDefault());  String time=timeFormatter.format(calendar.getTime());  SimpleDateFormat dateTimeFormatter=new SimpleDateFormat(dateTimeFormat,Locale.getDefault());  String dateTimeString=dateTimeFormatter.format(calendar.getTime());  return new TimestampItem(timestamp,time,date,dateTimeString,calendar);}  }
class C{  public static int hash32(final String text){  final byte[] bytes=text.getBytes();  return hash32(bytes,bytes.length);}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","gdqy");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  public synchronized void connect(BluetoothDevice device){  if (mState == State.STATE_CONNECTING && mConnectThread != null) {    mConnectThread.cancel();    mConnectThread=null;  }  if (mConnectedThread != null) {    mConnectedThread.cancel();    mConnectedThread=null;  }  mConnectThread=new ConnectThread(device);  mConnectThread.start();  setState(State.STATE_CONNECTING);}  }
class C{  public static void dumpModelToFile(String outputFileName,String modelAsJson) throws IOException {  File dir=new File(outputFileName).getParentFile();  if (!dir.exists()) {    dir.mkdirs();  }  PrintWriter printWriter=new PrintWriter(new BufferedWriter(new FileWriter(outputFileName)));  printWriter.write(modelAsJson);  printWriter.close();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-19 13:30:38.173 -0400",hash_original_method="D685C2FA386E3559D94DAB46E30EF0B9",hash_generated_method="C2DDB97E7C57BEF40BF526EA65D8CE24") public boolean dismissPopup(){  if (isShowingPopup()) {    getListPopupWindow().dismiss();    ViewTreeObserver viewTreeObserver=getViewTreeObserver();    if (viewTreeObserver.isAlive()) {      viewTreeObserver.removeGlobalOnLayoutListener(mOnGlobalLayoutListener);    }  }  return true;}  }
class C{  public List<Integer> emit(List<Object> tuple){  return emit(Utils.DEFAULT_STREAM_ID,tuple);}  }
class C{  public Set<Map.Entry<String,Object>> valueSet(){  return mValues.entrySet();}  }
class C{  public boolean isDone(){  return index > 5;}  }
class C{  public void visitLineNumber(int line,Label start){  if (mv != null) {    mv.visitLineNumber(line,start);  }}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tThe seed value for the random number generator.\n" + "\t(default: 17)","S",1,"-S <num>"));  result.addAll(Collections.list(super.listOptions()));  return result.elements();}  }
class C{  public String toPattern(){  int lastOffset=0;  StringBuilder result=new StringBuilder();  for (int i=0; i <= maxOffset; ++i) {    copyAndFixQuotes(pattern,lastOffset,offsets[i],result);    lastOffset=offsets[i];    result.append('{').append(argumentNumbers[i]);    Format fmt=formats[i];    if (fmt == null) {    } else     if (fmt instanceof NumberFormat) {      if (fmt.equals(NumberFormat.getInstance(locale))) {        result.append(",number");      } else       if (fmt.equals(NumberFormat.getCurrencyInstance(locale))) {        result.append(",number,currency");      } else       if (fmt.equals(NumberFormat.getPercentInstance(locale))) {        result.append(",number,percent");      } else       if (fmt.equals(NumberFormat.getIntegerInstance(locale))) {        result.append(",number,integer");      } else {        if (fmt instanceof DecimalFormat) {          result.append(",number,").append(((DecimalFormat)fmt).toPattern());        } else         if (fmt instanceof ChoiceFormat) {          result.append(",choice,").append(((ChoiceFormat)fmt).toPattern());        } else {        }      }    } else     if (fmt instanceof DateFormat) {      int index;      for (index=MODIFIER_DEFAULT; index < DATE_TIME_MODIFIERS.length; index++) {        DateFormat df=DateFormat.getDateInstance(DATE_TIME_MODIFIERS[index],locale);        if (fmt.equals(df)) {          result.append(",date");          break;        }        df=DateFormat.getTimeInstance(DATE_TIME_MODIFIERS[index],locale);        if (fmt.equals(df)) {          result.append(",time");          break;        }      }      if (index >= DATE_TIME_MODIFIERS.length) {        if (fmt instanceof SimpleDateFormat) {          result.append(",date,").append(((SimpleDateFormat)fmt).toPattern());        } else {        }      } else       if (index != MODIFIER_DEFAULT) {        result.append(',').append(DATE_TIME_MODIFIER_KEYWORDS[index]);      }    } else {    }    result.append('}');  }  copyAndFixQuotes(pattern,lastOffset,pattern.length(),result);  return result.toString();}  }
class C{  protected TestResult createResult(){  return new TestResult();}  }
class C{  public void onChannelGroupSelected(int channelGroupId,String channelGroupTitle){  selectedChannelGroupId=channelGroupId;  selectedChannelGroupTitle=channelGroupTitle;  setupActionBar(selectedChannelGroupTitle,selectedChannelTitle);}  }
class C{  public static void wtf(String tag,String msg){  wtf(tag,msg,null);}  }
class C{  public SymbolTableEntryInternal steFor_N4EnumType(){  return getSymbolTableEntryInternal("N4EnumType",true);}  }
class C{  public CThreadInformationTableMenu(final Window parent,final IDebugger debugger,final TargetProcessThread thread){  Preconditions.checkNotNull(parent,"IE00648: Parent argument can not be null");  Preconditions.checkNotNull(thread,"IE00650: Thread argument can not be null");  if (debugger != null) {    if (thread.getState() == ThreadState.RUNNING) {      add(CActionProxy.proxy(new CSuspendThreadAction(thread)));    } else {      add(CActionProxy.proxy(new CResumeThreadAction(thread)));    }  }}  }
class C{  public T casePoint(Point object){  return null;}  }
class C{  private static final void copy(Reader r,Writer w,int blockSize,long timeout) throws IOException {  if (timeout < 1) {    char[] buffer=new char[blockSize];    int len;    while ((len=r.read(buffer)) != -1)     w.write(buffer,0,len);  } else {    Copy c=new Copy(r,w,blockSize,timeout);    c.start();    try {synchronized (c.notifier) {        c.notifier.wait(timeout + 1);      }    } catch (    InterruptedException ie) {      throw ExceptionUtil.toIOException(c.t);    }    if (c.t != null)     throw ExceptionUtil.toIOException(c.t);    if (!c.finished)     throw new IOException("reached timeout (" + timeout + "ms) while copying data");  }}  }
class C{  public void handleUpdateLayout(ReactShadowNode node){  if (!ENABLED) {    mUIViewOperationQueue.enqueueUpdateLayout(Assertions.assertNotNull(node.getParent()).getReactTag(),node.getReactTag(),node.getScreenX(),node.getScreenY(),node.getScreenWidth(),node.getScreenHeight());    return;  }  applyLayoutBase(node);}  }
class C{  public static boolean isNumeric(Class clazz){  if ((clazz == Double.class) || (clazz == double.class) || (clazz == BigDecimal.class)|| (clazz == BigInteger.class)|| (clazz == Float.class)|| (clazz == float.class)|| (clazz == Short.class)|| (clazz == short.class)|| (clazz == Integer.class)|| (clazz == int.class)|| (clazz == Long.class)|| (clazz == long.class)|| (clazz == Byte.class)|| (clazz == byte.class)) {    return true;  }  return false;}  }
class C{  private ByteString bytes(int... bytesAsInts){  byte[] bytes=new byte[bytesAsInts.length];  for (int i=0; i < bytesAsInts.length; i++) {    bytes[i]=(byte)bytesAsInts[i];  }  return ByteString.copyFrom(bytes);}  }
class C{  public GetEpisodes(int tvshowid,String... properties){  super();  addParameterToRequest("tvshowid",tvshowid);  addParameterToRequest("properties",properties);}  }
class C{  private void handleStopRequest(String withError){  LogUtils.d(TAG,"handleStopRequest: mState=" + mPlayback.getState() + " error=",withError);  mPlayback.stop(true);  mDelayedStopHandler.removeCallbacksAndMessages(null);  mDelayedStopHandler.sendEmptyMessageDelayed(0,STOP_DELAY);  updatePlaybackState(withError);  stopSelf();  mServiceStarted=false;}  }
class C{  public boolean isPair(){  assert (error == null);  return isPair;}  }
class C{  public Object remove(int key){  Entry tab[]=table;  int hash=key;  int index=(hash & 0x7FFFFFFF) % tab.length;  for (Entry e=tab[index], prev=null; e != null; prev=e, e=e.next) {    if (e.hash == hash) {      if (prev != null) {        prev.next=e.next;      } else {        tab[index]=e.next;      }      count--;      Object oldValue=e.value;      e.value=null;      return oldValue;    }  }  return null;}  }
class C{  @ToString public String toString(){  return ISODateTimeFormat.dateTime().print(this);}  }
class C{  private static void attemptRetryOnException(String logPrefix,Request<?> request,VolleyError exception) throws VolleyError {  RetryPolicy retryPolicy=request.getRetryPolicy();  int oldTimeout=request.getTimeoutMs();  try {    retryPolicy.retry(exception);  } catch (  VolleyError e) {    request.addMarker(String.format("%s-giveup [timeout=%s]",logPrefix,oldTimeout));    throw e;  }  request.addMarker(String.format("%s-retry [timeout=%s]",logPrefix,oldTimeout));}  }
class C{  default String renderInitalizers(Generator gen,M model){  return gen.onEach(model.getInitalizers()).collect(Collectors.joining(dnl()));}  }
class C{  private static View findIndexOfIcon(ArrayList<View> views,int i,int delta){  final int count=views.size();  int newI=i + delta;  while (0 <= newI && newI < count) {    View newV=views.get(newI);    if (newV instanceof BubbleTextView || newV instanceof FolderIcon) {      return newV;    }    newI+=delta;  }  return null;}  }
class C{  public static boolean isConfirming(String string){  return match(string,new String[]{"on","true","yes","allow","positive","enable","enabled","confirm","confirmed"});}  }
class C{  public String createBucket(String bucketName,String namespace,String repGroup){  _log.debug("ECSApi:createBucket Create bucket initiated for : {}",bucketName);  String id=null;  ClientResponse clientResp=null;  String body=" { \"name\": \"" + bucketName + "\", "+ "\"vpool\": \""+ repGroup+ "\", \"namespace\": \""+ namespace+ "\"}  ";  try {    clientResp=post(URI_CREATE_BUCKET,body);  } catch (  Exception e) {    _log.error("Error occured while bucket base creation : {}",bucketName,e);  } finally {    if (null == clientResp) {      throw ECSException.exceptions.storageAccessFailed(_baseUrl.resolve(URI_CREATE_BUCKET),500,"no response from ECS");    } else     if (clientResp.getStatus() != 200) {      String response=String.format("%1$s",(clientResp == null) ? "" : clientResp);      throw ECSException.exceptions.storageAccessFailed(_baseUrl.resolve(URI_CREATE_BUCKET),clientResp.getStatus(),response);    } else {      JSONObject jObj=clientResp.getEntity(JSONObject.class);      if (jObj.has("id")) {        try {          id=jObj.getString("id");        } catch (        JSONException e) {          throw ECSException.exceptions.storageAccessFailed(_baseUrl.resolve(URI_CREATE_BUCKET),clientResp.getStatus(),"Unable to extract source ID of the bucket");        }      }    }    closeResponse(clientResp);  }  return id;}  }
class C{  ClientResponse sendGetRequest(UniformInterface httpInterface) throws BillingException {  ClientResponse response;  try {    response=httpInterface.get(ClientResponse.class);  } catch (  Exception e) {    throw new BillingException("Call to File Billing Application failed",new RuntimeException("HTTP call failed"));  }  if (response.getStatus() != 200) {    throw new BillingException("Call to File Billing Application failed",new RuntimeException("Failed : HTTP error code : " + response.getStatus()));  }  return response;}  }
class C{  private static void copy(final InputStream input,final OutputStream output) throws IOException {  IOUtils.copy(input,output);}  }
class C{  protected String prependDataPathPrefix(String fileName){  String dataPathPrefix=(String)getAttribute(Layer.DataPathPrefixProperty);  if (dataPathPrefix != null && dataPathPrefix.length() > 0) {    fileName=dataPathPrefix + "/" + fileName;  }  return fileName;}  }
class C{  public LinearGradientPaint(float startX,float startY,float endX,float endY,float[] fractions,Color[] colors){  this(new Point2D.Float(startX,startY),new Point2D.Float(endX,endY),fractions,colors,NO_CYCLE,SRGB);}  }
class C{  public void addSelectionListener(final SelectionListener listener){  checkWidget();  if (listener == null) {    SWT.error(SWT.ERROR_NULL_ARGUMENT);  }  listOfSelectionListeners.add(listener);}  }
class C{  public EntityQuery cursorScrollSensitive(){  this.resultSetType=EntityFindOptions.TYPE_SCROLL_SENSITIVE;  return this;}  }
class C{  public synchronized void add(double x,double y){  while (mXY.get(x) != null) {    x+=getPadding();  }  mXY.put(x,y);  updateRange(x,y);}  }
class C{  public CompilerConfiguration(){  setWarningLevel(WarningMessage.LIKELY_ERRORS);  setOutput(null);  setTargetDirectory((File)null);  setClasspath("");  setVerbose(false);  setDebug(false);  setParameters(safeGetSystemProperty("groovy.parameters") != null);  setTolerance(10);  setScriptBaseClass(null);  setRecompileGroovySource(false);  setMinimumRecompilationInterval(100);  setTargetBytecode(safeGetSystemProperty("groovy.target.bytecode",getVMVersion()));  setDefaultScriptExtension(safeGetSystemProperty("groovy.default.scriptExtension",".groovy"));  String encoding=safeGetSystemProperty("file.encoding","US-ASCII");  encoding=safeGetSystemProperty("groovy.source.encoding",encoding);  setSourceEncoding(encoding);  try {    setOutput(new PrintWriter(System.err));  } catch (  Exception e) {  }  String target=safeGetSystemProperty("groovy.target.directory");  if (target != null) {    setTargetDirectory(target);  }  boolean indy=false;  try {    indy=Boolean.getBoolean("groovy.target.indy");  } catch (  Exception e) {  }  if (DEFAULT != null && Boolean.TRUE.equals(DEFAULT.getOptimizationOptions().get(INVOKEDYNAMIC))) {    indy=true;  }  Map options=new HashMap<String,Boolean>(3);  if (indy) {    options.put(INVOKEDYNAMIC,Boolean.TRUE);  }  setOptimizationOptions(options);}  }
class C{  public boolean isSOTrx(){  PO po=getPO();  if (po.get_ID() == 0)   return true;  int index=po.get_ColumnIndex("IsSOTrx");  if (index < 0) {    if (po.get_TableName().startsWith("M_"))     return false;    return true;  }  try {    Boolean IsSOTrx=(Boolean)po.get_Value(index);    return IsSOTrx.booleanValue();  } catch (  Exception e) {    log.log(Level.SEVERE,"",e);  }  return true;}  }
class C{  public T caseTypableElement(TypableElement object){  return null;}  }
class C{  private int increment(int[] setTo,int max,int curCount){  setTo[0]++;  curCount++;  if (curCount <= max)   return curCount;  int carryPos=0;  while (carryPos < setTo.length - 1 && curCount > max) {    curCount-=setTo[carryPos];    setTo[carryPos]=0;    setTo[++carryPos]++;    curCount++;  }  return curCount;}  }
class C{  public void run(){  try {    StunStack stunStack=netAccessManager.getStunStack();    while (running) {      RawMessage rawMessage;      try {        rawMessage=messageQueue.take();      } catch (      InterruptedException ex) {        if (isRunning())         logger.log(Level.WARNING,"A net access point has gone useless: ",ex);        rawMessage=null;      }      if (!isRunning())       return;      if (rawMessage == null)       continue;      Message stunMessage=null;      try {        stunMessage=Message.decode(rawMessage.getBytes(),(char)0,(char)rawMessage.getMessageLength());      } catch (      StunException ex) {        errorHandler.handleError("Failed to decode a stun message!",ex);        continue;      }      logger.finest("Dispatching a StunMessageEvent.");      StunMessageEvent stunMessageEvent=new StunMessageEvent(stunStack,rawMessage,stunMessage);      messageEventHandler.handleMessageEvent(stunMessageEvent);    }  } catch (  Throwable err) {    errorHandler.handleFatalError(this,"Unexpected Error!",err);  }}  }
class C{  public static String normalizeClassName(Class type){  return Reflect.normalizeClassName(type);}  }
class C{  private static void test_simpleUse(Configuration config) throws Exception {  String result=(String)createInstanceAndCallStaticMethod(config,"test.Test1","test");  assertSame("blort",result);}  }
class C{  public FeatureClassRec(String fclass,char type,String desc){  feature_class=fclass;  this.type=type;  description=desc;}  }
class C{  @Override public synchronized int read(){  return pos < count ? buffer.charAt(pos++) & 0xFF : -1;}  }
class C{  public void testTimestampConversion() throws Exception {  TimeZone currentTimezone=TimeZone.getDefault();  String[] availableIds=TimeZone.getAvailableIDs(currentTimezone.getRawOffset() + (3600 * 1000 * 2));  String newTimezone=null;  if (availableIds.length > 0) {    newTimezone=availableIds[0];  } else {    newTimezone="UTC";  }  Properties props=new Properties();  props.setProperty("useTimezone","true");  props.setProperty("serverTimezone",newTimezone);  Connection tzConn=null;  try {    String escapeToken="SELECT {ts '2002-11-12 10:00:00'} {t '05:11:02'}";    tzConn=getConnectionWithProps(props);    assertTrue(!tzConn.nativeSQL(escapeToken).equals(this.conn.nativeSQL(escapeToken)));  }  finally {    if (tzConn != null) {      tzConn.close();    }  }}  }
class C{  public Profiler startCollecting(){  thread=new Thread(this,"Profiler");  thread.setDaemon(true);  thread.start();  return this;}  }
class C{  @DELETE @Path("/{userName}") @RequiresRole(role=Role.ADMINISTRATOR) public void delete(@PathParam("userName") String name){  PrincipalId id=PrincipalUtil.fromName(name);  Validate.isTrue(getSystemDomain().equalsIgnoreCase(id.getDomain()),sm.getString("valid.not.systemdomain",id.getDomain(),tenant));  try {    getIDMClient().removeThirdPartyIDPUser(getTenant(),id);  } catch (  NoSuchTenantException|InvalidPrincipalException e) {    log.debug("Failed to delete external IDP user (FSP) '{}' from tenant '{}'",name,tenant,e);    throw new NotFoundException(sm.getString("ec.404"),e);  }catch (  InvalidArgumentException e) {    log.debug("Failed to delete external IDP user (FSP) '{}' from tenant '{}' due to a client side error",name,tenant,e);    throw new BadRequestException(sm.getString("res.user.delete.failed",name,tenant),e);  }catch (  Exception e) {    log.error("Failed to delete external IDP user (FSP) '{}' from tenant '{}' due to a server side error",name,tenant,e);    throw new InternalServerErrorException(sm.getString("ec.500"),e);  }}  }
class C{  private void allowDeallocate(){  stateUpdater.lazySet(this,STATE_MAY_DEALLOCATE);}  }
class C{  public boolean isSetCheck_false(){  return EncodingUtils.testBit(__isset_bitfield,__CHECK_FALSE_ISSET_ID);}  }
class C{  public void parse(Reader reader,ElementHandler rootHandler,String rootNamespace,String rootElementName) throws IOException, ParseException {  InputSource is=new InputSource(reader);  this.rootHandler=rootHandler;  this.rootNamespace=rootNamespace;  this.rootElementName=rootElementName;  parse(is);}  }
class C{  public StreamSource(File f){  setSystemId(f);}  }
class C{  private void restoreMenu(Form f){  if (f != null) {    f.restoreMenu();  }}  }
class C{  private void enableSubmitIfReady(){  boolean isReady=false;  if (etUsername.getText().toString().length() >= 1 && etPassword.getText().toString().length() >= 1) {    isReady=true;  }  if (isReady) {    btnRegister.setBackground(getResources().getDrawable(R.drawable.btn_orange));    btnRegister.setTextColor(getResources().getColor(R.color.white));    btnRegister.setEnabled(true);  } else {    btnRegister.setBackground(getResources().getDrawable(R.drawable.btn_grey));    btnRegister.setTextColor(getResources().getColor(R.color.black));    btnRegister.setEnabled(false);  }}  }
class C{  protected int numNodes(){  if (m_Attribute == -1) {    return 1;  } else {    int size=1;    for (    Tree m_Successor : m_Successors) {      size+=m_Successor.numNodes();    }    return size;  }}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.BREAK_STATEMENT;}  }
class C{  public void testIdentityMatrix(RealMatrix rm){  for (int i=0; i < rm.getRowDimension(); i++) {    for (int j=0; j < rm.getColumnDimension(); j++) {      if (i == j) {        Assert.assertEquals(1.0,rm.getEntry(i,j),Settings.EPS);      } else {        Assert.assertEquals(0.0,rm.getEntry(i,j),Settings.EPS);      }    }  }}  }
class C{  public boolean isStandardStreamMetadataFormatSupported(){  return supportsStandardStreamMetadataFormat;}  }
class C{  public static void addSolarNeutronRecipe(GasStack input,GasStack output){  try {    Class recipeClass=Class.forName("mekanism.common.recipe.RecipeHandler");    Method m=recipeClass.getMethod("addSolarEvaporationRecipe",GasStack.class,GasStack.class);    m.invoke(null,input,output);  } catch (  Exception e) {    System.err.println("Error while adding recipe: " + e.getMessage());  }}  }
class C{  public final void clearPassword(){  Arrays.fill(password,'?');  password=null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:21.242 -0400",hash_original_method="AB1C74DEAB6F5AB0D41867881F076BB6",hash_generated_method="AB1C74DEAB6F5AB0D41867881F076BB6") boolean casValue(Object cmp,Object val){  return UNSAFE.compareAndSwapObject(this,valueOffset,cmp,val);}  }
class C{  public static long convertReportingPeriod(long profilePeriod,TimeUnit profileTimeUnit,long reportingPeriod,TimeUnit reportingTimeUnit){  long convertedReportingPeriod=profileTimeUnit.convert(reportingPeriod,reportingTimeUnit);  if (convertedReportingPeriod <= profilePeriod) {    return 1;  }  return convertedReportingPeriod / profilePeriod;}  }
class C{  public void printf(Locale locale,String format,Object... args){  out.printf(locale,format,args);  out.flush();}  }
class C{  public int indexOf(int elem,int index){  runTo(-1);  return super.indexOf(elem,index);}  }
class C{  public static long copyLarge(Reader input,Writer output,final long inputOffset,final long length,char[] buffer) throws IOException {  if (inputOffset > 0) {    skipFully(input,inputOffset);  }  if (length == 0) {    return 0;  }  int bytesToRead=buffer.length;  if (length > 0 && length < buffer.length) {    bytesToRead=(int)length;  }  int read;  long totalRead=0;  while (bytesToRead > 0 && EOF != (read=input.read(buffer,0,bytesToRead))) {    output.write(buffer,0,read);    totalRead+=read;    if (length > 0) {      bytesToRead=(int)Math.min(length - totalRead,buffer.length);    }  }  return totalRead;}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == Type.class) {switch (baseOperationID) {case TypesPackage.TYPE___IS_FINAL:      return TypesPackage.TMETHOD___IS_FINAL;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == TFunction.class) {switch (baseOperationID) {case TypesPackage.TFUNCTION___GET_FUNCTION_AS_STRING:  return TypesPackage.TMETHOD___GET_FUNCTION_AS_STRING;case TypesPackage.TFUNCTION___IS_FINAL:return TypesPackage.TMETHOD___IS_FINAL;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == TMember.class) {switch (baseOperationID) {case TypesPackage.TMEMBER___GET_CONTAINING_TYPE:return TypesPackage.TMETHOD___GET_CONTAINING_TYPE;case TypesPackage.TMEMBER___GET_MEMBER_ACCESS_MODIFIER:return TypesPackage.TMETHOD___GET_MEMBER_ACCESS_MODIFIER;case TypesPackage.TMEMBER___GET_MEMBER_TYPE:return TypesPackage.TMETHOD___GET_MEMBER_TYPE;case TypesPackage.TMEMBER___IS_FIELD:return TypesPackage.TMETHOD___IS_FIELD;case TypesPackage.TMEMBER___IS_GETTER:return TypesPackage.TMETHOD___IS_GETTER;case TypesPackage.TMEMBER___IS_SETTER:return TypesPackage.TMETHOD___IS_SETTER;case TypesPackage.TMEMBER___IS_ACCESSOR:return TypesPackage.TMETHOD___IS_ACCESSOR;case TypesPackage.TMEMBER___IS_METHOD:return TypesPackage.TMETHOD___IS_METHOD;case TypesPackage.TMEMBER___IS_CONSTRUCTOR:return TypesPackage.TMETHOD___IS_CONSTRUCTOR;case TypesPackage.TMEMBER___IS_OPTIONAL:return TypesPackage.TMETHOD___IS_OPTIONAL;case TypesPackage.TMEMBER___IS_ABSTRACT:return TypesPackage.TMETHOD___IS_ABSTRACT;case TypesPackage.TMEMBER___IS_READABLE:return TypesPackage.TMETHOD___IS_READABLE;case TypesPackage.TMEMBER___IS_WRITEABLE:return TypesPackage.TMETHOD___IS_WRITEABLE;case TypesPackage.TMEMBER___GET_MEMBER_AS_STRING:return TypesPackage.TMETHOD___GET_MEMBER_AS_STRING;case TypesPackage.TMEMBER___IS_FINAL:return TypesPackage.TMETHOD___IS_FINAL;case TypesPackage.TMEMBER___IS_STATIC:return TypesPackage.TMETHOD___IS_STATIC;case TypesPackage.TMEMBER___IS_POLYFILLED:return TypesPackage.TMETHOD___IS_POLYFILLED;default :return -1;}}if (baseClass == TMemberWithAccessModifier.class) {switch (baseOperationID) {case TypesPackage.TMEMBER_WITH_ACCESS_MODIFIER___GET_MEMBER_ACCESS_MODIFIER:return TypesPackage.TMETHOD___GET_MEMBER_ACCESS_MODIFIER;default :return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  private static void findOuterShells(List shellList){  for (Iterator i=shellList.iterator(); i.hasNext(); ) {    EdgeRing er=(EdgeRing)i.next();    EdgeRing outerHoleER=er.getOuterHole();    if (outerHoleER != null && !outerHoleER.isProcessed()) {      er.setIncluded(true);      outerHoleER.setProcessed(true);    }  }}  }
class C{  public UnknownError(String s){  super(s);}  }
class C{  public List<Long> extractOrderedList(){  Long[] array=new Long[heap.size()];  for (int i=heap.size() - 1; i >= 0; i--) {    array[i]=heap.remove();  }  return Arrays.asList(array);}  }
class C{  @Override public void onDownloadProgress(DownloadProgressInfo progress){  mAverageSpeed.setText(getString(R.string.kilobytes_per_second,Helpers.getSpeedString(progress.mCurrentSpeed)));  mTimeRemaining.setText(getString(R.string.time_remaining,Helpers.getTimeRemaining(progress.mTimeRemaining)));  progress.mOverallTotal=progress.mOverallTotal;  mPB.setMax((int)(progress.mOverallTotal >> 8));  mPB.setProgress((int)(progress.mOverallProgress >> 8));  mProgressPercent.setText(Long.toString(progress.mOverallProgress * 100 / progress.mOverallTotal) + "%");  mProgressFraction.setText(Helpers.getDownloadProgressString(progress.mOverallProgress,progress.mOverallTotal));}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static void reverse(CoordinateSequence seq){  int last=seq.size() - 1;  int mid=last / 2;  for (int i=0; i <= mid; i++) {    swap(seq,i,last - i);  }}  }
class C{  protected ReplyToParser(Lexer lexer){  super(lexer);}  }
class C{  private static void markFailure(){  loadSaveFailureEncountered=true;}  }
class C{  protected MultipleIsA_Impl(){  super();}  }
class C{  private Message convertExceptionToAxisFault(Exception exception,Message responseMsg){  logException(exception);  if (responseMsg == null) {    AxisFault fault=AxisFault.makeFault(exception);    processAxisFault(fault);    responseMsg=new Message(fault);  }  return responseMsg;}  }
class C{  private void initComputeProgram(){  glUseProgram(computeProgram);  IntBuffer workGroupSize=BufferUtils.createIntBuffer(3);  glGetProgramiv(computeProgram,GL_COMPUTE_WORK_GROUP_SIZE,workGroupSize);  workGroupSizeX=workGroupSize.get(0);  workGroupSizeY=workGroupSize.get(1);  timeUniform=glGetUniformLocation(computeProgram,"time");  blendFactorUniform=glGetUniformLocation(computeProgram,"blendFactor");  bounceCountUniform=glGetUniformLocation(computeProgram,"bounceCount");  int boxesResourceIndex=glGetProgramResourceIndex(computeProgram,GL_SHADER_STORAGE_BLOCK,"Boxes");  IntBuffer props=BufferUtils.createIntBuffer(1);  IntBuffer params=BufferUtils.createIntBuffer(1);  props.put(0,GL_BUFFER_BINDING);  glGetProgramResourceiv(computeProgram,GL_SHADER_STORAGE_BLOCK,boxesResourceIndex,props,null,params);  boxesSsboBinding=params.get(0);  int loc=glGetUniformLocation(computeProgram,"framebufferImage");  glGetUniformiv(computeProgram,loc,params);  framebufferImageBinding=params.get(0);  loc=glGetUniformLocation(computeProgram,"worldPositionImage");  glGetUniformiv(computeProgram,loc,params);  worldPositionImageBinding=params.get(0);  loc=glGetUniformLocation(computeProgram,"worldNormalImage");  glGetUniformiv(computeProgram,loc,params);  worldNormalImageBinding=params.get(0);  glUseProgram(0);}  }
class C{  protected void updateBeta(){  double[] gammas=new double[basisSet.size()];  for (int j=0; j < basisSet.size(); j++) {    gammas[j]=1.0d - alpha[basisSet.get(j)] * SIGMA.get(j,j);  }  double sumGammas=0;  for (int j=0; j < gammas.length; j++) {    sumGammas+=gammas[j];  }  Matrix DELTA=(new Matrix(t)).minus(PHI_t.transpose().times(mu));  beta=x.length - sumGammas / innerProduct(DELTA.getRowPackedCopy(),DELTA.getRowPackedCopy());}  }
class C{  public boolean hasFileExtension(String extension){  for (  String ext : fileExtensions) {    if (ext.equalsIgnoreCase(extension)) {      return true;    }  }  return false;}  }
class C{  public Long remove(Long key){  return wrapValue(_map.remove(unwrapKey(key)));}  }
class C{  protected void runEntranceTransition(Object entranceTransition){}  }
class C{  public void treeStructureChanged(TreeModelEvent e){  fireVisibleDataPropertyChange();}  }
class C{  static byte[] hashPassword(String passwordHashSalt,String password){  try {    MessageDigest instance=MessageDigest.getInstance(MessageDigestAlgorithms.SHA_512);    return instance.digest((passwordHashSalt + password).getBytes("UTF-8"));  } catch (  NoSuchAlgorithmException|UnsupportedEncodingException e) {    throw new RuntimeException(e.getMessage());  }}  }
class C{  public static Scale percentiles(){  return scale(100);}  }
class C{  public java.lang.StringBuffer append(char c){  internal.append(c);  return this;}  }
class C{  @Override public final void insert(DBIDRef id){  insertLeaf(createNewLeafEntry(DBIDUtil.deref(id)));}  }
class C{  private void notifyNoActivity(){  logger.debug("No activity notified, sending enquireLink");  if (sessionContext().getSessionState().isBound()) {    enquireLinkSender.enquireLink();  }}  }
class C{  public boolean isComplete(List<Variable> vars){  for (  Variable var : vars) {    if (!hasAssignmentFor(var))     return false;  }  return true;}  }
class C{  public static <SRC>KryoCloneUtils<SRC> createCloneUtils(SRC template){  return createCloneUtils(new Kryo(),template);}  }
class C{  public static NodesStatsRequest nodesStatsRequest(String... nodesIds){  return new NodesStatsRequest(nodesIds);}  }
class C{  public void testSendReceive() throws IOException {  TungstenProperties props=new TungstenProperties();  sendRecvAndCompareProps(props);  props.put("null",null);  props.put("key",null);  props.put("null2","val");  props.put("key2","");  TungstenProperties props2=new TungstenProperties();  props2.put("otherPropsKey2","val");  props.put("key3",props2);  TungstenProperties props3=new TungstenProperties();  props.put("key4",props3);  sendRecvAndCompareProps(props2);  sendRecvAndCompareProps(props);  TungstenProperties props4=new TungstenProperties();  props4.put("router.id","324323-stdb1.worldcompany.com");  sendRecvAndCompareProps(props4);  int largeStringSize=256;  props4=new TungstenProperties();  StringBuffer hugeString=new StringBuffer(largeStringSize);  for (int i=0; i < largeStringSize; i++) {    hugeString.append('a');  }  props4.put(hugeString.toString(),hugeString.toString());  sendRecvAndCompareProps(props4);  props=makeProperties();  sendRecvAndCompareProps(props);}  }
class C{  public IonDatagram values(String text) throws Exception {  IonLoader loader=system().newLoader();  return loader.load(text);}  }
class C{  public long queueNewOperation(Intent operationIntent){  Pair<Target,RemoteOperation> itemToQueue=newOperation(operationIntent);  if (itemToQueue != null) {    mServiceHandler.mPendingOperations.add(itemToQueue);    startService(new Intent(OperationsService.this,OperationsService.class));    return itemToQueue.second.hashCode();  } else {    return Long.MAX_VALUE;  }}  }
class C{  @DSComment("General android operation, no security concern") @DSSafe(DSCat.OS_GENERAL) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:38.150 -0500",hash_original_method="FF7CD905415FB665DAB37EF33B177901",hash_generated_method="EA06BD2476989BF4DB475E54AC02F660") public void attachInterface(IInterface owner,String descriptor){  mOwner=owner;  mDescriptor=descriptor;}  }
class C{  public static long readUint32(byte[] bytes,int offset){  return (bytes[offset] & 0xffl) | ((bytes[offset + 1] & 0xffl) << 8) | ((bytes[offset + 2] & 0xffl) << 16)| ((bytes[offset + 3] & 0xffl) << 24);}  }
class C{  public CachedRowSet createCopy() throws SQLException {  ObjectOutputStream out;  ByteArrayOutputStream bOut=new ByteArrayOutputStream();  try {    out=new ObjectOutputStream(bOut);    out.writeObject(this);  } catch (  IOException ex) {    throw new SQLException(MessageFormat.format(resBundle.handleGetObject("cachedrowsetimpl.clonefail").toString(),ex.getMessage()));  }  ObjectInputStream in;  try {    ByteArrayInputStream bIn=new ByteArrayInputStream(bOut.toByteArray());    in=new ObjectInputStream(bIn);  } catch (  StreamCorruptedException ex) {    throw new SQLException(MessageFormat.format(resBundle.handleGetObject("cachedrowsetimpl.clonefail").toString(),ex.getMessage()));  }catch (  IOException ex) {    throw new SQLException(MessageFormat.format(resBundle.handleGetObject("cachedrowsetimpl.clonefail").toString(),ex.getMessage()));  }  try {    CachedRowSetImpl crsTemp=(CachedRowSetImpl)in.readObject();    crsTemp.resBundle=this.resBundle;    return ((CachedRowSet)crsTemp);  } catch (  ClassNotFoundException ex) {    throw new SQLException(MessageFormat.format(resBundle.handleGetObject("cachedrowsetimpl.clonefail").toString(),ex.getMessage()));  }catch (  OptionalDataException ex) {    throw new SQLException(MessageFormat.format(resBundle.handleGetObject("cachedrowsetimpl.clonefail").toString(),ex.getMessage()));  }catch (  IOException ex) {    throw new SQLException(MessageFormat.format(resBundle.handleGetObject("cachedrowsetimpl.clonefail").toString(),ex.getMessage()));  }}  }
class C{  public static boolean hasKitKat(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT;}  }
class C{  protected TextImpl(){  super();}  }
class C{  public And(){  super("and",2);}  }
class C{  private void element() throws Exception {  int mark=off;  int size=0;  while (off < count) {    char value=data[off++];    if (!isValid(value)) {      if (value == '@') {        off--;        break;      } else       if (value == '[') {        index();        break;      } else       if (value != '/') {        throw new PathException("Illegal character '%s' in element for '%s' in %s",value,path,type);      }      break;    }    size++;  }  element(mark,size);}  }
class C{  public SET(SET<Key> x){  set=new TreeSet<Key>(x.set);}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) @Test public void testNodeProcessing(){  ApacheLogParseOperator oper=new ApacheLogParseOperator();  CollectorTestSink ipSink=new CollectorTestSink();  CollectorTestSink urlSink=new CollectorTestSink();  CollectorTestSink scSink=new CollectorTestSink();  CollectorTestSink bytesSink=new CollectorTestSink();  CollectorTestSink refSink=new CollectorTestSink();  CollectorTestSink agentSink=new CollectorTestSink();  oper.outputIPAddress.setSink(ipSink);  oper.outputUrl.setSink(urlSink);  oper.outputStatusCode.setSink(scSink);  oper.outputBytes.setSink(bytesSink);  oper.outputReferer.setSink(refSink);  oper.outputAgent.setSink(agentSink);  String token="127.0.0.1 - - [04/Apr/2013:17:17:21 -0700] \"GET /favicon.ico HTTP/1.1\" 404 498 \"-\" \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.31 (KHTML, like Gecko) Chrome/26.0.1410.43 Safari/537.31\"";  oper.beginWindow(0);  oper.data.process(token);  oper.endWindow();  Assert.assertEquals("number emitted tuples",1,ipSink.collectedTuples.size());  Assert.assertEquals("number emitted tuples",1,urlSink.collectedTuples.size());  Assert.assertEquals("number emitted tuples",1,scSink.collectedTuples.size());  Assert.assertEquals("number emitted tuples",1,bytesSink.collectedTuples.size());  Assert.assertEquals("number emitted tuples",1,refSink.collectedTuples.size());  Assert.assertEquals("number emitted tuples",1,agentSink.collectedTuples.size());  log.debug(String.format("\nLine is \"%s\"",token));  log.debug(String.format("IP is %s\n",ipSink.collectedTuples.toString()));  log.debug(String.format("Url is %s\n",urlSink.collectedTuples.toString()));  log.debug(String.format("Status code is %s\n",scSink.collectedTuples.toString()));  log.debug(String.format("Bytes are %s\n",bytesSink.collectedTuples.toString()));  log.debug(String.format("Referer is %s\n",refSink.collectedTuples.toString()));  log.debug(String.format("Agent is %s\n",agentSink.collectedTuples.toString()));}  }
class C{  protected void dumpTree(int depth,StringBuffer text) throws Exception {  for (int i=0; i < m_sons.length; i++) {    text.append("\n");    for (int j=0; j < depth; j++) {      text.append("|   ");    }    text.append(m_localModel.leftSide(m_train));    text.append(m_localModel.rightSide(i,m_train));    if (m_sons[i].m_isLeaf) {      text.append(": ");      text.append("LM_" + m_sons[i].m_leafModelNum + ":"+ m_sons[i].getModelParameters());    } else {      m_sons[i].dumpTree(depth + 1,text);    }  }}  }
class C{  public void testGConTestData() throws Exception {  System.out.println("Testing linear-Gaussian TE against values from " + "(modified) ChaLearn Connectomics Challenge Sample Code");  ArrayFileReader afr=new ArrayFileReader("demos/data/2coupledRandomCols-1.txt");  double[][] data=afr.getDouble2DMatrix();  TransferEntropyCalculatorGaussian teCalc=new TransferEntropyCalculatorGaussian();  teCalc.initialise(1);  teCalc.setObservations(MatrixUtils.selectColumn(data,0),MatrixUtils.selectColumn(data,1));  double te=teCalc.computeAverageLocalOfObservations();  assertEquals(0.71693 / 2,te,0.0001);  teCalc.initialise(1);  teCalc.setObservations(MatrixUtils.selectColumn(data,1),MatrixUtils.selectColumn(data,0));  te=teCalc.computeAverageLocalOfObservations();  assertEquals(0.01702 / 2,te,0.0001);  teCalc.initialise(2,1,2,1,1);  teCalc.setObservations(MatrixUtils.selectColumn(data,0),MatrixUtils.selectColumn(data,1));  te=teCalc.computeAverageLocalOfObservations();  assertEquals(0.77806 / 2,te,0.0001);  teCalc.initialise(2,1,2,1,1);  teCalc.setObservations(MatrixUtils.selectColumn(data,1),MatrixUtils.selectColumn(data,0));  te=teCalc.computeAverageLocalOfObservations();  assertEquals(0.02407 / 2,te,0.0001);  teCalc.initialise(3,1,3,1,1);  teCalc.setObservations(MatrixUtils.selectColumn(data,0),MatrixUtils.selectColumn(data,1));  te=teCalc.computeAverageLocalOfObservations();  assertEquals(0.79468 / 2,te,0.0001);  teCalc.initialise(3,1,3,1,1);  teCalc.setObservations(MatrixUtils.selectColumn(data,1),MatrixUtils.selectColumn(data,0));  te=teCalc.computeAverageLocalOfObservations();  assertEquals(0.02180 / 2,te,0.0001);  System.out.println("Linear-Gaussian TE validated");}  }
class C{  private double calculateErrorVarianceFromParams(Node error){  error=semGraph.getNode(error.getName());  Node child=semGraph.getChildren(error).get(0);  List<Node> parents=semGraph.getParents(child);  double otherVariance=0;  for (  Node parent : parents) {    if (parent == error)     continue;    double coef=getEdgeCoefficient(parent,child);    otherVariance+=coef * coef;  }  if (parents.size() >= 2) {    ChoiceGenerator gen=new ChoiceGenerator(parents.size(),2);    int[] indices;    while ((indices=gen.next()) != null) {      Node node1=parents.get(indices[0]);      Node node2=parents.get(indices[1]);      double coef1, coef2;      if (node1.getNodeType() != NodeType.ERROR) {        coef1=getEdgeCoefficient(node1,child);      } else {        coef1=1;      }      if (node2.getNodeType() != NodeType.ERROR) {        coef2=getEdgeCoefficient(node2,child);      } else {        coef2=1;      }      List<List<Node>> treks=GraphUtils.treksIncludingBidirected(semGraph,node1,node2);      double cov=0.0;      for (      List<Node> trek : treks) {        double product=1.0;        for (int i=1; i < trek.size(); i++) {          Node _node1=trek.get(i - 1);          Node _node2=trek.get(i);          Edge edge=semGraph.getEdge(_node1,_node2);          double factor;          if (Edges.isBidirectedEdge(edge)) {            factor=edgeParameters.get(edge);          } else           if (!edgeParameters.containsKey(edge)) {            factor=1;          } else           if (semGraph.isParentOf(_node1,_node2)) {            factor=getEdgeCoefficient(_node1,_node2);          } else {            factor=getEdgeCoefficient(_node2,_node1);          }          product*=factor;        }        cov+=product;      }      otherVariance+=2 * coef1 * coef2* cov;    }  }  return 1.0 - otherVariance <= 0 ? Double.NaN : 1.0 - otherVariance;}  }
class C{  public boolean isInfernoBurning(Coords coords){  boolean result=false;  InfernoTracker tracker=null;  tracker=infernos.get(coords);  if (null != tracker) {    if (tracker.isStillBurning()) {      result=true;    }  }  return result;}  }
class C{  @Override public String toString(){  return id;}  }
class C{  public void loadJarFile(String name){  try {    JarInputStream zin=new JarInputStream(new FileInputStream(JarName));    JarEntry entry;    fileText.setText("");    while ((entry=zin.getNextJarEntry()) != null) {      if (entry.getName().equals(name)) {        BufferedReader in=new BufferedReader(new InputStreamReader(zin));        String line;        while ((line=in.readLine()) != null) {          fileText.append(line);          fileText.append("\n");        }      }      zin.closeEntry();    }    zin.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @NotNull public PsiQuery parents(@NotNull final FQNamesProvider name){  throw new RuntimeException("Not impl");}  }
class C{  private NullUtil(){  instanceNotAllowed(getClass());}  }
class C{  public static Process runAsyncCommand(String command,Consumer<String> stdoutConsumer,Consumer<Process> endConsumer,Runnable errorHandler,String... args){  return runCommand(command,null,true,stdoutConsumer,endConsumer,errorHandler,args);}  }
class C{  public boolean isAllow_Info_MRP(){  Object oo=get_Value(COLUMNNAME_Allow_Info_MRP);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @NonNull public static CalendarDay from(int year,int month,int day){  return new CalendarDay(year,month,day);}  }
class C{  WikipediaTokenizerImpl(java.io.Reader in){  this.zzReader=in;}  }
class C{  public static float toPixelFromSP(double value){  return toPixelFromSP((float)value);}  }
class C{  private void cancelThreads(){  if (connectThread != null) {    connectThread.cancel();    connectThread=null;  }  if (connectedThread != null) {    connectedThread.cancel();    connectedThread=null;  }}  }
class C{  @NoInline @Unpreemptible public static byte[] newStack(int bytes){  if (bytes <= 0) {    if (VM.VerifyAssertions) {      VM.sysWrite("Invalid stack size: ");      VM.sysWrite(bytes);      VM.sysWriteln("!");      VM._assert(VM.NOT_REACHED,"Attempted to create stack with size (in bytes) of 0 or smaller!");    } else {      bytes=StackFrameLayout.getStackSizeNormal();    }  }  if (!VM.runningVM) {    return new byte[bytes];  } else {    RVMArray stackType=RVMArray.ByteArray;    int headerSize=ObjectModel.computeArrayHeaderSize(stackType);    int align=ObjectModel.getAlignment(stackType);    int offset=ObjectModel.getOffsetForAlignment(stackType,false);    int width=stackType.getLogElementSize();    TIB stackTib=stackType.getTypeInformationBlock();    return (byte[])allocateArray(bytes,width,headerSize,stackTib,Plan.ALLOC_STACK,align,offset,Plan.DEFAULT_SITE);  }}  }
class C{  protected void loadDialogSettings(){  dialogSettings=new DialogSettings("Workbench");  IPath dataLocation=new Path(settingsDir);  String readWritePath=dataLocation.append(FN_DIALOG_SETTINGS).toOSString();  File settingsFile=new File(readWritePath);  if (settingsFile.exists()) {    try {      dialogSettings.load(readWritePath);    } catch (    IOException e) {      dialogSettings=new DialogSettings("Workbench");    }  }}  }
class C{  public TimingLogger(String tag,String label){  reset(tag,label);}  }
class C{  @Override protected IResourceMetadata[] doTask() throws Exception {  final List<IResourceMetadata> newView=new LinkedList<IResourceMetadata>();  final Map<String,Object> v=buildResult.getParams();  v.put("summary",OverflowActionEnum.Build + "(" + buildResult.name+ ")");  final Event updateEvent=parentEvent.newSubEvent(OverflowSubtaskEnum.AtomicUpdate).start();  try {    if (resourceManager.isOverflowAllowed())     throw new IllegalStateException();    final SegmentMetadata segmentMetadata=buildResult.segmentMetadata;    if (INFO)     log.info(buildResult.toString());    final ILocalBTreeView view=getIndex(getOnlyResource());    final BTree btree=view.getMutableBTree();    assertSameIndex(indexUUID,btree);    if (view instanceof BTree) {      throw new RuntimeException("View is only a B+Tree: name=" + buildResult.name + ", pmd="+ view.getIndexMetadata().getPartitionMetadata());    }    if (INFO)     log.info("src=" + getOnlyResource() + ", counter="+ view.getCounter().get()+ ", checkpoint="+ btree.getCheckpoint());    final IndexMetadata indexMetadata=btree.getIndexMetadata().clone();    final LocalPartitionMetadata currentpmd=indexMetadata.getPartitionMetadata();    if (currentpmd == null) {      throw new IllegalStateException("Not an index partition: " + getOnlyResource());    }    final IResourceMetadata[] currentResources=currentpmd.getResources();{      if (currentResources.length < 2) {        throw new IllegalStateException("Expecting at least 2 resources in the view: " + Arrays.toString(currentResources));      }      if (!currentResources[0].getUUID().equals(getJournal().getRootBlockView().getUUID())) {        throw new IllegalStateException("Expecting live journal to be the first resource: " + Arrays.toString(currentResources));      }      if (!currentResources[1].isJournal()) {        throw new IllegalStateException("Expecting live journal to be the first resource: " + Arrays.toString(currentResources));      }    }    final IResourceMetadata[] newResources;{      newView.add(getJournal().getResourceMetadata());      newView.add(segmentMetadata);      final int startIndex=1 + buildResult.sourceCount;      for (int i=startIndex; i < currentResources.length; i++) {        newView.add(currentResources[i]);      }      newResources=(IResourceMetadata[])newView.toArray(new IResourceMetadata[]{});    }    indexMetadata.setPartitionMetadata(new LocalPartitionMetadata(currentpmd.getPartitionId(),currentpmd.getSourcePartitionId(),currentpmd.getLeftSeparatorKey(),currentpmd.getRightSeparatorKey(),newResources,currentpmd.getIndexPartitionCause()));    btree.setIndexMetadata(indexMetadata);    if (INFO)     log.info("Updated view: name=" + getOnlyResource() + ", pmd="+ indexMetadata.getPartitionMetadata()+ toString("oldResources",currentResources)+ toString("newResources",newResources));    assert btree.needsCheckpoint();    resourceManager.overflowCounters.indexPartitionBuildCounter.incrementAndGet();    updateEvent.addDetail("newView",newView.toString());    return newResources;  }  finally {    updateEvent.end();  }}  }
class C{  public SQLInvalidAuthorizationSpecException(String reason,String sqlState,int vendorCode){  super(reason,sqlState,vendorCode);}  }
class C{  public ObjectName preRegister(MBeanServer server,ObjectName name) throws java.lang.Exception {  return name;}  }
class C{  public static MeasuredLatentOnly serializableInstance(){  return new MeasuredLatentOnly();}  }
class C{  @Override public boolean supportsIntegrityEnhancementFacility(){  debugCodeCall("supportsIntegrityEnhancementFacility");  return true;}  }
class C{  public void interpolatePathDataNode(PathDataNode nodeFrom,PathDataNode nodeTo,float fraction){  for (int i=0; i < nodeFrom.mParams.length; i++) {    mParams[i]=nodeFrom.mParams[i] * (1 - fraction) + nodeTo.mParams[i] * fraction;  }}  }
class C{  public final Mat22 abs(){  return new Mat22(MathUtils.abs(ex.x),MathUtils.abs(ey.x),MathUtils.abs(ex.y),MathUtils.abs(ey.y));}  }
class C{  public static boolean matchesXMLString(char[] buf,int off,int end,String str){  int len=str.length();  if (len != end - off)   return false;  for (int i=0; i < len; off+=1, i++) {    if (buf[off] != str.charAt(i))     return false;  }  return true;}  }
class C{  public BufferedImage toImage(Drawing drawing,java.util.List<Figure> figures,double scaleFactor,boolean clipToFigures){  if (drawing.getChildCount() == 0) {    return new BufferedImage(1,1,BufferedImage.TYPE_INT_ARGB);  }  Rectangle2D.Double drawBounds=null;  for (  Figure f : figures) {    if (drawBounds == null) {      drawBounds=f.getDrawingArea();    } else {      drawBounds.add(f.getDrawingArea());    }  }  if (clipToFigures) {    AffineTransform transform=new AffineTransform();    transform.translate(-drawBounds.x * scaleFactor,-drawBounds.y * scaleFactor);    transform.scale(scaleFactor,scaleFactor);    return toImage(drawing,figures,transform,new Dimension((int)(drawBounds.width * scaleFactor),(int)(drawBounds.height * scaleFactor)));  } else {    AffineTransform transform=new AffineTransform();    if (drawBounds.x < 0) {      transform.translate(-drawBounds.x * scaleFactor,0);    }    if (drawBounds.y < 0) {      transform.translate(0,-drawBounds.y * scaleFactor);    }    transform.scale(scaleFactor,scaleFactor);    return toImage(drawing,figures,transform,new Dimension((int)((Math.max(0,drawBounds.x) + drawBounds.width) * scaleFactor),(int)((Math.max(0,drawBounds.y) + drawBounds.height) * scaleFactor)));  }}  }
class C{  public static JSONArray array(Boolean... values){  if (values == null) {    throw new NullPointerException("values is null");  }  JSONArray array=new JSONArray();  for (  boolean value : values) {    array.add(value);  }  return array;}  }
class C{  private static int checkPartPosition(PduPart part){  assert (null != part);  if ((null == mTypeParam) && (null == mStartParam)) {    return THE_LAST_PART;  }  if (null != mStartParam) {    byte[] contentId=part.getContentId();    if (null != contentId) {      if (true == Arrays.equals(mStartParam,contentId)) {        return THE_FIRST_PART;      }    }  }  if (null != mTypeParam) {    byte[] contentType=part.getContentType();    if (null != contentType) {      if (true == Arrays.equals(mTypeParam,contentType)) {        return THE_FIRST_PART;      }    }  }  return THE_LAST_PART;}  }
class C{  public QueueEvent offer(byte[] data,long timeout) throws KeeperException, InterruptedException {  TimerContext time=stats.time(dir + "_offer");  try {    String watchID=createResponseNode();    Object lock=new Object();    LatchWatcher watcher=new LatchWatcher(lock);    Stat stat=zookeeper.exists(watchID,watcher,true);    createRequestNode(data,watchID);synchronized (lock) {      if (stat != null && watcher.getWatchedEvent() == null) {        watcher.await(timeout);      }    }    byte[] bytes=zookeeper.getData(watchID,null,null,true);    QueueEvent event=new QueueEvent(watchID,bytes,watcher.getWatchedEvent());    zookeeper.delete(watchID,-1,true);    return event;  }  finally {    time.stop();  }}  }
class C{  public static String extractUriFromSipHeader(String header){  if (header != null) {    Matcher matcher=PATTERN_EXTRACT_URI.matcher(header);    if (matcher.find()) {      return matcher.group(1);    }  }  return header;}  }
class C{  @Override public void prepare(String changedSelector){  AgentAppFrame.SelectionState selState=frame.getSelection();  CSP csp=null;  CSPView view=getCSPView();switch (selState.getIndex(MapColoringFrame.ENV_SEL)) {case 0:    csp=new MapCSP();  break;case 1:csp=new MapCSP();csp.setDomain(MapCSP.NSW,new Domain(new Object[]{MapCSP.BLUE}));break;case 2:csp=new MapCSP();csp.setDomain(MapCSP.WA,new Domain(new Object[]{MapCSP.RED}));break;}view.clearMappings();view.setPositionMapping(MapCSP.WA,5,10);view.setPositionMapping(MapCSP.NT,15,3);view.setPositionMapping(MapCSP.SA,20,15);view.setPositionMapping(MapCSP.Q,30,5);view.setPositionMapping(MapCSP.NSW,35,15);view.setPositionMapping(MapCSP.V,30,23);view.setPositionMapping(MapCSP.T,33,30);view.setColorMapping(MapCSP.RED,Color.RED);view.setColorMapping(MapCSP.GREEN,Color.GREEN);view.setColorMapping(MapCSP.BLUE,Color.BLUE);actions.clear();actionCount=0;env.init(csp);view.setEnvironment(env);}  }
class C{  public static Video2 randomVideo2(){  String id=UUID.randomUUID().toString();  String title="Video-" + id;  String category="Category-" + UUID.randomUUID().toString();  String url="http://coursera.org/some/video-" + id;  long duration=60 * (int)Math.rint(Math.random() * 60) * 1000;  Video2 v=new Video2(title,url,duration);  v.setCategory(category);  return v;}  }
class C{  public JettySolrRunner startJettySolrRunner(JettySolrRunner jetty) throws Exception {  jetty.start(false);  jettys.add(jetty);  return jetty;}  }
class C{  public int awaitAdvance(int phase){  final Phaser root=this.root;  long s=(root == this) ? state : reconcileState();  int p=(int)(s >>> PHASE_SHIFT);  if (phase < 0)   return phase;  if (p == phase)   return root.internalAwaitAdvance(phase,null);  return p;}  }
class C{  public void testFloatValueNeg(){  String a="-1238096483923847.6356789029578E+21";  BigDecimal aNumber=new BigDecimal(a);  float result=-1.2380965E36F;  assertTrue("incorrect value",aNumber.floatValue() == result);}  }
class C{  public static int modInverse(int a,int mod){  return BigInteger.valueOf(a).modInverse(BigInteger.valueOf(mod)).intValue();}  }
class C{  public static void write(HttpServletResponse rsp,Map<String,?> jsonObject) throws IOException {  checkNotNull(jsonObject);  rsp.setContentType(JSON_UTF_8.toString());  rsp.setHeader(X_CONTENT_TYPE_OPTIONS,"nosniff");  rsp.setHeader(CONTENT_DISPOSITION,"attachment");  try (Writer writer=rsp.getWriter()){    writer.write(JSON_SAFETY_PREFIX);    writeJSONString(jsonObject,writer);  } }  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public MaterialCollapsibleBody(){  super(Document.get().createDivElement(),"collapsible-body");}  }
class C{  public static byte toByteFromNibbles(byte[] nibbles,int start){  return toByte(nibbles[start],nibbles[start + 1]);}  }
class C{  private synchronized void addRoute(SIPResponse sipResponse){  try {    if (sipStack.isLoggingEnabled()) {      sipStack.getStackLogger().logDebug("setContact: dialogState: " + this + "state = "+ this.getState());    }    if (sipResponse.getStatusCode() == 100) {      return;    } else     if (this.dialogState == TERMINATED_STATE) {      return;    } else     if (this.dialogState == CONFIRMED_STATE) {      if (sipResponse.getStatusCode() / 100 == 2 && !this.isServer()) {        ContactList contactList=sipResponse.getContactHeaders();        if (contactList != null && SIPRequest.isTargetRefresh(sipResponse.getCSeq().getMethod())) {          this.setRemoteTarget((ContactHeader)contactList.getFirst());        }      }      return;    }    if (!isServer()) {      if (this.getState() != DialogState.CONFIRMED && this.getState() != DialogState.TERMINATED) {        RecordRouteList rrlist=sipResponse.getRecordRouteHeaders();        if (rrlist != null) {          this.addRoute(rrlist);        } else {          this.routeList=new RouteList();        }      }      ContactList contactList=sipResponse.getContactHeaders();      if (contactList != null) {        this.setRemoteTarget((ContactHeader)contactList.getFirst());      }    }  }  finally {    if (sipStack.isLoggingEnabled()) {      sipStack.getStackLogger().logStackTrace();    }  }}  }
class C{  protected void initBaseIndex(Table newTable,int id,String name,IndexColumn[] newIndexColumns,IndexType newIndexType){  initSchemaObjectBase(newTable.getSchema(),id,name,Trace.INDEX);  this.indexType=newIndexType;  this.table=newTable;  if (newIndexColumns != null) {    this.indexColumns=newIndexColumns;    columns=new Column[newIndexColumns.length];    int len=columns.length;    columnIds=new int[len];    for (int i=0; i < len; i++) {      Column col=newIndexColumns[i].column;      columns[i]=col;      columnIds[i]=col.getColumnId();    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 12:03:05.697 -0400",hash_original_method="9DC378024E4C96429FFA7297F284AF38",hash_generated_method="351E8DB1FA817378266CFF6D636867DD") private BakedBezierInterpolator(){  super();}  }
class C{  public boolean containsValue(Object value){  return contains(value);}  }
class C{  @Deprecated DBProcessedAudit(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:39.378 -0500",hash_original_method="BDE6DE984C100A6F17C2FEFAD669078A",hash_generated_method="3A7CFAD59FE93F9154FF15BC28A864B1") protected void onReceiveResult(int resultCode,Bundle resultData){}  }
class C{  private boolean isRightTop(){  return (m_from.x + m_from.width <= m_to.x && m_from.y + m_from.height <= m_to.y);}  }
class C{  public char next(char c) throws JSONException {  char n=next();  if (n != c) {    throw syntaxError("Expected '" + c + "' and instead saw '"+ n+ "'");  }  return n;}  }
class C{  protected void validate(){  if (mSourceUri == null) {    throw new BuilderException("Source must be set!");  }  if (UriUtil.isLocalResourceUri(mSourceUri)) {    if (!mSourceUri.isAbsolute()) {      throw new BuilderException("Resource URI path must be absolute.");    }    if (mSourceUri.getPath().isEmpty()) {      throw new BuilderException("Resource URI must not be empty");    }    try {      Integer.parseInt(mSourceUri.getPath().substring(1));    } catch (    NumberFormatException ignored) {      throw new BuilderException("Resource URI path must be a resource id.");    }  }  if (UriUtil.isLocalAssetUri(mSourceUri) && !mSourceUri.isAbsolute()) {    throw new BuilderException("Asset URI path must be absolute.");  }}  }
class C{  public void testGetElementById2() throws Throwable {  Document doc;  Element element;  doc=(Document)load("staffNS",builder);  element=doc.getElementById("Cancun");  assertNull("throw_Null",element);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:22.811 -0500",hash_original_method="4C4E4F1C2555347B7DA11DAA134BF488",hash_generated_method="98812E5EC8FF51B6B8FADC4EC4D13DA0") private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  Node<E> h=null, t=null;  Object item;  while ((item=s.readObject()) != null) {    @SuppressWarnings("unchecked") Node<E> newNode=new Node<E>((E)item);    if (h == null)     h=t=newNode; else {      t.lazySetNext(newNode);      t=newNode;    }  }  if (h == null)   h=t=new Node<E>(null);  head=h;  tail=t;}  }
class C{  public DependencyFigure(){  set(STROKE_COLOR,new Color(0x000099));  set(STROKE_WIDTH,1d);  set(END_DECORATION,new ArrowTip());  setAttributeEnabled(END_DECORATION,false);  setAttributeEnabled(START_DECORATION,false);  setAttributeEnabled(STROKE_DASHES,false);  setAttributeEnabled(FONT_ITALIC,false);  setAttributeEnabled(FONT_UNDERLINE,false);}  }
class C{  public boolean useTrailingSlashMatch(){  return this.useTrailingSlashMatch;}  }
class C{  public int matches(String word){  return name.toLowerCase().indexOf(word.toLowerCase()) + 1;}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == NamedElement.class) {switch (baseOperationID) {case N4JSPackage.NAMED_ELEMENT___GET_NAME:      return N4JSPackage.N4_METHOD_DECLARATION___GET_NAME;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == N4MemberDeclaration.class) {switch (baseOperationID) {case N4JSPackage.N4_MEMBER_DECLARATION___GET_DEFINED_TYPE_ELEMENT:  return N4JSPackage.N4_METHOD_DECLARATION___GET_DEFINED_TYPE_ELEMENT;case N4JSPackage.N4_MEMBER_DECLARATION___IS_STATIC:return N4JSPackage.N4_METHOD_DECLARATION___IS_STATIC;case N4JSPackage.N4_MEMBER_DECLARATION___IS_CONSTRUCTOR:return N4JSPackage.N4_METHOD_DECLARATION___IS_CONSTRUCTOR;case N4JSPackage.N4_MEMBER_DECLARATION___IS_CALLABLE_CONSTRUCTOR:return N4JSPackage.N4_METHOD_DECLARATION___IS_CALLABLE_CONSTRUCTOR;case N4JSPackage.N4_MEMBER_DECLARATION___GET_NAME:return N4JSPackage.N4_METHOD_DECLARATION___GET_NAME;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == VariableEnvironmentElement.class) {switch (baseOperationID) {case N4JSPackage.VARIABLE_ENVIRONMENT_ELEMENT___APPLIES_ONLY_TO_BLOCK_SCOPED_ELEMENTS:return N4JSPackage.N4_METHOD_DECLARATION___APPLIES_ONLY_TO_BLOCK_SCOPED_ELEMENTS;default :return -1;}}if (baseClass == ThisArgProvider.class) {switch (baseOperationID) {default :return -1;}}if (baseClass == FunctionOrFieldAccessor.class) {switch (baseOperationID) {case N4JSPackage.FUNCTION_OR_FIELD_ACCESSOR___GET_NAME:return N4JSPackage.N4_METHOD_DECLARATION___GET_NAME;case N4JSPackage.FUNCTION_OR_FIELD_ACCESSOR___GET_LOCAL_ARGUMENTS_VARIABLE:return N4JSPackage.N4_METHOD_DECLARATION___GET_LOCAL_ARGUMENTS_VARIABLE;case N4JSPackage.FUNCTION_OR_FIELD_ACCESSOR___IS_ASYNC:return N4JSPackage.N4_METHOD_DECLARATION___IS_ASYNC;case N4JSPackage.FUNCTION_OR_FIELD_ACCESSOR___GET_DEFINED_FUNCTION_OR_ACCESSOR:return N4JSPackage.N4_METHOD_DECLARATION___GET_DEFINED_FUNCTION_OR_ACCESSOR;default :return -1;}}if (baseClass == TypeDefiningElement.class) {switch (baseOperationID) {default :return -1;}}if (baseClass == FunctionDefinition.class) {switch (baseOperationID) {case N4JSPackage.FUNCTION_DEFINITION___IS_ASYNC:return N4JSPackage.N4_METHOD_DECLARATION___IS_ASYNC;default :return -1;}}if (baseClass == GenericDeclaration.class) {switch (baseOperationID) {default :return -1;}}if (baseClass == TypedElement.class) {switch (baseOperationID) {default :return -1;}}if (baseClass == PropertyNameOwner.class) {switch (baseOperationID) {case N4JSPackage.PROPERTY_NAME_OWNER___GET_NAME:return N4JSPackage.N4_METHOD_DECLARATION___GET_NAME;case N4JSPackage.PROPERTY_NAME_OWNER___IS_VALID_NAME:return N4JSPackage.N4_METHOD_DECLARATION___IS_VALID_NAME;default :return -1;}}if (baseClass == MethodDeclaration.class) {switch (baseOperationID) {case N4JSPackage.METHOD_DECLARATION___EXISTS_EXPLICIT_SUPER_CALL:return N4JSPackage.N4_METHOD_DECLARATION___EXISTS_EXPLICIT_SUPER_CALL;case N4JSPackage.METHOD_DECLARATION___GET_DEFINED_TYPE_ELEMENT:return N4JSPackage.N4_METHOD_DECLARATION___GET_DEFINED_TYPE_ELEMENT;case N4JSPackage.METHOD_DECLARATION___IS_STATIC:return N4JSPackage.N4_METHOD_DECLARATION___IS_STATIC;default :return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public void stateChanged(ChangeEvent e){  if (e == null) {    throw new NullPointerException();  }  Object newModelValue=model.getValue();  firePropertyChange(ACCESSIBLE_VALUE_PROPERTY,oldModelValue,newModelValue);  firePropertyChange(ACCESSIBLE_TEXT_PROPERTY,null,0);  oldModelValue=newModelValue;}  }
class C{  public SignalServiceDataMessage(long timestamp,SignalServiceGroup group,List<SignalServiceAttachment> attachments,String body){  this(timestamp,group,attachments,body,0);}  }
class C{  static String add_escapes(String str){  StringBuffer retval=new StringBuffer();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  @Override public GuacamoleWriter acquireWriter(){  writerLock.lock();  return getSocket().getWriter();}  }
class C{  public static UUID randomUUID(){  byte[] data=new byte[16];synchronized (UUID.class) {    if (rng == null) {      rng=new SecureRandom();    }  }  rng.nextBytes(data);  return makeUuid(data,4);}  }
class C{  public static String bytesToBase64(byte[] bytes){  if (bytes == null) {    return null;  }  return Base64.encodeToString(bytes,Base64.NO_WRAP);}  }
class C{  protected IncomingFileTransfer createIncomingFileTransfer(FileTransferRequest request){  if (request == null) {    throw new NullPointerException("RecieveRequest cannot be null");  }  IncomingFileTransfer transfer=new IncomingFileTransfer(request,fileTransferNegotiator);  transfer.setFileInfo(request.getFileName(),request.getFileSize());  return transfer;}  }
class C{  public Executor wd(File wd){  this.wd=wd;  return this;}  }
class C{  private void addHyperlinkToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so,true);}  }
class C{  public KMLParserContext(XMLEventReader eventReader,String defaultNamespace){  super(eventReader,defaultNamespace != null ? defaultNamespace : KMLConstants.KML_NAMESPACE);}  }
class C{  public void test_subList_addAll(){  List mainList=new ArrayList();  Object[] mainObjects={"a","b","c"};  mainList.addAll(Arrays.asList(mainObjects));  List subList=mainList.subList(1,2);  assertFalse("subList should not contain \"a\"",subList.contains("a"));  assertFalse("subList should not contain \"c\"",subList.contains("c"));  assertTrue("subList should contain \"b\"",subList.contains("b"));  Object[] subObjects={"one","two","three"};  subList.addAll(Arrays.asList(subObjects));  assertFalse("subList should not contain \"a\"",subList.contains("a"));  assertFalse("subList should not contain \"c\"",subList.contains("c"));  Object[] expected={"b","one","two","three"};  ListIterator iter=subList.listIterator();  for (int i=0; i < expected.length; i++) {    assertTrue("subList should contain " + expected[i],subList.contains(expected[i]));    assertTrue("should be more elements",iter.hasNext());    assertEquals("element in incorrect position",expected[i],iter.next());  }}  }
class C{  public GrammarException(String message){  super(message);}  }
class C{  @Override public boolean supportsSubqueriesInQuantifieds(){  debugCodeCall("supportsSubqueriesInQuantifieds");  return true;}  }
class C{  public void addGenre(MediaGenres newValue){  if (!genresForAccess.contains(newValue)) {    genresForAccess.add(newValue);    if (!genres.contains(newValue.name())) {      genres.add(newValue.name());    }    firePropertyChange(GENRE,null,newValue);    firePropertyChange(GENRES_AS_STRING,null,newValue);  }}  }
class C{  public DoubleArraySpliterator(double[] array,int origin,int fence,int additionalCharacteristics){  this.array=array;  this.index=origin;  this.fence=fence;  this.characteristics=additionalCharacteristics | Spliterator.SIZED | Spliterator.SUBSIZED;}  }
class C{  @Override protected Button createButton(Composite parent,int id,String label,boolean defaultButton){  return super.createButton(parent,id,label,false);}  }
class C{  protected String rebuildSchemeSpecificPart(){  StringBuffer buffer=new StringBuffer();  if (opaque == false && (host != null || port != -1)) {    buffer.append(AUTHORITY_MARKER);    if (userInfo != null) {      buffer.append(getRawUserInfo() + USERINFO_SEPARATOR);    }    if (host != null) {      buffer.append(getHost());    }    if (port != -1) {      buffer.append(PORT_SEPARATOR);      buffer.append(getPort());    }  }  if (path != null) {    buffer.append(getRawPath());  }  if (query != null) {    if (querySeparator == SOCKET_QUERY_SEPARATOR) {      buffer.append(querySeparator + getRawQuery().replace(QUERY_SEPARATOR,SOCKET_QUERY_SEPARATOR));    } else {      buffer.append(QUERY_MARKER + getRawQuery());    }  }  return buffer.toString();}  }
class C{  public void endDTD() throws SAXException {  if (DEBUG)   System.out.println("TransformerHandlerImpl#endDTD");  if (null != m_lexicalHandler) {    m_lexicalHandler.endDTD();  }}  }
class C{  public String showPrompt(String message,String defaultValue){  return null;}  }
class C{  public static void showToast(Context context,String message){  Toast.makeText(context,message,Toast.LENGTH_SHORT).show();}  }
class C{  public void back() throws JSONException {  if (this.usePrevious || this.index <= 0) {    throw new JSONException("Stepping back two steps is not supported");  }  this.index-=1;  this.character-=1;  this.usePrevious=true;  this.eof=false;}  }
class C{  public void testReadWholeMessage() throws Exception {  TestAllTypes message=TestUtil.getAllSet();  byte[] rawBytes=message.toByteArray();  assertEquals(rawBytes.length,message.getSerializedSize());  TestAllTypes message2=TestAllTypes.parseFrom(rawBytes);  TestUtil.assertAllFieldsSet(message2);  for (int blockSize=1; blockSize < 256; blockSize*=2) {    message2=TestAllTypes.parseFrom(new SmallBlockInputStream(rawBytes,blockSize));    TestUtil.assertAllFieldsSet(message2);  }}  }
class C{  protected boolean matchesTemplate(Object[] template,Object[] test){  if (template.length != test.length) {    return false;  }  for (int i=0; i < test.length; i++) {    if ((template[i] != null) && (!template[i].equals(test[i]))) {      return false;    }  }  return true;}  }
class C{  private BigInteger squareKaratsuba(){  int half=(mag.length + 1) / 2;  BigInteger xl=getLower(half);  BigInteger xh=getUpper(half);  BigInteger xhs=xh.square();  BigInteger xls=xl.square();  return xhs.shiftLeft(half * 32).add(xl.add(xh).square().subtract(xhs.add(xls))).shiftLeft(half * 32).add(xls);}  }
class C{  public boolean isHighlighted(int row){  return getBoolean(row,VisualItem.HIGHLIGHT);}  }
class C{  public boolean isConsistManager(){  return this.manager != null;}  }
class C{  public void testDivideExpLessZero(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=15;  String b="747233429293018787918347987234564568";  int bScale=10;  String c="1.64770E+10";  int resScale=-5;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_CEILING);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:20.484 -0500",hash_original_method="114E6F44E2106B74A7437814EDE26008",hash_generated_method="3D40D948F7FB759130C5C83ED63862EF") public void addTransaction(SIPServerTransaction serverTransaction) throws IOException {  if (stackLogger.isLoggingEnabled())   stackLogger.logDebug("added transaction " + serverTransaction);  serverTransaction.map();  addTransactionHash(serverTransaction);}  }
class C{  public static boolean isConstructed(){  return _instance != null;}  }
class C{  @Override public void onBackPressed(){}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.DO_STATEMENT;}  }
class C{  public int observedCount(String form){  if (!table.containsKey(form))   return 0;  int result=0;  for (  Integer count : table.get(form).values())   result+=count;  return result;}  }
class C{  Builder addLenient(String line){  int index=line.indexOf(":",1);  if (index != -1) {    return addLenient(line.substring(0,index),line.substring(index + 1));  } else   if (line.startsWith(":")) {    return addLenient("",line.substring(1));  } else {    return addLenient("",line);  }}  }
class C{  public void startShimmerAnimation(){  if (mAnimationStarted) {    return;  }  Animator animator=getShimmerAnimation();  animator.start();  mAnimationStarted=true;}  }
class C{  public void testWriteWholePackedFieldsMessage() throws Exception {  TestPackedTypes message=TestUtil.getPackedSet();  byte[] rawBytes=message.toByteArray();  assertEqualBytes(TestUtil.getGoldenPackedFieldsMessage().toByteArray(),rawBytes);}  }
class C{  public JSONArray(JSONTokener x) throws JSONException {  this();  if (x.nextClean() != '[') {    throw x.syntaxError("A JSONArray text must start with '['");  }  if (x.nextClean() != ']') {    x.back();    for (; ; ) {      if (x.nextClean() == ',') {        x.back();        this.myArrayList.add(JSONObject.NULL);      } else {        x.back();        this.myArrayList.add(x.nextValue());      }switch (x.nextClean()) {case ',':        if (x.nextClean() == ']') {          return;        }      x.back();    break;case ']':  return;default :throw x.syntaxError("Expected a ',' or ']'");}}}}  }
class C{  protected boolean isUseShortClassName(){  return useShortClassName;}  }
class C{  public boolean isDisplayed(){  return true;}  }
class C{  public static String formatQuantity(Long quantity){  if (quantity == null)   return ""; else   return formatQuantity(quantity.doubleValue());}  }
class C{  public static String formatSize(long size){  if (size <= 0)   return "0";  final String[] units=new String[]{"B","KB","MB","GB","TB"};  int digitGroups=(int)(Math.log10(size) / Math.log10(1024));  return new DecimalFormat("#,##0.#").format(size / Math.pow(1024,digitGroups)) + " " + units[digitGroups];}  }
class C{  public byte receiveOneByte(){  Log.d(TAG,"receiveOneByte() entrance");  try {    acquireLock();    mServerSocket.receive(mReceivePacket);    Log.d(TAG,"receive: " + (0 + mReceivePacket.getData()[0]));    return mReceivePacket.getData()[0];  } catch (  IOException e) {    e.printStackTrace();  }  return Byte.MIN_VALUE;}  }
class C{  public void updateNull(int columnIndex) throws SQLException {  checkUpdatable();  getField(columnIndex).setNull();}  }
class C{  public AnimationBuilder onStart(AnimationListener.Start startListener){  viewAnimator.onStart(startListener);  return this;}  }
class C{  public static int clamp(int x,int a,int b){  return (x < a) ? a : (x > b) ? b : x;}  }
class C{  public OperationNotPermittedException(){  super();}  }
class C{  public void testDynDateMissingFacet() throws Exception {  checkSortMissingFacet("dyn_datedv","1900-12-31T23:59:59.999Z","2005-12-31T23:59:59.999Z");}  }
class C{  public Script createScript(String scriptName,Binding binding) throws ResourceException, ScriptException {  return InvokerHelper.createScript(loadScriptByName(scriptName),binding);}  }
class C{  @Override public void run(){  amIActive=true;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  DataInputStream in=null;  BufferedReader br=null;  try {    String inputFilesString=null;    String grassFile=null;    String whiteboxHeaderFile=null;    int i=0;    int row, col, rows, cols;    String[] imageFiles;    int numImages=0;    int progress=0;    double cellsize=0;    double north=0;    double east=0;    double west=0;    double south=0;    double arcNoData=-9999;    double whiteboxNoData=-32768d;    double z=0;    String delimiter=" ";    if (args.length <= 0) {      showFeedback("Plugin parameters have not been set.");      return;    }    inputFilesString=args[0];    if ((inputFilesString == null)) {      showFeedback("One or more of the input parameters have not been set properly.");      return;    }    imageFiles=inputFilesString.split(";");    numImages=imageFiles.length;    for (i=0; i < numImages; i++) {      if (numImages > 1) {        progress=(int)(100f * i / (numImages - 1));        updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      }      grassFile=imageFiles[i];      if (!((new File(grassFile)).exists())) {        showFeedback("GRASS raster file does not exist.");        return;      }      if (grassFile.lastIndexOf(".") >= 0) {        String extension=grassFile.substring(grassFile.lastIndexOf("."));        whiteboxHeaderFile=grassFile.replace(extension,".dep");      } else {        whiteboxHeaderFile=grassFile + ".dep";      }      (new File(whiteboxHeaderFile)).delete();      (new File(whiteboxHeaderFile.replace(".dep",".tas"))).delete();      FileInputStream fstream=new FileInputStream(grassFile);      rows=0;      cols=0;      in=new DataInputStream(fstream);      br=new BufferedReader(new InputStreamReader(in));      if (grassFile != null) {        String line;        String[] str;        while ((line=br.readLine()) != null) {          str=line.split(delimiter);          if (str.length <= 1) {            delimiter="\t";            str=line.split(delimiter);            if (str.length <= 1) {              delimiter=" ";              str=line.split(delimiter);              if (str.length <= 1) {                delimiter=",";                str=line.split(delimiter);              }            }          }          if (str[0].toLowerCase().contains("north")) {            north=Double.parseDouble(str[str.length - 1]);          } else           if (str[0].toLowerCase().contains("south")) {            south=Double.parseDouble(str[str.length - 1]);          } else           if (str[0].toLowerCase().contains("east")) {            east=Double.parseDouble(str[str.length - 1]);          } else           if (str[0].toLowerCase().contains("west")) {            west=Double.parseDouble(str[str.length - 1]);          } else           if (str[0].toLowerCase().contains("rows")) {            rows=Integer.parseInt(str[str.length - 1]);          } else           if (str[0].toLowerCase().contains("cols")) {            cols=Integer.parseInt(str[str.length - 1]);          } else           if (str[0].toLowerCase().contains("nodata")) {            arcNoData=Double.parseDouble(str[str.length - 1]);          } else {            break;          }        }        fw=new FileWriter(whiteboxHeaderFile,false);        bw=new BufferedWriter(fw);        out=new PrintWriter(bw,true);        str1="Min:\t" + Double.toString(Integer.MAX_VALUE);        out.println(str1);        str1="Max:\t" + Double.toString(Integer.MIN_VALUE);        out.println(str1);        str1="North:\t" + Double.toString(north);        out.println(str1);        str1="South:\t" + Double.toString(south);        out.println(str1);        str1="East:\t" + Double.toString(east);        out.println(str1);        str1="West:\t" + Double.toString(west);        out.println(str1);        str1="Cols:\t" + Integer.toString(cols);        out.println(str1);        str1="Rows:\t" + Integer.toString(rows);        out.println(str1);        str1="Data Type:\t" + "float";        out.println(str1);        str1="Z Units:\t" + "not specified";        out.println(str1);        str1="XY Units:\t" + "not specified";        out.println(str1);        str1="Projection:\t" + "not specified";        out.println(str1);        str1="Data Scale:\tcontinuous";        out.println(str1);        str1="Preferred Palette:\t" + "spectrum.pal";        out.println(str1);        str1="NoData:\t" + whiteboxNoData;        out.println(str1);        if (java.nio.ByteOrder.nativeOrder() == java.nio.ByteOrder.LITTLE_ENDIAN) {          str1="Byte Order:\t" + "LITTLE_ENDIAN";        } else {          str1="Byte Order:\t" + "BIG_ENDIAN";        }        out.println(str1);        WhiteboxRaster wbr=new WhiteboxRaster(whiteboxHeaderFile,"rw");        wbr.reinitialize(whiteboxNoData);        delimiter=" ";        row=0;        col=0;        while ((line=br.readLine()) != null) {          str=line.split(delimiter);          if (str.length <= 1) {            delimiter="\t";            str=line.split(delimiter);            if (str.length <= 1) {              delimiter=" ";              str=line.split(delimiter);              if (str.length <= 1) {                delimiter=",";                str=line.split(delimiter);              }            }          }          if (str[0].toLowerCase().contains("north")) {          } else           if (str[0].toLowerCase().contains("south")) {          } else           if (str[0].toLowerCase().contains("east")) {          } else           if (str[0].toLowerCase().contains("west")) {          } else           if (str[0].toLowerCase().contains("rows")) {          } else           if (str[0].toLowerCase().contains("cols")) {          } else           if (str[0].toLowerCase().contains("nodata")) {          } else {            for (i=0; i < str.length; i++) {              if (StringUtilities.isNumeric(str[i])) {                z=Double.parseDouble(str[i]);                if (z != arcNoData) {                  wbr.setValue(row,col,z);                } else {                  wbr.setValue(row,col,whiteboxNoData);                }              } else {                wbr.setValue(row,col,whiteboxNoData);              }              col++;              if (col == cols) {                col=0;                row++;                progress=(int)(100f * row / (rows - 1));                updateProgress(progress);              }            }          }        }        in.close();        br.close();        wbr.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");        wbr.addMetadataEntry("Created on " + new Date());        wbr.flush();        wbr.findMinAndMaxVals();        wbr.close();        returnData(whiteboxHeaderFile);      }    }  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    if (out != null || bw != null) {      out.flush();      out.close();    }    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public SendMessageResult sendMessage(String queueUrl,String messageBody){  SendMessageRequest sendMessageRequest=new SendMessageRequest(queueUrl,messageBody);  return sendMessage(sendMessageRequest);}  }
class C{  public byte[] unwrap(byte[] incoming,int start,int len) throws SaslException {  if (!completed) {    throw new IllegalStateException("DIGEST-MD5 authentication not completed");  }  if (secCtx == null) {    throw new IllegalStateException("Neither integrity nor privacy was negotiated");  }  return (secCtx.unwrap(incoming,start,len));}  }
class C{  private void uninstallListeners(){  if (window != null) {    window.removeWindowListener(windowListener);    window.removePropertyChangeListener(propertyChangeListener);  }}  }
class C{  public DoubleLinkedList<IMove> validMoves(){  DoubleLinkedList<IMove> list=new DoubleLinkedList<IMove>(order);  for (int i=0; i < compMoves.length; i++) {    int from=compMoves[i][0];    int over=compMoves[i][1];    int to=compMoves[i][2];    if (filled[from] && filled[over] && !filled[to]) {      list.insert(new JumpMove(from,over,to));    }  }  return list;}  }
class C{  protected JSRInlinerAdapter(final int api,final MethodVisitor mv,final int access,final String name,final String desc,final String signature,final String[] exceptions){  super(api,access,name,desc,signature,exceptions);  this.mv=mv;}  }
class C{  public static void touch(SourceFile... sourceFiles){  for (int i=0; i < sourceFiles.length; i++) {    sourceFiles[i].touch();  }}  }
class C{  public boolean realmEquals(byte[] realm){  return (realm == null) ? (this.realm == null) : Arrays.equals(realm,this.realm);}  }
class C{  @Override public void processIncoming(DistributionManager dm,String adviseePath,boolean removeProfile,boolean exchangeProfiles,final List<Profile> replyProfiles){  try {    Assert.assertTrue(adviseePath != null,"adviseePath was null");    LocalRegion lclRgn;    int oldLevel=LocalRegion.setThreadInitLevelRequirement(LocalRegion.ANY_INIT);    try {      lclRgn=LocalRegion.getRegionFromPath(dm.getSystem(),adviseePath);    }  finally {      LocalRegion.setThreadInitLevelRequirement(oldLevel);    }    if (lclRgn instanceof CacheDistributionAdvisee) {      if (lclRgn.isUsedForPartitionedRegionBucket()) {        if (!((BucketRegion)lclRgn).isPartitionedRegionOpen()) {          return;        }      }      handleCacheDistributionAdvisee((CacheDistributionAdvisee)lclRgn,adviseePath,removeProfile,exchangeProfiles,true,replyProfiles);    } else {      if (lclRgn == null) {        handleCacheDistributionAdvisee(PartitionedRegionHelper.getProxyBucketRegion(GemFireCacheImpl.getInstance(),adviseePath,false),adviseePath,removeProfile,exchangeProfiles,false,replyProfiles);      } else {        if (logger.isDebugEnabled()) {          logger.debug("While processing UpdateAttributes message, region has local scope: {}",adviseePath);        }      }    }  } catch (  PRLocallyDestroyedException fre) {    if (logger.isDebugEnabled()) {      logger.debug("<Region Locally destroyed> /// {}",this);    }  }catch (  RegionDestroyedException e) {    if (logger.isDebugEnabled()) {      logger.debug("<region destroyed> /// {}",this);    }  }}  }
class C{  public ConfigurationData(){  this(null,new SyncTaskExecutor(),new ConcurrentTaskScheduler(),false,null,new ArrayList<StateMachineListener<S,E>>(),false,null,null,null,null,true,new DefaultStateMachineModelVerifier<S,E>(),null,null);}  }
class C{  public boolean processErrorOrFailure(Response response,Request request){switch (request.getMessageType()) {case Message.CHANNELBIND_REQUEST:    setChannelNumberIsConfirmed(request,false);  break;case Message.CREATEPERMISSION_REQUEST:setChannelBound(request,false);break;default :break;}return false;}  }
class C{  public boolean isPointAboveElevation(Vec4 point,double elevation){  if (point == null)   return false;  return (point.x() * point.x()) / ((this.equatorialRadius + elevation) * (this.equatorialRadius + elevation)) + (point.y() * point.y()) / ((this.polarRadius + elevation) * (this.polarRadius + elevation)) + (point.z() * point.z()) / ((this.equatorialRadius + elevation) * (this.equatorialRadius + elevation)) - 1 > 0;}  }
class C{  protected void sample(String val){  for (int i=0; i < m_parsers.length; ++i) {    if (m_isCandidate[i]) {      m_isCandidate[i]=m_parsers[i].canParse(val);    }  }}  }
class C{  public Matrix4x3f translationRotateScale(Vector3fc translation,Quaternionfc quat,Vector3fc scale){  return translationRotateScale(translation.x(),translation.y(),translation.z(),quat.x(),quat.y(),quat.z(),quat.w(),scale.x(),scale.y(),scale.z());}  }
class C{  public final void testGetQ(){  DSAParameterSpec dps=new DSAParameterSpec(new BigInteger("1"),new BigInteger("2"),new BigInteger("3"));  assertEquals(2,dps.getQ().intValue());}  }
class C{  @DSSource({DSSourceKind.NFC}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:50.219 -0500",hash_original_method="7310D9773CC55767E043FA59CD9561A6",hash_generated_method="167F1A71240323606EF2A3640EEF2806") public byte[] toByteArray(){  return generate(mFlags,mTnf,mType,mId,mPayload);}  }
class C{  public MarketService rateUrl(String url){  this.rateUrl=url;  return this;}  }
class C{  public static ZyGraph buildDnDGraph(final INaviView view,final TypeManager typeManager) throws LoadCancelledException {  final ZyGraph graph=buildGraph(view);  final ZyGraphDragAndDropSupport dndSupport=new ZyGraphDragAndDropSupport(graph,new BaseTypeTransferHandler(typeManager,new DragAndDropSupportWrapper(graph)));  dndSupport.enableDndSupport();  return graph;}  }
class C{  public void ifICmp(final int mode,final Label label){  ifCmp(Type.INT_TYPE,mode,label);}  }
class C{  public static int max(int[] a){  int max=a[0];  for (int i=0; i < a.length; i++) {    if (a[i] > max)     max=a[i];  }  return max;}  }
class C{  protected RegionImpl(){  super();}  }
class C{  @Override public void endpointActivation(final MessageEndpointFactory endpointFactory,final ActivationSpec spec) throws ResourceException {  if (spec == null) {    throw ActiveMQRABundle.BUNDLE.noActivationSpec();  }  if (!configured.getAndSet(true)) {    try {      setup();    } catch (    ActiveMQException e) {      throw new ResourceException("Unable to create activation",e);    }  }  if (ActiveMQResourceAdapter.trace) {    ActiveMQRALogger.LOGGER.trace("endpointActivation(" + endpointFactory + ", "+ spec+ ")");  }  ActiveMQActivation activation=new ActiveMQActivation(this,endpointFactory,(ActiveMQActivationSpec)spec);  activations.put(spec,activation);  activation.start();}  }
class C{  public void init(List<Filter> filters,Filter filter,String[] filterFields){  this.filters=filters;  this.filter=filter;  this.filterFields=filterFields;}  }
class C{  public AlphaTransform(ColorTransform copy){  if (copy == null) {    return;  }  this.addRed=copy.addRed;  this.addGreen=copy.addGreen;  this.addBlue=copy.addBlue;  this.addAlpha=copy.addAlpha;  this.multRed=copy.multRed;  this.multGreen=copy.multGreen;  this.multBlue=copy.multBlue;  this.multAlpha=copy.multAlpha;}  }
class C{  public Seq<C> take(int n){  if (n < 0) {    throw new IllegalArgumentException("n");  }  Itr itr=new Itr();  MutableSeq<C> seq=Seqs.newMutableSeq();  while (itr.hasNext() && itr.cursor < n) {    seq.appendInPlace(itr.next());  }  return seq;}  }
class C{  public JTextArea(Document doc){  this(doc,null,0,0);}  }
class C{  public void writeFileV1(final String filename) throws UncheckedIOException {  new TransitScheduleWriterV1(transformation,this.schedule).write(filename);}  }
class C{  public boolean isOnPieChart(Point screenPoint){  double sqValue=(Math.pow(mCenterX - screenPoint.getX(),2) + Math.pow(mCenterY - screenPoint.getY(),2));  double radiusSquared=mPieChartRadius * mPieChartRadius;  boolean isOnPieChart=sqValue <= radiusSquared;  return isOnPieChart;}  }
class C{  public boolean hasEventListenerNS(String namespaceURI,String type){  if (capturingListeners != null) {    EventListenerList ell=(EventListenerList)capturingListeners.get(type);    if (ell != null) {      if (ell.hasEventListener(namespaceURI)) {        return true;      }    }  }  if (bubblingListeners != null) {    EventListenerList ell=(EventListenerList)capturingListeners.get(type);    if (ell != null) {      return ell.hasEventListener(namespaceURI);    }  }  return false;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static @CheckForNull JavaClassAndMethod findInvocationLeastUpperBound(InvokeInstruction inv,ConstantPoolGen cpg) throws ClassNotFoundException {  return findInvocationLeastUpperBound(inv,cpg,ANY_METHOD);}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  public Builder busyloop(){  return busyloop(true);}  }
class C{  public String indexToString(){  return "Index:      " + index + "\n";}  }
class C{  public static void printSizes(Component c){  System.out.println("minimumSize = " + c.getMinimumSize());  System.out.println("preferredSize = " + c.getPreferredSize());  System.out.println("maximumSize = " + c.getMaximumSize());}  }
class C{  public static long hash64(final byte[] data,int length,int seed){  final long m=0xc6a4a7935bd1e995L;  final int r=47;  long h=(seed & 0xffffffffl) ^ (length * m);  int length8=length / 8;  for (int i=0; i < length8; i++) {    final int i8=i * 8;    long k=((long)data[i8 + 0] & 0xff) + (((long)data[i8 + 1] & 0xff) << 8) + (((long)data[i8 + 2] & 0xff) << 16)+ (((long)data[i8 + 3] & 0xff) << 24)+ (((long)data[i8 + 4] & 0xff) << 32)+ (((long)data[i8 + 5] & 0xff) << 40)+ (((long)data[i8 + 6] & 0xff) << 48)+ (((long)data[i8 + 7] & 0xff) << 56);    k*=m;    k^=k >>> r;    k*=m;    h^=k;    h*=m;  }switch (length % 8) {case 7:    h^=(long)(data[(length & ~7) + 6] & 0xff) << 48;case 6:  h^=(long)(data[(length & ~7) + 5] & 0xff) << 40;case 5:h^=(long)(data[(length & ~7) + 4] & 0xff) << 32;case 4:h^=(long)(data[(length & ~7) + 3] & 0xff) << 24;case 3:h^=(long)(data[(length & ~7) + 2] & 0xff) << 16;case 2:h^=(long)(data[(length & ~7) + 1] & 0xff) << 8;case 1:h^=(long)(data[length & ~7] & 0xff);h*=m;};h^=h >>> r;h*=m;h^=h >>> r;return h;}  }
class C{  public static boolean preTiger(JavaClass jclass){  return jclass.getMajor() < JDK15_MAJOR || (jclass.getMajor() == JDK15_MAJOR && jclass.getMinor() < JDK15_MINOR);}  }
class C{  public String attributeIndexTipText(){  return "Sets which attribute to process. This " + "attribute must be nominal (\"first\" and \"last\" are valid values)";}  }
class C{  public void update(){  stepsDone++;  int newState=(int)(100 * stepsDone / numberOfSteps);  if (newState > 100)   newState=100;  while (newState > percent) {    percent++;    System.out.print('|');  }  if (newState == 100 && !isFinished) {    System.out.println("\r\n");    isFinished=Boolean.TRUE;  }}  }
class C{  public SynchronizedPDUReader(PDUReader pduReader){  this.pduReader=pduReader;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void initializeStyleSet(){  if (styleMap == null) {    styleMap=new HashMap<>();  }  styleMap.clear();}  }
class C{  public int length(){  return this.myArrayList.size();}  }
class C{  public boolean isExpired(){  return expiry != -1L && expiry < System.currentTimeMillis();}  }
class C{  public int pop(){  if (this.i < 0)   throw new InternalError("Cannot pop stack!");  this.i--;  return this.v[this.i + 1];}  }
class C{  public static void println(int priority,String tag,String msg,Throwable tr){  if (mLogNode != null) {    mLogNode.println(priority,tag,msg,tr);  }}  }
class C{  public void testMoveRenameDirectorySourceParentRoot() throws Exception {  IgfsPath dir=new IgfsPath("/" + SUBSUBDIR_NEW.name());  create(igfs,paths(DIR_NEW,SUBDIR_NEW,dir),null);  igfs.rename(dir,SUBSUBDIR_NEW);  checkExist(igfs,igfsSecondary,SUBSUBDIR_NEW);  checkNotExist(igfs,igfsSecondary,dir);}  }
class C{  public int available() throws IOException {  int temp=stream.available();  if ((frameLength != AudioSystem.NOT_SPECIFIED) && ((temp / frameSize) > (frameLength - framePos))) {    return (int)(frameLength - framePos) * frameSize;  } else {    return temp;  }}  }
class C{  public static <K,V>ImmutableListMultimap<K,V> of(K k1,V v1,K k2,V v2,K k3,V v3,K k4,V v4){  ImmutableListMultimap.Builder<K,V> builder=ImmutableListMultimap.builder();  builder.put(k1,v1);  builder.put(k2,v2);  builder.put(k3,v3);  builder.put(k4,v4);  return builder.build();}  }
class C{  public boolean isEuro(){  Object oo=get_Value(COLUMNNAME_IsEuro);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static short[] toShortArray(Float[] array){  short[] result=new short[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i].shortValue();  }  return result;}  }
class C{  public boolean isGrowByContent(){  return growByContent;}  }
class C{  public GeoLong(Double lon) throws IllegalArgumentException {  super(Namespaces.W3C_GEO_NAMESPACE,"long",null,null);  setRequired(true);  if (lon != null) {    setLongitude(lon);    setImmutable(true);  }}  }
class C{  public boolean reverseAccrualIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_REVERSEACCRUAL);  if (m_processMsg != null)   return false;  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_REVERSEACCRUAL);  if (m_processMsg != null)   return false;  return false;}  }
class C{  private void printData(Problem problem,boolean reduced,Population population,PrintWriter writer){  int numberOfVariables=problem.getNumberOfVariables();  int numberOfObjectives=problem.getNumberOfObjectives();  if (reduced) {    numberOfVariables=0;  }  for (  Solution solution : population) {    for (int i=0; i < numberOfVariables; i++) {      if (i > 0) {        writer.print(",");      }      if (solution.getVariable(i) instanceof RealVariable) {        writer.print(EncodingUtils.getReal(solution.getVariable(i)));      } else {        writer.print("?");      }    }    for (int i=0; i < numberOfObjectives; i++) {      if ((i > 0) || (numberOfVariables > 0)) {        writer.print(",");      }      writer.print(solution.getObjective(i));    }    writer.println();  }}  }
class C{  @Override @BeforeMethod void beforeMethod() throws Throwable {  super.beforeMethod();  registry=new LocalServerRegistry();  transport=new LocalTransport(registry);  clientCtx=new SingleThreadContext("test-context",serializer.clone());  server=transport.server();  client=transport.client();  serverCtx.execute(null);  await();  clientCtx.execute(null);  await();}  }
class C{  private void updateBounds(float extendFactor){  PNode parentNode=((PNodeLocator)getLocator()).getNode();  double x=0.0f - (parentNode.getBounds().getWidth() * extendFactor);  double y=0.0f - (parentNode.getBounds().getHeight() * extendFactor);  double width=parentNode.getBounds().getWidth() + 2 * (parentNode.getBounds().getWidth() * extendFactor);  double height=parentNode.getBounds().getHeight() + 2 * (parentNode.getBounds().getHeight() * extendFactor);  this.reset();  append(new Rectangle2D.Float((float)x,(float)y,(float)width,(float)height),false);}  }
class C{  public void write(String str,int off,int len) throws IOException {  if (_byteBuffer == null)   throw new IOException("Writer closed");  final int off_plus_len=off + len;  for (int i=off; i < off_plus_len; ) {    char c=str.charAt(i++);    if (c < 0x80) {      _byteBuffer.put((byte)c);    } else {      write(c);    }  }}  }
class C{  public int typicalIndsProduced(){  return minChildProduction() * sources.length;}  }
class C{  private UnconditionalValueDerefSet duplicateFact(UnconditionalValueDerefSet fact){  UnconditionalValueDerefSet copyOfFact=createFact();  copy(fact,copyOfFact);  fact=copyOfFact;  return fact;}  }
class C{  private void runTasks(IncomingMessageEnvelope envelope){  if (envelope != null) {    PendingEnvelope pendingEnvelope=new PendingEnvelope(envelope);    for (    AsyncTaskWorker worker : sspToTaskWorkerMapping.get(envelope.getSystemStreamPartition())) {      worker.state.insertEnvelope(pendingEnvelope);    }  }  for (  AsyncTaskWorker worker : taskWorkers.values()) {    worker.run();  }}  }
class C{  public static int findMatchingWordIndexNTE(String source,String match){  char[] firstNteChar=getNteChars(match.charAt(0));  if ((firstNteChar != null && Character.isLetter(firstNteChar[0])) || Character.isLetterOrDigit(match.charAt(0))) {    int index=0;    while (index < source.length()) {      index=findNextWordStart(source,index);      if (substringMatchesNte(source,index,match)) {        return index;      }      index=findNextWordEnd(source,index) + 1;    }    return -1;  } else {    for (int index=0; index < (source.length() - match.length()); index++) {      if (substringMatchesNte(source,index,match))       return index;    }    return -1;  }}  }
class C{  boolean canRunInCurrentRunState(boolean periodic){  return isRunningOrShutdown(periodic ? continueExistingPeriodicTasksAfterShutdown : executeExistingDelayedTasksAfterShutdown);}  }
class C{  protected void createSideTextureCoords(ShapeData shapeData){  for (  ExtrudedBoundaryInfo boundary : shapeData) {    boolean applyTextureToThisBoundary=this.hasSideTextures() && boundary.sideTextures != null && boundary.sideTextures.size() == boundary.faceCount;    if (applyTextureToThisBoundary) {      int texCoordSize=boundary.faceCount * 4 * 2;      if (boundary.sideTextureCoords != null && boundary.sideTextureCoords.capacity() >= texCoordSize)       boundary.sideTextureCoords.clear(); else       boundary.sideTextureCoords=Buffers.newDirectFloatBuffer(texCoordSize);      this.fillSideTexCoordBuffer(boundary.capVertices,boundary.baseVertices,boundary.sideTextureCoords);    }  }}  }
class C{  @Override public boolean contains(Object object){  if (object == null) {    return false;  }  for (int i=0; i < size; i++) {    if (object.equals(elements[i])) {      return true;    }  }  return false;}  }
class C{  public String generatePairName(BlockObject source,BlockObject target){  StringBuilder pairName=new StringBuilder();  pairName.append(source.getNativeId());  pairName.append(HDSConstants.UNDERSCORE_OPERATOR);  pairName.append(target.getNativeId());  pairName.append(HDSConstants.UNDERSCORE_OPERATOR);  pairName.append(HDSConstants.SI);  return pairName.toString();}  }
class C{  public void put(int key,int value){  int i=binarySearch(mKeys,0,mSize,key);  if (i >= 0) {    mValues[i]=value;  } else {    i=~i;    if (mSize >= mKeys.length) {      int n=ArrayUtils.idealIntArraySize(mSize + 1);      int[] nkeys=new int[n];      int[] nvalues=new int[n];      System.arraycopy(mKeys,0,nkeys,0,mKeys.length);      System.arraycopy(mValues,0,nvalues,0,mValues.length);      mKeys=nkeys;      mValues=nvalues;    }    if (mSize - i != 0) {      System.arraycopy(mKeys,i,mKeys,i + 1,mSize - i);      System.arraycopy(mValues,i,mValues,i + 1,mSize - i);    }    mKeys[i]=key;    mValues[i]=value;    mSize++;  }}  }
class C{  public void step(final SimState state){  if (shouldUpdate()) {    if (insideDisplay.isShowing() && (getFrame().getExtendedState() & java.awt.Frame.ICONIFIED) == 0) {      insideDisplay.repaint();    } else     if (movieMaker != null) {      insideDisplay.paintToMovie(null);    }    insideDisplay.updateToolTips();  }}  }
class C{  protected void rehash(){  Entry[] oldTable=table;  table=new Entry[oldTable.length * 2 + 1];  for (int i=oldTable.length - 1; i >= 0; i--) {    for (Entry old=oldTable[i]; old != null; ) {      Entry e=old;      old=old.next;      int index=e.hash % table.length;      e.next=table[index];      table[index]=e;    }  }}  }
class C{  private ProjectWizard createDefaultWizard(@Nullable ImportProject dataObject,@NotNull ProjectWizardMode mode){  if (dataObject == null) {    dataObject=dtoFactory.createDto(ImportProject.class).withSource(dtoFactory.createDto(Source.class)).withProject(dtoFactory.createDto(NewProject.class).withGeneratorDescription(dtoFactory.createDto(GeneratorDescription.class)));  }  final ProjectWizard projectWizard=projectWizardFactory.newWizard(dataObject,mode,projectPath);  projectWizard.setUpdateDelegate(this);  projectWizard.addPage(categoriesPage);  if (mode != IMPORT) {    projectWizard.addPage(runnersPage);  }  return projectWizard;}  }
class C{  public static double[] plus(double[]... v){  double[] array=new double[v[0].length];  for (int j=0; j < v.length; j++)   for (int i=0; i < v[j].length; i++)   array[i]+=v[j][i];  return array;}  }
class C{  public TreeLayout(){  super();}  }
class C{  void write(ByteCodeWriter out) throws IOException {  out.write(ConstantPool.CP_DOUBLE);  out.writeDouble(_value);}  }
class C{  private String generateMaskViewName(StorageSystem storage,ExportMask exportMask){  String maskingViewName=exportMask.getMaskName();  CIMInstance maskingViewInstance=maskingViewExists(storage,maskingViewName);  if (maskingViewInstance != null) {    _log.info(String.format("MaskingView '%s' already exists on %s. Going to generate a new name ...",maskingViewName,storage.getNativeGuid()));    int maskingViewNameIndex=0;    String name=maskingViewName;    while (maskingViewInstance != null) {      maskingViewName=String.format("%s_%d",name,++maskingViewNameIndex);      _log.info(String.format("Checking if '%s' already exists on %s",maskingViewName,storage.getNativeGuid()));      _log.info("Trying new MaskingView name: {} ",maskingViewName);      maskingViewInstance=maskingViewExists(storage,maskingViewName);    }    _log.info(String.format("MaskingView will be named '%s'",maskingViewName));    exportMask.setMaskName(maskingViewName);    _dbClient.persistObject(exportMask);  }  return maskingViewName;}  }
class C{  public <P1,P2>V putIfAbsentGetIfPresent(K key,Function2<K,V,K> keyTransformer,Function3<P1,P2,K,V> factory,P1 param1,P2 param2){  int hash=this.hash(key);  AtomicReferenceArray currentArray=this.table;  V newValue=null;  boolean createdValue=false;  while (true) {    int length=currentArray.length();    int index=ConcurrentHashMap.indexFor(hash,length);    Object o=currentArray.get(index);    if (o == RESIZED || o == RESIZING) {      currentArray=this.helpWithResizeWhileCurrentIndex(currentArray,index);    } else {      Entry<K,V> e=(Entry<K,V>)o;      while (e != null) {        Object candidate=e.getKey();        if (candidate.equals(key)) {          return e.getValue();        }        e=e.getNext();      }      if (!createdValue) {        createdValue=true;        newValue=factory.value(param1,param2,key);        if (newValue == null) {          return null;        }        key=keyTransformer.value(key,newValue);      }      Entry<K,V> newEntry=new Entry<>(key,newValue,(Entry<K,V>)o);      if (currentArray.compareAndSet(index,o,newEntry)) {        this.incrementSizeAndPossiblyResize(currentArray,length,o);        return null;      }    }  }}  }
class C{  public List<alloperators> queryDeep(String where,String... selectionArg){  Cursor cursor=db.rawQuery(getSelectDeep() + where,selectionArg);  return loadDeepAllAndCloseCursor(cursor);}  }
class C{  public void ifNonNull(final Label label){  mv.visitJumpInsn(Opcodes.IFNONNULL,label);}  }
class C{  private void updateRole(MRole role){  addLog(0,null,null,role.getName() + ": " + role.updateAccessRecords());}  }
class C{  public SpanishLightStemFilterFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  protected ShaderVar addUniform(String name,DataType dataType){  ShaderVar v=getInstanceForDataType(name,dataType);  v.isGlobal(true);  mUniforms.put(v.getName(),v);  return v;}  }
class C{  public boolean onUpdateCompositorAnimations(long time,boolean jumpToEnd){  if (!jumpToEnd)   updateScrollOffset(time);  boolean finished=true;  if (mTabAnimations != null) {    if (jumpToEnd) {      finished=mTabAnimations.finished();    } else {      finished=mTabAnimations.update(time);    }    finishAnimationsIfDone(time,jumpToEnd);  }  if (jumpToEnd)   forceScrollStop();  return finished;}  }
class C{  public static ArrayList partitionIntoParetoFront(Individual[] inds,ArrayList front,ArrayList nonFront){  if (front == null)   front=new ArrayList();  front.add(inds[0]);  for (int i=1; i < inds.length; i++) {    Individual ind=(Individual)(inds[i]);    boolean noOneWasBetter=true;    int frontSize=front.size();    for (int j=0; j < frontSize; j++) {      Individual frontmember=(Individual)(front.get(j));      if (((MultiObjectiveFitness)(frontmember.fitness)).paretoDominates((MultiObjectiveFitness)(ind.fitness))) {        if (nonFront != null)         nonFront.add(ind);        noOneWasBetter=false;        break;      } else       if (((MultiObjectiveFitness)(ind.fitness)).paretoDominates((MultiObjectiveFitness)(frontmember.fitness))) {        yank(j,front);        frontSize--;        j--;        if (nonFront != null)         nonFront.add(frontmember);      }    }    if (noOneWasBetter)     front.add(ind);  }  return front;}  }
class C{  public void reset(){  LOG.info("Resetting the JoshuaConfiguration to its defaults ...");  LOG.info("\n\tResetting the StatefullFF global state index ...");  LOG.info("\n\t...done");  StatefulFF.resetGlobalStateIndex();  tms=new ArrayList<>();  weights_file="";  default_non_terminal="[X]";  oovList=new ArrayList<>();  oovList.add(new OOVItem(default_non_terminal,1.0f));  goal_symbol="[GOAL]";  amortized_sorting=true;  constrain_parse=false;  use_pos_labels=false;  true_oovs_only=false;  filter_grammar=false;  pop_limit=100;  maxlen=200;  use_unique_nbest=false;  include_align_index=false;  topN=1;  outputFormat="%i ||| %s ||| %f ||| %c";  num_parallel_decoders=1;  mark_oovs=false;  parse=false;  features=new ArrayList<>();  weights=new ArrayList<>();  server_port=0;  reordering_limit=8;  num_translation_options=20;  LOG.info("...done");}  }
class C{  protected static int doThinning(List<Object> ipts){  int size=ipts.size();  int totalSize=0;  for (int j=0; j < size; j++) {    CoordFloatString cfs=(CoordFloatString)ipts.get(j);    int cfscnt=cfs.tcount;    int cfssz=cfs.tsize;    double[] cfsvals=cfs.vals;    int npts=0;    boolean rev=(cfscnt < 0);    if (rev) {      cfscnt=-cfscnt;    }    double[] llpts=new double[cfscnt << 1];    for (int i=0; i < cfscnt; i++) {      llpts[npts++]=cfsvals[i * cfssz];      llpts[npts++]=cfsvals[i * cfssz + 1];    }    FanCompress.FloatCompress fan=new FanCompress.FloatCompress(llpts);    FanCompress.fan_compress(fan,fan_eps);    cfs.vals=fan.getArray();    cfs.tcount=cfs.vals.length >>> 1;    cfs.tsize=2;    totalSize+=cfs.tcount;    if (rev) {      cfs.tcount*=-1;    }  }  return totalSize;}  }
class C{  public int lineCount(){  if (textLength == 0) {    return 0;  }  return finalNL ? nlOffsets.length - 2 : nlOffsets.length - 1;}  }
class C{  public void testIndex(){  Diagnostic.setLogStream();  doTest(RANGE,NUM_ELEMENTS);}  }
class C{  public static MessageDigest newDigest(){  try {    return MessageDigest.getInstance("SHA-256");  } catch (  NoSuchAlgorithmException e) {    throw new RuntimeException(e);  }}  }
class C{  public FlowLayout(int orientation){  this.orientation=orientation;}  }
class C{  protected Sentence(final ConversationContext ctx){  context=ctx;}  }
class C{  public SymbolTableEntryInternal steFor_slice(){  return getSymbolTableEntryInternal("slice",true);}  }
class C{  public IndexInvalidException(Throwable cause){  super(cause.getCause() != null ? cause.getCause().getMessage() : cause.getMessage());  initCause(cause);}  }
class C{  @Override public boolean supportsDb(String type){  return true;}  }
class C{  public GitHubRepositoryList createRepositoriesList() throws IOException {  return DtoFactory.getInstance().createDto(GitHubRepositoryList.class);}  }
class C{  public AreaEntity(final int width,final int height){  setRPClass("area");  put("type","area");  setSize(width,height);  setResistance(0);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  WhiteboxRaster image;  WhiteboxRaster output;  int cols, rows;  int progress=0;  int col, row;  int i;  int numSamplePoints=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  numSamplePoints=Integer.parseInt(args[2]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    image=new WhiteboxRaster(inputHeader,"r");    rows=image.getNumberRows();    cols=image.getNumberColumns();    if (rows * cols < numSamplePoints) {      showFeedback("The number of samples cannot exceed the number of cells.");      return;    }    output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    output.setPreferredPalette("qual.pal");    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    image.close();    NonDuplicatingPriorityQueue queue=new NonDuplicatingPriorityQueue(numSamplePoints);    Random generator=new Random();    GridCell gc;    i=0;    do {      row=generator.nextInt(rows);      col=generator.nextInt(cols);      gc=new GridCell(row,col);      if (queue.add(gc)) {        i++;        progress=(int)(100f * i / numSamplePoints);        updateProgress("Loop 1 of 2:",progress);      }    } while (i < numSamplePoints);    Iterator<GridCell> it=queue.iterator();    i=1;    do {      gc=queue.poll();      output.setValue(gc.row,gc.col,i);      i++;      progress=(int)(100f * i / numSamplePoints);      updateProgress("Loop 2 of 2:",progress);    } while (i < numSamplePoints);    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override protected void initialize(){  ExtensionFileFilter filter;  super.initialize();  m_FileChooser=GUIHelper.newFileChooser();  filter=new ExtensionFileFilter(".model","Model files (*.model)");  m_FileChooser.addChoosableFileFilter(filter);  m_FileChooser.setFileFilter(filter);}  }
class C{  public void unbind(Name name) throws NamingException {  if (name.size() == 0)   throw new InvalidNameException("Name is empty");  NameComponent[] path=CNNameParser.nameToCosName(name);  try {    callUnbind(path);  } catch (  CannotProceedException e) {    javax.naming.Context cctx=getContinuationContext(e);    cctx.unbind(e.getRemainingName());  }}  }
class C{  public char last(){  if (end != begin) {    pos=end - 1;  } else {    pos=end;  }  return current();}  }
class C{  public GraphicsNode createGraphicsNode(BridgeContext ctx,Element e){  if (!SVGUtilities.matchUserAgent(e,ctx.getUserAgent())) {    return null;  }  CompositeGraphicsNode gn=buildCompositeGraphicsNode(ctx,e,null);  return gn;}  }
class C{  public void hide(){  dialog.setVisible(false);}  }
class C{  private final void yyreset(java.io.Reader reader){  zzReader=reader;  zzAtBOL=true;  zzAtEOF=false;  zzEndRead=zzStartRead=0;  zzCurrentPos=zzMarkedPos=zzPushbackPos=0;  yyline=yychar=yycolumn=0;  zzLexicalState=YYINITIAL;  if (zzBuffer.length > ZZ_BUFFERSIZE)   zzBuffer=new char[ZZ_BUFFERSIZE];}  }
class C{  private static void applyForView(View view,TypefaceCollection typefaceCollection){  if (view instanceof TextView) {    TextView textView=(TextView)view;    Typeface oldTypeface=textView.getTypeface();    final int style=oldTypeface == null ? Typeface.NORMAL : oldTypeface.getStyle();    textView.setTypeface(typefaceCollection.getTypeface(style));    textView.setPaintFlags(textView.getPaintFlags() | Paint.SUBPIXEL_TEXT_FLAG);  }}  }
class C{  public SignatureVisitor visitSuperclass(){  return this;}  }
class C{  private boolean launchFirstRunExperience(){  final boolean isIntentActionMain=getIntent() != null && TextUtils.equals(getIntent().getAction(),Intent.ACTION_MAIN);  final Intent freIntent=FirstRunFlowSequencer.checkIfFirstRunIsNecessary(this,isIntentActionMain);  if (freIntent == null)   return false;  if ((getIntent().getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK) != 0) {    startActivityForResult(freIntent,FIRST_RUN_EXPERIENCE_REQUEST_CODE);  } else {    Intent newIntent=new Intent(getIntent());    newIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);    startActivity(newIntent);    finish();  }  return true;}  }
class C{  public static Iterator<Map.Entry<byte[],Map<String,byte[]>>> iterator(final File location,final int keylen) throws IOException {  return new EntryIter(location,keylen);}  }
class C{  public void removeSelectionListener(final SelectionListener listener){  this.checkWidget();  if (listener == null) {    SWT.error(SWT.ERROR_NULL_ARGUMENT);  }  this.listOfSelectionListeners.remove(listener);}  }
class C{  public PSPIdentifierForSellerException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapremovenameditemns04.class,args);}  }
class C{  public void stopDiscovery(){  if (mApiClient != null) {    Weave.DEVICE_API.stopLoading(mApiClient,mDiscoveryListener);  }}  }
class C{  private boolean isRequired(UIComponent uiComponent){  Object object=uiComponent.getAttributes().get(REQUIRED);  if (object == null) {    return false;  } else {    return ((Boolean)object).booleanValue();  }}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  public static Rectangle[] computeDifference(Rectangle rectA,Rectangle rectB){  if (rectB == null || !rectA.intersects(rectB) || isRectangleContainingRectangle(rectB,rectA)) {    return new Rectangle[0];  }  Rectangle t=new Rectangle();  Rectangle a=null, b=null, c=null, d=null;  Rectangle result[];  int rectCount=0;  if (isRectangleContainingRectangle(rectA,rectB)) {    t.x=rectA.x;    t.y=rectA.y;    t.width=rectB.x - rectA.x;    t.height=rectA.height;    if (t.width > 0 && t.height > 0) {      a=new Rectangle(t);      rectCount++;    }    t.x=rectB.x;    t.y=rectA.y;    t.width=rectB.width;    t.height=rectB.y - rectA.y;    if (t.width > 0 && t.height > 0) {      b=new Rectangle(t);      rectCount++;    }    t.x=rectB.x;    t.y=rectB.y + rectB.height;    t.width=rectB.width;    t.height=rectA.y + rectA.height - (rectB.y + rectB.height);    if (t.width > 0 && t.height > 0) {      c=new Rectangle(t);      rectCount++;    }    t.x=rectB.x + rectB.width;    t.y=rectA.y;    t.width=rectA.x + rectA.width - (rectB.x + rectB.width);    t.height=rectA.height;    if (t.width > 0 && t.height > 0) {      d=new Rectangle(t);      rectCount++;    }  } else {    if (rectB.x <= rectA.x && rectB.y <= rectA.y) {      if ((rectB.x + rectB.width) > (rectA.x + rectA.width)) {        t.x=rectA.x;        t.y=rectB.y + rectB.height;        t.width=rectA.width;        t.height=rectA.y + rectA.height - (rectB.y + rectB.height);        if (t.width > 0 && t.height > 0) {          a=t;          rectCount++;        }      } else       if ((rectB.y + rectB.height) > (rectA.y + rectA.height)) {        t.setBounds((rectB.x + rectB.width),rectA.y,(rectA.x + rectA.width) - (rectB.x + rectB.width),rectA.height);        if (t.width > 0 && t.height > 0) {          a=t;          rectCount++;        }      } else {        t.setBounds((rectB.x + rectB.width),rectA.y,(rectA.x + rectA.width) - (rectB.x + rectB.width),(rectB.y + rectB.height) - rectA.y);        if (t.width > 0 && t.height > 0) {          a=new Rectangle(t);          rectCount++;        }        t.setBounds(rectA.x,(rectB.y + rectB.height),rectA.width,(rectA.y + rectA.height) - (rectB.y + rectB.height));        if (t.width > 0 && t.height > 0) {          b=new Rectangle(t);          rectCount++;        }      }    } else     if (rectB.x <= rectA.x && (rectB.y + rectB.height) >= (rectA.y + rectA.height)) {      if ((rectB.x + rectB.width) > (rectA.x + rectA.width)) {        t.setBounds(rectA.x,rectA.y,rectA.width,rectB.y - rectA.y);        if (t.width > 0 && t.height > 0) {          a=t;          rectCount++;        }      } else {        t.setBounds(rectA.x,rectA.y,rectA.width,rectB.y - rectA.y);        if (t.width > 0 && t.height > 0) {          a=new Rectangle(t);          rectCount++;        }        t.setBounds((rectB.x + rectB.width),rectB.y,(rectA.x + rectA.width) - (rectB.x + rectB.width),(rectA.y + rectA.height) - rectB.y);        if (t.width > 0 && t.height > 0) {          b=new Rectangle(t);          rectCount++;        }      }    } else     if (rectB.x <= rectA.x) {      if ((rectB.x + rectB.width) >= (rectA.x + rectA.width)) {        t.setBounds(rectA.x,rectA.y,rectA.width,rectB.y - rectA.y);        if (t.width > 0 && t.height > 0) {          a=new Rectangle(t);          rectCount++;        }        t.setBounds(rectA.x,(rectB.y + rectB.height),rectA.width,(rectA.y + rectA.height) - (rectB.y + rectB.height));        if (t.width > 0 && t.height > 0) {          b=new Rectangle(t);          rectCount++;        }      } else {        t.setBounds(rectA.x,rectA.y,rectA.width,rectB.y - rectA.y);        if (t.width > 0 && t.height > 0) {          a=new Rectangle(t);          rectCount++;        }        t.setBounds((rectB.x + rectB.width),rectB.y,(rectA.x + rectA.width) - (rectB.x + rectB.width),rectB.height);        if (t.width > 0 && t.height > 0) {          b=new Rectangle(t);          rectCount++;        }        t.setBounds(rectA.x,(rectB.y + rectB.height),rectA.width,(rectA.y + rectA.height) - (rectB.y + rectB.height));        if (t.width > 0 && t.height > 0) {          c=new Rectangle(t);          rectCount++;        }      }    } else     if (rectB.x <= (rectA.x + rectA.width) && (rectB.x + rectB.width) > (rectA.x + rectA.width)) {      if (rectB.y <= rectA.y && (rectB.y + rectB.height) > (rectA.y + rectA.height)) {        t.setBounds(rectA.x,rectA.y,rectB.x - rectA.x,rectA.height);        if (t.width > 0 && t.height > 0) {          a=t;          rectCount++;        }      } else       if (rectB.y <= rectA.y) {        t.setBounds(rectA.x,rectA.y,rectB.x - rectA.x,(rectB.y + rectB.height) - rectA.y);        if (t.width > 0 && t.height > 0) {          a=new Rectangle(t);          rectCount++;        }        t.setBounds(rectA.x,(rectB.y + rectB.height),rectA.width,(rectA.y + rectA.height) - (rectB.y + rectB.height));        if (t.width > 0 && t.height > 0) {          b=new Rectangle(t);          rectCount++;        }      } else       if ((rectB.y + rectB.height) > (rectA.y + rectA.height)) {        t.setBounds(rectA.x,rectA.y,rectA.width,rectB.y - rectA.y);        if (t.width > 0 && t.height > 0) {          a=new Rectangle(t);          rectCount++;        }        t.setBounds(rectA.x,rectB.y,rectB.x - rectA.x,(rectA.y + rectA.height) - rectB.y);        if (t.width > 0 && t.height > 0) {          b=new Rectangle(t);          rectCount++;        }      } else {        t.setBounds(rectA.x,rectA.y,rectA.width,rectB.y - rectA.y);        if (t.width > 0 && t.height > 0) {          a=new Rectangle(t);          rectCount++;        }        t.setBounds(rectA.x,rectB.y,rectB.x - rectA.x,rectB.height);        if (t.width > 0 && t.height > 0) {          b=new Rectangle(t);          rectCount++;        }        t.setBounds(rectA.x,(rectB.y + rectB.height),rectA.width,(rectA.y + rectA.height) - (rectB.y + rectB.height));        if (t.width > 0 && t.height > 0) {          c=new Rectangle(t);          rectCount++;        }      }    } else     if (rectB.x >= rectA.x && (rectB.x + rectB.width) <= (rectA.x + rectA.width)) {      if (rectB.y <= rectA.y && (rectB.y + rectB.height) > (rectA.y + rectA.height)) {        t.setBounds(rectA.x,rectA.y,rectB.x - rectA.x,rectA.height);        if (t.width > 0 && t.height > 0) {          a=new Rectangle(t);          rectCount++;        }        t.setBounds((rectB.x + rectB.width),rectA.y,(rectA.x + rectA.width) - (rectB.x + rectB.width),rectA.height);        if (t.width > 0 && t.height > 0) {          b=new Rectangle(t);          rectCount++;        }      } else       if (rectB.y <= rectA.y) {        t.setBounds(rectA.x,rectA.y,rectB.x - rectA.x,rectA.height);        if (t.width > 0 && t.height > 0) {          a=new Rectangle(t);          rectCount++;        }        t.setBounds(rectB.x,(rectB.y + rectB.height),rectB.width,(rectA.y + rectA.height) - (rectB.y + rectB.height));        if (t.width > 0 && t.height > 0) {          b=new Rectangle(t);          rectCount++;        }        t.setBounds((rectB.x + rectB.width),rectA.y,(rectA.x + rectA.width) - (rectB.x + rectB.width),rectA.height);        if (t.width > 0 && t.height > 0) {          c=new Rectangle(t);          rectCount++;        }      } else {        t.setBounds(rectA.x,rectA.y,rectB.x - rectA.x,rectA.height);        if (t.width > 0 && t.height > 0) {          a=new Rectangle(t);          rectCount++;        }        t.setBounds(rectB.x,rectA.y,rectB.width,rectB.y - rectA.y);        if (t.width > 0 && t.height > 0) {          b=new Rectangle(t);          rectCount++;        }        t.setBounds((rectB.x + rectB.width),rectA.y,(rectA.x + rectA.width) - (rectB.x + rectB.width),rectA.height);        if (t.width > 0 && t.height > 0) {          c=new Rectangle(t);          rectCount++;        }      }    }  }  result=new Rectangle[rectCount];  rectCount=0;  if (a != null)   result[rectCount++]=a;  if (b != null)   result[rectCount++]=b;  if (c != null)   result[rectCount++]=c;  if (d != null)   result[rectCount++]=d;  return result;}  }
class C{  public int key(){  return _map._set[_index];}  }
class C{  @Timed @ExceptionMetered @POST @Consumes(APPLICATION_JSON) public Response createClient(@Auth AutomationClient automationClient,@Valid CreateClientRequestV2 request){  String creator=automationClient.getName();  String client=request.name();  clientDAO.getClient(client).ifPresent(null);  long clientId=clientDAO.createClient(client,creator,request.description());  auditLog.recordEvent(new Event(Instant.now(),EventTag.CLIENT_CREATE,creator,client));  groupsToGroupIds(request.groups()).forEach(null);  URI uri=UriBuilder.fromResource(ClientResource.class).path(client).build();  return Response.created(uri).build();}  }
class C{  public static Iterable<MatchResult> findMatches(Pattern pattern,CharSequence s){  List<MatchResult> results=new ArrayList<MatchResult>();  for (Matcher m=pattern.matcher(s); m.find(); )   results.add(m.toMatchResult());  return results;}  }
class C{  public SymbolTableEntryInternal steFor_object(){  return getSymbolTableEntryInternal("object",true);}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  public static void generateDebug(final String errCode,final Object[] errParams,final Logger logger){  generateDebug(errCode,errParams,logger,null);}  }
class C{  public Vertex parseEquationForEvaluation(String code,Vertex speaker,Vertex target,boolean debug,Network network){  TextStream stream=new TextStream(code);  try {    Map<String,Map<String,Vertex>> elements=new HashMap<String,Map<String,Vertex>>();    elements.put(VARIABLE,new HashMap<String,Vertex>());    elements.get(VARIABLE).put("speaker",speaker);    elements.get(VARIABLE).put("target",target);    elements.put(EQUATION,new HashMap<String,Vertex>());    List<String> comments=getComments(stream);    Vertex equation=null;    String peek=stream.peekWord();    if (peek.equalsIgnoreCase(EQUATION) || peek.equalsIgnoreCase(FUNCTION)) {      equation=parseEquation(stream,elements,debug,network);    } else {      equation=parseElement(stream,elements,debug,network);    }    if (debug) {      for (      String comment : comments) {        equation.addRelationship(Primitive.COMMENT,network.createVertex(comment),Integer.MAX_VALUE);      }    }    network.getBot().log(this,"Compiled new equation",Level.INFO,equation);    return equation;  } catch (  SelfParseException exception) {    throw exception;  }catch (  Exception exception) {    network.getBot().log(this,exception);    throw new SelfParseException("Parsing error occurred",stream,exception);  }}  }
class C{  private static String preencode(String contents){  int length=contents.length();  if (length == 11) {    int sum=0;    for (int i=0; i < 11; ++i) {      sum+=(contents.charAt(i) - '0') * (i % 2 == 0 ? 3 : 1);    }    contents+=(1000 - sum) % 10;  } else   if (length != 12) {    throw new IllegalArgumentException("Requested contents should be 11 or 12 digits long, but got " + contents.length());  }  return '0' + contents;}  }
class C{  private float rowScalarProductWithRowDifference(FloatMatrix u,FloatMatrix i,FloatMatrix j){  FloatMatrix ret=u.mul(i.sub(j));  ret.put(0,0);  return ret.sum();}  }
class C{  private void log(String str){  Log.i(this.getClass().getSimpleName(),"-----------------" + str);}  }
class C{  public void close() throws IOException {  try {    int bufferLength=this.buffer.length();    for (; ; ) {      String str="";      char ch;      if (this.bufferIndex >= bufferLength) {        str=XMLUtil.read(this.reader,'&');        ch=str.charAt(0);      } else {        ch=this.buffer.charAt(this.bufferIndex);        this.bufferIndex++;        continue;      }      if (ch == '<') {        this.reader.unread(ch);        break;      }      if ((ch == '&') && (str.length() > 1)) {        if (str.charAt(1) != '#') {          XMLUtil.processEntity(str,this.reader,this.resolver);        }      }    }  } catch (  XMLParseException e) {    throw new IOException(e.getMessage());  }}  }
class C{  public static String replace(String text,char repl,char with,int max){  return replace(text,String.valueOf(repl),String.valueOf(with),max);}  }
class C{  public boolean removeAll(Object key1,Object key2,Object key3,Object key4){  boolean modified=false;  MapIterator it=mapIterator();  while (it.hasNext()) {    MultiKey multi=(MultiKey)it.next();    if (multi.size() >= 4 && (key1 == null ? multi.getKey(0) == null : key1.equals(multi.getKey(0))) && (key2 == null ? multi.getKey(1) == null : key2.equals(multi.getKey(1))) && (key3 == null ? multi.getKey(2) == null : key3.equals(multi.getKey(2))) && (key4 == null ? multi.getKey(3) == null : key4.equals(multi.getKey(3)))) {      it.remove();      modified=true;    }  }  return modified;}  }
class C{  public SimpleProperties(Object o,boolean includeSuperclasses,boolean includeGetClass,boolean includeExtensions,boolean allowProxy){  object=o;  if (allowProxy && o != null && o instanceof sim.util.Proxiable)   object=((sim.util.Proxiable)(o)).propertiesProxy(); else   if (allowProxy && o != null && o instanceof sim.util.Propertied)   auxillary=((sim.util.Propertied)(o)).properties();  this.includeSuperclasses=includeSuperclasses;  this.includeGetClass=includeGetClass;  this.includeExtensions=includeExtensions;  generateProperties();}  }
class C{  public RotationControl(){  this(Control.LEFT_MOUSE_BUTTON);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:59.500 -0500",hash_original_method="74712D26283E9B32FCB8C3574DCFFFFA",hash_generated_method="0FF67A1B76011C53F57B50091A1AA816") @Deprecated public void recordData(long start,long end,long rxBytes,long txBytes){  recordData(start,end,new NetworkStats.Entry(IFACE_ALL,UID_ALL,SET_DEFAULT,TAG_NONE,rxBytes,0L,txBytes,0L,0L));}  }
class C{  private static void close(Closeable c){  if (c != null) {    try {      c.close();    } catch (    IOException e) {      e.printStackTrace();    }  }}  }
class C{  protected void pop() throws EmptyStackException {  if (getEventLog().isLoggable(PlatformLogger.Level.FINE)) {    getEventLog().fine("EventQueue.pop(" + this + ")");  }  pushPopLock.lock();  try {    EventQueue topQueue=this;    while (topQueue.nextQueue != null) {      topQueue=topQueue.nextQueue;    }    EventQueue prevQueue=topQueue.previousQueue;    if (prevQueue == null) {      throw new EmptyStackException();    }    topQueue.previousQueue=null;    prevQueue.nextQueue=null;    while (topQueue.peekEvent() != null) {      try {        prevQueue.postEventPrivate(topQueue.getNextEventPrivate());      } catch (      InterruptedException ie) {        if (getEventLog().isLoggable(PlatformLogger.Level.FINE)) {          getEventLog().fine("Interrupted pop",ie);        }      }    }    if ((topQueue.dispatchThread != null) && (topQueue.dispatchThread.getEventQueue() == this)) {      prevQueue.dispatchThread=topQueue.dispatchThread;      topQueue.dispatchThread.setEventQueue(prevQueue);    }    if (appContext.get(AppContext.EVENT_QUEUE_KEY) == this) {      appContext.put(AppContext.EVENT_QUEUE_KEY,prevQueue);    }    topQueue.postEventPrivate(new InvocationEvent(topQueue,dummyRunnable));    pushPopCond.signalAll();  }  finally {    pushPopLock.unlock();  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public RecentCollectionPage(final BaseRecentCollectionResponse response,final IRecentRequestBuilder builder){  super(response,builder);}  }
class C{  protected void doAverageLine(byte[] curLine,byte[] prevLine){  int sub=(int)Math.ceil((getBitsPerComponent() * getColors()) / 8.0);  for (int i=0; i < curLine.length; i++) {    int raw=0;    int prior=0;    int prevIdx=i - sub;    if (prevIdx >= 0) {      raw=curLine[prevIdx] & 0xff;    }    if (prevLine != null) {      prior=prevLine[i] & 0xff;    }    curLine[i]+=(byte)Math.floor((raw + prior) / 2);  }}  }
class C{  public void applyLocalizedPattern(String pattern){  applyPattern(pattern,true);}  }
class C{  public CountFeatureIdx(int count,int fidx){  this.count=count;  this.fidx=fidx;}  }
class C{  public CharRange(char start,char end,boolean negated){  super();  if (start > end) {    char temp=start;    start=end;    end=temp;  }  this.start=start;  this.end=end;  this.negated=negated;}  }
class C{  public static String identityToString(Object obj){  if (obj == null) {    return EMPTY_STRING;  }  return obj.getClass().getName() + "@" + getIdentityHexString(obj);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == null) {    return false;  }  if (obj == this) {    return true;  }  if (obj instanceof HistogramBin) {    HistogramBin bin=(HistogramBin)obj;    boolean b0=bin.startBoundary == this.startBoundary;    boolean b1=bin.endBoundary == this.endBoundary;    boolean b2=bin.count == this.count;    return b0 && b1 && b2;  }  return false;}  }
class C{  public Controler(final String[] args){  this(args.length > 0 ? args[0] : null,null,null);}  }
class C{  public JSONStringer array() throws JSONException {  if (this.mode == 'i' || this.mode == 'o' || this.mode == 'a') {    push('a');    this.append("[");    this.comma=false;    return this;  }  throw new JSONException("Misplaced array.");}  }
class C{  @Override public void disconnect(){  connection.disconnect();}  }
class C{  public CacheServerImpl(GemFireCacheImpl cache,boolean isGatewayReceiver){  super(cache);  this.isGatewayReceiver=isGatewayReceiver;}  }
class C{  public static String overlayString(String text,String overlay,int start,int end){  return new StringBuilder(start + overlay.length() + text.length() - end + 1).append(text.substring(0,start)).append(overlay).append(text.substring(end)).toString();}  }
class C{  @Xpect @ParameterParser(syntax="('at' arg2=STRING)? ('apply'  arg3=STRING )?") @ConsumedIssues({Severity.INFO,Severity.ERROR,Severity.WARNING}) public void quickFixAndRun(@StringExpectation(caseSensitive=true) IStringExpectation expectation,@ThisResource XtextResource resource,RegionWithCursor offset,String selected,@IssuesByLine Multimap<Integer,Issue> offset2issue,ISetupInitializer<Object> init,FileSetupContext fileSetupContext) throws Exception {  try {    long timeStart=System.currentTimeMillis();    logger.info("Execution started: " + new Date(timeStart));    String executionResult;    ExecutionResult exRes=new ExecutionResult();    ResourceTweaker resourceTweaker=null;    Display.getDefault().syncExec(null);    executionResult=exRes.result;    long timeEnd=System.currentTimeMillis();    logger.info("Execution finished: " + new Date(timeEnd));    logger.info("Execution took " + (timeEnd - timeStart + 0.0) / 1000.0 + " seconds.");    expectation.assertEquals(executionResult);    resource.reparse(getContentForResourceUri(resource.getURI()));  }  finally {    logger.info("Closing all editors");    EditorsUtil.forceCloseAllEditors();  }  logger.info("Successful End of Execution");}  }
class C{  public String nodeLabel(){  if (selector == IComparator.MAX) {    return "MAX: " + Formatter.convert(value);  } else {    return "MIN: " + Formatter.convert(value);  }}  }
class C{  private static int find4DayBlockWithMostFVals(String FPLAN,String BITFELD){  Map<Integer,Integer> departuresPerBitfeld=new HashMap<>();  try {    BufferedReader readsLines=new BufferedReader(new InputStreamReader(new FileInputStream(FPLAN),"latin1"));    String newLine=readsLines.readLine();    int numberOfDepartures=0;    while (newLine != null) {      if (newLine.charAt(0) == '*') {        if (newLine.charAt(1) == 'Z') {          try {            numberOfDepartures=Integer.parseInt(newLine.substring(22,25)) + 1;          } catch (          Exception e) {            numberOfDepartures=1;          }        }        if (newLine.charAt(1) == 'A' && newLine.charAt(3) == 'V') {          if (newLine.substring(22,28).trim().length() > 0) {            int bitfeldNumber=Integer.parseInt(newLine.substring(22,28));            int bitfeldValue=numberOfDepartures;            if (departuresPerBitfeld.containsKey(bitfeldNumber)) {              bitfeldValue+=departuresPerBitfeld.get(bitfeldNumber);            }            departuresPerBitfeld.put(bitfeldNumber,bitfeldValue);          }        }      }      newLine=readsLines.readLine();    }    readsLines.close();  } catch (  IOException e) {    e.printStackTrace();  }  int[] bitfeldStats=new int[96];  try {    BufferedReader readsLines=new BufferedReader(new InputStreamReader(new FileInputStream(BITFELD),"latin1"));    String newLine=readsLines.readLine();    while (newLine != null) {      int bitFeldValue=1;      if (departuresPerBitfeld.containsKey(Integer.parseInt(newLine.substring(0,6)))) {        bitFeldValue=departuresPerBitfeld.get(Integer.parseInt(newLine.substring(0,6)));      }      String bitfeld=newLine.substring(7,103);      for (int i=0; i < bitfeld.length(); i++) {        if (bitfeld.charAt(i) == 'F') {          bitfeldStats[i]+=bitFeldValue;        }      }      newLine=readsLines.readLine();    }    readsLines.close();  } catch (  IOException e) {    e.printStackTrace();  }  int maxFNumber=0;  int posMaxFNumber=-1;  for (int i=0; i < bitfeldStats.length; i++) {    if (bitfeldStats[i] > maxFNumber) {      maxFNumber=bitfeldStats[i];      posMaxFNumber=i;    }  }  log.info("Selected HAFAS-4day-block: " + posMaxFNumber);  return posMaxFNumber;}  }
class C{  public FactoryFinderTestCase2(String name){  super(name);}  }
class C{  public static void sendScreenView(int resourceId){  sendScreenView(getString(resourceId));}  }
class C{  @PUT public Response updateOrder(Order order){  orderService.updateOrder(order);  return Response.ok().build();}  }
class C{  public void menuDeselected(MenuEvent e){}  }
class C{  public IntObjectHashMap(int initialCapacity,double minLoadFactor,double maxLoadFactor){  setUp(initialCapacity,minLoadFactor,maxLoadFactor);}  }
class C{  public CViewGraphSynchronizer(final ZyGraph graph,final IZyGraphInternals graphInternals,final ZyGraphMappings<NaviNode,NaviEdge> mappings){  m_graph=Preconditions.checkNotNull(graph,"IE00981: Graph argument can not be null");  m_graphInternals=Preconditions.checkNotNull(graphInternals,"IE00982: Graph internals argument can not be null");  m_mappings=Preconditions.checkNotNull(mappings,"IE00983: Mappings argument can not be null");  m_oldView=graph.getRawView();  m_edgeDrawingSynchronizer=new CEdgeDrawingSynchronizer(graph);  m_settingsSynchronizer=new CGraphSettingsSynchronizer(graph);  for (  final NaviNode node : mappings.getNodes()) {    if (node.isSelected()) {      m_selectedNodes.add(node);    }  }  initializeListeners();}  }
class C{  public static boolean isContainerPath(String containerId,IPath path){  assert (containerId != null);  assert (containerId.length() > 0);  assert (path != null);  if (path.segmentCount() == 0) {    return false;  }  return path.segment(0).equals(containerId);}  }
class C{  @Override public void process(HashMap<K,V> tuple){  if (emitted) {    return;  }  V val=tuple.get(getKey());  if (val == null) {    return;  }  if (compareValue(val.doubleValue())) {    emitted=true;  }  if (!emitted) {    first.emit(cloneTuple(tuple));  }}  }
class C{  public adp(List list){  super(list);}  }
class C{  public int lastIndexOf(final String str){  return lastIndexOf(str,size - 1);}  }
class C{  private void reportFatalError(String msgId,String arg) throws JasperException {  err.jspError(msgId,arg);}  }
class C{  public void dispatchEventToBackground(Task task){  mDispatcherHandler.postMessageProcessTask(task);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public void run(MessageLogger logger){  logger.log("<simulation-log>");  try {    addAgent();    while (!agent.isDone() && !frame.simulationPaused()) {      Thread.sleep(200);      env.step();    }  } catch (  InterruptedException e) {  }catch (  Exception e) {    e.printStackTrace();  }  logger.log(getStatistics());  logger.log("</simulation-log>\n");}  }
class C{  public static char[] toCharArray(InputStream is,String encoding) throws IOException {  return toCharArray(is,Charsets.toCharset(encoding));}  }
class C{  public boolean containedIn(Oid[] oids){  for (int i=0; i < oids.length; i++) {    if (oids[i].equals(this))     return (true);  }  return (false);}  }
class C{  @Override public final boolean equals(Object itemSet){  if (!(this.equalCondset(itemSet))) {    return false;  }  if (m_classLabel != ((LabeledItemSet)itemSet).m_classLabel) {    return false;  }  return true;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void back(Component sourceComponent){  Vector formNavigationStack=getFormNavigationStackForComponent(sourceComponent);  if (formNavigationStack != null && formNavigationStack.size() > 0) {    Hashtable h=(Hashtable)formNavigationStack.elementAt(formNavigationStack.size() - 1);    if (h.containsKey(FORM_STATE_KEY_CONTAINER)) {      Form currentForm=Display.getInstance().getCurrent();      if (currentForm != null) {        exitForm(currentForm);      }    }    String formName=(String)h.get(FORM_STATE_KEY_NAME);    if (!h.containsKey(FORM_STATE_KEY_CONTAINER)) {      Form f=(Form)createContainer(fetchResourceFile(),formName);      initBackForm(f);      onBackNavigation();      beforeShow(f);      f.showBack();      postShowImpl(f);    } else {      showContainerImpl(formName,null,sourceComponent,true);    }  }}  }
class C{  private static boolean contains(String value,int start,int length,String criteria1,String criteria2){  return contains(value,start,length,new String[]{criteria1,criteria2});}  }
class C{  public List children(){  if (value == null) {    return new NodeList();  }  if (value instanceof List) {    return (List)value;  }  List result=new NodeList();  result.add(value);  return result;}  }
class C{  public static void createDirectory(String directoryName){  FilePath.get(directoryName).createDirectory();}  }
class C{  public CipherParameters generateDerivedMacParameters(int keySize){  return generateDerivedParameters(keySize);}  }
class C{  public SpikingThresholdRulePanel(){  super();  JTextField thresholdField=createTextField(null,null);  this.add(tabbedPane);  mainTab.addItem("Threshold",thresholdField);  mainTab.addItem("Add noise",getAddNoise());  tabbedPane.add(mainTab,"Main");  tabbedPane.add(getNoisePanel(),"Noise");}  }
class C{  public String readUntil(char c) throws IOException {  if (lookaheadChar == UNDEFINED) {    lookaheadChar=super.read();  }  line.clear();  while (lookaheadChar != c && lookaheadChar != END_OF_STREAM) {    line.append((char)lookaheadChar);    if (lookaheadChar == '\n') {      lineCounter++;    }    lastChar=lookaheadChar;    lookaheadChar=super.read();  }  return line.toString();}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);}  }
class C{  public void handleContentOutlineSelection(ISelection selection){  if (currentViewerPane != null && !selection.isEmpty() && selection instanceof IStructuredSelection) {    Iterator<?> selectedElements=((IStructuredSelection)selection).iterator();    if (selectedElements.hasNext()) {      Object selectedElement=selectedElements.next();      if (currentViewerPane.getViewer() == selectionViewer) {        ArrayList<Object> selectionList=new ArrayList<Object>();        selectionList.add(selectedElement);        while (selectedElements.hasNext()) {          selectionList.add(selectedElements.next());        }        selectionViewer.setSelection(new StructuredSelection(selectionList));      } else {        if (currentViewerPane.getViewer().getInput() != selectedElement) {          currentViewerPane.getViewer().setInput(selectedElement);          currentViewerPane.setTitle(selectedElement);        }      }    }  }}  }
class C{  public ByteVector putLong(final long l){  int length=this.length;  if (length + 8 > data.length) {    enlarge(8);  }  byte[] data=this.data;  int i=(int)(l >>> 32);  data[length++]=(byte)(i >>> 24);  data[length++]=(byte)(i >>> 16);  data[length++]=(byte)(i >>> 8);  data[length++]=(byte)i;  i=(int)l;  data[length++]=(byte)(i >>> 24);  data[length++]=(byte)(i >>> 16);  data[length++]=(byte)(i >>> 8);  data[length++]=(byte)i;  this.length=length;  return this;}  }
class C{  public boolean push(final double obj){  if (numObjs >= objs.length)   doubleCapacityPlusOne();  objs[numObjs++]=obj;  return true;}  }
class C{  private void attemptDrawLinesSelection(){  this.drawLines=BooleanUtilities.valueOf(this.drawLinesCheckBox.isSelected());}  }
class C{  protected ShaderVar addUniform(IGlobalShaderVar var){  return addUniform(var.getVarString(),var.getDataType());}  }
class C{  @After public void tearDown(){  Integer deletedFinancialActivityAccountId=financialActivityAccountHelper.deleteFinancialActivityAccount(financialActivityAccountId,responseSpec,CommonConstants.RESPONSE_RESOURCE_ID);  Assert.assertNotNull(deletedFinancialActivityAccountId);  Assert.assertEquals(financialActivityAccountId,deletedFinancialActivityAccountId);}  }
class C{  public boolean validateTableIDValue(){  if (!isTableID())   return false;  String tableName=getName();  int AD_Column_ID=DB.getSQLValue(null,"SELECT MAX(c.AD_Column_ID) " + "FROM AD_Table t" + " INNER JOIN AD_Column c ON (t.AD_Table_ID=c.AD_Table_ID) "+ "WHERE t.TableName='" + tableName + "'"+ " AND c.ColumnName='"+ tableName+ "_ID'");  if (AD_Column_ID <= 0)   return false;  MSystem system=MSystem.get(getCtx());  int IDRangeEnd=0;  if (system.getIDRangeEnd() != null)   IDRangeEnd=system.getIDRangeEnd().intValue();  boolean change=false;  String info=null;  String sql="SELECT MAX(" + tableName + "_ID) FROM "+ tableName;  if (IDRangeEnd > 0)   sql+=" WHERE " + tableName + "_ID < "+ IDRangeEnd;  int maxTableID=DB.getSQLValue(null,sql);  if (maxTableID < INIT_NO)   maxTableID=INIT_NO - 1;  maxTableID++;  if (getCurrentNext() < maxTableID) {    setCurrentNext(maxTableID);    info="CurrentNext=" + maxTableID;    change=true;  }  sql="SELECT MAX(" + tableName + "_ID) FROM "+ tableName+ " WHERE "+ tableName+ "_ID < "+ INIT_NO;  int maxTableSysID=DB.getSQLValue(null,sql);  if (maxTableSysID <= 0)   maxTableSysID=INIT_SYS_NO - 1;  maxTableSysID++;  if (getCurrentNextSys() < maxTableSysID) {    setCurrentNextSys(maxTableSysID);    if (info == null)     info="CurrentNextSys=" + maxTableSysID; else     info+=" - CurrentNextSys=" + maxTableSysID;    change=true;  }  if (info != null)   log.fine(getName() + " - " + info);  return change;}  }
class C{  public void putOctetString(byte[] s){  putOctetString(s,OctetStringTag);}  }
class C{  @Override public void preDeregister() throws java.lang.Exception {  super.preDeregister();}  }
class C{  public void run(){  while (go) {    try {      Thread.sleep(100);    } catch (    Exception ex) {      Uu.p(ex);    }    JScrollBar sb=scroll.getVerticalScrollBar();    sb.setValue(sb.getValue() + 1);  }}  }
class C{  public final void clearAllocate(){  _next=null;  _tail=0;  _head=0;  _bufferCount=0;}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  private BackpressureUtils(){  throw new IllegalStateException("No instances!");}  }
class C{  private static Prefix findPrefix(PrefixType type){  for (  Prefix prefix : prefixes)   if (prefix.type == type)   return prefix;  return null;}  }
class C{  @SuppressWarnings("unchecked") public static <T>T[] removeElement(Class<T> kind,T[] array,T element){  if (array != null) {    final int length=array.length;    for (int i=0; i < length; i++) {      if (array[i] == element) {        if (length == 1) {          return null;        }        T[] result=(T[])Array.newInstance(kind,length - 1);        System.arraycopy(array,0,result,0,i);        System.arraycopy(array,i + 1,result,i,length - i - 1);        return result;      }    }  }  return array;}  }
class C{  public EntityEventHandler(){  Configuration config=InfernalMobsCore.instance().config;  config.load();  antiMobFarm=config.get(Configuration.CATEGORY_GENERAL,"AntiMobfarmingEnabled",true,"Anti Mob farming mechanic. Might cause overhead if enabled.").getBoolean(true);  mobFarmCheckIntervals=config.get(Configuration.CATEGORY_GENERAL,"AntiMobFarmCheckInterval",30,"time in seconds between mob check intervals. Higher values cost more performance, but might be more accurate.").getInt() * 1000l;  mobFarmDamageTrigger=(float)config.get(Configuration.CATEGORY_GENERAL,"mobFarmDamageThreshold",150D,"Damage in chunk per interval that triggers anti farm effects").getDouble(150D);  config.save();  damageMap=new HashMap<ChunkCoordIntPair,Float>();  nextMapEvaluation=System.currentTimeMillis();}  }
class C{  @Override public String toString(){  return currencyCode;}  }
class C{  @InfoName("CL_DEVICE_HOST_UNIFIED_MEMORY") public boolean isHostUnifiedMemory(){  platform.requireMinVersionValue("CL_DEVICE_HOST_UNIFIED_MEMORY",1.1);  return infos.getBool(getEntity(),CL_DEVICE_HOST_UNIFIED_MEMORY);}  }
class C{  private boolean hasNextProxy(){  return hasNextProxy;}  }
class C{  public Bitmap toBitmap(int width,int height,int inset,int color){  final Bitmap bitmap=Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);  final Canvas canvas=new Canvas(bitmap);  final Paint paint=new Paint();  paint.setAntiAlias(BITMAP_RENDERING_ANTIALIAS);  paint.setDither(BITMAP_RENDERING_DITHER);  paint.setColor(color);  paint.setStyle(Paint.Style.STROKE);  paint.setStrokeJoin(Paint.Join.ROUND);  paint.setStrokeCap(Paint.Cap.ROUND);  paint.setStrokeWidth(BITMAP_RENDERING_WIDTH);  final Path path=toPath();  final RectF bounds=new RectF();  path.computeBounds(bounds,true);  final float sx=(width - 2 * inset) / bounds.width();  final float sy=(height - 2 * inset) / bounds.height();  final float scale=sx > sy ? sy : sx;  paint.setStrokeWidth(2.0f / scale);  path.offset(-bounds.left + (width - bounds.width() * scale) / 2.0f,-bounds.top + (height - bounds.height() * scale) / 2.0f);  canvas.translate(inset,inset);  canvas.scale(scale,scale);  canvas.drawPath(path,paint);  return bitmap;}  }
class C{  @Override public void waitForGC(){  Trace.trace(Item.SCHEDULER,"%d: Yielding to GC wait queue",Thread.currentThread().getId());  suspend(gcWaitQueue);}  }
class C{  public boolean onlyIfCached(){  return onlyIfCached;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:09.455 -0500",hash_original_method="38C936AC38AFD26040EB8F9B2F19DF90",hash_generated_method="CD433681E925C9A62AE6DFE6F257F83F") public static void texImage2D(int target,int level,int internalformat,Bitmap bitmap,int border){  if (bitmap == null) {    throw new NullPointerException("texImage2D can't be used with a null Bitmap");  }  if (bitmap.isRecycled()) {    throw new IllegalArgumentException("bitmap is recycled");  }  if (native_texImage2D(target,level,internalformat,bitmap,-1,border) != 0) {    throw new IllegalArgumentException("invalid Bitmap format");  }}  }
class C{  public IIOMetadataNode(){}  }
class C{  public static Optional<Object[]> remove(final String keyToRemove,final Object... keyValues){  return ElementHelper.remove((Object)keyToRemove,keyValues);}  }
class C{  private void editLoggingConfiguration(int[] indices){  if (indices == null || indices.length != 1) {    String msg=Localization.Main.getText("gui.logging.edit.select");    JOptionPane.showMessageDialog(this,msg,"",JOptionPane.WARNING_MESSAGE);    return;  }  JOptionPane.showMessageDialog(this,"NOT YET READY FOR USE","",JOptionPane.WARNING_MESSAGE);  String loggingConfig=(String)lstLoggingConfigurations.getModel().getElementAt(indices[0]);}  }
class C{  public HeaderCardBuilder value(BigDecimal newValue) throws HeaderCardException {  final BigDecimal scaledValue;  if (scale >= 0) {    scaledValue=newValue.setScale(scale,RoundingMode.HALF_UP);  } else {    scaledValue=newValue;  }  if (this.card == null) {    this.card=new HeaderCard(this.key.key(),scaledValue,null);    this.header.addLine(this.card);  } else {    this.card.setValue(scaledValue);  }  return this;}  }
class C{  @Override public String globalInfo(){  return "This Bayes Network learning algorithm uses tabu search for finding a well scoring " + "Bayes network structure. Tabu search is hill climbing till an optimum is reached. The " + "following step is the least worst possible step. The last X steps are kept in a list and "+ "none of the steps in this so called tabu list is considered in taking the next step. "+ "The best network found in this traversal is returned.\n\n"+ "For more information see:\n\n"+ getTechnicalInformation().toString();}  }
class C{  public void validateStructure() throws FileNotFoundException {  if (!getCtsDir().exists()) {    throw new FileNotFoundException(String.format("CTS install folder %s does not exist",getCtsDir().getAbsolutePath()));  }  if (!getTestCasesDir().exists()) {    throw new FileNotFoundException(String.format("CTS test cases folder %s does not exist",getTestCasesDir().getAbsolutePath()));  }  if (!getTestPlansDir().exists()) {    throw new FileNotFoundException(String.format("CTS test plans folder %s does not exist",getTestPlansDir().getAbsolutePath()));  }}  }
class C{  public SCirc(LLPoint ll1,float major,float minor){  super(GraphicType.GT_Circle,RenderType.RT_LatLon,LineType.LT_Unknown,DeclutterType.DC_None);  ll1_=ll1;  major_=major;  minor_=minor;  p1_=new XYPoint((short)0,(short)0);  height_=0;  width_=0;}  }
class C{  @Override public SimpleObject search(RequestContext context) throws ResponseException {  try {    logger.request(context,this,"search");    SimpleObject result=searchInner(context);    logger.reply(context,this,"search",result);    return result;  } catch (  Exception e) {    logger.error(context,this,"search",e);    throw e;  }}  }
class C{  @Override public String convertToString(EDataType eDataType,Object instanceValue){switch (eDataType.getClassifierID()) {case SRuntimePackage.EVENT_DIRECTION:    return convertEventDirectionToString(eDataType,instanceValue);case SRuntimePackage.JAVA_OBJECT:  return convertJavaObjectToString(eDataType,instanceValue);default :throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");}}  }
class C{  public void bob(float speed,float degree,boolean bounce,float f,float f1){  float movementScale=this.model.getMovementScale();  degree*=movementScale;  speed*=movementScale;  float bob=(float)(Math.sin(f * speed) * f1 * degree - f1 * degree);  if (bounce) {    bob=(float)-Math.abs((Math.sin(f * speed) * f1 * degree));  }  this.rotationPointY+=bob;}  }
class C{  public UnicodeRange(String unicodeRange){  if (unicodeRange.startsWith("U+") && unicodeRange.length() > 2) {    unicodeRange=unicodeRange.substring(2);    int dashIndex=unicodeRange.indexOf('-');    String firstValue;    String lastValue;    if (dashIndex != -1) {      firstValue=unicodeRange.substring(0,dashIndex);      lastValue=unicodeRange.substring(dashIndex + 1);    } else {      firstValue=unicodeRange;      lastValue=unicodeRange;      if (unicodeRange.indexOf('?') != -1) {        firstValue=firstValue.replace('?','0');        lastValue=lastValue.replace('?','F');      }    }    try {      firstUnicodeValue=Integer.parseInt(firstValue,16);      lastUnicodeValue=Integer.parseInt(lastValue,16);    } catch (    NumberFormatException e) {      firstUnicodeValue=-1;      lastUnicodeValue=-1;    }  } else {    firstUnicodeValue=-1;    lastUnicodeValue=-1;  }}  }
class C{  public boolean isKinematic(){  return this.mass.isInfinite() && (!this.velocity.isZero() || Math.abs(this.angularVelocity) > Epsilon.E);}  }
class C{  @Inject public N4JSRuntimeCore(FileBasedWorkspace workspace,N4JSModel model){  this.workspace=workspace;  this.model=model;}  }
class C{  private static void checkStartRow(DataResultSet resultSet,int startingRowIndex) throws StartRowNotFoundException, OperatorException {  while (resultSet.getCurrentRow() < startingRowIndex) {    if (!resultSet.hasNext()) {      throw new StartRowNotFoundException();    }    resultSet.next(null);  }}  }
class C{  public void ifJump(String jumpLabel) throws IOException {  print("ifJump",new String[]{"\"" + jumpLabel + "\""});}  }
class C{  public ProxyFactory<I> methodSpecialTimeoutMillis(String methodName,long timeoutMillis){  methodsSpecialTimeoutMillis.put(methodName,timeoutMillis);  return this;}  }
class C{  public void addStateHistoryEntry(double time,double allocatedMips,double requestedMips,boolean isInMigration){  VmStateHistoryEntry newState=new VmStateHistoryEntry(time,allocatedMips,requestedMips,isInMigration);  if (!getStateHistory().isEmpty()) {    VmStateHistoryEntry previousState=getStateHistory().get(getStateHistory().size() - 1);    if (previousState.getTime() == time) {      getStateHistory().set(getStateHistory().size() - 1,newState);      return;    }  }  getStateHistory().add(newState);}  }
class C{  public NightClub(){  super();}  }
class C{  public void disconnect(){  int c=this.connected.decrementAndGet();  if (c == 0) {synchronized (this) {      executor.allowCoreThreadTimeOut(true);      executor.setCorePoolSize(0);    }  }}  }
class C{  public void removeHistoryChangedListener(HistoryChangedListener l){  m_HistoryChangedListeners.remove(l);}  }
class C{  public boolean validate(InputNode node) throws Exception {  Class expect=type.getType();  String name=entry.getValue();  if (name == null) {    name=context.getName(expect);  }  return validate(node,name);}  }
class C{  public DriverTask addVolumesToConsistencyGroup(List<StorageVolume> volumes,StorageCapabilities capabilities){  DellSCDriverTask task=new DellSCDriverTask("addVolumesToCG");  StringBuilder errBuffer=new StringBuilder();  int addCount=0;  for (  StorageVolume volume : volumes) {    String ssn=volume.getStorageSystemId();    try {      StorageCenterAPI api=connectionManager.getConnection(ssn);      api.addVolumeToConsistencyGroup(volume.getNativeId(),volume.getConsistencyGroup());      addCount++;    } catch (    StorageCenterAPIException|DellSCDriverException dex) {      String error=String.format("Error adding volume %s to consistency group: %s",volume.getNativeId(),dex);      LOG.warn(error);      errBuffer.append(String.format("%s%n",error));    }  }  task.setMessage(errBuffer.toString());  if (addCount == volumes.size()) {    task.setStatus(TaskStatus.READY);  } else   if (addCount == 0) {    task.setStatus(TaskStatus.FAILED);  } else {    task.setStatus(TaskStatus.PARTIALLY_FAILED);  }  return task;}  }
class C{  public static void removePlugin(ViewDumpPlugin viewDumpPlugin){  sPlugins.remove(viewDumpPlugin);}  }
class C{  public SQLitePluginPackage(Activity activity){  this();}  }
class C{  public static boolean isHttpStatusCode(Throwable throwable,int statusCode){  if (RetrofitError.class.isInstance(throwable)) {    RetrofitError retrofitError=(RetrofitError)throwable;    if (retrofitError.getResponse() != null) {      return retrofitError.getResponse().getStatus() == statusCode;    }  }  return false;}  }
class C{  private static boolean withinTwo(INode n,INode goal){  DoubleLinkedList<IMove> moves=n.validMoves();  for (Iterator<IMove> it=moves.iterator(); it.hasNext(); ) {    IMove move=it.next();    INode successor=n.copy();    move.execute(successor);    if (withinOne(successor,goal)) {      return true;    }  }  return false;}  }
class C{  public static SignalsData createSignalsData(SignalSystemsConfigGroup signalSystemsConfigGroup){  return new SignalsDataImpl(signalSystemsConfigGroup);}  }
class C{  @Override public void checkAging(Exchange exchange){  long overallDifference=System.currentTimeMillis() - getRemoteEndpoint(exchange).getRTOtimestamp(OVERALLRTOTYPE);  while (true) {    if (overallDifference > (16 * getRemoteEndpoint(exchange).getRTO()) && getRemoteEndpoint(exchange).getRTO() < LOWERVBFLIMIT) {      overallDifference-=(16 * getRemoteEndpoint(exchange).getRTO());      getRemoteEndpoint(exchange).boostRTOvalue();      getRemoteEndpoint(exchange).setRTOtimestamp(System.currentTimeMillis(),OVERALLRTOTYPE);    } else {      break;    }  }  while (true) {    if (overallDifference > (4 * getRemoteEndpoint(exchange).getRTO()) && getRemoteEndpoint(exchange).getRTO() > UPPERVBFLIMIT) {      overallDifference-=(4 * getRemoteEndpoint(exchange).getRTO());      getRemoteEndpoint(exchange).reduceRTOvalue();      getRemoteEndpoint(exchange).setRTOtimestamp(System.currentTimeMillis(),OVERALLRTOTYPE);    } else {      break;    }  }}  }
class C{  public static void initiateTileEntityEvent(TileEntity te,int event,boolean limitRange){  try {    if (NetworkManager_initiateTileEntityEvent == null)     NetworkManager_initiateTileEntityEvent=Class.forName(getPackage() + ".core.network.NetworkManager").getMethod("initiateTileEntityEvent",TileEntity.class,Integer.TYPE,Boolean.TYPE);    if (instance == null)     instance=getInstance();    NetworkManager_initiateTileEntityEvent.invoke(instance,te,event,limitRange);  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  protected boolean shouldGeneratePrimaryKeys(Column[] primaryKeyColumns){  return true;}  }
class C{  public boolean isItemForce(){  return true;}  }
class C{  public TIntLongHashMap(int initialCapacity,float loadFactor,TIntHashingStrategy strategy){  super(initialCapacity,loadFactor,strategy);}  }
class C{  public static DataAttribute createDataAttribute(byte data[]){  DataAttribute attribute=new DataAttribute();  attribute.setData(data);  return attribute;}  }
class C{  private static byte[] expand(byte[] d){  Inflater inflater=new Inflater();  inflater.setInput(d);  ByteArrayOutputStream out=new ByteArrayOutputStream(d.length);  byte[] buffer=new byte[1024];  try {    while (!inflater.finished()) {      int count=inflater.inflate(buffer);      out.write(buffer,0,count);    }    inflater.end();  } catch (  Exception e) {    throw new IllegalArgumentException(e);  }  return out.toByteArray();}  }
class C{  @HLEFunction(nid=0xB2C25152,version=150) public int sceKernelSetSysClockAlarm(TPointer64 delaySysclockAddr,TPointer handlerAddress,int handlerArgument){  long delaySysclock=delaySysclockAddr.getValue();  long delayUsec=SystemTimeManager.hleSysClock2USec(delaySysclock);  return hleKernelSetAlarm(delayUsec,handlerAddress,handlerArgument);}  }
class C{  public String sqlObject_createUnique(String vendorName,String catalogName,String schemaName,String tableName,String constraintName,ArrayList<String> columns,boolean isDeferrable,boolean isDeferred){  constraintName=normalizeIdentifier(vendorName,constraintName);  return m_interfaces.get(getDBVendorID(vendorName)).sqlObject_createUnique(catalogName,schemaName,tableName,constraintName,columns,isDeferrable,isDeferred);}  }
class C{  public static long[] coordinatesToHilbert(int[] coords,int bitsperdim,int offset){  final int numdim=coords.length;  final int numbits=numdim * bitsperdim;  final long[] output=BitsUtil.zero(numbits);  int rotation=0;  long[] refl=BitsUtil.zero(numdim);  for (int i=0; i < bitsperdim; i++) {    final long[] hist=interleaveBits(coords,i + offset);    final long[] bits=BitsUtil.copy(hist);    BitsUtil.xorI(bits,refl);    BitsUtil.cycleRightI(bits,rotation,numdim);    final int nextrot=(rotation + BitsUtil.numberOfTrailingZerosSigned(bits) + 2) % numdim;    BitsUtil.invgrayI(bits);    BitsUtil.orI(output,bits,numbits - (i + 1) * numdim);    refl=hist;    BitsUtil.flipI(refl,rotation);    if (!BitsUtil.get(bits,0)) {      BitsUtil.flipI(refl,(nextrot - 1 + numdim) % numdim);    }    rotation=nextrot;  }  return output;}  }
class C{  public List<NamedRelatedResourceRep> listByNetwork(URI networkId){  return getList(PathConstants.INITIATORS_BY_NETWORK_URL,networkId);}  }
class C{  public boolean removeAll(Collection<?> c){  boolean modified=false;  for (  Object e : c)   if (remove(e))   modified=true;  return modified;}  }
class C{  private CordovaPlugin instantiatePlugin(String className){  CordovaPlugin ret=null;  try {    Class<?> c=null;    if ((className != null) && !("".equals(className))) {      c=Class.forName(className);    }    if (c != null & CordovaPlugin.class.isAssignableFrom(c)) {      ret=(CordovaPlugin)c.newInstance();    }  } catch (  Exception e) {    e.printStackTrace();    System.out.println("Error adding plugin " + className + ".");  }  return ret;}  }
class C{  public double nextDouble(boolean includeZero,boolean includeOne){  double d=0.0;  do {    d=nextDouble();    if (includeOne && nextBoolean())     d+=1.0;  } while ((d > 1.0) || (!includeZero && d == 0.0));  return d;}  }
class C{  private long sendNiciraRoleRequest(OFControllerRole role,long xid){  if (factory.getVersion().compareTo(OFVersion.OF_12) < 0) {    OFNiciraControllerRoleRequest.Builder builder=factory.buildNiciraControllerRoleRequest();    xid=xid <= 0 ? factory.nextXid() : xid;    builder.setXid(xid);    OFNiciraControllerRole niciraRole=NiciraRoleUtils.ofRoleToNiciraRole(role);    builder.setRole(niciraRole);    OFNiciraControllerRoleRequest roleRequest=builder.build();    mainConnection.write(roleRequest);  } else {    OFRoleRequest roleRequest=factory.buildRoleRequest().setGenerationId(U64.of(0)).setXid(xid <= 0 ? factory.nextXid() : xid).setRole(role).build();    xid=roleRequest.getXid();    mainConnection.write(roleRequest);  }  return xid;}  }
class C{  private boolean framesEqual(StackTraceElement frame1,StackTraceElement frame2){  boolean areEqual=Objects.equals(frame1.getClassName(),frame2.getClassName());  areEqual&=Objects.equals(frame1.getMethodName(),frame2.getMethodName());  return areEqual;}  }
class C{  public OMGraphicHash(){  super();}  }
class C{  public void logBenchmarks(Logger logger){  logger.logInfo("Compiler: " + compilerName);  long totalTime=0;  for (int i=0; i < compileTimes.length; i++) {    logger.logInfo(getPhaseName(i) + ": " + compileTimes[i].totalTime);    totalTime+=compileTimes[i].totalTime;  }  logger.logInfo("Total: " + totalTime);}  }
class C{  public DifferentPowers(int numberOfVariables){  super(numberOfVariables);}  }
class C{  public void parseSomeRowsAndPrint() throws FormatException {  int row_id_column=whatColumn(ID_COLUMN_NAME);  int rowcount=getRecordCount();  for (int i=1; i <= rowcount; i++) {    if ((i > 10) && ((i % 100) != 0) && (i != rowcount)) {      continue;    }    seekToRow(i);    List<Object> l=parseRow();    int cnt=((Integer)(l.get(row_id_column))).intValue();    if (cnt != i) {      System.out.println("Possible incorrect seek for row number " + i + " got "+ cnt);    }    System.out.println(VPFUtil.listToString(l));  }}  }
class C{  public void addListener(Listener<ComplexBuffer> listener){synchronized (mComplexBufferBroadcaster) {    mComplexBufferBroadcaster.addListener(listener);    if (mBufferProcessor == null || !mBufferProcessor.isRunning()) {      mBufferProcessor=new BufferProcessor();      Thread thread=new Thread(mBufferProcessor);      thread.setDaemon(true);      thread.setName("Airspy Buffer Processor");      thread.start();    }  }}  }
class C{  public static Streamable<Long> rangeLong(final long start,final long end){  return fromStream(ReactiveSeq.rangeLong(start,end));}  }
class C{  public void write(OutputStream out,java.util.List<Figure> figures,AffineTransform drawingTransform,Dimension imageSize) throws IOException {  this.drawingTransform=(drawingTransform == null) ? new AffineTransform() : drawingTransform;  this.bounds=(imageSize == null) ? new Rectangle(0,0,Integer.MAX_VALUE,Integer.MAX_VALUE) : new Rectangle(0,0,imageSize.width,imageSize.height);  XMLElement document=new XMLElement("map");  for (  Figure f : new ReversedList<Figure>(figures)) {    writeElement(document,f);  }  if (!isIncludeNohref) {    for (int i=document.getChildrenCount() - 1; i >= 0; i--) {      XMLElement child=(XMLElement)document.getChildAtIndex(i);      if (child.hasAttribute("nohref")) {        document.removeChildAtIndex(i);      }    }  }  PrintWriter writer=new PrintWriter(new OutputStreamWriter(out,"UTF-8"));  for (  Object o : document.getChildren()) {    XMLElement child=(XMLElement)o;    new XMLWriter(writer).write(child);  }  writer.flush();}  }
class C{  static private String flipDigits(final String str){  final char[] chrs=str.toCharArray();  for (int i=0; i < chrs.length; i++) {    final int flip='9' - chrs[i];    if (flip >= 0 && flip < 10) {      chrs[i]=flipMap[flip];    }  }  return new String(chrs);}  }
class C{  private void applyDisabledTracks(boolean[] oldDisabled,boolean[] newDisabled){  byte[][] tempArray=null;synchronized (RealTimeSequencer.this) {    for (int i=0; i < newDisabled.length; i++) {      if (((oldDisabled == null) || (i >= oldDisabled.length) || !oldDisabled[i]) && newDisabled[i]) {        if (tracks.length > i) {          sendNoteOffIfOn(tracks[i],lastTick);        }      } else       if ((oldDisabled != null) && (i < oldDisabled.length) && oldDisabled[i]&& !newDisabled[i]) {        if (tempArray == null) {          tempArray=new byte[128][16];        }        chaseTrackEvents(i,0,lastTick,true,tempArray);      }    }  }}  }
class C{  public synchronized void markUsed(long pos,int length){  int start=getBlock(pos);  int blocks=getBlockCount(length);  BlockRange x=new BlockRange(start,blocks);  BlockRange prev=freeSpace.floor(x);  if (prev == null) {    throw DataUtils.newIllegalStateException(DataUtils.ERROR_INTERNAL,"Free space already marked");  }  if (prev.start == start) {    if (prev.blocks == blocks) {      freeSpace.remove(prev);    } else {      prev.start+=blocks;      prev.blocks-=blocks;    }  } else   if (prev.start + prev.blocks == start + blocks) {    prev.blocks-=blocks;  } else {    x.start=start + blocks;    x.blocks=prev.start + prev.blocks - x.start;    freeSpace.add(x);    prev.blocks=start - prev.start;  }}  }
class C{  public static Method lookupMethod(Class<?> clazz,String methodName,Class<?>... params){  ClassLoader loader=Util.getCurrentLoader(clazz);  if (loader == null) {    return null;  }  return getMetaData(loader,clazz).lookupMethod(methodName,params);}  }
class C{  public void testFreespeedChangeRelative(){  for (  LinkFactory lf : linkFactories(15 * 60,30 * 3600)) {    final Network network=NetworkUtils.createNetwork();    NetworkFactory nf=network.getFactory();    nf.setLinkFactory(lf);    ((NetworkImpl)network).setFactory(nf);    Node node1=NetworkUtils.createAndAddNode(network,Id.create("1",Node.class),new Coord((double)0,(double)0));    Node node2=NetworkUtils.createAndAddNode(network,Id.create("2",Node.class),new Coord((double)100,(double)0));    final Node fromNode=node1;    final Node toNode=node2;    TimeVariantLinkImpl link=(TimeVariantLinkImpl)NetworkUtils.createAndAddLink(network,Id.create("1",Link.class),fromNode,toNode,(double)100,(double)10,(double)3600,(double)1);    assertEquals(10.0,link.getFreespeed(Time.UNDEFINED_TIME),EPSILON);    assertEquals(10.0,NetworkUtils.getFreespeedTravelTime(link,Time.UNDEFINED_TIME),EPSILON);    NetworkChangeEvent change=new NetworkChangeEvent(7 * 3600.0);    change.addLink(link);    change.setFreespeedChange(new ChangeValue(ChangeType.FACTOR,0.5));    link.applyEvent(change);    assertEquals(10.0,link.getFreespeed(Time.UNDEFINED_TIME),EPSILON);    assertEquals(10.0,link.getFreespeed(7 * 3600.0 - 1.0),EPSILON);    assertEquals(10.0,link.getFreespeed(7 * 3600.0 - 0.1),EPSILON);    assertEquals(5.0,link.getFreespeed(7 * 3600.0),EPSILON);    assertEquals(5.0,link.getFreespeed(8 * 3600.0),EPSILON);    assertEquals(10.0,NetworkUtils.getFreespeedTravelTime(link,Time.UNDEFINED_TIME),EPSILON);    assertEquals(10.0,NetworkUtils.getFreespeedTravelTime(link,7 * 3600.0 - 1.0),EPSILON);    assertEquals(10.0,NetworkUtils.getFreespeedTravelTime(link,7 * 3600.0 - 0.1),EPSILON);    assertEquals(20.0,NetworkUtils.getFreespeedTravelTime(link,7 * 3600.0),EPSILON);    assertEquals(20.0,NetworkUtils.getFreespeedTravelTime(link,8 * 3600.0),EPSILON);    assertEquals(20.0,NetworkUtils.getFreespeedTravelTime(link,24 * 3600.0),EPSILON);    assertEquals(20.0,NetworkUtils.getFreespeedTravelTime(link,30 * 3600.0),EPSILON);    assertEquals(20.0,NetworkUtils.getFreespeedTravelTime(link,36 * 3600.0),EPSILON);  }}  }
class C{  public boolean containsValue(Object value,boolean identity){  V[] valueTable=this.valueTable;  if (value == null) {    if (hasZeroValue && zeroValue == null)     return true;    long[] keyTable=this.keyTable;    for (int i=capacity + stashSize; i-- > 0; )     if (keyTable[i] != EMPTY && valueTable[i] == null)     return true;  } else   if (identity) {    if (value == zeroValue)     return true;    for (int i=capacity + stashSize; i-- > 0; )     if (valueTable[i] == value)     return true;  } else {    if (hasZeroValue && value.equals(zeroValue))     return true;    for (int i=capacity + stashSize; i-- > 0; )     if (value.equals(valueTable[i]))     return true;  }  return false;}  }
class C{  public static String sha256(String origin){  try {    MessageDigest messageDigest=MessageDigest.getInstance("SHA-256");    messageDigest.update(origin.getBytes(CHARSET));    return DatatypeConverter.printHexBinary(messageDigest.digest()).toUpperCase();  } catch (  NoSuchAlgorithmException e) {    logger.error(e);  }  return null;}  }
class C{  @Override public int hashCode(){  return name.hashCode();}  }
class C{  public DocPrimaryKey parseElasticId(final String index,final String cfName,final String id,Map<String,Object> map) throws JsonParseException, JsonMappingException, IOException {  IndexService indexService=this.indicesService.indexService(index);  String ksName=indexService.settingsService().getSettings().get(IndexMetaData.SETTING_KEYSPACE,index);  CFMetaData metadata=getCFMetaData(ksName,cfName);  List<ColumnDefinition> partitionColumns=metadata.partitionKeyColumns();  List<ColumnDefinition> clusteringColumns=metadata.clusteringColumns();  if (id.startsWith("[") && id.endsWith("]")) {    Object[] elements=ClusterService.Utils.jsonMapper.readValue(id,Object[].class);    Object[] values=(map != null) ? null : new Object[elements.length];    String[] names=(map != null) ? null : new String[elements.length];    int i=0;    for (    ColumnDefinition cd : Iterables.concat(partitionColumns,clusteringColumns)) {      if (i > elements.length)       throw new JsonMappingException("_id=" + id + " does not match the primary key size="+ (partitionColumns.size() + clusteringColumns.size()));      AbstractType<?> type=cd.type;      if (map == null) {        names[i]=cd.name.toString();        values[i]=type.compose(type.fromString(elements[i].toString()));      } else {        map.put(cd.name.toString(),type.compose(type.fromString(elements[i].toString())));      }      i++;    }    return (map != null) ? null : new DocPrimaryKey(names,values,(clusteringColumns.size() > 0 && elements.length == partitionColumns.size()));  } else {    AbstractType<?> type=partitionColumns.get(0).type;    if (map == null) {      return new DocPrimaryKey(new String[]{partitionColumns.get(0).name.toString()},new Object[]{type.compose(type.fromString(id))},clusteringColumns.size() != 0);    } else {      map.put(partitionColumns.get(0).name.toString(),type.compose(type.fromString(id)));      return null;    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:51.079 -0500",hash_original_method="890EADCD61ADE223E295BF032157EE11",hash_generated_method="C5803FF78AE2719195D1DC69971E9931") public UsbDeviceConnection(UsbDevice device){  mDevice=device;  addTaint(device.getTaint());}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (polynomialFunction == null) {    throw new NullPointerException();  }}  }
class C{  protected boolean initialSortNewTableModel(){  return false;}  }
class C{  protected TypeVariableImpl(){  super();}  }
class C{  int[] copyValueNumbers(){  if (isTOP()) {    throw new OptimizingCompilerException("Unexpected lattice operation");  }  if (size == 0)   return null;  int[] result=new int[size];  for (int i=0; i < size; i++) {    result[i]=numbers[i];  }  return result;}  }
class C{  @Override public Uri insertCharacters(Uri uri,ContentValues cvs){  final SQLiteDatabase db=mOpenHelper.getWritableDatabase();  long id=db.insert(CharacterContract.CharacterEntry.TABLE_NAME,null,cvs);  if (id > 0)   return CharacterContract.CharacterEntry.buildUri(id); else   throw new android.database.SQLException("Failed to insert row into " + uri);}  }
class C{  public void zoomIn(){  if (mZoomIn != null) {    mZoomIn.apply(Zoom.ZOOM_AXIS_XY);    repaint();  }}  }
class C{  @Override public boolean isSigned(int parameter) throws SQLException {  return isSignedInternal(parameter);}  }
class C{  public Object readFieldValue(int tag,int type,int count) throws IOException, ArrayIndexOutOfBoundsException {  int j;  Object obj=null;switch (type) {case XTIFFField.TIFF_BYTE:case XTIFFField.TIFF_SBYTE:case XTIFFField.TIFF_UNDEFINED:case XTIFFField.TIFF_ASCII:    byte[] bvalues=new byte[count];  stream.readFully(bvalues,0,count);if (type == XTIFFField.TIFF_ASCII) {  int index=0, prevIndex=0;  Vector v=new Vector();  while (index < count) {    while ((index < count) && (bvalues[index++] != 0)) {      ;    }    v.add(new String(bvalues,prevIndex,(index - prevIndex)));    prevIndex=index;  }  count=v.size();  String strings[]=new String[count];  for (int c=0; c < count; c++) {    strings[c]=(String)v.elementAt(c);  }  obj=strings;} else {  obj=bvalues;}break;case XTIFFField.TIFF_SHORT:char[] cvalues=new char[count];for (j=0; j < count; j++) {cvalues[j]=(char)(readUnsignedShort(stream));}obj=cvalues;break;case XTIFFField.TIFF_LONG:long[] lvalues=new long[count];for (j=0; j < count; j++) {lvalues[j]=readUnsignedInt(stream);}obj=lvalues;break;case XTIFFField.TIFF_RATIONAL:long[][] llvalues=new long[count][2];for (j=0; j < count; j++) {llvalues[j][0]=readUnsignedInt(stream);llvalues[j][1]=readUnsignedInt(stream);}obj=llvalues;break;case XTIFFField.TIFF_SSHORT:short[] svalues=new short[count];for (j=0; j < count; j++) {svalues[j]=readShort(stream);}obj=svalues;break;case XTIFFField.TIFF_SLONG:int[] ivalues=new int[count];for (j=0; j < count; j++) {ivalues[j]=readInt(stream);}obj=ivalues;break;case XTIFFField.TIFF_SRATIONAL:int[][] iivalues=new int[count][2];for (j=0; j < count; j++) {iivalues[j][0]=readInt(stream);iivalues[j][1]=readInt(stream);}obj=iivalues;break;case XTIFFField.TIFF_FLOAT:float[] fvalues=new float[count];for (j=0; j < count; j++) {fvalues[j]=readFloat(stream);}obj=fvalues;break;case XTIFFField.TIFF_DOUBLE:double[] dvalues=new double[count];for (j=0; j < count; j++) {dvalues[j]=readDouble(stream);}obj=dvalues;break;default :System.err.println(JaiI18N.getString("XTIFFDirectory0"));break;}return obj;}  }
class C{  private void refreshAllConfigurables(){  for (  String serverName : remoteControllers.keySet()) {    ConfigurableController controller=remoteControllers.get(serverName);    if (controller.getModel().getSource().isConnected()) {      controller.getView().refreshConfigurables(serverName);    }  }}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/protection/continuous-copies/resume") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) public TaskList resumeContinuousCopies(@PathParam("id") URI id,CopiesParam param) throws ControllerException {  TaskResourceRep taskResp=null;  TaskList taskList=new TaskList();  ArgValidator.checkFieldUriType(id,Volume.class,"id");  boolean vplexVolume=checkIfVolumeIsForVplex(id);  ArgValidator.checkFieldNotEmpty(param.getCopies(),"copies");  verifyCopyIDs(param);  for (  Copy copy : param.getCopies()) {    URI copyID=copy.getCopyID();    if (!URIUtil.isValid(copyID)) {      copyID=null;    }    ArgValidator.checkFieldNotEmpty(copy.getType(),"type");    if (copy.getType().equalsIgnoreCase(TechnologyType.RP.toString())) {      taskResp=performProtectionAction(id,copy,ProtectionOp.RESUME.getRestOp());      taskList.getTaskList().add(taskResp);    } else     if (!vplexVolume && copy.getType().equalsIgnoreCase(TechnologyType.NATIVE.toString())) {      TaskList resumeTaskList=resumeMirrors(id,copyID);      taskList.getTaskList().addAll(resumeTaskList.getTaskList());    } else     if (copy.getType().equalsIgnoreCase(TechnologyType.SRDF.toString())) {      id=VPlexSrdfUtil.getSrdfIdFromVolumeId(_dbClient,id);      copy.setCopyID(VPlexSrdfUtil.getSrdfIdFromVolumeId(_dbClient,copy.getCopyID()));      taskResp=performSRDFProtectionAction(id,copy,ProtectionOp.RESUME.getRestOp());      taskList.getTaskList().add(taskResp);    } else     if (vplexVolume && copy.getType().equalsIgnoreCase(TechnologyType.NATIVE.toString())) {      throw APIException.badRequests.actionNotApplicableForVplexVolumeMirrors(ProtectionOp.RESUME.getRestOp());    } else {      throw APIException.badRequests.invalidCopyType(copy.getType());    }    if (copyID == null) {      return taskList;    }  }  return taskList;}  }
class C{  @Override public void endDocument(){  Log.d(DEBUG_TAG,"Post processing relations.");  for (  RelationMember rm : missingRelations) {    Relation r=storage.getRelation(rm.ref);    if (r != null) {      rm.setElement(r);      Log.d(DEBUG_TAG,"Added relation " + rm.ref);    }  }  Log.d(DEBUG_TAG,"Finished parsing input.");}  }
class C{  public void testSetsAlternateJavaHome() throws Exception {  configuration.setProperty(GeneralPropertySet.JAVA_HOME,"/my/java");  AbstractInstalledLocalContainer container=new AbstractInstalledLocalContainerStub(configuration);  JvmLauncherStub java=new JvmLauncherStub();  container.setJvmToLaunchContainerIn(java);  String vmCmd=java.getJvm().replaceAll("\\\\","/").toLowerCase();  assertTrue(vmCmd.startsWith("/my/java/bin/java"));}  }
class C{  private void addExposedTypes(WildcardType type,Class<?> cause){  visit(type);  for (  Type lowerBound : type.getLowerBounds()) {    logger.debug("Adding exposed types from {}, which is a type lower bound on wildcard type {}",lowerBound,type);    addExposedTypes(lowerBound,cause);  }  for (  Type upperBound : type.getUpperBounds()) {    logger.debug("Adding exposed types from {}, which is a type upper bound on wildcard type {}",upperBound,type);    addExposedTypes(upperBound,cause);  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.MORE_OP___MORE_OP_1:    setMoreOp_1(MORE_OP_1_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  @Override public boolean isAutoIncrement(int column) throws SQLException {  try {    debugCodeCall("isAutoIncrement",column);    checkColumnIndex(column);    return result.isAutoIncrement(--column);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public boolean isStateActive(State state){switch (state) {case main_region_s1:    return stateVector[0] == State.main_region_s1;case main_region_s2:  return stateVector[0] == State.main_region_s2;case main_region__final_:return stateVector[0] == State.main_region__final_;default :return false;}}  }
class C{  @Override public int write(String str) throws IOException {  int n=0;  int nll=newline.length();  int sl=str.length();  for (int i=0; i < sl; i++) {    char c=str.charAt(i);    if (c == '\r')     continue;    if (c == '\n') {      atStartOfLine=true;      charPosition=-nll;      out.write(newline);      n+=nll;      charIndex+=nll;      charPosition+=n;      continue;    }    if (atStartOfLine) {      n+=indent();      atStartOfLine=false;    }    n++;    out.write(c);    charPosition++;    charIndex++;  }  return n;}  }
class C{  public boolean rewriteExif(ByteBuffer buf,Collection<ExifTag> tags) throws IOException {  ExifModifier mod=null;  try {    mod=new ExifModifier(buf,this);    for (    ExifTag t : tags) {      mod.modifyTag(t);    }    return mod.commit();  } catch (  ExifInvalidFormatException e) {    throw new IOException("Invalid exif format : " + e);  }}  }
class C{  public Vertex evaluateNOT(Vertex expression,List<Relationship> arguments,Map<Vertex,Vertex> variables,Network network,long startTime,long maxTime,int stack){  if (!checkArguments(expression,arguments,1,network)) {    return network.createVertex(Primitive.NULL);  }  Vertex argument=arguments.get(0).getTarget();  Vertex result=evaluateExpression(argument,variables,network,startTime,maxTime,stack);  if (result.is(Primitive.TRUE)) {    result=network.createVertex(Primitive.FALSE);  } else   if (result.is(Primitive.FALSE)) {    result=network.createVertex(Primitive.TRUE);  } else   if (result.is(Primitive.UNKNOWN)) {    result=network.createVertex(Primitive.UNKNOWN);  }  return result;}  }
class C{  public DocLine(PO po,Doc doc){  if (po == null)   throw new IllegalArgumentException("PO is null");  p_po=po;  m_doc=doc;  if (p_po.getAD_Org_ID() == 0)   p_po.setAD_Org_ID(m_doc.getAD_Org_ID());}  }
class C{  public void info(Throwable throwable,String msg,Object arg0,Object arg1,Object arg2){  innerLog(Level.INFO,throwable,msg,arg0,arg1,arg2,null);}  }
class C{  public void play() throws CastException, TransientNetworkDisconnectionException, NoConnectionException {  play(null);}  }
class C{  @Override public ReadableFontData slice(int offset){  if (offset < 0 || offset > this.size()) {    throw new IndexOutOfBoundsException("Attempt to bind data outside of its limits.");  }  ReadableFontData slice=new ReadableFontData(this,offset);  return slice;}  }
class C{  public static <T>T splitEachLine(CharSequence self,CharSequence regex,@ClosureParams(value=FromString.class,options={"List<String>","String[]"},conflictResolutionStrategy=PickFirstResolver.class) Closure<T> closure) throws IOException {  return splitEachLine(self,Pattern.compile(regex.toString()),closure);}  }
class C{  public int alpha(){  return (int)scalar.val[3];}  }
class C{  public void registerMethodCallDependency(@NotNull PsiMethod caller,@NotNull PsiMethod callee){  myTmpMethodDependencyRoots.remove(callee);  if (!myDependentMethods.contains(caller)) {    myTmpMethodDependencyRoots.add(caller);  }  myDependentMethods.add(callee);  Set<PsiMethod> methods=myMethodDependencies.get(caller);  if (methods == null) {    myMethodDependencies.put(caller,methods=new LinkedHashSet<PsiMethod>());  }  if (!methods.contains(callee)) {    methods.add(callee);  }  myRebuildMethodDependencies=true;}  }
class C{  public AbstractHotSpot(){}  }
class C{  void markReviewOwnership(){  List<ServiceReview> reviews=new ArrayList<ServiceReview>();  if (model.getSelectedServiceFeedback() != null) {    for (    POServiceReview poReview : model.getSelectedServiceFeedback().getReviews()) {      ServiceReview review=new ServiceReview(poReview);      review.setBelongsToLoggedInUser(ui.getUserFromSessionWithoutException() != null && ui.getUserFromSessionWithoutException().getUserId().equals(poReview.getUserId()));      reviews.add(review);    }  }  model.setSelectedServiceReviews(reviews);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:11.478 -0500",hash_original_method="5B5085E306AF53459A7AE9C0247F607B",hash_generated_method="70ECBC4221D6F322FDFBB4F7F717F9B3") private static String formatDate(Date date){  if (date == null) {    return "";  }  return new SimpleDateFormat(ISO_8601_DATE_FORMAT).format(date);}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == ScriptElement.class) {switch (baseOperationID) {default :      return -1;  }}if (baseClass == Statement.class) {switch (baseOperationID) {default :    return -1;}}if (baseClass == ExportableElement.class) {switch (baseOperationID) {case N4JSPackage.EXPORTABLE_ELEMENT___IS_EXPORTED:  return N4JSPackage.ANNOTATION_LIST___IS_EXPORTED;case N4JSPackage.EXPORTABLE_ELEMENT___IS_EXPORTED_AS_DEFAULT:return N4JSPackage.ANNOTATION_LIST___IS_EXPORTED_AS_DEFAULT;case N4JSPackage.EXPORTABLE_ELEMENT___GET_EXPORTED_NAME:return N4JSPackage.ANNOTATION_LIST___GET_EXPORTED_NAME;case N4JSPackage.EXPORTABLE_ELEMENT___IS_TOPLEVEL:return N4JSPackage.ANNOTATION_LIST___IS_TOPLEVEL;default :return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  @Override public int hashCode(){  return this.arc.hashCode();}  }
class C{  protected LabelledStatementImpl(){  super();}  }
class C{  private void write(OutputNode node,Object source,Schema schema) throws Exception {  Section section=schema.getSection();  writeVersion(node,source,schema);  writeSection(node,source,section);}  }
class C{  public boolean isSetMap_field(){  return this.map_field != null;}  }
class C{  public static Map<String,Object> mergeNestableMap(Map<String,Object> original,Map<String,Object> additional){  Map<String,Object> result=new LinkedHashMap<String,Object>(original);  for (  Map.Entry<String,Object> additionalEntry : additional.entrySet()) {    String name=additionalEntry.getKey();    Object additionalValue=additionalEntry.getValue();    Object originalValue=original.get(name);    Object newValue;    if ((originalValue instanceof Map) && (additionalValue instanceof Map)) {      Map<String,Object> innerAdditional=(Map<String,Object>)additionalValue;      Map<String,Object> innerOriginal=(Map<String,Object>)originalValue;      newValue=mergeNestableMap(innerOriginal,innerAdditional);      result.put(name,newValue);      continue;    }    if (original.containsKey(name)) {      continue;    }    result.put(name,additionalValue);  }  return result;}  }
class C{  public void update(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).update(a,b);  }}  }
class C{  private boolean isYearOutsideWantedRange(String value){  if (StringUtils.isNumeric(value)) {    Integer year=normaliseYear(Integer.parseInt(value));    return year == null || year < start.getYear() || year > end.getYear();  } else {    return false;  }}  }
class C{  public FIXValue findField(int tag){  for (int i=0; i < count; i++) {    if (fields[i].getTag() == tag)     return fields[i].getValue();  }  return null;}  }
class C{  private Instance makeInstance(TwoClassStats tc,double prob){  int count=0;  double[] vals=new double[13];  vals[count++]=tc.getTruePositive();  vals[count++]=tc.getFalseNegative();  vals[count++]=tc.getFalsePositive();  vals[count++]=tc.getTrueNegative();  vals[count++]=tc.getFalsePositiveRate();  vals[count++]=tc.getTruePositiveRate();  vals[count++]=tc.getPrecision();  vals[count++]=tc.getRecall();  vals[count++]=tc.getFallout();  vals[count++]=tc.getFMeasure();  double ss=(tc.getTruePositive() + tc.getFalsePositive()) / (tc.getTruePositive() + tc.getFalsePositive() + tc.getTrueNegative()+ tc.getFalseNegative());  vals[count++]=ss;  double expectedByChance=(ss * (tc.getTruePositive() + tc.getFalseNegative()));  if (expectedByChance < 1) {    vals[count++]=Utils.missingValue();  } else {    vals[count++]=tc.getTruePositive() / expectedByChance;  }  vals[count++]=prob;  return new DenseInstance(1.0,vals);}  }
class C{  public MultiPercolateRequest indices(String... indices){  this.indices=indices;  return this;}  }
class C{  public static void empty(final Collection<?> collection,final String name){  if (!collection.isEmpty()) {    final String message=String.format("%s must be empty",name);    throw new IllegalArgumentException(message);  }}  }
class C{  protected int unicodeEscapeLexer(int c) throws IOException {  int ret=0;  c=in.read();  code.clear();  try {    for (int i=0; i < 4; i++) {      c=in.read();      if (isEndOfFile(c) || isEndOfLine(c)) {        throw new NumberFormatException("number too short");      }      code.append((char)c);    }    ret=Integer.parseInt(code.toString(),16);  } catch (  NumberFormatException e) {    throw new IOException("(line " + getLineNumber() + ") Wrong unicode escape sequence found '"+ code.toString()+ "'"+ e.toString());  }  return ret;}  }
class C{  private DirectedGraph<IBlockNode,IBlockEdge> convert(final MutableDirectedGraph<INaviViewNode,INaviEdge> viewGraph){  final Map<INaviViewNode,IBlockNode> blockMap=new LinkedHashMap<INaviViewNode,IBlockNode>();  final List<IBlockEdge> edges=new FilledList<IBlockEdge>();  for (  final INaviViewNode viewNode : viewGraph) {    if (viewNode instanceof INaviCodeNode) {      final INaviCodeNode cnode=(INaviCodeNode)viewNode;      final CBasicBlock block=new CBasicBlock(1,"",Lists.newArrayList(cnode.getInstructions()));      final CBlockNode blockNode=new CBlockNode(block);      blockMap.put(cnode,blockNode);    }  }  for (  final INaviEdge viewEdge : viewGraph.getEdges()) {    final INaviViewNode source=viewEdge.getSource();    final INaviViewNode target=viewEdge.getTarget();    edges.add(new CFunctionEdge(blockMap.get(source),blockMap.get(target),viewEdge.getType()));  }  return new DirectedGraph<IBlockNode,IBlockEdge>(new ArrayList<IBlockNode>(blockMap.values()),edges);}  }
class C{  public static boolean occlusionTest(IMultipart part,IMultipart other){  return part.occlusionTest(other) && other.occlusionTest(part);}  }
class C{  public FirstInnerOperatorCondition(Class[] willGet){  this(willGet,false);}  }
class C{  static <T0,T1,T2>Tuple3OfNullables<T0,T1,T2> ofNullables(T0 e0,T1 e1,T2 e2){  return new Tuple3OfNullablesImpl<>(e0,e1,e2);}  }
class C{  public InstalledAppsAdapter(Context c){  this(c,false,false);}  }
class C{  public static Exception openUrl(String url){  try {    if (java.awt.Desktop.isDesktopSupported()) {      java.awt.Desktop desktop=java.awt.Desktop.getDesktop();      if (desktop.isSupported(java.awt.Desktop.Action.BROWSE)) {        java.net.URI uri=new java.net.URI(url);        desktop.browse(uri);      }    }  } catch (  Exception e) {    e.printStackTrace();    return e;  }  return null;}  }
class C{  public static String md5Hash(Object inputStream,int len) throws NoSuchAlgorithmException, IOException, InsufficientDataException {  RandomAccessFile file=null;  BufferedInputStream stream=null;  if (inputStream instanceof RandomAccessFile) {    file=(RandomAccessFile)inputStream;  } else   if (inputStream instanceof BufferedInputStream) {    stream=(BufferedInputStream)inputStream;  } else {    throw new IllegalArgumentException("unsupported input stream object");  }  long pos=0;  MessageDigest md5Digest=MessageDigest.getInstance("MD5");  pos=readBytes(len,file,stream,pos,null,md5Digest);  if (file != null) {    file.seek(pos);  } else {    stream.reset();  }  return BaseEncoding.base64().encode(md5Digest.digest());}  }
class C{  public MultiTemplateLoader(TemplateLoader[] loaders){  this.loaders=loaders.clone();}  }
class C{  public DefaultContainerFactory(){  this(null);}  }
class C{  public static double covarianceTwoColumns(double[][] data1,double[][] data2,int col1,int col2,double mean1,double mean2){  double c=0;  for (int t=0; t < data1.length; t++) {    c+=(data1[t][col1] - mean1) * (data2[t][col2] - mean2);  }  return c / (double)(data1.length - 1);}  }
class C{  public Pair<String,String> resolveMainPanelRendererLabel(final Map parameters){  for (  final CentralViewResolver resolver : resolvers) {    final Pair<String,String> label=resolver.resolveMainPanelRendererLabel(parameters);    if (label != null) {      return label;    }  }  return DEFAULT;}  }
class C{  @LargeTest public void testTextDownloadToSystemCache() throws Exception {  int fileSize=1024;  byte[] blobData=generateData(fileSize,DataType.TEXT);  long dlRequest=doBasicDownload(blobData,DOWNLOAD_TO_SYSTEM_CACHE);  verifyDownload(dlRequest,blobData);  mDownloadManager.remove(dlRequest);}  }
class C{  public String toStringDebug(){  StringBuilder result=new StringBuilder(256);  int sumPositions=0;  int sumTerms=0;  final BytesRef spare=new BytesRef();  final BytesRefBuilder payloadBuilder=storePayloads ? new BytesRefBuilder() : null;  for (  Map.Entry<String,Info> entry : fields.entrySet()) {    String fieldName=entry.getKey();    Info info=entry.getValue();    info.sortTerms();    result.append(fieldName + ":\n");    SliceByteStartArray sliceArray=info.sliceArray;    int numPositions=0;    SliceReader postingsReader=new SliceReader(intBlockPool);    for (int j=0; j < info.terms.size(); j++) {      int ord=info.sortedTerms[j];      info.terms.get(ord,spare);      int freq=sliceArray.freq[ord];      result.append("\t'" + spare + "':"+ freq+ ":");      postingsReader.reset(sliceArray.start[ord],sliceArray.end[ord]);      result.append(" [");      final int iters=storeOffsets ? 3 : 1;      while (!postingsReader.endOfSlice()) {        result.append("(");        for (int k=0; k < iters; k++) {          result.append(postingsReader.readInt());          if (k < iters - 1) {            result.append(", ");          }        }        if (storePayloads) {          int payloadIndex=postingsReader.readInt();          if (payloadIndex != -1) {            result.append(", " + payloadsBytesRefs.get(payloadBuilder,payloadIndex));          }        }        result.append(")");        if (!postingsReader.endOfSlice()) {          result.append(", ");        }      }      result.append("]");      result.append("\n");      numPositions+=freq;    }    result.append("\tterms=" + info.terms.size());    result.append(", positions=" + numPositions);    result.append("\n");    sumPositions+=numPositions;    sumTerms+=info.terms.size();  }  result.append("\nfields=" + fields.size());  result.append(", terms=" + sumTerms);  result.append(", positions=" + sumPositions);  return result.toString();}  }
class C{  public OMCircle(double latPoint,double lonPoint,double radius,Length units,int nverts){  this(new LatLonPoint.Double(latPoint,lonPoint),radius,units,nverts);}  }
class C{  public void finishDecode(IoSession session,ProtocolDecoderOutput out) throws Exception {}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("================== PartitionPack ======================\n");  sb.append(this.header.toString());  sb.append(String.format("major_version = %d%n",this.major_version));  sb.append(String.format("minor_version = %d%n",this.minor_version));  sb.append(String.format("KAG_size = %d%n",this.KAG_size));  sb.append(String.format("this_partition = 0x%x%n",this.this_partition));  sb.append(String.format("previous_partition = 0x%x%n",this.previous_partition));  sb.append(String.format("footer_partition = 0x%x%n",this.footer_partition));  sb.append(String.format("header_byte_count = 0x%x%n",this.header_byte_count));  sb.append(String.format("index_byte_count = 0x%x%n",this.index_byte_count));  sb.append(String.format("index_SID = %d%n",this.index_SID));  sb.append(String.format("body_offset = 0x%x%n",this.body_offset));  sb.append(String.format("body_SID = %d%n",this.body_SID));  sb.append(String.format("operational_pattern = 0x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%n",this.operational_pattern[0],this.operational_pattern[1],this.operational_pattern[2],this.operational_pattern[3],this.operational_pattern[4],this.operational_pattern[5],this.operational_pattern[6],this.operational_pattern[7],this.operational_pattern[8],this.operational_pattern[9],this.operational_pattern[10],this.operational_pattern[11],this.operational_pattern[12],this.operational_pattern[13],this.operational_pattern[14],this.operational_pattern[15]));  sb.append(this.essenceContainerBatch.toString());  return sb.toString();}  }
class C{  public int[] toReverseIntegerArray(int start,int end){  int[] values=new int[end - start + 1];  for (int i=nextSetBit(start); i >= start && i <= end; i=nextSetBit(i + 1)) {    values[end - i]=1;  }  return values;}  }
class C{  public VideoSample readSample() throws MediaException {  if (fifo != null) {    return (VideoSample)fifo.getObject();  } else {    throw new MediaException("Media input not opened");  }}  }
class C{  public int readInt(){  return scanner.nextInt();}  }
class C{  @Nullable public static List<PsiElement> searchForWrappingMethod(PsiElement start,boolean deep){  PsiElement seeker=start;  List<PsiElement> ret=new ArrayList<PsiElement>(2);  while (seeker != null) {    PyFunction func=PsiTreeUtil.getParentOfType(seeker,PyFunction.class,true,PyClass.class);    if (func != null) {      PyClass cls=func.getContainingClass();      if (cls != null) {        ret.add(func);        ret.add(cls);        return ret;      } else       if (deep) {        ret.add(func);        seeker=func;      } else {        return null;      }    } else {      return null;    }  }  return null;}  }
class C{  public static File generateContentPath(Context context,String type){  if (context == null) {    return null;  }  File base=context.getExternalFilesDir(type);  if (base == null) {    return null;  }  if (!base.exists()) {    if (!base.mkdirs()) {      return null;    }  }  return base;}  }
class C{  public final AssertSubscriber<T> assertContainValues(Set<? extends T> expectedValues){  if (!valuesStorage) {    throw new IllegalStateException("Using assertNoValues() requires enabling values storage");  }  if (expectedValues.size() > values.size()) {    throw new AssertionError("Actual contains fewer elements" + values,null);  }  Iterator<? extends T> expected=expectedValues.iterator();  for (; ; ) {    boolean n2=expected.hasNext();    if (n2) {      T t2=expected.next();      if (!values.contains(t2)) {        throw new AssertionError("The element is not contained in the " + "received resuls" + " = "+ valueAndClass(t2),null);      }    } else {      break;    }  }  return this;}  }
class C{  public boolean isShowMeridiem(){  return showMeridiem;}  }
class C{  public boolean isZero(){  return (this == ZERO);}  }
class C{  protected void dumpStatRecords(){  @SuppressWarnings("unchecked") Map<String,String> meteringProps=(Map<String,String>)_keyMap.get(Constants.PROPS);  if (Boolean.parseBoolean(meteringProps.get(Constants.METERINGDUMP))) {    _xmlDumpGenerator.dumpRecordstoXML(_keyMap);  }}  }
class C{  protected GemFireCacheImpl createCache(){  Properties props=new Properties();  props.setProperty(LOCATORS,"");  props.setProperty(MCAST_PORT,"0");  props.setProperty(ConfigurationProperties.OFF_HEAP_MEMORY_SIZE,getOffHeapMemorySize());  GemFireCacheImpl result=(GemFireCacheImpl)new CacheFactory(props).create();  return result;}  }
class C{  public Feature(String str,Map cpStr2Int,Map lbStr2Int){  FeatureInit(str,cpStr2Int,lbStr2Int);}  }
class C{  public void testShardSelection() throws Exception {  if (!this.isSetForFabricTest) {    return;  }  Statement stmt;  ResultSet rs;  this.conn.setServerGroupName("fabric_test1_global");  stmt=this.conn.createStatement();  stmt.executeUpdate("drop table if exists employees");  stmt.executeUpdate("create table employees (emp_no INT PRIMARY KEY, first_name CHAR(40), last_name CHAR(40))");  this.conn.setAutoCommit(false);  this.conn.setServerGroupName("fabric_test1_shard1");  stmt.executeUpdate("insert into employees values (1, 'Mickey', 'Mouse')");  stmt.executeUpdate("insert into employees values (2, 'Donald', 'Duck')");  this.conn.commit();  this.conn.setServerGroupName("fabric_test1_shard2");  stmt.executeUpdate("insert into employees values (10001, 'Jerry', 'Garcia')");  stmt.executeUpdate("insert into employees values (10002, 'Jimmy', 'Page')");  this.conn.commit();  this.conn.setAutoCommit(true);  this.conn.clearServerSelectionCriteria();  this.conn.setShardTable("employees.employees");  this.conn.setShardKey("3");  assertEquals("fabric_test1_shard1",this.conn.getCurrentServerGroup().getName());  stmt.executeUpdate("insert into employees values (3, 'Daffy', 'Duck')");  this.conn.setShardKey("10003");  assertEquals("fabric_test1_shard2",this.conn.getCurrentServerGroup().getName());  stmt.executeUpdate("insert into employees values (10003, 'Jim', 'Morrison')");  this.conn.setShardKey("1");  assertEquals("fabric_test1_shard1",this.conn.getCurrentServerGroup().getName());  rs=stmt.executeQuery("select * from employees where emp_no = 1");  assertTrue(rs.next());  assertEquals(1,rs.getInt(1));  assertEquals("Mickey",rs.getString(2));  assertEquals("Mouse",rs.getString(3));  assertFalse(rs.next());  rs.close();  this.conn.setShardKey("10001");  assertEquals("fabric_test1_shard2",this.conn.getCurrentServerGroup().getName());  rs=stmt.executeQuery("select * from employees where emp_no = 1");  assertFalse(rs.next());  rs.close();  this.conn.setServerGroupName("fabric_test1_global");  this.conn.createStatement().executeUpdate("drop table employees");}  }
class C{  default Ior<?,T> toIor(){  if (this instanceof Ior)   return (Ior)this;  final Optional<T> o=toOptional();  return o.isPresent() ? Ior.primary(o.get()) : Ior.secondary(new NoSuchElementException());}  }
class C{  public BerInputStream(InputStream in,int initialSize) throws IOException {  this.in=in;  buffer=new byte[initialSize];  next();  if (length != INDEFINIT_LENGTH) {    if (buffer.length < (length + offset)) {      byte[] newBuffer=new byte[length + offset];      System.arraycopy(buffer,0,newBuffer,0,offset);      buffer=newBuffer;    }  } else {    isIndefinedLength=true;    throw new ASN1Exception("Decoding indefinite length encoding is not supported");  }}  }
class C{  private GDALImporter(){}  }
class C{  public boolean equivalent(IMFMarkerType other){  if (other == null) {    return false;  }  boolean result=true;  result&=offset.equals(other.getOffset());  result&=label.equivalent(other.getLabel());  return result;}  }
class C{  public static KeyToken fromOutboundMessage(final Message msg){  return new KeyToken(msg.getToken(),msg.getDestination().getAddress(),msg.getDestinationPort());}  }
class C{  public String func(Float arg){  called=true;  actualValue=arg;  return "called";}  }
class C{  public static void main(String[] args){  long startMsec=System.currentTimeMillis();  PiggybackingTest1 t=new PiggybackingTest1();  t.setUpBase();  t.setUp();  t.testDistCacheBug_append();  t.tearDown();  long elapsedMsec=System.currentTimeMillis() - startMsec;  System.err.printf("Finished in %1.3f sec\n",elapsedMsec / 1000.0);}  }
class C{  public static void encodeToFile(byte[] dataToEncode,String filename) throws java.io.IOException {  if (dataToEncode == null) {    throw new NullPointerException("Data to encode was null.");  }  Base64.OutputStream bos=null;  try {    bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.ENCODE);    bos.write(dataToEncode);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bos.close();    } catch (    Exception e) {    }  }}  }
class C{  public int checkCFIndices(DataObjectType doType,boolean toConsole) throws ConnectionException {  int dirtyCount=0;  Class objClass=doType.getDataObjectClass();  _log.info("Check Data Object CF {}",objClass);  Map<String,ColumnField> indexedFields=new HashMap<String,ColumnField>();  for (  ColumnField field : doType.getColumnFields()) {    if (field.getIndex() != null) {      indexedFields.put(field.getName(),field);    }  }  if (indexedFields.isEmpty()) {    return dirtyCount;  }  Keyspace keyspace=dbClient.getKeyspace(objClass);  ColumnFamilyQuery<String,CompositeColumnName> query=keyspace.prepareQuery(doType.getCF());  OperationResult<Rows<String,CompositeColumnName>> result=query.getAllRows().setRowLimit(dbClient.DEFAULT_PAGE_SIZE).execute();  for (  Row<String,CompositeColumnName> objRow : result.getResult()) {    boolean inactiveObject=false;    for (    Column<CompositeColumnName> column : objRow.getColumns()) {      if (column.getName().getOne().equals(DataObject.INACTIVE_FIELD_NAME) && column.getBooleanValue()) {        inactiveObject=true;        break;      }    }    if (inactiveObject) {      continue;    }    for (    Column<CompositeColumnName> column : objRow.getColumns()) {      if (!indexedFields.containsKey(column.getName().getOne())) {        continue;      }      if (!column.hasValue()) {        continue;      }      ColumnField indexedField=indexedFields.get(column.getName().getOne());      String indexKey=getIndexKey(indexedField,column);      if (indexKey == null) {        continue;      }      boolean isColumnInIndex=isColumnInIndex(keyspace,indexedField.getIndexCF(),indexKey,getIndexColumns(indexedField,column,objRow.getKey()));      if (!isColumnInIndex) {        dirtyCount++;        logMessage(String.format("Inconsistency found Object(%s, id: %s, field: %s) is existing, but the related Index(%s, type: %s, id: %s) is missing.",indexedField.getDataObjectType().getSimpleName(),objRow.getKey(),indexedField.getName(),indexedField.getIndexCF().getName(),indexedField.getIndex().getClass().getSimpleName(),indexKey),true,toConsole);        DbCheckerFileWriter.writeTo(DbCheckerFileWriter.WRITER_REBUILD_INDEX,String.format("id:%s, cfName:%s",objRow.getKey(),indexedField.getDataObjectType().getSimpleName()));      }    }  }  return dirtyCount;}  }
class C{  private float[] vector2ArrayToFloatArray(Array<Vector2> dots){  float[] floatDots=new float[dots.size * 2];  int i=0;  for (  Vector2 dot : dots) {    floatDots[i++]=dot.x;    floatDots[i++]=dot.y;  }  return floatDots;}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","gdcxxy");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  public void addExceptionDates(ExceptionDates exceptionDates){  addProperty(exceptionDates);}  }
class C{  public final <Request extends TransportRequest>void registerRequestHandler(String action,Class<Request> request,String executor,TransportRequestHandler<Request> handler){  registerRequestHandler(action,request,executor,false,handler);}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("IVolVolHdrFormat[");  buffer.append("ver = ").append(ver);  buffer.append(", loc = ").append(loc);  buffer.append(", maxSize = ").append(maxSize);  buffer.append(", flags = ").append(flags);  buffer.append(", source = ").append(source);  buffer.append("]");  return buffer.toString();}  }
class C{  private HttpResult testConnectivity(URL url,Map<String,String> requestProperties,long timeout){  HttpResult result=new HttpResult();  try {    HttpURLConnection connection;    if (url.getProtocol().equalsIgnoreCase("https")) {      TrustManager[] trustAll={new PermissiveTrustManager()};      SSLContext sc=SSLContext.getInstance("SSL");      sc.init(null,trustAll,new java.security.SecureRandom());      HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());      connection=(HttpsURLConnection)url.openConnection();      HostnameVerifier verifyAll=new PermissiveHostnameVerifier();      ((HttpsURLConnection)connection).setHostnameVerifier(verifyAll);    } else {      connection=(HttpURLConnection)url.openConnection();    }    String userInfo=url.getUserInfo();    if (userInfo != null) {      userInfo=Base64.encode(userInfo);      connection.setRequestProperty("Authorization","Basic " + userInfo);    }    connection.setRequestProperty("Connection","close");    if (timeout != 0) {      connection.setReadTimeout((int)timeout);      connection.setConnectTimeout((int)timeout);    }    if (requestProperties != null) {      for (      Map.Entry<String,String> requestProperty : requestProperties.entrySet()) {        String key=requestProperty.getKey();        String value=requestProperty.getValue();        connection.setRequestProperty(key,value);        getLogger().debug("Added property [" + key + "] = ["+ value+ "]",this.getClass().getName());      }    }    connection.connect();    result.responseBody=readFully(connection);    connection.disconnect();    result.responseCode=connection.getResponseCode();    result.responseMessage=connection.getResponseMessage();  } catch (  IOException e) {    result.responseCode=-1;    result.responseMessage=e.toString();  }catch (  NoSuchAlgorithmException e) {    result.responseCode=-1;    result.responseMessage=e.toString();  }catch (  KeyManagementException e) {    result.responseCode=-1;    result.responseMessage=e.toString();  }  getLogger().debug("Pinged [" + url + "], result = ["+ result.responseCode+ "]",this.getClass().getName());  return result;}  }
class C{  public void parseAtom(ExtensionProfile extProfile,InputStream input) throws IOException, ParseException {  AtomHandler handler=new AtomHandler(extProfile);  new XmlParser().parse(input,handler,Namespaces.atom,"entry");}  }
class C{  public static void disableBlending(){  glShadeModel(GL_FLAT);  glDisable(GL_LINE_SMOOTH);  glDisable(GL_POLYGON_SMOOTH);  glDisable(GL_BLEND);}  }
class C{  public void init(){  createRequiredComponents();  buildLayout();  setCompositionRoot(formLayout);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.DOMAIN__DOMAIN_ID:    return DOMAIN_ID_EDEFAULT == null ? domainID != null : !DOMAIN_ID_EDEFAULT.equals(domainID);}return super.eIsSet(featureID);}  }
class C{  public void releaseConnection(SQLiteConnection connection){synchronized (mLock) {    AcquiredConnectionStatus status=mAcquiredConnections.remove(connection);    if (status == null) {      throw new IllegalStateException("Cannot perform this operation " + "because the specified connection was not acquired " + "from this pool or has already been released.");    }    if (!mIsOpen) {      closeConnectionAndLogExceptionsLocked(connection);    } else     if (connection.isPrimaryConnection()) {      if (recycleConnectionLocked(connection,status)) {        assert mAvailablePrimaryConnection == null;        mAvailablePrimaryConnection=connection;      }      wakeConnectionWaitersLocked();    } else     if (mAvailableNonPrimaryConnections.size() >= mMaxConnectionPoolSize - 1) {      closeConnectionAndLogExceptionsLocked(connection);    } else {      if (recycleConnectionLocked(connection,status)) {        mAvailableNonPrimaryConnections.add(connection);      }      wakeConnectionWaitersLocked();    }  }}  }
class C{  public static void clear(){  data.clear();}  }
class C{  @Bean public ServiceManager playOnLinuxServiceManager(){  return playOnLinuxServiceManager;}  }
class C{  public void writeObject(Object object) throws IOException {  if (object == null) {    writeNull();    return;  }  Serializer serializer;  serializer=_serializerFactory.getSerializer(object.getClass());  serializer.writeObject(object,this);}  }
class C{  public PreparedStatement prepareStatement(final String sql) throws SQLException {  return internalPrepareStatement(sql,ResultSet.TYPE_FORWARD_ONLY);}  }
class C{  private Object readResolve() throws ObjectStreamException {  if (this.equals(TimePeriodAnchor.START)) {    return TimePeriodAnchor.START;  } else   if (this.equals(TimePeriodAnchor.MIDDLE)) {    return TimePeriodAnchor.MIDDLE;  } else   if (this.equals(TimePeriodAnchor.END)) {    return TimePeriodAnchor.END;  }  return null;}  }
class C{  public void replaceNode(final Node node){  List<Way> ways=currentStorage.getWays(node);  if (ways.size() > 0) {    Node newNode=factory.createNodeWithNewId(node.lat,node.lon);    insertElementUnsafe(newNode);    dirty=true;    for (    Way way : ways) {      replaceNodeInWay(node,newNode,way);    }  }}  }
class C{  public Select<Model> sortAsc(String... columns){  for (  String column : columns) {    sortingOrderList.add(column + " ASC");  }  return this;}  }
class C{  public DoubleArraySpliterator(double[] array,int additionalCharacteristics){  this(array,0,array.length,additionalCharacteristics);}  }
class C{  @HLEFunction(nid=0x349D6D6C,version=150,checkInsideInterrupt=true,checkDispatchThreadEnabled=true) public int sceKernelCheckCallback(){  SceKernelThreadInfo thread=currentThread;  boolean doCallbacks=thread.doCallbacks;  thread.doCallbacks=true;  int result=checkThreadCallbacks(thread) ? 1 : 0;  thread.doCallbacks=doCallbacks;  return result;}  }
class C{  public static boolean isStandardFont(final String fontName,final boolean excludeWeights){  boolean isStandard=(standardFileList.get(fontName) != null);  if (!isStandard && excludeWeights) {    final char[] valuesToTest={'-',','};    for (    char valueToTest : valuesToTest) {      isStandard=checkSubFontName(fontName,valueToTest);      if (isStandard) {        break;      }    }  }  return isStandard;}  }
class C{  public boolean exists(){  return SQLiteUtils.intQuery(toExistsSql(),getArguments()) != 0;}  }
class C{  private static void checkOldAndNewPasswordDoNotMatch(String oldPwd,String newPwd) throws Exception {  if (oldPwd.equals(newPwd)) {    throw new IeciTdException(UasError.EC_OLD_AND_NEW_PWD_CANNOT_MATCH,UasError.EM_OLD_AND_NEW_PWD_CANNOT_MATCH);  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (declaredModifiers: ");  result.append(declaredModifiers);  result.append(')');  return result.toString();}  }
class C{  public void render(DrawContext dc,Iterable<? extends GeographicText> textIterable){  if (dc == null) {    String msg=Logging.getMessage("nullValue.DrawContextIsNull");    Logging.logger().fine(msg);    throw new IllegalArgumentException(msg);  }  if (textIterable == null) {    String msg=Logging.getMessage("nullValue.IterableIsNull");    Logging.logger().fine(msg);    throw new IllegalArgumentException(msg);  }  if (dc.getVisibleSector() == null)   return;  SectorGeometryList surfaceGeometry=dc.getSurfaceGeometry();  if (surfaceGeometry == null)   return;  Iterator<? extends GeographicText> iterator=textIterable.iterator();  if (!iterator.hasNext())   return;  Frustum frustumInModelCoords=dc.getView().getFrustumInModelCoordinates();  double horizon=dc.getView().getHorizonDistance();  while (iterator.hasNext()) {    GeographicText text=iterator.next();    if (!isTextValid(text,true))     continue;    if (!text.isVisible())     continue;    if (dc.is2DGlobe()) {      Sector limits=((Globe2D)dc.getGlobe()).getProjection().getProjectionLimits();      if (limits != null && !limits.contains(text.getPosition()))       continue;    }    Angle lat=text.getPosition().getLatitude();    Angle lon=text.getPosition().getLongitude();    if (!dc.getVisibleSector().contains(lat,lon))     continue;    Vec4 textPoint=surfaceGeometry.getSurfacePoint(lat,lon,text.getPosition().getElevation() * dc.getVerticalExaggeration());    if (textPoint == null)     continue;    double eyeDistance=dc.getView().getEyePoint().distanceTo3(textPoint);    if (!dc.is2DGlobe() && eyeDistance > horizon)     continue;    if (!frustumInModelCoords.contains(textPoint))     continue;    dc.addOrderedRenderable(new DeclutterableText(text,textPoint,eyeDistance,this));  }}  }
class C{  @Override protected AccessCheckingPortal createPortal(final ConfigurableFactoryContext ctx){  return new HousePortal(getKey(ctx));}  }
class C{  public boolean shouldPrintRules(){  return cmd != null && cmd.hasOption(Messages.SHOW_RULES_OPT);}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public boolean addEntry(String name,byte[] data){  if (name == null || data == null)   return false;  return addEntry(new MAttachmentEntry(name,data));}  }
class C{  public Token authenticateUser(String username,String password) throws ServerException {  Token userToken;  String url=fromUri(baseUrl).path(AuthenticationService.class).path(AuthenticationService.class,"authenticate").build().toString();  Credentials credentials=DtoFactory.newDto(Credentials.class).withUsername(username).withPassword(password);  HttpJsonRequest httpJsonRequest=httpJsonRequestFactory.fromUrl(url).usePostMethod().setBody(credentials);  try {    HttpJsonResponse response=httpJsonRequest.request();    userToken=response.asDto(Token.class);  } catch (  IOException|ApiException e) {    LOG.error(e.getLocalizedMessage(),e);    throw new ServerException(e.getLocalizedMessage());  }  if (userToken != null) {    LOG.debug("successfully authenticated with token {}",userToken);  }  return userToken;}  }
class C{  public Object[] toArray(){  ArrayList<E> al=new ArrayList<E>();  for (Node<E> p=first(); p != null; p=succ(p)) {    E item=p.item;    if (item != null)     al.add(item);  }  return al.toArray();}  }
class C{  public OperationPendingException(){  super();}  }
class C{  public void testMergeOneServletWithOneMappingIntoEmptyDocument() throws Exception {  String srcXml="<web-app></web-app>";  WebXml srcWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(srcXml.getBytes("UTF-8")),null);  String mergeXml="<web-app>" + "  <servlet>" + "    <servlet-name>s1</servlet-name>"+ "    <servlet-class>sclass1</servlet-class>"+ "  </servlet>"+ "  <servlet-mapping>"+ "    <servlet-name>s1</servlet-name>"+ "    <url-pattern>/s1mapping1</url-pattern>"+ "  </servlet-mapping>"+ "</web-app>";  WebXml mergeWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(mergeXml.getBytes("UTF-8")),null);  WebXmlMerger merger=new WebXmlMerger(srcWebXml);  merger.merge(mergeWebXml);  assertTrue(WebXmlUtils.hasServlet(srcWebXml,"s1"));  List<String> servletMappings=WebXmlUtils.getServletMappings(srcWebXml,"s1");  assertEquals(1,servletMappings.size());  assertEquals("/s1mapping1",servletMappings.get(0));}  }
class C{  public FindInfo(Vectorer vec){  this(vec,"",0,true,MATCH_ANYPARTFIELD);}  }
class C{  public RawTypeBinding(ReferenceBinding type,ReferenceBinding enclosingType,LookupEnvironment environment){  super(type,null,enclosingType,environment);  this.tagBits&=~TagBits.HasMissingType;  if ((type.tagBits & TagBits.HasMissingType) != 0) {    if (type instanceof MissingTypeBinding) {      this.tagBits|=TagBits.HasMissingType;    } else     if (type instanceof ParameterizedTypeBinding) {      ParameterizedTypeBinding parameterizedTypeBinding=(ParameterizedTypeBinding)type;      if (parameterizedTypeBinding.genericType() instanceof MissingTypeBinding) {        this.tagBits|=TagBits.HasMissingType;      }    }  }  if (enclosingType != null && (enclosingType.tagBits & TagBits.HasMissingType) != 0) {    if (enclosingType instanceof MissingTypeBinding) {      this.tagBits|=TagBits.HasMissingType;    } else     if (enclosingType instanceof ParameterizedTypeBinding) {      ParameterizedTypeBinding parameterizedTypeBinding=(ParameterizedTypeBinding)enclosingType;      if (parameterizedTypeBinding.genericType() instanceof MissingTypeBinding) {        this.tagBits|=TagBits.HasMissingType;      }    }  }  if (enclosingType == null || (enclosingType.modifiers & ExtraCompilerModifiers.AccGenericSignature) == 0) {    this.modifiers&=~ExtraCompilerModifiers.AccGenericSignature;  }}  }
class C{  public void paintSpinnerBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  @Override protected void reduce(KeyValueTuple metaTuple,Iterable<IntWritable> docidsIterable,Context context) throws IOException, InterruptedException {  Iterator<IntWritable> docids=docidsIterable.iterator();  if (currentReducingKey == null || !metaTuple.getKeyName().equals(currentReducingKey)) {    if (currentReducingKey != null) {      logger.info("currentKey was " + currentReducingKey + " ("+ currentKeyTupleCount+ " entries) new Key is "+ metaTuple.getKeyName()+ " : force closed");      currentReducingOutput.close();      if (duplicateKeyCount > 0) {        logger.warn("MetaIndex key " + currentReducingKey + " had "+ duplicateKeyCount+ " distinct values with duplicated associated document ids");      }      currentReducingOutput=null;    }    currentKeyTupleCount=0;    duplicateKeyCount=0;    currentReducingKey=metaTuple.getKeyName();    currentReducingOutput=openMapFileWriter(currentReducingKey,context);    logger.info("Opening new MapFileWriter for key " + currentReducingKey);  }  final IntWritable docid=docids.next();  final Text key=keyFactory.newInstance();  key.set(metaTuple.getValue());  currentReducingOutput.write(key,docid);  currentKeyTupleCount++;  int extraCount=0;  while (docids.hasNext()) {    docids.next();    extraCount++;  }  context.progress();  if (extraCount > 0) {    duplicateKeyCount++;  }  context.setStatus("Reducing metadata value " + metaTuple.getValue());}  }
class C{  @Override public byte[] asBytes(int rowNumber){  return ByteBuffer.allocate(4).putInt(getInt(rowNumber)).array();}  }
class C{  private static void determineObjectMethodsToGenerate(List<ExecutableElement> methods,AutoCursorTemplateVars vars){  vars.equals=false;  vars.hashCode=false;  vars.toString=false;  for (  ExecutableElement method : methods) {    ObjectMethodToOverride override=objectMethodToOverride(method);    boolean canGenerate=method.getModifiers().contains(Modifier.ABSTRACT) || isJavaLangObject((TypeElement)method.getEnclosingElement());switch (override) {case EQUALS:      vars.equals=canGenerate;    break;case HASH_CODE:  vars.hashCode=canGenerate;break;case TO_STRING:vars.toString=canGenerate;break;}}}  }
class C{  public static boolean isDefaultAsyncConnectionExecutionEnabled(){  return DEFAULT_ASYNC_CONNECTION_EXECUTION_ENABLED;}  }
class C{  public int available() throws IOException {  if (in == null)   throw new XZIOException("Stream closed");  if (exception != null)   throw exception;  if (endReached || seekNeeded || blockDecoder == null)   return 0;  return blockDecoder.available();}  }
class C{  public static int lastIndexOfIgnoreCase(String src,char c,int startIndex,int endIndex){  int total=src.length() - 1;  if (total < 0) {    return -1;  }  if (startIndex >= total) {    startIndex=total;  }  if (endIndex < 0) {    endIndex=0;  }  c=Character.toLowerCase(c);  for (int i=startIndex; i >= endIndex; i--) {    if (Character.toLowerCase(src.charAt(i)) == c) {      return i;    }  }  return -1;}  }
class C{  public HashSet(int initialCapacity,float loadFactor){  map=new HashMap<>(initialCapacity,loadFactor);}  }
class C{  private String toString(final IOperandTreeNode node){  final ArrayList<String> flattenedChildren=new ArrayList<String>();  for (  final IOperandTreeNode child : node.getChildren()) {    flattenedChildren.add(toString(child));  }  if (flattenedChildren.isEmpty()) {    return node.toString();  } else   if (flattenedChildren.size() == 1) {    final ExpressionType type=node.getType();    if (type == ExpressionType.MEMDEREF) {      return "[" + flattenedChildren.get(0) + "]";    } else     if (type == ExpressionType.EXPRESSION_LIST) {      return "{" + Commafier.commafy(flattenedChildren) + "}";    } else {      return node.toString() + (node.toString().isEmpty() ? "" : " ") + flattenedChildren.get(0);    }  } else {    final String value=node.toString();    final StringBuffer stringBuffer=new StringBuffer();    for (int i=0; i < flattenedChildren.size(); i++) {      stringBuffer.append(flattenedChildren.get(i));      if (i != (flattenedChildren.size() - 1)) {        stringBuffer.append(' ');        stringBuffer.append(value);        stringBuffer.append(' ');      }    }    return stringBuffer.toString();  }}  }
class C{  private void registerText(Label label) throws Exception {  Contact contact=label.getContact();  Text value=contact.getAnnotation(Text.class);  if (value != null) {    text=new TextListLabel(label,value);  }}  }
class C{  private void updateRecoverPointVirtualPools(){  log.info("Updating RecoverPoint VirtualPools to enable multi volume consistency.");  DbClient dbClient=getDbClient();  List<URI> virtualPoolURIs=dbClient.queryByType(VirtualPool.class,false);  Iterator<VirtualPool> virtualPools=dbClient.queryIterativeObjects(VirtualPool.class,virtualPoolURIs);  while (virtualPools.hasNext()) {    VirtualPool virtualPool=virtualPools.next();    if (VirtualPool.vPoolSpecifiesProtection(virtualPool) && (virtualPool.getMultivolumeConsistency() == null || !virtualPool.getMultivolumeConsistency())) {      virtualPool.setMultivolumeConsistency(true);      dbClient.persistObject(virtualPool);      log.info("Updating VirtualPool (id={}) to enable multi volume consistency.",virtualPool.getId().toString());    }  }}  }
class C{  protected boolean checkDirectories(){  Path faDirectory=preferencesService.getPreferences().getForgedAlliance().getPath();  return faDirectory != null;}  }
class C{  public double splitPoint(){  return m_splitPoint;}  }
class C{  public boolean isFragmentationUnit(){  return decodeNalUnitType == NalUnitType.FU_A || decodeNalUnitType == NalUnitType.FU_B;}  }
class C{  @SuppressWarnings("rawtypes") public Vertex fetchDescription(JSONObject json,int cascade,Network network,Map<String,Vertex> processed){  if (json.isNullObject()) {    return null;  }  Object id=json.get("id");  Vertex object=processed.get(id);  if (object != null) {    return object;  }  List names=extractText(json.get("labels"));  Object name=null;  if (names.size() > 0) {    name=names.get(0);  }  List descriptions=extractText(json.get("descriptions"));  log("Processing object:",Bot.FINE,id,names);  try {    if ((name instanceof String) && (((String)name).length() > 0)) {      object=network.createObject((String)name);      if (object.hasRelationship(getPrimitive())) {        return object;      }      object.addRelationship(getPrimitive(),network.createVertex(id));      processed.put((String)id,object);      object.addRelationship(Primitive.INSTANTIATION,Primitive.THING);      for (      Object eachName : names) {        if (eachName instanceof String) {          Vertex word=network.createWord((String)eachName);          word.addRelationship(Primitive.MEANING,object);          object.addRelationship(Primitive.WORD,word);          network.associateCaseInsensitivity((String)eachName,object);        }      }      for (      Object description : descriptions) {        if (description instanceof String) {          Vertex paragraph=network.createParagraph((String)description);          if (paragraph.instanceOf(Primitive.PARAGRAPH)) {            object.addRelationship(Primitive.PARAGRAPH,paragraph);            Vertex sentence=paragraph.orderedRelations(Primitive.SENTENCE).get(0);            object.addRelationship(Primitive.SENTENCE,sentence);          } else {            object.addRelationship(Primitive.SENTENCE,paragraph);          }        }      }    } else {      object=network.createVertex();    }    network.save();  } catch (  Exception ioException) {    log(ioException);  }  return object;}  }
class C{  private void drawWind(Canvas canvas,float y,float xOffset){  float cof=(mScreenWidth + xOffset) / (LOADING_ANIMATION_COEFFICIENT / SLOW_DOWN_ANIMATION_COEFFICIENT);  float time=mLoadingAnimationTime;  if (mLastAnimationTime - mLoadingAnimationTime > 0) {    mInverseDirection=true;    time=(LOADING_ANIMATION_COEFFICIENT / SLOW_DOWN_ANIMATION_COEFFICIENT) - mLoadingAnimationTime;  } else {    mNewWindSet=true;    mInverseDirection=false;  }  float x=(mScreenWidth - (time * cof)) + xOffset - mWindLineWidth;  float xEnd=x + mWindLineWidth;  canvas.drawLine(x,y,xEnd,y,mWindPaint);}  }
class C{  protected void assertFuncEquals(final SolrQueryRequest req,final String... inputs) throws Exception {  final String funcName=(new StrParser(inputs[0])).getId();  valParsersTested.add(funcName);  assertQueryEquals(FunctionQParserPlugin.NAME,req,inputs);}  }
class C{  @Override public URLConnection openConnection(URL url) throws IOException {  return openConnection(url,null);}  }
class C{  public ReadMultipleRegistersResponse(Register[] registers){  super();  setFunctionCode(Modbus.READ_MULTIPLE_REGISTERS);  setDataLength(registers.length * 2 + 1);  this.registers=registers;  byteCount=registers.length * 2;}  }
class C{  private void delete(EnumerationContext ctx){  CompletionHandler completionHandler=null;  Query query=Builder.create().addKindFieldClause(ComputeState.class).addFieldClause(ComputeState.FIELD_NAME_PARENT_LINK,ctx.enumRequest.resourceLink()).addRangeClause(ComputeState.FIELD_NAME_UPDATE_TIME_MICROS,NumericRange.createLessThanRange(ctx.enumerationStartTimeInMicros)).build();  QueryTask q=QueryTask.Builder.createDirectTask().addOption(QueryOption.EXPAND_CONTENT).setQuery(query).setResultLimit(QUERY_RESULT_LIMIT).build();  q.tenantLinks=ctx.computeHostDesc.tenantLinks;  logFine("Querying compute resources for deletion");  sendRequest(Operation.createPost(this,ServiceUriPaths.CORE_QUERY_TASKS).setBody(q).setCompletion(completionHandler));}  }
class C{  public static final double fastCos(final double x){  return fastSin(x + ((x > HALF_PI) ? -THREE_HALVES_PI : HALF_PI));}  }
class C{  public T caseTraceCaseDeactivation_(TraceCaseDeactivation_ object){  return null;}  }
class C{  public MPPOrderNodeAsset(MPPWFNodeAsset na,MPPOrderNode PP_Order_Node){  this(PP_Order_Node.getCtx(),0,PP_Order_Node.get_TrxName());  setClientOrg(PP_Order_Node);  setA_Asset_ID(na.getA_Asset_ID());  setPP_Order_ID(PP_Order_Node.getPP_Order_ID());  setPP_Order_Workflow_ID(PP_Order_Node.getPP_Order_Workflow_ID());  setPP_Order_Node_ID(PP_Order_Node.get_ID());}  }
class C{  public static byte[] base64ToBytes(String base64) throws IllegalArgumentException {  if (base64 == null) {    return null;  }  try {    return Base64.decode(base64,Base64.NO_WRAP);  } catch (  IllegalArgumentException e) {    log.error("Returning null on attempt to decode badly formed base64 string: " + base64);    return null;  }}  }
class C{  public void addCompatibleContextType(String contextTypeId){  if (fCompatibleContextTypeIds == null)   fCompatibleContextTypeIds=new HashSet<String>();  fCompatibleContextTypeIds.add(contextTypeId);}  }
class C{  private boolean isCitationsPageEmpty(Eml eml){  boolean citationIsEmpty=isCitationEmpty(eml.getCitation());  if (!citationIsEmpty) {    return false;  }  for (  Citation bibCitation : eml.getBibliographicCitations()) {    boolean isBibCitationEmpty=isCitationEmpty(bibCitation);    if (!isBibCitationEmpty) {      return false;    }  }  return true;}  }
class C{  public Session open(boolean strict) throws Exception {  Reference session=local.get();  if (session != null) {    return session.get();  }  return create(strict);}  }
class C{  @SuppressWarnings("try") private void processInstructionBottomUp(LIRInstruction op){  try (Indent indent=Debug.logAndIndent("handle op %d, %s",op.id(),op)){    op.visitEachTemp(defConsumer);    op.visitEachOutput(defConsumer);    op.visitEachAlive(useConsumer);    op.visitEachState(useConsumer);    op.visitEachInput(useConsumer);  } }  }
class C{  protected void fireDOMSubtreeModifiedEvent(){  AbstractDocument doc=getCurrentDocument();  if (doc.getEventsEnabled()) {    super.fireDOMSubtreeModifiedEvent();    if (getOwnerElement() != null) {      ((AbstractElement)getOwnerElement()).fireDOMSubtreeModifiedEvent();    }  }}  }
class C{  public AddCouponEventCommandImpl(final ShoppingCartCommandRegistry registry){  super(registry);}  }
class C{  private void isLegal(List<? extends DataSet<?>> dataSets){  if (dataSets == null)   return;  for (int i=0; i < dataSets.size(); i++) {    if (dataSets.get(i).getYVals().size() > mXVals.size()) {      throw new IllegalArgumentException("One or more of the DataSet Entry arrays are longer than the x-values array of this ChartData object.");    }  }}  }
class C{  private float spacing(MotionEvent event){  float x=event.getX(0) - event.getX(1);  float y=event.getY(0) - event.getY(1);  return (float)Math.sqrt(x * x + y * y);}  }
class C{  public List<DiffEntry> calculateBranchDiffs(String targetRef,String reviewRef) throws GitClientException {  try (Git git=new Git(repo)){    return calculateBranchDiffs(git,targetRef,reviewRef);  } catch (  Exception e) {    throw new GitClientException("Error loading branch diffs for " + reviewRef + " and "+ targetRef,e);  }}  }
class C{  private void emitGetter(Method method,String methodName,String fieldName,String returnType,StringBuilder builder){  builder.append("    @Override\n    public ");  builder.append(returnType);  builder.append(" ");  builder.append(methodName);  builder.append("() {\n");  Class<?> returnTypeClass=method.getReturnType();  if (isList(returnTypeClass) || isMap(returnTypeClass)) {    builder.append("      ");    builder.append(getEnsureName(fieldName));    builder.append("();\n");  }  builder.append("      return ");  builder.append(fieldName);  builder.append(";\n    }\n\n");}  }
class C{  public Group createGroup(Composite parent,String text){  Group group=new Group(parent,SWT.NO_FOCUS | SWT.SHADOW_NONE);  group.setText(text);  group.setBackground(getColors().getBackground());  group.setForeground(getColors().getForeground());  return group;}  }
class C{  public String valueOf(double d){  return Double.toString(d);}  }
class C{  public static Collection<DebuggerException> mergeExceptionsSettings(final DebugTargetSettings target,final Collection<DebuggerException> exceptions,final int debuggerId) throws CouldntLoadDataException {  final Map<Long,DebuggerException> exceptionsMap=getExceptionsMap(exceptions);  for (  final DebuggerException dbgException : exceptions) {    final String setting=target.readSetting(DebuggerException.getSettingKey(dbgException,debuggerId));    if (setting != null) {      final DebuggerExceptionHandlingAction handlingAction=DebuggerExceptionHandlingAction.convertToHandlingAction(Integer.valueOf(setting));      final DebuggerException newException=new DebuggerException(dbgException.getExceptionName(),dbgException.getExceptionCode(),handlingAction);      exceptionsMap.put(dbgException.getExceptionCode(),newException);    }  }  return exceptionsMap.values();}  }
class C{  private static boolean isNativeSheetSupported(){  return isNativeSheetSupported;}  }
class C{  private void initialize(){  time_low=0;  time_mid=0;  time_hi_and_version=0;  clock_seq_low=0;  clock_seq_hi_and_reserved=0;  for (int j=0; j < node.length; j++) {    node[j]=0x00;  }}  }
class C{  public ShapeData(DrawContext dc,AntennaAxes shape){  super(dc,shape.minExpiryTime,shape.maxExpiryTime);}  }
class C{  public byte[] convertHexStringToBinary(String hexString) throws IllegalArgumentException {  int length=hexString.length();  if (length % 2 != 0) {    throw new IllegalArgumentException("The provided hex String must be an even length, but was of length " + length + ": "+ hexString);  }  byte[] binary=new byte[length / 2];  for (int i=0; i < length; i+=2) {    char highBitsChar=hexString.charAt(i);    char lowBitsChar=hexString.charAt(i + 1);    int highBits=hexCharToInt(highBitsChar,hexString) << 4;    int lowBits=hexCharToInt(lowBitsChar,hexString);    binary[i / 2]=(byte)(highBits + lowBits);  }  return binary;}  }
class C{  public static OMArc read(DataInputStream dis) throws IOException {  return read(dis,null);}  }
class C{  public static void install(Globals globals){  globals.compiler=instance;  globals.loader=instance;}  }
class C{  private void analize(){  StringTokenizer tokenizer=new StringTokenizer(sourceData,",");  String nextToken=null;  nextToken=tokenizer.nextToken();  name=nextToken.substring(1,nextToken.length() - 1);  type=Integer.parseInt(tokenizer.nextToken());  dataType=Integer.parseInt(tokenizer.nextToken());  dataLen=Integer.parseInt(tokenizer.nextToken());  flags=Integer.parseInt(tokenizer.nextToken());  nextToken=tokenizer.nextToken();  defVal=nextToken.substring(1,nextToken.length() - 1);  nextToken=tokenizer.nextToken();  remarks=nextToken.substring(1,nextToken.length() - 1);}  }
class C{  public void prepareForReplace(){  mPreparedStatement=getStatement(true);  mPreparedStatement.clearBindings();}  }
class C{  @PrePersist protected void prePersist(){  if (null == this.transportUnit) {    throw new DomainModelRuntimeException("Not allowed to create a new LoadUnit without a TransportUnit");  }}  }
class C{  public boolean mergeWithSlots(@Nonnull IInventory inv,@Nullable ItemStack stack,int[] slots){  if (stack == null)   return false;  boolean anythingMerged=false;  for (  int slot : slots) {    if (stack.stackSize <= 0)     break;    anythingMerged|=mergeWithSlot(inv,stack,slot);  }  return anythingMerged;}  }
class C{  boolean cancel(int propertyConstant){  if ((mPropertyMask & propertyConstant) != 0 && mNameValuesHolder != null) {    int count=mNameValuesHolder.size();    for (int i=0; i < count; ++i) {      NameValuesHolder nameValuesHolder=mNameValuesHolder.get(i);      if (nameValuesHolder.mNameConstant == propertyConstant) {        mNameValuesHolder.remove(i);        mPropertyMask&=~propertyConstant;        return true;      }    }  }  return false;}  }
class C{  private synchronized void reportHeartbeatFailure(){  Stats.incr(String.format("heartbeat_failures_%s_%d",host,port));  currentConsecutiveSuccesses=0;  currentConsecutiveFailures+=1;  if (!isLive) {    Stats.incr(String.format("healthcheck_dead_%s_%d",host,port));    return;  }  if (currentConsecutiveFailures >= consecutiveFailures) {    LOG.info(String.format("Server %s:%d is determined as dead by health check.",host,port));    Stats.incr(String.format("healthcheck_dead_%s_%d",host,port));    isLive=false;  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodehasattributes03.class,args);}  }
class C{  Account(){  name="";  id=0;  balance=0;  annualInterestRate=0;  dateCreated=new Date();  transactions=new ArrayList<Transaction>();}  }
class C{  public void arrangeFramesVertically(){  Component[] allFrames=getAllFrames();  if (allFrames.length == 0) {    return;  }  manager.setNormalSize();  int vertFrames=(int)Math.floor(Math.sqrt(allFrames.length));  int horFrames=(int)Math.ceil(Math.sqrt(allFrames.length));  int frameWidth=getBounds().width / horFrames;  int frameHeight=getBounds().height / vertFrames;  int x=0;  int y=0;  int frameIdx=0;  for (int horCnt=0; horCnt < horFrames - 1; horCnt++) {    y=0;    for (int vertCnt=0; vertCnt < vertFrames; vertCnt++) {      try {        ((JInternalFrame)allFrames[frameIdx]).setMaximum(false);      } catch (      PropertyVetoException e) {        e.printStackTrace();      }      allFrames[frameIdx].setBounds(x,y,frameWidth,frameHeight);      frameIdx++;      y=y + frameHeight;    }    x=x + frameWidth;  }  frameHeight=getBounds().height / (allFrames.length - frameIdx);  y=0;  for (; frameIdx < allFrames.length; frameIdx++) {    try {      ((JInternalFrame)allFrames[frameIdx]).setMaximum(false);    } catch (    PropertyVetoException e) {      e.printStackTrace();    }    allFrames[frameIdx].setBounds(x,y,frameWidth,frameHeight);    y=y + frameHeight;  }  checkDesktopSize();}  }
class C{  private void createTable() throws SQLException {  Connection c=null;  Statement s=null;  try {    c=getDataSource().getConnection();    s=c.createStatement();    s.executeQuery(sqlInitCreateTable);    c.commit();  }  finally {    closeQuietly(c,s,null);  }}  }
class C{  private long monthToDayOfYear(long month,boolean isLeapYear){  long day=0;  for (int i=0; i < month && i < 12; i++) {    day+=DAYS_IN_MONTH[i];    if (i == 1 && isLeapYear)     day++;  }  return day;}  }
class C{  public RegionAccessException(String s,String regionFullPath,Set missingRoles){  super(s,regionFullPath);  this.missingRoles=missingRoles;  if (this.missingRoles == null) {    this.missingRoles=Collections.EMPTY_SET;  }}  }
class C{  public static short toShortFromNibbles(byte[] nibbles){  return toShort(nibbles[0],nibbles[1],nibbles[2],nibbles[3]);}  }
class C{  static public void assertEquals(String expected,String actual){  assertEquals(null,expected,actual);}  }
class C{  private CIMInstance commonVolumeUpdate(DbClient dbClient,WBEMClient client,Volume volume,CIMObjectPath volumePath){  CIMInstance volumeInstance=null;  try {    _log.info("Executing CIMInstance update for volume {} at volume path {}",volume.forDisplay(),volumePath);    volumeInstance=client.getInstance(volumePath,true,false,null);    if (volumeInstance != null) {      String alternateName=CIMPropertyFactory.getPropertyValue(volumeInstance,SmisConstants.CP_NAME);      volume.setAlternateName(alternateName);      String wwn=CIMPropertyFactory.getPropertyValue(volumeInstance,SmisConstants.CP_WWN_NAME);      volume.setWWN(wwn.toUpperCase());      volume.setProvisionedCapacity(getProvisionedCapacityInformation(client,volumeInstance));      volume.setAllocatedCapacity(getAllocatedCapacityInformation(client,volumeInstance));      String accessState=CIMPropertyFactory.getPropertyValue(volumeInstance,SmisConstants.CP_ACCESS);      String[] statusDescriptions=CIMPropertyFactory.getPropertyArray(volumeInstance,SmisConstants.CP_STATUS_DESCRIPTIONS);      List<String> statusDescriptionList=Arrays.asList(statusDescriptions);      if (!volume.checkForRp()) {        volume.setAccessState(SmisUtils.generateAccessState(accessState,statusDescriptionList));      }    }    volume.setInactive(false);  } catch (  Exception e) {    _log.error("Caught an exception while trying to update attributes for volume {} and volume path {}",volume.forDisplay(),volumePath,e);    setPostProcessingFailedStatus("Caught an exception while trying to update volume attributes: " + e.getMessage());  }  return volumeInstance;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:33.839 -0500",hash_original_method="B73E52BAF4D022DC2D77FE197F842436",hash_generated_method="68811D59D85B0B3BC00DE3DBDD6E8117") public void scheduleSync(Account requestedAccount,String requestedAuthority,Bundle extras,long delay,boolean onlyThoseWithUnkownSyncableState){  boolean isLoggable=Log.isLoggable(TAG,Log.VERBOSE);  final boolean backgroundDataUsageAllowed=!mBootCompleted || getConnectivityManager().getBackgroundDataSetting();  if (extras == null)   extras=new Bundle();  Boolean expedited=extras.getBoolean(ContentResolver.SYNC_EXTRAS_EXPEDITED,false);  if (expedited) {    delay=-1;  }  Account[] accounts;  if (requestedAccount != null) {    accounts=new Account[]{requestedAccount};  } else {    accounts=mAccounts;    if (accounts.length == 0) {      if (isLoggable) {        Log.v(TAG,"scheduleSync: no accounts configured, dropping");      }      return;    }  }  final boolean uploadOnly=extras.getBoolean(ContentResolver.SYNC_EXTRAS_UPLOAD,false);  final boolean manualSync=extras.getBoolean(ContentResolver.SYNC_EXTRAS_MANUAL,false);  if (manualSync) {    extras.putBoolean(ContentResolver.SYNC_EXTRAS_IGNORE_BACKOFF,true);    extras.putBoolean(ContentResolver.SYNC_EXTRAS_IGNORE_SETTINGS,true);  }  final boolean ignoreSettings=extras.getBoolean(ContentResolver.SYNC_EXTRAS_IGNORE_SETTINGS,false);  int source;  if (uploadOnly) {    source=SyncStorageEngine.SOURCE_LOCAL;  } else   if (manualSync) {    source=SyncStorageEngine.SOURCE_USER;  } else   if (requestedAuthority == null) {    source=SyncStorageEngine.SOURCE_POLL;  } else {    source=SyncStorageEngine.SOURCE_SERVER;  }  final HashSet<String> syncableAuthorities=new HashSet<String>();  for (  RegisteredServicesCache.ServiceInfo<SyncAdapterType> syncAdapter : mSyncAdapters.getAllServices()) {    syncableAuthorities.add(syncAdapter.type.authority);  }  if (requestedAuthority != null) {    final boolean hasSyncAdapter=syncableAuthorities.contains(requestedAuthority);    syncableAuthorities.clear();    if (hasSyncAdapter)     syncableAuthorities.add(requestedAuthority);  }  final boolean masterSyncAutomatically=mSyncStorageEngine.getMasterSyncAutomatically();  for (  String authority : syncableAuthorities) {    for (    Account account : accounts) {      int isSyncable=mSyncStorageEngine.getIsSyncable(account,authority);      if (isSyncable == 0) {        continue;      }      final RegisteredServicesCache.ServiceInfo<SyncAdapterType> syncAdapterInfo=mSyncAdapters.getServiceInfo(SyncAdapterType.newKey(authority,account.type));      if (syncAdapterInfo == null) {        continue;      }      final boolean allowParallelSyncs=syncAdapterInfo.type.allowParallelSyncs();      final boolean isAlwaysSyncable=syncAdapterInfo.type.isAlwaysSyncable();      if (isSyncable < 0 && isAlwaysSyncable) {        mSyncStorageEngine.setIsSyncable(account,authority,1);        isSyncable=1;      }      if (onlyThoseWithUnkownSyncableState && isSyncable >= 0) {        continue;      }      if (!syncAdapterInfo.type.supportsUploading() && uploadOnly) {        continue;      }      boolean syncAllowed=(isSyncable < 0) || ignoreSettings || (backgroundDataUsageAllowed && masterSyncAutomatically && mSyncStorageEngine.getSyncAutomatically(account,authority));      if (!syncAllowed) {        if (isLoggable) {          Log.d(TAG,"scheduleSync: sync of " + account + ", "+ authority+ " is not allowed, dropping request");        }        continue;      }      Pair<Long,Long> backoff=mSyncStorageEngine.getBackoff(account,authority);      long delayUntil=mSyncStorageEngine.getDelayUntilTime(account,authority);      final long backoffTime=backoff != null ? backoff.first : 0;      if (isSyncable < 0) {        Bundle newExtras=new Bundle();        newExtras.putBoolean(ContentResolver.SYNC_EXTRAS_INITIALIZE,true);        if (isLoggable) {          Log.v(TAG,"scheduleSync:" + " delay " + delay + ", source "+ source+ ", account "+ account+ ", authority "+ authority+ ", extras "+ newExtras);        }        scheduleSyncOperation(new SyncOperation(account,source,authority,newExtras,0,backoffTime,delayUntil,allowParallelSyncs));      }      if (!onlyThoseWithUnkownSyncableState) {        if (isLoggable) {          Log.v(TAG,"scheduleSync:" + " delay " + delay + ", source "+ source+ ", account "+ account+ ", authority "+ authority+ ", extras "+ extras);        }        scheduleSyncOperation(new SyncOperation(account,source,authority,extras,delay,backoffTime,delayUntil,allowParallelSyncs));      }    }  }}  }
class C{  public synchronized void flush() throws IOException {  checkNotClosed();  trimToSize();  journalWriter.flush();}  }
class C{  public void stopRecording() throws IOException, SerializationException, BusinessException {synchronized (this) {    if (storageRecorder.isRecordingOn() || storageRecorder.isRecordingScheduled()) {      boolean autoFinalize=storageRecorder.getRecordingProperties().isAutoFinalize();      StorageWriter storageWriter=storageRecorder.getStorageWriter();      storageRecorder.stopRecording();      recorderStorageData.markOpened();      openedStoragesMap.put(recorderStorageData,storageWriter);      if (autoFinalize) {        this.closeStorage(recorderStorageData);      }      writeStorageDataToDisk(recorderStorageData);      recorderStorageData=null;    }  }}  }
class C{  public boolean isYieldOnPoll(){  return yieldOnPoll;}  }
class C{  public boolean isEscaped(){  return isEscaped;}  }
class C{  protected void learnDeviceFromArpResponseData(Ethernet eth,DatapathId swdpid,OFPort port){  if (!(eth.getPayload() instanceof ARP))   return;  ARP arp=(ARP)eth.getPayload();  MacAddress dlAddr=eth.getSourceMACAddress();  MacAddress senderAddr=MacAddress.of(arp.getSenderHardwareAddress());  if (dlAddr.equals(senderAddr))   return;  if (senderAddr.isBroadcast() || senderAddr.isMulticast())   return;  if (senderAddr.getLong() == 0)   return;  VlanVid vlan=VlanVid.ofVlan(eth.getVlanID());  IPv4Address nwSrc=IPv4Address.of(arp.getSenderProtocolAddress());  Entity e=new Entity(senderAddr,((vlan.getVlan() >= 0) ? vlan : null),((nwSrc.getInt() != 0) ? nwSrc : null),swdpid,port,new Date());  learnDeviceByEntity(e);}  }
class C{  public static void bailout(String reason){}  }
class C{  private void updateFSExport(FileShare fsObj,DbClient dbClient,VNXeApiClient apiClient){  _logger.info("upading file export. ");  FSExportMap exports=fsObj.getFsExports();  if (exports == null) {    _logger.info("No exports found in the file system. ");    return;  }  if (exportInfo != null) {    FileExport export=exportInfo.getFileExport();    FileExport existExport=exports.get(export.getFileExportKey());    if (existExport != null) {      exports.remove(existExport.getFileExportKey());      dbClient.persistObject(fsObj);    }  }}  }
class C{  private void sizeIt(){  m_frame.pack();}  }
class C{  @Override public void generateCode(BlockScope currentScope,boolean valueRequired){  MethodBinding codegenBinding=this.binding instanceof PolymorphicMethodBinding ? this.binding : this.binding.original();  boolean isStatic=codegenBinding.isStatic();  if (isStatic) {    this.receiver.generateCode(currentScope,false);  } else   if ((this.bits & ASTNode.DepthMASK) != 0 && this.receiver.isImplicitThis()) {  } else {    this.receiver.generateCode(currentScope,true);  }  generateArguments(this.binding,this.arguments,currentScope);}  }
class C{  public CreationTool(Figure prototype,@Nullable Map<AttributeKey,Object> attributes,@Nullable String name){  this.prototype=prototype;  this.prototypeAttributes=attributes;  if (name == null) {    ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.draw.Labels");    name=labels.getString("edit.createFigure.text");  }  this.presentationName=name;}  }
class C{  private void prepareLinkSettings(ConsistencyGroupCopyUID newProductionCopyUID) throws RecoverPointException {  logger.info("Preparing link settings between new production copy and local/remote copies after failover.");  String cgName=null;  String newProductionCopyName=null;  try {    ConsistencyGroupSettings groupSettings=functionalAPI.getGroupSettings(newProductionCopyUID.getGroupUID());    List<ConsistencyGroupLinkSettings> cgLinkSettings=groupSettings.getActiveLinksSettings();    List<ConsistencyGroupCopyUID> productionCopiesUIDs=groupSettings.getProductionCopiesUIDs();    newProductionCopyName=functionalAPI.getGroupCopyName(newProductionCopyUID);    cgName=functionalAPI.getGroupName(newProductionCopyUID.getGroupUID());    for (    ConsistencyGroupCopyUID existingProductionCopyUID : productionCopiesUIDs) {      List<ConsistencyGroupCopySettings> copySettings=groupSettings.getGroupCopiesSettings();      ConsistencyGroupLinkSettings linkSettings=null;      String existingProductionCopyName=functionalAPI.getGroupCopyName(existingProductionCopyUID);      for (      ConsistencyGroupCopySettings copySetting : copySettings) {        if (!RecoverPointUtils.copiesEqual(copySetting.getCopyUID(),existingProductionCopyUID) && !RecoverPointUtils.copiesEqual(copySetting.getCopyUID(),newProductionCopyUID)) {          String copyName=functionalAPI.getGroupCopyName(copySetting.getCopyUID());          logger.info(String.format("Attempting to prepare link between %s and %s.",newProductionCopyName,copyName));          linkSettings=findLinkSettings(cgLinkSettings,newProductionCopyUID.getGlobalCopyUID(),copySetting.getCopyUID().getGlobalCopyUID(),newProductionCopyName,copyName);          if (linkSettings == null) {            linkSettings=findLinkSettings(cgLinkSettings,existingProductionCopyUID.getGlobalCopyUID(),copySetting.getCopyUID().getGlobalCopyUID(),existingProductionCopyName,copyName);            if (linkSettings != null) {              logger.info(String.format("Generate new link settings between %s and %s based on existing link settings between the current production copy %s and %s.",newProductionCopyName,copyName,existingProductionCopyName,copyName));              ConsistencyGroupLinkUID cgLinkUID=linkSettings.getGroupLinkUID();              GlobalCopyUID sourceCopy=newProductionCopyUID.getGlobalCopyUID();              GlobalCopyUID targetCopy=copySetting.getCopyUID().getGlobalCopyUID();              cgLinkUID.setFirstCopy(sourceCopy);              cgLinkUID.setSecondCopy(targetCopy);              ConsistencyGroupLinkPolicy linkPolicy=linkSettings.getLinkPolicy();              if (sourceCopy.getClusterUID().getId() == targetCopy.getClusterUID().getId()) {                logger.info(String.format("Creating new local copy link settings between %s and %s, for consistency group %s.",newProductionCopyName,copyName,cgName));                linkPolicy.getProtectionPolicy().setReplicatingOverWAN(false);              } else {                logger.info(String.format("Creating new remote copy link settings between %s and %s, for consistency group %s.",newProductionCopyName,copyName,cgName));                linkPolicy.getProtectionPolicy().setReplicatingOverWAN(true);              }              functionalAPI.addConsistencyGroupLink(cgLinkUID,linkPolicy);            }          }        }      }    }  } catch (  FunctionalAPIActionFailedException_Exception e) {    throw RecoverPointException.exceptions.failedToFailoverCopy(newProductionCopyName,cgName,e);  }catch (  FunctionalAPIInternalError_Exception e) {    throw RecoverPointException.exceptions.failedToFailoverCopy(newProductionCopyName,cgName,e);  }}  }
class C{  public void append(StringBuffer buffer,String fieldName,float[] array,Boolean fullDetail){  appendFieldStart(buffer,fieldName);  if (array == null) {    appendNullText(buffer,fieldName);  } else   if (isFullDetail(fullDetail)) {    appendDetail(buffer,fieldName,array);  } else {    appendSummary(buffer,fieldName,array);  }  appendFieldEnd(buffer,fieldName);}  }
class C{  public void deleteDhcpRelayService(String id,FutureCallback<Void> responseCallback) throws IOException {  deleteAsync(SERVICES_BASE_PATH + "/" + id,HttpStatus.SC_OK,responseCallback);}  }
class C{  public boolean hasFatalError(){  return fSeverity == FATAL;}  }
class C{  public void render(java.awt.Graphics graphics){  Debug.message("eomg","EditableOMPoly.render()");  State state=getStateMachine().getState();  if (poly != null && !(state instanceof PolyUndefinedState)) {    poly.setVisible(true);    poly.render(graphics);    poly.setVisible(false);  } else {    Debug.message("eomg","EditableOMPoly.render: null or undefined poly.");    return;  }  if (state instanceof GraphicSelectedState || state instanceof PolyAddNodeState || state instanceof PolyDeleteNodeState) {    for (    GrabPoint gb : polyGrabPoints) {      if (gb != null) {        gb.setVisible(true);        gb.render(graphics);        gb.setVisible(false);      }    }  }  if (state instanceof GraphicSelectedState || state instanceof GraphicEditState) {    if (gpo != null && poly.getRenderType() == OMGraphic.RENDERTYPE_OFFSET) {      gpo.setVisible(true);      gpo.render(graphics);      gpo.setVisible(false);    }  }}  }
class C{  public IOContainer prepend(IOObject object){  return prepend(new IOObject[]{object});}  }
class C{  public void addAll(Collection<BugInstance> collection){  for (  BugInstance bug : collection) {    add(bug);  }}  }
class C{  public boolean isImageDefined(Organization organization){  boolean flag=imgSrv.read(organization.getKey(),ImageType.ORGANIZATION_IMAGE) != null;  return flag;}  }
class C{  protected Font resolveFont(SharedContext ctx,String font,float size,IdentValue weight,IdentValue style,IdentValue variant){  if (font.startsWith("\"")) {    font=font.substring(1);  }  if (font.endsWith("\"")) {    font=font.substring(0,font.length() - 1);  }  if (font.equalsIgnoreCase("serif")) {    font="Serif";  }  if (font.equalsIgnoreCase("sans-serif")) {    font="SansSerif";  }  if (font.equalsIgnoreCase("monospace")) {    font="Monospaced";  }  if (font.equals("Serif") && style == IdentValue.OBLIQUE) {    font="SansSerif";  }  if (font.equals("SansSerif") && style == IdentValue.ITALIC) {    font="Serif";  }  String fontInstanceName=getFontInstanceHashName(ctx,font,size,weight,style,variant);  if (instanceHash.containsKey(fontInstanceName)) {    return instanceHash.get(fontInstanceName);  }  if (availableFontsHash.containsKey(font)) {    Font possiblyNullFont=availableFontsHash.get(font);    Font rootFont=null;    if (possiblyNullFont != null) {      rootFont=possiblyNullFont;    } else {      rootFont=new Font(font,Font.PLAIN,1);      availableFontsHash.put(font,rootFont);    }    Font fnt=createFont(ctx,rootFont,size,weight,style,variant);    instanceHash.put(fontInstanceName,fnt);    return fnt;  }  return null;}  }
class C{  @SuppressWarnings({"JavaDoc"}) public static <O,A>Set<A> valuesOf(Attribute<O,A> attribute,ResultSet<O> resultSet){  Set<A> attributeValues=new LinkedHashSet<A>();  for (  O object : resultSet) {    for (    A value : attribute.getValues(object,noQueryOptions())) {      attributeValues.add(value);    }  }  return attributeValues;}  }
class C{  private static boolean isIPv6LinkLocalAddress(Inet6Address addr){  byte[] addrBytes=addr.getAddress();  return ((addrBytes[0] == (byte)0xfe) && (addrBytes[1] == (byte)0x80));}  }
class C{  private double avgNoNeg(double value){  double v=avg(value);  return (v <= 0) ? 0 : v;}  }
class C{  public static double limitCenterElevation(double value,OrbitViewLimits viewLimits){  if (viewLimits == null) {    String message=Logging.getMessage("nullValue.ViewLimitsIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  double[] limits=viewLimits.getCenterElevationLimits();  double newValue=value;  if (value < limits[0]) {    newValue=limits[0];  } else   if (value > limits[1]) {    newValue=limits[1];  }  return newValue;}  }
class C{  protected boolean isWriterActive(){  return activeWriter.isActiveLock();}  }
class C{  public double computeAverageLocalOfObservations(int[] reordering) throws Exception {  int N=continuousData.length;  if (!tryKeepAllPairsNorms || (N > MAX_DATA_SIZE_FOR_KEEP_ALL_PAIRS_NORM)) {    int[] originalDiscreteData=discreteData;    discreteData=MatrixUtils.extractSelectedTimePoints(discreteData,reordering);    double newMI=computeAverageLocalOfObservationsWhileComputingDistances();    discreteData=originalDiscreteData;    return newMI;  }  int[] reorderedDiscreteData=MatrixUtils.extractSelectedTimePoints(discreteData,reordering);  if (xNorms == null) {    computeNorms();  }  double averageDiGammas=0;  double avNx=0;  double avNy=0;  for (int t=0; t < N; t++) {    double eps_x=MatrixUtils.kthMinSubjectTo(xNorms[t],k,reorderedDiscreteData,reorderedDiscreteData[t]);    int n_x=0;    for (int t2=0; t2 < N; t2++) {      if (xNorms[t][t2] <= eps_x) {        n_x++;      }    }    int n_y=counts[reorderedDiscreteData[t]] - 1;    avNx+=n_x;    avNy+=n_y;    averageDiGammas+=MathsUtils.digamma(n_x) + MathsUtils.digamma(n_y);  }  averageDiGammas/=(double)N;  if (debug) {    avNx/=(double)N;    avNy/=(double)N;    System.out.println(String.format("Average n_x=%.3f, Average n_y=%.3f",avNx,avNy));  }  mi=MathsUtils.digamma(k) - averageDiGammas + MathsUtils.digamma(N);  miComputed=true;  return mi;}  }
class C{  private static FolderDataSession isLaunchDistribution(Session session,Integer bookID,Integer launchDistOutRegister,String entidad,FolderDataSession data) throws NumberFormatException, HibernateException {  boolean launchDistribution=false;  if ((Repository.getInstance(entidad).isInBook(bookID).booleanValue() || (Repository.getInstance(entidad).isOutBook(bookID).booleanValue() && launchDistOutRegister.intValue() == 1)) && data.isCompletedState() && data.isDistributeRegInAccepted()) {    ScrOrg scrorg=null;    if ((data.getAxsfOld() != null) && (data.getOldAttributeValue("fld8") != null)) {      scrorg=(ScrOrg)session.load(ScrOrg.class,new Integer(data.getOldAttributeValueAsString("fld8")));    } else {      if (!data.isCreate() && data.getAxsfOld() != null) {        scrorg=(ScrOrg)session.load(ScrOrg.class,new Integer(data.getOldAttributeValueAsString("fld8")));      } else {        if (data.getNewAttributeValue("fld8") != null) {          scrorg=(ScrOrg)session.load(ScrOrg.class,new Integer(data.getNewAttributeValueAsString("fld8")));        }      }    }    launchDistribution=scrorg != null && scrorg.getScrTypeadm() != null && scrorg.getScrTypeadm().getId().equals(new Integer(1));    if (!data.isCreate() && (data.getChangedFields().get(new Integer(6)) == null)) {      if (data.changedContainsKey(new Integer(8))) {        Object[] value=(Object[])data.changedGet(new Integer(8));        Object oldValue=value[0];        Object newValue=value[1];        if (!isAuditFieldModif(oldValue,newValue) || newValue == null) {          launchDistribution=false;          data.getChangedFields().remove(new Integer(8));        }      } else {        if (!isChangeFieldFld8(data)) {          launchDistribution=false;        }      }    }    if (launchDistribution) {      data.setLaunchDistributionType(1);    }    if (log.isDebugEnabled()) {      log.debug("************** ANALIZANDO LAUNCHDISTRIBUTION [" + launchDistribution + "]");    }  }  data.setLaunchDistribution(launchDistribution);  return data;}  }
class C{  public static int calculateEngineRating(Aero unit,int tonnage,int desiredSafeThrust){  int rating;  long eType=unit.getEntityType();  if (eType == Entity.ETYPE_CONV_FIGHTER) {    rating=(tonnage * desiredSafeThrust);  } else   if (eType == Entity.ETYPE_AERO) {    rating=(tonnage * (desiredSafeThrust - 2));  } else {    rating=0;  }  if (unit.isPrimitive()) {    double dRating=rating;    dRating*=1.2;    if ((dRating % 5) != 0) {      dRating=(dRating - (dRating % 5)) + 5;    }    rating=(int)dRating;  }  return rating;}  }
class C{  public SCirc(LLPoint ll1,short width,short height){  super(GraphicType.GT_Circle,RenderType.RT_Offset,LineType.LT_Unknown,DeclutterType.DC_None);  ll1_=ll1;  major_=0f;  minor_=0f;  p1_=new XYPoint((short)0,(short)0);  height_=height;  width_=width;}  }
class C{  public void testBadStreamSize(){  ThreadLocalRandom r=ThreadLocalRandom.current();  Runnable[] throwingActions={null,null,null,null,null,null};  assertThrows(IllegalArgumentException.class,throwingActions);}  }
class C{  private void extractType(Map<String,DimensionObject<String>> tuple){  Iterator<Entry<String,DimensionObject<String>>> iterator=tuple.entrySet().iterator();  String randomKey=null;  if (iterator.hasNext()) {    randomKey=iterator.next().getKey();  }  String[] split=randomKey.split("\\|");  Number filterId=new Integer(split[3]);  recordType.put(LogstreamUtil.FILTER,filterId);}  }
class C{  public void onDrawerOpened(View drawerView){  super.onDrawerOpened(drawerView);  activity.invalidateOptionsMenu();}  }
class C{  private static int readStringIndex(ByteBuffer bs){  int offsetIndex=readULeb128i(bs);  return offsetIndex - 1;}  }
class C{  public int length(){  return this.myArrayList.size();}  }
class C{  public static LogFragment newInstance(String param1,String param2){  LogFragment fragment=new LogFragment();  Bundle args=new Bundle();  args.putString(ARG_PARAM1,param1);  args.putString(ARG_PARAM2,param2);  fragment.setArguments(args);  return fragment;}  }
class C{  public static boolean isPowerOf2UsingANDoperator(long n){  return n != 0 && (n & (n - 1)) == 0;}  }
class C{  public static Clustering kMeans_gta(int k,Clustering clustering,Clustering gtClustering){  ArrayList<CFCluster> microclusters=new ArrayList<CFCluster>();  for (int i=0; i < clustering.size(); i++) {    if (clustering.get(i) instanceof CFCluster) {      microclusters.add((CFCluster)clustering.get(i));    } else {      System.out.println("Unsupported Cluster Type:" + clustering.get(i).getClass() + ". Cluster needs to extend moa.cluster.CFCluster");    }  }  int n=microclusters.size();  assert (k <= n);  Random random=new Random(0);  Cluster[] centers=new Cluster[k];  int K=gtClustering.size();  for (int i=0; i < k; i++) {    if (i < K) {      centers[i]=new SphereCluster(gtClustering.get(i).getCenter(),0);    } else {      int rid=random.nextInt(n);      centers[i]=new SphereCluster(microclusters.get(rid).getCenter(),0);    }  }  return cleanUpKMeans(kMeans(k,centers,microclusters),microclusters);}  }
class C{  public CAddressSpacesTable(final JTree projectTree,final IDatabase database,final INaviProject project,final IViewContainer container){  super(projectTree,new CAddressSpacesModel(project),new CAddressSpacesTableHelp());  m_database=Preconditions.checkNotNull(database,"IE02871: database argument can not be null");  m_project=Preconditions.checkNotNull(project,"IE02872: project argument can not be null");  m_container=Preconditions.checkNotNull(container,"IE02873: container argument can not be null");  setDefaultRenderer(Object.class,new AddressSpaceLoadedRenderer());  final InputMap windowImap=getInputMap(JComponent.WHEN_FOCUSED);  windowImap.put(HotKeys.LOAD_HK.getKeyStroke(),"LOAD");  getActionMap().put("LOAD",CActionProxy.proxy(new LoadAddressSpaceAction()));}  }
class C{  @Override protected void onReset(){  super.onReset();  onStopLoading();  if (mPackageObserver != null) {    getContext().unregisterReceiver(mPackageObserver);    mPackageObserver=null;  }}  }
class C{  public String name(){  return m_Name;}  }
class C{  public TokenMap(int size){  this(size,false);}  }
class C{  public TPIgnoreCache(){}  }
class C{  protected void makeWidgets(){  String locText;  GridBagLayout gridbag=new GridBagLayout();  GridBagConstraints c=new GridBagConstraints();  Insets leftInsets=new Insets(0,10,0,10);  Insets centerInsets=new Insets(0,0,0,0);  Insets rightInsets=new Insets(0,0,0,10);  setLayout(gridbag);  locText=i18n.get(DMSCoordPanel.class,"border","Degrees|Minutes|Seconds");  setBorder(new TitledBorder(new EtchedBorder(),locText));  locText=i18n.get(DMSCoordPanel.class,"latlabel","Latitude DMS: ");  JLabel latlabel=new JLabel(locText);  c.gridx=0;  c.fill=GridBagConstraints.NONE;  c.weightx=0f;  c.insets=leftInsets;  c.anchor=GridBagConstraints.EAST;  gridbag.setConstraints(latlabel,c);  add(latlabel);  c.gridx=GridBagConstraints.RELATIVE;  degLat=new JTextField(4);  c.fill=GridBagConstraints.HORIZONTAL;  c.weightx=.33f;  c.insets=centerInsets;  gridbag.setConstraints(degLat,c);  add(degLat);  minLat=new JTextField(4);  gridbag.setConstraints(minLat,c);  add(minLat);  secLat=new JTextField(4);  c.insets=rightInsets;  gridbag.setConstraints(secLat,c);  add(secLat);  locText=i18n.get(DMSCoordPanel.class,"lonlabel","Longitude DMS: ");  JLabel lonlabel=new JLabel(locText);  c.gridx=0;  c.gridy=1;  c.fill=GridBagConstraints.NONE;  c.weightx=0f;  c.insets=leftInsets;  c.anchor=GridBagConstraints.EAST;  gridbag.setConstraints(lonlabel,c);  add(lonlabel);  c.gridx=GridBagConstraints.RELATIVE;  degLon=new JTextField(4);  c.fill=GridBagConstraints.HORIZONTAL;  c.weightx=.33f;  c.insets=centerInsets;  gridbag.setConstraints(degLon,c);  add(degLon);  minLon=new JTextField(4);  gridbag.setConstraints(minLon,c);  add(minLon);  secLon=new JTextField(4);  c.insets=rightInsets;  gridbag.setConstraints(secLon,c);  add(secLon);}  }
class C{  public static void encode(Object object,Writer writer,Option... options){  try (JsonGenerator generator=javax.json.Json.createGenerator(writer)){    generator.writeStartObject();    encode("data",object,generator,options.length == 0 ? noneOf(Option.class) : copyOf(asList(options)));    generator.writeEnd();  } }  }
class C{  protected AbstractCompilerAdapter(String languageSuffix){  if (languageSuffix == null)   throw new IllegalArgumentException("Null language suffix");  this.languageSuffix=languageSuffix;}  }
class C{  public CharConversionException(String s){  super(s);}  }
class C{  public void constValueIndex(int tag,int index) throws IOException {  output.write(tag);  write16bit(index);}  }
class C{  @Post public String store(String fmJson){  IFirewallService firewall=(IFirewallService)getContext().getAttributes().get(IFirewallService.class.getCanonicalName());  FirewallRule rule;  try {    rule=jsonToFirewallRule(fmJson);  } catch (  IOException e) {    log.error("Error parsing firewall rule: " + fmJson,e);    return "{\"status\" : \"Error! Could not parse firewall rule, see log for details.\"}";  }  String status=null;  if (checkRuleExists(rule,firewall.getRules())) {    status="Error! A similar firewall rule already exists.";    log.error(status);    return ("{\"status\" : \"" + status + "\"}");  } else {    firewall.addRule(rule);    status="Rule added";    return ("{\"status\" : \"" + status + "\", \"rule-id\" : \""+ Integer.toString(rule.ruleid)+ "\"}");  }}  }
class C{  public void resume(){  isPaused=false;}  }
class C{  private void displaySelected(){  removeListeners();  if (weaponList.getSelectedIndex() == -1) {    ((DefaultComboBoxModel<String>)m_chAmmo.getModel()).removeAllElements();    m_chAmmo.setEnabled(false);    m_chBayWeapon.removeAllItems();    m_chBayWeapon.setEnabled(false);    wNameR.setText("");    wHeatR.setText("--");    wArcHeatR.setText("---");    wDamR.setText("--");    wMinR.setText("---");    wShortR.setText("---");    wMedR.setText("---");    wLongR.setText("---");    wExtR.setText("---");    wDamageTrooperL.setVisible(false);    wDamageTrooperR.setVisible(false);    wInfantryRange0L.setVisible(false);    wInfantryRange0R.setVisible(false);    wInfantryRange1L.setVisible(false);    wInfantryRange1R.setVisible(false);    wInfantryRange2L.setVisible(false);    wInfantryRange2R.setVisible(false);    wInfantryRange3L.setVisible(false);    wInfantryRange3R.setVisible(false);    wInfantryRange4L.setVisible(false);    wInfantryRange4R.setVisible(false);    wInfantryRange5L.setVisible(false);    wInfantryRange5R.setVisible(false);    return;  }  Mounted mounted=((WeaponListModel)weaponList.getModel()).getWeaponAt(weaponList.getSelectedIndex());  WeaponType wtype=(WeaponType)mounted.getType();  wNameR.setText(mounted.getDesc());  wHeatR.setText(Integer.toString(mounted.getCurrentHeat()));  wArcHeatR.setText(Integer.toString(entity.getHeatInArc(mounted.getLocation(),mounted.isRearMounted())));  if (wtype instanceof InfantryWeapon) {    wDamageTrooperL.setVisible(true);    wDamageTrooperR.setVisible(true);    InfantryWeapon inftype=(InfantryWeapon)wtype;    if ((entity instanceof Infantry) && !(entity instanceof BattleArmor)) {      wDamageTrooperR.setText(Double.toString((double)Math.round(((Infantry)entity).getDamagePerTrooper() * 1000) / 1000));    } else {      wDamageTrooperR.setText(Double.toString(inftype.getInfantryDamage()));    }    wMinL.setVisible(false);    wShortL.setVisible(false);    wMedL.setVisible(false);    wLongL.setVisible(false);    wExtL.setVisible(false);    wMinR.setVisible(false);    wShortR.setVisible(false);    wMedR.setVisible(false);    wLongR.setVisible(false);    wExtR.setVisible(false);    wInfantryRange0L.setVisible(false);    wInfantryRange0R.setVisible(false);    wInfantryRange1L.setVisible(false);    wInfantryRange1R.setVisible(false);    wInfantryRange2L.setVisible(false);    wInfantryRange2R.setVisible(false);    wInfantryRange3L.setVisible(false);    wInfantryRange3R.setVisible(false);    wInfantryRange4L.setVisible(false);    wInfantryRange4R.setVisible(false);    wInfantryRange5L.setVisible(false);    wInfantryRange5R.setVisible(false);    int zeromods=0;    if (inftype.hasFlag(WeaponType.F_INF_POINT_BLANK)) {      zeromods++;    }    if (inftype.hasFlag(WeaponType.F_INF_ENCUMBER) || (inftype.getCrew() > 1)) {      zeromods++;    }    if (inftype.hasFlag(WeaponType.F_INF_BURST)) {      zeromods--;    }switch (inftype.getInfantryRange()) {case 0:      wInfantryRange0L.setText("0");    wInfantryRange0R.setText("+" + zeromods);  wInfantryRange0L.setVisible(true);wInfantryRange0R.setVisible(true);break;case 1:wInfantryRange0L.setText("0");wInfantryRange0R.setText(Integer.toString(zeromods - 2));wInfantryRange0L.setVisible(true);wInfantryRange0R.setVisible(true);wInfantryRange1L.setText("1");wInfantryRange1R.setText("+0");wInfantryRange1L.setVisible(true);wInfantryRange1R.setVisible(true);wInfantryRange2L.setText("2");wInfantryRange2R.setText("+2");wInfantryRange2L.setVisible(true);wInfantryRange2R.setVisible(true);wInfantryRange3L.setText("3");wInfantryRange3R.setText("+4");wInfantryRange3L.setVisible(true);wInfantryRange3R.setVisible(true);break;case 2:wInfantryRange0L.setText("0");wInfantryRange0R.setText(Integer.toString(zeromods - 2));wInfantryRange0L.setVisible(true);wInfantryRange0R.setVisible(true);wInfantryRange1L.setText("1-2");wInfantryRange1R.setText("+0");wInfantryRange1L.setVisible(true);wInfantryRange1R.setVisible(true);wInfantryRange2L.setText("3-4");wInfantryRange2R.setText("+2");wInfantryRange2L.setVisible(true);wInfantryRange2R.setVisible(true);wInfantryRange3L.setText("5-6");wInfantryRange3R.setText("+4");wInfantryRange3L.setVisible(true);wInfantryRange3R.setVisible(true);break;case 3:wInfantryRange0L.setText("0");wInfantryRange0R.setText(Integer.toString(zeromods - 2));wInfantryRange0L.setVisible(true);wInfantryRange0R.setVisible(true);wInfantryRange1L.setText("1-3");wInfantryRange1R.setText("+0");wInfantryRange1L.setVisible(true);wInfantryRange1R.setVisible(true);wInfantryRange2L.setText("4-6");wInfantryRange2R.setText("+2");wInfantryRange2L.setVisible(true);wInfantryRange2R.setVisible(true);wInfantryRange3L.setText("7-9");wInfantryRange3R.setText("+4");wInfantryRange3L.setVisible(true);wInfantryRange3R.setVisible(true);break;case 4:wInfantryRange0L.setText("0");wInfantryRange0R.setText(Integer.toString(zeromods - 2));wInfantryRange0L.setVisible(true);wInfantryRange0R.setVisible(true);wInfantryRange1L.setText("1-4");wInfantryRange1R.setText("+0");wInfantryRange1L.setVisible(true);wInfantryRange1R.setVisible(true);wInfantryRange2L.setText("5-6");wInfantryRange2R.setText("+1");wInfantryRange2L.setVisible(true);wInfantryRange2R.setVisible(true);wInfantryRange3L.setText("7-8");wInfantryRange3R.setText("+2");wInfantryRange3L.setVisible(true);wInfantryRange3R.setVisible(true);wInfantryRange4L.setText("9-10");wInfantryRange4R.setText("+3");wInfantryRange4L.setVisible(true);wInfantryRange4R.setVisible(true);wInfantryRange5L.setText("11-12");wInfantryRange5R.setText("+4");wInfantryRange5L.setVisible(true);wInfantryRange5R.setVisible(true);break;case 5:wInfantryRange0L.setText("0");wInfantryRange0R.setText(Integer.toString(zeromods - 1));wInfantryRange0L.setVisible(true);wInfantryRange0R.setVisible(true);wInfantryRange1L.setText("1-5");wInfantryRange1R.setText("+0");wInfantryRange1L.setVisible(true);wInfantryRange1R.setVisible(true);wInfantryRange2L.setText("6-7");wInfantryRange2R.setText("+1");wInfantryRange2L.setVisible(true);wInfantryRange2R.setVisible(true);wInfantryRange3L.setText("8-10");wInfantryRange3R.setText("+2");wInfantryRange3L.setVisible(true);wInfantryRange3R.setVisible(true);wInfantryRange4L.setText("11-12");wInfantryRange4R.setText("+3");wInfantryRange4L.setVisible(true);wInfantryRange4R.setVisible(true);wInfantryRange5L.setText("13-15");wInfantryRange5R.setText("+4");wInfantryRange5L.setVisible(true);wInfantryRange5R.setVisible(true);break;case 6:wInfantryRange0L.setText("0");wInfantryRange0R.setText(Integer.toString(zeromods - 1));wInfantryRange0L.setVisible(true);wInfantryRange0R.setVisible(true);wInfantryRange1L.setText("1-6");wInfantryRange1R.setText("+0");wInfantryRange1L.setVisible(true);wInfantryRange1R.setVisible(true);wInfantryRange2L.setText("7-9");wInfantryRange2R.setText("+1");wInfantryRange2L.setVisible(true);wInfantryRange2R.setVisible(true);wInfantryRange3L.setText("10-12");wInfantryRange3R.setText("+2");wInfantryRange3L.setVisible(true);wInfantryRange3R.setVisible(true);wInfantryRange4L.setText("13-15");wInfantryRange4R.setText("+4");wInfantryRange4L.setVisible(true);wInfantryRange4R.setVisible(true);wInfantryRange5L.setText("16-18");wInfantryRange5R.setText("+5");wInfantryRange5L.setVisible(true);wInfantryRange5R.setVisible(true);break;case 7:wInfantryRange0L.setText("0");wInfantryRange0R.setText(Integer.toString(zeromods - 1));wInfantryRange0L.setVisible(true);wInfantryRange0R.setVisible(true);wInfantryRange1L.setText("1-7");wInfantryRange1R.setText("+0");wInfantryRange1L.setVisible(true);wInfantryRange1R.setVisible(true);wInfantryRange2L.setText("8-10");wInfantryRange2R.setText("+1");wInfantryRange2L.setVisible(true);wInfantryRange2R.setVisible(true);wInfantryRange3L.setText("11-14");wInfantryRange3R.setText("+2");wInfantryRange3L.setVisible(true);wInfantryRange3R.setVisible(true);wInfantryRange4L.setText("15-17");wInfantryRange4R.setText("+4");wInfantryRange4L.setVisible(true);wInfantryRange4R.setVisible(true);wInfantryRange5L.setText("18-21");wInfantryRange5R.setText("+6");wInfantryRange5L.setVisible(true);wInfantryRange5R.setVisible(true);break;}} else {wDamageTrooperL.setVisible(false);wDamageTrooperR.setVisible(false);wInfantryRange0L.setVisible(false);wInfantryRange0R.setVisible(false);wInfantryRange1L.setVisible(false);wInfantryRange1R.setVisible(false);wInfantryRange2L.setVisible(false);wInfantryRange2R.setVisible(false);wInfantryRange3L.setVisible(false);wInfantryRange3R.setVisible(false);wInfantryRange4L.setVisible(false);wInfantryRange4R.setVisible(false);wInfantryRange5L.setVisible(false);wInfantryRange5R.setVisible(false);wShortL.setVisible(true);wMedL.setVisible(true);wLongL.setVisible(true);wMinR.setVisible(true);wShortR.setVisible(true);wMedR.setVisible(true);wLongR.setVisible(true);if (!(entity.isAirborne() || entity.usesWeaponBays())) {wMinL.setVisible(true);wMinR.setVisible(true);}if (((entity.getGame() != null) && entity.getGame().getOptions().booleanOption(OptionsConstants.AC_TAC_OPS_RANGE)) || (entity.isAirborne() || entity.usesWeaponBays())) {wExtL.setVisible(true);wExtR.setVisible(true);}}if (wtype.getDamage() == WeaponType.DAMAGE_BY_CLUSTERTABLE) {if (wtype instanceof HAGWeapon) {wDamR.setText(Messages.getString("MechDisplay.Variable"));} else {wDamR.setText(Messages.getString("MechDisplay.Missile"));}} else if (wtype.getDamage() == WeaponType.DAMAGE_VARIABLE) {wDamR.setText(Messages.getString("MechDisplay.Variable"));} else if (wtype.getDamage() == WeaponType.DAMAGE_SPECIAL) {wDamR.setText(Messages.getString("MechDisplay.Special"));} else if (wtype.getDamage() == WeaponType.DAMAGE_ARTILLERY) {StringBuffer damage=new StringBuffer();int artyDamage=wtype.getRackSize();damage.append(Integer.toString(artyDamage));artyDamage-=10;while (artyDamage > 0) {damage.append('/').append(Integer.toString(artyDamage));artyDamage-=10;}wDamR.setText(damage.toString());} else if (wtype.hasFlag(WeaponType.F_ENERGY) && wtype.hasModes() && (unitDisplay.getClientGUI() != null)&& unitDisplay.getClientGUI().getClient().getGame().getOptions().booleanOption("tacops_energy_weapons")) {if (mounted.hasChargedCapacitor() != 0) {if (mounted.hasChargedCapacitor() == 1) {wDamR.setText(Integer.toString(Compute.dialDownDamage(mounted,wtype) + 5));}if (mounted.hasChargedCapacitor() == 2) {wDamR.setText(Integer.toString(Compute.dialDownDamage(mounted,wtype) + 10));}} else {wDamR.setText(Integer.toString(Compute.dialDownDamage(mounted,wtype)));}} else {wDamR.setText(Integer.toString(wtype.getDamage()));}int shortR=wtype.getShortRange();int mediumR=wtype.getMediumRange();int longR=wtype.getLongRange();int extremeR=wtype.getExtremeRange();if ((entity.getLocationStatus(mounted.getLocation()) == ILocationExposureStatus.WET) || (longR == 0)) {shortR=wtype.getWShortRange();mediumR=wtype.getWMediumRange();longR=wtype.getWLongRange();extremeR=wtype.getWExtremeRange();}if (wtype.hasFlag(WeaponType.F_CWS)) {Entity target=null;if ((unitDisplay.getClientGUI() != null) && (unitDisplay.getClientGUI().getCurrentPanel() instanceof FiringDisplay)) {Targetable t=((FiringDisplay)unitDisplay.getClientGUI().getCurrentPanel()).getTarget();if (t instanceof Entity) {target=(Entity)t;}}if ((target == null) || !target.hasQuirk("susceptible_cws")) {shortR=1;mediumR=2;longR=3;extremeR=4;}}if (wtype.getMinimumRange() > 0) {wMinR.setText(Integer.toString(wtype.getMinimumRange()));} else {wMinR.setText("---");}if (shortR > 1) {wShortR.setText("1 - " + shortR);} else {wShortR.setText("" + shortR);}if ((mediumR - shortR) > 1) {wMedR.setText(shortR + 1 + " - "+ mediumR);} else {wMedR.setText("" + mediumR);}if ((longR - mediumR) > 1) {wLongR.setText(mediumR + 1 + " - "+ longR);} else {wLongR.setText("" + longR);}if ((extremeR - longR) > 1) {wExtR.setText(longR + 1 + " - "+ extremeR);} else {wExtR.setText("" + extremeR);}if (mounted.getLinked() != null) {updateRangeDisplayForAmmo(mounted.getLinked());}if (entity.isAirborne() || entity.usesWeaponBays()) {if (wtype.isCapital()) {wDamR.setText(Messages.getString("MechDisplay.CapitalD"));} else {wDamR.setText(Messages.getString("MechDisplay.StandardD"));}if (wtype instanceof BayWeapon) {compileWeaponBay(mounted,wtype.isCapital());} else {updateAttackValues(mounted,mounted.getLinked());}}int chosen=m_chBayWeapon.getSelectedIndex();m_chBayWeapon.removeAllItems();if (!(wtype instanceof BayWeapon) || !entity.usesWeaponBays()) {m_chBayWeapon.setEnabled(false);} else {m_chBayWeapon.setEnabled(true);for (int wId : mounted.getBayWeapons()) {Mounted curWeapon=entity.getEquipment(wId);if (null == curWeapon) {continue;}m_chBayWeapon.addItem(formatBayWeapon(curWeapon));}if (chosen == -1) {m_chBayWeapon.setSelectedIndex(0);} else {m_chBayWeapon.setSelectedIndex(chosen);}}((DefaultComboBoxModel<String>)m_chAmmo.getModel()).removeAllElements();Mounted oldmount=mounted;if (wtype instanceof BayWeapon) {int n=m_chBayWeapon.getSelectedIndex();if (n == -1) {n=0;}mounted=entity.getEquipment(mounted.getBayWeapons().elementAt(n));wtype=(WeaponType)mounted.getType();}if (wtype.getAmmoType() == AmmoType.T_NA) {m_chAmmo.setEnabled(false);} else if (wtype.hasFlag(WeaponType.F_ONESHOT)) {m_chAmmo.setEnabled(false);Mounted mountedAmmo=mounted.getLinked();if (mountedAmmo != null) {m_chAmmo.addItem(formatAmmo(mountedAmmo));}} else {m_chAmmo.setEnabled(true);vAmmo=new ArrayList<Mounted>();int nCur=-1;int i=0;for (Mounted mountedAmmo : entity.getAmmo()) {AmmoType atype=(AmmoType)mountedAmmo.getType();boolean same=true;if ((entity instanceof SmallCraft) || (entity instanceof Jumpship)) {same=(mounted.getLocation() == mountedAmmo.getLocation());}boolean rightBay=true;if (entity.usesWeaponBays() && !(entity instanceof FighterSquadron)) {rightBay=oldmount.ammoInBay(entity.getEquipmentNum(mountedAmmo));}if (mountedAmmo.isAmmoUsable() && same && rightBay&& (atype.getAmmoType() == wtype.getAmmoType())&& (atype.getRackSize() == wtype.getRackSize())) {vAmmo.add(mountedAmmo);m_chAmmo.addItem(formatAmmo(mountedAmmo));if ((mounted.getLinked() != null) && mounted.getLinked().equals(mountedAmmo)) {nCur=i;}i++;}}if (nCur != -1) {m_chAmmo.setSelectedIndex(nCur);}}setFieldofFire(mounted);unitDisplay.processMechDisplayEvent(new MechDisplayEvent(this,entity,mounted));onResize();addListeners();}  }
class C{  public Set<String> listModules(String id){  Tenant tenant=tenants.get(id);  if (tenant == null) {    return null;  }  return tenant.listModules();}  }
class C{  protected synchronized void log(AbstractExplorerTab tab,String msg){  m_LogTab.log(tab,msg);}  }
class C{  public boolean isTcpFallback(){  return readBoolean(RcsSettingsData.TCP_FALLBACK);}  }
class C{  public boolean hasSizeExt(){  return hasExtension(GphotoSize.class);}  }
class C{  public void serviceRevoked(BeanContextServiceRevokedEvent bcssre){synchronized (BeanContext.globalHierarchyLock) {    if (services.containsKey(bcssre.getServiceClass()))     return;    fireServiceRevoked(bcssre);    Iterator i;synchronized (children) {      i=children.keySet().iterator();    }    while (i.hasNext()) {      Object c=i.next();      if (c instanceof BeanContextServices) {        ((BeanContextServicesListener)c).serviceRevoked(bcssre);      }    }  }}  }
class C{  private synchronized void switchRemovedFromStore(DatapathId dpid){  if (floodlightProvider.getRole() != HARole.STANDBY) {    return;  }  IOFSwitch oldSw=syncedSwitches.remove(dpid);  if (oldSw != null) {    addUpdateToQueue(new SwitchUpdate(dpid,SwitchUpdateType.REMOVED));  } else {  }}  }
class C{  public void SwitchTo(int lexState){  if (lexState >= 1 || lexState < 0)   throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.",TokenMgrError.INVALID_LEXICAL_STATE); else   curLexState=lexState;}  }
class C{  @SuppressWarnings("hiding") private void initialize(){  try {    if (SecurableCommunicationChannel.CLUSTER.equals(sslConfig.getSecuredCommunicationChannel())) {      if (this.sslConfig.isEnabled()) {        System.setProperty("p2p.useSSL","true");        System.setProperty("p2p.oldIO","true");        System.setProperty("p2p.nodirectBuffers","true");      } else {        System.setProperty("p2p.useSSL","false");      }    }    try {      if (this.sslConfig.isEnabled() && sslContext == null) {        sslContext=createAndConfigureSSLContext();        SSLContext.setDefault(sslContext);      }    } catch (    Exception e) {      throw new GemFireConfigException("Error configuring GemFire ssl ",e);    }    org.apache.geode.internal.tcp.TCPConduit.init();    initializeClientSocketFactory();    this.ready=true;  } catch (  VirtualMachineError err) {    SystemFailure.initiateFailure(err);    throw err;  }catch (  Error t) {    SystemFailure.checkFailure();    t.printStackTrace();    throw t;  }catch (  RuntimeException re) {    re.printStackTrace();    throw re;  }}  }
class C{  public void paintFileChooserBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  protected void sequence_VariableBinding$OptionalInit$false$(ISerializationContext context,VariableBinding semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.VARIABLE_BINDING__PATTERN) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.VARIABLE_BINDING__PATTERN));    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.VARIABLE_BINDING__EXPRESSION) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.VARIABLE_BINDING__EXPRESSION));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getVariableBindingAccess().getPatternBindingPatternParserRuleCall_0_0(),semanticObject.getPattern());  feeder.accept(grammarAccess.getVariableBindingAccess().getExpressionAssignmentExpressionParserRuleCall_1_1_1_0(),semanticObject.getExpression());  feeder.finish();}  }
class C{  @POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @RequiresRole(role=Role.ADMINISTRATOR) public GroupDTO create(GroupDTO groupDTO){  Validate.isTrue(getSystemDomain().equalsIgnoreCase(groupDTO.getDomain()),sm.getString("valid.not.systemdomain",groupDTO.getDomain(),tenant));  if (groupDTO.getAlias() != null) {    throw new NotImplementedError("Creation of groups with alias is not supported");  }  try {    GroupDetail groupDetail=GroupDetailsMapper.getGroupDetails(groupDTO.getDetails());    PrincipalId groupId=getIDMClient().addGroup(tenant,groupDTO.getName(),groupDetail);    return new GroupDTO(groupId.getName(),groupId.getDomain(),groupDTO.getDetails(),null,null);  } catch (  NoSuchTenantException e) {    log.debug("Failed to create group '{}' on tenant '{}'",groupDTO.getName(),tenant,e);    throw new NotFoundException(sm.getString("ec.404"),e);  }catch (  InvalidArgumentException|InvalidPrincipalException e) {    log.warn("Failed to create group '{}' on tenant '{}' due to a client side error",groupDTO.getName(),tenant,e);    throw new BadRequestException(sm.getString("res.group.create.failed",groupDTO.getName(),tenant),e);  }catch (  Exception e) {    log.error("Failed to create group '{}' on tenant '{}' due to a server side error",groupDTO.getName(),tenant,e);    throw new InternalServerErrorException(sm.getString("ec.500"),e);  }}  }
class C{  public void CreatePOS() throws Exception {  return;}  }
class C{  public static <K>IndirectPriorityQueue<K> synchronize(final IndirectPriorityQueue<K> q){  return new SynchronizedIndirectPriorityQueue<K>(q);}  }
class C{  protected StepImpl(){  super();}  }
class C{  public static DoubleMatrix2D abs(DoubleMatrix2D A){  return A.assign(F.abs);}  }
class C{  public static void assertTrue(boolean condition){  assertTrue(null,condition);}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"MINIMAL_ENTITY\" ("+ "\"_id\" INTEGER PRIMARY KEY );");}  }
class C{  @ApiOperation(value="Start the single engine") @RequestMapping(value="engine/start",method=RequestMethod.POST) @ResponseStatus(HttpStatus.NO_CONTENT) @ResponseBody public final void postStart(){  startImpl(getSymmetricEngine());}  }
class C{  public void clearPassword(){  if (inputPassword != null) {    for (int i=0; i < inputPassword.length; i++)     inputPassword[i]=' ';  }}  }
class C{  public static void prepareData(Instances data) throws Exception {  String doptions[]=null;  try {    doptions=MLUtils.getDatasetOptions(data);  } catch (  Exception e) {    throw new Exception("[Error] Failed to Get Options from @Relation Name",e);  }  try {    int c=(Utils.getOptionPos('C',doptions) >= 0) ? Integer.parseInt(Utils.getOption('C',doptions)) : Integer.parseInt(Utils.getOption('c',doptions));    if (c < 0) {      c=-c;      data=F.mulan2meka(data,c);    }    data.setClassIndex(c);  } catch (  Exception e) {    throw new Exception("Failed to parse options stored in relation name; expected format for relation name:\n" + "  'name: options'\n" + "But found:\n"+ "  '" + data.relationName() + "'\n"+ "Format example:\n"+ "  'Example_Dataset: -C 3 -split-percentage 50'\n"+ "'-C 3' specifies the number of target attributes to be 3. See tutorial for more information.",e);  }}  }
class C{  private IgfsImpl igfs(int idx) throws Exception {  return (IgfsImpl)grid(idx).fileSystem(IGFS_NAME);}  }
class C{  public static List<URI> fetchCgIds(DbClient dbClient,List<URI> volURIs){  List<URI> cgIds=new ArrayList<>();  if (volURIs != null) {    for (    URI volumeId : volURIs) {      Volume volume=dbClient.queryObject(Volume.class,volumeId);      if (volume != null && volume.getConsistencyGroup() != null && !cgIds.contains(volume.getConsistencyGroup())) {        cgIds.add(volume.getConsistencyGroup());      }    }  }  return cgIds;}  }
class C{  public final void updateExecutionMark(){  if (markedLine < lineNumbers.size()) {    lineNumbers.get(markedLine).setBackground(NumberPanel.getBackground());  }  markedLine=data.getInstructionPointer();  if (markedLine < lineNumbers.size()) {    JPanel panel=lineNumbers.get(markedLine);    panel.setBackground(new Color(0,255,0));  }}  }
class C{  public AppletAudioClip(URLConnection uc){  try {    createAppletAudioClip(uc.getInputStream());  } catch (  IOException e) {    if (DEBUG) {      System.err.println("IOException creating AppletAudioClip" + e);    }  }}  }
class C{  public boolean normalizeReminders(){  if (mReminders.size() <= 1) {    return true;  }  Collections.sort(mReminders);  ReminderEntry prev=mReminders.get(mReminders.size() - 1);  for (int i=mReminders.size() - 2; i >= 0; --i) {    ReminderEntry cur=mReminders.get(i);    if (prev.equals(cur)) {      mReminders.remove(i + 1);    }    prev=cur;  }  return true;}  }
class C{  private String[] argArrayFromProtoIndex(int idx){  ProtoIdItem protoId=mProtoIds[idx];  String[] result=new String[protoId.types.length];  for (int i=0; i < protoId.types.length; i++) {    result[i]=mStrings[mTypeIds[protoId.types[i]].descriptorIdx];  }  return result;}  }
class C{  public static String replicationTopicSend(){  return TOPIC_REPLICATION.toString();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:47.564 -0500",hash_original_method="93FF9F6BC44FD78A86FF56612368CE29",hash_generated_method="9222A2A74E472CBBD21741C2076BECE7") public String toString(){  int len=this.name.length();  if (this.value != null)   len+=1 + this.value.length();  CharArrayBuffer buffer=new CharArrayBuffer(len);  buffer.append(this.name);  if (this.value != null) {    buffer.append("=");    buffer.append(this.value);  }  return buffer.toString();}  }
class C{  public Builder withEventIndex(long index){  request.eventIndex=Assert.argNot(index,index < 1,"index cannot be less than 1");  return this;}  }
class C{  public YarnContainerRunner(Config config,YarnConfiguration yarnConfiguration){  this.config=config;  this.yarnConfiguration=yarnConfiguration;  this.nmClient=NMClient.createNMClient();  nmClient.init(this.yarnConfiguration);  this.yarnConfig=new YarnConfig(config);}  }
class C{  public void invalidateSizes(){  if (root != null)   root.deepMarkSizeInvalid();  if (!isFixedRowHeight() && visibleNodes.size() > 0) {    updateNodeSizes(true);  }}  }
class C{  public SELECT(@NonNull String... columns){  if (columns == null) {    throw new NullPointerException("SELECT: Columns are null");  }  if (columns.length == 0)   throw new IllegalArgumentException("At least on column is required");  StringBuilder builder=new StringBuilder("SELECT ");  for (int i=0; i < columns.length; i++) {    builder.append(columns[i]);    if (i != (columns.length - 1))     builder.append(", ");  }  sql=builder.toString();}  }
class C{  public static EqualityExpression ne(String propertyName,Object value){  return new EqualityExpression(Operator.NOT_EQUAL,propertyName,value);}  }
class C{  protected boolean largeByteBufferTest(Mac theMac){  ByteBuffer buf=generateRandomByteBuffer(LARGE_SIZE);  int limitBefore=buf.limit();  theMac.update(buf);  theMac.doFinal();  int limitAfter=buf.limit();  int positonAfter=buf.position();  if (limitAfter != limitBefore) {    System.out.println("FAIL: Buffer's limit has been chenged.");    return false;  }  if (positonAfter != limitAfter) {    System.out.println("FAIL: " + "Buffer's position isn't equal to its limit");    return false;  }  return true;}  }
class C{  public void update(WifiP2pDevice device){  updateSupplicantDetails(device);  mDevices.get(device.deviceAddress).status=device.status;}  }
class C{  public static YesNo newInstance(Boolean code){  final YesNo returnInstance=new YesNo();  returnInstance.setValue(code.toString());  return returnInstance;}  }
class C{  public int decrement(int offset){  return increment(-offset);}  }
class C{  public void alias(int N){  double[] newx=new double[N];  alias(x,newx);  x=newx;}  }
class C{  public void removeMessageListener(Listener<Message> listener){  mMessageListeners.remove(listener);}  }
class C{  public void invalidateAll(){  invalidate(ALL_ITEMS);}  }
class C{  public boolean isClassClientError(){  return mCode >= 500 && mCode < 600;}  }
class C{  public Query rpp(final int rpp){  setRpp(rpp);  return this;}  }
class C{  @Override public String toString(){  return "(" + exp1 + ") "+ relOpString()+ " ("+ exp2+ ")";}  }
class C{  @Override public CloseableReference<Bitmap> decodeJPEGFromEncodedImage(EncodedImage encodedImage,Bitmap.Config bitmapConfig,int length){  boolean isJpegComplete=encodedImage.isCompleteAt(length);  final BitmapFactory.Options options=getDecodeOptionsForStream(encodedImage,bitmapConfig);  InputStream jpegDataStream=encodedImage.getInputStream();  Preconditions.checkNotNull(jpegDataStream);  if (encodedImage.getSize() > length) {    jpegDataStream=new LimitedInputStream(jpegDataStream,length);  }  if (!isJpegComplete) {    jpegDataStream=new TailAppendingInputStream(jpegDataStream,EOI_TAIL);  }  boolean retryOnFail=options.inPreferredConfig != Bitmap.Config.ARGB_8888;  try {    return decodeStaticImageFromStream(jpegDataStream,options);  } catch (  RuntimeException re) {    if (retryOnFail) {      return decodeFromEncodedImage(encodedImage,Bitmap.Config.ARGB_8888);    }    throw re;  }}  }
class C{  protected Vec4 nearestPointOnSegment(Vec4 p1,Vec4 p2,Vec4 point){  Vec4 segment=p2.subtract3(p1);  Vec4 dir=segment.normalize3();  double dot=point.subtract3(p1).dot3(dir);  if (dot < 0.0) {    return p1;  } else   if (dot > segment.getLength3()) {    return p2;  } else {    return Vec4.fromLine3(p1,dot,dir);  }}  }
class C{  public static void extract(byte[] h264Packet,NalUnitHeader header){  if (h264Packet == null) {    throw new RuntimeException("Cannot extract H264 header. Invalid H264 packet");  }  if (header == null) {    throw new RuntimeException("Cannot extract H264 header. Invalid header packet");  }  byte headerByte=h264Packet[0];  header.forbiddenZeroBit=((headerByte & 0x80) >> 7) != 0;  header.nalRefId=((headerByte & 0x60) >> 5);  int nalUnitType=(headerByte & 0x1f);  header.decodeNalUnitType=NalUnitType.parse(nalUnitType);}  }
class C{  public NotificationChain basicSetRightOperand(Expression newRightOperand,NotificationChain msgs){  Expression oldRightOperand=rightOperand;  rightOperand=newRightOperand;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,ExpressionsPackage.NUMERICAL_ADD_SUBTRACT_EXPRESSION__RIGHT_OPERAND,oldRightOperand,newRightOperand);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public static SVGPath drawDelaunay(Projection2D proj,List<SweepHullDelaunay2D.Triangle> delaunay,List<double[]> means){  final SVGPath path=new SVGPath();  for (  SweepHullDelaunay2D.Triangle del : delaunay) {    path.moveTo(proj.fastProjectDataToRenderSpace(means.get(del.a)));    path.drawTo(proj.fastProjectDataToRenderSpace(means.get(del.b)));    path.drawTo(proj.fastProjectDataToRenderSpace(means.get(del.c)));    path.close();  }  return path;}  }
class C{  @Override public Object execute(ExecutionEvent event) throws ExecutionException {  IWorkbenchPart view=HandlerUtil.getActivePart(event);  IWorkbenchWindow window=HandlerUtil.getActiveWorkbenchWindow(event);  if (view instanceof IndicatorViewPart) {    IndicatorViewPart jsonView=(IndicatorViewPart)view;    FiltersWizard wizard=new FiltersWizard();    wizard.init(jsonView);    WizardDialog dialog=new WizardDialog(window.getShell(),wizard);    dialog.open();  }  return null;}  }
class C{  public void dcbtst(){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  public static double deriv(double pred,double y){  return (pred - y);}  }
class C{  private boolean isHHSign(String str){  boolean sign=true;  try {    char r=(char)Integer.parseInt(str,16);  } catch (  NumberFormatException e) {    sign=false;  }  return sign;}  }
class C{  public PaymentInformationException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  private boolean shouldBeAutoAccepted() throws PayloadException {  return FileTransferUtils.getHttpFTInfo(getDialogPath().getInvite(),mRcsSettings) != null || mRcsSettings.isChatAutoAccepted();}  }
class C{  public AuthenticationMethodRefAuthority(final String auth){  this.authority=auth;}  }
class C{  Property(TimeOfDay partial,int fieldIndex){  super();  iTimeOfDay=partial;  iFieldIndex=fieldIndex;}  }
class C{  public ConcurrentHashMap(int initialCapacity,float loadFactor){  this(initialCapacity,loadFactor,DEFAULT_CONCURRENCY_LEVEL);}  }
class C{  public boolean remove(int val){  Integer v=val;  if (list.contains(v)) {    list.remove(v);    return true;  }  return false;}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/ingest") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public NamedFileSystemList ingestFileSystems(FileSystemIngest param) throws InternalException {  if ((null == param.getUnManagedFileSystems()) || (param.getUnManagedFileSystems().toString().length() == 0) || (param.getUnManagedFileSystems().isEmpty())|| (param.getUnManagedFileSystems().get(0).toString().isEmpty())) {    throw APIException.badRequests.invalidParameterUnManagedFsListEmpty();  }  if (null == param.getProject() || (param.getProject().toString().length() == 0)) {    throw APIException.badRequests.invalidParameterProjectEmpty();  }  if (null == param.getVarray() || (param.getVarray().toString().length() == 0)) {    throw APIException.badRequests.invalidParameterVirtualArrayEmpty();  }  if (null == param.getVpool() || (param.getVpool().toString().length() == 0)) {    throw APIException.badRequests.invalidParameterVirtualPoolEmpty();  }  if (param.getUnManagedFileSystems().size() > getMaxBulkSize()) {    throw APIException.badRequests.exceedingLimit("unmanaged filesystems",getMaxBulkSize());  }  _logger.info("Ingest called with Virtual Array {}",param.getVarray());  _logger.info("Ingest called with Virtual Pool {}",param.getVpool());  _logger.info("Ingest called with Project {}",param.getProject());  _logger.info("Ingest called with UnManagedFileSystems {}",param.getUnManagedFileSystems());  NamedFileSystemList filesystemList=new NamedFileSystemList();  List<UnManagedFileSystem> unManagedFileSystems=new ArrayList<UnManagedFileSystem>();  try {    Project project=_permissionsHelper.getObjectById(param.getProject(),Project.class);    ArgValidator.checkUri(param.getProject());    ArgValidator.checkEntity(project,param.getProject(),false);    VirtualArray neighborhood=FileSystemIngestionUtil.getVirtualArrayForFileSystemCreateRequest(project,param.getVarray(),_permissionsHelper,_dbClient);    VirtualPool cos=FileSystemIngestionUtil.getVirtualPoolForFileSystemCreateRequest(project,param.getVpool(),_permissionsHelper,_dbClient);    if (null != cos.getVirtualArrays() && !cos.getVirtualArrays().isEmpty() && !cos.getVirtualArrays().contains(param.getVarray().toString())) {      throw APIException.internalServerErrors.virtualPoolNotMatchingVArray(param.getVarray());    }    long unManagedFileSystemsCapacity=FileSystemIngestionUtil.getTotalUnManagedFileSystemCapacity(_dbClient,param.getUnManagedFileSystems());    _logger.info("Requested UnManagedFile System Capacity {}",unManagedFileSystemsCapacity);    TenantOrg tenant=_dbClient.queryObject(TenantOrg.class,project.getTenantOrg().getURI());    CapacityUtils.validateQuotasForProvisioning(_dbClient,cos,project,tenant,unManagedFileSystemsCapacity,"filesystem");    FileSystemIngestionUtil.isIngestionRequestValidForUnManagedFileSystems(param.getUnManagedFileSystems(),cos,_dbClient);    List<FileShare> filesystems=new ArrayList<FileShare>();    Map<URI,FileShare> unManagedFSURIToFSMap=new HashMap<>();    List<FileExportRule> fsExportRules=new ArrayList<FileExportRule>();    List<CifsShareACL> fsCifsShareAcls=new ArrayList<CifsShareACL>();    List<NFSShareACL> fsNfsShareAcls=new ArrayList<NFSShareACL>();    List<UnManagedFileExportRule> inActiveUnManagedExportRules=new ArrayList<UnManagedFileExportRule>();    List<UnManagedCifsShareACL> inActiveUnManagedShareCifs=new ArrayList<UnManagedCifsShareACL>();    List<UnManagedNFSShareACL> inActiveUnManagedShareNfs=new ArrayList<UnManagedNFSShareACL>();    List<CifsShareACL> cifsShareACLList=new ArrayList<CifsShareACL>();    List<URI> full_pools=new ArrayList<URI>();    List<URI> full_systems=new ArrayList<URI>();    Calendar timeNow=Calendar.getInstance();    for (    URI unManagedFileSystemUri : param.getUnManagedFileSystems()) {      UnManagedFileSystem unManagedFileSystem=_dbClient.queryObject(UnManagedFileSystem.class,unManagedFileSystemUri);      if (null == unManagedFileSystem || null == unManagedFileSystem.getFileSystemCharacterstics() || null == unManagedFileSystem.getFileSystemInformation()) {        _logger.warn("UnManaged FileSystem {} partially discovered, hence not enough information available to validate neither virtualPool nor other criterias.Skipping Ingestion..",unManagedFileSystemUri);        continue;      }      if (unManagedFileSystem.getInactive()) {        _logger.warn("UnManaged FileSystem {} is inactive.Skipping Ingestion..",unManagedFileSystemUri);        continue;      }      if (!FileSystemIngestionUtil.checkVirtualPoolValidForUnManagedFileSystem(_dbClient,cos,unManagedFileSystemUri)) {        continue;      }      StringSetMap unManagedFileSystemInformation=unManagedFileSystem.getFileSystemInformation();      String fsNativeGuid=unManagedFileSystem.getNativeGuid().replace(FileSystemIngestionUtil.UNMANAGEDFILESYSTEM,FileSystemIngestionUtil.FILESYSTEM);      String deviceLabel=PropertySetterUtil.extractValueFromStringSet(SupportedFileSystemInformation.DEVICE_LABEL.toString(),unManagedFileSystemInformation);      String fsName=PropertySetterUtil.extractValueFromStringSet(SupportedFileSystemInformation.NAME.toString(),unManagedFileSystemInformation);      URI storagePoolUri=unManagedFileSystem.getStoragePoolUri();      String storagePortUri=PropertySetterUtil.extractValueFromStringSet(SupportedFileSystemInformation.STORAGE_PORT.toString(),unManagedFileSystemInformation);      String capacity=PropertySetterUtil.extractValueFromStringSet(SupportedFileSystemInformation.PROVISIONED_CAPACITY.toString(),unManagedFileSystemInformation);      String usedCapacity=PropertySetterUtil.extractValueFromStringSet(SupportedFileSystemInformation.ALLOCATED_CAPACITY.toString(),unManagedFileSystemInformation);      String nasUri=PropertySetterUtil.extractValueFromStringSet(SupportedFileSystemInformation.NAS.toString(),unManagedFileSystemInformation);      String path=PropertySetterUtil.extractValueFromStringSet(SupportedFileSystemInformation.PATH.toString(),unManagedFileSystemInformation);      String mountPath=PropertySetterUtil.extractValueFromStringSet(SupportedFileSystemInformation.MOUNT_PATH.toString(),unManagedFileSystemInformation);      String systemType=PropertySetterUtil.extractValueFromStringSet(SupportedFileSystemInformation.SYSTEM_TYPE.toString(),unManagedFileSystemInformation);      Long lcapcity=Long.valueOf(capacity);      Long lusedCapacity=Long.valueOf(usedCapacity);      StoragePool pool=_dbClient.queryObject(StoragePool.class,storagePoolUri);      StoragePort port=null;      if (storagePortUri != null) {        port=_dbClient.queryObject(StoragePort.class,URI.create(storagePortUri));      }      StorageHADomain dataMover=null;      if (port != null && port.getStorageHADomain() != null) {        dataMover=_dbClient.queryObject(StorageHADomain.class,port.getStorageHADomain());      }      if (dataMover != null) {        _logger.info("Data Mover to Use {} {} {}",new Object[]{dataMover.getAdapterName(),dataMover.getName(),dataMover.getLabel()});      }      if (!isIngestUmfsValidForProject(project,_dbClient,nasUri)) {        _logger.info("UnManaged FileSystem path {} is mounted on vNAS URI {} which is invalid for project.",path,nasUri);        continue;      }      if (null != pool) {        StringSet taggedVirtualArrays=pool.getTaggedVirtualArrays();        if ((null == taggedVirtualArrays) || (!taggedVirtualArrays.contains(neighborhood.getId().toString()))) {          _logger.warn("UnManaged FileSystem {} storagepool doesn't related to the Virtual Array {}. Skipping Ingestion..",unManagedFileSystemUri,neighborhood.getId().toString());          continue;        }      } else {        _logger.warn("UnManaged FileSystem {} doesn't contain a storagepool. Skipping Ingestiong",unManagedFileSystemUri);        continue;      }      if (full_pools.contains(storagePoolUri)) {        continue;      }      if (pool.getIsResourceLimitSet()) {        if (pool.getMaxResources() <= StoragePoolService.getNumResources(pool,_dbClient)) {          full_pools.add(storagePoolUri);          continue;        }      }      FileShare filesystem=new FileShare();      filesystem.setId(URIUtil.createId(FileShare.class));      filesystem.setNativeGuid(fsNativeGuid);      filesystem.setCapacity(lcapcity);      filesystem.setUsedCapacity(lusedCapacity);      filesystem.setPath(path);      filesystem.setMountPath(mountPath);      filesystem.setVirtualPool(param.getVpool());      filesystem.setVirtualArray(param.getVarray());      if (nasUri != null) {        filesystem.setVirtualNAS(URI.create(nasUri));      }      URI storageSystemUri=unManagedFileSystem.getStorageSystemUri();      StorageSystem system=_dbClient.queryObject(StorageSystem.class,storageSystemUri);      if (full_systems.contains(storageSystemUri)) {        continue;      }      if (system.getIsResourceLimitSet()) {        if (system.getMaxResources() <= StorageSystemService.getNumResources(system,_dbClient)) {          full_systems.add(storageSystemUri);          continue;        }      }      filesystem.setStorageDevice(storageSystemUri);      filesystem.setCreationTime(timeNow);      filesystem.setPool(storagePoolUri);      filesystem.setProtocol(new StringSet());      StringSet fsSupportedProtocols=new StringSet();      for (      StorageProtocol.File fileProtocol : StorageProtocol.File.values()) {        fsSupportedProtocols.add(fileProtocol.name());      }      fsSupportedProtocols.retainAll(pool.getProtocols());      fsSupportedProtocols.retainAll(cos.getProtocols());      filesystem.getProtocol().addAll(fsSupportedProtocols);      filesystem.setLabel(null == deviceLabel ? "" : deviceLabel);      filesystem.setName(null == fsName ? "" : fsName);      filesystem.setTenant(new NamedURI(project.getTenantOrg().getURI(),filesystem.getLabel()));      filesystem.setProject(new NamedURI(param.getProject(),filesystem.getLabel()));      _logger.info("Un Managed File System {} has exports? : {}",unManagedFileSystem.getId(),unManagedFileSystem.getHasExports());      StoragePort sPort=null;      if (port != null && neighborhood != null) {        if (StorageSystem.Type.isilon.toString().equals(system.getSystemType())) {          sPort=getIsilonStoragePort(port,nasUri,neighborhood.getId());        } else {          sPort=compareAndSelectPortURIForUMFS(system,port,neighborhood);        }      }      if (sPort == null) {        _logger.warn("Storage port of UMFS {} doesn't belong to a matching NetWork. So skipping ingestion",unManagedFileSystemUri);        continue;      }      _logger.info("Storage Port Found {}",sPort);      filesystem.setPortName(sPort.getPortName());      filesystem.setStoragePort(sPort.getId());      if (unManagedFileSystem.getHasExports()) {        filesystem.setFsExports(PropertySetterUtil.convertUnManagedExportMapToManaged(unManagedFileSystem.getFsUnManagedExportMap(),sPort,dataMover));        _logger.info("Export map for {} = {}",fsName,filesystem.getFsExports());        List<UnManagedFileExportRule> exports=queryDBFSExports(unManagedFileSystem);        _logger.info("Number of Exports Found : {} for UnManaged Fs path : {}",exports.size(),unManagedFileSystem.getMountPath());        if (exports != null && !exports.isEmpty()) {          for (          UnManagedFileExportRule rule : exports) {            rule.setFileSystemId(filesystem.getId());            createRule(rule,fsExportRules);            rule.setInactive(true);            inActiveUnManagedExportRules.add(rule);          }        }      }      if (unManagedFileSystem.getHasShares()) {        filesystem.setSMBFileShares(PropertySetterUtil.convertUnManagedSMBMapToManaged(unManagedFileSystem.getUnManagedSmbShareMap(),sPort,dataMover));        _logger.info("Share map for {} = {}",fsName,filesystem.getSMBFileShares());        List<UnManagedCifsShareACL> cifsACLs=queryDBCifsShares(unManagedFileSystem);        _logger.info("Number of Cifs ACL Found : {} for UnManaged Fs path : {}",cifsACLs.size(),unManagedFileSystem.getMountPath());        if (cifsACLs != null && !cifsACLs.isEmpty()) {          for (          UnManagedCifsShareACL umCifsAcl : cifsACLs) {            umCifsAcl.setFileSystemId(filesystem.getId());            createACL(umCifsAcl,fsCifsShareAcls,filesystem);            umCifsAcl.setInactive(true);            inActiveUnManagedShareCifs.add(umCifsAcl);          }        }      }      if (unManagedFileSystem.getHasNFSAcl()) {        List<UnManagedNFSShareACL> nfsACLs=queryDBNfsShares(unManagedFileSystem);        if (nfsACLs != null && !nfsACLs.isEmpty()) {          for (          UnManagedNFSShareACL umNfsAcl : nfsACLs) {            umNfsAcl.setFileSystemId(filesystem.getId());            if (umNfsAcl.getPermissions().isEmpty()) {              continue;            }            createNFSACL(umNfsAcl,fsNfsShareAcls,filesystem);            umNfsAcl.setInactive(true);            inActiveUnManagedShareNfs.add(umNfsAcl);          }        }      }      if (null != unManagedFileSystem.getExtensions() && null != unManagedFileSystem.getExtensions().get(QUOTA)) {        if (null == filesystem.getExtensions()) {          filesystem.setExtensions(new StringMap());        }        filesystem.getExtensions().put(QUOTA,unManagedFileSystem.getExtensions().get(QUOTA));      }      filesystems.add(PropertySetterUtil.addFileSystemDetails(unManagedFileSystemInformation,filesystem));      filesystemList.getFilesystems().add(toNamedRelatedResource(ResourceTypeEnum.FILE,filesystem.getId(),filesystem.getNativeGuid()));      unManagedFileSystem.setInactive(true);      unManagedFileSystems.add(unManagedFileSystem);      unManagedFSURIToFSMap.put(unManagedFileSystemUri,filesystem);    }    int i=0;    for (    FileShare fs : filesystems) {      ++i;      _logger.info("{} --> Saving FS to DB {}",i,fs);      _logger.info(" --> Fs  Storage Pool {} and Virtual Pool {}",fs.getPool(),fs.getVirtualPool());    }    _dbClient.createObject(filesystems);    for (    URI unManagedFSURI : param.getUnManagedFileSystems()) {      FileShare fs=unManagedFSURIToFSMap.get(unManagedFSURI);      if (fs != null) {        _logger.debug("ingesting quota directories for filesystem {}",fs.getId());        ingestFileQuotaDirectories(fs);      }    }    i=0;    for (    FileExportRule rule : fsExportRules) {      ++i;      _logger.info("{} --> Saving Export rule to DB {}",i,rule);    }    _dbClient.createObject(fsExportRules);    i=0;    for (    CifsShareACL acl : fsCifsShareAcls) {      ++i;      _logger.info("{} --> Saving New Cifs ACL to DB {}",i,acl);    }    if (fsCifsShareAcls != null && !fsCifsShareAcls.isEmpty()) {      _dbClient.createObject(fsCifsShareAcls);    }    i=0;    for (    UnManagedCifsShareACL acl : inActiveUnManagedShareCifs) {      ++i;      _logger.info("{} Updating UnManagedACL DB as InActive TRUE {}",acl);    }    _dbClient.updateObject(inActiveUnManagedShareCifs);    i=0;    for (    UnManagedFileExportRule rule : inActiveUnManagedExportRules) {      ++i;      _logger.info("{} Updating DB as InActive TRUE {}",rule);    }    _dbClient.updateObject(inActiveUnManagedExportRules);    _dbClient.updateObject(unManagedFileSystems);    if (fsNfsShareAcls != null && !fsNfsShareAcls.isEmpty()) {      _logger.info("Saving {} NFS ACLs to DB",fsNfsShareAcls.size());      _dbClient.createObject(fsNfsShareAcls);    }    if (inActiveUnManagedShareNfs != null && !inActiveUnManagedShareNfs.isEmpty()) {      _logger.info("Saving {} UnManagedNFS ACLs to DB",inActiveUnManagedShareNfs.size());      _dbClient.updateObject(inActiveUnManagedShareNfs);    }    for (    FileShare filesystem : filesystems) {      recordFileSystemOperation(_dbClient,OperationTypeEnum.INGEST_FILE_SYSTEM,Status.ready,filesystem.getId());    }  } catch (  InternalException e) {    throw e;  }catch (  Exception e) {    _logger.error("Unexpected exception:",e);    throw APIException.internalServerErrors.genericApisvcError(e.getMessage(),e);  }  return filesystemList;}  }
class C{  private boolean resolveEverything(){  return (Options.v().whole_program() || Options.v().whole_shimple() || Options.v().full_resolver()|| Options.v().output_format() == Options.output_format_dava);}  }
class C{  public void configureManagers(){  InstanceManager.setLightManager(new jmri.jmrix.powerline.cp290.SpecificLightManager(getTrafficController()));  InstanceManager.setSensorManager(new jmri.jmrix.powerline.cp290.SpecificSensorManager(getTrafficController()));  InstanceManager.setTurnoutManager(new jmri.jmrix.powerline.SerialTurnoutManager(getTrafficController()));}  }
class C{  public static Filter loadFilter(final IProject project) throws CoreException {  FilterLocator filterLocator=Activator.getDefault().getFilterLocator();  IPath filterPath=findFilterPath(project);  if (filterPath == null) {    return null;  }  IFile filterFile=ResourcesPlugin.getWorkspace().getRoot().getFileForLocation(project,filterPath);  Filter filter=null;  if (filterFile != null && filterFile.exists()) {    InputStream contents=null;    try {      contents=filterFile.getContents();      filter=filterLocator.loadFilter(contents);    } catch (    IOException e) {      throw new CoreException(new Status(IStatus.ERROR,Activator.PLUGIN_ID,"Failed loading filter file for project " + project + " from location "+ filterFile,e));    } finally {      IOUtils.closeQuietly(contents);    }  }  return filter;}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (name.equals("DeleteOldImported"))     m_deleteOldImported="Y".equals(para[i].getParameter()); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  m_AD_Client_ID=getAD_Client_ID();}  }
class C{  public static AvedevProjectionExpression avedev(String propertyName){  return new AvedevProjectionExpression(getPropExpr(propertyName),false);}  }
class C{  public Vector3f mulTransposePosition(Matrix4fc mat){  return mulTransposePosition(mat,this);}  }
class C{  @Override public void onClick(ClickEvent event){  if (!enabled) {    return;  }  ActionEvent e=new ActionEvent(presentation,actionManager,perspectiveManager);  if (action instanceof ActionGroup && !(action instanceof CustomComponentAction) && ((ActionGroup)action).isPopup()) {  } else {    action.actionPerformed(e);  }}  }
class C{  public final TextBuilder append(CharSequence csq,int start,int end){  if (csq == null)   return append("null");  if ((start < 0) || (end < 0) || (start > end)|| (end > csq.length()))   throw new IndexOutOfBoundsException();  for (int i=start; i < end; ) {    append(csq.charAt(i++));  }  return this;}  }
class C{  public String toString(cp_info constant_pool[]){  CONSTANT_Utf8_info ci=(CONSTANT_Utf8_info)(constant_pool[name_index]);  CONSTANT_Utf8_info di=(CONSTANT_Utf8_info)(constant_pool[descriptor_index]);  return ci.convert() + ":" + di.convert();}  }
class C{  protected byte[] hexStringToByteArray(String hexString){  int len=hexString.length();  byte[] data=new byte[len / 2];  for (int i=0; i < len; i+=2) {    data[i / 2]=(byte)((Character.digit(hexString.charAt(i),16) << 4) + Character.digit(hexString.charAt(i + 1),16));  }  return data;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public final ExecutionThread executionThread(){  return executionThread;}  }
class C{  public static String generate(char[] password,byte[] salt,int cost){  if (password == null) {    throw new IllegalArgumentException("Password required.");  }  if (salt == null) {    throw new IllegalArgumentException("Salt required.");  } else   if (salt.length != 16) {    throw new DataLengthException("16 byte salt required: " + salt.length);  }  if (cost < 4 || cost > 31) {    throw new IllegalArgumentException("Invalid cost factor.");  }  byte[] psw=Strings.toUTF8ByteArray(password);  byte[] tmp=new byte[psw.length >= 72 ? 72 : psw.length + 1];  if (tmp.length > psw.length) {    System.arraycopy(psw,0,tmp,0,psw.length);  } else {    System.arraycopy(psw,0,tmp,0,tmp.length);  }  Arrays.fill(psw,(byte)0);  String rv=createBcryptString(tmp,salt,cost);  Arrays.fill(tmp,(byte)0);  return rv;}  }
class C{  public SymbolCode(String symCode){  if (symCode == null) {    String msg=Logging.getMessage("nullValue.SymbolCodeIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (symCode.length() != 15) {    String msg=Logging.getMessage("Symbology.SymbolCodeLengthInvalid",symCode);    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  String s=this.parseSymCode(symCode);  if (s != null) {    Logging.logger().severe(s);    throw new WWUnrecognizedException(s);  }}  }
class C{  public static boolean isFirefox(RemoteWebDriver driver){  Preconditions.checkNotNull(driver);  Capabilities capabilities=driver.getCapabilities();  return "FIREFOX".equals(capabilities.getBrowserName().toUpperCase());}  }
class C{  public Skyline(Tree tree,double mutationRate,double epsilon){  this(new TreeIntervals(tree),mutationRate,epsilon);}  }
class C{  protected boolean justNullAssertion(Statement statement){  Set<Assertion> assertions=statement.getAssertions();  if (assertions.isEmpty())   return false; else {    Iterator<Assertion> iterator=assertions.iterator();    VariableReference ret=statement.getReturnValue();    VariableReference callee=null;    if (statement instanceof MethodStatement) {      callee=((MethodStatement)statement).getCallee();    }    boolean just=true;    while (iterator.hasNext()) {      Assertion ass=iterator.next();      if (!(ass instanceof NullAssertion)) {        if (ass.getReferencedVariables().contains(ret) || ass.getReferencedVariables().contains(callee)) {          just=false;          break;        }      }    }    return just;  }}  }
class C{  public boolean checkDatasetExists(String datasetName) throws IOException {  try {    bigquery.datasets().get(getProjectId(),datasetName).execute();    return true;  } catch (  GoogleJsonResponseException e) {    if (e.getDetails().getCode() == 404) {      return false;    }    throw e;  }}  }
class C{  private void createDetail(String sql,MCommissionAmt comAmt) throws Exception {  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,get_TrxName());    pstmt.setInt(1,m_com.getAD_Client_ID());    pstmt.setTimestamp(2,p_StartDate);    pstmt.setTimestamp(3,m_EndDate);    rs=pstmt.executeQuery();    while (rs.next()) {      MCommissionDetail cd=new MCommissionDetail(comAmt,rs.getInt(1),rs.getBigDecimal(2),rs.getBigDecimal(3));      cd.setLineIDs(rs.getInt(4),rs.getInt(5));      String s=rs.getString(6);      if (s != null)       cd.setReference(s);      s=rs.getString(7);      if (s != null)       cd.setInfo(s);      Timestamp date=rs.getTimestamp(8);      cd.setConvertedAmt(date);      if (!cd.save())       throw new IllegalArgumentException("CommissionCalc - Detail Not saved");    }    pstmt=null;  } catch (  Exception e) {    throw new AdempiereSystemError("System Error: " + e.getLocalizedMessage(),e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }}  }
class C{  public TridiagonalDoubleMatrix2D(int rows,int columns){  super(null);  setUp(rows,columns);  int d=Math.min(rows,columns);  int u=d - 1;  int l=d - 1;  if (rows > columns)   l++;  if (rows < columns)   u++;  values=new double[l + d + u];  int[] dimensions={0,l,l + d,l + d + u,0,0,0};  dims=dimensions;}  }
class C{  @Override public void terminateSession(String sessionid) throws org.apache.thrift.TException {  if (!msgQueues.containsKey(sessionid)) {    return;  }  SessionQueue pQueue=msgQueues.get(sessionid);  log.debug("terminateSession: SessionId: " + sessionid + "\n");  String data="FilterTimeout";  ByteBuffer bb=ByteBuffer.wrap(data.getBytes());  BlockingQueue<ByteBuffer> queue=pQueue.getQueue();  if (queue != null) {    if (!queue.offer(bb)) {      log.error("Failed to queue message for session: " + sessionid);    }    msgQueues.remove(sessionid);  } else {    log.error("queue for session {} is null",sessionid);  }}  }
class C{  protected void addComponentClassLoader(final CachedComponentClassLoader cachedComponentClassLoader){  this.componentClassLoaders.add(cachedComponentClassLoader);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void fetchRemoteVersionTag(EntryEventImpl event){  if (event.getRegion() instanceof DistributedRegion) {    DistributedRegion dr=(DistributedRegion)event.getRegion();    if (dr.dataPolicy == DataPolicy.NORMAL || dr.dataPolicy == DataPolicy.PRELOADED) {      VersionTag tag=null;      try {        tag=dr.fetchRemoteVersionTag(event.getKey());      } catch (      EntryNotFoundException e) {      }      if (tag != null) {        setRemoteVersionTag(tag);      }    }  }}  }
class C{  @Override protected void finalize() throws Throwable {  String[] names=getValueNames();  for (int i=0; i < names.length; i++) {    removeValue(names[i]);  }}  }
class C{  @Inline private int computeHash(Word key){  return key.rshl(HASH_SHIFT).and(mask).toInt();}  }
class C{  private void acceptOffer(){  if (offerToAccept.doesAffectBaseCost()) {    basePlanModel.updateBaseCost(offerToAccept.getCost());  } else {    basePlanModel.updateAddonCost(offerToAccept.getCost());  }  createSnackBar(offerToAccept);  offerAcceptStream.onNext(offerToAccept);}  }
class C{  public Properties properties(){  return properties;}  }
class C{  public void writeAll(ResultSet rs,boolean includeColumnNames) throws SQLException, IOException {  if (includeColumnNames) {    writeColumnNames(rs);  }  while (rs.next()) {    writeNext(resultService.getColumnValues(rs));  }}  }
class C{  public byte[] readSegment(byte segmentMarker,int occurrence){  return _segmentData.getSegment(segmentMarker,occurrence);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case DomPackage.LITERAL__VALUE:    return VALUE_EDEFAULT == null ? value != null : !VALUE_EDEFAULT.equals(value);case DomPackage.LITERAL__NAME:  return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);}return super.eIsSet(featureID);}  }
class C{  public static double[] sums(double[][] input,int startRow,int length){  double[] theSums=new double[input[0].length];  for (int r=startRow; r < startRow + length; r++) {    for (int c=0; c < input[r].length; c++) {      theSums[c]+=input[r][c];    }  }  return theSums;}  }
class C{  @AndroidOnly("Test filed on RI: getRevokedCertificate throws " + "RuntimeException.") public void testGetRevokedCertificate(){  try {    tbt_crl.getRevokedCertificate((X509Certificate)null);    fail("NullPointerException should be thrown " + "in the case of null input data.");  } catch (  NullPointerException e) {  }  try {    CertificateFactory cf=CertificateFactory.getInstance("X.509");    X509Certificate cert=(X509Certificate)cf.generateCertificate(certArray);    tbt_crl.getRevokedCertificate(cert);  } catch (  Exception e) {    fail("Unexpected exception: " + e);  }}  }
class C{  public void newHuman(HumanResource people){  if (people != null) {    try {      DefaultMutableTreeTableNode result=getTreeModel().addResource(people);      getTreeTable().getTree().scrollPathToVisible(TreeUtil.createPath(result));    } catch (    Exception e) {      System.err.println("when adding this guy: " + people);      e.printStackTrace();    }  }}  }
class C{  protected static void swap(final Swapper swapper,int a,int b,final int n){  for (int i=0; i < n; i++, a++, b++)   swapper.swap(a,b);}  }
class C{  public void clear(){  mSize=0;}  }
class C{  public static Bitmap drawableToBitmap(Drawable drawable){  Bitmap bitmap=Bitmap.createBitmap(drawable.getIntrinsicWidth(),drawable.getIntrinsicHeight(),drawable.getOpacity() != PixelFormat.OPAQUE ? Bitmap.Config.ARGB_8888 : Bitmap.Config.RGB_565);  Canvas canvas=new Canvas(bitmap);  drawable.setBounds(0,0,drawable.getIntrinsicWidth(),drawable.getIntrinsicHeight());  drawable.draw(canvas);  return bitmap;}  }
class C{  private void resetMnemonics(){  if (mnemonicToIndexMap != null) {    mnemonicToIndexMap.clear();    mnemonicInputMap.clear();  }}  }
class C{  public void startOfProcess(){}  }
class C{  protected void addCommand(Command cmd,int index){  if (getCommandCount() == 0 && parent != null) {    installMenuBar();  }  if (commands.contains(cmd)) {    return;  }  commands.insertElementAt(cmd,index);  if (!(parent instanceof Dialog)) {    int behavior=getCommandBehavior();    if (behavior == Display.COMMAND_BEHAVIOR_BUTTON_BAR || behavior == Display.COMMAND_BEHAVIOR_BUTTON_BAR_TITLE_BACK || behavior == Display.COMMAND_BEHAVIOR_BUTTON_BAR_TITLE_RIGHT || behavior == Display.COMMAND_BEHAVIOR_ICS || behavior == Display.COMMAND_BEHAVIOR_SIDE_NAVIGATION) {      if (behavior == Display.COMMAND_BEHAVIOR_BUTTON_BAR_TITLE_BACK && cmd == parent.getBackCommand()) {        return;      }      if (behavior == Display.COMMAND_BEHAVIOR_SIDE_NAVIGATION) {        return;      }      if ((behavior == Display.COMMAND_BEHAVIOR_BUTTON_BAR_TITLE_BACK || behavior == Display.COMMAND_BEHAVIOR_ICS) && parent.getTitle() != null && parent.getTitle().length() > 0) {        synchronizeCommandsWithButtonsInBackbutton();        return;      }      if (parent.getBackCommand() != cmd) {        if (behavior != Display.COMMAND_BEHAVIOR_ICS) {          setLayout(new GridLayout(1,getComponentCount() + 1));          addComponent(Math.min(getComponentCount(),index),createTouchCommandButton(cmd));          revalidate();        }      } else {        commands.removeElement(cmd);      }      return;    }  }  updateCommands();}  }
class C{  public Handle(int tag,String owner,String name,String desc,boolean itf){  this.tag=tag;  this.owner=owner;  this.name=name;  this.desc=desc;  this.itf=itf;}  }
class C{  @Override public void service(Mail mail) throws MessagingException {  if (!mail.getState().equals(Mail.GHOST)) {    doService(mail);    if (consume) {      mail.setState(Mail.GHOST);    }  }}  }
class C{  private void validateZoneNameLength(String zoneName,boolean isIvrZone,String systemType){  if (isIvrZone && DiscoveredDataObject.Type.brocade.name().equals(systemType)) {    if (zoneName.length() > BROCADE_ZONE_NAME_IVR_LENGTH) {      throw NetworkDeviceControllerException.exceptions.nameZoneLongerThanAllowed(zoneName,BROCADE_ZONE_NAME_IVR_LENGTH);    }  } else {    if (zoneName.length() > ZONE_NAME_LENGTH) {      throw NetworkDeviceControllerException.exceptions.nameZoneLongerThanAllowed(zoneName,ZONE_NAME_LENGTH);    }  }}  }
class C{  public boolean load(java.io.InputStream in) throws XMLStreamException {  XMLStreamReader reader=null;  try {    reader=inputFactory.createXMLStreamReader(new java.io.InputStreamReader(in));    while (reader.hasNext()) {      int evtType=reader.next();      if (evtType != XMLStreamConstants.START_ELEMENT)       continue;      String tagName=reader.getLocalName();      if (!"sql".equals(tagName))       continue;      int attrCount=reader.getAttributeCount();      String name=null;      String paramCount=null;      String comments=null;      boolean replace=false;      boolean useSnapId=false;      boolean useDbid=false;      boolean expandRow=false;      boolean errorInline=false;      for (int i=0; i < attrCount; i++) {        String attrName=reader.getAttributeLocalName(i);        String attrValue=reader.getAttributeValue(i);        if ("handle".equals(attrName))         name=attrValue; else         if ("paramCount".equals(attrName))         paramCount=attrValue; else         if ("comments".equalsIgnoreCase(attrName))         comments=attrValue; else         if ("replace".equalsIgnoreCase(attrName)) {          replace="Y".equalsIgnoreCase(attrValue) || "TRUE".equalsIgnoreCase(attrValue);        } else         if ("useSnapId".equalsIgnoreCase(attrName)) {          useSnapId="Y".equalsIgnoreCase(attrValue) || "TRUE".equalsIgnoreCase(attrValue);        } else         if ("useDbid".equalsIgnoreCase(attrName)) {          useDbid="Y".equalsIgnoreCase(attrValue) || "TRUE".equalsIgnoreCase(attrValue);        } else         if ("expandRow".equalsIgnoreCase(attrName)) {          expandRow="Y".equalsIgnoreCase(attrValue) || "TRUE".equalsIgnoreCase(attrValue);        } else         if ("errorInline".equalsIgnoreCase(attrName)) {          errorInline="Y".equalsIgnoreCase(attrValue) || "TRUE".equalsIgnoreCase(attrValue);        }      }      if (name != null && name.trim().length() > 0) {        Sql sql=new Sql();        sql.setHandle(name);        sql.setComments(comments);        sql.setReplace(replace);        sql.setUseSnapId(useSnapId);        sql.setUseDbid(useDbid);        sql.setExpandRow(expandRow);        sql.setErrorInline(errorInline);        try {          sql.setParamCount(Integer.parseInt(paramCount));        } catch (        Exception ex) {        }        while (reader.hasNext()) {          int evtType2=reader.next();          if (evtType2 == XMLStreamConstants.END_ELEMENT && "sql".equals(reader.getLocalName()))           break;          if (evtType2 != XMLStreamConstants.START_ELEMENT)           continue;          String tagName2=reader.getLocalName();          if ("text".equals(tagName2))           sql.setSqlText(reader.getElementText()); else           if ("class".equals(tagName2))           sql.setQueryClass(reader.getElementText()); else           if ("queryProcessor".equals(tagName2))           sql.setQueryProcessor(reader.getElementText()); else           if ("param".equals(tagName2))           sql.addParameter(reader.getAttributeValue(null,"name"),reader.getAttributeValue(null,"dataType")); else           if ("key".equalsIgnoreCase(tagName2))           sql.getKeyList().add(reader.getAttributeValue(null,"name").toUpperCase()); else           if ("value".equalsIgnoreCase(tagName2))           sql.getValueList().add(reader.getAttributeValue(null,"name").toUpperCase()); else           if ("flat".equalsIgnoreCase(tagName2)) {            sql.setFlatKey(reader.getAttributeValue(null,"name").toUpperCase());            String flatValue=reader.getAttributeValue(null,"value");            try {              for (              String s : flatValue.split(",")) {                sql.getFlatValueList().add(s.toUpperCase());              }            } catch (            Exception ex) {            }            flatValue=reader.getAttributeValue(null,"abbr");            try {              String[] ss=flatValue.split(",");              for (int i=0; i < ss.length; i++)               sql.getFlatValueAbbrMap().put(sql.getFlatValueList().get(i),ss[i]);            } catch (            Exception ex) {            }          } else           if ("metric".equalsIgnoreCase(tagName2)) {            if (reader.getAttributeValue(null,"suffix") != null)             sql.getMetrics().put(reader.getAttributeValue(null,"name").toUpperCase(),reader.getAttributeValue(null,"suffix")); else             sql.getMetrics().put(reader.getAttributeValue(null,"name").toUpperCase(),"");          } else           if ("vsql".equalsIgnoreCase(tagName2)) {            String minVersion=reader.getAttributeValue(null,"minVersion");            String maxVersion=reader.getAttributeValue(null,"maxVersion");            String vtext=reader.getElementText();            if (vtext != null && vtext.trim().length() > 0) {              sql.addVSql(vtext,minVersion,maxVersion);            }          }        }        this.sqlMap.put(sql.getHandle(),sql);      }    }  }  finally {    if (reader != null)     try {      reader.close();      reader=null;    } catch (    Exception iex) {    }  }  return false;}  }
class C{  public void resetMetrics(){  txs.resetMetrics();}  }
class C{  public void updateAllPodcasts(){  Integer numberOfWorkerThreads=Integer.valueOf(configBean.get("NO_WORKER_THREADS_FOR_UPDATE_ALL_PODCASTS"));  if (numberOfWorkerThreads == null) {    numberOfWorkerThreads=DEFAULT_NO_WORKER_THREADS_FOR_UPDATE_ALL_PODCASTS;  }  Integer totalNumberOfPodcasts=readDao.getNumberOfPodcasts();  Integer mod=totalNumberOfPodcasts % numberOfWorkerThreads;  Integer chunkSize=totalNumberOfPodcasts / numberOfWorkerThreads;  for (int i=0; i < numberOfWorkerThreads; i++) {    int startRow=i * chunkSize;    if (i == numberOfWorkerThreads - 1) {      chunkSize=chunkSize + mod;      LOG.debug("Thread[" + i + "] - ["+ startRow+ ","+ chunkSize+ "]");      this.updatePodcastsFromRange(startRow,chunkSize);    } else {      LOG.debug("Thread[" + i + "] - ["+ startRow+ ","+ chunkSize+ "]");      this.updatePodcastsFromRange(startRow,chunkSize);    }  }}  }
class C{  public boolean isInfoEnabled(){  return isEnabled(TraceSystem.INFO);}  }
class C{  protected boolean doReconcile(){  if (!flowReconcileEnabled) {    return false;  }  lastReconcileTime=new Date();  ArrayList<OFMatchReconcile> ofmRcList=new ArrayList<OFMatchReconcile>();  int reconcileCapacity=getCurrentCapacity();  if (logger.isTraceEnabled()) {    logger.trace("Reconcile capacity {} flows",reconcileCapacity);  }  while (!flowQueue.isEmpty() && reconcileCapacity > 0) {    OFMatchReconcile ofmRc=flowQueue.poll();    reconcileCapacity--;    if (ofmRc != null) {      ofmRcList.add(ofmRc);      ctrReconciledFlows.updateCounterWithFlush();      if (logger.isTraceEnabled()) {        logger.trace("Add flow {} to be the reconcileList",ofmRc.cookie);      }    } else {      break;    }  }  IFlowReconcileListener.Command retCmd;  if (ofmRcList.size() > 0) {    List<IFlowReconcileListener> listeners=flowReconcileListeners.getOrderedListeners();    if (listeners == null) {      if (logger.isTraceEnabled()) {        logger.trace("No flowReconcile listener");      }      return false;    }    for (    IFlowReconcileListener flowReconciler : flowReconcileListeners.getOrderedListeners()) {      if (logger.isTraceEnabled()) {        logger.trace("Reconciling flow: call listener {}",flowReconciler.getName());      }      retCmd=flowReconciler.reconcileFlows(ofmRcList);      if (retCmd == IFlowReconcileListener.Command.STOP) {        break;      }    }    for (    OFMatchReconcile ofmRc : ofmRcList) {      if (ofmRc.origReconcileQueryEvent != null) {        ofmRc.origReconcileQueryEvent.evType.getDebugEvent().updateEventWithFlush(new FlowReconcileQueryDebugEvent(ofmRc.origReconcileQueryEvent,"Flow Reconciliation Complete",ofmRc));      }    }    updateFlush();    flowReconcileThreadRunCount.incrementAndGet();  } else {    if (logger.isTraceEnabled()) {      logger.trace("No flow to be reconciled.");    }  }  if (flowQueue.isEmpty()) {    return false;  } else {    if (logger.isTraceEnabled()) {      logger.trace("{} more flows to be reconciled.",flowQueue.size());    }    return true;  }}  }
class C{  private boolean isProductUserManagementActive(Subscription subscription){  return subscription.getProduct().getTechnicalProduct().getAccessType() != ServiceAccessType.DIRECT;}  }
class C{  public long add(long key){  if (size >= maxSize) {    assert size == maxSize;    grow();  }  assert size < maxSize;  return set(key,size);}  }
class C{  @Override public int compareTo(CacheObject<V> o){  return o == null ? 1 : ObjectUtils.compare(this.data,o.data);}  }
class C{  public VPlexDeviceInfo createDeviceAndAttachAsMirror(VPlexVirtualVolumeInfo virtualVolume,List<VolumeInfo> nativeVolumeInfoList,boolean discoveryRequired,boolean preserveData) throws VPlexApiException {  s_logger.info("Request for mirror creation on VPlex at {}",_baseURI);  return _virtualVolumeMgr.createDeviceAndAttachAsMirror(virtualVolume,nativeVolumeInfoList,discoveryRequired,preserveData);}  }
class C{  public boolean isShouldNot(){  return shouldNot;}  }
class C{  public SettingsFactory(File settingsFile,String heading){  SETTINGS_FILE=settingsFile;  if (SETTINGS_FILE.isDirectory())   SETTINGS_FILE.delete();  HEADING=heading;  reload();}  }
class C{  private void processInputAboutAttribute(Attributes a){  if (a.getLength() > 0) {    String res=a.getValue(0);    input.setAboutAttribute(res);  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public boolean isReadOnly(){  Object oo=get_Value(COLUMNNAME_IsReadOnly);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected boolean right(TextView widget,Spannable buffer){  return false;}  }
class C{  public static CertificateID createCertId(X509Certificate subject,X509Certificate issuer) throws Exception {  return createCertId(subject.getSerialNumber(),issuer);}  }
class C{  protected void calcXBounds(Transformer trans){  double minx=trans.getValuesByTouchPoint(mViewPortHandler.contentLeft(),0).x;  double maxx=trans.getValuesByTouchPoint(mViewPortHandler.contentRight(),0).x;  if (!Double.isInfinite(minx))   mMinX=(int)minx;  if (!Double.isInfinite(maxx))   mMaxX=(int)Math.ceil(maxx);}  }
class C{  private String identifyLanguage(Parse parse){  StringBuilder text=new StringBuilder();  if (parse != null) {    String title=parse.getTitle();    if (title != null) {      text.append(title.toString());    }    String content=parse.getText();    if (content != null) {      text.append(" ").append(content.toString());    }    LanguageIdentifier identifier=new LanguageIdentifier(text.toString());    if (onlyCertain) {      if (identifier.isReasonablyCertain()) {        return identifier.getLanguage();      }    } else {      return identifier.getLanguage();    }  }  return null;}  }
class C{  public boolean stopped(){  return (dx == 0.0) && (dy == 0.0);}  }
class C{  @Override protected void postCreateRegion(){  super.postCreateRegion();synchronized (this.advisorListener) {    Set others=this.advisorListener.getInitialMembers();    CacheListener[] listeners=fetchCacheListenersField();    if (listeners != null) {      for (int i=0; i < listeners.length; i++) {        if (listeners[i] instanceof RegionMembershipListener) {          RegionMembershipListener rml=(RegionMembershipListener)listeners[i];          try {            DistributedMember[] otherDms=new DistributedMember[others.size()];            others.toArray(otherDms);            rml.initialMembers(this,otherDms);          } catch (          VirtualMachineError err) {            SystemFailure.initiateFailure(err);            throw err;          }catch (          Throwable t) {            SystemFailure.checkFailure();            logger.error(LocalizedMessage.create(LocalizedStrings.DistributedRegion_EXCEPTION_OCCURRED_IN_REGIONMEMBERSHIPLISTENER),t);          }        }      }    }    Set<String> allGatewaySenderIds=getAllGatewaySenderIds();    if (!allGatewaySenderIds.isEmpty()) {      for (      GatewaySender sender : cache.getAllGatewaySenders()) {        if (sender.isParallel() && allGatewaySenderIds.contains(sender.getId())) {          if (sender.getId().contains(AsyncEventQueueImpl.ASYNC_EVENT_QUEUE_PREFIX)) {            throw new AsyncEventQueueConfigurationException(LocalizedStrings.ParallelAsyncEventQueue_0_CAN_NOT_BE_USED_WITH_REPLICATED_REGION_1.toLocalizedString(new Object[]{AsyncEventQueueImpl.getAsyncEventQueueIdFromSenderId(sender.getId()),this.getFullPath()}));          }          throw new GatewaySenderConfigurationException(LocalizedStrings.ParallelGatewaySender_0_CAN_NOT_BE_USED_WITH_REPLICATED_REGION_1.toLocalizedString(new Object[]{sender.getId(),this.getFullPath()}));        }      }    }  }}  }
class C{  public synchronized void deleteObserver(Observer observer){  observers.remove(observer);}  }
class C{  public FastCharStream(Reader r){  input=r;}  }
