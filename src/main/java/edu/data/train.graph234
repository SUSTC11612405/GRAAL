class C{  private Flag checkFlagNoHandles(byte expFlag){  byte flag=in.readByte();  if (flag == expFlag)   return Flag.NORMAL; else   if (flag == NULL)   return Flag.NULL;  int pos=BinaryUtils.positionForHandle(in);  throw new BinaryObjectException("Unexpected flag value [pos=" + pos + ", expected="+ expFlag+ ", actual="+ flag+ ']');}  }
class C{  public synchronized boolean obtainLock(Connection conn,String lockName){  lockName=lockName.intern();  if (log.isDebugEnabled()) {    log.debug("Lock '" + lockName + "' is desired by: "+ Thread.currentThread().getName());  }  if (!isLockOwner(lockName)) {    if (log.isDebugEnabled()) {      log.debug("Lock '" + lockName + "' is being obtained: "+ Thread.currentThread().getName());    }    while (locks.contains(lockName)) {      try {        this.wait();      } catch (      InterruptedException ie) {        if (log.isDebugEnabled()) {          log.debug("Lock '" + lockName + "' was not obtained by: "+ Thread.currentThread().getName());        }      }    }    if (log.isDebugEnabled()) {      log.debug("Lock '" + lockName + "' given to: "+ Thread.currentThread().getName());    }    getThreadLocks().add(lockName);    locks.add(lockName);  } else   if (log.isDebugEnabled()) {    log.debug("Lock '" + lockName + "' already owned by: "+ Thread.currentThread().getName()+ " -- but not owner!",new Exception("stack-trace of wrongful returner"));  }  return true;}  }
class C{  public static final int floorPowerOf2(int x){  return (int)Math.pow(2,(int)(Math.log(x) / LOG2));}  }
class C{  public synchronized int updatePurchase(String orderId,String productId,PurchaseState purchaseState,long purchaseTime,String developerPayload){  insertOrder(orderId,productId,purchaseState,purchaseTime,developerPayload);  Cursor cursor=mDb.query(PURCHASE_HISTORY_TABLE_NAME,HISTORY_COLUMNS,HISTORY_PRODUCT_ID_COL + "=?",new String[]{productId},null,null,null,null);  if (cursor == null) {    return 0;  }  int quantity=0;  try {    while (cursor.moveToNext()) {      int stateIndex=cursor.getInt(2);      PurchaseState state=PurchaseState.valueOf(stateIndex);      if (state == PurchaseState.PURCHASED || state == PurchaseState.REFUNDED) {        quantity+=1;      }    }    updatePurchasedItem(productId,quantity);  }  finally {    if (cursor != null) {      cursor.close();    }  }  return quantity;}  }
class C{  public void visitLabel(Label label){  if (mv != null) {    mv.visitLabel(label);  }}  }
class C{  @Nullable private ExprNode checkAssign(ExprNode expr,Type from,Type to,AstNode node){  expr=BoxUtil.assign(expr,from,to);  if (expr == null) {    err.failedToCast(node,from.getName(),to.getName());    return null;  }  return expr;}  }
class C{  private byte[] bytes(int... bytesAsInts){  byte[] bytes=new byte[bytesAsInts.length];  for (int i=0; i < bytesAsInts.length; i++) {    bytes[i]=(byte)bytesAsInts[i];  }  return bytes;}  }
class C{  public static int[] quantizeImage(int pixels[][],int max_colors){  Cube cube=new Cube(pixels,max_colors);  cube.classification();  cube.reduction();  cube.assignment();  return cube.colormap;}  }
class C{  private MovieSetChooserModel(){  setName(BUNDLE.getString("chooser.nothingfound"));}  }
class C{  public VcfEvalParamsBuilder evalRegionsFile(File bedFile){  mEvalRegionsFile=bedFile;  return this;}  }
class C{  public StringBuffer(java.lang.String str){}  }
class C{  public static ExecutorService newFixedSizeThreadPool(int size,String name){  ThreadPoolExecutor tpe=new ThreadPoolExecutor(size,size,5L,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>(),daemonThreadFactory(name));  tpe.allowCoreThreadTimeOut(true);  return Executors.unconfigurableExecutorService(tpe);}  }
class C{  public SurfaceEllipse(){}  }
class C{  @Override public int hashCode(){  int result=0;  Iterator<?> it=iterator();  while (it.hasNext()) {    Object next=it.next();    result+=next == null ? 0 : next.hashCode();  }  return result;}  }
class C{  private static String generateLikeUppercase(String column,String value){  StringBuffer buffer=new StringBuffer();  String columnValue=value;  if (columnValue == null) {    columnValue="";  }  if (StringUtils.isNotEmpty(column)) {    buffer.append(QUERY_UPPER).append(QUERY_START_PARENTESIS).append(column).append(QUERY_END_PARENTESIS).append(QUERY_LIKE).append(QUERY_VALUE_DELIMITER).append(QUERY_LIKE_WILDCARD).append(columnValue.toUpperCase()).append(QUERY_LIKE_WILDCARD).append(QUERY_VALUE_DELIMITER);  }  return buffer.toString();}  }
class C{  public boolean removeArea(PMElement ag){  return gr.removeElement(ag);}  }
class C{  public int add(UISearchResult o){  return add(o,getRowCount());}  }
class C{  public RejoinGroupChatSession rejoinGroupChatSession(String chatId){  boolean logActivated=sLogger.isActivated();  if (logActivated) {    sLogger.info("Rejoin group chat session");  }  assertAvailableChatSession("Max chat sessions reached");  GroupChatInfo groupChat=mMessagingLog.getGroupChatInfo(chatId);  if (groupChat == null) {    if (logActivated) {      sLogger.warn("Group chat " + chatId + " can't be rejoined: conversation not found");    }    throw new ServerApiPersistentStorageException("Group chat conversation not found in database");  }  if (groupChat.getRejoinId() == null) {    if (logActivated) {      sLogger.warn("Group chat " + chatId + " can't be rejoined: rejoin ID not found");    }    throw new ServerApiPersistentStorageException("Rejoin ID not found in database");  }  if (logActivated) {    sLogger.debug("Rejoin group chat: " + groupChat.toString());  }  long timestamp=groupChat.getTimestamp();  return new RejoinGroupChatSession(this,groupChat,mRcsSettings,mMessagingLog,timestamp,mContactManager);}  }
class C{  public int compareTo(FreeCellNode n){  return toString().compareTo(n.toString());}  }
class C{  public int count(){  return m_divs.count();}  }
class C{  public boolean addTo(String newTo){  if (newTo == null || newTo.length() == 0) {    m_valid=false;    return false;  }  InternetAddress ia=null;  try {    ia=new InternetAddress(newTo,true);  } catch (  Exception e) {    log.log(Level.WARNING,newTo + ": " + e.toString());    m_valid=false;    return false;  }  if (m_to == null)   m_to=new ArrayList<InternetAddress>();  m_to.add(ia);  return true;}  }
class C{  @SuppressWarnings("cast") @Override public boolean contains(final Object obj){  if (null != obj) {    Iterator<E> it=new ArrayDequeIterator<E>();    while (it.hasNext()) {      if (obj.equals((E)it.next())) {        return true;      }    }  }  return false;}  }
class C{  public synchronized String toString(){  int max=size() - 1;  if (max == -1)   return "{}";  StringBuilder sb=new StringBuilder();  Iterator<Map.Entry<K,V>> it=entrySet().iterator();  sb.append('{');  for (int i=0; ; i++) {    Map.Entry<K,V> e=it.next();    K key=e.getKey();    V value=e.getValue();    sb.append(key == this ? "(this Map)" : key.toString());    sb.append('=');    sb.append(value == this ? "(this Map)" : value.toString());    if (i == max)     return sb.append('}').toString();    sb.append(", ");  }}  }
class C{  @Override public T defaultCase(EObject object){  return null;}  }
class C{  private void _stop(JComponent c){  if (component == c) {    if (timer != null) {      timer.stop();    }    timer=null;    event=null;    component=null;  }}  }
class C{  private static ViewPropertyAnimator hideViewByScale(View v,int delay,int x,int y){  ViewPropertyAnimator propertyAnimator=v.animate().setStartDelay(delay).scaleX(x).scaleY(y);  return propertyAnimator;}  }
class C{  public PriorityQueue(SortedSet<? extends E> c){  getFromSortedSet(c);}  }
class C{  public Group(String groupValue,SolrDocumentList result){  _groupValue=groupValue;  _result=result;}  }
class C{  @Override protected void closeSocketAndStreams(){}  }
class C{  public ConstantExponentialModel(Parameter N0Parameter,Parameter timeParameter,Parameter growthRateParameter,Type units,boolean usingGrowthRate){  this(ConstantExponentialModelParser.CONSTANT_EXPONENTIAL_MODEL,N0Parameter,timeParameter,growthRateParameter,units,usingGrowthRate);}  }
class C{  public FillStyle(int bitmapId,Matrix matrix,boolean clipped){  this.matrix=matrix;  this.bitmapId=bitmapId;  fillType=clipped ? SWFConstants.FILL_CLIPPED_BITMAP : SWFConstants.FILL_TILED_BITMAP;}  }
class C{  public String jquerymobile_header(String title){  return "<!DOCTYPE html>\n" + "<html>\n" + "<head>\n"+ "<title>Spec</title>\n"+ "<meta name''viewport' content='width=device-width, initial-scale=1'>\n"+ "<link rel='stylesheet' href='http://code.jquery.com/mobile/1.2.0/jquery.mobile-1.2.0.min.css' />\n"+ "<script src='http://code.jquery.com/jquery-1.8.2.min.js'></script>\n"+ "<script src='http://code.jquery.com/mobile/1.2.0/jquery.mobile-1.2.0.min.js'></script>\n"+ "</head>\n"+ "<body>\n"+ "<div data-role='page'>\n"+ "<div data-role='header'>\n"+ "<h1>" + title + "</h1>\n"+ "</div><!-- /header -->\n";}  }
class C{  private void declareExtensions(){  new AclFeed().declareExtensions(extProfile);  new DocumentExportFeed().declareExtensions(extProfile);  new MetadataFeed().declareExtensions(extProfile);  new RevisionFeed().declareExtensions(extProfile);  extProfile.setAutoExtending(true);  new AudioEntry().declareExtensions(extProfile);  new DocumentEntry().declareExtensions(extProfile);  new DocumentListFeed().declareExtensions(extProfile);  new FolderEntry().declareExtensions(extProfile);  new PdfEntry().declareExtensions(extProfile);  new PresentationEntry().declareExtensions(extProfile);  new SpreadsheetEntry().declareExtensions(extProfile);  BatchUtils.declareExtensions(extProfile);}  }
class C{  public int hashCode(){  String hostString;  if (this.h1.compareTo(this.h2) < 0) {    hostString=h1.toString() + "-" + h2.toString();  } else {    hostString=h2.toString() + "-" + h1.toString();  }  return hostString.hashCode();}  }
class C{  public void reset(){  System.arraycopy(IV,0,cbcV,0,IV.length);  Arrays.fill(cbcNextV,(byte)0);  cipher.reset();}  }
class C{  public boolean isTaxIncluded(){  Object oo=get_Value(COLUMNNAME_IsTaxIncluded);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void assertAlmostEquals(Number expected,Number actual,int decimals){  assertAlmostEquals(null,expected,actual,decimals);}  }
class C{  public static <T>T unmarshal(Class<T> clazz,byte[] bytes) throws EppException {  try {    return INPUT_TRANSFORMER.unmarshal(clazz,new ByteArrayInputStream(bytes));  } catch (  XmlException e) {    FluentIterable<Throwable> causalChain=FluentIterable.from(Throwables.getCausalChain(e));    if (!(causalChain.filter(IpVersionMismatchException.class).isEmpty())) {      throw new IpAddressVersionMismatchException();    }    if (!(causalChain.filter(WrongProtocolVersionException.class).isEmpty())) {      throw new UnimplementedProtocolVersionException();    }    if (!(causalChain.filter(InvalidRepoIdException.class).isEmpty())) {      throw new InvalidRepoIdEppException();    }    if (!(causalChain.filter(UnknownCurrencyException.class).isEmpty())) {      throw new UnknownCurrencyEppException();    }    throw new GenericSyntaxErrorException(e.getMessage());  }}  }
class C{  public void treeNodesInserted(TreeModelEvent e){}  }
class C{  @Override public void visit(NodeVisitor v){  if (v.visit(this)) {    expression.visit(v);    statement.visit(v);  }}  }
class C{  public Vector(double comp[]) throws NegativeArraySizeException {  int n=comp.length;  if (n <= 0)   throw new NegativeArraySizeException("Vector components cannot be empty");  components=new double[n];  System.arraycopy(comp,0,components,0,n);}  }
class C{  private void initializeLiveAttributes(){  in=createLiveAnimatedString(null,SVG_IN_ATTRIBUTE);  in2=createLiveAnimatedString(null,SVG_IN2_ATTRIBUTE);  mode=createLiveAnimatedEnumeration(null,SVG_MODE_ATTRIBUTE,MODE_VALUES,(short)1);}  }
class C{  public void run(){  try {    while (true) {      Socket client_socket=listen_socket.accept();      HttpConnection httpConnection=new HttpConnection(client_socket,this);      httpConnection.start();    }  } catch (  IOException e) {    System.err.println("Exception while listening for connections");    e.printStackTrace();  }}  }
class C{  public EmbeddedSingleNodeKafkaCluster(){  this(new Properties());}  }
class C{  public boolean isProductDim(){  Object oo=get_Value(COLUMNNAME_IsProductDim);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  private static int addToBuffer(Writer out,char[] buffer,int bufferIndex,int bufferLength,char ch) throws IOException {  if (bufferIndex >= bufferLength) {    out.write(buffer,0,bufferIndex);    bufferIndex=0;  }  buffer[bufferIndex]=ch;  return bufferIndex + 1;}  }
class C{  public boolean mousePressed(MouseEvent e){  if (Debug.debugging("eomg")) {    Debug.output("PolyStateMachine|undefined state|mousePressed = " + graphic.getGraphic().getRenderType());  }  if (graphic.getGraphic().getRenderType() == OMGraphic.RENDERTYPE_OFFSET) {    graphic.getStateMachine().setOffsetNeeded(true);    Debug.message("eoml","PolyStateMachine|undefined state| *offset needed*");  }  initX=e.getX();  initY=e.getY();  ((EditableOMPoly)graphic).addPoint(initX,initY);  graphic.fireEvent(EOMGEvent.EOMG_SELECTED);  return getMapMouseListenerResponse();}  }
class C{  public ColorRange(FloatRange hue,FloatRange sat,FloatRange bri,String name){  this(hue,sat,bri,null,null,null,name);}  }
class C{  public JobStateReasons(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Agent a=(Agent)stack.pop();  int slotType=a.getSlotType();  int[] slots=a.getTimeslots();  if (slotType == 0 || slots == null || slots.length == 0)   return "";  StringBuffer sb=new StringBuffer();  for (int i=0; i < slots.length; i++) {    if (i > 0)     sb.append(';');    sb.append(BigBrother.getTimeslotString(slotType,slots[i]));  }  return sb.toString();}  }
class C{  public HeaderCardBuilder noScale(){  this.scale=-1;  return this;}  }
class C{  public Dag(){  this.graph=new EdgeListGraph();  reconstituteDpath();}  }
class C{  public int hashCode(){  return 0;}  }
class C{  public boolean isEntityOpPermitted(MetaClass metaClass,EntityOp entityOp){  return isPermitted(PermissionType.ENTITY_OP,metaClass.getName() + Permission.TARGET_PATH_DELIMETER + entityOp.getId());}  }
class C{  public void put(E e) throws InterruptedException {  if (e == null)   throw new NullPointerException();  int c=-1;  Node<E> node=new Node<E>(e);  final ReentrantLock putLock=this.putLock;  final AtomicInteger count=this.count;  putLock.lockInterruptibly();  try {    while (count.get() == capacity) {      notFull.await();    }    enqueue(node);    c=count.getAndIncrement();    if (c + 1 < capacity)     notFull.signal();  }  finally {    putLock.unlock();  }  if (c == 0)   signalNotEmpty();}  }
class C{  private void printAnnotations(List<AnnotationExpr> annotations,Object arg,boolean isOnReceiver){  if (annotations != null) {    Iterator<AnnotationExpr> i=annotations.iterator();    if (i.hasNext()) {      AnnotationExpr a=i.next();      if (isOnReceiver) {        printer.print(" ");      }      a.accept(this,arg);      while (i.hasNext()) {        printer.print(" ");        a=i.next();        a.accept(this,arg);      }      if (!isOnReceiver) {        printer.print(" ");      }    }  }}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private Relation componentRelate(double minLat,double maxLat,double minLon,double maxLon){  if (maxLon < this.minLon || minLon > this.maxLon || maxLat < this.minLat || minLat > this.maxLat) {    return Relation.CELL_OUTSIDE_QUERY;  }  if (minLat <= this.minLat && maxLat >= this.maxLat && minLon <= this.minLon && maxLon >= this.maxLon) {    return Relation.CELL_CROSSES_QUERY;  }  if (holes != null) {    Relation holeRelation=holes.relate(minLat,maxLat,minLon,maxLon);    if (holeRelation == Relation.CELL_CROSSES_QUERY) {      return Relation.CELL_CROSSES_QUERY;    } else     if (holeRelation == Relation.CELL_INSIDE_QUERY) {      return Relation.CELL_OUTSIDE_QUERY;    }  }  int numCorners=numberOfCorners(minLat,maxLat,minLon,maxLon);  if (numCorners == 4) {    if (tree.crosses(minLat,maxLat,minLon,maxLon)) {      return Relation.CELL_CROSSES_QUERY;    }    return Relation.CELL_INSIDE_QUERY;  } else   if (numCorners > 0) {    return Relation.CELL_CROSSES_QUERY;  }  if (tree.crosses(minLat,maxLat,minLon,maxLon)) {    return Relation.CELL_CROSSES_QUERY;  }  return Relation.CELL_OUTSIDE_QUERY;}  }
class C{  protected TypedPosition findClosestPosition(int offset){  int index=-1;  try {    index=this.documentPositionMap.computeIndexInCategory(this.positionCategory,offset);  } catch (  final BadLocationException e) {    Log.warn(DefaultPartitioner.class,"Bad location: " + offset + "(max:"+ getContentLength()+ ").");    return null;  }catch (  final BadPositionCategoryException e) {    Log.warn(DefaultPartitioner.class,"Bad position category: " + this.positionCategory);    return null;  }  if (index == -1) {    return null;  }  List<TypedPosition> category=null;  try {    category=getPositions();  } catch (  final BadPositionCategoryException e) {    Log.warn(DefaultPartitioner.class,"Bad position category: " + this.positionCategory);    return null;  }  if (category == null || category.size() == 0) {    return null;  }  if (index < category.size()) {    if (offset == category.get(index).offset) {      return category.get(index);    }  }  if (index > 0) {    index--;  }  return category.get(index);}  }
class C{  private boolean checkGooglePlayServicesAvailable(){  final int connectionStatusCode=GooglePlayServicesUtil.isGooglePlayServicesAvailable(getActivity());  if (GooglePlayServicesUtil.isUserRecoverableError(connectionStatusCode)) {    showGooglePlayServicesAvailabilityErrorDialog(connectionStatusCode);    return false;  }  return true;}  }
class C{  public String globalInfo(){  return "This instance filter takes a range of N numeric attributes and replaces " + "them with N-1 numeric attributes, the values of which are the difference " + "between consecutive attribute values from the original instance. eg: \n\n"+ "Original attribute values\n\n"+ "   0.1, 0.2, 0.3, 0.1, 0.3\n\n"+ "New attribute values\n\n"+ "   0.1, 0.1, -0.2, 0.2\n\n"+ "The range of attributes used is taken in numeric order. That is, a range "+ "spec of 7-11,3-5 will use the attribute ordering 3,4,5,7,8,9,10,11 for the "+ "differences, NOT 7,8,9,10,11,3,4,5.";}  }
class C{  public void put(Mean other){  final double nwsum=other.n + this.n;  this.m1=(this.n * this.m1 + other.n * other.m1) / nwsum;  this.n=nwsum;}  }
class C{  public In(URL url){  if (url == null)   throw new NullPointerException("argument is null");  try {    URLConnection site=url.openConnection();    InputStream is=site.getInputStream();    scanner=new Scanner(new BufferedInputStream(is),CHARSET_NAME);    scanner.useLocale(LOCALE);  } catch (  IOException ioe) {    throw new IllegalArgumentException("Could not open " + url);  }}  }
class C{  public void deleteAllUnscannedSongs(){  String selection=SONG_SCANNED + "=" + "'FALSE'";  getDatabase().delete(MUSIC_LIBRARY_TABLE,selection,null);}  }
class C{  private void preInit(){  treeField=new CComboBox(getTreeData());  treeField.addActionListener(this);  centerTree=new VTreePanel(m_WindowNo,false,true);  centerTree.addPropertyChangeListener(VTreePanel.NODE_SELECTION,this);}  }
class C{  public AlternativeBuilder<E> defaultArgs(Object... defaultArgs){  return new AlternativeBuilder<E>(clazz,defaultArgs);}  }
class C{  private void validateAddStepToClusterRequest(Object request,EmrStepHelper stepHelper) throws IllegalArgumentException {  String namespace=stepHelper.getRequestNamespace(request);  String clusterDefinitionName=stepHelper.getRequestEmrClusterDefinitionName(request);  String clusterName=stepHelper.getRequestEmrClusterName(request);  Assert.hasText(namespace,"A namespace must be specified.");  Assert.hasText(clusterDefinitionName,"An EMR cluster definition name must be specified.");  Assert.hasText(clusterName,"An EMR cluster name must be specified.");  stepHelper.setRequestNamespace(request,namespace.trim());  stepHelper.setRequestEmrClusterDefinitionName(request,clusterDefinitionName.trim());  stepHelper.setRequestEmrClusterName(request,clusterName.trim());}  }
class C{  public LocalServerSocket(FileDescriptor fd) throws IOException {  impl=new LocalSocketImpl(fd);  impl.listen(LISTEN_BACKLOG);  localAddress=impl.getSockAddress();}  }
class C{  protected void sendRemoveStream(){  callbackScheduledTime=-1;  if (this.hasViews()) {    EventBean[] oldData=null;    if (!currentBatch.isEmpty()) {      oldData=currentBatch.toArray(new EventBean[currentBatch.size()]);    }    if (viewUpdatedCollection != null) {      viewUpdatedCollection.update(null,oldData);    }    if (oldData != null) {      if (InstrumentationHelper.ENABLED) {        InstrumentationHelper.get().qViewIndicate(this,factory.getViewName(),null,oldData);      }      updateChildren(null,oldData);      if (InstrumentationHelper.ENABLED) {        InstrumentationHelper.get().aViewIndicate();      }    }  }  currentBatch.clear();}  }
class C{  private void drawCircle(Canvas canvas,Paint paint,float x,float y){  canvas.drawCircle(x,y,size,paint);}  }
class C{  private EventBean[] filterEvents(ExprEvaluator exprEvaluator,EventBean[] events,boolean isNewData,ExprEvaluatorContext exprEvaluatorContext){  if (events == null) {    return null;  }  EventBean[] evalEventArr=new EventBean[1];  boolean passResult[]=new boolean[events.length];  int passCount=0;  for (int i=0; i < events.length; i++) {    evalEventArr[0]=events[i];    if (InstrumentationHelper.ENABLED) {      InstrumentationHelper.get().qWhereClauseFilterEval(i,events[i],isNewData);    }    Boolean pass=(Boolean)exprEvaluator.evaluate(evalEventArr,isNewData,exprEvaluatorContext);    if (InstrumentationHelper.ENABLED) {      InstrumentationHelper.get().aWhereClauseFilterEval(pass);    }    if ((pass != null) && (pass)) {      passResult[i]=true;      passCount++;    }  }  if (passCount == 0) {    return null;  }  if (passCount == events.length) {    return events;  }  EventBean[] resultArray=new EventBean[passCount];  int count=0;  for (int i=0; i < passResult.length; i++) {    if (passResult[i]) {      resultArray[count]=events[i];      count++;    }  }  return resultArray;}  }
class C{  public void readSketchMetadata(Callback<SketchMetadata> callback){  addCallback(BeanMessageID.BL_GET_META,callback);  sendMessageWithoutPayload(BeanMessageID.BL_GET_META);}  }
class C{  public void testThrottle() throws Exception {  LT.throttleTimeout(1000);  LT.error(log,new RuntimeException("Test exception 1."),"Test");  LT.error(log,new RuntimeException("Test exception 1."),"Test");  LT.error(log,new RuntimeException("Test exception 1."),"Test1");  LT.error(log,new RuntimeException("Test exception 2."),"Test");  LT.error(log,null,"Test - without throwable.");  LT.error(log,null,"Test - without throwable.");  LT.warn(log,"Test - without throwable.");  LT.warn(log,"Test - without throwable1.");  LT.warn(log,"Test - without throwable1.");  Thread.sleep(LT.throttleTimeout());  info("Slept for throttle timeout: " + LT.throttleTimeout());  LT.error(log,new RuntimeException("Test exception 1."),"Test");  LT.error(log,new RuntimeException("Test exception 1."),"Test");  LT.error(log,new RuntimeException("Test exception 1."),"Test1");  LT.error(log,new RuntimeException("Test exception 2."),"Test");  LT.warn(log,"Test - without throwable.");  LT.warn(log,"Test - without throwable.");  Thread.sleep(LT.throttleTimeout());  info("Slept for throttle timeout: " + LT.throttleTimeout());  LT.info(log(),"Test info message.");  LT.info(log(),"Test info message.");  LT.info(log(),"Test info message.");  LT.info(log(),"Test info message.");  LT.info(log(),"Test info message.");  LT.info(log(),"Test info message.");}  }
class C{  public void update(byte[] buf,int off,int len){  int c=~crc;  while (--len >= 0)   c=crc_table[(c ^ buf[off++]) & 0xff] ^ (c >>> 8);  crc=~c;}  }
class C{  @Override public void onConnected(Bundle connectionHint){  log.info("Connected to GoogleApiClient");  if (currentLocation == null) {    currentLocation=LocationServices.FusedLocationApi.getLastLocation(googleApiClient);    lastLocationUpdateTime=new Date();    updateUI();  }  startLocationUpdates();}  }
class C{  public int indexOf(final String str){  return indexOf(str,0);}  }
class C{  private void addCSSClasses(SVGPlot svgp){  final StyleLibrary style=context.getStyleLibrary();  if (!svgp.getCSSClassManager().contains(CSS_CUBE)) {    CSSClass cls=new CSSClass(this,CSS_CUBE);    cls.setStatement(SVGConstants.CSS_STROKE_VALUE,style.getColor(StyleLibrary.SELECTION));    cls.setStatement(SVGConstants.CSS_STROKE_OPACITY_PROPERTY,style.getOpacity(StyleLibrary.SELECTION));    cls.setStatement(SVGConstants.CSS_STROKE_WIDTH_PROPERTY,style.getLineWidth(StyleLibrary.PLOT));    cls.setStatement(SVGConstants.CSS_STROKE_LINECAP_PROPERTY,SVGConstants.CSS_ROUND_VALUE);    cls.setStatement(SVGConstants.CSS_STROKE_LINEJOIN_PROPERTY,SVGConstants.CSS_ROUND_VALUE);    if (settings.nofill) {      cls.setStatement(SVGConstants.CSS_FILL_PROPERTY,SVGConstants.CSS_NONE_VALUE);    } else {      cls.setStatement(SVGConstants.CSS_FILL_PROPERTY,style.getColor(StyleLibrary.SELECTION));      cls.setStatement(SVGConstants.CSS_FILL_OPACITY_PROPERTY,style.getOpacity(StyleLibrary.SELECTION));    }    svgp.addCSSClassOrLogError(cls);  }  if (!svgp.getCSSClassManager().contains(CSS_CUBEFRAME)) {    CSSClass cls=new CSSClass(this,CSS_CUBEFRAME);    cls.setStatement(SVGConstants.CSS_STROKE_VALUE,style.getColor(StyleLibrary.SELECTION));    cls.setStatement(SVGConstants.CSS_STROKE_OPACITY_PROPERTY,style.getOpacity(StyleLibrary.SELECTION));    cls.setStatement(SVGConstants.CSS_STROKE_WIDTH_PROPERTY,style.getLineWidth(StyleLibrary.SELECTION));    svgp.addCSSClassOrLogError(cls);  }}  }
class C{  public QualityBenchmark(QualityQuery qqs[],QualityQueryParser qqParser,IndexSearcher searcher,String docNameField){  this.qualityQueries=qqs;  this.qqParser=qqParser;  this.searcher=searcher;  this.docNameField=docNameField;}  }
class C{  public Sort(SortField... fields){  setSort(fields);}  }
class C{  public static void checkState(boolean expression,@Nullable Object errorMessage){  if (!expression) {    throw new IllegalStateException(String.valueOf(errorMessage));  }}  }
class C{  public static int checkArgumentNonnegative(final int value,final String errorMessage){  if (value < 0) {    throw new IllegalArgumentException(errorMessage);  }  return value;}  }
class C{  BiLinearInterpolator(SpatialGrid sg){  this.sg=sg;}  }
class C{  public Object scan(){  _logger.debug("Getting next set of rows.");  return scanner.nextRows().addCallback(this);}  }
class C{  private void paintWrappedLineNumbers(Graphics g,Rectangle visibleRect){  int width=getWidth();  RTextAreaUI ui=(RTextAreaUI)textArea.getUI();  View v=ui.getRootView(textArea).getView(0);  boolean currentLineHighlighted=textArea.getHighlightCurrentLine();  Document doc=textArea.getDocument();  Element root=doc.getDefaultRootElement();  int lineCount=root.getElementCount();  int topPosition=textArea.viewToModel(new Point(visibleRect.x,visibleRect.y));  int topLine=root.getElementIndex(topPosition);  Rectangle visibleEditorRect=ui.getVisibleEditorRect();  Rectangle r=LineNumberList.getChildViewBounds(v,topLine,visibleEditorRect);  int y=r.y;  int rhs;  boolean ltr=getComponentOrientation().isLeftToRight();  if (ltr) {    rhs=width - RHS_BORDER_WIDTH;  } else {    rhs=RHS_BORDER_WIDTH;  }  int visibleBottom=visibleRect.y + visibleRect.height;  FontMetrics metrics=g.getFontMetrics();  g.setColor(getForeground());  while (y < visibleBottom) {    r=LineNumberList.getChildViewBounds(v,topLine,visibleEditorRect);    if (currentLineHighlighted && topLine == currentLine) {      g.setColor(textArea.getCurrentLineHighlightColor());      g.fillRect(0,y,width,(r.y + r.height) - y);      g.setColor(getForeground());    }    int index=(topLine + 1) + getLineNumberingStartIndex() - 1;    String number=Integer.toString(index);    if (ltr) {      int strWidth=metrics.stringWidth(number);      g.drawString(number,rhs - strWidth,y + ascent);    } else {      int x=RHS_BORDER_WIDTH;      g.drawString(number,x,y + ascent);    }    y+=r.height;    topLine++;    if (topLine >= lineCount)     break;  }}  }
class C{  public EvaluationResult eval(TranspilationHandler transpilationHandler,SourceFile... sourceFiles) throws Exception {  return eval("JavaScript",transpilationHandler,sourceFiles);}  }
class C{  @Override public final IMessageInstance readMessageInstance() throws IOException, AdeException {  String currentLine;  boolean gotLine=false;  boolean unexpectedSource=false;  if (m_messageInstanceWaiting != null) {    return getMessageInstanceWaiting();  }  if (m_suppressedMessagesRemaining > 0) {    updateSuppressedMessageStats();    return m_prevMessageInstance;  }  while (!gotLine) {    currentLine=getCurrentLine();    if (currentLine != null) {      currentLine=currentLine.replaceAll(ASCII_CONTROLLED_CHARACTERS,"");      final Matcher matcher=LinuxSyslogLineParser.getSysLogSuppressionPattern().matcher(currentLine);      if (matcher.matches()) {        if (m_prevMessageInstance == null) {          continue;        }        collectWrapperAndSuppressedInfo(matcher);        return m_prevMessageInstance;      }    }    if (currentLine == null) {      handleEndOfStream();      return null;    }    for (    LinuxSyslogLineParser lineParser : m_lineParsers) {      gotLine=lineParser.parseLine(currentLine);      if (gotLine) {        handleMissingComponent(lineParser,currentLine);        String msgId=getMessageId(lineParser);        if (lineParser instanceof LinuxSyslog5424ParserBase) {          is5424Parser=true;        }        DateTime dateTime=handleDateTime(lineParser);        final String sourceId=getAndProcessSourceId(lineParser.getSource());        if (sourceId == null) {          gotLine=false;          unexpectedSource=true;          MessagesWithUnexpectedSource.addMessage(lineParser.getSource(),lineParser.m_msgTime.getTime(),currentLine);          break;        }        m_isWrapperMessage=false;        m_nonWrapperMessageCount++;        InputTimeZoneManager.updateTimezone(sourceId,dateTime);        m_prevMessageInstance=m_dataFactory.newMessageInstance(sourceId,lineParser.getMsgTime(),msgId,lineParser.getMessageBody(),lineParser.getComponent(),lineParser.getSeverity());        m_messageInstanceWaiting=null;        return m_prevMessageInstance;      }    }    if (!gotLine) {      if (unexpectedSource) {        m_unexpectedSourceLineCount++;        unexpectedSource=false;      } else       if (currentLine.length() != 0) {        final MessagesWithParseErrorStats stats=MessagesWithParseErrorStats.getParserErrorStats();        stats.addMessage(currentLine);        m_errorLineCount++;      }    }  }  return null;}  }
class C{  public void configureBaudRate(String rate){  log.debug("configureBaudRate: " + rate);  selectedSpeed=rate;  super.configureBaudRate(rate);}  }
class C{  private void updateTextSize(Rect viewBounds){  float textSize=(float)viewBounds.height() * 2;  mIconPaint.setTextSize(textSize);  String textValue=String.valueOf(mIcon.getCharacter());  mIconPaint.getTextPath(textValue,0,1,0,viewBounds.height(),mPath);  mPath.computeBounds(mPathBounds,true);  float deltaWidth=((float)mPaddingBounds.width() / mPathBounds.width());  float deltaHeight=((float)mPaddingBounds.height() / mPathBounds.height());  float delta=(deltaWidth < deltaHeight) ? deltaWidth : deltaHeight;  textSize*=delta;  mIconPaint.setTextSize(textSize);  mIconPaint.getTextPath(textValue,0,1,0,viewBounds.height(),mPath);  mPath.computeBounds(mPathBounds,true);}  }
class C{  public void paint(Graphics graphics){  if (isEmpty())   return;  for (  PaintListener target : this) {    if (Debug.debugging("paint")) {      Debug.output("PaintListenerSupport.paint(): target is: " + target);    }    target.listenerPaint(getSource(),graphics);  }}  }
class C{  public static boolean isDebugEnabled(){  return (debugFactory == enabledFactory) ? true : false;}  }
class C{  public int hashCode(){  long bits=1L;  bits=31L * bits + VecMathUtil.doubleToLongBits(m00);  bits=31L * bits + VecMathUtil.doubleToLongBits(m01);  bits=31L * bits + VecMathUtil.doubleToLongBits(m02);  bits=31L * bits + VecMathUtil.doubleToLongBits(m10);  bits=31L * bits + VecMathUtil.doubleToLongBits(m11);  bits=31L * bits + VecMathUtil.doubleToLongBits(m12);  bits=31L * bits + VecMathUtil.doubleToLongBits(m20);  bits=31L * bits + VecMathUtil.doubleToLongBits(m21);  bits=31L * bits + VecMathUtil.doubleToLongBits(m22);  return (int)(bits ^ (bits >> 32));}  }
class C{  protected void drawOutline(){  mDrawCanvas.drawRect(mOffsetLeft,mOffsetTop,getWidth() - mOffsetRight,getHeight() - mOffsetBottom,mOutLinePaint);}  }
class C{  @Override public BugObject copy(){  return new BugObject(this);}  }
class C{  public HttpServletRequest preExecute(HttpServletRequest request){  return request;}  }
class C{  public String toFormattedString(){  return "3D peer memory copy setup:\n    " + createString("\n    ");}  }
class C{  void clusterHeartbeat(String clusterId,UpdateServerHeartbeat updateSelf,UpdateRackHeartbeat updateRack,UpdatePodSystem updatePod,long sequence){  if (startUpdate(updateRack,updatePod)) {    getHeartbeat().clusterHeartbeat(clusterId,updateSelf,updateRack,updatePod,sequence);  }}  }
class C{  public void addConnection(ClientProxyMembershipID proxyID,ServerConnection connection){synchronized (_clientThreadsLock) {    Set serverConnections=(Set)this._clientThreads.get(proxyID);    if (serverConnections == null) {      serverConnections=new HashSet();      this._clientThreads.put(proxyID,serverConnections);    }    serverConnections.add(connection);  }}  }
class C{  public void resetConfigurables(){  if (source != null) {    for (    Configurable originalConfig : originalNames.keySet()) {      ConfigurationManager.getInstance().removeConfigurable(originalConfig.getTypeId(),originalNames.get(originalConfig),source.getName());    }    listOfConfigurables.clear();  }}  }
class C{  @Override protected EClass eStaticClass(){  return SGraphPackage.Literals.REACTIVE_ELEMENT;}  }
class C{  public CreateArguments(){}  }
class C{  public Source<Character> ascii(){  return Compositions.weightWithValues(Characters.ofCharacters(FIRST_CODEPOINT,ASCII_LAST_CODEPOINT),LARGEST_ASCII_CHARACTER,SMALLEST_CHARACTER);}  }
class C{  protected static void appendBigDecimalNumericType(StringBuilder sb){  sb.append("NUMERIC");}  }
class C{  @Override public int helo(String hostname) throws IOException {  return sendCommand("LHLO",hostname);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:55.953 -0500",hash_original_method="A9B6ED6B9ACE659EADD4FA05AC05EB96",hash_generated_method="BB852DBF9E1E9E06A227AF0903B04500") public static String toString(byte[] array,String prefix){  final String[] offsetPrefix={"","000","00","0",""};  StringBuilder sb=new StringBuilder();  StringBuilder charForm=new StringBuilder();  int i=0;  for (i=0; i < array.length; i++) {    if (i % 16 == 0) {      sb.append(prefix);      String offset=Integer.toHexString(i);      sb.append(offsetPrefix[offset.length()]);      sb.append(offset);      charForm.delete(0,charForm.length());    }    sb.append(' ');    sb.append(Byte.toHexString(array[i],false));    int currentByte=(0xff & array[i]);    char currentChar=(char)(currentByte & 0xffff);    charForm.append((Character.isISOControl(currentChar) ? '.' : currentChar));    if ((i + 1) % 8 == 0) {      sb.append(' ');    }    if ((i + 1) % 16 == 0) {      sb.append(' ');      sb.append(charForm.toString());      sb.append('\n');    }  }  if (i % 16 != 0) {    int ws2add=16 - i % 16;    for (int j=0; j < ws2add; j++) {      sb.append("   ");    }    if (ws2add > 8) {      sb.append(' ');    }    sb.append("  ");    sb.append(charForm.toString());    sb.append('\n');  }  return sb.toString();}  }
class C{  protected void assertEquals(String message,ResultSet rs0,ResultSet rs1) throws SQLException {  ResultSetMetaData meta=rs0.getMetaData();  int columns=meta.getColumnCount();  assertEquals(columns,rs1.getMetaData().getColumnCount());  while (rs0.next()) {    assertTrue(message,rs1.next());    for (int i=0; i < columns; i++) {      assertEquals(message,rs0.getString(i + 1),rs1.getString(i + 1));    }  }  assertFalse(message,rs0.next());  assertFalse(message,rs1.next());}  }
class C{  public static MgmtSystemTenantConfigurationValue toResponse(final String key,final TenantConfigurationValue<?> repoConfValue){  final MgmtSystemTenantConfigurationValue restConfValue=new MgmtSystemTenantConfigurationValue();  restConfValue.setValue(repoConfValue.getValue());  restConfValue.setGlobal(repoConfValue.isGlobal());  restConfValue.setCreatedAt(repoConfValue.getCreatedAt());  restConfValue.setCreatedBy(repoConfValue.getCreatedBy());  restConfValue.setLastModifiedAt(repoConfValue.getLastModifiedAt());  restConfValue.setLastModifiedBy(repoConfValue.getLastModifiedBy());  restConfValue.add(linkTo(methodOn(MgmtSystemResource.class).getConfigurationValue(key)).withRel("self"));  return restConfValue;}  }
class C{  public void write(File file) throws IOException {  outList.add(file);  if (watcher != null) {    watcher.watch(file);  }}  }
class C{  public String globalInfo(){  return "Implementing Euclidean distance (or similarity) function.\n\n" + "One object defines not one distance but the data model in which " + "the distances between objects of that data model can be computed.\n\n"+ "Attention: For efficiency reasons the use of consistency checks "+ "(like are the data models of the two instances exactly the same), "+ "is low.\n\n"+ "For more information, see:\n\n"+ getTechnicalInformation().toString();}  }
class C{  public boolean more() throws JSONException {  this.next();  if (this.end()) {    return false;  }  this.back();  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.437 -0400",hash_original_method="CF942B57FF7D4AAB7109E087E337232C",hash_generated_method="A183D9D1A21AF22BDABE1ECE133DD5AB") public Object encode(Object pObject) throws EncoderException {  if (!(pObject instanceof java.lang.String)) {    throw new EncoderException("Parameter supplied to RefinedSoundex encode is not of type java.lang.String");  }  return soundex((String)pObject);}  }
class C{  public int compareTo(Version other){  int retVal;  if (major == other.major)   if (minor == other.minor)   if (service == other.service)   retVal=revision - other.revision; else   retVal=service - other.service; else   retVal=minor - other.minor; else   retVal=major - other.major;  return retVal;}  }
class C{  private static List<String> loadServicesImplementations(final Class ofClass){  List<String> result=new ArrayList<String>();  String override=System.getProperty(ofClass.getName());  if (override != null) {    result.add(override);  }  ClassLoader loader=ServiceLib.class.getClassLoader();  URL url=loader.getResource("META-INF/services/" + ofClass.getName());  InputStream inStream=null;  InputStreamReader reader=null;  BufferedReader bReader=null;  try {    inStream=url.openStream();    reader=new InputStreamReader(inStream);    bReader=new BufferedReader(reader);    String line;    while ((line=bReader.readLine()) != null) {      if (!line.matches("\\s*(#.*)?")) {        result.add(line.trim());      }    }  } catch (  IOException iox) {    LOG.log(Level.WARNING,"Could not load services descriptor: " + url.toString(),iox);  } finally {    finalClose(bReader);    finalClose(reader);    finalClose(inStream);  }  return result;}  }
class C{  public static boolean isGeometryClass(Class<?> cls){  return GEOMETRY_CLASS != null && GEOMETRY_CLASS.isAssignableFrom(cls);}  }
class C{  public void animateXY(int durationMillisX,int durationMillisY){  if (android.os.Build.VERSION.SDK_INT < 11)   return;  ObjectAnimator animatorY=ObjectAnimator.ofFloat(this,"phaseY",0f,1f);  animatorY.setDuration(durationMillisY);  ObjectAnimator animatorX=ObjectAnimator.ofFloat(this,"phaseX",0f,1f);  animatorX.setDuration(durationMillisX);  if (durationMillisX > durationMillisY) {    animatorX.addUpdateListener(mListener);  } else {    animatorY.addUpdateListener(mListener);  }  animatorX.start();  animatorY.start();}  }
class C{  public Object requestToServer(InetAddress addr,int port,Object request,int timeout) throws IOException, ClassNotFoundException {  return requestToServer(addr,port,request,timeout,true);}  }
class C{  public static DeleteServiceSessionsForSubscriptionResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  DeleteServiceSessionsForSubscriptionResponse object=new DeleteServiceSessionsForSubscriptionResponse();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"deleteServiceSessionsForSubscriptionResponse".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (DeleteServiceSessionsForSubscriptionResponse)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public static Mask convertMask(Element maskedElement,GraphicsNode maskedNode,BridgeContext ctx){  Value v=getComputedStyle(maskedElement,SVGCSSEngine.MASK_INDEX);  int primitiveType=v.getPrimitiveType();switch (primitiveType) {case CSSPrimitiveValue.CSS_IDENT:    return null;case CSSPrimitiveValue.CSS_URI:  String uri=v.getStringValue();Element m=ctx.getReferencedElement(maskedElement,uri);Bridge bridge=ctx.getBridge(m);if (bridge == null || !(bridge instanceof MaskBridge)) {throw new BridgeException(ctx,maskedElement,ERR_CSS_URI_BAD_TARGET,new Object[]{uri});}return ((MaskBridge)bridge).createMask(ctx,m,maskedElement,maskedNode);default :throw new IllegalStateException("Unexpected primitive type:" + primitiveType);}}  }
class C{  @RequestMapping(value="/listen/project",method=RequestMethod.POST) public String listenProject(@RequestBody String body) throws IOException {  ObjectMapper mapper=new ObjectMapper();  JsonNode actualObj=mapper.readTree(body);  if (actualObj.has("event_name")) {    JsonNode nodeEventName=actualObj.get("event_name");    if (nodeEventName.get("event_name").toString().equals("project_create")) {      System.out.println("New project added !");      addWebhookById(nodeEventName.get("project_id").asInt());      System.out.println("Webhook of project " + nodeEventName.get("project_id").asInt() + " created.");    }  }  return "Listen project ok";}  }
class C{  public NullEngine(){  this(DEFAULT_BLOCK_SIZE);}  }
class C{  private void createNotification(final int messageResId,final int defaults){  final Intent parentIntent=new Intent(this,FeaturesActivity.class);  parentIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  final Intent targetIntent=new Intent(this,RSCActivity.class);  final Intent disconnect=new Intent(ACTION_DISCONNECT);  final PendingIntent disconnectAction=PendingIntent.getBroadcast(this,DISCONNECT_REQ,disconnect,PendingIntent.FLAG_UPDATE_CURRENT);  final PendingIntent pendingIntent=PendingIntent.getActivities(this,OPEN_ACTIVITY_REQ,new Intent[]{parentIntent,targetIntent},PendingIntent.FLAG_UPDATE_CURRENT);  final NotificationCompat.Builder builder=new NotificationCompat.Builder(this);  builder.setContentIntent(pendingIntent);  builder.setContentTitle(getString(R.string.app_name)).setContentText(getString(messageResId,getDeviceName()));  builder.setSmallIcon(R.drawable.ic_stat_notify_rsc);  builder.setShowWhen(defaults != 0).setDefaults(defaults).setAutoCancel(true).setOngoing(true);  builder.addAction(new NotificationCompat.Action(R.drawable.ic_action_bluetooth,getString(R.string.rsc_notification_action_disconnect),disconnectAction));  final Notification notification=builder.build();  final NotificationManager nm=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);  nm.notify(NOTIFICATION_ID,notification);}  }
class C{  private int parseKeyLen(final byte[] b,final int off) throws ParseException {  encryptedKeyLen_=PrimitivesParser.parseShort(b,off);  return Short.SIZE / Byte.SIZE;}  }
class C{  private Function<T,Object> fieldAccessorFor(EncoderTuple encoderTuple){  FieldAccessor fieldAccessor=FieldAccessor.create(encoderTuple.getName(),inputTypeInfo,config);  Encoder encoder=encoderTuple.getEncoder();  if (encoder instanceof ScalarEncoder) {    if (!Number.class.isAssignableFrom(fieldAccessor.getFieldType().getTypeClass()))     throw new IllegalArgumentException(String.format("the type of field [%s] is incompatible with the configured scalar encoder",encoderTuple.getName()));    if (Double.class == fieldAccessor.getFieldType().getTypeClass())     return null; else     return null;  } else {    return null;  }}  }
class C{  public SessionEvent(Object source,SessionNode parent,SessionNode child,int type){  super(source);  this.parent=parent;  this.child=child;switch (type) {case PARENT_ADDED:case PARENT_REMOVED:    this.type=type;  break;default :throw new IllegalArgumentException("Not the type of event that " + "requires two session nodes " + "as arguments.");}}  }
class C{  private void sendSubscribeMessage(String channel) throws WebSocketException {  MessageBuilder builder=new MessageBuilder(RequestBuilder.POST,null);  builder.header(MESSAGE_TYPE_HEADER_NAME,"subscribe-channel").data("{\"channel\":\"" + channel + "\"}");  Message message=builder.build();  send(message,null);}  }
class C{  private void placeSoupFor(final Player player){  final Item soup=SingletonRepository.getEntityManager().getItem("fish soup");  final IRPZone zone=SingletonRepository.getRPWorld().getZone("0_ados_city_n2");  soup.setPosition(64,15);  soup.setBoundTo(player.getName());  soup.put("amount",player.getBaseHP());  zone.add(soup);}  }
class C{  public boolean needSave(boolean rowChange,boolean onlyRealChange){  if (rowChange) {    return m_mTable.needSave(-2,onlyRealChange);  } else {    if (onlyRealChange)     return m_mTable.needSave(); else     return m_mTable.needSave(onlyRealChange);  }}  }
class C{  public static void print(long x){  out.print(x);  out.flush();}  }
class C{  static void i2bLittle(int[] in,int inOfs,byte[] out,int outOfs,int len){  if ((inOfs < 0) || ((in.length - inOfs) < len / 4) || (outOfs < 0)|| ((out.length - outOfs) < len)) {    throw new ArrayIndexOutOfBoundsException();  }  if (littleEndianUnaligned) {    outOfs+=byteArrayOfs;    len+=outOfs;    while (outOfs < len) {      unsafe.putInt(out,(long)outOfs,in[inOfs++]);      outOfs+=4;    }  } else   if (bigEndian && ((outOfs & 3) == 0)) {    outOfs+=byteArrayOfs;    len+=outOfs;    while (outOfs < len) {      unsafe.putInt(out,(long)outOfs,reverseBytes(in[inOfs++]));      outOfs+=4;    }  } else {    len+=outOfs;    while (outOfs < len) {      int i=in[inOfs++];      out[outOfs++]=(byte)(i);      out[outOfs++]=(byte)(i >> 8);      out[outOfs++]=(byte)(i >> 16);      out[outOfs++]=(byte)(i >> 24);    }  }}  }
class C{  public void addAmbiguity(String code,String[] ambiguousStates){  int n=ambiguousStateCount + stateCount;  int[] indices=new int[ambiguousStates.length];  int i=0;  for (  String stateCode : ambiguousStates) {    State state=stateMap.get(stateCode);    if (state == null) {      throw new IllegalArgumentException("DataType doesn't contain the state, " + stateCode);    }    indices[i]=state.number;    i++;  }  State state=new State(n,code,indices);  states.add(state);  ambiguousStateCount++;  stateMap.put(code,state);}  }
class C{  public Editor edit() throws IOException {  return DiskLruCache.this.edit(key,sequenceNumber);}  }
class C{  public BamReader(final InputStream input) throws IOException {  this(new BgzfInputStream(input),true);}  }
class C{  @Deprecated public boolean isAssignableFrom(Type from){  if (from == null) {    return false;  }  if (type.equals(from)) {    return true;  }  if (type instanceof Class<?>) {    return rawType.isAssignableFrom($Gson$Types.getRawType(from));  } else   if (type instanceof ParameterizedType) {    return isAssignableFrom(from,(ParameterizedType)type,new HashMap<String,Type>());  } else   if (type instanceof GenericArrayType) {    return rawType.isAssignableFrom($Gson$Types.getRawType(from)) && isAssignableFrom(from,(GenericArrayType)type);  } else {    throw buildUnexpectedTypeError(type,Class.class,ParameterizedType.class,GenericArrayType.class);  }}  }
class C{  public boolean initialize(){  if (mBluetoothManager == null) {    mBluetoothManager=(BluetoothManager)getSystemService(Context.BLUETOOTH_SERVICE);    if (mBluetoothManager == null) {      Log.e(TAG,"Unable to initialize BluetoothManager.");      return false;    }  }  mBluetoothAdapter=mBluetoothManager.getAdapter();  if (mBluetoothAdapter == null) {    Log.e(TAG,"Unable to obtain a BluetoothAdapter.");    return false;  }  return true;}  }
class C{  static void putTarget(int typeRef,TypePath typePath,ByteVector out){switch (typeRef >>> 24) {case 0x00:case 0x01:case 0x16:    out.putShort(typeRef >>> 16);  break;case 0x13:case 0x14:case 0x15:out.putByte(typeRef >>> 24);break;case 0x47:case 0x48:case 0x49:case 0x4A:case 0x4B:out.putInt(typeRef);break;default :out.put12(typeRef >>> 24,(typeRef & 0xFFFF00) >> 8);break;}if (typePath == null) {out.putByte(0);} else {int length=typePath.b[typePath.offset] * 2 + 1;out.putByteArray(typePath.b,typePath.offset,length);}}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:23.453 -0500",hash_original_method="F891E9E45688B24DB77EAA9DE670091B",hash_generated_method="DE82729ACB015F73FA05A44E77A4C535") public int size(){  if (mGarbage) {    gc();  }  return mSize;}  }
class C{  static MethodType makeImpl(Class<?> rtype,Class<?>[] ptypes,boolean trusted){  MethodType mt=internTable.get(new MethodType(ptypes,rtype));  if (mt != null)   return mt;  if (ptypes.length == 0) {    ptypes=NO_PTYPES;    trusted=true;  }  mt=new MethodType(rtype,ptypes,trusted);  mt.form=MethodTypeForm.findForm(mt);  return internTable.add(mt);}  }
class C{  private static HashMap<String,Object> _deepMerge(HashMap<String,Object> defs,HashMap<String,Object> conf){  HashMap<String,Object> d=new HashMap<>();  HashMap<String,Object> c=new HashMap<>();  for (  Map.Entry<String,Object> entry : defs.entrySet()) {    unpack(d,entry.getKey(),entry.getValue());  }  for (  Map.Entry<String,Object> entry : conf.entrySet()) {    unpack(c,entry.getKey(),entry.getValue());  }  for (  Map.Entry<String,Object> entryC : c.entrySet()) {    String kC=entryC.getKey();    Object vC=entryC.getValue();    if (d.containsKey(kC)) {      if (vC instanceof HashMap) {        if (vC instanceof HashMap) {          d.put(kC,_deepMerge((HashMap<String,Object>)d.get(kC),(HashMap<String,Object>)vC));        } else {          d.put(kC,vC);        }      } else {        d.put(kC,vC);      }    } else {      d.put(kC,vC);    }  }  return d;}  }
class C{  public void removeEventChargingFunctionAddress(String ecfAddress) throws ParseException {  if (ecfAddress == null)   throw new NullPointerException("JAIN-SIP Exception, " + "P-Charging-Function-Addresses, setEventChargingFunctionAddress(), the ecfAddress parameter is null.");  if (!this.delete(ecfAddress,ParameterNamesIms.ECF)) {    throw new java.text.ParseException("ECF Address Not Removed",0);  }}  }
class C{  public boolean checkIfAnyActive(URIQueryResultList uris,Class<? extends DataObject> type){  Iterator<URI> uriIterator=uris.iterator();  while (uriIterator.hasNext()) {    int added=0, found=0;    List<URI> urisToQuery=new ArrayList<URI>();    for (int i=0; (i < 100) && uriIterator.hasNext(); i++) {      urisToQuery.add(uriIterator.next());      added++;    }    List<? extends DataObject> results=_dbClient.queryObjectField(type,"inactive",urisToQuery);    for (    DataObject obj : results) {      found++;      if (!obj.getInactive()) {        return true;      }    }    if (found != added) {      return true;    }  }  return false;}  }
class C{  void untrackProcesses(String instanceId){  dockerMachines.remove(instanceId);}  }
class C{  @Path(TriggerCommonParams.PATH_DEFINITIONS) public Definition redirectToTrigger(){  return new Definition();}  }
class C{  public void init(){  setInit(true);}  }
class C{  public TFloatObjectHashMap(int initialCapacity){  super(initialCapacity);  _hashingStrategy=this;}  }
class C{  private JPanel initSettingPanel(){  GridBagConstraints constraint=new GridBagConstraints();  JPanel outer=new JPanel(new GridBagLayout());  JPanel panel=new JPanel();  panel.setLayout(new BoxLayout(panel,BoxLayout.Y_AXIS));  panel.setBorder(IdeBorderFactory.createTitledBorder("Settings",true));  Container innerPanel=Box.createHorizontalBox();  innerPanel.add(fullyQualifiedName);  innerPanel.add(Box.createHorizontalGlue());  panel.add(innerPanel);  innerPanel=Box.createHorizontalBox();  innerPanel.add(enableMethods);  innerPanel.add(Box.createHorizontalGlue());  panel.add(innerPanel);  innerPanel=Box.createHorizontalBox();  innerPanel.add(moveCaretToMethod);  innerPanel.add(Box.createHorizontalGlue());  panel.add(innerPanel);  innerPanel=Box.createHorizontalBox();  innerPanel.add(sortElements);  sortElements.addActionListener(new OnSortElements());  innerPanel.add(Box.createHorizontalStrut(3));  innerPanel.add(sortElementsComboBox);  panel.add(innerPanel);  sortElementsComboBox.addItem("Ascending");  sortElementsComboBox.addItem("Descending");  constraint.gridwidth=GridBagConstraints.REMAINDER;  constraint.fill=GridBagConstraints.BOTH;  constraint.gridx=0;  constraint.gridy=0;  constraint.insets.left=5;  constraint.insets.right=5;  outer.add(panel,constraint);  DuplicationPolicy[] options=PolicyOptions.getConflictOptions();  initialValueForReplaceDialog=new JRadioButton[options.length];  ButtonGroup selection=new ButtonGroup();  for (int i=0; i < options.length; i++) {    initialValueForReplaceDialog[i]=new JRadioButton(new ConflictResolutionOptionAction(options[i]));    selection.add(initialValueForReplaceDialog[i]);  }  panel=new JPanel();  panel.setLayout(new BoxLayout(panel,BoxLayout.Y_AXIS));  panel.setBorder(IdeBorderFactory.createTitledBorder("When method already exists",true));  for (  JRadioButton anInitialValueForReplaceDialog : initialValueForReplaceDialog) {    panel.add(anInitialValueForReplaceDialog);  }  constraint.gridx=0;  constraint.gridy=1;  outer.add(panel,constraint);  InsertWhere[] options2=PolicyOptions.getNewMethodOptions();  initialValueForNewMethodDialog=new JRadioButton[options2.length];  ButtonGroup selection2=new ButtonGroup();  for (int i=0; i < options2.length; i++) {    initialValueForNewMethodDialog[i]=new JRadioButton(new InsertNewMethodOptionAction(options2[i]));    selection2.add(initialValueForNewMethodDialog[i]);  }  panel=new JPanel();  panel.setLayout(new BoxLayout(panel,BoxLayout.Y_AXIS));  panel.setBorder(IdeBorderFactory.createTitledBorder("Where to insert?",true));  for (  JRadioButton anInitialValueForNewMethodDialog : initialValueForNewMethodDialog) {    panel.add(anInitialValueForNewMethodDialog);  }  constraint.gridx=0;  constraint.gridy=2;  outer.add(panel,constraint);  panel=new JPanel();  panel.setLayout(new BoxLayout(panel,BoxLayout.Y_AXIS));  panel.setBorder(IdeBorderFactory.createTitledBorder("Exclude",true));  innerPanel=Box.createHorizontalBox();  innerPanel.add(filterConstant);  innerPanel.add(Box.createHorizontalGlue());  panel.add(innerPanel);  innerPanel=Box.createHorizontalBox();  innerPanel.add(filterStatic);  innerPanel.add(Box.createHorizontalGlue());  panel.add(innerPanel);  innerPanel=Box.createHorizontalBox();  innerPanel.add(filterTransient);  innerPanel.add(Box.createHorizontalGlue());  panel.add(innerPanel);  innerPanel=Box.createHorizontalBox();  innerPanel.add(filterEnum);  innerPanel.add(Box.createHorizontalGlue());  panel.add(innerPanel);  innerPanel=Box.createHorizontalBox();  innerPanel.add(filterLoggers);  innerPanel.add(Box.createHorizontalGlue());  panel.add(innerPanel);  innerPanel=Box.createHorizontalBox();  innerPanel.add(new JLabel("Exclude fields by name (reg exp)"));  innerPanel.add(Box.createHorizontalStrut(3));  innerPanel.add(filterFieldName);  filterFieldName.setMinimumSize(JBUI.size(100,20));  panel.add(innerPanel);  innerPanel=Box.createHorizontalBox();  innerPanel.add(new JLabel("Exclude fields by type name (reg exp)"));  innerPanel.add(Box.createHorizontalStrut(3));  innerPanel.add(filterFieldType);  filterFieldType.setMinimumSize(JBUI.size(100,20));  panel.add(innerPanel);  innerPanel=Box.createHorizontalBox();  innerPanel.add(new JLabel("Exclude methods by name (reg exp)"));  innerPanel.add(Box.createHorizontalStrut(3));  innerPanel.add(filterMethodName);  filterMethodName.setMinimumSize(JBUI.size(100,20));  panel.add(innerPanel);  innerPanel=Box.createHorizontalBox();  innerPanel.add(new JLabel("Exclude methods by return type name (reg exp)"));  innerPanel.add(Box.createHorizontalStrut(3));  innerPanel.add(filterMethodType);  filterMethodType.setMinimumSize(JBUI.size(100,20));  panel.add(innerPanel);  constraint.gridx=0;  constraint.gridy=3;  outer.add(panel,constraint);  return outer;}  }
class C{  public ServiceManagementRecord(PrincipalUser creator,Service service,boolean enabled){  super(creator);  setService(service);  setEnabled(enabled);}  }
class C{  public void takePicture(PictureTransaction xact){  if (session != null) {    engine.takePicture(session,xact);  }}  }
class C{  public void removeRepositoryInterceptor(RepositoryInterceptor interceptor){  interceptors.remove(interceptor);  activated=!interceptors.isEmpty();}  }
class C{  public static double length(double x,double y,double z){  return Math.sqrt(length2(x,y,z));}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  public BloomFilter(int elements,double falsePositiveRate,long randomNonce){  this(elements,falsePositiveRate,randomNonce,BloomUpdate.UPDATE_P2PUBKEY_ONLY);}  }
class C{  public int remove(final int key){  final int valPos=pointer - key;  final int result=stack[valPos];  final int[] newStack=new int[stack.length];  System.arraycopy(stack,0,newStack,0,valPos);  System.arraycopy(stack,valPos + 1,newStack,valPos,(stack.length - valPos) - 1);  stack=newStack;  pointer--;  return result;}  }
class C{  public static short[] objectAsShortArray(Object object){  if (VM.VerifyAssertions && VM.runningVM) {    VM._assert(VM.NOT_REACHED);  }  return (short[])object;}  }
class C{  public static void validateExpressions(Mark where,String expressions,FunctionMapper functionMapper,ErrorDispatcher err) throws JasperException {  try {    ELContextImpl elContext=new ELContextImpl(null);    elContext.setFunctionMapper(functionMapper);    getExpressionFactory().createValueExpression(elContext,expressions,Object.class);  } catch (  ELException e) {    err.jspError(where,"jsp.error.invalid.expression",expressions,e.toString());  }}  }
class C{  @Deprecated public Note createNote(Note note,LinkedNotebook linkedNotebook) throws EDAMUserException, EDAMSystemException, TException, EDAMNotFoundException {  SharedNotebook sharedNotebook=getAsyncClient().getClient().getSharedNotebookByAuth(getAuthenticationToken());  note.setNotebookGuid(sharedNotebook.getNotebookGuid());  return getAsyncClient().getClient().createNote(getAuthenticationToken(),note);}  }
class C{  public static <T>boolean replaceAll(List<T> list,T oldVal,T newVal){  boolean result=false;  int size=list.size();  if (size < REPLACEALL_THRESHOLD || list instanceof RandomAccess) {    if (oldVal == null) {      for (int i=0; i < size; i++) {        if (list.get(i) == null) {          list.set(i,newVal);          result=true;        }      }    } else {      for (int i=0; i < size; i++) {        if (oldVal.equals(list.get(i))) {          list.set(i,newVal);          result=true;        }      }    }  } else {    ListIterator<T> itr=list.listIterator();    if (oldVal == null) {      for (int i=0; i < size; i++) {        if (itr.next() == null) {          itr.set(newVal);          result=true;        }      }    } else {      for (int i=0; i < size; i++) {        if (oldVal.equals(itr.next())) {          itr.set(newVal);          result=true;        }      }    }  }  return result;}  }
class C{  private static void SetStaticLongField(JNIEnvironment env,int classJREF,int fieldID,long fieldValue){  if (traceJNI)   VM.sysWrite("JNI called: SetStaticLongField  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    RVMField field=MemberReference.getFieldRef(fieldID).resolve();    field.setLongValueUnchecked(null,fieldValue);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);  }}  }
class C{  public void removeChildClassLoader(AddOnClassLoader child){  childClassLoaders.remove(child);}  }
class C{  public TerminalPosition withRelative(TerminalPosition translate){  return withRelative(translate.getColumn(),translate.getRow());}  }
class C{  public DrawingDecorator(DrawingCanvas inner){  this.inner=inner;}  }
class C{  public DataSource(){  super(ResourceType.DATASOURCE,"unknown");}  }
class C{  public MediaFile(){  this.path="";  this.filename="";}  }
class C{  private void copyMetricsLibsIntoClasspath(String kafkaSandboxPath) throws Exception {  String sandboxPath=overriderEnvironment.getMesosSandbox();  if (StringUtils.isBlank(sandboxPath)) {    throw new IllegalStateException("Missing 'MESOS_SANDBOX' env");  }  File mesosSandboxDir=new File(sandboxPath);  if (!mesosSandboxDir.isDirectory()) {    throw new IllegalStateException("'MESOS_SANDBOX' is not a directory: " + sandboxPath);  }  File libSrcDir=new File(new File(sandboxPath,"overrider"),"metrics-libs");  if (!libSrcDir.isDirectory()) {    throw new IllegalStateException("Library source path is not a directory: " + libSrcDir.getAbsolutePath());  }  List<File> srcFiles=new ArrayList<>();  for (  File file : libSrcDir.listFiles()) {    if (file.isFile() && file.getName().endsWith(".jar")) {      srcFiles.add(file);    }  }  if (srcFiles.isEmpty()) {    throw new IllegalStateException("Didn't find any jar files to be copied from directory: " + libSrcDir.getAbsolutePath());  }  File kafkaLibsDir=new File(kafkaSandboxPath,"libs");  if (!kafkaLibsDir.isDirectory()) {    throw new IllegalStateException("Library destination path is not a directory: " + kafkaLibsDir.getAbsolutePath());  }  log.info("Copying " + String.valueOf(srcFiles.size()) + " files to Kafka libs directory: "+ kafkaLibsDir.getAbsolutePath());  for (  File srcFile : srcFiles) {    log.info("Copying " + srcFile.getName());    FileUtils.copyFile(srcFile,new File(kafkaLibsDir,srcFile.getName()));  }}  }
class C{  public void writeAdjacencyAsNetworkToFile(List<Cluster> clusters,String pajekFilename,String rNetworkFilename,String rNodeFilename){  log.info("Writing order adjacency as Pajek and R network files.");  double minX=Double.POSITIVE_INFINITY;  double minY=Double.POSITIVE_INFINITY;  double maxX=Double.NEGATIVE_INFINITY;  double maxY=Double.NEGATIVE_INFINITY;  for (  Cluster cluster : clusters) {    minX=Math.min(minX,cluster.getCenterOfGravity().getX());    minY=Math.min(minY,cluster.getCenterOfGravity().getY());    maxX=Math.max(maxX,cluster.getCenterOfGravity().getX());    maxY=Math.max(maxY,cluster.getCenterOfGravity().getY());  }  log.info("   Pajek coordinate envelope:");  log.info(String.format("      Min x: %1.5f",minX));  log.info(String.format("      Min y: %1.5f",minY));  log.info(String.format("      Max x: %1.5f",maxX));  log.info(String.format("      Max y: %1.5f",maxY));  try {    BufferedWriter outputPajek=new BufferedWriter(new FileWriter(new File(pajekFilename)));    BufferedWriter outputRNetwork=new BufferedWriter(new FileWriter(new File(rNetworkFilename)));    BufferedWriter outputRNode=new BufferedWriter(new FileWriter(new File(rNodeFilename)));    try {      outputPajek.write("*Vertices ");      outputPajek.write(String.valueOf(orderAdjacency.rows()));      outputPajek.newLine();      for (      Cluster c : clusters) {        outputPajek.write(String.valueOf(Integer.parseInt(c.getClusterId()) + 1));        outputPajek.write(String.format(" \"%s\" ",String.valueOf(Integer.parseInt(c.getClusterId()) + 1)));        outputPajek.write(String.format("%1.5f  ",(c.getCenterOfGravity().getX() - minX) / (maxX - minX)));        outputPajek.write(String.format("%1.5f",(c.getCenterOfGravity().getY() - minY) / (maxY - minY)));        outputPajek.newLine();        outputRNode.write(String.valueOf(Integer.parseInt(c.getClusterId()) + 1));        outputRNode.write(",");        outputRNode.write(String.valueOf(c.getCenterOfGravity().getX()));        outputRNode.write(",");        outputRNode.write(String.valueOf(c.getCenterOfGravity().getY()));        outputRNode.newLine();      }      outputPajek.write("*Arcs");      outputPajek.newLine();      int rowMultiplier=0;      for (int r=0; r < orderAdjacency.rows(); r++) {        for (int c=0; c < orderAdjacency.columns(); c++) {          if (orderAdjacency.getQuick(r,c) > 0) {            outputPajek.write(String.valueOf(r + 1));            outputPajek.write(" ");            outputPajek.write(String.valueOf(c + 1));            outputPajek.write(" ");            outputPajek.write(String.valueOf((int)orderAdjacency.getQuick(r,c)));            outputPajek.newLine();            outputRNetwork.write(String.valueOf(r + 1));            outputRNetwork.write(",");            outputRNetwork.write(String.valueOf(c + 1));            outputRNetwork.write(",");            outputRNetwork.write(String.valueOf((int)orderAdjacency.getQuick(r,c)));            outputRNetwork.newLine();          }        }        if (rowMultiplier == r + 1) {          log.info("   Rows processed: " + (r + 1));          rowMultiplier*=2;        }      }      log.info("   Rows processed: " + orderAdjacency.rows() + " (Done)");    }  finally {      outputPajek.close();      outputRNetwork.close();      outputRNode.close();    }  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public void java_util_TimeZone_getSystemTimeZoneID(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getStringObject());}  }
class C{  public static RegressionDataSet loadR(InputStreamReader isr,double sparseRatio) throws IOException {  return loadR(isr,sparseRatio,-1);}  }
class C{  @Provides @Config("braintreeMerchantId") public static String provideBraintreeMerchantId(RegistryEnvironment environment){switch (environment) {case PRODUCTION:    return "6gm2mm48k9ty4zmx";default :  return "vqgn8khkq2cs6y9s";}}  }
class C{  @SuppressWarnings("unchecked") @Override public void handle(ResourceNode node){  processCount.decrementAndGet();  if (node != null) {    if (node.getObject() instanceof Buffer) {      try {        node.setObject(new JsonObject(((Buffer)node.getObject()).toString("UTF-8")));      } catch (      Exception e) {        log.error("Error in result of sub resource '" + node.getNodeName() + "' Message: "+ e.getMessage());        node.setObject(new ResourceCollectionException(e.getMessage()));      }    }    if (node.getObject() instanceof JsonObject || node.getObject() instanceof JsonArray) {      if (log.isTraceEnabled()) {        log.trace("handle collection '" + collectionName + "' for node '"+ node.getNodeName()+ "'.");      }      nodeMap.put(node.getNodeName(),node);    } else     if (node.getObject() instanceof ResourceCollectionException) {      if (node.getNodeName().equals(ExpansionHandler.SERIOUS_EXCEPTION)) {        if (log.isTraceEnabled()) {          log.trace("(serious error) handle collection '" + collectionName + "'.");        }        if (seriousError == null) {          seriousError=node;        }      } else {        if (log.isTraceEnabled()) {          log.trace("(no serious error) handle collection '" + collectionName + "'.");        }        resourceCollectionExceptionMap.put(node.getNodeName(),(ResourceCollectionException)node.getObject());      }    } else     if (node.getObject() instanceof Map<?,?>) {      resourceCollectionExceptionMap.putAll((Map<String,ResourceCollectionException>)node.getObject());    } else {      if (log.isTraceEnabled()) {        log.trace("No match found for handling node. This should not happen!");      }    }  }  if (processCount.get() == PROCESS_DONE) {    if (log.isTraceEnabled()) {      log.trace("finishing process");      log.trace(" -> serious error:    " + (seriousError != null));      log.trace(" -> resource errors:  " + (!resourceCollectionExceptionMap.isEmpty()));    }    if (seriousError != null) {      parentHandler.handle(seriousError);    } else     if (!resourceCollectionExceptionMap.isEmpty()) {      parentHandler.handle(new ResourceNode(collectionName,resourceCollectionExceptionMap));    } else {      StringBuilder eTags=new StringBuilder();      eTags.append(collectioneTag);      JsonObject nodes=new JsonObject();      for (      String key : nodeMap.keySet()) {        ResourceNode orderedNode=nodeMap.get(key);        eTags.append(orderedNode.geteTag());        nodes.put(key,orderedNode.getObject());      }      parentHandler.storeXDeltaResponseHeader("" + xDeltaResponseNumber.get());      parentHandler.handle(new ResourceNode(collectionName,nodes,eTags.toString()));    }  }}  }
class C{  public void removeAll(){  leftComponent=rightComponent=null;  super.removeAll();  revalidate();  repaint();}  }
class C{  protected String readWord(Reader r) throws IOException {  StringBuffer buf=new StringBuffer();  char c=skipAllWhitespace(r);  while (c != (char)-1 && !Character.isWhitespace(c)) {    buf.append(c);    c=(char)r.read();  }  if (c == (char)-1) {    setDone(true);  }  return buf.toString();}  }
class C{  public static <T1,T2,T3,T4,R>Function<T4,R> partial4(final T1 t1,final T2 t2,final T3 t3,final QuadFunction<T1,T2,T3,T4,R> quadFunc){  return null;}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public void buildClassifier(Instances instances) throws Exception {  getCapabilities().testWithFail(instances);  instances=new Instances(instances);  instances.deleteWithMissingClass();  m_NumClasses=instances.numClasses();  m_ClassType=instances.classAttribute().type();  m_Train=new Instances(instances,0,instances.numInstances());  if ((m_WindowSize > 0) && (instances.numInstances() > m_WindowSize)) {    m_Train=new Instances(m_Train,m_Train.numInstances() - m_WindowSize,m_WindowSize);  }  m_NumAttributesUsed=0.0;  for (int i=0; i < m_Train.numAttributes(); i++) {    if ((i != m_Train.classIndex()) && (m_Train.attribute(i).isNominal() || m_Train.attribute(i).isNumeric())) {      m_NumAttributesUsed+=1.0;    }  }  m_NNSearch.setInstances(m_Train);  m_kNNValid=false;  m_defaultModel=new ZeroR();  m_defaultModel.buildClassifier(instances);}  }
class C{  public VirtualPoolCapabilityValuesWrapper(VirtualPoolCapabilityValuesWrapper capabilities){  if (capabilities.contains(AUTO_TIER__POLICY_NAME)) {    _vpoolCapabilities.put(AUTO_TIER__POLICY_NAME,capabilities.getAutoTierPolicyName());  }  if (capabilities.contains(RAID_LEVEL)) {    _vpoolCapabilities.put(RAID_LEVEL,capabilities.getRaidLevel());  }  if (capabilities.contains(SYSTEM_TYPE)) {    _vpoolCapabilities.put(SYSTEM_TYPE,capabilities.getDeviceType());  }  if (capabilities.contains(VARRAYS)) {    _vpoolCapabilities.put(VARRAYS,capabilities.getVirtualArrays());  }  if (capabilities.contains(PROTOCOLS)) {    _vpoolCapabilities.put(PROTOCOLS,capabilities.getProtocols());  }  if (capabilities.contains(SIZE)) {    _vpoolCapabilities.put(SIZE,capabilities.getSize());  }  if (capabilities.contains(THIN_VOLUME_PRE_ALLOCATE_SIZE)) {    _vpoolCapabilities.put(THIN_VOLUME_PRE_ALLOCATE_SIZE,capabilities.getThinVolumePreAllocateSize());  }  if (capabilities.contains(RESOURCE_COUNT)) {    _vpoolCapabilities.put(RESOURCE_COUNT,capabilities.getResourceCount());  }  if (capabilities.contains(THIN_PROVISIONING)) {    _vpoolCapabilities.put(THIN_PROVISIONING,capabilities.getThinProvisioning());  }  if (capabilities.contains(BLOCK_CONSISTENCY_GROUP)) {    _vpoolCapabilities.put(BLOCK_CONSISTENCY_GROUP,capabilities.getBlockConsistencyGroup());  }  if (capabilities.contains(SRDF_SOURCE)) {    _vpoolCapabilities.put(SRDF_SOURCE,capabilities.getSrdfSource());  }  if (capabilities.contains(SRDF_TARGET)) {    _vpoolCapabilities.put(SRDF_TARGET,capabilities.getSrdfTarget());  }  if (capabilities.contains(PERSONALITY)) {    _vpoolCapabilities.put(PERSONALITY,capabilities.getPersonality());  }  if (capabilities.contains(RP_RPO_VALUE)) {    _vpoolCapabilities.put(RP_RPO_VALUE,capabilities.getRpRpoValue());  }  if (capabilities.contains(RP_RPO_TYPE)) {    _vpoolCapabilities.put(RP_RPO_TYPE,capabilities.getRpRpoType());  }  if (capabilities.contains(RP_COPY_MODE)) {    _vpoolCapabilities.put(RP_COPY_MODE,capabilities.getRpCopyMode());  }  if (capabilities.contains(ADD_JOURNAL_CAPACITY)) {    _vpoolCapabilities.put(ADD_JOURNAL_CAPACITY,capabilities.getAddJournalCapacity());  }  if (capabilities.contains(RP_COPY_TYPE)) {    _vpoolCapabilities.put(RP_COPY_TYPE,capabilities.getRPCopyType());  }  if (capabilities.contains(RP_MAX_SNAPS)) {    _vpoolCapabilities.put(RP_MAX_SNAPS,capabilities.getRPMaxSnaps());  }  if (capabilities.contains(IS_META_VOLUME)) {    _vpoolCapabilities.put(IS_META_VOLUME,capabilities.getIsMetaVolume());  }  if (capabilities.contains(META_VOLUME_MEMBER_SIZE)) {    _vpoolCapabilities.put(META_VOLUME_MEMBER_SIZE,capabilities.getMetaVolumeMemberSize());  }  if (capabilities.contains(META_VOLUME_MEMBER_COUNT)) {    _vpoolCapabilities.put(META_VOLUME_MEMBER_COUNT,capabilities.getMetaVolumeMemberCount());  }  if (capabilities.contains(META_VOLUME_TYPE)) {    _vpoolCapabilities.put(META_VOLUME_TYPE,capabilities.getMetaVolumeType());  }  if (capabilities.contains(SUPPORT_SOFT_LIMIT)) {    _vpoolCapabilities.put(SUPPORT_SOFT_LIMIT,capabilities.getSupportsSoftLimit());  }  if (capabilities.contains(SUPPORT_NOTIFICATION_LIMIT)) {    _vpoolCapabilities.put(SUPPORT_NOTIFICATION_LIMIT,capabilities.getSupportsNotificationLimit());  }  if (capabilities.contains(QUOTA)) {    _vpoolCapabilities.put(QUOTA,capabilities.getQuota());  }  if (capabilities.contains(DEDUP)) {    _vpoolCapabilities.put(DEDUP,capabilities.getDedupCapable());  }  if (capabilities.contains(FILE_REPLICATION_RPO_TYPE)) {    _vpoolCapabilities.put(FILE_REPLICATION_RPO_TYPE,capabilities.getRpRpoType());  }  if (capabilities.contains(FILE_REPLICATION_RPO_TYPE)) {    _vpoolCapabilities.put(FILE_REPLICATION_RPO_TYPE,capabilities.getRpCopyMode());  }  if (capabilities.contains(FILE_REPLICATION_COPY_MODE)) {    _vpoolCapabilities.put(FILE_REPLICATION_COPY_MODE,capabilities.getRpCopyMode());  }  if (capabilities.contains(COMPUTE)) {    _vpoolCapabilities.put(COMPUTE,capabilities.getCompute());  }  if (capabilities.contains(ARRAY_AFFINITY)) {    _vpoolCapabilities.put(ARRAY_AFFINITY,capabilities.getArrayAffinity());  }  if (capabilities.contains(CHANGE_VPOOL_VOLUME)) {    _vpoolCapabilities.put(CHANGE_VPOOL_VOLUME,capabilities.getChangeVpoolVolume());  }}  }
class C{  public static ElementList createElementList(Model model,Iterator<Element> elements){  if (elements.hasNext()) {    return model.createList(elements).as(ElementList.class);  } else {    return RDF.nil.inModel(model).as(ElementList.class);  }}  }
class C{  @VisibleForTesting public void testSetScrollOffset(int offset){  mScrollOffset=offset;}  }
class C{  private void recordExchangeAttemptTime(Peer peer,Date exchangeTime){  BluetoothDevice device=peer.getNetwork().getBluetoothDevice();  if (device == null) {    Log.e(TAG,"Recording exchange attempt time of non-bluetooth peer! Can't do it.");    return;  } else {    Date nextAttempt=new Date(exchangeTime.getDate() + (random.nextInt() % MS_BETWEEN_EXCHANGE_ATTEMPTS));    exchangeAttemptTimes.put(device.getAddress(),nextAttempt);    Log.w(TAG,"Will attempt another exchange with peer " + peer + " no sooner than "+ nextAttempt);  }}  }
class C{  protected String engineGetURI(){  return implementedTransformURI;}  }
class C{  public synchronized void startPreview(){  Camera theCamera=camera;  if (theCamera != null && !previewing) {    theCamera.startPreview();    previewing=true;    autoFocusManager=new AutoFocusManager(camera);  }}  }
class C{  @Override public void onConnectionFailed(ConnectionResult connectionResult){  Log.e(TAG,"onConnectionFailed: ConnectionResult.getErrorCode() = " + connectionResult.getErrorCode());  Toast.makeText(this,"Could not connect to Google API Client: Error " + connectionResult.getErrorCode(),Toast.LENGTH_SHORT).show();}  }
class C{  public XYValueSeries(String title){  super(title);}  }
class C{  private void modifyStorageViewTargets(VPlexStorageViewInfo storageViewInfo,List<VPlexTargetInfo> targetInfoList,boolean remove){  ClientResponse response=null;  try {    URI requestURI=(remove ? _vplexApiClient.getBaseURI().resolve(VPlexApiConstants.URI_STORAGE_VIEW_REMOVE_TARGETS) : _vplexApiClient.getBaseURI().resolve(VPlexApiConstants.URI_STORAGE_VIEW_ADD_TARGETS));    StringBuilder targetPathBuilder=new StringBuilder();    for (    VPlexTargetInfo targetInfo : targetInfoList) {      if (targetPathBuilder.length() != 0) {        targetPathBuilder.append(",");      }      targetPathBuilder.append(targetInfo.getPath());    }    s_logger.info("modifyStorageViewTargets URI is {}",requestURI.toString());    Map<String,String> argsMap=new HashMap<String,String>();    argsMap.put(VPlexApiConstants.ARG_DASH_V,storageViewInfo.getPath());    argsMap.put(VPlexApiConstants.ARG_DASH_P,targetPathBuilder.toString());    JSONObject postDataObject=VPlexApiUtils.createPostData(argsMap,false);    s_logger.info("Modify Storage View Targets POST data is {}",postDataObject.toString());    response=_vplexApiClient.post(requestURI,postDataObject.toString());    String responseStr=response.getEntity(String.class);    s_logger.info("Modify storage view response is {}",responseStr);    if (response.getStatus() != VPlexApiConstants.SUCCESS_STATUS) {      if (response.getStatus() == VPlexApiConstants.ASYNC_STATUS) {        s_logger.info("Modify Storage View Targets completing asynchronously");        _vplexApiClient.waitForCompletion(response);      } else {        String cause=VPlexApiUtils.getCauseOfFailureFromResponse(responseStr);        throw VPlexApiException.exceptions.modifyViewTargetsFailureStatus(storageViewInfo.getName(),String.valueOf(response.getStatus()),cause);      }    }    if (remove) {      s_logger.info("Removed targets from storage view {}",storageViewInfo.getName());    } else {      s_logger.info("Added targets to storage view {}",storageViewInfo.getName());    }  } catch (  VPlexApiException vae) {    throw vae;  }catch (  Exception e) {    throw VPlexApiException.exceptions.failedModifyViewTargets(storageViewInfo.getName(),e);  } finally {    if (response != null) {      response.close();    }  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  protected StoragePool checkStoragePoolExistsInDB(String nativeGuid,DbClient _dbClient) throws IOException {  StoragePool pool=null;  List<StoragePool> poolInDB=CustomQueryUtility.getActiveStoragePoolByNativeGuid(_dbClient,nativeGuid);  if (poolInDB != null && !poolInDB.isEmpty()) {    pool=poolInDB.get(0);  }  return pool;}  }
class C{  private RamUsageEstimator(){}  }
class C{  @Override public DummyProjectBuilder withUrl(String url){  return this;}  }
class C{  private void updateButtons(){  final GameOptions gOpts=clientgui.getClient().getGame().getOptions();  final Entity ce=ce();  boolean isMech=(ce instanceof Mech);  boolean isInfantry=(ce instanceof Infantry);  boolean isAero=(ce instanceof Aero);  if (numButtonGroups > 1)   getBtn(MoveCommand.MOVE_MORE).setEnabled(true);  setWalkEnabled(!ce.isImmobile() && ((ce.getWalkMP() > 0) || (ce.getRunMP() > 0)) && !ce.isStuck());  setJumpEnabled(!isAero && !ce.isImmobile() && (ce.getJumpMP() > 0)&& !(ce.isStuck() && !ce.canUnstickByJumping()));  setSwimEnabled(!isAero && !ce.isImmobile() && ce.hasUMU()&& ce.isUnderwater());  setBackUpEnabled(!isAero && isEnabled(MoveCommand.MOVE_WALK));  setChargeEnabled(ce.canCharge());  setDFAEnabled(ce.canDFA());  setRamEnabled(ce.canRam());  if (isInfantry) {    if (clientgui.getClient().getGame().containsMinefield(ce.getPosition())) {      setClearEnabled(true);    } else {      setClearEnabled(false);    }  } else {    setClearEnabled(false);  }  if ((ce.getMovementMode() == EntityMovementMode.HYDROFOIL) || (ce.getMovementMode() == EntityMovementMode.NAVAL) || (ce.getMovementMode() == EntityMovementMode.SUBMARINE)|| (ce.getMovementMode() == EntityMovementMode.INF_UMU)|| (ce.getMovementMode() == EntityMovementMode.VTOL)|| (ce.getMovementMode() == EntityMovementMode.WIGE)|| (ce.getMovementMode() == EntityMovementMode.BIPED_SWIM)|| (ce.getMovementMode() == EntityMovementMode.QUAD_SWIM)) {    getBtn(MoveCommand.MOVE_CLIMB_MODE).setEnabled(false);  } else {    getBtn(MoveCommand.MOVE_CLIMB_MODE).setEnabled(true);  }  updateTurnButton();  updateProneButtons();  updateRACButton();  updateSearchlightButton();  updateLoadButtons();  updateElevationButtons();  updateTakeOffButtons();  updateLandButtons();  updateJoinButton();  updateRecoveryButton();  updateDumpButton();  updateEvadeButton();  updateStartupButton();  updateShutdownButton();  if (ce instanceof Aero) {    getBtn(MoveCommand.MOVE_THRUST).setEnabled(true);    getBtn(MoveCommand.MOVE_YAW).setEnabled(true);    getBtn(MoveCommand.MOVE_END_OVER).setEnabled(true);    getBtn(MoveCommand.MOVE_TURN_LEFT).setEnabled(true);    getBtn(MoveCommand.MOVE_TURN_RIGHT).setEnabled(true);    setEvadeAeroEnabled(true);    setEjectEnabled(true);    if ((((Aero)ce).isSpheroid() || clientgui.getClient().getGame().getPlanetaryConditions().isVacuum()) && !clientgui.getClient().getGame().getBoard().inSpace()) {      setTurnEnabled(false);    }  }  updateSpeedButtons();  updateThrustButton();  updateRollButton();  checkFuel();  checkOOC();  checkAtmosphere();  updateFlyOffButton();  updateLaunchButton();  updateDropButton();  updateRecklessButton();  updateHoverButton();  updateManeuverButton();  if (isInfantry && ce.hasWorkingMisc(MiscType.F_TOOLS,MiscType.S_VIBROSHOVEL)) {    getBtn(MoveCommand.MOVE_FORTIFY).setEnabled(true);  } else {    getBtn(MoveCommand.MOVE_FORTIFY).setEnabled(false);  }  if (isInfantry && gOpts.booleanOption("tacops_dig_in")) {    int dugInState=((Infantry)ce).getDugIn();    getBtn(MoveCommand.MOVE_DIG_IN).setEnabled(dugInState == Infantry.DUG_IN_NONE);  } else {    getBtn(MoveCommand.MOVE_DIG_IN).setEnabled(false);  }  updateTakeCoverButton();  if (isInfantry && ce.getCrew().getOptions().booleanOption("urban_guerrilla") && ((Infantry)ce).getCanCallSupport()) {    getBtn(MoveCommand.MOVE_CALL_SUPPORT).setEnabled(true);  } else {    getBtn(MoveCommand.MOVE_CALL_SUPPORT).setEnabled(false);  }  getBtn(MoveCommand.MOVE_SHAKE_OFF).setEnabled((ce instanceof Tank) && (ce.getSwarmAttackerId() != Entity.NONE));  setLayMineEnabled(ce.canLayMine());  setFleeEnabled(ce.canFlee());  if (gOpts.booleanOption(OptionsConstants.AGM_VEHICLES_CAN_EJECT) && (ce instanceof Tank)) {    Coords pos=ce().getPosition();    Infantry inf=new Infantry();    inf.setGame(clientgui.getClient().getGame());    boolean hasLegalHex=!inf.isLocationProhibited(pos);    for (int i=0; i < 6; i++) {      hasLegalHex|=!inf.isLocationProhibited(pos.translated(i));    }    setEjectEnabled(hasLegalHex);  } else {    setEjectEnabled(((isMech && (((Mech)ce).getCockpitType() != Mech.COCKPIT_TORSO_MOUNTED)) || isAero) && ce.isActive() && !ce.hasQuirk(OptionsConstants.QUIRK_NEG_NO_EJECT));  }  if (ce.isDropping()) {    disableButtons();    butDone.setEnabled(true);  }  if (ce.hasUnloadedUnitsFromBays()) {    disableButtons();    updateLoadButtons();  }  setupButtonPanel();}  }
class C{  public void skipBits(int n){  byteOffset+=(n / 8);  bitOffset+=(n % 8);  if (bitOffset > 7) {    byteOffset++;    bitOffset-=8;  }  assertValidOffset();}  }
class C{  public void testDeployWhenWarWithCustomContext() throws Exception {  WAR war=new WAR("ram:///some/warfile.war");  this.fsManager.resolveFile("ram:///some/warfile.war").createFile();  war.setContext("context");  AbstractCopyingInstalledLocalDeployer deployer=new TestableCopyingDeployer(createContainer(createContainerCapability(DeployableType.WAR),null));  assertFalse(this.fsManager.resolveFile("ram:///webapps/context.war").exists());  deployer.deploy(war);  assertTrue(this.fsManager.resolveFile("ram:///webapps/context.war").exists());}  }
class C{  public byte[] encryptData(final byte[] plain){  return encryptData(plain,0,plain.length);}  }
class C{  public void paintBorder(Graphics g){  g.setPaintMode();  super.paintBorder(g);}  }
class C{  protected void assertAnyMode() throws ReplicatorException {  if (mode == null)   throw new THLException("Log file not initialized for access: file=" + file.getName());}  }
class C{  public void updateLensFlares(){  double vecX=-mPositionScreen.x * 2;  double vecY=-mPositionScreen.y * 2;  for (int f=0; f < mLensFlares.size(); f++) {    FlareInfo flare=mLensFlares.get(f);    flare.setScreenPosition(mPositionScreen.x + vecX * flare.getDistance(),mPositionScreen.y + vecY * flare.getDistance());    flare.setWantedRotation(flare.getScreenPosition().x * Math.PI * 0.25);    flare.setRotation(flare.getRotation() + (flare.getWantedRotation() - flare.getRotation()) * 0.25f);  }}  }
class C{  @Override public String toString(){  String proto=(this instanceof TurnCandidateHarvester) ? "TURN" : "STUN";  return proto + " harvester(srvr: " + this.stunServer+ ")";}  }
class C{  protected void addUsage(Symbol sym){  Name n=sym.getSimpleName();  List<Symbol> conflicts=nameClashes.get(n);  if (conflicts == null) {    conflicts=List.nil();  }  if (!conflicts.contains(sym))   nameClashes.put(n,conflicts.append(sym));}  }
class C{  public void sendPacketToDevice(String message){  if (message == null) {    return;  }  out.println(message + newLine);  if (log.isDebugEnabled()) {    String s=message + "                    ";    s=s.substring(0,Math.max(message.length(),20));    log.debug("Sent: " + s + "  to  "+ getName()+ device.getRemoteSocketAddress());  }}  }
class C{  public static int[] toIntArray(String str){  return toIntArray(str,true);}  }
class C{  private void buildShell(){  this.shell=new Shell(SWT.SYSTEM_MODAL | SWT.TITLE | SWT.BORDER);  this.shell.setText(ResourceManager.getLabel(ResourceManager.LOGIN));  this.shell.setLayout(new GridLayout(4,false));}  }
class C{  public static <T>ArrayList<T> arrayList(Collection<T> c){  return new ArrayList<T>(c);}  }
class C{  public static int numOfTimes(int[] A,int target){  if (A == null || A.length == 0)   return 0;  int l=0;  int r=A.length - 1;  int m=0;  while (l <= r) {    m=l + (r - l) / 2;    if (A[m] == target)     break; else     if (A[m] < target)     l=m + 1; else     r=m - 1;  }  if (l > r)   return 0;  int start=m;  int end=m;  while (end + 1 < A.length && A[end] == A[end + 1])   end++;  while (start - 1 >= 0 && A[start] == A[start - 1])   start--;  return end - start + 1;}  }
class C{  public boolean contains(JComponent a,int b,int c){  boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);  }  return returnValue;}  }
class C{  public synchronized void renameMap(MVMap<?,?> map,String newName){  checkOpen();  DataUtils.checkArgument(map != meta,"Renaming the meta map is not allowed");  int id=map.getId();  String oldName=getMapName(id);  if (oldName.equals(newName)) {    return;  }  DataUtils.checkArgument(!meta.containsKey("name." + newName),"A map named {0} already exists",newName);  markMetaChanged();  String x=Integer.toHexString(id);  meta.remove("name." + oldName);  meta.put(MVMap.getMapKey(id),map.asString(newName));  meta.put("name." + newName,x);}  }
class C{  private void addTvShowEpisode(TvShowEpisode episode,TvShowSeason season){synchronized (root) {    TvShowSeasonTreeNode parent=(TvShowSeasonTreeNode)nodeMap.get(season);    if (parent == null) {      addTvShowSeason(season,episode.getTvShow());      parent=(TvShowSeasonTreeNode)nodeMap.get(season);    }    TvShowEpisodeTreeNode child=new TvShowEpisodeTreeNode(episode);    if (parent != null) {      parent.add(child);      nodeMap.put(episode,child);      int index=getIndexOfChild(parent,child);      if (index > -1) {        TreeModelEvent event=new TreeModelEvent(this,parent.getPath(),new int[]{index},new Object[]{child});        for (        TreeModelListener listener : listeners) {          try {            listener.treeNodesInserted(event);          } catch (          NullPointerException|ArrayIndexOutOfBoundsException ignored) {          }        }      }      TreeModelEvent event=new TreeModelEvent(this,root.getPath(),null,null);      for (      TreeModelListener listener : listeners) {        try {          listener.treeNodesChanged(event);        } catch (        NullPointerException|ArrayIndexOutOfBoundsException ignored) {        }      }    }  }  episode.addPropertyChangeListener(propertyChangeListener);}  }
class C{  public BerInputStream(InputStream in) throws IOException {  this(in,BUF_INCREASE_SIZE);}  }
class C{  public boolean addBidirectedEdge(Node node1,Node node2){  throw new UnsupportedOperationException();}  }
class C{  protected boolean isClear(MatrixIndexes indexes,boolean markAsTaken){  Debug.message("declutterdetail","DeclutterMatrix: Checking space for clear.");  if (this.matrix == null) {    return false;  }  if (!indexes.withinMatrix) {    return true;  }  if (!allowPartials && indexes.partial) {    return false;  }  boolean notClear=false;  for (int taken=0; taken < 2; taken++) {    for (int i=indexes.xStart; i <= indexes.xEnd; i++) {      if (taken == 0) {        notClear=isMatrixLocationTaken(i,indexes.yStart,indexes.yEnd - indexes.yStart + 1);        if (notClear) {          return false;        }      } else {        setTaken(i,indexes.yStart,indexes.yEnd - indexes.yStart + 1);      }    }    if (!markAsTaken) {      return true;    }  }  return true;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypeRefsPackage.BASE_TYPE_REF__DYNAMIC:    return dynamic != DYNAMIC_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  public static <E,L extends List<E>>SynchronizedMutableList<E> of(L list,Object lock){  MutableList<E> mutableList=list instanceof MutableList ? (MutableList<E>)list : ListAdapter.adapt(list);  return new SynchronizedMutableList<>(mutableList,lock);}  }
class C{  public static void main(String[] args){  doMain(args);}  }
class C{  public void visitLabel(Label label){  if (mv != null) {    mv.visitLabel(label);  }}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  HttpSession sess=request.getSession(true);  sess.setMaxInactiveInterval(WebEnv.TIMEOUT);  ctx=getCtx();  if (sess.getAttribute("ctx") != null)   ctx=(Properties)sess.getAttribute("ctx");  if (ctx.get("#AD_Client_ID") != null) {    RequestAnalyzer thisRequest=new RequestAnalyzer(this,request,false,null);  }  WebSessionCtx wsc=(WebSessionCtx)sess.getAttribute(WebSessionCtx.NAME);  if (wsc == null) {    int[] allIDs=X_W_Store.getAllIDs("W_Store","AD_Client_ID=" + ctx.get("#AD_Client_ID"),"");    if (allIDs != null && allIDs.length > 0) {      wsc=WebSessionCtx.get(request,allIDs[0]);      wsc.setWStore(allIDs[0]);      sess.setAttribute(WebSessionCtx.NAME,wsc);    }  }  WebLogin thisLogin=new WebLogin(request,response,ctx);  thisLogin.init();  if (!thisLogin.action()) {    WebUtil.reload(thisLogin.getMessage(),thisLogin.getUpdate_page(),sess,request,response,getServletContext());    return;  }  String url=thisLogin.getForward();  if (!url.startsWith("/"))   url="/" + url;  log.info("doPost - Forward to " + url);  response.sendRedirect(url);}  }
class C{  public final int numVariations(){  if (tree.currentNode == tree.rootNode)   return 1;  tree.goBack();  int nChildren=tree.variations().size();  tree.goForward(-1);  return nChildren;}  }
class C{  HandshakeHash(boolean needCertificateVerify){  clonesNeeded=needCertificateVerify ? 3 : 2;}  }
class C{  public MessageSummaryImpl(int messageID){  m_messageInternalId=messageID;  m_instanceCount=0;  m_instanceCountFailed=0;  m_severity=Severity.UNKNOWN;}  }
class C{  protected void drawCenterText(Canvas c){  String centerText=mChart.getCenterText();  if (mChart.isDrawCenterTextEnabled() && centerText != null) {    PointF center=mChart.getCenterCircleBox();    String[] lines=centerText.split("\n");    float maxlineheight=0f;    for (    String line : lines) {      float curHeight=Utils.calcTextHeight(mCenterTextPaint,line);      if (curHeight > maxlineheight)       maxlineheight=curHeight;    }    float linespacing=maxlineheight * 0.25f;    float totalheight=maxlineheight * lines.length - linespacing * (lines.length - 1);    int cnt=lines.length;    float y=center.y;    for (int i=0; i < lines.length; i++) {      String line=lines[lines.length - i - 1];      c.drawText(line,center.x,y + maxlineheight * cnt - totalheight / 2f,mCenterTextPaint);      cnt--;      y-=linespacing;    }  }}  }
class C{  public static String encodeBytes(byte[] source){  String encoded=null;  try {    encoded=encodeBytes(source,0,source.length,NO_OPTIONS);  } catch (  java.io.IOException ex) {    assert false : ex.getMessage();  }  assert encoded != null;  return encoded;}  }
class C{  public boolean isMouseLocked(){  return false;}  }
class C{  public static Bitmap createReflectionImageWithOrigin(Bitmap bitmap){  final int reflectionGap=4;  int w=bitmap.getWidth();  int h=bitmap.getHeight();  Matrix matrix=new Matrix();  matrix.preScale(1,-1);  Bitmap reflectionImage=Bitmap.createBitmap(bitmap,0,h / 2,w,h / 2,matrix,false);  Bitmap bitmapWithReflection=Bitmap.createBitmap(w,(h + h / 2),Config.ARGB_8888);  Canvas canvas=new Canvas(bitmapWithReflection);  canvas.drawBitmap(bitmap,0,0,null);  Paint deafalutPaint=new Paint();  canvas.drawRect(0,h,w,h + reflectionGap,deafalutPaint);  canvas.drawBitmap(reflectionImage,0,h + reflectionGap,null);  Paint paint=new Paint();  LinearGradient shader=new LinearGradient(0,bitmap.getHeight(),0,bitmapWithReflection.getHeight() + reflectionGap,0x70ffffff,0x00ffffff,TileMode.CLAMP);  paint.setShader(shader);  paint.setXfermode(new PorterDuffXfermode(Mode.DST_IN));  canvas.drawRect(0,h,w,bitmapWithReflection.getHeight() + reflectionGap,paint);  return bitmapWithReflection;}  }
class C{  public ImageEffect(Entity2DView<? extends IEntity> view,String image){  this.view=view;  SpriteStore store=SpriteStore.get();  Sprite base=store.getSprite(IMAGE_LOCATION + image + ".png");  int width=base.getWidth();  int height=base.getHeight();  int count=width / height;  Sprite[] frames=store.getTiles(base,0,0,count,height,height);  sequence=new SequenceSprite(this,frames,100);  view.attachSprite(sequence,HorizontalAlignment.CENTER,VerticalAlignment.MIDDLE,0,0);}  }
class C{  private void init(){  formatHtmlAndCustomTags();}  }
class C{  @Ignore("TODO: Disabled for 52351") @Test public void testReplicatedSerialAsyncEventQueueWithPeristenceEnabled_Restart2(){  Integer lnPort=(Integer)vm0.invoke(null);  vm1.invoke(createCacheRunnable(lnPort));  vm2.invoke(createCacheRunnable(lnPort));  vm3.invoke(createCacheRunnable(lnPort));  vm1.invoke(null);  vm2.invoke(null);  vm3.invoke(null);  vm1.invoke(createReplicatedRegionRunnable());  vm1.invoke(null);  vm2.invoke(createReplicatedRegionRunnable());  vm3.invoke(createReplicatedRegionRunnable());  vm2.invoke(null);  vm2.invoke(null);  vm2.invoke(null);  int vm1size=(Integer)vm1.invoke(null);  int vm2size=(Integer)vm2.invoke(null);  LogWriterUtils.getLogWriter().info("vm1 size is: " + vm1size);  LogWriterUtils.getLogWriter().info("vm2 size is: " + vm2size);  assertTrue("Total number of entries in events map on vm1 and vm2 should be at least 2000",(vm1size + vm2size) >= 2000);}  }
class C{  public static ClassNode make(Class c){  return make(c,true);}  }
class C{  public static Bitmap zoomBitmap(Bitmap bitmap,int width,int height){  int w=bitmap.getWidth();  int h=bitmap.getHeight();  Matrix matrix=new Matrix();  float scaleWidth=((float)width / w);  float scaleHeight=((float)height / h);  matrix.postScale(scaleWidth,scaleHeight);  Bitmap newbmp=Bitmap.createBitmap(bitmap,0,0,w,h,matrix,true);  return newbmp;}  }
class C{  public void delete(String name) throws IOException {  if (name.equalsIgnoreCase(ISSUER_NAME)) {    names=null;  } else {    throw new IOException("Attribute name not recognized by " + "CertAttrSet:IssuerAlternativeName.");  }  encodeThis();}  }
class C{  public DataSource(String location) throws Exception {  super();  if (location.startsWith("http://") || location.startsWith("https://") || location.startsWith("ftp://")|| location.startsWith("file://")) {    m_URL=new URL(location);  } else {    m_File=new File(location);  }  if (isArff(location)) {    m_Loader=new ArffLoader();  } else {    if (m_File != null) {      m_Loader=ConverterUtils.getLoaderForFile(location);    } else {      m_Loader=ConverterUtils.getURLLoaderForFile(location);    }    if (m_Loader == null) {      throw new IllegalArgumentException("No suitable converter found for '" + location + "'!");    }  }  m_Incremental=(m_Loader instanceof IncrementalConverter);  reset();}  }
class C{  public static synchronized SortedProperties loadProperties(String fileName) throws IOException {  SortedProperties prop=new SortedProperties();  if (FileUtils.exists(fileName)) {    InputStream in=null;    try {      in=FileUtils.newInputStream(fileName);      prop.load(in);    }  finally {      if (in != null) {        in.close();      }    }  }  return prop;}  }
class C{  @NotNull public RunnerRequestCallBackBuilder<T> failure(@NotNull FailureCallback failureCallback){  this.failureCallback=failureCallback;  return this;}  }
class C{  protected static int parseShortInteger(ByteArrayInputStream pduDataStream){  assert (null != pduDataStream);  int temp=pduDataStream.read();  assert (-1 != temp);  return temp & 0x7F;}  }
class C{  @Override protected void onRestart(){  super.onRestart();  Log.d(TAG,"onRestart() - the activity is about to be restarted()");}  }
class C{  public AbstractDataReader(String mimeType){  settings=new HashMap<String,Object>();  defaults=new HashMap<String,Object>();  this.mimeType=mimeType;}  }
class C{  private void registerArrayConverter(final Class<?> componentType,final Converter componentConverter,final boolean throwException,final int defaultArraySize){  Class<?> arrayType=Array.newInstance(componentType,0).getClass();  Converter arrayConverter=null;  if (throwException) {    arrayConverter=new ArrayConverter(arrayType,componentConverter);  } else {    arrayConverter=new ArrayConverter(arrayType,componentConverter,defaultArraySize);  }  this.register(arrayType,arrayConverter);}  }
class C{  public void testPutUnsignedLong() throws Exception {  ByteBuffer bb=ByteBuffer.allocate(8);  BigInteger uLongMax=new BigInteger(ULONG_MAX);  Unsigned.putUnsignedLong(bb,uLongMax);  for (int i=0; i < 8; ++i) {    TestCase.assertTrue("Byte: " + i + " should be 0xff, was: "+ bb.get(i),(bb.get(i) & (short)0xff) == 0xff);  }  bb=ByteBuffer.allocate(10);  Unsigned.putUnsignedLong(bb,uLongMax,1);  int offset=1;  for (int i=0; i < 8; ++i) {    TestCase.assertTrue("Byte: " + i + " should be 0xff, was: "+ bb.get(offset + i),(bb.get(offset + i) & (short)0xff) == 0xff);  }}  }
class C{  @Override public void onDragFloatView(View floatView,Point position,Point touch){  if (mRemoveEnabled && mIsRemoving) {    mPositionX=position.x;  }}  }
class C{  private void openClient(String clusterName){  logger.info("Using ElasticSearch hostnames: {} ",Arrays.toString(serverAddresses));  Settings settings=Settings.settingsBuilder().put("cluster.name",clusterName).build();  TransportClient transportClient=TransportClient.builder().settings(settings).build();  for (  InetSocketTransportAddress host : serverAddresses) {    transportClient.addTransportAddress(host);  }  if (client != null) {    client.close();  }  client=transportClient;}  }
class C{  protected void drawDNA(Canvas canvas){  if (mDna != null) {    for (    Utils.DNAStrand strand : mDna.values()) {      if (strand.color == CONFLICT_COLOR || strand.points == null || strand.points.length == 0) {        continue;      }      mDNATimePaint.setColor(strand.color);      canvas.drawLines(strand.points,mDNATimePaint);    }    Utils.DNAStrand strand=mDna.get(CONFLICT_COLOR);    if (strand != null && strand.points != null && strand.points.length != 0) {      mDNATimePaint.setColor(strand.color);      canvas.drawLines(strand.points,mDNATimePaint);    }    if (mDayXs == null) {      return;    }    int numDays=mDayXs.length;    int xOffset=(DNA_ALL_DAY_WIDTH - DNA_WIDTH) / 2;    if (strand != null && strand.allDays != null && strand.allDays.length == numDays) {      for (int i=0; i < numDays; i++) {        if (strand.allDays[i] != 0) {          mDNAAllDayPaint.setColor(strand.allDays[i]);          canvas.drawLine(mDayXs[i] + xOffset,DNA_MARGIN,mDayXs[i] + xOffset,DNA_MARGIN + DNA_ALL_DAY_HEIGHT,mDNAAllDayPaint);        }      }    }  }}  }
class C{  protected final void serialize(ObjectOutputStream oos,Collection coll) throws IOException {  int count=0;  Object[] objects=coll.toArray();  for (int i=0; i < objects.length; i++) {    if (objects[i] instanceof Serializable)     count++; else     objects[i]=null;  }  oos.writeInt(count);  for (int i=0; count > 0; i++) {    Object o=objects[i];    if (o != null) {      oos.writeObject(o);      count--;    }  }}  }
class C{  protected Set<InternalDistributedMember> directChannelSend(InternalDistributedMember[] destinations,DistributionMessage content,DMStats theStats) throws NotSerializableException {  boolean allDestinations;  InternalDistributedMember[] keys;  if (content.forAll()) {    allDestinations=true;    latestViewReadLock.lock();    try {      List<InternalDistributedMember> keySet=latestView.getMembers();      keys=new InternalDistributedMember[keySet.size()];      keys=keySet.toArray(keys);    }  finally {      latestViewReadLock.unlock();    }  } else {    allDestinations=false;    keys=destinations;  }  int sentBytes;  try {    sentBytes=directChannel.send(this,keys,content,this.services.getConfig().getDistributionConfig().getAckWaitThreshold(),this.services.getConfig().getDistributionConfig().getAckSevereAlertThreshold());    if (theStats != null) {      theStats.incSentBytes(sentBytes);    }    if (sentBytes == 0) {      if (services.getCancelCriterion().isCancelInProgress()) {        throw new DistributedSystemDisconnectedException();      }    }  } catch (  DistributedSystemDisconnectedException ex) {    if (services.getShutdownCause() != null) {      throw new DistributedSystemDisconnectedException("DistributedSystem is shutting down",services.getShutdownCause());    } else {      throw ex;    }  }catch (  ConnectExceptions ex) {    if (allDestinations)     return null;    List<InternalDistributedMember> members=(List<InternalDistributedMember>)ex.getMembers();    NetView view=services.getJoinLeave().getView();    Iterator it_mem=members.iterator();    Iterator it_causes=ex.getCauses().iterator();    while (it_mem.hasNext()) {      InternalDistributedMember member=(InternalDistributedMember)it_mem.next();      Throwable th=(Throwable)it_causes.next();      if (!view.contains(member) || (th instanceof ShunnedMemberException)) {        continue;      }      logger.fatal(LocalizedMessage.create(LocalizedStrings.GroupMembershipService_FAILED_TO_SEND_MESSAGE_0_TO_MEMBER_1_VIEW_2,new Object[]{content,member,view}),th);    }    return new HashSet<>(members);  }catch (  ToDataException|CancelException e) {    throw e;  }catch (  IOException e) {    if (logger.isDebugEnabled()) {      logger.debug("Membership: directChannelSend caught exception: {}",e.getMessage(),e);    }    if (e instanceof NotSerializableException) {      throw (NotSerializableException)e;    }  }catch (  RuntimeException|Error e) {    if (logger.isDebugEnabled()) {      logger.debug("Membership: directChannelSend caught exception: {}",e.getMessage(),e);    }    throw e;  }  return null;}  }
class C{  public static void parse(String xml,ContentHandler contentHandler) throws SAXException {  try {    XMLReader reader=new ExpatReader();    reader.setContentHandler(contentHandler);    reader.parse(new InputSource(new StringReader(xml)));  } catch (  IOException e) {    throw new AssertionError(e);  }}  }
class C{  public boolean removeCell(String id){  for (ListIterator<String> li=cells.listIterator(); li.hasNext(); ) {    if (li.next().split(LayoutConstants.CELL_PTRN)[LayoutConstants.ID].equals(id)) {      li.remove();      return true;    }  }  return false;}  }
class C{  public boolean isExpressCheckout(){  return expressCheckout;}  }
class C{  private void doDelete(HttpServletRequest request,InstructorEditForm frm) throws Exception {  String instructorId=frm.getInstructorId();  DepartmentalInstructorDAO idao=new DepartmentalInstructorDAO();  sessionContext.checkPermission(instructorId,"DepartmentalInstructor",Right.InstructorDelete);  org.hibernate.Session hibSession=idao.getSession();  Transaction tx=null;  try {    tx=hibSession.beginTransaction();    DepartmentalInstructor inst=idao.get(new Long(instructorId));    ChangeLog.addChange(hibSession,sessionContext,inst,ChangeLog.Source.INSTRUCTOR_EDIT,ChangeLog.Operation.DELETE,null,inst.getDepartment());    HashSet<Class_> updatedClasses=new HashSet<Class_>();    for (Iterator i=inst.getClasses().iterator(); i.hasNext(); ) {      ClassInstructor ci=(ClassInstructor)i.next();      Class_ c=ci.getClassInstructing();      updatedClasses.add(c);      c.getClassInstructors().remove(ci);      hibSession.saveOrUpdate(ci);      hibSession.delete(ci);    }    for (Iterator i=inst.getExams().iterator(); i.hasNext(); ) {      Exam exam=(Exam)i.next();      exam.getInstructors().remove(inst);      hibSession.saveOrUpdate(exam);    }    for (Iterator i=inst.getAssignments().iterator(); i.hasNext(); ) {      Assignment a=(Assignment)i.next();      a.getInstructors().remove(inst);      hibSession.saveOrUpdate(a);    }    Department d=null;    if (inst.getDepartment() != null) {      d=inst.getDepartment();    }    d.getInstructors().remove(inst);    hibSession.delete(inst);    tx.commit();    String className=ApplicationProperty.ExternalActionClassEdit.value();    if (className != null && className.trim().length() > 0) {      ExternalClassEditAction editAction=(ExternalClassEditAction)(Class.forName(className).newInstance());      for (      Class_ c : updatedClasses) {        editAction.performExternalClassEditAction(c,hibSession);      }    }    hibSession.clear();  } catch (  Exception e) {    Debug.error(e);    try {      if (tx != null && tx.isActive())       tx.rollback();    } catch (    Exception e1) {    }    throw e;  }}  }
class C{  public static FFTResults fft(Vec data){  return fft(data.getv());}  }
class C{  public void testNextBoolean(){  boolean f=ThreadLocalRandom.current().nextBoolean();  int i=0;  while (i < NCALLS && ThreadLocalRandom.current().nextBoolean() == f)   ++i;  assertTrue(i < NCALLS);}  }
class C{  public List<StorageUnitEntity> excludePartitions(List<StorageUnitEntity> storageUnitEntities,List<List<String>> excludedPartitions){  List<StorageUnitEntity> result=new ArrayList<>();  for (  StorageUnitEntity storageUnitEntity : storageUnitEntities) {    if (!excludedPartitions.contains(businessObjectDataHelper.getPrimaryAndSubPartitionValues(storageUnitEntity.getBusinessObjectData()))) {      result.add(storageUnitEntity);    }  }  return result;}  }
class C{  private PluginLoader(){}  }
class C{  public boolean isEmpty(){  return size() == 0;}  }
class C{  public FindServersOnNetworkRequest clone(){  FindServersOnNetworkRequest result=new FindServersOnNetworkRequest();  result.RequestHeader=RequestHeader == null ? null : RequestHeader.clone();  result.StartingRecordId=StartingRecordId;  result.MaxRecordsToReturn=MaxRecordsToReturn;  result.ServerCapabilityFilter=ServerCapabilityFilter == null ? null : ServerCapabilityFilter.clone();  return result;}  }
class C{  public int elementAt(int i){  if (null == m_map)   return DTM.NULL;  return m_map[i];}  }
class C{  public static EntityIterator newEntityIterator(Cursor cursor){  return new EntityIteratorImpl(cursor);}  }
class C{  public boolean isFalse(){  return value == false;}  }
class C{  public void list(PrintWriter out){  properties.list(out);}  }
class C{  public static void main(String[] args) throws Exception {  TcpClient client=new TcpClient();  long t0=System.currentTimeMillis();  for (int i=0; i <= TcpServer.MAX_RECEIVED; i++) {    IoBuffer buffer=IoBuffer.allocate(4);    buffer.putInt(i);    buffer.flip();    session.write(buffer);    while (client.received == false) {      Thread.sleep(1);    }    client.received=false;    if (i % 10000 == 0) {      System.out.println("Sent " + i + " messages");    }  }  long t1=System.currentTimeMillis();  System.out.println("Sent messages delay : " + (t1 - t0));  Thread.sleep(100000);  client.connector.dispose(true);}  }
class C{  public boolean isNonResources(){  return mNonResources;}  }
class C{  public static IceControllingAttribute createIceControllingAttribute(long tieBreaker){  IceControllingAttribute attribute=new IceControllingAttribute();  attribute.setTieBreaker(tieBreaker);  return attribute;}  }
class C{  public static void main(String[] args){  glfwInit();  long window=createWindow();  FloatBuffer buffer=memAllocFloat(3 * 2);  buffer.put(-0.5f).put(-0.5f);  buffer.put(+0.5f).put(-0.5f);  buffer.put(+0.0f).put(+0.5f);  buffer.flip();  int vbo=glGenBuffers();  glBindBuffer(GL_ARRAY_BUFFER,vbo);  glBufferData(GL_ARRAY_BUFFER,buffer,GL_STATIC_DRAW);  memFree(buffer);  glEnableClientState(GL_VERTEX_ARRAY);  glVertexPointer(2,GL_FLOAT,0,0L);  while (!glfwWindowShouldClose(window)) {    glfwPollEvents();    glDrawArrays(GL_TRIANGLES,0,3);    glfwSwapBuffers(window);  }  glfwTerminate();  System.out.println("Fin.");}  }
class C{  @Override public synchronized void initialize(){  if (!mRootDirectory.exists()) {    if (!mRootDirectory.mkdirs()) {      VolleyLog.e("Unable to create cache dir %s",mRootDirectory.getAbsolutePath());    }    return;  }  File[] files=mRootDirectory.listFiles();  if (files == null) {    return;  }  for (  File file : files) {    FileInputStream fis=null;    try {      fis=new FileInputStream(file);      CacheHeader entry=CacheHeader.readHeader(fis);      entry.size=file.length();      putEntry(entry.key,entry);    } catch (    IOException e) {      if (file != null) {        file.delete();      }    } finally {      try {        if (fis != null) {          fis.close();        }      } catch (      IOException ignored) {      }    }  }}  }
class C{  private OpenSSLSignature(String algorithm,EngineType engineType) throws NoSuchAlgorithmException {  super(algorithm);  if ("RSA-MD2".equals(algorithm)) {    throw new NoSuchAlgorithmException(algorithm);  }  this.engineType=engineType;  this.evpAlgorithm=algorithm;}  }
class C{  private static Point2D.Double computeLeftTangent(ArrayList<Point2D.Double> d,int end){  Point2D.Double tHat1;  tHat1=v2SubII(d.get(end + 1),d.get(end));  tHat1=v2Normalize(tHat1);  return tHat1;}  }
class C{  public static int putBytes(byte[] tgtBytes,int tgtOffset,byte[] srcBytes,int srcOffset,int srcLength){  System.arraycopy(srcBytes,srcOffset,tgtBytes,tgtOffset,srcLength);  return tgtOffset + srcLength;}  }
class C{  public void testSetPropertiesOnMissingDirectory() throws Exception {  if (!propertiesSupported())   return;  Map<String,String> propsDir=properties("ownerDir","groupDir","0555");  Map<String,String> propsSubDir=properties("ownerSubDir","groupSubDir","0666");  create(igfsSecondary,paths(DIR,SUBDIR),null);  create(igfs,null,null);  igfsSecondaryFileSystem.update(DIR,propsDir);  igfsSecondaryFileSystem.update(SUBDIR,propsSubDir);  assertEquals(propsDir,igfs.info(DIR).properties());  assertEquals(propsSubDir,igfs.info(SUBDIR).properties());}  }
class C{  protected void firePropertyChange(String propertyName,Object oldValue,Object newValue){  this.changeSupport.firePropertyChange(propertyName,oldValue,newValue);}  }
class C{  public static boolean isFile(@NonNull File file){  assertIoOperationOnNonThread();  return file.isFile();}  }
class C{  protected int writeObject(STWriter out,InstanceScope scope,Object o,String[] options){  int n=0;  if (o == null) {    if (options != null && options[Option.NULL.ordinal()] != null) {      o=options[Option.NULL.ordinal()];    } else     return 0;  }  if (o instanceof ST) {    scope=new InstanceScope(scope,(ST)o);    if (options != null && options[Option.WRAP.ordinal()] != null) {      try {        out.writeWrap(options[Option.WRAP.ordinal()]);      } catch (      IOException ioe) {        errMgr.IOError(scope.st,ErrorType.WRITE_IO_ERROR,ioe);      }    }    n=exec(out,scope);  } else {    o=convertAnythingIteratableToIterator(scope,o);    try {      if (o instanceof Iterator)       n=writeIterator(out,scope,o,options); else       n=writePOJO(out,scope,o,options);    } catch (    IOException ioe) {      errMgr.IOError(scope.st,ErrorType.WRITE_IO_ERROR,ioe,o);    }  }  return n;}  }
class C{  public JobChainingJobListener(String name){  if (name == null) {    throw new IllegalArgumentException("Listener name cannot be null!");  }  this.name=name;  chainLinks=new HashMap<JobKey,JobKey>();}  }
class C{  public BigInteger reconstruct(SecretShare[] shares) throws HyperLedgerException {  for (int i=0; i < shares.length - 1; ++i) {    for (int j=0; j < shares.length; ++j) {      if (i != j && shares[i].shareNumber == shares[j].shareNumber) {        throw new HyperLedgerException("Shares are not unique");      }    }  }  BigInteger[] y=new BigInteger[shares.length];  for (int i=0; i < shares.length; ++i) {    y[i]=shares[i].share;  }  int d, i;  for (d=1; d < shares.length; d++) {    for (i=0; i < shares.length - d; i++) {      int j=i + d;      BigInteger xi=BigInteger.valueOf(shares[i].shareNumber + 1);      BigInteger xj=BigInteger.valueOf(shares[j].shareNumber + 1);      y[i]=xj.multiply(y[i]).subtract(xi.multiply(y[i + 1])).multiply(xj.subtract(xi).modInverse(secretModulo)).mod(secretModulo);    }  }  return y[0];}  }
class C{  private int sendType(HeapDataOutputStream buf) throws IOException {  if (structType != null) {    buf.writeByte(TYPE_CHUNK);    DataSerializer.writeObject(structType,buf);    return sendBufferredData(buf,false);  } else {    return 0;  }}  }
class C{  public void processingInstruction(String target,String data) throws SAXException {  flushStartDoc();  m_resultContentHandler.processingInstruction(target,data);}  }
class C{  @Override public void sendTrainList(){  List<Train> trainList=tm.getTrainsByNameList();  ArrayList<Attribute> aTrain;  for (  Train train : trainList) {    aTrain=new ArrayList<Attribute>(1);    aTrain.add(new Attribute(TRAINS,train.getName()));    try {      sendMessage(aTrain);    } catch (    IOException ioe) {      log.debug("could not send train " + train.getName());    }  }}  }
class C{  public final void testDomainNameWithContextParameter(){  assertNotNull(Validators.domainName(getContext()));}  }
class C{  public TrieSET(){}  }
class C{  public Chronology withUTC(){  return INSTANCE_UTC;}  }
class C{  @Override public DriverTask discoverStoragePorts(StorageSystem storageSystem,List<StoragePort> storagePorts){  return discoveryHelper.discoverStoragePorts(storageSystem,storagePorts);}  }
class C{  public LinearDiscretizer(double[] values,int bins){  double min=StatUtils.min(values);  double max=StatUtils.max(values);  this.binwidth=Math.abs(max - min) / (double)bins;}  }
class C{  public void init() throws ServletException {}  }
class C{  public static PluginResult pluginResultFromEvent(IPluginEvent event){  final String actionName=event.name();  final Map<String,Object> data=event.data();  final ChcpError error=event.error();  return createPluginResult(actionName,data,error);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case GamlPackage.ARGUMENT_DEFINITION__TYPE:    return type != null;case GamlPackage.ARGUMENT_DEFINITION__DEFAULT:  return default_ != null;}return super.eIsSet(featureID);}  }
class C{  @SuppressWarnings("unchecked") public boolean equals(Object object){  Pair<F,S> pair=(Pair<F,S>)object;  return equals(first,pair.first) && equals(second,pair.second);}  }
class C{  private double computeSnapTolerance(Coordinate[] ringPts){  double minSegLen=computeMinimumSegmentLength(ringPts);  double snapTol=minSegLen / 10;  return snapTol;}  }
class C{  public static void fixRelationName(Instances data){  fixRelationName(data,0);}  }
class C{  @Override public void release(){  this.type=null;}  }
class C{  public static void compactMemory(){  try {    @SuppressWarnings("unused") final byte[][] unused=new byte[128][];    for (int i=unused.length; i-- != 0; )     unused[i]=new byte[2000000000];  } catch (  OutOfMemoryError itsWhatWeWanted) {  }  System.gc();}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  protected static AttributedCharacterIterator createModifiedACIForFontMatching(AttributedCharacterIterator aci){  aci.first();  AttributedString as=null;  int asOff=0;  int begin=aci.getBeginIndex();  boolean moreChunks=true;  int start, end=aci.getRunStart(TEXT_COMPOUND_ID);  while (moreChunks) {    start=end;    end=aci.getRunLimit(TEXT_COMPOUND_ID);    int aciLength=end - start;    List fonts;    fonts=(List)aci.getAttribute(GVT_FONTS);    float fontSize=12;    Float fsFloat=(Float)aci.getAttribute(TextAttribute.SIZE);    if (fsFloat != null)     fontSize=fsFloat.floatValue();    if (fonts.size() == 0) {      fonts.add(FontFamilyResolver.defaultFont.deriveFont(fontSize,aci));    }    boolean[] fontAssigned=new boolean[aciLength];    if (as == null)     as=new AttributedString(aci);    GVTFont defaultFont=null;    int numSet=0;    int firstUnset=start;    boolean firstUnsetSet;    for (int i=0; i < fonts.size(); i++) {      int currentIndex=firstUnset;      firstUnsetSet=false;      aci.setIndex(currentIndex);      GVTFont font=(GVTFont)fonts.get(i);      if (defaultFont == null)       defaultFont=font;      while (currentIndex < end) {        int displayUpToIndex=font.canDisplayUpTo(aci,currentIndex,end);        Object altGlyphElement;        altGlyphElement=aci.getAttribute(ALT_GLYPH_HANDLER);        if (altGlyphElement != null) {          displayUpToIndex=-1;        }        if (displayUpToIndex == -1) {          displayUpToIndex=end;        }        if (displayUpToIndex <= currentIndex) {          if (!firstUnsetSet) {            firstUnset=currentIndex;            firstUnsetSet=true;          }          currentIndex++;        } else {          int runStart=-1;          for (int j=currentIndex; j < displayUpToIndex; j++) {            if (fontAssigned[j - start]) {              if (runStart != -1) {                as.addAttribute(GVT_FONT,font,runStart - begin,j - begin);                runStart=-1;              }            } else {              if (runStart == -1)               runStart=j;            }            fontAssigned[j - start]=true;            numSet++;          }          if (runStart != -1) {            as.addAttribute(GVT_FONT,font,runStart - begin,displayUpToIndex - begin);          }          currentIndex=displayUpToIndex + 1;        }      }      if (numSet == aciLength)       break;    }    int runStart=-1;    GVTFontFamily prevFF=null;    GVTFont prevF=defaultFont;    for (int i=0; i < aciLength; i++) {      if (fontAssigned[i]) {        if (runStart != -1) {          as.addAttribute(GVT_FONT,prevF,runStart + asOff,i + asOff);          runStart=-1;          prevF=null;          prevFF=null;        }      } else {        char c=aci.setIndex(start + i);        GVTFontFamily fontFamily;        fontFamily=FontFamilyResolver.getFamilyThatCanDisplay(c);        if (runStart == -1) {          runStart=i;          prevFF=fontFamily;          if (prevFF == null)           prevF=defaultFont; else           prevF=fontFamily.deriveFont(fontSize,aci);        } else         if (prevFF != fontFamily) {          as.addAttribute(GVT_FONT,prevF,runStart + asOff,i + asOff);          runStart=i;          prevFF=fontFamily;          if (prevFF == null)           prevF=defaultFont; else           prevF=fontFamily.deriveFont(fontSize,aci);        }      }    }    if (runStart != -1) {      as.addAttribute(GVT_FONT,prevF,runStart + asOff,aciLength + asOff);    }    asOff+=aciLength;    if (aci.setIndex(end) == AttributedCharacterIterator.DONE) {      moreChunks=false;    }    start=end;  }  if (as != null)   return as.getIterator();  return aci;}  }
class C{  public void addGraph(Graph g){  graphs.add(g);}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public static String convertBytesToHex(byte[] value,int len){  char[] buff=new char[len + len];  char[] hex=HEX;  for (int i=0; i < len; i++) {    int c=value[i] & 0xff;    buff[i + i]=hex[c >> 4];    buff[i + i + 1]=hex[c & 0xf];  }  return new String(buff);}  }
class C{  @Override public void process(final DM dm,final ReplyProcessor21 rp){  final long startTime=getTimestamp();  if (logger.isDebugEnabled()) {    logger.debug("Processing {}",this);  }  if (rp == null) {    if (logger.isDebugEnabled()) {      logger.debug("PutReplyMessage processor not found");    }    return;  }  if (this.versionTag != null) {    this.versionTag.replaceNullIDs(getSender());  }  if (rp instanceof RemotePutResponse) {    RemotePutResponse processor=(RemotePutResponse)rp;    processor.setResponse(this);  }  rp.process(this);  if (logger.isTraceEnabled(LogMarker.DM)) {    logger.trace(LogMarker.DM,"{} processed {}",rp,this);  }  dm.getStats().incReplyMessageTime(NanoTimer.getTime() - startTime);}  }
class C{  public void uninstallUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);  }}  }
class C{  public static void notifyLoadedNeighborsOfTileChange(World world,Coord4D coord){  for (  ForgeDirection dir : ForgeDirection.VALID_DIRECTIONS) {    Coord4D offset=coord.getFromSide(dir);    if (offset.exists(world)) {      Block block1=offset.getBlock(world);      block1.onNeighborChange(world,offset.xCoord,offset.yCoord,offset.zCoord,coord.xCoord,coord.yCoord,coord.zCoord);      if (block1.isNormalCube(world,offset.xCoord,offset.yCoord,offset.zCoord)) {        offset=offset.getFromSide(dir);        if (offset.exists(world)) {          block1=offset.getBlock(world);          if (block1.getWeakChanges(world,offset.xCoord,offset.yCoord,offset.zCoord)) {            block1.onNeighborChange(world,offset.xCoord,offset.yCoord,offset.zCoord,coord.xCoord,coord.yCoord,coord.zCoord);          }        }      }    }  }}  }
class C{  public void load(Resources res){  getMetrics(res);  this.drawable=res.getDrawable(resId);  this.width=drawable.getIntrinsicWidth();  this.height=drawable.getIntrinsicHeight();  float cx, cy, sx, sy;  if (firstLoad) {    cx=SCREEN_MARGIN + (float)(Math.random() * (displayWidth - 2 * SCREEN_MARGIN));    cy=SCREEN_MARGIN + (float)(Math.random() * (displayHeight - 2 * SCREEN_MARGIN));    float sc=(float)(Math.max(displayWidth,displayHeight) / (float)Math.max(width,height) * Math.random() * 0.3 + 0.2);    sx=sy=sc;    firstLoad=false;  } else {    cx=this.centerX;    cy=this.centerY;    sx=this.scaleX;    sy=this.scaleY;    if (this.maxX < SCREEN_MARGIN)     cx=SCREEN_MARGIN; else     if (this.minX > displayWidth - SCREEN_MARGIN)     cx=displayWidth - SCREEN_MARGIN;    if (this.maxY > SCREEN_MARGIN)     cy=SCREEN_MARGIN; else     if (this.minY > displayHeight - SCREEN_MARGIN)     cy=displayHeight - SCREEN_MARGIN;  }  setPos(cx,cy,sx,sy,0.0f);}  }
class C{  public boolean isConnected(){  return connected;}  }
class C{  public static void saveDisplaySize(Activity activity){  DisplayMetrics displaymetrics=new DisplayMetrics();  activity.getWindowManager().getDefaultDisplay().getMetrics(displaymetrics);  Editor editor=getPreferences().edit();  editor.putInt("screen_width",displaymetrics.widthPixels);  editor.putInt("screen_height",displaymetrics.heightPixels);  editor.putFloat("density",displaymetrics.density);  apply(editor);  TLog.log("","Resolution:" + displaymetrics.widthPixels + " x "+ displaymetrics.heightPixels+ " DisplayMetrics:"+ displaymetrics.density+ " "+ displaymetrics.densityDpi);}  }
class C{  public StepPattern(int whatToShow,int axis,int axisForPredicate){  super(whatToShow);  m_axis=axis;}  }
class C{  protected void handleEmptyTag(TagElement tag) throws ChangedCharSetException {  Element elem=tag.getElement();  if (elem == dtd.meta && !ignoreCharSet) {    SimpleAttributeSet atts=getAttributes();    if (atts != null) {      String content=(String)atts.getAttribute(HTML.Attribute.CONTENT);      if (content != null) {        if ("content-type".equalsIgnoreCase((String)atts.getAttribute(HTML.Attribute.HTTPEQUIV))) {          if (!content.equalsIgnoreCase("text/html") && !content.equalsIgnoreCase("text/plain")) {            throw new ChangedCharSetException(content,false);          }        } else         if ("charset".equalsIgnoreCase((String)atts.getAttribute(HTML.Attribute.HTTPEQUIV))) {          throw new ChangedCharSetException(content,true);        }      }    }  }  if (inbody != 0 || elem == dtd.meta || elem == dtd.base || elem == dtd.isindex || elem == dtd.style || elem == dtd.link) {    if (debugFlag) {      if (tag.fictional()) {        debug("Empty Tag: " + tag.getHTMLTag() + " pos: "+ getCurrentPos());      } else {        debug("Empty Tag: " + tag.getHTMLTag() + " attributes: "+ getAttributes()+ " pos: "+ getCurrentPos());      }    }    if (tag.fictional()) {      SimpleAttributeSet attrs=new SimpleAttributeSet();      attrs.addAttribute(HTMLEditorKit.ParserCallback.IMPLIED,Boolean.TRUE);      callback.handleSimpleTag(tag.getHTMLTag(),attrs,getBlockStartPosition());    } else {      callback.handleSimpleTag(tag.getHTMLTag(),getAttributes(),getBlockStartPosition());      flushAttributes();    }  }}  }
class C{  public DifferentialEvolution(double CR,double F){  this.CR=CR;  this.F=F;}  }
class C{  private double inBorderHorizontal(double width,double x){  return Math.min(gridElement.getRectangle().getWidth() - x - 1,width);}  }
class C{  public static boolean isSiteLicensed(FunctionalAPIImpl impl) throws Exception {  try {    AccountState accountState=impl.getAccountState();    List<LicenseState> licenseStates=accountState.getLicensesStates();    for (    LicenseState licenseState : licenseStates) {      if (licenseState.getLicenseStatus().equals(LicenseStatus.ACTIVE)) {        logger.info("Found an active license");        return true;      }    }    logger.error("RecoverPoint licenses do not exist, are invalid, or have expired.  Check your RP configuration");  } catch (  FunctionalAPIActionFailedException_Exception e) {    return false;  }catch (  FunctionalAPIInternalError_Exception e) {    ;    return false;  }catch (  Exception f) {    throw f;  }  return false;}  }
class C{  public BitField(int size){  bits=new int[(((size) - 1) >>> 0x5) + 1];}  }
class C{  public boolean checkRewritableLength(int length){  return !(checkPacketLength && ((!useCompression && buffer.position() + length >= maxAllowedPacket) || (useCompression && buffer.position() + length + 4 >= maxAllowedPacket)));}  }
class C{  private void init(Context context,AttributeSet attrs,int defStyle){  paint=new Paint();  paint.setAntiAlias(true);  paintBorder=new Paint();  paintBorder.setAntiAlias(true);  paintSelectorBorder=new Paint();  paintSelectorBorder.setAntiAlias(true);  TypedArray attributes=context.obtainStyledAttributes(attrs,R.styleable.CircularImageView,defStyle,0);  hasBorder=attributes.getBoolean(R.styleable.CircularImageView_border,false);  hasSelector=attributes.getBoolean(R.styleable.CircularImageView_selector,false);  if (hasBorder) {    int defaultBorderSize=(int)(2 * context.getResources().getDisplayMetrics().density + 0.5f);    setBorderWidth(attributes.getDimensionPixelOffset(R.styleable.CircularImageView_border_width,defaultBorderSize));    setBorderColor(attributes.getColor(R.styleable.CircularImageView_border_color,Color.WHITE));  }  if (hasSelector) {    int defaultSelectorSize=(int)(2 * context.getResources().getDisplayMetrics().density + 0.5f);    setSelectorColor(attributes.getColor(R.styleable.CircularImageView_selector_color,Color.TRANSPARENT));    setSelectorStrokeWidth(attributes.getDimensionPixelOffset(R.styleable.CircularImageView_selector_stroke_width,defaultSelectorSize));    setSelectorStrokeColor(attributes.getColor(R.styleable.CircularImageView_selector_stroke_color,Color.BLUE));  }  if (attributes.getBoolean(R.styleable.CircularImageView_shadow,false))   addShadow();  attributes.recycle();}  }
class C{  @Override protected void stopService(){  Thread t=keepAliveThread;  keepAliveThread=null;  if (t != null) {    t.interrupt();  }}  }
class C{  public static Vector2 add(Vector2 a,Vector2 b){  return new Vector2(a.getX() + b.getX(),a.getY() + b.getY());}  }
class C{  public static boolean isGzipEncoding(@Nullable final String encodingType){  return CONTENT_ENCODING_GZIP.equalsIgnoreCase(encodingType);}  }
class C{  @Override public void write(char cbuf[],int off,int len) throws IOException {  int end=off + len;  for (int i=off; i < end; i++) {switch (cbuf[i]) {case '\r':      out.write(cbuf,off,i - off);    off=i + 1;  out.write(lineSeparator);skipLF=true;break;case '\n':out.write(cbuf,off,i - off);off=i + 1;if (skipLF) {skipLF=false;} else {out.write(lineSeparator);}break;default :skipLF=false;break;}}if (off < end) out.write(cbuf,off,end - off);}  }
class C{  public AxMessage(){  _parameters=new ParameterList();  if (DEBUG)   _log.debug("Created empty AXMessage.");}  }
class C{  public SQLNonTransientConnectionException(String reason,String SQLState,Throwable cause){  super(reason,SQLState,cause);}  }
class C{  public void addSound(String soundName){  if (manager.containSound(soundName)) {    musicList.add(soundName);  }}  }
class C{  public static Vector3f interpolateTriangle(float v0X,float v0Y,float f0X,float f0Y,float f0Z,float v1X,float v1Y,float f1X,float f1Y,float f1Z,float v2X,float v2Y,float f2X,float f2Y,float f2Z,float x,float y,Vector3f dest){  Vector3f t=dest;  interpolationFactorsTriangle(v0X,v0Y,v1X,v1Y,v2X,v2Y,x,y,t);  return dest.set(t.x * f0X + t.y * f1X + t.z * f2X,t.x * f0Y + t.y * f1Y + t.z * f2Y,t.x * f0Z + t.y * f1Z + t.z * f2Z);}  }
class C{  private void fetchPage(String page,int expectedCode) throws Exception {  URL url=new URL("http","127.0.0.1",port,page);  Response response=null;  response=http.getResponse(url,new CrawlDatum(),true);  int code=response.getCode();  assertEquals("HTTP Status Code for " + url,expectedCode,code);}  }
class C{  @Override public Instance generateExample() throws Exception {  Random random=getRandom();  Instances format=getDatasetFormat();  if (format == null) {    throw new Exception("Dataset format not defined.");  }  if (getVoteFlag()) {    throw new Exception("Examples cannot be generated one by one.");  }  format=generateExamples(1,random,format);  return format.lastInstance();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println("Progress: " + progress + "%");  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static TrimmedInput trim(final String input){  return trim(input,true);}  }
class C{  public Object remove(String name){  return nameValuePairs.remove(name);}  }
class C{  public DistanceEntry(E entry,double distance,int index){  this.entry=entry;  this.distance=distance;  this.index=index;}  }
class C{  private static boolean isDeleteKeyChord(KeyEvent event){  int keyCode=event.getKeyCode();  return (keyCode == KeyEvent.KEYCODE_DEL || keyCode == KeyEvent.KEYCODE_FORWARD_DEL) && event.hasModifiers(KeyEvent.META_CTRL_ON);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:52.198 -0500",hash_original_method="250AC6C55784C8683EA0BB5B2A91C5D9",hash_generated_method="94BA76524584CC3AD690F6D01F6464CF") public static BigInteger toBigIntegerValue(Object decoded){  return new BigInteger((byte[])decoded);}  }
class C{  public double optDouble(String key){  return this.optDouble(key,Double.NaN);}  }
class C{  public void addDict(int cp,int label,int count){  Element elem=(Element)dict.get(new Integer(cp));  if (elem == null) {    elem=new Element();    elem.count=count;    CountFIdx cntFIdx=new CountFIdx(count,-1);    elem.lbCntFidxes.put(new Integer(label),cntFIdx);    dict.put(new Integer(cp),elem);  } else {    elem.count+=count;    CountFIdx cntFIdx=(CountFIdx)elem.lbCntFidxes.get(new Integer(label));    if (cntFIdx == null) {      cntFIdx=new CountFIdx(count,-1);      elem.lbCntFidxes.put(new Integer(label),cntFIdx);    } else {      cntFIdx.count+=count;    }  }}  }
class C{  public FormattedAddress(String value){  this();  setValue(value);}  }
class C{  protected Anonymous_genExpr_2_Impl(){  super();}  }
class C{  void populate(Session s) throws NoResponseException, NotSuspendedException, NotConnectedException {  if (!m_populated) {    PlayerSession ses=((PlayerSession)s);    ses.requestFrame(m_depth,m_isolateId);    m_populated=true;  }}  }
class C{  public SectionExtractor(SimpleWikiConfiguration config){  this.config=config;}  }
class C{  @Override public synchronized void put(String key,Entry entry){  pruneIfNeeded(entry.data.length);  File file=getFileForKey(key);  try {    BufferedOutputStream fos=new BufferedOutputStream(new FileOutputStream(file));    CacheHeader e=new CacheHeader(key,entry);    boolean success=e.writeHeader(fos);    if (!success) {      fos.close();      VolleyLog.d("Failed to write header for %s",file.getAbsolutePath());      throw new IOException();    }    fos.write(entry.data);    fos.close();    putEntry(key,e);    return;  } catch (  IOException e) {  }  boolean deleted=file.delete();  if (!deleted) {    VolleyLog.d("Could not clean up file %s",file.getAbsolutePath());  }}  }
class C{  public HGAtomRefusedException(Object atom,Object reason){  super("Addition of new hypergraph atom failed because.");  this.atom=atom;  this.reason=reason;}  }
class C{  public BeanPropertyRowMapper(){}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  double slope;  double z, z2;  int i, a;  double dist;  double gridRes;  double diagGridRes;  double maxSlope;  double flowDir=0;  double e0;  double af;  double ac;  double e1, r, s1, s2, s, e2;  int[] acVals=new int[]{0,1,1,2,2,3,3,4};  int[] afVals=new int[]{1,-1,1,-1,1,-1,1,-1};  int[] e1Col=new int[]{1,0,0,-1,-1,0,0,1};  int[] e1Row=new int[]{0,-1,-1,0,0,1,1,0};  int[] e2Col=new int[]{1,1,-1,-1,-1,-1,1,1};  int[] e2Row=new int[]{-1,-1,-1,-1,1,1,1,1};  double atanof1=Math.atan(1);  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    gridRes=DEM.getCellSizeX();    diagGridRes=gridRes * Math.sqrt(2);    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("circular_bw.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    output.setZUnits("degrees");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        e0=DEM.getValue(row,col);        if (e0 != noData) {          maxSlope=-9999999;          flowDir=360;          for (a=0; a < 8; a++) {            ac=acVals[a];            af=afVals[a];            e1=DEM.getValue(row + e1Row[a],col + e1Col[a]);            e2=DEM.getValue(row + e2Row[a],col + e2Col[a]);            if (e1 != noData && e2 != noData) {              if (e0 > e1 && e0 > e2) {                s1=(e0 - e1) / gridRes;                if (s1 == 0) {                  s1=0.00001;                }                s2=(e1 - e2) / gridRes;                r=Math.atan(s2 / s1);                s=Math.sqrt(s1 * s1 + s2 * s2);                if (s1 < 0 && s2 < 0) {                  s=-1 * s;                }                if (s1 < 0 && s2 == 0) {                  s=-1 * s;                }                if (s1 == 0 && s2 < 0) {                  s=-1 * s;                }                if (s1 == 0.001 && s2 < 0) {                  s=-1 * s;                }                if (r < 0 || r > atanof1) {                  if (r < 0) {                    r=0;                    s=s1;                  } else {                    r=atanof1;                    s=(e0 - e2) / diagGridRes;                  }                }                if (s >= maxSlope && s != 0.00001) {                  maxSlope=s;                  flowDir=af * r + ac * (Math.PI / 2);                }              } else               if (e0 > e1 || e0 > e2) {                if (e0 > e1) {                  r=0;                  s=(e0 - e1) / gridRes;                } else {                  r=atanof1;                  s=(e0 - e2) / diagGridRes;                }                if (s >= maxSlope && s != 0.00001) {                  maxSlope=s;                  flowDir=af * r + ac * (Math.PI / 2);                }              }            }          }          if (maxSlope <= 0) {            output.setValue(row,col,-1);          } else {            flowDir=Math.round((flowDir * (180 / Math.PI)) * 10) / 10;            flowDir=360 - flowDir + 90;            if (flowDir > 360) {              flowDir=flowDir - 360;            }            output.setValue(row,col,flowDir);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private boolean isLocationVisible(Location location){  if (location == null || googleMap == null) {    return false;  }  LatLng latLng=new LatLng(location.getLatitude(),location.getLongitude());  return googleMap.getProjection().getVisibleRegion().latLngBounds.contains(latLng);}  }
class C{  public boolean isAccessPolicyConfig(){  return accessPolicyConfig;}  }
class C{  @Override public void generateAtom(com.google.gdata.util.common.xml.XmlWriter w,com.google.gdata.data.ExtensionProfile extProfile) throws java.io.IOException {  if (isKmlDefault) {    w.setDefaultNamespace(DataConstants.KML_NAMESPACE);  }  super.generateAtom(w,extProfile);}  }
class C{  private void updateStateViewLater(Metrics metrics){  stateViewCtrl.update();  if (metrics != null)   simPaneCtrl.setStatus(metrics.toString());}  }
class C{  private void validityCheck(){  if (m_row == -1) {    throw new IllegalStateException("This tuple is no longer valid. " + "It has been deleted from its table");  }}  }
class C{  public static void nextBytes(byte[] bs){synchronized (random) {    random.nextBytes(bs);  }}  }
class C{  public static double[][] insertRows(double[][] x,int I,double[]... y){  double[][] array=new double[x.length + y.length][x[0].length];  for (int i=0; i < I; i++)   System.arraycopy(x[i],0,array[i],0,x[i].length);  for (int i=0; i < y.length; i++)   System.arraycopy(y[i],0,array[i + I],0,y[i].length);  for (int i=0; i < x.length - I; i++)   System.arraycopy(x[i + I],0,array[i + I + y.length],0,x[i].length);  return array;}  }
class C{  public void merge_contents(){  if (contents.length == 0)   return;  Arrays.sort(contents);  List<SourceCallChainInfo> unique_calls=new ArrayList<SourceCallChainInfo>();  unique_calls.add(contents[0]);  for (int ii=1; ii < contents.length; ii++) {    SourceCallChainInfo top=unique_calls.get(unique_calls.size() - 1);    if (contents[ii].method == top.method)     top.merge(contents[ii]); else     unique_calls.add(contents[ii]);  }  logger.info("merge_contents {}: old {} elems, new {} elems",method,contents.length,unique_calls.size());  contents=unique_calls.toArray(new SourceCallChainInfo[0]);}  }
class C{  public void computeAxis(float yMin,float yMax){  if (mViewPortHandler.contentWidth() > 10 && !mViewPortHandler.isFullyZoomedOutY()) {    PointD p1=mTrans.getValuesByTouchPoint(mViewPortHandler.contentLeft(),mViewPortHandler.contentTop());    PointD p2=mTrans.getValuesByTouchPoint(mViewPortHandler.contentLeft(),mViewPortHandler.contentBottom());    if (!mYAxis.isInverted()) {      yMin=(float)p2.y;      yMax=(float)p1.y;    } else {      yMin=(float)p1.y;      yMax=(float)p2.y;    }  }  computeAxisValues(yMin,yMax);}  }
class C{  private static void killCurrentProcess(){  android.os.Process.killProcess(android.os.Process.myPid());  System.exit(10);}  }
class C{  private void nonContextualShape(char[] text,int start,int count){  char maxDigit=(char)0x0039;  char minDigit=(char)((fRanges == ETHIOPIC) ? 0x0031 : 0x0030);  for (int ind=start; ind < start + count; ind++) {    if (minDigit <= text[ind] && text[ind] <= maxDigit) {      text[ind]=(char)(digitsLowRanges[fSingleRangeIndex] + text[ind]);    }  }}  }
class C{  public DefaultApiClient(String apiUrl,String consumerKey,String consumerSecret,Integer readTimeout){  setupService(apiUrl,null,consumerKey,consumerSecret,readTimeout);}  }
class C{  public static <E extends Comparable<E>>E max(E[] list){  E max=list[0];  for (int i=1; i < list.length; i++) {    if (list[i].compareTo(max) > 0)     max=list[i];  }  return max;}  }
class C{  private void validatePortAssignment(StorageSystem storageSystem,URI varray,BlockStorageScheduler blockScheduler,List<Initiator> initiators,Collection<URI> volumes,URI exportGroupURI,ExportPathParameters exportPathParameters){  try {    ExportPathParams pathParams=blockScheduler.calculateExportPathParamForVolumes(volumes,0,storageSystem.getId(),exportGroupURI);    if (exportPathParameters != null) {      if (exportPathParameters.getMaxPaths() != null) {        pathParams.setMaxPaths(exportPathParameters.getMaxPaths());      }      if (exportPathParameters.getMinPaths() != null) {        pathParams.setMinPaths(exportPathParameters.getMinPaths());      }      if (exportPathParameters.getPathsPerInitiator() != null) {        pathParams.setPathsPerInitiator(exportPathParameters.getPathsPerInitiator());      }    }    blockScheduler.assignStoragePorts(storageSystem,varray,initiators,pathParams,null,volumes);  } catch (  ControllerException ex) {    _log.error(ex.getLocalizedMessage());    throw (ex);  }}  }
class C{  public Status acknowledgeMessageArrival(String clientHandle,String id){  if (messageStore.discardArrived(clientHandle,id)) {    return Status.OK;  } else {    return Status.ERROR;  }}  }
class C{  public static void checkFieldValidIP(final String ip,final String fieldName){  checkFieldNotEmpty(ip,fieldName);  if (!isValidIPV4(ip) && !isValidIPV6(ip)) {    throw APIException.badRequests.invalidParameterInvalidIP(fieldName,ip);  }}  }
class C{  public synchronized RVMMethod resolve(){  if (resolvedMember != null)   return resolvedMember;  return resolveInternal((RVMClass)type.resolve());}  }
class C{  public void notifySessionErrorOccurred(){  this.erroneous=true;}  }
class C{  public static Model createIncludesModel(Model model,String graphURI){  Set<Graph> graphs=new HashSet<Graph>();  Graph baseGraph=model.getGraph();  addIncludes(baseGraph,graphURI,graphs,new HashSet<String>());  if (graphs.size() == 1) {    return model;  } else {    MultiUnion union=new MultiUnion(graphs.iterator());    union.setBaseGraph(baseGraph);    return ModelFactory.createModelForGraph(union);  }}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public CharacterRunAutomaton(Automaton a,int maxDeterminizedStates){  super(a,Character.MAX_CODE_POINT,false,maxDeterminizedStates);}  }
class C{  private void jbInit() throws Exception {  this.setSize(new Dimension(400,300));}  }
class C{  public ConfigFileTestCase(String name){  super(name);}  }
class C{  @Procedure @PerformsWrites @Description("apoc.refactor.mergeNodes([node1,node2]) merge nodes onto first in list") public Stream<NodeResult> mergeNodes(@Name("nodes") List<Node> nodes){  if (nodes.isEmpty())   return Stream.empty();  Iterator<Node> it=nodes.iterator();  Node first=it.next();  while (it.hasNext()) {    Node other=it.next();    mergeNodes(other,first,true);  }  return Stream.of(new NodeResult(first));}  }
class C{  public void delete(){  database.removeListener(databaseListener);}  }
class C{  public DefaultConfigurationFactory(){  this(null);}  }
class C{  public ChatMessage sendMessage(String message) throws RcsPersistentStorageException, RcsGenericException {  try {    return new ChatMessage(mOneToOneChatInf.sendMessage(message));  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    RcsPersistentStorageException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public static int parseIntegerArg(CommandLine line,String argName,int variable){  if (line.hasOption(argName)) {    int num=-1;    try {      num=Integer.parseInt(line.getOptionValue(argName));    } catch (    NumberFormatException e) {      System.err.println("Parsing failed.  Reason: " + e.getMessage());    }    if (num > 0) {      variable=num;    }    System.err.println("set " + argName + " to "+ variable);  }  return variable;}  }
class C{  public synchronized boolean isEnabled(){  return enabled;}  }
class C{  public static Method resolveMethod(Class declaringClass,String methodName,Class[] paramTypes,boolean allowInstance,boolean[] allowEventBeanType,boolean[] allowEventBeanCollType) throws EngineNoSuchMethodException {  Method[] methods=declaringClass.getMethods();  Method bestMatch=null;  int bestConversionCount=-1;  Method conversionFailedMethod=null;  for (  Method method : methods) {    if (!isPublicAndStatic(method,allowInstance)) {      continue;    }    if (!method.getName().equals(methodName)) {      continue;    }    int conversionCount=compareParameterTypesAllowContext(method.getParameterTypes(),paramTypes,allowEventBeanType,allowEventBeanCollType,method.getGenericParameterTypes(),method.isVarArgs());    if (conversionCount == -1) {      conversionFailedMethod=method;      continue;    }    if (conversionCount == 0) {      bestMatch=method;      break;    }    if (bestMatch == null) {      bestMatch=method;      bestConversionCount=conversionCount;    } else {      if (conversionCount < bestConversionCount) {        bestMatch=method;        bestConversionCount=conversionCount;      }    }  }  if (bestMatch != null) {    logWarnBoxedToPrimitiveType(declaringClass,methodName,bestMatch,paramTypes);    return bestMatch;  }  StringBuilder parameters=new StringBuilder();  if (paramTypes != null && paramTypes.length != 0) {    String appendString="";    for (    Object param : paramTypes) {      parameters.append(appendString);      if (param == null) {        parameters.append("(null)");      } else {        parameters.append(param.toString());      }      appendString=", ";    }  }  throw new EngineNoSuchMethodException("Unknown method " + declaringClass.getSimpleName() + '.'+ methodName+ '('+ parameters+ ')',conversionFailedMethod);}  }
class C{  static <E>E checkType(E obj,Class<? extends E> type){  if (obj != null && !type.isInstance(obj)) {    throw new IndexOutOfBoundsException("" + obj.getClass().getName() + " type: "+ type);  }  return obj;}  }
class C{  private static TemplateVariable[] copy(TemplateVariable[] array){  if (array != null) {    TemplateVariable[] copy=new TemplateVariable[array.length];    System.arraycopy(array,0,copy,0,array.length);    return copy;  }  return null;}  }
class C{  public void saveToXmlFile() throws TransformerFactoryConfigurationError, TransformerException {  Transformer transformer=TransformerFactory.newInstance().newTransformer();  DOMSource source=new DOMSource(this._serverConfigDoc);  StreamResult targetStreamResult=new StreamResult(this._serverConfigFile);  transformer.setOutputProperty(OutputKeys.INDENT,"yes");  transformer.transform(source,targetStreamResult);}  }
class C{  private static String stackTrace(){  StringWriter sw=new StringWriter();  new Throwable().printStackTrace(new PrintWriter(sw));  return sw.toString();}  }
class C{  void bindTo(DynamicPropertyChainListener<T> l){  this.propertyChainListener=Optional.of(new PropertyChangeEventDispatcher(l));  this.propertyChainListener.ifPresent(null);}  }
class C{  public void checkConsistency(){  for (  ConfigGroup m : this.modules.values()) {    m.checkConsistency();  }  for (  ConfigConsistencyChecker c : this.consistencyCheckers) {    c.checkConsistency(this);  }}  }
class C{  @Override public void process(final DM dm,final ReplyProcessor21 processor){  final long startTime=getTimestamp();  if (logger.isTraceEnabled(LogMarker.DM)) {    logger.trace(LogMarker.DM,"{}: process invoking reply processor with processorId: {}",this.processorId);  }  if (processor == null) {    if (logger.isTraceEnabled(LogMarker.DM)) {      logger.trace(LogMarker.DM,"{} processor not found",getClass().getName());    }    return;  }  processor.process(this);  if (logger.isTraceEnabled(LogMarker.DM)) {    logger.trace(LogMarker.DM,"{} processed {}",getClass().getName(),this);  }  dm.getStats().incReplyMessageTime(DistributionStats.getStatTime() - startTime);}  }
class C{  protected void entryEvicted(K key,V value){}  }
class C{  public TextEditorPane(int textMode,boolean wordWrapEnabled,FileLocation loc,String defaultEnc) throws IOException {  super(textMode);  setLineWrap(wordWrapEnabled);  init(loc,defaultEnc);}  }
class C{  void remove(String hexCoords){  if (StringUtil.isNullOrEmpty(hexCoords)) {    return;  }  Set<Key> keySet=new HashSet<>(cache.keySet());  for (  Key key : keySet) {    if (key.getHexCoords().equals(hexCoords)) {      remove(key);    }  }}  }
class C{  public void scheduleJobForEvaluation(final EvolutionState state,Job job){  if (isShutdownInProgress())   return;  SlaveConnection result=null;synchronized (availableSlaves) {    while (true) {      if (!availableSlaves.isEmpty()) {        result=(SlaveConnection)(availableSlaves.removeFirst());        break;      }      debug("Waiting for an available slave.");      waitOnMonitor(availableSlaves);    }    notifyMonitor(availableSlaves);  }  debug("Got a slave available for work.");  result.scheduleJob(job);  if (result.numJobs() < maxJobsPerSlave) {synchronized (availableSlaves) {      if (!availableSlaves.contains(result))       availableSlaves.addLast(result);      notifyMonitor(availableSlaves);    }  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  double slope;  double z, z2;  int c, i;  int progress;  int[] dY={-1,0,1,1,1,0,-1,-1};  int[] dX={1,1,1,0,-1,-1,-1,0};  int row, col, x, y;  double dist;  double maxSlope=0;  double maxZChange=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    DEM.isReflectedAtEdges=true;    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    double gridResX=DEM.getCellSizeX();    double gridResY=DEM.getCellSizeY();    double diagGridRes=Math.sqrt(gridResX * gridResX + gridResY * gridResY);    double[] gridLengths=new double[]{diagGridRes,gridResX,diagGridRes,gridResY,diagGridRes,gridResX,diagGridRes,gridResY};    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("spectrum.pal");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          maxSlope=-99999999;          for (c=0; c < 8; c++) {            x=col + dX[c];            y=row + dY[c];            dist=gridLengths[c];            z2=DEM.getValue(y,x);            if (z2 != noData) {              slope=(z - z2) / dist;              if (slope > maxSlope) {                maxSlope=slope;                maxZChange=z - z2;              }            }          }          if (maxSlope > 0) {            output.setValue(row,col,maxZChange);          } else {            output.setValue(row,col,0);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public mxPartitionLayout(mxGraph graph,boolean horizontal,int spacing,int border){  super(graph);  this.horizontal=horizontal;  this.spacing=spacing;  this.border=border;}  }
class C{  protected Float wrap(float k){  return new Float(k);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof CombinedDomainCategoryPlot)) {    return false;  }  CombinedDomainCategoryPlot that=(CombinedDomainCategoryPlot)obj;  if (this.gap != that.gap) {    return false;  }  if (!ObjectUtilities.equal(this.subplots,that.subplots)) {    return false;  }  return super.equals(obj);}  }
class C{  public static void closeReaders(SequenceFile.Reader[] readers) throws IOException {  if (readers != null) {    for (int i=0; i < readers.length; i++) {      SequenceFile.Reader reader=readers[i];      if (reader != null) {        reader.close();      }    }  }}  }
class C{  @HLEFunction(nid=0x32B156B3,version=150) public int sceNetAdhocMatchingStop(@CheckArgument("checkMatchingId") int matchingId){  return matchingObjects.get(matchingId).stop();}  }
class C{  private static long CallLongMethodA(JNIEnvironment env,int objJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: CallLongMethodA  \n");  Object returnObj=JNIGenericHelpers.callMethodJValuePtr(env,objJREF,methodID,argAddress,TypeReference.Long,false);  return Reflection.unwrapLong(returnObj);}  }
class C{  public boolean onCooldown(){  return getCooldownExpiration() >= System.currentTimeMillis();}  }
class C{  protected void onGoodbye(final RPEntity attending2){}  }
class C{  public boolean redo(){  return model.redo();}  }
class C{  public final void testNotNullWithContextAndResourceIdParameters(){  assertNotNull(Validators.notNull(getContext(),android.R.string.cancel));}  }
class C{  public static Translate createTranslateService(){  TranslateOptions translateOption=TranslateOptions.builder().retryParams(retryParams()).connectTimeout(60000).readTimeout(60000).build();  return translateOption.service();}  }
class C{  public void clearLearnedTable(IOFSwitch sw){  Map<MacVlanPair,Short> swMap=macVlanToSwitchPortMap.get(sw);  if (swMap != null)   swMap.clear();}  }
class C{  public THashSet(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);}  }
class C{  public void addNodeValue(int nTargetNode,String sNewValue){  if (m_bNeedsUndoAction) {    addUndoAction(new AddValueAction(nTargetNode,sNewValue));  }  Attribute att=m_Instances.attribute(nTargetNode);  int nCardinality=att.numValues();  ArrayList<String> values=new ArrayList<String>(nCardinality);  for (int iValue=0; iValue < nCardinality; iValue++) {    values.add(att.value(iValue));  }  values.add(sNewValue);  replaceAtt(nTargetNode,att.name(),values);  Estimator[] distributions=m_Distributions[nTargetNode];  int nNewCard=values.size();  for (int iParent=0; iParent < distributions.length; iParent++) {    DiscreteEstimatorBayes distribution=new DiscreteEstimatorBayes(nNewCard,0);    for (int iValue=0; iValue < nNewCard - 1; iValue++) {      distribution.addValue(iValue,distributions[iParent].getProbability(iValue));    }    distributions[iParent]=distribution;  }  for (int iNode=0; iNode < getNrOfNodes(); iNode++) {    if (m_ParentSets[iNode].contains(nTargetNode)) {      distributions=m_Distributions[iNode];      ParentSet parentSet=m_ParentSets[iNode];      int nParentCard=parentSet.getFreshCardinalityOfParents(m_Instances);      Estimator[] newDistributions=new Estimator[nParentCard];      int nCard=getCardinality(iNode);      int nParents=parentSet.getNrOfParents();      int[] values2=new int[nParents];      int iOldPos=0;      int iTargetNode=0;      while (parentSet.getParent(iTargetNode) != nTargetNode) {        iTargetNode++;      }      for (int iPos=0; iPos < nParentCard; iPos++) {        DiscreteEstimatorBayes distribution=new DiscreteEstimatorBayes(nCard,0);        for (int iValue=0; iValue < nCard; iValue++) {          distribution.addValue(iValue,distributions[iOldPos].getProbability(iValue));        }        newDistributions[iPos]=distribution;        int i=0;        values2[i]++;        while (i < nParents && values2[i] == getCardinality(parentSet.getParent(i))) {          values2[i]=0;          i++;          if (i < nParents) {            values2[i]++;          }        }        if (values2[iTargetNode] != nNewCard - 1) {          iOldPos++;        }      }      m_Distributions[iNode]=newDistributions;    }  }}  }
class C{  public static NewCookie valueOf(String value){  return NewCookieHeaderParser.fromString(value);}  }
class C{  public IpcSharedMemoryOperationTimedoutException(Throwable cause){  super(cause);}  }
class C{  public static URL findClassBase(Class<?> clazz){  String resource=clazz.getName().replace('.','/') + ".class";  return findResourceBase(resource,clazz.getClassLoader());}  }
class C{  public TextInputFormat(TextHolderFigure prototype){  this(prototype,"Text","Text","txt",false);}  }
class C{  public static void exit(int status){  return;}  }
class C{  protected void submit(T tuple){  getDestination().accept(tuple);}  }
class C{  public static EWMA fiveMinuteEWMA(){  return new EWMA(M5_ALPHA,INTERVAL,TimeUnit.SECONDS);}  }
class C{  public boolean hasSourceExperimentId(){  return hasExtension(GwoSourceExperimentId.class);}  }
class C{  public void name(String name){  this.name=Objects.requireNonNull(name);}  }
class C{  @Override protected ShardsIterator shards(ClusterState clusterState,UpgradeStatusRequest request,String[] concreteIndices){  return clusterState.routingTable().allShards(concreteIndices);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:44.423 -0500",hash_original_method="EA220D62FFC852C05CF541823875A478",hash_generated_method="30087C250C46D1144814359A1F09C756") static public void assertNotNull(Object object){  assertNotNull(null,object);}  }
class C{  @RequestMapping(value="/{id}/body") public ModelAndView proteinBody(@PathVariable String id){  return new ModelAndView("protein-structure-body",buildModelMap(retrieve(id),false));}  }
class C{  public boolean containsAttributes(AttributeSet attrs){  boolean result=true;  Enumeration names=attrs.getAttributeNames();  while (result && names.hasMoreElements()) {    Object name=names.nextElement();    result=attrs.getAttribute(name).equals(getAttribute(name));  }  return result;}  }
class C{  public void rollbackCommitMigration(List<URI> migrationURIs,URI newVpoolURI,URI newVarrayURI,String commitStepId,String stepId) throws WorkflowException {  WorkflowStepCompleter.stepExecuting(stepId);  try {    boolean migrationCommitted=false;    Iterator<URI> migrationIter=migrationURIs.iterator();    while (migrationIter.hasNext()) {      URI migrationURI=migrationIter.next();      Migration migration=_dbClient.queryObject(Migration.class,migrationURI);      Volume volume=_dbClient.queryObject(Volume.class,migration.getVolume());      if (VPlexMigrationInfo.MigrationStatus.COMMITTED.getStatusValue().equals(migration.getMigrationStatus())) {        migrationCommitted=true;        updateMigratedVirtualVolumeVpoolAndVarray(volume,newVpoolURI,newVarrayURI);        _dbClient.updateObject(volume);        inventoryDeleteMigrationSource(migration.getSource(),volume);        continue;      }      VPlexApiClient client=getVPlexAPIClient(_vplexApiFactory,volume.getStorageController(),_dbClient);      VPlexMigrationInfo migrationInfo=client.getMigrationInfo(migration.getLabel());      if (migrationInfo.getStatus().equalsIgnoreCase(VPlexMigrationInfo.MigrationStatus.COMMITTED.name())) {        migrationCommitted=true;        migration.setMigrationStatus(VPlexMigrationInfo.MigrationStatus.COMMITTED.name());        _dbClient.updateObject(migration);        associateVplexVolumeWithMigratedTarget(migration,migration.getVolume());        updateMigratedVirtualVolumeVpoolAndVarray(volume,newVpoolURI,newVarrayURI);        _dbClient.updateObject(volume);        inventoryDeleteMigrationSource(migration.getSource(),volume);        continue;      }    }    if (migrationCommitted) {      _log.info("Migration is committed, failing rollback");      _workflowService.setWorkflowRollbackContOnError(stepId,false);      ServiceError serviceError=VPlexApiException.errors.cantRollbackCommittedMigration();      WorkflowStepCompleter.stepFailed(stepId,serviceError);    } else {      _log.info("No Migrations are not committed");      WorkflowStepCompleter.stepSucceded(stepId);    }  } catch (  Exception e) {    _log.info("Exception determining commit rollback state",e);    _workflowService.setWorkflowRollbackContOnError(stepId,false);    ServiceError serviceError=VPlexApiException.errors.cantRollbackExceptionDeterminingCommitState(e);    WorkflowStepCompleter.stepFailed(stepId,serviceError);  }}  }
class C{  protected boolean isCompletelySuppressed(NodeSpec nodeSpec){  if (nodeSpec.getSuppression() == null) {    return false;  }switch (nodeSpec.getSuppression()) {case ENTITY_CONFIGURATION:    return true;case GENERATED_CODE:  return true;case GENERATED_CODE_SETTER:return false;default :throw new IllegalStateException("Missing case for SuppressionSpec " + nodeSpec.getSuppression());}}  }
class C{  public static float sin2(float fValue){  fValue=reduceSinAngle(fValue);  if (Math.abs(fValue) <= Math.PI / 4) {    return (float)Math.sin(fValue);  }  return (float)Math.cos(Math.PI / 2 - fValue);}  }
class C{  public void putAll(TungstenProperties props){  properties.putAll(props.map());}  }
class C{  @Override public Result decode(BinaryBitmap image) throws NotFoundException, ChecksumException, FormatException {  return decode(image,null);}  }
class C{  public ApiClient addDefaultHeader(String key,String value){  defaultHeaderMap.put(key,value);  return this;}  }
class C{  void releaseIn(){  inAcquireCnt--;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public void addPart(String key,String value){  addPart(key,value,"text/plain; charset=UTF-8");}  }
class C{  @Override public String toString(String field){  StringBuilder buffer=new StringBuilder();  buffer.append("(");  for (int i=0; i < disjuncts.length; i++) {    Query subquery=disjuncts[i];    if (subquery instanceof BooleanQuery) {      buffer.append("(");      buffer.append(subquery.toString(field));      buffer.append(")");    } else     buffer.append(subquery.toString(field));    if (i != disjuncts.length - 1)     buffer.append(" | ");  }  buffer.append(")");  if (tieBreakerMultiplier != 0.0f) {    buffer.append("~");    buffer.append(tieBreakerMultiplier);  }  return buffer.toString();}  }
class C{  public SearchResult current(){  return m_reducedResults.isEmpty() ? null : m_reducedResults.get(m_currentSearchIndex);}  }
class C{  public boolean hasEventListener(String namespaceURI){  if (namespaceURI == null) {    return n != 0;  }  return counts.get(namespaceURI) != 0;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  long stop=getLong(stack);  return Seeker.getInstance().getInterleavedScheduledAirings(getLong(stack),stop);}  }
class C{  @Override public Statement createStatement() throws SQLException {  try {    int id=getNextId(TraceObject.STATEMENT);    if (isDebugEnabled()) {      debugCodeAssign("Statement",TraceObject.STATEMENT,id,"createStatement()");    }    checkClosed();    return new JdbcStatement(this,id,ResultSet.TYPE_FORWARD_ONLY,Constants.DEFAULT_RESULT_SET_CONCURRENCY,false);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public boolean meetsCriteria(Criteria criteria){  return propertiesMeetCriteria(mName,mProperties,criteria);}  }
class C{  public void group(String mavenGroup,Action<AsMavenGroup> action){  Object previous=groups.put(mavenGroup,action);  if (previous != null) {    throw new IllegalArgumentException("Duplicate groups for " + mavenGroup);  }}  }
class C{  public CertPath engineGenerateCertPath(List certs) throws CertificateException {  ArrayList<Certificate> validCerts=new ArrayList<Certificate>();  for (Iterator i=certs.iterator(); i.hasNext(); ) {    Certificate c=(Certificate)i.next();    if (!(c instanceof X509Certificate)) {      throw new CertificateException("Not X509: " + c);    }    if (c instanceof TestInvalidX509Certificate) {      throw new CertificateException("Invalid (test) X509: " + c);    }    validCerts.add(c);  }  Certificate[] acerts=new Certificate[validCerts.size()];  validCerts.toArray(acerts);  return new TestCertPath(acerts);}  }
class C{  public static boolean nodeHasDeprecatedFlag(JCTree node){  if (node instanceof JCVariableDecl)   return (((JCVariableDecl)node).mods.flags & Flags.DEPRECATED) != 0;  if (node instanceof JCMethodDecl)   return (((JCMethodDecl)node).mods.flags & Flags.DEPRECATED) != 0;  if (node instanceof JCClassDecl)   return (((JCClassDecl)node).mods.flags & Flags.DEPRECATED) != 0;  return false;}  }
class C{  @Override public Iterator<E> iterator(){  return new PriorityIterator();}  }
class C{  public boolean allowsPrimaryPromotion(){  return true;}  }
class C{  @Override public boolean equals(Object o){  if (o instanceof ProgramInfo) {    ProgramInfo pi=(ProgramInfo)o;    return pi.id.equals(pi.id) && pi.name.equals(pi.name);  }  return super.equals(o);}  }
class C{  public boolean isPostImmediate(){  Object oo=get_Value(COLUMNNAME_IsPostImmediate);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void appendToLog(String s){  append("\n" + s);}  }
class C{  private IOUtils(){}  }
class C{  public FasRunner(Graph graph,Parameters params){  super(graph,params);}  }
class C{  protected List<WWTexture> fillImageList(Iterable<?> imageSources){  if (imageSources == null)   return null;  ArrayList<WWTexture> textures=new ArrayList<WWTexture>();  for (  Object source : imageSources) {    if (source != null)     textures.add(this.makeTexture(source)); else     textures.add(null);  }  textures.trimToSize();  return textures;}  }
class C{  @SuppressWarnings("unchecked") @Deprecated public static <T extends R,R>Collection<R> upcast(Collection<T> c){  A.notNull(c,"c");  return (Collection<R>)c;}  }
class C{  public void finishLine() throws IOException {  if (mLineFinished) {    mLineFinished=false;    return;  }  int i=0;  do {    for (; i < mTail; i++) {      if (mBuffer[i] == '\n') {        consumeBuf(i + 1);        return;      }    }  } while (fillBuf() > 0);  throw new ProtocolException("End of stream while looking for line boundary");}  }
class C{  private void constructNotesPanel(){  secondRowPanelNotes=new JPanel(new BorderLayout());  UIUtil.createTitle(secondRowPanelNotes,language.getText("notesTask"));  noteAreaNotes=new JTextArea(8,40);  noteAreaNotes.setLineWrap(true);  noteAreaNotes.setWrapStyleWord(true);  noteAreaNotes.setBackground(new Color(1.0f,1.0f,1.0f));  scrollPaneNotes=new JScrollPane(noteAreaNotes);  secondRowPanelNotes.add(scrollPaneNotes,BorderLayout.CENTER);  notesPanel=secondRowPanelNotes;}  }
class C{  protected void removeTag(short tagId){  mExifTags.remove(tagId);}  }
class C{  private static int calcN(TBigInteger a){  long m0=a.digits[0] & 0xFFFFFFFFL;  long n2=1L;  long powerOfTwo=2L;  do {    if (((m0 * n2) & powerOfTwo) != 0) {      n2|=powerOfTwo;    }    powerOfTwo<<=1;  } while (powerOfTwo < 0x100000000L);  n2=-n2;  return (int)(n2 & 0xFFFFFFFFL);}  }
class C{  public static CommandContext withEnvironment(CommandEnvironment environment){  return builder().environment(environment).build();}  }
class C{  protected String[] createUserFlags(){  return null;}  }
class C{  private void spawnPeriodicStatsService(){  try {    this.reportTestCase.host.waitForServiceAvailable(JVMStatsFactoryService.SELF_LINK);  } catch (  Throwable throwable) {    this.reportTestCase.host.log(Level.INFO,throwable.toString());    throwable.printStackTrace();  }  JVMStats instanceStats=new JVMStats();  URI factoryUri=UriUtils.buildUri(this.reportTestCase.host,JVMStatsFactoryService.SELF_LINK);  Operation factoryPost=Operation.createPost(factoryUri).setReferer(this.reportTestCase.host.getReferer()).setBody(instanceStats).setCompletion(null);  this.reportTestCase.host.testStart(1);  this.reportTestCase.host.sendRequest(factoryPost);  try {    this.reportTestCase.host.testWait();  } catch (  Throwable throwable) {    throwable.printStackTrace();  }}  }
class C{  public Weeks plus(Weeks weeks){  if (weeks == null) {    return this;  }  return plus(weeks.getValue());}  }
class C{  public final Vec3D snapToAxis(){  if (MathUtils.abs(x) < 0.5f) {    x=0;  } else {    x=x < 0 ? -1 : 1;    y=z=0;  }  if (MathUtils.abs(y) < 0.5f) {    y=0;  } else {    y=y < 0 ? -1 : 1;    x=z=0;  }  if (MathUtils.abs(z) < 0.5f) {    z=0;  } else {    z=z < 0 ? -1 : 1;    x=y=0;  }  return this;}  }
class C{  static Meta.Frame frame(Iterator iterator,List<ColumnMetaData> columnMetaDatas,long offset,int fetchMaxRowCount,Calendar calendar) throws SQLException {  final int columnCount=columnMetaDatas.size();  final int[] types=new int[columnCount];  for (int i=0; i < types.length; i++) {    types[i]=columnMetaDatas.get(i).type.id;  }  final List<Object> rows=new ArrayList<>();  boolean done=fetchMaxRowCount == 0;  for (int i=0; fetchMaxRowCount < 0 || i < fetchMaxRowCount; i++) {    if (!iterator.hasNext()) {      done=true;      break;    }    Object values=iterator.next();    Object[] columns=new Object[columnCount];    if (columnCount == 1 && !values.getClass().isArray()) {      columns[0]=getValue(values,types[0],0,calendar);    } else     if (values != null && values instanceof Collection) {      Iterator valueIterator=((Collection)values).iterator();      for (int j=0; j < columnCount; j++) {        columns[j]=getValue(valueIterator.next(),types[j],j,calendar);      }    } else {      Object[] arrayValues=(Object[])values;      for (int j=0; j < columnCount; j++) {        columns[j]=getValue(arrayValues[j],types[j],j,calendar);      }    }    rows.add(columns);  }  return new Meta.Frame(offset,done,rows);}  }
class C{  protected void validate(List<ICalComponent> components,ICalVersion version,List<Warning> warnings){}  }
class C{  protected void checkItemBoundsChanged(Rectangle2D prev){  if (m_bounds.equals(prev)) {    return;  }  if (m_bounders != null && m_bounders.size() > 0) {    Object[] lstnrs=m_bounders.getArray();    for (int i=0; i < lstnrs.length; ++i) {      try {        ((ItemBoundsListener)lstnrs[i]).itemBoundsChanged(this);      } catch (      Exception e) {        s_logger.warning("Exception thrown by ItemBoundsListener: " + e + "\n"+ StringLib.getStackTrace(e));      }    }  }}  }
class C{  public CUtexref(){}  }
class C{  @Deprecated public LuaValue pageScroll(U view,Varargs varargs){  final int direction=varargs.optint(2,0);  return view.pageScroll(direction);}  }
class C{  private void resizeForMinimum(int minimumCapacity){  int newCapacity=(value.length + 1) * 2;  if (minimumCapacity > newCapacity) {    newCapacity=minimumCapacity;  }  char newValue[]=new char[newCapacity];  System.arraycopy(value,0,newValue,0,count);  value=newValue;}  }
class C{  public boolean isInvoiced(){  Object oo=get_Value(COLUMNNAME_IsInvoiced);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public PropertyField(String initialValue,boolean isReadWrite){  this(null,initialValue,isReadWrite);}  }
class C{  public void check(SnmpValue x,long var,Object data) throws SnmpStatusException {switch ((int)var) {case 3:    throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 2:  throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 1:throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);default :throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);}}  }
class C{  public static Toast makeMMText(Context context,CharSequence text,@Duration int duration){  Toast result=new Toast(context);  LayoutInflater inflate=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);  View v=inflate.inflate(R.layout.transient_notification,null);  TextView tv=(TextView)v.findViewById(R.id.message);  TextHelper.setTypeface(context,tv);  tv.setText(mmtext.processText(text.toString(),mmtext.TEXT_UNICODE,true,true));  result.setView(v);  result.setDuration(duration);  return result;}  }
class C{  private String testWriteInDefinedFormat(final GamaGraph graph,final String extension){  System.out.println("testing the writing in this format: " + format);  File file=TestUtils.getTmpFile("emptyGraph",extension);  IGraphWriter writer=AvailableGraphWriters.getGraphWriter(format);  System.out.println("will use writer: " + writer.getClass().getCanonicalName());  writer.writeGraph(null,graph,null,file.getAbsolutePath());  assertTrue(file.exists());  assertFalse(file.isDirectory());  System.out.println("(file was created)");  return file.getAbsolutePath();}  }
class C{  @Override public void accept(T model){  requireNonNull(model).getMethods().forEach(null);}  }
class C{  public void derEncode(OutputStream out) throws IOException {  DerOutputStream temp=new DerOutputStream();  temp.putOID(oid);switch (index) {case -1:    temp.write((byte[])value);  break;case 1:case 2:{  String[] values=(String[])value;  DerOutputStream[] temps=new DerOutputStream[values.length];  for (int i=0; i < values.length; i++) {    temps[i]=new DerOutputStream();    temps[i].putIA5String(values[i]);  }  temp.putOrderedSetOf(DerValue.tag_Set,temps);}break;case 3:{DerOutputStream temp2=new DerOutputStream();temp2.putOID((ObjectIdentifier)value);temp.write(DerValue.tag_Set,temp2.toByteArray());}break;case 4:{DerOutputStream temp2=new DerOutputStream();temp2.putOctetString((byte[])value);temp.write(DerValue.tag_Set,temp2.toByteArray());}break;case 5:{DerOutputStream temp2=new DerOutputStream();temp2.putUTCTime((Date)value);temp.write(DerValue.tag_Set,temp2.toByteArray());}break;case 6:temp.putOrderedSetOf(DerValue.tag_Set,(DerEncoder[])value);break;case 7:{DerOutputStream temp2=new DerOutputStream();temp2.putPrintableString((String)value);temp.write(DerValue.tag_Set,temp2.toByteArray());}break;case 8:{String[] values=(String[])value;DerOutputStream[] temps=new DerOutputStream[values.length];for (int i=0; i < values.length; i++) {temps[i]=new DerOutputStream();temps[i].putPrintableString(values[i]);}temp.putOrderedSetOf(DerValue.tag_Set,temps);}break;case 9:throw new IOException("PKCS9 extended-certificate " + "attribute not supported.");case 10:throw new IOException("PKCS9 IssuerAndSerialNumber" + "attribute not supported.");case 11:case 12:throw new IOException("PKCS9 RSA DSI attributes" + "11 and 12, not supported.");case 13:throw new IOException("PKCS9 attribute #13 not supported.");case 14:{DerOutputStream temp2=new DerOutputStream();CertificateExtensions exts=(CertificateExtensions)value;try {exts.encode(temp2,true);} catch (CertificateException ex) {throw new IOException(ex.toString());}temp.write(DerValue.tag_Set,temp2.toByteArray());}break;case 15:throw new IOException("PKCS9 attribute #15 not supported.");case 16:throw new IOException("PKCS9 SigningCertificate attribute not supported.");case 17:temp.write(DerValue.tag_Set,(byte[])value);break;default :}DerOutputStream derOut=new DerOutputStream();derOut.write(DerValue.tag_Sequence,temp.toByteArray());out.write(derOut.toByteArray());}  }
class C{  public static int scanUI(PerfilesVO perfiles,String code,String pathFile,ParametrosVO parametrosVO){  String device=perfiles.getSourceDefault();  try {    if (device == null) {      device=scanner.getDefaultDS();    }    try {      scanner.closeDS();    } catch (    Exception e) {    }    scanner.openDS(device);    boolean showUI=true;    if (parametrosVO.getDummy() != null && parametrosVO.getDummy().equals("1")) {      showUI=false;    }    int i=scanner.acquireToFile(code,true,pathFile,showUI);    scanner.closeDS();    return i;  } catch (  ScannerIOException e) {    try {      scanner.closeDS();    } catch (    ScannerIOException e1) {      e1.printStackTrace();    }    e.printStackTrace();    return 0;  }}  }
class C{  protected void clearEvents(){  sCInterface.clearEvents();}  }
class C{  public void test_ConstructorIF(){  HashMap hm2=new HashMap(5,(float)0.5);  assertEquals("Created incorrect HashMap",0,hm2.size());  try {    new HashMap(0,0);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException e) {  }  HashMap empty=new HashMap(0,0.75f);  assertNull("Empty hashtable access",empty.get("nothing"));  empty.put("something","here");  assertTrue("cannot get element",empty.get("something") == "here");}  }
class C{  public void dispose(){  super.dispose();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:04.655 -0400",hash_original_method="497239DE6B1E36E7944859E88C1E1B8A",hash_generated_method="6DD56130E61191CDAED72D6BEDBB50BC") protected void engineInitSign(PrivateKey privateKey) throws InvalidKeyException {  DSAParams params;  BigInteger p, q, x;  int n;  if (privateKey == null || !(privateKey instanceof DSAPrivateKey)) {    throw new InvalidKeyException();  }  params=((DSAPrivateKey)privateKey).getParams();  p=params.getP();  q=params.getQ();  x=((DSAPrivateKey)privateKey).getX();  n=p.bitLength();  if (p.compareTo(BigInteger.valueOf(1)) != 1 || n < 512 || n > 1024 || (n & 077) != 0) {    throw new InvalidKeyException("bad p");  }  if (q.signum() != 1 && q.bitLength() != 160) {    throw new InvalidKeyException("bad q");  }  if (x.signum() != 1 || x.compareTo(q) != -1) {    throw new InvalidKeyException("x <= 0 || x >= q");  }  dsaKey=(DSAKey)privateKey;  msgDigest.reset();}  }
class C{  private List<AggregateFunctionType> convertToCoprocessorAggregateFunc(List<AggregateFunctionType> funcs){  List<AggregateFunctionType> copy=new ArrayList<AggregateFunctionType>(funcs);  for (int i=0; i < funcs.size(); i++) {    AggregateFunctionType func=copy.get(i);    if (AggregateFunctionType.avg.equals(func)) {      copy.set(i,AggregateFunctionType.sum);    }  }  return copy;}  }
class C{  public void logMessage(LogEvent e){  log(null,e.getSource().getClass().getName() + ": " + e.getMessage());  System.err.println(e.getSource().getClass().getName() + ": " + e.getMessage());}  }
class C{  public BaleenManagerConfigServlet(BaleenManager manager){  super(LOGGER,BaleenManagerConfigServlet.class);  this.manager=manager;}  }
class C{  public YoutubeOverlayFragment buildAndAdd(){  Preconditions.checkNotNull(activity);  Preconditions.checkArgument(!Strings.isNullOrEmpty(ytKey));  Preconditions.checkArgument(scrollableViewId != 0);  FragmentManager fragmentManager=activity.getFragmentManager();  View scrollableView=activity.findViewById(scrollableViewId);  YoutubeOverlayFragment yt=(YoutubeOverlayFragment)fragmentManager.findFragmentByTag(YoutubeOverlayFragment.class.getName());  if (yt != null) {    fragmentManager.beginTransaction().remove(yt).commit();    fragmentManager.executePendingTransactions();  }  yt=new YoutubeOverlayFragment();  Bundle bundle=new Bundle();  bundle.putIntArray(YoutubeOverlayFragment.HIDEABLE_VIEWS,Ints.toArray(hideableViews));  bundle.putString(YoutubeOverlayFragment.YT_DEVELOPER_KEY,ytKey);  bundle.putInt(SCROLLABLE_VIEW_ID,scrollableViewId);  yt.setArguments(bundle);  fragmentManager.beginTransaction().add(((View)scrollableView.getParent()).getId(),yt,YoutubeOverlayFragment.class.getName()).commit();  return yt;}  }
class C{  @Override public <NV extends NumberVector>NV projectRelativeRenderToDataSpace(double[] v,NumberVector.Factory<NV> prototype){  final int dim=v.length;  double[] vec=projectRelativeRenderToScaled(v);  for (int d=0; d < dim; d++) {    vec[d]=scales[d].getRelativeUnscaled(vec[d]);  }  return prototype.newNumberVector(vec);}  }
class C{  public long count(){  return count;}  }
class C{  private void maxArtifactDetails(){  final Boolean flag=(Boolean)maxMinButton.getData();  if (flag == null || Boolean.FALSE.equals(flag)) {    maximizedArtifactDetailsView();  } else {    minimizeArtifactDetailsView();  }}  }
class C{  private static boolean listEqualsIgnoreCase(List<String> left,List<String> right){  if (left == null) {    if (right != null) {      return false;    }  } else   if (right == null) {    return false;  } else   if (left.size() != right.size()) {    return false;  }  return containsAllIgnoreCase(left,right);}  }
class C{  public SetChangelogMapping(String source,String taskName,int changelogPartitionNumber){  super(source);  setType(TYPE);  setKey(taskName);  putMessageValue(CHANGELOG_VALUE_KEY,String.valueOf(changelogPartitionNumber));}  }
class C{  public void add(Item item){  Node<Item> oldfirst=first;  first=new Node<Item>();  first.item=item;  first.next=oldfirst;  n++;}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  public int debuggerCount(){  return debuggers.size();}  }
class C{  public static void dump(HttpSession session){  log.config("Session " + session.getId());  log.config("- Created=" + new Timestamp(session.getCreationTime()));  if (!CLogMgt.isLevelFiner())   return;  boolean first=true;  Enumeration e=session.getAttributeNames();  while (e.hasMoreElements()) {    if (first)     log.finer("Attributes:");    first=false;    String key=(String)e.nextElement();    Object value=session.getAttribute(key);    log.finer("- " + key + " = "+ value);  }}  }
class C{  private void skipScalingList(ParsableBitArray bitArray){  for (int sizeId=0; sizeId < 4; sizeId++) {    for (int matrixId=0; matrixId < 6; matrixId+=sizeId == 3 ? 3 : 1) {      if (!bitArray.readBit()) {        bitArray.readUnsignedExpGolombCodedInt();      } else {        int coefNum=Math.min(64,1 << (4 + (sizeId << 1)));        if (sizeId > 1) {          bitArray.readSignedExpGolombCodedInt();        }        for (int i=0; i < coefNum; i++) {          bitArray.readSignedExpGolombCodedInt();        }      }    }  }}  }
class C{  public void endElement(String uri,String localName,String qName) throws SAXException {  if (!(htmlMode && (uri.equals("http://www.w3.org/1999/xhtml") || uri.equals("")) && (qName.equals("area") || qName.equals("base") || qName.equals("basefont")|| qName.equals("br")|| qName.equals("col")|| qName.equals("frame")|| qName.equals("hr")|| qName.equals("img")|| qName.equals("input")|| qName.equals("isindex")|| qName.equals("link")|| qName.equals("meta")|| qName.equals("param")))) {    write("</");    writeName(uri,localName,qName,true);    write('>');  }  if (elementLevel == 1) {    write('\n');  }  cdataElement=false;  super.endElement(uri,localName,qName);  nsSupport.popContext();  elementLevel--;}  }
class C{  public static boolean checkIfVarrayContainsSpecifiedVplexSystem(String vararyId,String cluster,URI vplexStorageSystemURI,DbClient dbClient){  boolean foundVplexOnSpecifiedCluster=false;  URIQueryResultList storagePortURIs=new URIQueryResultList();  dbClient.queryByConstraint(AlternateIdConstraint.Factory.getVirtualArrayStoragePortsConstraint(vararyId),storagePortURIs);  for (  URI uri : storagePortURIs) {    StoragePort storagePort=dbClient.queryObject(StoragePort.class,uri);    if ((storagePort != null) && DiscoveredDataObject.CompatibilityStatus.COMPATIBLE.name().equals(storagePort.getCompatibilityStatus()) && (RegistrationStatus.REGISTERED.toString().equals(storagePort.getRegistrationStatus()))&& (!DiscoveryStatus.NOTVISIBLE.toString().equals(storagePort.getDiscoveryStatus()))) {      if (storagePort.getStorageDevice().equals(vplexStorageSystemURI)) {        String vplexCluster=ConnectivityUtil.getVplexClusterOfPort(storagePort);        if (vplexCluster.equals(cluster)) {          foundVplexOnSpecifiedCluster=true;          break;        }      }    }  }  return foundVplexOnSpecifiedCluster;}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  public boolean onBackButtonPressed(){  return false;}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset){  super.addToken(array,start,end,tokenType,startOffset);  zzStartRead=zzMarkedPos;}  }
class C{  public SparseShortVector(TIntDoubleMap values,int dimensionality) throws IllegalArgumentException {  if (values.size() > dimensionality) {    throw new IllegalArgumentException("values.size() > dimensionality!");  }  this.indexes=new int[values.size()];  this.values=new short[values.size()];{    TIntDoubleIterator iter=values.iterator();    for (int i=0; iter.hasNext(); i++) {      iter.advance();      this.indexes[i]=iter.key();    }    Arrays.sort(this.indexes);  }{    for (int i=0; i < values.size(); i++) {      this.values[i]=(short)values.get(this.indexes[i]);    }  }  this.dimensionality=dimensionality;  final int maxdim=getMaxDim();  if (maxdim > dimensionality) {    throw new IllegalArgumentException("Given dimensionality " + dimensionality + " is too small w.r.t. the given values (occurring maximum: "+ maxdim+ ").");  }}  }
class C{  public static <E>OutputMatcher<E> outputWithSize(int size){  return OutputMatcherFactory.create(OutputWithSize.<E>outputWithSize(size));}  }
class C{  @Deprecated public RMISecurityException(String name){  super(name);}  }
class C{  public final void storeFileName(String name){  fullFileName=name;  int ptr=fullFileName.lastIndexOf('/');  final int ptr2=fullFileName.lastIndexOf('\\');  if (ptr2 > ptr) {    ptr=ptr2;  }  if (ptr > 0) {    currentFilePath=fullFileName.substring(0,ptr + 1);  } else {    currentFilePath="";  }  int temp_pointer=name.indexOf('\\');  if (temp_pointer == -1) {    temp_pointer=name.indexOf('/');  }  while (temp_pointer != -1) {    name=name.substring(temp_pointer + 1);    temp_pointer=name.indexOf('\\');    if (temp_pointer == -1) {      temp_pointer=name.indexOf('/');    }  }  final int pointer=name.lastIndexOf('.');  if (pointer != -1) {    name=name.substring(0,pointer);  }  name=Strip.stripAllSpaces(name);  currentFilename=name.toLowerCase();}  }
class C{  private void handleConnectionFailure(MethodInvocation paramMethodInvocation,Throwable t){  CmrRepositoryDefinition cmrRepositoryDefinition=InterceptorUtils.getRepositoryDefinition(paramMethodInvocation);  if (null != cmrRepositoryDefinition) {    if (cmrRepositoryDefinition.getOnlineStatus() == OnlineStatus.ONLINE) {      InspectIT.getDefault().getCmrRepositoryManager().forceCmrRepositoryOnlineStatusUpdate(cmrRepositoryDefinition);      InspectIT.getDefault().log(IStatus.WARNING,"The server: '" + cmrRepositoryDefinition.getIp() + ":"+ cmrRepositoryDefinition.getPort()+ "' is currently unavailable.");    }  } else {    throw new RuntimeException("Service proxy not bounded to the CMR repository definition",t);  }}  }
class C{  private void updatePredicted(){  int predictedClass=-1;  double bestProb=0.0;  for (int i=0; i < m_Distribution.length; i++) {    if (m_Distribution[i] > bestProb) {      predictedClass=i;      bestProb=m_Distribution[i];    }  }  if (predictedClass != -1) {    m_Predicted=predictedClass;  } else {    m_Predicted=MISSING_VALUE;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:11.437 -0500",hash_original_method="C29DCCF585DA8A7190E597A3D60BC217",hash_generated_method="53F435516A4DF3560A1034C4E3F1ACE2") static public FileA3D createFromAsset(RenderScript rs,AssetManager mgr,String path){  rs.validate();  int fileId=rs.nFileA3DCreateFromAsset(mgr,path);  if (fileId == 0) {    throw new RSRuntimeException("Unable to create a3d file from asset " + path);  }  FileA3D fa3d=new FileA3D(fileId,rs,null);  fa3d.initEntries();  return fa3d;}  }
class C{  protected void flagToRemoveFromQuarantineQueue(NodePortTuple npt){  if (toRemoveFromQuarantineQueue.contains(npt) == false) {    toRemoveFromQuarantineQueue.add(npt);  }}  }
class C{  public void addLog(ProcessInfoLog logEntry){  if (logEntry == null)   return;  if (m_logs == null)   m_logs=new ArrayList<ProcessInfoLog>();  m_logs.add(logEntry);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:38.292 -0500",hash_original_method="CC26B336023F985FDD8C05D7EFF5A607",hash_generated_method="586BF1DA188E33E34D10874FF1ED58A4") public static final void appendValueToSql(StringBuilder sql,Object value){  if (value == null) {    sql.append("NULL");  } else   if (value instanceof Boolean) {    Boolean bool=(Boolean)value;    if (bool) {      sql.append('1');    } else {      sql.append('0');    }  } else {    appendEscapedSQLString(sql,value.toString());  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public SetBreakpointCommand(final int packetId,final Set<RelocatedAddress> addresses,final BreakpointType type){  super(getCommandForType(type),packetId);  Preconditions.checkNotNull(addresses,"IE01094: Addresses argument can not be null");  Preconditions.checkNotNull(type,"IE00959: Type argument can not be null");  addArgument(new DebugMessageIntegerArgument(addresses.size()));  for (  final RelocatedAddress address : addresses) {    addArgument(new DebugMessageAddressArgument(address.getAddress()));  }}  }
class C{  @Ignore @Test public void testQuestion1toIdle(){  for (  final String playerSays : ConversationPhrases.GOODBYE_MESSAGES) {    final Player player=PlayerTestHelper.createPlayer("bob");    npcEngine.setCurrentState(QUESTION_1);    npcEngine.step(player,playerSays);    assertThat(playerSays,npcEngine.getCurrentState(),is(IDLE));    assertThat(playerSays,getReply(npc),is("Bye."));  }}  }
class C{  public static long sizeOf(double[] arr){  return alignObjectSize((long)NUM_BYTES_ARRAY_HEADER + (long)Double.BYTES * arr.length);}  }
class C{  public void detachFromMovingGrabPoint(OffsetGrabPoint gp){  gp.removeGrabPoint(gpo);}  }
class C{  public ExtrudedPolygon(Double height){  this();  this.setHeight(height);}  }
class C{  public void coordInScreenPlane(double dx,double dy,Vector3 result,ReadOnlyVector3 position){  double s=camera.getPixelSizeAt(position,false);  result.set(dx * s,dy * s,0);  rotate.applyPost(result,result);}  }
class C{  public boolean enterBusy(){  return !lock.writeLock().isHeldByCurrentThread() && lock.readLock().tryLock();}  }
class C{  static Varargs str_find_aux(Varargs args,boolean find){  LuaString s=args.checkstring(1);  LuaString pat=args.checkstring(2);  int init=args.optint(3,1);  if (init > 0) {    init=Math.min(init - 1,s.length());  } else   if (init < 0) {    init=Math.max(0,s.length() + init);  }  boolean fastMatch=find && (args.arg(4).toboolean() || pat.indexOfAny(SPECIALS) == -1);  if (fastMatch) {    int result=s.indexOf(pat,init);    if (result != -1) {      return varargsOf(valueOf(result + 1),valueOf(result + pat.length()));    }  } else {    MatchState ms=new MatchState(args,s,pat);    boolean anchor=false;    int poff=0;    if (pat.luaByte(0) == '^') {      anchor=true;      poff=1;    }    int soff=init;    do {      int res;      ms.reset();      if ((res=ms.match(soff,poff)) != -1) {        if (find) {          return varargsOf(valueOf(soff + 1),valueOf(res),ms.push_captures(false,soff,res));        } else {          return ms.push_captures(true,soff,res);        }      }    } while (soff++ < s.length() && !anchor);  }  return NIL;}  }
class C{  public boolean isAlwaysTensile(){  return alwaysTensile && !isScrollableX() || refreshTask != null;}  }
class C{  public void testNullStoredFieldReuse() throws Exception {  Directory dir=newDirectory();  Analyzer analyzer=new MockAnalyzer(random());  IndexWriter iw=new IndexWriter(dir,new IndexWriterConfig(analyzer));  Document doc=new Document();  Field theField=new StoredField("foo","hello",StoredField.TYPE);  doc.add(theField);  iw.addDocument(doc);  expectThrows(IllegalArgumentException.class,null);  assertNull(iw.getTragicException());  iw.close();  DirectoryReader r=DirectoryReader.open(dir);  assertEquals(1,r.numDocs());  r.close();  dir.close();}  }
class C{  public void updateClassifier(Instance instance) throws Exception {  if (!learningphase) {    return;  }  int num_classes=(int)(snumClasses);  int num_features=(int)(snumFeatures);  SortedMap<Integer,Double> data=new TreeMap<Integer,Double>();  HashMap labels=new HashMap();  int numChanges=0;  int numCategories_1=numCategories - 1;  numinstances+=1;  if (!instance.classIsMissing()) {    double suminputA=0;    double suminputB=0;    for (int j=0; j < num_features; j++) {      double dt=instance.value(num_classes + j);      if (dt != 0) {        data.put(j,dt);      }      suminputA+=1;    }    for (int j=0; j < num_classes; j++) {      double lt=instance.value(j);      if (lt != 0) {        labels.put(j,lt);      }      suminputB+=lt;    }    SortPair[] cateacti=ARTActivateCategories(data,labels);    java.util.Arrays.sort(cateacti);    boolean resonance=false;    int currentSortedIndex=0;    int currentCategory=-1;    double matchA=0;    double matchB=0;    while (!resonance && currentSortedIndex < cateacti.length) {      currentCategory=cateacti[currentSortedIndex].getOriginalIndex();      if (currentCategory == numCategories_1) {        matchB=1;        matchA=1;      } else {        matchA=ART_Calculate_MatchA(data,weightsA[currentCategory],suminputA);        if (weightsB[currentCategory].isEmpty()) {          matchB=1;        } else {          matchB=ART_Calculate_MatchB(labels,weightsB[currentCategory],suminputB);        }      }      if (matchA >= roa && matchB >= rob) {        if (currentCategory == numCategories_1) {          if (currentSortedIndex == maxNumCategories) {            System.out.println("WARNING: The maximum number of categories has been reached.");            resonance=true;          } else {            sweightsA[currentCategory]=0;            Set<Integer> s1=data.keySet();            for (            int j : s1) {              double da=(Double)data.get(j);              weightsA[currentCategory].put(j,da);              weightsA[currentCategory].put(j + snumFeatures,da);            }            Set<Integer> s2=weightsA[currentCategory].keySet();            int count=0;            for (            int j : s2) {              double da=(Double)weightsA[currentCategory].get(j);              if (j < snumFeatures) {                sweightsA[currentCategory]+=da;              } else {                sweightsA[currentCategory]+=1 - da;                count+=1;              }            }            sweightsA[currentCategory]+=snumFeatures - count;            s1=labels.keySet();            for (            int j : s1) {              weightsB[currentCategory].put(j,labels.get(j));            }            String s=labels.keySet().toString();            if (hmclasses.containsKey(s)) {              hmclasses.get(s).add(currentCategory);              hmclasses.put(s,hmclasses.get(s));            } else {              Vector v=new Vector();              v.add(currentCategory);              hmclasses.put(s,v);            }            ARAMm_Add_New_Category();            numChanges=numChanges + 1;            resonance=true;            break;          }        } else {          double weightChange=ARAMm_Update_Weights(data,labels,currentCategory);          sumArrayF(this.weightsA[1]);          if (weightChange == 1) {            numChanges+=1;          }          resonance=true;          break;        }      } else {        currentSortedIndex+=1;        resonance=false;      }    }    if (!resonance && currentSortedIndex >= cateacti.length) {      sweightsA[numCategories_1]=0;      Set<Integer> s1=data.keySet();      int count=0;      for (      int j : s1) {        double da=(Double)data.get(j);        weightsA[numCategories_1].put(j,da);        sweightsA[numCategories_1]+=da;        weightsA[numCategories_1].put(j + snumFeatures,da);        sweightsA[numCategories_1]+=1 - da;        count+=1;      }      sweightsA[numCategories_1]+=snumFeatures - count;      s1=labels.keySet();      for (      int j : s1) {        weightsB[numCategories_1].put(j,labels.get(j));      }      String s=labels.keySet().toString();      if (hmclasses.containsKey(s)) {        hmclasses.get(s).add(numCategories_1);        hmclasses.put(s,hmclasses.get(s));      } else {        Vector v=new Vector();        v.add(numCategories_1);        hmclasses.put(s,v);      }      ARAMm_Add_New_Category();      numChanges=numChanges + 1;    }  }}  }
class C{  public QueueNode next(QueueNode next){  return m_Next=next;}  }
class C{  public String parseTemplate(){  StringBuffer parsedTemplate=new StringBuffer();  m_errorMessages.setLength(0);  m_missingKeys.removeAllElements();  while (true) {    NextToken result=getNextToken();    if (!result.finishedParsing()) {      if (result.foundToken()) {        parsedTemplate.append(m_template.substring(result.getLastParsedPosition(),result.getPositionBeforeKey() + 1));        if (result.getMissingTag() == null) {          if (!result.getKey().endsWith("[]")) {            parsedTemplate.append(result.getValue());          } else {            try {              Object[] array=result.getArrayOfValues();              if ((m_iterationNumber >= 0) && (m_iterationNumber < array.length)) {                parsedTemplate.append(array[m_iterationNumber].toString());              }            } catch (            Exception e) {              m_missingKeys.addElement(result.getKey());              addErrorMessage("Key " + result.getKey() + " not found in the parameters. Iteration # "+ m_iterationNumber);            }          }        } else {          if (BEGIN_FOR_EACH.equals(result.getKey())) {            String parsedSubtemplate=processForEachSubtemplate(result);            if (parsedSubtemplate == null) {              m_missingKeys.addElement(END_FOR_EACH);              addErrorMessage("Tag " + END_FOR_EACH + " not found in the template.");            } else {              parsedTemplate.append(parsedSubtemplate);            }          } else {            if (m_insertMissingTags) {              parsedTemplate.append(result.getMissingTag());            }            m_missingKeys.addElement(result.getKey());            addErrorMessage("Key " + result.getKey() + " not found in parameters.");          }        }      } else {        parsedTemplate.append(m_template.substring(result.getLastParsedPosition(),result.getParsedPosition()));      }    } else {      parsedTemplate.append(m_template.substring(result.getLastParsedPosition(),result.getParsedPosition()));      break;    }  }  return parsedTemplate.toString();}  }
class C{  public CInstruction(final boolean saved,final INaviModule module,final IAddress address,final String mnemonic,final List<COperandTree> operands,final byte[] data,final String architecture,final SQLProvider provider){  m_module=Preconditions.checkNotNull(module,"IE00126: Module argument can not be null");  m_address=Preconditions.checkNotNull(address,"IE00127: Address argument can not be null");  m_mnemonic=Preconditions.checkNotNull(mnemonic,"IE00128: Mnemonic argument can not be null");  Preconditions.checkArgument(!mnemonic.isEmpty(),"IE00129: Mnemonic argument can not be empty");  Preconditions.checkNotNull(operands,"IE00130: Operands argument can not be null");  verifyOperands(operands);  Preconditions.checkNotNull(data,"IE02195: Data argument can not be null");  m_architecture=Preconditions.checkNotNull(architecture,"IE02196: Architecture argument can not be null");  Preconditions.checkArgument(!architecture.isEmpty(),"IE02197: Architecture argument can not be empty");  m_provider=Preconditions.checkNotNull(provider,"IE00132: SQL provider argument can not be null");  m_saved=saved;  m_operands=new ArrayList<COperandTree>(operands);  m_data=data.clone();  CommentManager.get(m_provider).addListener(m_internalCommentListener);  for (  final COperandTree operand : operands) {    operand.setNaviInstruction(this);  }}  }
class C{  public static String byteCountToDisplaySize(BigInteger size){  String displaySize;  if (size.divide(ONE_EB_BI).compareTo(BigInteger.ZERO) > 0) {    displaySize=String.valueOf(size.divide(ONE_EB_BI)) + " EB";  } else   if (size.divide(ONE_PB_BI).compareTo(BigInteger.ZERO) > 0) {    displaySize=String.valueOf(size.divide(ONE_PB_BI)) + " PB";  } else   if (size.divide(ONE_TB_BI).compareTo(BigInteger.ZERO) > 0) {    displaySize=String.valueOf(size.divide(ONE_TB_BI)) + " TB";  } else   if (size.divide(ONE_GB_BI).compareTo(BigInteger.ZERO) > 0) {    displaySize=String.valueOf(size.divide(ONE_GB_BI)) + " GB";  } else   if (size.divide(ONE_MB_BI).compareTo(BigInteger.ZERO) > 0) {    displaySize=String.valueOf(size.divide(ONE_MB_BI)) + " MB";  } else   if (size.divide(ONE_KB_BI).compareTo(BigInteger.ZERO) > 0) {    displaySize=String.valueOf(size.divide(ONE_KB_BI)) + " KB";  } else {    displaySize=String.valueOf(size) + " bytes";  }  return displaySize;}  }
class C{  @SuppressLint("InflateParams") @Override protected void initViews(Bundle savedInstanceState){  EasyBorderDividerItemDecoration detailDecoration=new EasyBorderDividerItemDecoration(this.getResources().getDimensionPixelOffset(R.dimen.data_border_divider_height),this.getResources().getDimensionPixelOffset(R.dimen.data_border_padding_infra_spans));  this.dailydailyDetailRv.addItemDecoration(detailDecoration);  this.detailAdapter=new DailyDetailAdapter(this);  this.detailAdapter.setOnCardItemClickListener(this);  this.dailydailyDetailRv.setAdapter(this.detailAdapter);  this.showBack();  this.setTitle(this.getDetailTitle());}  }
class C{  public boolean recordLocalVariables(CodeAttribute ca,int pc) throws CompileError {  LocalVariableAttribute va=(LocalVariableAttribute)ca.getAttribute(LocalVariableAttribute.tag);  if (va == null)   return false;  int n=va.tableLength();  for (int i=0; i < n; ++i) {    int start=va.startPc(i);    int len=va.codeLength(i);    if (start <= pc && pc < start + len)     gen.recordVariable(va.descriptor(i),va.variableName(i),va.index(i),stable);  }  return true;}  }
class C{  public boolean writeHeader(OutputStream os){  try {    writeInt(os,CACHE_MAGIC);    writeString(os,key);    writeString(os,etag == null ? "" : etag);    writeLong(os,serverDate);    writeLong(os,ttl);    writeLong(os,softTtl);    writeStringStringMap(responseHeaders,os);    os.flush();    return true;  } catch (  IOException e) {    VolleyLog.d("%s",e.toString());    return false;  }}  }
class C{  public TIntDoubleIterator(TIntDoubleHashMap map){  super(map);  _map=map;}  }
class C{  public MethodHandle guardWithTest(MethodHandle target,MethodHandle fallback){  if (mcs.getTarget() == K_false)   return fallback;  return MethodHandles.guardWithTest(mcsInvoker,target,fallback);}  }
class C{  private static void skipShortTermRefPicSets(ParsableBitArray bitArray){  int numShortTermRefPicSets=bitArray.readUnsignedExpGolombCodedInt();  boolean interRefPicSetPredictionFlag=false;  int numNegativePics=0;  int numPositivePics=0;  int previousNumDeltaPocs=0;  for (int stRpsIdx=0; stRpsIdx < numShortTermRefPicSets; stRpsIdx++) {    if (stRpsIdx != 0) {      interRefPicSetPredictionFlag=bitArray.readBit();    }    if (interRefPicSetPredictionFlag) {      bitArray.skipBits(1);      bitArray.readUnsignedExpGolombCodedInt();      for (int j=0; j <= previousNumDeltaPocs; j++) {        if (bitArray.readBit()) {          bitArray.skipBits(1);        }      }    } else {      numNegativePics=bitArray.readUnsignedExpGolombCodedInt();      numPositivePics=bitArray.readUnsignedExpGolombCodedInt();      previousNumDeltaPocs=numNegativePics + numPositivePics;      for (int i=0; i < numNegativePics; i++) {        bitArray.readUnsignedExpGolombCodedInt();        bitArray.skipBits(1);      }      for (int i=0; i < numPositivePics; i++) {        bitArray.readUnsignedExpGolombCodedInt();        bitArray.skipBits(1);      }    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(createAttributeNS02.class,args);}  }
class C{  public static MockDistanceSensor distanceSensor(){  return new MockDistanceSensor();}  }
class C{  static public void inssort(short[] array){  short tmp;  for (int i=1; i < array.length; i++)   for (int j=i; (j > 0) && (array[j] < array[j - 1]); j--) {    tmp=array[j];    array[j]=array[j - 1];    array[j - 1]=tmp;  }}  }
class C{  public static void assertJQ(SolrClient client,SolrParams args,String... tests) throws Exception {  String resp;  resp=getJSON(client,args);  matchJSON(resp,tests);}  }
class C{  public Date(long date){  this.date=date;}  }
class C{  public ILineSegment[] generate(int size){  ILineSegment[] lines=new ILineSegment[size];  for (int i=0; i < size; i++) {    double x=Math.random();    double y=Math.random();    double dx=length * Math.cos(Math.random());    double dy=length * Math.sin(Math.random());    int sgn1, sgn2;    if (Math.random() <= .5) {      sgn1=+1;    } else {      sgn1=-1;    }    if (Math.random() <= .5) {      sgn2=+1;    } else {      sgn2=-1;    }    TwoDLineSegment line=new TwoDLineSegment(new TwoDPoint(x,y),new TwoDPoint(x + sgn1 * dx,y + sgn2 * dy));    lines[i]=line;  }  return lines;}  }
class C{  public static String intToHex(final int src,final int srcPos,final String dstInit,final int dstPos,final int nHexs){  if (0 == nHexs) {    return dstInit;  }  if ((nHexs - 1) * 4 + srcPos >= 32) {    throw new IllegalArgumentException("(nHexs-1)*4+srcPos is greather or equal to than 32");  }  final StringBuilder sb=new StringBuilder(dstInit);  int shift=0;  int append=sb.length();  for (int i=0; i < nHexs; i++) {    shift=i * 4 + srcPos;    final int bits=0xF & (src >> shift);    if (dstPos + i == append) {      ++append;      sb.append(intToHexDigit(bits));    } else {      sb.setCharAt(dstPos + i,intToHexDigit(bits));    }  }  return sb.toString();}  }
class C{  public void fromData(DataInput in) throws IOException, ClassNotFoundException {  if (DataSerializer.readPrimitiveBoolean(in)) {    this.eventIdentifier=(EventID)DataSerializer.readObject(in);    this.clientUpdateMessage=new ClientUpdateMessageImpl();    InternalDataSerializer.invokeFromData(this.clientUpdateMessage,in);    ((ClientUpdateMessageImpl)this.clientUpdateMessage).setEventIdentifier(this.eventIdentifier);    if (this.clientUpdateMessage.hasCqs()) {{        ClientCqConcurrentMap cqMap;        int size=InternalDataSerializer.readArrayLength(in);        if (size == -1) {          cqMap=null;        } else {          cqMap=new ClientCqConcurrentMap(size,1.0f,1);          for (int i=0; i < size; i++) {            ClientProxyMembershipID key=DataSerializer.<ClientProxyMembershipID>readObject(in);            CqNameToOp value;{              byte typeByte=in.readByte();              if (typeByte == DSCODE.HASH_MAP) {                int cqNamesSize=InternalDataSerializer.readArrayLength(in);                if (cqNamesSize == -1) {                  throw new IllegalStateException("The value of a ConcurrentHashMap is not allowed to be null.");                } else                 if (cqNamesSize == 1) {                  String cqNamesKey=DataSerializer.<String>readObject(in);                  Integer cqNamesValue=DataSerializer.<Integer>readObject(in);                  value=new CqNameToOpSingleEntry(cqNamesKey,cqNamesValue);                } else                 if (cqNamesSize == 0) {                  value=new CqNameToOpSingleEntry(null,0);                } else {                  value=new CqNameToOpHashMap(cqNamesSize);                  for (int j=0; j < cqNamesSize; j++) {                    String cqNamesKey=DataSerializer.<String>readObject(in);                    Integer cqNamesValue=DataSerializer.<Integer>readObject(in);                    value.add(cqNamesKey,cqNamesValue);                  }                }              } else               if (typeByte == DSCODE.NULL) {                throw new IllegalStateException("The value of a ConcurrentHashMap is not allowed to be null.");              } else {                throw new IllegalStateException("Expected DSCODE.NULL or DSCODE.HASH_MAP but read " + typeByte);              }            }            cqMap.put(key,value);          }        }        this.clientCqs=cqMap;      }      ((ClientUpdateMessageImpl)this.clientUpdateMessage).setClientCqs(this.clientCqs);    }    this.regionName=this.clientUpdateMessage.getRegionName();    this.keyOfInterest=this.clientUpdateMessage.getKeyOfInterest();    this.shouldConflate=this.clientUpdateMessage.shouldBeConflated();    rcUpdater.set(this,0);  } else {    DataSerializer.readObject(in);    InternalDataSerializer.invokeFromData(new ClientUpdateMessageImpl(),in);    if (logger.isDebugEnabled()) {      logger.debug("HAEventWrapper.fromData(): The event has already been sent to the client by the primary server.");    }  }}  }
class C{  private void checkWritingStatus(){  if (null != writingExecutorService) {    long completedTasks=writingExecutorService.getCompletedTaskCount();    long queuedTasks=writingExecutorService.getTaskCount() - completedTasks;    long arrivedTasksForPeriod=(queuedTasks + completedTasks) - totalTasks;    long finishedTasksForPeriod=completedTasks - finishedTasks;    writingStatus=WritingStatus.getWritingStatus(arrivedTasksForPeriod,finishedTasksForPeriod);    finishedTasks=completedTasks;    totalTasks=completedTasks + queuedTasks;  } else {    writingStatus=WritingStatus.GOOD;  }}  }
class C{  private static char digitToBasic(int digit,boolean uppercase){  if (digit < 26) {    if (uppercase) {      return (char)(CAPITAL_A + digit);    } else {      return (char)(SMALL_A + digit);    }  } else {    return (char)((ZERO - 26) + digit);  }}  }
class C{  public void postprocessIndividual(final EvolutionState state,final int thread){  for (int x=0; x < rulesets.length; x++)   rulesets[x].postprocessRules(state,thread);}  }
class C{  public void merge(PartitionAttributesImpl pa){  if (pa.hasRedundancy) {    setRedundantCopies(pa.getRedundantCopies());  }  if (pa.hasLocalMaxMemory) {    setLocalMaxMemory(pa.getLocalMaxMemory());  }  if (pa.hasOffHeap) {    setOffHeap(pa.getOffHeap());  }  if (pa.hasTotalMaxMemory) {    setTotalMaxMemory(pa.getTotalMaxMemory());  }  if (pa.hasTotalNumBuckets) {    setTotalNumBuckets(pa.getTotalNumBuckets());  }  if (pa.hasPartitionResolver) {    setPartitionResolver(pa.getPartitionResolver());  }  if (pa.hasColocatedRegionName) {    setColocatedWith(pa.getColocatedWith());  }  if (pa.hasRecoveryDelay) {    setRecoveryDelay(pa.getRecoveryDelay());  }  if (pa.hasStartupRecoveryDelay) {    setStartupRecoveryDelay(pa.getStartupRecoveryDelay());  }  if (pa.hasFixedPAttrs) {    addFixedPartitionAttributes(pa.getFixedPartitionAttributes());  }  if (pa.hasPartitionListeners) {    this.addPartitionListeners(pa.partitionListeners);  }}  }
class C{  public boolean hasVerificationCombo(){  return hasExtension(GwoVerificationCombo.class);}  }
class C{  public boolean canClip(){  return !isEmpty() && mRect != null;}  }
class C{  public static byte[] decode(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,DECODABET);}  }
class C{  public ZNetTxRequest(int frameId,XBeeAddress64 dest64,XBeeAddress16 dest16,int broadcastRadius,Option option,int[] payload){  this.setFrameId(frameId);  this.destAddr64=dest64;  this.destAddr16=dest16;  this.broadcastRadius=broadcastRadius;  this.option=option;  this.payload=payload;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public ParsableByteArray(byte[] data,int limit){  this.data=data;  this.limit=limit;}  }
class C{  public ByteArrayAnnotatedOutput(){  this(DEFAULT_SIZE);}  }
class C{  public void selectionDone(SelectionEvent evt){}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:29.317 -0500",hash_original_method="A76DAF9D6C007596CB909A2D96D7B6D3",hash_generated_method="A76DAF9D6C007596CB909A2D96D7B6D3") GsmConnection(Context context,DriverCall dc,GsmCallTracker ct,int index){  createWakeLock(context);  acquireWakeLock();  owner=ct;  h=new MyHandler(owner.getLooper());  address=dc.number;  isIncoming=dc.isMT;  createTime=System.currentTimeMillis();  numberPresentation=dc.numberPresentation;  uusInfo=dc.uusInfo;  this.index=index;  parent=parentFromDCState(dc.state);  parent.attach(this,dc);}  }
class C{  void CRC_block(byte[] buffer){  long crc=0;  for (int r=0; r < buffer.length - 2; r++) {    crc=CRC_char(crc,buffer[r]);  }  byte high=(byte)((crc >> 8) & 0xFF);  byte low=(byte)(crc & 0xFF);  buffer[buffer.length - 2]=low;  buffer[buffer.length - 1]=high;}  }
class C{  public static Color toColor(ColorSpace colorSpace,float... components){  return new CompositeColor(colorSpace,components,1f);}  }
class C{  protected void appendDetail(StringBuffer buffer,String fieldName,Object[] array){  buffer.append(arrayStart);  for (int i=0; i < array.length; i++) {    Object item=array[i];    if (i > 0) {      buffer.append(arraySeparator);    }    if (item == null) {      appendNullText(buffer,fieldName);    } else {      appendInternal(buffer,fieldName,item,arrayContentDetail);    }  }  buffer.append(arrayEnd);}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  private OperatorSymbol enterUnop(String name,Type arg,Type res,int opcode){  OperatorSymbol sym=new OperatorSymbol(makeOperatorName(name),new MethodType(List.of(arg),res,List.<Type>nil(),methodClass),opcode,predefClass);  predefClass.members().enter(sym);  return sym;}  }
class C{  public ProtocolTagHandler(GuacamoleConfiguration config) throws SAXException {  this.config=config;}  }
class C{  public final Enumeration enumerateInstances(){  return m_Instances.elements();}  }
class C{  void incrementFilesOpenedForRead(){  filesOpenedForRead.increment();}  }
class C{  protected LayerTreeModel createTreeModel(){  return new LayerTreeModel();}  }
class C{  public static List<Link> createLinks(FactoryDto factory,ServiceContext serviceContext,String userName){  final List<Link> links=new LinkedList<>();  final UriBuilder uriBuilder=serviceContext.getServiceUriBuilder();  final String factoryId=factory.getId();  if (factoryId != null) {    links.add(createLink(HttpMethod.GET,uriBuilder.clone().path(FactoryService.class,"getFactory").build(factoryId).toString(),null,APPLICATION_JSON,RETRIEVE_FACTORY_REL_ATT));    links.addAll(SNIPPET_TYPES.stream().map(null).collect(toList()));    final Link createWorkspace=createLink(HttpMethod.GET,uriBuilder.clone().replacePath("f").queryParam("id",factoryId).build().toString(),null,TEXT_HTML,FACTORY_ACCEPTANCE_REL_ATT);    links.add(createWorkspace);    links.add(createLink(HttpMethod.GET,uriBuilder.clone().path("analytics").path("public-metric/factory_used").queryParam("factory",createWorkspace.getHref()).toString(),null,TEXT_PLAIN,ACCEPTED_REL_ATT));  }  if (!Strings.isNullOrEmpty(factory.getName()) && !Strings.isNullOrEmpty(userName)) {    final Link createWorkspaceFromNamedFactory=createLink(HttpMethod.GET,uriBuilder.clone().replacePath("f").queryParam("name",factory.getName()).queryParam("user",userName).build().toString(),null,TEXT_HTML,NAMED_FACTORY_ACCEPTANCE_REL_ATT);    links.add(createWorkspaceFromNamedFactory);  }  return links;}  }
class C{  public void add(Node parent,List<Node> children){  NodeDescriptor nodeDescriptor=getWrapper(parent);  if (children.size() == 1) {    insert(nodeDescriptor,nodeDescriptor.getChildren().size(),children.get(0));  } else {    insert(nodeDescriptor,nodeDescriptor.getChildren().size(),children);  }}  }
class C{  @Ignore @Test public void debugIncrementalCompilationBug(){  java.util.List<File> sourceFiles=new ArrayList<File>();  String sdkSourcePath="../../ceylon-sdk/source";  String testSourcePath="../../ceylon-sdk/test-source";  for (  String s : new String[]{"../../ceylon-sdk/source/ceylon/json/StringPrinter.ceylon","../../ceylon-sdk/test-source/test/ceylon/json/print.ceylon","../../ceylon-sdk/source/ceylon/json/Array.ceylon","../../ceylon-sdk/test-source/test/ceylon/json/use.ceylon","../../ceylon-sdk/source/ceylon/net/uri/Path.ceylon","../../ceylon-sdk/test-source/test/ceylon/net/run.ceylon","../../ceylon-sdk/source/ceylon/json/Printer.ceylon","../../ceylon-sdk/source/ceylon/json/Object.ceylon","../../ceylon-sdk/source/ceylon/net/uri/Query.ceylon","../../ceylon-sdk/test-source/test/ceylon/json/run.ceylon","../../ceylon-sdk/test-source/test/ceylon/net/connection.ceylon","../../ceylon-sdk/source/ceylon/json/parse.ceylon","../../ceylon-sdk/test-source/test/ceylon/json/parse.ceylon","../../ceylon-sdk/source/ceylon/net/uri/PathSegment.ceylon"}) {    sourceFiles.add(new File(s));  }  CeyloncTool compiler;  try {    compiler=new CeyloncTool();  } catch (  VerifyError e) {    System.err.println("ERROR: Cannot run tests! Did you maybe forget to configure the -Xbootclasspath/p: parameter?");    throw e;  }  CeyloncFileManager fileManager=(CeyloncFileManager)compiler.getStandardFileManager(null,null,null);  Iterable<? extends JavaFileObject> compilationUnits1=fileManager.getJavaFileObjectsFromFiles(sourceFiles);  String compilerSourcePath=sdkSourcePath + File.pathSeparator + testSourcePath;  CeyloncTaskImpl task=(CeyloncTaskImpl)compiler.getTask(null,fileManager,null,Arrays.asList("-sourcepath",compilerSourcePath,"-d","../../ceylon-sdk/modules"),null,compilationUnits1);  Boolean result=task.call();  Assert.assertEquals("Compilation failed",Boolean.TRUE,result);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:45.082 -0500",hash_original_method="89A45FCA5400E7297D291CB9BD4FA531",hash_generated_method="C888D2EBE22B33CBA481EECB8C6F0C39") public void error(int id,String description){  if (DebugFlags.LOAD_LISTENER) {    Log.v(LOGTAG,"LoadListener.error url:" + url() + " id:"+ id+ " description:"+ description);  }  sendMessageInternal(obtainMessage(MSG_CONTENT_ERROR,id,0,description));}  }
class C{  public static void register(){  CommandCenter.register(WHERE,new WhereAction());}  }
class C{  public void prepWritePane(boolean onlyChanges){  if (log.isDebugEnabled()) {    log.debug("start prepWritePane with " + onlyChanges);  }  justChanges=onlyChanges;  enableButtons(false);  if (isCvTablePane) {    setCvListFromTable();  }  if (justChanges == true) {    writeChangesButton.setEnabled(true);    writeChangesButton.setSelected(true);  } else {    writeAllButton.setSelected(true);    writeAllButton.setEnabled(true);  }  if (container.isBusy() == false) {    container.enableButtons(false);  }  setToWrite(justChanges,true);  varListIndex=0;  cvListIterator=cvList.iterator();  indexedCvListIndex=0;  log.debug("end prepWritePane");}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getTransition_();}  }
class C{  public void windowIconified(WindowEvent e){}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(getElementsByTagNameNS09.class,args);}  }
class C{  @Override public IContainer<?,?> cast(final IScope scope,final Object obj,final Object param,final IType<?> kt,final IType<?> ct,final boolean copy) throws GamaRuntimeException {  return type.cast(scope,obj,param,keyType,contentsType,copy);}  }
class C{  public boolean isOne(){  return polynomial.isOne();}  }
class C{  public void acceptDrag(int dragOperation){  getDropTargetContext().acceptDrag(dragOperation);}  }
class C{  public void registerContextStartedAware(GuzzContextAware aware){  if (this.fullStarted) {    aware.setGuzzContext(this);  } else {    this.contextAwareListeners.add(aware);  }}  }
class C{  public int numLocas(){  return this.getLocaList().size();}  }
class C{  @ReactMethod public void show(@Nullable ReadableMap options,Callback callback){  authCallback=callback;  authenticationReceiver.registerIn(this.broadcastManager);  ShowOptions showOptions=new ShowOptions(options);  lockBuilder.closable(showOptions.isClosable()).disableSignUp(showOptions.isDisableSignUp()).disableChangePassword(showOptions.isDisableResetPassword()).authenticationParameters(showOptions.getAuthParams());  if (showOptions.getConnections() != null) {    lockBuilder.useConnections(showOptions.getConnections());  }  LockContext.configureLock(lockBuilder);  Activity activity=getCurrentActivity();  if (activity == null) {    invokeAuthCallback(getReactApplicationContext().getString(R.string.com_auth0_android_react_native_lock_no_activity),null,null);    return;  }  Intent intent;switch (showOptions.getConnectionType()) {case CONNECTION_SMS:    intent=new Intent(activity,LockPasswordlessActivity.class);  intent.putExtra(LockPasswordlessActivity.PASSWORDLESS_TYPE_PARAMETER,showOptions.useMagicLink() ? LockPasswordlessActivity.MODE_SMS_MAGIC_LINK : LockPasswordlessActivity.MODE_SMS_CODE);break;case CONNECTION_EMAIL:intent=new Intent(activity,LockPasswordlessActivity.class);intent.putExtra(LockPasswordlessActivity.PASSWORDLESS_TYPE_PARAMETER,showOptions.useMagicLink() ? LockPasswordlessActivity.MODE_EMAIL_MAGIC_LINK : LockPasswordlessActivity.MODE_EMAIL_CODE);break;case CONNECTION_NATIVE:default :intent=new Intent(activity,LockActivity.class);}activity.startActivity(intent);}  }
class C{  @Override public void drawItem(Graphics2D g2,XYItemRendererState state,Rectangle2D dataArea,PlotRenderingInfo info,XYPlot plot,ValueAxis domainAxis,ValueAxis rangeAxis,XYDataset dataset,int series,int item,CrosshairState crosshairState,int pass){  if (!getItemVisible(series,item)) {    return;  }  PlotOrientation orientation=plot.getOrientation();  Paint seriesPaint=getItemPaint(series,item);  Stroke seriesStroke=getItemStroke(series,item);  g2.setPaint(seriesPaint);  g2.setStroke(seriesStroke);  double x1=dataset.getXValue(series,item);  double y1=dataset.getYValue(series,item);  RectangleEdge xAxisLocation=plot.getDomainAxisEdge();  RectangleEdge yAxisLocation=plot.getRangeAxisEdge();  double transX1=domainAxis.valueToJava2D(x1,dataArea,xAxisLocation);  double transY1=(Double.isNaN(y1) ? Double.NaN : rangeAxis.valueToJava2D(y1,dataArea,yAxisLocation));  if (pass == 0 && item > 0) {    double x0=dataset.getXValue(series,item - 1);    double y0=dataset.getYValue(series,item - 1);    double transX0=domainAxis.valueToJava2D(x0,dataArea,xAxisLocation);    double transY0=(Double.isNaN(y0) ? Double.NaN : rangeAxis.valueToJava2D(y0,dataArea,yAxisLocation));    if (orientation == PlotOrientation.HORIZONTAL) {      if (transY0 == transY1) {        drawLine(g2,state.workingLine,transY0,transX0,transY1,transX1,dataArea);      } else {        double transXs=transX0 + (getStepPoint() * (transX1 - transX0));        drawLine(g2,state.workingLine,transY0,transX0,transY0,transXs,dataArea);        drawLine(g2,state.workingLine,transY0,transXs,transY1,transXs,dataArea);        drawLine(g2,state.workingLine,transY1,transXs,transY1,transX1,dataArea);      }    } else     if (orientation == PlotOrientation.VERTICAL) {      if (transY0 == transY1) {        drawLine(g2,state.workingLine,transX0,transY0,transX1,transY1,dataArea);      } else {        double transXs=transX0 + (getStepPoint() * (transX1 - transX0));        drawLine(g2,state.workingLine,transX0,transY0,transXs,transY0,dataArea);        drawLine(g2,state.workingLine,transXs,transY0,transXs,transY1,dataArea);        drawLine(g2,state.workingLine,transXs,transY1,transX1,transY1,dataArea);      }    }    int domainAxisIndex=plot.getDomainAxisIndex(domainAxis);    int rangeAxisIndex=plot.getRangeAxisIndex(rangeAxis);    updateCrosshairValues(crosshairState,x1,y1,domainAxisIndex,rangeAxisIndex,transX1,transY1,orientation);    EntityCollection entities=state.getEntityCollection();    if (entities != null) {      addEntity(entities,null,dataset,series,item,transX1,transY1);    }  }  if (pass == 1) {    if (isItemLabelVisible(series,item)) {      double xx=transX1;      double yy=transY1;      if (orientation == PlotOrientation.HORIZONTAL) {        xx=transY1;        yy=transX1;      }      drawItemLabel(g2,orientation,dataset,series,item,xx,yy,(y1 < 0.0));    }  }}  }
class C{  public void activateGLEnvironment(){  GLEnvironment glEnv=mContext.getGLEnvironment();  if (glEnv != null) {    mContext.getGLEnvironment().activate();  } else {    throw new NullPointerException("No GLEnvironment in place to activate!");  }}  }
class C{  private boolean removeLinkFromStructure(Map<NodePortTuple,Set<Link>> s,Link l){  boolean result1=false, result2=false;  NodePortTuple n1=new NodePortTuple(l.getSrc(),l.getSrcPort());  NodePortTuple n2=new NodePortTuple(l.getDst(),l.getDstPort());  if (s.get(n1) != null) {    result1=s.get(n1).remove(l);    if (s.get(n1).isEmpty())     s.remove(n1);  }  if (s.get(n2) != null) {    result2=s.get(n2).remove(l);    if (s.get(n2).isEmpty())     s.remove(n2);  }  return result1 || result2;}  }
class C{  public static void doSwap(ByteBuffer bBuf){  bBuf.rewind();  int n=bBuf.limit();  for (int i=0; i < n; i+=4) {    byte b=bBuf.get(i);    bBuf.put(i,bBuf.get(i + 3));    bBuf.put(i + 3,b);    b=bBuf.get(i + 1);    bBuf.put(i + 1,bBuf.get(i + 2));    bBuf.put(i + 2,b);  }}  }
class C{  public Entry<T> min(){  if (isEmpty())   throw new NoSuchElementException("Heap is empty.");  return mMin;}  }
class C{  public static PartitionResponse send(InternalDistributedMember recipient,PartitionedRegion pr,HashSet<IndexCreationData> indexDefinitions){  RegionAdvisor advisor=(RegionAdvisor)(pr.getDistributionAdvisor());  final Set<InternalDistributedMember> recipients;  if (null == recipient) {    recipients=new HashSet(advisor.adviseDataStore());  } else {    recipients=new HashSet<InternalDistributedMember>();    recipients.add(recipient);  }  for (  InternalDistributedMember rec : recipients) {    if (rec.getVersionObject().compareTo(Version.GFE_81) < 0) {      throw new UnsupportedOperationException("Indexes should not be created during rolling upgrade");    }  }  IndexCreationResponse processor=null;  if (logger.isDebugEnabled()) {    logger.debug("Will be sending create index msg to : {}",recipients.toString());  }  if (recipients.size() > 0) {    processor=(IndexCreationResponse)(new IndexCreationMsg()).createReplyProcessor(pr,recipients);  }  IndexCreationMsg indMsg=new IndexCreationMsg(recipients,pr.getPRId(),processor,indexDefinitions);  if (logger.isDebugEnabled()) {    logger.debug("Sending index creation message: {}, to member(s) {}.",indMsg,recipients);  }  pr.getDistributionManager().putOutgoing(indMsg);  return processor;}  }
class C{  private static int writeTrack(Track track,DataOutputStream dataOutputStream) throws IOException {  int nLength=0;  if (dataOutputStream != null) {    dataOutputStream.writeInt(MidiConstants.TRACK_MAGIC);  }  int nTrackLength=0;  if (dataOutputStream != null) {    nTrackLength=writeTrack(track,null);  }  if (dataOutputStream != null) {    dataOutputStream.writeInt(nTrackLength);  }  MidiEvent previousEvent=null;  int[] anRunningStatusByte=new int[1];  anRunningStatusByte[0]=-1;  for (int nEvent=0; nEvent < track.size(); nEvent++) {    MidiEvent event=track.get(nEvent);    nLength+=writeEvent(event,previousEvent,anRunningStatusByte,dataOutputStream);    previousEvent=event;  }  return nLength;}  }
class C{  public boolean isQuoteTotalAmt(){  Object oo=get_Value(COLUMNNAME_IsQuoteTotalAmt);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean isReactivationLinkVisible(){  return isServiceSuspended() && isMarketplaceOwner();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.173 -0400",hash_original_method="4574F00D09202C3C6CB0980878ED0B22",hash_generated_method="41414794ED252B6DFA22D235D221EAEE") protected boolean handleDirectory(File directory,int depth,Collection<T> results) throws IOException {  return true;}  }
class C{  protected void parseAttributes(){  burnWhitespaces();  attribute=null;  while (reader.hasNextCharacter()) {    char character=reader.peekCharacter();    if (Strings.isNewLine(character) && (attribute != null || Strings.isNotEmpty(builder))) {      throwException("Expecting line end marker: '" + lineEnd + "'.");    }    character=next();    if (Strings.isNewLine(character) && (attribute != null || Strings.isNotEmpty(builder))) {      throwException("Expecting line end marker: '" + lineEnd + "'.");    } else     if (character == blockClosing) {      if (attribute != null || Strings.isNotEmpty(builder)) {        throwException("Unexpected tag close.");      }      return;    } else     if (Strings.isWhitespace(character) && attribute == null) {      continue;    } else     if (character == separator && attribute == null) {      addAttributeName();      continue;    } else     if (character == lineEnd) {      if (attribute == null) {        throwException("Found unexpected line end marker: '" + lineEnd + "'. Is separator ("+ separator+ ") missing?");      }      addAttribute();    } else {      builder.append(character);    }  }}  }
class C{  public static void main(String[] args){  String outputFile=null;  Double threshold=null;  Integer minimumLanes=null;  Scenario sc=ScenarioUtils.createScenario(ConfigUtils.createConfig());  MyLinkstatComparator mlc=null;  if (args.length != 7) {    throw new IllegalArgumentException("Wrong number of arguments");  } else {    mlc=new MyLinkstatComparator(args[0],args[1],args[2]);    outputFile=args[3];    threshold=Double.parseDouble(args[4]);    minimumLanes=Integer.parseInt(args[5]);    NetworkReaderMatsimV1 nr=new NetworkReaderMatsimV1(sc.getNetwork());    nr.readFile(args[6]);  }  mlc.compare(sc.getNetwork(),minimumLanes,threshold);  mlc.writeDifferenceToFile(outputFile);  log.info("-----------------------");  log.info("       Completed");  log.info("=======================");}  }
class C{  private void processElements(CWLJob parentJob,CWLJob job) throws CWLException {  CWLJobApp app=job.getApp();  for (  CWLInputPort port : app.getInputs()) {    port.setId(Draft2ToCWLConverter.convertPortID(port.getId()));  }  for (  CWLOutputPort port : app.getOutputs()) {    port.setId(Draft2ToCWLConverter.convertPortID(port.getId()));  }  if (app.isWorkflow()) {    CWLWorkflow workflow=(CWLWorkflow)app;    if (CollectionUtils.isEmpty(workflow.getDataLinks())) {      createDataLinks(workflow);    }  }  processPorts(parentJob,job,app.getInputs());  processPorts(parentJob,job,app.getOutputs());}  }
class C{  protected boolean isActiveSlot(String slot){  if (logger.isDebugEnabled() || Testing.DEBUG) {    String activeSlotListString=null;    for (    String slotName : this.activeSlotsList) {      if (activeSlotListString == null) {        activeSlotListString=slotName;      } else {        activeSlotListString+=", " + slotName;      }    }    logger.info("Checking slot: " + slot);    logger.info("Active slots: " + activeSlotListString);  }  if ((activeSlotsList != null) && !activeSlotsList.isEmpty() && slot != null) {    return activeSlotsList.contains(slot);  }  return false;}  }
class C{  public FloatListAdapter(AbstractFloatList content){  this.content=content;}  }
class C{  public void testBogusFormats() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  String msg=expected.getMessage();  assertTrue(msg,msg.contains("Unknown"));  assertTrue(msg,msg.contains("format"));  assertTrue(msg,msg.contains("bogus"));  expected=expectThrows(IllegalArgumentException.class,null);  msg=expected.getMessage();  assertTrue(msg,msg.contains("can not be specified"));  assertTrue(msg,msg.contains("format"));  assertTrue(msg,msg.contains("bogus"));}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"sti");  if (instruction.getOperands().size() != 0) {    throw new InternalTranslationException("Error: Argument instruction is not a sti instruction (invalid number of operand)");  }  final long baseOffset=instruction.getAddress().toLong() * 0x100;  instructions.add(ReilHelpers.createStr(baseOffset,OperandSize.BYTE,"1",OperandSize.BYTE,Helpers.INTERRUPT_FLAG));}  }
class C{  private void updateUDPCache(PingData pd){  if (setPingData == null && !warningLogged) {    findPingDataMethod();  }  if (setPingData != null) {    try {      setPingData.invoke(transport,new Object[]{pd});    } catch (    InvocationTargetException|IllegalAccessException e) {      if (!warningLogged) {        log.warn("Unable to update JGroups address cache - this may affect performance",e);        warningLogged=true;      }    }  }}  }
class C{  private boolean fillCoordinateFromXY(int x,int y,CodeDisplayCoordinate newCoordinate){  Map.Entry<Integer,CodeDisplayCoordinate> coordinate=yCoordinateToRowAndLine.floorEntry(y);  if (coordinate == null) {    newCoordinate.setRow(2);    newCoordinate.setColumn(1);    return true;  }  newCoordinate.setRow(coordinate.getValue().getRow());  newCoordinate.setLine(coordinate.getValue().getLine());  return fillColumnAndFieldIndexFromX(x,newCoordinate);}  }
class C{  public static final String writeTime(final double seconds,final String timeformat,final char separator){  if (TIMEFORMAT_SSSS.equals(timeformat)) {    return Long.toString((long)seconds);  }  if (seconds < 0) {    if (seconds == UNDEFINED_TIME)     return "undefined";    return "-" + writeTime(Math.abs(seconds),timeformat,separator);  }  double s=seconds;  long h=(long)(s / 3600);  s=s % 3600;  int m=(int)(s / 60);  s=s % 60;  StringBuilder str=new StringBuilder(10);  if (h < timeElements.length) {    str.append(timeElements[(int)h]);  } else {    str.append(Long.toString(h));  }  str.append(separator);  str.append(timeElements[m]);  if (TIMEFORMAT_HHMM.equals(timeformat)) {    return str.toString();  }  if (TIMEFORMAT_HHMMSS.equals(timeformat)) {    str.append(separator);    str.append(timeElements[(int)s]);    return str.toString();  }  if (TIMEFORMAT_HHMMSSDOTSS.equals(timeformat)) {    str.append(separator);    if (s < 10.) {      str.append("0");    }    str.append(s);    return str.toString();  }  throw new IllegalArgumentException("The time format (" + timeformat + ") is not known.");}  }
class C{  @Override public void attributeAdded(ServletContextAttributeEvent event){  log("attributeAdded('" + event.getName() + "', '"+ event.getValue()+ "')");}  }
class C{  public VcpcRunner(GraphSource graphWrapper,Parameters params,KnowledgeBoxModel knowledgeBoxModel){  super(graphWrapper.getGraph(),params,knowledgeBoxModel);}  }
class C{  static void svd_daxpy(int n,double da,double[] dx,int incx,double[] dy,int incy){  if (n <= 0 || incx == 0 || incy == 0)   return;  int ix=(incx == 1) ? 0 : n - 1;  int iy=(incy == 1) ? 0 : n - 1;  for (int i=0; i < n; i++) {    dy[iy]+=da * dx[ix];    iy+=incy;    ix+=incx;  }}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:35.674 -0500",hash_original_method="6F9C1831E48382AD1DFACEE268167E8E",hash_generated_method="D589AA3DC448C821179FDC12FF1C0570") public Response createResponse(int statusCode,CallIdHeader callId,CSeqHeader cSeq,FromHeader from,ToHeader to,List via,MaxForwardsHeader maxForwards,ContentTypeHeader contentType,byte[] content) throws ParseException {  if (callId == null || cSeq == null || from == null || to == null || via == null || maxForwards == null || content == null || contentType == null)   throw new NullPointerException("missing parameters");  SIPResponse sipResponse=new SIPResponse();  StatusLine statusLine=new StatusLine();  statusLine.setStatusCode(statusCode);  String reason=SIPResponse.getReasonPhrase(statusCode);  if (reason == null)   throw new ParseException(statusCode + " : Unknown",0);  statusLine.setReasonPhrase(reason);  sipResponse.setStatusLine(statusLine);  sipResponse.setCallId(callId);  sipResponse.setCSeq(cSeq);  sipResponse.setFrom(from);  sipResponse.setTo(to);  sipResponse.setVia(via);  sipResponse.setContent(content,contentType);  if (userAgent != null) {    sipResponse.setHeader(userAgent);  }  return sipResponse;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Period toPeriod(){  return new Period(getStartMillis(),getEndMillis(),getChronology());}  }
class C{  public Sector(double minLatitude,double minLongitude,double deltaLatitude,double deltaLongitude){  this.minLatitude=minLatitude;  this.minLongitude=minLongitude;  this.maxLatitude=Location.clampLatitude(minLatitude + (deltaLatitude > 0 ? deltaLatitude : Double.NaN));  this.maxLongitude=Location.clampLongitude(minLongitude + (deltaLongitude > 0 ? deltaLongitude : Double.NaN));}  }
class C{  public static String createSelectorFromAddress(String address){  StringBuilder stringBuilder=new StringBuilder();  if (!address.contains(",")) {    if (address.startsWith("!")) {      stringBuilder.append(ManagementHelper.HDR_ADDRESS + " NOT LIKE '" + address.substring(1,address.length())+ "%'");    } else {      stringBuilder.append(ManagementHelper.HDR_ADDRESS + " LIKE '" + address+ "%'");    }    return stringBuilder.toString();  }  return buildSelectorFromArray(address.split(","));}  }
class C{  public String viewMatrixResults(){  LOGGER.info("viewMatrixResults Method is called");  final HashMap workflowheaderparams=getHeaderParams();  getWorkFlowMatrixObject(workflowheaderparams);  setMode(RESULTS);  LOGGER.info("viewMatrixResults Method is ended");  return SEARCH;}  }
class C{  private UriResult findExistingOrCreateNewUri(File formFile) throws TaskCancelledException {  Cursor cursor=null;  Uri uri=null;  String mediaPath;  boolean isNew;  String formFilePath=formFile.getAbsolutePath();  mediaPath=FileUtils.constructMediaPath(formFilePath);  FileUtils.checkMediaPath(new File(mediaPath));  try {    String[] selectionArgs={formFile.getAbsolutePath()};    String selection=FormsColumns.FORM_FILE_PATH + "=?";    cursor=Collect.getInstance().getApplication().getContentResolver().query(FormsColumns.CONTENT_URI,null,selection,selectionArgs,null);    isNew=cursor.getCount() <= 0;    if (isNew) {      ContentValues v=new ContentValues();      v.put(FormsColumns.FORM_FILE_PATH,formFilePath);      v.put(FormsColumns.FORM_MEDIA_PATH,mediaPath);      Log.w(t,"Parsing document " + formFile.getAbsolutePath());      HashMap<String,String> formInfo=FileUtils.parseXML(formFile);      if (isCancelled()) {        throw new TaskCancelledException(formFile,"Form " + formFile.getName() + " was cancelled while it was being parsed.");      }      v.put(FormsColumns.DISPLAY_NAME,formInfo.get(FileUtils.TITLE));      v.put(FormsColumns.JR_VERSION,formInfo.get(FileUtils.VERSION));      v.put(FormsColumns.JR_FORM_ID,formInfo.get(FileUtils.FORMID));      v.put(FormsColumns.SUBMISSION_URI,formInfo.get(FileUtils.SUBMISSIONURI));      v.put(FormsColumns.BASE64_RSA_PUBLIC_KEY,formInfo.get(FileUtils.BASE64_RSA_PUBLIC_KEY));      uri=Collect.getInstance().getApplication().getContentResolver().insert(FormsColumns.CONTENT_URI,v);      Collect.getInstance().getActivityLogger().logAction(this,"insert",formFile.getAbsolutePath());    } else {      cursor.moveToFirst();      uri=Uri.withAppendedPath(FormsColumns.CONTENT_URI,cursor.getString(cursor.getColumnIndex(FormsColumns._ID)));      mediaPath=cursor.getString(cursor.getColumnIndex(FormsColumns.FORM_MEDIA_PATH));      Collect.getInstance().getActivityLogger().logAction(this,"refresh",formFile.getAbsolutePath());    }  }  finally {    if (cursor != null) {      cursor.close();    }  }  return new UriResult(uri,mediaPath,isNew);}  }
class C{  private void updateStorageViewInfo(VPlexStorageViewInfo storageViewInfo){  VPlexApiDiscoveryManager discoveryMgr=_vplexApiClient.getDiscoveryManager();  discoveryMgr.updateStorageViewInfo(storageViewInfo);}  }
class C{  boolean updateVirtualVolumeInfo(String clusterName,VPlexVirtualVolumeInfo virtualVolumeInfo) throws VPlexApiException {  String virtualVolumeName=virtualVolumeInfo.getName();  StringBuilder uriBuilder=new StringBuilder();  uriBuilder.append(VPlexApiConstants.URI_CLUSTERS.toString());  uriBuilder.append(clusterName);  uriBuilder.append(VPlexApiConstants.URI_VIRTUAL_VOLUMES.toString());  uriBuilder.append(virtualVolumeName);  URI requestURI=_vplexApiClient.getBaseURI().resolve(URI.create(uriBuilder.toString()));  s_logger.info("Virtual Volume Info Request URI is {}",requestURI.toString());  ClientResponse response=_vplexApiClient.get(requestURI);  String responseStr=response.getEntity(String.class);  s_logger.info("Response is {}",responseStr);  int status=response.getStatus();  response.close();  if (status == VPlexApiConstants.NOT_FOUND_STATUS) {    s_logger.info("requested volume {} not found on vplex cluster {}",virtualVolumeName,clusterName);    return false;  }  if (status != VPlexApiConstants.SUCCESS_STATUS) {    throw new VPlexApiException(String.format("Failed getting info for virtual " + "volume %s in cluster %s with status: %s",virtualVolumeName,clusterName,status));  }  try {    VPlexApiUtils.setAttributeValues(responseStr,virtualVolumeInfo);    s_logger.info("Updated Virtual Volume Info {}",virtualVolumeInfo.toString());  } catch (  Exception e) {    throw new VPlexApiException(String.format("Error processing system volume information: %s",e.getMessage()),e);  }  return true;}  }
class C{  public static void annotateGreedy(Data data,SparseNetworkLearner tagger,int inferenceLayer) throws IllegalArgumentException {  if (inferenceLayer != 1 && inferenceLayer != 2) {    throw new IllegalArgumentException("Terrible error- nonexisting inference layer");  }  for (int docid=0; docid < data.documents.size(); docid++) {    ArrayList<LinkedVector> sentences=data.documents.get(docid).sentences;    for (    LinkedVector sentence : sentences) {      for (int i=0; i < sentence.size(); ++i) {        NEWord w=(NEWord)sentence.get(i);        if (inferenceLayer == 1)         PredictionsToProbabilities.getAndSetPredictionConfidences(tagger,w,NEWord.LabelToLookAt.PredictionLevel1Tagger); else         PredictionsToProbabilities.getAndSetPredictionConfidences(tagger,w,NEWord.LabelToLookAt.PredictionLevel2Tagger);      }    }  }}  }
class C{  private void pushLocalChanges(){  Log.d(getClass().getSimpleName(),"pushLocalChanges()");  List<DBNote> notes=dbHelper.getLocalModifiedNotes();  for (  DBNote note : notes) {    Log.d(getClass().getSimpleName(),"   Process Local Note: " + note);    try {      OwnCloudNote remoteNote=null;switch (note.getStatus()) {case LOCAL_EDITED:        Log.d(getClass().getSimpleName(),"   ...create/edit");      if (note.getRemoteId() > 0) {        Log.d(getClass().getSimpleName(),"   ...try to edit");        remoteNote=client.editNote(note);      }    if (remoteNote == null) {      Log.d(getClass().getSimpleName(),"   ...Note does not exist on server -> (re)create");      remoteNote=client.createNote(note);      dbHelper.updateNote(note.getId(),remoteNote,note);    } else {      dbHelper.updateNote(note.getId(),remoteNote,note);    }  break;case LOCAL_DELETED:if (note.getRemoteId() > 0) {  Log.d(getClass().getSimpleName(),"   ...delete (from server and local)");  try {    client.deleteNote(note.getRemoteId());  } catch (  FileNotFoundException e) {    Log.d(getClass().getSimpleName(),"   ...Note does not exist on server (anymore?) -> delete locally");  }} else {  Log.d(getClass().getSimpleName(),"   ...delete (only local, since it was not synchronized)");}dbHelper.deleteNote(note.getId(),DBStatus.LOCAL_DELETED);break;default :throw new IllegalStateException("Unknown State of Note: " + note);}} catch (IOException|JSONException e) {e.printStackTrace();}}}  }
class C{  public ListResponse list(String categoryId,String subCategoryId,Integer offset,Integer numberOfResult) throws IOException {  ResponseWrapper responseWrapper=executeGETRequest(LIST_URL,new String[][]{{"c","3"},{"cat",categoryId},{"ctr",subCategoryId},{"o",(offset == null) ? null : String.valueOf(offset)},{"n",(numberOfResult == null) ? null : String.valueOf(numberOfResult)}});  return responseWrapper.getPayload().getListResponse();}  }
class C{  public boolean isRegionInvalidate(){  return this.opType == OP_TYPE_INVALIDATE && isRegion();}  }
class C{  public int total(){  try {    String sql="SELECT count(id_visitante) FROM tb_visitantes ";    stm=conector.prepareStatement(sql);    rs=stm.executeQuery(sql);    if (rs.next()) {      return rs.getInt(1);    }    stm.close();    rs.close();  } catch (  SQLException ex) {    Mensagem.erro("Erro ao consultar total de visitantes na base de dados! \n" + ex);  }  return 0;}  }
class C{  @Override public int hashCode(){  int result=193;  long temp=Double.doubleToLongBits(this.startAngle);  result=37 * result + (int)(temp ^ (temp >>> 32));  temp=Double.doubleToLongBits(this.extent);  result=37 * result + (int)(temp ^ (temp >>> 32));  temp=Double.doubleToLongBits(this.innerRadius);  result=37 * result + (int)(temp ^ (temp >>> 32));  temp=Double.doubleToLongBits(this.outerRadius);  result=37 * result + (int)(temp ^ (temp >>> 32));  result=37 * result + HashUtilities.hashCodeForPaint(this.backgroundPaint);  result=37 * result + HashUtilities.hashCodeForPaint(this.foregroundPaint);  result=37 * result + this.stroke.hashCode();  return result;}  }
class C{  public Address toAddress(){  return new Address(value);}  }
class C{  @JsonCreator public static CassandraConfig create(@JsonProperty("version") String version,@JsonProperty("cpus") double cpus,@JsonProperty("memory_mb") int memoryMb,@JsonProperty("disk_mb") int diskMb,@JsonProperty("disk_type") VolumeRequirement.VolumeType diskType,@JsonProperty("replace_ip") String replaceIp,@JsonProperty("heap") HeapConfig heap,@JsonProperty("location") Location location,@JsonProperty("jmx_port") int jmxPort,@JsonProperty("publish_discovery_info") boolean publishDiscoveryInfo,@JsonProperty("application") CassandraApplicationConfig application){  return new CassandraConfig(version,cpus,memoryMb,diskMb,diskType,replaceIp,heap,location,jmxPort,publishDiscoveryInfo,application);}  }
class C{  public ModuleFilterType createModuleFilterTypeFromString(EDataType eDataType,String initialValue){  ModuleFilterType result=ModuleFilterType.get(initialValue);  if (result == null)   throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '"+ eDataType.getName()+ "'");  return result;}  }
class C{  public boolean functionAvailable(String ns,String funcName) throws javax.xml.transform.TransformerException {  boolean isAvailable=false;  if (null != ns) {    ExtensionHandler extNS=(ExtensionHandler)m_extensionFunctionNamespaces.get(ns);    if (extNS != null)     isAvailable=extNS.isFunctionAvailable(funcName);  }  return isAvailable;}  }
class C{  private void updateFont(Font font){  StyledDocument doc=(StyledDocument)getComponent().getDocument();  Style style=doc.getStyle(StyleContext.DEFAULT_STYLE);  if (style == null) {    return;  }  if (font == null) {    style.removeAttribute(StyleConstants.FontFamily);    style.removeAttribute(StyleConstants.FontSize);    style.removeAttribute(StyleConstants.Bold);    style.removeAttribute(StyleConstants.Italic);  } else {    StyleConstants.setFontFamily(style,font.getName());    StyleConstants.setFontSize(style,font.getSize());    StyleConstants.setBold(style,font.isBold());    StyleConstants.setItalic(style,font.isItalic());  }}  }
class C{  public final void clear(){  checkPoint=-1;  if (current_item > 0) {    for (int i=0; i < current_item; i++) {      items[i]=null;    }  } else {    for (int i=0; i < max_size; i++) {      items[i]=null;    }  }  current_item=0;}  }
class C{  public SmsException(String msg){  super(msg);}  }
class C{  @Override public boolean hasSkip(){  return getDelegate().hasSkip();}  }
class C{  public static void main(final String[] args) throws Exception {  Banner.banner();  int port=80;  String namespace="kb";  int queryThreadPoolSize=ConfigParams.DEFAULT_QUERY_THREAD_POOL_SIZE;  boolean forceOverflow=false;  Long readLock=null;  String jettyXml=System.getProperty(SystemProperties.JETTY_XML,"jetty.xml");  if (System.getProperty(SystemProperties.JETTY_HOME) == null) {    final URL jettyJarXml=jettyXml.getClass().getResource("/war");    System.setProperty(SystemProperties.JETTY_HOME,jettyJarXml.toExternalForm());    if (System.getProperty(SystemProperties.JETTY_RESOURCE_BASE) == null) {      System.setProperty(SystemProperties.JETTY_RESOURCE_BASE,jettyJarXml.toExternalForm());    }  }  int i=0;  while (i < args.length) {    final String arg=args[i];    if (arg.startsWith("-")) {      if (arg.equals("-forceOverflow")) {        forceOverflow=true;      } else       if (arg.equals("-nthreads")) {        final String s=args[++i];        queryThreadPoolSize=Integer.valueOf(s);        if (queryThreadPoolSize < 0) {          usage(1,"-nthreads must be non-negative, not: " + s);        }      } else       if (arg.equals("-readLock")) {        final String s=args[++i];        readLock=Long.valueOf(s);        if (readLock != ITx.READ_COMMITTED && !TimestampUtility.isCommitTime(readLock.longValue())) {          usage(1,"Read lock must be commit time or -1 (MINUS ONE) to assert a read lock on the last commit time: " + readLock);        }      } else       if (arg.equals("-jettyXml")) {        jettyXml=args[++i];      } else {        usage(1,"Unknown argument: " + arg);      }    } else {      break;    }    i++;  }  final int nremaining=args.length - i;  if (nremaining != 3) {    usage(1,nremaining < 3 ? "Too few arguments." : "Too many arguments");  }{    final String s=args[i++];    try {      port=Integer.valueOf(s);    } catch (    NumberFormatException ex) {      usage(1,"Could not parse as port# : '" + s + "'");    }  }  namespace=args[i++];  final String propertyFile=args[i++];  final File pFile=new File(propertyFile);  if (!pFile.exists()) {    final String errMsg="Property or config file " + propertyFile + " does not exist and is a required parameter.";    System.err.println(errMsg);    log.error(errMsg);    throw new RuntimeException(errMsg);  }  final Map<String,String> initParams=new LinkedHashMap<String,String>();  initParams.put(ConfigParams.PROPERTY_FILE,propertyFile);  initParams.put(ConfigParams.NAMESPACE,namespace);  initParams.put(ConfigParams.QUERY_THREAD_POOL_SIZE,Integer.toString(queryThreadPoolSize));  initParams.put(ConfigParams.FORCE_OVERFLOW,Boolean.toString(forceOverflow));  if (readLock != null) {    initParams.put(ConfigParams.READ_LOCK,Long.toString(readLock));  }  final Server server=NanoSparqlServer.newInstance(port,jettyXml,null,initParams);  awaitServerStart(server);  server.join();}  }
class C{  public void addRequestListener(RequestListener requestListener){  this.eventDispatcher.addRequestListener(requestListener);}  }
class C{  public TreeRTGCocosNucifera(){  super();  this.logBlock=BlockUtil.getStateLog(3);  this.leavesBlock=BlockUtil.getStateLeaf(3);  this.trunkSize=8;  this.crownSize=7;}  }
class C{  public CacheHeader(String key,Entry entry){  this.key=key;  this.size=entry.data.length;  this.etag=entry.etag;  this.serverDate=entry.serverDate;  this.ttl=entry.ttl;  this.softTtl=entry.softTtl;  this.responseHeaders=entry.responseHeaders;}  }
class C{  protected String createFileMirrorSession(Workflow workflow,String waitFor,List<FileDescriptor> sourceDescriptors,Map<URI,FileShare> uriFileShareMap){  for (  FileDescriptor sourceDescriptor : sourceDescriptors) {    FileShare source=uriFileShareMap.get(sourceDescriptor.getFsURI());    for (    String targetStr : source.getMirrorfsTargets()) {      URI targetURI=URI.create(targetStr);      StorageSystem system=dbClient.queryObject(StorageSystem.class,source.getStorageDevice());      Workflow.Method createMethod=createMirrorFilePairStep(system.getId(),source.getId(),targetURI,null);      Workflow.Method rollbackMethod=rollbackMirrorFilePairMethod(system.getId(),source.getId(),targetURI);      waitFor=workflow.createStep(CREATE_FILE_MIRRORS_STEP,CREATE_FILE_MIRRORS_STEP_DESC,waitFor,system.getId(),system.getSystemType(),getClass(),createMethod,rollbackMethod,null);    }  }  return waitFor=CREATE_FILE_MIRRORS_STEP;}  }
class C{  public void testResultSets() throws Exception {  DatabaseMetaData dbmd=con.getMetaData();  ResultSet rs;  rs=dbmd.getAttributes(null,null,null,null);  assertTrue(checkColumnNames(rs,new String[]{"TYPE_CAT","TYPE_SCHEM","TYPE_NAME","ATTR_NAME","DATA_TYPE","ATTR_TYPE_NAME","ATTR_SIZE","DECIMAL_DIGITS","NUM_PREC_RADIX","NULLABLE","REMARKS","ATTR_DEF","SQL_DATA_TYPE","SQL_DATETIME_SUB","CHAR_OCTET_LENGTH","ORDINAL_POSITION","IS_NULLABLE","SCOPE_CATALOG","SCOPE_SCHEMA","SCOPE_TABLE","SOURCE_DATA_TYPE"}));  assertFalse(rs.next());  rs.close();  rs=dbmd.getSuperTables(null,null,"%");  assertTrue(checkColumnNames(rs,new String[]{"TABLE_CAT","TABLE_SCHEM","TABLE_NAME","SUPERTABLE_NAME"}));  assertFalse(rs.next());  rs.close();  rs=dbmd.getSuperTypes(null,null,"%");  assertTrue(checkColumnNames(rs,new String[]{"TYPE_CAT","TYPE_SCHEM","TYPE_NAME","SUPERTYPE_CAT","SUPERTYPE_SCHEM","SUPERTYPE_NAME"}));  assertFalse(rs.next());  rs.close();}  }
class C{  private <S extends Symbol>S nameToSymbol(String nameStr,Class<S> clazz){  Name name=names.fromString(nameStr);  Symbol sym=(clazz == ClassSymbol.class) ? syms.classes.get(name) : syms.packages.get(name);  try {    if (sym == null)     sym=javaCompiler.resolveIdent(nameStr);    sym.complete();    return (sym.kind != Kinds.ERR && sym.exists() && clazz.isInstance(sym) && name.equals(sym.getQualifiedName())) ? clazz.cast(sym) : null;  } catch (  CompletionFailure e) {    return null;  }}  }
class C{  private void initialize(){  this.setLayout(new CardLayout());  this.setName(Constant.messages.getString("view.options.title"));  this.add(getPanelMisc(),getPanelMisc().getName());}  }
class C{  public JFileChooser createFileChooser(){  JFileChooser fc=new JFileChooser();  if (getSwingSet2() != null && getSwingSet2().isDragEnabled()) {    fc.setDragEnabled(true);  }  File swingFile=new File("resources/images/About.jpg");  if (swingFile.exists()) {    fc.setCurrentDirectory(swingFile);    fc.setSelectedFile(swingFile);  }  return fc;}  }
class C{  private void instantiate(Arguments args,BasicArrayCopyNode arraycopy){  StructuredGraph graph=arraycopy.graph();  SnippetTemplate template=template(args);  Map<Node,Node> replacements=template.instantiate(providers.getMetaAccess(),arraycopy,SnippetTemplate.DEFAULT_REPLACER,args);  for (  Node originalNode : replacements.keySet()) {    if (originalNode instanceof Invoke) {      Invoke invoke=(Invoke)replacements.get(originalNode);      assert invoke.asNode().graph() == graph;      CallTargetNode call=invoke.callTarget();      if (!call.targetMethod().equals(originalArraycopy)) {        throw new GraalError("unexpected invoke %s in snippet",call.targetMethod());      }      InvokeNode newInvoke=graph.add(new InvokeNode(invoke.callTarget(),arraycopy.getBci()));      if (arraycopy.stateDuring() != null) {        newInvoke.setStateDuring(arraycopy.stateDuring());      } else {        assert arraycopy.stateAfter() != null;        newInvoke.setStateAfter(arraycopy.stateAfter());      }      graph.replaceFixedWithFixed((InvokeNode)invoke.asNode(),newInvoke);    } else     if (originalNode instanceof ArrayCopySlowPathNode) {      ArrayCopySlowPathNode slowPath=(ArrayCopySlowPathNode)replacements.get(originalNode);      assert arraycopy.stateAfter() != null;      slowPath.setStateAfter(arraycopy.stateAfter());      slowPath.setBci(arraycopy.getBci());    }  }}  }
class C{  public void discardRecording(){  if (recorder != null) {    try {      recorder.stop();      recorder.release();      recorder=null;      if (file != null && file.exists() && !file.isDirectory()) {        file.delete();      }    } catch (    IllegalStateException e) {    }catch (    RuntimeException e) {    }    isRecording=false;  }}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public String sqlAD_getCustomParametersWithoutElement(String vendorName,String catalogName,String schemaName,ArrayList<String> customEntities){  String tableName="AD_Process_Para";  String tableAlias="c";  ArrayList<String> columnNames=new ArrayList<String>();  columnNames.add("ColumnName");  columnNames.add("Name");  columnNames.add("Description");  columnNames.add("Help");  columnNames.add("EntityType");  ArrayList<String> aliasNames=null;  ArrayList<String> conditions=new ArrayList<String>();  String subQuery=sql_select(vendorName,catalogName,schemaName,"AD_Element","e",new ArrayList<String>(Arrays.asList("1")),null,new ArrayList<String>(Arrays.asList("UPPER(c.ColumnName)=UPPER(e.ColumnName)")),null,false);  conditions.add(new StringBuffer("NOT EXISTS (").append(subQuery).append(")").toString());  StringBuffer entityClause=new StringBuffer();  if (customEntities != null && customEntities.size() > 0) {    for (int i=0; i < customEntities.size(); i++) {      if (i == 0)       entityClause.append("c.entitytype IN ("); else       entityClause.append(", ");      entityClause.append("'").append(customEntities.get(i)).append("'");    }    entityClause.append(")");  }  conditions.add(entityClause.toString());  ArrayList<String> sortColumns=new ArrayList<String>();  sortColumns.add("1");  return sql_select(vendorName,catalogName,schemaName,tableName,tableAlias,columnNames,aliasNames,conditions,sortColumns,true);}  }
class C{  public boolean isRegistered(HGIndexer<?,?> indexer){  List<HGIndexer<?,?>> forType=indexers.get(indexer.getType());  return forType == null ? false : forType.contains(indexer);}  }
class C{  public boolean hasValue(){  return super.hasTextValue();}  }
class C{  public DefaultSerializer(final ILogger logger){  mLogger=logger;  mGson=GsonFactory.getGsonInstance(logger);}  }
class C{  public T caseAnnotationList(AnnotationList object){  return null;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  boolean matchBinary(SearchPattern pattern,Object binaryInfo,IBinaryType enclosingBinaryType){switch (pattern.kind) {case CONSTRUCTOR_PATTERN:    return matchConstructor((ConstructorPattern)pattern,binaryInfo,enclosingBinaryType);case FIELD_PATTERN:  return matchField((FieldPattern)pattern,binaryInfo,enclosingBinaryType);case METHOD_PATTERN:return matchMethod((MethodPattern)pattern,binaryInfo,enclosingBinaryType);case SUPER_REF_PATTERN:return matchSuperTypeReference((SuperTypeReferencePattern)pattern,binaryInfo,enclosingBinaryType);case TYPE_DECL_PATTERN:return matchTypeDeclaration((TypeDeclarationPattern)pattern,binaryInfo,enclosingBinaryType);case OR_PATTERN:SearchPattern[] patterns=((OrPattern)pattern).patterns;for (int i=0, length=patterns.length; i < length; i++) if (matchBinary(patterns[i],binaryInfo,enclosingBinaryType)) return true;}return false;}  }
class C{  public SubspaceClusterDefinition(ClusterGenerator parent){  super(parent);}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  StringBuffer sb=new StringBuffer();  sb.append(m_arg0.execute(xctxt).str());  sb.append(m_arg1.execute(xctxt).str());  if (null != m_arg2)   sb.append(m_arg2.execute(xctxt).str());  if (null != m_args) {    for (int i=0; i < m_args.length; i++) {      sb.append(m_args[i].execute(xctxt).str());    }  }  return new XString(sb.toString());}  }
class C{  public void reply(CanReply m){  log.debug("Received new reply event: " + m);  _id[_rowCount]=CbusMessage.getId(m);  _node[_rowCount]=m.getElement(1) * 256 + m.getElement(2);  _event[_rowCount]=m.getElement(3) * 256 + m.getElement(4);  _type[_rowCount]=(m.getOpCode() & 1) == 0;  addEvent();}  }
class C{  private static boolean validateIpAddr(String value){  return InetAddresses.isInetAddress(value);}  }
class C{  public void testMoveRenameFileDestinationMissing() throws Exception {  create(igfsSecondary,paths(DIR,SUBDIR,DIR_NEW,SUBDIR_NEW),paths(FILE));  create(igfs,paths(DIR,SUBDIR),paths(FILE));  igfs.rename(FILE,FILE_NEW);  checkExist(igfs,DIR_NEW,SUBDIR_NEW);  checkExist(igfs,igfsSecondary,FILE_NEW);  checkNotExist(igfs,igfsSecondary,FILE);}  }
class C{  public LongMap(int initialCapacity,float loadFactor){  if (initialCapacity < 0)   throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);  if (capacity > 1 << 30)   throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);  capacity=MathUtils.nextPowerOfTwo(initialCapacity);  if (loadFactor <= 0)   throw new IllegalArgumentException("loadFactor must be > 0: " + loadFactor);  this.loadFactor=loadFactor;  threshold=(int)(capacity * loadFactor);  mask=capacity - 1;  hashShift=31 - Integer.numberOfTrailingZeros(capacity);  stashCapacity=Math.max(3,(int)Math.ceil(Math.log(capacity)) + 1);  pushIterations=Math.max(Math.min(capacity,32),(int)Math.sqrt(capacity) / 4);  keyTable=new long[capacity + stashCapacity];  valueTable=(V[])new Object[keyTable.length];}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GroupAudio'";  db.execSQL(sql);}  }
class C{  @Nonnull public BugInstance addSourceLine(ClassContext classContext,Method method,Location location){  return addSourceLine(classContext,method,location.getHandle());}  }
class C{  public boolean accept(T obj){  return judgment;}  }
class C{  public static void checkPermissions(IUser user,IGuild guild,EnumSet<Permissions> required) throws MissingPermissionsException {  try {    EnumSet<Permissions> contained=EnumSet.noneOf(Permissions.class);    List<IRole> roles=user.getRolesForGuild(guild);    for (    IRole role : roles) {      contained.addAll(role.getPermissions());    }    checkPermissions(contained,required);  } catch (  UnsupportedOperationException e) {  }}  }
class C{  private static boolean isSorted(Comparable[] a){  return isSorted(a,0,a.length - 1);}  }
class C{  public AssertionError(float detailMessage){  this(String.valueOf(detailMessage));}  }
class C{  public DefaultActionGroup(ActionManager actionManager,Action... actions){  this(null,false,actionManager);  for (  Action action : actions) {    add(action);  }}  }
class C{  private static boolean IsParType(int type){  return (type == PAR) || (type == RIGHT_MULTI);}  }
class C{  public void load(JarFile[] jarFiles) throws IOException {  data=new Object[jarFiles.length][8];  for (int i=0; i < jarFiles.length; i++) {    JarFile jarFile=jarFiles[i];    String fileName=jarFile.getName();    File file=new File(fileName);    Manifest manifest=jarFile.getManifest();    String implementationTitle="";    String implementationVersion="";    String implementationVendor="";    String specificationTitle="";    String specificationVersion="";    String specificationVendor="";    if (manifest != null) {      Attributes attributes=manifest.getMainAttributes();      String value=attributes.getValue("Specification-Title");      if (value != null) {        specificationTitle=value;      }      value=attributes.getValue("Specification-Version");      if (value != null) {        specificationVersion=value;      }      value=attributes.getValue("Specification-Vendor");      if (value != null) {        specificationVendor=value;      }      value=attributes.getValue("Implementation-Title");      if (value != null) {        implementationTitle=value;      }      value=attributes.getValue("Implementation-Version");      if (value != null) {        implementationVersion=value;      }      value=attributes.getValue("Implementation-Vendor");      if (value != null) {        implementationVendor=value;      }    }    data[i][0]=file.getName();    data[i][1]=Math.round(file.length() / 1024);    data[i][2]=specificationTitle;    data[i][3]=specificationVersion;    data[i][4]=specificationVendor;    data[i][5]=implementationTitle;    data[i][6]=implementationVersion;    data[i][7]=implementationVendor;  }  fireTableDataChanged();}  }
class C{  protected void initView(){}  }
class C{  public final boolean isDiseased(final String genome){  return mPedigree.isDiseased(genome);}  }
class C{  public void test_chooseServerAlias(){  init(SERVER);  assertNull(manager.chooseServerAlias(null,null,new Socket()));  assertNull(manager.chooseServerAlias("",null,new Socket()));  String res=manager.chooseServerAlias(TYPE_RSA,null,null);  assertNotNull(res);  assertEquals("serverkey_00",res.toLowerCase());  res=manager.chooseServerAlias(TYPE_RSA,null,new Socket());  assertNotNull(res);  assertEquals("serverkey_00",res.toLowerCase());}  }
class C{  public static boolean isCaptured(TypeVariable typeVar){  return ((Type.TypeVar)((Type)typeVar).unannotatedType()).isCaptured();}  }
class C{  public boolean isUnmappable(){  return this.type == TYPE_UNMAPPABLE_CHAR;}  }
class C{  public <T>void cleanNullReferences(Class<T> clazz){  Map<Object,Reference<Object>> objectMap=getMapForClass(clazz);  if (objectMap != null) {    cleanMap(objectMap);  }}  }
class C{  private void playNext(){  if (mediaType == Config.YOUTUBE_MEDIA_TYPE_VIDEO) {    seekVideo(0);    restartVideo();    return;  }  if (previousWasCalled) {    previousWasCalled=false;    iterator.next();  }  if (!iterator.hasNext()) {    iterator=youTubeVideos.listIterator();  }  videoItem=iterator.next();  nextWasCalled=true;  playVideo();}  }
class C{  public static boolean mayOverrideOrImplementByMetaType(MemberType overrideCandidate,MemberType overriddenCandidate){  if (overriddenCandidate == overrideCandidate) {    return true;  }switch (overrideCandidate) {case FIELD:    return overriddenCandidate != MemberType.METHOD;case SETTER:case GETTER:  return overriddenCandidate == MemberType.FIELD;case METHOD:}return false;}  }
class C{  public boolean isSetVersions(){  return this.versions != null;}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.chartArea=(Rectangle2D)SerialUtilities.readShape(stream);}  }
class C{  public static <V,E>DirectedGraph<V,E> synchronizedDirectedGraph(DirectedGraph<V,E> graph){  return new SynchronizedDirectedGraph<V,E>(graph);}  }
class C{  protected void addFromChannelsPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Endpoint_fromChannels_feature"),getString("_UI_PropertyDescriptor_description","_UI_Endpoint_fromChannels_feature","_UI_Endpoint_type"),EipPackage.Literals.ENDPOINT__FROM_CHANNELS,true,false,true,null,null,null));}  }
class C{  public void endDocument() throws SAXException {  super.endDocument();  m_exptype.addElement(NULL);  m_parent.addElement(NULL);  m_nextsib.addElement(NULL);  m_firstch.addElement(NULL);  m_extendedTypes=m_expandedNameTable.getExtendedTypes();  m_exptype_map=m_exptype.getMap();  m_nextsib_map=m_nextsib.getMap();  m_firstch_map=m_firstch.getMap();  m_parent_map=m_parent.getMap();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:20.784 -0500",hash_original_method="306E7BCD0818ADE89EBA434EE06262F7",hash_generated_method="B80DE44C36094CCD8F7BFB6AC88EC24C") private void updateSearchBadge(){  int visibility=View.GONE;  Drawable icon=null;  CharSequence text=null;  if (mSearchable.useBadgeIcon()) {    icon=mActivityContext.getResources().getDrawable(mSearchable.getIconId());    visibility=View.VISIBLE;    if (DBG)     Log.d(LOG_TAG,"Using badge icon: " + mSearchable.getIconId());  } else   if (mSearchable.useBadgeLabel()) {    text=mActivityContext.getResources().getText(mSearchable.getLabelId()).toString();    visibility=View.VISIBLE;    if (DBG)     Log.d(LOG_TAG,"Using badge label: " + mSearchable.getLabelId());  }  mBadgeLabel.setCompoundDrawablesWithIntrinsicBounds(icon,null,null,null);  mBadgeLabel.setText(text);  mBadgeLabel.setVisibility(visibility);}  }
class C{  public TitlePaneCloseButtonWindowNotFocusedState(){  super("WindowNotFocused");}  }
class C{  public void makeCellGrowthFigure(LogicCircuit lc,String suffix){  ArrayList<Gate> gates=new ArrayList<Gate>();  gates.addAll(lc.get_output_gates());  gates.addAll(lc.get_logic_gates());  for (int i=0; i < gates.size(); ++i) {    String outname=gates.get(i).Name;    String name_logic_rpus=lc.get_assignment_name() + "_" + outname+ "_"+ suffix+ ".txt";    String logic_rpus_data=lc.printLogicRPU(gates.get(i));    Util.fileWriter(_output_directory + name_logic_rpus,logic_rpus_data,false);    String name_rpus=lc.get_assignment_name() + "_" + gates.get(i).Name+ "_"+ suffix+ ".txt";    String logic_string=BooleanLogic.logicString(gates.get(i).get_logics());    logic_string=logic_string.replaceAll("[^\\d.]","");    String cmd="perl " + _home + "/resources/scripts/make_gnuplot_cellgrowth.pl "+ _output_directory+ " "+ _dateID+ " "+ name_rpus;    String command_result=Util.executeCommand(cmd);  }}  }
class C{  public static XMLReader createXMLReader(String name) throws SAXException {  final Logger logger=LoggerFactory.getLogger(XMLReader.class);  XMLReader reader=null;  try {    reader=_createXMLReader(name);  } catch (  ClassNotFoundException e) {    logger.error("Class " + name + " not found");    throw new SAXException(e);  }catch (  ClassCastException e) {    logger.error(name + " is not a valid XMLReader.");    throw new SAXException(e);  }catch (  Exception e) {    logger.error("Could not create instance of " + name);    throw new SAXException(e);  }  return reader;}  }
class C{  public static <T>ContextEncodedCachingLmWrapper<T> wrapWithCacheThreadSafe(final ContextEncodedNgramLanguageModel<T> lm){  return wrapWithCacheThreadSafe(lm,16);}  }
class C{  public void clear(){  refSet.clear();  countPoints=0;}  }
class C{  public static long toLong(byte[] bytes,int offset){  if (littleEndian) {    return Long.reverseBytes(theUnsafe.getLong(bytes,offset + BYTE_ARRAY_BASE_OFFSET));  } else {    return theUnsafe.getLong(bytes,offset + BYTE_ARRAY_BASE_OFFSET);  }}  }
class C{  protected int execScript(String script,StringList args){  if (isWindows()) {    StringList newArgs=new StringList();    newArgs.add("/C");    newArgs.add(script);    newArgs.addAll(args);    return exec("cmd",newArgs);  }  return exec(script,args);}  }
class C{  public BinC45Split(int attIndex,int minNoObj,double sumOfWeights,boolean useMDLcorrection){  m_attIndex=attIndex;  m_minNoObj=minNoObj;  m_sumOfWeights=sumOfWeights;  m_useMDLcorrection=useMDLcorrection;}  }
class C{  public void acceptYours(final int[] rows){  logger.info("Accepting yours for " + rows.length + " conflicts");  conflictHelper.acceptChangeAsync(getSelectedConflicts(rows),ResolveConflictsCommand.AutoResolveType.KeepYours,this);}  }
class C{  public static void main(String... args) throws Exception {  Class.forName("org.h2.Driver");  Connection conn=DriverManager.getConnection("jdbc:h2:mem:","sa","");  Statement stat=conn.createStatement();  stat.execute("CREATE ALIAS P2C " + "FOR \"org.h2.samples.FunctionMultiReturn.polar2Cartesian\" ");  PreparedStatement prep=conn.prepareStatement("SELECT X, Y FROM P2C(?, ?)");  prep.setDouble(1,5.0);  prep.setDouble(2,0.5);  ResultSet rs=prep.executeQuery();  while (rs.next()) {    double x=rs.getDouble(1);    double y=rs.getDouble(2);    System.out.println("result: (x=" + x + ", y="+ y+ ")");  }  stat.execute("CREATE TABLE TEST(ID IDENTITY, R DOUBLE, A DOUBLE)");  stat.execute("INSERT INTO TEST(R, A) VALUES(5.0, 0.5), (10.0, 0.6)");  stat.execute("CREATE ALIAS P2C_SET " + "FOR \"org.h2.samples.FunctionMultiReturn.polar2CartesianSet\" ");  rs=conn.createStatement().executeQuery("SELECT * FROM P2C_SET('SELECT * FROM TEST')");  while (rs.next()) {    double r=rs.getDouble("R");    double a=rs.getDouble("A");    double x=rs.getDouble("X");    double y=rs.getDouble("Y");    System.out.println("(r=" + r + " a="+ a+ ") :"+ " (x="+ x+ ", y="+ y+ ")");  }  stat.execute("CREATE ALIAS P2C_A " + "FOR \"org.h2.samples.FunctionMultiReturn.polar2CartesianArray\" ");  rs=conn.createStatement().executeQuery("SELECT R, A, P2C_A(R, A) FROM TEST");  while (rs.next()) {    double r=rs.getDouble(1);    double a=rs.getDouble(2);    Object o=rs.getObject(3);    Object[] xy=(Object[])o;    double x=((Double)xy[0]).doubleValue();    double y=((Double)xy[1]).doubleValue();    System.out.println("(r=" + r + " a="+ a+ ") :"+ " (x="+ x+ ", y="+ y+ ")");  }  rs=stat.executeQuery("SELECT R, A, ARRAY_GET(E, 1), ARRAY_GET(E, 2) " + "FROM (SELECT R, A, P2C_A(R, A) E FROM TEST)");  while (rs.next()) {    double r=rs.getDouble(1);    double a=rs.getDouble(2);    double x=rs.getDouble(3);    double y=rs.getDouble(4);    System.out.println("(r=" + r + " a="+ a+ ") :"+ " (x="+ x+ ", y="+ y+ ")");  }  rs.close();  prep.close();  conn.close();}  }
class C{  private SelectionHandle(final PNodeLocator locator){  this(locator,DEFAULT_EXTEND_FACTOR);}  }
class C{  private Map<String,Object> handleSettlementDecline(Transaction transaction){  logger.warningfmt("Settlement declined: %s %s",transaction.getProcessorSettlementResponseCode(),transaction.getProcessorSettlementResponseText());  return JsonResponseHelper.create(ERROR,"Payment declined: " + transaction.getProcessorSettlementResponseText());}  }
class C{  public synchronized void release(){  for (int i=current; i >= 0; i--) {    if (handlers[i] instanceof Tag) {      ((Tag)handlers[i]).release();    }    if (resourceInjector != null) {      resourceInjector.preDestroy(handlers[i]);    }  }}  }
class C{  public EventStoreBuilder maxOperationQueueSize(int size){  settingsBuilder.maxOperationQueueSize(size);  return this;}  }
class C{  private void processElementDataset(GeneratorMain gen,Node cur){  String seedstr=((Element)cur).getAttribute(ATTR_SEED);  if (clusterRandom != RandomFactory.DEFAULT && seedstr != null && seedstr.length() > 0) {    clusterRandom=new RandomFactory((long)(Integer.parseInt(seedstr) * sizescale));  }  String testmod=((Element)cur).getAttribute(ATTR_TEST);  if (testmod != null && testmod.length() > 0) {    testAgainstModel=Boolean.valueOf(Integer.parseInt(testmod) != 0);  }  XMLNodeIterator iter=new XMLNodeIterator(cur.getFirstChild());  while (iter.hasNext()) {    Node child=iter.next();    if (TAG_CLUSTER.equals(child.getNodeName())) {      processElementCluster(gen,child);    } else     if (TAG_STATIC.equals(child.getNodeName())) {      processElementStatic(gen,child);    } else     if (child.getNodeType() == Node.ELEMENT_NODE) {      LOG.warning("Unknown element in XML specification file: " + child.getNodeName());    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:04.923 -0500",hash_original_method="C56687AB499DA35AD83666C42808A3B2",hash_generated_method="7668CEF39E8CDEF265D2D91FCC382449") @DSVerified @DSSafe(DSCat.SAFE_OTHERS) public int available() throws IOException {  return (buf.length - pos) + in.available();}  }
class C{  public CircleDockBattery(Context context){  this(context,null);}  }
class C{  public static SourceUnit create(String name,String source){  CompilerConfiguration configuration=new CompilerConfiguration();  configuration.setTolerance(1);  return new SourceUnit(name,source,configuration,null,new ErrorCollector(configuration));}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public SelectProcessParser(final ClientReader clientReader){  super(clientReader,DebugCommandType.RESP_SELECT_PROCESS_SUCCESS);}  }
class C{  @Override public void respond(String response){  getChannel().send().message(response);}  }
class C{  public void deactivate(URI id){  doDeactivate(id);}  }
class C{  void addEntry(int hash,K key,V value,int bucketIndex){  if ((size >= threshold) && (null != table[bucketIndex])) {    resize(2 * table.length);    hash=(null != key) ? hash(key) : 0;    bucketIndex=indexFor(hash,table.length);  }  createEntry(hash,key,value,bucketIndex);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  MediaFile mf=getMediaFile(stack);  return Boolean.valueOf(mf != null && mf.isVideo());}  }
class C{  public NmeaReader createSerialPortReader(){  NmeaReader result=null;  try {    Class<?> cls=Class.forName("aimax.osm.gps.NmeaSerialPortReader");    result=(NmeaReader)cls.newInstance();  } catch (  Throwable e) {    e.printStackTrace();  }  return result;}  }
class C{  @Override public void write(URI f,URIChooser chooser) throws IOException {  Drawing drawing=view.getDrawing();  OutputFormat outputFormat=drawing.getOutputFormats().get(0);  outputFormat.write(f,drawing);}  }
class C{  public SGenAdapterFactory(){  if (modelPackage == null) {    modelPackage=SGenPackage.eINSTANCE;  }}  }
class C{  public int readUnsignedIntToInt(){  int result=shiftIntoInt(data,position,4);  position+=4;  if (result < 0) {    throw new IllegalArgumentException("Top bit not zero: " + result);  }  return result;}  }
class C{  public UnscheduleTimeEventItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public static String removeAllXpectComments(String text){  String res="";  res=replaceSingleLineXpect(text);  res=replaceMultiLineXpect(res);  return res;}  }
class C{  public static void preinstall() throws InstallFailedException {  Properties metaConfiguration=CommonUtils.loadMetaConfiguration();  File portableSettingsDir=null;  if (!metaConfiguration.isEmpty()) {    portableSettingsDir=CommonUtils.getPortableSettingsDir(metaConfiguration);  }  File userSettingsDir=(portableSettingsDir == null) ? CommonUtils.getUserSettingsDir() : portableSettingsDir;  preinstall(userSettingsDir);}  }
class C{  public boolean isFrameVertex(Vertex v){  if (v.equals(frameVertex[0]))   return true;  if (v.equals(frameVertex[1]))   return true;  if (v.equals(frameVertex[2]))   return true;  return false;}  }
class C{  public boolean isDefaultCapable(){  return defaultCapable;}  }
class C{  public SearchRequestBuilder addScriptField(String name,Script script){  sourceBuilder().scriptField(name,script);  return this;}  }
class C{  public ChartEntity(Shape area,String toolTipText){  this(area,toolTipText,null);}  }
class C{  private List findMeasurementPattern(){  int ng[][]=new int[numVariables()][numVariables()];  int cv[][]=new int[numVariables()][numVariables()];  boolean selected[]=new boolean[numVariables()];  for (int i=0; i < numVariables(); i++) {    selected[i]=false;  }  List initialClustering=initialMeasurementPattern(ng,cv);  printClustering(initialClustering);  List<Set<String>> forbiddenList=new ArrayList<>();  for (int c1=0; c1 < initialClustering.size(); c1++) {    int nextCluster[]=(int[])initialClustering.get(c1);    for (int i=0; i < nextCluster.length; i++) {      selected[nextCluster[i]]=true;      for (int j=i + 1; j < nextCluster.length; j++) {        Set<String> nextPair=new HashSet<>();        nextPair.add(this.tetradTest.getVarNames()[nextCluster[i]]);        nextPair.add(this.tetradTest.getVarNames()[nextCluster[j]]);        forbiddenList.add(nextPair);      }    }    for (int c2=c1 + 1; c2 < initialClustering.size(); c2++) {      int nextCluster2[]=(int[])initialClustering.get(c2);      for (int i=0; i < nextCluster.length; i++) {        for (int j=0; j < nextCluster2.length; j++) {          Set<String> nextPair=new HashSet<>();          nextPair.add(this.tetradTest.getVarNames()[nextCluster[i]]);          nextPair.add(this.tetradTest.getVarNames()[nextCluster2[j]]);          forbiddenList.add(nextPair);        }      }    }  }  for (int i=0; i < numVariables(); i++) {    for (int j=0; j < numVariables(); j++) {      if (selected[i] && selected[j] && (ng[i][j] == EDGE_BLUE || ng[i][j] == EDGE_YELLOW)) {        ng[i][j]=EDGE_RED;      } else       if ((!selected[i] || !selected[j]) && ng[i][j] == EDGE_YELLOW) {        ng[i][j]=EDGE_BLUE;      }    }  }  for (int x1=0; x1 < numVariables() - 1; x1++) {    outer_loop:     for (int y1=x1 + 1; y1 < numVariables(); y1++) {      if (ng[x1][y1] != EDGE_BLUE) {        continue;      }      boolean found=false;      for (int x2=0; x2 < numVariables(); x2++) {        if (x1 == x2 || y1 == x2 || cv[x1][x2] == EDGE_NONE || cv[y1][x2] == EDGE_NONE) {          continue;        }        for (int x3=0; x3 < numVariables(); x3++) {          if (x1 == x3 || x2 == x3 || y1 == x3 || cv[x1][x3] == EDGE_NONE || cv[x2][x3] == EDGE_NONE || cv[y1][x3] == EDGE_NONE || !partialRule1_1(x1,x2,x3,y1)) {            continue;          }          for (int y2=0; y2 < numVariables(); y2++) {            if (x1 == y2 || x2 == y2 || x3 == y2 || y1 == y2 || cv[x1][y2] == EDGE_NONE || cv[x2][y2] == EDGE_NONE || cv[x3][y2] == EDGE_NONE || cv[y1][y2] == EDGE_NONE || !partialRule1_2(x1,x2,y1,y2)) {              continue;            }            for (int y3=0; y3 < numVariables(); y3++) {              if (x1 == y3 || x2 == y3 || x3 == y3 || y1 == y3 || y2 == y3 || cv[x1][y3] == EDGE_NONE || cv[x2][y3] == EDGE_NONE || cv[x3][y3] == EDGE_NONE || cv[y1][y3] == EDGE_NONE || cv[y2][y3] == EDGE_NONE || !partialRule1_3(x1,y1,y2,y3)) {                continue;              }              ng[x1][y1]=ng[y1][x1]=EDGE_NONE;              found=true;              continue outer_loop;            }          }        }      }      if (!found) {      }    }  }  System.out.println("Trying RULE 2 now!");  for (int x1=0; x1 < numVariables() - 1; x1++) {    outer_loop:     for (int y1=x1 + 1; y1 < numVariables(); y1++) {      if (ng[x1][y1] != EDGE_BLUE) {        continue;      }      boolean found=false;      for (int x2=0; x2 < numVariables(); x2++) {        if (x1 == x2 || y1 == x2 || cv[x1][x2] == EDGE_NONE || cv[y1][x2] == EDGE_NONE || ng[x1][x2] == EDGE_GRAY) {          continue;        }        for (int y2=0; y2 < numVariables(); y2++) {          if (x1 == y2 || x2 == y2 || y1 == y2 || cv[x1][y2] == EDGE_NONE || cv[x2][y2] == EDGE_NONE || cv[y1][y2] == EDGE_NONE || ng[y1][y2] == EDGE_GRAY || !partialRule2_1(x1,x2,y1,y2)) {            continue;          }          for (int x3=0; x3 < numVariables(); x3++) {            if (x1 == x3 || x2 == x3 || y1 == x3 || y2 == x3 || ng[x1][x3] == EDGE_GRAY || cv[x1][x3] == EDGE_NONE || cv[x2][x3] == EDGE_NONE || cv[y1][x3] == EDGE_NONE || cv[y2][x3] == EDGE_NONE || !partialRule2_2(x1,x2,x3,y2)) {              continue;            }            for (int y3=0; y3 < numVariables(); y3++) {              if (x1 == y3 || x2 == y3 || x3 == y3 || y1 == y3 || y2 == y3 || ng[y1][y3] == EDGE_GRAY || cv[x1][y3] == EDGE_NONE || cv[x2][y3] == EDGE_NONE || cv[x3][y3] == EDGE_NONE || cv[y1][y3] == EDGE_NONE || cv[y2][y3] == EDGE_NONE || !partialRule2_3(x2,y1,y2,y3)) {                continue;              }              ng[x1][y1]=ng[y1][x1]=EDGE_NONE;              found=true;              continue outer_loop;            }          }        }      }      if (!found) {      }    }  }  for (int i=0; i < numVariables(); i++) {    for (int j=0; j < numVariables(); j++) {      if (ng[i][j] == EDGE_RED) {        ng[i][j]=EDGE_BLUE;      }    }  }  List clustering=new ArrayList();  List<int[]> components=findComponents(ng,numVariables(),EDGE_BLUE);  Iterator<int[]> it=components.iterator();  while (it.hasNext()) {    int component[]=it.next();    printClusterIds(component);    List<int[]> nextClustering=findMaximalCliques(component,ng);    clustering.addAll(trimCliqueList(nextClustering));  }  for (int i=0; i < clustering.size() - 1; i++) {    int max=0;    int max_idx=-1;    for (int j=i; j < clustering.size(); j++) {      if (((int[])clustering.get(j)).length > max) {        max=((int[])clustering.get(j)).length;        max_idx=j;      }    }    Object temp;    temp=clustering.get(i);    clustering.set(i,clustering.get(max_idx));    clustering.set(max_idx,temp);  }  printClustering(clustering);  List<List<Integer>> ids=new ArrayList<>();  List clusterings=chooseClusterings(clustering,ng,ids,false,cv);  List orderedIds=new ArrayList();  List actualClustering=filterAndOrderClusterings(clusterings,ids,orderedIds,ng);  List finalPureModel=purify(actualClustering,orderedIds,forbiddenList);  if (finalPureModel != null) {    printClustering(finalPureModel);  } else {  }  return finalPureModel;}  }
class C{  public boolean isConfigured(){  return preCalcMatchClient.isConfigured();}  }
class C{  public void insertUpdate(DocumentEvent changes,Shape a,ViewFactory f){  updateDamage(changes,a,f);}  }
class C{  public GifAnimationMetaData(@NonNull InputStream stream) throws IOException {  this(GifInfoHandle.openMarkableInputStream(stream,true));}  }
class C{  @Inline public static Address objectStartRef(ObjectReference obj){  return JavaHeader.objectStartRef(obj);}  }
class C{  @Override public void onUIRefreshComplete(PtrFrameLayout frame){  mDrawable.stop();}  }
class C{  public static boolean compareMimeTypes(String concreteType,String desiredType){  final int typeLength=desiredType.length();  if (typeLength == 3 && desiredType.equals("*/*")) {    return true;  }  final int slashpos=desiredType.indexOf('/');  if (slashpos > 0) {    if (typeLength == slashpos + 2 && desiredType.charAt(slashpos + 1) == '*') {      if (desiredType.regionMatches(0,concreteType,0,slashpos + 1)) {        return true;      }    } else     if (desiredType.equals(concreteType)) {      return true;    }  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:56.815 -0500",hash_original_method="0F1242A5312C3945C722AC39BFD87EF2",hash_generated_method="AF5A5C7A32392CF1B3E8A044D8053EBF") public boolean isReplyPathPresent(){  Log.w(LOG_TAG,"isReplyPathPresent: is not supported in CDMA mode.");  return false;}  }
class C{  private int handleJ(String value,DoubleMetaphoneResult result,int index,boolean slavoGermanic){  if (contains(value,index,4,"JOSE") || contains(value,0,4,"SAN ")) {    if ((index == 0 && (charAt(value,index + 4) == ' ') || value.length() == 4) || contains(value,0,4,"SAN ")) {      result.append('H');    } else {      result.append('J','H');    }    index++;  } else {    if (index == 0 && !contains(value,index,4,"JOSE")) {      result.append('J','A');    } else     if (isVowel(charAt(value,index - 1)) && !slavoGermanic && (charAt(value,index + 1) == 'A' || charAt(value,index + 1) == 'O')) {      result.append('J','H');    } else     if (index == value.length() - 1) {      result.append('J',' ');    } else     if (!contains(value,index + 1,1,L_T_K_S_N_M_B_Z) && !contains(value,index - 1,1,"S","K","L")) {      result.append('J');    }    if (charAt(value,index + 1) == 'J') {      index+=2;    } else {      index++;    }  }  return index;}  }
class C{  @Override protected Bitmap decodeJPEGByteArrayAsPurgeable(CloseableReference<PooledByteBuffer> bytesRef,int length,BitmapFactory.Options options){  byte[] suffix=endsWithEOI(bytesRef,length) ? null : EOI;  return decodeFileDescriptorAsPurgeable(bytesRef,length,suffix,options);}  }
class C{  private TimestampReference createCertificateTimestampReference(final Element element) throws DSSException {  final String xmlDigestAlgorithm=DSSXMLUtils.getNode(element,xPathQueryHolder.XPATH__DIGEST_METHOD_ALGORITHM).getTextContent();  final DigestAlgorithm digestAlgorithm=DigestAlgorithm.forXML(xmlDigestAlgorithm);  usedCertificatesDigestAlgorithms.add(digestAlgorithm);  final Element digestValueElement=DSSXMLUtils.getElement(element,xPathQueryHolder.XPATH__DIGEST_VALUE);  final String digestValue=(digestValueElement == null) ? "" : digestValueElement.getTextContent();  final TimestampReference reference=new TimestampReference(digestAlgorithm,digestValue);  return reference;}  }
class C{  protected MBeanServerConnection createMBeanServerConnection() throws NamingException, IOException {  final String containerId=this.getContainer().getId();  if (containerId.startsWith("jboss4")) {    final ClassLoader oldTCCL=Thread.currentThread().getContextClassLoader();    try {      return jndiLookup("jmx/invoker/RMIAdaptor");    }  finally {      Thread.currentThread().setContextClassLoader(oldTCCL);    }  } else {    String username=getLocalContainer().getConfiguration().getPropertyValue(RemotePropertySet.USERNAME);    String password=getLocalContainer().getConfiguration().getPropertyValue(RemotePropertySet.PASSWORD);    Map<String,Object> env=new HashMap<String,Object>();    if (username != null && password != null) {      String[] credentials=new String[]{username,password};      env.put(JMXConnector.CREDENTIALS,credentials);    }    String jndiName;    if (containerId.startsWith("jboss5")) {      jndiName="jmxconnector";    } else     if (containerId.startsWith("jboss6") || containerId.startsWith("jboss7")) {      jndiName="jmxrmi";    } else {      throw new UnsupportedOperationException("Method not supported for the current " + "container: " + containerId);    }    String port=getLocalContainer().getConfiguration().getPropertyValue(JBossPropertySet.JBOSS_JRMP_PORT);    String serviceUrl="service:jmx:rmi:///jndi/rmi://localhost:" + port + "/"+ jndiName;    JMXServiceURL url=new JMXServiceURL(serviceUrl);    getLogger().debug("Creating MBeanServerConnection for service URL '" + serviceUrl + "'",this.getClass().getName());    MBeanServerConnection srvCon;    JMXConnector jmxc=JMXConnectorFactory.connect(url,env);    srvCon=jmxc.getMBeanServerConnection();    getLogger().debug("MBeanServerConnection created",this.getClass().getName());    return srvCon;  }}  }
class C{  public Mapping from(Class<? extends View>... from){  Preconditions.checkArgument(from != null && from.length > 0,"From views cannot be null or empty");  this.from=from;  return this;}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  System.out.print("Enter the number of rows and columns in the array: ");  int rows=input.nextInt();  int columns=input.nextInt();  double[][] array=new double[rows][columns];  System.out.println("Enter the array: ");  for (int i=0; i < array.length; i++) {    for (int j=0; j < array[i].length; j++) {      array[i][j]=input.nextDouble();    }  }  Location max=locateLargest(array);  System.out.println("The location of the largest element is " + max.maxValue + " at ("+ max.row+ ", "+ max.column+ ")");}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SynthPanelUI();}  }
class C{  public MySqlBlockStatement parseBlock(String label){  MySqlBlockStatement block=new MySqlBlockStatement();  block.setLabelName(label);  accept(Token.BEGIN);  parseProcedureStatementList(block.getStatementList());  accept(Token.END);  acceptIdentifier(label);  return block;}  }
class C{  @After public void tearDown(){  comparator=null;}  }
class C{  protected int engineGetOutputSize(int inputLen){  return core.getOutputSize(inputLen);}  }
class C{  protected Node deepCopyInto(Node n){  super.deepCopyInto(n);  SVGOMDocument sd=(SVGOMDocument)n;  sd.localizableSupport=new LocalizableSupport(RESOURCES,getClass().getClassLoader());  sd.referrer=referrer;  sd.url=url;  return n;}  }
class C{  void relaxNodeLogic(final Link l,final PseudoRemovePriorityQueue<Node> pendingNodes,final double currTime,final double currCost,final Node toNode,final PreProcessDijkstra.DeadEndData ddOutData){  addToPendingNodes(l,l.getToNode(),pendingNodes,currTime,currCost,toNode);}  }
class C{  public TCPMasterConnection(InetAddress adr){  address=adr;}  }
class C{  public ParsedTupleQuery(TupleExpr tupleExpr){  super(tupleExpr);}  }
class C{  public void addEdge(int v,int w){  validateVertex(v);  validateVertex(w);  E++;  adj[v].add(w);  adj[w].add(v);}  }
class C{  public void addObservations(int[] source,int[] dest,int[][] conditionals) throws Exception {  int rows=dest.length;  if ((source.length != rows) || (conditionals.length != rows)) {    throw new Exception("Number of observations must match for dest, source and conditionals");  }  if (rows - startObservationTime <= 0) {    return;  }  observations+=(rows - startObservationTime);  if (numOtherInfoContributors != conditionals[0].length) {    throw new Exception(String.format("conditionals does not have the expected number of variables (%d)",numOtherInfoContributors));  }  int pastVal=0;  for (int p=0; p < k; p++) {    pastVal*=base;    pastVal+=dest[p];  }  int destVal, sourceVal, othersVal;  for (int r=startObservationTime; r < rows; r++) {    destVal=dest[r];    sourceVal=source[r - 1];    othersVal=0;    for (int o=0; o < numOtherInfoContributors; o++) {      othersVal*=base;      othersVal+=conditionals[r - 1][o];    }    sourceDestPastOthersCount[sourceVal][destVal][pastVal][othersVal]++;    sourcePastOthersCount[sourceVal][pastVal][othersVal]++;    destPastOthersCount[destVal][pastVal][othersVal]++;    pastOthersCount[pastVal][othersVal]++;    if (k > 0) {      pastVal-=maxShiftedValue[dest[r - k]];      pastVal*=base;      pastVal+=dest[r];    }  }}  }
class C{  public RicfResult ricf2(Graph mag,ICovarianceMatrix covMatrix,double tolerance){  DoubleFactory2D factory=DoubleFactory2D.dense;  Algebra algebra=new Algebra();  DoubleMatrix2D S=new DenseDoubleMatrix2D(covMatrix.getMatrix().toArray());  int p=covMatrix.getDimension();  if (p == 1) {    return new RicfResult(S,S,null,null,1,Double.NaN,covMatrix);  }  List<Node> nodes=new ArrayList<>();  for (  String name : covMatrix.getVariableNames()) {    nodes.add(mag.getNode(name));  }  DoubleMatrix2D omega=factory.diagonal(factory.diagonal(S));  DoubleMatrix2D B=factory.identity(p);  int[] ug=ugNodes(mag,nodes);  int[] ugComp=complement(p,ug);  if (ug.length > 0) {    List<Node> _ugNodes=new LinkedList<>();    for (    int i : ug) {      _ugNodes.add(nodes.get(i));    }    Graph ugGraph=mag.subgraph(_ugNodes);    ICovarianceMatrix ugCov=covMatrix.getSubmatrix(ug);    DoubleMatrix2D lambdaInv=fitConGraph(ugGraph,ugCov,p + 1,tolerance).shat;    omega.viewSelection(ug,ug).assign(lambdaInv);  }  int[][] pars=parentIndices(p,mag,nodes);  int[][] spo=spouseIndices(p,mag,nodes);  int i=0;  double _diff;  while (true) {    i++;    DoubleMatrix2D omegaOld=omega.copy();    DoubleMatrix2D bOld=B.copy();    for (int _v=0; _v < p; _v++) {      if (Arrays.binarySearch(ug,_v) >= 0) {        continue;      }      int[] v=new int[]{_v};      int[] vcomp=complement(p,v);      int[] all=range(0,p - 1);      int[] parv=pars[_v];      int[] spov=spo[_v];      DoubleMatrix2D a6=B.viewSelection(v,parv);      if (spov.length == 0) {        if (parv.length != 0) {          if (i == 1) {            DoubleMatrix2D a1=S.viewSelection(parv,parv);            DoubleMatrix2D a2=S.viewSelection(v,parv);            DoubleMatrix2D a3=algebra.inverse(a1);            DoubleMatrix2D a4=algebra.mult(a2,a3);            a4.assign(Mult.mult(-1));            a6.assign(a4);            DoubleMatrix2D a7=S.viewSelection(parv,v);            DoubleMatrix2D a9=algebra.mult(a6,a7);            DoubleMatrix2D a8=S.viewSelection(v,v);            DoubleMatrix2D a8b=omega.viewSelection(v,v);            a8b.assign(a8);            omega.viewSelection(v,v).assign(a9,PlusMult.plusMult(1));          }        }      } else {        if (parv.length != 0) {          DoubleMatrix2D oInv=new DenseDoubleMatrix2D(p,p);          DoubleMatrix2D a2=omega.viewSelection(vcomp,vcomp);          DoubleMatrix2D a3=algebra.inverse(a2);          oInv.viewSelection(vcomp,vcomp).assign(a3);          DoubleMatrix2D Z=algebra.mult(oInv.viewSelection(spov,vcomp),B.viewSelection(vcomp,all));          int lpa=parv.length;          int lspo=spov.length;          DoubleMatrix2D XX=new DenseDoubleMatrix2D(lpa + lspo,lpa + lspo);          int[] range1=range(0,lpa - 1);          int[] range2=range(lpa,lpa + lspo - 1);          XX.viewSelection(range1,range1).assign(S.viewSelection(parv,parv));          DoubleMatrix2D a11=algebra.mult(S.viewSelection(parv,all),algebra.transpose(Z));          XX.viewSelection(range1,range2).assign(a11);          DoubleMatrix2D a12=XX.viewSelection(range2,range1);          DoubleMatrix2D a13=algebra.transpose(XX.viewSelection(range1,range2));          a12.assign(a13);          DoubleMatrix2D a14=XX.viewSelection(range2,range2);          DoubleMatrix2D a15=algebra.mult(Z,S);          DoubleMatrix2D a16=algebra.mult(a15,algebra.transpose(Z));          a14.assign(a16);          DoubleMatrix1D YX=new DenseDoubleMatrix1D(lpa + lspo);          DoubleMatrix1D a17=YX.viewSelection(range1);          DoubleMatrix1D a18=S.viewSelection(v,parv).viewRow(0);          a17.assign(a18);          DoubleMatrix1D a19=YX.viewSelection(range2);          DoubleMatrix2D a20=S.viewSelection(v,all);          DoubleMatrix1D a21=algebra.mult(a20,algebra.transpose(Z)).viewRow(0);          a19.assign(a21);          DoubleMatrix2D a22=algebra.inverse(XX);          DoubleMatrix1D temp=algebra.mult(algebra.transpose(a22),YX);          DoubleMatrix1D a23=a6.viewRow(0);          DoubleMatrix1D a24=temp.viewSelection(range1);          a23.assign(a24);          a23.assign(Mult.mult(-1));          omega.viewSelection(v,spov).viewRow(0).assign(temp.viewSelection(range2));          omega.viewSelection(spov,v).viewColumn(0).assign(temp.viewSelection(range2));          double tempVar=S.get(_v,_v) - algebra.mult(temp,YX);          DoubleMatrix2D a27=omega.viewSelection(v,spov);          DoubleMatrix2D a28=oInv.viewSelection(spov,spov);          DoubleMatrix2D a29=omega.viewSelection(spov,v).copy();          DoubleMatrix2D a30=algebra.mult(a27,a28);          DoubleMatrix2D a31=algebra.mult(a30,a29);          omega.viewSelection(v,v).assign(tempVar);          omega.viewSelection(v,v).assign(a31,PlusMult.plusMult(1));        } else {          DoubleMatrix2D oInv=new DenseDoubleMatrix2D(p,p);          DoubleMatrix2D a2=omega.viewSelection(vcomp,vcomp);          DoubleMatrix2D a3=algebra.inverse(a2);          oInv.viewSelection(vcomp,vcomp).assign(a3);          DoubleMatrix2D a4=oInv.viewSelection(spov,vcomp);          DoubleMatrix2D a5=B.viewSelection(vcomp,all);          DoubleMatrix2D Z=algebra.mult(a4,a5);          DoubleMatrix2D XX=algebra.mult(algebra.mult(Z,S),Z.viewDice());          DoubleMatrix2D a20=S.viewSelection(v,all);          DoubleMatrix1D YX=algebra.mult(a20,Z.viewDice()).viewRow(0);          DoubleMatrix2D a22=algebra.inverse(XX);          DoubleMatrix1D a23=algebra.mult(algebra.transpose(a22),YX);          DoubleMatrix1D a24=omega.viewSelection(v,spov).viewRow(0);          a24.assign(a23);          DoubleMatrix1D a25=omega.viewSelection(spov,v).viewColumn(0);          a25.assign(a23);          double tempVar=S.get(_v,_v) - algebra.mult(a24,YX);          DoubleMatrix2D a27=omega.viewSelection(v,spov);          DoubleMatrix2D a28=oInv.viewSelection(spov,spov);          DoubleMatrix2D a29=omega.viewSelection(spov,v).copy();          DoubleMatrix2D a30=algebra.mult(a27,a28);          DoubleMatrix2D a31=algebra.mult(a30,a29);          omega.set(_v,_v,tempVar + a31.get(0,0));        }      }    }    DoubleMatrix2D a32=omega.copy();    a32.assign(omegaOld,PlusMult.plusMult(-1));    double diff1=algebra.norm1(a32);    DoubleMatrix2D a33=B.copy();    a33.assign(bOld,PlusMult.plusMult(-1));    double diff2=algebra.norm1(a32);    double diff=diff1 + diff2;    _diff=diff;    if (diff < tolerance)     break;  }  DoubleMatrix2D a34=algebra.inverse(B);  DoubleMatrix2D a35=algebra.inverse(B.viewDice());  DoubleMatrix2D sigmahat=algebra.mult(algebra.mult(a34,omega),a35);  DoubleMatrix2D lambdahat=omega.copy();  DoubleMatrix2D a36=lambdahat.viewSelection(ugComp,ugComp);  a36.assign(factory.make(ugComp.length,ugComp.length,0.0));  DoubleMatrix2D omegahat=omega.copy();  DoubleMatrix2D a37=omegahat.viewSelection(ug,ug);  a37.assign(factory.make(ug.length,ug.length,0.0));  DoubleMatrix2D bhat=B.copy();  return new RicfResult(sigmahat,lambdahat,bhat,omegahat,i,_diff,covMatrix);}  }
class C{  public boolean addAll(int index,Collection<? extends E> c){  rangeCheckForAdd(index);  Object[] a=c.toArray();  int numNew=a.length;  ensureCapacity(size + numNew);  int numMoved=size - index;  if (numMoved > 0) {    System.arraycopy(elementData,index,elementData,index + numNew,numMoved);  }  System.arraycopy(a,0,elementData,index,numNew);  size+=numNew;  return numNew != 0;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static void iterate(final ZyGraph graph,final INodeCallback<NaviNode> callback){  graph.iterate(new NodeBreakpointDecider(callback));}  }
class C{  public void beforeLast() throws SQLException {  notSupported();}  }
class C{  public boolean verifySignature(byte[] signature){  if (forSigning) {    throw new IllegalStateException("RSADigestSigner not initialised for verification");  }  byte[] hash=new byte[digest.getDigestSize()];  digest.doFinal(hash,0);  byte[] sig;  byte[] expected;  try {    sig=rsaEngine.processBlock(signature,0,signature.length);    expected=derEncode(hash);  } catch (  Exception e) {    return false;  }  if (sig.length == expected.length) {    return Arrays.constantTimeAreEqual(sig,expected);  } else   if (sig.length == expected.length - 2) {    int sigOffset=sig.length - hash.length - 2;    int expectedOffset=expected.length - hash.length - 2;    expected[1]-=2;    expected[3]-=2;    int nonEqual=0;    for (int i=0; i < hash.length; i++) {      nonEqual|=(sig[sigOffset + i] ^ expected[expectedOffset + i]);    }    for (int i=0; i < sigOffset; i++) {      nonEqual|=(sig[i] ^ expected[i]);    }    return nonEqual == 0;  } else {    return false;  }}  }
class C{  @NotNull private static Set<String> parseKeywords(@Nullable PropertyValue keywordsValue){  Set<String> result=ContainerUtil.newHashSet();  if (keywordsValue != null) {    for (    String keyword : StringUtil.split(PropertyValue.toString(keywordsValue)," ")) {      result.add(ObjectUtils.notNull(KNOWN_KEYWORD_ALIASES.get(keyword),keyword));    }  }  return result;}  }
class C{  private void showHideFormMessage(){  if (profile.isCommonProfile()) {    formPage.getManagedForm().getMessageManager().addMessage(this,"Common profiles can not be edited",null,IMessageProvider.NONE);  } else   if (excludeRules.isEmpty()) {    formPage.getManagedForm().getMessageManager().addMessage(this,"No exclude rule defined",null,IMessageProvider.INFORMATION);  } else {    formPage.getManagedForm().getMessageManager().removeMessage(this);  }}  }
class C{  public void maybeThrowError() throws IOException {  if (fatalError != null) {    throw fatalError;  }}  }
class C{  @BeforeMethod public void init(){  MockitoAnnotations.initMocks(this);  agentStorageService=new AgentStorageService(new ArrayBlockingQueue<SoftReference<List<? extends DefaultData>>>(1));  agentStorageService.platformIdentDateSaver=agentStatusDataProvider;  agentStorageService.cmrManagementService=cmrManagementService;  agentStorageService.log=LoggerFactory.getLogger(AgentStorageService.class);}  }
class C{  @Override public boolean isFactoryForType(Object type){  return supportedTypes.contains(type) || super.isFactoryForType(type);}  }
class C{  private void takePicture(){  Log.d(TAG,"takePicture: ");  lockFocus();}  }
class C{  public synchronized void add(double minValue,double maxValue){  super.add(minValue);  mMaxValues.add(maxValue);}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone,attributes);}  }
class C{  @Override public int describeContents(){  return 0;}  }
class C{  public boolean isSameAs(FirewallRule r){  if (this.action != r.action || this.any_dl_type != r.any_dl_type || (this.any_dl_type == false && !this.dl_type.equals(r.dl_type)) || this.any_tp_src != r.any_tp_src || (this.any_tp_src == false && !this.tp_src.equals(r.tp_src)) || this.any_tp_dst != r.any_tp_dst || (this.any_tp_dst == false && !this.tp_dst.equals(r.tp_dst)) || this.any_dpid != r.any_dpid || (this.any_dpid == false && !this.dpid.equals(r.dpid)) || this.any_in_port != r.any_in_port || (this.any_in_port == false && !this.in_port.equals(r.in_port)) || this.any_nw_src != r.any_nw_src || (this.any_nw_src == false && !this.nw_src_prefix_and_mask.equals(r.nw_src_prefix_and_mask)) || this.any_dl_src != r.any_dl_src || (this.any_dl_src == false && !this.dl_src.equals(r.dl_src)) || this.any_nw_proto != r.any_nw_proto || (this.any_nw_proto == false && !this.nw_proto.equals(r.nw_proto)) || this.any_nw_dst != r.any_nw_dst || (this.any_nw_dst == false && !this.nw_dst_prefix_and_mask.equals(r.nw_dst_prefix_and_mask)) || this.any_dl_dst != r.any_dl_dst || (this.any_dl_dst == false && this.dl_dst != r.dl_dst)) {    return false;  }  return true;}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  if (fullName != null) {    sb.append("DistributionPoint:\n     " + fullName + "\n");  }  if (relativeName != null) {    sb.append("DistributionPoint:\n     " + relativeName + "\n");  }  if (reasonFlags != null) {    sb.append("   ReasonFlags:\n");    for (int i=0; i < reasonFlags.length; i++) {      if (reasonFlags[i]) {        sb.append("    " + reasonToString(i) + "\n");      }    }  }  if (crlIssuer != null) {    sb.append("   CRLIssuer:" + crlIssuer + "\n");  }  return sb.toString();}  }
class C{  public static ReadStreamOld openRead(Reader reader){  if (reader instanceof ReadStreamOld.StreamReader)   return ((ReadStreamOld.StreamReader)reader).getStream();  ReaderWriterStream s=new ReaderWriterStream(reader,null);  ReadStreamOld is=new ReadStreamOld(s);  try {    is.setEncoding("utf-8");  } catch (  Exception e) {  }  return is;}  }
class C{  public void removeItemDeleteListener(ItemDeleteListener listener){  PacketListener conListener=itemDeleteToListenerMap.remove(listener);  if (conListener != null)   con.removePacketListener(conListener);}  }
class C{  private JMenu makeLogLevelMenu(){  return new LogLevelMenu();}  }
class C{  public boolean clientIsOpen(){  return clientSocket != null;}  }
class C{  public static String extractAddressFromUrl(String url){  String urlToProcess=null;  int protocolEndIndex=url.indexOf("://");  if (protocolEndIndex > 0) {    urlToProcess=url.substring(protocolEndIndex + 3);  } else {    urlToProcess=url;  }  int pos=urlToProcess.indexOf(':');  if (pos >= 0) {    urlToProcess=urlToProcess.substring(0,pos);  }  pos=urlToProcess.indexOf('/');  if (pos >= 0) {    urlToProcess=urlToProcess.substring(0,pos);  }  pos=urlToProcess.indexOf('?');  if (pos >= 0) {    urlToProcess=urlToProcess.substring(0,pos);  }  return urlToProcess;}  }
class C{  public VirtualInvokeExpr newVirtualInvokeExpr(Local base,SootMethodRef method){  return new JVirtualInvokeExpr(base,method,new ArrayList());}  }
class C{  private boolean isBlankOrNullString(String str){  return str == null || str.length() == 0 ? true : false;}  }
class C{  public static BufferedImage createCompatibleImage(BufferedImage image,int width,int height){  return getGraphicsConfiguration().createCompatibleImage(width,height,image.getTransparency());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:42.924 -0500",hash_original_method="2199049C4F400DF72BDDC1A4839F8700",hash_generated_method="567C319D1475F33F5A6EDE3DBA03579F") @Deprecated public static void resetThreadExternalAllocCount(){}  }
class C{  public void readExternal(ObjectInput is) throws IOException {  DataInput dis=is;  if (is instanceof ObjectInputStream) {    ObjectInputStream ois=(ObjectInputStream)is;    dis=new FastBufferedDataInputStream(ois);  }  readHeaderAndPayload(dis);}  }
class C{  public String format(double x){  String r;  if (precision < 0)   precision=6;  int s=1;  if (x < 0) {    x=-x;    s=-1;  }  if (Double.isNaN(x))   r="NaN"; else   if (x == Double.POSITIVE_INFINITY)   r="Inf"; else   if (fmt == 'f')   r=fixedFormat(x); else   if (fmt == 'e' || fmt == 'E' || fmt == 'g' || fmt == 'G')   r=expFormat(x); else   throw new java.lang.IllegalArgumentException();  return pad(sign(s,r));}  }
class C{  public InjectedLanguageBlockWrapper(@NotNull final Block original,final int offset,@Nullable TextRange range,@Nullable Indent indent){  this(original,offset,range,indent,null);}  }
class C{  private boolean isValidRunnerEntry(Map.Entry<String,RunnerSource> entry){  final RunnerSource runnerSourceValue=entry.getValue();  if (runnerSourceValue == null) {    return false;  }  if (!(runnerSourceValue.getLocation().startsWith("https") || runnerSourceValue.getLocation().startsWith("http"))) {    LOG.warn("ProjectService.importProject :: not valid runner source location available only http or https scheme but we get :" + runnerSourceValue);    return false;  }  return true;}  }
class C{  protected AbstractBlock(){  this.id=null;  this.width=0.0;  this.height=0.0;  this.bounds=new Rectangle2D.Float();  this.margin=RectangleInsets.ZERO_INSETS;  this.frame=BlockBorder.NONE;  this.padding=RectangleInsets.ZERO_INSETS;}  }
class C{  public KeyStoreState createBasisForNextState(HistoryAction action) throws CryptoException {  KeyStoreState copy=new KeyStoreState();  copy.history=this.history;  copy.keyStore=KeyStoreUtil.copy(this.keyStore);  if (this.password != null) {    copy.password=new Password(this.password);  }  HashMap<String,Password> keyPairPasswordsCopy=new HashMap<String,Password>();  for (  String alias : entryPasswords.keySet()) {    keyPairPasswordsCopy.put(alias,new Password(entryPasswords.get(alias)));  }  copy.entryPasswords=keyPairPasswordsCopy;  copy.action=action;  return copy;}  }
class C{  private void updateView(){  view.setProjectName(dataObject.getProject().getName());  view.setProjectDescription(dataObject.getProject().getDescription());  view.setProjectVisibility(PUBLIC_VISIBILITY.equals(dataObject.getProject().getVisibility()));  view.setProjectUrl(dataObject.getSource().getProject().getLocation());}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case ExpressionsPackage.LOGICAL_RELATION_EXPRESSION__LEFT_OPERAND:    return getLeftOperand();case ExpressionsPackage.LOGICAL_RELATION_EXPRESSION__OPERATOR:  return getOperator();case ExpressionsPackage.LOGICAL_RELATION_EXPRESSION__RIGHT_OPERAND:return getRightOperand();}return super.eGet(featureID,resolve,coreType);}  }
class C{  String formatLastModified(String fileName){synchronized (dateFormat) {    return dateFormat.format(new Date(FileUtils.lastModified(fileName)));  }}  }
class C{  public void generateCode(BlockScope currentScope){  if ((this.bits & ASTNode.IsReachable) == 0) {    return;  }  finallyMode();  int resourceCount=this.resources.length;  if (resourceCount > 0) {    for (int i=0; i <= resourceCount; i++) {      if (i < resourceCount) {        this.resources[i].generateCode(this.scope);      }    }  }  this.tryBlock.generateCode(this.scope);}  }
class C{  public Set<String> keys(final String pattern){  checkIsInMulti();  client.keys(pattern);  return BuilderFactory.STRING_SET.build(client.getBinaryMultiBulkReply());}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case DatatypePackage.ENTITY__SUPER_TYPE:    setSuperType((Entity)null);  return;case DatatypePackage.ENTITY__PROPERTIES:getProperties().clear();return;}super.eUnset(featureID);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:50.311 -0500",hash_original_method="DCC9B19E3EEEE0A135F8C5BB2CAD40B2",hash_generated_method="9D51ADDE99D51277AE98584BD2113C3D") public boolean equals(Object other){  if (other == null)   return false;  if (!this.getClass().equals(other.getClass()))   return false;  GenericObjectList that=(GenericObjectList)other;  if (this.size() != that.size())   return false;  ListIterator myIterator=this.listIterator();  while (myIterator.hasNext()) {    Object myobj=myIterator.next();    ListIterator hisIterator=that.listIterator();    try {      while (true) {        Object hisobj=hisIterator.next();        if (myobj.equals(hisobj))         break;      }    } catch (    NoSuchElementException ex) {      return false;    }  }  ListIterator hisIterator=that.listIterator();  while (hisIterator.hasNext()) {    Object hisobj=hisIterator.next();    myIterator=this.listIterator();    try {      while (true) {        Object myobj=myIterator.next();        if (hisobj.equals(myobj))         break;      }    } catch (    NoSuchElementException ex) {      return false;    }  }  return true;}  }
class C{  public Location(String unit,int line,int column,int offset){  this(unit,line,column);  this.offset=offset;}  }
class C{  public boolean hasViewCountExt(){  return hasExtension(GphotoViewCount.class);}  }
class C{  public Bundler putBoolean(String key,boolean value){  bundle.putBoolean(key,value);  return this;}  }
class C{  private void resetCTM(){  CTM[0][0]=(float)1.0;  CTM[1][0]=(float)0.0;  CTM[2][0]=minX;  CTM[0][1]=(float)0.0;  CTM[1][1]=(float)1.0;  CTM[2][1]=minY;  CTM[0][2]=(float)0.0;  CTM[1][2]=(float)0.0;  CTM[2][2]=(float)1.0;}  }
class C{  public static org.omg.CORBA.Object remoteToCorba(Remote remoteObj,ORB orb) throws ClassNotFoundException, ConfigurationException {synchronized (CorbaUtils.class) {    if (toStubMethod == null) {      initMethodHandles();    }  }  java.lang.Object stub;  try {    stub=toStubMethod.invoke(null,new java.lang.Object[]{remoteObj});  } catch (  InvocationTargetException e) {    Throwable realException=e.getTargetException();    ConfigurationException ce=new ConfigurationException("Problem with PortableRemoteObject.toStub(); object not exported or stub not found");    ce.setRootCause(realException);    throw ce;  }catch (  IllegalAccessException e) {    ConfigurationException ce=new ConfigurationException("Cannot invoke javax.rmi.PortableRemoteObject.toStub(java.rmi.Remote)");    ce.setRootCause(e);    throw ce;  }  if (!corbaStubClass.isInstance(stub)) {    return null;  }  try {    connectMethod.invoke(stub,new java.lang.Object[]{orb});  } catch (  InvocationTargetException e) {    Throwable realException=e.getTargetException();    if (!(realException instanceof java.rmi.RemoteException)) {      ConfigurationException ce=new ConfigurationException("Problem invoking javax.rmi.CORBA.Stub.connect()");      ce.setRootCause(realException);      throw ce;    }  }catch (  IllegalAccessException e) {    ConfigurationException ce=new ConfigurationException("Cannot invoke javax.rmi.CORBA.Stub.connect()");    ce.setRootCause(e);    throw ce;  }  return (org.omg.CORBA.Object)stub;}  }
class C{  public Element parseURL(URL url){  try {    InputStream stream=Utils.openStream(url);    StringReader reader=convertToXHTML(stream);    return parseXHTML(reader);  } catch (  FileNotFoundException notFound) {    log(notFound.toString(),Level.INFO);    return null;  }catch (  Exception ioException) {    if (getBot().isDebugFine()) {      log(ioException);    } else {      log(ioException.toString(),Level.WARNING);    }    return null;  }}  }
class C{  public boolean confirmEnoughOffsetOthers(int[] othersOffsets,int j,boolean removeDest){  if (countOfOffsetOthers(othersOffsets,j,removeDest) != numOtherInfoContributors) {    throw new RuntimeException("Incorrect number of others in offsets");  }  return true;}  }
class C{  public static URL createURL(String protocol,String host,int port,String file) throws MalformedURLException {  URLStreamHandlerFactory factory=_factories.get(protocol);  if (factory == null) {    return new URL(protocol,host,port,file);  }  URLStreamHandler handler=factory.createURLStreamHandler(protocol);  return new URL(protocol,host,port,file,handler);}  }
class C{  public final boolean isVisualPadding(){  return visualPadding;}  }
class C{  public IcicleRedisResponse(final List<Long> results){  Preconditions.checkNotNull(results);  this.startSequence=results.get(START_SEQUENCE_INDEX);  this.endSequence=results.get(END_SEQUENCE_INDEX);  this.logicalShardId=results.get(LOGICAL_SHARD_ID_INDEX);  this.timeSeconds=results.get(TIME_SECONDS_INDEX);  this.timeMicroseconds=results.get(TIME_MICROSECONDS_INDEX);}  }
class C{  public List<LPlatformConfiguration> listLPlatforms(boolean verbose) throws IaasException {  HashMap<String,String> request=getBasicParameters();  request.put(LParameter.ACTION,LOperation.LIST_LPLATFORM);  request.put(LParameter.VERBOSE,(verbose ? "true" : "false"));  XMLConfiguration result=execute(request);  List<LPlatformConfiguration> resultList=new LinkedList<LPlatformConfiguration>();  if (result != null) {    List<HierarchicalConfiguration> platforms=result.configurationsAt("lplatforms.lplatform");    for (    HierarchicalConfiguration platform : platforms) {      resultList.add(new LPlatformConfiguration(platform));    }  }  return resultList;}  }
class C{  public boolean remove(String key){  key=canonicalCase(key);  TrieNode<V> node=fetch(key);  if (node == null)   return false;  boolean ret=node.getValue() != null;  node.setValue(null);  return ret;}  }
class C{  public static GeometryComparator createComparator(String geometryType,String axis){  GeometryComparator comp=null;  try {switch (geometryType.toUpperCase()) {case "POINT":      if (axis.toUpperCase().equals("X")) {        comp=new PointXComparator();      } else       if (axis.toUpperCase().equals("Y")) {        comp=new PointYComparator();      } else {        throw new Exception("Input axis string not recognized, should be either x or y");      }    break;}} catch (Exception e) {e.printStackTrace();}return comp;}  }
class C{  public static String partiallyUnqualify(String name,String qualifierBase){  if (name == null || !name.startsWith(qualifierBase)) {    return name;  }  return name.substring(qualifierBase.length() + 1);}  }
class C{  public final void addChangeRequest(final int iteration,final PlanStrategy strategy,final String subpopulation,final double newWeight){  delegate.addChangeRequest(iteration,strategy,subpopulation,newWeight);}  }
class C{  protected void clear(){  parts_.clear();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:25.727 -0500",hash_original_method="E46F474FD2867F9C3A785E56A0AD2237",hash_generated_method="E1573FD3B03298E261695FCC31E3E53D") public Base64OutputStream(OutputStream out,int flags){  this(out,flags,true);}  }
class C{  public void testParseRoles(){  List<String> roles=User.parseRoles("role1,role2,role3");  assertEquals(3,roles.size());  assertEquals("role1",roles.get(0));  assertEquals("role2",roles.get(1));  assertEquals("role3",roles.get(2));}  }
class C{  private static String jsonValue(short value){  return String.valueOf(value);}  }
class C{  void checkinCommand(Command command){  pool.add(command);}  }
class C{  @Override public MemChunkHolder<SysMemAllocator> createChunk(long size,boolean autoreclaim){  MemChunkHolder<SysMemAllocator> ret=null;  Long addr=null;  if (currentMemory.get() + size > maxStoreCapacity) {    if (m_activegc) {      m_chunkcollector.waitReclaimCoolDown(m_gctimeout);    }  }  if (currentMemory.get() + size <= maxStoreCapacity) {    addr=m_unsafe.allocateMemory(size);  }  if (null != addr && 0 != addr) {    ret=new MemChunkHolder<SysMemAllocator>(this,addr,size);    ret.setCollector(m_chunkcollector);    if (autoreclaim) {      m_chunkcollector.register(ret);    }    m_chunksize.put(addr,size);    currentMemory.getAndAdd(size);  }  return ret;}  }
class C{  public static int writeLEDouble(byte[] b,int off,double val){  return writeLELong(b,off,Double.doubleToLongBits(val));}  }
class C{  private void restoreClip(Graphics g,Rectangle rect){  g.setClip(rect.getX(),rect.getY(),rect.getSize().getWidth(),rect.getSize().getHeight());}  }
class C{  public float quadratureAbsolute(){  return Math.abs(mRight);}  }
class C{  public AzLineageMetadataEtl(int azkabanInstanceId){  super(azkabanInstanceId,null,0L);  try {    setUp();  } catch (  SQLException e) {    e.printStackTrace();  }}  }
class C{  public static <T>boolean contains(T[] array,T value){  for (  T element : array) {    if (element == null) {      if (value == null)       return true;    } else {      if (value != null && element.equals(value))       return true;    }  }  return false;}  }
class C{  public void addDocumentType(DocumentType documentType){  mDocumentTypes.add(documentType);}  }
class C{  @Override protected void onRemoveSecret(String target,String sourceNick,String sourceLogin,String sourceHostname){  Message message=new Message(service.getString(R.string.message_set_channel_public,sourceNick));  message.setColor(Message.COLOR_BLUE);  server.getConversation(target).addMessage(message);  service.sendBroadcast(Broadcast.createConversationIntent(Broadcast.CONVERSATION_MESSAGE,server.getId(),target));}  }
class C{  public static boolean isAvailableLocale(final Locale locale){  return availableLocaleList().contains(locale);}  }
class C{  @Override protected void moveNodes(){  double oldMSV=meanSquareVel;  meanSquareVel=0;synchronized (getSize()) {    for (    V v : getGraph().getVertices()) {      if (isLocked(v))       continue;      SpringLayout.SpringVertexData vd=springVertexData.getUnchecked(v);      Point2D xyd=apply(v);      int width=getSize().width;      int height=getSize().height;      int level=minLevels.get(v).intValue();      int minY=(int)(level * height / (graphHeight * SPACEFACTOR));      int maxY=level == 0 ? (int)(height / (graphHeight * SPACEFACTOR * 2)) : height;      vd.dx+=2 * vd.repulsiondx + vd.edgedx;      vd.dy+=vd.repulsiondy + vd.edgedy;      double delta=xyd.getY() - minY;      vd.dy-=delta * LEVELATTRACTIONRATE;      if (level == 0)       vd.dy-=delta * LEVELATTRACTIONRATE;      meanSquareVel+=(vd.dx * vd.dx + vd.dy * vd.dy);      xyd.setLocation(xyd.getX() + Math.max(-5,Math.min(5,vd.dx)),xyd.getY() + Math.max(-5,Math.min(5,vd.dy)));      if (xyd.getX() < 0) {        xyd.setLocation(0,xyd.getY());      } else       if (xyd.getX() > width) {        xyd.setLocation(width,xyd.getY());      }      if (xyd.getY() < minY) {        xyd.setLocation(xyd.getX(),minY);      } else       if (xyd.getY() > maxY) {        xyd.setLocation(xyd.getX(),maxY);      }      if (numRoots == 1 && level == 0) {        xyd.setLocation(width / 2,xyd.getY());      }    }  }  if (!stoppingIncrements && Math.abs(meanSquareVel - oldMSV) < MSV_THRESHOLD) {    stoppingIncrements=true;    incrementsLeft=COOL_DOWN_INCREMENTS;  } else   if (stoppingIncrements && Math.abs(meanSquareVel - oldMSV) <= MSV_THRESHOLD) {    incrementsLeft--;    if (incrementsLeft <= 0)     incrementsLeft=0;  }}  }
class C{  public void startBackgroundFetchService(){  LocalNotification n=new LocalNotification();  n.setId(BACKGROUND_FETCH_NOTIFICATION_ID);  cancelLocalNotification(BACKGROUND_FETCH_NOTIFICATION_ID);  scheduleLocalNotification(n,System.currentTimeMillis() + getPreferredBackgroundFetchInterval() * 1000,0);}  }
class C{  public static void printStackTrace(SQLException e){  printStackTrace(e,new PrintWriter(System.err));}  }
class C{  private void hideConversationScope(){  conversationContext.setParameterName("conversationID");}  }
class C{  public static String toString(JSONArray names,JSONArray ja) throws JSONException {  if (names == null || names.length() == 0) {    return null;  }  StringBuffer sb=new StringBuffer();  for (int i=0; i < ja.length(); i+=1) {    JSONObject jo=ja.optJSONObject(i);    if (jo != null) {      sb.append(rowToString(jo.toJSONArray(names)));    }  }  return sb.toString();}  }
class C{  @Ignore public @Test final void testPasswordHistory(){  User u1=new User(TEST_USER1);  BCryptPasswordEncoder enc=new BCryptPasswordEncoder(15);  for (int i=0; i <= User.NUMBER_STORED_PASSWORDS + 5; i++) {    try {      if (i <= User.NUMBER_STORED_PASSWORDS) {        u1.changePassword(enc.encode(String.valueOf(i)),String.valueOf(i),enc);      } else {        LOGGER.debug("Number of password history exceeded, resetting to:0");        u1.changePassword(enc.encode("0"),"0",enc);      }    } catch (    InvalidPasswordException e) {      if (i <= User.NUMBER_STORED_PASSWORDS) {        Assert.fail("Number of acceptable passwords not exceeded");      } else {        LOGGER.debug("OK: Exception because password is already in the list, set password to:" + i);        try {          u1.changePassword(enc.encode(String.valueOf(i)),String.valueOf(i),enc);        } catch (        InvalidPasswordException ex) {          LOGGER.debug("Error" + ex.getMessage());        }      }    }    try {      Thread.sleep(100);    } catch (    InterruptedException e) {      LOGGER.debug("Error" + e.getMessage());    }  }  String oldPassword=null;  for (  UserPassword pw : u1.getPasswords()) {    if (oldPassword == null) {      oldPassword=pw.getPassword();      continue;    }    assertThat(Integer.valueOf(oldPassword)).isGreaterThan(Integer.valueOf(pw.getPassword()));  }}  }
class C{  @Override public boolean afterSampling(Sampler<?,?,?> sampler,SampledVertexDecorator<?> vertex){  return true;}  }
class C{  protected static double weightedDistance(NumberVector v1,NumberVector v2,long[] weightVector){  double sqrDist=0;  for (int i=BitsUtil.nextSetBit(weightVector,0); i >= 0; i=BitsUtil.nextSetBit(weightVector,i + 1)) {    double manhattanI=v1.doubleValue(i) - v2.doubleValue(i);    sqrDist+=manhattanI * manhattanI;  }  return Math.sqrt(sqrDist);}  }
class C{  public boolean isBefore(final T element){  if (element == null) {    return false;  }  return comparator.compare(element,maximum) > 0;}  }
class C{  public boolean hasReason(){  return getReason() != null;}  }
class C{  public static Http2Headers toNettyHttp2(HttpHeaders inputHeaders){  final Http2Headers outputHeaders=new DefaultHttp2Headers(false,inputHeaders.size());  outputHeaders.set(inputHeaders);  outputHeaders.remove(HttpHeaderNames.CONNECTION);  outputHeaders.remove(HttpHeaderNames.TRANSFER_ENCODING);  outputHeaders.remove(HttpHeaderNames.TRAILER);  return outputHeaders;}  }
class C{  @Override public String toString(){  String str=id;  str+=" [triggers=";  for (  Template trigger : triggers) {    str+="(" + trigger + ")"+ " v ";  }  str=str.substring(0,str.length() - 3) + "] with " + rules.size()+ " rules: ";  for (  Rule rule : rules) {    str+=rule.getRuleId() + ",";  }  return str.substring(0,str.length() - 1);}  }
class C{  public void endPut(long start){  long ts=DistributionStats.getStatTime();  this.stats.incInt(eventsQueuedId,1);  long elapsed=ts - start;  this.stats.incLong(eventQueueTimeId,elapsed);}  }
class C{  public AirspaceLayer(){}  }
class C{  void add(View view){  final int id=view.getId();  final Node node=Node.acquire(view);  if (id != View.NO_ID) {    mKeyNodes.put(id,node);  }  mNodes.add(node);}  }
class C{  public final String peek(){  return (m_firstFree <= 0) ? null : m_map[m_firstFree - 1];}  }
class C{  public static boolean confirmAction(String i18nKey,String propertyKey){  return confirmAction(i18nKey,propertyKey,new Object[0]);}  }
class C{  protected RowValue toRowValue(RowDescriptor rowDescriptor,XSQLDA xSqlDa){  final RowValueBuilder row=new RowValueBuilder(rowDescriptor);  for (int idx=0; idx < xSqlDa.sqlvar.length; idx++) {    final XSQLVAR xSqlVar=xSqlDa.sqlvar[idx];    row.setFieldIndex(idx);    if (xSqlVar.sqlind.getValue() == XSQLVAR.SQLIND_NULL) {      row.set(null);    } else {      int bufferOffset=0;      int bufferLength=xSqlVar.sqllen;      if (rowDescriptor.getFieldDescriptor(idx).isVarying()) {        bufferOffset=2;        bufferLength=xSqlVar.sqldata.getShort(0) & 0xff;      }      byte[] data=new byte[bufferLength];      xSqlVar.sqldata.read(bufferOffset,data,0,bufferLength);      row.set(data);    }  }  return row.toRowValue(false);}  }
class C{  private static String removeMnemonicAmpersand(String message){  StringBuilder s=new StringBuilder();  for (int i=0; i < message.length(); i++) {    char current=message.charAt(i);    if (current != '&' || i == message.length() - 1 || message.charAt(i + 1) == '&') {      s.append(current);    }  }  return s.toString();}  }
class C{  @Override public void printState(Vertex state,Writer writer,String indent,Set<Vertex> elements,Network network,long start,long timeout) throws IOException {  if (state.getData() instanceof BinaryData) {    Vertex detached=parseStateByteCode(state,(BinaryData)state.getData(),network);    elements.add(detached);    printState(detached,writer,indent,elements,network,start,timeout);    return;  }  printComments(state,writer,indent,false,network);  writer.write(indent);  writer.write("state ");  printElement(state,writer,indent,null,null,elements,network);  writer.write(" {\r\n");  if ((System.currentTimeMillis() - start) > timeout) {    writer.write(indent);    writer.write("\t");    writer.write("** decompile timeout reached **\r\n");    writer.write(indent);    writer.write("}\r\n");    return;  }  String childIndent=indent + "\t";  Collection<Relationship> expressions=state.orderedRelationships(Primitive.DO);  List<Vertex> newFunctions=new ArrayList<Vertex>();  List<Vertex> newVariables=new ArrayList<Vertex>();  List<Vertex> newStates=new ArrayList<Vertex>();  if (expressions != null) {    for (    Relationship expression : expressions) {      printComments(expression.getTarget(),writer,childIndent,false,network);      if (expression.getTarget().instanceOf(Primitive.CASE)) {        printCase(expression.getTarget(),writer,childIndent,elements,newVariables,newFunctions,newStates,network);      } else       if (expression.getTarget().instanceOf(Primitive.DO)) {        printDo(expression.getTarget().getRelationship(Primitive.DO),writer,indent,elements,newVariables,newFunctions,newStates,network);      } else       if (expression.getTarget().instanceOf(Primitive.GOTO)) {        printGoto(expression.getTarget(),writer,childIndent,elements,newVariables,newFunctions,newStates,network);      } else       if (expression.getTarget().instanceOf(Primitive.PUSH)) {        printPush(expression.getTarget(),writer,childIndent,elements,newVariables,newFunctions,newStates,network);      } else       if (expression.getTarget().instanceOf(Primitive.RETURN)) {        printReturn(expression.getTarget(),writer,childIndent,elements,newVariables,newFunctions,newStates,network);      }    }  }  for (  Vertex variable : newVariables) {    printVariable(variable,writer,childIndent,elements,network);  }  for (  Vertex function : newFunctions) {    printFunction(function,writer,childIndent,elements,network);  }  newFunctions=new ArrayList<Vertex>();  newVariables=new ArrayList<Vertex>();  Collection<Relationship> quotients=state.orderedRelationships(Primitive.QUOTIENT);  if (quotients != null) {    for (    Relationship quotient : quotients) {      writer.write(childIndent);      writer.write("answer");      if (quotient.getCorrectness() < 1.0f) {        writer.write(":");        writer.write(String.format("%.02f",quotient.getCorrectness()));      }      writer.write(" ");      printElement(quotient.getTarget(),writer,indent,newFunctions,newVariables,elements,network);      if (quotient.hasMeta()) {        writer.write(" {\r\n");        Collection<Relationship> previousRelationships=quotient.getMeta().orderedRelationships(Primitive.PREVIOUS);        if (previousRelationships != null) {          for (          Relationship previous : previousRelationships) {            writer.write(childIndent);            if (previous.getCorrectness() > 0) {              writer.write("\tprevious ");            } else {              writer.write("\tprevious ! ");            }            printElement(previous.getTarget(),writer,indent + 1,newFunctions,newVariables,elements,network);            writer.write(";\r\n");          }        }        writer.write(childIndent);        writer.write("}");      }      writer.write(";\r\n");    }    writer.write("\r\n");  }  Collection<Relationship> possibleQuotients=state.orderedRelationships(Primitive.POSSIBLE_QUOTIENT);  if (possibleQuotients != null) {    for (    Relationship quotient : possibleQuotients) {      writer.write(childIndent);      writer.write("//Possible answer:");      printElement(quotient.getTarget(),writer,indent,newFunctions,newVariables,elements,network);      writer.write(";\r\n");    }    writer.write("\r\n");  }  for (  Vertex variable : newVariables) {    printVariable(variable,writer,childIndent,elements,network);  }  for (  Vertex function : newFunctions) {    printFunction(function,writer,childIndent,elements,network);  }  for (  Vertex element : newStates) {    if (element.instanceOf(Primitive.STATE)) {      printState(element,writer,childIndent,elements,network,start,timeout);    }  }  writer.write(indent);  writer.write("}\r\n");  writer.write("\r\n");}  }
class C{  public DeployDeployableOnlineScriptCommand(Configuration configuration,String resourcePath,Deployable deployable){  super(configuration,resourcePath);  this.deployable=deployable;}  }
class C{  public String globalInfo(){  return "Produces a random subsample of a dataset. The original dataset must " + "fit entirely in memory. This filter allows you to specify the maximum " + "\"spread\" between the rarest and most common class. For example, you may "+ "specify that there be at most a 2:1 difference in class frequencies. "+ "When used in batch mode, subsequent batches are NOT resampled.";}  }
class C{  public ListHashTable(int tableSize){  this(tableSize,new StandardHash<V>(tableSize));}  }
class C{  public void enter() throws Exception {  enter(-1,null);}  }
class C{  public void addItem(String item,int i){  int oldMaxLength=maxLength;  boolean hsbWasVis=hsbVis;  boolean vsbWasVis=vsbVis;  int addedIndex=0;  if (i < 0 || i >= items.size()) {    i=-1;  }  currentIndex=-1;  if (i == -1) {    items.addElement(item);    i=0;    addedIndex=items.size() - 1;  } else {    items.insertElementAt(item,i);    addedIndex=i;    for (int j=0; j < selected.length; j++) {      if (selected[j] >= i) {        selected[j]+=1;      }    }  }  if (log.isLoggable(PlatformLogger.Level.FINER)) {    log.finer("Adding item '" + item + "' to "+ addedIndex);  }  boolean repaintItems=!isItemHidden(addedIndex);  maxLength=Math.max(maxLength,getItemWidth(addedIndex));  layout();  int options=0;  if (vsbVis != vsbWasVis || hsbVis != hsbWasVis) {    options=PAINT_ALL;  } else {    options=(repaintItems ? (PAINT_ITEMS) : 0) | ((maxLength != oldMaxLength || (hsbWasVis ^ hsbVis)) ? (PAINT_HSCROLL) : 0) | ((vsb.needsRepaint()) ? (PAINT_VSCROLL) : 0);  }  if (log.isLoggable(PlatformLogger.Level.FINEST)) {    log.finest("Last visible: " + getLastVisibleItem() + ", hsb changed : "+ (hsbWasVis ^ hsbVis)+ ", items changed "+ repaintItems);  }  repaint(addedIndex,getLastVisibleItem(),options);}  }
class C{  public void append(int key,E value){  if (mSize != 0 && key <= mKeys[mSize - 1]) {    put(key,value);    return;  }  if (mGarbage && mSize >= mKeys.length) {    gc();  }  int pos=mSize;  if (pos >= mKeys.length) {    int n=Math.max(pos + 1,mKeys.length * 2);    int[] nkeys=new int[n];    Object[] nvalues=new Object[n];    System.arraycopy(mKeys,0,nkeys,0,mKeys.length);    System.arraycopy(mValues,0,nvalues,0,mValues.length);    mKeys=nkeys;    mValues=nvalues;  }  mKeys[pos]=key;  mValues[pos]=value;  mSize=pos + 1;}  }
class C{  @Override public boolean execute(final String[] params,final String remainder){  if (hasInvalidArguments(params,remainder)) {    return false;  }  final RPAction alter=new RPAction();  alter.put("type","alter");  alter.put("target",params[0]);  alter.put("stat",params[1]);  alter.put("mode",params[2]);  alter.put("value",remainder);  ClientSingletonRepository.getClientFramework().send(alter);  return true;}  }
class C{  void convertDefineClassToClass(Node n){  Preconditions.checkState(n.isCall());  Node superClass=n.getSecondChild();  if (superClass.isNull()) {    superClass=IR.empty();  } else {    superClass.detachFromParent();  }  Node classMembers=new Node(Token.CLASS_MEMBERS);  for (  Node child : n.getLastChild().children()) {    if (child.isStringKey() || child.isMemberFunctionDef()) {      if ("statics".equals(child.getString())) {        for (        Node child2 : child.getFirstChild().children()) {          convertObjectLiteral(classMembers,child2,true);        }      } else {        convertObjectLiteral(classMembers,child,false);      }    } else {      child.detachFromParent();      classMembers.addChildToBack(child);    }  }  Node classNode=new Node(Token.CLASS,IR.empty(),superClass,classMembers);  nodeComments.replaceWithComment(n,classNode);  compiler.reportCodeChange();}  }
class C{  public static Address zero(){  return new Address(ArchitecturalWord.fromLong(0));}  }
class C{  public boolean inFileList(SourceFile f){  boolean isIt=false;  SourceFile[] files=getFileList();  for (int i=0; i < files.length && !isIt; i++) {    if (files[i] == f)     isIt=true;  }  return isIt;}  }
class C{  public static String toChannel(String chan){  if (chan == null) {    return null;  }  if (!validateChannel(chan)) {    return StringUtil.toLowerCase(chan);  }  if (!chan.startsWith("#")) {    chan="#" + chan;  }  return StringUtil.toLowerCase(chan);}  }
class C{  public static <E>SortedSet<E> synchronizedSortedSet(SortedSet<E> set){  if (set == null) {    throw new NullPointerException("set == null");  }  return new SynchronizedSortedSet<E>(set);}  }
class C{  public synchronized static Logic newLogic(de.blau.android.Map map){  if (logic == null) {    logic=new Logic(map);  }  return logic;}  }
class C{  private long hash(final float[] a,final int l,final int k){  final int[] w=weight[k];  long h=init[k];  int i=l;  while (i-- != 0)   h^=(h << 5) + Float.floatToRawIntBits(a[i]) * w[i % NUMBER_OF_WEIGHTS] + (h >>> 2);  return (h & 0x7FFFFFFFFFFFFFFFL) % m;}  }
class C{  public static boolean hasUniqueObject(Collection collection){  if (isEmpty(collection)) {    return false;  }  boolean hasCandidate=false;  Object candidate=null;  for (  Object elem : collection) {    if (!hasCandidate) {      hasCandidate=true;      candidate=elem;    } else     if (candidate != elem) {      return false;    }  }  return true;}  }
class C{  protected void updateTree(DocumentEvent event,Element element){  DocumentEvent.ElementChange ec=event.getChange(element);  if (ec != null) {    Element[] removed=ec.getChildrenRemoved();    Element[] added=ec.getChildrenAdded();    int startIndex=ec.getIndex();    if (removed != null && removed.length > 0) {      int[] indices=new int[removed.length];      for (int counter=0; counter < removed.length; counter++) {        indices[counter]=startIndex + counter;      }      getTreeModel().nodesWereRemoved((TreeNode)element,indices,removed);    }    if (added != null && added.length > 0) {      int[] indices=new int[added.length];      for (int counter=0; counter < added.length; counter++) {        indices[counter]=startIndex + counter;      }      getTreeModel().nodesWereInserted((TreeNode)element,indices);    }  }  if (!element.isLeaf()) {    int startIndex=element.getElementIndex(event.getOffset());    int elementCount=element.getElementCount();    int endIndex=Math.min(elementCount - 1,element.getElementIndex(event.getOffset() + event.getLength()));    if (startIndex > 0 && startIndex < elementCount && element.getElement(startIndex).getStartOffset() == event.getOffset()) {      startIndex--;    }    if (startIndex != -1 && endIndex != -1) {      for (int counter=startIndex; counter <= endIndex; counter++) {        updateTree(event,element.getElement(counter));      }    }  } else {    getTreeModel().nodeChanged((TreeNode)element);  }}  }
class C{  public void addPair(String var,Value val){  map.put(var,val);  cachedHash=0;}  }
class C{  public boolean isOvershooting(){  return (mStartValue < mEndValue && getCurrentValue() > mEndValue) || (mStartValue > mEndValue && getCurrentValue() < mEndValue);}  }
class C{  private void resetAndRestart(){  mAppPrefs.remove(STARTUP_COUNT);  final Intent intent=new Intent(this,SampleActivity.class);  intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);  startActivity(intent);}  }
class C{  public EditTemplateDialog(Shell parent,Template template,boolean edit,boolean isNameModifiable,ContextTypeRegistry registry){  super(parent);  setShellStyle(getShellStyle() | SWT.MAX | SWT.RESIZE);  String title=edit ? JSDTTypeScriptUIMessages.EditTemplateDialog_title_edit : JSDTTypeScriptUIMessages.EditTemplateDialog_title_new;  setTitle(title);  fTemplate=template;  fIsNameModifiable=isNameModifiable;  String delim=new Document().getLegalLineDelimiters()[0];  List contexts=new ArrayList();  for (Iterator it=registry.contextTypes(); it.hasNext(); ) {    TemplateContextType type=(TemplateContextType)it.next();    if (type.getId().equals("javadoc"))     contexts.add(new String[]{type.getId(),type.getName(),"/**" + delim}); else     contexts.add(0,new String[]{type.getId(),type.getName(),""});  }  fContextTypes=(String[][])contexts.toArray(new String[contexts.size()][]);  fValidationStatus=new StatusInfo();  fContextTypeRegistry=registry;  TemplateContextType type=fContextTypeRegistry.getContextType(template.getContextTypeId());  fTemplateProcessor.setContextType(type);}  }
class C{  public IntRange(int min,int max){  this.min=min;  this.max=max;}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  private boolean isReplicationSnapshot(String syncType,String copyMethod){  return SYNC_TYPE_SNAPSHOT.equals(syncType) || (SYNC_TYPE_CLONE.equals(syncType) && SNAPVX_COPY_METHODOLOGY.equals(copyMethod));}  }
class C{  public Vertex processSearch(String keywords,int cascade,boolean fork,String filter,Network network,Map<String,Vertex> processed){  log("Processing search",Level.INFO,keywords);  JSONObject json=null;  try {    json=(JSONObject)processQuery("https://www.wikidata.org/w/api.php?action=wbsearchentities&format=json&limit=1&language=en&search=" + URLEncoder.encode(keywords,"UTF-8"));  } catch (  IOException exception) {    log("https request failed",Level.WARNING,exception);    return null;  }  if (json.isNullObject()) {    return null;  }  JSONArray results=json.getJSONArray("search");  if (results.isEmpty()) {    return null;  }  JSONObject first=results.getJSONObject(0);  String id=first.getString("id");  return processId(id,cascade,fork,filter,network,processed);}  }
class C{  protected FieldAccessorImpl(){  super();}  }
class C{  @SuppressWarnings("unchecked") public void mouseClicked(MouseEvent e){  if (e.getModifiers() == modifiers && e.getClickCount() == 2) {    VisualizationViewer<V,E> vv=(VisualizationViewer<V,E>)e.getSource();    GraphElementAccessor<V,E> pickSupport=vv.getPickSupport();    if (pickSupport != null) {      Function<? super V,String> vs=vv.getRenderContext().getVertexLabelTransformer();      if (vs instanceof MapSettableTransformer) {        MapSettableTransformer<? super V,String> mst=(MapSettableTransformer<? super V,String>)vs;        Layout<V,E> layout=vv.getGraphLayout();        Point2D p=e.getPoint();        V vertex=pickSupport.getVertex(layout,p.getX(),p.getY());        if (vertex != null) {          String newLabel=vs.apply(vertex);          newLabel=JOptionPane.showInputDialog("New Vertex Label for " + vertex);          if (newLabel != null) {            mst.set(vertex,newLabel);            vv.repaint();          }          return;        }      }      Function<? super E,String> es=vv.getRenderContext().getEdgeLabelTransformer();      if (es instanceof MapSettableTransformer) {        MapSettableTransformer<? super E,String> mst=(MapSettableTransformer<? super E,String>)es;        Layout<V,E> layout=vv.getGraphLayout();        Point2D p=e.getPoint();        Point2D ip=vv.getRenderContext().getMultiLayerTransformer().inverseTransform(Layer.VIEW,p);        E edge=pickSupport.getEdge(layout,ip.getX(),ip.getY());        if (edge != null) {          String newLabel=JOptionPane.showInputDialog("New Edge Label for " + edge);          if (newLabel != null) {            mst.set(edge,newLabel);            vv.repaint();          }          return;        }      }    }    e.consume();  }}  }
class C{  public IdentityHashMap(int initialCapacity,float loadFactor){  if (initialCapacity < 0)   throw new IllegalArgumentException("Illegal Initial Capacity: " + initialCapacity);  if (loadFactor <= 0 || Float.isNaN(loadFactor))   throw new IllegalArgumentException("Illegal Load factor: " + loadFactor);  if (initialCapacity == 0)   initialCapacity=1;  this.loadFactor=loadFactor;  table=new Entry[initialCapacity];  threshold=(int)(initialCapacity * loadFactor);}  }
class C{  public void close(){  if (curReaderDeflatedSet != null)   curReaderDeflatedSet.close();  done=true;}  }
class C{  public void addEntry(int index,T entry){  if (entry == null) {    return;  }  if (mViewHolderController.addEntry(index,entry)) {    notifyDataSetChanged();  }}  }
class C{  protected void sendBatch(){  if (this.hasViews()) {    EventBean[] newData=null;    EventBean[] oldData=null;    if (!currentBatch.isEmpty()) {      newData=currentBatch.toArray(new EventBean[currentBatch.size()]);    }    if ((lastBatch != null) && (!lastBatch.isEmpty())) {      oldData=lastBatch.toArray(new EventBean[lastBatch.size()]);    }    if (viewUpdatedCollection != null) {      viewUpdatedCollection.update(newData,oldData);    }    if ((newData != null) || (oldData != null)) {      if (InstrumentationHelper.ENABLED) {        InstrumentationHelper.get().qViewIndicate(this,lengthBatchViewFactory.getViewName(),newData,oldData);      }      updateChildren(newData,oldData);      if (InstrumentationHelper.ENABLED) {        InstrumentationHelper.get().aViewIndicate();      }    }  }  lastBatch=currentBatch;  currentBatch=new ArrayDeque<EventBean>();}  }
class C{  public void add(final String name,final String value){  String[] values=metadata.get(name);  if (values == null) {    set(name,value);  } else {    String[] newValues=new String[values.length + 1];    System.arraycopy(values,0,newValues,0,values.length);    newValues[newValues.length - 1]=value;    metadata.put(name,newValues);  }}  }
class C{  private List<double[]> generateWeights(int divisions){  List<double[]> result=new ArrayList<double[]>();  double[] weight=new double[problem.getNumberOfObjectives()];  generateRecursive(result,weight,problem.getNumberOfObjectives(),divisions,divisions,0);  return result;}  }
class C{  private static synchronized void endTransaction(Connection C,boolean successful) throws AdeException {  logger.trace("endTransaction() -->entry");  try {    if (successful) {      C.commit();    } else {      C.rollback();    }    C.setAutoCommit(true);  } catch (  Throwable t) {    surfaceThrowable("endTransaction() invoked Connection method",t);    throw adeExceptionOf(t);  }  logger.trace("endTransaction() <-- exit");}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.VARIABLE_STATEMENT___GET_VAR_DECL:    return getVarDecl();case N4JSPackage.VARIABLE_STATEMENT___IS_BLOCK_SCOPED:  return isBlockScoped();}return super.eInvoke(operationID,arguments);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  CodeContext(Context ctx,Node node){  super(ctx,node);switch (node.op) {case DO:case WHILE:case FOR:case FINALLY:case SYNCHRONIZED:    this.breakLabel=new Label();  this.contLabel=new Label();break;case SWITCH:case TRY:case INLINEMETHOD:case INLINENEWINSTANCE:this.breakLabel=new Label();break;default :if ((node instanceof Statement) && (((Statement)node).labels != null)) {this.breakLabel=new Label();}}}  }
class C{  public void registerContentObserver(Uri uri,ContentObserver observer){  contentResolver.registerContentObserver(uri,false,observer);}  }
class C{  public static void main(String args[]){  String source="/Users/thomas/Development/opus_home/matsim4opus/output/output_plans.xml.gz";  String target="/Users/thomas/Development/opus_home/matsim4opus/tmp/blalbla.xml.gz";  FileCopy.moveFileOrDirectory(source,target);}  }
class C{  public NormalizedEuclideanDistance(){}  }
class C{  @Override protected int calcDamagePerHit(){  double toReturn=wtype.getDamage();  if (bDirect) {    toReturn+=toHit.getMoS() / 3;  } else   if (bGlancing) {    toReturn=(int)Math.floor(toReturn / 2.0);  }  if (game.getOptions().booleanOption(OptionsConstants.AC_TAC_OPS_RANGE) && (nRange > wtype.getRanges(weapon)[RangeType.RANGE_LONG])) {    toReturn=(int)Math.floor(toReturn * .75);  }  if (game.getOptions().booleanOption(OptionsConstants.AC_TAC_OPS_LOS_RANGE) && (nRange > wtype.getRanges(weapon)[RangeType.RANGE_EXTREME])) {    toReturn=(int)Math.floor(toReturn * .5);  }  return (int)Math.ceil(toReturn);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case MappingPackage.ENTITY_ATTRIBUTE_SOURCE__ATTRIBUTE:    setAttribute((ModelAttribute)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public void testSneakyBeanProperties() throws Exception {  ObjectMapper mapper=new ObjectMapper();  StringLongMapBean bean=mapper.readValue("{\"value\":{\"a\":123}}",StringLongMapBean.class);  assertNotNull(bean);  Map<String,Long> map=bean.value;  assertEquals(1,map.size());  assertEquals(Long.valueOf(123),map.get("a"));  StringListBean bean2=mapper.readValue("{\"value\":[\"...\"]}",StringListBean.class);  assertNotNull(bean2);  List<String> list=bean2.value;  assertSame(GenericList.class,list.getClass());  assertEquals(1,list.size());  assertEquals("...",list.get(0));}  }
class C{  public boolean isSigned(){  return signed;}  }
class C{  private void onWifiP2pConnectionChanged(Context context,Intent intent){  NetworkInfo info=(NetworkInfo)intent.getParcelableExtra(WifiP2pManager.EXTRA_NETWORK_INFO);  if (info.isConnected()) {    Log.i(TAG,"Wifi P2P connected");  } else {    Log.i(TAG,"Wifi P2P disconnected");  }}  }
class C{  public void actionPerformed(ActionEvent e){  String cmd=e.getActionCommand();  if (cmd.equals("Cut")) {  } else   if (cmd.equals("Copy")) {    textArea.copy();  } else   if (cmd.equals("Paste")) {  }}  }
class C{  public static <E>ImmutableList<E> of(E e1,E e2,E e3){  return construct(e1,e2,e3);}  }
class C{  @Override public void writeStartElement(String namespaceURI,String localName) throws XMLStreamException {  writeStartElement(null,localName,namespaceURI);}  }
class C{  public void userForeground(int userId){synchronized (mPackagesLock) {    UserInfo user=mUsers.get(userId);    long now=System.currentTimeMillis();    if (user == null || user.partial) {      Slog.w(LOG_TAG,"userForeground: unknown user #" + userId);      return;    }    if (now > EPOCH_PLUS_30_YEARS) {      user.lastLoggedInTime=now;      writeUserLocked(user);    }  }}  }
class C{  public boolean isBoolean(int index){  return m_booleanCols.isInRange(index);}  }
class C{  public TotalTargetCountStatus(final Long totalTargetCount){  this(Collections.emptyList(),totalTargetCount);}  }
class C{  public NetworkResponse(int statusCode,byte[] data,Map<String,String> headers,boolean notModified,long networkTimeMs){  this.statusCode=statusCode;  this.data=data;  this.headers=headers;  this.notModified=notModified;  this.networkTimeMs=networkTimeMs;}  }
class C{  @Override public boolean isBusy(){  return false;}  }
class C{  public ConfigFormatException(String s){  super(s);}  }
class C{  public SemBicScoreImages(List<DataModel> dataModels){  if (dataModels == null) {    throw new NullPointerException();  }  List<SemBicScore> semBicScores=new ArrayList<>();  for (  DataModel model : dataModels) {    if (model instanceof DataSet) {      DataSet dataSet=(DataSet)model;      if (!dataSet.isContinuous()) {        throw new IllegalArgumentException("Datasets must be continuous.");      }      SemBicScore semBicScore=new SemBicScore(new CovarianceMatrixOnTheFly(dataSet));      semBicScore.setPenaltyDiscount(penaltyDiscount);      semBicScores.add(semBicScore);    } else     if (model instanceof ICovarianceMatrix) {      SemBicScore semBicScore=new SemBicScore((ICovarianceMatrix)model);      semBicScore.setPenaltyDiscount(penaltyDiscount);      semBicScores.add(semBicScore);    } else {      throw new IllegalArgumentException("Only continuous data sets and covariance matrices may be used as input.");    }  }  List<Node> variables=semBicScores.get(0).getVariables();  for (int i=2; i < semBicScores.size(); i++) {    semBicScores.get(i).setVariables(variables);  }  this.semBicScores=semBicScores;  this.variables=variables;  this.sampleSize=semBicScores.get(0).getSampleSize();  setParameter1(2.0);}  }
class C{  private void addLogEntryForAuditLogData(DataService ds,Product product,String locale,boolean isDescriptionLocalized,boolean isShortDescriptionLocalized){  BESAuditLogEntry logEntry=createAuditLogEntry(ds,ServiceAuditLogOperation.LOCALIZE_SERVICE,product);  logEntry.addParameter(AuditLogParameter.LOCALE,locale);  logEntry.addParameter(AuditLogParameter.DESCRIPTION,toYesOrNo(isDescriptionLocalized));  logEntry.addParameter(AuditLogParameter.SHORT_DESCRIPTION,toYesOrNo(isShortDescriptionLocalized));  AuditLogData.add(logEntry);}  }
class C{  public InitHeap(){  super(Harness.options,"Init Heap","Initial Heap Size",Integer.valueOf(System.getProperty("mmtk.harness.heap.initial","384")));}  }
class C{  private void addRules(IAccessRule[][] accessRules,ArrayList<List<IAccessRule>> collect){  for (int i=0; i < accessRules.length; i++) {    IAccessRule[] libRules=accessRules[i];    List<IAccessRule> list=collect.get(i);    if (!list.isEmpty()) {      IAccessRule lastRule=list.get(list.size() - 1);      if (lastRule.getPattern().equals(ALL_PATTERN)) {        continue;      }    }    for (int j=0; j < libRules.length; j++) {      list.add(libRules[j]);    }  }}  }
class C{  private void parseOther(Node node){  String endUserConfReqId=null;  String deviceID=null;  String uuidValue=null;  String aaIPCallBreakOut=null;  String csIPCallBreakOut=null;  String rcsIPVideoCallUpgradeFromCS=null;  String rcsIPVideoCallUpgradeOnCapError=null;  String beIPVideoCallUpgradeAttemptEarly=null;  String maxMsrpLengthExtensions=null;  String callComposerTimerIdle=null;  Node childnode=node.getFirstChild();  if (childnode != null) {    do {      if (childnode.getNodeName().equals("characteristic")) {        if (childnode.getAttributes().getLength() > 0) {          Node typenode=childnode.getAttributes().getNamedItem("type");          if (typenode != null) {            if (typenode.getNodeValue().equalsIgnoreCase("transportProto")) {              parseTransportProtocol(childnode);            }          }        }      }      if (endUserConfReqId == null) {        if ((endUserConfReqId=getValueByParamName("endUserConfReqId",childnode,TYPE_TXT)) != null) {          mRcsSettings.setEndUserConfirmationRequestUri("".equals(endUserConfReqId) ? null : formatSipUri(endUserConfReqId.trim()));          continue;        }      }      if (deviceID == null) {        if ((deviceID=getValueByParamName("deviceID",childnode,TYPE_INT)) != null) {          mRcsSettings.writeBoolean(RcsSettingsData.USE_IMEI_AS_DEVICE_ID,deviceID.equals("0"));          continue;        }      }      if (uuidValue == null) {        if ((uuidValue=getValueByParamName(UUID_VALUE,childnode,TYPE_TXT)) != null) {          mRcsSettings.writeString(RcsSettingsData.UUID,"".equals(uuidValue) ? null : uuidValue);          continue;        }      }      if (aaIPCallBreakOut == null) {        if ((aaIPCallBreakOut=getValueByParamName("IPCallBreakOut",childnode,TYPE_INT)) != null) {          mRcsSettings.writeBoolean(RcsSettingsData.IPVOICECALL_BREAKOUT_AA,aaIPCallBreakOut.equals("1"));          continue;        }      }      if (csIPCallBreakOut == null) {        if ((csIPCallBreakOut=getValueByParamName("IPCallBreakOutCS",childnode,TYPE_INT)) != null) {          mRcsSettings.writeBoolean(RcsSettingsData.IPVOICECALL_BREAKOUT_CS,csIPCallBreakOut.equals("1"));          continue;        }      }      if (rcsIPVideoCallUpgradeFromCS == null) {        if ((rcsIPVideoCallUpgradeFromCS=getValueByParamName("rcsIPVideoCallUpgradeFromCS",childnode,TYPE_INT)) != null) {          mRcsSettings.writeBoolean(RcsSettingsData.IPVIDEOCALL_UPGRADE_FROM_CS,rcsIPVideoCallUpgradeFromCS.equals("1"));          continue;        }      }      if (rcsIPVideoCallUpgradeOnCapError == null) {        if ((rcsIPVideoCallUpgradeOnCapError=getValueByParamName("rcsIPVideoCallUpgradeOnCapError",childnode,TYPE_INT)) != null) {          mRcsSettings.writeBoolean(RcsSettingsData.IPVIDEOCALL_UPGRADE_ON_CAPERROR,rcsIPVideoCallUpgradeOnCapError.equals("1"));          continue;        }      }      if (beIPVideoCallUpgradeAttemptEarly == null) {        if ((beIPVideoCallUpgradeAttemptEarly=getValueByParamName("rcsIPVideoCallUpgradeAttemptEarly",childnode,TYPE_INT)) != null) {          mRcsSettings.writeBoolean(RcsSettingsData.IPVIDEOCALL_UPGRADE_ATTEMPT_EARLY,beIPVideoCallUpgradeAttemptEarly.equals("1"));          continue;        }      }      if (maxMsrpLengthExtensions == null) {        if ((maxMsrpLengthExtensions=getValueByParamName("extensionsMaxMSRPSize",childnode,TYPE_INT)) != null) {          mRcsSettings.writeInteger(RcsSettingsData.MAX_MSRP_SIZE_EXTENSIONS,Integer.parseInt(maxMsrpLengthExtensions));          continue;        }      }      if (callComposerTimerIdle == null) {        if ((callComposerTimerIdle=getValueByParamName("callComposerTimerIdle",childnode,TYPE_INT)) != null) {          mRcsSettings.writeInteger(RcsSettingsData.CALL_COMPOSER_INACTIVITY_TIMEOUT,Integer.parseInt(maxMsrpLengthExtensions));        }      }    } while ((childnode=childnode.getNextSibling()) != null);    if (uuidValue == null) {      mRcsSettings.writeString(RcsSettingsData.UUID,DeviceUtils.generateUUID().toString());    }  }}  }
class C{  public static void stopTrace(final JFrame parent,final IDebugger debugger,final TraceLogger logger){  checkArguments(parent,debugger,logger);  if (!debugger.isConnected()) {    return;  }  if (!logger.hasEchoBreakpoints()) {    return;  }  final CStopTraceListener bpl=new CStopTraceListener(debugger,logger);  CProgressDialog.showEndless(parent,"Removing echo breakpoints",bpl);}  }
class C{  @Override public boolean equals(Object other){  return (this == other);}  }
class C{  public InputSource resolveEntity(StylesheetHandler handler,String publicId,String systemId) throws org.xml.sax.SAXException {  return null;}  }
class C{  public void nodesWereInserted(TreeNode node,int[] childIndices){  if (listenerList != null && node != null && childIndices != null && childIndices.length > 0) {    int cCount=childIndices.length;    Object[] newChildren=new Object[cCount];    for (int counter=0; counter < cCount; counter++)     newChildren[counter]=node.getChildAt(childIndices[counter]);    fireTreeNodesInserted(this,getPathToRoot(node),childIndices,newChildren);  }}  }
class C{  public void resetColors(){  for (int i=0; i < upstairs.getNumPoints(); i++) {    DataPointColored point=(DataPointColored)upstairs.getPoint(i);    point.resetActivation();  }  colorManager.updateDataPointColors(upstairs);}  }
class C{  public static <V>CoGbkResult of(TupleTag<V> tag,List<V> data){  return CoGbkResult.empty().and(tag,data);}  }
class C{  public void printStackTrace(java.io.PrintStream s){  printStackTrace(new java.io.PrintWriter(s));}  }
class C{  public static void writeJSONString(Collection collection,Writer out) throws IOException {  if (collection == null) {    out.write("null");    return;  }  boolean first=true;  Iterator iter=collection.iterator();  out.write('[');  while (iter.hasNext()) {    if (first)     first=false; else     out.write(',');    Object value=iter.next();    if (value == null) {      out.write("null");      continue;    }    JSONValue.writeJSONString(value,out);  }  out.write(']');}  }
class C{  public void addChild(SettingsItem child){  children.add(child);}  }
class C{  protected static String LexicalError(boolean EOFSeen,int lexState,int errorLine,int errorColumn,String errorAfter,char curChar){  return ("Lexical error at line " + errorLine + ", column "+ errorColumn+ ".  Encountered: "+ (EOFSeen ? "<EOF> " : ("\"" + addEscapes(String.valueOf(curChar)) + "\"") + " (" + (int)curChar+ "), ")+ "after : \""+ addEscapes(errorAfter)+ "\"");}  }
class C{  @Override public void notifyReply(SprogReply m){  if (running == true) {    byte[] p;    statusA=new int[4];    replyForMe=m;    log.debug("reply received: " + m.toString() + "StatusDue = "+ statusDue);    if (m.isUnsolicited() && m.isOverload()) {      log.error("Overload");    }    if ((statusDue == 40) && monFrame != null) {      log.debug("Sending status request");      tc.sendSprogMessage(SprogMessage.getStatus(),this);      statusDue++;    } else {      if (statusDue == 41) {        String s=replyForMe.toString();        log.debug("Reply received whilst expecting status");        int i=s.indexOf('h');        if (i > -1) {          int milliAmps=(int)((Integer.decode("0x" + s.substring(i + 7,i + 11))) * tc.getAdapterMemo().getSprogType().getCurrentMultiplier());          statusA[0]=milliAmps;          String ampString;          ampString=Float.toString((float)statusA[0] / 1000);          monFrame.updateStatus(ampString);          statusDue=0;        }      } else {        log.debug("Get next packet to send");        SprogSlot s=sendNow.poll();        if (s != null) {          p=s.getPayload();          log.debug("Packet from immediate send queue");        } else {          p=getNextPacket();          if (p != null) {            log.debug("Packet from stack");          }        }        if (p != null) {          sendPacket(p,SprogConstants.S_REPEATS);          log.debug("Packet sent");          if (monFrame != null) {            statusDue++;          }        } else {          log.debug("Start timeout");        }      }    }    restartTimer(100);  }}  }
class C{  public NIOFSDirectory(Path path,LockFactory lockFactory) throws IOException {  super(path,lockFactory);}  }
class C{  public boolean contains(String str){  for (  String text : logs)   if (text != null && text.contains(str))   return true;  return false;}  }
class C{  private XML checksAttributesExistence(Class<?> aClass,String[] attributes){  if (!classExists(aClass))   Error.xmlClassInexistent(this.xmlPath,aClass);  for (  String attributeName : attributes)   try {    aClass.getDeclaredField(attributeName);  } catch (  Exception e) {    Error.attributeInexistent(attributeName,aClass);  }  return this;}  }
class C{  public static Department createDepartment(){  return new DepartmentImpl();}  }
class C{  public static Test suite(){  return (new TestSuite(ConditionalNavigationITCase.class));}  }
class C{  public boolean flushOnCommit(){  return flushOnCommit;}  }
class C{  public void deviceAliasCommit() throws NetworkDeviceControllerException {  if (lastPrompt != SSHPrompt.MDS_CONFIG_DEVICE_ALIAS) {    throw NetworkDeviceControllerException.exceptions.mdsUnexpectedLastPrompt(lastPrompt.toString(),SSHPrompt.MDS_CONFIG_DEVICE_ALIAS.toString());  }  SSHPrompt[] prompts={SSHPrompt.MDS_CONFIG};  StringBuilder buf=new StringBuilder();  String payload=MDSDialogProperties.getString("MDSDialog.config.deviceAlias.commit.cmd");  boolean retryNeeded=true;  for (int retryCount=0; retryCount < sessionLockRetryMax && retryNeeded; retryCount++) {    retryNeeded=false;    lastPrompt=sendWaitFor(payload,defaultTimeout,prompts,buf);    String[] lines=getLines(buf);    String waitReason="";    for (    String line : lines) {      if (line.indexOf(MDSDialogProperties.getString("MDSDialog.deviceAlias.busy")) >= 0 || line.indexOf(MDSDialogProperties.getString("MDSDialog.deviceAlias.locked")) >= 0) {        retryNeeded=true;        waitReason=line;        break;      }    }    if (retryNeeded) {      if (retryCount + 1 >= sessionLockRetryMax) {        _log.error("Devias alias database is busy or locked, gave up after " + sessionLockRetryMax + " retries!");        throw NetworkDeviceControllerException.exceptions.deviceAliasDatabaseLockedOrBusy(retryCount + 1);      } else {        _log.info("Lock/Busy msg: " + waitReason);        _log.info("Devias alias database is busy or locked, will retry after " + defaultTimeout / 1000 + " seconds...");        try {          Thread.sleep(defaultTimeout);        } catch (        InterruptedException ex) {          _log.warn(ex.getLocalizedMessage());        }      }    }  }}  }
class C{  public final void testGetDigestAlgorithm(){  MGF1ParameterSpec aps=new MGF1ParameterSpec(testAlgName);  assertTrue(testAlgName.equals(aps.getDigestAlgorithm()));}  }
class C{  private void checkAddable(String name){  if (name2entry.containsKey(name)) {    throw new IllegalArgumentException("Other filter is using the same name '" + name + "'");  }}  }
class C{  public Number parse(String text,ParsePosition status){  int start=status.index;  int furthest=start;  double bestNumber=Double.NaN;  double tempNumber=0.0;  for (int i=0; i < choiceFormats.length; ++i) {    String tempString=choiceFormats[i];    if (text.regionMatches(start,tempString,0,tempString.length())) {      status.index=start + tempString.length();      tempNumber=choiceLimits[i];      if (status.index > furthest) {        furthest=status.index;        bestNumber=tempNumber;        if (furthest == text.length())         break;      }    }  }  status.index=furthest;  if (status.index == start) {    status.errorIndex=furthest;  }  return new Double(bestNumber);}  }
class C{  public void updateBackground(Drawable drawable){  mBackgroundManager.setDrawable(drawable);}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == TypeArgument.class) {switch (baseOperationID) {case TypeRefsPackage.TYPE_ARGUMENT___GET_TYPE_REF_AS_STRING:      return TypeRefsPackage.DEFERRED_TYPE_REF___GET_TYPE_REF_AS_STRING;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == TypeRef.class) {switch (baseOperationID) {case TypeRefsPackage.TYPE_REF___GET_TYPE_REF_AS_STRING:  return TypeRefsPackage.DEFERRED_TYPE_REF___GET_TYPE_REF_AS_STRING;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public GroovyClassLoader(ClassLoader loader,CompilerConfiguration config){  this(loader,config,true);}  }
class C{  public void addCertificate(BurpCertificate burpCertificate){  rootNode.add(new DefaultMutableTreeNode(burpCertificate));}  }
class C{  private void writeObject(ObjectOutputStream out) throws IOException {  if (diff == null) {    out.writeBoolean(false);  } else {    out.writeBoolean(false);    out.writeUTF(diff);  }}  }
class C{  @Override public int previous(){  CharacterIterator text=getText();  if (cachedBreakPositions != null && positionInCache > 0) {    --positionInCache;    text.setIndex(cachedBreakPositions[positionInCache]);    return cachedBreakPositions[positionInCache];  } else {    cachedBreakPositions=null;    int result=super.previous();    if (cachedBreakPositions != null) {      positionInCache=cachedBreakPositions.length - 2;    }    return result;  }}  }
class C{  private void addDescriptionPanel(){  final JPanel descriptionPanel=new JPanel(new BorderLayout());  descriptionPanel.setMinimumSize(new Dimension(descriptionPanel.getPreferredSize().width,50));  descriptionPanel.add(new JScrollPane(m_descriptionField));  descriptionPanel.setBorder(new TitledBorder("Description" + ":"));  descriptionPanel.setMinimumSize(new Dimension(0,146));  descriptionPanel.setPreferredSize(new Dimension(0,146));  add(descriptionPanel,BorderLayout.CENTER);}  }
class C{  private static boolean createDirectoryIfNeeded(String filePath){  File parentFile=new File(filePath).getParentFile();  if (parentFile.exists()) {    return parentFile.isDirectory();  }  return parentFile.mkdirs();}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public void updateLanguage(){  for (int i=0; i < actions.length; i++) {    actions[i].updateLanguage();  }  try {    _currentWindow.applySettings(false);  } catch (  ApplySettingsException ignored) {  }  _currentWindow.handleWindowOpeningEvent();}  }
class C{  public ObservingEndpoint(InetSocketAddress address){  this.address=address;  this.relations=new CopyOnWriteArrayList<ObserveRelation>();}  }
class C{  public int nodeOrderAndDrIdRaw(){  return nodeOrderDrId;}  }
class C{  public static int[] cs_post(int[] parent,int n){  int j, k=0, post[], w[], head[], next[], stack[];  if (parent == null)   return (null);  post=new int[n];  w=new int[3 * n];  head=w;  next=w;  int next_offset=n;  stack=w;  int stack_offset=2 * n;  for (j=0; j < n; j++)   head[j]=-1;  for (j=n - 1; j >= 0; j--) {    if (parent[j] == -1)     continue;    next[next_offset + j]=head[parent[j]];    head[parent[j]]=j;  }  for (j=0; j < n; j++) {    if (parent[j] != -1)     continue;    k=Scs_tdfs.cs_tdfs(j,k,head,0,next,next_offset,post,0,stack,stack_offset);  }  return post;}  }
class C{  @PUT @Path("/resetcustomcounters") @Produces(MediaType.APPLICATION_JSON) @Description("Resets Argus system monitoring custom counters.") public Response resetCustomCounters(@Context HttpServletRequest req){  validatePrivilegedUser(req);  managementService.resetCustomCounters();  return Response.status(Status.OK).build();}  }
class C{  public DrawerBuilder withAccountHeader(@NonNull AccountHeader accountHeader){  return withAccountHeader(accountHeader,false);}  }
class C{  public static void write(Word w){  writeHex(w,BYTES_IN_ADDRESS);}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  System.out.print("Enter an index for a Fibonacci number: ");  int index=input.nextInt();  System.out.println("The Fibonacci number at index " + index + " is "+ fib(index));}  }
class C{  @Override public void onSortByName(){  mSorter.sortMoviesByName(mListMovies);  mAdapter.notifyDataSetChanged();}  }
class C{  public static boolean isSafeMemoryAccessModeEnabled(){  return MySafeDelegator.isSafeMemoryAccessModeEnabled();}  }
class C{  public void testAssumptionFailure(Failure failure){}  }
class C{  public int copyLinesFrom(MDDOrder otherOrder,boolean counter,boolean copyASI){  if (isProcessed() || isPosted() || otherOrder == null)   return 0;  MDDOrderLine[] fromLines=otherOrder.getLines(false,null);  int count=0;  for (int i=0; i < fromLines.length; i++) {    MDDOrderLine line=new MDDOrderLine(this);    PO.copyValues(fromLines[i],line,getAD_Client_ID(),getAD_Org_ID());    line.setDD_Order_ID(getDD_Order_ID());    line.setOrder(this);    if (!copyASI) {      line.setM_AttributeSetInstance_ID(0);    }    line.setQtyDelivered(Env.ZERO);    line.setQtyReserved(Env.ZERO);    line.setDateDelivered(null);    line.setProcessed(false);    if (line.save(get_TrxName()))     count++;  }  if (fromLines.length != count)   log.log(Level.SEVERE,"Line difference - From=" + fromLines.length + " <> Saved="+ count);  return count;}  }
class C{  public void replaceFromToWithFromTo(int from,int to,ObjectArrayList other,int otherFrom,int otherTo){  if (otherFrom > otherTo) {    throw new IndexOutOfBoundsException("otherFrom: " + otherFrom + ", otherTo: "+ otherTo);  }  if (this == other && to - from != otherTo - otherFrom) {    replaceFromToWithFromTo(from,to,partFromTo(otherFrom,otherTo),0,otherTo - otherFrom);    return;  }  int length=otherTo - otherFrom + 1;  int diff=length;  int theLast=from - 1;  if (to >= from) {    diff-=(to - from + 1);    theLast=to;  }  if (diff > 0) {    beforeInsertDummies(theLast + 1,diff);  } else {    if (diff < 0) {      removeFromTo(theLast + diff,theLast - 1);    }  }  if (length > 0) {    System.arraycopy(other.elements,otherFrom,elements,from,length);  }}  }
class C{  public void saveDomain(){  saveDomain(editorTab.getShownFile());  system.refreshDomain();}  }
class C{  public void populateMetrics(Map<String,String> metrics){  String name=metrics.get(CtsTest.PACKAGE_NAME_METRIC);  if (name != null) {    setName(name);  }  String digest=metrics.get(CtsTest.PACKAGE_DIGEST_METRIC);  if (digest != null) {    setDigest(digest);  }  if (DeviceInfoCollector.APP_PACKAGE_NAME.equals(getAppPackageName())) {    storeDeviceMetrics(metrics);  } else {    mMetrics.putAll(metrics);  }}  }
class C{  public T caseConditionalExpression(ConditionalExpression object){  return null;}  }
class C{  public static String dumpString(DataBuffer buffer,Charset charset){  Assert.notNull(charset,"'charset' must not be null");  byte[] bytes=dumpBytes(buffer);  return new String(bytes,charset);}  }
class C{  private static boolean isName(String s){  int n=s.length();  if (n == 0) {    return false;  }  if (!NAME_START_CHARS.contains(s.codePointAt(0))) {    return false;  }  for (int i=1; i < n; ++i) {    if (!NAME_CHARS.contains(s.charAt(i))) {      return false;    }  }  return true;}  }
class C{  protected void addFromChannelsPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Endpoint_fromChannels_feature"),getString("_UI_PropertyDescriptor_description","_UI_Endpoint_fromChannels_feature","_UI_Endpoint_type"),EipPackage.Literals.ENDPOINT__FROM_CHANNELS,true,false,true,null,null,null));}  }
class C{  @Override public ReturnValue go(String[] args) throws Exception {  ApplicationContext applicationContext=createApplicationContext();  ReturnValue returnValue=parseCommandLineArguments(args,applicationContext);  if (returnValue != null) {    return returnValue;  }  S3FileTransferRequestParamsDto params=S3FileTransferRequestParamsDto.builder().localPath(argParser.getStringValue(localPathOpt)).s3AccessKey(argParser.getStringValue(s3AccessKeyOpt)).s3SecretKey(argParser.getStringValue(s3SecretKeyOpt)).s3Endpoint(argParser.getStringValue(s3EndpointOpt)).maxThreads(maxThreads).httpProxyHost(argParser.getStringValue(httpProxyHostOpt)).httpProxyPort(httpProxyPort).socketTimeout(argParser.getIntegerValue(socketTimeoutOpt)).build();  DownloaderController controller=applicationContext.getBean(DownloaderController.class);  RegServerAccessParamsDto regServerAccessParamsDto=RegServerAccessParamsDto.builder().regServerHost(regServerHost).regServerPort(regServerPort).useSsl(useSsl).username(argParser.getStringValue(usernameOpt)).password(argParser.getStringValue(passwordOpt)).build();  controller.performDownload(regServerAccessParamsDto,argParser.getFileValue(manifestPathOpt),params);  return ReturnValue.SUCCESS;}  }
class C{  public Plan buildQueryPlan() throws Exception {  validateOperatorGraph();  connectOperators();  ISink sink=findSinkOperator();  Plan queryPlan=new Plan(sink);  return queryPlan;}  }
class C{  void readBytes(byte[] buffer) throws IOException {  mDexFile.readFully(buffer);}  }
class C{  public static CharSequence formatActivityTime(long time){  return DateUtils.formatSameDayTime(time,System.currentTimeMillis(),DateFormat.MEDIUM,DateFormat.MEDIUM);}  }
class C{  public void windowGainedFocus(WindowEvent e){  ((WindowFocusListener)a).windowGainedFocus(e);  ((WindowFocusListener)b).windowGainedFocus(e);}  }
class C{  public static HttpResponse redirect(String url,RedirectStatusCode code){  return builder(HttpResponse.of("")).set(null,code.getStatusCode()).set(null,Headers.of("Location",url)).build();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:25.639 -0500",hash_original_method="1F13790E730E0CCC2AC5BFBAA0385051",hash_generated_method="D298F494DD520E539E8C56F1D85453BE") private FloatMath(){}  }
class C{  public TechnicalServiceActiveException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public void testConstruction(){  PolynomialTerm term0=new PolynomialTerm(1.0,new int[]{0});  PolynomialTerm term1=new PolynomialTerm(1.0,new int[]{1});  PolynomialTerm term2=new PolynomialTerm(1.0,new int[]{2,3});  List terms=new ArrayList();  terms.add(term0);  terms.add(term1);  terms.add(term2);  Polynomial p=new Polynomial(terms);  System.out.println(p);}  }
class C{  public static org.oscm.vo.VOTechnicalServiceOperation convertToApi(org.oscm.internal.vo.VOTechnicalServiceOperation oldVO){  if (oldVO == null) {    return null;  }  org.oscm.vo.VOTechnicalServiceOperation newVO=new org.oscm.vo.VOTechnicalServiceOperation();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setOperationId(oldVO.getOperationId());  newVO.setOperationName(oldVO.getOperationName());  newVO.setOperationDescription(oldVO.getOperationDescription());  if (oldVO.getOperationParameters() != null) {    for (    org.oscm.internal.vo.VOServiceOperationParameter tmp : oldVO.getOperationParameters()) {      newVO.getOperationParameters().add(convertToApi(tmp));    }  }  return newVO;}  }
class C{  protected void onUpdate(){}  }
class C{  private void writeFilePostResource(StringBuilder sb,String path){  sb.append("className=\"" + DIR_RESOURCE_SET + "\" base=\"");  sb.append(getFileHandler().getParent(path).replace("&","&amp;"));  sb.append("\" internalPath=\"");  sb.append(getFileHandler().getName(path).replace("&","&amp;"));}  }
class C{  public void clearWhen(){  super.removeElement(When.KEY);}  }
class C{  public Expression copyInline(Context ctx){  BinaryExpression e=(BinaryExpression)clone();  if (left != null) {    e.left=left.copyInline(ctx);  }  if (right != null) {    e.right=right.copyInline(ctx);  }  return e;}  }
class C{  public long toSeconds(){  return TimeUnit.SECONDS.convert(length,timeUnit);}  }
class C{  public boolean hasFlag(int flag){  return ((mFlags & flag) == flag);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:27.359 -0500",hash_original_method="ABDE2603E3E0183A07EE30B4903BA6A9",hash_generated_method="555DC2254EB46FA798B435DDC602A06D") private static String constructBooleanTrueWhereClause(List<String> columns,boolean includeDrm){  if (columns == null)   return null;  StringBuilder sb=new StringBuilder();  sb.append("(");  for (int i=columns.size() - 1; i >= 0; i--) {    sb.append(columns.get(i)).append("=1 or ");  }  if (columns.size() > 0) {    sb.setLength(sb.length() - 4);  }  sb.append(")");  if (!includeDrm) {    sb.append(" and ");    sb.append(MediaStore.MediaColumns.IS_DRM);    sb.append("=0");  }  return sb.toString();}  }
class C{  public void onDrawerOpened(View drawerView){  super.onDrawerOpened(drawerView);}  }
class C{  private String escapedDirective(String strImage){  int iLast=strImage.lastIndexOf("\\");  String strDirective=strImage.substring(iLast + 1);  boolean bRecognizedDirective=false;  if (isDirective(strDirective.substring(1))) {    bRecognizedDirective=true;  } else   if (rsvc.isVelocimacro(strDirective.substring(1),currentTemplateName)) {    bRecognizedDirective=true;  } else {    if (strDirective.substring(1).equals("if") || strDirective.substring(1).equals("end") || strDirective.substring(1).equals("set")|| strDirective.substring(1).equals("else")|| strDirective.substring(1).equals("elseif")|| strDirective.substring(1).equals("stop")) {      bRecognizedDirective=true;    }  }  if (bRecognizedDirective)   return (strImage.substring(0,iLast / 2) + strDirective); else   return (strImage);}  }
class C{  public void send(String message){}  }
class C{  public synchronized void close() throws IOException {  if (journalWriter == null) {    return;  }  for (  Entry entry : new ArrayList<Entry>(lruEntries.values())) {    if (entry.currentEditor != null) {      entry.currentEditor.abort();    }  }  trimToSize();  journalWriter.close();  journalWriter=null;}  }
class C{  private void prepareTaxInfoForActiveProperty(final PropertyAckNoticeInfo infoBean,BigDecimal totalTax,BigDecimal propertyTax,Ptdemand currDemand,String noticeMode){  for (  final EgDemandDetails demandDetail : currDemand.getEgDemandDetails()) {    if (demandDetail.getEgDemandReason().getEgInstallmentMaster().equals(propertyTaxCommonUtils.getCurrentPeriodInstallment())) {      if (!demandDetail.getEgDemandReason().getEgDemandReasonMaster().getCode().equalsIgnoreCase(PropertyTaxConstants.DEMANDRSN_CODE_PENALTY_FINES)) {        totalTax=totalTax.add(demandDetail.getAmount());      }      if (demandDetail.getEgDemandReason().getEgDemandReasonMaster().getCode().equalsIgnoreCase(PropertyTaxConstants.DEMANDRSN_CODE_EDUCATIONAL_CESS)) {        propertyTax=propertyTax.add(demandDetail.getAmount());      }      if (demandDetail.getEgDemandReason().getEgDemandReasonMaster().getCode().equalsIgnoreCase(PropertyTaxConstants.DEMANDRSN_CODE_LIBRARY_CESS)) {        if (noticeMode.equalsIgnoreCase(CREATE))         infoBean.setNewLibraryCess(demandDetail.getAmount());        if (noticeMode.equalsIgnoreCase(MODIFY) || noticeMode.equalsIgnoreCase(TAXEXEMPT) || noticeMode.equalsIgnoreCase(DEMOLITION))         infoBean.setRevLibraryCess(demandDetail.getAmount());      }      if (demandDetail.getEgDemandReason().getEgDemandReasonMaster().getCode().equalsIgnoreCase(PropertyTaxConstants.DEMANDRSN_CODE_GENERAL_TAX) || demandDetail.getEgDemandReason().getEgDemandReasonMaster().getCode().equalsIgnoreCase(PropertyTaxConstants.DEMANDRSN_CODE_VACANT_TAX)) {        propertyTax=propertyTax.add(demandDetail.getAmount());      }      if (demandDetail.getEgDemandReason().getEgDemandReasonMaster().getCode().equalsIgnoreCase(PropertyTaxConstants.DEMANDRSN_CODE_UNAUTHORIZED_PENALTY)) {        if (noticeMode.equalsIgnoreCase(CREATE))         infoBean.setNewUCPenalty(demandDetail.getAmount());        if (noticeMode.equalsIgnoreCase(MODIFY) || noticeMode.equalsIgnoreCase(TAXEXEMPT) || noticeMode.equalsIgnoreCase(DEMOLITION))         infoBean.setRevUCPenalty(demandDetail.getAmount());      }    }  }  if (noticeMode.equalsIgnoreCase(CREATE)) {    infoBean.setNewTotalTax(totalTax);    infoBean.setNewPropertyTax(propertyTax);  }  if (noticeMode.equalsIgnoreCase(MODIFY) || noticeMode.equalsIgnoreCase(TAXEXEMPT) || noticeMode.equalsIgnoreCase(DEMOLITION)) {    infoBean.setRevTotalTax(totalTax);    infoBean.setRevPropertyTax(propertyTax);  }}  }
class C{  public void put(long key,long value){  lookup(key).setValue(value);}  }
class C{  public static void main(String[] args){  try {    LOGGER.info("Ignite load tests execution started");    LoadTestDriver driver=new IgnitePersistentStoreLoadTest();    driver.runTest("WRITE",WriteWorker.class,WriteWorker.LOGGER_NAME);    driver.runTest("BULK_WRITE",BulkWriteWorker.class,BulkWriteWorker.LOGGER_NAME);    driver.runTest("READ",ReadWorker.class,ReadWorker.LOGGER_NAME);    driver.runTest("BULK_READ",BulkReadWorker.class,BulkReadWorker.LOGGER_NAME);    LOGGER.info("Ignite load tests execution completed");  } catch (  Throwable e) {    LOGGER.error("Ignite load tests execution failed",e);    throw new RuntimeException("Ignite load tests execution failed",e);  } finally {    CassandraHelper.releaseCassandraResources();  }}  }
class C{  Long selectLongWithDefault(Connection c,String key,Long defaultVal,Object... vs) throws PalantirSqlException, PalantirInterruptedException {  return basicSql.selectLongInternal(c,SQLString.getByKey(key,c),vs,defaultVal,false);}  }
class C{  void validConversion(Converter converter,Object expected,Object value){  String valueType=(value == null ? "null" : value.getClass().getName());  String msg="Converting '" + valueType + "' value '"+ value+ "'";  try {    Object result=converter.convert(getExpectedType(),value);    Class<?> resultType=(result == null ? null : result.getClass());    Class<?> expectType=(expected == null ? null : expected.getClass());    assertEquals("TYPE " + msg,expectType,resultType);    assertEquals("VALUE " + msg,expected,result);  } catch (  Exception ex) {    fail(msg + " threw " + ex.toString());  }}  }
class C{  public void testConstrBigIntegerMathContext(){  String a="1231212478987482988429808779810457634781384756794987";  BigInteger bA=new BigInteger(a);  int precision=46;  RoundingMode rm=RoundingMode.CEILING;  MathContext mc=new MathContext(precision,rm);  String res="1231212478987482988429808779810457634781384757";  int resScale=-6;  BigDecimal result=new BigDecimal(bA,mc);  assertEquals("incorrect value",res,result.unscaledValue().toString());  assertEquals("incorrect scale",resScale,result.scale());  BigDecimal bd;  BigInteger bi=new BigInteger("12345678901234567890123456789012345");  BigInteger nbi=new BigInteger("-12345678901234567890123456789012345");  mc=new MathContext(31,RoundingMode.UP);  bd=new BigDecimal(bi,mc);  assertEquals("incorrect value","1.234567890123456789012345678902E+34",bd.toString());  bd=new BigDecimal(nbi,mc);  assertEquals("incorrect value","-1.234567890123456789012345678902E+34",bd.toString());  mc=new MathContext(28,RoundingMode.DOWN);  bd=new BigDecimal(bi,mc);  assertEquals("incorrect value","1.234567890123456789012345678E+34",bd.toString());  bd=new BigDecimal(nbi,mc);  assertEquals("incorrect value","-1.234567890123456789012345678E+34",bd.toString());  mc=new MathContext(33,RoundingMode.CEILING);  bd=new BigDecimal(bi,mc);  assertEquals("incorrect value","1.23456789012345678901234567890124E+34",bd.toString());  bd=new BigDecimal(nbi,mc);  assertEquals("incorrect value","-1.23456789012345678901234567890123E+34",bd.toString());  mc=new MathContext(34,RoundingMode.FLOOR);  bd=new BigDecimal(bi,mc);  assertEquals("incorrect value","1.234567890123456789012345678901234E+34",bd.toString());  bd=new BigDecimal(nbi,mc);  assertEquals("incorrect value","-1.234567890123456789012345678901235E+34",bd.toString());  mc=new MathContext(34,RoundingMode.HALF_EVEN);  bd=new BigDecimal(bi,mc);  assertEquals("incorrect value","1.234567890123456789012345678901234E+34",bd.toString());  bd=new BigDecimal(nbi,mc);  assertEquals("incorrect value","-1.234567890123456789012345678901234E+34",bd.toString());  bd=new BigDecimal(new BigInteger("-12345678901234567890123456789012335"),mc);  assertEquals("incorrect value","-1.234567890123456789012345678901234E+34",bd.toString());  mc=new MathContext(34,RoundingMode.HALF_UP);  bd=new BigDecimal(bi,mc);  assertEquals("incorrect value","1.234567890123456789012345678901235E+34",bd.toString());  bd=new BigDecimal(nbi,mc);  assertEquals("incorrect value","-1.234567890123456789012345678901235E+34",bd.toString());  mc=new MathContext(34,RoundingMode.HALF_DOWN);  bd=new BigDecimal(bi,mc);  assertEquals("incorrect value","1.234567890123456789012345678901234E+34",bd.toString());  bd=new BigDecimal(nbi,mc);  assertEquals("incorrect value","-1.234567890123456789012345678901234E+34",bd.toString());  mc=new MathContext(34,RoundingMode.UNNECESSARY);  try {    bd=new BigDecimal(bi,mc);    fail("No ArithmeticException for RoundingMode.UNNECESSARY");  } catch (  ArithmeticException e) {  }  try {    bd=new BigDecimal(nbi,mc);    fail("No ArithmeticException for RoundingMode.UNNECESSARY");  } catch (  ArithmeticException e) {  }}  }
class C{  @SuppressWarnings("unused") public XmlWriter(Writer w,Set<WriterFlags> f,String encoding) throws IOException {  this.writer=w;  this.flags=f != null ? f : EnumSet.noneOf(WriterFlags.class);  this.encoding=encoding;  this.elementStack=new Stack<Element>();  Element rootElement=createElement(null,null,null);  rootElement.openTagEnded=true;  elementStack.push(rootElement);}  }
class C{  public void inserir(Visitante visitante){  try {    String sql="INSERT INTO tb_visitantes (nome, funcao, cidade, estado, pais, data_visita, descricao, tipo) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";    stm=conector.prepareStatement(sql);    stm.setString(1,visitante.getNome());    stm.setString(2,visitante.getFuncao());    stm.setString(3,visitante.getCidade());    stm.setString(4,visitante.getEstado());    stm.setString(5,visitante.getPais());    stm.setTimestamp(6,Tempo.toTimestamp(visitante.getDataVisita()));    stm.setString(7,visitante.getDescricao());    stm.setString(8,visitante.getTipo());    stm.executeUpdate();    stm.close();  } catch (  SQLException ex) {    Mensagem.erro("Erro ao inserir visitante na base de dados! \n" + ex);  }}  }
class C{  public Day(Date time){  this(time,TimeZone.getDefault(),Locale.getDefault());}  }
class C{  @Override public FilterReply decide(ILoggingEvent event){  Level level=event.getLevel();  if (level == null) {    return FilterReply.DENY;  }  boolean allow=level.isGreaterOrEqual(min) && max.isGreaterOrEqual(level);  return allow ? FilterReply.NEUTRAL : FilterReply.DENY;}  }
class C{  public ToStringBuilder append(String fieldName,double value){  style.append(buffer,fieldName,value);  return this;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public boolean isSingleton(){  return true;}  }
class C{  public static boolean isIntCategory(ClassNode type){  return type == byte_TYPE || type == char_TYPE || type == int_TYPE || type == short_TYPE;}  }
class C{  @Override public void repaint(Rectangle r){}  }
class C{  public void verify() throws InvalidTokenException, ServerException {  verifier.verify(token);}  }
class C{  public float[] elements(){  return elements;}  }
class C{  public NotificationChain basicSetDeclaredUpperBound(TypeRef newDeclaredUpperBound,NotificationChain msgs){  TypeRef oldDeclaredUpperBound=declaredUpperBound;  declaredUpperBound=newDeclaredUpperBound;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,TypeRefsPackage.WILDCARD__DECLARED_UPPER_BOUND,oldDeclaredUpperBound,newDeclaredUpperBound);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public InvocationTargetException(Throwable target){  super((Throwable)null);  this.target=target;}  }
class C{  private int checkToAddLandmark(final InternalLandmarkData fromNode){  if (activeLandmarkIndexes.length == preprocess.getLandmarks().length) {    return -1;  }  double bestTravCostEst=estimateRemainingTravelCost(fromNode);  int bestIndex=-1;  for (int i=0; i < preprocess.getLandmarks().length; i++) {    final double tmpTravTime=estimateRemainingTravelCost(fromNode,i);    if (tmpTravTime > bestTravCostEst) {      bestIndex=i;      bestTravCostEst=tmpTravTime;    }  }  if (bestIndex != -1) {    final int[] newActiveLandmarks=new int[this.activeLandmarkIndexes.length + 1];    System.arraycopy(this.activeLandmarkIndexes,0,newActiveLandmarks,0,this.activeLandmarkIndexes.length);    newActiveLandmarks[this.activeLandmarkIndexes.length]=bestIndex;    this.activeLandmarkIndexes=newActiveLandmarks;  }  return bestIndex;}  }
class C{  public T caseBoolLiteral(BoolLiteral object){  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:03.911 -0500",hash_original_method="D3CE71F13CE971E436333BDFEF7BBD46",hash_generated_method="A6D87286F5C72C2CE859A3AB5D36EB41") protected synchronized void engineSetSeed(byte[] seed){  if (seed == null) {    throw new NullPointerException("seed == null");  }  if (state == NEXT_BYTES) {    System.arraycopy(copies,HASHCOPY_OFFSET,this.seed,HASH_OFFSET,EXTRAFRAME_OFFSET);  }  state=SET_SEED;  if (seed.length != 0) {    updateSeed(seed);  }}  }
class C{  public static byte[] decode(byte[] source,int off,int len,int options) throws java.io.IOException {  if (source == null) {    throw new NullPointerException("Cannot decode null source array.");  }  if (off < 0 || off + len > source.length) {    throw new IllegalArgumentException(String.format("Source array with length %d cannot have offset of %d and process %d bytes.",source.length,off,len));  }  if (len == 0) {    return new byte[0];  } else   if (len < 4) {    throw new IllegalArgumentException("Base64-encoded string must have at least four characters, but length specified was " + len);  }  byte[] DECODABET=getDecodabet(options);  int len34=len * 3 / 4;  byte[] outBuff=new byte[len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiDecode=0;  for (i=off; i < off + len; i++) {    sbiDecode=DECODABET[source[i] & 0xFF];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        b4[b4Posn++]=source[i];        if (b4Posn > 3) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,options);          b4Posn=0;          if (source[i] == EQUALS_SIGN) {            break;          }        }      }    } else {      throw new java.io.IOException(String.format("Bad Base64 input character decimal %d in array position %d",((int)source[i]) & 0xFF,i));    }  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  public boolean isEmpty(){  return size() == 0;}  }
class C{  protected void storeReference(Object obj){  refMap.put(new IdentityWrapper(obj),Short.valueOf(refId++));}  }
class C{  private void onStopAttack(){  attacking=null;}  }
class C{  private boolean signatureRelated(String name){  return SignatureFileVerifier.isSigningRelated(name);}  }
class C{  public static Bitmap process(Bitmap bitmap,int radius){  NativeBlurProcess blur=new NativeBlurProcess();  return blur.blur(bitmap,radius);}  }
class C{  public static String stringFor(int n){switch (n) {case cudaGLMapFlagsNone:    return "cudaGLMapFlagsNone";case cudaGLMapFlagsReadOnly:  return "cudaGLMapFlagsReadOnly";case cudaGLMapFlagsWriteDiscard:return "cudaGLMapFlagsWriteDiscard";}return "INVALID cudaGLMapFlags: " + n;}  }
class C{  public static void isName(String member,String value,boolean flag) throws ValidationException {  maxLength(member,value,ADMValidator.LENGTH_NAME,flag);}  }
class C{  protected boolean intersects(mxCellState state,MouseEvent e){  if (isHotspotEnabled()) {    return mxUtils.intersectsHotspot(state,e.getX(),e.getY(),hotspot,mxConstants.MIN_HOTSPOT_SIZE,mxConstants.MAX_HOTSPOT_SIZE);  }  return true;}  }
class C{  public void zoomIn(){  Matrix save=mViewPortHandler.zoomIn(getWidth() / 2f,-(getHeight() / 2f));  mViewPortHandler.refresh(save,this,true);}  }
class C{  public void delete() throws IOException {  close();  deleteContents(directory);}  }
class C{  public static List<Double> multiply(List<Double> l,double m){  List<Double> out=new ArrayList<>();  for (  double d : l) {    out.add(d * m);  }  return out;}  }
class C{  public long parseTime(String timeStr) throws IllegalArgumentException {  try {    return formatter.parse(timeStr).getTime();  } catch (  Throwable e) {    throw new IllegalArgumentException("Invalid value: pattern: '" + tsPattern + "', value: '"+ timeStr+ "'",e);  }}  }
class C{  public static <T>T checkNotNull(T reference){  if (reference == null) {    throw new NullPointerException();  }  return reference;}  }
class C{  public long traverseRecords(String table,RecordVisitor visitor,boolean distinct){synchronized (lockObject) {    db=getReadableDatabase();    SQLiteQueryBuilder queryBuilderIndex=new SQLiteQueryBuilder();    queryBuilderIndex.setTables(table);    queryBuilderIndex.setDistinct(distinct);    Cursor cursor=queryBuilderIndex.query(db,visitor.getProjection(),visitor.getSelection(),null,null,null,visitor.getOrder());    long ret=traverse(cursor,visitor,new String[]{table});    cursor.close();    cursor=null;    if (this.db != null) {      db.close();      db=null;    }    return ret;  }}  }
class C{  public static void benchmarks(final Object[] list){  List linkedList=new LinkedList();  PStack consPStack=ConsPStack.empty();  List arrayList=new ArrayList();  PVector treePVector=TreePVector.empty();  Set hashSet=new HashSet();  PSet hashTreePSet=HashTreePSet.empty();  PBag hashTreePBag=HashTreePBag.empty();  Map hashMap=new HashMap();  PMap hashTreePMap=HashTreePMap.empty();  PMap intTreePMap=IntTreePMap.empty();  System.out.println("Sequential Lists:");  collectionAdd(linkedList,list);  consPStack=(PStack)pCollectionPlus(consPStack,list);  collectionContains(linkedList,list);  collectionContains(consPStack,list);  collectionNotContains(linkedList,list.length);  collectionNotContains(consPStack,list.length);  listGet(linkedList);  listGet(consPStack);  collectionIterator(linkedList);  collectionIterator(consPStack);  System.out.println("Random-access Lists:");  collectionAdd(arrayList,list);  treePVector=(PVector)pCollectionPlus(treePVector,list);  collectionContains(arrayList,list);  collectionContains(treePVector,list);  collectionNotContains(arrayList,list.length);  collectionNotContains(treePVector,list.length);  listGet(arrayList);  listGet(treePVector);  collectionIterator(arrayList);  collectionIterator(treePVector);  System.out.println("Sets and Bags:");  collectionAdd(hashSet,list);  hashTreePSet=(PSet)pCollectionPlus(hashTreePSet,list);  hashTreePBag=(PBag)pCollectionPlus(hashTreePBag,list);  collectionContains(hashSet,list);  collectionContains(hashTreePSet,list);  collectionContains(hashTreePBag,list);  collectionNotContains(hashSet,list.length);  collectionNotContains(hashTreePSet,list.length);  collectionNotContains(hashTreePBag,list.length);  collectionIterator(hashSet);  collectionIterator(hashTreePSet);  collectionIterator(hashTreePBag);  System.out.println("Maps:");  mapPut(hashMap,list);  hashTreePMap=pMapPlus(hashTreePMap,list);  intTreePMap=pMapPlus(intTreePMap,list);  mapContainsKey(hashMap,list);  mapContainsKey(hashTreePMap,list);  mapContainsKey(intTreePMap,list);  mapNotContainsKey(hashMap,list.length);  mapNotContainsKey(hashTreePMap,list.length);  mapNotContainsKey(intTreePMap,list.length);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public TextFigure(){  this(ResourceBundleUtil.getBundle("org.jhotdraw.draw.Labels").getString("TextFigure.defaultText"));}  }
class C{  public static void showScreen(Window window,int position){  positionScreen(window,position);  showWindow(window);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:23.834 -0400",hash_original_method="FD8EF52F8E4F20B6F1322976C5E13876",hash_generated_method="850FC00378C4F6D6507072006E646275") private void onHealthDevicePropertyChanged(String devicePath,String[] propValues){  log("Health Device : Name of Property is: " + propValues[0] + " Value:"+ propValues[1]);  mBluetoothService.onHealthDevicePropertyChanged(devicePath,propValues[1]);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  void remove(int v){  if (isTOP()) {    throw new OptimizingCompilerException("Unexpected lattice operation");  }  int[] old=numbers;  int[] numbers=new int[CAPACITY];  int index=0;  for (int i=0; i < size; i++) {    if (old[i] == v) {      size--;    } else {      numbers[index++]=old[i];    }  }}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  protected DefaultNumberListHandler(){}  }
class C{  public static void writeMetadataFromString(OFFlowMod.Builder fmb,String inst,Logger log){  if (inst == null || inst.equals("")) {    return;  }  if (fmb.getVersion().compareTo(OFVersion.OF_11) < 0) {    log.error("Write Metadata Instruction not supported in OpenFlow 1.0");    return;  }  String[] tokens=inst.split(",");  if (tokens.length != 2) {    throw new IllegalArgumentException("Tokens " + tokens + " does not have form '[t1, t2]' parsing "+ inst);  }  OFInstructionWriteMetadata.Builder ib=OFFactories.getFactory(fmb.getVersion()).instructions().buildWriteMetadata();  for (int i=0; i < tokens.length; i++) {    String[] keyValue=tokens[0].split("=");    if (keyValue.length != 2) {      throw new IllegalArgumentException("[Key, Value] " + keyValue + " does not have form 'key=value' parsing "+ inst);    }switch (keyValue[0]) {case STR_SUB_WRITE_METADATA_METADATA:      ib.setMetadata(U64.of(Long.parseLong(keyValue[1])));    break;case STR_SUB_WRITE_METADATA_MASK:  ib.setMetadataMask(U64.of(Long.parseLong(keyValue[1])));default :log.error("Invalid String key for OFInstructionWriteMetadata: {}",keyValue[0]);}}log.debug("Appending WriteMetadata instruction: {}",ib.build());appendInstruction(fmb,ib.build());log.debug("All instructions after append: {}",fmb.getInstructions());}  }
class C{  private void updateKeyMaskFields(){  mask=fRanges;  if (fContextual) {    mask|=(1 << 31);    key=fDefaultContextIndex;  } else {    key=fSingleRangeIndex;  }}  }
class C{  @SuppressWarnings("unchecked") public static List<ReplicationRule> parseGetBucketReplication(InputStream responseBody) throws ResponseParseException {  try {    List<ReplicationRule> repRules=new ArrayList<ReplicationRule>();    Element root=getXmlRootElement(responseBody);    List<Element> ruleElems=root.getChildren("Rule");    for (    Element ruleElem : ruleElems) {      ReplicationRule repRule=new ReplicationRule();      repRule.setReplicationRuleID(ruleElem.getChildText("ID"));      Element destination=ruleElem.getChild("Destination");      repRule.setTargetBucketName(destination.getChildText("Bucket"));      repRule.setTargetBucketLocation(destination.getChildText("Location"));      repRule.setReplicationStatus(ReplicationStatus.parse(ruleElem.getChildText("Status")));      if (ruleElem.getChildText("HistoricalObjectReplication").equals("enabled")) {        repRule.setEnableHistoricalObjectReplication(true);      } else {        repRule.setEnableHistoricalObjectReplication(false);      }      repRules.add(repRule);    }    return repRules;  } catch (  Exception e) {    throw new ResponseParseException(e.getMessage(),e);  }}  }
class C{  public double predict(double x){  return beta * x + alpha;}  }
class C{  @Override public CompletableFuture<String> join(){  return CompletableFuture.supplyAsync(null,exec);}  }
class C{  @Override public boolean onCreate(){  mOpenHelper=new DatabaseHelper(getContext());  return true;}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == TypeRef.class) {switch (baseOperationID) {case TypeRefsPackage.TYPE_REF___GET_MODIFIERS_AS_STRING:      return TypeRefsPackage.BASE_TYPE_REF___GET_MODIFIERS_AS_STRING;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public void scrapeMetaData(){  try {    setPosterUrl(result.getPosterUrl());    MediaScrapeOptions options=new MediaScrapeOptions(MediaType.MOVIE);    options.setResult(result);    options.setLanguage(LocaleUtils.toLocale(language.name()));    options.setCountry(MovieModuleManager.MOVIE_SETTINGS.getCertificationCountry());    LOGGER.info("=====================================================");    LOGGER.info("Scraper metadata with scraper: " + metadataProvider.getMediaProvider().getProviderInfo().getId() + ", "+ metadataProvider.getMediaProvider().getProviderInfo().getVersion());    LOGGER.info(options.toString());    LOGGER.info("=====================================================");    metadata=((IMovieMetadataProvider)metadataProvider.getMediaProvider()).getMetadata(options);    setOverview(metadata.getPlot());    setTagline(metadata.getTagline());    if (StringUtils.isBlank(posterUrl) && !metadata.getMediaArt(MediaArtworkType.POSTER).isEmpty()) {      setPosterUrl(metadata.getMediaArt(MediaArtworkType.POSTER).get(0).getPreviewUrl());    }    scraped=true;  } catch (  Exception e) {    LOGGER.error("scrapeMedia",e);    MessageManager.instance.pushMessage(new Message(MessageLevel.ERROR,"MovieChooser","message.scrape.threadcrashed",new String[]{":",e.getLocalizedMessage()}));  }}  }
class C{  public final DoubleGrid3D multiply(DoubleGrid3D withThis){  checkBounds(withThis);  double[][][] otherField=withThis.field;  double[][] ofieldx=null;  double[] ofieldxy=null;  double[][] fieldx=null;  double[] fieldxy=null;  final int width=this.width;  final int height=this.height;  final int length=this.length;  for (int x=0; x < width; x++) {    fieldx=field[x];    ofieldx=otherField[x];    for (int y=0; y < height; y++) {      fieldxy=fieldx[y];      ofieldxy=ofieldx[y];      for (int z=0; z < length; z++)       fieldxy[z]*=ofieldxy[z];    }  }  return this;}  }
class C{  public void addSoundEvent(State event,int resId){  mSoundMap.put(event,resId);}  }
class C{  public static CommentHeader readVorbisCommentHeader(ParsableByteArray headerData) throws ParserException {  verifyVorbisHeaderCapturePattern(0x03,headerData,false);  int length=7;  int len=(int)headerData.readLittleEndianUnsignedInt();  length+=4;  String vendor=headerData.readString(len);  length+=vendor.length();  long commentListLen=headerData.readLittleEndianUnsignedInt();  String[] comments=new String[(int)commentListLen];  length+=4;  for (int i=0; i < commentListLen; i++) {    len=(int)headerData.readLittleEndianUnsignedInt();    length+=4;    comments[i]=headerData.readString(len);    length+=comments[i].length();  }  if ((headerData.readUnsignedByte() & 0x01) == 0) {    throw new ParserException("framing bit expected to be set");  }  length+=1;  return new CommentHeader(vendor,comments,length);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case ExpressionsPackage.BITWISE_OR_EXPRESSION__LEFT_OPERAND:    setLeftOperand((Expression)newValue);  return;case ExpressionsPackage.BITWISE_OR_EXPRESSION__RIGHT_OPERAND:setRightOperand((Expression)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:34.555 -0500",hash_original_method="B955791C600CF45FD34660F52B29F1B8",hash_generated_method="F7DC2D7AD973E0F4C209F9249226E78D") static boolean nonZeroDroppedBits(int numberOfBits,int[] digits){  int intCount=numberOfBits >> 5;  int bitCount=numberOfBits & 31;  int i;  for (i=0; (i < intCount) && (digits[i] == 0); i++) {    ;  }  return ((numberOfBits + digits[0]) == 1);}  }
class C{  KeyGeneratorCore(String name,int defaultKeySize){  this.name=name;  this.defaultKeySize=defaultKeySize;  implInit(null);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:22.785 -0500",hash_original_method="9B9D815856FF54261FC90101B85ADFB3",hash_generated_method="C9E1186290E6D03B836F1EEEF07AEE04") public static Bitmap createScaledBitmap(Bitmap src,int dstWidth,int dstHeight,boolean filter){  Matrix m;synchronized (Bitmap.class) {    m=sScaleMatrix;    sScaleMatrix=null;  }  if (m == null) {    m=new Matrix();  }  final int width=src.getWidth();  final int height=src.getHeight();  final float sx=dstWidth / (float)width;  final float sy=dstHeight / (float)height;  m.setScale(sx,sy);  Bitmap b=Bitmap.createBitmap(src,0,0,width,height,m,filter);synchronized (Bitmap.class) {    if (sScaleMatrix == null) {      sScaleMatrix=m;    }  }  return b;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ACTIVE_DEFINITION___ACTIVE_1:    return isActive_1();case UmplePackage.ACTIVE_DEFINITION___NAME_1:  return getName_1();case UmplePackage.ACTIVE_DEFINITION___CODE_1:return getCode_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public ButtonGroup(){}  }
class C{  public static BufferedOutputStream newOutputStream(Path self) throws IOException {  return new BufferedOutputStream(Files.newOutputStream(self));}  }
class C{  @Deprecated public void logrb(Level level,String sourceClass,String sourceMethod,String bundleName,String msg,Object param1){  if (!isLoggable(level)) {    return;  }  LogRecord lr=new LogRecord(level,msg);  lr.setSourceClassName(sourceClass);  lr.setSourceMethodName(sourceMethod);  Object params[]={param1};  lr.setParameters(params);  doLog(lr,bundleName);}  }
class C{  public ModbusASCIITransport(){}  }
class C{  private boolean backtrack(char[][] board,String word,int start,int i,int j){  if (word.charAt(start) == board[i][j] && start == word.length() - 1) {    return true;  }  if (word.charAt(start) != board[i][j]) {    return false;  }  board[i][j]='#';  boolean res=false;  if (!res && i + 1 < board.length && board[i + 1][j] != '#') {    res=res || backtrack(board,word,start + 1,i + 1,j);  }  if (!res && i - 1 >= 0 && board[i - 1][j] != '#') {    res=res || backtrack(board,word,start + 1,i - 1,j);  }  if (!res && j + 1 < board[i].length && board[i][j + 1] != '#') {    res=res || backtrack(board,word,start + 1,i,j + 1);  }  if (!res && j - 1 >= 0 && board[i][j - 1] != '#') {    res=res || backtrack(board,word,start + 1,i,j - 1);  }  board[i][j]=word.charAt(start);  return res;}  }
class C{  @Override public FrancaModelContainer toFranca(IModelContainer model){  if (!(model instanceof OMGIDLModelContainer)) {    return null;  }  OMGIDL2FrancaTransformation trafo=injector.getInstance(OMGIDL2FrancaTransformation.class);  OMGIDLModelContainer omg=(OMGIDLModelContainer)model;  Map<String,EObject> importedModels=Maps.newLinkedHashMap();  Map<EObject,EObject> transformationMap=Maps.newLinkedHashMap();  lastTransformationIssues=Sets.newLinkedHashSet();  List<TranslationUnit> inputModels=ListExtensions.reverseView(omg.models());  FModel rootModel=null;  String rootName=null;  for (  TranslationUnit unit : inputModels) {    FModel fmodel=trafo.transformToSingleFModel(unit,transformationMap,getBaseTypes());    transformationMap=trafo.getTransformationMap();    lastTransformationIssues.addAll(trafo.getTransformationIssues());    if (trafo.isUsingBaseTypedefs() && baseModel != null) {      if (!importedModels.containsKey("OMGIDLBase.fidl")) {        baseModel.eResource().getContents().clear();        Resource rbm=baseModel.eResource();        importedModels.put("OMGIDLBase.fidl",baseModel);      }    }    if (inputModels.indexOf(unit) == inputModels.size() - 1) {      rootModel=fmodel;      rootName=omg.getFilename(unit);    } else {      String importURI=omg.getFilename(unit) + "." + FrancaPersistenceManager.FRANCA_FILE_EXTENSION;      importedModels.put(importURI,fmodel);    }  }  out.println(IssueReporter.getReportString(lastTransformationIssues));  return new FrancaModelContainer(rootModel,rootName,importedModels);}  }
class C{  public static Token newToken(int ofKind,String image){switch (ofKind) {default :    return new Token(ofKind,image);}}  }
class C{  public boolean containsPartnerTellItem(Connector connector){  boolean result=false;  for (  RaptorTabFolder folder : folders) {    for (int i=0; i < folder.getItemCount(); i++) {      if (folder.getRaptorTabItemAt(i).raptorItem instanceof ChatConsoleWindowItem) {        ChatConsoleWindowItem item=(ChatConsoleWindowItem)folder.getRaptorTabItemAt(i).raptorItem;        if (item.getController().getConnector() == connector && item.getController() instanceof BughousePartnerController) {          result=true;          break;        }      }    }  }  return result;}  }
class C{  @Override public HelpTipObject copy(){  return new HelpTipObject(this);}  }
class C{  public List<PoiNodeRef> queryByPoiId(Long poiId){  if (poiId == null) {    return new ArrayList<>();  }  return queryForEq(PoiTag.POI_ID,poiId);}  }
class C{  private FileCapacity isFileCapacityAcceptable(long fileSize){  if (isFileSizeExceeded(fileSize)) {    return FileCapacity.FILE_TOO_BIG;  }  long freeSpage=getExternalStorageFreeSpace();  boolean storageIsTooSmall=(freeSpage > 0) && fileSize > freeSpage;  if (storageIsTooSmall) {    return FileCapacity.STORAGE_TOO_SMALL;  }  return FileCapacity.OK;}  }
class C{  public void testNextIntBounded(){  SplittableRandom sr=new SplittableRandom();  for (int bound=2; bound < MAX_INT_BOUND; bound+=524959) {    int f=sr.nextInt(bound);    assertTrue(0 <= f && f < bound);    int i=0;    int j;    while (i < NCALLS && (j=sr.nextInt(bound)) == f) {      assertTrue(0 <= j && j < bound);      ++i;    }    assertTrue(i < NCALLS);  }}  }
class C{  public ListNode reverseList(ListNode head){  if (head == null || head.next == null) {    return head;  }  ListNode newHead=reverseList(head.next);  head.next.next=head;  head.next=null;  return newHead;}  }
class C{  public static byte[] parseToSend(Object obj){  if (obj instanceof NoSubscriberEvent) {    return null;  }  byte[] objArray;  if (obj instanceof String) {    try {      objArray=((String)obj).getBytes("UTF-8");    } catch (    UnsupportedEncodingException e) {      objArray=((String)obj).getBytes();    }  } else   if (obj instanceof Integer) {    objArray=ByteBuffer.allocate(4).putInt((Integer)obj).array();  } else   if (obj instanceof Long) {    objArray=ByteBuffer.allocate(8).putLong((Long)obj).array();  } else   if (obj instanceof Float) {    objArray=ByteBuffer.allocate(4).putFloat((Float)obj).array();  } else   if (obj instanceof Double) {    objArray=ByteBuffer.allocate(8).putDouble((Double)obj).array();  } else   if (obj instanceof Short) {    objArray=ByteBuffer.allocate(2).putShort((Short)obj).array();  } else   if (obj instanceof Parcelable) {    objArray=WearBusTools.parcelToByte((Parcelable)obj);  } else {    throw new RuntimeException("Object needs to be Parcelable or Integer, Long, Float, Double, Short.");  }  return objArray;}  }
class C{  public void writeToParcel(Parcel dest,int flags){  dest.writeString(activity);  dest.writeString(cause);  dest.writeString(info);}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public boolean deleteFileOrDirectory(String target,boolean remountAsRw){  boolean result=true;  try {    if (remountAsRw) {      RootTools.remount(target,"RW");    }    if (hasUtil("rm","toolbox")) {      RootTools.log("rm command is available!");      CommandCapture command=new CommandCapture(0,false,"rm -r " + target);      Shell.startRootShell().add(command);      commandWait(Shell.startRootShell(),command);      if (command.getExitCode() != 0) {        RootTools.log("target not exist or unable to delete file");        result=false;      }    } else {      if (checkUtil("busybox") && hasUtil("rm","busybox")) {        RootTools.log("busybox rm command is available!");        CommandCapture command=new CommandCapture(0,false,"busybox rm -rf " + target);        Shell.startRootShell().add(command);        commandWait(Shell.startRootShell(),command);        if (command.getExitCode() != 0) {          RootTools.log("target not exist or unable to delete file");          result=false;        }      }    }    if (remountAsRw) {      RootTools.remount(target,"RO");    }  } catch (  Exception e) {    e.printStackTrace();    result=false;  }  return result;}  }
class C{  public void uninstallUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);  }}  }
class C{  public void closeRunningApp(String deviceID,String app_package) throws InterruptedException, IOException {  cmd.runCommand("adb -s " + deviceID + " shell am force-stop "+ app_package);}  }
class C{  public static CrontabFrequencyExpression crontabScheduleFrequency(int frequency){  return new CrontabFrequencyExpression(constant(frequency));}  }
class C{  @RequestMapping(value="/access-token",method=RequestMethod.POST) @ResponseBody public Object accessToken(HttpServletResponse response,@RequestParam(value="client_id",required=false) String clientId,@RequestParam(value="client_secret",required=false) String clientSecret,@RequestParam(value="grant_type",required=false) String grantType,@RequestParam(value="code",required=false) String code,@RequestParam(value="redirect_uri",required=false) String redirectUri){  setResponseNoCache(response);  if (!GrantType.AUTHORIZATION_CODE.toString().equals(grantType)) {    response.setStatus(HttpServletResponse.SC_BAD_REQUEST);    return new OauthErrorDto(OauthErrors.TokenResponse.UNSUPPORTED_GRANT_TYPE,"grant_type must be authorization_code",DEFAULT_ERROR_URI);  }  if (Strings.isNullOrEmpty(code)) {    response.setStatus(HttpServletResponse.SC_BAD_REQUEST);    return new OauthErrorDto(OauthErrors.TokenResponse.INVALID_REQUEST,"missing code",DEFAULT_ERROR_URI);  }  if (Strings.isNullOrEmpty(clientId)) {    response.setStatus(HttpServletResponse.SC_BAD_REQUEST);    return new OauthErrorDto(OauthErrors.TokenResponse.INVALID_REQUEST,"missing client_id",DEFAULT_ERROR_URI);  }  if (Strings.isNullOrEmpty(redirectUri)) {    response.setStatus(HttpServletResponse.SC_BAD_REQUEST);    return new OauthErrorDto(OauthErrors.TokenResponse.INVALID_REQUEST,"missing redirect_uri",DEFAULT_ERROR_URI);  }  if (!clientAppService.validateApp(clientId,clientSecret)) {    response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);    return new OauthErrorDto(OauthErrors.TokenResponse.INVALID_CLIENT,"invalid client",DEFAULT_ERROR_URI);  }  try {    return clientAppService.createOauthAccessTokenByGrantCode(code,clientId,redirectUri);  } catch (  AccessDeniedException e) {    response.setStatus(HttpServletResponse.SC_BAD_REQUEST);    return new OauthErrorDto(OauthErrors.TokenResponse.INVALID_GRANT,"code is invalid",DEFAULT_ERROR_URI);  }}  }
class C{  public Object convert(Class<?> targetType,Object valueToConvert) throws JavaTypeTranslatorException {  Object rVal=null;  if (valueToConvert instanceof Decode) {    rVal=((Decode)valueToConvert).getCode();    rVal=JavaTypeTranslator.convert(targetType,rVal);  } else {    throw new JavaTypeTranslatorException("Value to convert must be a com.aceva.devtools.valuetype.base.Decode");  }  return (rVal);}  }
class C{  public static boolean bernoulli(double p){  if (!(p >= 0.0 && p <= 1.0))   throw new IllegalArgumentException("Probability must be between 0.0 and 1.0");  return uniform() < p;}  }
